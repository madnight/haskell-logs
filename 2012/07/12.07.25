00:17:43 <startling> has anyone hooked up QuickCheck and Trifecta in their code yet? Not sure how I would do it
00:19:13 <Axman6> I'm not sure anyone apart from edwardk has ever been able to use trifecta
00:20:40 <startling> well uh, I've got everything parsing
00:27:38 <adnap> how do i get information about a typeclass in ghci?
00:28:02 <sordina> adnap: :i Class
00:28:52 <adnap> sordina: thanks
00:37:18 <mroman> @hoogle htmlEntities
00:37:18 <lambdabot> No results found
00:38:25 <mroman> @hoogle encodeHtml
00:38:25 <lambdabot> No results found
00:38:50 <mroman> Isn't hoogle supposed to search through hackage?
00:39:49 <startling> mroman: nope
00:39:53 <Axman6> i think hayoo does
00:40:03 <startling> only some of it. not sure which libraries are included or why, though
00:44:46 <adnap> can i get colors in ghci?
00:47:16 <alpounet> adnap, http://www.haskell.org/haskellwiki/GHCi_in_colour
00:51:12 <startling> how difficult is it to hook into ghc's parser and/or interpreter?
00:51:30 <mikeplus64> adnap: one way you can do it is use ConqueTerm (vim plugin) and set haskell syntax highlighting on
00:51:45 <c_wraith> @hackage hint
00:51:46 <lambdabot> http://hackage.haskell.org/package/hint
00:51:51 <c_wraith> startling: check out hint
00:52:51 <startling> c_wraith: very cool. thanks
00:56:20 <adnap> i installed happstack and i can't follow the data and type signatures of the very first example, which is "main = simpleHTTP nullConf $ ok "Hello, World!"". ":t simpleHTTP" gives "simpleHTTP :: (ToMessage a) => Conf -> ServerPartT IO a -> IO ()". so i think "ok "Hello, World!"" must be of type "ServerPartT IO a -> IO ()". i do ":t ok" and get "ok :: (FilterMonad Response m) => a -> m a". wtf is FilterMonad and how does it relate to "ServerPa
00:58:22 <startling> adnap, it's a typeclass that, presumably, SeverParT is an instance of
01:00:28 <adnap> so, i stated wrongly that "ok "Hello, World!" must be of type "ServerPartT IO a -> IO ()". it must be of type "ServerPartT IO a", 'cause main is of type "IO ()
01:01:30 <adnap> and more precisely, it is of type "ServerPartT IO String" somehow
01:05:29 <quicksilver> adnap: FilterMonad is a class.
01:05:42 <adnap> quicksilver: i know
01:05:57 <quicksilver> ah, startling answered too, sorry.
01:06:34 <adnap> quicksilver: it's all your fault for trying to help me!
01:07:42 <adnap> ":i ServerPartT" shows that "ServerPartT m a" is an instance of "(Monad m) => FilterMonad Response (ServerPartT m)"...
01:09:35 <lucca> are there any libraries for "portably" passing Handles between separate processes?  I don't see any and the System.* stuff doesn't seem to include the necessary pieces
01:10:52 <adnap> can a function be a type somehow? is that what functional dependencies do? i don't understand how a "(FilterMonad Response m) => a -> m a" can be a "ServerPartT IO a"
01:11:18 <quicksilver> adnap: it can't.
01:11:30 <merijn> lucca: Handles are file descriptors and they can't portably be transferred between processes
01:11:33 <quicksilver> ok is of type a -> ma
01:11:41 <quicksilver> ok "foo" is of type m a
01:11:45 <quicksilver> (the "foo" is the a)
01:11:53 <lucca> merijn: POSIX and windows can move fd's...
01:11:58 <adnap> quicksilver: "simpleHTTP :: (ToMessage a) => Conf -> ServerPartT IO a -> IO ()"
01:12:04 <lucca> actually
01:12:06 <lucca> not posix, hmm
01:12:09 <quicksilver> adnap: yes indeed.
01:12:10 <lucca> but unix domain sockets
01:12:18 <merijn> lucca: Only on linux afaik
01:12:18 <adnap> quicksilver: ok "hello" is of type "ServerPartT IO a"
01:12:24 <quicksilver> adnap: yes.
01:12:31 <lucca> and the BSDs, (including OS X)
01:12:32 <quicksilver> but that's now what you just asked.
01:12:49 <merijn> lucca: I know linux has special unix sockets that translate file descriptors, but I'm not sure BSD and OSX support it
01:12:50 <quicksilver> adnap: you said "i don't understand how a "(FilterMonad Response m) => a -> m a" can be a "ServerPartT IO a"
01:13:01 <quicksilver> adnap: you're quite right, that's not possible.
01:13:04 <adnap> quicksilver: my mistake
01:13:09 <quicksilver> adnap: "ServerPartT" is not an function.
01:13:16 <quicksilver> adnap: however, ok is a function.
01:13:24 <quicksilver> adnap: and (ok "foo") is not a function
01:13:26 <lucca> merijn: then it's time for some science.  I'll give it a try.
01:13:28 <quicksilver> because it now has its argument.
01:13:31 <adnap> quicksilver: yes yes
01:13:59 <merijn> lucca: If that's good enough for you, there are Handle to filedescriptor (and vice versa) functions somewhere in System.*
01:14:40 <lucca> merijn: right, that's a start.  I also need to monkey with unix domain sockets, then sending the oob SCM_RIGHTS message.  It's a mess, but doable.
01:15:50 <adnap> so, "ok hello" is made specific due to type inference, but it could in another context be a different type which is an instance of FilterMonad Response m
01:16:51 <quicksilver> adnap: right.
01:17:17 <quicksilver> lucca, merijn: I'm pretty sure that sending fds over sockets is POSIX/SUS although I can't quickly google up proof of it.
01:18:46 <quicksilver> it's certainly mention in the BSD 4.3 manual pages.
01:19:28 <merijn> Like I said, I just don't know about the support in BSD/OSX, but if you say so, you're probably right.
01:20:09 <merijn> Completely unrelated and slightly off-topic: suppose I want to convert LaTeX math into good looking HTML, what would people recommend?
01:20:34 <quicksilver> I've heard people recommend mathjax
01:20:37 <quicksilver> I've not used it myself
01:28:17 <adnap> ":i ServerPartT" does not show that ServerPartT is an instance of MonadPlus, but ":i MonadPlus" does
01:33:18 <bartavelle> is this documentation purposely cryptic, or is that just I am not worthy of understanding ? http://hackage.haskell.org/packages/archive/reducers/3.0/doc/html/Data-Semigroup-Reducer.html
01:36:38 * hackagebot CV 0.3.6.0 - OpenCV based machine vision library (VilleTirronen)
01:43:30 <Nereid> bartavelle: it looks like Reducer c m just means you have a distinguished function c -> m
01:52:47 <bartavelle> Nereid, I meant, I believe I have a clue at what it does, but it would have been nice if I knew what it is for
01:53:43 <Nereid> well it's for folding things, I guess
01:54:29 <locksmith> Rich Hickey recently pushed his implementation of reducers into Clojure. He makes it sound like this is a big deal (http://clojure.com/blog/2012/05/08/reducers-a-library-and-model-for-collection-processing.html), but if so, why isn't it part of the Haskell platform implementation?
01:55:26 <Nereid> lots of things aren't part of the haskell platform
01:56:27 <locksmith> Sure, but why not? Is it a case of lack of manpower, or lack of taste, or what?
01:58:09 <Nereid> also that article looks like it just describes fold
01:58:34 <locksmith> fold, reduce, map ... they're all part of the same thing.
01:58:49 <Nereid> yes, and those things are in the Prelude
01:59:02 <sordina> locksmith: Well HP 2012.2.0.0 was released just shortly after that announcement, that proabably makes its inclusion unlikely. Also there are existing generalizations of fold in haskell. Like Foldable, Traversable.
01:59:22 <Nereid> we've been able to fold/map lists forever
01:59:25 <locksmith> But there's something special about his implementation. It's easily parallelizable.
02:00:15 <Nereid> and we've had a parallel map forever too
02:00:29 <hiredman> locksmith: the reducers "fold" is easily parallelizable because the datastructures it operates on on defined as trees
02:00:48 <hiredman> the reducers "fold" is not the same as haskells
02:00:55 <hiredman> haskell's fold is clojure's reduce
02:01:17 <locksmith> Is the code that's generated actually using all my cores without some special invocation?
02:02:15 <hiredman> the big thing is by implementing map/mapcat/etc in terms of transformations of a reducing/folding function they can take advantage of fold's possible parallelism
02:03:01 <hiredman> locksmith: http://vimeo.com/45561411 is a video of rich talking about reducers
02:03:35 <locksmith> Hiredman: Using the same words to mean close but entirely different things is very confusing to me. Regardless, fold's "possible" parallelism... is it actual? Or someday?
02:04:25 <hiredman> locksmith: fold doesn't promise parallelism, but it may be parallel (and is on maps and vectors, which are defined it terms of trees)
02:05:04 <hiredman> if you are interested in clojure reducers, I recommend the video, it is the best explanation I've seen
02:05:48 <adnap> where is the function text defined? there are many references to it here: http://hackage.haskell.org/packages/archive/blaze-html/0.5.0.0/doc/html/Text-Blaze-Html5.html
02:06:02 <adnap> "text"
02:06:47 <Nereid> @hoogle text
02:06:48 <lambdabot> System.IO data TextEncoding
02:06:48 <lambdabot> GHC.IO.Encoding.Types data TextEncoding
02:06:48 <lambdabot> GHC.IO.Encoding data TextEncoding
02:06:52 <Nereid> hm
02:07:29 <mauke> http://hackage.haskell.org/packages/archive/text/0.11.2.0/doc/html/Data-Text-Internal.html#v:text
02:07:42 <Nereid> that doesn't make sense given the context.
02:08:18 <locksmith> On a similar note, clojure implements many collections and does parallelism. A friend of mine pointed out that this is what makes Clojure special vs other lisps, to him anyway. That instead of lists and more lists, it implements all these immutable functional data types. This brings me to another question: Is Okasaki's Edison package deprecated in favor of the containers package?
02:08:20 <Nereid> anyway, http://holumbus.fh-wedel.de/hayoo/hayoo.html?query=text
02:09:03 <mauke> http://hackage.haskell.org/packages/archive/blaze-markup/0.5.1.0/doc/html/Text-Blaze-Internal.html#v:text
02:09:32 <locksmith> hiredman: thanks for the link to the reducers video.
03:02:11 <BombsAway> Snardbafulator and ##philosophy must be fixed!
03:02:14 <BombsAway> I truly believe that the United States is probably the most empathetic and compassionate country on the planet.
03:02:15 <BombsAway> Those same traits brought decent,hardworking immigrants from every shore looking to escape persecution,better themselves,and raise productive families.Unfortunately,that same compassion has allowed the nigger problem to get out of hand,and damn near out of control.I'm not offering any solution,because all my solutions would get me banned from here. I will say,Niggers or not,I couldn't leave the USA.
03:02:37 <barrucadu> #haskell seems pretty quiet today...
03:03:23 <Nereid> isn't it usually quiet around this time?
03:03:52 * siracusa makes some noise
03:05:03 <Entroacceptor> it's lunchtime here, so /me makes some noises, too
03:05:15 <ciaranm> make some noise for the venga venga boys!
03:07:24 <ocharles> barrucadu: that's cause everyones code is working fine and no one is having any problems
03:07:25 <ocharles> ;)
03:07:41 <barrucadu> Woo!
03:09:46 <sdfgsdgsdfg> snardbafulator must be reigned in!
03:09:47 <sdfgsdgsdfg> Convención Nacional Contra la Imposición, 14 y 15 de julio en San Salvador Atenco.
03:09:47 <sdfgsdgsdfg> CONVOCATORIA Y REGISTRO.
03:09:47 <sdfgsdgsdfg>  Convocatoria.
03:09:47 <sdfgsdgsdfg> A todas las organizaciones y movimientos sociales, a los estudiantes, a los maestros, a los sindicatos, a los trabajadores y empleados, a campesinos y ejidatarios, migrantes, colonos, indígenas, a toda la población, a la CONVENCIÓN NACIONAL contra la imposición a realizarse los días 14 y 15 de julio de 2012, en San Salvador Atenco, bajo el siguiente orden del día:
03:09:48 <sdfgsdgsdfg> 1. Lucha contra la imposición
03:09:48 <sdfgsdgsdfg> 2. Estructura organizativa y construcción de la Convención Nacional
03:09:48 <sdfgsdgsdfg> 3. Programa de lucha
03:10:04 <sdfgsdgsdfg> 1. El proceso electoral estuvo viciado desde hace varios años.  Durante 6 años se realizó una campaña televisiva con recursos públicos millonarios promoviendo a Peña día tras día, influyendo tramposamente en la opinión pública.
03:10:04 <sdfgsdgsdfg> Se usaron programas de gobierno en la compra de votos a cambio de “favores” como créditos para el campo, programa alimentario, programa de apoyo a madres trabajadoras, apoyo para construcción de vivienda, etc. Desviando recursos públicos en más de 20 estados por parte de los gobiernos priistas, multitud de presidentes municipales y ejidales. Con todo lo cual se rebasó con creces el tope de campaña.
03:10:05 <sdfgsdgsdfg> El voto corporativo por parte de los sindicatos y corporaciones charros (SNTE, PEMEX, CFE, FSTSE, CNOP, etc.), obligando a los trabajadores a votar bajo coacción.
03:10:16 <Nereid> @where ops
03:10:17 <lambdabot> shapr Cale glguy dons sjanssen dcoutts Saizan dibblego conal Philippa bos arjanb xerox Heffalump kosmikus wli Pseudonym Igloo quicksilver monochrom Lemmih jmcarthur copumpkin
03:10:23 <barrucadu> huh, they advertise in other languages too
03:10:33 <sdfgsdgsdfg> Todo lo anterior llevó a una elección a favor del candidato priísta. Y para cerrar con broche de oro, como cereza del pastel, están todas las irregularidades ocurridas el 1 de julio durante la elección: urnas abiertas a mitad de proceso, entrega de dinero a cambio de la foto de la boleta, robo de urnas, falta de boletas en casillas especiales, amenazas a observadores ciudadanos, repartición de tarjetas monex y Soriana, lucrando con la necesidad
03:10:33 <sdfgsdgsdfg> El IFE ha sido consciente de todo lo anterior y, en los hechos, se ha convertido en cómplice de la pretendida imposición de Peña Nieto en la presidencia.
03:10:33 <sdfgsdgsdfg> El proceso electoral no garantizó un voto libre, razonado e informado. La imposición en la presidencia de la república de Peña Nieto y el régimen priísta que representa, fue decidido y planeado desde hace mucho y se pretende consumar a como de lugar.
03:10:33 <sdfgsdgsdfg> 2. El PRI es el responsable de la instauración del neoliberalismo en nuestro país y Peña Nieto promete continuar en esa línea.
03:10:40 <ciaranm> who did #haskell annoy? i've not seen this anywhere else
03:11:08 <sdfgsdgsdfg> Snardbafulator and ##philosophy must be fixed!
03:11:28 <sdfgsdgsdfg> Por mandato de los organismos internacionales, impulsado por Miguel de la Madrid y continuado por Carlos Salinas, el neoliberalismo se ha venido imponiendo en México desde hace más de 20 años por todos los presidentes priístas y panistas, con la privatización de prácticamente todas las empresas públicas, el TLC que llevó a la devastación del campo, la entrega a empresas privadas de recursos naturales (bosques, tierras, aguas), el despojo a p
03:11:29 <sdfgsdgsdfg> Peña Nieto promete continuar en esa línea, anunciando la “apertura” (privatización) de PEMEX y de CFE a los privados; promete una reforma hacendaria con el consecuente aumento del IVA a medicinas y alimentos básicos; la reforma laboral con la legalización del despojo de todos los derechos de los trabajadores.
03:11:29 <kloeri> ciaranm: this crap is all over the network
03:12:38 <Entroacceptor> but it made me interested in ##philosophy
03:12:41 <kloeri> it's some retarded kids that thinks they can make demands of freenode staff (obviously that's not going to work)
03:12:58 <ciaranm> i demand you give me cake
03:13:32 <kloeri> mmmcake
03:13:33 <Entroacceptor> I demand that you demand that I give you vegetables instead!
03:13:51 <kloeri> perhaps I should do some baking today :)
03:15:22 <Entroacceptor> on demands, btw http://hitch14.tripod.com/chapter_25.htm
03:16:47 <barrucadu> kloeri: I think baking would be an excellent thing to do. Make a cake in the shape of a lambda.
03:16:58 <Entroacceptor> we demand that!
03:17:06 <kloeri> barrucadu: :)
03:19:46 <trem> find some haskell code that generate the shape of a lambda, you can then make it look like it's of solid gold: http://imageshack.us/photo/my-images/28/imgbwa.png/
03:21:48 <trem> i demand an explicit ray - lambda intersection function
03:22:16 <barrucadu> I demand an explicit cake - barrucadu intersection function.
03:22:49 <sopvop> this function will have side effects
03:22:55 <trem> :-)
03:23:12 <trem> it causes convex sides, to be precise
03:30:34 <nand`> what are exponentials in a powerset regarded as a category (under ⊆)?
03:31:19 <nand`> I think that if a⊆b then b^a = b; otherwise b^a = 1 (terminal object)
03:35:33 <fddddddddf> Snardbafulator and ##philosophy must be fixed!
03:35:34 <fddddddddf> Yo Soy 132
03:35:34 <fddddddddf> From Wikipedia, the free encyclopedia
03:35:34 <fddddddddf> Jump to: navigation, search
03:35:34 <fddddddddf> Yo Soy 132
03:35:34 <fddddddddf> Part of the Mexican presidential election, 2012, Impact of the Arab Spring
03:35:54 <fddddddddf> [12]
03:35:54 <fddddddddf> Contents
03:35:54 <fddddddddf>     1 Origins
03:35:54 <fddddddddf>     2 Protests
03:35:54 <fddddddddf>     3 Goals
03:35:54 <fddddddddf>         3.1 Manifesto
03:36:05 <barrucadu> They... are pasting wikipedia articles now?
03:36:13 <fddddddddf> This movement is rooted in a long tradition of civil upheaval that has been challenging the policies of Mexico's elite class.[13] During the 2006 presidential elections, thousands of people took to the streets in protest for a supposed electoral fraud.[13] Back then, the protest was blacked out by the US media and did not translate into the social media frenzy like the 2009 Iranian election controversy did. This time with the Yo Soy 132 mov
03:36:13 <fddddddddf> Former State of Mexico governor Enrique Peña Nieto is allegedly favored by Mexico's only two nationwide TV Networks, Televisa and TV Azteca, with extensive coverage during the year prior to the confirmation of his candidacy. Until early May 2012, polls by these two TV networks showed Peña Nieto with up to a 40% lead in national polls. Peña Nieto has been criticized by those who see the return of the Institutional Revolutionary Party as a
03:36:14 <fddddddddf> La Jornada newspaper, Proceso magazine, journalist Jenaro Villamil[17] and others have claimed that when Peña Nieto served as governor of the State of Mexico, he used public funds to boost his television coverage. Until June 7, 2012, when The Guardian published an article on this claim, the information did not have a large impact.[18] Televisa, PRI and Peña Nieto have denied the accusations.[19][20]
03:36:15 <sopvop> Now, I'm too interested in this ##philosophy thing
03:36:35 <fddddddddf> snardbafulator and ##philosophy must be fixed
03:36:36 <fddddddddf> On May 11, 2012, Peña Nieto visited the Ibero-American University to hold a conference with students, where he was severely questioned. While exiting the conference room, hundreds of students began yelling at him to leave. Some showed signs that expressed complete rejection of his candidacy, and many wore masks of former president Carlos Salinas de Gortari. Until then, Peña Nieto had only met support and cheers from the meetings organized
03:36:36 <fddddddddf> Peña Nieto and many of his campaign staffers said this incident was staged by the left-wing parties' candidate, Andrés Manuel López Obrador, and that the participants were not real students or had been paid ("porros", as they are colloquially referred to). This angered many of the Ibero-American University students, prompting 131 of them to publish a video on YouTube in which they identify themselves with their University ID card.[21] Th
03:36:36 <fddddddddf> The protests then turned mainly against the media duopoly Televisa and TV Azteca and accused them of poor and biased coverage of the protests. While many independent electronic media outlets covered the events, their audience is relatively small, as only 31% of Mexicans have in home Internet access.[22]
03:36:39 <nand`> @where ops
03:36:39 <lambdabot> shapr Cale glguy dons sjanssen dcoutts Saizan dibblego conal Philippa bos arjanb xerox Heffalump kosmikus wli Pseudonym Igloo quicksilver monochrom Lemmih jmcarthur copumpkin
03:36:45 <fddddddddf> Protests
03:36:45 <fddddddddf> Yo Soy 132 protest in Mexico City on May 19, 2012
03:36:45 <fddddddddf> Llegada al Monumento a la Patria; Merida, MarchaYoSoy132.ogv
03:36:45 <fddddddddf> Protest in Monumento a la Patria; Mérida, Yucatán
03:36:45 <fddddddddf> Yo Soy 132 protest in Mexico City on June 10, 2012
03:36:46 <fddddddddf> On May 19, 2012, mass protests against Televisa and Peña Nieto were held in the country's major cities, led by students from many different colleges. A mass demonstration organized by the ITAM college was held outside Televisa headquarters.[23] The protest included a large Mariachi group who performed Las Golondrinas – a Mexican song used historically to say goodbye.[24]
03:36:46 <fddddddddf> On May 23, 2012, another protest against Televisa was organized by students from public and private colleges. This led the network to give widespread coverage of protests and to announce that the second presidential debate would broadcast on Televisa's main national TV channel Canal de las Estrellas. TV Azteca likewise responded by announcing the network's intention to broadcast the debate nationally.[8]
03:36:47 <fddddddddf> On June 10, 2012, another country-wide protest against Peña Nieto was held on the same day as the broadcast of the second presidential debate.[25] The date also commemorates the 1971 Corpus Christi massacre, when student protests were violently oppressed.[26][27]
03:36:47 <fddddddddf> The success of the movement in prompting thousands of students to get together has made analysts ask whether the movement will cause trouble for the next government.[28] Nonetheless, the leaders of the student movement said that if Peña Nieto wins the 1 July elections fairly, they will not stage any more protests.[28] The leader said that they will "respect [Mexico's] democracy and its institutions," but if there is evidence of fraud, the 
03:36:54 <fddddddddf> Goals
03:36:54 <fddddddddf> On June 5, 2012, students gathered in the National Autonomous University of Mexico (UNAM), the country's largest public university, to discuss common objectives. They agreed that the movement should aspire to go beyond the general election and become a national force.[29]
03:36:54 <fddddddddf> Manifesto
03:36:54 <fddddddddf> On May 23, 2012, the movement released its manifesto. An excerpt from it states:
03:36:54 <fddddddddf> First – we are a nonpartisan movement of citizens. As such, we do not express support of any candidate or political party, but rather respect the plurality and diversity of this movement's participants. Our wishes and demands are centered on the defense of Mexicans' freedom of expression and their right for information, in that these two elements are essential to forming an aware and participating citizenry. For the same reasons, we suppo
03:36:54 <fddddddddf> Second – YoSoy132 is an inclusive movement which does not represent one single university. Its representation depends only on the persons who join this cause and form connections among the university committees.[29]
03:37:03 <fddddddddf> Debates between candidates
03:37:03 <fddddddddf> On June 1, 2012, members of the Yo Soy 132 movement demanded from the Federal Electoral Institute (IFE) that the second debate between the four candidates be broadcast nationally, and that a third debate be scheduled for June 22, 2012. The proposed third debate is meant to cover a broader scope of issues. While the IFE has declined both requests, Mexico's two national television networks have announced that they will broadcast the second de
03:37:03 <fddddddddf> The topics of the debate ranged from indigenous peoples' rights to the future of Pemex and the country's media.[34] The debate experienced some technical problems on YouTube, but it was also aired in several other websites and in a couple of radio stations.[34]
03:37:03 <fddddddddf> Related movements
03:37:03 <fddddddddf> GeneraciónMX
03:37:03 <fddddddddf> On June 11, 2012, a group of protesters who named themselves GeneraciónMX claimed they were part of Yo Soy 132 and announced their departure, claiming that they perceived that the movement favored the leftist Party of the Democratic Revolution and its candidate Andrés Manuel López Obrador.[35] The leaders of the movement, however, stated that they are nonpartisan, although López Obrador has championed their cause and El Universal publis
03:37:03 <fddddddddf> On June 12, 2012, Rodrigo Ocampo, spokeperson of GenerationMX, reiterated in a press conference that they believed #yosoy132 had lost its course and had been hijacked by leftist parties. He denied any ties with the PRI party and his current employer COPARMEX, claiming his involvement was done on his free time. He also declared that GenerationMX had about 17 members, many of whom had received anonymous threats demanding them to take their Yo
03:37:04 <fddddddddf> On June 12, 2012, Mexican members of Yo Soy 132 who live abroad said that they received email threats to revoke their passports, from a person who identified as a member of GeneraciónMX. The threats included personal information about the emigrants, and alleged that they had abandoned their country, and so their country should abandon them.[41]
03:37:31 <fddddddddf> Snardbafulator and ##philosophy must be fixed
03:37:43 <fddddddddf> snardbafulator and ##philosophy must be fixed
03:37:45 <fddddddddf> References
03:37:45 <fddddddddf>     ^ "Youth protest former Mexican ruling party's rise". Buenos Aires Herald (Editorial Amfin S.A.). Retrieved June 12, 2012.
03:37:45 <fddddddddf>     ^ a b Zapata, Belén (4 June 2012). "Atenco, el tema que 'encendió' a la Ibero y originó #YoSoy132" (in Spanish). CNNMéxico. Retrieved 29 June 2012.
03:37:45 <fddddddddf>     ^ Quesada, Juan Diego (May 27, 2012). "Que nadie cierre las libretas: Del 15-M a Yo Soy 132 solo hay nueve mil kilómetros". Animal Político. Retrieved June 13, 2012.
03:37:45 <fddddddddf>     ^ Sotillos, Alberto (June 13, 2012). "#YoSoy132: el 15M llega a México" (in Spanish). Diario Progresista. Retrieved June 13, 2012.
03:37:48 <nand`> oh, he's been here before. /me adds an /ignore
03:38:12 <fddddddddf> snardbafulator and ##philosophy must be fixed!
03:38:13 <barrucadu> fddddddddf: What exactly is the problem with snardbafulator?
03:38:19 <fddddddddf> References
03:38:19 <fddddddddf>     ^ "Youth protest former Mexican ruling party's rise". Buenos Aires Herald (Editorial Amfin S.A.). Retrieved June 12, 2012.
03:38:19 <fddddddddf>     ^ a b Zapata, Belén (4 June 2012). "Atenco, el tema que 'encendió' a la Ibero y originó #YoSoy132" (in Spanish). CNNMéxico. Retrieved 29 June 2012.
03:38:19 <fddddddddf>     ^ Quesada, Juan Diego (May 27, 2012). "Que nadie cierre las libretas: Del 15-M a Yo Soy 132 solo hay nueve mil kilómetros". Animal Político. Retrieved June 13, 2012.
03:38:19 <fddddddddf>     ^ Sotillos, Alberto (June 13, 2012). "#YoSoy132: el 15M llega a México" (in Spanish). Diario Progresista. Retrieved June 13, 2012.
03:38:49 <fddddddddf> Snardbafulator and ##philosophy must be fixed!
03:39:01 --- mode: quicksilver set +b *!*dffdfdf@*.143.broadband15.iol.cz
03:39:01 --- kick: fddddddddf was kicked by quicksilver (fddddddddf)
03:39:38 <augur> wtf was that
03:39:43 <quicksilver> an idiot.
03:40:42 <bitrust> How many d's was that? Want to add to /ignore
03:41:06 <bitrust> I can count 8, but I don't trust my eyes.
03:41:11 <quicksilver> he's banned now, and he won't use that nickname again
03:41:15 <bitrust> Ah.
03:41:18 <quicksilver> but yes it was 8.
03:41:48 <augur> quicksilver: yes but
03:41:51 <augur> why
03:42:10 <companion_cube> he may come back with another permutation of the 'd' and 'f'
03:42:18 <quicksilver> apparently they disagree with some actions taken by freenode staff and/or ops in some particular channel, augur
03:42:33 <quicksilver> and they think they will resolve this by breaking the law and spamming thousands of people.
03:42:45 <quicksilver> it might resolve it, I suppose, if they go to jail.
03:42:56 <nand`> breaking the law?
03:43:06 <sopvop> the internet law!
03:43:13 <kloeri> spamming + ddos'ing
03:43:14 <quicksilver> if, as I suspect, they're using compromised machines to launch the spam
03:43:22 <nand`> ah
03:43:37 <kloeri> so yeah, they really are going for a sentence I guess
03:43:57 <quicksilver> anyhow, as mauke pointed out earlier, discussions of spam are off-topic :) let's talk about conduits.
03:44:02 <quicksilver> or write a monad tutorial.
03:44:15 <barrucadu> Yes, another monad tutorial is exactly what we need.
03:44:16 <Entroacceptor> quicksilver: aren't pipes better?
03:44:20 <dsfasdifasodfjas> Snardbafulator and ##philosophy must be fixed!
03:44:21 <nand`> or answer my earlier question :(
03:44:22 <dsfasdifasodfjas> Movimiento Yosoy132
03:44:22 <dsfasdifasodfjas> Saltar a: navegación, búsqueda
03:44:22 <dsfasdifasodfjas> 	Este artículo se refiere o está relacionado con un evento reciente o actualmente en curso.
03:44:22 <dsfasdifasodfjas> La información de este artículo puede cambiar frecuentemente. Por favor, no agregues datos especulativos y recuerda colocar referencias a fuentes fiables para dar más detalles.
03:44:22 <dsfasdifasodfjas> Commons-emblem-Under construction-green.svg
03:44:23 <dsfasdifasodfjas> 	Uno o varios wikipedistas están trabajando actualmente en este artículo o sección.
03:44:23 <dsfasdifasodfjas> Es posible que a causa de ello haya lagunas de contenido o deficiencias de formato. Si quieres, puedes ayudar y editar, pero por favor: antes de realizar correcciones mayores contáctalo(s) en su(s) página(s) de discusión, o en la página de discusión del artículo, para poder coordinar la redacción.
03:44:31 <dsfasdifasodfjas> l Movimiento YoSoy132 es un movimiento ciudadano conformado en su mayoría por estudiantes de educación superior en México, tanto de instituciones públicas como privadas que busca, entre otras demandas: la democratización de los medios de comunicación1 y evitar la imposición mediática del virtual ganador de la elección presidencial de 2012 Enrique Peña Nieto.2 El nombre YoSoy132, se refiere principalmente, a la autoafiliación y apoyo a
03:44:31 <dsfasdifasodfjas> Las protestas realizadas en contra del virtual ganador de la Presidencia de México4 han sido un detonante que ha puesto en marcha una cadena de manifestaciones que se han unido a este movimiento. A pesar de lo declarado en el Manifesto YoSoy132, en la práctica, no es claro cuantos movimientos han sido ya incluidos, por ejemplo #MarchaAntiEPN. Este movimiento es parte de la llamada La Primavera Mexicana5
03:44:31 <dsfasdifasodfjas> Contenido
03:44:31 <dsfasdifasodfjas>     1 Antecedentes
03:44:31 <dsfasdifasodfjas>     2 Manifiesto
03:44:32 <dsfasdifasodfjas>     3 Asamblea y manifestaciones
03:44:32 <dsfasdifasodfjas>         3.1 Discurso 1a Asamblea
03:44:33 <dsfasdifasodfjas>         3.2 Principios generales
03:44:33 <dsfasdifasodfjas>         3.3 Manifestaciones
03:44:34 <dsfasdifasodfjas>     4 Debate presidencial
03:44:34 <dsfasdifasodfjas>         4.1 Segundo debate
03:44:35 <dsfasdifasodfjas>         4.2 Tercer debate
03:44:35 <dsfasdifasodfjas>     5 Elecciones 2012
03:44:36 <dsfasdifasodfjas>         5.1 Comunicado 1o de julio
03:44:46 <augur> hahahah
03:44:51 <augur> K-K-K-KLINES
03:44:53 <augur> d
03:44:54 <augur> :|
03:47:04 <dsfasdifasodfjas> En el mismo contexto, Emilio Gamboa Patrón, líder nacional de la Confederación de Organizaciones Populares y exestudiante de la Ibero, declaró:16
03:47:05 <dsfasdifasodfjas>     «[...] fue un boicot, una trampa, una actitud “porril” provocadora, pero el candidato no cayó en eso»
03:47:05 <dsfasdifasodfjas>     Emilio Gamboa Patrón
03:47:05 <dsfasdifasodfjas> Ante estos señalamientos, 131 jóvenes publicaron un vídeo en Internet en dónde mostraban las credenciales que los acreditaban como estudiantes de dicha universidad17 respondiendo:
03:47:05 <dsfasdifasodfjas>     «[...] estimados Joaquín Coldwell, Arturo Escobar, Emilio Gamboa, así como medios de comunicación de dudosa neutralidad, usamos nuestro derecho de réplica para desmentirlos, somos estudiantes de la Ibero, no acarreados, no porros, y nadie nos entrenó para nada [...]»
03:47:05 <dsfasdifasodfjas>     131 estudiantes
03:47:05 <dsfasdifasodfjas> Los siguientes minutos, los 131 jóvenes dan su nombre, número de cuenta y la carrera en la que estudian y afirman no pertenecer a ningún partido político, además de defender el carácter estudiantil de la protesta. Seis horas después de su publicación, el video había sido reproducido por 21 mil 747 usuarios de esa red social. A raíz de este video las redes sociales comenzaron a mostrar su apoyo a los 131 estudiantes bajo el eslogan YoSoy
03:47:29 <dsfasdifasodfjas> En el mismo contexto, Emilio Gamboa Patrón, líder nacional de la Confederación de Organizaciones Populares y exestudiante de la Ibero, declaró:16
03:47:30 <dsfasdifasodfjas>     «[...] fue un boicot, una trampa, una actitud “porril” provocadora, pero el candidato no cayó en eso»
03:47:30 <dsfasdifasodfjas>     Emilio Gamboa Patrón
03:47:30 <dsfasdifasodfjas> Ante estos señalamientos, 131 jóvenes publicaron un vídeo en Internet en dónde mostraban las credenciales que los acreditaban como estudiantes de dicha universidad17 respondiendo:
03:47:30 <dsfasdifasodfjas>     «[...] estimados Joaquín Coldwell, Arturo Escobar, Emilio Gamboa, así como medios de comunicación de dudosa neutralidad, usamos nuestro derecho de réplica para desmentirlos, somos estudiantes de la Ibero, no acarreados, no porros, y nadie nos entrenó para nada [...]»
03:47:30 <dsfasdifasodfjas>     131 estudiantes
03:47:30 <dsfasdifasodfjas> Los siguientes minutos, los 131 jóvenes dan su nombre, número de cuenta y la carrera en la que estudian y afirman no pertenecer a ningún partido político, además de defender el carácter estudiantil de la protesta. Seis horas después de su publicación, el video había sido reproducido por 21 mil 747 usuarios de esa red social. A raíz de este video las redes sociales comenzaron a mostrar su apoyo a los 131 estudiantes bajo el eslogan YoSoy
03:47:30 <dsfasdifasodfjas> Manifiesto
03:47:31 <dsfasdifasodfjas>     Wikisource contiene obras originales de o sobre Primer comunicado de la Coordinadora del Movimiento YoSoy132 (manifiesto).
03:47:31 <dsfasdifasodfjas> El 23 de mayo de 2012 el movimiento da a conocer su declaratoria.19 Entre los puntos que destacan, figuran los siguientes:
03:47:32 --- mode: quicksilver set +b *!*asdfgasdf@183.221.13.*
03:47:32 --- kick: dsfasdifasodfjas was kicked by quicksilver (dsfasdifasodfjas)
03:47:46 <augur> quicksilver: is it the same IP every time?
03:47:49 <quicksilver> no
03:47:50 <nand`> no
03:47:55 <quicksilver> otherwise they wouldn't get in
03:47:56 <augur> clever
03:47:59 <augur> well
03:48:05 <augur> you are using login names too
03:48:06 <augur> i mean
03:48:30 <quicksilver> good point :)
03:48:33 <augur> cant you just IP ban?
03:48:46 <quicksilver> I could.
03:48:48 <augur> +b *@183.221.13.*
03:50:17 <quicksilver> I know
03:52:45 <dsfasdifasodfjas> Movimiento Yosoy132
03:52:46 <dsfasdifasodfjas> Saltar a: navegación, búsqueda
03:52:46 <dsfasdifasodfjas> 	Este artículo se refiere o está relacionado con un evento reciente o actualmente en curso.
03:52:46 <dsfasdifasodfjas> La información de este artículo puede cambiar frecuentemente. Por favor, no agregues datos especulativos y recuerda colocar referencias a fuentes fiables para dar más detalles.
03:52:46 <dsfasdifasodfjas> Commons-emblem-Under construction-green.svg
03:53:02 <dsfasdifasodfjas> Movimiento Yosoy132
03:53:03 <dsfasdifasodfjas> Saltar a: navegación, búsqueda
03:53:03 <dsfasdifasodfjas> 	Este artículo se refiere o está relacionado con un evento reciente o actualmente en curso.
03:53:03 <dsfasdifasodfjas> La información de este artículo puede cambiar frecuentemente. Por favor, no agregues datos especulativos y recuerda colocar referencias a fuentes fiables para dar más detalles.
03:53:03 <dsfasdifasodfjas> Commons-emblem-Under construction-green.svg
03:53:03 <dsfasdifasodfjas> 	Uno o varios wikipedistas están trabajando actualmente en este artículo o sección.
03:53:03 <dsfasdifasodfjas> Es posible que a causa de ello haya lagunas de contenido o deficiencias de formato. Si quieres, puedes ayudar y editar, pero por favor: antes de realizar correcciones mayores contáctalo(s) en su(s) página(s) de discusión, o en la página de discusión del artículo, para poder coordinar la redacción.
03:54:52 <quicksilver> hmm
03:54:58 <18WABFPG5> Actually, if he would spam certain patterns of "(.)", "\x", "$", "<*>", ">>=" and similiar I might have a hard time telling whether it's Haskell or not. :-}
03:55:01 <18WABFPG5> er
03:55:05 <frerich> What happened here...
03:55:06 <quicksilver> maybe we should go registered only again for a bit
03:55:14 <augur> frerich: SHUT UP
03:55:16 <augur> SHUT UP SHUT UP SHUT UP
03:55:34 <augur> > putstr $ show [0..]
03:55:36 <lambdabot>   Not in scope: `putstr'
03:55:37 <frerich> Sorry? :-)
03:55:39 <augur> :X
03:55:42 <augur> > putStr $ show [0..]
03:55:43 <lambdabot>   <IO ()>
03:55:47 <augur> HAHAHA
03:55:49 <augur> very nice
03:55:56 <augur> > [0..]
03:55:57 <lambdabot>   [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,...
03:56:06 <augur> so it turns out that this is all ChimpOut related
03:56:15 <augur> ##philosophy banned a chimpout dipshit
03:56:18 <augur> and this is their revenge
03:57:41 <augur> i feel its a strange mix, that theyd come in here with that shit
03:57:50 <augur> "LOVE FUNCTIONAL PROGRAMMING? HATE NIGGERS?"
03:57:55 <augur> i mean really now
03:58:17 <barrucadu> augur: Seems like it's annoyed you quite a lot :P
03:58:27 <augur> its more funny than anything else!
03:58:32 <augur> and bizarre
03:58:35 <augur> the whole thing is bizarre
03:58:43 <augur> i mean, spamming with wikipedia articles
03:58:44 <augur> what is that
03:58:55 <kloeri> this discussion belongs in ##comment-on-spam if anywhere
03:59:14 <frerich> augur: It's one recursion step before spamming about spamming with wikipedia articles ;->
03:59:34 <alpounet> how can i "easily" get a Data.Vector Int from a fixed-size array of ints that has been fwrite'd like this: fwrite(tab, sizeof(tab), 1, file)?
03:59:38 <augur> frerich: maybe we should use the Y combinator here, just to be safe
03:59:46 <augur> nooo no Y combinator in haskell D:
04:00:32 <stobix> hm. I'm trying to make sense of http://www.haskell.org/haskellwiki/The_Monad.Reader/Issue4/Why_Attribute_Grammars_Matter . Listing two. I'm trying to patch something similar together, like foldr (\a b c -> ...) but it seems I don't really get what I'm doing. What does it mean to provide a "three argument function" to foldr? How should I think?
04:00:37 <Botje> alpounet: Data.Binary with the get monad?
04:01:15 <augur> stobix: think of it as a two argument function that computes functions!
04:02:07 <stobix> augur: hm. I'm trying to, but according to the infinite types I get, apparently it hasn't really "clicked" yet.
04:02:10 <alpounet> Botje, with vector-binary-instances? not sure the format will be the same
04:02:41 <augur> stobix: er.. i dont know what you mean by that you get infinite types
04:03:21 <barrucadu> stobix: Show the code?
04:03:38 <alpounet> Botje, unless i try to get back an UArray Int Int through decode and then convert it to a Vector Int?
04:04:04 <mroman> @hoogle unescape
04:04:05 <lambdabot> Network.URI unEscapeString :: String -> String
04:04:05 <lambdabot> Network.URI isUnescapedInURI :: Char -> Bool
04:04:10 <frerich> stobix: You could write "\a b -> a" as "\a -> \b -> a" (a function taking two arguments is a function taking one argument, yielding another function of one argument). So "\a b c -> a" could be "\a b -> \c -> a", e.g. a two-argument function yielding a one-argument function.
04:04:21 <luite> http://hackage.haskell.org/packages/archive/hoopl/3.8.7.4/doc/html/Compiler-Hoopl.html <- how can i pattern match on BCat, BHead, BTail and BClosed? f (BFirst n) works, but if i try something like that for BCat it says "Not in scope: data constructor `BCat'"
04:04:27 <mroman> What was the name of the function again which converts "\\n" to "\n"?
04:04:35 <int-e> augur: you just need an auxillary newtype to define it. For example, http://stackoverflow.com/questions/4273413/y-combinator-in-haskell ... It's not a good idea to do it; it will make ghc's simplifier loop ( http://www.haskell.org/ghc/docs/latest/html/users_guide/bugs.html#bugs-ghc  has a variant of this scheme)
04:04:49 <augur> int-e: i dont know what you need where how when what
04:04:57 <stobix> I'm trying to see how I can use both b and c on a, or b on c and a without haskell exploding on me.
04:04:58 <augur> int-e: because i dont know whats being talked about
04:05:01 <quicksilver> alpounet: I think you might be thinking too hard
04:05:14 <int-e> augur: sorry, this was about the Y combinator in Haskell -- I took too long looking things up.
04:05:15 <quicksilver> alpounet: just replicateM getWord32
04:05:18 <quicksilver> alpounet: and use fromList
04:05:26 <augur> int-e: oh ok :)
04:05:28 <stobix> I guess I'm more experimenting than thinking right now. Perhaps that's the problem. :)
04:05:42 <augur> stobix: what is the experimenting thats at issue tho
04:06:02 <augur> stobix: i mean, consider this one, right
04:06:10 <stobix> Actually working: foldr (\a b c -> c.b a )
04:06:15 <stobix> Not working: foldr (\a b c -> c b a )
04:06:44 <augur> er
04:06:50 <augur> try working out the types, dude
04:06:56 <augur> look at the type of foldr
04:06:59 <augur> that should be where you start
04:07:08 <augur> dont just throw around code, thats bad joo joo
04:07:13 <augur> ju ju
04:07:17 <stobix> augur: "working" as in ":t ... did not explode"
04:07:35 <augur> right but thats what i mean
04:07:41 <augur> look at the type of foldr
04:08:09 <stobix> I thought that foldr would ignore the type of c. I apparently missed a recursion somewhere.
04:08:23 <augur> no of course it wouldnt
04:08:26 <augur> look at its type, dude
04:08:31 <augur> and look at the type of those functions
04:08:45 <augur> c cant be irrelevant
04:08:46 <alpounet> quicksilver, oh yeah, great! thanks
04:08:47 <augur> it simply cant
04:08:48 <stobix> hmm
04:08:50 <stobix> :t  foldr (\a b c -> c b a )
04:08:51 <lambdabot>     Occurs check: cannot construct the infinite type:
04:08:51 <lambdabot>       t = (t -> t1) -> a -> t1
04:08:51 <lambdabot>     Probable cause: `c' is applied to too many arguments
04:08:54 <stobix> that
04:08:56 <augur> stobix: no not that
04:09:04 <augur> :t foldr
04:09:05 <lambdabot> forall a b. (a -> b -> b) -> b -> [a] -> b
04:09:13 <augur> :t \a b c -> c b a
04:09:14 <lambdabot> forall t t1 t2. t -> t1 -> (t1 -> t -> t2) -> t2
04:09:32 <augur> forall a b c. a -> b -> (b -> a -> c) -> c
04:09:34 <stobix> Why can't I have a c that takes in a b and an a and produces a new b?
04:09:45 <augur> stobix: look at those two types
04:09:52 <augur> if you do foldr (\a b c -> c b a)
04:09:57 <augur> that means that in the type signature for forall
04:10:22 <augur> (a -> b -> c)   has to beq equal to   a' -> b' -> (b' -> a' -> c') -> c'
04:10:28 <augur> that is
04:10:29 <stobix> ah
04:10:31 <augur> a == a'
04:10:33 <augur> b == b'
04:10:42 <augur> and c == (b' -> a' -> c') -> c'
04:10:50 <augur> ok fine good enough
04:11:27 <augur> whoops sorry, i meant to say
04:11:29 <stobix> Somehow, it never occured to me to check the type of the inner function
04:11:40 <augur> (a -> b -> c) == a' -> b' -> (b' -> a' -> c') -> c'
04:11:41 <augur> hah
04:11:41 <augur> :)
04:11:48 <augur> damnit!
04:11:53 <augur> (a -> b -> b) == ...
04:11:56 <augur> thats what i meant
04:11:58 <augur> stupid fingers!
04:12:01 <stobix> :)
04:12:02 <augur> so b == b'
04:12:03 <augur> but also
04:12:09 <augur> b == (b' -> a' -> c') -> c'
04:12:16 <augur> cant be done
04:17:09 <padrian2ss> Hello haskellers
04:18:00 <padrian2ss> giving this code: data Nat = Zero            | Succ Nat deriving (Show)
04:18:16 <padrian2ss> power :: Float -> Nat -> Float
04:18:20 <padrian2ss> power x Zero = 1.0
04:18:24 <padrian2ss> power x (Succ n) = x * power x n
04:18:48 <padrian2ss> how I can "show" the calling function power 3
04:18:56 <Nereid> you can't show functions
04:19:02 <padrian2ss> I tried with instance
04:19:16 <Nereid> you can't write nontrivial Show instances for function types
04:19:18 <padrian2ss> yes, but you can do p = power 3
04:19:26 <Nereid> well
04:19:27 <Nereid> not in general
04:19:29 <quicksilver> there isn't a standard show instance for functions and it's probably not a good idea to write one.
04:20:15 <nand`> since Nat is enumerable, wouldn't it be possible to write a show instance considering :: Nat -> Float as [(Nat, Float)] ?
04:20:24 <padrian2ss> I think the problem relay on the fact that power results use a defined data type that show cannot interpret
04:20:58 <Nereid> nand`: ok, for that specific type you probably can, but it would be pretty gross
04:21:00 <quicksilver> nand`: yes, but it's "probably not a good idea"
04:21:04 <nand`> :)
04:21:08 <padrian2ss> :)
04:21:09 <quicksilver> padrian2ss: no, that's no true.
04:21:23 <nand`> instance (Show a, Show b, Bounded a, Enum a) => Show (a -> b) where ...
04:21:23 <quicksilver> padrian2ss: show can perfectly well interpret your data type Nat
04:21:28 <quicksilver> you gave it a Show instance.
04:21:32 <padrian2ss> let me show you the error
04:21:34 <quicksilver> the problem is just that you can't show functions.
04:21:43 <quicksilver> whether they are a user defined type or not is not the issue.
04:21:51 <padrian2ss> ok
04:21:58 <nbvntndndgndf> Snardbafulator and ##philosophy must be fixed!
04:21:58 <nbvntndndgndf> Mēxihco ītlācaxoxouhcāyō
04:21:59 <nbvntndndgndf> (Ōmotlacuep īhuīcpa Mēxihcatl Tlācaxoxouhcāyōtl)
04:21:59 <nbvntndndgndf> Īhuīcpa ticholōz: nènemòwalistli, tlatēmoliztli
04:21:59 <nbvntndndgndf> Artículo bueno.svg
04:21:59 <nbvntndndgndf> Miguel Hidalgo y Costilla, nō motēnēhua iuh in Tlācatiyān Tahtli
04:22:53 <padrian2ss> in this case if I assign the result of power 3 to a variable, right
04:23:06 <padrian2ss> and show the output of that variable
04:24:00 <quicksilver> padrian2ss: no.
04:24:04 <quicksilver> padrian2ss: you still can't show functions.
04:24:15 <quicksilver> padrian2ss: it is irrelevant whether it's in a variable or not.
04:24:17 <quicksilver> you can't show functions.
04:24:44 <padrian2ss>     No instance for (Show (Nat -> Float))       arising from a use of `show'     Possible fix: add an instance declaration for (Show (Nat -> Float))     In the expression: show gg     In an equation for `it': it = show gg
04:25:05 <vrevefsdf> Snardbafulator and ##philosophy  need to be fixed!
04:25:05 <vrevefsdf> Mēxihco ītlācaxoxouhcāyō
04:25:05 <vrevefsdf> (Ōmotlacuep īhuīcpa Mēxihcatl Tlācaxoxouhcāyōtl)
04:25:05 <vrevefsdf> Īhuīcpa ticholōz: nènemòwalistli, tlatēmoliztli
04:25:05 <vrevefsdf> Artículo bueno.svg
04:25:14 <Nereid> haha.
04:25:22 <quicksilver> padrian2ss: you can't show functions.
04:25:27 <padrian2ss> @quicksilver: what should I do :)
04:25:28 <lambdabot> Unknown command, try @list
04:25:34 * quicksilver feels he is repeating himself a bit :)
04:25:35 <Nereid> padrian2ss: stop trying to show functions.
04:25:44 <quicksilver> padrian2ss: what are you trying to do? what did you hope to achieve?
04:25:48 <quicksilver> why did you want to show it?
04:26:00 --- mode: quicksilver set +b *!*fdsvervsd@*.hsd1.nj.comcast.net
04:26:00 --- kick: vrevefsdf was kicked by quicksilver (vrevefsdf)
04:26:46 <padrian2ss> @quicksilver: I want to display the output of power 4
04:26:46 <lambdabot> Unknown command, try @list
04:26:50 <padrian2ss> :)
04:27:10 <quicksilver> padrian2ss: why not "power 5 (Succ (Succ Zero))" ?
04:27:14 <quicksilver> which actually is something you can see.
04:27:25 <quicksilver> or 4, even (that was a typo, not that it matters)
04:27:58 <quicksilver> power 4 (Succ (Succ Zero)) is a Float, you can show it fine. power 4 is a function, you can't show it.
04:28:23 <padrian2ss> @quicksilver: ohh man, this is odd
04:28:23 <lambdabot> Unknown command, try @list
04:28:34 <padrian2ss> @quicksilver: let me think about the implications first
04:28:34 <lambdabot> Unknown command, try @list
04:28:56 <vrevefsdf> Snardbafulator and ##philosophy must be fixed!
04:28:57 <vrevefsdf> Mēxihco ītlācaxoxouhcāyō
04:28:58 <vrevefsdf> (Ōmotlacuep īhuīcpa Mēxihcatl Tlācaxoxouhcāyōtl)
04:28:58 <vrevefsdf> Īhuīcpa ticholōz: nènemòwalistli, tlatēmoliztli
04:28:58 <vrevefsdf> Artículo bueno.svg
04:28:58 <vrevefsdf> Miguel Hidalgo y Costilla, nō motēnēhua iuh in Tlācatiyān Tahtli
04:28:58 <vrevefsdf> In Mēxihco Tlācaxoxouhcāyōtl (caxtillāntlahtōlcopa Independencia de México) ōcatca cē āltepēyōtl īhuān tlācah hualomochīhualiztli tlapachihuītilo yāōtilizca, in tlein ōtlan in caxtillāntēpacholiztli īpan in Yancuīc Caxtillān tlālli. In yāōyōtl īpampa in Mēxihco tlācaxoxouhcāyōtl ōman īxquichca in Dolores Tzahtziliztli, in 16 tlachiucnāuhti 1810 (6 tōchtli), zan in ōcalac Ejército Trigarante īpan in Āltepētl Mē
04:28:58 <vrevefsdf> Tlahtōllōtl
04:28:59 <vrevefsdf> In yohualtzinco in Tlachiucnāuhti 16[1] in 1810 (6 tōchtli) xihuitl, ōmpēuh Mēxihco huēyi tēmāquīxtilizyāōyōtl, ihcuāc in teōpixqui Miguel Hidalgo ōquinnōtz in tlācah in oncān teōcalpan motōcāyōtia Dolores īpan in huehcāuh Intendencia de Guanajuato. In caxtiltēcah zan nō ihcuāc ōquitlāliahqueh in tecuhtli in ītōcā Francisco Xavier Venegas iuhquin yancuīc tlahtōcateixiptlah īpan in Yancuīc Caxtillān.
04:28:59 <vrevefsdf> In teōpixqui José María Morelos y Pavón inic Michhuahcān; ōtetōcac in yāōtl ihcuāc catca ōnicmatic Miguel Hidalgo īhuān yehhuātl mictlalo Chihuahuac īpan 30 tlachicōnti, 1811 (7 ācatl); āuh īpan 1815 (11 ācatl) xihuitl teōpixqui José María Morelos mictlalo Ehēcatepēc.
04:29:00 <vrevefsdf> Īpan 1816 (12 tecpatl) xihuitl, quitlalique iuh tlahtōcāteixiptlatzintli nicān Yancuīc Caxtillān teuctli in ītōcā Juan Ruiz de Apodaca, nōhuān īximacho iuhquin Mazatontli teuctlahtoāni.
04:29:00 <vrevefsdf> Īpan 1818 (1 tōchtli) xihuitl, Vicente Guerrero ōtetōcac īpan Yancuīc Caxtillān tlayaotiuh īca caxtiltēcah, yehhuātl catca ōnicmatic īpan atenco Cuauhtolco, Huāxyacac.
04:29:40 <Botje> is that .. spam in inca?
04:29:54 <nand`> padrian2ss: what kind of ‘output’ is power 4 supposed to have?
04:30:06 <nand`> padrian2ss: do you want to visualize the function graph or something?
04:30:19 <Nereid> at least you can recover x from power x by power x (Succ Zero)
04:30:36 <padrian2ss> nand: no, just the output in ghci
04:30:53 <Nereid> padrian2ss: write your own function that takes it and shows its outputs then
04:30:57 <Nereid> don't try to use show
04:31:20 <nand`> padrian2ss: what kind of output is ‘power 4’ supposed to have in GHCi? Why don't you try writing what you want to see?
04:31:49 <padrian2ss> nand`: sorry, I doens't make sense power 4
04:32:07 <padrian2ss> now I see, power 4 return a function
04:32:13 <Nereid> power 4 *is* a function
04:32:17 <augur> Botje: thats impressive
04:32:19 <augur> but no
04:32:22 <padrian2ss> that is expecting another argument
04:32:22 <augur> probably not incan
04:32:26 <augur> probably its in nahatl
04:32:33 <augur> looks like nahuatl to me
04:33:38 <dafksadfheie> Snardbafulator and ##philosophy must be fixed!
04:33:39 <dafksadfheie> Piruw
04:33:39 <dafksadfheie> (Peru-manta pusampusqa)
04:33:39 <dafksadfheie> Kayman riy: wamp'una, maskana
04:33:39 <dafksadfheie> República del Perú
04:33:39 <dafksadfheie> Piruw Republika
04:33:39 <dafksadfheie> Piruw 	Piruw
04:34:22 <nand`> ‘Snardbafulator and ##philosophy must be fixed!’ could work as a pretty good badword
04:34:30 <padrian2ss> Nereid: :) can I say power 4 yield a function?
04:34:40 <Nereid> only if you can say 5 yields 5
04:34:41 <nand`> I would go with ‘is’
04:34:55 <Nereid> er, 5 yields a number
04:35:21 <Nereid> when you write p = power 4, there is absolutely no difference between p and power 4
04:35:22 <padrian2ss> ok
04:35:41 <quicksilver> you could say "the application of the functoin 'power' to the number '4' yields a function"
04:36:13 <quicksilver> you could even spell function correctly when you said it :)
04:36:28 <padrian2ss> :)
04:36:30 <augur> functoin shrdlu
04:36:47 * hackagebot hedis-tags 0.2.1 - Tags for hedis (AlexanderDorofeev)
04:39:02 <padrian2ss> thanks everyone for your kind reponses
04:39:23 <padrian2ss> I do hope to learn Haskell
04:39:35 <Nereid> you are learning haskell :)
04:40:10 <padrian2ss> :)
04:40:11 <t7> can anyone _learn_ haskell?
04:40:20 <t7> or does haskell learn us?
04:40:47 <padrian2ss> t4: yes, indeed, hehe
04:40:56 <Nereid> I think the more appropriate question to ask is whether anyone can finish learning haskell.
04:41:11 <trem> haskell and me, we get used to each other
04:41:23 <padrian2ss> Nereid: learning Haskell is just a lazzy operation, ha?
04:41:43 <nand`> “Oleg finished learning Haskell”
04:43:56 <byorgey> as soon as you get close to finishing, you start inventing new features
04:44:01 <byorgey> so no
04:44:56 <padrian2ss> I have to go, but I will come back later:)
04:51:47 * hackagebot hedis-pile 0.6.1 - Caching mandatory data with Redis (AlexanderDorofeev)
04:51:49 * hackagebot wai-middleware-cache 0.3.5 - Caching middleware for WAI. (AlexanderDorofeev)
04:51:51 * hackagebot wai-middleware-route 0.7.2 - Wai dispatch middleware (AlexanderDorofeev)
05:11:15 <nart> hi
05:11:35 <trem> nart, hello
05:11:55 <nart> if i have a datatype .. say .. let mt = MyType String String
05:12:11 <nart> is it possibile to show only the costructor ?
05:12:20 <nart> showC mt == "MyType"
05:12:51 <trem> nart, you are free to provide a Show instance to your likings
05:13:02 <quicksilver> although that would be a bad show instance :)
05:13:12 <quicksilver> but it's not a hard function to write either
05:13:15 <trem> e.g., data MyType = MyType String String
05:13:28 <quicksilver> showC (MyType _ _) = "MyType"
05:13:33 <trem> and instance Show MyType where show _ = "MyType"
05:13:51 <trem> what's "showC" ?
05:13:53 <Ornedan> Welp. Turns out Persist is not quite threadsafe. Can't pass a connection to another thread
05:14:17 <nart> trem: fake function .. showCostructor
05:14:47 <nart> the problem is that the type i want to show only the costructor, already has a show implementation
05:15:08 <trem> nart, oh, I see. you might want to consider using the "Show" typeclass because it fits nicely with the rest of the haskell environment
05:15:14 <quicksilver> so write a new function with a different name.
05:15:20 <quicksilver> trem: no. He might consider *not* doing that.
05:15:29 <quicksilver> because what he's after is a bad Show instance.
05:15:41 <quicksilver> but a perfectly reasonable function.
05:16:15 <trem> quicksilver, because then read (show x) /= read ?
05:16:22 <nart> quicksilver trem: thanks :)
05:16:24 <trem> ehh,  read (show x) /= x
05:16:59 <quicksilver> partly for that reason, trem.
05:17:13 <quicksilver> the purpose of the Show class is to provide the most useful information for debugging.
05:17:24 <quicksilver> it should almost always produce valid haskell code as its output
05:17:31 <quicksilver> because that's very useful for copy-pasting into test cases
05:17:34 <quicksilver> (or indeed bug reports)
05:18:03 <Entroacceptor> then why isn't it called Debug or Serialize
05:18:15 <trem> quicksilver, ok, that's reasonable. i personally use Show instances mainly for debugging, and do I/O through binary and the like. so I have lots of "bad" Show instances around. but it really does not matter for me
05:21:05 <hiptobecubic> i'm trying to play with simple reflect, but i'm having trouble being concrete enough for it to be able to show me anything
05:21:09 <hiptobecubic> > f x
05:21:10 <lambdabot>   Ambiguous type variable `a' in the constraints:
05:21:11 <lambdabot>    `GHC.Show.Show a'
05:21:11 <lambdabot>      a...
05:21:19 <hiptobecubic> > x + 1
05:21:21 <lambdabot>   x + 1
05:21:25 <hiptobecubic> So what's wrong with f there
05:21:38 <nand`> > f x :: Expr
05:21:39 <lambdabot>   f x
05:21:43 <hiptobecubic> .. oh
05:22:02 <hiptobecubic> Why is that necessary? I don't see what's going on with the types otherwise
05:22:30 <nand`> :t f
05:22:32 <lambdabot> forall a. (SimpleReflect.FromExpr a) => a
05:23:12 <Nereid> :i FromExpr
05:23:29 <Nereid> oh
05:23:31 <Nereid> @info FromExpr
05:23:31 <lambdabot> FromExpr
05:23:34 <Nereid> aw.
05:24:03 <hiptobecubic> Well i was really hoping to get some intuition for the functor instance for functions
05:24:15 <hiptobecubic> which is just composition i guess?
05:24:26 <Botje> yep
05:24:30 <hiptobecubic> But using it with applicative functors, i'm not seeing what is going on there
05:24:43 <Botje> do you know how `ap` works for functions?
05:25:00 <hiptobecubic> no, i would say not
05:25:10 <hiptobecubic> that's <*>, right?
05:25:16 <Nereid> > ap f g x
05:25:17 <Botje> well, yes
05:25:18 <lambdabot>   Ambiguous type variable `a' in the constraints:
05:25:18 <lambdabot>    `GHC.Show.Show a'
05:25:18 <lambdabot>      a...
05:25:18 <quicksilver> Entroacceptor: no reason :)
05:25:23 <Botje> but ap was discovered first ;)
05:25:24 <Nereid> > ap f g x  :: Expr
05:25:26 <lambdabot>   Ambiguous type variable `a' in the constraints:
05:25:26 <lambdabot>    `SimpleReflect.FromExpr ...
05:25:28 <Nereid> fine.
05:25:38 <Botje> f `ap` g = \x -> f x (g x)
05:25:39 <hiptobecubic> Nereid, this is what i've been doing all morning sa well ;)
05:25:53 <Nereid> @unpl ap f g
05:25:54 <lambdabot> (f >>= \ b -> g >>= \ a -> return (b a))
05:25:56 <hiptobecubic> Botje, oh...
05:26:15 <nand`> > ap (f :: Expr -> Expr -> Expr) (g :: Expr -> Expr) (h :: Expr -> Expr)
05:26:16 <lambdabot>   Couldn't match expected type `SimpleReflect.Expr
05:26:16 <lambdabot>                           ...
05:26:34 <Botje> hiptobecubic: and ap is typically defined in terms of liftM2 id
05:26:48 <Nereid> where id = ($)
05:28:10 <nand`> oh, err
05:28:13 <nand`> > ap (f :: Expr -> Expr -> Expr) (g :: Expr -> Expr) (h :: Expr)
05:28:15 <lambdabot>   f h (g h)
05:28:17 <hiptobecubic> negate `ap` (+1) $ 0
05:28:22 <hiptobecubic> > negate `ap` (+1) $ 0
05:28:23 <lambdabot>   Occurs check: cannot construct the infinite type: a = a -> b
05:28:39 <hiptobecubic> oh f takes two args
05:28:41 <Botje> yes
05:29:01 <hiptobecubic> > (-) `ap` (+1) $ 1
05:29:01 <lambdabot>   -1
05:29:10 <Botje> > (,) `ap` (*8) $ 5
05:29:12 <lambdabot>   (5,40)
05:29:14 <Nereid> @type ap const const
05:29:16 <lambdabot> forall b. b -> b
05:29:19 <Botje> that's one of the nicer uses of ap / <*>
05:29:37 <hiptobecubic> Yes that's much more useful than my example :)
05:29:56 <nand`> > id &&& (*8) $ 5
05:29:58 <lambdabot>   (5,40)
05:29:59 * nand` prefers this for clarity
05:30:21 <Botje> I can never remember whether I want &&& or ***
05:30:32 <hiptobecubic> that's from ... Arrow?
05:30:35 <Botje> yes
05:30:37 <nand`> simple, *** looks like multiplication, ie. ×
05:30:47 <Botje> I only have head &&& length finger-macro'd :)
05:30:49 <nand`> f *** g corresponds to f × g
05:30:50 <mikeplus64> Botje: think "x and y" for the &&&
05:31:00 <hiptobecubic> you kids and your unicode
05:31:04 <Nereid> *** is the one that's actually a product in some category
05:31:37 <hiptobecubic> > head (&&&) length $ [5,4..1]
05:31:38 <lambdabot>   Couldn't match expected type `[a]'
05:31:38 <lambdabot>         against inferred type `a1 b c ->...
05:31:51 <nand`> > head &&& length $ [5,4..1]
05:31:53 <lambdabot>   (5,5)
05:32:01 <hiptobecubic> oh right,
05:32:08 <mikeplus64> hiptobecubic: if you put it in parens like that, you have to write (&&&) head length
05:32:22 <hiptobecubic> yeah, just wasn't paying attention
05:33:54 <Botje> wake up neo. the matrix has you.
05:34:27 <hiptobecubic> > head &&& length &&& tail $ [5,4..1]
05:34:28 <lambdabot>   (5,(5,[4,3,2,1]))
05:34:37 <hiptobecubic> ah right, it will nest of course
05:37:07 <hiptobecubic> so with <*>, we build up arguments by applying functions to them first
05:37:40 <gspr> How do I best go about telling if loop fusion happened for a given function?
05:37:53 <gspr> Forgot to add: loop fusion from the vector package
05:38:30 <hiptobecubic> gspr, i think you might have to look at the core?
05:38:56 <hiptobecubic> Is loop fusion done by rewrite rules or at the type level?
05:39:10 <gspr> hiptobecubic: Right. However, even a minimal example in my case involves enough typeclasses that the core becomes rather... long... is there any annotation or anything in the core that I can look for?
05:39:39 <gspr> hiptobecubic: I think I'm able to reduce it down to a case where one and only one loop fusion should fire, so if I can ask the core "are there any loop fusions?", I'm set
05:39:54 <hiptobecubic> I would really know. My usual approach is to try to simplify and extract the part i'm interested into a little test module and then compile that
05:39:55 <gspr> hiptobecubic: Hmm... not sure? I'm combining vector functions...
05:40:09 <hiptobecubic> I wouldn't*
05:40:14 <quicksilver> gspr: you can tell GHC to dump all rule firings
05:40:23 <hiptobecubic> gspr, yes i know what you mean.
05:40:26 <hiptobecubic> quicksilver, is it a 'rule' though?
05:40:51 <gspr> hiptobecubic: Yeah, I'm sort of doing that. But I fear that the number of typeclasses involved affects the fusing, and so even a minimal example has to have a few of those in, and then the core gets rather big rather quickly (at least to my untrained eyes)
05:41:04 <quicksilver> -ddump-rule-firings
05:41:16 <quicksilver> hiptobecubic: surely. What else could it be?
05:42:21 <gspr> quicksilver: Can I find the name of the fusions from the vector package in the documentation you think?
05:42:41 <gspr> oh wait, there's a stream/ustream here
05:42:53 <gspr> is that what I'm looking for, you think?
05:43:11 <gspr> *unstream
05:43:51 <hiptobecubic> yes
05:43:52 <quicksilver> yes
05:44:00 <gspr> cool, thanks
05:44:26 <gspr> is it possible to annotate the firing information with line number or something like that?
05:45:48 * quicksilver doesn't know
05:45:53 <gspr> OK
05:45:57 <gspr> thanks for the help though :)
05:46:16 <hiptobecubic> i feel like that would be difficult to do
05:46:38 <hiptobecubic> after a few rules have fired, lines will stop making sense with respect to the original code i would guess?
05:47:23 <gspr> maybe... but to my naive self (unfamiliar with GHC internals) I would sorta guess that annotating by function name "should" be possible
05:47:27 <gspr> but then again I'm clueless :)
05:47:32 <quicksilver> you could just make rewrites not alter the numbers - all the rewrite would end up in the 'same lines' as the bit it replaced
05:47:48 <quicksilver> but it certainly might be hard to understand why the rule was firing, since it was firing on already-rewritten code.
05:48:41 <gspr> Another question, to the degree that it even makes sense: How do typeclasses influence fusion?
05:48:59 <gspr> (for all I know there is no clear answer -- forgive my vagueness if so)
05:50:57 <gspr> Suppose, for example, I have data  Foo a = Foo (U.Vector a), where U is Data.Vector.Unboxed. Suppose I write (+) :: (Unbox a, Num a) => Foo a -> Foo a -> Foo a  as (Foo x) + (Foo y) = Foo (U.zipWith (+) x y)
05:51:35 <gspr> and then do something like  sum :: Foo a -> a , sum (Foo x) = U.sum x
05:52:18 <gspr> if I then do  f :: Foo Int -> Foo Int -> Int   f x y = sum (x + y), is there any hope of fusion?
05:52:54 <gspr> (gut feeling comments are also appreciated :) )
05:53:27 <quicksilver> you need everything to be inlined
05:53:47 <quicksilver> which is pretty much guaranteed if it's all in one file
05:53:55 <gspr> ah, but here we come to the crux of the matter
05:54:01 <quicksilver> and small definitions like that generally inline across modules
05:54:01 <gspr> in my case it's more like... 30 files :/
05:54:29 <gspr> I've begun throwing inlinable pragmas around, but I feel I'm not very good at actually doing it in a controlled and thoughtful way :)
05:54:32 <hiptobecubic> can you not check?
05:54:36 <quicksilver> you may mark the important ones with {-# PLZ PLZ PLZ I CAN HAZ INLINE THX X X X X X X #-}
05:54:55 <gspr> INLINABLE isn't sufficient?
05:55:06 <quicksilver> I don't understand the difference between INLINABLE and INLINE
05:55:22 <quicksilver> in fact, in general, you're beyond the point I can usefully  help you :)
05:55:37 <gspr> I've thought that INLINABLE is approximately "please inline, if you don't feel it's crazy"
05:55:47 <quicksilver> a post to haskell-cafe with an appropriate subject line may catch the eye of the vector package maintainers
05:56:00 <Axman6> i think it's "Please inline if you know all the types
05:56:02 <gspr> also, INLINABLE apparently lets you use SPECIALIZE at use sites instead of at definitions sites
05:56:17 <gspr> Axman6: Right, that sounds very useful
05:56:22 <gspr> quicksilver: Alright. Thanks a bunch anyway :)
05:56:29 <Axman6> right, so it leads to basically making SPECIALISE useless
05:56:36 <Axman6> but, probably not
05:57:05 <gspr> Axman6: I thought the idea was that marking functions as INLINABLE allows you to use SPECIALIZE outside their defining file
05:57:12 <gspr> which, to me at least, sounds very useful
05:57:21 <Axman6> huh, maybeh
05:57:40 <gspr> http://www.haskell.org/ghc/docs/7.4.1/html/users_guide/pragmas.html#inlinable-pragma
05:57:53 <gspr> 4th bullet
06:06:50 * hackagebot fclabels 1.1.4 - First class accessor labels. (SebastiaanVisser)
06:17:31 <hape01> is it correct that the kind of any data type is *, except the data type is not fully qualified, quasi lacking on parameters?
06:17:40 <hape01> then it is *->*
06:17:44 <hape01> e.g.
06:17:51 <hape01> or *->*->* and so on?
06:18:27 <hiptobecubic> hape01, yes I think
06:18:39 <hiptobecubic> kinds are like types of types
06:19:40 <hape01> hiptobecubic
06:19:43 <hape01> hiptobecubic: thank you
06:31:51 * hackagebot FPretty 1.0 - Efficient simple pretty printing combinators (OlafChitil)
06:35:39 <DMcGill> What are people's thoughts on using MVectors vs Maps for a 2D game board? Mutable arrays made everything much more complicated but constantly updating cells (even at log(n)) seems not great
06:36:14 <DMcGill> IntMaps even, then using Ix (Int, Int) to turn a 2D index into the Int index needed
06:37:20 <luite> perhaps you can use simple immutable boards in most of the program and copy them to a mutable array where you need fast updates (for example in your search function)
06:38:31 <DMcGill> also if the vector package is a wrapper over Data.Array, why do people say it's faster?
06:39:55 <sopvop> Data.Functor.Identity does not have a show instance? like instance (Show a) => Show (Identity a) where...
06:40:02 <tew88> Question attached as comment in the source: http://hpaste.org/72100 -- relating to RWH CH09 generally; the use of lambdas specifically -- can anyone help?
06:40:45 <luite> DMcGill: it's not
06:41:28 <luite> DMcGill: it uses GHC primitive arrays, not the higher level Ix-indexed ones
06:42:09 <luite> (that said, i have no idea which one actually is faster)
06:42:38 <byorgey> tew88: the answer to your question is: w x y z are not bound to anything yet.  myTest4 is a function \w x y z -> ...
06:44:02 <byorgey> so w x y z take whatever values you provide as arguments to myTest4.
06:44:42 <tew88> byorgey: So in that case, was I wrong to say that f and g were bound to the respective areas of myTest4 also?
06:44:59 <byorgey> tew88: no, that was correct
06:45:03 <tew88> Heh :(
06:47:07 <tew88> byorgey: Is this bit: -> f w x y z `q` g w x y z (with q subbed for &&) just telling me the type of the function then? InfoP Bool, presumably. I'm struggling to see how f and g have been bound, but the data they operate on not
06:47:30 <byorgey> it's not just telling you the type.
06:47:36 <byorgey> tew88: you can just expand out the definition.  For conciseness's sake let's  define  l = liftPath takeExtension ==? ".cpp"   and  s = sizeP >? 131072
06:48:17 <byorgey> then  myTest4 = l &&? s = andP l s = liftP2 (&&) l s = \w x y z -> l w x y z && s w x y z
06:48:50 <byorgey> that is, myTest4 is a function which takes 4 arguments.  it passes those arguments to l and s, and then combines the result with &&
06:50:22 <tew88> byorgey: Thank you!  Just one thing now remains... what values would I pass to myTest4?
06:51:12 <byorgey> tew88: well, myTest4 has type  InfoP Bool
06:51:32 <byorgey> which is defined as  FilePath -> Permissions -> Maybe Integer -> ClockTime -> Bool
06:51:45 <tew88> Ah, of course
06:52:37 <byorgey> tew88: incidentally, I find  (>?)  = orP   odd
06:52:43 <byorgey> I would expect (>?) = greaterP
06:53:02 <byorgey> and (||?) = orP
06:53:46 <byorgey> since you use >?  in myTest4 this could very well cause a type problem =)
06:53:46 <XexonixXexillion> Is there an idiomatic way to have persistent data (stored in a file, not a database) in a Haskell program?
06:53:46 <tew88> byorgey: Brain fart ;)
06:54:30 <tew88> byorgey: Thanks for holding my hand through that.  I think my confusion had to do with the infoP a type synonym (somewhat, anyway)
06:54:48 <byorgey> tew88: yes, there's a lot going on and it can be hard to keep straight at first
06:55:13 <byorgey> tew88: the basic idea is that the things we want to manipulate are themselves functions
06:55:29 <byorgey> but on a higher level we want to think of them not as functions but just as "things" we can manipulate and combine
06:55:43 <byorgey> and then at the very end we can apply the result to some arguments to get out a result
06:55:55 <byorgey> er, that last sentence was confusing
06:56:04 <quicksilver> XexonixXexillion: acid-state perhaps
06:56:18 <hepek> hello
06:56:29 <quicksilver> XexonixXexillion: idiomatic and clever but perhaps a bit to get your head around conceptually
06:56:33 <quicksilver> XexonixXexillion: (http://hackage.haskell.org/package/acid-state-0.6.5)
06:57:17 <applicative> DMcGill: where vector is fast, this can be due, not just to the underlying representation of arrays, but the fact that arrays are frequently not written due to fusion
06:59:06 <DMcGill> I see, thanks. Any comment on Vector vs MVector vs Map? This was for the icfp, my program got an order of magnitude improvement switching from Vectors to MVectors but I didn't get the chance to try Map
07:00:18 <Eduard_Munteanu> DMcGill: what sort of access patterns? Maps are O(log n), they're some sort of tree.
07:00:31 <XexonixXexillion> quicksilver: It may be overkill. I just need a single (albeit very large) variable to be loaded in at startup, and rewritten out when the program terminates
07:00:44 <edsko> hxt? haxml?
07:00:54 <edsko> any reasonw hy I would choose one XML package over another?
07:00:57 <edsko> just need to parse stuff
07:01:26 <quicksilver> XexonixXexillion: Data.Binary might be simpler.
07:01:28 <Eduard_Munteanu> edsko: HXT is quite featureful, dunno about haxml though
07:01:40 --- mode: ChanServ set +o mauke
07:01:41 --- mode: mauke set -b *!*@static.207.227.4.46.clients.your-server.de
07:01:41 <quicksilver> XexonixXexillion: there are tools to derive Binary instances automatically
07:02:38 <DMcGill> lots of things like "for each rock, check if there's empty space below it and if there is move the rock into it". I guess the answer to all these sorts of questions is to implement both and profile.
07:03:40 --- mode: mauke set -o mauke
07:03:43 <applicative> DMcGill: I dont know. One thing about non-mutable vectors is they do seem to require some practice to keep from interfering with fusion.
07:04:18 <XexonixXexillion> quicksilver: I'm currently using Data.Binary, I was just wondering if there was a better option
07:05:04 <quicksilver> XexonixXexillion: yes, acid-state :-) What attributes of the binary solution fall short of what you'd like?
07:05:24 <luite> XexonixXexillion: you could use just safecopy if you don't need the transactional updates of acid-state
07:05:41 <luite> XexonixXexillion: which gives you binary serialization with version management
07:06:04 <quicksilver> DMcGill, applicative : Map has the attribute of sharing data between old and updated maps. If you're making a bunch of small changes then a Map may well perform better than a Vector
07:06:22 <quicksilver> assuming your vector changes do not all perfectly fuse.
07:06:42 <quicksilver> but it's quite specific to the way you actually use stuff.
07:06:54 <luite> for lots of small updates, MVector is likely a lot faster though
07:07:16 <quicksilver> that is what I woulde xpect, yes.
07:07:25 <quicksilver> unless you actually need to keep hold of old versions.
07:08:48 <DMcGill> I ended up using MVector and the freezing it to do some speculative updates on it to find the next move. It wasn't too bad in the end even though something like 40% of the time was spent in freeze/thaw
07:08:49 <luite> right, last time i did that, i foudn explicitly holding on to old values in another array was still faster :)
07:09:13 <DMcGill> still I felt that our submission went ok
07:09:31 <XexonixXexillion> quicksilver: The instance of Binary is a mess, and I was looking to see if I could avoid rewriting it everytime I change the underlying data structure
07:09:48 <quicksilver> XexonixXexillion: use one of the automatic tools to generate the instance?
07:09:54 <quicksilver> or is there a reason they're not appropriate?
07:10:25 <luite> XexonixXexillion: that's what safecopy is for, you have a version in the binary thing and it lets you write upgrade things to convert an old serialized data structure to the new format
07:10:48 <trem> i have a small function which is basically doing a read / modify / write cycle on an unboxed, mutable vector. yet this function is responsible for ~30% of all allocations in my program (and slow, too). it's here: https://github.com/waldheinz/bling/blob/master/src/Graphics/Bling/Image.hs#L132
07:11:11 <luite> XexonixXexillion: (and it contains TH utilities to derive the instances)
07:11:14 <quicksilver> safecopy is much cleverer if versioning is required.
07:11:27 <trem> can someone aid me in finding out what's going on there? i'm staring at profiling output for hours now, to no avail...
07:11:30 <quicksilver> but if you don't need versioning there are many tools to derive Binary instances
07:11:57 <XexonixXexillion> luite: That's actually useful; it means I don't need to throw out my training data every time I decide to change something
07:12:47 <quicksilver> http://hackage.haskell.org/package/binary-derive http://hackage.haskell.org/package/derive http://hackage.haskell.org/package/DrIFT-cabalized/
07:14:27 <scooty-puff> i noticed the keys package, having type family Key in the Data.Key package
07:15:22 <scooty-puff> is there anything for inserts?
07:16:03 <scooty-puff> (to save a search: http://hackage.haskell.org/packages/archive/keys/0.2.2/doc/html/Data-Key.html)
07:16:20 <scooty-puff> well, http://hackage.haskell.org/packages/archive/keys/3.0/doc/html/Data-Key.html - probably best to see the latest
07:16:27 <Axman6> trem: I'd guess the add function is where the allocation is happening. Try making the values in the let more strict
07:16:36 <HugoDaniel> i need some help with template haskell
07:16:37 <HugoDaniel> http://hpaste.org/72101
07:16:53 * hackagebot really-simple-xml-parser 0.1.0.0 - A really simple XML parser (KashyapChatamballi)
07:17:08 <HugoDaniel> how can i apply 'f' in a template haskell function that returns Q Exp ?
07:17:57 <trem> Axman6, using bang-patterns?
07:18:03 <Axman6> sure
07:18:39 <scooty-puff> HugoDaniel: they need to be in different modules - handleMontage and getPadR
07:18:41 <quicksilver> not convinced that will help
07:18:52 <quicksilver> that's quite simple code, the strictness analyzer should be able to work it out
07:19:15 <HugoDaniel> scooty-puff: they are
07:19:20 <scooty-puff> hmm..
07:19:23 <Axman6> would turning that let into a case help?
07:19:31 <quicksilver> trem: are they unboxed vectors?
07:19:48 <quicksilver> yes, they are.
07:19:50 <scooty-puff> oic, duh, ok, think maybe 'f - i'm not really familiar, but maybe try: $(handleMontage "pad" [| f |])
07:19:59 <quicksilver> for unboxed vectors, MV.unsafeWrite is strict
07:20:08 <HugoDaniel> oh
07:20:10 <trem> quicksilver, yes, they are
07:20:14 <quicksilver> so everything gets forced and the optimiser should be able to see that
07:20:23 <scooty-puff> or might be able to just do $(handleMontage "pad" 'f) - can't remember when you can do that though
07:20:48 <HugoDaniel> is there a way to return a function from template haskell ?
07:20:52 <quicksilver> that just looks like a "genuine bottleneck" to me, trem - that's where your program is doing hard work.
07:20:54 <HugoDaniel> im always returning a Q Exp
07:21:04 <luite> Q Decl
07:21:05 <c_wraith> scooty-puff: they have different types.  'f is a Name, [| f |] is a Q Exp
07:21:13 <quicksilver> maybe there is something I'm missing.
07:21:24 <scooty-puff> ok
07:21:27 <luite> oops, Dec, not Decl
07:21:39 <ghorn> is there a mapAccumM ? (a -> b -> m (a, c)) -> a -> t b -> m (a, t c)
07:21:43 <HugoDaniel> thanks luite
07:21:59 <HugoDaniel> pehaps if i return a function from template haskell i can mix ghc stages
07:22:07 <HugoDaniel> because after compile it is going to be a function
07:22:08 <jfischoff> HugoDaniel: I don't think have TH generate a Exp at runtime, which is what the function is trying to do
07:22:12 <luite> stage restriction means that you have an imported f, not a locally defined one
07:22:27 <HugoDaniel> oh
07:22:35 <trem> quicksilver, the WeightedSpectrum the goes in is expensive to compute, and as it seems I don't give an readily evaluated specturm to addPixel but rather a thung which then blows up?
07:22:48 <HugoDaniel> im totally missing the point then :/
07:23:15 <jfischoff> HugoDaniel: TH needs to get all of its information at compile time
07:23:20 <luite> oh right that handler is actually impossible :)
07:24:02 <quicksilver> trem: well you don't use the 's' component of the weightedspectrum that I can see
07:24:09 <quicksilver> but I don't see why that thunk should 'build up'
07:24:13 <HugoDaniel> :/
07:24:18 <quicksilver> you're not making it any more complicated, you're just referring to it
07:24:27 <quicksilver> all you actually *do* is write an unboxed value to your MV
07:24:32 <quicksilver> which is a strict operation
07:24:36 <jfischoff> HugoDaneil: what do you want to do?
07:26:22 <luite> HugoDaniel: what is possible is scanning the dir for existing template files, and then generating the whole handler
07:26:37 <luite> but that does require a recompile if you add or change templates
07:26:39 <trem> quicksilver, but the 's' goes through toRGB (which currently just extracts the RGB values from the Spectrum data type, but this will get more involved later)
07:27:30 <quicksilver> oh missed that
07:27:34 <quicksilver> anyhow I don't see it "building up"
07:27:35 <HugoDaniel> luite: no problem, ill use the reload version of the shakespearean templates
07:28:00 <HugoDaniel> i can actually make this work, but its fugly
07:28:02 <HugoDaniel> let me show
07:28:21 <trem> quicksilver, could it be that some values need to be "repacked" there? maybe I should learn to read core...
07:31:02 <HugoDaniel> http://hpaste.org/72101
07:31:03 <HugoDaniel> here ^
07:31:04 <scooty-puff> relating to the keys package: would class A f where a :: Key f -> a -> f a make sense (i couldn't think of a good name, so went with a bad name - maybe Pure or Creatable or something?)
07:31:05 <HugoDaniel> it works
07:31:13 <HugoDaniel> but i would like a way to avoid all that boilerplate
07:31:38 <HugoDaniel> otherwise im going to have to repeat all of that in all my functions
07:31:41 <slack1256> if when I declare the (redundant) datatype 'newtype Example a = E ![a]'
07:31:56 <slack1256> is [a] evaluated to whnf or nf?
07:32:07 <scooty-puff> whnf - so just to :
07:32:30 <slack1256> being whnf (just the first element) an nf spine strict?
07:32:31 <slack1256> oh
07:32:36 <scooty-puff> you would either need to use deepseq or data List a = Nil | Cons a !(List a)
07:33:08 <XexonixXexillion> quicksilver: I can't get it to derive binary
07:33:30 <XexonixXexillion> quicksilver: It chokes on recursive types
07:33:37 <luite> HugoDaniel: ah that should be doable
07:33:53 <slack1256> scooty-puff: that make sense, since forcing anything to evaluate to nf requires deepseq. thanks
07:35:19 <HugoDaniel> yes but i lack template haskell skills
07:35:22 <luite> HugoDaniel: handleMontage does the case stuff compile time
07:35:32 <luite> HugoDaniel: you just need to make that check runtime
07:35:38 <luite> so you output the TH that performs the case
07:35:49 <luite> instead of doing the case and then outputting TH for one alternative
07:35:53 <HugoDaniel> ah
07:35:54 <HugoDaniel> yes
07:35:55 <HugoDaniel> good
07:36:18 <HugoDaniel> ok, let me try to split handleMontage then
07:36:49 <hpaste> Xek pasted “Deriving Binary error” at http://hpaste.org/72103
07:37:33 <XexonixXexillion> actually... nevermind... it's just failing at deriving binary for functions (as it should)
07:43:16 <applicative> trem what function are you using to test addPixel ?
07:43:50 <applicative> oh i see quicksilver already went through some things trem
07:44:23 <trem> applicative, it goes addSample -> filterSample -> addPixel
07:44:33 <hpaste> applicative pasted “addPixel” at http://hpaste.org/72104
07:45:10 <trem> applicative, filterSample causes serveral pixels to be updated on behalf of a single sample (that's the filtering at work)
07:45:55 <dotnet_> hj
07:45:58 <dotnet_> hi*
07:46:09 <trem> applicative, if I just use the "Box" filter (which is short-cirquited in filterSample) everything is fine (only a single pixel gets updated per sample)
07:46:33 <trem> applicative, but for the other filters it blows up, more than I think it should
07:47:45 <trem> applicative, to test it I just compile with profiling enabled and use one of the test scenes in the examples folder
07:48:41 <trem> applicative, and sometimes throwing in SCCs here and there revealed that it's really the addPixel function which is the problem (at least to my untrained eye)
07:48:41 <scooty-puff> i want to try to wrap IntSet, possibly HashSet, to make it work with Lookup, by requiring a Monoid instance on the type variable a - newtype WrappedIntSet a = WrapIntSet { unwrapIntSet :: IntSet } - is it possible to somehow manifest the Monoid dictionary as part of WrappedIntSet (outside of data MonoidDict a = ... mempty ... mappend
07:48:55 <applicative> trem I'm not seeing what it might be. There are a lot of lazy tuples  in here, but I dont see where they can be the trouble
07:49:36 <scooty-puff> i.e. what i would really like is if the Lookup type class had an associated Constraint
07:52:10 <applicative> trem by the way ghc-7.5 couldnt infer some types in Bling.Sample I added Float annotations
07:52:43 <applicative> gist.github.com/3176571 trem
07:53:38 <trem> applicative, hm, I still have that "Flt" type around, which was intended to allow switching between Double and Float at compile time, but I really can't effort the memory overhead of doubles, so I'll remove it some time soon..
07:54:55 <trem> i suspect this makes it harder for GHC to infer the types than it should be
07:55:03 <trem> or could be
07:56:20 <ghorn> how would this be done without state monad? http://hpaste.org/72105
08:01:55 * hackagebot cabal-rpm 0.6.1 - RPM package creator for Haskell Cabal-based packages (JensPetersen)
08:02:37 <ion> Didn’t hackagebot use to provide a link to the Hackage website?
08:05:14 <fmap> It did.
08:05:48 <roconnor> @type let mapAccumM f acc0 xs = flip (runStateT (put acc0 >> traverse (StateT (flip f)) xs)) in mapAccumM
08:05:49 <lambdabot> Not in scope: `traverse'
08:05:59 <roconnor> @type let mapAccumM f acc0 xs = flip (runStateT (put acc0 >> Data.Traversable.traverse (StateT (flip f)) xs)) in mapAccumM
08:06:00 <lambdabot>     Couldn't match expected type `a1 -> StateT s ((->) a) b'
08:06:00 <lambdabot>            against inferred type `StateT s1 m a2'
08:06:00 <lambdabot>     In the first argument of `Data.Traversable.traverse', namely
08:06:37 <roconnor> @type let mapAccumM f = flip (runStateT (Data.Traversable.traverse (StateT (flip f)) xs)) in mapAccumM
08:06:38 <lambdabot> Not in scope: `xs'
08:07:04 <roconnor> @type let mapAccumM f = flip (runStateT (Data.Traversable.traverse (StateT (flip f)))) in mapAccumM
08:07:06 <lambdabot>     Couldn't match expected type `a -> f b'
08:07:06 <lambdabot>            against inferred type `StateT s m a1'
08:07:06 <lambdabot>     In the first argument of `Data.Traversable.traverse', namely
08:07:37 <HugoDaniel> ok, i give up on this template haskell
08:07:41 <HugoDaniel> ill try again tomorrow
08:07:44 <roconnor> @type let mapAccumM f = flip (runStateT . (Data.Traversable.traverse (StateT . (flip f)))) in mapAccumM
08:07:45 <HugoDaniel> thanks for the help
08:07:46 <lambdabot> forall a a1 (m :: * -> *) b (t :: * -> *). (Monad m, Functor m, Data.Traversable.Traversable t) => (a -> a1 -> m (b, a)) -> a -> t a1 -> m (t b, a)
08:08:25 <roconnor> ghorn mapAccumM f = flip (runStateT . (Data.Traversable.traverse (StateT . (flip f))))
08:08:35 <roconnor> ghorn: mapAccumM f = flip (runStateT . (Data.Traversable.traverse (StateT . (flip f))))
08:08:49 <ghorn> thank you!
08:08:55 <roconnor> oh crap that isn't right
08:09:26 <roconnor> @type let mapAccumM f = flip (evalStateT . (Data.Traversable.traverse (StateT . (flip f)))) in mapAccumM
08:09:28 <lambdabot> forall a a1 (m :: * -> *) b (t :: * -> *). (Functor m, Data.Traversable.Traversable t, Monad m) => (a -> a1 -> m (b, a)) -> a -> t a1 -> m (t b)
08:09:39 <roconnor> well, that one has the same type signature
08:09:44 <roconnor> so it must be right!
08:09:49 <ghorn> haha
08:11:56 * hackagebot haskeline 0.7.0.1 - A command-line interface for user input, written in Haskell. (JudahJacobson)
08:12:09 <levi> I had Haskell type signature nightmares last night. :P
08:12:39 <mouna> Could anyone helps me debugging this exercise so I could detect my coding error
08:12:44 <hpaste> Mouna pasted “How to debug to find errors” at http://hpaste.org/72106
08:13:15 <roconnor> ghorn: except that my pairs are backwards from what you have.
08:13:26 <ghorn> uuuuuugh
08:13:31 <roconnor> ghorn: really that is the fault of StateT being the wrong way around.
08:13:47 <roconnor> I can and some swaps if you need
08:13:59 <ghorn> it doesn't matter
08:14:10 <c_wraith> mouna: why do you have a reverse in there?
08:14:40 <c_wraith> mouna: since it's clearly the only part that can change the order of elements
08:15:14 <c_wraith> mouna: (well, ok, that whole case is based on changing order..  why?)
08:16:04 <mouna> @ c_wraith because when trying to execute it myself I found that I need reverse to get the expected result
08:16:05 <dzhus> is there any shortcut for «current module name»?
08:16:07 <Eduard_Munteanu> > let slice m n = take (n - m + 1) . drop (m - 1) in slice "abcdef" 2 5
08:16:08 <lambdabot>   Couldn't match expected type `GHC.Types.Int'
08:16:08 <lambdabot>         against inferred type ...
08:16:23 <Eduard_Munteanu> > let slice m n = take (n - m + 1) . drop (m - 1) in slice 2 5 "abcdef"
08:16:25 <lambdabot>   "bcde"
08:16:29 <applicative> trem: maybe you should post this on stackoverflow with an easy main function to test? there are several extremely knowledgeable people who might have wisdom to impart
08:16:48 <hpaste> Sofi pasted “Sofi” at http://hpaste.org/72107
08:17:25 <c_wraith> mouna: only because you are, for some reason, appending x to the end of the list, instead of just putting it on the front
08:17:58 <dzhus> suppose my module Foo.Bar.Baz defined function foo, which is also defined in Prelude. How do I use foo without qualified import for Prelude?
08:18:06 <c_wraith> mouna: you saw that your output was backwards, and decided to double-reverse it, instead of just figuring out why it was backwards in the first place
08:18:15 <mouna> do you mean if I put it like x: slice' xs ... I'll get the right result
08:18:16 <mouna> ?
08:18:21 <Eduard_Munteanu> dzhus: import Prelude hiding (foo)
08:18:36 <dzhus> Eduard_Munteanu: yes, and I also want to use both my foo and Prelude.foo.
08:18:37 <c_wraith> mouna: I don't know if it'll be right - but it'll be simpler, and therefore easier to debug
08:18:56 <dzhus> can I import one identifier in qualified namespace and the rest to default?
08:19:05 <applicative> dzhus: add import qualified Prelude,
08:19:09 <mouna> @ c_wraith ok let me modify it and see the result
08:19:13 <applicative> to what Eduard_Munteanu said
08:19:16 <Eduard_Munteanu> dzhus: sure
08:19:39 <dzhus> applicative: Eduard_Munteanu: didn't know it works! thank you!
08:19:48 <trem> applicative, i think i'll do if i can't come up with something in the next hour. here's some solid gold for your effort: http://imageshack.us/f/140/imglm.png/ :-)
08:20:01 <Eduard_Munteanu> I think Haskell should have agda's "renaming" for imports.
08:20:22 <trem> applicative, thanks for trying
08:20:26 <Eduard_Munteanu> dzhus: what function is that, btw?
08:21:17 <mouna> @ c_wraith you re right I got the result I needed
08:22:06 <mouna> @ c_wraith could you please give me some guidance to learn how to debug a program ?
08:23:09 <Eduard_Munteanu> mouna: there's various stuff to aid you with that, but in this case rewriting the function in a more obvious manner is a better idea
08:23:21 <Eduard_Munteanu> More obviously correct, that is.
08:23:37 <tew88> byorgey: Out of interest, and in reference to the code you were helping me with earlier, is that a common method of solving problems in Haskell?  It feels really obtuse to me... I'd prefer to be working with data declarations than functions with sufficiently "long" definitions as to necessitate the use of type synonyms.
08:23:57 <c_wraith> mouna: I don't have a lot of time right now - I was actually about to leave. I'll just repeat my last thing again - the simpler you can make it, the better. If it feels like things are getting really complicated when you try to solve what should be an easy problem, look for an easier way to do it.
08:24:02 <tew88> Likely I just need to train my brain to think that way :>
08:26:17 <mouna> @ Eduard_Munteanu do you mean for debugging ?
08:26:27 <mouna> here is the right version
08:26:32 <hpaste> Mouna annotated “How to debug to find errors” with “How to debug to find errors (annotation)” at http://hpaste.org/72106#a72108
08:27:40 <Eduard_Munteanu> mouna: yeah
08:28:36 <hpaste> scooty-puff pasted “Too far?” at http://hpaste.org/72109
08:29:58 <applicative> trem: yeah, I'm still practicing with this kind of problem alas ...
08:30:18 <scooty-puff> am considering a constraint type Map k m = (Singleton k m, Lookup k m, Monoid (m v))
08:30:21 <mouna> @Eduard_Munteau  could you tell me how to execute in tracing mode with GHCi ?
08:30:21 <lambdabot> Unknown command, try @list
08:33:20 <hpaste> scooty-puff annotated “Too far?” with “Too far? (annotation)” at http://hpaste.org/72109#a72111
08:34:51 <Eduard_Munteanu> mouna: I don't know about that off the top of my head, try looking at the docs. But you might want to try using Debug.Trace instead.
08:34:58 <Eduard_Munteanu> @hoogle trace
08:34:58 <lambdabot> Debug.Trace module Debug.Trace
08:34:59 <lambdabot> Debug.Trace trace :: String -> a -> a
08:34:59 <lambdabot> Debug.Trace traceShow :: Show a => a -> b -> b
08:35:02 <scooty-puff> it seems that for class A b c | b -> c, more things are unambiguous than type family C b, class A b - is this generally the case?
08:35:09 <hpaste> applicative annotated “How to debug to find errors” with “How to debug to find errors (annotation) (annotation)” at http://hpaste.org/72106#a72112
08:35:31 <Saizan> scooty-puff: f and v are not in scope in the definition of Map
08:35:42 <applicative> mouna: a couple mechanical improvements ^^^
08:35:48 <scooty-puff> o, woops, meant k instead of ref, f
08:36:14 <scooty-puff> and i guess the v just can't happen..
08:36:50 <mouna> ok Thank you @ Eduard_Munteanu and @ lambdabot
08:37:13 <scooty-puff> is type Map k map = (..., forall v . Monoid (map v)) legal, and if so, does it mean to get a fresh v at each point of use?
08:37:31 <Saizan> i don't think it is
08:37:40 <scooty-puff> ok
08:37:42 <scooty-puff> blah
08:38:56 <hape01> @list
08:38:57 <lambdabot> http://code.haskell.org/lambdabot/COMMANDS
08:40:01 <Saizan> and i think fundeps only allow more inference when they end up being bidirectional, but icbw
08:48:18 --- mode: ChanServ set +o mauke
08:48:19 --- mode: mauke set -b *!*@162.105.248.71
08:50:18 --- mode: mauke set -o mauke
09:02:57 <mjga> @seen mjga
09:02:58 <lambdabot> Unknown command, try @list
09:03:13 <orzo> if there is a mutable interface using IO, how doable is it to convert it to ST ?
09:03:23 <mjga> Strange: there is @seen and @users on @list, but lambdabot doesn't know it?
09:04:25 <alpounet> preflex: xseen mjga
09:04:26 <preflex>  mjga was last seen on freenode/#haskell 1 minute and 2 seconds ago, saying: Strange: there is @seen and @users on @list, but lambdabot doesn't know it?
09:04:41 <alpounet> we generally use preflex for that
09:05:25 <Eduard_Munteanu> orzo: that would be unsafe
09:05:39 <Eduard_Munteanu> @hoogle unsafeSTToIO
09:05:39 <lambdabot> Control.Monad.ST unsafeSTToIO :: ST s a -> IO a
09:05:40 <quicksilver> mjga: we removed it as it was a memory leak and no one could fix it.
09:05:45 <Eduard_Munteanu> Erm.
09:05:50 <Eduard_Munteanu> @hoogle unsafeIOToST
09:05:50 <lambdabot> Control.Monad.ST unsafeIOToST :: IO a -> ST s a
09:05:50 <lambdabot> Control.Monad.ST.Lazy unsafeIOToST :: IO a -> ST s a
09:05:50 <lambdabot> GHC.Conc.Sync unsafeIOToSTM :: IO a -> STM a
09:05:58 <quicksilver> or, well, no one *did* fix it.
09:06:12 <orzo> oh nifty
09:06:23 <Eduard_Munteanu> @hoogle sttoio
09:06:23 <lambdabot> Control.Monad.ST.Lazy stToIO :: ST RealWorld a -> IO a
09:06:23 <lambdabot> Control.Monad.ST stToIO :: ST RealWorld a -> IO a
09:06:23 <lambdabot> Control.Monad.ST unsafeSTToIO :: ST s a -> IO a
09:06:45 <orzo> i'm not sure why i'd want st -> io
09:07:16 <Eduard_Munteanu> orzo: if you're writing that interface, then you should probably put it in ST so one can convert it to IO
09:08:32 <orzo> is stToIO safer somehow?
09:08:42 <orzo> i mean, no "unsafe" prefix
09:08:44 <Eduard_Munteanu> orzo: yes, it is safe
09:08:56 <Eduard_Munteanu> orzo: ST is a subset of IO
09:10:13 <orzo> judy array should have an st interface, shouldn't it?
09:10:21 <quicksilver> why would you use stToIO instead of runST?
09:10:46 <orzo> i think it's to provide an IO interfacde after you implemented an ST one
09:10:56 <Eduard_Munteanu> quicksilver: maybe because runST doesn't let you pass those refs around between invocations
09:11:09 <orzo> oh
09:11:12 <quicksilver> Eduard_Munteanu: but why would you be keeping them around?
09:11:28 <quicksilver> (instead us just using IORefs, in that kind of case?)
09:11:40 <quicksilver> maybe there is some possible polymorphism gain here but I can't quite see it
09:12:53 <Eduard_Munteanu> quicksilver: I guess it makes sense if you're using an interface that can give you STRefs back. You can runST if you don't need that, but otherwise you could be using it to keep e.g. global state around
09:14:58 <quicksilver> Eduard_Munteanu: yes, I suppose so
09:15:16 <quicksilver> { 1 bit that gives STRefs back } { some IO } { second bit that needs the STRefs from the first }
09:15:38 <mjga> alpounet: thx :-)
09:18:53 <mjga> quicksilver: why didn't you update documentation about available commands?
09:19:03 <mjga> quicksilver: why didn't you update documentation about available commands?
09:19:20 <quicksilver> I imagine they forgot that was there.
09:30:53 <Saizan> there's also the ambiguity of whether the repo is about #haskell's lambdabot or the program in general
09:42:07 * hackagebot hums 0.4.3 - Haskell UPnP Media Server (BardurArantsson)
09:53:11 <pqmodn> @check (==) <*> (read . (show :: String -> String))
09:53:14 <lambdabot>   "OK, passed 500 tests."
09:55:27 <pqmodn> what's the meaning of "\&9" in the string ""#2\246H\250\&9|"? by itself, "\&9" == "9"
09:55:55 <c_wraith> > "\&9"
09:55:56 <lambdabot>   "9"
09:56:06 <c_wraith> > "\&F"
09:56:07 <lambdabot>   "F"
09:56:13 <c_wraith> huh.  not sure
09:56:34 <pqmodn> > "#2\246H\250\&9|" == "#2\246H\2509|"
09:56:35 <lambdabot>   False
09:57:09 * hackagebot scotty 0.4.5 - Haskell web framework inspired by Ruby's Sinatra, using WAI and Warp (AndrewFarmer)
09:57:48 <hpaste> dzhus pasted “How to make sure that Recombinable instance is coherent with Splittable instance?” at http://hpaste.org/72114
10:00:03 <dzhus> in other words, how to enforce that for any Splittable task there's Combinable result, for which combine is defined properly?
10:06:07 <fryguybob> pqmodn: The \& allows you to put a digit after a numeric escape.
10:06:58 <Saizan> typeclasses ending in -able are ugly as hell, but i think you want class Monoid (Result task) => Splits task where type Result task :: *; .. the Splittable methods here ..
10:07:34 <dzhus> Saizan: what do you propose instead? record-packed API?
10:08:16 <Saizan> dzhus: i was just picking at the naming convention not the use of typeclasses :)
10:08:25 <dzhus> ah
10:08:38 <Saizan> dzhus: btw, you should check this package http://hackage.haskell.org/package/reducers
10:08:55 <fryguybob> pqmodn: It is mentioned here: http://www.haskell.org/onlinereport/lexemes.html
10:09:44 <dzhus> Saizan: that feel when you guess the author of the package from its name.
10:10:01 <Saizan> dzhus: heh
10:12:59 <pqmodn> fryguybob: thanks!
10:15:14 <hpaste> fragamus pasted “WTF” at http://hpaste.org/72115
10:16:06 <Ralith> Saizan: why is that ugly?
10:16:43 <hpaste> d-snp pasted “How could this be made shorter?” at http://hpaste.org/72116
10:17:02 <keseldude> fragamus: Binary expects kind *, not * -> *
10:17:24 <d-old> eh, d-snp is me
10:17:43 <d-old> is there some way I could pass each function that set of parameters?
10:17:49 <d-old> without writing them out each time
10:17:54 <fragamus> whoa so what makes mine have kind * -> *
10:18:58 <keseldude> the fact that it has a type variable, a
10:19:16 <keseldude> Char, for example, has kind *
10:19:30 <keseldude> so if you wanted to make an instance of Binary, you could do it specifically for certain types
10:19:36 <keseldude> like this
10:19:46 <keseldude> instance Binary (Thang Int)
10:19:55 <d-old> hm nvm I got it, just abstract out the handler
10:20:31 <hpaste> pqmodn annotated “How could this be made shorter?” with “How could this be made shorter? (annotation)” at http://hpaste.org/72116#a72117
10:20:43 <pqmodn> d-old: yep :)
10:21:22 <keseldude> fragamus: or you could do instance (Binary b) => Binary (Thang b)
10:27:15 <fragamus> yeah i fixed it thanks
10:28:09 <Qtr> How old is SPJ?
10:28:57 <hiptobecubic> Immortal
10:29:15 <hiptobecubic> Qtr, also, 54.
10:31:09 <Qtr> Is he the greatest now living computer scientist?
10:32:16 * hackagebot benchpress 0.2.2.6 - Micro-benchmarking with detailed statistics. (JohanTibell)
10:34:28 <jfischoff> anyone used fay and ghcjs? how do they compare?
10:35:50 <luite> ghcjs actually compiles haskell, it can compile most packages to javacript
10:36:01 <luite> even those that use bytestring
10:36:23 <luite> but the generated code is bigger, and performance is not great yet
10:36:33 <jfischoff> ah
10:36:42 <luite> it fully supports all ghc features, like type classes, type families
10:36:53 <luite> since it compiles stg to js
10:37:05 <jfischoff> cool
10:37:13 <luite> fay has more limited support but generates more readable and compact js, but doesn't even support type classes atm
10:38:00 <byorgey> fay just uses ghc for typechecking, then re-parses the code itself and generates code, right?
10:38:08 <byorgey> generates js I mean
10:38:13 <luite> the sample uploaded by hamishmack shows that ghcjs can compile packages like fay, haskell-src-exts and all their dependencies to javascript
10:38:36 <luite> yeah
10:39:13 <luite> but i think that the current fay code generator doesn't use trampolining
10:39:33 <luite> so it will blow the javascript stack in some cases
10:43:45 <Qtr> So isn't SPJ a professor?
10:44:02 <byorgey> no
10:44:07 <jamiltron> He was, I believe now he is a full-time researcher at Microsoft
10:44:13 <byorgey> he used to be, yes
10:44:59 <Qtr> Professor as in Professor not just uni lecturer? Cant you keep the title after you quit uni?
10:45:30 <byorgey> uh, it depends
10:46:02 <byorgey> in some places it is just a job description and not a title
10:46:35 <hiptobecubic> i didn't realize it wasn't like that everywhere actually
10:46:42 <byorgey> Qtr: are you asking whether he has a PhD?
10:46:53 <hiptobecubic> I guess in NL and the UK it's an actual legally limited title
10:47:01 <byorgey> (the answer is no, actually)
10:47:07 <hiptobecubic> in the US you can just slap it on whatever you want
10:47:18 <byorgey> right
10:47:28 <luite> hiptobecubic: really? in the netherlands you're not allowed to call yourself a professor unless you have a job. it's not a title you earn once
10:48:25 <jamiltron> byorgey: Which kind of surprised me, actually. I had always assumed he had a PhD
10:49:08 <byorgey> jamiltron: most people in his position would.  He just managed to distinguish himself so much that at this point no one really cares.
10:49:28 <Saizan> Ralith: if i have to second-guess my tastes i'd say it's because typeclasses are always about what one is able to do with some types, so the -able is too much redundancy
10:50:38 <luite> byorgey: yay that means there's hope for people without a PhD \o/  except that you might need to be as good as SPJ :(
10:50:51 <byorgey> hehe
10:51:31 <beaky> in Haskell, what's the best way to represent a polynomial, and what's the best way  to find the derivate of that polynomial?
10:52:01 <c_wraith> a simple polynomial is just a list of coefficients
10:52:16 <luite> beaky: uh it really depends on what kind of polynomial, it it sparse?
10:52:24 <beaky> right it could be sparse
10:52:45 <byorgey> then use a Map from power to coefficient.
10:53:13 <beaky> right map powerRuleDerivative list
10:53:16 <c_wraith> and the derivative is just a shorter list with some multiplication
10:53:23 <sm> I moved a .virthualenv dir to another path, and did a text replace of the old path everywhere I could find it in the files, but ghc-pkg fails with "Failed reading at byte position..". Does anyone know how to do this ?
10:53:34 <gwern> @quote
10:53:35 <lambdabot> <bfh6558> says: foldr.com reminds me of some horrible lisp nightmear I had a few weeks back
10:53:37 <sm> I'm hoping to to have to rebuild the lot
10:53:40 <sm> not to
10:53:58 <hiptobecubic> luite, i'm not sure how it works here. I was just looking at the wiki page
10:54:11 <c_wraith> sparse would just a list of pairs, at the most primitive
10:54:27 <luite> right, unless you have huge polynomials, then you might need some more tricks. I used judy hashtables once to represent huge multivariate polynomials :)
10:56:08 <luite> hiptobecubic: i think people think it's difficult to use, but actually it really isn't that bad :)
10:56:39 <luite> hiptobecubic: the problem is that compiling whole packages requires some interaction with cabal, which is a bit more tricky
10:56:45 <luite> but fay doesn't have that either
10:57:12 <luite> ghcjs has two options: either you integrate the ghcjs code generator into your regular ghc, and it builds javascript along every package that you install
10:57:26 <luite> or you have a separate ghcjs compiler and cabal database
10:57:37 <luite> the latter is a bit more experimental
10:57:42 <luite> but easier to install
10:59:00 <jfischoff> unfortunately their both to heavy weight for me. I'm just going to use this http://osteele.com/sources/javascript/functional/
10:59:10 <hiptobecubic> luite, are we still talking about being a professor? :)
10:59:19 <Qtr> a tuple cant be any size right?
10:59:26 <luite> ooh
10:59:34 <Qtr> like in an arg, its either a 2-tuple or a 3-tuple or an n-tupåle?
10:59:40 <luite> hiptobecubic: hehe
10:59:58 <jfischoff> luite: No type safety but the code looks familar
11:00:00 <luite> hiptobecubic: what is 'here' for you?
11:01:03 <hiptobecubic> luite, also the netherlands. But i'm not from 'here' so i don't know about the use of the title
11:01:26 <luite> hiptobecubic: ah right
11:07:47 <Qtr> show is for debugging right? not for prettyprinting?
11:08:18 <dzhus> show must go on.
11:08:24 <sm> Qtr: strictly speaking, yes
11:20:11 <hiptobecubic> @info ap
11:20:11 <lambdabot> ap
11:20:21 <hiptobecubic> thanks.
11:20:31 <hiptobecubic> @hoogle ap
11:20:31 <lambdabot> Prelude appendFile :: FilePath -> String -> IO ()
11:20:31 <lambdabot> System.IO appendFile :: FilePath -> String -> IO ()
11:20:31 <lambdabot> Control.Monad ap :: Monad m => m (a -> b) -> m a -> m b
11:20:37 <Taneb> Monad m => m (a -> b) -> m a -> m b
11:20:41 <fmap> There is no @info.
11:20:47 <Taneb> @info id
11:20:47 <lambdabot> id
11:20:51 <Taneb> :(
11:20:59 <Taneb> @info ECHO
11:21:00 <lambdabot> ECHO
11:21:02 <hiptobecubic> Taneb, well that's what i'd expect for id :)
11:21:10 <fmap> @info do { a <- m; return a }
11:21:11 <lambdabot> m >>= \ a -> return a
11:23:54 <hiptobecubic> <$> is fmap?
11:24:00 <Taneb> Yes
11:24:05 <Taneb> Which is the one made by the nice person, pipes or conduit?
11:24:11 <luite> lol
11:24:42 <merijn> hiptobecubic: Yes
11:24:59 <sm> they're both nice, with occasional evil spells
11:25:06 <scooty-puff> is there anything like class Monoid' f where empty :: f a; append :: f a -> f a -> f a that would work for maps?
11:25:15 <merijn> Taneb: I have no opinion, but you're probably referring to conduit, if I understand the situation
11:25:37 <Taneb> It's like FortressCraft is a good game, but the guy who makes it is a right...
11:25:40 <scooty-puff> i have a class Key k where type Map k :: * -> * that i would like to have a superclass Monoid' (Map k) -> Monoid (Map k v) is invalid
11:25:41 <Taneb> I don't know what language I'm allowed to use in this channel?
11:26:00 <Clint> i suggest "pigfucker"
11:26:04 <hiptobecubic> @src fmap (->)
11:26:05 <lambdabot> Source not found. Your mind just hasn't been the same since the electro-shock, has it?
11:26:13 <Taneb> @src fmap ((->) r)
11:26:13 <hiptobecubic> :'(
11:26:13 <lambdabot> Source not found. You speak an infinite deal of nothing
11:26:23 <hiptobecubic> @src (.)
11:26:24 <lambdabot> (f . g) x = f (g x)
11:26:24 <lambdabot> NB: In lambdabot,  (.) = fmap
11:26:36 <hiptobecubic> what is NB?
11:26:38 <Taneb> fmap = (.)
11:26:40 <Botje> :t fmap fmap fmap
11:26:41 <lambdabot> forall (f :: * -> *) a b (f1 :: * -> *). (Functor f, Functor f1) => (a -> b) -> f (f1 a) -> f (f1 b)
11:26:44 <merijn> Taneb: I usually just use whatever uncensored profanity I want in here. Unless you go on useless rants and/or needlessly offend people in the channel no one seems to mind
11:26:45 <Botje> hiptobecubic: "nota bene"
11:26:50 <merijn> hiptobecubic: Nota bene
11:27:09 <Taneb> hiptobecubic, that's from Control.Monad.Instances
11:27:16 <merijn> Means something along the lines of "take note"
11:27:19 <hiptobecubic> yes
11:27:33 <merijn> :t (.)
11:27:35 <lambdabot> forall a b (f :: * -> *). (Functor f) => (a -> b) -> f a -> f b
11:27:39 <merijn> :t (Prelude..)
11:27:40 <lambdabot> forall b c a. (b -> c) -> (a -> b) -> a -> c
11:29:04 <Taneb> @quickcheck (.) == (Prelude..)
11:29:05 <lambdabot> Unknown command, try @list
11:29:07 <lpsmith> Ok, I know this has been discussed before,  I just didn't follow the discussion too closely.
11:29:53 <lpsmith> But the orphaned instance problem is a bit of a problem.
11:30:19 <Taneb> It's a problem, but it's a problem that can't be fixed
11:30:32 <Taneb> Where should the Aeson instance for FamilyTree be?
11:30:48 <coderarity> the problem is a problem
11:30:56 <lpsmith> Well,  but I don't see why it can't be fixed.
11:31:31 <Taneb> In aeson? But that would add in a pointless dependency for a package nobody uses
11:31:50 <Taneb> In familytree? Another dependency
11:32:04 <lpsmith> No, by tweaking the Haskell language and/or cabal a little bit
11:32:19 <lpsmith> but you understand which problem I'm talking about
11:33:58 <lpsmith> Does anybody know what solutions have been proposed though?
11:34:46 <Taneb> lpsmith, my point is, if anyone wants it for their package, they'd have to put the instance in their package, and if the instance is elsewhere and someone wants to use both CONFLICT
11:35:07 <Taneb> My idea was a #if CABALINSTALLED aeson
11:35:16 <Taneb> instance ToJSON FamilyTree where...
11:35:18 <Taneb> #endif
11:36:04 <lpsmith> The problem with that is it then depends on which order things are compiled in.
11:36:41 <ypo> hey folks, i'm a haskell beginner and i'm just crawling through "learn you a haskell for a great good". Right now i'm on the point where i define my own head' function.
11:36:43 <ypo> See my code:
11:36:44 <lpsmith> which might not be too bad of a problem if cabal is smart enough to prefer a certain order,  and maybe recompile the familytree package when aeson gets installed
11:36:44 <ypo> head' :: [a] -> a
11:36:46 <ypo> head' [] = error "Can't call head on an empty list, dummy!"
11:36:48 <ypo> head' (x:_) = x
11:36:49 <ypo> My question is: why there has to be parentheses around x:_ ? I mean - it's not a tupel.
11:37:19 <Taneb> ypo, disambiguation
11:37:28 <Taneb> I think
11:37:33 <Taneb> I don't actually know?
11:37:52 <kallisti> any recommendations on how to improve this longest common subsequence algorithm? http://sprunge.us/NdUK?haskell
11:37:54 <lpsmith> My opinion syntax is syntax;  I usually just accept it
11:38:00 <Taneb> foo a : b c : d = ((a, c), (b, d))
11:38:05 <otters> > let r x:_ = x in r [1]
11:38:07 <lambdabot>   <no location info>: Parse error in pattern
11:38:08 <Taneb> What does the LHS mea?
11:38:28 <lpsmith> ypo, you do need parenthesis in general around any given data constructor that has arguments
11:38:32 <lpsmith> so for example
11:38:41 <kallisti> http://sprunge.us/jADM?haskell now with fewer redundant imports!
11:39:04 <lpsmith> either left _right (Left a) = left a;   either _left right (Right b) = right b
11:39:45 <levi> ypo: The same reason you have to put parentheses around addition in an arithmetic expression if it's next to a multiplication. Operator precedence rules.
11:40:14 <lpsmith> :t either
11:40:15 <lambdabot> forall a c b. (a -> c) -> (b -> c) -> Either a b -> c
11:42:51 <ypo> lpsmith: sorry, but I don't understand you explanation. Could you try to explain it more for beginners?
11:42:58 <ypo> *your
11:43:03 <Ornedan> Well, this is interesting... I've got code that loads fine from emacs mode into it's interactive ghc session, but not in plain ghci (nor does it compile)
11:43:06 <osa1> can anyone help me, I'm trying to understand ErrorT and Either's monad instances. what's wrong with last function in this code? (see also the comments) http://hpaste.org/72119
11:43:29 <lpsmith> ypo, the Either datatype is a discriminated union
11:43:42 <lpsmith> so it's   data Either a b = Left a | Right b
11:43:57 <lpsmith> it tells me that I have something of either type a or type b,  but not both.
11:44:20 <ypo> lpsmith: like XOR?
11:44:22 <lpsmith> Kind of like a tuple tells me I have something of both type a and both b
11:44:23 <levi> Ornedan: Are you sure emacs is calling the same ghci?
11:44:41 <lpsmith> ypo,  yes actually,  kind of like XOR
11:44:57 <lpsmith> so there is a very useful function called "either"
11:44:59 <lpsmith> :t either
11:45:00 <lambdabot> forall a c b. (a -> c) -> (b -> c) -> Either a b -> c
11:45:03 <kallisti> ypo: patterns are intended to resemble equations that mirror the Haskell code that they match on.  In a Haskell expression, head (x:xs)  and head x : xs  are very different things.
11:45:15 <kallisti> ypo: likewise with patterns
11:45:21 <lpsmith> that takes two functions as arguments,  and applies one of them depending on which kind of thing you actually get in the end
11:45:33 <otters> @pl \x y -> (fromIntegral x) / (fromIntegral y)
11:45:34 <lambdabot> (. fromIntegral) . (/) . fromIntegral
11:45:55 <lpsmith> so  one function is of type (a -> c),   the other function is type (b -> c)
11:46:09 <lpsmith> Then it takes an (Either a b) and applies the corresponding function
11:46:11 <kallisti> lpsmith: I don't think this is related to his original question.
11:46:19 <hiptobecubic> otters, don't use that...
11:46:21 <lpsmith> kallisti, yes it is
11:46:55 <Ornedan> levi: Yes
11:46:59 <lpsmith> so when we write the "either" function,  we need to put parentheses around the data constructors,  because they take arguments
11:47:13 <lpsmith> even though those arguments are not tuples.
11:47:14 <ypo> kallisti: what is the difference between (x:xs) and x:xs ?
11:47:17 <otters> hiptobecubic: what should I do
11:47:24 <freemonad> is it possible to use Data.STRef with the lazy version of runST (i.e. in Control.Monad.ST.Lazy)?
11:47:32 <kallisti> ypo: nothing. however head x : xs  and head (x : xs)  are different
11:47:34 <lpsmith> ypo, nothing,  it's just that you need to write the first when you are on the left hand side of a function definition
11:47:55 <kallisti> ypo: the first one is (head x) : xs
11:48:06 <lpsmith> so when you write either,  you need to write   either left _ (Left a) = left a
11:48:18 <lpsmith> and then    either _ right (Right b) = right b
11:48:39 <kallisti> ypo: function application has higher precedence than any operator.
11:49:14 <kallisti> ypo: precedence rules also apply in patterns.
11:49:32 <levi> ypo: Juxtaposition takes precedence over :, so you use parentheses to override that behavior.
11:49:33 <ypo> kallisti: so if i write func x:xs it tries to apply func to x and than put it at the front of xs
11:49:37 <kallisti> yes
11:49:40 <fmap> otters: do both `fromIntegral' have same type?
11:49:49 <otters> I think they're both Int
11:49:54 <otters> :t length
11:49:56 <lambdabot> forall a. [a] -> Int
11:49:58 <otters> yeah
11:50:08 <fmap> then `(/) `on` fromIntegral'
11:50:11 <ypo> kallisti: and if i write func (x:xs) then (x:xs) is ONE argument_
11:50:16 <kallisti> yep
11:50:20 <otters> fmap: yeah, I was just looking for the function combinator that would do it
11:50:30 <otters> :t (/) `on` fromIntegral
11:50:31 <lambdabot> forall b a. (Fractional b, Integral a) => a -> a -> b
11:50:39 <ypo> well thanks
11:50:46 <ypo> that sounds understandable
11:51:38 <kallisti> ypo: we have some shortcuts as well.  the $ operator is commonly used as well. it's the same as function application, but with very low precedence and right associativity.  so f x $ g y $ h z   is equivalent to f x (g y (h z))
11:52:36 <kallisti> ypo: so you could write head (x:xs)  as head $ x:xs
11:52:47 <ypo> kallisti: Thanks but I think i will avoid this kind of shortcuts before I truly understand this things
11:52:54 <kallisti> ypo: sure.
11:53:10 <kallisti> ypo: the precedences of things do take a while to sink in.
11:53:22 <chidy> hi guys
11:53:31 <ypo> kallisti: thanks
11:53:33 <jamiltron> Hi
11:53:34 <ypo> lpsmith: thanks
11:54:03 <chidy> I'm trying to install lamdabot on OS X mountain lion but it's failing with cabal: Error: some packages failed to install:
11:54:04 <chidy> lambdabot-4.2.3.2 depends on readline-1.0.1.0 which failed to install.
11:54:05 <chidy> readline-1.0.1.0 failed during the configure step. The exception was:
11:54:05 <chidy> ExitFailure 1
11:54:14 <chidy> does anyone have any idea why?
11:54:48 <DMcGill> try to install the readline package yourself
11:54:49 <levi> ypo: You should be familiar with $, though, because it's used in other ways besides eliminating parentheses.
11:54:49 <geekosaur> because you need to install readline from somewhere, because apple is STILL shipping a "libreadline" that isn;t
11:55:06 <DMcGill> if need be give cabal the argument -v3 to get more details
11:55:07 <geekosaur> (and has been for years)
11:55:39 <popl> geekosaur: I wasn't aware of that. That's good to know.
11:55:44 <ypo> levi: i'm just here: http://learnyouahaskell.com/syntax-in-functions so maybe some chapters later the author will cover it
11:55:59 <DMcGill> also in the meantime you can /msg lambdabot for a private session
11:56:59 <chidy> will try that. Thanks DMcG and geekosaur
11:57:04 <levi> ypo: Yeah, it will probably be covered soon then.
12:02:42 <hpaste> scooty-puff pasted “Think I finally have it..” at http://hpaste.org/72122
12:03:29 <chidy> geekosaur any idea where I can get deadline from for OS X?
12:04:41 <merijn> chidy: MacPorts and homebrew will probably have it
12:13:21 <merijn> Conduits have no concept of merging?
12:14:09 <merijn> I can imagine splitting, just having a stateful sink which contains multiple sinks and switches to witch its input is written
12:14:39 <merijn> But given the API I can't see a feasible way of merging multiple sources into one source?
12:22:34 <LordBrain> anyone here?
12:23:33 <merijn> LordBrain: No, we're all figments of your imagination :)
12:23:47 <newsham> I get build error with "cabal install reactive"
12:24:01 <LordBrain> anyone use yi?
12:24:15 <newsham> err... i guess hackage says that it has build error on ghc7.0
12:24:18 <LordBrain> I just installed it... i'd like it to default to vim mode
12:27:07 <LordBrain> newsham, do you get that error message about category-extras?
12:29:03 <newsham> similar:  src/FRP/Reactive/PrimReactive.hs:79:8: Could not find module `Control.Comonad' It is a member of the hidden package `comonad-1.1.1.6'.
12:29:25 <Cale> newsham: When was the last time Reactive got updated?
12:29:34 <Cale> preflex: seen conal
12:29:34 <preflex>  conal was last seen on #haskell 1 day, 3 hours, 12 minutes and 31 seconds ago, saying: i often use "^/" and "*^"
12:30:10 <Cale> ^^ conal is who you want to talk to about it. It had some pretty significant bugs last time I ever made it compile too.
12:30:16 <newsham> Wed Jul 28 16:49:12 UTC 2010
12:33:11 <Cale> (I could get very simple things to work, for example, a program which made the arrow keys control the velocity of a ball, but one step up from that to acceleration and performance issues which weren't supposed to be there started hitting pretty hard.)
12:33:45 <Cale> Well, or maybe it was when I started introducing drag, yeah, I think that was it.
12:37:17 <edwardk> newsham: guessing reactive is using an old version of comonad
12:37:28 <edwardk> maybe i'll pull it and submit a patch
12:37:46 <dafksadfheie> Snardbafulator and ##philosophy must be fixed!
12:37:50 <dafksadfheie> Piruw
12:37:50 <dafksadfheie> (Peru-manta pusampusqa)
12:37:50 <dafksadfheie> Kayman riy: wamp'una, maskana
12:37:50 <dafksadfheie> República del Perú
12:37:50 <dafksadfheie> Piruw Republika
12:37:54 --- mode: ChanServ set +o Cale
12:38:04 <edwardk> bah its on code.haskell.org i can't really bring myself to set up darcs
12:38:07 --- mode: Cale set +b *!*@180.96.16.69
12:38:07 --- kick: dafksadfheie was kicked by Cale (dafksadfheie)
12:38:27 <shachaf> Hale Cail!
12:41:14 <fdhdfhdfhgdf> Snardbafulator and ##philosophy must be fixed!
12:41:16 <fdhdfhdfhgdf> Now!
12:41:17 <fdhdfhdfhgdf> Piruw
12:41:17 <fdhdfhdfhgdf> (Peru-manta pusampusqa)
12:41:17 <fdhdfhdfhgdf> Kayman riy: wamp'una, maskana
12:41:17 <fdhdfhdfhgdf> República del Perú
12:41:17 <fdhdfhdfhgdf> Piruw Republika
12:41:43 <MostAwesomeDude> Meth's a hell of a drug. :c
12:41:55 <fdhdfhdfhgdf> Snardbafulator and ##philosophy must be fixed!
12:41:56 <fdhdfhdfhgdf> Piruw
12:41:56 <fdhdfhdfhgdf> (Peru-manta pusampusqa)
12:41:56 <fdhdfhdfhgdf> Kayman riy: wamp'una, maskana
12:41:57 <fdhdfhdfhgdf> República del Perú
12:41:57 <fdhdfhdfhgdf> Piruw Republika
12:42:01 <dgpratt> he's really on about this Snardbafulator isn't he?
12:42:16 <MostAwesomeDude> I dig the part where he gets himself kicked for flooding.
12:42:38 <fdhdfhdfhgdf> Snardbafulator and ##philosophy must be fixed!  Now now now    Fucking fix Snardbafulator and ##philosophy Freenode!
12:42:42 <fdhdfhdfhgdf> Piruw
12:42:42 <fdhdfhdfhgdf> (Peru-manta pusampusqa)
12:42:42 <fdhdfhdfhgdf> Kayman riy: wamp'una, maskana
12:42:42 <fdhdfhdfhgdf> República del Perú
12:42:42 <fdhdfhdfhgdf> Piruw Republika
12:43:15 <Cale> :|
12:43:30 --- mode: Cale set +b *!*@178.32.172.65
12:43:30 --- kick: fdhdfhdfhgdf was kicked by Cale (fdhdfhdfhgdf)
12:44:22 <Cale> China, France
12:44:48 * Clint squints.
12:45:18 <Cale> I wonder if this guy has any more shells to try.
12:47:28 <dgpratt> I picture Cale with his hand suspended above his pistol when he says that
12:47:42 <Taneb> Quick context?
12:49:25 <mcstar> wtf?
12:50:06 <merijn> Some people got their panties in a bunch over some channel management/freenode issue and have been spamming freenode for 2 days or so now
12:50:12 <mcstar> why is that, on other channels, i see has quit(excess flood) messages, without actually seeing any messages from the person?
12:50:36 <geekosaur> because they flooded on a different channel but they're also here
12:50:41 <geekosaur> quit is global
12:50:48 <mcstar> ah
12:51:38 <mcstar> i guess the guy is on a holy crusade
12:51:44 <mcstar> gl
13:00:54 <veldskoen> hi, is there a way to use a guard or an if such that 2 different commands are executed e.g. test x y = if x < 10 then show y AND test (x-1) y else show x ? (Just an example of what I need for a different program...)
13:01:29 <shachaf> veldskoen: I don't understand your examplee.
13:01:30 <mcstar> hm?
13:01:31 <merijn> veldskoen: I assume you intend show to print to stdout or something?
13:01:36 <shachaf> "show" isn't a command.
13:01:49 <veldskoen> yeah show = print
13:01:55 <mcstar> no
13:02:09 <mcstar> :t show
13:02:10 <lambdabot> forall a. (Show a) => a -> String
13:02:12 <mcstar> :t print
13:02:13 <lambdabot> forall a. (Show a) => a -> IO ()
13:02:31 <merijn> veldskoen: If test has type "a -> b -> IO c" for some a, b and c then you can have multiple IO actions per branch, yes
13:03:07 <veldskoen> but can i make it output and then continue with some recursion?
13:03:11 <merijn> veldskoen: Just write "if x < 10 then do <multiple actions just like normal do block> else do <multiple actions like normal do block>
13:03:15 <shachaf> test x y = if x < 10 then do { print y; test (x-1) y } else print x?
13:03:36 <veldskoen> aaahhh cool thanks!
13:03:40 <Taneb> test x y | x < 10 = print y >> test (x - 1) y | otherwise = print x
13:03:43 <merijn> veldskoen: Sure, as long as the rest of your recursion also stays in IO
13:03:46 <mcstar> 'if condition then io1 >> io2 else return ()' is possible for example
13:04:00 <Taneb> test :: Num a => a -> b -> IO ()
13:04:09 <Taneb> * (Num a, Show a, Show b)
13:04:14 <shachaf> veldskoen: I have the feeling that you should read about how IO works in Haskell in general, though.
13:04:22 <shachaf> @google introduction to io in haskell
13:04:24 <lambdabot> http://www.haskell.org/haskellwiki/Introduction_to_IO
13:04:24 <lambdabot> Title: Introduction to IO - HaskellWiki
13:04:31 <merijn> veldskoen: This is an example valid function (modulo typos) "test x = if x < 10 then do print x else do print; test (x-1)"
13:04:50 <merijn> eh, I meant "print x" in the else, but you should get it :p
13:05:13 <veldskoen> yeah busy with learn you a haskell (on page 70 now) but trying to do some euler project questions in haskell as well... not going quickly at the moment
13:05:35 <veldskoen> but thanks for the help all
13:07:25 <mcstar> im dont think you need IO for PE
13:07:28 <mcstar> -m
13:07:40 <mcstar> except from main = print something
13:08:06 <veldskoen> was trying to see where my recursion was going wrong...
13:08:11 <mcstar> (it doesnt you shoudlnt use it..., just my opinion)
13:08:16 <mcstar> thought so
13:08:26 <mcstar> Debug.Trace
13:09:00 <mcstar> *mean*
13:09:06 <DMcGill> yeah, in general it's preferred for most of the functions to be pure and then your main to be something like do{info <- getIOInfo; return (applyPureFunction info)}
13:10:07 <DMcGill> obviously there's plenty of occasions where that's not possible but it should be fine for most ofthe PEuler questions (except if you end up using mutable arrays)
13:10:12 <veldskoen> so in short I should read some more...
13:11:15 <DMcGill> I would definately recommend redoing some of the questions once you've read some more - seeing how much nicer you can make your code can be quite rewarding
13:11:30 <DMcGill> factoring out common sub-patterns, using higher level functions and so on
13:12:13 <mcstar> im not sure how far page 70 is
13:12:33 <mcstar> but if you know functions, and have ghci which has completion, you can go pretty far with that
13:12:42 <veldskoen> just started with higher level functions
13:13:23 <mcstar> just abandon sequencing for nesting, thats it
13:19:40 <trtrtffdfgsdg> Snardbafulator and ##philosophy must be fixed! now now now
13:19:41 <trtrtffdfgsdg> Aymara language
13:19:41 <trtrtffdfgsdg> From Wikipedia, the free encyclopedia
13:19:41 <trtrtffdfgsdg> Jump to: navigation, search
13:19:41 <trtrtffdfgsdg> This article discusses the Aymara language. For the Aymara ethnic group, please see Aymara people.
13:19:41 <trtrtffdfgsdg> Aymara
13:20:07 <trtrtffdfgsdg> Snardbafulator must be eliminated. ##philosophy must be fixed!
13:20:09 <trtrtffdfgsdg> Aymara language
13:20:10 <trtrtffdfgsdg> From Wikipedia, the free encyclopedia
13:20:10 <trtrtffdfgsdg> Jump to: navigation, search
13:20:10 <trtrtffdfgsdg> This article discusses the Aymara language. For the Aymara ethnic group, please see Aymara people.
13:20:10 <trtrtffdfgsdg> Aymara
13:20:34 <trtrtffdfgsdg> ##philosophy must be fixed folks
13:20:35 <trtrtffdfgsdg> now
13:20:38 <trtrtffdfgsdg> or else
13:20:47 <Jeanne-Kamikaze> what's going on
13:20:49 <trtrtffdfgsdg> This can keep going all day
13:20:59 <trtrtffdfgsdg> Snardbafulator and ##philosophy must be fixed
13:21:01 <trtrtffdfgsdg> Aymara language
13:21:01 <trtrtffdfgsdg> From Wikipedia, the free encyclopedia
13:21:01 <trtrtffdfgsdg> Jump to: navigation, search
13:21:01 <trtrtffdfgsdg> This article discusses the Aymara language. For the Aymara ethnic group, please see Aymara people.
13:21:01 <trtrtffdfgsdg> Aymara
13:21:03 <DMcGill> the topic doesn't seem to have a link to the admin irc, it used to
13:21:16 <DMcGill> can somebody that remembers it report him?
13:21:17 <osfameron> !ops
13:21:23 <osfameron> bah
13:21:25 <Qtr> im doing html and it ends up beside each other instead of under. what am i doing wrong?
13:21:27 <trtrtffdfgsdg> oh I would love to suck the shit out of snardbafulator's ass
13:21:29 <trtrtffdfgsdg> oh yeah
13:21:33 <c_wraith> @where ops
13:21:33 <lambdabot> shapr Cale glguy dons sjanssen dcoutts Saizan dibblego conal Philippa bos arjanb xerox Heffalump kosmikus wli Pseudonym Igloo quicksilver monochrom Lemmih jmcarthur copumpkin
13:21:37 <trtrtffdfgsdg> eat that smusy snard turndssss
13:21:38 <trtrtffdfgsdg> Aymara language
13:21:38 <trtrtffdfgsdg> From Wikipedia, the free encyclopedia
13:21:38 <trtrtffdfgsdg> Jump to: navigation, search
13:21:38 <trtrtffdfgsdg> This article discusses the Aymara language. For the Aymara ethnic group, please see Aymara people.
13:21:38 <trtrtffdfgsdg> Aymara
13:22:45 <mcstar> fuck
13:22:58 <mcstar> trtrtffdfgsdg pls stop
13:23:15 <kloeri> he's not actually here right now
13:23:25 <mcstar> i know, thats what makes it funny
13:24:19 <osfameron> I know whenever I get angry about a wikipedia article, I just join any irc channel and start whining about it
13:24:22 <osfameron> don't we all?
13:25:33 <mcstar> i wonder how many IPs left on that network
13:25:52 <kloeri> the internet? rather a lot I'm afraid
13:26:18 <Eduard_Munteanu> Mm, quite a few staffers in here I suppose.
13:26:21 <mcstar> no, the pool that his ISP allocates
13:26:25 <Eduard_Munteanu> I thought it was Freenode-wide spam.
13:26:36 --- mode: ChanServ set +o mauke
13:26:36 --- mode: mauke set +b $r:cagadum
13:26:44 <kloeri> mcstar: nothing to do with his ISP
13:27:01 <mcstar> why not?
13:27:14 <kloeri> because he's using random open proxies
13:27:24 <mcstar> oh
13:27:31 <kloeri> Eduard_Munteanu: it is
13:28:16 <Eduard_Munteanu> Ah. Yeah, it would've been a little odd to k-line for bad behavior in one channel.
13:28:30 <Eduard_Munteanu> At least AFAIU.
13:28:36 --- mode: mauke set -o mauke
13:28:50 <kloeri> yes, we wouldn't normally do that
13:29:08 <kloeri> anyway, ##comment-on-spam is right over there
13:29:13 * kloeri points :)
13:35:57 <hiptobecubic> kloeri, i didn't realize that was a real channel
13:37:01 <kloeri> sure is
13:37:17 <padrian2ss> hello
13:44:01 <Eduard_Munteanu> padrian2ss: hi
14:01:48 <Philippa> what's the latest on ghci on arm?
14:06:51 <luksow> i have question with rather subjective anwser: why many (ie xmonad, snap) prefere comma-first convention in defining list elems, data, imports etc.? do you find it more readable? I like comma-last - I find it clean but maybe I've missed something
14:07:59 <mcstar> they are simply out of their minds
14:08:15 <shachaf> luksow: It's pretty standard Haskell style.
14:08:17 <mcstar> or code when they are drunk, who knows
14:08:49 <shachaf> If you don't like it and you're writing your own code, you don't have to use it. :-)
14:09:06 <shachaf> It lets you shuffle around lines -- except for the first one -- without changing them.
14:09:07 <geekosaur> mostly it plays better with how layout encourages you to do things.  I've also found it somewhat easier to rearrange lists that way, and such have started using the stye in python and perl as well
14:09:39 <luksow> shachaf, I know but maybe I should swithc because there are important reasons which I haven't seen yet ;)
14:09:41 <geekosaur> ^^ more usually I find I don't change the first line as often
14:09:58 <joseph07> also it means that the commas are all in a line, not at variable columns to the right
14:10:01 <shachaf> geekosaur: Yep.
14:10:16 <joseph07> that way you can be sure at a glance that there aren't any other operators
14:10:35 * shachaf likes ,-first style but doesn't think it's worth arguing about in most cases.
14:11:12 * joseph07 doesn't ever lose sleep over coding conventions
14:11:41 <c_wraith> I think it more clearly separates syntax from content - but I don't care much in practice.
14:11:51 <luksow> I'm not trying to argue, just curious :)
14:12:39 <c_wraith> I think that's the only reason for it - it's more visually distinct which parts are pure syntax. They're all in the same column.
14:14:40 <luksow> interesting how my haskell-mode in emacs will cope with ,-first
14:18:21 <joseph07> anyone here use yi?
14:20:42 <Entroacceptor> tried
14:21:31 <bitonic> I've never met anybody who uses Yi regularly on this channel
14:22:13 <joseph07> is it still being actively developed?
14:22:14 <bitonic> the project seems to be active.
14:22:47 <joseph07> I can't seem to find good docs on it
14:23:02 <bitonic> joseph07: yeah, https://github.com/yi-editor/yi
14:23:26 <bitonic> but I don't think it can ever remotely compete with other editors
14:23:32 <LordBrain> best docs are probably the source
14:23:38 <LordBrain> and the git log
14:23:59 <joseph07> how am I supposed to browse the source if I don't know how to use the editor?
14:24:02 <joseph07> ^kidding
14:24:13 <c_wraith> joseph07: there's always a hex editor! :)
14:24:18 <LordBrain> ha
14:24:36 <joseph07> fair enough, just curious about where it stood with folks
14:24:50 <nand`> I recently uninstalled it
14:24:50 <LordBrain> it makes a ~/.yi folder, and reads ~/.yi/Config.hs if you have it.
14:24:56 <c_wraith> I don't think many people use yi
14:25:09 <nand`> because I couldn't be bothered maintaining a package for an editor I don't even use
14:25:16 <byorgey> I've used it on occasion.  It's really fun being able to script your editor in Haskell, with on-the-fly reloading.
14:25:26 <LordBrain> i just re-installed it today after years away from it
14:25:28 <joseph07> see that sounds desirable to me
14:25:38 <LordBrain> i got curious to see how much has changed
14:25:39 <nand`> byorgey: I'd love that too, but it's too dissimilar from vim
14:25:56 <nand`> I can't get into it in the first place
14:26:38 <jfischoff> is it modal?
14:26:41 <LordBrain> yeah i had that problem years ago nand, it was even more dissimilar then
14:26:57 <LordBrain> it can do modal editing in its vim mode yeah
14:26:58 <joseph07> it can be modal
14:27:08 <LordBrain> run it with yi --as=vim
14:27:31 <veldskoen> is leksah any good?
14:27:32 <LordBrain> when i first discovered it, it didnt support visual mode
14:27:33 * jfischoff has never been able to get into modal editing
14:28:01 <joseph07> I think one of the ideas behind yi is that it can be whatever you want it to be
14:28:10 <LordBrain> yeah
14:28:22 <joseph07> it's mostly a library for text editing related tasks
14:28:25 <nand`> joseph07: proportional to the amount of effort I spend trying to recreate vim?
14:28:31 <bitonic> like emacs!
14:29:30 <bitonic> people have been trying to do "emacs done right" for a long long time, but it's really hard
14:30:08 <joseph07> bitonic: but wouldn't it be neat to have "emacs done mostly the same" except have haskell instead of lisp?
14:30:10 <LordBrain> yi has an emacs mode too
14:30:28 <bitonic> joseph07: I don't care that much.  it does not matter.
14:30:33 <mcstar> well, if i use a piece of crap linux, its not a problem to use a piece of crap editor....
14:30:52 <RichyB> LordBrain, meh. Emacs' editing macros are nothing to write home about.
14:31:01 <bitonic> joseph07: I'd like a cleaned up emacs, but I can live with lisp.
14:31:06 <joseph07> bitonic: true. I think that's the problem. It doesn't catch on because it just seems like an exercise
14:32:09 <bitonic> to be honest I even prefer a dynamic language sometimes when I do stuff like hacking up editor commands
14:32:14 <RichyB> IMHO almost all of the actual value in Emacs is due to all the elisp available.
14:32:40 <geekosaur> which is why replacing elisp with something sane never happens
14:32:42 <RichyB> It's a great operating system that lacks only a nice text editor. ;)
14:33:02 <bitonic> RichyB: yeah, and it has all that elisp because it was the first editor of its kind.
14:33:20 <bitonic> now elisp got a lot saner anyway.
14:33:22 <RichyB> geekosaur, right, well, yeah, only that's happening sort of incrementally, what with adding features like nonbroken lexical scopes to elisp.
14:33:47 <bitonic> RichyB: nonbroken?  it's not like there was lexical scoping before.
14:33:51 <geekosaur> yeh, I was thinking specifically of the apparent holy grail of swapping elisp out for guile
14:33:51 <mauke> where can I read more about lexical scoping in elisp?
14:34:08 <mauke> geekosaur: vim can be scripted in scheme :-)
14:34:17 <nand`> those lisp guys always go on about how lisp can become every language via macros; so how come there isn't a set of macros that embeds the entirety of Haskell into lisp?
14:34:17 <bitonic> mauke: elisp manual
14:34:19 <shachaf> Can vim be scripted in elisp?
14:34:25 <mauke> shachaf: no
14:34:36 <RichyB> bitonic, languages with nonbroken lexical scoping include C, Scheme and Haskell. Languages with questionable lexical scoping include Python. Languages with very broken lexical scoping include PHP. :)
14:34:36 <bitonic> nand`: they have embedded types into lisp
14:34:59 <RichyB> I just felt the need to note that they hadn't gone out of their way to get it wrong.
14:35:00 <geekosaur> there probably is such a set of macros.  and nobody can understand them except their author :)
14:35:25 <bitonic> geekosaur: no, I was referring to typed racket
14:35:45 <bitonic> mauke: specifically, http://www.gnu.org/software/emacs/manual/html_node/elisp/Lexical-Binding.html#Lexical-Binding
14:36:06 <LordBrain> i think yi is more pleasant to hack on than vim
14:36:07 <mcstar> you dont need to understand macros
14:36:11 <mcstar> its enough to use them
14:36:17 <mauke> bitonic: thanks
14:36:23 <JoeyA> > x where x = "Is it possible to use where without newlines?"
14:36:24 <lambdabot>   <no location info>: parse error on input `where'
14:36:48 <mcstar> > let x = y where y = x
14:36:49 <lambdabot>   not an expression: `let x = y where y = x'
14:37:07 <mcstar> ah in
14:37:09 <bitonic> JoeyA: that's not valid, but yes, you can
14:37:18 <mcstar> > let x = y where y = 5 in x
14:37:19 <lambdabot>   5
14:37:37 <JoeyA> > let foo = (2+2 where 2+2 = 5) in foo
14:37:38 <lambdabot>   <no location info>: parse error on input `where'
14:37:57 <mcstar> that doesnt make sense
14:37:59 <JoeyA> Oh, because there's no = behind it.
14:38:10 <JoeyA> (= or case ->)
14:38:10 <mcstar> where is not ;let'
14:38:42 <mauke> wow, looks like elisp has finally caught up with perl5
14:38:50 <mauke> welcome to 1994, emacs!
14:39:21 <bitonic> I was actually very surprised that they added that
14:39:36 <shachaf> Wow, looks like Perl5 has finally caught up with the lambda calculus.
14:39:37 <LordBrain> added what?
14:39:41 <shachaf> Welcome to 1940, Perl!
14:40:13 <bitonic> 1940? it was 15 years before that
14:40:36 <bitonic> ah no. more like 10.
14:40:59 <mauke> shachaf: I'll add that perl started out as a mutant clone of sh/awk/sed on steroids and that perl4 only came out in 1991
14:41:23 <mauke> and they still got closures in 1994
14:41:31 <bitonic> if you read the emacs paper Stallman actually argues that dynamic binding is better
14:41:53 <bitonic> but that was 1982 or something, so maybe it's forgivable
14:41:56 <shachaf> Wasn't it for performance?
14:41:59 <mauke> "This variable is typically set for a whole Emacs Lisp file, as a file local variable (see File Local Variables). Note that unlike other such variables, this one must be set in the first line of a file."
14:42:02 <scooty-puff> HEY GUYS JAVA'S GOING TO GET CLOSURE
14:42:03 <mauke> what the FUCK
14:42:29 <mauke> now the physical formatting of my code determines its semantics?
14:42:29 <bitonic> shachaf: well yeah, but he says that it is better for programming
14:42:55 <mauke> shachaf: the current manual says "Lexical binding opens up a lot more opportunities for optimization, so Emacs Lisp code that makes use of lexical binding is likely to run faster in future Emacs versions."
14:43:10 <shachaf> Yes.
14:43:10 <scooty-puff> is there a safe way in haskell, sans overlapping instances, to have an type class instance default?
14:43:24 <scooty-puff> *an -> a
14:43:27 <bitonic> mauke: well, in elisp comments determine what functions get loaded from a file.
14:43:27 <levi> I think his argument was that it was better in the context of programming emacs.
14:43:47 <mauke> bitonic: ... ok, I think I'll stay with Perl
14:43:48 <hpc> scooty-puff: multiparameter type classes, data kinds, and fundeps
14:43:57 <hpc> (or type/data families)
14:44:04 <bitonic> levi: yeah, the idea is that you can modify variables local to a function from outside the function.  what a great thing.
14:44:13 <bitonic> that's the advantages he cites anyway, iirc.
14:44:21 <hpc> convert "class Foo a where ..." to "class Foo 'Bool a where ..."
14:44:29 <scooty-puff> ah
14:44:30 <levi> Well, it makes it easy to share configuration state.
14:44:31 <hpc> with instance Foo True a where ...
14:44:46 <hpc> wait, that doesn't work
14:44:52 <bitonic> levi: how?
14:44:56 <mcstar> when you write a customizable editor dynamic binding makes sense
14:44:57 <hpc> but it's a start
14:44:59 <scooty-puff> i think i saw something like that that i had used before
14:45:04 <mauke> mcstar: how?
14:45:06 <mcstar> other lisps got lexical scopes much earlier...
14:45:09 <bitonic> levi: you can still have good ol' emacs global variables without dyn. scoping
14:45:10 <hpc> yeah, try searching again with that in mind
14:45:14 <mcstar> mauke: you can easily customize things
14:45:15 <scooty-puff> though it was before data kinds i think
14:45:19 <mcstar> change behavior..
14:45:21 <scooty-puff> so did the empty data decl thing
14:45:24 <mauke> mcstar: you can do that without dynamic scoping
14:45:25 <bitonic> levi: which is how customisation is done in emacs
14:46:35 <mcstar> im not a big expert of things, but i dont see you would do that
14:46:35 <bitonic> I mean you can do what CL does, "special" variables
14:46:38 <levi> bitonic: Dynamic scoping also lets you dynamically shadow configuration for a while. It's actually pretty useful sometimes, though I agree it's a stupid default.
14:46:41 <mauke> in fact, you could even get away with providing a quite literally special "emacs" namespace where all variables are dynamic
14:46:51 <mauke> and those would be the customization hooks
14:47:24 <bitonic> levi: which is what I mean before.  it really isn't a nice thing to do - and you can get that by simply setting the global variable and then restoring the original value
14:47:47 <mcstar> if you want to write the ultimate customizable pile of stinking stuff, dynamic binding will make it happen
14:47:48 <bitonic> *I meant
14:47:55 <mauke> bitonic: Perl has a special form for that! it's called "local"
14:47:58 <mcstar> you can change everything..
14:48:15 <bitonic> mcstar: dynamic binding really doesn't help you in writing "customizable" stuff.  maybe the stinking part.
14:48:16 <mauke> { local $GlobalVariable = 42; ... }  # old value of $GlobalVariable restored here
14:48:41 <bitonic> mauke: yeah.  you don't need a keyword to do that in lisp, just a macro (or not even that if you pass the symbol)
14:48:56 <LordBrain> I never got into emacs, I went vim all the way
14:49:01 <mcstar> bitonic: then, tell me what is the reason they didnt add lexical scopes earlier?
14:49:16 <mauke> mcstar: brain damage
14:49:27 <levi> RMS is stubborn?
14:49:48 <bitonic> (defmacro local (var &rest body) `(progn (let ((old-value var)) ,@body (setq ,var old-value)
14:49:55 <bitonic> or something along those lines
14:49:57 <mauke> bitonic: that's broken
14:49:59 <dzhus> is conduit better than enumerators?
14:50:01 <mcstar> anyway, my opinion is: you can change behavior, by chaning variables, and not by writing code
14:50:07 <bitonic> mauke: why?
14:50:12 <mauke> bitonic: consider non-local exits like last, return, or die
14:50:13 <mcstar> (wrt dyn.bindings)
14:50:16 <mauke> bitonic: or even goto
14:50:51 <bitonic> mauke: sure, you can handle that if you're careful enough.  and elisp is very primitive anyway, there aren't too many things to worry about.
14:51:05 <mauke> I don't see how you can handle that
14:51:14 <mauke> you need some unwind-protect primitive
14:51:30 <bitonic> mauke: but you have it
14:51:48 <MostAwesomeDude> dzhus: It's easier to use IMO.
14:52:08 <mauke> bitonic: my attempt, btw: http://codepad.org/5Iwdh9eY
14:52:56 <bitonic> mauke: yeah, something along those lines.  but without the newlines! :)
14:53:24 <bitonic> I'm no lisp expert but I'm pretty sure you can do it in most lisps around, including elisp
14:53:39 <mauke> just use lisp for a week or two. you won't even see the )'s anymore!
14:53:47 <mauke> (and then I got kicked from #lisp)
14:54:01 <bitonic> mauke: no, I mean, without the ) on the newlines
14:54:16 <bitonic> and the spaces in the let bindings! ahhhh!
14:54:26 <mauke> bitonic: yes, that's what I was replying to
14:54:54 <bitonic> well then I didn't get what you're saying
14:55:00 * bitonic goes to eat
14:57:44 <mcstar> mauke: thats...terrible
14:58:14 <mauke> mcstar: http://mauke.hopto.org/stuff/lisp/implinest.lisp
15:03:04 <edwardk> preflex: xseen roconnor_
15:03:04 <preflex>  roconnor_ was last seen on freenode/#haskell 1 day, 2 hours, 21 minutes and 57 seconds ago, saying: bah
15:06:15 <roconnor_> ack
15:06:54 <edwardk> you probably won't be happy with me =P
15:07:10 <edwardk> https://github.com/ekmett/lens
15:07:28 <nart_> hi
15:07:44 <edwardk> i'm adding partial and multilenses to it now
15:09:04 <nart> hi
15:09:38 <roconnor_> edwardk: adding multilenses doesn't sound like something you would do
15:09:39 <nart> do you any good resource about free monad ?
15:09:45 <edwardk> =P
15:09:50 <edwardk> i've come around on them
15:09:58 <edwardk> you can use something like clone to rule them out when you want the laws
15:10:15 <edwardk> nart: the free package. i also talk about them a lot on my blog
15:10:36 <donri> also http://www.haskellforall.com/
15:10:49 <roconnor_> edwardk: this doesn't look Haskell 98
15:10:53 <edwardk> its not
15:10:56 <edwardk> it doesn't HAVE to be =P
15:11:03 <edwardk> because you dont have to use the package to build the lenses
15:11:14 <edwardk> you can build the lenses in your code without using any lens library
15:11:20 <edwardk> so there is no damn reason to make the lens package 98 =P
15:11:22 <nart> edwardk: mm can you link me to your blog please ? =)
15:11:29 <edwardk> nart: comonad.com
15:11:32 <roconnor_> edwardk: why isn't type Lens a b = LensFamily a a b b?
15:11:49 <nart> edwardk: thanks
15:11:50 <edwardk> because i wanted everything to be readable in isolation rather than build on bigger abstractions
15:12:14 <dmwit> Who are you, and what have you done with Edward?
15:12:22 <roconnor_> ok
15:12:28 <roconnor_> dmwit: :D
15:12:30 <edwardk> roconnor_: have you found any partial lens families? or are all partial lens families actually partial lenses?
15:12:50 <edwardk> dmwit: the problem i see right now with lenses is all the libraries are too damn awkward to use
15:13:00 <edwardk> i can't use lens-family ,it requires like 5 imports to do any work =P
15:13:18 <edwardk> so i put together something i wouldn't hate as a user
15:13:42 <edwardk> and notably that a user could read the code to when i got done
15:13:53 * dmwit nods supportively
15:14:11 <roconnor_> edwardk: I don't see why you cannot have polymorphic updates with partial lenses.  It would be easy to construct examples of polymorphic "records" with multiple constructors
15:14:26 <edwardk> roconnor_: can you actually supply me a concrete example?
15:14:33 <edwardk> roconnor_: my first stab failed
15:14:48 <edwardk> i want a strong existential proof of the existence of partial lens families ;)
15:14:51 <roconnor_> data EdwardK a = Ed a | K
15:15:01 <roconnor_> er
15:15:04 <roconnor_> Maybe
15:15:11 <edwardk> ah
15:15:12 <roconnor_> JustLens
15:15:13 <edwardk> er hah
15:15:31 <edwardk> perfect
15:15:31 <edwardk> thanks
15:15:42 * roconnor_ notes to add a module that reexports everything
15:15:58 <roconnor_> edwardk: I guess you are not the type of person to name all their functions that they import
15:16:12 <edwardk> not always
15:16:17 <edwardk> sometimes i do
15:16:39 <edwardk> these kinds of combinators i want close to hand though
15:16:40 <Kaide> Lambdabot had a program for constructing programs from types, didn't it?
15:16:56 <edwardk> @djinn (b -> c) -> (a -> b) -> a -> c
15:16:57 <lambdabot> f a b c = a (b c)
15:17:01 <Kaide> thanks
15:17:11 <nart> mmm, i don't understand why and where free monads are useful
15:17:29 <nart> anyone has a simple explanation ?
15:17:54 <edwardk> the messy part of partial lenses is the pointed dependency ;)
15:17:59 <roconnor_> edwardk: I think <>= and ^<>= might be useful.  I have them slated for data-lens
15:18:07 <edwardk> *nods*
15:18:16 <roconnor_> edwardk: ya, the pointed dependency is kinda sad
15:18:23 <edwardk> i currently don't have a semigroups dependency, though i guess if i add a pointed dep, then i get it transitively
15:18:26 <roconnor_> which is why I am half incline to implement my own pointed
15:18:30 <edwardk> i was liking the fact that they were minimal
15:18:40 <edwardk> no please don't, i don't want to deal with the package explosion on that too
15:18:45 <Kaide> gonna repost this here because it disturbs me a bit
15:18:47 <Kaide> @djinn (s -> a -> (b ,s)) -> ((a -> b) -> c) -> ((s -> a -> (b,s)) -> c)
15:18:47 <lambdabot> -- f cannot be realized.
15:19:00 <JoeyA> nart: I haven't read it, but this looks like a good introduction: http://www.haskellforall.com/2012/06/you-could-have-invented-free-monads.html
15:19:14 <roconnor_> edwardk: the user would hardly notice an internal Pointed class
15:19:14 <edwardk> hrmm i think i may put the partial lenses in another package
15:19:28 <edwardk> yes they would because they have to instantiate it for their types
15:19:31 <nart> JoeyA: i'll give it a look thanks
15:19:47 <edwardk> and the name will pun one used by other packages or it'll be yet another name for the same thing
15:19:54 <JoeyA> If I understand correctly, free monads fill a similar role as the Prompt monad.
15:20:17 <edwardk> maybe i'll put in multilenses into this package and factor the partial lenses into another with the pointed dep
15:20:19 <nart> JoeyA: ahah awesome, i don't even know what that is
15:20:24 <roconnor_> edwardk: I still find the choice for default Integer to be questionable.
15:20:26 <edwardk> f course this starts to be the package hell
15:20:40 <JoeyA> Shameless plug: http://joeysmandatory.blogspot.com/2012/06/explaining-prompt-monad-with-simpler.html
15:21:02 <edwardk> the Default Integer instance matches what pretty much every other language does for them by default ;)
15:21:05 <nart> JoeyA: oh nice ty
15:21:06 <roconnor_> edwardk: I kinda vaguely think that everyone should use multilenses instead of partial lenses
15:21:19 <edwardk> i'm kind of on board with that
15:21:27 <roconnor_> I find the choice for default Integer in every other language to be questionable.
15:21:57 <shachaf> A lot of languages default to Int instead of Integer. :-(
15:22:05 <JoeyA> nart: In a nutshell: you want to keep your business logic purely functional, rather than cluttering it with the complexities of IO.
15:23:15 <JoeyA> One peril of IO is exception safety.
15:23:58 <JoeyA> That is, your code could be interrupted at *any* point.
15:25:35 <edwardk> so when you use the mapML and the value isn't present you can't use the multilens to actually insert it
15:25:54 <edwardk> whereas when you use the mapLens and the value isn't present you can use the lens to do the insertion
15:29:58 <fryguybob> @djinn (s -> a -> (b ,s)) -> ((a -> b) -> c) -> (s -> a -> (b,s) -> c)
15:29:58 <lambdabot> f a b c d _ =
15:29:58 <lambdabot>     case a c d of
15:29:58 <lambdabot>     (e, _) -> b (\ _ -> e)
15:30:47 <JoeyA> @djinn (forall a. a -> a) -> a -> a
15:30:47 <lambdabot> f _ a = a
15:31:14 <JoeyA> @djinn ((forall a. a -> a) -> a) -> a
15:31:14 <lambdabot> -- f cannot be realized.
15:32:26 <JoeyA> It'd be neat if you could tell djinn to not throw away arguments.
15:36:19 <edwardk> roconnor_: also please steal my focus class so you can kill the Lazy and Strict modules in the lens-family package ;)
15:37:04 <donri> roconnor_: if by <>= you mean %= mappend yea that'd be useful
15:40:11 <Peaker> yairchu, hi
15:40:31 <yairchu> Peaker, hey! :) Funkeys is a cool name
15:41:29 <Peaker> yairchu, :-)
15:41:57 <edwardk> oh and as a side note, the nullPL should be (b -> f b) -> a -> f a -- because of the way the indexes interact
15:42:06 <edwardk> the more general signature isn't for something that is an indexed family
15:42:24 <Peaker> yairchu, is "funky" a positive connotation? :)
15:43:15 <ion> yes
15:52:12 <yairchu> Peaker: yeah I think it's ok :)
15:53:49 <hpaste> d-old pasted “What is the syntax error here?” at http://hpaste.org/72126
15:54:25 <d-old> wait, I just found out there's tabs in my document
15:55:07 <d-old> yes that fixed it :S
15:55:07 <yairchu> tabs should be a syntax error..
15:55:24 <d-old> well, at least mixed indentation should
15:56:47 <Peaker> yairchu, religious flame war will ensue :)  instead, better to make it irrelevant with funkeys
15:58:01 <bitrust> Anyone here got ThreadScope working on OS X 10.7?
15:58:35 <donri> roconnor_: actually what i often use corresponds more to "mprepend" than mappend, e.g. history %= (revision:). though that code is fine as is, don't *have* to make an op for everything ;)
16:07:57 <dgpratt> got a strange error trying to 'cabal install scion-browser'
16:08:03 <hpaste> dgpratt pasted “scion build error” at http://hpaste.org/72127
16:08:19 <dgpratt> any ideas as to a cause/resolution?
16:12:56 <hpc> cool
16:13:23 <hpc> my first thought would be, did haskeline build correctly when you installed it?
16:15:14 <dgpratt> hpc: I did a --reinstall of haskeline, which completed without errors; it didn't help :(
16:16:48 <geekosaur> that looks like a bug in haskeline
16:17:07 * geekosaur sees a "Backends.Posix" reference in there, which seems highly inappropriate on Windows
16:17:28 <geekosaur> (demangling the symbol by eye)
16:18:35 <hpc> would it be a bug in scion perhaps?
16:18:46 <hpc> it would be the one asking for a posix symbol
16:18:57 <Saizan> it's a bug in haskeline.cabal
16:19:35 <Saizan> it doesn't list the needed  modules under other-modules
16:21:15 <Saizan> look at the source files for modules not appearing in the .cabal file and add them to other-modules
16:21:48 <Saizan> (if they are not there their object files don't get packaged up in the final installation)
16:26:36 --- mode: ChanServ set +o mauke
16:26:36 --- mode: mauke set -b $r:cagadum
16:28:12 <pqmodn> @pl (\x y -> x ++ show y)
16:28:13 <lambdabot> (. show) . (++)
16:28:36 --- mode: mauke set -o mauke
16:31:51 <pqmodn> @where on
16:31:51 <lambdabot> I know nothing about on.
16:32:18 <pqmodn> @src on
16:32:18 <lambdabot> (*) `on` f = \x y -> f x * f y
16:36:42 * BMeph_ claps on... ;)
16:36:52 <otters> we should teach pl on
16:39:25 <hpc> otters: yeeeeesssss
16:43:42 <dzhus> what is the most effective to write lots of Doubles in a text file?
16:44:25 <dzhus> (ByteString.pack . show) double ?
16:44:47 <hpc> if you want the absolute most efficient way, use Storable
16:45:04 <mauke> if you want the absolute most efficient way, open "/dev/null"
16:45:08 <hpc> heh
16:45:25 <dzhus> hpc: isn't that for writing in binary format?
16:45:32 <KitBuilder> Has anyone every made a proxy server with Haskell?
16:46:16 <MostAwesomeDude> KitBuilder: Sure?
16:46:17 <hpc> oh, missed the "text" bit
16:46:38 <hpc> you don't want ByteString, since it's not the same semantics as textual data
16:46:49 <hpc> @hoogle proxy
16:46:50 <lambdabot> Network.HTTP.Proxy module Network.HTTP.Proxy
16:46:50 <lambdabot> Graphics.Rendering.OpenGL.GL.PixelRectangles.ColorTable Proxy :: Proxy
16:46:50 <lambdabot> Network.HTTP.Proxy Proxy :: String -> (Maybe Authority) -> Proxy
16:46:52 <KitBuilder> I'm wondering how feasible it would be to write a proxy server in Haskell
16:47:21 <hpc> KitBuilder: i would guess that it has been done
16:47:22 <KitBuilder> and how much skill would be required to do it correctly
16:48:24 <KitBuilder> would it be difficult to do? Relative to someone like myself who has just basic knowledge of Haskell
16:49:34 <KitBuilder> I'd like to make a proxy server that is UPnP capable. Something to just execute and be ready for action
16:49:55 <KitBuilder> of course, that requires a considerable amount of network programming
16:50:17 <KitBuilder> but I'm wondering how feasible it would be in Haskell. I'm wondering which language I should write it in
16:50:51 <hpc> KitBuilder: start by searching hackage for an existing proxy server, or for the libraries that you would need in order to make one
16:51:01 <hpc> there's almost certainly a library that does UPnP
16:51:04 <hpc> for instance
16:52:03 <KitBuilder> sounds good
16:59:51 <dzhus> is it possible to do runResourceT in IO monad?
17:00:03 <hpc> dzhus: use the types, luke
17:09:00 <hpaste> dzhus pasted “runResourceT error” at http://hpaste.org/72128
17:11:42 <gert0> WS.sendTextData ("Facebook login" `mappend` url :: Text)
17:12:33 <gert0> src/Server.hs:60:61:
17:12:33 <gert0>     Couldn't match expected type `Text' with actual type `m0 Text'
17:12:34 <gert0>     In the second argument of `mappend', namely `url'
17:12:34 <gert0>     In the first argument of `WS.sendTextData', namely
17:12:36 <gert0>       `("Facebook login" `mappend` url :: Text)'
17:12:38 <gert0>     In a stmt of a 'do' block:
17:12:41 <gert0>       WS.sendTextData ("Facebook login" `mappend` url :: Text)
17:12:53 <geekosaur> gert0, please use hpaste.org or another pastebin in the future
17:15:26 <hpaste> “Gert Cuykens” pasted “error” at http://hpaste.org/72129
17:18:07 <gert0> what does step do in hpaste?
17:45:43 <mmirman> http://hackage.haskell.org/package/rpc-framework feature suggestions?
17:51:35 <notNicolas> ok when would I want to write an application in haskell
17:51:59 <liyang> any time you want to write an application!
17:52:29 <notNicolas> why wouldn't I just use Java
17:52:46 <liyang> because of past experience?
17:52:54 <notNicolas> I don't want to start a language war, but I really just want to know what is the selling point of haskell
17:53:37 <c_wraith> less code, easier to maintain
17:53:40 <shachaf> notNicolas: Unfortunately that's a good way to do it. :-(
17:53:44 <liyang> No one is trying to sell it to you. You learn it because you're curious.
17:54:00 <liyang> Which is why you're here, right?
17:54:03 <shachaf> notNicolas: Did you look at haskell.org? A lot of people have asked this sort of question before.
17:54:18 <notNicolas> shachaf: I have not looked.
17:54:21 <c_wraith> more pleasant abstractions
17:54:46 <notNicolas> Is there a point in game development using haskell?
17:56:51 * liyang wants to start a rant about people who go on and on about wanting to be "games developers". Learn how to be a developer first.
17:56:53 <mmirman> The only languages for which I would not want to attempt to develop a game in are those that are not compiled and can not do opengl.
17:57:17 <notNicolas> liyang: I've already developed 2 commercial games in C++
17:59:29 <copumpkin> notNicolas: why not read a bit? :)
17:59:38 <copumpkin> then ask questions if the reading leads to questions
17:59:47 <copumpkin> we don't exist to sell the language to you
18:00:00 <notNicolas> copumpkin: I've bought the learn you a haskell book, so I'm working on it!
18:00:05 <copumpkin> cool :)
18:00:29 <notNicolas> so far it looks like a novel approach to solve mathematical problems, but I'm not sure about game development yet (which is my main interest)
18:00:38 <liyang> Great! Ask specific questions and we'd be glad to help.
18:01:55 <liyang> notNicolas: there are OpenGL/SDL/&c. bindings. You already know those, so once you learn enough Haskell there's no reason why you couldn't use it for games (or anything else) development.
18:02:13 <liyang> There's nothing special about games development in particular, compared to any other application.
18:02:26 <notNicolas> I'd consider games to be quite state-ful
18:03:07 <liyang> notNicolas: most programmers consider most of their programs to be quite stateful. Give it some time and you might see otherwise.
18:03:28 <shachaf> Also, Haskell can do that.
18:03:38 <beekor> hey, beginner here.  can i do types in ghci ?
18:03:44 <beekor> i should probably read the manual more.
18:04:05 <beekor> not 'do'.  define, i should say.
18:05:36 <beekor> ahh that felt okay.  it was a bit of a practice question.  i'm gonna have ~64,000 more, i think.
18:07:36 <notNicolas> ahh
18:07:49 <notNicolas> I don't like being at university. no classes teach functional programming :(
18:08:10 <hughfdjackson> did you get yourself onto an software engineering course?
18:08:31 <noteventime> beekor: You mean declarate new data types? I don't think so
18:08:33 <hughfdjackson> or a CS one that's actually SE in disguise u.u
18:08:33 <liyang> Wrong university perhaps? Nevermind, I was never taught it either.
18:08:43 <liyang> hughfdjackson: most of them are these days.
18:09:01 <hughfdjackson> liyang: so i'm finding
18:09:01 <noteventime> beekor: You can inspect the inferred type of a term with :t
18:09:05 <beekor> okay, so i'm just able to put them into a file and :l them
18:09:19 <shachaf> notNicolas: It's OK, most people here have learned Haskell without classes. :-)
18:09:33 <shachaf> beekor: You mean define types as in "data Foo = Bar"?
18:09:40 <shachaf> You can do that since in GHC >=7.4
18:10:01 <noteventime> The intro to programming class I had to take with (mostly) functional, in SML
18:10:27 <noteventime> shachaf: I didn't know that, neat
18:10:45 * noteventime tries it out
18:10:53 * shachaf never uses :l in ghci.
18:11:09 <beekor> shachaf: i meant something like: updateCanvas :: G.DrawingArea -> IO Bool
18:11:12 * noteventime mostly uses C-c C-l in emacs...
18:11:24 <beekor> but yeah, i've not been able to get a data type on on multiple lines either.
18:11:40 <shachaf> beekor: Oh.
18:11:55 <shachaf> "let foo :: ...; foo ... = ...; ..."
18:12:11 <beekor> oh no shat?
18:12:51 <noteventime> beekor: You have include type signatures in let:s in code too
18:12:58 <noteventime> You can*
18:13:25 <beekor> hmmm.
18:14:19 <notNicolas> hughfdjackson: yeah I'm in the software engineering program.
18:15:58 <beekor> okay, i got it.  thanks, shachaf !
18:16:06 <hughfdjackson> ^^ it seems there's an unnatural split between CS and SE when it comes to FP and OO respectively
18:16:34 <augur> notNicolas: why are you devving games with haskell?
18:16:38 <augur> i wouldnt do that, personally
18:16:44 <noteventime> Because SE is always a few years lagging behind?
18:16:52 <noteventime> augur: Why not?
18:17:45 <augur> noteventime: i just think itd be a real pain in the ass. i dont think the current state of the art in haskell game frameworks is really up to anything serious
18:18:17 <noteventime> augur: Well, I kinda agree with that. I can't say I've seen any good game framework anywhere else either though
18:18:34 <augur> i think unity is pretty good
18:18:47 <augur> but its a pretty tight system
18:18:56 <augur> its not just something you bolt onto existing code
18:19:26 <noteventime> I won't pretend I've taken any close look at it, but all game development things I've seen are pretty undisciplined and lack any notion of semantics
18:19:48 <augur> oh well yes
18:19:51 <augur> thats true :)
18:20:28 <noteventime> Most of them seem to write the whole thing as an extended graphics/physics engine
18:20:52 <noteventime> I havne't seen almost anyone begin by trying to capture some general notion of game logic/narrative
18:21:19 <notNicolas> augur: novelty
18:21:21 <noteventime> And adjoin graphics/audio e.t.c. onto tht
18:21:22 <augur> noteventime: nows your time to shine!
18:22:16 <noteventime> augur: It's been nagging at me for years :P
18:22:38 <noteventime> I read some paper on using petri nets once, which looked kinda interesting
18:22:54 <augur> i dont really understand petri nets
18:23:01 <augur> nevermind how they can be used for interesting things
18:23:43 <noteventime> Well, the way modern games work, any formalism that's supposed to model distribued/concurrent system should look like a good candidate, no?
18:24:00 <noteventime> At least real time games
18:24:14 <augur> dunno
18:24:20 <augur> not sure why that'd be desirable
18:25:17 <jmcarthur> i like making games in haskell
18:25:58 <noteventime> augur: You have to express the rules of the game for a lot of more or less idependent things happening at once :)
18:26:13 <augur> noteventime: right but that's just modularity, surely
18:26:16 <noteventime> FRP looks kinda promising, but it still feels kinda low level
18:26:48 <noteventime> augur: Dunno, modularity for me has to do with pieces of code, not runtime processes
18:27:01 <noteventime> Might just be a terminology mixup though :)
18:27:14 <augur> what i mean tho is
18:27:20 <augur> when you write some code
18:27:38 <augur> nothing specifies that the game object over there and the game object over here interact in any special way
18:27:43 <augur> other than the built ins of interaction
18:27:49 <augur> like colliders, etc.
18:27:59 <augur> or other interaction mechanisms that you create
18:30:04 <noteventime> augur: I don't mean processes as positions in a 2/3-dimensional euclidean space and some associated logic
18:30:13 <noteventime> That's the idea I'd like to move away from
18:30:25 <augur> noteventime: neither do i
18:30:35 <augur> but maybe im not quite seeing what you mean
18:31:06 <noteventime> Well, however you want to specify your game, assuming people interact with it, and it's a real time game
18:31:17 <noteventime> You will have some notion of input
18:31:20 <noteventime> and some notion of timing
18:31:46 <noteventime> (By realtime here I mean progression is not strictly controlled by user input)
18:31:57 <augur> timing of what tho, right
18:31:59 <augur> that's the issue
18:32:01 <noteventime> So there already you have to things that must be coordinated
18:32:06 <augur> because the world isn't concurrent
18:32:36 <augur> anyway, afk, i have to get dinner
18:32:42 <augur> ill ping you when i return
18:32:45 <noteventime> oko, hope it's something good
18:32:46 <augur> dont speak until im back! >O
18:32:51 <noteventime> It's 3:30 AM here :)
18:32:56 <augur> oh good
18:33:00 <augur> so youll be awake still
18:33:03 <noteventime> So I'll probably be asleep
18:33:06 <augur> :|
18:33:08 <augur> weirdo
18:33:18 <noteventime> I'm trying to get back to a regular schedule >_>
18:33:55 <noteventime> augur: Feel free to ping me any other day though :)
18:44:20 <noteventime> Are Microsoft for real, they're calling their google scholar clone "Microsoft academic"?
18:48:12 <dolio> That's not really any worse than 'iTunes university.'
18:48:36 <franz_> hi
18:50:27 <noteventime> dolio: Att least it's not almost a synonym
18:50:39 <dolio> Yeah.
19:04:10 <edwardk> roconnor_: added the representable code (in a cleaned up form) to lens
19:04:23 <edwardk> no additional dependencies and its really dead sexy with lens deriving
19:04:54 <edwardk> https://github.com/ekmett/lens/blob/master/src/Control/Lens/Rep.hs see the example at the top =)
19:05:17 <copumpkin> edwardk: how about "lenticular"
19:05:20 <copumpkin> to sound all pretentious
19:05:21 <edwardk> copumpkin: hahahaha
19:05:27 <edwardk> i already pushed it to hackage as lens
19:05:29 <edwardk> but damn thats good
19:05:56 <augur> heyo
19:05:56 <copumpkin> apparently lentoid is an archaic form of the same word
19:05:58 <copumpkin> sounds very categorical
19:06:04 <copumpkin> the oidification of lenses
19:06:06 <copumpkin> >_>
19:06:10 <edwardk> a lentoid can be be LensFamily type ;)
19:06:17 <copumpkin> sweet
19:06:23 <edwardk> er the LensFamily type
19:07:05 <edwardk> it seems to have taken on a specific meaning in jewelrycraft though
19:07:40 <edwardk> but thats a pretty awesome name
19:07:49 <edwardk> MultiLentoid
19:08:34 <edwardk> too bad it doesn't deal with with the fact that you have setters and setter families, Setoid kind of already has a meaning =)
19:09:02 <otters> use Monoidoid!
19:09:36 <edwardk> clearly categorification should have been monoidoidification
19:09:37 <mapreduce> Lentoid sounds like something slow given that lento is Spanish for slow.  Or possibly relating to lentals.
19:09:49 <edwardk> mapreduce: =(
19:09:56 * shachaf gave up lentoids for lent.
19:09:58 <mapreduce> lentils, even
19:10:49 <edwardk> i still need to write the lentibus on lenses or however you spelled that ;)
19:11:02 <otters> heh
19:11:06 <otters> lentoid, pintoid
19:13:44 <monochrom> lensad
19:14:36 <dolio> So, I shouldn't name my Spanish travel company "Lentibus"?
19:15:10 <edwardk> =)
19:15:25 <monochrom> unless your company is about slow-cooking
19:15:29 <Veinor> hmm. i have a data structure that contains a bunch of (Coordinate, Coordinate) tuples
19:15:40 <Veinor> where those are the upper-left and lower-right corners of rooms
19:15:43 <mapreduce> Why cooking?
19:16:27 <Veinor> i want to quickly turn those into a set of (Coordinate, Coordinate) tuples where a position is in the set if it's in one of the rooms
19:16:58 <shachaf> Oh, coordinates are integers?
19:17:13 <Veinor> oh, yeah
19:17:18 <Veinor> coordinates are integers
19:17:42 <shachaf> How big is the board?
19:17:49 <edwardk> is Coordinate an instance of Ix?
19:18:22 <Veinor> Coordinate = (Int, Int)
19:18:29 <Veinor> shachaf: 200 x 200 or so?
19:18:38 <edwardk> you should be able to use inRange then
19:18:45 <edwardk> and then its just a bunch of mapping
19:19:02 <ShuttleworthFag> Snardbafulator and ##philosophy need to be fixed!
19:19:10 <ShuttleworthFag> He is going to raped up his pert asshole
19:19:24 <ShuttleworthFag> when he gets back down to his basement after bragging to his granny about how many conservatives he banned
19:19:29 --- mode: ChanServ set +o edwardk
19:19:29 <Veinor> so for each of the 40,000 coordinate pairs, check whether it's in the set?
19:19:30 <ShuttleworthFag> I will be there with chloroform
19:19:33 <ShuttleworthFag> that will be the last thing he remembers
19:19:34 --- mode: edwardk set +b *!~Shuttlewo@115.239.249.12
19:19:34 --- kick: ShuttleworthFag was kicked by edwardk (Your behavior is not conducive to the desired environment.)
19:20:00 <shachaf> Veinor: Is this for your roguelike?
19:20:01 <edwardk> Veinor: not the fastest method but its the first you can try
19:20:06 <Veinor> it is, yeah
19:20:18 <edwardk> if you want to improve it, use a kd-tree or some such
19:20:29 <edwardk> or an r-tree
19:20:32 <shachaf> It might be that worrying about performance at this stage isn't worth it, yes. :-)
19:20:39 <shachaf> Since you can always improve this sort of thing later.
19:20:42 <Veinor> true
19:21:02 <Veinor> i mean this happens once per generated level, so as long as it takes less than, oh, .1s i'm fine
19:21:02 <edwardk> if you are only concerned with point-in-rectangle queries you can come up with a lot of fast structures
19:21:20 <edwardk> an, then you don't really need to care
19:21:22 <edwardk> er ah
19:21:29 <shachaf> Is this a roguelike where the map doesn't change?
19:21:40 <jmcarthur> polymorphic memoization is hard
19:21:40 <Veinor> for now!
19:21:53 <edwardk> jmcarthur: depends. polymorphism can make it quite easy =)
19:21:58 <edwardk> jmcarthur: see sigfpe's posts
19:22:03 <shachaf> Polymorphic recursion is hard. :-(
19:22:22 <edwardk> of course i'm betting that what he's talking about and what you are talking about are different things. ;)
19:22:24 <Veinor> (by 'level' i mean 'floor', so when you go up/down it generates a floor if one doesn't exist, or loads it if it doesn't)
19:22:37 <shachaf> Veinor: Maybe you can do it while you generate the board, for that matter.
19:22:44 <jmcarthur> memoization of functions over typed lambda calculus terms, including contexts (or is the proper word environments?)
19:23:01 <Veinor> possibly! right now i'm generating the room structure using a BSP
19:23:33 <jmcarthur> and i'm wanting to memoize on identity (that is, StableName) rather than on structure
19:23:41 <edwardk> ah, i need to post up the little toy memoized/hashconsed dependently typed example i was working up a few weeks back. it handles that context problem pretty cleanly
19:23:47 <edwardk> (and it only needs one comonad to do it!)
19:23:50 <shachaf> Veinor: You should clone the NetHack algorithm.
19:23:52 <jmcarthur> :o
19:24:07 * shachaf has so many heuristics for NetHack-generated dungeons permanently burned into his brain.
19:24:45 <edwardk> shachaf: sweet. you are now in charge of level generation for the arcade ;)
19:24:50 <Veinor> i have no clue what the nethack algorithm is!
19:24:56 <jmcarthur> i've done ugly unsafeCoerce stuff. i've still not found a less ugly way
19:25:05 <ddarius> edwardk: The Dans got you into Agda finally?
19:25:25 <edwardk> ddarius: this was in haskell
19:25:45 <edwardk> i bounced off agda a long time ago, decided i'd rather waste my life puttering in haskell, than puttering in emacs ;)
19:25:48 <jmcarthur> in what sense is it dependently typed? is it that the language you wrote the interpreter for is dependently typed?
19:26:04 <edwardk> the tiny language its for is dependently typed
19:26:26 <ShuttleworthFag> Snardbafulator and ##philosophy need to be fixed!
19:26:26 <ShuttleworthFag>  Bietan jarrai!  http://i.imgur.com/ZxrbX.jpg
19:26:30 <ShuttleworthFag> Fuck that snardbafulator
19:26:35 <ShuttleworthFag> I am going to put chloroform in his face
19:26:38 * jmcarthur likes puttering in agda-mode
19:26:39 <ShuttleworthFag> and then bend him over
19:26:39 --- mode: edwardk set +b *!~Shuttlewo@177.68.179.50
19:26:39 --- kick: ShuttleworthFag was kicked by edwardk (Your behavior is not conducive to the desired environment.)
19:27:03 <mapreduce> +r
19:27:05 --- mode: ChanServ set +o copumpkin
19:27:08 --- mode: copumpkin set +q $~a
19:27:10 --- mode: copumpkin set -o copumpkin
19:27:14 --- mode: ChanServ set +o copumpkin
19:27:15 --- mode: copumpkin set +z
19:27:33 <jmcarthur> +q $~a? what does that do?
19:27:51 <copumpkin> +r prevents unidentified people from joining, +q $~a quiets them
19:27:59 <copumpkin> +z makes it so that anyone who is quieted can still be seen by ops
19:28:08 <jmcarthur> huh
19:28:16 <copumpkin> oh ddarius isn't identified
19:28:19 --- mode: copumpkin set +v ddarius
19:28:21 <copumpkin> lol
19:28:26 <jmcarthur> ha
19:28:38 <jmcarthur> but how do we know that's the real ddarius?
19:28:46 <copumpkin> it's like slim shady
19:28:48 <copumpkin> he'll stand up
19:28:56 <otters> mode +z? brilliant
19:29:01 <sinelaw> maybe there is no real ddarius
19:29:09 <sinelaw> maybe there is no real real
19:29:25 <ddarius> sinelaw: I always say there is no real me, but no one believes me.
19:29:28 <otters> @hoogle Real
19:29:29 <lambdabot> Prelude class (Num a, Ord a) => Real a
19:29:29 <lambdabot> Prelude class (RealFrac a, Floating a) => RealFloat a
19:29:29 <lambdabot> Prelude class (Real a, Fractional a) => RealFrac a
19:29:34 <otters> no, there's definitely a real Real
19:29:48 <shachaf> Hardly:
19:29:50 <shachaf> @src Real
19:29:50 <lambdabot> class  (Num a, Ord a) => Real a  where
19:29:50 <lambdabot>     toRational      ::  a -> Rational
19:29:51 <copumpkin> except its only interface is to be like the rationals
19:30:01 <otters> @hoogle Imaginary
19:30:01 <lambdabot> No results found
19:30:03 <otters> crap
19:30:14 <jmcarthur> edwardk: would you mind sharing your memoized/hashconsed dependently typed example in the raw? :)
19:30:15 <shachaf> > toRational pi
19:30:16 <lambdabot>   884279719003555 % 281474976710656
19:30:17 <shachaf> !
19:30:30 <shachaf> And they said Haskell wasn't good for mathematics.
19:30:32 <copumpkin> > toRational (pi :: CReal)
19:30:33 <lambdabot>   *Exception: CReal.toRational
19:30:34 <edwardk> no problem as soon as i find where i put it =)
19:30:34 <otters> turns out Pi is a rational?
19:30:37 <otters> neat
19:30:43 <jmcarthur> thanks
19:30:43 <copumpkin> > toRational (pi :: Float)
19:30:44 <lambdabot>   13176795 % 4194304
19:30:48 <otters> > let π = pi in π
19:30:48 <ddarius> otters: All numbers are rational or algebraic.
19:30:49 <lambdabot>   3.141592653589793
19:30:59 <edwardk> basically i was trying to get 'bound' to work with it, but i wound up needing too much weird stuff for the hashconsing
19:31:13 <edwardk> so it kind of imploded by the end
19:31:29 <ddarius> Implosion, the best kind of plosion.
19:31:35 <jmcarthur> bound?
19:31:40 <edwardk> @where bound
19:31:40 <lambdabot> I know nothing about bound.
19:31:42 <copumpkin> everyone else can see what ddarius is saying, right?
19:31:45 <edwardk> @hackage bound
19:31:45 <lambdabot> http://hackage.haskell.org/package/bound
19:31:46 <otters> yes
19:31:49 <jmcarthur> i can
19:31:49 <copumpkin> cool
19:31:55 <edwardk> check the docs for that =)
19:31:55 <copumpkin> just wanted to make sure the +v works
19:32:00 <jmcarthur> thanks
19:32:01 <edwardk> its my sexy way to deal with name binding
19:32:15 <edwardk> there are a bunch of examples with progressively more complicated binders
19:32:16 <mapreduce> Is there one to make me understand what he's saying?
19:32:16 <Veinor> huh
19:32:24 <edwardk> i'm giving a talk tomorrow night on it, so there will soon be slides
19:32:31 <jmcarthur> ah. i am working with adbmal terms at the moment, so no names yet
19:32:37 <ddarius> Oh yeah, tomorrow is Boston Haskell.
19:32:41 <copumpkin> mapreduce: you'll need to set the +expert usermode
19:33:15 <Veinor> shachaf, edwardk: using a silly BSP finding algorithm that doesn't bother recursing into the proper subpartition, filtering a 200x200 space runs in about .2s (haven't run with criterion, just checked in ghci)
19:33:48 <Veinor> actually
19:33:49 <edwardk> keep in mind ghci is interpreted so you're losing a bunch of performance
19:33:51 <Veinor> yeah
19:33:56 <edwardk> when you use -fobject-code what happens?
19:34:15 <Veinor> can you set that within an existing ghci?
19:34:27 <jmcarthur> edwardk: ah i see that bound is based on the "de Bruijn notation as a nested data type" stuff
19:34:31 <edwardk> i think so probably though it may only apply to new stuff
19:34:37 <jmcarthur> very related to adbmal
19:34:37 <ddarius> jmcarthur: oof
19:34:46 <edwardk> jmcarthur: yes, with a cute monad transformer to encapsulate it
19:34:55 <Veinor> with -fobjectcode it runs faster, yeah
19:35:05 <edwardk> jmcarthur: its a bastard child of the de bruijn nested data type and conor mcbride's stuff
19:35:22 <edwardk> mjrosenb: ?
19:35:34 <jmcarthur> i independently invented adbmal only to discover its well-knownness later
19:35:38 <jmcarthur> :(
19:35:57 <edwardk> jmcarthur: basically its bird and patterson with conor's better names, and without all the scary rank-n types you don't actually need
19:36:14 <jmcarthur> ah, i've been curious to play around with conor's name stuff
19:36:23 <shachaf> Is mjrosenb speaking unidentified?
19:36:37 --- mode: edwardk set +v mjrosenb
19:36:47 <edwardk> maybe =)
19:36:57 <edwardk> [22:35] mjrosenb: "Could not find module `System' It is a member of the hidden package haskell98-2.0.0.1'.
19:37:13 <JoeyA> I didn't see that.
19:37:16 <edwardk> mjrosenb: use the broken out versions of its contents in base
19:37:18 <Veinor> actually, i think a faster way to do this would be to just, for each room, generate a list of all the points in it, and then concat those
19:37:44 <edwardk> points are easy to filter
19:38:07 <Veinor> sure, testing whether a point is in a room is O(n) in the depth of the tree and i don't see the tree as being that deep
19:38:30 <edwardk> using a bsp or kd-tree or something for your map?
19:38:38 <Veinor> yeah, bsp
19:39:01 <edwardk> mjrosenb: you can use the haskell98, but its really only intended for toy usecases and classes =(
19:39:23 <edwardk> and if you need something from outside of it, then things start to get hairy
19:39:33 <mjrosenb> edwardk: not too sure what you mean by "broken out versions of its contents in base"
19:39:34 <sinelaw> Veinor, doom 4?
19:39:46 <edwardk> mjrosenb: what do you want out of the old System?
19:40:11 <edwardk> http://hackage.haskell.org/package/base  look under System there
19:40:18 <edwardk> there are a bunch of sub-modules
19:40:22 <mjrosenb> getArgs iirc?
19:40:31 <edwardk> import System.Environment
19:40:32 <shachaf> System.Environment
19:40:33 <jmcarthur> edwardk: don't worry about finding it tonight. i'll be going to bed soon
19:40:41 <edwardk> jmcarthur: kk
19:41:02 <Veinor> yeah, it's fast enough that i can't tell the difference between the two methods
19:41:07 <Veinor> sinelaw: roguelike i'm building
19:42:16 <shachaf> Veinor: That's why you should make a 1000000x1000000 roguelike.
19:42:43 <Veinor> haha
19:42:48 <Veinor> i'm going to test using criterion
19:49:44 <neodypsis> Hi. I am having trouble understanding how to use the data type constructors. Can someone point me out a source for explanation? (I'm reading Learn you a Haskell)
19:51:00 <JoeyA> > Just "apply the data constructor to the value"
19:51:02 <lambdabot>   Just "apply the data constructor to the value"
19:51:28 <JoeyA> > Just 5 :: Maybe Int
19:51:29 <lambdabot>   Just 5
19:51:46 <JoeyA> "Just" is a data constructor, while "Maybe" is a type constructor.
19:52:24 <JoeyA> When you apply a value to a data constructor, you get a value.  When you apply a type to a type constructor, you get a type.
19:52:55 <JoeyA> > case Just 5 of Nothing -> "nope"; Just x -> "yup, it's " ++ show x
19:52:57 <lambdabot>   "yup, it's 5"
19:53:12 <JoeyA> neodypsis: What are you having trouble with?
19:53:38 <newsham> > maybe "nope" (("yup, it's " ++).show) Just 5
19:53:40 <lambdabot>   Couldn't match expected type `Data.Maybe.Maybe a'
19:53:40 <lambdabot>         against inferred ...
19:53:48 <neodypsis> JoeyA: I don´t understand how to define a type using constructors
19:53:54 <newsham> > maybe "nope" (("yup, it's " ++).show) (Just 5)
19:53:56 <lambdabot>   "yup, it's 5"
19:54:03 <JoeyA> neodypsis: data Maybe a = Nothing | Just a
19:54:24 <shachaf> data Hello = Constructor1 Int | Constructor2 Char | Constructor3
19:54:34 <JoeyA> The syntax might be confusing, since it mixes up data and types.
19:54:39 <neodypsis> Ok i see the pattern, thank you
19:54:56 <neodypsis> Bye
19:55:16 <newsham> ?src maybe
19:55:17 <lambdabot> maybe n _ Nothing  = n
19:55:17 <lambdabot> maybe _ f (Just x) = f x
19:55:30 <shachaf> data Just a = Maybe a | Not
19:56:43 <newsham> data Data a = Null | Pointer a
19:56:45 <newsham> :)
19:58:01 <edwardk> shachaf: hah
19:59:31 <newsham> when ((not . isJust) ice) (not . peace)
20:02:52 <Veinor> hate of the day: overly specific cabal dependencies
20:03:08 <Veinor> yes, i'm sure your program that uses Data.Set's insert and elem operations needs 0.3.4.5 exactly
20:04:21 <newsham> :(
20:04:32 <newsham> in theory i love cabal.. in practice i do not :(
20:05:04 <Veinor> yeah
20:05:18 <donri> Veinor: hm i don't think you're even supposed to use such constraints by the pvp
20:05:24 <shachaf> Veinor: It's general Haskell conservative culture.
20:05:34 <shachaf> Usually it doesn't go so far as ==.
20:06:01 <Veinor> that was a hyperbolic example, but i'm trying to install criterion and it's saying i need to install containers-0.5.0.0 which will break template-haskell
20:06:02 <donri> 0.3.4.* are supposed to be api equivalent, right?
20:06:06 <Veinor> yes
20:06:49 <Veinor> oh, somehow i got multiple versions of containers
20:06:59 <donri> that tends to cause issues :)
20:07:06 <donri> criterion doesn't even constrain containers, looks like?
20:07:08 <Veinor> yeah
20:07:41 <donri> someone should gsoc "friendly error reporting in cabal" next year
20:08:37 <newsham> sometimes I wish there were two cabal files.  one that lets you build *exactly* what the author built, and one that would try to build on anything remotely possibly supported
20:09:11 <newsham> (with the ability to use old version base packages with newer version compilers)
20:09:17 <Veinor> i would love an --ignore-version-constraints
20:09:35 <newsham> its defintely worthwhile to have the ability to nail down exact version numbers
20:09:50 <Veinor> ok, i just blew away my cabal-dev sandbox
20:09:52 <newsham> ie. to repro exact builds in production
20:10:59 <Veinor> https://github.com/veinor/sandboxer is really great for managing cabal-dev sandboxes, btw </plug>
20:11:40 <donri> i like to use sandboxer for multi-package builds
20:12:06 <donri> though i haven't gotten runghc to work as advertised with it, IIRC
20:12:57 <Veinor> hmm, yeah ISTR i did run into some weirdness with that
20:13:13 <luite> hm that looks useful
20:13:15 <Veinor> i really want to take like a month off to just improve the haskell toolchain
20:13:22 <sinelaw> it's amazing how microsoft can get away with not having anything like that, and that in the year 2012 building with visual studio means depending on the GAC
20:13:23 <donri> also seems i can't use ghci as if i was just using cabal directly, only cabal-dev ghci works and only if there's a .cabal file
20:14:01 <donri> bash completions for sandboxer would be nice too :)
20:14:03 <luite> Veinor: what would you improve if you had a month?
20:14:28 <Veinor> luite: --ignore-version-numbers to cabal, integrate sandboxer into cabal-dev
20:14:41 <Veinor> (by having cabal-dev read some environment variable)
20:15:57 <luite> Veinor: what should --ignore-version-numbers do?
20:16:02 <donri> i wonder if --constraint allows you to set constraints not allowed in .cabal
20:16:13 <donri> or if it just allows you to be more specific
20:16:14 <Veinor> install it even if the version number doesn't match
20:16:55 <Veinor> also, something for checking old versions of packages to see if one can be installed without conflicts/upgrades
20:18:30 <luite> Veinor: hm, i've been thinking that some sort of per-package-version overrides could be useful, for example someone wanted to install orc, but it has a deepseq < 1.3 constraint, the overrides-file orc-1.2.1.1.override could say library: deepseq < 1.5  etc, then you could set up a git repository of these files and have people pull updates
20:18:41 <luite> rather hacky, but it allows easy sharing of quick fixes :)
20:19:39 <mkramer> So, I've been reading through Real World Haskell, I'm up to chapter twelve. I love the book, I love Haskell, I'm committed to learning to use it well. I wonder if at this point it would make sense to make a detour and try to re-learn the basic from the point of view of category theory?
20:19:40 <donri> so i checked; can't --constraint freely
20:20:02 <mkramer> and if so, where should I start on that?
20:20:06 <luite> Veinor: and it's better than ignoring constraints for everything imho
20:20:21 <Veinor> luite: i mean, if you cabal install --no-constraints foo, it only ignores constraints on foo
20:20:21 <sinelaw> mkramer, how's your math background
20:20:38 <sinelaw> mkramer, it's not neccessary at all for understanding haskell
20:20:50 <Cale> mkramer: Category theory provides a 10-mile-high view of things -- not every aspect of Haskell is going to have a direct categorical description
20:20:54 <mkramer> calc 3, I never had any abstract algebra
20:20:57 <sinelaw> *necessary
20:21:15 <Cale> mkramer: But it can provide some really nice perspectives and ideas on how to structure things
20:21:19 <Veinor> learn it if you want to, but don't stress out about it
20:21:29 <Veinor> i'd prioritize learning more haskell over learning category theory
20:21:36 <sinelaw> agreed
20:21:37 <Cale> I agree
20:22:01 <mkramer> Alright :) I'll keep trucking
20:22:29 <Cale> Now, if you really *are* interested in the mathematics of it, I recommend Awodey's Category Theory as a starting point.
20:22:29 <mkramer> I wish bbedit had better Haskell support
20:23:24 <ddarius> newsham: Is the kid tall enough to reach door knobs yet?
20:24:00 <luite> Veinor: yeah but say you install package x, which depends on y, but y depends on an older version of z, while you want to use the latest. if you first install y with --no-constraints, cabal might not install an y with dependencies compatible with x
20:24:05 <Cale> Awodey's text is pretty light on prerequisites as books on CT go, but it's a subject where you'll get more enjoyment out of it the more mathematics that you know.
20:24:48 <newsham> ddarius: more than that.. he turned 4 today.  we went out surfing, played in the sand, and went to shakeys for pizza.
20:24:57 <newsham> he's playing with a richard scarry airport board game now
20:25:17 <Cale> (Category theory is like a game which can be played with the other branches of mathematics serving as pieces)
20:25:35 <newsham> some people study islands, some people study bridges
20:25:40 <Veinor> luite: ah, true
20:26:13 <luite> Veinor: i prefer permanent solutions (even if they're hacks) to something that would need to be done again for every new sandbox :)
20:26:20 <ddarius> newsham: I was afraid you'd say something like that.
20:26:24 <Cale> Which is why up until recently most treatments of it have been reserved for mathematics graduate students. But it's certainly possible to do pure category theory from an elementary perspective, just that some of the definitions can be a little hard to motivate.
20:26:39 <luite> Veinor: (my current approach is cabal-src, but it's still a bit heavyweight)
20:28:09 <mkramer> Thanks Cale, that helps put it into perspective
20:30:42 <mkramer> so, are most of the guys hanging out in this channel coming to haskell from a mathematical background?
20:32:41 <ddarius> mkramer: No.
20:38:32 <Veinor> donri: i think i fixed the runghc bug
20:41:24 <Veinor> also, concatting the lists of room points together is way faster than filtering: 80 ms vs 376 ms
20:54:37 <Veinor> bos: criterion is great btw
21:00:19 <covi> Hi all. Mind checking why this code fails to import Data.Foldable? http://hpaste.org/72130
21:00:47 <Nereid> an error message would help
21:00:56 <Veinor> yeah, what's the error message you get?
21:01:17 <covi> foldable.hs:12:29: Not in scope: `foldMap'
21:01:17 <covi> foldable.hs:12:65: Not in scope: `foldMap'
21:01:17 <covi> Failed, modules loaded: none.
21:01:25 <Nereid> F.foldMap
21:01:29 <Veinor> you need... yeah
21:01:34 <Nereid> on the right side of =
21:03:02 <covi> Nereid: why's that? Why can't I recursively define my own foldMap?
21:03:15 <Nereid> covi: foldMap is defined in Data.Foldable
21:03:30 <Nereid> so you have to write F.foldMap everywhere
21:03:38 <Nereid> with the exception that you don't do that on the left side of =
21:03:57 <Nereid> in the instance definition
21:04:34 <covi> Nereid: I see. Thanks
21:05:00 <covi> Well, why such mistake generates a modules loaded: none error? That's weird?
21:05:39 <Veinor> modules loaded: none means that ghci didn't load the module you asked it to
21:05:57 <Veinor> (because there was an error)
21:06:02 <Nereid> it's referring to the module that you wrote.
21:06:23 <covi> Oh, I see
21:06:24 <covi> thx
21:07:17 <startling> edwardk: know of anyone who's hooked up quickcheck with trifecta? I want to but I'm not really sure how it would go
21:07:26 <edwardk> nope
21:08:24 <startling> ah well
21:08:43 <donri> Veinor: ah nice
21:09:23 <donri> Veinor: you gonna push? :)
21:10:01 <Veinor> yeah, in a bit, gotta make sure it works
21:10:26 <donri> k
21:12:35 <Veinor> actually, hm
21:12:45 <Veinor> donri: when you activate your sandbox, what's the result of cabal-dev ghc-pkg list | grep "^/" | tail -n 1
21:12:48 <Veinor> ?
21:14:49 <donri> Veinor: /home/dag/.sandboxer/clckwrks/packages-7.4.1.conf:
21:15:09 <Veinor> weird
21:15:26 <Veinor> try using runghc?
21:16:10 <donri> couldn't find module bla bla
21:16:39 <Veinor> what's GHC_PACKAGE_PATH set to?
21:16:51 <donri> /home/dag/.sandboxer/clckwrks/packages-7.4.1.conf:/usr/lib/ghc-7.4.1/package.conf.d
21:17:13 <Veinor> huh, that's really bizarre
21:17:32 <Veinor> does ghc --make foo work?
21:17:40 <donri> maybe i need to pass something to runghc to activate certain packages?
21:17:55 <Veinor> you shouldn't... it works fine for me
21:18:19 <donri> same, couldn't find module
21:19:16 <Veinor> what's ghc-pkg list | grep "^/" look like?
21:19:23 <Veinor> er, cabal-dev ghc-pkg list | grep "^/"
21:20:34 <donri> /usr/lib/ghc-7.4.1/package.conf.d:
21:20:34 <donri> /home/dag/.sandboxer/clckwrks/packages-7.4.1.conf:
21:20:55 <Veinor> ok, that's all looking right
21:22:38 <Veinor> pastebin the output of runghc -v foo?
21:22:47 <donri> you're supposed to use cabal-dev not cabal with sandboxer, right?
21:23:24 <Veinor> right
21:23:28 <kallisti> > even x
21:23:29 <lambdabot>   False
21:23:37 <Veinor> actually, when you do cabal-dev ghc-pkg list, does the package show up?
21:23:39 <Veinor> (just making sure)
21:23:52 <donri> Veinor: https://gist.github.com/a366b581ec94bebfa0f6
21:23:57 <donri> yep
21:24:32 <Veinor> hmm
21:24:36 <Veinor> i have no clue, then :/ sorry
21:25:03 <donri> oh hey looks like i have multiple versions of those packages
21:25:37 <donri> let me try unregistering the old ones
21:25:54 <Veinor> i mean i just made a new package recently for my roguelike and plain (run)?ghc(|i|-pkg) work for me
21:27:51 <Veinor> so... something's weird
21:28:17 <ddarius> Closed surfaces in space-time are awkward.
21:35:07 <pqmodn> @pl \f g x -> (f x) . (g x)
21:35:08 <lambdabot> liftM2 (.)
21:38:29 <startling> clever
21:38:31 <Veinor> if the fixed point of Maybe is Nat, what's the fixed point of List?
21:38:52 <shachaf> Rose tree skeletons.
21:39:02 <shachaf> I.e. data Tree = Tree [Tree]
21:39:23 <Veinor> oh, when you put it that way...
21:39:31 <DrSyzygy> so these are arbitrary-arity trees, right?
21:39:33 <Veinor> it seems obvious
21:39:39 <shachaf> Cofree of [] is actual rose trees.
21:40:03 <DrSyzygy> shachaf: Those are where you can hang values everywhere?
21:40:16 <Veinor> data Rose a = Rose a [Rose a]
21:40:22 <shachaf> Yep.
21:41:52 <Veinor> so then what's the fixed point of rose trees
21:41:57 <Veinor> (yes i'm just being silly)
21:42:43 <shachaf> data FixRose = FixRose (Rose FixRose)
21:42:58 <DrSyzygy> this does not seem to be the important question though
21:43:08 <DrSyzygy> Rather; what is Cofree Rose?
21:43:13 <Veinor> well, right. but is that equivalent to some other interesting structure?
21:46:26 <ddarius> In general, a cofree comonad can be viewed as a process tree where the options for continuing are structured by the functor.
21:47:43 <ddarius> Cofree Rose may be vaguely related by some Petri-net-like systems I've seen recently (inspired by coalgebra)
21:49:22 <shachaf> Process tree?
21:49:46 <ddarius> The unfolding of a transition system essentially.
21:50:41 <ddarius> Another way of saying my first sentence is Cofree f has "f labelled" transitions.
21:55:57 <davesque> i installed MissingH with cabal as a user package.  why can't i load it in ghci with `:m`?
21:56:17 <davesque> load Data.List.Util that is, which is part of missingh
21:58:15 <shachaf> ddarius: Is there a similar analogy for free monads?
21:58:27 <davesque> can someone help me with that question?
21:59:44 <shachaf> davesque: Possibly. It might help them if you gave more information.
21:59:45 <Veinor> davesque: it's Data.List.Utils
22:00:44 <davesque> yes, but it says it can't find the module.  even when i start ghci with `-package MissingH`.
22:01:42 <davesque> oh, i see.  sheesh.  it's been a long day :P.
22:01:48 <shachaf> Does it say "i can't find the module.  "?
22:02:00 <Veinor> for future reference, you can tab-complete in :m
22:02:15 <davesque> no, my spelling was wrong...classic
22:02:21 <davesque> thx
22:03:02 <shachaf> For future reference, if you'd've given the error message, someone here would probably have caught that. :-)
22:03:41 <davesque> yeah.  if i'd been at work, a co-worker would have caught it and then laughed at me.
22:04:03 <shachaf> The point is, "give people exact error messages when you're asking questions".
22:12:57 <ddarius> shachaf: Expression trees.
22:30:03 <edwardk> @tell roconnor if IsoFunctor was a superclass of Functor for things xmap :: (a -> b) -> (b -> a) -> f a -> f b    -- then the vanLaarhoven lenses of IsoFunctor would be the isomorphism lenses and would compose with other lenses directly, but still remain directly reversible
22:30:03 <lambdabot> Consider it noted.
22:30:48 <edwardk> @tell roconnor that would reduce the need for 'iso' to construct an isomorphism lens, while still needing to keep the original isomorphism around
22:30:48 <lambdabot> Consider it noted.
22:31:07 <edwardk> @tell roconnor not that tlat will change in haskell any time soon
22:31:07 <lambdabot> Consider it noted.
22:34:53 <hpaste> sopvop pasted “Is there some typeclass like this?” at http://hpaste.org/72131
22:35:11 <sopvop> maybe in some obscure package by edwardk? :)
22:35:30 <edwardk> sopvop: nope
22:35:53 <edwardk> sopvop: you can probably get there with a partial/multilens soon though ;)
22:36:02 <copumpkin> it's a hemidemisemicomonad
22:36:09 <copumpkin> oid
22:36:22 <edwardk> i have kleisli comonads in a toy package a while ago, but i never shipped it
22:36:31 <sopvop> Which means I'll have to make up a name for it :(
22:37:07 <edwardk> well, all of those cases can be handled with partial lenses
22:37:54 <sopvop> http://hackage.haskell.org/packages/archive/data-lens/2.10.1/doc/html/Data-Lens-Partial-Common.html like these?
22:39:08 <edwardk> or the ones in my toy lens package or the ones roconnor was adding to lens-family
22:39:40 <sopvop> That's from roconnors package
22:39:58 <edwardk> i wrote data-lens, gave it to roconnor, he also started lens-family though, another package
22:40:08 <edwardk> so he has two packages
22:40:14 <edwardk> well, two sets of packages
22:46:11 <startling> edwardk: and then he didn't test it!
22:46:20 <edwardk> who does? =)
22:46:30 <startling> hehe
22:56:09 <sopvop> Sooo, difference between data-lens and lens-family is what the lens-family allows polymorphic update with same lenses?
23:08:44 <startling> what's that thing for generating and running assembly? i can never remember the name of it
23:11:33 <coderarity> assembler?
23:11:34 <startling> ah, "harpy". I always think "valkyrie" for some reason
23:11:42 <startling> coderarity: heh
23:20:16 <mbuf> is there a Haskell client that works with identi.ca? hs-twitter is specific for Twitter
23:21:57 <dfeuer> Any favorite Haskell debuggers out there?
23:22:14 <dfeuer> ghci seems really awkward for that.
23:53:28 <roconnor> @nixon
23:53:29 <lambdabot> Castro couldn't even go to the bathroom unless the Soviet Union put the nickel in the toilet.
23:53:42 <roconnor> @tell edwardk you should make Focusing applicative (and pointed).  Or possibly better, use Compose m ((,) c) instead and get "all the instances for free!"(†) ... (†) some taxes still apply.
23:53:42 <lambdabot> Consider it noted.
23:54:18 <edwardk> i'll probably just make it applicative and pointed =)
23:54:19 <lambdabot> edwardk: You have 1 new message. '/msg lambdabot @messages' to read it.
23:54:31 <edwardk> i've written a ton of multigetter/multilens combinators
23:54:35 <edwardk> i'll push in a sec
23:54:43 <roconnor> omg
23:54:44 <lambdabot> roconnor: You have 3 new messages. '/msg lambdabot @messages' to read them.
23:54:44 <newsham> is there any function to do exponentiation of integers x integers to get rationals?
23:54:45 <edwardk> i'm working out a few kiks
23:54:49 <edwardk> er kinks
23:54:59 <roconnor> @type (^^)
23:55:00 <lambdabot> forall a b. (Fractional a, Integral b) => a -> b -> a
23:55:01 <newsham> (^) doesnt like negatives
23:55:13 <newsham> > 2 ^^ (-3)
23:55:14 <lambdabot>   0.125
23:55:19 <newsham> > 2 ^^ (-3) :: Rational
23:55:21 <lambdabot>   1 % 8
23:55:23 <newsham> ty
23:56:21 <roconnor> edwardk: the mapML is the the composition of mapLens and JustLens
23:56:41 <roconnor> er wait, that is a partial lens
23:57:08 <edwardk> partials are multi, lenses are multi
23:58:10 <edwardk> added Applicative to Focusing
23:58:13 <newsham> ?check \xs -> let f = Product.(2^^).getSum; ss = fmap Sum xs in (f . mconcat) ss == (mconcat . map f) ss
23:58:16 <lambdabot>   "Falsifiable, after 322 tests:\n[31,-72,119,123,121,-77,-123,11,-81,-108,-1...
23:58:24 <edwardk> i actually havent bothered to make pointed lenses yet
23:58:58 <edwardk> as an aside you may want to explore relevant lenses. which would be using Apply f => (c -> f d) -> a -> f b
23:59:13 <edwardk> those are 'non-empty' multilenses
23:59:22 <roconnor> ya
23:59:29 <roconnor> I'm not sure where that would be used though
