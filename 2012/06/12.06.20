00:02:38 <dmwit> > uncurry (++) ("good", "morning") -- depending on what you mean by "apply function to both items"
00:02:39 <lambdabot>   "goodmorning"
00:04:58 <savask> Hello, I have a brief question here: If we'll look at Haskell types from category theory point of view, is Int an object, Maybe a morphism and fmap (+1) a functor?
00:07:33 <shachaf> I think Maybe would be a functor and functions would be morphisms.
00:08:05 <savask> Hmm
00:08:16 <XexonixXexillion> GHCi segfaulted on the following code ((2^(4*2^32)) `mod` 2) is this considered a bug?
00:08:39 <shachaf> GHCi shouldn't segfault on that.
00:09:17 <shachaf> Although you shouldn't expect it to give you an answer either.
00:10:56 <XexonixXexillion> shachaf: Do you think the problem is with GHCi or with GMP (or whatever the Haskell equivalent is, if it doesn't use that)
00:12:06 <shachaf> XexonixXexillion: No idea.
00:14:32 <dmwit> I could imagine a sufficiently swank 64-bit machine giving an answer to that.
00:15:18 <shachaf> > 4*2^32
00:15:20 <lambdabot>   17179869184
00:15:21 <shachaf> Really?
00:15:47 <shachaf> Er.
00:15:48 <dmwit> Yes, 2^32 is all the addressable memory on a 32-bit machine; 4*2^32 however is much smaller than 2^64.
00:15:55 <dmwit> You'd need rather a lot of RAM, though.
00:16:01 <Sgeo> I wonder if a sufficiently clever language could give an answer to it
00:16:14 <shachaf> OK, never mind.
00:16:17 <dmwit> Sgeo: Certainly.
00:16:36 <srhb> My GHCI segfaults on it as well, and it's 64 bit.
00:16:39 <shachaf> Sufficiently clever compiler.
00:16:46 <dmwit> Sgeo: In fact, you can write a quite efficient version of (^)/mod in just about any language that will take a small amount of memory.
00:16:47 <shachaf> Maybe ghci just segfault on ENOMEM or something?
00:17:08 <dmwit> srhb: 64-bit is not enough: you must also have 4*2^32 bits of RAM =)
00:17:29 <srhb> dmwit: So it segfaults on no RAM.. :)
00:17:34 <dmwit> (plus a bit for overhead, call it 5*2^32 to be on the safe side)
00:17:52 <Sgeo> That's way more than "a bit"
00:17:55 <dmwit> srhb: That's my guess.
00:18:07 <dmwit> Sgeo: We're all mathematicians in here, right? ;-)
00:18:57 <savask> Won't that calculate to 0?
00:19:21 <shachaf> Yes.
00:19:23 <Sgeo> savask, that's the value, yes
00:19:47 <savask> What a useless computation :-P
00:23:32 <savask> Btw, it is rather strange that * doesn't check it's arguments to be 0. You can try (2^10000000)*0 and it won't give you 0, as it should.
00:23:47 <mauke> that proves nothing
00:23:50 <shachaf> savask: It will give you 0
00:23:53 <shachaf> It'll just take a while.
00:24:00 <mauke> what if it checks its first argument for 0 first?
00:24:44 <savask> shachaf: Yes, a while. I mean, why doesn't it do like boolean functions?
00:24:52 <dmwit> > let (^) a 0 _ m = a `mod` m; (^) a b _ m | even b = let x = (a ^ (b `div` 2)) mod m in (x * x) `mod` m | otherwise = (a * (a ^ (b-1)) mod m) `mod` m in (2^(4*4096)) mod 2
00:24:53 <lambdabot>   0
00:25:02 <shachaf> I don't know what (*) has to do with boolean functions.
00:25:10 <dmwit> > 2^(4*4096) `mod` 2
00:25:14 <lambdabot>   0
00:25:20 <dmwit> Oh, Integer is just plain fast enough for that anyway.
00:25:29 <shachaf> > let mod _ _=0 in (2^(4*2^32)) `mod` 2
00:25:31 <lambdabot>   0
00:25:38 <dmwit> ?let big = 2^32
00:25:40 <lambdabot>  Defined.
00:25:44 <shachaf> @ty big
00:25:45 <lambdabot> forall t. (Num t) => t
00:25:50 <dmwit> > let (^) a 0 _ m = a `mod` m; (^) a b _ m | even b = let x = (a ^ (b `div` 2)) mod m in (x * x) `mod` m | otherwise = (a * (a ^ (b-1)) mod m) `mod` m in (2^(4*big)) mod 2
00:25:52 <lambdabot>   0
00:25:56 <dmwit> bam
00:26:05 <savask> shachaf: For example && doesn't force evaluation of second argument if it's first argument is False
00:26:23 <mauke> > ((2^10000000) `seq` True) && False
00:26:24 <lambdabot>   False
00:26:43 <shachaf> savask: Your example doesn't actually show that (*) doesn't have the same behavior. :-)
00:26:46 <mauke> > ((2^100000000) `seq` True) && False
00:26:51 <lambdabot>   mueval: ExitFailure 1
00:26:51 <lambdabot>  mueval: Prelude.undefined
00:27:00 <mauke> > False && ((2^100000000) `seq` True)
00:27:01 <lambdabot>   False
00:27:13 <mauke> order matters
00:27:17 <savask> shachaf: Should I use seq as mauke?
00:27:32 <shachaf> No, you should use seq as seq and mauke as mauke.
00:27:38 <shachaf> Everything has its place.
00:27:52 <savask> Sorry, I'm not a native speaker.
00:28:03 <mauke> savask: my code demonstrates why your complaint makes no sense
00:28:16 <savask> mauke: How so?
00:28:17 <shachaf> mauke: savask's complaint *could* make some sense.
00:28:30 <shachaf> You could decree that (*) checks its first argument first and short-circuits if it's 0.
00:28:37 <dmwit> savask: http://hackage.haskell.org/packages/archive/unamb/0.2.5/doc/html/Data-Unamb.html#v:por and later pmult have the behavior you want: 0*anything = anything*0 = 0
00:28:41 <shachaf> It's a valid definition of (*), just not the one Haskell uses.
00:28:43 <mauke> savask: you said "why doesn't it do like boolean functions?"
00:28:53 <mauke> savask: I demonstrated that && has the same behavior
00:29:40 <savask> mauke: You demonstrated that it has the behavior I were talking about.
00:29:52 <dmwit> (actually, 0*bottom is undefined -- may be 0 or bottom -- but 0*reallybignumber is 0, and quickly)
00:30:26 <savask> mauke: ((2^10000000) `seq` True) && False gives you False without calculating the first argument.
00:30:40 <mauke> savask: wrong
00:30:47 <savask> Wut?
00:30:53 <mauke> > ((2^100000000) `seq` True) && False
00:30:53 <Sgeo> >((2^10000000) `seq` True) && False
00:30:58 <lambdabot>   mueval: ExitFailure 1
00:30:59 <lambdabot>  mueval: Prelude.undefined
00:31:09 <Sgeo> ...why different errors?
00:31:17 <mauke> Sgeo: that's only one error
00:31:22 <Sgeo> savask, you could get that behavior with unamb
00:31:23 <mauke> your command did nothing
00:31:27 <Sgeo> But it's now how it's defined
00:32:15 <dmwit> > Data.Unamb.por False False
00:32:16 <savask> mauke: Really, sorry.
00:32:16 <lambdabot>   Not in scope: `Data.Unamb.por'
00:32:19 <dmwit> bummer
00:32:40 <savask> > False && ((2^100000000) `seq` True)
00:32:41 <lambdabot>   False
00:32:55 <dmwit> > (fix id `seq` True) && False
00:32:58 <lambdabot>   mueval-core: Time limit exceeded
00:33:03 <savask> mauke: It's lazy on the second argument.
00:33:29 <dmwit> fix id is the memory-friendly tight loop
00:46:28 <hpaste> coatelroot pasted “FilePath print” at http://hpaste.org/70201
00:46:36 <coatelroot> hi, can someone help me with
00:46:38 <levine> Guys , does anybody know how i can fix lexical character error '\DEL'  ?
00:46:49 <coatelroot> the paste
00:47:36 <srhb> coatelroot: getDirectoryContents does not return [String], does it?
00:47:44 <srhb> :t getDirectoryContents
00:47:45 <lambdabot> Not in scope: `getDirectoryContents'
00:47:48 <coatelroot> no
00:47:58 <srhb> coatelroot: But putStrLn takes type String.
00:48:24 <coatelroot> yes but i think there is FilePath=String
00:48:27 <mauke> > 1 + 2
00:48:28 <lambdabot>   <no location info>: lexical error at character '\DEL'
00:48:52 <mauke> levine: remove the control character from your source
00:49:13 <coatelroot> getDirectoryContents :: FilePath -> IO [FilePath]
00:49:21 <levine> mauke: control character ?
00:49:30 <mauke> levine: yes
00:50:26 <srhb> coatelroot: So you forgot to give it the first argument
00:50:54 <coatelroot> ....indeed.... what the hell... thx
00:51:06 <srhb> coatelroot: :-)
00:53:46 <levine> mauke: thanks , it worked...sometimes i hate Haskell !!!!
00:54:23 <srhb> levine: You should love it instead! :-) These errors usually save you from having introduced an uncaught bug in your progam :-)
00:55:50 <levine> srhb: well for beginners could be sometimes achhhh....you know :D
00:56:26 <srhb> levine: Yes. :-)
00:56:49 <mauke> levine: what does this have to do with Haskell?
00:58:03 <mauke> for comparison, perl says: Unrecognized character \x7F;
00:58:06 <mauke> gcc: error: stray '\177' in program
00:58:08 <levine> mauke: well , I'm trying to compile my functions! what could be ?
00:58:44 <mauke> python: SyntaxError: invalid syntax
00:59:16 <mauke> PHP: Parse error: syntax error, unexpected T_LNUMBER, expecting ',' or ';'
00:59:25 <mauke> wow, and here I thought python was unhelpful :-)
00:59:46 <srhb> PHP has the most awesome error messages.
01:00:39 <mauke> java: illegal character: \127
01:03:19 <srhb> My favourite PHP error is the double colon in a wrong spot.
01:03:39 <srhb> Hebrew error messages are the best.
01:04:43 * hackagebot hspec 1.2.0.1 - Behavior Driven Development for Haskell  http://hackage.haskell.org/package/hspec-1.2.0.1 (SimonHengel)
01:05:22 <tdammers> the fact that it *can* be in the wrong spot in so many ways is hilarious by itself
01:05:32 <srhb> Yeah. *shudder*
01:05:48 <tdammers> $this->staticfield : OK
01:05:55 <tdammers> self::$staticfield : OK
01:06:05 <tdammers> $self::staticfield : Nope
01:06:16 <tdammers> $this::staticfield : Nope
01:06:28 <srhb> You mean unexpected T_PAAMAYIM_NEDUKUDOTAYIM ...
01:06:39 <tdammers> $this->$staticfield : OK, but does something else
01:08:01 * mauke takes himself to #haskell-blah
01:14:43 * hackagebot hspec-discover 0.1.0.1 - Automatically discover and run Hspec tests  http://hackage.haskell.org/package/hspec-discover-0.1.0.1 (SimonHengel)
01:18:26 <savask> Can GHC do such kind of extensive optimizations, like here: http://www.haskell.org/pipermail/haskell-cafe/2009-March/058603.html ?
01:31:34 <dmwit> savask: Was that an optimization?
01:36:40 <mysticc> Does TMR issues 2 not available in pdf ?
01:39:35 <savask> dmwit: Sorry, I had internet problems. I think he simplified that monadic expression, to a simple recursive one.
01:45:32 <ClaudiusMaximus> some output from my recent haskelling: http://img703.imageshack.us/img703/6457/haskellircfractal.png  (based on analysis of #haskell irc logs; video version coming as soon as I've uploaded it...)
01:52:53 <opqdonut> ClaudiusMaximus: nice
01:55:55 <ClaudiusMaximus> opqdonut: :)
01:57:22 <dmwit> I love that shapr is such a prominent word in this chnanel.
01:57:42 <dmwit> Right up there with "does" and "think" and "well"
01:59:03 <ClaudiusMaximus> ranked #120 in my word list
02:14:36 <quicksilver> I like "know well this"
02:14:44 <quicksilver> very shakespearan usage, this channel
02:21:21 <HugoDaniel> hello
02:24:48 * hackagebot yesod-auth-oauth 1.0.0.1 - OAuth Authentication for Yesod.  http://hackage.haskell.org/package/yesod-auth-oauth-1.0.0.1 (HiromiIshii)
02:26:34 <bitonic> dmwit, ClaudiusMaximus, quicksilver: is this list somewhere?
02:26:59 <quicksilver> bitonic: I'm talking about http://img703.imageshack.us/img703/6457/haskellircfractal.png
02:27:08 <quicksilver> I'm not sure if ClaudiusMaximus showed us the underlying list.
02:27:20 <quicksilver> dons used to run stats on the channel but it bitrotted :-(
02:27:33 <bitonic> ah, ok.
02:27:43 <bitonic> I can barely read those words - apart from a few
02:35:17 <ClaudiusMaximus> yeah i can paste the code, word lists, etc
02:35:27 <ClaudiusMaximus> give me a few minutes to clean it up :)
02:43:33 <mocky> Hi guys im trying to sort some sets in the lists...i want also have an alternative  write-type to this function...Can you help me maybe ?
02:43:35 <mocky> http://pastebin.com/PqrwMmiQ
02:43:37 <mauke> The paste PqrwMmiQ has been copied to http://hpaste.org/70202
02:43:41 <hpaste> ClaudiusMaximus pasted “haskell irc fractal” at http://hpaste.org/70203
02:44:41 <hpaste> ClaudiusMaximus annotated “haskell irc fractal” with “haskell irc fractal (word list)” at http://hpaste.org/70203#a70204
02:45:57 <keep_learning> Hello All
02:46:01 <keep_learning> http://hackage.haskell.org/packages/archive/hoopl/3.8.7.4/doc/html/src/Compiler-Hoopl-Graph.html#C
02:46:14 <keep_learning> Is Data C is of phantom type ?
02:46:31 <Peaker> keep_learning, no, it is an "empty data declaration"
02:46:50 <Peaker> keep_learning, a phantom type is when you have a type-parameter that's not actually used, but still part of the type verified by the type-checker
02:46:58 <mauke> C is a type with no values
02:47:35 <mocky> Anybody ??
02:47:38 <Peaker> for example:    newtype FileHandle type = FileHandle Handle            the "type" here is a phantom type param... this is useful because you can say:   FileHandle ReadMode   or    FileHandle WriteMode  and have functions that only work on the correct kind of file handle
02:48:15 <Peaker> mocky, I don't understand your question
02:48:46 <keep_learning> Peaker, mauke Thank you both
02:48:52 <mocky> i want to change this part in the function   deleteT a b = fromList . filter (/=a) $ preorder b
02:48:53 <mauke> mocky: your question isn't actionable
02:49:11 <mauke> Peaker: 'type' is a keyword :-/
02:49:21 <Peaker> mauke, oops :)
02:49:24 <Peaker> mocky, what is the "SetT" type? What does deleteT do?
02:49:37 <mauke> Peaker: "remove the element from the list"
02:49:41 <ClaudiusMaximus> the word chain is here http://claudiusmaximus.goto10.org/t/hs/haskell.chain.gz (probably too big for hpaste)
02:49:42 <mocky> i wrote everythin in pastebin
02:50:08 <Peaker> mauke, I don't know where "preorder" comes from
02:50:21 <mauke> me neither
02:50:30 <mauke> but its type is SetT a -> [a]
02:50:57 <keep_learning> Peaker,    I may sound dumb but why do we need this empty data type
02:51:35 <Peaker> keep_learning, empty data types serve a few purposes... A) Often they can be used as phantom type parameters (type-level "tags")   B) Sometimes you want to say that a value can never be returned, you can say that by returning a type that has no values
02:52:27 <shachaf> Peaker: Or by returning a polymorphic value!
02:52:34 <keep_learning> Peaker, Great , I was thinking for A but could not convince my self . Thanks again !
02:52:40 <shachaf> Though sometimes that's impredicative. :-(
02:53:51 <Peaker> keep_learning, (forall a. a) is a data-type with no values.. just like the empty-data-decl you used above..  that's why shachaf said you can sometimes just return some unconstrained type-variable to indicate the same thing
02:54:17 <Peaker> shachaf, another problem is that GHC will let you try to use that empty value..
02:54:39 <Peaker> in seemingly useful ways
02:55:32 <shachaf> Peaker: Do you think callCC should return Void?
02:55:48 <mauke> newtype Void = V Void  -- H98
02:55:59 <Peaker> shachaf, why not?
02:56:23 <shachaf> Can't even ask people what they think these days. :-(
02:56:32 <Peaker> shachaf, didn't mean that in a mean way...
02:56:46 <Peaker> shachaf, I think it would be nice, but I can imagine I might be missing something
02:57:03 <Peaker> btw, I never understood why "callCC" and not "jmpCC" if it's more a jump than a call..
02:57:27 <shachaf> Huh? It's a call.
02:57:32 <shachaf> call-with-current-continuation
02:57:42 <shachaf> callCC f calls f with the current continuatio.
02:57:50 <Peaker> what's the difference between a call that never returns and a jump?
02:57:51 <mauke> continuations don't return
02:57:56 <mauke> callCC does return
02:58:02 <Peaker> oh, whoops :)
02:58:08 <Peaker> haven't used callCC in a long while :)
02:58:29 <mauke> callCC might return more than once
02:59:54 <Peaker> @type callCC
02:59:56 <lambdabot> forall a (m :: * -> *) b. (MonadCont m) => ((a -> m b) -> m a) -> m a
03:00:14 <Peaker> any downsides to:  (MonadCont m) => ((a -> m Void) -> m a) -> m a  ?
03:15:07 <alang> @pl sum . map (\(x, y) -> x * x * y)
03:15:07 <lambdabot> sum . map (uncurry ((*) . join (*)))
03:16:05 <ion> @pl \(x, y) -> x^2 * y
03:16:06 <lambdabot> uncurry ((*) . (^ 2))
03:16:54 <alang> @src (^)
03:16:55 <lambdabot> x ^ 0            =  1
03:16:55 <lambdabot> x ^ n | n > 0    =  f x (n-1) x
03:16:55 <lambdabot>   where f _ 0 y = y
03:16:55 <lambdabot>         f x n y = g x n
03:16:55 <lambdabot>           where g x n | even n  = g (x*x) (n `quot` 2)
03:16:57 <lambdabot>                       | otherwise = f x (n-1) (x*y)
03:16:59 <lambdabot> _ ^ _            = error "Prelude.^: negative exponent"
03:24:51 * hackagebot graph-rewriting-ww 0.1 - Interactive reduction of lambda-calculus with explicit sharing  http://hackage.haskell.org/package/graph-rewriting-ww-0.1 (JanRochel)
03:42:57 <Axman6> urgh, anyone know who is in charge of the haskell wiki? I can't add links to external pages without filling out a capchar, and it doesn't show up in either browser I've used.
03:48:58 <hpaste> “_Vi” pasted “Records and classes” at http://hpaste.org/70209
03:49:31 <_Vi> How to make a class based on what I can do with record and "tie" a record to it?
03:49:37 <Peaker> _Vi, that class is not very useful
03:50:02 <_Vi> Peaker, It allows extension that thing with more filed by users.
03:50:07 <_Vi> *fields
03:50:08 <Peaker> _Vi, instead of using a PersonLikeThing constraint, just pass a record like UsualPerson
03:50:23 <Peaker> _Vi, records can contain fields that are records :)
03:50:48 <_Vi> But that makes UsualPerson closed, e.g. you can't do UnusualPerson and expect functions that use UsualPerson directly to work.
03:51:35 <Peaker> _Vi, rename the UsualPerson record to Person
03:51:49 <Peaker> then you can make many values of your Person record
03:51:56 <Peaker> usual persons, unusual persons
03:52:31 <Peaker> you can also make:  data Employee = Employee { ... }   with a function:  Employee -> Person
03:52:46 <Peaker> then either Employee contains a Person field, or it can build it from its own data..
03:53:08 <Peaker> _Vi, the class doesn't help here -- passing the record manually is easier
03:54:30 <hpaste> “_Vi” pasted “record forwardCompatibilityByDesign” at http://hpaste.org/70211
03:54:48 <_Vi> Something like this?
03:56:59 <hpaste> ashashwat pasted “>>= operator” at http://hpaste.org/70212
03:57:16 <Peaker> _Vi, no
03:57:39 <Peaker> _Vi, if you need to "Extend" person you can make a new record around it, or just add the fields in the future
03:58:26 <_Vi> Peaker, How to "redirect" some (but not all) functions working with Person to new versions working with Employee?
03:58:51 <Peaker> ashashwat, >>= right arg is a function that generates another action -- not a pure computation
03:59:21 <ashashwat> ashashwat: Is there an example to show it in action ?
03:59:24 <Peaker> ashashwat, if you want to apply a pure computation on a monadic action, use:   liftM (computation) action
03:59:45 <Peaker> _Vi, funcOfPerson . personOfEmployee
04:00:00 <miro`> //
04:00:39 <Peaker> _Vi, that makes it:  funcOfEmployee
04:01:14 <_Vi> Peaker, So for each "inherited" Person's function there should be "proxies" in Employee?
04:01:51 <ashashwat> Peaker: liftM works for this purpose, thanks.  But I was trying to see how >>= works.  Just read this article:  https://github.com/colah/colah-essays/blob/master/monads.md
04:02:36 <Peaker> _Vi, "inheritance" is represented by a simple function (Sub -> Base)
04:03:00 <Peaker> ashashwat, >>=    is liftM followed by join.. if you don't need the join, just use liftM :)
04:03:39 <ashashwat> Peaker: thanks
04:03:56 <Peaker> _Vi, http://lukepalmer.wordpress.com/2010/01/24/haskell-antipattern-existential-typeclass/  <-- related
04:07:50 <adamt> Using stm-chans, is there a way to get the size of a TBMChan?
04:15:03 <Axman6> hmm, that seems like something that should be implemented, since it can actually work for TChans
04:18:40 <adamt> Axman6: How can it work for TChans when they're unbounded? What do you mean?
04:37:07 <bitonic> adamt: well the transaction would never terminate
04:37:18 <bitonic> but you can write something that tries to traverse it
04:40:44 <Axman6> adamt: it could work several different ways: a TChan could have a TVar with an Int recording the length which is modified each time there's a put or a take, or you could just traverse the list of TMVars and count the length
04:40:57 <Axman6> bitonic: if course it would terminate
04:48:27 <bitonic> Axman6: well there is no guarantee of progress, if they keep pushing things to the TChan endlessly it might not terminate
04:50:37 <Axman6> well using the TVar holding the length version you're very unlikely to get that sort of contention
04:51:33 <quicksilver> bitonic: that's generically true of all STM transactions is it not?
04:51:40 <quicksilver> even if chans aren't involved
04:52:04 <quicksilver> if another thread can repeatedly dirty a key variable faster than your thread can commit, there is no guarantee of progress
04:53:18 <bitonic> quicksilver: well but in this specific case, it looks like a dangerous situation
04:53:40 <quicksilver> since counting the Chan is O(n) it sounds like a bad plan
04:53:43 <bitonic> Axman6: I was talking about plain TChans
04:53:52 <quicksilver> however having a TVar with the length sounds fine
04:53:55 <bitonic> quicksilver: yeah.
04:54:01 <quicksilver> in fact it sounds exactly the kind of thing STM is good at
04:54:23 <quicksilver> someone did write a bounded channel, too
04:54:27 * bitonic goes to have lunch
04:54:28 <Axman6> bitonic: it would be trivial to wrap a TChan in a new type with the same API
04:54:29 <quicksilver> well probably several people have
04:54:36 <bitonic> quicksilver: the TBMChan above, for example
04:54:43 <quicksilver> ah right, missed that
04:54:50 <bitonic> Axman6: sure. I was just talking about a plain TChan
04:55:10 <bitonic> and the fact that I wouldn't add such a function to its interface
05:17:41 <hpaste> “_Vi” pasted “Person and Employee with overridable method” at http://hpaste.org/70214
05:18:26 <ClaudiusMaximus> http://archive.org/details/ClaudiusMaximus_-_Haskell_IRC_Fractal ( source code at http://hpaste.org/70203 ; input data at http://claudiusmaximus.goto10.org/t/hs/haskell.chain.gz )
05:18:29 <_Vi> Peaker, Should that Person/Employee example with overridable functions be like that? (this version is based on plain "data" without classes). Looks too hacky.
05:19:14 <hc> any hints where to look for the definition of the IO datatype?
05:20:01 <S11001001> @hoogle IO
05:20:01 <hc> http://www.haskell.org/ghc/docs/latest/html/libraries/base/src/ <-- it doesn't seem to be defined in ghc-io or ghc-iobase ...
05:20:02 <lambdabot> Prelude data IO a :: * -> *
05:20:02 <lambdabot> System.IO data IO a :: * -> *
05:20:02 <lambdabot> Prelude type IOError = IOException
05:20:10 <hc> thanks
05:20:14 <S11001001> hmm.
05:20:34 <S11001001> it is in there...
05:21:04 <hc> ah, system.io.  found it, thanks1
05:21:13 <Peaker> _Vi, personInit is probably bad -- better to take 2 fields than a partially-valid Person with 2/3 fields filled out
05:21:20 <S11001001> well, fwiw ;)
05:21:25 <Peaker> _Vi, or have a data Person and data FormattedPerson
05:21:58 <Peaker> _Vi, also, why do you need to "cache" the String result in there?
05:24:05 <_Vi> Peaker, How not to cache it? I expect it to be calculated only when needed (laziness).
05:24:19 <Peaker> _Vi, you could remove the format/string from the record altogether
05:24:37 <Peaker> _Vi, and just make a (Person -> String) function, or (Employee -> String) function
05:25:45 <_Vi> Peaker, How outputInfoAboutPerson will choose the correct function (including some not-yet-implemented) then?
05:25:47 <saep> or a show instance for them
05:26:14 <Peaker> _Vi, but if you start by changing personInit to: mkPerson :: Name -> Age -> Person   that would be good
05:26:38 <Peaker> _Vi, if you want a different toString for different kinds of Persons, then it's OK to do what you did
05:26:49 <_Vi> With Employee enumerating all fields of Person to initialize it?
05:26:49 <Peaker> _Vi, but the "init" funcs of type (a->a) must go :)
05:27:34 <Peaker> _Vi, you can have the same Person/Employee records that you do
05:28:17 <Peaker> _Vi, initEmployee :: Name -> Age -> Org -> Employee
05:28:48 <Peaker> _Vi, though maybe you could put (Name, Age) in their own record (e.g: PersonData) since they are passed around as their own unit
05:29:00 <Peaker> or just use a tuple
05:29:00 <unnali> wow, reading http://www.haskell.org/ghc/docs/latest/html/libraries/base/src/GHC-IO.html is sure eye-opening
05:29:03 <_Vi> And change initEmployee every time fields in Person changes?
05:29:05 <unnali> wrt. ghc's implementation.
05:29:33 <Peaker> _Vi, If you have a record for PersonData, then you won't need to, unless something initEmployee depends on changes
05:30:56 <_Vi> So in general there should be more data types for this (more that two: Person and Employee). Trying to refactor the example...
05:31:04 <Peaker> _Vi, it depends on what you want to do
05:31:10 <Peaker> _Vi, you can make it flexible in various dimensions
05:31:20 <Peaker> _Vi, but flexibilities are often at one another's expense
05:31:55 <_Vi> "what you want to do" -> In general to "explore how Haskell and OOP can live together happily".
05:32:41 <S11001001> uh oh
05:33:01 <Peaker> _Vi, a "base class" can be modelled by a function that takes the subclass implementations of virtual methods and builds a record of all behaviors of the base class.  A subclass can be modeled by a record that has a "cast-up" function to generate the base class value
05:33:36 <Peaker> _Vi, I can write a couple of examples.. which OOP language are you familiar with?
05:33:51 <LambdaDusk> hi, anyone has a little snippet of isometric tile map with haskell?
05:34:16 <_Vi> Peaker, It is clear. But _good_ implementation for polymorphism... /* Wait, doing the example */
05:36:36 <quicksilver> attempting to make OOP live happily with haskell is like attempting to make the art of fatal poisoning a component of top-class cookery.
05:39:47 <hpaste> scooty-puff pasted “Is this possible?” at http://hpaste.org/70216
05:40:03 <scooty-puff> not sure how to get around the overlapping stuff..
05:40:25 <scooty-puff> well, that and its not correct, but you get the idea (Index k xs + 1)
05:40:26 <tdammers> Haskell has its own mechanisms to achieve polymorphism...
05:40:56 <hpaste> “_Vi” pasted “Person and Employee with overridable method (revised)” at http://hpaste.org/70217
05:41:14 <_Vi> Peaker, Is it better?
05:41:48 <_Vi> (now it more reminds doing OOP in plain C)
05:43:57 <danbst> hello guys. Is there any research on hardware lambda-calculus? Is it ever possible to run STG in bare metal?
05:44:26 <flux> danbst, well, there was the Symbolics..
05:44:58 <LambdaDusk> wasn't there a paper to make functions into chips and then combine them?
05:45:21 <Peaker> _Vi, only top-level stuff usually get type annotations
05:45:45 <Peaker> _Vi, that isn't good again because you build partial values
05:46:06 <Peaker> _Vi, you're using recursive definitions unnecessarily
05:46:32 <_Vi> Peaker, What is partial value?
05:47:08 <Peaker> _Vi, a value that goes boom if you try to force it (_|_)
05:47:18 <Peaker> _Vi, I'm editing your example, sec...
05:50:30 <danbst> flux, in wiki says that "The instruction set was that of a stack machine" for Lisp machine. I understand this like recent GreenArrays Forth-chips, with stack-based instruction.
05:50:57 <danbst> but that was not lambda calculus
05:52:41 <danbst> maybe there is some principle, that lambda calculus is impossible to do on low level, on assembly language...
05:57:15 <hpaste> Peaker pasted “OOP example” at http://hpaste.org/70218
05:57:40 <Peaker> _Vi, look at that ^^
05:58:12 <Peaker> _Vi, I personally use a bit of TH to make this ugliness go away: ePerson = p { pAsString = newString (pAsString p) }
05:58:27 <Peaker> so it usually looks like:  ePerson = atPAsString newString p
05:59:15 <Peaker> _Vi, of course this is just one of many possible encodings and may not fit a particular purpose...
06:00:57 <Peaker> _Vi, are you there?
06:01:07 <_Vi> Peaker, Yes, looking at the code.
06:01:37 <Peaker> printPerson is pretty useless, btw :)
06:01:59 <exlevan> main = let ok = ok in return ok -- why does this code terminate when compiled? Shouldn't it run forever or throw an exception?
06:02:18 <_Vi> If there is some complex things instead of just "print ." it can become useful.
06:02:29 <Peaker> exlevan, nothing is forcing the "ok" value
06:02:34 <_Vi> (due to renamed things it's not immediately clear what was what)
06:02:44 <Peaker> _Vi, usually you'd have the "something complex" be pure, rather than in IO
06:03:06 <exlevan> Peaker, indeed, thx
06:03:15 <_Vi> Peaker, It can be pure too. IO was just for some example.
06:06:32 <_Vi> Peaker, So recursive things like "myPerson = ....... myPerson ..." are meant to be used only when data structure is actually recursive?
06:07:37 <bitonic> _Vi: well, they mean what they mean - myPerson will be bound recursively. sometimes it is useful.
06:07:55 <bitonic> > let foo = 1 : map (+1) foo in foo
06:07:56 <lambdabot>   [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28...
06:08:21 <Peaker> _Vi, yeah, if you have a recursion or cycle in your data, a recursive reference is useful. But if you don't, you're just risking trouble unnecessarily
06:08:54 <bitonic> > let foo = zipWith (+) foo (1 : foo) in foo
06:08:57 <Peaker> even if you do have something that's usefully modelled by recursion, it is usually good to use an existing function to recurse for you
06:08:58 <lambdabot>   mueval-core: Time limit exceeded
06:09:18 <ciaranm> explicit recursion is like goto
06:10:33 <bitonic> > let foo = 1 : zipWith (+) foo (tail foo) in foo
06:10:37 <lambdabot>   mueval-core: Time limit exceeded
06:11:00 <bitonic> > let foo = 0 : 1 : zipWith (+) foo (tail foo) in foo
06:11:01 <lambdabot>   [0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946...
06:12:33 <Peaker> _Vi, OOP-style inheritance is IMO a really bad idea in the general case. In each specific case of inheritance, there's a nicer way to do it. I can give a couple of examples
06:12:58 <Peaker> (Talking about implementation inheritance, though interface inheritance is also too weak IMO)
06:13:29 <_Vi> Peaker, Can good OOP design be ported to good Haskell design in general case?
06:13:38 <bitonic> on the other hand, *multiple* inheritance...
06:14:00 <Peaker> _Vi, IMO, it will generally end up better :)
06:14:08 <Peaker> _Vi, or rather, I am skeptical of "Good OOP design" :)
06:14:46 <Peaker> bitonic, multiple inheritance is an attempt to compose code that was meant to be inherited.. if you allow it, you're in for a world of pain, if you disallow it, ditto.
06:15:26 <Peaker> composability is the basis of code re-use.  OOP emphasized inheritance. Inheritance is uncomposable.  OOP thus does not facilitate re-use.
06:15:27 <_Vi> Peaker, "I can give a couple of examples" -> Examples of drawbacks of OOP way?
06:15:53 <Peaker> _Vi, yeah, examples of inheritance being used in the OOP world -- how it sucks, and how a simpler alternative is better
06:15:55 <_Vi> Peaker, But there are some cases where OOP works well.
06:15:57 <tdammers> OOP did not emphasize composition, but countless books and other teaching material did
06:16:08 <tdammers> s/composition/inheritance/
06:16:53 <Peaker> tdammers, a problem is that the OOP languages typically depend on inheritance because they have difficulties with better alternatives -- the ground was supposed to be covered by inheritance
06:17:40 <Peaker> _Vi, I would venture most of these cases involve little to no inheritance :)
06:17:54 <Peaker> tdammers, People are realizing that inheritance is a bad idea so they say "prefer composition", but they really would benefit if they could shun inheritance altogether. They simply can't..
06:18:20 <tdammers> because it's the only viable way of providing polymorphism in those languages
06:18:43 <tdammers> it's verbose, but I don't see why inheritance is wrong in principle
06:19:03 <tdammers> (or rather, implementing interfaces)
06:19:04 <bitonic> Peaker: I was jokin
06:19:04 <bitonic> g
06:19:18 <quicksilver> _Vi: in fact, there are no cases where OOP works well.
06:19:29 <bitonic> I want to make a tshirt that says "I like multiple inheritance"
06:19:40 <quicksilver> There are some cases where well designed programs have been written despite the drawbacks of OOP, certainly.
06:19:46 <bitonic> quicksilver: companies with 10ks of mediocre programmers?
06:20:15 <quicksilver> I'm exaggerating anyway.
06:20:17 <tdammers> it *is* possible to write code in a functional-like idion on top of OOP... this actually works, but it produces massive truckloads of boilerplate code
06:20:23 <bitonic> quicksilver: you like doing that
06:20:33 <Peaker> tdammers, reasons implementing interfaces is wrong: A) You have to inherit from interfaces ahead-of-the-fact, so you can't say: Window implements Closable after-the-fact
06:20:36 <quicksilver> OOP does seem to be not a bad model for the classic GUI model.
06:20:52 <quicksilver> but then again, most of those classic GUI models were specifically written for OO frameworks
06:21:02 <Peaker> tdammers, B) You can't conditionally inherit from an interface, for example: you can't do this:   instance Show a => Show (Maybe a) where ...
06:21:04 <tdammers> Peaker: ah, but that's a limitation of the way interfaces are implemented in most current OOP languages
06:21:10 <bitonic> quicksilver: it's also not too bad for distributing work among large and changing teams, I think
06:21:14 <Peaker> tdammers, either you implement the interface, or you don't.  Each sucks
06:21:26 <quicksilver> bitonic: I don't personally believe OOP helps that. I'm not saying it harms it.
06:21:41 <quicksilver> bitonic: you can write sensibly modular code in any sensible paradigm.
06:21:53 <Peaker> tdammers, C) The whole notion of interface inheritance is not necessary.. it's just a function from "subclass" to "interface record" -- no need for a new feature for this
06:21:58 <quicksilver> you don't have to call the APIs "classes" (but it doesn't do any harm if you do so)
06:22:16 <tdammers> personally, I am much more annoyed by the fact that in OOP, you have to decide between foot.kick(ball) or ball.kickedBy(foot)
06:22:26 <tdammers> instead of just saying kick(foot, ball)
06:22:46 <tdammers> or, better, kickWith foot ball
06:23:05 <tdammers> (and let kick = kickWith defaultFoot)
06:23:33 <bitonic> quicksilver: with OOP you can enforce modularity more easily, imo
06:23:46 <Peaker> tdammers, in short, interface inheritance in OOP languages is crap :)
06:23:55 <Peaker> and implementation inheritance is just a dumb idea..
06:24:03 <bitonic> well, or a feeling of  modularity.
06:24:18 <quicksilver> bitonic: I think all you need for modularity is, well, modules...
06:24:23 <bitonic> in the end you can write wonderfully coupled code while feeling otherwise
06:24:40 <quicksilver> I'm not saying just having modules is sufficient, that is.
06:24:47 <bitonic> quicksilver: loosely coupled modules
06:24:48 <quicksilver> I just don't really think classes and objects help.
06:24:51 <quicksilver> right.
06:25:06 <quicksilver> I think classes and objects are orthogonal to project design in the large and team work
06:25:31 <quicksilver> but I think anecdotes suffer from selection bias as the enormous majority of large software engineering projects are being done this way
06:25:35 <bitonic> mhm. I don't know. We don't have many examples of big corporate, non-OO code these days.
06:25:38 <bitonic> quicksilver: exactly.
06:59:57 <mm_freak> my interpretation is that category theory is about structure…  is there any way to add semantics into that?
07:02:16 <raichoo> mm_freak: Isn't there a functor from Hask to Dom, or what do you mean?
07:24:05 <HugoDaniel> how can i write this better:
07:24:07 <HugoDaniel> map (\f -> f 1) lst
07:24:13 <ion> map ($1)
07:24:15 <Cale> map ($ 1)
07:24:16 <Cale> yeah
07:24:18 <HugoDaniel> cool
07:24:18 <HugoDaniel> :D
07:24:20 <HugoDaniel> yeah
07:24:26 <HugoDaniel> i was trying <$> man :/
07:24:38 <ion> lst <*> pure 1  :-P
07:24:52 <ion> ($1) <$> lst
07:25:09 <HugoDaniel> $1, so simple
07:25:11 <HugoDaniel> :/
07:25:22 <mauke> flip sequence 1
07:25:30 <Cale> @pl \f -> f 1
07:25:30 <lambdabot> ($ 1)
07:26:10 <mauke> :t flip sequence 1
07:26:11 <lambdabot> forall a a1. (Num a) => [a -> a1] -> [a1]
07:26:19 <nand`> my interpretation is that category theory is about types
07:26:24 <ciaranm> WRONG!
07:27:13 <nand`> ciaranm: me?
07:27:21 <ciaranm> nand`: yes
07:27:22 <scopedTV> why would it be about types?
07:27:35 <nand`> scopedTV: your values now have types that denote what it can and can't be composed with
07:27:39 <ciaranm> category theory is about categories. but mostly it's about functors.
07:27:40 <nand`> instead of being able to compose everything with everything
07:27:53 <scopedTV> a combinatorial species is a functor B -> B, where B is the category of finite sets and bijections between them.
07:28:18 <scopedTV> well, that's saying it's about "objects".
07:28:23 <nand`> I see category theory as essentially an extension to abstract algebra, a category is similar to a monoid (a groupoid is similar to a group and a semicategory to a semigroup)
07:28:47 <ciaranm> eww.
07:28:47 <nand`> the only difference is that your values have types in CT
07:29:33 <scopedTV> "values" ?
07:29:40 <nand`> scopedTV: morphisms
07:29:41 <scopedTV> arrows are not functions, not necessarily at least
07:29:53 <nand`> no no, arrows are the values
07:29:59 <ciaranm> arrows are arrows
07:30:07 <mm_freak> raichoo: well, the objects don't have any "meaning"
07:30:20 <scopedTV> I guess you could think of it like that, but I don't see what it brings you
07:30:23 <mm_freak> for example the Set category doesn't tell me anything about the sets themselves
07:31:16 <ciaranm> actually, if your category is "from some underlying system", you can deduce certain things about the axioms of the underlying system by looking at the category
07:31:41 <sclv> i would say that unlike set theory, category theory does let you talk about types in a sort of naive way.
07:31:59 <sclv> but not like type theory as such.
07:32:05 <nand`> by “values of C” I here mean “elements of Hom(C)”
07:32:06 <sclv> just the sort of notion that you have an object in some category
07:32:15 <sclv> and an object in another category
07:32:39 <sclv> and you can't do anything with both X and Y at once unless you use something else to send them to the same category
07:32:58 <sclv> so that gives you a certain sort of power that you need to build up by hand in set theory.
07:33:00 <nand`> for example, f : A→B would be a value, and if g : B→C is another value; then f∘g is another value. the difference to monoids is that ∘ is not a total function
07:33:11 <nand`> g∘f*
07:33:11 <scopedTV> you mean g.f?
07:33:48 <nand`> that's what I mean by “types”: Each morphism has an associated “type”, consisting of two (irrelevant) objects
07:34:05 <HugoDaniel> hmm
07:34:15 <HugoDaniel> is there something like a map but for tuples ?
07:34:24 <sclv> but A isn't the "type" of an object there, it *is* the object.
07:34:34 <nand`> sclv: that's not what I said
07:34:46 <scopedTV> in Hask it would be a type.
07:34:48 <sclv> thinking of it as a type only makes sense in a category where the values are types,
07:34:50 <sclv> exactly
07:35:07 <scopedTV> in B you could name it a type, but what use would that be?
07:35:58 <scopedTV> I guess it's not a terrible analogy.
07:36:09 <nand`> huh?
07:36:20 <HugoDaniel> isn't there like some arrow magic
07:36:32 <scopedTV> B = the category of finite sets and their bijections.
07:36:32 <HugoDaniel> that allows me to apply a function to a n-tuple
07:36:34 <HugoDaniel> ?
07:36:49 <scopedTV> :t join (***)
07:36:50 <lambdabot> forall (a :: * -> * -> *) b c. (Arrow a) => a b c -> a (b, b) (c, c)
07:36:51 <ciaranm> HugoDaniel: apply to what in the tuple?
07:37:09 <nand`> scopedTV: I'm not sure how that is relevant here
07:37:14 <nand`> I'm talking about categories in general
07:37:24 <nand`> maybe we're using crassly different definitions of “type”
07:37:24 <scopedTV> nand`: right, so you would name {1,2,3} a "type".
07:37:25 <HugoDaniel> ah yess
07:37:37 <HugoDaniel> join (***) great
07:37:52 <nand`> scopedTV: no, I would name A → B a “type”
07:37:56 <nand`> for any objects A, B
07:38:04 <nand`> A itself is not a type. A → B is
07:38:12 <scopedTV> Ah.
07:38:19 <nand`> isn't that what the entire notation “f : A → B” tells us?
07:38:38 <raichoo> mm_freak: Ok, now I see what you mean.
07:41:48 <scopedTV> nand`: fine if you want to call it that, really, it's not standard nomenclature, and it clashes with "type" as objects in Hask.
07:41:55 <scopedTV> certainly not terrible
07:43:23 <nand`> scopedTV: do you have a better word for it?
07:43:47 <nand`> I mean, all category theory is is giving its values “coordinates” so to say
07:43:58 <scopedTV> nand`: "f is an arrow A to B"
07:44:08 <scopedTV> "the source object of f is A"
07:45:39 <nand`> I guess I should stray from using the term “value” in CT to prevent misunderstandings
07:45:51 <nand`> imo it should refer fairly unambiguously to arrows
07:49:28 <parcs`> what library should one use to encode a data structure into an ascii bytestring?
07:49:43 <parcs`> does blaze-builder do that?
07:49:49 <bitonic> parcs`: Data.ByteString.Char8?
07:50:56 <bitonic> also, what do you mean to ASCII? how do you "resolve" unicode chars?
07:50:59 <parcs`> i guess i can do it directly
07:51:13 <bitonic> e.g. in constructor names or whatever. unless you do it manually, ofc.
07:51:18 <bitonic> but I would not do that
07:51:52 <bitonic> if you simply want to serialize to plain text, there's always read/show.
07:52:07 <parcs`> i want to serialize into a custom format
07:52:31 <bitonic> parcs`: so what kind of library are you looking for, exactly?
07:58:28 <parcs`> never mind -- i'm prematurely optimizing. i'll just use Data.ByteString.Char8
07:59:37 <tdammers> json-encoding maybe? it's reasonably compact, and you can avoid non-ascii issues altogether
07:59:48 <tdammers> depends on your data though
08:00:37 <parcs`> actually i can largely reuse cereal's serialization for this
08:01:34 <applicative> parcs` why aren't you just using  cereal or whatever the other one is called?  Just wondering
08:02:02 <bitonic> applicative: because he wants plain text - I think
08:02:03 <applicative> you want to  read it from another language?
08:11:53 <joeyh> I need to read n bytes of binary data from a Handle, to s String.. any suggestions?
08:12:16 <scopedTV> String is not what you want, I think.
08:12:26 <joeyh> well, that's a good point, except it is :)
08:12:29 <ion> String doesn’t represent binary data/bytes.
08:12:41 <bitonic> joeyh: you want a ByteString
08:12:48 <scopedTV> binary data is best represented by a ByteString
08:12:50 <bitonic> it has an Handle interface
08:12:58 <nand`> joeyh: do you want UTF-8 decoding?
08:13:01 <ion> It would be more plausible to want to read n bytes of binary data from a Handle, then do some kind of conversion to that which results in a String.
08:13:04 <joeyh> no, I want FileSystemEncoding
08:13:12 <bitonic> nand`: well, if he wants "n bytes", no :)
08:13:12 <scopedTV> yes, hGet
08:13:30 <joeyh> ie, no encoding. it's a filename, that happens to be coming in on a Handle
08:13:32 <nand`> bitonic: it could be a UTF-8 sequence of a pre-known length
08:13:42 <bitonic> ion: really? I'd say it'd make sense to rean n UTF8 chars to a String
08:13:47 <nand`> (but an actual String length that is ≤n)
08:13:58 <ion> bitonic: He didn’t say n UTF-8 chars, he said n bytes.
08:14:12 <bitonic> ion: yeah, which is why I doubt he wants a String
08:14:18 <joeyh> I suppose I can try System.IO.Binary in missingh.. it has a hGetBufStr
08:14:32 <scopedTV> yes, if ze wants to read binary data, ByteString is the best solution.
08:14:57 <scopedTV> Data.ByteString.hGet handle n
08:15:10 <joeyh> no, I'm dealing with unix filenames. they do not have an encoding
08:15:36 <nand`> “they do not have an encoding” I doubt that
08:15:37 <ion> Then you certainly don’t want a String.
08:16:07 <ion> nand: They *are* just arbitrary bytes in fact. Just like IRC.
08:16:20 <joeyh> nand`: sorry, it's true.. ask the darcs developers, they've struggled with this same problem recently, since ghc 7.2 defaults to using utf8 for filenames, which breaks lots of legacy filenames
08:16:36 <scopedTV> I'm not familiar with file system encoding.
08:17:37 <ion> You generally interpret and encode filenames according to the LC_CTYPE locale. But on disk they’re just bytestrings with no information about the encoding.
08:18:17 <joeyh> yep.. and sometimes in other places than disk too
08:18:21 <scopedTV> so if you change LC_CTYPE, it's possible that you can no longer read your files?
08:18:28 <nand`> I see, so there's no known / standardized encoding
08:18:32 <joeyh> it depends on the program
08:19:09 <scopedTV> using anything else than UTF-8 is probably a criminal offense ? :)
08:19:23 <ion> nand: UTF-8 is the de facto standard in unixish filesystems and IRC, but of course, there are people who use some legacy charsets despite that.
08:19:27 <ion> in both cases
08:19:33 <joeyh> do you really want your tar to refuse to untar files from before there was utf8?
08:19:33 <mux> file content != filenames; there are no existing standard for UNIX filenames but utf-8 is a widely used convention. on windows they are utf-16 IIRC...
08:20:51 <Refried__> if cabal configure lists some dependencies that are missing, is there a way to just have it get them for me?
08:21:04 <Refried__> (first time using cabal)
08:21:12 <ion> cabal install
08:21:37 <Refried__> genius, thanks ion
08:22:13 <Refried__> (i was just trying to build & not necessarily install; don't actually know what each means here)
08:22:43 <applicative> Refried__: cabal configure / cabal build /
08:23:04 <applicative> is it an executable or a library?
08:23:19 <Refried__> applicative: *nod* but configure complained about missing dependencies
08:23:26 <Refried__> i'm not sure, it's a set of haskell exercises
08:23:33 <bitonic> Refried__: that will actually install the package globally. you can pass the flag --only-dependencies to install deps only
08:23:34 <applicative> yes, it can't build it without the libraries...
08:23:59 <applicative> globally?
08:24:08 <Refried__> bitonic: ah yeah that's what I was afraid of, and does seemt to have happened.   do you mean  cabal install --only-dependencies
08:24:15 <applicative> sudo cabal install foo --global
08:24:22 <bitonic> Refried__: iirc, yes.
08:24:28 <Refried__> *nod* thanks
08:24:32 <bitonic> but I might be wrong on the flag name
08:24:37 <Refried__> no problem
08:25:07 <Refried__> is there opposite of install?  i can't seem to find out
08:25:09 <Refried__> *one
08:25:25 <Refried__> e.g. I tried uninstall, and then looked at the list of commands and nothing stands out
08:25:32 <Refried__> or do i just go into ~/.cabal and delete?
08:25:32 <tgeeky_> Refried__: ghc-pkg unregister <packagname>
08:25:34 <applicative> ah yes     --only-dependencies             Install only the dependencies necessary to                                     build the given packages
08:25:47 <Refried__> ah thanks  tgeeky_
08:25:55 <tgeeky_> Refried__: it doesn't remove any files
08:25:56 <Botje> you don't uninstall cabal packages, you obsolete them when you upgrade GHC :)
08:26:08 <tgeeky_> Botje: hehe yeah. They just magically disappear
08:26:16 <Refried__> Botje:  :-)
08:26:19 <applicative> no you have to unregister as tgeeky_ is saying; note, this leaves the compiled libraries in place, but unusable, they will be overwritten if you reinstall
08:26:22 <bitonic> Refried__: ther is no uninstall
08:26:32 <Refried__> bitonic: hm *nod*
08:26:35 <quicksilver> Botje: I buy a new computer every 18 months so that I can upgrade GHC and the haskell platform.
08:26:42 <Refried__> lol
08:26:58 <Botje> quicksilver: I upgrade GHC every winter to keep warm.
08:27:14 <scopedTV> I knew that haskell was resource-intensive, but this is a bit extreme =)
08:27:14 <applicative> you can write a script to actually get rid of them, but as Botje says, one replaces GHC often enough it  doesnt much matter
08:27:18 <quicksilver> that's an interesting idea.
08:27:31 <quicksilver> I could install GHC from source on all the old computers
08:27:33 <quicksilver> in the winter
08:27:37 <FUZxxl> Hello!
08:27:42 <scopedTV> hi FUZxxl.
08:27:50 <ion> I create a new universe every 18 months so that i can have matter an forces so that i can have a computer so that i can upgrade GHC.
08:27:50 <FUZxxl> I want to compile ghc from source again,
08:28:17 <tgeeky_> quicksilver: there was an article on /. about IBM using hot water cooling in CPUs to do central heating
08:28:18 <FUZxxl> Is it possible to compile w/o downloading the whole 200 MiB ghc-tarballs repo?
08:28:25 <FUZxxl> I mean, I don't use Windows anyway.
08:28:31 <applicative> I reinstall all the junk I locally installed with plain 'cabal install --user' whenever I run into trouble. this isn't too hard
08:28:47 <quicksilver> tgeeky_: yes, I saw it :)
08:29:56 <tgeeky_> quicksilver: I think it's one of those things where it's obvious that you could do it, but it's not obvious how you'd actually implement it
08:30:02 <tgeeky_> quicksilver: I did a triple take when I read the story
08:30:16 <applicative> FUZxxl: how can you compile from source without the source?
08:30:36 <tac-tics> applicative: fix compile
08:30:40 <tac-tics> It's _|_-valued
08:30:54 <tac-tics> And from _|_, we can coerce the source TO the executable.
08:31:01 <FUZxxl> applicative: I mean, I compile from git
08:31:04 <quicksilver> tgeeky_: waste heat reuse is not new; car heating systems reuse the waste heat from the engine, etc.
08:31:07 <applicative> FUZxxl: there is the git repo
08:31:11 <hiptobecubic> The HPC center here also uses the cpu cooling system to heat the building, in winter anyway
08:31:22 <FUZxxl> applicative: Yeah, I know
08:31:48 <applicative> FUZxxl: I see, I'm not seeing the difficulty.
08:31:54 <FUZxxl> To compile, I first have to run sync-all get, but that downloads this huge ghc-tarballs repo
08:32:00 <FUZxxl> Is it really needed?
08:32:07 <bitonic> FUZxxl: yes.
08:32:08 <nand`> sometimes I feel like I'm using my CPU's cooling system for room heat too :)
08:32:14 <FUZxxl> It seems that it mostly consists of a mingw tarballs
08:33:54 <quicksilver> nand`: if you have a thermostat, you are :)
08:34:13 <bitonic> FUZxxl: there are good reasons for those binaries, like "We don't know where it originally came from." - https://github.com/ghc/ghc-tarballs/tree/master/perl
08:34:18 <joeyh> hmm, System.IO.Binary seems to truncate binary data when reading to a String :(
08:34:33 <FUZxxl> k
08:34:44 <nand`> quicksilver: I have my room heater disabled :)
08:34:48 <FUZxxl> Looks lke a code smell to me.
08:35:18 <applicative> ./sync-all pull is a bit much
08:35:52 <FUZxxl> BTW, any reason the command to clone the repos is named get and not clone?
08:36:14 <FUZxxl> And, for what reason do we need a Perl tarball inside ghc???
08:36:20 <applicative> maybe history?
08:36:32 <FUZxxl> And right now?
08:36:38 <applicative> FUZxxl: is there still the evil mangler?
08:36:53 <FUZxxl> applicative: I thought it was killed in 7.0 or so
08:36:57 <Botje> maybe for -fvia-c ?
08:37:01 <quicksilver> the evil mangler is not in default use but there is a little other perl hangin around I think.
08:37:09 <bitonic> like the boot scripts
08:37:13 <quicksilver> (the evil mangler is still present for optional use, yes)
08:37:16 <tgeeky_> quicksilver: yes, that was the point I was trying to make. It's an obvious thing to want to do (I even used to watercool my computer), but to actually build an HVAC system around a data center... I bet is a real challenge.
08:37:25 <applicative> so did I maybe they use it some other way for building like all the sed that wanders across the screen
08:37:31 <quicksilver> tgeeky_: yeah, definitely. Actually doing obvious things is hard :)
08:37:36 <FUZxxl> Why can't we just use the system's perl (boot has a shebang to /usr/bin/perl btw)
08:37:46 <quicksilver> because it might be the wrong version
08:37:49 <quicksilver> or not present at all
08:37:53 <FUZxxl> o.O
08:38:00 <bitonic> FUZxxl: https://github.com/ghc/ghc-tarballs/commits/master/perl/ghc-perl-1.tar.gz
08:38:26 <FUZxxl> Adding Perl as a prequisite for building GHC shouldn't be difficult, should it?
08:38:30 * applicative agrees the mingw things are a bit much for most of us to download...
08:38:53 <tgeeky_> applicative: I don't. I have a mingw environemnt that I drop GHC into
08:39:05 <bitonic> FUZxxl: making sure that things work with random stuff people download on win is probably a royal PITA
08:39:12 <applicative> FUZxxl: see, tgeeky_ appreciates your torment
08:39:29 <hiptobecubic> I used to have a dryer exhaust tube running from the window, through an AC dust filter, and into my case :)
08:39:30 <scopedTV> well, to compile GHC you need GHC anyway.
08:39:36 <tgeeky_> i even do something silly: in my bash profile I kill all the windows environment variables to be sure nothing leaks in
08:39:45 <scopedTV> I cannot imagine to optimize for this scenario for end-users, they can download a binary distribution
08:39:48 <hiptobecubic> in the summer, i would just switch the direction of the fan to exhaust out the window
08:40:00 <applicative> FUZxxl: I remember that the evil mangler was supposed to require some definite perl-5.x.y.z
08:40:15 <tgeeky_> hiptobecubic: hehe. do you live somewhere so cold that your computer won't work unless it's heated?
08:40:30 <FUZxxl> applicative: And nobody wanted to touch that evil piece of code?
08:40:47 <applicative> FUZxxl: I mean at some point.  Eg macports installed a special perl just to build ghc
08:40:48 <FUZxxl> I mean, it's not written in COBOL, although Perl is pretty close
08:40:48 <bitonic> FUZxxl: no, they just removed the need for it
08:40:55 <hiptobecubic> tgeeky_, christ no. The tube was coming from open air, not attached to a dryer :)
08:41:01 <tgeeky_> hiptobecubic: hehe :)
08:41:13 <tgeeky_> hiptobecubic: did you get language-c-quoters built
08:41:14 <scopedTV> PERFORM MANGLE UNTIL DONE;
08:41:17 <FUZxxl> bitonic: If there is no need for that tarball, why is it still included?
08:41:19 <bitonic> FUZxxl: the *evil* mangler
08:41:32 <hiptobecubic> tgeeky_, of course not. I'm about to bike home and then waste my entire evening trying to figure it out again.
08:41:32 <bitonic> FUZxxl: isn't it clear that nobody knows? file a bug
08:41:36 <scopedTV> PERFORM MANGLE UNTIL DONE.   -- apologies
08:41:41 <FUZxxl> hehe
08:41:45 <FUZxxl> good idea actually
08:42:00 <FUZxxl> I probably should do more than answering SO questions
08:42:02 <Igloo> perl is still used, e.g. for the splitter
08:42:38 <bitonic> Igloo: but is is necessary to ship it like that? I think that's what FUZxxl was concerned about
08:42:57 <applicative> FUZxxl: sync-all is a perl script, maybe you can modify it
08:42:57 <FUZxxl> Igloo: What splitter?
08:43:04 <Igloo> driver/split/ghc-split.lprl
08:43:15 <Igloo> bitonic: We think it's the best compromise, yes
08:43:28 <bitonic> FUZxxl: http://hackage.haskell.org/trac/ghc/wiki/Building/Porting#Thesplitter
08:43:35 <FUZxxl> applicative: bullshit. sync-all is shebang'd to /usr/bin/perl; on the other hand, one needs sync-all to download the tarball in the first place
08:43:48 <bitonic> Igloo: oki. I can imagine dealing with those things being a pain to deal with
08:43:59 <applicative> ha, havent studied it
08:44:11 <applicative> FUZxxl: I see you really are irritated
08:44:30 <FUZxxl> applicative: A little bit.
08:44:31 <applicative> anyway, Igloo can tell you all
08:44:53 <FUZxxl> Why dafuq are we using a Perl script in a compiler for Haskell? Yet another Phd?
08:45:38 <bitonic> FUZxxl: Perl is key to "get things done" (tm)
08:45:43 <applicative> Yes, why doesn't the compiler first compile a nice simple Lisp, and go from there
08:46:09 <nand`> the first step in compiling GHC should be to hand-assemble a small lisp interpreter for your architecture
08:46:14 <FUZxxl> I think we should use J for helper scripts. The interpreter is just 1.6 MiB and needs no arcane magic to get installed
08:46:30 <bitonic> FUZxxl: ahahahah.
08:46:47 <bitonic> from Perl to J
08:46:50 <FUZxxl> additionally, the source code is just 3 MiB and is nice platform-independant C code
08:47:29 <FUZxxl> Or how about writing all that stuff in portable POSIX-sh ?
08:47:33 <applicative> Can you do complicated 'IO' with J
08:48:18 <FUZxxl> applicative: Yes. You can even do OO, although that is similiar to trying generic programming in C
08:49:15 <applicative> i looked at it a long time ago.  It was amazing how fast it was, at least for whatever I was cooking up
08:53:20 <FUZxxl> applicative: After all, J is dialect of APL which is known for its fast array-processing capabilities.
08:53:44 <joeyh> aha! Data.Bits.Utils.w82s can stuff binary data into a String
08:53:47 <bitonic> FUZxxl: and suitability for general purpose scripting. ah no, not really.
08:54:04 <FUZxxl> bitonic: :-)
08:54:32 <FUZxxl> http://goo.gl/5PVJf
08:54:39 <FUZxxl> Here is my ticket
08:56:59 <bitonic> I'd certainly agree that for linux it does not make much sense
08:58:30 <bitonic> funny how I never even noticed. the wonders of high speed internet
08:59:15 <applicative> I never noticed either. The time I will spend figuring out what went wrong during 'make' is  dwarfed by it
08:59:58 <FUZxxl> That might come from the fact that I'm from Berlin and all data may go through some intercontinental cable...
09:00:57 <bitonic> FUZxxl: I think the intercontinental cable can handle 200MB
09:00:59 <FUZxxl> yeah! All that extra stuff has finally been downloaded!
09:01:13 <FUZxxl> bitonic: Yeah... If I would only use it exclusivly
09:01:40 <aristid> FUZxxl: i think your residential link is more likely to be the culprit for low speeds
09:01:41 <bitonic> FUZxxl: I'd doubt the cable is the problem. A lot of GHC devs are from europe as well
09:02:18 <bitonic> in fact, the two main ones are
09:02:32 <applicative> bitonic, well if FUZxxl has been downloading all this time, it certainly took a lot longer than for me
09:02:50 <scopedTV> i just downloaded the GHC sources with 6 MB/s from Netherlands
09:04:34 <aristid> scopedTV: megabyte/s?
09:04:44 <scopedTV> Yes.
09:11:47 <FUZxxl> applicative: Actually, I have started download two hours ago (the git repo of ghc itself was already on my computer)
09:12:02 <FUZxxl> I get a speed of 200 KiB/s from my crappy wifi
09:12:42 <applicative> ah
09:12:49 <FUZxxl> Additionally, I walked my dog inbetween and the download was interreupted in between so my computer didn't download for probably some 30 miutes
09:13:36 <FUZxxl> Is a perf-llvm build working as of now? The last time I tried it completely blew up
09:24:45 <Guest51436> someone gave me a project idea: complex wire protocol. I have an internship on a company doing remote management and industrial networks. what could be a relevant wire protocol that could have something to do with that? I have come in contact with SOAP though they said they would change to a REST-API for their remote managment.
09:28:08 <Guest51436> someone gave me a project idea: complex wire protocol. I have an internship on a company doing remote management and industrial networks. what could be a relevant wire protocol that could have something to do with that? I have come in contact with SOAP though they said they would change to a REST-API for their remote managment.
09:28:13 <Guest51436> can you see me?
09:28:32 <eacameron> is there a predefined version of `flip (.)` ?
09:28:40 <bitonic> eacameron: (>>>)
09:28:47 <bitonic> Guest51436: yes.
09:28:51 <eacameron> @bitonic: sweet thanks
09:28:51 <lambdabot> Unknown command, try @list
09:28:59 <eacameron> bitonic: thanks
09:29:19 <cwp> someone gave me a project idea: complex wire protocol. I have an internship on a company doing remote management and industrial networks. what could be a relevant wire protocol that could have something to do with that? I have come in contact with SOAP though they said they would change to a REST-API for their remote managment.
09:29:20 <bitonic> eacameron: you're welcome. it has a more general type sig, so you might get strange errors.
09:29:52 <eacameron> bitonic: yeah...can I just use it in place of (.)??
09:29:53 <astropirate> cwp: do something with JSON as aposed to xml
09:29:59 <bitonic> eacameron: yes
09:30:02 <astropirate> ^^ my two cents
09:30:16 <bitonic> cwp: if you're looking for a messaging solution, RabbitMQ!
09:30:25 <bitonic> the swiss army chainsaw of messaging
09:30:36 <bitonic> but I don't see how this is relevant to #haskell.
09:31:07 <bitonic> but, for the love of got, not soap.
09:31:14 <astropirate> lol
09:31:31 <astropirate> so many dreadful memories :(
09:31:36 <bitonic> *god
09:33:53 <S11001001> I think soap is automatically excluded because cwp said complex (thrice) and SOAP is Simple.
09:34:16 <bitonic> S11001001: on the other hand, AMQP is Advanced.
09:34:18 <bitonic> so it's good.
09:34:56 <cwp`> so I want to write a complex wire protocol
09:35:07 <cwp`> does REST have to do anything with this?
09:35:19 <astropirate> WebSockets :)
09:35:23 <astropirate> its not Rest though
09:35:28 <astropirate> REST*
09:35:59 <astropirate> JSON and REST go hand and hand usually
09:36:02 <cwp`> is REST a (complex) wire protocol?
09:36:20 <bitonic> cwp`: 1) it's not clear what you want. 2) this is not the right channel
09:36:31 <bitonic> we can talk in #haskell-blah
09:37:30 <cwp`> im in haskell-blah
09:37:39 <`Jake`> Is it advisable to use the unicode keywords like → and so on?
09:37:58 <bitonic> `Jake`: I wouldn't. no real advantages, some disadvantages
09:38:03 <`Jake`> ok
09:41:05 <cwp`> I want to get better at Haskell. Have writeen maybe 20 small
09:41:05 <cwp`> 								        [18:4programs, 20 to 300 LOC and I want to try a bigger project,
09:41:05 <cwp`>        maybe 1500
09:41:05 <cwp`> <cwp`>        to 3000 LOC.
09:41:46 <S11001001> uh oh
09:41:54 <cwp`> And preferrably I wan to pick something else up while doing this project. Like learn something that is relevant for me. I have an internship at a company doing industrial communication and remote management.
09:42:14 <applicative> `Jake`: a lot of people like, it is certainly legitimate.
09:42:27 <applicative> a lot of people like it
09:42:34 <S11001001> the cobwebs of memory are lifting. *I* said complex.
09:42:34 <cwp`> So what would be a good project? Someone said complexs wire protocol - but which one?
09:43:28 <Clint> you should work on the gitit rewrite
09:44:10 <cwp`> REST a wire protocol right? Because i actually bumped into REST at work and it is said to be fairly easy to implement this seems like a good project idea, true?
09:44:26 <S11001001> I thought you wanted something hard?
09:44:37 <cwp`> yes but not to hard
09:44:38 <`Jake`> applicative: well, I guess I will think about it and see if it's worth it
09:44:39 <Adeon> IIRC it's not an actual protocol, just conventions over HTTP
09:45:06 <applicative> `Jake`: here's a typical user, not much difference. Github renders unicode a little oddly https://github.com/basvandijk/monad-control/blob/master/Control/Monad/Trans/Control.hs
09:45:12 <Cale> Yeah, REST isn't a protocol, HTTP is a protocol
09:45:43 <cwp`> so SOAP isnt a protocol either?
09:45:51 <`Jake`> applicative: well, that doesn't look _too_ bad
09:46:13 <Adeon> according to wikipedia, SOAP is an actual protocol if first paragraph is accurate
09:46:33 <FUZxxl> damned! Building fails
09:46:48 <Adeon> you could have looked this up yourself
09:46:53 <cwp`> yes i read it
09:46:57 <Cale> As far as I can tell REST is just a buzzword for "Let's use HTTP"
09:47:02 <cwp`> but isnt rest then too?
09:47:30 <applicative> `Jake` it looks fine.  I set up suitable keybindings in my editor once, but it didn't take somehow.
09:47:52 <`Jake`> applicative: What do you use?
09:48:00 <applicative> editor
09:48:04 <applicative> ?
09:48:06 <`Jake`> yeah
09:48:10 <cwp`> any ideas?
09:48:17 <applicative> I use textmate and nano on os x
09:48:22 <applicative> for haskell
09:48:28 <`Jake`> ok, I guess I will try it with vim
09:48:31 <Adeon> make a web application using one of the haskell web frameworks
09:48:43 <bitonic> `Jake`: no. no. emacs.
09:49:08 <Adeon> on the front page put a big picture of carrot
09:49:17 <applicative> i occasionally try emacs haskell, since I do some agda with emacs, but it seems too much trouble, configuration is a nightmare
09:49:18 <Adeon> someone said in a fortune they always wanted to do that
09:49:21 <`Jake`> bitonic: that get's offtopic. A discussion about this might never end.
09:49:51 <applicative> `Jake`: tons of Haskell vim users yes
09:50:00 <shirt> i'm using test-framework. how can i have failed tests report the line number where it fails?
09:50:30 <bitonic> `Jake`: it just ended. emacs.
09:51:48 <cwp`> Adeon: no
09:51:52 <`Jake`> bitonic: I've looked at it and I couldn't find anything which would make it better for me than vim. Therefore, I don't see any reason why I should change my editor.
09:51:53 <cwp`> web apps are boring
09:52:20 * applicative beams that *he* uses the same editor that  R  Leshchinskiy and  B. Lippmeier; clearly the choice of the more serious Haskellers :)
09:52:30 <applicative> that they use rather
09:52:32 <cwp`> S11...what protocol do u suggest?
09:53:16 <applicative> `Jake`: if you a vim user you should certainly use vim; studying haskell gives you too many other things to think abou
09:53:17 <shapr> cwp`: I know of exciting webapps!
09:53:51 <`Jake`> applicative: Actually, I didn't use vim too much before I used haskell
09:55:44 * nand` learned vim by writing Haskell
09:56:43 * applicative learned haskell by writing TextMate extensions :)
09:56:56 <nand`> applicative: in haskell?
09:56:59 * astropirate is still learning haskell :(
09:57:07 * bitonic is hungry
09:57:23 * astropirate gives bitonic a sandwich
09:57:28 * `Jake` will eat something in a minute
09:57:29 <bitonic> thanks.
09:57:31 <applicative> yes
09:57:33 * `Jake` for realz
09:57:51 <astropirate> bitonic: ha jokes on you it was roffied
09:57:57 <astropirate> :O
09:58:14 <applicative> nand` for example, to show the type of the expression the cursor is on ctr-alt-cmd-J
09:58:33 <cwp`> anyone got gtk working on windows?
09:58:38 <applicative> nand`: to insert ghc inferredtype ctr-alt-cmd-H
09:58:39 <applicative> etc
09:59:07 <applicative> it certainly beats elisp and is much faster...
10:00:11 <applicative> nand`: also for writing infinitely many insane ways of reformatting markdown and so on
10:00:50 <nand`> applicative: yes, but I was asking if textmate extensions can be written in Haskell
10:01:05 <nand`> or some other language (eg. python)
10:01:25 <cwp`> is SOAP going out of fashion?
10:01:52 <c_wraith> SOAP has been out of fashion for 20 years
10:02:02 <nand`> I don't know what it is but the wikipedia page mentions it relies on XML for its message format. That alone is enough to invoke my disgust. I sure hope it is
10:02:06 <applicative> textmate exposes a pile of variables; you connect with them in some scripting language which calls whatever
10:06:09 <applicative> nand`: the most commonly language people used to customize textmate seems to have been ruby which is used some in the program itself
10:10:53 <cwp`> how hard would it be to write an IRC client?
10:11:16 <nand`> depends on how good you want it to be
10:11:20 <c_wraith> cwp`: if you ignore all the things in IRC that clients do wrong and or the spec doesn't address, it's easy.
10:11:39 <c_wraith> cwp`: on the other hand, if you want to handle all of those cases as well as possible, it's a lot of work
10:11:42 <nand`> and how many RFC extensions you want to support
10:11:42 <cwp`> thing is i need a GUI then and i cant get gtk to work
10:11:46 <nand`> (as well as which RFC, mind)
10:12:06 <cwp`> i just want to be able to use it myself, go here, have a few channels open and communicate
10:13:02 <nand`> shouldn't be too much work if you just want to implement a “dumb” client
10:13:15 <nand`> and ignore all of the things other than, say, PING and PRIVMSG
10:14:09 <armlesshobo> cwp`: why can't you get gtk to work?
10:14:26 <applicative> cwp`: what operating system are you using
10:14:51 <cwp`> windows
10:14:53 <cwp`> 7
10:14:57 <armlesshobo> ahhhh
10:15:04 <armlesshobo> yeah
10:15:09 <armlesshobo> you need cygwin and all that too
10:15:15 <cwp`> i have cygwin/mingw
10:15:19 <applicative> hm, I wonder what gui lib people are using with windows at the moment
10:15:27 <armlesshobo> win32
10:15:28 <armlesshobo> maybe
10:15:29 <nand`> I hear Qt is popular among windows users
10:15:42 <applicative> in theory wx is for windows
10:16:40 <applicative> cwp`: can you install wx and wxhaskell?  I don't know if there's good advice anywhere
10:18:51 <applicative> the instructions here for Windows 7 and the last Haskell Platform don't look too hard ... but its always like that http://www.haskell.org/haskellwiki/WxHaskell/Windows
10:20:15 * hackagebot factual-api 0.3.2 - A driver for the Factual API  http://hackage.haskell.org/package/factual-api-0.3.2 (RudigerLippert)
10:20:17 * hackagebot operational 0.2.1.1 - Implementation of difficult monads made easy  with operational semantics.  http://hackage.haskell.org/package/operational-0.2.1.1 (HeinrichApfelmus)
10:22:34 <cwp`> hmm i tried to compile just a file that does nothin but improts Gtk while in cygwin and it takes forever
10:23:00 <cwp`> ghc -Wall Main.hs is correct right?
10:23:44 <applicative> what  takes forever, compilation?
10:24:03 <applicative> linking maybe? or ./Main.exe?
10:24:14 <cwp`> linking
10:24:31 <armlesshobo> it statically links everything, so yes
10:24:40 <cwp`> now something happend, spat out a lot of things
10:24:46 <c_wraith> cwp`: how much memory do you have?  ld doesn't handle ghc's output well.  It often wants 1GB
10:24:47 <cwp`> i got .o file but no exe
10:24:54 <cwp`> how do i get an exe?
10:25:06 <applicative> main = putChar 'a'
10:25:26 <applicative> oh wait,
10:25:33 <applicative> ghc --make Main.hs
10:25:34 <cwp`> 4GB RAM
10:25:44 <applicative> ghc --make Main.hs
10:26:11 <applicative> or ghc --make -O2 Main.hs -o myprogram.exe
10:26:39 <nand`> is the ‘--make’ really needed here?
10:26:45 <nand`> I thought --make is just for programs with multiple modules
10:26:51 <applicative> depends onthe ghc
10:27:00 <cwp`> print 5 didnt print anything
10:27:06 <cwp`> it has to be print "5"?
10:27:36 <nand`> I've noticed that Linking seems to take forever on windows boxes, but those boxes are also very slow
10:27:39 <applicative> no, main = print 5 should work even if  it's the whole text of Main.hs
10:27:51 <Clint> > print 5
10:27:53 <lambdabot>   <IO ()>
10:28:14 <applicative> ^^^ see a perfectly valid main  action
10:28:22 <nand`> echo 'main = print 5' | runhaskell
10:28:28 <nand`> outputs 5
10:30:16 * hackagebot subtitleParser 0.1 - A parser for .srt and .sub files  http://hackage.haskell.org/package/subtitleParser-0.1 (RubenAstudillo)
10:32:52 <Refried__> If I've got two Writers, and I want to append what was written, but only keep the value of the second one... I guess that's just a flatMap, right?
10:33:26 <c_wraith> Sort of
10:33:30 <c_wraith> it's >>
10:34:01 <cwp`> status 1 is fail right?
10:34:02 <c_wraith> :t (>>)
10:34:03 <lambdabot> forall (m :: * -> *) a b. (Monad m) => m a -> m b -> m b
10:35:35 <parcs`> @check liftM2 (==) id optional
10:35:36 <lambdabot>   Occurs check: cannot construct the infinite type:
10:35:36 <lambdabot>    a = Data.Maybe.Maybe a
10:36:01 <parcs`> @check liftM2 (==) id (join . optional)
10:36:03 <lambdabot>   "OK, passed 500 tests."
10:36:33 <c_wraith> @check liftM2 (==) Just optional
10:36:34 <lambdabot>   "OK, passed 500 tests."
10:37:23 <nand`> > deriv sin x
10:37:24 <lambdabot>   1 * cos x
10:37:27 <nand`> > deriv cos x -- huh?
10:37:28 <lambdabot>   1 * negate (sin x)
10:37:30 <nand`> oh
10:37:33 <nand`> it works here
10:38:05 <nand`> I get “1 * negate a” in ghci
10:38:50 <bitonic> :t deriv
10:38:51 <lambdabot> forall a b. (Num a, Num b) => (Dif a -> Dif b) -> a -> b
10:39:03 <srhb> @index deriv
10:39:03 <lambdabot> bzzt
10:39:05 <srhb> baw..
10:39:36 <bitonic> @hoogle numbers
10:39:36 <lambdabot> package Numbers
10:39:36 <lambdabot> package numbers
10:39:36 <lambdabot> package NumberSieves
10:39:38 <cwp`> what is the verb of derivative?7
10:39:42 <srhb> deriv.
10:39:45 <bitonic> @hackage Numbers
10:39:45 <lambdabot> http://hackage.haskell.org/package/Numbers
10:39:46 <srhb> :P
10:39:46 <cwp`> take derivative?
10:39:48 <srhb> Derive*
10:40:14 <cwp`> srhb: are you sure? because mathematically you derive a formula without it having anythong to do with derivatives
10:40:23 <srhb> Well, then differentiate.
10:41:40 <srhb> derive and differentiate are definitely used synonymously, but I can't say if one is more informal than the other.
10:42:21 * bitonic always heard differentiate
10:44:05 <cwp`> ah
10:47:16 <MostAwesomeDude> Out of curiosity, is House still the foremost project in the realm of operating systems written in Haskell?
10:48:19 <cwp`> if i have mingw does that mean i have msys?
10:48:28 <cwp`> an OS in haskell!?
10:48:37 <cwp`> would that be terribly inefficient?
10:50:19 * hackagebot logic-classes 1.4.6 - Framework for propositional and first order logic, theorem proving  http://hackage.haskell.org/package/logic-classes-1.4.6 (DavidFox)
10:51:54 <cwp`> so will try to install wx haskell but now for some food
10:54:38 <dmwit> MostAwesomeDude: I think there were some derivatives since then, but I don't know their names off the top of my head.
10:54:45 <dmwit> LightHouse, maybe?
10:55:09 <shapr> Yah, LightHouse is the most recent I've seen.
10:55:34 <shapr> cwp`: LightHouse is very efficient, it doesn't do context switching :-)
10:57:18 <cwp`> so no threading that means?
10:58:51 <_Vi> coerceReal = fromRational . toRational  -- Is it the right way to solve problems Double-like values?
10:59:47 <c_wraith> :t fromRational . toRational
10:59:48 <lambdabot> forall a a1. (Fractional a, Real a1) => a1 -> a
11:00:00 <c_wraith> @hoogle (Fractional a, Real a1) => a1 -> a
11:00:01 <lambdabot> Prelude realToFrac :: (Real a, Fractional b) => a -> b
11:00:01 <lambdabot> Unsafe.Coerce unsafeCoerce :: a -> b
11:00:01 <lambdabot> Prelude ($) :: (a -> b) -> a -> b
11:00:07 <cwp`> > So anyone here witha PhD?
11:00:09 <lambdabot>   <no location info>: parse error (possibly incorrect indentation)
11:05:35 <ClaudiusMaximus> anyone here working on juicypixels?  i just switched my code to pipe pgm into pngbook's wpng example program using libpng and it's now 6.5x faster :/
11:06:16 <Peaker> Naive Haskell is usually not competitive with C IME
11:06:41 <shapr> cwp`: I think it does threading just fine, but LightHouse is still one process.
11:06:55 <ClaudiusMaximus> sure :)  and i do recall seeing something about "correctness first, then we optimize" - just wondering if they'd reached the "moar fasts" development stage
11:07:24 <shapr> cwp`: Vad heter det... process lookup table?
11:07:32 <shapr> cwp`: You know how a CPU has different 'rings' right?
11:07:56 <ClaudiusMaximus> (side note: wpng only accepts a subset of pgm - it demands the width and height on one line, and the maxval on another line)
11:07:57 <shapr> Each process appears to have its own separate memory space, and that's faked by the CPU swapping the lookup tables.
11:08:06 <shapr> ClaudiusMaximus: Is your haskell irc channel fractal online?
11:08:26 <ClaudiusMaximus> shapr: http://archive.org/details/ClaudiusMaximus_-_Haskell_IRC_Fractal  (offline generated)
11:08:29 <shapr> cwp`: So, LightHouse just has one single process, it's structured like Windows 3.11
11:08:54 <ClaudiusMaximus> shapr: it would take a vast amount of re-engineering to make it work with live input...
11:09:14 <shapr> ClaudiusMaximus: wow, cool :-)
11:09:21 <cwp`> ok and you cant start more of them?
11:09:54 <shapr> cwp`: Oh you can run multiple 'apps' inside of LightHouse, but it's cooperative multi-tasking.
11:10:16 <MostAwesomeDude> shapr, dmwit : Hm. So, if I were interested in fun adventures with this, which one would I look at?
11:10:25 <ClaudiusMaximus> shapr: source code is here http://hpaste.org/70203  (the fun part from my perspective is the "renormalization" that allows me to infinite zoom using only Double precision)
11:10:50 <shapr> MostAwesomeDude: You mean LightHouse?
11:11:02 <shapr> Personally, I wonder if they've gotten LightHouse running on HALVM?
11:11:07 <shapr> That would be perfect :-)
11:11:58 <MostAwesomeDude> shapr: I'm in that crazy "All OSes suck, time to build a new one" mood.
11:12:19 <ion> “All operating systems suck, time to build a new one that sucks”
11:12:28 <shapr> Can't disagree with that. Everything really does suck, but some things suck less than others.
11:14:01 <tac-tics> MostAwesomeDude: I'm in that mood for programming languages.
11:15:04 <MostAwesomeDude> tac-tics: Yeah. I've fallen in love with E again; a couple of us are contemplating E on Python.
11:15:50 <Peaker> MostAwesomeDude, E the obj-cap lang?
11:16:00 <MostAwesomeDude> Peaker: Yes.
11:16:11 <Peaker> MostAwesomeDude, ah. that is my looong term goal too
11:16:19 <Peaker> MostAwesomeDude, obj-caps, that is, and an OS :)
11:16:22 <tac-tics> Peaker: MostAwesomeDude What's that?
11:16:34 <MostAwesomeDude> I suppose Haskell would be a fine host for E as well, but I am just not good at Gettin' It Done with Haskell.
11:16:34 <Peaker> but the first-step to world domination is a programming environment I'd want to use
11:16:45 <shachaf> @google what's e the obj-cap lang?
11:16:47 <lambdabot> http://www.eros-os.org/pipermail/cap-talk/2009-March/012333.html
11:16:47 <lambdabot> Title: [cap-talk] [e-lang] A Taxonomy of Current Object-Cap Systems
11:17:23 <Peaker> tac-tics, basically there are two main ideas for managing authority/security -- that of "ACLs" with "ambient authority", and "object capabilities" (not to be confused with unix capabilities)
11:17:35 <MostAwesomeDude> tac-tics: E is a language built on the concept that mutually untrusting systems can still interact in meaningful ways, and that restricting privileges to the least authorized object yields better security.
11:18:01 <tac-tics> For a totally untrusting person like myself, that sounds appealing
11:18:03 <MostAwesomeDude> Elevator: E is a language that lets you build systems that are secure by default and that don't have to trust other systems to get work done.
11:18:05 <Peaker> tac-tics, in the former, there's some global namespace, and the "ambient authority" is the kernel's authority to grant you access to stuff from the global namespace that you designate.. the authority is coming from nowhere in particular
11:19:07 <Peaker> tac-tics, in the latter (objcaps) the idea is that you can unify designation of resources with the authority to do so -- instead of a global namespace, you can make designation unforge-able and convey the authority. Thus, you need far fewer "security" checks. And you get much security almost for free -- because you have to solve the designation problem anyway
11:19:42 <Peaker> tac-tics, concrete example of this idea is   filenames(ACLs)    vs.   file descriptors(caps)
11:20:08 <Peaker> tac-tics, you can't forge a file descriptor, and there are no "security checks" needed when accessing an fd.  So all we need to do is get rid of "open", and pass around fd's instead of filenames
11:20:57 <Peaker> for example, instead of painfully configuring ACL's that allow a web server's process's user to access the files it needs, *and* separately designating the files it needs in a config file,   you could *only* designate them and that would convey the authority to access them..
11:21:16 <Peaker> so the web server's config would have fd's in it, rather than file names
11:21:21 <tac-tics> hm
11:21:34 <tac-tics> So it's an "everything's an object" operating system thingy?
11:22:10 <Peaker> it's not really about OOP
11:22:30 <Peaker> it's about fine-grained security controls that have understandable invariants...
11:22:54 <Peaker> tac-tics, I think this paper is pretty great: http://srl.cs.jhu.edu/pubs/SRL2003-02.pdf
11:25:08 * tac-tics doesn't quite get it. And should probably be working anyway.
11:28:22 <MostAwesomeDude> Also I feel obligated to continue House since all of its designers went to school nearby.
11:28:25 <Peaker> tac-tics, the paper explains it better if you're interested
11:29:01 <tac-tics> Peaker: I will look at it when I have time later :)
11:29:02 <tac-tics> Thanks
11:31:22 <T> hello?
11:32:39 <hpaste> Combatjuan pasted “Instance Declaration” at http://hpaste.org/70229
11:33:28 <Combatjuan> Oh hey.  That was me.  Ok, well newb warning.  I'm trying to do the Project Euler problems in Haskell as a way of learning the language (I also have LYAHFGG though I'm only partway into it).
11:33:38 <shachaf> Combatjuan: The problem isn't that you need to declare an instance, it's that you're trying to take teh square root of an Int.
11:33:51 <hpaste> keseldude pasted “Tic Tac Toe with IOArray” at http://hpaste.org/70230
11:34:03 <shachaf> Also, Project Euler is a terrible way of learning Haskell. You'll only suffer for it.
11:34:16 <Combatjuan> shachaf: It's not clear to me why that's a problem.  It seems like sqrt should take a numbery thing and return a floating point numbery thing.
11:34:30 <Combatjuan> And Ints are numbery things (they have sqrts)... Oh, not negative ones.  I see.
11:34:31 <shachaf> @ty sqrt
11:34:32 <lambdabot> forall a. (Floating a) => a -> a
11:34:46 <shachaf> sqrt takes something and returns something of the same type.
11:34:58 <aristid> Combatjuan: haskell doesn't do implicit conversions of numeric types
11:35:01 <shachaf> If you want you can convert the Int to an instance of Floating.
11:35:10 <Combatjuan> So I want to say fromInt?
11:35:19 <shachaf> Of course, what you really want is integer square root, not floating-point square root.
11:35:33 <shachaf> @hoogle Int -> Float
11:35:33 <lambdabot> Prelude (!!) :: [a] -> Int -> a
11:35:33 <lambdabot> Data.List (!!) :: [a] -> Int -> a
11:35:34 <lambdabot> Data.Sequence index :: Seq a -> Int -> a
11:35:49 <shachaf> Well, you're probably after fromIntegral.
11:35:54 <Combatjuan> shachaf: Yes, that's true.  I'm faking integer sqrt with my floor.
11:36:20 <shachaf> Also, if you're writing code like "if (smallest_factor == []) then n else (n / (head smallest_factor))" it means you're doing something wrong.
11:36:42 <Combatjuan> shachaf: That's the impression I was getting, but as an imperative programmer old habits die hard.
11:36:43 <shachaf> In particular using "head" is a bad idea if you can avoid it. :-)
11:36:45 <shachaf> You want to pattern-match.
11:37:00 <shachaf> case foo of [] -> n; (x:_) -> n / x
11:37:27 <shachaf> Of course, you probably still have type errors in that. I haven't looked at the actual code.
11:37:36 <shachaf> (Integer division is `div`, not /.)
11:38:13 <Combatjuan> Can I pattern match after the in?
11:38:28 <keseldude> > [1 .. floor (sqrt . fromIntegral $ (10 :: Int)]
11:38:29 <lambdabot>   <no location info>: parse error on input `]'
11:38:36 <keseldude> > [1 .. floor (sqrt . fromIntegral $ (10 :: Int))]
11:38:38 <lambdabot>   [1,2,3]
11:39:53 <Combatjuan> Ok.  I'm having trouble pattern matching in a let ... in.  Do I have to pattern match before the let and duplicate the let?
11:40:22 <shachaf> No.
11:40:32 <shachaf> > let x = 5 in case x of 5 -> 3; _ -> 4
11:40:33 <lambdabot>   3
11:41:42 <Combatjuan> shachaf: Oh dear.  I thought pattern matching was when you did  function x | x < 5 = something | x>= 5 = something else
11:41:54 <shachaf> Nope, that's called guards.
11:41:55 <Combatjuan> Using a case x of looks an awful lot to me like using an if.
11:42:04 <shachaf> It's much better.
11:42:17 <Combatjuan> Stylistically or performance or how?
11:42:28 <shachaf> Correctness.
11:42:34 <Combatjuan> Even better!
11:43:03 <shachaf> When you say "if x == [] then foo else bar (head x) (tail x)", the compiler has no way of proving that you're not applying "head" and "tail" to an empty list.
11:43:10 <shachaf> I mean, *you* know it, but it's not communicated to the compiler.
11:43:27 <shachaf> head and tail are explicitly defined as evil functions that can crash your program if you apply them to [].
11:43:45 <Combatjuan> shachaf: Yeah.  I realized that but didn't know there was a better way.  That makes sense to me.
11:43:52 <shachaf> Whereas when you do "case x of [] -> foo; (a:b) -> bar a b", the compiler can prove that your program won't crash.
11:43:57 <shachaf> @google boolean blindness
11:43:59 <lambdabot> http://existentialtype.wordpress.com/2011/03/15/boolean-blindness/
11:43:59 <lambdabot> Title: Boolean Blindness « Existential Type
11:44:51 <Taneb> I remember reinventing the wheel with both Proxy and Identity
11:45:03 <rwbarton> they're good wheels
11:45:03 <Taneb> Except I called them BlackHole/Eater and Box
11:45:06 <rwbarton> haha
11:45:19 <rwbarton> a wheel by any other name
11:45:31 <rwbarton> would still be round, I guess?
11:45:48 <shachaf> Sometimes wheel is called admin or something.
11:46:08 <Taneb> A wheel by any other name would still have large enough density such that light can not escape its event horizon
11:46:18 <cwp`> if i download the haskell platofrm what do i get? 7.0.3?
11:46:58 <Taneb> GHC 7.4.1
11:48:42 <stephenjudkins> largely unrelated to Haskell: can anyone recommend a library that offers monadic IO in javascript? I just want something that offers bind/return
11:49:16 <Taneb> Is that possible?
11:49:38 <shachaf> stephenjudkins: edwardk was just talking about how that doesn't really scale in Scala and JavaScript the other day.
11:49:42 <Taneb> JS doesn't really have monads as far as I know
11:49:44 <shachaf> (At least not a naive implementation.)
11:50:08 <stephenjudkins> Taneb: as far as I know, any language with functions can have monads.
11:50:31 <shachaf> stephenjudkins: I wrote http://slbkbs.org/toys/callfront.txt, which is an implementation of Cont in CoffeeScript, but it's just a toy.
11:50:32 <stephenjudkins> javascript doesn't have monad comprehensions like Haskell or Scala.
11:50:52 <cwp`> monad comprehensions?
11:51:04 <stephenjudkins> shachaf: i hacked my own bind/return on top of jquery Deferred, but I was hoping there was something more buletproof
11:51:43 <Taneb> I'm struggling to see how monads are possible in languages like JavaScript
11:51:51 <shachaf> stephenjudkins: I don't think you really get the benefits of being structured like a monad when you just have one instance.
11:51:55 <Taneb> That don't have things like (* -> *)
11:52:06 <tac-tics> Taneb: All you need for monads are higher order functions
11:52:12 <tac-tics> Taneb: you can't *type* them in Javascript
11:52:20 <tac-tics> but you can define them in an untyped way.
11:52:37 <Taneb> Hmm
11:52:40 <cwp`> will i have problems with wxHaskell if i have higher version than 7.0.3?
11:53:01 <tac-tics> Taneb: You just define >>= and return
11:53:13 <tac-tics> for whatever data structure you're interested in
11:53:45 <Taneb> Oh, I see
11:54:01 <cwp`> WXC_VERSION ?
11:54:09 <cwp`> anyone use wxHaskell?
11:55:53 <raek> cwp`: I managed to install wxHaskell 0.13 yesterday (I had GHC 6.12.1, though)
11:57:07 <lcfrs> stephenjudkins: I ported Arrows to Javascript/Coffeescript, depending on your task you might find some use for it (http://lcfrs.org/samsara/docs/dragndrop.html)
11:58:29 <stephenjudkins> lcfrs: not exactly what i'm looking for, but that is very interesting. thank you!
12:00:33 <cwp`> raek: windows?
12:01:46 <raek> cwp`: no, Ubuntu
12:03:44 <cwp`> so i can setup make files like in C right?
12:03:48 <cwp`> with cabal?
12:06:19 <pooya72> cwp`: I had a real hard time getting wxhaskell to work on a mac. in the end, it didn't. but I have a old 32-bit mac.
12:06:19 <hpaste> x annotated “Instance Declaration” with “Instance Declaration (annotation)” at http://hpaste.org/70229#a70233
12:07:07 <zzing> :t putStrLn
12:07:09 <lambdabot> String -> IO ()
12:07:37 <zzing> What is the proper way to end a do (IO ()) when otherwise I would just end it with a putStrLn?
12:07:53 <mcstar> thats the proper way
12:08:11 <zzing> ok, it appears that is not my problem then
12:09:02 <mcstar> zzing: it depends, is your IO action supposed to create a result?
12:09:08 <zzing> nope
12:09:14 <mcstar> then IO () is ok
12:09:22 <zzing> A $ helped, I was doing ++ on a string
12:09:35 <zzing> Now I have some flushing problems
12:10:28 <zzing> Code like this: https://gist.github.com/1dc73dfce02b9a26aca0 where the putStr lines get output after the final input line. What is the correct way to do this?
12:11:08 <geekosaur> usually, System.IO.hFlush stdout
12:11:46 <zzing> sweet, it works perfectly
12:12:37 <mcstar> zzing: putStrLn takes 1 argument, if you dont put the $ there, you need to parenthesize its argument, i.e. the conctenation of strings
12:13:10 <zzing> yes because the binding of the function takes over and the ++ is then on the result of the putStrLn which is the wrong type right?
12:13:32 <mcstar> function application has the highest precedence in haskell
12:13:46 <cwp`> @faq  hpaste
12:13:47 <lambdabot> The answer is: Yes! Haskell can do that.
12:14:09 <S11001001> I hope hpaste supports haskell
12:14:27 <Combatjuan> lambdabot: Can Haskell make me a sandwich?
12:14:36 <mcstar> erm
12:14:51 <Combatjuan> I guess that's a no...
12:15:08 <raek> does anyone have any recommendation for a library that allows you to draw simple geometry on a window and listen to keyboard events?
12:15:09 <mcstar> well, not exactly, she is a bit shy
12:15:11 <pnkbst> Combatjuan: I don't think you *want* to be a sandwich
12:15:24 <mcstar> pnkbst: Make me one with everything!
12:15:29 <zzing> do  { s <- sandwich; return make s }
12:15:29 <S11001001> @faq Can haskell make me an IO Sandwich?
12:15:30 <lambdabot> The answer is: Yes! Haskell can do that.
12:15:31 <mcstar> (dalai lama in the pizzashop)
12:16:00 <aristid> S11001001: that IO sandwich will just print "Make it yourself" on the screen :D
12:16:05 <raek> I'm learning about FRP by trying to implement some of it myself...
12:16:22 <mcstar> zzing: again
12:16:27 <mcstar> return takes make
12:16:32 <mcstar> whats with s?
12:16:48 <ClaudiusMaximus> GLFW-b (window, events) + OpenGLRaw (graphics) is what i use lately, it's quite low level though
12:16:54 <ClaudiusMaximus> raek: ^^
12:16:54 <zzing> mcstar, I wasn't expecting a syntax checker :P
12:17:09 <mcstar> you should, all the time, every time
12:17:13 <mcstar> :)
12:17:17 <S11001001> :t \s make -> s >>= return make
12:17:19 <lambdabot> forall (m :: * -> *) a b. (Monad m) => m a -> m b -> m b
12:17:19 <zzing> return $ make s
12:18:34 <Combatjuan> shachaf: Update.  My program compiles and runs and even returns the correct answer now.  But I had to change my Ints to Integer since Int is too small.  Surprisingly I didn't get any sort of warning, just a very wrong answer when it ran.
12:18:50 <ClaudiusMaximus> :t \a b -> return a b `asTypeOf` (undefined :: Monad m => m c)
12:18:52 <lambdabot> forall t (m :: * -> *) c. (Monad ((->) t), Monad m) => m c -> t -> m c
12:19:15 <shachaf> Combatjuan: That's how Int works. :-)
12:19:21 <shachaf> Don't use Int. It's the devil.
12:19:57 <Combatjuan> shachaf: Shouldn't ghc been able to say: "Watch it there cowboy!" when it read the line answer = largestFactor 897234897234879423879 and realized that my number wouldn't fit in an Int?
12:20:05 <raek> ClaudiusMaximus: thanks! will check them out.
12:20:12 <Combatjuan> Maybe I need to specify some higher warning level?
12:20:38 <mcstar> 911
12:21:51 <tac-tics> Combatjuan: This is functional. No types ought to fit in any other without an explicit coercion :)
12:21:59 <shachaf> Combatjuan: Maybe it should. But it doesn't.
12:22:01 <zzing> Is there a way to include source code in the documentation that cabal makes?
12:22:09 <shachaf> Combatjuan: Int is kind of an evil type. It's unfortunate that it's so common.
12:22:31 <mcstar> i sure it is, since the official ones have that
12:22:31 <tac-tics> shachaf: What are you basing that off of? /curious
12:22:35 <Combatjuan> Is there a large performance penalty for using Integer over Int in practice (suppose all the number do end up fitting in Int)?
12:22:49 <tgeeky> zzing: you can copy paste the code into a section like:  -- @  ... \n-- ... \n ...-- @
12:22:55 <shachaf> tac-tics: Ask conal or something. :-)
12:23:05 <mcstar> Combatjuan: if you do arithmetic on them in for the most of the running time, then yes
12:23:07 <shachaf> Combatjuan: There is some penalty. That's the main reason people use Int.
12:23:13 <zzing> tgeeky, some of the docs on hackage have links to source code right in the docs, that is what I refer to
12:23:53 <tgeeky> zzing: oh, to generate that on your own computer? yes, uhh
12:23:53 <cwp`> is it cabal i use to set up a compilation script?
12:23:54 <shachaf> Those who would give up Essential Correctness to purchase a little Temporary Performance, deserve neither Correctness nor Performance.
12:24:07 <mcstar> tgeeky: he means, that the official documentations are generated from the sources, id like to know the answer too
12:24:14 <Combatjuan> Well, I was factoring primes so I figured speed would be an issued.  I figured ghc would warn me about sizes if it was going to be a problem since it's pretty good and telling me when I'm doing something dumb.  Anyway, I could have done it on pen and paper faster than it took me to write the program.  (-8
12:24:31 <tgeeky> mcstar: there is, one second.
12:24:37 <tgeeky> mcstar: the issue is that it can't be turned on by default
12:24:48 <zzing> shachaf, classic :-)
12:24:56 <mcstar> tgeeky: missing dependency?
12:25:30 <tgeeky> zzing: cabal install --haddock-hyperlink-source
12:25:53 <zzing> tgeeky, no way to do it in the config?
12:26:01 <xpololz> "all programming languages, whether functional or iterative, today owe their type system, largely taken for granted, to the lambda calculus." - even Ada? I don't see why :-S (new to lambda calculi and functional programming)
12:26:02 <cwp`> is cabal for installs not for building? i ahve to use a damn makefile for builds?
12:26:09 <mcstar> tgeeky: so having the source beside the docs, for system packages, is out of the question?
12:26:24 <tgeeky> mcstar: by system packages, you mean, what comes with ghc?
12:26:28 <mcstar> yes
12:26:28 <tgeeky> mcstar: or maybe 'global'?
12:26:33 <tgeeky> they should have the source already
12:26:36 <tgeeky> (they do on my computer)
12:26:43 <mcstar> oh, ill check
12:27:36 <Combatjuan> shachaf: I get the feeling you would make a very poor perl programmer.
12:27:44 <Combatjuan> ;-)
12:28:21 <mcstar> tgeeky: lot of them are dead links
12:28:59 <tgeeky> mcstar: none of mine are, as far as I know
12:29:39 <mcstar> tgeeky: correction, most of the time i dont see a 'Source' link
12:29:44 <mcstar> and every time i do, its a dead link
12:29:56 <tgeeky> mcstar: hmm. And this is for packages that came with GHC? That's strange
12:30:08 <tgeeky> (that's all I have installed at the moment, as I freshly installed 7.4.2 last night)
12:30:14 <mcstar> tgeeky: whats your distro/
12:30:15 <cwp`> how do i set the compiler so it doesnt compile if there are warnings?
12:30:18 <zzing> merci pour l'option.
12:30:22 <tgeeky> mcstar: windows, but I hope it doesn't matter
12:30:23 <cwp`> and is there a debugger for haskell?
12:30:49 <mcstar> tgeeky: haskell-platform?
12:31:17 <armlesshobo> cwp`: leksah has an ok debugger
12:31:18 <tgeeky> mcstar: nevertheless, I (and perhaps only I) view this is a bug anyhow. The default options for local documentation should be the same as those for Hackage documentation (build the docs always, link the source always)
12:31:23 <tgeeky> mcstar: nope, ghc 7.4.2
12:31:25 <mcstar> i guess the person who packaged ghc for Arch didnt consider it necessary
12:31:27 <armlesshobo> cwp`: but leksah's an IDE
12:32:02 <Wooga> hi, does haskell codebase by any chance provides some kind of run-time modularity support, just like OSGi does for java?
12:32:22 <tgeeky> @hackage Plugin
12:32:22 <lambdabot> http://hackage.haskell.org/package/Plugin
12:32:23 <Wooga> what i need is to load and unload modules of application in run-time withotu affecting whole application to be re-started
12:32:29 <tgeeky> Wooga: ^^
12:32:37 <Wooga> 404
12:32:39 <tgeeky> I think there's a newer attempt at that technique, somewhere
12:32:43 <aristid> @hackage plugin
12:32:43 <lambdabot> http://hackage.haskell.org/package/plugin
12:32:51 <aristid> wtf
12:33:07 <tgeeky> oh, plural
12:33:08 <tgeeky> http://hackage.haskell.org/package/plugins
12:33:09 <aristid> Wooga: http://hackage.haskell.org/package/plugins
12:33:26 <aristid> tgeeky: hah
12:33:27 <tgeeky> Wooga: it's precisely the same system that makes lambdabot work
12:33:30 <cwp`> you people use makefiles to build? or is there some alternative?
12:33:39 <tgeeky> cwp`: you people? that's racist!
12:33:42 <tgeeky> cwp`: shake
12:33:44 <tgeeky> cwp`: buildbot
12:33:48 <Wooga> thanks!
12:33:55 <aristid> Wooga: another possibility would be to split it into multiple processes
12:34:06 <aristid> Wooga: that approach works with any language of course
12:36:56 <cwp`> whats WXC_VERSION?
12:37:03 <S11001001> cwp`: you looking for cabal?
12:37:07 <cwp`> http://www.haskell.org/haskellwiki/WxHaskell/Windows
12:37:08 <pnkbst> tgeeky: race cards don't work for haskellers
12:37:32 <cwp`> S11.. i have it, just wondering if it is for building or for compiling?
12:38:33 <mcstar> cwp`: do you have tab on your keyboard? if so, you porbably can use it to autocomplete S11001001's name
12:38:48 <tgeeky> pnkbst: sure they do, but we only have one kind of card (human) and we all have it, so it's pointless comparing
12:39:29 <tgeeky> except lambdabot and preflex. You've got to watch out for those things
12:39:45 <cwp`> S11001001: i have the tabs
12:39:54 <cwp`> ty
12:41:54 <mcstar> cwp`: building and compiling are synonymous
12:44:01 <mcstar> to those who used both Gtk and wxWidgets, what are the main benefits of the latter? wrt haskell?
12:48:10 <cwp`> what is this WXC_VERSION: 0.90.0.2 ?
12:49:13 <whittle> @hoogle M a -> M b -> M (a,b)
12:49:14 <lambdabot> Warning: Unknown type M
12:49:14 <lambdabot> Data.Generics.Twins gmapAccumT :: Data d => (forall e. Data e => a -> e -> (a, e)) -> a -> d -> (a, d)
12:49:14 <lambdabot> Data.ByteString.Lazy mapAccumL :: (acc -> Word8 -> (acc, Word8)) -> acc -> ByteString -> (acc, ByteString)
12:49:44 <whittle> @hoogle m a -> m b -> m (a,b)
12:49:44 <lambdabot> Data.Sequence zip :: Seq a -> Seq b -> Seq (a, b)
12:49:44 <lambdabot> Prelude zip :: [a] -> [b] -> [(a, b)]
12:49:45 <lambdabot> Data.List zip :: [a] -> [b] -> [(a, b)]
12:51:38 <whittle> @hoogle (Monad m, Functor m, Applicative m) => m a -> m b -> m (a,b)
12:51:38 <lambdabot> Data.Sequence zip :: Seq a -> Seq b -> Seq (a, b)
12:51:38 <lambdabot> Prelude zip :: [a] -> [b] -> [(a, b)]
12:51:39 <lambdabot> Data.List zip :: [a] -> [b] -> [(a, b)]
12:51:49 <c_wraith> ugh.  pbkdf2 package is wrong and slow.  Fixed the part that's wrong, but it's still too slow to be useable.  Time to get out my rewriting-for-performance gloves
12:53:18 <mcstar> cwp`: it is obviously the version number of wxHaskell
12:55:55 <mcstar> c_wraith: is that a trapdoor function?
12:56:42 <c_wraith> mcstar: not instrinsically. It's higher-level than that, making use of lower-level primitives (which should be trap-door functions)
12:56:42 <cwp`> wxhaskell i should get from hackage?
12:57:09 <boku> Hello! Are there any simple solutions of converting Integer to [Word8]? I tried something like this Data.ByteString.Lazy.unpack $ Data.Binary.encode (3 :: Integer) but got [0,0,0,0,3] instead of [3]. And I can't make backward conversation from [3] :: [Word8] into Integer.
12:58:00 <Clint> boku: how do you want it encoded?
12:58:53 <boku> Clint: I want [3] instead of [0,0,0,0,3]
12:59:00 <Clint> so [1,1] means what?
12:59:06 <mcstar> c_wraith: on second thought, is just uses a pseudorandom function, so its just a key expansion algorithm?
12:59:16 <c_wraith> mcstar: yes
12:59:26 <mcstar> c_wraith: i first thought it was some public key encryption but isnt
12:59:34 <geekosaur> [2,1] might be a better example
12:59:38 <Clint> true
12:59:49 <c_wraith> mcstar: in this case, the p is for "password", rather than "public"
12:59:57 <boku> Clint: I think, [1,1] is 257. Am I wrong?
13:00:16 <Clint> you're the one defining the problem
13:00:29 <MilosDj> 256
13:00:36 <MilosDj> 0-255 is one byte
13:00:46 <MilosDj> so 1,1 should be 256
13:00:49 <geekosaur> 256 is either 1,0 or 0,1
13:00:55 <geekosaur> depending on endianness
13:01:06 <cwp`> hmm cabal update seems to have hanged itself
13:01:07 <MilosDj> right
13:01:13 <geekosaur> which is why I proposed 2,1 as the example
13:01:40 <boku> [2,1] == 00000010 00000001
13:01:59 <mcstar> i'd just recurse, and && with the appropriate bitmask
13:02:11 <armlesshobo> &*
13:02:18 <mcstar> :)
13:02:19 <cwp`> you_prefer_this or youPreferThis for function names?
13:02:20 <geekosaur> .&. actually
13:02:20 <mcstar> yes
13:02:23 <armlesshobo> right
13:02:27 <mcstar> yes
13:02:29 <armlesshobo> si
13:02:41 <geekosaur> cwp`, Haskell conventionally uses the latter
13:03:11 <cwp`> i_have_been_told_otherwise
13:03:18 <mcstar> soWhat
13:03:25 <c_wraith> look at the standard library
13:03:31 <c_wraith> it uses only one convention
13:03:32 <cwp`> is this camelCase?
13:03:36 <armlesshobo> this_is_ridiculous
13:03:39 <armlesshobo> thisIsSpart
13:03:39 <armlesshobo> a
13:03:44 <mcstar> _ is ocaml standard
13:04:18 <monochrom> I prefer de Bruijn index
13:04:26 <geekosaur> you can use whichever you want, but the standard libraries use camelCase
13:04:30 <mcstar> not a day passes by wo tha joke
13:04:49 <monochrom> @quote atkey
13:04:49 <lambdabot> No quotes match. My mind is going. I can feel it.
13:05:02 <hpaste> aaaa pasted “aaa” at http://hpaste.org/70239
13:05:40 <mcstar> ^^^ look at what obligatory title/author fields make people do
13:05:42 <DMcGill> informative names and paste
13:06:28 <monochrom> the content of that paste is less meaningful than the title, so all is well
13:06:51 <keseldude> what possessed him to announce it to #haskell?
13:06:53 <mcstar> the info dates back to 2010
13:07:48 <mcstar> hey, where did my files go?
13:08:08 <monochrom> gone with the wind. gone with the time machine
13:08:41 <cwp`> what could be the reason cabal is so slow?
13:09:41 <mcstar> How do you define 'slow'?
13:09:55 <geekosaur> cwp`, I can think of several possibilities but can't suggest any of them without any information
13:10:05 <geekosaur> mcstar: [20 20:00] <cwp`> hmm cabal update seems to have hanged itself
13:10:20 <mcstar> omg
13:10:24 <mcstar> i read that line as:
13:10:32 <mcstar> sems to have changed itself
13:10:59 <mcstar> at that point, i thought, he is on his own
13:11:18 <geekosaur> I'd probably try strace -f to see what it's doing when it hangs
13:11:26 <Cale> cwp`: maybe a network problem?
13:12:11 <geekosaur> if that indicated that it's waiting for network data I'd then use wireshark
13:12:23 <cwp`> i already shut down everything that was downloading
13:13:08 <Cale> I just ran cabal update, and it completed after about 10 seconds
13:13:40 <Cale> and the package list downloaded at ~200 KB/s
13:14:06 <mcstar> ls -l /home/mcstar/.cabal/packages/hackage.haskell.org/00-index.tar.gz
13:14:12 <mcstar> ^^^ changes but slowly
13:14:44 <mcstar> it took more than a minute for me
13:15:34 <mcstar> erm
13:15:47 <mcstar> that command was prefixed with "watch -n1"
13:16:19 <Cale> It's about 4.6 MB
13:16:43 <mcstar> real    1m37.817s
13:16:50 <Cale> -rw-r--r-- 1 cale cale 4628043 2012-06-20 16:12 00-index.tar.gz
13:17:40 <mcstar> Cale: why do you have a 'cale' group?
13:17:53 <Cale> mcstar: beats me
13:17:55 <tgeeky_> mcstar: default to do some for some distros
13:18:11 <c_wraith> yeah, debian-based things all create a group for each user
13:18:18 <c_wraith> I'm not sure *why*
13:18:21 <tgeeky_> if anyone's worthy of a group, it's cale :)
13:18:26 <tgeeky_> c_wraith: historical raisins and solaris
13:18:39 <tgeeky_> or SunOS, back then
13:18:48 <cwp`> so how big is it?
13:18:54 <c_wraith> Or Solaris before that. :)
13:18:56 <cwp`> can you wun cabal so it shows updates?
13:19:46 <Cale> cabal update --verbose=3
13:19:59 <Cale> will show more information, but won't report progress of the download
13:21:22 <cwp`> gets stuck on downloading the index
13:21:24 <Cale> I just ran it in time, and it took 25s of real time
13:21:43 <Cale> to download the index and do whatever processing it did after that stopped
13:21:43 <cwp`> i have slow connection but not this slow
13:22:18 <Cale> How fast are you receiving data?
13:22:30 <cwp`> %WXWIN%\lib\gcc_dll;%WXWIN%;%CABAL_DIR%\wxc-%WXC_VERSION%\%GHC_VERSION%
13:22:35 <cwp`> what is the % ?
13:22:47 <danr> environment variables in windows
13:22:48 <geekosaur> Windows style environment variable substitution
13:22:50 <cwp`> i dont know my connection, i have mobile buter 2GB traffic it is slower
13:23:57 <cwp`> hello
13:24:02 <mcstar> hey
13:24:12 <cwp`> why am i not changing nick when i register
13:24:31 <mcstar>  /nick
13:25:02 <hiptobecubic> tgeeky_, wiped out .cabal and .ghc... trying to install language-c-quote from scratch now
13:26:50 <mcstar> cwp`: btw, there is some resource monitor in windows, where you can check network traffic per process
13:27:35 <geekosaur> there's some built in monitors + the sysinternals stuff
13:28:57 <cwp`> worked now
13:31:44 <hiptobecubic> tgeeky_, worked magically. No idea what was wrong before.
13:34:16 <keep_learning> Hello All
13:34:32 <keep_learning> I am reading this paper http://www.cs.tufts.edu/~nr/pubs/hoopl10.pdf
13:35:10 <keep_learning> in 3.4 graph section ,  it says "If the graph is open on entry, it contains an entry sequence of
13:35:10 <keep_learning> type Block n O C. We could represent this sequence as a value
13:35:10 <keep_learning> of type Maybe (Block n O C)"
13:35:58 <keep_learning> What I know about Maybe is either value is present or absent  ( Maybe Int or Nothing )
13:36:24 <keep_learning> Here I am not able to understand when we will have Nothing value
13:37:03 <rwbarton> presumably when the graph is not "open on entry", whatever that means
13:37:27 <geekosaur> immediately before that is:  an optional entry sequence, a body, and an optional exit sequence.
13:37:40 <geekosaur> Maybe expresses the "optional" in that descrption
13:40:19 <keep_learning> rwbarton, geekosaur Thank you
13:41:56 <cwp`> set env variable ghc 7.0.3 they mean path to ghc.exe right?
13:42:04 <cwp`> GHC_VERSION: 7.0.3 (for our convenience)
13:42:12 <cwp`> http://www.haskell.org/haskellwiki/WxHaskell/Windows
13:44:10 <cwp`> WXCFG: gcc_dll\mswu
13:44:20 <cwp`> ho do u find that out?
13:47:18 <mcstar> well, the one of the points of that paper is to do things statically, encoded into the type system, and not to use things like Maybe
13:48:25 <MilosDj> have some questions about <-
13:48:31 <MilosDj> what is type of <-
13:48:31 <MilosDj> :t (<-) gives an error in ghci
13:48:32 <lambdabot> parse error on input `<-'
13:48:45 <geekosaur> ?  as I read it, it's considering Maybe to *be* the encoding into the type system
13:48:53 <geekosaur> see the description of the exit block
13:49:18 <MilosDj> Within a monad, <- accomplishes the opposite function of return.
13:49:21 <raek> MilosDj: it's a part of the do syntax. it does not have a type
13:49:30 <MilosDj> ok
13:49:32 <MilosDj> var <- someIO
13:49:32 <MilosDj> that var has pure value, can be used in pure f...
13:49:42 <geekosaur> MilosDj, <- doesn't have a type; it's a sort of macro syntax and turns into ->
13:50:03 <geekosaur> x <- m    is    m >>= \x ->
13:50:20 <geekosaur> (note that this is an incomplete expression)
13:50:25 <MilosDj> So,  <- must be used only in monads?
13:50:27 <raek> do var <- someIO; ...  is the same as "someIO >>= (\var -> ...)"
13:50:27 <tgeeky_> hiptobecubic: Good news!
13:50:34 * hackagebot direct-daemonize 3.0 - Library to switch to daemon mode using built-in OS facilities.  http://hackage.haskell.org/package/direct-daemonize-3.0 (IreneKnapp)
13:51:10 <MilosDj> So, <- can ONLY  be used only in monads, right?
13:51:17 <geekosaur> it is only meaningful in do expressions, which have monadic types, yes
13:51:21 <raek> MilosDj: yes
13:51:26 <MilosDj> thank you :)
13:51:30 <raek> hrm
13:51:37 <shachaf> MilosDj: It might seem like geekosaur is being picky about terminology but this is somewhat important.
13:51:41 <raek> list comprehensions use a similar syntax too
13:52:17 <MilosDj> o yes, but in do monad <- it has only one meaning
13:52:22 <geekosaur> they're the same thing under the covers.  special syntax for monadic expressions, and only valid within that syntax, not in general
13:52:33 <MilosDj> but in list compreh, it's different, right?
13:53:04 <geekosaur> it's similar
13:53:12 <raek> well, in the list comprehension case it is not shorthand for (>>=) and return
13:53:16 <shachaf> It's probably more accurate to say that in list comprehensions <- only has one meaning, and in do notation it has lots. :-)
13:53:19 <raek> but you use it in a similar way
13:53:27 <shachaf> raek: Well, it pretty much is.
13:53:28 <geekosaur> raek, you'd be surprised
13:53:53 <avpx> shachaf: Hmm, I don't see how <- in do has more than one meaning
13:54:02 <geekosaur> it's using the definition of (>>=) in the list monad, and in fact recent ghc generalizes list comprehensions to monad comprehensions
13:54:14 <cwp`> damni it
13:54:17 <cwp`> i did this:
13:54:18 <shachaf> geekosaur: As well as really old versions!
13:54:19 <cwp`> WXCFG: gcc_dll\mswu
13:54:28 <cwp`> but cabal says WXCFG: gcc_dll\mswud
13:54:31 <shachaf> avpx: Well, it depends on what you mean by "meaning"!
13:54:31 <cwp`> which is it?
13:54:32 <EvanR_> its not sugar for return
13:54:38 <raek> ah, I asked about list comprehensions and the list monad some time ago
13:54:41 <geekosaur> avpx, in do expressions <- does whatever >>= does; in list comprehensions it can only do what list's >>= does
13:54:50 <avpx> geekosaur: Oh, I see
13:55:06 <avpx> I guess I was saying that the relation of <- to >>= was pretty well-defined
13:55:08 <DMcGill> I have a function of type IO () that prints to (presumably) stdout. What's the easiest way to see what it's printing?
13:55:12 <shachaf> avpx: It is.
13:55:20 <shachaf> avpx: The question is what (>>=) means.
13:55:21 <cwp`> its the path to gcc_dll not just the value?
13:55:22 <avpx> shachaf: Okay, miscommunication then
13:55:56 <EvanR_> DMcGill: a function cant have type IO ()
13:56:23 <EvanR_> functions have type A -> B
13:56:26 <DMcGill> ? What about, say, main?
13:56:32 <EvanR_> main isnt a function
13:56:37 <MilosDj> wow, thanks a lot people :) I copied this chat for later study
13:57:00 <cwp`> main is a...monad?
13:57:01 <geekosaur> DMcGill, I'm not quite sure what youre trying to ask there
13:57:05 <DMcGill> fine, a value of type IO ()
13:57:14 <geekosaur> cwp`, technically it's a constant applicative form
13:57:14 <EvanR_> main is a IO ()
13:57:25 <DMcGill> is there a, say, catch :: IO () -> IO [String]
13:57:39 <geekosaur> various diagnostic things in ghc wil somtimes talk about CAFs
13:57:40 <DMcGill> catch (putStrLn "one") === return [one]
13:57:54 <DMcGill> s/[one]/["one"]
13:58:04 <geekosaur> no, there is no simple way to intercept I/O like that
13:58:08 <EvanR_> DMcGill: youre trying to 'get the stdout out of a IO action'
13:58:19 <EvanR_> you just execute it
13:58:40 <DMcGill> I'm fully aware that you'd have to execute it to find out
13:58:46 <EvanR_> yep
13:59:06 <EvanR_> and use a pipe
13:59:17 <DMcGill> what about hGetContents stdout or something?
13:59:39 <EvanR_> this is crazy
13:59:51 <geekosaur> DMcGill, no
14:00:08 <DMcGill> ok, thanks anyway
14:00:16 <geekosaur> stdout is not a container you can both put stuff in and take stuff out of
14:00:42 <geekosaur> in fact, on many OSes trying to read from it will do something you do not expect
14:01:00 <EvanR_> it should be write only
14:01:38 <EvanR_> like writing to stdin makes no sense
14:01:40 <cwp`> %WXWIN%\lib\gcc_dll;%WXWIN%;%CABAL_DIR%\wxc-%WXC_VERSION%\%GHC_VERSION%
14:01:50 <cwp`> should i put it in the path like that?
14:01:59 <geekosaur> EvanR_, if it's open on a terminal, reading from it will read from the terminal (for historical reasons the tty file descriptors are all read-write, dup()d from the same original fd)
14:02:45 <cwp`> instead of % i put what?
14:02:48 <geekosaur> and on BSDish systems, pipes are bidirectional so if it's a pipe it will actually try to read from something that probably has no idea that it could be writing into its "read end"
14:02:50 <prototrout> DMcGill: it looks like your question was asked here too: http://stackoverflow.com/questions/9447666/catching-hijacking-stdout-in-haskell . Maybe the comments/answers there will help you somehow.
14:02:56 <DMcGill> thanks
14:05:58 <EvanR_> selling tamagochis for BTC
14:07:30 <mcstar> cwp`: %envvar% is substituted to its value, if you defined it, if you set A=1; then set B=%A% results in B being equal to 1
14:14:24 <jedai> DMcGill: You could try to use the io-capture package (though it probably only works on Unix)
14:15:45 <cwp`> damn the wxcfg dlag is wrong somehow
14:16:42 <Franciman> hi all
14:17:07 <prototrout> Hi Franciman.
14:17:14 <cwp`>  %WXWIN%\lib\gcc_dll the file gcc_dll doesnt exist there though...
14:18:10 <Franciman> hey guys I am writing a lexer, and it consists of a loop within of which there is a selection of which function call to get the token
14:18:38 <Franciman> now what do you think about this structure?
14:18:47 <jedai> DMcGill: Or probably rather use the package "silently" which seems to be maintained
14:21:28 <Franciman> and, how can I achieve a O(1) selection of the function to use?
14:26:13 <cwp`> i dont get it
14:26:15 <cwp`> WXCFG: gcc_dll\mswu
14:26:20 <cwp`> is that supposed to exist
14:27:32 <d-snp> hi, how do I make this one statement?: time' <- getCPUTime ; let time = time' / (10^9)
14:27:42 <d-snp> I never use time', is that possible?
14:28:09 <parcs`> with fmap
14:29:07 <cwp`> gcc_dll, where is this supposed to be?
14:29:16 <cwp`> i checked the c++ compiler
14:30:24 <monochrom> time <- fmap (/ (10^9)) getCPUTime
14:30:30 <monochrom> @bots
14:30:30 <lambdabot> :)
14:30:37 <mcstar> it isnt an absolute path, so just set it, and get on with it
14:30:42 <JoeyA> d-snp: fmap (/ ((10::Int)^(9::Int))) getCPUTtime
14:30:42 <monochrom> > fmap (/ (10^9)) [1]
14:30:43 <lambdabot>   [1.0e-9]
14:30:57 <DMcGill> and to make it a little nicer, '(/ (10^9)) <$> getCPUTime'
14:31:35 <cwp`> mcstar it is set as given
14:31:37 <JoeyA> 10^9 defaults to Integer (unless you say "default Int" in your module), making that division extremely inefficient.
14:31:54 <cwp`> but it doesnt exist
14:32:02 <cwp`> is it supposed to be created?
14:32:43 <mcstar> dont worry
14:32:53 <mcstar> go on, and compile the damn thing
14:33:36 <jedai> @type (/)
14:33:37 <lambdabot> forall a. (Fractional a) => a -> a -> a
14:34:40 <hpaste> cpr pasted “wxWidgtets gcc_dll/mswu” at http://hpaste.org/70241
14:34:40 <jedai> JoeyA: Integer isn't an instance of Fractional so 10^9 can't default to Integer...
14:34:56 <cwp`> anyone have a look? ^^
14:35:05 <JoeyA> > (10::Integer)^(9::Integer)
14:35:07 <lambdabot>   1000000000
14:35:15 <JoeyA> oh, fractional
14:35:54 <JoeyA> jedai: You're right.  It defaults to Double -> Double.
14:36:20 <JoeyA> :t (/ (10^9))
14:36:21 <lambdabot> forall a. (Fractional a) => a -> a
14:36:54 <jedai> JoeyA: Well I guess the 9 can default to Integer, I don't know if that's really significant though
14:37:02 <JoeyA> It does.
14:38:05 <jedai> JoeyA: Is the performance difference so big ? Supposing the function is really used so frequently that it has any importance
14:38:59 <mcstar> cwp`: weird, if that dir didnt existed, it supposed to create it
14:39:06 <JoeyA> jedai: I guess not, as long as the 10^9 is only evaluated once.
14:40:53 <mcstar> cwp`: do you have the right permissions?
14:41:07 <cwp`> wouldnt i say if i didnt. im not sure
14:41:22 <cwp`> but yeah hat sounds likely
14:41:33 <mcstar> open the cmd as administrator
14:41:41 <cwp`> how?
14:41:51 <cwp`> got it
14:41:53 <mcstar> i can only guess
14:41:56 <mcstar> i dont do windows
14:42:46 <cwp`> same problem still
14:43:09 <mcstar> well, open the script
14:43:20 <mcstar> copy the failing lines, idk
14:43:25 <mcstar> debug it, have fun
14:45:24 <NemesisD> anyone know how to tell cabal(-dev) ghc options? i have a dependency that won't build without FlexibleInstances
14:47:27 <andares> dmwit: hey, do you know any books on eta-beta equivalence?
14:49:20 <cwp`> great wasted a night on wx
14:50:06 <mcstar> and you give up?
14:50:16 <mcstar> after you wasted a night?
14:50:31 <mcstar> im dont want to be too harsh, but how could you have wased a night?
14:50:40 <mcstar> you basically did nothing so far
14:51:32 <cwp`> GHC_VERSION: 7.0.3 (for our convenience)
14:51:41 <cwp`> i have 7.0.4 could that cause the problem?
14:51:55 <cwp`> ive been sitting with this now for hours
14:51:58 <geekosaur> if you set it to 7.0.3
14:52:05 <mcstar> no
14:52:12 <cwp`> i set 7.0.4
14:52:14 <mcstar> since you havent built wxwidgets yet
14:52:31 <mcstar> haskell hasnt entered the show
14:53:35 <mcstar> cwp`: if you are having trouble with compiling wxwidgets on windows, and not willing to fix it, seek help on approprite forums
14:53:46 <mcstar> (so as to save your time)
14:54:36 <mcstar> or use a binary distribution if thats an option at all
14:57:12 <hpaste> cwp pasted “CreateProcess” at http://hpaste.org/70242
14:57:33 <cwp`> if not exist gcc_mswudll mkdir gcc_mswudll
14:57:33 <cwp`> process_begin:
14:57:37 <cwp`> looks like python
14:59:00 <hpaste> NemesisD pasted “bad interface file” at http://hpaste.org/70243
14:59:11 <NemesisD> could someone help me figure out what's going on there?
15:00:31 <NemesisD> it seems like the version is being omitted?
15:01:20 <cwp`> hmm it said dont use mingw but dos cmd prompt but at another place i had chosen some dos style thing
15:01:30 <cwp`> so i tried in mingw anyway and it seems to work,,,
15:01:49 <cwp`> at least it is spåitting out a million things
15:01:59 <NemesisD> i suspect it may have to specify ghc flags. i have to specify FlexibleInstances to get 2.5.0.0 to work on newer versions of ghc
15:04:13 <geekosaur> NemesisD, my thought is that something has installed template-haskell from a package, which is very bad news because it is part of the compiler and overriding it from outside even with the same version is almost guaranteed to break
15:04:38 <geekosaur> and the versionless vs. versioned error in general means that two conflicting versions of the same package are in scope
15:05:05 <NemesisD> geekosaur: well i may have just F'ed up because i removed template-haskell from my system packages with ghc-pkg unregister
15:05:15 <geekosaur> um.  that would be Bad
15:05:16 <NemesisD> that worked ok but then other stuff failed to compile
15:05:20 <geekosaur> reinstall your compiler
15:05:25 <NemesisD> :[
15:06:46 <geekosaur> remove the one that is *not* from the system packages.  if you then get a version error about template-haskell then you may have apackage that hasn't been tested with ghc 7.4.2 yet and you may need to adjust its dependency
15:08:13 <NemesisD> geekosaur: maybe the better way to do this is i'm trying to figure out how i can depend on different versions of template-haskell depending on compiler version
15:08:44 <NemesisD> my target environment is using ghc 7.0.x, i use the latest, template-haskell-2.5.0.0 won't compile without FlexibleInstances on newer versions of cabal
15:09:11 <geekosaur> I have no idea how to deal with TH dependencies, I'm afraid
15:10:36 <rwbarton> you should not try to compile template-haskell at all but rather change the dependency on it to the version that comes with ghc 7.4 and hope nothing breaks
15:11:49 <monochrom> hmm, is it ok if your project.cabal file allows a wide range of template-haskell versions, and your code uses a lot of #if's to detect and adapt?
15:12:00 <NemesisD> rwbarton: with the old ghc it does. template-haskell > 2.5.0.0 requires extensions to compile that are not enabled in its cabal file
15:12:05 <NemesisD> monochrom: yep. don't care one bit
15:12:19 <rwbarton> i'm saying if you are compiling template-haskell at all under any circumstances you are doing something wrong
15:12:24 <rwbarton> unless you are in the process of installing ghc
15:12:29 <rwbarton> at least, this is my understanding
15:12:32 <NemesisD> rwbarton: cabal dev must compile it must it not?
15:12:56 <cwp`> did wx print all that stuff for you too? it never finishes...
15:12:57 <rwbarton> i haven't used cabal-dev but i assume it doesn't try to rebuild packages that are included with ghc?
15:13:36 <NemesisD> rwbarton: it builds dependencies all local to the project to help with dependency hell
15:13:52 <monochrom> possessing several template-haskell versions can confuse other things
15:14:03 <rwbarton> monochrom, isn't the way to do that to have build-depends that are a disjunction of (ghc == 7.0.* && template-haskell == 2.5.*) || (ghc == 7.2.* && template-haskell == 2.6.*) ...
15:14:12 <NemesisD> monochrom: if i case off of the ghc version i would only possess 1 version no?
15:14:18 <monochrom> (in general, possessing several versions of packages that come with GHC confuses other things)
15:14:18 <rwbarton> or actually, just leave off a version on template-haskell
15:14:32 <rwbarton> NemesisD: but template-haskell should never be considered "local to the project"
15:14:36 <rwbarton> it is part of the compiler
15:14:57 <rwbarton> for instance, i have never done any cabal install --global but template-haskell is globally installed for me as a consequence of having installed ghc
15:15:13 <monochrom> "ghc == blah" means you're now also depending on and statically linking against the GHC API. that's about 80MB
15:15:18 <rwbarton> oh sorry
15:15:22 <rwbarton> base == blah
15:15:29 <NemesisD> rwbarton: i could have sworn i tried this
15:16:13 <NemesisD> basically i could not care less about the version of template-haskell that is installed, i just want to make sure that in my production environment with the old version of ghc that it doesn't try at all to install a version of template-haskell that it can't handle
15:16:14 <monochrom> oh, base will work. but not sure about disjunction. disjunction may work, but flags are even better
15:16:24 <NemesisD> so if that means linking against the one that comes with ghc, right on. thats dandy with me
15:17:18 <NemesisD> i'll try not specifying a template-haskell version
15:17:23 <vraid> out of curiosity, does anyone here have experience in using erlang and haskell for server side programming? I'm interested in the different benefits and downfalls for each language for this purpose
15:19:13 <NemesisD> as a side note. i hope ghc/cabal get to a point where they help me from being stupid and constantly shooting myself in the foot like this
15:20:21 <monochrom> "if flag(waha) build-depends: base==4.3.1.0, template-haskell==2.5.0.0" note the converse semantics: if you have base 4.3.1.0 and template haskell 2.5.0.0, then waha is set to true
15:21:00 <NemesisD> monochrom: would not specifying template-haskell work?
15:21:04 <monochrom> (this is also how in most cases the hackage webpage displays disjunctions)
15:21:55 <monochrom> that depends on context
15:23:02 <rwbarton> not specifying a template-haskell version seems like the natural thing to do to me
15:23:19 <rwbarton> of course if there are actual changes between versions that affect your code, you may need some #if
15:23:41 <NemesisD> rwbarton: nothing that i use directly, just deps
15:24:23 <rwbarton> oh right, it is a dependency of your project that is using TH
15:25:56 <rwbarton> aeson just specifies >= 2.4
15:26:13 <rwbarton> i'm not sure what the initial problem that prompted you to unregister template-haskell was
15:26:16 <`Jake`> can I span a string across multiple lines?
15:26:47 <geekosaur> \ (whitespace including newlines here) \
15:27:15 <`Jake`> I
15:27:18 <`Jake`> 'll try it'
15:27:18 <geekosaur> aka string gaps
15:27:20 <`Jake`> thanks
15:27:21 <rwbarton> > "a\   \b"
15:27:22 <lambdabot>   "ab"
15:27:39 <rwbarton> > "\SO\ \H" -- :)
15:27:40 <lambdabot>   "\SO\&H"
15:27:45 <geekosaur> :p
15:27:54 <rwbarton> my favorite string
15:27:59 <geekosaur> if you want to have actual newlines in the string then you'll need to use something like
15:28:08 <geekosaur> > "x\n\   \y"
15:28:09 <lambdabot>   "x\ny"
15:28:25 <c_wraith> > text "x\ny"
15:28:26 <lambdabot>   x
15:28:27 <lambdabot>  y
15:28:46 <monochrom> > "x\  \n"
15:28:47 <lambdabot>   "xn"
15:28:54 * monochrom is out to confuse you!
15:29:20 <c_wraith> I never did like that syntax
15:29:23 <c_wraith> now I know why
15:29:31 <monochrom> hehehe
15:29:34 <ahkurtz> > "what\ about \n something stupid\like this"
15:29:35 <lambdabot>   <no location info>:
15:29:35 <lambdabot>      lexical error in string/character literal at chara...
15:29:47 <`Jake`> obvious
15:29:50 <rwbarton> the error is the a i guess?
15:29:51 <hpaste> pcavs pasted “Functor instance” at http://hpaste.org/70244
15:30:02 <`Jake`> > "what\ about \n something stupid\li\ke this"
15:30:03 <lambdabot>   <no location info>:
15:30:04 <lambdabot>      lexical error in string/character literal at chara...
15:30:08 <pcavs> Any explanation of the rror I got for this guy: http://hpaste.org/70244 ?
15:30:24 <monochrom> I have long learned that syntax is not for me to like or dislike
15:30:55 <c_wraith> rwbarton: the error is the space after the \
15:31:09 <c_wraith> rwbarton: with the next non-whitespace character not being another \
15:31:21 <rwbarton> well yeah
15:31:26 <rwbarton> > "what\ "
15:31:27 <lambdabot>   <no location info>:
15:31:27 <lambdabot>      lexical error in string/character literal at chara...
15:31:39 <`Jake`> > "what\ \"
15:31:40 <lambdabot>   "what"
15:31:54 <monochrom> "flip (,) e" confuses value level and type level
15:32:34 <monochrom> it's like saying "instance Functor (f + 1)"
15:32:37 <rwbarton> pcavs, the instance head (what comes after Functor) is a type-level thing, so 'flip' is just a type variable here
15:33:20 <rwbarton> which is itself legal i guess but obviously not what you wanted and will cause a subsequent type error
15:34:07 <rwbarton> well
15:34:21 <rwbarton> that saves me another explanation about writing instances for type-level lambdas
15:34:45 <NemesisD> zomg i think that may have worked
15:35:40 * hackagebot pipes-attoparsec-streaming 0.1.0.0 - Streaming parsing in the pipes-core framework with Attoparsec.  http://hackage.haskell.org/package/pipes-attoparsec-streaming-0.1.0.0 (MartinGrabmueller)
15:35:59 <mrBG> is it bad for your eyes to have blac background and white text?
15:36:34 <monochrom> sounds like a great question for optometrists
15:37:05 <mrBG> seriously, wx has been building for 30min now...
15:37:15 <`Jake`> Personally, I think a purple Background with white text is more comfortable
15:44:36 <`Jake`> Is Tail-Recursion also faster than normal recursion or does it just save memory?
15:45:15 <monochrom> neither. see my http://www.vex.net/~trebla/haskell/lazy.xhtml and be disillusioned
15:45:21 <`Jake`> ok
15:48:35 <`Jake`> monochrom: can you tell me what 畢華流 means?
15:48:49 <fragamus> Hey I want to see my code prettified with nice lambda symbols and arrows. How can this be done?
15:49:01 <monochrom> It is the pen-name of a Chinese writer
15:49:09 <`Jake`> ah, i see
15:49:10 <`Jake`> thanks
15:52:39 <Lemmih> fragamus: Squint.
15:54:29 <chrisdone> so who installed the hackage comments script?
15:55:57 <Clint> chrisdone: somebody did the other day
15:56:15 <chrisdone> lol. a single person
15:56:17 <rwbarton> is the starting column for the layout rule determined by number of code points or number of abstract characters?
15:58:01 <chrisdone> Clint: are you clint moore?
15:58:03 <Clint> i am not
15:58:05 <Clint> chrisdone: do you have a working scrobble backend?
15:58:39 <rwbarton> the Report says "Unicode characters in a source program are considered to be of the same, fixed, width as an ASCII character"
15:58:53 <blackdog> chrisdone: Clint Moore is clintm
15:59:18 <chrisdone> Clint: if you mean receiving scrobbles, sure. if you mean /sending/ scrobbles: workin' on it. bit busy this week
15:59:38 <chrisdone> blackdog: cheers
15:59:42 <Clint> chrisdone: how are you storing them?
16:01:01 <chrisdone> Clint: ah, there is no storing; that's left to the user of the library. personally i'll probably store them in a postgresqldb. once i've done the scrobbling part (i.e. the "client"), i'll start broadcasting to last.fm/libre.fm and also storing in a local pgsql db
16:01:30 <fragamus> No pretty print then?
16:01:32 <chrisdone> Clint: why?
16:01:47 <chrisdone> fragamus: talking to me?
16:02:13 <fragamus> No I asked a question earlier
16:02:13 <Clint> chrisdone: because i refuse to run gnu fm on any of my own systems
16:02:33 <fragamus> fragamus: Hey I want to see my code prettified with nice lambda symbols and arrows. How can this be done?
16:02:36 <chrisdone> Clint: is gnu fm what libre.fm uses? i didn't look into that
16:02:42 <Clint> yes
16:02:57 <chrisdone> ah nice. why do you refuse to run that? is it crappy?
16:03:10 <Clint> only because it's in php
16:03:26 <chrisdone> ah, well that's understandable
16:04:30 <chrisdone> Clint: just here: https://github.com/chrisdone/scrobble
16:04:30 <chrisdone> Clint: the source for scrobble-server is here: https://github.com/chrisdone/scrobble/blob/master/src/Server.hs
16:04:30 <chrisdone> Clint: it uses the library. so you can just do the same, but handle the scrobbles however you like
16:04:50 <Clint> yeah, i've seen it, i was just curious as to what you were actually doing
16:04:57 <chrisdone> ah ok
16:07:46 <Clint> pg backend and ws api in yesod could be attractive
16:07:46 <chrisdone> probably need to write some user scripts for youtube and grooveshark scrobbling, if not tweak existing ones
16:08:44 <Clint> i also wanna design a ws method that isn't compatible with last.fm
16:09:07 <chrisdone> "a ws method"?
16:09:17 <Clint> webservices
16:09:26 <chrisdone> go on?
16:09:29 <Clint> http://www.last.fm/api
16:09:53 <Clint> that's the "new" way to scrobble that most clients don't support
16:09:56 <chrisdone> we can make lambda.fm
16:09:59 <Clint> hahaha
16:11:27 <chrisdone> ah, that requires an API account
16:12:21 <Clint> on libre.fm it doesn't
16:13:31 <chrisdone> Clint: but seriously, if you wanna make a reporting function [Listen] -> Statistics and Statistics -> Html in haskell that would be cool
16:13:46 <chrisdone> i kinda want my own anyway, but not sure if i can be bothered writing one at this time
16:14:46 <Clint> chrisdone: db schema comes first
16:15:11 <chrisdone> feel free to design one
16:15:18 <Clint> in my copious free time
16:15:23 <chrisdone> :)
16:15:39 <chrisdone> for the good of the others!
16:15:46 <Clint> but yes, i want one that is attuned to musicbrainz from the get-go
16:15:48 * chrisdone puts hand on chest
16:16:23 <chrisdone> sounds good to me
16:16:53 <ion> Whose?
16:18:23 <pcavs> rwbarton: Okay, so how would I go about defining that properly?
16:18:28 <pcavs> rwbarton: thanks for the reply btw
16:19:03 <chrisdone> ion: if i said 'yours' would you be flattered?
16:19:23 <chrisdone> @vixen say something mildly offensive but ultimately cute
16:19:24 <lambdabot> I believe in the battle-whether it's the battle of a campaign or the battle of this office, which is a continuing battle.
16:19:58 <chrisdone> hey… tom was here
16:20:04 <chrisdone> damn, missed him
16:21:35 <chrisdone> Clint: well let me know if you do anything cool
16:21:36 <chrisdone> ciao!
16:21:39 <ion> I take it a “battle-whether” is a noun? :-P
16:22:06 <DMcGill> I would have thought that battle-weather would be some kind of storm
16:22:28 <chrisdone> that's how i read it. had to do a double take to realise it should be 'battle: whether…'
16:23:23 <chrisdone> if LoTR is anything to go by, battle-weather is very wet
16:23:57 <chrisdone> @quote ruby
16:23:58 <lambdabot> blackdog says:  [About Hubris] I tell the Ruby guys that Haskell will help them speed up their Ruby code and keep their apps going, and I tell Haskell guys that it'll Trojan Horse those poor
16:23:58 <lambdabot> unsuspecting rubyists...
16:24:22 <Twey> Hehe
16:24:39 <Twey> I'm glad blackdog went with ‘Hubris’.  I'm proud of that one.
16:24:57 <blackdog> weirdly enough, i'm giving a talk to the haskellers tonight about how awesome ruby is
16:24:59 <chrisdone> it's a delicious name
16:25:11 <blackdog> Twey: the name actually motivated me to work on it:)
16:25:17 <Twey> ^_^
16:25:27 <jfischoff> blackdog: what features of ruby?
16:25:41 <chrisdone> blackdog: http://treeofmamre.files.wordpress.com/2011/07/dr-evil-and-minion-laughing.png
16:25:44 <blackdog> jfischoff: relentless focus on fast deployment and iteration.
16:25:46 <Twey> chrisdone: Snoyberg made yesodweb.com pretty at last
16:25:57 <Twey> (properly)
16:26:21 <chrisdone> Twey: yeah. i approve
16:26:21 <blackdog> i can have an idea and have a rails stub app up on heroku within about a minute.
16:26:36 <blackdog> there's nothing equivalent for haskell
16:26:43 <jfischoff> totally
16:26:56 <blackdog> although they've just lifted the slug limit to 200mb, so the heroku buildpack i was working on may actually work now...
16:27:01 <tango`> it doesnt matter from where i run cabal right?
16:27:10 <jfischoff> for a quick admin app hobo on heroku is still my fallback
16:27:29 <chrisdone> Twey: behold, our new enemy: http://clckwrks.com/
16:27:36 <d-snp> is this not how you do it?: type Eq k => Timer k = MVar [(k,TimerEntry)]
16:27:43 <Twey> blackdog: What does ‘slug’ mean in this context?
16:27:48 <chrisdone> Twey: actaully that looks nicer than it did last i looked
16:28:06 <Twey> That looks okay to me
16:28:15 <blackdog> Twey: each time you deploy, it pulls down everything you need to compile your app
16:28:21 <blackdog> so here it includes GHC and cabal
16:28:34 <Twey> Ah
16:28:45 <chrisdone> blackdog: ah, i no ur face frum twittar
16:28:48 <chrisdone> :)
16:28:51 <blackdog> horribly wasteful from one perspective, but it's all hosted on S3 and compiling on EC2, so ... *shrug*
16:29:03 <d-snp> hmm I need to do the Eq k => in every function on Timer?
16:29:04 * chrisdone from the heroku topic i put 2-and-2 together
16:29:06 <blackdog> chrisdone: *grin* neckbeards ahoy
16:29:08 <tango`> hold yer thumbs
16:29:13 <tango`> wx is installing
16:29:26 <chrisdone> we neckbeards know our own
16:29:54 <Twey> Haha
16:30:47 <Twey> Goodness
16:30:57 <Twey> blackdog: You do have a rather intimidating neckbeard
16:31:57 <Twey> It may be the I'm-going-to-kill-you-and-eat-your-flesh grin that makes it so
16:32:21 <blackdog> Twey: it does have the amorous serial killer look
16:32:24 <fragamus> fragamus: Hey I want to see my code prettified with nice lambda symbols and arrows. How can this be done?
16:32:27 <blackdog> the beard's a lot bigger onw
16:32:42 <chrisdone> when encountering a beardista in the wild, consult the beard trustworthiness scale: http://4.bp.blogspot.com/_PrZAfbw4uqo/TS_H8MyEdLI/AAAAAAAAA3w/PuES0SjNNy8/s1600/Beards.jpg
16:32:43 * chrisdone checks
16:32:58 <chrisdone> evaluation: Threatening
16:33:11 <vraid> that text is too small
16:33:26 <Twey> Prejudgement justified.
16:33:39 <Twey> blackdog: You have a way to go to beat my friend: http://a3.sphotos.ak.fbcdn.net/hphotos-ak-snc6/254861_190144864367471_3930775_n.jpg
16:34:15 <vraid> i'm somewhere between unkempt beard and patchy beard
16:34:23 <jfischoff> the dreads merge into the beard
16:34:54 <Twey> Yes indeed
16:35:15 <blackdog> Twey: heh, just searched the logs - I think I came up with Hubris independently, but Pete didn't like it so i dismissed it until you suggested it again:)
16:35:18 <blackdog> https://gist.github.com/2962919
16:35:25 <chrisdone> Predator vs Raver
16:35:36 <Twey> blackdog: That makes me feel slightly less special ☹
16:35:55 <blackdog> nah, you pushed me over the top :)
16:36:00 <blackdog> i'm glad i didn't go with oedipus though
16:36:05 <chrisdone> haha
16:36:12 <Twey> I don't think Peter actually expressed an opinion on ‘Hubris’ :þ
16:36:16 <Twey> Haha, yes
16:36:18 <chrisdone> you have more self-control than jinjing
16:36:41 <Twey> You just said ‘pity I can't call it Hubris’
16:36:47 <chrisdone> “i know!”, thought the programmer, naming his web framework, “i'll call it ‘loli’!”
16:37:02 <Twey> Hahaha
16:37:22 <Twey> Sounds like something my friend Shanachan might do
16:37:42 <DMcGill> It doesn't count until it's as widespread as Coq
16:37:47 <Twey> Ha
16:38:04 <chrisdone> does it make me a prude that i considered pronounce that like coke?
16:38:19 <DMcGill> yup, that's exactly wrong
16:38:35 <companion_cube> some people just take huge amount of Coq in their nose
16:38:40 <Twey> Le Coq Sportif is widespread already, though.
16:38:54 <chrisdone> man i haven't heard that brand name for years
16:38:57 <blackdog> Twey: http://twitpic.com/9ypox3
16:39:16 <Twey> chrisdone: You've been spending too much time in Foreign Parts
16:39:19 <DMcGill> wow
16:39:22 <Twey> blackdog: Gracious
16:39:28 <Twey> Less terrifying, more impressive
16:39:53 <blackdog> looking to get it braided eventually. then maybe light firecrackers in it like bluebeard.
16:40:21 <blackdog> it's amazing how much unix people assume you know, with a beard like that
16:42:44 <vraid> does having and unkempt beard help with getting a job or not? I guess it depends on the interviewere, but still; it's something i've always wondered
16:43:29 <zomg> vraid: I don't think there's any question that if you look good, you make a better first impression
16:43:43 <zomg> So depending on the level of unkemptness, I would say it may affect you negatively
16:43:46 <blackdog> vraid: i can't really compare. i've only had it since i started ninjablocks - when i quit, i had about four job offers within the week, but i think that has more to do with the assumption that i'd work 80 hour weeks for a company i didn't own a chunk of.
16:43:56 <chrisdone> blackdog: just to see what life would be like: https://dl.dropbox.com/u/62227452/Internets/602501223.jpg
16:44:26 <blackdog> zomg: on the gripping hand, not seeming to give a damn about whether you get the job is perversely attractive to employers.
16:44:32 <blackdog> "oh, he must have other options" etc.
16:44:55 <blackdog> chrisdone: it took me a second. that's frigging hilarious.
16:44:56 <zomg> "he must be a hobo"
16:44:56 <zomg> ;)
16:45:09 <tango`> sigh wx takes soooooo long
16:45:20 <vraid> blackdog: i'd guess as much..
16:45:21 <blackdog> zomg: it does concentrate the probabilities at the ends a little bit
16:45:39 <blackdog> but if you can show competence quickly...
16:45:41 <vraid> blackdog: what did ninjablocks do?
16:45:43 <zomg> But yeah I'd say it will completely depend on what kind of person is interviewing you
16:45:45 * hackagebot shelly-extra 0.2.2 - shelly features that require extra dependencies  http://hackage.haskell.org/package/shelly-extra-0.2.2 (GregWeber)
16:45:47 * hackagebot shelly 0.11 - shell-like (systems) programming in Haskell  http://hackage.haskell.org/package/shelly-0.11 (GregWeber)
16:45:53 <vraid> i made an earthlike planet generator
16:46:02 <zomg> Big enterprisey thingy going on?  You may want to dress nice
16:46:09 <zomg> Startup? Maybe not so big deal
16:46:33 <blackdog> vraid: internet of things startup. we made a little beaglebone + arduino machine, 3d printed cases etc, and wrote a system in haskell for coordinating them so end-users could run IFTTT style recipes without writing any code
16:46:54 <jfischoff> blackdog:we are you located?
16:47:15 <chrisdone> a big beard does have hobo aspects with a t-shirt, but with a tweet blazer or smoking jacket and a pipe, now there's a whole new level of sophistication
16:47:16 <blackdog> jfischoff: sydney, with a bit of time in SF
16:47:30 <jfischoff> ah sounded SF like
16:47:48 <blackdog> all the engineering was in sydney, we just visited SF for funding, really.
16:48:08 <jfischoff> ah
16:48:10 <vraid> blackdog: i know half of those words :|
16:48:36 <blackdog> IFTTT = If This Then That
16:49:01 <monochrom> I thought it was inverse fourier transform something something
16:49:01 <chrisdone> no else? what is this, IMPURE RECIPIES!?
16:49:19 <blackdog> set up a trigger (like temperature goes over 30 degrees, or someone tweets a link with my name), then do a response (post on facebook, or turn on a lava lamp or something)
16:49:23 <tango`> you can be a transform
16:49:42 <blackdog> chrisdone: it's all fundamentally impure anyway. you can add return () to the other branch if you like:)
16:50:54 <chrisdone> unsafePerformLavaLamp
16:51:13 <monochrom> heh
16:51:54 <blackdog> aw, sadness. heroku still barfs on the buildpack.
16:52:07 <blackdog> " !     Heroku push rejected due to an unrecognized error.
16:52:22 <blackdog> informative!
16:53:30 <chrisdone> even the error messages are in error
16:54:03 <tango`> methods and classes in haskell, didnt think it had those...
16:54:05 <chrisdone> > error (error "can you please help me find my exception, i left it around here somewhere")
16:54:07 <lambdabot>   *Exception: can you please help me find my exception, i left it around here...
16:54:27 <monochrom> from a haskell-cafe post: (someone has quickchecked and hand-proved a statement. and the reply:) "This is impressive because it's false."
16:54:44 <chrisdone> haha
16:54:56 <tango`> if i abort a cabal install, could that be bad?
16:54:58 <monochrom> let me find you a link to gmane
16:55:13 <tango`> or will reinstalling just overwrtie the old stuff no problems
16:55:35 <chrisdone> monochrom: (found it in my gmail)
16:55:47 <monochrom> ok hehehe
16:57:10 <chrisdone> corr blimey. bed time. g'bye
16:57:42 <hpc> tango`: reinstall shouldn't cause bad things
16:58:15 <hpc> and even if it did, you would know right away, from it being INCREDIBLY hard to install in the first place
17:13:24 <`Jake`> monochrom: because of you, I just installed gtk
17:13:56 <kallisti> has there been any attempts to apply stream fusion techniques to other data structures. in particular multi-way trees?
17:23:56 <ewtoombs> Is the identity function already defined somewhere?
17:24:00 <ewtoombs> i.e.
17:24:07 <ewtoombs> > \x->x
17:24:08 <lambdabot>   Overlapping instances for GHC.Show.Show (t -> t)
17:24:09 <lambdabot>    arising from a use of `...
17:24:43 <ewtoombs> > let f \x->x in f 0
17:24:44 <lambdabot>   <no location info>: parse error on input `\'
17:24:54 <ewtoombs> > let f = \x->x in f 0
17:24:56 <lambdabot>   0
17:25:38 <_Vi> How to portably sleep (suspend execution) for N milliseconds (or micro/nano)?
17:26:16 <ben> threadDelay maybe?
17:28:14 <c_wraith> that works so long as "portably" means "on ghc"
17:29:01 <_Vi> OK. At least more portable than System.Posix.Unistd.nanosleep .
17:29:53 <ben> you can probably get close enough between that and System.Win32.Process.sleep, but I'd beheavily biased towards using a thing that's integrated with ghc's runtime
17:33:55 <_Vi> Built N executables (based on the same set of libraries). Each of then is about 3MB big. Is there easy way to either 1. Move away most things to one library; or 2. create one "multi-main" executable (like busybox) which calls read mains with changed getArts output?
17:34:59 <_Vi> s/read/real/
17:36:10 <blackdog> _Vi: yep - create a library with the functions in them, and have your executables depend on that library rather than recompiling that code
17:36:19 <blackdog> then turn on --enable-shared
17:36:45 <blackdog> in a relatively recent cabal, it gives you the ability to have the executables depend on the library you've just defined
17:36:53 <_Vi> "Perhaps you haven't installed the "dyn" libraries for package `text-0.11.2.0'" - As far as I remember enabling fully dynamic more is not easy thing.
17:37:06 <blackdog> urk :( it's doable but fiddly
17:37:19 <_Vi> You both get problems with all dependent libraries and even more size with libraries included.
17:37:23 <blackdog> you have to go through reinstalling with the right flags
17:37:43 <_Vi> I want something like "semi-static" things (without both pains).
17:37:45 <dino-> I'm setting up a new system, incalling xmonad etc. When cabal tries to build X11, it's failing because of missing HsXlib.h  Not sure what to do about it, searching coming up empty.
17:37:49 <dino-> Sound familiar to anyone?
17:38:18 <blackdog> _Vi: what's changed in each case?
17:38:22 <_Vi> blackdog, Is there thing that man override "getArgs" and call other "Main" module's "main"?
17:38:59 <_Vi> blackdog, What case? Means "What is the difference between that executables?"
17:39:02 <blackdog> yes
17:39:07 <ben> withArgs?
17:39:26 <ben> I dunno about getting the other modules' main up in here but welp
17:39:38 <_Vi> blackdog, One reads and sends a thing, other recvs and writes the thing.
17:43:06 <geekosaur> you would need to use something like System.Environment.getProgName and invoke the main from the other modules as appropriate
17:43:32 <_Vi> BTW about "--enable-shared"... How to quickly enable "--enable-shared" for all installed libraries (including the haskell-platform) without manually investigating anything?
17:43:52 <blackdog> _Vi: if you find out, please let me know.
17:44:19 <_Vi> blackdog, About "busyboxish multi-main" or about "quickly prepare shared build environment"?
17:44:46 <geekosaur> main = getProgName >>= \c -> case c of { "programA" -> ProgramA.main; "programB" -> ProgramB.main; _ -> error $ "Unknown program: " ++ show c }
17:45:15 <blackdog> _Vi: preparing the shared environment
17:46:19 <_Vi> geekosaur, I'll prefer getting the first command-line argument from "getArgs" and using it as program name (stripping it from "getArgs" for the slave main).
17:46:44 <geekosaur> you can;t override getArgs that way
17:48:01 <geekosaur> I'm sure you prefer it, but I'm also quite sure there is no mechanism to strip what System.Environment.getArgs returns.  (you could edit the other "main"s to use a replacement getArgs, though)
17:48:14 <_Vi> Can "Main" module import other "Main" module from other file?
17:48:44 <_Vi> (looks like ghc provides executable only when module is "Main")
17:49:17 <geekosaur> you can only have one module with a given name.  you can force ghc to use a different module name than Main for the real main module, but you wouldn't be able to have multiple modules all claiming tobe "module Main where..."
17:51:51 <_Vi> There are multiple files like "example_send.hs", "example_recv.hs" all with "module Main where". How to tie them to one "multi-main" executable (without breaking stand-alone mode or introducing additional modules)?
17:52:12 <geekosaur> you don't
17:59:54 <_Vi> How to avoid naming the module "Main" but still tell ghc to link executable when called like "ghc MyFile.hs"?
18:00:46 <hpc> --main-is
18:00:56 <hpc> er
18:00:59 <hpc> -main-is
18:01:55 <_Vi> Can I write it inside the source file itself?
18:04:35 <geekosaur> my guess is not, that it's needed at link time instead of compile time so the OPTIONS_GHC pragma would be ineffective
18:05:22 <hpc> you can try
18:05:35 <hpc> and if it works, don't expect it to continue working across versions ;)
18:06:58 <_Vi> {-# OPTIONS_GHC -main-is ThisModule #-} -- does not work
18:07:37 <_Vi> (Still thinking how to have the thing both stand-alone example and a module for "multi-main")
18:08:07 <geekosaur> note that if it did work, it would apply to both those cases
18:08:13 <geekosaur> so it wouldn't be a solution anyway
18:08:58 <geekosaur> I think the way this is usually done is that the standalone cases require -main-is and the combined one's main is module Main
18:11:58 <_Vi> geekosaur, Doing this way. (Thinking about users that does not know about "-main-is" like me N hour ago)
18:12:34 <favonia> Hi, I have a question about Safe Haskell & CPP: I wrote "#if __GLASGOW_HASKELL__ >= 702 import Foreign.Safe #else import Foreign #endif" but GHC 7.4 still complains about safety of Foreign. Any workaround?
18:12:55 <dino-> Aha, figured it out. Pesky missing libxrandr was causing configure to fail. Couldn't see it until I did cabal unpack and configure -v3
18:13:09 <dino-> (this was failure to cabal install X11)
18:13:13 <hpc> favonia: if you change it to just import Foreign.Safe, does it still complain?
18:13:45 <favonia> hpc: no, but Travis-ci still uses old GHC...
18:15:44 <hpc> you might need >= 7002
18:16:16 <dino-> Hey shapr
18:16:18 <hpc> i expect 702 would cause problems similar to 6.12.1 < 6.8.1
18:16:37 <hpc> or 6.12.1 > 7.0.4, depending on how you count it
18:17:32 <favonia> hpc: as far as I understand GHC version x.yy.z is encoded as xyy. that is, 702 for 7.2.x
18:18:48 <hpc> ah
18:18:51 <monochrom> yes that's correct
18:18:55 <hpc> oh gotcha
18:19:54 <favonia> I guess the problem is that GHC checks safety before preprocessing. not sure if preprocessing will breaks any safety properties... anyway I'll be satisfied with a workaround. in neear future I can drop this conditional import
18:22:15 <parcs`> is there pragma or something to automatically set an RTS flag when running an executable?
18:22:28 <parcs`> my memory says there is-
18:23:42 <favonia> parcs`: does OPTIONS_GHC help?
18:23:57 <hpc> parcs`: don't think so
18:23:58 <parcs`> don't think so
18:24:01 <parcs`> :)
18:24:14 * parcs` psychic
18:24:25 <geekosaur> --with-rtsopts=...
18:24:35 <geekosaur> link time option, probably
18:24:41 <geekosaur> (so no OPTIONS_GHC)
18:25:09 <hpc> geekosaur: it's not in the manpage :(
18:25:50 * hackagebot diagrams-svg 0.3.7 - SVG backend for diagrams drawing EDSL.  http://hackage.haskell.org/package/diagrams-svg-0.3.7 (DeepakJois)
18:26:03 <hpc> they should start worrying about getting all the flags recorded for man, so ghc-man-completion shows as much as it can
18:26:07 <geekosaur> http://www.haskell.org/ghc/docs/latest/html/users_guide/runtime-control.html#rts-opts-compile-time
18:26:13 <geekosaur> and it's -with-rtsopts
18:26:17 <zzo38> I think the category (->) has Zero as initial object and () as final object, while (Kleisli Maybe) has Zero as both initial and final, and that (Kleisli IO) has no final object at all. In (Kleisli Finalize) all objects are final.
18:26:24 <geekosaur> wish ghc would decide which style of options it uses
18:26:55 <hpc> geekosaur: it's single dash, except for the ones that change mode of operation
18:27:07 <hpc> --interactive, --supported-extensions, etc
18:27:44 <hpc> so if you ever call ghc with more than one --option, ur doin it worang
18:29:53 <nexion> is there something that can keep a list of packages my project uses and install them all at once? I suspect my manual use of cabal is not optimal
18:29:56 <zzo38> Is this correct?
18:30:21 <geekosaur> nexion: cabal-dev?
18:30:23 <blackdog> nexion: cabal-meta + cabal-src
18:30:28 <geekosaur> ah, ok
18:30:40 <blackdog> oh, hang on. do you have a cabal file for your project itself?
18:30:46 <blackdog> that would be the first step:)
18:30:47 <nexion> not yet
18:30:54 <blackdog> do that:)
18:31:07 <nexion> the file lists the packages used and their versions, right?
18:31:11 <blackdog> yep.
18:31:18 <nexion> this is starting to sound awesome
18:32:55 <nexion> so if I have MyProject.cabal at the root of my project folder, how could I make cabal download the missing deps?
18:33:17 <donri> nexion: cabal install
18:34:09 <blackdog> for extra credit, cabal-dev install - that way, all your dependencies get vendored into the local folder, which makes it less likely that you'll break your cabal installation.
18:34:10 <monochrom> also, cabal install --only-dependencies
18:34:15 <blackdog> (this does happen sometimes, sadly.)
18:38:29 <favonia> hpc: I filed a GHC feature request instead :P
18:38:41 <nexion> if the deps are saved to a local folder, I assume I'll need to point ghc to it somehow?
19:00:51 * hackagebot subtitleParser 0.1.1 - A parser for .srt and .sub files  http://hackage.haskell.org/package/subtitleParser-0.1.1 (RubenAstudillo)
19:05:47 * applicative thinks this new ' -fdefer-type-errors ' is really alarming
19:05:57 <nexion> so I've read that cabal is not a package manager, but I'd like to use it as one.. is there a special way I need to structure my cabal file to tell cabal not to try building the project, but rather ensure that the build-deps are all downloaded?
19:06:40 <applicative> --only-deps or whatever
19:07:53 <applicative>  cabal install  --only-dependencies doesn;t do what you want?
19:09:26 <nexion> it should.. I'm just running into another issue with some broken packages
19:09:44 <nexion> I think I need to wipe them all and start fresh
19:10:16 <nexion> is that easy to do?
19:10:29 <nexion> I'm not sure where they are stored or what tools I can use to achieve that
19:10:33 <Clint> i'm a big fan of rm -r ~/.ghc ~/.cabal
19:10:47 <nexion> that sounds good to me
19:14:04 <monochrom> my http://www.vex.net/~trebla/haskell/sicp.xhtml completely describes what you need to know
19:15:32 <kallisti> any recommendations for a library to write CGI scripts?
19:15:40 <kallisti> I know there's cgi of course but is there anything higher level that might be worth a look?
19:15:44 <parcs`> applicative: why?
19:16:50 <monochrom> yay, hwn!
19:18:02 <nexion> applicative & Clint: that worked perfectly, thanks :)
19:18:11 <blackdog> Clint: currently preparing a talk about what a colossal (yet entirely necessary) ball-ache Cabal is :)
19:22:00 * applicative has always considered cabal a miracle.  but maybe that's consistent with what blackdog is saying
19:22:38 <applicative> parcs`: why what?
19:22:45 <blackdog> applicative: it's enabled so many things, but it's still so far short
19:22:58 <Clint> blackdog: for what?
19:23:06 <hotaru2k3> apparently popCount in Data.Bits doesn't work on Integer, but does on Int... that was a pain to track down
19:23:13 <blackdog> Clint: using haskell in a startup
19:24:25 * applicative concedes he isn't running a startup :)
19:24:37 <Clint> you're giving a talk at a startup?
19:24:48 <blackdog> one of the big problems as i see it is that it's really focused on providing libraries
19:24:49 <Cale> Cabal can be annoying, but I think it's still a lot less annoying than most of the available alternatives.
19:25:07 <blackdog> Cale: yes. i'm comparing to equivalent systems in other languages that don't break quite so often.
19:25:17 <applicative> what other focus is needed?
19:25:33 <blackdog> applicative: well, i was focused on writing apps that run on servers
19:25:51 <blackdog> in that context, i want to freeze the versions i've used
19:26:02 <blackdog> and push that to a build server that can compile a build artifact for me
19:26:17 <blackdog> in Ruby, you get a Gemfile which says what libs you're willing to use
19:26:31 <blackdog> and then a Gemfile.lock is created which specifies the exact revs you've tested with
19:26:38 <blackdog> that functionality is missing
19:26:46 <blackdog> Clint: no, i'm giving a talk about using haskell at a startup.
19:27:05 <blackdog> in the ruby world, there are far more app programmers than library programmers, if the distinction makes sense
19:27:29 <applicative> yes
19:28:18 <applicative> but cabal or ghc-pkg knows what you just built it with
19:28:58 <blackdog> yes. but i might be compiling and testing on my local machine. i want to be able to freeze that and send the spec to the build server, which then pushes to staging/prod
19:29:48 <blackdog> you don't face the problem with ruby because you're not compiling, so you don't have to worry about architecture or available libraries etc
19:30:43 <applicative> ah that I see.  But how could you infer subtleties about what would be needed on a different architecture etc
19:31:16 <blackdog> applicative: sorry, i don't understand the question.
19:31:27 <blackdog> in effect, it's like compiling on the server
19:31:37 <blackdog> i could do that with haskell, but i really don't want to
19:32:00 <Clint> conversely, .debs are great for that
19:32:06 <applicative> I'm thinking obviously cabal can see, this exact combination works ... on my machine
19:33:37 <raydlor> im having some issues creating a hoogle database
19:34:03 <blackdog> Clint: doesn't work so well for something like heroku, where you don't get root.
19:34:25 <blackdog> the argument is that a PAAS is really nice in certain ways - you have a limited number of ways to control it, and it sort of keeps you honest
19:34:49 <blackdog> no hacking on the server, no fudging with it till it works - means that it's very easy to spin up new servers quickly if you need to.
19:34:55 <raydlor> i've linked gzip, tar, and wget to my system path and, in general, the terminal is recognizing them. however, when I try 'hoogle data', it doesn't recognize gzip as a command
19:38:59 <applicative> raydlor: is it downloading the data, which I guess is the default
19:44:09 <applicative> ah, I see this is a special windows only error raydlor
19:44:57 <raydlor> ah, is there any workaround?
19:45:27 <applicative> can you do things  like which gzip or which tar or something to test for its availability.  or  in ghci import System.Directory and then
19:45:48 <applicative> findExecutable "gzip" or "gzip.exe"
19:46:36 <applicative> the latter is the failure that triggers the error
19:49:01 <raydlor> yep, it returns 'Nothing' in ghci
19:50:47 <applicative> hm, so there must be some curiosity about setting the path?
19:51:09 --- mode: holmes.freenode.net set +o ChanServ
19:52:16 <raydlor> im running on windows atm and i've included the whole gnuwin32 library to the system path. likewise, it's recognizing the commands directly from the terminal. just not when im calling hoogle. do i need to specify the path anywhere besides on the OS level?
19:53:39 <applicative> thats what i'm wondering
19:53:47 <applicative> it looks like all it needs is the same thing you would need to use gzip wget et all in the console yourself , it just does system $ "wget " ++ url ++ " --output-document=" ++ fil
19:54:12 <applicative> which is basically typing in the terminal....
19:55:07 <raydlor> looks like the unix terminal to me
19:55:18 <raydlor> maybe there is some compatibility issue considering im in windows?
19:55:35 <raydlor> specifically dealing with terminal format maybe?
19:55:48 <geekosaur> if you're in a "bash" then I'm not ure its path maps very well to the Windows %PATH%
19:55:58 <geekosaur> might need to set both
19:56:17 <applicative> the author ndm is one of the haskell-windows masters though
19:57:30 <raydlor> im not using any other shell
20:01:19 <applicative> maybe he is naively presupposing some particular shell setup? the whole  thing is very windows aware from the look of it
20:05:57 <applicative> in any case raydlor you should sign on to this http://code.google.com/p/ndmitchell/issues/detail?id=534&sort=-id&colspec=ID%20Status%20Proj%20Summary%20Priority%20Stars
20:10:23 <applicative> System.Environment  getEnvironment of getEnv "PATH" will tell you what ghci at least is thinking is path.
20:12:44 <rwbarton> pcavs: did you ever get an answer
20:14:00 <raydlor> and the paths ghci recognizes coincides with my OS, so it should see it. hmm
20:15:53 * hackagebot vector-clock 0.1.2 - Vector clocks for versioning message flows  http://hackage.haskell.org/package/vector-clock-0.1.2 (AlexandruScvortov)
20:19:05 <edwardk> :t \xs -> toList xs >>= toList >=> toList
20:19:06 <lambdabot> Not in scope: `toList'
20:19:06 <lambdabot>     Precedence parsing error
20:19:06 <lambdabot>         cannot mix `>>=' [infixl 1] and `>=>' [infixr 1] in the same infix expression
20:19:11 <edwardk> bah
20:19:20 <edwardk> :t \xs -> toList >=> toList =<< toList
20:19:21 <lambdabot> Not in scope: `toList'
20:19:21 <lambdabot> Not in scope: `toList'
20:19:21 <lambdabot> Not in scope: `toList'
20:19:32 <edwardk> :t let toList = Data.Foldable.toList in \xs -> toList >=> toList =<< toList
20:19:33 <lambdabot>     Couldn't match expected type `b -> [c]' against inferred type `[a]'
20:19:33 <lambdabot>     In the first argument of `(=<<)', namely `toList'
20:19:33 <lambdabot>     In the second argument of `(>=>)', namely `toList =<< toList'
20:19:34 <blackdog> i heard you the first time
20:20:18 <edwardk> :t let toList = Data.Foldable.toList in \xs -> (toList <=< toList) =<< toList xs
20:20:19 <lambdabot> forall (t :: * -> *) b (t1 :: * -> *) (t2 :: * -> *). (Data.Foldable.Foldable t, Data.Foldable.Foldable t1, Data.Foldable.Foldable t2) => t2 (t1 (t b)) -> [b]
20:20:44 <edwardk> :t let toList = Data.Foldable.toList in \xs -> toList xs >>= (toList >=> toList)
20:20:45 <lambdabot> forall (t :: * -> *) (t1 :: * -> *) (t2 :: * -> *) b. (Data.Foldable.Foldable t, Data.Foldable.Foldable t1, Data.Foldable.Foldable t2) => t (t1 (t2 b)) -> [b]
20:20:56 <edwardk> oh, well. manual parens it is
20:25:57 <rwbarton> edwardk, do you remember when we were fooling around with a kind-polymorphic functor class
20:26:03 <edwardk> yeah
20:26:12 <rwbarton> did you ever package that stuff up?
20:26:15 <edwardk> it was waiting on usable kind signatures
20:26:25 <rwbarton> hmm
20:26:57 <edwardk> i think we have them in 7.4.2 or HEAD now but i haven't installed either yet
20:27:05 <rwbarton> usable in what respect
20:27:21 <edwardk> well, class Foo (a : b) didn't work in 7.4.1
20:27:39 <edwardk> you couldn't _explicitly_ name polymorphic kind signatures
20:27:53 <edwardk> which breaks down when you go to do some more complicated examples
20:28:08 <edwardk> like product and sum categories you can do, but you can't do much with them as a result
20:28:23 <edwardk> actually product categories for constrained categories are still really hard even with them
20:28:28 <rwbarton> but you could make a kind-polymorphic type family with some weird implicit tricks right
20:28:41 <edwardk> not and get through to the examples i wanted
20:29:01 <rwbarton> for product categories perhaps not, yeah
20:29:07 <edwardk> you simply couldn't make a type family result be polymorphic by any means. you can make it by any concrete kind
20:29:49 <edwardk> part of it is that the type family defaults the kind of the result because of the sugar for using () and (,) for constraints as well as normal unit/products
20:30:09 <rwbarton> anyways it just crossed my mind because of that reddit post
20:30:14 <edwardk> which post?
20:30:18 <edwardk> the HFunctor one?
20:30:21 <rwbarton> yeah
20:30:23 <edwardk> yeah
20:30:33 <edwardk> i'd like to get something put together that doesn't suck soon =)
20:30:50 <edwardk> just kind of torn between releasing now or waiting for a platform release where polykinds are actually supported
20:30:50 <rwbarton> i haven't even gotten around to installing 7.4 yet, i should do that now that it has been released
20:31:25 <edwardk> well, 7.4.1 which is in the new platform doesn't do it, you need at least 7.4.2 and probably head to get anything remotely stable in its support for these
20:33:53 <applicative> @quote kulin
20:33:53 <lambdabot> kulin says: man, i am loving this existential quantification, i feel like now i will use it incorrectly to solve every problem for sure
20:37:18 <moebius_eye> @randomquote
20:37:18 <lambdabot> Unknown command, try @list
20:37:47 <moebius_eye> lulz
20:38:02 <moebius_eye> @wuote
20:38:02 <lambdabot> kilimanjaro says: the bad kind of laziness is "so they just invent an equivalance class of monotonic continuous functions that `represent' that partial order. but they haven't taken a shower in like
20:38:02 <lambdabot> 10 days!"
20:41:36 <pcavs> rwbarton: sorry to play freenode tag, but no. What would be the proper way to write a Functor for instead of ( (,) e) for (flip (,) e) ?
20:41:47 <pcavs> How would I need to declare that type?
20:44:14 <rwbarton> pcavs, you can't
20:44:21 <rwbarton> you need to use a newtype
20:44:36 <applicative> pcavs: call it Flip
20:46:55 <applicative> hm, ghc-7.5 base exports a *type* called Kind , somewhat mysteriously
20:55:58 <pcavs> rwbarton: k
21:01:18 <pcavs> but why not? I mean if I define a data Flip b a = Flip (a,b) I can define a functor on that easily. I guess I'm thinking that "," is special, when it's not...
21:01:39 <pcavs> Just trying to work my way through typeclassopedia and the exercises.
21:08:25 <edwardk> poll: if i removed the Extend superclass of Comonad, would people be happier with it?
21:09:20 <edwardk> i can keep it around, just move it into semigroupoids, and it'd remove a number of semigroups constraints on existing Comonads
21:18:50 <james-ubc> can somone explain what's the diffrence between <$> and <*>
21:19:58 <monochrom> they are... different...
21:20:43 <james-ubc> mmmmmmhmmm
21:20:49 <coppro> !src <$>
21:20:53 <coppro> `src <
21:20:58 <coppro> darn it
21:21:02 <coppro> :src <$>
21:21:04 <monochrom> you write like "(++) <$> getLine <*> getLine" and not "(++) <*> getLine <$> getLine", that's the difference I guess
21:21:44 <james-ubc> >src <$>
21:21:47 <james-ubc> src <$>
21:22:20 <fragamus> hey I need a Control.Arrow.third
21:22:25 <fragamus> how do I get one
21:23:27 <geekosaur> not sure it has the source to Applicative
21:23:32 <geekosaur> @src <$>
21:23:33 <lambdabot> f <$> a = fmap f a
21:23:40 <geekosaur> @src <*>
21:23:40 <lambdabot> Source not found. Are you on drugs?
21:23:46 <geekosaur> part of it...
21:23:54 <james-ubc> lol
21:24:55 <geekosaur> so f <*> a is pure f <$> a
21:25:19 <geekosaur> if I understand correctly
21:26:29 <td123> isn't it the other way around?
21:26:49 <td123> f <$> a and pure f <*> a ?
21:27:49 <geekosaur> hm, yes
21:27:57 <geekosaur> read the relevant law backwards
21:27:59 <geekosaur> fmap f x = pure f <*> x
21:37:17 <mcnster> hi :) i'm having some problem grasping the nuances of "dfs" in Data.Graph....
21:38:10 <moebius_eye> Anyone wanna watch some miazaki movies? http://acestream.com/s.php?u=Rednek_bs
21:38:24 <mcnster> ... specifically, the dfs returns a truncated tree where i *know* there to be further nodes....
21:38:45 <mcnster> ... is there some magic i'm missing?
21:40:40 <mcnster> 826 ppl sleeping... sigh
21:44:36 <mcnster> oh well, i guess i'll back to Data.Graph.Inductive....
21:45:53 <geekosaur> it's often quiet in here this time of day/night.  (sorry, I can't help with Data.Graph)
21:46:19 <lispy> you need ivan
21:46:50 <lispy> preflex: seen ivanm
21:46:50 <preflex>  ivanm was last seen on #haskell 44 days, 23 hours, 23 minutes and 2 seconds ago, saying: embed lua or some other language (I believe there's either a lua implementation or bindings to one on Hackage)
21:59:48 <edwardk> mcnster: Data.Graph is not good when you have a huge tree
22:00:13 <edwardk> mcnster: i had to replace its use inside of 'ad' for reverse mode automatic differentiation because for non-toy problems it would just crap out
22:00:33 <edwardk> i say i had to, but really acowley did all the hard work
22:06:28 <flebron> This is likely done twice to death, but could someone explain to me what the monomorphism restriction is, and why "let p = print" makes p :: () -> IO ()? You can assume mathematical knowledge - I'm interested in what morphism has to be mono as well :p
22:07:06 <james-ubc> for gloss, is there a what is the diffrence between IO and Pure?
22:08:24 <Catnaroek> flebron: Me thinks it is more or less like this - If the left hand side of a definition does not include function arguments, then the definition must not be polymorphic.
22:08:38 <Catnaroek> then the defined identifier must not be polymorphic*
22:09:20 <Catnaroek> f x = blablabla -- f can be polymorphic
22:09:22 <flebron> Well, how come I can say "let p = map", and p has the correct type, but not print?
22:09:27 <Catnaroek> f = \x -> blablabla -- f must be monomorphic
22:09:55 <Catnaroek> flebron: A concrete example?
22:09:58 <sepp2k> flebron: You can't.
22:10:08 <flebron> I… just did :s
22:10:16 <flebron> Prelude> let p = map
22:10:17 <flebron> Prelude> :t p
22:10:17 <flebron> p :: (a -> b) -> [a] -> [b]
22:10:39 <flebron> Same if let p = \x -> map x
22:10:59 <Catnaroek> flebron: Try doing it in a Haskell source code file and importing it from ghci.
22:11:15 <flebron> Oh, GHCi magic maybe.
22:11:36 <Catnaroek> That being said, I hate the monomorphic restriction, so I always use {-# LANGUAGE NoMonomorphismRestriction #-}.
22:11:43 <Catnaroek> monomorphism*
22:12:09 <Catnaroek> Although I am not sure whether you can avoid it when using Haskell implementations other than GHC.
22:12:18 <flebron> If I write "p = map" in a .hs and ghci the .hs, I get :t p is correct.
22:12:34 <liyang> It's a restriction in the type inference. If you give a type signature (as you should), all is fine.
22:12:52 <flebron> But "s = print" fails.
22:15:07 <flebron> Also, if it's not polymorphic…. what type does it have? ()?
22:15:28 <flebron> Like, if id isn't polymorphic, what's its type?
22:16:42 <Catnaroek> flebron: IIRC, if it can default to either Integer or Double, it does.
22:16:56 <Catnaroek> flebron: Otherwise, you get an error if you do not explicitly annotate the type.
22:16:59 <tgeeky> Catnaroek: Num or String
22:17:06 <Catnaroek> Oooooooh.
22:17:07 <Catnaroek> That.
22:17:15 <flebron> So why does "p = map\ni = id" work?
22:17:15 <Catnaroek> flebron: What tgeeky said.
22:19:04 <Catnaroek> @hoogle uncurry
22:19:05 <lambdabot> Prelude uncurry :: (a -> b -> c) -> ((a, b) -> c)
22:19:05 <lambdabot> Data.Tuple uncurry :: (a -> b -> c) -> ((a, b) -> c)
22:21:36 <tgeeky> Catnaroek: technically I think it's Num or IsString. http://www.haskell.org/ghc/docs/7.4.2/html/users_guide/type-class-extensions.html#overloaded-strings <-- is where I learned about it
22:24:21 <Catnaroek> tgeeky: :O In any case, I prefer always using -XNoMonomorphismRestriction, which is requires me to memorize less arbitrary rules. :)
22:34:30 <zalzane> should i learn haskell or common lisp
22:35:11 <MostAwesomeDude> zalzane: Yes.
22:35:26 <zalzane> thank you
22:35:54 <wreckimnaked> well
22:36:05 <wreckimnaked> what's your goal on learning one of those/
22:36:21 <frankbro> learning a useless language
22:36:22 <frankbro> (づ｡◕ ‿‿◕｡)づ
22:36:23 <zalzane> theres this guy in a video game dev channel
22:36:32 <zalzane> he thinks c++ is the best compiled language
22:36:39 <zalzane> i have to prove him wrong
22:36:42 <zalzane> shake his ideology at its  core
22:36:53 <wreckimnaked> erlang
22:36:58 <zalzane> cool thanks
22:37:34 <gienah> its kind of obvious that erlang is not very well suite to video games :-/
22:38:08 <gienah> lisp has what sounds like a good book on the subject (Land of Lisp)
22:38:16 <zalzane> yeah i got land of lisp
22:38:25 <zalzane> been waiting for a slow day to blow  through it
22:39:11 <gienah> there are some video games on hackage
22:39:33 <wreckimnaked> there are some opengl and sdl bindings for erlang, you could always give it a shot
22:40:07 <zalzane> yeah i just need to make a small game
22:40:41 <zalzane> i was thinking one where youre richard stallman and you have to shoot the freedom-destroyers (msft, apple, etc) logos with gnu bullets
22:41:01 <zalzane> background music would be him droning about freedom or something
22:41:08 <gienah> steel bank common lisp and the glasgow haskell compiler can both generate fast compiled code, lisp and haskell are very powerful programming languages which would help with implementing games
22:41:40 <wreckimnaked> you could add vim bindings for some irony
22:41:51 <zalzane> irony is good
22:42:05 <zalzane> this will be for a small video game dev competition thats open source
22:42:15 <wreckimnaked> nice
22:42:38 <zalzane> yeah
22:42:43 <zalzane> so max irony and  trolling are preferable
22:42:56 <nsxt> zalzane: is eric s raymond going to be an unlockable character?
22:43:05 <zalzane> thats a good idea
22:51:29 <edwardk> roconnor_: around?
22:51:36 <edwardk> preflex: xseen roconnor_
22:51:36 <preflex>  roconnor_ was last seen on freenode/#haskell-blah 11 hours, 31 minutes and 42 seconds ago, saying: does go have sum types?
22:51:42 <edwardk> probably not then
22:51:43 <drdo> zalzane: You should totally have a halo as a power-up
22:51:52 <zalzane> why a halo?
22:52:14 <drdo> saint ignucius
22:52:28 <zalzane> oh haha
22:52:45 <zalzane>  yeah i gotta find lots of references to stick in
23:09:58 <james-ubc> how do i turn nonomporhism off?
23:11:31 * geekosaur is not sure if that's a double negative or not
23:11:39 <geekosaur> also, in what context?  ghci?  compiler?
23:12:53 <aistis> .
23:14:15 <geekosaur>  :set -XNoMonomorphismRestriction / {-# LANGUAGE NoMonomorphismRestriction #-} ; remove the "No" to turn it back on
23:20:59 * hackagebot theta-functions 1.0.1 - Theta-functions implemented as trigonometric series  http://hackage.haskell.org/package/theta-functions-1.0.1 (MarkSafronov)
23:30:31 <zzo38> The uninhabited type is a zero-object in (Kleisli Maybe), isn't it?
23:32:36 <zzo38> Since it is both initial and final
23:39:03 <teaurchin> how can I use a derived show instance for some constructors but use my own for others in the same data type?
23:39:18 <james-ubc> ehh is there any way to add sound into a game biult with gloss?
23:39:59 <geekosaur> teaurchin, you can't; deriving is all or nothing
23:40:49 <zzo38> Perhaps write a Template Haskell code which allows such options to be set
23:41:30 <teaurchin> geekosaur: is there a function exposed somewhere so that I can easily call on the constructors where I want the derived instance?
23:43:56 <geekosaur> not that I'm aware of
23:44:44 <mgsloan> teaurchin: this is a bit hacky, but you could use deriving on the data type
23:44:44 <mgsloan> and then wrap it in a newtype
23:44:44 <mgsloan> and write an instance for show that specializes some of the constructors
23:46:22 <mgsloan> teaurchin: This isn't easily, but you could modify this to give you what you're asking for: http://hackage.haskell.org/packages/archive/derive/2.5.8/doc/html/Data-Derive-Show.html
23:46:50 <teaurchin> @type gshow
23:46:51 <lambdabot> forall a. (Data a) => a -> String
23:49:12 <teaurchin> a cleaner solution would be to write a variant of gshow that matches up with haskell's derived show (currently it does not)
23:49:13 <james-ubc> is there any haskell package that will let me just play a sound file,
23:49:51 <teaurchin> > (\x -> (gshow x, show x)) (1, [1,2,3])
23:49:52 <lambdabot>   ("((,) (1) ((:) (1) ((:) (2) ((:) (3) ([])))))","(1,[1,2,3])")
23:50:00 <james-ubc> im looking for something as simple as possible
23:53:07 <james-ubc> O.o
23:55:01 <osa1> I want to use parsec to parse tokens generated by Alex but I have no idea how can I do that. Do I need to make my token list instance of this: http://hackage.haskell.org/packages/archive/parsec/3.1.2/doc/html/Text-Parsec-Prim.html#t:Stream ?
