00:15:26 <Ariakenom> What's a small thing you like about Haskell? Or dislike.
00:15:38 <quicksilver> the IRC channel.
00:16:18 <Ariakenom> Oh yes
00:16:46 <milesrout> pattern synonyms. wonderful
00:16:53 <milesrout> not checking exhaustiveness by default. unwonderful
00:17:06 <mniip> Ariakenom, the nonfreestandingness of the GHC RTS
00:17:23 <tdammers> Ariakenom: $
00:17:59 <dstolfa> i honestly don't think that haskell problems themselves are too important, it's the lack of the ecosystem that i need to convince people i work with that haskell is a great idea
00:18:15 <dstolfa> but i guess that an ecosystem comes with its own problems
00:18:16 <dstolfa> so eh
00:18:21 * dstolfa has no good answer
00:18:23 <milesrout> i dont really know how you can say that it lacks an ecosystem. it has an enormous ecosystem
00:18:28 <tdammers> indeed, language choice is generally a matter of social inertia
00:18:36 <MarcelineVQ> transformers
00:18:36 <milesrout> once you reach a certain size, a bigger ecosystem just means more ways of doing the same things
00:18:58 <milesrout> javascript has a huge ecosystem, but it's just a million libraries for doing the same thing
00:19:02 <dstolfa> milesrout: the problem is that tools like cabal and stack, when you have a large system built in many different tools is that you run into circular dependencies that are just a nightmare to maintain
00:19:11 <ab9rf> milesrout: a million incompatible libraries, usually
00:19:11 <Ariakenom> dstolfa: either way that's not a small thing :)
00:19:18 <ab9rf> you start to run into the Standards Problem
00:19:24 <dstolfa> milesrout: literally nobody wants to maintain haskell tools in a large system
00:19:29 <dstolfa> at least i can't convince them
00:19:31 <dstolfa> and trust me
00:19:32 <dstolfa> i'm trying
00:19:38 <milesrout> maintain what tools
00:19:40 <tdammers> well, the unconvincing thing about Haskell's ecosystem is that while it's reasonably complete and of good quality, people have a hard time believing it because the community is small and the language doesn't have a large number of big visible success stories
00:20:01 <ab9rf> https://xkcd.com/927/
00:20:03 <milesrout> the only thing that I can imagine that would be a pain to maintain is stack.yaml files full of specific version numbers.
00:20:13 <dstolfa> milesrout: tools that link against a bunch of legacy C crap, namely libraries that have conflicting paths and just happen to barely work in C. i can make it work in haskell, but then you bump the version of 1 library and it all falls to shit
00:20:27 <tdammers> in practice, I don't care if your language has sixty different HTTP libraries and mine has only one, when the one in my language is good and the sixy in yours are not
00:20:30 <dstolfa> milesrout: exactly, and that's the problem i ran into
00:20:35 <milesrout> ah yeah well FFIs are a pain in everything that isn't C or C++ i guess
00:21:08 <tdammers> C FFI is a problem that isn't unique to Haskell
00:21:23 <dstolfa> tdammers: it's not, but it seems to sort of work well enough in things like Rust and OCaml
00:21:25 <milesrout> which isn't to say it isn't a problem in haskell
00:21:33 <dstolfa> and i don't get nearly shot if i mention those 2
00:21:44 <dstolfa> sysadmins stare very angrily at me if i mention haskell
00:21:50 <milesrout> but that it's certainly not going to hold haskell back from being successful given that it hasn't held lots of other languages back from being successful. not that i think being successful should be haskell's goal
00:21:58 <ab9rf> that's mostly an aspect of community size
00:21:59 <dstolfa> i really, really wish i could write these tools in haskell :'(
00:22:12 <dstolfa> milesrout: honestly, i just wish i could use it @ work
00:22:16 <dstolfa> that's my only gripe with it
00:22:38 <milesrout> nice thing about being a mathematics phd student is that i can use whatever I like :)
00:23:13 <milesrout> but i was a software developer once, in the distant past (7 months ago) and I definitely couldn't have used haskell at work :(
00:23:23 <pie_> can i do this somehow: type SomeFunThingy = MonadIO m => GLuint -> GLsizei -> Ptr GLsizei -> Ptr GLchar -> m () 
00:23:27 <pie_> it doesnt like the constraint
00:23:31 <dstolfa> milesrout: my phd is a mish-mash between distributed and operating systems and mathematics. the latter version of me screams haskell, but people coming from the former world (who actually maintain this stuff) scream at me for screaming haskell
00:24:01 <ab9rf> i could have at my last job
00:24:08 <ab9rf> but that's bceause nobody at my last job was a developer
00:24:14 <milesrout> typical #haskell though right, two people discussing the practicality of the language both actually doing phds
00:24:16 <ab9rf> i could have written apps in brainfuck and nobody would ahve cared
00:24:26 <tdammers> dstolfa: writing an OS in Haskell seems like an exercise in self-harm
00:24:48 <dstolfa> tdammers: not an OS, but a compiler + a tool to explore all allowable behaviours of a system while developing a formal model is not
00:24:56 <dstolfa> i get screamed at regarding the compiler
00:25:00 <tdammers> oh
00:25:09 <tdammers> that's kind of stupid
00:25:23 <tdammers> experimental compilers is *the* use case for haskell
00:25:26 <milesrout> ab9rf: have you seen bf-irc-bot? guy wrote an irc bot in brainfuck. he also wrote sway now I think about it
00:25:33 <dstolfa> tdammers: i agree, but the annoying bit is that it has to link with a legacy C library of which a compiler is considered a part of (i'm not sure who thought that was a good idea, but ...)
00:25:39 <dstolfa> tdammers: that's why i'm screaming haskell ;)
00:25:42 <ab9rf> milesrout: hehe
00:25:47 <tdammers> after all, haskell was invented to implement the world's most advanced experimental compiler, GHC :x
00:25:55 <milesrout> ghc is fairly incredible
00:26:09 <dstolfa> tdammers: at least they allow me to write OCaml
00:26:36 <dstolfa> but they often revert to: hmmm, it would be good if this was C
00:26:38 <dstolfa> and i'm like i'd rather not
00:26:46 <tdammers> dstolfa: you'll have to explain the "legacy C library" part, because right now it just confuses me
00:27:18 <tdammers> although, oldschool bearded unix sysadmins love C
00:27:25 <dstolfa> tdammers: so, imagine a large monolithic library tightly coupled with a kernel module, depending on the ABI between the two that contains everything from state management to a compiler and disassembler
00:27:32 <dstolfa> that has conflicting paths for certain things
00:27:33 <tdammers> not because it's better in any way, but because it fits their ways so well
00:27:35 <dstolfa> and is resolved via #include_next
00:27:52 <dstolfa> this is possibly the shittiest of shit you can find in C
00:28:00 <tdammers> oh dear
00:28:12 <tdammers> and the powers that be are in love with that monstrosity?
00:28:18 <Ariakenom> dstolfa: that's dark
00:28:24 <dstolfa> tdammers: the alternative is spending 2-3 years reimplementing everything
00:28:35 <dstolfa> and for the purpose of my phd, which is 4 years long overall, that's a bad idea
00:28:42 <dstolfa> so i'm working with what i can to explore some hypotheses that i have
00:28:57 <fredefox> Howdy! Does anyone know if I can get stack to output the path to the "share" directory of my executable?
00:29:05 <tdammers> dstolfa: too bad this isn't an employment situation at some company - I'd brush up my resume and plot my exit strategy
00:29:06 <[exa]> dstolfa: you need to explain the hs linking model to the sysadmins before they can agree that's not at all that much different from C from their point of view
00:29:22 <[exa]> dstolfa: I'd also include a promise of not using stack :D
00:29:46 <dstolfa> tdammers: well, i really like the actual research and the environment it gets me to do this research in, it's just that the software is god awful
00:29:49 <shiona_> I believe someone mentioned some text that covered an idea to use machine learning to guess what the actual error in the code is/how to fix it. The point was that current haskell type system errors are a bit daunting to a beginner and may point a long way away from the actual error if the types are not expicitly written down
00:29:51 <dstolfa> but that's the case with a lot of systems software
00:29:59 <dstolfa> [exa]: i tried, i also said i'd use cabal
00:30:04 <shiona_> anyone have any idea what I'm talking about and might have a link to that?
00:30:04 <dstolfa> [exa]: they wanted none of it ;-;
00:30:25 <dstolfa> [exa]: i even told them, you tell me what to use so it's easiest for you
00:30:29 <tdammers> shiona_: sounds like something someone in love with Elm would say
00:30:29 <dstolfa> to which they responded C
00:30:31 <dstolfa> and i got sad
00:30:47 <tdammers> shiona_: personally, I think the practical solution is to encourage people to use more type annotations
00:30:57 <ab9rf> type annotations are not a bad thing
00:31:02 <[exa]> dstolfa: .................ivory?  :D
00:31:04 <dstolfa> [exa]: but i will not give up. i still want to write this in haskell :)
00:31:40 <tdammers> dstolfa: question is, what are the effective power structures? how important is your research for those in charge?
00:31:46 <[exa]> dstolfa: supplying full source and a workable compatible package for <insert the distro here> usually makes the admins consider that
00:32:31 <[exa]> dstolfa: /me was a sysadmin as well, screamed at PHP crowd for their inability to pack their stuff together :D
00:32:55 <tdammers> [exa]: PHP crowd deserves constant and thorough screaming though
00:33:04 <tdammers> [exa]: not just for the packaging stuff
00:33:05 <ab9rf> i used to be a sysadmin, but i've never had to deal with developers in my environments
00:33:06 <dstolfa> tdammers: well, we all work together with best effort that we can do. it's a heavily distributed team in this case funded by DARPA with adversarial engagements every 6 months where the red team gets to go ahead and break things to see if we can detect it. the problem is that in order to get any real research done, we have to be pragmatic because it's way too much engineering with not enough engineering 
00:33:12 <dstolfa> power to reimplement everything
00:33:36 <dstolfa> [exa]: that might work w.r.t. our internal stuff, indeed
00:33:56 <tdammers> dstolfa: the reason I'm asking is because it's possible that it's not the sysadmins you have to convince in the end
00:34:06 <dstolfa> [exa]: i've given up hope on anything that's a runtime dependency as companes like EMC/iXsystems/Juniper/Apple/... pick it up and they don't want any non-C in there
00:34:17 <dstolfa> tdammers: well, there are 2 things right
00:34:27 <dstolfa> one of them is convincing sysadmins to run internal things in different languages that they get to maintain
00:34:39 <dstolfa> the other is convincing OS vendors that they should ship haskell. that's probably not happening
00:34:50 <tdammers> GHC is in debian, fwiw
00:34:53 <dstolfa> but the former might
00:35:00 <tdammers> and old one, but still
00:35:03 <ab9rf> most linux distributions have some version of ghc
00:35:08 <dstolfa> i should probably rephrase
00:35:16 <ab9rf> microsoft doesn't ship any compiled langages
00:35:57 <dstolfa> by OS vendors i mean people who deploy their internal operating systems such as Apple, Juniper and so on, on some end-user device like a network appliance for storage, a router or laptops/desktops, i.e. adding haskell to their base OS buildsystem which the unix-y folk don't really want to do for anything other than C and perhaps C++ sometimes if LLVM is involved
00:36:23 <[exa]> dstolfa: btw what's your software about? (roughly)
00:37:12 <tdammers> dstolfa: in that case, I can understand the concerns a little
00:37:51 <tdammers> dstolfa: so you'd need to figure out a way to make integrating GHC Haskell seamlessly with the rest of their build setup
00:38:08 <ab9rf> fundamentally the problem is that there are not that many people who can code in haskell, and most of them have lots of shiny credentials, which means they command a high salary. most companies do not want to commit to a haskell code base because that means hiring a bunch of hard to find, expensive developers who will be difficult to replace when they decide to go do something else.
00:38:18 <dstolfa> [exa]: if you've used DTrace, it's basically one that works for distributed systems and through virtualisation layers with new concepts in the language to support that kind of operation. it gives room for exploration of pratical value of some PLT ideas in an environment that has to interact with highly heterogeneous environment (both in terms of data structures of the operating system and the environment 
00:38:24 <dstolfa> parts of the program run in, such as deep in the kernel with interrupts off, unable to acquire locks and so on, all the way to userspace). my research is essentially a mix between the implementation of these things and PLT
00:38:35 <ab9rf> it's much more sensible, economically, to use languages with a larger community, because that means lower salaries and easier replacement
00:39:22 <pie_> edwardk, is there some GLenum -> String in your gl library to get the name of an int in the enum?
00:39:29 <ab9rf> it comes down to "haskell isn't popular because it wasn't previously popular"
00:39:33 <tdammers> ab9rf: and part of that is the fallacy of focusing a lot on tangible buzzwords like X years experience in language Y and framework Z, and very little on softer skills like being good at understanding complex abstract concepts and applying them, learning new stuff, translating between technical mumbo-jumbo and normal-people-speak, etc
00:39:51 <dstolfa> [exa]: and the funding comes from the fact that all of this has practical value for intrusion detection systems and debugging hard problems that DARPA is very interested in
00:39:53 <ab9rf> tdammers: the tech industry has absolutely horrible recruitment strategies
00:39:57 <tdammers> ab9rf: the "lower salaries and easier replacement" thing is a bit of a fallacy too - you do get what you pay for
00:40:11 <dstolfa> well, immediate practical value i should say
00:40:21 <ab9rf> tdammers: developers are hired based on where they went to school, where they interned, what they look like, and "gut feeling" in interviews
00:40:28 <tdammers> yes, if your criteria are "any odd 'developer' will do", then hiring for PHP is going to be a million times easier than Haskell
00:40:59 <tdammers> and let's not forget that the predominant strategy in the industry is "fake it 'till you can't get away with it anymore"
00:41:04 <[exa]> dstolfa: ok now that's cool. can you possibly split it into a low-end piece and haskell piece? I can see the problem with installing a new piece of runtime into a billion new devices, esp. if the runtime doesn't even remotely target the new devices.
00:41:07 <ab9rf> tdammers: in practice, that's the metric that is used, though. i've met lots of developers who would have difficulty passing a turing test.
00:41:25 <tdammers> so the experienced bearded CS PhD with 20 years on their back is actually going to get in the way of that often
00:42:09 <ab9rf> tdammers: a 20 year CS PhD will have trouble getting work unless he has experience with the ecosystem of interest, or knows someone on the inside
00:42:10 <[exa]> dstolfa: s/new/small/
00:42:36 <tdammers> ab9rf: I meant a CS PhD with 20 years of programming experience
00:42:38 <dstolfa> [exa]: yeah, that's the part i'm trying to shove haskell into. namely, a part of this is developing a formal model of the current system and exploring allowable behaviours in order to understand the implications better and motivate changes to the language to express the semantics that we actually want. i'd also like to rip out the compiler as a separate thing, but that's hard as the people shipping this 
00:42:45 <dstolfa> look at it as: "it's a part of the tool and we ship it with the base OS"
00:42:45 <tdammers> ab9rf: not someone who's spent 20 years doing a PhD
00:43:05 <ab9rf> tdammers: 20 years of programming what? 
00:43:22 <ab9rf> tdammers: recruitment is about buzzword compliance
00:43:36 <ab9rf> not to mention a large fraction of job postings these days are fake anyhow
00:43:37 <tdammers> but I believe the main problem is that almost all the management literature and research out there is focused on massive production processes, and the main things to manage are resources, tools, and unschooled labourers
00:43:57 <ab9rf> they're deliberately nonrecruitable, in order to justify an LCA
00:44:03 <tdammers> so in the predominant management approaches, workers are interchangeable; "one worker" is a reasonable unit
00:45:00 <tdammers> and that works fine for, say, assembly line work - the same mathematical model works for anyone applying for the job and meeting the formal requirements
00:46:04 <ab9rf> tdammers: but they won't actually hire unschooled laborers :)
00:46:20 <ab9rf> they insist on these untrained cogs being highly trained
00:46:30 * dstolfa has heard horror stories where people sit at work doing nothing, getting paid and of people getting drunk, coming to work and screaming at their boss until they get a raise -- and it works
00:49:41 <tdammers> ab9rf: no, of course not, but that's why it's so awful - they use management strategies developed for mass production processes with uniform, statistically predictable moving parts, and apply them to creative design work
00:49:54 <tdammers> ab9rf: one of my pet peeves is when software managers talk about "production"
00:50:27 <tdammers> ab9rf: in software development, the "production" process consists of pushing the "deploy" button; everything else is design
01:02:01 <ab9rf> tdammers: my wife worked for six months at redbox where pretty much her entire job was to push the deploy button :)
01:02:09 <ab9rf> tdammers: but she wasn't a developer
01:02:21 <tdammers> heh
01:02:27 <ab9rf> devops engineer
01:03:45 <dstolfa> ab9rf: sounds like a job where she could do anything on the side, sounds quite nice actually
01:04:00 <ab9rf> dstolfa: there wasn't much time for doing anything on the side
01:04:03 <dstolfa> ah :(
01:04:26 <piark_> hello
01:04:46 <liste> doesn't devops (partly) mean putting the dev in ops?
01:05:05 <Maxdamantus> >  You don't have permission to access "http://www.redbox.com/" on this server.
01:05:06 <Maxdamantus> :(
01:05:07 <lambdabot>  <hint>:1:77: error:
01:05:07 <lambdabot>      parse error (possibly incorrect indentation or mismatched brackets)
01:05:07 <liste> hi piark_ 
01:05:13 <ab9rf> liste: that's the theory. in practice devops engineers are just app support technicians 
01:05:38 <ab9rf> while it's helpful if they can read code, they won't be actually writing code
01:05:42 <liste> so... glorified ops?
01:05:54 <ab9rf> good app suport techs don't need to be glorified
01:06:01 <liste> I agree
01:06:02 <ab9rf> the work they do is legitimate and necessary
01:06:07 <dstolfa> liste: it's just a buzzword for increased pay, people have done this for years before the term existed
01:06:15 <dstolfa> i see nothing wrong with people getting more money though
01:06:20 <liste> me neither
01:06:27 <ab9rf> so saying it's "glorified ops" reflects an inappropriate attitude toward operational services
01:07:05 <ab9rf> she works in a more traditional applicaiton support role now, gets paid a bit more, and has more benefits
01:07:39 <ab9rf> devops is simply app support for an app being developed locally instead of purchased from a third party
01:07:42 <ab9rf> same role, different name
01:09:17 <tdammers> "devops" is a nice idea, but in practice, it usually amounts to cutting costs by giving people additional tasks that they aren't qualified for without giving them a raise
01:10:20 <tdammers> the theory is that you hire people who are qualified to do dev *and* ops work, and have them do both, to get rid of the friction, delays, and communication boundary
01:10:23 <ab9rf> that's true in almost every organization
01:10:37 <ab9rf> tdammers: if they wanted people like that they'd hire me
01:10:40 <ab9rf> but nobody will actually hire me
01:11:01 <tdammers> but of course this approach is a solution to a problem that many organizations don't even have
01:11:03 <ab9rf> i've done both dev and ops, but nobody wants me because i don't have buzzword compliance
01:11:12 <sm> morning all
01:11:35 <ab9rf> i'm unhirerable now, of course; been out of the loop for too long
01:11:35 <dstolfa> ab9rf: :'(
01:11:42 <dstolfa> ab9rf: just get certs!
01:11:45 <sm> what does the NoCPP language pragma do ? Also, where could I find CPP/NoCPP docs, eg at https://downloads.haskell.org/~ghc/7.6.2/docs/html/users_guide/ghc-language-features.html ?
01:11:47 <tdammers> devops is great, if not inevitable, for a 5-person startup, where due to the team size and the fast pace at which stuff needs to happen, everyone will have to be able to wear many hats
01:11:47 <ab9rf> dstolfa: that requires money
01:12:20 <ab9rf> dstolfa: good money after bad to ge ta cert that might, but probably will not, get me a job
01:12:32 <liste> sm: https://stackoverflow.com/q/6361846/1283954
01:12:33 * dstolfa doesn't have a single cert, but has marked a few people that took some certs
01:12:46 <liste> sm: CPP stands for the C preprocessor
01:12:51 <tdammers> but if you have a 20-person dev team and a 20-person ops team, "switching to devops" means that you now have a 40-person team where, on average, half the team is incompetent at what they're doing at any point, and communication problems are increased fourfold
01:12:55 <MarcelineVQ> sm: does it have to be that version?
01:13:24 <sm> MarcelineVQ: no
01:13:29 <sm> liste: that much I know..
01:14:12 <sm> my understanding is that CPP is never on by default so NoCPP is a redundant pragma I can remove
01:14:27 <tdammers> sm: CPP may be set as a compiler option
01:14:45 <sm> oh I suppose it would turn it off for a file if you set it sometwhere else. I wonder why that was done
01:15:16 <tdammers> sm: personally, I consider setting language pragmas from outside a bad habit, but some people are more, ahem, pragmatic about this
01:15:41 <ab9rf> haha
01:15:43 <ab9rf> bad pun
01:15:44 <tdammers> sm: if most of your source files need CPP, then you might consider it easier to set -XCPP project-wide, and disable CPP selectively for modules that won't compile with CPP
01:15:52 <tdammers> ab9rf: not intended
01:16:18 <tdammers> sm: after all, most Haskell code that doesn't use any CPP constructs will compile just fine with -XCPP
01:16:23 <sm> tdammers: same here
01:17:03 <tdammers> so you could consider the explicit pragma as saying "don't try compiling this with CPP, because it won't work"
01:17:09 <sm> it seems I added NoCPP myself 6 years ago, reason unclear.. something about shakespeare-text quasi-quoter..
01:17:10 <ab9rf> and it'
01:17:21 <ab9rf> it's harmless to have the NoCpp pragma presnet
01:17:43 <ab9rf> the worst it will do is throw an error if yhou try to compile on a compiler that doesn't understand it, but in that case yhou probably want compilationm to fail anyhow
01:17:43 <tdammers> sm: yes, that could be something that could break
01:18:02 <MarcelineVQ> It'd be nice if it was clear somewhere what the interaction of CPP NoCPP and -cpp are though
01:18:02 <tdammers> sm: if you have multi-line quasiquote syntax that has lines starting with #, then that will trip up CPP
01:18:25 <sm> ah.. making sense now, thank you
01:18:44 <tdammers> because CPP runs before quasiquotes are expanded
01:18:58 <ab9rf> quacky quotes
01:19:21 <sm> ab9rf++ 
01:19:39 <mniip> wouldn't it be funny if TH could generate pragmas that CPP would pick up
01:19:51 <dysfun> "funny"
01:19:55 <sm> sounds like it can
01:20:05 <mniip> not in the same file I don't think
01:20:06 <ab9rf> mniip: "funny" is not quite the word i would use
01:20:16 <cocreature> CPP runs _before_ quasi quotes so it can’t do that
01:20:18 <mniip> ab9rf, "exciting"/"horrifying"?
01:20:35 <ab9rf> mniip: definitely getting into the category of compiler abuse
01:21:00 <mniip> haskell is the definition of compiler abuse
01:21:06 <mniip> well, maybe save for C++
01:22:20 <ab9rf> i'm looking forward to the day when someone actually gets a working implementation of DWIM 
01:24:08 <MarcelineVQ> that's too much power for a human being
01:26:08 <bahamas> hello. I'm going through the Composing types chapter of Haskell Programming and I have to implement the Applicative instance for the Compose type. I have no idea how to implement pure, though. can anyone give me some hints? https://gist.github.com/LucianU/41b8a92ae3fcde62b627a2c70aac47c4
01:26:46 <MarcelineVQ> Constraints are your friends
01:27:10 <bahamas> speciffically, I don't know what f and g should be
01:27:38 <mniip> bahamas, '(Compose f) <*> (Compose a) = Compose (f a)' sounds wrong
01:27:46 <mniip> that shouldn't typecheck
01:28:02 <bahamas> mniip: yeah, I'm not sure about that either. I just left it like that
01:28:35 <[exa]> bahamas: a nice guide is that if you're requesting applicative instances of `f` and `g`, you should use them both.
01:28:53 <mniip> bahamas, ok, so you have to implement   a -> Compose f g a
01:29:11 <mniip> now Compose is a newtype, so essentially you have to implement   a -> f (g a)
01:29:16 <[exa]> bahamas: (also applies for `pure` implementation)
01:29:21 <mniip> because that's how Compose is defined
01:29:40 <mniip> bahamas, considering f and g are Applicative, what comes to mind?
01:30:56 <bahamas> mniip: thinking. one thing that confuses me is that I can't reference f or g in the definition, since they're not arguments taken by `pure`
01:31:30 <mniip> what do you mean referenec
01:32:07 <bahamas> mniip: I can't say `pure a = Compose (f (g a))` or something like that
01:32:30 <mniip> because that's nonsensical
01:32:31 <mniip> f is a type
01:33:06 <mniip> a is a value
01:33:06 <bahamas> right
01:33:06 <bahamas> so I need to replace f and g with types
01:33:06 <mniip> you have a type variable named 'a' up there too
01:33:07 <bahamas> sorry, with values
01:33:07 <mniip> that might be confusing you
01:34:28 <mniip> bahamas, have you implemented Applicative Identity, already?
01:35:01 <bahamas> no
01:35:47 <mniip> perhaps Applicative Maybe?
01:36:14 <mniip> or Applicative []
01:36:42 <mniip> I suggest you figure out Applicative and Functor for these simpler types before messing with generic Compose
01:38:41 <bahamas> mniip: for Applicative Maybe, `pure a = Just a`, no?
01:38:49 <mniip> what about <*>
01:39:42 <gentauro> updating a field on a record, will that supouse a "mem copy" of all content? -> https://stackoverflow.com/a/14955676
01:39:53 <pie_> anyone know how to get ghc to put .h files somewhere else
01:39:59 <gentauro> of is GHC "smart enough" to do some "magic" under the hood?
01:40:14 <bahamas> mniip: (Just f) <*> (Just a) = Just (f a) 
01:40:17 <gentauro> pie_: mv *.h /dev/null
01:40:22 <gentauro> :D
01:40:23 <pie_> :p
01:40:30 <mniip> bahamas, that's not all
01:40:53 <pie_> (specifically, not in my "src" directory, i have a build directory"
01:41:02 <pie_> s/directory"/directory)/
01:41:07 <gentauro> pie_: but does GHC evan read .h files?
01:41:15 <pie_> idk but it made them
01:41:25 <gentauro> I usually rename my Foo.hs to Foo.bak and can compile without any problem
01:41:31 <bahamas> mniip: I know. when one of the values is Nothing the result is Nothing
01:41:46 <ab9rf> gentauro: probably not. the unchanged values will be shared between objects.
01:41:55 <mniip> bahamas, what about []
01:42:13 <gentauro> ab9rf: I though GHC only looked for .hs / .lhs files ...
01:42:31 <ab9rf> gentauro: i was commenting on your prior question, not the one about files
01:43:05 <bahamas> mniip: `pure a = [a]`; `[f] <*> [a] = [f a]`
01:43:08 <gentauro> ab9rf: ahhh, the record update "thingy"? That's pretty cool :)
01:43:27 <ab9rf> gentauro: immutability means that sharing is completely nonproblematic
01:44:20 <[exa]> bahamas: that only seems to work on single-item lists, right?
01:45:19 <mniip> bahamas, but what about other cases
01:45:57 <bahamas> [exa]: oh, right. I didn't handle empty lists. `[] <*> [a] = []; [f] <*> [] = []`
01:47:22 <mniip> you didn't handle many other cases
01:47:26 <ab9rf> > [(2+),(2*)] <*> [0,4,8]
01:47:28 <lambdabot>  [2,6,10,0,8,16]
01:47:44 <[exa]> bahamas: you're probably going to need to generalize that a bit :]
01:48:07 <bahamas> ok. I will spend more time on the Applicative chapter
01:48:18 <MarcelineVQ> [f] isn't any list, it's the list of exactly one item called f
01:48:36 <MarcelineVQ> as you've written there anyway
01:48:42 <[exa]> probably not needed, you just need to reflect that lists may also have 2, 3, ..., infinity items
01:49:50 <bahamas> [exa]: I assume you mean I need to apply all the items in the first list to all the items in the second list
01:52:28 * alexshpilkin[m] sent a long message:  < https://matrix.org/_matrix/media/v1/download/matrix.org/AtUAvcgmmptwnZLoeMwhsHKp >
01:54:01 <MarcelineVQ> matrix thinks that's a long message? geeze, weirdo program
01:55:46 <MarcelineVQ> idk much about parallelism but I'd be looking at the async lib as a place to start given that you're wanting to race things
01:56:15 <MarcelineVQ> Actually I guess you're not, you want to explore the whole space, my bad
01:56:31 <cocreature> by “parallelism” do you mean actual parallelism in the sense that you use multiple CPU cores or just some interleaving?
01:57:00 <[exa]> bahamas: yeah, there's a function to produce each part of the resulting list, you then just concatenate the results
01:58:26 <tilman_> Beginner's question: I have a::Word8 and b::Word8. When I add them, the addition is modulo 256 per default. However I want to calculate mod (a+b) 255.  How do I get the result of (a+b) to be Int instead of Word8?
01:59:19 <cocreature> > let f = \done step xs -> asum (map (findIndex done) (transpose (map (iterate step) xs))) in f (> 5) (+1) [0,1,4,3]
01:59:21 <lambdabot>  Just 2
01:59:42 <cocreature> bahamas: if you don’t need actual parallelism, the above should work.
01:59:47 <Logio> tilman_: what's the type of (+)?
02:00:54 <tilman_> Logio: (+) :: Num a => a -> a -> a
02:00:58 <pgiarrusso> dstolfa: Sounds like a cool PhD! But for a dtrace-like tool, I can see why people writing traces need to run the compiler
02:02:07 <Logio> tilman_: so to get Int out, you must give it Ints
02:02:45 <pgiarrusso> dstolfa: I’d usually reach for staging and generating a C program from Haskell, but sadly a C compiler is probably too big for that
02:02:50 <tilman_> Logio: so I tried (fromIntegral a) + (fromIntegral b)
02:03:25 <tilman_> Logio: but fromIntegral will just leave the type alone as it's already an Integral
02:04:56 <Logio> :t fromIntegral
02:04:57 <lambdabot> (Num b, Integral a) => a -> b
02:05:24 <dstolfa> pgiarrusso: yeah, i think the research potential is really nice, which is why i'm suffering through this mess :)
02:05:28 <tilman_> Logio: and there's no way to just force it to be an int, is there? I could write a function that adds only integers and use fromintegral to coerce it but this seems a tad too complicated. I could also just see if there's an overflow and add 1 to the (a+b) `mod` 256 result. But all this seems so complicated
02:06:05 <MarcelineVQ> :t 3
02:06:06 <lambdabot> Num p => p
02:06:10 <MarcelineVQ> :t 3 :: Int
02:06:11 <lambdabot> Int
02:06:48 <Logio> tilman_: you can add type annotations for the fromIntegral calls
02:07:11 <Logio> as demonstrated above
02:07:12 <MarcelineVQ> or to the 255
02:07:18 <Logio> that too
02:07:22 <Logio> :t mod
02:07:23 <lambdabot> Integral a => a -> a -> a
02:07:39 * hackage yesod-form-bootstrap4 2.0.0 - renderBootstrap4  http://hackage.haskell.org/package/yesod-form-bootstrap4-2.0.0 (ncaq)
02:07:59 <Logio> forcing 255 to be Int implies that the other argument must be Int as well
02:08:31 <tilman_> Logio:  ((fromIntegral a) :: Int ) + ((fromItegral b) :: Int) `mod` 255 ?
02:09:08 <tilman_> Logio:  ((fromIntegral a) :: Int ) + b) `mod` 255 ?
02:09:12 <merijn> tilman_: You only need one ":: Int" for the whole thing
02:10:13 <Logio> though it might be clearer for the reader to have the annotations for fromIntegral
02:10:32 <merijn> Logio: becomes quite messy and unreadable to me, tbh
02:11:13 <Logio> merijn: notationally messier, but semantically clearer
02:11:45 <pgiarrusso> Clarity depends on audience experience, as usual
02:11:46 <Logio> because you don't need to follow the types around to see that (+) there isn't modulo 255
02:12:07 <Logio> but whether that's something you worry about is a personal preference
02:13:08 <tilman_> Logio: merijn : thanks for the help. 
02:13:33 <Logio> I usually like to split lots of fromIntegrals/other simple type changes to a where block so it's more obvious
02:13:42 <Logio> and less cluttered 
02:14:16 <skanodia> Had a doubt about using the `exists` method vs. just using a boolean check
02:14:35 <skanodia> when would you use either?
02:14:47 <merijn> skanodia: Can you clarify what you mean?
02:17:16 <skanodia> So I'm not sure if this is directly related to haskell
02:17:41 <skanodia> But there is this library used to emulate functional programming concepts in js - 
02:17:42 <skanodia> https://funfix.org/api/core/classes/either.html#exists
02:18:03 <skanodia> And wasn't sure what the purpose of this was?
02:19:19 <skanodia> When would you do `Right(20).exists(n => n > 10)` instead of just `if(n>10)`
02:19:35 <barrucadu> Well you probably wouldn't do it with a literal value
02:19:56 <barrucadu> But that Either value could be produced by a function
02:21:47 <skanodia> right, even if they were produced by a function, wrapped in Either, 
02:21:58 <skanodia> what value is .exists adding to it
02:23:21 <Logio> exists also returns false if the value is Left(something)
02:23:40 <Logio> or rather, Left(anything)
02:24:47 <skanodia> Ok, I think I need to take a step back then. What does `Left(20)` or Right(20)` mean?
02:24:55 <skanodia> the values have a direction?
02:25:01 <skanodia> fp noob :(
02:26:00 <shiona_> They are construtors for Either
02:26:57 <josser> skanodia: Since the either type looks like 'Either a b'
02:27:17 <josser> Left contains a value of type 'a', and Right a value of 'b'
02:27:43 <tdammers> skanodia: consider this data type: data Foo = Bar String | Baz Int
02:28:16 <tdammers> skanodia: a value of type Foo can be Bar "something", or Baz 23
02:28:28 <tdammers> skanodia: but not Bar 1, nor Baz "Hello"
02:28:51 <tdammers> skanodia: if the constructor is Bar, then its argument must be a string; if the constructor is Baz, then the argument must be an Int
02:29:19 <tdammers> skanodia: now we can generalize the Foo type, using type variables instead of String and Int there:
02:29:29 <tdammers> data Foo a b = Bar a | Baz b
02:30:16 <skanodia> alright
02:30:21 <tdammers> so now a value of type Foo [Int] Flubble can be Bar [1,2,3], or it can be Baz (mkFlubble "hello") -- assuming a function mkFlubble :: String -> Flubble exists
02:31:16 <tdammers> but with the same definition, we can also define a variable of type Foo String Int, and it behaves exactly like our first version of Foo
02:31:36 <tdammers> or we can make a Foo (Int -> String) (IO String)
02:32:08 <tdammers> any type you want can be substituted for a and b
02:32:26 <tdammers> so this generalized version of Foo is exactly Either, only the names are different
02:32:33 <tdammers> Foo is Either, Bar is Left, and Baz is Right
02:32:56 <tdammers> we could have called them Wrong and Correct, or No and Yes, or anything else, it doesn't really matter
02:33:23 <tdammers> so an Either String Int can be Left "hello", or Right 2, but not Left 23 nor Right "please"
02:34:34 <tdammers> makes sense?
02:39:09 <tilman_> Logio: my addition modulo 255 function for Word8 is now working. But I needed three toIntegrals to get it to compile. It's so ugly
02:39:32 <MarcelineVQ> three?
02:39:38 <merijn> tilman_: Every so often I need to put fromIntegral everywhere and hate how awkward it is
02:40:01 <tilman_> perhaps someone could take a look at it if that's okay? its gmul:  https://repl.it/@TilmanSchieber/FloralwhiteTrivialCookie
02:40:04 <merijn> tilman_: Then I remember that time I spend *3* weeks debugging an implicit type-conversion in C and decide that explicit conversions aren't so bad after all.
02:41:19 <merijn> tilman_: Your use of Int there looks completely redundant
02:41:30 <merijn> Especially since Word8 is *already* modulo 255
02:41:41 <merijn> > 66 + 200 :: Word8
02:41:43 <lambdabot>  10
02:42:02 <tilman_> 255 `mod` 255
02:42:09 <merijn> > 255 `mod` 255
02:42:10 <lambdabot>  0
02:42:13 <merijn> > 255 `mod` 255 :: Word8
02:42:15 <lambdabot>  0
02:42:35 <tilman_> 266 `mod` 255 is what i meant
02:42:36 <merijn> I guess technically Word8 is mod 256
02:42:44 <tilman_> Word8 is mod 256. but I need mod 255
02:43:11 <tilman_> and the ::Int is not redundant because otherwise fromIntegral just leaves it a Word8 because Word8 is an Integral type
02:43:20 <tilman_> at least that's my understanding
02:43:27 <merijn> So, alternative question: Why do you not write everything to work on Int (or even better, Integral?) and only convert to Word8 way at the end?
02:43:58 <merijn> If you're manually taking the modulo anyway...
02:45:34 <tilman_> merijn: yes I could do this. but the rjindael galois field only has 256 elements and it would be such a nice fit if i could only operate in word8... 
02:45:59 <merijn> *Rijndael :)
02:46:13 <merijn> tilman_: Why?
02:46:26 <merijn> If your answer is "to save space" I have bad news for you
02:48:32 <tilman_> merijn: no I don't care. I just do this to learn a bit haskell. the actual reason is I found it cute and would automatically get an error for parameters to gexp and glog>255
02:49:24 <merijn> tilman_: I'd say that dealing with fixed size numeric types and mixing them is probably the least nice/polished part of Haskell, sadly :\
02:50:11 <tilman_> merijn: but I am of course more than willing to change this if there is some more idiomatic way of doing it
02:51:04 <merijn> tilman_: Sadly, the 2 approaches are: 1) use the most generic type you need to reduce conversions, then convert at the end or 2) suck it up and deal with the fromIntegral's
02:51:06 <tilman_> merijn: I implemented RSA in clojure before and the bitwise operations on dynamic types sucked so much I was happy to finally have a statically typed Word8 
02:52:17 <tilman_> merijn: I think I'd prefer 1). thanks for the help.
02:52:38 <merijn> tilman_: btw, in gexp you use !! to index in a list, that's gonna suck in terms of performance
02:52:58 <merijn> tilman_: Since, it's a linked list and you have to walk the whole list each time
02:53:13 <merijn> tilman_: You might be interested in our lord and saviour: https://hackage.haskell.org/package/vector
02:53:55 <merijn> tilman_: That provides proper "C-style" arrays with O(1) (if you squint and ignore caches...) indexing
02:55:01 <Ke> caches are O(1), as you always miss the cache asymptotically
02:55:34 <tilman_> merijn: I'll check it out. glog should probably a pre-calculated look-up-table as well. cannot imagine that being to fast either.
02:55:43 <Ke> though you miss ram also eventually, but in reality all of these real life machines are like that
02:55:46 <tilman_> merijn: *too
02:57:33 <Ke> well it's like 1/n speedup anyway, not really 1, but the speedup is bounded in both directions
02:59:39 <int-e> mmm
03:14:17 <dysfigured> how does one decide whether to use a Maybe or Either?
03:15:45 <dysfigured> i mean, i see how Either provides an alternate value, but it's not too different than extracting from Maybe
03:16:08 <opqdonut> some people generalize over both
03:16:46 <opqdonut> with a type signature like "Monad m => arg -> m result"
03:19:06 <philippD> Huh, why isn't there something like `instance Monoid e => Alternative (Either e)`?
03:21:22 <opqdonut> philippD: yeah I was looking for something like that too, but ended up with Monad :)
03:22:43 <philippD> yeah, but Monad doesn't provide a way to construct empty values
03:23:08 <philippD> So you'd have to use either Alternative or MonadPlus
03:23:39 <phadej> you can use MonadThrow if `e` is an exception
03:23:46 <phadej> than it will work with Maybe, Either e, and IO
03:24:45 <phadej> or was it, hmm, MonadThrow (Either SomeException), now I don't remember
03:26:04 <opqdonut> philippD: err Monad has fail?
03:26:09 <opqdonut> or did they remove that?
03:26:27 <philippD> phadej: yeah, you have to use SomeExcpetion
03:26:28 <opqdonut> it's still in the standard surely
03:26:51 <opqdonut> mm right fail isn't generic enough I guess
03:26:54 <opqdonut> :t fail
03:28:22 <Solonarv> Monad still has fail, but that's legacy - if you want fail you should be using the one from MonadFail
03:28:22 <opqdonut> hmm right and you actually need to mention the type of your Left branch in the type signature
03:28:39 <opqdonut> so nothing like Alternative will work for this in general
03:29:34 <opqdonut> I mean if you want a type that covers both "arg -> Maybe res" and "arg -> Either err res"
03:30:16 <opqdonut> some libs have their own Result typeclass I think
03:41:22 <merijn> philippD: You might be interested in Validation from the either package
03:41:58 <merijn> philippD: It's basically Either with a monoid constraint on Left so you can collect multiple "errors" in an Applicative context
03:50:29 <_bo> merijn: Damn! Have just been reading the vim-haskell setup page, switched windows and here you are! The internet has become too small :D
03:53:36 <cocreature> you can’t escape from merijn
03:53:45 <merijn> Sure you can
03:53:53 <merijn> Just remind me I should be writing my thesis and *poof*
03:54:36 <_bo> I've got a violent Vietnam-like flashback...
03:55:07 <_bo> Thesis mentioning backfired :D
03:56:57 <philippD> opdonut: Monad has fail but then you are limited to use String as your error type.
03:57:00 <int-e> Hmm, apparently lambdabot's hoster is suffering from DDoS attacks these days, sigh.
03:57:41 <the_2nd> is the .cabal a yaml file? or something else?
03:57:49 <cocreature> something else
03:57:53 <the_2nd> toml?
03:58:00 <cocreature> no it’s a custom syntax
03:58:13 <the_2nd> what can I use to parse it?
03:58:29 <cocreature> the Cabal library
04:00:16 <the_2nd> readPackageDescription :: Verbosity -> FilePath -> IO GenericPackageDescription   ?
04:00:36 <merijn> the_2nd: Why do you want to parse it?
04:00:50 <the_2nd> I'd like to write some tooling for .cabal files
04:01:01 <the_2nd> especially extract the dependencies
04:01:10 <merijn> the_2nd: Be aware that the format and API isn't very stable
04:01:30 <cocreature> and you don’t get enough information to preserve formatting
04:01:34 <merijn> the_2nd: You probably don't want a tool directly on that. If you use new-build there is already a tool to extract dependencies
04:01:45 <merijn> @hackage cabal-plan
04:01:45 <lambdabot> http://hackage.haskell.org/package/cabal-plan
04:01:47 <philippD> the_2nd: you might want to take a look at hor https://github.com/NixOS/cabal2nix works
04:01:57 <philippD> s/hor/how/
04:03:05 <merijn> Do builds with --enable-profiling affect performance when not doing profiling runs?
04:03:17 <the_2nd> I don't currently see how cabal-plan comes into play here
04:04:00 <merijn> the_2nd: You said "I want to extract dependencies", I'm just pointing out that if you new-build, cabal-plan already does that for you
04:04:24 <cocreature> merijn: yep, it can break optimizations quite badly
04:04:47 <merijn> cocreature: Ah, bummer, then I need to figure out a way to switch between the two >.>
04:05:09 <the_2nd> merijn, but that will only work for such projects, not ones using .cabal files?
04:05:34 <merijn> the_2nd: new-build uses .cabal files
04:05:54 <merijn> the_2nd: new-build is just the future replacement of "cabal build"
04:06:04 <cocreature> it somewhat depends on what you goal is here. why do you want to extract dependencies?
04:07:08 <the_2nd> I'd like to find all dependencies recursively and collect their license (s/files)
04:07:24 <merijn> the_2nd: hvr has already done that for you, iirc
04:07:29 <merijn> hvr: ping?
04:08:53 <cocreature> iirc that’s even part of cabal-plan. something like "cabal-plan license-report"
04:09:16 <merijn> Not in the version I have installed
04:09:21 <merijn> But I'm not sure that's the newest
04:09:38 <merijn> Ah, it's hidden behind a flag
04:10:01 <cocreature> https://github.com/haskell-hvr/cabal-plan/blob/master/ChangeLog.md#execabal-plan-executable
04:10:49 <merijn> the_2nd: Looks like you just got saved a ton of effort ;)
04:11:02 <the_2nd> aw, but I'm looking for work :D
04:13:12 <cocreature> I’m sure merijn has tons of tasks that he’ll gladly hand over to you :)
04:15:18 <merijn> Yes! For example, someone needs to dive into the GHC 8.6 source and find out if any new flags where added, and if so, which ones so I can fix my flag filtering code in Cabal for the 8.6 release :p
04:15:45 <merijn> Or implementing support for multiple subdirs in cabal-install's new remote repository support
04:16:05 <the_2nd> I'll correct myself
04:16:14 <the_2nd> aw, but I'm looking for FUN work :D
04:16:51 <merijn> You'll get mass adoration!
04:17:33 <hpc> kilograms of adoration!
04:22:53 <dvaergiller> runExceptT (fail "oh no" :: ExceptT String IO ())
04:23:17 <dvaergiller> why does that not produce IO (Right "oh no") ?
04:23:47 <Solonarv> if anything it should produce return (Left "oh no")
04:23:59 <Solonarv> but IO isn't a very good monad to use for examples
04:24:25 <Solonarv> % runExceptT (fail "oh no") :: Identity ()
04:24:26 <yahb> Solonarv: ; <interactive>:107:1: error:; * Couldn't match type `Either e0 a0' with `()'; Expected type: Identity (); Actual type: Identity (Either e0 a0); * In the expression: runExceptT (fail "oh no") :: Identity (); In an equation for `it': it = runExceptT (fail "oh no") :: Identity ()
04:24:29 <dvaergiller> oh sorry, yes by bad. Left
04:24:38 <Solonarv> % runExceptT (fail "oh no") @Identity
04:24:38 <yahb> Solonarv: ; <interactive>:108:1: error:; * Cannot apply expression of type `m0 (Either e0 a0)'; to a visible type argument `Identity'; * In the expression: runExceptT (fail "oh no") @Identity; In an equation for `it': it = runExceptT (fail "oh no") @Identity
04:24:59 <Solonarv> % runExceptT (fail "oh no" :: ExceptT String Identity ())
04:24:59 <yahb> Solonarv: Identity *** Exception: oh no
04:25:21 <cocreature> you have two options for the MonadFail instance for ExceptT. either you write one for "ExceptT String" that uses "Left" but then it only works for "ExceptT String" not for arbitrary "ExceptT e"
04:25:39 <cocreature> or you reuse the MonadFail instance of the underlying Monad
04:25:42 <ph88> why do i get the suggestion on line 145 when i already have the import (line 46) ??  https://bpaste.net/show/2d9b96715411
04:25:46 <cocreature> which is what the existing instance does
04:26:23 <cocreature> ph88: you have imported the type called Object, not the data constructor
04:27:20 <Solonarv> add ", Value(Object)" to the import list - that'll import the Value type and its Object constructor
04:28:01 <ph88> thanks guys
04:28:29 <cloudhead> is there a way to configure ghci to not load certain modules in my project?
04:28:36 <dvaergiller> % runExceptT (throwE "oh no" :: ExceptT String IO ())
04:28:36 <yahb> dvaergiller: ; <interactive>:110:13: error:; * Variable not in scope: throwE :: [Char] -> ExceptT String IO (); * Perhaps you meant one of these: `throw' (imported from Control.Exception), `throwIO' (imported from Control.Exception), `throwTo' (imported from Control.Concurrent)
04:28:39 <cloudhead> reason being that they have conflicting definitions with prelude
04:29:14 <Solonarv> how are you starting ghci?
04:29:44 <cloudhead> Solonarv: via stack repl
04:30:22 <Solonarv> hmm... add the ones you don't want to other-modules in your cabal file?
04:32:17 <cloudhead> hmm that will have other adverse effects I think
04:32:28 <cloudhead> I guess I could do --no-load but then need to specify everything I want to load
04:45:48 <ph88> import qualified Data.Aeson as J (ToJSON, toJSON, Value(Object))   i try to use it like    J.Object    but i get  Not in scope: type constructor or class ‘J.Object’
04:45:57 <ph88> without qualified it's not a problem
04:46:05 <ph88> how can i qualified the data constructor ?
04:46:54 <ph88> cloudhead, you can load precompiled modules .. maybe that helps
04:48:02 <ph88> ah sorry i see my mistake, nvm about my question
04:51:46 <halogenandtoast> Is over-typing a common pitfall. For instance let's say I have a Film type, currently films have 3 attributes title Text, year Int, tmdbID Int (an id from the tmdb website). Would it make sense or be bad practice to type year as Year and tmdbId as TmdbId?
04:52:03 <halogenandtoast> I feel like the tmdbId type makes sense because I can see functions being written for that type
04:52:10 <halogenandtoast> I'm not sure about Year though.
04:52:48 <halogenandtoast> But I feel like newtypes or type aliases are relatively cheap
04:52:59 <opqdonut> newtypes are cheap yeah
04:53:08 <opqdonut> perhaps try going with one and see how bad it feels
04:53:10 <merijn> halogenandtoast: At runtime newtypes are free
04:53:18 <merijn> halogenandtoast: Type aliases are a bad idea, though
04:53:19 <halogenandtoast> merijn: yes I know.
04:53:26 <opqdonut> since you seldom operate on the Years I think a newtype is fine
04:53:36 <Ariakenom> How about type aliases ? My gut feeling is caution
04:53:39 <halogenandtoast> merijn: why are type aliases a bad idea?
04:53:48 <merijn> halogenandtoast: They make docs harder to read (I need to follow 5 indirections to figure out what it *actually* wants) and they don't provide extra safety
04:54:03 <Ariakenom> oh merijn already said that yes
04:54:15 <merijn> I've had libraries where I had to click through 4 layers of type aliases only to find out it's just "Int"
04:54:28 <halogenandtoast> how does a newtype fix that?
04:54:46 <halogenandtoast> I guess because it's a constructor?
04:54:51 <merijn> halogenandtoast: They don't avoid the indirection, but at least they provide safety in return
04:55:06 <merijn> halogenandtoast: So there's an upside for newtype's to offset the hassle
04:55:29 <halogenandtoast> Hmm I always looked at type aliases as a way of describing intent
04:55:45 <merijn> halogenandtoast: Imagine "type Name = String; type Email = String; newUser :: Name -> Email -> IO ()" <- now if I accidentally reverse a name and email I get no error
04:55:56 <merijn> But I do have the mental overhead of having to lookup what "Name" is
04:55:56 <halogenandtoast> Person String String String is a hard type to read compared to Person Name BirthCity FavoriteFood
04:57:17 <halogenandtoast> merijn: I 99% agree with you, I'm just trying to suss out if there is ever a case to use type aliases
04:57:58 <merijn> halogenandtoast: The only two usecases I have for type aliases is: 1) abbreviating long function types that frequently recur and 2) placeholder names when I'm not yet settled on the final type to use in some code
04:58:18 <merijn> Since then I can just change the type of the alias without manually fixing the individual type signatures everywhere when doing exploring
05:00:10 <Lears> I occasionally use them to reduce repetition. Like I have a type with four type variables but they're /usually/ the same, so it's good to have @type Bar a = Foo a a a a@.
05:00:36 <ph88> i can't figure out where the Expected type: Transition (line 160) comes from https://bpaste.net/show/40eabcdb0ea0  why is this expected ?
05:01:17 <halogenandtoast> Lears: or what about type Lens s t a b = forall f. Functor f => (a -> f b) -> s -> f t
05:01:44 <Ariakenom> > let nan = 0/0 in (min nan 0, min 0 nan) -- uncalled for complaint
05:01:46 <lambdabot>  (0.0,NaN)
05:02:15 <merijn> ph88: No clue, because your paste doesn't have a line 160?
05:02:48 <ph88> merijn, maybe use your mousewheel to scroll down ?
05:02:52 <Solonarv> halogenandtoast: that's a long function type that frequently occurs
05:03:42 <halogenandtoast> ph88: line 160 contains your error backtarce
05:03:44 <merijn> ph88: The last line of source code is line 140
05:03:51 <halogenandtoast> instead of the line of code that is erroring
05:04:01 <merijn> ph88: The error says your problem is on line 160 of the code, which is non-existent
05:04:01 <the_2nd> is there no command to directly run what was built via stack build?
05:04:20 <Lears> What Solonarv said.
05:04:25 <Solonarv> just "stack exec name-of-executable"
05:04:52 <Solonarv> there's a stack-run package which lets you do "stack run" and infers the executable for you
05:04:58 <Solonarv> @hackage stack-run
05:04:58 <lambdabot> http://hackage.haskell.org/package/stack-run
05:05:05 <ph88> thanks .. i have to disconnect shortly
05:05:07 <ph88> back later
05:11:19 <pie_> anyone have any idea how to get some sort of actual rgb values -ish thing out of this http://hackage.haskell.org/package/palette-0.3.0.1/docs/Data-Colour-Palette-RandomColor.html
05:13:44 <Solonarv> looks like you want this: https://hackage.haskell.org/package/colour-2.3.4/docs/Data-Colour-RGBSpace.html#v:toRGBUsingSpace
05:14:09 <ahihi> or http://hackage.haskell.org/package/colour-2.3.4/docs/Data-Colour-SRGB.html#v:toSRGB24 for SRGB
05:17:39 * hackage edges 0.4.0.2 - Tools for efficient immutable graphs  http://hackage.haskell.org/package/edges-0.4.0.2 (NikitaVolkov)
05:22:49 <CritJongUn> Hello everyone, long time no see!
05:23:05 <CritJongUn> I wanted to ask you guys, for real world projects to learn Haskell
05:23:13 <CritJongUn> I never got quite along only reading books
05:23:19 <the_2nd> anyone worked with gitlib? The docu/examples all seem to be out of date
05:23:20 <CritJongUn> I've done the Monad Challenges 
05:24:38 <pie_> Solonarv, ahihi, man this is rediculously complicated, thanks.
05:25:02 <Solonarv> that's because colors are complicated!
05:28:31 <pie_> well sure i dont deny that
05:29:35 <halogenandtoast> pie_ you'll often find that Haskell libraries are closer to the "truth" and don't dumb things down.
05:30:02 <pie_> thats fine but it would be nice if they didnt assume everyone that ever wants to use it is a domain expert :p
05:30:14 <merijn> pie_: Well, there might be other simpler libaries out there?
05:30:26 <pie_> i poked around a little but not toooo hard
05:30:42 <pie_> anyway the suggestions look like they should work 
05:30:55 <pie_> i just dont know how i would have found them reasonably fast
05:31:01 <pie_> scroll moar i guess
05:31:37 <Ariakenom> > let nan = 0/0; fmin x y = if isNaN x || isNaN y then nan else min x y in (fmin nan 0, fmin 0 nan)
05:31:38 <lambdabot>  (NaN,NaN)
05:32:51 <halogenandtoast> pie_: yeah or the author could provide better documentation
05:33:03 <halogenandtoast> or a "dumb" method that gives you a fairly good result
05:33:03 <pie_> ah...apparently this randomCIELab thing uses MonadRandom...I have no idea how to use that
05:33:37 <pie_> something something runcontextt?
05:33:54 <halogenandtoast> pie_: nah
05:34:00 <halogenandtoast> you can just run it like MonadIO
05:34:43 <halogenandtoast> I mean I guess you could use runRandT
05:35:00 <pie_> ok this is my real problem xD https://bpaste.net/show/aab37b42bfd7
05:35:43 <halogenandtoast> so you want to return a random color?
05:35:48 <pie_> yes
05:36:15 <pie_> also im guessing thats probably going to be impure in some sense so my type doesnt reflect that
05:36:28 <halogenandtoast> correct, random will be impure
05:37:02 <halogenandtoast> I'm going to try to generate a working example myself
05:37:04 <pie_> but i might just shove it in unsafe for the moment
05:37:38 <halogenandtoast> Don't think you can just do that, you need a random number generator
05:37:48 <halogenandtoast> you either need to pass it in, or use a monad for the additional context
05:38:04 <pie_> oh FML that worked
05:38:17 <pie_> unless its gonna runtime error
05:38:44 <Ariakenom> in haskell!? nevah
05:39:08 <pie_>  toRGBUsingSpace sRGBSpace $ unsafePerformIO randomCIELab
05:39:28 <merijn> pie_: Eh, should that return the same random colour each time?
05:39:37 <pie_> merijn, no.
05:39:42 <pie_> on that note
05:39:49 <merijn> pie_: Then you probably shouldn't use unsafePerformIO :)
05:40:01 <pie_> merijn, https://xkcd.com/221/
05:40:07 <Ariakenom> s/Then//
05:40:22 <halogenandtoast> pie_: so in the right monad you need to use >>= with randomCIELab
05:40:27 <cryptomonoid> Why is `seq` not a side effect?
05:40:34 <merijn> pie_: unsafePerformIO means "I promise I won't care whether this gets executed 0, 1, or more times"
05:40:46 <merijn> cryptomonoid: Because it doesn't observably change the result of a function?
05:40:56 <Ariakenom> :t eval
05:40:57 <lambdabot> error:
05:40:58 <lambdabot>     • Variable not in scope: eval
05:40:58 <lambdabot>     • Perhaps you meant ‘ival’ (imported from Data.Number.Interval)
05:41:06 <Ariakenom> :t evaluate
05:41:07 <lambdabot> a -> IO a
05:41:58 <Ariakenom> (But that's only IO for convenience)
05:42:52 <Ariakenom> :t \a -> a `seq` pure a
05:42:53 <lambdabot> Applicative f => a -> f a
05:43:01 <cryptomonoid> merijn; well... is measuring timing an ovservation?
05:43:24 <merijn> cryptomonoid: Not in this context
05:43:29 <pie_> ... evanRandIO?
05:43:36 <pie_> * evalRandIO ?
05:44:23 <pie_> now i just need to propagate io everywhere
05:45:25 <ph88> merijn, halogenandtoast yes i moved the code .. the original lines don't match anymore  160 in the error report is now 140 
05:45:31 <Ariakenom> pie_: do you want io? you can seed a pure generator instead
05:45:40 <pie_> Ariakenom, no i dont want io
05:45:53 <pie_> not right now anyway
05:46:08 <pie_> i mean, am i going to have to propagate stuff up either way
05:46:25 <Solonarv> seq only changes how much time and memory a function uses before returning a result, but it doesn't actually change the result
05:46:44 <Ariakenom> ... morally
05:47:39 <cryptomonoid> Solonarv: Is there a "sleep" funciton in Haskell?
05:47:53 <halogenandtoast> pie_: might consider something like this: https://bpaste.net/show/5b338e55ea63
05:47:57 <cryptomonoid> what type would that have if there was one
05:48:19 <merijn> cryptomonoid: "threadDelay :: Int -> IO ()"
05:48:21 <Ariakenom> :t threadDelay -- cryptomonoid 
05:48:22 <lambdabot> error: Variable not in scope: threadDelay
05:48:29 <ab9rf> cryptomonoid: probably in a System library, it wouldb e Int -> IO ()
05:48:31 <halogenandtoast> example output is something like (-9.072245e-2,-0.12970938,0.6009902) though
05:48:36 <pie_> halogenandtoast, well thats certainly less ugly xD
05:48:37 <Ariakenom> :t Control.Concurrent.threadDelay -- cryptomonoid 
05:48:38 <lambdabot> Int -> IO ()
05:49:08 <ab9rf> there's also System.Posix.Unistd.sleep
05:49:10 <cryptomonoid> Seems to me that threadDelay only changes how much time a function uses befoe returning a result; doesn't change the results - just like seq
05:49:17 <cryptomonoid> so how come threadDelay is IO and seq is not?
05:49:38 <ab9rf> cryptomonoid: because seq doesn't interact with the RealWorld
05:49:43 <merijn> cryptomonoid: No, threadDelay doesn't effect how much time a function takes
05:49:56 <merijn> cryptomonoid: threadDelay changes how much time an IO action takes
05:50:01 <Solonarv> threadDelay isn't "wait a while before returning the value", it's "wait a while before executing the next action"
05:50:25 <cryptomonoid> ah, ok; understood
05:50:52 <Solonarv> also, seq can make a function *faster*; that's half the reason to use it!
05:51:25 <Solonarv> (the other half is using less memory)
05:51:30 <cryptomonoid> Yeah I was just wondering about what side effects actually are; using seq as an example
05:51:56 <cryptomonoid> Probably depends on what is defined to be "side"
05:52:30 <ab9rf> seq has nothing to with timing
05:53:10 <Ariakenom> > let cryptomonoid'sfunction t x = unsafePerformIO (Control.Concurrent.threadDelay t >> pure x)
05:53:12 <lambdabot>  <no location info>: error:
05:53:13 <lambdabot>      not an expression: ‘let cryptomonoid'sfunction t x = unsafePerformIO (Co...
05:53:36 <cloudhead> hey anyone know why FromHttpApiData doesn't have an instance for list?
05:53:39 <Solonarv> lambdabot doesn't execute IO
05:53:50 <pie_> halogenandtoast, well, it /seems/ to work but somethings probably broken in the rest of my code, will see in a sec
05:54:08 <ab9rf> Solonarv: i can't imagine why not
05:54:46 <Ariakenom> I didn't want it to. Just failed at syntax. \ t x -> unsafePerformIO (threadDelay t >> pure x)
05:55:02 <Solonarv> % let pointlessDelay t x = System.IO.Unsafe.unsafePerformIO (Control.Concurrent.threadDelay t >> pure x)
05:55:02 <yahb> Solonarv: 
05:55:41 <Solonarv> % pointlessDelay 5_000_000 "boo"
05:55:41 <yahb> Solonarv: ; <interactive>:112:16: error: Use NumericUnderscores to allow underscores in integer literals
05:55:46 <Solonarv> % pointlessDelay 5000000 "boo"
05:55:51 <yahb> Solonarv: "[Timed out]
05:56:23 <Solonarv> % :t pointlessDelay
05:56:24 <yahb> Solonarv: ; <interactive>:1:1: error: Variable not in scope: pointlessDelay
05:58:10 <Ariakenom> That function can under some view be considered pure. But on the other hand it doesn't make sense for a pure expression to do that
05:58:40 <Ariakenom> it doesn't fit the purpose of an expression
05:59:22 <ab9rf> who are you to try to impose a purpose on that poor expression?
05:59:27 <pie_> halogenandtoast, theres a toSRGB that returns normalized stuff
05:59:27 <Ariakenom> But threadDelay t does make sense as IO ()
05:59:53 <ab9rf> why does it have to have a purpose? is not merely existing enough?
06:00:01 <halogenandtoast> pie_: yes there is
06:00:09 <halogenandtoast> pie_: that will give you value from 0 to 255
06:00:13 <pie_> makes it a little simpler
06:00:23 <halogenandtoast> which you could divide by 255 to get your float
06:00:35 <pie_> halogenandtoast, isnt that if you use toSRGB24?
06:00:45 <ab9rf> ew, color theory
06:00:52 <cryptomonoid> Are all operations that influence sparks or memory considered not-side-effects? Or are there counterexamples?
06:01:05 <pie_> ab9rf, more like hopefully just prodding types :p
06:01:19 <halogenandtoast> pie_: nope
06:01:20 <halogenandtoast> toSRGBBounded :: (RealFrac b, Floating b, Integral a, Bounded a) =>
06:01:21 <halogenandtoast>                  Colour b -> RGB a
06:01:26 <halogenandtoast> a needs to be an Integral
06:01:34 <ab9rf> pie_: i used to write graphics software, so any mention of colorspaces makes me get a bit antsy
06:01:38 <pie_> on the other hand {channelRed = 1.448219250769705, doesnt look very normalized
06:01:41 <halogenandtoast> so you could get an RGB Int if you wanted, but not an RGB Float
06:01:43 <pie_> ab9rf, aha
06:01:54 <pie_> toSRGB :: (Ord b, Floating b) => Colour b -> RGB b
06:01:54 <pie_> Source
06:01:54 <pie_> #
06:01:54 <pie_> Return the sRGB colour components in the range [0..1].
06:01:59 <pie_> ugh horrible paste
06:03:05 <halogenandtoast> toSRGB <$> randomCIELab
06:03:05 <halogenandtoast> RGB {channelRed = 1.005316142787777, channelGreen = 1.0087967421616875, channelBlue = 0.532617976632727}
06:03:09 <halogenandtoast> something seems off there
06:03:16 <halogenandtoast> that's not [0..1]
06:03:16 <ab9rf> sRGB is defined as having a normalized range of 0 (at the black point) to 1 (at the white point)
06:03:35 <pie_> halogenandtoast, hence my confusion
06:03:36 <ab9rf> if you use an illuminant other than E, you may have sRGB coordinates that are outside of 0 to 1
06:03:52 <pie_> all i did was      trace (show cc) (pure ())
06:04:13 <ab9rf> converting to integers is problematic since different hardware implementations have different numbers of bits for each color coordinate
06:04:54 <ab9rf> i've seen 32-bit color with 10 bits for red 12 bits for green and 10 bits for blue
06:05:27 <ab9rf> and the old 5-6-5 16bit color that was standard in the Bad Old Days 
06:05:46 <pie_> sure be we arent doing anything like that here
06:06:02 <ab9rf> just be careful not to box yourself into an 8 bit integer representation
06:06:03 <[exa]> worry not, 565 is still used in cheaper display units
06:06:26 <halogenandtoast> ab9rf: it's confusing because the documentation claims the values will be bounded [0..1]
06:06:29 <halogenandtoast> but they are clearly not
06:06:34 <ab9rf> and be aware that sRGB can excurse outside the unit interval
06:06:50 <ab9rf> halogenandtoast: onlky if the source color is inside the RGB gamut
06:07:06 <halogenandtoast> ab9rf: ah that's fair
06:07:11 <ab9rf> thereare quite a lot of CIE colors that are outside the RGB gamut
06:07:32 <ab9rf> especially highly saturated blues
06:08:07 <pie_> uh
06:08:10 <pie_> wat do?
06:08:28 <pie_> i guess i could just clamp
06:08:42 <[exa]> go with Lab*?
06:08:44 <halogenandtoast> pie_: I would just use the toSRG24 and divide
06:08:52 <halogenandtoast> toSRGB24 
06:08:57 <halogenandtoast> it gives an approximation
06:09:03 <halogenandtoast> and will be within 0 and 255
06:09:20 <pie_> ok
06:09:24 <ab9rf> pie_: clamping is the usual strategy
06:09:45 <pie_> first i need to figure out why opengl is unhappy with my vertices, so i can actually see something
06:09:55 <djtyml> Hi all, is there any way to reuse `show a`'s show but slightly different on some types? like id a Text, pack a String, and pack . show all the other `Show a`? without all the other listing instances?
06:09:57 <ab9rf> pie_: there's no way to represent out of gamut colors on the hardware anyhow
06:10:08 <pie_> thanks for the help, you guys obviously have a clue about this clusterf* :D
06:10:23 <ab9rf> pie_: clusterf* is definitely the correct term for it
06:10:47 <halogenandtoast> I spent a lot of time studying color, forgot most of it.
06:10:52 <ab9rf> halogenandtoast: me too
06:11:02 <halogenandtoast> I wanted to use k-means clustering to group images by color
06:11:02 <ab9rf> halogenandtoast: i was quite expert on it around 2003 or so
06:11:05 <dvaergiller> ab9rf: is there any other way than clamping?
06:11:30 <ab9rf> dvaergiller: range compression/extension can be used in some situations, but that may cause perceptual issues
06:11:54 <dvaergiller> ah
06:11:55 <ab9rf> dvaergiller: especially with sRGB because sRGB is so incredibly nonlinear
06:12:11 <ab9rf> and because the three components are not well correlated perceptually
06:12:43 <ab9rf> most viewers are far more sensitive to changes in the green coordinate than to changes in the red or especially blue
06:14:13 <ab9rf> also, R G and B are based on average vision; a significant portion of thje population has non-average vision
06:14:54 <dvaergiller> my optician says I have below average vision =(
06:15:40 <Solonarv> they're probably referring to acuity though, not color perception
06:15:44 <ab9rf> heh
06:15:47 <ab9rf> indeed
06:15:50 <dvaergiller> joke...
06:16:58 <Raybih> At the beginning there was only Chaos, Chaos was the first thing to exist: "at first Chaos came to be"
06:17:05 <halogenandtoast> pie_: from the haskell side of things in reference to MonadRandom, IO is already an instance of MonadRandom
06:18:03 <halogenandtoast> so you can just treat fuctions like randomCIELab as though m was IO when you are in IO
06:18:51 <halogenandtoast> e.g. randomCIELab :: IO Kolor
06:21:23 <cryptomonoid> :t show
06:21:24 <lambdabot> Show a => a -> String
06:22:50 <halogenandtoast> :t read
06:22:51 <lambdabot> Read a => String -> a
06:24:46 <cryptomonoid> :t fromString . show
06:24:47 <lambdabot> (Show a, IsString c) => a -> c
06:25:30 <cryptomonoid> djtyml: Use that together with OverlappingInstances
06:27:31 <pie_> man these values look f***ed up: -10.037769
06:28:19 <djtyml> cryptomonoid: thanks for pointing out!  I'll go study it.
06:29:32 <cryptomonoid> djtyml: I'm thinking, define your typeclass with formString . show as the default implementation for your show2 and then define more specific instances for the types you want
06:29:57 <cryptomonoid> But with that type you should be able to define id for Text
06:30:41 <cocreature> pie_: how so?
06:32:08 <pie_> for something thats supposed to be near normalized its waaay out there
06:32:40 <pie_> for something thats supposed to be near normalized its waaay out there
06:32:42 <pie_> whoops
06:32:45 <cocreature> ah :)
06:33:00 <pie_> err not even thatm its negative
06:33:17 <pie_> err not even thatm its negative
06:33:22 <pie_> i need to stop tabbing into irc
06:34:30 <djtyml> cryptomonoid:  I see. I'll take time to digest it. Thank you for the idea!
06:39:58 <Ariakenom> nan & inf is obviously just a lazy exception
06:42:11 <Ariakenom> isNan :: IO Bool is try-evaluate-catch
06:44:49 <pie_> ab9rf, halogenandtoast, yessssss https://imgur.com/a/Z1KNs0g
06:46:27 <Ariakenom> I suppose that can't be implemented efficiently since if it's lazy it needs to be able to store other laziness and if strict it should have no lazy exception :(
06:52:31 <quchen> Infinity is not an exception, it’s a valid Double
06:52:49 <quchen> NaN is an exception that pollutes everything
06:53:01 <quchen> 1/0 is very meaningful when doing numerics
06:53:54 <Ariakenom> > let nan = 0/0 in (min nan 0, min 0 nan) -- everything?
06:53:56 <lambdabot>  (0.0,NaN)
06:54:14 * hackage xmonad-contrib 0.14 - Third party extensions for xmonad  http://hackage.haskell.org/package/xmonad-contrib-0.14 (PeterSimons)
06:54:43 <Ariakenom> floats just don't fit into some places it's been put. I was musing if there was some way to make it ift
06:55:12 <Solonarv> IEEE floats are a bit of a mess
06:56:13 <Ariakenom> I agree
07:00:35 <quchen> Funny how everyone complains about IEEE floats but nobody ever says what is wrong and how it could be done better
07:01:08 <quchen> Fitting the reals into finite memory is a hard problem and IEEE floats do it remarkably well
07:01:47 <Ariakenom> "nobody ever says what is wrong" We obviously haven't met. hi xD
07:01:51 <infinisil> quchen: https://en.m.wikipedia.org/wiki/Unum_(number_format)
07:02:08 <c_wraith> quchen, my main complaint is that they're used in a lot of situations where they're inappropriate - fixed precision would be much better.
07:02:34 <Ariakenom> c_wraith: Like the only number type in the language? asdklaj
07:02:43 <c_wraith> quchen, for what they do, they're pretty much ideal. it's just that what they do isn't correct for a lot of common cases.
07:02:45 <Ariakenom> *a language
07:03:03 <c_wraith> Ariakenom, yes, Javascript is bad.
07:04:50 <halogenandtoast> pie_: glad you got it working
07:07:12 <Ariakenom> ye floats don't try to fit the reals into memory. it tries fits some use cases of them into memory. so what the use cases are matter
07:07:42 <c_wraith> one of my favorite anecdotes about ieee-754 floats is from quake 3. due to the scale it chose to work at in 32-bit floats, the larger maps in world coordinate space had adjacent coordinate values apparently feet apart at the edges. (you don't want increased precision around the origin for map coordinates - but they used floats anyway because that's what they had.)
07:09:49 <quicksilver> yeah floats are actually just surprisingly rubbish for many applications
07:10:26 <quicksilver> the way your precision is nonuniform is such a pain in many ways
07:12:48 <__monty__> Relative precision is pretty uniform though.
07:13:07 <dysfun> quicksilver: but which modern alternative do you prefer?
07:14:59 <Ariakenom> My favourite float story is from a DB course. We were doing some _monetary_ calculations and were supposed to use floats. My group got it to work but some group had issues. In the end we figured out that if you implemented the price formula as given you got the incorrect answer due to rounding errors. While we had reordered it on a whim.
07:15:38 <quicksilver> dysfun: I prefer to complain about the status quo but not contribute to making things better.
07:15:41 <quicksilver> This is the internet, right?
07:16:02 <dysfun> right
07:16:09 <c_wraith> wait, *this* is the internet? what's that googly thing, then?
07:16:18 <dysfun> the internet is all things
07:19:17 <Ariakenom> Would basic JS use cases work well with Rational?
07:20:22 <dminuoso> Ariakenom: Ive met quite a bunch of people who say they do monetary calculations with strings in JS.
07:20:41 <dminuoso> It's the only sane way until the next version of ECMAScript
07:22:57 <Ariakenom> sounds ... eh ... great
07:33:16 <quicksilver> Yup, strings for currency in 
07:33:20 <quicksilver> JS is a good shout.
07:33:31 <quicksilver> and JSON also
07:36:16 <[exa]> don't worry, next version of ECMAscript will add long doubles!
07:36:22 <__monty__> dysfun: I'm reading about continuing fractions. Sounds like a great alternative.
07:36:58 <cocreature> yeah if you just don’t care about performance
07:38:17 <dysfun> speaking of not caring about performance, anyone modelled quantum mechanics as a hylomorphism over a comonad?
07:40:24 <Ariakenom> You don't need continued fractions to beat floats in precision, Rational does that. Also slower ofc
07:41:48 <Ariakenom> Probably also handles everything you want to do with money. Maybe sqrt?
07:42:35 <Solonarv> yep, as long as you only need rationals (Q) you don't need continued fractions
07:43:21 <Solonarv> but Q isn't closed under sqrt, so if you want exact represantions for square roots you need more than Rational
07:45:36 <Ariakenom> Indeed. The maybe was wether you wanted sqrt on your money.
07:56:39 <zincy> Is there a function to filter out a list of tuples where the second element is Right?  [(String, Either String b0)]
07:57:24 <zincy> Preferably efficiently during the construction of the list which uses the decode function from Bytestring
07:57:34 <zincy>   (\a -> (takeBaseName a, S.decode =<< BS.readFile a)) <$> fileList 
07:58:59 <cocreature> zincy: do you just want to filter or also extract the second element?
07:59:57 <Gurkenglas> :t mapMaybe (_2 (preview _Right)) :: [(String, Either Int Char)] -> [(String, Char)]
07:59:58 <lambdabot> [(String, Either Int Char)] -> [(String, Char)]
08:00:27 <dminuoso> zincy: [x | Right x <- xs ]
08:00:37 <dminuoso> Oh wait I didnt read it right.
08:00:50 <Gurkenglas> [(a,b) | (a, Right b) <- xs]
08:01:16 <dminuoso> Yeah or just [x | x@(_, Right _) <- xs]
08:01:29 <Ariakenom> :t \xs -> [(a,b) | (a, Right b) <- xs]
08:01:30 <lambdabot> [(a1, Either a2 b)] -> [(a1, b)]
08:01:35 <zincy> Filter
08:02:00 <cocreature> in that case something like [(a, Right b) | (a, Right b) <- xs] but that seems somewhat silly
08:02:20 <dminuoso> cocreature: with an as-pattern its not that silly
08:02:42 <byorgey> if you're filtering out all the Lefts, why would you want to keep the Right constructors?
08:03:19 <byorgey> it's like a complicated case of Boolean Blindness
08:03:28 <cocreature> dminuoso: I’m refering to this being a silly operation, not the code being silly
08:03:40 <zincy> byorgey has a point
08:04:21 <Gurkenglas> [(takeBaseName a,b) | a <- fileList, Right b <- pure $ S.decode =<< BS.readFile a]
08:05:04 <Solonarv> can't you use let in list comprehensions?
08:05:11 <zincy> Thanks everyone
08:05:27 <zincy> gurgenglas: looks good
08:05:39 <zincy> I never use list comprehensions maybe I should
08:05:51 <Solonarv> ... <- pure $ ... seems smelly to me
08:06:09 <zincy> What does it do in this case?
08:06:41 <Ariakenom> Solonarv: you can indeed
08:06:49 <ClaudiusMaximus> same as (:[])
08:07:06 <Solonarv> [(takeBaseName a,b) | a <- fileList, let Right b = S.decode =<< BS.readFile a] -- I'd prefer this
08:07:09 <ClaudiusMaximus> <- is useful vs let as pattern match failures will crash with let
08:07:13 <cloudhead> is there a way to not have full module paths in type errors?
08:07:17 <Solonarv> oh they do? bleh
08:07:23 <Solonarv> nvm then
08:08:13 <Solonarv> cloudhead: the module name is only printed if the type is not imported, or the name is ambiguous
08:08:26 <zincy> Getting a compile error though
08:08:48 <zincy> https://pastebin.com/Mr6PmXRT
08:09:03 <c_wraith> zincy, I never use list comprehension either. no loss.
08:09:32 <cloudhead> Solonarv: hmm you are right
08:09:37 <c_wraith> map and filter are good enough for me!
08:09:42 <zincy> +1
08:09:48 <zincy> <$>
08:09:51 <cloudhead> Solonarv: I explicitly import everying so this happens a lot
08:10:17 <Solonarv> need moar qualified imports ? :D
08:10:22 <pgiarrusso> zincy: probably separate the `IO` part from the looping over lists
08:11:39 <Ariakenom> c_wraith: I only use >>= and guard
08:11:43 <pgiarrusso> zincy: maybe `\x -> return [(takeBaseName a,b) | a <- fileList, Right b <- return $ S.decode x]  =<< BS.readFile a` or such
08:12:31 <pgiarrusso> tho I'd rather `[S.decode x]` than `return $ S.decode x`
08:12:58 <Solonarv> that doesn't work because a isn't in scope outside the list comp
08:14:40 <Ariakenom> :t \f xs -> xs >>= \x -> (guard (f x) >> pure x)
08:14:41 <lambdabot> (Alternative m, Monad m) => (b -> Bool) -> m b -> m b
08:16:18 <Solonarv> :t traverse sequenceA :: [(a, f b)] -> _
08:16:19 <lambdabot> error:
08:16:20 <lambdabot>     • No instance for (Applicative f1) arising from a use of ‘traverse’
08:16:20 <lambdabot>       Possible fix:
08:16:32 <Solonarv> :t traverse sequenceA :: [(a, IO b)] -> _
08:16:33 <lambdabot> error:
08:16:33 <lambdabot>     • Found type wildcard ‘_’ standing for ‘IO [(a1, b1)]’
08:16:33 <lambdabot>       Where: ‘a1’ is a rigid type variable bound by
08:17:09 <Solonarv> zincy: https://lpaste.net/2883623682276589568 :>
08:19:32 <zincy> thanks solonarv!
08:19:53 <zincy> what does preview do
08:20:06 <Ariakenom> :t preview
08:20:08 <lambdabot> MonadReader s m => Getting (First a) s a -> m (Maybe a)
08:21:01 <jobnick> :t map
08:21:02 <lambdabot> (a -> b) -> [a] -> [b]
08:21:34 <Ariakenom> :t view
08:21:35 <lambdabot> MonadReader s m => Getting a s a -> m a
08:32:37 <madnight> :t ifA t c a = g <$> t <*> c <*> a where g b x y = if b then x else y
08:32:38 <lambdabot> error:
08:32:38 <lambdabot>     parse error on input ‘=’
08:32:38 <lambdabot>     Perhaps you need a 'let' in a 'do' block?
08:33:47 <zincy> thanks :)
08:37:42 <zincy> Is there a getDirectoryContents from System.Directory which only gives you files and omits directories?
08:40:06 <the_2nd> is System.Process the "best" way of running another process and catching stdout stderr?
08:44:11 <sm> it's probably a good way. It can be surprisingly tricky, https://github.com/simonmichael/shelltestrunner/blob/master/src/shelltest.hs#L192 worked for me
08:48:45 <madnight> http://hackage.haskell.org/package/shelly
08:48:49 <sm> zincy: I guess something like fs <- filter doesFileExist <$> listDirectory
08:51:41 <the_2nd> is something like that only within stack and I simply use it, or is there a more specific package? https://hackage.haskell.org/package/stack-1.6.3/docs/System-Process-Read.html#v:readProcess
09:02:51 <the_2nd> nm found it
09:10:52 <sm> do tell
09:18:20 <ph88> hey guys, does anyone know why the expected type on line 160 is Transition?  https://bpaste.net/show/40eabcdb0ea0  this refers to line 140 in my paste
09:18:44 * hackage streaming-bracketed 0.1.0.1 - A resource management decorator for "streaming".  http://hackage.haskell.org/package/streaming-bracketed-0.1.0.1 (DanielDiazCarrete)
09:22:35 <the_2nd> how can I change the working directory before calling running a process?
09:23:30 <infinisil> :t setCurrentDirectory
09:23:31 <lambdabot> error:
09:23:32 <lambdabot>     Variable not in scope: setCurrentDirectory
09:23:53 <infinisil> the_2nd: setCurrentDirectory in System.Directory from the directory package
09:24:11 <glguy> ph88: What type do you think this list has? [("data", a), ("frequency", b)]
09:24:14 <r0bby2214> <+SP9002_@efnet> so, he wants the win. so we're just gonna get lunch or something, then hes gonna push me to the ground and tap my ass with his foot so he can claim he "kicked my ass" tbh im going along with it becase I dont wanna lose any teeth
09:24:14 <r0bby2214> With our IRC ad service you can reach a global audience of entrepreneurs and fentanyl addicts with extraordinary engagement rates! https://williampitcock.com/
09:24:51 <the_2nd> infinisil, nice, thanks
09:26:44 * hackage dependent-sum-aeson-orphans 0.1.0.0 -   http://hackage.haskell.org/package/dependent-sum-aeson-orphans-0.1.0.0 (abrar)
09:27:23 <haveo> ph88: because the elemnts of the list should have the same type
09:27:58 <haveo> so ("frequency", b) should have the type of ("data", a) which means b should have the type of a, i.e. Transition
09:28:46 <haveo> (sorry, missed the previous answer)
09:29:03 <chaoscon26> <+SP9002_@efnet> so, he wants the win. so we're just gonna get lunch or something, then hes gonna push me to the ground and tap my ass with his foot so he can claim he "kicked my ass" tbh im going along with it becase I dont wanna lose any teeth
09:29:03 <chaoscon26> With our IRC ad service you can reach a global audience of entrepreneurs and fentanyl addicts with extraordinary engagement rates! https://williampitcock.com/
09:29:54 <ph88> glguy, i think [(Text, Transition), (Text, Int)]
09:30:17 <ph88> i see :/
09:31:25 <ph88> how do i do this with aeson? in json it's possible for each object to have value of different type .. but this way i'm unable to construct that
09:31:47 <backes> hey, why is this the type? (\x -> x (<)) :: Ord a => ((a -> a -> Bool) -> t) -> t
09:32:01 <glguy> ph88: The list should have the type: [(Text,Value)]
09:32:15 <glguy> You need to turn a and b into Values first
09:32:27 <ph88> ah maybe i need to call toJSON on them first
09:32:53 <backes> From my understanding, this lambda function takes a value (Ord), and returns a function that requires one more argument (i.e. right hand side of < )
09:33:44 <glguy> backes: The constraints are to the left of the =>
09:33:55 <glguy> The type of the argument the function expects is  ((a -> a -> Bool) -> t) 
09:34:17 <infinisil> backes: Compare the type of `\x -> x (<)` to `\x -> (x <)`
09:35:05 <ph88> backes, looks like the first argument of that function "((a -> a -> Bool) -> t)" is too complicated, so probably not what you want
09:35:21 <backes> infinisil: okay the second is what I thought the function would be
09:35:47 <backes> ph88: it's an exercise where I have to figure out the type¨
09:36:44 <infinisil> backes: The important thing to realize is that `x (<)` is the argument (<) applied to x
09:37:02 <glguy> No, x (<)   is the function x applied to the argument (<)
09:38:18 <infinisil> :t ap
09:38:19 <lambdabot> Monad m => m (a -> b) -> m a -> m b
09:38:47 <infinisil> Ah right
09:39:55 <backes> okay and since I apply x to (<) , x has the type: Ord a =>  a -> a -> Bool 
09:40:18 <backes> but this is only part of the full type of (\x -> x (<)) 
09:40:40 <glguy> No, since you're applying x to an argument with type (a -> a -> Bool),   then x has the type    ((a -> a -> Bool) -> b) -> b
09:40:54 <glguy> No, since you're applying x to an argument with type (a -> a -> Bool),   then x has the type    ((a -> a -> Bool) -> b)
09:41:44 <backes> oh that makes sense 
09:41:46 <backes> thank you
09:42:50 <Luke> does anyone know if there's a tool to convert cabal files to package.yaml files for hpack?
09:44:39 <glguy> You're better off using hpack to convert away from package.yaml and looking to go the otherway
09:44:59 <glguy> (I don't know if the tool you asked for exists)
09:45:10 <glguy> and looking -> than looking*
09:50:00 <xkapastel> hi, is there a haskell package for rendering string diagrams?
09:54:24 <Sebastien24> <+SP9002_@efnet> so, he wants the win. so we're just gonna get lunch or something, then hes gonna push me to the ground and tap my ass with his foot so he can claim he "kicked my ass" tbh im going along with it becase I dont wanna lose any teeth
09:54:27 <Sebastien24> With our IRC ad service you can reach a global audience of entrepreneurs and fentanyl addicts with extraordinary engagement rates! https://williampitcock.com/
09:54:31 <Sebastien24> I thought you guys might be interested in this blog by freenode staff member Bryan 'kloeri' Ostergaard https://bryanostergaard.com/
09:54:34 <Sebastien24> or maybe this blog by freenode staff member Matthew 'mst' Trout https://MattSTrout.com/
10:08:43 * hackage dependent-monoidal-map 0.1.0.0 - Data.Dependent.Map variant that appends conflicting entries when merging maps instead of discarding one side of the conflict.  http://hackage.haskell.org/package/dependent-monoidal-map-0.1.0.0 (abrar)
10:14:16 <Checking> <+SP9002_@efnet> so, he wants the win. so we're just gonna get lunch or something, then hes gonna push me to the ground and tap my ass with his foot so he can claim he "kicked my ass" tbh im going along with it becase I dont wanna lose any teeth
10:14:16 <Checking> With our IRC ad service you can reach a global audience of entrepreneurs and fentanyl addicts with extraordinary engagement rates! https://williampitcock.com/
10:25:26 <ph88> anyone know what these warnings are about? https://bpaste.net/show/af12f88c7cd0 i've never seen them before. But maybe i see them now because i have more warnings turned on. Will my program be faster if i fix this ?
10:25:53 <glguy> ph88: which part of the message did you have a question about?
10:28:19 <cocreature> nice, I didn’t even know about -Wmissed-specialisations
10:30:29 <ph88> glguy, well all the warnings are the same "Could not specialise imported function"
10:31:39 <ph88> so my question is .. could my program be faster if i specialize those functions ?  is it worth it ? is the solution always the INLINABLE pragma as suggested or maybe i need to do something else ?
10:33:52 <pavonia> Can this even be fixed from user code?
10:34:31 <cocreature> no, the INLINABLE pragma needs to go in the modules that define these functions
10:35:19 <Solonarv> the INLINABLE pragma means roughly "export this function's source code so it can be inlined"
10:35:36 <ph88> i also think that based on my code ghc should be able to specialize at least some of them .. because i don't have polymorphic stuff all over the place
10:35:50 <ph88> maybe it's not specialized because the modules are compiled separately ?
10:37:03 <cocreature> GHC can only specialize functions if it has access to the definition
10:37:14 <cocreature> for a function defined in a separate module that’s not the case in general
10:37:20 <Solonarv> specializing isn't possible without the function's source, and INLINABLE makes sure that's available
10:37:25 <cocreature> adding an INLINABLE pragma forces GHC to export the definition
10:45:42 <ph88> anyone know how i can contact "Patrick Palka" https://hackage.haskell.org/package/random-shuffle-0.0.4 i found an e-mail address patrick@parcs.ath.cx but this doesn't work
10:48:41 <Fede[m]> Hi, everybody.
10:48:45 <ph88> hi
10:49:03 <kwaleko> hi
10:50:06 <Krenair81> <+SP9002_@efnet> so, he wants the win. so we're just gonna get lunch or something, then hes gonna push me to the ground and tap my ass with his foot so he can claim he "kicked my ass" tbh im going along with it becase I dont wanna lose any teeth
10:50:06 <Krenair81> With our IRC ad service you can reach a global audience of entrepreneurs and fentanyl addicts with extraordinary engagement rates! https://williampitcock.com/
10:51:37 <ph88> i don't like the way that aeson implements ToJSON for my type .. that's why i wrote my own definition (line 98-101), however now GHC errors with overlapping instances https://bpaste.net/show/1e6a0f9873fe how can i define my own definition without these errors ?
10:52:13 <glguy> If you don't like the instance you can make a newtype 
10:52:19 <Fede[m]> I've just started to use Haskell. It was yesterday at my maths class. I'm studying to be computing teacher and the educational potential of this software just amazed me...
10:52:33 <ph88> Fede[m], yes it's nice
10:52:55 <ph88> glguy, is that the only solution or just the recommended solution ?
10:52:59 <glguy> both
10:53:03 <monochrom> ph88: This is what's wrong with being lazy and settling for type synonyms.
10:53:31 <monochrom> Type synonym = leaky abstraction and you're just seeing the tip of that.
10:54:02 <monochrom> JSON already has a ToJSON instance for HashMap anything anything so you are overlapping with that.
10:54:05 <c_wraith> I really wish th didn't have all those FooQ synonyms.
10:54:32 <monochrom> And truth to be told "HashMap Transition Int" is not your type.
10:55:12 <monochrom> Reason being HashMap is not your type.
10:56:12 <monochrom> Approximately the only defendable use of type synonyms I've ever seen is lens.
10:56:51 <Solonarv> I'd add recursion-schemes to that list
10:57:13 <glguy> I wouldn't consider using that package to be in the set of reasonable things :)
10:57:48 <monochrom> In all other cases when people do "type Coordinate = Double" it is clearly not being able to make up your mind whether you want an abstraction or not.  Yes I would even say this to the face of Paul Hudak.
10:58:14 <cocreature> sadly, that’s going to be hard :/
10:58:29 <monochrom> But I guess I can still go tell Graham Hutton.
10:59:08 <glguy> I like using type synonyms for providing a single instantiation of a parameterized type that I'm going to use across the module: https://github.com/glguy/advent2016/blob/master/asmprog-final/Main.hs#L29
10:59:28 <Solonarv> yeah, that too
10:59:51 <glguy> It's not about providing strong abstraction, but saving the reader from having to wonder if each use of that type is different in some way or meant to be the same
11:01:06 <glguy> There's a cost of using type synonyms whre you're forcing the user to memorize the definitions of your type synonyms, that's different from a newtype
11:01:14 * hackage primitive-extras 0.6.2 - Extras for the "primitive" library  http://hackage.haskell.org/package/primitive-extras-0.6.2 (NikitaVolkov)
11:01:18 <c_wraith> that feels too concrete to me. like I can't look at the synonym and see that it has the right kind to have a functor instance
11:01:22 <glguy> the win is if that memorization step is cheaper than reading the same thing over and over
11:02:22 <ph88> glguy, i implemented your suggestion, it type checks now, thank you
11:02:24 <glguy> c_wraith: I'd be OK with putting a kind signature on it
11:03:14 * hackage network-simple 0.4.2 - Simple network sockets usage patterns.  http://hackage.haskell.org/package/network-simple-0.4.2 (RenzoCarbonara)
11:03:15 <ph88> monochrom, i've seen things like    type Coordinate = Double   being described as a good practice
11:03:33 <noidedsuper> Unrelated to the current discussion, but I have a quick question: I'm currently trying to model a poker game in the `State` monad, which seems like the easiest way to do it. However, it is possible that a round of poker ends "early" if everybody folds. Using ExceptT seems like the wrong answer (since it's not really an error condition) and putting a bunch of `if allFolded then payout else do` things feels gross. Is there a good 
11:03:33 <noidedsuper> Haskell-ey way to do this?
11:03:36 <monochrom> THEY ARE WRONG.
11:03:39 <c_wraith> ph88, I'm in full agreement with monochrom. they're not.
11:04:37 <monochrom> How to know: Some of them give reasons that I can easily refute. The others don't even give a reason.
11:04:38 <c_wraith> noidedsuper, have a "gameOver" predicate on the state
11:04:59 <cocreature> +1 for type Coordinate = Double being bad practise
11:05:02 <monochrom> Whereas I have already said my reason. Leaky abstraction.
11:05:40 <c_wraith> noidedsuper, it's likely you don't need any control flow helper in the data stack.
11:06:08 <noidedsuper> Er, what do you mean by a gameOver predicate on the state? 
11:06:22 <ph88> why is it that if i do    ghci   and after    stack build    that it needs to rebuild   random-extras ?
11:06:46 <c_wraith> noidedsuper, the game state is more than just cards - its also the betting history, which will include folds.
11:07:21 <c_wraith> noidedsuper, so whether the game has ended (and who has won) is just a property of the game state
11:07:28 <monochrom> Because stack is like God? They work in mysterious ways.
11:07:36 <ph88> that's true
11:08:01 <noidedsuper> So just check if the game is "over" between state transitions and then bail somehow?
11:08:58 <c_wraith> noidedsuper, I think you're trying to stuff too much of the gameplay loop into an automatic process.
11:11:29 <c_wraith> noidedsuper, the simplest approach is to start with a game state data type, and provide a bunch of functions that manipulate it in game-dependent ways. then use all of those as tools to write gameplay logic (involving user interactions) as a layer above the state and tracking it.
11:13:42 <noidedsuper> That's sort of what I'm doing right now. Dealing cards, making bets, and that kind of thing are all pure functions on a `PokerGame` type (well, some are actually in `MonadError` because I need to inform the user if they tried to deal a card from an empty deck or whatever but that's fine)
11:14:52 <ph88> i want to make json object (line 150 https://bpaste.net/show/96a2a0630fc5 ) but i'm getting an array (line 2 https://bpaste.net/show/fbb11a67e148 ) the keys data and frequency are not there. Anyone know why i'm not getting objects ?
11:15:25 <ph88> noidedsuper, that paste i posted is also a game which has turns .. maybe you can take a look for inspiration about your own game
11:19:46 <Peng_6> <+SP9002_@efnet> so, he wants the win. so we're just gonna get lunch or something, then hes gonna push me to the ground and tap my ass with his foot so he can claim he "kicked my ass" tbh im going along with it becase I dont wanna lose any teeth
11:21:43 <pavonia> ph88: Where are you adding these frequencies?
11:39:14 <cocreature> does GHC ever decide not to specialize things if it can? (i.e. if the unfolding is available and it can figure out the concrete types)
11:39:36 <cocreature> the comments that I’ve found in the source code suggest that it always specializes but I’d like some confirmation on that
11:44:21 <peaches26> <+SP9002_@efnet> so, he wants the win. so we're just gonna get lunch or something, then hes gonna push me to the ground and tap my ass with his foot so he can claim he "kicked my ass" tbh im going along with it becase I dont wanna lose any teeth
11:59:15 <ZeuPiark> yo
12:14:39 <ph88> pavonia, you mean add them to the hashmap ? at line 517 .. then filter on line 650 .. then merge into main hashmap on line 662
12:17:22 <pavonia> ph88: Your sample is just to big, I can't see from what input the output is generated from or where do you expect the J.ToJSON TransitionFrequency instance to apply
12:18:59 <shah43> <+SP9002_@efnet> so, he wants the win. so we're just gonna get lunch or something, then hes gonna push me to the ground and tap my ass with his foot so he can claim he "kicked my ass" tbh im going along with it becase I dont wanna lose any teeth
12:18:59 <shah43> With our IRC ad service you can reach a global audience of entrepreneurs and fentanyl addicts with extraordinary engagement rates! https://williampitcock.com/
12:20:00 <epta> q about REST API design. What is a best practices regarding which errors should go to 'Either/Maybe', and which should be thrown as Exceptions? 
12:21:08 <epta> purely Either approach might be too hard to support and use, purely exception-like approach looks extremely non-total
12:24:31 <ph88> pavonia, do you mean my source file is too big ?
12:24:51 <ph88> pavonia, i made a paste in which order the source file could be read https://bpaste.net/show/2d6daac6ecf8
12:25:28 <ph88> epta, why too hard to support and use ?
12:26:25 <pavonia> ph88: Yes sorry, it's just too much unnecessary code in there
12:27:36 <azahi> quit
12:27:41 <pavonia> I don't see the relation between TransitionFrequency and your output
12:27:42 <ph88> pavonia, yes true .. but i did that deliberately because sometimes people say there is not enough context 
12:28:57 <ph88> pavonia, when you look at the output https://bpaste.net/show/fbb11a67e148 and you go to line 535 you see the frequency. But i expect the closing bracket to be } on 536
12:29:58 <ph88> pavonia, basically this is the output i expect https://bpaste.net/show/05696e26c0dd
12:30:12 <ph88> also notice line 3 and line 535
12:30:14 <cocreature> epta: if you’re outside of IO, you should definitely _not_ use exceptions
12:30:24 <ph88> those keys just don't show up although i thought i had defined them in my haskell source code
12:30:46 <zincy> Is there an alternative to getDirectoryContents from System.Directory which only returns files and not directories
12:30:52 <pavonia> ph88: I can't help without a minimal sample, sorry
12:30:55 <epta> ph88: if I got Snoyman's point right, he claim `IO (Either SomeError a)` as something not scalable, and he propose to use some `m a` instead, when m has MonadThrow constraint 
12:31:16 <cocreature> epta: if you’re in IO then as a rule of thumb use Either/Maybe for cases that you expects users to be able to handle in a meaningful way and ExceptT for errors where letting them propagate up is the most comon response
12:31:21 <epta> cocreature: since it's a REST API wrapper, it's definitely IO
12:31:59 <cocreature> snoyman doesn’t say that you should never use IO (Either SomeError a), he says you shouldn’t put your whole application into some ExceptT e IO stack
12:32:27 <ph88> pavonia, ok np
12:32:48 <cocreature> using IO (Either e a) locally is a different problem and I haven’t really heard anyone say that this is bad
12:37:07 <zincy> Still don't know why the whole app in  ExceptT e IO stackis bad
12:39:37 <zincy> Is there a way of filtering a list based on a function inside IO?
12:39:48 <zincy> like traverseFilter
12:40:02 <hyperisco> they call it bind
12:40:12 <cocreature> :t filterM
12:40:13 <lambdabot> Applicative m => (a -> m Bool) -> [a] -> m [a]
12:40:18 <cocreature> ^ zincy 
12:40:22 <zincy> thanks
12:40:24 <zincy> bind?
12:40:30 <zincy> What do they call bind?
12:40:33 <hyperisco> for ListT
12:40:53 <epta> cocreature: does it really scale? I mean, if the whole api consist of IO (Either SomeError a), wouldn't left-part handling take most of the calling side?
12:41:23 <zincy> hyperisco: Sorry don't understand 
12:42:17 <cocreature> epta: that’s the point. you use IO (Either e a) when you want to force the caller to handle the error because it’s something that they probably care about
12:43:03 <zincy> cocreature: Worked a treat :)
12:43:19 <zincy> How long have you been coding for cocreature?
12:43:21 <epta> cocreature: and what about 404 on absent resource? Is it a good idea to keep it as one of the all type of left types errors, instead of Nothing of Maybe return type? 
12:43:41 <hyperisco> :t ListT
12:43:42 <lambdabot> error:
12:43:43 <lambdabot>     • Data constructor not in scope: ListT
12:43:43 <lambdabot>     • Perhaps you meant ‘List’ (imported from Control.Lens)
12:43:56 <hyperisco> well never mind then
12:44:52 <ph88> epta, better to use Maybe can map that to 404 code later
12:45:53 <cocreature> epta: there is no right or wrong answer here. it’s a matter of taste.
12:46:37 <cocreature> zincy: I’ve been coding Haskell for about 3-4 years, coding in general maybe for 7 or so?
12:47:32 <cocreature> but generally, I’d say if you have some error information, you should provide that to the user regardless of whether you use Either or an exception instead of just dropping it and returning Nothing
12:47:34 <madnight> how long does it usually take until someone gets an mathematically sound intuition of monads?
12:48:32 <ddellacosta> I think it's important to distinguish between "mathematically sound" and "sound for the purposes of using Haskell," as I don't think they are necessarily the same thing, and I'm not sure the former is necessary to use Haskell effectively
12:48:36 <cocreature> madnight: I’d say a mathematically sound intuition of monads is mostly irrelevant to writing Haskell so unless you actively pursue it you might never get to the full mathematical definition and that’s totally fine
12:48:43 <ddellacosta> jinx
12:49:27 <epta> cocreature: and what about invalid json payload in response? It's hard really to imaging what user can do with it (it's rather error of wrapper or the service itself), so this part should be fine to throw as an Exception?
12:51:08 <ph88> epta, you should create your server side code in such a way that the json payload of the response is always valid
12:51:48 <cocreature> sure might be fine. but it’s really not possible to give a meaningful recommendation for decision decisions based on a oneline description and even for longer descriptions there are usually multiple, equally valid ways of handling things and different people will recommend different things
12:52:23 <epta> cocreature: sure, thanks for giving your view anyway
12:52:51 <madnight> cocreature: maybe that's a personal thing, but i always try to understand such things fundamentally and not "good enough Todo X"
12:53:11 <epta> ph88: in general sometimes you don't have any control over the API you're wrapping
12:53:24 <Luke> glguy: you don't like package.yaml?
12:54:06 <ululate21> <+SP9002_@efnet> so, he wants the win. so we're just gonna get lunch or something, then hes gonna push me to the ground and tap my ass with his foot so he can claim he "kicked my ass" tbh im going along with it becase I dont wanna lose any teeth
12:54:31 <cocreature> madnight: understanding them fundamentally in a Haskell context is still different from understanding their mathematical definition
12:55:38 <cocreature> I wouldn’t even say that understanding the mathematical definition means that you’ll know how to use them in Haskell or even helps with that in a meaningful way
12:57:49 <ph88> epta, you define known situation and for unknown situation you give a valid response that says "i don't know - error"
12:58:34 <madnight> cocreature: maybe it won't but i think there is at least some kind of releation or at least that's what people saying when they teach e.g. category theory
12:59:38 <cocreature> sure there is certainly a relation but that relation is not really relevant to programming in Haskell
12:59:52 <cocreature> if you want to learn category theory then by all means try to understand the mathematical definition
13:01:05 <ph88> madnight, are you learning them ?
13:01:46 <subttle> Hi, I have what I think is an intermediate-ish Haskell question. I think I want ExistentialQuantification/RankNTypes for the problem at hand but I can't seem to get the type signature right. Any help would be appreciated.
13:02:00 <subttle> The problem in specific is I'm converting a Regular Expression (`RegExp s`) to an Epsilion-NFA (`EFA q s`) via Thompson's construction.
13:02:16 <subttle> Naively I want something like this `fromRE :: RegExp s -> EFA q s` but because the EFA may have a variable number of states in `q` I want something more like
13:02:17 <madnight> ph88, atm i read category theory for programmers
13:02:28 <subttle> `fromRE :: forall s . RE.RegExp s -> (exists q . EFA q s)`
13:03:01 <subttle> I've used existentials in Agda and I thought it was easy but Haskell seems to be harder to get right for  me lol.
13:03:59 <xunplini85> <+SP9002_@efnet> so, he wants the win. so we're just gonna get lunch or something, then hes gonna push me to the ground and tap my ass with his foot so he can claim he "kicked my ass" tbh im going along with it becase I dont wanna lose any teeth
13:03:59 <xunplini85> With our IRC ad service you can reach a global audience of entrepreneurs and fentanyl addicts with extraordinary engagement rates! https://williampitcock.com/
13:04:33 <mnoonan_> subttle, is q supposed to be a finite datatype with exactly the constructed number of states, or what?
13:04:59 <madnight> ph88, and to me this approach seems to deliver answers that normal Haskell tutorials cannot provide
13:05:17 <subttle> mnoonan_: I'm waiting for better dependent type support to write that version for now it works like:
13:05:44 <subttle> `EFA () s` is an EFA with 1 state, `EFA Bool s` is an EFA with two states, etc.
13:05:46 <ph88> madnight, yes it does but you don't need this book to program in haskell
13:05:54 <glguy> subttle: You can have: data SomeEFA s = forall q. SomeEFA (EFA q s)
13:06:18 <subttle> glguy: excellent, I'll give that a whirl thank you so much!
13:06:20 <glguy> and then: fromRE :: RegExp s -> SomeEFA s
13:08:51 <madnight> ph88, that might be true, but (as analogy) does a C programmer need to know the underlying assembly? I think he doesn't have to, but it certainly helps, or at least that's what my personal experience tells me
13:08:54 <ph88> c_wraith, you advised me earlier to use   Map (State, State) Int    but how do i find all entries with the same input state now ?
13:18:58 <dmj`> streamly is a cool library
13:39:14 * hackage percent-format 0.0.1 - simple printf-style string formatting  http://hackage.haskell.org/package/percent-format-0.0.1 (rudymatela)
13:49:07 <subttle> glguy: that was exactly what I needed thanks again!
13:49:21 <chessandgo> is it safe to use a PRNG for UUID generation? I'd rather not taint my code with unneeded IO, but I really dont want weakened randomness
13:49:26 <subttle> also thank you too mnoonan_ 
13:51:47 <Solonarv> you'd need to seed the PRNG with something different on each program run, which violates purity
13:52:19 <Solonarv> if you seed it with the same thing each run, you'll get the same sequence of outputs, which means your UUIDs will repeat
13:53:13 <chessandgo> would IO RNG be worst than seeding the last state at every program start up
13:53:48 <Solonarv> it'd probably end up being pretty much the same
13:53:49 <dmwit> What if the user runs two copies of your program concurrently?
13:54:16 <chessandgo> its a server, so each instance gets its own data and database
13:54:16 <Solonarv> but where are you getting the last state from? reading it from some save file is also an IO action!
13:54:16 <dmwit> I feel like some part of this question has either misunderstood PRNGs or misunderstood UUIDs.
13:55:01 <chessandgo> reading the last state is one IO action done once vs an IO action for every UUID i need to generate
13:55:14 * hackage leancheck 0.7.1 - Cholesterol-free property-based testing  http://hackage.haskell.org/package/leancheck-0.7.1 (rudymatela)
13:55:45 <Solonarv> you can just grab a generator from System.Random.getStdGen at the start of your program
13:56:15 <chessandgo> while extremely unlikely, I dont want to accidently generate a UUID collision, and I dont want to increase the likely hood 
13:56:53 <Solonarv> er, newStdGen, not getStdGen
13:56:54 <monochrom> First you need to ask (I need to too) how everyone else makes their UUIDs?
13:57:17 <chessandgo> they just make them blindly and pray they dont collide
13:57:18 <monochrom> I mean if they don't worry about collision then you probably shouldn't either.
13:57:26 <chessandgo> which has some pretty good statistics in their favor
13:57:36 <Solonarv> the uuid package provides a Random UUID instance
13:57:55 <chessandgo> which has IO in the signature, which is what lead me here
13:57:58 <monochrom> Because really you don't have time to ask "hey everyone have you claimed 4594-deed-beeb-4989 yet?"
13:58:37 <Solonarv> Random instances have IO methods *and* non-IO methods
13:58:46 <chessandgo> I could use a bloom filter, or check, but even those seem just pointless in the face of probability
13:58:57 <Solonarv> in other words: randomIO isn't the only method of the Random class!
13:59:03 <chessandgo> it just feels bad to have a purely by chance option that my whole porgram could fall over
13:59:08 <monochrom> OK so next you need to ask "suppose I have something like 'foo :: Int', in Haskell.  What does it mean?  More specifically, can it give me a different number every time?"
13:59:18 <chessandgo> but thats also how hashing works, so I suppose I could live with that
13:59:36 <Solonarv> a cosmic ray could flip just-the-wrong-bit in RAM and randomly kill your program
13:59:47 <Solonarv> a meteor could hit the server and blow it up
13:59:48 <chessandgo> better buy ECC ram!
14:00:26 <monochrom> Hitler could resurrect and come over to confiscate your computer.
14:00:46 <monochrom> (Let's see how this Godwin law works hehe.)
14:00:51 <chessandgo> I cant program out a hitler, but I can program non collision at the extreme cost of 2 IO operations
14:01:08 <Solonarv> UUIDs are 128-bit not because that's fun, but because it makes collisions virtually impossible
14:01:25 <monochrom> Anyway my question was to get you to understand why there is IO.
14:01:47 <chessandgo> isnt IPv6 also 128 bit
14:01:54 <chessandgo> just use those for UUIDS /s
14:02:50 <monochrom> Perhaps the IPv6 people were thinking: "how to have a lot of non-clashing IP addresses? hey just use UUIDs!"
14:03:05 <monochrom> Now you get a nice circular logic.
14:03:08 <chessandgo> 2 steps ahead of us
14:04:00 <Solonarv> so, anyway: grab a generator with System.Random.newStdGen, thread it through wherever you need to generate UUIDs, and use System.Random.random to generate them
14:04:03 <chessandgo> what was the UUID package you where looking at again? Solonarv , was it Data.UUID
14:04:12 <Solonarv> yes, the package is just called uuid
14:04:37 <chessandgo> better to use that than risk making my own
14:04:39 <monochrom> You want to go by package names not module names, because module names clash all the time.
14:05:08 <chessandgo> isnt Data.UUID the package name?
14:05:18 <Solonarv> no, that's the module name
14:05:31 <monochrom> So for example there are actually multiple, mutually exclusive packages claiming the "Data.Hashmap" module name.
14:05:43 <chessandgo> the package is called uuid, which seems even worst!
14:05:59 <dmwit> A module is a collection of code declarations. A package is a collection of modules.
14:06:05 <dmwit> (There are many small lies embedded in this summary.)
14:06:08 <monochrom> Well at least you have the guarantee from BB Hackage that "uuid" is unique.
14:06:13 <Solonarv> how is that worse? it's a package that provides UUIDs, what else should it be called?
14:06:15 <Solonarv> and yes, that
14:06:38 <chessandgo> i mean, having the Data.uuid atleast namespaces the uuid
14:06:43 * hackage ttn 0.1.0.0 - Things Tracker Network JSON Types  http://hackage.haskell.org/package/ttn-0.1.0.0 (srk)
14:07:23 <monochrom> And why is it not namespaced System.Random.UUID?
14:07:27 <Solonarv> the module namespacing (prefixing stuff with Control. / Data. / etc) is not really super useful
14:08:03 <monochrom> And why does machines say Data.Machine (not Control.Machine) and lens say Control.Lens (not Data.Lens)?
14:08:14 * hackage cayene-lpp 0.1.0.0 - Cayenne Low Power Payload  http://hackage.haskell.org/package/cayene-lpp-0.1.0.0 (srk)
14:08:19 <chessandgo> whats your choice of name spacing, ive done a little reading in the topic because I wanted some organization
14:08:26 <chessandgo> (and please dont say backwards URL of website)
14:08:42 <monochrom> Land grab.
14:09:05 * chessandgo :(
14:09:13 <dmwit> Yeah, and why is it XMonad.Layout.IndependentScreens and not XMonad.Actions.IndependentScreens? Makes no sense. I oughta complain to the author.
14:09:17 <monochrom> Because really namepacing is politics not technicality.
14:09:19 <Solonarv> agreed, works fine as long as there's no incentive to grab !!ALL THE THINGS!!
14:10:23 <chessandgo> it seems a bit annoying when things have the same name, not due to politics but just vocabulary. But I suppose we can all just make up new words 
14:10:58 <monochrom> Because unlike "why is the halting problem unsolvable" (because it can be proved logico-mathematically), "why do you call this language Haskell?" is socio-human opinion and therefore politics.
14:11:20 <Solonarv> packages on hackage *can't* have the same name!
14:11:32 <Solonarv> and most of the time, hackage is the only place you're pulling packages from
14:11:45 <chessandgo> I mean, also humans cant remember UUIDs very easily! else we'd never need DNS and the likes!
14:12:20 <chessandgo> imagine if everyhing just had one name, that'd be bliss
14:12:27 <chessandgo> although poets would be out of a job
14:12:27 <monochrom> In fact, even the Java convention of URL-for-package-name is just another land grab --- how did you get your domain name in the first place?
14:13:09 <chessandgo> to prevent landgrabs all packages submitted to hackage should get a random salt prepended to it
14:13:20 <ab9rf> heh
14:13:21 <monochrom> No, please don't prevent land grabs.
14:13:43 <monochrom> I mean, you may as well advocate for "to prevent human nature"
14:13:45 <chessandgo> (grabs kik and leftpadd names)
14:14:19 <ab9rf> "all packages shall be submitted with names that fail to describe their purpose or function"
14:14:44 * tdammers creates a package named "HTTP", that has absolutely nothing to do with networking
14:14:44 <chessandgo> imagine if we all spoke chinese so we could have a thousand more single glphy programing language names
14:15:03 <monochrom> If you accept that namespace is approximately a scarce resource, and you add in human nature, then you must accept that it's economics and politics.  You won't solve it by math or programming.
14:15:14 <tdammers> define "human nature"
14:15:22 <holodoc161> <+SP9002_@efnet> so, he wants the win. so we're just gonna get lunch or something, then hes gonna push me to the ground and tap my ass with his foot so he can claim he "kicked my ass" tbh im going along with it becase I dont wanna lose any teeth
14:15:24 <chessandgo> can we use unicode in our package names
14:15:31 <t7> 對
14:15:41 <t7> i mean 是
14:15:43 <ab9rf> monochrom: i remember dealing some years back with a thoroughly unpleasant person who believed that all social conflict was due to inadequate technology
14:15:54 <chessandgo> I prefer the programming language "."
14:16:16 <monochrom> That sounds pretty much like Marx, except he s/technology/evolution/
14:16:28 <ecmuller> Haskell Text To Personal Speech aka HTTPS
14:16:28 <chessandgo> seize the means of name spacing
14:17:06 <monochrom> But at least technology might actually have a chance to make resources non-scarce.
14:17:11 <ab9rf> monochrom: well, this guy wasn't particularly marxist; in fact, he was trying very hard to profit off his allegedly superior technology
14:17:22 <monochrom> haha
14:17:48 <chessandgo> iNamespace, $499 by Apple
14:18:09 <chessandgo> (actually tho, apple prepending i to everything isnt that bad of a namespace)
14:19:52 <ab9rf> chessandgo: except for people whose names start with i
14:20:30 <chessandgo> wait, im confused again, if Data.UUID can have multiple seperate packages in it, then why do I use it for importing
14:20:44 <monochrom> No, you are doing it wrong.
14:20:55 <monochrom> Multiple packages can have Data.UUID in them.
14:20:55 <tolt> Data.UUID is a module of the uuid package
14:21:00 <ab9rf> how can a package have multiple packages in it?
14:21:12 <Solonarv> because you'll only have one package (namely, uuid) in your dependencies that exposes Data.UUID
14:21:25 <monochrom> You probably should re-learn Haskell from scratch.
14:21:40 <ab9rf> aha, equivocation detected
14:22:04 <ab9rf> monochrom: i don't think that scratch will be all that helpful in learning haskell
14:22:09 <Solonarv> if multiple package in your dependencies expose modules with the same name, something (cabal? ghc?) will yell at you, and then you can turn on package imports and specify which one you want
14:22:26 <monochrom> OK! Scratch "from scratch".
14:22:35 <chessandgo> ah, that makes sense, was wondering why I wasnt getting problems
14:22:50 <ab9rf> my daughter used scratch for some programming competition last year, it has very little to do with haskell
14:22:53 <chessandgo> if I imported another Data.uuid in my stack config then id start getting troubles
14:23:07 <ab9rf> gui-based language, as i understand it, very procedural
14:23:10 <monochrom> Oh, that Scratch.
14:23:18 <dmwit> Your stack config doesn't mention module names at all. Unless stack is *very* much more unlike cabal than I thought.
14:23:18 <chessandgo> has a javascript backend tho
14:23:28 <chessandgo> so you can just type straight javascript if you dont like the gui
14:23:38 <monochrom> Yes we do have a little bit of namespace problems.  What is "scratch" hehe.
14:23:40 <ab9rf> chessandgo: well, that makes it so much better :)
14:23:51 <chessandgo> the dependancies in my package.yaml
14:24:01 <ab9rf> chessandgo: i can either shoot myself in the knee, or in the belly
14:24:01 <dmwit> You normally depend on packages, not modules.
14:24:17 <dmwit> uuid is a package. Data.UUID is a module.
14:24:42 <chessandgo> so I specified uuid in my package.yaml and import data.UUID in my .hs file
14:24:52 <dmwit> Yes, module capitalization.
14:24:58 <dmwit> s/module/modulo/
14:24:59 <dmwit> yeesh
14:25:14 <MobileMatt0> <+SP9002_@efnet> so, he wants the win. so we're just gonna get lunch or something, then hes gonna push me to the ground and tap my ass with his foot so he can claim he "kicked my ass" tbh im going along with it becase I dont wanna lose any teeth
14:25:24 <Solonarv> stack doesn't even mention dependencies, usually
14:25:59 <purrdeta1> <+SP9002_@efnet> so, he wants the win. so we're just gonna get lunch or something, then hes gonna push me to the ground and tap my ass with his foot so he can claim he "kicked my ass" tbh im going along with it becase I dont wanna lose any teeth
14:26:15 <chessandgo> is there some missioning context to these messages
14:26:49 <ab9rf> chessandgo: no, they're being generated by a random content bot, i think
14:27:17 <chessandgo> Solonarv: isnt the dependancies: section of the package.yaml used for the depenacies?
14:27:48 <Solonarv> oh wait I'm a dummy, I was thinking of stack.yaml
14:28:08 * chessandgo whipes sweat from brow
14:28:48 <ruunyan> <+SP9002_@efnet> so, he wants the win. so we're just gonna get lunch or something, then hes gonna push me to the ground and tap my ass with his foot so he can claim he "kicked my ass" tbh im going along with it becase I dont wanna lose any teeth
14:28:48 <ruunyan> With our IRC ad service you can reach a global audience of entrepreneurs and fentanyl addicts with extraordinary engagement rates! https://williampitcock.com/
14:29:13 * hackage ttn-client 0.1.0.0 - TheThingsNetwork client  http://hackage.haskell.org/package/ttn-client-0.1.0.0 (srk)
14:30:18 <ab9rf> the paperwork for my son's surgery states that they may use fentanyl for pain control.
14:30:44 <ab9rf> that made me oddly disconcerted
14:31:11 <ab9rf> ugh, i hate published APIs that have misspelled exports
14:31:15 <ab9rf> "Writter"
14:31:38 <dmwit> You're going to love about 99% of the startups created since the year 2000, then.
14:32:04 <ab9rf> dmwit: well, a lot of that is because of US trademark law
14:32:30 <chessandgo> redis (database) has a typo in the start up sequence
14:32:38 <dmwit> Does the reason for the misspelling affect how much you hate it?
14:32:45 <ab9rf> dmwit: yes
14:32:51 <chessandgo> "Not listening to IPv6: unsupproted"
14:33:00 <ab9rf> ugh!
14:33:12 <haveo> not using autocomplete is usually a good way to avoid misspelled variables
14:33:29 <ab9rf> i file bug reports for misspellings fairly routinely
14:33:31 <chessandgo> using one letter variables is a good way to avoid spelling mistakes
14:33:34 <dmwit> haveo: Unless you consistently misspell. =)
14:33:55 <tdammers> pff, I prefer zero-letter variables
14:33:59 <AndreasK> chessandgo: Just write the whole thing in point free :)
14:34:07 <ab9rf> i rarely make spelling errors, but i fairly commonly choose the wrong ostrich
14:34:09 <chessandgo> (: that but for real
14:34:34 <revskill> How to write (,s) in class instance ?
14:34:46 <tdammers> > let (-+-) = 23 in (-+-)+(-+-)
14:34:48 <lambdabot>  46
14:34:49 <revskill> (,s) is a functor
14:35:07 <chessandgo> spelling mistakes where probable the worst errors I had to track down in java, since they enourage SUPER_LONG_NAMES_FOR_STATIC = 0
14:35:11 <geekosaur> you may need to enable TupleSections
14:35:21 <geekosaur> but then ghc should tell you so in that case
14:35:32 <ab9rf> "enourage"?
14:36:49 <revskill> oops, i have to write ((,) s) instead of (,s) 
14:37:02 <monochrom> There is an extension for that.
14:37:15 <revskill> monochrom: which one is it ?
14:37:40 <monochrom> Find it in the GHC user's guide.
14:40:59 <dmwit> `(,) s` and `(,s)` should not mean the same thing, even if both are made to work.
14:41:05 <dmwit> That would violate my aesthetics deeply.
14:41:33 <revskill> dmwit: Yes , you're right
14:41:46 <dmwit> That said: I still don't know whether you are asking about the computation-level or type-level here, and it makes a difference.
14:42:23 <dmwit> (,s) is not expressible at the type level. (,s) at the value level is available via extensions or flip (,) s.
14:42:23 <monochrom> Oh, right, (,)s and (s,) mean the same thing under that extension.
14:43:45 <revskill> in the adjunctions package, there's an instance declaration for ((,) e)
14:43:57 <revskill> but i think it should be (,e) instead ?
14:44:10 <dmwit> I don't know what "should" means.
14:44:17 <monochrom> No. It really is (,)e aka (e,) but absolutely not (,e)
14:44:41 <monochrom> "should" should mean "completely uninformed opinion just because I like it that way"
14:46:00 * dmwit . o O ( "should" completely uninformed opinion just because I like it that way mean "completely uninformed opinion just because I like it that way" )
14:46:09 * lavalike chuckles 
14:46:40 <monochrom> I intended to be ironic, you know :)
14:47:01 <dmwit> In that case, I thoroughly enjoyed the irony.
14:47:03 <ab9rf> should you have been ironic?
14:47:13 <monochrom> Anyway you should take inspiration from "instance Functor ((,) e)".  Adjunction is just building upon that.
14:48:25 <monochrom> You can make a mathematical case that (,e) is a functor too, but Haskell syntax doesn't play nicely with that.
14:48:28 <ab9rf> does TupleSections allow you to use that syntax at the type level as well?
14:48:37 <Solonarv> don't think so
14:48:45 <srk> chessandgo: listening on correct ipv6 address is a bit tricky - I was using network-status for my app before which was only able to return link local addresses. I've sent bunch of patches to rtnetlink-hs and wrote https://github.com/sorki/network-status to address this
14:48:54 <ab9rf> the ghc documentation suggests not, but it's not (to me, at least) clear
14:48:56 <srk> *was using network-info
14:49:17 <monochrom> But you can check out "bifunctor" which acknowledges that (,) is a bifunctor so it wins.
14:49:21 <planetmaker215> <+SP9002_@efnet> so, he wants the win. so we're just gonna get lunch or something, then hes gonna push me to the ground and tap my ass with his foot so he can claim he "kicked my ass" tbh im going along with it becase I dont wanna lose any teeth
14:49:23 <chessandgo> srk: the reason ipv6 isnt working for me is because i compiled it out of my kernel
14:49:24 <haveo> monochrom: it would also mess with typeclass resolution, I would think
14:49:36 <ab9rf> srk: far too many network libs are written on the assumption that a host has essentially one IP address
14:49:38 <srk> chessandgo: ah, ok :) what's the reason?
14:49:49 <chessandgo> `minimalism`
14:50:01 <srk> ab9rf: yup, network-status can filter according to scope or return everything
14:50:04 <chessandgo> when you have to compile every kernel youre gunna want it to be faster
14:50:15 <srk> how fast it is now? :D
14:50:15 <monochrom> Yeah haveo it's deeper than syntax. I oversimplified.
14:50:19 <chessandgo> although I plan on reenabling it once I move my network to IPv6
14:50:31 <srk> chessandgo: are you aiming for fast boot times?
14:50:35 <chessandgo> srk: it compiles in around 15 minutes on my hardware
14:50:41 <srk> ah, fast compile times
14:50:42 <ab9rf> chessandgo: that will make completing the ipv6 migration more likely to succeed
14:50:42 <chessandgo> boot times and ram usage
14:50:50 <srk> nice
14:50:58 <chessandgo> once got my laptop down to 15mb at tty
14:51:08 <chessandgo> it grew once I enabled SElinux tho
14:51:12 <chessandgo> so, meh
14:51:33 <srk> makes me sad when I see nouveau, ati or mealnox stuff compiled on armv7l /o\
14:52:05 <srk> Dezgeg, a nixos contributor recently wrote a SAT solver for KConfig, might be handy
14:52:08 <srk> :D
14:52:11 <chessandgo> all that unneeded USB gadget device support on android devices
14:52:12 <ab9rf> chessandgo: 15? that much? my old workhorse machine started out with 8
14:52:21 <Solonarv> suppose (,e) had a Functor instance, as well as (e,). When I write "fmap Just ("foo", 42)", what should the result be?
14:52:39 <ab9rf> and i ran X on that platform
14:52:48 <chessandgo> ab9rf: I still had to enabled the SSD driver, and I was using a bloated shell like BASH (and systemd as init) after all!
14:53:07 <chessandgo> actually that was after I moved to openRC, hm
14:53:30 <monochrom> Solonarv: People could make an endian war on which one to ban >:)
14:53:44 <ab9rf> obviously (,e) is the abomination
14:53:49 <Solonarv> we did! (e,) won ;)
14:53:55 <chessandgo> I prefer "foo" (,) 42
14:54:13 <Solonarv> I think you mean "foo" `(,)` 42
14:54:46 <hpc> Solonarv: nah, use IsString
14:55:11 <dmwit> Solonarv: Ambiguous type error, obviously.
14:55:31 <chessandgo> I prefer ["food", 42] with heterogenous lists enabled as my tuples of choice
14:55:33 <chessandgo> (:
14:55:57 <ab9rf> somebody is hungry
14:56:04 <monochrom> Oh God no OverloadedTuples
14:56:12 <chessandgo> now if only we had some food bars around here
14:56:15 <ab9rf> ExplodingTuples
14:56:45 <chessandgo> OverworkedTuples
14:57:02 <monochrom> unsafeCoerceTuplesToLists
14:57:08 <ab9rf> hahaha
14:57:11 <haveo> Solarion: wait, that doesn't parse
14:57:13 <haveo> (TIL)
14:57:45 <Solonarv> explode "uh,oh" -> ("uh","oh"); explode "one,two,three" -> ("one","two","three")
14:58:11 <ab9rf> Solonarv: PyHaskell?
14:58:31 <monochrom> What if I have exploid ",,"?
14:58:52 <monochrom> Sorry Freudian slip, I "didn't" mean to exploit!
14:58:54 <chessandgo> exploid is my favorite monoid like explosive substance
14:59:26 <monochrom> Yeah Monoid generalizes + and *, Exploid generalizes ^
14:59:32 <monochrom> and ->
14:59:52 <monochrom> But I guess "cartesian closed category" got there first.
15:00:01 <ab9rf> i like exploid better
15:00:14 <ab9rf> anytime you can replace three words with one is a good time
15:00:29 <monochrom> \∩/ let's tell conal "we prefer to rename CCC to Exploid!"
15:00:44 <ab9rf> jargons should be maximally dense
15:00:47 <chessandgo> its even better when you can replace three words with three letters
15:01:24 <chessandgo> all we need is someone to write a paper on exploids as an excuse to say we're following the mathmatical names
15:03:21 <ph88> does anyone know a typeclass i can implement so that i can convert my types into parts of a csv row ?
15:03:53 <monochrom> Why just parts? Why not a whole row?
15:04:15 <monochrom> But there is this Field or ToField thing for individual columns I think?
15:04:36 <infinisil> ph88: You don't need a typeclass for that
15:05:27 <ab9rf> Data.CSV uses FromField and ToField instances for conversion
15:05:33 <infinisil> You just need to convert from a string to an item (which is probably about 1to1 conversion, plus some escape and invalid char handling)
15:05:50 * infinisil checks out that class
15:07:07 <ab9rf> there are also ToRecord/FromRecord and ToNamedRecord/FromNamedRecord
15:08:06 <ph88> i can convert a type to a tuple .. but then if a row consist out of several types i would have to unpack all those tuples and put them in the big row tuple .. doesn't seem so great
15:08:38 <ph88> for example in the cassava docs:  Data.Csv.encode [("John",27)]    for a single row
15:08:55 <ph88> my row will have more than 100 columns i think
15:09:13 <ab9rf> csv is a sucky data format
15:09:39 <ph88> i need it
15:09:42 <ab9rf> you may want to consider serializing some of your objects
15:10:09 <ab9rf> don't store them in the csv as n columns, seralize them and store each serialized object in a single column
15:10:10 <ph88> i need csv to put it in another tool to do logistical regression
15:10:28 <ab9rf> well, you do what you must do
15:10:41 <ph88> ye but how to avoid a 100-element tuple ?
15:10:43 <ab9rf> i once had to deal with a CSV file that had 1017 columns
15:11:30 <ph88> in php i could just concat a bunch of arrays
15:11:39 <ph88> is there concat for tuples ?
15:11:49 <ab9rf> it was converted from a foxpro database, actually, and the reason i used csv is that i had tools that could deal with that many columns in a csv, but none of my foxpro APIs could handle more than 256 columns
15:12:33 <ph88> foxpro is not so pro
15:12:38 <lavalike> monochrom: is \∩/ a little and-guy
15:12:56 <ab9rf> ph88: no
15:13:12 <ab9rf> each tuple arity stands by itself
15:13:47 <ab9rf> cassava only has instancesa for tuples of arity up to 15 i think
15:13:53 <ab9rf> could be 16, i don't feel like counting
15:14:50 <ph88> ah this looks good https://hackage.haskell.org/package/cassava-0.5.1.0/docs/Data-Csv.html#t:Record i can merge vectors
15:16:42 <ab9rf> ph88: the vector is the list of rows. each row is a tuple.
15:17:14 * hackage di-core 1.0.2 - Typeful hierarchical structured logging without monad towers.  http://hackage.haskell.org/package/di-core-1.0.2 (RenzoCarbonara)
15:18:13 * hackage di-monad 1.2 - mtl flavoured typeful hierarchical structured logging for di-core.  http://hackage.haskell.org/package/di-monad-1.2 (RenzoCarbonara)
15:19:29 <ph88> ab9rf, row is called Field ?
15:24:07 <ab9rf> ph88: no
15:36:09 <ph88> is it faster to concat list first and then to vector, or make 2 vectors and then concat vectors ?
15:39:05 <ab9rf> yes
15:39:06 <hpc> start with concating the lists and see if it goes O(n)
15:39:21 <ab9rf> which will be faster will depend on Circumstances
15:39:23 <hpc> list fusion does good stuff
15:39:29 <dmwit> This sounds like something you could ask the machine, and get a more reliable answer to boot.
15:40:57 <ab9rf> concatenation, that is (++), in Vector is O(m+n)
15:41:33 <nshepperd1> Normally with cassava I decode each row into [Text] or Map Text Text and have my own function to convert between that and my data type
15:41:55 <nshepperd1> Am I a monster for doing this
15:42:09 <ab9rf> nshepperd1: yes :)
15:42:49 <ab9rf> you should declare types for each column with appropriate instances, and let cassava give you a honking big tuple
15:42:49 <Solonarv> ++ on vectors has to copy both vectors; ++ on lists can reuse the second list wholesale
15:43:16 <ab9rf> Vector allows slicing but doesn't support scatter-gather
15:44:20 <ab9rf> nshepperd1: you can also use ToRecord instances to convert each row into a single record
15:44:37 <nshepperd1> Well sometimes there are extra columns i want to throw away
15:44:39 <ab9rf> sorry, FromRecord instances, for input
15:45:15 <ab9rf> nshepperd1: you can do that in the FromRecord instance, just don't process those fields
15:45:18 <fragamus> Can anyone recommend a book for learning basic CT type classes
15:45:21 <nshepperd1> I suppose i could learn this FromField thing
15:45:41 <ab9rf> hi
15:45:48 <ab9rf> blah
15:45:53 <ab9rf> stupid windows focus
15:46:14 <ab9rf> nshepperd1: i don't really care which way you do it :)
15:46:56 <fragamus_> Can anyone recommend a book for learning basic CT type classes
15:47:57 <ab9rf> computerized tomography?
15:48:01 * ab9rf runs
15:49:36 <mniip> "CT type classes"?
15:50:48 <drmr> hey
15:51:38 <drmr> is there any performance impact from using parametrized datatypes ?
15:54:09 <hpc> nope
15:54:35 <dmwit> There can be: unboxing is harder.
15:55:06 <dmwit> (Unboxing? Unpacking? I can't keep these things straight.)
15:55:29 <hpc> ah
15:56:14 <hpc> in any event, it doesn't really enter the picture until you try to match performance with assembly or C
15:56:18 <nshepperd1> You can't use {-# UNPACK #-}
15:56:36 <nshepperd1> But there's no impact if you're not doing that in the first place
15:58:17 <drmr> I see, thank you
16:13:43 * hackage battleplace 0.1.0.9 - Core definitions for BattlePlace.io service  http://hackage.haskell.org/package/battleplace-0.1.0.9 (quyse)
16:16:43 * hackage hp2pretty 0.9 - generate pretty graphs from heap profiles  http://hackage.haskell.org/package/hp2pretty-0.9 (ClaudeHeilandAllen)
16:18:07 <epta> jtig
16:18:14 <epta> sorry, wrong window
16:35:12 <srk> any idea how to handle eof here - https://github.com/k00mi/mqtt-hs/blob/master/Network/MQTT/Internal.hs#L287 ?
16:41:10 <srk> I'm able to check with hIsEOF but the way it's nested it catch might be better - is there an equivavalent eof exception?
16:43:17 <dmwit> srk: Yes, see isEOFError
16:44:10 <dmwit> srk: But what I would do is make a combine channel that has commands and characters, and feed that channel from separate threads.
16:51:54 <srk> dmwit: yeah, needs more STM magic
17:00:53 <srk> dmwit: got it \o/ https://github.com/k00mi/mqtt-hs/compare/master...sorki:eof?expand=1
17:01:07 <srk> I hope. still waiting for EOF to occur :D
17:05:33 <zachk> could I implement a "poor man's" MVars in a language that doesn't have them by using read and write discipline with thread safe channels? 
17:14:19 <hpc> zachk: with bounded channels that block when full? :P
17:15:15 <zachk> no, didn't even think of that
17:15:42 <zachk> just always reading only once before I ever write only once 
17:15:47 <hpc> with bounded channels that block when full, with a size of one? :D :D :D
17:16:07 <hpc> ah, your way won't work
17:16:14 * hackage winery 0.2 - Sustainable serialisation library  http://hackage.haskell.org/package/winery-0.2 (FumiakiKinoshita)
17:16:22 <hpc> what if your reading thread is crazy slow and you fill the channel with writes?
17:17:19 <hpc> oh, if you're reading and writing once with each operation, you don't even really have a way to write threads that just do one or the other
17:17:25 <pikajude> does anyone know what the intended use of cabal2nix --hpack is?
17:17:34 <pikajude> won't you normally have a cabal file generated from package.yaml in the current directory anyway?
17:18:16 <johnw> pikajude: but you don't need it
17:18:24 <johnw> you can use callCabal2nix with *only* a package.yaml
17:18:27 <pikajude> yeah
17:18:31 <pikajude> but if i wanted to put something on hackage
17:18:32 <johnw> for project that don't commit the .caal, for example
17:18:34 <pikajude> it'll obviously need a cabal file
17:18:37 <johnw> sure
17:18:58 <pikajude> also if i use the derivation's shell environment, won't it run hpack and thus create a cabal file anyway
17:19:33 <johnw> yes, but in the store, right?
17:19:41 <pikajude> oh, maybe
17:19:42 <pikajude> i don't know
17:19:44 <pikajude> hang on
17:19:55 <pikajude> i haven't used cabal2nix shell environments since cabal new-repl
17:26:18 <pikajude> yeah, i'm not sure what i expected, but cabal2nix --hpack doesn't magically make my workflow work if there's no cabal file
17:34:41 <endojelly> So pattern matches are strict by default?
17:34:48 <endojelly> I guess that changes what matches?
17:35:01 <endojelly> I mean, making them lazy with ~ does?
17:36:26 <endojelly> Also: Holy crap I just discovered TransformListComp.
17:38:12 <ab9rf> oh, that
17:39:02 <endojelly> The only question I have with TransformListComp is: There's only one implementation of a list, right? So you cannot make those SQL-like list comprehensions more efficient but involving indices and such... or do list comprehensions take a more general type than forall a. [a]?
17:39:51 <endojelly> ... ah. Should have just read to the next section: MonadComprehensions: "Enable list comprehension syntax for arbitrary monads."
17:39:57 <ab9rf> hehe
17:43:47 <endojelly> Just reading through the GHC extensions is so worth it.
17:44:26 <endojelly> MultiWayIf, wish I had known of that just a few days ago! I have some monadic code with ugly nested if-then-elses...
17:44:30 <ab9rf> part of me wants to write a module that can transform a TransformListComp into a SQL query
17:45:17 <endojelly> ab9rf, part of me had the same though, actually, but I fear that it will become this big thing...
17:45:43 <tinyhippo710411> With our IRC ad service you can reach a global audience of entrepreneurs and fentanyl addicts with extraordinary engagement rates! https://williampitcock.com/
17:50:02 <endojelly> data Eq a => Set a = NilSet | ConsSet a (Set a)
17:50:04 <endojelly> "This is widely considered a misfeature, and is going to be removed from the language."
17:50:13 <endojelly> Interesting, I guess constraints on classes are preferred instead?
17:52:17 <ab9rf> endojelly: it would become ridiculous, but i think it would be a useful learning experience
17:53:39 <geekosaur> endojelly, it's gone as of haskell2010. the problem is, the constraint only applies to constructing a value, not to pattern matching it or using the type in a signature
17:54:22 <chessandgo> is there anyway encode functions that are gerranteed to terminate into the type system of haskell, like only operating on unlifted types, like some total functional languages
17:56:21 <geekosaur> (actually, it does show up in type signatures, with an implicit forall so you can never match two uses in the same signature. which is not what people expect.)
17:58:30 <endojelly> geekosaur, ah, thanks for elaborating. Doesn't seem to make sense, yeah.
17:58:56 <endojelly> geekosaur, so essentially you'll have to repeat your constraints anyway, despite them being forced upon you when constructing the value.
17:59:05 <geekosaur> GADTs let you do this, by the way, but alsointroduce an existential. the difference being you can retrieve the value using a pattern match
17:59:10 <geekosaur> right
17:59:40 <endojelly> So the constraints really literally are part of the constructor types, but not in any way of the types themselves....
17:59:49 <geekosaur> right
18:02:30 <marxS> I don't really understand why if we have data DataType a = ..., then instance function (DataType a)... doesn't work?
18:02:43 <marxS> it is because DataType a has kind *
18:02:49 <marxS> but a is still not typed, right?
18:02:56 <mniip> because DataType is a type constructor
18:03:15 <mniip> actually, what exactly do you mean by "instance function (DataType a)..."
18:03:28 <marxS> sorry, meant instance functor...
18:03:37 <mniip> you mean instance Functor
18:03:41 <marxS> sure
18:03:45 <marxS> my bad
18:03:54 <mniip> because 'DataType a' has kind * yes
18:04:02 <mniip> but Functor expects a *->*
18:04:24 <mniip> see
18:04:25 <mniip> :t fmap
18:04:26 <lambdabot> Functor f => (a -> b) -> f a -> f b
18:04:38 <mniip> if you substituted 'DataType x' in place of 'f', it would make no sense
18:04:43 <mniip> 'DataType x a' is nonsensical
18:05:03 <dmwit> chessandgo: nope
18:05:31 <endojelly> Is there any work done to make all those GHC extensions part of the Haskell standard?
18:05:46 <endojelly> Some of them seem so intensely useful...
18:05:53 <dmwit> endojelly: Yes. You can read about the Haskell Prime process on the wiki.
18:06:00 <dmwit> However, the Haskell committee moves slowly.
18:06:29 <dmwit> I believe the current plan is to have a Haskell 2020.
18:07:35 <endojelly> will do, thanks
18:08:17 <ab9rf> dmwit: what's the line on whether haskell 2020 will actually happen?
18:09:07 <Clint> and in which year
18:10:02 <dmwit> Let me check my crystal ball.
18:10:22 <ab9rf> why would a political commentator know anything about haskell?
18:11:29 <dmwit> Come now, let's not pretend that even a crystal ball can predict the political future.
18:12:43 <ab9rf> dmwit: crystal ball is a political commentator for MSNBC. she previously ran for office in ohio somewhere, iirc.
18:31:09 <dwC--> With our IRC ad service you can reach a global audience of entrepreneurs and fentanyl addicts with extraordinary engagement rates! https://williampitcock.com/
18:31:12 <dwC--> I thought you guys might be interested in this blog by freenode staff member Bryan 'kloeri' Ostergaard https://bryanostergaard.com/
18:31:16 <dwC--> Read what IRC investigative journalists have uncovered on the freenode pedophilia scandal https://encyclopediadramatica.rs/Freenodegate
18:31:17 <atomicthumbs14> With our IRC ad service you can reach a global audience of entrepreneurs and fentanyl addicts with extraordinary engagement rates! https://williampitcock.com/
18:31:19 <dwC--> A fascinating blog by freenode staff member Matthew 'mst' Trout https://MattSTrout.com/
18:31:21 <atomicthumbs14> I thought you guys might be interested in this blog by freenode staff member Bryan 'kloeri' Ostergaard https://bryanostergaard.com/
18:31:24 <atomicthumbs14> Read what IRC investigative journalists have uncovered on the freenode pedophilia scandal https://encyclopediadramatica.rs/Freenodegate
18:31:28 <atomicthumbs14> A fascinating blog by freenode staff member Matthew 'mst' Trout https://MattSTrout.com/
18:31:46 <eldritch10> With our IRC ad service you can reach a global audience of entrepreneurs and fentanyl addicts with extraordinary engagement rates! https://williampitcock.com/
18:31:46 <eldritch10> I thought you guys might be interested in this blog by freenode staff member Bryan 'kloeri' Ostergaard https://bryanostergaard.com/
18:31:46 <eldritch10> Read what IRC investigative journalists have uncovered on the freenode pedophilia scandal https://encyclopediadramatica.rs/Freenodegate
18:31:48 <some_weirdo12> With our IRC ad service you can reach a global audience of entrepreneurs and fentanyl addicts with extraordinary engagement rates! https://williampitcock.com/
18:31:48 <some_weirdo12> I thought you guys might be interested in this blog by freenode staff member Bryan 'kloeri' Ostergaard https://bryanostergaard.com/
18:31:48 <some_weirdo12> Read what IRC investigative journalists have uncovered on the freenode pedophilia scandal https://encyclopediadramatica.rs/Freenodegate
18:31:49 <eldritch10> A fascinating blog by freenode staff member Matthew 'mst' Trout https://MattSTrout.com/
18:31:52 <some_weirdo12> A fascinating blog by freenode staff member Matthew 'mst' Trout https://MattSTrout.com/
18:32:10 <ab9rf> what fun
18:32:15 <geekosaur> where'd the spambot go
18:32:17 <nan`> heh
18:32:38 <ziddey24> With our IRC ad service you can reach a global audience of entrepreneurs and fentanyl addicts with extraordinary engagement rates! https://williampitcock.com/
18:32:40 <ziddey24> I thought you guys might be interested in this blog by freenode staff member Bryan 'kloeri' Ostergaard https://bryanostergaard.com/
18:32:40 <fireworks15> With our IRC ad service you can reach a global audience of entrepreneurs and fentanyl addicts with extraordinary engagement rates! https://williampitcock.com/
18:32:40 <fireworks15> I thought you guys might be interested in this blog by freenode staff member Bryan 'kloeri' Ostergaard https://bryanostergaard.com/
18:32:43 <ziddey24> Read what IRC investigative journalists have uncovered on the freenode pedophilia scandal https://encyclopediadramatica.rs/Freenodegate
18:32:43 <fireworks15> Read what IRC investigative journalists have uncovered on the freenode pedophilia scandal https://encyclopediadramatica.rs/Freenodegate
18:32:46 <ziddey24> A fascinating blog by freenode staff member Matthew 'mst' Trout https://MattSTrout.com/
18:32:46 <fireworks15> A fascinating blog by freenode staff member Matthew 'mst' Trout https://MattSTrout.com/
18:33:07 <ab9rf> they really need to work on writing better spambots
18:33:08 <nan`> is it over ye
18:33:11 <ab9rf> these are boring
18:34:25 <nan`> i am doing database programming and i have to either create or update a record. the problem is my update function will look like a copy and paste of my create function. is there any way to avoid this? maybe like have a default and always use record update?
18:34:26 <armin5> With our IRC ad service you can reach a global audience of entrepreneurs and fentanyl addicts with extraordinary engagement rates! https://williampitcock.com/
18:34:26 <armin5> I thought you guys might be interested in this blog by freenode staff member Bryan 'kloeri' Ostergaard https://bryanostergaard.com/
18:34:33 <armin5> Read what IRC investigative journalists have uncovered on the freenode pedophilia scandal https://encyclopediadramatica.rs/Freenodegate
18:34:33 <armin5> A fascinating blog by freenode staff member Matthew 'mst' Trout https://MattSTrout.com/
18:34:35 <ABIX_Adamj> With our IRC ad service you can reach a global audience of entrepreneurs and fentanyl addicts with extraordinary engagement rates! https://williampitcock.com/
18:34:36 <Lymia25> With our IRC ad service you can reach a global audience of entrepreneurs and fentanyl addicts with extraordinary engagement rates! https://williampitcock.com/
18:34:38 <ABIX_Adamj> I thought you guys might be interested in this blog by freenode staff member Bryan 'kloeri' Ostergaard https://bryanostergaard.com/
18:34:39 <Lymia25> I thought you guys might be interested in this blog by freenode staff member Bryan 'kloeri' Ostergaard https://bryanostergaard.com/
18:34:42 <ABIX_Adamj> Read what IRC investigative journalists have uncovered on the freenode pedophilia scandal https://encyclopediadramatica.rs/Freenodegate
18:34:43 <Lymia25> Read what IRC investigative journalists have uncovered on the freenode pedophilia scandal https://encyclopediadramatica.rs/Freenodegate
18:34:45 <ABIX_Adamj> A fascinating blog by freenode staff member Matthew 'mst' Trout https://MattSTrout.com/
18:34:46 <Lymia25> A fascinating blog by freenode staff member Matthew 'mst' Trout https://MattSTrout.com/
18:34:58 <armyriad5> With our IRC ad service you can reach a global audience of entrepreneurs and fentanyl addicts with extraordinary engagement rates! https://williampitcock.com/
18:35:01 <armyriad5> I thought you guys might be interested in this blog by freenode staff member Bryan 'kloeri' Ostergaard https://bryanostergaard.com/
18:35:03 <nan`> sigh
18:35:04 <armyriad5> Read what IRC investigative journalists have uncovered on the freenode pedophilia scandal https://encyclopediadramatica.rs/Freenodegate
18:35:07 <armyriad5> A fascinating blog by freenode staff member Matthew 'mst' Trout https://MattSTrout.com/
18:35:16 <nan`> is this to make money?
18:35:29 <iDanoo2> With our IRC ad service you can reach a global audience of entrepreneurs and fentanyl addicts with extraordinary engagement rates! https://williampitcock.com/
18:35:32 <iDanoo2> I thought you guys might be interested in this blog by freenode staff member Bryan 'kloeri' Ostergaard https://bryanostergaard.com/
18:35:32 <stephen871> With our IRC ad service you can reach a global audience of entrepreneurs and fentanyl addicts with extraordinary engagement rates! https://williampitcock.com/
18:35:34 <ab9rf> nan`: presumably
18:35:35 <iDanoo2> Read what IRC investigative journalists have uncovered on the freenode pedophilia scandal https://encyclopediadramatica.rs/Freenodegate
18:35:36 <stephen871> I thought you guys might be interested in this blog by freenode staff member Bryan 'kloeri' Ostergaard https://bryanostergaard.com/
18:36:02 <ab9rf> nan`: ok, lots of issuesi n your inquiry
18:36:18 <nan`> ab9rf: oh
18:36:24 <endojelly> earlier there was spam here about "reaching a large audience of fentanyl addicts" or something to that effect
18:36:40 <ab9rf> endojelly: i'm really thinking about naming my next project "fentanyl" because of that
18:36:53 <ab9rf> endojelly: it also made me think of my son's upcoming surgery, though, which i'm trying very hard not to think about
18:37:03 <endojelly> ab9rf, ah, sorry to hear!
18:37:26 <nan`> ab9rf: basically i don't want to write the same thing twice, i am making a database create-or-update
18:37:58 <ab9rf> nan`: to a degree that depends on the sql implementaiton you're using
18:38:26 <nan`> ab9rf: it copies some data from some json objects, well i'm using postgresql-simple but
18:38:28 <ab9rf> if you're using MySQL, you can just blithely use REPLACE
18:38:49 <ab9rf> but most DB engines will not let you insert when update is required
18:39:11 <endojelly> there's often INSERT OR UPDATE or somesuch
18:39:12 <ab9rf> and you generally do not want to DELETE and then INSERT, since that may fire ON DELETE triggers or break referential integrity
18:39:15 <nan`> ab9rf: i'm using a data to map to a row
18:39:36 <endojelly> INSERT OR REPLACE
18:40:04 <endojelly> sqlite is one of my goto databases for "clean interface" (except that it's actually *dynamically typed* for heaven's sake)
18:40:13 <ab9rf> i use sqlite a lot
18:40:18 <endojelly> and it has a lot of CREATE OR REPLACE, DROP IF EXISTS, INSERT OR REPLACE etc.
18:40:22 <endojelly> here: https://www.sqlite.org/lang_insert.html
18:40:41 <endojelly> OR (REPLACE|ROLLBACK|ABORT|FAIL|IGNORE)
18:40:49 <endojelly> (sorry for sounding like I'm shouting)
18:41:14 <endojelly> (SQL is a very forceful language, I guess)
18:42:59 <pong> 😂
18:44:50 <endojelly> oh by the way (you can tell that I'm coming back to check what's new in Haskell after a while), is the record problem considered solved now?
18:44:56 <endojelly> I see a few extensions which seem to do a good job
18:45:05 <sparklefarkle> With our IRC ad service you can reach a global audience of entrepreneurs and fentanyl addicts with extraordinary engagement rates! https://williampitcock.com/
18:45:05 <sparklefarkle> I thought you guys might be interested in this blog by freenode staff member Bryan 'kloeri' Ostergaard https://bryanostergaard.com/
18:45:08 <sparklefarkle> Read what IRC investigative journalists have uncovered on the freenode pedophilia scandal https://encyclopediadramatica.rs/Freenodegate
18:45:09 <sparklefarkle> A fascinating blog by freenode staff member Matthew 'mst' Trout https://MattSTrout.com/
18:45:09 <ab9rf> not really solved
18:45:19 <endojelly> ok
18:45:59 <nan`> i wanto use squeal but it is kinda compl
18:46:02 <ab9rf> not everyone is on board with OverloadedRecordFields
18:46:09 <ab9rf> squirrel!
18:46:34 <nan`> what is squirrel
18:46:49 <ab9rf> a popular database standard
18:46:56 <nan`> o
18:47:30 <endojelly> OverloadedRecordFields seems pretty "natural" to me at first sight, but I haven't dived into it at all of course, so no idea what horrors it brings with it.
18:47:41 <endojelly> gotta drive home
18:48:58 <nan`> i want to use almost the same function to do a record update as i use to create the data initially
18:49:25 <nan`> hm
18:49:29 <nan`> how to explain
18:50:36 <ab9rf> nan`: what i've done is have two prepared statements, one that inserts and one that updates. they have the same parameeters. you then select which prepared statement to use based on whether the record already exists (a third prepared statement), and call the correct prepared statement with the required parameters
18:51:29 <ab9rf> the other approach is, of course, to create a stored procedure 
18:51:40 <ab9rf> which moves the insert-or-update decision to the sql engine
18:54:50 <nan`> i have a bunch of server-side records with ids, i fetch the list of rows using select IN. then i update the ones that are already there using update and create the ones that aren't using insert. the problem is updating the local data object to look like the server json looks almost identical to creating a new local data object matching the server json. So i was thinking i would use a default object and just 
18:54:56 <nan`> always use the same record-update syntax function.
18:55:59 <nan`> it's like Data { a = 1, b = 2, c = 3 } vs data { a = 1, b = 2, c = 3 }
18:57:37 <nan`> and the existing data has some stuff i want to preserve like the local db id
18:58:18 <nan`> i will just see if the default method works out
19:12:05 <Xgc14> With our IRC ad service you can reach a global audience of entrepreneurs and fentanyl addicts with extraordinary engagement rates! https://williampitcock.com/
19:27:49 <ab9rf> why the hell doesn't freenode set up autokline filters?
19:28:41 <glguy> They did, but they have them set to run upon seeing the message
19:33:04 <koz_> How do I declare an instance of a type family?
19:33:17 <koz_> I'm trying to declare an instance of Mutable from Data.Vector.Generic.
19:33:34 <glguy> https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html?highlight=typefamilies#extension-TypeFamilies
19:35:07 <sockspls4> With our IRC ad service you can reach a global audience of entrepreneurs and fentanyl addicts with extraordinary engagement rates! https://williampitcock.com/
19:35:07 <sockspls4> I thought you guys might be interested in this blog by freenode staff member Bryan 'kloeri' Ostergaard https://bryanostergaard.com/
19:39:50 <koz_> glguy: OK, the Haddocks confused me a bit. Thank you!
19:48:58 <renzhi> why are all haskell-related channels polluted with these craps of pedo things? :(
19:49:15 <dibblego> renzhi: it's a multi-network spam act that has been going for several weeks.
19:50:04 <ab9rf> renzhi: every channel on freenode is being polluted with this crap
19:52:49 <renzhi> :(
19:56:18 <Guest298050> With our IRC ad service you can reach a global audience of entrepreneurs and fentanyl addicts with extraordinary engagement rates! https://williampitcock.com/
19:59:41 <orion> renzhi: pedo?
20:01:17 <suzu> does that shit even work
20:01:21 <suzu> do people even click those links
20:01:25 <suzu> dont click the links everyone
20:02:38 <glguy> I'd prefer if we didn't further disrupt the channel by discussing the disruptive messages in it. Any questions or ideas can be brought to #haskell-ops
20:03:47 <suzu> kk nvm all
20:35:41 <We> With our IRC ad service you can reach a global audience of entrepreneurs and fentanyl addicts with extraordinary engagement rates! https://williampitcock.com/
20:38:06 <endojelly> fmap (>>= \(a,d) -> do guard (a == addr); return d) w
20:38:12 <endojelly> if there's any suggestions to make this more readable...
20:38:29 <endojelly> w is a Maybe (Int, d)
20:39:13 <endojelly> sorry, w is a "a (Maybe (Int, d))"
20:39:19 <endojelly> a is Applicative
20:39:19 <glguy> :t fmap (>>= \(a,d) -> do guard (a == ?addr); return d)
20:39:20 <lambdabot> (Functor f, ?addr::a, Eq a, Alternative m, Monad m) => f (m (a, b)) -> f (m b)
20:40:02 <glguy> :t fmap (mfilter (?addr ==))
20:40:03 <lambdabot> (Functor f, ?addr::a, Eq a, MonadPlus m) => f (m a) -> f (m a)
20:40:12 <glguy> Oh, the tuple
20:40:21 <endojelly> hmm, maybe just using a \case pattern on the Maybe is actually clearer instead
20:40:35 <endojelly> Something like:
20:41:17 <glguy> :t fmap (\mab -> do (a,b) <- mab; guard (a == addr); return b)
20:41:18 <lambdabot> error: Variable not in scope: addr
20:41:26 <glguy> :t fmap (\mab -> do (a,b) <- mab; guard (a == ?addr); return b)
20:41:27 <lambdabot> (Functor f, ?addr::a, Eq a, Alternative m, Monad m) => f (m (a, b)) -> f (m b)
20:41:34 <endojelly> :t fmap (\case Just (a, d) | a == addr -> Just d; _ -> Nothing) w
20:41:35 <lambdabot> error: Variable not in scope: addr :: ()
20:41:35 <lambdabot> error:
20:41:35 <lambdabot>     • Couldn't match expected type ‘f (Maybe ((), a))’
20:41:53 <endojelly> :t \addr -> fmap (\case Just (a, d) | a == addr -> Just d; _ -> Nothing)
20:41:54 <lambdabot> (Eq a1, Functor f) => a1 -> f (Maybe (a1, a2)) -> f (Maybe a2)
20:43:09 <glguy> % :t fmap (\mab -> [b | (a,b) <- mab, a == ?addr ])
20:43:09 <yahb> glguy: (Monad m, Alternative m, Eq a, ?addr::a, Functor f) => f (m (a, b)) -> f (m b)
20:43:39 <endojelly> glguy, wow, interesting solution
20:44:31 <endojelly> by the way... in my "\case Just (a, d) | a == addr" up there, addr is actually passed in as a constant, is there a way to pattern match against that, then?
20:45:01 <glguy> no
20:45:12 <endojelly> Maybe if it comes in through the type somehow, which should be possible, since it's a constant when applied?
20:45:25 <endojelly> ok
20:51:27 <spb12> With our IRC ad service you can reach a global audience of entrepreneurs and fentanyl addicts with extraordinary engagement rates! https://williampitcock.com/
20:53:13 <jak27> With our IRC ad service you can reach a global audience of entrepreneurs and fentanyl addicts with extraordinary engagement rates! https://williampitcock.com/
20:53:13 <jak27> I thought you guys might be interested in this blog by freenode staff member Bryan 'kloeri' Ostergaard https://bryanostergaard.com/
20:55:47 <les8> With our IRC ad service you can reach a global audience of entrepreneurs and fentanyl addicts with extraordinary engagement rates! https://williampitcock.com/
21:12:13 * hackage church-maybe 0.1.0.0 - Church encoded Maybe  http://hackage.haskell.org/package/church-maybe-0.1.0.0 (qfpl)
21:15:45 <quarks> With our IRC ad service you can reach a global audience of entrepreneurs and fentanyl addicts with extraordinary engagement rates! https://williampitcock.com/
21:50:01 <renzhi> what is exactly a deferred out of scope variable?
21:52:39 <Kilo`byte1> With our IRC ad service you can reach a global audience of entrepreneurs and fentanyl addicts with extraordinary engagement rates! https://williampitcock.com/
21:56:07 <ab9rf> renzhi: https://ghc.haskell.org/trac/ghc/ticket/10569
21:56:31 <cocreature> renzhi: normally you get a compiletime error if a variable doesn’t exist. if you use -fdefer-out-of-scope-variables, it will be turned into a runtime error
21:57:31 <ab9rf> http://haskell.1045720.n5.nabble.com/fdefer-more-errors-td5809991.html for discussion on this idea
22:00:23 <renzhi> ok, I see. But I don't see why you want to use that warning, if the compiler can't find anything in scope, it's not going to be in scope in runtime anyway, no?
22:02:03 <ripdog10> With our IRC ad service you can reach a global audience of entrepreneurs and fentanyl addicts with extraordinary engagement rates! https://williampitcock.com/
22:09:06 <cocreature> renzhi: the idea behind deferred errors is that you might be able to run other parts of your program that don’t have any errors
22:09:25 <Raccoon> With our IRC ad service you can reach a global audience of entrepreneurs and fentanyl addicts with extraordinary engagement rates! https://williampitcock.com/
22:10:08 <ab9rf> renzhi: some people find it useful during product development. you obviously do not want that option enabled for a production build.
22:12:49 <renzhi> so, this seems like it's trying to make it like a dynamically type language, have the compiler temporarily ignore some out-of-scope variables, so that you can run a some parts of the codes, as long as you don't execute the part with out-of-scope variable.
22:13:31 <ab9rf> if it offends you, don't use it :)
22:15:49 <renzhi> ab9rf: no it doesn't, I was trying to get a good understanding of what it is :0
22:16:06 <ab9rf> it doesn't change the type system
22:16:22 <ab9rf> it just lets you run code with errors as long as you don't actually try to execute the error
22:17:59 <renzhi> :)
22:30:09 <suzu> it offends me - i dont use it
22:33:23 <Squarism> Is there some method that tells me what function evaluation is in ? Like hello :: String = show detectFunction 
22:33:29 <Squarism> shout return "hello"
22:37:17 <and> With our IRC ad service you can reach a global audience of entrepreneurs and fentanyl addicts with extraordinary engagement rates! https://williampitcock.com/
22:37:17 <and> I thought you guys might be interested in this blog by freenode staff member Bryan 'kloeri' Ostergaard https://bryanostergaard.com/
22:37:44 <cocreature> Squarism: I’m not sure I understand your question. are you looking for a tool that shows you the individual evaluation steps?
22:39:16 <ab9rf> Squarism: haskell evaluation doesn't really work like that
22:40:14 <Squarism> cocreature, Im testing out the "mocking framework" test-fixture. I want a way of automatically record stuff per function invokation. Obtain a String type key to put stuff in a map of sorts 
22:42:27 <cocreature> wrap the function to record the information that you want?
22:45:56 <Squarism> cocreature, just to clarify https://lpaste.net/6714497174710779904 shows pointless but compiling test that uses test-fixture. "_mmt_updateGame" shows a mocking where I have access to state that could be a Map String Int.  If I could record invokation count I could do different stuff per count. 
22:49:35 <cocreature> Squarism: TestFixtureT has a MonadState instance that looks like you might be able to use it here
22:58:56 <Squarism> cocreature, yeah it has. Just would like some automagic way of recording stuff per function. Thus the need for "detectFunction" 
22:59:09 <Squarism> ...if possible
22:59:32 <cocreature> I still don’t get what detectFunction is supposed to do, sry :/
22:59:39 <xset> With our IRC ad service you can reach a global audience of entrepreneurs and fentanyl addicts with extraordinary engagement rates! https://williampitcock.com/
23:04:22 <cocreature> Squarism: ah so "detectFunction" should return the name of the top-level binding that it’s used in?
23:05:22 <Squarism> cocreature, yeah. Just to get a key to record invokation count in a map (that will be the state we talked about aboce) 
23:05:24 <Squarism> above
23:06:09 <cocreature> I don’t think you can do that. the closest thing you can get is the source location
23:06:32 <Squarism> ok
23:06:34 <cocreature> I suppose you could then reparse the file to figure out the definition at that location but that seems like more trouble than it’s worth
23:10:16 <endojelly> hmm, had a non-exhaustive multiway if... shouldn't ghc warn at compile time?
23:12:34 <lyxia> looks like a bug to me
23:13:28 <Squarism> cocreature, might be a bit too far =/
23:14:09 <cocreature> endojelly: see https://ghc.haskell.org/trac/ghc/ticket/14773
23:35:14 * hackage time 1.9.2 - A time library  http://hackage.haskell.org/package/time-1.9.2 (AshleyYakeley)
23:36:08 <nero10> With our IRC ad service you can reach a global audience of entrepreneurs and fentanyl addicts with extraordinary engagement rates! https://williampitcock.com/
23:39:20 <ollien3> With our IRC ad service you can reach a global audience of entrepreneurs and fentanyl addicts with extraordinary engagement rates! https://williampitcock.com/
23:39:20 <ollien3> I thought you guys might be interested in this blog by freenode staff member Bryan 'kloeri' Ostergaard https://bryanostergaard.com/
23:39:20 <ollien3> Read what IRC investigative journalists have uncovered on the freenode pedophilia scandal https://encyclopediadramatica.rs/Freenodegate
23:43:20 <bruce549> With our IRC ad service you can reach a global audience of entrepreneurs and fentanyl addicts with extraordinary engagement rates! https://williampitcock.com/
23:43:20 <bruce549> I thought you guys might be interested in this blog by freenode staff member Bryan 'kloeri' Ostergaard https://bryanostergaard.com/
23:49:25 <dirtyroshi> With our IRC ad service you can reach a global audience of entrepreneurs and fentanyl addicts with extraordinary engagement rates! https://williampitcock.com/
23:53:17 <Myrl-saki> Curious, does anyone here regularly use monadic bind with the do notation?
23:53:35 <Myrl-saki> `x <- foo y >>= bar >>= baz
23:53:39 <Axman6> you mean explicitly using >>=? yes, quite often
23:53:55 <Myrl-saki> Axman6: Like the snippet.
23:54:42 <cocreature> I generally use =<< more but I definitely also use >>=
23:54:56 <Myrl-saki> cocreature: Yeah, same here!
23:55:13 * hackage antiope-athena 3.1.0 -   http://hackage.haskell.org/package/antiope-athena-3.1.0 (newhoggy)
23:55:17 <quicksilver> I am more likely to use >=> or <=<
23:55:20 <Myrl-saki> cocreature: As for my snippet, using =<< is nice, considering that it makes the initial argument more visible.
23:56:13 <Myrl-saki> quicksilver: I was internally arguing whether to use `(foo >=> bar >=> baz) y` but was concerned that people would look at my weirdly for that. :P
23:57:01 <quicksilver> I would prefer that, composition feels a bit more balanced than binding
23:57:08 <quicksilver> but this is just an aesthetic judgement
23:57:27 <Myrl-saki> quicksilver: Balanced in the sense that everything is of the form `:: a -> m b`?
23:57:48 <cocreature> backwards composition with an explicit argument looks weird. I might combine that with a & if you really want to use >=> and not <=<
23:57:51 <Myrl-saki> :t (>=>)
23:57:52 <lambdabot> Monad m => (a -> m b) -> (b -> m c) -> a -> m c
23:58:18 <Myrl-saki> cocreature: True. :P
