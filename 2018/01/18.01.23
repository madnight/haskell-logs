00:00:10 <ertes-w> > (map fst . filter ((> 1) . snd) . M.assocs . M.fromListWith (+) . map (, 1)) "abcdaeb"
00:00:13 <lambdabot>  "ab"
00:01:05 <lev1athan> exit
00:02:43 <marinelli> hi everyone
00:05:25 <dmj`> marinelli: sup
00:09:43 <epicallan> hello, which git hooks framework or lib integrates with stack. I would like a pre-push or pre-commit hook to run before i push to github
00:12:28 <epicallan> I have seen https://pre-commit.com/ which is universal and works with any language but i was wondering whether there is one which natively integrates with stack
00:16:23 <Unhammer> do pre-commits really need a framework?
00:19:50 <Unhammer> I just do things like
00:19:53 <Unhammer> echo 'stack test' >.git/hooks/pre-push && chmod +x .git/hooks/pre-push
00:20:36 <marinelli> I've a discount code on manning.com. It expires today. Please, ping me if someone is interested
00:22:43 <sr10> how to display the duplicates from a list? input is [1,2,3,4,3,1,5,6]   output should be [1,3]
00:23:06 <ertes-w> > (map fst . filter ((> 1) . snd) . M.assocs . M.fromListWith (+) . map (, 1)) [1,2,3,4,3,1,5,6]
00:23:09 <lambdabot>  [1,3]
00:24:41 <ertes-w> > foldr (\x go xs -> if S.member x xs then x : go xs else go (S.insert x xs)) (const []) [1,2,3,4,3,1,5,6] mempty
00:24:45 <lambdabot>  [3,1]
00:24:56 <ertes-w> sr10: if you don't care about order, the latter is much better
00:25:21 <ertes-w> where S = Data.Set and M = Data.Map.Strict
00:25:50 <sr10> i dont mind the order.
00:25:59 <ertes-w> (order and repetition actually)
00:27:39 <ertes-w> > foldr (\x go xs -> if M.lookup x xs == Just False then x : go (M.insert x True xs) else go (M.insert x False xs)) (const []) [1,2,3,4,3,1,5,6,3,3,3] mempty
00:27:42 <lambdabot>  [3,1,3]
00:27:48 <dmj`> > (>>= take 1) . filter ((>1) . length) . nub . group . sort $ [1,2,3,4,3,1,5,6]
00:27:52 <lambdabot>  [1,3]
00:28:41 <ertes-w> > foldr (\x go xs -> if M.lookup x xs == Just False then x : go (M.insert x True xs) else go (M.insertWith (||) x False xs)) (const []) [1,2,3,4,3,1,5,6,3,3,3] mempty
00:28:45 <lambdabot>  [3,1]
00:29:00 <ertes-w> sr10: ^ this one handles repetition as well and is still lazy
00:29:27 <ertes-w> @let duplicates xs0 = foldr (\x go xs -> if M.lookup x xs == Just False then x : go (M.insert x True xs) else go (M.insertWith (||) x False xs)) (const []) xs0 mempty
00:29:32 <lambdabot>  Defined.
00:29:34 <ertes-w> > duplicates [1..]
00:29:39 <ertes-w> err
00:29:40 <lambdabot>  mueval-core: Time limit exceeded
00:29:51 <ertes-w> > duplicates ([1..] >>= \x -> [x, x, x])
00:29:55 <lambdabot>  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,...
00:34:19 <sr10> will it work for ["aaa","bbb","ccc","ddd","aaa","eee","bbb"]  output should be ["aaa","bbb"]
00:36:33 <dmj`> > (>>= take 1) . filter ((>1) . length) . nub . group . sort $ ["aaa","bbb","ccc","ddd","aaa","eee","bbb"]
00:36:37 <lambdabot>  ["aaa","bbb"]
00:40:10 <ertes-w> > duplicates ["aaa","bbb","ccc","ddd","aaa","eee","bbb"]
00:40:14 <lambdabot>  ["aaa","bbb"]
00:40:15 <ertes-w> sr10: ^
00:41:35 <sr10> thx
00:42:51 <sr10> i wanted that without duplicates
00:42:59 <sr10> like using foldl or map
00:45:58 <quchen> ertes-w: Chop chop!
00:46:39 <ertes-w> sr10: test case?
00:52:16 <ertes-w> quchen: thanks for reminding me not to do other people's homework =)
01:03:48 <arne> are there use websites where client-side is rendered by haskell code?
01:03:53 <arne> like reflex or something?
01:05:14 <arne> s/use/huge
01:15:49 <winnner> Hi no matter which language learning SQL is mandatory?
01:21:30 <quchen> Nope.
01:21:44 <arne> there are people that claim that pure filesystem is better than databases
01:22:27 <merijn> arne: Depending on the usecase those people are either idiots or right :p
01:22:29 <winnner> quchen:  telling me ?
01:22:52 <quchen> Yes.
01:22:55 <arne> merijn: it took a long time for me to grasp what db is about
01:23:14 <arne> i think there might be people where this long time is not worth the advantage of a db
01:23:17 <winnner> i came to know I dont need to learn javascript with haskell and there are front end frameworks and I am not sure what I can do with databases
01:23:32 <winnner> I have a json data
01:23:42 <winnner> I want to use it later after storing it somewhere
01:23:48 <winnner> What I can do without db ?
01:24:02 <arne> serialize it some other way and .. store it, lol.
01:24:17 <arne> the term "database" is very big, too
01:24:28 <winnner> arne my data is also very big
01:24:32 <arne> if you have a file, where every line is a json object, i would call that a database
01:24:45 <arne> atleast you could
01:25:09 <arne> winnner: well, use mongodb.. it's for json & it's not sql
01:25:18 <merijn> winnner: Define "very big"
01:25:25 <arne> don't do it for relational data though
01:25:37 <merijn> My experience is that most people who claim to have very big data, really don't have very big data
01:25:40 <winnner> https://bittrex.com/api/v1.1/public/getmarkets    you see there I got lot of json and I want to retrive every minute and store somewhere structured way
01:25:54 <arne> merijn: vim cannot open that file ⇒ big data
01:26:07 <merijn> arne: That's about medium data
01:26:17 <arne> merijn: i was kidding
01:26:25 <merijn> Because vim starts struggling at around 20 million lines in a file :p
01:26:47 <arne> merijn: it does earlier for me.. i tend to use ruby to handle such files :D
01:27:01 <arne> and hopefully haskell at some day
01:27:07 <winnner> So you guys conclude I must lea sql or not ?
01:27:12 <winnner> learn*
01:27:13 <merijn> arne: Well, it takes about 20s to open a file like that on a beefy machine :)
01:27:13 <arne> winnner: no, still not
01:27:25 <arne> your data is not big, and you don't neccessarily have sql when having a database
01:27:30 <arne> use mongodb
01:27:32 <arne> be happy.
01:27:38 <winnner> or any way I can skip sql the way I can do to js with some haskell frot end framework
01:27:50 <arne> merijn: well my work pc is pretty slow, and my harddisk is slow @ home
01:28:07 <arne> winnner: do you read?
01:28:17 <arne> mongodb => no sql
01:28:21 <winnner> wait I am reading I see so many msgs
01:28:27 <arne> the query language is javascript
01:28:42 <arne> and your data is not big.
01:28:46 <merijn> I would never recommend mongodb for anything
01:29:02 <arne> merijn: as long as your data is not relational ( which is nearly everything )
01:29:04 <arne> it's great and fast
01:29:14 <merijn> Well, except maybe the problem of "my storage is too reliable, I need some data loss to spice things up"
01:29:28 <arne> never heard of mongodb dataloss :o
01:29:29 <merijn> arne: It's also very good at losing and corrupting data, so...
01:29:48 <arne> i never used it... i stopped caring when i saw joining data is "impossible"
01:30:01 <arne> aka slow
01:30:44 <arne> but downloading tons of unprotected mongodbs was fun
01:31:10 <arne> too bad  i was not as criminal as the indians who then ransom'd the bunch
01:31:11 <winnner> I heard from a guy in nodejs channel he even have a famous n=blog why one should not use mongodb I cant explain now
01:31:25 <merijn> arne: Basically, mongodbs consistency model is fundamentally flawed, which is the last thing I want in a database
01:31:40 <merijn> arne: See, for example, https://aphyr.com/posts/322-call-me-maybe-mongodb-stale-reads
01:31:43 <arne> winnner: you will find people saying the opposite, which are aas famous, make your own opinions
01:31:46 <winnner> arne:  Indians are criminals ?? I like that sentence why ?
01:31:54 <arne> i never said that
01:32:23 <winnner> too bad  i was not as criminal as the indians who then ransom'd the bunch  ....what does it mean ?
01:32:49 <arne> it means there have been indian criminals, which downloaded databases without password, deleted that data and then blackmailed the owners of the databases.
01:33:19 <winnner> fuck Indians I dont care being an Indian but I am a human though and dont know those Indin criminal fuckers
01:33:38 <arne> winnner: i don't think irc is the right place for racism
01:33:46 <arne> you should rethink
01:33:51 <winnner> did I sound racist ?
01:33:59 <arne> you also were racist, stop it
01:34:08 <winnner> damnn
01:34:24 <winnner> I dont need your answers on mongo shit db also
01:34:45 <arne> you should get a better hobby than being annoying on irc..
01:34:59 <arne> merijn: isn't that super old and maybe fixed?
01:36:32 <winnner> arne: do you even understand what you are talking ? I was asing if every web devlopers job to learn sql or not and yu never answered that and come up with so many unnecessary answers and then calling me racist
01:37:26 <winnner> anyway thanks for the help so far
01:37:30 <winnner> bye guys
01:41:08 <arne> Please note: our followup analysis of 3.4.0-rc3 revealed additional faults in MongoDB’s replication algorithms which could lead to the loss of acknowledged documents–even with Majority Write Concern, journaling, and fsynced writes.
01:41:14 <arne> oh jesus.
01:50:17 <Uniaika> ( ⋅_.)
02:01:21 <arne> why is the llvm version ghc compiles to so super old?
02:01:49 <ertes-w> i kinda wish people would just default to sqlite for any state saving
02:01:53 <electrocat> arne: because they change the IR every major version
02:01:56 <merijn> arne: Because the LLVM API isn't very stable and else it's an endless support treadmill
02:02:08 <cocreature> ghc doesn’t use the LLVM API
02:02:11 <merijn> arne: There's somewhere to decouple LLVM and GHC a bit so it can more easily support newer versions
02:02:25 <arne> sorry.. i just assumed haskell people would adapt quick to tat
02:02:29 <merijn> cocreature: I mean API in a general sense, not actual library calls
02:02:30 <arne> i mean many packages do.. don't they?
02:02:45 <arne> is it because people still use native backend and do not care?
02:02:46 <merijn> arne: GHC doesn't have that many people working on it and most people are researchers
02:02:50 <cocreature> also afaik, the LLVM IR produced by 8.2 works with LLVM 5.0.1 which is the latest version
02:03:01 <quchen> cocreature and Stephen Diehl are doing heroic work on LLVM libs
02:03:15 <merijn> arne: Modern LLVM support is not high on the list of research priority
02:03:25 <merijn> arne: There's a couple people working to improve things
02:03:41 <merijn> Best way to improve GHC LLVM support is: Go and help improve it :p
02:04:02 <arne> i am not smart enough for that. i struggle enough to learn haskell
02:04:13 <arne> even though.. i might have enough knowledge about languages to be helpful there
02:04:21 <arne> maybe it's a good way to learn haskell? i suppose not.
02:04:30 <ertes-w> last time i tried MongoDB it took like an hour before i went back to sqlite =)
02:04:34 <merijn> arne: honestly, the GHC codebase isn't that hard to work with, as long as you avoid complicated bits like the typechecker
02:04:44 <quchen> ertes-w: Oh, they must have greatly improved then!
02:04:45 <arne> ertes-w: i liked mongodb.. if it worked & didn't break
02:05:01 <ertes-w> "ok, so far so good…  now…  how do i do transactions?"…  two minutes later: back to sqlite
02:05:11 <arne> lol.. right i never did transactions in mongodb?
02:05:13 <arne> how does one?
02:05:19 <ertes-w> you don't =)
02:05:24 <arne> not kidding?
02:05:25 <arne> no batch?
02:05:29 <ertes-w> nothing
02:05:35 <arne> oh that's great
02:05:43 <arne> protected by js event loop i guess
02:05:47 <arne> "protected"
02:06:50 <ertes-w> i don't think there is any isolation…  even if you only write single-threaded code in JS, the user might still use two tabs at the same time
02:15:36 <tdammers> isn't the whole idea of nosql to throw ACID guarantees out the window so that we could go faster?
02:15:58 <tdammers> and isn't mongodb the database equivalent to eating laundry detergent for fun?
02:16:57 <Rembane> I think it's a gradient.
02:16:58 <arne> ertes-w: tabs => tables?
02:17:41 <arne> that laundry detergent thing.. what happened there it totally went over my head
02:17:53 <arne> did teengers eat them, do they make high? was it a facebook challenge?
02:18:24 <Rembane> Eating detergent was said to solve all problems of RDBMSs.
02:18:35 <merijn> Rembane: Probably true
02:18:45 <arne> just for one person, though
02:18:46 <merijn> Don't have to worry about consistency when you're dead!
02:19:09 <arne> wtf i called it, a "challenge"
02:19:13 <arne> why do people do that, lol
02:19:54 <Rembane> Inconsistent death. Sounds like a death metal band.
02:20:10 <arne> corrupted data itself could be a metal band
02:20:23 <ertes-w> tdammers: i'd be careful about using "NoSQL" and "idea" in the same sentence
02:20:54 <arne> oh cmon, there are good  nosql things
02:20:55 <Rembane> Weren't they trying to solve a real problem though?
02:20:55 <arne> aren't there
02:21:26 <tdammers> seriously, yes, there are some honking great ideas on that front, but they're tradeoffs that only pay off in very specific circumstances
02:21:44 <tdammers> e.g., when you need a high degree of decentralization, or extreme levels of scalability
02:22:08 <Rembane> Ah. Indeed.
02:22:15 <arne> how do you query bigtable?
02:22:22 <Rembane> What's the idiom in english... throw out the baby with the bathwater?
02:22:33 <tdammers> something like that, yes
02:22:45 <kahlil29> best way to read a [Int] from stdin ? can't seem to figure this out easily.
02:22:56 <arne> kahlil29: read ?
02:23:00 <arne> im a beginner, so don't listen to me
02:23:13 <tdammers> startup hipsters cargo-culting scalability concerns from the Big Four into their 5-developer operation that would be considered a success once they outgrow a single VPS server
02:23:14 <Rembane> kahlil29: map read <$> getLine
02:23:24 <kahlil29> I tried using readLn but it isn't that straightforward.
02:23:29 <Rembane> tdammers: Sounds fun. Where do I join?
02:23:30 <kahlil29> Rembane :  thanks, will try
02:23:36 <Rembane> kahlil29: I forgot one thing.
02:23:37 <arne> read "2"::Integer
02:23:40 <arne> uh uh, i was right
02:23:46 <Rembane> kahlil29: map read . words <$> getLine
02:23:47 <tdammers> Rembane: probably not on #haskell
02:23:59 <kahlil29> arne : yeah but I was specifically talking about a List of integers
02:24:02 <Rembane> tdammers: Good, I have way to much to fix before I join a startup.
02:24:13 <Rembane> kahlil29: How's your list of integers formatted?
02:24:28 <Rembane> Ach
02:24:39 <arne> he was upset because i didn't read his mind :(
02:24:52 <Rembane> BTW, which is the nicest library to interface with a RDBMS in Haskell?
02:25:00 <arne> kahlil29: read in a line, split them by a char, read them
02:25:19 <ertes-w> arne: my question is: what problem does NoSQL solve that relational databases don't solve?
02:25:25 <Rembane> kahlil29: 11:23 < Rembane> kahlil29: How's your list of integers formatted?
02:25:55 <cloudhead> hey anyone using foundation as their prelude?
02:25:56 <ertes-w> arne: also if you would like to continue this, let's do it in #haskell-offtopic =)
02:26:57 <arne> kahlil29: read in a line, split them by a char, read them
02:28:53 <tdammers> ertes-w: scaling beyond what a centralized ACID-safe data store can achieve
02:29:23 <tdammers> ertes-w: also, optimizing for data models that are not shaped like tables
02:29:47 <tdammers> ertes-w: particularly trees. traditional relational model sucks at trees.
02:30:04 <Rembane> Graphs?
02:30:16 <tdammers> wait, missed the move to -offtopic
03:17:04 <reactormonk> I see https://github.com/facebook/Haxl/blob/master/example/facebook/FB/DataSource.hs#L31 and https://github.com/facebook/Haxl/blob/master/example/facebook/FB/DataSource.hs#L42 - but how exactly does the FacebookReq a contain a (GetObject (Id id)) here?
03:22:47 <mniip> reactormonk, aer you familiar with GADT syntax?
03:42:55 <reactormonk> mniip, 80%, https://en.wikibooks.org/wiki/Haskell/GADT makes sense to me that you list the different constructors.... oh duh, it's an unnamed record?
03:43:24 <merijn> reactormonk: "You list the different constructors" <- that's just syntax
03:43:37 <merijn> reactormonk: GADTs let you write datatypes that you fundamentally can't write without GADTs
03:43:58 <reactormonk> merijn, IIRC it allos you to restrict the constructors to specialized types?
03:44:06 <merijn> reactormonk: Specifically, for a parameterised type, like FacebookReq, you can control the parameterisation for specific constructors
03:44:09 <merijn> reactormonk: Right
03:44:36 <merijn> reactormonk: Object is just a phantom type there, but it's a phantom controlled by the constructor
03:45:28 <reactormonk> My main issue is that I read it as "FacebookReq has a single field GetObject of type Id -> FacebookReq Object", but it's actually "a constructor with one field: Id, which gives a record of type FacebookReq, which contains and Id"
03:45:45 <merijn> reactormonk: This means that if I write "foo :: FacebookReq Object -> ??" I don't have to add cases for GetUser and GetUserFriends, since the compiler can see that those can never occur for a "FacebookReq Object"
03:45:51 <merijn> reactormonk: Why do you say "record"?
03:46:27 <reactormonk> merijn, how do you call a data structure that isn't really a record, because it has no names?
03:46:43 <merijn> reactormonk: How do you call Maybe?
03:47:02 <mauke> ... ask carly rae jepsen?
03:47:10 <merijn> I'd just say "value", "type", "data structure", "data", depending on context
03:47:14 <reactormonk> merijn, a constructor
03:47:59 <reactormonk> A constructor, when applied to arguments, gives you a record.
03:48:12 <merijn> I..don't agree
03:48:28 <reactormonk> What's your definition?
03:48:36 <merijn> Most people wouldn't call "Just True" a record, nor "Left 5" or "(True, id)"
03:49:02 <mauke> wait, so 'Just 42' is a record but 'Nothing' isn't?
03:49:19 <merijn> reactormonk: IMO a record is a datatype defined using record syntax and having record fields
03:49:41 <reactormonk> merijn, then what's the concept which contains both record and e.g. True ?
03:49:53 <merijn> reactormonk: "data types"
03:49:57 <reactormonk> kk
03:51:03 <noumenon> I personally define the word "semantics" as a cup of tea
03:51:37 * mauke puts the ant in your semantics
03:51:56 <insanitymug> noumenon++
03:52:34 <mauke> insanitymug: what kind of nick is that? why not "insanitea"?
03:52:52 <reactormonk> Reminds me of a story we had to read in middle school - of a lonely old man, who, to entertain himself because he was lonely, called a chair a "table", and a table a "wall" - which made him even more lonely, because he couldn't communicate with other people anymore.
03:53:41 * insanitea saw truth in what muake said and followed his lead
03:54:08 <merijn> The question is: What kind of tea is insanitea?
03:54:50 <mauke> small-step tea
03:56:07 <insanitea> merijn: it probably won't be a star
04:04:18 <tabaqui> hWaitForInput is non-interruptable call
04:04:28 <tabaqui> should I report a bug?
04:04:54 <tabaqui> *at least forked thread cannot be killed with killThread
04:05:21 <merijn> tabaqui: Are you building with -threaded?
04:05:37 <merijn> tabaqui: If yes, how many capabilities are you using?
04:05:39 <tabaqui> hm, dunno, I've tested this with ghci
04:05:52 <merijn> tabaqui: "NOTE for GHC users: unless you use the -threaded flag, hWaitForInput hdl t where t >= 0 will block all other Haskell threads for the duration of the call. It behaves like a safe foreign call in this respect."
04:06:17 <merijn> tabaqui: If you're running single threaded that means no other thread can run to actually kill it, since it's blocking the only capability
04:06:40 <tabaqui> ah, ok, thanks, I'll continue testing
04:07:05 <tabaqui> I just remember that 8.0.2 has segfaults in this method
04:08:39 <kahlil29_> how do I accept a multi-line input from stdin?
04:08:52 <merijn> kahlil29_: By reading more than 1 line?
04:09:20 <kahlil29_> merijn : so something to do with getLine?
04:09:47 <merijn> kahlil29_: For example, although there might be better options depending on what you're doing
04:13:59 <kahlil29_> merijn : didn't get you
04:14:26 <merijn> You haven't specified what input, what you plan to do with it, etc.
04:19:22 <kahlil29_> merijn : say I have ranges being fed in the form space-separated Ints. like 4 10 \n 7 12 \n 10 15 \n
04:19:32 <kahlil29_> and then I'll take them and do some processing on them
04:19:37 <kahlil29_> but need to read them first
04:31:31 <Axman6> you could use lines <$> getContents to get IO [String] and process those
04:38:08 <kahlil29_> Axman6 : thanks!
04:45:05 <merijn> I don't suppose there's a pool library like resource-pool, but without reaping resources after some timeout?
04:45:51 <merijn> i.e. I have a set of resources that time out after a while and I want to basically either 1) grab an existing one or 2) allocate a new one when all existing ones have expired
04:55:11 <merijn> I suppose I could simply use resource-pool with a timeout of, like, 100 years
04:55:25 <merijn> But I'd need a way to add a check that a resource is still valid somehow
04:58:25 <Axman6> Y2K118 bug!
04:59:09 <merijn> Axman6: Not really, a timeout of 100 years in the future is still 100 years in the future in 2118, unless a task runs >100 years
04:59:18 <merijn> Axman6: In which case: Not my fucking problem :p
04:59:30 <Axman6> you never know!
04:59:38 <Axman6> got to start thinking ahead now!
05:00:10 <merijn> Axman6: Well, since 1) my cluster jobs will get killed way before then and 2) this cluster won't be operational anymore in like 10 years, I think I'll be fine ;)
05:02:42 <Axman6> you can never be too careful
05:39:14 <merijn> Any opinions on how long conduit pipelines should be linewrapped for maximum aesthetics?
05:42:17 <TMA> merijn: first express the aesthetic metric exactly. then it boils down to a single-criterion optimization problem
05:43:15 <srid> does anyone here do Haskell development on the digital ocean optimized droplet (4 vCPUs) and are satisfied with the performance?
05:44:04 <merijn> srid: Digital Ocean is normally rather RAM constrained and GHC is...rather memory hungry
05:44:51 <srid> so having a dedicated hyper thread (which is the their optimized droplets provide) is not very useful for ghc compilations?
05:45:10 <srid> s/the their/what their/
05:45:23 <cocreature> note that deploying to memory constrained systems is fine
05:45:31 <merijn> srid: That's mostly about CPU usage, and while compilation requires quite a bit of CPU *and* memory
05:45:41 <cocreature> e.g. compile locally, build a docker image & deploy that
05:45:49 <merijn> srid: As cocreature I'd recommend developing on a local machine if at all possible, then deploy to a VPS
05:46:05 <srid> btw - it is just a temporary machine to run nixos (and do haskell stuff) on until my Thinkpad arrives next week B-) (and i'm not feeling like installing linux on the mac)
05:46:43 <merijn> srid: I'd download VirtualBox on the mac and install linux on there
05:46:57 <merijn> srid: Or just do Haskell on mac directly? Works fine for me :p
05:47:12 <cocreature> it looks like the 4cpu droplet has 8gb of ram, that should work just fine for Haskell compilation
05:47:22 <merijn> oh, yeah 8gb should be fine
05:47:37 <merijn> My Digital Ocean machines are like 512MB ram or something, because I'm cheap :p
05:47:56 <srid> I prefer to use NixOS. merijn - I guess running this on the VM is not a bad idea, even though that makes my Mac a bit sluggish (it has a paltry 16G of ram, compared to the 64G I would be receiving next week).
05:48:37 <tdammers> I'm even cheaper, I have a VPS from some local discount service clocking in at 128MB RAM
05:48:49 <tdammers> but at €15/year, who's complaining
05:48:59 <srid> What do you use it for?
05:49:00 <cocreature> merijn: iirc they upgraded those droplets to 1gb last week or so :)
05:49:14 <merijn> srid: I've not had too much issue with slowdown with virtualbox, tbh
05:49:47 <tdammers> merijn: virtualbox performance varies drastically depending on available hardware virtualization
05:50:23 <merijn> srid: I use mine for proxying past region blocking online and faster file transfers too acquaintances (much higher bandwidth than going over my DSL at home)
05:50:39 <merijn> tdammers: Yeah, but most machines are modern enough to have decent hardware virtualisation
05:51:21 <robertkennedy> Have the stackage people explained in public why they might fork hackage? I guessed that might happen after their docs changed, but I couldn't understand why, and now it seems like an inevitability
05:52:32 <tdammers> robertkennedy: I don't think you'll get a completely honest answer out of anyone at this point
05:53:41 <Athas> robertkennedy: there have been a bunch of Stack bugs related to revisions, lately.
05:55:23 <robertkennedy> There was also some (I believe unrelated?) bug with integer-gmp and cassava, yeah. Oh well: grant me the serenity to accept the things I cannot change
05:56:25 <Athas> Completely ignoring revisions should be technically feasible.  Then the remaining issue is Hackage's idiosyncratic choice of PVP over SemVer, but that seems like a small thing.  That can't be it.
05:59:28 <phadej> stackage people don't have anything about PVP as a versioning scheme, AFAIK
05:59:39 <phadej> /nobody/ at large wants SemVer, it has it's own quirks
05:59:48 <phadej> (like no guarantees with 0.versions and /tags/)
06:01:12 <asdasd> as someone who just begins building haskell projects and is about to contribute: I am sad that the community seems to be so devided over this. I'd rather stick with a techincally inferior solution (that could be improved over time) than having split efforts and growing resentments
06:01:32 <tdammers> version numbers are fundamentally broken as a concept, and I guess most of us know it, but the fact that we don't have a better alternative has a bit of a paralyzing effect
06:01:35 <phadej> see: https://pvp.haskell.org/faq/#how-does-the-pvp-relate-to-semantic-versioning-semver about pvp vs. semver
06:02:27 <Athas> phadej: some people do want SemVer (over PVP).  I agree that version numbers are kind of broken in general, though.
06:02:28 <tdammers> pvp is more appropriate than semver, at least for haskell, but the fundamental issue still remains, namely, that it relies critically on manual efforts
06:03:29 <phadej> yes, as a single thing is that PVP defines what's considered breaking change
06:03:40 <phadej> where semver leaves that completely open
06:03:50 <ventonegro> I doubt it's only about technicalities. The Cassava maintainer literally wrote (I read it in the GitHub issue) that they don't care if it's broken for Stack users, even if it's something they could easily fix. That makes it hard to build on a foundation that may fall under you at any time.
06:04:02 <tdammers> the theory is that with pvp, a valid solution to the dependency graph based on version numbers would guarantee API compatibility
06:04:52 <tdammers> but in practice, this is mostly worthless, because the version numbers themselves are managed by humans, and humans make mistakes
06:04:59 <merijn> ventonegro: I sympathise with them, though. I don't use stack, so being forced to take on extra maintenance workload to appease a tool I don't use or care about seems undesirable
06:05:06 <robertkennedy> One interesting proposal from the GitHub thread was moving version bounds out of cabal, which sounds great. But this is why I asked if they have actually said what the problem is. Because ignoring versioning, there was still integer-gmp and cassava, and I'm not sure those wouldn't be enough to fork, if you wanted to fork
06:05:14 <ventonegro> merijn: Not a tool! Users!
06:05:14 <merijn> ventonegro: If stack users want something to work, they can contribute patches
06:05:45 <Athas> tdammers: automatically generated version numbers would be cool.
06:05:46 <merijn> ventonegro: Those users can contribute patches, then
06:05:52 <kadoban> merijn: The patch was obvious, trivial and wouldn't have been accepted.
06:06:00 <merijn> kadoban: That's a different issue
06:06:05 <ventonegro> merijn: The change was really trivial. If you are unwilling to make a trivial fix to let your package be used ny thousands of people, I don't sympathize at all.
06:06:06 <merijn> I don't know the specific scenario
06:06:18 <tdammers> Athas: I'm thinking yet a step further actually - ditch package-level dependency management entirely, and instead zoom in to per-identifier granularity.
06:06:23 <tdammers> that would be the pipe dream
06:06:39 <tdammers> packages and package versions are really just somewhat clumsy abstractions, and they're leaky as hell
06:06:59 <tdammers> nothing actually depends on a package; things depend on exported identifiers
06:07:07 <Athas> tdammers: but surely you need a version number (of some kind) to identify a module?  You can't really decompose a module further, without breaking abstraction.
06:07:09 <phadej> Cassava maintainer's point was that /stack/ is broken, as it reinvented flag-name parser, and reinvented it wrong
06:07:17 <phadej> sorry, stack /was/ broken
06:07:42 <tdammers> Athas: yes you can. A module is a namespace with names in it, and those names have types. As long as the types and the names match, you can consider them compatible.
06:07:59 <ventonegro> phadej: It's not a good point. Users couldn't still use it.
06:08:06 <phadej> so the disagreement was about where one should contribute patches, to cassava or stack
06:08:11 <Athas> tdammers: what if the semantics change in invisible ways?
06:08:14 <phadej> ventonegro: the patch to stack was also trivial
06:08:15 <ventonegro> phadej: Unless you only care about being right
06:08:16 <phadej> fwiw
06:08:19 <Athas> (Invisible to the types, that is.)
06:09:08 <tdammers> Athas: that is of course possible, and manual intervention needs to be possible for those cases, but it's still better to have defaults that cover normal operation, and make manual intervention the exception rather than the norm
06:09:20 <ventonegro> I don't know how this animosity started, but sadly, it's here now :(
06:09:24 <Athas> Joe Armstrong (of Erlang fame) suggests something like content-addressing of functions, which is essentially versioning at the function level.  But that only works because Erlang is dynamically typed.
06:09:41 <kadoban> phadej: And applied quickly, but because of the situation still disrupted many people (and is still to this day).
06:10:15 <Athas> ventonegro: I think it started because of competition.  It's fairly common to get negative feelings about your "competitor", especially if you are in a dependent relationship (as stack still depends on Cabal-the-library).
06:10:19 <tdammers> Athas: yes, I know, the idea isn't mine - I've seen Rich Hickey talk about this too, although his idea of how you'd do it in practice is a bit different
06:11:19 <ventonegro> Seriously, look at the second comment here https://github.com/commercialhaskell/stack/issues/3345
06:11:29 <kadoban> phadej: Also there is no spec for the flag format. So someone guessed it was equal to a more specified one. The horror. Clearly that transgression deserves thousands of people being annoyed because they dared use a different tool than the maintainer likes. As long as you can assign fault somewhere else, all is good, right?
06:11:30 <ventonegro> They came ready to fight
06:11:36 <phadej> kadoban: there is now.
06:11:41 <phadej> thanks to that particular issue
06:12:44 <Athas> ventonegro: that's nowhere near the first conflicts those guys have had, though.  It did not start like that.
06:13:16 <Athas> It's just grown into this big toxic mess.  Fortunately, there are also people involved who are not angry at each other, but just have different preferences/needs.
06:14:14 <merijn> I'd much rather all the engineering effort of stack had gone into making new-build get ready faster >.>
06:15:20 <Athas> Either way, I have a tool that works really well for my needs now.  I'm OK with how it went, I just wish mom & dad didn't yell so much at each other.
06:16:16 <kadoban> merijn: cabal-install was stuck, it had had easy issues for years that nobody was really doing anything with. You couldn't even use HTTPS. There certainly didn't appear to be enough desire to fix things for users. Competition has provided that.
06:16:30 <phadej> kadoban: not really
06:16:37 <merijn> kadoban: I don't think the lack of desire was ever the issue with cabal-install
06:16:41 <phadej> work on new-build was started before stack was published
06:16:48 <merijn> kadoban: The problem is lack of manpower and a hard to dive in codebase
06:17:16 <phadej> competition maybe speeded up the development, but also made people angry in the process
06:17:18 <merijn> kadoban: (almost?) no one gets paid to work on cabal and the codebase (due to age) is not very amenable to external contributions
06:17:18 <robertkennedy> I love stack. I love `cabal install` and ghci, which I think is called sandboxing, who knows it's great. I really hope we don't see a fork.
06:17:22 <phadej> ... or frustrated
06:17:29 <Athas> My biggest technical issue with Cabal was that the default behaviour (no sandbox, no new-build) was not sane.  This made it harder for me to work in a context where I have to hand my code to people who are not really Haskell programmers.
06:17:51 <merijn> I know, because I've tried to contribute to cabal-install about 10 times now, but I always get stranded by not being able to find me way around
06:17:52 <Athas> Stack even installs GHC.  That's great.  I like cabal-install better in principle, but Stack has saved me a lot of pain.
06:21:26 <kadoban> merijn: All I know is the HTTPS thing annoyed me enough that I looked into adding it. I got the strong sense that it wasn't even desired, so I wandered off. That struck me as directly a problem of motivation.
06:22:57 <kadoban> phadej: Sorry, I never heard of it until a *long* time after stack
06:25:37 <phadej> kadoban: IIRC discussion about 'something like new-build` were already in 2012 or so
06:25:59 <phadej> but nobody was doing anything about it
06:26:43 <kadoban> phadej: That sounds a lot like it agrees with my theory more than disproves it. You ... even used the same words.
06:26:59 <phadej> kadoban: https://www.youtube.com/watch?v=h4QmkyN28Qs
06:27:44 <tdammers> my impression at the time was that cabal was stuck in a loop of really really wanting to do things right, but not actually getting there, and not wanting to admit that a more pragmatic approach would be required at least for the time being
06:28:00 <phadej> and FWIW, there are other tools then stack: tinc and mafia for example
06:28:28 <phadej> but for some reason their maintainers aren't so against
06:28:33 <phadej> think about that for a moment
06:28:47 <phadej> (or think that our tools way is the only right)
06:28:57 <kadoban> Probably because nobody uses them so they don't bother the people that just wish everyone would use cabal-install.
06:30:39 <merijn> On a more direct Haskell topic: I wish IOErrors would more clearly print which constructor/type is being thrown
06:31:26 <Athas> Stack is more popular than cabal-install, at least judging from the 2017 community survey.  Maybe that ruffles some feathers.
06:31:30 <phadej> merijn: IOError is a constructor, that's the problem: https://www.stackage.org/haddock/lts-10.3/base-4.10.1.0/src/GHC-IO-Exception.html#IOException
06:31:45 <merijn> Athas: I think the community survery was... a bit biased in terms of respondents and questions
06:32:03 <Athas> merijn: Sure, I think it was only really distributed on Reddit.
06:32:03 <Taneb> Athas: wasn't that ran by FP Complete?
06:32:12 <phadej> by taylorfausak
06:32:14 <Athas> Taneb: no idea, but it's not like they only sent it to their customers.
06:32:21 <Athas> I have no connection with FP Complete, and I filled it out just fine.
06:32:26 <phadej> fp complete has their own survey though
06:32:28 <merijn> Athas: As in >2 years or something was "long time haskell experience"
06:32:50 <Taneb> phadej: oh, I might be getting mixed up
06:33:01 <phadej> and there wasn't "official bindists" as a way to install GHC
06:33:05 <merijn> Athas: I was not impressed by the questionaire I got mailed, anyway. It seemed very biased, so I didn't bother answering
06:33:17 <dminuoso> Given this code snippet, https://gist.github.com/dminuoso/017837b14c41cd22f6291b3bedd4ea13 - how do I allow for say ldapHost to be a Maybe and shortcircuit and "throw an exception" if its Nothing? I just dont fully understand how to combine the monad stack here.
06:33:17 <tdammers> stack the tool is great, but it would immediately lose a lot of its value and usefulness if it were to lock people out of hackage
06:34:06 <Athas> Yeah, I'd probably switch away from Stack if it forked Hackage in an annoying way.
06:34:21 <phadej> merijn: And I remember someone talking (at least) about making IOError less "one size fits all" it's now, but I cannot find the reference right now
06:34:25 <Taneb> dminuoso: the first way that occurs to me is to add a MonadPlus m constraint, and then later user MaybeT in your stack
06:34:43 <kadoban> Athas: Has there been any discussion of doing anything like that?
06:35:04 <merijn> kadoban: Well, the SLURP proposal causes a lot of FUD in that direction
06:35:07 <Athas> kadoban: it is rumoured.
06:36:44 <Taneb> dminuoso: you can then use maybe mzero return ldpaHost or something
06:38:07 <Taneb> Or if you're enjoying the post-AMP utopia, maybe empty pure lpaHost
06:38:44 <dminuoso> Taneb: Someone in here has assimilated me with AMP nanites, so..
06:39:09 <Taneb> dminuoso: in that case you want an Alternative constraint rather than MonadPlus
06:39:34 <Taneb> MaybeT is still what you want to put in your transformer stack, though
06:39:48 <dminuoso> Taneb: I guess I have to specify the transformer stack explicitly right?
06:40:23 <Taneb> dminuoso: eventually
06:40:33 <dminuoso> I mean I dont expect (MonadIO m, MonadReader m, MonadPlus m) to magically provide me with the right stack magically
06:40:41 <Taneb> No, definitely not
06:40:55 <Taneb> It needs to be explicit somewhere
06:41:18 <kadoban> Ya, that slurp thing is going to go nowhere. The justification is totally missing, hackage never implements anything, and cabal-install hates anything that's even accidentally acknowledges that stack exists.
06:41:28 <Taneb> (or you have lots of runMaybeT/runReaderT/whatever in the right places and end up with just IO even though you had some big thing in the middle)
06:41:35 <jpcooper> Hello. On Arch Linux I'm trying to run stack setup on a package which requires glpk-hs-0.5 from Hackage. This package requires the glpk library to be installed, which it is. The Cabal-simple which stack is using is claimaing that this library is not installed. I have tried adding /usr/lib to --extra-lib-dirs to no avail, but I shouldn't have to specify that in the first place. Can anyone suggest a solution?
06:42:10 <merijn> kadoban: I have hope that the Simons can function as cooler minds and get people to play along well enough to get an ecosystem that's not completely broken
06:43:23 <Athas> I am trying new-build now.
06:44:27 <merijn> hmmm, time doesn't have a way to query the locale for me to get a LocalTime?
06:45:04 <dminuoso> Taneb: Alright, lets see what I can do with this thanks. It still feels weird.
06:45:09 <merijn> Ah, getZonedTime is the one
06:45:38 <Taneb> dminuoso: hope it works well!
06:46:14 <Taneb> dminuoso: it's just occured to me that you can do something far simpler by pattern matching on the Maybe and in the nothing case just doing return ()
06:46:20 <dminuoso> Taneb: Originally I tried having some PreConf and Conf, where PreConf had some types wrapped in Maybe, and then I would validate that PreConf
06:46:33 <dminuoso> But that somehow went really weird.
06:46:36 <jpcooper> I would really appreciate some tips. I've gone through all the links I could find on Google
06:48:43 <srid> Athas: what would you switch to? cabal+nix?
06:49:08 <kuribas> How hard iHow much applicants can you expect for a haskell job in europe (not remote, not Berlin, ...)
06:49:21 <merijn> srid: If you don't already use Nix then new-build works well
06:49:22 <Athas> srid: cabal new-build.
06:49:34 <merijn> srid: I can't be arsed to learn Nix, tbh
06:49:34 <Athas> The only thing I would miss is the automatic GHC installation, I think.
06:49:38 <Taneb> kuribas: seven months ago I'd have applied if I'd seen it
06:49:55 <merijn> Athas: That'd be fairly easy to write a script for, though. Simply grabbing a bindist
06:49:55 <dminuoso> kuribas: Without having much Haskell experience, Id say that greatly depends on what field the job is in, what city
06:49:57 <Athas> And also that Stack is just generally more polished/friendly (e.g, installs into the standard ~/.local/bin).
06:50:01 <srid> merijn: I am using nix for ghcjs and https://github.com/reflex-frp/reflex-platform
06:50:07 <kuribas> Taneb: would you go to antwerp Belgium for it?
06:50:17 <Athas> merijn: I would need to worry about all the different platforms.  Right now the Stack devs worry for me.
06:50:24 <kuribas> dminuoso: Antwerp, Belgium
06:50:31 <Taneb> kuribas: I would have done, yes (currently happy in Cambridge, UK, though)
06:51:42 <dminuoso> kuribas: And what kind of developer are you looking for? Any sort of prerequisites?
06:52:01 <dminuoso> kuribas: Any special technologies or mathematical background required?
06:52:47 <kuribas> dminuoso: any kind.  Actually I just like to answer positive to the question that there can be continuity if we decide to use haskell.
06:53:17 <kuribas> dminuoso: it would be legal software and accounting.
06:53:56 <kadoban> merijn: That would be nice in general, though I'm not sure I understand what this specific proposal would help yet.
06:54:14 <kadoban> (just didn't think about it in depth enough yet)
06:54:15 <kuribas> dminuoso: no high level required, but the willingness to learn.
06:56:38 <dminuoso> kuribas: Those information are for the channel rather than me. I couldnt answer your question because Im a Haskell beginner myself, but it's kind of important to tell the channel "what kind of developer you are looking for" when you want to know the likelihood of finding applicants.
06:57:32 <kuribas> dminuoso: right!  Your answer helps, because it shows there is willingness.
06:57:50 <kuribas> dminuoso: but you're right, that's good advice.
07:10:00 <pie__> any easy way to convert an AST from language-javascript to something manipulable like Data.Tree?
07:10:21 <pie__> i can also switch my parser at this point
07:11:44 <pie__> actually im not sure it was Data.Tree, I know I saw a good looking tree library somewhere
07:12:56 <slevin> whats the easiest way of pretty printing a html dom tree? seems there are a myriad of libraries and opinions, so i became a bit dizzy when googling something i expected to be very simple
07:19:56 <slevin> and when adding such a library to a stack project, do i add the dependency in package.yaml or stack.yaml, or both
07:20:36 <kadoban> slevin: package.yaml , you only need to add it to stack.yaml if it's not in your resolver, which it will complain about (and usually suggest what to do)
07:21:03 <reactormonk> slevin, package.yaml is the actual dependencies, stack.yaml is for modifying the snapshot your packages are coming from. If you want to specify something outside the snapshot, you'll have to add it to both.
07:21:38 <slevin> kadoban reactormonk: thanks a lot, that makes sense
07:23:24 <bajrjr> /
07:28:37 <nullie> can I search for values in a mutable vector?
07:31:54 <EvanR> nullie: unsafeFreeze it, and use the immutable vector find?
07:32:23 <nullie> well, can I do it safely?
07:32:41 <EvanR> then evaluate the result in IO (using evaluate) before you mutate it
07:33:17 <EvanR> you can also doing safely, using freeze
07:33:27 <EvanR> it will make a copy of the vector before doing the find
07:38:31 <EvanR> nullie: theres also this
07:38:35 <EvanR> findM :: Monad m => (a -> m Bool) -> [a] -> m (Maybe a)
07:38:40 <EvanR> er
07:40:14 * EvanR thinks about traversable
07:40:43 <nullie> well, looks like it will be some combination of read and test anyway, thanks
07:41:45 <EvanR> theres that way but i think it will be slower and more complicated to write
07:46:48 <jonge> hey there, while i have some monadic understanding of list comprehensions, i wonder why the following works: ["foo" | bar] for (bar :: Bool)? I cannot see in the documentation that Bool is instance of some class that would implement this.
07:49:28 <hyperisco> > ["foo" | True]
07:49:30 <tdammers> bar is not the "source" in this comprehension, but a "condition"
07:49:32 <lambdabot>  ["foo"]
07:49:42 <hyperisco> > ["foo" | False]
07:49:45 <lambdabot>  []
07:49:47 <phz_> hey
07:49:58 <phz_> does runghc produce a ghci-like binary internally?
07:50:17 <phz_> I’m wondering that if it can be seen as a JIT or not
07:50:21 <phz_> whether*
07:50:33 <jonge> tdammers: so is that kind of a specific implementation of the list comprehension syntax just for bools, or some type magic?
07:53:59 <tdammers> neither
07:54:47 <tdammers> on the right of the | in a list comprehensions, you can have two kinds of things: bindings (pattern <- expr) and guards (anything else, but should be of type Bool)
07:55:04 <tdammers> so if it doesn't parse as a binding, then it must be a guard
07:55:33 <geekosaur> phz_, no binary involved, and no JIT. in fact the bytecode backend used by ghci and runghc (and TH) has no optimization at all
07:56:25 <geekosaur> they generate bytecode in memory, interpret it, and forget / garbage collect it
07:58:26 <phz_> geekosaur: ok, so it’s a bit different than having to compile it through the regular ghc process, right?
07:59:05 <geekosaur> somewhat, yes
07:59:17 <phz_> geekosaur: thanks
07:59:19 <dminuoso> geekosaur: What are the key differences?
07:59:28 <jonge> tdammers: aaah ok. i did not really explicitly use guards yet
07:59:36 <jonge> but this is enough to understand, thank you!
07:59:54 <geekosaur> (a) it's intended for single-file scripts, and doesn;t really handle multi-source-file programs very well
08:00:14 <geekosaur> (b) it has something like ghci's defaults, including implicit import of fully qualified names
08:00:41 <geekosaur> (c) since it's using the same backend as TH, there are problems using TH with it
08:01:03 <geekosaur> (I don't thik you have have multiple instances of the bytecode compiler active)
08:01:05 <dminuoso> TH being template haskell?
08:01:07 <geekosaur> yes
08:01:57 <geekosaur> (d) no optimization so it can be slow and waste a fair amount of memory, where the native compiler backends would e.g. fuse away allocations
08:02:48 <kadoban> phz_: By the way if you need a quick script that behaves more (aka exactly) like a compiled program, stack's script interpreter thing is a good option
08:03:03 <geekosaur> (e) the bytecode interpreter doesn;t understand unboxed tuples, so any program that uses them (aside from the trivial case of something like IO, where the tuple vanishes at runtime) will crash
08:10:43 <EvanR> so foldMap is cool and all, but man there are so many things that are monoids by default that would need to be to use foldMap
08:10:52 <EvanR> or youd need to make a Monoid instance first
08:11:12 <EvanR> in such cases, resort to foldr or foldl' ?
08:12:32 <EvanR> also i just realized theres a foldr', wtf
08:13:10 <EvanR> which by default is implemented with lazy foldl
08:13:18 <EvanR> brain explode
08:16:49 <SharpGAF> This may be the wrong place to ask, but: does anyone know whether the initial results about CiC (that all of its computational content lives in Fomega) translates to more modern dependent type systems as used in Coq and Agda (with things like inductive families)?
08:23:45 <lyxia> SharpGAF: maybe #coq knows better
08:24:30 <SharpGAF> Indeed… I will ask there.  Thanks.
08:30:12 <fr33domlover> Hello!
08:30:26 <fr33domlover> Anyone recently using Heist and charade successfully?
08:30:34 <fr33domlover> (web page templates)
08:30:53 <fr33domlover> I'm getting a bug there :-/
08:31:24 <ldwibs> Why is it -- (Identity a) >>= f = f a -- but not -- (Identity a) >>= f = return (f a)?
08:32:36 <kadoban> ldwibs: What's the type of 'f' in that? (look at the type of (>>=) if you're not sure)
08:32:37 <int-e> ldwibs: return a >>= f = f a is a monad law.
08:36:25 <ldwibs> Does that mean 'f' include 'return'?
08:37:18 <ldwibs> Identity a >>= f = f a (where f = reutrn . f)?
08:37:58 <kadoban> It doesn't necessarily include the word 'return' anywhere in its implementation, but adding the 'return' like in your original question would not result in two things of the same type on either side of the equality.
08:39:13 <ldwibs> But, Identity 3 >>= (+3) doesn't work while Identity 3 >>= reutrn . (+3) works
08:40:00 <glguy> ldwibs: Whatever you pick for 'f' has to type-check, so certainly (+3) isn't a valid choice
08:40:13 <kadoban> ldwibs: That's because your 'f' there, (+3), isn't the right type.  return . (+3) is the right type. But there's a bunch of functions not of that form that are also the correct type.
08:40:18 <glguy> your (return . (+3)) is a valid choice, but a return is not a necessity
08:40:23 <[exa]> Guys, are there some good examples of "commutative" monads in the sense that (a>>b)>>x is required to be the same as (b>>a)>>x ?
08:40:33 <[exa]> (not sure whether this matches the definition of commutative monad from CT
08:40:36 <[exa]> )
08:41:25 <nshepperd1> Reader
08:41:38 <ldwibs> Right. I think I understand now.
08:41:41 <ldwibs> Many thanks all
08:42:56 <[exa]> nshepperd1: hm yeah. thanks. :]
08:43:17 <[exa]> I'm thinking whether Maybe is commutative in this sense
08:43:26 <nshepperd1> Identity i suppose but that's just reader ()
08:44:27 <[exa]> hm it isn't there can be bottom
08:45:11 <nshepperd1> If a, b and x are all Just, then the first expression is a and the second expression is b, no?
08:46:52 <ldwibs> Why is it,-- instance Functor Maybe where --, instead of -- instance Functor Maybe a where -- ?
08:47:16 <mauke> because Functor only takes one argument, not two
08:47:23 <[exa]> nshepperd1: the >>x is there esp. for removing the "return value" from the a,b
08:47:52 <nshepperd1> Uh. Oh right i had that backward
08:48:11 <[exa]> nshepperd1: anyway iirc  ( Just undefined >> Nothing ) >> Just foo   is different from the other commutation
08:48:24 <[exa]> ok nevermind :]
08:48:32 <kadoban> ldwibs: Because Maybe Int and Maybe String being different instances of Functor would be weird and unhelpful
08:48:33 <int-e> ldwibs: the instances of the Functor class are not types, but unary type constructors.
08:48:58 <int-e> (this is applicable in case you meant  instance Functor (Maybe a))
08:49:01 <glguy> No, they are types and non-type-construtors can be instances
08:49:09 <glguy> (Either a) is not a type constructor and it's an instance
08:49:18 <nshepperd1> Bah, undefined
08:49:20 <mauke> ldwibs: look at the definition of Functor: class Functor f where { fmap :: (a -> b) -> f a -> f b }
08:49:22 <lyxia> [exa]: without bottoms, lists satisfy (a >> b) >> x = (b >> a) >> x too
08:49:50 <nshepperd1> I think it's notable if a type satisfies ignoring bottom
08:49:55 <[exa]> lyxia: even the ordering of the result list?
08:49:56 <mauke> ldwibs: 'instance Functor Maybe a' would bind 'Maybe' to 'f', and then 'a' would be an error (too many arguments)
08:50:03 <lyxia> [exa]: yes
08:50:19 <kadoban> [exa]: Nothing from a or b is used in the result with >> >>
08:50:19 <lyxia> [exa]: you need (>>=) for it to matter
08:50:20 <[exa]> oic the ordering is set elsewhere
08:50:34 <mauke> ldwibs: 'instance Functor (Maybe a)' would bind 'Maybe a' to 'f', but then 'fmap :: (c -> b) -> Maybe a c -> Maybe a b' would be a kind error
08:50:53 <[exa]> good.
08:51:25 <ldwibs> That's clear
08:51:32 <ldwibs> Thanks a lot.
08:51:47 <nshepperd1> I wonder if (<*) = flip (*>) is equivalent to that concept of "commutative"
08:52:19 <kadoban> You could think about writing the instance for Functor differently, but you get into trouble, like   fmap :: (a -> b) -> f -> ???    You can't write f b anymore, because f is like Maybe Int, and there's no way to get Maybe b from f
08:52:31 <[exa]> ldwibs: you might want to check kinds of all the involved stuff using e.g. :k Functor, :k Maybe and :k Maybe Int
08:53:26 <[exa]> nshepperd1: brings up commutative applicatives.
08:54:23 <phadej> nshepperd1: commutative effects are: f <*> x = flip ($) <$> x <*> f
08:54:59 <phadej> Maybe satisfies, IO doesn't
08:55:38 <[exa]> phadej: that's probably what I was searching for, thanks
08:56:03 <nshepperd1> Writer m for commutative monoid m
08:58:08 <[exa]> hm that brings up commutative monoids
08:59:55 <nshepperd1> I wonder if that Store monad is commutative. If you give it a commutative monoid
09:03:17 <wz1000> does stack work with backpack?
09:06:12 <cocreature> wz1000: no
09:11:46 <ertes-w> @let newtype Nat = Nat { fromNat :: [()] } deriving (Eq, Ord);  instance Show Nat where showsPrec d = showsPrec d . fromNat
09:11:51 <lambdabot>  Defined.
09:13:33 <ertes-w> @let instance Num Nat where Nat x + Nat y = Nat (x <|> y); Nat x * Nat y = Nat (x *> y); negate (Nat []) = Nat []; negate _ = undefined; abs = id; signum (Nat x) = Nat (take 1 x); fromInteger n | n < 0 = undefined | otherwise = Nat . replicate . fromInteger
09:13:36 <lambdabot>  .L.hs:214:25: error:
09:13:36 <lambdabot>      • Couldn't match expected type ‘Nat’
09:13:36 <lambdabot>                    with actual type ‘Integer -> Nat’
09:13:52 <ertes-w> @let instance Num Nat where Nat x + Nat y = Nat (x <|> y); Nat x * Nat y = Nat (x *> y); negate (Nat []) = Nat []; negate _ = undefined; abs = id; signum (Nat x) = Nat (take 1 x); fromInteger n | n < 0 = undefined | otherwise = Nat (replicate (fromInteger n) ())
09:13:56 <lambdabot>  Defined.
09:14:29 <ertes-w> > 2^5 + 1 :: Nat
09:14:33 <lambdabot>  [(),(),(),(),(),(),(),(),(),(),(),(),(),(),(),(),(),(),(),(),(),(),(),(),(),...
09:14:43 <ertes-w> d'oh
09:15:24 <ertes-w> should have been (showsPrec d = showsPrec d . length . fromNat) =)
09:15:59 <Taneb> Now you're going to have to start over
09:16:06 <phadej> > length . fromNat $ 2^5 + 1
09:16:10 <lambdabot>  33
09:23:42 <dminuoso> ertes-w, I think you and edward both recommended Conceptual Mathematics from Schanuel and Lawvere, right?
09:25:04 <ertes-w> dminuoso: that wasn't me
09:25:17 <dminuoso> Oh must be misremembering. Pardon me.
09:25:35 <Welkin> dminuoso: I recommend that book
09:26:23 <ezyang> wz1000: I'm working on it (very slowly) ;)
09:26:30 <dminuoso> Welkin, oh! Well Im quite amazed by it. Even though I have already some rudimentary understanding, it's very revealing from the very beginning. :)
09:26:39 <ReinH> dminuoso: I'd recommend it. Also Basic Category Theory by by Leinster, which he's made available for free on arXiv.
09:26:45 <ReinH> s/by by/by
09:27:03 <Taneb> ReinH: oh, neat!
09:27:10 <ReinH> Very neat.
09:29:18 <Taneb> ReinH: thanks for that, I've bookmarked it
09:29:46 <dminuoso> ReinH, oh that looks far more math heavy though.
09:29:59 <ReinH> Well, it is math.
09:30:09 <ReinH> It's somewhere between Lawvere and Awodey in approachability.
09:30:40 <Taneb> When I was at uni, I had for pretty much my entire degree an obscure tome entitles "Categories" by... Schubert? translated from German
09:30:55 <Taneb> When I graduated I had to return it to the library, sadly
09:31:13 <Welkin> Taneb: did it make a good doorstop?
09:31:35 <Taneb> Welkin: it was really good for my maths education! Made every other book look like easy reading by comparison
09:32:47 <sqooq> How hard would it be for me to make a language like haskell
09:33:07 <sm> a *little* tricky..
09:33:17 <sqooq> OR, can I take haskell and like change it up??
09:33:37 <kadoban> Sure, fork it to your heart's content. Depends how big of a change you want to make though.
09:33:39 <Welkin> sqooq: you can write yourself a scheme
09:33:56 <sqooq> Welkin, a scheme?
09:34:39 <Welkin> the lisp language
09:34:46 <Welkin> it's very simple
09:34:57 <sqooq> but I want haskell
09:35:04 <Taneb> sqooq: what exactly is your goal?
09:35:09 <Welkin> you can write it in haskell
09:35:34 <EvanR> you can write a simple lisp pretty easily, but then youd have to program in lisp. also scheme is a standardized language very complicated, the 24 hours is an exaggeration
09:35:39 <Taneb> Create your own implementation of Haskell? Define a language that is similar to Haskell, but not necessarily implement it?
09:35:39 <ReinH> If you want to write your own Haskell, writing your own scheme would be a good first step.
09:35:51 <Welkin> EvanR: 48 hours I thought
09:36:04 <EvanR> i stand corrected
09:36:30 <sqooq> I want haskell but with free imperative time control
09:36:39 <Welkin> if you have never written a programming language, I would not start with haskell
09:36:42 <Welkin> o.o
09:36:48 <EvanR> you what mate
09:36:49 <benzrf> Welkin: why not ? :)
09:36:52 <sqooq> lool
09:36:55 <SharpGAF> Lazy evaluation is rather difficult to get right
09:36:59 <SharpGAF> For one thing.
09:37:01 <Welkin> start with something dead sinple
09:37:03 <Welkin> simple*
09:37:12 <SharpGAF> Substitution is trickier than with cbv.
09:37:18 <benzrf> oh wait
09:37:22 <benzrf> "written" as in "implemented"
09:37:24 <benzrf> hah
09:37:28 <benzrf> i misunderstood
09:37:28 <sqooq> Welkin, but I don't want to write any language, I want to write the right language
09:37:38 <sqooq> actually this is way trickier than I think I'm making it out to be
09:37:40 <benzrf> yes, writing a simple lisp is the way to go
09:37:40 <Welkin> write a Forth compiler
09:37:47 <ReinH> You can write yourself a proto-lisp in a few hours though, like the one described by the metacircular evaluator paper.
09:38:05 <benzrf> sqooq: if you write a lisp you wont even need have to have separate datatypes for "values" and "syntax"
09:38:18 <benzrf> and your parser will be dirt simple
09:38:26 <sqooq> But I don't want lisp
09:38:30 <sqooq> I want haskell
09:38:47 <EvanR> values are just particular expressions, nice situation
09:38:50 <sqooq> maybe this is a stupid idea
09:38:52 <benzrf> would you settle for an untyped lazy pure language
09:38:57 <SharpGAF> sqooq: Start with one of the lambdi calculi first
09:38:58 <benzrf> EvanR: you mean the other way around?
09:39:06 <EvanR> nope
09:39:11 <Welkin> sqooq: then just use haskell
09:39:19 <ReinH> SharpGAF: I don't think laziness is rather difficult. Left-most outermost evaluation isn't harder than other forms. Sharing requires some extra work, but not much.
09:39:20 <Welkin> I don't understand why you want to recreate your own haskell
09:39:25 <EvanR> 2+2 is an expression 4 is an expression
09:39:31 <sqooq> Welkin, I want to make an audio language that's good
09:39:39 <Welkin> sqooq: there are already plenty
09:39:40 <sqooq> no matter how long it takes me
09:39:42 <SharpGAF> ReinH: The problem is that De Bruijn notation does not work as well for cbn
09:39:44 <Welkin> you can write a DSL *in* haskell
09:39:47 <sqooq> Welkin, "that's good"
09:39:50 <Welkin> there is already Euterpea
09:39:50 <SharpGAF> You need to do shifts sometimes
09:39:52 <ReinH> sqooq: Yes, I know you don't want lisp, but a simple lisp is a much easier language than Haskell and would be a good learning step.
09:39:56 <sqooq> Welkin, it's non-realtime
09:40:02 <benzrf> parsing a lisp is so simple that i wrote a (rather shoddy) parser for a tiny lisp in only 106 lines of C without using anything other than basic I/O
09:40:06 <SharpGAF> It's considerably more complicated (the upside is that it's correct for the equational theory)
09:40:07 <Welkin> you can use haskell to write a DSL without re-implementing haskell itself
09:40:09 <benzrf> C!
09:40:27 <EvanR> SharpGAF: in the "i am not a number" paper, it seems pretty straightforward
09:40:38 <EvanR> still literal substitution wont be the most efficient
09:40:41 <sqooq> Welkin, Not for audio, they're all shit
09:40:48 <sqooq> I need more direct control.
09:40:52 <Welkin> okay then, go ahead and write your own haskell compiler
09:40:53 <Welkin> good luck
09:40:58 <SharpGAF> EvanR: It's not *that* complicated but compared to cbv it is much more likely that you'll mess up initially
09:40:58 <benzrf> funny story:
09:40:59 <Welkin> We'll see you... maybe never
09:41:01 <benzrf> i've been writing my own haskell copiler
09:41:07 <benzrf> strictly - a tiny tiny subset of haskell
09:41:13 <sqooq> Welkin, I'll leave it as last resort
09:41:17 <aarvar> sqooq: what is haskell lacking?
09:41:19 <EvanR> SharpGAF: not if you use the simple framework in that paper
09:41:26 <benzrf> i just got up to managing to walk the stack highly nonportably for x64 for gc ^__^
09:41:30 <sqooq> aarvar, explicit time control
09:41:32 <EvanR> debruijn is what makes it simple
09:41:45 <[exa]> sqooq: what is "imperative time control" anyway?
09:41:47 <sqooq> I think do blocks could maybe work?
09:41:59 <SharpGAF> EvanR: I'll read the paper, but I'm not really sure how you get around the fact that with cbv you don't have to do any shifts.
09:42:00 <sqooq> But I'd still have to write a program/library(?) in another language first
09:42:05 <sqooq> and have haskell bind to it and control it
09:42:20 <EvanR> with cbv you dont even have to do substitution
09:42:39 <EvanR> its incredibly simple
09:42:40 <geekosaur> I am not sure how a new haskell compiler is going to help with "explicit time control"
09:42:43 <sqooq> [exa], like tell time to progress explicitly
09:42:55 <sqooq> In some sense this is similar to threadDelay I think
09:42:59 <geekosaur> that just sounds utterly confused to me
09:43:03 <sqooq> but more nuanced
09:43:10 <aarvar> sqooq: define a type Audio, which represents some audio. have functions which control the timing of the audio
09:43:12 <sqooq> Check out Chuck.
09:43:13 <geekosaur> this is not a language function
09:43:23 <SharpGAF> EvanR: You certainly need to do substitution in cbv… and cbn.  Unless you don't have beta reduction.  Am I missing something?
09:43:46 <sqooq> geekosaur, chuck has it as a core part of it's language, and it's quite nice, but literally everything else about chuck sucks
09:43:54 <EvanR> you use an environment containing the results of evaluating arguments
09:44:07 <sqooq> http://chuck.cs.princeton.edu/doc/language/time.html
09:44:08 <benzrf> EvanR: well, you could do the same thing in cbn
09:44:09 <EvanR> a call stack even
09:44:12 <benzrf> just dont eval ahead of time
09:44:18 <benzrf> :-)
09:44:35 <EvanR> well the environments can go on a simple stack
09:45:03 <EvanR> no need for reified expressions at all
09:45:09 <aarvar> sqooq: there's no reason to build any of that into the language
09:45:11 <benzrf> reified expressions...?
09:45:16 <EvanR> non-values
09:45:17 <SharpGAF> EvanR: Sure, but you still ultimately need to *use* those arguments at some point if you are allowed to evaluate under lambda binders.
09:45:21 <sqooq> aarvar, it's really really nice though.
09:45:23 <benzrf> you need those to evaluate them, though
09:45:41 <aarvar> sqooq: how is it any nicer than just having those things as haskell functions
09:45:47 <cycle337> omg so hello first of all
09:46:02 <cycle337> I recently jumped neck deep in the haskell world
09:46:05 <benzrf> :D
09:46:19 <Welkin> cycle337: and now you are stuck in a pit of quicksand?
09:46:20 <sqooq> aarvar, maybe it's possible, but it would have to be in a do block, and use "fork" I guess. I don't know much about that sort of stuff.
09:46:23 <EvanR> well, i dont knkow what im arguing. in any case i see LC substitution as the basis of understanding eval, and debruijn simplifies that greatly
09:46:23 <kadoban> cycle337: Head first or feet first?
09:46:42 <Welkin> sqooq: what do do-blocks have to do with anything?
09:46:43 <cycle337> i have a background of some lisp (clojure) and a bit of Elm
09:46:44 <aarvar> sqooq: why would it? do is just syntactic sugar
09:46:46 <sqooq> But it would have to support several explicit time control patterns at the same time
09:46:57 <sqooq> aarvar, monad then...
09:46:58 <Welkin> do-syntax is just syntactic sugar
09:47:06 <sqooq> I know do is sugar
09:47:07 <cycle337> @Welkin haha yea yea stuck for sure
09:47:07 <lambdabot> Unknown command, try @list
09:47:08 <aarvar> "monad" is just an abstraction
09:47:11 <EvanR> compiling any of the evaluation strategies is anothe rstory
09:47:18 <sqooq> but no one wants to write binds and lambdas
09:47:35 <cycle337> well kadoban can't really say ... :) I inherited this project at work, don't understand most of it so I'd say head first:))
09:47:38 <cycle337> anyways
09:47:43 <cycle337> it's good to be here
09:47:43 <ReinH> sqooq: have you seen tidal?
09:47:50 <sqooq> ugh
09:47:54 <sqooq> yes
09:48:03 <cycle337> lucky to count myself amongst you fellow haskellers, am eager to learn and dig myself out
09:48:07 <hyperisco> how do people obtain a background in Elm? I thought that was a new wizbang language
09:48:11 <Welkin> lol
09:48:20 <ReinH> sqooq: I will just point out that, for all their supposed flaws, these live coding environments do have one advantage: they exist.
09:48:20 <Welkin> a ton of people have a one-night stand with elm
09:48:27 <aarvar> sqooq: I suggest you also avoid using strings if you don't want to have to use monoids then
09:48:28 <Welkin> especially people from javascript
09:48:46 <lyxia> sqooq: what kind of program do you want to write using "explicit time control"
09:48:49 <Welkin> sadly Elm will not help you that much
09:48:49 <[exa]> sqooq: what granularity do you need from time?
09:48:57 <Welkin> it is completely different from haskell
09:49:06 <[exa]> sqooq: ("precision of time commands")
09:49:08 <EvanR> sqooq is writing programs to process audio data
09:49:09 <Welkin> the only similarity is using whitespace as function application
09:49:09 <cycle337> recently bought a safaribooksonline subscription and joined the learning ranks :)) proud to say I like what I understand so far, but I don't understand so much so ... :))) lol
09:49:10 <EvanR> in real time
09:49:22 <cycle337> one night stands with elm, that wasn't in the job description but what the heck :))
09:49:58 <cycle337> haha yeah, I see that now
09:50:10 <[exa]> EvanR: depends on whether he is syncing DSPs (he'd need microseconds) or just trying to play audio in the right time (10ms resolution is more than perfect)
09:50:35 <cycle337> our lead programmer has a love-hate-love relationship with haskell and now I can see why
09:50:56 <aarvar> the hate is due to lack of dependent types I assume
09:51:03 <EvanR> microseconds, core audio nanoseconds, all are crap since sample rates dont divide into them
09:51:29 <sqooq> Literally every audio language has major flaws and I'm really sick of it
09:51:38 <sqooq> I feel like I'm chasing a rabbit trying to do the things I want to do
09:51:42 <[exa]> maybe it's inherent to audio
09:51:51 <aarvar> let's just get rid of audio
09:51:51 <sqooq> [exa], I really don't think so
09:52:01 <sqooq> because every language has some features or another
09:52:15 <cycle337> anyway, haskell was very esoteric up until yesterday :)) even though I knew much about the core principles like partial application, laziness and higher order functions
09:52:39 <sqooq> for example, I was trying to do a low sample recursive delay feedback thing in supercollider, and after spending hours looking and looking, the best I could do was do it at control rate, which is not what I wanted to do
09:52:47 <cycle337> i guess it was the syntax (still is, don't understand much of it) but it's nice to see it unfold bit by bit as I progress thorugh the tutorial
09:52:53 <sqooq> Csound can do it just fine, but csound's scoring section is actually disgusting
09:52:57 <aarvar> cycle337: what partial application? there are only applications
09:53:03 <Welkin> lol aarvar
09:53:17 <aarvar> partial application is for languages with multi-argument functions
09:53:17 <sqooq> pure data can do it but good luck reusing code and working with stateful actions et al, hell even programming simple non-audio programming stuff in pure data is a pain
09:53:27 <cycle337> got me there aarvar
09:53:27 <hyperisco> cycle337, Haskell does not have partial application
09:53:38 <Taneb> aarvar, hyperisco: be easy on the new person
09:53:40 <cycle337> what do you mean hyperisco?
09:53:41 <EvanR> i could have sworn there was a haskell audio synth library which was interactive
09:53:42 <cycle337> :))
09:53:48 <cycle337> i just learned about it :))
09:53:49 <MarcelineVQ> leave the poor boy alone, partial application is a well used term even in haskell
09:53:54 <ReinH> sqooq: fwiw it's not really motivating me to help you when I imagine that you will call my efforts "disgusting" if they aren't exactly what you want.
09:53:54 <geekosaur> ^
09:53:55 <Welkin> all haskell functions are functions of exactly one parameter
09:53:57 <sqooq> Chuck is beautiful when it comes to controlling time, but actually shit when it comes to everything else. Hell you can't just add, subtract and multiply signals, you have to do it in this indirect roundabout way.
09:54:03 <hyperisco> Taneb, this is me being easy. Do you know how hard it is when you don't understand functions properly?
09:54:05 <kadoban> Ya, what every beginner needs is super pedantic definitions about partial application
09:54:05 <Welkin> but yes, we know what you mean
09:54:28 <Taneb> cycle337: what they mean is you can (and sort of should) treat every function as a function of one argument, which may return a function
09:54:47 <cycle337> oh wow ! Welkin that's eye opening didn't think about it like that
09:54:47 <hyperisco> okay, fine… did not realise this was so controversial. I won't bother to explain then… got other things to do
09:54:55 <Taneb> cycle337: in this sense, because every function only takes one argument, you can't partially apply a function (you either provide 0 arguments or 1 argument)
09:55:00 <[exa]> sqooq: tried ladspa+jack ?
09:55:02 <sqooq> ReinH, no csound's score section is pretty bad. It was made with a certain kind of explicit composition in mind. Tons of efforts was made to change it/extend it using python and stuff, but it's like trying to put bandages on a fundamentally bad implementation.
09:55:14 <ReinH> sqooq: you've said something similar about literally everything.
09:55:20 <ReinH> This is shit, this other thing is disgusting.
09:55:21 <Welkin> sqooq: what is this for? Just use a DAW to compose your music
09:55:31 <cycle337> yes yes guys, but in clojure (i know, don't go there) i had to explicitly (partial...) things
09:55:42 <cycle337> in haskell it's implied everytime you evaluate :)
09:56:03 <hyperisco> is there a language that does have partial application? I am not really sure what that means
09:56:04 <aarvar> who knew pedantism could be eye opening
09:56:05 <Welkin> sqooq: I agree with ReinH here, and that is rare. Your attitude is not helpful or appreciated.
09:56:07 <EvanR> yeah clojure has multiarg functions
09:56:20 <EvanR> with multiple "arities"
09:56:40 <argent0> Hi, I'm trying to write a class with a function `Int -> (Some Sum Type)`, but I'm having problems when Int is greater than the number of terms in the sum type. Is it possible to write such a function? Here is my code: http://lpaste.net/361904
09:56:47 <EvanR> haskell is more austere in that regard
09:56:56 <sqooq> Welkin, I don't just compose music in a regular manner. The audio language creators do so because they know that commercial products can't handle everything. Miller Puckette said this himself. When the commercial products don't do what you want, you turn to the audio languages.
09:57:23 <sqooq> I do experimental music. For example right now I have a project idea involving traversing graphs and creating music out of it. This isn't something I can do in a DAW
09:57:29 <hyperisco> argent0, what line number am I looking at? there are many functions in there
09:57:32 <Welkin> sqooq: any commercial DAW can do anything you want it to do. You have total control over every aspect of the sound.
09:57:32 <cycle337> yea, and speaking of austere, in clojure you can have side effects too which is to be avoided at all cost :))
09:57:34 <ReinH> cycle337: The decision Haskell designers made to make every function take one argument and to make the syntax cleverly hide this was brilliant, because it makes it look like Haskell has partial application.
09:58:03 <cycle337> yes ReinH I see that now and I can appreciate its brilliance :)
09:58:05 <EvanR> i had a hard time in clojure figuring out how to make side effects happen even when i want them
09:58:06 <sqooq> Welkin, commercial DAW's cannot traverse a graph endlessly and make music. DAW's cannot do algorithmic music. DAW's can't do lot's of stuff.
09:58:07 <ReinH> Imagine if application had been written with parenthesis: f(a)(b)(c)
09:58:13 <cycle337> haven't thought of it that way :D
09:58:19 <dminuoso> When I want to raise and catch errors, is ExceptT generally the way to do it? In particular I have specific error situations that I can deal with, others that I can't.
09:58:23 <cycle337> until Welkin mentioned it
09:58:30 <Welkin> sqooq: then you are not composing music. you are letting a computer compose it for you.
09:58:30 <lyxia> argent0: why don't you derive Enum
09:58:32 <[exa]> sqooq: you want a tiny DSL for the intermediate language between CSound and graph processing
09:58:35 <aarvar> argent0: this is what Enum and Bounded exist for
09:58:36 <sqooq> Welkin, I'm not trying to be stubborn. I'm just being honest.
09:58:47 <lyxia> argent0: line 28, you only want   gdeEnum 0 = U1
09:58:48 <dminuoso> Or is exceptions more of an antipattern in Haskell?
09:59:00 <ReinH> "I'm just being honest" is the last refuge of the jerk.
09:59:03 <sqooq> Welkin, that's a valid opinion. Many people don't consider certain aleatoric contemporary music, music.
09:59:07 <sqooq> I do.
09:59:07 <EvanR> there is more than one way to do it with exceptions in haskell
09:59:43 <hyperisco> argent0, for a runtime error use  error "my error message"
09:59:48 <cycle337> anyways, back to studying, I have to convert a function so that it spew out an Either so I know where it breaks and with what error message
09:59:51 <EvanR> use ExceptT to add an exception mechanism to your custom monad that uses transformers
09:59:51 <ReinH> dminuoso: Exceptions and ExceptT are different things, names notwithstanding.
09:59:52 <lyxia> argent0: and you seem to assume that sums are encoded as lists using (:+:), but that's not valid
10:00:03 <ReinH> Exceptions can only be caught in IO.
10:00:11 <argent0> hyperisco: around line 36, there is where I think the problem lies.
10:00:20 <aarvar> argent0: you probably want Int -> Maybe (f a) instead
10:00:29 <ReinH> ExceptT is the monad transformer version of Either.
10:00:36 <aarvar> also, why is it GEnumerable f rather than GEnumerable a?
10:00:38 <dminuoso> ReinH, when you say exceptions, are you talking about IO exceptions?
10:01:05 <ReinH> dminuoso: Right. These things: https://hackage.haskell.org/package/base-4.10.1.0/docs/Control-Exception.html
10:01:25 <hyperisco> argent0, any reason we're not using toEnum/fromEnum?
10:01:35 <cycle337> how do you guys pronounch hackage and stackage ? is it like the english word or is it more like french ?
10:01:37 <argent0> hyperisco: Because i didn't know them
10:01:40 <argent0> :p
10:01:51 <hyperisco> argent0, well now you do
10:02:05 <ReinH> cycle337: The former, but I think I will start doing the latter instead.
10:02:15 <cycle337> hahaha
10:02:15 <aarvar> > toEnum 3 :: Bool
10:02:16 <cycle337> :)))
10:02:19 <lambdabot>  *Exception: Prelude.Enum.Bool.toEnum: bad argument
10:02:26 <lyxia> argent0: deEnum 1 = Blue  currently not Green
10:02:27 <aarvar> toEnum is broken
10:02:38 <sqooq> Welkin, also if no one got mad at the tools, there would be no progress. Imagine the first functional language creators if they were told to just stop because they're shitting on C or Fortran or whatever, and appreciate what's available. Maybe they had visions for a better world.
10:02:44 * EvanR refuses to let "spoon" fade into obscurity (package that can catch pure computations that crash)
10:02:55 <ReinH> sqooq: That's a ridiculous argument.
10:03:00 <hyperisco> Haskell is a partial language… get used to it
10:03:12 <ReinH> Calling things you don't like shit is not expressing "a vision for a better world".
10:03:15 <Welkin> sqooq: no one ever said anything about "appreciating what is available". We are offering you options and you refuse to consider any of them.
10:03:19 <dminuoso> ReinH, do you have any good resource recommendation on the subject?
10:03:19 <aarvar> hyperisco: no
10:03:23 <aarvar> hyperisco: I refuse
10:03:27 <hyperisco> then suffer!
10:03:30 <sqooq> Welkin, I never refused??
10:03:56 <sqooq> Literally when someone told me I could just use haskell I said something like "yeah, I guess do blocks can work"
10:03:59 <aarvar> hyperisco: let's remove exhaustiveness checks then
10:04:07 <aarvar> why would you ever want your functions to be total. How silly
10:04:09 <argent0> lyxia: yes I saw that. I'll try to use toEnum though. Thanks everyone
10:05:11 <sqooq> Welkin, you recommended euterpea but I'm well aware of it, and I think it was a great project, but it can't do realtime and has other issues (i've been using it for like a week now). My graph project can't be realized in it.
10:05:14 <ReinH> dminuoso: on exceptions? The parallel and concurrent programming book covers them pretty well so it can introduce async exceptions. https://www.fpcomplete.com/blog/2016/11/exceptions-best-practices-haskell is opinionated but also not wrong.
10:05:17 <Welkin> you should never be completely satisfied with your tools. Always push for making them better. But you have to work with what is available. the alternative is not to complain and then do nothing.
10:05:40 <SharpGAF> Exhaustiveness checks are already undecidable for GADTs, are they not?
10:05:48 <sqooq> Welkin, I never do nothing. I do as much as I can. I made my own mini-euterpea already because I didn't know euterpea existed.
10:05:54 <hyperisco> aarvar, the concept of toEnum/fromEnum is broken… can't just blame the implementation
10:06:14 <sqooq> and it was great but I couldnt' figure out how to do realtime, and no one has been able to do realtime haskell audio, except through connecting to another language like csound.
10:06:25 <SharpGAF> I guess GADTs aren't part of Haskell, though.
10:06:25 <EvanR> thats not true
10:06:28 <dminuoso> ReinH, great thank you.
10:06:29 <sqooq> I'm really upset recursive feedback isn't working for me in csound-expression. Csound-expression is actually pretty nice.
10:06:30 <hyperisco> aarvar, given the broken concept,  Int → Maybe a  is absolutely no help
10:06:40 <ReinH> SharpGAF: Yes. https://arxiv.org/pdf/1702.02281.pdf
10:06:41 <aarvar> hyperisco: how is the general concept broken?
10:06:52 <EvanR> you have sdl bindings, portaudio bindings
10:07:23 <aarvar> if we pretend that Int is Nat for a moment
10:07:27 <EvanR> haskell can handle it. of course to get more performance, more numbers crunched, youll need to get down and dirty
10:07:31 <hyperisco> aarvar, because the general concept says that Enum types should have a bijection with Int … which is a finite type
10:08:03 <[exa]> anyways, what's the overhead of IORef over working with "just pointers"?
10:08:04 <aarvar> yes, so it should be Nat (implemented as an Integer)
10:08:13 <hyperisco> why not Natural?
10:08:21 <ReinH> What general concept is this?
10:08:27 <hyperisco> that is certainly appropriate for infinite types
10:08:33 <aarvar> oh
10:08:42 <hyperisco> now you have to get rid of Bool and so forth
10:08:49 <aarvar> yeah, Enum is wrong if you want it to work with infinite types
10:09:17 <aarvar> er, no it isnt
10:09:19 <hyperisco> Enum is wrong unless your type has exactly 2^64 inhabitants :P
10:09:19 <aarvar> Im confusing myself now
10:09:26 <aarvar> right, so use Nat instead of Int
10:09:31 <aarvar> and have toEnum return a maybe
10:09:57 <EvanR> Enum as it stands is purely for convenience
10:10:02 <EvanR> like Num
10:10:08 <ReinH> If you don't like Enum you're gonna hate Num
10:10:18 <hyperisco> actually I think one of glguy or geekosaur has a smarter enum lib
10:10:20 <EvanR> Enumnum
10:10:30 <lyxia> Saying that accepting Haskell is partial implies we might as well remove warnings seems just as sound as saying that refusing partiality, we might as well remove recursion.
10:10:34 * hyperisco knows people by only a couple letters in their nick… sorry
10:10:40 <aarvar> ReadEnumNum
10:10:44 <ReinH> Um is straight up unusable.
10:10:54 <Welkin> hyperisco: in this case, one letter
10:11:15 <hyperisco> Welkin, the first letter counts for two! :P
10:11:26 <SharpGAF> Can Enum only be derived for constructors without arguments?
10:11:38 <ReinH> lyxia: I feel like the whole point of writing Haskell is to rage rage against the dying of the light^H^H^H^H^H totality
10:11:40 <aarvar> lyxia: not really. The point is you shouldn't intentionally write partial functions
10:11:43 <hyperisco> SharpGAF, arguments are fine
10:11:53 <ReinH> Like, "Haskell has bottoms so anything goes" is exactly the wrong philosophy.
10:11:59 <SharpGAF> Hm, then how can toEnum work?
10:12:16 <EvanR> you shouldnt use partial functions at an undefined location anyway, and maybe even thats not right
10:12:27 <hyperisco> SharpGAF, I dunno. Give a hypothetical and we'll look at it.
10:12:34 <aarvar> lyxia: also, maybe we should just get rid of recursion
10:12:51 <EvanR> for a DSL that can make total sense
10:12:52 <aarvar> just have a total version of fix
10:12:56 <dminuoso> aarvar, who needs recursion anyway when you can simply write a y combinator.
10:13:09 <aarvar> yeah, you have to get rid of isorecursive types too
10:13:13 <ReinH> aarvar: Join us in #agda, we have cake.
10:13:19 <aarvar> and only have strictly positive types..
10:13:19 <lyxia> aarvar: try Agda, Coq, Idris then
10:13:19 <ReinH> And corecursion.
10:13:22 <hyperisco> toEnum :: Enum a => Int -> Maybe a   is a valid idea but in practice it is going to be miserable, if we use it at all like the current toEnum
10:13:32 <aarvar> ReinH: and no typeclasses, and worse inference
10:13:35 <aarvar> :(
10:13:44 <EvanR> only use linear logic
10:13:51 <EvanR> problem solved
10:13:52 <ReinH> You don't need typeclasses when you have a real module system :p
10:14:04 <aarvar> yes I do
10:14:04 <SharpGAF> hyperisco: I mean, if you have data term = abs term | app term term | var nat or whatever, I assume Haskell doesn't try to come up with an encoding function into naturals or anything, right?
10:14:08 <ReinH> And inference is harder when the type system is more powerful, that's just a tradeoff.
10:14:23 <aarvar> go write ML you traitor
10:14:28 <ReinH> aarvar: you have implicits
10:14:36 <EvanR> i still want typeclasses for their original purpose, even with good modules
10:14:39 <aarvar> ReinH: inference is just as undecidable in GHC with various extensions
10:14:49 <ReinH> http://agda.readthedocs.io/en/v2.5.2/language/instance-arguments.html
10:14:50 <aarvar> but it still works when you're not using those features, and just assumes some subset
10:14:50 <EvanR> so i can use + at different types all at the sam etime
10:15:01 <aarvar> there's no reason why inference cant work the same way in a dependently typed language
10:15:05 <hyperisco> SharpGAF, *shrug* give it a try!
10:15:16 <SharpGAF> (And if it did try, I think this strategy must fail for large enough types, otherwise we could formalize all of type theory in Peano arithmetic).
10:15:18 <EvanR> type inference works in idris pretty well
10:15:22 <aarvar> hardly
10:15:35 <ReinH> Ok, I'm not getting involved in another argument with a complainer.
10:15:37 <EvanR> not hardly, it even does value inference
10:15:44 <aarvar> somewhere I have an example of idris's inference utterly failing. I wonder if it's gotten better
10:15:57 <EvanR> you need top level sigs obv
10:15:59 <aarvar> ReinH: Oh, sorry for saying things can be better
10:16:06 <aarvar> EvanR: that was less annoying
10:16:32 <aarvar> EvanR: it's more that it has weaker inference of implicit type arguments that annoys me
10:16:34 <EvanR> you also need them on where clause, sometimes, but ime never on let
10:16:38 <ReinH> You can say whatever you want. I'm just not going to participate.
10:17:08 <aarvar> EvanR: I tried writing some hask type stuff and inference wasnt so great
10:17:33 <EvanR> something that doesnt work well in idris is compose chains
10:17:37 <ReinH> Instead of figuring out types for you and then hiding them, Agda figures out programs for you and then shows them.
10:17:40 <aarvar> plus I had to define a Function type since -> isn't a type constructor
10:17:45 <ReinH> It's a tradeoff I am pretty happy to make
10:17:47 <EvanR> partialling a bunch of stuff and then composing is a nightmare
10:18:02 <aarvar> ReinH: why can't it do both?
10:18:03 <SharpGAF> hyperisco: I did try, and indeed you can't derive Enum for data types with non-nullary constructors.
10:18:18 <aarvar> oh sorry. I'm complaining again
10:18:22 <EvanR> i want a language which begins with no types and no programs, then gives both
10:18:27 <ReinH> aarvar: I'm not disagreeing with your point, just the way you're expressing it
10:18:31 <hyperisco> SharpGAF, lets say you wanted to implement Enum for 2-tuples. How would you do that?
10:18:51 <aarvar> ReinH: sorry, how about I tell you what I want to say, and then you say it for me so it sounds how you want it to?
10:19:02 <ReinH> aarvar: That doesn't sound fun for me.
10:19:04 <SharpGAF> hyperisco: I don't want to do that, I was asking whether Haskell allowed it for types with non-nullary constructors since I was curious.
10:19:47 <hyperisco> SharpGAF, are you asking if automatic deriving works for non-nullary constructors? Well I guess not. However, automation isn't all that smart.
10:20:09 <SharpGAF> Well, sure, you could manually implement it, but it wouldn't be injective, at least.
10:20:17 <aarvar> ReinH: Also, does Agda have forall?
10:20:27 <SharpGAF> But what I meant was that if it isn't trying to work for non-nullary constructors, it might actually be fine to use Int since constructor definitions probably take more than one word of memory to represent (so the odds are good that GHC can only compile programs where Int makes sense).
10:20:33 <aarvar> I know idris doesn't
10:20:36 <EvanR> it has ∀
10:20:44 <aarvar> but that's really Pi
10:20:45 <EvanR> and idris has pi types
10:20:49 <EvanR> ∀ isnt pi
10:20:55 <aarvar> it's implicit pi right?
10:20:59 <EvanR> or maybe thats only dependent haskell
10:21:00 <ReinH> aarvar: Are you asking about rank n quantification or about the presence of universal quantification in general?
10:21:00 <aarvar> pi where the argument is implicit
10:21:02 <aarvar> in agda that is
10:21:12 <aarvar> im talking about dependent function types where the argument is irrelevant
10:21:17 <ReinH> You can define Pi in Agda however you want.
10:22:02 <aarvar> irrelevant meaning not used computationally
10:22:25 <aarvar> or, having multiplicity 0
10:22:54 <aarvar> sorry, I like complaining :)
10:23:02 <davean> aarvar: We've noticed
10:23:11 <aarvar> ouch
10:23:18 <EvanR> everything sucks, the rightest thing on c2 wiki
10:23:26 <ReinH> aarvar: http://wiki.portal.chalmers.se/agda/pmwiki.php?n=ReferenceManual.Irrelevance
10:23:34 <aarvar> yeah, don't get me wrong, haskell sucks too
10:24:23 <aarvar> ReinH: I think I looked at that before and it wasnt quite what I wanted, but I'll have to look again. It's been a while
10:25:14 <ReinH> I mean, I think proof irrelevance is a mistake, but you do you.
10:25:25 <cycle337> oh aarvar you're so high maintenance
10:25:45 <davean> cycle337: I mean, /ignore isn't *that* expensive :)
10:26:11 <EvanR> ghosted
10:26:16 <cycle337> davean I just got here I'm not abusing /ignore on my first day :)
10:27:21 <dminuoso> Are there ways to enforce (that is statically verify) totality in Haskell in some cases?
10:27:27 <aarvar> ReinH: so if you want to use a proof that n + m = m + n, you should need to actually compute n and m?
10:28:01 <a9rkzz> Alright friends. I'm sitting in my programming paradigms class and we're about to start in on the mysterious language of Haskell
10:28:02 <aarvar> dminuoso: there's liquid haskell
10:28:08 <a9rkzz> This should be fun
10:28:30 <EvanR> dminuoso: you could write the whole program in the type system, and dont enable any extensions that allow looping
10:28:44 <cycle337> a9rkzz: have fun ! pass the popcorn
10:29:14 <EvanR> yes people do these things
10:29:22 <dminuoso> EvanR, o.o
10:29:25 <a9rkzz> I don't suppose any of you have ever heard of Haskell? I'm apparently one of the only people that has
10:29:36 <aarvar> EvanR: but Void is sort of inhabited at the type level
10:29:40 <EvanR> me too
10:29:45 <aarvar> type family ANY :: k where
10:29:52 <EvanR> what
10:29:55 <aarvar> ANY :: Void -- totally fine
10:30:12 <cocreature> a9rkzz: yeah nobody sitting in the channel named after that programming language has heard of it :)
10:30:16 <kadoban> a9rkzz: <.< >.> I think there might be a few more
10:30:17 <ReinH> aarvar: Yes.
10:30:27 <EvanR> does that violate totality somehow
10:30:33 <[exa]> a9rkzz: ask lecturer about monomorphism restriction
10:30:38 <cycle337> msg chanserv help
10:30:42 <cycle337> oops :)
10:31:14 * cycle337 facepalm :)
10:31:14 <aarvar> EvanR: depends on your definition I guess
10:31:26 <EvanR> uhm
10:31:46 <aarvar> Foo True = False; Foo False = Absurd (ANY :: Void)
10:31:51 <aarvar> is Foo total?
10:32:23 <aarvar> or just Foo True = False; Foo False = ANY
10:32:34 <aarvar> it's total I guess, but Bool is inhabited by more than just True and False
10:32:43 <a9rkzz> Oh man. The idea of a type system is very difficult to grasp
10:32:52 <a9rkzz> (For javascript folks i guess?)
10:33:14 <EvanR> aarvar: seems like were talking about different things
10:33:16 <aarvar> EvanR: the problem I think is that type families should constraint their arguments like type classes do
10:33:29 <EvanR> they can
10:33:32 <ReinH> a9rkzz: javascript barely even has a value system.
10:33:35 <EvanR> if you put a kind signature
10:34:05 <aarvar> EvanR: I mean like...ANY should be ANY :: HasAny k => k
10:34:20 <EvanR> back to the totality question
10:34:44 <aarvar> and then ANY :: Void should be an error since there's no instance of ANY @Void
10:35:05 <aarvar> type families should just be type level typeclasses, basically
10:35:15 <EvanR> did you define Void
10:35:21 <aarvar> data Void
10:35:35 <aarvar> {-# LANGUAGE PolyKinds #-}
10:35:39 <aarvar> er, DataKinds
10:35:51 <EvanR> be more specific to get an empty kind
10:36:02 <aarvar> hm?
10:36:06 <EvanR> with GADT syntax
10:36:38 <aarvar> data Void :: Type where ?
10:36:57 <EvanR> data Void :: * where
10:37:09 <aarvar> na, I prefer Type
10:37:10 <EvanR> hmm
10:37:23 <aarvar> anyway, Void is already in base, so no need to define it
10:37:24 <EvanR> well when you enable TypeInType you enabled girards paradox right
10:37:34 <EvanR> i said dont do that
10:37:43 <aarvar> fine, *
10:37:59 <aarvar> you dont need TypeInType
10:38:20 <EvanR> and what is Absurd
10:38:40 <aarvar> type family Absurd (x :: Void) :: k
10:38:49 <aarvar> really I didn't need to bother with Void and Absurd
10:38:52 <aarvar> can skip straight to ANY
10:39:12 <EvanR> question was, can you write a program that is statically verified to be total
10:39:24 <EvanR> not if you can write a partial function
10:39:42 <aarvar> if you can write a partial function then it isnt statically verified to be total is it?
10:39:49 <EvanR> ok nevermind
10:39:49 <dminuoso> <ReinH> a9rkzz: javascript barely even has a value system. <- this is priceless =)
10:40:24 <kadoban> That is quite hilariously cruel
10:40:34 <EvanR> javascript is morally bankrupt?
10:40:40 <aarvar> you're being too generous
10:41:46 <ReinH> aarvar: you see, complaining is ok if you're also funny. :p
10:43:03 <dibblego> can we not, please?
10:43:15 <aarvar> dibblego: dont
10:45:19 <dminuoso> ReinH, honestly from my experience with discussing about having a expressive (or one at all!) type system is amazingly described by this venn diagram: https://ro-che.info/ccc/17
10:45:36 <dminuoso> ReinH, it seems that thing has more truth in it than it seems.
10:45:55 <dminuoso> I rarely find ruby or JS folks in support of having any type system whatsoever..
10:46:55 <SharpGAF> If dependent types could stand a bit of impurity they would actually be good fits for Ruby and JS (or at least, much better than non-dependent type systems are).  Unfortunately for the most part dependent type systems struggle mightily with effects…
10:47:33 <a9rkzz> let x = 1
10:47:33 <a9rkzz> x = x+1
10:47:38 <a9rkzz> so uh
10:47:47 <a9rkzz> that was just put up on the board
10:47:56 <EvanR> well there are type systems for ruby and js that dont suck and arent dependent types
10:48:12 <cycle337> hey guys, is it true that 1995 was a year of amazing progress in functional languages ? something to do with managing effects ?
10:48:34 <cycle337> I'd sure wish to see a timeline with all important milestone
10:49:08 <SharpGAF> EvanR: The ones I'm aware of either aren't sound *and* have a lot of ad hoc features to handle specific cases that dependent types could take care of without issue, or are sound and cover only a small subset of the language in question.
10:49:32 <Duikb00t_> hi
10:50:21 <Duikb00t_> I am totally new with Haskell. ;-) Looking for some good resources how to setup a project on OSX
10:53:15 <EvanR> SharpGAF: no not thinking of those
10:54:19 <SharpGAF> EvanR: Can you elaborate?
10:58:18 <EvanR> https://github.com/sinelaw/infernu here row types are used to deliver sanity to the usual way js objects are used, as records
11:00:34 <sm> Duikb00t_: "stack templates"
11:00:52 <Duikb00t_> Looking up that
11:00:55 <sm> "stack new TEMPLATE"
11:01:12 <SharpGAF> EvanR: Row types go a long way, and it might be a pleasant enough system to use if you are only dealing with your own code, but the system they describe fits into the "sound but only covers a small subset of the language in question" category.
11:01:13 <Duikb00t_> oh nice found a repo, great1
11:09:44 <EvanR> SharpGAF: haskells type system also doesnt cover weirdo crazy things you can do in haskell, such as encode 3/4 of php as operations on String
11:09:54 <EvanR> (ways that people use js)
11:11:40 <EvanR> my goal with any of those things is to make doing something easy and safe in that language, rather than "explain what you see in the wild"
11:11:55 <EvanR> because you will fail
11:13:41 <SharpGAF> On the one hand, I agree.  On the other hand, people using languages like Ruby and JS generally do exploit those features, and if you try to use a type system that can't cover at least the commonly done stuff you will end up not being able to interoperate with most other programs and libraries written in the language, which is an important consideration for many programmers.
11:13:45 <Welkin> has anyone found a way to use blockquotes with lhs -> html?
11:14:16 <EvanR> now we are getting into unsolvable by definition territory
11:14:27 <naiveai> hello everyone! so I've been wanting to learn haskell for a while now, but what's always held me back is the fact that there seems to be so little ecosystem around it. it seems to be very opaque and theoretical, which I'm sure is not a new complaint. but I'm wondering whether there are some large codebases I can approach in order to try to understand how haskell works, so it doesn't seem so theoretical.
11:14:59 <Welkin> naiveai: those are common misconceptions.
11:15:15 <Welkin> The ecosystem for web development in haskell is very large. It's 95% of what I do with haskell.
11:15:37 <Welkin> naiveai: look at servant, scottyy, yesod, miso, reflex for some examples
11:15:52 <naiveai> Welkin: will check those out. thanks!
11:16:04 <Welkin> it's not as theoretical as it's made out to be
11:16:20 <SharpGAF> EvanR: I don't think it's unsolvable by definition.  For JS in particular, TypeScript and Flow have been remarkably successful in industry, largely by adding ad hoc type formers to deal with the common patterns.  If someone were able to come up with a variant of dependent JS that really worked (didn't have to tiptoe around effects), it would be possible to provide types for all of these patterns and many more without having to exte
11:16:26 <SharpGAF> I do think it's really hard, though.
11:16:58 <EvanR> youre ... calling typescript and flow good, after complaining about unsoundness, and dismissing my examples of soundness
11:17:05 <Welkin> lol
11:17:12 <Welkin> flow is just... terrible
11:17:14 <SharpGAF> I didn't say they were good.  I said they were successful in industry.
11:17:34 <Welkin> I tried it and decided to continue using js with no types at all
11:17:41 * EvanR remains in the corner with sound stuff
11:17:49 <winnner> hello I am writing a baby web app and I am suffering with databases/sql I am not understanding what to do....If one into webdevelopment one must learn db/sql ??
11:17:56 <Welkin> facebook even gave up on flow
11:18:00 <Welkin> they are now pushing reasonml
11:18:26 <EvanR> yeh, you will have to learn databases
11:18:26 <kadoban> winnner: It's pretty close to a requirement to be able to use *some* kind of database eventually in webdev, and SQL is the biggest name there still.
11:18:27 <Welkin> winnner: yes, it is essential to understand basic SQL and HTTP
11:18:40 <Welkin> that is the core of web dev
11:19:00 <EvanR> well i can imagine people only knowing mongo
11:19:13 <winnner> i dont like mongo
11:19:27 <EvanR> good
11:19:28 <Welkin> mangoes
11:19:34 <kadoban> You can probably do a few projects without SQL or a database at all, but only ones that don't require much of a server-side at all. Or maybe you could do something with files *sometimes*, but it'd be sketchy most of the time.
11:19:41 <winnner> But i feel its more effort to learn any db like ostgresql now
11:20:10 <cocreature> you don’t need to become a postgres export but learning the basics is going to be helpful
11:20:15 <shapr> sqlite?
11:20:16 <kadoban> winnner: You can use sqlite3 quite often, if the part that's annoying you is the server setup.
11:20:21 <EvanR> you need effort no matter what
11:20:25 <kadoban> But that's not really the hard part, IMO.
11:20:25 <SharpGAF> I like sound type systems rather a lot.  I also think that if you're going to restrict your subset of JS to make it sound, rather than create a sound type system that can handle all of JS as it's actually written, you should probably just compile from another language, because you're not going to be able to take advantage of the existing ecosystem anyway.
11:20:44 <EvanR> what is "all of js"
11:21:01 <shapr> winnner: I have a simple webapp here that uses sqlite: https://github.com/shapr/sporkle
11:21:36 <winnner> thanks every one
11:21:39 <EvanR> i also agree, just compile into javascript and forget type systems
11:21:41 <SharpGAF> "All of JS as it's actually written."  Meaning it has to be able to handle the sorts of dependency on values that exists in practice, such as the output type varying based on an input parameter (usually in not very hard to understand ways).
11:21:43 <winnner> shapr:  I am cheecking
11:22:23 <EvanR> SharpGAF: so should the type system that covers all of js ensure that you didnt implement weird sub languages incorrectly, which are implemented as string manipulations
11:22:29 <shapr> winnner: it's still worth it to learn enough db basics to build tables and write sql queries.
11:22:42 <EvanR> which it could
11:22:45 <SharpGAF> EvanR: Dependent types should be perfectly capable of handling any reasonable such sub-language.
11:23:30 <EvanR> i dont see how putting dependent types on it allowwws you to interoperate better with oddball crap "ecosystem" js that you find  available
11:23:31 <winnner> shapr:  Ok I understand, SQL is must I feel
11:24:06 <EvanR> certainly you can do more work to prove your personal code is correct, would be cool
11:24:11 <SharpGAF> The point isn't to provide types for every feature, but provide a type system that *can* type every feature.  Otherwise you cannot have soundness, no matter how you feel about it, and library maintainers have no incentive to add type annotations (because they'd break other consumers).
11:24:14 <EvanR> but were back to where i was
11:24:53 <EvanR> well, if you mean to say that having dependent types available in every language would be nice.. i agree, but also its kind of a cop out because its not specifically targetted at any particular thing
11:25:05 <EvanR> where as infernu and many other type systems people design are
11:25:22 <SharpGAF> It's not a cop out.  Soundly adding dependent types to a language like JS is nontrivial, or someone would have done it already.
11:25:31 <shapr> winnner: every job I've had since 1996 has had SQL databases involved.
11:26:01 <Welkin> shapr: BCE?
11:26:04 <EvanR> its easy to say, hard to do, and its not going to give as much bang for you buck relative to more targetted type systems for a particular purpose
11:26:11 <shapr> Welkin: huh?
11:26:18 <__monty__> SharpGAF: Afaik you can't have sound dependent types on a language that has infinite loops.
11:26:36 <Welkin> since the time of the pharoahs of egypt
11:26:37 <EvanR> theres that to
11:26:47 <winnner> ok shapr
11:27:10 <cycle337> @shapr surely not SQL by Oracle you mean, but a sql-like no?
11:27:10 <lambdabot> go slap surely not SQL by Oracle you mean, but a sql-like no? yourself
11:27:11 <SharpGAF> __monty__: To be honest, I'm excluding nontermination from this discussion since it's somewhat uninteresting (most real languages already lack termination proofs for their type checkers, even Coq)
11:27:20 <shapr> Welkin: ohh. Turns out I am only three years older than SQL
11:27:21 <SharpGAF> I'm referring to "bad" unsoundness (proof of False)
11:27:24 <winnner> So If I learn postgresql that would be enough or I should learn sql language (queries) in general ?
11:27:34 <Welkin> SQL is from the 70's I think
11:27:38 <winnner> sqlite3 is very lite I herd
11:27:45 <SharpGAF> (Terminating proof of False, at that)
11:27:58 <shapr> cycle337: right, I mean some sort of database that was mostly used via SQL
11:28:08 <EvanR> now the goals seem a bit arbitrary
11:28:32 <SharpGAF> It's not arbitrary.  That's the sort of unsoundness most type systems try to avoid.
11:28:47 <EvanR> make js easier and safer, or support a subset of theoretical niceness properties
11:28:50 <cycle337> good, because I plan avoiding SQL entirely and stick to mysql, postgres and open source alternatives like mariadb :))
11:28:58 <SharpGAF> Let me be even more concrete.  It would be nice to have a version of dependent pattern matching that actually worked in a language with state
11:29:10 <shapr> winnner: either one is fine, postgresql is a 'real' database, and sqlite3 is designed to run in-process, and yeah, it is *very* lite
11:29:13 <Welkin> cycle337: when we say "sql" we mean any sql-derived language: mysql, postgresql, etc
11:29:23 <Welkin> for me, sql usually means postgres
11:29:29 <EvanR> yeah it would be nice to have a type system tailored for js
11:29:29 <cycle337> ah good !
11:29:31 <cocreature> sql even has a standard
11:29:34 <cycle337> :whew:
11:30:00 <cocreature> nobody apart from postgres comes even close to implementing the standard but it’s there :)
11:30:08 <SharpGAF> There are foundational issues to work through before you can actually make a system that is usable for JS, but I don't think most of them are JS-specific.
11:31:03 <winnner> Ok Thanks Then I must learn/fight with postgresql now :(
11:31:16 <EvanR> well, would be nice to have a type system for blub
11:31:19 <EvanR> in which case, lets just use blub instead
11:31:22 <shapr> winnner: if you want a quick start, sqlite3 is fine
11:31:31 <shapr> and there's not much to fight with in sqlite3
11:31:38 <cocreature> winnner: don’t worry, picking up the amount of sql you need to get started with webdev is fairly easy
11:31:43 <merijn> shapr: Speak for yourself >.<
11:31:55 <winnner> shapr:  nope anyway I will need to switch to postgresql later so
11:31:57 <merijn> shapr: I just spend the last half hour in -offtopic ranting about fighting sqlite3 >.>
11:31:58 <shapr> merijn: ok, there's the lack of things in sqlite3
11:32:03 <winnner> cocreature:  Ok
11:32:13 <Welkin> you can learn the basics of sql/postgres in an afternoon
11:32:30 <Welkin> postgres has a huge number of features that you will probably never use
11:32:31 <shapr> winnner: if you plan on writing code for a living, learning postgresql is worth it.
11:33:00 <cycle337> cocreature is this what you mean ? "The latest SQL standard was adopted in July 2003 and is often called SQL:2003. One part of the SQL standard, Part 14, SQL/XML (ISO/IEC 9075-14) was revised in 2006 and is often referenced as "SQL/XML:2006". The formal names of this standard, with the exception of SQL/XML,..."
11:33:12 <winnner> shapr:  Sure I need job so postgresql for me may be
11:33:21 <dminuoso> You dont even have to be an expert, but not knowing PostgreSQL has a good chance of drastically decreasing the chance of getting a job.. :-)
11:33:41 <metahumor> getting a job might even happen if you learn MySQL
11:33:57 <metahumor> because many still use that, and think of mysql as _the_ sql db to use
11:34:00 <SharpGAF> Sure, but if you get a job using PostgreSQL you may enjoy it more...
11:34:03 <EvanR> get a job first, then learn all this stuff
11:34:09 <EvanR> much more efficient
11:34:09 <winnner> and I can be able to switch to mysql with postgresql knowledge right if needed?
11:34:17 <winnner> Or there will be huge difference?
11:34:22 <SharpGAF> Not huge differences.
11:34:23 <metahumor> rather, you'd hope to switch to postgres from mysql
11:34:26 <Welkin> who needs sql when you have mongodb!?!?!
11:34:32 <EvanR> we just went over that
11:34:38 <cocreature> cycle337: seems a bit outdated (afaik the last revision was in 2016) but yeah that’s what I was referring to
11:35:02 <dmwit> winnner: Tautology 0 seems relevant: https://www.vex.net/~trebla/humour/tautologies.html
11:35:23 <cycle337> oh ok
11:35:24 <dmwit> "'X is like Y' can always be argued to be true. Furthermore, when X≠Y, 'X is unlike Y' can also be argued to be true."
11:35:59 <cycle337> EvanR I don't think clients would appreciate if you learn a new technology on their expense, but they don't need to know >:)
11:35:59 <metahumor> do people even use LAMP or WAMP stacks any more?
11:36:19 <EvanR> are we sure that if X = Y, we cant argue that X is unlike Y
11:36:28 <EvanR> cycle337: this seriously is how it works...
11:36:40 <dmwit> EvanR: That is not a claim made by this tautology.
11:37:04 <EvanR> it seems to be side stepping that case
11:37:13 <EvanR> going out of its way
11:37:16 <cycle337> EvanR yeah, it's true on some cases, I also had to "fake it till I make it" :)
11:37:21 <dmwit> monochrom has a complicated relationship with equality.
11:37:53 <EvanR> cycle337: its kind of a waste to try and become an expert at some tool in isolation, without having anything in paritcular to do with it, thats real
11:38:58 <winnner> dmwit:  I didnt understand that wisdom thing I am not wise :(
11:43:26 <EvanR> wise tautologies is a funny oxymoron
11:45:00 <merijn> monochrom: Curse you and the applicability of constraint number 2 to the tragedy that is my life
11:48:15 <dmwit> winnner: You ask, "Can I apply my mysql knowledge to postgresql?". I answer: "There are ways in which they are similar, and ways in which they are different.". No further answer is really possible, except to begin enumerating the similarities and differences, and both lists are very long.
11:49:18 <cycle337> dmwit: that answer is so final. I feel we're at a crossroads.
11:50:33 <fiatjaf> I'm trying to compile a ghcjs app with stack, but everything is wrong.
11:50:46 <fiatjaf> I'm getting "Setting up GHCJS build environmentNo information found for ghc-8.0.1.                          Supported versions for OS key 'linux64-nopie': GhcVersion 8.0.2, GhcVersion 8.2.1, GhcVersion 8.2.2
11:50:46 <fiatjaf> "
11:50:56 <fiatjaf> on `stack build`
11:51:21 <fiatjaf> but apparently there are no ghcjs versions with the supported ghc versions for my linux, which is apparently "nopie".
11:51:25 <fiatjaf> what does all that mean?
11:51:47 <fiatjaf> I see a list of ghcjs versions here: https://docs.haskellstack.org/en/stable/ghcjs/
11:53:10 <geekosaur> "nopie" means it doesn;t use position independent executables
11:53:40 <geekosaur> (recent debian and derivatives do use them. it requires a specially built ghc and a supporting OS-supplied toolchain)
11:54:28 <fiatjaf> I don't understand a word of what you said.
11:54:34 <fiatjaf> do I have to understand that?
11:54:53 <fiatjaf> :P
11:54:54 <fiatjaf> I can run normal GHC stuff here.
11:54:56 <merijn> fiatjaf: Depends on how much effort you're willing to invest to get it working
11:55:51 <fiatjaf> ok, but apparently ghc version 8.2.2 is supported here, right?
11:56:10 <Welkin> no pie for you
11:56:25 <fiatjaf> what I understand from that is: there is a precompiled GHC 8.2.2 on the stack repositories that will run on my computer.
11:57:17 <fiatjaf> but I'm running `stack build` with lts-10.3, which apparently uses ghc 8.2.2, and these errors still appear.
11:58:00 <fiatjaf> they do not appear when I'm trying to compile normally, using the default ghc, only when I try to define a ghcjs as a compiler (and thus stack tries to compile ghcjs first -- that's when it fails).)
11:58:28 <geekosaur> ghcjs is a different thing, yes. and probably not available for 8.2.2
12:00:07 <cycle337> is there any advantage to switch from vim to emacs ?
12:00:20 <fiatjaf> geekosaur, what can I do?
12:00:28 <cycle337> haskell wise, I mean ...
12:00:32 <hexfive> cycle337: yeah you get free carpal tunnel
12:00:55 <cycle337> hexfive: :))
12:01:15 <metahumor> cycle337: emacs has intero / dante which some like to use as a haskell-ide-like
12:01:23 <sm> cycle337: org mode
12:01:31 <sm> and magit
12:02:03 <metahumor> cycle337: vim has other ghc and haskell helper plugins, which aren't as "powerful" as intero, but get the job done for me, at least
12:02:50 <pk6vx0x2> there's also the haskell-ide-engine/LSP combination
12:03:21 <cycle337> good points, so emacs leads 3 to 1 so far ... I guess carpal tunnel is worth it ?
12:03:46 <hexfive> emacs pinky is no joke
12:04:09 <hexfive> see wiki for reccommended solutions:
12:04:15 <hexfive> - Driving Emacs through voice input
12:04:23 <hexfive> - Writing sufficient Elisp to do one's daily tasks without interacting with Emacs.
12:04:24 <hexfive> etc
12:04:39 <cycle337> hexfive: remap pinkyt to middle finger ? :))
12:14:42 <sm> I have used emacs daily for many years, no carpal tunnel here
12:14:47 <johnw> same
12:15:01 <sm> just put your control and meta keys somewhere comfortable
12:15:22 <winnner> Thnks dmwit
12:17:29 <aarvar> cycle337: spacemacs
12:18:22 <kadoban> cycle337: Definitely not necessary to switch just for haskell
12:19:34 <cycle337> ah sweet relief, I guess deep inside I didn't want to make the switch after all :)
12:19:37 <hexfive> speaking of editors, is there a good haskell plugin for vim? ie with open definition, open docs, and completion support?
12:19:59 <hexfive> i've been going bareback :|
12:20:01 <Welkin> hexfive: emacs with evil mode
12:20:16 <cycle337> aarvar: I heard about spacemacs, is that like the neovim of emacs ?
12:20:31 <aarvar> cycle337: no
12:20:31 <hexfive> its like the 'every plugin you can conceive of' for emacs
12:20:43 <kadoban> hexfive: There's intero for neovim I've heard
12:20:56 <Welkin> I use plain old emacs
12:21:04 <cycle337> oh ok !
12:21:05 <aarvar> its emacs + evil (vim emulation) + a ton of packages + a layers system for sharing configurations
12:21:10 <hexfive> kadoban: really? cool, im gonna check that out
12:22:14 <cycle337> I guess I will always associate emacs with Stallman, and you don't want me to tell you what I associate Stallman with:))
12:22:21 <kadoban> hexfive: https://github.com/myfreeweb/intero.nvim I haven't evaluated it yet though myself. Plan to ... some day. I've gotten along without much editor stuff for quite a while, so it's not super high priority for me
12:22:23 <aarvar> cycle337: and space as the leader key, hence spacemacs
12:23:11 <dminuoso> Is there a particular reason Functor is named Functor and not Endofunctor (or Endo)?
12:23:20 <aarvar> or EndoHaskFunctor
12:23:24 <dminuoso> Or that.
12:23:27 <cycle337> there's this haskell vim.rc if anyone is interested, https://github.com/yogsototh/vimrc
12:23:36 <johnw> dminuoso: because it's understand that that's the only kind of Functor it could have been back then
12:23:56 <johnw> calling it Endofunctor would have supposed other kinds of functors
12:23:58 <aarvar> same reason it's not generalized to other categories I guess
12:24:37 <johnw> nowadays we can have functors between subcategories of Hask that are not endofunctors, but I don't think you could have had back then
12:24:40 <dminuoso> johnw, would it? I mean to call it Functor is obviously CT inspired, but it would have been obvious that it's not a general Functor.
12:24:46 <aarvar> class (Category p, Category q) => Functor p q f where fmap :: p a b -> q (f a) (f b)
12:24:59 <aarvar> though that's still not general enough
12:25:57 <geekosaur> pretty sure it requires a modern kind system, yeh. remember that Functor is specified by the Report, and the Report doens't really support kinds at all
12:28:07 <jle`> arne: i like to think about it as an arbitrary subset of CT functors that are very useful as a typeclass in Haskell, so they get the title of the distingushed capital-F Functor
12:28:07 <cycle337> hahaha, just discovered this https://james-iry.blogspot.ro/2009/05/brief-incomplete-and-mostly-wrong.html
12:28:20 <kekolodeon> Hi guys, I hope you're doing well! I'm a CS undergrad with a low level background the last year or so such as Reverse Engineering and Binary exploitation. I feel like taking a break from all this low level-ness and study programming lang/compiler theory/interpretation of processes etc since it has always fascinated me but thought I should get a decent fundamental knowledge on Comp Arch/Memory Organization
12:28:22 <kekolodeon> before getting into functional programming. I've read that haskel is the way to go for starters. I'm decent at C/ASM atm and I was wondering if you have any resources recommendation to get my hands dirty?
12:28:36 <fiatjaf> how do I install ghc with stack?
12:28:40 <fiatjaf> I mean globally
12:28:57 <jle`> fiatjaf: add the folder that stack installs the ghc to to your $PATH
12:28:58 <cycle337> thanks johnw for mentioning endofunctors which led me to my discovery :))
12:29:03 <us_r-1> hi - If I wanted to convert JWT kesy located here (https://www.googleapis.com/oauth2/v3/certs) into the PublicKey data types defined here (https://hackage.haskell.org/package/cryptonite-0.24/docs/Crypto-PubKey-RSA-Types.html#t:PublicKey), what do I have to do? The constructor requires integers, wheras the "n" and "e" are clearly text. I have attempted to decode base64url, but end up with text that looks
12:29:09 <us_r-1> like this: (...\170\151\190\148\248\187\GSS\252\253$j\161...). Please could I have a pointer? New to all of this
12:29:20 <jle`> kekolodeon: i hear a lot of good things about haskellbook. and there's also
12:29:24 <jle`> @where learnhaskell
12:29:24 <lambdabot> https://github.com/bitemyapp/learnhaskell
12:29:25 <fiatjaf> jle`: where is that?
12:29:42 <dminuoso> geekosaur, so following from that "Functor" would have just been a convenience thing to avoid some overly verbose "Endofunctor" because Functor was not conceivable at the time?
12:29:43 <metahumor> @where PHFFP
12:29:44 <lambdabot> I know nothing about phffp.
12:29:50 <metahumor> @where HPFFP
12:29:50 <jle`> fiatjaf: look at the output of `stack path`
12:29:50 <lambdabot> "Haskell Programming: from first principles - Pure functional programming without fear or frustration" by Chistopher Allen (bitemyapp),Julie Moronuki at <http://haskellbook.com/>,#haskell-beginners
12:30:22 <cycle337> @jle` I as well, a colleague of mine got it and said it's worth every penny, as I was mentioning to Welkin
12:30:22 <lambdabot>  Parse failed: Parse error: colleague
12:30:22 <jle`> fiatjaf: or i guess more directly, stack path --compiler-bin
12:30:26 <geekosaur> dminuoso, more as others have said: other kinds of functors simply were not possible in standard Haskell
12:30:51 <fiatjaf> thank you, jle`
12:31:10 <jle`> no problem
12:31:22 <jle`> ghc is mostly self-contained so "installing" ghc is basically adding the binaries to your path, heh
12:31:37 <geekosaur> and a kind system that can support them is less than a decade old, whereas Functor comes from a pre-H98 Haskell (don't know how far back off the top of my head)
12:31:38 <jle`> it's nice because it's easy to switch 'installed' ghc versions by just changing the ghc binaries folder in your path
12:31:40 <dminuoso> geekosaur, I'm curious. Would something like this have been discussed on some mailing list? Trying to wonder where I could dig to find history evidence of this.
12:32:01 <geekosaur> I have no idea
12:32:06 <jle`> dminuoso: i don't even think that a general Functor typeclass is even that useful today
12:32:15 <jle`> even though we have the technology to get close to it
12:32:37 <dminuoso> jle`, yeah but still. The accuracy of wording in Haskell would have led me to assume that at the very least it would have been called "Endofunctor"
12:32:45 <kekolodeon> jle`: thank you! is there only an online version for the haskellbook?
12:32:51 <dminuoso> jle`, if you catch my drift.
12:32:53 <jle`> kekolodeon: yes
12:33:18 <dminuoso> jle`, not to imply others were possible, but "Functor" kind of implies that it admits different categories.
12:33:25 <dminuoso> Which Functor definitely does not.
12:34:17 <kekolodeon> jle`: you'd recommend it for a background like mine? I don't have strong math fundamentals atm
12:34:22 <fiatjaf> jle`: I'm very confused because stack complained about uncompatible versions when I first tried to install ghc, then when I installed the version it suggested it vanished and I can only see (and it works) the supposedly incompatible version here.
12:34:27 <fiatjaf> anyway, forget it
12:34:33 <jle`> dminuoso: `id` implies that it admits unboxed types, but it doesn't. haskell makes tradeoffs
12:35:21 <jle`> kekolodeon: yes, it's not written to require any strong math fundamentals, and haskell itself doesn't really require any math either, any more than other languages
12:35:48 <jle`> kekolodeon: if you see haskell people talking about math it's usually more of a shared hobby thing than a built in part of the language
12:37:01 <kekolodeon> jle`: much appreciated!
12:38:20 <kekolodeon> jle`: and do I get a copy of it via email as soon as possible or do I wait?
12:39:17 <jle`> not quite sure, myself, sorry :o
12:41:10 <dminuoso> kekolodeon, the Haskell Book has a pretty large sample you can start off with to get an idea of whether you like the style. So even if you have to wait a bit, you can start with that sample (which starts from the beginning)
12:42:57 <kekolodeon> dminuoso: ah those free 4 chapters right, thanks!
12:43:49 <fiatjaf> can I install ghcjs with stack?
12:44:21 <fiatjaf> installing it with cabal is impossible, I get many many dependency conflicts.
12:44:25 <fiatjaf> (or is it possible?)
12:44:31 <dminuoso> fiatjaf, https://docs.haskellstack.org/en/stable/ghcjs/ suggests that you can
12:46:35 <fiatjaf> dminuoso: but that raises errors I cannot understand
12:47:10 <fiatjaf> dminuoso, because of that, I was trying to compile and install it globally, but frankly I don't know what I'm doing.
12:52:19 <fiatjaf> merijn: ok, how do I solve the "nopie" thing?
12:52:25 <fiatjaf> do I need a new OS? which one?
12:52:43 <fiatjaf> I'm on Ubuntu 17.04
12:54:31 <geekosaur> nopie is not an error
12:54:43 <geekosaur> unless you are also getting errors about invalid relocations
12:55:34 <ian5v> hi all, first timer here. is there a way to pattern match on negative/positive integers?
12:56:26 <geekosaur> "yes" but it's less than ideal. and do remember that negative numbers should be parenthesized to avoid it being confused with subtraction
12:56:35 <ian5v> i feel like there's a more idiomatic way to write this bit (ie, multiline function declaration instead of guards): https://hastebin.com/ozogudamud.vbs
12:57:22 <kadoban> ian5v: You can do the == 0 case with pattern matching, the other two should be guards. (usually one with | otherwise = ... )
12:59:11 <geekosaur> remember that pattern matching uses constructors. numeric literals act like constructors, so exact matches can be done. comparisons can not be done as pattern matches
13:00:47 <ian5v> geekosaur: kadoban: cool! thank you for the help c:
13:03:13 <amalloy> what is the deal with http://lpaste.net/361907 ? stack new seems to be creating stack projects that can't run stack init, and therefore can't run stack build
13:03:47 <kadoban> amalloy: Upgrade stack
13:03:59 <kadoban> 'stack upgrade' is usually enough
13:07:44 <amalloy> kadoban: thanks, looks like that did it (once i fixed my PATH to point at the local version stack upgrade gives me, rather than the one in /usr/local/bin i had been using)
13:08:09 <kadoban> Nice
13:08:52 <amalloy> now my question is, why did i have to upgrade stack?
13:08:58 <sm> ** push
13:09:15 <sm> I mean: a recent cassava release broke stack by using bleeding edge Cabal syntax, latest stack has a fix
13:09:32 <hvr> sm: for... stack was broken already before
13:09:42 <hvr> cassava just exposed one of many bugs in that areas
13:09:47 <sm> ok.
13:10:10 <hvr> don't blame cassava for that please
13:10:42 <hvr> you don't blame a package for triggering GHC panics either
13:11:20 <sm> it's not the same, but let's not argue about it :)
13:12:49 <hvr> agreed ;)
13:14:32 <kadoban> https://github.com/haskell-hvr/cassava/pull/155 feel free to read and judge for yourself.
13:15:57 <alexteves_> ‘Default’ is not a stock derivable class (Eq, Show, etc.)
13:15:59 <alexteves_> :(
13:17:16 <amalloy> and how do i add a dependency from stackage to my stack.yaml? https://docs.haskellstack.org/en/v1.0.2/yaml_configuration/ only seems to explain local packages and git dependencies, but i assume i just want some reasonable version that's already in the resolver
13:17:36 <electrocat> amalloy: add it to you cabal file?
13:17:58 <glguy> All of the packages in the resolver you specify are already available
13:18:06 <kadoban> amalloy: Things that are already in your resolver don't need to be mentioned again in stack.yaml . Yeah, put it in package.yaml or the .cabal file if there isn't one of those.
13:18:13 <amalloy> when i do that, stack suggests i shouldn't: Warning: WARNING: /home/amalloy/tmp/binary-trees/binary-trees.cabal was         modified manually. Ignoring package.yaml in favor of cabal file. If you want to use package.yaml instead of the cabal file, then please delete the cabal file.
13:18:31 <glguy> You have to delete the package.yaml once your initial .cabal file is generated
13:18:46 <kadoban> amalloy: Then you can follow either path of that advice, stack's preferred way is to edit the package.yaml file instead.
13:18:50 <geekosaur> that is what glguy meant by saying package.yaml first and cabal file only if there is no package.yaml
13:18:53 <jle`> alexteves_: what would you expect the stock implementation to be? :p
13:19:11 <alexteves_> dunno, "def" for all fields?
13:19:28 <kadoban> jle`: The same as minBound maybe? Probably not a good idea though.
13:19:29 <glguy> stack's pushing its own replacement format for .cabal files, but you can't ignore that and stay compatible with everyone else
13:19:49 <glguy> but you can *
13:28:03 <lonokhov> stexit will never fork Cabal or GHC, too much work for not enough praise. Even if they start promoting hpack, will still have to support .cabal
13:29:13 <shapr> I desire some kind of agreement so there's a single path forward.
13:29:55 <lonokhov> not going to happen. this is a total war, enemy should be destroyed
13:30:42 <shapr> nicest thing I can say about that is that it's counterproductive to me getting a Haskell job.
13:33:19 <sm> can we remember that hpack was a great idea, invented before stack by (I'm pretty sure) somebody completely unaware of stack
13:33:22 <dmwit> ?hackage template-default alexteves_
13:33:22 <lambdabot> http://hackage.haskell.org/package/template-default alexteves_
13:34:00 <merijn> sm: cabal is getting common stanzas, so that should alleviate the need for hpack
13:34:03 <sm> stack showed good sense in adding optional support for it, I wish cabal-install would do the same
13:34:12 <sm> perhaps, perhaps
13:34:26 <glguy> sm: pushing it as the default for new projects is the important issue
13:34:36 <Welkin> what as the default?
13:34:50 <kadoban> hpack
13:34:55 <Welkin> I created new projects using the latest stack and didn't have an issue
13:34:58 <Welkin> I use .cabal
13:35:18 <kadoban> Welkin: It depends on the template
13:35:31 <kadoban> The default one uses hpack for a while now
13:35:44 <glguy> people using stack because they don't know any better are now using hpack not knowing what's happening
13:35:52 <Welkin> that's dumb
13:35:59 <Welkin> I have only been using the hakyll template
13:36:19 <kadoban> glguy: *eyeroll* the horror
13:36:43 <sm> lol
13:36:46 <glguy> making things harder for new people and less compatible for everyone else is frustrating, yes
13:38:32 <kadoban> In what use-case is it meaningfully less compatible?
13:39:10 <jle`> i think hpack is nice since it's yaml and i don't have to learn another configuration language, and re-use yaml functionality like anchors, aliases, and merges.  but i did feel uncomfortable when stack swapped the default on me without me realizing it
13:39:17 <lonokhov> i the case of separate repo without .cabal files generated
13:39:25 <merijn> jle`: But I don't wanna learn yaml :(
13:39:47 <jle`> does cabal-install recognize hpack?
13:39:48 <merijn> jle`: Also, my experience with yaml on Travis-CI is that it's...less than perfectly standardised
13:39:51 <kadoban> lonokhov: cabal-install doesn't support pulling packages from a repo anyway last I checked
13:40:05 <sm> jle`: what is meant by swapping the default, exactly ?
13:40:13 <shapr> yeah, the stack / cabal disagreement is making it harder for me to teach Haskell to newbies.
13:40:17 <merijn> kadoban: It does
13:40:27 <jle`> sm: when you make a new stack project, it defaults to using hpack and adds the .cabal file to .gitignore
13:40:33 <lonokhov> yaml sucks. and yaml library in haskell is one of the worst
13:40:37 <merijn> kadoban: Well, not dependencies (yet! it's part of the spec for cabal.project)
13:41:03 <sm> I see. The cabal file is of course there, but not committed
13:41:04 <kadoban> If not for dependencies, then when does it do it?
13:41:20 <glguy> When the other repository is a git submodule you can easily have a git version built by cabal
13:41:22 <lonokhov> it's for deps, same as stack.yaml
13:41:30 <merijn> kadoban: You can have it fetch from git/whatever when you do cabal get
13:42:00 <jle`> sm: indeed. it's also not created initially, so if you want to use .cabal, you'd have to build it once and then delete package.yaml
13:42:02 <merijn> kadoban: But anyway, cabal.project will have support for that Soon (TM)
13:42:16 <lonokhov> kadoban: I'm talking about slurp thing. if anti-hackage does not require .cabal then it doesn't have it
13:42:33 <sm> jle`: it was created initially for me jus tnow
13:43:07 <jle`> sm: oh, i guess i didn't notice it earlier.  thanks for correcting me
13:43:42 <sm> I think in the present times of trial we should all be fact-checking every assertion
13:44:00 <sm> oops. just doomed myself. :)
13:44:10 <kadoban> merijn: Then if it's a problem in that case, maybe it should add support for hpack soon too
13:44:29 <jle`> i think hpack is great, but until cabal-install supports it, it should be a conscious decision, not a default
13:44:46 <typetetris> What is this cabal-install thing?
13:44:46 <merijn> tbh, I don't really know what hpack does
13:44:57 <lonokhov> cabal-install always was strict about deps.
13:45:03 <merijn> typetetris: cabal-install is the "cabal" executable
13:45:04 <jle`> typetetris: cabal-install is the traditional haskell package installer
13:45:11 <kadoban> merijn: It's just a different format that you can generate a .cabal file from
13:45:14 <merijn> typetetris: Not to be confused with Cabal (the library)
13:45:32 <sm> it's a friendlier, less error-prone syntax for writing cabal files
13:45:34 <cycle337> https://www.youtube.com/watch?v=iSmkqocn0oQ in which Simon Peyton Jones says Haskell is useless
13:45:50 <hexagoxel> lonokhov: do you know of a (better than yaml) general-purpose format that potentially could replace the special-purpose cabal package file format (ignoring the (unnecessary) friction this would create)?
13:46:07 <jle`> merijn: to me it's basically a yaml version of .cabal files (assuming a future .cabal file spec that has common stanzas etc. and the full functionality of yaml)
13:46:20 <typetetris> hexagoxel: What about XML?
13:46:21 <jle`> s/full functionality of yaml/full functionalty of hpack
13:46:30 <merijn> Anyway, I'm fundamentally tired of the stack vs cabal-install discussion, so I'm back to hacking my code in the hopes of getting to bed somewhat on time
13:46:37 <lonokhov> hexagoxel: I see no reason to use general purpose format
13:46:41 <merijn> typetetris: Are you suggesting XML would be BETTER than .cabal? o.O
13:47:06 <typetetris> nope sorry, just couldn't stop my fingers typing.
13:49:18 <hexagoxel> lonokhov: let me quote this cabal output: "Plain fields are not allowed in between stanzas"
13:49:53 <hexagoxel> now tell me that this constraint is a good thing. that it is necessary even. or that this message makes sense to a new user.
13:50:24 <hexagoxel> a custom format forces users to learn such details. its annoying.
13:50:57 <merijn> hexagoxel: Using YAML just forces people to learn the write format of writing YAML, I don't see how that's fundamentally easier?
13:51:08 <hexagoxel> merijn: never said that.
13:51:27 <cycle337> those guys are such geeks !! :))
13:51:44 <hexagoxel> i asked for a format _better than yaml_. i completely agree that yaml is not a good choice.
13:52:06 <lonokhov> hexagoxel: error messages are more of the parsers problems, not format
13:52:31 <merijn> hexagoxel: ok, I will agree with you that there's ways the cabal format can be cleaned up
13:52:32 <lonokhov> also, new parsec based parser should be better
13:52:38 <typetetris> merijn: For me, YAML is a no brainer. Where I work it is used for every configuration file a human has to edit by hand. Haven't seen anything better yet.
13:52:58 <merijn> typetetris: You still need to learn which fields go where for what
13:53:02 <metahumor> cfg files?
13:53:32 <lonokhov> I've seen AST expressions written by hand in YAML, do not want
13:53:33 <typetetris> merijn: Yes it is just a syntax .... otherwise, it would be magic, wouldn't it?
13:54:13 <hexagoxel> lonokhov: but the problem _would not exist_ (to the same extend) if a suitable general-purpose format was used instead.
13:54:46 <typetetris> lonokhov: That wouldn't be the use case, if one would use a YAML as a syntax for the information cabal/stack needs?
13:55:04 <typetetris> Or do you have AST expressions in your cabal files?
13:55:19 <ezyang> we kind of do
13:55:24 <ezyang> conditional expressions in Cabal
13:55:51 <lonokhov> hexagoxel: there is no such thing as general-purpose format fitting every usage
13:56:06 <hexagoxel> merijn: and i will agree that perhaps the answer to my question is "there simply is no general-purpose format that is sufficiently expressive". i still think it is worth considering.
13:56:06 <merijn> Like, I'm open to the idea of a suitable general-purpose format, but I'm not aware of anything remotely suitable
13:56:28 <lonokhov> typetetris: I do have them yes. like flags and version bounds
13:57:07 <lonokhov> Cabal syntax just never was a problem, idk what happened
13:59:50 <typetetris> For yaml there are great plugins for nearly every editor, which get support and work from a lot of people, most of them don't even use haskell. The cabal experience for me (emacs, vim) was confusing (but maybe that is just me).
14:00:21 <merijn> typetetris: What was confusing?
14:01:08 <typetetris> For example the emacs mode placed my cursor in deeper and deeper nesting levels and most of the time I had to navigate back to one indentation level by hand, which was very cumbersome.
14:01:43 <lonokhov> typetetris: it was probably the electric-indent-mode and not haskell-mode
14:02:04 <jle`> still, it's easier to find help for debugging your editor's yaml support than your editor's .cabal support
14:02:28 <typetetris> lonokhov: I go and look.
14:03:28 <lonokhov> Most of my indent problems in haskell-mode fixed when I turned that off. It's on by default on all programming-modes I think
14:04:51 <Zemyla> The primary law for MonadZip is that uncurry mzip . munzip = id, right?
14:05:11 <typetetris> Actuall It says 'Haskell-Cabal' for the major mode, oh yeah, there is 'Electric-indent' on the minor mode list.
14:05:30 <typetetris> still a problem I never had while editing yaml files.
14:05:55 <Zemyla> Would that mean that Either should be a MonadZIp?
14:06:03 <lonokhov> I never had problems editing xml files either
14:07:43 <typetetris> In contrast to XML, I actually like YAML. And I think, that is more than just taste, it is way less repetitive and more succint.
14:07:55 <cycle337> omg Simon Peyton Jones is so funny, I just love this guy ;)) discovering his lectures on  youtube ;))
14:08:38 <typetetris> cycle337 Yeah he is a great speaker. Be sure to watch the haskell exchange 2017 keynote! That was a great talk.
14:09:36 <cycle337> typetetris:  I'm on Escape from the ivory tower: but your recommendation is next :))
14:13:56 <cycle337> now I know how to pronounce hackage :))
14:15:06 <cycle337> what does fixo do in ghci ?
14:17:05 <mniip> do you mean fix?
14:18:20 <jle`> presto fixo
14:18:51 <cycle337> sorry ... "fix error"
14:19:03 <mniip> it's not specific to ghci
14:19:17 <cycle337> it's supposed to be an inside joke on ghci
14:19:18 <mniip> fix is a function and error is a function too
14:19:23 <cycle337> oh
14:19:23 <mniip> well it is somewhat
14:19:36 <mniip> % fix error
14:19:41 <yahb> mniip: "*** Exception: *** Exception: *** Exception: *** Exception: *** Exception: *** Exception: *** Exception: *** Exception: *** Exception: *** Exception: *** Exception: *** Exception: *** Exception: *** Exception: *** Exception: *** Exception: *** Exception: *** Exception: *** Exception: *** Exception: *** Exception: *** Exception: *** Exception: *** Exception: *** Exception: *** Exception: *** Excep
14:19:47 <cycle337> really ??
14:20:00 <jle`> cycle337: `fix f` is f (f (f (f (f (f (f  ...)))))) forever
14:20:08 <mniip> it just throws an exception whose contents are that exception itself
14:20:10 <cycle337> in my ghci it just says : <interactive>:6:1: error:
14:20:11 <cycle337>     Variable not in scope: fix :: ([Char] -> a0) -> t
14:20:18 <mniip> import Data.Function
14:20:21 <jle`> cycle337: yes, you need to import it
14:20:25 <cycle337> oh !
14:20:25 <mniip> so when ghci tries to explain the exception it throws the exception
14:20:26 <jle`> 'Variable not in scope' :)
14:20:27 <cycle337> :))
14:20:34 <mniip> and so on
14:20:34 <cycle337> lol
14:20:41 <cycle337> now I get it ! ::))))
14:20:55 <cycle337> i was one import away from that punch line :))
14:21:00 <mniip> too many parenthesis are you russian or something
14:21:18 <jle`> mniip: i was closing a parentheses that someone left open yesterdady
14:21:22 <cycle337> oh sorry, will behave from now on
14:21:24 <jle`> was bugging me and i thought i would throw it in without anyone noticing
14:21:38 <jle`> oh you were talking about cycle337
14:21:45 <mniip> yes
14:22:19 * cycle337 parantheses are sophisticated weapons of war according to xkcd
14:23:59 <EvanR> i dont believe in the parentheses on the right closing fix f = (f (f (f (f ...
14:24:14 <jle`> ))))
14:24:29 <EvanR> they never start closing
14:24:53 <jle`> the expression is constructed outside in
14:25:06 <mniip> EvanR, and they don't stop coming
14:25:22 <jle`> fix f = f (fix f) = f (f (fix f)) = f (f (f (fix f))) = f (f (f (f ...)))
14:25:46 <metahumor_aw> EvanR doesn't want to write a context-sensitive parser
14:25:57 <mniip> strictly speaking this sequence of words has no limit
14:26:03 <mniip> f (f (f (f ...))) is not a word
14:26:24 <mniip> wot
14:30:45 <typetetris> Of course that is just lazyness, but I am always delighted to get a result, without (seemingly) ever applying the function to a value: http://lpaste.net/361910
14:39:49 <hexagoxel> (i am a bit late to think of this, but this is an even better example as to why i not too big a fan of custom formats: https://github.com/haskell/cabal/issues/4843)
14:40:43 <dmwit> EvanR: I don't believe in the parentheses and f's on the left opening `fix f = ...)))`
14:40:44 <hexagoxel> (custom formats = custom parsers = custom bugs. yes, those can be fixed. but we wouldn't have the problem..)
14:41:00 <hpc> this is why i write all of my configs in html 4.01 transitional
14:41:44 <hpc> hexagoxel: it would help if there was a good json or yaml parser out there
14:42:01 <hpc> (or if json and yaml weren't hideously quirky formats)
14:44:08 <typetetris> hpc: calling yaml quirky I can understand, but what is quirky about json?
14:44:27 <smitty> What do you guys think about John Backus' "function level" programming / the concatenative stuff?
14:45:31 <hpc> typetetris: admittedly much less than yaml, but there's some stupid stuff about unicode handling and what constitutes a top-level object
14:45:38 <cycle337> ` "Laziness was the thing that initially brought us together, but I now think that the important thing about it is not so much the lazy functional programming, I mean that's quite convenient and nice and modular, I do like it, the really important thing was that it prevented us from making those deals with the devil. Alright? And forced us to be embarassed for long enough to come up with the Monad idea."  - Simon
14:45:38 <cycle337> Peyton Jones`
14:46:08 <hpc> (i quite like json, on average)
14:50:26 <typetetris> hpc: the yaml package interfaces libyaml which seems to be quite battle tested, what is wrong with that, for a yaml parser?
14:51:22 <davean> typetetris: there has been a history of pretty horrid buts with that library
14:51:39 <davean> I'd not call it hardened by battle, all we know from battle is its terrible
14:52:13 <davean> Just look at its CVEs even
14:52:57 <typetetris> Ok. I jumped to wrong conclusions over it being more then 10 years old.
14:54:02 <typetetris> good night ye all
14:54:14 <cycle337> night
15:41:20 <alexteves_> what's the downside to always doing deriving (all-the-stock-classes) ? longer builds?
15:42:21 <mniip> yes for some reason they like to take a while to derive
16:06:47 <jle`> i wonder if they inflate the binaries by any significant amount
16:20:49 <concaveirc> Has anyone used the wxwidgets library? My programs seem to require libwxc.so, which is downloaded into .stack-work the executables run as long as I do not remove the .stack-work. Is there a way to get wxwidgets to link to something installed via the system?
16:22:19 <kadoban> concaveirc: Are you sure it's downloaded into there? That doesn't sound right to me. stack doesn't manage C libraries, so it wouldn't be downloading it itself for sure.
16:22:38 <kadoban> Unless it was a nix thing? I don't even know how the nix stuff works.
16:23:18 <geekosaur> concaveirc, on most systems a compiled program should be using the versioned .so, not the unversioned one which is intended for link time. This sounds like a bad design devision on the part of wxwidgets?
16:23:34 <geekosaur> anyway installing the system dev library should give you an unversioned .so
16:23:40 <concaveirc> I am not using nix, just stack.
16:24:19 <geekosaur> or whatever haskell package you are actually using since "wxwidgets" does not appear to exist
16:25:33 <concaveirc> I have wxGTK installed from the gentoo repositories, as well as its dependencies
16:27:21 <concaveirc> The symptoms is my program (https://gitlab.com/concavegit/mental-math.git) builds and runs with stack install or stack exec, but once I delete the project's stack-work, there is a complaint about the missing .so.
16:27:36 <concaveirc> I have reproduced this in an ubuntu vm as well
16:28:35 <concaveirc> As for weather the .so is actually in .stack-work, removing the just the .so from stack work reproduces the error.
16:28:50 <kadoban> Weird
16:29:03 <concaveirc> Indeed
16:37:11 <concaveirc> I have been sleeping on the issue for a while, but have not made any revelations. Searching the issue tracker on the bug tracker (https://sourceforge.net/p/wxhaskell/bugs/), there is only one old issue about failing to install wxc.so, which I assume means that it was not detected. Assuming that this is on the library dev team's end, is there anything I can do about packaging the executable with the relevant .so?
16:38:12 <concaveirc> As in, a packaging format which would install the .so into a recognized directory for the executable to find?
16:40:09 <kadoban> I'm sure that has an answer, I'm just not sure what it is :-/ someone eventually should know
16:41:31 <concaveirc> Would posting to stack overflow or reddit be productive?
16:42:19 <kadoban> I've never used either for haskell, wouldn't know for sure. I'd think waiting longer here could be fruitful though, just depends who's around.
16:42:32 <concaveirc> All right, thanks.
17:00:51 <fiatjaf> upgraded my ubuntu to 17.10, which has PIE enabled
17:01:01 <fiatjaf> but stack still thinks my linux is 'nopie'
17:01:07 <fiatjaf> geekosaur, help me.
17:01:45 <hpc> fiatjaf: delete your cookies, computers can only have one dessert at a time
17:02:00 <fiatjaf> hpc, where do I find these?
17:02:07 <fiatjaf> I've deleted ~/.stack
17:02:12 <hpc> (that was a joke)
17:02:13 <fiatjaf> but the problem persists
17:02:37 <kadoban> fiatjaf: What version of stack? And what's the error you're getting?
17:02:42 <fiatjaf> sorry. I can't understand any jokes. I'm desperate.
17:02:58 <fiatjaf> Downloaded lts-7.19 build plan.
17:02:58 <fiatjaf> Preparing to install GHCJS to an isolated location.
17:02:58 <fiatjaf> This will not interfere with any system-level installation.
17:02:58 <fiatjaf> Downloaded ghcjs-0.2.1.9007019_ghc-8.0.1.
17:02:58 <fiatjaf> Setting up GHCJS build environmentNo information found for ghc-8.0.1.                          Supported versions for OS key 'linux64-nopie': GhcVersion 8.0.2, GhcVersion 8.2.1, GhcVersion 8.2.2
17:03:19 <fiatjaf> stack version 1.6.1
17:03:47 <kadoban> Might as well try upgrading, that's not quite the newest one. I'm not sure what that error is exactly though
17:06:31 <kadoban> fiatjaf: https://github.com/commercialhaskell/stack/issues/3801 looks related, if a bit messy as a bug report, looks like they fixed with just ... 'stack upgrade --git' if nothing else
17:07:46 <fiatjaf> I'm upgrading.
17:07:56 <fiatjaf> ok, no result.
17:08:19 <jchia> Is it unlawful to have an Enum instance where values map to an Int range with gaps inside, e.g. 0, 1, 5, 6, 9? (I'll define succ and pred to skip the gaps.) The meaning of enumFromThen and enumFromThenTo become fuzzy, though.
17:08:40 <fiatjaf> oh, I didn't do the --git thing
17:09:31 <kadoban> fiatjaf: I'm not super confident it'll fix it, but could try I guess. I thought I saw a PR a while back that was kind of related sounding to this, but I can't find it at the moment.
17:10:03 <fiatjaf> it's downloading a ghc-nopie-8.0.2
17:10:08 <fiatjaf> maybe it will work this time
17:10:20 <kadoban> Maybe? *uncertain shrug*
17:10:37 <fiatjaf> but other ghcs have always worked here, the problem only appears with ghcjs
17:10:43 <fiatjaf> the error message doesn't make much sense
17:10:59 <fiatjaf> I don't understand why I'm a 'nopie'
17:11:38 <geekosaur> I don;t understand why you are convinced that is an error
17:12:21 <Axman6> surely if you're compiling to JS PIE is irrelevant?
17:12:23 <fiatjaf> geekosaur: I'm convinced it is an error because it cannot compile ghcjs for some reason
17:12:40 <geekosaur> it is not relevant.
17:12:42 <fiatjaf> actually I don't know what it is trying to do or where it is failing
17:12:56 <geekosaur> it is relevant if you are on arch, basically
17:13:22 <kadoban> The original thing certainly sounds like an error, though I'm not sure exactly what the context is.
17:14:24 <fiatjaf> why can't stack compile ghcjs if it is not an error, geekosaur? I don't get it.
17:14:42 <geekosaur> the error is somewhere else
17:14:59 <fiatjaf> but there is an error, right?
17:15:12 <fiatjaf> that's why I said the error message didn't make much sense
17:15:14 <geekosaur> somewghere, you have not provided enough information to find it
17:15:16 <geekosaur> that is not i8t
17:16:38 <kadoban> "No information found for ghc-8.0.1" sure sounds like an error, the one you get when stack doesn't know how to install the version of GHC it needs for your OS.
17:17:02 <geekosaur> both your current and previous version of ubuntu have PIE support, but do not require it --- so far, that's a debian only thing, and the case where 'pie' vs. 'nopie' normally appies. but on arch stack tends to pick the pie version when it shouldn;t (because tinfo6 changed at the same time on debian, and it was keying off of that), so it mentions that
17:17:14 <geekosaur> thayt does nto mean it is an error, or that it matters on *your* system
17:17:55 <geekosaur> and if that made no sense to you, this should perhaps tell you that you should not be panicking over it
17:18:44 <geekosaur> or, you can keep thrashing around, randomly changing anything not nailed down, and taking a prybar down to anything that is; obviously that always magically fixes everything?
17:19:08 <fiatjaf> geekosaur: I'm not panicking over pie, I just thought this was related to pie because you said that.
17:19:19 <geekosaur> I told you it did not matter
17:19:23 <geekosaur> you proceeded to treat it as an error
17:19:25 <fiatjaf> you told that now.
17:19:38 <geekosaur> no, I told you houers ago. twice
17:19:46 <fiatjaf> ok.
17:19:49 <geekosaur> you want it to be an error
17:21:01 <fiatjaf> you're being very unclear, apparently on purpose.
17:21:12 <geekosaur> I am expecting you to think
17:21:20 <fiatjaf> I'm asking for help.
17:21:26 <fiatjaf> I obviously don't know what is happening.
17:21:28 <geekosaur> if this is bad, then you;re going the wrong direction: ghcjs is not microsoft visual studio
17:21:38 <geekosaur> ghcjs is still experimental
17:22:12 <geekosaur> I *think* what you are seeing is: stack is trying to download a prebuilt one, failing (this is not unusual), then trying to build one and failing because there is no ghcjs compatible with your ghc 8.2.2 yet
17:22:34 <fiatjaf> yes, I thought that too.
17:23:00 <fiatjaf> but I imagined there wasn't a prebuilt ghc that matched a prebuilt ghcjs BECAUSE I was on a nopie system
17:23:10 <geekosaur> but if you insist on "myst require no thought", ghcjs is not for you
17:23:16 <geekosaur> it is not related to nopie
17:23:19 <fiatjaf> and there was a prebuilt ghc that matched ghcjs on a 'pie' system
17:23:25 <geekosaur> you are still inssting that matters for some reason
17:23:56 <fiatjaf> why are you being a jerk?
17:23:58 <MarcelineVQ> fiatjaf: what does your stack.yaml that you're trying to use with ghcjs look like?
17:24:25 <fiatjaf> MarcelineVQ: I copied from https://docs.haskellstack.org/en/stable/ghcjs/
17:24:28 <geekosaur> because I am tired of repeating myself 20 times and being ignored in favor of your insistence that nopie means something to your case
17:25:10 <MarcelineVQ> copied to where? a fresh project?
17:25:17 <fiatjaf> MarcelineVQ: in my mind the existence of these docs mean that there is a ghc-ghcjs matching pair somewhere and people are installing them both with stack.
17:26:20 <fiatjaf> MarcelineVQ: yes, a fresh project copied from miso "getting started" instructions.
17:26:46 <fiatjaf> https://github.com/dmjio/miso#stack
17:30:07 <kadoban> fiatjaf: It sounds similar to https://github.com/commercialhaskell/stack/issues/3788 to me, but I can't tell what that means you're supposed to do. geekosaur seems to strongly believe that something else is going on though, so maybe they're right, really dunno.
17:30:12 <muyfine> Does anyone have an example of updating an Value that's an Object with lens-aeson?
17:30:30 <muyfine> I want to insert a couple of items into a Value if it's an Object
17:36:22 <muyfine> something like http://lpaste.net/361911
17:36:33 <muyfine> but using a _Object
17:37:41 <MarcelineVQ> The solution in kadoban's link works for me, provided I remove  ghc-build: nopie  from the stack global settings, which I had needed for other things.   .stack/programs/x86_64-linux/ghc-tinfo6-8.0.1/lib/ghc-8.0.1/settings  Can't say for sure if it's a success as I'm waiting for builds, but it gets a lot father than linker errors.
17:38:12 <MarcelineVQ> with ghc-build: nopie set it won't get the right bindist for me, with it removed it can find it, but gives me -fPIC errors during linking which kadoban's link solves.
17:41:07 <MarcelineVQ> if it's trying to give you nopie bin and you don't want it consider over-riding it, though I've not tried these:  ghc-build: standard   or   ghc-build: tinfo6    in my case tinfo6 is chosen by default.
17:43:45 <MarcelineVQ> just realized my filepath there was a non-sequitur   it's an example of the settings file specific to my install I had to edit,  by adding -no-pie  as shown in kadoban's link
17:45:47 <fiatjaf> kadoban: I'm still upgrading stack with the --git flag based on that. I hope it will work.
17:46:25 <fiatjaf> (although the solution given in that same issue was "just run stack upgrade --git", geekosaur will still tell me I'm a moron that just want to paste stuff in the command line)
17:47:13 <MarcelineVQ> you should read issue threads to the very end
17:47:58 <fiatjaf> good point
18:11:51 <parsnip> new cabal with have `new-build` in it? when is release for that as `build`?
18:13:41 <MarcelineVQ> some day, once the kinks are ironed out. If I had to guess it'd be after all the other new-*'s are in good shape too
18:13:53 <MarcelineVQ> such as new-repl new-install
18:16:21 <Shibata> didnt ben franklin invent lightning or was that edison?
18:16:30 <Mclane> Hey guys. I just came from Best Buy with my dad and saw this a-ni-me called 'Neon Genesis Evangelion' and my dad let me bought it, so now I have it with me but I've been reading about it and they say there is nudity in it. I'm not sure if my parents will allow me to watch it, last time they found my Hentai folder they changed my parental controls to Young Teen for a month. It's not fair. I'm 19. I'm hiding my Hentai in Documents and Set
18:16:41 <Hurtubise> Eat your own shit. That's a great way to start then move on to another hot guy's load. The smell is a big turn-on for me and that gets me going and wanting to eat the guy's shit. My first experiences with was a guy smoking a cigar...and I gotta be honest, that still gets me going.It helps if you have a feeder who can feed me slow and not all at once...but then some guys like it all it once I guess...different strokes for different folks. What I would
18:16:45 <Shibata> i don't care if you premium member, i will ctl+alt+dlt u / you little fuck, i've got year old posts bigger than u/ before i lost weight, back in ninety-eight/ you was wack posting over at gbs i seen u/ then you came to FYAD, switch your demeanor, well - we don't believe you, you need more people/ troll phds of the game, we passed them classes; nobody could read you 05 dudez like we do/ don't let 'em gas you like lowtax; he'll harass y
18:16:58 <Hurtubise> I enjoy black butts, butts in my face, butts which haven't been wiped, black dongs in my rectum, big sweaty black balls in my mouth, thick black dongs slapped across my face. I enjoy pressing my face into asses and sniffing them. I can take 2 cocks in my asshole and 3 in my mouth. I lick cocks and butts. I shake my ass in front of people's face before they fuck it hard. I wear a cock ring and enjoy letting people chain me up and piss on me.
18:16:58 <Mclane> I have survived fights by always expecting at least one more attacker than what you see and [I] always expect weapons. The time that I was seriously cut? I was caught by surprise with a guy drawing a hidden straight razor. That was in my early days. I have been fortunate enough to survive attacks with my attackers presenting guns and knives. Usually two or more attackers. I have also come out of fights relatively unscathed where I faced
18:17:00 <Shibata> Hello. I have a girlfriend. She has long orange hair which she wears with hairpins. She never removes her hairpins as they are worn in memory of her brother while her hair is worn long in honor of the promise Tatsuki once made to protect her. One of my girlfriend's more distinct characteristics is a large bust.
18:17:06 <Perone> When I installed Linux it asked me for my credit card number. Two days later I got a call from Wachovia asking me if I had purchased $400 worth of Totino's pizza rolls and Mountain Dew (I hadn't). Let this be a warning to all of you out there in the Internet.
18:17:11 <MarcelineVQ> @where ops
18:17:11 <lambdabot> byorgey Cale conal copumpkin dcoutts dibblego dolio edwardk geekosaur glguy jmcarthur johnw monochrom quicksilver shachaf shapr ski
18:17:13 <Roman-Milan> Furcism is just as bad a racism jackass, if you dont have anything intelligent to say shut the fuck up.... Obviously furry is in demand if the mod created a board for it, therefore he needs to fix the link, and you can just avoid it with your furcist ass. Geez im getting tired of lil pricks saying stupid shit. May a tiger eat your entrails.....
18:17:23 <Hurtubise> is it gay that sometimes when i take a shit i get goosebumps all over my body?
18:17:27 <Mclane> Chinese/Korean/Japanese don't look alike. If you think they are alike then I guess all white people are the same too. You dumb crackers.
18:17:27 <Shibata> KING GOLDI SIGNS WITH DICKSUCKERS INC and NOW LOOKING TO SIGN ALSO WITH FAGGOTS SOUTH!!!!!! PLAYA FLY IS LOOKING TO SIGN WITH SEMENLOVERS!...MEMPHIS NYGGAZ BOUT TO COME OUTA THE CLOSET..THIS IS WHAT THE INDUSTRY NEED FROM THE SOUTH...REAL FAGGOTS!
18:17:28 <Perone> Never clean up or shower here. The dried shit flakes off my body and sometimes i'll brush a bit out of my beard. My head is shaved so it just flakes off there too. Hell yes, I STINK. And my mouth smells like a sewer. That's theway I like it! I may clear a few people out of a room when I walk in but I haven't been thrown out of a Wallmart yet.
18:17:38 <Hurtubise> You know, I know that this sheep shit doesn't exist. I know when I put it in my mouth, the Matrix is telling my brain that it is juicy and delicious. After nine years, do you know what I've realized? Ignorance is bliss. But the funny part is, I'm not even in the matrix! It was reality!! I REALLY ATE SHEEP SHIT!!
18:17:40 <Roman-Milan> I work for a shipping company that deals specifically with the delivery of animals, mostly lab animals but we get some zoo business. Occasionaly some of these animals die during shipping, and we do some paperwork and have them creamated and no one ever misses them. Once I stole a monkey and marked it as dead and burned on the paperwork. I took it because it was a very large monkey and I thought it might make a cool pet. After I got tired of taking ca
18:17:46 <Perone> THE PURPOSE OF LANGUAGE IS COMMUNICATION AND IF YOU CAN UNDERSTAND IT DESPITE SPELLING/GRAMMAR FLAWS AND YOU ARE ABLE TO CORRECT IT THEN SAID COMMUNICATION WAS EFFECTIVE AND YOU ARE A FAGGOT.
18:17:51 <Mclane> MTV is responsible for brainwashing the youth into thinking that niggers are gods and that rap is music! The garbage that they pump into kids heads should be punishable by death via anal electrocution! And has anyone seen the advertisement for the video game called grand theft auto-san andreas? Isn't that special? A game that glorifies niggers selling crack and running the streets with rocket launchers, shooting at cops and speaking ebo
18:17:52 <Roman-Milan> Presumably you're either joking, or you're not a web designer.
18:17:53 <Shibata> U CANT FOOL ME WITH YOUR HACKED PROXY OMG DDOS DRONE NET PAQUETS REVERSE TRACE HAXORS SUB7 PAQUETS PAQUETS PAQUETS NMAP MOUNTAIN DEW HUGE ASS UNIX FREEBSD SLASHDOT OPEN SARCE DATA RAPE FIREWALLZ PAQUETZ XPLOIT VIRII DDOS SCO LUNIX PARENTZ BASEMENT
18:17:53 <Hurtubise> You're just a common or garden onanist. You open with a question, but then gab on and on and on and on about yourself. You are a virgin who calls his mother every night and then sobs quietely into his imported Japanese brandy while masturbating impotently to a DVD freeze frame of Janeway with her hair a little mussed. You will never know the touch of a woman, and never have any friends outside of your widescreen 19" DVI LCD. When you die, your arteri
18:18:02 <Roman-Milan> no sooner had the last inch of snow fallen in New York when the blogosphere came alive with myriad sepia filtered grainy photos of the wintry landscape, long, disjointed poetry about the ruthlessness of mother nature, and helpless nerds half-joking pleas for rescue
18:18:03 <Perone> Okay faggots, listen up. Mandatory drug tests today. Only this time, instead of pissing in a cup, you'll be pissing on each other's faces. Sure hope you like asparagus.
18:18:12 <Hurtubise> I just ate some fried chicken. The breasts were juicy, and the buns were soft and warm. Afterwards, the division manager of Popeyes came up to my table and asked me how the meal was.I said I was satisfied, but the meal lacked a certain je ne sais quoi. He apologized profusely, and said he had something to show me that would make up for it. He lead me to the back of the popeyes, to a room soaked from floor to ceiling in blood. In the center of it was 
18:18:15 <Perone> Also, whatÂ’s with posting your own blog to digg? Â“Hey, I shamlessly advertise my own ridiculous existance on the intarweb! Please blogroll me and dl my podcast!Â”
18:18:18 <Mclane> I dont even know what indie rock is, but it sure as fuck isnt going to get you play with any of the girls I hang out with.
18:18:24 <Roman-Milan> what did you have for breakfasT? your mom? what did you have for lunch your dad? .. what did you eat between that a fucking pig fuck man eww ur so nasty whatcha gunna eat for supper your fucking neighbors family and all your fucking pets
18:18:26 <Hurtubise> guns work like this - u buy the deagle at the spawn point and u get the headshot
18:18:36 <Perone> Y0 what kind of crimes u into? im all about a plan to kidnap a person / rape them / torture them / kill them / cutting off da head / drain da body of blood / rape da corpse / eat da corpse / dispose of da organs and bones / finish ff7
18:18:37 <Roman-Milan> I'm so sick of all this "digital" vs analog crap. Guys, if you ANAL-logue people want "Warmth" just mix white noise into the sound file, or use shitty cables. That's what you're paying $5000 a preamp for, suckers!
18:18:50 <Hurtubise> Since you like looking at women, I think it's about time you get your cherry busted. Yes, you need to get laid. Nursing homes are full of old hotties that would be willing to give their all to please. Since they are mostly in wheelchairs, they don't even have to kneel. Think about it, dude! In fact, think about those wrinkled, diapered old women every time you wank. Think, visualize, wrinkled dry pussy, depends, gums only, shit breath, saggy tits....
18:18:55 <Perone> faggot! get the fuck out of here. we don't take kindly to you people around here. you're worse than the niggers. at least the niggers are predictable - they just want to make illegitimate children, eat fried chicken, and steal cars - you faggots, who the fuck knows what you're going to do next?
18:18:58 <Roman-Milan> I just ate some fried chicken. The breasts were juicy, and the buns were soft and warm. Afterwards, the division manager of Popeyes came up to my table and asked me how the meal was.I said I was satisfied, but the meal lacked a certain je ne sais quoi. He apologized profusely, and said he had something to show me that would make up for it. He lead me to the back of the popeyes, to a room soaked from floor to ceiling in blood. In the center of it was 
18:19:02 <Hurtubise> Still dialing 911 for emergency police services? If you're like many people in the New York area, these simple numbers can be a painful reminder of loved ones lost in the terrible tragedy of September 11, 2001.
18:19:10 <Perone> The nigger is a subhuman monkey, ape, Fat lips, kinky hair, VIOLENT, RAPIST, SMALL BRAIN (have you noticed how dumm most niggers are)and broad monstrous noses, car jacking saucer-lipped, ignorant fecal colored, ghetto-living, welfare-leeching, crack-smoking, hub-cap stealing. fried-chicken and biscuit eating, watermelon-stealing, 6-yr-old-white-girl-shooting, serial-killing, rapist, robber, murderer, adulterer, liar, fat-assed, white-woman-wanting, loud-radio
18:19:14 <Roman-Milan> Christianity was founded and propagated by Jews. It is also the source of Western art, morality, and science.
18:19:19 <Hurtubise> your fuckin gay you should be shot and put in a gas chamber you fuckin peice of trailer trash....you put your moms dick back in your mouth and shut the fuck up the song fuckin rules
18:19:28 <Roman-Milan> ok, I know i'm married with kids but there is this chick at work who totally flirts with me all the time. She's not into me or anything but she totally flirts with me. I don't exactly not flirt back, and Ifantasize about her all the time. nothing will happen between us because i'm such a pussy. oh yah, shes 6 years old
18:19:43 <Hurtubise> Would you leave an otherwise perfect relationship if you found out your partner was interested in children sexually?
18:19:54 <Roman-Milan> woah! way to be sexist. i'm a girl hacker and exclusive linux user since 1998 and i'm certainly not alone
18:19:54 <Hurtubise> Today, they enjoy life in urban centers, often living 10 to a den. Sadly, captivity and inbreeding has caused their learning ability to be suppressed and their baser instincts to be more pronounced. Often, they will rely on the gatherings of other species to survive. Utilizing their natural nocturnal abilities, they stalk, undetected, through the habitats of these other species, procuring what it necessary to survive from them, often in the form of T
18:20:04 <Hurtubise> It's a shame the gooks beat you good in Vietnam. (though you probably won the unofficial underage girl rape contest)You fucking rambo wankers
18:20:21 <Roman-Milan> My favorite way to masturbate is to purchase some Nickelodeon Gak. For those who don't know its a strange little gel substance that's really cold and slippery. It makes me feel like I'm having sex with an alien.
18:20:32 <Roman-Milan> just went to micro$ofts web site to get some drivers for my cousin and it locked my machine - Of course I am using unbuntu and firefox - funny thing is when I unplugged my network cable I got my mouse back and disconnected from their site - seems everything works fine now but I sure hope they weren't trying to put sypware or root kit on my computer. they will hear from if I find anything. piss off microsoft - what are you now keeping people that don'
18:20:34 <Hurtubise> Ummmm....you are trying to equate "ratings" for fucking PODCASTS with that of TV? Even digital cable TV? A Podcast is a big hit with a few thousand downloads. 99
18:20:56 <Roman-Milan> Guys, does anyone ever have that thing happen, where you've just defecated, and are wiping yourself, and the toilet paper seems to kind of... snag, and then you realize it's sucking into your rectum and the next thing you know the cardboard tube from the toilet paper is just spinning on the holder and you've inadvertantly sucked an entire roll of quilted two-ply into your anus?
18:20:59 <Hurtubise> Longhorn? More like shoehorn, the way they're trying to cram all these new "features" into it.
18:21:08 <Roman-Milan> I got a 5+ on all 23 of my AP tests, a 2400 on the SAT, a 1337 on the ACT, but it's not a big deal since I have a 270 IQ. I was drunk, high, and getting a blowjob during every test, and I didn't study for any of them or sleep in the prior weeks.
18:21:21 <Hurtubise> The Chub Chant: Rub a Dub Chubs Three Plumpers in Tubs - Watch them Squirm as they Wash Their Nubs - Delight in the Sight of their Big Juicy Butts - And the Sudzy Soap loving Slippery Fat Sluts - Cum Take a Dip in Our Super Sized Tub - And Sing with us Rubba Dub Chub.
18:21:29 <Roman-Milan> i had a great time last night. thanks for tying me up with carpenters rope around my mantits and through the crack of my asshole and then facefucking me while pouring candle wax all over my areolas, your spiked-toe boots digging into my side while i am on all fours, back arched like a frightened cat, begging for mercy as the thick bands of the rope run back and forth teasing my grundel and burning my semen-encrusted pubic hairs, the smell so engulfin
18:21:31 --- mode: ChanServ set +q *!*@80.30.188.102
18:21:31 --- mode: ChanServ set +q *!*@8030.188.102
18:21:43 <Hurtubise> Haha, you NSYNC lovin' assholes really got burned this time.  Why can't you just shut your mouths and accept their demise??  They are all losers.. JC has to share that woman from Desperate Housewives with 3 other guys.  And Justin, oh my gosh, he isn't even man enough to hold on to Britney (and judging by her new husband it shouldn't be that hard).  I'm just glad Back Street Boys have released their new album.  They were the original band that every 
18:21:54 <Hurtubise> earlier tonight i went into chat and no one spoke to me. i don't know what i've done to anyone...but i guess whatever it is..it was enough for people to stop talking to me. some may think 'well, it's just chat...right?'. well unfortunately, chat is all i have. the only friends i have are online.
18:22:18 <Hurtubise> girl you must be charles barkley because i want to take you to the hole but i doubt you would be impressed with my full-court press
18:22:23 --- mode: ChanServ set +q *!*@218.255.146.102
18:22:57 --- mode: ChanServ set +q unquiet!*@*
18:23:00 <geekosaur> erp
18:23:08 --- mode: ChanServ set -q *!*@8030.188.102
18:23:39 <iqubic> What just happened here?
18:23:41 <MarcelineVQ> Some of those were pretty good, not sure why they spent their whole allowance in one shop.
18:23:55 <iqubic> I went away an I come back to this???
18:24:00 <drewbarbs> it seemed like it was pulling quotes from ~2003-2005 at points
18:24:08 <drewbarbs> multiple references to the blogosphere
18:24:17 <geekosaur> guessing from the subsequent klines that we're not the only target
18:24:18 <MarcelineVQ> iqubic: someone having fun with bots/scripts
18:25:15 <iqubic> Geekosaur: What are klines?
18:25:33 <MarcelineVQ> when a sysop bans someone, afaik
18:26:37 * parsnip attempts to give up stack
18:26:44 <iqubic> Does happy use stack?
18:26:54 <iqubic> I meant to type rust there.
18:27:04 <iqubic> Does happy use rust is what I want to know.
18:28:25 * parsnip tries `cabal new-build` in hakyll/
18:39:08 <iqubic> Holy hell, how many dependencies does happy have?
18:39:19 <kadoban> iqubic: Many
18:39:55 <Welkin> how many packages could a hackagebot hack if a hackagebot could hack packages?
18:40:05 <iqubic> Is Rust a dependency of happy?
18:40:05 <kadoban> Installing happy, alex and pandoc usually runs for quite a while for me, and then after that I typically have a good portion of a stackage lts resolver cached for later use xD
18:41:34 <iqubic> Pandoc took me hardly any time to install, but that's because I went with the executable, and not the library.
18:42:04 <kadoban> I don't use the executable itself much, it's just a dep for hakyll
18:42:21 <iqubic> I don't use hakyll.
18:44:30 <iqubic> But I am very confused as to why my compiler is spitting out stuff relating to rust when I just want happy.
18:46:28 <Axman6> why do you think there's rust being spit out?
18:47:26 <kadoban> iqubic: If you're confused by some output, asking about the output as specifically as possible is usually the way to go, aka lpaste it and point out which part doesn't make sense. I certainly don't recall anything about rust from happy though
18:48:17 <dibblego> parsnip: I recommend using nix
18:48:42 <parsnip> on macos?
18:49:05 <dibblego> well, I cannot recommend macos, but whatever works for you
18:50:01 <parsnip> you're on nixos?
18:50:11 <dibblego> Yes.
18:50:37 <fiatjaf> stack 1.7 (stack upgrade --git) seems to be working, kadoban. thank you.
18:50:55 <kadoban> fiatjaf: Cool. Did you have to do that extra weird stuff, or just upgrade and then it magically worked?
18:50:59 <kadoban> (just out of curiosity)
18:52:46 <iqubic> I think this is related to rust, because it is telling me it is compiling lots of *.rs stuff.
18:54:00 <iqubic> Alright then, htop is telling me that this is building firefox.
18:54:14 <fiatjaf> kadoban: yes, I got that same error.
18:54:14 <kadoban> O.o
18:54:16 <iqubic> So it makes sense to be related to rust.
18:54:34 <kadoban> You're building happy and it's building *firefox* to do that?
18:54:39 <fiatjaf> still didn't do the extra stuff, because I must sleep. I'll do the extra stuff later.
18:54:41 <kadoban> Is this nix or something?
18:54:47 <fiatjaf> no time for building firefox now. good luck.
18:54:47 <EvanR> firefox does have some nice support for things
18:54:48 <kadoban> fiatjaf: Oh okay, good luck after sleep then
18:54:51 <EvanR> firefox as a library
18:54:56 <iqubic> kadoban: No, this is Nix.
18:55:00 <Axman6> iqubic: what the hell have you done?
18:55:11 <kadoban> Oh okay, nix ... yeah who knows, that thing is crazy.
18:55:31 <kadoban> (mostly in a good way it seems, but still)
18:55:33 <iqubic> Axman6: I told NixOS to check for updates and install all updates.
18:55:59 <Axman6> so what are you talking about happy for?
18:56:09 <iqubic> I thought it was working on Happy, because that was the only thing I added to the list of packages.
18:56:14 <Axman6> mate, if you want help with stuff, you really have to not be so confusing all the time
18:56:25 <iqubic> But NixOS wants to rebuild firefox.
18:56:32 <iqubic> Sorry for my confusing.
18:57:00 <Axman6> "Why is happy building rust stuff" "... actually I'm doing a nix update" super confusing
18:57:19 <iqubic> Yes, I know. I realize that now.
19:15:41 <pdxleif> ghc-pkg list shows the "ghc" entry in blue. Is that normal?
19:15:54 <glguy> yes
21:12:19 <ReinH> pdxleif: o/
21:14:02 <ReinH> kadoban: It's just making sure you can read the happy documentation on hackage. Very thoughtful if you ask me.
21:16:05 <kadoban> ReinH: xD
21:17:50 <ReinH> But yeah I don't know how you have the thought "is happy requiring rust" and then not immediately have the thought "that's ridiculous, is there anything else that could possibly explain this?"
21:19:06 <parsnip> hmm, anything in haskell to map "America/Los_Angeles" to a TimeZone? or write myself with tuples, etc?
21:19:34 <ReinH> @google haskell time zones
21:19:35 <lambdabot> https://hackage.haskell.org/package/tz/docs/Data-Time-Zones.html
21:19:36 <Axman6> the time library has some timezone stuff, I think there's another package which has more timezone stuff... one sec
21:19:41 <Axman6> yeah tz
21:20:21 <ReinH> Sometimes #haskell is a rube goldberg device for querying google
21:23:58 <olligobber> ReinH, it could be more complicated I'm sure
21:25:09 <olligobber> oh, just realised it went client -> irc -> client -> irc -> bot -> google -> bot -> irc -> client
21:28:38 <iqubic> if I want to add a nix section to the package.yaml of a stack project, does it matter where I put that?
21:28:48 <iqubic> I'm getting a weird build error:
21:29:24 <iqubic> Warning: Ignoring unknown field "nix" in package description
21:29:24 <iqubic>  
21:29:27 <kadoban> iqubic: I would think that would go in the stack.yaml
21:29:35 <iqubic> Oh. Right. Duh.
21:30:20 <iqubic> I feel stupid.
21:30:50 <iqubic> Looks like I can't add happy as dep to this thing.
21:31:34 <iqubic> I'm trying to build a thing on nix, but it keeps failing.
21:33:18 <iqubic> No packages found in snapshot which provide a "happy" executable, which is a build-tool dependency of "pretty-show"
21:33:18 <iqubic> and at the end of that:
21:33:22 <iqubic>     Configuring pretty-show-1.6.13... Cabal-simple_mPHDZzAJ_1.24.2.0_ghc-8.0.2: The program 'happy' is required but it could not be found.
21:33:23 <iqubic>  
21:33:42 <Axman6> stack install happy?
21:34:16 <iqubic> That works better than what I tried.
21:34:33 <iqubic> I tried to install happy via the Nix package manager.
21:35:12 <iqubic> That seems to work a lot better than what I tried.
21:35:22 <iqubic> Stuff seems to work now.
21:35:40 <Axman6> not ideal if you do actually want this to work with nix without any problems
21:35:48 <parsnip> thanks guys. probably not understanding well how timezones work.
21:35:57 <iqubic> Axman6: It's fine for now.
21:36:55 <iqubic> Actually, nope.
21:37:12 <iqubic> I get the same error about happy not being found.
21:37:31 <iqubic> Even after "stack install --nix"
21:44:08 <iqubic> Well, I had to add "packages: [haskellPackages.happy] to the nix section"
21:44:14 <iqubic> And now it works.
21:44:40 <Axman6> well, that certainly makes sense. how did you create the nix file in the first place?
22:00:06 <iqubic> What nix file?
22:00:28 <iqubic> all I did was add this to my stack.yaml
22:04:35 <parsnip> is /34
22:04:40 <parsnip> oop
22:22:45 <andrei> I'm trying to use inline-c-cpp and I'm getting this error: Loading temp shared object failed: /tmp/ghc6912_0/libghc_3.so: undefined symbol: _ZNSt8ios_base4InitD1Ev
22:23:24 <andrei> What does one do about it?
22:25:21 <cocreature> andrei: which version of cabal & ghc are you using?
22:25:33 <andrei> cocreature: ghc 8.2.2
22:26:02 <andrei> cocreature: cabal-install version 1.24.0.2
22:26:03 <cocreature> hm not sure then, might be worth makinga bugreport (assuming one does not already exist)
22:26:11 <cocreature> oh I would upgrade to cabal 2.0 in that case
22:26:30 <andrei> cocreature: I'm running stack 10.1 so I don't think upgrading is an option
22:26:46 <cocreature> stack 10.1? that’s not a thing
22:26:56 <andrei> lts-10.1
22:27:28 <cocreature> ah ok
22:28:35 <cocreature> you might need to add the generated C files to c-sources
22:31:17 <andrei> cocreature: I'll give that a try
22:32:14 <cocreature> andrei: btw is your version of stack up2date? if not try updating, iirc the newest stack compiles against Cabal 2.0 which might help
22:33:44 <andrei> cocreature: Version 1.6.3 So it looks like it's the latest version
22:34:01 <cocreature> yeah
22:34:14 <andrei> Yet stack exec cabal -- --version returns cabal-install version 1.24.0.2
22:34:37 <cocreature> stack doesn’t use the cabal install executable, it uses Cabal the library
22:34:54 <cocreature> try "stack exec -- which cabal". that executable is probably coming from somewhere else
22:35:10 <cocreature> andrei: btw do you get that error when compiling or in the repl?
22:35:10 <andrei> cocreature: Ah
22:35:17 <andrei> When compiling
22:35:49 <cocreature> then I’m out of ideas apart from making a bugreport, sry
22:36:21 <andrei> cocreature: Okies. Thanks for trying :)
23:51:53 <noobi> What is the appropriate signature for this? foldMap read ["1","2","3"] I know that we need to indicate what the read should parse to but it's not clear how to annotate it in this case.
23:52:33 <cocreature> noobi: well how do you want them to be parsed?
23:52:40 <jle`> you can use 'read @Blah' to get a String -> Blah
23:53:31 <jle`> but it's probably simpler to just use the result somewhere
23:53:41 <jle`> haskell will be able to infer what type you want to read things into
23:53:50 <quchen> :t foldMap read ["1", "2", "3"]
23:53:52 <lambdabot> (Read m, Monoid m) => m
23:54:02 <jle`> > foldMap read ["[1,2]","[3,4]"] ++ [5,6]
23:54:05 <lambdabot>  [1,2,3,4,5,6]
23:54:15 <noobi> I would parse them as Integers. Your use of @blah... where would that go? Is that an example of a scoped type variable?
23:54:22 <jle`> that's a TypeApplications
23:54:25 <noobi> thank you for all the help btw
23:54:29 <jle`> that'd be foldMap (read @Integer)
23:54:33 <jle`> but Integer doesn't have a Monoid instance
23:54:39 <jle`> so you can't really use it with foldMap anyway, just a heads up
23:54:54 <noobi> that was going to be the follow up question
23:55:10 <jle`> that was not a question :o
23:55:29 <jle`> but yeah, usually in this situation, we let type inference do its job, instead of manually annotating
23:56:08 <noobi> Thank you! It sounds like the solutions are 1. use it somewhere and let type inference sort it out 2. Use type applications extension
23:57:14 <cocreature> or just annotate the return type
23:57:40 <cocreature> e.g. (foldMap read ["1","2","3"] :: Integer)
23:58:42 <jle`> > foldMap read ["1","2","3"] :: Int
23:58:48 <lambdabot>  3
23:59:38 <noobi> jle` how would the monoid type class wrappers Sum or Product fit in there though?
23:59:57 <cocreature> noobi: the problem is that Sum and Product have different Read instances
