00:01:43 <Zemyla> I kind of wish bitSizeMaybe returned Maybe a dictionary for FiniteBitSize.
00:03:46 <mud> A dictionary?
00:08:27 <nshepperd> you mean a FiniteBits dictionary?
00:09:07 <nshepperd> I suppose that would be possible. the instances for Bits and FiniteBits are almost always going to be implemented in the same place
00:09:26 <hololeap> Map/IntMap/Hashmap are all equivalent to dictionaries in other languages
00:10:19 <hololeap> derp nvm
00:10:35 <cocreature> Zemyla is referring to dictionaries as in https://hackage.haskell.org/package/constraints-0.10/docs/Data-Constraint.html#t:Dict not Ma
00:10:37 <cocreature> *Map
00:11:30 <hololeap> hm, well i don't know what that is :p
00:11:49 <mud> Oh that. Above my paygrade
00:14:15 <Zemyla> cocreature: You could do it without Dict.
00:15:21 <Zemyla> Yeah, but it's probably somewhere more along the lines of:
00:16:17 <Zemyla> @let newtype FiniteBitsTest a = FiniteBitsTest { tryFiniteBits :: forall r. (FiniteBits a => r) -> r -> r }
00:16:19 <lambdabot>  Defined.
00:16:39 <Zemyla> And then isFiniteBits :: Bits a => FiniteBitsTest a
00:20:41 <nshepperd> data MaybeDict (c :: Constraint) where {Yes :: c => MaybeDict c; No :: MaybeDict c}
00:25:20 <utdemir> Hey. I'm trying to use singletons library. I have a type family `type family F (sym :: Symbol) :: *`. I want to use this function in a higher order function from singletons, but it expects me to give it a `TyFun Symbol * -> GHC.Types.Type`. I have no idea how to get it from my type family. Can you help me?
00:55:27 <freeman42x[NixOS> any ideas what might be the issue with: <<[neo@nixos:~]$ lambdabot -e 'rc online.rc'
00:55:27 <freeman42x[NixOS> [ERROR] Plugin.djinn: Djinn command failed: djinn: readCreateProcess: runInteractiveProcess: exec: does not exist (No such file or directory)>> ?
00:56:12 <freeman42x[NixOS> lambdabot installed using Nix under NixOS, lambdabot version 5.1.0.1
00:58:40 <cocreature> freeman42x[NixOS: sounds like the plugin is trying to run the djinn executable which you do not have in PATH
00:59:21 <freeman42x[NixOS> cocreature, yes, but should that not have come with lambdabot?
01:00:17 <freeman42x[NixOS> I don't see any separate Djinn package, I think it should come with lambdabot
01:00:32 <cocreature> https://hackage.haskell.org/package/djinn
01:00:47 <int-e> freeman42x[NixOS: djinn is just an executable, so it's not possible to add it as a dependency in a .cabal file.
01:01:02 <int-e> (Cabal will complain that it has no library)
01:02:29 <int-e> (and that makes kind of sense because there's no way for Cabal to detect whether djinn is installed... the implemented check relies on the Haskell compiler's package database)
01:03:20 <int-e> freeman42x[NixOS: now for nix, adding such a dependency should be possible but it requires a manual intervention.
01:03:33 <cocreature> cabal doesn’t care about runtime dependencies anyway and it shouldn’t. you could run the executable in a completely different environment than you used to built it
01:04:49 <int-e> well, this contrasts with mueval which *is* a declared dependency, but indeed mueval *also* provides a library.
01:05:33 <int-e> (dependency of lambdabot, that is)
01:06:12 <freeman42x[NixOS> cocreature, int-e thank you, I think I got what the issue is
01:14:14 <freeman42x[NixOS> I did a nix-build on djinn but for some reason it did not add it to the path
01:20:37 <cocreature> you probably want to do something like "nix-env -i" to add it to your path
01:25:50 <freeman42x[NixOS> cocreature, but it it not in the nix store
01:26:28 <freeman42x[NixOS> I used: nix-build -E 'with import <nixpkgs> { }; haskellPackages.callPackage ./. { }'
01:26:42 <freeman42x[NixOS> on the git clone
01:27:19 <freeman42x[NixOS> <<Warning: The directory
01:27:33 <freeman42x[NixOS> nix/store/fp4iq01apl35za0lwk1qc7r9j8y0lfa4-djinn-2014.9.7/bin is not in the system search path.
01:37:37 <cocreature> freeman42x[NixOS: try "nix-env -iA nixpkgs.haskellPackages.djinn"
01:38:57 <freeman42x> error: attribute ‘nixpkgs’ in selection path ‘nixpkgs.haskellPackages.djinn’ not found
01:39:41 <cocreature> huh, maybe try without the "nixpkgs." at the front.
01:40:05 <cocreature> or maybe it’s "nixos.haskellPackages.djinn" on nixos
01:42:28 <cocreature> that commend is definitely working for me
01:44:48 <freeman42x[NixOS> cocreature, this worked <<nix-env -iA nixos.haskellPackages.djinn>>
01:44:52 <freeman42x[NixOS> thank you very much
01:54:18 <freeman42x[NixOS> this error remained <<Plugin `offlineRC' failed with: online.rc: openFile: does not exist (No such file or directory)>>
01:54:28 <freeman42x[NixOS> not sure how to interpret it
01:55:05 <parsnip> hmm, how do i get emacs to show the type for for example hakyll's copyFileCompiler, maybe in minibuffer with something like el-doc. i've got various things installed, hoogle, haskell-ide-engine, haskell-mode, lsp-ui, lsp-haskell, intero, not sure how to put this together.
01:56:10 <cocreature> freeman42x[NixOS: it tries to open a file called "online.rc" that doesn’t exist
01:58:10 <freeman42x[NixOS> cocreature, for some reason I thought that I was missing a program called openFile haha
01:58:41 <freeman42x[NixOS> that worked, thank you, although it hangs now and I don't see lambdabot popping in the chat yet
02:08:26 <schlichtanders> just installed my first package into cabal sandbox, however this does not work with runhaskell... does anyone know what to do so that runhaskell uses the locally installed cabal sandbox?
02:10:14 <cocreature> schlichtanders: try running "cabal exec -- runhaskell …" from the directory where you created the sandbox
02:13:22 <schlichtanders> cocreature: thanks, that worked indeed. Couldn't find this at all in the web. Where have you known this from?
02:17:10 <schlichtanders> is there a way to configure runhaskell to look into local cabal sandboxes by default?
02:28:23 <schlichtanders> anyone?
02:31:43 <[exa]> schlichtanders: imho not, runhaskell is from ghc which should not be cabal-aware; but you can easily wrap it in some shell script or so
03:00:17 <schlichtanders> exa: thanks for the clarification
03:06:03 <mrkgnao> any unbound, er, knowers here?
03:06:21 <mrkgnao> is there a difference between (a, Bind v e) and Bind (v, Embed a) e?
03:32:39 <infinisil> Can you get stoned for writing dead ass ugly Haskell?
03:32:59 <ij> There's only one way to find out.
03:33:23 * infinisil pretends he didn't write dead ass ugly Haskell
03:34:27 * [exa] pretends having no stones
03:36:02 <Franciman> infinisil, you mean stoned as in after having drugs?
03:36:28 <Franciman> in that case, you'll get much more stoned after writing hot as hell haskell code
03:37:25 <infinisil> Franciman: ah haha, no i meant the stoned as in getting stones thrown at until you die
03:37:43 <mniip> infinisil, yes
03:37:52 <mniip> esp if you dare publish it on hackage
03:38:08 <Franciman> I think you are excused if it's written for a paper, though
03:38:14 <infinisil> I wouldn't, I have sinned enough with the existence of this code on my machine already
03:38:20 <Franciman> :P
03:38:32 <infinisil> Okay tbh, the code isn't *that* bad
03:38:44 <infinisil> it could be worse
03:40:03 <infinisil> Needs more monads
03:40:10 <infinisil> Currently explicitly carrying around state
03:40:51 <centril> infinisil: I mean, if Koen Claessen used unsafePerformIO at some point I think you are excused =P
03:41:53 <centril> btw... has anyone read anything about shrinking and showing higher order functions? (second order is fine..)
03:41:58 * infinisil tries to find out who this person is
03:42:25 <centril> infinisil: is that a joke ;) ?
03:43:14 <infinisil> centril: I genuinely don't know who that is, I'm relatively new in the Haskell community
03:43:30 <centril> infinisil: oh; among other things he invented QuickCheck with John Hughes
03:44:01 <infinisil> Ah, I know of QuickCheck and John, nice
03:45:27 <infinisil> He seems to have worked for haskell debugging.. What debugging? Is there an easier way to debug haskell other than putting a bunch of unsafe traces everywhere?
03:46:14 <cocreature> ghci has a debugger but in most cases, I find Debug.Trace to be significantly easier
03:46:55 <mrkgnao> anyone here know Unbound?
03:47:14 <centril> honestly it is hard to debug things written in a lazy language
03:47:40 <mrkgnao> I'm trying to figure out if there's any difference between (a, Bind v e) and Bind (v, Embed a) e
03:57:14 <[exa]> Franciman: "you're excused if it's for a paper"  +1 lol
03:57:47 <Franciman> :)
04:40:01 <CryptoVirus> i need to run 'stack build' with directory-1.2.7.1 instead of 1.3.0.0 as it is doing by default. how to change the directory dependency version, which stack is using?
04:43:36 <fr33domlover> CryptoVirus, you can list it in stack.yaml
04:43:48 <fr33domlover> As an extra dep of your project
04:44:41 <fr33domlover> (I think there's a way to do it using command line options too if you prefer)
04:47:19 <CryptoVirus> fr33domlover: thanks it worked, started to build.
04:56:10 <fristonio[m]> Hey a haskell noob here, I've been trying to solve https://www.hackerrank.com/challenges/queens-attack-2/problem my solution is https://pastebin.com/vnV2w9Vk . I know its ugly but I am just starting with haskell. I am getting timeout for this solution any way I can optimize it. :/ any help would be appreciated Thanks
04:57:40 <cocreature> fristonio[m]: step 1. add type signatures to all of your top-level functions to make it easier to read (and it can sometimes also help with performance if the inferred type is unnecessarily general)
04:58:08 <cocreature> fristonio[m]: now when it comes to performance, the first thing that jumps to my eye are the many calls to "elem"
04:58:13 <cocreature> elem will do a linear scan in the list
04:58:28 <cocreature> which can be slow if you have a lot of obstacles
04:58:39 <cocreature> you probably want to use a set for this
04:59:14 <cocreature> it also looks like a more appropriate type for obstacles would be "[(Int, Int)]"
04:59:51 <sannysanoff> Hi! How do I break long initializer list for data type?  let md = MyData (long expression 1) (long expression 2) .. (long expression 10). I don't want to introduce 10 variables.
05:00:13 <sannysanoff> backslash is not working ;(
05:00:26 <cocreature> sannysanoff: just regular line breaks + appropriate indentation
05:00:29 <fristonio[m]> Thanks, cocreature  I will keep that in mind
05:01:41 <fristonio[m]> also how can I apply same type signature to all the functions as all of those are same in my case, any easy way rather than writing same redundant type signature for all of them
05:01:47 <sannysanoff> cocreature: ah, thanks. Returning to haskell after a while, indentation was not big enough.... Now it comes back to me ;)
05:21:00 <fristonio[m]> cocreature: Using Data.set did the trick for me, was it because elem uses linear search while Data.set stores it as a binary tree ?
05:21:23 <cocreature> fristonio[m]: yep
05:22:22 <fristonio[m]>  > also how can I apply same type signature to all the functions as all of those are same in my case, any easy way rather than writing same redundant type signature for all of them
05:22:23 <fristonio[m]> cool, is there a way to do this ?
05:23:08 <cocreature> you can do things like "a,b,c :: Int" but tbh I never use this since I find it easier to read if the type signatures are directly above the corresponding definition
05:25:46 <fristonio[m]> cool thanks
05:34:12 <asheshambasta> Hi! I'm trying to use https://hackage.haskell.org/package/HPi-0.5.1 in a project but when I add "HPi" or "hpi" to my dependencies I see errors ```<command line>: cannot satisfy -package HPi```
05:34:37 <cocreature> asheshambasta: how are you building your project?
05:34:49 <asheshambasta> cocreature: I'm just doing stack ghci
05:34:58 <cocreature> try running "stack build"
05:35:40 <asheshambasta> ok
05:38:05 <asheshambasta> ok thanks cocreature, that seemed to have done the trick, albeit now I have ```    * Missing C library: bcm2835``` but that isn't a stack related problem I guess.
05:38:05 <centril> Does anyone have any new-ish Haskell/FP related talk they'd like to share?
05:38:30 <asheshambasta> cocreature: I was also prompted to add HPi-0.5.1 as an `extra-dep` in my stack.yaml
05:38:49 <asheshambasta> maybe I need to read about and understand stack a bit more
05:42:03 <asheshambasta> centril: https://www.youtube.com/watch?v=9957qVltU00
05:44:14 <centril> asheshambasta: thanks
05:46:30 <asheshambasta> centril: many of Snoyman's talks are great, he goes at what I find a great pace – not too slow and not to fast (at least for a beginner like myself)
05:49:19 <centril> asheshambasta: =)  There's a talk about dependent types in "Up next" linked
05:49:21 <centril> great
05:49:58 <asheshambasta> all hail YT's suggestions-engine (or whatever comes up with these amazing suggestions)
05:50:08 <centril> ^,-
05:50:18 <centril> COOL! https://www.youtube.com/watch?v=Cy9NUVaiYUg
05:50:23 <centril> "RustBelt: Securing the Foundations of the Rust Programming Language"
05:53:02 <asheshambasta> centril: also good: https://www.youtube.com/watch?v=DebDaiYev2M&t=853s
05:53:43 <asheshambasta> I also learnt some stuff from the Haskellcast, but I haven't seen anything new from them for quite some time now
05:53:56 * ArchieT uploaded an image: Screenshot-2018-1-27 Making Our Own Types and Typeclasses - Learn You a Haskell for Great Good .png (25KB) <https://matrix.org/_matrix/media/v1/download/matrix.org/lMdbdkgTCwXTQwwsbaPMtOlL>
05:53:58 <ArchieT> I found this pretty much misleading :( The ellipses are certainly not the worst thing about this illustration.
05:54:13 <ArchieT> (from: http://learnyouahaskell.com/making-our-own-types-and-typeclasses …)
05:54:51 <asheshambasta> centril: https://www.youtube.com/channel/UC0pv4sIiJ404ubqUJ2e4WzA
05:55:44 <ArchieT> (the above image and text I've posted are copied content from my Tweet: https://twitter.com/feilermichal/status/957234851194732546)
05:56:36 <centril> asheshambasta: thanks
05:57:58 <cocreature> ArchieT: what do you find misleading about this?
05:58:42 <ArchieT> I thought I can create like, an enum that would be ints, like statically ints from 0 to 23, inclusive
05:59:42 <cocreature> well the text explcitely mentions that this is only an analogy and Int is not actually defined like this
05:59:43 * ArchieT uploaded an image: Zrzut ekranu z 2018-01-27 14-59-04.png (27KB) <https://matrix.org/_matrix/media/v1/download/matrix.org/gMPqiBnSOwUABUCjkIPpCTsJ>
05:59:45 <ArchieT> like this
06:00:16 <cocreature> but yeah you’re right the text could be clearer that this syntax is not allowed
06:00:45 <ArchieT> it mentions that it couldn't be defined like this because there are too many numbers
06:00:52 <ArchieT> hence the ellipses
06:19:52 <asheshambasta> ArchieT: It'll be interesting to see the definition of (+) with that
06:24:56 <ProofOfPizza> Hi all, quick question: When I use Control.Monad.Instances (:m etc in ghci) it tells me that it is deprecated. Should I be using something else instead ? (If yes... what ?)
06:25:15 <syq> any idea about 'cannot satisfy -package-id'?
06:26:55 <syq> I passed an option like '--package-db=/build/mattermost/matterhorn/matterhorn-40600.0.0/api-40000/dist/package.conf.inplace' to ghc-pkg
06:30:24 <cocreature> ProofOfPizza: what do you hope to get access to by importing that?
06:31:51 <ArchieT>  > ArchieT: It'll be interesting to see the definition of (+) with that
06:31:52 <ArchieT> (i'm back) that makes sense
06:31:56 <ArchieT> but
06:32:10 <ArchieT> I've heard that haskell has unbounded ints
06:32:35 <ArchieT> but then the image I quoted clearly states that it does not
06:32:42 <asheshambasta> it does indeed (if I'm remembering the basics correctly)
06:32:45 <cocreature> the "Int" type is bounded
06:32:49 <cocreature> the "Integer" type is not
06:32:57 <asheshambasta> ah
06:34:00 <asheshambasta> off-topic question: has anyone here had any experience programming with GPIO on a RPi?
06:34:24 <asheshambasta> I'm wondering what could be an efficient setup to be able to program things with GPIO but from my computer (a mac)
06:38:59 <ArchieT>  > the "Integer" type is not
06:39:00 <ArchieT>  > ArchieT: It'll be interesting to see the definition of (+) with that
06:39:00 <ArchieT> asheshambasta so, I guess it would be interesting to see the definition of (+) with that
06:39:39 <ArchieT>  > the "Int" type is bounded
06:39:39 <ArchieT> oh, I meant this one
06:41:50 <cocreature> you’re not going to be able to find a useful definition for that. it’s builtin and uses the native hardware instructions provided by your cpu
06:46:44 <ProofOfPizza> cocreature: I'm just following the LYAH and it came up there. So no direct use for it, I was just wondering since I could not find out.. I am playing around, trying to wrap my head around Functors :)
06:47:19 <cocreature> ProofOfPizza: just remove the import, the instances should be in scope by default
06:54:19 <ProofOfPizza> ahh allright, easy enough. Thx!
07:26:16 <epicallan> hi everyone, I am trying to learn parsec and i am stuck with the issue of using `sepBy` for splitting strings, here is my attempt which doesnt work due to spaces in the string. I have tried using the spaces operator but it was not working as i hoped. Would appreciate a nudge in the right direction http://lpaste.net/362003
07:33:42 <lyxia> epicallan: many (digit <|> space)
07:36:39 <asheshambasta> anyone with any luck installing stack on a raspberry pi?
07:37:02 <asheshambasta> (3 to be precise)
07:37:09 <epicallan> thanks lyxia, let me give that a shot
07:41:13 <freeman42x> lambdabot as a service on NixOS question: https://stackoverflow.com/q/48477392/750216
07:59:54 <Uniaika> :'')
08:16:06 <asheshambasta> What does `<command line>: not built for interactive use` when doing `cabal repl` mean?
08:19:33 <geekosaur> usually, you have a stage 1 or cross-compiled ghc
08:20:03 <geekosaur> which means it can't do dynamic loading, so the bytecode backend can't do things like load the runtime
08:22:22 <geekosaur> there was also no working dynamic loader for arm at one point, but current ghc should not have that problem. possibly older distributions for e.g. raspi still have old ghc versions that don't have it and therefore don't have the bytecode backend or ghci / TH
08:27:36 <asheshambasta> thanks geekosaur
08:28:14 <asheshambasta> I think I'm giving up on setting stack/ghc on the Rpi for now
08:28:32 <asheshambasta> its demotivating me atm.
08:37:24 <[exa]> asheshambasta: there's no stack for raspberrys?
08:37:29 <[exa]> btw what approach did you use?
08:38:20 <asheshambasta> I tried executing the scripts as described here, both of which appear to be broken: https://docs.haskellstack.org/en/stable/install_and_upgrade/#linux
08:38:29 <dsal> It worked out of the box for me (not the latest LTS, though).  I did turn into space issues.
08:38:48 <asheshambasta> and then I tried with the "manual download" option and put the stack binary in my path
08:39:08 <asheshambasta> which then resulted in `-bash: /usr/bin/stack: cannot execute binary file: Exec format error`
08:39:08 <dsal> Yeah, I guess it broke at some point.  Someone needs to fix that. I volunteered to help, but not hard enough.
08:39:38 <mrkgnao> is there any difference between data Foo deriving (C Bar) and instance C Bar Foo where {}?
08:39:46 <[exa]> asheshambasta: what does 'file /usr/bin/stack' report?
08:40:06 <mud> I think it goes in ~/.local/bin/stack
08:40:20 <mud> (or maybe not? not actually sure)
08:40:25 <[exa]> it should report the ELF architecture
08:40:40 <asheshambasta> [exa] mud checking that again
08:40:54 <asheshambasta> mud: I don't really think that matter as long as its somewhere in my Path right?
08:41:01 <[exa]> mrkgnao: 'deriving' autofills class members by something (like Show instances); empty instance is just...empty instance. :]
08:41:22 <mud> asheshambasta: No, it was just in response to [exa]'s thing, which yeah it'll matter where the executable is for that
08:41:43 <mrkgnao> [exa]: the class in question has default implementations for everything, should've mentioned that
08:41:52 <mrkgnao> as in, I get no -Wmissing-methods warnings
08:42:05 <[exa]> mrkgnao: then the defaults are used, but still nothing is auto-derived
08:42:55 <mrkgnao> hm. my question is, I don't lose anything at all by replacing empty instances by derivng clauses, right?
08:43:02 <mrkgnao> deriving*
08:43:09 <mrkgnao> for classes that aren't stock ones
08:44:01 <asheshambasta> [exa]: ```pi@raspberrypi:/tmp $ file stack-1.6.3-linux-x86_64-static/stack
08:44:01 <asheshambasta> stack-1.6.3-linux-x86_64-static/stack: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, stripped``` & ```pi@raspberrypi:/tmp $ file stack-1.6.3-linux-i386/stack
08:44:01 <asheshambasta> stack-1.6.3-linux-i386/stack: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.26, BuildID[sha1]=4a03607faa40d0a73a84b17be0f769eb0841d222, stripped```
08:44:10 <asheshambasta> (I've tried putting both in my path, to no avail)
08:44:31 <[exa]> yeah well, you've got stack for x86, you need one for ARM (or whatever raspberry is)
08:44:56 <mud> 's weird it sounds like one is for i32 and one is for i64 as well
08:45:26 <asheshambasta> yeah, cannot really find it on the stack downloads page, so …
08:45:41 <[exa]> so let's cross-compile one! :]
08:45:50 <[exa]> but afaik there should be some
08:46:55 <[exa]> asheshambasta: btw this trick could help https://gist.github.com/jamesthompson/7730209b2b154bd0a182e6fe945a2838
08:47:56 <asheshambasta> trying it out
08:49:17 <cocreature> mrkgnao: at least if deriving chooses DeriveAnyClass they are exactly equivalent. for builtin classes or newtypes, you might get different results (I don’t remember what GHC chooses there). newer GHCs allow you to choose explicitely how things are derived
08:49:35 <asheshambasta> [exa]: actually, it relies on the same script, see L#8, so its broken
08:49:48 <mrkgnao> cocreature: it isn't a stock class and I don't have GND on (and it isn't a newtype anyway)
08:50:33 <mrkgnao> I'm on 8.2, but the Vim packages I use break if I do `deriving anyclass` etc :(
08:50:44 <cocreature> you should be fine
08:50:58 <mrkgnao> figured, thanks
08:58:50 <[exa]> asheshambasta: btw can you look at the architecture of some other binaries in the system? the script looks like for raspi2 which has armv7, raspi3 is 8
09:00:08 <asheshambasta> [exa]: actually, I found this and I'm trying it out: https://github.com/blitzcode/hue-dashboard/#raspberry-pi
09:01:58 <asheshambasta> I appreciate my SSD mac so much after running disk IO heavy ops on the pi
09:10:39 <bwe> How would you introduce a 14 year old girl into programming with Haskell?
09:10:53 <Rembane> bwe: SICP!
09:11:43 <unyu> A while back, someone showed to me that, given a unary type constructor T, the existence of an involution "f :: (a, T b) -> (b, T a)", there exists an abstract type "R" such that "T a ~ (R, a)".
09:12:19 <unyu> Now suppose that I change f's type signature to "f :: (a, T a) -> (a, T a)". The above statement isn't true anymore, right?
09:12:35 <asheshambasta> [exa]: thanks for all the help though. But I'm going to stop after this ```pi@raspberrypi:/tmp/stack-1.6.3 $ cabal install --dependencies-only
09:12:36 <asheshambasta> cabal: failed to parse output of 'ghc-pkg dump'```
09:12:46 <asheshambasta> pretty much followed those instructions word-to-word
09:12:50 <unyu> In particular, "T" could be "[]", right?
09:13:25 <asheshambasta> I'll probably revisit this once I'm more well versed with the ecosystem
09:13:35 <unyu> Oh, btw, suppose "f" is still an involution, but not the trivial one.
09:13:36 <codedmart> What is the best way to decode json with aeson where one of the keys can be different ex `{"count": 250, "media": ...}` or `{"count": 250, "collections": ...}`? I know `count` is always there, but the other key is not always known.
09:17:38 <cocreature> codedmart: depends on what you want to decode to. https://hackage.haskell.org/package/aeson-1.2.3.0/docs/Data-Aeson.html#v:.:-63- will allow you to get back a "Maybe a". The alternative instance of Parser might also be helpful
09:18:41 <codedmart> cocreature: Right, but I don't always know the `Text` argument for `.:?`.
09:18:56 <codedmart> the `media` and `collections` are just examples.
09:19:04 <codedmart> It could be others.
09:19:21 <cocreature> codedmart: so what do you want to decode to?
09:21:21 <codedmart> cocreature: Ah maybe I am being dumb. I think I get what you mean.
09:21:23 <codedmart> Thanks!
09:22:01 <cocreature> codedmart: if you really have no idea what to expect, then just decode to a "Map Text Value" or something like that
09:22:07 <mud> codedmart: Is there a short list of them, or is it really just you can't possibly have any idea?
09:23:04 <codedmart> No I am overthinking it. I can muster up a list of possible values. I was trying to think more cleverly or not cleverly :).
09:34:54 <Welkin> I never go on reddit, but today I did out of curiosity, and found more stupid drama
09:35:22 <Welkin> I'm well insulated from all of the community drama because I don't read github issues on popular packages nor do I read reddit (ever)
09:35:25 <Welkin> but wtf?
09:35:43 <Welkin> more segmentation? something about splitting off from hackage?
09:36:09 <Welkin> somewhat reminds me of the haskell-lang.org disaster
09:36:45 <Clint> you should always read all github issues on everything
09:37:35 <Welkin> I don't because they are filled with self-important whiners
09:38:27 <Welkin> it seems like newcomers are the first to see this kind of crap
09:38:40 <nicknight> Welkin: cn we chat in redit?
09:38:41 <Welkin> I don't even know about any of it
09:38:56 <Welkin> no, I don't use reddit
09:42:19 <Welkin> or things like the AMP and FTP, which I wouldn't have even noticed (or cared about) unless someone mentioned them
09:42:37 <Welkin> over-reactions to everything
09:42:58 <Welkin> or stupid ideas like forking/splitting the community
09:45:47 <bwe> Rembane: Do you mean https://mitpress.mit.edu/sicp/full-text/book/book.html?
09:47:48 <infinisil> Welkin: tbh it seems you're overreacting a bit right now, reddit has some really nice communities, and stuff like you mention happen all the time in every corner of programming
09:48:16 <Welkin> how is using github to host packages any better than god damn npm (which a single user famously broke for millions of people by removing their github repo)?
09:48:54 <Welkin> I'm only annoyed to find out that these things are still happening
09:49:16 <infinisil> Welkin: it probably won't get through anyways
09:50:04 <infinisil> wait but they actually want to use a github repo to host the built packages themselves?
09:51:06 <infinisil> that does sound stupid if true. But ideas is what brings programming forward, even though 99% are shit :)
10:02:02 <Zemyla> It really is a shame that laziness and dependent types really aren't compatible.
10:03:29 <fiatjaf> what is the double version of <$>?
10:03:40 <fiatjaf> something like `Functor f => (a -> b -> c) -> f a -> f b -> f c`?
10:03:49 <cocreature> :t liftA2
10:03:52 <lambdabot> Applicative f => (a -> b -> c) -> f a -> f b -> f c
10:04:05 <fiatjaf> why do you know that and hoogle doesn't?
10:04:20 <monochrom> I am smarter than hoogle.
10:04:38 <monochrom> OTOH hoogle has read more packages than I have
10:04:42 <cocreature> http://hoogle.haskell.org/?hoogle=Applicative%20f%20%3D%3E%20(a%20-%3E%20b%20-%3E%20c)%20-%3E%20f%20a%20-%3E%20f%20b%20-%3E%20f%20c
10:05:43 <infinisil> Zemyla: why are they not?
10:05:58 <monochrom> Perhaps if you insist on Functor you won't get the one that needs Applicative
10:06:26 <fiatjaf> that's what has happened here
10:06:35 <fiatjaf> thank you, cocreature and monochrom.
10:07:32 <monochrom> Oh heh omitting the class doesn't help either.
10:07:45 <cocreature> fiatjaf: fwiw if you want to use the type search, the old hoogle might be a better choice https://www.haskell.org/hoogle/?hoogle=Functor+f+%3D%3E+%28a+-%3E+b+-%3E+c%29+-%3E+f+a+-%3E+f+b+-%3E+f+c
10:07:55 <atchoum> hello. I found a book on javascript functional programming, I found it really interesting since it has kind of a bottom-up approach, that is really different from almost all haskell tutorials. Here is the thing: https://github.com/MostlyAdequate/mostly-adequate-guide
10:08:26 <atchoum> It is also very interesting for a javascript programmer.
10:08:31 <parsnip> ooohhhhh, so if i do `stack exec hoogle`, then i get more types in haskell-mode?
10:08:43 <Welkin> you can't really do functional programming with javascript. More like untyped lamda calculus
10:08:48 <Welkin> lambda*
10:09:43 <Zemyla> infinisil: Well, because dependent typing is reliant on values being proofs of valid types, and I don't think the compiler will accept a proof of the form "I'll get back to you on that".
10:10:03 <monochrom> I thought every tutorial of every language were bottom-up?
10:10:34 <monochrom> Because they all tour you through basic constructs rather than starting with a complete program.
10:10:38 <atchoum> everything is relative
10:10:48 <parsnip> atchoum: here are several aspects of FP: https://en.wikipedia.org/wiki/Functional_programming#Concepts
10:11:26 <atchoum> When I say bottom up it's more like : Haskell tutorial goes directly into using FP abstractions while this tutorial takes it time to build such abstraction with JS code.
10:12:03 <parsnip> i think javascript does not have referential transparency, for instance.
10:12:20 <atchoum> Interestingly enough, building a thing is often more rewarding in term of understanding than just using it directly.
10:12:41 <monochrom> Haskell tutorials that go "directly" into using FP abstractions also teach and build them bottom-up.
10:12:43 <atchoum> parsnip: don't worry, this is covered by the tutorial I spoke of.
10:12:50 <monochrom> So the real difference is fast vs slow.
10:12:51 <parsnip> ah
10:14:13 <monochrom> As in, 1 chapter of 3 sections, vs 3 chapters.
10:14:20 <Welkin> atchoum: that doesn't make any sense
10:14:30 <dexterfoo> i have an exception/errors occuring on a background forkIO thread. how can i have it printed to the console like a regular error?
10:14:43 <Welkin> "haskell tutorials start with haskell, but this js tutorial starts with js"
10:14:44 <Welkin> what?
10:15:08 <atchoum> Welkin: actually this tutorial is building Either and Maybe monads in javascript
10:15:13 <Welkin> I am writing a haskell course/book right now
10:15:21 <Welkin> I noticed there are 2 major approaches
10:15:37 <Welkin> some are written morel iek a reference guide that just goes through all of the basic concepts in order
10:15:38 <atchoum> and the author is obviously really knowledgeable about Haskell since he's using standard type signature for all its functions.
10:16:03 <Welkin> others start with an idea for a program in mind, and walk you through how to build that program, teaching you the bare minimum concepts along the way
10:16:32 <Welkin> trying to "write haskell" in javascript is incredibly painful and ugly. At that point, just use real haskell
10:17:13 <Welkin> I have tried to write a tutorial on haskell for javascript programmers
10:17:17 <Welkin> I gave up on that early
10:17:46 <atchoum> Mmh yes. You know you make me think about something. In my short professional life, There was very little people acknowledgeable about functional programming concepts. So the target for any FP book is most likely 90% of ppl that are not used to the fundamental concepts.
10:17:47 <Welkin> it just doesn't make sense trying to explain haskell in terms of another language
10:18:22 <Welkin> the only reason using one programming language to teach another often works is because they are both the same language!
10:18:35 <Welkin> javascript for python programmers works because they are almost the same language
10:18:38 <atchoum> Welkin: another fact is that Haskell is using a lot (exclusively maybe) of concepts coming from the academic world.
10:18:43 <Welkin> they are both algol-derivatives
10:18:51 <Welkin> haskell is a completely different language family
10:19:00 <atchoum> But those concepts don't belong to Haskell. Actually Haskell could be thought as a direct transcript of those concepts.
10:19:10 <monochrom> Hey there was a time OOP was purely academic. I read those research papers.
10:19:26 <nisstyre> Haskell is probably "descended" from the language ISWIM created by Peter J. Landin
10:19:29 <monochrom> And I saw those PhD theses. Yes there was a time you needed a PhD to do OOP.
10:19:50 <Welkin> yes, OOP began in academia by professors who wanted to masturbate all over programming for fame
10:20:01 <atchoum> you saw
10:20:06 <monochrom> Did you also know that the bloody while-loop was once academic too?
10:20:08 <Welkin> well, not Alan Kay/Samlltalk oop
10:20:08 <atchoum> where that led us :) ?
10:20:25 <nisstyre> even COBOL began as an academic excercise
10:20:37 <nisstyre> well technically a military research project
10:20:40 <Welkin> I think it's funny when anyone says that haskell is "too academic"
10:20:46 <monochrom> So yes there was a time real-world programmers sworn by GOTO.
10:20:57 <Welkin> well, it is academic when you are using it to illustrate concepts in a mathematics research paper! of course!
10:21:08 <nisstyre> https://en.wikipedia.org/wiki/ISWIM
10:21:43 <Welkin> which is why my course/book teaches how to write a video game in haskell
10:22:16 <Tuplanolla> What unit is academicity measured in?
10:22:35 <Welkin> Tuplanolla: postdocs
10:22:46 <jpittis> Anyone here have experience with the async lib? Specifically, with using link and link2?
10:23:41 <sedeki> Welkin which book is that?
10:23:47 <mniip> Tuplanolla, citations per unit area
10:23:59 <nshepperd1> Haskell is too academic. We must program only using methods that were never studied by academics
10:24:02 <Welkin> sedeki: haskellroguelike.com
10:24:21 <Welkin> the content up right now is being replaced
10:24:33 <Welkin> I wasn't satisfied with those first 3 chapter, so I am rewriting them
10:24:35 <Welkin> videos to come soon
10:25:15 <Tuplanolla> Python is quite academic by either metric due to SciPy, but I still don't see people calling it academic.
10:25:59 <[exa]> even assembly was once academic
10:26:20 <Welkin> you kids and your assembly! Pah! REAL programmers use machine code!
10:26:58 <monochrom> Assembly code was once academic, too.  In fact, during that time, all of computing was academic.
10:27:38 <Welkin> what people often mean by "academic" is "not useful/practical in real world situations"
10:27:45 <Welkin> like building a web app, or a video game
10:28:17 <monochrom> I agree with that meaning. All of my sentences above use that meaning.
10:31:21 <Tuplanolla> I would much prefer it if people said "useless" when they actually mean "useless".
10:32:50 <monochrom> I know why they say "academic" for that. It's because they hated school, so they will take every opportunity to insult academia.
10:33:15 <Welkin> never confuse school with learning
10:33:56 <Welkin> and academia is a shitshow
10:34:19 <duncan^> Education is very important, it is the only way out of poverty for a lot of people.
10:34:51 <Tuplanolla> It's the same thing as saying "tax burden" when just "taxation" would do. Framing is a dishonest but effective way to influence the mindset of the reader.
10:35:33 <Welkin> this is one reason why I am going to avoid using words like "functor" and "monad"
10:35:53 <Welkin> instead, I will teach the concepts intuitively, then say "by the way, we call this thing a functor"
10:35:58 <dexterfoo> eh... you can't learn/teach haskell without using the word "monad"
10:35:59 <nisstyre> jpittis: what is your question about it?
10:36:04 <Welkin> yes you can
10:36:11 <nisstyre> jpittis: you know the author of that library wrote a book on Concurrency
10:36:18 <[exa]> Welkin: that's how academia is currently teaching it btw
10:36:18 <Welkin> I can come up with new names for everything if I want to
10:36:46 <nisstyre> jpittis: you can actually read it for free online http://chimera.labs.oreilly.com/books/1230000000929/index.html
10:36:52 <Welkin> "you could have invented monads" is still my favorite monad tutorial
10:37:45 <nisstyre> jpittis: link is just for exception handling
10:37:52 <nisstyre> so that you can handle it in one convenient spot
10:38:26 <dexterfoo> Welkin: and there is the word "monad" right in the title
10:38:44 <Welkin> dexterfoo: your point?
10:38:54 <monochrom> I'm pretty sure "avoid" doesn't mean "never use".
10:39:51 <Welkin> I found the monad explanation in LYAH to be one of the worst
10:39:52 <nisstyre> jpittis: I think you have to explicitly handle the exception somewhere in your main thread, it's asynchronous
10:39:58 <Welkin> for some reason, it really confused the hell out of me
10:40:05 <Welkin> and there were 2 chapters on it
10:40:18 <nisstyre> LYAH isn't a good Haskell book
10:40:36 <Welkin> yes, but it is still an important book for now
10:40:44 <Welkin> because without it, I would have never given haskell a try
10:41:12 <cocreature> lyah is a great book for getting people interested in learning more about Haskell
10:41:25 <ddellacosta> my favorite example of teaching monads without using the word "monad" is Graham Hutton's chapter on Functional parsers from his "Programming in Haskell." I'm not sure if the second edition has the same format but I realized after getting to the end of it and going back to monads that I suddenly understood how they worked much better than before.
10:41:37 <nisstyre> ok I actually didn't know about asynchronous exceptions
10:41:41 <Welkin> I admit I thought haskell was "too academic" and "not useful", but after trying clojure and hating it, I thought "fuck it, I'll try haskell, just to learn *Real* functional programming, but then I'll find another language that is actually *useful*"
10:41:42 <nisstyre> it's a bit hard to wrap your head around
10:41:44 <nisstyre> https://simonmar.github.io/posts/2017-01-24-asynchronous-exceptions.html
10:41:56 <Welkin> little did I know that haskell was actually incredibly practical
10:42:37 <atchoum> Each time I say academic I'm not meaning useless.
10:42:47 <atchoum> And I loved school.
10:42:48 <Welkin> I am trying to do something similar with my Haskell Roguelike book. Make it approachable to complete beginners, but actually help them learn it properly, unlike LYAH
10:42:57 <dexterfoo> yeah. also for me, after figuring out IO, moving to Parsec was mind-blowing
10:43:25 <Welkin> also without telling them that they need to study hard for 3 months before they can write a program. Just throw them in and start doing it
10:43:56 <atchoum> I was merely saying that high level abstract constructs may need some justification and ground building if explained to programmers with little or no FP background.
10:44:08 <nisstyre> I think there's a giant hurdle for people to go from writing the factorial function to writing a web app or something
10:44:21 <nisstyre> the only book that bridges that gap used to be RWH
10:44:40 <jpittis> nisstyre: I've been looking for a link function that would cause the child to receive the exceptions of the parent but not the other way around.
10:44:59 <jpittis> nisstyre: I've read a lot of that book already.
10:45:01 <atchoum> By the way, I think the concept of object-oriented programming is actually maybe more easy to tell about than Type-Class and Category Theory. But it can just be me. And eventually, once I will have a good grasp of both, my opinion may be totally changed.
10:45:01 <nisstyre> jpittis: I think you'd need to reorganize your code
10:45:04 <Welkin> nisstyre: I thought about starting with a web app, but decided on a video game, because you can start writing it immediately without understanding monads from day one
10:45:19 <nisstyre> jpittis: have you read the source of async?
10:45:28 <nisstyre> to see how it implements it
10:45:36 <jpittis> nisstyre: Yes. It sounds like implementing a similar link function would be possible.
10:45:37 <Welkin> atchoum: you need zero knowledge of category theory for haskell
10:45:39 <monochrom> Yes OOP is extremely easy to tell and teach. I agree with that.
10:45:43 <nisstyre> jpittis: go for it then imo
10:45:52 <nisstyre> maybe even create a pull request for the library
10:46:07 <monochrom> The observation from my colleagues who teach OOP is that the students get it all wrong nonetheless.
10:46:13 <jpittis> nisstyre: I guess I was wondering if there was already a "standard" way to do this sort of thing. Guess not! :)
10:46:26 <Welkin> OOP is taught using an incorrect model of the world
10:46:29 <monochrom> So I don't think "easy to tell" is a meaningful metric.
10:46:33 <ddellacosta> monochrom: I would argue it's extremely _hard_ to teach because it doesn't have a coherent, consistent definition
10:46:33 <Welkin> it's all a big mess
10:46:37 <Welkin> and doesn't make sense
10:46:41 <nisstyre> jpittis: I don't think async exceptions are a well known thing
10:46:49 <nisstyre> as evident by me not even knowing about it
10:46:56 <jpittis> :P
10:47:01 <Welkin> "Car inherits from MovableObject which inherits from Object"
10:47:02 <Welkin> WHAT?
10:47:08 <Welkin> how does that have anything to do with the real world?
10:47:11 <monochrom> Well, my colleagues have of course agreed upon a coherent, consistent definition. And the students still get it all wrong.
10:47:13 <nisstyre> jpittis: it seems a bit like it could make your code really ugly
10:47:20 <ddellacosta> monochrom: fair enough.
10:47:21 <nisstyre> unless you structure it up front to handle any exception
10:47:36 <Tuplanolla> I still have no clue how the mvc architecture is supposed to work in object-oriented programming.
10:47:50 <nisstyre> Tuplanolla: my favourite MVC framework is Phoenix
10:47:52 <nisstyre> (Elixir)
10:48:12 <atchoum> Welkin: it's funny to think that the car analogy is exactly what I had in mind.
10:48:21 <jpittis> nisstyre: I'm looking for something not ugly. I know how to do something similar in an ugly way. The whole reason I'm learning Haskell is cause it sounds like you have good tools for building concurrency abstractions!!! :D
10:48:31 <Tuplanolla> I've implemented two systems with it, but that didn't help much.
10:48:34 <atchoum> But object oriented is not about inheritance I think.
10:48:42 <atchoum> Am I wrong ?
10:48:42 <nisstyre> jpittis: yeah but purity gets in the way sometimes
10:48:46 <Welkin> atchoum: it is today
10:48:54 <Tuplanolla> (I mean mvc in general.)
10:48:57 <Welkin> the original smalltalk formulation was about message passing (like erlang)
10:49:04 <Welkin> but the OOP we have today is all about classes and objects
10:49:09 <Welkin> thanks java
10:49:15 <jpittis> nisstyre: I'll report back! Thanks :)
10:49:15 <nisstyre> jpittis: in Erlang/Elixir, they use something called GenServer which is basically a process where you have functions that take the previous state, some other parameters, and return the fresh one
10:49:26 <nisstyre> or initialize the state
10:49:35 <jpittis> Sure yeah. THey have similar link functions
10:49:36 <nisstyre> it's purely functional state implemented using concurrency
10:49:40 <nisstyre> rather than monads
10:50:04 <nisstyre> so you're actually calling a "server" with API methods
10:50:09 <nisstyre> and there's no mutability going on
10:50:14 <Welkin> nisstyre: I find pheonix to be a poor clone of rails, NO THANKS
10:50:17 <jpittis> I guess what I need is a way to build a tree of lwts that can be cancelled by just canceling the top level node.
10:50:29 <Welkin> phoenix*
10:50:36 <nisstyre> Welkin: well I dislike the way Rails handles things personally
10:50:50 <nisstyre> convention over configuration usually leads to a lot of grepping through files IME
10:51:00 <jpittis> This is a common pattern for example in the Go world where you pass around a context down the stack and all lwts cancel when the context is cancelled.
10:51:01 <nisstyre> I like being able to just create a module anywhere
10:51:18 <nisstyre> jpittis: yeah it's kinda similar
10:51:34 <Welkin> when I had to work on a huge rails codebase, I was often asking myself "what the hell is this function? Where did this come from? No import statements? Better use grep on the entire 50,000 loc codebase"
10:51:36 <nisstyre> but OTP has a lot more stuff
10:51:49 <nisstyre> because it was originally for telco switches
10:52:00 <Welkin> "oh, it doesn't exist. Maybe rails autogenerates it at runtime? fuck me"
10:52:04 <nisstyre> Welkin: exactly
10:52:04 <jpittis> nisstyre: I was thinking of writing a writer kinda monad that would record handles of async threads into a list so you could cancel them all at the end.
10:52:10 <nisstyre> Welkin: giant pain the ass
10:52:19 <nisstyre> Phoenix doesn't do that
10:53:06 <nisstyre> jpittis: that could be useful, doesn't the async lib have something like that already?
10:53:17 <jpittis> No
10:53:49 <nisstyre> okay
10:53:52 <nisstyre> go for it
10:53:54 <jpittis> I guess in erlang does something similar with link. Link is bidirectional but you can have a handler that intercepts the kill message and chooses not the clean.
10:54:13 <jpittis> Whereas the link in the Async lib does not give you that ability
10:54:27 <nisstyre> jpittis: yeah
10:54:32 <jpittis> anywhooo. Seems like there's room for improvement! I'm excited to learn more
10:54:36 <nisstyre> awesome
10:54:43 <nisstyre> me too, I want to dig more into Erlang
10:54:43 <jpittis> Thanks nisstyre
10:54:47 <nisstyre> good luck
10:54:59 <Welkin> erlang is cool
10:55:05 <Welkin> but it has a very specific purpose
10:55:41 <nisstyre> Welkin: I'm building a distributed app and hopefully going to make use of WebRTC with a STUN/TURN server
10:55:50 <Welkin> STUN?
10:55:53 <nisstyre> I figured Elixir/Erlang would be good
10:56:08 <nisstyre> Session Traversal Utilities for NAT
10:56:19 <nisstyre> it allows you to negotiate a direct connection between clients
10:56:21 <nisstyre> if possible
10:56:23 <nisstyre> otherwise it uses a relay
10:56:41 <Welkin> what I have seen and heard (and had people in #erlang tell me) is that erlang is generally used as *infrastructure*, but your application is not written in erlang. Erlang is only the routing layer.
10:56:42 <Rembane> bwe: Yes, that's the book.
10:57:22 <nisstyre> Welkin: yes exactly
10:57:33 <nisstyre> the clients are not in Erlang
10:57:37 <nisstyre> they're Javascript
10:57:48 <nisstyre> the relay server is going to be in Elixir
10:58:06 <nisstyre> and any other housekeeping functions
10:58:19 <Welkin> Erlang + C is a common combination
10:58:29 <Rembane> Welkin: Why C?
10:58:32 <nisstyre> if I needed C I'd be comfortable using it
10:58:33 <Welkin> it is fast
10:58:51 <Welkin> Erlang calls the C
10:59:18 <Welkin> Erlang is used in embedded systems a lot if I recall
10:59:30 <nisstyre> Welkin: Erlang is really really good at spinning up processes and distributing the state for them
10:59:33 <nisstyre> that's basically what I need
10:59:55 <nisstyre> Welkin: it was created for telco switches
10:59:59 <nisstyre> for Ericsson
11:00:00 <Welkin> yes
11:00:03 <nisstyre> so yeah
11:00:07 <Welkin> I know about the history
11:00:09 <nisstyre> if you ever read the book Coders at Work
11:00:16 <nisstyre> Joe Armstrong is interviewed
11:00:16 <Welkin> I have Joe Armstrong's book
11:00:24 <nisstyre> what's the book called?
11:00:26 <Welkin> it's how I have been learning Erlang
11:00:29 <nisstyre> oh
11:00:30 <Welkin> Programming in Erlang
11:00:39 <nisstyre> I got the Introduction to Erlang one or whatever
11:00:42 <nisstyre> because it's shorter
11:00:54 <Welkin> in #erlang I was told that Learn You Some Erlang is the best book
11:00:55 <nisstyre> I generally learn better by experimentation
11:01:14 <Welkin> I assumed it was going to be more like LYAH (funny, but not a good book)
11:01:22 <Franciman> Hey people, sorry to interrupt, I have a question about a concurrent system
11:01:23 <Welkin> apparently it is only in the style of LYAH, but is very well written
11:01:40 <nisstyre> Franciman: what's your question?
11:01:51 <Franciman> sorry I was writing, but pressed Enter 2 fast
11:02:17 <Franciman> I have some data in a SQLite database. I have a couple of threads downloading data. After the download finishes, I need to update the database
11:02:24 <Franciman> how would you structure the code?
11:02:30 <nisstyre> well sqlite is single threaded
11:02:35 <nisstyre> so you can't do concurrent inserts
11:02:42 <Franciman> Have like one thread doing sqlite stuff
11:02:45 <nisstyre> so you'd have to collect all the data into a list or array or something
11:02:48 <Franciman> reding from a queue?
11:02:49 <nisstyre> then run the updates
11:02:53 <Franciman> reading*
11:02:54 <nisstyre> or a queue yeah
11:03:04 <nisstyre> you could have one writer thread
11:03:06 <nisstyre> and multiple readers
11:03:35 <Franciman> the readers would the the threads writing to the DB?
11:03:37 <nisstyre> this is a pretty common setup
11:03:43 <nisstyre> Franciman: no
11:03:50 <nisstyre> they would download your data and push it to a queue
11:03:57 <nisstyre> the writer thread would block on reading from the queu
11:04:04 <nisstyre> and try to update the db for each item
11:04:05 <Franciman> ah! Ok
11:04:13 <Franciman> thanks
11:04:16 <nisstyre> that way only one thread is writing to sqlite
11:04:21 <nisstyre> but you get multiple threads downloading
11:04:22 <Franciman> now I need to figure out some sort of consistency
11:04:43 <nisstyre> what do you mean by consistency?
11:04:48 <Franciman> meaning that: if something finishes to download and save on the disk, the db must be consistent
11:04:49 <nisstyre> like you don't want duplicates?
11:04:55 <nisstyre> ah
11:05:00 <Franciman> even in case the application is interrupted (not with a kill)
11:05:12 <nisstyre> I'm not sure, I think that would depend on the sqlite library
11:05:13 <Franciman> (kill -9 of course)
11:05:21 <nisstyre> does it support transactions?
11:05:23 <Welkin> never kill -9 o.o
11:05:24 <nisstyre> I forget
11:05:26 <Welkin> use pkill
11:05:34 <nisstyre> yeah use pkill -f whatever
11:05:37 <nisstyre> that's how I do it
11:05:48 <nisstyre> -f just lets you pass the name of the command
11:05:55 <nisstyre> and it will fuzzy match
11:06:07 <nisstyre> or at least search for that word
11:06:20 <nisstyre> pgrep -fl is useful to run first
11:06:24 <nisstyre> to see what it matches
11:06:34 <Franciman> sqlite is acid
11:06:35 <Tuplanolla> @hackage bounded-tchan -- This should help with the queuing, Franciman.
11:06:36 <lambdabot> http://hackage.haskell.org/package/bounded-tchan -- This should help with the queuing, Franciman.
11:06:49 <Franciman> thanks Tuplanolla
11:06:53 <Franciman> and thanks nisstyre
11:06:56 <nisstyre> no prob
11:07:27 <Tuplanolla> Of course I had to link the deprecated version.
11:07:35 <Tuplanolla> @hackage stm-chans
11:07:35 <lambdabot> http://hackage.haskell.org/package/stm-chans
11:07:38 <Franciman> ahah, thank you
11:07:49 <Franciman> being bounded makes performance easier?
11:08:00 <Tuplanolla> That it does.
11:08:03 <nisstyre> keeps you from getting out of memory
11:08:17 <Franciman> it also fits my case since the number of downloaders is fixed
11:08:25 <Franciman> well thanks
11:25:04 <robstr> I'm using emacs with intero. What is there a way to reformat a file?
11:45:42 <n_blownapart> http://lpaste.net/362005 hi I'm having a hell of a time understanding the recursion in this program. the traceShow is not giving me the results I want. How can we follow the trace better?
11:49:35 <sm> n_blownapart: why not put a labelled trace in each case so you can follow it
11:50:35 <sm> I'd put it right of the =, lest I get confused
11:51:47 <n_blownapart> sm thanks , a labeled trace?
11:52:01 <unpurple> Does anyone know a standard method for creating a forum website using haskell as the backend?
11:52:06 <dmwit> How can we answer this question if you do not say what results you want?
11:52:34 <dmwit> unpurple: There are several web frameworks/libraries available. I don't know of any out-of-the-box forum written with them.
11:52:36 <n_blownapart> dmwit I want to be able to see exactly how the recursion works step by step
11:53:04 <dmwit> n_blownapart: I suggest evaluating it by hand, rather than trying to find a way to get the machine to tell you what it did.
11:53:37 <Welkin> unpurple: I wanted to write a message board app a while ago using haskell, because all of the existing ones are disappointing, but no, there are no off the shelf solutions
11:53:59 <Welkin> you can easily create your own using (most likely) servant + postgres as your backend
11:54:01 <dmwit> n_blownapart: I suggest this for two reasons: 1. it is very educational 2. I believe it will be a significant effort to get the machine to tell you what you want.
11:54:04 <unpurple> dmwit: thats fine, I just included the forum part to be more specific about the purpose. I am not looking for out of the box solutions, just a good starting point for dynamic websites
11:54:11 <Welkin> or if you want server rendering, yesod is a decent choice
11:54:18 <unpurple> ok ill check those out
11:54:29 <dmwit> unpurple: scotty, yesod, snap are all popular choices
11:55:05 <unpurple> i will look at those as well
11:55:07 <Welkin> with servant you will need a front-end client like React (or for a haskell solution, Miso or Reflex)
11:55:20 <n_blownapart> dmwit, thanks I don't know how to write it out. with other recursions I can write it out. for example , I wrote out the output for this : (one moment)
11:57:11 <dmwit> n_blownapart: TaPL has a solid introduction to the evaluation rules for lambda calculi. I highly recommend it.
11:57:13 <dmwit> ?where TaPL
11:57:13 <lambdabot> "Types and Programming Languages" by Benjamin C. Pierce in 2002-02-01 at <https://www.cis.upenn.edu/~bcpierce/tapl/>
11:57:40 <dmwit> (Also a great deal of other excellent material on programming language design and implementation.)
11:59:42 <n_blownapart> dmwit thanks kindly. correction, this is the book's output, but I could replicate with different input once I read through. the point is I fully understand this output: http://lpaste.net/362006  I'll check out that article/book
12:00:26 <dmwit> The rules are precise and unambiguous, and if you understand the statements of the rules you should be able to apply them "mechanically" (without real thought, just matching this syntax with that syntax and then finding out what the rule says to do next). Afterwards you can engage your brain and try to spot patterns, but the evaluation itself should be basically brainless.
12:01:55 <sm> n_blownapart: I meant something like https://hastebin.com/neqejiquce.py . Will show you what's happening PDQ
12:02:16 <n_blownapart> thanks very much
12:04:22 <n_blownapart> sm I can't even understand the code for those traces
12:04:47 <sm> eg ?
12:06:42 <n_blownapart> thanks holdon
12:06:49 <n_blownapart> hold on pls
12:07:43 <mikail_> why doesn't Haskell have a formal specification?
12:09:18 <hpc> define "formal"
12:09:39 <hpc> it's defined to the same level as many other languages, and with many fewer instances of undefined behavior or implementation-specific behavior
12:11:36 <mikail_> hpc: have you come across Plutus?
12:12:07 <mikail_> I'm watching this youtube video https://www.youtube.com/watch?v=Fs2S2wm7aEM&list=WL&index=60
12:12:28 <mikail_> In it he says that Haskell does not have a formal specification
12:12:40 <n_blownapart> sm
12:12:53 <mikail_> So he's built this new language called Plutus which (to me) looks virtually identical to Haskell
12:13:01 <n_blownapart> could you paste that exactly how it would run? I'm getting this error:
12:13:16 <mikail_> AFAIK, he only did this because Haskell did not have a formal specification!
12:14:09 <n_blownapart> A: undefined ; *** Exception: Prelude.undefined; Callstack (from HasCallStack): error, called at libraries/base/GHC/Err.hs ...
12:16:05 <hpc> yeah, it looks identical to me as well
12:16:32 <hpc> what's the timestamp where he says that?
12:16:54 <sm> n_blownapart: yay! working perfectly. Your trace shows it failing on the first (undefined) case.
12:16:58 <[exa]> docs state that Plutus is eagerly evaluated?
12:17:00 <lyxia> mikail_: check out this thread https://mail.haskell.org/pipermail/haskell-cafe/2017-December/128298.html
12:17:15 <sm> tip: put the more specific cases first
12:17:36 <n_blownapart> sm I don't understand sorry
12:17:39 <mikail_> if you watch at 1:40 he explicitly says Haskell lacks a formal specification (not saying he is a correct though)
12:17:54 <mikail_> I am just wondering why he said it when others are saying otherwise
12:18:25 <mikail_> Philip Wadler helped defined it
12:18:26 <sm> n_blownapart: how are you calling the function ?
12:18:31 <lyxia> mikail_: Haskell does lack a formal specification
12:18:56 <mikail_> lyxia: so why did hpc say it does have one?
12:19:01 <mikail_> this is where I get confused
12:19:02 <[exa]> mikail_: there are various levels of 'formal'; I guess he wants the real auto-verifiable formal specification like cakeML has
12:19:12 <mikail_> ah right
12:19:14 <hpc> i didn't say it has a formal specification
12:19:25 <hpc> so much as asked for clarification
12:19:40 <hpc> but based on that -cafe link, it sounds like he wanted something he could run in say, coq
12:19:42 <mikail_> hpc: sorry, my bad
12:19:48 <hpc> and get back an answer of "this implementation is valid"
12:20:15 <sm> n_blownapart: I have to go. But in your paste, the first case (line 6, adder' m n) accepts any m and n. So you should expect that will be evaluated, giving undefined and ending the program
12:20:16 <hpc> in which case that thread is a good explanation of the reasons behind not having one for haskell
12:20:26 <mikail_> ok, so it is as hpc mentioned before, it's how formal you want your formal specification to be
12:20:41 <mikail_> ok I will have read of that thread
12:20:55 <n_blownapart> sm thanks a lot I will work on it, but don't understand how you wrote the trace lines
12:21:14 <Tuplanolla> Perhaps you would be better served by "unambiguous definition". mikail_.
12:21:21 <mikail_> basically I want to write smart contracts on the Cardano network and this is the language that has been developed for it. When I looked at it, it looked exactly like Haskell
12:21:48 <hpc> i would consider the haskell report to be formal in a more stylistic sense
12:22:10 <hpc> in that you can contrast it with a lot of dynamic languages where the spec is "does it pass these unit tests"
12:22:25 <mikail_> a general question to the main contributors here, have you not considered moving off of IRC and to something like Telegram Messenger?
12:22:45 <Tuplanolla> For what purpose?
12:22:53 <mikail_> hpc: yes I see your point
12:22:54 <hpc> i think slack was considered at one point, and it couldn't self-organize
12:22:55 <sm> n_blownapart: before any expression , you can put "trace (some string) ..."
12:23:11 <mikail_> I used Slack at work - it's crap
12:23:59 <sm> I recommend becoming a wizard with trace, it's quite valuable
12:24:05 <hpc> for all that irc is an obscure old-people protocol, it's still probably the most universally accessible way to do real-time communication
12:25:05 <hpc> it's like keeping the mailing lists around instead of organizing around the subreddit
12:25:27 <sm> irc is an old protocol, not an old-people protocol
12:25:48 <sm> there is a *slight* difference :)
12:25:53 <hpc> sm: yeah ;)
12:26:23 <hpc> i knew someone who when i told them i was on irc, was surprised and asked "is it really still around?"
12:26:36 <ddellacosta> does anyone know how I can get pandoc to generate a CSS file for styling a code block when generating html? I can see that it's correctly formatting the code, I just can't get pandoc to generate the CSS file, or at least I don't see it being generated in the hakyll output
12:27:03 <ddellacosta> sorry I should have been clear in the first part of my question: this is all via hakyll
12:27:46 <sm> ddellacosta: IIRC pand doesn't generate that, you have to copy it from somewhere
12:28:01 <ddellacosta> https://groups.google.com/d/msg/hakyll/o7kRV0TcAok/6j-EIKI5BQAJ <- some of the directives specified there, which presumably are relevant, don't seem to exist in the more recent versions of the pandoc lib
12:28:08 <sm> maybe it's in the highlighting-kate or skylighting packages
12:29:21 <ddellacosta> sm: while it's not clear from the docs unfortunately, the link above implies that it's generated via pandoc...?
12:29:57 <ddellacosta> or, I'm not looking in the right place in the docs
12:30:11 <sm> I haven't read the link, but there are many of these stylesheets (different themes)
12:30:54 <ddellacosta> okay. I can't find them in the skylighting code at least, I'll poke around further I guess
12:31:25 <sm> here's some. https://github.com/jgm/highlighting-kate/tree/master/css
12:32:55 <dbnoob> what is haskellers favourite db ? They use postgres or Mariadb ?
12:33:00 <ddellacosta> sm: thanks
12:33:42 <mikail_> OK I read the thread, and that OP was after a formal specification written in a proof assistant such as Coq, Agda etc
12:34:07 <mikail_> I guess that's what the youtube video dude is after as well and the reason why he said Haskell doesn't have a formal specification
12:35:25 <woodson> Anyone familiar with servant? I am trying to get an endpoint to render a html view but when a request json request i want it to return a json object
12:35:34 <woodson> how its just return the markup
12:35:43 <woodson> here is the code http://lpaste.net/362009
12:36:24 <mikail_> sm: true but I doubt the next generation of Haskell coders will come here (or even know about IRC) - they use the latest comms tools to communication (e.g. Telegram, WhatsApp, Slack)
12:36:27 <woodson> I have define the instance ToJSON for it to encode it in json but nothing
12:38:58 <[exa]> mikail_: irc doesn't require any weird registration. Choose nick and go. That's an actual feature.
12:40:21 <Tuplanolla> The competing communication systems don't offer most of the essential missing features either, like math typesetting or programming language interpreters.
12:40:36 <exio4> mikail_: what's 'the nex generation of Haskellers'? when does it start?
12:40:48 <mikail_> exa: neither do Telegram and WhatsApp - as you know you just need your mobile # and away you go.
12:41:05 <mikail_> exio4: hahaha - you know what I mean
12:41:19 <MarcelineVQ> you need a phone to use those?
12:41:42 <mikail_> MarcelineVQ: c'mon mate
12:41:46 <[exa]> mikail_: mobile # lol
12:42:20 <mikail_> I can see I'm talking to hardened IRC users and enthusiasts here...
12:42:20 <[exa]> mikail_: also, the GUI is unbeatable
12:42:50 <exio4> mikail_: I am a young Haskeller, known it for <= 4 years, etc, and I am still here :)
12:42:56 <exio4> mikail_: trying to see where you draw the line
12:43:05 <geekosaur> mikail_, there;s more to it than shiny-hotness-of-the0week
12:43:25 <mikail_> ok guys I'm not going to win this argument
12:43:37 <mikail_> I'll still come back here tho if I need help - hahaha
12:43:44 <mikail_> you are a good bunch
12:43:51 <[exa]> mikail_: IRC is the favorite technology for having predicted the 'final disappearnce'
12:43:56 <geekosaur> I am watching another community I'm in start to implode because core devs moved to discord and contributors have problems ranging from accessibility issues to what happens when the vulture capitalists buy it and start selling its users as data
12:43:57 <eugene_> Hello! I'm getting random segmentation faults in a program compiled with ghc-7.10.3. Core dump indicates the segmentation fault happens in the GC (see https://pbs.twimg.com/media/DUkwXaeWsAA_0vp?format=jpg) The program uses libpq, so I wonder could it be possible that it could interfere with the GC-managed memory?
12:46:18 <[exa]> geekosaur: "Discord is a proprietary freeware VoIP application designed for gaming communities." --- I guess the project is dead. :]
12:46:38 <geekosaur> wut
12:47:28 <[exa]> (quote from wikipedia)
12:57:30 <alp> woodson, looking at your code
12:58:59 <alp> woodson, looks good to me. could you paste the commands you use to query the app?
13:01:42 <woodson> alp: Thanks for looking at it.
13:01:50 <woodson> alp: Here is the command curl -X GET -H "Content-Type: application/json" http://localhost:8080/home
13:02:11 <woodson> alp: it returns <h1>Hello World!</h1>
13:02:32 <n_blownapart> sm thanks again I'm a wizard at barely working my vim editor
13:02:45 <alp> woodson, you want to set the Accept header, no Content-Type. you'd use Content-Type if your request had a body and you wanted to indicate the mime type of its contents
13:03:13 <alp> so, curl -X GET -H "Accept: application/json" http://localhost:8080/home, should work
13:03:42 <alp> similarly with text/html;charset=utf8 or something along those lnes
13:03:45 <alp> lines*
13:04:29 <reygoch> hey, does anyone know how to "negate" hspec Expectation?
13:04:53 <woodson> alp: let me give it a try, but on the other hand there is something fundamental that I am not getting. I thought that Content-Type: application/json was an accepted value
13:04:53 <reygoch> I'd like to check if certain function doesn't throw an exception
13:05:07 <woodson> alp: What the difference between accept?
13:06:48 <reygoch> there is only `shouldThrow` combinator and I want to check inverse
13:06:49 <geekosaur> woodson, Content-Type is about what you send, Accept is abiut what you receive
13:07:49 <woodson> geekosaur: oh, I thought that Content-Type was for both direction
13:07:57 <woodson> geekosaur: Thanks!
13:08:25 <woodson> alp: Thank you too. I got the response that I wanted.
13:08:39 <alp> woodson, to remember the difference, you can focus on "Accept"
13:08:59 <alp> the client, by sending that header, says what format it is willing to accept for the response
13:09:52 <alp> the Content-Type header of the response is therefore expected to match the one sent in the client's Accept header
13:10:21 <alp> and yeah, a client only sends a Content-Type header when the client's request contains a body
13:12:56 <n_blownapart> ' data Nat = Zero | Succ Nat deriving Show ' when would you use data constructors that are recursive such as these? The example just gives an 'addition' of two 'numbers' like add (Succ (Succ Zero)) (Succ Zero). I'm not sure what's going on. I was so used to working with 'normal' functions, but I can't see the woods from the trees here.
13:15:03 <woodson> alp: Oh ok, so if the I am sending data I would have to just specific "Content-Type" but if I am sending data and also expecting a response
13:15:29 <woodson> alp: Does Accept handle both or would I have to define both Accept and "Content-Type"
13:15:36 <sonOfRa> n_blownapart: maybe a better example is a tree type: data BinaryTree a = Empty | Node a (BinaryTree a) (BinaryTree a)
13:15:36 <n_blownapart> does my question make sense
13:15:55 <sonOfRa> A tree is either Empty, or it is a node containing some data, and a left and right "child tree"
13:16:01 <woodson> alp: Like so -H "Accept: Content-Type: application/json" "Content-Type: application/json"
13:16:28 <sonOfRa> n_blownapart: does that seem clearer as to how this kind of recursion works?
13:17:44 <implementation> n_blownapart: If you have worked with languages like Java or C++ before, then you might know linked lists. In fact, linked lists are quite similar: You have a head of type T (containing the current element) and a tail of type List<T>. That's what happens here too. Zero is like the empty list, and Succ is like a list with a head and a tail, just without the head.
13:18:54 <n_blownapart> sonOfRa, thanks, I went through that problem essentially, I have to review it -- yeah, I haven't been able to discern the recursion in a regular function, and *why* this kind of recursion is used.   thanks implementation I know it follows similar rules, its sort of tripping me out I don't know why
13:19:07 <n_blownapart> discern *between
13:19:43 <n_blownapart> implementation, you must get pinged a lot with that nick  :)
13:20:15 <n_blownapart> I have scanty programming background except for self-learned ^
13:20:38 <sonOfRa> So a (BinaryTree 5 Empty Empty) is a tree that only has a root node. A (BinaryTree 5 (Binary Tree 6 Empty Empty) Empty) is a BinaryTree that has a root node with content 5, a left child that only contains a node with 6, and no further children, and an empty right child.
13:21:30 <n_blownapart> sonOfRa, yeah it is easier to see with the Tree data type
13:21:52 <n_blownapart> I had little trouble following that example couple weeks ago. I'm slowwwwww
13:21:58 <hrnz> :o
13:22:29 <n_blownapart> thanks again
13:37:43 <dexterfoo> anyone interested in play-testing my haskell-powered webgame? playtest happening now: http://beta26.multicave.com
13:38:49 <Welkin> what is it?
13:38:54 <Welkin> and why is everyone named Alice?
13:39:05 <Welkin> Is this a Resident Evil movie universe meme?
13:39:29 <Welkin> dexterfoo: and how do I control it?
13:40:43 <merijn> Welkin: Are you...asking who the fuck Alice is? ;)
13:40:57 <Welkin> oh fuck
13:41:12 <Welkin> this game is a clusterfuck
13:41:13 <Welkin> hahaha
13:41:21 <dexterfoo> Welkin: just click the mouse
13:41:23 <Welkin> Alice and Alice are pushing me out of the way
13:41:26 <Welkin> and I am Alice
13:41:32 <isthatit_> I can't find a good article which explains how to use functionnal patterns for real business cases. Functional patterns like functors, profunctors, bifunctors, arrows, ...
13:41:45 <reygoch> nice game
13:41:55 <Welkin> god damn it
13:41:57 <Welkin> playing with a trackpad
13:41:58 <isthatit_> Or is there the source code of a project I should be reading to see good use of functional design patterns?
13:41:58 <Welkin> O.o
13:42:20 <Welkin> did I die
13:42:23 <Welkin> cocreature what!
13:42:46 <Welkin> isthatit_: business cases? You mean like briefcases? leather ones? wearing a suit and tie?
13:43:05 <Welkin> DAMN IT
13:43:09 <Welkin> cocreature: you helped me a bit
13:43:14 <Welkin> I can't get over the ledge
13:43:41 <Welkin> GOD DAMN IT BOB
13:45:05 <Welkin> !!!!!
13:46:26 <isthatit_> Welkin, I dunno something like.. A bank account can be modeled by a monad
13:46:29 <isthatit_> or things like this
13:46:47 <isthatit_> Or a web page renderer can be modeled as a bifunctor
13:47:14 <Welkin> wtf!
13:47:18 <Welkin> this game is addicting
13:47:22 <Welkin> how did you come up with it?
13:47:25 <Welkin> it is also hilarious
13:47:27 <Welkin> like a party game
13:47:33 <Welkin> everyone looks like a monkey swinging around
13:47:52 <Welkin> isthatit_: you are talking nonsense now
13:48:43 <isthatit_> Welkin, I don't think so. There are ton of books regarding this matter about OOP design pattern
13:48:56 <isthatit_> Welkin, if you want haskell to succeed you need something similar for functional patterns
13:49:17 <Welkin> no, we do not
13:49:23 <Welkin> there are no such nonsense "design patterns"
13:50:02 <isthatit_> Welkin, well you could consider functor, monad, free monads, contrafunctors, bifunctors, ... to be "design patterns"
13:50:16 <isthatit_> not "you" but "one"
13:51:11 <Welkin> I think if we want haskell to "succeed" (by which I assume you mean "become popular") then we should avoid overusing such abstractions at all costs
13:51:35 <Welkin> I have seen what happens when this idea of using every abstraction you can think of is left to run wild
13:51:44 <Welkin> look at any purescript library and you will see
13:51:53 <Welkin> it's incomprehensible
13:52:28 <cocreature> dexterfoo: nice, is your source online somwhere?
13:53:41 <Welkin> multicave adventure?
13:53:50 <Welkin> is that a pun on multi-user dungeon?
13:54:01 <dexterfoo> cocreature: sadly not. the backend networking is all written in haskell
13:54:23 <Welkin> and the rendering?
13:54:32 <dexterfoo> WebGL
13:54:41 <dexterfoo> (C++, not haskell)
13:55:11 <Welkin> playing with a trackpad is not easy
13:55:21 <dexterfoo> ah, no... a mouse is a must
13:56:01 <hpc> i won!
13:56:09 <Welkin> hpc: bastard!
13:56:13 <hpc> that was fun
13:56:18 <Welkin> dexterfoo: could you put the source online somewhere?
13:56:21 * hpc was blorg
13:56:29 <Welkin> WHAT!
13:56:33 <isBEKaml> How is it any surprise that a High Performance Computer won?
13:56:34 * Welkin is shocked
13:56:50 <Welkin> I was Alice
13:56:52 <Welkin> if anyone wondered
13:56:58 <drewbarbs> wait *I* was Alice
13:56:59 <hpc> everyone was alice
13:57:01 <Welkin> not that Alice, or the other Alice, or the other other Alice
13:57:03 <Welkin> but Alice
13:57:18 <hpc> it reminds me of super monkey ball
13:57:28 <Welkin> that bastard Bob kept blocking me
13:58:10 <hpc> there's a magic timing on the crushers where you can just glide through both of them, and i got that a few times in a row
13:58:21 <hpc> i think that's what slowed down most people
13:58:22 <drewbarbs> is there a way to fullscreen it where your mouse is grabbed?
14:03:31 <alp> woodson, if you specify both in your request, then it means your request has a body whose content type is the one that you specify in the "Content-Type" header, and you are asking the server to respond with a body in the content type specified by your Accept header.
14:04:26 <alp> and then usually the server ships a "Content-Type" header in the response that specifies the format of the response, which hopefully is the one you asked for with Accept
14:08:07 <Welkin> dexterfoo: there are bullets?
14:11:07 <dexterfoo> Welkin: yeah. green power-up
14:11:28 <Welkin> o.o
14:11:30 <Welkin> how do you shoot?
14:12:06 <dexterfoo> Welkin: right click
14:12:30 <beginner> Hi there, I'm currently learning Haskell and still have not reached Monads, monoids,  etc. But I was wondering, do I need to learn Type, Group or Category theory? which one of these theories would deepen understanding haskell?
14:13:45 <kadoban> beginner: Nope, nope and nope. All of them would deepen your understanding of haskell, but none of them are worth the effort just for haskell
14:14:04 <Welkin> dexterfoo: BUT I ONLY HAVE ONE BUTTON
14:14:50 <int-e> Welkin: good news: you're now a pacifist.
14:17:53 <merijn> kadoban: Well, I think learning a bit of type theory is inevitable
14:19:31 <Welkin> dexterfoo: I'm noticing some lag that nearly killed me
14:20:15 <kadoban> merijn: Probably, but actually studying it on its own, there's no way that's time efficient if your only goal is haskell
14:23:42 <rain1> hello
14:23:59 <rain1> lens question .. what is the benefit of having first class getting/setting?
14:24:30 <dexterfoo> Welkin: it's london server. if you are not in europe it will be laggy :(
14:24:43 <johnw> you can write algorithm that are entirely container-agnostic by just taking a getter to the type you want as an argument...
14:24:46 <Welkin> dexterfoo: the lag is killing me!
14:25:38 <rain1> i see! is there an example of that I could check out?
14:26:14 <johnw> rain1: it's something I've done on a few occasions, but I have no ready example
14:26:42 <johnw> i mean, the only reason you'd want to pass the getter, instead of just passing the gotten value, is usually a bit complicated
14:26:57 <johnw> as in, you don't know yet which structure you'll be getting the value from
14:27:03 <rain1> thats the exactly thing I want to understand
14:27:14 <johnw> so, I have one example I'm using right now
14:27:36 <johnw> I have a structure full of constraint bounds, and a list of parameters I want to tweak while doing a binary search to find the limits of those bounds
14:27:48 <johnw> The way I did it was to express those parameters as a list of lens
14:28:00 <johnw> that way, I can walk through the list and tweak the bounds, without knowing anything about the bounds, or how they're stored
14:28:27 <Welkin> god damn it
14:28:31 <Welkin> playing with a trackpad is the worst
14:28:41 <Welkin> it's like trying to play a FPS with a trackpad
14:29:48 <hpc> this one is much harder
14:30:32 <johnw> try playing an FPS with a nipple-mouse
14:31:27 <Welkin> johnw: you mean a clit mouse?
14:31:41 <Welkin> people play games on thinkpads?
14:31:46 <johnw> i meant those little nubbins in the middle of thinkpads
14:32:16 <EvanR> try playing doom with arrow keys, ctrl, and shift
14:32:30 <Welkin> I played doom on a psp
14:32:40 <Welkin> it gave me motion sickness
14:32:49 <EvanR> uphill both ways
14:32:51 * [exa] remembers the mouseless 486
14:33:20 <Welkin> really old 3d (or fake 3d) games easily create motion sickness
14:33:24 <Welkin> that was a sad era in gaming
14:34:46 <[exa]> doom3d being a sad era?
14:34:49 * [exa] feels old
14:34:50 <Sose> I've never got motion sick from games so I guess it varies quite a lot from person to person
14:35:05 <Welkin> I am tlaking about the original doom
14:35:20 <[exa]> doom 1 yeah
14:35:25 <Welkin> but yes, the transition from 2d to 3d was rough
14:35:32 <MarcelineVQ> gets less fun when you have to naivgat hazards where your direction changes often, the actual direction of your shot vs where you pointed don't agree :X
14:35:33 <[exa]> the "3d" was because i wanted to type wolf3d
14:36:00 <Welkin> that was the era I grew up in, too
14:36:28 <Welkin> so I didn't get to experience the end of the 2D era
14:36:37 <Welkin> only the rough beginnings of 3D
14:37:11 <EvanR> end of 2d? 2d minecraft clones are all i see these days
14:37:24 <EvanR> off topic, unless were going to create a 2d minecraft clone in haskell
14:37:27 <Welkin> I meant as the standard technology
14:37:37 <Welkin> I recently got Doom on ps4 though
14:37:41 <Welkin> much better
14:38:10 <EvanR> https://krajzeg.itch.io/dank-tomb
14:38:19 <Welkin> EvanR: oh yeah, get your comment in for the offtopic discussion, then say "but this is offtopic"
14:39:30 <Welkin> there is a doom clone in haskell
14:39:36 <Welkin> ocharles wrote one using opengl
14:39:42 <Welkin> and a quake clone, too
14:39:49 <Welkin> that one was made using lambdacube I think
14:41:21 <EvanR> frag existed
14:51:29 <pikajude> ok, my brain is short-circuiting
14:51:41 <pikajude> how do I take a list of things and ensure that only one element of a smaller list is contained in that list
14:51:42 <Welkin> pikajude: on what?
14:52:19 <Welkin> pikajude: fold over the list and count how many times it appears
14:52:35 <pikajude> actually, maybe it's length (intersect bigList smallList) <= 1
14:52:54 <Welkin> :t intersect
14:52:55 <lambdabot> Eq a => [a] -> [a] -> [a]
14:53:06 <Welkin> I didn't know that existed for list
14:53:14 <Welkin> thought it was just Map and Set
14:55:38 <EvanR> > [1,2,1,2] `intersect` [1,1,1,2,2,2]
14:55:41 <lambdabot>  [1,2,1,2]
14:55:48 <EvanR> > [1,2,1,2] `intersect` [1,1,1]
14:55:52 <lambdabot>  [1,1]
14:56:19 <EvanR> > [1,2,1,2] \ [1,1,1]
14:56:22 <lambdabot>  <hint>:1:11: error: parse error on input ‘\’
14:56:33 <EvanR> :t (\\)
14:56:35 <lambdabot> Eq a => [a] -> [a] -> [a]
14:56:39 <EvanR> > [1,2,1,2] \\ [1,1,1]
14:56:43 <lambdabot>  [2,2]
14:59:40 <Zemyla> Okay, so suppose I have this type family:
15:00:10 <Zemyla> @let type family Fst (p :: (a, b)) :: a where Fst '(a, b) = a
15:00:12 <lambdabot>  Defined.
15:00:33 <Zemyla> So how do I make a function fstRep :: TypeRep p -> TypeRep (Fst p)?
15:15:04 <dmwit> :t let f :: TR.TypeRep (a, b) -> TR.TypeRep a; f (TR.App (TR.App comma a) b) = a in f
15:15:07 <lambdabot> TR.TypeRep (a, b) -> TR.TypeRep a
15:17:11 <fragamus> Is there any way to retrieve function definitions entered into GHCI (I exceeded my scrollback buffer)
15:17:33 <Welkin> fragamus: write them in a file and :load them
15:17:43 <Welkin> there is a .ghci_history files I believe
15:18:05 <dmwit> fragamus: ~/.ghc/ghci_history
15:20:32 <fragamus> Thanks!
15:21:16 <dmwit> pikajude: Beware: intersect is quadratic. If you can arrange for both your lists to be sorted, there's a fairly straightforward linear-time algorithm you can use for this check. If you can't, probably going via Data.Set.intersection will be about as efficient as you can get.
15:22:18 <Welkin> but doesn't he want to check if exactly one element exists?
15:22:22 <Welkin> not one or more?
15:22:28 <Welkin> if so, Set won't help you
15:22:29 <dmwit> https://hackage.haskell.org/package/data-ordlist-0.4.7.0/docs/Data-List-Ordered.html has both bag- and set-intersection operations on sorted lists in linear time, which you can combine with a `null . drop 1` check for a fully linear-time intersection-size check.
15:23:00 <dmwit> Welkin: It will help in that it will be n log n instead of n^2. You will still need to construct the full intersection, though; asymptotically it doesn't matter.
15:23:08 <Welkin> I often convert a List to a Set to filter for unique elements, then convert back again
15:23:33 <dmwit> (Or: why do you believe Set won't help you?)
15:23:56 <Welkin> because Data.Set.fromList will removes duplicates
15:24:04 <Welkin> remove*
15:25:05 <kadoban> If it's unsorted, optimal is probably something like convert the smaller one to a set and work from that. Logic gets a bit detailed, but it should work.
15:26:17 <dmwit> Welkin: Okay. I think whether that matters depends on exactly what pikajude meant by "only one element of a smaller list is contained in a bigger list".
15:26:31 <Welkin> yes, of course
15:26:58 <EvanR> remove duplicats, but only of items named (somewhere) in the smaller list
15:27:15 <EvanR> this operation sounds so detailed, im wondering if thats really what you need
15:27:17 <dmwit> In any case,
15:27:27 <dmwit> ?hackage multiset will deal with the cases where Set isn't quite right
15:27:27 <lambdabot> http://hackage.haskell.org/package/multiset will deal with the cases where Set isn't quite right
15:28:23 <dmwit> (and will still be linearithmic instead of quadratic)
15:29:22 <pikajude> dmwit: they're 5-10 element lists
15:29:51 <dmwit> =)
15:30:19 <EvanR> not webscale
15:44:37 <Zemyla> I just found out that Any isn't Typeable anymore, and I'm wondering if there is an uninhabited polykinded value that is.
15:44:52 <pikajude> 5-10 element lists so not a big deal
15:44:55 <pikajude> but I really didn't want to write
15:45:14 <pikajude> if foo `elem` bar && baz `elem` bar then error "..." else if foo `elem` bar and ...
15:45:19 <pikajude> bit too much work
15:45:24 <EvanR> a combination of ++ intersect and \\ should do it
15:46:12 <kadoban> pikajude: map (`elem` bar) over the one, and then check how many True you end up with
15:50:38 <Welkin> to count True, you can use `filter id`
15:50:40 <Welkin> :)
15:50:44 <Welkin> dumb trick
15:50:58 <Welkin> length . filter id
15:51:31 <kadoban> I guess you can skip a step and just do length . filter (`elem` bar)
16:26:00 <MarcelineVQ> pikajude: what do you mean by ensure?
16:46:12 <owickstrom> If anyone of you are interested in the CODA screencasts I've been producing, they're now going under the name "Haskell at Work", and they're available at https://haskell-at-work.com/.
16:51:12 <buhman> owickstrom: is "CODA" significant?
16:53:11 <owickstrom> buhman: how do you mean?
16:53:39 <buhman> owickstrom: you mentioned it just now as well as at the beginning of the video, but I'm not sure what that is
16:54:23 <owickstrom> buhman: it's just a made up name that I used for the channel
16:54:44 <owickstrom> I've changed it now to be more clear, that it's about Haskell specifically
16:55:05 <buhman> hmm ok; these look really nice. Thanks!
16:55:16 <owickstrom> buhman: cool, thanks :)
16:55:40 <Welkin> "In music, a coda [ˈkoːda] (Italian for "tail", plural code) is a passage that brings a piece (or a movement) to an end."
16:56:12 <owickstrom> Welkin: that's right, and where I got the name from initially
16:56:54 <owickstrom> but it turned out Edward Kmett already had a project named Coda going
16:57:25 <owickstrom> didn't want to clash with that, and also the screencast will benefit from a more direct naming, I think
16:57:46 <Welkin> clever names are not so clever
16:57:56 <owickstrom> guess so
16:58:04 <Welkin> what is it about?
16:58:18 <owickstrom> Kmett's thing, or the screencast?
16:58:22 <Welkin> yours
16:58:35 <owickstrom> using Haskell in practice
16:58:41 <Welkin> for what?
16:58:57 <owickstrom> anything I come across, basically :)
16:59:38 <owickstrom> so not specifically web, languages, or whatever, but hopefully more broad things that people will have use for
17:00:31 <Welkin> that's cool
17:00:41 <Welkin> so you are doing screencasts? Are they weekly or what?
17:01:02 <Welkin> one piece of feedback I have immediately is that you sound kind of like a robot (and bored)
17:01:23 <Welkin> which doesn't make me want to keep listening
17:02:04 <owickstrom> ok, so don't listen :P
17:02:26 <Welkin> I'm giving you this feedback to help you make better videos
17:02:57 <Welkin> I'm guilty of doing this kind of robotic thing myself if I don't consciously try not to, especially if you ar reading from a script
17:08:44 <Welkin> owickstrom: if you put your work out in the wild, prepare for it to be criticized. I am giving you constructive criticism for your own benefit. You won't find the same from most people who are just trolls
17:12:49 <owickstrom> Welkin: yeah, I've gotten quiet used to that, don't worry.
17:32:02 <Costar> Hi!
17:32:15 <Welkin> hola
17:33:13 <Costar> Is there a "two sided" free-(functor/monad)?
17:33:22 <Costar> or something isomorphic
17:37:22 <qmm> i am wanting to use the Bittrex library, and i am wanting to store data into postgresql. someone has responded to my request of how to use data formatted as in the way shown in this gist: https://gist.github.com/qmmdb/770a1f670bc3f380251ac760cb102221#gistcomment-2334290
17:37:41 <qmm> i didn't make it clear that i am using the bittrex library, so maybe they would have responded differently had i mentioned it.
17:38:52 <qmm> how would i use derivePersistField with from Database.Persist.TH with the bittrex MarketSummary data type, source here for that data type here: https://github.com/dmjio/bittrex/blob/master/src/Bittrex/Types.hs#L1042
17:39:03 <Welkin> it was me that responded before
17:39:37 <Welkin> I thought that persistent could only derive fromSql and toSql for simple sum types
17:39:42 <Welkin> maybe for newtypes, too
17:40:20 <Welkin> like I said, I wrot my own instances for those when I had a more complex type or had to do some complex transformation
17:40:23 <Welkin> wrote*
17:40:57 <Welkin> qmm: what is your question?
17:41:07 <Welkin> also, I would make High and Low newtypes instead
17:41:43 <Welkin> I don't know what bittrex is
17:43:11 <Welkin> looking at the bittrex bindings, it seems that these types all exist already
17:43:15 <Welkin> and High and Low are already newtypes
17:43:27 <Welkin> have you tried compiling your program yet?
17:43:36 <qmm> bittrex is a library for offering "Haskell bindings to the Bittrex cyrptocurrency exchange"
17:44:17 <Welkin> in fact, almost everything is a newtype or type alias
17:44:32 <qmm> Welkin: it is missing the Read type. i don't know if you need that to store the data in postgres
17:44:50 <qmm> with persistent
17:44:52 <Welkin> you mean an instance for Read?
17:44:59 <qmm> yeah
17:45:11 <Welkin> template haskell generates the toSql and fromSql instances for you
17:45:19 <Welkin> those are all you need to marshal data to and from the database
17:45:33 <Welkin> you can write them yourself if they are complex (and you may need to)
17:45:47 <Welkin> but I believe that for simple sum types and newtypes it can autoderive them ust fine
17:45:50 <Welkin> just fine*
17:45:55 <Welkin> have you tried compiling yet?
17:46:02 <Welkin> it doesn't seem like you have a real question
17:46:47 <qmm> i don't see toSql or fromSql in the persistent library. is it common to use another library for this functionality?
17:47:00 <Welkin> what?
17:47:04 <Welkin> you won't see these anywhere
17:47:08 <Welkin> they are generated at compile time
17:47:25 <Welkin> that is how template haskell works
17:47:42 <Welkin> it writes additional code for you before it compiles into a binary
17:48:15 <qmm> i just don't know how to store this data with the persistent library
17:48:17 <qmm> i am within ghci
17:48:30 <qmm> i have fetched the data, and now i don't know how to store it in postgresql. that's all i'm trying to do
17:50:27 <Welkin> I'm trying to find the docs on these typeclasses
17:50:35 <Welkin> that is what I am telling you how to do
17:50:48 <Welkin> the missing link is converting the haskell data into something that postgres understands
17:50:52 <Welkin> that is the purpose of the typeclass
17:53:41 <qmm> the example shown at https://hackage.haskell.org/package/persistent-2.7.3.1/docs/Database-Persist.html doesn't correlate with the data i am storing. it shows a User with a name which is a String and an age with type Int. trying to translate this to what i'm working on, MarketSummary is User, marketSummaryName could be name, but it isn't a String, it's a MarketName whose value can be either NewMarket Text or
17:53:47 <qmm> MarketName MarketName'. a show instance of a marketname would be NewMarket Foo, and i'd rather store it as just Foo
17:54:44 <Welkin> ah
17:54:49 <Welkin> the name is PersistField
17:55:19 <qmm> derivePersistField from Database.Persist.TH?
17:55:33 <Welkin> you need to define an instance of PersistField and PersistFieldSql for MarketSummary
17:56:01 <qmm> i need to fork this library and add those instances myself?
17:56:04 <Welkin> ...
17:56:05 <Welkin> no
17:56:11 <Welkin> just define them in your own code
17:56:17 <Welkin> they will be orphan instances, but that is okay
17:56:22 <Welkin> forking the library is a terrible idea
17:57:00 <Welkin> this is exactly what derivePersistField is doing for you
17:57:10 <Welkin> but it can only handle simple data types
17:57:17 <Welkin> so you need to do it manually for complex ones
17:57:20 <qmm> thank you for the advice. it's good to hear from someone experienced
17:58:26 <Welkin> https://hackage.haskell.org/package/persistent-2.7.3.1/docs/Database-Persist-Class.html#t:PersistField
17:58:32 <Welkin> https://hackage.haskell.org/package/persistent-2.7.3.1/docs/Database-Persist-Sql.html#t:PersistFieldSql
18:00:32 <qmm> thank you. i will have to look into how to define my own instances for imported modules
18:00:42 <qmm> i am unfamiliar with creating orphan instances
18:01:07 <Welkin> it's the same as defining an instance ofr any other type
18:01:14 <Welkin> exactly the same
18:01:23 <Welkin> you just need to import the type into the module where you define the instance
18:03:15 <qmm> Welkin: ah okay. i can manage that. thanks again for not tiring too quickly with me
18:08:33 <Welkin> qmm: I have an example here from an app I built a couple years ago https://github.com/ericnething/apptext/blob/master/Model/Types.hs#L132
18:32:49 <woodson> hey guys I am having problem making PlainText Post request in servant. I keep on getting 415 unsupported media type
18:32:55 <woodson> here is the http://lpaste.net/362013
18:33:57 <woodson> the link below show that the instance mime render instance is already define for plaintext
18:33:58 <woodson> https://hackage.haskell.org/package/servant-0.8/docs/Servant-API-ContentTypes.html#t:PlainText
18:34:20 <Welkin> check the headers in your request
18:34:25 <Welkin> are you sure they are being set?
18:34:28 <Welkin> how are you testing it?
18:34:32 <woodson> curl -X POST -H "Content-Type:text/plain;charset-utf8" -H "Accept: application/json" -d 'hello world' http://localhost:8080/create
18:34:47 <woodson> this is how i am making the request with curl
18:35:02 <Welkin> did you try without the charset?
18:36:01 <Welkin> there is a way to enable debug mode for servant, I forgot how exactly
18:36:06 <Welkin> you can ask in #servant
18:36:17 <Welkin> this will show you the request as it comes in to the server
18:36:23 <woodson> Welkin: Yes, i did try without charset
18:37:07 <Welkin> actually, if you have logging on, it should print it out in the terminal window where you have the server running
18:37:22 <Logic> http://lpaste.net/362014    If someone could please help me fix this !!!
18:38:00 <Welkin> Logic: your code is just plain wrong
18:38:06 <Welkin> why is it in a do block?
18:38:11 <Welkin> why are you using a let?
18:38:40 <Welkin> pull out your multiThree function to the top level
18:38:42 <Logic> At first I did not use these, the compiler told me to.
18:39:01 <Logic> Welkin: Ok I'll try.
18:39:02 <Welkin> why do you have a main at all?
18:39:14 <Welkin> just define your multiThree function, then :load the file in ghci
18:39:16 <Welkin> then you can sue it there
18:39:23 <Welkin> use it*
18:39:51 <woodson> Welkin: i have logStdoutDev on but its not telling me much except for the 415 status error
18:40:12 <Welkin> woodson: it doesn't log the request?
18:40:14 <Logic> http://lpaste.net/362014    , still getting an error.
18:40:44 <Welkin> Logic: it seems like you need to start with some basic haskell
18:40:50 <Welkin> you are making errors that don't make any sense
18:41:00 <Welkin> what are you using to learn?
18:41:16 <woodson> Welkin: This is what my log looks like http://lpaste.net/362016
18:41:51 <woodson> Logic: it doesnt seem like you are performing an IO computation
18:41:59 <woodson> so you dont need the main
18:42:02 <Logic> Welkin, I am using: "learn you haskell", I can get it to work in the ghci but I am having a hard time in the Atom Text Editor.
18:42:09 <Welkin> woodson: does it work if you change to json?
18:42:50 <woodson> Welkin: Let me check if my other endpoint still work, hold on
18:43:04 <Welkin> Logic: start here instead https://www.seas.upenn.edu/~cis194/spring13/
18:43:27 <Welkin> or not
18:44:12 <Welkin> there were so many things wrong, I don't even know where to begin other than to tell them to start over and actually learn it properly
18:44:30 <Welkin> guess they didn't want that answer
18:46:02 <woodson> Welkin: Ya, other json endpoint work
18:46:29 <woodson> Welkin: Damn, that is so frustrating because it a sample thing that I am trying to do
18:46:35 <Welkin> change plaintext to json and test it
18:46:51 <woodson> Welkin: I did
18:46:58 <woodson> and it worked
18:47:16 <woodson> but I did need plain text
18:47:28 <Welkin> the next thing I would do is check the actual request coming in to see if that is correct
18:47:43 <Welkin> if so, then something is going wrong in servant
19:13:01 <Zemyla> There should be functions that let you turn evidence that x is a KnownNat or a KnownString into evidence that x is Typeable.
19:13:09 <Zemyla> Well, into a TypeRep.
19:28:14 <EvanR> Zemyla: cant you write it yourself?
19:39:05 <lyxia> Not safely though
19:50:58 <EvanR> kernel of trust
20:54:14 <Marisa_> Hi, one small question: how do I set ghcjs gc interval? I cannot found anything :(
21:24:19 <EvanR> Marisa_: if ghcjs gc is implemented by just forgetting stuff in js... then im not sure theres a way (in the browser)
21:30:55 <never> Still having problems with stack and lpthread :c
21:31:06 <never> closest thing I've found is this : https://stackoverflow.com/questions/46519307/undefined-reference-to-symbol-pthread-setname-npglibc-2-12-haskell-stack-err
21:31:44 <never> here's my actual error
21:31:46 <never> http://lpaste.net/7100740285105176576
21:32:30 <never> what I've tried : setting the LDFLAGS env variable to phtread and lp thread
21:33:03 <never> using with-gcc and a script that does "/usr/bin/gcc -lpthread"
21:33:19 <never> what I'm about to try : reinstall on a new system.
21:33:25 <never> I want to try yesod :'(
21:33:34 <never> If anyone has an idea I'm all ears
21:33:46 <never> I tried asking on haskell-stack but it's deader than dead
21:34:26 <never> I have the latest stack.
21:46:06 <geekosaur> what is this "gcmod"? I suspect it is confusing ghc, which was expecting based on configure-time checks that pthread would be enabled as needed
21:46:14 <geekosaur> (because that's normal on linux)
21:46:33 <never> gcmod is the script I was talking about
21:46:37 <never> I get the same result without it
21:48:18 <never> I also get the same result w/o install-ghc
21:58:23 <never> thanks for the help anyway =) I will try installing on another system.
22:03:44 <jle`> hi
22:04:00 <jle`> why isn't Mutable from 'vector' an injective type family?
22:05:54 <lyxia> MVector? History perhaps?
22:06:48 <jle`> oh hey, it is
22:06:58 <jle`> (it is injective)
22:07:09 <jle`> i wonder why it didn't show up
22:07:41 <jle`> oh, it's injective in HEAD, but not in the current vector on hackage
22:09:35 <jle`> https://github.com/haskell/vector/commit/3c51c33e0f9f5ac4abd438503458c76b5b0d2c13
22:10:43 <lyxia> hm what's the difference between Mutable and MVector
22:10:56 <jle`> MVector is the actual type
22:11:04 <jle`> Mutable is the type family that associates Vector with MVector
22:11:11 <jle`> since there are different pairs of Vector's and MVector's
22:11:38 <jle`> it associates Data.Vector.Vector with Data.Vector.Mutable.Vector, and Data.Vector.Storable.Vector with Data.Vector.Storable.Mutable.Vector, etc.
22:11:53 <jle`> it's really only useful if you write code that's generic over all the different vectors
22:11:56 <lyxia> ah I see
22:12:03 <jle`> which is not a common situation
22:12:39 <lyxia> thanks
22:55:25 <robstr> morning, I have trouble using hindent from intero from emacs, my emacs configuration is: (require 'hindent) and (add-hook 'haskell-mode-hook #'hindent-mode). And hindent is availible form the command line, but if I run keybinding M-q I get "searching for program, no such file or directory hindent"
22:58:26 <parsnip> robstr: #emacs might be better able to help with that.
23:00:19 <robstr> thank you
23:34:51 <wonderedguy> hello I am wondering why haskellhave lot of maths and we can reduce haskell to tiny subset simple haskell and that simplehaskell to lambda calculus ??
