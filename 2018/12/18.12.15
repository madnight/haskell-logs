00:52:09 * hackage haskell-dap 0.0.10.0 - haskell-dap is a GHCi having DAP interface.  http://hackage.haskell.org/package/haskell-dap-0.0.10.0 (phoityne_hs)
01:36:35 <sphalerite> morning
01:36:58 <koz_> sphalerite: Hola.
01:37:21 <sphalerite> I'm looking for a function to compare strings numerically, i.e. "123" `foo` "5" = GT
01:37:51 <sphalerite> 1. Where would I find such a function, and 2. Where would it make sense to look myself?
01:38:01 <koz_> sphalerite: So what, you want to have it compare Strings as if they were numbers?
01:39:18 <sphalerite> wait… I was thinking sort of like unix sort -n but that doesn't do what I want either
01:39:49 <koz_> sphalerite: Can you describe more exactly what you do want?
01:40:02 <koz_> For example, what would "bar" `foo` "5" give?
01:42:12 <Lears> > ((compare `on` length) <> compare) "123" "5" -- Maybe this will do?
01:42:14 <lambdabot>  GT
01:42:25 <Lears> > ((compare `on` length) <> compare) "123" "124"
01:42:27 <lambdabot>  LT
01:42:30 <sphalerite> I'll be more specific. I have strings like "system-n-link" where n is a non-zero-padded decimal integer (nixos system profile generation link names), and I'd like them sorted by n.
01:42:38 <sphalerite> I guess I still need to work out what I really want though.
01:43:20 <sphalerite> Since it's not guaranteed that they'll always be of exactly that format (could be anything-n-link)
01:44:43 <Lears> > ((compare `on` length) <> compare) "system-123-link" "system-5-link"
01:44:46 <lambdabot>  GT
01:45:03 <Lears> ¯\_(ツ)_/¯
01:50:07 <mniip> > sortBy (comparing (catMaybes . fmap (readMaybe :: String -> Maybe Int) . groupBy ((==) `on` isDigit)) <> compare) ["foo-123-bar-456", "foo-456-bar-123"]
01:50:10 <lambdabot>  ["foo-123-bar-456","foo-456-bar-123"]
01:54:03 <sphalerite> ok, the perl script that generates grub config from these uses     sub nrFromGen { my ($x) = @_; $x =~ /\/\w+-(\d+)-link/; return $1; }   then sorts on that so I guess I should be doing something like that except less… perly
01:54:04 * hackage htvm 0.1.1 - TVM bindings.  http://hackage.haskell.org/package/htvm-0.1.1 (SergeyMironov)
01:54:17 <sphalerite> thanks for your patience with my not knowing what I actually want :p
01:54:46 <sphalerite> mniip: impressive :D
02:01:05 * hackage htvm 0.1.2 - Bindings for TVM machine learning framework  http://hackage.haskell.org/package/htvm-0.1.2 (SergeyMironov)
02:02:34 * hackage haskdogs 0.5.4 - Generate tags file for Haskell project and its nearest deps  http://hackage.haskell.org/package/haskdogs-0.5.4 (SergeyMironov)
02:03:13 <Lears> Revision: comparing (takeWhile isAlpha) <> comparing length <> compare
02:03:28 <Lears> I love the ordering semigroup.
02:26:19 --- mode: glguy set +v potatochips
02:27:24 <potatochips> thank you for the voice
02:32:50 <cocreature> potatochips: you’ll have to repeat the message you sent before you got voice
02:35:53 <cjay-> Why is there no strict version of Data.Array? Are people expected to write UArray instances?
02:37:42 <potatochips> hello Im new to this group
02:37:47 <potatochips> is this ok
02:39:14 <cjay-> sure
02:39:32 <potatochips> cool
02:41:03 <[exa]> cjay-: why not unboxed vectors?
02:43:08 <cjay-> [exa]: I don't know, I only ever used the array package. Does everyone use vectors now?
02:44:01 <[exa]> vectors are basically user-friendlier arrays, if they fit your usecase just use them
02:44:39 <[exa]> (afaik everyone chooses vectors when not writing something like a very low-level dependency-avoiding library)
02:45:01 <cjay-> writing instances for vectors indeed looks much more user-friendly
02:45:40 <cjay-> but why don't vectors use Ix for indices?
02:45:58 <cjay-> converting V2 and others to Int manually is not nice
02:47:13 <cocreature> if you want multi-dimensional arrays there are packages like "massiv"
02:47:40 <cocreature> or even accelerate which also allows you to use your gpu
02:48:22 <cjay-> thanks, I'll check it out
02:48:40 * [exa] checks out massiv
02:49:03 <cjay-> ah, Ix a function to convert to Int, I guess it's not too bad to define a few wrapper functions for vectors
04:30:58 <aiowej> Hi! Is there a function `[Maybe x] -> Maybe [x]`, i.e. if all items in the list are `Just x`, then return a list of them all "unwrapped". Something like the Rust `.unwrap()` function. Unlike Data.Maybe.catMaybes, I want it to fail if not all items are Just
04:32:22 <Lears> :t sequenceA -- aiowej
04:32:23 <lambdabot> (Applicative f, Traversable t) => t (f a) -> f (t a)
04:39:59 <aiowej> Lears: thanks for your reply! Holy fuck it worked: `cleanup_maybes maybes = sequenceA maybes` seems to do the job. Some black magic going on right there... 
04:43:22 <suzu> could do cleanup_maybes = sequenceA !
04:44:10 <aiowej> What does the ! mean there? 
04:45:14 <realSnoo> is this the best resources for learning haskell? I'm a CS major
04:45:15 <realSnoo> https://github.com/bitemyapp/learnhaskell
04:45:29 <realSnoo> or is "learn you a haskell" better?
04:46:21 <suzu> the haskell book is alright
04:46:54 <Lears> aiowej: sequenceA just traversese the traversable (the list here) of applicative values (maybes here), reconstructing the traversable inside the applicative as it goes, hence lifting out their accumulated effects. In this case we have something like `sequenceA = \case [] -> pure []; (mx:mxs) = (:) <$> mx <*> sequenceA mxs`.
04:48:20 <suzu> aiowej: nothing, it was just an exclaimation point lol
04:49:07 <Lears> One of those equals signs was supposed to be an arrow, but never mind.
04:49:12 <suzu> i mean to show that you can reduce your definition
04:51:08 <aiowej> Lears & suzu: Thanks for your replies! 
04:51:24 <siers> How do I connect conduit's Source + ConduitM + CL.mapM_ print?
04:55:14 <siers> ConduitT*
04:59:05 <siers> Here's the small example: https://clbin.com/vzdwC
05:00:25 <pdxleif> I enjoy writing some point-free code at times, but this seems to be some next-level stuff: (traverse snd =<<), from https://github.com/hedgehogqa/haskell-hedgehog/blob/master/hedgehog/src/Hedgehog/Internal/Gen.hs#L1302
05:03:03 <pdxleif> I know it's taking the second element of stuff, and there's some join'ing going on in there, and a traversable...
05:04:02 <pdxleif> I guess traverse itself doesn't need join, just *>
05:07:11 * hackage zsyntax 0.2.0.0 - Automated theorem prover for the Zsyntax biochemical calculus  http://hackage.haskell.org/package/zsyntax-0.2.0.0 (fsestini)
05:08:42 <siers> I found my problem — it should be a conduit, not a sink
05:14:46 <siers> How can I make the consumer lazy? https://clbin.com/kZLS4 
05:55:14 * hackage macos-corelibs 0.0.1.0 - Haskell bindings to C-based Mac OS SDK frameworks  http://hackage.haskell.org/package/macos-corelibs-0.0.1.0 (fsestini)
06:40:32 <seishun> which data structure is the best for fast appending and fast access by index?
06:59:21 <cjay-> when I :set -fexternal-interprter -prof in ghci, I can't execute main any more. Is this a ghci bug?
06:59:26 <cjay-> No instance for (Show (IO ())) arising from a use of ‘print’
06:59:38 <cjay-> main works otherwise
07:00:09 <Solonarv> seishun: my first thought is Seq
07:00:49 <seishun> yeah I went with Seq
07:03:22 <seishun> is it better to use |> or :|> for appending?
07:07:48 <pavonia> Isn't the latter a pattern?
07:08:25 <cjay-> I'm too dumb to find out how to pass ghci flags to 'cabal new-repl'. --PROG-options or --ghci-options doesn't work :/
07:08:30 * cjay- angery
07:10:05 <cjay-> ghci -fexternal-interpreter -prof crashes with errors about missing .so/.dll
07:12:31 <Solonarv> seishun: should not matter at all, really
07:13:02 <Solonarv> pavonia: :|> is a /bidirectional/ pattern synonym, which means you can use it exactly like you would use a constructor
07:13:57 <pavonia> Oh, I didn't know such a thing exists
07:20:18 <cjay-> hmm that's nice, I was wondering the other day if such a thing exists, I probably had a outdated version of the Sequence docs via google
07:25:22 --- mode: glguy set +v ACheesyName
07:25:55 <seishun> is there a way to check if a sequence is contained within another subsequence?
07:26:06 <seishun> *another sequence
07:27:40 <Solonarv> I'd expect that to be in Data.Sequence if it's already provided
07:34:45 <seishun> I decided to take a different approach
07:45:40 <ACheesyName> is there any reason to prefer concatMap to foldr (++) map? looking at the source code it seems to just be a macro for the same thing
07:46:47 <ski> @src concatMap
07:46:47 <lambdabot> concatMap f = foldr ((++) . f) []
07:46:55 <Solonarv> the same reason you'd prefer 'map f' to 'foldr ((:) . f) []'
07:46:56 <ski> `concatMap' is shorter
07:47:58 <Solonarv> additionally, it's more readable
07:49:03 <ACheesyName> ok so they are the same. but will concatMap use linear stack space?
07:55:26 <cocreature> space usage in Haskell tends to work quite differently from other languages. there is no call stack
07:57:09 * hackage moss 0.1.0.0 - Haskell client for Moss  http://hackage.haskell.org/package/moss-0.1.0.0 (mbg)
08:00:36 <ACheesyName> how can I analyze whether repli2 is faster or consumes less stack space than repli? https://repl.it/repls/ZealousEsteemedSites
08:05:12 <cocreature> criterion is pretty good for benchmarking runtimes
08:06:32 <ACheesyName> seems repl2 is actually a good deal slower (just by running a larger test case on repl.it and timing manually) which is surprizing
08:09:00 <cocreature> running code on repl.it is probably a pretty terrible way to benchmark things but as I mentioned, things work differently in Haskell. being tail recursive isn’t always useful especially if the alternative lets you produce results lazily
08:11:05 <cjay-> hmm looks like I fell for https://github.com/haskell/cabal/issues/2827
08:23:05 * hackage groundhog 0.10.0 - Type-safe datatype-database mapping library.  http://hackage.haskell.org/package/groundhog-0.10.0 (BorisLykah)
08:23:35 * hackage groundhog-th 0.10 - Type-safe datatype-database mapping library.  http://hackage.haskell.org/package/groundhog-th-0.10 (BorisLykah)
08:24:35 * hackage groundhog-postgresql 0.10, groundhog-sqlite 0.10.0 (BorisLykah): https://qbin.io/ugly-gem-48we
08:25:35 * hackage groundhog-mysql 0.10 - MySQL backend for the groundhog library.  http://hackage.haskell.org/package/groundhog-mysql-0.10 (BorisLykah)
08:27:05 * hackage groundhog-inspector 0.10.0 - Type-safe datatype-database mapping library.  http://hackage.haskell.org/package/groundhog-inspector-0.10.0 (BorisLykah)
08:37:04 * hackage proteome 0.3.12.0 - neovim project manager  http://hackage.haskell.org/package/proteome-0.3.12.0 (tek)
08:38:35 * hackage sproxy2 1.97.0 - Secure HTTP proxy for authenticating users via OAuth2  http://hackage.haskell.org/package/sproxy2-1.97.0 (ip1981)
08:44:05 * hackage HaskellForMaths 0.4.9 - Combinatorics, group theory, commutative algebra, non-commutative algebra  http://hackage.haskell.org/package/HaskellForMaths-0.4.9 (DavidAmos)
08:46:42 <ondrejs> hi, I am using Aeson, have "data X = Y; instance ToJSON X where toEncoding = string . show" but this gives me an error that there's no generic instance for X. I am trying to provide a manual instance, why does this ask for generics please?
08:53:37 <cocreature> ondrejs: because you haven’t provided an implementation of toJSON
08:54:00 <ondrejs> cocreature: I had the, apparently wrong, impression that it suffices to provide one of those two.
08:54:40 <ondrejs> okay, I switched to generating toJSON and that seems to work.
08:54:53 <cocreature> ondrejs: it is sufficient to provide toJSON but you can’t only provide toEncoding
08:55:22 <cocreature> or expressed differently there is a default implementation of toEncoding in terms of toJSON but not the other way around
08:55:37 <ondrejs> I see. Thanks!
08:56:38 <cocreature> you could theoretically make one by parsing the ByteString you get from toEncoding as a Value but that’s kind of silly which is probably why it doesn’t exist
09:00:54 <ondrejs> I first had the idea to use generics for everything but then observed that PureScript does not have up to date libraries for compatible generics instances.
10:16:05 * hackage bindings-monetdb-mapi 0.1.0.2 - Low-level bindings for the MonetDB API (mapi)  http://hackage.haskell.org/package/bindings-monetdb-mapi-0.1.0.2 (muesli4)
10:17:04 * hackage monetdb-mapi 0.1.0.2 - Mid-level bindings for the MonetDB API (mapi)  http://hackage.haskell.org/package/monetdb-mapi-0.1.0.2 (muesli4)
10:56:09 --- mode: glguy set +v shiro[cloud]
11:07:43 <infinisil> Is there a common function for `flip fmap`?
11:09:30 <f-a> infinisil: there is someting simila (for and forM) for monadic actions
11:09:45 <f-a> :t forM
11:09:47 <lambdabot> (Monad m, Traversable t) => t a -> (a -> m b) -> m (t b)
11:09:52 <f-a> :t +d forM
11:09:53 <lambdabot> Monad m => [a] -> (a -> m b) -> m [b]
11:10:09 <infinisil> Eh, not what I need
11:10:16 <infinisil> But I found this: https://hackage.haskell.org/package/lens-4.17/docs/Control-Lens-Operators.html#v:-60--38--62-
11:10:43 <infinisil> % :t <&>
11:10:44 <yahb> infinisil: ; <interactive>:1:1: error: parse error on input `<&>'
11:10:46 <infinisil> % :t (<&>)
11:10:46 <yahb> infinisil: ; <interactive>:1:1: error:; * Variable not in scope: <&>; * Perhaps you meant one of these: `<>' (imported from Prelude), `<*>' (imported from Prelude), `<|>' (imported from Control.Applicative)
11:10:57 <infinisil> % import Control.Lens
11:10:58 <yahb> infinisil: (0.00 secs, 0 bytes)
11:11:00 <infinisil> % :t (<&>)
11:11:00 <yahb> infinisil: forall {f :: Type -> Type} {a} {b}. Functor f => f a -> (a -> b) -> f b
11:12:08 * hackage proteome 0.3.13.0 - neovim project manager  http://hackage.haskell.org/package/proteome-0.3.13.0 (tek)
11:26:15 <ondrejs> What's the most popular prelude which is not Prelude?
11:26:36 <ondrejs> I've seen people mention `foundation` a lot...
11:32:07 <[exa]> there's the one from commercialHaskell called Rio also
11:32:59 <koz_> And protolude I guess.
11:33:02 <[exa]> I guess hackage/stackage stats could make a good popularity representation
11:33:53 <[exa]> foundation:rio:protolude are roughly 4:2:1 for download count on hackage
11:41:48 <ondrejs> nice, thank you
11:45:54 <[exa]> that may be biased though, rio is likely more popular with stack people but I can't find stackage stats
12:11:56 --- mode: glguy set +v u0_a384
12:12:17 <u0_a384> what..
12:16:12 <u0_a384> nick/haskell i join allright..
12:20:35 * hackage apecs 0.7.1 - Fast ECS framework for game programming  http://hackage.haskell.org/package/apecs-0.7.1 (jonascarpay)
12:22:04 * hackage apecs-gloss 0.2.0 - Simple gloss renderer for apecs  http://hackage.haskell.org/package/apecs-gloss-0.2.0 (jonascarpay)
12:42:34 --- mode: glguy set +v barryburd
13:46:39 <Athas> Does Haskell work well on POWER nowadays?
13:47:26 <Athas> Looks like GHC does claim to support it...
13:49:36 <geekosaur> not sure how well maintained it is, but it's there
13:50:26 <Athas> Looks like quite an adventure to obtain binaries.  I should probably just tell my users that my Haskell software requires x86.
13:54:37 <zachk> arm too I believe
13:56:31 <geekosaur> hm, actually did you mean power or ppc?
13:57:30 <davean> Athas: We do support POWER
13:57:44 <davean> Athas: Infact, I'm working on adding it to the new CI system right now
13:57:59 <Athas> geekosaur: POWER, the IBM ones.  Does PPC still exist as a distinct thing?
13:58:09 <geekosaur> yes
13:58:14 <davean> Athas: PowerPC does still exist, but OpenPOWER is basicly replacing it
13:58:22 <davean> give it 5 years
13:58:30 <Athas> davean: cool.  Well, not so much for me, because I can't afford POWER, but I might be able to tell my users/victims that they can use their fancy chips.
13:58:31 <davean> maybe longer - PowerPC exists in VERY long life stuff
13:58:41 <geekosaur> yeh, aout the onlyting keeping pc around now is some embedded uses
13:58:45 <davean> Athas: what, pray tell, are you doing?
13:58:51 <davean> Athas: I'm curious
13:58:51 <Athas> I'm asking because of an artifact evaluation where I neglected to mention that we'd only tested our code on x86, and of course some reviewer with a POWER system shows up!
13:58:53 <geekosaur> lot of cars wit it runing their onboard systems
13:59:00 <davean> geekosaur: some space hardware!
13:59:05 <davean> RadHard PowerPC is a thing
13:59:10 <Athas> I was only dimly aware that POWER/NVIDIA systems existed.
13:59:15 <Athas> That seems a really expensive way to drive GPUs.
13:59:35 <davean> Athas: Actually it can end up cheaper
13:59:45 <davean> Athas: POWER has PCIe4 and OpenCAPI
14:00:01 <davean> Athas: so total system costs can drop - esp on a perf/dollar basis
14:00:13 <davean> POWER chips aren't all that expensive - look at Raptor Talos II
14:00:23 <geekosaur> this doesn't sound like quite the same thing I was tinkig of, but I mosty knwo the more (these days) historical aspects
14:00:44 <geekosaur> POWER being the mainframe arch, PPC being the scaled-down single-chip version
14:01:03 <davean> https://en.wikipedia.org/wiki/RAD5500
14:01:37 <Athas> davean: I'll believe you!  I don't really know much about hardware pricing, I just haven't seen any good offers on POWER hardware the last few times I had influence on budgets.
14:02:05 <Athas> I'd personally be fine with non-x86.  Seems like POWER has even switched to little-endian in practice, so porting should be easy.
14:02:07 <davean> Athas: https://www.raptorcs.com/content/BK1MB1/intro.html
14:02:29 <davean> Athas: a 4-core POWER9 goes for ~375USD
14:02:48 <davean> You can get a full POWER system sub 2k
14:03:51 <davean> and with that double PCIe bandwidth and Cache-coherant 25G I/O links (which nVidia can use) it can make for very fast GPU accelerated systems.
14:04:12 <davean> Athas: thats actually what NVLink 2.0 is
14:04:32 <davean> Athas: so POWER9 is about the only palce you can fully use nVidia GPUs these days
14:04:40 <davean> weird world huh?
14:04:54 <davean> https://en.wikipedia.org/wiki/NVLink
14:05:15 <Athas> davean: hm!  Maybe I should try to convince the university to go that way if every they offer money for a new desktop machine.
14:06:15 <Athas> It does look substantially more expensive (for equivalent capacity) than the Ryzen machine I built for my home office.
14:07:15 <davean> Athas: yah - they're SMP4 so theres that, and they scale up fast, but they're more expensive than Ryzen. Do consider though they've got 4 DDR4 channels so its more performance comparable with ThreadRipper
14:07:32 <Athas> Yeah, it does look reasonable for a high-end system.
14:10:41 <davean> Athas: I think the 18-core at 1425USD is quite comparable in cost to a TR 2990wx and cheaper actually.
14:11:01 <davean> but yah, they don't do low end systems
14:18:32 --- mode: glguy set +v u0_a384
14:21:57 <hololeap> i'm working on a package, which pulls in a newtype, T, from another package, and a typeclass, C, from yet another package. where is the best place to put `instance C T where ...` without creating a newtype wrapper for T?
14:25:01 <zachk> hololeap, I would say just in the file you are working with them in 
14:25:25 <hololeap> zachk: what if i want to use that instance in multiple places?
14:26:20 <zachk> I would put it in a module then, and include the module in everything that needs that instance
14:28:05 <hololeap> ok... this was the part that was causing some confusion for me: what to name the module. does it have to be in a seperate namespace, or is it possible to overload the namespace that T lives in and add the orphan instance there? (that would be ideal)
14:29:05 <zachk> hololeap, you could just unzip the source module for T if its from hackage/cabal and add it there, but I wouldnt modify a library like that unless you had to 
14:29:45 --- mode: glguy set +v iam_nameless
14:30:09 <iam_nameless> hello room
14:30:18 <ski> hello, nameless one
14:30:38 <iam_nameless> sup ski
14:31:42 <iam_nameless> bro whats up
14:31:42 * ski was pondering CPS transformation
14:32:06 <iam_nameless> you the only one here??
14:32:13 <u0_a384> sup
14:32:42 <iam_nameless> all good bro
14:32:46 <iam_nameless> welcome
14:33:02 <u0_a384> welcome
14:33:24 <[exa]> is there some docs if/how Accelerate optimizes the memory layout of stuff in the CUDA output?
14:34:01 <u0_a384> teacher, how to edit nick name..??
14:34:03 <ski> iam_nameless : there's currently (apparently) 1261 IRC clients joined to this channel
14:34:15 <iam_nameless> am new here and not really god at scripts
14:34:18 <ski> /nick myNewNickName
14:35:06 <davean> hololeap: why not contribute the instance back to one of the two packages where it wouldn't be an orphan?
14:35:11 <Athas> [exa]: it does an array-of-struct to struct-of-array transformation.  I'm not sure if it's documented anywhere.
14:35:30 <Guest41841> Thanks.. its a cool now..
14:35:46 <Athas> [exa]: it doesn't do tiling or such, though.
14:35:59 <ski> Guest41841 : i suppose that nickname was already taken by someone ?
14:37:04 <[exa]> Athas: so I can't expect aligning 2-D arrays reasonably I guess
14:37:14 <Guest41841> hehehe, i try..
14:37:18 <[exa]> s/aligning/ordering/ I mean
14:37:29 <iam_nameless> hello is there any hacker on here
14:37:37 <iam_nameless> i need shell exploit
14:37:40 <Athas> [exa]: what is 'reasonably' in this case?
14:37:50 <zachk> iam_nameless, freenode isn't for that 
14:37:51 <Guest41841> hello too..
14:38:14 <Athas> IIRC Accelerate always uses a row-major or column-major representation, but I can't recall which one.
14:39:06 <hololeap> davean: wouldn't they have to add the other package as a dependency then?
14:39:08 <iam_nameless> zack thanks
14:39:19 <iam_nameless> do you have an idea where i can get that??
14:39:22 <geekosaur> hololeap, they would anyway
14:39:25 <[exa]> Athas: like seeing that the kernel takes blocks with same X paralelly so it makes X the 'first' dimension (not sure how that's named exactly), or something
14:39:32 <davean> hololeap: yes, but that may make sense.
14:39:36 <THE> GG
14:39:53 <Athas> [exa]: can you even do computation on blocks in Accelerate?
14:39:57 <davean> hololeap: and these everyone can benefit
14:40:01 <ski> THE also appears to be taken
14:40:38 <THE> O==]===========>
14:40:38 <[exa]> Athas: no but it must at some point create actual computation blocks during compilation
14:40:45 <hololeap> well, i can try sending a PR
14:41:46 <Athas> [exa]: yes.  Those are ordered the same way as the arrays in memory.  Unless you do manual indexing calculations, you should at least be guaranteed coalesced memory access.
14:41:56 <[exa]> good
14:42:04 <toxickiss> good..
14:42:04 <[exa]> thanks
14:42:43 <ski> toxickiss : so .. you're interested in learning Haskell ?
14:44:18 <toxickiss> yes.. i like all in here..
14:47:05 <toxickiss> oke..
14:47:28 <ski> toxickiss : feel free to ask whatever (e.g. newbie/beginner) questions you run into, related to Haskell
14:48:16 <ski> hopefully you have some learning material, like e.g. a textbook
14:49:51 <toxickiss> certainly
14:52:40 <toxickiss> welcome..
14:55:11 <toxickiss> hey, come on.. where any hacker..
14:57:00 <ski> ?
14:57:09 <geekosaur> somene seems to be stuck in the 90s
15:02:35 <toxickiss> no problem
15:12:28 <toxickiss> i from indonesia, i feel i firs in here
15:15:30 <siers> Can I do actions in a conduit?
15:16:29 <siers> lifting works
15:20:28 <graton> I installed Stack from the website and then Intero, with the corresponding setup in my .emacs. Subsequently opening a Haskell file froze Emacs. It opened fine after I removed both. Should I instead install Stack from the Debian package repo? A lot of packages have been outdated iny my experience (hence why I installed GHC from Guix instead).
15:23:57 <davean> siers: you can - a conduit runs in a base monad.
15:24:17 <siers> davean, right and thankfully liftIO worked :)
15:24:47 <siers> first time using conduit, I'm doing something pretty cool and it works! (it isn't too complex, but still)
15:25:25 <davean> siers: If you have deeper questiosn I'm sure people around here can help. I'm more a machines guy so I'll step out know but you're in good hands.
15:25:58 <siers> Machines guy, but you know about conduits running in a base monad? :)
15:27:13 <davean> I've worked with all the systems and as I've writen streaming systems I know how they HAVE to work.
15:27:19 <davean> they're all not that different from each other.
15:27:23 <davean> They can't be
15:27:27 <davean> its all the same basic idea
15:30:22 <hololeap> is there a basic default configuration somewhere for testing a haskell package using travis-ci?
15:31:05 <Solonarv> 'language: haskell' works if your project builds using cabal
15:31:27 <Solonarv> if you're using stack, the stack docs have a pre-made .travis.yml
15:31:35 * hackage casadi-bindings-internal 0.1.6.0 - low level bindings to CasADi  http://hackage.haskell.org/package/casadi-bindings-internal-0.1.6.0 (GregHorn)
15:32:34 <hololeap> Solonarv: the pacakge in question is https://github.com/reflex-frp/reflex and their travis-ci always fails... it looks like the tried to set it up with Nix, but it's a terrible result. i think stack would work better, but the problem is that i have no experience with stack
15:33:34 <hololeap> i got the tests passing locally with `cabal test`
15:34:56 <Solonarv> I don't know much more than what I said above, tbh
15:35:10 <davean> hololeap: the reflex nix builds work great
15:35:14 <davean> hololeap: theres a hydra for it
15:35:55 <hololeap> davean: this is the kind of failure that happens: https://travis-ci.org/reflex-frp/reflex/jobs/468528959
15:36:05 * hackage casadi-bindings-internal 0.1.6.1 - low level bindings to CasADi  http://hackage.haskell.org/package/casadi-bindings-internal-0.1.6.1 (GregHorn)
15:36:34 * hackage casadi-bindings-core 3.4.5.0 - autogenerated low level bindings to casadi  http://hackage.haskell.org/package/casadi-bindings-core-3.4.5.0 (GregHorn)
15:39:19 <hololeap> i have no experience with nix either...
15:41:19 <davean> do you know what hydra is?
15:43:52 * hackage proteome 0.3.14.0 - neovim project manager  http://hackage.haskell.org/package/proteome-0.3.14.0 (tek)
15:47:26 <hololeap> not without looking it up
15:49:35 <zachk> can I safely use unsafePerformIO with a NOINLINE pragma to make a global TVar? 
15:50:07 * hackage casadi-bindings 3.4.5.0 - mid-level bindings to CasADi  http://hackage.haskell.org/package/casadi-bindings-3.4.5.0 (GregHorn)
15:51:20 <lyxia> I believe that's one of the supported use cases
15:54:53 <Solonarv> Yup, that's a fairly standard pattern
15:55:28 <Solonarv> zachk: note that you need to use 'newTVarIO', *not* 'atomically . newTVar'
15:57:10 <lyxia> is there a difference
15:58:04 <zachk> Solonarv, oh thank you, but why is that? 
15:58:33 <Solonarv> I don't remember exactly, but the docs explain it
15:59:27 <davean> hololeap: its a nix-based build server that reflex uses for its testing.
16:00:52 <hololeap> davean: so they don't use travis ci?
16:12:33 <zachk> Solonarv, the doc's just say I can't use atomically inside of unsafePerformIO, I wonder why though 
16:13:28 <Solonarv> The issue is that you might end up running a transaction inside of another transaction
16:13:38 <Solonarv> which leads to Issues
16:15:50 <zachk> so you shouldnt do that or can't do that?
16:16:14 <zachk> "because using atomically inside unsafePerformIO isn't possible."
16:16:44 <Solonarv> Shouldn't, because it would cause issues. Fortunately you get an exception if you do it anyway.
16:20:39 <zachk> so my IO action's can know if they are being performed unsafely? or is that a builtin only thing?
16:21:21 <geekosaur> you can probably dig the implmentation out of GHC.IO or submodules
16:21:40 <Solonarv> The issues come when you're running an STM transaction inside another STM transaction
16:21:41 <geekosaur> otherwise, you seem to eb asking if unsafePerformIO is a supported general purpose mechanism
16:21:42 <geekosaur> otherwise, you seem to eb asking if unsafePerformIO is a supported general purpose mechanism
16:21:45 <geekosaur> whoops
16:21:50 <Solonarv> That can certainly be detected
17:35:03 <dmwit> Oh, neat. I always wondered why there were IO variants of some of the STM stuff.
17:50:57 --- mode: glguy set +v u0_a384
18:03:38 <koz_> Haddock isn't processing text in / /s as italics. Am I doing it wrong or somethign?
18:08:33 <davean> koz_: spaces?
18:09:06 <koz_> davean: No, I meant /foo/ isn't showing up as italics in the result.
18:09:16 <davean> Yes, spaces?
18:09:44 <koz_> Ah, yeah, there are spaces in my text.
18:09:48 <koz_> DO I have to wrap each word or something?
18:13:21 <u0_a384> sup..
18:20:04 <koz_> u0_a384: Hola.
18:29:17 <u0_a384> hy everybody..
18:29:45 <ACheesyName> what's up?
18:32:22 <u0_a384> ACheese, how about your day..
18:32:51 --- mode: glguy set +v _rht
18:39:21 <ACheesyName> is there a tool that will show the reductions of a computation in haskell? this would be for like, gaining a better understanding of how to write efficient code in a lazy style
18:40:23 <u0_a384> ACheesyName, goood...
18:42:23 <ski> @where stepeval
18:42:24 <lambdabot> <http://www.srcf.ucam.org/~bm380/cgi-bin/stepeval.cgi>,<https://github.com/bmillwood/stepeval>
18:43:03 <donnut> sky, i don't know..
18:56:05 <donnut> how make money from internet.. i need a job, please..
18:56:26 <ACheesyName> donnut: amazon mechanical turk, if it's still running
18:56:28 <koz_> donnut: This isn't the best choice of channel for money-making or employment advice.
18:57:37 <donnut> how the way
18:59:07 <ACheesyName> so this stepeval seems (A) not to be real haskell but a subset and (B) not to stop at WHNF, but keeps on reducing but other than that it's probably OK for learning
19:00:51 <donnut> oke.. thanks..
19:09:35 * hackage extensible-effects-concurrent 0.16.0 - Message passing concurrency as extensible-effect  http://hackage.haskell.org/package/extensible-effects-concurrent-0.16.0 (SvenHeyll)
19:51:28 <ACheesyName> seems broken http://bm380.user.srcf.net/cgi-bin/stepeval.cgi?expr=%28length+%28take+3+%28repeat+%22x%22%29%29%29 is there a reason this isn't reducing all the way to 3?
19:54:28 <GewJi> for the love of god, man.
19:54:33 <GewJi> progress today 
20:07:54 --- mode: glguy set +v donnut
20:08:58 <donnut> where [sky] and [ACheesyName]..
20:11:13 <donnut> i try make channel in youtube.. but i confused about content..haha..
20:12:47 <donnut> vansonsa..
20:14:22 <donnut> sup..
20:18:32 <donnut> who's on..
20:43:32 <coldpress> why not use the ghci debugger?
20:43:49 <davean> coldpress: have you had success doing that?
20:44:34 <coldpress> it shows the intermediate values of computations, if that's what donnut wants
20:53:23 <ACheesyName> coldpress: what commands do I have to put in to see the intermediate values of computations in ghci?
20:53:54 <coldpress> :list shows the context, including unevaluated variables
20:54:12 <coldpress> to get the value of those variables, :force <variable>
20:55:04 <coldpress> more at https://downloads.haskell.org/~ghc/7.6.2/docs/html/users_guide/ghci-debugger.html
20:56:03 <ACheesyName> doesn't look sufficient for my purposes
21:00:17 <coldpress> what are you looking for?
21:07:11 <ACheesyName> basically a trace like you get on stepeval http://bm380.user.srcf.net/cgi-bin/stepeval.cgi?expr=%28length+%28take+3+%28repeat+%22x%22%29%29%29 but that actually works :(
21:08:35 --- mode: glguy set +v donnut
