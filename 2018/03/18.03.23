00:01:12 <cocreature> manuel-uberti: fwiw beginner questions are perfectly fine in this channel
00:01:59 <pingu-> even complete nonsense. half of these people are rambling lunatics
00:02:16 <manuel-uberti> oh great! :-D
00:02:58 <pingu-> there was some Great Drama years ago, and now noobs fear #haskell for the profits of some splinter channel
00:03:22 <pingu-> An inner, in-group.
00:06:27 <pingu-> I believe they were selling some book; sad story. Is that what happened? I have no idea.
00:14:34 <MarcelineVQ> pingu-: if you're interested in inner in-groups check out #haskell-offtopic for a reasonably obscure one
00:24:40 <CodeKiwi> I don't think anyone's ever threatened to ban me here so that's a huge plus in my book :|
00:42:11 <pdxleif> > fail "no" "yes" "maybe"
00:42:13 <lambdabot>  *Exception: no
00:42:23 <pdxleif> How does this typecheck? ^
00:44:10 <pdxleif> I'd expect something like "couldn't match String -> String -> IO t" with actual type "IO a" ?
00:44:39 <liste> :t let k = fail "no" in k "yes" "maybe"
00:44:41 <lambdabot> t
00:44:51 <cocreature> :t fail
00:44:52 <lambdabot> Monad m => String -> m a
00:45:14 <pingu-> :t fail :: Monad m => String -> m a
00:45:14 <pingu-> fail :: Monad m => String -> m a :: Monad m => String -> m a
00:45:14 <pingu-> Prelude>
00:45:15 <lambdabot> Monad m => String -> m a
00:45:17 <cocreature> pdxleif: m does not have to be IO
00:46:39 <pingu-> fail :: Monad m => String -> Int -> Bool -> m a :: Monad m => String -> Int -> Bool -> m a
00:47:25 <pingu-> This isn't helping, is it?
00:50:47 <cocreature> what’s happening is that m gets instantiated to (->) String so you have "fail :: String -> (String -> a)". applying that to "no" and "yes" leaves you with something of type "a" and since you’re applying that to "maybe" GHC infers that "a" must be something of type (String -> b)
00:51:06 <pingu-> instance Monad ((->) r) -- Defined in `GHC.Base'
00:51:23 <pingu-> that damned continuation monad!!
00:51:27 <pingu-> it won't stop blowing minds
00:51:34 <cocreature> that’s not the continuation monad
00:52:06 <pingu-> no, it's the const monad isn't it
00:52:25 <cocreature> no it’s not. it’s Reader without the newtype
00:52:29 <pingu-> That's it. REader.
00:52:44 <pingu-> Isn't that synonymous with const?
00:52:57 <pingu-> I suppose not if you want that for the type level.
00:53:16 <cocreature> Const usually refers to https://hackage.haskell.org/package/base-4.11.0.0/docs/Control-Applicative.html#t:Const which isn’t an instance of Monad
00:54:19 <pingu-> I get the arrows confused. ((a -> r) -> r) -> Cont r a
01:04:28 <ZeuPiark> hello
01:06:32 <liste> hi ZeuPiark
01:08:04 <trcc> I just started looking into haskell, and hopefully within the next half a year I have created some production-ready code for it.
01:08:18 <trcc> However, it seems like i have dropped into a cabal vs stack vs nix debate
01:08:49 <trcc> and it is keeping me from really getting into it. Does anyone have a few great pointers/references or similar?
01:09:14 <cocreature> trcc: do you already know nix?
01:09:18 <trcc> No
01:09:50 <cocreature> then I would recommend against it for now. learning nix can be a challenge on its own and you can use Haskell perfectly fine without nix
01:10:00 <ventonegro> trcc: Use stack, get productive, choose later
01:10:15 <cocreature> stack vs cabal tends to be a somewhat religious debate. I use both but I would probably recommend stack to beginners atm
01:10:27 <trcc> Okay. Thank you
01:10:36 <trcc> both :)
01:10:41 <CodeKiwi> dibblego
01:26:09 <robstr> Hey, I struggle with postgresql-simple and `executeMany` I have a query like `insert into ? (bla) values (?)` and a List of type A with a `ToRow` instance, but I'm not able to execute this, because of the table name which i can build with `Identifier n`. Is there a way to `pre-substitute` the table name and run the resulting query ?
01:27:16 <lpsmith> robstr,  not as easily as I would like
01:27:46 <lpsmith> it's pretty simple dynamic sql to work around that,  but ugh
01:27:51 <dminuoso> EvanR: So you're suggesting that relying on IO for exceptions (rather than using Either/ExceptT) to propagate various failure conditions that I need to know about but have specific ways of resolving?
01:28:07 <dminuoso> EvanR: ^- that this is perfectly fine? Im just trying to find a starting point. :P
01:28:19 <robstr> lpsmith: crazy, can you provide an example ?
01:28:31 <robstr> or point me to a documentation ?
01:29:18 <lpsmith> robstr: alternatively,  consider using VALUES instead of executeMany
01:30:01 <lpsmith> robstr, https://hackage.haskell.org/package/postgresql-simple-0.5.3.0/docs/Database-PostgreSQL-Simple-Types.html#t:Values
01:32:55 <lpsmith> robstr, execute c [sql| INSERT INTO ? ? |] (Identifier "My Table", Values ["int4","text"] [(1,"Hello"),(2,"World")])
01:33:17 <lpsmith> instead of executeMany
01:33:41 <lpsmith> otherwise,  you have to use string concatination and make sure to get the escaping correct yourself.
01:37:06 <robstr> lpsmith: ty, oehh, I dont understand this piece .. ^^
01:37:54 <robstr> lpsmith: shouldn't this compile `Values [Identifier "a"] p` with `p :: [A]`
01:38:23 <robstr> I dont get why `Values [ "???", "??"]`
01:45:16 <lpsmith> robstr,  because the VALUES constructor basically allows you to substitute a table literal (not unlike executeMany) and also parameterize other things,  like a table name
01:47:39 <robstr> lpsmith: ok so will your example get into something like this `insert into mytable (int4, text) values ('hello', 'world')` ?
01:49:25 <lpsmith> sorta,  more like    insert into "My Table" (values (1 :: "int4",'hello'::"text"),(2,'world'))
01:49:51 <robstr> lpsmith: `(values (1 :: "int4",'hello'::"text"),(2,'world'))` this looks strange for me, havent seen this
01:49:56 <lpsmith> the extra parens around the values clause doesn't hurt,  at least in recent-ish versions of PostgreSQL.
01:50:09 <lpsmith> try that in psql
01:54:13 <dminuoso> :t ($)
01:54:15 <lambdabot> (a -> b) -> a -> b
01:54:18 <dminuoso> :t (=<<)
01:54:19 <lambdabot> Monad m => (a -> m b) -> m a -> m b
01:55:07 <robstr> lpsmith: thank you,i try to put this in
02:02:44 <DavidLopez> I am so lost with this https://github.com/tonymorris/fp-course/blob/master/src/Course/State.hs
02:02:50 <DavidLopez> I dont even know how to do exec
02:03:01 <DavidLopez> someone help me pleae :)
02:03:04 <DavidLopez> please*
02:06:00 <brynedwards> DavidLopez: that one has all the solutions...
02:06:12 <DavidLopez> whoops i gave the wrong one
02:17:12 <danza> hi all, i'm trying to set up a relatively simple script based on Turtle where i want to list a set of directories in a loop. i use the monadic instance of a Turtle Shell to iterate, but operations seem to be performed out of order ... i tried adding strict evaluation but it did not work
02:17:57 <danza> these are the two functions https://github.com/italia/pandoc-filters/blob/master/test.hs#L39-L54, i list test directories and then i try to run tests in every dir
02:18:35 <zoff> Hello everyone
02:19:06 <zoff> why do I get an error ( Couldn't match type ‘Either Text.Parsec.Error.ParseError CSV’ with ‘[Record]’ Expected type: CSV Actual type: Either Text.Parsec.Error.ParseError CSV ) when I run a command extractColumn csv' 2 :: [Integer] (I have saved csv' <- parseCSVFromFile "test.csv")
02:19:08 <danza> when i run the script, the outer function seems to terminate before the inner one, operations are executed in an expected order
02:19:28 <danza> as it can be seen in this case http://lpaste.net/363978
02:19:36 <zoff> Text.CSV.parseCSVFromFile "test.csv" Right [["1","Banana","17"],["2","Apple","14"],["3","Pear","21"],[""]]
02:20:04 <dataguy> greetings
02:20:23 <dataguy> when I do Just (read "4" :: Int) in the Atom REPL (haskell-ide)
02:20:37 <dataguy> I get Just 4 as expected
02:20:51 <dataguy> but when I do Just (read "4asfa" :: Int)
02:21:14 <dataguy> I get no exceptions in the repl tab and it prints out Just
02:21:38 <dataguy> read "4asfa" :: Int fails with an exception as expected
02:22:06 <dataguy> so why is calling Just  (read "blbalb" :: Int) swallowing the exception?
02:22:40 <merijn> dataguy: It is not, it's printing Just first, then as soon as it starts printing out the content of the Just it hits the exception
02:23:34 <dataguy> merijn: thanks, I got confused when it did not print the exception as it does without Just
02:23:55 <andriusbartulis> How does GHCjs and purescript compare today? Does the community have a consensus of which one to go with for production apps? Or are they similar in maturity?
02:24:30 <robstr> lpsmith: how do you guys handle db layout and _local_ types , for example my db has a `default now()` timestamp which I'm not interested in my normal type
02:38:37 <[exa]> andriusbartulis: ghcjs may be overkill for some applications, and from what I heard making it cooperate with other JS libraries is a bit more complicated
02:44:52 <andriusbartulis> [exa]: thanks
03:05:21 <lseactuary> is this the correct place to discuss CSP process e.g. this? https://www.cs.ox.ac.uk/projects/fdr/ or the off topic channel or another channel please?
03:06:45 <danza> lseactuary, this channel is about the Haskell programming language, check the links in your page
03:07:45 <lseactuary> danza - the syntax is kinda haskell no?
03:08:11 <lseactuary> so it would be an off topic question?
03:08:16 <cocreature> yes
03:08:28 <lseactuary> cool
03:08:31 <lseactuary> many thanks!
03:08:47 <lseactuary> btw cocreature - solved the other issue - i made a silly typo in an earlier command and the image compiles now :)
03:09:38 <cocreature> nice
03:36:42 <phz_> hey
03:36:44 <phz_> any persistent guru?
03:37:00 <merijn> phz_: I'm a guru at being frustrated by persistent :p
03:37:34 <phz_> nevermind I found it actually
03:37:37 <phz_> merijn: yeah so do I
03:37:45 <phz_> the public interface is pretty… ugly :D
03:37:50 <phz_> I like selda way more
03:37:52 <phz_> it composes better
03:38:02 <merijn> Selda needs a bunch of improvements, though
03:38:13 <merijn> streaming API, ability to access database specific internals
03:38:35 <merijn> At least with persistent I can punch into it's gut and rip out database specific bits
03:39:04 <phz_> yeah
03:39:06 <phz_> that’s true
03:39:37 <merijn> But I need to polish my channel library and thread management library before I get to those yaks :p
04:19:04 <ertesx-w> merijn: can't use async?
06:25:17 --- topic: 'https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | cabal update stuck? http://mail.haskell.org/pipermail/haskell/2018-January/025325.html'
06:25:17 --- topic: set by geekosaur on [Sat Feb 03 00:04:44 2018]
06:25:17 --- names: list (clog cloudhead martingale rostero h4cks4w shivansh John882 machinedgod gestone syq ryantrinkle perspectival DTZUZO gmhafiz mizu_no_oto ryantm SenasOzys tomphp oisdk coot ziocroc2 Major_Biscuit ystael ma27 xplat asfhr chaosmasttter msecundo arkymad agentultra jimmylu2333-fedo cppxor2arr t7 hhh Gurkenglas sdothum w1n5t0n bravech datajerk cdg danthemyth amelliaa jdnavarro codesoup BlueRavenGT knupfer lortabac bitprophet1 insanitea psychicist__ troydm tabaqui1)
06:25:17 --- names: list (asheshambasta inad922 Lowl3v3l zeroed humanoyd Ariakenom phenoble alowaniak fr33domlover ertes-w simukis Voldenet Snircle tsaka_ toby1851 dadabidet Lears safe sayola ub eliasr rgc caryoscelus raingloom logzet Arcaelyx ninjawithaneedle lseactuary robstr_ swalladge ninedotnine unK_ OnkelTem roconnor plutoniix jeltsch thc202 paraseba catsup marr raichoo acidjnk wtfunctional robatosan xpycm connrs merijn oo_miguel edelweiss vlatkoB thblt wonko7 physicist__ ketil_)
06:25:17 --- names: list (ZeuPiark mounty alexbiehl hiroaki mountaingoat takuan chatchat1 jluttine ali_bush alex`` thallada chele ibrahims pingu- zaquest fishythefish remloh[m] jhrcek sellout-1 keep_learning kuttifunk danvet otto_s_ chelfi byorgey michaelw jfredett dolio dmiles[m] UnChallengeD dustinm alx741_ sw1nn carlomagno1 SourOatMilk lagothrix taktoa govg theDon dmiles ian_andrich PlasmaStar nakal banc mnoonan_ ramatevish hucksy_ S1t1Schu markus1189 nwf cpallares brynedwards)
06:25:17 --- names: list (meinside pita pavonia infinity0 alhariel pacak mko_io ixian leothrix acarrico typedrat eddsteel Xal justanotheruser bbrodriguez aijony hiratara stass zemm jwynn6 rybak mou maqbool Guest72625 bas080 hpc byte512 unyu Squarism khisanth__ kw Wamanuz3 majoh beerdrop Lord_of_Life prg318 twk- ertes FortunaTP rotty parsnip SovietBeer phryk petermw peschkaj rodlogic bind mcallisterjp bo borkdude maldata slackman HalfEatenPie hydraz nek0 spacebug sqrt2 S007 ziyourenxiang)
06:25:17 --- names: list (nbardiuk a9rkzz bluepixel bbear exarkun Olgierd remix2000 slomo_ jimmylu2333-rpi3 stiell yahb mniip m0rphism jzl NinjaTrappeur sjdthree[m] artemismucaj[m] m2[m] steshaw[m] Barnabas[m] stuebinm[m] riussi[m] lolipducker[m] blackyberlin[m] boj lightandlight jgl[m] william[m]1 Joe[m]1 alibabzo[m] rbocquet hawnzug[m] enick_346 bgrayburn[m] dirb M-kitsune sudoreboot[m] oats[m] vsts[m] shekel[m] anomie[m]1 mith[m] andrewbanchich[m adaschma[m] sn[m] lysgaard[m])
06:25:17 --- names: list (jacobleach ArchieT mfk[m] henriquezanin[m] ajtowns[m] nyuszika7h DwarfMaster mstruebi1 Randy SuprDewd idupree2 leah2 AntiSpamMeta BrAsS_mOnKeY CurryWurst bartavelle henrytill paroxp mtjmullen kiltzman Fuuzetsu infinisil mk-fg tjbp puffnfresh Kevin[m]3 lathebiosas[m] thekyriarchy__1 magnap WilliamHamilton mm-vcleo[m] Obscurity[m] marsam fuziontech HoelKervadec[m] mossid[m] MarcelineVQ borjarus[m] thetransformerr[ superpat[m] jml cdal mpickering strugglingming)
06:25:17 --- names: list (AlainODea runeks ryanbooker spicydonuts Tesseraction xpt[m] jtz nak typetetris langkid1 ranberry g3lnana[m] optikol[m] cheater jnoah Tritlo banjiewen stephe chivay SlashLife komasa jophish mkoenig chindy tabaqui jerme__ stux|RC-only barrucadu atk PHO_ electrocat bafain matchray julmac eagleflo amosbird hc marvin3 Myrl-saki armyriad deepfire Cale kini fuzen[m] Eduard_Munteanu jchia Jonno_FTW howsiwei[m] Zialus endulka mr_yogurt spruit11 dqd sud0 mankyKitty)
06:25:17 --- names: list (georgew srk Adluc nesqi DrAwesomeClaws bsmt fresheyeball ArrayWindrunner[ dibblego StoneToad sim590 dload Ke pyrtsa Putonlalla DTZUZU tv ego Klumben oberstein oldsnakey zmanian lumimies andrew_n_ bbaren Bigcheese lopex jbweston[m] etiago Forkk mek42 amiri gienah_ rofl_ akfp filippos beala ReinH sigmundv sns pimlu elpfen revprez_stg thunderrd hanna mrBen2k2k2k cetchmoh dx25 thek3nger[m] siddhanathan[m] Peter_Storm toma[w] M-krsiehl stigo[m] superobserver[m])
06:25:17 --- names: list (aispark[m] boathouse2112[m] amidstbinary[m] innaytool[m] dkellner[m] jomari[m] phittacus wilo[m] butterthebuddha jgcarvalho jameseb sdhand Taneb delYsid M-art-solopov nemesit|znc squisher Desoxy x_o_r jcjf falafel clamchowder eldritch moei aananev loli ericsagnes SolarAquarion ubercow dysfigured bgamari Fairy m4lvin lizzie amalloy_ shachaf philippirrip tdjones Heartmender breadjpg revprez clampy jchia_1 ahihi vikasn[m] dh fionnan acln revprez_anz worch abrar)
06:25:17 --- names: list (saksham atomi juri_ osa1 kuno albel727 nonlinear R0b0t1 centril RaptorJesus mceier bornjre solatis vaibhavsagar bno1 revprez_yk Charn a_t texasmynsted MindlessDrone nD5Xjz sis7 emilis[m] xinming_ nikivi hamishmack dpn` terrorjack ocharles rann shans_ gornikm systemfault gluegadget tjpeden strmpnk stig bytesighs ebutleriv seanparsons dave_uy gxt Tuplanolla newsham tromp salva jbalint cromachina esrarkesh bjobjo __main__ jhhuh JoshS ninegrid Adeon drbean)
06:25:17 --- names: list (oeiuwq[m] psYchotic[m] whaletechho defanor dyl fizzgig[m] timdeh[m] barcabuona otulp Princess17b29a purewater[m] lawsomw ycheng drewr hegge ralu noan masaeedu[m] Reisen Deewiant Akii herzmeister[m] equalunique[m] RGamma idnar[m] hdurer[m] jerin[m] Matthew[m] Frytka[m] dpower Natch sophien[m] Hjulle dubious[m] trikl[m] m4sk1n segin nurupo aer[m] megaTherion kerru Frankablu glguy verement owickstrom Youmu TommyC bydo tg metts ashirase Sgeo Patternmaster linduxed)
06:25:17 --- names: list (nopf lassulus ffledgling tumdedum hexec[m] grumble cdo[m] Chobbes comiccobe EvanR hsiktas amatecha_ reem_ Hijiri anderson iross soncodi saurik wrengr_away mrm zyla ec2-user1 Fylwind phadej markhuge benonsoftware Cthalupa seliopou_ jgornick_ Raptor8m3 mak` fugyk oh_lawd NemesisD u-ou eacameron Scorchin bollu marcel_ mattp_ lexi-lambda mbeidler spinda TabAtkins heyj llinguini joedevivo capicue mkurkov__ gleber_ nullifidian hvr constant gspia kadoban zv nnplv)
06:25:17 --- names: list (telser bsima h4z3[m] fryguybob qwertydvorak maerwald Stratege__ Tehnix1 jokester gargawel casdr tctara giraffe jud cjwelborn Jackneillll fairfieldt dbohdan QuRyu cods Rick[29SMPittsbu lajaraa jiji606[m] kwantam jrm fxrs philosau1 ackthet fredcy wagle ByronJohnson sjl_ toure dstolfa pmade urdh alanz dtulig dxld rgrau gabiruh spoonm TimWolla Morgawr jan-sipr jorj implementation averell sea-gull_ peterhil thaumavorio WhereIsMySpoon_ hiredman coeus dschoepe)
06:25:17 --- names: list (sigmacool[m] mrBen2k2k2k__ alexoundos7[m] acro toppler avn treehaqr filwisher crlane sellout colescott GuillaumeBuisson superusercode liste dilinger buhman kriztw nathanic reactormonk canta Guest40464 carbolymer ericmathison jrslepak zachary12 Chousuke Firedancer gopnikovitch drdo pharaun asjo nilOps hexagoxel sanitypassing Philonous TMA mgaare_ legend_ keyking zenzike_ lukd_ AWizzArd Guest72221 Eliel Ewout ianp tnks tokik dysfun Rembane mmaruseacph2 comboy)
06:25:17 --- names: list (kaol ClaudiusMaximus jakutis dmj` yaknyasn mbrcknl_ jzelinskie cansis sethetter xplat|work_ libbyk deba5e12_ chatnowvvv[m] andriusbartulis wto Ferdirand mearnsh reorder_ s4msung danza-cloud niko m1dnight_ akshayn davean1 monochrom ggVGc valdyn earthy Profpatsch Axman6 mimi_vx echoreply kloeri Velpoman tessier dejanr `0660 Ch3ck fluxit blaha[m] geekosaur hendi[m] survove zmt00 nuxdie fat[m] duncan^ marble_visions przemkovv andyo srhb ahf bickle1 Kneiva iw00t)
06:25:17 --- names: list (korans Vq suzu aidecoe so bshelden veverak sdrodge petercom1and MitchW zymurgy zekt greeny_ m0ar xa0 fiddlerwoaroof Deadhand xaimus_ phz_ int-e peutri_ thebnq mdarse croben_ danz alek1 micro_ Ornedan Warrigal_ Guest85913 Nikotiin1 acowley robogoat_ saftsuse_ caw_______ mikedlr micmus Chadtech ketralni` mrus Sose Benzi-Junior pikajude Unode mulk Willis niklasl rembo10 bod_ dbxn max-m Duns_Scrotus kav quicksilver sonOfRa Sigyn kosmikus lokydor[m] luminousnine)
06:25:17 --- names: list (CARAM___ lambdabot yefllower[m] ecx jrabe baweaver Strix pjan jordanlewis tippenein ion andjjj23 fbauckho tmciver Guest86301 llwu wladz cynick M2tias pikhq CindyLinz lordivis234[m] hsyl20 dan64 tomaw k Twey xttraces asayers[m]1 qmm fakenullie marens esph cpape johs ttk2[m] laaksoan[m] bb010g mt WinterFox[m] unknownln bennofs[m] Makinit beemo[m] lkurusa ThousandLions[m] sudom0nk[m] km42[m] felipeac[m] jvalleroy[m] Nerka[m] Litom[m] PatrickM[m] Prince781[m])
06:25:17 --- names: list (kasbah[m] imbigbrother[m] Niamkik FjordPrefect M-BostonEnginerd asthma[m] KevinMGranger mad[m]1 M-DarkTrancer weareswarmcity[m Takumo M-moyamo zaphar_ps[m] angelvigo[m]1 cipher1024[m] schplaf[m] thejonny[m] abel-abel[m] spacekitteh[m] freeman42x buwas[m] TylerCecil[m] kmicklas[m] rootnode setre Tharbakim benzrf raibutera noplamodo betawaffle tsahyt swflint Meanirelli codedmart aminb lines_ jonrh bigs wavewave zph dstockwell tdammers Majiir epta amx gnusosa)
06:25:17 --- names: list (joachifm ggherdov spion cyphase SAL9000 pigs endojelly lowryder adarshaj quaestor simony _janne redcedar joel135 Argorok Igloo cpup Wizek dukedave prefork etrepum noobst incomprehensibly fingerzam Xorlev _flow_ aramiscd bwong[m] erikd knmae Ranhir PierreM_ koz_ Chris[m]6 bitemyapp dsal Bengi kyagrd edwardk edofic Kamuela ancarda sclv dashed paf31 sdemos xacktm stvc whiteline felixonmars huaw obfusk tsani izidorobaltazar[ malthe xnyhps grayhatter linuxdaemon)
06:25:17 --- names: list (mikeplus32 sl2c Mon_Ouie TC` RahulS tinco lunatic[m] oleks solarus bs sbauman Geekingfrog mrozek marek Drezil drewbarbs renning[m] jamesfielder[m] skewz[m] agrif mk_modrzew bcoppens rhodeable[m] Frans-Willem Enigmagic blitzlightnin[m] ekrion Gabscap jstolarek webstrand lugh Nik05 hive-mind capisce megamanmalte[m] ChongLi jared-w ctag_ tomku notint[m] Moyst richi235 trosa jakehehrlich_ dpren chriswk dgpratt kaychaks mgttlinger iravid feepo thi_ SegFaultAX)
06:25:17 --- names: list (jdevlieghere sm joncfoo vodkaInferno riatre Arguggi zebrah destiny_ cross adamCS Zemyla Ankhers cgfbee sveit sphalerite edwtjo lpsmith peddie ikopico_ PsyDebug reyu a3f lavalike lispy logcat_ elvishjerricco Entroacceptor sphalerit statusfailed nee`` froztbyte qz APic xandaros jtcs zerokarmaleft foolswood scinawa Foritus chirpsalot brennie _ashbreeze_ Purlox bmjh reconmaster[m] iampigman[m] alsoStevenXL da-x aspiwack[m] nisstyre kwaku[m]1 vikram__________ lynn)
06:25:17 --- names: list (S11001001 jdt ab9rf dgonyeo edran M-HirmeS Guest74576 nh2[m] mendez ericbmerritt_ avdi monad_cat milessabin prizim ghuntley ski tlax dogui int0x27h cmaj9 peteretep niveus mbrock metalrain_ JSharp OliPicard rjungemann billstclair msmorgan teej bgyss bbielsa gareth__ Cir0X kipd dessmm ectos darthThorik pagoda_5b zpconn__________ pasukon ajmccluskey solidsnack nbouscal houli angerman ianconnolly grandy_____ rizary thoradam hansihe bitonic runde Meow-J_ gridaphobe)
06:25:17 --- names: list (srid changyj jorendorff cgag PotatoGim rodarmor trig-ger feltnerm cdornan_ wizonesolutions customminer zgrepc bradparker angular_mike_ tarcwynne__ higherorder Tallenz thomashoneyman fnurglewitz carter mindtree alexknvl Guest32984 pchiusano verlet64 posco adamse si14 thoughtpolice baamonde jmct jameshaydon TyOverby__ nelll taktoa[c] lukexi Gabemo lanodan sujeet statusbot mokus ft [df] x1n4u mt_caret_ caa51h uptime yarou cyberlard dutchie Hafydd miklcct ephemera_)
06:25:17 --- names: list (hiq[m] reactormonk[m] mlen absurd[m] Soft hodapp supki mxf Biohazard michalisko alp ljhms wraithm ftop_ d3lxa arkeet greymalkin Athas stux|RC-- d6e_ bxc_ cjay- ghostyy ahri michalrus Novitsh vimto dxld[work] harmaahylje sdx23 astompydan[m] dexterfoo Neo bus000 nibbling matzo ironChicken orzo dong910325[m] joehillen AveSyx[m] ps-auxw arw shai_hulud[m] Guest14885 rotaerk azahi sha-2 michi7x7 pikolinosimo SuperTux88 PyroLagus freeside cocreature oak- dpepsilon)
06:25:17 --- names: list (diskie abbe ventonegro minad exio4 garphy Saizan sbrg elomatreb rootmos Madars yushyin akermu bob_twinkles Jaxan cjh` porcow[m] towaii[m] ub[m] capncanuck[m] testingriotnmatr Quoran[m] CodeKiwi GGMethos armlesshobo Maxdamantus marmalodak magicman pdxleif noexcept aurieeeh mingc cschneid_ nimbleark XMunkki lukky513 shiona hiptobecubic fadein Tspoon_ liff ent jix tolt Guest22057 shapr Logio xpoqp Solarion brisbin scav nshepperd1 skeuchel zge anhj ongy reptar_)
06:25:17 --- names: list (pierrot eL_Bart0- vin-ivar divVerent fall_ niluje lachenmayer poga keri wz1000 __name__ ManiacTwister brent80_plow Wesleysld xintron_ mjrosenb jw358 x-n2o integral Jon beaky japesinator abra0 ichigo MasseR dumptruckman amuck mrd cheshircat obiwahn Zowlyfon DDR deni kipras valkyr2e crooked carc Zoddo rom1504 hackage akemot jonge nille RevJohnnyHealey gothos joeytwiddle ij ernst fergusnoble catern mitchty c_wraith Burnout641_ lyxia geal tek0_ jackhill deu lieven)
06:25:17 --- names: list (xxpor_ n3parikh joeyh Cheaterman monte stefan- cesardv emmflo _cyril_ kshannon gilbertw1 ccase ynyounuo navilan- sunya7a ijp lpvb relrod wting tureba bengt_ TallerGhostWalt noxd Liskni_si platz tortal binaryblade tzaeru bwe killtheliterate bjs chrzyki reu Cathy anoe raid nonzen esssing uwap wtw Jello_Raptor @ChanServ parseval Ninja3047 Someguy123 pranz3 LeaChim hcit clever vqrs dminuoso CuriousErnestBro lokydor_ klugez DoubleJ_ anhduy numberten wamaral)
06:25:17 --- names: list (anishathalye [exa] Dykam lionaneesh noctux hrnz pta2002 meck trulsa guios koala_man exferenceBot ambrosia ephemeron hjklhjklhjkl runawayfive flux burp lukeshu aweinstock domenkozar cnomad mauke_ heinrich5991 stailin c-rog schaeferpp kubrat_ cow-orker zomg ircbrowse_ hanDerPe1er Amadiro cic1 Clint asm89 qdickon jaargon aib pfoetchen dredozubov opqdonut max3raza fgaz scopedTV EricZou DustyDingo Fubar^ dxtr x0x0_ Laney noteventime[m] ollieh Gratin[m] berton)
06:25:17 --- names: list (turt2live davidar_ wizek[m] lierdakil[m] HMPerson1 javjarfer[m] tester668[m] albertsg[m] davidar JanPath[m] hakan[m] jangsentry10032[ drasich[m] hendrik[m] angelbeats[m] mak81[m] goodboy[m] undu[m] rellen shivani_[m] Mike[m]1 wzy8L-B2[m] pcm77[m] lycium[m] aniketd[m] octalsrc[m] guest69[m] riadvargas[m] Mcpurplemuffin[m geetam happyente[m] thekyriarchy gpunk[m] anaxios aaronc[m] Masaomi[m] zalipuha[m] asenski[m] tibike_m[m] plll[m] kumori[m] JackM[m] Half-Shot)
06:25:17 --- names: list (vitamin-q charlag[m] naviknair7[m] billsam[m] jbarthelmes[m] Dako300[m] georg3[m] M-whoops clementd[m] Orbstheorem[m] puminya[m] M-rgh synopz[m] M-ms Akito[m] intheclouddan honeymilktea[m] Naughtmare[m] Heino[m] emme[m]1 michbad noperope[m] braidn[m] M-wamaral camael[m] unclechu Cadey[m] avatias0[m] moon[m] fristonio[m] Deleh[m] atopuzov[m] minhnhdo[m] srenatus iohidtbhfam[m] dbramucci[m] djangoblockchain Google[m] Shaunthesheep[m] Mougan[m] DavesTestingAcco)
06:25:17 --- names: list (testtt0x11[m] Niboor[m] razvanc-r[m] pnrfne[m] kebertx[m] wannabeog[m] chominist[m] addem[m] c0ff33[m] sielicki Guest340521[m] micond[m] himmAllRight[m] fgaz[m] agraba[m] neechoo virginiam[m] Jikstra[m] am2on bingen[m] cakecake[m] infty[m] NikitaKuznetsov[ maverickwoo[m] dezren39[m] ElliotKiyomizu[m asonixdog[m] gelnana[m] asm[m]1 scrypso[m] manko[m] milli staffehn_ dpanth3r Ring0`` jlouis_ _6a68 jinblack rjeli_ prooftechnique mcspud daoo[m] raphaelsquelbut[)
06:25:17 --- names: list (saci[m] Guest1573[m] icen[m] matheusrv[m] naudiz swarm1321[m] SCHAPiE ncl28_ avocado Gothmog_ gareth_ Blkt)
06:29:55 <masaeedu[m]> Is it possible to model the reverse state monad in a language that lacks lazy evaluation?
06:30:18 <asfhr> ertes-w: That looks relevant. I'll read it. Thank you.
06:32:05 <ertes-w> asfhr: it explains exactly the pattern (!!) uses
06:33:12 <asfhr> ertes-w: That's great. I've started reading it. Awesome writing so far.
06:33:22 * masaeedu[m] sent a long message: masaeedu[m]_2018-03-23_13:32:59.txt <https://matrix.org/_matrix/media/v1/download/matrix.org/BBGYyMbZJmsKssfAPcqDGxyq>
06:33:44 <dminuoso> @src (!!)
06:33:45 <lambdabot> xs     !! n | n < 0 = undefined
06:33:45 <lambdabot> []     !! _         = undefined
06:33:45 <lambdabot> (x:_)  !! 0         = x
06:33:45 <lambdabot> (_:xs) !! n         = xs !! (n-1)
06:36:02 <ertes-w> asfhr: hope it helps =)
06:38:10 <asfhr> ertes-w: I have no doubt. (Actually, I'll be reading the whole page after finishing that section first) :)
06:38:47 <dminuoso> asfhr: https://wiki.haskell.org/wikiupload/3/3e/Right-fold-transformation.png This by the way is one of the most revealing pictures I have found.
06:41:15 <ertes-w> dminuoso: it doesn't really explain stateful folds though
06:45:05 <dminuoso> ertes-w: Dunno. For me it was helpful to think of this as `foldr (\x r -> \k -> case k of 0 -> x; _ -> r (k-1))
06:45:33 <dminuoso> i.e. to think of each (:) being replaced by \k -> case k of 0 -> x; _ -> r (k-1)
06:46:33 <dminuoso> ertes-w: But your article is an interesting read.
06:48:47 <ertes-w> it takes the algebraic approach to understanding foldr
06:49:05 <ertes-w> for people like me who can't handle diagrams =)
07:06:44 <agentultra> https://haskellbook.com also has a great chapter on folds; the reasoning by syntactic substitution works well for a lot of cases.
07:09:58 <agentultra> foldr (+) 0 [1..4] -- (1 + (2 + (3 + (4 + 0)))) -- the neat thing being that if the function being applied is not strict in its arguments then foldr only forces the first element of the spine and can terminate early over infinite lists n stuff.
07:13:54 <ertes-w> > foldr (\x -> Just . maybe x id) Nothing "abcde"
07:13:56 <lambdabot>  error:
07:13:57 <lambdabot>      Ambiguous occurrence ‘foldr’
07:13:57 <lambdabot>      It could refer to either ‘Data.List.foldr’,
07:13:57 <NitroZ> Anyone has high PA/DA or UR/DR wordpress site that maybe can help me? Please PM Thanks
07:14:04 <ertes-w> @undef
07:14:04 <lambdabot> Undefined.
07:14:06 <ertes-w> > foldr (\x -> Just . maybe x id) Nothing "abcde"
07:14:08 <lambdabot>  Just 'e'
07:14:29 <NitroZ> Anyone has high PA/DA or UR/DR site that maybe can help me? Please PM Thanks
07:15:36 <lyxia> masaeedu[m]: does implementing lazy evaluation in the language count as a solution
07:21:45 <Hafydd> And after just under 8 hours later, GHC is installed.
07:23:53 <tabaqui1> I cannot "reify" in "Q Exp" right?
07:24:30 <tabaqui1> Is there another way to get info about argument types inside Q here?
07:40:25 <dminuoso> > typeRepArgs $ typeOf (Just 1)
07:40:28 <lambdabot>  [Integer]
07:40:32 <dminuoso> tabaqui1: Do you mean something along those lines?
07:41:36 <tabaqui1> dminuoso: not sure, I didn't use Typeable before
07:41:41 <tabaqui1> I'm talking about TH
07:41:49 <dminuoso> Ah, nevermind. :)
07:41:54 <tabaqui1> a = $(test ''TypeName)
07:42:12 <tabaqui1> test name = do (reify name >> undefined)
07:42:26 <tabaqui1> "TypeName" is not in the type environment at a reify
07:42:34 <tabaqui1> dminuoso: ok :)
07:49:18 <merijn> ugh, some monadic loops are PITA to work out in Haskell :/
07:50:56 <merijn> I have a loop that should reuse the same (bracketed) resource until it hits a stop condition where it has to switch to a new resource. The simple straightforward recursion doesn't work, because then the free part of the bracket never runs, but rewriting it some other way is tricky too...
07:51:34 <merijn> Every time I hit a case like this I spend more time trying to figure out the loop than the entire rest of the program :\
07:52:31 <cocreature> tabaqui1: if you move TypeName to a separate module that error should disappear
07:52:33 <monochrom> The loop also runs for more time than the rest of the program, so at least it's fair. :)
07:52:47 <merijn> monochrom: Honestly, I'm not even sure
07:53:00 <merijn> I feel like someone has to have abstracted this in some nice way before...
07:53:45 <tabaqui1> cocreature: You mean declare template and types in one module and function 'a' in another?
07:55:07 <cocreature> tabaqui1: the relevant part of the GHC manual is “Accordingly, the type environment seen by reify includes all the top-level declarations up to the end of the immediately preceding declaration group, but no more.”
07:55:25 <cocreature> your type declaration is probably in the same declaration group as your splice
07:55:39 <tabaqui1> hmm, doesn't fit for me, actually I need to declare instance, so I'll make it all together in one template
07:56:32 <cocreature> you can probably also insert some dummy top level splice to force a new declaration group
07:58:13 <tabaqui1> cocreature: maybe, I look around with full instance declaration at first
07:58:15 <tabaqui1> thanks :)
08:43:51 <ertes-w> merijn: use 'mask' and do the bracket yourself
09:13:37 <fendor> is there a reason why helm is not in stackage?
09:17:19 <lseactuary> qq is i have data TurtleCmd3 = TurtleCmd1 TurtleCmd1 | Push3 | Pop3 | Skip3 does it mean a pair without a comma e.g. Push3 Pop3 is an option?
09:17:30 <mclark1129> So coming from a world of .NET or node, I'm used to working with fairly flexible date/time strings in my json that ultimately deserialize into their correct values.
09:18:23 <mclark1129> I'm finding that this is much more difficult in aeson.  So I'm wondering if a) this is just that I don't understand aeson, b) it's just more difficult in haskell, or c) it is more difficult but there are things that can be done to approximate the behavior I see in other languages.
09:18:50 <davean> fendor: I'd expect it doesn't fit stackage's model.
09:19:32 <davean> mclark1129: there are things you can do to approximate the behavior of other languages pretty easily there. Theres some actual issues though.
09:21:01 <davean> mclark1129: you can just parse it with a set of alternatives
09:21:26 <davean> mclark1129: part off the problem is its not always clear what a time in a given format actually means
09:22:20 <mclark1129> davean: And that's fair, date formats can sometimes be ambiguous.  But right now (working with aeson generic instances at least) it seems like it's incredibly rigid
09:22:25 <davean> mclark1129: you can stack a bunch of parsers together with <|> so the first working one gets used
09:23:01 <mclark1129> Would that preclude me from using the generic instances to automatically encode decode my type?
09:23:15 <davean> You can easily make your own "BestGuessTime" type that has whatever specific variant of this behavior you want
09:23:30 <davean> mclark1129: Not the derived types, but that specific type yes
09:23:39 <davean> well, maybe not
09:23:46 <mclark1129> hmmmm, my own date type I haven't thought of that
09:24:11 <davean> aeson directs its behavior by type (at the generic level)
09:24:11 <mclark1129> In theory if I did that I could implement toJSON fromJSON with a set of formats like you suggest
09:24:17 <davean> yep
09:24:33 <davean> so of course it picks conservative values for common, shared types
09:24:48 <lseactuary> can someone explain the data structure of TurtleCmd3? data TurtleCmd3 = TurtleCmd1 TurtleCmd1 | Push3 | Pop3 | Skip3 and data TurtleCmd1   = Forward1 | TurnLeft1 | TurnRight1 deriving (Show)
09:25:20 <davean> by conservative I mean "definately correct" really
09:25:22 <mclark1129> Ok that sounds like a real possibility.  Are you aware of any existing types/libraries that might already implement a flexible date type like this?
09:25:36 <mclark1129> It'd be a good exercise for me to roll my own, but just curious.
09:26:04 <fendor> davean, you mean build conflicts?
09:26:18 <fendor> davean, because i was able to just pull it from hackage and it worked without a problem
09:26:41 <davean> mclark1129: not off the top of my head
09:26:55 <davean> fendor: of course if you pull something from hackage it should build without a problem
09:27:36 <davean> fendor: thats not what stackage tries to change really
09:27:44 <fendor> davean, but it also had no conflicts :(
09:27:45 <davean> fendor: stackage tries to get things to agree on what they use
09:28:00 <davean> fendor: you won't see conflicts using cabal (which stackage uses)
09:28:10 <davean> er, stack uses
09:28:27 <davean> fendor: I think you missudnerstand what a "conflict" is here
09:28:27 <fendor> davean, i see, can i find out if there are build conflicts?
09:28:40 <davean> fendor: there aren't when you build one thing that is self-consistent
09:28:48 <davean> (this is part of why I think stackage is silly)
09:28:51 <fendor> davean, ok, i mean dependencies
09:29:11 <davean> fendor: the problems occure when you want to use two things that require mutually exclusive dependencies
09:29:37 <davean> but each thing on its own should never have an issue
09:29:59 <fendor> davean, yeah, can i look it up somewhere if there are dependency issues?
09:30:12 <fishythefish> lseactuary: A TurtleCmd3 is either a TurtleCmd1 (wrapped by the TurtleCmd1 constructor), or a Push3 or a Pop3 or a Skip3. A TurtleCmd1 is either a Forward1 or a TurnLeft1 or a TurnRight1
09:30:15 <davean> fendor: with what stackage wants?
09:30:32 <davean> fendor: "dependency issue" isn't some objective function except with respect to self-consistency
09:30:50 <davean> fendor: "dependency conflict with $X" is defined
09:31:08 <davean> fendor: stackage wants no dependency conflicts between any 2 packages they include
09:31:35 <fendor> davean, yes, and i want to know with which package it conflicts
09:31:47 <lseactuary> fishythefish type TurtleBranch3 = Either TurtleProg1 TurtleCmd3 and type TurtleBranches3 = [ TurtleBranch3 ]
09:31:54 <lseactuary> so how do i go from TurtleProg3 -> TurtleBranches3
09:31:58 <lseactuary> like what is the structure to / from
09:32:03 <davean> fendor: well, thats just the most likely thing to cause it to not be included
09:32:14 <davean> fendor: it could also be that no one wants to put in the effort for stackage for that package
09:32:20 <fishythefish> lseactuary: what is a TurtleProg3?
09:32:45 <fendor> davean, in the latter case it should be easy to add it to stackage?
09:32:45 <fishythefish> lseactuary: is there a paste where these datatypes are laid out?
09:33:02 <davean> fendor: in theory I guess, I've never done it.
09:33:24 <lseactuary> fishythefish sure let me make
09:34:32 <lseactuary> fishythefish please see here: http://lpaste.net/3152857126020317184
09:34:41 <davean> fendor: I'd start at https://github.com/fpco/stackage/blob/master/MAINTAINERS.md#adding-a-package
09:35:02 <davean> fendor: I only use hackage though, maybe someone here has stackage experience
09:35:21 <fendor> thanks, i will try it tomorrow :)
09:35:37 <fishythefish> lseactuary: so what should compile3 do?
09:36:13 <lseactuary> The idea is that contiguous sequences of plain commands (moving and turning) get wrapped up as whole plain programs, in the Left case of the Either; Skip3 commands get discarded; and stack commands Push3 and Pop3 are represented in the Right case.
09:37:19 <lseactuary> fishythefish - added the next command just incase it overlaps
09:37:57 <fishythefish> lseactuary: there's a relatively trivial implementation: map `Right` over the TurtleProg3, but I dunno if this is what you want
09:38:05 <lseactuary> i can try
09:38:13 <lseactuary> you have the command?
09:40:42 <lseactuary> compile3 = map (Right TurtleProg3)
09:40:44 <lseactuary> like that?
09:41:16 <fishythefish> lseactuary: no, just `compile3 = map Right`, but based on the semantics you described, that's not what you want
09:41:17 <lseactuary> wait thats wrong lol
09:41:20 <lseactuary> ye
09:41:39 <lseactuary> i need to do cases right?
09:41:43 <lseactuary> but i was confused by the data structure
09:41:58 <fishythefish> yup, you'll need case analysis on the TurtleCmd3s
09:42:34 <ozgura> You know how QuickCheck has the ==> operator, and allows you to skip test cases. Does anyone know if there is a way of reporting the number of skipped/discarded test cases?
09:42:59 <ozgura> I can use verboseCheck which tells me as it goes, but not like a summary at the end
09:43:09 <lseactuary> fishythefish is it possible to give an example structure e.g. [Right1, Left1] -> [Right1] then i can try to write the function
09:43:32 <fishythefish> lseactuary: er, you're the one with the domain knowledge. don't you have examples?
09:43:43 <lseactuary> they have examples to test after you write the function lol
09:43:56 <fishythefish> so use those?
09:44:08 <lseactuary> TurtleProg3 = [TurtleCmd3] = [TurtleCmd1 TurtleCmd1 | Push3 | Pop3 | Skip3]
09:44:17 <lseactuary> but what is an example of [TurtleCmd1 TurtleCmd1 | Push3 | Pop3 | Skip3]
09:44:28 <lseactuary> given  TurtleCmd1   = Forward1 | TurnLeft1 | TurnRight1
09:44:45 <lseactuary> is it [Forward1 TurnLeft1, Push3 Pop3,...]
09:44:47 <lseactuary> like this?
09:44:47 <fishythefish> ignoring the abuse of notation, [], [Push3], [Pop3], [Skip3], [TurtleCmd1 Forward1, TurtleCmd1 TurnLeft1, Push 3], etc.
09:45:15 <lseactuary> ok
09:45:17 <fishythefish> do you understand how to read the type declarations?
09:45:29 <zyla> ozgura: it was mentioned somewhere in the manual http://www.cse.chalmers.se/~rjmh/QuickCheck/manual.html
09:45:32 <lseactuary> i understand the simpler cases like this: data TurtleCmd1   = Forward1 | TurnLeft1 | TurnRight1 deriving (Show)
09:45:40 <lseactuary> but never seen this: data TurtleCmd3 = TurtleCmd1 TurtleCmd1 | Push3 | Pop3 | Skip3
09:45:55 <ozgura> zyla: I couldn't find it in the manual unfortunately
09:46:15 <zyla> `trivial` gives you a similar ability
09:46:25 <fishythefish> lseactuary: if I rewrite that as data TurtleCmd3 = MyConstructor TurtleCmd1 | Push3 | Pop3 | Skip3, does that make sense?
09:46:34 <zyla> Doesn't directly count cases skipped by ==>, though
09:47:01 <fishythefish> lseactuary: they've made the (common) choice to give a constructor and a datatype the same name
09:47:07 <fishythefish> but these are distinct
09:47:11 <lseactuary> fishythefish is that basically forward1 | left1 | right1 | push...
09:47:32 <fishythefish> lseactuary: essentially, yes, but with constructors in the way
09:47:44 <lseactuary> ooh
09:50:30 <lseactuary> fishythefish - ok trying
09:59:18 <lseactuary> fishythefish am i close (updated the link: http://lpaste.net/3152857126020317184)
10:00:18 <fishythefish> lseactuary: no
10:00:26 <fishythefish> is this for a class?
10:00:30 <lseactuary> nope
10:00:49 <lseactuary> linking some older code i make to make some tree pics
10:01:09 <fishythefish> do you know what iterate does? what are the `where` bindings supposed to do there?
10:01:32 <lseactuary> x can be TurnCmd1 (3 types) or Push or Pop or Skip
10:01:36 <lseactuary> so im trying to do case analysis
10:01:43 <lseactuary> x is a list
10:01:50 <lseactuary> of commands
10:02:34 <fishythefish> i feel like you're stringing together relevant keywords without actually understanding how to write haskell
10:02:47 <fishythefish> x cannot simultaneously be a TurnCmd1 or Push or Pop or Skip and a list
10:03:09 <fishythefish> there is no case analysis in that code (at least, not the way you intend)
10:04:30 <fishythefish> (the code doesn't even compile, by the way, which should be your first hint that something is wrong)
10:05:31 <lseactuary> yeah im more just thinking how to structure the code then i can tweak
10:08:12 <Zemyla> Has anyone come up with laws for signum? Because I think I have.
10:08:34 <Zemyla> signum (fromInteger 0) = fromInteger 0; signum (fromInteger 1) = fromInteger 1; signum x * abs x = x
10:09:51 <lseactuary> fishythefish as im trying to figure out what we are going from and to
10:09:57 <lseactuary> once i have that i can figure out the function :)
10:12:25 <fishythefish> lseactuary: well, you know what you're going from and to, right? you described the semantics to me already. next step would be to draw up the skeleton for how you'll traverse the program
10:12:34 <lseactuary> oki
10:13:12 <lseactuary> just to check im going from a list of commands [Forward1, TurnRight1, Pop3] to ???
10:15:32 <fishythefish> lseactuary: to TurtleBranches3, as your own type signature states
10:15:44 <lseactuary> type TurtleBranches3 = [ TurtleBranch3 ]
10:15:48 <lseactuary> type TurtleBranch3 = Either TurtleProg1 TurtleCmd3
10:15:53 <lseactuary> so a list is Either TurtleProg1 TurtleCmd3
10:15:56 <fishythefish> lseactuary: that list of commands should be [TurtleCmd1 Forward1, TurtleCmd1 TurnRight1, Pop3]
10:15:57 <lseactuary> which doesnt make sense to me
10:16:02 <lseactuary> ok
10:16:11 <lseactuary> now i can try :)
10:16:27 <lseactuary> [Forward1, TurnRight1, Pop3] --> [TurtleCmd1 Forward1, TurtleCmd1 TurnRight1, Pop3]
10:16:37 <fishythefish> lseactuary: no? a TurtleBranches3 is a list of TurtleBranch3. A TurtleBranch3 is either a TurtleProg1 or a TurtleCmd3. Not sure where your confusion is coming from
10:17:13 <lseactuary> [Forward1, TurnRight1, Pop3] --> [Either TurtleCmd1 Forward1, Either TurtleCmd1 TurnRight1, Either Pop3 __]
10:17:14 <lseactuary> right?
10:17:18 <fishythefish> lseactuary: no, that's not what compile3 does. I'm saying that the former list is invalid - it doesn't typecheck. You mean the latter list. That's just the input, though
10:17:44 <lseactuary> oh ye it as more just to understand what was going on
10:17:46 <lseactuary> ok cool
10:18:20 <fishythefish> lseactuary: I'm not sure you understand what's going on. I'm not even talking about the logic of your code - I'm saying you don't seem to have a handle on how to use the datatypes themselves.
10:18:43 <lseactuary> compile3 takes TurtleProg3
10:18:52 <fishythefish> lseactuary: For example, here's an exercise: enumerate the possible values of TurtleCmd3.
10:18:56 <lseactuary> which is for exmaple [Forward1, TurnRight1, Pop3] right?
10:19:06 <lseactuary> data TurtleCmd3 = TurtleCmd1 TurtleCmd1 | Push3 | Pop3 | Skip3
10:19:06 <fishythefish> no, that example is incorrect
10:19:08 <lseactuary> ok
10:19:17 <lseactuary> this is why i didnt get data TurtleCmd3 = TurtleCmd1 TurtleCmd1 | Push3 | Pop3 | Skip3
10:19:21 <fishythefish> lseactuary: those aren't the possible values, that's just a pasted data declaration
10:19:38 <lseactuary> is it [Forward1 Forward1, TurnRight1 Push3, ....]
10:19:42 <fishythefish> no
10:19:47 <lseactuary> or
10:19:53 <fishythefish> do you understand the `TurtleCmd1 TurtleCmd1` bit?
10:19:56 <lseactuary> is it [Forward1, TurnRight1, Push3, ....]
10:19:57 <lseactuary> nope
10:20:08 <fishythefish> the first `TurtleCmd1` is the name of the constructor
10:20:17 <fishythefish> the second is the type of the argument it takes
10:21:06 <fishythefish> so e.g. if instead we had `TurtleCmd3 = Foo TurtleCmd1`, the values would be Foo Forward1, Foo TurnLeft1, and Foo TurnRight1
10:21:17 <lseactuary> yeh
10:21:30 <lseactuary> except how does TurtleCmd1 Push3 for example make sense
10:21:45 <fishythefish> but since the constructor is named `TurtleCmd1`, the values would instead be TurtleCmd1 Forward1, TurtleCmd1 TurnLeft1, and TurtleCmd1 TurnRight1
10:21:50 <fishythefish> just rename Foo to TurtleCmd1
10:23:08 <lseactuary> TurtleCmd1 Forward1 what does this mean for example
10:23:34 <lseactuary> because isnt TurtleCmd1 also Forward1 or TurnLeft1 or TurnRight1
10:23:54 <fishythefish> TurtleCmd1 has two different meanings here
10:24:09 <fishythefish> it can refer to the constructor for TurtleCmd3 or it can refer to the datatype TurtleCmd1
10:25:11 <fishythefish> lseactuary: let's try a simpler example. `data Foo = Int Int` <-- can you make sense of this?
10:25:39 <lseactuary> the (second) Int is of type Int
10:25:40 <lseactuary> ?
10:26:10 <fishythefish> Foo is a datatype with a single constructor whose name is "Int"
10:26:16 <fishythefish> that constructor takes a single argument of type Int
10:26:30 <fishythefish> exercise - what are some values of type Foo?
10:26:32 <lseactuary> data Foo = Chicken Int is also valid?
10:26:37 <fishythefish> yes, that's also valid
10:26:41 <lseactuary> i see
10:26:53 <lseactuary> well Foo is just Int's then like 1,2,3
10:26:56 <fishythefish> no
10:27:12 <lseactuary> I dont get what chicken is doing here
10:27:25 <fishythefish> it's a constructor
10:27:38 <fishythefish> values are Chicken 1, Chicken 2, Chicken 3, etc.
10:27:44 <fishythefish> or in my example, Int 1, Int 2, Int 3
10:27:52 <lseactuary> oh
10:28:02 <lseactuary> interesting
10:28:32 <lseactuary>  data TurtleCmd3 = TurtleCmd1 TurtleCmd1 | Push3 | Pop3 | Skip3 means then TurtleCmd1 TurtleCmd1 or TurtleCmd1 Push3 or ....
10:28:50 <fishythefish> no
10:29:02 <fishythefish> parse it as data TurtleCmd3 = (TurtleCmd1 TurtleCmd1) | Push3 | Pop3 | Skip3
10:29:12 <lseactuary> ooooh
10:29:15 <fishythefish> Push3, Pop3, and Skip3 are also constructors, but they don't take arguments
10:29:27 <lseactuary> i was looking at it like data TurtleCmd3 = TurtleCmd1 (TurtleCmd1 | Push3 | Pop3 | Skip3)
10:29:30 <lseactuary> hence the confusion
10:29:56 <fishythefish> I urge you to read a beginner haskell tutorial - any of them will explain basics like this
10:30:06 <lseactuary> sorry for the confusion
10:32:20 <lseactuary> http://lpaste.net/3152857126020317184 i need to fill the left hand side now right?
10:33:32 <fishythefish> lseactuary: no, look at the type of the input to compile3 again
10:33:50 <lseactuary> ah list
10:34:15 <lseactuary> i should use recursion
10:34:16 <lseactuary> right
10:36:12 <fishythefish> lseactuary: up to you, you can also use higher order functions to accomplish the same thing
10:36:23 <lseactuary> yup oki
10:36:26 <lseactuary> i think its clear now
10:36:27 <lseactuary> i will try
10:38:17 <dminuoso> lseactuary: By the way. If you ever get confused about what's what in data, you can use an extension GADTSyntax.
10:38:32 <lseactuary> googling it
10:41:40 <dminuoso> lseactuary: It makes it really explicit to see that data constructors are functions, and you get to clearly see the type of each data constructor.
10:41:54 <lseactuary> interesting
10:42:00 <lseactuary> i will play around with this more tomorrow
10:42:01 <lseactuary> :)
10:42:07 <lseactuary> it is useful for a few other things i am trying in haskell
10:42:08 <lseactuary> many thanks
10:42:10 <dminuoso> (Well not necessarily functions, if you have a constructor that takes no argument)
10:45:14 <lseactuary> yikes this is tricky
10:45:30 <lseactuary> thinking
10:48:28 <lseactuary> may i have a clue
10:48:32 <lseactuary> shall i show what i tried
10:49:10 <lseactuary> updated
10:49:12 <lseactuary> i know its wrong
10:49:31 <lseactuary> i basically want a case on the first element
10:49:33 <lseactuary> in the list
10:50:13 <fishythefish> sounds like you're moving in the right direction
10:50:54 <Arthur_> hi
10:51:09 <lseactuary> thinking how to write a case on the first element
10:53:17 <fishythefish> lseactuary: you can define a function to do this, or use `case`
10:53:24 <lseactuary> yup trying
10:54:42 <amalloy> how do i enable TypeApplications in ghci? i tried `:set -XTypeApplications`, but it still asks me "Did you mean to enable TypeApplications?" when i run something like `:t head@Int`
10:56:13 <MarcelineVQ> odd, mine says "Pattern syntax in expression context: head@Int Type application syntax requires a space before '@'"
10:56:17 <fishythefish> amalloy: you need a space
10:56:23 <fishythefish> `:t head @Int` should work
11:00:20 <lseactuary> fishythefish - am i close? http://lpaste.net/3152857126020317184
11:01:31 <amalloy> interesting. thanks. it does indeed want a space, though it won't tell me that
11:03:38 <fishythefish> lseactuary: no, that's not the right syntax for `case`
11:04:01 <lseactuary> but the logic is good?
11:04:04 <fishythefish> your first case will also probably need to do a bit more to consume as many TurtleCmd1s as possible
11:04:19 <lseactuary> hmm thinking
11:04:20 <fishythefish> otherwise, at a glance that seems right
11:04:31 <lseactuary> yup checking google for the notation
11:08:43 <lseactuary> tricky
11:18:04 <woodson> lseactuary: I building an api where one can query objects by defining their own types. However if they provided an object with an Id within the json object the endpoint will not accept it.
11:18:29 <woodson> because the api accepts the id as a url parameter
11:18:36 <lseactuary> interesting
11:18:44 <woodson> I need someway to remove the object id for the user
11:18:54 <woodson> when using my api post request
11:19:05 <woodson> the other option that I am thinking
11:19:12 <woodson> is to return a tuple instead
11:19:20 <woodson> so (ObjectId, Object)
11:19:31 <woodson> but I dont know if this format is intuitive
11:19:48 <cocreature> I often have something like a "data WithId i a = WithId i a" type that I used to add an identifier to an existing type
11:20:07 <woodson> so it would record the end user to built their data record without the id field in their structure
11:21:38 <lseactuary> fishythefish not sure i know what to do now.
11:22:09 <woodson> cocreature: data SObjectId = SObjectId Text  deriving (Generic, Show) <-- i have an object like so
11:22:21 <woodson> where I expect each user to have in their record
11:22:36 <woodson> how would one create their data type record
11:22:40 <woodson> with your example?
11:22:42 <lseactuary> fishythefish i will have another look tomorrow kinda tired now
11:22:46 <lseactuary> many thanks for the help :)
11:23:23 <cocreature> woodson: WithId (SObjectID actualId) datarecord
11:23:31 <tjg> If someone could help me fix this get past this dep issue thanks !!!    http://lpaste.net/363995
11:23:48 <dminuoso> tjg: Your resolver is probably too new.
11:24:04 <dminuoso> tjg: ghc-mod only works up until 9.21 (or whatever the most recent 9.x is)
11:24:31 <dminuoso> tjg: Though there are workarounds for newer resolvers that you can find at the bottom here: class Functor (f :: * -> *) where
11:24:37 <dminuoso> Sorry, wrong clipboard content. https://github.com/DanielG/ghc-mod/issues/900
11:25:23 <woodson> Oh ok I see pretty much what I was thinking of doing
11:25:48 <woodson> data WithId = WithId (SobjectId, DataRecord)
11:26:30 <woodson> i was thiking of just making it a type
11:26:47 <woodson> type objectWithId = (SobjectId, DataRecord)
11:26:51 <tjg> If someone could help me get past this dep error so I can start installing software, thanks.      http://lpaste.net/363995
11:28:14 <cocreature> woodson: I generally tend to avoid type synonyms. they provide none of the benefits of newtypes while still adding yet another layer of names that users need to see through to figure out how to actually use your API
11:28:53 <cocreature> tjg: dminuoso has already told you what the problem is and linked you to the issue
11:30:10 <tjg> cocreature , ok thanks my mistake, I did not see the link. I will check to see if it helps, thanks again!!
11:30:35 <dminuoso> tjg: Note that you can also simply downgrade your resolver to lts-9.21
11:31:39 <tjg> dminuos , how would i do that?
11:31:44 <cocreature> if you’re using stack then you might also want to consider using intero instead of ghc-mod which should support 8.2 out of the box and is a bit easier to setup ime
11:33:18 <tjg> cocreature, well I am trying to get haskell to work with the Atom text editor and the instructions tell me I need ghc-mod, but ill check to see if  i can use inter instead.
11:36:08 <tjg> how would I downgrade my resolver to lts-9.21  http://lpaste.net/363995
11:36:46 <byorgey> tjg: just edit your stack.yaml
11:36:51 <dminuoso> tjg: Well normally you would create a separate stack project. Inside that stack project, you can specify the resolver in your stack.yaml
11:37:06 <sm> or use --resolver lts-9.21
11:37:52 <tjg> ok, I will try editing this file: /home/tjg/.stack/global-project/stack.yaml
11:38:37 <byorgey> oh, I suggest following sm's suggestion instead of editing your global stack.yaml
11:38:59 <byorgey> I thought you already had a stack.yaml for ghc-mod specifically
11:40:16 <bitemyapp> it's not a good idea to globally install intero, ghc-mod, or similar
11:40:24 <bitemyapp> you want to install them per project so that the GHC APIs are compatible
11:40:32 <bitemyapp> not that I recommend using the IDE backends at all to start with
11:40:36 <bitemyapp> you're better off using ghcid and GHCi
11:40:52 <bitemyapp> intero does the right thing here by default (self-install per project) but I still don't use it.
11:41:17 <tjg> ok, so I create a project with stack, so after that where do i place --resolver lts-9.21
11:41:52 <bitemyapp> I think you can edit your stack.yaml if one already exists
11:41:56 <dminuoso> tjg: You specify the resolver while creating a new project. Alternatively you can edit the stack.yaml or an already created project and change the resolver.
11:42:22 <bitemyapp> https://www.youtube.com/watch?v=sRonIB8ZStw this is old and kinda long, but runs through a lot of common scenarios
11:42:27 <bitemyapp> including blockers like what you're running into
11:42:37 <bitemyapp> I should probably restructure it as a blog post to make it more accessible.
11:43:15 <tjg> dminuoso , if you could please post a link that has the commands for that so I could have a reference?
11:44:09 <dminuoso> tjg: `stack --help`
11:52:44 <omps> why would someone want to learn haskell?
11:54:07 <Athas> omps: it's a productive and pleasant language.
11:54:54 <mclark1129> Is it possible to somehow override an existing FromJSON instance for a type?  In my case `LocalTime`
11:55:23 <Athas> mclark1129: no, but you can use a 'newtype' wrapper around LocalTime, for which you define another instance.
11:55:55 <madseason> hey, how can I write f(x) that returns modified int x, and also prints the value, I want to be able to do this f(f(a))
11:55:56 <omps> Athas: I am not sure.. But i wonder what can be done with haskell and not with .net or java or perl or python?
11:56:27 <mclark1129> you wouldn't be able to print the value without using the IO monad
11:56:46 <Athas> omps: they can all do the same things.  The question is how easy they are to use.  Haskell is very expressive, but also very safe, while remaining somewhat simple.  It's a nice combination.
11:57:07 <madseason> I figured, so my type is Int -> IO Int, and that prints + returns value, but I cannot chain calls
11:57:22 <Athas> omps: however, .Net, Java, Perl or Python have the advantage that they have more libraries available.
11:57:39 <Athas> madseason: f =<< f a
11:57:54 <Athas> :t (=<<)
11:57:56 <lambdabot> Monad m => (a -> m b) -> m a -> m b
11:58:31 <Tuplanolla> Either `<=<` or `iterateM` could work too, madseason.
11:59:17 <mclark1129> madseason: what function are you trying to chain it to?
11:59:20 <madseason> yeah, it works, thanks, I have no idea for now what that is, I just started learning haskell
12:01:56 <mclark1129> so using newtype as a wrapper, would I have to basically reimplement ANY typeclass the localtime already implements?
12:02:00 <mclark1129> e.g. Show
12:02:57 <lyxia> classes can be derived
12:04:16 <marvin3> doUntilKeyPress :: (Char -> Bool) -> IO a -> IO () <-  would you use that signature or (Char -> Bool) -> IO a -> IO a?   (IO () vs IO a)
12:04:54 <w1n5t0n> hi all, I have a bit of trouble understanding how to use StateT for my case. Here is what I am going for and how I think I should go about implementing it, but I'm not sure if I understand it right: http://lpaste.net/363996. Any help would be greatly appreciated!
12:05:07 <Athas> mclark1129: if you use the GeneralizedNewtypeDeriving extension, all of the classes can be autoderived.
12:05:49 <Athas> mclark1129: you do have to list them, though.  There is no way to say "make 'Wrap a' an instance of any class that 'a' is an instance of".
12:06:05 <mclark1129> but if I just specify `deriving` for any class I need then that should work as well?
12:06:09 <guessWHo> in python we have pass is there something similar like pass in haskell ??
12:06:11 <Athas> Yes, exactly.
12:06:29 <Athas> guessWHo: 'return ()' is closest, but why do you need it?
12:06:37 <lyxia> marvin3: I prefer not to lose information implicitly, so IO () -> IO () or IO a -> IO a but not IO a -> IO ()
12:06:55 <fishythefish> guessWHo: python has pass because you need an empty statement; in haskell, you're working with expressions instead of statements, so can you give an example of where you'd want `pass`?
12:07:08 <lyxia> mclark1129: yes
12:08:07 <marvin3> actually I guess it should be IO [a], if anything. perhaps I should make both doUntilKeyPress and doUntilKeyPress_, named similar to mapM and mapM_
12:08:45 <Athas> marvin3: careful; that way lies space leaks.
12:08:58 <Athas> Make sure the doUntilKeyPress_ does not actually construct the list in memory.
12:09:19 <guessWHo> fishythefish : i have some code which builds and works and now i'm expanding that code but for now i'm just writing functions definitions and not the logic itself so if i compile with just definitions it'll throw missing binding error
12:09:28 <guessWHo> fishythefish : nothing serious but i asked it anyway
12:09:29 <lyxia> marvin3: right
12:11:19 <Athas> guessWHo: use 'undefined' for that.
12:13:38 <guessWHo> Athas : nice thanks :)
12:14:06 <marvin3> guessWHo this is common too:  todo = error "Not implemented yet". and then if you remove todo definition you'll get compile error everywhere it appears
12:14:49 <mclark1129> Yeah that's one thing I really like about functional languages, the idea that you start by just modelling how you expect all the types to fit together
12:14:58 <mclark1129> and then fill it out after the structure is more or less sound and type checks.
12:32:31 <dminuoso> guessWHo: an even better replacement might be `_`
12:33:19 <dminuoso> guessWHo: Because `undefined` will compile, while `_` will not stop compilation, but remind you that you have missing holes in your code.
12:36:35 <EvanR> undefined is annoying
12:37:00 <EvanR> is it a placeholder for something i didnt do, or intentionally there because i have a proof it wont be evaluated, but something must filled in
12:37:47 <EvanR> you could use _ holes and -fdefer-type-errors
12:37:52 <dminuoso> EvanR: Is it ever better than `_` with -fdefer-typed-holes?
12:38:03 <EvanR> there is a -holes?
12:39:10 <dminuoso> EvanR: https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/using-warnings.html#ghc-flag--fdefer-typed-holes
12:39:34 <EvanR> thats awesome
12:39:47 <EvanR> it does the job i explained first
12:40:04 <orzo> If a haskell value is never altered, just passed around to various functions and it is a large data structure, am i gauronteed that it wont do an expensive copy and just pass references ?
12:41:50 <orzo> I expect something like an Int to be copied by value but I expect a Maybe is by reference.  Is that right?
12:42:18 <lyxia> that sounds right
12:42:36 <EvanR> Int is not, Int# is
12:42:57 <EvanR> Int (ignoring optimizations) is a boxed value like everything else
12:42:59 <orzo> Well, it'd not alarm me if Int became Int# at times
12:43:17 <EvanR> it can only become Int# automatically if it wouldnt change semantics
12:43:18 <orzo> but i want to make the assumption that larger structs are by reference
12:43:45 <EvanR> thats the idea
12:43:46 <orzo> for performance reasons
12:44:05 <EvanR> unless you modify the structure, its not being copied in any way
12:44:32 <dminuoso> orzo: Do you have a concrete example to consider?
12:44:47 <EvanR> also, it will be shared between threads, unlike some other systems
12:44:50 <exarkun> does it make sense to talk about "pass by reference" vs "pass by value" in Haskell at all?  Or is the question really about the memory performance characteristics of ghc evaluation?
12:45:01 <EvanR> its a runtime implementation question
12:45:18 <maerwald> probably, none of this is specified
12:45:23 <EvanR> "passes a refernce"
12:45:29 <dminuoso> orzo: Sharing requires a name at least.
12:45:35 <dminuoso> EvanR: No. It's call-by-need.
12:45:36 <EvanR> not a reference to some abused language characteristics
12:45:40 <dminuoso> Err sorry, I meant exarkun.
12:45:54 <EvanR> call-by- is a wasteland of confusion
12:46:30 <orzo> i have some c code that has two collections of hte same objects in different orderings.  in c, they use pointers for one of the containers and the other builds all the data into custom linked-list nodes
12:46:31 <EvanR> sometimes seems like whether pluto is a planet
12:47:23 <orzo> i was considering whether i need any fancy ref in haskell (for performance reasons only) or if it'd make sense to just have "copies" of the values in two separate containers
12:47:33 <orzo> i'm thinking the later
12:47:49 <dminuoso> orzo: In simple terms, sharing (i.e. avoiding recomputation) can only happen if the expression is named.
12:47:58 <EvanR> orzo: cool fact, bytestring slices are references into some primitive immutable bytearray, so if all your objects eventually came from it (and are bytestrings internally), all containers of them will be ultimately pointing into the original bulk array
12:48:22 <orzo> i'm not linking with c
12:48:29 <orzo> i'm re-impementing some c algorithm
12:48:49 <EvanR> why do you want copies
12:49:07 <orzo> i don't want actual copies, i want semantic copies in haskell, because it's simpler
12:49:13 <EvanR> eh?
12:49:15 <bahamas> hello. I'm tring to install haskell-ide-engine with stack and I get this error. http://lpaste.net/363998. anyone know how I can fix it?
12:49:27 <EvanR> what is a semantics copy
12:49:56 <orzo> a semantics copy means that if you alter one copy, the other is left alone, that's normal in haskell
12:50:23 <EvanR> i cant even get that far because its like were talking about altering or not the value of 2
12:50:37 <orzo> right, because haskell.
12:50:40 <EvanR> we dont have objects with identity in the language
12:51:03 <orzo> but in C, if you share memory, it's more normal and natural that mutations are also shared
12:51:11 <orzo> in haskell, mutation would cause a copy
12:51:23 <EvanR> a partial copy, at least
12:51:32 <EvanR> but thats not semantics
12:51:34 <orzo> right, but you don't pay the memory cost before that, so you are sharing
12:51:40 <EvanR> its a real copy
12:51:59 <orzo> it's a semantics copy before it's a real copy
12:52:03 <EvanR> i dont get "it makes more sense to have copies"
12:52:24 <EvanR> it makes more sense to have values
12:52:29 <orzo> is it really so hard to understand, you know what sharing pointers to the same struct typically means in C, surely
12:52:52 <orzo> typically, the C code will not take care to peform a copy before mutating
12:52:54 <EvanR> i know C, i just dont know what youre talking about
12:53:26 <dminuoso> orzo: The execution model of Haskell and C are so vastly different, that comparing them is really hard.
12:53:30 <exarkun> seems like the question was simpler when it was less well defined
12:53:32 <EvanR> it makes more sense NOT to copy the haskell objects, if they arent being modified
12:53:35 <EvanR> not more sense to copy
12:53:47 <exarkun> or less well elaborated on, anyway
12:53:49 <orzo> i have a C algorithm with shared pointers, and thus shared mutation, but I don't think it's relying on the mutation, so I was considering whether it is better and cheap to use full copies in haksell instead of pointers
12:54:11 <orzo> and you've answered that it is
12:54:17 <EvanR> it makes more sense to share, not copy
12:54:51 <orzo> i kind of suspect everyone understand what i'm doing at this point, we're just quibbling over language
12:54:58 <EvanR> if the algorithm is using actual mutation for something, thats another story
12:55:32 <EvanR> yes it is confusing in haskell to talk about "copies" when youre not doing copying
12:55:34 <cocreature> orzo: what’s confusing is the use of the term “full copy” in the context of Haskell. I’m honestly not sure what you mean by that
12:55:39 <maerwald> if you need in-place mutation, do actual in-place mutation
12:55:57 <EvanR> because there are operations in some libs called "copy" which ... does a copy to help tune performance
12:57:29 <geekosaur> orzo, "full copy" rarely happens even in Haskell. most things are pointers. the things holding some pointers might need to be copied and modified, but rarely anything else unless you've used the wrong data structure
12:57:44 <geekosaur> (e.g. some pathological uses of [a])
12:58:11 <maerwald> is any of that specified?
12:58:52 <bahamas> so anyone have any idea how to solve this issue? https://github.com/commercialhaskell/stack/issues/825 the solutions proposed there don't work for me
13:01:20 <orzo> geekosaur: I expect a large record in haskell to be more expensive (mutation-wise) than updating a Data.Map or something.
13:01:37 <geekosaur> you should learn how things work, then
13:01:43 <orzo> it would keep all the slots in a contiguous region of memory and have to copy all bu tthe mutated field
13:01:56 <orzo> i'm worng?
13:02:09 <geekosaur> you can flatten things, but it's an explicit optimization that you can enable or disable as needed per data type
13:02:16 <cocreature> orzo: all the fields will be stored as pointers (normally) so the slots are quite small
13:02:23 <geekosaur> usually a record is an ":array" of pointers
13:02:25 <maerwald> to me this sounds like it's semi-randomly implementation defined without any spec
13:02:38 <EvanR> a copy of contiguous memory is faster than traversing pointers, cache wise
13:02:39 <orzo> right, but if the record has 20 fields, that's 160 bytes
13:02:41 <geekosaur> you copy the array and most of its pointers, then replace the one you're changing with a pinter to the new value
13:03:24 <geekosaur> maerwald, it's implementation defined, yes. but ghc defines its implementation in the Commentary and in the doucmentaiton for -funbox-strict-fields, among other places
13:03:33 <orzo> something that is going to be mutated a lot might be better done with an IntMap or similar rather than a record
13:03:44 <geekosaur> depends
13:04:15 <geekosaur> *how* you mutate it also matters. and, if you really need it, there are mutable types
13:04:15 <orzo> of course it depends.  If it didn't, we'd just implement records as IntMap anyway
13:04:40 <geekosaur> you should dig up a copy of Okasaki's thesis
13:04:44 <EvanR> i want to see the limit of record size before that is true
13:04:59 <EvanR> because the question comes up a lot
13:05:48 * EvanR begins working on a benchmark game
13:07:58 <orzo> we could have a pragma to let us use record-syntax with something that ultimately an IntMap
13:08:51 <EvanR> overloaded record syntax
13:09:05 <orzo> does that exist?
13:10:01 <EvanR> i dont know (no), but with so many extensions pertaining to records... i cant help but feel like it couldnt all be fixed just with a different record system altogether
13:11:09 <orzo> it wasn't really my idea to allow overloaded syntax, just to decorate a data declaration to hint the compiler to optimize it as an IntMap or similar
13:12:05 <EvanR> dont stop there... allow the syntax to compile to whatever implements IsRecord or something
13:12:24 <EvanR> but in the end... the syntax sucks!
13:12:30 <orzo> that's more flexibility than i want, heh
13:13:06 <EvanR> relatedly, some people hate haskell because it doesnt have Map syntax
13:14:33 <cocreature> if the performance of record updates really becomes the bottleneck, then I’d expect that you’re probably better off just nesting records specifically tailored for your mutation patterns than just throwing an IntMap at it
13:15:20 <orzo> yeah well, if i'm willing to do things myself rather than have the compiler try to take some burden, i might as well go all the way to hand-optimized assembly
13:16:13 <EvanR> theres a lot in haskell you can do to increase performance at the expense of carpel tunnel syndrome... but at least you still have a type system
13:16:16 <cocreature> there is quite a lot of middleground between hand-optimized assembly and nesting Haskell records ;)
13:18:22 <orzo> o well
13:18:25 <orzo> bk to work
13:22:02 <mclark1129> So I'm still on this newtype wrapper adventure, and I'm trying to figure out how to make my custom LocalTime wrapper work with HDBC
13:24:32 <mclark1129> I'm struggling to figure out how to get my newtype to inherit the convertable instance going to / from SqlValue
13:25:13 <maerwald> performance reasoning in haskell is like hunting a ghost :P
13:25:45 <dsal> That implies that finding it requires you to have already lost your mind.
13:26:13 <EvanR> i can buy that
13:26:18 <dminuoso> maerwald: I recently had a real Heisenbug. Missing strictness basically forced my app to stall into effectively halting. The second I rebuild using same flags with profiler, strictness analyzer kicked in and everything was fine.
13:26:37 <dminuoso> Super frustrating.
13:27:06 <maerwald> we need static analysis over strictness properties ;)
13:28:51 <dsal> Hmm...  So the haskell profiler solved the halting problem?
13:28:55 <dminuoso> By the way.. apparently GHC does not have an immediate upper limit on constraints. Just tried some code using 11,000 constraints. Just took a moment to type check, but it worked!
13:29:04 <dminuoso> dsal: Haha.
13:29:16 <dminuoso> Yes. ;)
13:33:58 <maerwald> dminuoso: on the other hand, you have those things with gdb too sometimes where some bugs disappear :P
13:34:33 <dsal> Yeah, padding can do weird things to C code.
13:35:54 <dsal> My least favorite C bug was when I learned that the nonnull attribute on a parameter means "don't bother checking if this is null, because it totally isn't.   Was surprised to have it walk past my  assert(thing_is_not_null) before realizing it just removed that code at compile time.
13:35:57 <tjg> If one of you guys could help me with this:   http://lpaste.net/1950455532284280832
13:36:03 <dminuoso> maerwald: valgrind will catch a large portion of those though.
13:36:33 <tjg> If one of you guys could please help me with this, I am stuck:    http://lpaste.net/1950455532284280832
13:36:35 <maerwald> valgrind is fun with external libraries like glib/gtk
13:36:41 <maerwald> as in: basically useless
13:36:55 <tjg> If one of you guys could help: I am stuck:   http://lpaste.net/1950455532284280832
13:37:03 <maerwald> don't spam :>
13:37:20 <cocreature> tjg: just wait for a bit :)
13:38:31 <tjg> hello cocreature thanks for the help, and I finally got Haskell to work well with Atom, I am just having problems getting this yesod framework to work with postgres.
13:38:58 <cocreature> I can see that but asking the same question 3 times within one minute is not going to get you an answer faster
13:40:10 <tjg> cocreature, sorry about that, I need to have more patience.
13:41:21 <dminuoso> tjg: Im guessing that your postgres server is not configured for the type of authentication you are chosing.
13:42:18 <dminuoso> I think they usually pick ident/peer by default, rather than password.
13:42:42 <tjg> dminuoso, I followed these instructions but they aren't worth a Fuck:    https://github.com/yesodweb/yesod/wiki/Setting-up-PostgreSQL
13:49:12 <Chousuke> 8.4 :|
13:51:58 <Chousuke> the postgresql documentation is actually very good. for configuring pg_hba, https://www.postgresql.org/docs/current/static/auth-pg-hba-conf.html should answer all of your questions and then some
13:52:23 <dminuoso> So I just compiled some function with 11,000 constraints - and to my surprise GHC was happy with it. Just took a moment to compile, but still.
13:52:39 <dminuoso> So there is no relevant upper bound on the number of constraints. =)
13:55:53 <EvanR> sounds like a solution looking for a problem
13:56:00 <EvanR> use constraints as a database?
13:59:48 <EvanR> at type level
14:07:36 <mclark1129> Can anyone help me understand the correct way to derive Convertible instances for my newtype wrapper?
14:07:37 <mclark1129> http://lpaste.net/364002
14:07:43 <mclark1129> Struggling to find the right syntax.
14:09:17 <cocreature> mclark1129: have you tried following the suggestion in the error message to enable MultiParamTypeClasses?
14:09:59 <marmistrz> Hi! How do I make quickcheck print the test *before* running it, not after
14:10:00 <marmistrz> ?
14:10:31 <marmistrz> The test uses so much RAM, that the OS kills it and I'd like to see the culprit
14:10:50 <marmistrz> verboseCheck prints the testcase *after* running it, which is too late
14:11:17 <mclark1129> cocreature: No, but I wasn't sure if the actual error is somewhat of a red herring.  If I don't provide multiple type arguments then I get a different error.  Seems like it's expecting me to provide both types
14:11:25 <mclark1129> (or some form of generic)
14:12:24 <mclark1129> but trying it led to a different error suggesting another extension of DeriveAnyClass
14:13:09 <cocreature> are you sure there actually is a Convertible LocalTime SqlValue instance?
14:13:28 <lyxia> marmistrz: you could run the test in IO so you can print the inputs before
14:13:34 <cocreature> oh wait now I see it
14:13:44 <cocreature> mclark1129: try deriving instance Convertible SqlValue LocalTimeFlex
14:13:48 <cocreature> the order of parameters matters
14:14:58 <mclark1129> So that actually causes an issue with deriving (Convertible SqlValue)
14:15:25 <mclark1129> Convertible LocalTimeFlex SqlValue was what I thought I needed to use toSql
14:15:33 <mclark1129> toSql :: LocalTimeFlex -> SqlValue
14:16:03 <cocreature> in your first example which works according to your comment you’re deriving Convertible SqlValue LocalTimeFlex
14:16:26 <cocreature> so if you want something that’s equivalent to that you’ll have to use the same order of parameters
14:16:33 <mclark1129> I don't want the equivalent
14:16:36 <mclark1129> I want the reverse
14:16:53 <mclark1129> so basically i"m trying to be able to convert my new type to / from the associated SqlValue
14:17:20 <mclark1129> deriving (Convertible SqlValue) gives me the ability to go from SqlValue to LocalTimeFlex
14:17:31 <mclark1129> (or so I'm assuming, it typechecks at least)
14:17:52 <mclark1129> The reverse is not proving to be quite as straightforward
14:18:50 <mclark1129> admittedly my understanding of deriving is a bit fuzzy so some of what I'm doing is taking stabs in the dark :)
14:19:16 <cocreature> ah now I see the problem
14:19:52 <cocreature> I think you are out of luck here, afaik GeneralizedNewtypeDeriving only works for the last parameter
14:20:43 <cocreature> the instance is rather easy to write manually luckily, i.e., safeConvert (LocalTimeFlex t) = safeConvert t
14:21:52 <mclark1129> hmmm
14:21:55 <mclark1129> let me try that real quick
14:24:06 <mclark1129> looks like that compiles as long as I use MultiParamTypeClasses.  Is convertible only supported with that extension?
14:24:25 <cocreature> yes, it is a typeclass with multiple parameter after all :)
14:24:53 <mclark1129> lol, I suppose it is
14:24:56 <cocreature> the fact that you can derive Convertible SqlValue without enabling it is kind of weird and could be considered a bug
14:26:28 <mclark1129> well this at least gets me one step farther!  Thanks
14:27:16 <chessandgo> Is it worth the cost of having an extra import to have a natural number data type
14:27:35 <chessandgo> I have some data that can only be a natural number, and I'm currently using an Int for it
14:28:03 <mclark1129> it's amazing how deep down a rabbit hole you can get trying to accomplish simple things in haskell.  In a good way, I'm just doing your standard todo list API and it's caused me to have to think about many of the language features
14:28:13 <mclark1129> monads, transformers, typeclasses
14:28:35 <chessandgo> I had to learn monads just so I could make a Finate State Machine in haskell
14:28:49 <orzo> Maybe it is a miss-feature to allow exporting type aliases of non-exported types and to allow aliasing other aliases.
14:29:35 * mclark1129 wants to post the meme "One does not simply 'Learn Monads'"
14:29:43 <orzo> i say that after an iterative documentaiton quest to find "what type is this?"
14:30:18 <chessandgo> Whats the deal with Monads?!
14:30:23 <chessandgo> *steinfeild bass rift plays*
14:30:27 <mclark1129> lol
14:30:28 <orzo> at least hoogle/haddock should maybe mention the type at the end of the quest up front
14:30:44 <mclark1129> No side effects for you!
14:31:19 <chessandgo> I do IO in haskell by monitering CPU load of my program
14:32:57 <maerwald> What do monads have to do with side effects?
14:33:18 <marmistrz> lyxia, what do you mean by running the tests in IO? I'm using the verboseCheck function which has return type IO ().
14:33:36 <mclark1129> It's the construct haskell uses to separate pure functional code from code that has side effects.
14:34:10 <mclark1129> side effects being anything requires IO or state outside of the context of your function.
14:34:20 <lyxia> marmistrz: use ioProperty and print
14:34:27 <chessandgo> heres a protip for avoiding IO
14:34:33 <maerwald> mclark1129: no
14:34:36 <chessandgo> just load the whole state of your OS into your program as start
14:34:51 <maerwald> monads are pure as anything else
14:34:53 <chessandgo> thats what the import System does
14:35:07 <maerwald> and IO was there way before monads
14:36:41 <mclark1129> maerwald: So were you asking or merely quizzing me?
14:37:00 <maerwald> I was confused
14:37:36 <maerwald> monads are *not* a construct to seperate pure code from side-effectful code
14:37:57 <maerwald> monads are just an abstraction
14:38:05 <mclark1129> maybe not in mathematics, but I think it's fair to say that is largely how haskell uses them.
14:38:09 <maerwald> no
14:38:18 <chessandgo> monads are a construct to seperate beginners from advanced programmers
14:39:12 <maerwald> haskell is a purely functional language, I don't even know what you mean with "side-effects", except for the nasty details of *executing* a program, which is about IO, not monads
14:40:01 <orzo> its hard place to have conversation here
14:40:04 <marmistrz> lyxia, is there any example of using ioProperty? I know how to do monadic IO, but reading the docs I have no idea how to use the ioProperty
14:40:11 <marmistrz> I'm fairly new to Haskell
14:40:24 <chessandgo> I have to maintain somestate between two threads, is storing it in an Mvar a *good* idea or a very misguided idea
14:40:44 <srk> chessandgo: STM might be better
14:40:47 <orzo> chessandgo: when in doubt, reach for STM
14:40:54 <chessandgo> isnt STM slow
14:41:03 <orzo> not as slow as you might think
14:41:07 <orzo> give it a try
14:41:23 <chessandgo> thanks, but is that the correct solution
14:41:30 <nek0> I uze STM for event handling in a game engine. It's fast enough for that.
14:41:51 <orzo> the way STM labels the primitive "retry" gives newbies the impression it is a lot of expensive looping, but experience shows that's not so
14:42:21 <chessandgo> Im using it to make a more or less stateless protocol maintain a little bit of state
14:42:52 <chessandgo> each request containing a Mvar (or STM) that can be used by the consuming function to check and change the state
14:43:14 <xandaros> chessandgo: "IO a" is a pure value describing an impure computation yielding a value of type a. The value itself is entirely pure
14:43:27 <lyxia> marmistrz: ioProperty $ \testcase -> do { print testcase ; return (prop_myProperty testcase) }  -- does that make sense to you?
14:43:39 <chessandgo> I'm not asking about IO, im asking if maintaining state like that is an anti pattern
14:43:50 <mclark1129> xandaraos: I agree with that, would you say that it's the evaluation of the value that is impure?
14:44:07 <xandaros> no
14:44:08 <maerwald> evaluation and execution is separate in haskell
14:44:11 <xandaros> ^
14:44:13 <chessandgo> I could instead pass around some datatype using function arguments but then id need more tchans between my threads
14:44:13 <maerwald> that's the entire point
14:44:31 <xandaros> You can evaluate an IO value without ever executing it
14:44:56 <orzo> chessandgo: it is often more efficient to avoid mutating state, but you shouldn't spend much time fretting over it.  Code up what occurs and refactor if you want.
14:44:57 <marmistrz> lyxia, yes, a lot, thank you very much!
14:45:37 <orzo> hm
14:46:09 <chessandgo> thanks, this is my third rewrite as i clean up my thread usage
14:46:34 <dminuoso> Good lord is GHC slow. Now Im compiling a function using over 200,000 separate typeclasses (each of which was producing an error). There's almost 300-400ms in between each error...
14:46:42 <mclark1129> So is execution in haskell basically wrapped up in the implementation of bind for IO?
14:46:54 <dminuoso> mclark1129: not bind.
14:47:13 <orzo> what version, dminuoso ?
14:47:30 <orzo> i've not used 8.4 yet
14:47:31 <dminuoso> orzo: 8.2.2
14:48:32 <mclark1129> What many of us newbies are taught is that IO is run when we try to 'unwrap' the value
14:48:52 <xandaros> mclark1129: main is a value of type "IO ()". You can imagine it first being evaluated (i.e. it constructs the computation to be run later) and then, after evaluation, executes it. This is probably not true due to laziness, but it should give you a sense of how things work
14:48:52 <mclark1129> using do notation which I thought desugared into bind
14:49:05 <EvanR> o_O
14:49:14 <amalloy> mclark1129: the only time an IO value is ever unwrapped is when `main` is executed
14:49:21 <EvanR> thats a wacky narrative, but i kind of like it
14:49:50 <xandaros> mclark1129: When programming, that is how I think about things, as it's a nice easy way of thinking about it, but it's not what actually happens
14:49:52 <mclark1129> I will continue to throw half truths and fuzzy logic at the wall until one of you gurus goes "Yeah.. that's KIND of right I guess"
14:50:10 <maerwald> the problem is... I guess, that execution is not really specified anyway, is it? so we are kind of between "here haskell report evaluation" and "look, ghc RTS does stuff"
14:50:12 <amalloy> mclark1129: well the first half of what you said was right: IO is run when you unwrap the value
14:50:31 <fishythefish>  but the impersonal "you", not "you, the programmer"
14:50:34 <EvanR> what actually happens doesnt matter, what matters are the cool equivalent ways to think of data types, as a dumb programming languages
14:50:35 <amalloy> it's just, you thought that this happens often, i.e. at every bind, but really it only happens once
14:51:03 <dminuoso> mclark1129: >>= doesn't do anything, let me prove it to you
14:51:08 <amalloy> bind instead describes a way to combine two IO actions into one: "after you execute the first IO action, please perform this new IO action based on its results"
14:51:30 <chessandgo> EvanR: hey man, thanks for all the help yesterday! I've began recoding my program and better than ever!
14:51:30 <maerwald> EvanR: but can you *think* of stuff if it isn't spec'ed?
14:51:39 <dminuoso> > let a = getLine >>= putStrLn in a `seq` 1
14:51:42 <lambdabot>  1
14:51:43 <maerwald> or more "reason"
14:51:50 <mclark1129> fair enough, in my head I was thinking of how Maybe is implemented.  Pattern match out the value and pass it to the next function.
14:51:53 <dminuoso> mclark1129: ^- see how that didnt do anything?
14:52:38 <EvanR> good call
14:52:44 <EvanR> evaluating a, did nothing
14:53:01 <EvanR> "we're not in C anymore"
14:53:23 <marmistrz> lyxia, and is there any way I could wrap a (Foo -> Property) function into ioProperty?
14:53:43 <marmistrz> I have someProp :: Foo -> Property
14:53:49 <marmistrz> which uses a lot of forAll things
14:54:15 <marmistrz> and ioProperty expects a Property, not Foo -> Property
14:54:48 <marmistrz> it's just invoked `quickCheck someProp`
14:54:50 <fishythefish> mclark1129: that's understandable - view x >>= f as join (fmap f x) and the "join" bit of many (container-like) monads involves unwrapping
14:55:51 <mclark1129> yeah, so then my thinking was that in order to get the Char from a getChar into the next function, you'd have to run the instructions encapsulated in the IO Char value generated by getChar
14:56:15 <dminuoso> EvanR: By the way.. My new function with 200,000 typeclasses (and actual methods, and using all these methods) has been compiling for 15 minutes now..
14:56:45 <marmistrz> someProp is like:
14:57:00 <EvanR> so dont use typeclasses as a type level database, is what im hearing
14:57:06 <lyxia> marmistrz: that's why I used return at the end
14:57:55 <lyxia> marmistrz: ioProperty takes "IO prop" where "prop" can be anything that's Testable, and that includes "Foo -> Property"
14:58:31 <dminuoso> mclark1129: Right.
14:58:46 <dminuoso> marmistrz: And the only thing that vacn run these instructions is the runtime.
14:58:52 <dminuoso> Bah. weechat is so dumb. :|
14:59:03 * chessandgo uses irssi
14:59:26 <marmistrz> lyxia, I did it the following way: https://paste.ubuntu.com/p/DQ5J5SyXJb/
14:59:45 <marmistrz> Couldn't match expected type ‘IO prop0’ with actual type ‘Foo -> IO Property’
15:00:54 <marmistrz> lyxia, bad paste, here's the correct one: https://paste.ubuntu.com/p/hVYqBXjPwX/
15:01:22 <lyxia> marmistrz: Ah sorry the lambda should be outside ioProperty
15:01:51 <marmistrz> lyxia, what do you mean?
15:01:55 <lyxia> marmistrz: quickCheck $ \tc -> ioProperty $ do { print tc ; return (myProp tc) }
15:03:18 <marmistrz> lyxia, thank you very much!
15:12:13 <mclark1129> What is the ! I see on some types like !Text?
15:13:10 <lyxia> It means a field is strict
15:38:34 <erisco> what is a kind of relation like  a << c = ∃b. a < b < c  ?
15:39:14 <erisco> in greater context, to determine if (a,c) (modulo brackets) is an empty interval
15:40:47 <ackthet> maybe this isn't the right place to ask, but is there any opinion on this book? http://haskelldata.com/
15:43:15 <bavism> Does anyone know if it is possible to ever GND derive a typeclass method like: "class HasSubPart a where subPart :: Lens' a SubPartType" for a type "newtype T = T ImplementsHasSubPart"? I know this seems to be blocked by the role checker (since "a" is applied to "f" in the type of Lens, and applications to type variables give nominal roles), but I *feel* like the Functor constraint on the type of Lens should make sure that everything "
15:45:14 <bavism> After all, the type of Lens guarantees that we can map something of type (a -> b) over any instance of "f a", and if some type family/GADT changes the "nominal" type of "f a", I feel like there is no way for that type to apply a function of type (a -> b) over it (since we have no true "a" to apply it to)
15:51:49 <lyxia> that still looks unsafe
15:52:40 <lyxia> oh no I see what you mean now
15:54:10 <bavism> lyxia: my deep down gut feeling is that it is unsafe somehow, although my first glance at the use of Functor made me think I might be able to do it... although even if I can, I'm not sure how I should go about communicating that to GHC :P
15:55:24 <lyxia> erisco: that construction with an existentially quantified variable in the middle is commonly called the composition of two relations
15:56:08 <erisco> lyxia, clever, didn't think about it like that
15:56:29 <Fjotte> Does a binary (produced by GHC) ever need to do a runtime lookup for a function call? Or can it always statically put in the right (jump) address for a function?
15:57:16 <pingu-> Fjotte: that's a little vague. There are many compilation options.
15:57:33 <pingu-> If you are talking about FFI, unless you statically link, it'll need the shared library.
15:57:38 <erisco> lyxia, though I am not sure how you would compose two relations like this generically
15:57:57 <koala_man> do you mean if there are the equivalent of vtable lookups and dynamic dispatch?
15:58:07 <Fjotte> koala_man: right
15:58:32 <pingu-> koala_man: you mean *just* haskell code then, yeah? The compiler might decide to inline, or not.
15:58:50 <pingu-> koala_man: sorry, wrong nick. I meant Fjotte
15:58:50 <erisco> lyxia, the  a -> a -> Bool  model of relations does not reveal enough to solve the existential
15:58:57 <Fjotte> x.foo(3) in Java will first have to find out the type of x at runtime and then lookup the right foo implementation.
15:59:06 <koala_man> pingu-: inlining vs not inlining is not a runtime lookup though
15:59:40 <lyxia> erisco: right, you can't represent composition as a function with that representation.
16:00:19 <pingu-> koala_man: I think I get what you're asking now... And I think the answer is that due to the types, it always knows what code to statically put in.'
16:00:25 <pingu-> Or the instance would be ambiguous.
16:00:37 <Fjotte> foo x 3: is there ever a need to lookup foo or x in some table before it can be called? I would say that ghc knows exactly all types so it can always call exactly the correct implementation directly.
16:00:38 <koala_man> Fjotte again but yes
16:00:47 <pingu-> Yes. Derp.'
16:00:52 <Fjotte> :-)
16:01:33 <pingu-> Fjotte: There isn't any runtime dispatch, unless you build the machinery to do so.
16:02:01 <pingu-> At which point, it won't be inlined because you're using existentials or something.
16:03:03 <Fjotte> pingu-: yes of course, I may be storing functions via some mechanism somewhere manually. To that I agree. I was just wondering if ghc sometimes puts indirections into the code, for whatever reasons.
16:03:13 <dminuoso> Fjotte: There's lots of indirections.
16:04:26 <dminuoso> Fjotte: Boxed types with suspended computation can be seen as a big indirection
16:04:48 <Fjotte> Sure though I'm just after the function calls right now.
16:04:59 <Fjotte> I understand that boxing/unboxing can not always be compiled away.
16:05:36 <Fjotte> But I would think that ghc can now do function calls with a very high efficiency. More efficient than pratically all dynamically typed languages.
16:07:51 <koala_man> how would you count higher order programming like   (if x then f else g) myvalue
16:07:56 <pingu-> Fjotte: "specialisation" may be what you're asking about
16:08:14 <pingu-> Which I don't know that much about, other than -- it happens as GHC magically sees fit.
16:09:17 <pingu-> So, when you call a polymorphic function with a specific type, it may generate specialized code for that type. Is that along the lines of what you're wondering?
16:09:18 <Fjotte> koala_man: does ghc know here exactly where in ram it will position f and g? A C compiler would know this certainly and it could jump to the correct address after the if is done.
16:10:27 <koala_man> Fjotte: f and g may be thunks that haven't been evaluated into a function yet
16:10:40 <Fjotte> koala_man: in a dynamically typed system when the runtime sees `f` it first needs to lookup in some kind of table/map what f actually is. It finds a function. Then it sees `myvalue` and has to check its type. Then it can lookup in a table where that jump address for f is.
16:13:02 <koala_man> you could easily imagine something like (fromJust $ Map.lookup x mymap) value  which would have to look up a function in a map
16:13:38 <koala_man> but it's not runtime dispatch as such
16:13:41 <zachk> yea but that construct would run at runtime
16:14:29 <dminuoso> Fjotte: Dynamic typing is not a strength, it's just removing information. Of course its going to be slower if an implementation cant reason about anything =)
16:15:06 <Fjotte> dminuoso: in general I would agree, though I don’t think it is in all cases like that.
16:15:29 <Fjotte> Dynamic typing can be learned quickly. No time required to learn a type system.
16:16:02 <kostas> After a thunk is evaluated is it ever possible to lose its value and return to a thunk? Is there any such mechanism in ghc for example to reduce memory?
16:16:21 <dminuoso> Fjotte: Any time you save, you spend back into debugging, endlessly running code while praying the programmers prayer "please work please work please work"
16:16:59 <pingu-> kostas: I've never heard of one. A strange optimisation indeed.
16:17:00 <Fjotte> dminuoso: of course, those are just consequences. But if you want to learn a new language in 5 days you’re better of with a dynamically typed one. Not that this case would interest me.
16:17:05 <dminuoso> kostas: afaik GHC doesnt share aggressively in order to not "leak" memory
16:17:23 <Fjotte> dminuoso: but it’s an element of the set of all cases. So there are examples of dynamic typing being "stronger".
16:17:40 <dminuoso> Fjotte: Yeah but the notion of "able to fully grasp a language in 5 days" is not really a strength. Measure "How long until you become a competent and productive programmer"
16:18:18 <dminuoso> And then add the ability to use abstractions to improve code reasoning, readability and maintainability.
16:18:43 <koala_man> no one's claiming dynamic typing is fundamentally better
16:18:47 <Fjotte> dminuoso: another example: you are the only user of an application and at runtime you enter the name of a function the some arguments. You can’t simply call it in Haskell, while in a dynamically typed lang this would be a 2-liner.
16:19:22 <Fjotte> koala_man: right. I just say that there are cases where it might be able to express things with less code, for specific cases.
16:19:28 <maerwald> Fjotte: yes, haskell is hard to learn
16:19:57 <Fjotte> maerwald: yes, but I don’t care. We are newbies only for the shortest amount of time of our carreer. The remaining time we will be experts.
16:20:04 <kostas> pingu: If the value is really big it could make sense. Spark that also has laziness does something similar.
16:20:07 <pingu-> Fjotte: there are libraries to build your own repl, if you like, but not having backticks or eval is a good idea, I think.
16:20:10 <Fjotte> maerwald: So I better invest the learning time that will help me later on, such as Haskell.
16:20:44 <pingu-> kostas: I agree, it's interesting.
16:20:49 <maerwald> Fjotte: not sure I can follow, but if you have fun, that's great
16:21:23 <pingu-> kostas: Although I almost feel that -- philosophically -- if you can be bothered computing something, why throw it away? Buy some more memory!
16:22:02 <koala_man> because recomputing it can be faster than remembering it
16:22:51 <kostas> memory can be more expensive that computational power
16:25:49 <amalloy> pingu-: do you want to spend your 16GB of RAM on a cache of the results of n+m for all n,m that fit in an int32?
16:26:04 <pingu-> But you need that amount of memory in the first place.
16:26:24 <pingu-> This is talking about un-evaluating a thunk, right?
16:26:27 <kostas> dminuoso: Could you elaborate on what you mean share aggressively? Newbee here
16:27:08 <pingu-> kostas: the only place where this makes sense is where your thunk is used in multiple places, right?
16:27:14 <koala_man> Fjotte: I agree that for simple, ad-hoc scenarios like a bash command or Excel spreadsheet it can be nice to not have to care about types, but I'm not sure if that necessarily implies dynamic typing. imagine a very loose static, inferred type system that only bugs you for obvious errors
16:27:30 <kostas> Yes ofcourse.
16:27:57 <Fjotte> koala_man: true
16:28:23 <Fjotte> koala_man: I would not turn on ghci if all I want is "ls -la". This has nothing to do with the typing though.
16:29:32 <kostas> You may need this amount of memory between the different requests. Especially if they are not close to each other in time.
16:30:12 <pingu-> kostas: honestly, in the real world, I'd just scope it differently then so that the GC clears this thing out between requests.
16:31:18 <pingu-> Because -- at peak -- you're going to need to allocate that much anyway, right? It sounds suspiciously like swapping at the application level.
16:31:28 <tomsen> but when using dyn typed languages you maybe dont want to be bugged. i often run vim scripts over files which i know will make faults in some cases and then fix these cases up. because its faster than coding the right regex. that doesnt scale of course. but they have their power of being stupid in that sense
16:32:12 <Fjotte> yes
16:33:10 <Fjotte> there are cases where dyn typing has a bit less code that we need in Haskell to satisfy the type checker
16:33:35 <maerwald> it's not about lines of code, ever
16:34:21 <Fjotte> it can be, if those have to be read by others
16:35:17 <maerwald> no, you just said it yourself, it's about readability, not lines of code
16:35:35 <Fjotte> 3 lines can be easier to read than maybe 7
16:35:42 <maerwald> that's a random assumption
16:35:57 <maerwald> 3 obfuscated lines of code are not better than 7 lines of code that transport the intention and the logic
16:36:10 <Fjotte> Not in general easier. I am just talking about the existence.
16:36:13 <pingu-> APL is the most readable language due to its terseness
16:36:23 <maerwald> code is not maths
16:36:25 <Fjotte> There are cases where 3 lines are easier to read than 7 lines of semantically identical code.
16:36:31 <maerwald> we don't care about the shortest possible expression
16:36:59 <maerwald> otherwise you are just golfing and pretending that it's about readability, while it's... about golfing ;)
16:37:24 <pingu-> Well, small does correlate with simple.
16:37:31 <maerwald> no
16:37:40 <pingu-> I think so.
16:38:06 <tomsen> why all the whitespaces then :D
16:42:16 <kostas> pingu: Yes it`s similar to swapping. So you think it should be better left to the programmer and it`s too complicated for the general case?
16:43:18 <pingu-> kostas: I just don't know how you'd decide when to un-evaluate, and especially *what* to.
16:43:55 <pingu-> And the answer is likely application specific, I'd think?
16:45:29 <pingu-> It sounds like you might just want a LRU cache
16:45:30 <kostas> Given that the graph exists thanks to laziness, the runtime can have some knowledge of what will follow.
16:49:17 <kostas> LRU can be a simpler option yes.
16:53:58 <hololeap> if there are any CT gurus here, i stumbled upon a variant of a catamorphism, and i want to know if this function can possibly be more generalized: http://lpaste.net/2221384311288889344
16:56:26 <sl2c> Looks like a monadic catamorphism with the state monad but I'm not completely sure
17:00:34 <hololeap> i see how `alg` is creating a infinite list which could be represented as (Fix (e,a)), so it is like it is folding over two Fixes at once. i also see that (i -> (e,i)) is (State i e) and perhaps could be generalized into any monad. however, exploring both these paths led me to no results
17:04:17 <kostas> pingu-: thanks for the answers
17:04:48 <ddellacosta> hololeap: I'm _very_ far from a CT guru but when I saw unfold I thought "anamorphism" and when I saw the carrying state around I thought "paramorphism." Maybe there's something here that could provide a further generalization? https://hackage.haskell.org/package/recursion-schemes-5.0.2/docs/Data-Functor-Foldable.html#g:6
17:05:39 <ddellacosta> forgive me if I'm missing what you're going for there
17:05:43 <hololeap> OMFG Zygohistomorphic prepromorphisms
17:06:03 <ddellacosta> :-o
17:06:15 <hololeap> gotta love haskell libs :p
17:06:38 <hololeap> ddellacosta: the answer might well be in there somewhere. thanks
17:07:01 <ddellacosta> yeah my eyes glaze over when I'm reading the docs for that lib and I go past my level of familiarity with recursion schemes...hahas
17:07:06 <ddellacosta> hololeap: yeah hope it helps
17:07:15 <ddellacosta> I'd love to hear more if you figure it out
17:10:54 <Major_> hi
17:11:01 <ddellacosta> hello
17:11:32 <hololeap> ddellacosta: i will let you know, but it's going to take me a while to explore all of those typeclasses
17:11:51 <ddellacosta> hololeap: yeah, it's pretty dense :-/
17:11:56 <xandaros> Major_: hi
17:12:02 <Major_> @xandaros hi
17:12:03 <lambdabot> Unknown command, try @list
17:12:07 <Major_> @list
17:12:08 <lambdabot> What module?  Try @listmodules for some ideas.
17:12:47 <hololeap> Major_: if you put @ at the beginning of the line, the bot perks up its ears
17:12:57 <Major_> ok thanks hololeap
17:18:18 <lyxia> hololeap: it's a cata with an algebra (f (i -> a) -> i -> a): cataUnfold unf alg i t = cata (\t i -> let (e, i') = unf i in alg e (fmap ($ i') t)) t i
17:18:34 <v0idpwn> Hey. Sorry for the newbie question, but I'm working with list comprehension. I would like to get something like list = [x*2 or x*3 | x <- [1,2..]], how can I do that?
17:19:35 <EvanR> whats e.g. 5*2 or 5*3 mean
17:20:29 <pingu-> hololeap: maybe this? http://ertes.eu/tutorial/foldr.html#stateful-folds
17:21:00 <pingu-> lyxia: nice. I was just trying to work that out.
17:23:35 <v0idpwn> I'd like to get [2, 3, 4, 6, 6, 9...]
17:24:54 <v0idpwn> 2*1, 3*1, 2*2, 3*2, 2*3, 3*3...
17:25:28 <lyxia> v0idpwn: [y | x <- [1 ..], y <- [x * 2, x * 3 ]]
17:27:03 <v0idpwn> wow, ty
17:27:46 <lyxia> pingu-: Yeah it's a pretty fun exercise
17:28:12 <pingu-> Certainly not obvious if you haven't seen it a few times
17:28:30 <rindolf> hi all! How do I get ghc on fedora to produce an exe? ghc -O3 -XFlexibleContexts solver.hs only gives me an .o and a .hi
17:28:57 <hololeap> rindolf: is there a file called "solver"?
17:29:11 <rindolf> hololeap: no
17:30:25 <hololeap> rindolf: sounds strange, but maybe try -O2 instead of -O3, since i don't think optimizations go past -O2
17:31:08 <rindolf> hololeap: wait ! there is a module FreeCell there
17:31:54 <rindolf> hololeap: do i need to write a new .hs file?
17:32:55 <pingu-> rindolf: do you have a Main module?
17:33:06 <rindolf> pingu-: no
17:33:25 <rindolf> pingu-: i have a main func
17:33:51 <hololeap> rindolf: instead of calling the module FreeCell, call it Main
17:34:30 <sl2c> Ooh is someone working FreeCell?
17:35:00 <pingu-> rindolf: if you want to keep it modular, put pure-ish things in the FreeCell module, then write a small module Main that imports it and just does the IO stuff.
17:35:26 * hackage hlibsass 0.1.7.0 - Low-level bindings to Libsass  https://hackage.haskell.org/package/hlibsass-0.1.7.0 (jakubfijalkowski)
17:35:27 <pingu-> So, yes, I'd write another .hs file with your Main module
17:35:58 <hololeap> rindolf: if you do that, rename solver.hs to FreeCell.hs
17:37:23 <rindolf> sl2c: i am trying to use https://github.com/boundedvariation/Freecell
17:37:47 <rindolf> sl2c: it seems poorly done though
17:38:17 <rindolf> pingu-: thanks
17:38:27 <rindolf> hololeap: thanks
17:40:35 <rindolf> ok, apparently it was unable to solve deal #11,982 either
17:41:03 <rindolf> someone told me he was able to solve it
17:41:21 <rindolf> by email
17:43:14 <rindolf> thing is the solvers i had so far were written in C whose code may be more errorprone than haskell
18:39:36 <chessandgo> do you line up your <- in your code?
18:47:55 <hololeap> lyxia: i've been playing around with the code you pasted, and i see it now. thanks for showing me that
18:53:08 <EvanR> chessandgo: no but people tell me my style sucks
18:55:38 <lyxia> everyone's styles suck, except mine.
19:00:43 <EvanR> i am going to look like this picture http://i0.kym-cdn.com/entries/icons/original/000/005/545/ruserious.jpg if I rewrite this ruby program, which is causing OOM on a server with 1G ram, in haskell and its better
19:01:00 <EvanR> haskell is supposed to be the one with memory leaks
19:06:15 <ddellacosta> I remember the day I first looked at the source code for Rails
19:06:19 <ddellacosta> everything changed for me
19:06:33 <ddellacosta> now I'm hanging out in #haskell
19:07:01 <EvanR> you opened the source code and all it said was "just /join #haskell"
19:07:14 <EvanR> that explains a few things
19:07:16 <ddellacosta> hahaha
19:07:40 <ddellacosta> it's more like, I looked at all the insane monkey patching and ran far away
19:07:59 <ddellacosta> granted, this was like two major versions ago, no idea if that shit has changed
19:08:07 <ddellacosta> anyways, sorry, off-topic
19:11:56 * hackage composition-prelude 1.3.0.5 - Higher-order function combinators  https://hackage.haskell.org/package/composition-prelude-1.3.0.5 (vmchale)
19:12:24 <chessandgo> I use the unicode syntax extension so my style is automatically better than all of yours
19:13:56 <hololeap> 💩 = mappend
19:14:15 <EvanR> the instantly recognizable diamond questionmark
19:14:29 <hololeap> it is poo
19:14:41 <chessandgo> I cant tell my font doesnt support emojis
19:14:57 <EvanR> must be my screen interface
19:15:10 <chessandgo> haskell but all functions are infix emojis
19:15:50 <hololeap> maybe i'm the only one with unicode support built into my irc client
19:16:01 <hololeap> dunno
19:16:05 <chessandgo> My termianl supports only the *good* unicode
19:16:09 <ddellacosta> hololeap: I guess you pulled that syntax from the "Bananas, Lenses, Envelopes..." paper huh
19:16:29 <chessandgo> I can see → and thats all that matters
19:16:42 <EvanR> poor 1 column wide arrow :(
19:17:01 <sl2c> hololeap: I could see it on my mobile weechat at least
19:17:03 <chessandgo> you mean *makes all your code one column less* arrow
19:17:29 <chessandgo> ∷ in type signatures makes me happy
19:17:33 <EvanR> function right arrow makes made me lose my faith in monospace everything
19:18:36 <chessandgo> If you want to looaw fail in monospace use LaTeX
19:18:46 <chessandgo> keyboard plz stop typoing
19:31:18 <rotaerk> hrm, does bindings-GLFW actually come with GLFW itself
19:31:29 <rotaerk> I see it's listing all the .c and .h files under extra-source-files
19:33:07 <EvanR> i see .c and .h files in the repo
19:33:39 <phz_> is there a krisajenkins here?
19:33:52 <phz_> they’re prime maintainer of elm-export
19:33:55 <phz_> I’d like to take over
19:34:02 <phz_> or at least be master on the project
19:34:13 <phz_> it’s slowly dying while I’m contributing to forks of forks of…
19:34:15 <phz_> it’s going wild
19:34:20 <phz_> I’d like to clean all that mess up
19:34:49 <rotaerk> EvanR, right; I'm trying to understand how they're *used*
19:35:22 <EvanR> kind of surprising, maybe they are literally compiled and linked in with your program
19:35:31 <rotaerk> like, does it build the C libraries along with the haskell bindings, and put the C libraries side-by-side with the bindings, rather than expecting you to install GLFW independently
19:35:57 <EvanR> i totally thought you had to install glfw
19:36:23 <rotaerk> I'd think that a downside to that is that you can't just update the bindings code in order to support a later version of GLFW
19:36:30 <rotaerk> you *also* have to update the GLFW source files
19:37:39 <rotaerk> the reason I'm looking at this is
19:37:45 <EvanR> i remember when they released a big change to be updated with latest glfw
19:37:53 <EvanR> "glad i didnt have to do it"
19:38:17 <rotaerk> the guy who made vulkan-api submitted a PR to GLFW-b to add support for vulkan
19:38:27 <rotaerk> but he only touched the haskell code
19:38:41 <rotaerk> and I'd think it just wouldn't work because the underlying C source for GLFW wasn't updated
19:38:48 <rotaerk> so I'm confused
19:39:33 <rotaerk> (also, I don't see how I can use vulkan in haskell with GLFW unless I use his fork of GLFW-b... and the SDL2 bindings are also too old)
20:32:00 <EvanR> next time someone asks about monads give them this http://tomasp.net/academic/papers/monads/monads-programming.pdf
20:33:44 <EvanR> "A monad is just a formalist entity whats the problem"
20:38:14 <rotaerk> hmm is there a noticeable benefit to compiling and linking GLFW's source with the haskell files, rather than just dynamically linking to an external install of GLFW
20:38:49 <rotaerk> is there less overhead in calls to it or something?
20:48:41 <EvanR> i doubt it
20:49:22 <EvanR> one thing is, when you run stack or something it doesn't auto download and install C libraries for you
20:50:41 <EvanR> on the other hand, because this is the only package which includes the C code, you cant learn to rely on this convenience, and it might confuse you
20:50:52 <EvanR> maybe ask the GLFW-b guy wtf is going on
20:54:37 <rawburtz> i have a list of monad return values [m b] ... i have a function (a -> b -> m a) ... i have a starting value "a"... how do i fold the function (a -> b -> m a) over the list [m b] and get the final "m a" ? having trouble figuring out the right function considering my list is [m b] not [b]
20:54:53 <glguy> :t foldM
20:54:54 <lambdabot> (Monad m, Foldable t) => (b -> a -> m b) -> b -> t a -> m b
20:55:15 <glguy> the list of m b makes that not quite fit
20:55:35 <rawburtz> yeah i was messing with foldM and not quite getting it right
20:55:59 <glguy> :t \f -> foldM (\acc mb -> fmap (f acc) mb)
20:56:00 <lambdabot> (Monad m, Foldable t1) => (t2 -> a -> t2) -> t2 -> t1 (m a) -> m t2
20:56:13 <glguy> Oh, the function had an m, too :)
20:56:22 <glguy> :t \f -> foldM (\acc mb -> f acc =<< mb)
20:56:24 <lambdabot> (Monad m, Foldable t1) => (t2 -> a -> m t2) -> t2 -> t1 (m a) -> m t2
20:57:03 <rawburtz> i'll give it a go, thanks glguy
21:00:42 <chessandgo> at what point is it worth while to start using lens in a project
21:00:57 <chessandgo> Ive got a 3 field datatype and Im kinda feeling the want to use lens
21:01:05 <EvanR> i always want them
21:01:11 <chessandgo> but its *so* easy to keep pattern matching them
21:01:17 <Gurkenglas> i always want them
21:01:27 <EvanR> they are really a standard part of FP once you see them
21:01:38 <EvanR> it expands beyond just records
21:01:50 <chessandgo> Ive used them in a little wreq and json project I did, but I didnt have to make any of the lens myself
21:03:09 <chessandgo> cant you use lens without the default record syntax? I kinda hate all the functions it creates
21:03:16 <Gurkenglas> The possible counterarguments are dependency overload and non-readability. I feel like the first is the sort of problem that we shouldn't build into our habits because it might not be a problem with future's tech, and the second relates to "the first million words you write will be garbage"
21:04:02 <Gurkenglas> *counterarguments I can off the top of my head think of are
21:04:09 <EvanR> first problem, there are subsets of lens that make sense, actually the full lens lib is really big
21:04:12 <chessandgo> are you meaning to imply that this is garbage:
21:04:14 <chessandgo> comb3 (z:zs) (x:xs) (y:ys) =  zipWith3 (zipWith3 (\z x y->z+x+y)) (z:zs) (x:xs) (y:ys)
21:04:18 <chessandgo> why I would never!
21:04:58 <EvanR> second problem is just a language game
21:05:19 <chessandgo> Im importing 10 packages and using 3 language extensions
21:05:20 <Gurkenglas> sure is. comb3 = zipWith3 . zipWith3 $ \z x y -> z+x+y
21:05:21 <chessandgo> hows that
21:05:39 <EvanR> only 3 ?
21:05:54 <chessandgo> I thought good boys where supposed to use zero
21:06:21 <chessandgo> Bang patterns, Unicodesyntax, and OverloadedStrings
21:06:38 <chessandgo> Although I could probably get rid over OverloadedStrings
21:07:00 <EvanR> since extensions are per module, you dont have to answer to anybody
21:07:01 <Gurkenglas> Use the amount of language extensions and lens libraries you like rather than base haskell for the same reasons you use haskell instead of java
21:07:26 <EvanR> though... overlapping instances...
21:07:27 <Gurkenglas> If your project doesn't allow it because of inertia, tough luck
21:07:35 <chessandgo> I use haskell because its better than python not java
21:08:02 <chessandgo> The high of your haskell version of your program running three times faster than your python version
21:08:48 <chessandgo> I'm just afraid that extensions wont be portable
21:08:55 <EvanR> to ... what
21:09:03 <chessandgo> GHC on x86_64 isnt the end all of everything
21:09:11 <EvanR> kind of is :(
21:09:15 <chessandgo> I dunno, maybe one of those raspberry Pi like ARM boards
21:09:18 <chessandgo> those are kinda cool
21:09:29 <EvanR> i have one, ghc is going to output code for it
21:09:33 <EvanR> or else
21:09:44 <EvanR> i mean, theres no other option
21:09:59 <chessandgo> do or do , there is no return ()
21:10:45 <chessandgo> you could also *transpile it to javascript* if you want it to be portable
21:10:51 <chessandgo> *;)*
21:11:10 <EvanR> uh
21:11:53 <EvanR> granted platforms that are essentially HTML5-ready browsers may outnumber systems GHC supports, but
21:12:10 <EvanR> not every program is a GUI
21:13:14 <EvanR> i am working on an arcade game which is not X, so a browser is a no go
21:13:35 <chessandgo> what does "which is not X" mean?
21:13:45 <EvanR> linux with non X graphics
21:13:50 <chessandgo> ah X11!
21:13:54 <chessandgo> wayland?
21:13:56 <EvanR> no
21:13:59 <chessandgo> thats what I use currently
21:14:06 <EvanR> framebuffer
21:14:07 <rawburtz> glguy : that worked, thanks!
21:14:13 <chessandgo> nice
21:14:29 <chessandgo> is there haskell libraries for that or is it all foreign functions
21:14:38 <EvanR> sdl bindings
21:15:16 <chessandgo> hows that? Once in a blue moon I get the itching to write a graphical program
21:15:30 <EvanR> works great
21:15:47 <chessandgo> Ive heard the options for native FP UI libraries arent very good
21:16:01 <EvanR> native?
21:16:27 <chessandgo> theres some word for it, but GUIs that use the FP method
21:17:05 <EvanR> i am still looking for such a thing
21:17:38 <chessandgo> "functional reactive programming" is the term
21:17:45 <EvanR> is a term
21:17:58 <EvanR> for a bunch of things
21:18:07 <glguy> I've had success using gi-gtk for my small GUI needs
21:18:28 <EvanR> is that more than just bindings?
21:19:07 <chessandgo> supposedly its a way to design GUIs functionally
21:19:12 <glguy> No, which is the nice part about it, it's automatically generated, fairly complete, not attempting to be clever bindings
21:19:18 <EvanR> ah
21:19:20 <chessandgo> https://stackoverflow.com/questions/3482879/where-are-the-functional-gui-users?noredirect=1&lq=1
21:19:28 <EvanR> yeah so far thats better ime
21:19:43 <dmj`> you could compile to js then wrap it w/ electron
21:20:23 <chessandgo> dont hurt me like that
21:20:32 <EvanR> i would do that for a desktop app
21:20:43 <chessandgo> the most "sane
21:20:58 <chessandgo> The most "sane" way I can think of is those deamons that have web interfaces
21:21:25 <chessandgo> Like how transmission has a web interface, but its really just passing HTML around and youre doing the rendering
21:21:36 <EvanR> heh... its 2018 and stuff like this is most sane, were in trouble
21:21:45 <chessandgo> wait until webassembly
21:22:10 <dmj`> yea, webassembly will fix everything...
21:22:35 <chessandgo> yes, itll make sure I definitially dont run your website code, and keep out all the inexperianced programmers
21:22:38 <chessandgo> ;)
21:22:45 <EvanR> do your part of folding/einstein/seti/functionalGUI at home and think about the problem for a few minutes, then use bindings to the platforms main toolkit
21:23:03 <EvanR> i used cocoa for a couple things
21:23:21 <chessandgo> doesnt that make your app none portable tho
21:23:26 <chessandgo> depending on apples UI
21:23:27 <EvanR> of course not
21:23:45 <chessandgo> (isnt Cocoa the thing apple uses?)
21:23:48 <EvanR> because you also have the backend for winforms, GTK, android, and whatever written
21:23:55 <EvanR> also using native
21:24:31 <chessandgo> ncurses the premium UI of choice thats supported on all of those
21:24:35 <EvanR> pure haskell core, various crunchy driver shells
21:24:57 <EvanR> people complain about curses on windows
21:25:11 <EvanR> like getting it to work (from haskell?)
21:25:23 <chessandgo> dont people on windows have haskell problems in general
21:27:02 <dmj`> electron is very portable
21:27:23 <EvanR> browser front end really is a good shortcut
21:27:35 <EvanR> people accept the likes of atom
21:27:42 <dmj`> and slack
21:29:28 <chessandgo> and discord
21:32:09 <bsima> i hear yesod apps can use a webkit backend, but i don't know how well it works
21:53:13 <woodson> Hey guys, this my first by haskell project https://github.com/Woody88/Haskforce/tree/new_types. Its a library for interacting with Salesforce API using servant client. I got for now just one feature implemented with is the retrieve,update and delete of Salesforce Object
21:54:07 <woodson> looking for some constructive criticism
21:54:31 <woodson> here is an example of how it would be used
21:54:32 <woodson> https://gist.github.com/Woody88/f42e6cad80cf9142f28c472fdd97babe
22:23:45 <jle`> hey it's neat that NonEmpty works with DataKinds out of the box pretty well
23:12:08 <dtornabene> quick poll for anyone who is actually awake, does anyone use CI for their haskell code?
23:12:28 <cocreature> dtornabene: sure, I use travis quite heavily
23:12:34 <breadjpg> I've used circleci
23:13:36 <cocreature> dtornabene: https://github.com/hvr/multi-ghc-travis makes it trivial to set up a travis config for multiple GHC versions
23:14:00 <dtornabene> awesome, just checkng
23:14:16 <dtornabene> i'm not plugged into the community, practices and such
23:14:31 <dtornabene> I've got a web project coming up and I want to do it properly
23:14:42 <dtornabene> thanks for the response, much appreciated
23:14:57 <dtornabene> cocreature: thanks for the link as well
23:15:16 <cocreature> if you use stack, the stack docs have a travis config
23:15:29 <dtornabene> aaaaaaawesome
23:15:34 <dtornabene> good news
23:15:59 <dtornabene> i've been avoiding learning to use stack properly, guess this is going to be the project
23:17:34 <cocreature> the first link I showed you uses cabal so you can use either of them
23:21:43 <dtornabene> i'd prefer to learn stack honestly, from what little i've seen it seems to have the momentum behind it
23:22:25 <dtornabene> i've used it a couple of times, for simple things.  It just seemed like one of those swiss army chainsaw type tools, lot to learn
23:58:17 <jle`> dtornabene: i use it for all my hackage packages mostly
23:58:33 <jle`> i make sure my updates pass before i push them
