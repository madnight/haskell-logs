00:12:26 * hackage potoki-hasql 1.1.0.1 - Integration of "potoki" and "hasql".  https://hackage.haskell.org/package/potoki-hasql-1.1.0.1 (IrinaArtemeva)
00:24:00 <robstr> RaminHAL9001: i still struggle, i used ` filter <- [tt | t <- o .: "filters", tt <- t .: "filterType, tt == "PRICE_FILTER"]` and then i try to get the content out of this object with `filter .: "minPrice"` but since `o .: "filters"` return a Object and not a list :-/
00:25:33 <RaminHAL9001> robstr: a list comprehension filter must return a list type, but the (.:) fnuction is a Parser type, so you cannot mix them.
00:26:26 <RaminHAL9001> robstr: you should choose one or the other, list comprehension or "do" notation, but you cannot do both.
00:26:48 <RaminHAL9001> robstr: (you can mix list and do notation using "sequence" but that is another story)
00:28:17 <RaminHAL9001> robstr: instead try something like do{ min <- obj .: "minPrice"; }
00:28:56 <robstr> RaminHAL9001: ok let me try :P
00:32:30 <vaibhavsagar> there is also -XMonadComprehensions, but I'd advise against using that unless you're absolutely sure you need it
00:34:50 <tdammers> strictly speaking, you never *need* monad comprehensions
00:35:26 * hackage sqlite-simple 0.4.15.0 - Mid-Level SQLite client library  https://hackage.haskell.org/package/sqlite-simple-0.4.15.0 (JanneHellsten)
00:38:04 <vaibhavsagar> fair enough, *want* seemed a bit weak
00:38:31 <vaibhavsagar> it's a fun extension though :)
00:38:57 <tdammers> definitely
00:39:06 <tdammers> in the right hands, it has the potential of making your code more readable
00:39:18 <tdammers> but it's also a powerful obfuscation tool, great for golfing too
00:39:25 <RaminHAL9001> vaibhavsagar: I've never tried it. Basically you put the "return" statement before the | and it makes writing guards a lot easier?
00:39:47 <RaminHAL9001> are there any other advantages?
00:40:02 <vaibhavsagar> RaminHAL9001: it lets you use list comprehensions with any MonadPlus
00:40:33 <RaminHAL9001> vaibhavsagar: that much I know. But what's wrong with ordinary applicative?
00:40:42 <RaminHAL9001> or alternative
00:41:06 <vaibhavsagar> it's a syntax thing
00:41:32 <tdammers> it's just sugar - an alternative way of writing the same thing, it's really only useful to highlight a different intent
00:43:06 <RaminHAL9001> Speaking of list comprehensions, is there any way to convert them to SQL queries?
00:43:28 <RaminHAL9001> I suppose you could express an SQL query as a monad comprehension
00:43:34 <RaminHAL9001> are there packages that do this?
00:44:08 <liste> RaminHAL9001: not list comprehensions, but opaleye has an arrow-based database interface
00:44:11 <liste> @hackage opaleye
00:44:21 <liste> lambdabot plz
00:44:50 <tdammers> you could probably write an SQL abstraction with a monadic interface of sorts
00:45:04 <vaibhavsagar> RaminHAL9001: look at -XTransformListComp
00:45:04 <tdammers> but I don't think it would work like you imagine
00:45:28 <vaibhavsagar> https://ocharles.org.uk/blog/guest-posts/2014-12-07-list-comprehensions.html
00:46:21 <vaibhavsagar> although that does the opposite: it turns quasi-SQL queries to list comprehensions
00:46:38 <tdammers> you'd probably want to write, for example, "SELECT userid FROM users WHERE username = 'tdammers'" as something like [ userid user | user <- users, username user == "tdammers" ]
00:46:45 <tdammers> but that doesn't work
00:47:05 <tdammers> not without seriously abusive metaprogramming, tha tis
00:48:40 <vaibhavsagar> template haskell looks similar enough to a list comprehension for someone to pull this together
00:49:07 <vaibhavsagar> I'm imagining something like [|some query|]
00:49:28 <RaminHAL9001> tdammers: yeah, I think you could probably create a query-building monad and then use TH to convert it to a lower-level query
00:49:40 <lambdabot> http://hackage.haskell.org/package/opaleye
00:50:02 <vaibhavsagar> is lambdabot just suggesting packages now?
00:50:40 <liste> vaibhavsagar: he just has a slow day
00:50:43 <RaminHAL9001> Damn, that's pretty good, Lambdabot.
00:50:49 <vaibhavsagar> hahahaha
00:51:00 <liste> 07:42:52          liste | @hackage opaleye
00:51:11 <vaibhavsagar> I see it now
00:53:04 <hc> Hi haskellers
00:53:08 <vaibhavsagar> hi there
00:53:34 <hc> Anyone familiar with cryptonite/argon2? I wonder what happens if I use the argon2 KDF from a webservice and it is accessed like 10000 times in parallel
00:53:37 <RaminHAL9001> vaibhavsagar: It seems Opaleye uses arrows, rather than monads
00:53:48 <hc> Will I run into an out-of-memory condition, or will cryptonite handle such a case gracefully out of the box?
00:54:03 <hc> ( https://hackage.haskell.org/package/cryptonite-0.25/docs/Crypto-KDF-Argon2.html#t:Variant )
00:56:05 <vaibhavsagar> hc: that's an interesting question, have you experimented on a smaller scale and seen what happens?
00:58:11 <vaibhavsagar> I guess the answer also depends on how much memory you have available
00:59:09 <hc> vaibhavsagar: tbh I haven't done any tests of that sort yet.
01:05:58 <hc> Okay, a little test on ghci seems to work just fine
01:06:34 <hc> I just spawned 10000 processes using forkIO and and the memory requirements don't exceed 1.6G
01:06:39 <vaibhavsagar> GHCi is interpreted, not compiled, so performance might be even better in your final program
01:07:07 <hc> I think the cryptonite part is compiled, though
01:07:29 <vaibhavsagar> yeah, I think you're right
01:07:33 <hc> And the idea of argon is to be not too performant ;-)
01:08:48 <merijn> hc: not performant doesn't necessarily mean memory hungry, though :p
01:09:02 <hc> yeah, argon2 is specifically designed to be memory hungry, though
01:09:09 <hc> to make certain gpu optimizations harder
01:09:40 <merijn> hc: GPU memory limitations are very different from CPU memory limitations
01:09:53 <merijn> hc: Anyway, you may also wanna try profiling the memory usage to see what happens
01:10:25 <hc> good idea :)
01:10:49 <merijn> hc: Threads use about 1kb overhead, so with 10k threads about 980MB of that 1.6 GB is from threads
01:10:57 <hc> haha
01:11:04 <hc> I guess cryptonite does some internal protection, then
01:11:24 <hc> I used argon2 on an iphone app before, with maximum parameters the app was terminated due to memory problems
01:11:42 <hc> I vaguely remember the usage was 500MB for the maximum specs, but it's not documented and I'd have to look it up somewhere
01:11:47 <hc> s/somewhere/in the source/
01:11:47 <merijn> hc: Might've just been a shitty app
01:12:00 <hc> merijn: it was an app that did nothing but calling argon2
01:12:06 <merijn> hc: Still ;)
01:12:11 <hc> yeah, thanks very much
01:12:13 <hc> :-)
01:12:49 <hc> anyway, here's what I did for testing:
01:12:51 <hc> forM_ [1..100] $ const $ forkIO (getEntropy 16 >>= \e -> return (hash defaultOptions ("yundingwiegehtesdir" :: ByteString) e 18 :: CryptoFailable ByteString) >>= print)
01:13:00 <hc> hmm
01:13:14 <hc> This is behaving weird in other ways now
01:13:17 <merijn> hc: Did you wait for all threads to finish? :p
01:13:28 <merijn> hc: All threads die when the main thread exits
01:13:32 <hc> no, i was too impatient tbh
01:13:42 <hc> I had used 10000 instead of 100, though
01:13:48 <hc> let me try again with 100
01:14:06 <merijn> hc: Yeah, but that'd mean it's just spawning 100 threads and then exiting without waiting for those threads to finish :p
01:14:18 <merijn> Or is this in ghci?
01:14:24 <hc> It is ghci
01:14:47 <hc> merijn: otherwise I'd have used some kind of semaphore to prevent the main thread from exiting prematurely ;-)
01:15:01 <merijn> hc: Anyway, this is the sorta stuff you'd probably want profile with compiled code
01:15:06 <hc> No what I mean is it prints single characters on the console one by one
01:15:15 <hc> Instead of full keys derived one by one
01:15:17 <lemmih> hc: You can use 'replicateM_' instead of 'forM_ [1..100] $ const ...'
01:15:21 <merijn> hc: Then you can also use GHCs profiling features to check it's memory usage
01:15:28 <hc> lemmih: thanks
01:15:34 <hc> Okay, I'll compile it, thanks
01:15:47 <merijn> hc: Have a look at the GHC manual for profiling how-to
01:17:30 <hc> Hmm, I might also just read the cryptonite argon binding source code. Might be easier ;)
01:18:28 <hc> Just kidding. I probably need to do both
01:18:35 <hc> I'll need to profile my application anyway
01:23:32 <xandaros> Fun stuff... not. I also had to profile a program a while ago, not my favourite exercise... (Funnily enough, it was also using cryptonite, which ended up being the culprit for the super high CPU usage)
01:25:26 <merijn> Man, I really need a ternary Either type >.>
01:26:16 <hc> -v please
01:26:16 <int-e> . o O ( data Foo a b c = This a | Or b | That c )
01:27:30 <RaminHAL9001> merijn: what does the (>.>) operator do to a ternary Either data type?
01:27:37 <RaminHAL9001> (joking)
01:36:27 <fakenullie> data Argument a b c = OnTheOneHand a | OnTheOtherHand b | OnTheThirdHand c
01:37:33 <RaminHAL9001> data Trident a b c = Left a | Middle b | Right c
01:38:15 <RaminHAL9001> instance Functor (Trident a b) where { fmap f = \ case { Right c -> Right (f c); Middle b -> Middle b; Left a -> Left a; }
01:38:39 <opqdonut> merijn: just use Either (Either a b) result !
01:39:17 * tdammers .oO( (a, (b, (c, (d, (e, ()))))) )
01:39:51 <fakenullie> tdammers: this is product instead of sum
01:39:57 <merijn> opqdonut: I am, but it's not pretty! >.<
01:40:17 <opqdonut> fakenullie: just apply a logarithm
01:41:15 <tdammers> fakenullie: sure, same idea though - Either a (Either b (Either c (Either d e)))
01:41:31 <RaminHAL9001> merijn: have you tried importing Control.Arrow and using the (|||) function to clean up your code?
01:41:45 <tdammers> the purescript folks have an infix alias for Either for this purpose
01:43:08 <RaminHAL9001> tdammers: Control.Arrow.+++
01:46:01 <merijn> cocreature: Any particular flags you're annoyed by new-build not ignoring? I might attempt to hack some rudimentary filter into cabal this week
01:46:05 <xandaros> `Either (Either a b) c` or `Either a (Either b c)`? :P
01:48:22 <xandaros> On a more serious note, what would need a ternary Either for? At that point, I feel like a dedicated sum type would be much clearer
01:48:58 <AWizzArd> If I am in a company environment (and can’t upload to Hackage because of that) and write several libs that I want to use for building upon them – how is this typically being done?
01:49:11 <merijn> xandaros: Because I'm looping and never actually pattern matching directly
01:49:15 <AWizzArd> https://github.com/haskell/hackage-server maybe?
01:49:38 <merijn> AWizzArd: cabal-install supports non-hackage package repositories
01:49:48 <merijn> AWizzArd: But I don't know the details of configuring them/using them
01:49:56 <robstr> Hey, I'm using the `wuss` package and now I receive a `ghc: threadWait: invalid argument (Bad file descriptor)` - what is the way to debug this ?
01:50:02 <merijn> AWizzArd: You *could* run a full blown local hackage, but that seems overkill
01:50:21 <merijn> AWizzArd: Alternatively, if you're using new-build you can just explicitly specify where to grab packages from in your cabal.project
01:50:39 <xandaros> With stack, you can also refer to git repos in your stack.yml
01:52:21 <merijn> AWizzArd: Might have to google/contact the mailing list to figure out how to configure cabal
01:52:32 <xandaros> If you really have a lot of packages and you are looking for a company-wide solution, a local hackage might be just the thing, though
01:55:45 <cocreature> merijn: I’ve mostly been annoyed by warning flags
01:56:03 <merijn> cocreature: Tell me about it :p
01:56:47 <merijn> cocreature: Fortunately the a hacky approximation seems fairly doable
01:56:49 <cocreature> merijn: although for me personally, the fact that the cli ghc-options flag applies to all packages and not just local packages is even more annoying than the fact that some flags are not ignored
01:57:28 <merijn> cocreature: Yeah, I bitched about that too. I've argued to ezyang that "local only" should be the default and "global" should be explicitly specified
01:57:34 <AWizzArd> merijn: I would not want to refer to local directories, at least as long they are not part of the repo which is under version control.
01:58:06 <cocreature> merijn: iirc on the corresponding cabal issue that was the consensus as well (and I agree)
01:58:09 <merijn> AWizzArd: Right, then your best bet is probably adding additional repositories to ~/.cabal/config, but as I said I dunno the actual details of that
01:58:13 <AWizzArd> merijn: I could have one big master repo and everything else will be in subrepos. That would solve it, then specific apps can always refer to any version. But I also like the idea somehow of independend repos.
01:58:15 <xandaros> AWizzArd: If you are looking for a private hackage instance: https://www.haskell.org/cabal/users-guide/installing-packages.html#repository-specification
01:58:29 <AWizzArd> xandaros: I shall have a look.
01:59:00 <AWizzArd> From the Clojure/Java world I know this strategy, of running your own (Maven) artifact server.
01:59:48 <Darwin226> Does anyone know of a way to set response headers in servant without explicitly saying that in the API?
02:00:20 <AWizzArd> There could be some docker image ready, where in a "docker run" command one just mounts a specific directory into the image and configures the ports and moments later your own Hackage would be available.
02:02:56 * hackage hspec-smallcheck 0.5.2 - SmallCheck support for the Hspec testing framework  https://hackage.haskell.org/package/hspec-smallcheck-0.5.2 (SimonHengel)
02:04:23 <merijn> cocreature: But there's progress! new-haddock was fixed a bit ago to always create docs, I badgered Alex into fixing it so it properly works if you have "documentation: True" and he got rid of "new-repl" generating docs when "documentation: True" is on :) Now if I get this hashing thing sorted we're another step closer :)
02:08:26 <kuribas> @hoogle (Monad m, Monad n) => (a -> m b) -> m (n a) -> m (n b)
02:08:27 <lambdabot> Development.Shake.Language.C.BuildFlags (>>>=) :: Monad m => m (a -> b) -> m (b -> c) -> m (a -> c)
02:08:28 <lambdabot> Control.Monad.Run mchoice' :: (Monad m, MonadUnTrans MaybeAlg t) => (a -> t m b) -> (a -> m b) -> a -> m b
02:08:28 <lambdabot> Data.Generics.Strafunski.StrategyLib.MonadicFunctions mlet :: Monad m => (a -> m b) -> (b -> a -> m c) -> a -> m c
02:10:55 <xandaros> mew-build, new-haddock... are we going to combine it all into new-cabal?
02:12:58 <merijn> xandaros: Eh, yes, that's the entire point? :p
02:13:11 <kuribas> is there a better way for "join . fmap (traverse f)"?
02:13:16 <merijn> xandaros: new-X are the intended future replacements of X
02:14:06 <alp> Darwin226, aside from using `Raw` do everything manually or defining a combinator a bit like the response headers one but that just asks you for, say, a Map HeaderName HeaderValue in addition to the response, there isn't really a way, somewhat by design. even though that little combinator I just mentionned could really be shipped in the library, nobody's needed that (enough?) for it to be implemented yet
02:14:18 <merijn> xandaros: thew new-X versions are just so they can be used/dog-fooded before eventually replacing the existing commands
02:14:39 <kuribas> :t \f -> join . fmap (traverse f)
02:14:40 <lambdabot> (Traversable t, Monad m) => (a -> m b) -> m (t a) -> m (t b)
02:14:42 <Darwin226> alp: Yeah, I think I'm going the wai middleware route with this then
02:14:43 <xandaros> merijn: I am aware. I'm just amused by all the new- prefixes and jokingly suggested to merge it into new-cabal (instead of replacing the features of normal cabal)
02:15:40 <xandaros> Probably should have put a ;) or :P at the end
02:15:50 <Darwin226> alp: It might make sense to put header support directly into the Handler type. As far as I can tell, we already lie about the status codes
02:17:45 <cocreature> merijn: nice!
02:18:44 <alp> Darwin226, yes, except that we instead are looking at a more unified story of happy/said paths, status codes & what not. See https://github.com/haskell-servant/servant/issues/841 -- feedback welcome of course. I have however wondered about making Handler include a "StateT (StatusCode, Headers)" component, so to speak. or ask the handler functions to return (a, StatusCode, Headers), but I'm really more keen on unifying things cleanly, and
02:18:44 <alp> where the client functions, docs etc also get to pick up all that information.
02:19:25 <Darwin226> Thanks, I'll check it out!
02:19:43 <alp> to be entirely honest, if I had the same need as you, I'd look into defining something like 'Headers' but that doesn't track the headers at the type-level, and just asks the user for a Map or something
02:19:46 <davean> merijn: can we speed that up? :-p
02:20:02 <merijn> davean: Which part?
02:20:18 <davean> replacing X with the new-X
02:20:52 <WinterFox[m]> Is it impossible to check if 2 values are equal unless the type derives Eq?
02:20:53 <merijn> davean: I'm doing my best to badger people into fixing any remaining issues I run into :p
02:21:06 <merijn> WinterFox[m]: Yes. Unless you count pattern matching
02:21:53 <iron_houzi> How do I print unicode string from string literals in ghci?
02:22:07 <merijn> davean: So far I haven't made anyone snap (yet) :p
02:22:29 <merijn> iron_houzi: ghci runs strings through "show" which escapes unicode. Use putStr(Ln)
02:22:45 <merijn> iron_houzi: (in fact, ghci runs *everything* through show)
02:23:13 <davean> merijn: May you finish running into issues
02:23:24 <merijn> davean: Pfft, ask cocreature how likely *that* is :p
02:23:31 <merijn> davean: I have a gift!
02:24:47 <iron_houzi> merijn: Thanks! Is it possible to use unicode string literals represented as hex?
02:24:56 <merijn> iron_houzi: I think so?
02:25:47 <iron_houzi> I see the notation "\3399" .. but if I try "\bb39", the "\b" is evaluated to something else..
02:25:55 <iron_houzi> some control character
02:26:00 <merijn> I think you need \x for hex
02:26:11 <merijn> > text "\xbb39"
02:26:14 <lambdabot>  묹
02:26:18 <merijn> Is that the right one?
02:26:19 <davean> iron_houzi: man ascii
02:26:28 <iron_houzi> merijn: There we go. Thanks!
02:26:40 <davean> 010   8     08    BS  '\b' (backspace)        110   72    48    H
02:31:17 <alp> Darwin226, in fact, I'm going to look into adding this. What's your github handle? So that I can ping you when I've got a branch with that combinator up.
02:32:27 <Darwin226> alp: LukaHorvat
02:32:37 <Darwin226> thanks
02:44:44 <merijn> cocreature: Good news, this looks surprisingly doable to hack in today! Assuming you like running untested patches on HEAD ;)
02:48:04 <makalu> how do I get -fBlah flags in the cabal library? I can read information about the .cabal file flags from GenericPackageDescription but where is the actual value of the flag that will be used by cabal?
02:50:12 <merijn> makalu: Why are you trying to figure out which flags are set?
02:56:40 <aasronStone> why am i getting this error in stack my project builds locally but not on jenkins http://lpaste.net/364118
02:56:59 <makalu> merijn, I want to generate a file depending on whether a flag is set
02:57:34 <makalu> well I could do it externally in a shell script but then you would have to run ./blah.sh && cabal build
03:05:56 * hackage markdown 0.1.17.1 - Convert Markdown to HTML, with XSS protection  https://hackage.haskell.org/package/markdown-0.1.17.1 (MichaelSnoyman)
03:06:14 <cocreature> makalu: so you want to read the value of the flag in Setup.hs?
03:07:25 <cocreature> makalu: we do that in llvm-hs https://github.com/llvm-hs/llvm-hs/blob/llvm-6/llvm-hs/Setup.hs#L135
03:23:34 <tdammers> hmm, did I observe correctly that stack decides on its own that it should switch to a newer resolver, and then downloads the GHC version that goes with that?
03:25:10 <cocreature> tdammers: no stack sticks to the resolver specified in your stack.yaml
03:34:44 <tdammers> oh wait
03:34:54 <tdammers> "Writing implicit global configuration file to ..."
03:34:56 <tdammers> why, though?
03:35:30 <tdammers> oh, I think I get it, this could be a quirk from --file-watch
03:36:35 <tdammers> editing stack.yaml will cause reading to fail for a short moment while the file is being saved, and if stack's inotify picks it up right at that moment, it might incorrectly assume that we're not inside a stack project, and set up the global project
03:38:39 <makalu> cocreature, thank you! Your project is really useful to understand how to do stuff with cabal :)
03:45:50 <ertes-w> hell
03:51:56 * hackage hw-xml 0.1.0.2 - Conduits for tokenizing streams.  https://hackage.haskell.org/package/hw-xml-0.1.0.2 (haskellworks)
03:54:56 * hackage http-client 0.5.12 - An HTTP client engine  https://hackage.haskell.org/package/http-client-0.5.12 (MichaelSnoyman)
04:17:52 <seafood> Hi everyone, does anyone know of a toy compiler, written in Haskell, for a lazy functional programming language (preferably a fragment of Haskell) that is a) relatively small (5k - 10k LOC), b) clearly and simply implemented c) has a reasonably sophisticated type system i.e. polymorphism, ability to define algebraic data types. I actually only need an interpreter and it does not need to be efficient.
04:20:54 <Boarders> what is the easiest way to figure out where various functions are defined in a library?
04:21:22 <Boarders> e.g. I am trying to find the place where various things are defined in servant and finding it a bit frustrating
04:21:30 <Psybur> Boarders, in intellij I just "go to implementation"
04:21:50 <Putonlalla> % :i ReaderT
04:21:51 <yahb> Putonlalla: type role ReaderT representational representational nominal; newtype ReaderT r (m :: k -> *) (a :: k) = ReaderT {runReaderT :: r -> m a}; -- Defined in `Control.Monad.Trans.Reader'; instance [safe] Alternative m => Alternative (ReaderT r m) -- Defined in `Control.Monad.Trans.Reader'; instance [safe] Applicative m => Applicative (ReaderT r m) -- Defined in `Control.Monad.Trans.Reader'; instance [safe
04:21:56 <Putonlalla> Load them up in GHCi and ask, Boarders?
04:22:36 <Boarders> fair enough
04:24:29 <Boarders> e.g. I don't know where the type/data constructor HTML is defined
04:24:36 <Boarders> and ghci did not help me here
04:25:31 <Boarders> I can figure that out eventually I just wondered if there are best strategies people use?
04:27:08 <alp> Boarders, Servant.API.ContentTypes
04:27:32 <alp> more generally, all the modules here define all the combinators for the DSL https://hackage.haskell.org/package/servant-0.13/docs/Servant-API.html
04:28:55 <Boarders> Thanks, though that is where I looked and HTML does not seem to be defined there
04:30:20 <alp> Boarders, ooooh, HTML, sorry. servant doesn't offer one out of the box, because we have different notions of HTML content types. https://hackage.haskell.org/package/servant-blaze https://hackage.haskell.org/package/servant-lucid https://hackage.haskell.org/package/servant-ede
04:30:39 <alp> Boarders, I think the tutorial mentions that HTML comes from one of the first two packages, doesn't it?
04:30:43 <alp> sorry if not, it should.
04:32:34 <Boarders> It might do yeah, thanks
05:03:20 <AWizzArd> I see one example of a build tool config where for the „tests” section the ghc-option -O0 was specified. What is the motivation for running tests without any optimizations?
05:03:40 <hpc> it's probably faster
05:03:53 <hpc> (build+test time is faster, rather)
05:03:56 <AWizzArd> Faster to start/compile, okay, makes sense.
05:04:15 <AWizzArd> I would argue that when the production app will be compile with -O2 that the tests should run with the same settings, so that I test what I plan to run later.
05:04:29 <AWizzArd> But yes, that can also make sense.
05:08:51 <cocreature> AWizzArd: if you use travis, you sometimes need to do this kind of hacky workaround to keep build times within the given timelimit
05:10:37 <xandaros> ignoring compiler bugs, your tests should behave the same regardless of the optimisation level (unless you are timing your stuff, I suppose)
05:10:47 <exarkun> "ignoring compiler bugs"
05:11:21 <cocreature> I’d prefer to find compiler bugs when running my test suite over finding them in the deployed application
05:11:22 <exarkun> xandaros: not even if you accept that caveat, really.  performance of a piece of software is not independent of all things.
05:11:47 <exarkun> you may cause race conditions to more predictably go one way rather than the other by making the whole thing faster or slower
05:12:09 <exarkun> speeding up one part of the system might cause another part of the system to collapse under load
05:12:15 <exarkun> there's all kinds of crazy interactions possible
05:15:42 <merijn> Anyone got any fancy names for flags that "do not affect outputs"?
05:15:55 <merijn> I need something a little shorter/snappier for a field name
05:17:55 <AWizzArd> Is it possible with Cabal/Stack to define _multiple_ configs for tests? So that one could have a setting for -O0 and one for -O2 (which runs less often and on a specialized build machine)?
05:18:24 <merijn> AWizzArd: With new-build you can have multiple different cabal.project files lying around specifying different flags
05:19:13 <merijn> AWizzArd: Then you just do "cabal new-test --project-file=cabal.project.optimised" to run everything with -O2
05:19:48 <AWizzArd> All clear, thx!
05:20:27 <merijn> AWizzArd: cabal has a whole bunch of different cabal.project configs in their repo you can look over for examples
05:25:26 <danilo2> Hi guys! I;ve got a strange GHC panic :( Im having following code: `foreign import ccall unsafe "&c_set_delete_set" c_deleteSet :: FunPtr (Ptr UnmanagedPtrSet -> IO ())` and it throws GHC panic: Loading temp shared object failed: /tmp/ghc8868_0/libghc_335.so: undefined symbol: c_set_delete_set
05:25:41 <danilo2> It works on other computers and it used to work on mine, but suddently stopped working
05:26:15 <danilo2> I cleaned whole ~/.ghc and ~/.stack but the problem remains. When I chagne the FFI binding to "c_set_delete_set"  (remove ampersand) it works, but with it it throws panic
05:26:20 <danilo2> anyone knows what can cause it ? :(
05:27:50 <lseactuary> hi lemmih - you have a few mins?
05:28:20 <merijn> hmm
05:28:51 <merijn> Any suggestions on how I can encode a filtering function "[String] -> [String]" as a datatype?
05:29:30 <lseactuary> lemmih i got my code to compile but i am stuck on the nothing part : http://lpaste.net/2553558503595704320
05:30:17 <lyxia> danilo2: is that really a way to create a function pointer that should work
05:30:31 <merijn> lyxia: Yes
05:30:37 <lyxia> oh
05:30:41 <danilo2> lyxia: so it should work right? :(
05:30:57 <merijn> danilo2: What happens if you remove unsafe?
05:31:12 <merijn> I don't think unsafe import of a pointer makes sense
05:32:12 <sphinxo> how do I write a generic instance for a datatype (with existential quantifiers) that wraps another datatype ( which has a generic instance )
05:33:16 <sphinxo> so I have data A a = A a deriving (...., Generic)
05:33:45 <sphinxo> and then data WrapA = forall a. (Constraint a) => WrapA (A a)
05:37:51 <danilo2> merijn: trying now
05:38:15 <danilo2> merijn: the same happens
05:38:50 <merijn> danilo2: Do you have a link to the code
05:39:43 <danilo2> merijn: Its not yet public, it will be , but I can give you access to it if youll provide me with your github login, can we do this way, or you prefer not to ?
05:39:54 <lyxia> sphinxo: that's not possible
05:40:05 <merijn> danilo2: I was curious what the C code looked like and how you compile it
05:41:12 <lseactuary> or if someone else knows about the Nothing piece that woule cool: http://lpaste.net/2553558503595704320
05:41:20 <lyxia> sphinxo: or at least not yet
05:41:24 <lseactuary> i mainly want to understand maybe / just / nothing and then i can tweak the functions
05:41:32 <sphinxo> lyxia: oh :/
05:41:38 <sphinxo> maybe with quantified constraints?
05:44:56 <lyxia> sphinxo: In fact we can already extend generics with a way to represent some of those constraints, quantified constraints allow us to do more nontrivial things with them.
05:46:15 <lyxia> sphinxo: have you seen this https://ryanglscott.github.io/2018/02/11/how-to-derive-generic-for-some-gadts/ the ECC type could be added to generics
05:46:25 <sphinxo> yeah looking at it now :)
05:48:11 <sphinxo> so my Rep might look something like: type Rep WrapA = Rec0 (ECC a _??) (A a)
05:48:50 <lyxia> lseactuary: look at line 38 with fn=iadd. you are returning (b, maybeC), but maybeC is either Just b or Nothing
05:48:50 <sphinxo> oops: type Rep WrapA = (ECC a _??)  (Rec0 (A a))
05:49:38 <sphinxo> type Rep WrapA = (ECC a ~ _a)  (Rec0 (A a))
05:49:54 <lseactuary> lyxia yeah - what is confusing is then why the output is what it is :/
05:50:01 <lseactuary> the function is right no?
05:50:28 <lyxia> sphinxo: hm, I think there is actually a problem since a is existentially quantified
05:50:51 <lyxia> sphinxo: ECC works well when all the type variables appear as indices of the GADT
05:51:03 <sphinxo> oh yeah :/
05:51:43 <lyxia> sphinxo: with existentially quantified variables I don't see a good solution
05:52:09 <lseactuary> lyxia if i change Nothing to maybeC it fails (in the base case)
05:52:17 <exarkun> What's ECC?
05:52:17 <lyxia> lseactuary: I was actually trying to explain why the output is what it is
05:52:21 <lseactuary> ah
05:52:30 <lseactuary> sorry i misunderstood
05:52:43 <lyxia> exarkun: it's in the post I mentioned above, it's a new constructor for GHC generics.
05:52:52 <exarkun> thanks
05:55:12 <lyxia> lseactuary: the expected output is also strange, because the first element seems different from the rest. In the first it looks like you have Just of the first component at the same index, while in the rest of the list, you have Just of the element at the previous index
05:55:38 <lseactuary> yeah
05:56:22 <lseactuary> and it should show Just x if x is even
05:56:39 <lseactuary> because of the iadd function
05:57:00 <lseactuary> but i hard coded Nothing in th ebase case
05:57:24 <lyxia> lseactuary: your base case it at the end of the list, I'm talking about the beginning
05:57:43 <lseactuary> the (0, Just 0)?
05:57:47 <lyxia> yes
05:57:52 <lseactuary> hmm
05:58:05 <lseactuary> that should be the base case no?
05:58:18 <lseactuary> (0, Just 0)
05:58:54 <lseactuary> oh actually it should just be []
05:59:28 <lseactuary> actually no because then we loose the last element of the list
05:59:33 <lseactuary> *tuple
06:00:34 <lyxia> lseactuary: apart from the first element which looks dubious, the others are all pairs as returned by iadd
06:00:43 <lyxia> lseactuary: but in your function you're breaking up that pair
06:01:14 <lyxia> I mean, in transduce, what you put in the list is not (b', maybeC)
06:01:34 <lyxia> maybe it should be (b', maybeC) ?
06:01:35 <lseactuary> i need to swap b and b' around?
06:02:06 <lseactuary> (b', maybeC) gives [(1,Just 0),(3,Nothing),(6,Nothing),(10,Just 6),(15,Just 10),(15,Nothing)]
06:02:30 <lyxia> make the base case return []
06:02:51 <lyxia> you already put the (15, _) pair in the previous iteration, hence the duplicate
06:03:08 <lseactuary> hmm
06:03:12 <lseactuary>  transduce fn b [] = []
06:03:13 <lseactuary> like this?
06:03:27 <lseactuary> then i get [(0,Just 0),(1,Nothing),(3,Nothing),(6,Just 6),(10,Just 10)]
06:04:09 <lyxia> I wouldn't have reverted the previous change.
06:04:39 <lseactuary> transduce fn b [] = [(b, Nothing)] --> transduce fn b [] = []
06:04:45 <lseactuary> and transduce fn b (cmd:cmds) = let (b', maybeC) = fn b cmd in (b, maybeC) : transduce fn b' cmds
06:04:46 <lseactuary> right?
06:04:59 <lyxia> in (b', maybeC) : ...
06:05:22 <lseactuary> [(1,Just 0),(3,Nothing),(6,Nothing),(10,Just 6),(15,Just 10)]
06:05:53 <lyxia> yeah and that should be the expected output IMO
06:06:01 <lyxia> the 0 at the beginning makes no sense
06:06:05 <lseactuary> why so?
06:06:29 <lyxia> because this is the list of outputs as returned by the function fn
06:06:42 <lseactuary> oh
06:06:45 <lyxia> I'm not sure what your (0, Just 0) corresponds to
06:07:17 <lyxia> You're free to wrap this function to add this initial element if you still want to
06:07:26 <lseactuary> ye
06:08:11 <lseactuary> cant i just do this?
06:08:12 <lseactuary> transduce fn b (cmd:cmds) = (b, maybeC) : (let (b', maybeC) = fn b cmd in (b', maybeC) : transduce fn b' cmds)
06:10:02 <lyxia> explain why
06:10:14 <lseactuary> the let stuff gives us a list of tuples
06:10:22 <lseactuary> we need to add a tuple to the front of the list
06:10:28 <lseactuary> with parameters b and Just/Nothing b
06:11:35 <lyxia> But your expected list doesn't have elements of the form (b, Just b)
06:11:57 <lyxia> (1, Just 0) <- 1 is not equal to 0
06:12:02 <lseactuary> yeah
06:12:07 <lseactuary> oh
06:13:26 <lseactuary> hence in the base case cant i just keep  transduce fn b [] = [(b, Nothing)]
06:14:11 <lyxia> what for?
06:14:11 <lseactuary> i guess that doesnt help
06:14:19 <lseactuary> hmm
06:14:24 <lseactuary> how to add the first element :/
06:14:37 <lseactuary> : syntax was wrong?
06:14:41 <lyxia> I think things will be clearer if you can say in English what the list you expect represents
06:15:00 <lseactuary> sure
06:15:30 <lseactuary> takes one type (b -> a -> (b,Maybe c)) which spits out c-outputs and new b-states
06:16:01 <lseactuary> so in the iadd example it will compute the sum of 2 numbers, and report the value of the side channel when the incoming accumulator is even
06:16:32 <lseactuary> so the function is good as it is but i think we need the 'start point' also
06:18:29 <lyxia> Your output list has type [(b, Maybe c)], what c would you associate with the starting point?
06:19:05 <lseactuary> the 'b'
06:19:08 <sphinxo> how can I cast between phantom types? say I have data AUnknown; data ARed; data ABlue and then data MyA a = Int
06:19:24 <sphinxo> and I want to go from MyA AUnknown to MyA ARed
06:19:42 <sphinxo> ( cast is probably too strong a word )
06:19:55 <lseactuary> lyxia - oh i see what you mean
06:20:03 <Taneb> sphinxo: you can use Data.Coerce I think
06:21:22 <lseactuary> lyxia - think the function as it is is fine
06:21:28 <sphinxo> Taneb: thanks!
06:21:28 <Taneb> sphinxo: there's a magic instance Coercible (MyA AUnknown) (MyA ARed)
06:21:56 <Taneb> Alternatively you can define it yourself pretty easily
06:23:02 <sphinxo> Taneb: just out of interest, how would it be defined?
06:23:08 <byorgey> You can't define a Coercible instance yourself.
06:23:33 <byorgey> you can define a conversion function but it won't be as efficient as 'coerce' (which is always a no-op at runtime)
06:25:59 <WinterFox[m]> Is a morphism just another word for function?
06:26:33 <byorgey> WinterFox[m]: no, morphism is more general.
06:29:59 <Taneb> sphinxo: foo :: MyA AUnknown -> MyA ARed; foo (MyA x) = MyA x
06:30:46 <WinterFox[m]> byorgey: So all functions are morphisms?
06:30:59 <byorgey> WinterFox[m]: yes.
06:31:54 <byorgey> WinterFox[m]: intuitively, a 'morphism' is just some kind of relationship between two things, as long as you can compose a relationship between A & B and one between B & C  to get a relationship between A & C
06:32:23 <byorgey> obviously functions can be composed in that way, but so can lots of other kinds of relationships
06:33:14 <gentleterror> Hey
06:33:27 <byorgey> WinterFox[m]: if you want the formal version, you have to learn the definition of a category (which is not hard).
06:33:36 <byorgey> hi gentleterror, welcome
06:35:13 <Boarders> WinterFox[m]: morphism often connotes that some relevant structure is being preserved by a map of some sort
06:35:53 <Younder> Boarders, Except a catamorphism
06:36:32 <byorgey> catamorphisms still preserve structure in a suitably generalized sense.
06:36:34 <Boarders> except lots of things but I am just offering a quick and dirty heuristic from algebraic contexts
06:37:02 <Younder> Boarders, I think of it as 'prog 2&1 > /dev/null'
06:37:21 <Boarders> e.g. by type class morphism one would mean a map that preserves the operations of the typeclass
06:42:30 <ertes-w> WinterFox[m]: learn the definition of cateogries, it's a reasonably easy concept to grasp, if you already know what sets (or types) and functions are
06:43:16 <ertes-w> WinterFox[m]: while reading the definition it's ok to just read "object" as "set" (or "type") and "morphism" (or "arrow") as "function"
06:51:03 <byorgey> ertes-w: but this whole conversation started with WinterFox[m] asking whether 'morphism' was the same as 'function'.  So assuming morphism = function is kind of missing the point =)
06:54:10 <ertes-w> indeed
06:55:33 <ertes-w> WinterFox[m]: after that check out how partially ordered sets form a category…  that's suitably different from sets nad functions to give you an idea of how cateogries are a more general concept (i.e. all functions are morphisms, but not all morphisms are functions)
06:55:49 <ertes-w> s/nad/and/
07:06:13 * shapr hops cheerfully
07:06:18 <kdridi> hi there. i'm implementing a image compressor using k-means algorithm + PixelJuice. My code works fine however it's terribly slow. How can i deal with it? https://gist.github.com/kdridi/36f8c196953453eb012d0045a8858da8
07:07:39 <oo_miguel> I am confused how sandboxes work... I do: "export CABAL_SANDBOX_CONFIG=/home/miguel/sbx/hask/mig1/cabal.sandbox.config"   but then "cabal exec -- env | grep CABAL_SANDBOX_CONFIG" show me "CABAL_SANDBOX_CONFIG=/home/miguel/cabal.sandbox.config" ... what sets this inside the sandbox and why?
07:07:53 <cocreature> kdridi: step 0. make sure you are compiling with optimizations step 1. throw the profiler at it
07:19:05 <tjg> Hello there, for my Haskel stack build tool my stack.yaml is currently set to:      resolver: lts-11.2  , I know I need to change this avoind dependency problems. What resolver: lts-"version" would guys recommend ?
07:19:37 <cocreature> tjg: lts-11.2 seems like a reasonable choice. which problem are you running into?
07:21:31 <tjg> Well I need ghc-mod so that I can get it to work with the Atom Text Editor, I haven't been able to find a workaround to get it to install with stack.
07:21:51 <Clint> there are still like a million libraries that don't build with ghc 8.4
07:22:41 <cocreature> lts-11.2 is GHC 8.2 not 8.4
07:23:24 <shapr> Clint: oh really? Is there a list?
07:23:25 <tjg> Clint: I am using ghc 8.2, is that still to new ?   ,  And I was just wondering what I should change the resolver: lts"version" to, it seems like that is the only way to get around this.
07:24:39 <Clint> shapr: there are the stackage github issues
07:25:02 <Clint> personally plaguing me are anything that uses base-compat or safecopy or maybe fgl
07:25:21 <Clint> i'm no doubt forgetting something
07:25:21 <cocreature> tjg: there is a branch for GHC 8.2 support in ghc-mod https://github.com/DanielG/ghc-mod/tree/ghc802
07:26:02 <cocreature> tjg: if you want to stick to a released version of ghc-mod, you’ll have to choose a resolver for 8.0.2. you can find the latest lts per ghc version on the stackage website https://www.stackage.org/
07:27:42 <tjg> cocreature: Thanks, lets see if I can get it to work!
07:30:11 <Boarders> What is generally considered good style for declaring a new member of a record type?
07:30:31 <Boarders> e.g. is it considered bad style to make equals align for the record or not?
07:31:31 <cocreature> Boarders: depends on who you ask :)
07:32:12 <Putonlalla> I never align anything, because that makes automated refactoring harder.
07:32:21 <ertes-w> oo_miguel: not directly answering your question, but if you have cabal-install 2.0, have you considered switching to new-build?
07:33:03 <ertes-w> Boarders: i always align them with the rationale that you should write code for humans, not tools
07:33:53 <cocreature> tbh I’m not sure that we actually have a refactoring tool for Haskell that has problems with that
07:34:26 <ertes-w> Boarders: the "generally considered good style" is to write readable code
07:34:28 <cocreature> the bigger argument that I’ve heard against alignment is that it creates larger diffs and can thereby make it harder to see what has actually been changed
07:34:45 <Putonlalla> That would be search-and-replace in your editor of choice.
07:35:10 <cocreature> use regex replace and deal with spaces :)
07:35:29 <ertes-w> thankfully the haskell community has both a flexible syntax and (for the most part) no style dogmas
07:35:46 <ertes-w> although i wish "don't start lines with punctuation" became one =)
07:36:10 <tdammers> pff, leading punctuation is great
07:36:17 <cocreature> may the style war begin
07:36:24 <tdammers> >:->
07:36:31 <Putonlalla> I have this bad habit of naming new things `urgh` and the like and only renaming them later.
07:36:53 <kdridi> hi there. i'm implementing a image compressor using k-means algorithm + PixelJuice. My code works fine however it's terribly slow. How can i deal with it? https://gist.github.com/kdridi/36f8c196953453eb012d0045a8858da8
07:36:59 <kdridi> sorry for double posting
07:37:06 <kdridi> i was disconnected :x
07:37:15 <cocreature> kdridi: take a look at the logs in the topic, I send you a response directly before you left
07:37:49 <tdammers> Putonlalla: I have too many commits in my repositories where the commit message just says "stuff" or "things" or "fix things"
07:38:45 <cocreature> don’t we all …
07:39:19 <kdridi> cocreature: i tried to use the optimisation from the compiler and i alsao profiled the execution
07:40:31 <cocreature> kdridi: and what was the result of profiling?
07:43:24 <guessWHo> how can i do this http://lpaste.net/364124
07:48:52 <lyxia> guessWHo: I don't understand
07:49:17 <lyxia> what does the new thread do?
07:49:18 <cocreature> guessWHo: you mean you want to wait for a thread to terminate without using mvars?
07:50:00 <guessWHo> cocreature : i want to fork thread from func1 and not in main function
07:50:07 <xandaros> I use async for this sort of thing
07:50:19 <cocreature> guessWHo: then just call forkIO in func1?
07:50:23 <xandaros> Might be a bit overkill
07:51:19 <guessWHo> cocreature : i did but then if i call it in main function and don't use MVars it will terminate
07:52:17 <guessWHo> xandaros : using async ??
07:52:29 <cocreature> guessWHo: main won’t wait for other threads to terminate. if you want that then you need to use some synchronization mechanism like MVars or even better the async library (which uses TVars under the hood iirc)
07:52:31 <xandaros> https://hackage.haskell.org/package/async-2.2.1/docs/Control-Concurrent-Async.html#v:wait
07:53:44 <kdridi> cocreature: here is the result of the profiling : http://lpaste.net/6329600742722109440
07:54:18 <xandaros> On a related note: Does anyone know if I can  print exceptions thrown in an Async? I do want it to die and I want the main thread to stay alive, but this can make debugging difficult
07:55:07 <guessWHo> cocreature : exactly but i don't want to use mvars i want something so that when i call func1 i don't have to use mvars and still be able to keep main thread alive
07:55:23 <cocreature> guessWHo: why do you not want to use MVars?
07:56:00 <guessWHo> cocreature : because as i said i'm exporting func1
07:56:06 <Ariakenom> xandaros, what do you mean? https://hackage.haskell.org/package/async-2.2.1/docs/Control-Concurrent-Async.html#v:waitCatch
07:57:45 <cocreature> guessWHo: I don’t think you can avoid providing some mechanism for the caller to wait for your thread to terminate.
07:57:57 <xandaros> Ariakenom: Alright. What if I can't wait on the thread? Or rather, I have potentially many of these and they all run for an indefinite amount of time (until stopped by the user or because of a runtime exception)
07:58:07 <cocreature> guessWHo: you could hide it behind something like withFunc1 :: IO () -> IO ()
07:58:11 <lseactuary> lyxia do you know how i can append the first tuple please?
07:58:59 <guessWHo> cocreature : cn u expand on that
07:59:06 <cocreature> kdridi: that looks weird, there is no cost center in your own code. how exactly have you compiled?
07:59:25 <Ariakenom> xandaros, sounds like you just want to wrap them in a catch-and-print action each then?
07:59:46 <xandaros> Hmm... I guess I'll do that
07:59:57 <cocreature> guessWHo: "withFunc1 c" will internally create an MVar for off a new thread, then execute "c" in the current thread and then wait for the MVar
08:00:08 <xandaros> guessWHo: I annotated your example with how you could do it with async
08:00:21 <cocreature> guessWHo: in "main" users can then use "withFunc1 $ do …" and that whole block will wait for the thread to terminate
08:04:14 <guessWHo> xandaros : yeah i was aware of async but the thing is as i said i'm exporting func1 so don't really want to force a lib on user
08:04:52 <cocreature> async is one of the core libs in the Haskell ecosystem so I wouldn’t worry about that
08:05:36 <kdridi> cocreature: you're right :x i pasted the wrong profiling data
08:05:44 <kdridi> cocreature: here is the right one : http://lpaste.net/4002002384124379136
08:06:04 <xandaros> The great thing about this particular approach is that it is completely open to the user how to do this. They don't have to use async. There is nothing special about func1 that requires async
08:06:09 <guessWHo> cocreature : that's neat and i remember that pattern from a lib i saw few days back, thank you :)
08:06:17 <xandaros> They can call it in a blocking manner, they can use async, they can use forkIO, ...
08:09:02 <cocreature> kdridi: so as a first step I would make the fields in PicturePosition and PictureElement strict. depending on whether PicturePosition is shared or not it might also make sense to slap an UNPACK pragma on the PicturePosition field (GHC will unbox small fields automtically if you compile with optimizations so you don’t need it for the other fields)
08:10:32 <cocreature> kdridi: squareDistances looks fairly hard to optimize but maybe there is a way to call it not as often
08:11:20 <cocreature> kdridi: for minimumIndex you can combine the task of finding the minimum and finding the index of that minimum into a single traversal
08:11:51 <kdridi> cocreature: to make then fields in PicturePosition and PictureElement strict, i just have to prefix them with exclamation marks haven't i?
08:11:59 <cocreature> yep
08:14:02 <guessWHo> cocreature : but it's blocking i guess there is no other way to manually write MVar in main write all the code before takeMVar ??
08:14:24 <cocreature> guessWHo: I don’t understand the question
08:15:47 <lyxia> lseactuary: transduce0 f b cmds = (b, Nothing) : transduce f b cmds   -- transduce0 is a wrapper that appends the initial element to the result list
08:16:13 <guessWHo> cocreature : if i go with what you said and hide everythign behind withfunc1 that will avoid writing Mvars in main but it's it will block the thread
08:16:39 <cocreature> guessWHo: I thought the whole point of this was that you want main to block until the thread has exited?
08:17:11 <lseactuary> lyxia - nice!
08:17:19 <lseactuary> oh i realise my mistake
08:17:23 <lseactuary> i was trying to do it within the function
08:17:58 <guessWHo> cocreature : i do but after i run withfunc1 i want to do something else and that i can only do after running func1 because it's writing internally to few Mvar which i need to read after running func1
08:18:41 <cocreature> guessWHo: you should do those things in the IO action that you pass to withFunc1 not after the call to withFunc1
08:18:56 <cocreature> then they will run concurrently with the thread
08:19:20 <lseactuary> lyxia - can you help with the step3 function attached? i an sure the first element of the tuple is correct, it is the nothing / just part i am stuck on
08:19:35 <lseactuary> also a bit unsure how to generalise here
08:19:57 <Hendrik_> hi guys, have a quick and easy syntax question about types in Haskell, I like to specify a type with a number in it, so type N = (String, a) where a is of class Num, how do I specify this in Haskell
08:20:50 <tdammers> Hendrik_: you don't
08:21:24 <tdammers> or rather, you'd do that at the use site, not the definition site
08:22:10 <guessWHo> cocreature : when i said withfunc1 write to Mvar i meant func1 which we have wrapped inside withfunc1 so still i'll have to do those things after calling func1 is there another way other then using Mvars in main ??
08:22:50 <cocreature> guessWHo: either I’m not understanding what you’re asking for or the answer is that you can’t avoid MVars :)
08:22:56 <Hendrik_> do i have to use data instead of type?
08:23:01 <Rodenbach> Is there a preferred lib for doing exception handling? Are most people nowadays using Control.Exception.Safe?
08:23:26 * hackage datarobot 1.0.1 - Client for DataRobot API  https://hackage.haskell.org/package/datarobot-1.0.1 (seanhess)
08:23:47 <guessWHo> cocreature : yeah i do think i can't avoid Mvars but then my haskell knowledge is limited
08:24:01 <tdammers> Hendrik_: depends. type is just an alias that allows you to use two types interchangeably; data introduces a proper, separate, incompatible type
08:24:34 <cocreature> guessWHo: I’m still not sure why withFunc1 doesn’t work for you but without seeing a code sample that demonstrates the problem you have with it, I’m too stupid too understand the problem :)
08:24:35 <tdammers> Hendrik_: but even if you were to write `data N a = N (String, a)`, you would still not constrain a in the definition
08:25:09 <tdammers> Hendrik_: you'd do that at the usage site, e.g.: `foo :: Num a => N a -> Int`
08:25:14 <guessWHo> cocreature : i'll share a demo and no you're not stupid you're humble :)
08:25:25 <kdridi> cocreature: i know that this algorithm is a greedy algorithm but i don't know what are the best practice in order to use parallelism in haskell nor which data structure are the best for that (List, Vector, Map, something else?)
08:26:23 <tdammers> Hendrik_: look into Data.Map for an example of what this approach looks like in practice: most of the Map functions constrain the key to have an Ord instance, but the Map type itself doesn't - so you can have a Map with keys that aren't orderable, but you cannot insert anything or look anything up
08:28:08 <lseactuary> lyxia i just realised the definition gives (0, Nothing) as the first tuple instead of (0, Just 0)
08:29:32 <cocreature> kdridi: I would first try to optimize the code as far as possible and only once you can’t find any significant opportunities for improvements start thinking about how you can introduce parallelism
08:29:43 <Hendrik_> ok thanks, so the constrains are specified at the use site, but how do I create an alias for a tupple with a String and a Num
08:29:56 <Hendrik_> or not even a Num, just a
08:30:08 <lyxia> lseactuary: I have already tried to explain why I think the list you are expecting is problematic
08:30:10 <Hendrik_> unspecified
08:30:26 <lseactuary> lyxia - oki
08:30:51 <kdridi> cocreature: i tried to optimize what you recommended. I just gained about 10% but i should divide the execution time by 90% :-(
08:31:42 <cocreature> kdridi: once you’ve done those things profile again, and take a closer look at the things that are now at the top of your profile
08:32:23 <lseactuary> lyxia can you help me out with step3?
08:33:19 <lyxia> lseactuary: I don't know what step3 is
08:33:40 <lseactuary> http://lpaste.net/7943747356338421760
08:34:17 <lseactuary> dis = forward step length, dir = turn angle. it should return an optional list of states.
08:34:31 <lseactuary> i will then append it to some other functions i wrote before to make some trees :)
08:35:43 <guessWHo_> cocreature : here it is https://dpaste.de/3TZM
08:35:57 <lyxia> lseactuary: lpaste seems not to respond anymore
08:36:18 <guessWHo_> lyxia : yeah it's not
08:36:38 <lseactuary> sec i put in pastebin
08:36:39 <reactormonk> What's short for fmap join $ traverse fun [] ?
08:37:16 <lseactuary> https://pastebin.com/DVwNXEWu
08:39:36 <glguy> reactormonk: pure []
08:40:05 <lyxia> lseactuary: what's wrong with it
08:40:30 <lseactuary> the 'Nothing' part
08:40:34 <lseactuary> is it right?
08:40:50 <lseactuary> also ive taken cases e.g. (Left [Forward1])
08:40:53 <lseactuary> how to generalise?
08:41:01 <lseactuary> like i did for compile3?
08:41:05 <reactormonk> glguy, let me rephrase: fmap join $ traverse fun l
08:41:40 <cocreature> guessWHo_: how about https://gist.github.com/cocreature/b6c490ab4f77e5e3240142ba841023ff
08:41:49 <c9c3> Is there a way to get ahold of a `Dec` with TH without a QuasiQuoter? `reify` gives me `VarI Name Type (Maybe Dec)` however the `Maybe Dec` is always `Nothing`..
08:42:42 <lyxia> lseactuary: I don't understand what you're doing here.
08:43:07 <lseactuary> i was trying to test cases to try to understand how to write the function
08:43:18 <lseactuary> as this Just Nothing syntax is new for me
08:44:32 <jchia_1> Can TH do reflection in the Q monad? I.e. can I get the type of some variable name?
08:44:35 <Rodenbach> Is there a preferred lib for exception handling? Are most people nowadays using Control.Exception.Safe?
08:44:57 <lseactuary> lyxia or you mean what the function should do?
08:45:21 <c9c3> jchia_1: `reify` gives you the type, yes.
08:45:46 <lyxia> lseactuary: both
08:45:54 <lseactuary> ah ok
08:47:00 <lseactuary> lyxia - for the function - we are basically passing in a forwards step length and a turn angle, and returning an optional list of states.
08:47:09 <lseactuary> (p,d) = (position, direction)
08:47:37 <glguy> Rodenbach: Most people are using Control.Exception
08:48:08 <Rodenbach> glguy: Isn’t Control.Exception.Safe a superset? It can catch the same exceptions, but also more?
08:48:11 <guessWHo_> cocreature : that should work , nice :)
08:48:22 <lseactuary> lyxia - make sense so far?
08:48:57 <lyxia> lseactuary: okay
08:49:01 <lseactuary> cool
08:49:18 <lseactuary> so previously i defined step2 dist dir1 Forward1 (x:+y, dir2) = (move dist dir2 (x:+y), dir2)
08:49:29 <lseactuary> which basically just took a point and direction and did something to it in the complex plane
08:49:40 <cocreature> guessWHo_: basically the idea is that you pass the code that should run “after” the call to func1 to withFunc1 so withFunc1 can ensure that it runs in parallel with the thread it starts while making sure that when it returns both the thread it spawned has terminated as well as the code that was passed to it
08:49:40 <lseactuary> same with step2 dist dir1 TurnLeft1 (x:+y, dir2) = (x:+y, turn dir1 dir2) and step2 dist dir1 TurnRight1 (x:+y, dir2) = (x:+y, turn (-1*dir1) dir2)
08:49:53 <lseactuary> these are basically step2 :: Double -> Double -> TurtleCmd1 -> TurtleState2 -> TurtleState2
08:50:04 <lseactuary> do the step2 make sense?
08:50:18 <lseactuary> we are thinking about a complex plane hence polar co-ordinates
08:50:33 <guessWHo_> cocreature : yeah took me a while but was clear from code ty :)
08:50:40 <lyxia> lseactuary: ok
08:51:07 <lseactuary> but now i am trying to define step3 :: Double -> Double -> TurtleBranch3 -> TurtleState3 -> (TurtleState3, Maybe [TurtleState2])
08:51:16 <lseactuary> again we input a dist and dir
08:51:25 <cocreature> guessWHo_: although I would probably still use async and it’s withAsync function instead of trying to reinvent async using an MVar :)
08:51:27 <lseactuary> but slightly different data structure this time
08:51:43 <lseactuary> to try to understand what was going on i made the cases: https://pastebin.com/DVwNXEWu
08:51:46 <lseactuary> but now i am stuck
08:52:53 <guessWHo_> cocreature : even i'm thinking of that but don't want to use async in main
08:53:18 <lseactuary> once i define step3 i will define run3 :: Double -> Double -> TurtleProg3 -> TurtleState3 -> [Maybe [TurtleState2]] which will make the nice pics :)
08:53:26 <cocreature> guessWHo_: you don’t have to. you can just use it internally in withFunc1
08:53:28 <lseactuary> i mean we can define run3 directly if easier
08:53:52 <guessWHo_> cocreature : okay cool that's solves the problem
08:54:02 <lyxia> lseactuary: so what's supposed to be in the output list of states?
08:54:13 <lseactuary> for step3?
08:54:32 <guessWHo_> cocreature : but what about the wait part of async my function is non terminating ??
08:54:33 <cocreature> guessWHo_: the basic idea of using an MVar is easy but there are some tricky parts, e.g., what happens if the thread throws an exception before it reaches the putMVar? async will handle all of those for you
08:54:38 <lseactuary> in the book they didnt give this example - only for run 3 :/
08:54:41 <jchia_1> c9c3: Thanks
08:54:50 <lseactuary> hence was trying to write something then test then iterate
08:55:03 <cocreature> guessWHo_: so?
08:55:57 <cocreature> guessWHo_: just change the definition of withFunc1 that I showed you to withFunc1 c = withAsync (forever (do …)) (\_ -> c)
08:57:15 <guessWHo_> cocreature : alright ty :)
08:58:20 <lseactuary> lyxia i have a feeling we could use that transduce funtion for run3
09:00:13 <lyxia> lseactuary: you need to have an idea of what that function should be before you can write it, I can't really help you with that
09:00:48 <lseactuary> lyxia - ye i understand what the function should be - just having trouble writing it :/
09:01:08 <c9c3> jchia_1: No worries! You wouldn't know how to get ahold of the `Dec` itself, I'm actually just struggling with TH myself..
09:01:18 <lyxia> lseactuary: try to write some unit tests
09:01:27 <lseactuary> oki
09:02:58 <jchia_1> c9c3: Thinking about the AST can be quite convoluted. I usually put some sample code in [||] and then print the AST using runQ to get an idea of what I need to generate.
09:03:28 <jchia_1> I find that helps a lot. I wonder if other people do that, too.
09:03:58 <cocreature> jchia_1: I’ve certainly done that :)
09:05:25 <kdridi> cocreature: the thing at the top of my profile is a mathematical distance calculation function. On a 1900x1200 image it is called tenth millions of times. this is why this algorithm needs some parallelism
09:05:33 <lseactuary> lyxia is the Either TurtleProg1 TurtleCmd3 type always (LeftorRight [x])
09:05:35 <c9c3> Yeah me too, trying to put together the right constructors is very unpleasant.
09:06:34 <c9c3> The thing I'm trying to do is to call `$(myTHModifier 'fun)` and inside `myTHModifier` modify the AST of `fun` itself, is that possible?
09:06:47 <cocreature> kdridi: according to your profile this function makes up 22% of the runtime. if you have 4 cores and manage to get a linear speedup you only gain 15%. if you’re looking for 90% you need to do something else
09:06:50 <lyxia> lseactuary: I don't know
09:07:08 <kdridi> cocreature: you're right ;-)
09:07:12 <lseactuary> kk
09:07:44 <cocreature> kdridi: I’m not saying parallelism isn’t useful but it’s not a silver bullet
09:08:15 <kdridi> cocreature: actually, the program spend 33% of time in the GC...
09:08:30 <cocreature> kdridi: then maybe try some memory profiling
09:08:53 <kdridi> cocreature: btw, now squareDistances takes 67.3% of the execution ;-)
09:09:38 <glguy> c9c3: No, you can't look up the implementation of a value by name
09:10:53 <c9c3> glguy: Thanks, for the info - I was starting to think this to be the case.
09:11:33 <c9c3> So the only way of achieving something like that would be to parse the declaration with a quasiquoter I guess..
09:12:03 <glguy> >>> $(stringE . show =<< [d| f x = x + 1 |])
09:12:16 <glguy> You can quote the declaration using [d| |] brackets
09:13:27 <c9c3> Oh, that's actually even easier, I was just looking at haskell-src-meta.
09:14:51 <cocreature> kdridi: If you really want to, you can just try replacing the "map" used to calculate squareDistance by "parMap rdeepseq" but I somewhat doubt that’s going to give you the speedup you’re hoping for
09:15:13 <kdridi> cocreature: i'll try that thx
09:18:17 <cocreature> do we have something that can automatically derive Bifunctor?
09:18:28 <cocreature> generic-deriving doesn’t seem to have it
09:19:31 <cocreature> ah the bifunctors package has some TH
09:28:09 * hackage megaparsec 6.5.0 - Monadic parser combinators  https://hackage.haskell.org/package/megaparsec-6.5.0 (mrkkrp)
09:29:30 <cocreature> ^ turns out annoying people on issue trackers actually works, that’s the version of megaparsec that exposes internals
09:33:07 <bitemyapp> oh good
09:36:26 * hackage transaction 0.1.1.2 - Monadic representation of transactions.  https://hackage.haskell.org/package/transaction-0.1.1.2 (arowM)
09:38:17 <infandum> I have this error when running A.eitherDecode from aeson: Could not deduce (GHC.Generics.Generic (V.Vector a))
09:38:28 <infandum> where I have A.FromJSON a
09:38:51 <lyxia> cocreature: no we don't
09:38:55 <lyxia> :(
09:39:14 <infandum> I tried deriving Generic for Vector: deriving instance (Generic a) => Generic (Vector a)
09:39:24 <cocreature> lyxia: Data.Bifunctors.TH seems to work for my usecase at least :)
09:39:37 <infandum> But I get this error: Can't make a derived instance of ‘Generic (Vector a)’:
09:39:38 <infandum>   The data constructors of ‘Vector’ are not all in scope
09:39:38 <infandum>     so you cannot derive an instance for it
09:40:02 <infandum> I didn't think I needed to do any of this, however, as aeson already has instances for vector I thought
09:40:29 <lyxia> cocreature: I have some code that could ultimately do that with Generics https://gist.github.com/Lysxia/6405198e85adb6b32c4b40a9c335b6d0 but it relies on INCOHERENT :( I'm not sure we can do without this pragma or without redesigning Generics.
09:40:55 <lyxia> infandum: Vector is not a Generic type
09:41:01 <lyxia> don't try to derive it
09:41:26 * hackage slack-web 0.2.0.4 - Bindings for the Slack web API  https://hackage.haskell.org/package/slack-web-0.2.0.4 (EmmanuelTouzery)
09:41:49 <lyxia> infandum: do you have a full example
09:42:23 <infandum> Not really
09:44:30 <cocreature> lyxia: thanks I’ll take a look
09:45:19 <infandum> Oh, I got it to work
09:45:27 * hackage corenlp-parser 0.4.0.0 - Launches CoreNLP and parses the JSON output  https://hackage.haskell.org/package/corenlp-parser-0.4.0.0 (k_bx)
09:45:45 <infandum> Use FlexibleContexts, then in the constraints use Generic (Vector a)
09:46:10 <infandum> Seems a bit fragile for a fix
09:46:15 <lyxia> cocreature: ah now that you make me think about it again I think I have a trick to get rid to INCOHERENT!
09:46:47 <lyxia> infandum: that's not a fix, you only delayed the error
09:46:56 <infandum> oh
09:47:34 <lyxia> something is asking Generic (Vector a), you must find out what and kill it with fire
09:47:42 <cocreature> lyxia: you’re ruining all the fun! I was just about to let you nerdsnipe me into trying to figure out if I can find a way to get rid of it :)
09:47:46 <infandum> Aeson is, right?
09:48:43 <lyxia> infandum: I don't think so, or it is a bug in aeson
09:50:06 <infandum> So essentially search for Generic?
09:51:24 <lyxia> Yeah, I would guess there's a stray genericParseJSON
09:51:56 * hackage bookkeeping 0.4.0.0 - A module for bookkeeping by double entry.  https://hackage.haskell.org/package/bookkeeping-0.4.0.0 (arowM)
09:57:31 <ph88> hey guys, does anyone know how i can fix this warning? https://bpaste.net/show/c2472c48bd9f  (bottom of paste)
09:59:09 <infandum> lyxia: Okay, I'm no longer making it general. I'm trying to load a HC.Dendrogram a (from the hierarchical-clustering library) that was stored as a json and I'm trying to load it from a json. I derived read, generic, fromjson and tojson of HC.Dendrogram a and this worked in another program. I am separating it out now, but it's giving me the above error.
09:59:25 <infandum> So now I'm just saying "load HC.Dendrogram Text".
09:59:44 <infandum> And it's giving me the No instance for (Generic (V.Vector T.Text)) error
10:02:15 <lyxia> ph88: use MonoLocalBinds
10:02:25 <lyxia> ph88: or just disable the warning
10:04:46 <lyxia> infandum: can you paste the full error message
10:05:49 <lyxia> infandum: and are you sure you want to derive FromJSON/ToJSON here? If you already have JSON you want to parse it is quite unlikely that the derived parser matches its format, especially for a recursive type
10:05:56 * hackage bookkeeping-jp 0.1.1.3 - Helper functions for Japanese bookkeeping.  https://hackage.haskell.org/package/bookkeeping-jp-0.1.1.3 (arowM)
10:06:04 <infandum> lyxia: https://pastebin.com/EeaAhHLJ
10:06:42 <infandum> lyxia: I create a json from the structure first, then read it in later
10:06:48 <infandum> (a way to save the dendrogram)
10:06:55 <lyxia> ah ok.
10:07:02 <infandum> It worked in the past, I must be leaving something important out
10:07:04 <lyxia> how did you derive these instances
10:07:40 <infandum> lyxia: https://pastebin.com/hbLRVEm6
10:07:59 <infandum> With the appropriate pragmas
10:08:10 <infandum> StandaloneDeriving and the like
10:08:19 <lyxia> infandum: get rid of Generic a in Generic (Dendogram a)
10:08:26 <lyxia> and everywhere else
10:08:40 <generic_derivati> Hello! I perform default resolution in my program by performing a natural tranformation from `MyType Maybe` to `MyType Identity`. I want to derive some `ToJSON` instances for these types. I know that `Maybe` and `Identity` have instances `ToJSON a => ToJSON (Maybe a)` and `ToJSON a => ToJSON (Identity a)`. I would like to declare an instance like `instance (forall a. ToJSON a => ToJSON (f a)) => ToJSON (MyType f)` but Haskell doesn't
10:08:40 <generic_derivati> accept constraints like that. I think QuantifiedConstraints would help me but it's not released yet to my knowledge.
10:08:55 <lyxia> Generic instances only look at the type's constructors, not its fields.
10:09:05 <infandum> lyxia: But I need that for aeson, right?
10:09:32 <lyxia> infandum: only deriving instance Generic (HC.Dendogram a)
10:09:35 <infandum> Yeah, now it's complaining that it can't deduce generic
10:10:09 <infandum> Now it's saying it can't deduce generic for genericToEncoding
10:11:09 <infandum> I should mention this is the only place where generic is used
10:11:16 <lyxia> infandum: even if it looks like https://pastebin.com/tjMstgT0 ?
10:12:43 <lyxia> I'm sure this should work, so if it doesn't I need to see the code to understand what is wrong.
10:13:27 * hackage ochintin-daicho 0.1.0.3 - A module to manage payroll books for Japanese companies.  https://hackage.haskell.org/package/ochintin-daicho-0.1.0.3 (arowM)
10:13:56 <infandum> That did it!
10:13:59 <infandum> What was the problem?
10:15:04 <lyxia> Generic a => Generic (Dendo... a)
10:15:13 <lyxia> makes no sense
10:18:46 <EvanR> I see now that in stuff like Generic a => Generic (Foo a), the arrow isnt "really" backwards... just because the checker can go the other way to get instances. The direction is consistent with rules of logic which happen to be uniquely reversible
10:18:50 <infandum> Where can I read up on this?
10:19:24 <infandum> It looks like it's deriving Generic for Dendrogram if it knows that "a" is generic
10:19:29 <EvanR> n:N => S(n):N, for instances allows predecessor
10:19:31 <infandum> Obviously you are saying that's not the case
10:29:27 <agentultra> Is there a way to generate a type for the contructors of a GADT? I noticed you can define the record in the GADT but then I don't have a type for it. So I've pulled the records into data definitions and now it feels a little funky having two constructors for a thing of the same type... not sure if I'm going about this correctly: https://gist.github.com/agentultra/eda9e52df4034c02b4c55af7f8d4a7a5
10:30:15 <agentultra> (well I have a type, but it's always Field and I just get different constructors for it)
10:33:23 <dyl> cocreature would you consider llvm-hs stable enough for use in a non-trivial JIT/REPL language?
10:33:44 <dyl> I haven't touched the Haskell LLVM bindings in a long time, so I'm not sure how much they've advanced, or how much they lag behind the C++.
10:33:47 <dyl> (or OCaml)
10:35:59 <dyl> Also more generally, out of curiosity, what's the current state of parsec/trifecta style libraries?
10:36:49 <cocreature> dyl: we support LLVM 6.0 so we’re not really lagging behind. you can certainly find features in the C++ API that are not yet present in C++ (finding features exposed via the C API that are not present in llvm-hs is a bit harder and the OCaml bindings rely on the C API). overall, I’d say it’s pretty stable and unless you have some specific new LLVM feature in mind, you can probably get by just fine with
10:36:51 <cocreature> what’s there
10:37:00 <dyl> Oh, excellent :).
10:37:23 <dyl> I'm just considering moving my prototype of a "toy" language I'm working on over so I can refamiliarize myself with the state of the ecosystem.
10:37:28 <ph88> somewhere in my code i have the constraint "Data a" .. all fine with lts-8.2 now on lts-11.2 ghc figured out there is no instance for "Data Void" .. how can i fix this ?
10:37:41 <cocreature> dyl: we’re also more than happy to accept PRs for things that are missing :)
10:37:46 <ph88> with fix i mean change my code so i no longer get this error
10:37:58 <dyl> cocreature noted, thank you!
10:38:04 <ph88> "Could not deduce (Data Void)"
10:38:05 <dyl> Now I need to see how the state of Unicode support is...
10:38:14 <dyl> (in available parsing solutions)
10:38:25 <cocreature> megaparsec works just fine with unicode
10:38:30 <dyl> That one is new to me.
10:38:42 <fishythefish> agentultra: are you looking for something like `data Foo where MkFoo {...} :: Foo`?
10:38:52 <cocreature> it’s by far the most active one in terms of development and maintenance
10:39:12 <ph88> can i say all types "a" except type "Void" ?
10:39:34 <dyl> It's important to me to be able to work over extended grapheme clusters as well as scalars.
10:39:42 <dyl> ...considering the language I'm working on is entirely in emoji.
10:39:55 <cocreature> …
10:39:55 <lyxia> infandum: "Generic (Dendogram a)" means "Dendogram a  is an ADT" which is a fact independent of what "a" is.
10:40:07 <dyl> And I'm not even sure if parser combinators will work well for an APL style language, which usually uses pairwise reduction.
10:40:19 <fishythefish> ph88: what about types isomorphic to Void? sounds more like you're supplying Void somewhere where it isn't expected, so you should figure out where it's coming from
10:40:24 <dyl> I might need to look at how Dict. APL and J handle parsing, as I understand its more general.
10:40:28 <pavonia> agentultra: Are you looking for a solution to just not repeat that record code?
10:41:13 <cocreature> dyl: if Data.Text supports enough unicode for your usecase, megaparsec should work as well. if not, then you’re probably in trouble in Haskell land
10:41:22 <ph88> fishythefish, my code didn't change since i upgraded from lts-8.2 to lts-11.2 .. ok it may well be that i supply Void somewhere .. but it's not in my code that this now has become a problem
10:41:23 <lyxia> infandum: a more precise formulation may be "Dendogram a  is made of a sum of constructors"
10:41:36 <dyl> cocreature Data.Text.ICU should fill in any gaps.
10:41:42 <dyl> I can use converters if need be.
10:41:50 <agentultra> pavonia, fishythefish: I'm looking to avoid repeating the record code if possible. The idea is to be able to define new `MultiField` constructors with different `Field` types
10:41:53 <fishythefish> ph88: well, yes, you can't assume backward compatibility of APIs when you're upgrading like that
10:42:05 <fishythefish> that's the whole point of fixed resolvers
10:42:06 <guessWHo> how can i do this async https://dpaste.de/Vndy
10:42:39 <agentultra> I might be going about it all wrong, would like to know how. :)
10:42:45 <dyl> cocreature the difficulty is with combining characters or zero-width-joined sequences.
10:43:02 <fishythefish> agentultra: I'm not sure I understand what you're trying to do based on that gist - MultiField only has a single constructor there. Why can't you just add more?
10:43:04 <cocreature> dyl: just use ascii smileys instead of emojis :)
10:43:06 <dyl> These aren't really *easily* handled with any single view (grapheme cluster, scalar, ...)
10:43:08 <dyl> Oh lord, no.
10:43:16 <dyl> As a backup I can always use the Minoan Linear A script.
10:43:38 <cocreature> you really like pain, do you :)
10:44:04 <dyl> No, it's more that I've constructed a really silly design problem I'm taking seriously.
10:44:10 <dyl> The choice of emoji to use is the hardest part really.
10:44:20 <dyl> A lot of thought is going into the mnemonics and ergonomics.
10:44:55 <dyl> One of the main goals is that most mnemonics should "complete" to the corresponding symbols. So it should be possible to type a sequence of words and have them substituted as you go, or from the emoji panel afterwards.
10:45:16 <lyxia> infandum: maybe take a look at the documentation of GHC.Generics
10:47:16 <ph88> fishythefish, i "fixed" it .. but i don't understand why it's a problem https://bpaste.net/show/965ea90ad0e3  as i understand the (Data a) constraint is on the 3rd argument to the Parsec type .. not on the first
10:47:34 <agentultra> fishythefish: I'm just experimenting. But with this gist if I want to add more `Field` types I have two constructors and one type... maybe it's not such a bad thing. I just have to remember to add the record to the `Field` GADT instead of defining the record in the GADT constructor and being able to refer to that record at the type level.
10:48:36 <dyl> cocreature e.g. 3 3 ⍴ (9 ? 10) ⇒ 3 3 🌹 (9 🃏 10)
10:49:02 <dyl> rho ⇒ row ⇒ rose, deal ⇒ card, etc. The mnemonics have to be sensible and fit with accepted function/operator names.
10:49:13 <agentultra> if I just have `data Field where TextField :: { _id :: Int, label :: String } -> Field` then I don't have a `TextField` type to refer to when defining a `MultiField`
10:49:43 <dyl> In some cases that means multiple emoji for the same function (e.g. 🎲 and 🃏)
10:49:59 <fishythefish> agentultra: yes, but then what's the problem with your current code?
10:50:04 <dyl> They're both equivalent and both connote randomness, but they might make more sense in distinct contexts.
10:51:18 <fishythefish> agentultra: is it that you don't automagically get Field constructors when you add a new logical field type?
10:51:27 * hackage gi-gio 2.0.17 - Gio bindings  https://hackage.haskell.org/package/gi-gio-2.0.17 (inaki)
10:52:08 <agentultra> fishythefish: yeah, it feels a little bit like the code is repeating itself.
10:52:23 <fishythefish> ph88: why do you want Parsec Void String and not Parsec () String?
10:52:41 <cocreature> dyl: I can’t decide if that project is awesome, completely crazy or both :)
10:52:56 <dyl> APL's epithet was "a mistake, carried to perfection"
10:53:06 <shapr> I enjoy APL
10:53:06 <dyl> Mine is "a joke, carried to perfection" (or at least, there will be an attempt)
10:53:26 * hackage gi-gtk 3.0.22 - Gtk bindings  https://hackage.haskell.org/package/gi-gtk-3.0.22 (inaki)
10:53:28 <dyl> One of the design goals is that one of the best REPLs should be any iOS/Android SMS client.
10:53:34 <shapr> dyl: is your prototype on github?
10:53:38 <dyl> No.
10:53:42 <shapr> aw
10:53:49 <dyl> My prototype is a disgusting mess of things I was trying out in Swift/C/C++.
10:53:56 <dyl> Build one and throw it away haha.
10:54:00 <dyl> It also didn't get to codegen.
10:54:06 <dyl> Just basic interpretation.
10:54:14 <dyl> So it wasn't all that interesting. I just wanted to explore the problem space a bit.
10:54:30 <dyl> It also used the original APL glyphs because they're easier to test with, especially considering I don't have a complete emoji set yet.
10:55:11 <dyl> shapr My hope is that when this is serviceable, I can effectively collect user-study data by making public twitter bots that act as REPLs.
10:55:15 <agentultra> fishythefish: if this style doesn't raise any red flags then I'll keep rolling with it, I was just wondering if there was a more compact/idiomatic way that I was missing because I'm not experienced enough yet. :)
10:55:22 <dyl> I'll just offload long results to pastes.
10:55:35 <dyl> I want to see people tweeting linear regression problems in emoji.
10:55:37 <dyl> Is that so wrong?
10:56:32 <fishythefish> agentultra: nah, I think this is fine
10:59:01 <dyl> shapr I'm trying to decide what would work well for quad-divide/domino.
10:59:15 <dyl> Since what it does is a projection into column space, one of the projector emoji would be best I think? 📽
11:00:05 <dyl> A ⌹ B is the projection of A onto the column space of B.
11:00:19 <dyl> Doesn't really fit for ⌹ A which is just inversion.
11:01:11 <Tuplanolla> If you want to program in Agda, perhaps you should program in Agda, dyl.
11:01:11 <dyl> Maybe the 🎞 emoji... film suggests both projection and negatives (which are total inversions).
11:01:20 <dyl> Tuplanolla I'm not that masochistic.
11:01:26 <dyl> (I do love me some Agda though...)
11:01:43 <dyl> 🎞 it is, I think.
11:06:26 * hackage nvim-hs 1.0.0.1 - Haskell plugin backend for neovim  https://hackage.haskell.org/package/nvim-hs-1.0.0.1 (saep)
11:14:33 <dyl> I'm basically trying to make a language that is as ideographic and mnemonic as possible :).
11:14:40 <dyl> It's kinda silly, but it's a lot of fun.
11:20:49 <xcmw> Anyone know of a good arrow explanation? I understand monads and profunctors.
11:21:55 <replay> https://en.wikibooks.org/wiki/Haskell/Understanding_arrows
11:22:35 <johnw> xcmw: I think it's like a profunctor that is also an internal hom functor
11:26:48 <absence> is anyone familiar with the streaming library? say i have a byte stream, Stream (Of Word8) m r. using S.for, i can easily convert it to a bit stream, Stream (Of Bool) m r. but if i just want some of the bits, how can i get back to the underlying byte stream? to be clear, i don't want to assemble bits back into bytes
11:31:01 <shapr> dyl: that sounds like a fun project
11:31:34 <dyl> shapr It's a bit of a lark, but one with longevity.
11:31:42 <[exa]> dyl: I kindly remind the APL mnemonics
11:32:05 <dyl> I'm trying to make my mnemonics free standing, though they're inspired by the APL mnemonics where possible.
11:32:14 <dyl> If I have to discard 'domino' for 'film', so be it.
11:32:23 <dyl> Some of them are just homonyms. rose/rows.
11:32:24 <[exa]> domino fold, yay
11:32:41 <dyl> The operators are the really hard part.
11:32:55 <dyl> I was thinking that maybe they should all be hand gestures for consistency, and to distinguish them from functions somewhat.
11:33:35 <dyl> I'm keeping a running table, with acknowledgements :).
11:33:39 <dyl> If you have any ideas, let me know.
11:34:08 <johnw> is 💩 your unsafePerformIO?
11:34:17 <dyl> No, haha.
11:34:38 <dyl> One idea I have for some of the more difficult glyphs that have no reasonable analogue is to look for common digraphs in APL by scraping,
11:34:49 <dyl> and then assign emoji such that they form amusing pairs.
11:34:55 <dyl> (but look innocuous alone)
11:35:38 <dyl> johnw https://en.wikipedia.org/wiki/APL_syntax_and_symbols
11:35:48 <dyl> Take a look over, if you see any you can think of an obvious emoji for, let me know :)
11:35:54 <dyl> Remember most glyphs are overloaded.
11:36:09 <dyl> e.g. ? is roll and deal, ⌹ is invert and project.
11:36:12 <johnw> sorry, occupied with other things
11:36:16 <dyl> ¯\_(ツ)_/¯
11:36:25 <koz_> dyl: Are you making Emojiscript or something?
11:36:27 <dyl> Probably far more productive than what I'm doing.
11:36:30 <dyl> koz_ Better: Emoji APL.
11:36:40 <koz_> dyl: EmojiPL?
11:36:50 <dyl> 👽 AyyPL
11:37:10 <dyl> (provisional name)
11:37:34 <dyl> APL + "why... why?"
11:37:58 <koz_> Maybe I'm just old, but I don't get the point of emoji.
11:38:04 <dyl> Neither do I.
11:38:05 <johnw> clearly the name for this language should be an emoji
11:38:08 <dyl> I mean, they're ideograms.
11:38:15 <dyl> johnw it is 👽 in emoji.
11:38:30 <dyl> Emoji are essentially pictoral hieroglyphs/ideograms.
11:38:30 <koz_> I just prefer text in general over anything visual.
11:38:34 <dyl> I agree.
11:38:54 <johnw> koz_: it's sort of the same reason you smile during a real life conversation rather than say out loud, "This pleases me."
11:39:10 * glguy should start smiling in conversations
11:39:14 <koz_> johnw: Except written communication != spoken communication, aside from coincidentally using the same language.
11:39:29 <koz_> They're fairly different and have different conventions.
11:39:42 <dyl> Emoji wouldn't have really worked before high density LED displays.
11:39:52 <dyl> But, they do allow you inject some level of nuance or subtext that you can't in plain texrt.
11:39:52 <johnw> dyl: sure they did: :)
11:39:58 <dyl> They also can make you look like an idiot.
11:40:04 <tomsen> glguy: :-D
11:40:06 <dyl> johnw not to the same extent.
11:40:20 <johnw> i remember quite a lot of different ASCII emoji in the 80s
11:40:21 <koz_> I mean, whatever floats everyone else's boats, but I just don't get emoji.
11:40:23 <dyl> They're in the same tradition as emoticons, or other ideographs, but there's something materially different to me.
11:40:41 <dyl> They're pictures, not text that looks like pictures.
11:40:45 <dyl> Seems immaterial, but I don't think it is.
11:40:52 <dyl> Now, mind you, I don't advocate using them very much.
11:40:55 <johnw> tomato tomoji
11:40:59 <dyl> They drive me insane, and I can't say I "get them".
11:41:08 <dyl> But that's a part of why I'm working on this project.
11:41:21 <koz_> dyl: Do you think this'll help you 'get' emoji?
11:41:24 <dyl> Maybe emoji are just better suited to programming with tensors.
11:41:38 <dyl> koz_ who knows? Probably not.
11:41:44 <dyl> I'm taking this project with a healthy dose of absurdism.
11:41:58 <dyl> I've got no real goal except to unleash it upon the world and see how people respond.
11:42:09 <dyl> I have a feeling it's going to be great though.
11:42:14 <koz_> It kinda reminds me of recently finding out about Biapplicative's <<*>> operator, which I have dubbed 'alien spaceship'.
11:42:17 <johnw> my guess: they'll respond with a high pixel density emoji character for WTF?
11:43:29 <johnw> looks like Monoid and Semigroup changed a bit in GHC 8.4?
11:43:45 <dyl> koz_ APL and emoji just both have this "love them or hate them" thing to them.
11:43:56 <johnw> that's causing the most Hackage build failures for me so far
11:43:57 <dyl> And I want to see what the venn diagram looks like.
11:44:01 <koz_> johnw: What changed exactly?
11:44:05 <cocreature> johnw: yes, Semigroup is finally a superclass of Monoid
11:44:11 <dyl> Wait really?
11:44:12 <johnw> No instance for (Semigroup (Output a)) on the line: istance Monoid (Output a)
11:44:13 <dyl> Hurrah!
11:44:15 <koz_> Yay!
11:44:26 <koz_> I'm glad this change finally got made.
11:44:37 <dyl> Is . = fmap yet?
11:44:38 <dyl> ;)
11:44:54 <cocreature> dyl: go back to writing apl :P
11:45:11 <dyl> 💔
11:45:27 <dyl> cocreature I will! And I'll do it building off of your work!
11:45:44 <dyl> (Thank you, and all of the llvm-hs contributors, by the way :) )
11:45:51 <cocreature> yw :)
11:46:51 <infandum> lyxia: Okay, will look into it, thanks for everything!
11:47:40 <johnw> out of  329 packages that I build in Nix for 8.0 and 8.2 (plus their dependencies), 36 fail to build, with the vast majority being the Semigroup change
11:50:31 <h4z3[m]> https://www.humblebundle.com/books/diy-electronics-books?partner=indiekings&charity=2030222
11:52:13 <cocreature> h4z3[m]: that doesn’t look very haskelly
11:52:50 <johnw> nope, indeed it doesn't
11:53:56 <koz_> I wish my local pizza places had an API, so I could order pizza in Haskell.
11:54:02 * hackage country 0.1.5 - Country data type and functions  https://hackage.haskell.org/package/country-0.1.5 (andrewthad)
11:54:11 <shapr> koz_: I tried that with coffee, couldn't find any good APIs :-(
11:54:23 <johnw> koz_: would we then be accosted by bad pizza/monad analogies?
11:54:43 <koz_> johnw: We already have so many bad analogies for monads, what's one more?
11:54:54 <shapr> h4z3[m]: would you like to learn Haskell?
11:54:59 <johnw> monads are like an analogy
11:55:01 <koz_> "Monads are like onions"
11:55:39 <johnw> i could believe that free monads are like onions
11:55:51 <johnw> monads more remind me of that silicone plumber's tape that fuses with itself
11:56:01 <dyl> Free monads are like ogres
11:56:10 <johnw> 👹
11:56:21 <koz_> Various 'free' constructions are pretty cool.
11:56:21 <dyl> When you take the Fix, it’s not ogre till it’s ogre.
11:56:27 <infandum> Is it possible to have a stack project build two executables using two different Main.hs files, with two different compilers (GHC / GHCJS)?
11:56:30 <fishythefish> You know, not everybody likes onions. Cake! Everybody loves cake.
11:56:35 <dyl> Burritos?
11:56:43 * Psybur shreks himself
11:56:45 <fishythefish> parfaits*
11:56:46 <dyl> Applications are like arepas.
11:56:51 <dyl> Applicatives*
11:56:56 <koz_> Functors are like capybaras.
11:57:06 <johnw> MonadPlus is la chupacabra
11:57:12 <dyl> Grupoids are like quokkas
11:57:23 <koz_> Semigroups are like manatees.
11:57:37 <koz_> (we'll have that Haskell book written in no time!)
11:58:03 <shapr> @remember johnw monads more remind me of that silicone plumber's tape that fuses with itself
11:58:03 <lambdabot> I will remember.
11:58:26 <dyl> They’re more like Teflon tape.
11:58:32 <koz_> lambdabot: Haskell's collective memory.
11:58:35 <dyl> No one can get a firm grasp on them.
11:58:38 <shapr> johnw: I think of objects like silos of state, and monads like conveyor belts
11:59:11 <shapr> I also think of Haskell programs as one chunk of global state manipulated by the code.
11:59:45 <dyl> Is Haskell really about functional programming, or is it just a social manifestation of allusive and absurd injokes?
11:59:55 <dyl> Maybe the language itself is secondary.
11:59:56 <fishythefish> C-x M-c M-butterfly...
12:00:20 <kw_> Is there a way to use Kmett's 'Data.Constraint.Forall' like '(Forall Contravariant (Flip pro), Forall Covariant pro) => Profunctor pro'?
12:00:22 <johnw> one day they'll discover: *we* are the monad, and nothing escapes us
12:00:25 <dyl> Serious question, in any case,
12:00:35 <dyl> what's the ghc-mod/etc situation like in any case?
12:00:44 <dyl> Or, rather, what should I be using :p.
12:02:19 <koz_> I use hlint + hdevtools in Neomake with Neovim.
12:02:22 <koz_> It works OK.
12:44:04 <jle`> is there any way to disable haddock from showing kinds inline for instance lists
12:44:14 <jle`> if i have a really polykinded type then the instances become really unreadable
12:44:53 <cocreature> jle`: there are some changes regarding kinds in the newest version of haddock so it might be worth taking a look at that
12:45:00 <jle`> oh neat, thanks :)
12:45:22 <cocreature> in particular https://github.com/haskell/haddock/pull/681
12:48:55 <jle`> oh hey it looks like those changes are online
12:49:01 <jle`> i have just been using an old version locally
12:49:06 <jle`> of the haddock library
12:49:08 <jle`> neat :)
12:49:30 <jle`> let's see if updating does the trick...
12:51:33 <dyl> The problem I have with the Haskell ecosystem lately is, I can't tell if it's super advanced, or a hodgepodge of research projects glued together by industry partners.
12:51:38 <dyl> Sometimes I think the answer is just "yes".
12:52:14 <Tuplanolla> Coherent it isn't, but neither is almost anything else.
12:52:32 <shapr> dyl: haskell has industry partners?
12:52:48 * shapr thinks
12:52:50 <shapr> oh right, yeah
12:52:56 <dyl> He's over there.
12:53:04 <dyl> ;)
12:53:31 <dyl> Industry Partners of Haskell? We're the Haskell Industry Partners.
12:53:59 <shapr> dyl: you going to CUFP this year?
12:54:15 <rotaerk> you're so HIP
12:54:23 <dyl> The preferred slang is "plish".
12:54:34 <dyl> I'm not in a position to go to conferences yet, I'm still in the process of choosing a doctoral program.
12:54:46 <dyl> But, once I'm settled in, I definitely will be going to plenty of conferences!
12:56:42 <dyl> shapr I had a dry year coming out of college applying to CS programs, so I've been working in crystallography and structural biology for the interim year.
12:56:52 <dyl> This year I have exciting offers :).
12:57:05 <hojourner> how'd you end up in crystallography from CS?
12:57:14 <dyl> ¯\_(ツ)_/¯
12:57:27 <shapr> dyl: oh that's neat, I took an almost crystallographic picture this past weekend: https://twitter.com/shapr/status/977917843982471168
12:57:39 <dyl> https://pubs.acs.org/doi/10.1021/acs.jpclett.7b02621
12:57:43 <dyl> ^ my first paper :)
12:57:44 <rotaerk> never even heard of that field... crystallography
12:57:51 <dyl> Well, crystallography is a technique.
12:58:00 <dyl> But it's also a field.
12:58:54 <dyl> Crystallography is, put simply, shooting crystals with (xray/micro-element) lasers and using the diffraction patterns to reconstruct their structure.
12:59:03 <dyl> (including the internal structure, which a microscope isn't very helpful for)
12:59:18 <dyl> This is the main process used to determine the structure of proteins and other compounds.
12:59:21 <hojourner> this kills the sample
12:59:24 <shapr> crystallography reminds me a bit of MRI, except with x-rays instead of radio waves
12:59:25 <dyl> Yes, yes it does.
12:59:31 <dyl> It goes pew pew with the xray laser.
12:59:35 <dyl> and then "splat".
12:59:44 <shapr> I want to see that.
12:59:51 <dyl> The difference is that MRI doesn't destroy the sample.
12:59:53 <shapr> dyl: did you get to use Haskell for any data analysis?
13:00:05 <shapr> cause that would be cool
13:00:07 <dyl> No, the ecosystem here is largely Python.
13:00:12 <shapr> oh :-/
13:00:16 <dyl> BUT
13:00:19 <shapr> YES?
13:00:26 <dyl> But, the Crystallographic Information File format is really neat.
13:00:35 <dyl> It's built on STAR, which is a self-describing archival format.
13:00:46 <shapr> dyl: wait, didn't you buy me pizza once long years ago when you were in high school?
13:01:01 <dyl> I think I might have, haha.
13:01:11 <shapr> ah yes, I remember
13:01:14 <dyl> That far back is pretty fuzzy but I think I did.
13:01:22 <dyl> My memory is weird. Really good with associations, but not arbitrary recall.
13:01:45 <dyl> In any case, crystallography has relied on computers since its inception, so there's a surprising amount of interesting CS-adjacent and actual-CS work involved.
13:02:03 <dyl> And the theory is extremely math heavy.
13:02:15 <dyl> So, it's a surprisingly good fit coming out of undergrad in CS/math.
13:02:16 <hojourner> sure, but math you don't typically do in a CS program
13:02:21 <hojourner> (i have CS and physics degrees)
13:02:25 <dyl> I have CS and math.
13:02:39 <hojourner> ah, okay, making more sense now
13:02:41 <shapr> hojourner: ooh, what flavors of math are in crystallography that aren't commonly seen in CS?
13:03:02 <shapr> does any of coxeter's work on rotational symmetry show up in crystallography?
13:03:03 <dyl> Uh, I mean, being crystals... lots of lattices, space groups, symmetry groups, etc.
13:03:07 <dyl> Yes.
13:03:08 <dyl> A lot.
13:03:09 <dyl> It's painful.
13:03:10 <shapr> oh boy!
13:03:11 <dyl> ;p
13:03:22 <shapr> oh man, I love reading coxeter's books for fun after a hard day building websites.
13:03:27 <dyl> Thankfully you don't need to go too much into the theory in practice, though you do need a working knowledge.
13:03:28 <dyl> hojourner you know the difference between physicists and mathematicians ;)?
13:03:31 <hojourner> inverse problems using linear algebra too, which you may or may not have done in CS?
13:03:44 <dyl> Most CS programs are math-deficient.
13:03:57 <dyl> Math teaches modes of thinking and how to choose how to think about a problem.
13:04:05 <dyl> The actual material is largely interchangeable.
13:04:07 <shapr> I have coxeter's introduction to geometry, it makes me laugh often.
13:04:19 <hojourner> we had a numerical LA course crosslisted math/cs at my program
13:04:27 <dyl> As long as CS looks at math like engineering (e.g. I need to know this only so far as to have a useful formalism, then forget it)... meh.
13:04:34 <hojourner> dyl: i don't, but i like where this is going...
13:04:45 <dyl> hojourner physicists write their equals signs like this: ≈
13:04:58 <dyl> Or, more correctly, write their approximations with the = symbol.
13:05:23 <hojourner> shots fired
13:05:30 <hojourner> too close to home
13:05:30 <Tuplanolla> "All models are wrong, but some are useful."
13:05:34 <hojourner> not that i study physics anymore
13:05:41 <dyl> Physics is, to me, very similar to mathematics if you're in academia.
13:05:42 <shapr> hojourner: what do you study now?
13:05:46 <dyl> It's just got more conventions.
13:05:58 <hojourner> i did my BS in physics, then CS masters because i'm a sell out
13:06:01 <hojourner> i'm a software engineer now
13:06:04 <dyl> It's more constrained, so it can be a little more "informal" of a language if you will.
13:06:07 <hojourner> but a really bored one who spends his free time learning haskell
13:06:13 <shapr> hojourner: CS pays more than physics?
13:06:14 <dyl> Are you the Germanium Band Structure my Ass guy?
13:06:20 <dyl> :p
13:06:26 <dyl> http://pages.cs.wisc.edu/~kovar/hall.html
13:06:29 <drdo> physics is like mathematics if it was done by sloppy confused people
13:06:30 <dyl> If you haven't read this, enjoy.
13:06:48 <hojourner> dyl: depends on which field you're in. if you're in theory definitely, but there's a lot of computational and experimental too. and unfortunately that's where the grant money is
13:06:54 <guessWHO> why doesn't async block the thread even when the function called is non-terminating and runs inside a forever block. I know why it happens and how it can be avoided using Mvar but can it be done with async ???
13:06:57 <dyl> I had this brilliant idea I'd go into math and get into abstract algebra and such.
13:07:05 <dyl> 4 years later I was doing graduate level PDEs.
13:07:15 <dyl> That was about when physics started making sense to me.
13:07:26 <drdo> hojourner: I did my bs in "cs" and then my masters in mathematics, because I'm stupid
13:07:36 <drdo> And now I'm also a software engineer
13:07:38 <hojourner> shapr: much more, especially without a PhD. far more jobs too, in better places. physics only pays okay if you're into semiconductor manufacturing
13:07:54 <dyl> One of my favorite things about PDEs, is that you can play with them in software like mathematica and make neat analytic simulations.
13:08:02 <hojourner> drdo: all roads lead to engineering *sob*
13:08:04 <dyl> I know absolutely nothing about numerical methods save the simplex method though.
13:08:29 <dyl> Math/CS B.Sc. ⇒ crystallography break ⇒ PL + a little SE/HCI focused PhD
13:08:52 <shapr> dyl: did you get your PhD at gatech?
13:08:53 <dyl> (Or, how to delay or avoid industry and focus on interesting problems as long as possible.)
13:08:57 <dyl> I have no PhD.
13:08:59 <hojourner> SE/HCI?
13:09:18 <dyl> Software Engineering / Human-Computer Interaction
13:09:28 <dyl> I'm more concerned with tooling and design problems than nitty gritty theory.
13:09:33 <hojourner> programming languages meets UX design?
13:09:34 <hojourner> interesting
13:09:36 <shapr> dyl: if you're in Atlanta, I'm gonna drag you to my Haskell group
13:09:37 <dyl> Basically, yes.
13:09:39 <drdo> dyl wants to get into keyboards!
13:09:53 <shapr> dyl: does SE/HCI have a way to measure abstractional complexity yet?
13:09:57 <shapr> cause I want that
13:10:18 <dyl> I don't know, but I'm going to guess that under whatever formalism you could come up with, there's some kind of no-free-lunch theorem.
13:10:42 <dyl> Or more informally, no formalism of abstractional complexity is always going to be the most useful or best.
13:11:09 <dyl> (for the general case, there are probably useful ones for more specific domains)
13:11:13 <hojourner> dyl: but, the real question is, are there enough straws to grasp for a phd thesis?
13:11:20 <dyl> I think so.
13:11:33 <dyl> I've spent a lot of time doing research in bio/chem/etc from high school through college.
13:11:39 <dyl> And trust me when I say, I SEE A LOT OF UX PROBLEMS.
13:12:09 <shapr> yeah, I use slack at work
13:12:12 <dyl> I'm sure my direction will morph over time, but initially at least I'm trying to more effectively and formally approach problems that have driven me insane personally.
13:12:26 <dyl> Thankfully, I haven't seen much of Slack in the life sciences.
13:12:31 <shapr> lucky you
13:12:34 <hojourner> aww, you don't like slack?
13:12:35 <dyl> The classic "yell down the hallway and leave sticky notes" approach works.
13:12:39 <dyl> Not really, no.
13:12:50 <hojourner> prefer IRC :P?
13:12:51 <dyl> Slack is good for existing groups, but it sucks for loosely-defined communities.
13:12:57 <dyl> Slack is also way too busy.
13:13:00 <shapr> hojourner: I do prefer IRC
13:13:03 <dyl> Most people just want it for gifs...
13:13:17 <dyl> I mean, I do prefer IRC, but I see the niche for Slack.
13:13:27 <dyl> A lot of my gripes with Slack are that it's a service, and not a protocol.
13:13:31 <shapr> In my opinion, the only useful feature slack has over IRC is that it saves history
13:13:39 * dyl points at ZNC.
13:13:51 <hojourner> IRC clients tend not to be material design unfortunately
13:13:51 <dyl> The nice thing about IRC is you can "fix" most anything you don't quite like.
13:13:55 <shapr> imo, the rest of slack's features detract from actual use
13:13:56 <hojourner> gotta satisfy the buzzword criteria
13:14:05 <dyl> Material design can... *twitches violently*
13:14:14 <dyl> Material design is a hammer in search of an idyllic bed of nails.
13:14:16 <redrapscallion> it takes extra effort to set up a bouncer for IRC though, while Slack has it built-in.
13:14:23 <redrapscallion> i mean
13:14:28 <dyl> "Using" it is like laying in said idyllic bed of nails.
13:14:35 <dyl> It's one of the worst design "philosophies" I've ever seen.
13:14:35 <redrapscallion> Slack has history saved by default
13:14:40 <shapr> redrapscallion: yeah, irccloud was the first to deal with that
13:14:52 <dyl> I remember the irccloud guys from #erlang and the erlounge.
13:14:55 <dyl> I was using it for a while.
13:15:06 <shapr> how'd we get here from Haskell again?
13:15:10 <dyl> Confluence.
13:15:19 <dyl> Or, rather, fluence
13:15:24 <dyl> nfluence*
13:15:27 <hojourner> i know more about crystallography than haskell, so i derailed us
13:15:42 <shapr> I think it was a group effort.
13:15:46 <hojourner> i cannot stand confluence/jira/anything atlassian
13:15:46 <dyl> Lexicon: haskellographers vs haskellers.
13:15:48 <dyl> discuss?
13:16:10 <shapr> Lambdoers?
13:16:20 * Rembane hands out swords and hopes for a fight
13:16:35 <shapr> we're all part of the same big happy type family anyway.
13:17:01 <hojourner> haskellographers, obviously. it punches you in the face with haskells least favorite data structure right there in the name
13:17:25 <dyl> But wait aren’t categories just graphs?
13:17:29 * dyl waits for the punch
13:18:41 <dyl> Rembane wouldn’t arrows be more appropriate?
13:18:45 <shapr> zing!
13:18:48 <hojourner> i. wait. no. stop
13:18:58 <pikajude> is there a way to cabal haddock and also copy all the documentation pages that I *link* to in the output?
13:19:04 <redrapscallion> derailment incoming, but does anyone know the core differences between a category and a set?
13:19:21 <hojourner> are they even related?
13:19:26 <Rembane> dyl: They would, but I'm all out of arrows. Will SKIs do?
13:19:26 <hojourner> other than i'm sure there is a category of sets
13:19:44 <redrapscallion> they seem like they're both just containers of objects, although that might be butchering it a lot.
13:20:17 <hojourner> i've had "category theory for programmers" on my bookmarks for ages. have not managed to get through it yet
13:20:47 <shapr> bartosz' blog posts?
13:20:54 <redrapscallion> but yes, there is a category of sets. I just don't see how sets are fundamentally different from categories.
13:21:03 <dyl> I’m enjoying Algebra Chapter 0 a lot
13:21:19 <dyl> It’s not explicitly about CT but it introduces it right after set theory and weaves it through everything.
13:22:23 <hojourner> shapr: the very same
13:22:44 <shapr> hojourner: same here, I keep meaning to dig into that, then I write code instead
13:22:46 <dyl> Rembane: ’tis nobler in the mind to suffer the slings and arrows of outrageous fortune, or to take arms against a C of troubles?
13:22:47 <hojourner> dyl: have you found abstract algebra to help you much with haskell? didn't have to do much of that in physics
13:22:47 <redrapscallion> dyl: I've been meaning to look at that too, but never got the motivation to get started on reading :(
13:23:01 <dyl> No. Not really, beyond it being a framework of concepts I know.
13:23:05 <shapr> On the good side, my weekly Haskell class is going well
13:23:14 <hojourner> you have a weekly haskell class?
13:23:18 <dyl> I found a lot more use for abstract algebra reaaaallly deep into analysis
13:23:28 <redrapscallion> dyl: if you could convince me that there's a huge gain to get from really learning category theory, I might be motivated.
13:23:33 <shapr> hojourner: two! One is tuesday lunch at work, one is Wednesday evening at a nearby coffee shop
13:23:41 <dyl> I don’t think learning CT is worthwhile out of context
13:23:52 <dyl> In math it’s a very useful organizational tool
13:23:54 <dyl> And can help you
13:23:56 <shapr> I've been teaching parsing in my work class: https://github.com/shapr/sandsieve
13:24:05 <dyl> see the similarities and patterns between different abstractions
13:24:09 <hojourner> shapr: jealous, i'd love one. my job is in scala, that's as close as i come to anyone else i know giving a shit about haskell
13:24:31 <dyl> In other words CT is much more rewarding when you have the mathematical maturity to use it as a tool
13:24:39 <dyl> In of itself it’s generally quite drab and clinical.
13:24:47 <shapr> hojourner: if you're in Atlanta on Wednesday evenings, drop by
13:24:49 <dyl> But when you see it as a formalism for mathematical structure in context, it’s cool.
13:24:56 <redrapscallion> dyl: but what about in terms of programming?
13:25:05 <shapr> you can see today's lessons: https://github.com/shapr/sandsieve/commit/b56317ecdc6cd2bcd0512c135a1dacaf3d3f8cbc
13:25:08 <dyl> Not really useful IMO
13:25:24 <dyl> It can be, but not generally.
13:25:27 <hojourner> shapr: my sister's in ALT, i'm in NYC :( the haskell meetup here seems to be dead, and i don't know where else to look
13:25:43 <shapr> aw too bad
13:25:46 <redrapscallion> dyl: hmm, I've never learned CT, but I know a lot of haskellers advocate for learning it.
13:25:49 <dyl> But familiarly with abstract algebra more generally can give you useful models to think about things with.
13:26:12 <shapr> hojourner: there's some chance I'll end up in NYC in the next few months, if that happens I'll drag you and everybody else into monthly Haskell meetups
13:26:16 <dyl> I think a lot of people think haskellers do
13:26:24 <dyl> But most I’ve met admit it’s more of a fun thing to do.
13:26:26 * hackage data-inttrie 0.1.3 - A simple lazy, infinite trie from integers  https://hackage.haskell.org/package/data-inttrie-0.1.3 (LukePalmer)
13:26:30 <dyl> It’s definitely not a prerequisite.
13:26:47 <dyl> The concepts only loosely map. You’ll probably learn enough just using Haskell and hanging out on IRC.
13:26:49 <shapr> I got the Boston meetups started, then edwardk took over, don't know who's running them now.
13:27:11 <dyl> It’s more that the groups of people who like CT and HS overlap significantly.
13:27:24 <dyl> tl;dr “learning category theory will not make you a better Haskell programmer.”
13:27:29 <dyl> But it is still pretty cool.
13:27:40 <redrapscallion> dyl: :(
13:27:59 <redrapscallion> dyl: it's hard to learn things just for the coolness-factor if I can't apply it
13:28:07 <redrapscallion> dyl: at least, for me it is.
13:28:28 <shapr> I know a bunch of Haskellers in NYC, should be fun
13:28:57 <dyl> I’m the opposite. Learning things for applications doesn’t do it for me as much.
13:29:15 <dyl> I like doing math just to do it.
13:29:20 <hojourner> shapr: how come? are you in the finance industry?
13:29:21 <dyl> It’s an expensive addiction though.
13:29:27 <shapr> hojourner: not at the moment
13:29:43 <hojourner> dyl: math as an expensive addiction? time or money wise?
13:29:49 <dyl> Both
13:29:56 <dyl> Math textbook costs rack up
13:30:03 <hojourner> dyl: just read that "germanium my ass post" haha. hysterical
13:30:03 <dyl> Before you know it your bookshelf cost more than your kitchen.
13:30:06 <dyl> Right?
13:30:12 <dyl> There’s a great takeoff about batch normalization too.
13:30:16 <dyl> Lemme find it.
13:30:37 <shapr> speaking of bookshelves, has anyone found a good book on probabilistic data structures?
13:30:54 <hojourner> shapr: what would you be doing here in the greatest/most expensive city on earth? you can afford a house in ALT. stay there
13:30:58 <exio4> how can I compile the haddock documentation of all dependencies? in stack
13:31:10 <redrapscallion> dyl: jesus, reading math textbooks cover to cover take like 6-8 months.
13:31:12 <shapr> hojourner: I'm not much good at sticking to one place
13:31:14 <hojourner> shapr: i don't even know of any popular probabilistic data structures besides bloom filters. is that popular?
13:31:19 <hojourner> is that a popular field*
13:31:20 <dyl> http://nyus.joshuawise.com/batchnorm.pdf
13:31:31 <dyl> redrapscallion not if you’re in a class or a group doing exercises
13:31:38 <shapr> hojourner: hyperloglog, count min sketch (disguised bloom filter), skip list, several others
13:31:43 <dyl> I’m excited when I join a PhD program to be able to get together a problem set group
13:32:00 <shapr> count min sketch is just a particular view of a counting bloom filter, and it allows a really nice monoid instance
13:32:03 <dyl> Reading them is easy.
13:32:10 <dyl> Doing the problems is not. :)
13:32:21 <dyl> And you don’t understand any of it until you do the problems. Lots of them.
13:32:39 <dyl> I don’t think you can really understand mathematical concepts so much as you have to beat them into your brain until they leave a negative.
13:32:39 <hojourner> dyl: i too have tried to read math texts without doing any of the problems. i might as well have poured water into one ear and out the other
13:32:54 <exio4> nevermind, stack haddock seems to compile 'em
13:32:56 <shapr> I feel that way about algorithms textbooks
13:32:56 <dyl> The best way to learn math is to struggle until you can’t stay awake, then get a great night’s rest
13:32:59 <shapr> well, most textbooks
13:32:59 <redrapscallion> dyl: that's the thing for me -- it's so damn hard to get the motivation to do all those problems X_X
13:33:05 <dyl> and wake up wondering how it could have ever been anything less than obvious.
13:33:05 <hojourner> that's the one thing i miss about advanced coursework
13:33:19 <redrapscallion> dyl: and some of those books don't even give all solutions, which kills me the most
13:33:19 <dyl> I have no idea how mathematical learning happens but I know it involves sleeping.
13:33:25 <shapr> My approach is to start a meetup about the thing I want to learn, and promise to teach it to others.
13:33:30 <exio4> dyl: mathematics in a nutshell
13:33:39 <dyl> It also involves not sleeping.
13:33:40 <redrapscallion> exio4: programming in a nutshell too
13:33:59 <dyl> I can’t count how many times I’ve knocked out a massive commit,
13:34:19 <dyl> And then the next day tore it all out and replaced it with something 25% as complex that does the same thing.
13:34:53 <shapr> yeah, understanding improves after sleep
13:35:00 <redrapscallion> dyl: I feel like the most genius solutions I get for writing code only happen after I sleep on a problem
13:35:01 <hojourner> shapr: if you're ever around NYC and starting a haskell meetup, let me know. everyone i know here is a scala programmer, and they all laugh at haskell
13:35:35 <shapr> hojourner: I try not to laugh at anyone doing something they enjoy. I may disagree with the choices made for go-lang, but I use some really cool tools built with go-lang.
13:35:47 <pikajude> https://pikajude.github.io/type-tree/Language-Haskell-TypeTree.html
13:35:49 <shapr> If a bunch of people are using something, it likely has nifty parts I would enjoy learning and understanding.
13:35:50 <redrapscallion> hojourner: isn't Scala equally as not popular as Haskell?
13:35:52 <pikajude> would anyone find a package like this useful
13:35:54 <pikajude> is it worth putting on hackage
13:36:31 <hojourner> redrapscallion: scala is much more popular than haskell. it's built on the JVM (so it can use the entire java ecosystem), and is both strict and not pure
13:36:55 <shapr> pikajude: I'd have to try it out to be sure, but it looks useful at first glance
13:37:11 <hojourner> redrapscallion: it's no python or java or c++, but it's probably the most popular functional language in industry right now
13:37:38 <redrapscallion> hojourner: ehh, I've never done it, but it isn't it also possible for Haskell to use the whole C/C#/C++/F# ecosystem?
13:37:42 <pikajude> thanks shapr
13:37:44 <hojourner> shapr: i would tend to agree with you. my coworkers would not. they see haskell is frivolous and not-money-making (i work at a bank)
13:37:50 <dyl> I love Scala. I love Scala not. I love Scala...
13:37:53 * dyl picks petals
13:38:02 <pikajude> i had to do a bit of type resolution stuff in this package without any formal training
13:38:10 <pikajude> so who knows what kind of mess i've made
13:38:21 <hojourner> redrapscallion: you can use whatever using the FFI in haskell, but scala can use java code natively, without any trickery
13:38:45 <hojourner> dyl: i actually tend to like scala. it has its faults, but it's a nice language, definitely a step in the right direction from java itself...
13:39:21 <shapr> hojourner: well, that's ... certainly a viewpoint
13:39:24 <redrapscallion> hojourner: I agree that is a bit annoying with FFI, since you have to use the CInt CString Cwhatever types
13:39:31 <dyl> shapr I agree with your attitude toward golang
13:39:42 <dyl> Some great tools but the language is a flaming mess to me.
13:40:33 <zachk> dyl , are you dylukes?
13:40:42 <dyl> That’s me.
13:40:43 <shapr> one of my coworkers bought a foot pedal he stomps to type "if err != nil ...."
13:40:57 <shapr> dyl: why the nick change?
13:41:04 <dyl> I just felt like shortening it.
13:41:07 <shapr> ok
13:41:18 <redrapscallion> shapr: wait, is that actually true about the foot pedal thing?
13:41:20 <dyl> Still the same account. Just a different nick.
13:41:31 <hojourner> shapr: haha that's amazing. i want to believe that's true
13:41:33 <dyl> shapr if that’s a joke, it’s a good one
13:41:34 <shapr> redrapscallion: yes, he did a bit as a joke, but also as a statement
13:41:37 <zachk> nice to see you again dyl
13:41:37 <dyl> if it’s not, it’s even better
13:41:40 <shapr> no, it's real, and a tiny bit a joke
13:41:45 <shapr> I have pix of the foot pedal
13:41:47 <dyl> \whois zachk
13:41:53 <shapr> he's right over there!
13:41:56 <dyl> Haha, you’ll have to forgive me I’m awful with names.
13:41:57 <dyl> :p
13:42:01 <dyl> Trying to jog my memory.
13:42:07 <hojourner> shapr: is your day job in golang?
13:42:10 * shapr jogs all over dyl's brain
13:42:27 <dyl> zachk regardless, hello again!
13:42:33 <pikajude> careful about leaving footprints
13:42:40 <shapr> hojourner: parts of it, at the moment I'm writing C++, but I was hired to write Python, and for my VoIP+Linux experience.
13:42:51 <pikajude> i get to write php for my day job!
13:43:12 <shapr> I've also written Ruby, a tiny bit of Java, a small chunk of C#, and ... I forget what else at this job.
13:43:20 <dyl> pikajude must be a great health insurance policy : - )
13:43:28 <pikajude> i am
13:43:33 <pikajude> well, it's fancy PHP, technically
13:43:43 <hojourner> pikajude: hack?
13:43:44 <pikajude> with async built in and all that
13:43:49 <pikajude> and a type system that nearly sometimes works
13:43:50 <pikajude> yes
13:43:52 <pikajude> hack
13:43:55 <pikajude> great name for it
13:43:55 <dyl> Oh then that’s not so bad.
13:43:56 <redrapscallion> I've never used PHP before, so I don't understand all the hate for it yet :(
13:44:02 <pikajude> don't bother
13:44:06 <dyl> redrapscallion let me try to give you an idea
13:44:17 <dyl> all of the standard functions are extremely inconsistent in naming scheme, shortening, etc
13:44:20 <dyl> Why?
13:44:30 <dyl> Because the hash function for symbol lookup was originally strlen()
13:44:36 <dyl> This is true.
13:44:55 <redrapscallion> tbh, the only thing I know about PHP is the whole mysql_real_escape_string fiasco
13:45:04 <dyl>  If you want to gawk from a distance I recommend: https://phpmanualmasterpieces.tumblr.com/
13:45:10 <kosmikus> deepfire: ping
13:45:19 <dyl> Or there’s always PHP is a Fractal of Bad Design for a primer.
13:45:29 <shapr> Gutentag kosmikus!
13:45:37 <kosmikus> shapr!!!!!!!
13:45:44 <shapr> kosmikus: how's life?
13:45:52 <shapr> kosmikus: will you be at ICFP2018?
13:45:52 <kosmikus> good.
13:45:57 <kosmikus> and yours?
13:46:05 <shapr> My life is good, still writing code for money
13:46:14 <kosmikus> I don't know yet whether I'll make it to ICFP.
13:46:20 <redrapscallion> dyl: my real question is -- is PHP actually just a bad language, or is everyone just bad at writing PHP?
13:46:24 <dyl> Both.
13:46:27 <shapr> kosmikus: would be nice to meet you again
13:46:49 <dyl> It’s a toy language that blew up in popularity way too fast.
13:46:58 <dyl> It did not go through any meaningful “design”.
13:46:59 <kosmikus> shapr: likewise.
13:47:15 <dyl> It was one guy’s cool project that suddenly was running major sites like Wikipedia and Facebook.
13:47:35 <kosmikus> shapr: are you writing Haskell these days?
13:47:36 <dyl> I have no hard feelings for Rasmus Lerdorf at all.
13:48:07 <shapr> kosmikus: not for money, though that would be nice. I've written some useful work tools in Haskell, but I'm the only Haskell coder here, and I like taking vacation.
13:48:22 <shapr> so, nothing in production
13:48:28 <kosmikus> ah, too bad
13:48:50 <hojourner> kosmikus: you're not telling me you're a real life haskell programmer for industry are you?
13:48:51 <shapr> I do teach a weekly Haskell class here at work, we've been doing parsing: https://github.com/shapr/sandsieve
13:49:17 <kosmikus> hojourner: I am. but is that even so special these days?
13:49:34 <hojourner> kosmikus: yes. yes it is
13:49:34 <redrapscallion> kosmikus: yes
13:49:45 <hojourner> treasure it
13:49:59 <shapr> I dunno, Atlanta has several Haskell-only companies, and a bunch more companies with Haskell projects.
13:50:15 <davean> shapr: Which ones are Haskell only there?
13:50:26 <shapr> davean: layer3 communications is one
13:50:29 <hojourner> would not have pegged atlanta as the haskell oasis
13:50:42 <shapr> hojourner: I think it's just that Haskell isn't as rare as it was
13:50:50 <kosmikus> hojourner, redrapscallion: I think there are quite a lot of Haskell companies and Haskell job adverts currently. Although they're not distributed evenly in terms of location, of course.
13:50:54 <shapr> Though san fran and nyc certainly have more jobs
13:50:56 <dyl> Layer3 uses Haskell?
13:51:01 <kosmikus> and actually, we're hiring :)
13:51:10 <shapr> kosmikus: quick, advertise your company!
13:51:12 <hojourner> kosmikus: any chance you're in NYC?
13:51:14 <shapr> where do you work kosmikus ?
13:51:26 <davean> shapr: wait, what?
13:51:31 <dyl> Kosmikorp obviously?
13:51:33 <kosmikus> hojourner: no, but Obsidian are in NYC, and they're hiring too.
13:51:44 <kosmikus> and we're remote.
13:51:59 <kosmikus> shapr: I'm still in Regensburg, .de
13:52:21 <shapr> davean: layer 3 communications does IDS, not level 3 communications the hosting company
13:52:31 <dyl> Huh?
13:52:36 <hojourner> kosmikus: well, if you're interested in one aggressively okay haskell programmer (whose very willing to learn) i'm on the market
13:52:37 <shapr> kosmikus: is there a link to your careers/jobs page?
13:52:59 <davean> hojourner: "agressively okay"?
13:53:14 <kosmikus> hojourner: we can most certainly not pay NYC salary levels. otherwise, sure, feel free to apply.
13:53:22 <hojourner> davean: _very_ average
13:53:25 <kosmikus> give me a moment, I'll put the blog post out.
13:53:35 <davean> hojourner: whats average in a community this spread?
13:53:46 <dyl> “Aggressively okay”
13:53:49 <dyl> I’m stealing that.
13:53:59 <davean> hojourner: Thats like the integer average of 2 and 3, it simply isn't :-p
13:54:00 <dyl> “How was lunch?” “Aggressively okay.”
13:54:07 <kosmikus> I like "agressively okay" too. No idea what it means, but sounds good :)
13:54:13 <hodapp> I had a roommate who'd always use the term "pretty okay" for everything
13:54:22 <fishythefish> a friend of mine got described as "exceedingly adequate" by his physics teacher in a college app rec letter
13:54:23 <hodapp> he was also kicked out of university
13:54:23 <dyl> It both makes sense and it doesn’t.
13:54:31 <hodapp> these things are indeed related somewhat
13:55:11 <dyl> I get flak for using “no worries”. There’s something about it connotatively I like more than “you’re welcome”.
13:55:18 <hojourner> kosmikus: ...damn. i gotta pay rent somehow. i'll keep the dream alive anywho
13:55:32 <shapr> dyl: I only sing "you're welcome" moana-style
13:55:37 <fishythefish> "you're welcome" connotes that you were deserving of thanks. "no worries" connotes that it wasn't a problem, no need to be thanked
13:55:37 <dyl> I’d rather say it was no problem for me, than tell someone I acknowledge their gratitude
13:55:41 * hodapp throws something at shapr
13:55:42 <dyl> Exactly
13:55:46 <dyl> fishythefish gets it
13:55:49 <Welkin> I'm looking to get out of programming for money asap
13:55:50 <Welkin> it sucks
13:55:54 <dyl> And “you’re welcome” is also very englishy
13:56:07 <dyl> In Spanish you would use “de nada”, and it’s the same in many languages
13:56:07 <davean> Welkin: interesting perspective
13:56:09 <Welkin> well... programming sucks
13:56:10 <hojourner> Welkin: what would you do instead?
13:56:19 <fishythefish> dyl: apparently this was an internet holy war at some point - previous generations were complaining about kids these days not saying "thank you" and "you're welcome" like they should
13:56:27 <redrapscallion> on an unrelated note, if you *could* pitch a project to be done in Haskell, how would you convince someone that the benefits of Haskell outweigh the lack of libraries + documentation + popularity of something like Java or C++?
13:56:31 <dyl> Welkin you should do what I’m about to try to do and write papers for money so I can spend time programming
13:56:32 <kosmikus> hojourner: here you go: http://www.well-typed.com/blog/2018/03/haskell-development-job-with-well-typed/
13:56:34 <fishythefish> "no worries" and "no problem" aren't proper manners REEE
13:56:38 <dyl> Really fishythefish?
13:56:40 <Welkin> hojourner: run a business selling products
13:56:40 <dyl> That’s dumb.
13:56:52 <dyl> I mean I’ll say you’re welcome in formal contexts.
13:56:56 <dyl> But it’s just that, formality.
13:57:00 <fishythefish> exactly
13:57:14 <davean> Welkin: Why would you ever want to run a business selling products? :)
13:57:40 <Welkin> davean: my time is not tied to my income then
13:57:49 <hojourner> Welkin: but then you have to deal with customers. i'd head back into academia's unwelcoming bosom before i ever did that
13:57:59 <Welkin> hire someone to run the day-to-day
13:58:03 <redrapscallion> Welkin: wouldn't you get the same effect from building a SaaS?
13:58:07 <hodapp> Welkin: ...and your income isn't really tied to your time either
13:58:08 <Welkin> SaaS is a lie
13:58:08 <dyl> fishythefish formal/professional English is so weird
13:58:13 <dyl> It’s practically a different dialect.
13:58:24 <dyl> Want to passive aggressively indicate you want something done ASAP? “Thanks in advance”.
13:58:26 <davean> Welkin: hum, programming seems even less tied to income - it replicates for virtually free and scales
13:58:31 <Welkin> hodapp: you trade hours for money in any employment relationship, including consulting
13:58:34 <dyl> It’s basically the most passive aggressive form of English I can imagine.
13:58:37 <fishythefish> heh, yeah, and it's not even unique to english
13:58:53 <fishythefish> Welkin: not if you work for free :thinking:
13:59:00 <Welkin> even running a SaaS (or similar) you will not spend more than 10% of your time programming
13:59:11 <redrapscallion> Welkin: isn't that exactly what you want?
13:59:16 <hodapp> Welkin: what I'm trying to emphasize is that it takes away a lot of predictability
13:59:24 <Welkin> yes, but SaaS is near impossible to get right
13:59:26 <shapr> kosmikus: looks like the blog post is up now?
13:59:40 <shapr> oh, you just said that, whoops
13:59:41 <hodapp> you may not know when the income will come, you may not know whether or not it will in any sort of amount you need
13:59:43 <kosmikus> shapr: yes
13:59:58 <kosmikus> just published and reddited it
14:00:02 <kosmikus> still need to tweet now :)
14:00:04 <dyl> This kind of gets to the heart of why I’d tather
14:00:05 <shapr> hurrah!
14:00:09 <Welkin> hodapp: what predictability? I never had any working for others
14:00:11 <dyl> rather go an academic route*
14:00:20 <redrapscallion> dyl: how?
14:00:28 <dyl> There’s plenty of problems that way too, but at least I can focus moreso on problems I’m interested in and DOING things.
14:00:35 <dyl> Until the funding and grant cycle kicks in :)
14:00:35 <Welkin> a typical "job" is less predictable than running a business
14:00:42 <Welkin> you could be fired at any moment for any reason
14:00:48 <hodapp> Welkin: a typical "job" is more predictable than *starting* a business
14:00:52 <Welkin> it happened at the place I was consulting at last year
14:00:59 <hodapp> there is a difference between starting one, and running one
14:01:06 <Welkin> one day, half my team was suddenly fired
14:01:08 <shapr> sounds like this belongs on #haskell-offtopic at this point
14:01:12 <shapr>  go go go!
14:01:13 <Welkin> I had a contract, so I was safe for a bit
14:01:22 * shapr furiously waves his arms
14:01:29 <dyl> Have you ever noticed how only one of -offtopic, here, or -blah carries the conversation at a time?
14:01:34 <dyl> I’d like to make some activity graphs.
14:01:43 <shapr> dyl: do it! with diagrams, right? or haskell chart lib?
14:01:51 <redrapscallion> dyl: what do you mean by one of -offtopic?
14:01:54 <davean> shapr: BTW, did you look at my Count Min Sketch code?
14:02:07 <shapr> davean: not yet, I'm staring at some C++ code
14:02:11 <dyl> There’s #haskell-offtopic, and -blah
14:02:24 <dyl> I still don’t know the difference really
14:02:58 <davean> shapr: It really could use the Approximate test thing ...
14:03:01 <davean> I should write that ...
14:03:07 <davean> even if I have to let someone else clean up the code
14:03:12 <shapr> davean: have you seen the hyperloglog++ cabbage? any idea how it compares to edwardk's hyperloglog cabbage?
14:03:15 <davean> and by clean up I mean numerically
14:03:18 <Welkin> for a haskell related question: Who here knows wtf is going on in the hakyll codebase?
14:03:21 <dyl> I need to send off my email to hackage staff
14:03:21 <fishythefish> redrapscallion: idk if anyone actually answered your question about categories vs. sets but two major differences are that categories can be bigger than sets and in a category, there are relations between your objects
14:03:24 <davean> shapr: link? Or do you mean the paper?
14:03:29 <dyl> So I can push the smooshMap package.
14:03:40 <Welkin> it is one of the most confusing code bases I have encountered, and I just want to do a few simple things
14:03:43 <davean> dyl: you need your account OKed?
14:03:44 <dyl> It’s important that we’re accommodating of Mootools users and JS concerts
14:03:50 <shapr> davean: just curious if you've looked at this: https://hackage.haskell.org/package/hyperloglogplus
14:04:00 <dyl> No, i forgot my password and since it’s not migrated I can’t reset it.
14:04:01 <Welkin> I have to resort to reading source code and piecing it together, and it is very slow
14:04:13 <dyl> So I’m locked out unless I can remember what the password was.
14:04:20 <dyl> Or contact the staff.
14:04:27 <davean> dyl: wow, thats a while ago
14:04:31 <shapr> dyl: I recognize you as dylukes, purely from the way you communicate
14:04:37 <Welkin> How do I turn an identifier for a blog post (for example) into a url??
14:04:48 <Welkin> without any gymnastics
14:04:52 <dyl> davean yeah I’ve been doing other things. I also haven’t published anything on hackagd.
14:04:56 <dyl> But the account is my name.
14:05:00 <dyl> So, I’d like to get it back haha
14:05:13 <johnw> Welkin: the route function
14:05:19 <dyl> shapr: checking nickserv or my hostmask would tell you the same :p
14:05:24 <Welkin> johnw: what about it? Where is it?
14:05:37 <dyl> What exactly is so recognizable shapr?
14:05:40 <johnw> oh, no, that's not a reference
14:05:40 <dyl> I’m kind of curious.
14:05:44 <Welkin> not requiring me to be inside of a Compiler context
14:05:45 <johnw> it creates a route in the webserver
14:05:55 <johnw> getRoute!
14:05:56 * dyl goes to -offtopic
14:06:07 <Welkin> I wish someone would write a damn book on hakyll so I could understand wtf is going on
14:06:22 <Welkin> getRoute :: Identifier -> Compiler (Maybe FilePath)
14:06:25 <Welkin> I can't use that
14:06:31 <Welkin> I'm not in a Compiler
14:06:40 <Welkin> I'm in the Rules context
14:06:41 <Welkin> O>O
14:07:02 <dyl> All sufficiently complex programs are compilers, and compilers are databases.
14:07:05 <dyl> Congratulations:
14:07:10 <dyl> psql >
14:07:24 <shapr> dyl: you are effusive and expansive, possible even loquacious!
14:07:34 <davean> Welkin: I didn't like Hakyll so I wrote my own thing :)
14:07:45 <dyl> And perhaps circumlocutory!
14:07:56 <shapr> dyl: not so often
14:07:58 <davean> Welkin: But I used Hakyll for a few years (some legacy stuff still does)
14:08:01 <johnw> Welkin: there's no "url" metadata?
14:08:02 <Welkin> I tried using frog (from racket) but it is far behind hakyll
14:08:19 <davean> Welkin: I went an entirely different direction
14:08:26 <Welkin> johnw: the docs claim there is in the post context, but I don't see it in the output for my metadata
14:08:26 <dyl> New synonym for lambda abstraction:
14:08:34 <dyl> Circumlambdulation
14:09:24 <Welkin> it is all very confusing
14:09:33 <johnw> Welkin: here's my code, if it helps at all: https://github.com/jwiegley/sitebuilder/blob/master/Main.hs#L29
14:09:41 <Welkin> I don't even understand what a Context is, other than a newtype around a function that takes a bunch of strings
14:09:52 <Welkin> maybe I need to add in the post context somehow?
14:10:07 <Welkin> I am trying to add a simple feature: previous and next links for chronological posts
14:10:22 <johnw> Welkin: it's a monoid for building web templates
14:10:29 <Welkin> I have all the identifiers and metadata for each post
14:10:56 <johnw> when you created the post item, you were in a context that you could getRoute and then stuff that into the metadata, yes?
14:12:03 <Welkin> yes, inside of the `match` clause I could potentially do it
14:12:27 <johnw> I generally "enrich" my items during construction so that I can query things easily later
14:12:41 <Welkin> I have [(Identifier, Metadata)] for all the posts already, and transformed them into a 3-tuple of Maybes for previous, current, and next
14:12:54 <deepfire> kosmikus: pong!
14:13:46 <deepfire> kosmikus: did my question about encoding choice of a constructor make sense?
14:14:23 <kosmikus> deepfire: just sent you a pm
14:14:46 <deepfire> ack!
14:32:24 <pikajude> use ripgrep, not ack
14:33:55 <pikajude> so is the purpose of the type variables in a GADT datatype head just to indicate its kind?
14:36:58 <fishythefish> pikajude: are you referring to `a` in `data Foo a where ...`?
14:40:35 <fishythefish> if so, then yes. you can also achieve the same effect with a kind signature: `data Foo :: * -> * where ...`
14:40:45 <fishythefish> you can also use a mix of the two and the type variables themselves may have kind signatures
14:40:52 <fishythefish> see https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#declaring-data-types-with-explicit-constructor-signatures (you have to scroll down a bit)
14:42:51 <Welkin> davean: what was your own alternative to hakyll?
14:45:08 <davean> Welkin: Oh, I wrote a FRP-minimally-dynamic website generator thingy - https://code.xkrd.net/davean/ALON
14:45:38 <davean> Welkin: it watches the filesystem and describes how to route and generate responses from it
14:45:59 <davean> it staticly generates the content, on demand, and invalidates it - to the CDN level - on observation of a change event
14:51:51 <m92> what's a good book for learning haskell for someone who already has experience programming, but not in functional languages?
14:55:29 <davean> Welkin: I don't know if its a "better" solution - it is more powerful but less oriented towards like S3-style hosting. Its a point in the design space I haven't seen explored before and I think AlON is at least worth a conversation on the design options
14:55:35 <davean> Welkin: its not much more then that ATMq
14:56:29 <Welkin> I am currently disappointed in how insanely complex all of the static site generator solutions are, or how incomplete they are
14:56:39 <Welkin> I suppose I will never be happy with it
14:56:50 <davean> Welkin: You often seem unhappy :)
14:57:12 <davean> Welkin: Hakyll back when it was based on arrows was annoying - I implimented some custom functions in it and that didn't make me happy
14:57:26 <davean> I didn't find the new version too complicated, though it certainly didn't make me happy
14:57:51 <Welkin> I don't understand how it even works, and barely get an idea of it by tracing through the source code, which is a terrible use of my time
14:57:54 <davean> I found it lead to a lot of duplication - for example basing a Feed and a web page on the same content and rendering
14:58:00 <Welkin> just to implement a feature that jekyl comes with out of the box
14:59:21 <Welkin> someone please add feature for previous/next blog post metadata
14:59:23 <Welkin> o.o
14:59:26 <Welkin> it is sorely needed
14:59:28 <davean> Welkin: oh, I did that
14:59:39 <Welkin> I have been trying all day and have made some progress
14:59:44 <Welkin> but I still can't get it working
14:59:54 <Welkin> I tried this last year for several days without any luck
15:00:46 <Welkin> davean: do you have the source online?
15:01:28 <davean> let me see
15:02:30 <davean> Welkin: Hum, I have an old file I could email you
15:02:47 <davean> I think you might be disapointed in how simple it is?
15:03:19 <Welkin> could you lpaste it?
15:03:55 <Welkin> if you are talking about using the `pagniate` function, I have done that already
15:04:04 <davean> No, I don't do that
15:04:07 <Welkin> but it did not allow me to access the metadata for any of the posts
15:04:49 <davean> Welkin: Have you seen "getMetadata :: Identifier -> m Metadata"?
15:05:24 <Welkin> I'm already using one version of that
15:05:52 <Welkin> getMatches, sortChronological, getMetadata
15:06:03 <rindolf> Hi all! Can anyone tell me how to fix http://paste.debian.net/1017104/ with this - https://github.com/shlomif/Freecell ?
15:06:05 <Welkin> and I have a list of previous, current, next wit hthe Identifier and Metadata
15:06:14 <rindolf> it is expat-licensed
15:06:37 <Welkin> where I am currently stuck is turning that Identifier into the url for the hyperlink
15:07:06 <davean> Welkin: I mean ... its a path?
15:07:29 <Welkin> it is a path
15:07:38 <Welkin> but it is not the ultimate url that is generated
15:08:03 <davean> getRoute
15:08:08 <Welkin> yes
15:08:18 <Welkin> but that is in a Compiler
15:08:22 <Welkin> which is the huge pain in the ass
15:08:28 <davean> I didn't find that a pain
15:08:30 <Welkin> I'm currently trying to see if I can use that
15:09:03 <davean> You keep saying these things, but you aren't telling me why thats a problem or what your actual issue really is
15:09:05 <Welkin> well, I am generating this list of prev, current, next outside of that `match` clause and wanted to construct the complete set of data there
15:09:09 <davean> I can send you my file
15:09:12 <davean> or ... yah
15:09:23 <Welkin> I haven't gotten anything to work yet
15:09:41 <Welkin> other than getting the list of identifiers with basic metadata and printing it to the page
15:09:47 <davean> Why aren't you compiling everything that has prev/next together?
15:09:56 <davean> why isn't that one compile block?
15:10:08 <Welkin> what do you mean?
15:10:18 <Welkin> `match` will operate on each post one at a time
15:11:27 <Welkin> I am going to build a map from Identifer -> CustomMetadataWhatever
15:11:35 <davean> Welkin: you can load others in it though
15:11:38 <Welkin> and use that for the previsou/next links with titles
15:11:46 <Welkin> how is that?
15:12:13 <davean> Welkin: the "load*" functions
15:12:19 <davean> Welkin: so just do it in two stages
15:12:28 <seafood> Does anyone know of a toy compiler, written in Haskell, for a lazy functional programming language (preferably a fragment of Haskell) that is a) relatively small (5k - 10k LOC), b) clearly and simply implemented c) has a reasonably sophisticated type system i.e. polymorphism, ability to define algebraic data types. I actually only need an interpreter and it does not need to be efficient.
15:13:04 <davean> load* just gives you access to what its already done generally
15:13:08 <davean> Which is plenty
15:13:26 <Welkin> what it's already done?
15:13:42 <davean> No
15:14:19 <rindolf> anyone?
15:14:42 <davean> Welkin: just load up the bodies, so you know what they all are, and then access the others as you actually render them
15:17:08 <davean> Welkin: you don't *have* to route things
15:17:37 <davean> Welkin: maybe thats how you're getting confused?
15:17:55 <Welkin> perhaps showing me your code would help
15:18:16 <davean> Yes, so where do you want it emailed? I've offered
15:20:32 <davean> Welkin: thats some ancient code, but it should make it pretty clear - you can just attach extra metadata at will of course
15:25:35 <davean> Welkin: I don't guarrentee it still compiles BTW - thats 3 years old; I haven't looked at it since the day I wrote it
15:26:15 <Welkin> I only see one use of `getMetadata` in here, and don't see where you are doing anything with previous/next
15:26:27 <Welkin> that is use in the feed code
15:32:44 <rindolf> anyone?
15:34:35 <Clint> use FlexibleContexts?
15:35:03 <rindolf> Clint: i know, but how can i avoid it?
15:35:27 <lyxia> why do you want to avoid it
15:35:50 <rindolf> lyxia: because the error seems meaningful
15:35:54 <glguy> To avoid it you can make a new typeclass instead of abusing MonadState there
15:36:27 <lyxia> rindolf: it's really not so meaningful if you're using multiparamtypeclasses
15:36:29 <davean> rindolf: the "meaingful"ness of the error is "You don't have that feature enabled that allows that syntax"
15:36:30 <fishythefish> the error is that your typeclass constraint involves a concrete type (Set Board) rather than only type variables
15:36:31 <hpc> rindolf: sometimes extensions are pretty safe to use, but just not enabled because they aren't standard yet
15:36:37 <fishythefish> this is common when using MPTCs, like lyxia says
15:36:41 <fishythefish> FlexibleContexts is safe to use
15:37:59 <rindolf> hpc: well, i presume that code worked in the past
15:38:32 <davean> rindolf: yes, with that enabled
15:38:49 <davean> rindolf: I'm sure they passed it on the compiler command line
15:39:18 <rindolf> davean: ah
15:39:28 <rindolf> davean: it isnt documentted
15:39:43 <davean> rindolf: no, none of its build is documented
15:40:01 * hackage easytest 0.2 - Simple, expressive testing library  https://hackage.haskell.org/package/easytest-0.2 (joelb)
15:40:43 <rindolf> davean: ah
15:40:44 <davean> rindolf: projects should use cabal - this one clearly didn't. May it be a lesson in how to manage your future projects ;)
15:41:38 <rindolf> davean: it isnt my project originally
15:42:37 <davean> rindolf: Better to learn from others then from your own mistakes :-p
15:43:22 <lyxia> rindolf: old versions of GHC could infer flexible contexts even with the extension disabled
15:44:06 <rindolf> lyxia: ah
15:44:36 <lyxia> This was a bug, and was fixed in 7.10 https://downloads.haskell.org/~ghc/7.10.3/docs/html/users_guide/release-7-10-1.html (first item under Compiler)
15:45:06 <rindolf> lyxia: i see
16:14:57 * hackage yesod-auth-oauth2 0.4.1.0 - OAuth 2.0 authentication plugins  https://hackage.haskell.org/package/yesod-auth-oauth2-0.4.1.0 (PatrickBrisbin)
16:37:47 <daniloaugusto> >
16:37:52 <daniloaugusto> >><<
17:27:51 <davean> Hum, hackage is 100% CPU usage.
17:59:25 <ospa> Hi! I've got such simple class: `class Cons m a where new :: m a` and `instance MonadIO m => Cons m Foo`. I would like to derive implementation of it in a `newtype Bar = Bar Foo`, however when writing `deriving (Cons m)` GHC complaints
17:59:52 <ospa> "Couldn't match representation of type 'm Foo' with that of 'm Bar' arising from the coercion of the method
18:00:25 <ospa> 'new' (sorry for sending previous message without this end). Does anyone know if I can somehow ask GHC to derive it ?
18:00:34 * hackage happstack-server 7.5.0.3 - Web related tools and services.  https://hackage.haskell.org/package/happstack-server-7.5.0.3 (JeremyShaw)
18:00:41 <mniip> ospa, such a derivation is not safe
18:00:45 <mniip> for an arbitrary 'm'
18:01:11 <mniip> if m was a GADT you could break the typesystem
18:01:21 <ospa> mniip: I completely understand that. And I understand why GHC rejects it. However im sure that `m` will be jsut a monad here and it should be derived by wrapping / unwrapping the newtype.
18:01:36 <mniip> but it won't
18:01:44 <ospa> mniip: so im just wondering if there is any deriving mechanism which would allow me to express it and do it automati ally
18:03:31 <mniip> coerce :: Foo -> Bar  is fine
18:04:11 <mniip> as is  coerce :: m Foo -> m Bar  if the parameter role is representational
18:04:21 <mniip> but that's not true for general m
18:05:28 <mniip> if m is a monad the best you can do is still  fmap coerce :: Functor m => m Foo -> m Bar
18:06:12 <ospa> mniip: hmm, but if Im sure that `m` would be some of "standard" mtl monad stack then am I safe to tell ghc to treat `m` as representational ?
18:07:01 <ospa> mniip: hmm, yes, m is Monad. And I could do fmap coerce here, however I would like to derive this instance in order not to write this code by hand
18:07:54 <ospa> mniip: probably im missing some background here, but as I understand its just not possible, right ?
18:09:28 <mniip> hmm
18:10:02 <mniip> there might be a way to add Coercible as a constraint somewhere in there
18:10:21 <mniip> to make sure 'Cons m Foo' has such a coercion in scope
18:12:09 <mniip> something like this https://www.reddit.com/r/haskell/comments/81lo16/why_cant_monads_be_defined_in_terms_of_return_and/dv4dm5t/
18:12:25 <mniip> but that's a wip GHC feature...
18:13:32 <ospa> mniip: ok, seems like overkill for what I need here. Hmm, ill write it by hand then.
18:14:00 <ospa> mniip: Im really thankful that you explained it to me!
18:18:08 <lyxia> ospa: with DerivingVia it will be possible to define custom deriving strategies, like one that uses the monad's fmap to wrap/unwrap newtypes.
18:18:55 <ospa> lyxia: DerivingVia sounds like sometihng Im looking for, as I understand its not implemented yet, right ?
18:19:08 <lyxia> right
18:19:14 <ospa> :(
18:19:46 <lyxia> there is a TH implementation, but indeed the plan is to have it in GHC https://hackage.haskell.org/package/deriving-compat-0.4.1/docs/Data-Deriving-Via.html
18:21:02 <ospa> lyxia: thats very interesting! thank you!
18:21:59 <lyxia> :)
19:08:36 <jchia> Question about incremental build: If I only add a comment to some source code, should GHC be smart enough to not rebuild the modules that depends on the changed code?
19:09:07 <jchia> 'stack build' seems to be doing unnecessary builds
19:09:35 <jchia> Theoretically, if GHC has deterministic builds, the output doesn't change, so dependents also don't need to be rebuilt.
19:10:00 * hackage web-routes-th 0.22.6.3, harp 0.4.3.1 (JeremyShaw): https://qbin.io/barry-months
19:10:26 <lyxia> I don't know but that sounds like a fair requirement
19:12:39 <davean> jchia: one of the inputs has changed
19:12:55 <davean> jchia: so the intermediate files can have changed
19:13:00 <davean> And still be deterministic
19:16:52 <jchia> davean: If comments change, maybe i can expect output file to be the same
19:17:00 <jchia> "if only comments change"
19:17:47 <jchia> do you mean comment-only changes can cause output to change, resulting in the build to cascade?
19:18:29 <davean> Well for one it changes line numbers
19:18:43 <lyxia> oh that's a good point
19:18:48 <davean> So yes, if course that cascades
19:18:58 <davean> :)
19:19:01 <jchia> davean: In this particular change, actually I just added a blank line at the end
19:19:28 <jchia> There's no code on blank lines
19:19:41 <jchia> maybe they want to put a hash of the source code in the output or something like that
19:20:37 <davean> Sure, but now you have to track it not at a module level but a top level variable level, and that's a assuming haddock's aren't in your files, the final build doesn't contain a hesh of it's source files, template Haskell isn't doing something clever, wherever
19:20:42 <jchia> However, regarding line numbers, isn't there a separation of interface and implementation in the output? dependents don't need to care about upstream line numbers
19:20:43 <davean> Comments do change things
19:21:22 <jchia> I've seen '.hi' files and i'm not sure what they are, but my wild guess is that they describe the interface for downstream modules
19:21:54 <davean> No they contain it's partial compilation
19:22:29 <jchia> OK
19:25:31 <davean> jchia: and it isn't the interface that matters
19:25:50 <davean> It's the actual generated code - consider inlining
19:26:53 <jchia> davean: OK, I didn't think about that. Inlining can happen across modules, unlike in other languages like C++.
19:29:22 <davean> A lot of the actual form of the file can leak
19:29:48 <davean> Without TH stupidity
19:30:18 <redrapscallion> I need to make a simple website where the user types something into a textbox, saves it, and when the user returns, the same text shows up again. I'm using Scotty, and the problem is that I dynamically generate the HTML with the text from my database.
19:30:29 <redrapscallion> should I be using Heist, or blaze-html, or Shakespeare or what?
19:31:19 <Welkin> they are different
19:31:25 <Welkin> blaze is old
19:31:29 <Welkin> lucid is a better blaze
19:31:43 <redrapscallion> I just need to be able to have some way to dynamically stick a string into a textbox in HTML. that's literally it
19:31:43 <Welkin> shakespeare is template haskell, so I don't like it
19:31:48 <Welkin> go with lucid
19:32:39 <SethT> i need to learn how to code my first haskell program, where would be the best place to ramp up to do that?
19:33:05 <Welkin> SethT: main = putStrLn "Hello World"
19:33:06 <Welkin> there you go
19:33:19 <SethT> was hoping of more like a tutorial or something
19:33:24 <SethT> how do i run/compile haskell code
19:33:48 <Welkin> install haskell platform
19:33:51 <Welkin> @where platform
19:33:52 <lambdabot> http://hackage.haskell.org/platform/
19:33:58 <Welkin> follow the instructions
19:34:26 <Welkin> you compile using `ghc Main.hs -o HelloWorld`
19:34:47 <Welkin> you will need to learn how to use cabal to set up more complex builds for larger projects
19:34:50 <Welkin> @where cabal
19:34:51 <lambdabot> http://www.haskell.org/cabal
19:34:56 <Welkin> cabal comes with haskell platform
19:35:17 <Welkin> https://www.haskell.org/cabal/users-guide/
19:35:37 <jchia> Is there a boilerplate-free way to convert a record to a tuple of its fields? I have a record where all the fields and Vector of something and I want to find the product of all the lengths
19:35:54 <Welkin> jchia: template haskell
19:36:27 <redrapscallion> Welkin: it looks like I can build HTML with Lucid, but it's not clear how I can, for example, change a textarea whose html ID is "textarea_id" for example.
19:36:29 <jchia> If I can convert it into a tuple, I can use tuple-th to get the lengths
19:36:40 <jchia> Welkin: I'm looking for an existing package.
19:36:47 <Welkin> redrapscallion: it is a library for outputting html
19:36:51 <Welkin> I am not sure what you are asking
19:36:56 <SethT> Welkin: great thanks
19:37:36 <Welkin> if you want to parse and manipulate html, that is completely different
19:37:47 <lyxia> jchia: generics-sop perhaps
19:38:01 * hackage hsx2hs 0.14.1.3 - HSX (Haskell Source with XML) allows literal XML syntax in Haskell source code.  https://hackage.haskell.org/package/hsx2hs-0.14.1.3 (JeremyShaw)
19:38:12 <redrapscallion> Welkin: just to be sure, let me try to clarify
19:38:32 <redrapscallion> Welkin: let's say I had a homepage that says "Hello user!", but if the user is signed in, it'll say "Hello <THE_USERS_NAME>"
19:38:57 <Welkin> redrapscallion: you can treat the html as code
19:39:12 <Welkin> it is reversed from how "templates" work in other languages
19:39:16 <anks> Hello. I've just written a multiparam type class that provides constraint for lists of types that have common prefix. So for example  foo :: Prefixes as bs => HList as -> HList bs -> Bar , correctly constraints input data. But compiler can't unify a0~b0, which are the heads of the lists. How can I make it happen??
19:39:36 <Welkin> instead of having some limited functionality to "program" inside of an html template, you embed the html in your code
19:39:49 <Welkin> so you can just use a normal branching expression to decide which html to render
19:39:55 <SethT> how would you compare haskell to R? do they specialize in different types of workloads?
19:40:09 <Welkin> SethT: R is specialized for statistics. Haskell is general purpose
19:40:13 <Welkin> Haskell is more like C++
19:41:46 <redrapscallion> hmm, Welkin can I PM you?
19:42:05 <Welkin> sure
19:42:38 <Welkin> redrapscallion: here is an example of using lucid like this https://github.com/chrisdone/lucid/blob/master/test/Example1.hs#L36
19:43:00 <Welkin> it would be nearly identical for blaze (or any other html combinator library)
19:43:45 <Welkin> it is just normal code that is eventually transformed into html, just normal haskell functions
19:43:54 <redrapscallion> Welkin: wait -- so when I want to generate the HTML for my page
19:44:14 <anks> In other words. Knowing that two lists have common prefix how can i make compiler deduce that their heads are the same
19:44:16 <redrapscallion> I need to explicitly write out a function or do pattern matching to change it?
19:44:25 <redrapscallion> like, for certain specific parts of it
19:44:59 <Welkin> you don't change it
19:45:05 <Welkin> you generate it from some source data
19:45:07 <lyxia> jchia: actually here's a one-liner with GHC.Generics https://bpaste.net/show/3e632286fdd2
19:45:10 <Welkin> based on whatever conditions you choose
19:45:23 <Welkin> so if the user is logged in, you just check if they are logged in and then branch on that condition
19:45:35 <Welkin> and either produce one piece of html or another
19:45:44 <Welkin> you build your output piece by piece
19:45:59 <Welkin> your html is just functions
19:46:02 <redrapscallion> Welkin: oh I see.
19:46:06 <lyxia> anks: every two lists have the empty prefix as a common prefix...
19:46:09 <Welkin> when you run it, it generates actual html
19:46:28 <redrapscallion> Welkin: I see
19:46:30 <redrapscallion> Welkin: so
19:46:32 <Welkin> this is static of course
19:46:39 <Welkin> there is no javascript involved
19:46:44 <Welkin> rendered on the server
19:46:50 <redrapscallion> instead of having HTML files... I have haskell files that are really just Lucid creating HTML for me
19:46:54 <Welkin> yes
19:46:59 <anks> yes, but the constraint is so that one is a prefix of the other
19:47:01 <Welkin> it is a DSL for generating html
19:47:02 <lyxia> anks: GHC needs a lot of hand holding for type-level reasoning
19:47:13 <lyxia> anks: can you paste your code
19:47:33 <Welkin> if you think of any "template" as a function, then this makes sense
19:47:48 <anks> the example itself is a bit contrived but i can paste the type class
19:47:49 <Welkin> you can compose and combine them however you wish
19:48:05 <Welkin> define the html for your login form, then embed that inside of your home page
19:48:10 <Welkin> and have a navigation that you also embed
19:48:36 <Welkin> but instead of a weak "template" language, you get full haskell
19:48:58 * hackage sqlite-simple-errors 0.6.1.0 - Wrapper around errors from sqlite-simple  https://hackage.haskell.org/package/sqlite-simple-errors-0.6.1.0 (jmc41493)
19:50:14 <anks> https://pastebin.com/Ah3sk06L
19:50:22 <Welkin> I'm off for tonight
19:51:57 <lyxia> anks: okay thanks. one problem here is that instances can only be read in one direction
19:52:13 <anks> And now, given that typeclass I'd like GHC to easily deduce (Prefixes as bs) => a0 ~ b0, assuming their are corresponding lists head.
19:52:15 <anks> I see
19:52:23 <anks> Do I need another type class for this?
19:53:52 <lyxia> You could use TypeFamilies and ConstraintKinds
19:56:43 <anks> Could you elaborate? I don't exactly get how can I make this way ghc understand that they share common head if not empty
19:56:47 <lyxia> If you have (Prefixes (a : as) bs) do you also need to be able to infer that bs is not empty
19:57:35 <lyxia> I can write an example, but now I realize there are a few more details to clarify about how much expressiveness is required
19:59:19 <anks> Not sure, I think so.
20:00:08 <anks> but wait
20:00:24 <anks> i think it doesnt in this context
20:00:48 <anks> it's already after pattern maching
20:00:52 <lyxia> anks: https://bpaste.net/show/c6cfb6ee07e7
20:01:55 <anks> lyxia: thanks!, im going to check it soon
20:03:19 <lyxia> So the equality will be provided by the superclass constraint on line 11.
20:04:44 <lyxia> The superclass arrow really goes right-to-left  IsPrefix as bs <= Prefixes as bs, as opposed to instance context arrows   ... => Prefixes (a ': as) (b ': bs)
20:05:14 <anks> ghc suggest poential undecidable superclass
20:05:21 <lyxia> yeah turn it on
20:05:23 <anks> ok
20:05:29 <jchia> lyxia: Thanks
20:05:50 <lyxia> yw
20:06:24 <lyxia> jchia: it works only up to 7-tuples :D
20:09:11 <anks> lyxia: it works. Now compiler cannot deduce Prefixes for tails of the lists.
20:09:51 <byorgey> @tell merijn I managed to formally prove via parametricity that  first f . second g = second g . first f.  In the end it's entirely uninteresting/unsurprising, of course, but I'm glad I did it if only for my own personal satisfaction. =)
20:09:51 <lambdabot> Consider it noted.
20:09:52 <anks> I'll try to work it out with the explanation you've provided. I'm to sleepy atm. Thanks a lot.
20:11:18 <jchia> lyxia: Why?
20:11:19 <lyxia> anks: you can add a Prefixes constraint to the second clause of the IsPrefix type family
20:12:18 <lyxia> jchia: Generic is not derived for longer tuples because it affects compilation times too much.
20:12:30 <jchia> OK
20:12:34 <anks> <3
20:12:37 <anks> it did work
20:12:40 <jchia> Then I need a TH approach
20:13:02 <jchia> TH, the toilet plunger of last resort
20:13:18 <lyxia> :(
20:13:29 <anks> lyxia: thank you very much!
20:14:17 <lyxia> yw
20:29:23 <dsal> Is there a better way to do this?  This feels a little clunky. https://www.irccloud.com/pastebin/hyXvU9qA/processQueue.hs
20:29:56 <dsal> I feel like there's something applicative that will do the thing for me and I'm missing it.
20:30:26 * hackage boomerang 1.4.5.4 - Library for invertible parsing and printing  https://hackage.haskell.org/package/boomerang-1.4.5.4 (JeremyShaw)
20:31:26 <lyxia> dsal: isJust <$> traverse process q
20:31:59 <lyxia> totally unreadable TBH
20:32:09 <lyxia> but it's one line!
20:32:35 <dsal> Hmm...  Yeah, I still haven't internalized traverse.
20:41:32 <dsal> lyxia: Well, thanks.  You answered my question.  I like it, but it doesn't fit into my brain currently, so I'll just stick with what I've got.
20:42:31 <dsal> Is there a handy way to make a program self-destruct after some amount of time?
20:42:44 <dsal> e.g., if this thing can't do its job within 50 minutes or so, I want it dead.
20:44:13 <lyxia> dsal: you can fork a thread that waits 50 minutes and throws an exception to the main thread.
20:44:42 <lyxia> or any other thread
20:46:20 <dsal> hmm...  Something like that seems sensible.  I've done something similar to this in the past with Control.Concurrent.Async.race
20:49:09 <eacameron> I want to use natVal to get a KnownNat. I see this natVal' version that takes Proxy# but I don't know how to construct a Proxy#
20:51:15 <saggyambition> why on earth would anyone prefer a module system where you can't immediately tell where the module originates (think Elixir's `IO.puts` vs Haskell's mere `print`) and what is the name of this difference?
20:52:01 <dsal> System.IO.print ?
20:52:27 <boj> saggyambition: maybe some confusion behind inlcuding a full Prelude?
20:52:54 <boj> just add -XImplicitPrelude, import everything concretely
20:53:07 <boj> NoImplicitPrelude*
20:53:23 <EvanR> dsal: there is a standard haskell lib for timeout, called timeout, which does exactly that. spawns a watchdog thread which sends an async exception after a period of time
20:53:57 <dsal> Oh.  Hmm...  I think i saw that once.  I don't remember why I ended up doing something else.
20:53:58 <EvanR> actually, its in base
20:54:03 <EvanR> import System.Timeout
20:54:04 <saggyambition> in haskell, even when importing modules, you don't append the name of the module to functions from it when they're used, no? it's always just the function alone; no module name in front like with Elixir?
20:55:12 <EvanR> saggyambition: that is possible, and necessary if you imported qualified
20:55:22 <EvanR> import qualified System.Timeout
20:55:31 <EvanR> now you have to say, System.Timeout.timeout
20:55:42 <dsal> Hmm...  Yeah, that looks easy enough.
20:56:04 <EvanR> elixir style is painfully verbose
20:56:31 <Lears> dsal: without traverse you can still outsource the pattern matching simply enough. I think something like `whenIsJust process q >> pure (isJust q)` reads pretty easy.
21:00:16 <dsal> Is there any thought about getting rid of ++ ?
21:01:12 <EvanR> that would be like getting rid of map
21:01:28 <dsal> Heh.  yeah, I guess so.
21:01:30 <dsal> Both would be nice.
21:01:39 <EvanR> there is resistance to that
21:01:44 <dsal> I can imagine.
21:02:02 <dsal> The downsides of being a popular, mainstream language, I guess.
21:02:12 <EvanR> lol
21:02:48 * EvanR quits haskell, its too mainstream
21:03:24 <vaibhavsagar> EvanR: all the cool kids are writing Agda now anyway
21:03:35 <vaibhavsagar> just like they were ten years ago
21:03:56 * hackage generic-data 0.1.0.0 - Utilities for GHC.Generics  https://hackage.haskell.org/package/generic-data-0.1.0.0 (lyxia)
21:10:28 <EvanR> agda is decade agnostic
21:10:31 <dsal> Lears: Yeah, that's not too bad.  I hadn't seen whenJust.  I was looking for an answer like traverse, and then realized I need to internalize that first.
21:16:41 <laudecay> how would i like uncurry a list with exactly 3 elements
21:17:03 <laudecay> i basically want to pattern match on "list with exactly 3 elements" and then have everything else error
21:17:33 <umwelto> hi, any idea why a dependency could be absent at compile time (stack build) even if listed in "dependencies" in the yaml file?
21:18:32 <laudecay> ok let me back up uhhh basically i have 3 space-separated arguments on one line on stdin and i just want to get them into a function elsewhere
21:18:34 <laudecay> outside of main
21:19:20 <dsal> laudecay:        myfun l@[_,_,_] = doThingWithList l
21:19:31 <laudecay> wait i don't understand
21:19:48 <laudecay> what's doThingWithList's type
21:20:43 <dsal> > let f l@[_,_,_] = show l  in  f "abc"
21:20:46 <lambdabot>  "\"abc\""
21:20:51 <dsal> It's just [a]
21:20:56 <dsal> > let f l@[_,_,_] = show l  in  f [1, 2, 3]
21:20:59 <lambdabot>  "[1,2,3]"
21:21:01 <dsal> > let f l@[_,_,_] = show l  in  f [1, 2, 3, 4]
21:21:04 <lambdabot>  "*Exception: <interactive>:3:5-24: Non-exhaustive patterns in function f
21:21:58 <dsal> (well, I guess it's Show constrained...)
21:22:10 <dsal> But that's how you pattern match on a list with three elements.
21:22:21 <laudecay> oh ok
21:22:31 <laudecay> what about the thing where i have the 3 space-separated arguments
21:23:34 <dsal> I don't know what that means.
21:23:41 <dsal> what are space separated arguments?
21:23:58 <laudecay> fdhjsahfdjkas hfdkjsahfjkhwui hfdjskahfdjkas\n <- this would be coming in on stdin
21:24:06 <laudecay> and i want to use each of them as an argument
21:24:13 <laudecay> to like another function
21:24:23 <dsal> Oh.  You mean you have a string and the string as various whitespace in it.
21:24:28 <laudecay> yeah basically
21:25:09 <dsal> > let f l@[_,_,_] = show l  in  (f.words) "fdhjsahfdjkas hfdkjsahfjkhwui hfdjskahfdjkas\n"
21:25:12 <lambdabot>  "[\"fdhjsahfdjkas\",\"hfdkjsahfjkhwui\",\"hfdjskahfdjkas\"]"
21:25:16 <dsal> > let f l@[_,_,_] = show l  in  (f.words) "fdhjsahfdjkas hfdkjsahfjkhwui hfdjskahfdjkas but too many\n"
21:25:19 <lambdabot>  "*Exception: <interactive>:3:5-24: Non-exhaustive patterns in function f
21:25:20 <laudecay> w o a h that's magical
21:26:54 <laudecay> :t words
21:26:56 <lambdabot> String -> [String]
21:26:59 <laudecay> okie
21:28:19 <nshepperd> > words "i am four words"
21:28:21 <lambdabot>  ["i","am","four","words"]
21:29:15 <laudecay> :hoogle
21:29:22 <laudecay> is there like a type signature search on here
21:31:45 <amalloy> @hoogle [a] -> a
21:31:46 <lambdabot> Prelude head :: [a] -> a
21:31:46 <lambdabot> Prelude last :: [a] -> a
21:31:46 <lambdabot> Data.List head :: [a] -> a
21:31:54 <laudecay> oh cool
21:32:17 <amalloy> you can message lambdabot privately for that as well, if it's a search that is not relevant to whatever is going on in #haskell
21:32:58 <dsal> Yeah, I have a relationship with lambdabot on the side.
21:33:15 <dsal> Of course, you can do most of this stuff in ghci as well.
21:33:44 <dsal> except pointfree, which hasn't built in a while.
21:34:00 <dsal> @pl \x -> x + 1
21:34:00 <lambdabot> (1 +)
21:34:32 <dsal> Why is it (1 +) and not (+ 1) ?
21:34:40 <dsal> @pl \x -> x / 3
21:34:40 <lambdabot> (/ 3)
21:35:09 <dsal> If it's going to do something special, why not succ?
21:35:19 <dsal> (we have a relationship, but we argue a lot)
21:44:07 <reactormonk> Is there a [(a -> m a)] -> (a -> m a) - for sequencing monadic actions?
21:45:27 * hackage shake-ext 2.8.0.0 - Helper functions for linting with shake  https://hackage.haskell.org/package/shake-ext-2.8.0.0 (vmchale)
21:46:35 <Lears> :t foldr (>=>) return
21:46:36 <lambdabot> (Monad m, Foldable t) => t (c -> m c) -> c -> m c
21:54:01 <dsal> Is there an opposite of IsString?  i.e., I want to take things that are String-like and String them.
22:01:13 <dsal> class Stringy a where string :: a -> String
22:01:13 <dsal> instance Stringy [Char] where string = id
22:01:13 <dsal> instance Stringy Text where string = unpack
22:22:20 <aasronStone> i guess there are no access modifiers in haskell ???
22:24:15 <xandaros> No, but you can use an export list to limit visibility from other modules
22:24:59 <aasronStone> xandaros : i want to export a data type but limit some of the fields' visibility
22:25:00 <xandaros> Something like `module A (foo, bar) where`
22:25:19 <cocreature> just make sure to also export your constructors in some .Internal module or I will find you and annoy you until you do so :)
22:26:39 <aasronStone> so if i have something like this data A = A {a :: Int,b :: Int} so is there are way to restrict acces to filed a ???
22:27:32 <dsal> Things you don't export aren't accessible.
22:27:43 <xandaros> `module Foo (A, b) where`. This will restrict access to the constructor and the field accessor a. How well that'll work in practice... *shrug*
22:29:07 <xandaros> If you DO want to export the constructor, you'd use something like A(A) or A(..). This will allow access to all fields through pattern matching, though
22:29:30 <woodson> what is the library mostly use to generate xml?
22:38:48 <aasronStone> in haskell functions are passed by value or passed by reference ??
22:39:44 <Maxdamantus> aasronStone: Haskell doesn't have an assignment operator, so such a distinction would be meaningless.
22:40:27 * hackage string-transform 1.1.0 - simple and easy haskell string transform wrapper  https://hackage.haskell.org/package/string-transform-1.1.0 (ncaq)
22:41:50 <Maxdamantus> aasronStone: though it might make sense to ask in terms of thunks or something, in which case the answer I think would be "by reference", since afaik evaluating `f x` can result in the variable's thunk being evaluated.
22:42:00 <Maxdamantus> (the `x` variable, that is)
22:44:48 <Maxdamantus> Actually, a quick test in ghci indicates it's not, so presumably it's not specified by the language.
22:44:55 <xandaros> aasronStone: Why are you asking? In Haskell, all data is immutable, so there really is no difference whatsoever
22:49:07 <cocreature> Maxdamantus: afaik at least GHC guarantees this. otherwise things like seq would be useless since you would end up evaluating something to which you have no reference
22:49:22 <cocreature> ghci might just be weird
22:54:12 <Maxdamantus> cocreature: well, I was misthinking at first, since I think semantically a thunk is not part of a variable, but a variable instead just refers to a thunk.
22:55:18 <Maxdamantus> So the evaluation doesn't change the variable in the pass-by-reference sense, just something pointed to by it.
22:56:22 <laudecay> why is this bad: if (even 2) then not else id $ True
22:56:33 <laudecay> but (if (even 2) then not else id) True works
22:57:01 <laudecay> i thought $ was lowest precedence, so everything to the left should evaluate first, right?
22:57:02 <amalloy> laudecay: it parses as: if (even true) then {not} else {id $ True}
22:57:16 <amalloy> it is the lowest-precedence operator, but if/then/else are structural elements, not operators
22:57:19 <laudecay> amalloy: why's it doing that? is the if/then/else
22:57:22 <laudecay> oh
22:57:33 <laudecay> what could i do instead? that first part is basically just an xor but xor isn't built in
22:57:50 <amalloy> well, and "structural elements" is probably not the correct technical term
22:58:06 <amalloy> laudecay: /= is xor for booleans
22:58:10 <laudecay> huh.
22:58:31 <amalloy> :t (/=)
22:58:33 <lambdabot> Eq a => a -> a -> Bool
22:59:03 <laudecay> um so why can't i say: f True i = even i /=
22:59:36 <laudecay> function application is the highest, so even i should eval first
22:59:49 <amalloy> well, how many arguments does (/=) take? and how many are you passing it?
22:59:52 <laudecay> then /=, which should give me Bool -> Bool
23:00:01 <laudecay> uhhhhh it's a -> a -> Bool so like
23:00:16 <laudecay> I guess I'm trying to do something silly with infix operators
23:00:40 <laudecay> how do i partially apply that?
23:00:57 <amalloy> what you're trying to do is called an operator section
23:01:07 <amalloy> (even i /=)
23:01:10 <laudecay> ohh alright
23:01:34 <laudecay> oh no
23:02:03 <laudecay> newcval True i = (even i /=) <- why is this getting angry?
23:02:21 <laudecay> (when I run it with newcval True 2 True
23:02:24 <laudecay> )
23:02:37 <amalloy> :t (let newcval True i = (even i /=) in newcval)
23:02:39 <lambdabot> Integral a => Bool -> a -> Bool -> Bool
23:02:59 <laudecay> so....
23:03:02 <amalloy> > (let newcval True i = (even i /=) in newcval True 2 True)
23:03:05 <lambdabot>  False
23:03:25 <laudecay> Prelude> newcval True 2 True
23:03:28 <laudecay> *** Exception: <interactive>:29:1-20: Non-exhaustive patterns in function newcval
23:03:51 <amalloy> so, defining multi-line functions in ghci is not great
23:04:11 <amalloy> you've only shown me one line so far, but i can tell you have two
23:04:24 <laudecay> newcval a i = if a then (even i /=) else id
23:04:26 <laudecay> imma try this
23:04:35 <laudecay> wow amalloy thank
23:05:00 <laudecay> Prelude> newcval False _ = id <- it was this, which.... that's exhaustive?
23:05:04 <laudecay> how is it not?
23:05:07 <amalloy> it's not
23:05:14 <laudecay> what's not exhausted here
23:05:16 <amalloy> because you don't cover the first argument being True
23:05:26 <amalloy> like i said, multi-line functions in ghci
23:05:26 <xandaros> It overwrote your other match, because ghci is weird
23:05:34 <laudecay> xandaros: wait really? why
23:05:37 <xandaros> It will be fine in an actual file
23:05:46 <laudecay> oh /in ghci/
23:05:48 <laudecay> i misread
23:06:43 <xandaros> I suggest developing in an actual module and using ghci to call your function. You can reload the module with ":r"
23:06:58 <laudecay> yeah i was just testing in ghci
23:07:04 <xandaros> Makes things a whole lot easier imo ;)
23:07:08 <laudecay> ok ill def compile though when shit gets weird
23:08:11 * hackage bv-sized 0.2.1 - a BitVector datatype that is parameterized by the vector width  https://hackage.haskell.org/package/bv-sized-0.2.1 (benselfridge)
23:08:55 <xandaros> Just put it in a file, say "Foo.hs" and start ghci with "ghci Foo.hs". And write ":r" in ghci when you made a change to reload it
23:09:04 <xandaros> You don't need to make an actual binary to test things this way
23:09:13 <laudecay> hmmm good point
23:09:20 <laudecay> if i have like a main in there, what'll that do?
23:09:44 <xandaros> It'll ignore it (unless you execute main yourself, of course)
23:10:01 <laudecay> o cool
23:10:18 <laudecay> how's it handle comments though
23:10:49 <xandaros> Just fine. It's not a "ghci script", it does interpret it as actual haskell source
23:10:59 <laudecay> idk it's not going --| too well
23:11:02 <xandaros> So it should behave just as you'd expect from a binary
23:11:13 <laudecay> oh wait no ghc also is breaking lmao
23:11:39 <xandaros> It interprets --| as an operator. Put a space after -- :)
23:11:55 <laudecay> sweet
23:17:21 <robstr> morning, I want to add one function to the `heap` package, which will modify the value for a givin priority, I ended up with https://gist.github.com/rsoeldner/963cf21e53114c9eb733c561e61473a9 , the _second one_ is working, but It should be possible to short circuit (my try with the first one) which results in `fromList *** Exception: No match in record selector _priority`
23:22:59 * hackage language-ats 1.2.0.4 - Parser and pretty-printer for ATS.  https://hackage.haskell.org/package/language-ats-1.2.0.4 (vmchale)
23:29:04 <cocreature> robstr: take a look at the definition of HeapT https://github.com/pruvisto/heap/blob/master/Data/Heap/Internal.hs#L42 it’s a sumtype and the record selectors are only defined for one case
23:29:15 <cocreature> robstr: in particular if the heap is Empty, your code fails
23:29:54 <robstr> cocreature: but i patternmatch against Empty
23:30:49 <robstr> cocreature: the commented one is failing, the other one is working
23:31:21 <cocreature> robstr: you only pattern match in updateValue not in update
23:32:00 <robstr> cocreature: whoop, true ty
23:35:12 <cocreature> robstr: fwiw depending on your usecase it might worth looking at the psqueues package instead. it’s a bit more actively maintained (the last release of heap was in 2016) and it provides an alter operation
23:36:11 <robstr> cocreature: thank you, I will look into this,but i think it is a good practice to finish this :P I found myself in the position to write `if then` -.-
23:36:25 <robstr> cocreature: with fixed pattern matching its working
23:41:57 <cocreature> robstr: if you use explicit pattern matching (in this case using NamedFieldPuns but that’s not necessary) instead of using the record selectors, GHC will warn you about the pattern match being non-exhaustive with -Wall https://gist.github.com/cocreature/18f35c1e2f1abb80157acebb9d8d5c1c
23:50:21 <robstr> cocreature: ha, this is cool. so you need to list all fields explicit and enable namedFieldPuns and ghc will do the rest ?
23:51:02 <cocreature> robstr: yep, all that NamedFieldPuns does here is that you can write Constructor {a} instead of Constructor { a = a }
23:56:02 <laudecay> hey cocreature i have a list (i
23:56:05 <laudecay> fuck sorry
23:57:02 <laudecay> uh ok say the list is [a,b,c], I want to generate a list comprehension that will give me [(a,[b,c]), (b,[a,c]), (c, [a,b])]
23:58:16 <laudecay> i also know they'll be unique if that helps at all
23:58:25 <robstr> cocreature: ty
23:58:45 <cocreature> laudecay: https://hackage.haskell.org/package/utility-ht-0.0.14/docs/Data-List-HT.html#v:removeEach
23:58:55 <cocreature> laudecay: or https://mail.haskell.org/pipermail/libraries/2008-February/009270.html if you’re looking for a simple implementation
23:58:59 <laudecay> you are a blessing holy shit
23:59:07 <laudecay> i did not expect something this good haha
23:59:17 <cocreature> it’s a shame that Cale’s proposal to add these functions to Data.List didn’t seem to go anywhere
