15:43:56 --- topic: 'https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/ | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Earlier mass kick due to password compromise http://freenode.net/news/security-update-rpa'
15:43:56 --- topic: set by glguy on [Fri Jun 29 08:59:31 2018]
15:45:43 <monochrom> In fact there is an even stronger example:
15:46:01 <monochrom> > let { foo = do { Left "fail"; foo }} in foo
15:46:03 <lambdabot>  Left "fail"
15:46:47 <systemfault> monochrom: Shows how deceiving Haskell can be to someone used to more "imperative" languages.
15:51:59 <danilo2> Hi guys! I've got 2 typelevel values `("a" ': "b" ': t)` and `t` . (the first is a list with Symbols and on the end of the list is a list `t`. I also know the reference to type value `t`, however `t` is polymorphis. Is there any way to write type family which will extract the known symbols ?
15:58:49 <lyxia> no
16:02:57 <danilo2> lyxia, what I'm trying to do is to create a very simple thing, namely something along `a = path :: Path '["a"] ; b = path :: Path '["b"]` and I want to be able to write `a . b` and I want the type to be inferred to `Path '["a", "b"]` and I just cannot to figure out how to do it (maybe its just impossible to be expressed)
16:04:36 <danilo2> lyxia: actually I was able to almost do it: `type Path s = forall t. FieldPath t -> FieldPath (s <> t) ; data FieldPath (path :: [Symbol]) = FieldPath` . But here I'm unable to extract the "so far created path" using type families
16:05:12 <Solonarv> so... you want type-level (++) ?
16:05:58 <danilo2> Solonarv: not exactly. Type level (++) is simple. I want to use `.` (dot operator) to just translate to typelevel ++
16:07:22 <Solonarv> you can't make Prelude's (.) or Control.Category's (.) do that, so you'll have to shadow it
16:08:06 <danilo2> Solonarv, lyxia : to better express it, this code works fine: https://lpaste.net/4458852772590125056 , however, look at the definition of tst1.
16:08:21 <danilo2> Solonarv: in my example I was almost able to express it using the standard (.)
16:12:18 <danilo2> Solonarv: (the code compiles just fine), but having `Field2 s` as input I cannot infer `s` because the dependency is not "reversible"
16:13:31 <Solonarv> hmm
16:14:09 <Solonarv> is there a reason you *have* to have (.) as the operator?
16:14:30 <Solonarv> even if you do get it to work you'd end up with horrendous errors I think
16:14:46 <Solonarv> er, I mean really bad error messages when you do something wrong
16:18:17 <danilo2> Solonarv: basically I want it to behave just like lenses. These fields will always be with known type-level Symbols, so the errors would not happen there. I want it to look and feel just like "field accessor composition" while in fact it just composes type level path to some C-based structure
16:18:45 <danilo2> Solonarv: even if it appears on the end not usable, I just curious now if we can accomplish it somehow
16:23:08 <dataN> CPS constraints used to express inverse; https://lpaste.net/2609717687776968704
16:23:31 <dataN> maybe its related to adjunctions...
16:24:33 <zacharypch> is there a good way to use a project-specific version of ghc? i started with the default latest version that homebrew installs, but I also want to try a 7.x version that ghc-mod works with
16:24:55 <hpc> zacharypch: stack probably
16:25:06 <Solonarv> stack is probably the easiest yeah
16:25:58 <pikajude> anyone know which cabal-version introduces autogen-modules?
16:26:35 <dmwit> cabal can do it, too. Install your favorite version, then pass -w ghc-7.x.y to either configure or new-configure.
16:27:41 <noipmups> Hi, how could I link static library (.a extension) and object file (.o extension) into Haskell project using Cabal?
16:27:48 <zacharypch> hm ok - i started the project with stack init, and i see a ‘use system ghc’ option in its yaml file, i’ll dig on that some
16:28:20 <pikajude> looks like it's 2.0
16:29:27 <glguy> Once you specify your GHC version at new-configure time via -w you won't have to specify it again later when you build
16:33:51 <lyxia> danilo2: It compiles here if I enable AllowAmbiguousTypes
16:34:45 <lyxia> danilo2: Ah I thought it wasn't supposed to compile but it is... nvm
16:38:16 <lyxia> danilo2: do you have an example where you need to infer s
16:40:01 <danilo2> lyxia: sure, give me a second
16:41:23 <Solonarv> I don't think this is doable without injective type families (which we don't have, afaik) or a typechecker plugin
16:42:35 <danilo2> lyxia: this one does not compile
16:42:36 <danilo2> https://lpaste.net/1361576857002049536
16:43:19 <glguy> Doesn't appear to be any error message
16:43:39 <danilo2> glguy: you're talking about my example ?
17:00:00 <butterthebuddha> Is do notation preferred to explicit bind calls? I personally find it confusing :/
17:02:07 <glguy> butterthebuddha: for anything more than the smallest cases, yes
17:08:36 <glguy> aryeh: gist updated https://gist.github.com/glguy/e1d1de9c6044745a679a2396bc243a5e
17:09:15 <mniip> what's a good data structure for both random modification and append?
17:09:17 <rotaerk> butterthebuddha, you'll get used to it with experience
17:09:32 <butterthebuddha> mniip: Seq perhaps?
17:09:53 <butterthebuddha> mniip: https://hackage.haskell.org/package/containers-0.6.0.1/docs/Data-Sequence.html
17:23:37 * hackage IntGraph 0.1.1.0 - Dynamically sized graph library  http://hackage.haskell.org/package/IntGraph-0.1.1.0 (sam_barr)
17:38:12 <pikajude> hmm, https://travis-ci.org/pikajude/html-entity/jobs/398705572
17:38:28 <pikajude> so this build is only failing with 7.10.3, and it's saying it can't find the build dependencies of a component that's not enabled
17:38:34 <pikajude> (it's marked buildable: False)
17:38:39 <pikajude> same package builds on ghc 7.8.4 and 8.*
17:38:43 <pikajude> what's up with that
17:40:51 <pikajude> oh, it's a known cabal issue, ok
17:46:06 * hackage html-entity 0.1.0.0 - HTML entity decoding and encoding for Text  http://hackage.haskell.org/package/html-entity-0.1.0.0 (JudeTaylor)
17:51:39 <pikajude> wooo
18:25:06 * hackage staversion 0.2.2.0 - What version is the package X in stackage lts-Y.ZZ?  http://hackage.haskell.org/package/staversion-0.2.2.0 (debugito)
18:46:04 <shafox> I have this fucntion that extracts attributes, how do I add another attribute ? https://lpaste.net/320340732772614144
18:52:12 <parth_> anyone have experience wiht Network.Mail.SMTP been trying to use gmails smtp server to send mail but it always throws a user error
18:59:37 * hackage ats-pkg 2.11.0.10 - A build tool for ATS  http://hackage.haskell.org/package/ats-pkg-2.11.0.10 (vmchale)
19:03:36 <shafox> Someone please let me know how do I read this code https://lpaste.net/320340732772614144 ?
19:15:01 <geekosaur> line 7 is a pattern guard, if that's what's confusing you
19:15:47 <geekosaur> | pat <- exp ->      if the expression matches the specified pattern then the value is the expression after the ->
19:16:30 <pikajude> is `fail` the only way to abort an attoparsec parser?
19:17:45 <shafox> geekosaur: I have trouble from line 6. On line 6, pattern match starts after the case cluase, we are discarding everything by this (StartElement _ attrs) : _ ??
19:18:03 <pikajude> i think it might be
19:18:04 <Solonarv> MonadPlus' mzero or Alternative's empty will also abort
19:18:22 <pikajude> yeah but the definitions of those use fail anyway
19:18:49 <pikajude> feels like "Failed reading: " is sort of a weird and arbitrary message to attach to every parse failure
19:19:21 <pikajude> i could use the Parser constructor myself, i just wondered if there was a better way
19:20:37 * hackage minio-hs 1.1.0 - A Minio Haskell Library for Amazon S3 compatible cloudstorage.  http://hackage.haskell.org/package/minio-hs-1.1.0 (AdityaManthramurthy)
19:20:46 <Solonarv> <?> lets you label parsers, maybe that helps
19:20:57 <geekosaur> shafox, it only cares about the first element of the list, and then only if its constructor is StartElement. so it's ignoring the content in the <namespaces> block, it only cares about the attributes on its start
19:22:26 <pikajude> I'm already using <?>, I meant specifically about controlling the error info I get back
19:22:34 <pikajude> but I think that's the limitation of attoparsec is that the error messages aren't particularly good
19:24:13 <shafox> geekosaur: Then on line 7, the guard expression, I am lost here compltely,   ``` | pat <- exp ->```  in the code it would be ``` pat == Just key``` <- ``` exp == NamespaceId . read . BS.unpack <$> lookup "key" attrs ``` -> ? Just key is bind to the exp, right ?
19:24:56 <shafox> Just key is bind to pattern*
19:24:56 <geekosaur> no, that was what I was talking about with pattern guards
19:26:31 <geekosaur> it does (lookup "key" attrs), it fmap-s (NamespaceId . read . BS.unpack) over the result, it checks if the result of that is (Just something), and then extracts the somehting as key
19:35:29 <shafox> geekosaur: alright, if I undersrood correctly, I have modified the code to this https://lpaste.net/1562446546086133760 Now this compiles ok, but doesnt parse.
19:41:57 <geekosaur> not sure I can help. I can read haskell code, I don't know what your code is up to. nothing looks obviously wrong but I'm guessing as to what's supposed to be going on
19:43:32 <koz_> Could someone advise me on how I can refactor this? https://lpaste.net/8000598249297674240
19:45:33 <shafox> geekosaur: Mind if I paste the whole content of the file
19:45:50 <koz_> Whoops, realized my constants are wrong, edited: https://lpaste.net/2006131902011932672
19:46:19 <geekosaur> shafox, you can paste it, but as I am not an xml expert I am probably not the person to be helping you at this point
19:48:34 <shafox> Thank you :)
19:49:52 <shafox> I am trying to parse xml using hexpat, this is where I am right now, https://gist.github.com/shadow-fox/387e9721ed59e2ae3c3416a120da1fae While this does compile, but output asPrelude.read: no parse , I know the problematic code is in these lines https://gist.github.com/shadow-fox/387e9721ed59e2ae3c3416a120da1fae#file-lib-hs-L88-L98 not sure what though.
19:50:48 <lyxia> koz_: toBoolVector n = V.generate n . testBit ?
19:51:03 <geekosaur> shafox, don;t use read with a Text
19:51:05 <koz_> lyxia: It's alright, I figured it out. Bits is a typeclass after all.
19:51:36 <lyxia> yeah that too
19:52:47 <geekosaur> for that to work, you'd have to be running it on: <namespace key="-2" case="\"case-sensitive\"">
19:54:43 <geekosaur> so you want to remove the `read .` on line 8
19:54:43 <shafox> any other way to read it to Text ?
19:55:17 <geekosaur> actually, belay that. I don't know what the xml lib is giving you, but if it's a Text already then you just need the lookup, not the other stuff
19:55:28 <geekosaur> Just somecase <- lookup "case" attrs
19:56:09 <shafox> it gives me a ByteString, I want it Text.
19:56:53 <geekosaur> then you'll want to think about encoding and use the appropriate funciton from http://hackage.haskell.org/package/text-1.2.3.0/docs/Data-Text-Encoding.html
20:00:16 <geekosaur> (probably you want decodeUtf8, but I have no idea what data source you're using or what encoding it's in. and if you use the wrong encoding, at some point you will get garbage out)
20:02:29 <shafox> geekosaur: that was it, this is my modified code now: https://lpaste.net/4367206558564614144
20:07:06 <koz_> I want to write a function enumerateContingent :: FiniteBits a => [a] which would spit out a list of every a which isn't all zeroes or all ones. Can I write this using a list comprehension, and if so, how?
20:14:07 <Solonarv> you can't do that in a non-hacky way, because FiniteBits doesn't offer a way to enumerate all values
20:14:35 <koz_> Solonarv: Yeah, I thought as much.
20:15:06 * hackage fficxx 0.4.1 - automatic C++ binding generation  http://hackage.haskell.org/package/fficxx-0.4.1 (IanWooKim)
20:15:49 <Solonarv> you could probably hack together integralToBits :: Bits a => Integer -> a and then use that to make the list
20:16:15 <koz_> Solonarv: I could also do something like this: https://graphics.stanford.edu/~seander/bithacks.html#NextBitPermutation
20:16:31 <mniip> sketching a really cool idea
20:16:53 <koz_> countTrailingZeros is a thing, so that could actually work.
20:17:22 <mniip> foldrM (\i x -> [x, setBit x i]) zeroBits [0 .. finiteBitSize _]
20:17:37 <mniip> -1 maybe
20:18:11 <Solonarv> Data.Bits was apparently written before Proxy was in base, you're supposed to pass undefined...
20:18:26 <mniip> % enumerateContingent = let result = foldrM (\i x -> [x, setBit x i]) zeroBits [0 .. finiteBitSize (head result) - 1] in result
20:18:26 <yahb> mniip:
20:18:33 <mniip> % :t enumerateContingent
20:18:34 <yahb> mniip: FiniteBits b => [b]
20:18:45 <mniip> % take 100 (enumerateContingent :: [Int])
20:18:45 <yahb> mniip: [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99]
20:18:57 <koz_> It still grabs 0.
20:19:03 <mniip> why wouldn't it
20:19:16 <mniip> ah
20:19:31 <mniip> tail + init :p
20:19:32 <koz_> If you start at (bit 0) instead, it should be fine.
20:19:45 <koz_> Wait, no, that wouldn't actually work.
20:19:49 <mniip> that would skip some
20:20:17 <Solonarv> just slap a filter (liftA2 (&&) (/= zeroBits) (/= complement zeroBits)) in front
20:20:24 <koz_> That would work too.
20:20:34 <mniip> alternatively...
20:23:43 <koz_> Also, mniip, why the 'let result ... in result' thing?
20:23:55 <koz_> Laziness?
20:24:10 <mniip> nah, just saving on some ScopedTyVars/TypeApplications
20:24:24 <mniip> see I'm passing the return type to finiteBitSize
20:24:37 <koz_> Ah, I see.
20:26:32 <koz_> Where is foldrM in again?
20:26:48 <suzu> Control.Monad iirc
20:27:03 <mniip> hmm, there's gotta be a  ([a] -> b -> m a) -> [b] -> m [a]
20:27:18 <koz_> suzu: Nope, apparently not.
20:27:25 <mniip> I think that's what they call a histomorphism?
20:27:35 <koz_> mniip: Oh no, lol.
20:28:30 <koz_> suzu: Data.Foldable actually.
20:28:36 <suzu> oh
20:28:38 <suzu> ok
20:37:51 <koz_> How do you even use Proxy? Do you just write 'Proxy :: Proxy a' instead of 'undefined :: a' or something?
20:38:12 <glguy> correct
20:41:05 <nitrix> Is there literature of people researching visual programming for Haskell?
20:42:13 <nitrix> Seems like the benefits of purity + STM/Chan + lazy evaluation would lend itself quite nicely to experiment in that area.
20:42:27 <mniip> @let foobar = let result = do c <- [1 .. finiteBitSize (head result) - 2]; (`execStateT` zeroBits) $ forM_ [1..c] $ \_ -> do i <- Control.Monad.Trans.lift [0 .. finiteBitSize (head result) - 1]; r <- Control.Monad.State.get; guard (not $ testBit r i); modify (`setBit` i) in result
20:42:28 <lambdabot>  .L.hs:195:30: error:
20:42:28 <lambdabot>      Not in scope: ‘Control.Monad.Trans.lift’
20:42:28 <lambdabot>      Perhaps you meant one of these:
20:42:36 <mniip> dammit
20:42:41 <koz_> glguy: How come I'm getting this? https://lpaste.net/3430410673035673600
20:42:45 <koz_> mniip: Wat.
20:44:02 <glguy> koz_: finiteBitSize doesn't take a Proxy argument
20:44:17 <koz_> glguy: Ah, that would be why.
20:44:28 <mniip> @let foobar = let result = do c <- [1 .. finiteBitSize (head result) - 2]; (`execStateT` zeroBits) $ forM_ [1..c] $ \_ -> do i <- Control.Monad.State.lift [0 .. finiteBitSize (head result) - 1]; r <- Control.Monad.State.get; guard (not $ testBit r i); modify (`setBit` i) in result
20:44:30 <lambdabot>  Defined.
20:44:33 <mniip> :t foobar
20:44:34 <lambdabot> FiniteBits s => [s]
20:44:44 <glguy> It's using the old crapy style of just documenting that the argument is unused in case you want to use undefined
20:44:44 <mniip> > foobar :: [Int]
20:44:46 <lambdabot>  [1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,2...
20:44:54 <mniip> > foobar :: [Word8]
20:44:56 <lambdabot>  [1,2,4,8,16,32,64,128,3,5,9,17,33,65,129,3,6,10,18,34,66,130,5,6,12,20,36,68...
20:45:04 <mniip> ordered by pop count!
20:45:06 <koz_> mniip: Awesome!
20:45:15 <koz_> That's actually _very_ convenient for me.
20:45:39 <c50a326> oh <$> is nice... it's just map :D
20:45:44 <c50a326> well fmap but yeah
20:45:47 <koz_> c50a326: Yeah, infix.
20:45:55 <koz_> Used a lot with Applicatives.
20:46:15 <mniip> I still wonder if there's a nicer version of this using recursion-schemes...
20:46:17 <mniip> or maybe monad-loops
20:46:20 <mniip> probably is
20:46:34 <koz_> Probably, but it's a starting point. Thank you.
20:47:24 <koz_> It's because you need that specific signature you mentioned before, right? The ([a] -> b -> m a) -> [b] -> m [a] right?
20:47:31 <mniip> mapAccumM?
20:48:39 <koz_> mniip: The one from Conduit?
20:49:05 <mniip> no
20:49:08 <koz_> http://hackage.haskell.org/package/conduit-1.3.0.3/docs/Data-Conduit-List.html#v:mapAccumM <-- this?
20:49:53 <mniip>  https://downloads.haskell.org/~ghc/7.6.2/docs/html/libraries/ghc/MonadUtils.html#v:mapAccumLM
20:50:02 <mniip> this, but in a well-known package
20:50:03 <Solonarv> koz_: or (Proxy @a) with TypeApplications
20:50:08 <mniip> (as opposed to internal to GHC)
20:50:33 <mniip> which... I suppose
20:50:40 <mniip> % :set -package ghc
20:50:41 <yahb> mniip: package flags have changed, resetting and loading new packages...
20:50:50 <mniip> % import MonadUtils
20:50:50 <yahb> mniip:
20:54:48 <mniip> to think of it, I really only need iterateM
20:55:43 <koz_> :t iterateM
20:55:44 <lambdabot> error:
20:55:45 <lambdabot>     • Variable not in scope: iterateM
20:55:45 <lambdabot>     • Perhaps you meant one of these:
20:56:37 * hackage beam-core 0.7.2.2 - Type-safe, feature-complete SQL query and manipulation interface for Haskell  http://hackage.haskell.org/package/beam-core-0.7.2.2 (TravisAthougies)
20:57:03 <mniip> not the one in monad-loops even :/
20:57:46 <koz_> mniip: What's the signature you mean?
20:57:49 <koz_> (for iterateM)
20:58:19 <mniip> (a -> m a) -> Int -> a -> m a
20:58:31 <mniip> actually that can probably be achieved with iterate and >=>
20:59:20 <koz_> Well, such a thing exists, but I'm unsure if it has the semantics you want: http://hackage.haskell.org/package/zippers-0.2.5/docs/Control-Zipper-Internal.html#v:jerks
21:02:12 <mniip> here's something
21:02:38 <koz_> Complete with creative Edward naming.
21:02:54 <mniip> @let patterns = let result = ($ zeroBits) <$> iterate ((\r -> setBit r <$> filter (not . testBit r) [0 .. finiteBitSize (head $ head result) - 1]) >=>) return in result
21:02:56 <lambdabot>  Defined.
21:03:00 <mniip> :t patterns
21:03:01 <lambdabot> FiniteBits b => [[b]]
21:03:06 <mniip> > patterns :: [Word8]
21:03:08 <lambdabot>  error:
21:03:08 <lambdabot>      • Couldn't match type ‘[b0]’ with ‘Word8’
21:03:08 <lambdabot>        Expected type: [Word8]
21:03:13 <mniip> > patterns :: [[Word8]]
21:03:15 <lambdabot>  [[0],[1,2,4,8,16,32,64,128],[3,5,9,17,33,65,129,3,6,10,18,34,66,130,5,6,12,2...
21:03:53 <mniip> > drop 6 $ patterns :: [[Word8]]
21:03:55 <lambdabot>  [[63,95,159,63,111,175,95,111,207,159,175,207,63,95,159,63,119,183,95,119,21...
21:04:03 <mniip> > drop 7 $ patterns :: [[Word8]]
21:04:05 <lambdabot>  [[127,191,127,223,191,223,127,191,127,239,191,239,127,223,127,239,223,239,19...
21:04:10 <mniip> hmm that's not good
21:04:42 <mniip> ah
21:04:45 <mniip> because
21:06:35 <mniip> @undefined
21:06:35 <lambdabot> Undefined.
21:07:02 <mniip> @let patterns = ($ zeroBits) <$> iterate ((\r -> setBit r <$> filter (not . testBit r) [0 .. countTrailingZeros r - 1]) >=>) return
21:07:03 <lambdabot>  Defined.
21:07:11 <mniip> > patterns :: [[Word8]]
21:07:12 <lambdabot>  [[0],[1,2,4,8,16,32,64,128],[3,5,6,9,10,12,17,18,20,24,33,34,36,40,48,65,66,...
21:07:19 <mniip> should be unique now
21:07:46 <mniip> > drop 7 $ patterns :: [[Word8]]
21:07:48 <koz_> Grouped by popcount?
21:07:48 <lambdabot>  [[127,191,223,239,247,251,253,254],[255],[],[],[],[],[],[],[],[],[],[],[],[]...
21:07:55 <mniip> yes
21:08:04 <mniip> sorted ascending too
21:08:20 <koz_> So then I just take + drop as many as I need?
21:08:27 <mniip> I suppose
21:08:37 <koz_> Brilliant, thanks!
21:08:44 * koz_ now tries to make sense of what it's doing.
21:10:39 <mniip> here's a slight simplification because I'm an idiot
21:10:48 <mniip> iterate (>>= (\r -> setBit r <$> filter (not . testBit r) [0 .. countTrailingZeros r - 1])) [zeroBits]
21:12:23 <koz_> :t iterate
21:12:24 <lambdabot> (a -> a) -> a -> [a]
21:18:15 <koz_> :t join
21:18:16 <lambdabot> Monad m => m (m a) -> m a
21:19:37 * hackage beam-migrate 0.3.2.1 - SQL DDL support and migrations support library for Beam  http://hackage.haskell.org/package/beam-migrate-0.3.2.1 (TravisAthougies)
21:20:09 <koz_> mniip: My GHC is not thrilled about that second formulation - it claims that it can't deduce Bits and FiniteBits for r.
21:21:49 <koz_> Never mind, my bad.
21:25:13 <freeman42x]NixOS> is there a way to check Hoogle for an older version of ghc / libraries?
21:27:07 <Squarism> wierd. I get same results from : getStdRandom :: (StdGen -> (a, StdGen)) -> IO a
21:27:21 <Squarism> when invoked in a spock web server thread
21:27:45 <Squarism> I thought it would update the global IO stdgen
21:28:46 <Squarism> if there would be a new thread for every web request, and i invoke it once per request, would that be expected then?
21:29:45 <c_wraith> Squarism: the docs say it updates the global StdGen
21:29:52 <c_wraith> what are you seeing that says otherwise?
21:30:27 <c_wraith> the source says it does, too.
21:30:32 <Squarism> nowhere. But ive just done like 12 tries and get same randomization every time
21:30:48 <geekosaur> did you init the standard generator?
21:30:52 <c_wraith> how are you calling it?
21:31:33 <c_wraith> Squarism: well, it initializes with the same seed every time
21:31:49 <c_wraith> Squarism: https://hackage.haskell.org/package/random-1.1/docs/src/System-Random.html#theStdGen
21:35:02 <c_wraith> Squarism: oh!  are you like rolling a d6 every time or something?  because mkStdGen 0 is *awful*
21:35:51 <Squarism> c_wraith, how do you mean "how do i calling it". I call it in a web request (Spock framework based on WAI). liftIO $ getStdRandom $ \rand -> flip runState rand myStateValue
21:36:59 <Squarism> c_wraith, yeah i do quite a simple randomization. But if i enter the exact same code in ghci i get random numbers
21:37:43 <c_wraith> any chance myStateValue sets its final state to the same as its initial state?
21:38:18 <c_wraith> unrelated, (\rand -> flip runState rand myStateValue) is just (runState myStateValue)
21:39:16 <Squarism> thanks
21:39:22 <butterthebuddha> Is there a version of someTill that parses into Text instead of [Char] (given a Parser Char)?
21:39:30 <butterthebuddha> (for megaparsec)
21:39:31 <c_wraith> Squarism: obviously, that's not the problem. :)
21:39:43 <Squarism> i leveled anyhow =D
21:40:24 <Squarism> i wonder if global stdGen is unique per thread somehow
21:40:37 <Squarism> it atleast seems like that
21:40:44 <geekosaur> Squarism, exit and restart ghc each time
21:40:46 <geekosaur> ghci
21:41:11 <c_wraith> holy crap, there's no NOINLINE on theStdGen
21:41:47 <geekosaur> it's not like it reboots the runtime between prompts, whereas the seed is reinitialized (to a constant value) every time you run the program. or, show us how you're testing this
21:41:56 <c_wraith> Squarism: it's quite possible it actually is being inlined at the call site if you're compiling it with optimizations
21:42:19 <geekosaur> ooh
21:42:39 <geekosaur> (this is why global state is a bad idea in haskell)
21:42:55 <c_wraith> moral of this story: don't use getStdRandom
21:43:00 <c_wraith> just don't.  it's buggy. :)
21:43:04 <Squarism> hehe
21:43:30 <Squarism> c_wraith, not sure i get the implication of no NOINLINE ?
21:44:18 <geekosaur> [01 04:41:34] <c_wraith> Squarism: it's quite possible it actually is being inlined at the call site if you're compiling it with optimizations
21:44:18 <c_wraith> The "problem" is that GHC inlines rather aggressively.
21:44:37 <geekosaur> which means its' updating a private copy of the generator that lives at the call site, instead of the global one
21:44:39 <Squarism> geekosaur, i would love to show you how im testing this but Its a ton of code running up to the point its actually doing this
21:45:11 <c_wraith> If it inlines the call to getStdRandom, and then inlines theStdGen inside its definition, it will end up calling mkStdGen 0 every time you use getStdRandom
21:45:56 <c_wraith> global variables initalized in IO with an unsafePerformIO need to have a NOINLINE pragma on them to prevent that sort of thing.
21:46:07 <c_wraith> note:  unsafePerformIO is *unsafe*
21:46:08 <c_wraith> :)
21:46:17 <geekosaur> ahahah. I didn't look to see what it was actually doing. "oops"
21:46:21 <aryeh> glguy: wild, thanks
21:46:37 * hackage beam-sqlite 0.3.2.2 - Beam driver for SQLite  http://hackage.haskell.org/package/beam-sqlite-0.3.2.2 (TravisAthougies)
21:46:39 <geekosaur> although one could wonder if that was a "doctor, it hurts when I do this" about the global StdGen
21:47:13 <c_wraith> I think there should be a NOINLINE pragma on theStdGen.  But you should manage your random state yourself anyway.  :)
21:48:10 <Squarism> ok, so ill resort to create a more global StdGen that hopefully survies between invokations to this web service.
21:48:47 <Squarism> Im to green to get into the low-level details .
21:49:07 <geekosaur> don;t use global state like that, that's what gets you intop the low level details. manage it yourself so you know what it's doing
21:51:08 <Squarism> what i mean is that is that i must associate the thread handling web invokations a StdGen that can be passed to invokations of web request. Instead of hoping IO gives me a good one every time. Not good?
21:51:29 <c_wraith> Yeah..  use a sort of semi-global.  Instead of trying to make a global (IORef StdGen), just make it part of your application's state.  That should ensure it gets passed everywhere successfully.  And when you update it, everything that reads from it afterwards sees the update
21:51:56 <Squarism> yeah like that
21:52:22 <dmwit> What's wrong with the existing global StdGen available from getStdGen?
21:52:31 <dmwit> Forgive me if that's already been covered. I'm just joining.
21:52:33 <c_wraith> dmwit: it's not declared NOINLINE
21:52:57 <nshepperd> huh, i've never had issues with eg. sampling rvars in IO before
21:53:10 <nshepperd> though i have no clue if that uses the global stdgen
21:53:11 <nitrix> Is there literature of people researching visual programming for Haskell?
21:53:51 <dmwit> c_wraith: ouch
21:53:56 <dmwit> This is a bug that should be fixed.
21:54:04 <c_wraith> I think there's something going on specifically with getStdRandom
21:54:13 <c_wraith> Something that makes it happier to inline it
21:56:10 <c_wraith> dmwit: I agree.  But I also believe managing your random state yourself is superior anyway.  Makes it easier to do things like striping to deal with contention, or (if you make your api good) replacing the implementation if you need something with better properties than StdGen
21:56:19 <aryeh> glguy: I'm trying to understand what `x@InfixApp{}` means -- any guidance?
21:56:50 <c_wraith> aryeh: two different things going on there.  The @ in a pattern match, and the empty record match.
21:57:07 <c_wraith> aryeh: InfixApp{} matches the InfixApp constructor and ignores the arguments to it
21:57:19 <aryeh> Ah... gotcha'
21:58:05 <c_wraith> aryeh: x@(SomePattern) matches SomePattern and also binds the name x to the full match.  useful if SomePattern has parts you're ignoring.
22:11:02 <oldandwise> what's the difference between  'f :: a->b->a'  versus  'f :: a->a>a' ?
22:11:31 <oldandwise> typo, it's 'f :: a->a->a'
22:12:57 <geekosaur> each occurrence of a is the same type. b in the first means some other type
22:13:19 <geekosaur> hopefully there's some other constraint there, or about the only meaningful implementation is const
22:15:08 <oldandwise> geekosaur: what is an example operation that works between an integer and a string?
22:20:16 <koala_man> oldandwise: do you mean a function with type signature a->b->a that you can apply to integer and string, or any function that takes an integer and a string and returns something?
22:21:06 <butterthebuddha> oldandwise so there isn't always a meaningful operation between type a and type b
22:21:23 <butterthebuddha> but it also depends on what is being returned
22:21:49 <butterthebuddha> i.e. is the function "f :: Int -> String -> String", or is it "f :: Int -> String -> Int"
22:22:55 <butterthebuddha> There isn't a meaningful total function of either type, but "meaningful" can mean different things in different contexts
22:23:12 <oldandwise> butterthebuddha: i got confused, why the need to have two types, when in fact, no meaningful op can be done between an integer and a string
22:23:29 <butterthebuddha> oldandwise: why the need where?
22:23:37 <butterthebuddha> Can you provide more context?
22:23:43 <oldandwise> butterthebuddha: i'm staring a tutorial
22:24:00 <butterthebuddha> oldandwise: can you give me a link so that I can better understand what the question is
22:24:07 <oldandwise> f :: (a->b->a)->a->[b]->a
22:24:32 <oldandwise> it just folds an array of integers
22:24:44 <oldandwise> so i asked, why is there a b there?
22:24:53 <butterthebuddha> oldandwise: in the function?
22:25:01 <koala_man> oldandwise: an example would be   foldl (\i s -> i + length s) 0 ["hello", "world"]
22:25:07 <butterthebuddha> Because of the "[b]"
22:25:29 <butterthebuddha> To actually fold over the list, you have to be able to actually use the members of the lit
22:25:30 <butterthebuddha> list*
22:26:30 <elvishjerricco> Is the Cayley applicative on Hackage anywhere? `Curried` from kan-extensions is close, but it applies the applicative effects left associatively. https://www.irccloud.com/pastebin/6sbYYDo2/
22:27:38 <oldandwise> koala_man: tanx
22:27:51 <elvishjerricco> Maybe Curried should just be changed to do things right associatively? Most applicatives where associativity matters are faster when right associated.
22:28:25 <suzu> wonder when this channel will hit 1k users again
22:28:33 <oldandwise> koala_man: so, foldl is about numbers getting added, right?
22:28:55 <suzu> foldl is about collapsing "foldable" things into singular values
22:29:11 <suzu> you can add numbers with it but do other stuff too
22:29:33 <suzu> e.g. if you had a tree of numbers, you could sum those too. or get their product. or pairwise differences in some order
22:29:57 <oldandwise> ok.. got it now,..
22:30:09 <koala_man> oldandwise: foldl has the same type signature as your f, and I used it to sum the lengths of a list of strings. I can do that because the accumulator can be integer while it processes a list of string -- i.e. two different types
22:30:49 <koala_man> if it only had (a->a->a)->a->[a]->a then the accumulator would have to be of the same type as the list
22:31:55 <oldandwise> koala_man: is there a situation, that foldl won't complete because of an exception for example?
22:32:10 <suzu> you get to choose one type for all the `a`s and one type for all the `b`s (your choice can be the same for both)
22:32:57 <suzu> it could not complete if, say, you had a value of `undefined` somewhere in there
22:33:00 <oldandwise> koala_man: and can we decrement the accumulator from within the lambda?
22:33:21 <suzu> and that `undefined` is evaluated
22:34:25 <oldandwise> suzu: so the accumulator will contain an incomplete sum?
22:34:47 <suzu> no - your program will crash.
22:35:07 <parth_> hey has anyone used Network.Mail.SMTP
22:35:27 <parth_> having trouble getting it to send mail through gmails smtp
22:35:29 <oldandwise> suzu: ok.. can we then know, the last value of the accumulator so i can write to a log file?
22:35:53 <suzu> you could use `scanl` for that
22:36:05 <suzu> but that is a strange question and makes me ask: what are you really trying to do?
22:36:10 <koala_man> oldandwise: yes and no. mostly no. there are different ways of processing functions that have a notion of failure
22:36:49 <suzu> @t scanl
22:36:50 <lambdabot> Maybe you meant: tell thank you thanks thesaurus thx tic-tac-toe ticker time todo todo-add todo-delete type v @ ? .
22:37:53 <suzu> > scanl (+) 0 [1,2,3,4]
22:37:56 <lambdabot>  [0,1,3,6,10]
22:38:28 <suzu> ^ summing the list, with the successive results as we go
22:49:28 <butterthebuddha> When was part 6 of artyom kazak's lenses over tea published?
22:49:37 * hackage beam-postgres 0.3.2.2 - Connection layer between beam and postgres  http://hackage.haskell.org/package/beam-postgres-0.3.2.2 (TravisAthougies)
22:54:00 <ZeuPiark> hello
22:55:11 <c_wraith> hi ZeuPiark
22:55:36 <c_wraith> wait, only 489 people in here?  Was there a netsplit?
22:56:22 <kaol> c_wraith: See topic.
22:56:33 <c_wraith> kaol: ah, ok.  thanks
22:56:53 <c_wraith> I guess that means roughly 1000 people idle here and don't even realize they were kicked. :)
22:57:38 <suzu> yep
23:25:42 <koz_> Does the example for defining new unboxed vectors here: https://hackage.haskell.org/package/vector-0.12.0.1/docs/Data-Vector-Unboxed.html assume any imports or LANGUAGE pragmas?
23:27:16 <c_wraith> koz_: absolutely.  you need TypeFamilies to declare a type instance
23:28:01 <c_wraith> koz_: probably more things too, but I'd wait until the compiler complains before worrying about what I missed.
23:28:22 <koz_> c_wraith: Yeah, I added that. However, I'm having trouble with the 'instance MVector MVector ...' part. If I imported Data.Vector.Unboxed qualified with V, should those declarations be 'instance V.MVector V.MVector ...' ?
23:28:28 <koz_> Oh, GHC is already complaining.
23:28:59 <c_wraith> well, it's a MPTC.  Do you need that just to create an instance of one?  I don't remember.
23:29:28 <koz_> c_wraith: I dunno - I'm just trying to follow that example.
23:29:43 <koz_> Mine isn't parameterized - I'm declaring an instance for a type with only 3 inhabitants.
23:36:31 <c_wraith> koz_: if you're doing something different and getting errors...  I can't really help with that info. :)
23:36:51 <koz_> c_wraith: One sec, pasting.
23:38:29 <koz_> https://lpaste.net/7278718004660011008 <-- here
23:40:14 <c_wraith> koz_: oh, I see.  the MVectors in the example are actually different types
23:40:28 <koz_> Oh, OK. Which type(s) do they refer to?
23:40:49 <c_wraith> koz_: the class is from Data.Vector.Generic.Mutable  the type is from Data.Vector.Unboxed
23:41:04 <c_wraith> koz_: if you mouse over them in the example, it shows the module each was imported from
23:41:23 <koz_> Ah, I see. Thanks!
23:41:28 * koz_ goes and does more importing.
23:42:32 <Squarism> c_wraith, geekosaur : have to excuse me, but again it was the man writing the code who error'd not that which executed it. Sets are still not ordered.
23:55:15 <koz_> c_wraith: This is so much fun, lol.
23:55:19 <koz_> (without a trace of irony)
23:55:29 <koz_> O
23:55:32 <koz_> O
23:55:49 <koz_> I'm unsure whether writing basicUnsafeNew = GM.basicUnsafeNew is correct, though.
23:56:11 <koz_> Basically I want to say that 'to make an MVector of Trits, just make an MVector of Word8 of the same size.
23:56:14 <koz_> '
23:56:48 <c_wraith> As long as the types are right, that looks good then
23:56:54 <koz_> Oh, great.
23:57:01 <koz_> Haskell, like friendship, is magic.
