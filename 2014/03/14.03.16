00:02:00 <erisco> tried re-installing... still not there :(
00:06:21 <erisco> the installation log did not list that module at all
00:06:30 <erisco> but it is shown on the generated docs
00:06:30 <erisco> (on hackage)
00:06:55 <erisco> and it says it should be in that package http://hackage.haskell.org/package/reactive-banana-0.8.0.0/docs/Control-Event-Handler.html#t:AddHandler
00:10:34 <erisco> naturally I seem to be the only one in the world with this problem
00:11:14 <erisco> is there some cache I can flush?
00:18:39 <erisco> ohh right... ghcjs has a different database
00:18:40 <erisco> whoops
00:38:39 <Actreka> How come there is a floor function but no ceil function in the Prelude?
00:39:32 <Actreka> Obviously I could just add one too the number I want to ceil and floor it instead, but why wouldn't they include that as a function?
00:40:32 <conehead> > ceiling 4.2 -- Actreka
00:40:33 <lambdabot>  5
00:47:34 <haasn> > ceiling 4 == floor (4+1) -- Actreka
00:47:35 <lambdabot>  False
01:18:57 <xpika> im getting the error from cabal: ambiguous package name "it was found in multiple packages: gtk-0.12.5.6 gtk3-0.12.5.6". How do i hide gtk3?
01:22:30 <enthropy> xpika: are you paraphrasing a linker error?
01:23:41 <enthropy> anyways, when I've tried to make a package using gtk and gtk3 at the same time, the linker complains about duplicate symbols
01:24:06 <enthropy> which can be fixed by updating everything to use gtk3
01:24:59 <xpika> heres the full error
01:25:00 <xpika> http://lpaste.net/101269
01:25:24 <xpika> i know i can specify it in a cabal file, but its a bit tedious.
01:30:37 <enthropy> you can make one of them hidden by default with  ghc-pkg --hide-package gtk # or something like that
01:36:45 <Actreka> haasn: Oh, I didn't think about that. Now my stuff works :)
01:38:21 <xpika> enthropy: thanks!
01:42:00 <xpika> ok now im getting the error: Library not loaded: /opt/local/lib/libgtk-x11-2.0.0.dylib
02:08:54 <jle`> what's the best way to map over either the Left or the Right of an either?
02:08:59 <jle`> sort of like a...double functor?
02:09:39 <supki> :t bimap
02:09:40 <lambdabot> Bifunctor p => (a -> b) -> (c -> d) -> p a c -> p b d
02:14:26 <jle`> supki: thanks
02:14:33 <jle`> hm
02:15:08 <jle`> also, wish there was an `either (const Nothing) Just` in the standard library somewhere
02:16:56 <jle`> how come all the cool mathsy packages are by edwardk
02:32:44 <haasn> jle`: preview _Right
02:32:49 <haasn> :t preview _Right
02:32:50 <lambdabot> MonadReader (Either c b) m => m (Maybe b)
02:55:25 <mniip> is there a function to Maybe-index a list? Something that returns Nothing if the index is out of bounds
02:55:31 <mniip> hoogle returns nothing
02:58:04 <copumpkin> mniip: if you use lens there is
02:58:16 <copumpkin> > [1,2,3] ^? ix 2
02:58:18 <lambdabot>  Just 3
02:58:19 <copumpkin> > [1,2,3] ^? ix 4
02:58:21 <lambdabot>  Nothing
02:58:23 <mniip> Nope, am not
03:01:48 <Hafydd> hoogle returns Nothing
03:03:13 <dwat3r> hi guys,i was trying to install cuda package with cabal,but i ran into an error: http://pastebin.com/q75UuZym
03:12:33 <Fuuzetsu> dwat3r: Looks like you'll have to contact the maintainer and ask him to fix it up.
03:13:53 <Fuuzetsu> dwat3r: https://github.com/tmcdonell/cuda/issues/7
03:16:35 * hackagebot chain-codes 0.3.0.0 - Library decoding chain codes from images  http://hackage.haskell.org/package/chain-codes-0.3.0.0 (MateuszKowalczyk)
03:36:12 <dwat3r> thx Fuuzetsu, it looks like it hasnt solved yet..
03:37:05 <Fuuzetsu> I'm sure you could provide some useful info for him so at least he doesn't think it's something wrong with one person's setup
03:39:16 <LambdaDusk> when making a library with OpenGL, what is the best option for including test suits? mostly they'll be IO things
03:40:37 <Iceland_jack> LambdaDusk: You can test IO actions with QuickCheck
03:42:38 <LambdaDusk> Iceland_jack: and test suites like HTF etc? is that a good idea?
03:47:02 <johannesbodannes> Where's the correct place to stick native libraries that some haskell modules depend on for GHC?
03:47:08 <johannesbodannes> on windows, sorry
03:48:15 <johannesbodannes> it's insane how many redundant versions of the GCC there are on my installation
03:48:38 <merijn> johannesbodannes: You mean libraries that haskell packages depend on?
03:48:43 <johannesbodannes> yes sorry
03:49:15 <merijn> johannesbodannes: cabal has --extra-include-dirs and --extra-lib-dirs to specify paths for libraries when installing
03:49:34 <johannesbodannes> oh! so i can even freely specify libraries in my cabal installation?
03:49:37 <johannesbodannes> err
03:49:42 <johannesbodannes> cygwn
03:49:45 <johannesbodannes> cygwin
03:49:57 <merijn> johannesbodannes: You can just pass those flags to "cabal install"
03:50:29 <merijn> I think the ~/.cabal/config lets you specify more permanent directories too
03:50:30 <johannesbodannes> is there some universal configuration somewhere that i can tweak to include certain library directories automatically?
03:50:33 <johannesbodannes> ah
03:50:34 <johannesbodannes> great
03:50:54 <johannesbodannes> awesome, thank you
03:51:10 <johtso> hmm, I have a program that takes stdin, iterates over lines, and produces lines on stdout. I'm struggling to get things working so that I can use pipe viewer (pv) to have a progress bar. I think this may be due to some kind of buffering, but I'm not sure exactly what I need to do.
03:51:42 <johtso> I'm running the program like so "pv inputfile | ./Main > /dev/null"
03:52:35 <johtso> I've also tried setting the buffering mode explicitly http://lpaste.net/6980541055481413632
03:53:04 <merijn> Isn't the problem that you're redirecting output to dev/null? (Note: I have no idea how pv works)
03:54:01 <johtso> merijn, pipe viewer outputs the progress bar on stderr
04:20:20 <Tunnicliffe> Hello, could someone recommend a book for learning Haskell to me? I don't have much knowledge of the inner workings of computers or other programming languages, but I do have a degree in Mathematics. I tried 'Learn You a Haskell..' and it was good for the basics, but I'd like to learn the harder concepts in the language from more rigorous mathematical angle, instead of a practical example based one. Any ideas? Thanks
04:21:09 <SaBer> Tunnicliffe: have you looked at typeclassopedia
04:21:23 <SaBer> Tunnicliffe: http://www.haskell.org/haskellwiki/Typeclassopedia ?
04:22:08 <Axman6> Tunnicliffe: you could also talk for hours to ekmett when he's about
04:22:38 <Tunnicliffe> SaBer: I hadn't heard of that yet. It looks very helpful, thank you
04:23:05 <merijn> hmm, you can't have lines starting with # in literate haskell files?
04:23:21 <Heffalump> for hard copy books, Bird's Introduction to Functional Progamming [in/using] Haskell is good
04:23:36 <Heffalump> has a relatively mathematical standpoint, that is
04:23:41 <merijn> Is that documented anywhere?
04:24:20 <Iceland_jack> merijn: Isn't that for the proprocessor?
04:24:48 <Tunnicliffe> Heffalump: Looks good too, thank you
04:24:52 <merijn> Iceland_jack: Why would the compiler try to preprocess comments?
04:25:27 <Iceland_jack> Maybe it's run before the literate part is parsed
04:26:05 <Heffalump> merijn: do you have CPP enabled?
04:26:12 <merijn> Heffalump: No
04:26:52 <Heffalump> what kind of literate haskell are you using, Bird tracks (>) or TeX (\begin{code]) ?
04:29:02 <merijn> Heffalump: Doesn't matter
04:43:58 <klrr_> is there any function with this type signature: (a -> b -> c) -> (a, b) -> c, hoogle got me uncurry but not really sure how i should make the function evaluate after the application
04:44:48 <Iceland_jack> > uncurry (+) (5, 10)
04:44:49 <lambdabot>  15
04:45:21 <peteretep> klrr_: uncurry looks right to me; what's confusing you there?
04:45:26 <augur_> klrr_: there is, in fact, exactly _one_ function with that type signature :)
04:45:50 <merijn> augur_: Lies
04:46:00 <merijn> augur_: I can think of at least three
04:46:09 <augur_> merijn: oh? do tell.
04:46:51 <klrr_> oh, thanks
04:47:02 <augur_> @djinn (a -> b -> c) -> (a,b) -> c
04:47:02 <lambdabot> f a (b, c) = a b c
04:47:07 <merijn> augur_: 4 even! uncurry f (x, y) = f x y; uncurry _ _ = undefined; uncurry _ = undefined; uncurry = undefined
04:47:14 <klrr_> i was confused by the parantheses
04:47:17 <augur_> merijn: shhhh
04:47:21 <augur_> merijn: undefined is no fair
04:47:28 <klrr_> > putStrLn "test"
04:47:29 <lambdabot>  <IO ()>
04:47:30 <merijn> Actually, even more than 4!
04:47:39 <augur_> merijn: i reject your undefinedness
04:47:47 <merijn> uncurry f (x, y) = f x undefined; uncurry f (x, y) = f undefined y
04:48:02 * augur_ thwaps merijn
04:48:13 <klrr_> :t uncurry (\x y -> putStrLn $ x ++ y) ("hello","yo")
04:48:14 <lambdabot> IO ()
04:48:17 <klrr_> yay
04:48:19 <klrr_> thanks!
04:49:08 <augur_> haskell should be purer
04:49:13 <augur_> no more undefined
04:49:17 <kqr> aren't there other languages for that?
04:49:19 <FreeFull> merijn: undefined x y
04:49:26 <augur_> kqr: purerity?
04:49:37 <kqr> augur_, more pureriityness
04:49:51 <peteretep> Can you use "error" where "undefined" was used in those cases?
04:49:59 <augur_> agda is purer. there are no undefineds in agda.
04:50:08 <kqr> peteretep, yup
04:50:11 <augur_> peteretep: yes, undefined = error "undefined"!
04:50:15 <augur_> or something close to that
04:50:20 <merijn> peteretep: error and undefined are identical in terms of haskell semantics
04:50:34 <augur_> im pretty sure undefined is just an error value
04:50:38 <merijn> peteretep: If haskell had no bottom terms (like undefined) it couldn't have error either
04:50:53 <peteretep> merijn: I had never thought of it like that
04:50:53 <FreeFull> > undefined
04:50:54 <lambdabot>  *Exception: Prelude.undefined
04:50:55 <augur_> i just wish haskell exposed its errors rather than leave them in the background
04:51:15 <peteretep> I use "error" a lot when developing as a place holder
04:51:18 <augur_> merijn: is that true? surely not
04:51:30 <augur_> oh well, i guess it depends on what you mean by errors.
04:51:51 <merijn> augur_: IF haskell has no bottom terms, it can't have error (as in the prelude function) either, as that is bottom by definition
04:51:54 <augur_> peteretep: i just use undefined. sometimes when im bored ill use fake holes
04:52:01 * hackagebot optparse-applicative 0.8.0 - Utilities and combinators for parsing command line options  http://hackage.haskell.org/package/optparse-applicative-0.8.0 (PaoloCapriotti)
04:52:27 <adek> j #ghc-mod
04:52:32 <augur_> merijn: what i eman is, you could just use `Error a b` everywhere instead of letting it be silent
04:52:38 <merijn> peteretep: In fact, total languages like Coq/Agda don't have bottom terms, as a result they're strongly terminating (i.e., they always terminate, so there's no halting problem)
04:52:51 <merijn> peteretep: The "downside" is of course that you sacrifice Turing completeness to get there
04:53:01 <merijn> peteretep: But even without Turing completeness you can still do a lot!
04:53:04 <augur_> merijn: no you dont
04:53:14 <augur_> you dont sacrifice TCness, you just use codata to get it!
04:53:21 <merijn> augur_: Shush :p
04:53:25 <Redz> :t (compare `on`)
04:53:26 <Redz> :t comparing
04:53:26 <lambdabot> Ord b => (a -> b) -> a -> a -> Ordering
04:53:26 <lambdabot> Ord a => (b -> a) -> b -> b -> Ordering
04:53:38 <augur_> merijn: not that we really have an intuitive way of handling codata yet
04:54:31 <adek> Okay, there is no ghc-mod channel. Has anyone idea if I can make ghc-mod work with cabal sandboxes? When I try ghc-mod <something> I end up with -package yesod not found, because I have yesod installed only in sandbox, not in global
04:55:06 <Actreka> Is it considered safe to utilize a shit-ton of packages from cabal?
04:55:08 <merijn> adek: I'm not sure you can atm
04:56:59 <adek> I see. I remember that some people even advice against using cabal repl, but to do some magic incantations with ghci to have shell and packages loaded from sandbox. I guess I can try to dive into ghc-mod code and figure out if this is somehow doable.
04:59:02 <merijn> Any language lawyers know if the 2010 report restricts filenames and if so in which section?
05:04:27 <hpc> merijn: what kind of restrictions?
05:05:14 <hpc> i imagine if it's unicode, the language doesn't care so long as the filesystem can handle it
05:05:56 <merijn> hpc: How filenames map to module names
05:06:02 <merijn> or module names to filepaths
05:06:24 <hpc> ah
05:06:30 <merijn> I know GHC uses module "Foo.Bar" maps to "Foo/Bar.hs", but this does not seem to be required by the report
05:06:42 <hpc> ah
05:07:10 <merijn> Basically, I have a proposal for changing some details, so if it's in the report this would probably be a haskell-prime proposal. If the report leaves it unspecified I guess it's just a GHC proposal
05:07:30 <merijn> But I'm a bit unsure which mailing list to address :)
05:08:02 <hpc> http://www.haskell.org/onlinereport/haskell2010/haskellch5.html#x11-980005 -- the module section of the report
05:08:04 <Heffalump> there was an addendum to the '98 report to add hierarchical modules
05:08:12 <Heffalump> which then got incorporated into H2010
05:08:17 <merijn> hpc: Yes, I already scanned that a few times
05:08:24 <merijn> hpc: Seems to be no mention?
05:08:46 <Heffalump> but I'm not certain if it specified filesystem mappings or not
05:09:04 <hpc> yeah, no mention
05:09:36 <hpc> given past tendencies to dogedly avoid saying anything that isn't absolutely necessary for program semantics, it's probably not in there
05:09:53 <hpc> and that's the chapter it would be in
05:09:59 <Heffalump> I found a draft of the addendum with google that explicitly says it doesn't specify the mapping from module names to the filesystem
05:10:02 <merijn> hpc: Which makes interoperability basically impossible >.>
05:10:09 <Heffalump> ftp://91.193.236.10/pub/docs/linux-support/programming/Haskell/%D0%94%D1%83%D1%88%D0%BA%D0%B8%D0%BD%20-%20%D0%A4%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D0%BE%D0%BD%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D0%B5%20%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%20%D1%8F%D0%B7%D1%8B%D0%BA%D0%B5%20Haskell%20-2005/%D0%A1%D0%BE%D0%B4%D0%B5%D1%80%D0%B6%D0%B0%D0%BD%D0%B8%D0%B5%20CD%20%D0%B4%D0%B8%D1%81%D0%BA%D0%B0/CD
05:10:27 <merijn> Because it means no haskell code can rely on any compilers understanding it's organisation
05:10:29 <hpc> (also unicode filenames do work! just tried with Σ.hs)
05:10:31 <Adeon> I don't like that URL
05:10:48 <Heffalump> neither do I, but it's the one I found :-)
05:11:39 <hpc> i like how every part of it is >127 except for the mandatory space escapes and "haskell -2005"
05:18:02 <Geraldus_RU> Hello buddies! I had troubles with GHC 7.8 and PCRE-LIGHT, which rejected to install. I've resolved the issue, but I can't find repository of pcre-light, how can I share my solution with others?
05:21:37 <klrr_> in pipes is there a way to await two messages concurrently? like, i want to await a message from upstream and one from a IO source which is local to the Pipe, then i want to push downstream the one i recieve first and then start over, anyone know how to do this?
05:25:31 <c_wraith> klrr_: did you check pipes-concurrency?
05:26:44 <Fuuzetsu> Geraldus_RU: hm? pcre-light is on hackage, right at http://hackage.haskell.org/package/pcre-light
05:27:22 <Fuuzetsu> if patches is what you want to add to it, you'll probably have to e-mail the maintainer for that one
05:27:56 <bennofs> is do { let; return () }   valid haskell?
05:28:04 <bennofs> > do { let; return () } :: Maybe ()
05:28:05 <lambdabot>  <hint>:1:21: parse error on input `}'
05:28:16 <Geraldus_RU> Fuuzetsu: I've tried, Google say that email is unreachable (
05:28:58 <bennofs> > do { let {}; return () } :: Maybe ()
05:28:59 <lambdabot>  Just ()
05:29:14 <Iceland_jack> > True {}
05:29:15 <lambdabot>  True
05:29:43 <Fuuzetsu> Geraldus_RU: see http://donsbot.wordpress.com/about/ for some contact
05:29:56 <skypers> @hoogle intersectionWith (,)
05:29:57 <lambdabot> Data.Functor.Reverse getReverse :: Reverse f a -> f a
05:29:57 <lambdabot> Control.Applicative.Backwards forwards :: Backwards f a -> f a
05:29:57 <lambdabot> Control.Applicative unwrapMonad :: WrappedMonad m a -> m a
05:30:26 <Geraldus_RU> Fuuzetsu: thabks!
05:33:31 <Geraldus_RU> Hey friends, I have issue with postgresql-simple installation with GHC 7.8: ghc: panic! (the 'impossible' happened) Prelude.(!!): index too large. How can I resolve this?
05:35:12 <Fuuzetsu> Geraldus_RU: check on GHC Trac for the problem and if it doesn't exist yet, report it
05:35:17 <Fuuzetsu> you could also try asking on #ghc
05:35:35 <Fuuzetsu> (I remember a ticket for this but I think it was solved before RCs
05:35:36 <Fuuzetsu> )
05:37:44 <klrr_> c_wraith: yes, that is what i struggle with
05:37:59 <klrr_> i currently have "server :: Pipe Message Message IO ()"
05:38:21 <klrr_> i want it to concurrently await messages from upstream AND a internal IO source
05:38:36 <klrr_> but im not sure how i can use "await" concurrently
05:39:22 <klrr_> im not sure how i can use forkIO on the await without using runEFfect
05:39:44 <mietek> @hoogle String -> AttributeValue
05:39:44 <lambdabot> Warning: Unknown type AttributeValue
05:39:45 <lambdabot> Prelude error :: [Char] -> a
05:39:45 <lambdabot> Debug.Trace trace :: String -> a -> a
05:39:56 <mietek> http://haddocks.fpcomplete.com/fp/7.4.2/20130829-168/blaze-markup/Text-Blaze-Internal.html#v:stringValue
05:40:18 <mietek> Is there a recommended way of constructing an AttributeValue?
05:41:10 <klrr_> okey this code makes no sense but it maybe clarify what i try to do: https://gist.github.com/klrr/24308aaa587d9d6332cb
05:42:42 <Geraldus_RU> Fuuzetsu: I've found the solution, can you help and explain how to apply this fix? Should I clone the postgresql-simple and manually apply fix and then `cabal install`?
05:44:16 <Fuuzetsu> you could do that; you could also use ‘cabal unpack’ no fetch the version that's on Hackage which is what you probably found the fix to.
05:44:37 <Fuuzetsu> also check whether the git version from https://github.com/lpsmith/postgresql-simple is also broken and make a pull request if it is
05:44:58 <Fuuzetsu> s/no fetch/to fetch/
05:48:55 <Geraldus_RU> Fuuzetsu: Sorry, but I have no enough knowledge (skills) to resolve this problem myself
05:50:42 <Fuuzetsu> mietek: there are a bunch of functions that can net you an AttributeValue at http://haddocks.fpcomplete.com/fp/7.4.2/20130829-168/blaze-markup/Text-Blaze.html
05:50:52 <Fuuzetsu> you shouldn't really be looking at .Internal modules
05:52:17 <Geraldus_RU> Fuuzetsu: can you help?
05:52:42 <Fuuzetsu> Geraldus_RU: You're free to ask questions, if someone knows (including me), they might help. I don't want to commit to something without knowing the question.
05:53:21 <Fuuzetsu> if it is on how to apply the fix, I already said that what you suggest should work
05:55:05 <Geraldus_RU> Here is the solution for this issue (https://ghc.haskell.org/trac/ghc/changeset/312686c172eefb74237c8a61e2cca1b2af7459c1/ghc) but I can't find that files in source folder of postgresql-simple (
05:57:22 <skypers> is Repa GPU-accellerated?
05:59:01 <k00mi> no, accelerate is
05:59:15 <Fuuzetsu> use accel… beat to it
05:59:38 <skypers> accelerate?
05:59:43 <skypers> @hoogle accelerate
05:59:43 <lambdabot> package accelerate
05:59:43 <lambdabot> package accelerate-cuda
05:59:43 <lambdabot> package accelerate-examples
05:59:45 <skypers> oh
05:59:49 <skypers> sounds great
05:59:51 <skypers> thank you :)
06:00:07 <skypers> do you know whether it’s suitable for video games applications?
06:00:13 <skypers> or is it still experimental?
06:00:20 <Fuuzetsu> IIRC there is some stuff on it in Simon M's book so it might be worthwhile checking that out (the book is good anyway so read it)
06:01:41 <skypers> and hm, if I want CUDA, I have to use accelerate-cuda?
06:01:43 <Geraldus_RU> I have GHC panic when trying to install postgresql-simple with GHC 7.8, here is the solution (https://ghc.haskell.org/trac/ghc/changeset/312686c172eefb74237c8a61e2cca1b2af7459c1/ghc), can someone explain to me how to apply this solution?
06:01:57 <peteretep> what is a fake hole?
06:02:17 <Fuuzetsu> Geraldus_RU: get a newer GHC
06:02:26 <Qfwfq> What Magicks need I perform to get hmatrix building on Mavericks/with clang?
06:02:35 <c_wraith> Geraldus_RU: GHC 7.8 isn't released yet because it still has bugs
06:02:37 <Redz> cuda only sounds bad.
06:02:37 <Fuuzetsu> I'm pretty sure this should be in RC-2 but if not, RC-3 is coming out like yesterday
06:02:42 <skypers> Redz: why?
06:02:58 <Geraldus_RU> Fuuzetsu: oh, thanks )
06:03:24 <Geraldus_RU> c_wraith: I'm using 7.8 because of GHCJS
06:03:44 <Redz> skypers: because not everyone has a nvidia card.
06:03:55 <merijn> Geraldus_RU: That's not possible, considering 7.8 has not been released. Presumably you're using one of the release candidates
06:04:00 <c_wraith> Geraldus_RU: my point was just that lots of stuff still has issues with it.
06:04:06 <merijn> Redz: CUDA is the only sensible approach if you care about performance
06:04:11 <merijn> Redz: OpenCL is pathetic
06:04:17 <skypers> oh?
06:04:22 <skypers> why so pathetic merijn ?
06:05:06 <merijn> skypers: OpenCL doesn't expose a lot of the primitives you want/need for high performance GPGPU computing
06:05:17 <Geraldus_RU> merijn: My version is 7.8.20140130
06:05:34 <skypers> I see
06:05:38 <luite> Geraldus_RU: get rc2, 20140228 or newer
06:05:51 <Redz> i wish opencl would be a bit nicer. it was a mess to get it running.
06:06:37 <Geraldus_RU> luite: Thank you for your support! I've heard that RC-3 released yesterday, will try it out! )
06:06:49 <merijn> I wish someone would actually implement OpenCL 2.0 already, the ability to dynamically spawn new kernels from the GPU would be nice
06:08:37 <Redz> if i want to write my own realtime graphics lib, what should i use?
06:09:41 <skypers> Redz: I’m using OpenGL
06:10:05 <skypers> but I’m wondering whether it would be a better idea using full paralellism solutions
06:10:08 <skypers> like CUDA, or OpenCL
06:10:22 <merijn> The answer: probably not
06:10:23 <skypers> I think in a near future, OpenGL and DirectX won’t be that great
06:10:35 <merijn> Why would you think that?
06:10:46 <skypers> they’re juste a specialized use of what you can do with CUDA
06:10:52 <skypers> just*
06:10:58 <Redz> opengl doesnt support the stuff i need.
06:11:04 <skypers> what do you need?
06:11:09 <merijn> haskell is just a specialised use of what you can do with asm
06:11:10 <Shammah_> OpenCL sounds great in theory, but each time it appeared be less performant than hardware specific solutions like CUDA
06:11:16 <Shammah_> *to be
06:11:39 <skypers> not really merijn
06:11:40 <Redz> quadratic curve faces.
06:11:48 <merijn> skypers: Eh, yes really
06:11:49 <skypers> it’s not the same scale
06:12:04 <skypers> OpenGL has a lot of restrictions
06:12:07 <skypers> whereas CUDA doesn’t
06:12:19 <merijn> skypers: I think you may be underestimating the amount of work it is to reimplement your own OpenGL in terms of OpenCL...
06:12:40 <skypers> I know that, merijn
06:12:45 <skypers> and I’m not saying that
06:12:57 <skypers> if I move my 3D engine from OpenGL to OpenCL
06:13:07 <skypers> there won’t be any rasterizers at all
06:13:16 <skypers> it’d be for realtime path tracing
06:13:36 <skypers> http://www.youtube.com/watch?v=abqAanC2NZs
06:13:39 <skypers> here an idea ;)
06:17:23 <mr-> snowy ;-P
06:18:39 <skypers> it’s due to the BRDF lighting model
06:18:43 <skypers> it’s still quite impressive
06:20:57 <Redz> well i try accelerate and accelerate-opencl i think.
06:21:38 <skypers> I’ll try those later as well
06:21:41 <skypers> they sound great
06:22:02 <skypers> the single issue with Khronos techs to me is they’re really poor API
06:22:09 <tapuu> Are there any libraries providing a high-level wrapper over asynchronous event systems (epoll, kqueue, etc.)?
06:22:25 <skypers> for instance in OpenGL, the symbol “GL_RED” could be used as a buffer bind parameter
06:22:33 <skypers> which makes absolutely no damned sense
06:23:04 <skypers> and I think it’s the same issue in OpenCL :(
06:24:35 <mietek> Fuuzetsu: thanks
06:25:13 <mietek> @hoogle EpochTime -> String
06:25:13 <lambdabot> Prelude show :: Show a => a -> String
06:25:14 <lambdabot> Text.Show show :: Show a => a -> String
06:25:14 <lambdabot> Test.QuickCheck.Text showErr :: Show a => a -> String
06:27:38 <Redz> skypers: opencl is even worse. i also considered to use openvg but its bad too.
06:27:52 <skypers> arf…
06:27:56 <skypers> what a pity
06:28:06 <skypers> I’ll keep using OpenGL then
06:32:13 <Fuuzetsu> Geraldus_RU: it didn't release, I was half-joking
06:32:17 <Fuuzetsu> you can get rc2 though
06:33:09 <bergey> tapuu: maybe http://hackage.haskell.org/package/fsnotify
06:33:47 <tapuu> bergey: will this work for sockets?
06:34:01 <bergey> Don't know, haven't used it
06:34:11 <tapuu> thanks anyway
06:35:24 <darthdeu> guys is there a way to somehow keep packages pre-installed for the cabal sandbox to be used, so that it odesn't re-download and recompile things every time I switch to a new project?
06:35:30 <Geraldus_RU> How can I install RC-2 with brew on OS X?
06:38:04 <Actreka> What is going wrong in this function: let diff :: (Num a) => [a] -> a -> a -> a; diff [] _ _ = 0; diff list x y = (list !! (y-1)) - (list !! (x-1))
06:38:17 <Actreka> I'm trying to get the difference between to elements in a list
06:39:04 <vanila> why are using x-1 and y-1 rather than just x and y?
06:39:13 <ClaudiusMaximus> :t (!!)
06:39:14 <lambdabot> [a] -> Int -> a
06:39:17 <Rarrikins> Why do you have something for [] but not for other overruns?
06:39:37 <Actreka> vanila: I want it to not be zero indexed for convenience
06:39:43 <Rarrikins> The function isn't exactly recursive.
06:40:01 <peteretep> s/exactly/at all/
06:40:14 <Actreka> I'm very new to this so it may be a horrible looking function :(
06:40:26 <peteretep> Actreka: What does your function do, in English?
06:41:06 <Actreka> It takes a list of numbers and two numbers (x and y) then finds the difference between element x and y
06:41:42 <peteretep> And what's the error you get?
06:42:27 * peteretep .,oO( diffAt might be a better name )
06:42:29 <vanila> zero index is more convenient
06:42:43 <Actreka> Seems like a type error and something about the arguments (y-1) and (x-1) Im not entirely sure
06:42:52 <Actreka> vanila: Maybe not for end users like my grandma
06:43:00 <peteretep> "something about arguments" suggest "something might be wrong"
06:43:04 <hvr> ...is it normal that "darcs get http://code.haskell.org/~ross/transformers" takes "forever"?
06:43:26 <Fuuzetsu> I thought it was pretty normal for darcs to take forever ;^)
06:44:09 <Actreka> peteretep: Here is the full error-message: http://lpaste.net/101274
06:44:10 <MagneticDuck> oor darcs
06:44:17 <MagneticDuck> *poor
06:44:19 <MagneticDuck> =P
06:44:35 <Fuuzetsu> is darcs asking for slots in GSOC this year?
06:44:50 <hvr> I've got a checkout of transformers, which seems to hang for >1 hour when I try to "darcs pull" and doesn't seem to make any progress
06:44:54 <peteretep> Actreka: :t (!!)
06:44:56 <merijn> carter: Well, one of the reasons I want GHC to support the .*.lhs format is because otherwise I'll have to manually rename my pandoc lhs files before I can pass them to GHC
06:45:01 <peteretep> Actreka: If you type that in to ghci
06:45:14 <peteretep> Actreka: It'll tell you what types (!!) want
06:45:32 <merijn> carter: I agree that a textual marker would be nice, but not all documents have an existing way to detect them properly, so it'd be nice to have extensions as a backup
06:45:51 <peteretep> "Could not deduce (a ~ Int)" is pronounced "You seem to think that a is an Int, but you haven't constrained it to be"
06:47:52 <Actreka> What is the practical meaning of this: "`Int' is applied to too many type arguments"
06:48:25 <Rarrikins> Actreka: What type did you put?
06:48:28 <tapuu> Is there a way for me to block on reading from 2 sockets at the same time? So that it will return when either of the sockets gets written to? I have no idea how to do this with the concurrency primitives in haskell
06:48:51 <Actreka> Rarrikins: Int for the integer arguments and num for the rest
06:49:04 <merijn> tapuu: Normally you'd just spawn 1 thread per socket
06:49:23 <Rarrikins> Actreka: No, I mean copy and paste it.
06:49:36 <MagneticDuck> ski: your meesage? "why no `tput setaf 3' stuff? :/"
06:49:44 <Actreka> Rarrikins: ghci: "let diff :: (Num a, Int b) => [a] -> b -> b -> a; diff [] _ _ = 0; diff list x y = (list !! (y-1)) - list !! (x-1)"
06:50:00 <Actreka> Rarrikins: It is probably bad code everywhere
06:50:04 <merijn> tapuu: One example approach, 1 thread per socket, every socket thread writes to a Chan, have 1 thread reading from the Chan and process input
06:50:06 <Redz> Int isnt a class.
06:50:08 <Rarrikins> Actreka: Int isn't a typeclass. You need Num a => [a] -> Int -> Int -> a
06:50:10 <tapuu> merijn: My problem is that one socket is providing notifications from other threads so that doesn't really help
06:50:11 <MagneticDuck> ski: oops that was probably on# haskell-blah
06:50:19 <Actreka> Oh! Thanks!
06:50:42 <Rarrikins> You're welcome.
06:50:44 <tapuu> merijn: I need to asynchronously send events to a thread that is also reading from a socket
06:50:59 <merijn> tapuu: That's a pain, currently, unfortunately :\
06:51:13 <merijn> Which reminds, me I need to revisit my threadWaitReadSTM proposal
06:51:22 <merijn> Which would make this much easier
06:51:37 <tapuu> merijn: Thanks, I was wondering whether somethign was in the works
06:51:39 <Actreka> My poorly written function works perfectly :)
06:52:08 <tapuu> I'd be  nobody had come across this problem before
06:52:16 <Rarrikins> Actreka: You need to fix the index out of bounds protection.
06:52:20 <peteretep> You accidentally a word
06:52:29 <tapuu> *surprised if
06:53:00 <Rarrikins> Actreka: If either of the indices is too high, it will fail (except on empty lists).
06:53:03 <pyon> In the Pipes library, reflect simply flips upstream and downstream, right?
06:53:16 <Rarrikins> The evil of nontotal functions
06:57:34 * hackagebot chatty 0.4.0.0 - Some monad transformers and typeclasses to simplify I/O on a transformer stack.  http://hackage.haskell.org/package/chatty-0.4.0.0 (implementation)
06:59:34 <tapuu> merijn: Will this do what I wanted? https://ghc.haskell.org/trac/ghc/ticket/7216
07:02:30 <merijn> Oh, someone already proposed this :)
07:03:05 <no-n> :)
07:05:52 <merijn> Man
07:05:54 <tapuu> merijn: I'm not seeing how I can use this to wait on multiple fle descriptors?
07:06:16 <merijn> tapuu: I can explain, but you're probably only able to use this in 7.8
07:06:24 <tapuu> It seems to just be a function that lets you block on an fd in an STM transaction
07:06:37 <tapuu> merijn: 7.8 should be fine :D
07:06:53 <tapuu> This is just experimentation and I'm running 7.8.1 RC2 anyway
07:07:03 <merijn> Once I figure out the exact details
07:07:23 <Actreka> Rarrikins: How do I fix the indeces problem? With if statements?
07:08:08 <merijn> tapuu: Right, so you have "threadWaitReadSTM :: Fd -> IO (Sync.STM (), IO ())"
07:08:23 <Rarrikins> Actreka: You can make a total version of !!
07:08:25 <merijn> tapuu: So it returns a tuple of (STM (), IO ())
07:08:31 <Rarrikins> @src (!!)
07:08:31 <lambdabot> xs     !! n | n < 0 = undefined
07:08:31 <lambdabot> []     !! _         = undefined
07:08:31 <lambdabot> (x:_)  !! 0         = x
07:08:31 <lambdabot> (_:xs) !! n         = xs !! (n-1)
07:08:38 <merijn> tapuu: Do you understand STM vaguely?
07:08:42 <Rarrikins> Actreka: Replace the undefineds with whatever.
07:08:49 <tapuu> merijn: I'ce used it before
07:09:11 <merijn> tapuu: Right, so basically the "STM ()" will retry unless the Fd you gave is readable
07:09:36 <merijn> tapuu: And the IO () will unregister your STM action (i.e. it's a cleanup/GC function)
07:10:32 <tapuu> merijn: I still don't see how I use this to block on 2 file descriptors..
07:11:04 <Actreka> Rarrikins: Okay, what is this @src (!!) thing?
07:11:14 <Rarrikins> Actreka: It shows the definition of (!!).
07:11:24 <merijn> tapuu: Give me a second :)
07:11:32 <merijn> tapuu: I hope you only care about *nix
07:11:37 <tapuu> merijn: I could send my events through a Tqueue instead of another socket, would that help?
07:11:44 <Actreka> Rarrikins: Is it some kind of plugin or can I do it inside ghci too?
07:11:49 <tapuu> merijn: I only need linux support tbh
07:13:26 <darthdeu> I'm having an issue with ghci/cabal ... I have source files in src, and if I do ghci src/Foo.hs, it fails to find an import of Bar in src/Bar.hs, but if i cd src and then ghci Foo.hs, it finds Bar.hs, but it doesn't find packages from the cabal sandbox :\
07:14:07 <darthdeu> will this only work if i use cabal repl?
07:14:42 <Rarrikins> Actreka: You can do it in a source file.
07:14:48 <mietek> Is it still possible to use the Snap server as a WAI handler?  I see snoyberg had a blog post about it in 2010, but wai-handler-snap appears deprecated
07:14:57 <Rarrikins> Actreka: @src is for lambdabot, if that's what you mean.
07:15:03 <Rarrikins> Actreka: ghci doesn't have it.
07:15:10 <darthdeu> also it seems that overloaded strings don't work in ghci, so i assume they're local to the file where i use them?
07:15:53 <Rarrikins> Actreka: You can usually find the source for something by searching Hoogle for the function and clicking Source in Hackage.
07:16:25 <Actreka> Rarrikins: That will come in handy, thank you :)
07:16:45 <geekosaur> darthdeu: `ghci -i src` in the sandbox dir?
07:16:57 <Rarrikins> Actreka: Hoogle is at http://www.haskell.org/hoogle/. You type in (!!) and search. You click on the first (!!) and click on Source.
07:17:08 <geekosaur> that is, ghci -i src src/Foo.hs
07:17:10 <darthdeu> geekosaur: by "sandbox dir" you mean the root of the project, or the actual .cabal-sandbox?
07:17:41 <geekosaur> the directory you were running `ghci src/Foo.hs` from
07:18:04 <geekosaur> add `-i src` so it searches `src` for imports in addition to the usual places
07:18:23 <carter> merijn: i think  Datat+rst.lhs would be better
07:18:31 <carter> because then theres no overloading
07:18:38 <carter> about it possibly being a weird module
07:18:47 <darthdeu> geekosaur: then i'm getting Could not find module `Text.Digestive.Snap' :\ i think it's not detecting the cabal sandbox properly
07:19:09 <geekosaur> oh, yes, if you are using ghci directly you need to point it to the package db
07:19:18 <geekosaur> this is why cabal repl exists; why are you avoiding it?
07:19:32 <benmachine> darthdeu: overloaded strings work in ghci if you enable them, it's not enough to have a module loaded which enables them internally
07:19:41 <benmachine> darthdeu: try :set -XOverlo<tab>
07:19:54 <darthdeu> geekosaur: I'm not avoiding it, I'm just curious if that's the correct way
07:20:20 <geekosaur> cabal repl is there specifically to make sure all the stuff needed for ghci to see the sandbox is done
07:20:22 <Rarrikins> @type foldr2
07:20:22 <lambdabot>     Not in scope: `foldr2'
07:20:23 <lambdabot>     Perhaps you meant one of these:
07:20:23 <lambdabot>       `foldr' (imported from Data.List),
07:20:43 <geekosaur> also things like required extensions from the cabal file
07:20:59 <geekosaur> you need to do a bunch of stuff by hand if you run ghci directly
07:21:18 <darthdeu> cool,btw if I do :l Something.hs and it gives me the "Could not find module XYZ, use -v to see a list of files searched", can i somehow pass the -v to :load directly, or do i need to do that when starting up ghci?
07:21:41 <darthdeu> benmachine: thanks, that works :)
07:21:46 <geekosaur> possibly `:set -v` but I don't know if it's a flag that can be changed dynamically
07:22:23 <darthdeu> ha, that works :)
07:22:52 <darthdeu> can i unset it in a similar way?
07:23:16 <darthdeu> hmm seems not "don't know how to reverse -v"
07:23:18 <darthdeu> sorry for being dumb
07:23:28 <darthdeu> that's what i got when doing :unset -v
07:23:39 <tapuu> merijn: Are you still there?
07:24:07 <geekosaur> looks like :set -v0
07:24:36 <geekosaur> `:set -v` is short for `:set -v3`, it's not actually a boolean flag that can be negated
07:24:57 <merijn> tapuu: Something like http://lpaste.net/101275
07:25:03 <merijn> tapuu: Note, I didn't test this
07:25:05 <darthdeu> oh interesting
07:25:50 <merijn> tapuu: Basically, use STM's polling ability to figure out which Fd is readable, then try to read from that Fd and return the result
07:28:18 <tapuu> merijn: I wasn't aware stm had a monadplus instance for this, that's what was confusing me :)
07:30:40 <merijn> tapuu: STM has orElse (first try first argument, if that retries, try the second argument, if that retries, retry everything), MonadPlus just uses orElse for it's mplus :)
07:31:34 <merijn> carter: I don't understand your last email on the lhs proposal?
07:31:43 <matheus23> When I want to profile a haskell file, I compile it with $ ghc -perf -auto-all -o Test, but when I have a cabal build system configured, how do I tell $ cabal build to add the -perf and -auto-all option to the execution of the compiler?
07:31:48 <carter> merijn: i shoudln't write emails within the first hour of waking up :)
07:32:02 <carter> merijn: but you're saying eg Data.Vector.hs is valid haskell?
07:32:11 <geekosaur> --enable-executable-profiling --enable-library-profiling
07:32:18 <geekosaur> (one or the other as appropriate)
07:32:26 <merijn> carter: Well, the standard doesn't define it, I'm saying that GHC does not support that
07:32:29 <matheus23> geekosaur: thank you ! :)
07:32:32 <carter> oh
07:32:42 <carter> merijn:i thought you meant it'd work ;(
07:32:44 <merijn> carter: And since GHC doesn't support that, we might as well officially disallow it to make my proposal work :)
07:32:54 <carter> idk
07:33:00 <carter> i like the idea of making that work
07:33:08 <matheus23> geekosaur: should that then be $ cabal build --enable-executable-profiling ? It doesn't recognize the option
07:33:10 <merijn> carter: GHC will expect "Data.Vector" to be "Data/Vector.lhs" or "Data/Vector.hs"
07:34:06 <merijn> carter: Which means that "Bar/Foo.rst.lhs" can clearly never be mistaken for the file for the "Bar.Foo.rst" module
07:34:19 <merijn> Doubly so because rst is lowercase and modules are not allowed to start with lowercase
07:34:30 <carter> why not have eg a +rst.lhs
07:34:35 <carter> and then we could do both!
07:35:18 <matheus23> geekosaur: Ah okay. No need for further help, I found it. I need to execute $ cabal configure --enable-executable-profiling, not $ cabal build ...
07:35:20 <merijn> carter: I would prefer ".rst+lhs" or ".lhs+rst" then
07:35:22 <geekosaur> matheus23, it's not `build` time, it's `configure` time
07:35:24 <geekosaur> yes
07:35:27 <matheus23> :)
07:35:27 <carter> sure
07:35:29 <hpc> merijn: Foo.rst.lhs isn't allowed as a filename with ghc because it gets translated to a module part of "Foo.rst", which is not a valid identifier
07:35:31 <merijn> carter: Should be trivial to patch pandoc to support that
07:35:38 * geekosaur is kinda multitasking at the moment, sorry
07:35:40 <merijn> hpc: That's what I was saying
07:35:42 <carter> merijn: pandoc isn't the issue
07:35:58 <hpc> (also can't do '+' for similar reasons)
07:36:02 <merijn> carter: It is for me, I'm currently using "Foo.rst.lhs" to get it to render my lhs properly :)
07:36:08 <jmcarthur> is there a name for the types of values that are not functions?
07:36:17 <carter> jmcarthur: first order
07:36:33 <carter> merijn: i think a better solution is to tell pandoc via a vlag
07:36:34 <merijn> hpc: I know all that, we're discussing changing that. For context see my proposal on haskell-prime/glasgow-haskell-users
07:36:35 <carter> flag
07:36:37 <carter> doesn't it have that suport?
07:36:39 <jmcarthur> carter: that doesn't seem right. i think of first order as not higher order, not as not a function.
07:36:49 <merijn> carter: Sure, but I'm using pandoc via hakyll for my site
07:37:02 <carter> merijn: you can set the config record
07:37:04 <carter> i think
07:37:08 <jmcarthur> carter: that is, there is a such thing as first order functions
07:37:12 <carter> true
07:37:14 <merijn> carter: No, it's really ghetto
07:37:18 <carter> merijn: why not
07:37:28 <carter> "its ghetto" because you don't have to patch anything
07:37:29 <carter> :P
07:37:34 <carter> i'd rather you do that now
07:37:38 <merijn> carter: It detects based on extensions atm
07:37:44 <carter> you can hack around that
07:37:53 <carter> merijn: seriously
07:37:54 <tapuu> merijn: would a high level socket library contained entirely in stm have any performance problems?
07:37:58 <merijn> carter: Sure, but I still want a way to identify extensions
07:38:02 <carter> yes
07:38:07 <skypers> hm
07:38:10 <carter> merijn: dude
07:38:15 <carter> it'll take a year before you can use it
07:38:16 <zerokarmaleft> is there some idiomatic background to naming functions with a prefix of mk* vs new* vs whatever?
07:38:21 <carter> tapuu: yes
07:38:24 <carter> depending on the workload
07:38:32 <merijn> carter: I already have a workaround for pandoc, that's no excuse to not campaign for fixing it properly :)
07:38:32 <carter> merijn: i'm telling you what you can do "today"
07:38:39 <skypers> I changed my mind about my engine a few weeks earlier; I decided to enable users to write GPU code in a pure functional way
07:38:47 <skypers> I still doubt it’s a good idea now
07:38:52 <carter> merijn: then wait after 7.8 is released and people have time to think
07:38:55 <skypers> it sounds pretty great in some sense
07:39:09 <carter> skypers: its reasonable
07:39:19 <merijn> carter: Additionally, I was working on the haskell vim highlighting again, where I'd like to detect the syntax for non-haskell parts too
07:39:27 <carter> ok
07:39:29 <carter> cool
07:39:35 <skypers> carter: it gives a lot of advantages
07:39:36 <tapuu> I'm not pleased with boilerplate required to use this threadWaitReadSTM proposal
07:39:38 <merijn> carter: Maybe, but if I don't email immediately, I forget that I wanted too :p
07:39:45 <carter> ok
07:39:47 <skypers> it lets me implement some sorting stuff in order to reduce GPU’s binds
07:39:52 <carter> merijn: i'm just saying, its a valid issue
07:39:55 <skypers> but I don’t know
07:39:59 <skypers> I hope it’ll be okay
07:40:03 <carter> but theres much higher priority stuff like ghc just dying on winodws
07:40:10 <carter> skypers: cool
07:40:18 <merijn> carter: Right now the lhs detection for haskell only detects TeX and nothing
07:40:29 <carter> whos
07:40:35 <jmcarthur> skypers: this approach is not unheard of :)
07:40:39 <merijn> (from vim, I mean)
07:40:48 <carter> yeah jmcarthur  would know
07:41:32 <jmcarthur> to avoid getting more recognition than i deserve, i only know to the extent that i have tried and quit up before getting anywhere interesting
07:41:32 <merijn> tapuu: Now that threadWaitReadSTM exists in GHC it would be nice to extend the network package to do polling using that, it's really intended as low level primitive to implement this stuff, so yes that incurs some boilerplate
07:41:49 <merijn> tapuu: But since it's new no library has written any nice functionality using it yet
07:41:56 <skypers> 15:36 < jmcarthur> skypers: this approach is not unheard of :)
07:41:58 <skypers> what do you mean?
07:42:00 <skypers> gpipe?
07:42:15 <skypers> it’s kinda the same thing indeed
07:42:21 <jmcarthur> skypers: gpipe, lambdacube, etc.  also computation-oriented libraries like accelerate.
07:42:33 <skypers> though, I don’t have shader EDSL yet :(
07:42:41 <skypers> jmcarthur: yeah, I see
07:42:51 <jmcarthur> skypers: shady is another (incomplete, but working, at least formerly) example
07:42:52 <skypers> I think there’re more advantages than drawbacks
07:43:53 <skypers> does gpipe or lambdacube have a “commit” function to pass from pure code to GPU one?
07:44:07 <jmcarthur> you mean like an explicit "compile" function?
07:44:13 <skypers> yes
07:44:22 <skypers> in my engine I use something implicit through monads
07:44:31 <jmcarthur> i think lambdacube does, but only because it's meant to become a standalone language rather than an embedded one
07:44:36 <jmcarthur> i think gpipe does not
07:44:44 <skypers> how does it work then?
07:44:54 <skypers> how does it and when does it bind to IO?
07:45:13 <jmcarthur> gpipe does something tricky. i think it only compiles the program when you try to render something.
07:45:27 <skypers> ok
07:45:28 <jmcarthur> and then does some more trickiness to avoid recompiling over and over...
07:45:39 <jmcarthur> personally i think a separate compilation step is fine
07:45:54 <skypers> I have a slightly different approach :)
07:46:00 <jmcarthur> it's good to make the cost model as transparent as possible
07:46:11 <skypers> sure
07:46:11 <jmcarthur> as long as it doesn't greatly destroy the interface
07:46:30 <skypers> I use a “representation by model” idea
07:46:35 <skypers> I have no other words for what I’m doing
07:47:09 <skypers> you simply define your stuff in a pure way, then when you’re done, you access a monad that enables you to render your stuff with your model
07:47:20 <skypers> the model is generated in the pure code using simple indirections
07:47:25 <skypers> for now I’m using simple Int
07:47:30 <skypers> and lookups over Vector
07:47:33 <jmcarthur> this doesn't sound any different than any other purely functional interface to me ;)
07:47:40 <skypers> oh? :)
07:47:42 <dwat3r> guys i have this error:  Couldn't match expected type `Data.ByteString.Internal.ByteString'
07:47:45 <dwat3r>                 with actual type `bytestring-0.10.0.2:Data.ByteString.Internal.ByteString'
07:47:49 <dwat3r> how can i resolve this?
07:47:58 <skypers> wrong bytestring version
07:47:59 <jmcarthur> skypers: declarative code just composes values
07:48:05 <skypers> yes jmcarthur
07:48:19 <skypers> in the end, I want my shader EDSL to be simple functions you could compose
07:48:24 <skypers> in order to make complex shader chains
07:48:32 <skypers> but I separate stuff
07:48:37 <skypers> in gpipe you handle VertexStream
07:48:41 <jmcarthur> sounds ideal to me. i hope you get further than i did before i got bored
07:48:43 <skypers> then PrimitiveStream
07:48:50 <skypers> then FragmentStream
07:48:55 <skypers> I’ll let you know jmcarthur
07:49:03 <skypers> but my fragment is end-user oriented
07:49:10 <skypers> I have notion of materials
07:49:11 <skypers> resources
07:49:14 <skypers> and so on
07:49:21 <skypers> postfx, too
07:49:24 <jmcarthur> ah
07:49:30 <skypers> it’s a bit higher than gpipe :)
07:49:39 <jmcarthur> so this is going to have a bit more done for you already
07:49:43 <skypers> it’s a realtime rendering engine
07:49:47 <jmcarthur> i see
07:49:53 <jmcarthur> rather than just a graphics programming library
07:50:06 <skypers> yeah, in the end I’d like it to be data-driven
07:50:10 <jmcarthur> cool
07:50:12 <skypers> it’s already a bit
07:50:16 <skypers> there’s a function
07:50:19 <skypers> loadResources
07:50:33 <skypers> that returns something like a map you can lookup your resources into
07:50:37 <skypers> it’s quite great :)
07:50:52 <skypers> I just wonder a few stuff
07:51:03 <skypers> I **think** it’s possible to load resources on the fly
07:51:12 <skypers> and integrate them into the pure / gpu monads
07:51:16 <skypers> but I’m not sure of that
07:51:23 <skypers> (performanc losses, and so on?)
07:51:27 <skypers> I’ll see that later :)
07:51:29 * jmcarthur mumbles something about cost models
07:51:30 <jmcarthur> :)
07:52:02 <augur_> is there a convenient little graphics librari for haskell that can draw to the screen, etc.?
07:52:20 <jmcarthur> augur_: maybe try gloss?
07:52:23 <skypers> augur_: you can start with gloss
07:52:25 <skypers> yeah
07:52:26 <augur_> ill check it out, thanks
07:52:52 <jmcarthur> gloss is one of those convenient but naive graphics libraries
07:53:12 <jmcarthur> i don't mean that in a bad way
07:53:26 <augur_> naive in what sense?
07:53:33 <gwz> hey if I have a list such as this [Value 2, Value 10] etc, is it possible for me to get the maximum value using the maximum function
07:53:53 <hpc> gwz: what is Value?
07:53:59 <gwz> a datatype
07:54:34 <jmcarthur> augur_: i mean that it's very... straightforward. you describe your image as a big data structure, then it walks the data structure to render it one element at a time.
07:54:58 <jmcarthur> augur_: i'm kind of talking about the implementation more than the interface, although this shows in the interface too
07:55:05 <skypers> gwz: I don’t think so
07:55:09 <skypers> :t maximum
07:55:10 <lambdabot> Ord a => [a] -> a
07:55:13 <skypers> well
07:55:21 <skypers> you can still do it that way
07:55:25 <skypers> check this out:
07:55:30 <hpc> yeah, it depends on what Value is
07:55:47 <skypers> > let l = [(1,3),(3,8)] in maximum (map snd l)
07:55:48 <lambdabot>  8
07:55:50 <jmcarthur> gwz: you can if your Value type has an Ord instance
07:55:55 <gwz> it doesnt
07:56:13 <jmcarthur> gwz: if you are able to define one, i recommend that. if you aren't, you might need something like maximumBy instead
07:56:23 <skypers> :t maximumBy
07:56:24 <lambdabot> (a -> a -> Ordering) -> [a] -> a
07:56:30 <skypers> oh great
07:56:40 <jmcarthur> > let l = [(1,3),(3,8)] in maximumBy (comparing snd) l
07:56:41 <lambdabot>  (3,8)
07:56:49 <skypers> my solution is shorter! :)
07:56:59 <jmcarthur> mine is correct :P
07:57:12 <jmcarthur> yours cuts out the fst element of the result
07:57:18 <skypers> that’s very true.
07:57:22 <skypers> damned!
07:57:22 <skypers> :)
07:57:26 <skypers> damn*
07:57:41 * hackagebot gnuplot 0.5.2.2 - 2D and 3D plots using gnuplot  http://hackage.haskell.org/package/gnuplot-0.5.2.2 (HenningThielemann)
07:58:08 <matheus23> How do I reinstall all of my cabal installed libraries so that I have the profiling version of all of them? I've already edited the config file to include the library-profiling: True option (and uncommented it) and I've tried dumping all installed packages from $ ghc-pkg list > list and then $ cabal install --reinstall $(cat list) but it diesn't work... ("cabal: Could not resolve dependencies: [...] rejecting: GLURaw-1.4.0.0 (global
07:58:08 <matheus23> constraint requires ==1.2.0.0) [similar GLURaw errors])
07:58:58 <monochrom> matheus23, see my http://www.vex.net/~trebla/haskell/cabal-cabal.xhtml#config
08:00:47 <monochrom> do not touch packages that come with GHC or Haskell Platform
08:09:45 <skypers> jmcarthur: why did you get bored?
08:14:09 <matheus23> monochrom: It says I should understand removing packages and then start to remove user packages. What packages are those exactly? (or in other words: How to find them)
08:16:27 <bennofs> matheus23: If you want to start from scratch, probably the easiest solution is rm -r ~/.ghc; rm -r ~/.cabal (don't forgot to recreate your ~/.cabal/config after this!) and then reinstall all the packages that you need
08:17:52 <matheus23> bennofs: Can cabal and ghc simply 'recover' from deleting all the user files?
08:18:16 <matheus23> bennofs: And what are the downsides of that 'technique'?
08:18:27 <geekosaur> what do you mean by "recover"?
08:18:51 <matheus23> I can simply use GHC and Cabal just like I did when I first installed it then?
08:18:54 <matheus23> (that's what I mean)
08:19:26 <bennofs> matheus23: yes. The only files that GHC and cabal create in the user directory are ~/.cabal and ~/.ghc I think, so that will reset everything
08:19:44 <matheus23> okay... I'll try it (even if the commands sound itimidating ;) )
08:21:26 <jmcarthur> skypers: i just tend to do that. i burn out easily. it especially happens when i get very little time to work on something, and then when i do have time i feel like i *have* to work on it because otherwise it will never get done.
08:23:55 <skypers> jmcarthur: yeah, I understand that
08:24:07 <skypers> there’s a nice cure against that : motivation
08:24:22 <skypers> as a demomaker, demaparties are a nice motivation boost :)
08:25:00 <jmcarthur> there are hardly ever any demo parties in the US :\
08:26:32 <jmcarthur> there are a couple though. maybe i should go to one
08:27:06 <skypers> jmcarthur: NVScene
08:27:09 <skypers> but yeah
08:27:21 <skypers> I’m very lucky of living in France
08:27:29 <jmcarthur> i'm more tempted by @party just because it would be easier for me to get to
08:27:32 <skypers> most parties are in Germany and The Netherlands
08:27:50 <skypers> yeah, @party sounds great too :)
08:28:20 <skypers> damn I hope all the work I do will be worth it…
08:29:29 <skypers> have you seen my paper about how I log things, jmcarthur?
08:31:00 <jmcarthur> i don't think so
08:31:07 <skypers> http://www.reddit.com/r/haskell/comments/1ymawa/monadjournal_onthefly_logging_from_any_monad/
08:31:20 <skypers> the name is not that good
08:31:42 <skypers> it’d be better to call it “unified logging”
08:32:07 <skypers> (there’s not really a on-the-fly stuff, though)
08:33:19 * matheus23 bakes a cake while waiting for all the packages to be installed
08:33:29 <skypers> all? :D
08:33:46 <skypers> I’ll bake some bread for tonight :)
08:35:27 <c_wraith> I'm actually working on a logging transformer that presents a unified interface for either collecting logs or automatically writing them.
08:35:50 <c_wraith> Not that I intend to publish it - I have no idea what features *real* loggers need, so it's just a mishmash
08:36:17 <c_wraith> The real reason I'm writing it is for a motivational case in an upcoming article.
08:36:26 <skypers> c_wraith: mine is really simple: it enables you to log things from any monads
08:36:46 <skypers> it provides a function to “sink” the whole log history if your monad enables that
08:36:49 <skypers> (MonadIO m)
08:36:52 <skypers> that’s all :)
08:37:02 <c_wraith> That's still not on-the-fly.  You have to manually do it.
08:37:07 <skypers> yes
08:37:17 <skypers> and it’s quite okay to me
08:37:59 <skypers> I think on the fly logging is not possible if you want to keep purity
08:38:23 <skypers> if you use unsafePerformIO, you’re exposed to the risk of leaking stuff
08:38:27 <c_wraith> Not true!
08:38:29 <bennofs> skypers: use pipes
08:40:28 <c_wraith> skypers: I haven't written the article itself yet, but the upshot is "operational is good".  It's a demonstration of providing different interpreters for the same DSLs that do different things.  One interpreter collects the output.  One performs an action on it in the base monad, on the fly.
08:40:56 <skypers> I see
08:41:12 <c_wraith> So you choose what you're doing at the point you unwrap the transformer.  The code running inside it is totally agnostic.
08:41:18 <bennofs> You could also use: data LoggingMonad l m a = LoggingMonad (Producer l m a)
08:41:23 <bennofs> Producer from pipes
08:45:28 <skypers> @hoogle Vector a -> a
08:45:29 <lambdabot> Warning: Unknown type Vector
08:45:29 <lambdabot> Prelude id :: a -> a
08:45:29 <lambdabot> Data.Function id :: a -> a
08:45:43 <skypers> @hoogle Data.Vector a -> a
08:45:43 <lambdabot> Parse error:
08:45:43 <lambdabot>   Data.Vector a -> a
08:45:43 <lambdabot>        ^
08:46:45 <skypers> ok it’s (!) for indexing, an (!?) for safe indexing
08:47:27 <pyon> Does MonadPlus convey any additional information besides "Monad + Alternative"?
08:47:49 <skypers> well, mzero and mplus :)
08:48:09 <skypers> it enables you to use guard and so on
08:48:13 <pyon> And how do they differ from empty and (<|>)?
08:48:51 <c_wraith> pyon: Sort of.  People tend to agree with Alternative should mean.  That's less true of MonadPlus.  So I see MonadPlus as conveying "this might do many things"
08:49:11 <benmachine> c_wraith: do people agree on what Alternative should mean?
08:49:24 <skypers> a list of either, I guess
08:49:25 <pyon> Well, if people do not agree what MonadPlus should mean, then I am not defining any MonadPlus instances myself.
08:49:28 <skypers> with possible failure
08:49:31 <aristid> i think the MonadPlus should agree with the Alternative if both exist
08:49:50 <c_wraith> aristid: people thing that *now*, but it wasn't universally agreed-upon when Alternative was introduced.
08:49:51 <skypers> pyon: MonadPlus doesn’t have “meaning” to me
08:49:54 <c_wraith> *think
08:49:57 <skypers> but properties
08:50:02 <skypers> like Functor
08:50:04 <skypers> or Applicative
08:50:06 <pyon> skypers: Well, okay, laws.
08:50:11 <skypers> yes, laws
08:50:13 <aristid> c_wraith: ok:) still a good idea now
08:50:17 <pyon> skypers: That is what I mean by "meaning" anyway.
08:50:21 <skypers> I love MonadPlus when using Maybe
08:50:44 <pyon> Does it ever make sense for Alternative and MonadPlus to not be the same?
08:50:45 <benmachine> Applicative and MonadPlus are both a bit light on laws
08:50:47 <aristid> MonadPlus to get the Monoid instance you really want?:)
08:50:50 <benmachine> er
08:50:50 <skypers> I don’t use <|>, only with Parsec
08:50:52 <benmachine> *Alternative
08:51:06 <pyon> skypers: Ironically, Parsec's <|> is something I profoundly dislike.
08:51:15 <skypers> why?
08:51:18 <skypers> it’s simple
08:51:25 <benmachine> people say that they should exhibit interactions with their superclasses, but people do not agree on which ones
08:51:29 <aristid> Alternative and MonadPlus do not universally follow the Monoid laws?
08:51:31 <skypers> combined with <?>, it’s great
08:51:45 <benmachine> but this is not so upsetting, after all Num doesn't have many useful laws but it does have many useful instances
08:51:52 <pyon> skypers: The problem is Parsec's Applicative instance. I think there should be a <!*> for <*> without backtracking when the right parser fails.
08:51:58 <matheus23> Soooo... I'm having an executable that tells me "Most RTS options are disabled. Link with -rtsopts to enable them." hm.. How do I do that with cabal build?
08:52:05 <benmachine> aristid: I think everyone agrees that they should be monoids
08:52:05 <aristid> skypers: parsec's <|> is just a copy of Alternative's <|> with the wrong fixity
08:52:07 <pyon> skypers: And "f <!*> g" should be something like "f <*> cut g".
08:52:13 <aristid> benmachine: that is good.
08:52:18 <aristid> @quote monoid
08:52:18 <lambdabot> neuraxon77 says: With a concatenative language the only construct is the monoid, and structuring a language with this in mind makes all types optional
08:52:21 <pyon> Where "cut f' means "abort the whole thing if f fails".
08:52:21 <benmachine> aristid: everyone I've heard from anyway
08:52:39 <skypers> I see pyon
08:52:48 <aristid> @quote monoid
08:52:48 <lambdabot> gwern says: [regarding the naming of Monoids] we will call them CuteFluffableThings, since you can put more fluff into them, but no one would remove fluff from a cute thing
08:54:18 <pyon> The whole "'f <|> g' only tries g if f fails without consuming any input" business is basically nonsense.
08:54:51 <aristid> pyon: oh, yeah, attoparsec fixes that :D
08:55:46 <skypers> pyon: I’m used to do something like
08:55:50 <skypers> try f <|> g
08:56:24 <pyon> aristid: But, conversely, attoparsec has the problem that it has no cut function for aborting the whole parsing process.
08:56:44 <pyon> Basically, I am thinking more or less in terms of Prolog evaluation. I want backtracking to be pervasive... unless I use cuts.
08:57:02 <Fuuzetsu> AFAIK you can just fail
08:57:02 <aristid> pyon: fair enough.
08:57:02 <matheus23> Nevermind. I got my problem fixed, using "cabal configure [stuff] --ghc-option=-rtsopts"
08:57:23 <skypers> isn’t there a ghc package?
08:57:29 <Fuuzetsu> there is
08:57:32 <skypers> or at least a way to upgrade it through cabal?
08:57:40 <Fuuzetsu> there isn't
08:57:52 <skypers> :)
08:57:55 <aristid> skypers: if there was a way to upgrade it through cabal, we would tell you not to do it:)
08:58:12 <skypers> why?
08:59:56 <aristid> skypers: because it might lead to horrible conflicts?
09:00:27 <c_wraith> skypers: the ghc package contains the logic ghc uses to compile and interpret.  Upgrading that doesn't really make sense.
09:02:11 <Peaker> the "unix" package does not expose its internals, and hides the "st_blocks" from file stat :(
09:02:22 <geekosaur> st_blocks is not portable
09:04:02 <Peaker> still annoying it's not exposed at all :(
09:04:07 <prinsen> In GHC, if I use XSafe I can't import Data.Aeson. Any way to solve this and still prevent unsafePerformIO etc..?
09:04:16 <prinsen> using --trust aeson doesn't seem to work
09:04:22 <Peaker> geekosaur: It could be nice if it were exposed by an "Unportable" or "Internals" module
09:04:24 <geekosaur> (it doesn't exist everywhere and its meaning differs on different platforms, sigh)
09:04:39 <Peaker> geekosaur: I am writing a Haskell program that doesn't need portability for this particular feature
09:05:23 <c_wraith> prinsen: use ghc-pkg to set aeson as trusted?
09:09:20 <prinsen> c_wraith: I'll try it!
09:15:49 <skypers> h
09:15:51 <skypers> hm
09:15:58 <skypers> my project has 58 files
09:16:02 <skypers> and is far from done
09:16:11 <skypers> it’s going to be huge :D
09:17:51 * hackagebot chatty 0.4.1.0 - Some monad transformers and typeclasses to simplify I/O on a transformer stack.  http://hackage.haskell.org/package/chatty-0.4.1.0 (implementation)
09:21:54 <prinsen> c_wraith: Google fails me
09:22:25 <prinsen> c_wraith: I found the fpackage-trust, which made importing Prelude an error
09:24:01 <c_wraith> prinsen: ghc-pkg help gives you the information you need.  ghc-pkg trust aeson
09:26:23 <isaacbw> disregarding difficulty, of snap happstack and yesod which do you think would teach me the most about types and/or lead to the most robust type systems
09:27:17 <isaacbw> I like the idea of yesod (seems to do really well with benchmarks, has a whole book for free on the web) but it uses a lot of magic quasi quotes
09:27:35 <nomeata> Can I make lambdabot auto-reply all messages sent to me?
09:28:20 <isaacbw> nomeata: your IRC client (if you use a decent one) can probably do it
09:28:49 <hpc> you mean like an away message?
09:29:02 <isaacbw> weechat just added triggers
09:29:18 <nomeata> hpc: yes (and that’s why isaacbw's suggestion does not help, unfortunately)
09:29:50 <isaacbw> oh, you mean while you're logged out?
09:30:10 <nomeata> isaacbw: yes
09:30:16 <isaacbw> hah, it didn't even occur to me that one might disconnect from an irc network. I've been using irssi and now weechat on a vps for so long
09:30:40 <nomeata> basically I need lambdabot to tell people that this is not a reliable and quick way to communicate with me, and that I’d rather receive mails
09:31:04 <prinsen> c_wraith: still get Data.Aeson: Can't be safely imported!
09:31:57 <isaacbw> nomeata: if you wanted to go the route of staying connected 24/7, there's a plugin for irssi that sends you email when you're mentioned
09:32:11 <c_wraith> nomeata: unfortunately, lambdabot isn't designed for that use case. It doesn't pass on messages until it sees you say something.  Any approach to doing things differently would require you to write your own bot.
09:32:13 <isaacbw> and if there's not one for weechat, it would probably be pretty easy to write
09:32:40 <isaacbw> hmm, an irc client in haskell might be a good learning project
09:32:53 * hackagebot postie 0.1.0.0 -   http://hackage.haskell.org/package/postie-0.1.0.0 (alexbiehl)
09:32:53 <isaacbw> (for me)
09:33:00 <hpc> it would
09:33:12 <hpc> irc bots are common learning projects, and a client is just a bot with UI
09:33:13 <Guest42867> @pl \x y x' y' -> (f x y) (f x' y')
09:33:13 <lambdabot> flip flip f . (((.) . (.)) .) . f
09:33:49 <isaacbw> hpc: yea, writing an irc client is how I learned to use sockets
09:33:50 <nomeata> c_wraith: ..or to hack lambdabot, I suppose
09:34:11 <nomeata> c_wraith: (it should't be hard to have a persistence "away message" field per user)
09:34:29 <c_wraith> nomeata: well, if you wrote up a patch that did that, you could probably get it merged into the version running here.
09:34:42 <nomeata> c_wraith: who is running lambdabot these days?
09:35:16 <c_wraith> nomeata: I *think* it's enthropy.  But my certainty level is only like 40%
09:35:29 <nomeata> enthropy: can you confirm that? would you accept such a patch?
09:35:41 <enthropy> nope, it's probably int-e
09:35:55 <c_wraith> oh.  Yeah.  int-e sounds right.  This is why I was so uncertain. :)
09:36:04 <geekosaur> ?version
09:36:04 <lambdabot> lambdabot 5.0-int-e
09:36:04 <lambdabot> git clone git://github.com/int-e/lambdabot.git
09:36:15 <c_wraith> geekosaur is cleverer than me
09:36:51 <nomeata> http://hackage.haskell.org/package/lambdabot lists https://github.com/mokus0/lambdabot.git...
09:37:10 <nomeata> at least the two repos are in sync
09:37:17 <c_wraith> nomeata: however, lambdabot claims it's running int-e
09:37:20 <prinsen> c_wraith: ghc-pkg describe aeson says it's trusted, but still error
09:37:21 <c_wraith> 's version
09:37:36 <c_wraith> prinsen: then you're beyond what I know about safe haskell
10:02:11 <kuribas> Has anyone tried at what size an Map becomes more efficient than an association list?
10:02:44 <kuribas> 100's of items?  or 1000's?
10:02:56 * hackagebot css-text 0.1.2.1 - CSS parser and renderer.  http://hackage.haskell.org/package/css-text-0.1.2.1 (GregWeber)
10:03:16 <c_wraith> kuribas: I think it's like 5.  It's *really* small, partly because lists are really expensive to traverse.
10:03:34 <triliyn> Lists are expensive to traverse?
10:04:03 <kuribas> I thought lists are much cheaper to traverse than trees...
10:04:11 <geekosaur> they're singly linked lists. if you want vectors, use Data.Vector
10:04:16 <triliyn> Maps are the same, aren't they? It's just that you traverse much fewer
10:04:55 <Platz> are there any redeeming qualities of regular lists at all, it seems like every problem is solved better by another structure
10:05:06 <c_wraith> triliyn: but my point was that when there's already a lot of overhead, the point at which you benefit from trimming some of that overhead comes much sooner.
10:05:21 <c_wraith> Platz: regular lists are loops.
10:05:23 <triliyn> c_wraith: hmmm, okay
10:05:38 <kuribas> Of course Map creation is more expensive than an association list.
10:05:47 <triliyn> Platz: which is to say, lists are fine if what you want to do is process every element in sequence
10:05:50 <kuribas> With map balancing etc...
10:05:58 <kuribas> Tree balancing I mean.
10:06:09 <Platz> hrmm, that's a nice way to think about it
10:06:16 <triliyn> In these cases, more specialized structures don't really offer much because there's no way around O(n)
10:07:57 * hackagebot chatty 0.5.0.0 - Some monad transformers and typeclasses to simplify I/O on a transformer stack.  http://hackage.haskell.org/package/chatty-0.5.0.0 (implementation)
10:14:35 <jmcarthur> Platz: under some interpretations, lists are loops/generators. under others, they are purely functional stacks.
10:14:56 <Flonk> my (compiled) script is running out of memory, how can I throw more RAM at it?
10:16:20 <Kron_> Flonk: it may be a problem in how you've constructed the script
10:16:40 <Platz> depending on construction they're almost the same thing then
10:16:46 <Kron_> if you're not careful you can accidentally create very large stacks of deferred evaluations that then cause the system to crash
10:17:13 <Kron> Do you know of seq?
10:18:04 <Flonk> Kron: I'm plowing through gigantic text files, so I'd expect it to need a couple of GB of RAM
10:18:14 <Kron> what're you doing to those text files?
10:18:15 <Flonk> Although I'd probably need to use foldl' more often, yes
10:18:39 <Kron> right, first step I usually do is make sure all my folds are foldr or foldl'
10:18:58 <Kron> (and only foldr if it's supposed to generate results that are immediately consumed I guess)
10:19:27 <Flonk> Kron: counting words, turning them into histograms and doing things with them (I pulled all the porn video titles from xnxx and trying to write a random porn title generator to be precise)
10:19:42 <Kron> hmmm
10:19:48 <Kron> yes, that could be literally a ram issue then
10:19:55 <zomg> Flonk: lol, nice idea
10:19:56 <Kron> you'd have to store all the titles in a large structure
10:20:19 <triliyn> Does anyone know where I can read The Design of a Pretty-printing Library in Advanced Functional Programming, Johan Jeuring and Erik Meijer? The link in Text.PrettyPrint is broken
10:20:29 <kuribas> interesting: https://github.com/nh2/haskell-ordnub
10:20:49 <Kron> I'm not sure how to do memory debugging in haskell
10:20:49 <Flonk> Kron: right, so I wanted to try giving the program more resources
10:20:56 <triliyn> (Alternately, some other discussion of how PrettyPrint works)
10:20:56 <merijn> triliyn: Have you tried Google Scholar searching the title?
10:21:11 <triliyn> hmmm, I've googled, but not in scholar mode
10:21:16 <merijn> triliyn: Google Scholar is pretty good at turning up papers
10:21:21 <triliyn> Thanks
10:22:03 <isaacbw> and even better, links to free PDFs :D
10:22:10 <triliyn> aha, found it!
10:22:25 <Flonk> zomg: The titles on there sound mostly random to begin with, so I thought it would be a fun project :P
10:22:41 <Kron> I'm pretty sure you could make a very interesting markov model
10:22:46 <Kron> from a large corpus of porn titles
10:22:49 <merijn> Kron: Real World Haskell has a chapter on memory profiling Haskell programs
10:22:50 <isaacbw> you need to create a heuristic for how "hot" the title is Flonk
10:22:53 <isaacbw> and optimize for that
10:22:56 <Kron> I'd love to see procedurally generated porn titles
10:23:00 <Kron> merijn: thanks
10:23:34 <Flonk> isaacbw: XD any ideas?
10:23:52 <isaacbw> Flonk: I wonder if you could create a model based on the best selling porn titles
10:23:58 <merijn> Flonk: Wait, are you reading text files as String?
10:23:59 <nomeata> int-e: I’d like this to be supported by lambdabot: https://github.com/mokus0/lambdabot/pull/77
10:24:22 <Flonk> merijn: I am, but now that you mention it I should probably switch to text!
10:24:31 <Kron> we should try to derive a syntax tree from porn titles
10:24:37 <Kron> maybe even our own esoteric programming language
10:24:43 <Kron> like whitespace or lolcode
10:24:50 <merijn> Flonk: String can take up to 20 bytes per character, so several GB of RAM may turn into quite a lot more
10:24:54 <isaacbw> can anyone give me a brief summary of the differences between snap, happstack, and yesod? Could I say that they are ordered by power/flexibilty as snap->happstack->yesod and have the same ordering for complexity?
10:25:19 <merijn> Flonk: Text can easily take an order of magnitude less space
10:26:47 <Flonk> I've been wanting to take a look at Data.Text before, so that should be fun
10:27:37 <zomg> Kron: so it would be like ArnoldC, except with Ron Jeremy quotes?
10:27:39 <Kron> Data.Text is basically strings but objectively better
10:27:49 <SrPx> Hello friends. Please, help me. I'm trying to install haste, ghcjs and fay. I've managed to install fay but not the other 2. For ghcjs, I uninstalled everything haste-related and installed GHC 7.8.1, then I installed haskell-platform again for cabal etc. Then I tried to run `cabal install haste-compiler` and I get a lot of errors: http://lpaste.net/101280 - similar errors happen with `cabal install fay fay-base`. I don't know what to do anymore
10:27:59 * hackagebot hchesslib 0.1.0.0 - Chess library  http://hackage.haskell.org/package/hchesslib-0.1.0.0 (MiikaPetteriMatikainen)
10:28:42 <pyon> I need a double-ended queue, with operations "prepend, append :: a -> Deque a -> (Deque a, Token)" and "splitAt :: Token -> Deque a -> (Deque a, Deque a)". What librar(y|ies) would you recommend me?
10:29:26 <Peaker> SrPx: ld: library not found for -lHStext-1.1.0.1-ghc7.8.20140130 <-- is your actual error
10:29:28 <jmcarthur> isaacbw: in order of most rails-like to least rails-like:   yesod, snap, happstack.   in order of most type safe to least type safe:   yesod, happstack, snap.   all three are quite modular, though, and you can pick and choose components of each to make a frankenstein's monster, if you want.
10:29:41 <Kron> pyon: frankly you can probably just write your own, really easily
10:29:44 <Peaker> SrPx: something's messed up with your GHC 7.8 installation of the text package apparently
10:30:02 <isaacbw> jmcarthur: ah, thanks! I actually don't necessarily want a rails-like system, but I do like the idea of it being more typesafe
10:30:18 <Kron> pyon: but yeah, I don't know of any existing library that does this. They probably exist.
10:30:34 <jmcarthur> isaacbw: yesod features a lot of template haskell and DSLs
10:30:38 <SrPx> Peaker: so should I just uninstall everything and try once again? This time maybe I install haste-package before GHC 7.8 ?
10:30:43 <SrPx> haskell-platform*
10:30:58 <Peaker> SrPx: did you just run "cabal install" commands or did you manually mess with files?
10:31:05 <Peaker> SrPx: what platform are you on?
10:31:12 <Peaker> SrPx: Linux? OSX?
10:31:22 <jmcarthur> isaacbw: i think it's worth getting familiar with all three, since they actually work very well together
10:31:48 <jmcarthur> isaacbw: you will like different parts of each one
10:31:55 <isaacbw> jmcarthur: ah, interesting
10:32:19 <SrPx> Peaker: I did: 1. uninstall everything haskell related, some things had to be deleted manually. 2. Download GHC 7.8 and install following instructions. 3. Download haskell-platform and install using the installer. 4. cabal-update. 5. Those commands. ---- no manual messing at all. OSX
10:32:29 <jmcarthur> isaacbw: relative to most web "frameworks," these are more like libraries and give you more freedom to decide how to piece together the final product.
10:32:42 <Platz> I'm waiting for 7.8 final, wasn't exactly a smooth ride trying to cabal install things under RC1
10:33:21 <Peaker> SrPx: what did you delete manually? Both ~/.cabal and ~/.ghc? Only the former?
10:33:44 <bennofs> SrPx: I don't think haskell platform works with 7.8. Maybe try skipping this step?
10:34:51 <Platz> SrPx: 7.6.3 is pretty good.  can't imagine why'd you'd need to be on 7.8 so soon
10:34:57 <SrPx> Peaker: I don't remember, I just noticed ghc was still available regardless of uninstalling everything as suggested on the official site. so I deleted the binary (using `which ghc`)
10:35:00 <geekosaur> they want ghcjs
10:35:00 <bennofs> Platz: ghcjs requires 7.8
10:35:05 <Platz> ahh
10:35:43 <stolaruk> SrPx: What version of Mac OS?
10:36:03 <SrPx> well dones anyone know which produces faster code of the 3? the only reason I'm installing them is to chose the fastest. if someone did already then problem solved
10:36:07 <SrPx> stolaruk: mavericks
10:36:32 <SrPx> if someone tested already*
10:36:52 <stolaruk> I'm wondering if this could be relevant? https://www.haskell.org/platform/mac.html  -- You may have to run the ghc-clang-wrapper script on this pg
10:37:36 <stolaruk> I was getting compile errors on Mavericks and that script solved my problems
10:37:46 <flebron> So... again some cabal hell. Is category-extras installable? I get this error message: http://lpaste.net/101282
10:37:53 <SrPx> stolaruk: well I didn't because I already have gcc clang everything but... let me try, then
10:38:16 <stolaruk> SrPx: oh ok... well it's kind of just a hunch
10:38:17 <jmcarthur> flebron: category-extras is deprecated
10:38:34 <flebron> Ah, OK. Where can I find Cata, Ana, and the like?
10:38:38 <edwardk> category-extras is not installable. it has ben split into about 20 packages
10:38:42 <Kron> Alright, I have a stylistic question. My current quadtree implementation uses an external wrapper type that i'm calling quadtree and an internal actual-tree-representation with leafs and nodes that I'm calling... ???
10:38:46 <edwardk> flebron: recursion-schemes
10:38:49 <jmcarthur> and we found an edwardk highlight!
10:38:50 <Kron> I'm not sure. BareTree? RawTree?
10:38:52 <Kron> InnerTree?
10:38:52 <edwardk> er been
10:39:14 <flebron> Thanks :) (I got to "category-extras" from clicking the package names in http://comonad.com/reader/2009/recursion-schemes/ )
10:39:33 <edwardk> yeah that post is ... old =)
10:39:55 <edwardk> he current version of category-extras contains documentation links to the diaspora
10:40:07 <edwardk> or at least a big chart
10:41:01 <edwardk> if i had to guess, dmwit needs to update the version bounds on the placeholder category-extras
10:41:21 <paroxyzm> hello! How can I achieve this: takeWhileSum (<= 10) [1..10] -- results in [1..4]
10:41:36 <bennofs> paroxyzm: why do you want that?
10:41:42 <bennofs> paroxyzm: nvm
10:42:19 <Taneb> > scanl1 (+) . takeWhile (<= 10) $ [1..10]
10:42:19 <Flonk> paroxyzm: scanl1 is your man!
10:42:20 <lambdabot>  [1,3,6,10,15,21,28,36,45,55]
10:42:36 <Taneb> Um...
10:42:41 <Taneb> No, wait
10:42:53 <Taneb> It's trickier than that
10:42:55 <Flonk> Taneb: other way around
10:43:00 <Taneb> Flonk, not quite
10:43:06 <bennofs> > let xs = [1..10] in map fst $ takeWhile ((<= 10) . snd) $ zip xs (scanl1 (+) xs)
10:43:06 <lambdabot>  [1,2,3,4]
10:43:49 <bennofs> > let xs = [1..10] in map fst $ takeWhile ((<= 10) . snd) $ zip xs (drop 1 $ scanl (+) 0 xs)
10:43:51 <lambdabot>  [1,2,3,4]
10:44:20 <Flonk> > zipWith const [1..] $ takeWhile (<=10) (scanl1(+) [1..])
10:44:21 <lambdabot>  [1,2,3,4]
10:44:56 <paroxyzm> ok which is more efficient?
10:46:03 <bennofs> paroxyzm: I don't think that the difference in perfomance matters
10:46:33 <paroxyzm> Thanks, i will try to grasp it.
10:48:08 <Kron> you can do "zip <*> drop 1 . scanl (+) 0"
10:48:20 <Kron> but yeah i think that's more confusing than readable
10:48:24 <Kron> especially to someone new
10:48:33 <bennofs> Kron: nice :) You only forgot the takeWhile
10:48:41 <Kron> I was focusing on the last bit
10:49:08 <Kron> i generally like to replace repeated arguments with some applicative thing
10:49:29 <bennofs> > zipWith const <*> takeWhile (<= 10) . drop 1 . scanl (+) 0 $ [1..10]
10:49:30 <lambdabot>  [1,2,3,4]
10:49:51 <Kron> hah, nice
10:49:56 <Kron> didn't realize I could push it further left
10:51:20 <Flonk> bennofs: now make that scanl1 and you don't even need the drop :)
10:51:34 <Flonk> > zipWith const <*> takeWhile (<= 10) . scanl1 (+) $ [1..10]
10:51:35 <lambdabot>  [1,2,3,4]
10:51:36 <bennofs> Flonk: scanl1 breaks on an empty list, doesn't it?
10:51:47 <bennofs> > scanl1 (+) []
10:51:48 <lambdabot>  []
10:51:51 <bennofs> oh
10:52:03 <bennofs> Didn't realize that scanl1 could work in the case of an empty list
10:56:44 <Luke> anyone here use vagrant to run cabal for linux compiling? I'm having an issue where 'vagrant ssh -c "cabal build"' doesn't wait for the linker to finish and I get a binary of zero size
10:58:02 * hackagebot chatty 0.5.1.0 - Some monad transformers and typeclasses to simplify I/O on a transformer stack.  http://hackage.haskell.org/package/chatty-0.5.1.0 (implementation)
10:58:04 * hackagebot antisplice 0.12.0.0 - An engine for text-based dungeons.  http://hackage.haskell.org/package/antisplice-0.12.0.0 (implementation)
10:58:24 <vozz> Anyone familiar with HandsomeSoup? How do I get the text from a tag rather than one of its attributes?
11:05:12 <c_wraith> vozz: -Soup libraries present tag streams, in general. I'd expect text nodes to be part of the stream, not contained inside another tag.
11:06:13 <c_wraith> vozz: Huh.  Looks like it's really quite misnamed.  It's just an alternate frontend to hxt
11:07:06 <pavonia> vozz: Here are some examples: http://adit.io/posts/2012-04-14-working_with_HTML_in_haskell.html#working-with-text
11:07:11 <honza> what's the current best syntax highlighting plugin for vim?
11:10:24 * flebron tries to install recursion-schemes, needs to reinstal semigrupoids with -p. To do that, he needs to reinstall groupoids with -p. To do that, he needs to reinstall nats with -p. And each of these steps will definitely break several packages. The joys of cabal.
11:10:25 <vozz> I figured it out, you do //> getText instead of ! "attribname"
11:10:57 * flebron wonders if there's a way to just say "You know what? Reinstall everything with -p, but you figure out the order dude."
11:11:25 <peteretep> What does -p do?
11:11:53 <flebron> Add profiling versions of the package.
11:13:52 <julianb> Hey!. I'm trying to watch some directories using FSNotify, but I'm having trouble converting String to FilePath: http://lpaste.net/101284 . Any help would be appreciated
11:15:15 * flebron just found --reinstall world, perhaps that works...
11:15:24 <Twey> julianb: FilePaths are already Strings
11:15:52 <Twey> Huh, is that no longer true?
11:15:58 <julianb> Twey, well, yeah, but ghc's complaining nevertheless
11:16:01 <bennofs> Twey: it's the FilePath type from Filesystem.Path.CurrentOs
11:16:07 <bennofs> Twey: system-filepath package
11:16:12 <bennofs> @hackage system-filepath
11:16:12 <lambdabot> http://hackage.haskell.org/package/system-filepath
11:17:01 <bennofs> julianb: import qualified Filesystem.Path.CurrentOS as FP
11:17:19 <bennofs> julianb: then use FP.decodeString :: String -> FilePath
11:18:09 <Twey> Oh, this is a different package
11:18:15 <Twey> Yeah
11:19:54 <julianb> alright, I'll try :). Thanks!
11:19:58 <no-n> @src permutations
11:19:58 <lambdabot> Source not found. You untyped fool!
11:20:05 <no-n> ;-;
11:20:31 <pyon> When should I use FunctionalDependencies vs. TypeFamilies?
11:20:52 <pyon> Is it primarily a matter of style, or are there some guidelines?
11:20:53 <exicer> I'm messing around with a project in scotty, and have written an auth function that takes a cookie from the user, and returns maybe cookie. When I'm checking a requests authentication, I end up having case statements. Is there a better way of doing this ?
11:22:04 <Twey> pyon: It's a matter of style.  Some things are nicer to express with fundeps, like bijections.
11:22:36 <Twey> pyon: But I generally start out with type families first, because I find them easier to reason about, and then try rewriting with fundeps later
11:22:46 <pyon> Ah!
11:23:24 <Luke> any help here would be nice: https://stackoverflow.com/questions/22440860/why-does-vagrant-ssh-c-cabal-build-yield-an-empty-binary
11:26:27 <Cubic_> Hi - does anyone here know if there's a library that exposes MonadIO versions of common IO functions? If not, is there a reason why there shouldn't be? (It seems much more convenient compared to sprinkling liftIO all over your code)
11:26:54 <enthropy> Cubic_: http://hackage.haskell.org/package/lifted-base
11:27:37 <joelteon> we should do something about that
11:27:39 <enthropy> I think there are others
11:28:08 <enthropy> http://hackage.haskell.org/package/classy-prelude-0.8.0.1/docs/ClassyPrelude.html#g:17
11:28:38 <enthropy> which is slightly different because that FilePath isn't equal to String
11:31:15 <Cubic_> Hm... classy-prelude looks like it could be useful for me. Thanks. Can you think of a reason why I shouldn't be doing this? It seems innocent enough and it doesn't require me to change the type signatures (at worst, at some at some places)
11:31:24 <flebron> In the bananas and barbed wire paper, why is the sum of two types A + B defined as ({0}||A U {1}||B U \bottom)? Why add the \bottom there?
11:31:31 <joelteon> so I think I need to store a sum datatype in a database
11:31:40 <joelteon> but databases aren't really designed for that
11:32:03 <vanila> flebron, it's when you can't tell whether it's a 0 or a 1
11:32:16 <flebron> vanila: "Can't tell"?
11:32:18 <vanila> Left x, Right y, undefined act different
11:32:36 <vanila> I mean even if x,y and are undefined
11:33:05 <flebron> Well when defining the product no x was introduced, and (_, _) and undefined act different.
11:33:13 <cdk> I have a program that spends most of its time computing the euclidean distance between RGB values, I need a fast, efficient, branchless unsigned word8 difference function, so (0 :: Word8) `diff` 255 == 255 and (255 :: Word8) `diff` 0 == 255. Does anyone know some bit-twiddling hacks to accomplish this?
11:33:13 <flebron> *no \bottom was introduced
11:33:31 <vanila> I think that (undefined, undefined) = undefined
11:33:39 <vanila> since they act the same
11:33:45 <flebron> Do they?
11:33:49 <vanila> well consider
11:33:50 <flebron> f (_, _) = 1
11:34:05 <flebron> f (undefined, undefined) = 1, but f undefined = undefined
11:34:13 <c_wraith> cdk: by the examples given, xor qualifies. :P
11:34:45 <vanila> hm that's true
11:34:56 <cdk> c_wraith: technically correct, the best kind :) But I need it in general
11:35:31 <c_wraith> cdk: you want a branchless equivalent to max a b - min a b ?
11:35:44 <cdk> yes
11:36:11 <Fuuzetsu> just make a function with 255^2 cases ;)
11:36:22 <c_wraith> cdk: well, I'm not the person to figure that out.  But at least I clarified the question!
11:36:32 <vanila> flebron, if you write everthing using folds rather than allowing patten matching - you can't tell (undefined,undefined) and undefined apart though
11:37:43 <flebron> vanila: What do you mean by "everything"?
11:38:00 <Fuuzetsu> 256 even
11:38:07 * hackagebot ironforge 0.1.0.9 - A technical demo for Antisplice.  http://hackage.haskell.org/package/ironforge-0.1.0.9 (implementation)
11:38:09 <vanila> ummm
11:38:28 <vanila> not sure if you want my help
11:40:06 <cdk> i suppose with the new primops (a >=# b) * (a - b) + (a <=# b) * (b - a) works, I'll see how that performs
11:40:33 <cdk> that would be branchless I believe
11:40:44 <c_wraith> Oh, hey.  That's clever.
11:41:00 <c_wraith> This is why I don't do bit things. :)
11:49:02 <stolaruk> I recently turned my project into a proper cabal project, using "cabal init" to make my ".cabal" file. When I import a new library, now I have to list that library in the cabal file as well. How can I know what lib version constraints to specify? "cabal init" auto-generated constraints such as "text >=0.11 && <0.12"... how can I determine those numbers?
11:49:54 <c_wraith> stolaruk: cabal init just guessed "keep the same major version as currently installed", where the major version is the first two dotted segments
11:50:14 <stolaruk> ok
11:50:26 <stolaruk> so do ppl usually manually edit the ver #s in the auto generated .cabal?
11:51:09 <Algebr> I'm defining a function in a where clause but pattern matching in this where clause is giving me parse errors about incorrect indentation and whatnot. Is pattern matching not allowing in where clause function definitions?
11:51:28 <stolaruk> Algebr: Are you using tabs in your code?
11:51:34 <Algebr> stolaruk: yes.
11:51:43 <stolaruk> Algebr: Change them to spaces. Tabs will cause you pain
11:52:01 <Algebr> stolaruk: But I'm in haskell mode, I thought it would take care of that for me.
11:52:09 <stolaruk> Algebr: If your text editor has a setting to expand tabs to all spaces, use that
11:52:16 <Algebr> stolaruk: Also, how many spaces?
11:52:17 <Twey> stolaruk: So long as the library authors obey the versioning conventions, it should be safe to allow changes to the two least significant version fragments, modulo namespace clashes if you've imported them unqualified
11:53:14 <stolaruk> Algebr: Usually put "where" on it's own line, indented two spaces more than the previous line. The lines below the "where" should be indented two more than the "where" line
11:53:17 <joelteon> how should I convert a Scientific to a Double? realToFrac?
11:53:41 <Algebr> What's the site for code snippets used here?
11:53:46 <hpc> @where hpaste
11:53:46 <lambdabot> http://lpaste.net/new/haskell
11:53:50 <pavonia> Algebr: A tab is expanded to 8 spaces in Haskell implementations, IIRC
11:54:09 <stolaruk> I use 4
11:54:12 <stolaruk> fwiw
11:55:22 <stolaruk> Algebr: see http://lpaste.net/101290
11:56:47 <Algebr> stolaruk: is this even correct ? http://lpaste.net/101291
11:57:05 <stolaruk> Twey: Thanks. Is it considered bad practice to list your dependent libraries in your .cabal without providing any ver #s?
11:57:30 <bennofs> stolaruk: it's disputed. Some people don't use ver #s, some do
11:57:46 <stolaruk> interesting
11:57:51 <stolaruk> Algebr: one moment
11:58:06 <c_wraith> version numbers matter a lot less for applications than they do for libraries
11:58:24 <pavonia> What is "ver #s"?
11:58:33 <bennofs> pavonia: version numbers
11:58:49 <pavonia> Ohh
11:58:52 <c_wraith> If it's just the code you're working on?  Whatever.  If it's a library you intend other people be able to use?  Please supply version constraints on your dependencies, so that people have a hope of building it.
11:59:19 <c_wraith> things on hackage tend to be willing to aggressively update their dependencies.
11:59:30 <c_wraith> And the ways they're using them.
11:59:42 <joelteon> @djinn [(a, Either t b)] -> Either t [(a, b)]
11:59:42 <lambdabot> Error: Undefined type []
11:59:52 <joelteon> there's a thing that can do that, right
12:00:12 <vanila> joelteon, what about []?
12:00:16 <geekosaur> I think there's a newer djinn that can handle recursive types, but nobody ever added it to lambdabot
12:00:20 <c_wraith> joelteon: looks kinda like traverse
12:00:21 <vanila> you need a t or an a and a b
12:00:23 <c_wraith> :t traverse
12:00:24 <lambdabot> (Applicative f, Traversable t) => (a -> f b) -> t a -> f (t b)
12:00:50 <joelteon> would that work?
12:01:04 <c_wraith> traverse won't work by itself, but it will with a little help
12:01:27 <vanila> you can't write a function f :: [(a, Either t b)] -> Either t [(a, b)] since there's nothing for f [] to be
12:01:28 <joelteon> first step is (a, Either t b) -> Either t (a, b)
12:01:52 <c_wraith> vanila: it can be Right []
12:01:54 <bennofs> vanila: what isabout Right []?
12:02:19 <c_wraith> :t strength
12:02:20 <lambdabot> Not in scope: `strength'
12:02:51 <c_wraith> joelteon: correct.  And you can write that function.  \(x, y) -> fmap ((,) x) y
12:02:55 <bennofs> :t (traverse._2 $ id) `asAppliedTo` (undefined :: [(a, Either t b)])
12:02:56 <lambdabot> [(a, Either t b)] -> Either t [(a, b)]
12:03:02 <bennofs> _2 is from lens
12:03:11 * hackagebot WeberLogic 0.1.0.0 - Logic interpreter  http://hackage.haskell.org/package/WeberLogic-0.1.0.0 (cameronbwhite)
12:03:49 <bennofs> you can write _2 f (x,y) = (,x) <$> f y
12:04:01 <bennofs> s/(,x)/(x,)
12:04:24 <c_wraith> only with -XTupleSections.  Can that extension get added to the next standard?
12:04:27 <vanila> oh stupid me!
12:04:43 <c_wraith> vanila: it's ok.  We all miss things sometimes.  (or a lot, in my case)
12:05:33 <c_wraith> Seriously, why did no one get the equivalent of TupleSections into '98?
12:05:35 <stolaruk> Bah Algebr left
12:06:20 <c_wraith> vanila: I heard edwardk even missed something once.  (I'm sure it's just a rumor.)
12:06:40 <stolaruk> Algebr: See here http://lpaste.net/101291
12:06:49 <Algebr> stolaruk: Ah, thank you, I got disconnected.
12:07:03 <stolaruk> Algebr: Glad you made it back :)
12:07:26 <Algebr> stolaruk: Wow, looks much better. So as a general rule, leave where on its own line?
12:07:32 <c_wraith> Algebr: he was actually sad that you weren't going to be able to see that. :)
12:07:39 <stolaruk> Algebr: YEah I think so
12:07:46 <peteretep> Algebr: whatever you think looks prettier
12:08:21 <Algebr> ha, thanks all. Also, anyone here going to April NYC hackathon?
12:08:51 <stolaruk> Algebr: You can indent to your taste, but keep in mind that indentation has syntactic meaning: it delimits code blocks. Thus you can make the compiler mad if you don't do it right. Be consistent according to your taste
12:09:38 <flebron> I'm looking at cata in Data.Functor.Foldable. How can I give it [] and : to produce id :: [a] -> [a]?
12:09:46 <Shammah_> Hmm, what is the susual style convention? (Ord k) => or with parenthesis Ord k => ?
12:09:49 <Shammah_> *usual
12:10:03 <stolaruk> Shammah_: I've seen both
12:10:14 <dmj`> Shammah_: use parens if you are using multiple type classes, o/w no parens work
12:10:22 <Shammah_> that sounds reasonable
12:10:37 <c_wraith> Shammah_: Whatever you want.  I've never seen anyone complain about the presence or absense of parens when they're optional there.
12:10:38 <stolaruk> Shammah_: Some ppl will put parens around it even if there is just one typeclass restriction
12:10:47 <stolaruk> as you've seen
12:11:10 <stolaruk> I do that as I think it  improves readability a bit
12:11:11 <c_wraith> Unlike at the value level, where I do see people (including myself) complain about redundant parens.
12:12:09 <stolaruk> QuickCheck question. Is there a fancy way to make Text an instance of Arbitrary, or should I just make my property functions accept String, which I them promptly pack?
12:13:13 * hackagebot WeberLogic 0.1.1 - Logic interpreter  http://hackage.haskell.org/package/WeberLogic-0.1.1 (cameronbwhite)
12:14:05 <bennofs> stolaruk: This package: http://hackage.haskell.org/package/quickcheck-instances provides an instance for Text
12:14:15 <stolaruk> oh interesting
12:14:19 <startling> stolaruk, instance Arbitrary Text where arbitrary = pack <$> arbitrary
12:14:21 <dmj`> On osx mav I reinstalled haskell-platform 64-bit, updated cabal to latest, created a new sandbox in my project and attempted to run cabal install and go "cabal: The following packages are likely to be broken by the reinstalls: haskell-platform-2013.2.0.0, use --force-reinstalls to override"
12:14:30 <dmj`> and got *
12:15:05 <startling> toddpratt: (you should prefer importing instances over writing them yourself, though)
12:15:08 <startling> er
12:15:09 <startling> stolaruk: ^
12:15:21 <startling> (but it's probably not a big deal for a test suite)
12:15:48 <stolaruk> startling: I was trying to write something similar to what you have there, but couldn't get it to work. Thanks.
12:15:53 <stolaruk> Will look into the package
12:16:18 <startling> stolaruk: no problem! Arbitrary isntances are pretty easy once you get the hang of them.
12:17:14 <stolaruk> Yeah I am getting a warning form the linter: Orphan instance: instance Arbitrary T.Text
12:17:27 <stolaruk> That's what I was seeing when I was trying to write an instance
12:21:37 <startling> stolaruk: oh, yeah, that's just saying "you defined an instance with a class and type neither of which you wrote"
12:22:04 <startling> stolaruk, it's a Bad Thing because instances are global, so no one can import your thing and another thing that defines that instance
12:22:10 <stolaruk> apparently the instances in quickcheck-instances are also orphans
12:22:21 <startling> so it's better to leave instances to the class or type authors.
12:22:31 <stolaruk> I see. Presently googling how to make -Wall not get upset at this
12:23:08 <enthropy> the easiest way to look up flags for ghc is probably to type :set -fno-warn-<tab> in ghci
12:23:08 <stolaruk> Ah here it is "{-# OPTIONS_GHC -fno-warn-orphans #-}"
12:23:32 <stolaruk> enthropy: Oh I didn't think of that, thanks
12:23:55 <startling> haha
12:24:27 <startling> but yeah, people are not perfect and sometimes you need orphan instances, alas.
12:24:47 <SrPx> OK guys I have just installed a clean ubuntu VM here. Would you tell me the best path to install everything so I can get Haste, GHCJS and Fay working without messing up with everything again? Should I install haskell-platform from the site, then GHC 7.8, then the libs? Or should I apt-get haskell, or what?
12:25:01 <ezrios> http://book.realworldhaskell.org/read/using-parsec.html
12:25:08 <ezrios> I don't understand "csv9.hs" about halfway down the page
12:25:09 <startling> SrPx: install 7.8 from the ghc site
12:25:09 <startling> I think they have .debs
12:25:23 <ezrios> why do two consecutive quotation marks
12:25:25 <ezrios> parse into a single one?
12:25:27 <startling> SrPx: do not install haskell-platform at all
12:25:46 <startling> SrPx: you may need to install cabal and cabal-install from source if you go this route, I forget.
12:25:51 <ezrios> It seems very bizarre that the result of ` """" ` is `"`
12:26:35 <startling> SrPx: then you should be able to cabal install all those things (barring dependencies that don't yet work on 7.8)
12:26:51 <dmj`> ezrios: I don't see that
12:26:53 <flebron> [a] can never have an algebra, right? (As in [a] -> a) (Which is total)
12:27:11 <ezrios> dmj`: quotedChar =
12:27:14 <ezrios>         noneOf "\""
12:27:15 <ezrios>     <|> try (string "\"\"" >> return '"')
12:27:27 <SrPx> hmm okay, thanks startling lets see if I can get it this time
12:27:46 <ezrios> I even tried compiling the example and feeding it a file containing only """" and a newline
12:27:52 <ezrios> the result was ["\""]
12:28:02 <SrPx> startling: ghc-7.8.0.20140228-i386-unknown-linux-deb7.tar.bz2 correct?
12:28:07 <flebron> I'm doing the usual data F a x = Nil | Cons a x, data List a = Fix (List a), and trying to define cata for List.
12:28:28 <vozz> How do I group output from arrows? Or how do I group children when using HXT? https://gist.github.com/ollieh/117071482c57ec29eade
12:29:08 <dmj`> ezrios: '\' is invalid in a string unless it's esacped properly
12:29:48 <ezrios> dmj`: so you're telling me that four consecutive quotation marks produces invalid output?
12:29:53 <ezrios> at least, for this parser
12:30:21 <startling> SrPx: that should do it.
12:30:26 <SrPx> (:
12:31:16 <nisstyre> flebron: I'm confused about your F type, isn't it basically just a product type with a Nil variant?
12:31:25 <nisstyre> and what's the definition of Fix?
12:31:36 <nisstyre> I assume it has something to do with recursive types
12:31:37 <flebron> newtype Fix f = InF { outF :: f (Fix f) }
12:31:45 <nisstyre> okay
12:31:50 <flebron> Fix (F a) is isomorphic to the type [a]
12:32:21 <stolaruk> Wow, I realized that -fno-warn-orphans must come AFTER -Wall in my OPTIONS_GHC pragma. Glad I figured that out quick; that could have taken hours to figure out
12:32:22 <flebron> In Nil, In (Cons 3 (In Nil)), In (Cons 3 (In (Cons 5 (In Nil)))), ...
12:33:15 * hackagebot antisplice 0.12.1.0 - An engine for text-based dungeons.  http://hackage.haskell.org/package/antisplice-0.12.1.0 (implementation)
12:33:18 * hackagebot antagonist 0.1.0.3 - A web interface to Antisplice dungeons.  http://hackage.haskell.org/package/antagonist-0.1.0.3 (implementation)
12:34:21 <flebron> Oh, I guess there will be an algebra for specific type instantiations.
12:34:56 <flebron> So for example, f Nil = 42, f (Cons a x) = a is an algebra.
12:35:08 <Cubic_> Sorry, philosophical question: Is it a good idea to wrap IO in ErrorT? I prefer making the whole "exception" thing explicit, but of course exceptions are already built into IO
12:35:19 <flebron> But there won't be a "universal algebra".
12:36:52 <Fuuzetsu> vozz: sorry I couldn't be of much help in the thread
12:37:11 <ezrios> ah okay
12:37:39 <ezrios> apparently it is a csv convention that quotes inside quotes must be doubled up?
12:37:49 <ezrios> e.g. "Shirt, ""O'Reilly"" version"
12:37:52 <monochrom> there is an algebra from F a (List a) to List a. it is also an initial algebra
12:38:29 <vozz> Fuuzetsu: Ah, you're the guy in the thread? I think I've got some way to managing it
12:38:57 <Fuuzetsu> Yeah, that was me. Out of interest, what did you figure out? Personally I don't use the css arrow.
12:39:11 <merijn> Cubic_: The answer is: Yes, it's good. IO's unchecked exceptions should be as little as possible
12:39:48 <pavonia> ezrios: According to the RFC yes
12:40:07 <vozz> https://gist.github.com/ollieh/fcc989ff2f3540ef3f18 I've got this so effectively ive got a list of ids, so whenever it changes i need to insert the _____
12:40:10 <ezrios> pavonia: gah, maybe I should have looked at the spec
12:40:13 <ezrios> would have saved a lot of confusion
12:40:55 <vozz> If I have a list like [1,1,1,1,1,2,2,2,2,2,2,6,6,6,6,6,6,6,6,6,3,3,3,3,3] and I wanted to insert a 0 wherever the numbers change, how would I do that?
12:41:15 <dmj`> ghc 7.9 is out?
12:41:15 <Fuuzetsu> vozz: but that still doesn't work, check the beginning of the output (which is always sticky)
12:41:19 <vozz> so [1,1,1,1,1,0,2,2...]
12:41:22 <Fuuzetsu> the presence of links &c breaks it
12:41:25 <merijn> dmj`: Odd numbers are development versions
12:41:31 <merijn> dmj`: So 7.9 is just HEAD
12:41:33 <Fuuzetsu> @hoogle groupBy
12:41:33 <lambdabot> Data.List groupBy :: (a -> a -> Bool) -> [a] -> [[a]]
12:41:33 <lambdabot> Data.ByteString.Char8 groupBy :: (Char -> Char -> Bool) -> ByteString -> [ByteString]
12:41:33 <lambdabot> Data.ByteString.Lazy.Char8 groupBy :: (Char -> Char -> Bool) -> ByteString -> [ByteString]
12:41:41 <merijn> dmj`: 7.8 is currently release candidate
12:41:52 <Fuuzetsu> > group [1,1,1,1,1,2,2,2,2,2,2,6,6,6,6,6,6,6,6,6,3,3,3,3,3]
12:41:53 <lambdabot>  [[1,1,1,1,1],[2,2,2,2,2,2],[6,6,6,6,6,6,6,6,6],[3,3,3,3,3]]
12:41:54 <vozz> thanks
12:41:55 <ezrios> > intercalate [0] $ group [1,1,1,1,2,2,2,6,6,6,6,3,3,3]
12:41:56 <lambdabot>  [1,1,1,1,0,2,2,2,0,6,6,6,6,0,3,3,3]
12:42:00 <Iceland_jack> > intercalate [0] (group [1,1,1,1,1,2,2,2,2,2,2,6,6,6,6,6,6,6,6,6,3,3,3,3,3])
12:42:01 <lambdabot>  [1,1,1,1,1,0,2,2,2,2,2,2,0,6,6,6,6,6,6,6,6,6,0,3,3,3,3,3]
12:42:04 <ezrios> i win
12:42:07 <Iceland_jack> hah
12:42:09 <dmj`> merijn: and thats the "stable" release
12:42:22 <vozz> what if they were tuples of the number and something else?
12:42:35 <Iceland_jack> vozz: Then you use groupOf
12:42:38 <Fuuzetsu> groupBy
12:42:39 <vozz> ah, thanks
12:42:40 <Iceland_jack> *by
12:42:57 <merijn> dmj`: Once the final version of 7.8 is released it will be the stable one, yes
12:43:30 <Fuuzetsu> if it ever comes out
12:43:59 <bitemyapp> ezrios: dammit.
12:44:12 <ezrios> bitemyapp: wat
12:44:30 <bitemyapp> ezrios: I was working on the solution in my ghci but I am not fast enough :(
12:44:48 <ezrios> :<
12:44:51 <ezrios> you must do 1haskelladay
12:44:58 <dmj`> well 7.9 failed to build on osx for me
12:45:05 <bitemyapp> ezrios: followed, thanks.
12:46:07 <Fuuzetsu> who's running that channel? Some answers are… sub-par.
12:46:10 <flebron> monochrom: If I've defined List a in that way, as Fix (F a), how could I write (| 1, (*) |) to get the factorial?
12:46:19 <dmj`> I'm assuming 7.8 doesn't build on windows?
12:46:31 <ezrios> Fuuzetsu: yeah, I tend not to look at the solutions
12:46:51 <ezrios> that groupByStraights one is especially bad
12:46:51 <no-n> > filter (liftM2 (==) length (length . nub)) . liftM2 replicateM length id $ "abc"
12:46:52 <lambdabot>  ["abc","acb","bac","bca","cab","cba"]
12:46:52 <merijn> dmj`: Which OSX version?
12:47:08 <dmj`> 10.9.2
12:47:08 <Fuuzetsu> ezrios: I don't even follow it, someone pointed it out to me
12:47:34 <merijn> dmj`: Did you read the link in the topic on 10.9 issues? Not sure they've all been resolved for 7.9
12:51:12 <MagneticDuck> question! say you ran "replicateM 5 $ system "<terminal emulator>""
12:51:29 <MagneticDuck> it doesn't seem to do what one would think it does!
12:51:32 <MagneticDuck> at least, not on my system
12:51:42 <MagneticDuck> ...
12:51:44 <c_wraith> I would expect them to run serially
12:51:47 * MagneticDuck facepalms
12:51:53 <c_wraith> I don't expect system to be concurrent
12:51:59 <MagneticDuck> yes, ofc
12:52:16 <MagneticDuck> I can just add a & to the end of the system call xD
12:53:06 <merijn> Or you use a proper subprocess library instead of system ಠ_ಠ
12:53:18 * hackagebot Spock-worker 0.1.0.3 - Background workers for Spock  http://hackage.haskell.org/package/Spock-worker-0.1.0.3 (AlexanderThiemann)
12:53:24 <MagneticDuck> merijn: nah
12:53:26 <MagneticDuck> ^^
12:54:11 <MagneticDuck> those characters don't render but I imagine it's a face that's a little dissapointed with my lack of professionalism and overuse of "system"
12:54:31 <Fuuzetsu> MagneticDuck: http://fuuzetsu.co.uk/images/1394999431.png
12:55:05 <vozz> Fuuzetsu: I got it working: https://gist.github.com/ollieh/55bc517a61b0a6ac5493
12:55:19 <MagneticDuck> =P
12:55:24 <ezrios> wawaweewa, beautifulsoup in haskell?
12:55:45 <merijn> MagneticDuck: Looks like you need a unicode aware IRC client :p
12:55:55 <MagneticDuck> no, I need a unicode aware terminal
12:55:58 <vozz> not the greatest solution because it relies on them all having ids
12:56:05 <MagneticDuck> but actually I don't, it's the font I'm using that doesn't implement them
12:56:12 <flebron> Why can I say, if type Algebra f a = f a -> a, "List Int -> Int", but not "Algebra List Int"? (GHC complains that Type synonym `List' should have 1 argument, but has been given none)
12:56:21 <merijn> MagneticDuck: Get a better font then :p
12:56:39 <klrr_> Fuuzetsu: what's that font?
12:56:45 <klrr_> looks amazing
12:57:10 <merijn> klrr_: Monaco is the one true terminal font!
12:57:11 <MagneticDuck> merijn: but this font is nice!
12:57:49 <klrr_> i used ubuntu but now im on debian with shit font rendering so i use terminus
12:58:07 <klrr_> for some reason emacs renders font nice though so there i use ubuntu mono
12:58:18 * hackagebot chatty 0.5.1.1 - Some monad transformers and typeclasses to simplify I/O on a transformer stack.  http://hackage.haskell.org/package/chatty-0.5.1.1 (implementation)
12:58:30 <Chousuke> something must be misconfigured with your Debian then
12:58:38 <Chousuke> my fonts look just fine
12:59:01 <Fuuzetsu> klrr_: dunnolol
12:59:12 <Fuuzetsu> emacs says     xft:-unknown-DejaVu Sans Mono-bold-normal-normal-*-19-*-*-*-m-0-iso10646-1 (#x48)
12:59:40 <klrr_> Fuuzetsu: thanks!
12:59:41 <MagneticDuck> merijn: btw http://imgur.com/rmRn8Ve
13:01:01 <dmj`> merijn: ah gotcha, where can I find this link
13:01:03 <no-n> > liftM2 replicateM (const 4) id $ "01"
13:01:03 <lambdabot>  ["0000","0001","0010","0011","0100","0101","0110","0111","1000","1001","1010...
13:01:19 <MagneticDuck> https://www.youtube.com/watch?v=C0j6pe043L4 more great programming music =P
13:01:24 <shinchan> can anyone explain functional programming in simple words?
13:01:25 <monochrom> flebron: http://lpaste.net/101296
13:01:40 <ezrios> shinchan: programming with functions as the primary unit of abstraction
13:01:43 <merijn> MagneticDuck: http://fau5tln.home.xs4all.nl/monaco.png but this is probably now -blah territory :p
13:01:58 <merijn> ezrios: I disagree, I think ADTs are primary units of abstraction too
13:01:59 <dmj`> shinchan: there is no standard definition for the term functional programming
13:02:12 <MagneticDuck> eribeiro: I have to say, I like my font better
13:02:18 <Chousuke> usually they involve functions as first class values though
13:02:30 <shinchan> umm..
13:02:32 <Chousuke> at least if you're talking about functional programming languages
13:02:55 <MagneticDuck> shinchan: umm?
13:03:14 <Chousuke> you can do functional programming in Java too but it doesn't support the idea very well, hence it's not really a functional programming language.
13:03:54 <shinchan> I am trying to wrap my head around what makes Haskell and functionally languages different
13:04:07 <ezrios> merijn: I am not sure if ADTs sufficiently distinguish functional and object-oriented or procedural languages
13:04:12 <shinchan> and what is this "lambda" that I keep seeing everywhere?
13:04:22 <MagneticDuck> shinchan: it comes from "lambda calculus"
13:04:33 <merijn> ezrios: I think that's a false dichotomy
13:04:44 <MagneticDuck> lambda calculus is the mathematical base for modeling functional programming languages
13:04:45 <merijn> ezrios: You can easily imagine a functional OO language
13:04:49 <ezrios> merijn: it was not meant to be a dichotomy, you can of course have mixed paradigm languages
13:04:59 <monochrom> python and new c++ have lambda too. do you already know them?
13:05:04 <merijn> ezrios: Even non-mixed paradigms exist
13:05:06 <ezrios> but you can see that some languages tend to one end of the spectrum than the other
13:05:42 <shinchan> yeah, not in detail though
13:05:47 <ezrios> you can implement OOP in C
13:05:57 <monochrom> there is no detail to know.
13:05:59 <ezrios> but I don't think the language was designed with OOP in mind
13:06:16 <shinchan> Just wanted to see why some people are going so crazy about it
13:06:34 <monochrom> people go crazy. that's an axiom.
13:06:47 <Chousuke> shinchan: Haskell's style of functional programming is quite different from eg. most lisps though.
13:06:53 <ezrios> shinchan: well, give it a try and see why
13:07:00 <bitemyapp> shinchan: some people are ambitious and always seeking better ways of performing their work. Many programmers of that sort have found a blend of abstract algebra, type theory, and functional programming to be a compelling way forward.
13:07:12 <bitemyapp> shinchan: way to know is to learn.
13:08:01 <shinchan> played here for a while : http://tryhaskell.org/
13:08:14 <MagneticDuck> that's a nice site
13:08:18 <ezrios> shinchan: I would pick up a book like Learn You A Haskell or Real World Haskell
13:08:18 <zerokarmaleft> shinchan: learnyouahaskell.com is also a good place to start
13:08:28 <ezrios> LYAH in particular covers a lot of very powerful functional programming concepts
13:08:44 <Luke> c_wraith: are you matt?
13:09:07 <bitemyapp> shinchan: https://gist.github.com/bitemyapp/8739525
13:09:44 <c_wraith> Luke: negative
13:09:55 <Luke> you're not in chicago?
13:10:08 <ezrios> bitemyapp: neat list, bookmarked
13:10:10 <c_wraith> nope
13:10:13 <Luke> k
13:11:21 <edwardk> c_wraith: vicious lies ;)
13:11:27 <shinchan> bitemyapp, zerokarmaleft : thank you! :D
13:11:46 <bitemyapp> shinchan: consing us onto the word "thank you!" is a type error yo. Better start studying!
13:12:02 <zerokarmaleft> heh
13:12:07 <flebron> monochrom: I understand how that works. It's a bit weird seeing F Int Int show up, I didn't expect it.
13:12:44 <shinchan> :P
13:12:59 <Kron> guys, how do you handle test code?
13:13:01 <shinchan> I'll probably get that joke after a few days
13:13:09 <Kron> Every time I commit I have to keep commenting out all the test code
13:13:13 <Kron> and it gets annoying
13:13:27 <Kron> and every once in a while I forget and the pushed version has all sorts of unsafe things in it
13:13:30 <hpc> Kron: make Test.hs or something
13:13:38 <Kron> and load stuff from there?
13:13:50 <Kron> what if I want to test a module and ALL the module, not just the exported API
13:13:56 <Kron> is there a way to load a whole file for testing?
13:17:44 <Twey> It *would* be nice to have package scope.
13:19:11 <Kron> what do you guys do?
13:21:15 <ezrios> oop by day, fp by night
13:21:34 <Shammah_> How can I import a class A from a module? I have class A, but also instances of class A, which I don't want to import
13:21:51 <Shammah_> But afaik they share the same name: A
13:21:59 <monochrom> instances are always imported
13:22:02 <Shammah_> oh
13:22:43 <Ptival> http://paste.awesom.eu/3QZ5 can I somehow do this without a conflicting family instance error?
13:24:00 <enthropy> Ptival: make it   `type T t :: *'
13:24:18 <monochrom> other languages define "import" to mean "load code". that is not the meaning of "import" in Haskell
13:25:05 <enthropy> at which point it is a bit more verbose than the equivalent code using multiparameter type classes and fundeps
13:25:09 <monochrom> Haskell's "import" means: bring in instances, and allow you to use names. as for loading code, the compiler will figure that out, in fact clearly the compiler has to load more code than you import.
13:25:36 <Ptival> enthropy: oh I see, thanks
13:27:16 <Flonk> Kron: Check it out! https://dl.dropboxusercontent.com/u/3191486/porngen.rar
13:27:39 <Kron> hah
13:27:42 <Kron> consider githubbing it
13:27:47 <Kron> or lpasting I guess
13:28:10 <Kron> did you solve the RAM issue?
13:28:24 <Flonk> Kron: The list is way too long to lpaste
13:28:29 <Kron> true
13:28:30 <Flonk> But yeah github seems like a good idea
13:28:36 <Kron> you can import 'on' from Data.Function
13:28:40 <Kron> it's already implemented in there
13:28:45 <Kron> import Data.Function (on)
13:28:57 <Flonk> :t on
13:28:58 <lambdabot> (b -> b -> c) -> (a -> b) -> a -> a -> c
13:29:09 <Flonk> Hmm, guess I could
13:29:18 <Kron> it's identical to the version you made
13:30:51 <Kron> hmmm
13:30:52 <Kron> interesting
13:31:04 <Kron> you tend to chain the functions with no whitespace when composing
13:31:08 <Kron> ().group.sort, etc.
13:31:21 <Kron> they're entirely separate functions; it's not like a method or member access
13:31:33 <Kron> histogramLength = sum . fmap amount
13:31:57 <Kron> I mean, I'm pretty sure you know that
13:32:03 <Kron> I just find the style interesting
13:32:18 <Flonk> Kron: I don't think it's any more readable with whitespace in between, just gets a little awkward when you try to call methods from other modules
13:32:59 <Kron> true, but I feel it makes the code more unreadable when you mix up composition with module-function access
13:33:07 <Kron> Data.Text.foo is foo from Data.Text
13:33:11 <Kron> sum.fmap is not fmap from sum
13:33:15 <Kron> they're entirely separate
13:33:22 <Kron> at least, that's how I see it
13:33:26 <Shammah_> Hmm, is it generally a good idea to restrict data types? Eg, data (Ord a) => BinaryTree a = Node a (BinaryTree a) (BinaryTree a). Ofcourse, this does not compile, but if there were such construct would it be advised?
13:34:01 <Shammah_> Or would it be better to just stick to class instances
13:34:05 <Kron> generally no, I think?
13:34:07 <Kron> I'm not... sure
13:34:15 <vanila> Shammah_, type inference handles that, so you would only have that restriction in your functions
13:34:29 <Kron> in histogramQuantil h, you can just place xs in the where block
13:34:42 <Kron> there's no need to place it in a separate let
13:35:00 <kadoban> Kron: it's pretty easy to differentiate those though, since the cases are different. yeah, i always leave space too though... so i dunno
13:35:16 <meditans> johnw: could I ask you something regarding haskell-interactive-mode and emacs?
13:35:27 <Kron> I find cases harder to pick up than whitespace
13:35:46 <Flonk> Kron: I hacked the whole thing together tbh, that function used to look different so its a little messy
13:35:53 <Flonk> Kron: really just wanted to show you the output :P
13:35:58 <Kron> hah
13:36:13 <Kron> ooh you do it my style in firstWords and lastWords
13:36:14 <Kron> yess
13:36:37 <colDrMcBeardman> I'm having some trouble with parsec failing because it's greedy.
13:37:06 <colDrMcBeardman> I'm trying to parse something like this "asdf#4 sdfg#6 lotsOfCharacters I should Ignore\n"
13:37:20 <tdammers> colDrMcBeardman: Yes, so?
13:37:56 <tdammers> colDrMcBeardman: what does your current parser look like?
13:38:19 <colDrMcBeardman> I'm using sepBy1 hashedParser spaces to get the 1 or more lexemes at the front, then manyTill anyChar newline to ignore the rest.
13:38:40 <colDrMcBeardman> but the sepBy1 seems to be trying to apply hashedParser to the lotsOfCharacters and dying.
13:38:50 <Shammah_> vanila, but now I must ensure all function for BinaryTree are of Ord a. Wouldn't it be easier to restrict BinaryTrees to be of Ord?
13:39:00 <vanila> type inference handles it
13:39:09 <merijn> Shammah_: No, because that doesn't do anything
13:39:11 <Shammah_> data (Ord a0 => BinaryTree a instead of myFunc :: (Ord a) => BinaryTree a for all funcs
13:39:18 <merijn> Shammah_: All your functions will still require Ord a
13:39:24 <colDrMcBeardman> tdammers, my goal is to end up with something like [(String, Integer)]
13:39:31 <Shammah_> How so? My binarytree does not enforce Ord a
13:39:51 <merijn> Shammah_: The "Ord" dictionary is not stored in the datatype, therefore every function will require an explicit constraint to use Ord functions
13:39:55 <Shammah_> I keep having to type (Ord a) for all my funcs when it really shgould be a property of BinaryTree
13:40:07 <merijn> Shammah_: So if all your functions already have an "Ord a" constraint, why add one to your tree?
13:40:20 <Kron> hmmmm
13:40:26 <merijn> Shammah_: Because that constraint on BinaryTree doesn't do what you think it does :)
13:40:28 <Shammah_> Because I maybe could potentially forget (Ord a) => for my func that uses a tree
13:40:32 <Kron> if GHC can pick up type class constraints from the data type itself
13:40:35 <tdammers> colDrMcBeardman: manyTill anyChar newline... hmm
13:40:43 <Kron> won't that invalidate the need for referencing it in all the functions?
13:40:50 <tdammers> have you tried manyTill (noneOf "\n") newline?
13:40:53 <merijn> Shammah_: No, because GHC can't remember that the 'a' inside your tree are "Ord" instances
13:40:54 <tdammers> something like that/
13:40:55 <Kron> like I can kind of see Shammah_ 's point
13:41:03 <merijn> Kron: GHC can't do that
13:41:16 <Kron> if the tree has to be orderable, why not prevent users from creating malformed trees of things that can't be ordered?
13:41:20 <merijn> Kron: Hence why that feature has been removed in Haskell2010
13:41:35 <colDrMcBeardman> tdammers, I don't think that's the issue, because I had it working with a single element and using many1 instead of sepBy1
13:41:36 <Shammah_> I keep repeating myself that all function that use BinaryTree have to be of Ord...
13:41:40 <Shammah_> It bothers me
13:41:49 <Shammah_> I can see myself easily forgetting that constraint
13:41:53 <Kron> Shammah_: don't worry about it, if you forget an Ord declaration it'll remind you
13:41:54 <Kron> try it
13:41:57 <vanila> what goes wrong if you forget it?
13:42:07 <Kron> your code won't compile if you forget it, and if it does compile you never needed it
13:42:11 <Kron> I'm working on quadtree code
13:42:15 <Shammah_> I don't know yet, I'm just talking hypotetically here
13:42:17 <merijn> Shammah_, Kron: For a longer explanation on why it doesn't do what you want, see this bug report I filed on pandoc: https://github.com/jgm/pandoc/pull/1143
13:42:18 <Kron> I assumed the elements had to be Eq-able
13:42:24 <Kron> in reality, very few of my functiosn need Eq
13:42:30 <colDrMcBeardman> as soon as I try to express that there may be multiple hashedThings with spaces, all of a sudden, that parser tries to greedily look for another hashedThing in the ignored junk and dies.
13:42:39 <tdammers> oh wait
13:42:51 <colDrMcBeardman> instead of just giving me back what it *did* find and letting the next parser go
13:42:52 <tdammers> you need to wrap the hashedThing in try
13:43:12 <tdammers> otherwise, you'll get a partial match on a hashedThing, and when that fails, it won't backtrack
13:43:27 <tdammers> it'll just ignore what's been consumed so far, and continue from there
13:43:52 <tdammers> if you use try, it'll backtrack instead
13:43:55 <Kron> for example, when I implemented fmap for my tree
13:43:56 <tdammers> "rewind", if you will
13:44:00 <Kron> i didn't need Ord or Eq or anything
13:44:04 <Kron> I just fmapped it
13:44:28 <erisco> in ghci when I use the up arrow it types "[A" instead of going to the previous command... how do I fix this?
13:44:42 <colDrMcBeardman> tdammers, d'oh!
13:45:53 <colDrMcBeardman> tdammers, thank you, it is working now and I feel like a sophomore.
13:46:57 <geekosaur> erisco: what platform?
13:47:35 <erisco> I am ssh'd into a guest machine using windows powershell
13:47:48 <tdammers> colDrMcBeardman: np
13:47:50 <geekosaur> oh. good luck with that then
13:48:12 <dmj`> erisco: install cygwin
13:48:18 <dmj`> and use that shell
13:48:39 <erisco> I can't use vagrant from cygwin :(
13:48:45 <erisco> for some reason it does not find ruby
13:49:50 <colDrMcBeardman> erisco, try setting your TERM variable to either ansi or dumb.
13:49:50 <merijn> erisco: Your terminfo is configured wrong for your terminal
13:50:02 <colDrMcBeardman> I think windows is ansi
13:50:04 <merijn> erisco: That's why you get [A instead of up arrow behaviour
13:50:22 <erisco> ah... TERM is set to cygwin
13:51:30 <SrPx> W
13:51:30 <SrPx> [5:47pm] jdoles
13:51:45 <SrPx> Oh god. Not even my ctrl+v will work today.
13:52:04 <SrPx> Should be this: Update: my Ubuntu-VM attempt to install GHCJS was another mediocre failure.
13:54:49 <meditans> chrisdone: when in haskell-interactive-mode with haskell-process-type=cabal-repl, I continue receiving a message like "the haskell process .... has died. Restart?"
13:54:51 <dagle> How do you listen to an event in haskells gtk2 bindings that isn't mapped?
13:54:56 <erisco> colDrMcBeardman, where do you set it? I tried setting it in .profile but perhaps that is not looked at early enough ... I still get the wrong behaviour
13:55:01 <meditans> chrisdone: do you have any suggestion?
13:56:59 <erisco> or does ghci use this env variable when it starts?
13:57:09 <SrPx> I'm oficially >24hrs trying to install a library.
13:57:09 <SrPx> It would be really great if some of you guys benchmarked similar programs using GHCJS, Haste and Fay and posted the results. I guess that would help many. I would do that if I managed to install them
13:58:32 <pavonia> dagle: What do you mean by mapped?
13:59:14 <merijn> SrPx: Might be easier to install ghcjs once there's an official release
13:59:29 <merijn> Haste and fay I have no clue about
14:02:35 <fly2web> except for those that Prelude already steals from Data.List    <--------what means of  'steals'?
14:02:43 <dagle> pavonia: gtk doesn't seem to export the raw connect function but rather typed functions on the event (instead of connect "key-press" it exports onKeyPress) my problem is that my event isn't "mapped" with connect and connect isn't exported.
14:02:43 <fly2web> how can i go from Prelude Data.List>   to Prelude>  ?
14:03:53 <dagle> fly2web: :m
14:05:27 <dagle> pavonia: I hope that makes sense.
14:05:35 <pavonia> dagle: I guess you can't use it then. Which one are you looking for?
14:05:50 <dagle> In this case, "beep".
14:07:19 <dagle> And "onLinkClcked".
14:10:11 <dagle> I guess gtk-unsafe is in the creation. :)
14:10:44 <pavonia> From what widget are these events? I can't find anything about them
14:14:04 <Shammah_> Hmm, I think you're right on the previous discussion
14:14:07 <dagle> Oh, the other one was called "activate-link".
14:14:16 <Shammah_> wait hmm
14:15:02 <Shammah_> If something is a Monoid, isn't it automatically a Foldable?
14:15:18 <Shammah_> due mconcat = foldr mappend mempty
14:15:46 <merijn> Shammah_: No, the types don't match
14:15:54 <merijn> Shammah_: Foldables have kind * -> *
14:16:00 <merijn> Monoids have kind *
14:16:11 <Shammah_> Oh, that's beyond my scope of knowledge atm hehe
14:16:15 <Shammah_> Guess the book will cover that later :)
14:16:26 <merijn> Shammah_: Probably not, unless you have a hardcore book :>
14:16:33 <quchen_> And foldr only works on lists, except when you've already got a Foldable instance :-þ
14:16:49 <Cubic_> god, dealing with exceptions is tedious
14:17:02 <Shammah_> It does discuss kinds like * -> *
14:17:05 <Shammah_> About 2 chapters ahead
14:17:08 <merijn> Shammah_: Which book?
14:17:17 <Shammah_> serrano's book
14:17:25 <merijn> I need to start recommending this then :D
14:17:39 <Shammah_> It's a pretty good book so far considering it's a 1st edition :P
14:18:03 <Shammah_> Got a few typo's here and there which I have no clue how they got passed the publisher's checkup
14:18:12 <merijn> Shammah_: The cliffs notes are: kinds are the "types of types" where * is the kind of a "normal" haskell type like Int. Types that takes arguments have other kinds, for example "Maybe :: * -> *"
14:18:43 <merijn> Shammah_: That is, Maybe takes a type of kind * and returns a type of kind *, hence "Maybe :: * -> *" and "Int :: *", then "Maybe Int :: *"
14:19:20 <Shammah_> So kinds can be basically used for functions that work on types themself?
14:19:33 <triliyn> merijn: doesn't LYAH have a section on kinds?
14:20:07 <merijn> Shammah_: In standard haskell you can't write "function on functions" (other than defining data types), so you don't really worry about kinds in standard haskell
14:21:09 <merijn> Shammah_: So you can't write really write "* -> *", well until you move onto Advanced Haskell 101, because TypeFamilies kinda *do* let you write that stuff
14:21:45 <Shammah_> This is going way above my head :P
14:21:56 <merijn> Shammah_: You can ignore the last bit :)
14:22:36 <Shammah_> Man, never had so much fun while learning to program again haha
14:22:39 <merijn> Shammah_: GHC internally uses kinds to "typecheck your types", but you can't really write stuff like that yourself, unless you count "data Maybe a = Nothing | Just a" as "writing" Maybe :: * -> *
14:22:51 <quchen_> I like edwardk's explanation of Foldable: "it basically gives you 'toList'". End
14:23:56 <Shammah_> that makes sense quchen_
14:24:57 <davd> > last $ repeat 0
14:25:02 <lambdabot>  mueval: Prelude.undefined
14:25:02 <lambdabot>  mueval: ExitFailure 1
14:25:18 <davd> > last $ [1..]
14:25:21 <fly2web> what mean?
14:25:21 <fly2web> dagle:
14:25:22 <lambdabot>  mueval-core: Time limit exceeded
14:26:17 <Shammah_> However quchen_, while Foldable seems to provide toList, it's apparantly not that easy to just define toList and be done with it
14:27:29 <Shammah_> > These two definitions allow for two different ways to instantiate the Foldable class: you need to either give a
14:27:30 <lambdabot>  <hint>:1:80: parse error on input `class'
14:27:32 <Shammah_> definition of foldr (the version with combining function) or foldMap (the version with monoids):
14:27:45 <quchen_> foldMap is very similar to a toList function.
14:27:47 <Shammah_> damnit lambdabot :)
14:27:59 <dwcook> fold = mconcat . toList -- ?
14:28:24 <Shammah_> foldMap f = foldr (mappend . f) mempty
14:29:11 <Shammah_> wait whoa
14:29:20 <Shammah_> foldMap turns my brain into spaghetti
14:29:41 <quchen_> fold concatenates all elements of a structure using its monoid instance.
14:29:44 <merijn> It's not possible to have a line end in an operator without having a continuation on the next line, no?
14:29:56 <quchen_> foldMap is the same, except it applies a function to all the values in the structure first.
14:30:24 <mietek> ugh
14:30:48 <mietek> Having a bit of trouble getting a ReaderT around ScottyT...
14:30:48 <Shammah_> but doesn't that make fold the same a sfoldr
14:30:50 <Shammah_> *as foldr
14:31:02 <Shammah_> oh wait it does
14:31:16 <Shammah_> fodl = foldMap id = foldr mappend mempty
14:31:19 <Shammah_> *fold
14:32:32 <Shammah_> and then foldr makes use of foldMap, which uses foldr which uses foldMap etc etc
14:32:37 <Shammah_> Lovely circular dependency hehe
14:32:44 <quchen_> Those are just default implementations.
14:32:55 <quchen_> Like  a == b = not (a /= b)  in Ord.
14:33:01 <quchen_> And a /= b = not (a == b)
14:33:05 <Shammah_> They are indeed
14:33:35 <quchen_> You should implement the minimal complete definitions mentioned in the docs yourself, all other class functions will be automatically generated.
14:33:47 <quchen_> (7.8 will support warnings for incomplete minimal definitions.)
14:34:15 <Shammah_> So either foldr or foldMap works
14:34:17 <quchen_> For efficiency, you can also define more than just the minimal definitions and define both foldMap and foldr explicitly.
14:34:19 <quchen_> Yes.
14:34:55 <Shammah_> Implementing foldr seems more natural than to implement foldMap, because if I were to implement foldMap I'd do it by using foldr
14:35:01 <Shammah_> at first glance that is
14:35:39 <quchen_> Try writing foldMap for `data Tree a = Empty | Node a (Tree a) (Tree a)`.
14:35:49 <quchen_> It's much more natural than foldr.
14:36:19 <Shammah_> That is exactly an exercise in the book
14:36:20 <quchen_> Also note that foldr has the conotation of "right". foldMap on the other hand is independent of direction.
14:37:14 <quchen_> For lists, it's of course natural to define foldMap in terms of foldr, because foldr is the deconstructor of the list. For other types, this is often awkward though.
14:37:49 <jhbecare`> hey there
14:37:58 <t4nk496> @pl (\x -> if x == True then Just else const Nothing)
14:37:59 <lambdabot> flip (flip if' Just . (True ==)) (const Nothing)
14:38:04 <jhbecare`> can someone help? I would appreciate it
14:38:55 <derdon> uhm, what's your question?
14:39:08 <derdon> just ask, don't ask if someone can help
14:40:12 <Shammah_> hmmm
14:41:09 <Shammah_> foldMap f (Node v l r) = mappend (f v) (mappend (foldMap f l) (foldMap f r))
14:41:15 <Shammah_> something like that I assume
14:41:26 <Shammah_> with empy leaf cases ofc
14:41:50 <merijn> Shammah_: That seems about right, yeah
14:42:04 <quchen_> You can always write it clearer as `f v <> foldMap f l <> foldMap f r`.
14:42:13 <Shammah_> oh right
14:42:17 <Shammah_> actually let me tree this
14:42:35 <quchen_> Note that the instance is not unique: you could for example also define `foldMap f l <> f v <> foldMap f r`.
14:42:41 <quchen_> Now for shits n giggles, try writing foldr.
14:42:54 <quchen_> Well, it's going to be for weeps n tears ;-)
14:45:48 <pyon> @hoogle <>
14:45:48 <lambdabot> Language.Haskell.TH.PprLib (<>) :: Doc -> Doc -> Doc
14:45:48 <lambdabot> Text.PrettyPrint.HughesPJ (<>) :: Doc -> Doc -> Doc
14:45:48 <lambdabot> Text.PrettyPrint (<>) :: Doc -> Doc -> Doc
14:45:48 <pyon>  
14:45:57 <pyon> Wait, what?
14:46:17 <pavonia> You probably want (Data.Monoid.<>)
14:46:20 <benzrf> @hoogle k -> Map k a -> Boolean
14:46:20 <lambdabot> Warning: Unknown type Boolean
14:46:20 <lambdabot> Data.Map.Lazy (!) :: Ord k => Map k a -> k -> a
14:46:20 <lambdabot> Data.Map.Strict (!) :: Ord k => Map k a -> k -> a
14:46:22 <benzrf> @hoogle k -> Map k a -> Bool
14:46:22 <lambdabot> Data.Map.Lazy member :: Ord k => k -> Map k a -> Bool
14:46:23 <lambdabot> Data.Map.Strict member :: Ord k => k -> Map k a -> Bool
14:46:23 <lambdabot> Data.Map.Lazy notMember :: Ord k => k -> Map k a -> Bool
14:46:27 <benzrf> aha
14:46:57 <benzrf> > "foo" `Data.Map.member` Data.Map.fromList [("foo", 2)]
14:46:58 <lambdabot>  Not in scope: `Data.Map.fromList'Not in scope: `Data.Map.member'
14:47:02 <benzrf> :I
14:47:09 <benzrf> > "foo" `Data.Map.Strict.member` Data.Map.Strict.fromList [("foo", 2)]
14:47:10 <lambdabot>  Not in scope: `Data.Map.Strict.fromList'Not in scope: `Data.Map.Strict.member'
14:47:13 <benzrf> nooo
14:47:58 <pavonia> > "foo" `Data.Map.member` Data.Map.fromList [("foo", 2)]
14:47:59 <lambdabot>  Not in scope: `Data.Map.fromList'Not in scope: `Data.Map.member'
14:48:11 <pavonia> > "foo" `M.member` M.fromList [("foo", 2)]
14:48:12 <lambdabot>  True
14:50:55 <Shammah_> http://hastebin.com/bufipipivo.vbs
14:51:00 <Shammah_> not sure what is going wrong here
14:52:49 <stolaruk> How can I get QuickCheck to generate a long string of Text? I need 81+ characters in my random Text. It appears to be giving up because it can't meet my restriction of "T.length t > 80 ==>"
14:52:56 <quchen_> Shammah_: The "mapping function" just maps a single element to a monoid, it's not `a -> a -> a`
14:53:08 <quchen_> In other words, your type sig is wrong
14:53:31 * hackagebot eprocess 1.6.0 - *Very* basic Erlang-like process support for Haskell  http://hackage.haskell.org/package/eprocess-1.6.0 (CorentinDupont)
14:53:33 * hackagebot hint-server 1.3.0 - A server process that runs hint.  http://hackage.haskell.org/package/hint-server-1.3.0 (CorentinDupont)
14:54:51 <Shammah_> Indeed it is wrong
14:56:17 <mietek> Is there a difference between the ReaderT from mtl and from transformers?
14:57:11 <merijn> mietek: No, mtl just provides the MonadReader class and instances
14:57:34 <merijn> mietek: It literally just reexports transformers ReaderT :)
14:57:34 <quchen_> ReaderT is a reexport in MTL
14:57:55 <benzrf> :t (<|>)
14:57:56 <lambdabot> Alternative f => f a -> f a -> f a
14:57:58 <benzrf> o.o
14:58:18 <benzrf> @where alternative
14:58:18 <lambdabot> I know nothing about alternative.
14:58:21 <benzrf> @where Alternative
14:58:21 <lambdabot> I know nothing about alternative.
14:58:23 <benzrf> :I
14:58:29 <thebnq> its with Applicativ
14:58:32 <benzrf> @hoogle (<|>)
14:58:32 <lambdabot> Control.Applicative (<|>) :: Alternative f => f a -> f a -> f a
14:58:33 <lambdabot> Text.Parsec.Prim (<|>) :: (ParsecT s u m a) -> (ParsecT s u m a) -> (ParsecT s u m a)
14:58:33 <lambdabot> Text.ParserCombinators.Parsec.Prim (<|>) :: (ParsecT s u m a) -> (ParsecT s u m a) -> (ParsecT s u m a)
14:58:33 <benzrf> oh
14:58:34 <benzrf> thanks
14:58:38 <benzrf> =)
14:58:41 <Shammah_> ah quchen_, I made it non monoidic and it works now
14:59:02 <Shammah_> http://hastebin.com/tafehixeho.coffee basically adds all nodes with an additional f
14:59:25 <Shammah_> either way thanks, I get it now :D
14:59:26 <quchen_> Yeah, but now it's also not foldMap anymore.
14:59:35 <Shammah_> I needed a quick and dirty example
14:59:50 <Shammah_> I needed to create a monoid data structure otherwise :P
14:59:55 <quchen_> No.
14:59:57 <Shammah_> I had it for monoids, but could not test
15:00:15 <quchen_> Data.Monoid has lots of monoids.
15:00:31 <quchen_> Prelude has monoids.
15:00:48 <Shammah_> I'll look into it tomorrow, have to go now
15:00:50 <Shammah_> Thanks :)
15:00:51 <kuribas> Why do I get this error?  http://lpaste.net/101300
15:01:00 <kuribas> I already have an instance of Name, Var, etc...
15:02:02 <geekosaur> but not for Rep *
15:02:07 <geekosaur> or Rep Name, etc
15:02:14 <kuribas> What's Rep?
15:02:30 <geekosaur> the errors are calling out (GHC.Generics.Rep Name)
15:02:32 <geekosaur> and such
15:02:52 <t4nk194> simple helo world program wont compile ghc 7.6 http://lpaste.net/101302
15:02:53 <mietek> It looks like MonadReader can be derived with GeneralizedNewtypeDeriving
15:02:57 <mietek> (from mtl)
15:03:03 <mietek> But Reader (from transformers) can't?
15:03:07 <kuribas> geekosaur: I am not using generics.
15:03:11 <t4nk194> hello.hs:6:1: Parse error: naked expression at top level
15:03:16 <geekosaur> Hashable does internally from the looks of it
15:03:41 <quchen_> mietek: Reader is not a typeclass.
15:03:50 <quchen_> It's a type.
15:04:05 <mietek> Right, so it is.
15:04:26 <kuribas> geekosaur: It's a bug of Hashable?
15:04:30 <Kron> when I export a data type, do i also export all its record fields?
15:04:32 <geekosaur> t4nk194, that looks fine on the pastebin but is apparently wrong locally; I'd guess your indentation is off somehow. did you indent with tabs?
15:04:45 <t4nk194> yes
15:04:52 <geekosaur> use spaces
15:05:00 <t4nk194> thank you stupid windows
15:05:01 <geekosaur> something is not interpreting them the same way
15:05:09 <quchen_> t4nk194: https://github.com/quchen/articles/blob/master/fbut.md#tabs-vs-spaces
15:05:16 <ion> Updated http://codegolf.stackexchange.com/a/24289/1621
15:05:38 <t4nk194> wow awesome stuff best community ever
15:07:22 <geekosaur> kuribas, I don't actually know. the haddock I am looking at for Data.Hashable doesn't say generics are involved...
15:08:15 <geekosaur> waaaaaait
15:08:41 <geekosaur> it's using fully qualified names there. do you by any chance have multiple versions of Data.Hashable installed? or of Data.Generics?
15:08:55 <kuribas> geekosaur: http://hackage.haskell.org/package/hashable-1.2.1.0/docs/Data-Hashable.html
15:09:09 <kuribas> geekosaur: I looked at an older doc...
15:09:22 <geekosaur> that's the version it's calling out
15:10:21 <kuribas> yeah
15:10:43 <benzrf> :t insert
15:10:43 <lambdabot> Ord a => a -> [a] -> [a]
15:10:46 <benzrf> :t M.insert
15:10:46 <lambdabot> Ord k => k -> a -> M.Map k a -> M.Map k a
15:10:49 <benzrf> o:
15:10:55 <geekosaur> looks like the platform has 1.1.2.5? this is worrisome if you have both installed
15:10:56 <Kron> does show-extensions work in haddock?
15:11:00 <Kron> the documentation says it should
15:11:04 <Kron> but it doesn't seem to recognize it
15:11:34 <pavonia> > insert 5 [2,4,6,8]
15:11:35 <lambdabot>  [2,4,5,6,8]
15:11:51 <pavonia> Never noticed there is such a function
15:11:57 <benzrf> :t put
15:11:57 <lambdabot> MonadState s m => s -> m ()
15:12:01 <benzrf> huh
15:15:13 <kuribas> Ok, it works now.
15:19:40 <koala_man> where do binaries go by default if installed with cabal install --global?
15:20:19 <quchen_> <cabal>/bin
15:20:33 <quchen_> Wait, --global?
15:20:38 <quchen_> Uhmm. Nevermind.
15:22:08 <geekosaur> look for `install-dirs: global` in ~/.cabal/config
15:22:22 <geekosaur> er it's just `install-dirs global`
15:22:38 <quchen_> kuribas: You can use the Hashable instances for lists and tuples to simplify your definitions, by the way. hash (Var i n) = hash (i,n)
15:23:48 <kuribas> quchen_: yeah.  I used the recommended way from the documention, and it's just "instance Hashable Param" now :)
15:24:06 <kuribas> quchen_: Apparently it will do the magic using generic stuff.
15:24:41 <kuribas> quchen_: Probably in the way that you describe.
15:38:36 * hackagebot Spock 0.4.3.1 - Another Haskell web toolkit based on scotty  http://hackage.haskell.org/package/Spock-0.4.3.1 (AlexanderThiemann)
15:39:29 <Kron> is a haddock parse error supposed to be a bug?
15:39:42 <pyon> How do I get the element with the smallest/largest key from a Data.IntMap.IntMap?
15:40:04 <pyon> Never mind.
15:40:12 <pyon> I did not read far enough into the documentation.
15:40:35 <MP2E> Kron: what haddock parse error, exactly?
15:40:48 <Kron> Haddock coverage:
15:40:49 <Kron> QuadTree.hs:227:21: parse error on input `-- ^ floorX'
15:40:55 <Kron> it just collapsed on a line
15:41:07 <Rarrikins> pyon: foldWithKey maybe
15:41:33 <pyon> Heh, I meant findMin / findMax, but I had only read halfway through the documentation. :-P
15:41:50 * pyon should read more carefully before embarrassing himself this way.
15:41:57 <MP2E> I would say it should be reported :S
15:42:14 <MP2E> looks like a bug to me, someone more knowledge should verify though :P
15:42:20 <MP2E> knowledgable*
15:43:10 <Kron> Gotcha.
15:45:08 <Kron> ... how? how do you report a bug?
15:46:56 <MP2E> https://ghc.haskell.org/trac/ghc/wiki/ReportABug
15:47:08 <Kron> ah, new ticket
15:47:09 <Kron> found it
15:47:12 <Kron> thanks!
15:50:38 <Kron> http://trac.haskell.org/haddock/ticket/289
15:57:54 <kloplop321> Kron: when you do a `-- ^`, that means to comment on the previously defined part. Except you have a comma before it
15:58:13 <MP2E> oh whoop heh
15:58:39 <kloplop321> Try moving the comma so the lines look like `,Int -- ^ blah` instead. (I have not tried this, but I think this would solve it)
15:59:57 * Kron nods
16:00:21 <Kron> nope, doesn't work
16:00:26 <Kron> same parse failure
16:00:36 <kloplop321> Welp--I tried.
16:03:39 * hackagebot linux-mount 0.1.0.2 - Mount and unmount filesystems  http://hackage.haskell.org/package/linux-mount-0.1.0.2 (NicolaSquartini)
16:06:34 <benzrf> hey check out this utterly terrifying abomination I created!
16:06:36 <benzrf> http://bpaste.net/show/189705
16:09:01 <vanila> making object oriented system was bad enough but "-->" ?
16:09:17 <vanila> that should not be allowed
16:09:39 <benzrf> =D
16:09:45 <benzrf> what else should i have used?
16:09:48 <benzrf> . and -> are taken
16:10:13 <vanila> can you subclass with this?
16:10:16 <benzrf> yeshuah__:
16:10:18 <benzrf> *yes
16:10:18 <kloplop321> Hmm, what about ~>
16:10:19 <quchen_> CPP to make -> work
16:10:22 <benzrf> :I
16:10:23 <vanila> neat
16:10:26 <benzrf> ok i will use ~>
16:10:30 <k00mi> you could use #
16:10:38 <Athas> Or a Unicode arrow.
16:10:45 <benzrf> but all methods must take a str and return a str
16:10:48 <benzrf> and all ivars are strs
16:10:53 <benzrf> because type systems =D
16:11:09 <Athas> I assume these aren't the IVars from the parallel library?
16:11:17 <vanila> benbangert, you could use GADTs to do that stuff in a well typed way
16:11:17 <benzrf> hmm?
16:11:20 <benzrf> no, ivars as in ruby
16:11:33 <vanila> benzrf I mean
16:11:54 <vanila> although they cannot be extended once they have been defined
16:12:13 <kloplop321> Kron, I've never documented a tuple before, I don't know if others have either.
16:12:24 <benzrf> oh shit
16:12:48 <benzrf> too bad u have to keep doing 'var <- get' to get the 'mutated' version
16:12:49 <benzrf> >_>
16:13:33 <benzrf> it uses a statet over maybe
16:13:48 <benzrf> if you try to get a nonexistant ivar it nothings
16:13:54 <benzrf> i should change that to ""
16:13:59 <kloplop321> Like, a MaybeT (StateT m)?
16:14:07 <benzrf> no, StateT Maybe m
16:14:11 <benzrf> *s a
16:14:12 <benzrf> or
16:14:12 <benzrf> w/e
16:14:36 <benzrf> :t maybe
16:14:37 <lambdabot> b -> (a -> b) -> Maybe a -> b
16:14:46 <benzrf> :t fromMaybe
16:14:47 <lambdabot> a -> Maybe a -> a
16:15:06 <Kron> I would like to
16:15:15 <Kron> I use Region tuples that are (Int, Int, Int, Int)
16:15:25 <Kron> they correspond to (floor X, floor Y, ceil X, ceil Y)
16:15:36 <benzrf> calling a nonexistant method will Nothing it out
16:15:38 <Kron> it's pretty important to write that down or else the co-ordinate system gets messed up
16:15:41 <benzrf> nonexistant ivar now returns ""
16:16:04 <benzrf> actually ima make that return "" also
16:16:08 <benzrf> then i can remove Maybe entirely
16:16:09 <benzrf> :D
16:16:33 <mietek> @hoogle Int -> ByteString
16:16:34 <lambdabot> Data.ByteString replicate :: Int -> Word8 -> ByteString
16:16:34 <lambdabot> Data.ByteString.Char8 replicate :: Int -> Char -> ByteString
16:16:34 <lambdabot> Data.ByteString drop :: Int -> ByteString -> ByteString
16:17:06 <mietek> Does this need to go via String to ByteString.Char8?
16:17:28 <benzrf> actually im not sure why this is in a state monad at all tbh
16:17:46 <benzrf> there's multiple states that you manually name so the monad isnt doing anything for it
16:18:11 <Nyyx> mietek: http://hackage.haskell.org/package/bytestring-show
16:18:42 <mietek> Nice.
16:18:50 <mietek> Or perhaps Data.ByteString.Builder.
16:19:11 <benzrf> oh right i was using it for self
16:19:12 <gamegoblin> Best way to generate all 3-tuples with distince elements, where all elements are in [1..n]?
16:19:13 <benzrf> bluh
16:19:18 <gamegoblin> distinct*
16:19:20 <benzrf> w/e this was a bullshit experiment
16:21:11 <benzrf> actually though
16:21:53 <benzrf> i was thinking an oop-ish pure language could be interesting
16:21:59 <benzrf> self is an implicit param
16:22:10 <benzrf> methods that 'mutate' are run in an auto-cloned version
16:22:47 <Flonk> gamegoblin: probably list comprehension
16:23:04 <Flonk> > let n = [1..2] in [(i,j,k)|i<-n,j<-n,k<-n]
16:23:05 <lambdabot>  [(1,1,1),(1,1,2),(1,2,1),(1,2,2),(2,1,1),(2,1,2),(2,2,1),(2,2,2)]
16:23:59 <gamegoblin> Flonk: i,j,k need to be distinct
16:25:47 <Flonk> gamegoblin: oh. I guess its best to filter the list afterwards
16:26:29 <Flonk> actually
16:27:10 <Flonk> > let n = [1..3] in [(i,j,k)|i<-n,j<-n,k<-n,i/=k,k/=j,j/=i]
16:27:11 <lambdabot>  [(1,2,3),(1,3,2),(2,1,3),(2,3,1),(3,1,2),(3,2,1)]
16:27:30 <quchen_> That doesn't sound very efficient.
16:28:06 <Nyyx> quchen_: how else would you do it?
16:33:36 <quchen_> First, map the list to (n-th element, list without n-th element) tuples for all n in [1..length n]
16:33:55 <quchen_> Then repeat the process to get as many elements as you want
16:34:42 <quchen_> Nyyx: ^
16:37:29 <gamegoblin> > let n=3 in ((concat . concat) [[[(a,b,c) | c <- [b+1..n]] | b <- [a+1..n-1]] | a <- [1..n-2]])
16:37:30 <lambdabot>  [(1,2,3)]
16:37:41 <quchen_> But more generally, I assume there is a non-O(n^3) algorithm to solve this task. I'm just not the one to know about it ;-)
16:37:54 <gamegoblin> > let n=5 in ((concat . concat) [[[(a,b,c) | c <- [b+1..n]] | b <- [a+1..n-1]] | a <- [1..n-2]])
16:37:55 <lambdabot>  [(1,2,3),(1,2,4),(1,2,5),(1,3,4),(1,3,5),(1,4,5),(2,3,4),(2,3,5),(2,4,5),(3,...
16:38:01 <gamegoblin> got it
16:39:19 <gamegoblin> not sure if there is better syntactic sugar for it
16:39:28 <gamegoblin> probably
16:42:22 <vanila> quchen_, I think you're creating a list with O(n^3) elements?
16:42:42 <vanila> so the algorithm has to be O(n^3)
16:42:49 <gamegoblin> agreed
16:43:59 <benzrf> @hoogle Map k a -> [k]
16:44:00 <lambdabot> Data.Map.Lazy keys :: Map k a -> [k]
16:44:00 <lambdabot> Data.Map.Strict keys :: Map k a -> [k]
16:44:00 <lambdabot> Data.Graph.Inductive.Query.DFS topsort' :: Graph gr => gr a b -> [a]
16:44:04 <benzrf> derp
16:44:10 <benzrf> @hoogle isKey
16:44:10 <lambdabot> No results found
16:44:12 <benzrf> nope
16:44:48 <quchen_> Map k a -> [k]   ←   Map.keysSet
16:45:29 <copumpkin> keys?
16:49:08 <erisco> > "DELETE"
16:49:09 <lambdabot>  "DELETE"
16:49:43 <erisco> hmm... ghcjs gives me: Illegal literal in type (use DataKinds to enable): "DELETE"
16:51:19 <erisco> ah stupid me... never mind
16:51:22 <merijn> erisco: Sounds like you have a string in a type
16:51:34 <erisco> yeah I accidentally put :: instead of =
16:51:47 <merijn> :p
16:53:11 <benzrf> woot i improved my object thing [slightly]
16:53:39 <benzrf> u can now only do 'method calls' on your ivars or self, meaning that all mutable things are encapsulted in one obj
16:53:45 <benzrf> so no need for 'foo <- get'
16:53:46 <benzrf> B)
16:54:04 <benzrf> this is an abomination that is completely unuseful and i am happy about it
16:54:07 <benzrf> woot
16:57:32 <Eduard_Munteanu> What's a nice and common trie package used these days?
16:58:36 <lpsmith> ok, with cabal sandbox, is there a nice way to install multiple custom packages to one sandbox?
16:58:53 <Eduard_Munteanu> I suspect I could cook my own with a Map / IntMap, not exactly sure what the tradeoffs would be, other than lack of sharing in keys.
16:59:16 <Eduard_Munteanu> Using a list-keyed map, that is.
17:02:39 <Eduard_Munteanu> Or perhaps just build a   data Tree f a = Branch (f (Tree f a)) | Leaf a   for   f = Map k
17:03:10 <Eduard_Munteanu> That looks an awful lot like Free for some reason.
17:03:38 <copumpkin> I WONDER WHY
17:03:47 <MP2E> lol?
17:03:48 <Eduard_Munteanu> Yeah, hm... what's going on..
17:04:19 <dwcook> @src Free
17:04:19 <lambdabot> Source not found. I feel much better now.
17:04:23 <Eduard_Munteanu> (It actually is Free)
17:05:45 <Eduard_Munteanu> dwcook: data Free f a = Pure a | Wrap (f (Free f a))   is a common definition of it
17:05:54 <pyon> Is it just me or a free monad is basically a linked list of stacked functor effects?
17:06:35 <Eduard_Munteanu> pyon: it is... in particular when the functor is a monad you get a monad you can "unwind" step by step.
17:06:57 <Eduard_Munteanu> copumpkin: is it just a coincidence here?
17:07:02 <copumpkin> ?
17:07:09 <copumpkin> I thought you were kidding :)
17:07:11 <copumpkin> yes, it's Free
17:07:43 <quchen_> It's a RoseFree.
17:08:45 <Eduard_Munteanu> copumpkin: I know, but I'm wondering if it's a coincidence it matches a generically-forested rose tree
17:11:28 <quchen_> Eduard_Munteanu: You're probably asking this on some deeper level?
17:12:00 <Eduard_Munteanu> quchen_: possibly, I just noticed this as I was rambling about tries :)
17:13:23 <quchen_> Hmm. So what we've got so far is `Free (Map k) = Trie`, basically. (Not sure how to write it down properly though.)
17:13:44 <quchen_> Free (Map k) k = Trie k?
17:14:09 <Eduard_Munteanu> I'd say   Free (Map k) a = Trie k a
17:14:59 <quchen_> Trie k a?
17:15:24 <quchen_> I thought Trie was unary
17:15:55 <quchen_> i.e. the keys leading to the end are the actual data
17:16:00 <Eduard_Munteanu> quchen_: Trie k a would be similar to Map [k] a
17:16:11 <quchen_> Ah okay.
17:16:23 <Eduard_Munteanu> Perhaps TrieMap is a better name, I've seen it around.
17:17:19 <pyon> Eduard_Munteanu: But that would not allow you to optimize subtrees where the root has a single child.
17:17:38 <quchen_> Hmm, I don't think I can contribute anything that you don't already know here. Free is arbitrarily nested boxes, and when the boxes have multiple values you get a tree of some sorts.
17:17:40 <pyon> Eduard_Munteanu: I have to admit that, from a purely mathematical point of view, the idea is pretty.
17:18:27 <Eduard_Munteanu> pyon: not sure, can you be a bit more explicit about those subtrees?
17:20:09 <Eduard_Munteanu> pyon: oh, do you mean I'd end up with singleton maps?
17:20:17 <pyon> Eduard_Munteanu: I mean, if a Trie built from a Map Char contains "hai", "hello", "help", I would expect the root to be "h", its immediate children to be "ai" and "el", and in turn "el"'s children to be "lo" and "p".
17:20:33 <Eduard_Munteanu> Ah.
17:20:48 <pyon> Eduard_Munteanu: Instead we have a deeper map where every single level corresponds to a single Char.
17:20:57 <pyon> s/deeper map/deeper trie/
17:21:25 <Eduard_Munteanu> I suppose I didn't consider it given my usecase, i.e. ngram generation.
17:21:48 <Nyyx> gamegoblin, quchen_: how about just something like let distinctTriples n = concat . map permutations . map (\x -> (x,x+1, x+2)) [1,4..n]
17:21:55 <pyon> Eduard_Munteanu: If we had some way to use univalence, then we could literally say that the optimized Trie is identical to Free (Map Char).
17:21:55 <Eduard_Munteanu> pyon: the trie could have String keys though
17:22:10 <Nyyx> where permutation just makes all permutations of the triplets
17:22:58 <pyon> Eduard_Munteanu: What is an n-gram?
17:22:58 <pyon>  
17:23:38 <Eduard_Munteanu> pyon: groups of n successive words specifically, but more generally a model for generating natural language text
17:23:49 <pyon> Ah. :-)
17:25:27 <richo> so my cabal install seems pretty borked (ghc-pkg check emits a LOT of broken packes). Is there some way to tell it to automatically fix things?
17:25:35 <Nyyx> gamegoblin: [1,4..(n-2)]
17:25:41 <richo> This isn't the first time it's happened, and I seem to remember just blowing everything away last time but I'd rather not do that ideally
17:26:12 <ion> richo: You might want to blow everything away this once and use cabal sandboxes from now on.
17:26:45 <richo> ion: How would I do that? Honestly though half this stuff I just want system wide anyway. Right now I'm just trying to install pandoc.
17:27:23 <ion> mkdir pandoc, cd pandoc, cabal sandbox init, cabal install pandoc
17:27:42 <richo> awesome thanks
17:30:22 <ezrios> anyone use syntastic with vim?
17:30:35 <ezrios> I am getting "checker haskell/ghc_mod returned abnormal status 1" whenever I save a .hs file
17:31:18 <cwvh> `hsenv` is another package installation alternative that doesn't seem to get much love these days
17:32:11 <julianb> uhm, hi. I have the following code: http://lpaste.net/101309 . There isn't any compile-time error, however, it doesn't do what it's expected to (watch multiple directories for file changes and print them in the console)
17:33:38 <vozz_> Why do 'where' clauses always screw everything up? I always end up having to use let clauses instead
17:33:53 <vozz_> Like there's literally no indenation level I can put it where it won't cause a parse error
17:34:09 <julianb> I have never had any problem with where clauses... at least not within pure functions
17:34:23 <richo> heh, so even in a sandbox installing pandoc fails because it can't find alex. Do I need to cabal install alex? and I'm guessing update pandoc's manifest upstream?
17:35:10 <geekosaur> this is an ugly cabal corner case
17:35:31 <Eduard_Munteanu> vozz_: f = g . h where g = ...   is one pattern I commonly use
17:35:42 <geekosaur> it's not in the dependencies because cabal cannot deal with dependencies that don't involve Haskell libraries. alex is a program, without libraries
17:35:49 <vozz_> Hang on let me show you the thing I'm working on
17:36:08 <Eduard_Munteanu> vozz_: and g's definition usually follows on a newline, indented one level relative to toplevel
17:36:30 <geekosaur> (specifically cabal depends on ghc-pkg to track installed packages but since alex has no libraries ghc-pkg does not know about it)
17:37:41 <vozz_> https://gist.github.com/ollieh/df44ea876345b3aa24c0
17:38:34 <Eduard_Munteanu> vozz_: if you have a do-block just use a let ... = ... statement
17:38:51 <vozz_> Oh right.
17:38:53 <vozz_> darn :(
17:39:33 <richo> urgh, alex depends on happy, which also seems to fall into this corner case
17:39:40 <richo> is this new? I'd swear I've had pandoc work in the past
17:39:57 <geekosaur> your problem with `where` is that it is part of binding syntax. that is, it goes onto a `let` or a top-level `foo =`, it can't just be attached to an arbitrary expression
17:40:29 <vozz_> Ah. I didn't know that.
17:40:54 <geekosaur> so the `where` on line 48 terminates your `main =` as the only thing it can attach to, and then the `post` is outside of `main`
17:41:54 <geekosaur> many people prefer to only use `where` to scope over multiple guards and `let` for everything else
17:42:31 <richo> so happy seems to depend on happy :<
17:43:02 <MP2E> yikes
17:43:20 <Eduard_Munteanu> You can even abuse 'do' to get those let statements, though I prefer things like foo = ... where\n\t ... = ...
17:44:33 <Eduard_Munteanu> Where the thing before 'where' is a short, high-level and possibly pointfree definition of 'foo' and the 'where' provides definitions for parts of it.
17:45:04 <Eduard_Munteanu> (This isn't suitable for your usecase though.)
17:45:36 <Eduard_Munteanu> (And by "abuse do" I mean using do for non-monadic definitions)
17:48:07 <Kron> how does one go about making a package fit for hackage?
17:48:13 <Kron> what does cabal sdist do?
17:48:52 <Twey> Kron: Makes a package fit for hackage :þ
17:49:15 <Twey> Cabal also has an ‘upload’ command
17:49:17 <Kron> I have the file
17:49:26 <Kron> but I need to make a package.cabal and some other things
17:49:45 <Eduard_Munteanu> Kron: you can use  cabal init  to help you with that.
17:49:46 <Kron> and googling cabal sdist turns up nothing
17:50:34 <Eduard_Munteanu> It's often useful to start a project with cabal init from the beginning, to get a suitable build system in place.
17:50:43 <Kron> thanks!
17:51:07 <Eduard_Munteanu> (and often required since certain packages require additional ghc options like -package options)
17:52:19 <Kron> "Include documentation on what each field means"?
17:52:30 <julianb> Hi!. I have the following code: http://lpaste.net/101309 . There isn't any compile-time error, however, it doesn't do what it's expected to (watch multiple directories for file changes and print them in the console)
17:52:36 <Eduard_Munteanu> Kron: that adds extra comments to your cabal file
17:52:39 <Kron> ah
17:53:24 <Kron> how do you update the cabal file?
17:53:35 <Kron> like if you modify the original package
17:53:49 <Eduard_Munteanu> Kron: update? You edit it yourself, cabal init just provides a template
17:54:17 <Kron> aaaah okay
17:54:38 <Eduard_Munteanu> Your editor / IDE might alter it too, though, e.g. emacs' haskell-mode.
18:05:45 <Kron> hmm
18:06:05 <Kron> I've managed to upload a package candidate, but none of the haddock documentation I added in is activating
18:06:13 <Kron> do I have to manually put that in?
18:06:29 <Eduard_Munteanu> Kron: that's normal, it takes a while until Hackage runs haddock on it
18:06:30 <dmj`> it will gen automatically if your project builds succesfully
18:06:38 <Kron> ahh okay
18:06:58 <Kron> Warning: Exposed modules use unallocated top-level names
18:07:02 <Kron> what does that mean?
18:07:51 <Eduard_Munteanu> Kron: you're using non-standard names for toplevel names like Data
18:08:05 <Kron> hmmm
18:08:13 <Kron> so I need to call it Data.QuadTree or something?
18:08:37 <Eduard_Munteanu> If it's a data structure then Data is appropriate, yes.
18:08:46 <Kron> it is indeed a data structure
18:09:16 <Kron> I just change the name in the package.cabal right?
18:09:28 <Eduard_Munteanu> Kron: you'll have to rename the files too
18:09:34 <Kron> ah
18:10:34 <Kron> parse of field 'name' failed
18:10:39 <Kron> so... I need to keep calling it QuadTree?
18:10:44 <Eduard_Munteanu> Kron: you should know hierarchical modules follow directories and files in the file system, e.g. Data.QuadTree is in Data/QuadTree.hs
18:10:57 <Kron> ah
18:11:28 <Eduard_Munteanu> And Data.QuadTree.Internal would be in Data/QuadTree/Internal.hs, and so on.
18:11:43 <Kron> okay, let me start over
18:11:46 <Eduard_Munteanu> (actual directories)
18:11:51 <Kron> I name the file Data.QuadTree.hs and then just cabal init on that?
18:12:07 <Eduard_Munteanu> Kron: no...
18:12:13 <Kron> no?
18:12:26 <Kron> is there any documentation I can reference? I'm finding this entire process very confusing
18:12:27 <Eduard_Munteanu> mkdir Data, then move QuadTree.hs into that, and edit your cabal file
18:12:30 <Eduard_Munteanu> No need to start over.
18:13:18 <Eduard_Munteanu> Kron: you just need to know the above convention on how the compiler looks for modules
18:14:05 <Eduard_Munteanu> Kron: and cabal init's direct output isn't meant to be used without customization, it's alright to go in and edit it.
18:14:38 <Eduard_Munteanu> It's not Hackage specific stuff, it's your actual build system.
18:15:42 <Kron> hmmmmmm
18:15:44 <Kron> ookay
18:15:47 <Kron> I... think i'm done?
18:15:50 <Kron> http://hackage.haskell.org/package/QuadTree-0.10.0/candidate
18:15:52 <Kron> hope it works
18:17:24 <Twey> Eduard_Munteanu: haskell-mode edits the .cabal file?
18:18:56 <Eduard_Munteanu> Twey: I've seen it adding stuff to modules and other-extensions, maybe I'm wrong.
18:19:47 <Kron> how often are packages processed?
18:19:51 <Twey> I don't know… I've never seen it do that, but it would be great if I could make it
18:20:10 <Eduard_Munteanu> Kron: it can take a few days... at least it used to.
18:20:12 <pyon> Can haskell-mode autogenerate a .cabal file?
18:20:17 <Kron> ah
18:20:19 <Kron> :(
18:21:21 <isaacbw> wow, warp
18:21:23 <isaacbw> nuff said
18:21:25 <Eduard_Munteanu> pyon: I don't think so, but you can just 'cabal init'
18:22:32 <Rodya_> i entered 'cycle ([30,29..0])' into ghci.... how can i manually break this loop?
18:22:42 <Rarrikins> Ctrl-C
18:22:43 <Eduard_Munteanu> Rodya_: ctrl-c
18:23:06 <Rodya_> thank you
18:26:22 <julianb> -quit
18:45:08 <Kron> is there anywhere I can see the haddock documentation online, if hackage is going to take a while to process?
18:45:33 <Kron> i can generate the html on my computer but it doesn't crosslink to other modules properly
18:49:00 * hackagebot bytestring-arbitrary 0.0.2 - Arbitrary instances for ByteStrings  http://hackage.haskell.org/package/bytestring-arbitrary-0.0.2 (tsuraan)
18:49:23 <pavonia> You can only see it after it has been processed
18:53:19 <carter> Kron: thats something that should be fixed in 1.20
18:53:24 <carter> :)
18:53:27 <carter> heck
18:53:33 <colDrMcBeardman> I have 13 megs of data I need to repeatedly search with string-comparison; can someone recommend a fast library?
18:53:34 <carter> 1.19 might have it you are ok with a dev vesrion
18:53:39 <colDrMcBeardman> maybe something with a trie?
18:53:42 <carter> colDrMcBeardman: what types of queries?
18:53:55 <colDrMcBeardman> carter, word-lookup
18:54:05 <colDrMcBeardman> so just string equality.
18:54:23 <Kron> 1.20 for what?
18:54:55 <Kron> colDrMcBeardman: isn't Map just a trie?
18:55:04 <colDrMcBeardman> I don't know.
18:55:09 <Kron> http://hackage.haskell.org/package/containers-0.5.5.1/docs/Data-Map.html
18:55:31 <Kron> size balanced binary trees
18:55:36 <Kron> http://hackage.haskell.org/package/containers-0.5.5.1/docs/Data-Map-Lazy.html
18:55:42 <Eduard_Munteanu> It's not quite a trie.
18:55:45 <Kron> yeah, it's not
18:55:51 <Kron> I was expecting something with a higher branch factor
18:56:34 <Eduard_Munteanu> 13 MiB sounds like you can fit into a Map in memory.
18:57:02 <colDrMcBeardman> It fits easily in memory, I was just wondering if anyone could recommend a high-performance library
18:57:23 <colDrMcBeardman> I have to look up thousands of words in the structure.
18:57:31 <colDrMcBeardman> (well, I can cache, but still....)
18:58:33 <Eduard_Munteanu> colDrMcBeardman: you could tokenize it into words and use an IntMap if your lookup keys come from the dataset itself.
18:59:18 <Eduard_Munteanu> And you pay some of the cost upfront rather than every time.
19:00:41 <rex1> I'm trying to write a program that takes some datatype and generates a gui form to edit structures of that type
19:01:35 <rex1> I'm pretty sure I can use GHC.Generics to generate the form, but I'm having trouble figuring out how to write the generic "glue code" that would modify the structure when a user enters something
19:02:39 <Eduard_Munteanu> rex1: I'd take a look at 'lens' and perhaps 'digestive-functors'
19:02:43 <carter> Kron: cabal
19:03:02 <Kron> ahh
19:03:05 <colDrMcBeardman> Eduard_Munteanu, the 13 meg is an annotated english dictionary; the data is dirty text scraped from the web, so I can't use optimizations like that unfortunately.
19:03:22 <joelteon> Is there a library that provides MonadIO'd System.IO functions
19:03:43 <Eduard_Munteanu> joelteon: lifted-base and monad-control
19:04:19 <rex1> is digestive-functors basically doing what I'm trying to do?
19:04:22 <joelteon> i'm looking for lifted hClose
19:04:32 <Eduard_Munteanu> joelteon: not generally for all of System.IO unfortunately
19:05:11 <Eduard_Munteanu> rex1: yeah... and 'lens' gives you a way to reference parts of a structure, and also provides some TH magic to derive them automatically
19:06:50 <rex1> ok
19:06:52 <rex1> thanks!
19:07:18 <Eduard_Munteanu> joelteon: that's easy though, you can just liftIO it
19:07:25 <joelteon> i hate liftIO
19:08:10 <Eduard_Munteanu> joelteon: the only time you need actual lifted-base magic is when said function takes other IO actions as arguments, for instance
19:11:03 <joelteon> that makes sense
19:14:03 * hackagebot pipes-attoparsec 0.5.0 - Attoparsec and Pipes integration.  http://hackage.haskell.org/package/pipes-attoparsec-0.5.0 (RenzoCarbonara)
19:14:13 <isaacbw> is all faster than and $ map?
19:14:43 <pavonia> What?
19:14:48 <triliyn> isaacbw: I think that's how it's implemented
19:14:48 <isaacbw> or does laziness do something there
19:14:59 <haasn> @src all
19:14:59 <lambdabot> all p =  and . map p
19:15:06 <isaacbw> lol awesome
19:15:38 <isaacbw> and is there a way in ghci to see a) which typeclasses a type is an instance of and b) see what is defined on a typeclass?
19:15:59 <isaacbw> or is that a job for source code
19:16:02 <haasn> isaacbw: :info aka :i does both
19:16:08 <isaacbw> woo, thank you!
19:21:41 <pamojarpan> hi everybody, I'm starting with vty-ui. I have a "button" that I wanna center. button :: Button but centered, and other functions require a "Widget a". How can I call centered? Any help?
19:24:05 * hackagebot snaplet-css-min 0.1.2 - A Snaplet for CSS minification  http://hackage.haskell.org/package/snaplet-css-min-0.1.2 (TimothyJones)
19:24:11 <pavonia> pamojarpan: You can use buttonWidget to get the Widget from a Button
19:24:39 <pamojarpan> pavonia: thanks! I've just see it in this example: http://lpaste.net/95093
19:29:05 * hackagebot llvm-general-pure 3.3.11.0 - Pure Haskell LLVM functionality (no FFI).  http://hackage.haskell.org/package/llvm-general-pure-3.3.11.0 (BenjaminScarlet)
19:29:07 * hackagebot llvm-general 3.3.11.0 - General purpose LLVM bindings  http://hackage.haskell.org/package/llvm-general-3.3.11.0 (BenjaminScarlet)
19:29:09 * hackagebot llvm-general-pure 3.4.2.0 - Pure Haskell LLVM functionality (no FFI).  http://hackage.haskell.org/package/llvm-general-pure-3.4.2.0 (BenjaminScarlet)
19:29:11 * hackagebot llvm-general 3.4.2.0 - General purpose LLVM bindings  http://hackage.haskell.org/package/llvm-general-3.4.2.0 (BenjaminScarlet)
19:32:59 <allspark> why are all the other number types instances of Bounded except Float?
19:33:42 <Kron> I think it's because Float has a degree of inaccuracy within it?
19:33:44 <Kron> I'm not sure
19:33:47 <geekosaur> Integer is also not Bounded
19:34:31 <Kron> well Integer is a bignum
19:34:42 <Kron> so yes trivially it's not bounded, it's extensible like a list right?
19:34:52 <Kron> floats and ints take static space
19:35:24 <geekosaur> Float/Double is kinda messed up, anyway; the Enum instance is not particularly sensible
19:35:25 <enthropy> > let inf = 1/0 in [inf == inf, inf < inf, inf > inf]
19:35:26 <lambdabot>  [True,False,False]
19:35:36 <dwcook> > compare (0 / 0) (0 / 1)
19:35:37 <lambdabot>  GT
19:35:54 <dwcook> The wonders of floating-point
19:36:08 <Kron> :t (0 / 0)
19:36:09 <lambdabot> Fractional a => a
19:36:14 <Kron> is it really a float though?
19:36:17 <geekosaur> and yes, where does Inf fit into it? much less NaN
19:36:18 <Kron> it's just fractional right?
19:36:59 <enthropy> it ought to default to Double
19:37:06 <geekosaur> Fractional is Float and Double (if Prelude)
19:37:29 <xxen> > compare (0.0 / 0.0) (0.0 / 1.0)
19:37:30 <lambdabot>  GT
19:37:31 <geekosaur> s/if Prelude/from just the Prelude/
19:37:51 <haasn> > compare (0/0) (0/0)
19:37:52 <lambdabot>  GT
19:38:02 <haasn> > flip compare (0/0) (0/0) -- \o/
19:38:03 <lambdabot>  GT
19:38:19 <xxen> :O
19:38:28 <haasn> > (0/0) > (0/0)
19:38:29 <lambdabot>  False
19:38:31 <dwcook> NaN is why we can't have nice things
19:39:20 <Kron> > 1 / 0
19:39:20 <lambdabot>  Infinity
19:39:35 <allspark> haskell is fucked up sometimes. we should start a wtfjs.com like site for haskell
19:39:46 <dwcook> s/haskell/float/
19:39:54 <dwcook> But the other is true as well
19:39:56 <startling> wtfhs
19:40:05 <Kron> /r/lolhs
19:40:08 <haasn> I vote for the first article to be about Enum/Bounded
19:40:23 <haasn> also class Real
19:41:03 <allspark> doesn't exist
19:43:54 <allspark> maybe the developers didn't see any value in making them instances, kinda like why there's no single element tuple
19:54:31 <alorente> I'm reading Real World Haskell and totally baffled by one of the code samples. Would someone look at it with me?
19:54:42 <alorente> http://book.realworldhaskell.org/read/barcode-recognition.html#Barcode.hs:parseRawPPM specifically, I can't figure out what ==> and ==>& are
19:55:44 <Platz> wadler is scaring the students.. QUADRATIC TIME!!!
19:57:57 <geekosaur> alorente: see the reference to chapter 10 (under "Chaining parsers together" there)
19:58:23 <alorente> hey it's right there in the text!
19:58:30 <alorente> thanks...
19:59:32 <alorente> oh now I get what the comments mean about this being a lot of work due to not introducing real monads yet
20:03:31 <flazz> when invoking :ctags, ghci says 'module X is not interpreted', what does this mean?
20:04:02 <geekosaur> it loaded a .hi file so it doesn't have source references to produce tags for
20:05:54 <geekosaur> to prevent this you can put a * in front of a name when loading it (command line [beware of the shell] or :l)
20:14:10 * hackagebot fay 0.19.1.1 - A compiler for Fay, a Haskell subset that compiles to JavaScript.  http://hackage.haskell.org/package/fay-0.19.1.1 (AdamBergmark)
20:14:32 <YellowOnion> I wrote a bit of code a while back: http://lpaste.net/101315 Does anyone have any tips on what would be a better way to approach this? something like pipes, conduits etc maybe?
20:22:07 <Kron> I can't think of anything
20:22:13 <Kron> though I don't know pipes, conduits
20:24:57 <Platz> It's *my* data constructor, *you* can't have it!! - Wadler 2011
20:25:24 <Platz> ok i'm done now
20:26:10 <YellowOnion> Kron: I guess I could say that I'm curious in a less imperative approach, considering the code is about 90% IO monads
20:26:20 <Kron> heh
20:26:28 <Kron> well, FRP is probably the coolest thing you can do
20:26:36 <Kron> but it's uh... really complex o_o
20:28:00 <dwcook> Kron, what is complex about it? (I wouldn't know)
20:28:39 <Kron> approaching a realtime program from the perspective of FRP is a little bit like approaching physics from the perspective of relativity
20:28:50 <Kron> you have to step outside the timestream and think like an achron
20:28:59 <Kron> which is marvelous
20:29:01 <Kron> and absolutely baffling
20:29:12 * hackagebot WeberLogic 0.1.2 - Logic interpreter  http://hackage.haskell.org/package/WeberLogic-0.1.2 (cameronbwhite)
20:29:13 <Kron> I want to try it in the future
20:29:19 <jamieklassen> Kron: very poetic
20:29:19 <dwcook> That gives a general feeling but I'm looking more for a specific instance.
20:30:18 <Kron> i'm not sure if I can describe any specific instances
20:30:27 <Kron> I barely understand any code snippets
20:31:15 <dwcook> You just get the feeling that it's complex, then.
20:31:32 <Kron> I listened to a 1 hour lecture on it
20:31:34 <Kron> and still didn't get it
20:31:41 <Kron> I get the strong feeling it's complex, yeah
20:33:21 <ezyang> is there a difference between 'data instance' and 'newtype instance'?
20:33:24 <ezyang> oh, I guess there is
20:33:30 <Kron> it is
20:33:34 <Kron> a very confusing difference
20:33:40 <Kron> data is an entirely new abstract data type
20:33:52 <ezyang> it actually makes sense, if you think about it.
20:34:03 <Kron> newtype is simply a new type on the compiler / type level but it is exactly the same as a previous time on an implementation level
20:34:05 <Kron> it's like
20:34:10 <Kron> you don't want to mix Meters and Feet
20:34:16 <Kron> but you want them both to be Ints
20:34:19 <Kron> so then you use newtypes
20:35:59 <abg> Hello. I'm running into a strange problem trying to build GHC. Some ghc.mk files never get created so make dies with " messages like "libraries/haskell2010/ghc.mk: No such file or directory". This is ghc 7.6.3 with 7.4.2 for bootstrapping.
20:41:15 <carter> did you do perl boot
20:41:19 <carter> and other things like ./configure?
20:41:25 <carter> abg: which directions were you follwoing?
20:41:30 <abg> I did configure.
20:41:41 <abg> I didn't realize there was a separate step
20:41:53 <carter> abg: which directions were you following
20:42:00 <carter> there ones on the ghc dev wiki should get you sorted :)
20:42:13 <carter> perl boo ; ./configure ; make
20:42:16 <carter> *perl boot
20:42:27 <carter> is this with a source dist?
20:42:30 <carter> or how did you get it
20:42:33 <abg> Thanks, I'll check. I wasn't following any specific directions. I was porting an internal build from 7.4.2 to 7.6.3.
20:42:39 <carter> oh
20:42:40 <carter> cool
20:42:50 <carter> where ? :)
20:42:52 <abg> Yes, it's working with 7.6.3 source.
20:42:58 <carter> no
20:43:02 <carter> a source tar ball
20:43:05 <carter> or git
20:43:09 <abg> tarball
20:43:14 <carter> ok
20:43:20 <abg> Is the perl boot step new?
20:43:24 <carter> nope
20:43:29 <abg> Because 7.4.2 was building just fine without it
20:43:37 <carter> you may not need it
20:43:43 <carter> see if you can do it though
20:43:47 <abg> Checking
20:44:38 <abg> Well, perl boot just did explicitly say it generated so and so ghc.mk files
20:44:41 <abg> I think this might just work!
20:45:40 <abg> Yes!
20:45:48 <abg> I should start reading instructions again.
20:45:52 <abg> Thanks, carter!
20:45:57 <carter> a soke
20:45:59 <carter> *soke
20:54:29 <ezyang> Do closed type families support nonlinear patterns?
20:55:02 <ezyang> yes, apparently
20:55:39 <carter> ezyang: yup!
20:55:42 <carter> its kinda awesome
20:55:47 <carter> i've yet to use it fully :)
20:56:14 <carter> one crazy thing i think it lets you do, is formulate unification queries
20:56:33 <carter> "can you unify this way? If not, Can you try this other way?"
20:56:53 <carter> hows things ezyang ?
20:57:23 <ezyang> I am working on a blog post, "Haskell for Coq programmers"
20:57:39 <carter> cool
20:58:09 <ezyang> can closed type families be partial?
20:58:23 <carter> i think so
20:58:33 <carter> i'm not sure though...
20:58:53 <carter> well yeah
20:58:58 <carter> lemme try
21:00:45 <carter> yup
21:00:45 <carter> Prelude> :{
21:00:46 <carter> Prelude| type family Foo x where
21:00:46 <carter> Prelude|   Foo Int = Bool
21:00:46 <carter> Prelude|   Foo Bool=Int
21:00:46 <carter> Prelude| :}
21:00:56 <ezyang> k
21:01:07 <carter> so they can be partial
21:01:21 <carter> and also amazingly used to decide definitional equality
21:03:01 <carter> though i've yet to use that :)
21:07:32 <enthropy> carter: :set +m -- you know it?
21:24:18 * hackagebot cryptsy-api 0.2 - Bindings for Cryptsy cryptocurrency exchange API.  http://hackage.haskell.org/package/cryptsy-api-0.2 (bss)
21:33:13 <rex1> I'd like to write a typeclass like this:
21:35:21 <rex1> class FormConstructor a where
21:35:21 <rex1>   form :: TVar b -> Lens' b a -> UI Element
21:35:21 <rex1> yyy
21:35:21 <rex1> Is that possible somehow?
21:35:21 <cwraith> rex1: it seems possible. What are you actually asking?
21:35:45 <rex1> when I try it says "illegal polymorphic or qualified type"
21:36:32 <c_wraith> try enabling RankNTypes
21:39:11 <abg> carter, you will not believe why that build was failing
21:39:33 <abg> (There was another integer-gmp ghc.mk missing failure despite perl bootl.)
21:40:39 <abg> So, the tarball I was working with had all the required ghc.mk files. The problem was that all libraries had a .gitignore that ignored said ghc.mk files. So, when I checked everything into source control and built on a different machine, these files were missing.
21:41:42 <c_wraith> rex1: yeah, Lens' is actually a type alias to a type with a forall in it.  You need RankNTypes for that type signature to work.
21:42:22 <rex1> oh ok.
21:43:18 <rex1> could you give a simple example of a rank n type?
21:43:53 <c_wraith> rex1: sure
21:44:55 <c_wraith> > let f :: Num a => (a -> a) -> (Int, Double) ; f g = (g 1, g 3.7) in f (+1) -- using normal, rank 1 types
21:44:56 <lambdabot>  Couldn't match type `GHC.Types.Int' with `GHC.Types.Double'
21:44:56 <lambdabot>  Expected type: GHC.Types.Double
21:44:56 <lambdabot>    Actual type: a
21:45:27 <c_wraith> > let f :: (forall a. Num a => (a -> a)) -> (Int, Double) ; f g = (g 1, g 3.7) in f (+1) -- using a rank 2 type
21:45:28 <lambdabot>  (2,4.7)
21:46:03 <c_wraith> rex1: more or less, they let you specify that a function's argument must be polymorphic
21:46:43 <rex1> oh I see
21:46:45 <rex1> thanks
21:47:15 <Javran> I want to have a Writer inside List, so I use something like "ListT (Writer [Int]) Int", but I don't know how to change this line: "let space = [1..10]"
21:48:13 <Javran> @hoogle [a] -> ListT m a
21:48:14 <lambdabot> Control.Monad.Trans.List ListT :: m [a] -> ListT m a
21:48:14 <lambdabot> Control.Monad.Trans.Class lift :: (MonadTrans t, Monad m) => m a -> t m a
21:48:14 <lambdabot> Data.Graph.Inductive.Graph delNodes :: Graph gr => [Node] -> gr a b -> gr a b
21:48:44 <Javran> :t ListT . return
21:48:45 <lambdabot> Not in scope: data constructor `ListT'
21:50:27 <Javran> never mind, got it
21:53:06 <dalaing> Javran: have you looked into the ListT from Pipes?
21:54:15 <Javran> dalaing: I don't know that is "Pipes"..
21:54:20 <Javran> that -> what
21:54:36 <c_wraith> @hackage pipes
21:54:36 <lambdabot> http://hackage.haskell.org/package/pipes
21:55:58 <c_wraith> Hmm.  ListT isn't in that package anymore.  Wonder which sub-package it got moved to
21:56:06 <Javran> I see, but I think that is not related..
21:56:29 <Javran> I imported Control.Monad.List from mtl and it works fine
21:57:43 <c_wraith> Javran: that particular ListT is known to have some problems. But if you're not running into them, great.
21:58:01 <dalaing> c_wraith: it's a newtype in the Pipes module
21:58:02 <Javran> actually I want to verify that changing the order of constraints in a List monad will result in different search space, so I want to use a writer to keep logs, it there a better way?
21:58:39 <dalaing> Javran: the author of the Pipes library makes a compelling argument that his version is "ListT done right"
21:58:57 <c_wraith> dalaing: oh.  Hah.  I always forget that Pipes is a real module, not just namespacing
22:00:39 <dwcook> Is there a semi-common name for flip (.)?
22:00:51 <Javran> not sure in this particular usage, should I use ListL from mtl?
22:03:10 <dalaing> Javran: if it seems to be working you may as well stick with it - I just brought it up so that if you have problems later you have something to google :)
22:03:58 <Javran> :t (>>>) :: (a -> b) -> (b -> c) -> a -> c
22:03:59 <lambdabot> (a -> b) -> (b -> c) -> a -> c
22:04:24 <Javran> dwcook: I think this is another name for "flip (.)"
22:04:24 <dwcook> Javran, thanks
22:05:02 <Javran> dalaing: ok, thanks for the information!
22:07:57 <honza> what's the current best syntax highlighting plugin for vim?
22:10:19 <dalaing> honza: I like https://github.com/dag/vim2hs but I have no idea if I like it on it's own - I have a pile of vim plugins for Haskell that may or may not be interacting in strange ways
22:11:19 <honza> dalaing: great, i'll give it a go, thanks
22:12:42 <dalaing> honza: there's various other plugins mentioned here - https://github.com/dalaing/dotfiles - with setup instructions in the .vimrc
22:13:21 <honza> dalaing: nice — a screenshot might be nice :)
22:13:41 <dalaing> gives nice completion, checks types with ghc-mod and style with hlint on every save, you can query types of expressions with F2 (repeated presses expand the expression being queried, F3 clears the selection)
22:14:37 <dalaing> I still need to get the README into non-late-night-and-drinking markdown
22:14:43 <dalaing> screenshots will come after that
22:15:37 <dalaing> hlint in a short feedback loop has made my code much nicer, using 'undefined' as a placeholder and F2 to find types has been pretty nice as well
22:15:49 <dalaing> I should probably just turn on the type holes extension
22:17:44 <MP2E> Any tips on integrating haskell with emacs? :D
22:19:57 <tac> Step 1) Download haskell-mode
22:20:01 <tac> Step 2) Try not to cry.
22:20:04 <tac> Step 3) Cry alot.
22:20:07 <MP2E> haha
22:20:16 <dalaing> MP2E: there was a link on haskell-cafe a little while back, can't quite remember what it was, but it might have been this - https://ghc.haskell.org/trac/ghc/wiki/Emacs
22:20:37 <MP2E> thankfully I'm proficient with vim as well so it doesn't really matter
22:20:41 <MP2E> just curious
22:20:54 <tac> Sorry, all I have are old internet jokes :( Haskell-mode has never easy enough to seem worth it to me.
22:20:54 <dalaing> I can imagine ghc-mod is just as handy in both
22:21:24 <Platz> there's also structured-haskell-mode for emacs, haven't tried it
22:22:07 <dalaing> Platz: that's half the reason I've been thinking of getting back into emacs
22:22:35 <dalaing> the other half is proof-general and agda-mode
22:24:13 <Platz> MP2E: http://tim.dysinger.net/posts/2014-02-18-haskell-with-emacs.html
22:26:26 <sccrstud92> hey everyone
22:26:41 <sccrstud92> if i had an STArray of STRefs
22:26:46 <Kron> MP2E: https://github.com/chrisdone/structured-haskell-mode
22:26:58 <sccrstud92> is there a way to convert that to an STArray of normal values?
22:27:02 <Kron> scroll down to the pretty gifs
22:27:06 <Kron> and weep tears of joy
22:27:36 <sccrstud92> ie STArray s i (STRef s a) -> ST s (STArray s i a)
22:28:22 <MP2E> haha
22:28:24 <MP2E> neat :P
22:28:52 <MP2E> yes this looks great
22:28:53 <jle`> sccrstud92: is there a mapM for STArray?
22:28:57 <MP2E> thanks
22:29:12 <jle`> you can do mapM readSTRef array, or whatever the methods are
22:29:13 <Kron> then you try to install it, and the tears really begin :P
22:29:16 <Kron> pretty much tac's steps above
22:29:22 <Kron> I got it to work once and it was awesome though
22:30:20 <jle`> sccrstud92: yeah, there is mapM for STArray
22:30:37 <c_wraith> sccrstud92: why do you have an STArray of STRefs in the first place?
22:30:39 <sccrstud92> jle`: where is it located?
22:30:54 <jle`> sccrstud92: Data.Traversable
22:30:59 <sccrstud92> c_wraith: I don
22:31:01 <no-n> where and what is if'? no results on hoogle
22:31:10 <sccrstud92> c_wrait: i dont actually, just something similar
22:31:22 <Kron> no-n: it's basically a functional version of if
22:31:24 <Kron> instead of syntax
22:31:32 <Kron> if' f x y = if f then x else y
22:31:40 <no-n> ok
22:31:41 <Kron> so you can do things like curry it, etc.
22:31:46 <no-n> nod
22:31:50 <no-n> thought so :p
22:31:51 <jle`> :t bool
22:31:52 <lambdabot> Not in scope: `bool'
22:31:53 <sccrstud92> jle`: thanks. btw, im the same guy who asked you about ST and Rand monad transformer stack
22:31:58 <sccrstud92> jle`: about a month ago
22:32:05 <no-n> it doesn't appear to be in the std library though
22:32:22 <jle`> no-n: i've only seen it used in @pl
22:32:24 <jle`> for cleaner pl's
22:32:30 <jle`> sccrstud92: ah haha
22:32:32 <jle`> sccrstud92: cheers
22:32:43 <jle`> did you ever reach a satisfying conclusion?
22:33:11 <sccrstud92> jle`: I remember that I did, I just don't remember what it was! haha
22:33:15 <jle`> sccrstud92: haha
22:33:30 <jle`> well congrats
22:37:28 <sccrstud92> jle`: it looks like ghc cant find a Traversable instance for STArray s
22:38:02 <jle`> :/
22:38:31 <fly2web> take 1 $ iterate (*2) 1   <----- i don't understand that first number is 1, i think it must be 2?
22:38:45 <jle`> sccrstud92: it looks like it was taken out of base
22:38:48 <jle`> for some reason
22:38:55 <sccrstud92> damn
22:39:01 <sccrstud92> does it still exist somewhere else?
22:39:24 <sccrstud92> im too unfamiliar with hackage/ghc
22:39:39 <pavonia> @src iterate
22:39:39 <lambdabot> iterate f x =  x : iterate f (f x)
22:39:46 <pavonia> fly2web: ^
22:40:14 <fly2web> yes pavonia
22:40:18 <jle`> fly2web: iterate f x = [x, f x, f (f x), f (f (f x), ... ]
22:40:23 <jle`> so iterate (*2) 1
22:40:30 <jle`> is 1, 1*2, 1*2*2, ...
22:40:46 <jle`> sccrstud92: can't find it, how lame
22:40:51 <jle`> but
22:41:09 <jle`> in 4.1.0.0 it was basically fromList . mapM f . toList
22:42:50 <sccrstud92> jle`: is there a foldable instance?
22:42:51 <fly2web> jle`: thanks
22:43:15 <pyon> In a multi-parameter type class with an associated family, must the type family depend on *all* the type parameters of the class, or may it depend only on some of them?
22:44:36 <dalaing> has anyone used pipes to drive a comonad yet?
22:48:18 <fly2web> what is 'predicate'?
22:48:30 <fly2web> i don't know the mean of predicate.
22:48:50 <triliyn> fly2web: a predicate is just a function that returns a bool
22:49:08 <fly2web> oh thanks tir
22:49:13 <fly2web> triliyn:
22:49:50 <triliyn> :)
22:49:57 <fly2web> :)
22:53:25 <jle`> sccrstud92: i do'nt see one, you can search hoogle
22:54:10 <jle`> oh wait
22:54:13 <jle`> ghci tells me there is
22:54:49 <jle`> :/ it tells me there is Traversable too
22:55:17 <jle`> what GHC version are you using?
22:56:05 <jle`> yeah there is def a Foldable instance in 4.6.0.1...and ghci tells me that both 7.8 and 7.6.3 have foldable and traversable instances
22:57:33 <sccrstud92> 7.6.3
22:58:07 <jle`> the implementation is basically mapM f arr = listArray (bounds arr) . mapM f . elems $ arr
22:58:59 <sccrstud92> jle`: is that for Array or MArray?
22:59:30 * hackagebot clifford 0.1.0.5 - A Clifford algebra library  http://hackage.haskell.org/package/clifford-0.1.0.5 (spacekitteh)
22:59:46 <CindyLinz> sccrstud92: Array
23:00:22 <CindyLinz> MArray's is getElems
23:00:27 <sccrstud92> and getBounds
23:00:39 <sccrstud92> and newListArray
23:00:43 <CindyLinz> newArray.. :p
23:00:45 <sccrstud92> but i get the idea
23:00:54 <sccrstud92> haha ur right
23:01:15 <sccrstud92> no wait
23:01:18 <sccrstud92> it is newListArray
23:01:35 <CindyLinz> yes, there is, too.
23:02:04 <jle`> oh yeah, i totally was looking at Array, sorry
23:02:12 <sccrstud92> jle`: no worries
23:03:15 <jle`> yeah, i wonder why there isn't one.  is it possible?
23:03:29 <jle`> i assume you'd be able to implement it from looking at the Array instance
23:03:31 <sccrstud92> vector has one
23:03:32 <jle`> if it was possible at all
23:04:00 <jle`> also my implementation i put earlier is totally wrong, it'd be fmap listarray
23:04:33 <jle`> maybe you can submit a pull request to base
23:05:04 <jle`> oh base doesn't take pull requests.
23:05:29 <jle`> https://ghc.haskell.org/trac/ghc
23:06:25 <jle`> but i mentioned the implementation because it probably is not the most performant implementation
23:08:57 <spacekitteh> how does the hackage downloads counter compute its count?
23:11:00 <jle`> why does my small utility package that i uploaded last week have 20 downloads, i didn't think anybody would ever donwloaded it
23:11:07 <sccrstud92> alright it typechecked, thanks guys
23:11:13 <jle`> is there a bot or something that goes around downloading hackage packages?
23:11:19 <jle`> do i have to worry about maintaining a stable api now? :/
23:11:27 <spacekitteh> jle`: i only uploaded my first package 2 days ago, already it has 55 downloads
23:11:30 <spacekitteh> surely that can't be right
23:11:38 <jle`> i should have followed rule #1, avoid success at all costs
23:12:13 <jle`> spacekitteh: maybe your package is just awesome
23:12:39 <spacekitteh> doubt it, i'm teaching myself haskellw ith it XD
23:12:50 <YellowOnion> Is it possible to turn a file in to some sort of data structure at compile time?
23:13:08 <jle`> YellowOnion: i think that's a job for TH
23:13:35 <YellowOnion> jle`: that was my first guess as well.
23:17:25 <YellowOnion> jle`: probably too much overkill for what I need, and has the added benefit live editing.
23:18:12 <jle`> a TH solution is generally not encouraged, but...there are cases where it might be justified
23:18:23 <spacekitteh> does (atto)parsec have some sort of capability for it?
23:19:21 <[swift]> YellowOnion: i've used cabal preprocessors for that
23:19:44 <[swift]> in some cases might be simpler than TH
23:23:03 <YellowOnion> [swift]: it certainly is a simple situation, just a dict of words (one each line) which one item is picked at random, I was curious about a more pure approach.
23:24:53 <[swift]> "reading a file" and "pure approach" seem fundamentally at odds =)
23:26:12 <YellowOnion> [swift]: thats the thing, I could just represent it as a list of strings, but I cannot be bothered wrting out the entire data structure by hand
23:27:25 <spacekitteh> [swift]: not if the file is meant to be static
23:27:41 <spacekitteh> like coefficients for a spherical harmonic model
23:31:32 <YellowOnion> going off on a tangent, I like how Unicode errors cause runhaskell to crash in cmd.exe, 2014 and windows still hasn't added Unicode support to some of their fundamental tools
23:32:13 <no-n> how do i ask ghc to put the resulting executable file into a given directory?
23:32:34 <spacekitteh> does -o directory/filename not work?
23:33:06 <no-n> probably does!
23:33:44 <spacekitteh> oh :3
23:34:13 <no-n> erm, so i do ghc File.hs -o file?
23:34:35 <spacekitteh> i think the -o bit has to be first
23:34:36 <spacekitteh> but yes
23:34:39 <no-n> ok
23:37:28 <YellowOnion> Actually, maybe I should report this as a bug.
23:39:50 <spacekitteh> YellowOnion: do it
23:41:01 <YellowOnion> spacekitteh: I assume this should be reported to the ghc tracker, do you have a link? I can't find it
23:41:15 <spacekitteh> YellowOnion: oh i thought you meant to microsoft
23:43:08 <YellowOnion> oh, I'll still have to wait about 2 years before the code fix is released, and everyone has recompiled their code to work with this.
23:44:34 <YellowOnion> probably easier for ghc/runhaskell to not attempt to print none-ascii characters when cmd.exe is the shell
23:44:37 * hackagebot mono-traversable 0.4.0.2 - Type classes for mapping, folding, and traversing monomorphic containers  http://hackage.haskell.org/package/mono-traversable-0.4.0.2 (MichaelSnoyman)
23:45:42 <spacekitteh> YellowOnion: what version of windows?
23:46:46 <YellowOnion> Windows 8
23:46:51 <spacekitteh> mm ok
23:47:03 <MP2E> lol Windows 8 doesn't support unicode in cmd.exe
23:47:06 <MP2E> holy shit
23:47:36 <no-n> 0.o
23:47:45 <MP2E> that's kinda pathetic
23:47:51 <YellowOnion> yep :(
23:47:57 <no-n> that's just lazy
23:48:02 <no-n> and not the good kind of lazy :p
23:48:08 <spacekitteh> although to be fair the linux kernel terminal doesn't support unicode either
23:48:38 <YellowOnion> they have powershell now, though I assume since ghc is catching the error you actually print the characters
23:49:00 <spacekitteh> YellowOnion: just tried pasting unicode in powershell, doesn't work
23:49:08 <YellowOnion> you actually can't*
23:49:54 <YellowOnion> its really weird error, like say you have some program that prints ID3 tags to console, it'll just crash because of this
23:53:44 <YellowOnion> I found a Library (for handling 3d models) that uses ℝ for its types, and it also threw a non-ascii error in putChar
23:54:06 <YellowOnion> debugging it was a nightmare.
23:56:47 <YellowOnion> http://hackage.haskell.org/package/implicit-0.0.3/docs/Graphics-Implicit.html
23:59:38 * hackagebot wai-extra 2.1.0.1 - Provides some basic WAI handlers and middleware.  http://hackage.haskell.org/package/wai-extra-2.1.0.1 (MichaelSnoyman)
