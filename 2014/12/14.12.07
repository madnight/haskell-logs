00:00:05 <codygman> srhb: Alright
00:00:25 <schell> both of those functions have the same constraints, but the function/action i’d like to store would potentially have all those same constraints
00:01:25 <codygman> srhb: http://lpaste.net/115842
00:02:22 <schell> so it’s like being able to store an Eff r () inside an Eff r () - the outer function constraints would be something like (Member (State (Eff r ())) r) => Eff r ()
00:03:12 <srhb> codygman: The error doesn't seem to refer to the pasted code.
00:04:11 <schell> the main problem is then when i run the outermost Eff r () i have to pass the inner effect using evalState, which afaik needs a concrete type - it’s like a recursive type problem
00:04:47 <codygman> srhb: Sorry! I've commented line 129 this time: http://lpaste.net/115842
00:06:11 <srhb> codygman: Are you sure you're using myUploadHandler in a snaplet context?
00:07:36 <codygman> srhb: I believe so, I pasted the calling function: http://lpaste.net/115842
00:07:40 <srhb> codygman: (Ie are you sure you don't want MonadSnaplet instead of MonadSnap)
00:07:43 <codygman> "testUploadHandler"
00:09:15 <srhb> codygman: Can you get rid of the type signature of both UploadHandlers and see what it infers for myUploadHandler? Otherwise I'd do as shachaf suggested and go ask #snapframework
00:09:56 <codygman> srhb: myUploadHandler :: MonadIO m => [(t1, Either t FilePath)] -> m ()
00:10:03 * hackagebot unbound-generics 0.0.2 - Reimplementation of Unbound using GHC Generics  http://hackage.haskell.org/package/unbound-generics-0.0.2 (AlekseyKliger)
00:10:03 * hackagebot text-show 0.3.1.0 - Efficient conversion of values into Text  http://hackage.haskell.org/package/text-show-0.3.1.0 (ryanglscott)
00:13:16 <trap_Exit> how do I tell ~/.emacs.el to load up ~/.emacs.d/init.el ? trying out space-macs
00:13:28 <srhb> codygman: Too complex for me. I think it has something to do with the m not being HasPersistPool.
00:13:36 <srhb> trap_Exit: Try #emacs
00:13:52 <codygman> srhb: Alright, well thanks for the help anyway :)
00:14:02 <srhb> codygman: Try #snapframework, they're really helpful
00:17:33 <schell> i don’t know if there’s any way to accomplish this - i’m getting a “Context reduction stack overflow”
00:17:38 <schell> that’s a new one
00:19:58 * hackagebot bloodhound 0.4.0.2 - ElasticSearch client library for Haskell  http://hackage.haskell.org/package/bloodhound-0.4.0.2 (bitemyapp)
00:20:21 <trap_Exit> anyone know how to turn on haskell-mode in space-macs ?
00:29:51 <sinelaw> space--macs?
00:39:59 * hackagebot tasty-quickcheck 0.8.3.2 - QuickCheck support for the Tasty test framework.  http://hackage.haskell.org/package/tasty-quickcheck-0.8.3.2 (RomanCheplyaka)
00:56:51 <zerkms> guys, is it essential to read TAPL to be successful in haskell?
00:57:41 <sinelaw> zerkms, in my opinion - not at all
00:58:00 <sinelaw> zerkms, it's a rather theoretical book, which helps understand WHY things are as they are
00:58:24 <sinelaw> but doesn't help you write better code
00:59:36 <sinelaw> also, it doesn't cover some of Haskell's features, such as type classes, GADTs, and also importantly Haskell's approach to typing IO
01:00:29 <sinelaw> zerkms, that being said, it was a real eye-opener for me
01:04:38 <Feuerbach> zerkms: no, it's not
01:10:50 <srhb> Someone ought to write an "is math really needed for Haskell" post, it seems most of Reddit is about that these days. :P
01:17:46 <zerkms> srhb: that's the myth (?) that is packaged with haskell
01:17:50 <zerkms> :-)
01:17:55 <srhb> zerkms: Indeed. Unfortunately. :(
01:18:32 <srhb> I usually hand-wave something like: "No, what you get in Haskell is another tool for reasoning about code, but you don't HAVE to use it."
01:21:24 <haasn> srhb: I go the opposite route
01:21:28 <haasn> “Math is needed for all programming languages”
01:21:35 <srhb> :P
01:21:54 <srhb> The ivory tower needs to be higher, HIGHER!
01:21:55 <dagnachew> hi all
01:22:58 <dagnachew> I wanted to install ghc-mod and I get cabal: The following packages are likely to be broken by the reinstalls:
01:22:59 <zerkms> srhb: "Indeed. Unfortunately." --- it still better than what php comes with ("it's shitty")
01:23:17 <srhb> zerkms: True!
01:23:58 <srhb> dagnachew: You can either do all the force flags and risk ruining some of your user package, or you can build ghc-mod in a sandbox.
01:27:49 <dagnachew> srhb: what is the best method ?
01:28:14 <srhb> dagnachew: I'd do the sandbox, just to keep things clean.
01:28:42 <srhb> dagnachew: mkdir ghcmod; cd ghcmod; cabal sandbox init; cabal install ghc-mod; copy the binary from dist/... to where you want it
01:29:57 <merijn> @quote ivory.tower
01:29:57 <lambdabot> dons says: we had 15 years building ivory towers - time to throw rocks from the top!
01:30:09 <merijn> srhb: ^^ ;)
01:30:10 <dagnachew> srhb: do you think it will be fixed in the future ?
01:30:14 <srhb> merijn: Haha!
01:30:32 <srhb> dagnachew: No, it's an inherent problem with the way we do packaging and the fact that cabal-install is not a package manager.
01:30:44 <dagnachew> srhb: I will do for now the sandbox method
01:30:46 <merijn> dagnachew: I recommend uninstalling the packages that are breaking too and reinstalling
01:31:03 <merijn> dagnachew: Otherwise life will be miserable in the future when you least expect it
01:31:43 <dagnachew> merijn: thanks
01:31:56 <merijn> dagnachew: The basic problems is the following: To obtain good performance GHC will inline code across module and even across libraries. As a result a library may not only depend on the *interface* of it's dependencies, but on the actual internals
01:32:21 <merijn> dagnachew: Therefore, down/up grading a dependency, even if the interface stays the same, can break other packages.
01:32:59 <merijn> dagnachew: The only real solution to this is "don't inline across libraries", but unfortunately this is absolutely *crucial* to get good performance from some libraries (like text and that sort of thing)
01:33:55 <dagnachew> merijn: I tried to reinstall one of the package yesod and I got The following packages are likely to be broken by the reinstalls:
01:34:31 <merijn> dagnachew: Oh, yesod is notoriously tricky to install. I would recommend also consulting #yesod or the mailing list Snoyman is really responsive when it comes to email
01:35:28 <merijn> dagnachew: My usual approach is: manuall unregister anything that it warns might break due to a reinstall (using ghc-pkg unregister) and then install them after updating. That's tedious, but guaranteed to be safe (in that you will never run into unexpected breakage in the future)
01:35:57 <srhb> My approach is nuking all packags... :-)
01:36:30 <merijn> That also works, but wastes more build time reinstalling :p
01:36:30 <dagnachew> merijn: how do i unregister ?
01:36:45 <merijn> dagnachew: "ghc-pkg unregister <package name>"
01:37:27 <dagnachew> merijn: is there a way to remouve all packages ? with * ?
01:37:38 <Audioburn> hi
01:38:12 <merijn> dagnachew: If you're gonna remove everything, just follow srhb's advice of nuking everything. (Although I always forget whether you're supposed to nuke .ghc or .cabal)
01:44:03 <dagnachew> merijn: I nuked everything and am reinstalling
01:45:03 * hackagebot th-lift 0.7 - Derive Template Haskell's Lift class for datatypes.  http://hackage.haskell.org/package/th-lift-0.7 (MathieuBoespflug)
01:54:08 <haasn> I stopped using cabal and I never needed to nuke .cabal again
01:54:22 <haasn> But that's sort of obvious, in retrospect.
01:54:24 <srhb> haasn: nix?
01:54:27 <haasn> srhb: portage
01:54:30 <srhb> Oh.
02:04:51 <pharpend> http://ix.io/i7
02:05:06 <pharpend> ^ I'm trying to get cabal-install installed on my current machine
02:05:30 <pharpend> I installed it through my distribution's package manager. That's the output of "\cabal install cabal-install"
02:07:24 <Zol_> Is there a way to tell when mutural recursion is a good fit to solve a problem?
02:08:49 <Zol_> I find it really hard to see/tell/know when mutual recursion is a good fit, somehow my mind never goes "Oh, yeah! Let's do some mutual recursion here! \o/", because I think either bottom-up or top-down, which seems to make a single-way path down to the problem without recursive loops..
02:09:37 <shachaf> It's the same thought process as regular recursion.
02:10:33 <wz1000> @pl let fix f = f (fix f)
02:10:33 <lambdabot> (line 1, column 22):
02:10:34 <lambdabot> unexpected end of input
02:10:34 <lambdabot> expecting variable, "(", operator, ";" or "in"
02:10:45 <wz1000> @pl fix f = f (fix f)
02:10:45 <lambdabot> fix = fix (ap id)
02:11:29 <shachaf> Yes, that could be considered a small bug.
02:11:31 <shachaf> @pl ap x y z = x z (y z)
02:11:31 <lambdabot> ap = ap
02:12:41 <wz1000> @pl fix f = let x = f x in x
02:12:41 <lambdabot> fix = fix id
02:13:10 <wz1000> Wait, what?
02:13:19 <shachaf> See above.
02:15:18 <joe9> Any recommendations for a data structure to represent an in-memory simple (procfs like) file system?
02:15:25 <Zol_> shachaf: Ok, thanks. I guess I'll just need to come across some more solutions to problems using mutual recursion before I'll be able to tell myself? That's what I had to do in order to be able to see recursive solutions to simpler problems.
02:15:41 <haasn> joe9: A tree. hth
02:16:17 <joe9> haasn: something more than just a simple tree (finger tree, etc.)..
02:16:19 <jle`> @pl fox f = f (fox f)
02:16:19 <lambdabot> fox = fix (ap id)
02:16:25 <jle`> ^ wz1000
02:17:02 <wz1000> @src ap
02:17:02 <lambdabot> ap = liftM2 id
02:17:17 <jle`> the point is that your choice of names obscured what was going on :)
02:17:39 <wz1000> jle`: Oh
02:17:57 <wz1000> It's defining my fix in terms of the predefined fix
02:20:56 <wz1000> @pl löb fs = fix $ \xs -> fmap ($ xs) fs
02:20:56 <lambdabot> (line 1, column 3):
02:20:56 <lambdabot> unexpected '\182'
02:20:56 <lambdabot> expecting letter or digit, variable, "(", operator or end of input
02:21:04 <wz1000> @pl loeb fs = fix $ \xs -> fmap ($ xs) fs
02:21:04 <lambdabot> loeb = fix . flip (fmap . flip id)
02:21:44 <Walther> huh, wasn't haskell supposed to have pretty good unicode support
02:22:00 <wz1000> Walther: It's lambdabots fault
02:22:33 <Walther> ah, right
02:22:42 <Walther> irc isn't easy
02:35:48 <torpet> I am trying to group tuples like that [(1,2), (3,6), (6,2), (1,3), (3,1)] -> [[(1,2),(1,3)], [(3,6), (3,1)], [(6,2)]]
02:37:25 <torpet> How can I do the grouping without sorting by the snd value of the tuple
02:38:02 <pointed_set> :t groupBy ((==) `on` fst)
02:38:03 <lambdabot> Eq b => [(b, b1)] -> [[(b, b1)]]
02:38:31 <pointed_set> :m + Data.List Data.Function
02:39:11 <pointed_set> Without sorting - no wai
02:40:02 <pointed_set> :t groupBy eqFst . sortBy eqFst where eqFst = (==) `on` fst
02:40:03 <lambdabot> parse error on input ‘where’
02:40:45 <gord> :t 3**7
02:40:47 <lambdabot> Floating a => a
02:41:44 <gord> print 3**7
02:47:21 <torpet> whats the difference between "compare on" and "comparing"?
02:47:32 <torpet> i solved the prob by sorting, thanks guys
02:48:21 <ChristianS> torpet: nothing, `on` is just more flexible, i think
02:53:22 <Zol_> Can you say that return in "return :: a -> m a" lifts a value of type a into the monad of type m?
02:54:25 <Zol_> Like, if you want a value to become accessible to the IO monad, you use return to send it there?
02:55:28 <ChristianS> Zol_: lift or inject, something like that, yes
02:56:11 <Zol_> ChristianS: /Cool/ - thanks!
02:56:33 <wz1000> :t on
02:56:34 <lambdabot> (b -> b -> c) -> (a -> b) -> a -> a -> c
03:01:39 <jle`> torpet: btw, you probably mean "on compare"
03:02:10 <torpet> yeah you are right
03:03:16 <pointed_set> :t on compare
03:03:17 <lambdabot> Ord b => (a -> b) -> a -> a -> Ordering
03:03:43 <jle`> :t comparing
03:03:44 <lambdabot> Ord a => (b -> a) -> b -> b -> Ordering
03:04:11 <pointed_set> same thing
03:04:24 <pointed_set> :t [on compare, comparing]
03:04:25 <lambdabot> Ord b => [(a -> b) -> a -> a -> Ordering]
03:04:38 <jle`> yeah :)
03:12:03 <chaosmasttter> :t [compare `on`, comparing]
03:12:04 <lambdabot>     A section must be enclosed in parentheses thus: (compare `on`)
03:12:27 <chaosmasttter> :t [(compare `on`), comparing]
03:12:27 <lambdabot> Ord b => [(a -> b) -> a -> a -> Ordering]
03:15:08 <cluid> Hi, does anyone know why Lens is not working? http://lpaste.net/115847
03:16:33 <shachaf> Probably a versions thing.
03:18:18 <wz1000> Is Integer a subcategory of Hask?
03:18:33 <shachaf> Integer isn't a category.
03:18:47 <thxc> :t 1
03:18:48 <lambdabot> Num a => a
03:20:50 <pointed_set> :i Category
03:21:31 <pointed_set> lambdabot refuses to do an :info requests?
03:21:54 <pointed_set> :info Category
03:21:59 <shachaf> Pointedly refuses.
03:22:02 <cluid> I find it hard to use haskell beyond one line scripts because of the cabal problems :(
03:22:06 <shachaf> It considers them carefully and rejects them.
03:23:17 <k00mi> pointed_set: lambdabot is not ghci, it does not have that command
03:24:36 <srhb> cluid: This is not a cabal problem.
03:24:43 <cluid> oh
03:25:35 <srhb> cluid: Your version of wreq does not have the correct upper bounds, so it's trying to use a function from lens that has changed type, as far as I can see.
03:26:07 <srhb> cluid: Have you tried installing the newest version of wreq? I notice that it has bounced its lens bounds.
03:26:34 <cluid> I'd like to try that, how do i install the latest wreq?
03:26:39 <cluid> is there a way to upgrade all my packages
03:26:54 <srhb> cluid: Did you just do cabal install wreq?
03:27:35 <srhb> cluid: If so, you just need to do cabal update
03:27:47 <srhb> cluid: I just tried building wreq-0.3.0.0, so there is no problem.
03:27:51 * srhb goes away
03:30:04 <cluid> is there a correct guide o how to operate with ghc/cabal/etc
03:30:13 <shachaf> @where sicp
03:30:13 <lambdabot> http://mitpress.mit.edu/sicp/ | http://swiss.csail.mit.edu/classes/6.001/abelson-sussman-lectures/ | http://www.vex.net/~trebla/haskell/sicp.xhtml -- "Storage and Identification of Cabalized Packages"
03:30:36 <cluid> thanks
03:32:03 <cluid> hgow do I delete all my packages to start fresh
03:35:55 <kvanb> cluid
03:35:59 <kvanb> rm -rf ~/.ghc
03:36:01 <kvanb> rm -rf ~/.cabal
03:36:02 <cluid> thanks
03:36:12 <shachaf> You probably don't want to do that.
03:36:23 <kvanb> this will make you redownload adn build everything
03:36:25 <kvanb> and nuke your config
03:36:30 <shachaf> ~/.cabal has your cabal configuration and all sorts of things
03:36:33 <kvanb> but I do it like once every 3 months, its not harmful
03:36:36 <shachaf> ~/.ghc has your ghci history and all sorts of things
03:36:37 <kvanb> cabal will remake a new conf automatically
03:36:49 <shachaf> Yes, and then you have to fix the new one up to be like the old one.
03:37:03 <shachaf> Add library-profiling: True and so on.
03:37:08 <kvanb> unless you profile by default and and yeah
03:37:15 <kvanb> the default is not far off what most people would use
03:40:54 <cluid> I deleted those and did cabal update then cabal install and I got the same lens error
03:41:50 <cluid> I guess the .cabal file was broken, asking for incompatable dependencies
03:42:02 <cluid> how can I make a .cabal file that is reasonable?
03:42:10 <pointed_set> cluid: write to the developers then
03:42:36 <cluid> I am the developer
03:43:24 <pointed_set> ... of the lens package?
03:44:14 <cluid> sorry I was just hoping someone would give me some advice about cabal etc.
03:54:01 <cluid> i dont  know how anyone gets work done with haskell :S
03:56:19 <pointed_set> I made a client for a communication with some protocol a year ago
03:56:43 <pointed_set> Try other lens packages
04:00:07 <peddie> cluid: you could try asking in #haskell-lens
04:00:16 <peddie> cluid: they might know more about the error itself
04:01:14 <cluid> okay, thanks
04:15:40 <k00mi> cluid: why are you trying to install wreq-0.2.0.0 (instead of the newest, 0.3) and what version of lens do you have installed?
04:16:00 <cluid> i dont know but ill try with 0.3 and see if it helps, thank you
04:18:22 <k00mi> you can find out the version of lens you have installed with "ghc-pkg list lens"
04:26:02 <intrados> Is there a name for the distinction between typechecking `Foo a` and `f a`?
04:32:22 <quchen> Less polymorphic? :-)
04:33:56 <intrados> Hm. Because Elm can do the former but not the latter and I'm trying to figure out if it's deliberate or an oversight
04:35:47 <Feuerbach> "type constructor polymorphism"?
04:37:25 <intrados> That seems like as good a name as any
04:38:05 <wz1000> Is there any nice way to take the inverse of a list of increasing integers?
04:38:12 <joe9> I just stumbled upon the ClassyPrelude and find that it defines map (instead of having to use fmap). Just want to check if ClassyPrelude is recommended or highly regarded? (similar to the Safe module)
04:38:33 <wz1000> (the list is potentially infinite)
04:39:12 <wz1000> eg: inverse of [1,3,5..] is [2,4,6..]
04:41:14 <nerium> I'm trying to comple this test file, but I'm getting an error for some reason. Any idea why? https://gist.github.com/oleander/25b53cd0b628fd16f528
04:42:06 <intrados> joe9: https://www.reddit.com/r/haskell/comments/wfiao/the_classy_prelude_an_alternate_prelude_which/
04:42:18 <intrados> There's some discussion of it there
04:42:23 <joe9> intrados: thanks.
04:44:34 <mkiefel> nerium: I think you might want to include 'module Pack where' into Pack.hs.
04:45:05 <ClaudiusMaximus> > let inverse = go [1..] where go xs [] = xs ; go (x:xs) (y:ys) = case compare x y of LT -> x : go xs (y:ys) ; EQ -> go xs ys ; GT -> go (x:xs) ys in take 10 $ inverse [1,3,5] -- wz1000, something like this perhaps
04:45:06 <lambdabot>  [2,4,6,7,8,9,10,11,12,13]
04:46:42 <wz1000> ClaudiusMaximus: Thanks. Thats what I was looking for.
04:47:01 <ClaudiusMaximus> not sure if GT -> error "broken invariant"  would be better
04:47:03 <nerium> mkiefel: Yeah, that did the trick
04:47:05 <nerium> thanks!
04:47:53 <joe9> I am not able to figure out how traversable is different from functor. Are there any notes/examples that can show the differences?
04:49:23 <ClaudiusMaximus> joe9: https://www.haskell.org/haskellwiki/Typeclassopedia#Traversable might help
04:49:39 <joe9> ClaudiusMaximus: thanks.
04:50:18 <ClaudiusMaximus> joe9: in particular 11.3
04:50:37 <joe9> ok, thanks.
04:52:13 <nerium> Is there a way to tell ghc to ignore warnings when compiling?
04:52:53 <joe9> intrados: From what I can gather from the reddit discussion, it appears that ClassyPrelude is not a better version. Have I misunderstood?
04:53:26 <nerium> I tried using "-w", but that didn't work
04:56:39 <wz1000> Ok, i need to generate the sequence [1,3,7,12,18,26..] The differnences between two members is equal to the inverse of the sequence([2,4,5,6,8..]). I tried xs = 1 : zipWith (+) xs (inverse xs), but that results in _|_. Any ideas?
04:57:55 <ClaudiusMaximus> wz1000: why not use scanl (+) 0
04:58:24 <ClaudiusMaximus> > scanl (+) 0 [1..5]
04:58:26 <lambdabot>  [0,1,3,6,10,15]
04:59:19 <wz1000> ClaudiusMaximus: That is not what the sequence is
04:59:28 <cluid> inverse?
04:59:35 <Ferdirand> inverse with respect to what ?
04:59:47 <cluid> what is [2,4,5,6,8..]
04:59:59 <wz1000> cluid: I'm refering to elements that are not part of the sequence
05:00:08 <Ferdirand> aah
05:00:15 * hackagebot Deadpan-DDP 0.4.1.0 - Write clients for Meteor's DDP Protocol  http://hackage.haskell.org/package/Deadpan-DDP-0.4.1.0 (LyndonMaydwell)
05:00:24 <joe9> ClaudiusMaximus: just to confirm, functor is a subset of traversable. All traversable are automatically functors, correct?
05:00:53 <ClaudiusMaximus> joe9: superset, yes (see fmapDefault iirc)
05:00:55 <Ferdirand> so how did you write inverse ?
05:00:55 <wz1000> If the universe is [1,2,3..], and set a is [1,3,5..], then the inverse of a is [2,4,6..]
05:01:14 <Ferdirand> you have to write one that is aware that the input list is sorted
05:01:16 <wz1000>  ClaudiusMaximus | > let inverse = go [1..] where go xs [] = xs ; go (x:xs) (y:ys) = case compare x y of LT -> x : go xs (y:ys) ; EQ -> go xs ys ; GT -> go (x:xs) ys
05:01:25 <wz1000> Ferdirand: ^^
05:01:33 <wz1000> > let inverse = go [1..] where go xs [] = xs ; go (x:xs) (y:ys) = case compare x y of LT -> x : go xs (y:ys) ; EQ -> go xs ys ; GT -> go (x:xs) ys
05:01:34 <lambdabot>  not an expression: ‘let inverse = go [1..] where go xs [] = xs ; go (x:xs) (...
05:01:39 <wz1000> @let inverse = go [1..] where go xs [] = xs ; go (x:xs) (y:ys) = case compare x y of LT -> x : go xs (y:ys) ; EQ -> go xs ys ; GT -> go (x:xs) ys
05:01:41 <lambdabot>  Defined.
05:01:51 <wz1000> > inverse [1,2,3]
05:01:52 <lambdabot>  can't find file: L.hs
05:02:01 <wz1000> > inverse [2,4,6]
05:02:03 <lambdabot>  [1,3,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,...
05:02:15 <Ferdirand> are you sure 1 element is enough to boot the process ?
05:02:17 <wz1000> > inverse [2,4,6..]
05:02:19 <lambdabot>  <hint>:1:15: parse error on input ‘..’
05:02:37 <wz1000> > inverse [2,4..]
05:02:38 <lambdabot>  [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53...
05:02:53 <cluid> > inverse (1 : 3 : undefined)
05:02:54 <lambdabot>  [2*Exception: Prelude.undefined
05:03:15 <ClaudiusMaximus> > drop 1 . scanl (+) 0 . inverse $ [2,4..]
05:03:17 <lambdabot>  [1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,256,289,324,361,400,441,484...
05:03:52 <mauke> > fix (\xs -> 1 : zipWith (+) xs (inverse xs))
05:03:56 <lambdabot>  mueval-core: Time limit exceeded
05:04:09 <mauke> > fix (\xs -> 1 : 3 : zipWith (+) xs (inverse xs))
05:04:13 <lambdabot>  mueval-core: Time limit exceeded
05:04:15 <wz1000> > let xs = 1 : zipWith (+) xs (inverse xs) in take 10 xs
05:04:17 <ClaudiusMaximus> gotta go, back later
05:04:19 <lambdabot>  mueval-core: Time limit exceeded
05:04:31 <wz1000> > let xs = 1 : zipWith (+) xs (2 : drop 1 (inverse xs)) in take 10 xs
05:04:35 <lambdabot>  mueval-core: Time limit exceeded
05:05:05 <mauke> > fix (\xs -> 1 : 3 : 7 : zipWith (+) xs (inverse xs))
05:05:07 <lambdabot>  [1,3,7,3,7,12,9,15,21,19,26,34,33,42,51,51,61,71,73,84,95,98,111,123,127,141...
05:05:07 <wz1000> I (kinda) got it. It needs to know that 2 is not a part of the sequence
05:05:22 <Ferdirand> i think you need to start with at least 1,3,7
05:05:25 <wz1000> > let xs = 1 : zipWith (+) xs (2 : inverse xs) in take 10 xs
05:05:27 <lambdabot>  [1,3,5,9,15,22,30,40,51,63]
05:05:33 <wz1000> That is almost it
05:05:58 <wz1000> except the difference is 2 twice
05:08:02 <Ferdirand> > let xs = 1 : 3 : 7 : drop 2 (zipWith (+) xs (inverse xs)) in take 10 xs
05:08:04 <lambdabot>  [1,3,7,12,18,26,35,45,56,69]
05:08:45 <Ferdirand> > let xs = 1 : 3 : drop 1 (zipWith (+) xs (inverse xs)) in take 10 xs
05:08:49 <lambdabot>  mueval-core: Time limit exceeded
05:09:26 <wz1000> Ferdirand: That is exactly what I wanted.
05:09:42 <wz1000> Ferdirand: Although I'm pretty sure there is a way to remove the 7
05:10:19 <wz1000> > [1, let x = x in x]
05:10:23 <lambdabot>  mueval-core: Time limit exceeded
05:11:38 <wz1000> Ferdirand: Your second version  evaluates to 1:3:_|_
05:12:23 <Ferdirand> well yes, it was to show that 3 elements are really required to boot this implementation
05:12:29 <wz1000> Wait, you need to know that 4 is not a part of your sequence, you are right
05:13:29 <Ferdirand> that's a really interesting problem btw
05:13:48 <Ferdirand> was it specifically crafted to show off the possibilities of a lazy language ?
05:13:50 <wz1000> Ferdirand: I was reading GEB, thats where I got it from :P
05:14:44 <wz1000> Ferdirand: It's not a programming book. It was an example to show where positive and negative space blend into each other.
05:16:11 <wz1000> let xs = 1 : 3 : 6 : drop 2 (zipWith (+) xs (inverse xs)) in take 10 xs
05:16:16 <wz1000> > let xs = 1 : 3 : 6 : drop 2 (zipWith (+) xs (inverse xs)) in take 10 xs
05:16:17 <lambdabot>  [1,3,6,11,18,26,35,45,57,70]
05:16:26 <wz1000> > let xs = 1 : 3 : 4 : drop 2 (zipWith (+) xs (inverse xs)) in take 10 xs
05:16:29 <lambdabot>  mueval-core: Time limit exceeded
05:16:43 <wz1000> > let xs = 1 : 10 : 20 : drop 2 (zipWith (+) xs (inverse xs)) in take 10 xs
05:16:45 <lambdabot>  [1,10,20,24,29,35,42,50,59,70]
05:17:00 <wz1000> > let xs = 1 : 3 : 5 : drop 2 (zipWith (+) xs (inverse xs)) in take 10 xs
05:17:04 <lambdabot>  mueval-core: Time limit exceeded
05:17:21 <wz1000> > let xs = 1 : 3 : 6 : drop 2 (zipWith (+) xs (inverse xs)) in take 10 xs
05:17:23 <lambdabot>  [1,3,6,11,18,26,35,45,57,70]
05:17:52 <ahg> I am trying to parse a small xml string and use it to construct a data type. What is the simplest way to do that, and where can I find a tutorial or example usage?
05:18:10 <wei2912> use a xml parser
05:18:21 <ahg> err, that was unclear. I have already defined my data type, and I am looking to translate xml into an instance of that type
05:18:34 <ahg> yes, but which one? There are many on hackage.
05:18:35 <wei2912> yeh, use a xml parser
05:18:52 <wei2912> just give one a try
05:18:58 <wei2912> that way you'll learn
05:19:01 <wei2912> https://stackoverflow.com/questions/4619206/parse-xml-in-haskell
05:21:24 <ahg> wei2912: thanks for the advice
05:22:43 <wz1000> Ferdirand: The series is defined using what is not part of the series.
05:30:07 <arianvp__> Is there syntax highlighting for alex and happy files??
05:30:20 <arianvp__> I'm trying to find one for ViM, no such luck
05:30:27 <pointed_set> let fib = 0 : 1 : [a + b | (a, b) <- fib `zip` tail fib] in take 20 fib
05:30:31 <pointed_set> :t let fib = 0 : 1 : [a + b | (a, b) <- fib `zip` tail fib] in take 20 fib
05:30:32 <lambdabot> Num a => [a]
05:30:41 <pointed_set> let fib = 0 : 1 : [a + b | (a, b) <- fib `zip` tail fib] in take 20 fib
05:30:51 <nerium> I would run some assert functions inside the main funktion, is that possible? Like this; main = test1; test2; test3
05:30:54 <pointed_set> > let fib = 0 : 1 : [a + b | (a, b) <- fib `zip` tail fib] in take 20 fib
05:30:56 <lambdabot>  [0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181]
05:33:59 <nerium> Any idea?
05:36:45 <pointed_set> main = do test1; test2; test3
05:36:55 <pointed_set> assuming testN :: IO ()
05:37:06 <matematikaadit> > let fib = 0 : 1 : zipWith (+) fib (tail fib) in fib
05:37:08 <lambdabot>  [0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,...
05:37:24 <pointed_set> Now its a fibonacchi chat!
05:37:55 <nerium> pointed_set: Awesome, thanks!
05:39:22 <matematikaadit> > let fib = 0 : scanl (+) 1 fib in fib
05:39:24 <lambdabot>  [0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,...
05:39:32 <athan> Hey guys, I've got a question about "bridging" typeclass instance inference. Is there any way I could make this automatically become an instance? http://lpaste.net/115850
05:39:59 <athan> erm, instance matching? Idk what words to use :S
05:42:18 <srhb> athan: I'm not sure what you're trying to do. IsString a => Bar a?
05:42:57 <athan> srhb: No, not that necessarilly
05:43:29 <athan> I just want multiple `bar`s to use
05:43:49 <athan> I'll have my own data type (as () here), but I would also like to handle user-end typed strings
05:44:03 <athan> while -XOverloadedStrings is on
05:44:59 <srhb> athan: athan "user-end" typed strings?
05:45:07 <srhb> What does that mean?
05:46:15 <athan> srhb: String literals in the presence of -XOverloadedStrings
05:46:22 <athan> `"foo"` for instnace
05:46:27 <athan> syntax-level literals
05:46:33 <srhb> athan: Right, but someone needs to resolve the type of "foo"
05:46:45 <athan> That's the thing
05:46:52 <srhb> OK, so you want some kind of defaulting?
05:46:54 <athan> throughout the code, only Data.Text.Text is supported
05:46:59 <athan> exactly
05:52:30 <srhb> athan: Short of rebinding "" to always mean whatever type you want, I don't know how to do that, nor why you would want it.
05:53:26 <athan> srhb: It's for a Url combinator system
05:53:33 <athan> the idea is I could do either of these:
05:53:50 <athan> `script_ [src_ "http://foobar.com"] ""`
05:54:27 <athan> `script_ [src_ $ "foo.com" <?> ("bar","baz") <&> ("qux","foo")] ""`
05:54:39 <srhb> And what's the problem with that currently?
05:54:47 <athan> where `<?>` and `<&>` operate on the type `Url`
05:54:57 <srhb> What's Url?
05:55:16 <athan> the library that supports `src_` and everything else is embedded in -XOverloadedStrings
05:55:27 <athan> and I need to overload the overloadedstrings with Url :)
05:55:43 <athan> Url is just a data type representing a Url with GET parameters and such
05:55:44 <srhb> Well, can't you just instance IsString Url where ...
05:55:46 <srhb> ?
05:55:52 <athan> o.o
05:55:55 <athan> oh
05:56:00 <athan> there are multiple ways to render!
05:56:06 <athan> you can have relative paths
05:56:10 <athan> "foo.php"
05:56:14 <athan> grounded paths
05:56:17 <athan> "/foo.php"
05:56:22 <athan> or absolute paths
05:56:27 <athan> "example.com/foo.php"
05:56:40 <srhb> Yeah, that doesn't sound like an IsStringy thing.
05:56:43 <athan> where absolute actually lifts the template to the reader monad
05:56:52 <athan> right :/
05:57:41 <athan> by default, I'm going to hard-code it to being grounded (unless they call `expandRelative $ "foo.php" <?> ("bar","baz")` or `expandAbsulte`, etc)
05:57:58 <athan> but I'd also like to have that configurable, but probably in a different way, like a type
06:11:08 <ziggystar> I'm getting lots of errors in EclipseFP: ghc-modi failed with error: NG BUG: ghc-modi: could not execute: htfpp. Any idea?
06:11:43 <ziggystar> `htpff` is the preprocessor for HTF. I have it working in another EclipseFP install.
06:23:53 <KangaAkale> Hello
06:24:16 <KangaAkale> Please i need a little help eith my haskell prog
06:24:34 <arianvp__> Is it possible to use other datatypes then String with alex and happy?
06:24:40 <KangaAkale> can some help
06:24:59 <fragamus> sure what's the problem
06:25:13 <KangaAkale> i have this code in a file
06:25:36 <KangaAkale> module MatchDownload where  import System.IO import Network.HTTP import Network.URI import Data.Maybe  downloadMatchCSV :: String -> IO (Bool,String) downloadMatchCSV matchData = do                           rsp <- simpleHTTP $ getRequest matchURL                           case rspCode rsp of                            Left err -> return (False, "Error in connection: " ++ show err)                            Right (2,_,_) -> do    
06:25:45 <fragamus> http://lpaste.net/new/haskell
06:26:00 <KangaAkale> and this in another file
06:26:45 <KangaAkale> sorry
06:26:57 <KangaAkale> http://lpaste.net/2971066407514537984
06:27:08 <KangaAkale> hope u can see it
06:28:08 <srhb> KangaAkale: Yes, we can see it.
06:28:54 <KangaAkale> and this in another file
06:28:56 <KangaAkale> http://lpaste.net/1503678572999475200
06:29:12 <KangaAkale> when i try to compile it does not
06:29:24 <KangaAkale> it keeps giving me this
06:29:46 <KangaAkale> Preprocessing executable 'BundesligaMatches' for BundesligaMatches-0.1.0.0... Warning: output was redirected with -o, but no output will be generated because there is no Main module.
06:30:02 <srhb> KangaAkale: The module with main must be named Main
06:30:07 <srhb> KangaAkale: Not MatchMain
06:30:40 <KangaAkale> you mean Main.hs
06:30:47 <srhb> No, I mean module Main where ...
06:30:52 <srhb> instead of module MatchMain where ...
06:31:44 <leighman> hi, so I declare a record type, is there then a nicer way to create a list of them than [RecordType {blah="test", foo=23}, etc.] ?
06:32:02 <srhb> leighman: helper functions, non-record-syntax, ...
06:32:23 <srhb> leighman: For instance, you can still do RecordType firstvalue secondvalue thirdvalue ...
06:32:27 <KangaAkale> ok
06:32:39 <leighman> srhb: getting syntax error, possibly to do with my list indent
06:32:41 <KangaAkale> let me change it and get back to you
06:32:54 <leighman> srhb: cool
06:33:00 <leighman> srhb: so I have
06:33:11 <leighman> list = [
06:33:16 <srhb> leighman: paste it
06:33:25 <leighman> yar
06:33:31 <srhb> @where lpaste
06:33:31 <lambdabot> http://lpaste.net/
06:34:02 <leighman> at a library, access denieddddd...
06:34:15 <KangaAkale> still having the same error
06:34:22 <srhb> leighman: PM me then
06:34:44 <srhb> KangaAkale: so in Main.hs you now have the first line: module Main where ?
06:35:20 <KangaAkale> yes
06:35:21 * hackagebot hackage-db 1.9 - provide access to the Hackage database via Data.Map  http://hackage.haskell.org/package/hackage-db-1.9 (PeterSimons)
06:36:01 <srhb> KangaAkale: Then I don't believe you're getting that error. :P
06:36:08 <KangaAkale> http://lpaste.net/1503678572999475200
06:36:11 <leighman> srhb: http://pastebin.com/s79cMUwQ I think just indentation of list, right?
06:36:12 <KangaAkale> look at it
06:36:13 <wz1000> @let rloeb fs = fix $ \xs -> fmap ($ xs) (zipWith ($) fs [1..])
06:36:16 <lambdabot>  Defined.
06:36:22 <wz1000> :t rloeb
06:36:23 <lambdabot> (Num b1, Enum b1) => [b1 -> [b] -> b] -> [b]
06:36:28 <leighman> needs to be like record decl
06:36:43 <srhb> KangaAkale: Paste the new error, too
06:37:04 <KangaAkale> ok
06:37:26 <KangaAkale> pasted it
06:37:28 <KangaAkale> Building BundesligaMatches-0.1.0.0... Preprocessing executable 'BundesligaMatches' for BundesligaMatches-0.1.0.0... Warning: output was redirected with -o, but no output will be generated because there is no Main module. Damilolas-MacBook-Pro:BundesligaMatches damilolaibosiola$ cabal build Building BundesligaMatches-0.1.0.0... Preprocessing executable 'BundesligaMatches' for BundesligaMatches-0.1.0.0... Warning: output was redirect
06:37:49 <srhb> KangaAkale: Are you positive you saved the correct file and you're trying to compile the correct file?
06:38:00 <KangaAkale> yes i am
06:38:04 <ziggystar> Can I put type annotations on the left side of a `->` in do blocks?
06:38:07 <wz1000> > rloeb $ const (const 1) : const (const 1) : repeat (\p xs -> xs !! (p-1) + xs !! (p-2))
06:38:11 <lambdabot>  mueval-core: Time limit exceeded
06:38:18 <srhb> leighman: You've basically put the ] at the only column where it cannot be
06:38:29 <srhb> leighman: Fix as you see fit. :-)
06:38:42 <ziggystar> Like `x: [Int] <- read <$> getLine`
06:38:52 <leighman> srhb: haskell indentation confuses me. Thanks
06:39:06 <srhb> leighman: There's a nice wikibooks document on it, it's really simple
06:39:19 <srhb> leighman: http://en.wikibooks.org/wiki/Haskell/Indentation
06:39:27 <leighman> srhb: thanks
06:40:31 <srhb> ziggystar: I think you need ScopedTypeVariables for that
06:40:34 <KangaAkale> Yes i did
06:41:08 <wz1000> @let rloeb fs = fix $ \xs -> fmap ($ xs) (zipWith ($) fs [0..])
06:41:09 <lambdabot>  .L.hs:188:1: Warning:
06:41:10 <lambdabot>      Pattern match(es) are overlapped
06:41:10 <lambdabot>      In an equation for ‘rloeb’: rloeb fs = ...
06:41:10 <lambdabot>  
06:41:10 <lambdabot>  <no location info>:
06:41:15 <srhb> KangaAkale: I sent you a private message
06:41:27 <wz1000> @undefine rloeb
06:41:27 <lambdabot> There's currently no way to undefine just one thing.  Say @undefine (with no extra words) to undefine everything.
06:41:35 <wz1000> @undefine
06:41:35 <lambdabot> Undefined.
06:41:40 <wz1000> @let rloeb fs = fix $ \xs -> fmap ($ xs) (zipWith ($) fs [0..])
06:41:41 <lambdabot>  Defined.
06:41:45 <wz1000> > rloeb $ const (const 1) : const (const 1) : repeat (\p xs -> xs !! (p-1) + xs !! (p-2))
06:41:47 <lambdabot>  [1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17...
06:42:36 <ziggystar> srhb: Yes, ghc is telling me this if I want to add them. Is this the right thing to do then? I simply need some kind of annotation when writing long monadic code. And placing them on the right requires me to repeat the monadic type in each annotation.
06:42:54 <srhb> ziggystar: I've never needed it, but there's nothing wrong with doing that, for sure.
06:43:03 <srhb> I always put it on the right hand side if absolutely necessary.
06:45:48 <wz1000> @let inverse = go [1..] where go xs [] = xs ; go (x:xs) (y:ys) = case compare x y of LT -> x : go xs (y:ys) ; EQ -> go xs ys ; GT -> go (x:xs) ys
06:45:49 <lambdabot>  Defined.
06:46:09 <wei2912> :t inverse
06:46:10 <lambdabot> (Ord a, Num a, Enum a) => [a] -> [a]
06:46:13 <wei2912> inverse [1, 2, 3]
06:46:32 <wei2912> inverse [[1, 0], [0, 1]]
06:46:36 <wei2912> > inverse [1, 2, 3]
06:46:38 <lambdabot>  [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,...
06:46:42 <wei2912> > inverse [[1, 0], [0, 1]]
06:46:43 <lambdabot>  No instance for (GHC.Show.Show t0)
06:46:43 <lambdabot>    arising from a use of ‘M79200219507546410982638.show_M79200219507546410982...
06:46:43 <lambdabot>  The type variable ‘t0’ is ambiguous
06:46:43 <lambdabot>  Note: there are several potential instances:
06:46:43 <lambdabot>    instance [safe] GHC.Show.Show
06:46:46 <wei2912> :P
06:47:04 <wei2912> thought it finds the inverse of a matrix for some reason
06:47:46 <wz1000> > rloeb $ const (const 1) : const (const 3) : const (const 7) : repeat (\p xs -> xs !! (p-1) + (inverse xs) !! (p-1))
06:47:47 <lambdabot>  [1,3,7,12,18,26,35,45,56,69,83,98,114,131,150,170,191,213,236,260,285,312,34...
06:47:52 <bananagram> :t inverse
06:47:54 <lambdabot> (Ord a, Num a, Enum a) => [a] -> [a]
06:52:40 <wz1000> Do you think 'rloeb $ const (const 1) : const (const 3) : const (const 7) : repeat (\p xs -> xs !! (p-1) + (inverse xs) !! (p-1))' is prettier than 'let xs = 1 : 3 : 7 : drop 2 (zipWith (+) xs (inverse xs)) in xs'?
06:56:30 <pointed_set> :t rloeb
06:56:31 <lambdabot> (Num b1, Enum b1) => [b1 -> [b] -> b] -> [b]
06:56:33 <wz1000> Prettier is the wrong word. I mean satisfying. The 'drop 2' in the second version makes it kind of uglier
06:56:59 <pointed_set> what the thing is rloeb? It some weird loeb derivative?
06:57:26 <wz1000> pointed_set: It's my own version of loeb, where the function is given its position as an extra parameter
06:57:37 <wz1000> rloeb fs = fix $ \xs -> fmap ($ xs) (zipWith ($) fs [0..])
06:57:48 <wz1000> vs
06:57:49 <Grisha> Hello everyone
06:58:25 <wz1000> loeb fs = fix $ \xs -> fmap ($ xs) fs
06:58:48 <Grisha> what would be the fastest way to serialize [Vector Double] in a text file?
06:59:06 <shelf> what function should I be looking for to convert Word8 to Char?
07:01:27 <wz1000> shelf: https://www.fpcomplete.com/hoogle?q=Word8+-%3E+Char&env=ghc-7.8-stable-14.09
07:02:57 <wz1000> shelf: The problem is that not all Word8's are expressible as Chars
07:04:03 <shelf> oh, that's a shame
07:04:30 <shelf> i'm going the other way, actually. mistyped original question
07:04:34 <shelf> char -> word8
07:06:27 <arianvp__> How can I define a datatype  data Token = End | Nothing
07:06:38 <arianvp__> without the compiler complaining Nothing is already in scope?
07:06:59 <arianvp__> I tried  Data Token = End  | ModuleName.Nothing but that isnt valid haskel
07:07:02 <arianvp__> :(
07:07:16 <arianvp__> Do I need XNoImplicitPrelude?
07:07:22 <wz1000> arianvp__: import Prelude hiding (Nothing)
07:07:24 <vixlur> import Prelude hiding (Nothing) ?
07:07:27 <arianvp__> oh
07:07:30 <arianvp__> thanks!
07:08:42 <arianvp__> ugh
07:08:52 <arianvp__> but Alex needs Nothing .to be Maybe a
07:08:55 <arianvp__> ......
07:09:23 <arianvp__> so now it's complaining  : Expected Maybe Alex Input. Got Token
07:09:26 <arianvp__> :(
07:10:23 * hackagebot smtlib2 0.1 - A type-safe interface to communicate with an SMT solver.  http://hackage.haskell.org/package/smtlib2-0.1 (HenningGuenther)
07:11:01 <shelf> ended up using fromIntegral . fromEnum
07:13:32 <wz1000> arianvp__: You should really change it to something else
07:14:13 <arianvp__> wz1000: Meh. I guess. Shortcoming of the language. why not use the namespacing it provides?
07:15:45 <wz1000> arianvp__: Yeah, but redefining something so ubiquitous is not a very good idea. Try to minimise overlaps even if the language allows them.
07:18:21 <zmoazeni> Hey folks, I’m trying to wrap my head around Lens for Tree traversals. I sorta get http://www.haskellforall.com/2013/05/program-imperatively-using-haskell.html for record manipulation, but I’m lost on getters within a Tree.
07:18:37 <zmoazeni> Is anyone around to give me a hand? (Or should I go into a different room?)
07:22:16 <arianvp__> Anyone got experience with Happy parser generator?
07:22:56 <jmcarthur> i've used it. once. years ago.
07:23:04 <jmcarthur> i remember almost nothing
07:23:23 <arianvp__> Like. I defined a lexer in Alex now and it all works
07:23:48 <arianvp__> but now reading happy docs: https://www.haskell.org/happy/doc/html/sec-using.html
07:23:57 <arianvp__> and  I need to "declare all possible tokens"
07:24:05 <arianvp__> but isn't that the part of the Lexer? I am confused
07:25:10 <jmcarthur> i think it's just for convenience. it's having you define more convenient names for them
07:25:37 <jmcarthur> the *left* side is what you will be using throughout the grammar
07:25:57 <arianvp__> ah
07:27:50 <ocharles> Can anyone see a reason not to have Data instances for newtypes in Foreign.C.Types?
07:30:24 * hackagebot gtk3 0.13.2 - Binding to the Gtk+ graphical user interface library.  http://hackage.haskell.org/package/gtk3-0.13.2 (HamishMackenzie)
07:30:57 <nkar> zmoazeni: try asking on #haskell-lens
07:31:06 <zmoazeni> Thanks nkar
07:32:12 <zmoazeni> I’m currently trying to figure out how to update a node, or add a node in a tree without lens. I assume I need to use either map or fold, it’s just not clear how I’d use them.
07:32:56 <zmoazeni> I was just jumping to lens because I thought I could cheat and make it easier :)
07:35:05 <nkar> chrisdone: could you add a license file to 'emacs-haskell-config' please?
07:35:25 * hackagebot hackage-db 1.9.1 - provide access to the Hackage database via Data.Map  http://hackage.haskell.org/package/hackage-db-1.9.1 (PeterSimons)
07:35:32 <prinsen> haskellers: spam https://www.haskell.org/pipermail/haskell-cafe/2014-December/117215.html
07:36:07 <mmmm> zmoazeni: What are you trying to do exactly?
07:36:32 <prinsen> I have a few days if free time before work, so quick response would be awesome
07:37:26 <zmoazeni> mmmm: I’m trying to understand how I would manipulate Data.Tree in haskell. I first wanted to see how I would toUpper a tree like this, then wanted to figure out how I could add a node to one area
07:37:28 <zmoazeni> https://gist.github.com/zmoazeni/04161f30b3284603d1a6
07:40:25 * hackagebot gtk 0.13.2 - Binding to the Gtk+ graphical user interface library.  http://hackage.haskell.org/package/gtk-0.13.2 (HamishMackenzie)
07:41:33 <luite> prinsen: does your parser keep track of line number information?
07:42:03 <prinsen> luite: no, i skipped that but I might add it
07:42:50 <luite> i might be interested in using it for ghcjs testing, and i'm still looking for a fully compliant es5 and es6 parser
07:44:43 <prinsen> luite: Mine should do a pretty good job
07:45:04 <prinsen> luite: its a fully compliant ECMA262 parser
07:45:32 <luite> prinsen: what version?
07:45:47 <prinsen> luite: 5.1
07:48:32 <prinsen> luite: adding SourcePos to SourceElement should be trivial
07:48:57 <orion> What does 'injective' mean?: Couldn't match type ‘PublicKey a0’ with ‘PublicKey a’ NB: ‘PublicKey’ is a type function, and may not be injective
07:49:33 <luite> prinsen: have you tried parsing/prettyprinting test262 and a bunch of popular (and big) js libraries?
07:50:04 <prinsen> luite: no
07:50:08 <luite> if you have a prettyprinter :)
07:50:28 <luite> i tried that with language-ecmascript, which i'm still using as parser for ghcjs
07:50:40 <luite> but it failed on some things
07:50:41 <prinsen> luite: I need it for another project so im focusing on implementing host objects atm
07:50:51 <prinsen> luite: Well mine will work
07:51:06 <prinsen> luite: as it follows spec to the letter
07:52:01 <prinsen> You can try it, i export a function runJavaScript
07:52:03 <luite> i hope you're right
07:52:40 <prinsen> luite: It surly has bugs, but they will be easier to fix as Im using the specified AST
07:54:54 <ph88> does the GHC do loop interchange ?
07:56:01 <dspies> I don't know what is a do loop or what the word interchange means
07:56:11 <dspies> in this context
07:56:45 <ph88> a loop where the processor makes a jump back to where it was before
07:57:06 <dspies> What is the GHC do loop
07:57:14 <dspies> ?
07:57:44 <ph88> maybe this is better: does the GHC use loop interchange optimization ?
07:57:58 <KangaAkale> hi
07:58:21 <luite> prinsen: i get an installation error on 7.8.3, Control.Monad.Trans.Except
07:58:53 <dspies> ph88 : Haskell doesn't have loops in the same sense as an imperative language, so I'd be inclined to answer no
07:59:01 <nshepperd> I think you've just described normal imperative looping
07:59:18 <luite> prinsen: and ambiguous types in Language.JavaScript.Interpret
07:59:28 <ph88> functions don't exist on CPU level
07:59:52 <KangaAkale> helllo
07:59:59 <prinsen> luite: im using GHC 7.8.3 and its compiling fine
08:00:26 <prinsen> luite: can you pastebin cabal output?
08:00:27 <nshepperd> but yes, in most cases a haskell loop as implemented by eg. a recursive function call will be compiled into an asm jmpz loop
08:00:33 <nshepperd> as far as I know
08:01:06 <Zekka> nshepperd: Isn't that essentially what optimizing tail calls does?
08:01:08 <luite> prinsen: adding transformers-compat fixed this
08:01:34 <ph88> ok in terms of haskell then ... i have 3 functions, one calls a function 3 times, one calls a function 12 times and one prints hello.   So i get 12x hello.  but the order of the function that calls 3 times or 4 times does not matter in this case. So does GHC choose the optimal order ?
08:01:58 <Kaidelong> as far as I know, no
08:02:01 <ph88> 3*4 = 12  and  4*3 = 12
08:02:07 <Kaidelong> but
08:02:08 <prinsen> luite: I might be a bit behind on cabal package versions
08:02:12 <Kaidelong> you could give it a rewrite rule
08:02:19 <ph88> a rewrite rule ?
08:02:40 <luite> prinsen: well, it fixed the first thing, the errors are definitely related to mtl/transformers things, could not deduce Monad constraints etc
08:02:40 <Kaidelong> https://downloads.haskell.org/~ghc/7.0.3/docs/html/users_guide/rewrite-rules.html
08:03:08 <ph88> it's important when you want to parallelize a bit of your code then it has to be a loop/recursive call  that make sense
08:03:11 <prinsen> luite: i will update my cabal packages and fix it
08:03:27 <Kaidelong> the example they give is very similar to what you are talking about
08:03:39 <Kaidelong> map f (map g xs) traverses a list twice
08:03:39 <nshepperd> Zekka: it's the same thing as tco does, yes, but I gather that tco is not really applicable to haskell because of the nonstrict evaluation model
08:03:44 <Kaidelong> map (f.g) xs only once
08:03:51 <Kaidelong> they're equivalent before of the functor law
08:03:59 <nshepperd> or something like that
08:03:59 <ph88> cool
08:04:29 <Zekka> nshepperd: I'm not sure your optimization applies either unless we're in strict mode although I'm unsure
08:04:49 <dreams> How do I know if deforestation is applicable to my function?
08:04:57 <Zekka> I thought GHC occasionally made lazy code strict for performance reasons although I don't know the rules
08:05:34 <Kaidelong> TCO does matter in Haskell, it's less important but still applicable
08:06:04 <prinsen> luite: which transformers and mtl versions do you have?
08:06:07 <Kaidelong> and some TCO-based batterns still work as you expect, like state machines
08:06:18 <Kaidelong> patterns*
08:06:51 <Kaidelong> without the TCO optimization stuff like ContT probably wouldn't work very well
08:08:01 <dspies> I have a program which behaves very strangely when I try to profile it.  I asked about it last night, but didn't really get an answer. I think it's a GHC bug.  What should I do?
08:08:29 <luite> prinsen: transformers-0.3.0.0, transformers-compat-0.3.3.3, mtl-2.1.3.1
08:09:14 <nshepperd> dspies: use -fforce-recomp, and try it under various -O optimization levels
08:09:22 <dspies> Essentially, it runs normally if I build without profiling flags or if I add enough strictness annotations, but when I'm profiling without strictness annotations, it calls certain functions way more than it should
08:10:39 <lpaste> dspies pasted “GHC locks up when profiling” at http://lpaste.net/115866
08:11:11 <dspies> The input can be found here: http://challenge.csc.kth.se/2013/
08:11:33 <dspies> It's the cargame problem
08:12:04 <dspies> I'm trying to get it under 5 seconds so I can submit on Kattis: https://open.kattis.com/problems/cargame
08:15:13 <prinsen> luite: I pushed a commit adding version numbers to mtl and transformers
08:15:46 <prinsen> luite: I use transformers 0.4.1 and mtl 2.2.1
08:17:15 <dspies> nshepperd: The problem seems to be there regardless of what optimization level I use
08:17:31 <dspies> I tried -O, -O2 and none at all
08:17:49 <luite> prinsen: ok that makes it install, but it does make it unusable with ghcjs
08:19:30 <prinsen> luite: why?
08:19:59 <luite> prinsen: it needs the transformers that comes with ghc, which for 7.8.3 is 0.3.0.0
08:20:46 <prinsen> luite: :(
08:21:36 <luite> prinsen: you should use the transformers-compat approach if you want to make it more compatible
08:21:55 <dspies> nshepperd : what should I do next?
08:22:00 <ziggystar> There's `first` to create an Arrow for the first entry in a 2-Tuple. How to create an Arrow for the first entry in a 3-Tuple?
08:28:15 <luite> prinsen: how much of the standard objects/functions have you implemented?
08:29:41 <dspies> Can anyone help with this?
08:30:12 <dspies> The same thing happened last night too.  As soon as I finished describing the problem, everyone started ignoring me
08:30:29 * hackagebot ltk 0.14.3.0 - Leksah tool kit  http://hackage.haskell.org/package/ltk-0.14.3.0 (HamishMackenzie)
08:30:31 * hackagebot leksah-server 0.14.3.0 - Metadata collection for leksah  http://hackage.haskell.org/package/leksah-server-0.14.3.0 (HamishMackenzie)
08:30:42 <Cale> dspies: Sorry, help with what?
08:30:53 <dspies> Why this program won't profile properly
08:30:57 <Cale> dspies: (I've been restarting my X server, might've missed some messages)
08:31:08 <Cale> hmm, I can try
08:31:12 <dspies> http://lpaste.net/115866
08:31:15 <dspies> The input is at
08:31:23 <dspies> http://challenge.csc.kth.se/2013/
08:31:25 <mauke> dspies: well, what do you want me to do?
08:31:31 <Cale> What's happening when you try to profile it?
08:31:34 <dspies> It's the third instance of the CarGame problem
08:31:45 <dspies> It enters buildChain too many times
08:31:54 <Cale> Wait, GHC itself locks up?
08:31:56 <dspies> when I turn off profiling or add a seq
08:32:04 <dspies> No, not GHC
08:32:06 <dspies> that's a bad title
08:32:11 <dspies> the execution of the program
08:32:27 <dspies> when I turn off profiling or add a seq, it doesn't happen any more
08:32:56 <stephenmac7> What is Pointed?
08:33:13 <dspies> Change line 20 from "doProbs m suffixChains" to "suffixChains `seq` doProbs m suffixChains" and there are no problems
08:33:22 <prinsen> luite: None, thats the next step
08:33:43 <prinsen> luite: the core language works atm
08:35:29 * hackagebot leksah 0.14.3.0 - Haskell IDE written in Haskell  http://hackage.haskell.org/package/leksah-0.14.3.0 (HamishMackenzie)
08:36:11 <Cale> stephenmac7: A "pointed functor" is a functor F that comes with a specified natural transformation 1 -> F, i.e. in Haskell terms it's just a functor f with a polymorphic function a -> f a
08:36:31 <stephenmac7> Cale: So, it's like pure or return?
08:36:34 <Cale> yeah
08:36:56 <dspies> Cale : Did you try running it?
08:37:07 <stephenmac7> Cale: Can anything be made pointed that can't be an Applicative?
08:37:09 <Cale> dspies: I'm not sure where to get input to it from the page you linked
08:37:28 <dspies> Cale : It's in "Packaged Problems"
08:37:50 <Cale> stephenmac7: Probably
08:37:51 <dspies> cargame-03.in
08:37:57 <Cale> stephenmac7: I don't have a good example handy
08:38:05 <stephenmac7> So, why does no one use pointed?
08:38:06 <Cale> dspies: ah, okay
08:38:24 <stephenmac7> I don't understand https://www.haskell.org/haskellwiki/Why_not_Pointed%3F
08:38:26 <Cale> stephenmac7: It's not terribly well-specified.
08:38:54 <dspies> Cale : It's this problem https://open.kattis.com/problems/cargame in case it helps
08:39:01 <srhb> stephenmac7: It's also not very useful without <*>
08:39:25 <stephenmac7> srhb: I see. And adding <*> would just mean it's an Applicative
08:39:30 <srhb> Indeed.
08:39:59 <luite> prinsen: number to string conversion is not quite correct
08:40:09 <Cale> dspies: all right, let me see here
08:40:19 <srhb> stephenmac7: Well, if you add some laws too, at least.
08:40:32 <srhb> (I think it was Apply + Pointed ~= Applicative, with some laws missing?)
08:40:37 <stephenmac7> Hm. Quick question:
08:40:40 <stephenmac7> Is this:
08:40:41 <stephenmac7> > liftA2 (+) (Just 5) $ Just 5
08:40:43 <lambdabot>  Just 10
08:40:51 <stephenmac7> Or this considered better style?
08:41:00 <stephenmac7> > (+) <$> Just 5 <*> Just 5
08:41:01 <lambdabot>  Just 10
08:41:15 <srhb> I tend to feel all the lift*N things feel hacky, but there's nothing wrong with them.
08:41:32 <jmcarthur> stephenmac7: i don't think there is much consensus. i prefer liftA2.
08:41:36 <zwer_l> it is a matter of taste.. I find liftA* easier to read
08:42:01 <prinsen> kyoukasuigetsu: you mean I add a zero=
08:42:03 <stephenmac7> I see. Thanks
08:42:13 <prinsen> luite: You mean I add a zero?
08:42:29 <srhb> (clearly we need liftAWithArity 2 (+))
08:42:38 <srhb> More metaprogramming please. :-)
08:42:39 <prinsen> luite: just used the built in version of show, not sure that it actually violates the spec
08:42:43 <Cale> dspies: Okay, running your program on the input now...
08:42:55 <dspies> Cale : With or without profiling?
08:42:56 <Cale> dspies: with -O2 -prof -fprof-auto
08:43:01 <stephenmac7> :instance Applicative ((->) r)
08:43:07 <srhb> stephenmac7: Hehe
08:43:14 <dspies> Cale : Ok, you'll probably have to kill it then
08:43:18 <stephenmac7> How do I ask lambdabot for that?
08:43:24 <Cale> It's producing lots of output still
08:43:34 <dspies> Oh, yeah, send the output somewhere
08:43:42 <luite> prinsen: yes, that was my first test, and it also prints 1e18, according to the spec it should still fully print that in simple notation
08:43:46 <dspies> Cale : even /dev/null
08:43:57 <mauke> @src (->) pure
08:43:57 <lambdabot> pure = const
08:44:03 <Cale> My terminal isn't a good place for the output to go?
08:44:05 <mauke> @src (->) (<*>)
08:44:05 <lambdabot> (<*>) f g x = f x (g x)
08:44:06 <prinsen> luite: Cool I will fix that
08:44:12 <Cale> Does it only freeze when you redirect the output?
08:44:33 <dspies> Cale : I don't know, it just it's supposed to print 10000 lines of output
08:44:45 <dspies> Cale : So I always pipe it to a file
08:44:47 <Cale> Well, it's still not frozen...
08:44:49 <stephenmac7> mux: Thanks
08:44:55 <stephenmac7> mauke, not mux
08:44:58 <luite> prinsen: since all my simple tests failed so far i'ts not terribly usable for me right now, but let me know when it passes test262, i'll check it out again then
08:45:03 <dspies> Cale : It might not freeze, it might just be slow
08:45:18 <dspies> Cale : but if you look at the "entries" for buildChain.helper
08:45:22 <Cale> Oh, well, it is kind of slow
08:45:24 <dspies> Cale : It's way too many
08:45:33 <dspies> Now try adding that one seq
08:45:36 <dspies> I suggested
08:45:48 <dspies> and it only takes 5 seconds
08:45:54 <dspies> or alternatively turn off profiling
08:45:57 <prinsen> luite: yeah sure, its definently not ready for production. I have basically been implementing for 5 weeks with no testing
08:45:59 <dspies> and it also only takes 5 secondss
08:46:13 <stephenmac7> @src (->) fmap
08:46:13 <lambdabot> fmap = (.)
08:46:14 <dspies> And the entries to buildChain.helper go way down
08:46:29 <prinsen> luite: currently interested on feedback on my core design
08:46:57 <prinsen> luite: string to number conersions can always be fixed later :)
08:47:02 <luite> prinsen: i'd be more tempted to invest time in that once i know that i can use it :p
08:47:57 <prinsen> luite: Its going to be a fully compliant ECMA-262 interpreter that supports arbitrary host environments
08:48:30 <Cale> dspies: Well, it's not making the program appear to run all that much faster here.
08:48:35 <prinsen> luite: Im going to focus more on getting my host environment up than passing test262 right now
08:48:45 <dspies> Cale: What did you change?
08:49:04 <Cale> I added the seq in  suffixChains `seq` doProbs m suffixChains
08:49:08 <prinsen> luite: But with time and possibly help I think that my code is promising
08:49:19 <dspies> Cale : Yeah, for me that makes it run in 5 seconds
08:49:32 <dspies> on GHC 7.8.3
08:49:36 <Cale> Which, since it only evaluates a single list cons, it really shouldn't have a huge effect on the performance, and at least for me, it doesn't.
08:49:47 <dspies> Cale: I agree, it shouldn't
08:49:48 <Cale> I'm on GHC 7.8.2 still
08:49:55 <dspies> Cale: but it does
08:50:08 <dspies> Cale : Try turning off profiling
08:50:09 <Xeironis> Am I understanding the LINE pragma correctly in that it doesn't change what the code does?
08:50:22 <Cale> and building with -O2 still, yes?
08:50:40 <dspies> yes
08:50:44 <Cale> Yes, well, that runs much faster of course :)
08:50:47 <dspies> Cale: or -O or none at all
08:50:56 <dspies> Cale: It's the same in all cases
08:51:11 <Cale> Yeah, turning off profiling often does wonders for performance
08:51:40 <dspies> Cale: are you sure you recompiled after adding the `seq`?
08:52:08 <dspies> Cale: That seems strange that it's only in 7.8.3
08:52:23 <dspies> or maybe it's something else about my configuration
08:52:27 <Cale> yep, I even deleted the temporary files
08:52:39 <Cale> If you like, I can grab the newer GHC
08:52:49 <Cale> I probably should do that anyway :P
08:52:54 <dspies> Cale: Thanks
08:53:03 <dspies> Cale: That would be helpful
08:54:01 <dspies> Cale: honestly, I don't see how adding strictness could ever decrease the number of entries to any function
08:55:27 <orion> Hi: I am having trouble figuring out how to call the function "genKey" here: http://lpaste.net/989957706523607040 -- does anyone know what I need to do to be able to call it?
08:56:09 <luite> prinsen: it might be promising, but in the current state i can't use it yet. and i have no guarantee that you'll keep working on it
08:56:24 <Cale> okay, still slow even when compiled with GHC 7.8.3
08:56:32 <Cale> (with profiling on, and the seq)
08:56:41 <dspies> Cale: What else could it be?
08:56:43 <mauke> orion: that's not a function
08:56:47 <besenwesen> huh, is there any way to express a container of values of mixed types sharing some typeclass, that can then be mapped over using a function from the class?
08:57:01 <Cale> I don't know, could you double check? Are you deleting the .o and .hi files each time?
08:57:14 <orion> mauke: What is it?
08:57:16 <dspies> Cale: yes, everything
08:57:27 <mauke> orion: an IO action, apparently
08:57:58 <Cale> besenwesen: Yeah, sort of. You can define an existential type to do things like that.
08:58:02 <dspies> Cale: I don't think we're using the same profiling options though
08:58:16 <besenwesen> ah, black magic
08:58:17 <orion> mauke: Alright. How do I call the IO action? :)
08:58:17 <dspies> I have -fprof-auto and whatever cabal --enable-executable-profiling adds
08:58:18 <Cale> ghc -O2 -prof -fprof-auto dspies
08:58:28 <Cale> is how I built your program
08:58:29 <dspies> and 0O2
08:58:33 <dspies> * -O2
08:58:42 <mauke> orion: what do you mean by "call"?
08:58:55 <dreams> Is there an option in GHC which transforms a function to accumulative ones or to fold?
08:58:59 <mauke> in general you incorporate it into main somehow
08:59:14 <Cale> dspies: perhaps you could use -v to see which commands it's executing?
08:59:36 <orion> mauke: Let's say I just want to Show the PublicKey and SecretKey.
08:59:41 <Cale> (or just give your .cabal file)
08:59:57 <orion> Assuming that the proper Show instance is in place.
08:59:58 <dspies> oh it's a lot, let me try just compiling directly
09:00:23 <mauke> orion: main = genKey >>= \(p, s) -> print p >> print s
09:00:50 <luite> prinsen: what's the reason you're writing a js interpreter from scratch, rather than bindings for an existing engine to be able to write host objects in haskell?
09:01:04 <prinsen> luite: yes
09:01:17 <prinsen> luite: and HJS is a mess
09:01:26 <dspies> Ok, I used the same options as you and it's still fast
09:01:32 <Cale> okay, weird
09:01:42 <Cale> I'm on x86_64 linux
09:01:54 <dspies> Cale: me too
09:02:16 <dspies> Cale: Ubuntu 14.04
09:02:56 <dspies> Cale: What version of base, bytestring, and arrays?
09:02:58 <orion> mauke: That doesn't work. :( -- No instance for (Suite a0) arising from a use of ‘genKey’ The type variable ‘a0’ is ambiguous
09:03:25 <luite> prinsen: no i mean you can write host objects for jsc or v8 in haskell, although it might require generating some wrapper code
09:03:40 <mauke> orion: oh, right. it doesn't know which type you want
09:04:17 <mauke> orion: is this your class?
09:04:23 <orion> Yes it is.
09:04:32 <mauke> yeah, genKey can't be used
09:04:39 <prinsen> luite: I need to call the interpreter from haskell to
09:04:51 <Cale> dspies: I *just* installed GHC 7.8.3, so bytestring-0.10.4.0 and array-0.5.0.0
09:04:59 <mauke> orion: its type doesn't use 'a' so it can't be used to determine the instance to use
09:05:27 <orion> mauke: Its type does use 'a': genKey :: IO (PublicKey a, SecretKey a)
09:05:33 <Cale> dspies: Here's the file produced by  ghc -O2 -prof -fprof-auto -ddump-simpl -ddump-to-file dspies   http://lpaste.net/115868
09:05:50 <mauke> orion: 'PublicKey a' turns into something without 'a'
09:05:52 <mauke> it's a type family
09:06:06 <orion> oh, hrm
09:06:14 <dspies> Cale: It's in a sandbox, how do I see what version of things I'm using?
09:06:18 <luite> prinsen: hm what do you mean?
09:06:43 <arianvp__> So I was reading this: https://www.fpcomplete.com/user/bartosz/understanding-algebras
09:06:53 <arianvp__> And I was wondering. Can you have mutually-recursive F-algebras?
09:06:59 <orion> mauke: In that case, I have no idea how to write this class.
09:07:00 <arianvp__> and can you define catamorphisms on them?
09:07:21 <Cale> cabal sandbox hc-pkg list
09:07:22 <prinsen> random question: why does type definitions differs from functions in the way that the point free version of 'type T a = Mabe a', namely 'type T = Maybe' is different
09:07:39 <prinsen> luite: I need to run javascript in a haskell program
09:07:52 <luite> prinsen: sure, that's exactly what you'd be able to do with the v8 or jsc library
09:08:32 <Cale> prinsen: Because type synonyms must always be fully applied, as they are essentially simple substitution macros
09:08:46 <dspies> Cale: same array, same bytestring
09:09:27 <Cale> prinsen: So, the latter type synonym can be used even in cases where Maybe would appear on its own as a type parameter to something else
09:09:33 <Cale> prinsen: while the former can't
09:09:56 <prinsen> luite: there is no v8 on hackage, and jsc is deprecated
09:10:00 <luite> prinsen: i mean you probably have some specific needs, or really need to avoid dependencies on thos libs, since it's a great amount of effort
09:11:26 <luite> prinsen: uh writing a js engine is probably more work than writing bindings for an existing library, that's what i meant
09:11:45 <luite> you chose to do the former, i was just wondering why
09:12:16 <hamishmack> prinsen: Would this help? http://hackage.haskell.org/package/webkitgtk3-javascriptcore
09:12:19 <prinsen> luite: I want e4x support and a rather large host environment i rather write in haskell
09:12:22 <recursion-ninja> Say I have a `Map v [v]` and I want to create a rose tree `Tree v`. Is there a simple fold I can use of type `Map v [v] -> Tree v` ?
09:12:47 <recursion-ninja> That would be Data.Tree, noting too fancy
09:13:17 <recursion-ninja> :t Node
09:13:18 <lambdabot> a -> Forest a -> Tree a
09:13:29 <recursion-ninja> :t uncurry Node
09:13:30 <lambdabot> (a, Forest a) -> Tree a
09:13:32 <besenwesen> so, sometimes to save keystrokes or keep things tidy i put values into a list, and then do mapM_ print, or something like that. but this only works for containers of a specific type. i see i can generalize a type with forall and create “mixed” containers. though i still have to write out the existential type for each element. is there anything that could map print over a tuple or something like that?
09:13:40 <mauke> recursion-ninja: what would that function do?
09:13:44 <prinsen> hamishmack: nah :) but thanks anyway
09:13:50 <recursion-ninja> :t fmap (uncurry Node) . assocs
09:13:51 <lambdabot> Ix a => Array a (Forest a) -> [Tree a]
09:14:10 <dspies> Cale: Why does it list Cabal-1.18.1.3 as the version of Cabal?
09:14:26 <dspies> I tried deleting the sandbox and recreating it
09:14:30 <jmcarthur> besenwesen: well, tuples are special because they can have values of more than one type. you could use Data.Foldable.mapM_ for many functors, at least
09:14:32 <dspies> but it still says
09:15:23 <recursion-ninja> mauke: Take the Map a [a], build a tree where `k` maps to `v` has a Node { label = k, forest = v }
09:15:45 <recursion-ninja> :t foldl1 (uncurry Node) . assocs
09:15:46 <lambdabot>     Couldn't match type ‘Tree a’ with ‘(a, Forest a) -> (a, Forest a)’
09:15:46 <lambdabot>     Expected type: a -> Forest a -> (a, Forest a) -> (a, Forest a)
09:15:46 <lambdabot>       Actual type: a -> Forest a -> Tree a
09:15:51 <besenwesen> jmcarthur, hm, it tried Foldable.mapM_ print (1,2), but it prints only 1
09:15:56 <jmcarthur> right
09:15:59 <dspies> Cale: And I have Cabal-1.20.02
09:16:16 <jmcarthur> besenwesen: it has to work that way because tuples can have many types, not just one
09:16:39 <jmcarthur> besenwesen: you could make a Pair type if you know the elements will have only one type.   data Pair a = Pair a a
09:16:51 <jmcarthur> besenwesen: and you can even derive Functor and Foldable for it with extensions
09:16:51 <besenwesen> right, but is there a way of mapping them all when they all share a typeclass?
09:17:30 <besenwesen> preferrably for arbitrary lenghts
09:17:32 <mauke> recursion-ninja: I don't get it
09:18:04 <recursion-ninja> mauke: That's okay, I'll keep toying with it
09:18:10 <Cale> dspies: You might have two different versions of the Cabal library installed?
09:18:18 <jmcarthur> besenwesen: well, you could do something like this:   mapTuple :: (c a, c b) => (forall x. c x => x -> r) -> (a, b) -> (r, r)
09:18:28 <jmcarthur> besenwesen: but that's ugly and terrible and overly specialized
09:18:42 <dspies> Cale: Can I get rid of one?
09:18:48 <besenwesen> yea, i suppose there’s no good way then
09:18:51 <jmcarthur> besenwesen: it might be less hard with something like HList (nested tuples)
09:18:59 <dspies> Cale: or specify the other somehow?
09:19:13 <Cale> well, 1.18.1.3 is the version of the Cabal library that comes with GHC 7.8.3
09:19:16 <besenwesen> really, it was just about not having to write «print» each time
09:19:29 <dspies> Cale: oh, so that's the one I want
09:19:41 <dspies> Cale: What is 1.20.0.2 then?
09:19:41 <Cale> You might have a newer version installed locally as user, which would be fine
09:20:06 <jmcarthur> besenwesen: you could always just print the whole tuple, of course
09:20:11 <dspies> Cale: Which one do you see with hc-pkg list?
09:20:26 <Cale> 1.20.0.2 is the latest version of the Cabal library
09:20:27 <besenwesen> gosh, of course
09:20:33 <besenwesen> heh
09:20:38 <besenwesen> ty
09:20:46 <Cale> cabal hc-pkg list should be showing you what's installed in the sandbox
09:21:16 <Cale> (does it tell you which directory the package.conf is from?)
09:21:31 <Cale> You can also ghc-pkg list to see what's installed outside the sandbox
09:21:38 <Cale> (without the cabal)
09:21:38 <nolrai66> So for some reason when I use my data type as a key to an array listArray hangs.
09:21:49 <nolrai66> Any idea wtf is going on?
09:22:03 <Cale> nolrai66: What does your instance of Ix look like?
09:22:50 <nolrai66> I just derive it, ohhh. Hmm. OddWord must not have a working Ix instance.
09:23:15 <nolrai66> (my type is just newtype Key = Key word4)
09:23:54 <nolrai66> Wait I don't know my own code.
09:24:58 <recursion-ninja> mauke: Say I had ( fromList [('a',['b','c']), ('b',[]) ('c',['d'])] ) :: Map a [a],  I would want a tree (written here in graph/network notation) ('a' -> 'b', a -> 'c', 'c' -> 'd') :: Tree a
09:25:14 <dspies> Cale: I deleted all the cabal and eclipse stuff and just ran it directly and now it's down to 2 seconds
09:25:32 <dspies> Cale: No compiler options at all
09:25:36 <dspies> Cale: not even -O or -O2
09:25:44 <dspies> Cale: I'm baffled
09:26:03 <nolrai66> Right, word4 doesn't have negative values.
09:26:53 <recursion-ninja> mauke: Node { label = 'a', forest = [Node { label = 'b', forest = []}, Node {label = 'c', forest = [Node { label = 'd', forest = []}  ]} ]
09:27:33 <dspies> Cale: Yeah, -O2 makes it run 3 times slower
09:27:44 <wei2912> well
09:27:49 <wei2912> that's weird, haha
09:28:45 <dspies> If -O2 makes a program run 3 times slower, does that qualify as a bug?
09:28:56 <statusfailed> Is there an attoparsec combinator like "Parser a -> Parser b -> Parser a", but will actually parse "a" first?
09:29:35 <recursion-ninja> dspies: Does the compiler provide a guarantee that -O2 must result in code of equal or greater speed?
09:30:02 <mauke> recursion-ninja: that seems underspecified
09:30:29 <recursion-ninja> mauke: My tree?
09:30:32 <mauke> yeah
09:30:33 <dspies> I don't know.  It's bothersome because if they would just compile without -O2, it would be accepted on Kattis
09:30:42 <mauke> recursion-ninja: like, why is 'a' at the root?
09:30:58 <recursion-ninja> mauke: because it's first...?
09:31:36 <mauke> recursion-ninja: what happens with [('a', ['c']), ('b', ['c']), ('c', [])]?
09:32:49 <recursion-ninja> mauke: What I really want to do is a depth limited tree construction, and have the node selected with the shortest Map value list length be the next node added, then remove that node from the map
09:33:17 <recursion-ninja> mauke: It's all complicated, I don't think I quite have it straight in my head yet
09:33:52 <recursion-ninja> mauke: I'll probably implement it via direct recursion, and then look for generalizations and optemizations
09:34:45 <jmcarthur> > unfoldTree (\k -> (k, fromMaybe [] $ M.lookup k $ M.fromList [('a',['b','c']), ('b',[]), ('c',['d'])])) 'a'
09:34:47 <lambdabot>  Node {rootLabel = 'a', subForest = [Node {rootLabel = 'b', subForest = []},N...
09:36:48 <jmcarthur> if the input map expresses a cycle, the resulting tree would be cyclic
09:36:56 <jmcarthur> with that version
09:37:31 <jmcarthur> with mauke's input, it would ignore the 'b' node
09:40:47 <recursion-ninja> jmcarthur: That's very helpful!
09:41:17 <recursion-ninja> jmcarthur:  I'll see if I can adapt this to what I want to do
09:43:58 <luite> prinsen: have you done any performance testing yet? do you have some performance target in mind, relative to existing engines?
09:45:53 <kototama> hi, in conduits how can I reuse CB.sinkFile in my own Sink? (not working: http://paste2.org/mnfUJPsa)
09:48:30 <eskimor> Hi guys! I'm quite puzzled right now, what the tilde in "HandlerSite m ~ site" means. Found in: http://haddocks.fpcomplete.com/fp/7.8/20140916-162/yesod-core/src/Yesod-Core-Widget.html#ToWidget
09:48:42 <eskimor> Any hint would be really appreciated :-)
09:49:19 <jmcarthur> eskimor: it's a constraint that says HandlerSite m and site must unify
09:49:37 <chrisdone> kototama: what do you want to achieve with that?
09:49:56 <jmcarthur> eskimor: think of it as a kind of "equals"
09:50:30 <chrisdone> kototama: maybe you want to "mphoto <- accept" instead of passing it as an argument
09:51:16 <kototama> chrisdone: i want a sink that take a photo structure containing a bytestring and that saves its content to the disk
09:52:09 <eskimor> jmcarthur: Thanks a lot! Where do I find any documentation on that? "Tilde Haskell" and similar searches yielded nothing.
09:52:14 <RyanRN> Hi all, does anyone know a good library that derives a sum type matching the fields of a product type?
09:52:20 <kototama> where is the accept function defined?
09:52:27 <RyanRN> That is, for data Prod = Prod { a, b, c }
09:52:34 <RyanRN> I want to derive a sum A | B | C
09:52:43 <RyanRN> It looks like fclabels could expose this but doesn't....
09:53:02 <jmcarthur> eskimor: https://downloads.haskell.org/~ghc/7.8.3/docs/html/users_guide/equality-constraints.html
09:53:06 <RyanRN> (it derives the individual accessors… but I want something like a (heterogeneous) list of those accessors.
09:53:49 <chrisdone> kototama: then i think you can use accept
09:54:04 <chrisdone> kototama: oh, or simpler
09:54:22 <eskimor> jmcarthur: A thousand thanks! :-)
09:54:23 <chrisdone> kototama: CL.map content $= CB.sinkFile fp
09:54:57 <chrisdone> kototama: but if your sink should only accept one photo, it should probably just have one accept call. or not be a sink
09:55:02 <RyanRN> …. I guess the fclabels way to do it is not expect a closed sum A|B|C, but to write functions that take any first class "label" for the datatype… and in practice that's limited to a|b|c....
09:55:19 <jmcarthur> eskimor: Three or four you're welcomes! (I got bored of saying it over and over.)
09:56:15 <jmcarthur> RyanRN: what do you hope to do with such a collection?
09:56:34 <kototama> chrisdone: ok, i need to do the recursion, or mayve there is a simpler way to wrap sinkfile?
09:56:49 <jmcarthur> RyanRN: oh, you aren't looking for accesors, just labels?
10:05:53 <lpaste> altern pasted “MaturityLevel ” at http://lpaste.net/115876
10:06:59 <altern> Hi everyone. Could someone explain why I am getting error  Couldn't match expected type `BS.ByteString' with actual type `[Char]' with following source code? http://lpaste.net/115876
10:08:45 <fluxx0r> Because string takes a ByteString and you're giving it a String
10:09:27 <fluxx0r> Turn on OverloadedStrings and I think it'll work
10:14:28 <AnalogFile> I'm again having problems with haskell.org
10:14:43 <recursion-ninja> AnalogFile: What ails you?
10:14:51 <AnalogFile> anyone can check what IP it resolves to?
10:15:24 <recursion-ninja> AnalogFile: What Ip address **what** resolves to?
10:15:27 <Cale> haskell.org has address 23.253.242.70
10:15:27 <Cale> haskell.org has IPv6 address 2001:4800:7817:104:be76:4eff:fe04:f608
10:15:58 <AnalogFile> I cannot access it. It has happened some time ago and it was a problem with the CDN. They told me to access 23.253.242.70 directly. I'm doing that, but it does not respond.
10:16:07 <recursion-ninja> recursion-ninja: Doh, I didn't reaed th .org part...
10:16:34 <fluxx0r> It must have just stopped because I was just on hackage a few minutes ago
10:16:45 <AnalogFile> For some crazy reason 23.253.242.70 does not respond to me.
10:16:52 <Cale> AnalogFile: If I visit the page using the IP address, I get a default Apache "It works!" page.
10:17:27 <AnalogFile> fluxx0r: hackage is on a separate server
10:18:10 <nolrai66> So using my test array still hangs. Can people take a quick gander at my http://lpaste.net/115877?
10:18:14 <AnalogFile> Cale: if I access the address it does not respond. If I access the site name making sure it resolves to that address (with an entry in the hosts file) it does not respond.
10:18:18 <fluxx0r> Ah yes...I can see Hackage just not haskell.org
10:18:24 <passy> I feel like I'm missing something obvious. Is there something like Control.Monad.when that works on a (Monad m => m Bool) instead of a plain Bool? So that I could write `whenM (doesFileExist "tmp") doSmth` instead of `doesFileExist "tmp" -> (\e -> when e doSmth)`?
10:18:56 <AnalogFile> fluxx0r: so you are also having problems with it?
10:19:33 <Cale> passy: If nothing else, you could certainly write it.
10:19:46 <nolrai66> @passy: just use bind: flip when doSmith =<< doesFileExist "tmp"
10:19:46 <lambdabot> Unknown command, try @list
10:20:20 <passy> nolrai66: Yup, that's what I thought, but it doesn't read really well.
10:20:23 <shachaf> That's awful.
10:20:28 <fluxx0r> AnalogFile: yep, it doesn't resolve and I get the "Safari cannot open the..." stuff
10:20:39 <shachaf> Better to use let whenM = ... in whenM ... than that flip business.
10:21:08 <AnalogFile> fluxx0r: where are you? can you check with terminal if it pings (and what address it tries to ping)?
10:22:02 <fluxx0r> AnalogFile: western New York...23.253.242.70
10:22:21 <fluxx0r> AnalogFile: using the bare ip, I get the default Apache page
10:22:59 <fluxx0r> AnalogFile: oh and the ping does respond
10:22:59 <AnalogFile> fluxx0r: oh. So it does ping for you?
10:23:05 <breadmonster> Is this channel also used for social chatter?
10:23:49 <Clint> no
10:23:58 <AnalogFile> fluxx0r: interesting. I'll report these findings to haskell-ops, but there seem to be no-one there at the moment
10:24:11 <passy> @Cale @nolrai66 I guess using it like this isn't too bad: `whenM p s = flip when s =<< p` :)
10:24:12 <lambdabot> Unknown command, try @list
10:24:20 <breadmonster> Clint: Is there an associated social channel?
10:24:41 <fluxx0r> AnalogFile: and...it's working again
10:25:27 <shachaf> What's wrong with whenM p s = do { b <- p; when b s }?
10:25:33 <shachaf> Variable names aren't the enemy.
10:25:50 <shachaf> Also, this isn't Twitter. Lines starting with @ trigger the bot.
10:25:55 <passy> shachaf: Good point!
10:26:05 <fluxx0r> AnalogFile: I think what's happening is that my iPhone doesn't try https when I just type haskell.org, but chromium on my laptop does
10:26:14 <passy> Just realized, sorry. Didn't want to upset lambdabot. :)
10:26:33 <fluxx0r> AnalogFile: if I type the whole https://www.haskell.org, it works
10:28:25 <nolrai66> shachaf: nothing, just flip when is easier to use in line is all.
10:29:03 <nolrai66> shachaf: also I don't like small uses of do notation. Just me being weird probably.
10:31:08 <passy> I feel like since I'm very new to Haskell it's not a bad idea to shy away from the do notation if possible.
10:31:52 <sinelaw> edwardk, can your bound package help dealing with the need to manually manage type substitution during type inference?
10:32:13 <sinelaw> It isn't exactly the same as manage bound variables in general
10:32:34 <sinelaw> I find many of my bugs are in forgetting to apply a subst that was inferred during unification
10:33:17 <sinelaw> (whoa my grammar went off the charts on that one... sleep deprivation FTW)
10:39:05 <AnalogFile> fluxx0r: well. I reported to #haskell-infrastructure and it seems it's allright for them. by the way it should not be a problem with https (it should work with http too or at most redirect). Anyway it's not pinging for me, so it may be a provider problem
10:39:36 <AnalogFile> fluxx0r: I'll have to wait tomorrow and poke the provider and/or try another connection (which I cannot access at the moment)
10:40:48 <fluxx0r> AnalogFile: yeah it's super weird...wget follows the 302 correctly, so it's only safari on my phone that's giving me trouble
10:42:05 <fluxx0r> AnalogFile: so yeah you're probably having provider error and I'm having unrelated user error or safari error
10:42:45 <AnalogFile> fluxx0r: which makes me wonder ... I'm trying to access it because I just did a full reinstall to upgrade to yosemite. I'll have to try rebooting to my SuperDuper backup of Mavericks and see if I have a problem there too.
10:42:56 <Zol_> http://lpaste.net/115881 -- could someone comment on this code? I wanted to avoid do & loop constructs to learn how to write bindings myself.
10:43:19 <Zol_> It's a version of that guessing game where the computer guesses a random number and you try to guess a number that is higher or lower.
10:44:53 <fluxx0r> AnalofFile: just hopped on the iMac upstairs and it's working fine in safari there (Yosemite)
10:45:29 <ClaudiusMaximus> @src readLn -- Zol_
10:45:29 <lambdabot> Source not found. Just what do you think you're doing Dave?
10:45:37 * hackagebot text-show 0.4 - Efficient conversion of values into Text  http://hackage.haskell.org/package/text-show-0.4 (ryanglscott)
10:46:53 <ClaudiusMaximus> Zol_: something like  readLn = read `fmap` getLine :: Read a => IO a  so your getInput = readLn  (with your type signature)
10:47:16 <Zol_> ClaudiusMaximus: Aah, thanks!
10:48:01 <AnalogFile> fluxx0r: yea, not saying it's Yosemite itself. but some crazy interaction between it and my provider or something like that. It was just a thought. i'll give it a try later, but I really think it's a routing problem (provider)
10:48:32 <fluxx0r> AnalogFile: cool
10:48:56 <ClaudiusMaximus> Zol_: you might want to add error checking (in case user makes a typo and enters something that doesn't parse as a number)
10:49:11 <AnalogFile> Zol_: note that your process function is neddlessly in IO. It cold be a simple function returning the plain GameState (just remove the return statements)
10:49:32 <AnalogFile> Zol_: you'll have to adjust the loop, of course
10:51:00 <AnalogFile> Zol_: for that just remove the second last line and use "loop (process input secret) secret" in the last one
10:52:34 <shirt> I'm getting a segfault when calling Data.ByteString.hPut (Program received signal SIGPIPE, Broken pipe). GHC 7.8.3. Is this a known bug?a
10:53:59 <monochrom> SIGPIPE happens when the supposed receiving end disappears. this is a bug of the receiving end.
10:54:22 <monochrom> it does not matter whether you use Haskell, C, or BASIC.
10:55:15 <shirt> monochrom: but i'm getting a segfault, not an exception
10:55:36 <shirt> monochrom: i only see the SIGPIPE when i run through gdb
10:59:38 <glguy> shirt: It's not a "segfault" it's an unhandled signal
11:00:07 <glguy> Have you seen http://hackage.haskell.org/package/network-2.6.0.2/docs/Network.html#g:10 ?
11:00:12 <shachaf> To be fair, a segfault isn't a segfault either.
11:00:38 * hackagebot mandrill 0.1.1.0 - Library for interfacing with the Mandrill JSON API  http://hackage.haskell.org/package/mandrill-0.1.1.0 (AlfredoDiNapoli)
11:00:42 <recursion-ninja> where do I paste code snippets?
11:00:51 <shachaf> See the topic.
11:00:56 <shachaf> hpaste.org
11:01:09 <recursion-ninja> hpaste.org, not lpaste?
11:01:24 <shachaf> They're the same website.
11:01:26 <recursion-ninja> oh, it redirects
11:06:29 <ahg> can anyone point me to a tutorial on the Text.XML.Light package? I am unfamiliar with the API and struggling to get started. I am having difficulty googling for help because the name is so generic, that all haskell XML packages turn up, and the results are very noisy.
11:09:15 <lpaste> recursion-ninja pasted “MapToTree” at http://lpaste.net/115886
11:09:26 <recursion-ninja> jmcarthur, mauke: This is what I was thinking about for a Map to tree ^^^
11:09:36 <recursion-ninja> Does anyone see a way to simplify it?
11:12:20 <recursion-ninja> :t foldr
11:12:21 <lambdabot> (a -> b -> b) -> b -> [a] -> b
11:12:29 <recursion-ninja> :t foldl
11:12:30 <lambdabot> (b -> a -> b) -> b -> [a] -> b
11:12:43 <chrisdone> :t fold
11:12:44 <lambdabot> (Monoid m, Foldable t) => t m -> m
11:16:00 * arianvp__ ExpertHaskellProgrammerAward Get! -- Arian has used more than 4 type variables
11:21:59 <shirt> glguy: Since GHC 6.10, the ghc runtime installs by default an empty sighandler for sigPIPE. i've tried adding the installHandler line anyway to my program, and i'm still getting the same segfault
11:23:06 <josiah14> I'm having trouble getting any comments at all.  Would somebody mind popping in on this and giving me any feedback whatsoever?  I'd like to get a second opinion before moving forward with my project. http://codereview.stackexchange.com/questions/70735/shell-prompt-styler-with-git-support
11:25:33 <recursion-ninja> josiah14: Unfortunatley I don't have te time now to look through it and give you feedback, What kind of feedback are you looking for specifically? Just about the segement typeclass?
11:26:01 <josiah14> I'm primarily looking for feedback on my types, yes, but I'll take anything
11:26:52 <josiah14> criticize wherever you find reason to - even if you don't have time to look at the whole thing, if you can find a couple of things, or one thing, I'd be happy
11:28:26 <josiah14> basically my main intention was to get any sort of feedback at all on my Haskell coding style from more advanced Haskell programmers so that I'm not learning to write Haskell in a vaccuum
11:30:02 <recursion-ninja> josiah14: I think that codereview.SE has the following problem: "look at my 50 lines of code, am I doing this right?" => some style & language feature answers; "look at my 100+ lines of code, is the architcure correct?" => 0 answers, tumbleweed badge awarded
11:30:41 <arjanb> josiah14: you seems to use flip a lot, so maybe you should reconsider the order of argument of some functions
11:31:16 <josiah14> I'm not sure how to do that with the record functions as creating a record forces the record instance as the first argument
11:31:26 <recursion-ninja> josiah14: Maybe make many questions on coderevie.SE, one for each model. You may get better feedback from the codereview community because the queistions are shorter and they have to think less
11:31:34 <recursion-ninja> *module
11:32:10 <josiah14> recursion-ninja: I'll work on splitting up the questions, then
11:32:55 <KangaAkale> hi
11:33:12 <recursion-ninja> josiah14: I suspect that some information-overload has detered answers, also with that much of a time effort required, a bounty might be apropriate
11:33:53 <josiah14> yah, unfortuately, with 22 points to my name, a bounty is not possible for me to create at the moment.
11:35:22 <recursion-ninja> josiah14: If you can convince me that I might learn something from a code review anser to your question, I might put up a bounty for you... ;)
11:38:08 <josiah14> recursion-ninja: well the main difficulty of the program so far has been in dispatching the correct methods based on which shell prompt the program is building (specified by a cli argument).  a resonse to this question would make this sort of dynamic dispatching problem easier to solve in the future
11:38:25 <KangaAkale> i got a small issue on haskell
11:38:32 <KangaAkale> can someone assist me
11:38:52 <josiah14> i.e. based on my cli arg, if it's bash, execute the functions from the bash module, if its zsh, the ones from the zsh module
11:38:58 <ChristianS> KangaAkale: just ask your question
11:39:08 <KangaAkale> ok
11:40:12 <KangaAkale> i have this code
11:40:14 <KangaAkale> http://lpaste.net/115893
11:40:24 <KangaAkale> but it does not compile
11:41:00 <KangaAkale> it keeps giving me this
11:41:02 <KangaAkale>  Failed, modules load
11:42:37 <pavonia> KangaAkale: What is the complete error message?
11:43:01 <recursion-ninja> KangaAkale: should `r .: "Date" <*>` be `r .: "Date" <$>` ?
11:43:36 <Chathurga> Should they not all be <*> except the first?
11:43:50 <KangaAkale> I have changed it
11:43:51 <recursion-ninja> Chathurga: that's what I initialy thought
11:44:03 <KangaAkale> but i still get thesame error
11:44:32 <recursion-ninja> change all the <$> to <*> except for the first <$> in `MatchDay <$>`
11:45:06 <KangaAkale> I have done that
11:45:24 <KangaAkale> <recursion-ninja> : done that
11:45:42 <recursion-ninja> KangaAkale: does it work?
11:45:43 <Chathurga> Is Data.Csv part of the standard packages?
11:45:54 <KangaAkale> no
11:46:10 <KangaAkale> i still get this
11:46:14 <KangaAkale> MatchTypes.hs:32:5: parse error on input ‘deriving’ Failed, modules loaded: none.
11:47:02 <pavonia> Remove the parentheses around deriving
11:47:16 <Chathurga> oh damn yeah, it should be deriving (Show)
11:47:42 <recursion-ninja> man if only he had told us the error message first...
11:47:53 <recursion-ninja> so easy to spot with that context
11:49:17 <KangaAkale> Still did not compilw
11:49:20 <KangaAkale> compile
11:49:35 <KangaAkale> got a big error when i did that
11:49:37 <monochrom> yes you need to show the latest version and the complete unabridged error message
11:49:37 <KangaAkale> MatchTypes.hs:35:26:     Couldn't match expected type ‘Parser (a20 -> b19)’
11:51:01 <KangaAkale> here is it
11:51:03 <KangaAkale> http://lpaste.net/115894
11:52:16 <Chathurga> KangaAkale: Paste in the full code again
11:52:49 <KangaAkale> ok
11:52:55 <KangaAkale> just a minute
11:53:28 <KangaAkale> http://lpaste.net/115896
11:53:53 <Chathurga> KangaAkale: You have the <$> and <*> the wrong way around
11:53:55 <KangaAkale> Chathurga postedit
11:54:12 <KangaAkale> a minute pls
11:59:15 <KangaAkale> Chathurga now i have another error message
11:59:41 <Chathurga> Paste it in
11:59:51 <KangaAkale> http://lpaste.net/115897
11:59:59 <KangaAkale> done
12:02:00 <Chathurga> KangaAkale: Using putStrLn to print the Right result makes it think your parser is supposed to output a string
12:02:03 <KangaAkale> Chathurga : seeen it
12:02:48 <KangaAkale> Chathurga: ok, please what is the appropriate thing to put there
12:04:04 <Chathurga> I'd write a little function that formats MatchDay into a "pretty" String
12:04:17 <Chathurga> so some f :: MatchDay -> String
12:04:31 <Chathurga> then do putStrLn (f p) instead
12:04:58 <Chathurga> That way it will infer that the Parser is parsing a MatchDay
12:05:20 <Chathurga> You'll eventually remove it as you start writing functions that actually use the MatchDay you get back
12:07:20 <KangaAkale> Chathurga ok
12:09:35 <glguy> KangaAkale: The pattern is   function <$> x <*> y <*> z
12:09:47 <glguy> (Oh, I was scrolled way up, that might not be relevant now)
12:10:15 <KangaAkale> glguy: I have fixed that already
12:11:30 <gonzaw> hey guys, I have a question about the category package
12:11:36 <gonzaw> It's the Functor module
12:11:43 <gonzaw> http://hackage.haskell.org/package/categories-1.0.6/docs/Control-Categorical-Functor.html
12:12:07 <gonzaw> What's exactly the function of the "LiftedFunctor" type in here?: Functor f => Functor (LiftedFunctor f) (->) (->)
12:12:12 <hodapp> damn, cabal doesn't want to install Ivory
12:12:30 <hodapp> probably that base (==4.6.*) dependency is causing issues
12:13:00 <pnowak|> gonzaw: to avoid orphan instances
12:14:17 <shachaf> LiftedFunctor lets you use Prelude Functors as "categorical" Functors.
12:14:26 <KangaAkale> Chathurga  Still here
12:15:50 <hodapp> but, I suppose this is a classic issue: package declares a dependency on an old version of something...
12:15:52 <Chathurga> KangaAkale: Is it a new error?
12:17:00 <KangaAkale> yes please
12:17:17 <KangaAkale> Chathurga : yes please
12:17:18 <trap_exit> we need more people like this: http://stefan.saasen.me/articles/git-clone-in-haskell-from-the-bottom-up/
12:17:28 <trap_exit> all I want for christmas is standard tools re-implemented in haskell for educational purposes
12:17:39 <hodapp> o_O
12:17:53 <gonzaw> So LiftedFunctor allows developers to define their own Prelude.Functor instances without clashing with an instance of Control.Categorical.Functor defined somewhere else?
12:18:03 <trap_exit> hodapp: you can do llvm in haskell
12:18:05 <lpaste> lambdaman pasted “Dynamic Function Loading” at http://lpaste.net/115898
12:18:17 <lambdaman> thoughts on why this doesn't work?
12:18:57 <gonzaw> Because I thought that having the instance "Prelude.Functor f => Control.Categorical.Functor f (->) (->)" and "Control.Categorical.Functor f => Prelude.Functor (->) (->)" could be useful
12:19:19 <hodapp> trap_exit: Hrm?
12:19:28 <shachaf> Yes, instances like that are a big problem.
12:19:41 <shachaf> Just like "instance Functor m => Monad m where ..."
12:19:59 <abc> @pl \xs n -> take n xs
12:19:59 <lambdabot> flip take
12:20:23 <hodapp> trap_exit: How would LLVM help?
12:20:25 <Chathurga> Am I correct in saying Either is a Semigroup but not a Monoid?
12:20:31 <abc> @pl \x -> fst x == snd x
12:20:31 <lambdabot> uncurry (==)
12:20:44 <ReinH> trap_exit: there is a git written in Haskell btw...
12:20:56 <trap_exit> ReinH: oh? where?
12:20:58 <ReinH> @hackage hit
12:20:58 <lambdabot> http://hackage.haskell.org/package/hit
12:21:08 <ReinH> Written by a coworker
12:21:09 <trap_exit> ReinH: @google git in haskell
12:21:14 <Chathurga> Wow, clever lambdabot
12:21:30 <trap_exit> ReinH: http://stefan.saasen.me/articles/git-clone-in-haskell-from-the-bottom-up/ ?
12:21:39 <shachaf> I meant "instance Monad m => Functor m", of course.
12:21:39 <ReinH> No, not that. hit.
12:21:43 <trap_exit> oh, n/m didn't see your link
12:22:04 <trap_exit> ReinH: do you work in a haskell shop?
12:22:17 <KangaAkale> Chathurga: Please what do you think I can do to resolve it
12:22:26 <ReinH> trap_exit: yes
12:22:49 <trap_exit> ReinH: where do you work?
12:23:00 <Chathurga> KangaAkale: Paste the code again
12:23:02 <trap_exit> I want to work in a haskell startup
12:23:27 <KangaAkale> OK the error or the main code
12:23:33 <Chathurga> Both
12:23:50 <trap_exit> ReinH: where do you work?
12:23:51 <KangaAkale> http://lpaste.net/115897
12:23:56 <KangaAkale> this is the error
12:24:38 <Chathurga> putStrLn $ p needs to be replaced with putStrLn (f p) where f :: MatchDay -> String
12:24:42 <KangaAkale> this is the code
12:24:44 <KangaAkale> http://lpaste.net/115899
12:24:54 <trap_exit> @gogole where does reinH work
12:24:56 <lambdabot> http://www.indeed.com/cmp/Reinhart-Foodservice-L.l.c./reviews
12:24:56 <lambdabot> Title: Reinhart FoodService L.L.C. Employee Reviews | Indeed.com
12:25:04 <ReinH> hahaha
12:25:19 <ReinH> trap_exit: I work at pivotcloud, we do distributed crypto stuff
12:25:35 <Chathurga> If you look at the type defintion of decodeByName :: FromNamedRecord a => ByteString -> Either String (Header, Vector a)
12:25:48 <ReinH> We posted a job listing on reddit r/haskell a few weeks ago
12:26:07 <Chathurga> Haskell needs a way to figure out what a you're talking about so that it can call the right version of parseNamedRecord
12:26:19 <hodapp> "Data.DList: Can't be safely imported! The module itself isn't safe."
12:26:26 <hodapp> wish I could figure out what that meant from cabal...
12:26:41 <trap_exit> ReinH: hmm, http://tab.snarc.org/about.html <-- from hit -> googling name of contributor (who you claim to be co-worker) -- results in XenSource
12:26:56 <KangaAkale> done that
12:27:02 <KangaAkale> got this again MatchTypes.hs:65:2: parse error on input ‘f’
12:27:02 <ReinH> Ok. But he works with me.
12:27:04 * ReinH shrugs
12:27:06 <kadoban> hodapp: https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/safe-haskell.html  I assume
12:27:21 <Chathurga> Since you have putStrLn whose type is String -> IO () Haskell infers that the a was supposed to be String which is wrong, you want MatchDay
12:27:37 <Chathurga> KangaAkale: No no, don't literally put what I wrote
12:27:43 <Chathurga> I mean you have to define a function f
12:27:58 <athan> Hey guys I've got a question - will the Identity functor ever be inferrable? So that all values theoretically have an infinite number of Identity wrappers around them?
12:28:08 <hodapp> kadoban: oh well, guess I'm just dealing with yet another unmaintained package
12:28:12 <KangaAkale> yes i did
12:28:20 <KangaAkale> i define a function f
12:28:42 <KangaAkale> and called it in my print function
12:29:33 <KangaAkale> see my code
12:29:52 <KangaAkale> Chathurga: http://lpaste.net/115900
12:30:24 <hodapp> Atom installed fine, but Ivory and Copilot both appear to have some Hackage issues
12:30:29 <hodapp> perhaps I can remedy them
12:31:42 <Chathurga> KangaAkale: You need to define it
12:32:06 <Chathurga> f md = homeTeam md ++ " vs " ++ awayTeam md
12:33:37 <KangaAkale> Chathurga: work like magic
12:33:46 <KangaAkale> Chathurga Thanks
12:35:08 <Chathurga> Phew, cool
12:35:36 <gonzaw> okay I think I get it. But if someone wanted to use a function  "go :: Prelude.Functor f => f a -> b -> Bar a b" (or something) by using it on functor Foo, and he only has an instance of "instance Control.Categorical.Functor Foo (->) (->)", then there's no problem using said instance right?
12:36:41 <gonzaw> or would that programmer still need to explicitly define an instance of "Prelude.Functor Foo"?
12:39:04 <glguy> gonzaw: Prelude's Functor class and categories' Functor class are just different classes. LiftedFunctor is a newtype that uses a Prelude Functor instance to provide a categories Functor instance for that specific newtyped thing
12:40:49 <gonzaw> @glguy Yeah, but the instances are isomorphic, so ideally you should be able to define any one of them (be it Prelude.Functor or Control.Categorical.Functor (->) (->) ) and be able to use the other one, right?
12:40:49 <lambdabot> Unknown command, try @list
12:41:10 <gonzaw> also my example I guess was about using LoweredFunctor instead
12:44:38 <Benzi-Junior> hey is there a parsec Parser like endBy that takes a specific parser for the end rather than just the interleaving one ?
12:47:35 <twanvl> Benzi-Junior:  x `sepBy` y <* z   will match   x y x y x z
12:49:31 <Benzi-Junior> "<* not in scope" what moduleis it in ?
12:49:53 <hodapp> hmmm, I see that SBV can do C code generation, but I suspect that it's not made for use as a more general C DSL like I sort of need
12:51:31 <Luke> I'm getting connection timeouts from socket connect. I'm catching them and printing the output of show but it doesn't have a type constructor that it prints. how can i find the constructor?
12:51:41 <ReinH> gonzaw: isomorphic doesn't mean same. They are different instances.
12:52:08 <ReinH> Haskell doesn't have a "use these instances interchangeably because they are isomorphic" feature
12:52:40 <ReinH> The newtype is the thing that says "if you have an instance of this, you can make an instance of the other thing for free"
12:52:52 <Luke> I want to match against the data constructor of the Socket exception I'm getting
12:52:56 <Luke> i just can't find it
12:53:40 <blast_hardcheese> Is there a function from a -> Monoid a -> Monoid a ? I'm trying to generalize "x : [y,z]"
12:53:58 <glguy> Luke: connect from the network package throws IOErrors
12:54:07 <Luke> how did you find that?
12:54:10 <glguy> as seen in System.IO.Error
12:54:24 <Luke> i traced the source to a foreign function.
12:56:08 <gonzaw> hmm, okay. So whenever you do want to use the "free "instance, you have to wrap and unwrap the LiftedFunctor/LoweredFunctor type each time, right?
12:57:17 <Benzi-Junior> twanvl: "<* not in scope" what module is it in ?
12:57:25 <ReinH> gonzaw: yes
12:57:30 <twanvl> Control.Applicative
12:58:02 <twanvl> x <* y  is essentially the same as  do {a <- x; y; return a}
12:58:47 <gonzaw> okay, thanks
13:00:01 <blast_hardcheese> Oh, maybe (mappend (return x) y) is what I'm looking for.
13:00:09 <Zol_> I can't seem to find untilM_ in any package on my computer, it should be in Control.Monad, right?
13:00:32 <glguy> Luke: It throws an IOException where the ioeGetErrorType returns GHC.IO.Exception.TimeExpired. C functions that store error codes in errno are wrapped by functions in Foreign.C.Error which automatically throws the corresponding exception for an errno value
13:00:47 <lpaste> lambdaman revised “Dynamic Function Loading”: “Improved Example” at http://lpaste.net/115898
13:00:48 <glguy> Luke: I don't know if that's actually documented anywhere, though
13:01:10 <lambdaman> If anyone has any ideas what I'm missing, I would appreciate some advice.
13:04:01 <gonzaw> blast_hardcheese: go x ms = (return x) `mplus` ms
13:04:19 <gonzaw> signature: go :: MonadPlus m => a -> m a -> m a
13:06:01 <gonzaw> sorry, there's a more general one
13:06:06 <gonzaw> go :: Alterative m => a -> m a -> m a
13:06:07 <blast_hardcheese> gonzaw: Interesting, what's the difference between return and pure?
13:06:09 <gonzaw> go x ms = (pure x) <|> ms
13:06:27 <gonzaw> *Alternative
13:08:45 <blast_hardcheese> gonzaw: sorry, what's the difference between return and pure?
13:09:08 <blast_hardcheese> One's in Applicative, one's in Monad, is that the only difference?
13:09:25 <Zemyla> I had a weird dream that the Haskell community was at war over whether a certain concept was a monad or not.
13:09:30 <geekosaur> that and some history
13:09:45 <gonzaw> Yes, pure applies to Applicatives, return to Monads
13:10:06 <geekosaur> (basically: Applicative came long after Monad, but every Monad should be both a Functor and an Applicative. so we have return when we should have had pure)
13:10:09 <gonzaw> if "Applicative m => Monad m" holds, then a Monad is just "pure" + "bind"
13:10:19 <Zemyla> I don't even remember what the concept was, though, so I can't ask about it here.
13:10:39 <Zemyla> :t (<*>)
13:10:40 <lambdabot> Applicative f => f (a -> b) -> f a -> f b
13:10:46 * hackagebot aur 2.0.3 - Access metadata from the Arch Linux User Repository.  http://hackage.haskell.org/package/aur-2.0.3 (fosskers)
13:11:12 <geekosaur> (likewise we have liftM when we should have only had fmap)
13:11:59 <Benzi-Junior> twanvl: the problem arises with x and z parsing the same intial character
13:12:48 <twanvl> Benzi-Junior: Parsec parsers commit to a choice when the initial character matches. But you can use the 'try' combinator to avoid that
13:13:26 <twanvl> if you write  try x, then it behaves the same as x, except that it backtracks on failure.
13:14:46 <Benzi-Junior> twanvl: ye I tried using that but there is a danger with "sepBy (try x) y <* z"
13:17:11 <gonzaw> Hmm, talking about Monads/Applicatives
13:17:25 <gonzaw> If we have "class Applicative m => Monad m"
13:17:41 <gonzaw> then does that mean MonadPlus is equivalent to Alternative?
13:20:43 <mjboa> would anyone be willing to take a look at some liquid haskell code?
13:23:27 <JagaJaga> Hi! Can smone suggest me a library which can helps me to draw smth with a mouse? I mean: square field (matrix of pixels) and if mouse button is pressed - fill pixel under it. And if it is possible - output the state of field as list of pixels or smth.....
13:25:50 <athan> Does anyone know what the source of `ReaderT`'s `ask` is?
13:26:03 <jasonkuhrt_> Hi, I am just about to try out creating a project in yesod, my first work in haskell, and the whole cabal / stackage server seems very... indirect to me. I'm not sure what to make of it. Is there a good article about getting a workflow going in modern haskell
13:26:03 <jasonkuhrt_> ?
13:26:52 <nitrix> I just wrote one nasty function because I couldn't do Lazy I/Os.
13:26:53 <sinelaw> jasonkuhrt_, I would try without stackage as a first step.
13:26:57 <nitrix> mapMN :: (b -> IO (Maybe a)) -> [b] -> IO [(b, a)]
13:26:59 <biscarch> jasonkuhrt_: Yesod has a book and some good getting started content on it's site
13:27:01 <glguy_> Athan, you should find it in the transformers package
13:27:09 <L8D> jasonkuhrt_: http://www.yesodweb.com/book
13:27:25 <pavonia> JagaJaga: You could use gtk
13:27:57 <L8D> jasonkuhrt_: why exactly do you want to learn Yesod first?
13:28:00 <jasonkuhrt_> Thanks guys, all helpful, I'm just looking for the sane path of doing basic stuff like: install/uninstall x package
13:28:10 <sinelaw> Question: I have a typeclass that I can implement for all types satisfying "Functor a", but there is a specific type where that implementation would be wrong. How can I deal with this without having to forgo the general Functor instance?
13:28:12 <pipo> \djiin
13:28:16 <pipo> \djin
13:28:28 <athan> glguy_: Thank you :)
13:28:39 <sinelaw> @where RWH
13:28:39 <lambdabot> http://www.realworldhaskell.org/blog/ http://book.realworldhaskell.org/read/
13:28:44 <JagaJaga> pavonia: yes, but I can't find there smth for a "drawing area (matrix of pixels)".. :(
13:28:48 <sinelaw> jasonkuhrt_, ^^^ RWH has some cabal-related stuff too
13:28:53 <sinelaw> (see link above)
13:28:56 <pipo> \help
13:29:04 <jasonkuhrt_> L8D: I've already been studying FP/Haskell for some time, I'm coming from an environment of full stack JavaScript, we have a small microservice to create, I was going to try in PureScript, and when I saw I was hitting friction there, decided to jump over to haskell and see how much friction this would bring
13:29:06 <pipo> Sorry, how do you get access to djin
13:29:19 <pavonia> @djinn a -> a
13:29:20 <jasonkuhrt_> L8D: My issue is not the language or concepts, its the builds, package system, and tooling
13:29:20 <lambdabot> f a = a
13:29:22 <jasonkuhrt_> : (
13:29:28 <sinelaw> pipo, you can /msg lambdabot too
13:29:32 <pipo> @djin a->a
13:29:33 <lambdabot> Maybe you meant: djinn djinn-add djinn-clr djinn-del djinn-env djinn-names djinn-ver
13:29:55 <pipo> @djinn
13:29:55 <lambdabot> Cannot parse command
13:30:01 <pipo> @help
13:30:01 <lambdabot> help <command>. Ask for help for <command>. Try 'list' for all commands
13:30:08 <L8D> jasonkuhrt_: I see, I would recommend against using PureScript but you don't need to worry. You just need to get familiar with cabal and things will go smoothly
13:30:08 <sinelaw> pipo, /msg lambdabot @djinn ....
13:30:20 <Maxdamantus> sinelaw: I imagine there should be an infinite amount of potentially Functor-instancing types where it's wrong then.
13:30:25 <L8D> jasonkuhrt_: however, yesod has many of its own tools on top of cabal
13:30:35 <pavonia> JagaJaga: What specifically are you looking for? You can register mouse actions on drawing areas too, IIRC
13:30:45 <L8D> jasonkuhrt_: you can go with lighter-weight servers like Scotty, Snap or Happstack
13:30:52 <sinelaw> Maxdamantus, not likely because this single type belongs to the AST and has some "special" constructor that requires special handling
13:31:04 <L8D> where you have more freedom to work as you wish with cabal
13:31:07 <sinelaw> (I'm working on some AST)
13:31:24 <Maxdamantus> sinelaw: so why can't someone else make such a type that requires special handling?
13:31:40 <jasonkuhrt_> L8D: my goal is to build a fine http server in haskell that is fun and stable but not "military grade", that helps me learn haskell, gets my simple HTTP Server project done, and that is easy to deploy and work on
13:31:49 <glguy_> Sinelaw: you can provide a default implementation of the operation and then override it in the special cases
13:31:50 <sinelaw> Maxdamantus, wouldn't make sense to do so in the context of this package.
13:32:00 <sinelaw> glguy_, I get "overlapping instances"
13:32:11 <L8D> jasonkuhrt_: I would say that out of all the different server frameworks, Yesod is the most "military grade"
13:32:30 <glguy_> Not a default instance, a default implementation of the class method in terms of fmap
13:32:59 <JagaJaga> pavonia: oh, I think I've found a solution. Thx anyway
13:33:04 <sinelaw> hmm
13:33:07 <jasonkuhrt_> L8D: snap seems stalled, but maybe I could try scotty or the other one... forget its name
13:33:30 <L8D> happstak
13:33:51 <jasonkuhrt_> L8D: simple?
13:33:58 <jasonkuhrt_> L8D: http://simple.cx/
13:34:02 <sinelaw> glguy_, but then the type class will always require functor?
13:34:11 <glguy_> Snap isn't "stalled"
13:35:10 <Maxdamantus> sinelaw: it sounds like you don't want a single implementation for all instances of Functor.
13:35:18 <jasonkuhrt_> glguy_: Good to hear, its more of a git commit observation..
13:35:21 <glguy_> Sinelaw: there an extension: DefaultSignatures
13:35:32 <biscarch> jasonkuhrt_: snap 1.0 is in development
13:35:39 <glguy_> That should help and is worth reading about
13:36:24 <sinelaw> glguy_, thanks a bunch
13:40:03 <Benzi-Junior> https://gist.github.com/Benzi-Junior/aa2d01a886f2151ea1da
13:41:28 <Benzi-Junior> ^ so what I'm trying to do is to get it run the parseLine parser until it fails and return the list and then go to the "string "</contour>"" parser anyone know a way to do this ?
13:41:55 <monochrom> ((a,a) ,[((a,a),(a,a),String)]) is an awesome type
13:44:11 <jasonkuhrt_> I notice that cabal init has this line regarding version
13:44:14 <jasonkuhrt_> Package version? [default: 0.1.0.0]
13:44:26 <jasonkuhrt_> I'm used to semver in the node community
13:44:33 <jasonkuhrt_> where we're working with x.y.z
13:44:54 <jasonkuhrt_> what is the 4th number for in the haskell case?
13:46:00 <glguy> jasonkuhrt_: The versions are (generally) interpreted like this: https://www.haskell.org/haskellwiki/Package_versioning_policy
13:47:12 <monochrom> IMO this is trying to do the equivalent of using a regex to parse hierarchical XML-like things, which is doomed to be a clutch. instead, since you look for opening <linesegment ...>, you should similarly look for closing "</linesegment>", rather than think in terms of the doomed regex mentality of "everything except / and >, followed by />"
13:50:15 <Benzi-Junior> monochrom: there is no "</linesegment>" there is just the "<linesegment ... />" (I did not make the xml files)
13:50:42 <monochrom> well ok that's slightly better
13:50:45 <matematikaadit> Benzi-Junior: isn't that what you are doing in your gist? what's the problem with your implementation?
13:50:52 <nitrix> Hey guys, I need an opinion on this function. I couldn't manage to do Lazy I/O so I wrote this: https://github.com/nitrix/udfs/blob/develop/Inode.hs#L75
13:51:11 <jasonkuhrt_> glguy: thanks
13:51:20 <monochrom> then it should work.
13:51:26 <nitrix> It's a monadic catMaybes, with a limit on how many Just values it optimally returns.
13:51:36 <nitrix> Couldn't do better :(
13:51:51 <nitrix> I don't understand pipes, but I'm open to suggestions, please.
13:52:12 <sinelaw> glguy, my only problem with DefaultSignatures is that now I might forget to implement a special override
13:52:25 <monochrom> ok, I see one possibility of going wrong, but I have to test my hypothesis.
13:52:29 <sinelaw> glguy, and if I don't forget, I might remove that code in the future and it will still compile
13:53:21 <glguy> sinelaw: Well, the default will only work for types with the right constraints, and yes, if you change your code without thinking about the change you can break your code. Your other option is to write: defaultMethodInTermsOfFmap = ...
13:53:28 <Benzi-Junior> matematikaadit: the problem is once it has parsed all the parseLine stuff i tries to run it again and gets an error on the "</contour>" part
13:53:32 <glguy> and then use that as the implementation for all the common instances
13:53:49 <sinelaw> glguy, yip, that's what I ended up doing. thanks for the insight
13:55:45 <matematikaadit> Benzi-Junior: try (string "<linesegment x1=")
13:55:49 <Benzi-Junior> matematikaadit: so my question is how to get it to parse the x x x y pattern where x and y have a common initial segment
13:56:47 <Benzi-Junior> matematikaadit: man it took me a second to realize that was a call to try not sugestion to try the bracketed line
13:58:25 <luite> is there a way to get ghc style options out of optparse-applicative? ( "program -option1 value1 -option2 value2" )
14:00:07 <zzo38> How do I make it find a module in the current directory called "Main.File1.hs" or whatever?
14:01:03 <Benzi-Junior> matematikaadit: you sir are a scholar
14:01:30 <kadoban> zzo38: That sounds like a bad thing to want.
14:01:32 <Benzi-Junior> matematikaadit: or to put it another way " it worked!"
14:02:07 <zzo38> Also, how do I store a small-endian 32-bit floating-point number into a file?
14:02:43 <merijn> zzo38: You probably wanna look at the binary package
14:03:23 <zzo38> The Data.Binary is using big-endian though; I want small-endian
14:03:58 <merijn> Are you using serialise/deserialise or writing manual Put/Get actions? You should be doing the latter
14:04:19 <matematikaadit> Benzi-Junior: glad for you
14:04:24 <merijn> serialise/deserialise use a binary specific protocol, if you want explicit control over the data, use Data.Binary.Get and Data.Binary.Put directly
14:05:44 <ifesdjeen> what would be a good way to implement an instance of StateT, which would hold the state in TVar? (to be able to run several StateTs that would share their contents across threads and still give atomic interface)
14:05:49 * hackagebot LambdaHack 0.4.100.0 - A game engine library for roguelike dungeon crawlers  http://hackage.haskell.org/package/LambdaHack-0.4.100.0 (MikolajKonarski)
14:05:51 <merijn> It already has primitives for word's, I'm assuming someone's written a library around binary that does floats
14:05:51 <zzo38> But what I wanted to know is how to write specifically this kind of data
14:06:34 <ifesdjeen> zzo38: data-binary has both little, big endian and host format
14:06:41 <ifesdjeen> zzo38: there's also cereal
14:07:44 <merijn> ifesdjeen: cereal is mostly obsoleted by binary now
14:08:01 <merijn> ifesdjeen: binary has gotten incremental parsing too, which was the main reason to use cereal
14:08:30 <merijn> There was talk of merging the two awhile back, but since incremental parsing was added to binary that's lost most interest
14:08:35 <ifesdjeen> merijn: righty. in any case, there's little and big endian :)
14:10:49 * hackagebot questioner 0.1.0.0 - A package for prompting values from the command-line.  http://hackage.haskell.org/package/questioner-0.1.0.0 (yamadapc)
14:12:25 <lifter> HLint doesn't seem to support pattern sysnonyms?
14:13:14 <zzo38> And how do I do the Main.File1.hs module searching stuff? Is it really necessary to use a subdirectory, or can I avoid this?
14:15:56 <zzo38> Also I want to make it using a IEEE 32-bit floating-point specifically
14:18:04 <dagnachew> hi all
14:21:36 <KangaAkale> is any one here
14:21:56 <KangaAkale> got issues
14:24:03 <KangaAkale> hello.....
14:24:09 <KangaAkale> any one here
14:24:25 <ReinH> KangaAkale: ffs, yes, people are here.
14:24:30 <ReinH> You can stop asking and just ask your question.
14:24:34 <KangaAkale> kk
14:24:51 <KangaAkale> got thie error while compiling
14:25:10 <ReinH> zzo38: binary will use whatever encoding you tell it to...
14:26:18 <zzo38> I tried using unsafeCoerce; I don't know if it is working correctly or not.
14:26:29 <KangaAkale> http://lpaste.net/9066621527440490496
14:26:38 <ReinH> You don't need unsafeCoerce
14:26:49 <KangaAkale> Please can someone assist me? got this error
14:26:56 <zzo38> (I mean (unsafeCoerce :: Int32 -> Float) and (unsafeCoerce :: Float -> Int32))
14:27:34 <ReinH> KangaAkale: what type do you think `main` has?
14:28:23 <KangaAkale> i don't get u
14:28:39 <ReinH> KangaAkale: the value `main`. What type does it have?
14:28:40 <KangaAkale> sorry I am new to Haskell
14:28:43 <ReinH> You don't specify one.
14:28:45 <KangaAkale> not a Pro
14:29:12 <ReinH> The case statement selects between different IO actions.
14:29:31 <ReinH> One of them is `print err', and print has type:
14:29:33 <ReinH> :t print
14:29:34 <lambdabot> Show a => a -> IO ()
14:30:03 <ReinH> This disagrees with the type of  connect "resultsdb.db"
14:30:03 <dagnachew> is this the proper way to install a package in a sandbox ? cd /home/dagnachew/.cabal/lib/x86_64-linux-ghc-7.8.3; mkdir package-name;cd package-name; cabal sandbox init ; cabal install package-name
14:30:06 <SwashBuckla> I thought it would be fun to add quickCheck tests to a CIS194 homework. I was wrong. It's really hard.
14:30:12 <KangaAkale> Ok
14:30:20 <ReinH> KangaAkale: All of the results of a case statement have to have the same type
14:30:27 <ReinH> You can use void to throw away the result:
14:30:29 <ReinH> :t void
14:30:30 <lambdabot> Functor f => f a -> f ()
14:30:45 <ReinH> void $  connect "resultsdb.db" -- will have type IO ()
14:31:20 <ReinH> KangaAkale: it's always a good idea to write explicit types for all your top-level definitions. *Especially* when you're a beginner.
14:31:39 <ReinH> dagnachew: sure
14:31:46 <KangaAkale> ok
14:31:56 <ReinH> zzo38: that is not what unsafeCoerce does.
14:32:10 <KangaAkale> the resultdb.db returns an IO
14:32:18 <ReinH> unsafeCoerce coerces between values that have the same machine representation.
14:32:19 <dagnachew> ReinH: that package will be available without specifying it's location ?
14:32:28 <ReinH> dagnachew: That package will be available within the sandbox only
14:32:33 <stephen_> I think you would want to create the sandbox in your development directory or one of its parents.
14:32:33 <KangaAkale> so I guess i will have to collect it from the main
14:32:43 <ReinH> Int32 and Float do not have the same machine representation
14:32:52 <ReinH> zzo38: So you definitely should not be using unsafeCoerce.
14:33:17 <stephen_> dagnachew: ^^
14:33:17 <KangaAkale> ReinH: Please how do I fix this
14:33:39 <ReinH> KangaAkale: fix what?
14:34:13 <dagnachew> ReinH: stephen_ I wanted to install some packages and it complained about breaking other packages. is there a way to make sandboxed packages available globally ?
14:34:14 <KangaAkale> The error That i am experiencing
14:34:19 <KangaAkale> should it be
14:34:23 <ReinH> zzo38: Is your issue with endian-ness or coersion?
14:34:42 <ReinH> dagnachew: no.
14:35:02 <KangaAkale> connect "resultsdb.db" >>= e
14:35:41 <stephen_> dagnachew: the point of sandboxes is the opposite of being global: you build a custom environment for your single project and install whatever packages are needed by that project
14:35:43 <KangaAkale> Reibh: should it ne
14:35:53 <KangaAkale> ReinH: connect "resultsdb.db" >>= e
14:35:57 <zzo38> ReinH: I want to store a small-endian 32-bit IEEE floating-point into a file which requires this format
14:36:11 <ReinH> KangaAkale: I'm not sure what you want to do after connecting
14:36:15 <ReinH> KangaAkale: let's look at a simpler example
14:36:39 <dagnachew> ReinH: I wanted to follow this tutorial building_a_concurrent_web_scraper_with_haskell.html and when I wanted to install hxt it complained to I installed it in sandbox
14:36:44 <KangaAkale> I am creating a table
14:36:56 <KangaAkale> if you look at the link i sent
14:37:27 <ReinH> KangaAkale: Do you understand why you are getting the type error?
14:37:38 <KangaAkale> the connect function calls the prepareDB function
14:38:13 <KangaAkale> yes because the connec function is suppose to return an IO
14:38:18 <ReinH> No.
14:38:29 <KangaAkale> which I am not handling properly
14:38:34 <stephen_> could you use @google hpaste to show us the error?
14:38:40 <ReinH> It returns an IO Connection, but main has type IO ()
14:39:07 <KangaAkale> OK
14:39:12 <L8D> > 1 + 1
14:39:14 <lambdabot>  2
14:39:18 <shachaf> main has type IO t for any t you like.
14:39:25 <L8D> :~:
14:39:26 <ReinH> shachaf: And in this case that type is ()
14:39:38 <KangaAkale> so that mein I will have to change the return type to something else
14:39:47 <Benzi-Junior> can anyone tell me why this fails when parsing the end of file ?https://gist.github.com/Benzi-Junior/aa2d01a886f2151ea1da
14:39:52 <shachaf> OK.
14:39:53 <KangaAkale> or set it to null in the main right?
14:40:13 <ReinH> KangaAkale: we can reduce the problem to this:
14:40:44 <ReinH> case b of { True -> print "true"; False -> connect "some.db" }
14:41:16 <ReinH> `print "true"` has type IO () while `connect "some.db"' has type IO Connection
14:41:27 <L8D> Benzi-Junior: what does parseFloor look like?
14:41:34 <ReinH> The case statement can't give values of different types.
14:41:51 <L8D> you can always do (>> return ()) though
14:42:07 <ReinH> Right, which is what `void' does. But I suppose you actually want to do something after connecting...
14:42:19 <KangaAkale> yes
14:42:43 <ReinH> and that thing is prepareDB?
14:42:47 <KangaAkale> create tables and read content of a csv file into the database
14:42:55 <KangaAkale> yes
14:43:37 <ReinH> and Connection is an instance of the typeclass IConnection?
14:44:01 * glguy_ would like t to be IO    ^_^
14:44:01 * glguy_ retracts silly comment
14:44:35 <dagnachew> ReinH: I have network 2.6 installed but hxt says hxt-9.3.1.9 depends on network-2.4.0.0 which failed to install
14:44:50 <ab9rf> welcome to cabal hell!
14:44:51 <ReinH> dagnachew: sandbox all the things...
14:44:56 <Benzi-Junior> L8D: I updated thi gist with the two parsers used
14:46:46 <merijn> ab9rf: That's not cabal hell
14:47:37 <haasn> when will cabal be able to re-use sandboxed things that have already been built?
14:47:49 <merijn> I get annoyed that everyone who never ran into "cabal hell" now uses it to accuse cabal of problems which boil down to "I want to use poorly maintained packages" or "I want the bleeding edge, but no complain about the bleeding edge pain"
14:47:53 <ReinH> KangaAkale: so you need to combine the connect "some.db" with prepareDB, so you have a IO Connection and a Connection -> IO (), so to connect them you need a function IO Connection -> (Connection -> IO ()) -> IO (). Do you know a function like that?
14:47:58 <kqr> is anyone familiar with the fpcomplete haskell IDE? I'm not on my regular computer but i'd like to try out a few things from data.foldable and such
14:48:06 <merijn> haasn: You can already link sandboxes into other sandboxes
14:48:13 <kqr> it feels overkill to "create a new project" when I just want an editor and a compiler
14:48:17 <kqr> am I doing something wrong?
14:48:38 <ReinH> kqr: Hi. Well, it might be overkill, but that's how you get an editor and a compiler on FPComplete IDE...
14:48:46 <kqr> ReinH, okay, fair enough :)
14:48:46 <KangaAkale> no
14:48:52 <haasn> That's why I hate integrated IDEs :)
14:49:01 <stephen_> dagnachew: initialize a sandbox in you dev directory, add all your dependencies to your package .cabal file, then use package-install --only-dependencies; cabal build. If you're missing anything, update the dependency list in your package cabal file, and repeat.
14:49:13 <haasn> Trying out a few things should be a matter of popping open GHCi, not creating a new project with name and description and then initializing it with a basic structure
14:49:14 <ReinH> KangaAkale: what about a function IO a -> (a -> IO b) -> IO b?
14:49:17 <haasn> or whatever IDEs tend to do
14:49:29 <kqr> haasn, that's how I like it too
14:49:36 <KangaAkale> no
14:49:39 <kqr> haasn, but I don't have access to a regular ghc on this computer :(
14:49:42 <ReinH> KangaAkale: Well, let's ask hoogle
14:49:49 <ReinH> @hoogle IO a -> (a -> IO b) -> IO b
14:49:51 <lambdabot> Control.Exception.Base bracket :: IO a -> (a -> IO b) -> (a -> IO c) -> IO c
14:49:51 <lambdabot> Control.Exception bracket :: IO a -> (a -> IO b) -> (a -> IO c) -> IO c
14:49:51 <lambdabot> Control.OldException bracket :: IO a -> (a -> IO b) -> (a -> IO c) -> IO c
14:49:55 <haasn> Uh oh.
14:49:56 <ReinH> Ok, not general enough.
14:50:11 <ReinH> IO is an instance of Monad. So we can use a function Monad m => m a -> (a -> m b) -> m b
14:50:21 <ReinH> @hoogle m a -> (a -> m b) -> m b
14:50:21 <lambdabot> Prelude (>>=) :: Monad m => m a -> (a -> m b) -> m b
14:50:21 <lambdabot> Control.Monad (>>=) :: Monad m => m a -> (a -> m b) -> m b
14:50:21 <lambdabot> Control.Monad.Instances (>>=) :: Monad m => m a -> (a -> m b) -> m b
14:50:49 <ReinH> so connect "some.db" >>= prepareDB
14:50:50 <kqr> does anyone happen to know if you can select a top-level expression or something and just run it? or do I have to fiddle with show and the main function?
14:51:18 <KangaAkale> ok\
14:51:20 <ReinH> or with do notation, do { db <- connect "some.db"; prepareDB db }
14:51:23 <KangaAkale> just a minute
14:52:10 <haasn> kqr: Try uploading GHCi to FP complete and running that. Does its terminal emulator handle input and stuff?
14:52:18 <ReinH> And the resulting value has type IO (), which is the correct type for your `main' definition
14:53:09 <haasn> (Don't actually try that)
14:54:31 <ReinH> Hah.
14:55:18 <stephen_> dagnachew: when you add network to your dependency list, add the == 2.4 afterwards: Here's hxt's relevant changelog line
14:55:19 <stephen_> Changes from 9.3.0: upper bound for network set to be < 2.4 (URI signatures changed in 2.4)
14:55:52 * hackagebot diagrams-lib 1.2.0.7 - Embedded domain-specific language for declarative graphics  http://hackage.haskell.org/package/diagrams-lib-1.2.0.7 (jeffreyrosenbluth)
14:57:51 <Benzi-Junior> can anyone tell me why this fails when parsing the end of file ? https://gist.github.com/Benzi-Junior/aa2d01a886f2151ea1da I just don't see it
14:58:26 <KangaAkale> iReinH  changed my code to this http://lpaste.net/1819841999105163264
14:58:40 <KangaAkale> ReinH  changed my code to this http://lpaste.net/1819841999105163264
14:59:26 <KangaAkale> ReinH: and it gives this error MatchDB.hs:12:8: parse error on input ‘run’
14:59:46 <ReinH> KangaAkale: run has to be indented at the same level as "conn"
14:59:54 <ReinH> see http://en.wikibooks.org/wiki/Haskell/Indentation
15:00:53 * hackagebot diagrams-svg 1.1.0.3 - SVG backend for diagrams drawing EDSL.  http://hackage.haskell.org/package/diagrams-svg-1.1.0.3 (jeffreyrosenbluth)
15:01:28 <KangaAkale> ReinH: done that
15:01:35 <KangaAkale> still the same error
15:02:02 <jasonkuhrt_> Is cabal the most advanced thing haskell has to work with packages in the haskell community? It seems quite limited compared to http://blog.versioneye.com/2014/01/15/which-programming-language-has-the-best-package-manager/
15:02:03 <dagnachew> I have to unpack hxt and edit the config and reinstall ?
15:02:22 <jasonkuhrt_> Just want to make sure I'm not missing anything
15:03:29 <ReinH> Exactly the same error?
15:03:53 <arjanb> Benzi-Junior: maybe bad indentation due to mixing tab and space, and also line 29 looks fishy
15:04:10 <ReinH> jasonkuhrt_: you aren't.
15:04:10 <KangaAkale> ReinH: resolved
15:04:21 <jasonkuhrt_> ReinH: ok, thanks!
15:04:26 <KangaAkale> it builds now
15:04:33 <stephen_> dagnachew: No, you don't need to unpack hxt. Does your project have a .cabal file? (if not, it's best practice)
15:05:21 <dagnachew> stephen_: I am new to haskell am not yet in to projects just experimenting with some packages
15:06:31 <KangaAkale> ReinH: I can create my DB now
15:07:05 <ReinH> dagnachew: still, a cabal file would help keep these dependency constraints in check
15:07:12 <ReinH> and it isn't that hard to create one
15:07:42 <dagnachew> ReinH: I have a .cabal folder
15:08:33 <ReinH> dagnachew: Right, but I'm talking about a cabal *file*.
15:09:26 <dagnachew> ReinH: I am realy new to haskell I just wanted to install some packages and load them to try them
15:09:29 <stephen_> okay, you shouldn't even need a sandbox then, just use cabal install hxt-2.4; see if it conflicts with the over version. If it doesn't you're golden if it does, create a sandbox with a .cabal file, and add 2.4 as a dependency along with anything else you need, and you should be good.
15:10:23 <dagnachew> stephen_: I just installed in a sandbox and it worked
15:11:06 <stephen_> Awesome!
15:11:07 <dagnachew> stephen_: hxt in a sandbox installed network-2.5
15:11:38 <dagnachew> stephen_: packages installed in sandbox will be available in ghc ?
15:12:13 <stephen_> as long as you're building in that directory, yes
15:12:16 <KangaAkale> Please I have a module that reads content of a csv file, one that downloads a csv file ,  one that creates a database table and a main function
15:12:25 <dagnachew> stephen_: is .cabal like a gem file where you specify packaged for a given project ?
15:13:09 <KangaAkale> I want to write a function that is called from the main and it reads the content of the csv file and save to the data base
15:13:18 <ReinH> dagnachew: try `cabal exec ghc`
15:13:38 <ReinH> stephen_: really, ghc will automatically detect a sandbox?
15:13:56 <ReinH> That's... surprising...
15:14:03 <dagnachew> ReinH: ghc: no input files
15:14:31 <ReinH> dagnachew: a cabal file for a package "foo" would be a file called "foo.cabal" which describes the location of modules, dependency constraints, etc for a package
15:14:43 <ReinH> cabal sandbox is intended to work with a cabal package managed by a cabal file
15:14:58 <ReinH> you can use `cabal init` to create a cabal file
15:15:04 <KangaAkale> can someone please assist me
15:15:25 <KangaAkale> to go about my request
15:15:27 <ReinH> KangaAkale: What is your question?
15:15:45 <KangaAkale> I want to write a function that is called from the main and it reads the content of the csv file and save to the data base
15:15:46 <stephen_> Well cabal helps with build management: if you use cabal build, it sends the sandboxed dependencies to be used by ghc as opposed to any global versions.
15:15:48 <dagnachew> ReinH: stephen_ I wont take your time anymore I will slowly start learning and bother with packages later on
15:15:53 * hackagebot questioner 0.1.1.0 - A package for prompting values from the command-line.  http://hackage.haskell.org/package/questioner-0.1.1.0 (yamadapc)
15:16:13 <ReinH> dagnachew: not a problem... cabal dependencies can be frustrating...
15:16:37 <ReinH> dagnachew: Turning your directory of haskell files into a cabal project will take about a minute and would make it much easier to manage
15:16:43 <KangaAkale>  have a module that reads content of a csv file, one that downloads a csv file ,  one that creates a database table and a main function
15:16:56 <ReinH> KangaAkale: Ok. What is your question though?
15:17:22 <KangaAkale> ReinH: I want to write a function that is called from the main and it reads the content of the csv file and save to the data base
15:17:27 <stephen_> dagnachew: use cabal init, and it walks you through it.
15:17:45 <dagnachew> ReinH: how do I turn my .cabal directory as a project ?
15:17:54 <ReinH> dagnachew: not your .cabal directory
15:17:59 <ReinH> Whatever directory your haskell files are in.
15:18:09 <ReinH> The .cabal directory is where cabal puts sandbox stuff
15:18:27 <ReinH> if you have a directory foo with a file foo/Main.hs, you can cd foo && cabal init
15:18:41 <ReinH> And it will walk you through creating the cabal file.
15:18:56 <dagnachew> ReinH: /home/dagnachew/.cabal/lib/x86_64-linux-ghc-7.8.3 here I have all the packages
15:19:19 <ReinH> dagnachew: that is your top-level cabal directory
15:19:30 <ReinH> The "user db", as it's called
15:19:39 <ReinH> KangaAkale: Ok, I understand that. What is your question?
15:20:11 <ReinH> dagnachew: if you're having trouble getting a particular package to install along with all the other top-level packages, you should try a sandbox.
15:20:16 <dagnachew> ReinH: if I start from scratch what should I do to have a great haskell environwement ?
15:20:53 <KangaAkale> ReinH: How can i write a function that I will call from the main and it will get the contents of a csv file and red it into a data base
15:20:55 <ReinH> dagnachew: The issue is that sometimes package dependencies conflict, so you want to isolate them. Cabal is like rubygems, cabal sandbox is like bundler.
15:21:31 <ReinH> KangaAkale: that's a pretty broad question.
15:21:51 <KangaAkale> ReinH yes it is
15:22:03 <dagnachew> ReinH: so I will have a .cabal file with packages and then issue an install on that file ?
15:22:24 <ReinH> dagnachew: Nope. :)
15:22:25 <merijn> dagnachew: Right
15:22:28 <merijn> dagnachew: Well, maybe
15:22:35 <ReinH> merijn: I'm not sure what ".cabal file" means here...
15:22:41 <merijn> dagnachew: cabal is both a build tool and dependency fetcher
15:22:44 <ReinH> dagnachew: let's be specific.
15:22:58 <ReinH> dagnachew: if you have a directory foo with a file foo/Main.hs
15:23:01 <ReinH> you can do this:
15:23:01 <merijn> dagnachew: When you create foo.cabal file it defines the dependencies and source files of the "foo" package
15:23:15 <ReinH> cd foo && cabal sandbox init && cabal init
15:23:23 <ReinH> This will create a local "sandbox" in the foo directory and a file, foo.cabal
15:23:31 <ReinH> the foo.cabal file describes how your foo project is built
15:23:54 <ReinH> when you issue commands like "cabal configure" and "cabal install", cabal will read from the foo.cabal file and detect the sandbox you created in that directory
15:24:00 <ReinH> dependencies will then be installed to that local sandbox
15:24:12 <ReinH> so that they do not conflict with the top-level packages
15:24:24 <ReinH> dagnachew: see http://coldwa.st/e/blog/2013-08-20-Cabal-sandbox.html and https://www.haskell.org/cabal/users-guide/developing-packages.html
15:24:31 <stephen_> quick question: what's the syntax to mark my package as unsafe?
15:25:06 <merijn> stephen_: What do you mean?
15:25:16 <kqr> is there a function along the lines of (Alternative f, Traversable t) => t f -> t f that will sort out all the empty alternatives? or am I misunderstanding how Alternative works?
15:25:19 <ReinH> KangaAkale: what part of the problem specifically are you having trouble with? It's beyond the scope of an IRC channel to teach you how to read a CSV file and write to a database.
15:25:49 <KangaAkale> ReinH: I can read to csv
15:25:52 <ReinH> kqr: Erm, so you want something like a generalization of catMaybes?
15:25:55 <athan> Is there _any_ way to make a superclass variable work with functional dependencies? :(
15:25:59 <stephen_> So the package I'm building requires an unsafe package: how can I allow myself to import it without complaining? will the Xunsafe flag do that?
15:26:03 <KangaAkale> i can create database]
15:26:27 <KangaAkale> so i jjust want to couple the functionalities together]
15:26:45 <kqr> ReinH, exactly
15:26:47 <ReinH> KangaAkale: Ok. What types do your csv reading and database creating actions have?
15:27:02 <ReinH> kqr: hmm...
15:27:08 <KangaAkale> just a minute
15:27:15 <KangaAkale>  i will poet both
15:27:24 <KangaAkale> i will post both
15:28:10 <ubermensch> hey, if I want to learn haskell, what sorts of projects should I start out doing?
15:28:13 <rs0> intuitively, why is list a higher-kinded type, but not tuple?
15:28:18 <kqr> ubermensch, the ones you think are fun
15:28:23 <ReinH> kqr: So there can't be *that* function specifically, since it doesn't typecheck ;)
15:28:36 <kqr> ReinH, I expected there was something like that I've missed
15:28:38 <ReinH> f is a type constructor of kind * -> * ;)
15:28:43 <kqr> ReinH, the Alternative class has always confused me
15:29:12 <ReinH> :t F.foldr (<|>) mempty
15:29:13 <lambdabot> (Monoid (f a), Foldable t, Alternative f) => t (f a) -> f a
15:29:19 <ReinH> er no
15:29:26 <ReinH> oh it's just empty
15:29:29 <ReinH> :t F.foldr (<|>) empty
15:29:30 <lambdabot> (Foldable t, Alternative f) => t (f a) -> f a
15:29:44 <ReinH> Which is not what you want...
15:30:06 <kqr> Alternative is probably not at all what I want
15:30:27 <kqr> is there some sort of generalisation of Maybe? I know at least Maybe and Either e should be in that class
15:30:39 <kqr> maybe it's not that simple
15:30:48 <shachaf> What is the goal here?
15:30:52 <KangaAkale> ReinH: this is the module that reads the csv file: http://lpaste.net/115918 this is the module that created the database http://lpaste.net/5510312976273375232
15:31:22 <ReinH> KangaAkale: I just want to know the types
15:32:01 <ReinH> rs0: What do you mean? (,) has kind * -> * -> *
15:32:05 <kqr> shachaf, nothing in particular, just exploring. the code I'm writing is side-effectfully trying to do a bunch of things, some of which may fail (return a value that behaves a bit like Nothing or Left e), but I'd like to keep only the ones that succeeded
15:32:26 <sbrg> TransformListComps. What the hell.
15:33:09 <rs0> ReinH: i can have an MPTC instance head of (Char) (), but if I want [Char] (), I have to turn on FlexibleInstances
15:33:27 <KangaAkale> The CSV is of a custom datatype
15:34:13 <ReinH> rs0: Er, (Char) is not a tuple though
15:34:18 <ReinH> Haskell doesn't have 1-tuples.
15:34:25 <rs0> oh, okay. i'm dumb
15:34:30 <rs0> heh, not even if you do the Python thing? (Char,)
15:34:35 <kqr> nah
15:34:53 <kqr> the reason being that why would you want a 1-tuple when you could have just the value?
15:35:07 <shachaf> Identity is a useful type.
15:35:13 <ReinH> Well, you could say that Identity is isomorphic to a 1-tuple
15:35:21 <ReinH> shachaf: heh
15:35:44 <kqr> isn't identity mostly used to make the type checker happy?
15:35:54 <shachaf> Types are used to make the type checker happy.
15:35:58 <kqr> and people
15:36:17 <shachaf> The use of a 1-tuple would be to make the type checker happy.
15:36:18 <ReinH> The real reason being, I think, is unambiguous parsing of 1-tuples and grouped expressions
15:36:31 <rs0> well, types *always* make the typechecker happy, whereas they only *occasionally* make humans happy
15:36:55 <kqr> shachaf, sure, but I think Identity is a lot more descriptive than the 1-tuple for the make-type-checker-happy purpose
15:37:14 <ReinH> Stop anthropomorphizing the type checker. It hates it when you do that.
15:37:20 <shachaf> kqr: OK.
15:37:23 <exio4> rs0, I would say most-of-the-time-when-not-using-lens they make humans happy!
15:37:50 <rs0> exio4: speaking of Lens, can someone explain to me what problem Lens is trying to solve?
15:38:09 <kqr> rs0, yes, but I'd argue Identity is one of those that score rather low on the human-happy index compared to many other types
15:38:16 <kqr> rs0, however high it scores on the type-checker-happy scale
15:38:23 <shachaf> rs0: lens solves many problems and creates several
15:38:23 <geekosaur> rs0, mostly making record updates sane-ish
15:38:27 <zzo38> How do I cause it to load a module in another file then without making up a package of it?
15:38:39 <zzo38> It just tells me module is not loaded: `OHRHASK' (.\OHRHASK.hs)
15:38:55 <ReinH> KangaAkale: I don't need to know the definitions of the types, just their names.
15:38:56 <kqr> rs0, lenses make access and modification of nested structures really convenient. think attributes in OOP but much, much more powerful
15:39:24 <rs0> kqr: anything is more powerful than OOP when it comes to working with data. how does it conceptually compare to defrecord in clojure?
15:39:25 <shachaf> Lenses aren't really the most important part of lens. It's slightly misnamed.
15:39:43 <kqr> rs0, the easiest bits of lens work a lot like OOP attributes, only they are first-class values so you can pass them as arguments to functions and so on
15:39:50 <ReinH> shachaf: another unfortunate accident of history...
15:39:59 <KangaAkale> ReinH: please try and look at the two links i sent to you]
15:40:01 <shachaf> rs0: The general motivation for lenses is this: In a language with mutation and lvalues and what not, it's easy to say foo.bar.x += 5 or what-have-you.
15:40:11 <ReinH> KangaAkale: I don't have time to read a bunch of code. I just want to know the types.
15:40:22 <KangaAkale> it is very clear
15:40:25 <kqr> shachaf, that is a good point. when I say lenses I often mean traversals and prisms all the rest as well. I should learn to say 'optics' but people don't get it when I do
15:40:30 <shachaf> rs0: But without mutation you're in trouble, since you can't change things in place, you have to create a new structure that's different all the way to the root.
15:40:34 <ReinH> KangaAkale: if you don't know the types, you should figure them out. Knowing the types of the thing you're trying to do is very important.
15:40:37 <merijn> KangaAkale: That's what you think, because you wrote it
15:40:45 <shachaf> rs0: So lenses are like purely functional first-class lvalues.
15:40:53 <merijn> I make it a point not to read other people's code without types
15:41:02 <merijn> Ain't nobody go time for that
15:41:09 <shachaf> rs0: But there are probably dozens of packages that provide lenses, and most of them don't do the other things lens does.
15:41:21 <rs0> shachaf: okay. this sounds very similar to the stuff you can do in Clojure with functions like update-in. you want to efficiently create a new value from an old one by way of a functional transformation
15:41:22 <ReinH> I asked for the types precisely because I don't need to see the code to answer your question.
15:41:48 <rs0> shachaf: and you also don't want to have to implement that functionality from scratch over and over again for each domain type, like some Java programmer
15:42:07 <ReinH> And because knowing the type of the function you want is the first step of writing that function
15:42:10 <achudnov> msg prinsen Hi Fabian. This is Andrey. I've got your e-mail.
15:42:49 <KangaAkale> it is of type MatchDataType
15:42:54 <ReinH> What is?
15:43:19 <KangaAkale> i told you it is a custom datatype
15:43:28 <ReinH> What is a custom datatype?
15:43:39 <ReinH> You said you want to read CSV and write to a database? What are the types of those actions?
15:43:39 <merijn> rs0: Don't take me to seriously, because I'm not in the cult of lens, but as far as I understand it's basically generalising and making composable all of getters, setters, traversals and folds in a way that you can fuse away most (all?) of the intermediate data structures during your update
15:44:05 <KangaAkale> i created the data type myself
15:44:30 <ReinH> What are the types of the functions that read from CSV and write to the database?
15:44:30 <KangaAkale> it is made up of strings ans integers]
15:44:33 <shachaf> rs0: I don't know Clojure.
15:44:52 <KangaAkale> I dont have one yet
15:44:56 <ReinH> Then I can't help you.
15:45:07 <KangaAkale> that is why i am asking how to go about it
15:45:23 <glguy> The contribution of lens that I value is the generalization of so many of the common functions in base and other places to programmer defined patterns. The various -Of functions that the package provides
15:45:24 <ReinH> KangaAkale: You said "I just want to couple the functionalities together", so which is it?
15:45:43 <merijn> shachaf: Correct my intuition if I'm wrong, but the reason everyone involved with lens loves codensity is to fuse away intermediate structures while updating, right?
15:45:59 <glguy> Record updates might have been the original inspiration but the package isn't about that now
15:46:07 <shachaf> merijn: I don't know of a relationship between lens and Codensity.
15:46:11 <KangaAkale> i already have a module that can read the contents of the CSV file
15:46:24 <ReinH> And what is the type of the function from that module which does this?
15:46:24 <KangaAkale> I can create a database
15:46:45 <KangaAkale> so i just want to save what i have read to db
15:46:49 <merijn> I don't think there's a relation between the two, but everyone I know that hacks on lens loves codensity, so I'm assuming it's used inside lens for that reason
15:46:53 <shachaf> ==glguy
15:46:57 <shachaf> Well, partly.
15:47:04 <ReinH> KangaAkale: Just tell me the type of the function that reads from CSV and the type of the function that writes to the database.
15:47:17 <shachaf> merijn: No, it's just great.
15:47:26 <glguy> And so easy
15:47:28 <shachaf> merijn: It's the so-called "mother of all monads".
15:47:38 <shachaf> But it's easy to confuse it with Cont.
15:48:08 <rs0> what is codensity?
15:48:12 <merijn> shachaf: Yeah, I noticed that similarity
15:48:19 <ReinH> merijn: Mac Lane talks about Codensity in, iirc, chapter 13 of CWM
15:48:19 <merijn> rs0: Confusing :>
15:48:39 <merijn> ReinH: I can't even get past page 20 of Awodey, I don't think Mac Lane will help me :p
15:48:44 <ReinH> merijn: This is a nice explanation of the codensity stuff http://www.cs.ox.ac.uk/ralf.hinze/Kan.pdf
15:48:59 <ReinH> and a bit about the relationship between Codensity, Cont, Yoneda, etc
15:49:00 <KangaAkale> ReinH: Just a minute pls
15:49:01 <merijn> ReinH: Yes, you linked that two times and I've had that open in a tab for weeks :p
15:49:04 <shachaf> Those explanations are very complicated and only tangentially related to Haskell.
15:49:07 <shachaf> Codensity is very simple: It's the return type of (>>=)
15:49:15 <merijn> ReinH: I've not finished reading it
15:49:22 <shachaf> (>>=) :: Monad m => m a -> forall b. (a -> m b) -> m b
15:49:27 <ReinH> shachaf: and yoneda is the return type of fmap ;)
15:49:30 <shachaf> type Codensity m a = forall b. (a -> m b) -> m b
15:49:39 <merijn> shachaf: I know, I was reading Janis Voigtländer's paper
15:50:08 <merijn> I think I get the big picture, but I think I need to play around a lot more before it becomes intuitive to follow
15:50:17 <shachaf> Then there are some non-simple consequences of it.
15:50:22 <merijn> The link between codensity and DList helped
15:50:39 <ReinH> merijn: Also the link between Codensity and flip ($) :)
15:50:59 <shachaf> I think Hinze's paper is pretty confusing unless you already know a lot of the things it talks about.
15:51:06 <ReinH> shachaf: Maybe so...
15:51:08 <merijn> ReinH: i.e. Codensity and Cont :p
15:51:12 <ReinH> merijn: :)
15:51:41 <shachaf> And it says "for program optimization" but it doesn't say anything about why it can speed up programs.
15:51:47 <merijn> I'm getting there, eventually :p
15:52:29 <ReinH> merijn: one way to look at it is that Codensity is an abstraction of continuation passing in the same way that (=<<) is an abstraction of function application
15:52:43 <KangaAkale> ReinH:  are u there
15:52:52 <shachaf> I don't think that makes sense.
15:52:54 <shachaf> But who knows.
15:52:59 <shachaf> Intuitions and all.
15:53:01 <KangaAkale> lets take it one at a time
15:53:16 <ReinH> shachaf: Cont is the type of a suspended computation, Codensity is the type of a suspended "monadic computation".
15:53:31 <ReinH> ($) is the type of function application, (=<<) is the type of "monadic function application"
15:53:56 <ReinH> shachaf: At least, that's how I meant it.
15:54:19 <merijn> The intuition that works for me so far is the link between continuation passing and DList, because DList "makes sense", I just need to think harder on how it generalises to monadic functions
15:54:22 <KangaAkale> ReinH: i can output the content of my csv file to screen
15:54:34 <ReinH> KangaAkale: how do you do that?
15:55:02 <ReinH> presumably something like do { data <- readCSV "file"; print data; } ?
15:55:19 <KangaAkale> ReinH: using this main :: IO () main = do     csvData <- BL.readFile "result.csv"     case decodeByName csvData of         Left err -> putStrLn err         Right (_, v) -> V.forM_ v $ \ p ->           putStrLn (f p)
15:55:48 <ReinH> So you just read the CSV as a bytestring, you don't parse the CSV.
15:56:10 <ReinH> @hackage cassava
15:56:10 <lambdabot> http://hackage.haskell.org/package/cassava
15:56:17 <ReinH> KangaAkale: ^ is a good library for parsing CSV
15:56:58 <ReinH> merijn: has edwardk talked about the relationship between DList and monoid actions?
15:56:58 <rs0> it seems like all the Haskell libraries that people actually use require a zillion non-standard type system extensions like GADTs, MPTCs, fundeps, and rank N polymorphism--why is this?
15:57:11 <KangaAkale> that is what I am using
15:57:18 <merijn> rs0: Because they're really convenient and powerful?
15:57:22 <ReinH> ah, decodeByName, I see.
15:57:38 <KangaAkale> instance FromNamedRecord MatchDay where     parseNamedRecord r = MatchDay <$>
15:57:40 <ReinH> KangaAkale: then in the Right case, you need to write `v' to the database?
15:57:50 <merijn> rs0: Also, GHC is very conservative, unlike, say, gcc, GHC defaults to confirming to the report pretty strictly, but the report is fairly conservative
15:57:51 <rs0> merijn: is it realistically possible to build Haskell software without them? why haven't they been standardized yet?
15:57:59 <KangaAkale> yes
15:58:15 <merijn> rs0: Is it possible? Yes. Should you? Probably not worth trying too hard to avoid them.
15:58:35 <KangaAkale> but it is not all the record in the csv file i want to write to db
15:58:38 <ReinH> rs0: The Haskell standard updates very slowly. GHC updates much more quickly.
15:58:42 <merijn> rs0: As far as "why haven't they been standardised", the committee is pretty conservative
15:58:42 <KangaAkale> just a few
15:59:05 <merijn> rs0: Most (like 95%) of the extensions are really stable and "standardised" in that they won't change
15:59:06 <KangaAkale> i mean all the rows but not all the column
15:59:31 <rs0> are there any common extensions, or combinations of extensions, that render the type system undecidable or unsound?
15:59:42 <ReinH> rs0: To give you some idea, the most recent Haskell standards are from 1998 and 2010...
15:59:46 <merijn> rs0: undecidable yes, see UndecidableInstances
16:00:17 <rs0> merijn: heh, yeah, that one seemed pretty clear, but i think i heard about a combination of two extensions that allows you to implement unsafeCoerce
16:00:26 <merijn> rs0: Also, RankNTypes costs you type inference, inferring RankNTypes is undecidable
16:00:56 * hackagebot diagrams-rasterific 0.1.0.5 - Rasterific backend for diagrams.  http://hackage.haskell.org/package/diagrams-rasterific-0.1.0.5 (jeffreyrosenbluth)
16:00:58 <rs0> merijn: that's interesting, because putting a type signature on a let block requires another nonstandard extension...
16:00:58 <merijn> rs0: Yeah, GADTs + GeneralizedNewtypeDeriving can let you implement unsafeCoerce, but that takes some pretty willfull effort
16:01:09 <jfischoff> merijn: still?
16:01:17 <merijn> jfischoff: Not entirely sure
16:01:18 <rs0> merijn: that's nuts. is there a paper on that or something?
16:01:18 <KangaAkale> ReinH: do you get me now?
16:01:40 <merijn> rs0: Type signatures on let need an extension? I think you may be confused?
16:01:52 <shachaf> merijn: Haskell 2010 isn't inferrable either. :-)
16:02:04 <rs0> merijn: i'm just being unclear. if you define a function in a 'let' block, you can't put an explicit signature on it without an additional LANGUAGE pragma
16:02:15 <ReinH> KangaAkale: Yes. You read csv into a vector of elements of type A. You want to write some of the data from ach element to the database.
16:02:19 <glguy> Poly recursion?
16:02:30 <merijn> rs0: Yes you can
16:02:32 <rs0> merijn: or maybe i'm thinking of 'where' clauses. or maybe both
16:02:32 <shachaf> glguy: Yes.
16:02:35 <exio4> shachaf, what things more than polymorphic recursion can affect the "inferability" of HS2010?
16:02:39 <jfischoff> merijn:  Did you mean GADTs or TypeFamilies and GeneralizedNewtypeDeriving? I’m unaware of GADT issue
16:02:43 <KangaAkale> yes thank u
16:02:47 <shachaf> It's just polymorphic recursion, I think.
16:02:51 <merijn> rs0: You can add signatures on both let and where clauses without extensions
16:02:57 <KangaAkale> using a function
16:03:31 <merijn> rs0: Oh, there's one weird case where your local function depends on a type in the top level function which requires ScopedTypeVariables, yes
16:03:37 <merijn> rs0: But that's not the common case
16:03:42 <ReinH> KangaAkale: Let's say you are reading elements from the CSV file of type A. Write a datatype called A' that contains just the elements that you want to write to the database. Then write a function to convert between them: convertAtoA' :: A -> A'. Then write a function to write data of type A' to the database. Then convert each element and write it to the database.
16:03:50 <ReinH> KangaAkale: (Obviously you should use better names than A and A')
16:04:17 <rs0> merijn: okay, ScopedTypeVariables, that sounds familiar. i'm probably thinking of that
16:04:20 <merijn> rs0: Actually, the unsafeCoerce using GADTs + GeneralizedNewtypeDeriving seems to rely on a custom Typeable instance, which are no longer possible in GHC
16:04:41 <merijn> rs0: The problem is that type variables in local functions are *not* the same as in the top level
16:04:42 <shachaf> merijn: ?
16:05:02 <ReinH> rs0: Note that this is from 2010: https://www.haskell.org/pipermail/haskell-cafe/2010-March/074305.html
16:05:06 <merijn> rs0: So if you have "a -> a -> Bool" and you have a local function that takes the same input type as the top level you can't write that
16:05:18 <rs0> merijn: i understand, it's just been a while since i've done it
16:05:20 <shachaf> merijn: You don't need Typeable for (old) GeneralizedNewtypeDeriving to break.
16:05:23 <ReinH> Also I really wish the post had been titled "GeneralizedNewtypeDeriving considered harmful" but what can you do
16:05:34 <merijn> shachaf: No?
16:05:45 <shachaf> No.
16:05:54 <shachaf> You need GADTs or TypeFamilies or something like that, though.
16:06:02 <shachaf> RankNTypes + GeneralizedNewtypeDeriving is fine.
16:06:05 <ReinH> GADTs :(
16:06:12 <shachaf> I proclaim GADTs unsafe.
16:06:17 <jfischoff> I?
16:06:17 <ReinH> Also annoying to reason about
16:06:25 <KangaAkale> ReinH: Write a datatype called A' that contains just the elements that you want to write to the database.
16:06:25 <jfischoff> what? GADTs?
16:06:31 <merijn> shachaf: I was talking about GADTs + GeneralizedNewtypeDeriving
16:06:37 <jfischoff> ReinH: how so?
16:06:41 <KangaAkale> I havedone this
16:06:45 <merijn> What?! GADTs are lovely :(
16:06:53 <shachaf> GHC's GADTs + (old) GeneralizedNewtypeDeriving is unsafe.
16:07:05 <shachaf> But that's partly due to some details of how GHC implements GADTs.
16:07:14 <merijn> What's the "new" GeneralizedNewtypeDeriving? If there is one...
16:07:15 <shachaf> Which also makes it incompatible with HoTT, I think.
16:07:22 <shachaf> (Not that anyone cares about that.)
16:07:24 <ReinH> IIRC they screw up some nice categorical properties of Hask, like "every polymorphic function is a natural transformation"
16:07:51 <prinsen> I didn't get the PM about ECMA262, please write here
16:08:07 <jfischoff> ReinH: well … Hask was never that nice ;)
16:08:36 <jfischoff> seq, bottom, I’m sure there are other issues.
16:08:46 <shachaf> GADTs are just syntax.
16:08:51 <jfischoff> yes
16:08:59 <jfischoff> Nice syntax
16:09:00 <ReinH> KangaAkale: then you have your vector of A, so you V.forM_ as (\a -> writeA'toDB (convertAtoA' a)
16:09:01 <mhl> What's the good way of handling non-existent file?
16:09:06 <achudnov> Hi again, prinsen
16:09:27 <achudnov> Do you need any more clarification re: my e-mail?
16:09:31 <jfischoff> Type equality + existentials is the heart of GADTs
16:09:33 <ReinH> jfischoff: platonic hask is relatively nice...
16:09:48 <shachaf> GADTs = equality constraints + existential quantification + "constraints" in data types
16:09:53 <ReinH>  KangaAkale (I'm missing a ")" there)
16:10:04 <jfischoff> yeah I equality constraints
16:10:06 <shachaf> GHC's implementation of equality constraints is the problem.
16:10:06 <jfischoff> I meant
16:11:30 <Chathurga> mhl: Depends on the context I guess
16:11:50 <Jello_Raptor> hmm, I don't think I understand the reader monad. Does it just make it easier to chain a bunch of unchanging data through a computation?
16:12:02 <Chathurga> I'd have the function return an Either, personally
16:12:02 <ReinH> Jello_Raptor: Yep.
16:12:06 <prinsen> achudnov: Hi
16:12:14 <matematikaadit> So, seeing the definition of "Data.Function.on" as "(.*.) `on` f = \x y -> f x .*. f y", I came to realize that you could use something like (.*.) in function definition.
16:12:35 <prinsen> achudnov: Im reading your eamil atm, horribe connection so might be gone for short periods of time
16:12:55 <achudnov> prinsen: it's okay, I have stuff to do in the mean time.
16:13:16 <jfischoff> Jello_Raptor: the reader by itself isn’t necessarily easier, but it can be if you already in monadic context like IO
16:13:32 <ReinH> Jello_Raptor: Reader usually gets used in its monad transformer version, ReaderT, I think.
16:14:35 <Jello_Raptor> hmm, could I chain a ReaderT with a StateT and use Control.Lens to manipulate them without having to lift actions into the right monad?
16:14:57 <ReinH> Jello_Raptor: If you have a function foo :: a -> b, you can turn it into a function foo' :: Reader a b and then use do notation and ask to get at the `a'.
16:15:03 <mhl> Chathurga: What I want to do is to create default file when it's not already created.
16:15:04 <prinsen> achudnov: in Language.JavaScript, cant you just modify runJavaScript to do the inspection you need?
16:15:38 <ReinH> :t view
16:15:39 <lambdabot> MonadReader s m => Getting a s a -> m a
16:16:05 <ReinH> Jello_Raptor: with mtl, view will work on any MonadReader, so you can use it with ReaderT
16:16:12 <prinsen> achudnov: initialState is the "starting memory" and just exchange (interpret ast) with a do block that first interprets the ast and then inspects the memory
16:16:28 <ReinH> :t (.=)
16:16:29 <lambdabot> MonadState s m => ASetter s s a b -> b -> m ()
16:16:31 <jfischoff> Jello_Raptor: mtl is more important here than lens
16:16:35 <ReinH> Meanwhile, (.=) and friends will work with any MonadState
16:16:57 <achudnov> prinsen: yes, I see. It's going to have to be a variation on runJavaScriptT, actually
16:17:38 <achudnov> prinsen: It looks like it should be easy to do what I want
16:17:38 <jfischoff> lens is one way to work with mtl typeclasses, but not the most direct way.
16:17:47 <ReinH> Jello_Raptor: so if you have a ReaderT (a,b) IO (), you can say things like do { a <- view _1; print a }
16:18:10 <KangaAkale> :ReinH: I have this let csvData <- BL.readFile "result.csv"         case decodeByName csvData of           Left err -> putStrLn err           Right (_, v) -> V.forM_ v $ \ p ->
16:18:22 <achudnov> prinsen: and, I think, that answers my earlier questions.
16:18:25 <ReinH> ofc you can also just use `asks fst' instead
16:18:45 <KangaAkale> but it gives me error : MatchTypes.hs:66:13: parse error on input ‘<-’
16:19:17 <ReinH> KangaAkale: We would need to see the actual code and the actual error.
16:20:10 <KangaAkale> ReinH: http://lpaste.net/5327609452663144448
16:20:20 <KangaAkale> that's it
16:21:24 <ReinH> KangaAkale: let csvData <- BL.readFile "result.csv" is not valid at the top level. You should read something like Learn You a Haskell that explains Haskell syntax.
16:27:45 <Jello_Raptor> as in, could I use a "ReaderT a StateT b" with lenses to get data, without having to "lift (use $ b.foo)" to get things out of the state monad
16:28:07 <Jello_Raptor> since they both are instances of MonadState, I'd guess not
16:29:18 <jfischoff> only StateT is an instance of MonadState
16:29:40 <jfischoff> well, there is an instance for ReaderT, but it calls into the StateT
16:29:55 <benzrf> Jello_Raptor: yes, i tshould work as xpected
16:29:56 <jfischoff> any way it will work
16:31:09 <hyPiRion> Hrm. How would you model a perfect binary tree in haskell? "data PerfectTree a = Leaf | Node (PerfectTree a) a (PerfectTree a)" is unable to capture that both subtrees are of same height. I know it's possible with dependent types, just wondering how I should do it in Haskell
16:31:30 <KangaAkale> ReinH: Please how can i resolve this
16:31:42 <achudnov> prinsen: do you have any questions about language-ecmascript so far?
16:31:43 <shachaf> hyPiRion: data Tree a = Leaf a | Branch (Tree (a,a))
16:31:59 <ReinH> KangaAkale: you should learn basic Haskell syntax.
16:32:10 <ReinH> `let' is not valid at the top level.
16:32:41 <ReinH> Jello_Raptor: you don't need to lift when you use the typeclasses from mtl
16:33:00 <conal> hyPiRion: in addition to shachaf's answer, you can index the tree type by depth as a type-level natural number.
16:33:12 <ReinH> conal: hi!
16:33:18 <conal> ReinH: hi!
16:33:34 <ReinH> conal: btw we should finish editing this week... sorry for the delay
16:33:51 <hyPiRion> conal: yeah, that's the dependent type solution.
16:33:56 <conal> ReinH: cool. don't worry about it. i had no timing expectations.
16:34:03 <ReinH> conal: :)
16:34:06 <conal> hyPiRion: yep
16:34:39 <conal> hyPiRion: ... which you can do in haskell. i use that type regularly.
16:35:32 <shachaf> You can do it without depdendent types.
16:35:44 <shachaf> Which is useful, since Haskell doesn't have dependent types.
16:35:48 <ReinH> :)
16:36:02 <hyPiRion> shachaf: Hrm. How would I create a function to access the leftmost value in that tree?
16:36:18 <hyPiRion> that tree datatype*
16:36:47 <shachaf> hyPiRion: Yes, writing code for this data type is tricky.
16:37:01 <conal> hyPiRion: pass in a function that extract what you want from leaf values. alter the function in the recursive call.
16:39:01 <shachaf> You can also write leftmost :: T a -> a; leftmost (L x) = x; leftmost (B t) = leftmost (fmap fst t)
16:39:11 <shachaf> But of course the Functor instance will use conal's trick.
16:39:20 <shachaf> (Implicitly, via the type class dispatch mechanism.)
16:39:45 <shachaf> I wrote about it once at http://stackoverflow.com/a/13703013
16:40:17 <shachaf> The structure of the recursion mirrors the structure of the type. But since your type is unusual, your recursion comes out unusual.
16:41:18 <hyPiRion> shachaf: alright, I'll have a look into that answer
16:43:12 <achudnov> prinsen: alright, I have to go now. Was good chatting. Shoot me an e-mail if you have any more questions.
16:44:22 <conal> hyPiRion: you can see some examples in LTree.hs and RTree.hs at https://github.com/conal/circat/tree/master/src/Circat . They're variants of depth-indexed trees.
16:44:57 <KangaAkale> hi
16:45:19 <KangaAkale> got challenge with Haskell who can assist?
16:45:53 <hyPiRion> conal: alright, thanks.
16:46:02 <Guest16129> @pl ps v l = map fst (filter ((\x -> snd x < v)) (zip [0..] l))
16:46:02 <lambdabot> ps = (map fst .) . (. zip [0..]) . filter . flip ((<) . snd)
16:46:09 <conal> hyPiRion: you bet. good luck.
16:46:21 <Cale> KangaAkale: Generally in a channel with ~1400 users connected to it, probably someone, but it's hard to know if you can help with a problem when you don't know what that problem is.
16:46:22 <sw17ch> what’s the preferred method for data streaming now? conduit? something else?
16:46:59 <KangaAkale> Cale:Thanks Cale
16:47:31 <KangaAkale> I am actually new to Haskell and I am working on a project
16:47:49 <KangaAkale> that requires me to do something with haskell
16:48:35 <KangaAkale> what exactly I want is to read a csv file content and save it to data base
16:49:20 <Cale> okay
16:49:33 <shachaf> KangaAkale: In particular, if someone offers to help you and then it turns out that they can't help you, they'll feel bad for not being able to help you and kind of obligated to try because they volunteered without knowing what they're volunteering for, which isn't fun.
16:49:41 <Cale> So you might look up CSV parsers and database bindings on Hackage
16:50:26 <Cale> what kind of database is it?
16:50:40 <KangaAkale> I have done that actually
16:50:48 <KangaAkale> i am using cassava
16:51:03 <KangaAkale> sqlite
16:51:11 <Cale> all right
16:51:51 <KangaAkale> so I have created my data type and istances successfully
16:52:11 <KangaAkale> i can read the file and output the content to console
16:52:42 <KangaAkale> i also have another module that can create databse with tables
16:54:00 <KangaAkale> so what is giving me issues now is how i can read that data and save it to database
16:54:20 <KangaAkale> Cale: do you understand me
16:54:29 <mrenaud__> Random question, is there any reason why Data.Set doesn't have an unfoldr?
16:54:32 <ReinH> KangaAkale: have you fixed your syntax error?
16:54:56 <KangaAkale> ReinH No I have not
16:55:05 <ReinH> KangaAkale: then just ask about that.
16:55:06 <Yuras> hvr: quickest build seems to be broken because of integer-gmp2: undefined reference to `integer_gmp_mpn_import1'
16:55:10 <Yuras> but quick is ok
16:55:44 <ReinH> KangaAkale: Do you still have a `let' at the top level of your Haskell file?
16:55:52 <Cale> KangaAkale: This all seems pretty vague, I don't know what to tell you. What problem are you running into doing this?
16:56:29 <KangaAkale> :ReinH i have removed it totally
16:56:38 <ReinH> KangaAkale: then show us your new code with your new error
16:56:56 <KangaAkale> I dont have any error
16:57:10 <ReinH> You just said you have not fixed your syntax error, so which is it? Do you have a syntax error or not?
16:57:12 <KangaAkale> because I have not wrriten anything yrt
16:57:20 * ReinH sighs
16:57:22 <Yuras> oops, wrong channel
16:58:14 <KangaAkale> ReinH: Maybe u should take it easy on me
16:58:32 <KangaAkale> as i said earlier I am a FRESHER
16:58:43 <shachaf> KangaAkale: You aren't acting in a way that encourages people to want to help you.
16:58:44 <KangaAkale> just learning Haskell
16:58:52 <ReinH> KangaAkale: I have been taking it easy on you for over an hour.
16:58:53 <shachaf> Fortunately for you not everybody here is a grouch like me.
16:58:56 <Luke> do I have to do anything more than implement IsString to get OverloadedStrings to work with my type?
16:59:05 <ReinH> What I want you to do is describe your problem succinctly, which requires zero Haskell ability.
16:59:06 <srhb> Luke: Nope.
16:59:11 <Luke> hmm
16:59:18 <shachaf> But please think about this from other people's perspectives.
16:59:39 <ReinH> KangaAkale: I am not interested in playing a game where I tease the actual problem out of you by playing a game of 20 questions.
16:59:48 <ReinH> If that is what you want to do, you will have to find someone else to help you.
17:00:16 <KangaAkale> ReinH I am faced with a challenge and need help
17:00:25 <ReinH> If you can describe the problem succinctly and precisely, I'm sure lots of people will be interested in helping. This is, after all, a channel whose focus is on helping people.
17:00:55 <ReinH> If you can't describe the problem, you will find it difficult to get help anywhere.
17:01:19 <KangaAkale> ReinH but the way you are going about it is not helping me
17:01:32 <KangaAkale> it is more like you are bullying me
17:01:36 <ReinH> KangaAkale: Then please describe the problem you would like help with.
17:02:21 <KangaAkale> see ReinH i want you to see me like a dummy
17:02:39 <jmct> KangaAkale: I don't think it's fair to say ReinH is bullying anyone. It's just very difficult to help someone when they are being vague
17:02:40 <ReinH> I think that can be arranged.
17:02:56 <KangaAkale> someone that doesnot know haskell at all
17:03:22 <KangaAkale> i am face with a huge task that is why i am trying all i can to fix it
17:03:24 <ReinH> I am not trying to bully anyone. I am just trying to get a problem statement.
17:04:23 <ReinH> It would be helpful for you to describe your goals, the current problem you are having, and what you have already tried to do to solve it. It might be good to put these things in an lpaste if they are difficult to describe in irc.
17:04:55 <KangaAkale> ReinH as I earlier said I have  4 modules in my application
17:04:56 <merijn> I'll just leave this here: http://www.catb.org/esr/faqs/smart-questions.html
17:06:31 <glguy> KangaAkale: It's not going to be productive for you to ask someone to write your program to load a csv file into a database for you. You need to pick out the specific place you're having trouble, show that code (if it exists), and ask for specific help.
17:09:25 <ReinH> merijn: and also: http://stackoverflow.com/help/how-to-ask
17:09:36 <ReinH> merijn: which is perhaps a bit less snarky than ESR ;)
17:09:47 <srhb> ReinH: Impossible!
17:09:49 <srhb> >_>
17:10:01 <ReinH> heh
17:10:33 <KangaAkale> ReinH: Main Module: http://lpaste.net/3591354492165029888   MatchModule: http://lpaste.net/6971632777913434112   MatchTypeModule http://lpaste.net/7682792681101066240  MatchDBModule: http://lpaste.net/4384227947750359040
17:10:45 <ReinH> KangaAkale: I am not interested in reading a bunch of code that has no meaning to me.
17:10:51 <ReinH> KangaAkale: Describe your problem. Don't like me to code.
17:11:00 <ReinH> *link
17:11:25 <KangaAkale> OK
17:11:53 <ReinH> If you need to show code, put it all in a single place and provide enough context that we can understand what that code currently does, what it is supposed to do, and what sort of trouble you are having
17:12:04 <ReinH> And show as little code as possible to describe the problem.
17:12:12 <ReinH> No one wants to read through hundreds of lines of code to find the 2 lines that matter
17:12:46 <ReinH> You will receive more help if you try to make it as easy as possible to help you.
17:12:50 <KangaAkale> :reinH can I ask you a question
17:12:59 <ReinH> Ok.
17:13:21 <KangaAkale> did you understand what I am currentry having challenge with
17:13:28 <ReinH> No. I have no idea.
17:13:32 <ReinH> That is what I am asking you to tell us.
17:13:34 <KangaAkale> ok
17:14:03 <KangaAkale> Please just exercise a little patience to understand
17:14:18 <ReinH> Please exercise a little effort to explain.
17:14:29 <KangaAkale> i will explain again
17:15:02 <KangaAkale> I have created by datatype that parses my csv file
17:15:08 <KangaAkale> is that clear?
17:15:19 <ReinH> I think I understand what you mean. Please go on.
17:15:46 <KangaAkale> if i run it on ghci i can see the content of my csv file
17:15:52 <KangaAkale> is that clear also
17:15:56 <ReinH> I think so
17:16:02 * hackagebot snap-configuration-utilities 0.1.0.0 - Methods to manipulate Configurator objects for Snap & Snaplets  http://hackage.haskell.org/package/snap-configuration-utilities-0.1.0.0 (Retrovertigo)
17:16:43 <KangaAkale> good. i also have a module that i can use to create  database tables
17:16:49 <KangaAkale> is that clear also
17:16:56 <ReinH> I will let you know if something is unclear. Please continue.
17:17:00 <KangaAkale> and it can create tables
17:17:40 <KangaAkale> i have a main class that holds all these together
17:17:58 <KangaAkale> so what i want to achieve is this
17:18:18 <AshyIsMe> KangaAkale: it looks like you're using hdbc-sqlite3, i think the tests are the examples that you are looking for: https://github.com/hdbc/hdbc-sqlite3/tree/master/testsrc
17:18:40 <AshyIsMe> the hackage documentation is pretty limited: https://hackage.haskell.org/package/HDBC-sqlite3-2.3.3.0
17:18:58 <AshyIsMe> so once again this is a case of a haskell library not having very good documentation for a beginner
17:19:02 <jmct> I think the issue is that he can see the content in ghci but not when compiling?
17:19:22 <jmct> excuse me, I assemed KangaAkale is a he, my apologies.
17:19:23 <ReinH> I think the issue is poorly defined and we should let KangaAkale define it for us rather than making assumptions.
17:19:53 <Jello_Raptor> ... I have no idea what I'm doing. http://hastebin.com/misinewoya.hs <- that error makes no sense. I'm trying to make a function that will allow me to append to a value in a map in my state, because I'm autogenerating a tiny bit of C.
17:19:57 <ReinH> There isn't actually a prize for being the first person with an answer btw...
17:20:07 <jmct> ReinH: lies.
17:20:30 <KangaAkale> I want to write a function that  i can invoke from my main module that will read the content of the csv file and insert it into the database table
17:20:41 <ReinH> Jello_Raptor: <insert meme here>?
17:20:44 <Chousuke_> to me it looks like the next step is to define a procedure that takes a database handle and a MatchDay element and put it into a database table
17:20:46 <KangaAkale> that is what I have challge with
17:20:53 <Chousuke_> don't try to do too much at a time
17:20:58 <Jello_Raptor> ReinH: *sigh* <_<
17:21:13 <Jello_Raptor> TL:DR; I can't read the error messages from Control.Lens
17:21:13 <aleksanb_> good evening
17:21:22 <Jello_Raptor> aleksanb_: evening :)
17:21:36 <ReinH> Jello_Raptor: understandable... give me a minute...
17:21:57 <ReinH> KangaAkale: so you have a function for reading the contents of a CSV file. What is its name and type?
17:22:19 <shachaf> Maybe this conversation should be taken to #haskell-overflow.
17:22:20 <AshyIsMe> KangaAkale: this may help you with how to parse a csv file into your own custom data types: https://hackage.haskell.org/package/cassava-0.4.2.0/docs/Data-Csv.html
17:22:25 <shachaf> It's been very long.
17:22:50 <ReinH> shachaf: fine by me
17:22:54 <KangaAkale> No I do not have a function
17:23:17 <Chousuke_> so then when you have a an action that produces MatchDays and an action that puts a MatchDay into a database, you just need to figure out the functions to put these together. then you're done.
17:23:27 <KangaAkale> as i said earlier i was reading it from Ghci (main method)
17:23:41 <ReinH> KangaAkale: how do you parse a CSV file?
17:23:41 <stephen_> I'm using a custom version of a library which needs to be built with safety disabled. I've used sed to remove all safety requirements at the top of each file, and added unsafe flags to the cabal files. When I build from within the package, it builds without error. I then move to my main project directory and call cabal install. It starts building the modified library, but fails, complaining that I've tried to use an unsafe feature. My
17:23:41 <stephen_> project also has safety disabled, which should allow the inclusion of unsafe libraries. Thoughts?
17:24:28 <KangaAkale> I am using cassava library
17:24:56 <PhineasRex> KangaAkale: You might start by writing a function MatchDay -> IO () that runs an SQL query.
17:26:31 <Jello_Raptor> ReinH: take your time :) any help is appreciated
17:26:49 <ReinH> Jello_Raptor: let's break this down into some smaller problems
17:26:59 <AshyIsMe> KangaAkale: the cassava library has some nice simple examples in the repo: https://github.com/tibbe/cassava/tree/master/examples
17:27:01 <KangaAkale> to parse the csv
17:27:08 <ReinH> Jello_Raptor: first of all, take a look at this:
17:27:13 <ReinH> > M.empty & at "foo" . non [] <>~ ["bar"]
17:27:14 <lambdabot>  fromList [("foo",["bar"])]
17:27:23 <AshyIsMe> KangaAkale: you should read through that example code and try playing around with them in a separate folder from your code
17:27:57 <Jello_Raptor> ReinH: what is the 'non []
17:28:01 <Jello_Raptor> doing in there?
17:28:20 <ReinH> Jello_Raptor: You can think of it as providing a default value for a non-existent key.
17:28:32 <JamesJRH> Hi, why doesn't this work...: let f x = x + 0 :: Integral a => a -> a
17:28:38 <JamesJRH> ...yet this does?: let f = (+0) :: Integral a => a -> a
17:30:14 <KangaAkale> AshyIsMe yes that is what i used in parsing the file without the headers
17:30:18 <ReinH>  Jello_Raptor what it really does is https://hackage.haskell.org/package/lens-4.6.0.1/docs/Control-Lens-Iso.html#v:non
17:31:09 <AshyIsMe> KangaAkale: ok so you're next step is you want to put your records into the database using the hdbc-sqlite3 library?
17:31:22 <ReinH> Jello_Raptor: then there's a separate issue: constructing strings representing generated source code is... imprecise.
17:31:35 <KangaAkale> no, I want to do that
17:31:43 <ReinH> Jello_Raptor: pretty printing libraries were, in part, designed to solve this problem.
17:31:52 <AshyIsMe> er, s/you're/your/
17:31:56 <ReinH> Jello_Raptor: so perhaps you want your map to be from names to Doc values (pretty print documents)
17:32:04 <KangaAkale> but i need to have a function that returns the content of the db
17:32:17 <KangaAkale> i mean the csv content
17:32:32 <Jello_Raptor> ReinH: I know, but have you looked at language-c? the AST is very difficult to deal with, and I figure it'll take me less time to make a quick version that just uses strings.
17:33:31 <KangaAkale> because currently i am just outputing to console
17:33:53 <Jello_Raptor> ReinH: oh? I'm not sure how that would help. I thought it amounts to a way to specify indentation levels.
17:34:02 <KangaAkale> so I need to wrap that into a function
17:34:37 <ReinH> Jello_Raptor: Well, in this case, you are adding lines to a string. You could instead add lines to a list of lines and then later join them with `unlines'.
17:34:37 <Chathurga> JamesJRH: the type annotation isn't connected to f
17:34:44 <ReinH> Jello_Raptor: then you can just use <>~ or <>= directly
17:34:50 <Chathurga> It's the type of the right hand side, I think
17:35:03 <KangaAkale> AshyIsMe: hope you understand me
17:35:20 <aleksanb_> Rather full in here :) (psst. could someone help me with what the monad-equivalent of foldl is? i.e. it has to carry state along when reducing the list)
17:35:24 <Jello_Raptor> ReinH: *facepalm*, that's a lot more straightforward.
17:35:51 <ReinH> Jello_Raptor: :)
17:35:54 <JamesJRH> Chathurga: That would make sense, but then how do I correct the precendence? Parentheses don't fix it.
17:35:57 <amatsu> order
17:36:03 <AshyIsMe> KangaAkale: yeah i do, it's a pretty basic question about haskell though, it sounds like you need to work through Learn you a Haskell or cis194: http://www.seas.upenn.edu/~cis194/spring13/index.html
17:36:16 <JamesJRH> precedence*
17:36:23 <merijn> aleksanb_: Are you looking for foldM?
17:36:25 <merijn> :t foldM
17:36:26 <lambdabot> Monad m => (a -> b -> m a) -> a -> [b] -> m a
17:36:36 <ReinH> Jello_Raptor: the key missing piece is providing a default value for missing keys, which is what `non []' does (more or less)
17:36:41 <aleksanb_> yeah that signature looks like something i've been looking for!
17:36:44 <lifter> Is it possible to do a 'ghc-pkg list' and get the list of packages in my sandbox?
17:36:58 <shachaf> "non []" isn't that great.
17:37:02 <shachaf> It requires Eq, for instance.
17:37:16 <merijn> aleksanb_: Also, when you have a vague idea of what type you want, use hoogle and search for it!
17:37:23 <ReinH> shachaf: What would be better?
17:37:24 <KangaAkale> yes i do
17:37:29 <Chathurga> JamesJRH: Someone here knows better than I do but you see that t that suddenly pops up in the error? I think that's it assigning the x a type variable because it can't actually be covered by putting the type annotation where you did
17:37:34 <merijn> @hoogle Momand m => (a -> b -> m a) -> a -> [b] -> m a
17:37:36 <lambdabot> Warning: Unknown class Momand
17:37:36 <lambdabot> Control.Monad foldM :: Monad m => (a -> b -> m a) -> a -> [b] -> m a
17:37:36 <lambdabot> Data.Foldable foldlM :: (Foldable t, Monad m) => (a -> b -> m a) -> a -> t b -> m a
17:37:37 <aleksanb_> merijn: i did!, found a lot of things that were ish equal to that type :)
17:37:41 <KangaAkale> but got deadlines also
17:37:50 <shachaf> anon
17:37:52 <ReinH> merijn: it even corrects typos ;)
17:37:54 <Chathurga> JamesJRH: This works: let f = (\x -> x + 0) :: Integral a => a -> a
17:38:05 <stephen_> Does anyone have suggestions for my issue above?
17:38:15 <KangaAkale> will do that when deadlines are not chasing me
17:38:35 <aleksanb_> thanks btw
17:38:37 <bitemyapp> merijn: may I trouble you with something?
17:38:41 <merijn> bitemyapp: Sure
17:38:46 <shachaf> Or the version of anon that takes a Prism, if that exists.
17:38:46 <ReinH> shachaf: How would anon replace non here?
17:38:49 <bitemyapp> merijn: is there a tool that will tell me *exactly* how an expression reduces in Haskell step-by-step? I want to be certain something I am writing is *exactly* right.
17:39:01 <Jello_Raptor> ReinH: Right, that lets me work without the entire sequence of checks that are otherwise needed
17:39:10 <shachaf> non', that's it.
17:39:14 <ReinH> shachaf: Ah!
17:39:16 <bitemyapp> merijn: I've seen some graph reduction visualization stuff, but I'd like to see what thunks get forced and in what order without error.
17:39:23 <merijn> bitemyapp: I dunno, does "asking Cale" qualify as a tool? :p
17:39:25 <shachaf> anon [] null
17:39:27 <shachaf> Or something like that.
17:39:28 <bitemyapp> merijn: some of this became trickier when GHC started unpacking thunks more eagerly.
17:39:38 <bitemyapp> Int and the like I think.
17:39:55 <merijn> bitemyapp: I don't think such a thing exists, certainly not if you want it to be correct even in the presense of GHC optimisation
17:39:59 <bitemyapp> :sprint changed in behavior.
17:40:05 <bitemyapp> merijn: well, how about idealized non-strictness then?
17:40:05 <ReinH> shachaf: so non' _Empty ?
17:40:07 <merijn> bitemyapp: I think the only way to *reall* see what happens is to inspect the Core
17:40:17 <shachaf> Something like that, yes.
17:40:17 <bitemyapp> merijn: quite right. Thanks.
17:40:27 <ReinH> shachaf: The only one I know how to use is non, so that's my current hammer...
17:40:41 <bitemyapp> merijn: well if you find or hear of anything, please let me know.
17:40:52 <merijn> bitemyapp: I mean, there you avoid all ambiguity entirely
17:41:21 <merijn> bitemyapp: It might be interesting if someone wrote a minimal "Core" evaluator for this, so if you need a new hobby ;)
17:41:55 <shachaf> Then learn how the others work.
17:42:03 <lifter> I started using the pattern synonyms extension and it appears that hlint can't parse my patterns. Is there any way around this?
17:42:08 <ReinH> shachaf: Haven't had a reason till until now...
17:42:14 <ReinH> s/till/to
17:42:18 <Jello_Raptor> ReinH: so then the next question is what do the (Maybe (IxValue ...)) stuff in this means http://hastebin.com/ebocisohim.hs ?
17:42:28 <KangaAkale> `ReinH: are u there?
17:42:42 <ReinH> KangaAkale: Yes.
17:42:50 <ReinH> Jello_Raptor: unsure. Maybe shachaf could answer that.
17:43:43 <JamesJRH> Chathurga: Thanks. Also, why doesn't this work?: let f x = (x :: Integral a => a) + 0
17:43:43 <merijn> lifter: I don't think so, other than either patching hlint/waiting for it to be patched
17:43:53 <ReinH> Jello_Raptor: I still find a lot of the lens type errors inscrutable too...
17:43:57 <lifter> merijn: Right. Thanks
17:44:10 <lifter> merijn: I've really come to rely upon hlin :)
17:44:17 <ReinH> lifter: There are a few syntax extensions that hlint can't handle iirc. :(
17:44:22 <merijn> lifter: Pattern Synonyms are fairly new, since they've only been around since 7.8.
17:44:28 <ReinH> Can it handle LambdaCase now?
17:44:31 <lifter> Yes they are quite new
17:44:43 <lifter> ReinH: I use LambdaCase and it's never barfed on it
17:44:47 <ReinH> Nice.
17:44:51 <shachaf> Jello_Raptor: There are a bunch of issues there.
17:45:05 <ReinH> Maybe it was something else that couldn't handle LambdaCase. src-exts?
17:45:05 <lifter> ReinH: Lately I've gotten deep into using a variety of extensions
17:45:13 <Jello_Raptor> shachaf: mhmm
17:45:14 * ReinH shrugs
17:45:19 <merijn> lifter: Give in to the darkside of -XKitchenSink ! ;)
17:45:28 <shachaf> Jello_Raptor: Look at the type of <>= carefully. l <>= x means l %= (<> x)
17:45:29 <codehero> found something just now http://www.codingame.com/
17:45:29 <lifter> merijn: Hehe yep
17:45:35 <codehero> looks like fun
17:45:50 <shachaf> Jello_Raptor: Also, you're not doing this non business for the bar case.
17:46:23 <lifter> merijn: wait that is a real thing
17:46:24 <lifter> ?
17:46:26 <shachaf> <>= is more or less a bad function because it appends on the inefficient end. Better to use %= (x <>) whenever you can.
17:46:33 <Jello_Raptor> shachaf: testing to see how the error messages would be different :p
17:46:37 <merijn> lifter: No :p
17:46:46 <shachaf> Jello_Raptor: Read the thing I said above.
17:46:54 <merijn> lifter: I wish it was, it'd safe me 10 lines of pragmas in files ;)
17:46:58 <shachaf> You're trying to append a string to a list of strings.
17:47:12 <ReinH> merijn: your editor doesn't insert a template with all of those extensions? :p
17:47:13 <Chathurga> JamesJRH: I don't know. Can anyone answer his q? I'd like to know
17:47:22 <Chathurga> Why doesn't let f x = (x :: Integral a => a) + 0 work in ghci
17:47:30 <Jello_Raptor> shachaf: mhmm is (<>) defined in Control.Lens somewhere? Hoogle points me to some prettyPrint and QuaziQuotes stuff
17:47:40 <ReinH> Jello_Raptor: <> is from Data.Monoid
17:47:54 <ReinH> JamesJRH: what is the error?
17:48:03 <lifter> Even cabal doesn't seem to know about Pattern Synonyms (yet?)
17:48:09 <ReinH> Jello_Raptor: for lists it is defined as (++)
17:48:15 <shachaf> Chathurga: Because you don't get to pick what type x is.
17:48:19 <shachaf> has
17:48:27 <Jello_Raptor> ReinH: ahh, thank you
17:48:50 <merijn> Jello_Raptor: <> is infix mappend :)
17:48:50 <shachaf> Chathurga: It'll help you to write out what type you think f has.
17:49:09 <shachaf> It can be made to type-check with rank-n types, but it probably isn't going to do what you want.
17:49:18 <AshyIsMe> KangaAkale: in this channel we are enthusiastic about teaching people how to fish for themselves, but you're basically asking us to catch a fish for you because you're on a deadline too short to learn for yourself
17:49:48 <AshyIsMe> KangaAkale: in which case, im sure there's a few people here who are willing to offer their professional services for their normal fee :)
17:50:21 <Jello_Raptor> merijn: ahh, hmm. so shouldn't (IxValue (Map String [String])) and String be the same thing?
17:50:41 <Jello_Raptor> err shachaf ^
17:51:13 <shachaf> Jello_Raptor: Why?
17:52:29 <glguy> Jello_Raptor: Those aren't the same, try this in GHCi,   :kind! IxValue (Map String [String])
17:52:49 <shachaf> Jello_Raptor: <shachaf> You're trying to append a string to a list of strings.
17:54:13 <Jello_Raptor> glguy: they both have a kind of *
17:54:27 <glguy> and one is [[Char]]  , aka  [String]
17:54:33 <shachaf> But look at the rest of the output.
17:55:49 <Jello_Raptor> shachaf: oh ... right <> :: a -> a -> a
17:56:13 <orion> If someone's library exports a Foo type, and your library needs to use the Foo type and provide its own type with the same semantics but under a different name, is it appropriate to use a newtype?
17:56:47 <merijn> orion: Sure?
17:57:23 <jasonkuhrt_> Hi, when I try to build my project like so:
17:57:23 <jasonkuhrt_> cabal install -j --enable-tests
17:57:26 <JamesJRH> ReinH: http://lpaste.net/115927
17:57:31 <jasonkuhrt_> I get error: cannot satisfy -package-id mysketch-0.1.0.0-inplace
17:57:32 <KangaAkale> ReinH: written this readCsv:: String -> MatchDay readCsv fileName =  do csvData <- BL.readFile fileName     case decodeByName csvData of         Left err -> putStrLn err         Right (_, v) -> V.forM_ v $ \ p ->          return p
17:57:37 <KangaAkale> is it ok
17:57:41 <Jello_Raptor> glguy: Ahh, so IxValue refers to the type of the values that are indexed *over* rather than the type of the index?
17:57:55 <jasonkuhrt_> I've never built a Haskell project before, any advice?
17:57:56 <glguy> Jello_Raptor: Yes, the one for the index is Index
17:58:00 <JamesJRH> (Chathurga: ^)
17:58:56 <Jello_Raptor> glguy: thank you :)
17:59:16 <ReinH> KangaAkale: You tell me. Does it compile?
17:59:33 <Jello_Raptor> shachaf, ReinH : Thank you both :)
18:00:15 <orion> merijn: I'm spinning my wheels trying to understand how to achieve what I want to achieve.
18:00:25 <orion> And I am struggling to find the right question to ask.
18:00:53 <ReinH> orion: that seems like a exemplary use of newtype to me
18:01:24 <JamesJRH> What is the purpose of the channel field at Lpaste?
18:01:38 <ReinH> orion: Well, the most common use of newtype is probably to provide different typeclass implementations
18:01:43 <MP2E> JamesJRH: a bot can post your snippet for you
18:01:53 <MP2E> a link to your snippet, rather.
18:01:57 <orion> ReinH: As part of a type family?
18:02:23 <ReinH> orion: nope. Look at Endo, First, Last, Sum, Product, etc
18:02:26 <JamesJRH> MP2E: That's what I thought but then why didn't I see it?
18:02:28 <KangaAkale> ReinH no it does not
18:02:38 <ReinH> KangaAkale: Then why did you ask me if it was ok?
18:02:48 <KangaAkale> complains of this arse error on input ‘case’
18:03:26 <KangaAkale> wanted to confirm if i wrote the function correctly
18:03:37 <ReinH> The compiler is confirming that you did not.
18:03:53 <MP2E> JamesJRH: did you click public? If you did, I'm not quite sure..
18:04:01 <JamesJRH> Yes.
18:04:04 <MP2E> hmm
18:04:07 <MP2E> weird
18:04:52 <lpaste> MP2E pasted “Bot Test” at http://lpaste.net/115928
18:05:00 <MP2E> worked that time
18:05:15 <JamesJRH> Hmm, strange.
18:05:53 <ReinH> KangaAkale: you need to stop, go back, and relearn the *basics*. Syntax. Indentation.
18:06:38 <ReinH> KangaAkale: Learn how to write *basic* haskell programs without parse errors, type errors, or other compile errors. Then worry about how to read CSV and write to a database.
18:06:42 <glguy> JamesJRH: You can't put that typesignature where you did because at that point in your program x has a particular type bound at the definition of f, it doesn't have type (forall a. Integral a => a)
18:07:00 <ReinH> We can help you with *specific* errors that you encounter. We are not a resource for writing programs for you.
18:07:15 <glguy> It has a particular type. If you want you can annotate the function 'f' with a type like:  Integral a => a -> a
18:07:52 <Welkin> JamesJRH: you can't hack something together and "hope it works" with haskell
18:08:11 <Welkin> you need to understand the types first
18:08:18 <KangaAkale> Just take a look at the code and check if it is ok
18:08:20 <Welkin> start by writing your type signatures before anything else
18:08:35 <KangaAkale> indentation is something else
18:08:39 <ReinH> KangaAkale: The compiler is telling you that it is not OK. You don't need to ask me.
18:09:00 <ReinH> I am not going to disagree with the compiler.
18:09:04 <AncientPC> How do I run a pure function over all stdin lines? main = do forM_ doStuff <???>
18:09:25 <ReinH> AncientPC: let's say you did run a pure function. Since pure functions can't perform IO, what would be the purpose?
18:09:36 <merijn> AncientPC: The easiest way is using
18:09:38 <merijn> :t interact
18:09:39 <lambdabot> (String -> String) -> IO ()
18:09:59 <ReinH> AncientPC: do you want to run a pure function and then output the value given by that pure function?
18:10:12 <AncientPC> ReinH: yes
18:10:25 <ReinH> AncientPC: then look at `interact' as merijn suggests
18:10:43 <AncientPC> k thx
18:10:49 <Luke> http://lpaste.net/115929 anyone know what the issue is here w/ UTCTime Show instance?
18:11:04 <glguy> The instance is defined in a localization module
18:11:19 <glguy> Did you define your own?
18:11:32 <ReinH> Welkin: Well, you can kind of hack something together and hope it works *once you figure out the types*... ;)
18:11:53 <ReinH> I do this quite often...
18:12:11 <Welkin> yes, I let the compiler find my errors and then systematically fix them until there are no more errors
18:12:17 <exio4> when you figure out the types, writing the program is really easier
18:12:31 <exio4> easy*
18:12:52 <Luke> glguy: no I don't think I defined my own...
18:12:53 <ReinH> It really is important to figure out the type *first* and then write the function.
18:13:04 <ReinH> Haskell is so much easier when you do this
18:13:40 <Luke> glguy: resaved all my buffers and now it's fine... must have had some artifacts somewhere
18:13:41 <ReinH> exio4: sometimes it literally writes itself...
18:14:10 <Welkin> I remember the first time I wrote some function and they worked perfectly the first time they ran -- no errors
18:14:27 <Welkin> and that was with netwire using arrow-do-notation
18:14:32 <Welkin> it surprised me
18:14:37 <ReinH> haha
18:14:42 <Welkin> it was because I wrote the types first
18:14:49 <Welkin> I wrote it all on paper actually
18:14:54 <Welkin> then copied it into my editor
18:15:30 <AncientPC> ReinH: Actually now that I'm thinking about it, I want to do a foldl' on all of stdin and pass the result to another function that formats the output correctly. (stdin can be infinitely long so I want to do stream processing.)
18:15:43 <AncientPC> Is there a way to treat stdin as a list of strings?
18:15:50 <merijn> :t lines
18:15:50 <lambdabot> String -> [String]
18:16:17 <JamesJRH> MP2E: I have a theory that the bot assumes that the author's name is also their IRC nick and checks for it in the channel as a spam prevention technique, and as I put my name, James Haigh, in the ‘Author’ field, my paste therefore didn't get posted here automatically by lpaste.
18:16:41 <ReinH> AncientPC: this seems like a good excuse to learn conduit...
18:16:45 <MP2E> Ah
18:16:47 <Welkin> conduit is nice
18:16:47 <MP2E> that makes sense
18:16:52 <ReinH> Conduit provides simple folds
18:16:54 <MP2E> my Author field is 'MP2E'
18:16:57 <ReinH> that operate in constant space
18:17:14 <ReinH> and are pretty similar to the ones from Foldable
18:17:15 <AncientPC> Ahh ok, I've been meaning to learn Conduit for a while. This gives me the perfect excuse.
18:17:49 <Welkin> https://www.fpcomplete.com/user/snoyberg/library-documentation/conduit-overview
18:17:57 <Welkin> I used that
18:17:57 <ReinH> AncientPC: http://hackage.haskell.org/package/conduit-1.2.3/docs/Data-Conduit-List.html#v:fold
18:19:31 <AncientPC> thx ReinH!
18:19:42 <ReinH> AncientPC: np! conduit is fun.
18:21:37 <AncientPC> ahh, cabal hell... time to learn about cabal sandboxes
18:21:44 <AncientPC> yakshaving all day long :p
18:21:49 <ReinH> heh
18:21:50 <lpaste> JamesJRH pasted “So, in this case the ‘Author’ field should be renamed to ‘IRC nick’.” at http://lpaste.net/115930
18:22:07 <JamesJRH> :-)
18:25:39 <JamesJRH> MP2E: Do you know who runs Lpaste?
18:26:27 <Welkin> it's at the bottom of the page in the footer
18:26:43 <geekosaur> also the Contact link at top right
18:26:50 <Welkin> it's chrisdone
18:27:09 <JamesJRH> Ah, indeed.
18:31:40 <benzrf> c-conduit?
18:31:43 <benzrf> w-why not pipes?
18:32:51 <merijn> benzrf: Keep fighting the good fight ;)
18:35:50 <AncientPC> Why use a gun when you can use a tank?
18:37:18 <lifter> I'm trying to use "StandaloneDeriving" to derive an instance of Show for TQueue, but GHC tells me: "The data constructors of ‘TQueue’ are not all in scope". Is there any way around this?
18:37:58 <lifter> I'm guessing not.
18:38:08 <merijn> lifter: You can only standalone derive for types that export all constructors
18:38:14 <lifter> Ok.
18:38:20 <lifter> Thanks!
18:38:33 <merijn> lifter: Also, even if TQueue did it would still not work, how would show on a mutable variable work?
18:38:50 <lifter> I dunno, I just want it to derive! :)
18:38:51 <srhb> Does anyone know if it's possible to register a custom cabal package with nixpkgs and how to do so?
18:39:14 <ReinH> somethings something yo dawg, something something derive while you derive...
18:39:30 <ReinH> Oh. Of course. We put a type in your type so you can derive while you derive.
18:41:01 <Luke> glguy: http://lpaste.net/115932 same problem again...
18:41:06 <Luke> put the whole file in there this time
18:41:14 <Luke> anyone else who wants to help please do =)
18:44:51 <glguy> Luke: That's the opposite problem, I think. No instance
18:44:58 <glguy> The instance is orphaned in a LocalTime module
18:45:32 <Luke> import           Data.Time.Clock (getCurrentTime) should import the show instance for UTCTime
18:45:50 <yegortimoschenko> Luke: you could use getClockTime from SystemTime or getZonedTime from Data.Time instead
18:46:13 <Luke> yegortimoschenko: what's the benefit of doing that?
18:46:25 <yegortimoschenko> Luke: your programm will compile
18:46:32 <Luke> why isn't it compiling now?
18:47:45 <yegortimoschenko> my guess is that UTCTime is not deriving Show
18:48:20 <Luke> yegortimoschenko: it does
18:48:56 <glguy> Luke: Either import Data.Time () or Data.Time.LocalTime ()
18:48:57 <Luke> yegortimoschenko: http://hackage.haskell.org/package/time-1.5/docs/Data-Time-Clock.html#t:UTCTime
18:49:16 <Luke> glguy: thanks
18:49:34 <Luke> glguy: Data.Time.Clock doesn't re-export UTCTime instances
18:49:34 <Luke> thanks
18:49:51 <glguy> The instance is "orphaned" which means that it's not either in the same module as the one that defines the type or the class
18:50:10 <Luke> weird
18:50:19 <glguy> so you have to go hunting to make sure that the right module is at least transitively imported somewhere to get it
18:51:08 * hackagebot text-show 0.4.1 - Efficient conversion of values into Text  http://hackage.haskell.org/package/text-show-0.4.1 (ryanglscott)
18:51:10 * hackagebot hsignal 0.2.6 - Signal processing and EEG data analysis  http://hackage.haskell.org/package/hsignal-0.2.6 (VivianMcPhail)
18:51:10 <JamesJRH> 02:03:51 < glguy> JamesJRH: You can't put that typesignature where you did because at that point in your program x has a particular type bound at the definition of f, it doesn't have type (forall a. Integral a => a)
18:51:15 <JamesJRH> ↑ Okay, but then where *can* I put it within GHCi? (Well, actually Chathurga has already suggested ‘let f = (\x -> x + 0) :: Integral a => a -> a’ which is useful, but I'm curious as to whether there's a way without using an anonymous function.)
18:51:19 <Luke> glguy: it's defined in Data.Time.Clock.UTC - weird that it doesn't re-export from Data.Time.Clock
18:51:40 <glguy> The instance isn't defined there, only the type
18:52:01 <merijn> JamesJRH: I would recommend not defining functions in ghci
18:52:02 <glguy> JamesJRH: You could write:   let f :: Integral a => a -> a; f x = x + 0
18:52:09 <merijn> JamesJRH: Just edit a file and load it into ghci instead
18:52:14 <glguy> but better than that you can write them in a file like merijn says
18:52:38 <JamesJRH> glguy: Aah, thank you.
18:52:51 <JamesJRH> Yes, files are great but that's not the question.
18:52:52 <glguy> and it's a mess, but for completeness you can use the :{ and :} commands to do multi-line stuff
18:53:03 <JamesJRH> Right.
18:53:06 <merijn> JamesJRH: Things like defining multiple function patterns is also tricky inside ghci
18:54:07 <shachaf> whoa, you can write let f (x :: Integral a => a) = x + 0 and GHC infers a funny type for it.
18:54:17 <shachaf> f :: Integral a => (Integral a => a) -> a
18:54:52 <glguy> just shadowing?
18:55:01 <shachaf> It's not shadowing, there's no forall.
18:55:14 <shachaf> It's the same a.
18:55:17 <glguy> the => doesn't hide an implicit one?
18:55:21 <shachaf> Nope.
18:55:28 <glguy> funny, then :)
18:55:57 <shachaf> (How should => know which variables to implicitly forall?)
18:56:24 <shachaf> There is at least one place where => hides an implicit forall, and it's pretty annoying:
18:56:55 <shachaf> "type T = () => a" means "type T = forall a. a"; "type T = a" is an error
18:59:03 <JamesJRH> merijn: Okay, but this is just a quick help to avoid floats (and associated decimal points) when using GHCi interactively as an advanced calculator. So, yes, when my calculations start to surpass the scope of GHCi, I always at that point put it in a file and tidy it up.
19:06:10 * hackagebot tighttp 0.0.0.6 - Tiny and Incrementally-Growing HTTP library  http://hackage.haskell.org/package/tighttp-0.0.0.6 (YoshikuniJujo)
19:07:04 <JamesJRH> 02:49:11 < glguy> JamesJRH: You could write:   let f :: Integral a => a -> a; f x = x + 0  ← Yes, thank you very much for pointing this out, I think this is the best way in general because it also translates directly to how it's done in a file. (Cc. Chathurga; was also interested.)
19:07:37 <shachaf> What glguy wrote is the best way to write it, of course.
19:07:46 <glguy> shachaf++
19:07:53 <shachaf> You could also write let f x = x + (0 :: Integral a => a), since 0 *is* polymorphic.
19:09:27 <glguy> Or:   f x = x`div`1   ^_^
19:10:19 <shachaf> I was thinking maybe you wanted a number other than 0 there.
19:10:38 <shachaf> You could also write f x = (id :: Integral a => a -> a) x
19:16:11 * hackagebot hsignal 0.2.6.1 - Signal processing and EEG data analysis  http://hackage.haskell.org/package/hsignal-0.2.6.1 (VivianMcPhail)
19:17:50 <JamesJRH> 02:05:01 < Welkin> JamesJRH: you can't hack something together and "hope it works" with haskell  ← I know that it didn't work. Trial and error is not hope, it's an important part of learning/improving.
19:17:54 <JamesJRH> 02:05:20 < Welkin> you need to understand the types first  ← Exactly, I need to understand the types before understanding the types. :-D Therefore the types are impossible to gain understanding of or learn. Unfortunately I wasn't born with this understanding. :-P
19:18:00 <JamesJRH> 02:05:29 < Welkin> start by writing your type signatures before anything else  ← This is what I did. I knew that I wanted the type signature to be ‘:: Integral a => a -> a’ and the function (in my original question) is ‘f x = x + 0’ so it was just a question of how to tell that to GHCi. Clearly ‘let f x = x + 0 :: Integral a => a -> a’ was error.
19:18:09 <JamesJRH> Hey, ‘let f x = x + 0; f :: Integral a => a -> a’ also works.
19:19:54 <JamesJRH> shachaf: Right, that was just an unimaginative dummy function. Those don't apply generally like glguy's suggestion does. Though interesting about the polymorphism.
19:21:16 <merijn> JamesJRH: type signatures for definitions can go anywhere in the same scope
19:21:38 <merijn> You could put all type signatures for (top level) functions at the bottom of the file and it'd still work
19:22:04 <merijn> You can even specify multiple type signatures at the same time, i.e. "foo, bar, baz :: Int -> Bool" gives the same type to all three
19:22:06 <JamesJRH> Or the let, yes.
19:22:22 <JamesJRH> I see this now.
19:23:07 <merijn> More people should read the haskell report and learn these things :)
19:23:37 <JamesJRH> I knew about the semicolon but I just didn't make that connection somehow.
19:24:18 <JamesJRH> I think I tried it a while back but maybe with 2 different let's so of course that's a different scope then.
19:24:46 <meditans> hi, I have a quick question on lens library
19:25:25 <meditans> is there a traversal which lets me focus on couples of the type (element, next element)?
19:25:45 <meditans> like, in the case of [1,2,3], it would be [(1,2),(2,3)]
19:26:25 <meditans> I can do this trivially with a zip function, but I would like to know if it exist an idiomatic way
19:27:36 <JamesJRH> shachaf: If that was the actual function that I wanted (and not a dummy example) then I'd have just done this: let f = id :: Integral a => a -> a
19:27:38 <zwer> zip is idiomatic way IMO
19:27:56 <Maera> agreed, zip seems pretty idiomatic to me
19:28:17 <shachaf> JamesJRH: Sure.
19:28:54 <shachaf> meditans: I don't think there is.
19:29:06 <ReinH>  zip`ap`tail, the aztec god of consecutive numbers
19:29:10 <shachaf> That sounds like a problematic traversal because the things it focuses on overlap.
19:29:54 <ReinH> > zip `ap` tail $ [1,2,3]
19:29:55 <lambdabot>  [(1,2),(2,3)]
19:30:11 <ReinH> As a Traversal in the lens sense? I don't think so.
19:30:30 <meditans> zwer Maera shachaf, thanks
19:31:00 <meditans> shachaf: yes, it was for a proof of concept, it's a strange traversal indeed
19:31:20 <prinsen> In arrow notation, I want to write f <<< g -< x. But g returns a Maybe. Is there any function like ?<<
19:31:24 <prinsen> Expected type: a XmlTree XmlTree Actual type: a XmlTree (Maybe XmlTree)
19:31:50 <meditans> ReinH: are there solution for this problem ouside the framework of lens which aren't zip?
19:32:38 <ReinH> Sure, there's "thing that works almost exactly like zip but isn't called zip"
19:33:08 <meditans> ReinH: xd
19:34:48 <benzrf> meditans: you could get a Fold
19:34:51 <benzrf> probably not a traversal
19:34:58 <meditans> the problem for which I was thinking of a more general view was that I could in the future being interested in tuples like (previous, this, next), or (two indexes back, this, three indexes after)
19:35:15 <benzrf> hmm, well
19:36:18 <meditans> benzrf: could you show me an example?
19:36:25 <benzrf> 1 sec i'm thinking...
19:36:41 <benzrf> :t \f -> traverse f . zip <*> tail
19:36:42 <lambdabot> Traversable ((->) [b1]) => ([(a, b1)] -> [a] -> b) -> [a] -> [b1] -> b
19:36:48 <benzrf> woah
19:36:54 <benzrf> :t \f -> traverse f . (zip <*> tail)
19:36:55 <lambdabot> Applicative f => ((b1, b1) -> f b) -> [b1] -> f [b]
19:37:20 <benzrf> i'm not sure if that's law-abiding tho
19:37:33 <benzrf> @let lookbehind f = traverse f . (zip <*> tail)
19:37:35 <lambdabot>  Defined.
19:37:52 <benzrf> > over lookbehind (uncurry (+)) [1, 2, 3]
19:37:55 <lambdabot>  [3,5]
19:38:02 <benzrf> ok yeah that's definitely not law abiding
19:38:07 <ReinH> It changes the size of the traversal
19:38:24 <ReinH> But that's still pretty clever
19:38:47 <benzrf> hmm...
19:41:42 <benzrf> @let lookbehind' f l = traverse f (zip (Nothing:map Just l) l)
19:41:43 <lambdabot>  Defined.
19:42:12 <benzrf> > over lookbehind (uncurry ((+) . fromMaybe 0)) [1, 2, 3]
19:42:14 <lambdabot>  Occurs check: cannot construct the infinite type:
19:42:14 <lambdabot>    b ~ Data.Maybe.Maybe b
19:42:14 <lambdabot>  Expected type: (Data.Maybe.Maybe b, Data.Maybe.Maybe b) -> b
19:42:14 <lambdabot>    Actual type: (Data.Maybe.Maybe b, b) -> b
19:42:17 <benzrf> > over lookbehind' (uncurry ((+) . fromMaybe 0)) [1, 2, 3]
19:42:18 <lambdabot>  [1,3,5]
19:42:21 <benzrf> coo
19:42:33 <benzrf> still have doubts about legality though
19:42:36 <meditans> benzrf: wait a minute, could you explain first the process with lead you to (zip <*> tail), instead of (\a -> zip a (tail a))
19:42:38 <benzrf> what are the traversal laws again?
19:42:44 <benzrf> meditans: because it was used a minute ago
19:42:55 <benzrf> so i was showing how it could be converted into a "traversal"
19:43:08 <meditans> benzrf: ok
19:44:12 <benzrf> @quote `ap`
19:44:13 <lambdabot> quicksilver says: zip`ap`tail the aztec god of consecutive numbers
19:44:39 <prinsen> Someone?
19:44:43 <benzrf> prinsen: ?
19:44:54 <prinsen> In arrow notation, I want to write f <<< g -< x. But g returns a Maybe. Is there any function like ?<<
19:44:57 <prinsen> Expected type: a XmlTree XmlTree Actual type: a XmlTree (Maybe XmlTree)
19:45:10 <meditans> benzrf: I know this is probably a stupid question, but if I have only to apply a function over lookbehind, can I use a loose structure than traversal?
19:45:21 <simpson> prinsen: You can put case analysis into your arrows, IIRC.
19:45:33 <benzrf> meditans: hmm?
19:47:04 <meditans> I mean, over lookbehind f list is not a valid traversal, as we saw, because it changes the lenght.
19:47:30 <shachaf> meditans: If you're only using "over", your thing is a Setter.
19:47:39 <benzrf> meditans: yes but lookbehind' /might/ be
19:47:48 <shachaf> But that doesn't help you mich with the laws.
19:47:55 <meditans> however, I need only to apply some functions on the top of that result, I don't need to change the data
19:48:05 <benzrf> hhm
19:48:16 <shachaf> meditans: Oh, it's read-only?
19:48:17 <benzrf> > lookbehind' pure [1, 2, 3]
19:48:18 <lambdabot>  No instance for (GHC.Show.Show (f0 [(Data.Maybe.Maybe b10, b10)]))
19:48:19 <lambdabot>    arising from a use of ‘M345843135234909430615612.show_M3458431352349094306...
19:48:19 <lambdabot>  The type variables ‘f0’, ‘b10’ are ambiguous
19:48:19 <lambdabot>  Note: there are several potential instances:
19:48:19 <lambdabot>    instance [safe] GHC.Show.Show a =>
19:48:33 <shachaf> benzrf: Please don't lambdabot-spam this channel. :-(
19:48:44 <gcganley> :t lookbehind'
19:48:45 <lambdabot> Applicative f => ((Maybe b1, b1) -> f b) -> [b1] -> f [b]
19:48:48 <shachaf> meditans: If it's read-only then you just need a fold, no problem. Folds don't have laws or anything.
19:49:22 <meditans> shachaf: perfect! so lookbehind is indeed a valid fold
19:49:32 <prinsen> simpson: how?
19:49:36 <benzrf> wait a second..
19:50:03 <shachaf> Every fold is a valid fold, but I wouldn't be happy using an invalid function like that.
19:50:10 <benzrf> oh
19:50:28 <benzrf> :t lookbehind' pure
19:50:29 <lambdabot> Applicative f => [b1] -> f [(Maybe b1, b1)]
19:50:51 <benzrf> that's not the same type as pure, so how can t pure ≡ pure hold?
19:51:39 <shachaf> Hmm, an indexed traversal could be another option, depending on the use case.
19:51:44 <simpson> prinsen: Sorry, a bit busy and rusty, but maybe https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/arrow-notation.html helps
19:51:55 <shachaf> In an indexed traversal each value you focus on has a read-only "index".
19:53:44 <benzrf> any lens ppl here :|
19:54:27 <gcganley> benzrf: is edwardk here?
19:54:33 <benzrf> idk
19:54:37 <shachaf> I am a lens person.
19:54:44 <benzrf> but i feel like this is a p basic question
19:54:47 <c_wraith> benzrf: there's a whole #haskell-lens channel, if you need it
19:54:50 <benzrf> true
19:56:28 <calvinx> new to haskell. what’s the difference between <- and = ?  Aren’t they both assignments?
19:56:47 <c_wraith> calvinx: no, <- would be better described as binding the result of something
19:57:08 <bananagram> binding the result of computing a monad
19:57:09 <calvinx> binding result of something is synonymous to “assignment”, no? :D
19:57:12 <c_wraith> calvinx: where "something" isn't (necessarily) a function
19:57:16 <c_wraith> calvinx: nope!
19:57:24 <merijn> calvinx: Not unless you have a very weird definition of assignment
19:57:31 <zwer> do and <- desugar to >>=
19:57:50 <merijn> calvinx: Most people take it to mean writing a value to a "location", which is not possible in haskell
19:58:01 <zwer> do x <- a; f x   is the same as   a >>= f
19:58:14 <calvinx> x = a ???
19:58:24 <calvinx> I mean, isn’t that saying x = a ? :D
19:58:33 <c_wraith> calvinx: nope.  If they were equal, they'd have the same type
19:58:34 <zwer> no
19:58:43 <c_wraith> calvinx: in x <- a, x and a have different types
19:58:51 <calvinx> Ahhhhhh....
19:58:56 <merijn> calvinx: "x = a" states that the name 'x' is equal to the expression 'a'
19:59:50 <calvinx> so how would I read a line of code that says “((res, form), enctype) <- runFormPost $ lemonadeForm” ?
20:00:11 <c_wraith> I don't read haskell code out loud. :P
20:00:17 <calvinx> *how would I understand in plain english, I mean.
20:00:39 <benzrf> calvinx: don't
20:00:44 <benzrf> calvinx: wait til u know some hs
20:01:02 <benzrf> shachaf: i do
20:01:45 <calvinx> yea, I am on chapter 3 of learn you a haskell for great good...
20:02:03 <calvinx> And cross referencing what I have learnt so far with a Yesod tutorial.
20:02:19 <calvinx> which is where I came across “((res, form), enctype) <- runFormPost $ lemonadeForm"
20:02:44 <merijn> calvinx: Ah, yesod might be a bit challenging if you haven't even finished Learn You a Haskell yet :)
20:02:46 <calvinx> which from my experience in other programming languages, is something like instantiating a custom for and processing it
20:02:58 <calvinx> *custom form
20:03:24 <bitemyapp> calvinx: github.com/bitemyapp/learnhaskell
20:03:51 <calvinx> bind the result of runFormPost infix application on lemondadeForm to the tuple, containing a tuple and a string or somethning
20:04:03 <calvinx> thanks @bitemyapp
20:05:47 <bananagram> calvinx, that sounds about right
20:06:16 <calvinx> ok, it’s not so bad. I just have to break down the meaning of symbols to something I can understand.
20:06:21 <calvinx> thanks bananagram
20:08:28 <calvinx> why would one use $ in the context of “runFormPost $ lemonadeForm” above instead of just stating “runFormPost(lemonadeForm)” ?  Are they not equivalent?
20:08:45 <merijn> calvinx: They are, but many haskellers have parenthesis allergy :)
20:09:06 <ReinH> merijn: not even. The $ can just be removed
20:09:12 <calvinx> hahahaha. OK! I come from the “standard languages” where parenthesis are pretty common…
20:09:12 <jfischoff> yes
20:09:14 <merijn> In this case either are redundant and identical to "runFormPost lemonadeForm"
20:09:15 <LordBrain> one character instead of 2
20:09:35 <ReinH> calvinx: parenthesis are not used to group arguments to a function in Haskell
20:09:39 <calvinx> right. It’s redundant from what I understand about haskell functions.
20:09:40 <jfischoff> @src ($)
20:09:41 <lambdabot> f $ x = f x
20:09:53 <calvinx> yup
20:09:59 <ReinH> So you do not need to say f(a b c), you just say f a b c
20:10:00 <LordBrain> sometimes it can happen from refactoring and so forth
20:10:11 <jfischoff> but what is key is infixr 0
20:10:16 <calvinx> understand what lambdabot is saying but what is jfischoff saying about @src ($) ?
20:10:40 <ReinH> that is the definition of ($)
20:10:42 <srhb> I'm trying to do a one off compilation of an xmonad.hs which includes some hsc stuff. However, when I ghc xmonad.hs, I get an undefined reference. Do I need to pass some flag to ghc to tell it where to find the function?
20:12:01 <ReinH> The @src command asks lambdabot for a definition. (Note that these definitions are entered by hand and sometimes don't correspond exactly to the actual definition)
20:12:21 <ReinH> Sometimes they are simplified for teaching reasons
20:12:37 <bananagram> calvinx: the useful thing about $ is that it has the lowest priority as an operator
20:12:53 <jfischoff> f x y z is parsed as (((f x) y) z) but f x $ y z is parsed as: ($) (f x) (y z)
20:13:08 <jfischoff> I think I got that right
20:13:13 <shachaf> (($) (f x)) (y z)
20:13:20 <jfischoff> yeah
20:13:32 <calvinx> ok. that does clear things up.
20:13:38 <ReinH> You can think of it as wrapping the expressions on either side with parans, so f x $ y z = (f x) (y z)
20:13:39 <calvinx> nice example jfischoff
20:13:49 <ReinH> *parens
20:13:54 <jfischoff> yes
20:14:38 <AncientPC> How do you nest data types with Aeson? e.g. http://lpaste.net/8244504124868001792
20:14:59 <jfischoff> so it can avoid parens: (f x) (y z) (w u) or f x $ y z $ w u
20:15:26 <jfischoff> err f x  (y z) (w u)
20:15:37 <jfischoff> you can remove that first parens
20:15:37 <shachaf> No, that's (f x) ((y z) (w u))
20:15:37 <ReinH> AncientPC: There is no `Gender' data constructor, so Gender <$> doesn't work.
20:15:44 <calvinx> hahaa. ok. I really don’t mind parenthesis… but I guess I have to read a lot of existing code as I learn haskell, so it’s essential for me to understand $. cool.
20:15:49 <jfischoff> shit
20:15:58 <jfischoff> yeah what shachaf said
20:16:19 <jfischoff> yeah (f x) ((y z) (w u)) is more
20:16:25 <calvinx> yup, what shachaf said.
20:16:37 <calvinx> it’s quite clear what $ does now.
20:16:55 <jfischoff> (f x) ((y z) (w u)) or f x $ y z $ wu or just to really confuse the situation f x . y z $ w u
20:16:58 <shachaf> Puzzle: What's "Just $ x + 1 :: Int"?
20:17:10 <jfischoff> which is odd because the types are different
20:17:12 <shachaf> (Answer: A type error.)
20:17:13 <jfischoff> :t (.)
20:17:14 <lambdabot> (b -> c) -> (a -> b) -> a -> c
20:17:19 <jfischoff> :t ($)
20:17:20 <lambdabot> (a -> b) -> a -> b
20:17:21 <shachaf> (OK, that wasn't much of a puzzle.
20:17:49 <shachaf> "f . g $ x" is much nicer than "f $ g $ x", even though they're equal.
20:18:04 <calvinx> f(g(x)) is nicer  :p
20:18:32 <shachaf> "f (g x)" is valid Haskell too.
20:18:39 <shachaf> In fact I prefer it to any of the others.
20:18:40 <tommd> f . g ftw
20:18:51 <Welkin> or
20:18:57 <zwer> f(g(x)) is valid too, but a bit pointless
20:18:57 <Welkin> (f . g) x
20:18:58 <shachaf> But I probably prefer "f . g . h . i . j $ x" to "f (g (h (i (j x))))"
20:19:12 <jfischoff> it really is personally peference
20:19:23 <calvinx> I am a python, golang kind of guy so f(g(x)) is nice :D
20:19:24 <jfischoff> I’ve seen Haskellers use all possible styles
20:19:32 <jfischoff> then stick with it
20:19:39 <jfischoff> its fine
20:19:48 <Welkin> all the extra parens just add noise
20:19:53 <calvinx> it’s interesting to learn how other languages work.
20:20:09 <jfischoff> but just be aware on a team you will have to at least learn to read the other ways ;)
20:20:20 <tommd> Some editors have various types of lenses (or "goggles") for underscore vs camel case.  I wouldn't be surprised to find a lens for function application too.
20:20:23 <calvinx> particularly since I have no prior knowledge about functional programming. It’s quite refreshing I must say.
20:20:27 <exio4> keeping the parens is nice, but it can get a bit cumbersome when you are working "deeply" :P
20:20:33 <Welkin> calvinx: in haskell, a space is function appication
20:20:38 <Welkin> application*
20:20:41 <pyon> Is there any combination of GHC extensions that lets me encode this inductive family? https://gist.github.com/eduardoleon/5ce4340901fecb8a0b15
20:21:00 <calvinx> Welkin: yea, pretty nice.
20:21:06 <calvinx> white spaces are cool too.
20:21:08 <shachaf> Beginners usually use $ too much when they're starting out.
20:21:10 <jfischoff> Anyway it is an interesting puzzle to figure out howthe precedence is difference between 0 vs 9 allows both expressions to parse even though the types are different
20:21:12 <shachaf> Along with type classes and other things.
20:21:19 <Welkin> I never touched type classes
20:21:26 <Welkin> I have still never really used one
20:21:45 <Welkin> er, written my own
20:22:14 <exio4> was going to say you can't actually use haskell much without using some typeclasses heh
20:22:22 <jfischoff> we should get shachaf to explain how type classes select instances ;)
20:23:10 <merijn> jfischoff: I like to think precedence goes up to 11 for consistency :p
20:23:21 <merijn> jfischoff: function application at 10 and record syntax at 11 :)
20:23:28 <jfischoff> oh it does
20:23:28 <zwer> calvinx and since space is a function application, f x y  would really be more like python's  f(x)(y)
20:23:32 <calvinx> In learnyouahaskell for great good, I was introduced to guards and that haskell encourages declarative instead of imperative programming style, in other words, “if-else” and “switch-case” type expressions are discouraged. but interestingly, I see this in yesod tutorials - http://lpaste.net/115936
20:23:37 <jfischoff> I just meant $ is 0 and . is 9
20:23:39 <pyon> Is there any Prelude replacement where Num is divided in more fine-grained type classes?
20:23:51 <pyon> s/divided in/split into/
20:23:58 <jfischoff> and that is true { } beats space
20:24:01 <calvinx> the use of “case” (something like switch statements) ?
20:24:08 <Welkin> pyon, there are other type classes, Integral, Fractional, etc
20:24:41 <jfischoff> calvinx: are you asking how is case different from switch?
20:24:54 <pyon> Welkin: Yeah. But, for example, sometimes I need something that looks awfully like Num, but for which abs does not make sense.
20:25:03 <shachaf> calvinx: Nothing wrong with case-of, and it's certainly not "imperative".
20:25:04 <calvinx> jfischoff: that’s one of the questions, yes.
20:25:24 <shachaf> if-then-else has some things wrong with it but I doubt learnyouahaskell talked about any of them.
20:25:39 <Welkin> calvinx: case statements are just pattern matching
20:25:45 <aspidites> is there a reason that a lot of haskell libraries require an extensive list of imports before you can start using them?
20:25:52 <jfischoff> well but what is pattern matching?
20:26:01 <jfischoff> and why do it?
20:26:04 <Welkin> in fact, all top-level pattern matching is converted into case statements by ghc
20:26:11 <aspidites> I think the noteable exception would be lucid
20:26:12 <zwer> calvinx case is an expression (it returns a value). switch in imperative languages doesn't
20:26:20 <calvinx> I see.
20:26:21 <jfischoff> I can thinking of a motivating example in C
20:26:36 <zwer> it also supports pattern matching
20:27:10 <ReinH> There's nothing particularly imperative about if/else or case/of statements.
20:27:35 <Welkin> if-else statements in haskell are also converted into case statements
20:28:09 <exio4> I would say most of the things that are discouraged at first, is for trying to avoiding "fallbacking" to already-known-ways of writing programs
20:28:11 <merijn> if/else and case/of *expressions* :)
20:28:40 <Welkin> merijn: yes
20:28:47 <Welkin> haskell does not have "statements"
20:28:58 <Welkin> I meant expressions
20:29:24 <ReinH> merijn: I didn't mean in Haskell specifically.
20:33:27 <zwer> ReinH what are they then, functional?
20:34:07 <zwer> in imperative languages code within if/else statements must perform a mutation or a side effect, otherwise it will be useless
20:39:15 <neneng> i thought i understand monads/applicatives, but i cant grasp function monad/app at all. can someone shed some light on it?
20:39:44 <neneng> I think I understand function functor. it is just .
20:39:53 <AncientPC> ReinH: sorry to bother you, I've been reading up and I still don't understand what I'm supposed to do to get this working: http://lpaste.net/8244504124868001792
20:40:09 <AncientPC> Do I need to turn Gender into a data constructor? Male / Female?
20:40:44 <Zorg> possibly Other too
20:40:58 <bitemyapp> AncientPC: or just make it a String and don't dispatch logic on a specific gender.
20:41:11 <bitemyapp> AncientPC: gender isn't binary and if you make non-binary genders "other" that could hurt some feelings.
20:41:19 <bitemyapp> AncientPC: best to let people input what they want or ignore it entirely.
20:41:42 <AncientPC> bitemyapp: this is a trivial example to play around with Aeson; the real case is to work on an order with multiple states
20:42:06 <bitemyapp> AncientPC: so be it. Just, for production/business stuff, keep that in mind.
20:42:09 <AncientPC> and I need to operate on those states ("pending", "in progress", "delivered", "charged", "canceled"), etc.
20:42:15 <bitemyapp> AncientPC: if you're just learning, a couple of constructors is good.
20:42:21 <bitemyapp> data Gender = Male | Female as you suggested.
20:43:41 <AncientPC> but how do I parse the JSON to use a Gender for one of the fields instead of a Int / T.Text?
20:44:43 <neneng> make it Sex instead of gender (which is BS political term anyway). sex is binary if we ignore abominations
20:45:13 <jfischoff> @ops
20:45:13 <lambdabot> Maybe you meant: pl oeis docs
20:45:46 <neneng> jfischoff: ? what is your issue
20:45:55 <jfischoff> how can I get a admin to ban neneng
20:46:33 <bitemyapp> @op
20:46:33 <lambdabot> Maybe you meant: yow wn v rc pl id do bf @ ? .
20:46:35 <bitemyapp> ffs
20:46:36 <bitemyapp> !op
20:46:37 <bitemyapp> !ops
20:46:43 <bitemyapp> dibblego: ding
20:46:58 <AncientPC> Guys, I think you're missing the point, I really don't care what we call it; I just want to know how to parse JSON into a record with user defined types.
20:47:13 <bitemyapp> AncientPC: https://github.com/bitemyapp/bloodhound
20:49:43 <Welkin> sex is biological, gender is cultural
20:49:53 <Welkin> there are many cultures with up to 5 genders
20:50:29 <neneng> sex is biological, gender is a made up political term
20:50:46 <Welkin> that is incorrect
20:50:52 <cecietcela> you are incorrect, wel
20:50:55 <geekosaur> it's not even tht simple. and "abomination" is a personal value judgement inappropriate to the channel
20:50:57 <jfischoff> This not part of Haskell. And neneng your commentary is not welcome here. Please leave
20:50:58 <cecietcela> Welkin, *
20:51:05 <bitemyapp> sex is biological, but gender and the social constructs around it are very real.
20:51:25 <neneng> jfischoff: you did not complain when bitemyapp was spreading his PC bullshit
20:51:36 <bitemyapp> LOL
20:51:40 <jfischoff> you need to leave
20:51:43 <bitemyapp> TIL: I'm politically correct
20:51:44 <L8D> "PC bullshit"
20:51:45 <neneng> let me remind you that he started this opic
20:51:47 <cecietcela> according to neuroscientists (and biologists who study this), an identity is split up between sex, gender identity, and gender presentation
20:52:01 <hodapp> bitemyapp: Yup. You've got the curse.
20:52:02 <cecietcela> the first 2 being anatomical
20:52:12 <geekosaur> no, but they apparently said something not suiting your notions of what people are allowed to think\
20:52:15 <bitemyapp> cecietcela: I don't think gender identity is anatomical, but rather, psychological.
20:52:24 <bitemyapp> cecietcela: sex is anatomical/physical.
20:52:25 <geekosaur> in any case, take it off channel
20:52:33 <bitemyapp> agree with geekosaur. Enough of this.
20:52:44 <Welkin> don't take the bait
20:52:45 <Cale> Yeah, this really isn't appropriate for #haskell in multiple ways
20:53:06 <bitemyapp> apologies for my contributions to this mess.
20:53:19 <cecietcela> bitemyapp, there's studies that suggest identity is a function of the way brains are built, not how they develop
20:53:23 <cecietcela> i'll leave it there.
20:53:30 <hodapp> bitemyapp: What's your tumblr?
20:53:33 * hodapp runs
20:53:35 <bitemyapp> hodapp: lmao
20:53:42 <bitemyapp> L8D: hold on, irssi problems.
20:53:45 <hodapp> :P
20:53:49 <bitemyapp> L8D: quick answer: I'm writing a book
20:53:53 <L8D> bitemyapp: ok
20:53:54 <neneng> mere contributions? dont be modest, you started this :)
20:54:00 <L8D> bitemyapp: make sure you don't do -2 with tmux
20:54:01 <Welkin> cecietcela: that is an argument against existentialism
20:54:10 <Qfwfq> ...
20:54:14 <cecietcela> huh?
20:54:15 <merijn> I don't care who started this, frankly I don't appreciate any side of this discussion in here
20:54:20 <geekosaur> keep it to yourself or take it elsewhere neneng
20:54:23 --- mode: ChanServ set +o geekosaur
20:54:27 <merijn> Nor the meta-discussion
20:55:14 --- mode: ChanServ set +o Cale
20:55:33 <L8D> "op-squad, ASSEMBLE"
20:55:58 * hodapp hides behind L8D
20:56:00 <L8D> or is it something with "roll out!" in the name
20:56:06 <L8D> I don't remember
20:56:19 <geekosaur> "compile", of course
20:56:24 <ReinH> By the power of greyskull? I'm not sure.
20:56:49 <ReinH> I would like this ugly little discussion to stop though. I'm sure of that.
20:57:03 <hodapp> Let's express political correctness using static typing.
20:57:06 <ReinH> geekosaur, Cale: Thanks.
20:57:12 <Cale> hodapp: Please stop
20:57:23 <L8D> guys /ignore is a thing that most IRC clients provide
20:57:34 <L8D> use it liberally, or stop complaining
20:57:48 <Clint> > map (toUpper . chr . subtract 1 . ord) "tupq"
20:57:49 <lambdabot>  "STOP"
20:57:52 <L8D> :s/complaining/stirring/
20:57:54 <dmwit> jfischoff, bitemyapp: For future reference, you want "?where ops".
20:58:05 <ReinH> Or @where, even?
20:58:09 <dmwit> yes
20:58:18 <dmwit> AncientPC: Did you get your question answered?
20:58:20 <geekosaur> yes, @ and ? are equivalent
20:58:28 <ReinH> Ah.
20:58:29 <bitemyapp> dmwit: thanks
20:58:30 <geekosaur> (as lambdabot command chars)
20:58:31 <dmwit> AncientPC: If not, do you want to rephrase it for folks that have lost everything to their terrible scrollback?
20:58:34 <bitemyapp> L8D: query me again
20:58:46 --- mode: geekosaur set -o geekosaur
20:58:47 <dmwit> AncientPC: (like me)
20:58:54 <AncientPC> dmwit: not really, I've been still googling and reading half an hour now
20:59:11 <dmwit> AncientPC: Ask again. That's usually bad etiquette but we've had a breach of that anyway.
20:59:35 <AncientPC> sure, I'm going to change my example so gender isn't used
21:00:11 <Welkin> AncientPC: are you trying to parse JSON into a custom datatype?
21:00:12 <jfischoff> dmwit: ah thanks
21:00:15 <Welkin> just use Aeson
21:00:22 <hodapp> May want to temporarily remove 'PC' from the nick too, lest someone be confused.
21:00:23 <Cale> Anyway, that was an entirely unnecessary distraction, let's answer the programming question.
21:00:29 <Welkin> and make your type an instance of FromJSON
21:00:45 <neneng> hodapp: lol
21:01:02 <lpaste> glguy revised “No title”: “fixed instance” at http://lpaste.net/8244504124868001792
21:01:43 <glguy> AncientPC: I've either edited or annotated that paste with a new instance a tthe top (meant to annotate if I didn't)
21:01:48 <Cale> AncientPC: Depending on how you want the JSON to look, there's some stuff in Data.Aeson.TH which will let you derive the ToJSON and FromJSON instances
21:02:27 <Clint> there's Generic too
21:02:35 <Cale> Oh, I suppose you just want a String, so that'll require a custom instance.
21:02:40 <glguy> AncientPC: You'll match for different Value constructors when building various fromJSON instances, you'll match on Object only when you want the serialization to look like an object
21:02:55 <AncientPC> I'm trying to do this but http://lpaste.net/8923896074817503232
21:03:03 <AncientPC> but am having trouble converting student status into a type
21:03:41 <bitemyapp> AncientPC: what's wrong with Student Status?
21:03:43 <AncientPC> ohh, thx glguy
21:03:55 <Clint> AncientPC: you're misspelling sophomore
21:04:03 <bitemyapp> AncientPC: I linked you Bloodhound, there are a lot of example FromJSON instances there.
21:04:20 <bitemyapp> AncientPC: github.com/bitemyapp/bloodhound take a look.
21:05:27 <Clint> also you could use decode instead of parseAll
21:05:28 <AncientPC> Clint: thx, it's been a while since I've had to spell it. >_<
21:06:04 <ReinH> bitemyapp: GitHub's search is bad :( https://github.com/bitemyapp/bloodhound/search?utf8=%E2%9C%93&q=FromJSON
21:06:17 * hackagebot monoid-subclasses 0.3.6.2 - Subclasses of Monoid  http://hackage.haskell.org/package/monoid-subclasses-0.3.6.2 (MarioBlazevic)
21:08:07 <bitemyapp> ReinH: wtf
21:08:39 <ReinH> bitemyapp: I almost called you a liar ;) I guess it truncates results per file or something.
21:09:14 <bitemyapp> ReinH: ctrl-f "FromJSON" brings up 22 results, ctrl-f "ToJSON" brings up 432 results.
21:09:22 <bitemyapp> ReinH: I feel comfortable in saying Bloodhound has a lot of fucking JSON bullshit.
21:09:34 <L8D> ReinH: you can't use git grep?
21:10:10 <ReinH> L8D: from the GitHub interface? No.
21:10:15 <bitemyapp> L8D: I don't think ReinH has my repo checked out and wanted to take a quick-gander.
21:10:21 <bitemyapp> L8D: Bloodhound does not have many users :)
21:10:35 <ReinH> bitemyapp: I know. I saw them when I looked at the file. It's just funny that github search is so bad.
21:10:59 <hodapp> is "fucking JSON bullshit" a Haskell technical term?
21:11:16 <bitemyapp> it's probably just how Haskellers feel about silly formats.
21:11:16 <glguy> No
21:11:23 <bitemyapp> some Haskellers, anyway.
21:11:25 <hodapp> That's fair.
21:11:29 <hodapp> What do you prefer over JSON?
21:12:00 <bitemyapp> something a little more typed that understands sum types, ideally. The format I really want doesn't exist, but Cap'n Proto comes closest out of what I'm aware of.
21:12:13 <hodapp> Cap'n Proto? Never heard of it.
21:12:53 <merijn> I'll take "custom, but well specified and consistent format" over JSON any day
21:12:57 <AncientPC> The guy who made ProtoBuffs left and Google and made Capn Proto
21:12:59 <hodapp> protobuf can't do sum types?
21:13:10 <bitemyapp> ...annnnd I'm done talking about formats. Sorry :)
21:13:15 <merijn> Writing a custom parser is trivial, JSON doesn't even have proper integers....
21:13:32 <ReinH> merijn: it depends on who is consuming the format, though
21:13:46 <merijn> ReinH: How so?
21:13:55 <ReinH> If I expose JSON then I can easily write a command line tool or a web front-end
21:14:05 <merijn> Outputting a "custom, but well specified and consistent format" is also pretty easy
21:14:17 <ReinH> If I want any sort of interop, a custom format that requires a custom parser is going to lose out to JSON
21:14:43 <merijn> Except that JSON offers you almost nothing that you want
21:14:48 <hodapp> bitemyapp: No, it's good info to have. I will be dealing with formats soon.
21:14:56 <ReinH> It offers me the ability to not write custom parsers...
21:14:59 <merijn> It's not fast, it's not correct
21:15:10 <ReinH> It's fast and correct enough for plenty of use cases
21:15:12 <merijn> The only upside is "easy to access from JS"
21:15:18 <hodapp> "not fast, not correct, not good, pick two?"
21:15:20 <ReinH> and plenty of other languages
21:15:55 <dmwit> merijn: I think you're strongly underselling having somebody else write a parser for you.
21:15:59 <merijn> ReinH: The only reason for that is "many people happen to use it" and as long as people keep using it we'll keep being stuck with a sucky format like JSON
21:16:11 <merijn> dmwit: I'm not opposed to a common interchange format
21:16:20 <merijn> dmwit: But then make it something less sucky than JSON, please
21:16:42 * ReinH shrugs
21:16:50 <ReinH> I don't think JSON is at all as bad as you're making it out to be
21:16:54 <hodapp> my coworker loves JSON. and Python.
21:16:59 <merijn> ReinH: It is for any sort of performance
21:17:07 <ReinH> Not really.
21:17:10 <bitemyapp> hodapp: time for a new coworker
21:17:13 <dmwit> merijn: At least it's not XML.
21:17:13 <bitemyapp> hodapp: ;)
21:17:20 <merijn> ReinH: JSON's spec is like someone intentionally decided to make a format that's hard to parse efficiently
21:17:26 <hodapp> bitemyapp: He's a bright enough guy in general. He's willing to hear my rants on Haskell.
21:17:29 <ReinH> It's fast enough for a many uses
21:17:44 <hodapp> bitemyapp: which is progress from the last employer, for sure.
21:17:45 <merijn> ReinH: That's not really a counter argument
21:17:50 <merijn> PHP is fast enough for many uses
21:18:03 <merijn> That's not a reason to keep encouraging people to use bad tools
21:18:07 <dmwit> merijn: You're going to have a network roundtrip and you're sweating the parsing speed?
21:18:15 <ReinH> merijn: It is certainly a counter-argument to "JSON isn't fast"
21:18:16 <bitemyapp> hodapp: that's not too bad then.
21:18:29 <merijn> dmwit: People use JSON for lots of things that don't do network roundtrips
21:18:45 <dmj`> dmwit: good point, most aws apis are still xml... the json they do use is horrible.
21:19:01 <merijn> dmwit: Also, considering the high speed networking available that's not a very solid argument
21:19:04 <hodapp> bitemyapp: the sticky technical situation is that we have embedded C code and Python(ish) code that need to be able to communicate sensibly, and the C code is turning to a royal mess, so I'm looking at things like Atom.
21:19:15 <merijn> dmwit: Now, if people only used JSON on the internet/web, but that's not the case
21:19:28 <dmwit> merijn: Roundtrip problems aren't about high speed, they're about high latency.
21:19:55 <merijn> dmwit: Sure, but if you have substantial datasets being delivered faster than you can parse them you still have a problem
21:20:10 <merijn> Also, when I say high speed networking I mean both latency and bandwidth
21:20:10 * dmwit shrugs
21:20:21 <dmwit> It's certainly true that JSON isn't suited to all problems.
21:20:22 <ReinH> Your argument seems to be that JSON is inappropriate for some use cases. Mine is that it is appropriate for many use cases.
21:20:29 <dmwit> But that's a much weaker claim than the one you appear to be making.
21:20:38 <rs0> merijn: your argument is essentially "because square holes exist, we shouldn't have round pegs"
21:20:39 <ReinH> There are not mutually exclusive arguments.
21:20:59 <merijn> dmwit: My point is we could have a protocol that *does* cover those usecases which is easy enough to replace all uses of JSON
21:21:11 <ReinH> And I could have a toilet made out of gold.
21:21:13 <rs0> merijn: unless you're saying that JSON somehow could have been dramatically, drastically faster with *no* tradeoffs
21:21:18 <merijn> dmwit: i.e. JSON does nothing that a better format can't do
21:21:26 <dmj`> ReinH: :)
21:21:46 <dmwit> merijn: You're wrong. JSON exists and is popular in a way that a better format isn't. =)
21:21:51 <dmwit> merijn: And this is where I started my argument.
21:21:53 <hodapp> merijn: ...isn't that sort of tautological though?
21:21:53 <ReinH> Well, if you consider "existing" to be better than "not existing"
21:22:02 <ReinH> JSON has that going for it, which is nice.
21:22:04 <dmwit> merijn: You're underselling the technical advantage of "somebody else wrote the parser for me". =)
21:22:25 <ReinH> Yes, JSON is worse than things that are better than JSON. I think we can all agree.
21:22:53 <merijn> dmwit: I'm not saying that's not valid reason now, I'm just hoping for JSON to die out for a better format and then everyone can still have their parser written for them, without everything needing to suck :p
21:22:53 * ReinH shrugs
21:23:05 <ReinH> It's really OK if you don't like JSON. And it should be OK if I like it.
21:23:18 <dmwit> merijn: okay
21:23:23 <dmwit> I hope for this, too.
21:23:23 <rs0> merijn: is your primary criticism of JSON really parsing speed? there's so much else to dislike about it
21:23:50 <rs0> things that actually affect many use cases for which a slow human-readable text-based protocol is appropriate
21:23:55 <merijn> rs0: No, I also dislike the fact it can't really represent any data other than strings, double and maps well either
21:24:13 <rs0> don't forget lists!
21:24:20 <merijn> oh, right, my bad
21:24:32 * ReinH shrugs
21:24:43 <rs0> although, the fact that JSON has first-class support for more than one collection type kind of makes it strictly more expressive than XML
21:25:44 <ReinH> Anyway this is far more attention than JSON deserves.
21:26:06 <bitemyapp> 4rlz
21:27:03 <dmwit> Somebody is WRONG on the Internet.
21:27:07 <neneng> what is the next topic? I know, sexps!
21:27:17 <MP2E> *runs*
21:30:01 <ReinH> sexps are nice for when you don't want to write an actual syntax for your language.
21:31:16 <rs0> ReinH: is there any reason your comment wasn't just "sexps are a good choice if you want to create a homoiconic language"
21:32:20 <neneng> sexps are full of syntax
21:32:52 <bitemyapp> neneng: stop
21:33:11 <neneng> bitemyapp: what?
21:33:22 <rs0> neneng: you're right of course, and the next myth that needs to die is that Lisps "directly expose the AST" or whatever
21:33:31 <ReinH> rs0: yes. Lisp's sexps were actually designed as an intermediary form for a language they ended up never writing.
21:34:25 <geekosaur> sexprs are a syntax. not a very complex one, but a syntax
21:34:38 <ReinH> Of course they are. "Actual syntax" was hyperbole.
21:34:40 <geekosaur> (at least originally. common lisp certainly has syntax...)
21:36:32 <ReinH>   See: http://en.wikipedia.org/wiki/M-expression
21:37:12 <rs0> geekosaur: common lisp has X for all values of X
21:37:28 <geekosaur> exactly :p
21:43:09 <ReinH> geekosaur: I wrote a parser for them the other day, so I'm pretty aware that they're syntax ;)
21:50:39 <moore> is it physically possible to install gtk2hs on windows? having no luck :(
21:51:24 <dmwit> moore: Well, I've done it, and written down the exact steps I followed.
21:51:39 <dmwit> They're the installation instructions included in the package and on the website.
21:51:46 <moore> is it available online somewhere?
21:51:50 <dmwit> Have you tried them? If so, where are you getting stuck?
21:52:27 <dmwit> http://projects.haskell.org/gtk2hs/download/
21:52:38 <moore> i am following that
21:53:16 <moore> setup.exe: Missing dependencies on foreign libraries:
21:53:24 <moore> * Missing C libraries: gobject-2.0, gthread-2.0, glib-2.0, intl
21:53:48 <moore> why is installing tk2hs so hard?
21:53:49 <dmwit> Did you get the all-in-one bundle from the Gtk+ website?
21:54:11 <dmwit> It looks like you may have gotten just the gtk library or similar.
21:54:52 <moore> i got the bundle
21:55:33 <dmwit> What does pkg-config --cflags gtk+-2.0 say? What about pkg-config --cflags gobject-2.0?
21:56:09 <moore> it is a bit wordy.. let me put it on pastebin
21:56:18 <dmwit> Good idea.
21:56:49 <moore> gtk-demo runs by the way
21:57:51 <moore> http://lpaste.net/115939
21:58:26 <moore> annotated
21:58:40 <dmwit> Cool, that looks good.
21:59:05 <dmwit> I wonder why setup.exe isn't seeing them.
21:59:27 <dmwit> One thing that could be happening is it could be seeing the wrong PATH environment variable.
21:59:39 <dmwit> I wonder how to test that. (Not a Windows guru.)
21:59:54 <bitemyapp> dmwit: Windows has a PATH, albeit slightly different.
22:00:19 <dmwit> bitemyapp: Yep, and if he can run pkg-config he's definitely modified the PATH.
22:00:25 <moore> let me try to go through that guide again, step by step
22:00:30 <dmwit> The question is whether that modification is making it down to sub-processes appropriately.
22:00:54 <dmwit> moore: Could you try the cabal install command with some extra verbosity? say -v3?
22:01:02 <dmwit> Then paste the full output to lpaste and we'll see what we can see.
22:22:31 <prinsen> what is the best way to forM a Data.Map with both keys and values?
22:22:55 <dmwit> assocs?
22:23:17 <dmj`> :t M.assocs $ M.fromList [('a',1)]
22:23:18 <lambdabot> Num a => [(Char, a)]
22:39:06 <benzrf> night all
22:39:20 <dmj`> peace
22:40:54 <glguy> Prinsen: lens has iforM for that.
22:41:52 <haasn> :t M.assocs
22:41:53 <lambdabot> M.Map k a -> [(k, a)]
22:41:59 <haasn> :t M.toList
22:42:00 <lambdabot> M.Map k a -> [(k, a)]
22:42:02 <haasn> ???
22:42:13 <dmj`> :t M.elems
22:42:14 <lambdabot> M.Map k a -> [a]
22:52:09 <dmwit> :t M.toAscList -- ?????!?!?!!?
22:52:10 <lambdabot> M.Map k a -> [(k, a)]
22:52:26 <dmwit> haasn: They're all implemented the same. For now.
22:53:03 <haasn> dmwit: What's the semantic difference between assocs and toList?
22:53:12 <haasn> I can get distinguishing toAscList and toList
22:53:23 <haasn> Since maybe getting it in an undefined order is faster
22:53:24 <dmwit> Not sure. Maybe there isn't one.
22:53:46 <dmwit> Oh, actually, according to the docs, there's no semantic difference between assocs and toAscList.
22:53:57 <haasn> Ah, interesting
22:54:09 <yoyoyo> yo
22:54:10 <haasn> Overlap of namespaces I guess
22:54:34 <codygman> Is this saying that for something to satisfy the HasGroundhogPostgres class it must have a function called "getGroundhogPostgresState" which returns... actually perhaps I should just hear someones explanation, code: https://github.com/mattraibert/groundhog-postgres-snap/blob/master/src/Snap/Snaplet/Groundhog/Postgresql.hs#L148
22:54:51 <yoyoyo> are there alternatives to `flip` and `uncurry` which support arbitrary arity?
22:55:11 <merijn> yoyoyo: What would an "arbitrary arity flip" do?
22:55:28 <merijn> codygman: That's not a function
22:55:51 <merijn> codygman: That seems a pretty ill-advised typeclass anyway
22:55:57 <yoyoyo> a -> b -> c -> … -> z ==> z -> … -> c -> b -> a
22:55:58 <dmwit> yoyoyo: Yes, see the "tuple" package for "uncurryN".
22:56:16 <dmwit> yoyoyo: For arbitrary-arity flip, just use lambdas.
22:56:22 <yoyoyo> 2 seems a pretty arbitrary arity to me.  I like to work with Ns
22:56:37 <haasn> dmwit: I guess in theory M.assocs could have been :: Map k a -> Set (k, a) or some other data structure
22:56:48 <haasn> Just based on the name
22:57:20 <yoyoyo> dmwit: thanks!
22:58:57 <codygman> merijn: Okay
23:00:21 <yoyoyo> dmwit: since someone went through the trouble of making 32 uncurryNs and 32 curryNs, wouldn’t it make sense to make us some flips too? :)
23:28:16 <jle`> wow what a library
23:30:35 <ReinH> I think there's an arbitrary arity flip package in the Acme category?
23:30:46 <ReinH> Well, not arbitrary, but a huge number of operators for various arities
23:31:06 <ReinH> Not that I would recommend anyone use it
23:31:07 <Welkin> benzrf probably wrote a large portion of the stuff in the acme category
23:31:34 <Welkin> obfuscated functions that don't really do anything
23:32:34 <jle`> there was that library that was submitted seriously to reddit a few weeks ago
23:32:40 <jle`> that i think did something like that
23:32:43 <jle`> and arbitrary arity composition too
23:32:54 <jle`> but it was a library of like two hundred operators
23:33:23 <jle`> all following a very lovingly crafted naming scheme
23:34:52 <bitemyapp> jle`: cascade?
23:35:08 <bitemyapp> jle`: https://github.com/rampion/Cascade#readme
23:35:21 <bitemyapp> jle`: http://www.reddit.com/r/haskell/comments/2m41m9/cascades_or_how_get_more_than_composition_out_of/
23:35:31 <jle`> that wasn't it
23:35:39 <jle`> that actually looked pretty neat
23:36:04 <bitemyapp> jle`: then I've failed.
23:36:07 <bitemyapp> forgive me.
23:36:23 <jle`> you have been given full pardon
23:39:06 <bitemyapp> jle`: thank you m'lud. Please link it when you find it.
23:39:13 <bitemyapp> slash if you find it.
23:40:17 <jle`> ofc
23:42:04 <zq> what's the idiomatic thing to do after zipWith3?
23:42:08 <zq> @hoogle zipWith4
23:42:09 <lambdabot> Data.List zipWith4 :: (a -> b -> c -> d -> e) -> [a] -> [b] -> [c] -> [d] -> [e]
23:42:09 <lambdabot> Data.Sequence zipWith4 :: (a -> b -> c -> d -> e) -> Seq a -> Seq b -> Seq c -> Seq d -> Seq e
23:42:12 <zq> well then
23:42:35 <sinelaw> int-e, I just sent a pull request to mokus0 lambdabot
23:42:50 <sinelaw> will that make it into yours?
23:43:01 <dmwit> zq: ZipList
23:43:08 <zq> :t ZipList
23:43:09 <lambdabot> [a] -> ZipList a
23:43:10 <jle`> bitemyapp: i found it
23:43:14 <zq> :i ZipList
23:43:17 <jle`> http://hackage.haskell.org/package/plumbers-0.0.3/docs/Control-Plumbers.html
23:43:23 <zq> @hoogle ZipList
23:43:23 <lambdabot> Control.Applicative ZipList :: [a] -> ZipList a
23:43:23 <lambdabot> Control.Applicative newtype ZipList a
23:43:23 <lambdabot> Control.Applicative getZipList :: ZipList a -> [a]
23:43:27 <jle`> i was wrong about 200 operators...there are at least 600 operators
23:43:49 <dmwit> > (\a b c d e -> a + b + c + d + e) <$> ZipList [1] <*> ZipList [2] <*> ZipList [3] <*> ZipList [4] <*> ZipList [5]
23:43:51 <lambdabot>  ZipList {getZipList = [15]}
23:44:13 <dmwit> > (\a b c d e -> a + b + c + d + e) <$> ZipList [1,10] <*> ZipList [2,20] <*> ZipList [3,30] <*> ZipList [4,40] <*> ZipList [5,50]
23:44:14 <lambdabot>  ZipList {getZipList = [15,150]}
23:44:25 <zq> dmwit: danke schon
23:44:36 <bitemyapp> jle`: ...why
23:44:52 <zq> that's terse as hell, though. i was thinking more along the lines of breaking the large zip into a bunch of maps, folds, and mapaccums
23:44:53 <jle`> i wonder if it's worth locally defining your "own" <$>/<*>'s for zipping
23:45:00 <jle`> well you can keep <$>
23:45:04 <bitemyapp> Category ACME
23:45:06 <jle`> (<*>) = zipWith (,)
23:45:06 <bitemyapp> no kidding.
23:45:10 <jle`> er
23:45:13 <jle`> zipWith ($)
23:45:46 <jle`> > let (<*>) = zipWith (,) in (\a b c d e -> a + b + c + d + e) <$> [1,10] <*> [2,20] <*> [3,30] <*> [4,40] <*> [5,50]
23:45:48 <lambdabot>  No instance for (Data.Typeable.Internal.Typeable b3)
23:45:48 <lambdabot>    arising from a use of ‘M63377220312321304021074.show_M63377220312321304021...
23:45:48 <lambdabot>  The type variable ‘b3’ is ambiguous
23:45:48 <lambdabot>  Note: there are several potential instances:
23:45:48 <lambdabot>    instance Data.Typeable.Internal.Typeable Data.Dynamic.Dynamic
23:45:59 <jle`> darn
23:46:07 <bitemyapp> I don't think it likes you.
23:46:27 <jle`> oh i see
23:46:55 <jle`> it should be zipWith ($), but you get fixity/precedence issues, darn.
23:48:04 <jle`> > let (<*>) = zipWith ($) in (((((\a b c d e -> a + b + c + d + e) <$> [1,10]) <*> [2,20]) <*> [3,30]) <*> [4,40]) <*> [5,50]
23:48:05 <lambdabot>  [15,150]
23:49:01 <jle`> hm
23:49:07 <jle`> you can also use parallel list comprehensions
23:49:09 <dmwit> You can declare fixities in lets.
23:49:48 <jle`> > [ a+b+c+d+e | a <- [1,10] | b <- [2,20] | c <- [3,30] | d <- [4,40] | e <- [5,50]]
23:49:50 <lambdabot>  [15,150]
23:50:03 <jle`> dmwit: you can, but having to define it sort of makes the solution a little less neat
23:51:33 <jle`> parallel list comprehensions might be the nicest solution but i wonder if it could be called idiomatic
23:51:51 <redtricycle> haskell for shell scripting, yay or nay? I ran into this: http://chrisdone.com/posts/shell-conduit
23:51:54 <redtricycle> and it got me thinking
23:52:18 <zq> very yay
23:52:34 <redtricycle> downsides is having to compile and portability in my opinion, but I can work around that
23:52:47 <redtricycle> zq: any libraries you use for shell scripting?
23:53:44 <zq> redtricycle: hackage.haskell.org/package/shelly sometimes
23:55:22 <redtricycle> ill try it out
23:55:24 <redtricycle> thanks
23:56:25 <pecanpy> in Data.Text the doc says split is Text -> Text -> Text, but when I use it, it says the first arg should be (Char -> Bool). What am I noobing up?
23:57:05 <prinsen> putStr "input: "; str <- getLine; ... Does not behave as I want, it prints nothing before all input is given, then prints all the "inputs: "s
23:59:34 <arrowdodger> Hello, i have strange problem with cabal repl. I've run `cabal repl` in my library package, then did `:l ..\my_test.hs`, and then `:main` gives me "not found". Fascinating thing is that `:show modules` have "main" and `:browse Main` gives "Main.main".
23:59:39 <arrowdodger> Any clues?
23:59:59 <jle`> prinsen: probably terminal buffering
