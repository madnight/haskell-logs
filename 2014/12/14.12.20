00:03:23 <hunter_> could somebody part
00:03:29 <hunter_> so i can see if irssi ignores it
00:03:34 <hunter_> also tell me youre parting pls :)
00:04:55 <zRecursive> Which one should i choose irirc,orssi and erc ?
00:06:03 <reptar> hunter_: ok
00:06:15 <reptar> hunter_: done
00:07:37 <sivteck> @dice 1d3
00:07:37 <lambdabot> sivteck: 2
00:07:44 <sivteck> zRecursive, orssi!
00:10:43 <zRecursive> sivteck: orssi has any advantages ?
00:10:54 <sivteck> idk ;)
00:11:06 <zRecursive> s/orsis/irssi
00:15:39 <c74d> zRecursive: I'd say WeeChat, which is text-based like Irssi but more advanced. Or maybe one of the Emacs ones, I don't know about them. WeeChat can be integrated into Emacs too.
00:18:01 <zRecursive> c74d: i am using ERC now
00:28:55 * hackagebot yi-language 0.1.1.0 - Collection of language-related Yi libraries.  http://hackage.haskell.org/package/yi-language-0.1.1.0 (MateuszKowalczyk)
00:33:55 * hackagebot pandoc 1.13.2 - Conversion between markup formats  http://hackage.haskell.org/package/pandoc-1.13.2 (JohnMacFarlane)
01:48:51 <Black-Heaven> Hi all, I'm trying to understand how open type families families but I'm stuck with polykinds. I have the following code: http://lpaste.net/116893 What I don't understand is what Morphism is well reduce to a single type while Morphism' is not and brings a `forall k`. If you have any explanations or links about kind-level, I'll be glad to read them. Thanks by advance for your help.
02:09:21 <phaazon> :)
02:35:07 <Zol_> Why would I want to use Data.Map instead of an ordinary list?
02:35:15 <Zol_> A list of tuples that is..
02:35:53 <nshepperd> performance
02:36:16 <Zol_> Aha, thanks!
02:39:03 <Zol_> Hm.. Can't seem to find Data.Map on Hoogle
02:39:51 <jle`> aside from performance Data.Map has a lot of nice "convenience functions"
02:40:00 <jle`> you could define them yourself on list but it probably wouldn't be as fun
02:40:16 <Zol_> Thanks :)
02:40:26 <jle`> it should be in the `containers` package
02:41:54 <Zol_> jle`: Thanks, found it!
02:42:00 <jle`> :D
02:46:45 <Zol_> Hm, I'm trying to create an asoociative list with a Handle as key (the handle is from a Socket accept call, so I can keep track of each connection), but the Handle doesn't implement Ord. I guess I need to find something else to pass around as an identifier?
02:51:47 <nshepperd> yes
02:52:22 <moop> @learn
02:52:22 <lambdabot> http://www.haskell.org/haskellwiki/Learning_Haskell
02:52:27 <moop> ah
02:52:41 <moop> wasn't there some github page for all the learning haskell links
02:52:55 <nshepperd> or, do you really need to be able to look up particular Handles?
02:53:08 <sivteck> @where guide
02:53:08 <lambdabot> https://github.com/bitemyapp/learnhaskell
03:06:40 <Guest9964> Any idea how can I solve this one ? google returns unrelated results ? "Couldn't match expected type `random-1.0.1.1:System.Random.StdGen' with actual type `StdGen' "
03:07:43 <geekosaur> that error means you have two versions of the random package installed
03:08:19 <Guest9964> how can I unistall one of them ? which one should I unistall ?
03:09:20 <Guest9964> I guess I mistakenly install unnecessary things by copy pasting from internet ;) ...
03:09:57 <geekosaur> @paste output of "ghc-pkg list"
03:09:58 <lambdabot> Haskell pastebin: http://lpaste.net/
03:10:16 <jonasssss> what is the easiest way to count the true values in an array of booleans?
03:10:36 <jonasssss> like true, false, true = 2
03:12:14 <Guest9964> @geekosaur :  http://lpaste.net/7957794162844106752
03:12:15 <lambdabot> Unknown command, try @list
03:12:49 <Polarina> jonasssss, length . filter id your_list
03:13:55 <quchen> jonasssss: Array as in Data.Array?
03:14:53 <jonasssss> ofc the filter! thanks
03:15:05 <geekosaur> Guest9964: ghc-pkg unregister random-1.1
03:15:27 <geekosaur> although with those package lists I'm guessing it'll tell you that it'll break stuff. I suspect you have a mess on your hands
03:16:59 <Guest9964> ok I will try  :) , now I know what is the roof of the problem and I guess I can fix it if I break something. thank you so much :)
03:23:59 <geekosaur> ghc-pkg list --global | sed -e '\,^/,d' -e '/(/d' -e '/./!d' -e 's/^  */constraint: /' -e 's/-[0-9.]*$/ installed/'
03:24:37 <geekosaur> this makes cabal stick to the globally installed versions instead of its irritating tendency to grab the latest version of something and all its incompatible dependencies
03:25:02 <geekosaur> (output of that script should be appended to ~/.cabal/config)
03:38:12 <matematikaadit> how to list all available module that could be imported?
03:46:03 <Polarina> matematikaadit, open ghci, type "import " without the quotes and press Tab twice.
03:51:52 <matematikaadit> Polarina: well, that would work if I have access to ghci and could interactively run it.
03:52:42 <matematikaadit> let's say that I could execute some haskell code in a server. But I don't know what modules are available in that server.
03:54:38 <quchen> matematikaadit: ghc-pkg list will list all installed *packages*, if that helps.
04:00:47 <matematikaadit> quchen: ah, that quite useful. now, I just have to see in hackage the modules that each of these packages exported.
04:02:54 <quchen> matematikaadit: You can probably write a program that does what you want quite easily by inspecting your 00-index.tar (which is your local package cache, think of it as containing all .cabal files of Hackage).
04:04:06 <matematikaadit> quchen: 00-index.tar? in which directory?
04:04:11 <quchen> I wrote this to display the interdependencies of Hackage, for example. https://github.com/quchen/hackage-graph
04:04:26 <quchen> ~/.cabal/packages/hackage.haskell.org/
04:08:57 <matematikaadit> quchen: wow, thanks.
04:08:58 <jonasssss> how can i check in gtk2hs if the left or right mouse is clicked? can't find
04:13:50 <matematikaadit> quchen: um... how about the one with globally installed packages?
04:14:14 <quchen> Oh right, 00-index contains everything, not just what you have installed. Hmm
04:14:26 <Fuuzetsu> jonasssss: make a handler for clicks
04:14:38 <Fuuzetsu> then you can do stuff like
04:14:38 <Fuuzetsu>   (x, y) <- eventCoordinates
04:14:39 <Fuuzetsu>   click  <- eventClick
04:14:40 <Fuuzetsu>   button <- eventButton
04:14:51 <Fuuzetsu> and pattern match to see which button it is &c
04:16:02 <jonasssss> you mean onClicked button?
04:16:24 <Fuuzetsu> buttonPressEvent
04:16:48 <quchen> matematikaadit: You could also search for all *.hi files in .cabal/lib/$VERSION.
04:17:13 <quchen> Those are all quick hacks though, not sure how robust you want your program to be.
04:18:16 <Fuuzetsu> somethingsomethingusenixsomethingsomething
04:18:46 <quchen> I don't think that's related to the problem.
04:18:53 <jonasssss> i need to pattern match on button <- eventButton ?
04:19:03 <jonasssss> can't find anything of docs...
04:19:37 <Fuuzetsu> check Pango.hs module in Yi source
04:20:58 <matematikaadit> quchen: ah, I'll go with the easiest route for now. I've already got the ghc-pkg list in here: http://lpaste.net/116895
04:21:34 <matematikaadit> since it just a few packages. I'll just check hackage for the exposed modules
04:21:35 <quchen> ghc 6.8? Oh lordy lord, you should update
04:22:20 <quchen> That's so old it's not even mentioned on the official GHC page anymore
04:22:36 <quchen> (which goes back to 6.10, which is from 2008)
04:24:02 * hackagebot hydrogen-multimap 0.1 - Hydrogen Multimap  http://hackage.haskell.org/package/hydrogen-multimap-0.1 (JulianFleischer)
04:30:52 <delphinas> I have a simple function wordCount input = show (length (lines input)) ++ "\n"
04:31:52 <quchen> This does not count words, but lines. And then converts it to String.
04:32:41 <delphinas> Well yes abut ambiguous. How to use this function fro a specified .txt file ?
04:33:58 <quchen> Do you know about doing I/O in Haskell? If not, you might want to have a look at the corresponding chapter in one of the standard books (Hutton, LYAH, RWH).
04:34:18 <matematikaadit> quchen: well, that's not in my reach actually. http://ideone.com/ARc7sM
04:34:46 <quchen> ?
04:34:53 <delphinas> quchen: thanx for the clues!
04:34:57 <delphinas> I'll have a look.
04:41:19 <matematikaadit> quchen: the server that I mention is that ideone.com server. A site which allow us to compile and execute source code online.
04:43:36 <matematikaadit> whois quchen
04:44:56 <Fuuzetsu> matematikaadit: then stop using that site
04:45:49 <butyoudonot> Fuuzetsu: why?
04:46:02 <Fuuzetsu> butyoudonot: because it runs GHC 6.8
04:46:16 <butyoudonot> What is wrong with it?
04:46:20 <matematikaadit> Fuuzetsu: is there an alternatives that runs newer GHC?
04:46:28 <Fuuzetsu> matematikaadit: why don't you just get GHC locally?
04:47:05 <Fuuzetsu> butyoudonot: you're not going to get a lot of help asking about 6.8 and if you're after more technical reason then just look at all the tickets closed between 6.8 release and now
04:54:28 <matematikaadit> Fuuzetsu: well, I need that site if I wanna test/debug some haskell code that submitted to http://www.spoj.com/. Since both runs on the same sphere engine.
04:55:01 <averell> spoj still uses 6.8?
04:56:50 <indiagreen> matematikaadit: I would recommend codeforces.com, they have a great deal of tasks as well and use GHC 7.6
04:57:29 <indiagreen> I know this doesn't address your immediate problem, but still
04:58:27 <delphinas> does anyone know how to check where cabal installs libraries ?
04:58:29 <delphinas> on mac os
05:01:10 <delphinas> oh nevermind I think I've founde but I have 2 different ghc locations now...
05:01:35 <matematikaadit> well, spoj newer cluster use ghc 6.10
05:04:19 <delphinas> I've used default installation package from haskell. But I think I did install ghci by different method long time ago so it kinda "clashes" now
05:08:34 <delphinas> Yeah this is confusing
05:10:31 <matematikaadit> indiagreen: thanks, but I already know about that site. I'm using both... and some others..
05:29:04 * hackagebot hydrogen-cli-args 0.9 - Hydrogen Command Line Arguments Parser  http://hackage.haskell.org/package/hydrogen-cli-args-0.9 (JulianFleischer)
05:32:51 <trap_exit> is 13" big enough to code haskell?
05:32:57 <trap_exit> I like to be able to see code + ghc errors at the same time
05:33:18 <vanila> is your current screen bigger than 13"?
05:33:22 <trap_exit> 17"
05:33:31 <trap_exit> should I get a knife
05:33:33 <vanila> so cover up 4" of it and see if that is ok
05:33:35 <trap_exit> and cut off 4" of it?
05:33:38 <vanila> lol
05:33:42 <vanila> just get a bit of paper or something
05:33:44 <trap_exit> well, 13" would be retina
05:34:10 <vanila> I doubt the resolution matters much, it's not going to be OK to use a smaller font just because the DPI is higher
05:34:12 <trap_exit> I'm undecided whether this is dumbass or brilliant
05:35:57 <indiagreen> trap_exit: I have 13" and I'm satisfied
05:36:36 <trap_exit> can you ship your mbp for me to try it out for a few days?
05:36:55 <trap_exit> are you splitting left/right or top/bot ?
05:37:00 <indiagreen> left/right
05:37:17 <trap_exit> how many chars wide are each ?
05:37:21 <trap_exit> 80/80 ?
05:38:09 <indiagreen> 78, but I think my Emacs font is slightly bigger than it normally is
05:38:16 * indiagreen likes nir fonts big
05:38:28 <Guest71319> Hi, all
05:38:33 <mmmm> I had 80/80 on my old asus eee 11"
05:38:43 <mmmm> It's no problem on a mpb
05:39:01 <Guest71319> kwak
05:39:16 <vanila> hi :D
05:39:17 <stephen_> My 14" thinkpad is just a comfy size
05:42:42 <chrisdone> i worked on a 13" screen for a while. easily fits two 80 col windows
05:45:37 <vanila> Does anyone know how to make a table in github/markdown with rows like this: [multiple line code] | [image]
05:47:31 <chrisdone> vanila: use <table>?
05:48:18 <vanila> cheers :)
05:54:52 <yac> chrisdone: yeah but 23" one fits three
05:55:45 <indiagreen> but 23" laptops aren't very convenient to carry around
05:56:43 <sujeet> my screen is 13" but very 2160p
05:56:47 <sujeet> *very hi res,
05:56:49 <yac> yeah but nothing beats 14" + dual 24"
05:57:26 <sujeet> at work i have 2x 27"
05:57:32 <yac> maybe 14" + triple 24" could
05:57:39 <sujeet> an imac + monitor
05:59:06 * hackagebot ot 0.2.0.0 - Real-time collaborative editing with Operational Transformation  http://hackage.haskell.org/package/ot-0.2.0.0 (TimBaumann)
06:00:03 <chrisdone> yac: the text on your 23" is probably not nice
06:00:52 <sujeet> why not?
06:01:44 <chrisdone> because unless that's a very new screen it will have a poor resolution meaning it has to be moved back further to get a quality PPD but the text will be fuzzy and antialiased nontheless
06:03:32 <chrisdone> the apply 5k screens… now that's a quality big screen
06:04:01 <luite> sujeet: 3840x2160 in 13"? what kind of device is that?
06:04:28 <indiagreen> probably that Lenovo laptop
06:05:04 <sujeet> it's an asus
06:05:08 <danilo2> Hello! Is there any possibility in haskell to define instance of a class and separate constraints for each method? I mean - I've got 2 methods "foo" and "bar" and I want to define separate constraints for both of them, so when a function calls "foo", then it will "inherit" only the constrains from foo and not from bar
06:05:09 <luite> chrisdone: annoyingly it can't be used as an external screen like the lower res imacs, have to throw out the screen if you upgrade the hardware :(
06:05:10 <sujeet> one of the ultrabooks
06:05:21 <chrisdone> luite: indeed, otherwise i'd be buying one =)
06:05:43 <sujeet> chrisdone, yeah, they're really nice
06:05:43 <indiagreen> hm, no, the one I'm thinking of has only 3200×1800
06:05:55 <sujeet> indiagreen, the lenovo yoga 2 pro is qhd
06:06:31 <sujeet> that's the one you were thinking of i guess
06:06:44 <sujeet> i don't actually mind qhd+ vs 2160p
06:06:54 <sujeet> the problem i had was the coloring
06:08:16 <luite> chrisdone: one? you mean three, right? think of the productivity of a multi-monitor setup!
06:08:17 <yac> chrisdone: no it's fine. 1920x1680
06:08:50 <sujeet> luite, they make standalone displays
06:09:06 * hackagebot uuid 1.3.7 - For creating, comparing, parsing and printing Universally Unique Identifiers  http://hackage.haskell.org/package/uuid-1.3.7 (AntoineLatter)
06:09:13 <luite> sujeet: not in the 5120x3200 resolution
06:09:40 <sujeet> luite, orly :(
06:09:56 <yac> multimonitor WxH > one screen WxH
06:10:00 <luite> oh it's slightly lower i think, because of 16:9 instead of 16:10?
06:10:24 <luite> anyway, displayport bandwidth limitations :( next version should be fast enough
06:10:26 <delphinas> Anyone on mac? Where does your cabal packages installs ?
06:10:31 <yac> unless WxH is tiny.
06:10:53 <yac> delphinas: ghc-pkg list
06:10:58 <chrisdone> luite: i don't see the benefit in a multi-monitor setup
06:11:11 <sujeet> ?!
06:11:11 <lambdabot> Maybe you meant: v @ ? .
06:11:32 <chrisdone> i've had one before and it was more annoying than it was beneficial
06:11:45 <yac> chrisdone: http://blog.headdesk.cz/posts/2013/10/18/on-window-managers.html
06:12:03 <yac> but yeah, it doesn't cover the multihead in detail
06:12:14 <chrisdone> yac: why are you linking that?
06:12:54 <chrisdone> <yac> chrisdone: no it's fine. 1920x1680 -- heh, that's a crappy resolution for a 23" screen
06:12:58 <yac> 15:10:09        chrisdone | luite: i don't see the benefit in a multi-monitor setup
06:13:07 <chrisdone> unless you're like in 2009 or something
06:13:42 <Clint> it's hard to get an 8k monitor
06:13:44 <chrisdone> yac: that link just explains how some guy setup xmonad on two screens
06:13:46 <luite> chrisdone: i prefer a single bigger screen too
06:14:20 <yac> chrisdone: what's a good resolution for 23" then?
06:14:55 <yac> chrisdone: I think it's rather about why he used xmonad than how he did it
06:15:45 <chrisdone> yac: somewhere around 3-4K
06:16:02 <chrisdone> your screen's resolution matches that of a 13" macbook
06:16:13 <chrisdone> ergo you have to move it further back so that you can't see all the pixels
06:16:39 <delphinas> Is there a neat way to remove cabal/ghc/haskell install under mac ?
06:16:52 <delphinas> In order to do a reinstall (lol..)
06:17:17 <luite> delphinas: have you tried bringing it to the genius bar? ;)
06:17:19 <chrisdone> yac: actually when i said matches, i meant "doesn't reach"
06:17:23 <chrisdone> heh
06:17:32 <delphinas> luite: haha
06:17:41 <delphinas> they wud definitely know...
06:17:55 <luite> delphinas: it depends on how you installed ghc, usually you either get package installs in ~/Library/something or ~/.cabal
06:18:00 <chrisdone> in some sense Apple is monadic
06:18:03 <yac> 15:15:24        chrisdone | ergo you have to move it further back so that you can't see all the pixels
06:18:05 <luite> delphinas: and your ghc user package db is in ~/.ghc
06:18:10 <yac> yeah that actually fits my use case probably
06:18:12 <chrisdone> you can only do things in terms of Apple =p
06:18:26 <delphinas> luite: I have packages in ~/.cabal
06:18:36 <yac> I like to have about one meter space on my table so it's almost 1.5m in total
06:18:41 <chrisdone> actually a monad is too powerful, Applicative is more appropriate
06:18:44 <delphinas> and in ~/Library/Haskell
06:18:56 <delphinas> thats why im confused
06:19:01 <luite> delphinas: k, if you remove ~/.cabal, you also have to remove ~/.ghc, since the package registration files live there, they'd be dead references
06:19:22 <luite> delphinas: the default location for cabal is ~/.cabal, but i think the haskell platform configures it to be ~/Library/Haskell
06:19:25 <chrisdone> yac: yeah, that's 3× more than the typical viewing distance for a desktop screen
06:20:01 <yac> chrisdone: interesting. How do you know what is typical distance?
06:20:03 <delphinas> luite: that makes sense then
06:20:14 <delphinas> I'll try to figure something out
06:20:43 <luite> delphinas: anyway, ~/.cabal, ~/.ghc and ~/Library/Haskell are the locations you typially have the files, usually you don't need to do anything with the global Library dir where GHC is installed, unless you messed it up doing global installs as root
06:21:06 <delphinas> I just did global install
06:21:28 <delphinas> for packages
06:22:36 <luite> okay, i think there's an uninstaller in the package dir somewhere
06:22:39 <delphinas> Ok just to make sense of my confusion: If I'll remove /.cabal, ~/.ghc and ~/Library/Haskell AND Users/<user>/Library/Haskell would that be enough for a clean intall useing default haskell installer for macos ?
06:22:44 <luite> assuming you installed the ghc .pkg
06:23:08 <delphinas> luite: yes I've used the intaller thing found on haskell website
06:24:44 <yac> chrisdone: you made me go get a meter. It's actually 60cm workspace and 40cm more before the table. So my viewing distance is one meter here. It's probably 10 to 20cm more at work
06:26:01 <luite> delphinas: yeah, if you messed up the global dir, you can run the uninstall-hs script as root and start from scratch
06:26:14 <luite> delphinas: but usually it's the user dir things that cause most trouble, remove them first
06:26:32 <luite> delphinas: if after a ghc reinstall you still have trouble, run ghc-pkg check to see if anything wrong is still in your pkg db
06:26:40 <delphinas> ok
06:26:47 <delphinas> thanx for co-op luite
06:30:46 <luite> delphinas: np. this service is provided free under your AppleCare coverage. anything else i can help you with, might i upsell you some overpriced accessories perhaps? ;)
06:32:21 <delphinas> luite: do you have some sweat-proof gloves to prevent accindental finger slip whilt on terminal ? ^
06:36:58 <chrisdone> luite: i would like to buy a pair of poor quality earphones for 70 euro please
06:40:01 <chrisdone> yac: here's a table http://en.wikipedia.org/wiki/Retina_Display#Models
06:40:26 <chrisdone> yac: my personal viewing distance varies from 45-60cm
06:41:17 <luite> chrisdone: are you sure you don't want a pair of poor quality headphones for 350 instead? the brand is owned by us now too. people will be able to appreciate you for your taste in headphones much better with those.
06:43:39 <luite> yay apparently ghcjs is in the official nixos repositories now, or something/
06:45:19 <chrisdone> yac: the reason you can look at the 5K 27" at 50cm~ comfortably without loss of quality is because of the resolution. your screen on the other hand requires you to move it back. similar to large television screens which need to be on the other side of the room. in terms of detail that you can see, your 23" screen at 100cm is less detailed than a 13" retina at 50cm
06:46:09 <chrisdone> yac: of course, the decision between the two comes down to how much you like to move your eyes and how far away you want your eyes to be focusing. my optician tells me it doesn't really matter
06:47:55 <delphinas> "which cabal" shows /usr/bin/cabal
06:47:58 <delphinas> as location
06:48:09 <delphinas> after fresh install.
06:49:05 <chrisdone> yac: anyhoo my point was there's no point in geting a bigger screen thinking it's better than a smaller if the resolution doesn't scale up with it
06:49:20 <chrisdone> delphinas: is ~/.cabal/bin in your PATH?
06:50:58 <trap_exit> what's the best way to make arbitrary haskell serializable ?
06:51:09 <chrisdone> there's not even a worst way
06:51:23 <vanila> I think lambdabot does that
06:51:25 <trap_exit> yeah, so these is atleast two ways that are equally bad
06:51:33 <trap_exit> that does not prevent existence of best way
06:51:48 * chrisdone glances around nervously
06:52:08 <chrisdone> you want to serialize source code, closures or values?
06:53:31 <chrisdone> http://www.reddit.com/r/haskell/comments/2otl0f/ghc_7101_will_support_static_values_allowing_you/
06:54:00 * nshepperd serializes the RealWorld
06:54:29 <delphinas> chrisdone: yes ~/.cabal/bin is in PATH
06:54:52 <chrisdone> and ls ~/cabal/bin/cabal says what?
06:55:29 <jtanguy> is ~/.cabal/bin _before_ /usr/bin in your PATH ?
06:57:19 <trap_exit> what's a good way to use (aeson | json) with ghc generics to do auto serialization / deserialization ?
06:58:14 <chrisdone> just deriving (Generic) in your data type and then write "instance FromJSON Type"
06:58:27 <chrisdone> the default methods will use the generic instance
06:58:38 <trap_exit> and which library do I use to get FromJSON ?
06:58:41 <chrisdone> aeson
06:59:24 <trap_exit> chrisdone: you are more helpful than the "there's not a worst way" comment :-)
06:59:59 <chrisdone> your second question was more helpful too ;)
07:08:18 <delphinas> chrisdone: ls ~/cabal/bin/cabal
07:08:25 <delphinas> no such file or directory
07:08:36 <vanila> http://columbiaspectator.com/news/2014/09/21/cumc-student-jonathan-tang-dies-24 is this the same Jonathan Tang who wrote "Write yourself a scheme in 24 hours"?
07:08:55 <chrisdone> delphinas: oop, i meant ls ~/.cabal/bin/cabal =)
07:09:18 <delphinas> Yh i've noticed that
07:09:20 <delphinas> same thing
07:09:38 <delphinas> there is not bin in .cabal/
07:09:41 <delphinas> no*
07:10:26 <delphinas> Location is I think /Users/<user>/Haskell/bin
07:13:57 <delphinas> Cabal installs inn ~Library/Haskell/bin but "which cabal" shows /usr/bin/cabal lol
07:14:03 <delphinas> shall I just remove /usr/bin/cabal ?
07:14:21 <dfeuer> Oooooooooh
07:14:46 <delphinas> dfeuer: sounds like orgasm
07:14:48 <delphinas> ^
07:15:05 <barrucadu> delphinas: Just add ~/Library/Haskell/bin to your $PATH
07:15:17 <dfeuer> delphinas, I figured out that I had more special cases than I needed :)
07:15:23 <delphinas> barrucadu: I did long time ago!
07:15:43 <jtanguy> is it *before* /usr/bin in your path ?
07:15:50 <barrucadu> Ok, what is your $PATH now?
07:18:13 <delphinas> jtanguy: and barrucadu this is in my .bash_profile
07:18:16 <delphinas> export PATH="$HOME/Library/Haskell/bin:$PATH"
07:18:33 <dfeuer> delphinas, I think I just turned an implementation that was really nice under the mess of code into one that's just really nice :-)
07:18:45 <jtanguy> delphinas: maybe this can help http://daniel.hepper.net/blog/2011/02/change-order-of-path-entries-on-mac-os-x/ (I assume you're on OSX)
07:18:49 <dfeuer> See, I actually had what I needed, but I didn't realize it.
07:19:05 <delphinas> dfeuer: legible for "orgasm" :))
07:19:27 <barrucadu> Ok, so what is the result of `echo $PATH`?
07:19:35 <delphinas> jtanguy: thanx I'll check it (yes I'm on osx)
07:19:41 <barrucadu> Because ~/.bash_profile is only read when starting bash as a login shell
07:20:23 <barrucadu> And ~/.bashrc is read for non-login shells
07:20:36 <indiagreen> vanila: unlikely, considering that on nir personal page (http://web.archive.org/web/20130413041038/http://jonathan.tang.name/) it's said that ne graduated from Amherst College in 2005
07:21:17 <indiagreen> so, if ne is 24 now, ne graduated at the age of ~15
07:21:36 <vanila> why are you calling him nir/ne
07:21:40 <delphinas> barrucadu: http://pastebin.com/Gxm8TeKA output if echo path
07:23:25 <barrucadu> Ok, are you sure that cabal installed itself to ~/Library/Haskell/bin ?
07:23:43 <indiagreen> vanila: don't like arbitrary and kinda stupid quirks of English
07:26:25 <vanila> Unless you asked Jonathan personally what pronouns he uses it seems odd and slightly rude like you're implying he is agendered or something
07:27:45 <chrisdone> "they" is already an acceptable gender neutral pronoun =)
07:28:15 <indiagreen> it's really not nir choice what pronoun I use, the same way it's not Microsoft's choice to make me refer to their products as MicroSoft™ Office® 2010
07:31:31 <vanila> using correct pronouns for people is a mark of respect, it is not the same as being legally obligated to use trademarks and copyright symbols
07:32:14 <indiagreen> chrisdone: yep, and I was using “they” before I imagined some ancestor of myself in 2200 sitting in classroom and complaining to someone else “what imbecile came up with this... “they” is plural in some cases and singular in another cases and everything... any child can design a language better than that”
07:33:18 <barrucadu> So the solution is to invent some new pronouns and assume everyone will recognise what they mean from context?
07:33:52 <chrisdone> indiagreen: that's not how natural language evolves
07:35:37 <Chathurga> Language is made up, do whatever
07:35:58 <EvanR> in Control.Category what does the api doc mean when it says instance Category * (->)
07:36:10 <EvanR> Category is a single parameter class, it seems
07:36:22 <EvanR> also in what sense must id and (.) form a monoid
07:37:06 <jesyspa> EvanR: For any type A, id and (.) restricted to A form a monoid.
07:37:31 <mikeplus64> EvanR: i think that's a bug in the way that haddock and ghc used to display the kinds to polykinded typeclasses (the first thing)
07:37:41 <jesyspa> id :: A -> A is the identity element, and (.) :: (A -> A) -> (A -> A) -> (A -> A) is the operation.
07:37:48 <mikeplus64> er, still does apparently
07:38:13 <EvanR> jesyspa: that part makes sense
07:38:21 <EvanR> is that all?
07:38:36 <jesyspa> I think so; not quite sure.
07:39:28 <chrisdone> i like the SomeFoo convention
07:39:49 <chrisdone> it both sounds nice and it's a pun
07:39:59 <EvanR> jesyspa: actually no, because that doesnt explain the laws that using different types is supposed to follow
07:40:38 <EvanR> something spiritually similar to a monoid
07:40:59 <jesyspa> EvanR: I'm not sure what more there is to say than that they have to form a category. :P
07:41:08 <EvanR> right
07:41:22 <EvanR> which makes the monoid remark redundant
07:42:00 <tasker> I'm getting this error when trying to install one of my projects: http://lpaste.net/116909
07:42:05 <tasker> what does this mean?
07:42:10 <tasker> and, how do I fix it?
07:42:46 <trap_exit> rm -rf
07:43:16 <trap_exit> can you paste the entire source
07:43:19 <trap_exit> and or create a minimal test case?
07:44:08 <tasker> trap_exit: Are you talking to me? If so, not really - this is a huge project.
07:44:09 <indiagreen_> trap_exit: look at the error
07:44:28 <trap_exit> yeah
07:44:55 <trap_exit> why can't I get code for a minimal failure case ?
07:45:01 <tasker> I'm not really clear on how it happened - I didn't --allow-newer or anything
07:45:24 <tasker> uh, well it's nothing to do with my project really. It is somehow a problem of the versions of packages that are installing.
07:45:44 <trap_exit> I'm basically saying:
07:45:52 <trap_exit> if I do't have enough info to reproduce the error
07:45:53 <trap_exit> how can I help sovle it?
07:46:57 <tasker> I guess you might have come across this problem before, or something similar.
07:47:35 <indiagreen> tasker: what's the version of monad-control being installed?
07:47:52 <indiagreen> try adding a <0.4 constraint on it
07:48:03 <tasker> 1.0.0.1
07:48:45 <indiagreen> https://github.com/lykahb/groundhog/pull/34#issuecomment-67235230
07:49:06 <indiagreen> the error is similar
07:49:31 <tasker> indiagreen: indeed. trying now.
07:49:46 <sivteck> trap_exit, (source: http://hackage.haskell.org/package/either-4.1.2/docs/src/Control-Monad-Trans-Either.html )
07:51:33 <tasker> indiagreen: Hm, it looks like either puts an upper limit on monad-control anyway.
07:51:45 <tasker> I actually don't have either in my .cabal file, so I'm not even clear where it is coming from.
07:51:46 <barrucadu> tasker: either-4.1.2 doesn't
07:51:47 <indiagreen> it doesn't
07:51:51 <tasker> ah true
07:52:16 <tasker> Is there some way to see where a dep comes from ?
08:06:03 <EvanR> data Void (no constructors) still has bottom?
08:06:42 <chrisdone> (undefined :: Void) ?
08:07:05 <chrisdone> i think only unboxed types don't have bottom
08:07:42 <chrisdone> unless i'm mistaken, (undefined :: Int#) is a kind error
08:07:49 <EvanR> nice
08:10:16 <chrisdone> hm, nah, it's not a kind error
08:10:31 <chrisdone> hnn
08:10:32 <trap_exit> how does Haskell's Dynamic work?
08:10:36 <trap_exit> seems very cool and very magical
08:11:51 <EvanR> Dynamic relies on Typeable to combine the value with a TypeRep, used to check coercions
08:11:57 <chrisdone> let p :: Int#; !p = undefined in p -- compiles
08:12:08 <EvanR> that seems odd
08:12:13 <EvanR> what happens?
08:12:24 <chrisdone> λ> let p :: Int#; !p = undefined in ()
08:12:24 <chrisdone> *** Exception: Prelude.undefined
08:12:53 <chrisdone> but also
08:12:54 <chrisdone> λ> let p :: Int#; p = undefined in ()
08:12:54 <chrisdone> *** Exception: Prelude.undefined
08:12:59 <chrisdone> so i suppose that makes some sense
08:13:17 <chrisdone> perhaps the value doesn't contain bottom then
08:14:03 <chrisdone> sort of like x = throw "blah" in a strict language would do
08:16:05 <delphinas> I think I've fixed the problem
08:16:13 <EvanR> so Int# doesnt contain bottom, a value of type Int# cant be bottom
08:16:32 <delphinas> There was a mess within pATH due to old installation of ghc
08:16:36 <chrisdone> is bottom for values defined in terms of (\x -> p) _|_ = p, or case _|_ of _ -> … = _|_?
08:16:46 <delphinas> deleted/clean installed and sorted!
08:16:58 <delphinas> thank toy everyone who helped me!
08:17:07 <delphinas> thanx to*
08:17:47 <EvanR> chrisdone: these do differnt things for Int#? or for everything
08:18:27 <chrisdone> hm, they do the same thing
08:19:10 <chrisdone> so then perhaps indeed unlifted values have no bottom. it makes sense, but considering them inside a lazy language muddies the waters a bit
08:19:22 <chrisdone> λ> case undefined :: Int# of _ -> ()
08:19:23 <chrisdone> *** Exception: Prelude.undefined
08:19:23 <chrisdone> λ> (\x -> ()) (undefined :: Int#)
08:19:23 <chrisdone> *** Exception: Prelude.undefined
08:19:26 <chrisdone> ^ reasonable behaviour
08:20:28 <EvanR> yes
08:20:43 <EvanR> > case undefined of _ -> ()
08:20:45 <lambdabot>  ()
08:20:48 <chrisdone> λ> let f :: () -> Int#; f _ = undefined in I# (f ())
08:20:48 <chrisdone> *** Exception: Prelude.undefined
08:20:48 <chrisdone> λ> let f :: () -> Int#; f _ = undefined in snd (I# (f ()),())
08:20:48 <chrisdone> ()
08:20:56 <chrisdone> also reasonable ^
08:20:58 <EvanR> > (\x -> ()) undefined
08:20:59 <lambdabot>  ()
08:21:18 <chrisdone> (#I is the constructor Int# -> Int, in case it wasn't obvious)
08:21:33 <chrisdone> er, I#
08:21:55 <EvanR> so I# is lazy? or (,)
08:22:07 <chrisdone> (,)
08:22:19 <Dodecahedrus> hi guys, i cant set up stackage on a new machine, can someone help me out?
08:22:24 <chrisdone> I# is needed because Int and Int# are of different kinds, so you can't put it in the tuple without I#
08:22:46 <chrisdone> snd (undefined :: Int#,()) =>
08:22:46 <chrisdone> Kind incompatibility when matching types:
08:22:46 <chrisdone>       a0 :: *
08:22:46 <chrisdone>       Int# :: #
08:22:48 <EvanR> :k (,)
08:22:50 <lambdabot> * -> * -> *
08:22:57 <chrisdone> :k Int#
08:22:58 <lambdabot>     Not in scope: type constructor or class ‘Int#’
08:22:58 <lambdabot>     Perhaps you meant one of these:
08:22:58 <lambdabot>       ‘Int’ (imported from Data.Int), ‘Int8’ (imported from Data.Int)
08:23:03 <EvanR> wurble
08:23:06 <chrisdone> eh, it's from GHC.Types =)
08:23:26 <EvanR> #
08:23:31 <chrisdone> {-# LANGUAGE MagicHash #-}; import GHC.Prim; import GHC.Types
08:23:36 <chrisdone> fwiw if you want to play with it
08:24:01 <chrisdone> i think it's kinda neat
08:24:16 <chrisdone> there're some other restrictions like
08:24:16 <chrisdone> let x = x :: Int# in ()
08:24:19 <chrisdone> Recursive bindings for unlifted types aren't allowed: x = x :: Int#
08:25:25 <EvanR> > let x = x :: Int# in ()
08:25:27 <lambdabot>  Not in scope: type constructor or class ‘Int#’
08:25:27 <lambdabot>  Perhaps you meant one of these:
08:25:27 <lambdabot>    ‘Int’ (imported from Data.Int), ‘Int8’ (imported from Data.Int)
08:25:42 <EvanR> > undefined :: Int#
08:25:44 <lambdabot>  Not in scope: type constructor or class ‘Int#’
08:25:44 <lambdabot>  Perhaps you meant one of these:
08:25:44 <lambdabot>    ‘Int’ (imported from Data.Int), ‘Int8’ (imported from Data.Int)
08:26:01 * EvanR needs to learn osx keycombo for lambda
08:28:46 <EvanR> 
08:29:11 * hackagebot respond 1.1.0 - process and route HTTP requests and generate responses on top of WAI  http://hackage.haskell.org/package/respond-1.1.0 (raptros)
08:32:55 <lericson> λ
08:33:22 <lericson> > let x = λ → 2 in x
08:33:32 <lericson> > let x = \ -> 2 in x
08:33:37 <lericson> no?
08:33:55 <lericson> lambdabot: rude
08:34:42 <Chathurga> \ -> 2? Is that at thing?
08:35:06 <lericson> it seems not so
08:35:37 <Chathurga> Jesus
08:35:47 <Chathurga> That's a lot of parts/joins
08:35:55 <lericson> nah it's called a netsplit
08:36:06 <lericson> just ignore joins,quits,nicks
08:36:17 <lericson> in irssi it's something like /ignore #haskell joins,quits,nicks,parst
08:36:19 <lericson> parts*
08:36:51 <lericson> it happens when the irc server network gets partitioned, and forms two networks instead
08:39:52 <lericson> old but gold reading http://james-iry.blogspot.se/2009/05/brief-incomplete-and-mostly-wrong.html
08:48:16 <jarlg> Having problems with ghci after failed `cabal install`; ghci segfaults "all the time" f.ex. when trying to use System.Random or most things really, sometimes unprovoked. Any ideas how to fix?
08:49:12 * hackagebot relational-query 0.2.0.0 - Typeful, Modular, Relational, algebraic query engine  http://hackage.haskell.org/package/relational-query-0.2.0.0 (KeiHibino)
08:51:10 <trap_Exit> is there a short description of relation algebra somewhere? I want to impelmtent the R of a RDBMS in haskell
08:51:26 <wei2912> wow
08:51:27 <wei2912> join spam
08:51:52 <jarlg> wei2912: sorry :)
08:52:48 <jarlg> though we disagree on the 'pointless' in spam
08:53:11 <wei2912> jarlg: well, this join spam is pointless
08:54:13 * hackagebot yesod-core 1.4.7 - Creation of type-safe, RESTful web applications.  http://hackage.haskell.org/package/yesod-core-1.4.7 (MichaelSnoyman)
08:57:20 <joe9> Is there a haskell library function to parse the date string "1998-10-29" to a haskell date?
08:57:33 <chrisdone> the time package can do that
08:58:53 <chrisdone> λ> parseTime System.Locale.defaultTimeLocale "%Y-%m-%d" "1998-10-29" :: Maybe Day
08:58:53 <chrisdone> Just 1998-10-29
08:59:18 <joe9> chrisdone: ok, thanks.
09:03:38 <animeshs_> animesh
09:04:48 <joe9> chrisdone: btw, I am a big fan of your haskell-mode.
09:05:57 <joe9> chrisdone: though I feel that my configuration is messed up.  http://codepad.org/xs8SLCaO
09:06:06 <delphinas> any ideas why cabal fails to install either-4.1.2 :}
09:06:14 <athan> > sequence $ repeat chrisdone++
09:06:16 <lambdabot>  <hint>:1:30:
09:06:16 <lambdabot>      parse error (possibly incorrect indentation or mismatched brackets)
09:06:24 <joe9> chrisdone: I will have go through and remove the dead code from my configuration.
09:08:58 <athan> Hi everyone, I'm trying to make a monad transformer, where I have a typeclass that needs two trailing parameters, S.T. when the transformer has it's inner monad applied, it has a kind of (*->*->*), where these monad transformers themselves then have kinds ((*->*)->*->*->*). They're _kinda_ like MonadReaders, except the index is on the right instead of the left. Is there any way I could make these monads instances of MonadTrans? I can't
09:08:58 <athan> seem to wrap my head around how I could consume that index's kind parameter - the only idea I can see is making type-level lambdas :S
09:11:43 <barrucadu> delphinas: Because either-4.1.2 doesn't impose an upper bound on monad-control, and the latest version of monad-control has an incompatible interface
09:12:19 <delphinas> so how I suppose to install ghc mod then..
09:12:34 <barrucadu> Add a constraint that monad-control be <0.4
09:19:14 * hackagebot relational-record 0.1.0.1 - Meta package of Relational Record  http://hackage.haskell.org/package/relational-record-0.1.0.1 (KeiHibino)
09:22:03 <delphinas> barrucadu: thanx for answer. By adding constraint do u mean install the version of monad-control <0.4 ?
09:24:31 <delphinas> Probably not. I'm currently figuring it out
09:25:08 <monochrom> --constraint="monad-control < 0.4"
09:30:09 <delphinas> alright thanx. But I have 2 version one is 0.3.3 and other is 1.0.0.1
09:42:27 <delphinas> if I remove either 1
09:43:02 <begriffs> How do I get parsec to capture all characters up until a final quote, if it exists? Quotes within the string should be captured, only the final one excluded.
09:43:23 <delphinas> Sorry: either 4.3.2 requires monad control version 1.*
09:44:06 <delphinas> Ohh I get it.
09:48:34 <delphinas> Thanx monochrom and barrucadu again
09:49:24 <monochrom> it causes cabal to go for an older version of either.
09:49:45 <monochrom> err, no, probably not.
09:53:05 <chrisdone> λ> renderText (NounPhrase (NP (noun $(someHaskell "5")) Indefinite Singular))
09:53:05 <chrisdone> "an expression"
09:53:05 <chrisdone> λ> renderText (NounPhrase (NP (noun $(someHaskell "x = 5")) Indefinite Singular))
09:53:05 <chrisdone> "a declaration"
09:53:17 <chrisdone> hehe. i'm having more fun than i thought i would generating english phrases
09:53:31 <barrucadu> Are you making a thing to describe Haskell in English?
09:53:59 <chrisdone> partly haskell, partly generating exercise questions about haskell
09:54:09 <Chathurga> he wants to generate the perfect monad tutorial
09:54:11 <chrisdone> and the generation needs to be somewhat reliable
09:54:13 <chrisdone> heh
09:54:23 <monochrom> begriffs: between (char '"') (char '"') (satisfy ('"' /=))
09:54:25 <mmmm> begriffs: What is your problem?
09:55:54 <begriffs> I am trying to parse some weirdly formatted error messages. They are comprised of key value pairs where the values are strings but can contain stray unescaped quotes.
09:56:21 <begriffs> eg:   Status: ""Fatal error""; Code: "42703"; Message: "column "foo" does not exist”.
09:56:36 <indiagreen> what's the easiest way to convert a ByteString into a CString which won't be freed automatically (so Data.ByteString.useAsCString can't be used out of the box)?
09:57:58 <mmmm> begriffs: hmm, how else are the messages delimited?
10:01:43 <begriffs> mmmm: just like that. Keys can be in any order, but they are always separated by semicolons
10:01:51 <begriffs> mmmm: thanks for looking at this, I have to go afk now though
10:24:16 <trap_exit> what the successful most haskell startup date to ?
10:24:16 * hackagebot deepseq-bounded 0.5.2 - Bounded deepseq, including support for generic deriving  http://hackage.haskell.org/package/deepseq-bounded-0.5.2 (AndrewSeniuk)
10:24:16 <trap_exit> is
10:24:18 * hackagebot seqaid 0.1.3 - Dynamic strictness control, including space leak repair  http://hackage.haskell.org/package/seqaid-0.1.3 (AndrewSeniuk)
10:24:20 * hackagebot leaky 0.1.0.3 - Robust space leak, and its strictification  http://hackage.haskell.org/package/leaky-0.1.0.3 (AndrewSeniuk)
10:25:13 <jle`> facebook
10:25:21 <Hijiri> urgh, accidentally installed cabal-install in sandbox
10:32:47 <hcore> so im a bit confused, and i think i get why the error is happening i just don't know how to fix it
10:33:21 <hcore> im trying to traverse over [Chars] and get sets of 13 chars
10:33:31 <hcore> so basically position 0-12, 1-13, etc.
10:33:40 <hcore> base case is null list
10:33:42 <hcore> thirteens (x:xs) = (take 13 x:xs) : thirteens xs
10:33:58 <benzrf> hcore: why hardcode 13
10:34:02 <hcore> but what happens is take gives me back its own list
10:34:08 <benzrf> anyway theres a much easier way to do that
10:34:13 <hcore> benzrf, just working on some project euler challenges
10:34:18 <benzrf> oh, hold on
10:34:32 <benzrf> hcore: the problem is that:
10:34:32 <hcore> i think take makes me result in [[]] because the inner one is take
10:35:01 <benzrf> hcore: take 13 x:xs = (take 13 x):xs
10:35:13 <meditans> lens people, I need an advice on design. Here is a simplified example to explain the problem:
10:35:17 <benzrf> hcore: prefix application binds tighter than any operator
10:35:31 <meditans> data Structure = Structure {first :: Thing, second :: Thing}
10:35:54 <meditans> sorry, you can imagine Thing = Double so
10:36:31 <meditans> Structure = Structure {first :: Double, second :: Double}
10:36:32 <meditans>  
10:36:41 <hcore> benzrf, you mean take is taking 13 from x before x is con'd to xs?
10:36:59 <meditans> imagine the "lens" greater, which points to the greater one of the two doubles
10:37:16 <benzrf> hcore: yep
10:37:21 <benzrf> hcore: well
10:37:30 <benzrf> hcore: you're consing the first 13 elements of x, to xs
10:37:31 <Hermit> hcore: function application > infix operators
10:37:40 <hcore> ahh that works
10:37:43 <meditans> it isn't a real lens, because setting two times isn't the same as setting one time with the final parameter
10:37:47 <hcore> got it, just needed some parenthese
10:38:00 <benzrf> meditans: indeed
10:38:02 <hcore> thanks benzrf and Hermit !
10:38:04 <meditans> so, what kind of optic is that, instead? A prism?
10:38:05 <benzrf> np
10:38:08 <benzrf> meditans: a getter
10:38:11 <benzrf> i think
10:38:34 <podolski> hi haskell people
10:38:44 <podolski> i am bad with maths
10:38:45 <meditans> benzrf: but I would be able to change the upper number, so I'd like also the power to write back
10:38:54 <podolski> but i want to learn to program
10:39:00 <podolski> i recently saw REAL WORLD HASKELL
10:39:07 <podolski> and wondered if 1. haskell was a good place for me to start
10:39:11 <meditans> benzrf: which is the idiomatic way to do that?
10:39:17 <podolski> and 2. if REAL WORLD HASKELL was the best book to guide me
10:39:22 <podolski> so please help?
10:39:31 <benzrf> meditans: well now you're just asking for too much
10:39:38 <benzrf> meditans: we have laws for a reason you know
10:39:39 <majeure> podolski, you don't know how to program?
10:39:49 <benzrf> meditans: you can still use it as a lens, it'll just behave extremely weirdley
10:39:56 <podolski> majeure: I have "some" experience in C, but not enough to write anything useful. Hello world etc.
10:39:57 <benzrf> podolski: haskell is a great place to start
10:40:04 <benzrf> podolski: the correct place to start is not rwh, but rather
10:40:04 <podolski> I want to be the best i can be.
10:40:06 <benzrf> @where to-start
10:40:07 <lambdabot> https://github.com/bitemyapp/learnhaskell
10:40:08 <podolski> But I am BAD with maths
10:40:20 <benzrf> podolski: by that do you mean you have done poorly in math class
10:40:24 <benzrf> podolski: or that you are bad at math
10:40:25 <Hermit> podolski: so?
10:40:25 <majeure> What's wrong with RWH, benzrf?
10:40:32 <podolski> benzrf: think both
10:40:40 <benzrf> podolski: how do you know the latter
10:40:43 <podolski> Hermit: people say haskell is heavily math inclined
10:40:44 <benzrf> majeure: it;s not as good as cis194
10:40:51 <podolski> benzrf: because i have not have practice
10:41:04 <benzrf> podolski: ok, but you dont need to /know/ math to learn haskell
10:41:08 <Hermit> podolski: algebra inclined actually
10:41:11 <benzrf> podolski: just have some of the same aptitudes as for math
10:41:59 <podolski> well ok
10:42:02 <Hermit> podolski: there's a lot of pedantic shit involved, but it all boils down to pretty stightforward concepts, once you crystalize them
10:42:27 <podolski> "Haskell is a high-level, pure functional programming language with a strong static type system and elegant mathematical underpinnings"
10:42:28 <benzrf> pedantic shit pfft
10:42:28 <hcore> podolski, im not so great at math, spent a few months learning java and switched to Haskell, it's not really any more mathy than other languages
10:42:37 <benzrf> hcore: yes it is!
10:42:39 <podolski> hcore: do oyuo ghave github?
10:43:05 <hcore> benzrf, it's written more in mathematical notation
10:43:10 <benzrf> no, what i mean is
10:43:19 <benzrf> hcore: the mindset of its community is more math-influenced than other languages'
10:43:22 <podolski> is this where i should start benzrf http://www.seas.upenn.edu/%7Ecis194/spring13/lectures.html
10:43:25 <hcore> that's true
10:43:27 <benzrf> podolski: indeed
10:43:33 <benzrf> podolski: i also recommend joining #haskell-beginners :)
10:43:36 <hcore> but you dont need to know much to get it
10:43:37 <podolski> hope i can do it
10:43:43 <hcore> there's a beginners channel!?!?
10:43:45 <benzrf> hcore: 01:40 < benzrf> podolski: ok, but you dont need to /know/ math to learn haskell
10:43:48 <benzrf> 01:40 < benzrf> podolski: just have some of the same aptitudes as for math
10:43:58 <benzrf> hcore: yes it's even linked from that page :p
10:43:59 <Hermit> benzrf: try to read any haskell-related paper whatsoever, see if I'm wrong
10:44:11 <lain1> The projects page for gtk2hs linked to from https://www.haskell.org/haskellwiki/Gtk2Hs is broken and I don't know who to notify
10:44:13 <benzrf> Hermit: math mindset :)
10:44:47 <hcore> i'll need to stop asking my beginner questions here
10:45:17 <lain1> It's also the first result of googling gtk2hs. So it's not as simple as editing the wiki to point to a different site
10:45:23 <sivteck> You can ask them here, no problem...
10:45:25 <hcore> podolski, no, no github
10:45:35 <podolski> hcore: any code online
10:45:45 <dcoutts> lain1: gtk2hs-users@lists.sourceforge.net
10:45:52 <hcore> podolski, i have a github with a poor implementation of battleship written in java lol
10:45:54 <lain1> Ok thanks
10:46:05 <hcore> podolski, no im a beginner like you
10:46:13 <podolski> this leran you a haskell is a picture book <_<
10:46:25 <hcore> podolski, i read that every morning and night
10:46:27 <hcore> it's great
10:46:31 <hcore> just looks silly
10:46:33 <dcoutts> lain1: and you could ask the people in #haskell-infrastructure since I'm guessing it's related to the recent WordPress vulnerability (they may have taken it down or reset it somehow)
10:46:47 <benzrf> podolski: lyah is p good for teaching the basic syntactic concepts but cis194 is much better for learning how to think using them
10:47:05 <podolski> benzrf: how long would it take to cover cis194 before i can read REAL WORLD HASKELL
10:47:15 <benzrf> podolski: you shouldnt need to read RWH i think
10:47:20 <benzrf> i mean you can if you want
10:47:25 <Hijiri> RWH is more of a supplement, and it's outdated
10:47:25 <majeure> It's terribly annoying how you capitalise RWH.
10:47:30 <podolski> sorry
10:47:41 <benzrf> majeure: no need to be hostile
10:47:49 <majeure> I'm not.
10:47:58 <meditans> benzrf: I'd rather not use a lens with doesn't not obey to the laws. It isn't there some sort of union between a -> b and b -> Maybe a?
10:48:08 <podolski> benzrf: how much time will this take to finish cis
10:48:17 <benzrf> meditans: huh?
10:48:29 <benzrf> podolski: it depends on how much effort you put in :3
10:48:32 <benzrf> podolski: why?
10:48:36 <podolski> benzrf: wondering
10:48:39 <podolski> want to be useful
10:48:43 <benzrf> podolski: i wouldnt be in a hurry if i were you
10:48:51 <podolski> im not in a hurry
10:48:52 <benzrf> podolski: learn it for the sake of itself
10:48:59 <podolski> just wondering how long it would take before i am able to write useful stuff
10:49:08 <delphinas> Anyone uses ST3 with haskel and sublimehaskel plugin?
10:49:13 <benzrf> podolski: if you think "i wanna know this already so that i can write cool programs" you'll probably end up understanding it less :
10:49:17 <jle`> what's wrong with capitalizing it like RWH
10:49:20 <podolski> benzrf: ture
10:49:32 <podolski> ok here goes nothing!
10:49:36 <podolski> be back once i finish this
10:50:15 <majeure> I thought LYAH was cute, and amusing when bonus wrote it.
10:50:23 <benzrf> majeure: certainly it is
10:50:56 <hexagoxel> jle`: the all caps, written out one was meant, i think
10:51:02 <jle`> ah
10:53:18 <tasker> If I have both a cabal.config, and a myproject.cabal, which set of restrictions on installed packages takes precedence ?
10:55:25 <schell> can ghci reload a specific function in a module?
10:55:35 <schell> or must it reload the entire module?
10:56:05 <dcoutts> tasker: both.
10:56:27 <tasker> dcoutts: Okay, so it is possible to specify something that can't install then ?
10:56:32 <dcoutts> tasker: the cabal.config is directly equivalent to using those flags on the command line when you 'cabal configure' your package
10:56:34 * majeure wonders why melpa isn't finding haskell-mode.
10:56:48 <dcoutts> tasker: you can specify inconsistent constraints, yes
10:56:55 <sm> tasker: rather easily :)
10:56:57 <dcoutts> and it will fail accordingly
10:57:12 <tasker> right, right
10:59:17 * hackagebot bdd 0.2.0.0 - Behavior-Driven Development DSL  http://hackage.haskell.org/package/bdd-0.2.0.0 (irekjozwiak)
11:05:35 <tasker> So in my cabal file I have a library, then an executable that depends on the library and re-uses some of the packages. Is it good style to put package ranges on the executable as well, even though the library it imports already has them?
11:06:26 <dcoutts> tasker: it's unnecessary to repeat the version constraints, they'll always be the same for all components in a package
11:09:56 <schell> does ghci still have some dynamic linking issues on mac os x?
11:17:22 <endiruna>  /quit
11:26:01 <johnw> that could make an amusing epitath
11:26:09 <johnw> ph
11:26:59 <chrisdone> lol
11:27:13 <johnw> hey, at least I have an audience of one :)
11:34:19 * hackagebot yesod-bin 1.4.3 - The yesod helper executable.  http://hackage.haskell.org/package/yesod-bin-1.4.3 (MichaelSnoyman)
12:04:36 <rofer> How do I begin tracking down what's causing a stack overflow in my program?
12:05:14 <rofer> It's a backend for a web thing and I'm getting a stack overflow before I even get any connections. I think it may be acid-state related, but I'm not sure.
12:05:28 <earthy> rofer: log stuff.
12:05:40 <earthy> rofer: and think about what your code is doing
12:05:45 <nkar> rofer: try to isolate as much as possible
12:07:18 <rofer> earthy: I thought I knew what my code was doing and I have very little stuff to log
12:08:42 <rofer> Is there any way to see how stack space is being used? I really don't get what could be taking up 8MB of space
12:08:55 <delphinas> Anyone who uses ST3 as editor: do u have any tricks to build and open hs file into terminal
12:09:07 <rofer> I have barely any data at all.
12:12:24 <cryzed> delphinas, into terminal?
12:12:28 <cryzed> Ctrl+B works for me
12:12:45 <cryzed> and tries to execute the main function of the currently opened module
12:12:47 <delphinas> ctrl+b is useing a built-in console of ST3
12:13:12 <cryzed> yes that works for me on Windows 7. The Haskell suite modifies the PATH and should make "runhaskell" available
12:13:12 <delphinas> But it would be pretty neat to open the file straight into terminal (OSx)
12:13:16 <cryzed> ah I see
12:13:22 <cryzed> You should be able to define a custom build system then
12:13:36 <cryzed> and do something like terminal <runhaskell <args>>
12:13:55 <delphinas> Yeah but I'm struggling with that :) couldnt find info for osx
12:14:06 <cryzed> delphinas, one second
12:14:16 <cryzed> http://stackoverflow.com/questions/989349/running-a-command-in-a-new-mac-os-x-terminal-window http://sublimetext.info/docs/en/reference/build_systems.html
12:14:19 <cryzed> I hope these are helpful
12:15:17 <cryzed> ah apparently osx doesn't make it easy. I can't help you there, sorry -- I don't use that OS
12:15:42 <delphinas> Ok thanx cryzed
12:15:47 <cryzed> you are welcome
12:24:16 <sinelaw> Peaker, +1 on your reddit thing-a-ma-gig, but I think it needs a simpler explanation for dummies
12:25:02 <sinelaw> (I mean the git tool)
12:25:07 <Peaker> sinelaw: working on my emacs-haskell support now
12:25:15 <sinelaw> oh?
12:25:34 <sinelaw> Peaker, the thing I didn't understand was what exactly does it actually do, but I guess the README is for that
12:25:43 <Peaker> yeah, it is
12:25:50 <Peaker> It makes conflicts much less painful
12:25:59 <sinelaw> Peaker, yeah but how
12:26:09 <sinelaw> technically in the merge world
12:26:59 <Peaker> sinelaw: it does similar stuff to what a good mergetool would do, but lets you do them with your text editing tools.  If you do a mass rename - just repeat it in the conflict state and re-run resolve tool
12:27:11 <Peaker> sinelaw: and the conflict is likely to disappear magically
12:29:44 <sinelaw> Peaker, it's kinda scary
12:29:51 <Peaker> sinelaw: what do you mean?
12:30:28 <sinelaw> Peaker, well you can always git diff your resulting merge so not so bad
12:30:34 <Peaker> sinelaw: the idea is that if you apply your changes in the conflicted state, on all unapplied sides (base & a|b) then it becomes a "trivial" conflict
12:30:51 <sinelaw> Peaker, but it's kinda scary to use a new tool for merging unless you know exactly how it works
12:30:52 <Peaker> because one of the sides becomes equal to the base
12:31:15 <sinelaw> ya
12:31:19 <Peaker> it just looks for a==base -> choose b  OR:  b==base -> choose a  OR:  a == b -> choose a
12:31:30 <Peaker> and it has a "-d" mode to show you wall-of-text conflicts in diff -u format
12:31:43 <Peaker> which is mighty useful too
12:34:43 <sinelaw> Peaker, ok will try next time
12:41:41 <vamega> Hi. I'm trying to understand the state monad. And I'm looking at this blog post.
12:41:42 <vamega> http://brandon.si/code/the-state-monad-a-tutorial-for-the-confused/
12:42:31 <vamega> Actually never mind.
12:42:50 <vamega> I just understood what I was about to ask in the process of phrasing the question.
12:48:25 <delphinas> for the guys on OSx: what IDE r u using?
12:56:52 <johnw> Emacs
13:06:43 <jfhall> emacs + spacemacs = amazing
13:15:14 <rofer> Can you give cabal options to use when running the executable with cabal run?
13:22:34 <johnw> dfeuer: ping
13:28:36 <nkar> what's the best way to force the contents of the record when using recordwildcards?
13:29:55 <delphinas> How do u compile and run hs files under OsX and sublime text
13:30:12 <chrisdone> nkar: any reason you're not banging all your record's fields?
13:31:27 <nkar> chrisdone: lack of experience.  should it be the rule of thumb as dons said in the haskell cast?
13:31:40 <chrisdone> pretty much
13:32:02 <nkar> okay, let me try that
13:32:02 <chrisdone> there're cases when you do want laziness for a constructor's slots but it requires experience to know when
13:32:13 <nkar> hehe
13:35:25 <nkar> chrisdone: works as expected now, thanks for the suggestion
13:35:30 <chrisdone> welcome =)
13:39:56 <dfeuer> johnw, pong
13:41:12 <dfeuer> chrisdone, I actually am having trouble understanding why you'd ever want strict fields in a constructor that are *not* {-# UNPACK #-}
13:41:58 <johnw> dfeuer: so, after our talk, today I ran across a legitimate need for a free monad
13:42:17 <fuzzyhorns> been using nix this last day or so, and it makes me wonder, why have i always had so much trouble with cabal?
13:42:23 <chrisdone> dfeuer: in ghc 7.8 strict fields are automatically unpacked
13:42:30 <dfeuer> johnw, oh, okay.
13:42:36 <fuzzyhorns> as compared to nix, or even ruby's bundler, it seems more often than not when i use cabal i have an issue
13:42:44 <fuzzyhorns> that seems to lead me down some serious yak shaving
13:42:48 <dfeuer> chrisdone, aren't only monomorphic fields unpackable?
13:42:59 <dfeuer> Or am I wrong about that?
13:43:35 <chrisdone> sure, those aren't unpacked
13:43:36 <dfeuer> johnw, what was the need?
13:43:37 <nkar> chrisdone: to expand on this a little: I'm trying not to do anything unless I know that it really matters.  otherwise, it's just a cargo cult.  if I'm not satisfied with performance, I start to play with profiling.  in this particular case, it's not a performance issue.  I just wanted the command line arguments to be parsed as early as possible.
13:43:54 <quchen> chrisdone, dfeuer: Strict fields of "small" size, i.e. up to a machine word, are automatically unpacked.
13:44:04 <johnw> dfeuer: one sec, I'll show
13:44:13 <chrisdone> quchen: nod
13:44:24 * hackagebot xml-extractors 0.2.1.0 - Simple wrapper over xml to extract data from parsed xml  http://hackage.haskell.org/package/xml-extractors-0.2.1.0 (holmisen)
13:45:13 <dfeuer> chrisdone, quchen, I was thinking about this in the context of IntMap. The child maps of an IntMap are currently marked strict. I'm thinking of making them lazy so I can support a nice fromFunction/tabulate/memoize for Data.IntMap.Lazy. Aside from the pain of going through and replacing loads of constructor calls with calls to a smart constructor, is there anything wrong with this idea?
13:45:14 <chrisdone> nkar: i prefer it for more predictable behaviour in general
13:46:05 <fuzzyhorns> is cabal just "bad" as compared to bundler or nix, or am I using it badly?
13:46:30 <dfeuer> fuzzyhorns, my understanding is that if you are comparing it to nix, you are comparing apples to refrigerators.
13:46:35 <dfeuer> I don't know what bundler is.
13:46:36 <quchen> dfeuer: I'm not sure why Map+co are strict in the spine. I've only got a couple of good guesses.
13:46:51 <fuzzyhorns> dfeuer: it's what ruby uses to manage gem dependencies
13:46:55 <nkar> fuzzyhorns: with nix you can go back and forth without much trouble
13:47:12 <dfeuer> fuzzyhorns, since Ruby seems to be full of pain there, I don't see cabal is worse.
13:47:15 <fuzzyhorns> dfeuer: yeah i am sure i dont know the difference really, do you have a good way of explaining it?
13:47:26 <Clint> fuzzyhorns: no, it's equally bad as gem
13:47:30 <dfeuer> fuzzyhorns, I don't understand what any of these things do.
13:47:33 <fuzzyhorns> dfeuer: i work with ruby all day every day (meh) and no, cabal is definitely worse
13:47:42 <johnw> dfeuer: ok, check out https://github.com/jwiegley/linearscan/blob/master/test/Test.hs#L248
13:47:53 <johnw> see how at that line, I'm manually building a build to describe a snippet of assembly code
13:48:06 <nkar> fuzzyhorns: nix doesn't rebuild the packages that are already in the store, iiuc
13:48:24 <dfeuer> quchen, the same question applies to why Data.Sequence has the Deep constructors strict in their Digit fields.
13:48:29 <fuzzyhorns> nkar: i think thats correct, why does cabal do so?
13:48:55 <nkar> fuzzyhorns: because it manages deps differently
13:48:59 <johnw> now go to line 369, and see how I define a Free monad over my node structures; and then with the aid of a helper function called "add", at line 374 I can now write assembly programs directly using do-notation.  The last requirement is that I "compile" these, on line 389, into the final representation
13:49:17 <fuzzyhorns> nkar: why would the cabal way be preferable?
13:49:20 <dfeuer> quchen, in fact I have been wondering whether making the Deep constructors lazy in the Digit fields could open up the possibility of a better *>/>> implementation.
13:50:02 <nkar> fuzzyhorns: it uses a single sandbox per project, so nothing is shared.  with nix you get both: the isolation and sharing
13:50:34 <dfeuer> johnw, sounds ... interesting? I don't know asm, and a lot of this Haskell stuff goes a bit over my head.
13:50:51 <fuzzyhorns> nkar: so why have i found cabal so much more problematic to use than nix? :/
13:50:58 <johnw> dfeuer: the main idea is that writing addWith35Vars is far, far more clear and direct than what I would have to do otherwise
13:51:00 <dfeuer> johnw, I am also very sleepy right now.
13:51:04 <chrisdone> dfeuer: re unpacking, i tend to consider whether i want a boxed representation or not on a case-by-case basis… despite the memory indirection if i'm making copies it might be cheaper, etc.… but strict fields is almost always. though i've had cases where it hinders perfromance, of course
13:51:08 <johnw> and it's the free monad which makes this strategy so easy to abstract
13:51:35 <nkar> fuzzyhorns: no one says it's preferable.  and I'm not arguing in favor of cabal :)
13:51:47 <quchen> I find Cabal much harder to use than Microsoft Word. On the other hand, Cabal is not a word processor.
13:52:02 <fuzzyhorns> haha i guess i wonder why it seems everyone supports cabal in the community, as far as i can tell, but less so nix
13:52:11 <nkar> quchen: are you trying to make the "cabal is not a package manager"
13:52:11 <chrisdone> Let's add Haskell support to Microsoft Word.
13:52:13 <nkar>  argument?
13:52:30 <quchen> nkar: Yes, I find it a compelling counter-argument to the "cabal is a bad package manager" discussion.
13:52:35 <monochrom> I once posted: "GHC should come with Windows"
13:52:39 <chrisdone> it's a good copout argument
13:52:40 <fuzzyhorns> im finding it hard to read your tone, quchen and chrisdone
13:52:51 <fuzzyhorns> it sounds a bit condescending?
13:53:01 <dfeuer> chrisdone, what I'm saying is that *as I understand it*, a non-unpacked strict field only affects the "constructor function" that gets generated. You could, as I understand it, get the same effect by using a strictifying "smart constructor", leaving a lazy true constructor available for special purposes. But maybe I'm missing something important.
13:53:11 <fuzzyhorns> so what IS the best package manager for haskell, quchen?
13:53:24 <dfeuer> fuzzyhorns, I think a lot of people think nix is.
13:53:35 <fuzzyhorns> also why does cabal say it is "Cabal is a system for building and packaging Haskell libraries and programs."
13:53:46 <monochrom> the best in existence is cabal. the best in theory is not cabal.
13:53:56 <fuzzyhorns> shouldnt the thing that packages also manage the rest of the process?
13:54:07 <fuzzyhorns> monochrom: have you used nix? i am finding it much easier to deal with
13:54:14 <quchen> fuzzyhorns: Cabal is a beefed up make for Haskell.
13:54:24 <chrisdone> dfeuer: in practice, sure. it reduces bottoms. instead of _|_ :: Foo, and Foo _|_ :: Foo, there is only the first one
13:54:30 <quchen> There's no dedicated Haskell package manager as far as I know.
13:54:35 <chrisdone> that's a valuable semantic difference
13:54:53 <monochrom> nix probably doesn't know GHC-specific things. so it's probably not the best in existence.
13:55:26 <monochrom> if cabal and nix had an illegitimate child, that may be the best in theory
13:55:28 <chrisdone> fuzzyhorns: my tone is playful, i'm not following the cabal discussion
13:55:49 <monochrom> but computer programs do not procreate, even in theory.
13:56:09 <fuzzyhorns> monochrom: it has pretty robust haskell support id say
13:56:14 <fuzzyhorns> monochrom: but i am not an expert
13:56:27 <dfeuer> chrisdone, yes, a valuable semantic difference in some contexts, I suppose, but not at all, I think, in Data.Sequence. Semantically, Seq is strict in its "structure", but the semantic structure is just its length. The rest is practicality.
13:56:56 <monochrom> what does "support nix" mean?
13:57:25 <monochrom> and does using nix spares you from using cabal?
13:57:37 <chrisdone> dfeuer: nod. when talking to nkar we were probably talking about general application records and things, not very specific optimized data structures with subtle properties
13:58:53 <fuzzyhorns> monochrom: so far yes, it has replaced cabal for me
13:59:30 <monochrom> do you mean you have completely erased cabal-install's exe from your computer?
14:00:20 <monochrom> and nix knows how to read hackage.haskell.org and compute dependency graphs?
14:01:02 <johnw> Nix computes dependency graphs using its own package descriptions
14:01:13 <fuzzyhorns> monochrom: i cant speak to nix's implementational details
14:01:15 <johnw> which are mechanically derived from the .cabal files on hackage
14:01:38 <johnw> as a Nix user, I likewise have not typed "cabal" in many months
14:01:39 <fuzzyhorns> that sounds right to me, johnw
14:02:22 <monochrom> my criterion for "spares you from using cabal" is you no longer have cabal-install's exe on your computer. that is, nix doesn't even call it up behind your back.
14:03:20 <fuzzyhorns> monochrom: afaik it doesnt do anything like that
14:03:32 <fuzzyhorns> there is this tool: https://github.com/NixOS/cabal2nix
14:04:08 <johnw> monochrom: it doesn't
14:04:35 <johnw> monochrom: Haskell projects get built by compiling Setup.hs against the Cabal library, and then running "./Setup build".  The cabal-install executable is never involved at any point
14:04:58 <monochrom> then that's neat.
14:06:52 <dfeuer> chrisdone, speaking of efficiency, it's pretty cool how making an operation lazier can improve locality, and hence performance. My new implementation of <*> for Data.Sequence turns out to perform (in monolithic contexts) about the same as the old one for something bogus like (,) <$> replicate 500 () <*> replicate 500 (), but as soon as you introduce some things that actually allocate memory and such, like (,) <$> fromFunction 500 id <*> fromFunction 500
14:06:52 <dfeuer>  (+1), the new implementation gets up to twice as fast.
14:07:04 <dfeuer>  but as soon as you introduce some things that actually allocate memory and such, like (,) <$> fromFunction 500 id <*> fromFunction 500
14:07:04 <dfeuer> <dfeuer>  (+1), the new implementation gets up to twice as fast.
14:07:33 <dfeuer> Bye, y'all.
14:08:02 <chrisdone> nice =)
14:11:22 <delphinas> Anyone uses SublimeHaskell? :}
14:12:23 <fuzzyhorns> delphinas: i do c:
14:13:18 <delphinas> fuzzyhorns: what's your OS?
14:14:00 <fuzzyhorns> delphinas: yosemite
14:15:16 <delphinas> fuzzyhorns: is it possible to auto-compile the file when build system and open it in terminal ?
14:16:12 <fuzzyhorns> delphinas: fraid i dont know that :c but if you find out, id like to know too
14:16:57 <delphinas> fuzzyhorns: so u're using default settings?
14:17:28 <delphinas> i.e. when you press cmd+b you get output in the default console of ST ?
14:17:41 <fuzzyhorns> yeah
14:17:52 <fuzzyhorns> id imagine there'd be a package setting to change that
14:17:59 <fuzzyhorns> but i havent looked into it myself
14:18:32 <delphinas> yeah I'm currently trying to figure that out. Because otherwise you need to manually compile the file from terminal in order to properly run it :)
14:26:23 <mmmm> delphinas: Maybe ghcid would help?
14:27:31 <delphinas> thank you I'll check it!
14:50:40 <joe9> I have a function with the result type: IO (Maybe a) == I want to change it to return -> MaybeT a. Any suggestions on how I can do that, please?
14:51:55 <Taneb> :t MaybeT
14:51:56 <lambdabot> Not in scope: data constructor ‘MaybeT’
14:52:12 <marchelzo_> @kind MaybeT
14:52:13 <lambdabot>     Not in scope: type constructor or class ‘MaybeT’
14:52:13 <lambdabot>     Perhaps you meant ‘Maybe’ (imported from Data.Maybe)
14:52:17 <joe9> Taneb: It is in Control.Monad.Trans.Maybe
14:52:20 <Taneb> @let import Control.Monad.Trans.Maybe
14:52:23 <lambdabot>  Defined.
14:52:24 <Taneb> :t MaybeT
14:52:25 <lambdabot> m (Maybe a) -> MaybeT m a
14:52:32 <joe9> oh, thanks.
14:52:39 <Taneb> :)
14:53:52 <Evilsparza> how can it be that my custom recursive maximum function (which is far from sophisticated and does the same thing) is almost twice as fast as the built-in maximumBy?
14:54:46 <marchelzo_> what function are you passing to maximumBy?
14:54:55 <marchelzo_> and how is your version defined?
14:55:09 <Evilsparza> http://lpaste.net/2601065300065517568
14:58:01 <marchelzo_> Evilsparza, this is just a guess, but it might be because of the compare
14:59:20 <Evilsparza> marcelzo_ , ok, what would you suggest instead of compare?
15:00:19 <marchelzo_> Not sure, but I'd try it outside ghci and see if the difference is as big
15:00:47 <wyager> Evilsparza: Try compiling the code
15:00:56 <wyager> ghci might not be specializing everythign the same way
15:00:57 <Evilsparza> ok will do
15:00:58 <HeladoDeBrownie> Not directly related to speed, but you can also write the maximumBy solution more succinctly as maximumBy (comparing fst) ...
15:01:10 <wyager> (use -O2 as a compilation option, for maximum optimization)
15:01:20 <marchelzo_> HeladoDeBrownie, is it possible that would increase the speed?
15:01:27 <HeladoDeBrownie> Possible, I don't know
15:01:39 <wyager> marchelzo_:  Probably not. But it's nicer to read :)
15:01:49 <marchelzo_> Because then it wouldn't have to pattern match a tuple
15:03:04 <wyager> marchelzo_:  fst pattern matches a tuple
15:03:21 <marchelzo_> wyager, yeah, so I guess it just defers the pattern match
15:07:01 <marchelzo_> I tried compiling them and myMax is still slightly faster
15:07:15 <marchelzo_> which I guess makes sense
15:11:04 <joe9> I want to use MaybeT. Should I use Control.Monad.Maybe or Control.Monad.Trans.Maybe?
15:15:48 <delphinas> fuzzyhorns:
15:16:44 <delphinas> I think I made it: now it opens a file in terminal on command "ctrl+b" and runs a command runhaskell $file :) It works and it is interactive.
15:18:05 <joe9> I have a function with a return type of IO (). In that function, I have the line -- runMaybeT (maybeTfunctions...) >> return ()
15:18:05 <johnw> joe9: I'm pretty sure it has to be the latter, for MaybeT
15:18:14 <delphinas> does any1 on osx and sublime tect wanna check it?
15:18:44 <joe9> Just want to check if there is a better way of writing that instead of using return () at the end.
15:18:55 <joe9> johnw: ok, thanks.
15:18:55 <quchen> I haven't heard of Control.Monad.Maybe, what's in there?
15:19:03 <quchen> And what package is it?
15:20:47 <hexagoxel> http://hayoo.fh-wedel.de/?query=Control.Monad.Maybe
15:22:00 <delphinas> I'll make a post about it maybe.
15:32:20 <wyager> So I already posted this here a while back, but it's like 35x faster now. I wrote a super simple in-memory key/value server in Haskell. ~180 LoC. With 100 concurrent clients,  I get over a million transactions per second (which is competitive with e.g. Redis). It also has cool features like arbitrary atomic transactions. Take a look at https://github.com/wyager/KVStore
15:32:41 <glguy> I've been playing around with using GHC.Generics to generate non-type-changing lenses that don't have Generics overhead http://lpaste.net/116920
15:34:28 * hackagebot hspec-server 0.3.0 - Test Framework for Server's status  http://hackage.haskell.org/package/hspec-server-0.3.0 (junjihashimoto)
15:40:09 <quchen> hexagoxel: Oh, that's from 2008, explains why I haven't heard of it :-)
15:41:52 <delphinas> After 8h+ of fiddling with haskell setup I can finally dive into theory...
15:42:05 <delphinas> Good start
15:42:20 <hcore> victory!
15:45:09 <hexagoxel> quchen: so the answer to joe9 is to use Control.Monad.Trans.Maybe?
15:47:04 <quchen> That's the module from transformers, right? Then yes.
16:04:29 * hackagebot either 4.3.2.1 - An either monad transformer  http://hackage.haskell.org/package/either-4.3.2.1 (EdwardKmett)
16:25:26 <val0uch> hey
17:19:18 <hunter> could someone reccomend a tablet for me
17:21:41 <HeladoDeBrownie> hunter, this isn't really the place for that, this channel's topic is the Haskell programming language.
17:23:35 <hunter> HeladoDeBrownie: ik i just thought there would be good reccomendations so i figured id give it a shot, i could go to haskell blah too but i just wanted to give it a shot
17:24:56 <ij> I saw "backpermute" in wiki and googling it suggests its related to functional programming. What is "backpermute"?
17:31:16 <ij> haskellwiki*
17:32:06 <heatsink> There's a "permute" and a "backpermute", I forget which is which
17:32:15 <heatsink> One is out[i] <- in[p[i]]
17:32:20 <heatsink> The other is out[p[i]] <- in[i]
17:32:44 <heatsink> p is the permutation, expressed as an array of indices
17:33:16 <heatsink> There's nothing really functional about backpermute.  It's related to vector programming.
17:42:11 <xyh> after imported a module, how should I call a function in it ?  I see sometimes "Module.function" but others just "function" ??!
17:42:32 <geekosaur> depends on how you imported it
17:42:43 <geekosaur> "import Module" --- names are available unqualified
17:43:00 <geekosaur> "import qualified Module" --- names must be qualified with the module name
17:43:18 <xyh> I see
17:43:20 <xyh> thx
17:43:22 <geekosaur> "import qualified Module as X" --- names must be qualified as X.name
17:43:35 <xyh> :)
17:43:44 <geekosaur> there are modules whose names collide, notably Data.Map has many collisions with the Prelude's list operations
17:44:10 <geekosaur> so we typically "import qualified Data.Map as M" and sometimes "import Data.Map (Map)" so we don't need to refer to the type as M.Map
17:55:34 <greymalkin> Okay, so I'm playing with implementing something for Minecraft PE (once the laughing stops I'll continue)... in haskell.
17:55:53 <greymalkin> I'm having a heck of a time intelligently describing entities
17:56:11 <greymalkin> The way they're set up is a study in OO programming, and I can't figure out the right way to do it in haskell;
17:58:42 <greymalkin> The data type I'm thinking should be a Map AttrName AttrValue -- and I wanted to tack class declarations around that...
18:02:09 <benzrf> greymalkin: eek
18:02:13 <benzrf> greymalkin: i think not
18:02:31 <chrisdone> greymalkin: are the attributes types known ahead of time?
18:02:42 <benzrf> greymalkin: but yes imo game objects are basically the single major use case for inheritance
18:02:52 <benzrf> when it comes to entities in minecraft, inheritance-based OOP is just
18:02:56 <benzrf> The Right Way
18:03:38 <benzrf> i'm honestly not sure how i'd model it in haskell
18:03:53 <benzrf> it's like a real life use case for "cat and dog extend animal"
18:04:36 <greymalkin> Yeah.
18:04:38 <Hafydd> "single major use case"? What about GUI elements?
18:05:03 <chrisdone> you can just call it a hierarchy of types and be done with it
18:05:38 <chrisdone> greymalkin: what's your data like?
18:05:44 <benzrf> Hafydd: that too
18:05:57 <greymalkin> The data's going to have been parsed from NBT files (already done)
18:06:37 <greymalkin> But those are string-indexed, and I was hoping to use the expressive type system of haskell to make something quite lovely.
18:06:50 <greymalkin> But for the moment it looks like boilerplate without a furnace.
18:06:58 <greymalkin> or boiler.
18:07:11 <chrisdone> @google NBT file
18:07:12 <lambdabot> http://minecraft.gamepedia.com/NBT_format
18:07:12 <lambdabot> Title: NBT format - Minecraft Wiki
18:07:48 <greymalkin> chrisdone: Already parsed... but I'm doing pocket edition -- which is little endian, compared to the desktop's big endian.
18:08:01 <benzrf> you could do something like aeson
18:08:21 <greymalkin> Anyway, I'm not trying to hit a goal with this; it's just an exercise in implementing a near-large application and getting a feel for modelling.
18:08:28 <greymalkin> in haskell.
18:08:43 <chrisdone> yeah
18:08:59 <chrisdone> if you can implement a function like NBT → Value (from the aeson package)
18:09:22 <chrisdone> then you can use aeson's automatically derived instances that convert to a regular typed data structure
18:09:32 <chrisdone> the yaml package does this
18:09:39 <greymalkin> "automatically derived instances"?
18:09:55 <bitemyapp> greymalkin: template haskell or generics usually.
18:10:03 <chrisdone> data Foo = Foo { bar :: Int, zot :: Char } deriving (Generic)
18:10:04 <chrisdone> instance FromJSON Foo
18:10:11 <chrisdone> now you can do decode "…" :: Maybe Foo
18:10:34 <bitemyapp> greymalkin: if you think about it, if you can define canonical ways to handle products and sums, you can fold most datatypes into a typeclass instance based purely on the definition - ie, metaprogramming.
18:10:49 <bitemyapp> greymalkin: typically this is done with GHC.Generics or Template Haskell.
18:11:21 <bitemyapp> greymalkin: tho', there are caveats to this. One is that a change in library version could cause a change in how your instances are derived. People are sensitive to that, so it's not likely to happen again in the future (and there is configuration for Aeson)
18:11:31 <bitemyapp> greymalkin: and it's not like the manual instances are that big of a deal either.
18:12:00 <bitemyapp> I have hundreds of manual and generically derived Aeson ToJSON instances in this library: https://github.com/bitemyapp/bloodhound/blob/master/src/Database/Bloodhound/Types.hs
18:12:03 <bitemyapp> take a gander.
18:12:26 <chrisdone> hmm http://minecraft.gamepedia.com/Villages.dat
18:12:37 <chrisdone> i see that this file has a hierarchical structure that you want to model
18:13:20 <bitemyapp> hey that's neat.
18:13:22 <chrisdone> i'd probably lean towards writing a bit of template haskell to generate types for the hierarchy
18:13:24 <bitemyapp> That could be a nice example.
18:13:45 <greymalkin> chrisdone: Wrong kind of heirarchy...
18:13:46 <chrisdone> although the hierarchy doesn't look that big. unless you have a tonne of such files
18:13:50 <benzrf> gib row types
18:14:02 <greymalkin> I'm talking about the in-memory representation of entities: https://github.com/greyson/HasCraft/blob/master/Data/Minecraft/Entity.hs
18:14:09 <greymalkin> (that's my first or second try at it.
18:14:20 <cads> hey guys, is it hard to push an app that haskell logic out to android and ios?
18:14:27 <cads> that has*
18:14:39 <greymalkin> But yeah, the NBT part was tricky, but fun: https://github.com/greyson/HasCraft/blob/master/Data/NBT/MCPE.hs
18:15:07 <chrisdone> greymalkin: http://3.bp.blogspot.com/-KuuktJh6c8I/T7yUjp9e_aI/AAAAAAAABOY/sLHmTr9Mwdc/s1600/misfits.gif
18:15:51 <greymalkin> cads: More difficult for android (bridging to native code in both languages), I'm not sure for iOS
18:16:03 <benzrf> if we only had row polymorphism we could use lens to write nice structurally typed OO-ish code ;-;
18:16:08 <chrisdone> getBool (BoolAttr b) = b
18:16:11 <chrisdone> ^ this is bad
18:16:20 <benzrf> yes very
18:16:24 <benzrf> use a prism instead or something
18:16:28 <chrisdone> ew
18:16:57 <greymalkin> Yeah, I'm still new to haskell; part of the reason that I'm trying this out.
18:17:03 <chrisdone> greymalkin: so what *is* an entity?
18:17:35 <greymalkin> not a block.
18:17:43 <greymalkin> well, not all blocks.
18:18:24 <greymalkin> most blocks are terrain -- they just have an id and some simple attrs, the entities are anything that moves, disappears, or ages.
18:18:32 <cads> greymalkin, what about pure haskell to android and ios?
18:18:45 <cads> I know you can do that with html/css/js and webviews
18:19:14 <chrisdone> i guess i need to know what minecraft is because i have no idea what you're talking about =p
18:19:16 <cads> though it's best to maintain two separate webviews so that it looks nature to the native look and feel of each OS
18:19:30 <greymalkin> cads: Android is based on the Dalvik (now ARTS) VMs, and they're call semantics are not condusive to haskell code
18:19:30 <benzrf> chrisdone: entities are things with varying position
18:19:39 <benzrf> chrisdone: basically any kind of game "thing" that isnt a block
18:19:52 <greymalkin> cads: Even the JVM is not a friendly target to which to compile haskell.
18:20:02 * chrisdone . o O ( a block )
18:20:13 <benzrf> chrisdone: blocks are confined to a voxel grid and are internally represented as a single integer id, plus maybe an attached "block entity"
18:20:15 * chrisdone shrugs
18:20:15 <greymalkin> chrisdone: minecraft is a game... very 'block' oriented.
18:20:24 <cads> can you emit native code for the device?
18:20:31 <benzrf> chrisdone: [slightly simplified]
18:20:36 <cads> or does the architecture vary a lot between device?
18:20:54 <greymalkin> cads: Yes, they're both ARM based.
18:21:10 <benzrf> chrisdone: blocks are not represented as entities because each entitiy is an object and there are literally
18:21:13 <benzrf> oops 1 sec
18:21:43 <chrisdone> (◎_◎;)
18:21:54 <benzrf> chrisdone: blocks are not represented as entities because each entitiy is an object and there are about 1,048,576 blocks loaded at any given time
18:21:57 <benzrf> or more
18:22:12 <benzrf> maybe im under-or-over-estimating, idk
18:22:12 <cads> greymalkin, what's the right data format to represent minecraft like voxel grids?
18:22:35 <greymalkin> cads, I'll let you know when I figure it out :)
18:22:51 <cads> I want to make a 2d space voxel simulator where you build a little space house
18:23:31 <cads> you start out on a emergency pod, but you manage to build it out and add decks for plants, as well as solar panels and thrusters
18:23:32 <benzrf> chrisdone: http://cdn.arstechnica.net/wp-content/uploads/2012/09/hutchinson-minecraft-qcdtown.jpg this is why you dont want an object for each block
18:24:26 <cads> greymalkin, my idea is that you can attach blocks to any nearby nearly stationary chunk of blocks
18:24:40 <cads> chunks have rotational and directional inertia
18:24:46 <cads> and can collide and such
18:24:48 <benzrf> cads: cool
18:25:41 <cads> I'd like to eventually let you build a station with a big rotational ring, as well as a part attached by a rotating airlock at the central hub of the wheel.
18:25:59 <cads> the stationary part has docks and stuff
18:26:27 <greymalkin> btw, the code that I thought was going to be a nice way to represent the entities started around line 54
18:27:42 <chrisdone> greymalkin: good effort at any rate, thumbs up for trying to figure out how to express this haskelly. i don't grok the domain enough to suggest anything =)
18:27:50 <greymalkin> (which skips all the 'getBool' nonesense
18:27:55 * chrisdone → afk
18:29:20 <heatsink> It's cool how, in Haskell, I can answer questions on how to use an API without having prior experience or documentation to rely on.
18:36:35 <dmj`> when making a quasi quoter, do I *have* to specify every field in the record? What if I don't want to make an Exp? Getting compile time errors saying all fields must be specified
18:38:10 <mmmm> you can use undefined...
18:38:12 <mgsloan> dmj`: Hmm, I would have thought those would just be uninitialized field warnings.  Anyway, I've seen people use "undefined" quite a bit, but probably better to use a descriptive use of "error"
18:38:16 <mmmm> in fact that's what people tend to do
18:38:42 <heatsink> You would get meaningful errors if you use something like const (fail "Quasiquoter cannot create expressions")
18:41:20 <greymalkin> hmm.
18:41:48 <bananagram> does System.Directory have a function to create a file?
18:42:42 <bananagram> it has createDirectory but no createFile
18:43:02 <greymalkin> Is this less "cringe-worthy" ? https://github.com/greyson/HasCraft/blob/master/Data/Minecraft/Entity.hs
18:43:20 <bananagram> I'll use "touch"
18:43:26 <dmj`> mgsloan: I tried undefined, it literally throws an error, it's like all fields in the record are executed at compile time
18:44:31 <dmj`> bananagram: System.File ?
18:45:24 <bananagram> dmj`, I don't have System.File
18:45:26 <magicman> writeFile file ""
18:45:42 <athan> Does anyone know how to nest QuickCheck restraints? I'm trying to generate lists of non-empty pairs of strings - [(String,String)], where the strings aren't empty, and it's a list of size >= 1 :s
18:45:48 <bananagram> that will work
18:46:02 <bananagram> thanks
18:46:05 <dmj`> bananagram: why not?
18:46:08 <magicman> Not sure if that's available as a separate function.
18:46:12 <bananagram> dmj`, I don't know
18:46:14 <mgsloan> dmj`: It should only access the field that's used for the type of syntax you're quasiquoting
18:46:32 <greymalkin> touch = flip writeFile ""
18:46:42 <bananagram> I'll paste my System.* things
18:46:43 <heatsink> athan: You can write your own generator for arbitrary data
18:47:06 <athan> heatsink: Hmm, alright, how hard is it, you think?
18:47:40 <heatsink> athan: It's pretty easy.  There's a listOf1 function for generating nonempty lists
18:47:49 <heatsink> See the documentation for Test.QuickCheck.Gen module
18:47:54 <dmj`> mgsloan: http://lpaste.net/116938
18:48:06 <athan> heatsink: Oh woah, alright I'll go for it :) Thanks for the hand
18:48:12 <bananagram> actually that would be a pain
18:48:25 <mgsloan> dmj`: There, it'll use the quoteExp field as the quasiquoter is used in an expression
18:48:48 <dmj`> mgsloan: wait, can you explain to me, how does that work
18:49:04 <dmj`> mgsloan: Ohhhh I got it
18:49:10 <dmj`> it depends on the context of usage, intellesting
18:49:13 <mgsloan> yup!
18:49:26 <dmj`> mgsloan: gracias
18:49:38 <heatsink> athan: use forAll to run a test with random input from your generator.
18:49:39 <mgsloan> welcome!
18:49:39 <dmj`> another haskell revelation unfolds
18:49:54 <athan> How could I make a type with a kind (*->*)->*->*->* an instance of MonadTrans?
18:50:08 <athan> heatsink: Oh woah, alright!
18:51:04 <dmj`> mgsloan: what do you think about using json instead of yaml for the QQ String? Seems like yaml is the popular choice, but json is easy too
18:51:26 <dmj`> @src MonadTrans
18:51:26 <lambdabot> Source not found. My mind is going. I can feel it.
18:51:31 <dmj`> :i MonadTrans
18:52:00 <athan> @src lift
18:52:00 <lambdabot> Source not found. My mind is going. I can feel it.
18:52:06 <dmj`> athan: can you make your type * -> (* -> *) -> * -> * ?
18:52:10 <dmj`> :k StateT
18:52:11 <lambdabot> * -> (* -> *) -> * -> *
18:52:18 <athan> dmj`: sadly, no :(
18:52:22 <dmj`> porque
18:53:49 <athan> oh, okay, so I've got this weird monadreader-like class, that gives me two directions - creating a value and running the monad to a function
18:54:15 <athan> basically, the middle-ground result is a type that looks like `m prefix result`
18:54:23 <athan> where m is the reader monad
18:54:34 <zq> is there a generalized form of either
18:54:37 <athan> ideally, I'd like transformers, too :(
18:54:49 <athan> zq: sums of products?
18:55:03 <benzrf> zq: how generalized
18:55:06 <benzrf> zq: explain
18:55:11 <athan> dmj` ^
18:55:12 <zq> data OneOf :: Nat -> (* -> * -> ... -> *) n times -> *
18:55:25 <benzrf> zq: easy
18:55:37 <zq> and please not type family tricks with Either
18:56:21 <athan> zq: Where the nat is the n?
18:56:25 <zq> yep
18:56:31 <benzrf> @let data GenEither l where Left' :: h -> GenEither ((:) h t); Right' :: GenEither t -> GenEither ((:) h t)
18:56:32 <lambdabot>  .L.hs:158:35: parse error on input ‘:’
18:56:34 <benzrf> shit
18:56:42 <benzrf> @let data GenEither l where Left' :: h -> GenEither ('(:) h t); Right' :: GenEither t -> GenEither ('(:) h t)
18:56:44 <lambdabot>  Defined.
18:56:46 <benzrf> ( ͡° ͜ʖ ͡°)
18:56:54 <benzrf> :t Left' 3
18:56:55 <lambdabot> Num h => GenEither (h : t)
18:57:08 <benzrf> :t Right' (Right' (Right' (Left "foo"))))
18:57:09 <lambdabot> parse error on input ‘)’
18:57:12 <benzrf> :t Right' (Right' (Right' (Left "foo")))
18:57:13 <lambdabot>     Couldn't match expected type ‘GenEither t’
18:57:13 <lambdabot>                 with actual type ‘Either [Char] b0’
18:57:13 <lambdabot>     In the first argument of ‘Right'’, namely ‘(Left "foo")’
18:57:15 <benzrf> wait
18:57:33 <benzrf> :t Right' (Right' (Right' (Left' "foo")))
18:57:34 <lambdabot> GenEither (h : h1 : h2 : [Char] : t)
18:57:41 <benzrf> zq: perfect :-D
18:57:42 <athan> benzrf: Holy beans man
18:58:31 <zq> is '(:) the datakinded (:)?
18:58:34 <benzrf> yes
18:58:47 <benzrf> zq: oh wait i think i see what you actually want
18:59:06 <athan> so lambdabot has datakinds, but not :i? :s
18:59:18 <benzrf> zq: if you define a Nat type like
18:59:34 <benzrf> oh... wait.
18:59:47 <benzrf> :k S
18:59:48 <lambdabot> Not in scope: type constructor or class ‘S’
18:59:50 <benzrf> :k 'S
18:59:50 <lambdabot> Not in scope: data constructor ‘S’
19:00:01 <zq> :k '(:) Int Int
19:00:02 <lambdabot>     The second argument of ‘(:)’ should have kind ‘[*]’,
19:00:02 <lambdabot>       but ‘Int’ has kind ‘*’
19:00:02 <lambdabot>     In a type in a GHCi command: (:) Int Int
19:00:09 <zq> :k '(:) Int '[]
19:00:09 <lambdabot> [*]
19:00:19 <benzrf> zq: i was thinking you could define a Nat type where the type is indexed by the value it has
19:00:32 <benzrf> zq: and then define a GADT where the list of possibilities is indexed by a parameter
19:01:02 <zq> benzrf: what would that even look like?
19:01:06 <benzrf> @let data Z = Z; data S n = S n
19:01:08 <lambdabot>  Defined.
19:01:12 <benzrf> :t S (S (S n))
19:01:13 <lambdabot> S (S (S Expr))
19:01:16 <benzrf> er
19:01:18 <benzrf> :t S (S (S Z))
19:01:18 <lambdabot> S (S (S Z))
19:01:28 <benzrf> zq: next, you need to define a type family for indexing lists
19:01:37 <benzrf> @let type family At l n
19:01:38 <lambdabot>  Defined.
19:02:11 <benzrf> @let type instance ('(:) h t) Z = h
19:02:11 <lambdabot>  .L.hs:167:16:
19:02:12 <lambdabot>      Malformed head of type or class declaration: ((:) h t) Z
19:02:15 <benzrf> hrm what
19:02:36 <benzrf> can you not do that in open type families :/
19:04:11 <dmj`> mgsloan: if I do $(mkThings 'ADT [myqq| { "hey" : "there" }]) will it run as a quoteExp ?
19:04:43 <godel> hello. How can I emulate dependent types in haskell? I want for example to create a type like "T a (a -> Bool)", i.e. that takes as a parameter a type "a" and a function from a to Bool.
19:04:43 <zq> benzrf: how would you cause the second type var of GenEither ('(:) h t) to unify?
19:05:06 <zq> :t [Left' 10, Right' (Left' True)]
19:05:07 <lambdabot> Num h => [GenEither (h : Bool : t)]
19:05:37 <benzrf> godel: that's not dependent
19:05:55 <godel> something like "data List a = Nil | Cons a (List a)"
19:05:57 <benzrf> @let data T a = T a (a -> Bool)
19:05:58 <lambdabot>  Defined.
19:06:02 <godel> but taking another parameter
19:06:30 <benzrf> godel: oh do you mean a sigma type?
19:06:31 <zq> never mind
19:06:32 <zq> :t [Left' 10, Right' (Left' True)] :: [GenEither ('(:) Int ('(:) Bool '[]))]
19:06:33 <lambdabot> [GenEither '[Int, Bool]]
19:06:40 <zq> that is some seriously crazy shit
19:06:44 <benzrf> zq: :-)
19:06:45 <zq> s/crazy/twisted/
19:06:50 <mgsloan> dmj`: Yup
19:07:03 <godel> benzrf: for example, how would you implement a sigma type?
19:07:10 <benzrf> you can't
19:07:14 <benzrf> haskell isn't dependently typed
19:07:16 <benzrf> sorry!
19:07:34 <benzrf> GADTs are about the best you can do
19:08:09 <godel> benzrf: the thing that I want to do is quotient types
19:08:21 <godel> so it takes a type and a relation
19:08:26 <benzrf> mmm
19:08:37 <godel> a relation is something of the type (a->a->Bool)
19:08:50 <benzrf> godel: actually it's not
19:08:57 <benzrf> oh wait
19:09:11 <benzrf> godel: well, it is, but it's not really what you want here
19:09:13 <godel> benzrf: mhh it is convenient to think of it that way
19:09:19 <mgsloan> dmj`: RE JSON vs Yaml, I don't think it matters much, but I suppose YAML is a bit more haskelley as it's got significant indentation.  Also shachaf's dad wrote YAML
19:09:21 <godel> why benzrf?
19:09:29 <benzrf> ah nvm i had a brain fart
19:09:31 <benzrf> carry on!
19:09:33 <godel> hahaha
19:09:34 <mgsloan> s/wrote/invented/ -- or something
19:10:15 <dmj`> shachaf's dad wrote yaml?
19:10:20 <godel> so I want something like "data Quotient a (a->a->Bool) = Q a (a->a->Bool)"
19:10:22 <godel> benzrf:
19:10:27 <benzrf> godel: no, that's not what you want
19:10:29 <benzrf> godel: you want:
19:10:31 <godel> I don't even know how to write it in haskell
19:10:55 <mgsloan> dmj`: Yup!  Oren Ben-kiki, first name on the spec
19:11:00 <benzrf> data Quotient a r = Q (x : a) (r a = True)
19:11:15 <benzrf> godel: values at the type level aren't the hardest thing in the world
19:11:18 <godel> what does that mean?
19:11:22 <benzrf> the real problem is that you simply cannot do pi types in haskell
19:11:31 <benzrf> it's just not possible
19:11:43 <godel> uhh :-(
19:11:49 <benzrf> godel: what do you know about dependent tying
19:11:55 <godel> benzrf: is it planned to support dependent types in haskell?
19:11:55 <dmj`> mgsloan: woa, that's reason enough to use it
19:12:00 <benzrf> godel: i don't think so, idk
19:12:06 <benzrf> godel: perhaps you'd find idris interesting :)
19:12:20 <godel> I know idris and agda, but I like haskell
19:13:07 <benzrf> samme
19:13:38 <benzrf> godel: nothing stops you from writing data Quotient a (a->a->Bool) = Q a (a->a->Bool)
19:13:46 <benzrf> godel: but then i can perfectly easily write
19:14:04 <benzrf> er, hold on
19:14:19 <benzrf> shit, i miswrote
19:14:30 <benzrf> godel: the dependent type i gave was wrong, sorry :[
19:14:35 <benzrf> that was a regular sigma type
19:14:46 * benzrf thinks for a moment
19:14:52 <melvin> is there a way to have an efficient functional hash table? (no mutation)
19:14:59 <benzrf> melvin: yeah
19:15:05 <dmj`> melvin: balanced trees
19:15:14 <melvin> that is not a hash table though
19:15:24 <benzrf> melvin: wait, you mean like an array?
19:15:36 <benzrf> melvin: how are you defining hash table
19:16:53 <benzrf> godel: that is an interesting conundrum actually
19:16:59 <benzrf> im not sure how i'd define a quotient type in coq
19:17:17 <benzrf> godel: i mean it's not hard to define an Eq instance
19:17:31 <melvin> http://en.wikipedia.org/wiki/Hash_table probably does a better job than i coudl. but yes a hash table is an array, keys are indices (hashed values) and values are usually stored as buckets (linked lists of values, for hash collisions)
19:17:46 <benzrf> but im not sure how i'd use dependent typing to enforce no 2 quotientally equivalent values both being inhabitants
19:17:49 <benzrf> huuuuuh
19:17:59 <godel> haha
19:18:05 <benzrf> hrm, maybe...
19:18:12 <godel> Yeah, i have been puzzled by this all day
19:18:38 <melvin> unlike a balanced binary tree hash table isn't sorted, and it has O(1) look up if the hashing function is perfect (there are no collisions)
19:18:49 <ReinH> godel: http://www.reddit.com/r/haskell/comments/2pql38/haskell_implementation_of_natural_join_with_all/
19:18:53 <ReinH> oops, wrong link
19:19:07 <ReinH> godel: You might be interested in https://ghc.haskell.org/trac/ghc/wiki/DependentHaskell
19:19:11 <Hijiri> O(hash function time)
19:19:31 <Hijiri> you might be able to use a faster hash function if you have a smaller table
19:19:37 <spekkle> hi, what's the easiest way to zip n lists together?  i'm thinking of zipping them as lists of lists, instead of lists of tuples, to make the types simpler
19:19:39 * hackagebot deepseq-bounded 0.5.3 - Bounded deepseq, including support for generic deriving  http://hackage.haskell.org/package/deepseq-bounded-0.5.3 (AndrewSeniuk)
19:19:42 <melvin> big O doesn't measure time but complexity
19:20:10 <meretrix> I wrote a server and client that performs networks requests and stores state in a database.  What's the most appropriate testing tool to perform high-level testing?
19:20:33 <meretrix> Something that will start the server and client, run through some requests, then verify the database state.
19:20:38 <benzrf> ReinH: wouldnt dependent haskell basically be lazy idris
19:20:54 <melvin> (hashing function will take the same time regardless if we have 1 element or 1 million elements. so it is O(1) even if it takes 1 year to complete :) )
19:20:56 <godel> benzrf: I'm downloading idris to play a little bit with it
19:21:06 <godel> thank's for your help
19:21:07 <godel> thanks*
19:21:53 <melvin> anyway, I am curious
19:21:58 <melvin> if it is
19:22:26 <melvin> if it is possible to implement hasing table efficiently in a functional way, with same complexity for basic operations (sorry for frequent enters)
19:23:22 <spekkle> hmm, I guess I'll just append the lists to each other and call transpose
19:23:41 <Hijiri> It isn't
19:24:11 <spekkle> you can use a ctrie for hashing
19:25:18 <Hijiri> melvin wants something with complexity O(1) for number of elements
19:25:33 <Hijiri> for lookup, insertion, deletion
19:25:55 <spekkle> insisting on o(1)  over o(logn) seems like a premature optimisation
19:26:48 <benzrf> hash tables arent even O(1) in the worst case
19:26:51 <melvin> it is in many cases. but I am more concerned with learning about functional data structures than about efficiency
19:27:30 <dmj`> there's a book for that
19:27:39 <melvin> they have O(n) lookup in worst case (a linked list). but O(1) if hash function is perfect
19:27:52 <spekkle> I would think that hamts, ctries, and other hash trees are good to learn, then
19:28:05 <benzrf> melvin: hash functions cannot be perfect by definition
19:28:11 <benzrf> melvin: if it's perfect then it isnt a hash function
19:28:23 <melvin> of course it can be.
19:28:28 <benzrf> define perfect
19:28:29 <melvin> it depends on what you are storing as keys
19:28:34 <melvin> no collisions
19:28:47 <spekkle> you can have a perfect hash function if your data structure is immutable :P
19:29:15 <benzrf> melvin: you cant have no collisions for fixed-size output unless the size of your input is also fixed
19:29:18 <benzrf> melvin: in which case it is not a hash
19:29:25 <benzrf> unless i misunderstand the definition
19:30:05 <Hijiri> hash function maps a value to a smaller value space right?
19:30:08 <melvin> the size of the input does not have to be fixed, only the number of all possible keys
19:30:14 <benzrf> melvin: er yes
19:30:20 <benzrf> i meant the size of the input type
19:32:33 <melvin> for example lets say that allowed keys are alphanumerical letters. it is trivial to make a perfect hash function
19:32:50 <melvin> alphanumeric *
19:34:33 <Hijiri> alphanumeric characters aren't arbitrary size
19:34:49 <Hijiri> from wikipedia: A hash function is any function that can be used to map digital data of arbitrary size to digital data of fixed size
19:34:49 <melvin> they aren't
19:37:06 <melvin> Hijiri I am not sure what to make of that definition. many things that one may use as keys in a mappable datastructure have fixed size
19:37:52 <melvin> http://en.wikipedia.org/wiki/Hash_function#Perfect_hashing
19:39:00 <heatsink> Is there a commonly used typeclass for freezeable types?
19:44:48 <ReinH> @@ melvin @where okasaki
19:44:48 <lambdabot>  melvin http://www.cs.cmu.edu/~rwh/theses/okasaki.pdf
19:44:55 <ReinH> heatsink: "freezeable"?
19:45:23 <heatsink> ReinH: Converting mutable data structures to immutable ones
19:45:47 <ReinH> heatsink: not afaik
19:45:57 <heatsink> ok
19:46:18 <heatsink> @help @@
19:46:18 <lambdabot> help <command>. Ask for help for <command>. Try 'list' for all commands
19:46:31 <heatsink> @help @
19:46:31 <lambdabot>  @@ [args].
19:46:31 <lambdabot>  @@ executes plugin invocations in its arguments, parentheses can be used.
19:46:31 <lambdabot>  The commands are right associative.
19:46:31 <lambdabot>  For example:    @@ @pl @undo code
19:46:31 <lambdabot>  is the same as: @@ (@pl (@undo code))
19:47:00 <Hijiri> hash table might be doable in a functional language with uniqueness types
19:47:08 <Hijiri> but the array itself would have to be magical, I think
19:47:55 <ReinH> Purely functional "hash tables" can get within a log factor of mutable structures. And when the log base is high enough, they become effectively constant time...
19:49:58 <lwm> question about geting something up on hackage. I have a small library that talks to a database, I want users to be able to do reads of the DB via a small API. Can the DB file be included in the package?
19:51:42 <heatsink> Should there be one, globally shared copy of the DB file when it's installed?
19:53:15 <lwm> Yeah, I suppose so. It is a postgresql DB, so the user would need to get that on their system
19:53:32 <lwm> I dunno if this is really 'library' material ... but I think it would be useful
19:58:34 <heatsink> Cabal supports installing data files with a program or library
19:58:48 <heatsink> You can add the file to data-files in the package description
19:59:13 <heatsink> and Cabal autogenerates a module containing the file path where it's installed
20:00:03 <lwm> Oh cool. I should check that out so, nice one
20:00:42 <spekkle> how do use map/fmap/etc to double all of the numbers in [[1,2,3],[4,5,6]]?  I'm actually trying to do something more complicated, but I need to understand how map "deeper" first. thanks!
20:00:52 <spekkle> *how to map
20:01:26 <Hijiri> you want [[1,1,2,2,3,3],[4,4,5,5,6,6]]?
20:01:39 <spekkle> sorry, [[2,4,6],[8,10,12]]
20:01:43 <Hijiri> oh
20:01:47 <heatsink> First of all, you know how to use map to turn [1,2,3] into [2,4,6], right?
20:01:49 <spekkle> I'm trying to preserve the structure of the list while changing the individual elemnts
20:01:49 <Hijiri> just map/fmap a map/fmap
20:01:52 <spekkle> Yeah
20:02:07 <Hijiri> fmap (fmap (*2))
20:02:08 <heatsink> And you know how to use map to turn [x, y] into [f x, f y], right?
20:02:31 <spekkle> thanks, map (map (*2)) [[1,2,3],[4,5,6]] works!
20:04:10 <benzrf> :t (map . map) (*2) [[1, 2, 3], [4, 5, 6]]
20:04:11 <lambdabot> Num b => [[b]]
20:04:22 <spekkle> if anyone's curious, I'm just trying to parse wikipedia table wiki code, so I can get the data out of it.  I figure it would be a good opportunity to learn Haskell instead of doing it in Java or Python or something
20:04:38 <Hijiri> are you following any of the guides?
20:04:52 <athan> spekkle: HXT can be pretty interesting :)
20:04:58 <lwm> hmm ... I don't think I could get Cabal to install a database. Should I just provide the file or ...
20:05:22 <Hijiri> you can add files as a data file
20:05:29 <spekkle> I've read some of LYAH.  I actually started learning Haskell earlier, but this is good motivation to keep learning
20:05:33 <Hijiri> it'll install it in the /share dir
20:05:51 <Hijiri> https://github.com/bitemyapp/learnhaskell is a nice guide too
20:05:58 <spekkle> thanks
20:06:02 <Hijiri> it goes more in depth for functional thinking
20:06:03 <lwm> cool and then the user can plug that into their psql install
20:06:29 <Hijiri> it's the "official guide" of haskell-beginners
20:06:45 <spekkle> athan: Wikipedia's HTML is an unholy mess, so I'm just parsing the wiki code instead
20:07:10 <Hijiri> #haskell-beginners, I meant
20:07:24 <athan> spekkle: Haha, good point :)
20:09:49 <adarc> > let k = 5.1312312 in k - 5
20:09:50 <lambdabot>  0.13123120000000021
20:09:57 <dmj`> mgsloan: ping
20:10:40 <adarc> i'm nub'n it up.. how to get '0.1312312' instead of that 0.13123120000000021
20:10:48 <adarc> properFraction gives me the same result
20:11:32 <geekosaur> adarc: use something that limits output precision. and welcome to floating point
20:11:45 <glguy> If anyone's interested in the combinator of [Lens, GHC.Generics, Yoneda], I think this code turned out neat ^_^ http://lpaste.net/116931
20:11:47 <adarc> ya
20:11:50 <glguy> combination*
20:12:23 <geekosaur> http://lambda.haskell.org/platform/doc/current/ghc-doc/libraries/haskell2010-1.1.1.0/Numeric.html#v:showGFloat
20:12:36 <geekosaur> or showFFloat from the same module, might be of interest
20:12:38 <spekkle> ahhh, I'm drowning in Maybes
20:12:45 <adarc> thanks geekosaur, checking
20:12:58 <spekkle> (that's why I needed that (fmap . fmap) earlier)
20:17:34 <drdo> This works in happy: var {% fmap var (getVarId $1) } . This gives a type error: var {% var <$> getVarId $1 } .
20:17:37 <drdo> What's going on?
20:19:29 <lisbeth2> heh dumb question but
20:19:34 <lisbeth2> lets say x = int such as 5
20:19:36 <lisbeth2> how do i say "x"
20:19:44 <lisbeth2> as in print the sting "5"
20:20:12 <HeladoDeBrownie> If you just want the string itself, show. If you want to print the string, print.
20:20:15 <HeladoDeBrownie> @type show
20:20:16 <HeladoDeBrownie> @type print
20:20:16 <lambdabot> Show a => a -> String
20:20:16 <lambdabot> Show a => a -> IO ()
20:20:22 <spekkle> I use this: putStrLn $ show x
20:20:31 <HeladoDeBrownie> print = putStrLn . show
20:20:46 <spekkle> oh, lol
20:20:49 <lisbeth2> yay
20:20:52 <lisbeth2> I have achieved fizzbuzz
20:20:54 <HeladoDeBrownie> spekkle, it's okay, now you know :)
20:20:55 <lisbeth2> thanks guys
20:20:56 <HeladoDeBrownie> lisbeth2, \o/
20:21:13 <lisbeth2>  let fizzbuzz xs = [ if (((x `mod` 3) == 0) && ((x `mod` 5) == 0)) then "fizzbuzz" else if (x `mod` 3) == 0 then "fizz" else if (x `mod` 5) == 0 then "buzz" else show x | x <- [1..xs] ]
20:21:17 <lisbeth2> my first haskell program
20:21:57 <joelteon> if/then binds loosely
20:21:57 <benzrf> cool
20:22:08 <lisbeth2> heh
20:22:25 <benzrf> lisbeth2: it'd be more succinct as a case instead of nested ifs :v
20:22:26 <HeladoDeBrownie> Yep, that does look like a working fizzbuzz. Good job
20:22:38 <joelteon> just use multi-way if
20:22:42 <zq> learn you a case for great good
20:22:52 <benzrf> lyah is pedagogically unsound >:[
20:22:54 <joelteon> baby's first GHC extension for fizzbuzz
20:23:12 <HeladoDeBrownie> benzrf, I agree it has its problems, but do we actually have a better introductory text?
20:23:19 <benzrf> cis194
20:23:21 <benzrf> :^)
20:23:25 <joelteon> If you need an introductory text, you're not smart enough for Haskell.
20:23:31 <HeladoDeBrownie> joelteon, :P
20:23:32 <benzrf> joelteon: nice meme
20:23:38 <joelteon> Excuse me?
20:23:50 <benzrf> i-i'm sorry
20:24:41 * hackagebot seqaid 0.1.4 - Dynamic strictness control, including space leak repair  http://hackage.haskell.org/package/seqaid-0.1.4 (AndrewSeniuk)
20:24:41 <lisbeth2> heh it's pretty fast too
20:24:42 <dmj`> can template haskell generate values? runQ [| a = 4 |], doesn't seem to work with Q Exp/Pat/Dec, etc
20:24:43 * hackagebot leaky 0.1.0.4 - Robust space leak, and its strictification  http://hackage.haskell.org/package/leaky-0.1.0.4 (AndrewSeniuk)
20:24:57 <lisbeth2> It can go up to 9999 like a champ
20:26:14 <lisbeth2> another question
20:26:41 <lisbeth2> can most syntax of lists be copied in tulpes just by adding parentheses instead of brackets?
20:26:48 <benzrf> no
20:26:53 <benzrf> tuples arent lists atall
20:26:54 <benzrf> *at all
20:27:10 <benzrf> well uh it depends on precisely what youre asking
20:27:13 <xplat> it's different from python that way
20:27:35 <zq> uh, it actually isn't
20:27:36 <geekosaur> most notably, a tuple (1,2,3) has an incompatible type with (1,2)
20:27:53 <zq> python tuples are unappendable and immutable
20:27:55 <geekosaur> and there is no convenient way to make use of nested tuples
20:28:15 <dmj`> nvm, I got it
20:28:16 <Chathurga> You can iterate over python tuples though
20:28:17 <geekosaur> since, again, the types are different
20:28:55 <xplat> zq: haskell tuples and lists are *much* more different than python tuples and lists
20:29:15 <drdo> I keep wondering why python doesn't have a regular cons type
20:29:31 <drdo> The lists are really vectors
20:29:32 <spekkle> If you have a homogenous tuple, you might as well just use a list IMO.  Haskell tuples are nice for multiple return values I guess.
20:29:48 <xplat> zq: in python you can do things like initialize a tuple with a generator expression, or iterate over them as freely as lists, you can't do anything like that in haskell
20:30:13 <matematikaadit> @let fizzbuzz n = [fbz x | x <- [1..n] ] where fbz c = case (c `mod` 3, c`mod`5) of (0, 0) -> "fizzbuzz"; (0,_) -> "fizz"; (_,0) -> "buzz"; _ -> show c
20:30:15 <lambdabot>  Defined.
20:30:19 <zq> xplat: so what?
20:30:26 <xplat> also, in haskell lists are immutable too.  if you still had the python model otherwise, tuples and lists would be the same thing
20:30:30 <matematikaadit> > fizzbuzz 10
20:30:31 <lambdabot>  ["1","2","fizz","4","buzz","fizz","7","8","fizz","buzz"]
20:30:32 <zq> xplat: and sure you can initialize a tuple from a list
20:30:41 <zq> xplat: it wouldn't be a total function, of course
20:30:50 <spekkle> Maybe Python tuples are more like Haskell lists?
20:30:54 <drdo> xplat: A python tuple is really comparable to Data.Vector, not haskell tuples
20:31:11 <zq> drdo: what no
20:31:36 <zq> drdo: every element of a vector carres the same type
20:31:56 <HeladoDeBrownie> Technically they do in Python, since Python is unityped.
20:32:02 <zq> xplat: regardless, this is all irrelevant to your original statement, which implied that python treats lists and tuples identically
20:32:08 <zq> it simply doesn't
20:32:37 <geekosaur> it doesn't, but it encourages enough people to believe that it does that it's highly confusing
20:32:43 <Chathurga> Identically is a bit strong but the difference is not as large as in Haskell
20:33:02 <geekosaur> (especially when you hit the corner cases where the difference shows through in Python)
20:33:24 <benzrf> tuples in python are just immutable lists
20:33:37 <zq> Chathurga: that delta in differences consists entirely of iteration. that's it.
20:33:53 <Chathurga> benzrf: Yeah, I agree
20:34:40 <Chathurga> zq: I dunno, I think that's a big difference to me
20:35:17 <zq> lisbeth2's original question doesn't even involve iteration
20:36:19 <xplat> zq: in python lists and tuples are both variadic.  also they're either both heterogeneous or both homogeneous depending on how you feel like viewing the relationship between statically and dynamically typed languages.  and then there's also iteration on top of those (non-)differences.
20:36:23 <Chathurga> That's a difference between the syntax of lists and tuples
20:36:51 <Gurkenglas> https://www.haskell.org/haskellwiki/Haskell_programming_tips <- "We have learnt above that length is evil!" is above the part it references.
20:38:05 <geekosaur> well, the most important point is that it's highly painful to define the equivalent of (:) for tuple types; the closest you get is a typeclass which requires an instance for every length of tuple, and even there you must decide whether you want N-tuples or nested 2-tuples (each has its own tradeoffs)
20:38:25 <xplat> anyway i didn't really mean to start a flamewar over how strong of vague subjective language we should use to compare these aspects of python and haskell ... :-I
20:42:40 <rtpg> hey, does anyone using emacs with company-ghc/ghc-mod and the like willing to post their .emacs?
20:54:25 <lwm> hey, can anyone take a look at my code: http://bit.ly/1zj19WU
20:54:37 <lwm> I have a bunch of type synonyms for String that I would like to bit better
20:55:20 <lwm> do a bit better*
20:55:36 <dmj`> lwm: you can't
20:56:51 <hunter_> lwm: oh cool dude
20:56:57 <hunter_> i was going to do the same sort of thing for greek
20:57:04 <hunter_> but i thought my professor wouldnt appreciate it
20:57:07 <hunter_> so i decided to not
20:57:21 <lwm> dmj: oh darn ...
20:57:26 <marchelzo_> hunter_, for  a cs class or a greek class?
20:57:51 <hunter_> for a greek class
20:57:53 <hunter_> marchelzo_:
20:58:00 <shaykha> lwm: it might be because I have a lot of difficulty with understanding typeclasses, but it seems like this could work better as one
20:58:00 <hunter_> lol
20:58:02 <lwm> hunter_: You should still write it ... people could make cool programs with this stuff
20:58:34 <hunter_> lwm: like what? i think the natural language approach is more machine learning than algebraic
20:58:44 <lwm> shaykha: Yeah, so ... I mean, they are all type synonyms because the type sigs would suck with String -> String
20:59:06 <stephen_> rtpg: I'm using a variant of nathan typanski's setup, which uses https://github.com/nathantypanski/emacs.d/blob/74260dd89a2de415b64196858658269eb453de94/config/my-autocomplete.el for general company configuration and https://github.com/nathantypanski/emacs.d/blob/74260dd89a2de415b64196858658269eb453de94/config/languages/my-haskell.el for haskell
20:59:14 <lwm> hunter_: well, for example, a verb trainer.
20:59:37 <hunter_> lwm: to train people who are learning you mean?
20:59:48 <hunter_> lwm: yea people could but i dont think anyone would actually use my haskell software
20:59:51 <shaykha> well, with spanish, you by and large have a root of a verb, and standard endings
20:59:54 <hunter_> and i dont want to pay for webhosting
21:00:02 <stephen_> rtpg: he also has a nice article about uisng vim keybings in emacs: http://nathantypanski.com/blog/2014-07-02-switching-to-emacs.html
21:00:39 <shaykha> e.g. a verb like hablar goes habl- (o/as/a/amos/ais/an)
21:00:56 <hunter_> you guys should really check out greek though
21:00:58 <lwm> shaykha: yes, but in order to get those ending lookups fresh in your brain, you need concrete practice and repetition
21:01:00 <hunter_> its a dream for this sort of software
21:01:05 <hunter_> its incredibly formulaic
21:01:09 <lwm> I think a little verb trainer would be nice
21:01:15 <hunter_> and the grammar is ultra specific and patterned
21:01:32 <lwm> hunter_: I need to grok spanish first :)
21:01:40 <shaykha> hunter2: (can I call you hunter2?) are you talking modern or classical greek?
21:01:57 <rtpg> thanks stephen_, I'm already big on evil mode ;)
21:02:05 <shaykha> lwm: michel thomas mehod helped me a lot
21:02:22 <shaykha> I'm not fluent in spanish but it got the grammar by and large set deep in my brain
21:02:34 <lwm> shaykha: glad to hear his name being mentioned. I definitely wouldn't be where I am with my language learning without him
21:02:56 <lisbeth2> I am trying to understand the function named addThree on this page: http://learnyouahaskell.com/types-and-typeclasses
21:03:11 <marchelzo_> shaykha, why would you want to call someone *******?
21:03:25 <lisbeth2> I don't understand why that function's type is Int -> Int -> Int -> Int
21:03:36 <lwm> wait, so there is really nothing I can do with all those type synonyms
21:03:39 <shaykha> marchelzo_: because I like naming people after my password
21:03:52 <lisbeth2> That's confusing to me because it looks like multiple functions
21:04:16 <shaykha> so you can hunter2 my hunter2 you hunter2
21:06:01 <lwm> lisbeth2: it is a bit strange at first, but the last 'Int' is the return type. The last Type in the list is always the return. Anything up to that point is a parameter being passed to the function
21:06:12 <lisbeth2> oh I see
21:06:17 <lisbeth2> so the last one is always the output of the function
21:06:38 <lwm> lisbeth2: So you can just read it like, this function takes an Int, another Int and another Int again. It gives me back an Int
21:07:38 <shaykha> yes, lisbeth2, though if you give it one int, it returns a function that takes two ints and returns a third int
21:07:41 <melvin> there is a reason why it is typed like that. Int -> Int -> Int -> Int is actually a function that takes an Int and returns an Int -> Int -> Int function. all functions in haskell take a single argument
21:07:49 <lwm> lisbeth2: Every function in Haskell takes only *one* parameter. Which probably makes no sense right now, but have a look at the term 'currying'. It is cool
21:07:55 <shaykha> or if you give it two ints, it returns a function that takes an int and returns an int
21:08:35 <melvin> -> is right associative, so Int -> Int -> Int is the same as Int -> (Int -> Int)
21:12:14 <wei2912> what's the difference between a generator and an infinite list?
21:15:07 <dmj`> can I pass in argument to a QuasiQuoter?
21:15:11 <dmj`> arguments*
21:15:37 <dmj`> [e 'Person| { "thing" : "thing" }]
21:15:42 <dmj`> something like that
21:16:23 <dmj`> I'm using $(mkThing 'Thing [thingQQ|{ "a" : "b"}]) right now... the problem is that I need to generate a [Dec] not an Exp....
21:16:46 <spearman> hey all. question: is there a way to share 'where' clauses accross patterns? hlint is warning for 'reduce duplication' because the 'where' clause is the same for two patterns
21:17:30 <hunter_> spearman: i think where clauses automatically are shared across patterns
21:17:47 <hunter_> spearman: or maybe not, ignore me
21:17:50 <hunter_> im not sure
21:26:49 <dmj`> how do I lift into TH? \(x :: String) -> runQ [d| a = x |]
21:32:54 <dmj`> nvm, I'll just do it all manual
21:42:48 <joe9> 5 years ago, I picked tagsoup to parse some html (for a screenscraper). Now, I am revisiting the code and want to check if there are better haskell html-parsing libraries  out there?
21:46:35 <wei2912> joe9: probably so, but i haven't used any html parsing library in haskell
21:48:04 <hcore> for an infinity-loving language haskell sure yells at me a lot for it
21:48:33 <hcore> though it only yells when i naively construct something infinite when it's supposed to be finite
21:49:03 <hcore> if i purposely create something infinite it doesnt complain
21:53:04 <wei2912> hcore: haskell doesn't love evaluating infinite lists
21:53:11 <wei2912> hcore: in fact, anyone sane wouldn't
21:53:40 <wei2912> specifically, attempting to evaluate the whole of an infinite list
21:55:05 <sivteck> @hackage HandsomeSoup
21:55:05 <lambdabot> http://hackage.haskell.org/package/HandsomeSoup
22:00:50 <wei2912> sivteck: is that a reference to BeautifulSoup
22:01:16 <sivteck> idk
22:03:20 <hcore> wei2912, i think it likes evaluating them, it doesn't like the fact that they don't return but it does like them
22:04:24 <joe9> sivteck:  I read that HandsomeSoup is only for parsing css elements.
22:04:38 <joe9> sivteck: It appears that I need to use HXT for html parsing.
22:04:46 * hackagebot indices 1.5.0 - indices  http://hackage.haskell.org/package/indices-1.5.0 (MikeLedger)
22:07:37 <sivteck> ah
22:10:56 <solatis> how accurate are the # downloads numbers on hackage? I always find the number of downloads to be extremely low... are they representative of the size of the haskell community?
22:17:35 <Hijiri> personally I get my packages on the black market
22:17:42 <Hijiri> so my downloads don't get counted
22:19:28 <gienah> solatis: we mirror them for gentoo, so gentoo updates are not counted
22:21:06 <solatis> right
22:21:10 <solatis> as i suspected
22:38:21 <greymalkin> What is the recommended way to get value out of a pseudo-union type from outside the module that the union type is declared? Without exporting constructors?
22:40:06 <HeladoDeBrownie> greymalkin, well, I suppose you could export a function defined in the same module that matches on the constructor(s) and gets it.
22:42:00 <Testeree> what is lts Haskell in stackage?
22:42:04 <greymalkin> example: data Container = ContainedInt Int | ContainedString String
22:42:19 <greymalkin> a single function can export both?
22:43:03 <HeladoDeBrownie> greymalkin, exporting has nothing to do with what a function does. Anyway, a single function could get either. For example, Container -> Either Int String.
22:43:26 <greymalkin> I had a group of functions that did that for each contained type (the consumer should know) but someone here saw that code and cringed.
22:43:55 <HeladoDeBrownie> It might be advantageous to just export your constructors. I can't say much more without additional information.
22:45:37 <pavonia> What is a pseudo-union type?
22:51:36 <joneshf-laptop> is it worthwhile to try and have sized vectors/matrices in haskell? or best to just cut our losses with the types and leave that to something like idris?
22:52:54 <Javran> in my code there are many type constraints like: "(Foo f, Bar a, Baz f a) => ____", and I'm wondering if there is something like "type function" that can save me some space?
22:55:34 <pavonia> I'm not sure, but can't you define constraint synonyms in modern Haskell?
22:57:33 <pavonia> Javran: Have you tried something like "type Foobar f a = (Foo f, Bar a, Baz f a)"?
23:00:38 <Javran> pavonia: thanks, exactly what I need, didn't know I can do this before
23:01:01 <Javran> pavonia: need to turn on ConstraintKinds btw
23:01:35 <pavonia> Ah, okay. I'm not really familiar with all the new extentions, unfortunately
23:03:09 <Javran> as long as it works, i don't have to look into this extension though. I'm lazy ;-)
23:14:05 <stephen_> Has anyone here used Galois' Ivory or Copilot DSLs? I've picked up the jist of both, but I'm not entirely sure which might be more appropriate for my application.
23:14:49 * hackagebot sai-shape-syb 0.3.1 - Obtain homogeneous values from arbitrary values, transforming or culling data  http://hackage.haskell.org/package/sai-shape-syb-0.3.1 (AndrewSeniuk)
23:14:51 * hackagebot deepseq-bounded 0.5.4 - Bounded deepseq, including support for generic deriving  http://hackage.haskell.org/package/deepseq-bounded-0.5.4 (AndrewSeniuk)
23:14:53 * hackagebot seqaid 0.1.5 - Dynamic strictness control, including space leak repair  http://hackage.haskell.org/package/seqaid-0.1.5 (AndrewSeniuk)
23:14:55 * hackagebot leaky 0.1.0.5 - Robust space leak, and its strictification  http://hackage.haskell.org/package/leaky-0.1.0.5 (AndrewSeniuk)
23:14:57 * hackagebot io-streams-http 0.2.0.2 - http-client for io-streams  http://hackage.haskell.org/package/io-streams-http-0.2.0.2 (DavidJohnson)
23:19:49 * hackagebot http-client-streams 0.2.0.1 - http-client for io-streams supporting openssl  http://hackage.haskell.org/package/http-client-streams-0.2.0.1 (DavidJohnson)
23:24:50 * hackagebot sai-shape-syb 0.3.2 - Obtain homogeneous values from arbitrary values, transforming or culling data  http://hackage.haskell.org/package/sai-shape-syb-0.3.2 (AndrewSeniuk)
23:30:47 <Testeree> is it safe to use lts stackage (it is marked experimental, is there any catch?)?
