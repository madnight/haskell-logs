00:00:03 <boxscape> uhm
00:00:03 <jle`> you can map it to pair each item with its square
00:00:14 <jle`> > map (\x -> (x, x^2)) [5,-6,6,3]
00:00:16 <lambdabot>  [(5,25),(-6,36),(6,36),(3,9)]
00:00:21 <boxscape> > maximumBy (comparing fst) (zip [25,36,36,9] [5,-6,6,3])
00:00:24 <lambdabot>  (36,6)
00:00:27 <jle`> > maximumBy fst $ map (\x -> (x, x^2)) [5,-6,6,3]
00:00:30 <lambdabot>  error:
00:00:30 <lambdabot>      • Occurs check: cannot construct the infinite type:
00:00:30 <lambdabot>          b ~ (b, b) -> Ordering
00:01:30 <jle`> > maximumBy (comparing fst) $ map (\x -> (x, x^2)) [5,-6,6,3]
00:01:33 <lambdabot>  (6,36)
00:01:46 <boxscape> comparing snd?
00:01:57 <jle`> oh
00:01:57 <jle`> > maximumBy (comparing fst) $ map (\x -> (x^2, x)) [5,-6,6,3]
00:02:00 <lambdabot>  (36,6)
00:03:44 <trineroks> can anyone explain why this isn't working then?
00:03:44 <trineroks> http://pastebin.com/BqT2Kxk4
00:04:11 <boxscape> trineroks: your list is a single element
00:04:15 <boxscape> because it's the maximum of another list
00:04:30 <trineroks> oh shit
00:04:31 <trineroks> that's right
00:05:06 <trineroks> but even when I remove it, I still get errors...
00:05:16 <trineroks> http://pastebin.com/Gz4nKsHC
00:06:00 <boxscape> why is there a do?
00:06:32 <jle`> trineroks: always paste the error too
00:06:42 <jle`> rule #1 :)
00:07:15 <trineroks> man
00:07:25 <trineroks> if there's an easy way to copy and paste the error from cmd
00:07:31 <boxscape> on windows?
00:07:34 <jle`> usually you can just higlight it and ctrl+c
00:07:38 <trineroks> I can't highlight it
00:07:41 <trineroks> but I can take a snapshot
00:07:42 <trineroks> http://puu.sh/uUd01/c92ef85833.png
00:07:46 <boxscape> rightclick -> mark -> Enter?
00:07:47 <jle`> it depends on what your terminal emulator is
00:07:53 <jle`> but also yes a lot of people screenshot it
00:08:10 <jle`> trineroks: have you tried importing the modules where maximumBy and comparing come from?
00:08:21 <Axman6> urgh, why is windoes so broken >_<
00:08:27 <jle`> do you know what "variable not in scope" means, in an error message?
00:08:28 <Axman6> windows*
00:08:34 <jle`> it means that you're using it, but it's not defined anywhere
00:08:52 <jle`> so in this case you'll have to import the modules that procide it
00:09:10 <jle`> s/procide/provide
00:09:20 <trineroks> so what would I import?
00:09:22 <trineroks> import Data.List?
00:09:54 <boxscape> yes, Data.List for maximumBy and Data.Ord for comparing
00:10:01 <jle`> you can use hoogle to find out where things come from in general
00:10:05 <jle`> but yes in this case Data.Ord has comparing
00:10:12 <boxscape> @where hoogle
00:10:13 <lambdabot> http://haskell.org/hoogle http://fpcomplete.com/hoogle – See also Hayoo, which searches more packages: http://hayoo.fh-wedel.de/
00:11:13 <jle`> also the documentation for 'base' has an index too :)
00:11:54 <trineroks> alright I can see it works for the most part, however it's still giving me the wrong tuple for this case
00:11:56 <trineroks> maxOver (\x -> x * x) [3,5,4,-6,6]
00:12:08 <trineroks> gives me (36, 6) rather than (36, -6)
00:12:18 <jle`> it seems like maximumBy gives the last result for some reason
00:13:04 <trineroks> I don't quite understand that
00:13:35 <jle`> well, maximBy fst compares only the first item in the tuple
00:13:50 <trineroks> also if this is working as intended, wouldn't zip list xs give me (9, 3) (25, 5) (16, 4) (36, -6) (36, 6)?
00:13:51 <jle`> so to compare (36, 6) and (36, -6), it only looks at the 36
00:13:53 <trineroks> yes
00:14:05 <jle`> so in maximumBy's eyes, (36, 6) and (36, -6) are equal
00:14:09 <jle`> they are both maximums of that list
00:14:16 <jle`> maximumBy just seems to pick the final maximum
00:14:18 <trineroks> yeah
00:14:19 <trineroks> ah
00:14:28 <trineroks> would I have to modify this to pick the first maximum?
00:15:06 <cocreature> gnah, I just looked at the source of maximumBy to figure out why it uses the final maximum and remembered that it uses foldr1 instead of foldl'
00:15:23 <jle`> what why is that even a thing
00:15:35 <jle`> that doesn't make any sense v.v
00:16:00 <trineroks> so then how could I fix this to work as intended?
00:16:00 <cocreature> jle`: it probably makes even less sense than implementing sum in terms of foldr
00:16:04 <Axman6> -_-
00:16:18 <jle`> :'(
00:16:32 <cocreature> I hate that all these useful functions are implemented like that but I’m too lazy to fight to change their definitions
00:16:42 <Axman6> off to -libraries with this! (to distract from all the Foldable nonsense there at the moment)
00:16:42 <jle`> i think they're from the Report
00:16:44 <kadoban> Perhaps that's so you can get the maximum of an infinite list?
00:16:52 <jle`> lol
00:17:00 <cocreature> kadoban: good luck with that
00:17:11 <kadoban> I'm only 99% joking. Are there types where you could? I think I could make one, though I don't know if it'd actually work.
00:17:49 <Axman6> if you had a short circuiting definition of max perhaps
00:18:05 <kadoban> Though ... even if you did, how would that ever be useful. It'd either give you "Infinity" or run forever.
00:18:12 <Axman6> like min Nothing _ = Nothing IIRC
00:18:18 <kadoban> Right
00:18:34 <cocreature> maximumBy uses cmp not max
00:18:44 <cocreature> eh nvm
00:18:46 <jle`> there isn't any way compare can be meaningfully short-circuiting
00:18:51 <Axman6> > minimum $ Nothing : repeat (Just 1)
00:18:57 <lambdabot>  mueval-core: Time limit exceeded
00:19:07 <jle`> because compare Nothing x has to check if x is also Nothing
00:19:12 <jle`> in which case it would be EQ
00:19:37 <cocreature> ah it looks like for lists it’s at least foldl1 but not foldl1'
00:19:53 <cocreature> hm, I guess you don’t need strictness here
00:20:07 <cocreature> you’re forcing evaluation at every step anyway
00:20:09 <trineroks> well I just fixed it
00:20:14 <trineroks> I'm not used maximumBy
00:20:31 <trineroks> using*
00:20:54 <kadoban> jle`: Maybe could just say that "Infinity" is greater than everything else, even other infinities? That ... seems like a wacky thing though.
00:21:43 <cocreature> why is maximum part of Foldable but maximumBy is not oO
00:21:47 <cocreature> that seems like the wrong way around
00:23:15 <boxscape> uhm, maximumBy :: Foldable t => (a -> a -> Ordering) -> t a -> a  is part of http://hackage.haskell.org/package/base-4.9.1.0/docs/Data-Foldable.html
00:23:35 <cocreature> boxscape: but it’s not part of the Foldable type class
00:23:39 <cocreature> so you can’t overwrite it
00:23:42 <boxscape> ah, right, fair enough
00:23:50 <cocreature> and you’re stuck with that silly foldr1 definition
00:25:03 <cocreature> yet another reason to use a non-default prelude because we’ll never be able to fix this
00:25:29 <jle`> well, time for BBP2
00:25:42 <Axman6> hooray!
00:25:51 <cocreature> jle`: and two more years of annoying discussions that don’t do any good
00:26:14 <jle`> and two more years of bringing out the worst of the passive aggressiveness in the community? ;_;
00:26:20 <cocreature> exactly
00:26:25 <Axman6> I would like the see the community more open to more aggressive changes/fixes these days. it didn't make sense a few years ago because there was less of a community of people trying to keep code up to date. I think things are better now
00:26:32 <Axman6> far from perfect, but better
00:26:51 <jle`> maybe it's just time for ghc-9
00:26:59 <jle`> and not even pretend to have backwards compatibility
00:27:13 <Axman6> yeah
00:27:30 <jle`> and then for ghc-8 users we can let people import __future__
00:27:42 <Axman6> I feel each major GHC release (or each second one) should be a good excuse to make things better, with breakages if necessary
00:27:47 <JuanDaugherty> it's "passive aggression"
00:28:04 <jle`> thank you JuanDaugherty 
00:28:19 <jle`> the major version bump for ghc seemed a bit arbitrary
00:28:22 <JuanDaugherty> BBP?
00:28:40 <Axman6> burning bridges proposal
00:28:55 <JuanDaugherty> ah, breaking changes for ghc i take it
00:28:56 <jle`> the droid from the new star wars
00:29:11 <jle`> not quite to ghc, but to Prelude
00:29:29 <JuanDaugherty> for it's profile hs is fairly dynamic, an ideal of conservative change I would say
00:30:28 <jle`> the api cruft gives character to the language
00:30:50 <Axman6> "rustic"
00:30:53 <JuanDaugherty> (profile compared to other high profile langs)
00:30:55 <jle`> gives a sense of history and legacy
00:31:25 <jle`> compare to a language like purescript which doesn't have much historical baggage
00:31:25 <halogenandtoast> Are there any nifty algorithms to determine if 3 unsorted numbers are consective?
00:31:28 <jle`> where's the character in that
00:31:39 <halogenandtoast> 3 unsorted numbers in a list
00:32:12 <jle`> well, there are only six ways that three distinct numbers can be ordered
00:32:46 <jle`> maybe just enumerate over them :3
00:33:05 <jle`> i don't know if you're going to get any better than x <= y && y <= z, though
00:33:30 <erisco> why do printers never work
00:33:32 <halogenandtoast> That's not consecutive though
00:34:05 <halogenandtoast> erisco: is it a printer or an all in one printer
00:34:15 <Axman6> erisco: because you're not using a Mac (the one piece of hardware OS X excells at supporting is printers, but pretty much nothing else)
00:34:16 <erisco> a laser printer
00:34:18 <halogenandtoast> I'm pretty sure we've never gotten an all in one printer to ever work in human history
00:34:53 <erisco> I guess I'll get my mac tomorrow and plug it in
00:35:04 <erisco> it *was* working, and then now doesn't work
00:35:13 <sm> even on mac, it's not a sure thing
00:35:15 <erisco> reinstalled the drivers
00:35:22 <erisco> it printed one page and then stopped working again
00:35:33 <erisco> it also caused Windows to fail to boot a few times
00:35:43 <halogenandtoast> erisco: sounds like normal behavior to me.
00:36:02 <JuanDaugherty> halogenandtoast, same as sort
00:36:33 <JuanDaugherty> determine order for low number == sort
00:36:36 <halogenandtoast> JuanDaugherty: sure, I'll sort and then I guess just recursively check elements
00:36:50 <erisco> alright, g'night
00:37:25 <halogenandtoast> f (x:y:xs) = if x + 1 == y then f (y:xs) else False
00:37:29 <halogenandtoast> is my guess
00:37:32 <halogenandtoast> once sorted
00:38:25 <halogenandtoast> and then just have the base case f _ = True
00:40:37 <cocreature> > (\xs -> all (== 1) (zipWith (-) (tail xs) xs)) [1,2,4]
00:40:39 <lambdabot>  False
00:40:40 <cocreature> > (\xs -> all (== 1) (zipWith (-) (tail xs) xs)) [1,2,3]
00:40:42 <lambdabot>  True
00:40:45 <cocreature> ^ halogenandtoast 
00:41:03 <jle`> s/tail/drop 1
00:41:12 <cocreature> ah right, I always forget that
00:41:21 <halogenandtoast> why use drop 1 over tail?
00:41:28 <cocreature> because tail crashes on the empty list
00:41:29 <jle`> tail is partial
00:41:35 <jle`> > tail []
00:41:37 <lambdabot>  *Exception: Prelude.tail: empty list
00:41:38 <halogenandtoast> oh right, boo hiss
00:41:39 <jle`> > drop 1 []
00:41:43 <lambdabot>  []
00:42:11 <halogenandtoast> I'll need a second to digest that function
00:42:18 <halogenandtoast> okay digested
00:42:26 <halogenandtoast> neat
00:43:05 <cocreature> halogenandtoast: that said I’m not sure if it’s really an improvement over just a manually recursive definition
00:43:33 <cocreature> halogenandtoast: btw you can replace your definition by x + 1 == y && f (y : xs)
00:43:59 <halogenandtoast> cocreature: very true
00:44:06 <jle`> the ol' `if p then True else False`
00:44:24 <halogenandtoast> jle`: yeah I just didn't see it because recursion
00:44:30 <halogenandtoast> and coding on the spot in irc
00:44:32 <boxscape> if p == True then True else False
00:44:49 <cocreature> jle`: I actually found myself doing that not too long ago ;)
00:45:06 <cocreature> boxscape: if show p == "True" then read "True" else read "False"
00:45:10 <boxscape> brilliant
00:45:17 <cocreature> strings are the solution to everything!
00:49:24 <jle`> cocreature: i actually catch myself doing it too sometimes
00:49:32 <jle`> which leads me to think how many times i've done it and not caught myself
00:49:58 <jle`> for the most part all of this is solved by just never using bools
00:50:14 <jle`> quality of code is inversely proportional to usage of obol
00:52:00 <jle`> there is no safe dosage of bools
00:52:09 <halogenandtoast> thanks cocreature and others
00:53:02 <anohigisavay> hi. i have always been confused about monads and tail recursion. monadic binds are not tail recursive right?
00:53:28 <jle`> i'm not sure if there is a meaningful way to answer that
00:53:48 <jle`> tail recursive doesn't have much of a meaning in haskell, anyway
00:53:52 <anohigisavay> i am thinking that if i enable {-# LANGUAGE Strict #-} then a monadic recursion will explode
00:54:03 <anohigisavay> but it does not
00:54:04 <jle`> langage strict doesn't change the semantics of the language
00:54:14 <jle`> it only makes data fields strict by default
00:54:20 <anohigisavay> main = putStrLn "GG" >> main
00:54:34 <jle`> it just means that data Foo = Foo Int Bool is, by default, data Foo = Foo !Int !Bool
00:54:39 <jle`> it doesn't turn haskell into a strict language
00:55:00 <anohigisavay> jle`, that's StrictData extension no?
00:55:00 <jle`> also tail recursion doesn't have anything to do with strictness or evaluation strategies
00:55:22 <jle`> tail recursion just isn't a meaningful concept in haskell
00:56:06 <jle`> anohigisavay: ah yes, it also makes let bindings and pattern bindings strict by default, too.
00:56:13 <jle`> but it doesn't make haskell a strict language
00:56:35 <jle`> it just means that f x = ... is by default f !x = ..., etc.
00:56:51 <jle`> anohigisavay: if you are confused about monads and tail recursion, i have good news: the two things have nothing to do with each other :)
00:56:56 <jle`> hopefully that clears up the confusion?
00:57:51 <anohigisavay> jle`, sorry :'(
00:58:11 <jle`> no need to be sorry :o
00:58:19 <anohigisavay> okay (>>=) is just a function
00:58:22 <anohigisavay> right
00:58:22 <jle`> but yeah, -XStrict only affects functions/data types declared in that module
00:58:29 <jle`> it doesn't modify the semantics of the language
00:58:29 <anohigisavay> jle`, okay so how do i understand that fact that monadic recursion doesn't explode? if strict is enabled it has to evaluate the second argument to >>= before applying the bind operation?
00:58:51 <jle`> -XStrict doesn't modify anything about how haskell evaluates things
00:59:16 <jle`> it just affects the default behavior of how arguments are bound in functions defined in that module
00:59:25 <jle`> it's basically synactic sugar
00:59:34 <jle`> it doesn't change anything about haskell the language
01:00:07 <jle`> it just basically inserts !'s for you, so you don't have to write f !x !y !z = ... everywhere, you can just write f x y z, which is "desugared" into f !x !y !z
01:00:08 <cocreature> -XStrict affects the definition of functions defined in that module not of things evaluated in that module
01:00:21 <jle`> it's mostly for syntactic convenience/cleanliness
01:00:25 <anohigisavay> OH!
01:00:29 <anohigisavay> i see 
01:00:46 <jle`> anohigisavay: in your case, how >>= works is up to the definition of >>= for that specific typeclass
01:00:48 <anohigisavay> that makes it clear
01:00:51 <jle`> er, that specific instance
01:01:09 <jle`> every instance of Monad can define >>= however they want, as long as it obeys the laws
01:01:22 <jle`> it has nothing to do with the concept of monad itself
01:01:25 <jle`> it's about specific monad instances
01:01:51 <halogenandtoast> jle`: it can define it however it wants regardless of obeying the laws
01:01:54 <halogenandtoast> it's just bad then
01:02:02 <jle`> heh, yeah
01:02:15 <jle`> anohigisavay: so the behavior you are seeing when you do main = blah >> main doesn't have to do with the idea of monads at all
01:02:24 <jle`> anohigisavay: it has to do with how (>>) is defined/implemented for that instance, IO
01:03:10 <jle`> it's "unrelated to monads" in the sense that you're looking at a specific feature of a specific type, that can't be generalized to monads in general
01:03:36 <anohigisavay> jle`, many thanks man :D
01:03:52 <jle`> sort of like saying "it looks like all numbers are greater than zero.  is being greater than zero a property of being a number?" when you only look at the number 7
01:04:10 <jle`> the number 7 is a nice number and all, but generalizing properties about 7 to properties about numbers in general is going to land you in trouble
01:04:34 <jle`> you might start thinking that all numbers are odd, too
01:04:55 <jle`> and that being odd is an inherent property of being a number
01:05:31 <vach> hi all
01:06:09 <vach> where would you start learning haskel, if you dont really know Monads?
01:06:15 <vach> any links appreciated
01:07:30 <boxscape> @where book
01:07:30 <lambdabot> http://haskellbook.com/
01:07:34 <raduom> Haskell from first principles helped me get across the first hurdles.
01:07:47 <raduom> And that is the link ^^ :)
01:08:39 <boxscape> of course, there are free resources as well, though as far as I know none of them are as good as that book
01:10:14 <boxscape> https://github.com/bitemyapp/learnhaskell
01:12:54 <raduom> jle` when you say tail recursion is not a thing in haskell, are you referring to the tail recursion modulo cons thing (or guarded recursion)?
01:14:13 <raduom> and since haskell is lazy you generally use right fold to make use of that?
01:15:27 <ventonegro> I just wish they finished that book
01:16:14 <magthe> boxscape: I'm mostly interested in the exercises in some of the chapters of that book... e.g. where can I find exercises geared towards solutions using/creating Monoid/Semigroup/... do you happen to have a good resource for that?
01:17:21 <boxscape> uh, I don't, sorry
01:26:23 <halogenandtoast> vach: step 1) don't worry about learning monads
01:29:26 <Cale> vach: The actual question should be the other way around: where would you start learning about monads if you don't know Haskell? The answer to that is to get a degree in mathematics and study category theory, but that's a really long route to take if your goal is to write programs.
01:30:03 <Cale> But you can learn about the monad abstraction as it applies to Haskell once you know a bit of Haskell and it's not a big deal.
01:30:08 <halogenandtoast> Cale: also most books on category theory (hyperbole since I've only tried reading one) are awful
01:30:19 <Cale> Which one did you try to read?
01:30:50 <boxscape> Bartosz Milewski's course on youtube was neat, although I haven't started watching the second course
01:30:51 <halogenandtoast> Oxford Logic Guides Category Theory by Steve Awodey
01:31:05 <Cale> Ah, that's too bad, I really liked that one :)
01:31:29 <halogenandtoast> Cale: I think I'm missing a lot of the prerequesite courses
01:31:34 <Cale> I don't think I properly understood the Yoneda lemma before reading Awodey's treatment of it.
01:31:57 <halogenandtoast> And haven't "really done math" in 10 years.
01:33:06 <halogenandtoast> Cale: it took me 20 minutes just to figure out what the subscript A was in a ≤A b 
01:33:59 <halogenandtoast> Another 20 minutes to understand this: antisymmetry: if a ≤A b and b ≤A a,then a=b.
01:34:08 <halogenandtoast> although that's kind of obvious now.
01:34:26 <halogenandtoast> mainly the subscript A was throwing me off.
01:36:06 <halogenandtoast> Oh and Posets, that was fun to struggle through
01:36:10 <halogenandtoast> so mainly my fault I guess
01:36:41 <Cale> Yeah, I suppose it tries to introduce those things if you didn't know them already, but it's really hard to be totally self-contained
01:36:52 <halogenandtoast> I guess I need a category theory for dummies book.
01:37:06 <Cale> Or just random other bits of mathematics
01:37:25 <halogenandtoast> Yeah
01:38:53 <halogenandtoast> I need someone to tell me that path
01:39:10 <halogenandtoast> How do I go from calc/linear alg to category theory
01:39:54 <halogenandtoast> I'm assuming relational calculus probably helps?
01:40:02 <magthe> boxscape: my search continues then :)
01:40:20 <halogenandtoast> actually ignore what I just said
01:40:47 <cocreature> halogenandtoast: random bits of algebra, e.g. group theory, ring theory, … are helpful
01:40:51 <Cale> I would say you might want something on group theory and abstract algebra in general. Dummit and Foote is a good book
01:42:00 <Cale> and then, well, it depends on your interests -- the more areas of mathematics you get just a little bit of, the more you will appreciate what category theory can do as far as providing a sort of overarching organisational structure
01:42:03 <halogenandtoast> Cale: looks neat, I'll give it a go.
01:42:27 <Cale> But another area from which category theory specifically draws a lot of inspiration is algebraic topology
01:42:31 <halogenandtoast> to be honest, I should really focus on learning Japanese, but Haskell is just too interesting to me.
01:42:57 <Cale> (But you'll want to know some group theory at least before trying to learn any algebraic topology)
01:43:00 <cocreature> I think you can use japanese variable identifiers in haskell
01:44:38 <halogenandtoast> > let 猫 = "Neko" in 猫
01:44:40 <lambdabot>  "Neko"
01:45:07 <halogenandtoast> > let x + y = 4 in 5 + 10
01:45:10 <lambdabot>  4
01:46:13 <boxscape> that looks so confusing at first
01:46:29 <halogenandtoast> boxscape: it's confusing at second as well
01:46:32 <boxscape> I was thinking "is this something like n+k patterns?"
01:47:54 <hardfire> hi, i'm super new to stack, and i'm trying to run `stack setup`. It fails with the following error `Updating package index Hackage (mirrored at https://s3.amazonaws.com/hackage.fpcomplete.com/) ...recv: resource vanished (Connection reset by peer)` -  i couldn't find anything on how to solve this. -- 
01:48:03 <hardfire> i'm basically trying to setup hledger
01:48:07 <hardfire> :D any help would be appreciated
01:48:12 <hardfire> or point to the right channel
01:49:08 <Cale> boxscape: Nope, just a local redefinition of (+)
01:49:20 <boxscape> yeah, I realized that after thinking about it for a bit :)
01:49:29 <Cale> hardfire: hmm
01:50:26 <hardfire> Cale: also s3 page says AccessDenied, not sure if that's how it should be
01:50:56 <Cale> hardfire: Where are you running that command from?
01:51:02 <Cale> I'll see if I can reproduce it
01:51:18 <hardfire> on the terminal? or do you mean physical location?
01:51:28 <Cale> I mean, out of which directory
01:51:48 <hardfire> ah! just my home directory
01:52:14 <hardfire> i basically want to run ` stack install --resolver=nightly hledger hledger-ui hledger-web ` 
01:52:34 <hardfire> whcih also gives the same error, and somehow i ended up with `stack setup`
01:54:46 <sm> hardfire: what's stack --version ?
01:55:16 <hardfire> sm - `Version 1.4.0, Git revision e714f1dd3fade19496d91bd6a017e435a96a6bcd (4640 commits) x86_64 hpack-0.17.` 
02:04:17 <halogenandtoast> Is there a reason ghci wouldn't be able to see modules installed with cabal. On my machine I can do `import System.Random` without a problem, but my coworker can not
02:04:26 <halogenandtoast> is there something I should be looking for to help him debug?
02:04:48 <sm> hardfire: that sounds good. I don't think "stack setup" is failing that way for other people right now. I'd guess it's either a transient networking failure or something firewalled
02:05:40 <hardfire> okay. i had the same feeling as its happening since last night. but i'll try to see if it continues like this. Thanks sm.
02:06:00 <hardfire> what does the resource vanished error mean though? 
02:06:51 <sm> connectivity trouble
02:11:31 <halogenandtoast> For my question I just had him run force-reinstall and it worked
02:11:55 <kylefang> hardfire: where are you located? Some gov might be "regulating" the internet, which replys reset when accessing foreign address
02:12:14 <hardfire> i'm trying from Nepal
02:13:12 <kylefang> hardfire: try hop on some proxy and see if it works.
02:13:44 <kylefang> halogenandtoast: maybe you guys should start doing stack. :]
02:19:07 <sm> hardfire: it might be harder, but if there's no alternative try using https://www.haskell.org/cabal instead
02:19:22 <drdo> I might be crazy, but didn't GHC use to warn you about incomplete matching?
02:19:28 <hardfire> ok, let me try cabal once
02:19:34 <cocreature> drdo: only with -Wall
02:19:45 <cocreature> or rather -fwarn-incomplete-patterns or something like that
02:19:53 <drdo> I see
02:20:44 <drdo> yep, that works, thanks
02:20:54 <boxscape> can someone explain this to me? It seems to me that 0.1.1 is inbetween 0.1 and 1 "diffarray must match >=0.1 && <1, but the stack configuration has no specified version (latest applicable is 0.1.1)"
02:22:10 <cocreature> boxscape: the package is not in the stackage snapshot but on hackage there is version 0.1.1
02:22:15 <boxscape> ah, ok
02:22:17 <cocreature> boxscape: you can solve this by adding it to extra-deps
02:22:21 <boxscape> alright
02:22:22 <boxscape> thanks
02:22:29 <cocreature> I should really make a PR to improve this error message
02:22:33 <cocreature> it’s really confusing
02:22:45 <boxscape> it is, but it does say that it's probably solvable by adding it to extra-deps
02:38:57 <bakibour> Hi, does anyone use or know if i can use Haskelly in VSCode on Windows?
02:39:00 <sm> hardfire: cabal install going well I hope ?
02:42:14 <hardfire> sm: i think, installing cabal now first
02:43:51 <sm> ok. See also hledger/cabal-install.sh, good luck
02:43:57 <halogenandtoast> kylefang: we are using stack but sometimes you just want to jump into a random ghci instance to try things out
02:44:15 <halogenandtoast> kylefang: for example I was just showing him how easy it was to generate a random number
02:44:17 <hardfire> ok. thanks sm :D will shout if i get lost agian
02:46:51 <Phyx-> trineroks: just put cmd in quick edit mode and you can just select  text to copy
02:47:29 <Phyx-> trineroks: or use a differnt terminal such as conemu.
02:56:05 <Enzyme> Is there an easy way to take a seed value and create a geometric/arithmetic series out of it?
02:57:35 <JuanDaugherty> evaluate a simple closed form for same and accumulate the result?
02:58:01 <JuanDaugherty> possible contest for least number of lines
02:58:15 <JuanDaugherty> 1 is possible
03:03:35 <makalu> if I use my own snapshot with stack, it complains that packages such as directory are missing. Why doesn't stack take them from the GHC global database?
03:04:01 <makalu> why does a snapshot need to include the packages that come with GHC?
03:05:49 <ventonegro> the whole point of stack is to use a self-contained set of packages
03:10:36 <makalu> I could live with that but when building happy for example, stack links it to both the global and snapshot unix package
03:10:51 <makalu> which will give a linker error of course
03:28:08 <ocharles> What am I meant to do if I need to parser a 32-bit little endian integer with attoparsec?
03:31:21 <ocharles> Hrm, maybe I should be using binary actually
03:31:35 <halogenandtoast> What is the `?` on this like doing? https://github.com/audreyt/regex-genex/blob/master/src/Regex/Genex.hs#L33
03:33:57 <brynedwards> halogenandtoast: https://wiki.haskell.org/Implicit_parameters
03:37:46 <raducu427> @hoogle [a] -> [a]
03:37:47 <lambdabot> Prelude tail :: [a] -> [a]
03:37:47 <lambdabot> Prelude init :: [a] -> [a]
03:37:47 <lambdabot> Prelude reverse :: [a] -> [a]
03:38:28 <ventonegro> @hoogle Either a c -> Either b c
03:38:28 <lambdabot> Data.Either.Combinators swapEither :: Either e a -> Either a e
03:38:28 <lambdabot> Data.EitherR flipEither :: Either a b -> Either b a
03:38:28 <lambdabot> Puppet.Utils strictifyEither :: Either a b -> Either a b
03:38:30 <halogenandtoast> brynedwards: Hmm seems like you could just pass in the dynamic value instead
03:38:42 <halogenandtoast> not sure what would prompt me to use that
03:38:53 <halogenandtoast> thanks for pointing me in the right direction
03:38:59 <halogenandtoast> it makes sense now what is happening there
03:40:23 <raducu427> @pl \f x -> f x x
03:40:23 <lambdabot> join
03:44:50 <raducu427> @pl \l -> (`runCont` id) $ callCC (\k -> loop k l)              where  			   loop _ []     = return 1 			   loop k (0:_)  = k 0 			   loop k (x:xs) = do                   return 1 * x
03:44:50 <lambdabot> (line 1, column 97):
03:44:51 <lambdabot> unexpected '_'
03:44:51 <lambdabot> expecting variable, "(", operator, "$", "$!", "`seq`" or end of input
03:45:38 <geekosaur> @pl only works on expressions
03:45:38 <lambdabot> only works on expressions
03:45:50 <lep-delete> lal
03:47:30 <geekosaur> well, the point is a where clause and accompanying bindings will not be handled
03:49:32 <arianvp2> Why are Product and Compose in base twice?
03:49:45 <arianvp2>  under GHC.Generics as (:*:) and (:.:)
03:49:55 <arianvp2> and under Data.Functor.{Product,Compose}
03:50:46 <hardfire> sm: i have the feeling cabal is doing its job :D had to install some packages manually, but works 
04:02:48 <halogenandtoast> Does `.:` have any kind of name
04:03:02 <halogenandtoast> f .: g = \x y -> f (g x y)
04:04:51 <halogenandtoast> Heading out, I'll check logs later
04:06:34 <srhb> halogenandtoast: No, it doesn't. It's just slightly different composition, after all.
04:07:36 <lyxia> arianvp2: they were developped independently, in GHC.Generics and in transformers.
04:08:14 <lyxia> it's possible they will get merged one day.
04:37:11 <boxscape> It took me way too long to figure out that I wrote [0,maxX] instead of [0..maxX] -.-
04:37:26 <boxscape> maybe I should use dependent types to make sure my lists have the right lengths
05:30:15 <barrucadu> Anyone familiar with the 'bound' library? I'm trying to convert some code which currently uses stringy variable names to use bound/Scope as I'm now needing more complex functionality. But the problem is that my AST type is expicitly typed, only well-typed terms can be constructed, and I don't see how I can really make that work with bound, as I can't make my type a monad without giving that up.
05:33:15 <kubunto> what is eta conversion exactly?
05:34:11 <ahri> i have a type GameInProgress that holds my game board, players, etc. and i'm considering how to refactor to model the end of a game. my problem is that if i model it as "GameState = GameInProgress (...stuff...) | GameWon Player | GameDrawn" then i'll have to go around changing all my existing functions on GameInProgress to now deal with the rest of the union type that they don't care about. should i instead 
05:34:17 <ahri> do something like "GameState = Won | Drawn | InProgress GameInProgress" to avoid that hassle?
05:35:21 <codedmart> lyxia: OK have any time to help me? If not no bug deal.
05:35:33 <Athas> ahri: yes, that is the usual way to do it.
05:35:54 <rioch> I have a function `myfunc :: Ord a => [a] -> [a]`. When I call with `myfunc []` it fails to build with "Ambiguous type variable a0 from use of `myfunc` prevents the constraint (Ord a0) from being solved". Isn't [] in Ord?
05:36:06 <ahri> Athas: ok, i wasn't sure if i was trading something off that i shouldn't
05:36:30 <liste> rioch: there's a Ord a => [a] instance
05:36:36 <Athas> ahri: the only "cost" is an additional pointer, but don't worry about that.  This is very idiomatic.
05:36:38 <cocreature> rioch: the problem is that to know what ord constraint to use it needs to know what kind of list this is
05:36:52 <cocreature> but [] contains no elements that help inferring that
05:38:22 <rioch> cocreature: The function when given `[]` will return `[]`, so it doesn't matter.
05:39:04 <cocreature> rioch: that doesn’t matter. GHC still needs to know which "Ord a" it should chose.
05:39:29 <rioch> cocreature: How do I add a type annotation to an empty list?
05:39:39 <cocreature> rioch: ([] :: [Int])
05:39:48 <cocreature> or whatever type you want to give it
05:39:48 <rioch> Thanks
05:41:55 <kubunto> what is the difference between where and let?
05:43:58 <lyxia> cocreature: I'm available
05:44:02 <lyxia> codedmart: ^ oops
05:44:30 <cocreature> lyxia: great, can you bring me a coffee please?
05:47:23 <liste> kubunto: let .. in .. is an expression, where is bound to a pattern binding
05:48:17 <kubunto> liste: is pattern binding part of functions?
05:48:40 <kubunto> nvm
05:51:56 <codedmart> lyxia: I am sort of grasping the code you gisted (I think), but when I read more about generics it isn't all sticking yet. And when I read other examples they seem so different. Also if I `:kind! (Rep User)` I see nothing about M1 or K1.
05:52:03 <ahri> i have another style question; i needed to control randomness to be able to test my game, so when creating the GameState i end up passing in a System.Random.StdGen and a function of type "StdGen -> (StdGen, Cell)" where a random Cell is generated for my board per the game rules. this means that each time i tick the game, generating a new GameState i need to pass along the StdGen and the function - it ends 
05:52:09 <ahri> up looking like the function might change in the "tick" code, but in fact it's only like this to support testing. is there a nicer approach i could take? the code is on github if i'm not being clear enough
05:53:14 <ahri> the approach i took is indicative of my OOP background, inverting the dependency on particular logic so that i can control it from a test
05:55:04 <lyxia> codedmart: M1 is hidden in D1/C1/S1, these three are type synonyms for M1 D/M1 C/M1 S.
05:55:18 <ahri> adding the StdGen to my GameState had the irritating side-effect that i could no longer derive Eq or Show instances, too :(
05:55:32 <codedmart> Ah ok I see that here: https://hackage.haskell.org/package/base-4.9.1.0/docs/GHC-Generics.html#g:5
05:55:46 <lyxia> codedmart: K1 is hidden in Rec0 = K1 R 
05:56:32 <codedmart> Did you name these to try and represent what they are `unpack strict lazy`?
05:56:40 <lyxia> codedmart: sometimes you don't care about the metadata, so you just implement an instance for M1 i c f, sometimes you do, and you have an instance for M1 S ('MetaSel ...) f or whatever
05:57:19 <Athas> ahri: you can always write your own Eq or Show instances.  Logically, the RNG state is part of the "game state", isn't it?
05:57:29 <Athas> (Although maybe that's a philosophical question!)
05:57:48 <codedmart> So `'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy`
05:58:19 <lyxia> codedmart: I just picked names that came to my mind from looking at the initial example in the docs
05:58:42 <Athas> ahri: instead of using an explicit StdGen, you can parameterise your functions over the RNG type via the class RandomGen (of which StdGen has an instance).
05:58:55 <Athas> Then, in your tests, you can pass in some other RNG.
05:59:15 <Athas> That basically turns a functional argument into parametric polymorphism.
05:59:46 <lyxia> codedmart: There are probably much better names, they corresponds to fields of MetaSel http://hackage.haskell.org/package/base-4.9.1.0/docs/GHC-Generics.html#t:Meta
06:03:21 <codedmart> lyxia: OK so this is helping me understand what you wrote better, but I still am not sure how to recursivly get fields with/from K1.
06:05:20 <ahri> Athas: thanks, i'll have a play with that!
06:05:31 <codedmart> lyxia: If you know I would rather you didn't just post full code, but maybe give me a type or a hint. I would really like to try and grasp this. I appreciate your help.
06:05:47 <lyxia> Sure
06:06:26 <Athas> ahri: although random numbers definitely aren't one of the most shiny parts of purely functional programming...
06:16:41 <lyxia> codedmart: you want to get the field names of a in (K1 i a), then note that you have a function that does precisely that.
06:18:13 <codedmart> lyxia: you mean write a GFN instance for K1 that does that?
06:19:03 <lyxia> Yeah
06:30:20 <codedmart> Hmm... still lost, but still reading.
06:37:57 <codedmart> lyxia: is K1 -> `K1 R (Maybe c)`? Still trying to understand M1, K1, etc.
06:38:23 <codedmart> I still don't fully understand Proxy either which I assume isn't helping.
06:40:13 <lyxia> Proxy is like (), K1 is like Identity.
06:40:41 <lyxia> K1 i a p   is a newtype around   a
06:43:57 <codedmart> lyxia: This doesn't seem right to me `instance GFN (K1 i c) where; gfn = gfn;`, but so far is the only thing that does not give me errors.
06:45:13 <lyxia> indeed it's not right
06:46:18 <lyxia> you need to call another function to look in the type c.
06:52:17 <shapr> GOOD MORNING HASKELLERS!
06:52:23 * shapr thunks cheerfully
06:52:39 <uv4smt_> hey gus
06:52:48 <uv4smt_> guys
06:52:52 * lyxia evaluates shapr.
06:53:00 <lyxia> No more leaks.
06:53:21 <uv4smt_> does anyone have idea how the clean master works?
06:53:35 <uv4smt_> anyone?
06:53:46 <shapr> what's a clean master?
06:54:01 <uv4smt_> its an android app for locking another app
06:54:05 <kubunto> jw what is variable naming convention
06:54:07 <shapr> lyxia: well, my head is weak, and that's my normal form.
06:54:18 <shapr> uv4smt_: is your android app written in Haskell? I'm confused.
06:54:42 <uv4smt_> haskell! is it a language>
06:54:45 <uv4smt_> ?
06:54:51 <kubunto> uv4smt_: yes
06:55:17 <uv4smt_> no , it is written in java
06:55:34 <uv4smt_> i want to know its concept only?
06:56:12 <geekosaur> "if you can't tell from context and /topic that this isn;t the hacker hangout, you have no business trying to be a hacker"
06:57:37 <codedmart> lyxia: I have no idea. I feel like it has something to do with https://hackage.haskell.org/package/base-4.9.1.0/docs/GHC-Generics.html#t:Generic, but I am really have no idea what is going on. I seem to always overcomplicate things when trying to learn them.
06:59:08 <Guest27170> Hi
06:59:14 <uv4smt_> hii
06:59:19 <uv4smt_> guest
06:59:42 <ski> hello rafael^WGuest27170
07:00:14 <Guest27170> urrr, learning to use irc, I'm dumb
07:00:28 <ski> nah, you're just a newbie
07:00:47 <ski> (that doesn't make someone dumb)
07:01:56 <Guest27170> @help
07:01:56 <lambdabot> help <command>. Ask for help for <command>. Try 'list' for all commands
07:02:08 <lyxia> codedmart: When working with Generics, you usually have two functions, here gfn, which works on the generic representation of a type (Rep a), and fieldNames, which works on the original types (a).
07:02:20 <ski> Guest27170 : did you have a question about Haskell ?
07:02:44 <lyxia> codedmart: and the instance for K1 usually calls the non-generic version
07:03:09 <ZesenQian[m]> Hi! I wrote an untyped lambda calculus interpreter, and hope to port Haskell to it.
07:03:23 <ski> ZesenQian[m] : .. good luck
07:03:24 <ZesenQian[m]> Will it be a lot of work compiling GHC core to untyped LC?
07:03:30 <ski> yes
07:03:39 <Guest27170> @ski , I have a question about Haskell's Type System, I will ask after learning to use irc
07:03:39 <lambdabot> Maybe you meant: wiki src ask
07:03:58 <ZesenQian[m]> OK, how about idris? that seems newer and less historical stuff.
07:04:07 <ZesenQian[m]> ski: ^
07:04:09 <ski> Guest27170 : well, it's not IRC custom to prefix nicknames with a `@', when addressing someone ..
07:04:20 <ski> ZesenQian[m] : i don't know about idris, ask in #idris ?
07:04:48 <ZesenQian[m]> ski: yeah sure. Thank you!
07:05:05 <Guest27170> ski: just noticed that 
07:05:15 <ski> (also, lambdabot gets confused)
07:05:37 <ski> otherwise, you seem to be IRCing just fine ! :)
07:05:37 <codedmart> lyxia: but fieldNames gives an error about ambigous type. Not sure how to annotate it?
07:06:24 <lyxia> codedmart: with TypeApplications+ScopedTypeVariables. fieldNames @c
07:06:30 <Guest27170> ski: I'm learning how to set my nick name, create password (if there is some thing like that) etc
07:06:39 <shapr> I heard slack invented IRC
07:06:59 <kubunto> shapr: really?
07:07:00 <ski> Guest27170 : try `/nick myNickName'. also try `/msg NickServ help register'
07:07:03 <lyxia> codedmart: you could also change fieldNames to take a Proxy argument to make the type less ambiguous, but you would still have to annotate Proxy with its type at the call site
07:07:09 <shapr> kubunto: no, that's sarcastic
07:07:15 <lyxia> codedmart: you will need to add constraints to the instance BTW
07:07:21 <codedmart> Ugh I was trying `fieldNames (Proxy @c)`
07:07:22 <kubunto> shapr: glad to hear that :P
07:07:29 <shapr> kubunto: I started using IRC in 1988 or 1989
07:07:45 <kubunto> shapr: you are old :P
07:07:56 <rafael_cgs> now I'm rafael_cgs
07:08:07 <shapr> kubunto: yes, but I probably do better cartwheels than you do :-P
07:08:12 * ski has spoken to people aged around 70, on IRC
07:08:13 <shapr> and more mountain unicycling
07:08:29 <lyxia> codedmart: that would work if fieldNames had type (... => Proxy a -> ...)
07:08:33 <rafael_cgs> help register
07:08:38 <kubunto> shapr: thats nice
07:08:44 <ski> rafael_cgs : yeah, like that :)
07:08:49 <kubunto> (meant as compliment)
07:09:14 <shapr> kubunto: yeah, there's so much cool stuff in the world, I don't yet understand why people get mentally old. But maybe it'll happen to me too
07:09:38 <ski> rafael_cgs : as you noticed, if you change your nick to one that's registered, and you don't identify with the correct password within a set time, often this IRC network will automatically change your nickname to something like `Guest27170'
07:10:01 <ski> rafael_cgs : sorry, you should `/msg NickServ' that other command
07:10:32 <codedmart> lyxia: OK so now I am at `instance Generic c => FieldNames (K1 i c) where; gfn _ = fieldNames @c;` but still getting an error `Could not deduce (FieldNames (Rep c)); arising from a use of ‘fieldNames’;`
07:10:33 <rafael_cgs> ski: thank you :)
07:10:42 <codedmart> Sorry I change GFN to FieldNames
07:11:20 <lyxia> sure
07:12:01 <vishalIRC> Hi!
07:12:22 <shapr> greetings vishalIRC! How's code for you?
07:12:25 <lyxia> codedmart: add that missing constraint to the instance
07:12:43 <vishalIRC> It’s beautiful
07:13:17 <codedmart> lyxia: duh, trying now.
07:13:17 <vishalIRC> in C++ that is :p
07:14:29 <codedmart> lyxia: ok that is passing now.
07:14:48 <rafael_cgs> anyone ever readed Phillip Wadler's paper called "How to make adhoc polymorphism less adhoc" ?
07:22:26 <dolio> rafael_cgs: I've read it, a long time ago.
07:25:50 <codedmart> lyxia: ok so if I do this `instance (KnownSymbol n, Generic c, FieldNames (Rep c)) => FieldNames (M1 S ('MetaSel ('Just n) u s l) (K1 i c)) where`. That errors because Text does not have a generic instance.
07:26:39 <lyxia> indeed
07:28:28 <npc24> Hello
07:28:38 <lyxia> codedmart: When you have a recursive generic implementation like this, where fieldNames calls gfn which calls fieldNames again, you can turn fieldNames into a type class, so that you can specialize its behavior for Text and other non-generic types.
07:29:34 <codedmart> lyxia: OK so I was on the right path? I will move into that next.
07:29:39 <lyxia> yeah
07:30:05 <lyxia> uh...
07:30:31 <lyxia> I would have split that instance in two
07:30:50 <codedmart> Sorry what do you mean?
07:31:26 <lyxia> instance (KnownSymbol n, FieldNames f) => FieldNames (M1 S ... f) where    and    instance (Generic c, FieldNames (Rep c)) => FieldNames (K1 i c) where 
07:32:27 <lyxia> it's more modular though the result is the same.
07:35:25 <codedmart> Oh I did this: https://gist.github.com/codedmart/e0142e25a2b53c3dc1e20a30ce92056b
07:38:48 <lyxia> the first instance does things that the second one does already
07:39:12 <lyxia> this duplicates the Generic c, FieldNames (Rep c) constraint
07:41:51 <codedmart> lyxia: But don't I need to fieldNames on f?
07:43:20 <lyxia> you can call gfn, which will then call fieldNames through the second instance.
07:45:46 <codedmart> lyxia: call gfn on @f? Sorry this is painful. I am still not getting :|.
07:46:08 <codedmart> Oh wait
07:46:18 <lyxia> something like that
07:46:23 <codedmart> I see
07:48:09 <codedmart> I got it. Let me see if I can figure out the typeclass and fieldNames
08:02:19 <codedmart> lyxia: It doesn't seem as easy as this at first try right: https://gist.github.com/codedmart/e0142e25a2b53c3dc1e20a30ce92056b#file-main-hs-L4-L5
08:03:25 <lyxia> using a Proxy might be a bit easier at first
08:03:56 <lyxia> I wasn't even consistent since gfn has Proxy argument too
08:04:13 <lyxia> codedmart: and the type class will not have the Generic constraint
08:05:04 <lyxia> so, fieldNames :: Proxy a -> [Text]
08:07:43 <codedmart> This is making me realize I know nothing about this side of haskell. I though I knew typeclasses well enough.
08:12:08 <lyxia> keep the original fieldNames as a separate function which will be used to implement this method for generic types
08:19:18 <fendor> i'm tryign to install intero, but it fails with the message, to install terminfo
08:19:23 <fendor> but terminfo should be installed
08:19:46 <fendor> terminfo-0.4.0.2
08:20:28 <fendor> stack install intero does nothing, and cabal claims it is already installed. On forced reinstallation, nothing changed
08:20:54 <brynedwards> fendor: It probably means the C library, libtinfo, not the haskell bindings
08:21:23 <fendor> oh ok
08:21:44 <fendor> brynedwards, libtinfo.so.5 is linked against libncurses.so.5.9
08:22:23 <codedmart> lyxia: I have no idea how to write this typeclass right now. I am getting errors no matter what I try.
08:23:05 <brynedwards> fendor: It might be looking for libtinfo.so, see https://github.com/commercialhaskell/intero/issues/372#issuecomment-284029395
08:24:16 <codedmart> Trying something else.
08:24:47 <geekosaur> urgh
08:25:00 <geekosaur> so they dlopen libtinfo.so unversioned?
08:25:10 <geekosaur> glad they're so certain it will never, ever be incompatible
08:26:06 <brynedwards> :(
08:26:33 <codedmart> lyxia: I might be onto something.
08:30:23 <codedmart> lyxia: Yup nevermind I am not sure. The route I was just going required my to do `ToFieldNames Maybe ...` instances.
08:31:47 <fendor> brynedwards, thanks, this resolved the issue
08:31:55 <brynedwards> :)
08:32:37 <codedmart> Oh wait
08:38:39 <lyxia> codedmart: are you trying to write a class or instance declaration now?
08:43:20 <codedmart> lyxia: This is where I am at, but just hit another issue. Am I on the right path: https://gist.github.com/codedmart/e0142e25a2b53c3dc1e20a30ce92056b
08:44:23 <lyxia> yeah
08:46:05 <lyxia> codedmart: you don't need to write lines 25 and 28 because they are provided by the generic implementation
08:48:49 <codedmart> Hmm... I get an error if I remove those lines.
08:50:07 <lyxia> ah I see, that's because you don't have an instance for sum types
08:50:34 <codedmart> lyxia: also don't I need a `instance ToFieldNames a`? If I use the generic  one it ends up in a loop.
08:50:37 <lyxia> It seems best to leave these lines then
08:50:55 <codedmart> I can try an instance for sum types later.
08:51:03 <lyxia> Oh yes you are right about that
08:51:49 <codedmart> How would I go about that?
08:54:02 <shapr> silly question, how do I write a megaparsec parser that will pick up alphaNum and @ and . but not comma?
08:54:36 <codedmart> lyxia: Any ideas how / when to terminate it?
08:55:08 <glguy> shapr: alphaNum <|> oneOf "@."
08:55:14 <lyxia> codedmart: if you have a recursive type you will have to write the instance manually.
08:55:19 <shapr> glguy: thanks!
08:56:14 <lyxia> codedmart: or maybe you can keep a queue of types at runtime
08:57:41 <Vibor> Hi, how do I import a module located in parent directory? say foo.hs is located in /P , bar.hs is in /P/C , how do I import foo in bar ?
08:58:34 <geekosaur> you shoulld have the source directory as /P, then Bar.hs is module C.Bar and can import Foo
09:02:20 <codedmart> lyxia: ok but how would I add the parent model to the text? Ie in my example ["firstName", "address.street", "address.state"]?
09:03:07 <Vibor> geekosaur: Just made a test, thanks a lot:)
09:08:14 <uve> Hey
09:08:23 <uve> 8
09:08:27 <shapr> yeah?
09:08:30 <shapr> hi uve 
09:11:21 <uve> Hii shapr
09:11:49 <shapr> uve: how's code?
09:12:57 <uve> Code?
09:13:20 <hydraz> Presumably, Visual Studio Code.
09:13:27 <hydraz> or your code :p
09:13:47 <danza> right ... i won't presume visual studio to be in front of any code :D
09:13:58 <uve> Visual studio code:-)
09:14:04 <danza> :(
09:14:04 <uve> R8
09:14:13 <hydraz> I use neovim
09:14:14 <uve> I agree
09:14:25 <hydraz> VS Code is about 100% heavier than an editor needs be
09:14:34 <hydraz> I keep trying to use Emacs but I can't.
09:14:49 <uve> Xamarin is interesting too
09:15:27 <hydraz> you mean monodevelop? you can write Haskell in that?
09:15:47 <uve> Anybody android developer?
09:15:53 <uve> Or xamarin
09:16:17 <glguy> uve: Did you have a Haskell question about Android?
09:17:02 <uve> No 💡 about haskell
09:17:43 <hydraz> well, you're in the Haskell channel.
09:18:39 <uve> ☺oops wrong channel
09:19:09 <boxscape> uve: now that you're here, you may as well learn haskell
09:20:24 <uve> Any application example written in haskell!!
09:23:41 <glguy> uve: You can start here: https://wiki.haskell.org/Haskell_in_practice
09:24:07 <ysangkok> i get an ambiguous type variable error on calling a function with an inferred type signature. the proposed fix is to add a type annotation, but how can i do it when i don't know the type?
09:24:59 <glguy> ysangkok: You can look at the types of things in GHCi and in the documentation
09:25:19 <XaNterous> hello everyone, i have a recursion question. I am trying to do this. [2,4,6,8,12] is my list and i am trying to check all elements have 2 difference. 2 - 4 is okey 4 - 6 is okey etc.. i tried this but having lots of errors.
09:25:48 <glguy> XaNterous: You can put your code on http://lpaste.net and ask questions about what you don't understand
09:25:52 <XaNterous> ~https://paste.kde.org/ppffn46hw
09:26:05 <XaNterous> https://paste.kde.org/ppffn46hw sorry for ~ in front
09:26:50 <glguy> XaNterous: On line 6 you're trying to return the list 'htail' as the final result
09:27:01 <glguy> So you're getting this message "Couldn't match expected type ‘[a]’ with actual type ‘a’"
09:27:27 <glguy> 'fx' is defined to return a value having type 'a', but you're returning a value with type '[a]'
09:28:05 <glguy> You'll need to make a recursive call to fx at this point to check the rest of that list
09:28:47 <glguy> Additionally you're trying to compare the values in your list to a number (2)
09:29:07 <glguy> Your type signature for fx :: (Ord a) => [a] -> a; doesn't say anything about 'a' being a number
09:29:32 <XaNterous> for your comment 'fx' is defined to return a value having type 'a', but you're returning a value with type '[a]' , i defined htail isnt it head of tail ? 
09:29:52 <lyxia> codedmart: the place where you know you may have nested fields is in the instance FieldName (M1 S (...) f)
09:30:42 <lyxia> codedmart: you can add the current field name to each sub-field you get with gfn.
09:30:50 <glguy> XaNterous: Oh, yes I guess it is
09:31:00 <boxscape> The problem seems to be where the function is called
09:31:07 <boxscape> In the expression: x : fx xs
09:31:11 <glguy> XaNterous: I misread. The problem is just that you're trying ot compare your list elements to numbers, but they might not be numbers
09:31:11 <boxscape> you're treating fx xs as a list
09:31:29 <glguy> XaNterous: You can update the type signature: (Num a, Ord a) => [a] -> a
09:31:43 <glguy> That will compile (it just won't do what you described originally)
09:31:48 <boxscape> wait no
09:31:54 <boxscape> the error message is different from the code, isn't it?
09:32:13 <glguy> boxscape: yeah, it is
09:32:31 <glguy> the error message was for the version of code having "| htail + (- x) == 2 = x : fx xs"
09:32:55 <boxscape> oh, it was reloaded after that again
09:32:57 <boxscape> ok, got it
09:32:59 <XaNterous> these error messages so complicated
09:33:09 <boxscape> you get used to them, XaNterous 
09:33:13 <glguy> They assume you know Haskell
09:33:17 <XaNterous> :D
09:33:20 <XaNterous> i wish
09:33:44 <XaNterous> at least it compiled like you told
09:34:25 <XaNterous> is this doable with recursion ? :D
09:34:36 <glguy> sure
09:34:40 <boxscape> anything that's computable is doable with recursion :P
09:34:57 <XaNterous> wow cool :D
09:36:15 <XaNterous> the part "| htail + (-x) == 2" if this happens how could i tell it go on  ? :D
09:36:23 <XaNterous> without doing anything
09:36:57 <glguy> apply fx to the portion of the list that remains to be checked
09:37:22 <XaNterous> shouldnt it complain about its not a other then [a] ?
09:37:41 <glguy> The type of fx is  [a] -> a
09:37:45 <glguy> and the rest of the list has type [a]
09:37:49 <glguy> so the result will be a
09:38:18 <XaNterous> i did fx [xs] but says Couldn't match expected type ‘a’ with actual type ‘[a]’
09:38:43 <glguy> [xs] makes a new list with one element
09:38:48 <glguy> and that one element is the list xs
09:38:53 <XaNterous>   | htail + (-x) == 2 = fx [xs]
09:39:20 <glguy> empty list: [],  singleton list: [10], two-element list: [10,20]
09:39:45 <glguy> You just need to write: fx xs
09:40:00 <XaNterous> yeah, did it
09:42:06 <XaNterous> glguy: what should i do for empty list ? :D
09:42:32 <glguy> Ask XaNterous. No one else can say
09:42:49 <boxscape> XaNterous: If I gave you the list [2,4,6,8], what should your function return?
09:43:40 <XaNterous> i imagined this like but i cant code like i thought. i will give it a list and if there is a problem it will tell the number otherwise will do nothing
09:44:01 <boxscape> what number though?
09:44:07 <boxscape> oh
09:44:14 <boxscape> the number where it goes wrong?
09:44:19 <glguy> There's no "do nothing"
09:44:24 <XaNterous> :D
09:44:29 <glguy> You can return an uninteresting value
09:44:50 <glguy> fx :: (Ord a, Num a) => [a] -> Maybe a; for example
09:45:06 <XaNterous> hmm
09:45:07 <glguy> that either returns Nothing, or it returns Just y where y is the problem number
09:45:30 <glguy> The only thing functions "do" is return values
09:47:00 <XaNterous> returns the last element of list . https://paste.kde.org/pty3e6cyb
09:47:51 <phz_> hey, is there a standard way to get the pid of the running program?
09:51:44 <phz_> ok nevermind, I found something in the unix package
09:52:16 <XaNterous> glguy: i think, i did it barely :D is this correct ? https://paste.kde.org/p3ooiae5a#line-6
09:55:00 <XaNterous> thanks for your help guys, boxscape glguy
09:55:13 <lifter> I'm trying to switch to spacemacs, but autocomplete isn't working for me. I really don't know what the problem might be. I don't see any errors in *Messages* and ~/.local/bin is in my path (and I think I have all the binaries I need installed there). There must be something simple that I'm missing... Can anyone offer some hints?
09:55:41 <boxscape> XaNterous: that looks good, but now, instead of calling "error", you should probably return the current number with "Just x", as you wanted to
09:58:11 <XaNterous> Cool. boxscape can i ask you something ? could i use putStrLn there in that function somewhere? when i use it i get IO error
09:58:46 <boxscape> XaNterous: Since putStrLn has type IO (), you can only use it in functions that also have the return type "IO something".
10:01:09 <boxscape> (well, that's not entirely true, but it's close enough for now, I think)
10:01:59 <XaNterous> Okey thanks for your help, appreciated
10:02:34 <boxscape> this is generally the case with all functions that perform input or output
10:02:42 <boxscape> you're welcome
10:06:56 <XaNterous> boxscape i think, for putStrLn thing, i should write another function and do pattern matching ? :D
10:07:43 <boxscape> possibly. Probably best to try it out and see if you can make it work.
10:16:12 <codedmart> lyxia: Yeah I figured that out actually. Thanks! I think if I can just get a sum type instance I think I should be on my way.
10:21:07 <codedmart> lyxia: Any change I could get your help with that last piece?
10:23:29 <titivos> hi
10:24:11 <_sras_> What is a good lib to do connection pooling of postgresql connections?
10:25:09 <codedmart> lyxia: A guess would be a start of this `instance (ToFieldNames a, ToFieldNames b) => ToFieldNames (a :*: b) where`.
10:25:33 <codedmart> But I know that is not right.
10:26:57 <lyxia> codedmart: that looks right to me though
10:28:22 <codedmart> lyxia: Oh I get this error `Expected kind ‘ghc-prim-0.5.0.0:GHC.Types.* -> *’; but ‘a’ has kind ‘*’`
10:28:51 <codedmart> Along with the same for `b` and an error for `a :*: b`.
10:29:00 <brynedwards> _sras_: This is most likely still relevant http://codeundreamedof.blogspot.ie/2015/01/a-connection-pool-for-postgresql-in.html
10:30:03 <lyxia> codedmart: Oh I see. You should be implementing FieldNames (f :*: g)
10:30:24 <lyxia> you already did that, didn't you
10:30:32 <codedmart> Yeah I already have that.
10:30:36 <lyxia> you don't need to implement ToFieldNames (f :*: g)
10:31:32 <lyxia> (:*:) is only used in the generic representation of a data type, which is handled by the FieldNames typeclass.
10:31:58 <brynedwards> _sras_: There are also libraries which allow for higher level abstractions such as persistent, hasql, opaleye. persistent and opaleye allow for composable queries similar to Linq
10:32:51 <lyxia> codedmart: also a more common naming convention would be FieldNames/GFieldNames rather than ToFieldNames/FieldNames
10:33:15 <_sras_> brynedwards: Yes. been playing with opaleye for a while now....
10:33:17 <codedmart> lyxia: But if I don't I have to have the implementation for say `instance ToFieldNames a => ToFieldNames (Maybe a)` or I get an error https://gist.github.com/codedmart/bc1113ffd56b72ac3f47b15221f2bc63
10:33:50 <codedmart> lyxia: ok I will change those when I get this working.
10:34:46 <lyxia> codedmart: implement instance FieldName (f :+: g)
10:35:55 <lyxia> codedmart: The error message is saying that there is no instance FieldName (... :+: ...).
10:36:51 <codedmart> lyxia: I don't suppose that is the same instance as `:*:`?
10:38:59 <lyxia> I think it is
10:39:21 <lyxia> Don't you just want to get field names from both branches?
10:39:45 <cocreature> _sras_: if you are using hasql there is https://hackage.haskell.org/package/hasql-pool-0.4.1/docs/Hasql-Pool.html
10:40:35 <codedmart> lyxia: Yeah so I assumed it was the same.
10:42:03 <shapr> glguy: is there an easy hack for the parseLines (from your advent of code) to drop lines that don't parse?
10:42:29 <thoughtpolice> _sras_: postgresql-simple and the 'resource-pool' package are what I use, FWIW (I looked at Hasql but you'd need to write an Opaleye adapter ofc)
10:43:33 <shapr> I wish tshark would just output one event per line, but NO
10:43:35 <thoughtpolice> (I use both of those specifically with Opaleye, is what I meant)
10:44:25 <shapr> Perhaps it would be easier to write an FFI binding to libwireshark?
10:44:29 <shapr> Insanity ensues
10:45:19 <codedmart> lyxia: Thanks a ton. This has been a great learning experience.
10:45:55 <lyxia> You're welcome!
10:46:48 <glguy> shapr: Maybe replace the parser with: catMaybes <$> many ((Just <$> p <|> Nothing <$ skipMany (noneOf "\n")) <* eol)
10:47:27 <glguy> or: catMaybes <$> many (Just <$> p <* eol <|> Nothing <$ skipMany (noneOf "\n") <* eol)
10:47:36 <glguy> so that if the parse suceeds without eating the whole line it can still skip
10:51:23 <_sras_> thoughtpolice: in resource pool's createPool function, the second argument "Action that destroys an existing resource.", what do you usually use there?
10:52:24 <thoughtpolice> _sras_: Database.PostgreSQL.Simple.close is all I use and has the perfect type you need already
10:54:22 <shapr> glguy: thanks, I'll try that
10:54:37 <thoughtpolice> _sras_: https://gist.github.com/thoughtpolice/e89d370f91039774f98bccf21e0cd877
10:54:47 <thoughtpolice> _sras_: That's a simple wrapper I wrote
10:54:48 <_sras_> Yes.
10:55:34 <cocreature> thoughtpolice: oh resource-pool looks like a really useful package, thanks for mentioning it
10:55:41 <freechips> hello guys the other day i asked about precise calculations with haskell, but then i had to go
10:55:48 <freechips> im not sure i got my point across though
10:56:04 <freechips> id like to use mathematical functions which have error correction
10:56:12 <thoughtpolice> cocreature: Yeah, it's my go-to for a long time now.
10:56:22 <freechips> so as i said 125 ** (1/3) should return 5, as it does in octave
10:57:04 <freechips> you pointed out haskell is not mathematica. i understand simple float math functions must forgo precision to allow for speed. are there math libraries in haskell with error correction?
10:57:13 <cocreature> thoughtpolice: I love packages like this that have a really small and simple API but just do everything you need them to in most cases
10:57:53 <freechips> check out this error correction function in python https://ptpb.pw/wKKg
10:58:16 <thoughtpolice> cocreature: Bonus points because resource-pool is really very small (maybe ~300 LOC?) on top of it, so it's not too hard to fully understand, either
10:58:17 <freechips> this is what im currently using. i'd like to have a library do this for me
10:58:30 <thoughtpolice> (The API is actually a pretty dead give-away at how you might roughly implement the idea, too)
10:58:39 <shapr> freechips: what about using Ratio?
10:59:13 <cocreature> shapr: heh I just tried freechips’s example using ratio but ratio doesn’t support (**)
10:59:20 <cocreature> now I’m slightly annoyed by that fact :)
10:59:23 <shapr> aw
10:59:53 <freechips> it was pointed out ratio could not be used as a power function does not always return rationals
10:59:55 <freechips> understandable
11:00:03 <freechips> i actually need error correction techniques
11:00:19 <freechips> they are pretty standard and have been used for years in mathematical precision calculations
11:00:32 <freechips> they are default in matlab and such programmimng environments
11:00:37 <cocreature> wait, the power of a rational with a rational exponent is always a rational no?
11:00:51 <dolio> 2^(1/2)
11:00:59 <freechips> but error corrections require multiple loops and sometimes advanced expressions. so they are not the default in general purpose languages
11:01:00 <cocreature> dolio: ah ofc I’m stupid
11:02:23 <cocreature> freechips: are you asking if such a library already exists or if you can implement this in haskell?
11:02:35 <freechips> cocreature: if it exists
11:02:50 <APic> Is there already an LLVM-Backend for Haskell?
11:02:57 <freechips> i'd like to do some scientific calculations so i need error corrections
11:02:58 <cocreature> APic: yep
11:03:02 <APic> Yay 🙌
11:03:03 <cocreature> APic: -fllvm
11:03:09 <APic> Thanks
11:03:14 <freechips> some people stated i can accept 4.99999999 instead of 5. i think they are missing the point
11:03:28 <bjobjo> freechips: interesting discussion that I know next to nothing about; but a quick search of hackage lead me to this: https://hackage.haskell.org/package/exact-real
11:03:30 <freechips> i don't want floating errors to creep up in my results, i need guaranteed error correction
11:03:31 <cocreature> APic: but you need to have installed some specific llvm version so it is slightly annoying to use
11:03:40 <bjobjo> I've never used it however.
11:04:04 <APic> cocreature: I do not actually want to use it, just wanted to know whether it existed 😎
11:04:15 <cocreature> APic: heh, fair enough
11:04:39 <ClaudiusMaximus> freechips: interval arithmetic can give you results like "4.9999999999999982 ... 5.0000000000000018
11:04:53 <ClaudiusMaximus> freechips: but i guess that isn't precise enough...
11:05:21 <freechips> bjobjo: might be what im looking for, but i think i also need the functions to have been edited, not only the representations of the numbers
11:05:55 <freechips> ClaudiusMaximus: im more looking for something as guaranteed precision. 
11:06:04 <freechips> might look into interval arithmetic though
11:06:16 <freechips> interval seems to imply i can restrict the error amount?
11:10:26 <thoughtpolice> freechips: You could use MPFR, perhaps? (Correct rounding, arbitrary precision) There is a Haskell binding out there.
11:12:09 <freechips> thoughtpolice: that's a good thought
11:12:47 <hsk3> lol
11:14:58 <codedmart> lyxia: Can I ask you another question? I added the instances back in because if I don't have this one and allow it to use the default one it just continues looping and never terminates: https://gist.github.com/codedmart/bb4fc17d93c98fb90fb53dace422b329#file-main-hs-L58-L59
11:15:05 <ClaudiusMaximus> thoughtpolice:, freechips: edwardk's 'rounded' binding even has interval arithmetic on top (which is what i used for my example)
11:15:07 <JavaSucksMan> Ahh, the eternal question FFI with unsafePerformIO vs. native Haskell port (for mathy stuff)
11:15:08 <codedmart> Can you tell me why?
11:16:04 <ClaudiusMaximus> thoughtpolice, freechips: i've been hacking on it a bit, here's my version https://github.com/ekmett/rounded/pull/27
11:16:43 <thoughtpolice> ClaudiusMaximus: I was going to mention `rounded` since it's MUCH nicer than hmpfr, but it bitrotted. Glad to see someone bring it back!
11:17:15 <lyxia> codedmart: [a] is defined as [] | (:) a [a] right?
11:17:46 <cocreature> ClaudiusMaximus: nice diff stats! :)
11:17:59 <lyxia> codedmart: as a Generic is more or less defined as that sum of products
11:18:01 <thoughtpolice> ClaudiusMaximus: With ghc-typenats-normalize you could even get the compile-time rounding mode stuff working with more complex constraints, too.
11:18:02 <codedmart> Ah right so is it better for me to leave that on in?
11:18:06 <lyxia> codedmart: right
11:18:44 <andrss> is there execv() in System.* modules? 
11:18:50 <ClaudiusMaximus> thoughtpolice: you mean things like doubling precision each iteration of Newton's method, for example?
11:19:57 <ClaudiusMaximus> thoughtpolice: currently i'd do that with the reflection mechanism, but if you have a static number of iterations it could be nicer
11:20:53 <cocreature> andrss: https://hackage.haskell.org/package/unix-2.7.2.1/docs/System-Posix-Process-ByteString.html#v:executeFile
11:21:11 <thoughtpolice> ClaudiusMaximus: I mean if you have something like 'Rounded TowardZero 128' you can replace '128' with a more complex constraint (GHC's typenat solver isn't very good today, typenats-normalize makes it much better). You can use reify for this, but this is convenient e.g. if you want to have the rounding size provided by the user, as a type Nat, but maybe
11:21:11 <thoughtpolice> enforce some other constraints
11:21:51 <thoughtpolice> ClaudiusMaximus: As a completely unrelated example I need some constraints like calculating the clog between of a typenat, and GHC can't do that today.
11:22:01 <thoughtpolice> s/between//
11:22:12 <andrss> thanks
11:22:39 <hololeap> i'm looking for a standard function that looks like (a -> a -> b) -> a -> b
11:23:11 <hololeap> in other words, it takes a single value and applies it twice to a two-argument function. i tried hoogle and didnt find anything
11:23:31 <ClaudiusMaximus> :t join :: (a -> a -> b) -> a -> b   -- maybe this
11:23:33 <lambdabot> (a -> a -> b) -> a -> b
11:23:58 <danharaj> don't do that tho :p
11:24:14 <thoughtpolice> danharaj: no, do it
11:24:26 <danharaj> thoughtpolice i will find you and spit you like a pig
11:24:27 <hololeap> ClaudiusMaximus: sweet :)
11:24:33 <thoughtpolice> D:
11:24:59 <danharaj> do you really like playing "guess the monad" :p
11:25:20 <eschnett> the function a -> (a, a) is usually called dup
11:25:45 <shapr> Hm, I wish Data.Map.insertWith made partial application easier by moving the map near the front... oh well.
11:25:46 <eschnett> so you can combine uncurry and dup
11:26:45 <freechips> thanks for the input guys ill see if i can work with mpfr, or maybe ill just implement my own function since that's all i need
11:28:08 <shapr> freechips: what got you into Haskell? Did you mention that in the earlier conversations I missed?
11:28:12 <shapr> I like the narratives.
11:29:23 <hololeap> danharaj: were you talking to me?
11:29:36 <lispy> shapr: "What would it take to get you into a nice shiny Haskell today?"
11:29:47 <andrss> http://lpaste.net/353822
11:30:14 <andrss> is there a more generic/monadic way to turn foldr to scanr?
11:30:35 <shapr> lispy: do I have that used language salesman look?
11:30:57 <freechips> shapr: just wanting to play with functional
11:31:04 <shapr> oh, that's a good reason
11:31:06 <lispy> shapr: No not at all
11:31:07 <hololeap> all it costs is your time and 20% of your sanity
11:31:22 <lispy> shapr: But what you said made me think of that
11:31:34 <shapr> hololeap: how do YOU use Haskell?
11:32:19 <hololeap> shapr: as a device for masochistic pleasure
11:32:41 <lambdafan> really? haskell reduces my pain levels.
11:32:45 <shapr> yeah, same here
11:33:11 <lispy> hololeap: have you seen this? https://pdfs.semanticscholar.org/8b79/2f78825bad68cf7a2267ea03db5b4273df33.pdf
11:33:37 <lispy> "The Pleasure and Pain of Dependently Typed Haskell Programming"
11:34:09 <hololeap> i'm striving to build concurrent networked systems but i haven't gotten there yet. i have recently "grokked" monads and io, so i am still a noob by most standards
11:34:39 <lispy> Sounds like you're on a good path
11:35:04 <lpaste_> lambdafan pasted “One-Off detection. Complexity Analysis Question” at http://lpaste.net/353823
11:35:32 <hololeap> lol, hasochism... i'm going to have to remember that Xp
11:35:36 <shapr> hololeap: hey, you beat the part that scares off most people
11:36:12 <shapr> When I was first learning programming people were equally scared of objects, now it's monad. It's all about the same. New things are scary, I guess.
11:36:27 <lambdafan> Achievement Unlocked: Monad Comprehension (not to be confused with monad comprehensions)
11:36:35 <lispy> hololeap: basically anything by Conor McBride is going to have a sense of humor in the writing (and be interesting/thoughtful in the content)
11:37:04 <hololeap> shapr: it's just wrapping your head around monads and monad transformers is hard when you have come from a different background. i now understand that i was using them all the time, just implicitly
11:37:31 <shapr> hololeap: yeah, objects were hard when there were only functions / procedures.
11:37:53 <ggVGc> objects are crap
11:37:55 <hololeap> my first language was ruby, so... yeah
11:38:23 <hololeap> i realized that my favorite part of the language was the functional stuff, so i decided to jump into haskell
11:38:42 <shapr> hololeap: yeah, I did exactly that from Python, though I didn't realize that cool thing was FP until later.
11:39:36 <hololeap> i may or may not stick with haskell, but there are a couple projects i want to complete in it first, just so i know i really understand the concepts
11:39:52 <hololeap> so far it is a beautiful language
11:40:01 <shapr> with lots of cool tools!
11:40:08 <shapr> mind you, other lanugages have different cool tools
11:40:53 <lispy> ggVGc: I don't think objects are crap. They are one of many abstractions with pros/cons. I do think OO subtyping is often a mistake.
11:41:27 <hololeap> i think that mutable objects in a concurrent environment is generally a mistake
11:41:36 <lispy> shapr: yeah, I've been learning rust recently and I'm so grateful to have a straight up systems language with good support for memory safety.
11:41:52 <ggVGc> I think beginning to write a computer program is generally a mistake
11:41:57 <ggVGc> but not entirely always
11:42:00 <lispy> heh
11:42:05 <hololeap> true
11:44:45 <shapr> silly question, how do I get the differences between each number in a list of numbers?
11:44:53 <shapr> it's not fold, or scan, not really
11:45:14 <boxscape> zipWith (-) (drop 1 xs) xs?
11:45:22 <JavaSucksMan> shapr: I got into Haskell because all the cool kids are doing it...
11:45:40 <JavaSucksMan> No, It's because of lambdacats.
11:45:41 <shapr> boxscape: oh!
11:45:43 <boxscape> This is the third time this came up in here today :)
11:45:48 <shapr> boxscape: oh wow
11:46:01 <shapr> yeah, that's a super simple solution, thanks!
11:46:05 <orion> JavaSucksMan: I got in to Haskell because it challenged my ego.
11:46:07 <boxscape> no problem
11:47:18 <JavaSucksMan> Seriously though... I worked at a behavior finance firm.... the front end was Haskell and the back end was PHP.  (no, I did not get those backwards... they did)
11:48:04 <JavaSucksMan> I'm working on my own Haskell milestone... my very first lambdacat
11:48:36 <JavaSucksMan> damn... I missed it... but cats are SO effectful
11:48:50 <MarcelineVQ> boxscape: zipWith (-) <*> drop 1  if you want to look fancy
11:49:00 <boxscape> yeah, that looks nice
11:51:19 <AWizzArd> How are records implemented under the hood? If I have a big one, is the access to every field O(1)? Is it an array when it’s fewer than, say, 10 fields, and a hashmap otherwise?
11:51:43 <JavaSucksMan> lispy: Thanks for the Conor McBride paper... hadn't seen it.... Epigram looked really cool
11:51:45 <Athas> AWizzArd: O(1), yes.
11:51:49 <Athas> They're just tuples.
11:52:14 <lispy> JavaSucksMan: yw. I recommend looking at his other publications.
11:52:24 <Athas> For a given field name, the offset in the record is known at compile-time, so no need to carry the field names around at run-time (for hashing or whatever).
11:52:40 <lispy> JavaSucksMan: for instance, he was behind some of the initial work on bringing applicative to Haskell
11:52:54 <JavaSucksMan> I need to level up on types to understand them.... I'm mostly a Smalltalk dude (resisting urge to defend objects)
11:53:07 <AWizzArd> Athas: and when I „change” the contents of one field, I have a new/fresh instance of my record, where this one field has changed. How is this done under the hood? Is structure shared?
11:53:20 <AWizzArd> Or would it have to copy all values into the new instance?
11:53:52 <JavaSucksMan> I tried OCAML, but it looked just to ugly.... Haskell is the first language I seriously used that made types palatable
11:54:16 <reactormonk> How do I escape a literal = inside a QQ expression?
11:55:08 <JavaSucksMan> Im still trying to understand Applicative as being usefully between funtors and monads... got a motivating example?
11:55:17 <Athas> AWizzArd: think of every field to be a pointer to the value.  When you create a new record, the pointers are copied, but not what they point to.
11:55:46 <Athas> AWizzArd: basically, record updates are cheap, don't worry about it.
11:56:01 <AWizzArd> Athas: okay I see, so indeed, all pointers need to be copied.
11:56:19 <Athas> JavaSucksMan: I recommend the chapter on applicative parsers in Real World Haskell.  I find they look nicer than the corresponding monadic parsers.
11:56:59 <AWizzArd> Athas: In principle this should be fine, with records having 3-4 fields. But if it should be 100+ fields, which are updated in a call to map/fold, it may be a bit more costly.
11:57:16 <Athas> Why would you ever have 100 fields in a record?
11:57:17 <AWizzArd> Athas: So maybe not having everything in one level could be helpful.
11:57:17 <ClaudiusMaximus> Athas, AWizzArd: the pointer behaviour can be changed with {-# UNPACK #-} pragma for strict fields whose size is known (it stores the data directly in the record, avoiding pointer indirection)
11:57:33 <AWizzArd> Athas: I don’t have that many yet, I am just curious.
11:58:03 <AWizzArd> However, for holding configurations, there could indeed be easily a hundred fields.
11:58:21 <AWizzArd> Of course I don’t plan to update configs in tight loops ;-)
11:58:56 <AWizzArd> ClaudiusMaximus: this sounds good for faster access. But this could be more costly when updating fields.
11:59:07 <JavaSucksMan> OK, folks... for the first time in public, here it is..... Be kind
11:59:09 <JavaSucksMan> http://hakaru.ml/lambdacats.html
11:59:18 <JavaSucksMan> I look the photo, as well.
11:59:37 <JavaSucksMan> I also ran it through the GHC typechecker
11:59:49 <ClaudiusMaximus> AWizzArd: sure, but for small data (comparable in size to a pointer) it can be a win - you lose laziness though
12:04:29 <JavaSucksMan> Request For Comments:  http://hakaru.ml/lambdacats.html
12:05:02 <dmwit> phew, let's hope a refactor never changes that `snd` to a `fst
12:05:11 <dmwit> ` -- delimiters!
12:05:50 <JavaSucksMan> Record syntax is awkward for image macros
12:06:42 <JavaSucksMan> but, whoever out there is toing 15+tuples... consider it
12:27:40 <bryanlemon> I am using snap for a RESTfull API, and having problems with the wrong hander being used to process a request. I assume it is something I am doing wrong.
12:28:34 <bryanlemon> There are two routes: process/specific and process/:var1/somethingelse
12:29:05 <bryanlemon> If I make a call to process/specific/somethingelse, it calls the handler for process/specific
12:29:20 <bryanlemon> rather than /process/:var1/somethingelse
12:29:34 <bryanlemon> Any ideas?
12:30:39 <AWizzArd> How is Haskell versioning done? From looking at the roadmap it seems version 8.2 will be out in roughly one month. Where is 8.1?  And the next version after 8.2 seems to be 8.4.
12:30:51 <geekosaur> odd numbers are devel versions
12:31:08 <geekosaur> so the thing that will be 8.2 is currently 8.1.<yyyymmdd>
12:35:01 <sm> very relevant for haskell, I think: https://news.ycombinator.com/item?id=13932806
12:36:22 <reactormonk> How can I shorten https://gist.github.com/c5a1ab605930afc1c7bc625048f1a332 ?
12:37:56 * geekosaur can't think of a good way aside from CPP or TH
12:38:09 <geekosaur> (I don't think Generics will fly for this)
12:39:08 <lyxia> reactormonk: GeneralizedNewtypeDeriving
12:39:13 <XaNterous> what stands for head or tail in psudeocode ?
12:39:52 <lyxia> reactormonk: https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#generalised-derived-instances-for-newtypes
12:40:19 <reactormonk> lyxia, thanks, was easily googlable
12:43:17 <AWizzArd> I read about GC improvements in Haskell 8.2. What are they good for? Will they support bigger amounts of long-lived data?
12:44:17 <dylukes> Hello all. Any suggestions on a solid idiomatic GL library? 
12:44:40 <dylukes> Or resources for building my own engine?
12:44:46 <Rembane> dylukes: Gloss. Depending a bit on what you want to do.
12:44:54 <eacameron> AWizzArd: You may be referring to compact regions. If so, then yes they help with long-lived data. They allow you to put data into regions that don't undergo GC
12:44:55 <dylukes> Ideally I'd like to have the ability to display normally, but also ray trace.
12:45:02 <dylukes> Thing model viewer (for biochemistry type stuff).
12:45:25 <dylukes> So, ideally, as declarative as possible should be a good fit.
12:45:34 <eacameron> AWizzArd: The API for compact regions looks really simple: https://github.com/ezyang/compact
12:45:45 <dylukes> Ah I need 3D stuff, more OpenGL type.
12:46:19 <dylukes> I'd like to write a ray tracer, would be fun.
12:46:22 <Putonlalla> There's `not-gloss`, dylukes, but I haven't tried it.
12:46:24 <AWizzArd> eacameron: thx for the link, this sounds very interesting, because we have data of which we know it will live as long as the application does.
12:48:07 <eacameron> AWizzArd: Sure; yes a lot of folks are excited about this feature.
12:51:11 <Putonlalla> Reminder to back up your Haskell projects now so that you don't see a SMART warning and get thrown into Grub rescue like I just did.
13:11:01 <codedmart> lyxia: Or anyone else I am trying to add options to my generic stuff but am getting an error I don' understand: Cannot apply expression of type ‘[Text]’ to a visible type argument ‘a’ • In th
13:11:12 <codedmart> Sorry pasted wrong things: https://gist.github.com/codedmart/7ea593bc10044c320ae490a46fbd0819#file-error
13:11:44 <codedmart> The error is talking about this line specifically: https://gist.github.com/codedmart/7ea593bc10044c320ae490a46fbd0819#file-main-hs-L8
13:12:18 <dfeuer> They be newtypes.
13:12:24 <dfeuer> Er...
13:12:32 <dfeuer> Sorry, wrong point in time.
13:13:08 <codedmart> dfeuer: Is that directed at me?
13:13:46 <dfeuer> No.
13:14:05 <dfeuer> codedmart: I was responding to something someone said hours ago, without realizing it.
13:14:15 <codedmart> Oh ok
13:15:09 <lyxia> codedmart: apply @a before the option
13:15:18 <lyxia> gFieldNames @a
13:18:06 <codedmart> lyxia: Hmm... ok. I assume there is a reason for that. Thanks!
13:23:23 <shapr> glguy: thanks for your parser help, I got to write Haskell for work purposes and it worked great! :-)
13:23:57 <erisco> wow, I bet you get paid lunches too
13:24:43 <Sornaensis> does anyone here have comparable experience in rust as haskell
13:24:45 <Sornaensis> ?
13:25:33 <erisco> yeah, mine is LT
13:26:30 <MarcelineVQ> I Ord-er you to be less silly!
13:26:33 <shapr> erisco: only on Fridays
13:28:06 <pleiosaur> Sornaensis: what are you looking to compare between rust and haskell/
13:28:11 <titivos> Let's say I have a list xs and use takeWhile (condition) xs. then how can I use the rest of the list (ie the list after takeWhile)?
13:28:29 <erisco> use dropWhile
13:28:42 <erisco> :t span
13:28:44 <lambdabot> (a -> Bool) -> [a] -> ([a], [a])
13:28:45 <Sornaensis> pleiosaur: garbage collection and concurrency
13:28:46 <erisco> or that
13:28:59 <erisco> > span (<3) [1..10]
13:29:00 <shapr> Sornaensis: I thought rust doesn't do GC?
13:29:01 <lambdabot>  ([1,2],[3,4,5,6,7,8,9,10])
13:29:13 <titivos> thanks very muchh that should work 
13:29:15 <titivos> much*
13:29:47 <pleiosaur> Sornaensis: rust uses uniqueness types to do static automatic memory management, no GC needed (though you can optionally use reference counted types to make memory management dynamic, in case you have a graph)
13:30:23 <lispy> pleiosaur: reference counting doesn't work very well for graphs
13:30:28 <erisco> a non-cyclic graph?
13:30:57 <pleiosaur> Sornaensis: uniqueness typing also means that rust statically prevents data races, which is obviously good for concurrency, but rust prefers to have a multitude of concurrency/parallelism primitives rather than any one blessed implementation
13:31:07 <lispy> There is an experimental gc crate for the times when your data may have cycles
13:31:25 <pleiosaur> lispy: you're right, it doesn't work well for graphs, but everything else in rust works worse for graphs IMO :P
13:31:58 <lispy> Rust's type system hasn't been proven to prevent data races, but there are people working on formalizing it.
13:32:22 <lispy> See for instance: http://plv.mpi-sws.org/rustbelt/
13:32:48 <pleiosaur> I'm pretty convinced that the model is sound, but yes formalization is desirable
13:33:41 <pleiosaur> Sornaensis: the tldr is that you can use plain old threads in rust and it's not a nightmare, which is very interesting
13:33:49 <dfeuer> twanvl: Ping
13:34:08 <rafael_cgs> register 055291 rafaelcgs10@gmail.com 
13:34:36 <geekosaur> "oooops"
13:35:11 <erisco> a hunter2 moment
13:38:31 <nshepperd_> How would uniqueness types prevent data races? Apart from just not having any shared variables at all
13:39:06 <Sornaensis> pleiosaur: auto alloc/dealloc differs from gc how?
13:39:22 <Sornaensis> wouldn't that just be really inefficient if you have lots of short lived objects
13:39:24 <Sornaensis> :C
13:42:32 <nshepperd_> Sornaensis: it's auto in the sense that running destructors of disappearing stack objects is auto
13:44:39 <nshepperd_> As opposed to doing any kind of recursive liveness checking
13:45:54 <AWizzArd> What is the „default” test lib for Haskell? Pure QuickCheck? A wrapper around it?
13:47:06 <erisco> in the best case you want to allocate a block of memory, allocate in this block without cleanup, then free the whole block when done
13:47:19 <mmachenry> AWizzArd: HSpec which orchestrates HUnit tests as well as quickcheck.
13:47:34 <erisco> individually freeing objects can be disastrously expensive
13:47:36 <mmachenry> Quickcheck won't replace hunit, it works side by side really well.
13:48:21 <pleiosaur> Sornaensis: a garbage collector is inherently a dynamic operation, but having the compiler itself insert malloc/free is a static operation, which lets you put stronger guarantees on resource usage
13:48:22 <AWizzArd> mmachenry: good, thx
13:48:25 <erisco> in the best case it is one expensive alloc and free
13:48:35 <erisco> every alloc in the block just bumps a pointer up
13:48:47 <pleiosaur> Sornaensis: short lived objects live on the stack anyway, which has always been fast, and note that C has always had an automatic storage duration anyway for stack-allocated items
13:49:02 <Sornaensis> mm
13:49:23 <pleiosaur> Sornaensis: what rust does (via uniqueness) is allow you to extend a stack discipline across arbitrary function calls
13:51:22 <pleiosaur> nshepperd_: uniqueness means that, logically, variables aren't shared. this is achieved differently in rust than it is in e.g. erlang, but it's sorta kinda the same basic principle
13:51:59 <pleiosaur> though rust lets you mutate things if there's a unique handle to it, since mutable state is fine as long as it isn't shared mutable state (fine from a correctness standpoint)
13:53:06 <codedmart> Can you not apply functions to proxys? This always ends up as "" rather then what I would expect: https://gist.github.com/codedmart/ccdec83cd49d1d8d9bbfccaab343f884#file-main-hs-L4 and https://gist.github.com/codedmart/ccdec83cd49d1d8d9bbfccaab343f884#file-main-hs-L13
13:53:11 <codedmart> @lyxia ^^
13:53:11 <lambdabot> Unknown command, try @list
13:53:18 <codedmart> lyxia: ^^
13:53:28 <codedmart> Sorry might have pinged you twice.
13:53:50 <codedmart> It seems to work fine on lines: 3 and 12.
13:55:10 <shapr> AWizzArd: I've been using hspec recently, it's nice.
13:55:32 <erisco> codedmart, is there an error message?
13:56:00 <nur0n> Hello, would this this be the right place to ask a question about installing a package through stack?
13:56:11 <codedmart> erisco: There is no error message.
13:56:20 <codedmart> Just not getting the outcome I am expecting.
13:57:30 <erisco> if the function takes Proxy then you can pass Proxy, no issue
13:58:49 <AWizzArd> shapr: will be trying it.
13:59:20 <shapr> AWizzArd: I've used quickcheck and hunit separately in the past, and hspec does integrate them.
14:00:01 <erisco> if you have a self-contained example then we can take a closer look
14:00:32 <codedmart> erisco: Let me paste more: https://gist.github.com/codedmart/7c42983d24f71ae41c6a0beeadffb8a2
14:01:15 <codedmart> I want to apply the `fieldNameModifier` function but this: https://gist.github.com/codedmart/7c42983d24f71ae41c6a0beeadffb8a2#file-main-hs-L24
14:01:30 <codedmart> fromMaybe always returns "".
14:01:53 <codedmart> But if I remove applying `fieldNameModifier` I get a value back.
14:01:58 <codedmart> As I would expect.
14:03:33 <erisco> I am missing a bunch of stuff still
14:06:44 <erisco> I need to at least know what headMay is and what your test case is
14:06:59 <erisco> and what the expected output is versus what you are getting
14:08:55 <codedmart> erisco: ok let me add that.
14:12:22 <hybrid> I had a question about the strict positivity condition in some dependently-typed languages. Is this a good place to ask it?
14:12:47 <joneshf-laptop> Is http://hackage.haskell.org/package/base-4.9.1.0/docs/Data-Type-Equality.html#t::-126-: useful if you have GADTs or Leibniz available to you?
14:13:05 <shapr> hybrid: ##dependent might have more help
14:13:21 <hybrid> Ok, I'll try there first. Thanks
14:15:50 <erisco> I am not sure what is meant by propositional equality there
14:16:23 <erisco> I thought a ~ b was definitional equality, and that is just what Refl gives you
14:16:56 <geekosaur> if programs are proofs, types are propositions, iirc?
14:18:25 <erisco> yes but propositional equality, if I understand, is P is propositionally equal to Q if forall x. P(x) <=> Q(x)
14:19:06 <erisco> so you might have different propositions syntactically but they have the same meaning
14:20:02 <erisco> but definitional equality is saying they are defined the same way
14:20:36 <erisco> so, for types, String is definitionally equal to String
14:21:09 <erisco> so I must be misunderstanding how these terms are applied here
14:23:50 <Sornaensis> pleiosaur: thanks
14:26:05 <lifter> Does anyone know if I need to do anything special to get autocomplete to work in Spacemacs?
14:26:54 <brynedwards> lifter: see https://github.com/syl20bnr/spacemacs/tree/master/layers/%2Blang/haskell#completion-support
14:27:33 <lifter> brynedwards: OK, somehow I thought it was just supposed to work out of the box, I'll try this stuff.
14:31:01 <codedmart> erisco: Nevermind, as I was writing out examples I saw what the problem was. Thanks!
14:36:29 <c_wraith> that new dependent haskell paper is really cool. glad to see the underpinnings concretely specified and proven to have the desired properties 
14:37:24 <erisco> published where?
14:39:17 <c_wraith> Stephanie Weirich's page
14:41:51 <lifter> brynedwards: I got it to work, thanks for pointing me in the right direction.
14:50:08 <brynedwards> lifter: np =)
14:50:26 <lifter> It was a case of "read the f'ing docs"
14:50:31 <brynedwards> :D
15:00:34 <erisco> I feel like there is a nasty bug in this library
15:24:11 <erisco> all the parts seem to work, but it fails when I run it all together
15:24:25 <erisco> I think something is screwed up with the FFI in the library
15:25:50 <erisco> at a certain problem size it begins giving me back garbage
15:34:55 <erisco> maybe it is Z3, who knows... will try a different solver
15:49:28 <erisco> hm, nope, changing solving from z3 to cvc4 fixed nothing
15:55:29 <t7> what are you solving?
15:59:52 <erisco> existentials
16:05:34 <erisco> this library design is so goofy though
16:05:42 <erisco> there is no way to print out the problem case that I can discern
16:08:12 <erisco> I'll have to rip out sbv and use a different library altogether
16:08:19 <erisco> this is the nightmare of 3rd party libs
16:08:27 <erisco> they rarely work right
16:13:32 <t7> solve it in coq yourself ya lazy bum
16:14:02 <erisco> heh, well that defeats the purpose
16:14:13 <erisco> the purpose is automation
16:15:49 <t7> amazon turk?
16:17:49 <thoughtpolice> erisco: Report an issue to Levent if you actually think it's corruption (I'm somewhat skeptical of that claim considering it does not use the FFI at all but emits SMT-Lib files that the solvers ingest. I also don't know what you mean by 'print out the problem case' -- you can just emit the SMT-Lib file?)
16:18:25 <erisco> where is this file? doesn't show anywhere for me
16:18:38 <thoughtpolice> http://hackage.haskell.org/package/sbv-5.15/docs/Data-SBV.html#g:53
16:18:48 <erisco> and if FFI is not involved then I am a bit confused as to why kill commands are not handled correctly
16:18:55 <erisco> it will keep printing at the REPL even after I've killed it
16:20:08 <erisco> okay thanks thoughtpolice
16:20:14 <erisco> I am glad someone knows this lib
16:20:23 <thoughtpolice> It's possibly something to do with signal handling, child process control. (Those are maybe in a bit different category but same results, I guess). You'd have to provide some kind of test case (what program are you killing? Z3 or the Haskell program?)
16:20:42 <erisco> Ctrl+C at the REPL
16:20:59 <erisco> Z3 keeps running
16:21:19 <thoughtpolice> GHCi? That's probably a result of the interrupt not actually sending a kill signal to Z3. That might be worth reporting.
16:22:04 <thoughtpolice> (Ctrl-C in GHCi by itself will not kill subprocesses; in theory I think there could even be background forkIO'd threads still that might exist in the ether, which could still be monitoring it. Things like this get complicated inside a nested environment like GHCi where anything can sort of be immediately interrupted)
16:22:24 <erisco> as an SBV issue?
16:23:47 * erisco looks up how to write to a file in Haskell
16:23:56 <thoughtpolice> Yes. I'd suggest reporting it to Levent; there could very well be an easy fix on his end (e.g. during `prove`, by just handling if you can provide a reliable reproduction case. He's quite good at responding (from memory, anyway)
16:24:13 <erisco> sorry when I said FFI I was also thinking IPC
16:24:37 <thoughtpolice> erisco: something just like `compileToFile ... thingToProve >>= writeFile "testcase.smt2"` should work.
16:24:40 <thoughtpolice> np
16:26:27 <erisco> I don't know what dumping the file is going to show
16:26:49 <erisco> if the file is exactly what is being sent to z3 then the problem exists before that
16:26:58 <erisco> because it isn't z3 that is wrong, I've also tried cvc4
16:27:22 <thoughtpolice> Well, if this is the issue then the SMT-lib output is fairly irrelevant, I suppose. It doesn't look like anything handles interrupts in SBV, so yes this is probably "expected". A signal sent to stop a running `prove` command will not propagate the signal to Z3. This is probably an oversignt.
16:27:25 <erisco> I run z3 on the file and it tells me sat when I know it is not
16:28:04 <erisco> well that is a separate issue that isn't that important
16:28:51 <thoughtpolice> erisco: Ah, then that is an actual bug that should also be reported, too. The SMT-lib output is going to give you a file that you can run offline through a prover of your choice; in this case it sounds like the actual translation is bugged, so that's irrelevant. You should just report the Haskell test case, of course.
16:29:22 <thoughtpolice> (You sort of seem to have multiple problems here so I'm not sure exactly what _all_ could be wrong, but that's at least 2 clear things.)
16:29:29 <erisco> but I need something to report, so I am trying to extract the case somehow
16:29:39 <erisco> if there was a more direct way to print an SBool I would use that
16:29:47 <erisco> but show on an SBool just prints <<symbolic>>
16:30:57 <erisco> it would take me a darn long time to read the smt2 file and discern what is inconsistent
16:31:12 <thoughtpolice> Right, it's symoblic. I'd just suggest reporting a bug; Levent can likely boil down a cause fairly quick.
16:31:32 <thoughtpolice> Minimizing test cases is always good but tedious, of course. I tend to use HPC to minimize tests to some good effect but I don't know how well it would work here.
16:31:51 <erisco> I can't just send in my whole program, that is too much
16:32:37 <thoughtpolice> Well, you will have to minimize it then. I of course can't set your standards for what a valid bug report is. Even if there's a large amount of code, reporting it so you can begin to work piece-by-piece is probably best.
16:32:45 <erisco> it doesn't get smaller
16:33:05 <thoughtpolice> Then you're completely out of luck if you're not willing to report it, I'm afraid.
16:33:15 <erisco> so I am just trying to get the symbolic expression itself
16:37:41 <thoughtpolice> erisco: You can look at the internal module. The SVal constructor and show instances are exposed there, at least. But if you're seeing a symbolic value, I'm not sure it will change anything. Do you mean like, if you have `\x -> x `shiftL` 2 .== 4 * x` -- you want 'show $ 4 * x' to print "4 * <<x>>" or something, kind of like the AST?
16:37:59 <erisco> yes, that is right
16:38:16 <erisco> with the AST I have a much better chance of seeing the inconsistency
16:40:12 <erisco> I can't completely rule out a mistake on my part
16:40:28 <erisco> it is only that it succeeds for many other cases
16:40:37 <erisco> but once a certain problem size is reached it stops working
16:40:44 <erisco> and answers I get are wrong
16:41:42 <rafaelcgs10> 	
16:41:58 <erisco> in the meantime I can try and reconstruct the AST from the 300+ lines of the smt2 file
16:42:32 <rafaelcgs10> 	
16:42:36 <rafaelcgs10> 	
16:42:43 <thoughtpolice> erisco: Using runSymbolic and the Result constructor looks roughly like the best you'll get at the moment. (This does have the benefit the AST is a bit more typeful than a simple file)
16:42:57 <thoughtpolice> You can see this if you just look at the code for compileToSMTLib
16:43:15 <rafaelcgs10> 	
16:47:08 <erisco> hm, this is the output I get thoughtpolice http://lpaste.net/353836
16:47:57 <erisco> any knowledge of what bvult is?
16:49:53 <thoughtpolice> erisco: "Bit vector unsigned less than"
16:50:13 <erisco> thanks
16:58:06 <thoughtpolice> erisco: I was going to try to link to some reference on those internals but apparently that does not exist outside the C++ code in Z3 :)
16:58:20 <thoughtpolice> Well, defined functions in z3's smtlib environment, I mean
17:06:09 <erisco> without constructing the AST I can see strangeness
17:10:49 <erisco> my bad, confused line numbers for the s* variables lol
17:11:01 <erisco> they accidentally lined up kind of
17:15:26 <erisco> well, from what I can tell, the result I get is inconsistent with the smt2 file
17:15:40 <erisco> so now I just need to figure out how to tell z3 to give me the models
17:15:49 <erisco> maybe they are being read back in incorrectly
17:15:57 <zv> (get-model)?
17:16:24 <erisco> thank-you
17:16:40 <zv> you can also use my z3 interaction major mode: https://github.com/zv/z3-mode
17:16:44 <zv> C-c C-c there
17:18:58 <xcmw> Does a function with this type signature exist anywhere? I already checked on hoogle and stackage. (Maybe a -> Maybe b -> Maybe c) -> Map k a -> Map k b -> Map k c
17:20:54 <ChaiTRex> xcmw: What would it do?
17:20:55 <pacak> I don't think this can be efficiently implemented
17:21:19 <pacak> ChaiTRex: It will intersect two maps by key making a third one
17:21:44 <pacak> xcmw: I think your best bet would be to go through list
17:22:03 <erisco> I know what has happened
17:22:12 <xcmw> pacak: Thanks
17:22:16 <erisco> the variables are being ordered incorrectly
17:23:14 <erisco> explains perfectly why the problem only occurs when the problem becomes larger
17:23:53 <erisco> thoughtpolice, here is what is happening
17:24:02 <erisco> the variables are named s1, s2, s3, and so on
17:24:47 <erisco> the problem for me is they are being ordered lexicographically by SBV
17:25:00 <erisco> rather than numerically (ignoring the "s" prefix)
17:25:26 <erisco> so it comes s0, s1, s10, s11, s12, s13, s14, s15, s2, s3, s4 ...
17:26:01 <erisco> I assumed the order would be the same as instantiated
17:26:15 <erisco> I mean, it kind of has to be, otherwise how do I know which variable is which
17:28:36 <erisco> ah, looking back at the guts a bit here
17:28:47 <erisco> so I call getModelDictionaries which returns a Map String CW
17:28:54 <erisco> this is where the lexicographic order comes from
17:29:10 <erisco> so it is my oversight after all
17:29:14 <erisco> not so surprising :P
17:34:02 <erisco> woo hoo, no more crashes :)
17:34:17 * erisco generates a puzzle for a 8x8 board
17:34:43 <Welkin> what game?
17:34:55 <erisco> a puzzle game
17:35:00 <Welkin> 4D tetris?
17:35:09 <erisco> that's so elementary
17:35:24 <Welkin> the pieces fall toward the center of mass
17:35:34 <Welkin> and pop in from other dimensions
17:37:36 <erisco> hm, it is poor at saturating the CPU and it is taking a long time
17:45:18 <rafaelcgs10>  hey humans, here is a good place to talk about type systems, like hindley-milner, or there is better place for that?
17:46:45 <Welkin> yes
17:51:51 <bobjones> hey all. Say I have a type: data Degree = Na Int | Fl Int | Sh Int. Is there an elegant way to extract the Int values in this case, other than creating a function and pattern matching each (Constructor i) and returning i?
17:52:28 <Koterpillar> the question is do you want to make this possible?
17:52:48 <Koterpillar> data Temperature = Kelvin Int | Celsius Int  -- here extracting just the Int is dangerous
17:53:04 <bobjones> Koterpillar: yeah ok I see what you mean here
17:53:19 <bobjones> Koterpillar: and it's a fair point indeed 
17:53:44 <Koterpillar> if you have just one type like that, go ahead and write the function
17:53:56 <Koterpillar> give it a meaningful name, too (if you can't, why are you writing it in the first place?)
17:53:59 <augur> uh
17:54:05 <augur> mystery behavior from uninstall-hs:
17:54:15 <augur> ghc --version says i have 7.10.2
17:54:30 <augur> when i do uninstall-hs thru 7.10.2, i get an error saying there's nothing to remove
17:54:48 <bobjones> Koterpillar: ok thanks this is helpful - I guess I was just curious to see if this was possible. I tried 'pattern matching' the constructor but obviously that doesn't work
17:54:53 <augur> what does this even mean
17:55:44 <Koterpillar> bobjones: it is possible, wide-scale, if you really want - look up GHC.Generics for an example
17:56:36 <adarqui> should I update to haskell 8.x on osx sierra? or will everything be broken?
17:57:20 <pacak> bobjones: You can change it to data Degree a = Na a | Fl a | Sh a and ask ghc to derive foldable/traversable
17:57:45 <bobjones> Koterpillar: ok cools thanks for the help!
17:58:12 <bobjones> pacak: Ok cool that would indeed be another option - thanks!
17:59:58 <Welkin> adarqui: last I heard sierra breaks things
18:00:14 <adarqui> ya, sierra broke my ghc 7.10.x setup
18:00:18 <adarqui> i'm probably doomed
18:00:57 <Welkin> either use linux, or avoid updating macos
18:01:15 <adarqui> ya i have linux boxes, they are fine
18:01:21 <adarqui> i avoided updating mac for quite some time, then finally did it
18:01:23 <adarqui> boom destroyed
18:04:53 <rafaelcgs10> I'm reading Wadler's paper called "How to make adhoc polymorphism less ad hoc". - Btw, I have some basic experience with Hindley-Milner system - . My problem is in the appendix, more precisily in page 15 in Inference rules. I'm trying to understand the given rules for function overload (over and inst), I want to create a small example of proof tree using them. The rule over is said to be a "adding rul
18:04:59 <rafaelcgs10> e", but if you read top-down (what I think is usual)  looks like a "deleting rule", like lambda abstraction. Plus, I don't know how to create the needed assumptions to proof some overloaded function (say over ID::: a-> a in inst id :: ID a = \x.x in id). Anyone could give me some enlightenment in how to construct such proof?
18:06:19 <rafaelcgs10> hope this question is not in a wrong place!
18:06:55 <pacak> Edward is here so this place is as good as any other.
18:07:16 <rafaelcgs10> sorry, who is Edward?
18:07:33 <Welkin> Scissorhands
18:07:49 <rafaelcgs10> oh boy
18:09:14 <lyxia> rafaelcgs10: it is adding if you read bottom up, lambda abstractions introduce variables in the environment.
18:13:34 <rafaelcgs10> true, but I find weird and don't help much my brain in this quest. Maybe I need other brain :( I really wish I could see a example of what I want.
18:14:21 <rafaelcgs10> sorry if I repeated the last message
18:14:23 <lyxia> rafaelcgs10: take the example in figure 6
18:14:39 <lyxia> it starts with "over ... in ..."
18:14:50 <lyxia> so you apply the over rule
18:16:43 <_sras_> Is there anyway I can hook into Servant's log system? I want to add more details to it...
18:17:59 <lyxia> rafaelcgs10: or your example, it's shorter so it's easier to write the derivation
18:24:37 <_sras_> What is the concept of a "Context" in the api of Servant web framework?
18:34:19 <rafaelcgs10> \quit
18:34:31 <rafaelcgs10> derp me
18:34:41 <ChaiTRex> rafaelcgs10: You can't tell me what to do!
18:41:57 <rafaelcgs10> lyxia: I made some progress :)
18:45:03 <augur> anyone know what this cabal error means?
18:45:09 <augur> <command line>: cannot satisfy -package-id hashable-1.2.5.0-D2qhjboTBST6rFOSUg03ZP
18:47:54 <dmwit> augur: ghc-pkg check?
18:48:28 <dmwit> Sounds like the constraint solver picked hashable-1.2.5.0-D2blahblah, but then when it came time to use that package GHC said it didn't know about it.
18:56:12 <halogenandtoast> If I want to call a Haskell library from Ruby, are the FFI bindings up to snuff?
18:57:18 <peddie> halogenandtoast: it's very easy to call into Haskell from C . . . not sure what you will have to do on the Ruby end to go via C in the middle
19:00:20 <peddie> halogenandtoast: it might be easier to send messages back and forth, depending on what kind of call you are making
19:02:26 <dmwit> embed the ruby interpreter in a quasiquoter https://i.ytimg.com/vi/TyAAWwevJnI/maxresdefault.jpg
19:02:47 <peddie> dmwit++
19:03:44 <pchiusano> is there any point to FreeT?
19:03:52 <halogenandtoast> peddie: thanks
19:04:34 <pchiusano> seems like FreeT f m a can be mechanically translated to Free (Sum f m) a
19:07:21 <lyxia> they don't seem quite equivalent...
19:08:43 <pchiusano> they aren't quite isomorphic i don't think, no, but I can't really think of any situation where you'd care
19:08:53 <tobiasBora> Hello,
19:09:03 <tobiasBora> I'd like to know,
19:09:05 <pchiusano> FreeT forces there to be an `m` effect after each step
19:09:35 <tobiasBora> between this: "simpleHttp "http://www.haskell.org/" >>= L.putStr" and this "simpleHttp "http://www.haskell.org/" >>= putStrLn", which one is the quicker?
19:09:57 <peddie> tobiasBora: I suggest you measure it yourself ;)
19:10:00 <dmwit> ...but they do different things.
19:10:27 <dmwit> Which is faster, `head -10000 /dev/urandom` or `mpv my_favorite_music_video.mp4`?
19:11:07 <tobiasBora> Hum sorry
19:11:23 <tobiasBora> it's a bit stream so I can't use putStrLn?
19:11:33 <_sras_> Is there any way to log the matched route in Servant?
19:12:17 <dmwit> tobiasBora: I think that's probably right. But HTML is complicated; you can specify an encoding.
19:12:29 <dmwit> Well, HTTP is complicated. And HTML is complicated.
19:13:20 <dmwit> Probably it is safest to use `ByteString` and only deal with headers+HTML parsing if that turns out to actually be necessary.
19:15:26 <lyxia> pchiusano: does Free (Sum f m) a also satisfy the characterization of a free monad
19:16:05 <pchiusano> lyxia: wdym
19:18:04 <lyxia> "A Monad n is a free Monad for f if every monad homomorphism from n to another monad m is equivalent to a natural transformation from f to m.", I assume there is something similar for free monad transformers
19:18:42 <lyxia> but we can first take m = Identity and see whether this gives a free monad
19:19:01 <tobiasBora> dmwit: ok thank you. And I'd like to do some parsing/grep on my chain like "takes only the line that begins with... But I'm two problems:
19:19:10 <tobiasBora> 1) I don't know how to unline ByteString
19:19:18 <lyxia> and I guess it doesn't. Free (Sum f Identity) is not the free monad for f.
19:19:40 <tobiasBora> 2) I saw that I can use Parsec to do parsing, but I'm wondering if it's not overkilled for what I want...
19:19:42 <lyxia> or is it?
19:20:03 <tobiasBora> (and I'd like to have the most effecient version)
19:22:12 <Cale> lyxia: It's the free monad for Sum f Identity
19:22:29 <louispvb> is fp in scala still a good book today
19:24:42 <Welkin> scala is never good
19:25:11 <Cale> http://www.seas.upenn.edu/~sweirich/papers/systemd-submission.pdf -- neat paper :)
19:25:24 <Welkin> lol systemd
19:27:28 <Welkin> Cale: regarding CSS in haskell, do you create everything yourself, or do you pull in css libraries (that would require setting class names, like bootstrap). Or are there new tools I am not aware of for ghcjs projects?
19:28:05 <lyxia> Cale: do you know how to characterize "free monad transformers"
19:28:06 <Cale> We used to use some bits of bootstrap, but lately we've just been building all our own CSS
19:29:22 <Cale> We just use Clay to generate our CSS, whether we're compiling with GHC or GHCJS, and whether we're generating an external .css file (useful with ghcid to interact with the CSS), or baking it into the generated program
19:29:40 <dmwit> tobiasBora: Sounds like you will have to pay attention to headers and do real parsing, then.
19:30:46 <dmwit> tobiasBora: I don't know enough to make good recommendations about detecting the right encodings (sorry), but once you have decoded I've had good luck with tagsoup for HTML parsing.
19:32:20 <tobiasBora> dmwit: The prolem with HTML parsing is that the info I want are inside a javascript code in my pdf page, and I'm not sure it's take into account by tagsoup-like tools. Usually they deal with Html or JSON, but not JSON inside Html. So I think I will need to do it by hand
19:32:32 <Cale> lyxia: Well, first we need to be able to characterize monad transformer homomorphisms, which I think is doable. But then you need to say what category you're forgetting down to.
19:32:56 <dmwit> tobiasBora: I think you will, too. =(
19:33:43 <dmwit> tobiasBora: Depending on your needs, you may be able to use an existing parser as a first pass and extract the javascript for a second pass.
19:34:15 <dmwit> You say PDF, though... I don't know of a good PDF parser for Haskell, really.
19:34:25 <dmwit> There might be bindings to poppler or similar somewhere?
19:34:29 <Cale> lyxia: Free things are the images of left adjoint functors, but in general, you'll need to say what the right adjoint functor is meant to be.
19:35:07 <tobiasBora> dmwit: And here is the point: for now, I convert my lazy Bytestream into lazy text, and then I lines it, and do a filter on it using isPrefixOf
19:35:15 <tobiasBora> is it the better way to proceed?
19:35:24 <lyxia> Cale: Thanks. I'll stare at what you said for a while and then it'll tilt.
19:36:33 <Cale> lyxia: e.g. The free monad construction is a functor from the category of endofunctors on C (with natural transformations between them) to the category of monads on C (with monad homomorphisms between them)
19:36:34 <dmwit> tobiasBora: Well, if it's actually text, and you know the encoding, I don't see a problem. But I don't think PDFs are actually text, right? They can have binary data inside.
19:37:04 <tobiasBora> dmwit: Dit I talk about pdf? I just have Html here
19:37:10 <dmwit> tobiasBora: It is a tradeoff, of course. If I were going to run this as a script one or two times by hand and could easily see it going wrong, I'd probably do that and call it a day. But if this is going to be used a lot... might want to be more careful.
19:37:31 <tobiasBora> dmwit: yeah it's going to be used a lot
19:37:43 <dmwit> tobiasBora: Yeah, you did: "the info I want are inside a javascript code in my pdf page"
19:38:00 <tobiasBora> ohh sorry
19:38:04 <tobiasBora> I'm tired
19:38:09 <tobiasBora> I meant in my html page
19:38:17 <Cale> lyxia: Call it F, and in the opposite direction, let's define the functor G from the category of monads on C to the category of endofunctors on C which does the obvious thing and forgets that the thing was a monad
19:39:01 <dmwit> tobiasBora: I am sorry you are in this mess. =)
19:39:22 <tobiasBora> dmwit: I think I'll go to sleep and think later :P
19:39:31 <dmwit> That is often a wise move.
19:39:47 <Cale> lyxia: Then for any monad M, and any endofunctor X, there is a bijection between monad homomorphisms FX -> M, and natural transformations X -> GM
19:40:01 <lyxia> ohhh
19:40:23 <Cale> (and it's natural in the choice of X and M)
19:44:47 <lyxia> Okay so for a free monad transformer I need a "forgetful" functor from transformers to functors...
19:45:10 <Cale> From monad transformers to ... something
19:45:31 <Cale> It's not clear exactly what that something ought to be
19:46:16 <Cale> Well, perhaps it should be functors
19:46:17 <lyxia> I mean, doesn't the FreeT in the free package map functors to transformers?
19:46:24 <Cale> yeah
19:46:36 <Cale> I don't know if it's actually free
19:46:44 <lyxia> That's the context of my question.
19:46:46 <Cale> But we could attempt to check
19:48:14 <Cale> For any natural transformation f -> g, we should obtain a "monad transformer homomorphism" FreeT f -> FreeT g
19:49:23 <Cale> That is, we ought to be able to write something with type  (forall t. f t -> g t) -> FreeT f m a -> FreeT g m a
19:49:30 <lyxia> transFreeT "Lift a natural transformation from f to g into a monad homomorphism from FreeT f m to FreeT g m"
19:49:49 <Cale> yep
19:50:12 <Cale> and moreover, if this is going to be a monad transformer homomorphism, it should preserve lift
19:50:46 <Cale> Well, also the resulting map FreeT f m a -> FreeT g m a should be a monad homomorphism
19:52:22 <Cale> But yeah, the extra bit we'd want would be that  transFreeT h (lift f) = lift f
19:52:47 <Cale> (for any choice of h and f)
19:53:15 <Cale> I'd say there's a pretty good chance that's true
19:53:44 <lyxia> Yeah
19:54:20 <lyxia> maybe you even get it by parametricity
19:55:21 <lyxia> Anyway, I guess we have F now?
19:56:18 <Cale> Yeah
19:56:44 <lyxia> And I would guess the right adjoint, if any, is obtained by transforming the identity functor
19:58:50 <Cale> Seems likely, yeah.
19:59:16 <Cale> Kind of a weird thing to be a right adjoint.
20:00:45 <lyxia> Because it doesn't quite fit the usual idea of "forgetting" structure?
20:03:32 <Cale> Well, if that's really our right adjoint, we should have a correspondence between natural transformations f -> t Identity and monad transformer homomorphisms FreeT f -> t
20:04:36 <Cale> So there ought to be a function (forall x. f x -> t Identity x) -> FreeT f m a -> t m a
20:06:58 <pchiusano> lyxia and Cale am not totally following this discussion, but my reasoning for thinking FreeT superflous is it just adds an `m` effect, but the `m` effect can be rolled into the `f` in plain old `Free f`
20:09:34 <pchiusano> actually, seems like you could just write a function `FreeT f t a -> Free (f :+: t) a` straightforwardly...
20:10:41 <lyxia> Sure.
20:10:57 <Cale> seems likely
20:11:52 <Cale> But remember, there can be a point in Haskell to defining data types which are easily derived from others
20:12:07 <Cale> You couldn't write an instance of MonadTrans for the latter
20:12:20 <pchiusano> Cale: can you elaborate (on the first point)
20:12:27 <lyxia> Also, FreeT is a "free" something in a sense that Free is not
20:12:56 <Cale> pchiusano: Well, there's an instance MonadTrans (FreeT f)
20:13:28 <pchiusano> Cale: but if we already have `Monad (Free f)`, why do we care?
20:14:41 <dmwit> Presumably you care because it gives you `lift :: t a -> FreeT f t a`.
20:14:42 <pchiusano> i guess you can use MonadTrans.lift instead of some custom function
20:14:50 <Cale> right
20:14:53 <pchiusano> ha
20:16:34 <pchiusano> but I could just as easily define Free.lift :: f a -> Free (g :+: f) a
20:18:28 <pchiusano> same amount of code as giving the MonadTrans instance for FreeT... I guess the advantage is it can still be nice having a MonadTrans instance
20:19:06 <lyxia> I think the real motivation behind the definition of FreeT is that it is the "free monad transformer".
20:19:07 <pchiusano> this sort of gets into algebraic effects vs monad transformers I suppose
20:19:39 <pchiusano> you can sum together a bunch of effects in Free and compose your effects in that way
20:19:49 <pchiusano> and/or you can use monad transformers
20:21:21 <Cale> One of which might be optimised half decently.
20:22:36 <lyxia> At the end of the day you're free to not use FreeT.
20:22:52 <Cale> (of course, FreeT won't)
20:23:16 <pchiusano> yeah
20:31:01 <tobiasBora> Hum...
20:31:35 <tobiasBora> I tried to compare two "implementations" of getting an information in a page. First a script bash/sed/grep:
20:32:00 <tobiasBora> time (wget -O- https://mapageweb/ | grep -e "^<script type=\"text/javascript\">window._sharedData = " | sed -e 's#^.*= \(.*\);</script>$#\1#')
20:39:41 <tobiasBora> And an haskell script that rely on HTTP conduit, and that do the grep/sed by using basic operation on text: drop, dropEnd (I don't even use regex !)
20:40:14 <tobiasBora> However, the bash version is always faster. When I used regex (and so I needed to do a string conversion), it was still more visible...
20:45:19 <tobiasBora> Hum I found a reason: I'm using stack exec, when I directly run the exec it's quicker
20:48:11 <tobiasBora> But the regexp part is still longer to run...
20:48:32 <tobiasBora> (it's not amazing, but it's visible on a few runs...)
20:53:50 <tobiasBora> Haskell is 10% slower, even when the haskell is optimised without regexp, and when I use sed in my file...
20:54:00 <tobiasBora> in my bash script*
20:59:28 <spatial> p -> debug $ fmap (p !! ) $ randomRIO(0, length p - 1)   I have a short 'debug' function to print. But I get Prelude.!!: index too large
20:59:43 <lyxia> Well now I know why free doesn't have the natural bijection making FreeT a left adjoint. At some point you need hoist, but free doesn't depend on mmorph... http://lpaste.net/353839
21:00:19 <spatial> How to debug this ? 'debug' is x <- value   printf "Random move to [%d]\n" x   This is where the exception is thrown.
21:01:43 <lyxia> spatial: p may be empty.
21:02:06 <int-index> Hi. Trying to understand type applications. The user guide says that type variables printed in curly braces are not available for type application.
21:02:10 <int-index> :t runReader
21:02:12 <lambdabot> Reader r a -> r -> a
21:02:23 <int-index> GHCi says runReader :: forall {a} {r}. Reader r a -> r -> a
21:02:35 <int-index> (if I :set -fprint-explicit-foralls)
21:02:55 <geekosaur> yes, I don't think lambdabot's got print-explicit-foralls support
21:03:03 <int-index> And yet I'm sure I can use visible type application for runReader.
21:03:12 <int-index> and it's order of variables is forall r a, not forall a r.
21:03:23 <int-index> Why does GHCi print incorrect foralls?
21:03:44 <int-index> its*
21:04:50 <spatial> lyxia: Right. One more pattern check.
21:04:50 <MarcelineVQ> I've wondered the same thing about that rule
21:05:05 <MarcelineVQ> *int-index: 
21:05:35 <geekosaur> https://ghc.haskell.org/trac/ghc/ticket/13401 ?
21:06:34 * geekosaur thought he'd seen something about that go by...
21:07:00 <int-index> geekosaur, thanks, the explanation in the ticket makes perfect sense. (Now I only need GHC HEAD for :type +v)
21:11:32 <MarcelineVQ> Actually now that I've tried it their example works as they describe, I'm just not sure why it does :>
21:12:06 <MarcelineVQ> The example being https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#visible-type-application  "When printing types with -fprint-explicit-foralls enabled"
21:12:41 <MarcelineVQ> This came up in #ghc earlier as f :: forall a b . a -> b -> Int       if   f 'c' :: b -> Int  then you can't visibly-type-applicate to it anymore,  f 'c' @Char  is an error for example. Could anyone explain to me why visible type application is limited in this fashion to the fully polymorphic form?
21:14:19 <jle`> int-index: in my ghc it says r a
21:14:24 <jle`> *ghci
21:14:30 <jle`> runReader :: forall {r} {a}. Reader r a -> r -> a
21:14:43 <MarcelineVQ> to expand: f 'c' becomes  f 'c' :: forall {b}. b -> Int   why is the forall b hidden now?
21:15:09 <int-index> jle`, I'm using GHCi v8.02
21:15:12 <int-index> 8.0.2
21:15:37 <jle`> ah i see
21:15:44 <jle`> yes it's now forall {a} {r}. for me too
21:16:04 <jle`> i wonder if it's a regression, or if 8.0.1 was correct only by coincidence
21:19:31 <geekosaur> I vaguely recall a ticket about that as well, but didn't spot it in the list
21:21:08 <jle`> print-explicit-foralls is nice though, i might start adding it to my cabal files
21:21:41 * geekosaur notes that he's good at recalling and searching for tickets, not good at type / kind level shenanigans; no clue about what VTA is up to
21:21:59 <dibblego> is anyone at Boston Haskell this evening?
21:22:45 <monochrom> No, but everyone was at Toronto Haskell :)
21:23:00 <dibblego> if so, can you please ask Ed to check his phone :)
21:23:07 <monochrom> oops
21:23:48 <MarcelineVQ> which ed?
21:23:53 <dibblego> edwardk
21:23:54 <Welkin> ed, edd, and eddy
21:24:05 <monochrom> Wait, are people still stuck at Boston Haskell this late?
21:24:09 <MarcelineVQ> psh easy, edwardk check ur phone
21:24:38 <MarcelineVQ> another problem solved
21:25:02 <monochrom> No, we have to do it the old-fashioned way.
21:25:15 <MarcelineVQ> torches and fast horses
21:25:26 <monochrom> Make a banner that says "Ed, you have a phone call". Walk around with it all over the restaurant.
21:25:36 <_sras_> How can I make Servant log the handlers that were used to Serve a request?
21:43:05 <WaterPLE> __name__
21:45:29 <spatial> randommove ::  BoardState -> IO Int   Possible to return 0 from this ?
21:46:36 <ChaiTRex> spatial: Sure, randommove _ = return 0
21:48:12 <spatial> How does Int become IO Int ? Thought one can't mix.
21:48:24 <jle`> return :: Int -> IO Int
21:48:30 <jle`> the power of functions :)
21:48:31 <ChaiTRex> spatial: You can check into IO, but you can never leave.
21:50:11 <spatial> ChaiTRex : Roach motel model :-) Roaches check in, but they don't check out
21:51:14 <ChaiTRex> If randommove isn't doing any IO-ish stuff, you might consider just making it randomMove :: BoardState -> Int
21:51:52 <spatial> It is doing. fmap (p !! ) $ randomRIO(0, length p - 1)
21:52:02 <ChaiTRex> Oh, OK.
21:59:24 <abel-abel> hello, say I want to define some operators using special characters. I find that I can use something like `>*<` but I can not use `=_=`. GHCi got parse error for `=_=`. Is there some rules for function names which contain only special characters? Thanks in advance!
22:00:08 <geekosaur> they must all be Unicode symbol class. but _ is considered alphanumeric
22:00:53 <geekosaur> otherwise a name like foo_bar would treat _ as an operator
22:02:28 <pacak> > let (🐸) = (+) in 1 🐸 2
22:02:29 <abel-abel> geekosaur, Do you mean this? https://wiki.haskell.org/Unicode-symbols
22:02:30 <lambdabot>  3
22:02:57 <geekosaur> no, that's about a specific ghc extension
22:03:08 <geekosaur> I am talking about the Unicode standard's designations
22:04:00 <pacak> > let (☭) = (<*>) in Just 4 ☭ Just (+3)
22:04:02 <lambdabot>  error:
22:04:03 <lambdabot>      • Could not deduce (Num a0)
22:04:03 <lambdabot>        from the context: (Num ((a -> a) -> b), Num a)
22:05:35 <abel-abel> found a similar question on quora. https://www.quora.com/Why-do-Haskell-programmers-like-to-use-unicode-symbols-in-their-code 
22:05:44 <abel-abel> geekosaur, got it. Thank you!
22:05:59 <abel-abel> pacak, Thanks!
22:07:01 <pacak> abel-abel: I'd say it's a very bad idea to use unicode - it makes it harder to grep, it tends to look different with  different fonts and it might not display for some people properly.
22:07:30 <abel-abel> pacak, agree with you.
22:07:32 * geekosaur really wishes that, in 2017,  that weren't still a consideration
22:07:59 <kadoban> grep can't handle unicode?
22:08:11 <abel-abel> pacak, your first statement can not be displayed in Hexchat. while your second does.
22:08:30 <abel-abel> maybe because of font?
22:08:30 <geekosaur> it can, but grep :: won't match ∷
22:08:33 <pacak> kadoban: It totally can. Can you type "你好"?
22:08:35 <geekosaur> and vice versa
22:08:43 <kadoban> pacak: Yes, but I take the point.
22:09:02 <abel-abel> "你好"
22:09:06 <kadoban> geekosaur: Ah that. Yeah those should probably not be in code IMO
22:09:34 <kadoban> IMO it depends on context of the project if a name of 你好 would be appropriate or not.
22:09:50 <geekosaur> (actually it would match if you came up with the right locale table, but having to come up with custom locale tables to search haskell code is ugh)
22:10:07 <pacak> kadoban: As a function name? I don't think there are any context where it's appropriate.
22:10:54 <kadoban> pacak: I don't know what it means, but if the entire team is Japanese (Chinese? whatever), why should they not be able to use names in their own language?
22:11:06 <pacak> kadoban: That's "hello" in chinese
22:11:30 <geekosaur> perfectly cromulent for a hello-world function :p
22:12:27 <ZesenQian[m]> Hello, does  ghc core correspond to a single .hs file, or a complete executable?
22:13:06 <pacak> ZesenQian[m]: What is ghc core?
22:13:23 <geekosaur> it's an intermediate representation while compiling a .hs file
22:13:58 <geekosaur> (it's ghc's version of System F with Haskell-like syntax)
22:14:05 <pacak> geekosaur: It can also be a core dump produced by ghc. Or whatever ghc-core command displays
22:14:26 <geekosaur> the latter is the same thing I am talking about
22:20:46 <kadoban> pacak: Oh.
22:40:36 <Axman6> abel-abel: my prefered way to get unicodeish syntax is to use Fira Code font in my editor - the file doesn't contain any weird symbols, but the font has ligatures for many common operators etc. (like => becoming a double arrow)
22:42:00 <Axman6> I hate coming across code where someone has use alphas instead of a's for no good reason. it adds nothing but comes with many downsides
22:47:06 <MarcelineVQ> I also think ligatures are quite a nice thing to use and keeps code portable between readers
22:47:53 <MarcelineVQ> if you actually want fancy text at least :>
22:49:03 <geekosaur> and if your editor and/or terminal support ligatures properly
22:49:22 <geekosaur> there's a long list of things that font is known not to work with (or work only with local patching)
22:52:10 <barrucadu> I used to use ligatures, but found that I ended up with much of my code alignment one character off due to arrows being rendered in a single monospaced cell and suchlike
22:58:26 <athan> Is there a way to "cut" inside of a QQ?
22:58:43 <athan> like [foo| something $(someVarInScope) something |]
22:58:49 <athan> or is that QQ dependent?
22:59:02 <athan> (given that `someVarInScope :: String`)
22:59:10 <pikajude> no that's up to the quasiquoter
23:00:50 <athan> shoot, thanks pikajude 
23:01:19 <pacak> athan: You can try doing something perverted with CPP....
23:01:47 <athan> heh
23:01:57 <pikajude> my frame of reference is hamlet, which takes #{some_expr} in a QQ and uses haskell-src-meta to parse it
23:02:05 <pikajude> then re-embed it as part of the AST
23:06:33 <jle`> was haunted by half a month by a bug that was the result of my types not being descriptive enough and allowing illegal states
23:06:41 <jle`> as soon as a changed the types the bug was caught
23:06:51 <jle`> haskell success story i guess?
23:09:17 <pikajude> that's what we call success
23:15:17 <shauryab98> Hi! I've started learning haskell and want to contribute to open source projects. What projects could be great for a beginner?
23:16:00 <Axman6> the best projects are ones which you understand the domain of and want tp use
23:18:37 <shauryab98> Any idea how 'Codeworld' draws graphics? Does it use some other haskell library to do that?
23:20:40 <Axman6> You doing COMP1100 by any chance?
23:20:51 <shauryab98> Cis194
23:21:16 <Axman6> ah, we're using code world in COMP1100 at the ANU
23:21:27 <Axman6> thought I'd found a student ;)
23:21:45 <cocreature> shauryab98: find some library that you use or find cool and contribute to that :) almost all projects have some beginner tasks
23:22:20 <Axman6> Code.world is also available on hackage (and probably github), so you can find out
23:23:08 <shauryab98> I went through their code but didnt find how the graphics are being generated.
23:26:49 <geekosaur> "It comes with two backends. When compiled with GHCJS, it uses the JavaScript FFI to run on http://code.world/. When compiled with GHC, it uses the blank-canvas package to provide a webpage consisting of just a panel locally. This way, the same program that runs on the CodeWorld server can also be run locally."
23:30:52 <jle`> mniip: oh, fwiw, it was your library that helped me track down the bug
23:31:04 <jle`> i mentioned earlier about arising from using types that weren't discriptive enough
23:31:11 <jle`> so thanks!
23:38:52 <piyush-k`> anyone tried ats
23:38:53 <piyush-k`> ?
23:40:11 <piyush-k`> type theory looks interesting but the error messages are horrible. Cannot make head or tail of the error
23:50:19 <_sras_> How can I generate psudeo random UUID's in pure code?
23:51:10 <pacak> _sras_: You can pass a seed to use
23:51:27 <pacak> :t random
23:51:28 <lambdabot> (RandomGen g, Random a) => g -> (a, g)
23:51:46 <_sras_> pacak: Yes
