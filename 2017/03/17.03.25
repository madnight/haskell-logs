00:12:20 <cocreature> abed: write a function median :: [Integer] -> Integer and then apply it like glguy did
01:12:42 <abed> https://thepasteb.in/p/98hRQ956NlDUk
01:12:58 <abed> how do i get main to wait on mednums to finish on the second time around
01:13:38 <abed> what happens is the first time it runs great and returns the median however, if the user presses y and calls main again it runs mednums but doesn't wait on it and continues running the rest of main
01:23:49 <awang> :yarou hello
01:31:46 <adarqui> is ghc 8.0.x compilation much slower than 7.10.x? anyone experiencing slower build times with ghc 8?
01:32:51 <cocreature> adarqui: I don’t think I’ve seen slowdowns but if you are experiencing slowdowns definitely try to reduce it to a reasonably small example and submit a bug report!
01:34:19 <adarqui> well, it's more of a code size thing, not the actual performance of a compiled program.
01:34:37 <adarqui> code size/lines of code
01:35:37 <cocreature> adarqui: I’m not following. does the same problem compile significantly slower with 8.0 than it did with 7.10?
01:35:47 <cocreature> if you add more code it’s obviously not going to compile faster most of the time :)
01:36:39 <adarqui> right im saying.. say a 20k LOC project compiling under 7.10.x taking 1 minute, ghc 8 taking 2 minutes .. so i was replying to the 'reduce it to a reasonably small example' portion of your comment
01:36:48 <adarqui> the 'small example' is just alot of code.. heh
01:37:07 <cocreature> adarqui: well but maybe the slowdown is only related to parts of it
01:37:30 <cocreature> adarqui: it definitely sounds like a bug if the compile times doubled
01:37:32 <adarqui> ya i dno, just seems to be every repo i compile
01:38:15 <adarqui> ill setup a test/experiment between ghc 7.10.3 and ghc 8.0.2 eventually to make sure
01:38:26 <adarqui> but was just wondering if people are experiencing this
01:38:40 <adarqui> https://www.reddit.com/r/haskell/comments/45q90s/is_anything_being_done_to_remedy_the_soul/
01:48:12 <cocreature> adarqui: yeah ghc’s compile times are not great but the only way to fix regressions is to report them when you experience them :)
01:52:13 <adarqui> thanks cocreature. and ya I know... :/ it was more of a question to potentially active users of an irc channel, based on their recent experience with ghc 8.
02:55:57 <suppi> i'm using `stack test` to run tests but i'd like to supply arguments to the tests (such as --hide-successes) but i'm not sure how to do that
02:56:43 <suppi> doing `stack test -- --args --hide-successes` returns "Directory not found --args\nDirectory not found --hide-successes"
02:57:17 <suppi> i'm using tasty btw
03:04:24 <kaol> Is there a better way of writing an Int -> Text function than pack . show? It seems odd to use String for it.
03:17:11 <ertes> kaol: String should be fine in this particular case
03:18:11 <ertes> you may want to check out the text-show package, but i doubt that it would make a real difference in terms of speed
03:26:16 <kaol> Any speed difference will get lost in the noise in my case since this is for a web application with network and database latencies and whatnot. It just felt awkward to involve String in it at all.
03:27:36 <ertes> String isn't inherently bad…  it's only when Strings become an actual in-memory structure that performance drops
03:27:58 <ertes> in the case of Show the String is produced lazily and consumed eagerly with no sharing
03:28:26 <kaol> And GHC is no doubt very good at optimizing things like that.
03:28:53 <ertes> so it pretty much compiles to a loop…  if you're lucky and build/foldr fusion kicks in, then even the lazy list vanishes, leaving you with a very tight loop
03:29:23 <ertes> whether you're lucky in that regard depends on how 'pack' is implemented
03:42:28 <roundhouse> hi, assuming I have a type "data A { _a :: Int, _b :: ..., ... }" with defined lenses, and I'm in a "StateT A" state monad, how can I magnify (or is that even what I want) to call a function in "StateT Int"? I tried "magnify a" but I get scary type errors.
03:44:59 <roundhouse> nvm, figured it out. I needed "zoom" instead of "magnify"
03:45:04 <roundhouse> thx anyway!
04:37:29 <uve> hiii
05:17:44 <mustafa> test
05:19:28 <ph88> hello, i'm getting a "could not deduce error" https://bpaste.net/show/8d62801bafaa line 111, i tried a few things (line 127, line 154), could anyone point me in the right direction ?
05:20:53 <cocreature> ph88: just add the constraint to the typ signature
05:21:05 <cocreature> ph88: you can’t use eotTerminal without having an EotTerminal constraint
05:22:40 <ph88> cocreature, do i have to put the constraint on  b  on changeLastValue2  ?
05:23:01 <ph88> not sure where to put the constraint
05:25:10 <cocreature> ph88: adding EotTerminal (Eot b) and Generic a to the constraints of changeLastValue2 seems to work
05:26:47 <ph88> boy o boy i'm excited let's see if it works
05:27:17 <ph88> hhmm stack is doing some updating, but i'm on a very slow connection
05:36:05 <ph88> Updating package index Hackage (mirrored at https://s3.amazonaws.com/hackage.fpcomplete.com/) ...   zzzZZZZzzzZZzZZzzZ
05:37:55 <hvr> ph88: have you just updated to stack-1.4?
05:52:00 <ph88> hvr, no
05:52:04 <ph88> recv: resource vanished (Connection reset by peer)
05:52:08 <ph88> cute
05:52:20 <ph88> pretty lame that stack ghci depends on internet connection to launch stack
05:52:50 <ph88> 30 minutes later, still no ghci prompt
05:57:09 <ph88> be right back
06:01:24 <ph88> i'm gonna open an issue over this
06:09:20 <anthonyyy> Very good creatures Mr
06:09:34 <anthonyyy> ohhh
06:10:18 <ph88> what's that anthonyyy ?
06:11:33 <anthonyyy> It does not mean anything I just put more and yyyy
06:26:17 <NickHu> Does anyone here have any experience with getting foreign key support turned on with persistent-sqlite?
06:29:00 <ph88> NickHu, no, but i'm surprised that FK support is not on by default o_O
06:29:01 <ph88> is it ?
06:29:31 <NickHu> ph88: It is on by default, having just checked, but the migration that initialises the db sets it to off
06:33:07 <ph88> NickHu, ah ye, perhaps there is a query you can send to turn it on
06:34:05 <NickHu> Any idea how? I have foreign key constraints in my schema (using persistent TH), but I guess I just need to find the flag somewhere to actually turn it on
06:34:06 <ph88> NickHu, i think you are talking about foreing key constraints, and not just foreign keys
06:34:28 <NickHu> Yes
06:35:01 <ph88> NickHu, https://sqlite.org/foreignkeys.html Section 2 describes the steps an application must take in order to enable foreign key constraints in SQLite (it is disabled by default).
06:35:39 <NickHu> But I'm using persistent to initialise my database
06:35:56 <ph88> what's persistent ? you can't run queries on persistent ?
06:36:34 <ph88> oh this ?  https://hackage.haskell.org/package/persistent-sqlite
06:36:41 <NickHu> Yes
06:37:43 <ph88> i see this too  https://hackage.haskell.org/package/persistent-sqlite-2.6.2/docs/Database-Persist-Sqlite.html#v:fkEnabled
06:37:54 <NickHu> Yes, it's on by default
06:38:06 <NickHu> I've also set it on manually with the lense, makes no difference
06:38:18 <ph88> not sure which function to use to send a query with this lib
06:38:48 <ph88> maybe this one  https://hackage.haskell.org/package/persistent-sqlite-2.6.2/docs/Database-Persist-Sqlite.html#v:runSqlite
06:40:08 <ph88> NickHu, do you know? try to send that query
06:47:37 <NickHu> Yeah, I ran the raw sql query "PRAGMA foreign_keys" and it comes back as True
06:48:34 <NickHu> So I guess it's just that the persistent TH schema doesn't bother to put in the foreign key constraints
07:23:42 <GGuy> Is there a name for a type that only has one valid instance? Eg data A = A; data B = B; data C = C A B
07:24:45 <GGuy> Its not a singleton... but it has similar properties.
07:25:31 <forker> C is a product type in your case, it has {A}*{B} instances
07:26:17 <forker> A and B are unit types, afaiu
07:26:39 <GGuy> Yeah but is there a name for a type where you could derive the default?
07:27:16 <GGuy> Because there is only one valid constuructor call
07:28:11 <GGuy> C A B
07:31:05 <forker> you want some sort of automatically derrivable typeclass like class WithDefaultInstance a where defaultInstance :: a ?
07:34:12 <GGuy> In my case im using ghc generics to encapsulate information into empty types. I want to be able to construct a valid instance for types that only coontain empty types at the lowest level.
07:35:08 <GGuy> I can do it and have most of the code but i just didnt know what to call them.
07:36:12 <pkmx> is it possible for ghci to ignore extensions enabled in ghci when loading files (only using those declared with LANGUAGE pragma in the source)?
07:42:10 <marvin2> hi. can someone recommend me a pastebin that does not have ads for the people viewing my code?
07:43:45 <hpc> lpaste
07:43:50 <sm> http://lpaste.net, http://gist.github.com
07:44:01 <hpc> lpaste is run by someone who is active here
07:44:14 <sm> didn't he hand it off to someone ?
07:44:18 <hpc> formerly hpaste and specifically for the haskell community
07:44:19 <hpc> maybe
07:44:40 <hpc> i know he was involved in it fairly recently as i saw him asking in another channel about antispam techniques for it
07:45:04 <geekosaur> dpaste.de is another one fwiw
07:45:25 <lyxia> GGuy: singleton 
07:46:39 <GGuy> Even for data C = C A B?
07:47:01 <lyxia> sure
07:47:16 <GGuy> Wicked, thanks.
07:48:53 <lyxia> GGuy: "empty type" usually refers to types with no inhabitants like Void. 
08:11:35 <dram_phone> Question: what
08:11:39 <dram_phone> Sorry
08:11:54 <dram_phone> Question: what is the correct way of doing this? http://lpaste.net/353914
08:12:42 <dram_phone> TypeApplications, PartialTypeSignatures, AllowAmbiguousTypes, ScopedTypeVariables -> confusion
08:16:41 <c_wraith> dram_phone: all of those extensions enable talking about types more explicitly than base haskell
08:17:40 <dram_phone> c_wraith: You could be missing some context
08:17:42 <c_wraith> dram_phone: but what are you trying to do?
08:17:56 <dram_phone> I was trying to get http://lpaste.net/353914 to work
08:18:07 <dram_phone> I want to pass the 'f' down to fmap
08:18:16 <c_wraith> but that code is kind of nonsense
08:18:19 <dram_phone> but there's something I'm missing, and it doesn't really work
08:18:21 <c_wraith> What are you trying to do?
08:18:44 <dram_phone> c_wraith: arrgh, you're right, I was just trying to present a minimal example :P
08:19:33 <cheater> hi
08:19:57 <cheater> i recently read haskell will support something similar to borrowing in the future, what is the name of that?
08:20:14 <Magnap> Linear types
08:20:45 <c_wraith> dram_phone: You at the very least need a constraint (Show f Bool) on the value
08:20:57 <cheater> ok
08:21:04 <cheater> will linear types allow us to hang up the GC?
08:21:08 <c_wraith> Err, (Show (f Bool))
08:21:10 <c_wraith> No
08:21:20 <cheater> why not?
08:21:38 <c_wraith> Because you still can allocate things with unknown lifetimes
08:21:51 <c_wraith> laziness being one reason for that.
08:21:57 <c_wraith> Complicated code being another reason
08:22:12 <cheater> sure, but what if i allocated things that will have those unknown lifetimes outside of the part that i want to perform without GC?
08:22:33 <cheater> and inside they will have known lifetimes
08:22:38 <c_wraith> The program will still have GC
08:23:02 <cheater> why?
08:23:28 <c_wraith> because it doesn't magically go away if it's not needed within a small portion of the program.
08:23:35 <cheater> hmm
08:23:39 <cheater> maybe it should..
08:23:44 <cheater> it would be nice if it did.
08:23:44 <c_wraith> You can already write code that doesn't allocate while it does useful things.
08:23:54 <cheater> using C FFI?
08:23:59 <cheater> or within pure haskell?
08:24:10 <c_wraith> pure haskell, thanks to optimizations
08:24:28 <cheater> is there a blog post or some other write up on how to do that?
08:24:43 <c_wraith> If you compile something like sum [1..1000] :: Int with optimizations, it won't allocate anything.
08:24:53 <cheater> sure
08:24:56 <cheater> that's using fusion
08:25:03 <cheater> right?
08:25:10 <c_wraith> Yes, but fusion alone isn't enough
08:25:17 <c_wraith> It also auto-unboxes Int
08:25:17 <cheater> oh, what else is needed?
08:25:22 <cheater> oh
08:25:33 <cheater> anything else that's necessary?
08:26:01 <cheater> i didn't realize auto-unboxing could be used like this
08:26:07 <cheater> i thought it was mainly to conserve memory
08:26:20 <cheater> that's a nice feature, thanks for pointing it out
08:26:28 <c_wraith> Well, if it unboxes an Int, it fits in a register.
08:26:42 <c_wraith> But only a few types have that property
08:27:15 <cheater> i guess it does, but i haven't guessed the implication from "fits in a register" to "will only be held in a register"
08:27:35 <c_wraith> That depends on the optimizer to decide it's a good idea
08:27:46 <cheater> what types? i guess int, float, char, and whatever bytestring holds
08:27:54 <cheater> aha
08:27:57 <spatial> How do I a logging framework in code ? I want to write to a log file.
08:28:25 <c_wraith> spatial: check out https://hackage.haskell.org/package/fast-logger
08:28:28 <cheater> it depends on your general use, you could use a writer monad, a free monad, or maybe search for a library that will do logging.
08:29:11 <cheater> c_wraith: but during that sum, potentially a gc could still happen, right?
08:29:37 <c_wraith> cheater: well...  no, actually.  But you can call that a GHC bug.
08:29:51 <dram_phone> c_wraith: I was doing something like: http://lpaste.net/353915
08:30:00 <c_wraith> the GC can't run unless all mutator threads are suspended
08:30:14 <c_wraith> And a thread that doesn't allocate won't be suspended
08:30:28 <c_wraith> It's that latter part that might be considered a bug
08:31:19 <dram_phone> In my case, I needed to make a general Hspec 'Spec' type that works with any 'f' type I pass to it
08:31:50 <c_wraith> dram_phone: why not add the Eq constraint it needs?
08:31:55 <dram_phone> Ideally something like {{ specFoo @MAF "My awesome functor" }}
08:32:20 <c_wraith> dram_phone: in fact, it lists a type there
08:32:24 <dram_phone> c_wraith: I thought PartialTypeSignatures could do it?
08:32:32 <c_wraith> dram_phone: it has 4 constraints that your type doesn't have
08:32:38 <c_wraith> dram_phone: those 4 constraints are necessary
08:33:33 <dram_phone> c_wraith: so you mean the (_) part doesn't work?
08:33:35 <c_wraith> dram_phone: no, _ stands for an unspecified set of type constructors, but constraints are different.
08:36:00 <cheater> c_wraith: aha
08:36:51 <dram_phone> c_wraith: I was expecting this to kick in: http://downloads.haskell.org/~ghc/master/users-guide/glasgow_exts.html#extra-constraints-wildcard
08:37:34 <c_wraith> dram_phone: huh.  Ok, that looks like it should have applied - maybe it doesn't play nicely with ambiguous types
08:39:55 <c_wraith> dram_phone: because the error says it is calculating the constraints on prop_fmap correctly
08:40:55 <c_wraith> dram_phone: I bet the problem is actually with the type application.  I think it's not using that information when calculating the constraints on check_prop_fmap
08:42:08 <dram_phone> c_wraith: But when I say (Functor f, _) on check_prop_fmap, it actually gets the rest of the constraints right: http://lpaste.net/353915#a353917
08:42:23 <dram_phone> And somehow it's *still* ambiguous
08:42:39 <c_wraith> well yes, it's ambiguous.  That's expected.
08:42:49 <c_wraith> the type *is* ambiguous
08:43:19 <dram_phone> c_wraith: But then even AllowAmbiguousTypes doesn't let me pass
08:43:40 <dram_phone> Because, I suppose, the 'main' error is 'Could not deduce (Eq (f0 C))'
08:44:17 <c_wraith> are you using check_prop_fmap anywhere?
08:44:31 <dram_phone> c_wraith: not really
08:44:58 <c_wraith> dram_phone: so, the thing to note here is that it's complaining about f0, not f
08:45:05 <c_wraith> So somehow, those aren't being unified
08:45:28 <dram_phone> Appending {{ main = check_prop_fmap @[] }} didn't help
08:47:15 <c_wraith> dram_phone: as an aside, you know you don't even need to check that property, right?  With the way Haskell's type system works, if fmap id === id holds, the composition property is automatic
08:47:28 <dram_phone> That one I know :)
08:47:41 <dram_phone> I'm checking something else, that's just a minimal example
08:47:45 <c_wraith> got it
08:49:20 <dram_phone> c_wraith: Basically, I want to use partial sigs because Eq constraints are everywhere in props
08:50:09 <dram_phone> And I want to use TypeApplication because I heard it solved the 'passing a type easily' problem
08:50:18 <dram_phone> (Proxy is ugly)
08:51:48 <c_wraith> I think it's likely you've hit a corner case in the interaction of all of those features - particularly type application, which is quite new
08:53:56 <dram_phone> c_wraith: Yeah
08:54:22 <c_wraith> If you drop partial signatures or type application, does everything work?
08:54:40 <dram_phone> Judging from the sudden appearance of those constraints, I think the typechecker actually lost track them somewhere
08:57:31 <dram_phone> c_wraith: Hmm TypeApplication is actually irrelevant
09:05:49 <dram_phone> c_wraith: If I write all the constraints on check_prop_fmap, everything works
09:06:03 <c_wraith> dram_phone: with type applications?
09:06:11 <dram_phone> As soon as I wildcard one constraint, it breaks down
09:06:48 <c_wraith> This is "report ghc bug" territory.  At the very least, the documentation is wrong. :)
09:07:07 <dram_phone> c_wraith: no, it fails even without using type applications
09:07:40 <dram_phone> You're right. Let's at least just see what the mighty GHC devs think
09:09:53 <NickHu> Is anyone here familiar with lenses?
09:10:43 <c_wraith> NickHu: several people are.  go ahead and fire off the question. :)
09:11:11 <NickHu> What's the idiomatic way to write something like (^. myField) <$> headMay recordList?
09:12:08 <NickHu> Where I want to get a Maybe Field, i.e. Just $ head recordList ^. myField providing it's nonempty
09:13:12 <glguy> recordList ^? _head . myField
09:27:54 <greymalkin> What is the appropriate way to take a (a -> Maybe b) and lift it into a (a -> MaybeT m b)? I can't hoogle up a similar function, but it seems like it would be a common use case.
09:32:21 <joneshf-laptop> If you know your `m` is `Applicative` you could roll your own.
09:33:09 <joneshf-laptop> :t \f -> MaybeT . pure . f
09:33:10 <lambdabot> error:
09:33:11 <lambdabot>     • Data constructor not in scope: MaybeT :: f0 a -> c
09:33:11 <lambdabot>     • Perhaps you meant variable ‘maybe’ (imported from Data.Maybe)
09:33:19 <joneshf-laptop> :t \f -> Control.Monad.Trans.Maybe.MaybeT . pure . f
09:33:20 <lambdabot> Applicative m => (a1 -> Maybe a) -> a1 -> Control.Monad.Trans.Maybe.MaybeT m a
09:33:49 <greymalkin> Well, technically, I just need  `Maybe a -> MaybeT m a`
09:34:06 <joneshf-laptop> drop the `f` then.
09:34:14 <joneshf-laptop> :t Control.Monad.Trans.Maybe.MaybeT . pure 
09:34:16 <lambdabot> Applicative m => Maybe a -> Control.Monad.Trans.Maybe.MaybeT m a
09:35:13 <greymalkin> Huh... I tried that with `return` and got nowhere.
09:35:42 <joneshf-laptop> Maybe it'd help to look at the type of `MaybeT`?
09:35:49 <joneshf-laptop> :t Control.Monad.Maybe.MaybeT
09:35:50 <lambdabot> error:
09:35:51 <lambdabot>     Not in scope: data constructor ‘Control.Monad.Maybe.MaybeT’
09:35:51 <lambdabot>     No module named ‘Control.Monad.Maybe’ is imported.
09:35:55 <joneshf-laptop> :t Control.Monad.Trans.Maybe.MaybeT
09:35:56 <lambdabot> m (Maybe a) -> Control.Monad.Trans.Maybe.MaybeT m a
09:36:35 <joneshf-laptop> Or maybe it'd help more to see what you had tried previously, if you're available to share it.
09:36:39 <greymalkin> Right. I may have messed up my parens.
09:36:53 <greymalkin> I would love to, but it's been overwritten a number of times now;
09:37:04 <joneshf-laptop> :) No worries.
09:37:43 <joneshf-laptop> `return` should work similarly, just give a more restrictive constraint.
09:37:49 <joneshf-laptop> :t Control.Monad.Trans.Maybe.MaybeT . return
09:37:50 <lambdabot> Monad m => Maybe a -> Control.Monad.Trans.Maybe.MaybeT m a
10:21:45 <_sras_> How can I answer questions like "Which version of Servant contains the NT function" ?
10:26:21 <cocreature> _sras_: look through the hackage docs and see where it exists?
10:27:23 <_sras_> cocreature: Look through Hackage docs for all the versions?
10:27:49 <cocreature> _sras_: yeah, I don’t think there is really any other way that’s guaranteed to be accurate
10:28:11 <_sras_> cocreature: Is there any way to search through functions within a specific package?
10:28:32 <_sras_> or package + version
10:29:58 <cocreature> _sras_: I don’t think so. you can probably generate hoogle databases separately for each version and then use that to search but that’s slightly annoying
10:31:02 <_sras_> cocreature: Don't people usually have this problem? 
10:31:14 <t7> @hoogle (a -> m b) -> (c, a) -> m (c, b)
10:31:14 <lambdabot> Data.Tuple.HT mapPair :: (a -> c, b -> d) -> (a, b) -> (c, d)
10:31:14 <lambdabot> Data.Tuple.Lazy mapPair :: (a -> c, b -> d) -> (a, b) -> (c, d)
10:31:14 <lambdabot> Data.Tuple.Strict mapPair :: (a -> c, b -> d) -> (a, b) -> (c, d)
10:31:30 <greymalkin> _sras_: Have you tried :info NT within ghci?
10:31:59 <cocreature> _sras_: usually I don’t. I tend to just stick to the newest version of dependencies
10:32:19 <cocreature> _sras_: in the case of servant it is definitely in 0.10, but I’m not sure which version added it
10:32:20 <_sras_> greymalkin: I don't have NT available in my ghci.
10:35:11 <thoughtpolice> _sras_: I normally look at the index if you know the name. http://hackage.haskell.org/package/servant-0.10/docs/doc-index-N.html
10:35:37 <thoughtpolice> _sras_: However, a slight bit of digging showed that in Servant 0.10, the 'NT' constructor from the 'natural-transformations' package was re-exported. That's where "NT" comes from.
10:36:07 <_sras_> thoughtpolice: Yes. Got it.
10:36:10 <thoughtpolice> _sras_: So, you should be able to either import Servant.Utils.Enter in Servant >= 0.10, or simply always import http://hackage.haskell.org/package/natural-transformation-0.4/docs/Control-Natural.html
10:47:22 <t7> @hoogle (Map k v) -> [v]
10:47:23 <lambdabot> Data.Map.Internal elems :: Map k a -> [a]
10:47:23 <lambdabot> Data.Map.Lazy elems :: Map k a -> [a]
10:47:23 <lambdabot> Data.Map.Strict elems :: Map k a -> [a]
10:55:24 <_sras_> Why does I get the stack error "No extra dep settings found for package at x.y.z" ?
10:57:23 <joneshf-laptop> Asking again since it's a different time of day: What do people use for monitoring and error tracking? I don't see anything for NewRelic for instance.
10:59:36 <t7> how do  iwrite tests with a standard stack setup
10:59:43 <joneshf-laptop> There's ekg, but I don't see a nice way to connect that to other services.
10:59:53 <joneshf-laptop> So do you roll your own monitoring with ekg?
11:00:00 <thoughtpolice> joneshf-laptop: Lots of people use systems like ElasticSearch with logging frameworks IME, but maybe that's a bit of a different answer than you're looknig for. NR is a bit odd because it has a big proprietary SDK, right? So you need FFI.
11:00:19 <thoughtpolice> ekg does have a statsd backend, fwiw. There's also some stuff to push it into Prometheus and stuff too, I believe
11:00:40 <joneshf-laptop> ES for logging?
11:00:57 <joneshf-laptop> that's interesting. Do I not understand what ES is used for?
11:00:59 <thoughtpolice> Well, you throw all your logs into ElasticSearch and aggregate from there, I mean.
11:01:26 <thoughtpolice> ElasticSearch is traditionally very 'bespoke' though, lots of setups are complex. That's why it might not be really what you're looking for
11:01:56 <joneshf-laptop> K, I wont spend too much time on it then.
11:01:58 <thoughtpolice> It's not really in the same space as something like timeseries or metric data, though. There's a statsd and Carbon(?) backend for ekg if you want something like that.
11:02:16 <geekosaur> ES for logging sounds like trying to reinvent Splunk
11:02:18 <joneshf-laptop> But if you have any links, I'll book mark them for later.
11:02:26 <geekosaur> then again, with how much Splunk costs, one can see why]
11:02:32 <thoughtpolice> geekosaur: Yes, that's basically what people try to do, and exactly for that reason :)
11:03:35 <thoughtpolice> joneshf-laptop: https://github.com/ocharles/ekg-carbon and https://hackage.haskell.org/package/ekg-statsd for starters
11:03:56 <joneshf-laptop> So, we're using NewRelic on our Rails monolith. I'm wondering if there'ssomething similar I can use for a HAskell service we're writing.
11:04:24 <joneshf-laptop> Something that'd give us history, uptime metrics, performance, etc.
11:05:39 <joneshf-laptop> thoughtpolice, thanks! will check it out.
11:06:03 <thoughtpolice> joneshf-laptop: Yeah, NewRelic's integration is actually application level which makes it difficult. It's not impossible but it's trickier because you'll have to do, like, FFI. Unless they changed this to use like, HTTP recently, it was a C/C++ library you had to link in for this
11:06:15 <thoughtpolice> (That's why it can do things like monitor DB transactions and all that fancy crap 'easily')
11:06:24 <joneshf-laptop> Yeah, I'm really not interested in writing C bindings.
11:06:52 <thoughtpolice> There are alternatives perhaps. Something like DataDog might be more to your liking and it's more like, a really, really super kickass version of collectd, kind of?
11:07:06 <thoughtpolice> Integrating with it for your own stuff is fairly well supported, I think?
11:09:38 <thoughtpolice> joneshf-laptop: If you're married to NewRelic though, yeah, you might have to hunker down and write some basic FFI interop. :/
11:19:26 <NickHu> Does anyone know how to throw away a record field when deriving a generic ToJSON instance?
11:21:19 <Sh4rPEYE> Hi, I'm trying to build Brittany using stack, but I keep getting errors about missing type constructors or types...
11:21:19 <Sh4rPEYE> https://github.com/lspitzner/brittany
11:21:38 <Sh4rPEYE> Brittany seems much nicer than hlint, at least for my small files
11:22:18 <sm> do you mean than hindent ?
11:22:40 <sm> or stylish-haskell ? I think those are more comparable
11:23:20 <sm> looks interesting, I wonder how it improves on those
11:25:04 <ocharles> joneshf-laptop: these days I use prometheus
11:26:05 <thoughtpolice> sm: Most importantly, it should support all of GHC's frontend features. hindent and stylish-haskell both are lacking here, and it's very important in practice. (Maybe the work done in brittany will help them in the long run, however)
11:27:47 <ryandv> is it possible to write an instance of Bifunctor for Data.Map?
11:28:10 <sm> thoughtpolice: nice!
11:28:25 <ryandv> I am thinking something like `bimap f g m = map g (mapKeys f m)`, but `mapKeys` enforces `Ord k` for `Map k v`
11:28:40 <cocreature> ryandv: you can’t for that exact reason
11:28:41 <ryandv> and I'm not sure how to bake this constraint into my instance, since Bifunctors are kind `* -> * -> *`
11:28:44 <ryandv> I see
11:29:01 <cocreature> ryandv: that’s also why there is no Functor instance for Set
11:29:31 <joneshf-laptop> thoughtpolice, thankfully, we're not really stuck with it. I just think it'd be nice for everybody if we could have all of our monitoring in one place.
11:29:40 <ryandv> cocreature: ok, very good to know... thanks
11:30:20 <joneshf-laptop> ocharles, these days? What have yu used in the past, and how does prometheus compare?
11:30:29 <Sornaensis> how do I install a local package as a library using stack? I just want to be able to pull it in automatically when I am working with it, but using `stack install` just creates a .stack-work directory and the documentation does not tell me how to make it available 
11:30:44 <joneshf-laptop> I guess the question I should be asking is less, which tools shoud I use, and more, "What's important to monitor?"
11:32:07 <sm> Sornaensis: stack install will also have installed it to your user packages, see: cd; stack exec -- ghc-pkg list
11:33:24 <sm> you can depend on it more explicitly in a project by including your local package in the packages or extra-deps list in the project's stack.yaml
11:34:35 <Sornaensis> sm: it only places it in the directory I ran stack in
11:34:43 <Sornaensis> so it is not available outside there or something
11:36:04 <sm> perhaps I'm wrong then.. run the stack install in your home directory
11:36:31 <sm> if you want it there. But really, declaring the dependency will be more robust
11:36:55 <Sornaensis> I'm just running a script. declaring a dependancy says it can't find the package 
11:37:51 <sm> https://haskell-lang.org/tutorial/stack-script is a good way to handle that (or newer stack script command)
11:37:53 <tangled_z> hey, could anyone help me with a stack error I'm getting?
11:38:00 <Sornaensis> sm: this is a package I am installing from local source
11:38:08 <Sornaensis> not from the remote repos
11:38:17 <Sornaensis> I just want the behavior to be the same
11:38:36 <Sornaensis> instead, it installs the local library into the package directory 
11:39:39 <sm> Sornaensis: did I help yet, or...
11:43:55 <adlaistevenson> tangled_z: What sort of stack error?
11:44:46 <Sornaensis> sm: If I install a package from the remote repos with `stack install <hackage package>` and then run a script through stack that uses that package, it works. If I build my local library located at ~/project/foo/bar, my script cannot find it, because stack does not actually install it to ~/.stack
11:44:57 <adlaistevenson> tangled_z: (I won't of much help, but it would seem more conducive to resolution if you gave detail.)
11:45:49 <sm> Sornaensis: what if you do cd; stack install ~/project/foo/bar
11:46:31 <Sornaensis> error parsing targets: directory not found
11:47:10 <Sornaensis> err, no local directories found as children
11:47:51 <sm> what about: cd; stack install --stack-yaml ~/project/foo/bar/stack.yaml
11:48:03 <t7> anyone used hspec? i need to conditionally run another rest only if the first bit passed 
11:48:56 <sm> no.. actually I don't know how to force it to install libraries to ~/.stack. Might be a #haskell-stack question
11:49:48 <benzrf> where does fusion happen in during the compilation process, in ghc? i used -ddump-simpl, and the Core has a bit of code that looks blatantly fuseable to me
11:50:02 <benzrf> is it just that fusion happens after -ddump-simpl, or is ghc not as good at fusion as i assumed?
11:50:04 <Sornaensis> sm: it would have been nice if the architecture of stack is explained somewhere in all the documentation. I was expecting it to work like cabal which does install everything including local packages to the same location
11:50:15 <Sornaensis> sm: that command does the same thing as before
11:50:25 <Sornaensis> it makes a .stack-work dir in the project dir
11:50:30 <sm> right
11:50:47 <sm> stack install only installs executables at user level it seems
11:51:53 <Sornaensis> :(
11:52:21 <sm> maybe you need to mention your local package in packages or extra-deps list in ~/.stack/global/stack.yaml
11:54:23 * sm is mystified
11:54:26 <Sornaensis> I just don't understand what the difference is between running stack install <local> vs stack install <remote>
11:54:31 <ryandv> @pl (\x -> x)
11:54:32 <lambdabot> id
11:54:55 <ryandv> @pl (\x -> f x >>= (\y -> g y))
11:54:55 <lambdabot> (g =<<) . f
11:55:19 <Sornaensis> @pl (\x -> y)
11:55:19 <lambdabot> const y
11:55:34 <mauke> :t (\f g x -> f x >>= g)
11:55:36 <lambdabot> Monad m => (t -> m a) -> (a -> m b) -> t -> m b
11:55:57 <mauke> :t (>=>)
11:55:59 <lambdabot> Monad m => (a -> m b) -> (b -> m c) -> a -> m c
11:56:04 <ryandv> interesting
11:56:12 <ryandv> I never understood the kleisli arrow
11:56:22 <sm> stack install is just stack build --copy-bins
11:56:45 <ryandv> s/arrow/composition
11:58:03 <ryandv> mauke: I have been illuminated, thanks
12:01:14 <Sornaensis> sm: this is super obnoxious then.
12:02:08 <sm> I'm curious, I've asked #haskell-stack
12:02:24 <sm> if that doesn't work, opening a bug against stack will
12:04:34 <Sornaensis> sm: I got it to work by building with ghc and specifying the stack.yaml file
12:04:47 <Sornaensis> but that's so obnoxious to do when I just want to run some scripts...
12:07:26 <tangled_z> adlaistevenson: I'm trying to install a package that's not on hackage, so I've included it in my stack.yaml. however when I do "stack build", it installs all the dependencies, and while it's compiling the package it breaks
12:08:38 <adlaistevenson> tangled_z: Breaks without an error?
12:08:41 <tangled_z> adlaistevenson: the error it gives me is a type error in one of the files of the library
12:09:17 <tangled_z> "Couldn't match expected type Int with actual type "Control.Distributed.Process.Extras.Time.Timeinterval"
12:09:40 <tangled_z> Weirdly I've succeeded at installing this library before
12:10:40 <MarcelineVQ> tangled_z: likely you need an extra-dep: true flag on the location  https://docs.haskellstack.org/en/stable/yaml_configuration/#local-dependency-packages-extra-dep
12:13:28 <tangled_z> MarcelineVQ: I've tried adding that flag already, but it still happened. (The library I'm downloading is included in my Main.hs file and my .cabal file)
12:15:53 <sm> Sornaensis: you'd think this would work, but it has corrupted my package db: cabal install --package-db=`stack path --local-pkg-db` ~/localpackage
12:25:37 <cocreature> I keep being confused by the fact that to get MonadThrow I need to import Control.Monad.Catch
12:27:06 <adlaistevenson> tangled_z: Maybe one of the libraries made a breaking change to the version the consumer code is pulling? Maybe you could open an issue with that lib on github?
12:34:26 <ryandv> is there a dictionary type like Data.Map that is also an instance of Bifunctor?
12:35:25 <glguy> Probably not, Bifunctor would require it to work on keys of any type
12:36:21 <davean> glguy: well, [(a, b)] seems it would allow it?
12:36:27 <davean> er, no equality
12:36:34 <davean> I mean, but you can force the equality on the lookup function side
12:36:44 <glguy> No, that type would be fine, and it would also be a crummy Data.Map replacement in general
12:37:02 <davean> glguy: It is a dictionary type though
12:37:06 <glguy> OK
12:37:53 <ryandv> is there no way to constrain the first type argument to Data.Map to have a "conditional" Bifunctor instance? like `Ord a => Ord [a]`
12:38:19 <davean> ryandv: then it wouldn't be Bifunctor
12:38:24 <glguy> ryandv: No, the point of bifunctor is that it works for any type
12:38:29 <glguy> You'd need to make a different typeclass
12:38:40 <ryandv> I see.
12:39:02 <davean> ryandv: and you pretty much have to bake that into the class declaration, consider for a moment what happens if you don't
12:58:24 <slack1256> Anyone using nixpkgs and has luck to use wx to compile correctly?
13:01:07 <Sh4rPEYE> What does 'Fun' in QC do? I'm supposed to somehow use it to test second Functor law with my custom Functors; but I have no idea how to use it. COuld somebody help?
13:21:29 <lyxia> It's a trick to generate and print functions 
13:25:18 <lyxia> Sh4rPEYE: If you have a property on functions, instead of writing quickCheck $ \f -> prop f, which won't typecheck, you can write quickCheck $ \(Fun _ f) -> prop f
13:27:34 <Sh4rPEYE> It seems my understanding of QC is more shallow than I've foreseen (I have no idea what does it mean o have a property on functions). Is there any good tutorial I should read?
13:29:07 <kvothe> @search wifikill apk
13:29:07 <lambdabot> Unknown command, try @list
13:29:36 <nak> does a monad need to implement map/join/ap etc to be a monad ?
13:29:44 <nak> or is only bind/return the bottom line requirement ?
13:30:33 <nak> the monad laws only talk about relationship of bind and return, so i'm guessing only bind/return is absolutely necessary
13:31:02 <katychuang_> Are there libraries focused on charting?  There's diagrams for drawing graphics, but wondering if there are libraries that already can take data and produce charts.  (Specifically would like to know if there are libraries for heatmaps)
13:31:29 <Maxdamantus> nak: are you talking about monads in general, or the type classes that exist in Haskell?
13:32:29 <cocreature> katychuang_: I know that https://hackage.haskell.org/package/plots-0.1.0.2/docs/Plots-Types-HeatMap.html supports heatmaps. not sure about the various other plotting libraries on hackage
13:34:48 <rdesfo[m]> any one able to get haskell to work in orgmode with intero?
13:35:13 <nak> Maxdamantus: i'm asking about monads in general
13:35:22 <katychuang_> cocreature: thanks! that looks like it might fit my needs
13:35:52 <thoughtpolice> Chart is also a good one, and uses Diagrams in the background actually like plots, but doesn't have Heatmaps built in, it seems.
13:36:02 <geekosaur> nak, currently join is reconstructed from bind; there's work to break that relationship so you can implement join and use fmap from the Applicative instance, instead of bind
13:37:06 <Maxdamantus> nak: in general, you'd just need to be able to derive a set of operations like bind/return
13:37:16 <geekosaur> ap is constructed from bind as well; or you can use the Applicative instance's version. (these are supposed to match, otherwise your Monad instance is wrong)
13:38:37 <nak> geekosaur: mm ok
13:39:15 <nak> geekosaur: how is pure different than return for State ?
13:39:24 <nak> it seems like they do the same thing?
13:39:25 <geekosaur> pure should never be different from return
13:39:32 <nak> ah ok ^_^
13:39:38 <geekosaur> basically, return predates Applicative
13:40:04 <geekosaur> and Applicative as prerequisite for Monad is quite recent, so Monad is still phrased in terms of its own return
13:41:18 <nak> gotcha
13:41:29 <Nolrai> Is there a word for two functions (f:a->b,g:b->a) that may or may not be inverses?
13:41:39 <geekosaur> if we were to throw out the existing Mon ad and start over, return and bind (the things you currently have to define for Monad!) would not exist; we'd use pure and join, and make you specify join in the Monad instance
13:41:52 <nak> so when someone says "pointed functor", geekosaur, does that somehow relate to the pure function?
13:42:02 <geekosaur> yes
13:42:11 <geekosaur> Pointed is Functor + pure
13:42:19 <Nolrai> The pure is the point, IIUC.
13:42:24 <nak> my understanding is "a pointed functor is just a functor that has a way of getting a value into the functor, aka pure"
13:42:48 <nak> ok cool ^_^
13:42:51 <geekosaur> if you also add "apply" then you have Applicative
13:43:08 <merijn> geekosaur: Why do you say bind wouldn't exist and we'd use join? Join is widely considered "more cumbersome to implement"
13:43:20 <Nolrai> It is?
13:43:46 <Nolrai> I can not think of a single instance where that is true...maybe cont?
13:43:57 <geekosaur> I was under the impression that bind often does what people want in a single package, vs having to use join . fmap
13:44:24 <geekosaur> but join itself is not more cumbersome to implement, just more cumbersome to use vs. bind
13:44:24 <Nolrai> Well yes. Thats why you would define it as "join . fmap".
13:44:32 <geekosaur> but bind can be derived given join and fmap
13:44:48 <merijn> geekosaur: Well sure, but so can join, so that's not such a great argument
13:45:30 <jle`> i heard the issue with join being in monad is that GeneralizedNewtypeDeriving has issues with deriving it
13:45:30 <Nolrai> In practice I find Join significantly simplier to define.
13:45:44 <jle`> it depends on the specific instance
13:45:50 <Nolrai> Fair.
13:46:10 <ij> Is Seq a -> [a] really "foldr (:) []" and isn't implemented already?
13:46:15 <geekosaur> but the main reason I;'d start with jon is the mathematical correspondence. then bind can be in the typeclass with a default implementation
13:46:29 <jle`> ij: i'm not sure what you're asking
13:46:31 <nak> i understand bind can be derived from map+join but i usually like seeing the implementation of each
13:46:38 <nak> this is probably because i'm a noob tho and still cutting my teeth
13:46:40 <geekosaur> (more practically I suspect we'd get either one definable in terms of the other)
13:46:42 <jle`> are you asking if there is a Seq a -> [a] function in base?
13:46:48 <jle`> there is, it's toList
13:46:57 <jle`> are you asking if it's implemented as foldr (:) [] ?
13:47:27 <jle`> are you asking if it's equivalent to foldr (:) [] ?
13:47:46 <ij> jle`, Where is it then? There's no Data.Sequence.toList.
13:47:56 <jle`> it's in Data.Foldable
13:48:05 <ij> Ah!
13:48:37 <jle`> although i think it'd be fai to expect it to be re-exported
13:48:39 <jle`> *fair
13:56:32 <MarcelineVQ> :t (putStrLn "foo" >> return "as") <> (putStrLn "wah" >> return "bs") -- neat
13:56:33 <lambdabot> IO [Char]
13:58:42 <merijn> MarcelineVQ: Yeah, attoparsec also has a Monoid instance on it's parsers, it's nice :)
14:01:11 <MarcelineVQ> some nice stuff coming in base 4.10 as well
14:02:33 <merijn> MarcelineVQ: Oh? Such as?
14:04:38 <MarcelineVQ> min/maximumBy are going to use foldl1 now, liftA2 is becoming part of Applicative ( https://ghc.haskell.org/trac/ghc/ticket/13191 ), and Bifoldable/Bitraversable are coming to base
14:05:32 <MarcelineVQ> Lots of other things as well but they're out of my useage domain, so far
14:10:54 <cocreature> oh I think I was complaining about minimumBy using foldr just the other day
14:11:21 <MarcelineVQ> someone was for sure so that made the line more noticeable
14:12:03 <cocreature> so who do I need to complain to to get sum to use foldl'? :)
14:14:31 <MarcelineVQ> idk much about that, is this post relevant to the subject? https://ghc.haskell.org/trac/ghc/ticket/10830#comment:26 is only mentions sum at the end so I'm not sure how directly applicable it is for you
14:15:48 <cocreature> MarcelineVQ: yep seems relevant thanks
14:24:43 <Jinxit> is there a function that would turn [a, b, c] into a <|> b <|> c?
14:25:20 <merijn> Jinxit: foldr? :p
14:25:26 <Jinxit> well sure :p
14:25:32 <merijn> "foldr (<|>) empty"
14:25:42 <Jinxit> oh true
14:25:50 <merijn> Or msum, if you have MonadPlus
14:26:22 <merijn> Or asum if you have Alternative, I suppose
14:26:23 <glguy> :t asum
14:26:25 <lambdabot> (Alternative f, Foldable t) => t (f a) -> f a
14:30:12 <newbie20> Hello, do typeclass resolution/typefamily calculation get memoized?
14:30:48 <merijn> lolisa: What do you mean by that?
14:32:19 <lolisa> So let's say it take quite some time to infer an instance of a typeclass. That particular instance will get inferred alot. Will ghc save the infer result to avoid doing the same work again and again?
14:33:29 <merijn> lolisa: What? You mean at compile time?
14:34:30 <lolisa> Yes.
14:35:00 <michi7x7> momoization is never at compile time?
14:35:01 <merijn> lolisa: Why would it end up inferring things a lot?
14:35:23 <merijn> Also, type inference is like a trivial amount of work, compared to most other things it's doing
14:35:32 <lolisa> I mean, does ghc internally save the result of type class inference.
14:36:03 <Nolrai> > 1+2
14:36:05 <lambdabot>  3
14:37:03 <lolisa> So I am trying to do finally tagless, but I also have:
14:38:11 <lolisa> data Term con h x = Term (forall r. con r => r h x), in which con is the "Language" of the term. (r is Eval/Show/Optimization, for example)
14:38:12 <geekosaur> michi7x7, you may be mixing levels...
14:38:53 <michi7x7> geekosaur: yeah, just realized that this really is about compile time. never bothered about that though
14:39:32 <lolisa> However I need subtyping for con when I try to do instance Lang (Term Lang) - this instance is not extensible, and I need to replace it with Lang (Term con) where con is arbitary "subtype" of Lang
14:40:15 <lolisa> I cameup with an ok algorithm for that, but it will probably get inferred alot, and it's not very eifficent, so it will be best if GHC save the result
14:41:02 <klumpskin> Where can I find some information on how haskell handles expression evaluation and precendence?
14:41:31 <geekosaur> how haskell handles it, or how ghc handles it?
14:41:33 <glguy> precedence as in how + and * interact in  1 + 2 * 3 ?
14:42:52 <glguy> https://www.haskell.org/onlinereport/haskell2010/haskellch4.html#x10-820061 
14:43:15 <lolisa> geekosaur, GHC.
14:43:17 <glguy> for operators in general you can check in GHCi with :info
14:43:18 <klumpskin> how ghc handles it, yes like + and * and stuff
14:43:30 <lolisa> sry, nvrmind
14:43:31 <geekosaur> lolisa, that was intended for klumpskin 
14:43:38 <lolisa> Yes, sorry
14:43:51 <klumpskin> Like I mean how ghc implements or what a good way to implement it is
14:44:05 <geekosaur> I cna't speak to yours because I can;t tell whether you are talking abotu a type level computation, or are confusing ghc-compile-time with your language's "compile time"
14:44:29 <klumpskin> uh
14:44:32 <klumpskin> compile time
14:45:07 <geekosaur> and that one was for lolisa :) I see I;m being confusing
14:45:16 <klumpskin> oh lol
14:45:30 <geekosaur> klumpskin, https://ghc.haskell.org/trac/ghc/wiki/Commentary/Compiler is where you start for how ghc does things. I don't know where it documents what it does with precedence though
14:45:42 <klumpskin> thanks
14:45:43 <lolisa> no, I am talking totally about GHC.
14:46:05 <phz_> hey, I’m looking for documentation on stack’s package.yaml
14:46:17 <geekosaur> since Haskell has user defined operators and doesn't require you to put the fixity with the operator definition, ghc fixes up precedence after the fact
14:46:29 <lolisa> So you can Imageine that I am doing singleton by hand, and somehow I feel like computing pow 3 5 a hundred time. will pow 3 5 get compute one or 100 time?
14:47:08 <phz_> ah it’s hpack, nevermind
14:47:53 <geekosaur> klumpskin, so I checked the parser part of the commentary and it mentions that fixing precedence is done in the renamer
14:48:08 <geekosaur> "Sometimes the over-generous parsing is only dealt with by the renamer. For example: Infix operators are parsed as if they were all left-associative. The renamer uses the fixity declarations to re-associate the syntax tree."
14:48:16 <Cale> lolisa: I'm not sure I understand what you mean, can you write the code?
14:48:30 <lolisa> Yes, just a few minutes.
14:48:36 <klumpskin> ah ok cool :) thanks geekosaur!
14:48:59 <Cale> lolisa: Functions are not memoised by default -- doing that would result in basically no garbage collection ever happening (because very little would ever be garbage)
14:49:14 <phz_> is there a way to have ghc’s output colored?
14:49:18 <phz_> I can’t stand it like that
14:49:26 <phz_> almost all languages’s compilers have that feature :(
14:49:28 <geekosaur> not yet
14:49:32 <phz_> dah :D
14:49:36 <klumpskin> phz_: there are libraries that can do that
14:49:44 <phz_> yeah, I tried one once
14:49:54 <phz_> but I was very deceived about it
14:49:55 <klumpskin> like pretty-print a derived Show with formattign and colors
14:50:00 <phz_> it fucked up ghc’s output pretty much
14:50:05 <klumpskin> oh lol
14:50:09 <merijn> That's why I use trifecta for parsing now, pretty coloured output :p
14:50:23 <phz_> merijn: I don’t see how you  get ghc’s output colored by using trifecta
14:50:29 <phz_> I want colors when I hit stack build
14:50:39 <michi7x7> I need some inspiration from you guys. I'm trying to come up with an Haskell CTF-challenge (a challenge for hackers liek crackmes). The idea is to host a buggy service and the challenge is to find and exploit that bug. In C you would usually allow a stack-overflow error which is exploitable using a return-to-libc attack. I need ideas for such a chellenge in Haskell :)
14:50:55 <merijn> phz_: That was a mostly orthogonal remark, relating too "almost all compilers have coloured output"
14:51:09 <klumpskin> michi7x7: have you looked at smashthestack?
14:51:17 <lolisa> I mean, typefamily at compile time... No runtime is ever involved. But anyway let me write the code :)
14:51:29 <klumpskin> You can probably do the same kind of challenges but with target programs written in Haskell
14:51:56 <klumpskin> But haskell probably has a lot less of those kinds of bugs than c
14:51:56 <phz_> merijn: I see
14:52:07 <phz_> though, I don’t get why no one is working on that
14:52:07 * geekosaur notes that the last CTF did have a Haskell challenge... but it was more along the lines of "valid Haskell program that is also valid GIF"
14:52:21 <geekosaur> I said "not yet" for a reason
14:52:22 <phz_> it’s so great to have the errors in red .D
14:52:24 <phz_> :D *
14:52:33 <phz_> geekosaur: is someone  working on it?
14:52:35 <michi7x7> klumpskin: yeah, something like that, but we are trying to host our own wargame and there are very little Haskell-challenges
14:52:36 <geekosaur> Idon't think anything is making 8.2 but it is being worked on
14:52:45 <phz_> great!
14:53:00 <geekosaur> the whole error/warning system is gradually being worked over, color support is intended to be part of it
14:53:05 <geekosaur> along with finer control over them
14:53:06 <merijn> phz_: Simple answer: The people hacking on GHC don't consider it important and would rather invest there time in more complicated things
14:53:18 <phz_> merijn: yeah sorry
14:53:23 <phz_> I now think as a rustacean
14:53:28 <phz_> like « everyone can push a PR »
14:53:29 <phz_> :D
14:53:32 <merijn> phz_: Also, stuff like "fancier output", etc. is something that's relatively easy for people to dive in
14:53:35 <geekosaur> there is apparently already some simple color support in patches, as I said unlikely to make the next release though
14:53:43 <phz_> merijn: well, I’d love to help
14:53:45 <merijn> phz_: Well, everyone *can* contribute
14:53:59 <geekosaur> and if you'd like to help out, #ghc is the place to be
14:54:20 <phz_> thanks for pointing out! <3
14:54:27 <geekosaur> although right now not many people will pay attention because they're working on getting 8.2 prerelease out
14:54:36 <merijn> phz_: In fact, this is the sort of stuff better done by people starting out. Stuff like coloured output does not require a lot of understanding about hard bits (e.g., the type checker), it just requires doing stuff and investing time
14:54:45 <michi7x7> klumpskin: the first level of the amateria-wargame is related to python and cPickle which has a well-known security problem when unserializing objects. Something like that in Haskell would be nice
14:55:19 <merijn> phz_: Also, see this brief and incomplete intro: https://gist.github.com/merijn/c01405e6c5a78a1c4ccb
14:55:25 <geekosaur> https://ghc.haskell.org/trac/ghc/wiki/Newcomers
14:55:31 <bjs> merijn: there's always low-hanging fruit in compilers
14:55:36 <merijn> I'm not sure whether the phabricator stuff changed
14:55:44 <phz_> well, I’ve been using haskell for more than four years now
14:55:49 <phz_> but never found the time to contribute to ghc
14:56:03 <merijn> bjs: Well, GHC especially so, since it's starved for contributors, so all the core people are too focused on doing "Real Work"
14:56:26 <mrjake> Has anyone used the Exference library?  It seems like there should be a function String -> String which takes a type signature and returns the haskell code which implements it, but I can't find it.
14:56:39 <phz_> how long is the build?
14:56:40 <merijn> (not to say the small low hanging fruit isn't worth doing...one should never underestimate the incremental awesomeness of minor fixes)
14:56:50 <phz_> I’ve been contributing to rustc, and the build is awfuly long
14:56:56 <phz_> awfully*
14:57:00 <klumpskin> michi7x7: this might be useful: https://wiki.haskell.org/Safely_running_untrusted_Haskell_code
14:57:03 <merijn> phz_: Depends on your machine? full build of GHC takes about 1-2 hours here
14:57:21 <phz_> merijn: ok, that seems a normal compile time
14:57:23 <merijn> phz_: But the compiler is built incrementally, so depending on what you work on it's faster after that
14:57:28 <Cale> phz_: It's long the first time, but if you're working on it, you'll tend to have most of it compiled already.
14:57:36 <MarcelineVQ> the first build takes awhile, subsequent builds aren't awful, if you're building devel it's not optomised as well iirc so it doens't take too long
14:57:39 <bjs> merijn: there's lots of really nice usability things that all compilers could do with, especially in the area of error reporting that can *always* be improved, the core team never have time for and are simple enough for newcomers (usually)
14:57:41 <MarcelineVQ> 1-2 hours sounds like optomised
14:58:45 <michi7x7> klumpskin: well, there is this: https://artyom.me/haskell-ctf, but this seems awfully constructed
14:59:16 <merijn> phz_: Also, might wanna subscrube to ghc-devs mailing list in addition to joining #ghc
14:59:30 <michi7x7> it uses Language.Haskell.Interpreter and sanitized the input against the most common exploits, but "forgets" some
14:59:34 <merijn> phz_: People usually somewhat responsive on both
15:00:19 <phz_> dully noted, merijn :)
15:00:28 <phz_> thank you for your responses
15:01:11 <merijn> People are already working on errors messages, so might wanna coordinate with whoever is doing that.
15:02:45 <fresheyeball> lets say I want to install a kde theme
15:02:59 <fresheyeball> should I install it the standard way by unpacking into a folder?
15:03:10 <fresheyeball> or is it worth it to do it with nix? 
15:03:52 * geekosaur wonders why ask here?
15:04:13 * phz_ wonders the same thing as geekosaur 
15:04:19 <merijn> geekosaur: Maybe they just join the top channel?
15:04:33 <merijn> Or one or more of the top channels
15:04:35 <fresheyeball> geekosaur: I was not aware nix was a panacea, so I asked.
15:04:49 <geekosaur> fresheyeball is something of a regukar here.my guess is the nix/stack integration comes up enough to suggest easy help with nix here?
15:05:32 <fresheyeball> crap sorry
15:05:39 <fresheyeball> I am in the wrong channel
15:18:17 <hvr> merijn: another reason ppl may not care about coloring ghc output is that emacs' haskell-compile mode does the coloring for you
15:18:53 <hvr> merijn: that being said, ghc-8.2 does have support for coloring compiler messages... but it's not perfect
15:19:14 <merijn> hvr: Well, that just means we need volunteers to work on it until it is ;)
15:28:52 <lolisa> Cale, https://gist.github.com/MarisaKirisame/419f2250dda1d8c0528cc702ec783b98
15:30:24 <Cale> lolisa: Oh, this is a very different situation than I thought you were asking about before :)
15:30:51 <lolisa> Sry for the confusion, but somehow I have some code that repeatly calculate expensive typeclass/typefamiliy.
15:31:11 <Cale> I'm going to guess that it absolutely will recompute it every time that you write it like that
15:32:15 <Cale> Now, what you might want to try (I have no idea if it'll work) is to define a type synonym for (Pow (S (S (S Z))) (S (S (S Z)))) and see if it computes the value of the synonym just once
15:33:14 <lolisa> But how do I 'see'? do I just test the run time or look into the source code?
15:33:35 <glguy> We need a Trace :: Symbol -> k -> k   :)
15:47:59 <fred-fri> would much appreciate any advice on how this can be improved https://gist.github.com/androidfred/26296cb7d2ef624ed2500f64eea62cdb
15:49:30 <michi7x7> fred-fri: well, comp looks like a fold to me. other than that, I think it's very readable
15:51:59 <fred-fri> right, i was thinking it was probably a better idea to create an array of tuples of alice and bobs scores and then fold them into their respective points
15:56:50 <michi7x7> fred-fri: smth like this? https://gist.github.com/michi7x7/c92b75a66ba48d0cc214dca751470245
16:00:42 <fred-fri> michi7x7, nice. i was thinking of, after parsing into [[1,2,3], [1,2,3]], transform that into [(1,1), (2,2), (3,3)] and then fold that. 
16:01:11 <geekosaur> > transpose  [[1,2,3], [1,2,3]]
16:01:13 <lambdabot>  [[1,1],[2,2],[3,3]]
16:01:55 <fred-fri> cool thanks, lemme see if i can put that together
16:12:01 <michi7x7> fred-fri: https://gist.github.com/michi7x7/c92b75a66ba48d0cc214dca751470245
16:12:13 <michi7x7> it should be possible to extend that to more than 2 lines :)
16:23:32 <Jinxit> so i'm using Earley and i want to combine multiple Prods with <|>. however, when all of them fail, i want it to fall back to another Prod. is it idiomatic to just add it with another <|> and have ambiguous parses? or do i have to create the "not" version of my options?
16:26:51 <fred-fri> michi7x7, https://gist.github.com/androidfred/26296cb7d2ef624ed2500f64eea62cdb see the comment with the new code, i'm doing something wrong with the fold because it's not compiling
16:31:48 <michi7x7> fred-fri: yeah, a tuple is not a list
16:31:51 <michi7x7> :t transpose
16:31:52 <lambdabot> [[a]] -> [[a]]
16:34:34 <fred-fri> duh im an idiot
16:37:03 <Sornaensis> is `par` generally useful for stuff there does not seem to be much documentation about how it works or what disadvantages of using it there might be
16:38:43 <michi7x7> fred-fri: this works with more than 2 lists: https://gist.github.com/michi7x7/c92b75a66ba48d0cc214dca751470245
16:41:01 <michi7x7> Sornaensis: there is a very good tutorial on parallel Haskell somewhere, can't find it though
16:41:22 <MarcelineVQ> http://chimera.labs.oreilly.com/books/1230000000929/index.html
16:42:55 <michi7x7> yeah, thats it ^ :)
16:43:03 <Sornaensis> thanks
16:43:05 * Sornaensis reads
16:43:51 <fred-fri> michi7x7, can't thank you enough for showing me all these different options and pointing out what i'm doing wrong! how can this one be made to output the desired? https://gist.github.com/androidfred/26296cb7d2ef624ed2500f64eea62cdb
16:43:58 <fred-fri> (bottom comment)
16:50:18 <michi7x7> :t foldl
16:50:20 <lambdabot> Foldable t => (b -> a -> b) -> b -> t a -> b
16:51:18 <michi7x7> fred-fri: ^ the fold-function (first argument to foldl) takes the current count as first argument and the list element as second argument
16:52:30 <michi7x7> fred-fri: also: you're comparing list-elements in comp' and incrementing those. you want to increment your counter
17:00:07 <parsnip> how do i convert bytestring to UTCTime? convert to string, then to int, then to utctime? 
17:02:43 <michi7x7> parsnip: how is a Bytestring a time?
17:03:27 <parsnip> michi7x7: the time is stored in a file, and then reading it in, i'd like to insert it in a record entry with type UTCTime
17:03:49 <michi7x7> parsnip: "stored" in what format?
17:03:56 <parsnip> i can do it if it's a string, but i can't find a `read` in Data.ByteString.Lazy
17:04:21 <parsnip> michi7x7: it's almost a json file, but not quite. i've massaged into json. 
17:05:45 <michi7x7> parsnip: is it just an unix timestamp?
17:05:55 <parsnip> it's in POSIX format, yes
17:06:11 <parsnip> integer seconds from epoch
17:06:45 <parsnip> right now, my draft functions, do the following:
17:07:42 <parsnip> FilePath (contents are almost JSON) --(Parsec)--> [[(String, String)]] --> ByteString (JSON format) ...
17:08:10 <parsnip> er, the tuple maybe should be (ByteString, ByteString)
17:08:39 <parsnip> but maybe life is easier if i ignore efficiency and just read in the file as String, these aren't large datafiles. 
17:10:05 <michi7x7> > parseTimeM True defaultTimeLocale "%s" "1234567890" :: Maybe UTCTime
17:10:06 <lambdabot>  error:
17:10:07 <lambdabot>      Not in scope: type constructor or class ‘UTCTime’
17:11:20 <parsnip> > "1489002497" :: POSIXTime
17:11:22 <lambdabot>  error:
17:11:22 <lambdabot>      Not in scope: type constructor or class ‘POSIXTime’
17:11:33 <parsnip> > "1489002497" :: ByteString
17:11:35 <lambdabot>  error:
17:11:35 <lambdabot>      Not in scope: type constructor or class ‘ByteString’
17:11:35 <lambdabot>      Perhaps you meant one of these:
17:11:39 <michi7x7> hmm, parseTimeM just takes strings
17:12:55 <parsnip> :t unpack
17:12:56 <lambdabot> error:
17:12:56 <lambdabot>     • Variable not in scope: unpack
17:12:56 <lambdabot>     • Perhaps you meant one of these:
17:14:27 <fred-fri> michi7x7, got it. for a beginner, doing things step by step makes it easier to understand what's going on. https://gist.github.com/androidfred/92994d8dc0503388c20797ac1071314e
17:15:25 <fred-fri> thanks again
17:24:16 <stevebash> join ##security
17:26:13 <parsnip> so Data.ByteString.Lazy converts to word8. do i have to use Data.ByteString.Lazy.Char8 to get conversion to string? 
17:26:48 <parsnip> oh, nm, these functions work on the first bytestrings
17:26:54 <Jinxit> any ideas why earley would give me 4 identical parses?
17:34:23 <ertes> > B.pack [195, 164]
17:34:25 <lambdabot>  error:
17:34:25 <lambdabot>      Not in scope: ‘B.pack’
17:34:25 <lambdabot>      Perhaps you meant one of these:
17:34:32 <ertes> > BS.pack [195, 164]
17:34:34 <lambdabot>  "\195\164"
17:34:52 <ertes> parsnip: what String would you convert that one into?
17:35:52 <parsnip> > map char [195, 164]
17:35:54 <lambdabot>  error:
17:35:54 <lambdabot>      • No instance for (Num Char) arising from the literal ‘195’
17:35:54 <lambdabot>      • In the expression: 195
17:36:29 <parsnip> the value it's parsing will be a POSIXTime, that is, digits 0-9
17:36:58 <ertes> parsnip: you need to pick an encoding anyway
17:37:21 <parsnip> > map int > map ord ['0'..'9']
17:37:23 <lambdabot>  error:
17:37:23 <lambdabot>      • Couldn't match expected type ‘[Int] -> [Doc]’
17:37:23 <lambdabot>                    with actual type ‘[Int]’
17:37:31 <parsnip> > map ord ['0'..'9']
17:37:33 <lambdabot>  [48,49,50,51,52,53,54,55,56,57]
17:37:39 <ertes> even if it's: "i'll assume it's ASCII, and i promise that i formally proved that it's going to be ASCII"
17:38:15 <ertes> if you assume that or latin-1, then you can use the unsafe .Char8
17:39:13 <ertes> > BSC.unpack (BS.pack [48..57])
17:39:15 <lambdabot>  "0123456789"
17:39:49 <parsnip> decodeDate bs = posixSecondsToUTCTime . (fromIntegral :: Int -> POSIXTime) . (read :: String -> Int) . BC.unpack $ bs
17:42:53 <tobiasBora> Hello,
17:43:02 <tobiasBora> I'd like to know, in this library:
17:43:04 <tobiasBora> https://hackage.haskell.org/package/parallel-io-0.3.3/docs/Control-Concurrent-ParallelIO-Local.html
17:44:06 <tobiasBora> if I compile with -thread, run it with +RTS -N4, but put  withPool 1000, will I have indeed 1000 threads shared on 4 cores?
17:47:07 <ertes> tobiasBora: most likely it will create 1000 *haskell threads*
17:47:14 <ertes> those don't correspond directly to OS threads
17:47:20 <tobiasBora> ertes: the lightweight efficient threads right
17:47:27 <ertes> yes
17:47:46 <ertes> but if you give it 4 capabilities, then it will most likely use 4-5 OS threads
17:47:55 <ertes> (might be 5, if you have FFI workload)
17:48:31 <tobiasBora> so they are supposed to be better than OS threads if I use in addition the -N option, it's multicore, so OS threads are useless right?
17:50:11 <Jinxit> is it possible to tell earley to grab *all* occurances matching a pattern in a row? so "aa" can't be split into ["a", "a"] and ["aa"]
18:06:57 <ertes> tobiasBora: no
18:07:47 <ertes> tobiasBora: haskell threads are mapped to OS threads, the idea being that you can use threads as an *abstraction* (e.g. having a bunch of threads for each client) without the abstraction ruining your performance
18:08:24 <tobiasBora> Yes ok
18:08:30 <tobiasBora> Thank you7
18:08:44 <ertes> example: you create 100 haskell threads, each doing a blocking read on a socket, and you run your program with 4 OS threads
18:09:19 <Sornaensis> does that differ from using say pthreads in C++
18:09:21 <Sornaensis> ..?
18:09:21 <ertes> then what your program will actually do is 4 OS threads, each doing an epoll on 25 sockets
18:09:35 <ertes> yes, of course
18:09:54 <ertes> with pthreads you will have to do this epoll stuff yourself
18:10:37 <tobiasBora> ok thank you
18:10:45 <Sornaensis> ertes: neat
18:11:01 <tobiasBora> And another question linked with threads
18:11:19 <tobiasBora> Let's say that haskell gives 10ms by thread
18:11:50 <tobiasBora> If some threads are waiting for an answer (from internet download for example)
18:12:11 <tobiasBora> Will the process spend 10ms also on the threads that are just waiting for an answer?
18:13:01 <ertes> no, blocking is always translated into some kind of OS waiting mechanism, on linux most likely epoll
18:14:06 <ertes> as long as your thread is blocked, it doesn't run at all
18:14:11 <parsnip> ah, Aeson has stuff for NominalDiffTime, which is... "equivalent"
18:14:48 <ertes> tobiasBora: i highly recommend The Book
18:14:50 <ertes> tobiasBora: http://chimera.labs.oreilly.com/books/1230000000929/
18:15:41 <parsnip> but it won't take it as a string, i guess easiest thing to do will be to convert them after the fact, or...
18:15:42 <ertes> tobiasBora: but as a rule of thumb you can generally expect the RTS to do The Right Thing
18:15:47 <parsnip> try making my own instance
18:19:54 <Conjecture> What are those ticks marks used for? `
18:22:04 <glguy> Conjecture: backticks allow you to turn a variable or constructor into an operator
18:22:20 <glguy> x `f` y    is    f x y
18:23:33 <glguy> Going the other way you can surround an operator symbol in ()s to use it as a normal identifier (not infix)
18:23:40 <glguy> x + y     is     (+) x y
18:23:54 <Conjecture> werid
18:23:56 <Conjecture> weird*
18:25:29 <glguy> That can be useful in cases like: f (+) (-)   -- supposing you wanted to apply f to the addition and subtraction functions
18:26:28 <Conjecture> For some reason this reminds me of Lojban
18:26:50 <Conjecture> f 1 2 3 4 5
18:26:57 <Conjecture> 1 `f` 2 3 4 5
18:27:22 <phz_> hey, I’m looking for a way to subtract two dates and have a Date back so that I can see how much days, months and so on are between the dates
18:27:28 <phz_> is there something like that available?
18:27:52 <phz_> or I need something that exposes a system date?
18:28:03 <glguy> Conjecture: If you write that it means:    f 1 (2 3 4 5)
18:28:17 <glguy> note that 2 is being used as a function
18:28:38 <glguy> Instead you can write:  (1 `f` 2) 3 4 5
18:28:45 <glguy> which means   f 1 2 3 4 5
18:28:58 <Conjecture> Where all of those values are parameters?
18:29:09 <zcourts> When you use foreign import ccall "dynamic" do you still need to call freeHaskellFunPtr? The FunPtr docs says its needed for foreign import ccall "wrapper" but it's not clear to me if both "wrapper" and "dynamic" require this
18:33:36 <glguy> zcourts: dynamic wrappers don't allocate anything, there'd be nothing to free
18:34:14 <Conjecture> glguy, Sorry, I was just a little lost when you wrote (1 `f` 2) 3 4 5
18:34:59 <glguy> > let three x y z = (x,y,z) in (1 `three` 2) 3
18:35:00 <zcourts> glguy: Thanks for confirming that
18:35:01 <lambdabot>  (1,2,3)
18:35:44 <Conjecture> Thanks glguy 
18:36:30 <Sornaensis> :t (,,) 1 2 3
18:36:31 <lambdabot> (Num c, Num b, Num a) => (a, b, c)
18:39:27 <Sornaensis> :t (,) . (,)
18:39:28 <lambdabot> a -> b1 -> (b -> (a, b), b1)
18:39:37 <Sornaensis> :t (,) (,)
18:39:38 <lambdabot> b1 -> (a -> b -> (a, b), b1)
18:40:38 <Sornaensis> how does haskell define pairs
18:42:05 <Welkin> pairs?
18:42:08 <Welkin> you mean a tuple?
18:42:22 <Welkin> data Tuple a b = Tuple a b
18:42:31 <Welkin> where Tuple has special syntax using (,)
18:42:54 <Welkin> data (,) a b = (,) a b
18:44:37 <Sornaensis> Welkin: how does haskell do arbitrary tuples
18:44:46 <Sornaensis> or is there a limit
18:44:49 <Sornaensis> :t (,,,,,,,,,,,,,)
18:44:50 <parsnip> if i need a new Date for Aeson so that i can take in a string from JSON (not a number) and convert it to NominalDiffTime, will i be using Data, Type or NewType? 
18:44:50 <lambdabot> a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> (a, b, c, d, e, f, g, h, i, j, k, l, m, n)
18:44:57 <Sornaensis> :t (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,)
18:44:59 <lambdabot> a -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> q -> r -> s -> t -> u -> v -> w -> x -> y -> z -> t28 -> t29 -> t30 -> t31 -> t32 -> t33 -> t34 -> (a, b, c, d, e, f,
18:44:59 <lambdabot> g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, t28, t29, t30, t31, t32, t33, t34)
18:44:59 <glguy> Sornaensis: There's a limit
18:45:30 <ahihi> :t (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,)
18:45:31 <lambdabot> error:
18:45:31 <lambdabot>     A 63-tuple is too large for GHC
18:45:31 <lambdabot>       (max size is 62)
18:45:40 <Sornaensis> so tuples are magic syntax?
18:45:44 <glguy> Sornaensis: The report requires at least 15-tuples, GHC supports up to 62-tuples
18:45:59 <glguy> Tuple syntax is baked into the language
18:46:17 <Sornaensis> is there a file that defines (,) as a constructor
18:47:01 <Conjecture> On another note, how would I make a mutable list?
18:47:11 <Conjecture> Containing mutable floats
18:47:23 <robkennedy> Yes. But I don't think it's particularly special, except for it's interaction with ie (~1,True~)
18:47:25 <Conjecture> I should say, a list containing mutable floats
18:47:48 <Sornaensis> ..mutable list?
18:47:54 <robkennedy> A non mutable list containing mutable floats is probably just a lost
18:48:32 <Sornaensis> there are several monads that allow ''mutable'' lists
18:48:41 <Sornaensis> or mutable references to lists
18:50:07 <Conjecture> My goal for program number two is: load image (with a library), apply a DCT transform to the samples, add that up to zero and divide by (highest value / 255) and save that to an image
18:51:35 <Conjecture> Thanks Sornaensis 
19:26:20 <parsnip> Aeson takes Number to UTCTime, but i need to take Text to UTCTime. i have a function that will do it, but i'm not sure how i can write a new instance of FromJSON and parseJSON. can i use newtype, type, data? 
19:28:10 <parsnip> getDate :: T.Text -> UTCTime; getDate t = posixSecondsToUTCTime . fromIntegral . go . decimal $ t where go (Right (n, _)) = n
19:31:51 <Jinxit> is there a `foo` so that `foo <$> "a" <*> "b"` returns `["a", "b"]`? i feel like i'm missing something simple here
19:33:19 <muesli4> Jinxit: What do you mean by "returns"? In the sense of "pure"? Because if you mean equals then no.
19:34:00 <Jinxit> in the sense of pure i think
19:34:22 <Jinxit> i'm not sure tbh
19:36:07 <muesli4> Jinxit: Well in the sense of "pure" choose foo a b = [a, b], but I don't think that is what you meant.
19:41:48 <Jinxit> i'm using earley to parse, so let's say i have `some token 'a'` (:: Prod r e t [t], where Prod is Applicative r e t) and `some token 'b'`. i want to run these two in sequence and put the result of both in a list, in order
19:41:51 <Jinxit> muesli4: ^
19:44:05 <muesli4> Jinxit: I don't know that lib, but what's the issue with ['a', 'b'] <* (token 'a' *> token 'b') ?
19:46:05 <Jinxit> that doesn't typecheck
19:47:29 <muesli4> Jinxit: works perfectly fine for a generic applicative
19:50:23 <Jinxit> oh i see what you're doing now, but that's not what i want, i want the outputs of the `token x` functions
19:50:30 <Jinxit> this just discards them and returns "ab"
19:50:52 <Jinxit> i probably typed that wrong
19:52:05 <muesli4> Jinxit: Then just use (\x y -> [x, y]) <$> tokenX <*> tokenY
19:52:45 <Jinxit> no way to do it without explicitly typing x, y, z, w, etc?
19:52:48 <Jinxit> if there's more than two
19:53:13 <glguy> sequence
19:53:30 <glguy> or sequenceA to avoid the Monad constraint
19:53:42 <glguy> sequenceA [tokenX, tokenY], for example
19:57:58 <Nolrai> Does anyone have an idea why vi's syntax highLighter for haskell would color "if", "else", and "then"  a different color then all other keywords?
19:58:19 <Nolrai> Or where I should ask?
20:00:53 <Jinxit> glguy: thanks, exactly what i was looking for, but sadly not what i needed in the end :p
20:01:03 <glguy> Nolrai: because it the syntax highlighting file is defined that way
20:01:42 <Nolrai> Right..let me find that. Been a while since I messed with my vi.
20:03:33 <Nolrai> (I wonder if I can get atom working on windows..last time I tried things kept breaking.)
20:13:11 <parsnip> Nolrai: same color as `where` ? works this way on emacs too. 
20:14:05 <parsnip> same color as strings here too
20:14:19 <Nolrai> 'where' is the normal keyword color on mine.
20:14:37 <Nolrai> Just need to find that syntax file.
20:15:59 <parsnip> Nolrai: can you install ranger? maybe with cygwin. 
20:16:24 <Nolrai> What's ranger?
20:17:19 <parsnip> a file explorer that helps browse through directories pretty fast, hjkl keys
20:18:05 <systadmin> lol, Vim-style file explorer
20:19:17 <parsnip> it's probably in ~/.vim/.../haskell.syntax or something
20:19:24 <parsnip> fsvo ~ on Windows
20:41:35 <spatial> fast-logger for logging. Are there examples ?
20:50:17 <spatial> Didn't find it in fast-logger git.
20:53:18 <Nolrai> I am on this weird fake linux on windows so finding the right file can be weird. But it lets me use something that feels like the linux comand line so I am happy.
21:06:07 <adlaistevenson> noraesae: cygwin?
21:10:45 <dmwit> Nolrai: `locate syntax/haskell` finds the appropriate file (and only a few others) on my machine.
21:18:37 <spatial> What is the simplest file logging utility ?
21:19:32 <dmwit> What is file logging?
21:20:25 <dmwit> Never mind. I'm pretty sure I won't know the answer even after you clarify. =P
21:26:18 <spatial> Logging to a log file. 
21:27:25 <spatial> Do haskell programmers step through the code or write log to file to debug ?
21:28:14 <ertes> spatial: log to stderr
21:29:13 <spatial> trace etc.are not useful in this case. It is a Machine Learning problem. Runs for a long time.
21:29:21 <glguy> Make sure you replant after you log
21:29:36 <glguy> clear cutting isn't good for anyone
21:29:39 <spatial> Sure :-)
21:30:41 <ertes> spatial: you will probably need logging as part of the actual application as well
21:30:49 <ertes> not just for debugging
21:32:06 <ertes> abstract the learning algorithm to support logging
21:32:20 <ertes> before: learn :: Context -> Samples -> Model
21:32:40 <ertes> after:  learn :: (Monad m) => Logger m -> Context -> Samples -> m Model
21:33:18 <spatial> Learning Haskell. So logging isn't as simple as I thought.
21:33:35 <ertes> where: type Logger m = String -> m ()
21:34:14 <dmwit> later:  learn :: LearnArgs m -> m Model
21:34:30 <spatial> Can't replace printf with a API call ?
21:34:53 <ertes> spatial: which part trips you up?
21:35:31 <spatial> My code is finished and seems to work. Except that I need to stop scrolling printfs and write to a file.
21:35:42 <dmwit> :t hPrintf
21:35:43 <lambdabot> HPrintfType r => GHC.IO.Handle.Types.Handle -> String -> r
21:35:47 <ertes> spatial: ./myprogram > file
21:35:57 <ertes> or in the case of stderr:  ./myprogram 2> file
21:36:18 <dmwit> There can certainly be a reasonable difference between a logging stream and stdout or stderr.
21:36:33 <dmwit> Heck, lots of programs want multiple logging streams.
21:36:52 <ertes> yeah, and i have no idea why
21:36:57 <dmwit> I think the impulse to do it right is admirable. I just don't know much about the library ecosystem for this stuff.
21:37:25 <dmwit> I do know printf should be easy to swap out for hPrintf, though. =)
21:37:50 <pharaun> ls
21:37:58 <pharaun> wrong terminal :O
21:38:01 <spatial>  Let me try stderr
21:38:17 <dmwit> spatial: Why not use a file?
21:38:35 <ertes> because stderr can be redirected to a file
21:39:07 <dmwit> stderr for logging is not the usual convention.
21:39:16 <dmwit> stderr is for errors.
21:39:28 <ertes> the usual convention is to use syslog, and that's a terrible convention
21:39:31 <ertes> log to stderr!
21:40:31 <spatial> ertex: ./myprogram > file  ??
21:40:38 <spatial> Redirect to file.
21:41:04 <dmwit> `>file` redirects stdout to a file. `2>file` redirects stderr to a file.
21:41:23 <dmwit> `3>file` redirects file handle 3 to a file. I bet you can guess the pattern from there. =P
21:42:08 <spatial> I mean I know that :-) Thought log frameworks are common in Haskell.
21:42:20 <dmwit> Yes, I think there are several on Hackage.
21:42:30 <spatial> Seems Haskell just works. No need for debugging or logging.
21:42:55 <ertes> why is writing to stderr not logging to you?
21:42:55 <dmwit> Hm. Haskell is nice, and prevents a lot of problems early. But I can personally attest that it is still common to write bugs in Haskell programs.
21:43:44 <ertes> my "logging framework" involves passing a (String -> IO ()) around
21:43:52 <spatial> ertex: Don't know about Haskell. But logging is different.
21:44:04 <ertes> and that function is (hPutStrLn stderr) most of the time
21:44:35 <ertes> myAction log = do …; log "message"; …; log "message 2"; …
21:44:43 <ertes> sometimes with logging levels
21:44:50 <ertes> but most of the time i don't need them
21:45:51 <spatial> I wrote a logger framework for a 24x7 scheduling/File transfer system processing MasterCard/Visa transactions. Java though.
21:46:28 <dmwit> I am so confused about your goals now. You've asked for logging suggestions. We've given several to choose from. What more are you hoping for? Why do you persist in demanding that Haskell does not have logging?
21:46:33 <spatial> They are used for forensic evidence.
21:47:25 <ertes> spatial: i can understand that you would need that in java, because java doesn't support abstraction
21:47:34 <dmwit> what
21:47:39 <spatial> dmwit: I am just learning Haskell. Know that there are framework like fast-logger.
21:47:51 <ertes> but in haskell a "logging framework" is a matter of passing a function around
21:48:50 <ertes> dmwit: (i'm being sarcastic, but indeed java still lacks proper support for functions)
21:50:14 <spatial> I run in Spacemacs. So I thought it isn't hard to include log calls.
21:50:55 <ertes> spatial: how is your editor related to this?  please explain what you mean by "logging framework"
21:51:46 <spatial> ertes: It isn't. I failed to understand that the signatures change when you log calls. Right ?
21:52:05 <ertes> spatial: well, logging usually involves effects
21:52:29 <dmwit> ertes: I checked out of the conversation. It seems like at least one party is not acting in good faith.
21:53:01 <spatial> Yes. That was the confusion. Couldn't change them. As my Haskell knowledge isn't up to the mark.
21:53:41 <ertes> spatial: let's say that your current function signature is this:  learn :: Context -> Samples -> Model
21:54:06 <ertes> it takes a context (e.g. configuration), samples and returns a trained model
21:54:17 <ertes> spatial: good so far?
21:55:55 <spatial> Ok This example http://lpaste.net/353936. Not really functional. Seems to go on infinitely. So I wanted logging.
21:56:32 <ertes> ok, i'll just take your example
21:57:12 <ertes> now logging could be as simple as using hPutStrLn, e.g. you could write this on line 3:  hPutStrLn stderr "My message"
21:57:59 <spatial> And then redirect to file.
21:58:24 <ertes> yes, exactly…  BTW, i see a few printfs in there…  printf writes to stdout, which you can redirect as well
21:59:06 <ertes> (but you should rather use stdout for results, not for diagnostics)
21:59:22 <spatial> Right. Let me check.
22:02:22 <ertes> spatial: however, this approach is not very flexible, because you couldn't disable logging, for example, or control the amount of logging that you want
22:02:34 <ertes> or even log to multiple places
22:02:51 <spatial> But that was my question.
22:03:08 <ertes> that's why you may want to abstract over the logging action
22:03:33 <ertes> current signature:  gameplan :: IOArray Int Double -> BoardState -> BoardState -> IO (IOArray Int Double, BoardState, Double)
22:04:04 <ertes> new signature:  gameplan :: (String -> IO ()) -> IOArray Int Double -> BoardState -> BoardState -> IO (IOArray Int Double, BoardState, Double)
22:04:23 <ertes> now gameplan takes a function as its first argument that does the actual logging
22:04:23 <spatial> Ok
22:04:48 <ertes> gameplan log a state newstate = do …; log "message"; …
22:04:50 <ertes> instead of:
22:05:04 <ertes> gameplan a state newstate = do …; putStrLn "message"; …
22:05:08 <ertes> you can still use printf
22:05:22 <ertes> gameplan log a state newstate = do …; log (printf "format" x y z); …
22:06:08 <spatial> It is a side-effect one introduces.
22:06:57 <spatial> And that log function is from where ? Framework.
22:07:03 <dmwit> nah
22:07:10 <dmwit> just `hPutStrLn myFileHandle`
22:07:13 <ertes> when you apply 'gameplan' you hand it a logging action
22:07:15 <dmwit> or whatever
22:07:27 <ertes> for example previously you said:  gameplan x y z
22:07:47 <ertes> now you say (gameplan putStrLn x y z), and it will log to stdout
22:07:58 <ertes> you say (gameplan (hPutStrLn stderr) x y z), and it will log to stderr
22:08:05 <ertes> you say (gameplan (hPutStrLn h) x y z), and it will log to file handle h
22:08:19 <ertes> you say (gameplan (\_ -> pure ()) x y z), and it will not log at all
22:08:27 <spatial> Ah! Makes sense
22:13:14 <dmwit> I guess that was enough Haskell for him for today. =P
22:13:46 <ertes> i may have been a bit too harsh at the beginning =)
22:17:17 <ertes> i'm highly opinionated when it comes to these things, but i can explain: there is a bigger picture involved, a masterplan if you will, a goal worth fighting for
22:18:29 <ertes> defeat the disease that is known as systemd, destroy syslog along the way, bring back solid design, but with modern knowledge =)
22:18:59 <adlaistevenson> ertes: Build a wall around SystemD and PulseAudio, jail Pottering
22:19:23 <adlaistevenson> And put Rob Pike in charge of restoring UNIX
22:19:45 <dmwit> I like pulse. It seems like it's the first audio system that actually got the right idea.
22:19:57 <ertes> i don't mind pulse that much
22:20:11 <Sornaensis> what's wrong with systemDick
22:20:19 <dmwit> I don't know enough about init systems to have an opinion on systemd other than "it's worked ok for me" and "the documentation was good enough to help me out when it broke".
22:20:34 <dmwit> But pulse I strongly support.
22:20:34 <Sornaensis> systemD unit files are a godsend
22:21:24 <ertes> dmwit: it's a mess of monolithic design and global mutable state, and it really wants your system hierarchy to be as flat as possible
22:21:33 <ertes> no supervision trees, no logging trees, etc.
22:24:01 <adlaistevenson> Torvalds must hate SystemD
22:24:47 <adlaistevenson> Torvalds at his best: https://lkml.org/lkml/2012/12/23/75
22:25:29 <ertes> at the same time it's completely unpredictable what will be the next thing that systemd wants to devour…  a while ago i noticed that rsyslogd stopped writing logs, which completely baffled me, until i found it that systemd had taken control over the syslog socket and prevented all other programs from getting log messages by default
22:25:40 <ertes> because it really wants to sell its "journald" system
22:28:25 <adlaistevenson> ertes: Eww
22:28:27 <Myrl-saki> http://ix.io/pgt
22:28:40 <Myrl-saki> How do I make that not consume 10GB of my RAM?
22:29:09 <rotaerk> remove some RAM
22:29:13 <rotaerk> I mean ..
22:29:16 <Myrl-saki> rotaerk: Makes sense.
22:29:43 <ertes> Myrl-saki: make 'fibs' local to 'isFib'
22:30:00 <ertes> isFib = flip elem fibs where fibs = …
22:30:01 <adlaistevenson> rotaerk: Or use ulimit
22:30:35 <Myrl-saki> ertes: Didn't work.
22:30:39 <Myrl-saki> With -O3.
22:30:59 <dmwit> ertes: may also need to eta expand
22:31:02 <Myrl-saki> And -O2, just for safe measure.
22:31:09 <dmwit> GHC *loves* floating CAFs
22:31:14 <ertes> yeah, indeed
22:31:22 <ertes> Myrl-saki: make 'fibs' take a start value
22:31:33 <ertes> fibs x0 = x0 : 1 : …
22:31:41 <dmwit> But like... we're only going up to 10^3 = 1000 here.
22:31:48 <dmwit> This shouldn't take 10GB of RAM even if everything stays in memory.
22:31:52 <dmwit> Oh!
22:31:53 <dmwit> I know.
22:31:55 <ertes> dmwit: the numbers grow quickly
22:32:01 <dmwit> no
22:32:06 <ertes> although 10 GB is still a lot
22:32:13 <dmwit> That's not the problem.
22:32:19 <dmwit> The problem is `elem` is totally the wrong function to use. =)
22:32:26 <Myrl-saki> dmwit: I mean, sure.
22:32:39 <ertes> dmwit: is it?  it consumes strictly
22:32:41 <dmwit> Myrl-saki: Use this instead: http://hackage.haskell.org/package/data-ordlist-0.4.7.0/docs/Data-List-Ordered.html#v:member
22:32:44 <Myrl-saki> dmwit: But I'd rather not spend more than 1 minute on something that I found on a book. :P
22:32:46 <Myrl-saki> Ohhh
22:32:50 <dmwit> ertes: It will never return False!
22:33:00 <Myrl-saki> Oh wait
22:33:03 <Myrl-saki> You're right. .-.
22:33:25 <dmwit> Myrl-saki: (Of course, even better would be `length . takeWhile (<10^x) $ fibs` and forget this `isFib` thing entirely.
22:33:28 <dmwit> )
22:33:46 <ertes> oh, of course
22:34:11 <ertes> Myrl-saki: you still need to make fibs parametric though, otherwise it will be shared
22:34:23 <dmwit> Who cares. We're only sharing like a dozen Integers. =P
22:34:25 <ertes> sharing means that the list will actually be computed
22:34:33 <Myrl-saki> Might increase this later.
22:34:41 <Myrl-saki> http://hackage.haskell.org/package/data-ordlist-0.4.7.0/docs/Data-List-Ordered.html#v:member
22:34:42 <ertes> dmwit: that's *much* slower than recomputing them, even at this size
22:34:42 <Myrl-saki> Whoops
22:34:55 <Myrl-saki> I don't have nvim nor vim.
22:35:06 <dmwit> > let fibs = 0:1:zipWith (+) fibs (tail fibs) in length . takeWhile (<10^3) $ fibs
22:35:08 <lambdabot>  17
22:35:55 <dmwit> ertes: Not sure bare-metal performance is really a need for this toy...
22:36:12 <Myrl-saki> http://hackage.haskell.org/package/data-ordlist-0.4.7.0/docs/Data-List-Ordered.html#v:member
22:36:14 <Myrl-saki> FFS
22:36:19 <Myrl-saki> isFib x = (== x) . head . dropWhile (<x) $ fibs
22:36:36 <dmwit> Myrl-saki: Yes, that looks more plausible.
22:36:50 <dmwit> And is roughly what the proposed `member` does, as well.
22:36:55 <Myrl-saki> dmwit: Mhm.
22:37:49 <dmwit> Myrl-saki: But why `filter isFib [1..10^x]` instead of `takeWhile (<=10^x) fibs`?
22:38:31 <dmwit> I guess you get an extra `0` and `1` at the beginning -- is that such a bad thing? It's easy enough to fix...
22:39:00 <Myrl-saki> I honestly didn't think of that. <.<
22:39:50 <ertes> dmwit: because most protoductions started as toys =)
22:40:08 <ertes> look at PHP
22:40:43 * dmwit looks forward to the grand deployment of Web 2.0 Fibonacci Server
22:40:54 <Myrl-saki> ...I'm honestly quite surprised.
22:41:03 <Myrl-saki> It takes less than a second even with 10^7.
22:41:14 <Myrl-saki> Heck, 10^9.
22:41:38 <Myrl-saki> main = print $ [length $ takeWhile (<= 10^x) fibs | x <- [1..12]]
22:41:43 <ertes> Myrl-saki: i would expect it to start getting slow at around 2^25
22:41:50 <ertes> perhaps 2^30
22:42:01 <Myrl-saki> I'm starting to think that maybe my code is wrong.
22:42:19 <Myrl-saki> But nope, it's not.
22:42:20 <dmwit> Nah. Computers are just really, really good at arithmetic.
22:42:43 <Myrl-saki> Oh wait.
22:42:46 <Myrl-saki> dmwit: Makes sense.
22:42:52 <mrjake> I'm running into the classic ambiguous type variable problem, but I'm not sure how to fix it.   (result, _, _) <- runMultiRWST HNil HNil  ...  HNil is the empty constructor for Data.HList.HList  Am I supposed to add a type signature or something?
22:42:59 <Myrl-saki> dmwit: Branch prediction loves these kind of stuff.
22:43:14 <Myrl-saki> Yep, even 10^20. TIL.
22:43:21 <dmwit> > let fibs = 0:1:zipWith (+) fibs (tail fibs) :: [Integer] in fibs !! (2^16)
22:43:23 <lambdabot>  7319921446029055283263991581259845453895242583621989356847594492012862286674...
22:43:36 <dmwit> > let fibs = 0:1:zipWith (+) fibs (tail fibs) :: [Integer] in length (show (fibs !! (2^16)))
22:43:38 <lambdabot>  13696
22:43:45 <Myrl-saki> Oh cool. Another reason. fibonacci numbers grow quickly.
22:43:49 <ertes> Myrl-saki: you can probably ramp it up to 10^100
22:43:52 <dmwit> That's 10^13696, and fits in \bot's time window. So... yeah.
22:44:29 <dmwit> mrjake: Yes, you are supposed to add a type signature. Which type signature you need is hard to say without further details.
22:44:43 <Myrl-saki> Now I'm interested in `fibs !! (fibs !! x)`
22:44:56 <mrjake> dmwit: Ok.  I'll give it a try.
22:45:15 <Myrl-saki> ertes: Works FastEnough even for 10^1000.
22:45:38 <Myrl-saki> And 10^10000 takes about 5 seconds.
22:46:14 <ertes> Myrl-saki: at around 2^21 elements you start seeing numbers with millions of binary digits, so at that point each number will need megabytes of RAM
22:46:42 <ertes> that's 10^430000
22:47:32 <Myrl-saki> ertes: Trying now.
22:47:58 <ertes> depending on your architecture that's the point when your caches become too small and you will see a sudden massive increase in computation time (most of which is waiting for memory transfers)
22:48:12 <dmwit> amazing what happens when you switch away from on O(\infty) algorithm
22:48:16 <Myrl-saki> Maybe I should have made this in parallel?
22:48:33 <dmwit> That depends dearly on your goals.
22:48:53 <Myrl-saki> But that may also mean more cache problems.
22:49:15 <adlaistevenson> Is fibonacci associative?
22:49:16 <Myrl-saki> ertes: For a point of reference, I'm trying out 10^100000.
22:49:58 <dmwit> adlaistevenson: Fibonacci is unary. So I don't think the question is even well-typed.
22:50:46 <Myrl-saki> ./Nyeh  0.95s user 0.00s system 99% cpu 0.952 total
22:51:00 <Myrl-saki> ./Nyeh  3.82s user 0.04s system 99% cpu 3.869 total
22:51:04 <Myrl-saki> Exponential?
22:51:19 <Myrl-saki> 300k should be about 16.
22:51:31 <Myrl-saki> Err..
22:51:42 <Myrl-saki> Ah, 2^x/100k.
22:51:48 <Myrl-saki> ./Nyeh  7.83s user 0.12s system 99% cpu 7.964 total
22:53:12 <Myrl-saki> Well, something weird happened. 400k gets 15s and 500k gets 24s.
22:54:13 <Myrl-saki> And 600k gets 36s.
22:54:36 <Myrl-saki> What's interesting is that it didn't notably increase in memory consumption.
22:55:15 <dmwit> Yes, I expect it is very friendly to the GC.
22:55:17 * geekosaur wonders what happens with +RTS +B
22:55:23 <geekosaur> heh
22:55:24 <adlaistevenson> dmwit: How to do Fibonacci with a cache, so we can take closest precalculated value
22:55:48 <Myrl-saki> geekosaur: How do I enable those flags?
22:55:52 <Myrl-saki> And what's +B?
22:55:53 <dmwit> geekosaur: Let's do the fork in the garbage disposal!
22:56:00 <geekosaur> beep on gc
22:56:05 <dmwit> ding ding ding da ding ding da ding ding
22:56:25 <kadoban> I had no idea that was an option, that sound both cool and horrible
22:56:29 <geekosaur> and you probably need -rtsopts
22:56:29 <Myrl-saki> lmao
22:56:30 <kadoban> sounds*
22:56:55 * geekosaur remembers snoop -a, speaking of cool and horrible
22:57:09 <geekosaur> (play network packets through the speaker)
22:58:07 <Myrl-saki> I apparently don't have +B
22:58:10 <Myrl-saki> :(
22:58:36 <geekosaur> compile with -rtsopts?
22:58:39 <dmwit> Myrl-saki: You would compile your program like `ghc -rtsopts -O2 foo.hs` and run like `./foo +RTS +B`
22:58:41 <adlaistevenson> dmwit: ?
22:58:53 <geekosaur> you get only a small subset of rts options otherwise
22:59:02 <Myrl-saki> dmwit: Mhm.
22:59:05 <Myrl-saki> Nyeh: unexpected RTS argument: +B
22:59:08 <dmwit> adlaistevenson: Sounds like a fun puzzle. Let me know what you think up.
22:59:21 <geekosaur> ih I think I typoed
22:59:22 <adlaistevenson> Okay!
22:59:22 <geekosaur> -B
22:59:29 <adlaistevenson> :-)
22:59:32 <Myrl-saki> Glasgow Haskell Compiler, Version 8.0.1, stage 2 booted by GHC version 7.10.3
22:59:46 <geekosaur> rts opts don't do +, except for +RTS itself
22:59:51 <Myrl-saki> I think I need to turn on audible beep.
23:00:19 <Myrl-saki> Okay.
23:00:25 <Myrl-saki> What terminal supports audible beep?
23:00:28 <geekosaur> oh, you have vbell? so instead of fork in the garbage disposal, it's epilepsy?
23:00:38 <Myrl-saki> geekosaur: lmao
23:00:43 <Myrl-saki> geekosaur: I don't use vbell either.
23:00:49 <geekosaur> many of them do but you have to tweak settings
23:01:13 <geekosaur> for VTE-based terminals right click and look for something like "edit profile" or "profile preferences"
23:02:17 <Myrl-saki> urxvt has an .Xresources for it. Trying it out now.
23:02:19 <geekosaur> for xterm it's control-middle click and vbell on/off is somewhere in the middle section
23:02:47 <geekosaur> control-middleclick for urxvt as well
23:02:51 <geekosaur> visualBell
23:02:57 <Myrl-saki> holy cow
23:03:06 <Myrl-saki> I did not know about Control middle click
23:03:56 <Myrl-saki> Now it looks like I'm using screen the whole time.
23:04:21 <Myrl-saki> Well... that was boring.
23:04:28 <Myrl-saki> It was just constant fg.
23:04:37 <Myrl-saki> Expected a disco.
23:10:39 <adlaistevenson> Languages with compilers that do type checking make me happy.
23:11:40 <Myrl-saki> Now that that's done, back to real world stuff.
23:19:54 <ertes> Myrl-saki: if you're interested, i've written a benchmark for fib computation
23:19:55 <ertes> https://gist.github.com/esoeylemez/6e7c8214e0306b3653ca3d3a1e37104a
23:20:28 <ertes> it computed fibs continuously and displays how long it takes and how big the numbers are getting
23:20:37 <ertes> needs the 'clock' library
23:21:34 <Myrl-saki> A little side question. If you using reflex-dom, is there a way to change the "pwd"(in the webpage sense), but without actually changing the webpage? Kind of like doing `https://example.com/a -> https://example.com#a`
23:21:50 <Myrl-saki> If you're*
23:22:16 <Myrl-saki> If I understand correctly, youtube does something like that.
23:23:10 <Cale> Myrl-saki: You'll want to do an FFI import of something, I don't believe we have anything in reflex-dom itself which manipulates the browser location.
23:24:07 <Myrl-saki> Cale: Ah. Maybe I should just use one web page but have it all under `?location=...`?
23:24:19 <Myrl-saki> Oh wait, no, that still wouldn't work.
23:24:31 <Myrl-saki> I think the # works, though.
23:25:45 <Cale> We use ? arguments for some routing in some of our apps.
23:26:22 <Myrl-saki> Cale: Can you explain the details?
23:26:24 <cocreature> Myrl-saki: fwiw the js API you’re looking for is probably history.pushState
23:28:16 <Myrl-saki> cocreature: Not only for history, but also for link sharing.
23:28:46 <Cale> importJS Unsafe "window['location']['search']" "getWindowLocationSearch" [t| forall x m. MonadJS x m => m T.Text |]
23:28:47 <cocreature> Myrl-saki: I’m not sure what you mean by that. history.pushState changes the url displayed in your browser
23:28:50 <Cale> importJS Unsafe "window['history']['pushState'](1, null, $1)" "historyPushState" [t| forall x m. MonadJS x m => Text -> m () |]
23:30:13 <Cale> That uses importJS from Foreign.Javascript.TH which you should find in reflex-dom
23:30:53 <Myrl-saki> cocreature: I guess that was too layman. Literally what it means. Link(or URL) and sharing it with someone else by copying and pasting.
23:31:51 <cocreature> Myrl-saki: you can just copy the url that your browser shows no? or do you want to add it to the clipboard via js. that is a different problem
23:32:09 <Myrl-saki> cocreature: Yep, my mistake. I didn't realize that it changes the display URL.
23:32:24 <Myrl-saki> I'll try it out now. Thanks.
