00:02:33 <dmwit> jchia_3: Type inference for higher-rank types is undecidable, which tells me that "no, there is no easy way to tell whether GHC needs help from type annotation", and possibly no way at all, easy or hard.
00:04:54 <dysfun> why is it undecidable?
00:08:52 <dmwit> dysfun: http://www.sciencedirect.com/science/article/pii/S0168007298000475 appears to be the canonical reference
00:09:29 <cocreature> interestingly it is decidable for Rank2Types
00:09:56 <cocreature> which is why we had both extensions in GHC for a while (we still have Rank2Types but the name is a lie. it just enables RankNTypes)
00:11:15 <dysfun> dmwit: thanks
00:22:13 <javjarfer> Hi, edwardk I have been thinking in what you said days ago about frp performance scaling
00:22:42 <javjarfer> Do you think it's​ a problem with the model itself, or with current implementations?
00:40:42 <javjarfer> Could anyone correct me? Is the MonadMoment the responsible of building the event graph under the hood while using the combinators in reactive banana?
01:30:00 <NickHu> I'm using haskell persistent - I know with selectList you can provide a SelectOpt of Asc SomeField, but what if I want to order by ascending of one field, and then by another field also to break ties?
01:41:50 <mauke> https://68.media.tumblr.com/4070d7fb14ec7eb5ba122227980431ba/tumblr_inline_onfnngKJao1t88c9m_1280.png
01:43:53 <cocreature> NickHu: this is only a guess but have you tried providing multiple Asc options?
01:46:21 <Myrl-saki> Is there no Indexed Monad Fixedpoint?
01:46:38 <Myrl-saki> Oh, there is.
01:54:56 <NickHu> cocreature: oh of course, yes
01:55:37 <NickHu> Is there a way to ensure the results are unique with respect to a certain column during the select? I could nubBy the results, but that feels like it would be slow
02:33:11 <athan> why isn't there a `dumpTChan :: TChan a -> STM [a]`?
02:34:14 <athan> it would just be `tryReadTChan` repeatidly until Nothing is returned
02:37:20 <srhb> athan: Ask and answered, I guess. :)
02:38:31 <Myrl-saki> lol
02:38:54 <Myrl-saki> srhb: There are a lot of auxiliary functions in libraries though.
02:39:19 <srhb> True enough
02:41:16 <systadmin> hello
02:42:20 <systadmin> I was trying to install Pandoc via stack then I ran into this error http://lpaste.net/355268
02:43:02 <srhb> systadmin: Did you try doing as it suggests?
02:43:58 <systadmin> I already have GHC installed
02:44:34 <systadmin> Oh wait, there seems to be a newer version of GHC available for me now.
02:44:45 <systadmin> Nevermind, my bad
02:44:48 <srhb> systadmin: Regardless, it details both cases. :)
02:45:04 <systadmin> heh
02:45:08 <athan> srhb: yeah I just thought it would be a common enough need - to dump a TChan, or to empty one explicitly
02:45:20 <athan> but I guess the intended use case is more granular
02:53:28 <ADG> I am having problem with $ notation, how should I write this: https://hastebin.com/ekukosoyec.hs
03:06:45 <jchia_1> When writing comments or haddock documentation for some function, is there a convention to distinguish between the two different meanings of the word 'return', i.e. the value a function returns and monadic return?
03:08:32 <srhb> jchia_1: 'return' is the function, return is the word.
03:09:18 <jchia_1> srhb: So use "`return`" in the comments/docs to indicate monadic return?
03:09:50 <srhb> Apostrophe, iirc, but yes. 
03:10:49 <srhb> jchia_1: Other than that, if you're being wordy, you can talk about the value of foo x y z rather than its "return value"
03:11:12 <srhb> return value is somewhat loaded terminology anyway, and "value" is fully sufficient.
03:11:16 <jchia_1> ADG: randomR takes as first argument `(a, a)`, not `a`.
03:11:40 <jchia_1> OK
03:11:50 <srhb> Result might also be a useful word.
03:12:21 <srhb> Now exchange 'return' for 'pure' and you'll never have to use the word "return" in either sense! :-)
03:13:00 <jchia_1> srhb: Actually, I use pure instead of return in my code. I think I never have to use return.
03:13:21 <srhb> jchia_1: Correct, you don't, since the AMP.
03:13:47 <jchia_1> However pure is not a verb, so it's weird to say "'pure's blah"
03:14:21 <srhb> Yes, but "returning" in that sense tends to really mess with newcomers.
03:15:05 <Myrl-saki> I still prefer return. :(
03:15:20 <srhb> I would if it didn't have all those strings attached. :-)
03:15:39 <Myrl-saki> So... do you all use return?
03:16:21 <jchia_1> I'm a newcomer and I prefer to avoid the historical baggage involving synonyms, so I use pure.
03:17:14 <srhb> I use pure because I want to explicitly avoid the confusion arising from the "return" of historical languages.
03:17:50 <jchia_1> For the same reason, I use traverse instead of mapM
03:18:24 <Myrl-saki> :t mapM
03:18:26 <lambdabot> (Monad m, Traversable t) => (a -> m b) -> t a -> m (t b)
03:18:32 <Myrl-saki> What's wrong with mapM?
03:18:40 <jchia_1> traverse is more general
03:18:46 <Myrl-saki> :t traverse
03:18:47 <jchia_1> and it means the same thing
03:18:48 <lambdabot> (Applicative f, Traversable t) => (a -> f b) -> t a -> f (t b)
03:18:53 <Myrl-saki> Oh.
03:19:01 <Myrl-saki> :t for
03:19:02 <lambdabot> (Applicative f, Traversable t) => t a -> (a -> f b) -> f (t b)
03:40:11 <Gurkenglas> @let type LensGurk = forall f. Functor f => LensLike f -- why doesnt this work?
03:40:13 <lambdabot>  .L.hs:183:41: error:
03:40:13 <lambdabot>      • Expecting four more arguments to ‘LensLike f’
03:40:13 <lambdabot>        Expected a type, but ‘LensLike f’ has kind ‘* -> * -> * -> * -> *’
03:47:27 <phadej> Gurkenglas: because type synonyms have to be fully applied, as GHC tells you
03:49:14 <Gurkenglas> Why is that restriction necessary?
04:05:22 <lyxia> http://stackoverflow.com/questions/4922560/why-doesnt-typesynonyminstances-allow-partially-applied-type-synonyms-to-be-use
04:06:39 <Myrl-saki> How ot do nested pattern matching?
04:07:02 <Myrl-saki> nested record pattern matching*
04:09:06 <geekosaur> shouldn't it just work?
04:10:02 <Gurkenglas> lyxia, couldn't it accept that they are equal and only check once the type synonym is fully applied, as it eventually must be if it is to have impact on the runtime? For the second answer, of course e couldn't be set to a type synonym, type synonyms are not a thing to be foralled over.
04:10:24 <geekosaur> there's an extension to do that
04:14:07 <geekosaur> https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#type-synonyms
04:17:06 <lyxia> mniip also made a proposal related to this https://github.com/mniip/ghc-proposals/blob/partiallyappliedtypefamilies/proposals/0000-partially-applied-type-families.rst
04:19:05 <lyxia> I think there is something fishy about (forall f . Functor f => (... not of kind *)) but I can't quite put my finger on it.
04:29:36 <mniip> impredicative polymorphism?
04:45:19 <gri> Hi everyone
04:45:55 <gri> I’ve got a straight-forward exercise: send a http request and parse the json in the response
04:46:21 <gri> the aeson parser results Maybe [MyDataType]
04:47:00 <gri> should I choose ReaderT ConnectionConfig IO (Maybe [MyDataType] as my signature
04:47:20 <gri> or is it better (from the design viewpoint) to hide Maybe behind a MaybeT IO?
04:47:32 <gri> i.e.
04:47:43 <lyxia> It's fine to return Maybe
04:47:51 <gri> ReaderT ConnectionConfig (MaybeT IO) [MyDataType]
04:48:06 <gri> vs ReaderT ConnectionConfig IO (Maybe [MyDataType])
04:48:48 <gri> what would be a reason to introduce a layer of MaybeT IO?
04:49:03 <gri> lyxia: thanks
04:49:05 <ADG> how to generate n distinct random numbers?
04:49:08 <lyxia> MaybeT is good to compose actions monadically
04:50:11 <gri> lyxia: and it’s not the case here because…?
04:50:23 <cocreature> ADG: I don’t think there is something builtin for that. you’ll just have to generate them one by one and generate a new number if you’ve generated it before
04:50:54 <lyxia> gri: but since there are a fair couple of approaches to exceptions via monad transformers, it's better to have an API that lets users decide what to do with a Maybe result.
04:51:55 <gri> lyxia: to postpone the decision about the possible failure, so to say?
04:52:43 <ADG> I am doing: `do   gen <- getStdGen   delete (randomR (0, length xs - 1) gen) xs...`
04:54:09 <lyxia> gri: something like that. But it's also mostly a matter of personal preference.
04:54:14 <cocreature> ADG: that looks weird but I’ll need to see the complete definition to tell if it makes sense
04:54:17 <gri> ADG you can keep putting your random numbers in a set until its size is n
04:54:30 <ADG> isn't that imperitive
04:55:00 <gri> ADG, no it’s just a suggestion :)
04:55:24 <cocreature> it’s an iterative process but that’s inherent to the task
04:57:09 <ADG> take n . nub . randomRs
04:57:30 <cocreature> you can’t nub an infite list
04:57:50 <gri> and
04:57:54 <gri> nub is O(n^2)
04:58:11 <cocreature> hm maybe you can *looks at the definition*
04:58:25 <lyxia> > nub [0 ..]
04:58:28 <lambdabot>  [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,2...
04:58:30 <cocreature> yeah
04:59:05 <cocreature> then that’s not such a bad solution assuming “n” is small
05:00:42 <ADG> > take 500 . nub . randomRs (1,671) <$> cocreature getStdGen
05:00:45 <lambdabot>  error:
05:00:45 <lambdabot>      Variable not in scope: cocreature :: IO StdGen -> f g0
05:00:50 <gri> import Data.Set
05:01:26 <ADG> > import Data.Set; import System.Random; take 10 . nub . randomRs (1,30) <$> getStdGen
05:01:28 <lambdabot>  <hint>:1:1: error: parse error on input ‘import’
05:02:03 <cocreature> 500^2 might be bad depending on your application
05:02:26 <ClaudiusMaximus> if you wanted 4 distinct Ordering values you'll be out of luck whichever way you do it...
05:02:34 <gri> take n . toList . fromList randomRs
05:02:37 <gri> smth like this
05:02:55 <cocreature> ClaudiusMaximus: 4 distinct bottom values :)
06:26:28 <robertkennedy> Is there a good way to make `import Test.QuickCheck` work with `stack ghci myProject` when myProject doesn't depend on QuickCheck?
06:27:47 <cocreature> robertkennedy: try “stack build QuickCheck”, “stack ghci myProject” “:set -package QuickCheck”
06:28:41 <athan> Hey everyone. I'm trying to consider a paradigm for a concurrency scenario, where I'd need a "sparse queue" - I mean this as "a TVar stateful map of TChans" - is there a better way to do this? If I recall correctly, `T*` stm variables shouldn't be nested, or "forgotten about" due to scoping (for instance, if the map is the only place where TChan references are stored, and the element gets deleted somehow, 
06:28:42 <robertkennedy> Ah tight didn't know about that `:set` option
06:28:47 <athan> will garbage collect?), but I'm just not sure if I'll be safe. Can anyone give guidance here?
06:29:17 <athan> basically, I'm trying to make a system where a thread can be spawned, and check if it has any messages in it's queue, which may be deleted at a later time due to expiration. It's kindof finnicky
06:30:15 <MarcelineVQ> cocreature, robertkennedy: the short version of all that should be  stack ghci --package QuickCheck
06:30:51 <cocreature> MarcelineVQ: ah right. I switch to often between the various haskell build tools to remember the tool specific solutions :)
06:31:11 <robertkennedy> athan: I've used a `TVar (Map ClientName (TVar Client))` without problems before
06:32:04 <robertkennedy> Or even a `TVar (Map ClientName Client)` where the Client data type has TVar fields
06:32:38 <athan> robertkennedy: so have I, but I'm trying to ask this from a memory conservative standpoint :)
06:32:52 <athan> I just want to make sure this won't inhibit garbage collection
06:33:14 * athan isn't sure if TChans are more difficult, too
06:34:09 <robertkennedy> Sorry, in this case is your fear of things being collected too early or too late?
06:36:39 <athan> not collected at all, actually. I'm worried that the actual `x :: TChan a` is needed to be in an actual haskell expression, not some stored data (as in, somewhere inside a `TVar ...` for instance)
06:36:59 <athan> I know it will work semantically, but I'm not sure if it would be optimal operationally
06:41:50 <fryguybob> athan: I'm not quite sure what your concern is, but you can build any data structure you want with TVars or TChan.  It will have some overhead for STM.
06:42:12 <robertkennedy> Ah I see. The path I took to delete clients, which worked really well for medium numbers of connections (~100 was our usecase, might scale well), was to use `endClient` to switch a `TVar Bool` in the client, and to add another `race_` branch on our client code that watched for that to flip. You can delete from the map on either side. 
06:43:56 <robertkennedy> In Simon Marlow's book he covers this, if you haven't read it. He doesn't cover the wkRef type though, which may be a better solution 
07:00:45 <EvanR> if Reader local is bad, does that mean withReader is really bad
07:01:00 <cocreature> EvanR: how is “local” bad? I use it all the time
07:01:14 <EvanR> good question
07:01:45 <EvanR> ive heard opinions expressed but dont really understand them
07:09:51 <nshepperd_> athan: the gc is aware of the contents of mutable variables
07:22:54 <Hjulle> Is it possible to create type family instances from a fundep class? That is to say, I have "class A a b | a -> b" and want to create all corresponding instances for "type family A' a :: *".
07:27:57 <Hjulle> My most promising attempt so far, "class A' a where {type A'_b a :: *}; instance forall a b. A a b => A' a where type A'_b a = b", made the compiler complain that "b" must be bound on LHS. So, my guess is that the answer is no? :/
07:32:57 <robertkennedy> type A' a = A a (A_b a)
07:35:02 <robertkennedy> But I think you're looking for associated types, right? Why use fundeps? Unless it's in a different library
07:44:45 <Hjulle> robertkennedy: Yes, the class and instances are already defined in a different library, and I want to convert them into a type family.
07:47:57 <Hjulle> robertkennedy: I think your answer has the kind "Constraint", so there is no way that would work.
07:55:18 <lyxia> I don't think that's possible, unfortunately.
07:55:30 <Hjulle> :(
07:56:41 <Hjulle> Thanks anyways :)
07:57:48 <cocreature> might be possible with TH
08:03:53 <robertkennedy> Hjulle: you were looking to create instances = constraints right?
08:04:33 <happyfeet> hey
08:04:48 <happyfeet> how can i pass this to a string
08:04:49 <happyfeet> type Algae = A
08:04:51 <happyfeet> data A = NA | A A B deriving Show
08:04:51 <happyfeet> data B = NB | B A deriving Show
08:04:56 <happyfeet> showAlgae :: Algae → String
08:05:43 <Hjulle> robertkennedy: You can't easily create all instances given a constraint. Try it yourself.
08:06:35 <Hjulle> robertkennedy: I want A' a ~ b iff A a b.
08:07:41 <Hjulle> happyfeet: What do you want to do? Convert something to a string?
08:07:59 <happyfeet> yup
08:08:11 <Hjulle> happyfeet: Convert what to a string?
08:08:21 <happyfeet> but the trick part is: i want to do that with a catamorphism
08:08:41 <happyfeet> cataA :: (Either Null (Prod c d) -> c) -> (Either Null c -> d) -> A -> c
08:08:42 <happyfeet> cataA ga gb = ga . (id -|- cataA ga gb >< cataB ga gb) . outA
08:09:00 <happyfeet> so it must be something like:
08:09:16 <happyfeet> showAlgae = cataA fa fb
08:12:31 <Hjulle> happyfeet: Since you have "deriving Show", why not just use "showAlgae = show"?  ;) (Yes, I know, no catamorphism)
08:13:22 <happyfeet> @Hjulle: the "standard" defenition i am trying to accomplish is this one:
08:13:22 <lambdabot> Unknown command, try @list
08:13:23 <happyfeet> showAlgae (A a1 (B a2)) = "A" ++ showAlgae a1 ++ "B" ++ showAlgae a2
08:13:24 <happyfeet> showAlgae _ = ""
08:13:37 <happyfeet> showAlgae (A NA (B NA)) = "AB"
08:13:58 <happyfeet> and not showAlgae (A NA (B NA)) = "A NA (B NA)" as in your suggestion
08:14:25 <sky58> When does the channel flash: Cannot send to channel
08:14:50 <sky58> It's happening with me on other channels
08:14:56 <sky58> ?
08:17:02 <Hjulle> :t (><)
08:17:04 <lambdabot> (Gen a -> Gen a) -> (Gen a -> Gen a) -> Gen a -> Gen a
08:17:19 <kosmikus> happyfeet: not sure what exactly your goal is. multirec has a generic show / generic catamorphism for families of mutually recursive datatypes. compdata has as well.
08:17:26 <zomg> sky58: those channels most likely require you to have a registered nick to talk there. /msg nickserv help
08:17:54 <sky58> okay
08:18:06 <sky58> So I will have to register first 
08:18:11 <sky58> And then use
08:21:13 <EvanR> crap...
08:21:29 <EvanR> 10^100 works fine 10^(10^100) does ;)
08:21:31 <EvanR> not
08:21:58 <Hjulle> "And then use \n crap..." XD
08:22:23 <EvanR> im trying to figure out a reasonable maximum Integer for score
08:22:36 <EvanR> maybe i should ask an ultrafinitist
08:22:46 <Welkin> > 10^100
08:22:48 <lambdabot>  1000000000000000000000000000000000000000000000000000000000000000000000000000...
08:22:57 <Welkin> > 10^(10^100)
08:23:04 <lambdabot>  mueval: ExitFailure 1
08:23:25 <Welkin> there should be an equation for that
08:23:39 <Welkin> like gauss's equation for the sum of integers
08:23:51 <EvanR> its 1 followed by a googol of zeros
08:23:55 <Welkin> so you can calculate it with just a few operations
08:24:00 <EvanR> you couldnt represent it in memory
08:24:29 <mniip> EvanR, 2^(2^(2^20))
08:24:33 <EvanR> lazy naturals on the other hand
08:24:48 <EvanR> mniip: whats this
08:24:53 <mniip> 128KB of digits
08:25:35 <EvanR> my computer still barfs on it
08:27:27 <EvanR> ill try 2^256-1 arbitrarily
08:28:32 <ADG> can something like this be done via lift "(,) <$> 0 <*> (read .(!!1) <$> getArgs)"
08:28:36 <ADG> > :t (,) <$> 0 <*> (read .(!!1) <$> getArgs)
08:28:38 <lambdabot>  <hint>:1:1: error: parse error on input ‘:’
08:28:54 <ADG> >:type (,) <$> 0 <*> (read .(!!1) <$> getArgs)
08:30:49 <miviotros[m]> Yesterday I was looking at conduit, mainly, but also at machines and to a lesser extent pipes.
08:31:01 <mniip> ADG, liftA2 (,) 0 (red ...)
08:31:06 <miviotros[m]> I was wondering if there is any point of using e.g. the conduit package with monads other than IO
08:31:12 <Hjulle> happyfeet: Just follow the types. You want a function A -> String, so replace c with String in the type of catA and see where it gets you. Just divide up in cases like you would do in normal recursion.
08:31:12 <mniip> no wait
08:31:16 <miviotros[m]> or if they are actually used with monads other than IO
08:31:23 <happyfeet> showAlgae = cataA (either (const "") auxA) (either (const "") auxB)
08:31:23 <happyfeet>   where auxA = ("A" ++) . (uncurry (++))
08:31:23 <happyfeet>         auxB = ("B" ++)
08:31:26 <mniip> are you using 0 in an applicative context?
08:31:31 <happyfeet> here it is! :)
08:32:33 <Welkin> lol, this video of richard stallman is funny
08:36:18 <Hjulle> happyfeet: Gratz!
08:37:16 <happyfeet> if you were curious this is for a college course called Program Design by Calculation 
08:43:26 <dmwit> EvanR: Why do you need a maximum score?
08:44:02 <Welkin> make it 8 bits
08:44:13 <Welkin> highest score 255
08:44:30 <EvanR> the screen can only display so much, but the score should be saved if it goes over, so the question is high much is reasonable
08:44:48 <EvanR> how much
08:45:14 <dmwit> What if you picked a number of sig figs instead of a maximum?
08:45:28 <EvanR> also if the high score file is tampered with... 
08:45:48 <Hjulle> g_64 is a good limit :)
08:46:07 <EvanR> is that a huge number that i could never compute with
08:46:09 <dmwit> You would prefer that tamperers have to choose MAX_EVANR_INT-1 for some reason?
08:46:34 <EvanR> hmm right
08:46:46 <EvanR> the parser is going to bork trying to verify the integers
08:46:59 <EvanR> i heard yesod or some framework had an issue with that
08:48:00 <EvanR> > reads (show (2^256)) :: [(Integer,String)]
08:48:02 <lambdabot>  [(11579208923731619542357098500868790785326998466564056403945758400791312963...
08:48:12 <EvanR> > reads (show (2^(2^256))) :: [(Integer,String)]
08:48:20 <lambdabot>  mueval: ExitFailure 1
08:48:23 <benzrf> ouch!
08:49:02 <EvanR> i guess i should just leave the maximum off
08:49:06 <dmwit> > reads (repeat '9') :: [(Integer, String)] -- 12-year-old me would have loved this idea
08:49:12 <lambdabot>  mueval-core: Time limit exceeded
08:49:19 <dmwit> Who needs to write down a lot of nines when the computer can do it for you?
08:49:45 <EvanR> repeat '9' has got to be the trump card in the "biggest number" schoolyard debate
08:50:19 <EvanR> or a zipper with 9s in both directions
08:50:56 <EvanR> which is clearly twice as much as repeat '9'
08:52:56 <EvanR> whats an example of where reads can return more than one result?
08:53:10 <dmwit> nothing in base
08:53:11 <Hjulle> What would you get if you added 1 to that number? repeat '0'? >:-]
08:53:39 <EvanR> '1' : repeat '0' ovb
08:54:17 <dmwit> Hjulle: Is it big-endian or little-endian?
08:54:33 <Hjulle> We would need a left folding lift for repeat '9' +1 to become 0
08:54:35 <dmwit> (Choose carefully, I have no choice but to go to tiny war with you if you choose badly.)
08:55:32 <Hjulle> dmwit: Little endian. Otherwise infinity + 1 would not be 0. :P
08:56:13 <EvanR> double sided infinity, inf + 1 = inf - 1
08:57:52 <EvanR> dmwit: i hope youre happy, i removed the upper limit from the validation test, and the parser just naively assumes it can function
08:58:35 <EvanR> the result seems to be that the game will freeze up if somebody gets enough points, rather than a weird kill screen
08:59:24 <EvanR> im still not comfortable with the level of impossibility of this
08:59:58 <mojjo> hi.. I'm struggleing with a simple parser for positional cli-args. I'm using Either for error messages. And there are three of this kind: "Wrong nr of args", "wrong first arg", "wrong snd arg". I could not get a better working example than those nested ifs in here: http://lpaste.net/355273 Could someone point me to an abstraction that would make sense here? 
09:01:14 <Hjulle> mojjo: Monad?
09:01:28 <EvanR> optparse-applicative ?
09:03:11 <ertes> mojjo: StateT [String] (Either String)  -- or optparse-applicative, which is a fancy version of this
09:03:54 <EvanR> should a config file reader be especially forgiving in terms of formatting, or especially strict?
09:04:04 <EvanR> the html fiasco comes to mind
09:04:06 <ertes> @let nextArg = StateT (\args' -> case args' of [] -> Left "Missing argument"; (arg:args) -> Right (arg, args))
09:04:08 <lambdabot>  Defined.
09:04:24 <nshepperd> mojjo: instead of using nested ifs, you can use guards
09:04:53 <ertes> @let endOfArgs = StateT (\args -> if null args then Right ((), args) else Left "Too many arguments")
09:04:55 <lambdabot>  Defined.
09:05:03 <fotonzade> hey guys
09:05:18 <ertes> > evalStateT (do arg1 <- nextArg; arg2 <- nextArg; endOfArgs; pure (arg1, arg2)) ["arg1", "arg2"]
09:05:20 <lambdabot>  Right ("arg1","arg2")
09:05:22 <ertes> > evalStateT (do arg1 <- nextArg; arg2 <- nextArg; endOfArgs; pure (arg1, arg2)) ["arg1", "arg2", "arg3"]
09:05:23 <fotonzade> I've got something like this:
09:05:24 <fotonzade> data Trie k a = Leaf a | Branch [(Maybe k, Trie k a)]
09:05:26 <lambdabot>  Left "Too many arguments"
09:05:32 <ertes> mojjo: like that
09:05:39 <fotonzade> what exactly is Branch here, a list of tuples? How do I access its elements?
09:06:10 <EvanR> yes, Branch holes a list of tuples
09:06:13 <EvanR> holds
09:06:19 <lpaste> nshepperd annotated “No title” with “No title (annotation)” at http://lpaste.net/355273#a355275
09:06:25 <ertes> fotonzade: you access it by pattern-matching, folding, etc.
09:06:31 <EvanR> you generally access data structures with pattern matching
09:06:46 <EvanR> you could also use lenses
09:07:03 <fotonzade> could you give a small example pls
09:07:21 <fotonzade> like what would return the first tuple in a Branch
09:07:24 <nshepperd> mojjo: see my annotation... optparse-applicative is a nice library for this of course, too
09:07:24 <EvanR> depends on what youre trying to do
09:07:34 <EvanR> head [1,2,3,4]
09:07:40 <EvanR> ? head [1,2,3,4]
09:07:42 <EvanR> > head [1,2,3,4]
09:07:44 <lambdabot>  1
09:07:57 <fotonzade>     Couldn't match expected type ‘[a]’
09:07:57 <fotonzade>                 with actual type ‘Trie k0 Integer’
09:07:57 <fotonzade>     Relevant bindings include it :: a (bound at <interactive>:20:1)
09:08:30 <ertes> fotonzade: example pattern:  Branch ((mk, t) : xs)
09:08:44 <EvanR> so you have a pattern matching case expression to check if its a Branch or a Leaf
09:08:47 <EvanR> ?
09:08:50 <fotonzade> no :/
09:08:52 <EvanR> thats the first step
09:09:06 <fotonzade> do you think I should read up on user defined types first?
09:09:17 <EvanR> read up on algebraic data types
09:09:22 <fotonzade> ah cool
09:11:33 <mojjo> been away for a second, thanks for the many suggestions. I'll see which one I will use...
09:18:10 <Hjulle> mojjo: I'd say http://lpaste.net/355273#a355275 is probably the simplest solution and optparse-applicative is the most flexible.
09:20:03 <Hjulle> dmwit: Btw, which was the incorrect answer to big- vs little-endian?
09:21:11 <mojjo> Hjulle: yeah, I was looking for something like this. If things get more compley I'll go for the suggested lib..
09:26:46 <Hjulle> mojjo: If you don't want fancy stuff but still more complicated cases, you can try a homemade applicative/monadic parser like ertes suggested. It's surprisingly simple and a good exercise. :)
09:34:13 <Gurkenglas> Anyone got some notorious lens errors to test this patch to lens against?
09:35:59 <nyherba> https://jobs.lever.co/kittyhawk.aero/89a6630b-4210-4a4a-89d8-936d458f6c8a this looks pretty sweet
09:38:28 <fotonzade> I don't understand how "Maybe a" can be a user defined type
09:40:01 <panovia> fotonzade: What do you mean?
09:40:47 <kosmikus> fotonzade: I don't know exactly what the source of that statement is. but because it *could* be defined by a user, probably? there's nothing magic or built-in about it.
09:41:15 <fotonzade> ah the book just shows how its defined
09:41:15 <fotonzade>     data Maybe a = Nothing | Just a  
09:41:20 <fotonzade> thanks guys
09:41:31 <fotonzade> I don't quite understand what "Just" is either
09:42:30 <LordBrain> the Just is sort of a tag that tells the compiler, aha! this is a value of type Maybe something
09:43:29 <LordBrain> its sometimes even called a tag, but usually we call it a data constructor.. as if it is a method for "constructing" a Maybe type.
09:44:21 <LordBrain> fotonzade, what book or tutorial are you reading?
09:44:30 <fotonzade> learn you a haskell for great good
09:44:41 <fotonzade> but I had to skip around a lot because I have to finish an assignment relatively soon
09:46:06 <EvanR> what is the replacement for the high level Network module?
09:46:18 <LordBrain> fotonzade, well, understanding how to make basic sum and product types is i would argue the most important thing to know in haskell
09:46:38 <fotonzade> hmm
09:47:32 <LordBrain> sum types have one or more of the symbol | ... where product types have only a single data constructor with multiple parameters of different types
09:48:18 <LordBrain> data TypicalProduct a b c = Prod a b c   -- Product type
09:48:44 <LordBrain> data TypicalSum = Item1 |  Item2 | Item3  -- sum type
09:49:03 <fotonzade> alright
09:49:32 <LordBrain> its easy, but every nontrivial program you write is going to have some of these
09:50:12 <fotonzade> yeah :/
09:50:32 <Gurkenglas> Does intero support LiberalTypeSynonyms? Because I'm getting this https://gyazo.com/aa7c0a304b9a1c1586fdc83e52fe59cb (lemme ask #emacs whether theres some command to produce a link to an online interactive version of what I'm looking at)
09:50:47 <LordBrain> some of the types that come in the prelude have sugar, so the constructor doesnt look like the usual capitalized alphanumeric syntax..
09:51:00 <Gurkenglas> Oh right some can't load that kind of intermediate page, here's a direct link to the screenshot https://i.gyazo.com/aa7c0a304b9a1c1586fdc83e52fe59cb.png
09:51:05 <Tanner_devmode> Hi
09:51:42 <Tanner_devmode> Is anyone good in this lang?
09:52:12 <Tanner_devmode> Becuase i am wondering if there is a way to make a website with this code
09:52:31 <LordBrain> fotonzade, so for example, all tuples, like  (a,b,c) is are product types, and they're isomorphic to the sort of to data Tupl3 = Tupl3 a b c
09:53:06 <fotonzade> I see
09:53:55 <ertes> Tanner_devmode: with "this code" or "this language"?
09:54:38 <Gurkenglas> Tanner_devmode, http://haskell-servant.readthedocs.io/en/stable/
09:56:27 <Tanner_devmode> Gurkenglas:thanks
10:05:22 <LordBrain> i should have had the a b c on the type constructor there... data Tupl3 a b c = Tupl3 a b c
10:07:10 <LordBrain> fotonzade, type constructors are what you'd see in a type signature, data constructors appear in code, they look just alike and you can even have the same symbol used twice once as type ctr and again as data ctr, like i did with Tupl3.. the compiler knows from context which you mean.
10:08:02 <LordBrain> they're always capitalized, unless they're special sugar like [] or ()
10:16:15 <ij> Can I have a dependency for Show a in "data Foo a = { x :: a, y :: [a] }" so I could «… deriving Show»?
10:17:05 <glguy> ij: Once you add the value constructor to that definition you can derive Show without adding any extra constraints
10:17:14 <glguy> the constraint on 'a' will be automatically added in the Show instance
10:17:26 <ij> Ah, cool.
10:21:20 <fotonzade> thanks a lot for your help LordBrain 
10:29:51 <fotonzade> so fellas if I have like Circle Float Float in a function's definiton 
10:29:59 <fotonzade> and in the binding I have the circle as c
10:30:02 <fotonzade> how to I access the floats?
10:30:24 <Cale> fotonzade: case c of Circle x y -> ...
10:30:58 <ertes> fotonzade: or as part of a function definition:  f (Circle x y) = …
10:31:08 <fotonzade> hmm
10:31:15 <Cale> I guess if you wanted to bind it both ways:
10:31:24 <Cale> f c@(Circle x y) = ...
10:31:50 <LordBrain> if you dont need to access the whole thing, you could just do f (Circle x y) =
10:32:07 <Cale> Yeah, ertes already suggested that one :)
10:32:08 <LordBrain> its called a pattern match
10:32:24 <LordBrain> oh, somehow my eyes read over that line
10:32:26 <Gurkenglas> Anyone got some notorious lens errors to test this patch to lens against? 
10:32:34 <LordBrain> sorry ericbmerritt_ 
10:33:02 <glguy> Gurkenglas: as far as I know that's something you'll need to produce
10:33:22 <fotonzade> insert :: Eq k => [k] -> a -> Trie k a -> Trie k a
10:33:39 <fotonzade> and the binding is insert (x:xs) a t = Branch []
10:33:42 <glguy> Gurkenglas: Part of the reason the build failed was that you had some unbound type variables in the new defintions
10:33:53 <ExpHP> is there any proposal in the works /at all/ to enable a module with an implicit export list to have private items
10:33:56 <EvanR> :t when
10:33:58 <lambdabot> Applicative f => Bool -> f () -> f ()
10:33:59 <Gurkenglas> Whuh? But it built locally
10:34:11 <glguy> Gurkenglas: You can look at the travis output to see the compiler errors
10:34:13 <fotonzade> what exactly should I say instead of t if I want to access the stuff
10:34:13 <EvanR> cant this be Bool -> f a -> f ()
10:34:51 <ertes> ExpHP: what would that look like?
10:35:20 <LordBrain>  (x:xs) is sugar for a patern match on the list constructor... called cons in lisp, in haskell its just : its another special constructor where we have non-typical syntax
10:35:21 <ExpHP> ertes: A {-# PRIVATE funcName #-} pragma.  Or a "module My.Module hiding (stuff) where" module header
10:35:24 <ExpHP> anything
10:35:34 <ExpHP> inner modules
10:35:46 <ab9rf> how is : nontypical?
10:35:55 <Gurkenglas> glguy, I saw https://travis-ci.org/ekmett/lens/jobs/229418254 and was confused by the build failing because a file I didn't touch didn't compile
10:36:19 <fotonzade> right LordBrain I more or less understand what it is
10:36:24 <LordBrain> sorry
10:36:28 <fotonzade> I am just curious how to work with k and a
10:36:37 <Cale> What are the constructors of Trie?
10:36:37 <LordBrain> you can have multiple nested pattern matches
10:36:38 <fotonzade> no problem at all lol I really appreciate your help
10:36:49 <fotonzade> data Trie k a = Leaf a | Branch [(Maybe k, Trie k a)] deriving (Show)
10:36:52 <ExpHP> I just want to be able to define a small helper function or a type alias in a module without it potentialy impacting the rest of my codebase
10:37:02 <Gurkenglas> EvanR, there is disagreement on such things as whether (>>) should take m () or m a as its first argument
10:37:03 <Cale> fotonzade: So you could, if you wanted, pattern match on those
10:37:05 <ExpHP> and currently the only solution I know is to make a separate module with just the private stuff
10:37:23 <fotonzade> Cale, I basically don't know how to pattern match on them
10:37:30 <fotonzade> because in the binding I only have t
10:37:31 <Cale> fotonzade: Either with a case expression to the right of the = sign, or just by replacing the t parameter with a pattern to match
10:37:32 <fotonzade> for the trie
10:37:36 <fotonzade> ah
10:37:43 <fotonzade> so if I did like t (k a) or somehting
10:37:44 <fotonzade> =
10:37:45 <fotonzade> ?
10:37:47 <ertes> ExpHP: given the current state of the module system that sounds like a reasonable approach, but personally i just write an export list
10:38:11 <ExpHP> ertes do you do this manually or do you somehow manage it with tooling?
10:38:21 <ertes> ExpHP: one reason is that my definitions are sorted alphabetically (for easy source navigation), so i use the export list to reorder them for haddocks
10:38:28 <Cale> insert (x:xs) u (Leaf v) = ...
10:38:41 <Cale> insert (x:xs) u (Branch kvs) = ...
10:38:59 <ertes> ExpHP: i have some helpers in emacs to jump to imports, exports and language pragmas temporarily
10:39:01 <Cale> (you'll also want to handle the insert [] _ _ = ... case
10:39:02 <fotonzade> ah I see
10:39:06 <Cale> )
10:46:40 <ExpHP> ertes: I'm curious now, how do you conceptually manage alphabetically sorted definitions? There must be cases where two very similar functions end up drastically separated; things like e.g. 'fst' and 'snd'
10:46:58 <ertes> ExpHP: yes, those will be separated
10:47:29 <ExpHP> Maybe it's just a difference in taste, but I don't suppose I could ever get used to thta
10:48:02 <Cale> ertes: You should just use hasktags
10:48:04 <ertes> ExpHP: there are two ways to reduce distance: make modules smaller (which i do), and bring them close together in the export list, so the docs are fine
10:48:15 <ertes> Cale: i do
10:48:33 <ertes> well, i use haskell-interactive-mode, which uses GHCi for lookup
10:49:47 <sm> ExpHP: I think symbols beginning with _ will remain private when implicitly exporting
10:50:44 <ertes> sm: nope, the "_" just stops GHC from warning about unused things
10:51:03 <ExpHP> And I don't suppose types can begin with '_'...
10:51:41 <LordBrain> do you  make an exception for the 'main' function
10:51:58 <sm> ah
10:52:08 <ertes> yeah, indeed i do…  'main' is always at the bottom
10:52:16 <ertes> it's a habit from my C++ days =)
10:53:29 <LordBrain> ertes, do you keep all the types together, or are they mixed in?
10:54:06 <ertes> first classes, then types, then values
10:54:19 <LordBrain> sounds very organized
10:54:25 <monochrom> The types are kept together, but probably only because they're all capital case :)
10:54:33 <ExpHP> ertes: how about when you use Template Haskell?
10:54:44 <ertes> ExpHP: TH ruins everything =)
10:55:11 <ertes> i try to keep it organised as much as possible…  for example use 'makeLenses' between types and values
10:55:47 <ertes> caveat: can't use lenses in instances, because i keep instances together with either classes or types
10:55:59 <ertes> fix: write lenses by hand =)
10:56:33 <ExpHP> that's dedication
10:57:22 <ExpHP> ertes: what's the payoff at the end? I would think navigating defs is easy enough by searching for "name ::" 
10:57:30 <sm> better-organized haddocks is one good reason to use an export list
10:57:44 <ertes> ExpHP: not much of a payoff…  it's just style
10:58:03 <ExpHP> so it's one less thing to fret over?
10:58:07 <ertes> same payoff as for using consistent indentation, etc.
10:58:57 <LordBrain> except when you refactor... now you got to insert everything in the right spot... like when you take a where clause function and move it to the top level
10:59:22 <ertes> yeah
11:00:14 <LordBrain> change the name of a binding... oops now have to cut and paste
11:00:35 <LordBrain> maybe it pays off tho, i dont know
11:04:30 <EvanR> heh
11:04:34 <EvanR> "your IDE should do it"
11:05:38 <EvanR> im imagining vedic monks eternally pushing haskell code into alphabetical order
11:07:27 <ExpHP> I'm conjuring up some mental image of a emacs plugin with keybindings to toggle exportedness of a function, and which renders a different typeface/color for exported names at their declaration site
11:07:47 <ExpHP> (this is returning back to the "private defs" thing)
11:08:31 <ExpHP> it'd produce terrible haddocks though
11:09:15 <ExpHP> (not that I ever try to manage haddocks for most code unless it's meant to be highly reusable library stuff)
11:11:02 <fotonzade> fellows Im getting an error for this code
11:11:03 <fotonzade> https://paste2.org/6MHjmmFK
11:11:29 <geekosaur> you should always include the full error
11:11:39 <fotonzade> https://paste2.org/5ecyJK2K
11:11:42 <fotonzade> here it is
11:11:48 <geekosaur> and anything else needed for the code to be understood (here, the definition of Trie)
11:12:31 <fotonzade> geekosaur, https://paste2.org/dMHF0kMM
11:12:59 <ExpHP> fotonzade just a guess, did you want "| Just x == m" instead of "| x == m" perhaps?
11:13:18 <geekosaur> but, here, what  see is on line 3 you use Branch [(Just x, ...
11:13:28 <geekosaur> but on line 5 Branch [(x, ...
11:14:08 <fotonzade> ExpHP, I don't think that is the problem
11:14:20 <fotonzade> geekosaur, I don't quite understand the problem
11:14:35 <fotonzade> oh 
11:14:36 <fotonzade> Just
11:14:45 <fotonzade> Jus 
11:15:11 <fotonzade> wait that didnt fix it
11:15:20 <monochrom> You have two problems or more.
11:15:33 <monochrom> But both have been pointed out.
11:15:51 <fotonzade> yes I fixed two for now :D
11:15:58 <fotonzade> ExpHP, you were right
11:16:05 <fotonzade> but how do I compare this with something else?
11:16:10 <Gurkenglas> If you want to watch me working on this lens patch (but probably more on wrestling with the tooling), here's a Stream: https://www.liveedu.tv/gurkenglas/2b9EV-wrestling-the-haskell-ecosystem/
11:16:34 <fotonzade> oh Just
11:16:36 <fotonzade> :D
11:16:46 <monochrom> WWF special show: Gurkenglas vs Stack :)
11:17:03 <geekosaur> I'd also be using pattern matching for the Nothing case, fwiw
11:17:19 <EvanR> ive heard more complaints about stack than cabal lately
11:17:29 <EvanR> well not that lately
11:17:49 <fotonzade> could you give an example pls geekosaur 
11:17:54 <fotonzade> I am very noob at this stuff
11:17:57 <EvanR> youd think something would come out that people praise
11:18:10 <EvanR> or is it like positive yelp reviews
11:18:22 <ExpHP> "In the red corner... dedicated and fun-loving... ranking Haskell as #13 on the most loved languages... the haskell ecosystem!"
11:18:42 <ExpHP> "No wait, that's a community, not an ecosystem.  Eh, same difference."
11:18:57 <monochrom> Could be only because more people use Stack. Also we only hear questions, not reports of "works 100% for me".
11:19:00 <kadoban> Gurkenglas: Ugh, also known as "kadoban vs. completely unusable website"
11:19:18 <sm> Gurkenglas: incidentally are your streams free, "premium", or some of each ? I found liveedu.tv pretty confusing and I'm not sure
11:19:57 <monochrom> Actually if someone does ask "should I use stack? should I use cabal?" all the answers are "stack works 100% for me".
11:20:21 <sm> also that link is trying but failing start playback here
11:20:43 <Gurkenglas> I'm not sure? I intended this to be free, feel free to suggest other websites, I first used this one months back when it, say, didnt block adblock
11:20:51 <kadoban> I was going to stream some nonsense a week or so ago, but that site is just crap now. I don't know where else to stream programming topics ...
11:21:15 <ExpHP> fotonzade: I think the people at #haskell-beginners might be better at helping you work through these errors
11:21:17 <sm> I'm wondering about alternatives for foss streaming too
11:21:24 <kadoban> Maybe just twitch, though there doesn't seem to be a community of coding streams there too much.
11:21:27 <fotonzade> oh I didnt know there was something like that
11:21:41 <fotonzade> ExpHP, everyone has been so patient with me here that I didnt think there was another channel
11:21:49 <lpaste> geekosaur pasted “fotonzade trie” at http://lpaste.net/355278
11:21:54 <geekosaur> wait
11:22:02 <lpaste> geekosaur pasted “fotonzade trie” at http://lpaste.net/355279
11:22:07 <geekosaur> typoed, tried to abort the original paste...
11:22:09 <sm> Gurkenglas: I was having some success when I found past streams in the hidden-by-default playlist, but then it stopped letting me use that
11:22:46 <ExpHP> whatever works :)
11:23:00 <monochrom> If you switch channel you will get the impression of getting your next question answered. But that's only because you have to post complete up-to-date information all over again.
11:23:25 <fotonzade> ah I see geekosaur 
11:24:35 <sm> kadoban: oh, I thought twitch was for gaming only ?
11:24:49 <geekosaur> sadly you can;t do the same with the x/m comparison, patterns can't test against bindings so something like insert (x:xs) a (Branch [(Just x,t)]) would be an error
11:25:31 <fotonzade> :(
11:25:37 <kadoban> sm: Not sure it matters, from what I can tell they don't care. But livecoding.tv / liveedu.tv is not an option anymore, and I think that was the only coding-specific one.
11:25:46 <ExpHP> twitch now has some kind of offshoot now for nongaming stuff... Twitch Creative, I think?
11:26:03 <kadoban> There's some reddit thing that seems to focus on streaming coding stuff, but it was small and kind of funky, I didn't try it.
11:26:06 <ExpHP> which is funny since twitch was originally an offshoot from justin.tv to get all the gaming stuff off there
11:26:23 <sm> creating a channel on youtube seems to be another option
11:26:25 <monochrom> haha
11:26:29 <geekosaur> you expect people to remember that far back? :p
11:26:46 <kadoban> Yeah, youtube seemed like an option too
11:28:11 <sm> https://www.twitch.tv/directory/game/Creative, interesting
11:29:40 <sm> OT, but https://help.twitch.tv/customer/portal/articles/2176641-creative-faq is pretty funny, too
11:30:04 <kadoban> Huh, I didn't know that existed. Wonder if it'd work.
11:30:19 <sm> things forbidden to broadcast: assembling furniture. playing puzzles. :)
11:32:19 <Gurkenglas> Where in what manual does it say what makes type synonyms be unpacked/stay packed?
11:39:26 <Cale> Gurkenglas: I wouldn't expect that to be documented.
11:40:17 <Cale> Gurkenglas: I think it makes some effort to keep them folded when printing error messages, but there are various things which get in the way of that, and it's probably not easy to characterise.
11:41:15 <Gurkenglas> Currently trying to do that on-stream. With tools trying to keep me from finding out.
11:43:54 <Gurkenglas> How do I tell stack to hide the lens it knows from the current project (lens cloned from github with minor changes) so I can test the changes in ghci?
11:44:37 <sm> specify the precise version in extra-deps list in stack.yaml ?
11:45:21 <ExpHP> is it possible to get a list of names exported by a module, from e.g. intero?
11:45:34 <geekosaur> or the location: syntax in stack.yaml
11:46:14 <kadoban> Gurkenglas: Remove it from the 'package' list or whatever it is in stack.yaml?
11:46:26 <Gurkenglas> Preliminary experimental results: When it can unpack a type synonym in order to pull a forall to the front, it does so.
11:46:48 <Gurkenglas> kadoban, I don't think lens has itself in its stack.yaml as a dependency
11:47:33 <chewzerita> @pl rema n x = let w = div n x in (w, n - w * x)
11:47:33 <lambdabot> rema = ap (ap . (ap (,) .) . (. (*)) . (.) . (-)) div
11:47:34 <Gurkenglas> I think I've got it globally installed? (I can import Control.Lens from calling stack's ghci outside a project)
11:47:35 <kadoban> Gurkenglas: Not following. You're using 'lens' in some other thing, right?
11:47:46 <geekosaur> then just run ghci vs. stack ghci?
11:47:48 <Gurkenglas> No, I'm working on a pull request to the lens package
11:48:08 <geekosaur> or if it's installed via stack, I think there's an option to specify the stack.yaml to use so point to the global project instead of the localone?
11:48:11 <Gurkenglas> geekosaur, I don't have ghci installed, just stack.
11:48:34 <Cale> Gurkenglas: I... guess start a blank stack project then?
11:48:37 <kadoban> Gurkenglas: Possibly with -hide-all-packages
11:49:14 <geekosaur> --stack-yaml=$HOME/.stack/config.yaml I think
11:49:25 <geekosaur> or Windows equivalent
11:49:43 <geekosaur> oh, sorry
11:49:56 <geekosaur> --stack-yaml=$HOME/.stack/global/stack.yaml
11:51:22 <rotaerk> hmm my foray into literate haskell might just end as a temporary phase... guess I'll just use normal haskell but start commenting more
11:51:52 <geekosaur> I think most people only use literate Haskell for blogs
11:52:26 <rotaerk> I find the code hard to read if I use latex style, and I find it hard to write/edit if I use bird style
11:52:39 <Gurkenglas> geekosaur, I think the problem is that Im already using the global config's lens rather than the one of the project I'm editing
11:53:38 <Gurkenglas> "git clone lens; cd lens; <edit a file>;" What stack command should follow in order to open a ghci that uses the lens I've modified?
11:56:12 <geekosaur> `stack ghci` should build and use that project, not the global one
11:56:25 <geekosaur> unless lens somehow depends on itself, which seems weird and possibly broken
11:56:59 <sm> lens doesn't have a stack.yaml file. Possibly stack is using the global one ?
11:57:00 <ertes> rotaerk: if you find latex-style code hard to read, you probably need an editor with better highlighting
11:57:03 <geekosaur> you may need to force a build first, although I thought `stack ghci` would do that
11:57:23 <Gurkenglas> Heh, it says to run stack init first
11:57:44 <geekosaur> then you likely need to do that, since it's not a stack project
11:57:54 <geekosaur> so stack won't handle it right...
11:58:42 <ertes> rotaerk: anyway, in real code literate haskell is probably not too useful…  i mostly use it for blog entries
11:59:07 <ertes> with proper editor support editing long regular comments is fine
12:00:03 <LordBrain> i agree rotaerk... regular haskell with comments is preferred
12:02:29 <cocreature> is there a reason to use the “haskell-src” package these days or is it completely superseeded by the “haskell-src-exts” package?
12:03:11 <geekosaur> if you're working with only haskell98 standard source, I guess
12:04:13 <geekosaur> since the original reason for haskell-src-exts was that haskell-src didn't support the ghc extensions
12:04:30 <rotaerk> ertes, just using vim, but didn't adjust anything about its highlighting; just using the built-in lhaskell support
12:04:31 <cocreature> ah that’s where the slightly confusing “-exts” naming comes from
12:04:34 <cocreature> geekosaur: alright thanks
12:11:02 <ExpHP> okay, I've spent the last 3 hours literally paralyzed at the thought of how to deal with these type aliases conflicting with each other after splitting up a module
12:11:44 <ExpHP> I think the only reasonable solution at this point that won't cause me to hate myself in the near to far future is to delete the type aliases
12:12:09 <ertes> rotaerk: make sure your editor knows how to fill and indent comments properly, then it's a piece of cake
12:12:29 <Tuplanolla> I'd stop programming for a while if it left me unable to move for three hours, ExpHP.
12:13:19 <ExpHP> Tuplanolla that's why I'm procrastinating in here
12:14:55 <ExpHP> (also, yes I know you were ribbing on my use of the word "literally")
12:15:08 <ExpHP> (but shhhh, don't spoil the joke)
12:18:58 <ertes> i'd go see a doctor
12:27:47 <Gurkenglas> You don't wanna know what happens if it lasts more than 4 hours
12:27:51 <sm> kadoban: one downside of twitch: omg heavy advertising
12:29:25 <LordBrain> if X is profitable but sucks, but doesnt suck bad enough for anyone to do anything about it, market forces seem to make X inevitable
12:29:29 <ExpHP> Gurkenglas: I think that's the point when my cat classifies my keyboard as a new bed
12:33:00 <CuriousErnestBro> anyone familiar with pcap.gaz files?
12:33:05 <CuriousErnestBro> pcap.gz
12:33:17 <CuriousErnestBro> How to open and read them?
12:33:34 <Tuplanolla> There's a program called `pcap`, no, CuriousErnestBro?
12:34:38 <CuriousErnestBro> Tuplanolla, ubuntu can't find it in it's repos, no
12:34:51 <ChaiTRex> CuriousErnestBro: Wireshark might be able to read it.
12:35:34 <Tuplanolla> I get lots of hits with `apt search pcap`, CuriousErnestBro.
12:37:04 <geekosaur> wireshark and tcpdump (with -r option) should be able to read it
12:37:17 <geekosaur> although you likely need to gunzip first
12:37:52 <geekosaur> also there should be something on hackage although last I checked the options were kinda poor
12:37:58 <ExpHP> pfft.  So after all that, it turns out that I already had a module dedicated to "type aliases I really don't want to become committed to but had to pull out into a module anyways, lol" https://github.com/ExpHP/calc-tblg/blob/master/src/Band/Oracle/API.hs
12:39:21 * ExpHP adds "type QVec = V3 Double" and washes the blood off his hands
12:44:20 <Gurkenglas> "git clone <lens>; cd lens; <edits>; stack init; stack ghci" with I-think-irrelevant stuff in between produces http://lpaste.net/7083755158328311808
12:53:19 <sm> Gurkenglas: lens.cabal specifies the -traditional flag for cpp. See if yours supports it, mine does (mac sierra)
12:55:53 <Gurkenglas> How do I check that? cpp -traditional makes the shell wait for input as if a haskell executable did forever getLine. (What command corresponds to the Ctrl-C of other terminals in emacs's M-x shell?)
12:56:26 <sm> but cpphs doesn't. I don't know which it's using. Also your error seems to imply the flag is being passed to ghc
12:56:52 <sm> C-q C-c enter
12:57:25 <sm> sometimes C-q C-d enter is better
12:57:26 <Gurkenglas> ...that didn't kill the "cpp -traditional" process :I
12:57:59 <Gurkenglas> It does produce "^C"/"^D" lines though
12:58:03 <LordBrain> Gurkenglas, in unix, its done via a signal handler
12:58:12 <Gurkenglas> I'm on Windows
12:58:21 <LordBrain> i dont recall what windows does 
12:58:31 <sm> if all else fails, I kill and reopen the shell window
12:58:40 <sm> s/window/buffer/
12:59:08 <Gurkenglas> That worked.
13:04:04 <hexagoxel> Gurkenglas: i see the same issue with -traditional with stack on linux. i'd wonder if updating stack helps though; mine is a bit dusted.
13:04:28 <sm> I'm getting the impression that lens uses some flags that stack isn't yet able to pass through (reproduced here with stack 1.4)
13:05:09 <Gurkenglas> Can I tell stack to act as cabal would in order to get me some sort of repl?
13:05:51 <sm> stack exec -- ghci -isrc  might be a good start
13:06:17 <sm> :m +*Control.Lens, etc.
13:06:27 <hexagoxel> "stack exec -- cabal repl"
13:06:29 * hexagoxel runs
13:06:59 <Gurkenglas> second one complains about GHC_PACKAGE_PATH or something
13:07:10 <LordBrain> i havnt used stack yet, but having it implies you have cabal doesnt it?
13:07:42 <Gurkenglas> You can install stack without having a ghci.exe on your path
13:08:07 <sm> nested stack/cabal commands generally aren't allowed
13:08:51 <sm> yeah I think you'd be best avoiding stack for now and just do cabal repl
13:09:10 <Gurkenglas> sm, http://lpaste.net/963041082055065600 ? did you mean something else than literally ":m +*Control.Lens"?
13:09:40 <sm> no I meant that, but I hadn't yet tested it.. it fails as you say
13:09:54 <Gurkenglas> What stack command gives me access to "cabal repl"? "stack install cabal"?
13:09:55 <hexagoxel> stack 1.4.0 does not work either. bit surprised; doesn't that mean that lens does not work with stack in general?
13:10:12 <sm> it looks that way.. worth opening a lens issue I'd say
13:10:19 <hexagoxel> perhaps HEAD is not released yet.
13:10:19 <sm> which will probably lead to a stack issue
13:10:44 <hexagoxel> (rather: whatever commit introduced that flag)
13:11:05 <sm> agreed, stack installing it from stackage works of course
13:11:47 <muzzle> Hi
13:12:12 <muzzle> I have a quick question/proposal: couldn't the type of Map's insertWith changed to Ord k => (b -> a -> a) -> k -> b -> Map k a -> Map k a ?
13:12:14 <Gurkenglas> In order to accumulate a benchmark file that generates notorious lens errors to test patches like mine against, should I open a thread on reddit or stackoverflow?
13:12:32 <hexagoxel> Gurkenglas: so maybe you can check out the commit from the last release, and work from there.
13:12:42 <Tuplanolla> :t Data.Map.insertWith
13:12:44 <lambdabot> Ord k => (a -> a -> a) -> k -> a -> M.Map k a -> M.Map k a
13:13:09 <Gurkenglas> muzzle, what if there's no a at that k?
13:13:16 <Tuplanolla> I think not.
13:13:41 <Gurkenglas> muzzle, perhaps you want adjust
13:14:56 <Gurkenglas> Because the only possible implementation of "(b -> a -> a) -> k -> b -> Map k a -> Map k a" would pass the b to the (b -> a -> a) and then adjust remains
13:16:04 <muzzle> Gurkenglas: I actually need alter, sorry
13:16:23 <ExpHP> Gurkenglas: or it could be "f _ _ _ = id"
13:16:36 <ExpHP> ...I'll show myself the way out
13:17:22 <Gurkenglas> ExpHP, that'd be "a -> b -> c -> d -> d", not "(b -> a -> a) -> k -> b -> Map k a -> Map k a"
13:18:24 <ExpHP> > let f _ _ _ = id in f :: (b -> a -> a) -> k -> b -> Const k a -> Const k a
13:18:24 <Gurkenglas> Also your f too can be written in terms of passing the b to the (b -> a -> a) and then (failing to) implement adjust
13:18:26 <lambdabot>  error:
13:18:26 <lambdabot>      • No instance for (Typeable b0)
13:18:26 <lambdabot>          arising from a use of ‘show_M201774929903630120617984’
13:19:45 <ExpHP> > let f _ _ _ = id in const (f :: (b -> a -> a) -> k -> b -> Const k a -> Const k a) ()
13:19:47 <lambdabot>  error:
13:19:47 <lambdabot>      • No instance for (Typeable b0)
13:19:47 <lambdabot>          arising from a use of ‘show_M81368359491340298318039’
13:20:18 <ExpHP> oh duh
13:20:22 * Gurkenglas shows ExpHP the way into the lambdabot query till he's got an expression
13:20:29 <ExpHP> > let f _ _ _ = id in const () (f :: (b -> a -> a) -> k -> b -> Const k a -> Const k a)
13:20:31 <lambdabot>  ()
13:20:47 <ExpHP> boom, therefore f :: (b -> a -> a) -> k -> b -> Const k a -> Const k a
13:20:52 <Gurkenglas> f is still a -> b -> c -> d -> d
13:21:19 <ExpHP> something something monomorphism restriction
13:23:36 <Gurkenglas> Can someone make a fork of https://github.com/Gurkenglas/lens/commits/master that contains the second commit and all those below the last stackage release or tell me how to do so, so I can get into a position to test my pr?
13:25:38 <sm> Gurkenglas: commenting out cpp-options: -traditional in lens.cabal allows stack ghci lens to work. That line has been there for three years though, so I don't know the real cause
13:26:27 <LordBrain> hey, if i want to make something like the games in gnome-games package, what libraries tools should i use?
13:26:42 <LordBrain> something that does as much work for me as possible
13:26:55 <LordBrain> so i can focus on the concept more so than the code
13:27:05 <sm> fltkhs, I'd say
13:28:46 <sm> well, how much does installability and platform support matter ?
13:29:47 <LordBrain> instability?
13:30:01 <LordBrain> you mean the api?
13:30:11 <sm> install-ability
13:30:20 <sm> do you need other folks to be able to install it ?
13:30:25 <LordBrain> highest priority is just, getting up and running fast i guess
13:30:32 <LordBrain> oh yes
13:30:39 <sm> on windows and mac too ?
13:30:57 <LordBrain> well, i'm not against those
13:31:00 <EvanR> category of causal interactive programs http://lpaste.net/355282
13:31:07 <LordBrain> but gnome is the priority, or mate desktop
13:31:25 <LordBrain> mate is what i use
13:31:35 <LordBrain> android would be very nice
13:32:06 <Gurkenglas> EvanR, sounds like a conduit/pipe using a state monad?
13:32:19 <EvanR> no monads
13:32:19 <LordBrain> i mean the whole thing could be done with javascript and stuff... i guess.. but something doesnt feel right about that
13:32:23 <EvanR> necessarily
13:32:42 <EvanR> but yeah its the same signature as pipes
13:32:45 <LordBrain> think in terms of minesweeper on your desktop
13:32:49 <Gurkenglas> *reader (since you apparently cant write back to the world)
13:32:56 <EvanR> but a different interpretation
13:33:42 <EvanR> Gurkenglas: right i had something with 3 parameters until i wanted a reader... and ended up with this
13:34:11 <Gurkenglas> Why not replace the reader with a custom monad specified by the user?
13:35:13 <EvanR> i dont understand where monads comes in?
13:35:46 <EvanR> i do see how you could implement a program completely internal with whatever monad you wanted, or another way
13:35:55 <EvanR> but not why itd be in the interface
13:36:47 <sm> LordBrain: I'd probably still say fltkhs, but you could also look at the gnome and qt options on hackage
13:36:52 <Gurkenglas> Half bullshitting now, but for the same reason State is StateT Identity
13:37:35 <EvanR> i guess you jumped to something like X-transformer... but i didnt even think this was a monad?
13:38:00 <EvanR> its a functor in two ways, a bifunctor, a profunctor in two ways, a contrafunctor in two ways...
13:38:10 <EvanR> a monoid in two ways
13:38:18 <EvanR> applicative in two ways or biapplicative
13:38:19 <LordBrain> sm, what about wxhaskell.. if we're talking general gui kits, how does that compare to fltkhs
13:38:31 <Lokathor> LordBrain, sdl2 or fltkhs
13:38:34 <sm> LordBrain: there's also things like threepenny-gui
13:39:12 <Lokathor> fltkhs will let you do more stuff with widgets, but note that the compile times can get insane if you don't read the docs and set the fast compile flag they talk about
13:39:46 <LordBrain> hmm
13:40:11 <cocreature> sdl and fltk are two very different things. sdl mostly gives you an opengl context while fltk is an actual gui library
13:40:27 <EvanR> and fltk will also give you an opengl context
13:40:27 <sm> I think wxhaskell is less maintained now
13:40:30 <Lokathor> SDL is mostly just a 2d canvas you can draw to and get input about, but you have to manage every other detail yourself (such as noting when a player click should count as a click of a particular button)
13:40:45 <LordBrain> yeah i know
13:40:56 <EvanR> there are libraries to attempt to slap a gui ontop of SDL
13:40:59 <Lokathor> cocreature, SDL has plenty to work with without knowing OpenGL at all.
13:41:00 <sm> maybe http://hackage.haskell.org/package/wx is a successor, I dunno
13:41:01 <cocreature> sm: I’m not sure that’s true. there was a new release just a week ago or so
13:41:04 <LordBrain> i know of some other libraries like that that are nice
13:41:40 <Lokathor> one thing with WX and also GTK is that the windows install might turn out difficult
13:41:45 <sm> cocreature: right you are
13:41:49 <LordBrain> because its a game, actually sdl or something less widgety oriented seems better
13:42:51 <sm> LordBrain: those gnome games seemed to have a lot of widgetty things, I figure similar things exist for fltkhs 
13:43:07 <sm> it's lots of work, no matter how you look at it
13:43:15 <LordBrain> yeah but decorated widgets.. not standard ones, no?
13:43:22 <LordBrain> yeah
13:43:30 <LordBrain> i want something to cut it down as much as possible
13:43:31 <sm> yeah, but as I understand it custom widgets are easy with fltkhs
13:43:35 <Lokathor> http://www.fltk.org/shots.php this is what fltk stuff kinda looks like usually
13:43:37 <sm> more so than gtk etc.
13:44:21 <LordBrain> what about html5 canvas api, is there something that lets me target that in haskell?
13:45:15 <Lokathor> ghcjs maybe? writing it in purescript instead?
13:47:32 <sm> many options, no obvious winner
13:47:42 <ExpHP> I'm using emacs+intero+FlyCheck, and it tends to "give up" and show an error count of zero if there's an error in a different module than the one open, or in cases of module name/filepath mismatch.
13:48:04 <ExpHP> my current solution is to go back and forth with 'stack build' in a terminal.  Can I do better?
13:48:19 <sm> Gurkenglas: check out http://hackage.haskell.org/package/h-reversi
13:48:23 <Hjulle> How do I prove to the compiler/tell the compiler to prove that a specific constraint is always true for a type family that I've defined?
13:48:42 <Gurkenglas> sm, wrong target
13:49:31 <sm> oops sorry. LordBrain.
13:49:50 <Gurkenglas> http://lpaste.net/4548528472800100352 lulz how do I hide that module list from the prompt on each line?
13:50:21 <sm> put :set prompt "ghci> " in .ghci
13:50:22 <cocreature> Gurkenglas: :set prompt "❯ "
13:50:31 <cocreature> put that in ~/.ghci and it will always be applied
13:51:15 <monochrom> No no no, my friend recently taught me the greatest prompt idea ever.
13:51:28 <monochrom>  :set prompt "enter your password> "
13:51:42 <EvanR> metacircular evaluator http://lpaste.net/355284
13:52:46 <sm> LordBrain: that one uses html canvas, but this seems about equivalent to using gloss+opengl, with no browser required
13:52:56 <Tuplanolla> I'm sticking with `:set prompt "please "`.
13:53:21 <sm> there's also FunGEn, opengl plus game framework
13:53:45 <LordBrain> i'm intrigued by blank canvas package anyway
13:53:52 <LordBrain> i know what you're saying
13:54:09 <LordBrain> it might be pointless... but i dont think i'm going to know unless i try it
13:54:12 <sm> then I think you should check out http://hackage.haskell.org/package/threepenny-gui too
13:55:42 <LordBrain> if i combine either of those with the webkit package, can probably make something that is virtually identical to a stand alone app
13:56:23 <LordBrain> and it might be easier to port to android 
13:56:33 <LordBrain> or ios
13:57:02 <LordBrain> but i dont know, i dont have the experience to know for sure that approach is worthwhile
14:00:10 <dmwit_> Hjulle: It was a bluff. A stupid joke about the origins of the terms big- and little-endian.
14:01:40 <LordBrain> if i use the black-canvas package, it seems i have to serve the canvas on a port, whats a good way to pick a random port that is unused?
14:02:03 <EvanR> use port 0
14:02:37 <sm> really ?
14:02:55 <EvanR> normally yes, dunno if that library gives you access to the resulting OS-chosen port
14:03:16 <sm> interesting. doesn't look like it does
14:03:23 <EvanR> bollocks
14:06:22 <geekosaur> but there should be a way to get it via the network package
14:06:36 <EvanR> if you get the Socket, then you can get it
14:09:21 <LordBrain> can i use the port 0 trick without it rerving the port, just to pick it?
14:09:26 <LordBrain> reserving*
14:09:37 <EvanR> probably not
14:09:43 <LordBrain> hmm
14:09:44 <sm> you need to know it to open a browser on it
14:09:49 <LordBrain> i dont
14:10:08 <LordBrain> i mean i dont need to know it to open the browser, because i am going to have the program do it all 
14:10:11 <EvanR> picking a low 4 digit port is what a lot of people do
14:10:11 <LordBrain> its going to open the browser for me
14:10:23 <geekosaur> no, port 0 is actually the OS level API to select the next unused port, it has to be "reserved"/opened at that point or something else will take it
14:10:37 <sm> you can try to connect to whatever you picked, and see if it's active
14:11:20 <LordBrain> well, as long as its the same process, maybe it doesnt matter that i open the port already?
14:11:28 <sm> well hey, try it
14:12:00 <EvanR> only one thing in the whole system can be listening on a TCP port at a time
14:12:12 <EvanR> only one server socket
14:13:04 <LordBrain> well, maybe i can hack blank-canvas or something to operate in this mode
14:13:10 <LordBrain> i dont know
14:13:24 <LordBrain> i need a break, i'll code it up later
14:13:29 <EvanR> if you cant get the Socket, then you can certainly hack it to get it
14:13:43 <EvanR> mumble
14:14:00 <LordBrain> bbl
14:14:57 <sm> maybe the fast path to hgnome-games is write a front end for a bunch of existing hackage games
14:16:16 <EvanR> like what, monao ?
14:18:01 <sm> whatever works
14:18:12 <Gurkenglas> How do I get intero to use some package when I'm not in a project?
14:18:32 <sm> could be a short list, but it would be a fun project
14:19:47 <ertes> Gurkenglas: does intero even support not being in a project?  as far as i know it's heavily stack-bound
14:20:41 <Gurkenglas> Well it gives me errors for using base stuff wrong or importing a module it doesnt know
14:21:44 <ertes> Gurkenglas: you should just use the regular haskell-mode while not in a project
14:22:07 <ertes> … probably
14:48:04 <juubla> How do I pass options to happy when building with stack/ghc/cabal?
14:48:27 <juubla> I think there is supposed to be a field you can set in the .cabal file... but I can't find any documentation
14:54:25 <lyxia> juubla: https://github.com/haskell/cabal/issues/1223
14:54:39 <lpaste> ExpHP pasted “type conflict: why do I have two copies of the same package and version with different hashes” at http://lpaste.net/355285
14:54:55 <c_wraith> ExpHP: built against different dependencies
14:55:02 <ExpHP> c_wraith: D:
14:57:01 <ExpHP> I wish to offer the offending incorrectly-built libraries as sacrifice
14:57:08 <ExpHP> I did "stack clean" but it hungers for yet more
14:59:25 <tippenein> hmm, I haven't used 'cabal test' in a long time
14:59:55 <tippenein> it's not finding my test deps. do I have to do something to get it to build the test and run them?
15:00:21 <tippenein> configure --enable-tests doesn't seem to do anything useful
15:03:42 <juubla> lyxia: whats suggested in that link doesnt seem to actually work
15:04:20 <k___> hi all, is anyone familiar with the internals of how realToFrac works?
15:04:42 <k___> for example:
15:05:10 <k___> > let f :: Floating a => a -> a -> a; f x y = x * y
15:05:12 <lambdabot>  <no location info>: error:
15:05:12 <lambdabot>      not an expression: ‘let f :: Floating a => a -> a -> a; f x y = x * y’
15:05:31 <k___> > let x :: Float; x = 4
15:05:33 <lambdabot>  <no location info>: error:
15:05:33 <lambdabot>      not an expression: ‘let x :: Float; x = 4’
15:05:48 <k___> > let y :: Double; y = 5
15:05:50 <lambdabot>  <no location info>: error:
15:05:50 <lambdabot>      not an expression: ‘let y :: Double; y = 5’
15:05:52 <geekosaur> lambdabot takes expressions not definitions
15:05:55 <geekosaur> this is not ghci
15:06:25 <k___> ah sorry, should i use a code paste service instead?
15:06:37 <kuribas> I think it's fromRational . toRational
15:06:44 <kuribas> :t fromRational . toRational
15:06:46 <lambdabot> (Real a, Fractional c) => a -> c
15:06:50 <kuribas> :t realToFrac
15:06:52 <lambdabot> (Fractional b, Real a) => a -> b
15:07:04 <geekosaur> the default is, yes. there are RULES for various optimized versions for different types
15:07:38 <k___> i'm wondering about the internal representation about the result of `f (realToFrac x) (realToFrac y)` (with f, x, y as defined above)
15:08:05 <k___> since its input types are Float and Double, and its output type is `Floating a => a`
15:08:20 <k___> is its output type internally represented as a Float, Double, something else?
15:08:38 <geekosaur> what you wrote above is a type error
15:09:06 <k___> which part?
15:09:13 <geekosaur> well, no, if you realToFrac the inputs I guess it isn't
15:09:43 <geekosaur> in any case if you want to see the compiler representation, the easiest way to find out is to install the ghc-core package and use it to inspect the generated GHC Core
15:09:54 <geekosaur> (you can also do it manually but it's a bit fiddly)
15:11:44 <k___> geekosaur: okay, thanks, i'll try it
15:12:15 <geekosaur> it's almost certainly easiest because it can be a pain to figure out what RULES pragmas might apply to the conversion
15:12:30 <geekosaur> (but, probably not many unless you monomorphize it instead of using Floating a)
15:15:13 <ExpHP> okay, that was weird... it seems like my stack.yaml was automatically updated by something from lts-8.4 to lts-8.5
15:15:31 <kuribas> given a list l and a function f: "f l = sum $ zipWith mod (scanl (+) 0 l) l", find the maximum value f p, where p is a permutation of l.
15:15:32 <k___> geekosaur: in my codebase, i'm using RankNTypes and NoMonomorphismRestriction
15:16:59 <kuribas> it's an "intermediate" question on the current hackerrank competition...
15:17:05 <geekosaur> you should probably know that every time you make something more polymorphic, you remove chances for optimization because it can't choose an implementation until the use site, and in the case of polymorphic recursion it might not be able to choose the implementation until runtime
15:17:28 <ExpHP> k___: not sure but I doubt it has any internal representation at all until it is monomorphized with a specific Floating typeclass
15:17:59 <ExpHP> it has a missing, implicit parameter (the typeclass dict)
15:18:22 <k___> geeksaur: good point, i'm making things polymorphic because a library i'm using (`ad`) requires it
15:19:42 <Gurkenglas> kuribas, I suppose a lemma there is that permuting a subsequence has no impact on the summands from either side of it
15:20:03 <kuribas> Gurkenglas: I tried that, but that doesn't work I think
15:20:20 <k___> ExpHP: what do you mean by a specific Floating typeclass? 
15:20:30 <k___> do you mean an instance of Floating?
15:20:49 <kuribas> Gurkenglas: I don't know if I am breaking the rules by discussing it...
15:21:52 <Gurkenglas> kuribas, what's the distribution of l?
15:22:12 <Gurkenglas> (As in, what values of l is your algorithm to work with)
15:22:28 <kuribas> Gurkenglas: length l == 20, each element < 10^16 
15:22:50 <geekosaur> k___, they do, yes
15:23:12 <ExpHP> k___: yes that's what I meant, I slipped with the terminology
15:24:34 <kuribas> Gurkenglas: it a pretty hard question for an "intermediate" exercise.
15:25:45 <k___> ExpHP: got it. i guess i can monomorphize the result with any instance and hopefully it will be stored in the correct representation (excepting the values that realToFrac has problems with, like NaN and Infinity...)
15:26:11 <kuribas> Gurkenglas: but an upper bound is "sum $ map (subtract 1) l"
15:27:07 <Gurkenglas> kuribas, a bound on the time complexity given by the author? Also, why wouldnt "that" work?
15:27:37 <Gurkenglas> Oh, a bound on the result. Lol
15:27:46 <kuribas> Gurkenglas: ehm, your right, but it's still O(n!)
15:28:05 <Gurkenglas> I see O(2^length l)
15:29:13 <kuribas> Gurkenglas: if I would use the fact that the order of the subsequence doesn't change the result...
15:29:34 <Gurkenglas> (with a linear factor or two thrown in maybe)
15:30:12 <kuribas> Gurkenglas: isn't the number of permutations n! ?
15:30:42 <Gurkenglas> Yep, I dont traverse all permutations
15:31:05 <ExpHP> k___: Actually my guess is that it is an unevaluated thunk; I don't suspect that f (realToFrac x) (realToFrac y) actually performs the multiplication until it is monomorphised, even if you "strictly" evaluate it
15:31:31 <kuribas> Gurkenglas: I got 5 seconds for the program to terminate
15:31:37 <ExpHP> k___: but don't take my word for it!
15:31:41 <EvanR> isnt it monomorphised at compile time
15:32:07 <EvanR> if ever
15:34:38 <ExpHP> What I mean is, I don't suspect that `let !a = f (realToFrac x) (realToFrac y) in a` is different from `let a = f (realToFrac x) (realToFrac y) in a`
15:34:57 <ExpHP> in fact, we can test this.  Who's ready for a stack overflow? =D
15:35:25 * ExpHP pulls out the earth's most terrible weapon:  List.fold
15:35:33 <ExpHP> i mean foldl >_>
15:38:05 <ExpHP> er, I mean foldl'
15:38:17 <ExpHP> and minus the "most terrible" part
15:38:43 <lyxia> ExpHP: they are the same indeed
15:39:06 <ExpHP> lyxia: spoilers!
15:39:37 * ExpHP has 4 lines of a test file coded >_>
15:42:14 * ExpHP is really not good at using stack and still can't figure out how to just run the file in the app/ dir in the default template >_>
15:42:29 <k___> ExpHP: i'm excited to find out the result :)
15:42:40 <plot> q
15:42:42 <plot> :quit
15:45:09 <lyxia> ExpHP: stack build && stack exec name-of-executable
15:48:14 <paco> hello!
15:48:33 <ExpHP> hmmm
15:48:35 <paco> does anyone have knowledge of comonadic comprehensions (co-for)?
15:49:12 <paco> I need to solve one question because I'm trying to implement them in another language
15:49:20 <Gurkenglas> kuribas, is that competition thing public, so I can submit my attempt? If not, can I post it in public? If not, want a look at it?
15:49:28 <hpc> paco: i believe the term for those is mprehensions ;)
15:49:42 <paco> and I don't exactly know whether the yield should be wrapped or extracted before returned
15:50:42 <ExpHP> okay I'm not seeing memory explosions with "let !a = List.foldl' f (0 :: (Floating a)=> a) $ realToFrac <$> xs :: (Floating a)=> a"
15:50:54 <paco> hpc really?
15:51:53 <ExpHP> ahah! that's because it did type defaulting
15:52:02 <Tuplanolla> Not really, unless you think coconuts are nuts, paco.
15:52:25 <hpc> paco: no, it's a co-joke
15:53:34 <paco> *sigh* it's too late for this
15:53:43 <paco> I've been coding for too long
15:53:54 <Tuplanolla> Nap time!
15:53:59 <paco> no, PR first
15:54:05 <paco> if you could please help me
15:54:07 <paco> :P
15:54:56 <Gurkenglas> hpc, is that when you say something to someone else in order to make yourself laugh?
15:54:59 <Tuplanolla> I don't really know how comonad comprehensions should look like since we don't even have codo notation.
15:55:12 <juubla> Using happy passing the -d (debug) option, but not debugging output is generated, I can see it importing Debug.Trace, but it never actually uses anything from the module...
15:56:50 <reactormonk[m]> Is there a [a] -> Int -> Maybe a in the stdlib?
15:57:30 <k___> did you try hoogle?
15:57:38 <Cale> :t findIndex
15:57:39 <lambdabot> (a -> Bool) -> [a] -> Maybe Int
15:57:47 <Cale> oh, right :)
15:57:48 <geekosaur> probably not, on the grounds that you probably shouldn't be using a linked list if you want to do indexing enough for that to be useful
15:58:14 <Cale> Yeah, there's something in safe probably, but yeah, it's not all that common of an operation on lists.
15:58:14 <ChaiTRex> @hoogle [a] -> Int -> Maybe a
15:58:14 <lambdabot> Safe atMay :: [a] -> Int -> Maybe a
15:58:14 <lambdabot> Agda.Utils.List (!!!) :: [a] -> Int -> Maybe a
15:58:14 <lambdabot> CLaSH.Util indexMaybe :: [a] -> Int -> Maybe a
15:58:17 <reactormonk[m]> Tried hayoo
15:58:35 <reactormonk[m]> geekosaur: it's just a turtle script ^^
15:59:13 <Gurkenglas> reactormonk[m], you could do a caseof on the list that might have that additional argument at the end
15:59:14 <ExpHP> okay k___ here we go
15:59:16 <Cale> :t \xs n -> lookup n (zip [0..] xs)
15:59:17 <lambdabot> (Enum a, Num a, Eq a) => [b] -> a -> Maybe b
16:00:30 <lpaste> ExpHP pasted “k___: monomorphized vs polymorphic infinite folds” at http://lpaste.net/355286
16:00:46 <ertes> comonad mprehensions
16:02:18 <ertes> i don't think mprehensions would be very useful, mostly because i think codo would not be very useful
16:02:19 <ExpHP> btw lyxia was right of course :)
16:04:04 <EvanR> od notation for OI
16:04:49 <ertes> :t flip $ foldr (x go n -> if n > 0 then go (n - 1) else Just x) (const Nothing)
16:04:51 <lambdabot> error:
16:04:51 <lambdabot>     Pattern syntax in expression context:
16:04:51 <lambdabot>         x go n -> if n > 0 then go (n - 1) else Just x
16:04:58 <ertes> :t flip $ foldr (\x go n -> if n > 0 then go (n - 1) else Just x) (const Nothing)
16:04:59 <lambdabot> (Num t1, Ord t1, Foldable t) => t1 -> t a -> Maybe a
16:05:15 <ertes> i've been doing too much scheme lately
16:09:25 <k___> ExpHP: thanks! i tried running it and it still hangs though
16:09:47 <ertes> "daddy, i have a wish" – "what is it, dear?" – "i wish that some day all wars will be over, and that the sun will shine forever and…  and…" – "and?" – "and that some day GHC is just preinstalled everywhere"
16:09:57 <ExpHP> k___ the second one? Did you include NoMonomorphismRestriction (otherwise GHC will type-default it)
16:10:24 <k___> ExpHP: yeah, the pragma is there but GHC still defaulted it
16:10:28 <k___> to Double
16:10:35 <ExpHP> D=
16:10:38 <ertes> you know how they say: "i use vi, because it's available everywhere"…  GHC needs that, too
16:11:31 <EvanR> thatd be interesting
16:11:53 <ertes> busybox 2.0 change log: "Added GHC"
16:12:07 <EvanR> GHC for embedded, GHC for arduino
16:12:30 <ExpHP> k___:  what's your GHC version? I've got 8.0.2
16:12:46 <k___> 7.10.2
16:14:48 <reactormonk[m]> How do I get myself a total read?
16:15:08 <k___> ExpHP: GHC issues aside, thanks for the neat example and for trying it! cool to know that realToFrac just thunks everything (if i'm understanding the code right)
16:15:13 <EvanR> > reads "123abc" :: [(Integer,String)]
16:15:15 <lambdabot>  [(123,"abc")]
16:15:23 <EvanR> > reads "XXXabc" :: [(Integer,String)]
16:15:27 <lambdabot>  []
16:15:31 <k___> er, when polymorphic ^
16:15:32 <EvanR> also readMay from the safe package
16:15:38 <geekosaur> :t readMaybe
16:15:40 <lambdabot> error: Variable not in scope: readMaybe
16:15:45 <EvanR> readMaybe from the Text package
16:15:48 <geekosaur> oh right :/
16:15:48 <ertes> busybox FAQ: "Why has busybox become so huge? A: It's not really huge. It's just feature-complete now. You can always disable vi to free up some space."
16:16:01 <geekosaur> @index readMaybe
16:16:01 <lambdabot> Text.Read
16:16:10 <geekosaur> not Text package, just not in Prelude
16:16:27 <EvanR> ok base
16:17:41 <reactormonk[m]> @index readMay
16:17:41 <lambdabot> bzzt
16:17:59 <k___> i didn't know lambdabot could do that
16:18:02 <ExpHP> how rude
16:18:18 <reactormonk[m]> Text is fine
16:18:33 <ertes> lambdabot is full of surprises
16:18:42 <ExpHP> @yar
16:18:42 <lambdabot> Aye
16:18:42 <geekosaur> only for stuff that comes with ghc, I think
16:18:55 <geekosaur> base and a handful of other packages
16:19:29 <EvanR> its like u.s.s. enterprise, new beam or force field of the week
16:25:26 <mniip> dammit, someone keeps posting HTML to the ML, how dare they
16:25:46 <ertes> :t dinner
16:25:48 <lambdabot> p i z z a
16:26:05 <EvanR> i feel like this is a MUD... i can spot failures to infer RankNTypes errors by the general shape of the page of error message
16:26:28 <EvanR> i dont even see the error messages anymore
16:26:56 <ertes> EvanR: XP added, welcome to the next level!
16:27:13 <EvanR> :\
16:27:25 <ExpHP> you got 2 AP! How would you like to spend them?
16:28:10 <mniip> skill buy Dependent Types
16:28:31 <ertes> i would install GHC everywhere
16:28:52 <ertes> if i had 5 AP, i would built it into the OS
16:28:55 <ertes> *build
16:28:55 <EvanR> hahaha if haskell were an MMO
16:29:02 <EvanR> or a class in an MMO
16:30:09 <EvanR> you could also choose from C++, and scala
16:30:19 <ExpHP> Haskell used `fix (1:)`!
16:30:23 <ertes> no, haskell is not an MMO
16:30:27 <ertes> that's stackoverflow
16:31:00 <EvanR> start with language basics and upgrade to get extensions
16:31:05 <ertes> https://ro-che.info/ccc/13
16:31:06 <EvanR> or weird features
16:32:31 <ExpHP> pay2play for haskell prime
16:33:01 <mniip> EvanR, a big 'let f=join(,);g=f.f.f in g.g.g' approached from west, [T]ype/[E]valuate?
16:33:18 <EvanR> lol
16:34:46 <ExpHP> Somebody should adapt Slime Forest to just that
16:34:52 <ExpHP> "Curry Forest"
16:35:13 <mniip> that actually looks cool in the new ghc
16:35:47 <mniip> or in the old ghc
16:37:25 <reactormonk[m]> Recommended parser for haskell? Relatively simple parsing, preferably with backtracking.
16:37:57 <ExpHP> for haskell syntax itself, or for use in haskell?
16:38:47 <ExpHP> Parsec is pretty huge, and spinoffs like Megaparsec and Attoparsec automatically backtrack
16:39:17 <ExpHP> I mean huge in terms of usage/popularity
16:39:25 <mniip> reactormonk[m], psst kid, want to see some stuff? I have a parser library in 5 lines of code
16:39:57 <reactormonk[m]> mniip: :-P
16:40:02 <mniip> @hackage yoctoparsec
16:40:03 <lambdabot> http://hackage.haskell.org/package/yoctoparsec
16:40:04 <ExpHP> (you just have to wait for the entire haskell ecosystem to build)
16:40:12 <reactormonk[m]> ExpHP: does parsec backtrack?
16:40:21 * hpc imagines mniip wearing a trenchcoat saying "i got combinators you aint even heard of... what are you, an implementor?"
16:40:26 <ExpHP> reactormonk[m]: explicitly, through use of the 'try' combinator
16:40:52 <ExpHP> reactormonk[m]: otherwise, I think if it consumes partial input before failing, it is considered an overall failure
16:41:00 <mniip> well, to be fair, it could have more combinators
16:41:05 <mniip> but then it's more lines of code
16:41:10 <ExpHP> (at least that's what a rust library modeled after parsec does)
16:41:49 <mniip> it could have e.g lookahead aka language conjunction
16:42:42 <ertes> > (huge 0 3, huge 1 3, huge 2 3)
16:42:44 <lambdabot>  (4,6,24)
16:42:46 <ertes> > huge 4 3
16:42:52 <lambdabot>  mueval-core: Time limit exceeded
16:43:30 <mniip> it could have 'record :: Parser b t a -> Parser b t (a, [t])'
16:43:52 <mniip> and 'lookahead :: Parser b t a -> Parser b t c -> Parser b t (a, c)'
16:44:09 <mniip> but for these you have to unpack the FreeT "by hand" which I explicitly avoided in my library :p
16:47:18 <ExpHP> mniip: gotta conserve those precious points
16:48:43 <mniip> yeah my library is completely pointless
17:14:14 <ReinH> mniip: false
17:15:06 <mniip> false as in not point-free or as in actually not pointless?
17:16:15 <ReinH> Yes.
17:17:31 <ReinH> parseStream contains a point, and it's an instructive presentation of parsing.
17:18:21 <mniip> right
17:18:26 <mniip> looked over that somehow
17:18:33 <ReinH> :p
17:19:25 <ReinH> I like parameterizing by choice of non-determinism monad. It makes a nice presentation of things like L-Systems too.
17:19:55 <ReinH> A choice choice.
17:22:22 * mniip . o O ( class Parser p where token :: p b t t; parse :: p b t a -> (s -> b (t, s)) -> b a )
17:22:34 <mniip> a choice choice choice
17:22:43 <EvanR> fix choice
17:22:54 <mniip> = Proxy
17:24:19 <ReinH> mniip: pbtt yourself
17:24:41 <mniip> *s t a b*
17:37:26 <Gurkenglas> Where do I put something instead of "~/.ghci" if I'm using stack ghci?
17:38:10 <ReinH> I thought it still used that file
17:38:58 <geekosaur> you might want the local .ghci file
17:39:15 <geekosaur> (that is, ghci will read a .ghci in the directory you run t from if one exists)
17:53:36 <iqubic> What does the Huge function do?
17:53:43 <iqubic> Huge 0 3
17:53:52 <iqubic> > huge 0 3
17:53:54 <lambdabot>  4
17:54:02 <iqubic> > huge 2 3
17:54:04 <lambdabot>  24
17:54:29 <mniip> :t huge
17:54:30 <lambdabot> Int -> Integer -> Integer
17:54:39 <iqubic> > huge 4 4
17:54:43 <mniip> I suspect it might be ackermann or a related function
17:54:45 <lambdabot>  mueval-core: Time limit exceeded
17:54:47 <iqubic> > huge 4 1
17:54:49 <lambdabot>  2
17:54:51 <ertes> @undef
17:54:51 <lambdabot> Undefined.
17:54:54 <ertes> @let huge :: Int -> Integer -> Integer; huge 0 x = x + 1; huge n x = foldl' (flip ($)) x (replicate (fromInteger x) (huge (n - 1)))
17:54:55 <lambdabot>  Defined.
17:55:02 <mniip> yup, ackermann
17:56:10 <ertes> you can probably optimise it, because there are easy formulas for the lower indices
18:00:38 <ij> Does anyone have a repo on github that can be build and run with docker? (preferably the alpine kind)
18:00:50 <ij> Whatever it is, I just want to see it workk.
18:01:43 <ertes> ij: you mean a haskell app that runs in docker?
18:02:15 <ij> Yeah, and … with stack, I guess.
18:02:49 <ertes> the two seem orthogonal…  a haskell application running in docker is fairly easy to create using e.g. nix
18:04:35 <ij> I tried following https://www.reddit.com/r/haskell/comments/67c0a9/can_you_run_ghc_executables_in_an_alpine_linux/dgpzkdy/ , but that seems like broken advice.
18:05:44 <ertes> ij: i don't know anything about alpine, but for example nix produces full-closure images, so they should run everywhere, as long as it's the same architecture
18:06:28 <ij> Ugh, I have to learn nix, I guess. ;_;
18:06:54 <ertes> i can quickly create a small example, if you want
18:07:07 <ij> I was about to go to sleep.
18:07:33 <ij> I know you're a regular here, maybe let's do it at some point in the near future?
18:07:46 <ertes> sure
18:07:49 <ij> night night
18:07:58 <ertes> good night
18:14:23 <dmj`> ij: there is some work being done in nix to allow the libc in stdenv to be swapped out for musl.
18:18:12 <ertes> it would be much more useful, if GHC were a multi-output package
18:18:40 <ertes> unless you compile with static linking, the closure of haskell programs is well above 1.5 GiB
18:28:23 <joe9> Is there a better way of doing this: 11 - (mod 11 2) = 10. I want the highest multiple of 2 in 11.
18:29:14 <eschnett> joe9: (11 `div` 2) * 2
18:30:52 <slack1256> ls
18:31:04 <frugil> hellp
18:31:06 <frugil> hello
18:31:51 <ChaiTRex> slack1256: zomg.txt
18:32:50 <joe9> eschnett: Thanks.
18:33:56 <Gurkenglas> Can anyone tell why travis doesn't build this? https://github.com/ekmett/lens/pull/732
18:34:55 <mniip> have you tried clicking "details"?
18:36:37 <glguy> Gurkenglas: check with hvr, maybe he changed something with the cabal in his apt repo
18:36:56 <geekosaur> 8.2.1 has Cabal-2.0 and it looks like some types changed?
18:37:07 <joe9> eschnett: the div only works for Integral. I want to be able to do for double's. (div 11.5 2) * 2
18:37:21 <geekosaur> @index mod'
18:37:21 <lambdabot> Data.Fixed
18:37:31 <Gurkenglas> mniip, I mean I went to https://travis-ci.org/ekmett/lens/jobs/229572946 but that doesn't tell me much
18:37:37 <geekosaur> :t Data.Fixed.mod'
18:37:38 <lambdabot> Real a => a -> a -> a
18:43:23 <joe9> http://codepad.org/BhXlJCmN I need to get my head around these numbers . any help, please?
18:43:41 <joe9>  http://codepad.org/2e4Ru3uj is what I am trying to do.
18:44:01 <joe9> http://codepad.org/ED5Ucgra is the error
18:44:49 <Cale> :t Data.Fixed.div'
18:44:51 <lambdabot> (Real a, Integral b) => a -> a -> b
18:45:15 <hololeap> does anybody know an abstraction that would make this function more concise and understandable:
18:45:15 <joe9> got it, need a fromIntegral
18:45:27 <EvanR> why is that in Data.Fixed... seems generally useful
18:45:30 <Cale> joe9: Or perhaps you have the arguments the wrong way around?
18:45:33 <MarcelineVQ> :t 2.5
18:45:34 <lambdabot> Fractional t => t
18:45:40 <Cale> oh, maybe not
18:45:50 <joe9> oPlotBoxPrice :: Double -> Price -> Price
18:45:50 <joe9> toPlotBoxPrice i p = (fromIntegral (Data.Fixed.div' p i)) * i
18:45:55 <joe9> is what I ended up doing.
18:46:15 <hololeap> :t (\m f -> maybe id f m)
18:46:16 <lambdabot> Maybe a1 -> (a1 -> a -> a) -> a -> a
18:50:21 <hololeap> sorry, i'm trying to figure out how to properly explain the idea
18:50:42 <lyxia> flip (maybe id)
18:51:37 <Gurkenglas> :t alaf Endo foldMap
18:51:39 <lambdabot> Foldable t => (a1 -> a -> a) -> t a1 -> a -> a
18:51:58 <hololeap> i guess what i'm looking for is conditional processing, so it either applies a function to an argument or it doesn't, depending on conditions encoded in the argument
18:52:38 <EvanR> (a -> b) -> Either a a -> b
18:52:40 <hololeap> so like a Maybe specifically for functions where Nothing would just apply id
18:53:12 <Gurkenglas> Yes, you are talking about the Endo monoid.
18:53:18 <mniip> :t fromMaybe id
18:53:19 <lambdabot> Maybe (a -> a) -> a -> a
18:53:58 <hololeap> Gurkenglas: nice, i was just wondering what that was useful for today!
18:55:33 <Gurkenglas> mniip thats just worse ala Endo foldMap :P
18:55:58 <mniip> alright
18:56:47 <hololeap> Gurkenglas: unfortunately, i still don't know how to use it
18:57:24 <Gurkenglas> Got sample code to make more concise?
18:58:51 <Cale> fromMaybe id  is a good deal easier to understand than ala anything
18:59:08 <Cale> :t alaf
18:59:10 <lambdabot> (Rewrapped t s, Rewrapped s t, Functor g, Functor f) => (Unwrapped s -> s) -> (f t -> g s) -> f (Unwrapped t) -> g (Unwrapped s)
18:59:25 <mniip> sounds simple enough
18:59:25 <Cale> ... unnecessary
18:59:32 <mniip> :t alaf Endo
18:59:34 <lambdabot> (Functor f, Functor g) => (f (Endo a) -> g (Endo a)) -> f (a -> a) -> g (a -> a)
19:00:16 <Gurkenglas> i admit worse was just a cheeky formulation of "less general"
19:00:32 <hololeap> (\c -> maybe id (filter . (<)) c) :: Maybe (Int, Int) -> [(Int, Int)] -> [(Int, Int)]
19:01:29 <Gurkenglas> Where'd the Maybe come from?
19:01:49 <mniip> \c -> fitler (maybe (const False) (< c))
19:01:54 <hololeap> another function returns a Maybe (Int, Int)
19:01:55 <Gurkenglas> (by the way you can already eta reduce that to "maybe id (filter . (<))")
19:01:57 <mniip> (c <) rather
19:02:19 <mniip> no wai
19:02:24 <mniip> \c -> fitler (maybe (const False) (<) c)
19:02:37 <hololeap> heil fitler?
19:03:57 <hololeap> Gurkenglas: how would i use Endo to abstract this?
19:05:14 <Gurkenglas> "alaf Endo foldMap (filter . (<))", but I'd say there's no reason to replace "maybe id (filter . (<))" with that just yet
19:05:37 <Gurkenglas> hololeap, if this is the only place you use the result of that function, you could have that function return "[(Int, Int)] -> [(Int, Int)]" instead
19:06:00 <Gurkenglas> ("that function" = the one that returns "Maybe (Int, Int)"
19:07:48 <Gurkenglas> hololeap, alaf Endo foldMap makes sense iff it is conceivable that the Maybe might be replaced with other Foldables
19:08:23 <hololeap> oh, it actually comes from a recursive call :) e.g. the function takes a Nothing when it is first called and it passes a piece of the previous call's environment on further iterations
19:08:41 <hololeap> so i could just abstract it with StateT
19:09:07 <hololeap> or could i? i'm a bit confused
19:09:29 <Gurkenglas> you could pass id initially and replace it with filter (<c) once you get hold of a c
19:09:42 <hololeap> interesting idea
19:11:51 <hololeap> but I would still want the Maybe to be there since it conceptually embodies the idea of there not being an initial state
19:12:10 <EvanR> mmmm
19:12:21 <EvanR> that usage of Maybe sounds suspicious
19:12:36 <EvanR> "no state" is a state
19:12:45 <EvanR> paradoxically
19:13:19 <hololeap> i'm trying to solve a variation of the n-queens problem and my current algorithm isn't the best, but i'm trying to clean it up a bit
19:13:32 <hololeap> i'm not sure if the code works in its current state but i'll post it
19:15:38 <hololeap> https://gist.github.com/hololeap/0e0e72d3c4b5010c5f62938090c8ed51
19:16:17 <hololeap> line 42 is the function
19:16:29 <hololeap> this is after me screwing with it, hang on ...
19:17:12 <hololeap> ok it is closer to the original now
19:22:18 <hololeap> so anyway the algorithm works by keeping track of the "safe" tiles (where a queen on the board can't hit) and tries recursively applying this function on each safe tile
19:22:51 <hololeap> so it adds a queen to the first safe tile, recurses, keeps the result, then moves on to the next tile
19:23:00 <hololeap>  the Maybe is to keep track of which tile it is currently on. so, it starts as a Nothing
19:23:45 <kadoban> The usual backtracking by placing a queen on each row thing will work, right? Just the checks are a tad more tedious than the optimized one.
19:24:31 <hololeap> i haven't learned any methods to solve it, i'm just trying to figure it out as an exercise
19:25:40 <hololeap> anyway, my real question was about abstracting Maybe so that it either processes another value based on the Maybe or just does `id otherVal`
19:26:04 <hololeap> they just asked where the Maybe was from and i couldn't think of a way to explain it other than to post the code...
19:26:31 <kadoban> Oh I see. Heh I get distracted by algorithms easily :)
19:27:23 <hololeap> kadoban: i have heard of that method, but i still don't fully grasp how it works.
19:28:45 <kadoban> It's essentially just a brute-force search, except it stops broken solutions early
19:29:15 <hololeap> kadoban: that's exactly how one would describe my current algorithm, no?
19:30:03 <hololeap> i have to admit the problem kind of perplexes me, and i feel like there is something deeper to learn from it
19:31:06 <hololeap> maybe mine doesn't stop broken solutions early enough. it just does a depth-first search. i also admit that my knowledge of algorithms is pretty novice
19:31:14 <kadoban> Sounds very similar at least
19:32:30 <kadoban> The usual method explicitly encodes that there is no possible way to have two queens on the same row, and goes one row at a time, but other than that yours sounds very similar, just from the description you gave (didn't look at code yet)
19:32:50 <hololeap> i also want to find a way to optimize it so that it doesn't need to search for rotations of each solution
19:34:06 <hololeap> but, i digress...
19:41:28 <justkkay> Google search displays millions of results. But Google limits users to only 1000 links or so to be seen. Is it possible to access the millions of links?
19:43:02 <kadoban> justkkay: I kind of doubt it.
19:44:18 <hololeap> Google starts to give you captchas when you get very far down the list
20:01:45 <ab9rf> it's possible, but you'll have to apply to google for an API key and explain why you need that level of access.
20:02:45 <hololeap> because, you know, their mission "is to organize the world's information and make it universally accessible and useful"
20:03:01 <hololeap> universally accessible for those they approve
20:03:11 <ab9rf> no, their mission is to make money
20:03:22 <hololeap> this is out of their own mouth
20:03:46 <ab9rf> in their case, by organizing the world's information and making it accessible and useful to those willing to pay whatever they decide is reasonable.
20:04:03 <ab9rf> shrug, i don't have a problem with it
20:04:12 <ab9rf> you're free to build your own search engine
20:04:28 <ab9rf> and this is OT, so discussion terminated :)
20:06:34 <justkkay> how does one build your own search engine? Is there a way to find all the existing websites?
20:07:32 <ChaiTRex> justkkay: One way is to look at links.
20:07:37 <ChaiTRex> justkkay: Those show you some servers you may not have known about.
20:07:57 <hololeap> nmap -p- -iR 0
20:08:27 <hololeap> scan all the things
20:10:28 <koala_man> justkkay: traditionally you wrote your own crawler that followed links recursively. today you'd start with commoncrawl 
20:32:27 <jhorwitz> clear
20:45:10 <alv3da> Anyone up?
20:45:13 <alv3da> i need help
20:49:51 <kadoban> alv3da: Usually better to just ask your followup. There's many many people here.
20:54:55 <alv3da> can someone tell me where can  i contact a hacker who can help me hacking an android device
20:55:10 <kadoban> Not here.
20:56:44 <mniip> not on this network
21:01:27 <glguy> Is it possible to get Hackage to syntax highlight Haskell source in Markdown files (specifically the readme.md). I tried ```haskell ... ```
21:04:29 <alv3da> atleast tell me the room
21:04:45 <mniip> 1494129382 [06:56:22] <mniip> not on this network
21:04:53 --- mode: ChanServ set +q *!*@2405:205:618a:b867:55d5:3417:a58d:b9ca
21:08:05 --- mode: ChanServ set -q *!*@2405:205:618a:b867:55d5:3417:a58d:b9ca
21:12:08 <glguy> (In absense of a hackagebot) I uploaded my new library for parsing information out of configuration files. It's similar to optparse-applicative in how you use it: https://hackage.haskell.org/package/config-schema The example in the readme has syntax highlighting if you look at it on github https://github.com/glguy/config-schema
21:12:43 <glguy> The larger use of it is in my irc client
21:15:32 <mniip> I don't think I've ever seen syntax highlighting in that part of hackage
21:15:54 <glguy> OK, it might well not be possible.
21:15:55 <mniip> not sure if what you're asking for is at all implemented
21:20:59 <glguy> The package makes extensive use of generalized newtype deriving to avoid having to write various Functor/Applicative/Monoid/Alt/etc. instances and and takes advantage of GADTs if anyone was looking for a small example of either
21:25:18 <MarcelineVQ> glguy: this is relevant to me
21:25:40 <MarcelineVQ> iow thanks :>
22:13:12 <rotaerk> :i tug
22:36:42 <rotaerk> hmm... just wrote some hideous code; time to simplify...
23:21:11 <sophiag> i'm playing around with backtracking search using continuations and because mplus isn't associative it won't coverge on a solution, but instead of defining a custom mplus i figured i could just use <|> since cont should have an applicative instance now. however, ghci is requiring me to use an Alternative constraint and still failing just as when i used the mplus from Control.Monad. i'm confused as to why this isn't working
23:26:42 <Cale> sophiag: mplus should be associative
23:30:17 <sophiag> Cale: i just found Oleg's site :p
23:30:25 <sophiag> so going through all his stuff and having my mind blown
23:30:41 <Cale> haha, he's got years and years of it to go through :)
23:30:46 <sophiag> this is from here: http://okmij.org/ftp/continuations/Searches.hs
23:31:07 <sophiag> it's true the search doesn't terminate with regular mplus and does with his
23:31:46 <sophiag> i originally just wanted to learn enumerators then found this and now have no time left in the day. lol
23:32:11 <Cale> oh, perhaps his mplus isn't associative
23:32:20 <Cale> The usual one is
23:32:53 <sophiag> he says the other way around
23:33:10 <sophiag> oh, he probably meant to say commutative
23:33:19 <sophiag> it makes sense it would be associative but non-commutative
23:33:30 <sophiag> whereas <|> should be both
23:33:56 <mrkgnao> Cale: I did something terrible even though you advised me not to yesterday (I think). Well, rather, came close.
23:33:57 <Cale> I'm fairly sure he means that his mplus won't be associative.
23:34:29 <Cale> (the one implemented just above there)
23:35:47 <mrkgnao> fromIntegerP (Proxy :: Proxy 0) :: Neutral 'Add a => a
23:35:54 <mrkgnao> fromIntegerP (Proxy :: Proxy 1) :: Neutral 'Mul a => a
23:36:10 <mrkgnao> and for bigger numbers it imposes a Field constraint
23:36:25 <sophiag> i suppose that makes more sense. associative meaning a search won't terminate
23:38:12 <sophiag> oh yeah, what am i thinking...the typo is right there in the comments
23:38:44 <sophiag> "Generally speaking, mplus is not associative. It better not be..."
23:38:53 <sophiag> the first "not" is the typo
23:39:44 <mrkgnao> (should've been Ring above, sorry)
23:41:04 <mrkgnao> sophiag: the link you posted: :O
23:41:51 <sophiag> ikr?
23:43:25 <sophiag> he also has the best zipper implementation i've seen. altho i've yet to try the one in the Lens library since they forked it
23:44:51 <mrkgnao> somewhat similar weirdness: http://math.andrej.com/2007/09/28/seemingly-impossible-functional-programs/ 
23:48:20 <sophiag> this is all actually a lot like the DSL Cale helped me with a bit (that i never finished debugging). not surprising since it's based on Amb from Scheme and Oleg's a Scheme person
23:49:16 <sophiag> i planned on doing some stuff like this with it. actually the pythagorean triplets he uses to demo the backtracking searches in that code i linked to is the very first example for Amb in SICP
23:49:39 <sophiag> Cale: so if you're wondering what i was thinking with that thing... :D
23:51:17 <mrkgnao> is Amb something like a list monad?
23:51:45 <Cale> sophiag: You might also find http://okmij.org/ftp/papers/LogicT.pdf interesting
23:51:50 <mrkgnao> the only time I've ever heard of it is from the Conal Elliott episode of Haskell Cast, where he mentions it in passng
23:52:01 <Cale> https://hackage.haskell.org/package/logict
23:52:18 <Cale> mrkgnao: That's a different amb
23:52:50 <Cale> Or rather, I would expect him to be talking about unamb :)
23:53:11 <sophiag> mrkgnao: holy shit! that post is by Martin Escardo who co-authored Calculus in coinductive form. that's one of my favorite papers. i'm actually including it in a talk i'm giving in a few weeks about automatic differentiation 
23:53:21 <mrkgnao> Cale: yes, it was unamb
23:53:37 <sophiag> unamb?
23:54:07 <mrkgnao> something like a diamond-graph of dependencies would be what I understood
23:54:32 <mrkgnao> there's some ambiguity in the middle, but it can be resolved at the point where you ask for a concrete answer
23:54:47 <sophiag> Cale: thanks for the link. i guess that was before Oleg turned against monad transformers? tbh i agree with him on that one
23:55:05 <Cale> unamb :: a -> a -> a  is a function which is meant to be provided with two semantically equivalent expressions, and it results in the first of the two which is available.
23:55:12 <mrkgnao> now obviously I don't know Scheme so this is all vague analogizing, and Cale knows better
23:55:51 <mrkgnao> Cale: what use would that be? something like the race* functions from async?
23:56:07 <Cale> yeah
23:56:15 <Cale> oh, also my description isn't quite right
23:56:25 <Cale> They have to be expressions which are either equal or bottom
23:56:38 <Cale> i.e. unamb _|_ y = y and unamb x _|_ = x
23:57:08 <mrkgnao> but how would you...? 
23:57:10 <mrkgnao> whoa
23:57:10 <Cale> and yeah, it's sort of like race
23:57:21 <mrkgnao> so bottom is "infinitely delayed"?
23:57:55 <Cale> So, it behaves a bit like const
23:58:04 <Cale> except for both arguments :)
23:58:41 <sophiag> i'm trying to remember the parallel (so to speak) for unamb in Go
23:58:48 <Cale> (it's really unsafe -- you have to ensure that the expressions will indeed be equal, since if you don't, it'll just pick between them in a way which depends on evaluation order)
23:59:32 <sophiag> ah, right. that's what i was imagining
23:59:46 <sophiag> it is still nondeterministic though?
23:59:48 <sophiag> hence the name?
