00:09:18 <EvanR> how i learned to stop worrying and love reversing a list used as a log
00:09:30 <EvanR> well a finite log
00:12:36 <EvanR> thinking about making a structure based on IntMap which gives you a -> Log a -> Log a, and you can extract a list or a finite portion of this later
00:13:20 <EvanR> but since i havent seen anyone do this, im wondering what im missing
01:50:44 <Test1223> Hey, I just started getting to know Haskell in Uni, and have a beginner exercise that is recommened to do...and I think it's quite simple, but I still can't work it out. Is it okay to ask for help with that here?
01:51:49 <c_wraith> Test1223: sure.  use a pastebin (lpaste.net is provided for haskell code, if you need one) for any code you have, a description of the trouble you're having, and any error messages you are getting.
01:57:52 <[exa]> Hm guys, is there some good latex package for typesetting haskell source?
02:03:26 <cocreature> [exa]: the standard latex packages for typesetting source code should work, e.g. listings or minted
02:08:47 <[exa]> great, thanks
02:09:02 <[exa]> i was battling with minted's python, listings work greaat
02:11:13 <Test1223> https://pastebin.com/gi7A7DXu well here's my problem, it's kinda embarassing lol. And sadly I don't have any code yet. I can imagine what it should work like, but I have no idea how to implement it. Can anybody give me a hint in the right direction?
02:12:06 <oherrala> Test1223: make a function which checks if the first element of the list is the element given
02:14:19 <oherrala> Test1223: then, if the above check fails, you'll take tail of the list and do the check again => that's recursion
02:14:51 <lpaste> Test1223 pasted “Test 1” at http://lpaste.net/1304125987176316928
02:15:09 <lpaste> Test1223 pasted “Test 1” at http://lpaste.net/1321772564686569472
02:16:05 <Test1223> sorry didn't know how lpaste.net worked.         I have tried it like that, but I think I am doing something wrong
02:27:42 <ErinvanderVeen> Test1223: I want to ask you to consider the following things: 1. What happens when you run out of elements in the List. 2: You're comparing a (which is an a) and x (which is a b), can you do this?
02:30:45 <Test1223> If I run out, I got an empty set which then means the statement is false. And I thought I would be comparing input "a" with input "b", maybe I understood something wrong
02:32:43 <ErinvanderVeen> The a and the b in the function definition define the type. Right now, I could call your function like such: check 1 [true], is a little weird. You would ideally want that your function could only be called with the same type element as list.
02:35:22 <grizwako> You probably want to compare Int with [Int]
02:35:57 <Test1223> https://thepasteb.in/p/2RhKyVOp5Q4c4 I got it working now, so a -> [a] means, I compare and a to a list which contains a's right?
02:36:04 <grizwako> yep
02:36:31 <ErinvanderVeen> I see you also added a patternmatch for the empty list.
02:36:38 <grizwako> and you handled empty list, this looks fairly good to me
02:36:46 <grizwako> (i am newbie myself)
02:37:35 <Test1223> Then another question I have, I added the (Eq a) because the compiler told me lol...if I got it right the purpose is to check if a and [a] are the same type, right? But I thought the letter a implied that
02:38:25 <grizwako> yeah, but there are types that you can not directly compare
02:39:28 <grizwako> http://stackoverflow.com/questions/10956419/why-isnt-every-type-part-of-eq-in-haskell
02:40:54 <Test1223> I will read that, thank you. And another question: when defining a function let's say a -> [a]  -> a -> Bool   Is the last part always the result and everything before that an input?
02:41:00 <Test1223> Hope that question makes sense
02:41:08 <ErinvanderVeen> That question does make sense
02:41:28 <ErinvanderVeen> It has to do with the beauty of functional programming.
02:41:40 <grizwako> sorry if it looks scary, it is not so much, when you get to map/filter, it will click
02:42:22 <grizwako> answer to your question is yes, there is more to it (partial application)
02:42:47 <ErinvanderVeen> If I give your "a -> [a] -> [a] -> Bool" a single Int, It cannot return an answer. Instead, it will return a new function: [Int] -> Int -> Bool.
02:43:03 <cocreature> Test1223: "Eq a" doesn’t mean that you can compare if things are of the same type. It means that if you have two _values_ that are _both_ of the same _type_ a. you can check if they are the same values
02:43:31 <ErinvanderVeen> Typo: Should be "a -> [a] -> a -> Bool"
02:44:13 <Test1223> thank your for all the answers, I think I understand it better now
02:44:52 <Test1223> Is experience with non-functional languages advised before getting to know a functional one, btw?
02:45:05 <grizwako> depends on how you are learning
02:46:27 <grizwako> generally, such experience will help because you will have some idea about how data is flowing trough your program
02:46:42 <ErinvanderVeen> And they can also provide you with basic knowledge on types.
02:47:18 <Test1223> I take computer science classes, but I started in summer semester. I have what people usually have in the 2nd semester, and I will have in my 2nd what they have had in the 1st. It's meant to not require backround knowledge, but I think some courses can be confusing without having done the prior stuff yet
02:47:20 <grizwako> personally, I think it would be better if people learned functional first and other paradigms later
02:48:16 <[exa]> Test1223: imho every programmer should know how to do structured programming in assembly (= almost in C) because that gives you a very good understanding how actual hardware works. With some small exceptions the rest of non-functional programming is expendable.
02:51:24 <[exa]> Test1223: anyway, data structure complexity analysis is one of the exceptions -- most of them are suited for imperative programming with references.
02:52:36 <Test1223> I will have some assembly later this year, so I hope it will help me understand somethings better then
02:56:07 <maerwald> [exa]: uhm?
02:56:17 <maerwald> there are a lot of non-functional programming languages that are not expendable
02:56:31 <maerwald> but this is probably OT now
02:56:37 <maerwald> wasn't there a channel for derailed discussions?
02:56:45 <ongy> -overflow exists
03:37:10 <Test1223> https://pastebin.com/09aq5Yzc back with another problem :(
03:37:36 <Test1223> not sure what I am doing wrong this time
03:37:59 <ongy> Test1223: what's the error?
03:38:43 <Test1223> variable not in scope
03:39:31 <ongy> and I can tell you, you are overthinking things, or not thinking enough. (this can be really short, but let's see why your version doesn't work)
03:39:53 <ongy> Test1223: which one? The paste looks ok to me, can you add the error message
03:40:50 <Test1223> Well I think I could also just add the two lists together, if you mean that with overthinking. (It's an optional exercise given to use and it says we have to program it recursive, so I am not sure if adding both lists would count as recursive or not)
03:41:38 <NextHendrix> hi guys
03:41:47 <NextHendrix> trying to get the title from a page given the url
03:41:57 <NextHendrix> having a little trouble when the page title has emojis in it
03:42:18 <NextHendrix> https://ptpb.pw/piOH/hs  -- current rough draft
03:42:57 <NextHendrix> gives "https://sighup.nz (Ahoy-hoy \226\152\131 SIGHUP)"
03:43:09 <grizwako_> Test1223, you can remove Eq a constraint
03:43:25 <NextHendrix> should be Ahoy-hoy ☃ SIGHUP
03:43:40 <Test1223> it says couldn't match expected type '[a] with acutal type '[a] -> a]'
03:44:10 <grizwako_> add (x:xs) (y:ys)
03:44:43 <lyxia> NextHendrix: how are you printing it
03:45:14 <NextHendrix> well the function returns an IO ByteString
03:45:34 <Test1223> grizwalko_ where add that? in the last line?
03:45:35 <ongy> Test1223: ah right, you are only giving 1 argument to add' in the second clause
03:46:45 <grizwako_> Test1223,  you have two lists, you need to combine heads of each into a list and add tails of each to what you have combined
03:47:15 <Test1223> add' :: (Eq a) => [a] -> [a] -> [a]
03:47:16 <Test1223> add' a [] = a
03:47:16 <Test1223> aaaah
03:47:19 <Eduard_Munteanu> > show "https://sighup.nz (Ahoy-hoy \226\152\131 SIGHUP)"
03:47:21 <lambdabot>  "\"https://sighup.nz (Ahoy-hoy \\226\\152\\131 SIGHUP)\""
03:47:25 <Test1223> oops; ah I get it now
03:47:44 <Eduard_Munteanu> > show "Ahoy-hoy ☃ SIGHUP"
03:47:46 <lambdabot>  "\"Ahoy-hoy \\9731 SIGHUP\""
03:47:46 <Test1223> it works now, thank you guys again.
03:48:28 <ongy> Test1223: I think that example isn't really a good one though, add' = (++) makes this thing rather minimal
03:48:29 <grizwako_> Test1223, you should have one ":" and one  "++" in your last definition
03:48:30 <amx> NextHendrix: take a look at Data.Text.Encoding
03:48:40 <lyxia> NextHendrix: \226\152\131 is UTF-8 for ☃
03:48:59 <NextHendrix> amx: thanks
03:49:03 <NextHendrix> lyxia: i assumed as much
03:49:08 <grizwako_> and you have to handle case where first list is empty and when second list is empty
03:49:11 <Eduard_Munteanu> Yeah, you probably don't want a ByteString.
03:49:35 <lyxia> and a bytestring doesn't assume any encoding
03:50:24 <ongy> grizwako_: first and second list empty work with the current version
03:50:59 <grizwako_> I know :)
03:51:08 <Test1223> Actually it gives me an error if I don't  handle those cases
03:51:16 <Eduard_Munteanu> Actually, you probably want to convert String directly to Text.
03:51:22 <ongy> oh right, it tells you with -Wall
03:52:11 <ongy> converting string to bytestring is always a mess with encodings
03:52:38 <Test1223> grizwako_ what do you mean with having one "." and one "++" in my last definition?
03:52:45 <grizwako_> one ":"
03:53:51 <grizwako_> in your last "line" where you are doing "appending" there should be no []
03:54:50 <Test1223> I changed that, and it works now. Thanks. And the ":" is no requriment
03:54:58 <grizwako_> example: [1] ++ [2] == 1 : 2 : []
03:55:50 <Test1223> https://thepasteb.in/p/lOhO41nqN3ZCB I just did it like that now
03:56:30 <grizwako_> well, it works, but I think you missed point of exercise
03:57:13 <Eduard_Munteanu> I think the exercise should have disallowed the use of (++) altogether.
03:57:18 <grizwako_> you should try to use ":" and recursion
03:58:13 <Test1223> I just roughly translated the exercise there are several others which are part of it, this one was one of few, all with the same rules. I think I need to use the ":" later on, but I 'm not sure
03:58:19 <grizwako_> I will throw out some "code" here, and  think about it for a bit
03:58:48 <Test1223> How would I got about handling the case if one list contains numbers and the other chars though?
03:59:19 <Eduard_Munteanu> Don't you have lists of the same type?
03:59:24 <grizwako_> [1] ++ [2] ++ [3,4,5] === 1:2:3:4:5:[] === 1:2:3:[4,5] === 1:[2,3,4,5] === [1,2,3,4,5]
03:59:46 <Eduard_Munteanu> :t (++)
03:59:48 <lambdabot> [a] -> [a] -> [a]
04:00:39 <Toto_> palindrome :: (Eq a) => [a] -> Bool  palindrome [xs] = True palindrome xs = if head xs == last xs then palindrome (tail xs) else False
04:01:01 <Toto_> i cannot figure out why my code is worng
04:01:09 <Test1223> ah true
04:01:19 <grizwako_> Test1223, if you have later exercises that require : and recursion, it is fine, just continue doing them
04:01:28 <Eduard_Munteanu> Toto_, you drop the first element but not the last.
04:01:47 <Toto_> oh right
04:01:50 <Toto_> thanks 
04:02:10 <Test1223> grizwako_ yes of course
04:02:19 <Eduard_Munteanu> Toto_, you also need to handle empty lists
04:02:34 <Toto_> ok will add that too
04:03:30 <Eduard_Munteanu> Toto_, to be fair, there's an easier and more succint way of doing it.
04:03:54 <Toto_> yes i am listening
04:03:59 <Eduard_Munteanu> :t reverse
04:04:01 <lambdabot> [a] -> [a]
04:04:16 <Eduard_Munteanu> That's a hint ^^.
04:04:45 <Toto_> i have to check if reverse of the list is equal to the list
04:05:09 <Eduard_Munteanu> Yep.
04:05:28 <Toto_> thank you for the guidance
04:37:51 <nikhil_> how can I add indented code here?
04:40:08 <ongy> where? if you want us to read it, lpaste.net is your best address
04:41:12 <nikhil_> what is lpaste.net? i am new to IRC channel
04:42:48 <ongy> lpaste.net is a website. It's in the spirit of pastebin, just better :) at least for everything haskell related. You can put your code in there and post the link to it here (pasting more than 2 lines in irc is generally frowned upon)
04:43:21 <nikhil_> ok 
04:59:58 <SepakoRayl> Hello guys, I have a design problem regarding the renaming/typecheck stages for a compiler of a toy language I am making. Does anyone have the time to give a fast advice?
05:02:39 <simon``> When writing a parser should I write it in such a way that so it will accept *only* valid dataformat or should I allow (for simplicity) a superset of input data and do a validity check later on?
05:03:45 <cocreature> SepakoRayl: just asking your question directly is going to work better
05:04:31 <ongy> simon``: depends a little on how/what you have to check. Generally full parsing/validation before anything else is a good thing, but checking things like length fields can be better as a 2nd step (but I would do it in the parser api)
05:06:07 <simon``> ongy: I want to parse chess PGN files and I am unsure which checks the parser should do and which I should do later on
05:06:31 <simon``> e.g. valid move checks seem to me a bit much for a parser
05:07:20 <simon``> on the other hand it should probably check if the move numbers appear in correct order 
05:07:47 <ongy> I agree. But it would make sense to bundle those from an api side. So when the application calls "readPGN" (or whatever you call it) you get back something that's fully checked, but have a smaller parser (parsec?) and then some logic on the parsed structures
05:07:49 <cocreature> simon``: generally, I just do what’s easier in a particular case
05:08:06 <cocreature> and I agree with ongy, include those checks in the same API
05:09:22 <simon``> Ok, that makes sense
05:10:23 <simon``> I am using megaparsec, but separating the advanced logic from the parser but don't expose the distinction to the end user is probably a good idea
05:10:34 <SepakoRayl> ok here goes nothing, I have the following ast: http://lpaste.net/355723. Now I will most likely use the state monad to implement the renaming actions but I see myself writing multiple renameNodeType actions. I can write a typeclass but it feels a bit hackish. Is there a better approach or am I overthinking this? Just trying to pick up best approac
05:10:34 <SepakoRayl> hes for learning purposes.
05:21:31 <cocreature> SepakoRayl: what do you mean by multiple “renameNodeType” actions? one for each type?
05:21:31 <zeta> hi there! I'm looking for a ToJSON instance for Certificate (the one in X509). Unfortunately, it doesn't exist in Data.X509 and it cannot be derived automatically (there a representation choice to be made). Any pointers?
05:26:01 <Boomerang> zeta, why do you need a ToJSON instance for X509? Quickly looking into it, it looks like the standard way to serialize/deserialize x509 is by using ASN.1 which the Haskell x509 package seems to be providing an instance for (ASN1Object).
05:28:16 <zeta> Boomerang: i'm trying to do that because I want to ingest it in elasticsearch for full text search. I didn't try deriving json instance for ASN1Object though
05:29:05 <SepakoRayl> cocreature yes one for each type.
05:29:36 <cocreature> just write separate functions. a typeclass does not really help you here
05:32:41 <SepakoRayl> mhm I guess it just looks a bit ugly so I was looking for alternatives, anyway I will get back to it, thanks
05:36:02 <cocreature> SepakoRayl: generally, when you’re thinking about creating a typeclass, think about whether you can write useful code that is polymorphic and uses this typeclass. for your example, I doubt that’s the case. you would just be using a typeclass to reuse the same identifier
05:36:50 <SepakoRayl> That's the reason it felt hackish.
05:38:01 <SepakoRayl> yea ok I will jus go with multiple functions and I will tolerate the typed names
05:55:48 <cspollard> I'm struggling with this idea about monad transformers
05:55:55 <cspollard> it seems like you should always be able to go from
05:56:06 <cspollard> t m a -> m (t Identity a)
05:56:37 <cspollard> does anyone know if this is already in a library?
05:56:59 <cspollard> it's almost like a MComonad a la MMonad from the mmorph library?
05:59:02 <ertes> cspollard: try this:  StateT s IO a -> IO (s -> (a, s))
06:00:45 <cspollard> ertes: you mean try creating such a function?
06:03:14 <hpc> i read that as "McMonad"
06:03:31 * hpc orders 3 happy/alex meals
06:03:49 <cspollard> hpc: :-D
06:04:03 <cspollard> hpc: or maybe :-O is more appropriate
06:04:44 <hpc> cspollard: btw i thiiiiiink the concept you're looking for is commutative monads
06:04:54 <hpc> but i could be wrong, you should try out the math yourself
06:06:51 <cspollard> hpc: seems plausible, but I would want a monad trans t such that forall m I can "swap" t and m, right?
06:07:12 <cspollard> hpc: I guess t itself is not a monad
06:07:21 <ertes> cspollard: yes
06:08:21 <ertes> i think it's a form of distributivity
06:08:29 <cspollard> ertes hpc: I am wondering if such a thing is already coded up in a library?
06:08:44 <cspollard> ertes hpc: it seems useful... yes some kind of distributivity indeed
06:10:02 <ertes> if there were such a library, 'free' woud probably use it
06:10:19 <ertes> https://hackage.haskell.org/package/free-4.12.4/docs/Control-Monad-Trans-Free.html#v:joinFreeT
06:11:46 <cspollard> ertes: thanks will have a look
06:15:12 <systadmin> Is there a way to convert a string to Integer or Float?
06:16:12 <exarkun> Do you mean is their either a way to convert a string to an Integer or a way to convert a string to a Float?
06:16:23 <exarkun> Or do you mean is there a way to convert a string to an Either Integer Float?
06:17:34 <systadmin> Is there a way to convert a string to Integer 
06:18:51 <exarkun> One way you can find the answer to a question like that is to search Hoogle for the type signature that such a function would necessarily have
06:19:01 <exarkun> Hoogle: https://www.haskell.org/hoogle/
06:19:11 <exarkun> So, for example, try searching for Text -> Integer
06:19:33 <systadmin> ok
06:21:15 <exarkun> Since there are a bunch of different string types, you might want to try a few to see if you get interestingly different results (eg there might be a nice `String -> Integer` that you don't find if you only look for `Text -> Integer`, etc)
07:00:49 <NextHendrix> is there any documentation anywhere for Data.Text.Format
07:04:48 <sm> https://hackage.haskell.org/package/text-format/docs/Data-Text-Format.html
07:10:58 <kuribas> I did a job test on hackerrank (out of curiosity, not interest).  They masked a runtime error in the output.  How would that ever be useful?
07:11:45 <kuribas> Alright, in real life you don't get test cases for free, but why no error message?
07:22:28 <buglebudabey> i have to parse the following with aeson: https://en.wikipedia.org/w/api.php?action=query&titles=Albert%20Einstein&prop=links. Do I have to make a data type to parse the whole thing into even though i only care about the links?
07:35:03 <kuribas> Would copying code from an open source library be considered cheating in a contest?
07:35:10 <wilornel> what's a challenging task I could try to solve using haskell?
07:35:50 <kuribas> something practical?
07:36:15 <wilornel> yeah that would also be nice
07:36:23 <wilornel> oh... Is that it? just something practical? haha
07:37:00 <buglebudabey> wilornel anything game related ive found to be a hurdle, but that's just me
07:37:21 <exarkun> kuribas: Different contests have different rules.
07:37:27 <kuribas> wilornel: I mean, other than an exercise from a haskell course, or from one the programming contest sites.
07:38:10 <lyxia> buglebudabey: you can just write a type with the fields you need
07:38:22 <kuribas> exarkun: well, they say no cheating or plagiarism, but it isn't well defined.
07:38:42 <exarkun> kuribas: Plagiarism is pretty well defined, I think.  It's use of someone else's work _without citation_.
07:39:06 <buglebudabey> lyxia oh really, so if i parse json with just the fields 'links' and 'title' i could do that?
07:39:07 <exarkun> kuribas: But when in doubt, ask?  I'm sure the contest organizers want to help the contestants participate fairly.
07:39:12 <kuribas> exarkun: So I'm fine if I cite the source of a datastructure?
07:39:21 <lyxia> buglebudabey: sure.
07:39:38 <exarkun> kuribas: I don't see how that could be called plagiarism.
07:41:08 <kuribas> exarkun: And I suppose cheating means looking up the solution on google or letting someone else do the work.
07:41:10 <lyxia> past some level, these challenges are more about recognizing the right data structure to use rather than implementing it
07:41:55 <exarkun> kuribas: Could be.  I think it depends on the contest.
07:42:11 <kuribas> lyxia: the last "expert" question involves a suffix tree.  Creating one is a lot of work relatively...
08:20:00 <CoolerX> is there some way to create new domains from the primitives?
08:20:55 <CoolerX> newtype PositiveInt = Int x | x > 0 
08:21:05 <geekosaur> no
08:21:12 <adamCS> Hello! type-level-list question:  If I have a type-level-list membership proof GADT, it's easy enough to turn that into an int indicating the list position of the element.  Is it possible to go the other way?  I'm trying to serialize and, the hard part, deserialize, these proofs. Here's a paste with things more explicit: http://lpaste.net/355728
08:21:54 <CoolerX> geekosaur, is there some fundamental reason thats not a feature?
08:24:22 <geekosaur> the type system doesn't support subtyping. specifically: it's a runtime condition, it cannot be checked at compile time
08:24:37 <hpc> ^
08:25:04 <hpc> as soon as you have a type that captures a value being > 0, you need to track the property of being greater than zero for everything statically
08:25:32 <geekosaur> you can do it by carrying around type level proofs like agda and idris, but that gets painful _fast_
08:26:03 <hpc> usually in those languages you take a more constructive path and design the type such that it only expresses the properties you want
08:26:11 <hpc> consider data Nat = Z | S Nat
08:26:30 <maerwald> geekosaur: why
08:33:00 <lyxia> adamCS: the problem here   fromInt :: Int -> TypeListElem xs x   is that x and xs can be instantiated arbitrarily at the call site.
08:33:31 <lyxia> adamCS: you must hide them with an existential type
08:33:36 <EvanR> CoolerX: you can use Numeric.Natural though
08:33:48 <EvanR> or Word instead of Int
08:34:06 <adamCS> lyxia:  Yes.  I kind of get that.  But I'm not really clear how.
08:34:47 <EvanR> maerwald: intuitive facts of number theory may not have a convenient proof that you can churn out before lunch
08:34:54 <adamCS> lyxia: I can tell from the errors that I'm not constraining x and xs enough somehow.  But at that point I'm stuck.
08:35:04 <EvanR> especially in haskell
08:35:26 <maerwald> EvanR: well sure, but that's just the learning curve with proof assistants
08:35:48 <maerwald> it sounded like he's saying it doesn't scale or something
08:36:01 <EvanR> doing it in haskell surely is more painful than even that
08:37:06 <EvanR> also i havent seen too much interest in treating Int that way 
08:37:29 <EvanR> unless we go liquid haskell
08:38:43 <EvanR> CoolerX: see also liquid haskell
08:39:23 <lyxia> adamCS: you will also need to represent the length of the list in case your index goes out of bounds. I added some types you can use for this. http://lpaste.net/355728#a355729
08:40:03 <maerwald> EvanR: sure, but he was talking about Agda, Idris and so on where this is part of the language/compiler
08:40:46 <EvanR> i assumed we were talking about attempting to be like agda within haskell, given the context
08:42:42 <maerwald> EvanR: I agree that's a rather awkward attempt
08:43:10 <adamCS> lyxia: Thanks!  I will fiddle from there and see where I can get.  Why does that hiding help?  I would sort-of understand if the existential's constructor also had some constraint that enforced the membership of x in xs but in this case all it does is hide it.  I'm confused.
08:43:52 <EvanR> i still believe in the prospects of a general program of doing everything within something like agda, proving everything, and outputting the real code in haskell, ocaml, C
08:44:16 <maerwald> EvanR: it would be better to output it in C so you can also try to prove performance properties on it
08:44:19 <EvanR> because i havent seen enough to make me think thats unfeasible
08:44:30 <maerwald> that's what the fstar project mitls tries to do
08:44:48 <EvanR> yes im writing a lot of C code at work these days, for arduinos, i feel like i could prove its right
08:45:06 <EvanR> i feel silly writing the C code directly
08:45:16 <adamCS> lyxia:  Ah.  I get it.  Now the function decides x, not the caller.
08:45:23 <adamCS> lyxia:  Thanks!
08:46:54 <CoolerX> EvanR, why is liquid haskell not standard?
08:47:02 <EvanR> its a different language
08:47:36 <CoolerX> why not make it part of haskell?
08:47:44 <EvanR> as cool and simple as basic haskells type system, this is just the beginning of a huge universe of things to try
08:48:29 <EvanR> CoolerX: honestly i dont know liquid haskell so couldnt tell you the prospects of making extensions in ghc for it
08:49:04 <CoolerX> is it slower at runtime?
08:49:24 <CoolerX> all the book keeping is done at compile time right?
08:49:42 <EvanR> the idea is to check bounds at compile time
08:49:57 <EvanR> not what else it can check
08:50:25 <EvanR> the more you check at compile time, the less you have to check at runtime, even for detecting fatal errors
08:51:28 * EvanR looks at stack of papers consisting of a billion languages to check a billion different things at compile time
08:57:50 <CoolerX> EvanR, doesn't liquid haskell check arbitrary predicates at compile time?
08:58:04 <CoolerX> seems like that would be enough to check everything
08:58:05 <EvanR> no
08:58:24 <EvanR> not arbitrary
08:58:43 <EvanR> you have to be able to express it in their language
09:02:53 <CoolerX> EvanR, anyway why do we use haskell instead of liquid haskell?
09:03:06 <maerwald> CoolerX: it's not "instead"
09:03:08 <davean> CoolerX: They're not or
09:03:12 <maerwald> liquidhaskell is an extension
09:03:16 <geekosaur> because liquid haskell is experimental and known to be buggy and unstable
09:03:46 <EvanR> gaseous haskell must be really bad then
09:04:00 <EvanR> supercritical haskell
09:04:29 <bjs> plasma haskell
09:08:32 <CoolerX> bjs, is that the haskell used to program particle accelerators?
09:08:44 <bjs> CoolerX: whatever it is it's the hottest language around
09:24:49 <maerwald> HDD :P (aka hype-driven development)
09:38:30 <izabera> WHY DOES EVERYTHING TAKE A PETABYTE OF RAM TO COMPILE
09:39:02 <ab9rf> dpm
09:39:15 <ab9rf> doesn't everyone have a petabyte of ram?
09:39:26 <izabera> my laptop doesn't
09:39:32 <ab9rf> get a new one
09:39:48 <ab9rf> honestly, i have no idea what you're talking about
09:39:50 <hpc> 640 petabytes of ram should be enough for anyone
09:40:06 <ab9rf> i have 8 GB and can compile most things with no trouble
09:40:16 <hpc> i compiled ghc on a box with 1G of ram
09:40:35 <hpc> (6.12-ish or early 7)
09:41:00 <hpc> ((it was a while ago))
09:41:15 <izabera> how long did it take?
09:41:18 <izabera> a few hours?
09:43:33 <ab9rf> i've never actually attempted to compile ghc
09:43:39 <ab9rf> never had a good reason to do so
09:45:01 <hpc> ab9rf: i was under the influence of being a young(er) idiot and decided that was the easiest path to upgrading ghc on an ubuntu box
09:45:21 <hpc> i have since learned the error of my ways and run fedora on slightly less embarassing hardware with stack
09:45:32 <ab9rf> heh
09:46:04 <hpc> it's a decent exercise once in a while though
09:46:18 <hpc> just compile the bleedingest-edge ghc you can and try out whatever the newest thing is
09:46:37 <hpc> packaging be damned
09:47:06 <hpc> izabera: i just started it in a new tab in screen and went back to irc
09:47:11 <hpc> izabera: at the end of the day it was done and working
09:48:31 <izabera> literally "at the end of the day"
09:49:03 <hpc> it could have been 6 hours or 15 minutes :P
09:51:13 <hpc> oh, i converted a coworker to haskell this week
09:51:52 <hpc> he read through LYAH up to the Functor chapter (didn't write any haskell code though)
09:52:12 <hpc> then went to read some perfectly idiomatic python and it all looked terrible and noncomposable
09:52:15 * hpc was so proud
09:52:33 <EvanR> watch out now http://mypy-lang.org/
09:52:52 <StoneToad> lol hpc 
09:53:05 <hpc> i think i have read that PEP
09:53:10 <hpc> it's pretty crap
09:53:32 <hpc> an optional extension that enables optional type checking that doesn't have a supported implementation
09:55:09 <EvanR> gradual typing
09:55:22 <EvanR> very gradual
09:55:37 <EvanR> "use static types where it makes sense, otherwise dont"
09:56:06 <hpc> and then it never makes sense because the lower-level functions aren't written with types in mind
09:56:26 <hpc> it's right up there with "evenually consistent" in terms of lying buzzwords
09:59:09 <maerwald> EvanR: mypy is awesome, but in practice has a lot of shortcomings
09:59:46 <maerwald> you can't really trust it
10:00:11 <EvanR> i dont have much experience with type systems on top of dynamic types that dont really work
10:00:29 <Welkin> flow?
10:00:56 <Welkin> the concept of "optional" or "gradual" typing is completely stupid
10:01:03 <hpc> EvanR: look at typescript
10:01:04 <Welkin> either use types or don't
10:01:06 <maerwald> it isn't
10:01:11 <EvanR> heard of it
10:01:12 <Welkin> typescript sucks though
10:01:13 <hpc> it's basically javascript with ADTs-ish
10:01:19 <Welkin> it's extremely OOP
10:01:21 <hpc> yeah
10:01:33 <maerwald> the idea behind it is that you start with a prototype, that's easier with dynamic types
10:01:37 <Welkin> the way I write javasccript it more like scheme than anything else
10:01:43 <maerwald> and then gradually "harden" your codebase
10:02:10 <hpc> EvanR: the other one i would suggest is puppet, if you can go for domain-specific languages
10:02:25 <hpc> EvanR: it has optional type annotations that take effect dynamically
10:02:36 <hpc> but it tends to work out very close to static types because the language is pure
10:02:43 <EvanR> oh nice
10:02:46 <Welkin> I've played with flow, and it's a crappy solution
10:02:53 <Welkin> just use purescript if you want types
10:02:54 <Lazersmoke> optional typing allows you to introduce some safety into an unsafe environment without investing too much effort into rewriting your code
10:03:02 <Lazersmoke> it's not meant to be a full typing solution
10:03:03 <hpc> no effects happen until all the pure code finishes evaluating
10:03:12 <hpc> which means you traverse typechecking before effects always
10:03:18 <EvanR> thats pretty awesome
10:03:18 <jordan4444> http://lpaste.net/355733
10:03:31 <hpc> yeah, i wasn't expecting to like it as much as i do now
10:03:32 <jordan4444> can anyone help me finish the function at the bottom?
10:03:50 <hpc> if you've ever used nix, puppet is better ;)
10:03:52 <EvanR> hpc: i can see that working out for dynamic language X
10:04:02 <jordan4444> i have a tree data structure and i wanna count and return the amount of leaves
10:04:09 <EvanR> if it doesnt need TH-like effects prior to being "ready"
10:04:20 <EvanR> which ruby does ... a lot...
10:04:28 <EvanR> but honestly doesnt need to
10:05:17 <hpc> it soooooooort of does, but that preprocessing is required to be effectively pure as well
10:05:26 <hpc> or the puppet community labels you a bad person who should feel bad
10:05:36 <hpc> also that preprocessing happens on the server instead of the client
10:05:47 <Lazersmoke> jordan4444: you should make Noten a type parameter and derive foldable/traversable/functor/whatever
10:05:50 <hpc> so if you misbehave you get mutations on /multiple/ systems instead of just one
10:05:55 <EvanR> i am becoming persuaded
10:06:09 <Welkin> hpc: this puppet? https://en.wikipedia.org/wiki/Puppet_(software)
10:06:19 <hpc> yep
10:06:38 <Welkin> why not nixos?
10:06:50 <Lazersmoke> jordan4444: or you can just use `Data.Tree.Tree Noten`, I think it is isomorphic to Baum
10:07:01 <hpc> i tried it, i literally could not figure out the chain of effects that leads to a file being dropped in /etc
10:07:15 <hpc> it was the first thing i installed on my current hardware
10:07:26 <hpc> got it very close to configured how i want after a solid week or so
10:07:41 <hpc> then hit a massive roadblock i couldn't understand, switched to fedora and was configured within the day
10:08:34 <hpc> nixos is a weird sort of language where everything is building up to expressing a single json-like data structure
10:08:44 <hpc> and then a msterious /something/ traverses it to do things to your system
10:09:04 <hpc> but i could never find any specifics on what that traversal was
10:09:12 <jordan4444> Lazersmoke im not sure what to do with that
10:09:21 <jordan4444> im not that advanced in haskell
10:09:52 <hpc> jordan4444: start with naming the parameter to the function
10:09:58 <hpc> anzahlStueckeMelodien tree = undefined
10:10:17 <hpc> jordan4444: then pattern match on it - the type Entwuerfe has only one constructor so use that
10:10:28 <hpc> anzahlStueckeMelodien (Entwuerfe left right n) = undefined
10:10:31 <jordan4444> anzahlStueckeMelodien mbaum = sum(mbaum Noten)
10:10:35 <jordan4444> noten is not in scope
10:10:55 <Welkin> why is your program in german?
10:11:06 <jordan4444> because i am german
10:11:06 <hpc> Noten is defined at the top level, and you're using it at the value level
10:11:09 <hpc> two separate namespaces
10:12:08 <EvanR> ünicode var names ftw
10:12:10 <jordan4444> undefined functions dont do anything right
10:12:26 <Welkin> that's not completely true
10:12:26 <Lokathor> jordan4444, well, they crash your program if you evaluate them
10:12:42 <Welkin> you cannot start a variable name with anything other than a lowercase ascii letter
10:13:05 <EvanR> bollocks
10:13:09 <bollu> cocreature: ping? I need help with build errors
10:13:10 <hpc> doesn't have to be ascii
10:13:20 <hpc> it has to be "lower case" and it has to be a "letter"
10:13:32 <Welkin> > let 你好 = "Hello" in 你好
10:13:33 <lambdabot>  "Hello"
10:13:39 <Welkin> wtf??
10:13:40 <EvanR> ok good
10:13:42 <Welkin> since when
10:13:46 <Welkin> last time I tried that it failed
10:13:48 <hpc> according to whatever combination of unicode specifications and report-specific stuff haskell uses
10:13:50 <bollu> I'm having trouble building LLVM-hs. Can I please have some help? https://github.com/llvm-hs/llvm-hs/issues/107
10:13:58 <Lokathor> > let ĉĵĥ x = undefined in ĉĵĥ 7
10:14:00 <lambdabot>  *Exception: Prelude.undefined
10:14:04 <Welkin> did this change recetly?
10:14:07 <Welkin> recently*
10:14:10 <hpc> iirc the only haskell-specific quirk is that the character ':' is an upper-case symbol and all other symbols are lower-case
10:14:17 <LKoen> > let ñ = 3 in ñ
10:14:19 <lambdabot>  3
10:14:36 <LKoen> > let ø = 3 in ø
10:14:38 <lambdabot>  3
10:14:39 <jordan4444> anzahlStueckeMelodien (Entwuerfe mbaum bbaum n) = sum(mbaum Noten)
10:14:49 <jordan4444> i need to replace noten with something
10:14:56 <jordan4444> because its not a type constructor
10:14:59 <hpc> Welkin: i am not aware of it ever working that way (at least as far as being halfway between unicode-anywhere and unicode-nowhere)
10:15:19 <Welkin> there might be another case that I'm not considering then where it doesn't work
10:15:27 <jordan4444> im not even sure if i need sum to count all of the leafes
10:15:38 <Welkin> I know it failed on something like that last time I tried (about 8 months or so ago)
10:16:13 <Welkin> I don't write my programs in chinese very often, so it doesn't come up
10:16:32 <hpc> i write all of my programs in wingdings
10:16:55 <jordan4444> lol
10:17:24 <Welkin> jordan4444: your function name looks like "anal stuck" something to me
10:17:38 <jordan4444> : /
10:17:51 <jordan4444> am i even on the right track
10:17:53 <jordan4444> anzahlStueckeMelodien (Entwuerfe mbaum bbaum n) = sum(mbaum Noten)
10:18:06 <jordan4444> "Not in scope: data constructor ‘Noten’"
10:18:17 <jordan4444> http://lpaste.net/355733
10:18:44 <Welkin> Noten is not a data constructor
10:18:50 <Welkin> it is a type alias in your example
10:19:03 <hpc> jordan4444: decompose the problem a bit
10:19:18 <hpc> jordan4444: write a function of type Baum :: Int first
10:19:20 <guest918> hey guys
10:19:26 <guest918> am new around here
10:19:51 <monochrom> hpc: ::? ->?
10:19:58 <hpc> ...
10:20:01 <hpc> Baum -> Int
10:20:03 <jordan4444> which baum?
10:20:04 <monochrom> :)
10:20:08 * hpc dies of embarassment
10:20:46 <monochrom> Well this code does infect value-type-confusionitis to everyone who reads it :)
10:20:58 <guest918> um any of you guys code in python
10:21:13 <maerwald> yes, but how is that relevant?
10:21:14 <Welkin> guest918: before I found the salvation of haskell, I once did
10:21:15 <monochrom> I think I wrote 10 lines of python, ever.
10:21:30 <hpc> asp is the best snake-oriented programming language
10:21:36 <EvanR> i had a slime world clone in pygame once
10:21:37 <albystein> nice well am a python coder
10:21:50 <jordan4444> i have way more experience with python too
10:21:56 <Welkin> hpc: active server pages?
10:21:58 <Welkin> lol
10:22:04 <jordan4444> haskell is just frustrating
10:22:10 <albystein> thats cool
10:22:17 <Welkin> jordan4444: it gets easier once you understand how it works
10:22:23 <hpc> Welkin: https://duckduckgo.com/Asp_(reptile)?ia=web
10:22:24 <Welkin> there are two namespaces
10:22:30 <Welkin> values-level, and type-level
10:22:43 <albystein> um I wanted to ask has any one ever installed python kivy on kali linux
10:23:06 <Welkin> albystein: go ask in #python or #linux or something
10:23:27 <monochrom> haha hpc about asp
10:23:38 <jordan4444> http://lpaste.net/355733
10:23:58 <jordan4444> im just starring at my code and the compiler keeps making me feel bad
10:24:50 <jordan4444> i thought haskell is so simple and powerful, why cant there be a one line solution? i just wanna count the amount of something
10:25:22 <Welkin> jordan4444: just keep working until you get to the point where you can write all the types for your program, then fill in the definitions, and it runs perfectly the first time without any errors
10:25:32 <Welkin> jordan4444: in haskell, always write your types first
10:25:40 <Welkin> it is half of the language
10:26:02 <jordan4444> the types are working
10:26:07 <hpc> Welkin: he already has the types, there's just a bit of a hangup on separating type-level and value-level
10:26:09 <jordan4444> its just the last line that is undefined
10:26:11 <monochrom> Your Entwuerfe is a very complicated type.
10:26:13 <c_wraith> One thing I learned when writing a large project in Haskell for the first time - no language lets you get away with less complexity than is present in the problem specification.
10:26:17 <hpc> and how to actually consume the types he wrote
10:26:28 <jordan4444> ^
10:26:56 <EvanR> c_wraith: unless the problem happens to have been solved in the stdlib specifically for you
10:27:02 <kuribas> c_wraith: and if you problem involves mutable algorithms?
10:27:22 <kuribas> EvanR: are any lib
10:27:23 <Welkin> kuribas: use ST
10:27:26 <Welkin> or inline-c
10:27:31 <monochrom> But what you need to learn now is pattern matching.
10:28:16 <EvanR> kuribas: we just need the count number of something lib
10:29:04 <Welkin> the simplest way to count the number of items in some kind of data structure is to fold over it, construct a new list, and get the length
10:29:16 <kuribas> EvanR: erm I meant if it's implemented in a lib on hackage...
10:30:06 <Welkin> or you could just (+1) a starting value of 0 instead of making the list
10:30:25 <Welkin> I'd say those are equally simple
10:31:24 <Lazersmoke> jordan4444: you should either a) write a mono-traversable instance for your tree, b) write/derive a traverseable/foldable instance for your tree by moving Noten to a type parameter, or c) use a built in type that represents your tree better
10:31:39 <Lazersmoke> you should be able to do like `sum . (1 <$)` or something
10:31:59 <Lazersmoke> there might even be a `count :: Foldable t => t a -> Int` or something
10:32:45 <Welkin> it's too simple for there to be on already
10:36:48 <guest918> guys am finding it had to join #linux
10:37:01 <guest918> there is something about registering
10:37:34 <EvanR> ask #freenode
10:37:56 <monochrom> http://chrisdone.com/posts/teaching
10:38:15 <guest918> EvanR: okay
10:38:31 <guest918> join /freenode
10:41:48 <guest918> any python coders around
10:43:02 <hpc> ask #python
10:43:13 <cocreature> bollu: pong
10:43:30 <mmmooot> What is the purpose of 'newtype'? Performance?
10:44:00 <erisco> mmmooot, sometimes, and other times to select type class instances
10:44:26 <mmmooot> erisco: what do you mean by that?
10:44:48 <erisco> per class there is at most one instance per type
10:44:55 <cocreature> you could use data for that as well
10:45:13 <erisco> so by using newtypes you can define more instances for a base type
10:45:34 <cocreature> one advantage of newtype over data is that you can reuse instances from the base type via GeneralizedNewtypeDeriving
10:45:35 <erisco> you can use data but it might change semantics due to bottom
10:50:03 <athan> Does anyone here know of an asynchronous testing library? Where "success" is determined by invoking some IO action, and the test case itself blocks until all registered "success" calls are invoked or something?
10:50:28 <EvanR> monochrom: the post seems tojust end, was there a follow up?
10:50:29 <athan> like cont-style Hspec
10:58:16 <Welkin> hello athan 
11:09:04 <athan> Hey Welkin, how've you been?
11:11:32 <bollu> cocreature: I'm back
11:11:46 <cocreature> bollu: I left a comment on the github issue
11:12:02 <bollu> I see
11:12:13 <bollu> oh, that one. Yeah, I read your response
11:12:34 <bollu> I'll try to upgrade to the latest version of the package and GHC and get back to you
11:12:38 <bollu> does stack support the latest GHC?
11:16:22 <bollu> cocreature: I left a comment with extra info
11:16:29 <bollu> cocreature: I wonder if it is because the system also has clang?
11:18:31 <cocreature> bollu: the newest stackage lts comes with ghc 8.0.2 so you should be able to just bump your stackage snapshot
11:19:07 <cocreature> we definitely had people successfully building llvm-hs on os x so the fact that it has clang doesn’t seem to always be problematic
11:19:23 <bollu> I see, interesting
11:19:33 <bollu> cocreature: did you take a look at my comment?
11:30:29 <bollu> cocreature: which flag are you referring to, exactly?
11:32:39 <stefann> @pl \f a b c -> f (a, b, c)
11:32:39 <lambdabot> (. (,,)) . (.) . (.)
11:32:55 <erisco> :t curry3
11:32:56 <lambdabot> error:
11:32:56 <lambdabot>     • Variable not in scope: curry3
11:32:56 <lambdabot>     • Perhaps you meant ‘curry’ (imported from Data.Tuple)
11:36:20 <fresheyeball> hello sunday haskellers
11:36:37 <fresheyeball> I'm playing with singletons and hitting an error of much strangeness
11:36:56 <Tuplanolla> Singletons working as intended.
11:36:58 <erisco> that could be any singletons error
11:37:06 <fresheyeball> Tuplanolla: haha
11:37:07 <cocreature> bollu: there is a cabal flag called `shared-llvm` in llvm-hs. set that to true
11:37:10 <fresheyeball> http://lpaste.net/355736
11:37:32 <bollu> cocreature: I see, lemme try that
11:37:38 <fresheyeball> http://lpaste.net/355737
11:37:58 <fresheyeball> I just don't see how such a simple one is failing
11:38:18 <fresheyeball> I would prefer not to introduce UndecidableInstances
11:38:21 <bollu> cocreature: uh, does that mean that I need to build llvm-hs from source?
11:39:26 <cocreature> bollu: given that “building from source” is pretty much how we all get our Haskell packages, sure. but you can just specify the flag in your stack.yaml and stack will build it for you
11:39:57 <bollu> cocreature: I mean, how do I specify this option through the stack interface?
11:40:07 <bollu> cocreature: but build from source, I meant build it separately and then point stack to it :)
11:40:09 <lyxia> I think UndecidableInstances is a prerequisite of type-level programming like singleton...
11:40:32 <cocreature> bollu: read the manual :P https://docs.haskellstack.org/en/stable/yaml_configuration/#flags
11:40:45 <fresheyeball> grr
11:40:48 <hpc> UndecidableInstances effectively makes the class constraint system turing complete (with a stack limit)
11:41:06 <hpc> which... certainly gives you type-level programming :P
11:41:16 <fresheyeball> I thought adding derving to the quasi-quote would get rid of this eror
11:41:19 <fresheyeball> but I was wrong!
11:41:22 <fresheyeball> No instance for (Eq (Sing AreaName)
11:41:33 <bollu> cocreature: ah, thanks xD
11:43:57 <fresheyeball> so how can I get a show instance for my Sing?
11:44:38 <lyxia> fresheyeball: it's pretty benign though, in the sense that at worst it makes GHC loop infinitely, and there are also safeguards against that. UndecidableInstances is not as yucky as IncoherentInstances.
11:44:58 <bollu> cocreature: WTF, that worked
11:45:02 <bollu> cocreature: sorcery?
11:45:16 <bollu> cocreature: I don't get it, the default is "true"
11:45:17 <lyxia> fresheyeball: why do you want to show a Sing
11:45:21 <bollu> so why did I have to explicitly set it?
11:45:31 <fresheyeball> lyxia: I have a type that contains a sing
11:45:34 <fresheyeball> and I'd like to log it
11:45:57 <lyxia> can't you convert that sing to an AreaName first
11:46:09 <cocreature> bollu: because stack thinks it’s a good idea to ignore default values and just always default all flags to false.
11:46:23 <bollu> cocreature: ..seriously?
11:46:35 <bollu> uh, stack devs, rationale?
11:46:42 <cocreature> I guess I should just flip the way the flag works but that kind of sucks
11:47:09 <cocreature> bollu: maybe we even have a fix for that in 4.1
11:47:15 <bollu> cocreature: do tell?
11:47:30 <cocreature> trevor added something related to this but I don’t remember if it works for stack as well
11:47:47 <lyxia> fresheyeball: what happens if you try deriving instance Show (Sing AreaName)
11:47:52 <bollu> cocreature: BTW, is there any help needed with llvm-hs? huge thanks for maintaining this
11:48:24 <cocreature> bollu: I think https://github.com/llvm-hs/llvm-hs/commit/e39ec6862c950a22320b928ffdbf0f71bf38edf7 has fixed this. it would be great if you could test if this works for you (it’s included in 4.1.0
11:48:26 <cocreature> )
11:49:19 <bollu> cocreature: testing
11:50:26 <mmmooot> Is there something like 'partition' but which splits a list into N lists instead of just 2?
11:51:15 <kadoban> Based on a classifying function?
11:51:56 <EvanR> :t groupBy
11:51:57 <lambdabot> (a -> a -> Bool) -> [a] -> [[a]]
11:52:21 <kadoban> I don't think so, at least I'd be interested if it exists. You can build it fairy easily using a Data.Array.Array of lists for instance, but not one I know exists. Yeah, you can do it based on sortBy and groupBy
11:52:52 <Fairy> I'm not a building block!
11:53:01 <kadoban> xD
11:53:35 <Tuplanolla> That would be `(Traversable f, Ord a) => f a -> Map a (f a)` or something.
11:54:08 <hanna> Hmm; what kind of data structure would be suited to storing a “map” of a configuration space? For example let's say I have IDs ranging from 0 to 1,000,000; and for every ID I would like to store a value (e.g. `data State = Present | Missing | Error | InProgress` or whatever). The catch is that since I'm pretty sure the majority of these values are going to be the same (either Present or Missing, in
11:54:10 <hanna> contiguous chunks) I'd like to have my data structure optimize for the common case of “merging” contiguous values - e.g. if IDs 0 through 200,000 are all marked “Present”, then it would only store `(0, 200000) Present` or some equivalent thereof. I'd like at most O(log n) access to any ID, and efficient append (ideally, adding 100 entries in a row should be close to O(1) amortized), so some sort of
11:54:12 <hanna> tree-like (finger tree?) structure seems ideal.
11:54:38 <Xion_> Quad tree?
11:54:47 <Xion_> Or any similar 2D partitioning tree.
11:55:14 <hanna> But I don't want to implement the meat of this data structure, including balancing etc., myself - so I'm thinking about using some sort of pre-existing tree-like structure to do the heavy lifting; but I don't know if any of the existing generic tree containers are flexible enough to support my use case
11:55:25 <kadoban> It's more 1D though. Sounds a bit like a fenwick tree almost?
11:58:09 <bollu> cocreature: yep, looks like it works.
11:58:14 <bollu> cocreature: I think the API changes in 4.0.1?
11:58:19 <bollu> cocreature: I need to fix my code now :P
11:58:19 <cocreature> bollu: yep
11:58:20 <bollu> 4.1.0*
11:58:33 <cocreature> bollu: but it changes for the better :)
11:58:41 <bollu> cocreature: I'm sure :)
11:58:50 <bollu> cocreature: going back to what I asked: how can I help?
11:59:14 <hanna> The data type I was looking at was Data.Sequence; which would allow efficient append (a very common operation) - at most I'd have to make my custom “append” operation uncons first and check to see if it can be “merged” with the value next to it; and I could probably make use of findIndexR to allow inserting at arbitrary positions
11:59:41 <hanna> It seems like that would meet my requirements without requiring me to do too much
11:59:49 <hanna> Just wondering if there's a better data structure ready-made for my use case
12:00:21 <cocreature> bollu: adding support for missing features or even just figuring out what’s missing and opening issues for that is always great. someone asked for support for LLVM’s metadata instructions a few days ago, so implementing that would be great
12:02:35 <kadoban> hanna: Can't think of anything built-in.
12:03:59 <kadoban> Fenwick tree I mentioned above wouldn't be good. I think a kind of modified segment tree would work and be fairly efficient both in space and time.
12:05:37 <bollu> cocreature: cool, sure thing
12:06:17 <cocreature> bollu: if you start working on something that takes more than an evening it’s probably a good idea to open an issue first to avoid accidentally duplicated work in case someone else is also working on it
12:06:41 <bollu> cocreature: I see, very well
12:07:02 <bollu> cocreature: I may want to do weird things with LLVM that fit no one's agenda :P eg. try to expose things to Polly
12:07:34 <bollu> cocreature: but yes, I'll ping github / you
12:07:52 <JScully> hi there
12:08:07 <JScully> i have a question about sign extending a nibble so that i can get a byte
12:08:16 <mmmooot> is there a simple way to compare constructors of two values of the same type, disregarding the constructor parameters and not pattern matching on every constructor?
12:08:17 <JScully> i learned that i have to fill it with the most significat bit
12:08:43 <JScully> so 0101 as a nibble is going to be 0000101 and 1101 as a nibble is going to be 11111101, is this correct? cant be, right?
12:09:07 <lyxia> it is correct
12:09:28 <JScully> i dont understand that
12:09:32 <monochrom> One of two correct ways anyway :)
12:09:33 <kadoban> JScully: Could be. That's what you'd do if they were signed values in the usual twos-complement way.
12:09:48 <JScully> 11111101 is not the same as 1101 :|
12:10:20 <kadoban> JScully: In one encoding it is, namely twos-complement.
12:10:24 <cocreature> bollu: as long as we manage to let you or anyone else do weird things without making life worse for the ones that don’t, I’m all for it :)
12:10:31 <monochrom> You are not going to look for sameness. You are going to look for "why need more bits, what's the purpose" and act accordingly.
12:10:46 <lyxia> mmmooot: http://stackoverflow.com/questions/43944044/checking-that-two-values-have-the-same-head-constructor?s=7%7C0.0000
12:11:01 <monochrom> http://www.vex.net/~trebla/humour/tautologies.html #5
12:11:09 <JScully> what i want to do is multiply two nibbles
12:11:24 <mmmooot> as thanks monochrom 
12:11:28 <JScully> the function that makes the calculation expects bytes
12:11:34 <JScully> so i have to fill them
12:11:50 <JScully> https://pastebin.com/NNwpfYRY
12:11:52 <monochrom> OK, what does 1101 stand for? Does it stand for 13 or does it stand for -3 ?
12:12:02 <JScully> thats what i did for creating the byte
12:12:19 <JScully> hm how do i know :D
12:12:27 <monochrom> That's the problem.
12:13:12 <JScully> i dont get it
12:13:13 <monochrom> If you want 1101 to stand for 13, the correct extension is 00001101. If you want 1101 to stand for -3, the correct extension is 11111101.
12:13:25 <JScully> but 11111101 is 253
12:13:37 <monochrom> Oh is it? Or is it -3?
12:13:40 <kadoban> JScully: You must know or be told, or be able to tell from context or something. You can't really correctly tell what something means without knowing the encoding.
12:13:50 <monochrom> > \b11111101 :: Int8
12:13:52 <lambdabot>  <hint>:1:19: error:
12:13:52 <lambdabot>      parse error (possibly incorrect indentation or mismatched brackets)
12:14:05 <monochrom> > 0b11111101 :: Int8
12:14:07 <lambdabot>  error: Variable not in scope: b11111101
12:14:23 <monochrom> Ah what's the binary notation again?
12:14:37 <pikajude> haskell has binary notation?
12:14:40 <JScully> damn, have no idea how 11111101 can be -3
12:15:04 <monochrom> OK, I guess just go with 00001101 and be done?
12:15:12 <Tuplanolla> Needs `BinaryLiterals`.
12:15:21 <Boomerang> > 0xFD :: Word8
12:15:23 <JScully> no
12:15:23 <lambdabot>  253
12:15:24 <monochrom> I am not a stakeholder, I am fine with giving wrong advice and seeing you fail.
12:15:28 <EvanR> zero is 0000000, -1 is 11111111, -2 is 11111110, -3 is 11111101, its counting down from max
12:15:32 <kadoban> JScully: https://en.wikipedia.org/wiki/Two's_complement should get you started.
12:15:57 <JScully> if 11111101 is -3 , how do you represent 253?
12:16:04 <EvanR> you cant
12:16:07 <Boomerang> JScully: with 9 bits
12:16:09 <JScully> ahh
12:16:14 <EvanR> it goes up to 127
12:16:19 <monochrom> Int8 is not going to have 253. It's -128 to 127.
12:16:19 <Welkin> JScully: is it signed?
12:16:33 <Welkin> signed/unsigned is a pain in the ass
12:16:36 <monochrom> Word8 has 253 but it won't have -3.
12:16:38 <Welkin> C makes it worse though
12:16:40 <JScully> aaahaa! :^
12:16:51 <Welkin> because it implicitly converts
12:16:53 <lyxia> a question about "sign extending" without a signed representation sounds quite odd.
12:16:56 <Welkin> you won't have that issue in haskell
12:17:14 <JScully> is there any tool where i can verify my calculations
12:17:16 <EvanR> famous last words
12:17:19 <JScully> online
12:17:30 <JScully> multiplying signed bytes
12:17:47 <Welkin> JScully: use your built-in calculator
12:17:52 <Tuplanolla> You have GHCi too, JScully.
12:17:55 <Welkin> it should have a programmer/binary/hex mode
12:18:00 <Welkin> at least on windows it does
12:18:04 <JScully> i have GHCI
12:18:27 <Tuplanolla> So `:seti -XBinaryLiterals` and `import Data.Word`.
12:18:54 <monochrom> Also Data.Int
12:19:09 <EvanR> you need a function to render Int8's in twos complement binary
12:19:19 <monochrom> That too.
12:19:48 <glguy> convert to Word8, show Int At Base
12:19:51 <monochrom> A binary calculator is least effort.
12:20:01 <EvanR> which base?
12:20:05 <Tuplanolla> :t showIntAtBase -- We have this.
12:20:06 <lambdabot> (Show a, Integral a) => a -> (Int -> Char) -> a -> ShowS
12:20:07 <glguy> 2
12:20:08 <kuribas> > printf "%b" (10 :: Int8)
12:20:09 <EvanR> ah 
12:20:10 <lambdabot>  error:
12:20:10 <lambdabot>      • Ambiguous type variable ‘a0’ arising from a use of ‘show_M788646283129...
12:20:10 <lambdabot>        prevents the constraint ‘(Show a0)’ from being solved.
12:20:11 <monochrom> base 10 :)
12:20:22 <kuribas> > printf "%b" (10 :: Int8) :: String
12:20:25 <lambdabot>  "1010"
12:20:28 <monochrom> http://www.vex.net/~trebla/humour/tautologies.html #10 :)
12:20:32 <kuribas> > printf "%b" (-10 :: Int8) :: String
12:20:34 <lambdabot>  "11110110"
12:20:43 <monochrom> Oh neat, thanks kuribas
12:20:47 <JScully> well i wrote a calculator
12:20:51 <JScully> but i need to verify it
12:20:57 <JScully> does not make sense to write another one :D
12:21:02 <monochrom> > printf "%b" (-3 :: Int8) :: String
12:21:03 <lambdabot>  "11111101"
12:21:07 <EvanR> > showIntAtBase 2 intToDigit (253) ""
12:21:09 <lambdabot>  "11111101"
12:21:17 <EvanR> > showIntAtBase 2 intToDigit (253 :: Word8) ""
12:21:19 <lambdabot>  "11111101"
12:21:41 <EvanR> > showIntAtBase 2 intToDigit ((-3) :: Word8) ""
12:21:43 <lambdabot>  "11111101"
12:21:52 <EvanR> hrm
12:22:02 <EvanR> if you repeat things enough times, it becomes true
12:22:18 <kuribas> > showIntAtBase 2 intToDigit ((-3738927489278492631649816894718974819) :: Word8) ""
12:22:20 <lambdabot>  "10011101"
12:22:23 <lyxia> > repeat False
12:22:25 <lambdabot>  [False,False,False,False,False,False,False,False,False,False,False,False,Fal...
12:22:33 <kuribas> neat, it also does compression!
12:22:35 <EvanR> the Truth at infinity
12:22:43 <monochrom> Haha kuribas how did you get that huge number? :)
12:23:04 <kuribas> typing :)
12:25:04 <pikajude> good ol' printf
12:25:13 <JScully> so 1001 times 1011 should be 0011 right?
12:25:33 <EvanR> this is why we have computers
12:26:08 <hanna> kadoban: I've thought some more about the problem and decided Sequence/fingertrees are probably insufficient; but I did remember the existence of Data.IntervalSet (which is basically my problem with the value type specialized to Bool)
12:26:13 <hanna> so I assume I could maybe find inspiration from its techniques
12:27:36 <hanna> At the very least, failing all else, I could use multiple interval sets to approximate my needs (i.e. a separate interval set for each possible state; I'm using acid-state so I have the benefit of transactional invariants guaranteeing I can't accidentally end up with one index in multiple sets)
12:28:32 <hanna> “Fast Mergeable Integer Maps (1998) by Chris Okasaki, Andrew Gill http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.37.5452” this in particular seems like it could be relevant
12:28:36 <hanna> what I want is basically a mergeable integer map
12:28:47 <hanna> where the “merge” operation checks for leaf equality
12:30:13 <torstein> does anyone use (spac)macs and know how to lookup haddock info? I can get type signatures with Hoogle but the function and argument description woult be nice. 
12:30:26 <torstein> (spac)emacs **
12:31:56 <kuribas> hanna: why not a Map ID (ID, State)
12:32:18 <kuribas> hanna: the key is the lower index, the upper index is part of the value
12:33:16 <kuribas> hanna: use lookupLE to find the interval
12:34:03 <kuribas> which you can then check against the upper value.
12:37:41 <kadoban> That sounds quite decent, especially if you aren't worried about inconsistent states ^
12:38:59 <hanna> Hmm, could work; but what seems tricky is properly splitting up and merging value ranges
12:39:19 <hanna> for example suppose I have range 1000 to 2000 set to “Queued”, and then I want to set 1050 to “Failed”
12:39:42 <hanna> Then in the meantime, 1000-1049 and 1051-2000 get set to “Done”
12:39:51 <hanna> I go back and retry the “Failed” entry at a later time and also set it to “Done”
12:40:00 <hanna> it would need to get re-merged with its siblings back into a single 1000-2000 range
12:40:12 <hanna> That's a lot of tricky logic, which an IntSet would avoid completely since it already implements this
12:40:45 <kadoban> There's a little logic required there, but it's not really that much. Wait, what? IntSet already implements this?
12:42:04 <ph88> how can i optimize this code?  https://bpaste.net/show/0604444066d2
12:43:29 <hanna> Oh, sorry, I think I'm confusing IntSet with IntervalSet
12:43:38 <portnov> http://hackage.haskell.org/package/batchd-0.1.0.0
12:43:52 <hanna> IntSet doesn't seem like it implements merging
12:44:23 <hanna> but IntervalSet certainly seems like it's designed to do this
12:45:09 <hanna> From package `intset`, confusingly enough
12:46:45 <kadoban> Oh I see, that makes more sense (though I haven't looked at IntervalSet)
12:47:14 <hanna> seems bitrotten to some extent
12:48:03 <[exa]> ph88: that seems a bit more like arithmetic exercise than programming
12:49:16 <Tuplanolla> Only number theory can save you now, ph88.
12:49:16 <hanna> Hmm, `cabal repl` fails loading bits-extras with `undefined symbol: popcountll`; is there any other way to get a REPL in which I can try this stuff out?
12:49:46 <cocreature> you might be able to get some performance by grouping vector accesses to adjacent keys to get better cache locality
12:50:50 <kadoban> hanna: Probably means something is broken with dependency versions or something to that effect.
12:50:55 <kadoban> Or the thing itself is broken, I dunno.
12:51:14 <Lokathor> https://hackage.haskell.org/package/linear-1.20.6/docs/Linear-Quaternion.html#v:pow does this let me scale up and down? like for 3d graphics scaling?
12:51:42 <Lokathor> or am I not looking at the right thing? I just opened up the Linear docs like 30 minutes ago >_>
12:53:30 <ph88> cocreature, i think i would have to make 3 intermediate vectors for the results of  points VU.! (ii + 2 * n)  and  2 * points VU.! (ii + n)   and   points VU.! ii    and then sum them at the end .. could that work you think ?
12:54:51 <tfc[m]> hey there, i use conduit to talk with a server via TCP. it's like socket --> package_processor --> socket. it reacts to heartbeat requests and prints some payload stuff to my terminal when the server sends messages. now i also want to send the server messages from stdin back. how can y do something like (socket, stdin) --> package_processor --> socket ?
12:56:12 <cocreature> ph88: I don’t see why you need intermediate vectors for that. you can first calculate the sum of points VU.! (ii + 2 * n) then the sum of -2 * points VU.! (ii + n) and then sum those
12:56:33 <cocreature> ph88: but really make a criterion benchmark and add your current code as a baseline before you start randomly changing things to see if they’re faster
12:56:45 <ph88> tfc[m], sourceHandle stdin   from   Data.Conduit.Binary    and   System.IO
12:57:32 <tfc[m]> ph88 ok, reading from stdin is no problem. the thing is that i need my conduit to use input both from the server and from stdin
12:57:40 <tfc[m]> so i need some kind of Y-combinator
12:58:30 <ph88> cocreature, good idea thanks, i will take a look at criterion too
12:59:05 <ph88> tfc[m], gotcha, i haven't used that before but i'm gonna help you find a nice function for it
12:59:35 <tfc[m]> ph88 i just ran into "mergeSources" from stm-conduit. do you think this is the right thing for that?
13:00:24 <cocreature> ph88: another advantage of that is that if you show a benchmark here that people can actually run instead of three lines that are not a benchmark and in fact not even a full program, they’re significantly more likely to put time into figuring out how to improve your code :)
13:00:49 <hexagoxel> hanna: you did see the intset PR? manually applying that might be easier than making bit-rotten-extras work.
13:02:08 <ph88> tfc[m], not sure what "exhausted" means in the help text, but if it means the source has to send input every time it's requested than this function doesn't seem right for you because you need to give as many values from stdin and from socket
13:02:21 <tfc[m]> hm
13:02:23 <ph88> tfc[m], maybe you can make some kind of type that can send dummy values
13:02:32 <hanna> hexagoxel: ah, good catch
13:03:07 <ph88> tfc[m], maybe try to find some source code that uses mergeSource to see how it's used
13:03:34 <tfc[m]> ph88 that's what i am doing. but there's not much...
13:04:16 <ph88> cocreature, i thought the profiling option of ghc was the only benchmark system there was
13:04:41 <kuribas> hanna: aren't intervals sets about _overlapping_ intervals?
13:05:22 <cocreature> ph88: profiling and benchmarks are two different things. benchmarks show you how fast your code is by measuring how long it runs. profiling shows you how the runtime is split up between the different parts of your program
13:05:54 <ph88> ok
13:06:09 <hanna> kuribas: No, this seems like a simple “member / not member” set, but optimized to merge contiguous ranges
13:06:15 <kuribas> ok
13:22:42 <[exa]> if you have identifier f, what's the best english word for f' ?
13:22:47 <[exa]> apostrophed identifier?
13:22:53 <quchen> f-prime
13:22:57 <[exa]> lol
13:24:08 <geekosaur> in haskell context that's prime, yeh
13:24:32 <[exa]> "prime" is not a common word for "derived function" right.
13:24:38 <[exa]> sorry. :]
13:24:47 <[exa]> misguided myself.
13:25:17 <geekosaur> not a common-language one, but a math-y one
13:25:53 <[exa]> well, good to know
13:25:54 <[exa]> thanks
13:26:07 <Tuplanolla> Those pesky mathematicians can still outdo us with f-dot, f-hat, f-tilde, f-bar and many others.
13:32:40 <monochrom> In the Haskell Community, "prime" refers to a futuristic Haskell. :)
13:34:51 <cocreature> Tuplanolla: at least we have emoji!
13:41:27 <ph88> is there any way to get the information of the cabal file in my program? i would like to show the version number when the user passes --version to the program
13:41:54 <quchen> ph88: Sure, Cabal’s API supports that
13:42:18 <ph88> what else should i know about versioning my program ?
13:42:44 <quchen> The PVP is Haskell’s version of semantic versioning.
13:42:52 <ph88> PVP ?
13:43:02 <quchen> A.B.C.D – B.C.D is like semver, A is another step »larger«.
13:43:06 <quchen> Package versioning policy.
13:43:24 <monochrom> You can find it somewhere on the haskell wiki
13:43:37 <quchen> Change D if all you did is fix bugs, change C if you added non-breaking features, change B when you introduced breaking changes, change A on major ovarhaul.
13:44:21 <hvr> *cough* http://pvp.haskell.org/faq *cough*
13:44:28 <quchen> D means »nothing should break«, C means »very unlikely breakage, apart from maaaaybe name clashes«, B means »breakage possible«, A means »breakage very much possible«
13:44:43 <quchen> Ah
13:44:44 <bollu> if a library needs extension X, and I use said library, does my module not necessarily have X enabled?
13:44:48 <quchen> Nice site!
13:44:50 <orion> Why is PVP so bad?
13:45:04 <hvr> orion: that's a loaded question
13:45:17 <quchen> Why is there an atmosphere on the moon?
13:45:35 <orion> Who is John Galt?
13:46:00 <monochrom> bollu: No, your module doesn't always need X. It depends of course.
13:46:09 <bollu> monochrom: I see
13:46:20 <bollu> monochrom: interesting, because I spent the last 10 minutes assuming I had TypeFamilies available
13:46:30 <ph88> compiling is so slow :*(
13:46:44 <monochrom> PVP is bad because semver is bad. :)
13:47:00 <ph88> elm has automatic versioning
13:47:03 <monochrom> (semver is bad because it is a total order.)
13:47:16 <bollu> monochrom: how does that work? automatic versioning?
13:47:20 <hvr> monochrom: in what sense is it a total order?
13:47:30 <monochrom> (The same badness as using totally-ordered numbers for precedence order.)
13:47:45 <cocreature> ph88: -O0 helps significantly during development for making compile times faster
13:47:50 <quchen> 10000 is pretty bad I hear
13:47:55 <hvr> monochrom: or what exactly is the ordering you see in SemVer?
13:48:13 <ph88> cocreature, oh ye right O2 was the default ?
13:48:22 <bollu> also, oh my god, who designed megaParsec? It's cool and all, but is super annoying to work with anything other than the default token type
13:48:28 <monochrom> Given two semver numbers x and y, it is always exactly one of: x<y, x=y, x>y.
13:48:35 <bollu> they could have at least provided [a] => Stream a  :(
13:48:39 <bollu> or some wrapper thereof
13:48:52 <c_wraith> bollu: heh.  I *just* ran into the same thing
13:48:55 <hvr> monochrom: ok, so you're merely refering to the lexicographic ordering of number vectors?
13:49:05 <Tuplanolla> How about we start between 0 and 1 and always pick the next version between the current version and either 0 or 1?
13:49:09 <bollu> c_wraith: PR plz? :P I'm re-implementing this by hand.
13:49:20 <c_wraith> bollu: fortunately, writing your own stream type is pretty painless
13:49:21 <ph88> bollu, https://github.com/elm-lang/elm-package#publishing-updates
13:49:32 <cocreature> ph88: I never remember what the defaults are. it’s either -O1 or -O0 but cabal and stack have their own defaults so if you care about it pass it explicitely
13:49:34 <bollu> c_wraith: yeah, just looking into the typeclass now
13:49:35 <monochrom> Not just that. The < order is also tied to "which direction is backward-compatible?"
13:49:46 <bollu> c_wraith: but I think I'll submit a PR nonetheless, because it seems useful to have
13:49:55 <bollu> c_wraith: less weird corners = nicer API
13:49:57 <Tuplanolla> So we have 1/2, 3/4, 5/8, ...
13:50:55 <c_wraith> bollu: I can tell why it's implemented the way it is..  It's for source location tracking.  easy with byte/character interfaces..  harder with arbitrary token types
13:51:16 <hvr> monochrom: ok, yeah. but that helps a lot to reduce the complexity of dependency constraint solving as you can map the problem to a linear finite domain
13:51:50 <monochrom> I agree! My "when to use a non-total order" scenerio doesn't happen ever.
13:51:59 <hvr> monochrom: and this gives you a lot of structure that makes things like the matrix builder even feasable
13:52:08 <hanna> The cases where semver breaks down seem to be isolated, imho
13:52:24 <monochrom> But since the topic is "why is PVP bad" which is hypothetical to begin with... Let's add more hypothetical math to muddle the issue!
13:52:35 <c_wraith> bollu: it feels like it needs a bunch more to really be useful - like a whole module handling a bunch of the common issues.
13:53:23 <bollu> c_wraith: I see
13:53:39 <bollu> c_wraith: I'm converting a Parsec parser to Megaparsec now
13:54:01 <c_wraith> bollu: which isn't to say it wouldn't be nice - it'd just be a bigger PR than just adding a Stream instance for a list of arbitrary tokens
13:55:11 <monochrom> Next April 1st someone should publish a paper on topological versioning!
13:55:23 <hvr> monochrom: but to be fair; the compatibility relation is not total
13:55:45 <bollu> c_wraith: yeah, you'd need a (x -> SourcePos) I think
13:55:49 <hanna> Semver breaks down when it obscures the relationship between “code order” and “chronology”
13:56:00 <ph88> cocreature, do you pass -O0 to stack or ghc-options ?
13:56:25 <bollu> monochrom: do you have a concrete example where you can assign no total ordering?
13:56:28 <c_wraith> bollu: I think actually x -> (SourcePos, SourcePos)
13:56:37 <c_wraith> bollu: it wants a start and end location
13:56:41 <bollu> ah
13:57:06 <hanna> For example, some times developers start work on a new feature based on an “older” version of the code; and then e.g. release 5.7.2 which is newer and has more features than 5.8.0; trying to figure out as a user which version is the “newest” is difficult
13:58:05 <hanna> (this happened in the case of qtwebkit; and qt stuff in general has confusing version number chronology - it also happened in the case of nvidia drivers)
13:58:44 <monochrom> bollu: It has to do with branching. Let's use PVP for example. I have an old version 1.0.0. Based on that, I branch off two versions X and Y. Version X is derived from 1.0.0 and adds one feature. Version Y is derived from 1.0.0 and adds a different feature. Now I don't know how to number X and Y.
13:59:56 <ph88> meh ghc is so slow right now .. i pass this   stack build --profile --ghc-options="-j4 -auto-all -rtsopts -O0"    statistics-0.13.3.0: build   takes a long time
13:59:57 <Tuplanolla> I wonder what sort of chaos would ensue if we actually used rational number vectors.
14:00:18 <EvanR> hahha
14:00:23 <monochrom> Also what hanna said. A different but more likely scenerio.
14:00:24 <EvanR> no man, reals
14:00:48 <EvanR> which project is approaching pi... 
14:01:07 <bollu> monochrom: are they now not separate package?
14:01:11 <hanna> monochrom: usually, software branching happens in the specific circumstance of an important bug fix or enhancement from a later version being backported to a “stable” version, right?
14:01:13 <hvr> monochrom: you can pick any free major version for your branch
14:01:14 <bollu> EvanR: someone did that right? latex?
14:01:19 <EvanR> ah 
14:01:20 <monochrom> For example look at Linux kernels used in home routers. A very different timeline than desktop's and server's.
14:01:23 <bollu> EvanR: some package is versioned with the digits of pi
14:01:40 <bollu> monochrom: well, what do you propose? partial orders are a bad idea IMO. 
14:01:53 * monochrom hugs his partial orders
14:02:23 <hanna> monochrom: in which case there's not much of a conflict because say you have 1.0.2 and you release 1.1.0 as a new experimental version, then you want to backport a fix from this to the stable ver - it would become 1.0.3
14:02:41 <geekosaur> bollu, that'd be TeX
14:02:55 <hpc> bollu: partial orders might be bad because they aren't total orders, but they're awesome because they're not unordered
14:02:57 <bollu> what's the free object in the algebra of partial orders?
14:02:58 <hanna> I don't think releasing two separate orthogonal features as “different” version numbers happens in practice
14:03:08 <bollu> hpc: no, I mean: to represent *this* scenario
14:03:12 <bollu> hpc: I like partial orders :P
14:03:16 <hpc> ah :P
14:03:26 <bollu> > what's the free object in the algebra of partial orders? anyone
14:03:28 <lambdabot>  <hint>:1:24: error: parse error on input ‘in’
14:03:29 <bollu> geekosaur: ah yes, ty
14:03:30 <geekosaur> hanna, I have seen it happen with niche commercial software
14:03:32 <monochrom> I think discrete orders are free partial orders.
14:03:48 <bollu> monochrom: ah, yes, no structure. 
14:03:58 <cocreature> ph88: with stack I use "stack build --fast" which passes -O0
14:04:12 <bollu> monochrom: is there a final object? { * } would work I think?
14:04:41 <bollu> what's the initial object in the algebra of partial orders** 
14:04:43 <monochrom> Yeah I think {*} works. But I'm rusty on this.
14:04:46 <bollu> which is the free partial order
14:05:10 <monochrom> Maybe {}.
14:07:54 <Welkin> has anyone used pygments to add syntax highlighting to haskell or purescript code?
14:08:00 <Welkin> it lookes like it doesn't quite work
14:08:36 <bollu> monochrom: you can't define a function into {} 
14:08:53 <hanna> The only problem with semver is assuming every package follows it
14:09:12 <monochrom> Initial! I just need {} -> another poset.
14:10:16 <bollu> c_wraith: how'd you get the source position from the underlying string parser or whatever?
14:10:24 <bollu> monochrom: no, I asked for final
14:10:33 <monochrom> {*} looks final.
14:10:36 <bollu> yeah
14:10:49 <c_wraith> bollu: I cheated and just passed the third argument as both return values, since I didn't care about error reporting
14:10:54 <bollu> lol, I see
14:10:58 <bollu> c_wraith: dang
14:11:02 <bollu> c_wraith: OK, for now I'll just do that
14:11:07 <bollu> but I need to fix this eventually
14:11:30 <c_wraith> bollu: I'm playing with that now, actually.  I'll let you know if I get a result I'm happy with.
14:11:45 <bollu> sure, thanks a ton
14:11:55 <Profpatsch> quchen: fyi I took your mockup of a multi-keyed map and implemented a small preliminary version https://hackage.haskell.org/package/yarn-lock-0.2.0/src/src/Data/MultiKeyedMap.hs
14:12:03 <bollu> c_wraith: out of curiosity, what are you parsing
14:12:21 <Profpatsch> quchen: Maybe we can extend it to a full package?
14:12:34 <quchen> »we«? :-þ
14:12:46 <c_wraith> A boring expression language.  My experiment was mostly in parsing to a typed representation..  But so far it's actually really boring.  I think I need richer types for it to get interesting.
14:13:06 <Profpatsch> I’m not particularly experienced in writing basic data structures, so publishing it as nice package is probably out of my league.
14:13:24 <ph88> what part of the cabal api can i use to read the version number from the cabal file ?
14:13:48 <bollu> heh, I see
14:13:49 <Profpatsch> For anything more advanced than the few functions a better representation would probably be needed as well.
14:14:32 <Profpatsch> I’m not even sure whether the implementation is correct.
14:14:40 <Profpatsch> I’m just hoping for the best atm. :P
14:14:54 <quchen> You can try showing that it’s hard to prove incorrect using tests ;-)
14:15:05 <Profpatsch> Especially the Eq instance, maybe you can take a look at that?
14:15:32 <Profpatsch> I also have a hunch that Eq can be implemented without requiring Ord k
14:16:01 <bollu> c_wraith: what did you do for Ord?
14:16:11 <hvr> ph88: the same one used e.g. in https://github.com/hvr/multi-ghc-travis/blob/master/make_travis_yml_2.hs to read the tested-with: field
14:16:28 <bollu> c_wraith: did you have a "natural" ord instance for your tokens?
14:16:35 <Profpatsch> quchen: Here’s the commit if you have any comments about the code https://github.com/Profpatsch/yarn-lock/commit/c59fa278c506862d15374307d3d0e8c1e3c60e84
14:16:46 <c_wraith> bollu: I think I just derived it.  It's meaningless, so I assume it was for storing in a Map or something
14:17:10 <bollu> I see
14:17:19 <hvr> ph88: happens right at the start of the  genTravisFromCabalFile function
14:17:43 <ph88> thx hvr 
14:17:47 <ph88> be back later
14:18:21 <quchen> It sounds like a nice package idea to learn how to make a package with!
14:18:31 <bollu> c_wraith: how does deriving Ord work? lex ordering for product types?
14:19:23 <monochrom> Yes.
14:19:29 <bollu> and for sum types?
14:19:37 <c_wraith> bollu: and sum types are ordered by constructor order as written
14:19:40 <bollu> monochrom: Ord is total order right?
14:19:41 <bollu> I see
14:19:44 <monochrom> Earlier constructors are <er
14:19:46 <bollu> that's.. bizzare?
14:20:00 <monochrom> Ord is total order so that we can put things in binary search trees.
14:20:30 <c_wraith> monochrom: unless it's Order for Float or Double, in which case it's..  not either of those
14:21:13 <EvanR> > (3 :: CReal) < 4
14:21:15 <lambdabot>  True
14:21:18 <EvanR> good
14:21:24 <bollu> lol what?
14:21:58 <EvanR> totally ordered mannnn
14:22:16 <bollu> no, why did you feel the need to check that?
14:22:34 <EvanR> > (3 :: CReal) < sqrt 9
14:22:36 <lambdabot>  False
14:22:43 <EvanR> > (3 :: CReal) > sqrt 9
14:22:45 <lambdabot>  False
14:22:47 <EvanR> o_O
14:22:56 <hvr> EvanR: try == 
14:22:57 <[exa]> oh noew
14:23:00 <EvanR> > (3 :: CReal) == sqrt 9
14:23:02 <lambdabot>  True
14:23:06 <EvanR> O-O
14:23:09 <[exa]> whoa
14:23:10 <hvr> mind blown
14:23:27 <c_wraith> It's Eq instance cheats
14:23:31 <EvanR> i think its choosing a delta
14:23:32 <c_wraith> *Its
14:23:39 <c_wraith> because obviously that's impossible :)
14:24:09 <monochrom> > (10^50 ::CReal) == 10^50 + 1
14:24:11 <lambdabot>  False
14:24:31 <EvanR> this tangent is not going as expected
14:24:43 <monochrom> > (10^100 ::CReal) == 10^100 + 1
14:24:45 <lambdabot>  False
14:24:48 <EvanR> > pi == atan 1 / 4 :: CReal
14:24:49 <lambdabot>  error:
14:24:50 <lambdabot>      • Couldn't match expected type ‘CReal’ with actual type ‘Bool’
14:24:50 <lambdabot>      • In the expression: pi == atan 1 / 4 :: CReal
14:25:03 <EvanR> > pi == (atan 1) * 4 :: CReal
14:25:05 <lambdabot>  error:
14:25:05 <lambdabot>      • Couldn't match expected type ‘CReal’ with actual type ‘Bool’
14:25:05 <lambdabot>      • In the expression: pi == (atan 1) * 4 :: CReal
14:25:11 <monochrom> I admit defeat.
14:25:32 <EvanR> > pi == ((atan 1) * 4 :: CReal)
14:25:34 <lambdabot>  True
14:27:10 <bollu> the more haskell I learn
14:27:16 <Philonous> Was CReal the one based on binary representation or continued fractions?
14:27:20 <bollu> the more I start reaching for Bifunctor and Profunctor
14:27:26 <EvanR> there are two CReals
14:27:27 <bollu> I can't tell if this is enlightment or gluttony anymore
14:27:37 <EvanR> both fast cauchy sequences
14:27:53 <[exa]> there isn't the N-parametrized CReal in lambdabot?
14:28:02 <EvanR> no...
14:29:53 <nshepperd_> > 1 == (1 + 10^(-100) :: CReal)
14:29:55 <lpaste> Zemyla pasted “A weird Applicative I came up with while trying to write a regex library” at http://lpaste.net/355741
14:29:55 <lambdabot>  *Exception: Negative exponent
14:30:06 <nshepperd_> Oh right
14:30:21 <nshepperd_> > 1 == (1 + 10^^(-100) :: CReal)
14:30:24 <Zemyla> So has anyone heard of anything similar to this type I created?
14:30:24 <lambdabot>  True
14:30:33 <EvanR> ah ha!
14:31:15 <EvanR> so CReal is totally ordered, just violating laws in the process
14:31:37 <EvanR> just like Double!
14:32:15 <quchen> Everything is totally ordered, just violating some laws in the process.
14:32:46 <EvanR> agreed
14:33:23 <nshepperd_> We're all totally ordered here
14:33:43 <bollu> nshepperd1: perhaps you meant "well ordered"? :3
14:34:09 * EvanR orders a well
14:34:36 <quchen> Do they do deliveries to you?
14:34:39 <quchen> Well, ordered anyway.
14:34:53 <Zemyla> quchen: What law does () violate in its total order?
14:35:15 <quchen> Zemyla: For some value of »some«.
14:35:30 <dfeuer> Gurkenglas: See https://www.reddit.com/r/haskell/comments/6c6ld6/runstarray_seems_arbitrary/dhuoamj/
14:35:34 <Zemyla> Wait, you can't order it with bottom.
14:35:37 <quchen> Also: compare ⊥ ⊥ is not True. Bottom catches them all!
14:35:58 <bollu> > let y f = f y f in compare (y id) (y id)
14:35:59 <lambdabot>  error:
14:36:00 <lambdabot>      • Occurs check: cannot construct the infinite type:
14:36:00 <lambdabot>          t ~ (t -> t1 -> t0) -> t0
14:36:16 <bollu> > let y f = f (y f) in compare (y id) (y id)
14:36:22 <lambdabot>  mueval-core: Time limit exceeded
14:36:22 <quchen> y f = f (y f)
14:36:25 <bollu> yeah
14:36:37 <bollu> is that the simplest way to create bottom?
14:36:43 <bollu> that's the first one I thought of at least
14:36:46 <Gurkenglas> dfeuer, I had started a response and then put it off. I guess I can circumvent the procrastination by moving to IRC.
14:36:53 <quchen> x=x -- bollu 
14:37:00 <bollu> quchen: ah, right
14:37:06 <kadoban> > compare undefined ()
14:37:08 <lambdabot>  *Exception: Prelude.undefined
14:37:09 <bollu> I'm.. not sure why the hell I reached for y id
14:37:18 <kadoban> I wonder why that instance of Ord even looks at its values ...
14:37:21 <dfeuer> Gurkenglas: no need to procrastinate :_P
14:37:28 <Gurkenglas> dfeuer, are you sure that that won't typecheck, in the sense of having tried it? Coz it seems to me like it should, though I havent tried it
14:37:36 <dfeuer> Gurkenglas: yes, I tried it.
14:38:01 <Gurkenglas> Need is not procrastination's point
14:40:19 <nshepperd_> Void is well ordered!
14:40:49 <nshepperd_> Also, Int# :p
14:41:11 <kadoban> > compare (undefined :: Void) (undefined :: Void)
14:41:13 <lambdabot>  EQ
14:41:14 <nshepperd_> Hmm maybe not
14:41:56 <Gurkenglas> :t undefined :: (forall f. Applicative f => (Data.Array.ST.STArray s i e -> f (Array i e)) -> a -> f b) -> (forall s. ST s a) -> b -- Can I somehow have lambdabot tell me the rest of the type error
14:41:57 <lambdabot> error:
14:41:57 <lambdabot>     • Cannot instantiate unification variable ‘a0’
14:41:57 <lambdabot>       with a type involving foralls:
14:41:58 <nshepperd_> Can an Int# be non terminating?
14:42:22 <nshepperd_> I guess not because there's nothing to enter
14:42:24 <MitchellSalad_> is it possible to write 'data Proxy k (a :: k) = Proxy' using KindSignatures syntax?
14:43:02 <MitchellSalad_> this doesn't work: 'data Proxy :: forall k. k -> (a :: k) -> Type where'
14:43:20 <Zemyla> :t undefined :: (forall f s. Applicative (f s) => (Data.Array.ST.STArray s i e -> f s (Array i e)) -> a -> f s b)
14:43:21 <lambdabot> Applicative (f s) => (GHC.Arr.STArray s i e -> f s (Array i e)) -> a -> f s b
14:43:24 <Zemyla> Gurkenglas: There you go.
14:43:30 <Zemyla> That's what you'll be wanting.
14:44:20 <Zemyla> Also, how do I request a feature be added to Data.Array?
14:46:33 <Zemyla> Because I want indexArrayF :: Ix i => Array i e -> b -> (e -> b) -> b
14:47:33 <hpc> which element of the array does it pick?
14:47:42 <Philonous> nshepperd_, data Proxy k (a :: k)  :: * where ...
14:47:48 <Zemyla> I meant Array i e -> i -> b -> (e -> b) -> b.
14:48:05 <Philonous> Oh wait
14:48:07 <Philonous> Never mind
14:48:09 <Zemyla> It'd be along the lines of indexVectorM from the vector package.
14:48:21 <Rotaerk> huh, just learned of the proc keyword
14:49:18 <c_wraith> Rotaerk: Arrow syntax is terrifying
14:49:26 <Rotaerk> heh
14:49:38 <Gurkenglas> Zemyla, shouldn't that be Ix i => Array i e -> i -> Maybe e? (Also I have a hunch the i should be in front)
14:49:45 <MitchellSalad_> arrow syntax is awesome
14:49:57 <c_wraith> bollu: Well...  I've managed it, but it's terrible to use.  megaparsec really is hostile to custom token types
14:50:20 <Zemyla> Gurkenglas: If and only if it means that, when I pattern-match on the Maybe e, I get a value that contains no references to the array itself.
14:51:14 <Gurkenglas> Why should it mean that any more for your original type signature than for mine?
14:51:25 <bollu> c_wraith: lol
14:51:28 <bollu> c_wraith: do tell
14:51:30 <Zemyla> Gurkenglas: That's what I want the semantics of it to be.
14:51:46 <bollu> c_wraith: a gist would be nice
14:52:05 <Gurkenglas> I'm implying that those semantics are orthogonal to that type signature difference
14:53:17 <Zemyla> Gurkenglas: I know that, but I just want something like that because if I have x = a ! i, then the only way for x to stop being a thunk with a reference to the array it came from would be to fully evaluate it.
14:53:27 <Zemyla> To WHNF.
14:53:41 <Zemyla> And given that the value in the array itself might not even be WHNF, that's unnecessary strictness.
14:54:06 <c_wraith> bollu: http://lpaste.net/355742  It should be multiple modules, but it's all there
14:54:19 <bollu> c_wraith: much obliged
14:54:32 <monochrom> Zemyla: Use a copy function that copies out a length-1 array at that position.
14:54:52 <monochrom> Actually that means "slice" and then "copy".
14:55:45 <Zemyla> monochrom: You can't take slices of Arrays from the array package. And the copies still use the same (!) function, so the array would be full of thunks with references to the previous array, making it twice as bad.
14:56:02 <monochrom> Oh, array package. I don't know what to do then.
14:56:04 <bollu> c_wraith: what the absolute madness
14:56:13 <monochrom> What I said is good for vector.
14:56:24 <geekosaur> also repa, I think?
14:56:30 <c_wraith> bollu: well, I mean..  it *should* have been a bunch of modules. :)
14:56:32 <monochrom> Also bytestring and text as it happens. (They share ideas.)
14:56:35 <bollu> c_wraith: how long does lpaste live for?
14:56:49 <bollu> c_wraith: I want to take a look at this sometime this week, but i'm not sure when I'll get the time
14:56:57 <bollu> c_wraith:  do you mind if I put this in a personal gist?
14:57:00 <c_wraith> bollu: it seems to be eternal.  or until the site dies
14:57:01 <geekosaur> until someone resets the db, which last happened a few years agfo
14:57:04 <monochrom> I think lpaste lives forever.
14:57:10 <bollu> I see, cool
14:57:13 <Zemyla> monochrom: That's because ByteString and Text can't store unevaluated Word8s or Chars.
14:57:21 <c_wraith> bollu: sure, copy it wherever.  It's all just an experiment I've been playing with.
14:57:38 <bollu> c_wraith: cool, thanks!
14:58:13 <c_wraith> bollu: I've been writing it to learn about things anyway.  Nothing of immediate practical use in there anyway. :)
14:58:17 <bollu> c_wraith: just for reference, I'm using megaparsec for this: http://github.com/bollu/simplexhc
14:58:36 <Gurkenglas> Is there a torrent of that db?
15:02:11 <Rotaerk> hmm unclear on some aspects of the open source culture/community
15:03:06 <Rotaerk> I made and used some pipes combinators that seem like they would be generally useful for solving a certain class of problems, might be useful to others
15:03:27 <Rotaerk> do I simply submit a PR to pipes-extras, or discuss with the maintainer first, or just push out my own library, or what
15:03:39 <monochrom> I vote for discussing first.
15:04:06 <Rotaerk> k
15:04:33 <monochrom> But to anticipate possible futures, the chronological order of the 3 options are: discuss; PR; revolt.
15:04:49 <Rotaerk> heh
15:04:59 <monochrom> "when diplomatic efforts fail..."
15:05:34 <Rembane> ...I always turn to lenses.
15:05:46 <hpc> "the citizens are revolting!" "yes, but there's no need to make fun of them"
15:05:57 <Rotaerk> lol
15:06:16 <kadoban> I prefer "You said it, they stink on ice!"
15:06:37 <Rotaerk> I'm not as math-enlightened as many haskellers seem to be, so I may miss some of the ways that these abstractions could be streamlined/optimized
15:06:50 <Rotaerk> maybe the names could use work too
15:33:33 <ph88> does criterion have something to compare the results of the functions under test? i wanna make sure they are the same
15:36:40 <NextHendrix> is it possible to pattern match on the right hand size of ==
15:37:30 <lyxia> > let Just x == Just y = False in Just () == Just ()
15:37:32 <lambdabot>  False
15:38:16 <lyxia> NextHendrix: what are you trying to do
15:39:15 <NextHendrix> think i've got stuck down a rabbit hole overcomplicating things
15:39:19 <NextHendrix> https://ptpb.pw/uW6q/hs
15:39:39 <NextHendrix> i have a function, that does multiple checks on some output
15:39:57 <NextHendrix> checkMsg
15:40:35 <lyxia> Just url <- getUrlMsg message
15:40:50 <NextHendrix> the conditional statement checks if the result of another function is a Just or a Nothing, and if its a Just is runs another function with the returned value of the first
15:41:45 <lyxia> is that ^ what you meant
15:42:12 <NextHendrix> yeah i want to pattern match on the Just url
15:42:37 <NextHendrix> but GHC says "variable not in scope: url :: URL"
15:42:43 <NextHendrix> can i not pattern match like that
15:43:42 <lyxia> note that I wrote an "<-" instead of "=="
15:44:05 <lyxia> == is not for pattern matching
15:44:46 <NextHendrix> i want to see is the result of isUrlMsg is a (Just <something>), and if so, run doUrl with that <something> that isUrlMsg returns
15:46:05 <lyxia> NextHendrix: | Just url <- isUrlMsg message = doUrl handle url
15:47:04 <NextHendrix> lyxia: runtime error if isUrlMsg returns Nothing, no?
15:47:16 <NextHendrix> > Nothing == False
15:47:18 <lambdabot>  error:
15:47:18 <lambdabot>      • Couldn't match expected type ‘Maybe ()’ with actual type ‘Bool’
15:47:18 <lambdabot>      • In the second argument of ‘(==)’, namely ‘False’
15:48:20 <NextHendrix> tbh i think isUrlMsg is doing too much
15:48:27 <NextHendrix> i can just decomplicate it
15:48:28 <lyxia> no it won't error
15:48:33 <lyxia> the guard will simply not match
15:48:40 <NextHendrix> really?
15:48:41 <NextHendrix> neat
15:49:20 <lyxia> > let f x | Just y <- x = y |otherwise = "OK" in f Nothing
15:49:22 <lambdabot>  "OK"
15:49:37 <NextHendrix> interesting
15:49:56 <NextHendrix> so if something goes mad, the guard just passes it down
15:50:53 <NextHendrix> > let f x | Just y <- x = y | otherwise = "OK" in f (Just 4)
15:50:55 <lambdabot>  error:
15:50:55 <lambdabot>      • No instance for (Num [Char]) arising from the literal ‘4’
15:50:55 <lambdabot>      • In the first argument of ‘Just’, namely ‘4’
15:53:03 <lyxia> 4 must be a string
16:02:26 <glguy> > let f x | Just y <- x = y | otherwise = "OK" in f (Just "4")
16:02:28 <lambdabot>  "4"
16:11:05 <EvanR> heh... interesting
16:11:19 <jle`> yeah, you can think of a normal guard `foo | myCondition = ....` as if it were `foo | True <- myCondition = ...`
16:11:38 <EvanR> i wrote this r >>= f = join (fmap f r). and was wondering why it wasnt an error, since my join function is called joinR
16:12:25 <jle`> it won't be an error, but it'll probably be an infinite loop, heh
16:14:07 <EvanR> when mathematical facts become bugs 
16:14:31 <EvanR> the opposite of the usual mathematical nonsense being normal code (x = x + 1)
16:15:03 <EvanR> or maybe theyre the same phenomenon
16:15:57 <EvanR> switcher :: R a -> E (R a) -> R a
16:16:12 <jle`> in mathematics you encounter the same problem when you define something in terms of itself in an unsound way
16:16:13 <EvanR> switcher start e = join (accum start (fmap const e))
16:16:19 <EvanR> space leaks eat my shorts
16:16:43 <jle`> since join is defined in terms of (>>=), then if you define (>>=) in terms of join, it's like "irreducible"
16:36:57 <moly> I have a question about installing HaskellR using stack and nix.
16:37:55 <hanna> I'm trying to use http-conduit to POST the contents of a file. How do I tell the server about the filename/encoding? It doesn't seem like `setRequestBodyFile` does anything special here
16:39:21 <moly> stack can't find gcc, even though it is in my $PATH
16:43:15 <glguy> moly: You forgot the part where you include all the output in a paste
16:44:15 <moly> http://lpaste.net/355743
16:45:45 <glguy> moly: Were there more details in config.log?
16:45:54 <moly> I haven't used nix before
16:45:59 <moly> I can't find the config.log
16:47:41 <hanna> Ah, I think what I want is multipart form data, not setRequestBodyFile
16:47:57 <hanna> but it doesn't seem like http-conduit does this anymore post version 2.x? Old versions still had Network.HTTP.Conduit.MultipartFormData but it seems to have been mysteriously deleted
16:48:46 <hanna> ah, it was moved to http-client
16:50:35 <Eduard_Munteanu> hanna, you could set the Content-Type as a header
16:50:57 <hanna> I actually specifically need the filename, and I also need it to be uploaded with a certain POST field name
16:51:01 <hanna> for the server to recognize it
16:51:40 <Eduard_Munteanu> You want a multipart form then.
16:52:06 <Eduard_Munteanu> Content-Type does allow you to specify the filename, but if you say you need it as a form...
16:54:28 <slack1256> On a running application, is there a way to get the +RTS -s -RTS information?
16:55:01 <dmj`> slack1256: import GHC.Stats
16:55:45 <slack1256> Mmm and if the process is just running on my machine?
16:55:49 <slack1256> let's say, xmonad?
16:56:23 <Eduard_Munteanu> I suppose you can't modify and reload the config?
16:56:34 <Tuplanolla> Inspect `/proc/$!/cmdline`, slack1256.
16:56:53 <slack1256> I can. I wanted to know if this was possible as is
16:57:26 <slack1256> for example, old unixes made some internal output available on SIGUSR1 on some commands
16:58:05 <Tuplanolla> Oh, you want the data instead of the options.
16:58:23 <dmj`> moly: you could probably do it with just nix
16:58:37 <slack1256> yeah, as If I had launched xmonad with +RTS -s -RTS
16:59:12 <moly> @dmj` you mean without stack?
16:59:12 <lambdabot> Unknown command, try @list
16:59:17 <dmj`> moly: yea
16:59:35 <dmj`> moly: seems like it needs inline-r, H and R
16:59:47 <dmj`> nix-shell -p "haskell.packages.ghc802.ghcWithPackages (pkgs: with pkgs; [H inline-r (import <nixpkgs> {}).R])"
17:01:07 <dmj`> slack1256: you’d probably need to recompile xmonad (or maybe just your config), to log those stats
17:01:44 <slack1256> I see
17:02:35 <dmj`> main = do 
17:02:35 <dmj`>    forkIO $ forever (threadDelay (1000 * 1000) >> (hPutStrLn stderr =<< show <$> getGCStats))
17:02:35 <dmj`>    xmonadMain
17:05:02 <moly> dmj`: much thanks
17:12:52 <dmj`>  moly: np, let me know how it goes
17:12:59 <dmj`> moly: *
17:16:09 <hanna> https://0x0.st/EK5.hs I wonder if there's a better way of writing this
17:16:15 <hanna> feels needlessly verbose
17:18:37 <glguy> hanna: It looks like none of the code is redundant, what's the verbosity that you're imagining you could get rid of? You could improve the code by not using flip or =<< on the last line
17:19:32 <hanna> glguy: I guess I'm just surprised it takes this much boilerplate to POST stdin to a website
17:19:40 <hanna> seems like it would be like 1-2 lines in something like python
17:19:42 <hanna> idk though, haven't tried
17:19:46 <glguy> Which part is the boiler plate?
17:20:46 <hanna> partFileRequestBody "file" "stdin.txt" . requestbodySourceChunked $ sourceHandle stdin  -- this is the line that bothers me
17:30:07 <samtay> Can someone help me with handling the stdin :: System.IO.Handle? Let's say I want to accept text from stdin and output it uppercase to stdout. I'd also like to implement a timeout limit, such that if no input is given within 5s then it errors out. On the other hand, I'd also like to support a direct pipe such as "echo 'test' | hsprogram"
17:32:17 <glguy> samtay: You can detect that stdin is a terminal device with System.IO.hIsTerminalDevice
17:32:32 <samtay> The problem is to handle the pipe, I need to test for isEOF, but to handle the timeout, I need to test via hWaitForInput.
17:32:37 <glguy> System.Timeout.timeout can help with the timeout
17:33:04 <glguy> Oh, or hWaitForInput is better
17:33:28 <samtay> Ah... let me look into that and see if I have any more questions. Just using the two functions I mentioned, you can't order them successfully (isEOF will block but if it's put after the hWaitForInput then hWaitForInput errors out when it encounters EOF)
17:33:51 <glguy> You can catch the error, so that's OK
17:35:14 <samtay> I figure there _has_ to be a way to do this without throwing and catching an error...
17:35:40 <EvanR> low level IO stuff prefers IO exceptions to C-style Bool reeturns
17:35:52 <glguy> Why would you figure that?
17:36:10 <samtay> Haha I guess I base that on nothing.
17:36:21 <EvanR> for better or worse
17:36:34 <glguy> I'm surprised that on my computer I get "fdReady: msecs != 0, this shouldn't happenAbort trap: 6" when I try to use hWaitForInput on stdin
17:36:43 <EvanR> with the exception way you can handle errors in one place, if at all
17:36:49 <samtay> Yup I've had that one too. Forget exactly why, I've permuted the code a ton of times at this point.
17:37:22 <EvanR> Abort trap: 6... nice
17:37:26 <samtay> (For reference, this is for the Haskell Book From First Principles, Chapter 29 IO, Exercise 1)
17:38:05 <samtay> And, that exercise doesn't indicate that I should reach for the exception module, but that's okay, probably a good thing for me to learn about anyway. Thanks for the tip.
17:38:22 <glguy> https://ghc.haskell.org/trac/ghc/ticket/13525
17:39:20 <EvanR> low level IO is not as convenient as it could be, i see catching these exceptions as a way to make a nicer higher level Io action
17:46:54 <hanna> are there any pattern synonyms in base for string prefix/suffix matching?
17:47:09 <lpaste> glguy pasted “for samtay” at http://lpaste.net/355744
17:47:10 <hanna> I know I can use stripPrefix and view patterns but it seems like in 2017 we should have better
17:47:19 <glguy> there's isPrefixOf and stripPrefix
18:30:27 <jle`> it'd be nice if you could use type applications with overloaded literals
18:30:32 <jle`> 5 @Int, "hello" @String
18:32:42 <geekosaur> propose it. (I'm actually a bit surprised it doesn't work...)
18:36:16 <jle`> i wonder if there's still time to get it in before 8.2
18:36:22 <jle`> what's the best way to propose it?
18:36:41 <Lokathor> using linear for openGL is trickier than expected :/
18:37:04 <jle`> oh nvm https://ghc.haskell.org/trac/ghc/ticket/11409
18:37:22 <Welkin> jle`: what do you mean by type applications?
18:37:30 <jle`> -XTypeApplications
18:37:38 <Welkin> link?
18:37:57 <jle`> https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#visible-type-application
18:38:36 <jle`> like, for fmap :: Functor f => (a -> b) -> (f a -> f b), you can write `fmap @[]` to know that you want fmap :: (a -> b) -> [a] -> [b]
18:38:51 <jle`> and `read @Int "123"` to let ghc know you want read :: String -> Int
18:39:06 <Welkin> how is `read @Int 5` different from `(read :: Int) 5`
18:39:15 <Welkin> er
18:39:28 <jle`> it's the same, but there are situations when giving a full type signature is inconvenient
18:39:36 <Welkin> okay
18:39:44 <jle`> like the fmap example
18:39:53 <jle`> and being able to write (Proxy @5) instead of (Proxy :: Proxy 5)
18:40:05 <jle`> it also associates in a nicer way than type signatures
18:41:40 <lyxia> @5 instead of Proxy @5 once you give up on non-ambiguity
18:41:40 <lambdabot> Maybe you meant: v @ ? .
18:41:47 <lyxia> lambdabot: sorry
18:48:17 <Welkin> I don;t understand the use case for something like this https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#implicit-parameters
18:49:33 <Welkin> the example looks forced
18:50:25 <geekosaur> it is forced
18:50:40 <Welkin> How is the `sort` function there any different from just writing `sort = sortBy`
18:50:43 <Welkin> ?
18:50:56 <geekosaur> the use cases are somewhat rare in my experience, but for example the new "stack trace" support uses it (hidden inside a HasStack constraint)
18:51:25 <geekosaur> effectively it's a way to pass data via the context instead of the parameters
18:52:24 <geekosaur> which ... if you have control over the parameters than using parameters is usually easier, and if you don't then the context likely won't be any more controllable, but.
18:52:42 <jle`> Welkin: it's basically usable in most situations where you'd want Reader/ReaderT
18:52:46 <jle`> except it's implicit
18:52:56 <geekosaur> so about the only time I use it is for ghci / lambdabot hacks
18:53:30 <jle`> Welkin: i use it for configuring big projects with a global configuration
18:53:38 <jle`> ports, hostnames, etc.
18:54:01 <Welkin> how would you pass this parameter in that situation?
18:54:06 <jle`> the only downside really (if your thing is global) is that you can't use them in typeclass instances
18:54:18 <Welkin> where does it get defined
18:54:44 <geekosaur> in a let, usually
18:55:05 <Welkin> oh
18:55:08 <Welkin> inside the function?
18:56:11 <jle`> Welkin: as long as `?config` is in scope somewhere, it'll be picked up by implicitparams
18:56:33 <jle`> so like `do ?config <- loadConfig :: IO Config; ... stuff ...`
18:56:57 <jle`> ?config here working like a normal variable identifier
18:56:57 <lambdabot> Unknown command, try @list
18:57:02 <jle`> sorry lamdabot
18:57:36 <jle`> i prefer it over ReaderT/reflections in this case since you can just return normal unwrapped data types and the parameter composition gets passed globally
18:58:04 <jle`> but unlike with 'reflections', you can't use implicit parameters in typeclass instances
18:58:40 <geekosaur> oh, and if you think this is weird, try on https://downloads.haskell.org/~ghc/6.4.1/docs/html/users_guide/type-extensions.html#linear-implicit-parameters :)
18:58:53 <jle`> it's probably only useful if your configuration is global too since mixing implicit parmeters in the same project is kind of awkward
18:59:30 <jle`> geekosaur: haven't seen these before :O
19:00:20 <geekosaur> you can still trigger a warning about their removal if you use a % in the wrong place iirc
19:00:32 <geekosaur> > let %x = 5 in %x
19:00:34 <lambdabot>  <hint>:1:5: error: parse error on input ‘%’
19:00:37 <jle`> sounds like a piece of haskell lore
19:00:41 <geekosaur> hm, right, hint doesn;'t have that code
19:26:41 <ALX> hello
19:26:53 <dmj`> ALX: o/
19:27:08 <dmj`> jle`: the lore of yore
19:28:16 <ALX> absolute noob here... new to both IRC and Haskell... is learn you a haskell a good place to start?
19:30:39 <vaibhavsagar> ALX: don't do it!
19:31:07 <vaibhavsagar> http://bitemyapp.com/posts/2014-12-31-functional-education.html
19:31:13 <ALX> vaibhavsagar: Suggestions?
19:31:35 <vaibhavsagar> haskell programming from first principles is a better one to start with
19:31:50 <vaibhavsagar> http://haskellbook.com/
19:31:57 <glguy> If you're buyign something, hutton's Programming in Haskell
19:33:03 <glguy> Learn you a Haskell won't teach you Haskell, but it will certainly introduce you to some of the things that are in Haskell
19:33:24 <AerialBoundaries> Is Real World Haskell decent?
19:34:14 <glguy> It hasn't been kept up to date since its release years ago
19:34:21 <AerialBoundaries> ok
19:34:31 <glguy> So some of the libraries have changed since, some of the code samples won't work
19:37:30 <dmj`> AerialBoundaries: good reference material http://dev.stephendiehl.com/hask/
19:37:38 <dmj`> @typeclassopedia
19:37:38 <lambdabot> Unknown command, try @list
19:37:58 <geekosaur> @where typeclassopedia
19:37:58 <lambdabot> http://www.haskell.org/haskellwiki/Typeclassopedia
19:38:04 <dmj`> geekosaur: thanks
19:41:13 <AerialBoundaries> thank you
20:15:35 <DataComputist> The channel #haskell-beginner seems usually empty?
20:16:12 <EvanR> ah
20:16:28 <EvanR> #haskell-beginners
20:16:32 <EvanR> with an S
20:17:02 <EvanR> but this channel should be good for beginners
20:29:04 <dunx> it is
20:30:10 <DataComputist> On macOS, how to let stack use the newest released GHC? Mine shows ghc 7.10
20:31:33 <geekosaur> compiler is determined by the resolver, and you're probably using the same resolver that was current LTS when you installed it.
20:32:15 <DataComputist> https://www.irccloud.com/pastebin/5GKWjCL6/code
20:32:28 <geekosaur> trying to look up how you tell it to update resolver
20:32:41 <DataComputist> How to let the resolver use the latest release versin of ghc?
20:33:05 <MarcelineVQ> for outside for a project you update it at .stack/global-project/stack.yaml
20:33:28 <DataComputist> Just manually edit a version number in .stack/global-project/stack.yaml?
20:34:32 <MarcelineVQ> if you want that to be the default for using stack outside of a project then yes, something like   resolver: lts-8.15
20:34:59 <DataComputist> The file has a line saying
20:35:03 <DataComputist> https://www.irccloud.com/pastebin/osTegNDc/line
20:35:37 <DataComputist> https://www.irccloud.com/pastebin/hAg40ESm/configline
20:36:00 <MarcelineVQ> afaik that's for more special custom setup
20:37:01 <DataComputist> OK, so my file current has 'resolver: lts-5.5'. Where does one get the right number to replace that '5.5'?
20:37:26 <MarcelineVQ> you can check out the list of the latest per ghc here here https://www.stackage.org/
20:37:42 <Guest40286> such a shame this doesn't work anymore: http://ircbrowse.net/browse/haskell
20:37:53 <Guest40286> Anybody know why?
20:38:30 <DataComputist> So one just have to manually read off the latest version number and manually edit the config file?
20:38:53 <DataComputist> Why there isn't a way to update to the latest release version by running a command ... this doesn't seem natural
20:39:33 <c_wraith> DataComputist: the purpose of stack is to not update.
20:39:35 <MarcelineVQ> because the resolver is the central concept of stack, updating it willy-nilly is against the point of stack which is stability
20:43:33 <DataComputist> No, i mean when it's outside of any project, isn't it natural to be able to use the latest release version?
20:43:56 <c_wraith> DataComputist: there's a reason I don't use stack.  It's not designed for that.
20:44:03 <glguy> DataComputist: The closest thing that comes to find is to use: stack solver --resolver=ghc-8.0
20:44:40 <DataComputist> If it's in some project, it is useful to keep a set of mutually compatible software versions by not allowing individual softwares to automatically updating to their own newest versions.
20:45:43 <DataComputist> But when it's not in any purposefully protected subenvironment, upgrading to the latest released version seems more natural ...
20:47:33 <DataComputist> So I followed the first instruction and manually changed .stack/config.yaml to use 'resolver: lts-8.15'
20:47:35 <DataComputist> now I have
20:47:49 <DataComputist> https://www.irccloud.com/pastebin/bjZzDduv/ghc8
20:48:03 <DataComputist> It's still not the latest released version of ghci
20:48:36 <MarcelineVQ> hmm? yes it is
20:48:38 <DataComputist> No, take it back. It IS.
20:48:45 <DataComputist> I was mixing up ghc and ghci.
20:49:02 <DataComputist> I'm good now. Tks.
20:49:37 <MarcelineVQ> that's the latest released ghc as well, ghci is ghc
20:50:25 <DataComputist> Right, for some reason I remembered it was 8.10 or something.
20:51:05 <EvanR> we got a time traveler over here
20:52:25 <DataComputist> :S
20:52:55 <Welkin> DataComputist: you are thinking of 7.10
20:53:21 <Welkin> oh
20:53:37 <Welkin> stackage lts versions are not the same as ghc versions
21:02:34 <DataComputist> Is there a slight memory saving to define a function anonymously as compared to a named function definition?
21:03:01 <EvanR> you mean, named function at the top level?
21:03:28 <glguy> Sure, the top-level one needs a name. that could be as much as 10 more bytes
21:03:40 <glguy> in your file
21:04:39 <EvanR> for a one argument function, i guess theres not much of a difference
21:05:33 <EvanR> for currying you need a heap object and a context either way
21:05:41 <glguy> it doesn't matter at runtime
21:10:05 <EvanR> you would really hope that slight surface syntax choices dont drastically affect performance
21:10:20 <EvanR> especially when theres no semantic difference
21:26:48 <lpaste> halogenandtoast pasted “SpockHelpCleanup.hs” at http://lpaste.net/4352731754272915456
21:26:51 <halogenandtoast> If anyone is interested in some refactoring help ^^
21:56:41 * halogenandtoast afk
21:57:17 <halogenandtoast> apparantly I forgot how to just issue that command.
21:57:28 <halogenandtoast> s/apparantly/apparently/
22:25:32 <EvanR> manatee 0.2.2 uploaded 2011
22:26:55 <EvanR> docs not built... 
22:28:24 <DataComputist> Is the ':{' syntax mentioned in http://stackoverflow.com/questions/8443035/multi-line-commands-in-ghci a Haskell thing or a GHCi thing?
22:29:23 <EvanR> ghci
22:30:09 <DataComputist> Why the command prompt is called 'Prelude'?
22:30:21 <EvanR> it changes depending on what you import
22:30:38 <EvanR> Prelude is the module implicitly loaded first anywhere
22:31:03 <EvanR> https://hackage.haskell.org/package/base-4.9.1.0/docs/Prelude.html
22:37:41 <mark__> Hi, in "Haskell programming from first principles" it mentions how a -> a -> a has only two implementations (after saying that a -> a has a single one, id).  What are these? I've only managed to think of a -> (a -> a) and (a -> a) -> a, but this seems wrong due to -> being right-associative.
22:38:15 <mark__> and of course, in typing that out I figured out my answer (f a b = a and f a b = b).  Thanks I guess?
22:38:20 <glguy> mark__: An "implemntation" of (a -> a -> a) is a value that has that type
22:38:23 <MarcelineVQ> yw
22:54:59 <halogenandtoast> I tried an hour or so ago, so hopefully it doesn't feel spammy for me to ask again. I was hoping to get some feedback / refactoring help on this paste: http://lpaste.net/4352731754272915456 if anyone was interested in providing feedback. Mainly the `getProvider` method and extracting the DB type like that.
22:55:19 <halogenandtoast> Took me a little bit of type-tetris to figure out what type `DB` was supposed to be.
22:56:13 <lyxia> looks like you might want to reach for MaybeT
22:57:52 <lyxia> or just throw an exception that you catch at the end...
22:58:59 <cocreature> here’s how that example would look like with MaybeT http://lpaste.net/355745 (untested)
23:01:41 <halogenandtoast> Thanks lyxia and cocreature checking it out.
23:02:07 <halogenandtoast> I don't want it to eventually throw an exception, if it fails I want it to redirect to the base website
23:02:24 <halogenandtoast> oh man the runMaybeT is beautiful
23:02:54 <halogenandtoast> I was wondering how to use `<-` in a Maybe monad when my top level monad was the `DB` type.
23:03:04 <cocreature> halogenandtoast: if you have control over the definition of selectFirst and getDomain you might want to put the wrapping inside MaybeT in there. if not, you probably still want to write separate wrapper functions "getDomain = MaybeT . Qualified.getDomain" instead of wrapping it at the use site
23:03:21 <halogenandtoast> selectFirst comes from persistent, I control getDomain.
23:03:40 <halogenandtoast> well control as far as it is present in the paste.
23:22:09 <DataComputist> The hyperlink to the "Kronos Haskell Notebook ..." in https://wiki.haskell.org/Distributions#Kronos_Haskell_Notebook_for_Mac is now an invalid link.
23:24:31 <halogenandtoast> lyxia and cocreature: I'm still amazed by the use of MaybeT, thanks for the suggestion.
23:29:45 <vaibhavsagar> hey, how do I statically link postgres to a binary?
23:30:14 <vaibhavsagar> i.e. what GHC options should I add?
23:34:31 <vaibhavsagar> optl-static and optl-pthread are not enough
23:37:26 <Axman6> vaibhavsagar: you might want to take a look at: https://www.fpcomplete.com/blog/2016/10/static-compilation-with-stack
23:37:32 <Axman6> it's not trivial...
23:39:07 <vaibhavsagar> Axman6: Hi! I have looked at that already
23:39:35 <Axman6> Then you know as much as anyone :)
23:39:39 <vaibhavsagar> I did the crtbeginT swap and everything
23:39:54 <vaibhavsagar> but I need additional linker options? to get it to work
23:41:10 <Axman6> do you have static libraries for postgresql instaslled?
23:42:24 <vaibhavsagar> hmm, maybe not? I will try that
23:43:09 * Axman6 wonders if baldrick1 is the same baldrick from #llvm and might actually know something about static compilation... unlike the rest of the Haskell community
23:43:24 <baldrick1> Yes, the same
23:43:37 <baldrick1> Why?
23:43:40 <halogenandtoast> cocreature: sadly with your example I get Expected type: ReaderT SqlBackend (LoggingT IO) (Maybe Text) Actual type: Maybe (Maybe Text) on the res <- part. For some reason I thought it compiled.
23:44:09 <halogenandtoast> > Why? > and might actually know something about static compilation... unlike the rest of the Haskell community
23:44:11 <lambdabot>  <hint>:1:6: error: parse error on input ‘>’
23:44:37 <halogenandtoast> having to do with the postgres linking question above.
23:46:22 <cocreature> halogenandtoast: I think I need some minimal example that I can play around with in ghci to figure out that error
23:46:31 <baldrick1> what time was the postgres linking question asked, because I don't immediately see one (I was disconnected for a bit - could explain it)?
23:46:32 <cocreature> playing type tetris without using a typechecker is too hard
23:47:10 <vaibhavsagar> baldrick1: just me asking how to statically link libpq to an executable
23:47:47 <halogenandtoast> cocreature: this is my entire (relatively small) application: https://gist.github.com/halogenandtoast/eb854f673d19870fb82475f9a1bd4655
23:48:57 <vaibhavsagar> here is the output I'm getting: http://lpaste.net/355746
23:49:18 <halogenandtoast> cocreature: I took out a return to try something
23:49:21 <halogenandtoast> that doesn't fix the issue
23:49:33 <cocreature> halogenandtoast: I’m compiling the deps atm, I’ll get back to you once I can try it
23:50:16 <halogenandtoast> cocreature: You're an awesome human being, thanks for taking the time!
23:54:23 <baldrick1> vaibhavsagar: libpq makes use of many other libraries, you need to link with them too
23:54:37 <baldrick1> running ldd on libpq.so will show you a very long list :)
23:55:14 <vaibhavsagar> I have libpq.a
23:55:34 <vaibhavsagar> which is a static library(?), so no luck there
23:56:08 <vaibhavsagar> nvm I found libpq.so
23:57:10 <baldrick1> As for this kind of warning: "warning: Using 'dlopen' in statically linked applications requires at runtime the shared libraries from the glibc version used for linking".  Well, it's true :)  As long as you run only on the machine you built the program on you should be OK
23:58:10 <baldrick1> This kind of thing:
23:58:10 <baldrick1> /usr/lib/x86_64-linux-gnu/libpq.a(fe-connect.o): In function `parseServiceFile':
23:58:10 <baldrick1> (.text+0xbe2): undefined reference to `ldap_init'
23:58:36 <baldrick1> is just telling you that libpq itself makes use of libldap, so you also need to link with libldap
23:58:45 <vaibhavsagar> ahh, I see
23:58:57 <vaibhavsagar> and the order matters?
23:59:21 <baldrick1> with the GNU linker (which you are surely using), order matters
23:59:40 <vaibhavsagar> and e.g. for libldap, do I have to pass '-lldap'?
23:59:59 <vaibhavsagar> because `ld` can't find that
