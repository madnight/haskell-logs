17:02:16 --- topic: 'https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | https://summer.haskell.org Summer of Haskell 2017'
17:02:16 --- topic: set by mauke!5lzdiZJQGk@p3m/member/mauke on [Mon Jul 31 05:46:51 2017]
17:02:29 <sqooq> Or maybe I should go nisstyre's route
17:02:44 <sqooq> and just force a somewhat pointless StartPitch thing for Abs notes too
17:02:57 <nisstyre> well, the answer to your original question is to use GADTs
17:03:06 <nisstyre> I'm not saying whether it makes sense for your program
17:03:21 <nisstyre> I don't know what the end goal is
17:04:55 <sqooq> nisstyre: I think if I do it more in that direction then I'll have a cleaner 'data Track a = StartNote | Cons (Track a) a 
17:05:11 <nisstyre> possibly yeah
17:05:21 <sqooq> Then in the functions just constrain a
17:05:21 <nisstyre> you can have multiple data constructors for your Note type
17:05:29 <nisstyre> and you can add class constraints to each one
17:06:06 <sqooq> data constructors is the thing on the left of the equals right?
17:06:29 <nisstyre> no, the right
17:06:31 <monochrom> No, on the right.
17:06:36 <nisstyre> the left is the type constructor
17:06:41 <sqooq> agh true
17:06:44 <monochrom> Track is a type, StartNote is a data constructor.
17:06:46 <sqooq> I call the thing on the right value constructor
17:06:46 <nisstyre> type constructors give you types
17:07:00 <nisstyre> data constructors give you values of that type
17:07:20 <zenspider> I can't `import Test.QuickCheck` in my repl... using plain ghci (in emacs)... v 8.2.1. what am I missing?
17:07:36 <zenspider> this course says that it is included w/ ghc
17:07:49 <sqooq> nisstyre: if the 'a' of a Track can ONLY contain one possible Note type of the 4, how should I do that
17:08:09 <sqooq> if I do Note = A | B | C | D, then the track can contain a list of any right?
17:08:13 <nisstyre> sqooq: you could have a type class with only that as an instance
17:08:23 <nisstyre> there might be another way of doing it but that's the simplest IMO
17:08:34 <nisstyre> or you know, just include that as the type
17:08:35 <sqooq> only what as an instance?
17:08:37 <nisstyre> instead of a
17:08:56 <jle`> zenspider: hm, i do'nt think it's actually included with ghc
17:08:57 <sqooq> nisstyre: that would mean separating all the note types, which was my initial idea
17:09:01 <nisstyre> sqooq: if you have four different types
17:09:05 <nisstyre> right?
17:09:12 <sqooq> I initially had RelRelNote RelAbsNote ...
17:09:19 <zenspider> jle` hrmph... this course is starting to piss me off
17:09:22 <jle`> zenspider: if you do 'ghc-pkg list', it shows all of the packages that naked ghc is currently aware of
17:09:23 <sqooq> so then it would be nice you could have Track RelRelNote
17:09:38 <jle`> i have a fresh ghc-8.2 installation and i don't see quickcheck
17:09:46 <sqooq> nisstyre: Do you think I should do that?
17:09:47 <jle`> but it's not too hard to just install it using cabal or stack
17:09:53 <nisstyre> sqooq: if you do Note = A | B |C | D then all of those will give you a type of Note
17:09:56 <nisstyre> the same type
17:10:03 <nisstyre> that's four data constructors
17:10:18 <zenspider> jle`: these are U of Glasgow profs... wtf?
17:10:35 <jle`> zenspider: it is possible that your course might be assuming you are using The Haskell Platform
17:10:37 <nisstyre> sqooq: I suggest reading up on GADTs and type classes a bit more
17:10:38 <sqooq> nisstyre: hmm, are you saying I could have Track A, Track B, ...?
17:10:38 <jle`> or stack
17:10:51 <jle`> or maybe an older version of ghc might come with QuickCheck
17:11:08 <jle`> i believe if you install ghc via the haskell platform it should come with QC but i'm not 100% sure
17:11:15 <nisstyre> sqooq: I'm saying you can have different data constructors that correspond to the set of types you want to allow for each one
17:11:26 <nisstyre> each one could have a different class constraint
17:11:35 <jle`> zenspider: yes the Platform does include quickcheck https://www.haskell.org/platform/contents.html
17:11:35 <nisstyre> and you could create instances of them for the types you want to allow
17:11:42 <nisstyre> and they would all give you the same type in the end
17:11:43 <sqooq> yeah but my track can only contain one of them at a time
17:11:47 <sqooq> and if i'm not mistaken
17:11:59 <sqooq> doing Note = A | B | C | D
17:12:03 <jle`> zenspider: not that i recommend the Platform, but that's just my only plausible theory as to why your professors might assume you have it already
17:12:07 <sqooq> would make just the general 
17:12:11 <sqooq> 'Track Note'
17:12:14 <nisstyre> it gives you a sum type
17:12:29 <nisstyre> it allows for any of them to be the parameter to Track
17:12:33 <sqooq> Really?
17:12:36 <nisstyre> if you specify Track Note
17:12:45 <sqooq> O see yeah
17:12:47 <nisstyre> yes because they're all data constructors for the same type
17:12:47 <sqooq> that's problematic
17:12:48 <jle`> haskell platform website looking pretty slick these days
17:12:57 <jle`> i dig it
17:13:23 <sqooq> I don't want lists like [A, B, A, A, A, C ] to be possible (by lists i mean Track, Track is just a custom list)
17:13:24 <jle`> oh i gdidn't realize that it's a part of the entire haskell website
17:13:30 <jle`> so i suppose it has been slick for a while
17:13:45 <sqooq> Only lists like [A, A, A, A, ...]
17:13:46 <nisstyre> sqooq: so you only want like A and B for example in a list?
17:13:49 <nisstyre> ok
17:13:52 <sqooq> yea
17:13:59 <nisstyre> so have a separate type for that
17:14:00 <sqooq> I can do it by specifying the notes separately
17:14:15 <nisstyre> promote the data constructors to type constructors
17:14:16 <sqooq> but that seems inelegant to me
17:14:21 <sqooq> because they're all so similar, 
17:14:48 <jle`> what you're asking for is sort of something like anonymous type differences
17:14:49 <nisstyre> this is getting into territory that is non-standard Haskell though
17:14:52 <sqooq> nisstyre: yeah that's what I have right now. You think that's alright? They're all so similar, just different combinations.
17:14:53 <nisstyre> with GADTs
17:15:04 <jle`> the most elegant way is to make your types in a way where it's easy to specify meaningful subsets
17:15:14 <nisstyre> I'd try it both ways and see which works better
17:15:21 <nisstyre> you can always scrap one approach
17:15:25 <nisstyre> at least you'll have learned something
17:15:37 <jle`> you can pull something together with singletons + functor sums tho
17:15:42 <sqooq> jle`: can you elaborate perhaps?
17:15:47 <jle`> on which part?
17:15:59 <sqooq> "specify meaningful subsets"
17:16:05 <sqooq> Here I'll try to make an lpaste
17:16:12 <sqooq> with how i'm thinking about things
17:16:20 <sqooq> to be more clear and have everything in one place
17:16:21 <sqooq> brb
17:17:56 <jle`> like for example data Animal = Zebra | Giraffe | Lizard | Snake
17:18:02 <jle`> if you wanted to make a "mammals only" subset
17:18:15 <jle`> you can do data Mammal = Zebra | Giraffe; data Reptile = Lizard | Snake
17:18:27 <jle`> data Animal = AMammal Mammal | AReptiple Reptile
17:18:42 <jle`> then your mammals-only subset is Mammal
17:19:21 <Hafydd> type Reptuple = (Reptile, Reptile, Reptile)
17:19:37 <jle`> like, have a data type for the subsets you care about, and then define your more general type in terms of that smaller data type
17:19:52 <dmj`> repticlate = flip replicate Reptile
17:19:59 <Hafydd> Hahah.
17:20:01 <jle`> this can also be made abstract, as well
17:20:06 <jle`> using pattern synonyms
17:20:20 <jle`> even if you don't want Animal to actually include Mammal
17:20:44 <jle`> data Animal = AZebra | AGriaffe | ALizard | ASnake, then you can wrirte projection functions :: Animal -> Maybe Mammal
17:21:02 <nisstyre> jle`: this is basically what I was saying
17:21:08 <jle`> and use pattern synonyms like pattern (AMammal AZebra) = Zebra; pattern (AMammal AGiraffe) = Giraffe
17:21:09 <nisstyre> except make them all type constructors in the first place
17:21:20 <nisstyre> so data Zebra = Zebra, data Lizard = Lizard, etc
17:21:21 <jle`> then you can "pretend" like Animal is a sum type and pattern match on AMammal to get a mammal
17:21:44 <jle`> i don't know if i'm cool with that, that's kind of a lot of levels of specification
17:22:00 <jle`> but actually what you're proposing is just a less useful version of singletons
17:22:07 <jle`> which might be nice
17:22:33 <jle`> data Animal = Zebra | Giraffe | Lizard ...; then you can auto-derive the singletons which give the exact types you are mentioning
17:22:54 <jle`> if you auto-derive singletons, you get data Sing Zebra = SZebra; data Sing Giraffe = SGiraffe; data Sing Lizard = SLizard
17:23:20 <jle`> so that's pretty much essentially the pattern you are mentioning, except you get some nice benefits like having it be a closed kind
17:23:32 <nisstyre> yeah
17:23:37 <nisstyre> I don't know if that's necessary herre
17:23:41 <nisstyre> it might make things more tricky
17:24:25 <jle`> well the singletons auto-deriving gives you exactly what you wrote, so it would be just as usable as what you wrote i think
17:24:39 <nisstyre> are you saying that it also creates a new king though?
17:24:42 <nisstyre> *kind
17:24:52 <nisstyre> I've never used derived singletons before
17:25:05 <jle`> yeah, it creates a new kind, which has the benefit of letting you define functions polymorphic over all animals
17:25:11 <jle`> all animal-types/animal-singletons
17:25:18 <jle`> but if you don't want to, you don't have to take advantage of it
17:25:22 <nisstyre> actually yeah that's exactly what I was thinking
17:25:31 <nisstyre> promote everything up one level
17:25:31 <jle`> cause otherwise you'd need to write a typeclass
17:25:37 <jle`> to write animal-polymorphic things with your method
17:26:13 <erisco> animal polymorphism… the new kind of polymorphism for the wild programmer
17:26:21 <jle`> but one cute thing is you can write functions for arbitrary subsets, type Mammal = Sub Sing '[Zebra, Giraffe]
17:26:33 <jle`> which can only contain an SZebra or an SGiraffe
17:26:34 <nisstyre> what extension is this?
17:26:41 <jle`> sorry, *Sum Sing '[Zebra, Giraffe]
17:26:47 <jle`> um it's DataKinds for type-level lists
17:26:52 <jle`> and the Sum type is itself a GADT
17:26:56 <nisstyre> ok, it's been a while since I used DataKinds
17:27:06 <jle`> Sum f [a,b,c] is either an f a, an f b, or an f c
17:27:25 <nisstyre> I think we scared sqooq though
17:27:27 <jle`> so Sum Sing '[Zebra, Giraffe] is either Sing Zebra, or Sing Giraffe
17:27:29 <sqooq> no
17:27:32 <sqooq> i made an lpaste
17:27:33 <sqooq> http://lpaste.net/358690
17:28:02 <jle`> but using sum like this isn't too helpful because ghc's unifier won't unify two subsets with the same items but different order
17:28:18 <nisstyre> that's unfortunate
17:28:29 <jle`> what we really need is type-level sets (kind of like what purescript has) but we don't really have a good solution
17:28:41 <nisstyre> I'm guessing it's because it could end up being a quadratic time thing
17:28:53 <nisstyre> because it needs to check all possible permutations at worst
17:29:14 <nisstyre> or it can't sort them for some reason?
17:29:16 <nisstyre> IDK
17:29:21 <jle`> sqooq: what are the note types?
17:29:43 <sqooq> It's there no?
17:30:03 <jle`> nisstyre: i don't think it'sn necessarily fundamentally tricky...just that nobody has done it.  but i might be trivializing the work that might be done, heh
17:30:11 <jle`> sqooq: AbsAbs/AbsRel/etc. ?
17:30:13 <sqooq> Are you asking about my second comment?
17:30:16 <zenspider> jle`: thanks for the sanity check... yeah. they apparently wanted me to install haskell platform but I already had ghc via homebrew
17:30:16 <sqooq> yes jle`
17:30:20 <sqooq> those are the possibilities
17:30:28 <zenspider> not entirely sure what the difference is
17:30:54 <jle`> zenspider: haskell platform comes with some extra packages and toolchain stuff
17:31:08 <nisstyre> sqooq: you would have to do what jle` said and create sets of types
17:31:14 <nisstyre> or lists rather
17:31:27 <nisstyre> or you could create type classes for each possible set
17:31:34 <nisstyre> and then instances for the different types
17:31:36 <sqooq> nisstyre: Didn't I do that; the under the second comment?
17:31:41 <jle`> sqooq: your combinations type is alreqdy in base
17:31:53 <sqooq> ?
17:32:08 <jle`> it's :*:
17:32:35 <jle`> data (f :*: g) a = f a :*: g a
17:32:58 <jle`> basically you can make your combinations parametrrized by a functor
17:33:22 <jle`> also my laptop batteries just died so i am unablr to comment further at this time sorry
17:33:53 <sqooq> aw man
17:34:53 * hackagebot tmp-postgres 0.1.1.0 – Start and stop a temporary postgres for testing – https://hackage.haskell.org/package/tmp-postgres
17:41:07 <avx_> where is the default main-is specified in stack.yaml? (so that "stack build" knows what to build in a multi-cabal project)
17:54:24 <iqubic> Here's why you don't want to get ghc from your package manager: it a few versions behind
17:56:42 <iqubic> Are there any differences between 8.0.2 and 8.2.1 I should be aware of?
17:57:30 <MarcelineVQ> https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/8.2.1-notes.html
17:59:04 <iqubic> I don't think that really anything I care about.
18:00:06 <jle`> yeah ghc 8.2 is mostly a stabilization/consolidation release
18:00:18 <duncan^> no love for hugs
18:00:25 <iqubic> Is it fine to be a few versions behind?
18:00:27 <jle`> lots of performance tweaks i believe
18:00:38 <jle`> well, the jump from 7.10 to 8.0 was pretty big
18:00:44 <jle`> 8.0 to 8.2 was relatively minor
18:00:57 <iqubic> But I have 8.0.2. Is that fine?
18:01:43 <jle`> 8.2 has few language features for low-level performance tweaks...and also pattern synonym exhaustiveness is nice but not necessary (it only helps with warnings)
18:02:11 <jle`> a lot of big things ar eplanned for 8.4
18:04:25 <jle`> for everyday stuff the most pain you'll feel from 8.2 vs 8.0 is probably from libraries like containers
18:04:28 <jle`> and maybe compilation times
18:05:04 <jle`> by libraries i mean like, i like 'maxView' from containers but that's only in the version that comes with 8.2 and not the version that comes with 8.0 heh
20:02:46 <quazimodo> hi guys
20:03:27 <quazimodo> I'd like your opinions on a 'sort property' name. As in, if I'm going to sort a collection of structures by a property, what is the most appropriate name for that property.
20:03:42 <quazimodo> order is out because my app actually has orders, so it'd be an order data type with an order property... it's weird
20:04:01 <quazimodo> sort seems more appropriate, but strictly speaking it isn't right, is it? seems verby
20:04:12 <quazimodo> best I came up with is 'sortWeight'
20:13:24 <raynold> ahh it's a wonderful day
20:22:18 <Digit> iqubic: you asked how the hfish install was going.  the attempt initiated before bed last night went like: http://dpaste.com/2RA49C8 so still no joy.  i'll see if i wanna bother sorting through it n trying again after breakfast.  got other projects more pertinent to attend to though
20:27:23 <iqubic> Yeah, I got the same errors more or less.
21:07:51 * hackagebot directory 1.3.1.3 – Platform-agnostic library for filesystem operations – https://hackage.haskell.org/package/directory
21:07:51 * hackagebot teardown 0.3.0.0 – Build composable components for your application with clear teardown semantics – https://hackage.haskell.org/package/teardown
21:27:08 * hackagebot miso 0.7.8.0 – A tasty Haskell front-end framework – https://hackage.haskell.org/package/miso
21:27:08 * hackagebot wordchoice 0.1.2.0 – Get word counts and distributions – https://hackage.haskell.org/package/wordchoice
21:45:35 <rschmukler> Hey all. I'm getting a "Bad interface file" error when trying to use `Data.Compact` from ghc 8.2.1.
21:46:05 <rschmukler> The error is "mismatched interface file ways (wanted "", got "dyn")" - presumably the library is dynamically linked and it's expecting static?
21:46:21 <rschmukler> Pretty new to haskell so any tips as to how to debug this would be super appreciated.
21:47:04 <cocreature> rschmukler: are you on archlinux?
21:47:10 <rschmukler> I am indeed
21:47:16 <Welkin> lol
21:47:23 <cocreature> I hate that I’m right about this everytime
21:47:25 <rschmukler> Well played? :P
21:47:30 <Welkin> should we call this arch hell?
21:47:55 <cocreature> rschmukler: try installing ghc-static
21:48:04 <Welkin> rschmukler: nuke everything and install haskell/ghc using stack
21:48:19 <cocreature> if you only install ghc, ghc-libs and ghc-static via pacman you’re going to be fine
21:48:47 <rschmukler> Alright, I'll give that a go.
21:50:53 <rschmukler> cocreature: I tried (re)installing ghc-static ghc-libs and ghc, no dice.
21:51:28 <Welkin> rschmukler: just use stack
21:51:47 <Welkin> it's one line to install everything
21:51:48 <rschmukler> Welkin: alright, I presume I'll have to switch off of LTS to get 8.2.1
21:51:59 <Welkin> you can set the resolver to nightly
21:52:14 <Welkin> https://docs.haskellstack.org/en/stable/README/#quick-start-guide
21:52:28 <cocreature> rschmukler: how exactly are you compiling?
21:53:26 <rschmukler> cocreature: currently just via ghc directly. `ghc File.hs`. That might be a terribly dumb thing to do
21:53:56 <cocreature> rschmukler: do you have other Haskell related packages except for ghc-static, ghc-libs and ghc installed?
21:55:44 <rschmukler> cocreature: it looks like I have a ton of community/haskell-* libs installed. Not sure from what
21:56:10 <ongy> xmonad/pandoc/stack will all pull a bunch of those
21:56:24 <cocreature> rschmukler: don’t do that. if you want to use the GHC packages by arch, kill everything except for ghc, ghc-static and ghc-libs
21:57:38 <rschmukler> I may have installed stack via pacman, should I uninstall stack via pacman and get rid of all of those?
21:57:58 <rschmukler> (Ultimately I do need stack, obviously)
21:58:19 <cocreature> you can use the stack you got via pacman to install a statically linked stack executable and then get rid of the one you got via pacman
22:02:02 <rschmukler> cocreature: installing cabal via pacman, good or bad?
22:02:24 <cocreature> bad
22:03:00 <cocreature> I really mean it quite literally, only install ghc, ghc-static and ghc-libs via pacman
22:06:50 <mikeplus32> is there a 'recommended' package for bit vectors? or alternatively, anybody with an opinion on which they'd use in production?
22:19:58 <ackpacket2> When someone writes "data Tree a = Leaf a | Node a"
22:20:10 <ackpacket2> Why is it unnecessary to declare any sort of reference to Leaf and Node?
22:20:41 <ackpacket2> What is this statement actually saying?
22:20:43 <cocreature> ackpacket2: where did you get that definition from? that’s not a tree
22:21:20 <cocreature> it defines that things of type "Tree a" can either be leaves which have a value of type a attached or nodes that also have a value of type a attached
22:22:02 <ackpacket2> cocreature, some lecture slides found during a google search
22:22:09 <rschmukler> cocreature: Got it working, thanks! Ended up using stack for everything, installed from source instead of pacman
22:22:19 <cocreature> ackpacket2: are you sure you didn’t make a mistake when copying the definition of Node?
22:22:24 <ackpacket2> cocreature, So Leaf and Node are just symbols?  They don't need meaning associated with them?
22:22:29 <ackpacket2> cocreature, positive, yes
22:23:17 <cocreature> something like "data Tree a = Leaf a | Node a (Tree a) (Tree a)" would make more sense
22:23:32 <cocreature> then nodes would also have the left and the right branch of the tree
22:23:46 <cocreature> making it an actual tree instead of whatever that thing is supposed to be now
22:24:10 <ackpacket2> Actually you're likely right, I think the formatting placed the rest of this statement on other lines
22:25:20 <ackpacket2> Would it be worth defining tree as: data Tree a = Tree a Nil (Tree a) | Tree a Nil Nil | Tree a (Tree a) Nil | Tree a (Tree a) (Tree a) ??
22:25:40 <cocreature> that’s a syntax error
22:26:04 <cocreature> "data Tree a = …" defines a _type_ named Tree that takes one parameter
22:26:52 <cocreature> "data Tree a = Tree a Nil (Tree a)" defines the type and a _constructor_ called "Tree" which takes three arguments of type a, Nil and (Tree a)
22:27:00 <cocreature> you can’t have more than one constructor by the same name
22:27:06 <cocreature> and Nil is probably not a type
22:27:32 <cocreature> "data Tree a = Nil | InnerNode a (Tree a) (Tree a)" might be what you’re looking for
22:28:12 <cocreature> that defines two constructors, "Nil" representing the empty tree and "InnerNode" which has a value of type a and the left and right branch of the tree (which could be Nil)
22:29:12 * hackagebot cryptocompare 0.1.0 – Haskell wrapper for the cryptocompare API – https://hackage.haskell.org/package/cryptocompare
22:46:50 <crucify_me> hi in Prelude this returns 100 but I'm wondering why I can't get the shadowing to work with ' z 9 ' for example :   let x = 5 in let y = x + 5 in let z y = y * 10 in z y      . I get error Variable not in scope: z :: Integer
22:47:13 <crucify_me> -> t
22:47:48 <crucify_me> with separate let statements entered into Prelude it works as expected
22:48:44 <crucify_me> z 9  -> 90
22:49:47 <jle`> crucify_me: it's not parsed how you think it is
22:50:23 <jle`> er actually this works for me
22:50:26 <jle`> on my ghci
22:50:41 <crucify_me> really?
22:50:42 <jle`> where are you getting the error?
22:50:56 <jle`> > let x = 5 in let y = x + 5 in let z y = y * 10 in z y
22:50:59 <lambdabot>  100
22:51:14 <crucify_me> when I try z 9. it should return 90
22:51:55 <jle`> when you just type in 'z 9' alone?
22:52:03 <jle`> > let x = 5 in let y = x + 5 in let z y = y * 10 in z 9
22:52:06 <lambdabot>  90
22:52:14 <jle`> what exactly are you typing in?
22:52:35 <crucify_me> oh I see. I thought it would stay in the buffer complete
22:52:43 <jle`> not sure what you mean exactly
22:52:51 <jle`> what are you typing in?
22:52:55 <jle`> what buffer are you referring to?
22:53:02 <jle`> i can't really find a way to get that expression to error
22:53:23 <jle`> oh, are you thinking that that expression defines a new function 'z'?
22:53:44 <jle`> 'let ... in ...' is an expression, not a declaration/definition
22:53:53 <crucify_me> yeah with separate let expressions it does. let me try ...
22:53:57 <jle`> if you want to define something new in ghci, just type 'z y = y * 10'
22:54:05 <jle`> oh, those aren't "let expressions"
22:54:12 <jle`> that's actually ghci syntax
22:54:21 <jle`> if you just type in "let x = 10"
22:54:33 <crucify_me> oh ok it's different, thanks
22:54:38 <jle`> that's not a let expression; let expressions are 'let x = y in z'
22:54:40 <jle`> with the "in"
22:54:55 <crucify_me> > let x = 5
22:54:56 <jle`> "let x = 10" is ghci syntax for defining a binding 'x' as 1
22:54:57 <lambdabot>  <no location info>: error: not an expression: ‘let x = 5’
22:54:58 <jle`> *10
22:55:06 <jle`> yeah, > for lambdabot only evaluates expressions
22:55:10 <jle`> it doesn't do ghci-isms
22:55:39 <crucify_me> oh I thought it was identical thanks jle` 
22:55:40 <jle`> in any case, in a modern ghci, the 'let' is no longer required
22:55:46 <jle`> yeah it is admittedly a bit confusing
22:56:36 <jle`> i have .... opinions
22:56:49 <jle`> but apparently a lot of people did, as well, so ghci no longer requires 'let' for definitions :)
22:57:53 <cocreature> the more ghci pretends it’s not special, the more confusing the differences become
23:00:24 * hackagebot hasql-optparse-applicative 0.2.2 – "optparse-applicative" parsers for "hasql" – https://hackage.haskell.org/package/hasql-optparse-applicative
23:01:22 <crucify_me> but that last in z y is not a declaration , so it only works with the y parameter if you put a variable in with the whole expression... 
23:01:23 <jle`> let is still required for multi-line expression entry
23:01:59 <jle`> crucify_me: 'let ... in ....' reduces by applying all of the definitions to the expression on the right
23:02:13 <jle`> so 'let x = y in ...' is the same as '...', but all 'x' is replaced by 'y'
23:02:57 <jle`> 'let x = 4 in (let y = x + 5 in (let z y = y * 10 in z 10))'
23:02:59 <crucify_me> jle` yeah I did it like > let x = 5      > let y = x + 5     > let z y = y * 10. that creates the shadow fine
23:03:14 <jle`> yeah, those are three ghci-syntax definitions
23:03:30 <jle`> it's equivalent to > x = 6     > y = x + 4      > z y = y * 10
23:04:05 <jle`> make a new definition x = y, then a new definition y = x + 4, then a new (function) definition z = (\y -> y * 10)
23:05:04 <cocreature> jle`: I don’t think it’s true that let is required for multi-line expression entry. :{ and :} seem to work just fine without let
23:05:20 <crucify_me> ok so the point was the shadowing, but I found out about some quirks of the system(s)
23:05:21 <jle`> cocreature: huh i guess i mean let automatically triggers multi-line mode
23:05:29 <cocreature> oh ok
23:05:41 <jle`> if multiline expression is on
23:05:48 <jle`> maybe it's a layouting thing
23:06:50 <cocreature> tbh I rarely use ghci’s multiline mode. when I’m at that point, I just write things in a file and load that in ghci
23:07:25 <jle`> that's fair, i usually only use it when i accidentally trigger it using let, heh
23:07:51 <srhb> jle`: How does that happen?
23:08:06 <jle`> if you :set +m
23:08:19 <jle`> and you do something like 'let x = 5
23:08:25 <jle`> ghc will enter multi-line mode
23:08:25 <srhb> jle`: Oho, I see. Thanks :)
23:08:32 <crucify_me> but Is this correct?  ... :
23:08:36 <jle`> it was confusing the first couple of times it happend
23:09:08 <crucify_me> z y = (\y -> y * 10) (\x -> x + 5)
23:09:33 <crucify_me> that is in my notes but is confusing me
23:09:48 <jle`> what do you mean by correct?
23:09:58 <jle`> do you know how to reduce lambda expressions?
23:10:03 <cocreature> crucify_me: that’s not going to work. if you do the first beta-reduction you have "z y = (\x -> x + 5) * 10"
23:10:26 <jle`> if you see `(\y -> ...) blah`, then taht reduces to '...', but with all y's replaced with blah's
23:10:58 <crucify_me> let me paste something one moment please
23:11:22 <crucify_me> https://ptpb.pw/IJjC
23:12:11 <crucify_me> more than you bargained for..
23:13:47 <cocreature> crucify_me: you’re mistake is that in "let z y = y * 10" the y is a fresh variable. it’s not the y you defined before
23:14:10 <cocreature> so "z y is (\y -> y * 10) (\x -> x + 5)" is not true
23:14:17 <cocreature> ahrg, *your
23:14:17 <jle`> z = (\y -> y * 10)    -- in the body, y refers to whatever you give 'z', not any external y
23:14:19 <cocreature> it’s too early
23:14:42 <crucify_me> I do understand both of those points thanks
23:14:50 <jle`> z 9 = (\y -> y * 10) 9 = (9 * 10) = 90
23:14:56 <crucify_me> that is the crux of the shadowing
23:15:36 <cocreature> crucify_me: if you enable -Wall via ":set -Wall", ghc should warn you about shadowing
23:15:56 <crucify_me> it was a book lesson though
23:17:37 <crucify_me> but the comment there says that it "completely hides (shadows) the original binding, but it doesn't if you call z y you get z 10 which resolves to 100
23:18:34 <cocreature> it does hide it within the body of the definition of z, i.e. the thing on the right of the equal sign
23:20:50 <crucify_me> thanks a lot I essentially get it. I know that that is an expression and not a definition, so it only works with the shadowing by supplying a variable in the last part: z 9 for example.
