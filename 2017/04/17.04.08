00:02:19 <shtuka> ongy: no, and I also cannot find a dot.exe on my hard disc
00:02:30 <Gurkenglas_> How do I copy a thunk, so that I can, say, traverse a list twice at different speeds, and trade off the space I would need to keep track of the elements until the second traversal for a need to compute them twice?
00:02:35 <cocreature> shtuka: did you install graphviz?
00:03:19 <shtuka> cabal install graphviz ->All the requested packages are already installed:
00:04:04 <AbelianGrape> Gurkenglas_: I think if you put the value on the RHS of a lambda constructor (i.e. replace foo = x with foo = \_ -> x) and then replace all instance of foo with "foo ()", it might recompute every time
00:04:10 <cocreature> shtuka: not the haskell package. you need to install http://www.graphviz.org/
00:06:06 <Gurkenglas> AbelianGrape, is there a way to do it if the value is only given as an argument? (Something smells second-class here)
00:06:29 <AbelianGrape> Gurkenglas: Don't know of any way to do that. Interesting use case though
00:06:56 <AbelianGrape> Gurkenglas: In fact, I think it's impossible. It would break lazy IO
00:07:22 <AbelianGrape> (Not that lazy IO is particularly sturdy)
00:07:53 <kdzd_m> hey all
00:07:55 <kdzd_m> allooooooo
00:09:11 <AX3L> Has anyone had problems with isEOF before? My program just seems to ignore Ctrl-D. I am running linux if that makes a difference.
00:10:41 <shtuka> cocreature: I installed graphviz. now mathgenealogy <URL> gives the error "Downloading entry number...1mathgenealogy: Error - Could not parse fetched data. Did you provide a valid URL to an existing math-genealogy entry?"
00:11:25 <cocreature> shtuka: I’ve never used that package, sorry. not sure what’s causing that
00:11:38 <shtuka> ok
00:13:38 <greister> data Aaa = Int Int Int ,I want to know Aaa is a type or value ?
00:13:58 <cocreature> greister: that’s a syntax error :)
00:14:06 <AbelianGrape> greister: Your definition isn't right. You need a constructor on the right of the =
00:14:15 <AbelianGrape> data Aaa = Bbb Int In Int
00:14:31 <AbelianGrape> "Aaa" is a type. "Bbb" is a constructor, which is a function, which is a value
00:14:56 <AbelianGrape> Bbb :: Int -> Int -> Int -> Aaa
00:16:24 <greister> To define type constructor(Aaa) must have a data constructor,such as Bbb?
00:16:53 <jle`> you only need a data constructor if you want it to have values
00:17:16 <jle`> it can't 'contain' anything without a constructor
00:17:20 <AbelianGrape> greister: jle` is correct. "data Void" is a valid data declaration. It has no constructors
00:17:37 <jle`> greister: so if you want to make a type that has three Int's, you need a constructor that contains three Ints
00:17:45 <jle`> s/contains/takes
00:18:10 <AbelianGrape> Also, usually you only use the phrase "type constructor" if your type takes arguments. For example, "data Foo a = ..." vs "data Bar = ...". People refer to Foo as a "type constructor", but not usually Bar
00:21:15 <jle`> AbelianGrape: type constructor with no arguments are still called type constructors
00:21:28 <jle`> according to the haskell report
00:21:37 <jle`> just like how 'Nothing' is a data constructor
00:22:09 <jle`> https://www.haskell.org/onlinereport/haskell2010/haskellch4.html#x10-680004.2
00:24:13 <MarcelineVQ> Gurkenglas: check out oneShot from GHC.Magic  it may be worth experimenting with, alternatively you can possibly take advantage of the 'state hack' http://stackoverflow.com/questions/29404065/why-does-this-haskell-code-run-slower-with-o/30603291#30603291
00:24:48 <MarcelineVQ> hopefully I understood your question enough for those to be relevant
00:25:18 <cocreature> AbelianGrape: sorry I’m not sure what’s going on with your code.
00:26:10 <AbelianGrape> cocreature: Oh well, thanks anyway
00:26:25 <AbelianGrape> jle`: That makes sense, but I've never heard it done at the type level.
00:30:17 <MarcelineVQ> note that it also allows you to call 0-arity type constructors 'type constants', but there's no real need to be that specific in general
00:36:11 <ongy> will Nothing be pointer equivalent to another Nothing? There is no reason for it to exist more than once in Memory, is there? (I guess there's no reason for it to even exist once with the tagged pointer magic)
00:37:00 <ggVGc> seems like a strange thing to worry about in haskell
00:37:42 <jle`> i believe in ghc, there is only one Nothing/()/etc. that exists at runtime
00:39:11 <ongy> ggVGc: still something I just wondered about :) And it does mather for STM
00:45:54 <Gurkenglas> When following Usage at the bottom of https://github.com/viveksjain/live-haskell , I encountered http://lpaste.net/8247767724487344128 . What do?
00:47:04 <_sras_> is it possible to expose a submodule, like A.B, in stack?
00:48:01 <jle`> expose in what way
00:48:45 <jle`> and what is a submodule here?  just a module that is nested two or more layers?
00:56:26 <jle`> (do you mean a hidden module?)
00:58:33 <MarcelineVQ> Gurkenglas: that's no fun, is your stack version up to date?
01:00:39 <hsk3> Instead of this
01:00:39 <hsk3> (foo :: Int) <- myFunc
01:00:40 <hsk3> isn't it somehow possible to do
01:00:40 <hsk3> foo :: Int
01:00:42 <hsk3> foo <- myFunc
01:00:42 <hsk3> ?
01:00:55 <hsk3> (Put the type on a separate line.)
01:01:04 <Gurkenglas> MarcelineVQ, nope, lemme upgrade from 1.3.2 to 1.4.0
01:01:07 <jle`> it is not possible
01:01:11 <hsk3> Bummer
01:01:18 <_sras_> jle`: Just a regular module A.B. I want to use stuff from B to use from another top level package...
01:01:49 <jle`> _sras_: can you just import it?
01:01:54 <jle`> 'import A.B'
01:02:25 <MarcelineVQ> Gurkenglas: hmm that's fairly recent, it may be worth submitting a git issue for stack, possibly it's a windows problem and reporting it could help people
01:03:38 <_sras_> jle`: currently in my .cabal file, only one Module, App is exposed. I tried adding A.B  to that list. But it does not seem to be working...
01:03:54 <jle`> what do you mean by not working
01:04:00 <jle`> can you provide a minimal example?
01:04:46 <_sras_> jle`: Failed to load interface for A.B, while building the dependent package.
01:04:54 <MarcelineVQ> Gurkenglas: 1.4.* does handle setup depends differently so hopefully it'll help
01:05:07 <Gurkenglas> MarcelineVQ, upgrade didnt help
01:05:53 <jle`> _sras_: also, what is a 'top level package'?
01:05:59 <jle`> are you talking about a top-level module?
01:06:18 <cocreature> _sras_: is the module in exposed-modules in your cabal file?
01:06:32 <cocreature> or at least in other-modules if you are importing it from the same package
01:06:35 <_sras_> jle`: Oh. I think I got it. It is not in the dependent package's build dependency....
01:07:10 <Myrl-saki> Any idea on how to type a `Left -> Left' and `Right -> Right' without allowing `Left -> Right"?
01:07:43 <_sras_> jle`: I have two separate packages that my main package depend on...
01:07:47 <geekosaur> Myrl-saki, you can't, if those are the usual Either constructors
01:07:54 <Myrl-saki> geekosaur: Of course
01:07:57 <jle`> ah i see
01:08:02 <Gurkenglas> MarcelineVQ, should I somehow cross-post https://github.com/viveksjain/live-haskell/issues/1 to stack or just run stack install ghci-ng in a new terminal on upgraded stack and copy the output there?
01:08:11 <jle`> _sras_: i don't think there is such thing as a top level backage
01:08:31 <Myrl-saki> geekosaur: But is it possible?
01:09:13 <geekosaur> since "you can't" was not clear: No, it is not possible.
01:09:18 <Gurkenglas> MarcelineVQ, note that the second part of the existing issue also misses some libpcre thing
01:09:49 <geekosaur> they are not distinct types, you cannot restrict their usage
01:10:34 <MarcelineVQ> Gurkenglas: I'll try building it (server) and see what happens
01:11:28 <Myrl-saki> geekosaur: I meant say, with an alternative type system.
01:11:51 <Myrl-saki> geekosaur: Or a refefinement of Either.
01:11:53 <Myrl-saki> redefinement*
01:13:23 <geekosaur> you need someone with a better understanding of type systems to answer that
01:13:47 <Myrl-saki> geekosaur: Ah. Thanks anyway.
01:14:42 <MarcelineVQ> Gurkenglas: try a manual ghci-ng build,  stack unpack ghci-ng  cd into it  stack init  and  stack build
01:15:36 <Jinxit> let's say my data can either be One, Two, Three, etc (quite many), and each entry can be built using a subset of A, B, C (so perhaps One can be built using A or B, while Two can be built from A, B or C), what's a good way to represent this in haskell without allowing incorrect combinations?
01:16:41 <Rembane> Jinxit: I like the isValid-function-approach. Very simple.
01:17:24 <Jinxit> there are only 8 of (A, B, .. H) actually, but the (One, Two ..) has something like ~50-60 versions
01:17:38 <Jinxit> Rembane: but that would be runtime, yes?
01:17:41 <Myrl-saki> Rembane: Runtime check? :|
01:17:51 <Myrl-saki> geekosaur: How about dependent types?
01:18:10 <Myrl-saki> geekosaur: Either s a b -> Either s c d
01:18:20 <MarcelineVQ> Gurkenglas: bad news, I'm able to build either here so I can't trouble-shoot the issue on my end
01:18:27 <Myrl-saki> geekosaur: Where s states if it's Left or Right.
01:18:40 <Rembane> Jinxit, Myrl-saki: Runtime indeed.
01:19:11 <Jinxit> static checking is what brings me to haskell :)
01:19:11 <Gurkenglas> MarcelineVQ, teamviewer?
01:20:05 <MarcelineVQ> nah I don't have anything like that
01:20:17 <Myrl-saki> Jinxit: Can you provide a concrete ecxample?
01:20:46 <Jinxit> well the problem is that i don't know how to represent it well, but i can try
01:20:51 <MarcelineVQ> I do find it ironic that this line appears underneath a giant Download button on the teamviewer website though "Allow someone to connect to your device without having to install any software." which brings you to a list of things to install
01:20:53 <Jinxit> i'll do it the dumb way just to show it
01:21:23 <Myrl-saki> Jinxit: Thanks.
01:22:24 <stphrolland> I'm puzzled by an error. Although I have added pipes and pipes-network to my build-depends section in the cabal file, stack cannot compile my code and says error: Failed to load interface for ‘Control.Proxy’. ANd when I check hackage, they are located inside the pipes package. ANy idea what could be wrong ?
01:22:28 <cocreature> Myrl-saki: what you can do is something like http://lpaste.net/354426
01:24:11 <Jinxit> Myrl-saki: http://lpaste.net/6945794185941221376
01:24:28 <Jinxit> so certain combinations are illegal
01:24:37 <Myrl-saki> cocreature: Oh cool. No need for dependent types.
01:25:48 <Myrl-saki> Jinxit: Oh.
01:26:02 <Jinxit> from a more practical standpoint it's about combining instructions with addressing modes
01:27:06 <Myrl-saki> Jinxit: You might want to check out my compil3e.
01:27:16 <MarcelineVQ> stphrolland: There's two places that provide Proxy that I can find and they're not what you've mentioned. Data.Proxy and Pipes.Internal
01:27:18 <geekosaur> stphrolland, make sure you are checking the same version
01:27:18 <Myrl-saki> Assembler.
01:27:45 <MarcelineVQ> geekosaur: oh is it a version issue?
01:27:55 <Myrl-saki> Jinxit: https://github.com/Myrl/MyM-Private/blob/master/src/myass/Types.hs
01:28:12 <geekosaur> no, that's a boilerplate answer because the ;last 3 times I helped someone with that it turned out they were using an old resolved
01:28:16 <geekosaur> *resolver
01:28:20 <MarcelineVQ> :>
01:28:23 <geekosaur> and using the docs for the latest version
01:28:59 <Jinxit> Myrl-saki: that doesn't have different address modes for the same instruction though, does it?
01:29:08 <geekosaur> Control.Proxy seems an odd place for that anyway
01:29:23 <geekosaur> although I suppose no odder than some of the Control vs. Data splits >.>
01:29:24 <Myrl-saki> Jinxit: Right.
01:30:59 <Jinxit> and i guess you can have things like "Add Absolute | AddI Immediate", but it feels like you're giving the same information twice
01:32:27 <adarqui> hey, i have a file with a bunch of text, but, separated into segments starting with: X <name> ......... so, X <name>\n<text for many lines>\nX <name2>\n..
01:32:34 <Myrl-saki> Jinxit: Honestly better.
01:32:45 <adarqui> with something so simple, wht would you use to parse? still parsec? or something else
01:33:46 <Jinxit> Myrl-saki: even with up to 8 variants of the same instruction? :|
01:39:35 <kuribas> is reactive-banana usable with ghcjs, or should I use something else?
01:41:35 <Gurkenglas> 'kay, stack install ghci-ng failing on a missing '"dyn" library' reported. https://github.com/commercialhaskell/stack/issues/3116
01:41:51 <MarcelineVQ> kuribas: should be, there's examples for reflex, sodium, and reactive banana for ghcjs
01:42:18 <Myrl-saki> Jinxit: Yep.
01:42:23 <Myrl-saki> Jinxit: They're different types.
01:42:35 <kuribas> MarcelineVQ: okay, thanks.
01:42:37 <Myrl-saki> Jinxit: I'll give you an example why.
01:42:40 <geekosaur> Gurkenglas, what ghc is stack using? one it installed, or a different one?
01:42:45 <Myrl-saki> Jinxit: different data structures*
01:42:58 <geekosaur> because it's looking for things like a 'dyn' way for base, and you'd have to get that with ghc
01:43:03 <Gurkenglas> geekosaur, I don't know, I think I ran stack setup at some point? How do I check?
01:43:08 <Myrl-saki> Jinxit: You'll be pattern matching differently anyway.
01:43:25 <Gurkenglas> (some months back or so)
01:43:50 <geekosaur> stack paths, I think?
01:44:41 <Gurkenglas> invalid argument 'paths'
01:46:18 <Myrl-saki> Jinxit: Anyways. Now that you've said it.
01:46:27 <Myrl-saki> Jinxit: GADT would surely help.
01:46:47 <geekosaur> oh, it's "stack path", look for "compiler"
01:47:22 <Jinxit> how would GADTs help? i'm not at all familiar with them
01:48:10 <MarcelineVQ> geekosaur, Gurkenglas: or helpfully, stack path --compiler-bin
01:48:35 <Gurkenglas> "C:\Users\Gurkenglas\AppData\Local\Programs\stack\x86_64-windows\ghc-7.10.3\bin"
01:49:42 <Myrl-saki> Jinxit: With GADT, you can use types to describe your data.
01:49:46 <Myrl-saki> Jinxit: Or something.
01:52:27 <Myrl-saki> Has anyone here read Clowns and Jokers?
01:55:00 <Myrl-saki> data Fix p = Fix (p (Fix p))
02:15:35 <cocreature> Myrl-saki: I think I did but it’s been a long time. do you have some specific question?
02:16:25 <Myrl-saki> cocreature: Page 3. I don't get how L1 {-o-o-o-} -> L2 {-<-o->-}
02:16:40 <Myrl-saki> cocreature: To be more exact, I don't exactly get the choice of figures.
02:18:26 <cocreature> Myrl-saki: sorry I don’t remember that part anymore
02:20:00 <Myrl-saki> cocreature: I think the figures don't "really" matter.
02:20:19 <Myrl-saki> i'll go read some more, I guess.
02:20:40 <Myrl-saki> wei2912: Uwawawa. Otouto. :3
02:20:52 <wei2912> hi Myrl-saki 
02:20:57 <wei2912> how've you been?
02:21:09 <Myrl-saki> wei2912: I'm plerning to make purrgurrming lengerg. :D
02:21:35 <wei2912> what happened to your spelling lmao
02:21:42 <wei2912> writing an interpreter or a compiler?
02:22:11 <Myrl-saki> wei2912: For Arduinos specifically. The lack of FP bothers me.
02:22:19 <wei2912> Myrl-saki: ah, i see
02:22:28 <Athas> Myrl-saki: cool!  A full language or something embedded in Haskell?
02:22:29 <hsk3> Does error always crash the program, or is it just an exception that can be caught without crashing the program?
02:22:53 <cocreature> hsk3: it can be caught but the convention is that "error" is a fatal error and you shouldn’t catch it :)
02:23:23 <hsk3> thank you
02:23:46 <Myrl-saki> Athas: A full language. Not sure if I can just monad this.
02:24:09 <cocreature> hsk3: https://hackage.haskell.org/package/base-4.9.1.0/docs/Control-Exception.html#t:ErrorCall this is the exception that’s thrown if you call "error"
02:24:27 <hsk3> great to know that
02:24:34 <kuribas> Myrl-saki: FP would be hard with the limitations of atmel µControllers.
02:24:43 <Athas> Myrl-saki: for my undergraduate thesis, I did a Haskell eDSL for programming Arduinos.  Programs looked like this: https://github.com/dybber/fladuino/blob/master/fladuino/examples/alarm/Main.hs
02:25:03 <Athas> Functional reactive programing is a pretty decent model for small embedded devices.
02:25:17 <Myrl-saki> kuribas: Indeed. That's why I'll be dabbling with linear types.
02:25:32 <Athas> The ergonomics were bad, though.  I don't like eDSLs anymore.
02:25:55 <kuribas> in general?
02:27:07 <cocreature> Athas: what’s the output of your edsl? C code? binaries?
02:27:24 <Athas> cocreature: you run the Haskell program and it produces a C program, which you then compile.
02:27:43 <Athas> kuribas: small ones seem to work well.  Parser combinators are great, for example.
02:28:24 <cocreature> the big advantage of edsls is that it’s really easy to get started.
02:28:32 <cocreature> you don’t need to worry about writing parsers and all that boring stuff :)
02:30:04 <Myrl-saki> Athas: Why not ASM?
02:30:19 <cocreature> Myrl-saki: generating C code is usually significantly less work :)
02:30:56 <cocreature> and you get compiler optimizations performed by the C compiler for free
02:31:03 <Athas> Myrl-saki: wasn't necessary.
02:31:18 <kuribas> Athas: I am making a eDSL for metafont, and I think it's better than the unhygienic macro system of mf.
02:31:23 <Athas> Also, we re-used an existing framework (Flask) built by Geoffrey Mainland, which generated C.
02:32:04 <kuribas> Is there a recommended higher level library for accessing the DOM in ghcjs?
02:32:06 <Myrl-saki> cocreature: True.
02:32:07 <Athas> kuribas: I don't know Metafont well enough to judge whether a DSL would be nice to use.  As long as the semantics are predictable and any type errors are comprehensible, then it's fine.
02:32:38 <cocreature> Myrl-saki: even if you don’t want to go via C you probably want to go to LLVM instead of actual assembly for that reason (and a lot of other reasons)
02:32:39 <Athas> It just seems like many Haskell eDSLs by necessity become highly abstract (type-wise), with resultant incomprehensible type errors.
02:33:04 <Gurkenglas> Is there an open source project that compensates contributions? (Would this fall to the problems of wrong incentives?)
02:33:59 <Myrl-saki> cocreature: Oh right. Thanks for reminding me LLVM exists. I'll probably go that route.
02:34:05 <cocreature> Gurkenglas: a lot of projects have bounties on specific issues that you get if you fix them (i.e. fix a bug, implement a feature, …)
02:34:10 <kuribas> Athas: metafont is just a programming language with equation solving builtin for generating fonts.
02:34:32 <cocreature> Myrl-saki: obviously you should make sure that LLVM supports the target architecture you are interested in before doing that :)
02:48:46 <Jinxit> what's a good rule of thumb for deciding on a full DSL vs eDSL?
02:49:18 <cocreature> Jinxit: I don’t think that’s a decision that you should make in general. it mostly depends on your specific application
02:50:21 <Jinxit> yeah that's why i'm asking for rule of thumb :p
02:51:46 <cocreature> Jinxit: one strong indicator that an eDSL might be the right choice is if you can embed arbitrary haskell functions in your language
02:52:00 <cocreature> but if you can’t do that, an edsl might still be nice :)
02:52:16 <cocreature> or at least sufficient and thereby not justify writing a parser and all that annoying stuff
02:52:27 <cocreature> syntax highlighting, …
02:53:08 <Jinxit> in my case the output is (simple) assembly, so that's no on haskell functions
02:53:15 <Jinxit> you could still use them compile-time
02:54:20 <cocreature> can you justify the cost of developing a parser, syntax highlighting and similar stuff that’s needed when you make it a separate language?
02:54:46 <Myrl-saki> cocreature: I'm making this for people, so they should be the one to handle that. /s
02:54:58 <Jinxit> for context this is a hobby project
02:55:01 <Jinxit> but you make a good point
02:56:08 <cocreature> I guess my rule of thumb is, go for an eDSL because it’s significantly less work unless there is a good reason not to do so
02:56:46 <Myrl-saki> cocreature: I need linear types. :D
02:57:16 <piyush-kurur> whatever happend to TH's stage restriction, I have been using lenses for some time and it seems to work fine with makeLenses in the same module where the type is defined?
02:58:06 <cocreature> Myrl-saki: sure then that’s your good reason for not going for an eDSL
02:59:08 <cocreature> although you could still make your eDSL build up an AST and then typecheck that
02:59:38 <Myrl-saki> cocreature: I'm more concerned on how to track variable usage.
03:01:52 <cocreature> Myrl-saki: I don’t see how that changes if you use a DSL. you still need to have a function that given an AST, typechecks that using whatever algorithm you came up with. the main difference between implementing this as a DSL vs an eDSL is the fact that one requires that you have a separate parser that transform your syntax to your AST vs in an eDSL you use some Haskell functions to build up that AST
03:03:27 <Myrl-saki> cocreature: I kind of get your point, but might as well make an "actual" language than try to get clever with types.
03:04:21 <Myrl-saki> cocreature: Especially if you want to make a Haskell-like language.
03:04:52 <cocreature> well if you are talking about a Haskell-like language that’s hardly a DSL anymore
03:05:19 <Myrl-saki> cocreature: Lmao. True.
03:42:27 <utdemir> Hey. It looks like TH does not support DEPRECATED and WARNING pragmas. Does anybody know if there's a reason for that, or should I open a feature request?
03:44:38 <c_wraith> It is a little weird to dynamically generate deprecated code, but I can see reasons why it might occasionally be the right thing to do.
03:45:06 <c_wraith> I suspect it wasn't supported because it's a bit weird as a first impression
03:45:17 <adarqui> is there a nubBy/nub for data.text anywhere?
03:46:54 <utdemir> c_wraith: I'm writing a TH function that creates Haskell datatypes from an API specification standard which has a deprecated flag. I thought it'd be better to put that into TH generated accessors that warns on usage.
03:47:21 <c_wraith> utdemir: yeah, I can see a few use cases, all along those lines.
04:21:07 <kuribas> Is a string in ghcjs a list of characters?
04:23:07 <osa1> kuribas: it has to be, String is defined as [Char]. IIRC Text has a different representation in GHCJS though
04:23:37 <kuribas> right, so Text is the way to go in ghcjs (and ghc as well probably)?
04:24:49 <osa1> kuribas: [Char] has its uses but yeah most of the time you actually need Text of ByteString
04:24:53 <osa1> s/of/or
04:26:51 <kuribas> Is there documentation for mixing ghc with ghcjs using ajax and json (or anything higher level)?
04:27:56 <kuribas> I suppose JavaScript-Ajax would work...
04:48:21 <shane> Does anyone know approximately when Backpack is scheduled to be released?
04:50:19 <phadej> nh2: pong
05:33:30 <cocreature> shane: it’s included in 8.2
05:33:51 <cocreature> shane: I think 8.2rc1 should be officially released tomorrow. source tarballs and some binaries are already out
05:37:20 <blocus> hello
05:37:30 <cocreature> hey blocus 
05:38:01 <blocus> there is some one who play @ code jam ?
05:41:05 * redpoppies say hello to everyone
05:42:17 <redpoppies> anyone willing to help with aeson-lens? don't know how to map/filter/fold an aeson array to obtain specific properties
05:42:29 <redpoppies> each doesn't seem to work
05:43:18 <redpoppies> I have r ^. key "myarrayprop" . _Array
05:44:24 <redpoppies> I tried r ^. key "myarrayprop" . (each _Object) . _Array but it doesn't work
05:44:31 <redpoppies> any advice?
05:46:00 <lyxia> what is the shape of r
05:46:21 <cocreature> an example of the output that you want to get might also be helpful
05:47:12 <redpoppies> let's say {"myarray": [{"a":1, "b":2}]}
05:47:34 <redpoppies> I need to filter/reduce each object in myarray
05:47:42 <jchia_1> I'm using embedFile (https://hackage.haskell.org/package/file-embed-0.0.10/docs/Data-FileEmbed.html) in one my code base. Despite a successful build (using stack), this gives problems when I run ghci, which gets errors, I suspect because it's using a different path than during stack build. Since the file being embedded is part of my code base, I'm using a relative path. What can I do to make both "stack build' and ghci happy with the em
05:47:42 <jchia_1> bedFile? Is there some special 'token' I could put in the source code representing the package directory, so that I can use an absolute path?
05:48:09 <redpoppies> sorry, to be consistent it would be {"myarrayprop": [{"a":1, "b":2}]}
05:48:33 <jchia_1> I mean I think stack build and ghci are using different current-working-directory.
05:49:13 <redpoppies> or even better, with 2 entries {"myarrayprop": [{"a":1, "b":2}, {"c":3, "d":4}]}
05:50:16 <lyxia> and what is the expected output
05:50:58 <redpoppies> say [{"a":1}, {"c":3}]
05:51:30 <redpoppies> I am actually more interested to construct local types from these values
05:51:48 <redpoppies> like [A 1, C 3]
05:52:13 <redpoppies> but for that I need to be able to map/fold
05:52:18 <redpoppies> just don't know how
05:52:40 <redpoppies> I have trouble understanding that part of lenses
05:52:47 <redpoppies> traverseOf maybe?
05:52:58 <redpoppies> I just am not sure
05:53:08 <lyxia> key "myarrayprop" . _Array   gives a view of the array
05:53:19 <lyxia> key "myarrayprop" . _Array . each   gives a view of each element
05:53:22 <redpoppies> yes, which is a vector of hashmaps
05:53:32 <redpoppies> really?
05:53:39 <redpoppies> ok, will try that
05:54:13 <lyxia> key "myarrayprop" . _Array . each . to function   maps whatever function :: Value -> a on each element
05:54:53 <cocreature> > "{\"myarrayprop\": [{\"a\":1, \"b\":2}]}" ^.. key "myarrayprop" . _Array . each . _Object
05:54:55 <lambdabot>  error:
05:54:55 <lambdabot>      • Variable not in scope:
05:54:55 <lambdabot>          key :: [Char] -> b0 -> [Char] -> Const (Endo [a]) [Char]
05:55:03 <cocreature> well, that didn’t work :)
05:55:08 <redpoppies> so ".to" maps it?
05:55:10 <lyxia> oh yeah you can add an _Object inbetween
05:55:42 <cocreature> but I did try it locally so that definitely works :)
05:55:56 <redpoppies> again please, complete working path
05:56:00 <lyxia> Just to be clear, it's associated as  (...) . (to function)
05:56:45 <lyxia> key "myarrayprop" . _Array . each . _Object . to function   where function :: HashMap Text Value -> a
06:00:29 <redpoppies> ok, doesn't work form me but that got me started really well. thank you very much!
06:01:02 <redpoppies> the example from @cocreature works in my ghci so it's definitely my structure
06:01:06 <redpoppies> thanks again
06:01:14 <cocreature> redpoppies: if you show us your code we might be able to help you more :)
06:01:24 <cocreature> “doesn’t work for me” is sadly not a sufficient amount of information :)
06:01:56 <redpoppies> it's reading from Microsoft cognitive api on text reading
06:02:20 <redpoppies> i have regions, that have lines, that have words
06:02:30 <redpoppies> I want to concat words into single lines
06:03:22 <sbrg> how does one import modules with lambdabot?
06:03:35 <cocreature> @import Control.Applicative
06:03:36 <lambdabot> Unknown command, try @list
06:03:41 <redpoppies> don't want to bother you with a large string dump, that's why I contracted the example. it seems that it's my ghci for the specific returned object, so I will work some more on that
06:03:43 <cocreature> hm I thought that worked
06:03:47 <sbrg> so did I :|
06:03:52 <redpoppies> really thanks, you saved me a lot of digging
06:03:54 <sbrg> :m +Control.Applicative
06:05:45 <redpoppies> @cocreature for instance, ior is the wreq response from cognitive api
06:05:46 <lambdabot> Unknown command, try @list
06:05:54 <redpoppies> ior >>= \r -> return $ r ^. responseBody . key "regions" . nth 0 . key "lines" . each . _Object
06:06:06 <redpoppies> this lacks something, the error is
06:06:23 <redpoppies> Ambiguous type variable ‘a0’ arising from a use of ‘_Object’
06:06:25 <redpoppies>       prevents the constraint ‘(AsValue a0)’ from being solved.
06:06:27 <redpoppies>       Probable fix: use a type annotation to specify what ‘a0’ should be.
06:06:46 <redpoppies> and a bit higher: Ambiguous type variable ‘a0’ arising from a use of ‘_Object’
06:06:48 <redpoppies>       prevents the constraint ‘(AsValue a0)’ from being solved.
06:06:50 <redpoppies>       Probable fix: use a type annotation to specify what ‘a0’ should be.
06:07:00 <redpoppies> https://paste.gnome.org/ppyujndlg
06:07:45 <cocreature> redpoppies: what’s the type of "r"?
06:08:32 <cocreature> hm no ignore that
06:09:00 <cocreature> redpoppies: try using _Array between key "lines" and "each"
06:11:13 <redpoppies> yup, missed that
06:11:23 <redpoppies> here is the result now, we are getting close
06:11:30 <redpoppies> https://paste.gnome.org/prn3whc6p
06:12:17 <cocreature> redpoppies: remove _Object
06:12:43 <redpoppies> bounding box is a property     String "20, 10, 15, 20"
06:13:34 <redpoppies> ok, cool, it gives me something like
06:13:45 <redpoppies> "6,90,89,126,109,362,155,144,142,106,160,163,135,177,59,126,208,192,116,224,173,116,256,235,116,273,178,12"
06:14:18 <redpoppies> I guess it is using the monoid of _String to concatenate all boundingBox properties?
06:15:18 <cocreature> try using ^.. instead of ^.
06:15:56 <redpoppies> very cool, exactly what i need
06:16:03 <cocreature> great :)
06:16:31 <redpoppies> thank you very much. should you ever come to romania i am personally in your debt with your favorite beverage :)
06:17:00 <cocreature> heh, I’ve no plans to go there in the near future so you’ll have to drink that beverage for me :)
06:17:16 <redpoppies> will do. where are you from?
06:17:20 <cocreature> germany
06:18:02 <redpoppies> cool. will drink a weissbeer for you this evening
06:18:15 <redpoppies> thanks again
06:18:36 <cocreature> yw
06:34:26 <kuribas> I get an error with ghcjs: uncaught exception in Haskell main thread: ReferenceError: h$criterion_inittime is not defined
06:38:32 <kuribas> bug in ghcjs?
06:41:52 <c137> Hello there! I'm a newbie and reading Learn You A Haskell now. Can someone please enlighten me why "Abrakadabra" < "Zebra" returns True?
06:42:11 <cocreature> c137: because 'A' < 'Z' returns True
06:42:41 <c137> Oh, so it compares only the first characters? 
06:42:44 <cocreature> c137: lists (and thereby also String) use lexicographic ordering
06:43:05 <cocreature> c137: it compares the first character, if those are equal it compares the second character and so on
06:43:23 <cocreature> but as soon as one of those comparisons does not return equal, that’s the final result
06:43:28 <c137> Got it, thanks for your answer cocreature!
06:47:02 <Jinxit> using stack, how can i tell ghc to give up after allocating a certain amount of memory?
06:47:09 <Jinxit> instead of completely killing my computer lol
06:51:16 <ClaudiusMaximus> Jinxit: maybe the easiest would be with environment variable (instead of figuring out how to pass RTS options through nested calls):  GHCRTS="-M1G"  or similar
07:04:16 <bbear> Beside monads and functors what are they to learn in Haskell ?
07:08:11 <kuribas> bbear: Monoids, Foldables, Applicatives, Traversables
07:09:03 <bbear> May I start here ? http://learnyouahaskell.com/functors-applicative-functors-and-monoids
07:17:41 <kuribas> bbear: sure, if it's not clear, read the previous chapters
07:23:25 <ij> Trying to catch my first exception, but «catch (error "test") print» doesn't typecheck: http://sprunge.us/HPZX What's the deal?
07:24:39 <cocreature> ij: you need to add a type annotation to indicate which exception you want to catch
07:24:53 <cocreature> so add a type annotation to "p"
07:25:07 <ij> Oh, it's not forall e. then, I guess.
07:25:23 <cocreature> if you want to catch all exceptions use SomeException
07:25:29 <cocreature> but that’s rarely a good idea
07:25:41 <ij> I want to print it, but I don't want the application to die.
07:25:48 <ij> Isn't that a good idea?
07:26:48 <cocreature> if you catch all exceptions, you also catch things like ThreadKilled and UserInterrupt (ctrl-c)
07:27:46 <ij> I won't kill the thread, so I'm safe from that. If've a different main thread, so that'll get the ^C, perhaps?
07:28:00 <cocreature> yeah then you might be somewhat safe
07:28:25 <ij> Cool, thanks! Let's hope for the best.
07:38:39 <jchia_1> Is there a way to get the filename of the file being compiled as a string that I can use in the source code? Besides using CPP?
07:41:54 <edwardk> jchia_1: what is wrong with CPP for this purpose?
07:41:55 <glguy> jchia_1: there's probably something in template Haskell
07:42:31 <kuribas> ugh, my ghcjs code is about 1000x slower
07:42:43 <edwardk> you can reifyModule thisModule and then maybe get out a name
07:45:24 <edwardk> oh derp just get 'location'
07:45:28 <edwardk> and then read out loc_filename
07:45:53 <edwardk> :t Language.Haskell.TH.loc_filename <$> Language.Haskell.TH.location
07:45:55 <lambdabot> Language.Haskell.TH.Syntax.Q String
07:46:15 <jchia_1> edwardk: My code builds without CPP but gets a compilation error with CPP that I don't understand.
07:46:18 <edwardk> that will tell you the file name you are being spliced into
07:46:32 <jchia_1> edwardk: To be precise, I actually want the full pathname of the source file.
07:46:50 <jchia_1> edwardk: Does this give the full pathname
07:46:57 <edwardk> no idea. probably not
07:47:22 <edwardk> might get you one relative though
07:47:59 <edwardk> but you can reconstruct the filename under reasonable assumptions from loc_module, etc.
07:48:26 <Gurkenglas> When I have pieces data and a way to handle them, and the user is supposed to be able to replace it with other ways and possibly a morphism for the data, is that the Store pattern?
07:48:28 <kuribas> I exaggerated, it's only 200 times slower...
07:48:32 <Gurkenglas> *pieces of data
07:49:07 <Gurkenglas> *with another way and possibly provide a morphism :s
07:49:59 <jchia_1> glguy, edwardk: Thanks
07:50:24 <edwardk> since you're in Q there you can bolt in IO actions to elaborate the relative path
07:50:28 <jchia_1> I get this error with CPP. What does it mean? The line reference is the first line of a multi-line string that I break using backslash.
07:50:28 <jchia_1> "lexical error in string/character literal at character 'F'"
07:50:55 <edwardk> guessing CPP is mucking with your multiline string literals
07:51:10 <edwardk> you could always use something like a multiline quasiquoter
07:51:44 <edwardk> https://hackage.haskell.org/package/heredoc-0.2.0.0/docs/Text-Heredoc.html
07:52:01 <edwardk> i mean if you're going to have to invoke TH anyways for this then you can always just take the easier path
07:52:06 <geekosaur> jchia_1, oddly enough the C preprocessor expects C strings, not Haskell strings
07:52:53 <geekosaur> if you use the CPP extension then you get to limit yourself to that subset of code that is lexically valid in both C and Haskell
07:52:53 <breadmonster> It's been a while since I've used Haskell, I'll admit.
07:52:57 <jchia_1> I suppose the C preprocessor sees something that it thinks should be a string but then sees that it has problems, so I'm getting this error?
07:52:58 <breadmonster> Now I'm trying to parse some markdown.
07:53:20 <breadmonster> and I can't figure out how to get this to work, iirc it requires some flag. https://gist.github.com/anonymous/51a5eabb9ec0ed9def78657aa0482339
07:53:59 <sm> breadmonster: add some top-level type signatures
07:54:11 <sm> well, one
07:54:13 <breadmonster> sm: Ideally, I'd like it to be as generic as possible...?
07:54:49 <sm> you can write a generic signature. But right now it's *too* generic for GHC
07:55:55 <w3br47> Hello
07:56:21 * geekosaur thinks the problem is upstream of that error, since inventing an s0 and m0 out of thin air implies it's disconnected itself from an s and m elsewhere?
07:57:37 <w3br47> Hey any hacker ?
07:57:41 <WarmCookie> Is there a way to see the inference of all type variables listed during a type mismatch error and/or ambiguous type error?
07:58:13 <WarmCookie> Often those get renamed and despite being able to look at the line and figuring out what's wrong, I'd love the messages giving more context.
07:58:21 <sm> breadmonster: also, that parser isn't generic, it can only be bold :: Parser TaggedString
07:58:52 <geekosaur> w3br47, this channel is about the Haskell programming language, not hacking
07:59:26 <sm> well, I mean it can only return a TaggedString. And that's the simplest type sig to fix your error
07:59:43 <w3br47> Thanks i think am lost here do you knw a place for hackers?
08:00:18 <WarmCookie> w3br47: Try ##hackers possibly? There's 184 people in there.
08:00:20 <glguy> Sorry, this isn't a directory
08:00:31 <sm> breadmonster: also since you're just starting out, did you know about megaparsec
08:00:39 <w3br47> Thanks
08:00:46 <MitchellSalad> I'm a leet hacker. What'dya need
08:00:54 * sm facepalms
08:01:03 <breadmonster> sm: Really? I added a type signature and it compiled.
08:01:03 <breadmonster> sm: I had to use FlexibleContexts though.
08:01:35 <breadmonster> sm: bold :: (Stream s m Char) => ParsecT s u m TaggedString
08:01:35 <sm> breadmonster: oh, which type sig did you use ?
08:01:57 <sm> ok, that's more generic indeed
08:02:22 <breadmonster> sm: Yeah, I'm going to need the full generality for this.
08:04:21 <geekosaur> really? people use the state?
08:04:51 <sm> sure, I sometimes use the state
08:05:31 <ij> Is  bytestring-conversions a good package?
08:05:47 <vaibhavsagar> hey, can someone help my figure out why my test suite is using 400mb of heap memory?
08:06:00 <sm> ij: not on hackage, so I'm going to say NO
08:06:11 <vaibhavsagar> and how to reduce the amount of memory it uses?
08:06:11 <ij> without the s in the end!
08:06:16 <ij> sorry
08:07:21 <sm> ij: looks good to me!
08:07:48 <yushyin> ij: is Data.ByteString.Builder not good enough?
08:08:42 <sm> just needs a little more doc explaining when to use it instead of X
08:08:57 <ij> yushyin, This is the sort of answer I was waiting for.
08:09:05 <ij> Yeah, looks like that might do.
08:09:53 <sm> yushyin++
08:11:41 <Gurkenglas> Is there a way to gurantee on the type level that a container t Dynamic is homogenous?
08:15:50 <breadmonster> I'm actually slightly unsure how to design this.
08:15:53 <breadmonster> sm: Can you help?
08:17:22 <ij> yushyin, Can I go from ByteString to Lazy.ByteString with this?
08:17:31 <Philonous> Gurkenglas, Dynamically you can extract the TypeReps from the Dynamics and compare them 
08:18:04 <Philonous> Gurkenglas, Statically you'd need to know the type of the values, which defeats the point of Dynamic
08:18:05 <seequ_> Gurkenglas: Are you sure you want them to be Dynamic?
08:18:07 <breadmonster> The way I'm thinking of doing this is to hit a tag token, add it to a stack (that's the state) then keep going until I hit the end token
08:18:22 <geekosaur> Gurkenglas, at type level the only thing visible is Dynamic, that's the *point* of Dynamic
08:18:52 <breadmonster> pop it off the stack and do some fiddling to add it to the parse tree.
08:19:03 <breadmonster> but I'm not sure how to get this to work.
08:19:05 <ij> yushyin, Because it seems that the toLazyByteString's actually returning Data.ByteString.ByteString.
08:19:17 <glguy> Gurkenglas: You can make your own data type like dynamic
08:19:24 <ij> yushyin, wait, nope, sorry!
08:19:31 <Gurkenglas> seequ_, it's pieces of data and a way to handle them, where the user is supposed to be able to provide code at runtime to handle it elsewise and perhaps a morphism on the data
08:19:36 <glguy> Gurkenglas: data Dynamic1 t = forall a. Typeable a => Dynamic1 (t a)
08:20:38 <ij> yushyin, My module aliases were wrong.
08:20:39 <Philonous> glguy, But you'd need unsafeCoerce to get the values back, don't you? 
08:20:44 <glguy> Philonous: no
08:20:56 <glguy> Philonous: That's handled for you by typeable
08:21:04 <Philonous> glguy, Oh? Interesting
08:21:05 <glguy> (just the same as Dynamic)
08:21:34 <glguy> In current GHC that's unsafeCoerce under the hood, in new GHC typereps are indexed by their types and it's less hacky
08:21:45 <glguy> but it's still the same as how Dynamic works either way
08:22:17 <Gurkenglas> glguy, but "forall a. Typeable a => Dynamic1 (t a)" would mean that I'd have to be able to deconstruct it into t of any Typeable a, right?
08:22:30 <Philonous> Yes, once you have singletons you can just use type equality to bring the type back into scope
08:22:35 <glguy> Gurkenglas: No, the "forall" is outside the constructor
08:22:42 <glguy> Gurkenglas: so it's using ExistentialQuantification
08:22:59 <MitchellSalad> in that context, "forall" should be read "exists" >_<
08:23:47 <Philonous> glguy, That "Typeable case" would have to be (Typeable a, Typeable b) -> a -> Maybe b , right? I can't seem to find it though
08:24:05 <glguy> :t Data.Typeable.cast
08:24:07 <lambdabot> (Typeable b, Typeable a) => a -> Maybe b
08:24:13 <Philonous> There we go, thanks
08:24:18 <Philonous> Even called case
08:24:25 <Philonous> cast
08:41:29 <Philonous> I'm trying to load a project in intero/emacs, but all I'm getting it "OK, modules loaded: none". I've selected the correct target with intero-targets and tried intero-reload, what's going wrong? 
08:50:10 <ij> It seems that an error I called escaped my catch handler: http://sprunge.us/hbGS?haskell
08:50:25 <ij> Output's printed in the end.
08:52:37 <aditsu> hi, n00b here, how can I add 1 to a Maybe Num and get a new Maybe Num?
08:52:59 <monochrom> fmap (1 +)
08:53:21 <glguy> ij: instead of forever . handle, why not handle . forever ?
08:53:43 <ij> I'd like it to keep going after a bad client.
08:54:29 <aditsu> monochrom: thanks
08:55:19 <monochrom> ij: You are looking at lazy evaluation delaying an error.
08:55:55 <monochrom> And where the hell is main?
08:56:25 <ij> Main's elsewhere, but runRawSocket is called by main.
08:56:48 <monochrom> rawMessage is also relevant.
08:57:35 <ij> ahhh, I'm starting to get it
08:57:54 <ij> hmm, but the stack shows my module
08:58:14 <ij> Oh, right — I don't understand how stack works over here or even if it exists.
08:58:45 <monochrom> A stack exists. But you haven't known what it does.
09:02:21 <glguy> ij: /error/ is for situations that shouldn't occur in your code, not for failure you intend to handle
09:02:43 <ij> You mean I can't catch it?
09:02:47 <dimsuz> hi all. got stuck while learning Reactive-Banana. I was translating example from Conal's Declarative Event Oriented Programming. It worked quite well until some point. Now I get 'thread blocked indefinetly on MVar' in runtime. My code is rather ugly I guess, but if anyone would take a look I'd be thankful: https://goo.gl/64vF1M
09:03:01 <ij> glguy, Because I don't intend to handle it.
09:03:03 <dimsuz> otherwise I'm not experienced enought to understand what I did wrong...
09:04:07 <dimsuz> also it's quite complex, sorry. Asking just in case, I know I won't be able to fix it until i get at least 50% more clever :)
09:04:43 <glguy> ij: You're here asking us how you can handle it and continue execution
09:05:53 <ij> glguy, I don't expect it to continue working in the process, but rather return at "handle", go back to forever and start over.
09:06:23 <glguy> ij: Well that's still "handling" it
09:07:24 <ij> Oh, I see the misunderstanding. I'm not handling it in process and I want process to come back to handle, then start over.
09:07:35 <ij> Isn't that doable with catch?
09:08:11 <glguy> (error "somestring") doesn't through any actual exception until it is evaluate
09:08:11 <glguy> d
09:08:29 <glguy> If you return that value from inside your catch and evaluate it outside the catch, the exception won't be caught
09:08:57 <ij> Ah, okay! Makes sense.
09:15:54 <ij> Can I traverse [Either String a] into Either String [a]?
09:16:00 <glguy> sequence
09:17:04 <edwardk> :t traverse id
09:17:06 <lambdabot> (Applicative f, Traversable t) => t (f b) -> f (t b)
09:17:07 <edwardk> :t sequence
09:17:08 <lambdabot> (Monad m, Traversable t) => t (m a) -> m (t a)
09:17:15 <edwardk> :t sequenceA
09:17:17 <lambdabot> (Applicative f, Traversable t) => t (f a) -> f (t a)
09:17:19 <edwardk> same thing
09:18:02 <glguy> Not just a good idea, it's the law!
09:18:03 <ij> It'll stop at the first one. 
09:18:17 <edwardk> if you want to concatenate all the errors then you can use Validation from the either package
09:18:22 <bennofs> :t catRights
09:18:24 <lambdabot> error: Variable not in scope: catRights
09:18:47 <edwardk> bennofs: sounds like something from PETA
09:18:52 <bennofs> :D
09:19:05 <bennofs> no cat rights in scope!
09:19:34 <monochrom> Copycats have copyrights.
09:19:53 <monochrom> or don't have, I don't know.
09:20:17 <ij> With Validation, will it still be with sequence?
09:20:58 <edwardk> ij: sequenceA or traverse, but yeah
09:21:38 <geekosaur> cats don't care about rights, they just do what they want :p
09:25:59 <ij> glguy, I made it propagate until top of `process', then failed to pattern match Left, before sending it into TBMChan.
09:26:01 <ij> Catch works then.
09:36:04 <breadmonster> Does `manyTill p end` consume the end token?
09:36:38 <EvanR> yes
09:36:45 <breadmonster> Okay.
09:36:51 <EvanR> you can also try it
09:37:05 <breadmonster> That's true, but it's a lot easier to ask.
09:37:11 <EvanR> classic
09:37:26 <EvanR> also the docs for parsec imply that the consumes the ending
09:37:28 <breadmonster> you know it's true.
09:37:37 <breadmonster> I know, I was just on IRC so I thought I'd ask.
09:38:18 <breadmonster> it's been so long since I've done this stuff, so like wtf is parsec3?
09:41:00 <hydraz> it's succ parsec2 :p
09:41:42 <geekosaur> parsec with support for Text and ByteString
09:42:29 <jasondockers_> haskell kind of feels like lambda calculus + FOL 
09:42:43 <opqdonut> yes
09:42:50 <opqdonut> that's pretty much it, actually
09:43:19 <opqdonut> are you familiar with the curry-howard correspondence? types are propositions, programs are proofs
09:43:35 <jasondockers_> it's like the exact language I was wanting to make after learning about FOL and lambda calculus from a computation textbook, heh. 
09:43:55 <jasondockers_> opqdonut, I am not aware of curry-howard correspondence, at least not by name.
09:47:44 <monochrom> breadmonster: "parsec3" is now simply known as "parsec".
10:20:11 <rdococ> ASSDF
10:28:29 <Philonous> Can pattern synonyms not be infix?
10:31:07 <cocreature> Philonous: their names need to start with a colon just like regular data constructors but apart from that it should work
10:31:08 <Philonous> Never mind, I was just missing the Language pragma ^_^
10:51:14 <jasondockers_> opqdonut, oh, cool! now I'm aware of it
10:54:54 <BugsBunny__> waddup
10:55:48 <BugsBunny__> i have the feeling all u guys are bots so im out.ciao
10:58:07 <Jinxit> what's a good way to do a aequential map with a "working memory" along the list? foldr followed by reverse feels dumb
10:59:22 <mniip> has anyone ever thought about using Löb for an assembler?
10:59:32 <mniip> and/or linker
10:59:56 <mniip> e.g, say the branch instruction has multiple encodings depending on the size of the operand
11:00:21 <mniip> and the operand is the location of the invocation target, which ultimately depends on the size of the instructions inbetween
11:01:57 <cocreature> that reminds me, I still need to read quchen’s article about löb
11:02:20 <geekosaur> asm might work. linkers might be a bit too insane
11:06:56 <nshepperd_> Jinxit: traverse with State
11:08:10 <mniip> geekosaur, linkers sound exactly like a job for this
11:08:27 <Taneb> Jinxit, mapAccumL/R
11:08:30 <mniip> you can drop the big/medium/small data models and the like
11:08:39 <Taneb> (the most forgotten about functions in base)
11:14:36 <Jinxit> Taneb: perfect, thanks!
11:17:40 <iqubic> Hello guys.
11:17:46 <cocreature> hey iqubic 
11:18:07 <iqubic> Are there any build tools for Haskell programs. Something like CMake or Gradle?
11:19:18 <Taneb> iqubic, are Cabal and/or Stack what you're looking for
11:19:46 <opqdonut> there's also shake, which is a generic build system written in haskell
11:19:54 <iqubic> Ah. I'll use Stack. I already have Stack.
11:20:05 <iqubic> Are there any Stack tutorials out there?
11:20:26 <opqdonut> https://docs.haskellstack.org/en/stable/README/#quick-start-guide
11:20:27 <cocreature> iqubic: https://docs.haskellstack.org/en/stable/README/#quick-start-guide
11:21:30 <iqubic> What's the difference between starting a ghci session with stack, and starting one without stack?
11:21:56 <srhb> iqubic: One has access to Stacks sandboxy-whatnot package db, the other does not, I think.
11:21:57 <cocreature> iqubic: starting it with stack will put the packages that your project depends on in scope and by default it will also load all modules that are part of your project
11:22:25 <iqubic> Ah, I see.
11:22:30 <cocreature> it does just call ghci underneath so it’s only the convenience of having everything available automatically
11:23:17 <iqubic> So it saves you the time and hassle of importing all the correct modules and loading your files?
11:23:50 <cocreature> setting up the right flags so you get access to your packages is probably more important actually
11:24:06 <iqubic> What does that mean?
11:24:41 <cocreature> iqubic: if your project depends on the package "text" and you run "stack ghci". stack ghci will automatically make the "text" package available and you can just run "import Data.Text"
11:25:10 <iqubic> Ah, that's cool.
11:25:23 <iqubic> Is that hard to do manually?
11:25:48 <cocreature> it’s not that hard. it’s just really annoying having to figure out where stack places your packages and figuring out all the right flags
11:26:03 <cocreature> iirc if you run "stack ghci --verbose" you can see the arguments stack passes to ghci
11:26:47 <cocreature> but apart from debugging stack itself there should be little reason to do so
11:26:54 <iqubic> How does one add a dependency to a stack build?
11:27:31 <cocreature> edit your cabal file and add it to the build-depends section
11:27:38 <iqubic> Is that explained in the stack tutorial you linked me too?
11:28:02 <iqubic> cocreature: I don't have cabal on my machine, just stack.
11:28:26 <cocreature> iqubic: stack still uses cabal project files
11:28:33 <iqubic> Why???
11:28:39 <cocreature> why not?
11:29:03 <iqubic> Because Stack and Cabal are different things.
11:29:09 <iqubic> That's why not
11:29:11 <cocreature> they’re closer than you might think
11:29:22 <iqubic> They are?
11:29:37 <cocreature> and the fact that they share the same project files means that you can use packages with both!
11:29:47 <iqubic> That must be why the Stack guide is just directly quoting stuff from the cabal guid.
11:35:38 <lpaste> qmm pasted “cabal install lambdabot failure” at http://lpaste.net/354430
11:35:59 <qmm> if anyone has the time to help with a cabal install failure, i would greatly appreciate it
11:52:09 <geekosaur> qmm, what version of ghc do you have installed?
11:52:20 <geekosaur> that's a known OS X issue with older ghc
11:52:40 <qmm> geekosaur: 8.0.1
11:53:01 <geekosaur> ok, I think you want to upgrade to 8.0.2 for the fix
11:53:53 <qmm> doing that now. thanks geekosaur :)
11:55:45 <geekosaur> best anyone can tell, apple decided with sierra that everyone should live with the limitations of apple watches, so you need a ghc that handles libraries differently to fit within the limits of a device it doesn't run on >.>
12:10:28 <lpaste> qmm pasted “lambdabot fails to install again, this time on ghc 8.0.2” at http://lpaste.net/354431
12:14:55 <geekosaur> the actual error is somewhere before that paste, in the build for dependent-sum
12:25:50 <tsahyt> I'm getting the weirdest error here. foo = case sameNat (Proxy @3) (Proxy @(Gcd 3 6)) \\ gcdNat @3 @6 of Just Refl -> ()
12:25:56 <tsahyt> Gcd and gcdNat is from the constraints package
12:26:03 <tsahyt> this doesn't compile with an Inaccessible code error
12:27:55 <tsahyt> does anyone have an idea what's going on here? the types should be equal after all. sameNat does runtime evaluation via comparing natVals, and through gcdNat I get the KnownNat instance for Gcd 3 6 in scope.
12:28:09 <mbw> Hello I have a question about writing polymorphic code. While it is possible to use maps and folds etc. in a straightforward manner, Stuff like scans or filters are not. For instance I was able to write a function which uses a list comprehension/filter internally and using OverloadedLists&Friends got this type signature: "makeNewClusters :: (Applicative f, Num (Item (t Word64)), Foldable t, Monoid (f 
12:28:15 <mbw> (Cluster a)), Fractional a, Enum (Item (t Word64)), IsList (t Word64), MonadZip t) => t (PointSum a) -> f (Cluster a)". This can't be the way to go. On the other hand, lists and vectors for instance share a similar interface. What would be the most straightforward way to exploit this? Using a type synonym?
12:29:31 <JuPaname> hi you need free shell account contact me PM =)
12:30:13 <cocreature> mbw: what do you need the IsList constraint for?
12:31:09 <tsahyt> am I possibly even facing a compiler bug here?
12:31:33 <mbw> cocreature: This comes from the OverloadedList extension and something along the lines of f inp = zip [0..] (toList inp).
12:32:19 <cocreature> mbw: it seems like you are converting to a list anyway so just take a list as your input and leave it up to the caller to convert to the list
12:33:03 <cocreature> I don’t think IsList is really meant as a typeclass that you should parametrize functions over. it’s only there for overloading list syntax
12:33:24 <cocreature> tsahyt: could you post a complete example please?
12:33:42 <tsahyt> that is pretty much a complete example already. I'll put it together with the error message
12:33:57 <cocreature> tsahyt: I’m not too keen on figuring out the proper imports myself :)
12:34:04 <mbw> cocreature: The type signature I wrote above comes from Marlow's Book, specifically the kmeans problem. The original type signature was makeNewClusters :: Vector PointSum -> [Cluster].
12:35:04 <mbw> So I was just trying to make it a little more list/vector agnostic. Apparently it's not that easy outside the realm of Foldable/Traversable.
12:35:21 <cocreature> mbw: as a rule of thumb, don’t make your functions polymorphic if you explicitely have to convert your inputs or your outputs.
12:35:36 <cocreature> if the first thing you are doing to your input is calling "toList" on it than you can just accept lists
12:35:47 <cocreature> if you are calling "fromList" on your output then just return a list instead
12:36:10 <lpaste> tsahyt pasted “No title” at http://lpaste.net/354432
12:36:15 <cocreature> if you can actually avoid those conversions then by all means go ahead and make things polymorphic!
12:36:18 <tsahyt> cocreature: ^
12:36:52 <tsahyt> this is the smallest example I could come up with that recreates the same error as in my larger file
12:37:18 <tsahyt> in the larger example I have type variables instead of 3 and 6
12:39:29 <mbw> cocreature: The main body consists basically of a zip&filter: makeNewClusters vec = [ pointSumToCluster i ps | (i,ps@(PointSum count _ _)) <- zip [0..] (toList vec) , count > 0 ]. This is the definition given in Marlow's book, the only difference being his use of "Vector.toList". Is there any way to make this kind of function polymorphic? My impression is yes (you can implement a filter with foldMap), but 
12:39:35 <mbw> this bloats the type signature.
12:40:28 <mbw> Your advice to just omit the toList and let the caller handle it, seems reasonable though.
12:41:01 <lpaste> qmm pasted “dependent-sum build failure” at http://lpaste.net/354433
12:41:53 <nbro> hi
12:41:54 <qmm> geekosaur: build failures probably aren't interesting, so thank you for your help
12:42:04 <nbro> what’s the real purpose of kinds in Haskell?
12:42:38 <nbro> I understood that they are "types of data types"
12:42:57 <nbro> but why would I need to classify also the data types?
12:43:00 <JuPaname> you need free shell account ? contact me PM
12:43:02 <monochrom> I don't know about real purpose, but one thing it does is to tell me which types have values and which types need parameters, and what parameters.
12:43:06 <geekosaur> qmm, looks like you need to build it from git for ghc 8
12:43:08 --- mode: ChanServ set +o monochrom
12:43:14 --- mode: monochrom set +b *!*@server.jupaname.fr
12:43:15 --- kick: JuPaname was kicked by monochrom (JuPaname)
12:43:33 <nbro> monochrom: I read that kinds is not just about tell you about the arity of types
12:43:38 <qmm> geekosaur: it = ghc 8.0.2 or dependent-sum?
12:43:39 <nbro> *telling
12:43:57 <geekosaur> dependent-sum
12:44:05 --- mode: monochrom set -b+b *!*@server.jupaname.fr $a:[JuPaname]
12:44:10 <tsahyt> nbro: for example you can then write types that only accept type parameters of a certain kind
12:44:19 --- mode: monochrom set -b+b $a:[JuPaname] $a:JuPaname
12:44:24 --- mode: monochrom set -o monochrom
12:45:00 <monochrom> That right nbro, "Either IO Int" is still legal because it is not true that IO::*
12:45:06 <monochrom> err, illegal!
12:45:11 <nbro> tsahyt: examples?
12:45:18 <tsahyt> nbro: using the DataKinds extension you can also lift types onto the kind level, i.e. types become kinds, their values become types in their own right
12:45:28 <monochrom> This is why I also said "and what parameters".
12:45:34 <cocreature> tsahyt: I’m not too familiar with the constraints package but iirc it doesn’t magically resolve this constraints. you need to explicitely pattern match on the appropriate axioms to get GHC to be happy
12:45:54 <monochrom> tsahyt, I don't think DataKinds makes things clearer.
12:46:06 <tsahyt> monochrom: I was writing this before nbro asked for an example
12:46:16 <monochrom> Ah OK.
12:46:16 <nbro> tsahyt: why would you want to make types kinds and values types?
12:46:30 <tsahyt> but an example would be type level natural numbers
12:46:53 <tsahyt> or something simpler like say, data Message (e :: EncryptionState) = ...
12:47:17 <tsahyt> though of course you can get most of what you could do with that without the lifting
12:48:12 <tsahyt> nbro: have you seen the servant library? the type level language defined by it makes some use of type level strings (Symbol)
12:48:51 <joe9> need some advice, please? I am communicating with a socket using bytestrings. I am using cereal for the serialization of data. But, when deserializing, I find that the Data.Serialize.Get to be very limited and I want to use Attoparsec for just the parsing portion. I feel that I am doing something wrong as both cereal and attoparsec seem to be geared to similar functionality.
12:49:47 <joe9> I can use the Serialize.Get and .Put classes when writing or reading stuff from the socket. But, for the parsing, I want to use Attoparsec. Is that a good idea?
12:50:07 <nbro> tsahyt: what exactly do you mean by type level language and type level strings?
12:51:45 <tsahyt> nbro: it's a domain specific language, but on the type level
12:52:09 <joe9> tsahyt: why not use idris?
12:52:19 <tsahyt> joe9: why use idris?
12:52:32 <joe9> or, something geared for dependent types? it has more flexibility for dealing with types
12:52:56 <tsahyt> none of these languages is suitable for production use at the moment imo
12:53:09 <tsahyt> and idris has other things that I really don't want, e.g. eager evaluation by default
12:53:20 <nbro> tsahyt: by "domain specific language" one usually means that there’s a domain
12:53:22 <nbro> what’s the domain?
12:53:26 <tsahyt> nbro: web APIs
12:53:34 <monochrom> Yes, Idris is a better language for dependent types. Haskell's is just an encoding, and as with all encodings, cumbersome and fragile.
12:53:40 <tsahyt> nbro: example from their docs. type UserAPI = "users" :> QueryParam "sortby" SortBy :> Get '[JSON] [User]
12:53:53 <tsahyt> nbro: note the "users" in there. that is of kind Symbol
12:53:58 <mbw> Ok I should probably ask a more general question, which gives a clue about my motivation. Say I want to write some numerical code in Haskell. At places an array/vector is more suitable than a list. On the other hand, the latter may be more suitable to generate data lazily. However I probably won't know beforehand which representation is the right one for a specific kind of problem. So I might choose a 
12:54:02 <monochrom> OTOH, sometimes you still use Haskell because you have other factors to worry about.
12:54:05 <mbw> specific one, say a vector and then maybe change it later-on. So the question is: Is there a way to "prepare" this kind of transition, taking into account that list/vector apis are similar and I would like to "change representations" in a minimally invasive way?
12:54:10 <tsahyt> or the "sortby". or the '[JSON] for that matter
12:54:15 <tsahyt> which is a type level list
12:54:55 <tsahyt> monochrom: or sometimes you use haskell just to see how far exactly you can push GHC. which is what I've been doing for the last couple of days
12:55:07 <tsahyt> the more I do this, the more I find myself longing for -XDependentTypes
12:57:27 <nbro> tsahyt: honestly I still don’t understand what you mean by type level language, i.e. it’s a language at the level of types, but that’s the meaning of having a language at the level of types?
12:57:41 <nbro> *but what’s the meaning
12:59:49 <joe9> tsahyt: a word of warning, when I find myself dealing that with types, I am mostly doing something wrong. If the types are not clear, I find myself in the anti-pattern zone. this is imho.
13:00:51 <tsahyt> nbro: the meaning is that you have a language to express types. your API endpoint is a type. and by some typeclass magic you can have GHC derive routing and many other things for it.
13:01:07 <tsahyt> joe9: in response to what? the Gcd example I posted above?
13:01:53 <joe9> tsahyt: the type level list stuff. that would be a heterogenous list, correct?
13:02:09 <tsahyt> I think so, yes.
13:02:24 <tsahyt> but it works out very well for servant
13:02:33 <glguy> a type level list is different
13:02:35 <nbro> tsahyt: so the language to express types is actually this kind system?
13:03:04 <glguy> one might use a type level list when implementing a"heterogeneous" list
13:03:22 <tsahyt> nbro: well the kind system makes sure that the API descriptions aren't just gibberish. for example the first parameter to QueryParam in the example above must be a string
13:03:26 <tsahyt> if you didn't have kinds, it could be anything
13:03:37 <glguy> but the type level list is a concept independent of that
13:04:28 <tsahyt> nbro: another very interesting kind are constraints. E.g. Eq a => ..., the Eq a thing is a constraint, and with the ConstraintKinds extension those do have their own kind.
13:04:44 <tsahyt> this leads to a situation where you can actually get an explicit dictionary out of it and pass that around
13:04:58 <tsahyt> see the constraints package for more on this
13:05:45 <glguy> type level lists themselves are homogenous, all their elements will have the same kind
13:07:21 <nbro> tsahyt: so if the kind system is not the language to express types, then what’s this language?
13:07:51 <tsahyt> what do you mean with the language to express types
13:08:14 <nbro> tsahyt: you said "the meaning is that you have a language to express types"
13:09:15 <tsahyt> servant is a language to express very particular types. it's all still haskell. think of it like an embedded domain specific language, just on the type level rather than the value level.
13:09:52 <tsahyt> the "base language" is the very same that you use to write any other type as well
13:11:12 <joe9> glguy: sorry to bother you. I think you seemed well versed with binary serialization/deserialization. I am using cereal but I find that cereal does not have much functionality for parsing. I am thinking of using attoparsec just for parsing. Just want to check if it is a bad idea to use cereal (for serialization/deserialization wrappers) + attoparsec (for parsing only)
13:11:48 <nbro> tsahyt: so, it’s kind of an interpreter (written in Haskell) for a language to creaet web services
13:12:01 <nbro> the servant library
13:12:01 <tsahyt> well it gets interpreted by the compiler at compile time
13:12:39 <tsahyt> nbro: https://www.well-typed.com/blog/2015/11/implementing-a-minimal-version-of-haskell-servant/ this blog post implements a mini version of it and is rather accessible
13:14:01 <Sornaensis> > 0.1 + 0.2 == 0.3
13:14:02 <lambdabot>  False
13:14:04 <Sornaensis> QED
13:14:24 <glguy> joe9, I typically would use both but I don't think it's going to be that much of a problem if you do. what's keeping you from just using one?
13:14:35 <glguy> would not use
13:14:39 <nbro> :k Maybe Int
13:14:40 <lambdabot> *
13:14:42 <mauke> > 0.1 + 0.2 == (0.3 :: Rational)
13:14:44 <lambdabot>  True
13:14:48 <Sornaensis> ;p
13:15:43 <nbro> so, from what I undestood, kinds are a way to categorize types
13:15:54 <Sornaensis> :k Maybe
13:15:55 <lambdabot> * -> *
13:15:56 <joe9> glguy: the data format that I am dealing with has fields separated by '\0' characters. using cereal, I find that i would have to write something similar to the takeWhile1 of attoparsec
13:15:58 <Sornaensis> :k Maybe Int
13:15:59 <lambdabot> *
13:16:15 <joe9> glguy: If I use attoparsec, I get takeWhile1 for free.
13:16:31 <Sornaensis> Maybe is like a type function that takes another type of kind *
13:16:33 <nbro> and we can use kinds whenever we want to restrict the types
13:16:41 <joe9> glguy: not sure if I am missing something with cereal and if it has something similar that I am missing.
13:16:49 <nbro> but I’m still not visaulizing in which circumstances you want to do that
13:17:06 <nbro> in which real world cases a Haskell programmer would take benefit from it
13:17:18 <mauke> > Just 42 :: Maybe
13:17:20 <lambdabot>  error:
13:17:20 <lambdabot>      • Expecting one more argument to ‘Maybe’
13:17:20 <lambdabot>        Expected a type, but ‘Maybe’ has kind ‘* -> *’
13:17:31 <mauke> that's a kind error
13:18:16 <nbro> it seems to me that kinds is just a way to solidify the type system
13:18:40 <nbro> since you use types but not kinds, you won’t face the need to generalize kinds
13:18:46 <glguy> joe9: then you might as well use attoparsec
13:19:09 <tsahyt> nbro: well, you do. but that's getting into theoretical territory
13:19:20 <nbro> if people keep introducing new kinds, I guess at a certain point we’ll also need to categorize them
13:19:26 <joe9> glguy: ok, Thanks. just wanted to make sure that I am not missing something simple.
13:19:27 <glguy> joe9: builder is in bytestring already, you might not need cereal at all
13:19:30 <tsahyt> see the TypeInType extension for that
13:19:50 <joe9> glguy: blaze-builder?
13:19:53 <tsahyt> nbro: kinds occur implicitly all over the place. for example the Functor class
13:19:59 <nbro> even though I have actually not a clear idea of what it means
13:20:07 <glguy> joe9: just the normal bytestring
13:20:13 <tsahyt> written explicitly, it'd be class Functor (f :: * -> *) where
13:20:24 <joe9> glguy: oh, ok. will check on that. Thanks a lot. good information.
13:20:35 <joe9> glguy: just builder + attoparsec then?
13:21:10 <tsahyt> nbro: when you try writing a functor instance for e.g. Text, which has kind *, GHC will give you a kind error
13:21:28 <glguy> sure, that's general a good pairing
13:21:36 <glguy> generally*
13:21:42 <iqubic> What's the pairing?
13:21:49 <nbro> tsahyt: ok, it means Text can’t be an instance of Functor
13:21:58 <tsahyt> yes
13:21:59 <joe9> glguy: Thanks again. very relevant and helpful.
13:22:04 <tsahyt> because it has the wrong kind
13:22:16 <Sornaensis> kinds are wonderful, I wish I could have higher kinded types in e.g. rust
13:22:32 <nbro> tsahyt: because Text doesn’t require parameters?
13:22:33 <ralu> @djinn (a -> (b,c)) -> ((b -> a) -> c)
13:22:33 <lambdabot> -- f cannot be realized.
13:22:47 <mauke> nbro: correct
13:22:47 <iqubic> Whay can't Text be a functor?
13:23:01 <Sornaensis> @djinn forall a. a -> a
13:23:01 <lambdabot> f a = a
13:23:03 <glguy> :t fmap
13:23:04 <lambdabot> Functor f => (a -> b) -> f a -> f b
13:23:18 <glguy> what would it mean to use Text as f?
13:23:23 <Sornaensis> :k Text
13:23:25 <lambdabot> error:
13:23:25 <lambdabot>     Not in scope: type constructor or class ‘Text’
13:23:33 <Sornaensis> :k Data.Text.Text
13:23:35 <lambdabot> *
13:23:42 <glguy> (a -> b) -> Text a -> Text b?
13:23:44 <Sornaensis> you can't apply Text to a type
13:23:56 <iqubic> What the heck does text even do?
13:24:03 <joe9> glguy: quick question, I am using this for the socket connection and interface https://hackage.haskell.org/package/connection-0.2.8/docs/Network-Connection.html
13:24:11 <mauke> iqubic: hi
13:24:12 <Sornaensis> iqubic: space efficient strings
13:24:18 <nbro> it looks to me that "Text a" requires a parameter "a"
13:24:26 <iqubic> Sure does.
13:24:28 <joe9> glguy: but, the Network.Connection uses Strict ByteStrings. Whereas, builder is using lazy bytestrings
13:24:46 <nbro> but why doesn’t it have a kind * -> *?
13:24:52 <mauke> nbro: huh?
13:25:01 <glguy> joe9 convert the lazy one to chunks
13:25:06 <glguy> send each chunk
13:25:11 <nbro> why doesn’t Text have a kind * -> *?
13:25:18 <geekosaur> what would that even mean?
13:25:19 <mauke> nbro: because it takes no arguments
13:25:28 <Sornaensis> @src Data.Text.Text
13:25:28 <lambdabot> Source not found. The more you drive -- the dumber you get.
13:26:16 <joe9> glguy: ok, Thanks.
13:26:28 <nbro> mauke: I guess I’m confusing parameters with arguments, but isn’t "a" in "Text a" an argument that Text needs?
13:26:40 <mauke> nbro: where did you get 'Text a' from?
13:26:45 <glguy> Functor only makes sense for types that have parameters. Text doesn't have a parameter, so you can't make a functor instance for it
13:26:54 <Sornaensis> @djinn forall a b. (a -> b) -> Maybe a -> Maybe b
13:26:55 <lambdabot> f a b =
13:26:55 <lambdabot>     case b of
13:26:55 <lambdabot>     Nothing -> Nothing
13:26:55 <lambdabot>     Just c -> Just (a c)
13:26:58 <Sornaensis> cool
13:27:00 <nbro> mauke: glguy wrote "(a -> b) -> Text a -> Text b"
13:27:16 <mauke> nbro: yes, as an explanation of why 'Functor Text' makes no sense
13:27:50 <mauke> it's supposed to be an error
13:30:44 <glguy> Functor isn't the generalization of "container" , it's the generalization of parameterized types that use that parameter in only positive positions
13:31:52 <nbro> glguy: "positive positions"?
13:31:56 <nbro> what’s the meaning?
13:32:28 <nbro> it implies there are negative positions
13:32:32 <nbro> positions of what?
13:32:36 * mauke prepares for counting arrows
13:32:39 <nbro> there’s an order
13:33:18 <glguy> maybe someone can write more about it who isn't swyping on a phone?
13:38:36 <monochrom> Starting from the basic examples, in "X -> Y", X is in a negative position, Y is in a positive position.
13:39:43 <nbro> monochrom: and in something like a -> b -> c?
13:40:22 <monochrom> The fun begins with "(X -> R) -> R". The common convention of "two negatives make a positive" applies. X would be negative in "X -> R" if "X -> R" were alone. But "X -> R" in turn is negative in the whole "(X -> R) -> R". So overall X is under a double-negative and comes out as positive, overall.
13:40:58 <monochrom> A -> B -> C can be easily analyzed as A -> (B -> C).
13:41:32 <nbro> (B -> C) would be in a positive position?
13:42:53 <monochrom> Yes.
13:45:21 <agranero> Hi. Has someone tried to install wxHaskell?
13:47:17 <ph88> hi guys, i don't quite understand this error https://bpaste.net/show/62784a97718f what is expected and what is actual ?
13:47:43 <mauke> ph88: what do you mean by "expected" and "actual"?
13:48:53 <ph88> mauke, well it says   Couldn't match type ‘BaseBackend ()’ with ‘SqlBackend’    so i guessed that one of those types is the expected type and the other is the actual type
13:50:23 <agranero> Hi. I have tried to install wxHaskell and got:
13:51:02 <agranero> I have tried to install wxHaskell and got:cabal install wx
13:51:02 <agranero> Resolving dependencies...
13:51:02 <agranero> cabal: Could not resolve dependencies:
13:51:02 <agranero> trying: base-4.9.1.0/installed-4.9... (dependency of wx-0.92.2.0)
13:51:05 <agranero> trying: directory-1.3.0.0/installed-1.3... (dependency of wxcore-0.92.2.0)
13:51:08 <agranero> trying: wxdirect-0.92.2.0 (dependency of wxcore-0.92.2.0)
13:51:12 <agranero> next goal: process (dependency of wxdirect-0.92.2.0)
13:51:15 <agranero> rejecting: process-1.4.3.0/installed-1.4..., process-1.6.0.0, process-1.5.0.0,
13:51:16 <ph88> agranero, are you using stack ?
13:51:18 <agranero> process-1.4.3.0, process-1.4.2.0, process-1.4.1.0, process-1.4.0.0,
13:51:21 <agranero> process-1.3.0.0 (conflict: wxdirect => process>=1.1 && <1.3)
13:51:25 <agranero> rejecting: process-1.2.3.0, process-1.2.2.0, process-1.2.1.0 (conflict:
13:51:28 <agranero> base==4.9.1.0/installed-4.9..., process => base>=4.4 && <4.9)
13:51:31 <agranero> rejecting: process-1.2.0.0 (conflict: base==4.9.1.0/installed-4.9..., process
13:51:34 <agranero> => base>=4.4 && <4.8)
13:51:37 <agranero> rejecting: process-1.1.0.2 (conflict: directory==1.3.0.0/installed-1.3...,
13:51:37 <agranero> process => directory>=1.0 && <1.3)
13:51:39 <MarcelineVQ> stahp, freenode'll get mad :X
13:51:42 <agranero> rejecting: process-1.1.0.1, process-1.1.0.0 (conflict:
13:51:45 <agranero> directory==1.3.0.0/installed-1.3..., process => directory>=1.0 && <1.2)
13:51:45 <nbro> agranero: maybe you should paste this output on something like pastebin?
13:51:45 <MarcelineVQ> use a pastebin
13:51:47 <ph88> rejecting !
13:51:48 <agranero> rejecting: process-1.0.1.5, process-1.0.1.4, process-1.0.1.3, process-1.0.1.2,
13:51:49 <EvanR> too late
13:51:51 <agranero> process-1.0.1.1, process-1.0.0.0 (conflict: wxdirect => process>=1.1 && <1.3)
13:51:55 <agranero> Backjump limit reached (currently 2000, change with --max-backjumps or try to
13:51:58 <agranero> run with --reorder-goals).
13:52:01 <agranero>  
13:52:04 <agranero> Stack gives better messages
13:52:18 <ph88> ok so try stack
13:52:55 <int-index> mauke, what's the type of 'app'? I suspect the problem is that 'pool' has type 'SqlBackend' and 'app' expects 'BaseBackend'
13:53:30 <geekosaur> in any case what it's telling you is that it needs a version of the process library that is too old for the other dependencies to work (note that some of those dependencies come with ghc, so it's really telling you that you need an older ghc)
13:53:43 <mauke> ph88: is that the whole error?
13:53:50 <agranero> It recommends putting some dependencies in the yaml. Which I did. But in the end I gor: Error: While constructing the build plan, the following exceptions were encountered: In the dependencies for wxdirect-0.92.2.0:  process-1.4.3.0 must match >=1.1 && <1.3 (latest applicable is 1.2.3.0)
13:54:05 <monochrom> wxHaskell is probably too old and without an update for recent compilers and libraries.
13:54:28 <int-index> oh I should've addressed ph88. sorry
13:54:33 <monochrom> The least effort to proceed is to use an old GHC.
13:54:34 <int-index> what's the type of 'app'?
13:54:38 <agranero> I had a similar problem in wxPython. But I just spent a week rewriting the build scripts and got it.
13:54:52 <monochrom> But the most ideal is you update wxHaskell :)
13:55:15 <agranero> But with Haskell I am completelly lost.I had just downloaded the last version. But I am using GHCi on Windows.
13:55:34 <agranero> wxHaskell I got the last version too.
13:56:06 <agranero> Just from sourceforge where it resides according to wxHaskell docs on haskell.org
13:56:16 <monochrom> You will have to know a thing or two about cabal, for example what do the *.cabal files mean.
13:56:42 <agranero> I tried a sandbox, but ...
13:57:44 <agranero> I thought I could isolate the conflicting dependencies in a Sandbox but I could not get it to work.
13:57:45 <monochrom> And then we do have this convention that huge jumps in version numbers imply significant changes in APIs, so there may be some actual code you have to investigate and change accordingly.
13:59:04 <agranero> wx is complicated on any platform. With Python the scripts were a nightmare. I needed to rewrite everything, a lot o hardcoded paths a bad mix of python2 nd 3....really bad
13:59:10 --- mode: ChanServ set +o monochrom
13:59:14 --- mode: monochrom set +b *!*@jupaname.mooo.com
13:59:14 --- kick: Free_Shell was kicked by monochrom (Free_Shell)
14:00:52 <ph88> mauke, yes that's the whole error .. there is more info in the error but that is just to tell the location  .. in the second argument .. in the expression  blabla
14:01:15 --- mode: monochrom set -bb+b *!*@jupaname.mooo.com $a:JuPaname *!*@*jupaname*
14:01:30 <ph88> int-index, app :: SpockM () MySession MyAppState ()
14:01:34 --- mode: monochrom set -o monochrom
14:01:52 <agranero> I think wx is very good. But I am thinking on using another GUI. But I had trouble even with things that were supposed to be simple as ncurses. But at leas t=in this case are two lacking c libraries. In Linux I bet it works. On wx case not even on Linux the thing goes on...
14:02:19 <monochrom> ncurses is not actually simple. (Unless you just mean installing.)
14:02:42 <int-index> ph88, this seems to be the problem. Follow the types. You need to change the first parameter of SpockM - it represents the type of db connection
14:03:11 <agranero> Yes I mean installing
14:03:15 <monochrom> Namely, the effort of binding ncurses to Haskell really shows how ncurses maximizes the unpredictability of mutable states.
14:04:46 <agranero> I'm still in the install phase. I know on Windows things are a little more confuse. But my experience with wx on other languages is that is always complicated (except in C++).
14:05:21 <nbro> does the term actions only makes sense in the case of the IO monad?
14:05:24 <monochrom> You need a matchingly older GHC.
14:05:28 <nbro> i.e. IO actions
14:05:37 <agranero> Yep. Thought of that.
14:05:50 <ph88> int-index, good find, it worked right away !
14:06:06 <monochrom> And back in those days, I also recall needing a matching version of wx itself.
14:06:48 <agranero> Maybe one a few years older. I just needed to know what version I should use. Can I install an older GHCi side by side with a newer? Won't cabal and stack get confused? 
14:06:56 <monochrom> nbro: You can use it for all monads.
14:07:44 <monochrom> Actually I don't think people will mind if it's Applicative too.
14:09:08 <monochrom> agranero: You can have multiple versions of GHC co-existing. cabal always do a test first ("ghc --version") and cope. I don't know about stack.
14:09:41 <monochrom> And there are two ways to co-exist.
14:10:40 <monochrom> The lazy way is you just install without thinking. Then you will find in /usr/local/bin a "ghc", a "ghc-8.0.2", and a "ghc-6.10.4" or something. "ghc" is a link to the one you most recently installed.
14:11:16 <monochrom> And you're on Windows so it is not really /usr/local/bin but it's the same idea.
14:11:49 <monochrom> There is a flag you can give cabal to specify "I really mean ghc-6.10.4".
14:12:19 <nbro> monochrom: so what’s an action actually?
14:12:39 <nbro> I understood there are different types of actions
14:12:48 <nbro> it seems actions are related to monads
14:12:57 <monochrom> The eager way is to "./configure --prefix=this_directory_is_reserved_for_ghc_6-10-4" and play with PATH.
14:13:31 <monochrom> An action is a value of type "M A" where M is an instance of Monad or Applicative.
14:13:43 <agranero> monochrom: Ok. I will try that. I think is the way to go. I think I will also clean the mess I did with cabal, sandboxes, stack, etc. And make a clen install too.
14:13:52 <monochrom> If you see "xxx :: ReaderT blah blah blah" then you can say that xxx is an action.
14:13:55 <nbro> monochrom: or functor, too?
14:14:19 <agranero> monochrom: Thanks. I will let you know me progress if I see you again.
14:14:30 <monochrom> I don't think we have really thought about that. You seldom have a Functor-only type.
14:14:34 <ph88> how can i serve some static html with spock ?
14:14:49 <nbro> xxx is an action?! isn’t that the syntax for the signature of a function and xxx would be the name of the function?
14:15:46 <monochrom> OK look, if I say "Joseph was a carpenter", you wouldn't tell me "but Joseph is just a name", would you?
14:18:04 <ph88> eh i got disconnected, anyone know how to server up a static html with spock ?
14:22:25 <joe9> in attoparsec, what is the difference between sepBy and sepBy' : "The value returned by p is forced to WHNF." is what the docs say. Is it common to use sepBy?
14:22:41 <glguy> joe9: Are you asking what WHNF is?
14:23:00 <nshepperd> "xxx" is the name of the value. xxx is the value. the menu is not the meal :p
14:24:21 <joe9> glguy: WHNF == lazy?
14:25:13 <glguy> No
14:25:29 <joe9> ok, Thanks
14:25:38 <joe9> found this http://stackoverflow.com/questions/6872898/haskell-what-is-weak-head-normal-form
14:26:07 <monochrom> But you will need to know lazy evaluation to know what the sentence is talking about.
14:27:47 <monochrom> If you do a simple "return (1+1)" it does not mean that the 1+1 there is evaluated immediately.
14:28:11 <nshepperd> hm. if you have a value x that is in WHNF, is that equivalent to knowing that x is not ⊥?
14:28:30 <monochrom> So take for example sepBy (char 'x' >> return (1+1)) (char ',')
14:28:47 <glguy> nshepperd: I don't think it's equivalent because I can know something is not bottom without it being in WHNF
14:29:15 <monochrom> You will get a list like [1+1, 1+1, 1+1] rather than [2, 2, 2]. sepBy' is the one who gives you [2, 2, 2].
14:29:29 <nshepperd> i suppose that is true. you could determine it by program analysis
14:29:46 <monochrom> Sometimes it matters, sometimes not. 1+1 is a simple case of not mattering, but that's only because 1+1 is so small.
14:31:23 <monochrom> I am not sure about equivalence, but the implication in the direction "is in WHNF => is not bottom" is true during run time.
14:32:36 <monochrom> Because during run time if you seq or case on something, and the program survives that test, then you still haven't run into a show-stopping bottom.
14:33:58 <Sornaensis> :t f :: (a -> b -> b) -> b -> [a] -> _
14:34:00 <lambdabot> error:
14:34:00 <lambdabot>     • No instance for (FromExpr t1)
14:34:00 <lambdabot>       Possible fix:
14:35:28 <monochrom> To anthropomorphize a running program, "I think, therefore the value exists".
14:35:35 <nshepperd> hah
14:37:01 <nshepperd> i suppose in liquidhaskell you can even write this in types? eg. ($!) :: ({x :: a | x ≠ ⊥} -> b) -> a -> b
14:37:36 <monochrom> w00t, Liquid Haskell knows about bottom?
14:38:08 <nshepperd> i remember something about it having totality checking...
14:38:14 <nshepperd> i don't really know though :p
14:39:05 <monochrom> Yeah but there is still a difference between "we bake totality into the semantics of ->" and "we let you say ≠ ⊥"
14:41:07 <nshepperd> oh, it looks like it doesn't
14:41:46 <monochrom> hehe
14:42:43 <joe9> monochrom: nshepperd Thanks a lot.
14:46:54 <wroathe> Is there a way to list instances of a particular typeclass? For instance, "Which types are functors?"
14:47:31 <glguy> Use :info! Functor  in GHCi
14:48:32 <wroathe> I suppose this would only be for the currently imported modules, right?
14:49:01 <wroathe> and thanks @glguy
14:49:15 <glguy> Use regular :info to restrict it to the loaded modules
14:50:07 <wroathe> Great. Thanks!
15:14:53 <bbear> hello
15:15:17 <bbear> If I want to read my input sequentially into an infinite loop, how can I do that ?
15:21:23 <ertes> bbear: what are you going to do with the input?
15:21:58 <bbear> parse them and create a list of coordinates
15:22:11 <bbear> data Coord = C Int Int
15:22:24 <EvanR> an infinite list?
15:22:49 <ertes> bbear: that doesn't sound like an infinite loop
15:23:08 <ertes> unless your input is indeed infinite, in which case i need to ask what you're going to do with the coordinates as well
15:23:33 <EvanR> (would be nice if you didnt have to know all that )
15:24:00 <bbear> actually i'm playing a puzzle game where the game output a bunch of data at each turn 
15:24:26 <bbear> there is no guarantee that the game ever termin so the input is not really infinite but I don't have clue about the length of the input data to parse.
15:24:41 <mac10688> gameincode?
15:24:45 <bbear> I suppose this could be interesting to know
15:24:46 <ertes> bbear: is the game's output easily delimitable?  like line-by-line
15:24:52 <bbear> yes
15:25:04 <bbear> for each turn I know very well how the data looks like.
15:25:07 <ertes> bbear: in that case i recommend a streaming abstraction like pipes
15:25:32 <ertes> write the raw input from the game as a Producer, then write a Pipe that turns raw input into chunks of information (like lines)
15:25:35 <bbear> yes codingame
15:25:49 <bbear> ertes: thanks for your suggestion.
15:26:00 <mac10688> yeah codeingame, my bad. what's the name of the problem?
15:26:15 <bbear> it's thor / upper level
15:26:40 <ertes> (there is actually a better was to delimit input (pipes-group), but it has quite a learning curve unfortunately)
15:26:49 <bbear> i'm trying to get good at haskell, and haskell helps me back at being good at coding.
15:26:53 <ertes> s/better was/better way/
15:27:07 <bbear> but yeah, the learning curve.
15:27:19 <mac10688> Power Of Thor, easy mode?
15:27:24 <bbear> no hard mode
15:28:02 <bbear> I already solved easy mode. I believe the proper way to learn haskell is to go back and forth from theory to problems to theory to problems, etc.
15:28:33 <bbear> I'm struggling with the monad concept
15:28:39 <bbear> maybe it requires a bit more of habit.
15:29:00 <bbear> Do you suggest to avoid syntactic sugar and go with (=<<) operators ?
15:29:33 <ertes> bbear: not necessarily, just be sure to know how the sugar is eliminated
15:29:46 <bbear> ok
15:30:02 <ertes> bbear: i have observed that the biggest mystery to many people is not "monads", but more: "that's it?"
15:30:10 <bbear> that's it ?
15:30:16 <bbear> what do you mean by that's it ?
15:30:26 <ertes> "monads are instances of this class with these laws"
15:30:50 <bbear> yes that's it
15:31:04 <seequ_> I can attest to that. It took me so long to understand why they are so useful when they do so little.
15:31:11 <bbear> how to use it in actual programming is way more hard.
15:31:23 <bbear> I mean to know where and how to use it in programming.
15:31:30 <bbear> That's kind of the difficult part.
15:31:46 <bbear> for example, why monads ? I bet the ans
15:31:46 <ertes> that's why i like to compare them to monoids
15:32:07 <bbear> same thing for monoids, functors, any abstract construct actually.
15:32:08 <ertes> the two important points are: 1. there are at least two monoids, 2. you can abstract over them (e.g. foldMap)
15:32:55 <bbear> It is hard to build a meaning ful conception of them if you don't see real application in real problems (wow, a lot of the pupils I taught told me that. It's actually true in fact).
15:33:48 <bbear> what would be the type of a function reading for example stdin and returning a list of string ?
15:34:13 <bbear> readListOfInt :: Int -> [Int]
15:34:14 <ertes> it wouldn't be a function
15:34:19 <ertes> IO [String]
15:34:38 <bbear> you can't hide that internal deal with IO into the function ?
15:34:54 <ertes> what do you mean?
15:34:58 <bbear> ok so it would be like readListOfInt :: IO [String] :: [Int]
15:35:06 <bbear> ok so it would be like readListOfInt :: IO [String] > [Int]
15:35:09 <EvanR> if it has observable side effects, does I/O, it has to be in the type
15:35:09 <bbear> ok so it would be like readListOfInt :: IO [String] -> [Int]
15:35:17 <bbear> okay
15:35:25 <ertes> bbear: that type doesn't make much sense
15:35:34 <ertes> it couldn't do anything with its argument (an IO action)
15:35:46 <EvanR> you arent taking any arguments
15:35:47 <bbear> let say you want to read n integers
15:35:52 <seequ_> bbear: Your program returns a single IO, which represents everything it'll do. Calling a function can't use it behind-the-scenes.
15:36:11 <EvanR> youre not returning aynthing because its not a function
15:36:32 <EvanR> a function with no arguments is a constant
15:36:40 <ertes> bbear: first let's clarify what a function is:  a function is a value of type (X -> Y) for some X and Y
15:36:47 <ertes> in other words, a function is something you can apply
15:36:52 <ertes> if you can't apply it, it ain't a function
15:37:07 <ertes> so getLine, for example, is *not* a function
15:37:55 <bbear> so what is it ?
15:38:10 <bbear> certainly not a constant
15:38:12 <ertes> it's an IO action
15:38:15 <ertes> yes, it is a constant
15:38:15 <EvanR> its a constant
15:38:22 <EvanR> its the command "get a line"
15:38:26 <bbear> oh ok
15:38:54 <exio4> waa
15:38:59 <ertes> remember that the *action* to get a line is not the same thing as the result of running the action to get a line
15:39:01 <exio4> welp, wrong channel :P
15:39:32 <bbear> `result of running the action to get a Line` would be with the IO monad either the content of the line or error -- (ok ?)
15:39:55 <ertes> bbear: do you use linux?
15:40:14 <EvanR> the result of executing an IO String is a String
15:40:19 <bbear> yes
15:40:29 <bbear> I use linux
15:40:35 <ertes> bbear: getLine corresponds to a line in the same way the "ls" program corresponds to a list of files
15:40:38 <EvanR> exceptions are an exception
15:40:44 <ertes> bbear: does that make sense?
15:40:57 <bbear> EvanR: and if you disk is disconnected when getLine is executed what happens ?
15:41:07 <EvanR> an exception
15:41:26 <bbear> what have exception to do with the IO monad ?
15:41:43 <EvanR> not that much
15:41:49 <EvanR> except that you can catch them in IO
15:41:49 <monochrom> I don't think it is useful to consider exception now.
15:41:50 <bbear> ok
15:41:54 <ertes> exceptions can make (>>=) for IO short-circuit
15:42:07 <bbear> ok
15:42:20 <EvanR> you can just assume exceptions never happen 
15:42:30 <EvanR> learn haskell first
15:42:31 <ertes> no, please don't assume that…  ever =)
15:42:37 <bbear> let say I want to define a new constant that is `execute 10 times the getLine command and return the result of those action into a single list`
15:42:45 <bbear> how would I do that ?
15:42:58 <ertes> replicateM 10 getLine
15:43:04 <ertes> :t replicateM 10 getLine
15:43:05 <lambdabot> IO [String]
15:43:17 <EvanR> another non-function
15:43:48 <bbear> does something like that would have anything meaningful ? `getline (=<<) getline (=<<) getline (=<<) getline (=<<) getline (=<<) getline (=<<) getline (=<<) getline (=<<) getline (=<<) getline`
15:43:57 <bbear> :t replicateM
15:43:59 <lambdabot> Applicative m => Int -> m a -> m [a]
15:44:05 <bbear> ok
15:44:05 <ertes> bbear: no, that's a type error
15:44:22 <ertes> (=<<) takes a function as its first argument, and as we have established, getLine is clearly not a function
15:44:34 <ertes> :t (=<<)
15:44:35 <lambdabot> Monad m => (a -> m b) -> m a -> m b
15:44:48 <glguy> 'getline (=<<) getline' is different from 'getline =<< getLine'
15:44:58 <geekosaur> also with the parentheses it is now a prefix function instead of an infix operator
15:45:00 <glguy> and 'getline' is different from 'getLine'
15:45:04 <ertes> oh, i didn't even catch that
15:45:23 <ertes> so yeah, it's a "not in scope" error then, unless you defined what getline is
15:45:59 <glguy> I couldn't even manage to write 'getline' four times in a row. My fingers took over by the fourth
15:46:13 <bbear> glguy: i used teh python interpreter
15:46:27 <glguy> it's probably not too good for Haskell programming
15:46:54 <ertes> you can emulate python syntax to some extend in haskell though =)
15:46:57 <bbear> sum ["getLine =<< "]*10
15:46:58 <ertes> extent
15:47:01 <bbear> :t sum ["getLine =<< "]*10
15:47:02 <lambdabot> error:
15:47:03 <lambdabot>     • No instance for (Num [Char]) arising from a use of ‘*’
15:47:03 <lambdabot>     • In the expression: sum ["getLine =<< "] * 10
15:47:19 <bbear> ho ok
15:47:23 <bbear> to some extent
15:47:28 <bbear> but not for the brightest result.
15:47:48 <bbear> I am trying to map examples over type definitions
15:47:56 <ertes> > unwords (replicate 10 ["getLine =<<"])
15:47:58 <lambdabot>  error:
15:47:58 <lambdabot>      • Couldn't match type ‘[Char]’ with ‘Char’
15:47:58 <lambdabot>        Expected type: [String]
15:48:03 <ertes> > unwords (replicate 10 "getLine =<<")
15:48:06 <lambdabot>  "getLine =<< getLine =<< getLine =<< getLine =<< getLine =<< getLine =<< get...
15:48:58 <bbear> can you give me real world examples of what a (a-> m b) would be ?
15:49:00 <glguy> sum <$> replicateM 10 readLn :: IO Int
15:49:10 <ertes> bbear: putStrLn
15:49:22 <monochrom> Is it a good time to bring up my http://www.vex.net/~trebla/haskell/IO.xhtml ?
15:49:24 <bbear> :t putStrLn
15:49:25 <lambdabot> String -> IO ()
15:49:35 <glguy> monochrom: Is it about the real world?
15:49:41 <monochrom> No.
15:49:53 <glguy> oh :(
15:50:19 <dolio> Is it about the RealWorld?
15:50:21 <monochrom> RealWorld passing is beneath my dignity :)
15:50:32 <ertes> no
15:50:41 <ertes> it's about the RealWorld# though
15:50:41 <bbear> an IO tutorial is always a good idea.
15:51:09 <bbear> so actually if putStrLn is doing IO, its more O than I.
15:51:24 <ertes> bbear: it's not really "doing" anything
15:51:42 <bbear> and then what would be the corresponding m a ?
15:51:44 <ertes> it's a function that, given a string, returns an action that writes that string to stdout
15:52:04 <monochrom> Be careful about "return" there. :)
15:52:07 <bbear> in the IO() monad, a and b are always the same ?
15:52:28 <ertes> IO () is not a monad
15:52:32 <bbear> (and btw, are they always String ?)
15:52:34 <ertes> IO is a monad
15:52:36 <bbear> ok
15:52:40 <bbear> s/()//
15:53:06 <ertes> bbear: you should read monochrom's tutorial
15:53:10 <ertes> ignore that IO is a monad
15:53:14 <ertes> ignore "monad" for now
15:54:16 <monochrom> And I am still pondering on how to work "it is a recipe not the outcome" into my tutorial.
15:54:17 <bbear> Is this you : Albert Y. C. Lai ?
15:54:20 <monochrom> Yes.
15:54:24 <bbear> thanks
15:54:32 <bbear> would be nice to have an epub version
15:55:18 <EvanR> IO actions are either primitives or combinations of other IO actions into a larger blueprint
15:55:29 <EvanR> theres a few ways to combine them
15:55:55 <bbear> ha ok but you didn't tell me about that >>=
15:56:01 <EvanR> this pattern exists in many libraries
15:56:06 <EvanR> IO is just one example
15:56:57 <bbear> Why the monadic law defines only =<< but still >>= seems pretty useful ?
15:57:09 <bbear> ok I forgot to forget about monads.
15:57:13 <EvanR> those are literally the same thing
15:57:21 <EvanR> just opposite order of argument
15:57:49 <ertes> monochrom: well, that's just an intuition, but it's a pretty safe one, so you might just put it at the beginning of the tutorial (to replace the "any sentence you think up now is wrong" part)
15:58:40 <bbear> what the foobar :: IO () means (I mean the parenthesis) ?
15:58:58 <ertes> bbear: () is a type with only one value: ()
15:59:00 <EvanR> in the end your entire program is a big blueprint, it only comes to life when you give it to the computer. and this is really not different from any toher language
15:59:39 <EvanR> sometimes you forget that in a floor of meta circular evaluation or dynamic runtime shenanigans
15:59:41 <bbear> ertes: but what's the meaning in the global expression ?
15:59:45 <EvanR> s/flood/
15:59:59 <ertes> bbear: IO actions, when executed, return a result (or throw an exception)…  but some actions simply don't have any interesting result (like (putStrLn str)), so they just return (), an "uninteresting value"
16:00:35 <ertes> bbear: think of the () type as Bool without False
16:00:41 <bbear> okay
16:00:56 <bbear> so it is just a convenient way to say it.
16:01:04 <ertes> it's not a convenience
16:01:31 <Sornaensis> > ()
16:01:33 <lambdabot>  ()
16:01:49 <EvanR> use type () for uninteresting values, use type Void for impossible values
16:02:04 <ertes> bbear: if (c :: IO A), then c is an action that, when executed, returns a value of type A
16:02:11 <ertes> bbear: what is the type of the action that does nothing?
16:02:25 <ertes> and has no interesting result at all
16:02:58 <bbear> I was stuck at this sentence : `The second parameter wants a -> IO b, and we give it putStrLn :: String -> IO (). That matches up too, with b = ().` <-- I could say to monochrom that if his tutorial is beginner oriented, that part is kind of cryptic. (live tutorial analysis)
16:03:48 <bbear> may I reformulate ? (something is probably wrong here and i'm being chatty)
16:04:11 <bbear> (>>=) is to bind getLine with putStrLn
16:04:24 <bbear> (=<<) is to bind putStrLn with getLine
16:04:34 <bbear> :t (=<<)
16:04:36 <lambdabot> Monad m => (a -> m b) -> m a -> m b
16:04:37 <bbear> :t getLine
16:04:38 <lambdabot> IO String
16:04:50 <bbear> :t putStrLn
16:04:52 <lambdabot> String -> IO ()
16:05:00 <ertes> :t id
16:05:02 <lambdabot> a -> a
16:05:07 <ertes> > id (5 :: Integer)
16:05:09 <lambdabot>  5
16:05:26 <bbear> maybe i'm too chatty and noisy sorry 
16:05:27 <ertes> because id works for any type 'a', i just used it with (a = Integer)
16:05:40 <bbear>  > id ()
16:05:46 <bbear> > id ()
16:05:48 <lambdabot>  ()
16:05:58 <bbear> oky
16:06:36 <bbear> I go back to study the tutorial.
16:08:04 <Cale> bbear: The point of the thing you mentioned is that String -> IO () can be equal to a -> IO b when a = String and b = (), so it's possible to supply putStrLn as the second argument to (>>=)
16:09:09 <ertes> bbear: also (=<<) is defined as:  f =<< c = c >>= f  -- so don't fixate on it so much…  it's literally the same function as (>>=) with the arguments flipped
16:12:02 <bbear> ertes: oh yeah
16:12:05 <bbear> I get it now
16:12:12 <bbear> IO is supposed to be a commutative monad.
16:12:28 <bbear> so the reverse is only defined for commutative monads. !
16:12:48 <bbear> Now I see (seemingly) some light
16:12:50 <ertes> no
16:13:11 <bbear> ok now i'm going back to my dark cave 
16:13:44 <ertes> the light is an illusion unfortunately…  the (=<<) thing is purely symbolic:  whenever you find yourself writing (blah =<< blubb), you could just as well have written (blubb >>= blah)
16:14:21 <bbear> okay
16:14:35 <ertes> commutativity is a feature of *one* function…  for example (+) for Integer is commutative:  x + y = y + x, for all x, y
16:14:51 <ertes> if you defined (+-) as:  y +- x = x + y
16:15:10 <ertes> this has nothing to do with the commutativity of (+)…  you really just defined another function that is the same as (+) with the arguments flipped
16:16:00 <ertes> but you would find this:  x +- y = x + y  -- reason:  because x +- y = y + x, and y + x = x + y (commutativity), you can infer: x +- y = x + y
16:18:43 <ertes> example:  5 +- 3 = 3 + 5, but 3 + 5 = 5 + 3, therefore also 5 +- 3 = 5 + 3
16:19:02 <bbear> ok
16:19:13 <bbear> thanks monochrom I read your tutorial up to the  end.
16:19:45 <bbear> I'll try to do something without the do notatino
16:19:51 <bbear> Keep up to date
16:20:09 <glguy> separate from commutative functions you can find people talking about commutative monads, (it just isn't related to =<< / >>=)
16:20:14 <bbear> yes
16:20:28 <dolio> IO is not commutative, though.
16:22:25 <glguy> I commute 5 times a week
16:26:40 <ij> Why doesn't «(\e -> [e] \\ [ThreadKilled])» typecheck, where «Exception e => e»?
16:27:30 <ertes> ij: the former doesn't make much sense
16:27:43 <ertes> oh, wait
16:27:49 <ij> :t (\e -> [e] \\ [ThreadKilled]) :: Exception e => e -> [e]
16:27:50 <lambdabot> error:
16:27:51 <lambdabot>     • Couldn't match expected type ‘e1’
16:27:51 <lambdabot>                   with actual type ‘AsyncException’
16:27:52 <glguy> ThreadKilled has a specific type
16:27:55 <geekosaur> ThreadKilled is a type
16:28:04 <glguy> :t ThreadKilled
16:28:05 <lambdabot> AsyncException
16:28:10 <ertes> it was confusing…  i thought they confused types and values there
16:28:11 <glguy> AsyncException is the type
16:28:26 <glguy> It's not whatever type you might want it to be
16:28:38 <geekosaur> ... right, whoops, it's multilevel
16:29:02 <ij> But you input whichever type with an Eq a, and you'll get it back if «a /= ThreadKilled».
16:29:12 <glguy> :t (==)
16:29:13 <lambdabot> Eq a => a -> a -> Bool
16:29:26 <glguy> Notice that == is only defined on two arguments of the same type
16:29:36 <geekosaur> so the problem is that Exception e => e -> [e] doesn't tell you anything about e other than it supports the methods of the Exception typeclass
16:29:43 <glguy> so you can only compare values with type AsyncException to ThreadKilled
16:29:45 <geekosaur> it does not let you specify that e is AsyncException
16:32:07 <ij> Right. I think this should work, so I'll keep thinking and I've an idea.
16:32:07 <glguy> :t (\e -> [ e | Just ThreadKilled /= fromException e ])
16:32:09 <lambdabot> SomeException -> [SomeException]
16:32:09 <ertes> ij: Exception doesn't form a subtyping hierarchy, so you can't just use ThreadKilled among other exception types in a list
16:32:34 <glguy> :t (\e -> [ e | Just ThreadKilled /= fromException (toException e) ])
16:32:36 <lambdabot> Exception t => t -> [t]
16:33:11 <sophiag> i'm trying to parse lists using haskell-src-exts and it works fine in ghci, but when i run it in the repl i'm using for this dsl it throws an error that there are non-exhaustive patterns in the functino parseSlist here: http://lpaste.net/354437
16:33:31 <sophiag> (i get similar issues with the arrow in lambdas, but one thing at a time)
16:33:34 <monochrom> bbear: I guess instead of "wants" it is more precisely "needs type".
16:34:08 <lyxia> sophiag: all of these functions are obviously partial
16:34:17 <monochrom> But if you understood the previous sentence about the first parameter, then this sentence about the second parameter is of the same nature. It is checking types. Both are checking types.
16:34:43 <sophiag> lyxia: of course, but i get that even when parsing a list of lists
16:34:51 <ij> Huh… [1 | True] works — how odd.
16:35:10 <sophiag> it's not a warning in ghci, it's failing when i use it for io..
16:35:34 <sophiag> hence why i've never found that particular error message useful :/
16:36:50 <bbear> :t (getLine >>= \x -> return (map (let foo bar = read bar::Int in foo) (words x)))
16:36:52 <lambdabot> IO [Int]
16:36:57 <lyxia> sophiag: print the parsed expression before passing it to parseList to check your assumption that you are parsing a list.
16:37:46 <ertes> > [ x | True, x <- [5,6] ]
16:37:48 <lambdabot>  [5,6]
16:38:07 <ertes> ij: it's not that odd, especially if you consider how it's desugared
16:38:16 <ertes> > guard True >> [1]
16:38:18 <lambdabot>  [1]
16:38:30 <sophiag> lyxia: that's something i was wondering...given the constructor used in the parameters do i need to pass it just the list? currently i'm passing the whole ast which contains other things
16:38:49 <bbear> do you have an opinion on why the last of my compilation errors are often parenthesis ?
16:39:00 <bbear> (it's true)
16:39:12 <monochrom> Yes, I means you're inexperience :)
16:39:17 <monochrom> d
16:39:38 <monochrom> Either that or you haven't memorized the whole precedence table.
16:40:21 <glguy> bbear: As an aside note that (let foo bar = read bar::Int in foo) is (read :: String -> Int)
16:40:33 <glguy> and that instead of all that we can write (map read (words x) :: [Int])
16:41:05 <bbear> wow
16:41:06 <bbear> okay
16:42:09 <bbear> can we do \[x,y] ?
16:42:21 <monochrom> Yes. But do you know what it means?
16:42:36 <bbear> yes
16:42:47 <bbear> :t \[x,y] -> x
16:42:48 <lambdabot> [t] -> t
16:42:52 <monochrom> Can you come up with a test that falsifies your guess?
16:43:01 <bbear> no
16:43:15 <bbear> I'd say it's a function that takes a list of two elements as a parameter.
16:43:19 <monochrom> Then you still don't know, scientifically speaking.
16:43:19 <lyxia> sophiag: if you pass anything other than a list you get the exception you got.
16:43:35 <bbear> I don't know if this function would work on something else 
16:43:47 <bbear> no scientifically speaking I don't a lot of things.
16:43:47 <monochrom> Can you come up with an experiment to find out?
16:43:55 <bbear> yes : firing up my ghci.
16:44:02 <bbear> I'm already doing that.
16:44:15 <monochrom> Then you haven't know but you will know.
16:45:15 <isovector> is there a Generic2 typeclass?
16:45:22 <glguy> no
16:45:44 <isovector> :( for any theoretical reason? or just nobody had a use
16:45:54 <bbear> > let x = \[x,y] -> x in x [1,2,3]
16:45:56 <lambdabot>  *Exception: <interactive>:3:9-19: Non-exhaustive patterns in lambda
16:46:07 <lyxia> isovector: nobody had a use
16:46:13 <monochrom> Yeah, like that.
16:46:24 <monochrom> Although, it is bad habit to have so many x's.
16:46:52 <isovector> i've got a use :)
16:47:17 <glguy> isovector: cool, you'll have to go implement Generic2 now!
16:47:23 <isovector> :'(
16:47:30 <isovector> who do i talk to?
16:47:53 <glguy> Maybe you don't actually need it. What are you trying to do?
16:47:55 <sophiag> lyxia: thanks. that was my suspicion. i don't understand why it works in ghci tho
16:48:14 <isovector> glguy: trying to write generic instances for `class CoEff f where comap :: (a -> b) -> Eff (f a ': r) x -> Eff (f b ': r) x`
16:48:35 <isovector> f :: * -> * -> *
16:50:22 <centril> If I have a (Rose) Data.Tree (Maybe Decoration)  where Decoration could for example be Type decoration, and an AST with a 1/1 correspondence to the rose tree - how to I traverse these in conjunction in a neat way ?
16:50:45 <mrjake> http://lpaste.net/6453280966029869056   Can anyone confirm this bug?
16:51:04 <centril> I'm trying to do AST decoration out-of-tree with a rose tree
16:53:51 <glguy> isovector: Generic2 is going to be quite a project shoudl someone take it on, the current system isn't designed at all to handle it
16:54:12 <glguy> the :*:, :+:, M1, etc all have a single parameter (that is unused in Generic and used in Generic1)
16:54:27 <glguy> and there's some logic for supporting composition via :.:
16:54:45 <glguy> once you introduce a second parameter you'll need a few more cases like :.: for various combinations of composition
16:54:58 <glguy> as well as a new parameter for all the aforementioned Rep types
16:55:46 <bbear> mmhhh
16:55:49 <centril> This was given to me as a suggestion by John Hughes -  So I want something like: Traversal' s a -> Traversal' (Tree (Maybe Decoration), s) (Maybe Decoration, a)
16:56:00 <bbear> I have a question
16:56:11 <bbear> no I have two questions
16:56:18 <bbear> And a glass of red wine.
16:56:20 <centril> bbear: just ask ;)
16:57:37 <bbear> so, well, programming in an imperative fashion was just like doing carpenter work in those old days. Now with Haskell, it lost kind of the artisanal edge it had. It's more like solving complicated puzzles. What do you think of my statement ? 
16:58:05 <bbear> my second question is more technical per se.
16:58:24 <bbear> you know what is the type of replicateM
16:58:26 <centril> bbear: if by "solving complicated puzzles" you are talking about (function) composition
16:58:33 <centril> :t replicateM
16:58:34 <lambdabot> Applicative m => Int -> m a -> m [a]
16:58:35 <bbear> yes
16:58:55 <bbear> but not only function but also all those typeclass
16:59:32 <bbear> let say I have a type data Coord = C Int Int
17:00:02 <bbear> and then I want to read from stdin 10 lines, each one containing a pair of integers.
17:00:41 <bbear> how would you write the function readNCartesianCoordinate :: IO [Coord]  ?
17:00:53 <centril> :t \i m -> sequenceA $ replicate i m
17:00:54 <lambdabot> Applicative f => Int -> f a -> f [a]
17:01:33 <bbear> not sure it helps.
17:01:51 <bbear> don't even understand the syntax \i m
17:02:16 <centril> bbear: first create: getCoord :: IO Coord, then just say: read10CartesianCoordinate = replicateM 10 getCoord
17:02:44 <centril> bbear: \x -> f x  is a lambda abstraction with an argument x and "function body" f x
17:03:03 <centril> \i m -> f i m  = \i -> \m -> f i m
17:03:29 <bbear> :t \i m -> ()
17:03:31 <lambdabot> t1 -> t -> ()
17:03:41 <bbear> ok so you can chain arguments
17:03:50 <bbear> :t \x,y -> ()
17:03:51 <lambdabot> error: parse error on input ‘,’
17:03:59 <bbear> :t \a b c -> ()
17:04:00 <lambdabot> t2 -> t1 -> t -> ()
17:04:02 <centril> bbear: all haskell functions are curried - there are in reality no two-argument functions
17:04:08 <centril> that is just syntactic sugar
17:04:58 <bbear> I have readIntList :: IO [Int] and readCoord :: [Int] -> Coord
17:05:03 <centril> bbear:  :: a -> b -> c == :: a -> (b -> c)
17:05:06 <bbear> How can I link them together ?
17:05:41 <centril> readCoord <$> readIntList
17:05:46 <bbear> readIOCoord :: IO Coord
17:07:34 <centril> readCoord <$> readIntList   =   readIntList >>= pure . readCoord  =   readIntList >>= \x -> pure . readCoord $ x  == readIntList >>= \x -> pure $ readCoord x   =   do x <- readIntList ; pure $ readCoord x ;
17:07:57 <bbear> centril: thanks
17:07:59 <centril> pure = return
17:08:08 <bbear> I stepped into that world of functors.
17:08:26 <centril> yw
17:09:09 <bbear> don't know why it even works
17:09:19 <centril> bbear: what works ?
17:10:00 <bbear> readIOCoord = readIntList >>= \x -> return (readCoord x)
17:10:28 <bbear> why is it the same than readIOCoord = readCoord <$> readIntList ?
17:10:34 <bbear> and why does it matter :p ?
17:11:03 <bbear> what is the functor in this stuff I mean 
17:11:13 <centril> bbear: IO is a functor, which means it defines a function   (<$>) :: (a -> b) -> IO a -> IO b,   let a = [Int], b = Coord,  then you get  ([Int] -> Coord) -> IO [Int] -> IO Coord
17:11:21 <bbear> ha yes
17:11:29 <centril> and readCoord :: [Int] -> Coord, so it fits
17:11:29 <bbear> so IO is a monad and IO is also a functor ?
17:11:41 <bbear> are all monads functor as well ?
17:12:09 <centril> bbear: all monads are applicative functors, all applicative functors are functors
17:12:20 <ertes> bbear: yes, and the laws require that your example in terms of (>>=) and 'return' is equivalent
17:12:20 <centril> Monad => Applicative => Functor
17:12:40 <ertes> fmap f c = c >>= return . f  -- by law
17:13:09 <bbear> is there something before `Monad` in your last sentence centril (I mean even more specialize object that is an instance of the three others)
17:13:10 <centril> the syntax  class Applicative f => Monad f where ...  is a bit confusing, the arrow should be flipped really
17:13:27 <bbear> yes I get the point though.
17:13:59 <bbear> hom
17:14:33 <bbear> map is kind of a functor then
17:14:39 <bbear> but it's also a function
17:14:51 <bbear> that's confusing. You should tell your kid.s
17:14:55 <rotaerk> map is the function supported by functors
17:14:58 <glguy> [] (list) is also a functor
17:15:06 <centril> bbear: no, a list  [] is a functor for which map defines its functor instance
17:15:06 <glguy> map is the implementation for fmap in that function instance
17:15:17 <bbear> ha ok
17:15:19 <glguy> Functor instance*
17:15:25 <centril> :t map
17:15:26 <ertes> mathematically speaking 'map' is indeed a functor
17:15:26 <lambdabot> (a -> b) -> [a] -> [b]
17:15:27 <centril> :t fmap
17:15:28 <lambdabot> Functor f => (a -> b) -> f a -> f b
17:15:30 <ertes> but ignore that =)
17:15:35 <bbear> okay
17:15:56 <ertes> > fmap (+ 1) [3,5,7]
17:15:57 <centril> bbear: https://en.wikipedia.org/wiki/Functor
17:15:58 <lambdabot>  [4,6,8]
17:16:01 <ij> SIGINT produces an Exception while TERM dies without exceptions?
17:16:37 <bbear> hey in my mind Grothendieck is the real founder of category theory. Is that true ?
17:16:56 <ertes> ij: i'm pretty sure that SIGTERM is translated into an exception, too…  perhaps ThreadKilled
17:17:42 <ij> I hoped so, but can't catch it, maybe I'm doing something wrong. The ^C is caught.
17:17:50 <ertes> let me check
17:17:53 <sophiag> lyxia: you seem to know a lot about haskell asts. i'm parsing lambdas with a function like this: "parseLambda (Lambda _ [PVar (Ident var)] body) = parseExpr var body" and it's failing on the string in SrcLoc, which doesn't make sense to me since i'm using a hole for it. any idea what i'm doing wrong?
17:19:32 <centril> ertes, glguy : any ideas on how to traverse an AST with an out-of-AST  rosetree with decorations ?
17:19:40 <ertes> ij: indeed, i couldn't catch SIGTERM either…  i guess you need to install a signal handler
17:21:12 <centril> also, what is the role of IndexedTraversal ?
17:21:27 <centril> :t IndexedTraversal
17:21:28 <lambdabot> IndexedTraversal i s t a b -> ReifiedIndexedTraversal i s t a b
17:21:34 <ij> An exception would've been nicer. Now I've to make a MVar to notify the code to stop execution in the program's intestines.
17:21:55 <qmm> the haskell community is wonderful
17:22:34 <ertes> ij: you can throw an exception at the main thread
17:22:50 <bbear> I have a problem : here is my type signature readGiantPos :: IO (IO [Coord], Int, Int)
17:22:53 <qmm> i appreciate all of you who have helped me this past year, as well as your continued effort to help everyone in IRC :)
17:23:00 <bbear> I would like readGiantPos :: IO ([Coord], hitNumber, giantNumber)
17:23:12 <ertes> ij: main = do mainTid <- myThreadId; installHandler sigTERM (CatchOnce (throwTo mainTid (userError "test"))) Nothing; …
17:23:12 <bbear> I do readGiantPos = readIntList >>= \[x,y] -> (return (readCoordList y, x, y))
17:23:22 <bbear> with readIOCoord = readIntList >>= \x -> return (readCoord x)
17:23:24 <ertes> ij: that works
17:23:58 <ij> Woo! I'll try it out! qmm, lots of helpful folks here, indeed.
17:24:32 <ertes> ij: i guess you can also just use killThread
17:24:39 <ertes> then SIGTERM acts like killing the main thread
17:25:01 <ertes> ij: indeed, that works
17:25:12 <ertes> do mainTid <- myThreadId; installHandler sigTERM (CatchOnce (killThread mainTid)) Nothing
17:25:41 <ertes> i guess that the RTS runs signal handlers in a separate thread
17:26:08 <ertes> indeed, the installHandler docs confirm that
17:26:11 <centril> bbear: readGiantPos = do [x, y] <- readIntList ; y' <- readCoordList y ; pure (y', x, y)
17:26:13 <bbear> that's it : readGiantPos = readIntList >>= \[x,y] -> (readCoordList y) >>= \coordList -> return (coordList, x, y)
17:26:18 <bbear> I try to avoid do notation
17:26:28 <bbear> it has too much of the imperative perfume I want to get rid of.
17:26:36 <bbear> thanks anyway
17:26:41 <centril> bbear: thats a good idea
17:27:22 <lyxia> sophiag: I'm not sure what's going on with only that.
17:27:36 <ij> ertes, Yeah, it totally works!
17:27:53 <lyxia> sophiag: can you give more details
17:27:55 <bbear> wouw
17:27:59 <bbear> now time to go t o bed
17:28:03 <bbear> it's 2:30 here.
17:28:16 <bbear> yes guys you have been wonderful
17:28:24 <bbear> thank yous
17:28:55 <ij> 03:28:33
17:29:23 <ertes> there are as many time zones as there are seconds in a day
17:29:27 <ertes> so 86400 +- 1
17:30:39 <sophiag> lyxia: sure i'll paste a snippet
17:32:57 <centril> ertes: that sounds wrong... are there really as many TZs as seconds in a day?
17:33:16 <Cale> ertes: Don't forget to multiply by at least two for observation of daylight savings time
17:33:26 <centril> i mean, whole central europe only has 1 TZ: CET - and it's a big area
17:33:42 <ertes> and CEST…  sometimes
17:33:50 <centril> well, still 2
17:34:09 <ertes> i'm actually in CEST right now =)
17:34:51 <ertes> centril: i'm just making fun of humans
17:36:12 <sophiag> lyxia: here's how i'm parsing the lambdas: http://lpaste.net/354439. but since it's failing on the first argument to the constructor, it seems only the last line is relevant. i'm passing it something like (Lambda r1 r2 r3)
17:37:53 <centril> ertes: what country ?
17:37:57 <EvanR> preposterous there are 10 divisions of each second so multiply by 10
17:38:31 <lyxia> sophiag: what do you mean "it's failing on the first argument"
17:39:10 <ertes> centril: germany
17:39:50 <ertes> … i think…  let me check the current borders
17:42:59 <sophiag> lyxia: i mean the SrcLoc, which i have a hole for. i'm just ignoring it in all that code. the error is "Exception: fromParseResult: Parse failed at [<unknown>.hs] (1:11): Parse error: ->
17:42:59 <sophiag> CallStack (from HasCallStack):" and <unknown>.hs is the string in SrcLoc
17:44:00 <lyxia> this just looks like a parse error
17:45:51 <sophiag> well, same as with the list...i don't get that calling parseExp on lambdas in ghci
17:46:38 <sophiag> so i would assume it has to do with how i'm passing them as an argument to that function except i don't see anything wrong with it: (Lambda r1 r2 r3)
17:46:50 <lyxia> What code are you running in ghci, what code are you running outside ghci
17:47:05 <sophiag> outside ghci i have a whole repl set up
17:47:22 <sophiag> in ghci i'm just running fromParseResult $ parseExp
17:47:56 <lyxia> it's pretty hard to debug code I can't see.
17:48:34 <sophiag> well if you don't see anything wrong with that paste from before i would assume it has to be here: http://lpaste.net/354439
17:48:48 <sophiag> that was what i needed to change to correct parsing lists
17:49:09 <lyxia> "Parse failed" tells me the error is in the input
17:49:14 <lyxia> whatever string you are parsing
17:49:18 <sophiag> oh ok
17:49:29 <sophiag> i've been testing it like this: \\x -> x == 0
17:49:40 <sophiag> it seems to be failing on the arrow
17:49:49 <sophiag> yeah, ok. i was wrong thinking it was SrLoc
17:49:53 <sophiag> *SrcLoc
17:50:06 <sophiag> that's just identifying *where* it's failing
17:51:45 <lyxia> Could it be parseExp is not receiving the string you think it should receive?
17:53:47 <sophiag> i don't think so since in order to get that error it would have to be parsing the first part of it
17:54:19 <sophiag> idk, could having to escape the backslash have to do with it?
17:56:10 <lyxia> I just checked, and this error is in fact raised by a parse error, just like it says
17:56:51 <sophiag> i'm not doubting the error code. just confused about what could be wrong with that input
17:57:34 <lyxia> One thing you can do to be 100% sure you're looking at the string being passed to parseExp is to use Debug.Trace
17:58:36 <lyxia> Clearly it's not "\\x -> x == 0" because there is no -> at the 11-th column.
18:00:03 <sophiag> oh...i didn't know how to read it like that
18:00:29 <Sornaensis> what is the purpose of Data.Monoid.Product
18:00:57 <sophiag> does column essentially mean character?
18:01:05 <sophiag> because if so it would be the x
18:01:11 <sophiag> given what comes before it in the string
18:01:56 <sophiag> trace returns <function>, presumably because there's no show instance for functions?
18:02:00 <lyxia> Yes. The 11-th character in "\x -> x == 0" is ' '.
18:02:20 <sophiag> no, there's a string before it
18:02:40 <lyxia> you're using trace wrong
18:02:45 <sophiag> in the dsl the string read in in that example was "require \\x -> x == 0" making the 11th x
18:03:04 <sophiag> oh, you mean call trace on parseExp?
18:03:28 <lyxia> no, trace the string before passing it to parseExp
18:03:35 <sophiag> yes that's what i did
18:03:38 <sophiag> and it output 
18:03:41 <sophiag> oops
18:03:51 <sophiag> "<function>"4
18:04:19 <lyxia> I would do it like this: parseExp (traceId myString)
18:04:34 <sophiag> ok got it
18:04:43 <lyxia> require \\x -> x == 0 is not valid haskell
18:04:53 <sophiag> yes, it's a dsl...
18:04:56 <lyxia> it fails at \\
18:05:05 <sophiag> it's a string parsed into a dsl
18:05:14 <lyxia> 1) you gave me an error which complains at ->, not \
18:05:20 <sophiag> yes
18:05:28 <lyxia> 2) parseExp parses Haskell expressions
18:05:50 <lyxia> I am now quite confused
18:06:05 <sophiag> you need to escape backslashes...
18:06:24 <lyxia> Sure but that's not my point
18:06:32 <sophiag> anyway trace says it is failing at 11
18:06:36 <sophiag> oops \\
18:07:10 <lyxia> What I want to know is the exact string you are giving parseExp and the corresponding error
18:07:24 <sophiag> i just told you
18:07:27 <lyxia> You have been giving me inconsistent information
18:07:35 <sophiag> "require \\x -> x == 0"
18:07:44 <mbw> I want to build an executable using stack via the llvm backend. However, I have several versions installed. Is there a way to specify the path to the llvm3.7 bins/libs needed without having to fool around with update-alternatives?
18:07:52 <sophiag> the error is "Parse failed at [<unknown>.hs] (1:12): Parse error: ->
18:07:52 <sophiag> CallStack (from HasCallStack):"
18:07:56 <lyxia> sophiag: But why do you expect that to succeed, it's not valid haskell
18:08:09 <sophiag> it's a dsl
18:08:18 <sophiag> dsl stands for domain specific language
18:08:20 <lyxia> so what
18:08:24 <sophiag> it works because i wrote a parse for it
18:08:26 <lyxia> parseExp parses Haskell
18:08:27 <sophiag> ...
18:08:33 <alx741> hello everyone, I'm having a bit of a problem using the cryptonite package from GHCI (not in a stack project), it collides with crypto hash, so doing `import Crypto.Hash` says 'Ambiguous module name ... found in multiple packages', how may I proceed?
18:08:38 <sophiag> it parses plain strings into strings as well
18:08:47 <lyxia> sophiag: you wrote a function transforming a Haskell AST
18:08:53 <sophiag> yes
18:09:06 <sophiag> when i parse lists they're followed by a function in this dsl as well...
18:09:17 <sophiag> that works. lambdas do not
18:09:42 <lyxia> I know what a DSL is BTW.
18:09:58 <sophiag> i just figured i'd clarify rather than simply repeating myself
18:10:09 <sophiag> anyway, the space before the lambda seems to be the problem
18:10:13 <sophiag> that wasn't a problem with lists
18:10:18 <lyxia> The string you give to parseExp must be valid Haskell
18:10:29 <sophiag> strings are valid haskell
18:10:30 <lyxia> if you do not have such a string, then do not use parseExp
18:11:00 <sophiag> i do...
18:12:54 <zylinx> is ghc in debian package repo ? i can't afford to dl haskell-platform :<
18:14:45 <zylinx> stupid question, i leave until i find dsl line.
18:15:21 <sophiag> lyxia: i fixed it by adding parens
18:16:22 <lyxia> Anyway, next time please try to make runnable test cases.
18:17:02 <sophiag> i did
18:17:32 <lyxia> sophiag: none of what you pasted was relevant to the error you had, which was a parse error
18:17:55 <lyxia> and then there was a misunderstanding about a string being quoted
18:18:24 <sophiag> lyxia: no strings were quoted. you were confused that one can use haskell-src-exts to parse strings in order to create a dsl
18:18:58 <lyxia> Well then I still haven't understood what the problem was
18:19:05 <sophiag> yes, i think so
18:19:11 <lyxia> it involved giving invalid strings to parseExp
18:19:14 <sophiag> but thanks for telling me about how to use Debug.Trace
18:20:55 <lyxia> Weren't we talking about this parseExp https://hackage.haskell.org/package/haskell-src-exts-1.19.1/docs/Language-Haskell-Exts-Parser.html#v:parseExp
18:21:08 <sophiag> yes
18:22:33 <lyxia> and so the current string you have is "require (\\x -> x == 0)" ?
18:22:40 <sophiag> yes
18:22:44 <lyxia> okay
18:22:44 <sophiag> and that works
18:22:50 <lyxia> so now I understand
18:22:54 <sophiag> but i'm also matching for the parens obviously
18:23:01 <sophiag> oh wait not quite
18:23:10 <sophiag> with the parens i don't need to escape the backslash
18:23:11 <lyxia> it's exactly what I said, require \\ x -> x == 0 is not valid haskell
18:23:17 <lyxia> then you mentioned DSLs
18:23:26 <lyxia> I don't see how that contradicts anything I said
18:23:31 <sophiag> i didn't take "valid haskell" to mean anything like what you meant
18:24:44 <lyxia> Maybe I should have said "it's not a haskell expression".
18:25:07 <sophiag> i still wouldn't have gotten it
18:25:14 <sophiag> lambda syntax?
18:25:17 <sophiag> idk
18:25:49 <lyxia> You cannot apply a function directly to a lambda. you need parentheses or an operator.
18:26:33 <lyxia> f (\x -> x)    or    f $ \x -> x
18:26:39 <sophiag> i know that normally, but i was confused because it parses fine on its own
18:26:44 <sophiag> it was the space with a term before
18:27:19 <lyxia> what parses fine on its own
18:28:58 <sophiag> a lambda not wrapped in parens
18:30:43 <lyxia> Anyway, what I would have rather seen to understand the situation straight away would be:   here is my code    fromParseResult $ parseExp "require \\x -> x"   , here is my error "...".
18:30:57 <lyxia> so much simpler
18:31:36 <joe9> anyone knows an attoparsec parser to parse UTCTime? I can use parseTime but I am reading the string from a socket and I cannot guarantee that the string has been completely received.
18:31:47 <joe9> with attoparsec, I can do incremental parse
18:32:28 <lyxia> sophiag: maybe you didn't pinpoint it to that bit at first, but then you should have pasted enough code that I can just copy and run myself to immediately reproduce the error
18:32:49 <sophiag> lyxia: i did say that, but with a lot of extraneous code first
18:33:26 <sophiag> the problem, as noted, was it worked in ghci yet not with the repl i set up and i didn't figure i should have pasted the whole program for you to run. maybe i should have
18:33:48 <lyxia> that would have helped indeed
18:37:48 <lyxia> joe9: it seems aeson has one
18:38:36 <lyxia> alx741: https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#package-qualified-imports
18:39:38 <lyxia> joe9: https://github.com/bos/aeson/blob/master/attoparsec-iso8601/Data/Attoparsec/Time.hs#L125
18:39:59 <joe9> lyxia: Thanks.
19:18:45 <alx741> lyxia: thanks. Unfortunately I already tried, the moment I tried to use a function from the module it still complains about the ambiguous interface, very weird
19:33:47 <lyxia> alx741: what is the actual error
19:44:03 <alx741> lyxia: this one: http://sprunge.us/GjWB
19:44:35 <alx741> lyxia: oops sorry, wrong output, just a second
19:45:06 <alx741> lyxia: http://sprunge.us/SEZC
19:47:04 <lyxia> Even from a fresh ghci session?
19:48:26 <alx741> lyxia: yes, notice though I'm using `stack ghci`
19:48:39 <alx741> when I use `ghci` the error is:     Could not find module ‘Crypto.Hash’
19:48:41 <alx741>     Perhaps you haven't installed the "dyn" libraries for package ‘cryptonite-0.22@cryptonite-0.22-Bkmtpxnzy0e2o9946AJnoQ’?
19:54:36 <sveit> is there a reason product in Data.Foldable isn't implemented with foldl'?
19:56:06 <benzrf> :t foldl'
19:56:07 <lambdabot> Foldable t => (b -> a -> b) -> b -> t a -> b
19:56:09 <benzrf> huh
19:56:16 <benzrf> sveit: good question
19:56:35 <lyxia> alx741: stack ghci --ghci-options "-hide-package cryptohash"
19:58:35 <lyxia> https://ghc.haskell.org/trac/ghc/ticket/13168 looks like an open issue
19:59:39 <alx741> lyxia: fantastic, it worked! thank you very much
20:01:04 <Gurkenglas> sveit, I heard it's because Num isn't guranteed to be strict and optimization fixes that one anyway
20:12:05 <qmm> has anyone been successfull installing lambdabot on osx?
20:12:16 <qmm> how did you do it?
20:12:20 <qmm> (if so)
20:23:32 <glguy> qmm: To build it I ran: cabal get lambdabot; cd lambdabot-5.1.0.1; cabal new-build
20:24:15 <glguy> and then it looks like it get to dependent-sum and stopped :)
20:26:49 <glguy> so I'm allowing dependent-sum-0.4 now and it's proceeding
20:27:23 <glguy> and then it triggered : malformed mach-o: load commands size (52104) > 32768
20:27:45 <glguy> which I thought GHC 8.0.2 was supposed to help with, but maybe I don't have the corresponding fix to Cabal
20:29:31 <Vibor> Hi, I wrote 2 functions in Haskell two calculate natural logarithm, https://ptpb.pw/-bml both using series, but both seem to be imprecise tested in ghci, I wonder why , thanks.
20:40:47 <rotaerk> hmm is there some way in haskell to do something like: type GetArg a = ...;  type Foo = GetArg [Int];  -- and now Foo is Int
20:41:12 <Cale> Vibor: Series expansions for log tend to converge pretty slowly. You'll find that your series expansion does rather well for values close to 1.
20:43:17 <Cale> rotaerk: no
20:45:03 <glguy> rotaerk: You can use a type family for that
20:45:07 <Vibor> Cale: Thanks for the response. So what is the correct way(like the way Prelude log does) to achieve the goal precisely?
20:46:00 <Cale> Well, let's perhaps look at how the Prelude does it. I suspect it probably just asks your CPU to compute it.
20:46:10 <Cale> (for Float and Double, at least)
20:46:18 <rotaerk> ah k
20:46:21 <lpaste> glguy pasted “for rotaerk” at http://lpaste.net/8620043846048284672
20:46:44 <rotaerk> thanks
20:46:56 <Cale> Whoa...
20:47:06 <Vibor> Cale: and how to do that? write assembly?
20:47:15 <Cale> glguy: Hmm, how is that not a huge problem?
20:47:35 <Cale> Especially in the presence of type families...
20:47:37 <glguy> Cale: Umm, how is it a huge problem?
20:47:46 <Cale> f may not be injective
20:47:52 <glguy> Cale: Type families must always be fully saturated
20:48:05 <glguy> so 'f' will never be instatiated to an unsaturated type family
20:48:17 <glguy> so there's no issue there
20:48:28 <Cale> ah, so we're just letting it syntactically pull apart the expression
20:48:46 <Cale> That's... kind of uncool, but I guess it's fine
20:48:56 <glguy> It's not so much syntactic
20:49:02 <glguy> it just never matches a type family
20:49:43 <glguy> f will only be a type expression comprised of distinct types like those introducd by data and newtype
20:49:57 <Cale> hm
20:50:01 <glguy> rather than synonyms introduced by type or type family
20:50:44 <glguy> so it's never ambiguous as to what 'f' might be
20:51:24 <Cale> I suppose that's fair enough.
20:51:41 <Cale> For some reason it makes me feel rather uncomfortable though.
20:52:04 <glguy> It's the same kind of comfort you get whe nyou use (e.g.) map
20:52:12 <glguy> or at least fmap
20:52:18 <glguy> :t fmap
20:52:20 <lambdabot> Functor f => (a -> b) -> f a -> f b
20:52:29 <glguy> We can pull apart some type 'f a'
20:52:34 <glguy> and learn what a was
20:53:11 <Cale> That's true
20:55:25 <Cale> Vibor: Yeah, ultimately it'll be dependent on which backend code generator you're using to fill in the operation
21:00:42 <Cale> Vibor: ah, apparently it uses libm's log
21:05:07 <Vibor> Cale: c library?
21:08:48 <Cale> yeah
21:09:05 <Cale> At least on x86, that's what seems to happen:
21:09:14 <Cale> https://github.com/ghc/ghc/blob/46246a6d57c35ebf12032d13a4cd7ff18f713770/compiler/nativeGen/X86/CodeGen.hs#L2648
21:14:59 <Vibor> So can I fix the problem by using CReal with arbitrary fixed digit precision? if I want to interpret log using haskell purely?
21:16:14 <Vibor> Data.Number.CReal
21:16:23 <Cale> Well, unless you use the log that's built in to CReal, that's going to be even worse
21:16:31 <Cale> CReal is terrible at adding up lots of numbers
21:16:45 <Cale> > sum [1..1000] :: CReal
21:16:50 <lambdabot>  500500.0
21:16:54 <Cale> > sum [1..10000] :: CReal
21:16:59 <lambdabot>  mueval-core: Time limit exceeded
21:17:07 <Cale> It gets really really slow :)
21:17:31 <Cale> Better would be to choose an algorithm which converges faster
21:18:06 <Cale> Something like using Newton's method to invert exp
21:19:54 <Cale> Just to be clear, your problem isn't rounding error with Float, it's just the fact that it takes a *lot* of terms in the sum before you really get very close to the actual value of the logarithm by that method.
21:21:50 <Cale> *or* take a bunch of square roots and pull out factors of 2 until the number you're trying to take the log of is pretty close to 1
21:22:16 <Cale> (and you can compute square roots using Newton's method)
21:22:42 <MarcelineVQ> chemists like to cook, mathmaticians like to play horseshoes
21:25:12 <Cale> actually, hmm
21:26:31 <Cale> ah, yeah, that seems to work fairly well
21:29:57 <Cale> Vibor: http://lpaste.net/354442
21:32:07 <Vibor> Cale: Amazing OoO
21:33:35 <Lokathor> seems i can't install gl on windows using stackage 8.8
21:34:16 <Lokathor> http://lpaste.net/354443
21:34:34 <Lokathor> in previous LTS versions i couldn't install GLFW-b, but now I can't install gl
21:34:51 * Lokathor shakes fist at sky
21:37:16 <MarcelineVQ> :( stack unpack it and see if you can work it out locally
21:38:17 <Lokathor> as with many things haskell, I'm not skilled enough in the details to actually do that
21:38:18 <Vibor> Cale: "*or* take a bunch of square roots and pull out factors of 2 until the number you're trying "
21:38:20 <Vibor>               to take the log of is pretty close to 1
21:38:24 <Lokathor> I only know enough to report the error :P
21:38:33 <Vibor> Cale: Could you please explain why?
21:38:48 <geekosaur> looks like it needs hxt as a setup-depends
21:38:53 <geekosaur> re gl
21:38:54 <MarcelineVQ> typcially it goes: stack unpack foo &&​ cd foo-version && stack init --solver && stack build
21:39:20 <geekosaur> possibly need to upgrade stack for setup-depends support?
21:39:28 <MarcelineVQ> there was some fixing done to sorting out setup-depends in stack 1.4.1, and possibly 1.4.0
21:40:20 <Lokathor> hmm
21:40:26 <Lokathor> i'm on stack 1.3, i'll try 1.4
21:41:15 <geekosaur> although tbh that error looks like it needs at build time as well as a TH dependency
21:41:47 <geekosaur> so possibly this requires adding hxt as a normal build dependency as well as a setup-depends
21:42:19 <Cale> Vibor: Well, the explanation will depend on which series we choose, but most of the series formulas you'll see for log tend to be centred around 1, just because that's a point where log behaves specially, and has a nice value and first derivative
21:42:58 <Lokathor> there seems to be a bit pile of stuff to download for 1.4, so this is taking a bit
21:43:49 <iqubic> How do I check my version of Stack?
21:43:52 <Cale> Vibor: https://en.wikipedia.org/wiki/Taylor%27s_theorem tells us something about polynomial approximations obtainable from the derivatives of a function at a given point
21:44:03 <Lokathor> iqubic, stack --version
21:44:05 <geekosaur> I'd presume stack --version
21:44:11 <iqubic> Looks like I have version 1.4
21:44:12 <geekosaur> like pretty much anything else
21:44:20 <iqubic> Is that the latest version?
21:44:24 <Lokathor> iqubic, yep
21:44:38 <Lokathor> geekosaur, hey not all of us are so versed in command line normals :P
21:44:54 <MarcelineVQ> you can get newer on git :>
21:44:58 <Lokathor> geekosaur, with stack 1.4 in use, gl seems to be building hxt as a dependency just fine
21:45:17 <MarcelineVQ> gl seems to be properly bumped to requiring 1.24.* cabal so hopfeully the stack upgrade helps
21:45:18 <Cale> Vibor: Depending on how you prove the theorem, there are a few different forms in which you can get the "remainder" -- the error term shown at the end there, but look for instance at the integral form of the remainder
21:45:45 <Lokathor> the next question is if i'll be able to build GLFW-b or not :P
21:45:58 <Lokathor> but gl takes quite a while to build so we won't be able to find out for a few minutes
21:46:05 <iqubic> Also, why are people talking about LTS versions? Are there Long Term Support versions of Haskell?
21:46:11 <Cale> Vibor: The thing to notice is that it's an integral from a to x, where a is the point at which we're taking the nth derivatives of the function, and x is the value at which we're evaluating the whole expansion
21:46:21 <Lokathor> iqubic, yes, stack picks package versions using an LTS system
21:46:28 <iqubic> Ah.
21:46:28 <Cale> Vibor: So naturally, this will tend to be small when x is close to a
21:46:38 <Lokathor> iqubic, https://github.com/fpco/lts-haskell#readme
21:49:45 <Cale> Vibor: i.e. if we take a series expansion for the logarithm at 1, we have log(1 + x) = x - x^2/2 + x^3/3 - ..., or to put it in the form that it appears in the page on Taylor's theorem, log(x) = (x-1) - (1/2)(x-1)^2 + (1/3)(x-1)^3 - ...
21:50:24 <Cale> Then this will approximate log for values close to 1, but will be a poor approximation for anything too large or too close to 0
21:51:15 <Cale> (In fact, the fact that log misbehaves at 0 will also prevent *this* form of the series from even converging for values 2 and above)
21:53:21 <iqubic> What are we talking about? CReal?
21:54:03 <Cale> Vibor wrote some Haskell functions using series expansions to compute log, and wondered why they weren't converging very well
21:54:55 <iqubic> Ah.
21:55:27 <iqubic> Why not use an actual log function built into Haskell using C or C++?
21:55:46 <Cale> I guess just exploration of the mathematics :)
21:56:05 <iqubic> And why use Haskell for that? Is Haskell the right tool for that?
21:56:14 <Cale> It's not a bad tool for it
21:56:44 <iqubic> Can one use Haskell for web applets?
21:56:49 <Cale> Yes
21:57:00 <iqubic> Is that recommended? Is it hard?
21:57:18 <Lokathor> iqubic, setting up haskell to run in the browser is a little tricky to learn at first, so it's probably not a good first project with Haskell
21:57:23 <Cale> That's actually my day job -- I'm working for Obsidian Systems developing web applications pretty much entirely in Haskell
21:58:08 <iqubic> Let's say I want to write a GUI application in Haskell. Not web applications, just local Haskell programs with a GUI component.
21:58:19 <Cale> We use ghcjs to compile our frontends to Javascript which runs in the browser, and ghc to compile them to native ARM code for mobile devices
21:58:20 <iqubic> What library do you recomend I use?
21:58:30 <iqubic> I see.
21:58:32 <Cale> and of course native x64 code for the backend :)
21:58:43 <iqubic> That sounds good.
21:59:08 <iqubic> What Library should I use for GUI applications.
21:59:13 <Lokathor> iqubic, SDL2 and OpenGL are both solid in Haskell, but actual GUI toolkits aren't quite as easy to work with
21:59:22 <Cale> Well, the library we use is called reflex-dom
21:59:42 <iqubic> Alright. What's the difference between SDL2 and OpenGL?
22:00:02 <Lokathor> iqubic, SDL2 is oriented towards 2d graphics, and OpenGL is usually used for 3d graphics
22:00:24 <iqubic> Alright, I want SDL2 than.
22:00:37 <Cale> http://cale.hn.org/Demos/ -- I have some little reflex-dom demos here
22:00:42 <iqubic> What Library will give me the Haskell Bindings?
22:01:05 <Lokathor> iqubic, https://hackage.haskell.org/package/sdl2 you can read all about the package here
22:01:21 <Lokathor> iqubic, are you on windows or linux?
22:01:32 <iqubic> Linux.
22:01:42 <iqubic> Does that make things easier or harder to do?
22:01:46 <Lokathor> ah, then you'll have an easy time getting it set up
22:01:55 <Lokathor> linux is easy mode for the world of Haskell
22:01:58 <Lokathor> windows is hard mode
22:02:31 <iqubic> I hate Windows. But now's not the the time, and here isn't the place to discuss that.
22:02:34 <Cale> http://cale.hn.org/Demos/Audio/Audio.jsexe/ -- simple media player widget implemented in reflex-dom (obviously using the audio support in the DOM)
22:02:53 <Cale> You can click the progress bar to seek :)
22:03:04 <iqubic> Why does SDL2 depend on OpenGL?
22:03:40 <Lokathor> iqubic, SDL is built on top of lower level systems. in most cases it's built on top of OpenGL (which talks directly to the graphics card)
22:03:59 <Cale> I'm not sure I'd consider either SDL2 or OpenGL to be GUI libraries
22:04:04 <iqubic> Also, can I have an SDL2 program that responds to keyboard and mouse input?
22:04:08 <Cale> I mean, they're graphics libraries
22:04:21 <Lokathor> iqubic, yep, you can.
22:04:23 <Cale> and SDL2 does have some input handling stuff
22:04:33 <Cale> But neither of those have much in the way of actual user interfaces
22:04:34 <iqubic> Cale: I want to do graphics stuff. Not so much GUI.
22:05:03 <Lokathor> Cale, they don't have widgets, but Haskell doesn't have the best support for actual widget toolkits anyway, as far as I've seen
22:05:06 <Cale> iqubic: If it's enough to just get some simple shapes and such on the screen in a hurry, perhaps look at gloss
22:05:13 <iqubic> I want to be able to take user input so I can do stuff like panning around an image, or zooming in and out.
22:05:19 <monochrom> Graphical Unstopped Iterations :)
22:05:40 <Cale> https://hackage.haskell.org/package/gloss
22:06:09 <iqubic> Cale: What I want to do is program the Mandlebrot set. So I just need a way of coloring each pixel in a window seperatly.
22:06:55 <geekosaur> SDL2 depends on opengl because opengl is the graphics backend it uses. X11's graphics primitives are a bit too primitive
22:07:24 <iqubic> What features doe s SDL2 have that are not present in GLOSS?
22:08:29 <geekosaur> SDL was designed for writing games in a cross-platform manner. Gloss is a simple wrapper around OpenGL
22:08:33 <Lokathor> iqubic, SDL2 allows you more control, but that also means that you have to manage more of it yourself. Gloss takes away some of the control flow and manages it for you
22:08:47 <iqubic> So GLOSS is the simpler library?
22:08:51 <geekosaur> so SDL2 abstracts over OpenGL, DirectX, etc.
22:08:53 <geekosaur> yes
22:08:54 <Lokathor> yes
22:09:01 <iqubic> Are there any GLOSS tutorials out there?
22:09:08 <Cale> Also, people don't usually write gloss in all caps
22:09:27 <iqubic> Sorry bout that.
22:09:32 <iqubic> Still new here.
22:09:42 <Cale> Gloss is almost so simple that a tutorial is barely necessary
22:09:45 <Cale> https://hackage.haskell.org/package/gloss-1.11.1.1/docs/Graphics-Gloss-Data-Picture.html
22:09:46 <iqubic> So I install gloss with Stack.
22:09:47 <Cale> start here
22:09:56 <Cale> So, there's a type for representing pictures
22:10:12 <Lokathor> iqubic, the gloss github has many examples, https://github.com/benl23x5/gloss/tree/master/gloss-examples
22:10:21 <Lokathor> if you want to see how a "complete" program is arranged
22:10:31 <iqubic> Thanks lokathor.
22:10:41 <Cale> Unfortunately, your task is going to immediately take you to the one part of Gloss which is a little bit rough -- you're probably going to want to use bitmapped data
22:11:08 <iqubic> Is gloss the right program for the mandlebrot set. What I want to do is color each pixel idividually.
22:11:51 <jle`> well, it's meant for gui's
22:12:04 <Cale> jle`: what is?
22:12:12 <iqubic> What is meant for GUIs? gloss?
22:12:15 <Cale> So, the thing you'll need to do is produce a ByteString containing the bitmap data you want to display
22:12:49 <jle`> hm, i was going to say gloss, but i think not, now
22:12:56 <iqubic> How do I create a ByteString?
22:13:04 <iqubic> Is there a tutorial for that?
22:13:05 <jle`> seems like it's meant for vector graphics
22:13:12 <iqubic> Yes it is.
22:13:17 <Cale> ah, how new are you to Haskell, btw?
22:13:18 <jle`> but if you just want to make a bunch of pixels from an arbitrary function, you can probably just use JuicyPixels instead
22:13:29 <jle`> JuicyPixels basically lets you work with pictures as an array of pixels
22:13:32 <iqubic> Quite new
22:13:40 <iqubic> jle` I will take a look at that.
22:13:42 <Cale> Oh, right, JuicyPixels might be a good way to construct it
22:14:21 <jle`> JuicyPixels is what simon marlow uses for his mandelbrot set example in his book
22:14:29 <jle`> for what it's worth
22:15:29 <iqubic> I will use that then.
22:15:37 <iqubic> What is Simon Marlow's book called?
22:16:09 * Lokathor is also interested in such a demo
22:16:39 <Cale> iqubic: Okay, so, here's a quick rundown of the bits of documentation you'll be interested in from JuicyPixels and Gloss
22:16:41 <jle`> iqubic: Parallel and Concurrent Programming in Haskell
22:16:57 <Cale> https://hackage.haskell.org/package/JuicyPixels-3.2.8.1/docs/Codec-Picture.html#t:PixelRGBA8 -- this is the pixel type you'll want to use to match up with Gloss
22:17:16 <jle`> the relevant function is generateImage :: (Int -> Int -> a) -> Int -> Int -> Image a
22:17:22 <Cale> right
22:17:33 <iqubic> So I'll be using gloss and JuicyPixel together?
22:17:40 <jle`> give generateFunction a height and width, and then a function that takes an x and y and returns a pixel, and it makes an image
22:17:52 <jle`> you can directly export an 'Image a' to a file using juicypixels
22:17:56 <Cale> iqubic: Yeah, JuicyPixel to generate the image to be displayed, and gloss to put it on the screen
22:18:08 <iqubic> Alright cool.
22:18:18 <tathougies> Is there any package providing nice type families for `DataKinds`? In particular, I'm looking for a type-level `(&&)` operator over booleans
22:18:18 <iqubic> What does the type Image a mean?
22:18:22 <Cale> encodeBitmap :: forall pixel. BmpEncodable pixel => Image pixel -> ByteString
22:18:35 <Cale> Image a is an image made up from pixels of type a
22:19:03 <jle`> iqubic: an 'Image a' is a picture whose pixels are a's
22:19:04 <Cale> And you'll want to use PixelRGB8 as your pixel type, because that matches up with what Gloss will want
22:19:13 <Cale> I just said that :)
22:19:31 <iqubic> So I install both Libraries with Stack, and then what do I do?
22:19:35 <Cale> https://hackage.haskell.org/package/gloss-1.11.1.1/docs/Graphics-Gloss-Data-Bitmap.html#v:bitmapOfByteString
22:20:07 <iqubic> How do I use these libraries in actual programs.
22:20:08 <iqubic> ??
22:20:43 <Cale> Once you have the ByteString from encodeBitmap, you can pass the width, height, the pixel format PxRGBA, and then the ByteString (and then probably True because you'll want caching)
22:21:05 <Cale> and bitmapOfByteString will get you a gloss Picture
22:21:14 <iqubic> Also, how do I make this graphics program react to user input to do things like panning and scrolling.
22:21:16 <jle`> tathougies: there's singletons if you want to get a batteries-included vesion
22:21:24 <jle`> tathougies: and there are light libraries like type-combinators that have one
22:22:00 <iqubic> Now, do I install these with Stack, and import the libraries to use them? Is that all?
22:22:23 <dunx> buffer 44
22:22:25 <jle`> tathougies: from singletons, http://hackage.haskell.org/package/singletons-2.2/docs/Data-Singletons-Prelude-Bool.html#t::-38--38-
22:22:39 <Cale> iqubic: You're in luck, that's sort of what gloss does by default actually, but you'll probably want to actually render new images as the user zooms, so you'll end up wanting to override that by using the "play" function from Graphics.Gloss.Interface.Pure.Game
22:22:50 <jle`> tathougies: the type is funny because it's directly promoted from the definition of && in prelude using template haskell
22:23:09 <Cale> iqubic: https://hackage.haskell.org/package/gloss-1.11.1.1/docs/Graphics-Gloss-Interface-Pure-Game.html#v:play
22:23:30 <jle`> tathougies: from type-combinators, http://hackage.haskell.org/package/base-4.9.0.0/docs/Data-Type-Bool.html#t:-38--38- , which defines it directly
22:23:30 <Cale> iqubic: Well, start with just getting a picture on the screen using the similar but simpler function called display
22:23:41 <Cale> https://hackage.haskell.org/package/gloss-1.11.1.1/docs/Graphics-Gloss-Interface-Pure-Display.html#v:display
22:24:08 <tathougies> http://hackage.haskell.org/package/singletons-2.2/docs/Data-Singletons-Prelude-Bool.html#t::-38--38- thanks for the Data.Type.Bool link. I think i'd rather use it from there.. this is a library so trying to keep my dependencies low
22:24:33 <iqubic> How do I use libraries from hackage in my own programs? Is that hard to do?
22:24:44 <jle`> iqubic: just throw them in your cabal file :)
22:24:46 <jle`> it's all pretty smooth
22:24:59 <Lokathor> jle`, I don't think they've used a cabal file before
22:25:05 <iqubic> What cabal file? I know hardly anything about Stack's inner workings.
22:25:09 <Cale> iqubic: Yeah, if you're using stack, you should be able to add these libraries to your cabal file and then import the relevant modules into your code, and it should load.
22:25:16 <iqubic> Or cabal's for that matter.
22:25:21 <jle`> tathougies: be aware that if you do a lot of type level stuff, you might eventually just want the singletons library in general
22:25:42 <jle`> also Bool is awkward at the value level, and it is just as awkward if not more at the type level
22:25:56 <jle`> so there's a chacne your program might look better w/o Bool in the first place, and using something else
22:25:58 <iqubic> I don't know enough about Stack or Cabal to know what a cabal file is.
22:26:08 <tathougies> @jle` I'm familiar with singletons, but my use case is very limited. Certainly not at the singletons level. I'm just doing some simple calculations with Nat, and the (<=?) type family returns Bool. Thanks for the tips though
22:26:09 <lambdabot>  Parse failed: Parse error: my
22:27:12 <Cale> iqubic: Okay, so start with  "stack new mandelbrot"
22:27:12 <iqubic> So can someone explain to me what a cabal file is? And how to get Hackage libraries working in my programs.
22:27:41 <iqubic> I will do that.
22:28:08 <Cale> iqubic: A cabal file explains what your project is, what dependencies it has, and other information relevant to building it. Cabal-install and Stack (both of which use the Cabal library) use the information in that file to know how to build your project.
22:28:17 <jle`> tathougies: no problem.  yeah, <=? from TypeLits is kind of weird to ues directly too in the big picture.  i feel like it's mostly meant for low-level interfaces, and the hope is that you would use them indirectly through other libraries
22:28:26 <jle`> but for a simple case then yeah oh well, heh
22:28:49 <Cale> iqubic: Once that stack command finishes, cd into the directory it created, and have a look at mandelbrot.cabal
22:28:59 <iqubic> I will do that.
22:29:00 <Cale> (in whatever text editor you like)
22:29:04 <jle`> the entire GHC.TypeLits module is more like a ghc api/internals than meant for actual end usage
22:29:42 <iqubic> There is a lot of stuff in that .cabal file already.
22:29:44 <Cale> iqubic: It seems that stack just assumes you're going to build something that will both have a library and an executable
22:29:45 <Cale> yeah
22:30:00 <Cale> It just gets you started with some sensible default stuff
22:30:29 <Cale> You can see the "library" section with its indented stuff, you might just want to get rid of that.
22:30:35 <Cale> and then the executable section following it
22:30:51 <Cale> notice the "build-depends" fields?
22:31:11 <Cale> Those list the packages that the various parts of your project depend on
22:31:18 <iqubic> Why? Why should I get rid of the library and executable sections?
22:31:36 <Cale> No, just the library section, assuming you're building an executable program and not a library
22:31:47 <Cale> You can keep both if you want though
22:31:59 <iqubic> I am building an executable, and not a library. That is right.
22:32:15 <iqubic> Should I remove the test section, or no?
22:32:33 <Cale> Eh, for now, why not? Let's keep it simple.
22:33:39 <Cale> So, you'll want to add gloss and JuicyPixels to the build-depends list
22:33:40 <iqubic> Alright, currently I only depend on base and mandelbrot
22:33:55 <iqubic> What else do I add to the dependecy list?
22:34:04 <Cale> and actually, remove mandelbrot
22:34:13 <iqubic> Why?
22:34:19 <Cale> because that's assuming your project is split into a library and an executable
22:34:24 <iqubic> Ah.
22:34:29 <Cale> so the executable depends on its library
22:34:38 <iqubic> Ah.
22:34:55 <iqubic> So, I depend on base, gloss and JuicyPixels.
22:35:05 <Cale> yeah
22:35:09 <iqubic> How do I tell stack that I depend on the latter two things.
22:35:10 <iqubic> ??
22:35:14 <Cale>   build-depends:       base, gloss, JuicyPixels
22:35:42 <iqubic> Cool.
22:36:09 <Cale> Now, try running  stack repl
22:36:11 <iqubic> And then I just put my code in src folder?
22:36:34 <Cale> It'll be app/Main.hs
22:36:42 <iqubic> What is the src file for?
22:36:47 <iqubic> Compiled code?
22:36:48 <Cale> That was for the library
22:37:00 <Cale> You can configure this in the .cabal
22:37:07 <iqubic> So I can remove the src folder?
22:37:09 <Cale> You'll see hs-source-dirs: app
22:37:22 <Cale> You can change that to src if you'd prefer to put code in src
22:37:38 <iqubic> Also, running stack repl is downloading the libraries I depend on. That's cool
22:37:42 <Cale> yep
22:38:10 <iqubic> What does this setup.hs file do that I have in this project folder now?
22:38:21 <iqubic> I mean it was created as part of the template.
22:38:56 <iqubic> What does that setup.hs thing do?
22:39:13 <Cale> You only ever edit that if you really want to program more carefully how the Cabal library deals with configuring, building and installing your package. Very few projects ever touch that.
22:39:21 <iqubic> Also do I need to worry about stack.yaml at this moment?
22:39:27 <iqubic> Is that important?
22:39:58 <Cale> The main thing in stack.yaml is that you can choose which repository of packages it's going to get things from
22:40:13 <iqubic> I'll use the default.
22:40:25 <iqubic> I assume that'll be fine for me.
22:41:02 <iqubic> Gosh, OpenGL takes forever to install.
22:41:51 <iqubic> How do I compile my project? Stack Build?
22:41:58 <iqubic> How do I run it? Stack exec?
22:42:02 <suds13_> join #haskell-beginners
22:42:15 <Cale> When it finishes, you'll probably get a compile failure with "failed to load interface for Lib" because we stripped out the Lib component
22:42:17 <cocreature> "stack build"
22:42:20 <Cale> suds13_: hm?
22:42:40 <Cale> Yeah, stack build will build the executable.
22:42:44 <ski> (presumably missed hitting the `/' key on the keyboard)
22:42:47 <Cale> ah
22:43:06 <suds13_> Cale: hehe wrong place to put command
22:43:32 <Cale> suds13_: that's all right -- at first I wondered if you were suggesting we take the discussion there
22:44:11 <Cale> I want to emphasise that #haskell is also a fine place for beginner discussion, despite the existence of the other channel :)
22:44:39 <iqubic> You know, I just went ahead and rebuilt my project with the simple template, becuase stack recommended that to me.
22:45:03 <iqubic> It has only the barebones stuff.
22:45:22 <MarcelineVQ> simple won't be much different than what you ended up with, except your Main.hs will be in src/
22:45:24 <iqubic> Now, do I want to create a github repo to go with this project, or no?
22:45:52 <iqubic> Note: I know enough about git to do that on my own.
22:46:50 <cocreature> stack doesn’t really care if you have a github repository for your project but if you want to have one, sure go ahead
22:47:22 <iqubic> I don't want one for this project.
22:47:35 <iqubic> Actually, yes I do.
22:47:41 <iqubic> Scratch that.
22:48:08 <Cale> iqubic: Well, it's up to you :)
22:49:15 <iqubic> Alright, I have a question. 
22:50:18 <lpaste> IQubic pasted “yaml default config” at http://lpaste.net/354444
22:50:52 <iqubic> If you look at that paste, you'll see that stack is telling me I can create a yaml file with default parameters. How would I do that?
22:51:14 <cocreature> it pretty much tells you the two options, no?
22:51:23 <iqubic> Yeah.
22:51:43 <cocreature> so I guess I don’t understand your question
22:51:47 <iqubic> I want to go the .yaml file way, but I don't know what the yaml file would look like.
22:52:07 <cocreature> you can literally just copy the yaml that this error message shows
22:52:08 <cocreature> so line 3-9
22:52:19 <iqubic> Oh, I can. LOL
22:52:25 <cocreature> replace value by the actual values :)
22:52:49 <iqubic> I will
22:53:15 <_sras_> Is there any rule one can follow to not end up with circular dependencies?
22:54:06 <jle`> there's one obvious rule
22:54:11 <lpaste> Cale pasted “Starter for gloss” at http://lpaste.net/354445
22:54:14 <jle`> but there are some general heuristics too
22:54:16 <Cale> iqubic: ^^ try that :)
22:54:30 <jle`> a lot of libraries use a 'Types' module that just exports types
22:54:43 <Cale> iqubic: You should be able to stack repl, and then just type main
22:54:57 <Cale> iqubic: and if all is well, you'll get a black window with a red circle in it
22:55:17 <Cale> iqubic: and you can drag the circle around and mousewheel zooms
22:55:28 <iqubic> Cool. I'll try that.
22:55:58 <Cale> huh, there's some interesting jankiness zooming out
22:56:08 <iqubic> Why is that?
22:56:11 <Cale> I'm guessing GL weirdness
22:56:32 <iqubic> Is GL usually weird?
22:56:34 <Cale> The circle turns into an octagon once you're zoomed out a ways
22:56:45 <Cale> Yes.
22:57:10 <iqubic> Oh, that's odd.
22:57:52 <iqubic> So I loaded up the repl.
22:58:10 <Cale> Try main
22:58:15 <iqubic> Typed main, and that appears to be a Hello World program.
22:58:37 <Cale> Oh, did you copy over the code I put on lpaste?
22:58:47 <iqubic> No.
22:58:52 <iqubic> Should I do that.
22:58:57 <Cale> Yeah, give it a shot
22:59:00 <Cale> Just edit Main.hs
22:59:03 <Cale> and then :r in ghci
23:00:29 <iqubic> Looks like I now get an error.
23:00:36 <iqubic> *** Exception: user error (unknown GLUT entry glutInit)
23:00:46 <Cale> aha
23:00:55 <iqubic> Cale, I tried your code and it didn't work.
23:01:01 <Cale> You'll want to install freeglut3-dev
23:01:13 <iqubic> From hackage?
23:01:18 <Cale> Or whatever the equivalent package is in your linux distribution
23:01:29 <iqubic> Ah, from my package manager.
23:01:31 <Cale> yeah
23:01:33 <iqubic> Why is that needed>
23:01:35 <iqubic> ?
23:01:52 <tsahyt> I'm starting to think that Data.Constraint.Nat doesn't really work that well
23:02:00 <Cale> Because that's a C library which the libraries we're using involve a binding to
23:02:02 <tsahyt> this time I managed to just outright segfault after successful typechecking
23:02:21 <iqubic> Ah
23:02:41 <iqubic> Do I need the latest version of freeglut?
23:02:51 <iqubic> I.E> 3-dev?
23:03:08 <Cale> Should be fine
23:03:12 <iqubic> Cool.
23:03:18 <iqubic> I'm just installing that now.
23:03:22 <ertes> are there any music composition libraries that still work?  i can't get Euterpea or haskore running
23:03:24 <Cale> That's just the development package for freeglut3
23:03:29 <iqubic> Let's see if this will work
23:03:32 <cocreature> tsahyt: if you are only interested in the .Nat part of constraints, https://hackage.haskell.org/package/ghc-typelits-natnormalise is probably a better choice
23:03:39 <tsahyt> this segfaults http://sprunge.us/ISQY?hs
23:04:00 <tsahyt> cocreature: yeah I've also tried with the typechecker plugins, and it works. although here I need the one to deduce KnownNat
23:04:21 <iqubic> Looks like that is working just fine.
23:04:32 <tsahyt> I wonder whether I should report that as a bug
23:04:33 <iqubic> I got the red circle to work for me.
23:04:37 <tsahyt> or whether it's my own ineptness causing it
23:04:40 <Cale> iqubic: cool
23:04:49 <tsahyt> but then again, a Haskell program shouldn't segfault after successful compilation
23:05:00 <iqubic> It really shouldn't
23:05:14 <Cale> tsahyt: It's probably a bug of some sort.
23:05:36 <Cale> tsahyt: But you might want to try simplifying things a bit and seeing whether you can still cause it
23:05:44 <iqubic> Question is, can I import gloss and JuicyPixel modules into my repl and look at the types of the functions and what not?
23:05:45 <Cale> tsahyt: TypeApplications are new -- maybe try not using them?
23:05:59 <tsahyt> hmm yeah I could try explicit signatures
23:06:31 <iqubic> What's the right way to stop main without killing my repl?
23:06:51 <iqubic> I just tried to close the window, and my repl closed down too.
23:06:58 <cocreature> I wouldn’t expect TypeApplications to result in runtime segfaults
23:07:09 <Cale> iqubic: Ah, dang, I forgot about that. That's just a general problem with OpenGL applications in GHCi.
23:07:14 <iqubic> Is it?
23:07:27 <iqubic> I'll just have to deal with that then.
23:07:31 <iqubic> Not too bad really.
23:07:38 <Cale> cocreature: Well, I wouldn't expect any of this stuff to result in runtime segfaults :P
23:07:59 <cocreature> Cale: constraints contains a sufficient amount of unsafeCoerce for that to happen :)
23:08:02 <tsahyt> nope, still crashes
23:08:14 <Cale> cocreature: ah, right, there's a bit of that
23:08:28 <tsahyt> in particular those KnownNat entailments all work using unsafeCoerce
23:09:10 <cocreature> tsahyt: I’ll see if I can reproduze the segfault using 8.2rc1. give me a minute
23:09:10 <tsahyt> i.e. plusNat and timesNat, which I'm using here
23:10:32 <tsahyt> The packages from the clash-lang people have most of what I need too. I can define the Divides constraint in terms of GCD.
23:11:15 <iqubic> Where does stack put my compiled code?
23:11:26 <Cale> iqubic: It should tell you when it builds
23:11:33 <iqubic> How do I run my code once I have compiled it?
23:11:58 <tsahyt> iqubic: stack exec <executable-name>
23:12:05 <iqubic> So it doesn't put it in that folder?
23:12:07 <Cale> ah, right
23:12:18 <Cale> and it does put it somewhere relative to the project root
23:12:29 <Cale> I got  mandelbrot/.stack-work/install/x86_64-linux/lts-8.8/8.0.2/bin/mandelbrot-exe
23:12:42 <jle`> if you do 'stack install', then it'll install it in your home directory too so you can use it in other contexts
23:12:57 <iqubic> Yeah, that's where it put it for me too.
23:12:59 <jle`> *somewhere in your home directory
23:13:09 <tsahyt> jle`: ~/.local/bin, at least by default
23:13:17 <iqubic> Just want to know, so I can add that folder to my .gitignore.
23:13:21 <cocreature> tsahyt: well now I’m confused. I inlined the necessary definitions http://sprunge.us/efBU?hs because I don’t have a good setup for using external packages outside of creating a cabal project with 8.2rc1 but the segfault is gone now even with 8.0.2
23:13:29 <iqubic> Or does git already ignore dot files?
23:13:32 <jle`> iqubic: i just have .stack-work in my gitignore
23:13:38 <jle`> git does not ignore dot files
23:13:47 <tsahyt> cocreature: and it does output Just Foo?
23:13:51 <cocreature> tsahyt: yep
23:13:56 <iqubic> Alright then, I'll add it to my .gitignore
23:14:01 <tsahyt> this is very strange
23:14:17 <jchia_1> Is there a more succint way to define gg, perhaps using some variant of traverse_ that takes one more argument?
23:14:17 <jchia_1> gg :: (Text -> Text -> IO ()) -> [Text] -> [Text] -> IO()
23:14:17 <jchia_1> gg f x y = sequence_ $ liftA2 f x y
23:15:04 <cocreature> :t zipWithM_
23:15:05 <lambdabot> Applicative m => (a -> b -> m c) -> [a] -> [b] -> m ()
23:15:10 <cocreature> ^ jchia_1 
23:15:14 <jle`> slightly different
23:15:21 <jle`> liftA2 applies the function over every combination
23:15:42 <cocreature> oh right.
23:15:45 <jle`> zipWithM "zips" the lists
23:15:58 <cocreature> I was only looking at the types :)
23:16:04 <jchia_1> cocreature: cocreature: I don't think zipWithM gives a cartesian product.
23:16:06 <jle`> fair enough. ship it
23:16:21 <jle`> to be honest, gg right now looks pretty succinct already
23:16:33 <Cale> jchia: I wouldn't bother trying to make that any more succinct, yeah
23:16:54 <cocreature> maybe make the type signature more general
23:17:03 <jchia_1> jle`: I just want to know whether there's a standard function I can use to replace sequence_ & liftA2
23:17:21 <jchia_1> I suppose if there isn't I'll just use the current definition.
23:17:30 <iqubic> What should I put in my git ignore? Just .stack-work?
23:17:46 <jle`> just .stack-work should be ok, if you're using stack
23:17:53 <jle`> and any other project-specific stuff
23:18:07 <jle`> like if you had your secret mendelbrot-based bank credentials stored in the directory
23:18:11 <tsahyt> cocreature: I tried it and with the inlined definitions it works for me too
23:18:31 <cocreature> tsahyt: that’s going to make it hard to produce a self-contained example for a bugreport :)
23:18:35 <jle`> but just from stack alone, you only need to worry about .stack-work
23:18:51 <iqubic> Cool
23:19:06 <tsahyt> cocreature: Maybe it still breaks across a simple module barrier
23:21:50 <cocreature> tsahyt: nope
23:22:13 <tsahyt> so it only breaks when the definition comes from another package?
23:22:41 <cocreature> using the exact module structure used by constraints might be worth a try
23:22:45 <cocreature> but I’m too lazy for that :)
23:23:00 <tsahyt> I don't see how the module structure could possibly be the case
23:23:40 <iqubic> I just realized why Stack is considered to be a reproducible build environment.
23:23:59 <tsahyt> okay now I'm really confused
23:24:09 <tsahyt> so I tried this earlier with stack ghci and stack runghc in the global resolver
23:24:27 <tsahyt> and got segfaults in both cases. with the inlined definitions it works with runghc in the global resolver
23:24:33 <iqubic> Anyone can clone my git repo, and run "stack build" to build my project. All required libraries would be pulled in for them.
23:24:34 <tsahyt> in a separate stack project, it just works
23:24:48 <tsahyt> regardless of whether I inline or use constraints or have the definitions in a separate module
23:24:59 <iqubic> You can inline functions in Haskell?
23:25:13 <iqubic> What benefits does that give you?
23:25:29 <tsahyt> iqubic: yes, but here I just mean copy-pasting functions from a library in my file
23:25:45 <tsahyt> iqubic: actual inlining is at the very heart of GHCs optimizer.
23:26:03 <tsahyt> you can try and force it to inline something by using pragmas
23:26:51 <tsahyt> whether that's actually beneficial or not depends on the situation. there are plenty of examples where more optimizations can fire after inlining
23:27:26 <iqubic> So, now that I have to libraries installed, do they just live on my computer, or will stack have to fetch the libraries each time I run "stack build"
23:27:28 <tsahyt> in many cases it doesn't help nor harm, and in some cases you can end up with worse performance for some reason that I've never investigated
23:27:43 <iqubic> Rather, can I compile this program while offline?
23:27:52 <tsahyt> iqubic: as long as you use the same resolver, it does not refetch any packages
23:27:57 <iqubic> Good.
23:27:59 <tsahyt> it would fetch something if you added a dependency for example
23:28:14 <iqubic> And the pacages are saved on my computer, so I can compile offline?
23:28:22 <iqubic> *packages
23:28:26 <tsahyt> and if you change the resolver it may refetch a few things that have been updated, while using the existing ones for things that haven't
23:28:38 <tsahyt> yeah you can use it offline unless you do something that requires fetching more stuff
23:28:47 <iqubic> Cool that's wonderful.
23:29:11 <iqubic> I'm going to look into using gloss and JuicyPixels together now.
23:29:23 <iqubic> But before I go, what's a resolver?
23:29:43 <iqubic> Also, can I search hoogle for functions that come from libraries?
23:29:51 <tsahyt> the stackage snapshot
23:30:01 <tsahyt> e.g. the latest nightly, or lts-8.8, or whatever
23:30:18 <iqubic> Like can I search hoogle for the "play" function from gloss?
23:30:25 <tsahyt> you can use stack hoogle in your project directory to search through everything your stuff depends on
23:30:33 <cocreature> iqubic: http://hoogle.haskell.org/?hoogle=play%20package%3Agloss
23:30:47 <tsahyt> shameless plug https://github.com/tsahyt/hdocview
23:32:27 <iqubic> Looks like I need to generate a hoogle database for this project first.
23:32:40 <tsahyt> cocreature: I think I figured it out. my global stack resolver is still lts-8.5
23:32:57 <tsahyt> which apparently had a constraints version that suffered from a bug here. using lts-8.8 it works
23:33:53 <cocreature> ah ok
23:33:55 <iqubic> I think I'll stick to the command line interface. Though that hdocviewer looks wonderful.
23:34:44 <iqubic> tsahyt: Did you write hdocviewer in Haskell?
23:34:53 <tsahyt> yep
23:35:07 <iqubic> What did you use for GUI? GTK?
23:35:08 <tsahyt> it really just reuses hoogle underneath and provides a GUI on top
23:35:12 <tsahyt> gi-gtk
23:35:23 <tsahyt> everything tied together using reactive-banana
23:35:32 <tsahyt> and of course reusing hoogle for search underneath
23:35:40 <iqubic> What is reactive-banana?
23:35:59 <tsahyt> https://hackage.haskell.org/package/reactive-banana
23:36:44 <iqubic> Alright, I have seen the term thrown around a bunch of times, but I don't know what it means. What exactly is FRP?
23:36:56 <tsahyt> functional reactive programming
23:37:07 <tsahyt> and I'm not very good at explaining it I'm afraid
23:37:28 <iqubic> I know what it stands for, I have no Idea what it is.
23:38:23 <iqubic> Why do you have to Init nothing???
23:38:42 <iqubic> In main of hdocviewer.
23:38:46 <tsahyt> init is a gtk function
23:38:57 <tsahyt> I'm just initializing all the gtk stuff there
23:39:20 <tsahyt> and apparently init takes an optional parameter
23:39:20 <iqubic> You do know that the arrow is pointless on that line.
23:39:34 <iqubic> As you never actually use the return value.
23:39:43 <tsahyt> that's exactly why it's there
23:39:59 <tsahyt> you get a compiler warning for a discarded return value when compiling with -Wall
23:40:08 <tsahyt> I'm just discarding it explicitly
23:40:11 <iqubic> You do? why???
23:40:43 <tsahyt> well I discard it explicitly because I have acknowledged the warning and decided that I know what I'm doing. you get the warning because you might have forgotten about something.
23:40:43 <cocreature> because if there is a return value you might want to do something with it :)
23:41:46 <iqubic> cocreature: Isn't there always a return value? Isn't that one of the tennants of functional programming? 
23:42:00 <iqubic> Even putStrnLn has a return value: IO ()
23:42:20 <cocreature> iqubic: sure but () only has one value so you don’t gain any information by inspecting the return value
23:43:04 <iqubic> So compiling with -Wall won't see throwing away a value of IO () as an error?
23:43:11 <Cale> iqubic: Functional reactive programming is a way of writing interactive programs by describing things that change over time.
23:43:32 <iqubic> What the heck does that mean? Sounds complex as all heck.
23:43:35 <Cale> iqubic: In particular, there are two major concepts
23:44:31 <Cale> There are things which, whenever you care to look at them, will have some value. These are called behaviours, and there will typically be some type like Behaviour a for such a thing which has a value of type a at any moment.
23:44:53 <iqubic> So a text box has a behavior?
23:45:14 <rotaerk> text-contained-by-text-box is a behavior
23:45:14 <iqubic> because when ever you look at it there will always be some text in the text box
23:45:15 <Cale> For example, the current position of the mouse, the current hitpoints of a monster, the current location of the character in a game world, the current contents of a text box, the current time, the current scene being drawn on the screen, etc.
23:45:18 <Cale> Yeah
23:45:42 <iqubic> Alright, what's the other main concept?
23:45:50 <Cale> Then you have things which happen at certain moments in time, and have a value just at those moments.
23:45:59 <Cale> These are called events.
23:46:08 <tsahyt> e.g. a clicked event on a button
23:46:36 <iqubic> So an event is like clicking a button on screen, or pressing the spacebar.
23:46:43 <Cale> You'll have things like the sequence of mouse clicks, the sequence of attacks made by a monster, the sequence of sound clips to be played, the sequence of keystrokes typed by a user, the sequence of edits made to a textbox
23:46:44 <iqubic> How do you translate that to code?
23:46:59 <iqubic> Or there FRP libraries?
23:47:01 <Cale> The sequence of requests made to a network server, and the sequence of responses coming back :)
23:47:15 <iqubic> Is see.
23:47:21 <iqubic> *I
23:47:24 <tsahyt> iqubic: yes, reactive-banana is one of them. there's also reflex which is quite popular nowadays.
23:47:41 <tsahyt> and a plethora of other libraries as well, but those are the two that see the most use today
23:47:41 <Cale> I actually do my work in reflex :)
23:48:01 <tsahyt> Cale: is there a good write up on the design of reflex that does not go into reflex-dom?
23:48:02 <iqubic> How does reflex work?
23:48:14 <Cale> So, FRP libraries typically will implement some Behavior and Event types and then a bunch of operations for combining events and behaviours to form additional events and behaviours
23:48:41 <iqubic> And you have to define your own behaviors, right?
23:49:23 <Cale> Well, you might get them from some library you're using
23:50:18 <iqubic> And I assume you can compose behaviors yourself if you want.
23:50:22 <Cale> Another way to characterise events and behaviours is that events are sort of like "push" notifications -- something which receives an Event can compute some stuff based on it every time that it occurs.
23:50:30 <tsahyt> you can also define a behavior in terms of events. for example you have a mouse click event carrying coordinates where the click was made. then you can define a behavior that "holds" the last pair of coordinates
23:50:49 <Cale> while behaviours are "pull" -- you're never notified when a behaviour updates, and so it may be updated continuously
23:50:57 <iqubic> Cool.
23:51:10 <iqubic> I'll look into this stuff later.
23:51:13 <Cale> but at any moment when an event is occurring, you can observe the present values of the behaviours
23:51:24 <tsahyt> Cale: well, reactive-banana allows you to listen in on a behavior and get a change event in return
23:51:35 <tsahyt> but that uses future values
23:51:57 <Cale> tsahyt: That's fairly naughty of it ;)
23:52:31 <iqubic> Well, time to learn more about Gloss and JuicyPixels
23:52:45 <Cale> The fact that you can't necessarily be informed when a behaviour is updating is actually a bit key to designing FRP systems which interact in a way that will perform well.
23:52:50 <tsahyt> I should really look more into reflex. I've just stuck to r-b for my FRP needs so far, because I'm still staying as far away as possible from web programming.
23:53:15 <tsahyt> and it seems like there are mostly web things related to reflex
23:53:19 <Cale> Behaviours can be used to safely allow a high-frequency part of the system communicate with a part of the system which must run at a lower frequency
23:53:37 <tsahyt> hmm why do I get a PM from twistedbot every time I mention web things
23:53:46 <Cale> without worry about whether you'll accidentally cause lots of additional updates
23:54:07 <Cale> For example, perhaps one part of your system deals with processing audio and has an event firing at 44kHz
23:54:21 <tsahyt> hmm I see
23:54:29 <Cale> and then you have a part responsible for rendering graphics running at 60Hz
23:55:11 <tsahyt> I've actually tried doing audio with FRP and JACK and found the performance to be rather appalling
23:55:17 <tsahyt> both with r-b and wires
23:55:38 <tsahyt> triggering events at this sort of rate was just eating away at the CPU like nothing
23:55:55 <Cale> I believe it was imalsogreg who managed to get some audio processing going in reflex.
23:56:31 <tsahyt> I ended up foregoing the FRP abstraction for the actual sample generation and introduced a new type for it
23:56:57 <Cale> Is hallowed a bot?
23:57:05 <tsahyt> I think it is
23:57:11 --- mode: ChanServ set +o Cale
23:57:12 <tsahyt> so I'm not the only one getting PMs all the time?
23:57:21 --- mode: Cale set +b *!*hallowed@116.87.72.108
23:57:21 --- kick: hallowed was kicked by Cale (hallowed)
23:57:44 <Cale> actually, maybe should have picked a different option there for the mask
23:57:47 <ski> same IP
23:57:50 <Cale> yeah
23:58:05 <ski> (also same as another nick)
23:58:18 --- mode: Cale set +b *!*@116.87.72.108
23:58:33 --- mode: Cale set -b *!*hallowed@116.87.72.108
23:58:43 <MarcelineVQ> getting calls from an cute robut?
23:58:49 <Cale> bntr: okay
23:58:53 --- mode: Cale set -b *!*@116.87.72.108
23:58:58 --- mode: Cale set -o Cale
23:59:10 <tsahyt> Cale: I should say it was running, but it wasn't performing as well as I hoped. some very simple oscillators already took up about 30% of one core.
23:59:28 <Cale> tsahyt: ah, okay
23:59:43 <tsahyt> Cale: it was likely also a problem because of the context switching between the FRP thread and the JACK thread.
