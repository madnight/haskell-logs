00:00:50 <biglambda> Essentially the program reads the output from otool and copies the needed libraries into a mac-osx  application bundle.
00:02:00 <nshepper1> A nice thing about lens is that the types are mostly type synonyms to common things, so you can provide lenses in your package without depending on lens
00:02:26 <biglambda> It looks like the command line tool it’s spawning is returning a path like @rpath/libcsfml-system.2.4.dylib and it needs to be /usr/local/lib/libcsfml-window.2.4.dylib
00:03:16 <biglambda> so I need to replace @rpath with /usr/local/lib/
00:04:15 <geekosaur> uh, why are you doing this?
00:04:25 <biglambda> https://github.com/danfran/cabal-macosx/blob/master/Distribution/MacOSX/Dependencies.hs#L153
00:04:26 <geekosaur> it's doing what building an app bundle is supposed to do
00:05:10 <biglambda> I need to build a mac app bundle that includes the SFML library.
00:05:35 <geekosaur> then you want @rpath and to copy those dylibs into the appropriate directory of the app bundle
00:05:45 <geekosaur> that's the *point* of app bundles
00:06:08 <biglambda> Yeah cabal-macosx is failing on the @rpath symbol
00:06:11 <biglambda> it’s expecting a vanilla path
00:08:21 <geekosaur> hm. it should really be taught to process @rpath, then
00:10:27 <biglambda> I see, maybe I need to find an option in the source command to just expand those out.
00:10:27 <geekosaur> which means using otool to dump the rpaths and then expanding @rpath by trying each rpath entry until it finds the library
00:10:47 <biglambda> Yeah, I need to figure out the otool options...
00:11:57 <geekosaur> otool -l and look for lines containing RPATH
00:13:12 <geekosaur> http://stackoverflow.com/questions/12521802/print-rpath-of-executable-on-osx
00:13:41 <geekosaur> sorry, I have to dig on the web for this, my mac is sitting in a corner disconnected
00:18:29 <biglambda> Yeah I put a little putStrLn in to see what otool was returning it’s here https://pastebin.com/b5ggyWSj
00:18:36 <geekosaur> oh, also note it needs to collect the LC_RPATH entries from the original executable as well
00:20:10 <biglambda> Sorry it’s this pass: https://pastebin.com/bXFUENaD
00:20:21 <geekosaur> and whatever libraries it traversed to find that dependency
00:21:58 <biglambda> This is a bit over my head. I basically was trying to see if SFML was going to work better than SDL for my needs so a “works on my computer” hack might suffice.
01:15:50 <phz^revision> hey
01:15:59 <phz^revision> I’m having a very weird error with servant and DataKinds
01:16:37 <phz^revision> https://gist.github.com/phaazon/3343796d250b9fb6cc432fa33770a7b9
01:16:38 <phz^revision> any idea?
01:17:38 <cocreature> phz^revision: have you enabled DataKinds?
01:17:42 <phz^revision> ye
01:17:43 <phz^revision> yes
01:17:51 <cocreature> also can you show us the full error?
01:17:53 <phz^revision> maybe the problem is that unit cannot be transformes to PlainText?
01:17:57 <phz^revision> cocreature: it’s the full error
01:18:14 <cocreature> no it isn’t. ghc will at least include line numbers and things like that
01:19:10 <cocreature> maybe try '['PlainText]
01:19:17 <phz^revision> that’s what I tried
01:19:59 <pavonia> Does that ' lift values or types? Because that module doesn't export a data constructor named PlainText
01:20:11 <phz^revision> it lifts ctors
01:20:19 <phz^revision> pavonia: it does
01:20:25 <phz^revision> from Servant.API.ContentTypes
01:20:39 <cocreature> it doesn’t. it exports a type PlainText not a constructor
01:20:41 <cocreature> remove the '
01:20:51 <cocreature> and add it in front of []
01:20:58 <phz^revision> ah you’re right!
01:22:23 <phz^revision> cocreature: it works, thanks
01:22:49 <phz^revision> so there’s no instance for MimeUnrender * PlainText ()
01:22:51 <phz^revision> that’s weird
01:23:58 <cocreature> what would you use that instance for? just throwing away the mimetype doesn’t seem particularly useful
01:24:08 <phz^revision> cocreature: health checking in my case
01:24:20 <phz^revision> it’d be isomorphic to String and pure ""
01:24:22 <phz^revision> :)
01:24:27 <phz^revision> (empty body in the response)
01:25:25 <cocreature> just use the String or the Text instance?
01:26:00 <dysfun> what does ~ mean in a type signature?
01:26:21 <liste> dysfun: type equality
01:26:33 <dysfun> so a ~ Bool = a must be a bool?
01:26:37 <liste> yes
01:26:50 <dysfun> okay. this is because you can't put concrete types in some places?
01:27:16 <cocreature> it’s also used internally for things like GADTs
01:27:37 <quchen> instance (a ~ String) => IsString (IO a) where fromString = putStrLn :-)
01:27:54 <quchen> main = "hello world"
01:28:11 <dysfun> in particular http://hackage.haskell.org/package/megaparsec-5.2.0/docs/Text-Megaparsec.html#v:string-39- it is requiring the stream be of chars but it can't directly say so?
01:28:17 <dysfun> (without the ~)
01:28:44 <liste> dysfun: it requires Token s to be Char
01:29:07 <liste> so yes
01:29:34 <dysfun> right, i thought so
01:29:48 <dysfun> http://hackage.haskell.org/package/megaparsec-5.2.0/docs/Text-Megaparsec-Prim.html#t:Token # here is where Token is defined
01:30:18 <liste> yes, it's the associated type of a type family
01:30:24 <dysfun> aha
01:31:42 <dysfun> so i have been attempting to follow the directions at the top of http://hackage.haskell.org/package/megaparsec-5.2.0/docs/Text-Megaparsec.html in order to use megaparsec over a list (i learned yesterday parsec can do this, but my other parser is written in megaparsec)
01:33:00 <dysfun> so i copied the example they gave in the docs for 'token' and then removed the Char constraint and replaced it with some other type
01:33:28 <dysfun> but now the problem is that it wants a Token A -> Bool, not an A -> Bool which is what i have.
01:33:38 <dysfun> and i don't know how to do that
01:36:22 <dysfun> so how do i use this Token type to adapt my other function?
01:37:00 <phz^revision> hey, I’d like to be able to either return HTTP 200 or HTTP 202
01:37:05 <phz^revision> (in servant)
01:37:15 <phz^revision> I wonder how it works in terms of types
01:37:27 <phz^revision> :> Get '[PlainText] String
01:37:41 <phz^revision> :> (Get '[PlainText] String :<|> GetAccepted '[PlainText] String)
01:37:43 <phz^revision> something like that?
01:38:23 <opqdonut> I don't think the return codes are reflected in the types?
01:39:01 <phz^revision> they are
01:39:11 <phz^revision> https://hackage.haskell.org/package/servant-0.10/docs/src/Servant-API-Verbs.html#Get
01:39:36 <opqdonut> oh, indeed
01:39:52 <phz^revision> alpounet: get here! :D
01:40:06 <opqdonut> I don't think "Get '[PlainText] String :<|> GetAccepted '[PlainText] String" would work. You would need to define two handlers for that
01:40:08 <phz^revision> the return code depends upon an IO action
01:40:14 <opqdonut> instead of one that can return either
01:40:19 <phz^revision> ah
01:40:28 <phz^revision> well, two handlers pointing to the same endpoint?
01:40:55 <phz^revision> "a" :> Get '[PlainText] String :<|> "a" :> GetAccepted '[PlainText] String
01:41:00 <phz^revision> seems weird
01:42:08 <phz^revision> so, is there a way to make a handler “skip” so that the next one is tested?
02:00:24 <getost> Does anyone know where I can get 'Haskell Programming From First Principles' for free?
02:00:48 <dysfun> no
02:01:01 <frantelle> jle`: you still around?
02:01:47 <getost> Does anyone have a copy of haskellbook.com?
02:02:09 <dysfun> this isn't a place to ask for warez
02:02:37 <getost> warez
02:02:45 <getost> Where is ware?
02:02:50 <peddie> getost: if you really honestly can't afford the sticker price, try emailing the authors; I think they've given case-by-case discounts in the past
02:41:43 <vikumar> hi there!
02:42:21 <vikumar> I'm new to Haskell (just managed to understand monads) and I was a bit confused about monad transformers
02:42:36 <vikumar> Could any one recommend a good resource?
02:43:00 <vikumar> The few things I've pulled up on google haven't really made sense to me.
02:51:25 <vaibhavsagar> vikumar: #haskell-beginners is a good channel to join
02:51:41 <vikumar> sweet!
02:52:04 <vikumar> will ask the question there.
02:52:23 <vikumar> \join #haskell-beginners
02:52:33 <vaibhavsagar> ahahaha
02:52:59 <vikumar> wrong window
02:53:01 <vikumar> woops
03:09:59 <mathk> @pl f n (g n)
03:09:59 <lambdabot> f n (g n)
03:10:28 <mathk> @pl f n n
03:10:28 <lambdabot> f n n
03:11:39 <ski> @pointless \n -> f n (g n)
03:11:40 <lambdabot> ap f g
03:12:21 <mathk> :)
03:14:32 <mathk> @pl \n -> f (g n) n
03:14:32 <lambdabot> f =<< g
03:18:54 <jeauxlb> join #mutt
03:55:22 <spatial> lpaste.net/354703 should state be managed only like this ? What about returning this value from a function instead ?
03:56:16 <cocreature> :t modify -- spatial: you might want to use that instead
03:56:18 <lambdabot> MonadState s m => (s -> s) -> m ()
03:56:32 <cocreature> at least for store
03:57:00 <cocreature> and maybe "gets" for the second function
03:57:40 <spatial> Didn'the get it.
03:57:57 <cocreature> @src modify
03:57:58 <lambdabot> Source not found. It can only be attributed to human error.
03:58:38 <cocreature> spatial: store x value = modify (Map.insert x value)
03:59:06 <cocreature> retrieve karmbandit = gets (Map.lookup karmbandit)
04:02:11 <spatial__> I didn't get that.
04:04:34 <spatial__> Using mobile as proxy stops orc.
04:56:24 <tibbe> Could someone help me with a type families + type class instance type error: http://lpaste.net/354706
04:57:19 <tibbe> Basically I have a Show-like class and when I write an instance: instance Pretty (Component l) => Pretty (WholeThing l) where
04:57:26 <tibbe> I get ambiguity on the `l`
04:57:35 <tibbe> probably something about injective type families
04:59:04 <cocreature> tibbe: what’s the type of ppr?
04:59:59 <tibbe> cocreature, it's `a -> Doc` from http://hackage.haskell.org/package/mainland-pretty-0.5.0.0/docs/Text-PrettyPrint-Mainland.html
05:01:04 <cocreature> tibbe: alright, so the problem is that in "IntTy b" has type "PrimType l" but GHC doesn’t know which l you want (any would work)
05:01:24 <tibbe> cocreature, how can I say "same l as the other one"
05:01:37 <cocreature> tibbe: add a type signature and use ScopedTypeVariables
05:02:14 <cocreature> asTypeOf should also work
05:02:34 <tibbe>     ppr (LitInt n b) = integer (fromIntegral n) <> ppr (IntTy b :: PrimType l)
05:02:37 <tibbe> still the same error
05:03:00 <tibbe> instance forall l. Pretty (Type l) => Pretty (PrimLit l) where
05:03:00 <tibbe>     ppr (LitInt n b) = integer (fromIntegral n) <> ppr (IntTy b :: PrimType l)
05:03:13 <tibbe> cocreature, ^^
05:03:29 <quchen> o/ Tibbe
05:03:49 <tibbe> :)
05:03:51 <quchen> Nice to see you around! It’s been almost years ;-)
05:03:56 <tibbe> i know
05:03:58 <tibbe> i took a break
05:04:04 <quchen> I know
05:04:16 <quchen> Take a break from the break and come to ZuriHac :-)
05:04:24 <tibbe> I live in Sydney now
05:04:44 <tibbe> cocreature, any idea?
05:04:44 <quchen> Ooohh. Guess not then.
05:05:02 <tibbe> cocreature, it worked for the Pretty instance for Type l itself, which was recursive in the same manner
05:05:03 <cocreature> tibbe: have you enabled ScopedTypeVariables? also try removing the forall, it should not be necessary for class instances afaik
05:05:59 <tibbe> cocreature, that worked, I guess i thought RankNTypes brought in the scoping
05:06:03 <tibbe> through the forall
05:14:10 <joncfoo> If I have N streams that produce data continuously at varying intervals, and I want to trigger an action when data is available from all the streams at any interval, what data structures and libraries should I look into?
05:19:34 <joncfoo> I think what I'm looking for is to be able to zip the values of the streams but to allow the faster ones to push through instead of accumulating and building up a backlog/buffer
05:21:11 <AfC> stupid question, but I've been out of the game for a while. Is there anything you need to do to force (or suppress) criterion from running benchmarks multithreaded?
06:03:17 <quchen> AfC: You mean non-concurrently?
06:03:39 <quchen> No multithreading can easily be achieved by running with +RTS -N1, giving GHC only one capability to run things on. 
06:03:48 <quchen> It will still schedule them for apparent concurrency though.
06:04:50 <quchen> Or you could link it without -threaded.
06:04:56 <quchen> But then you’d still get scheduling and what not
06:14:20 <phz_> anyone knows about a filterM for Traversable?
06:14:22 <phz_> (Applicative f, Traversable t) => (a -> f Bool) -> t a -> f (t a)
06:27:07 <glguy> phz_: can't exist
06:27:33 <phz_> yeah I came to the same conclusion actually
06:27:49 <glguy> https://hackage.haskell.org/package
06:27:51 <phz_> Traversable can’t be “filtered”
06:28:09 <glguy> https://hackage.haskell.org/package/witherable
06:28:22 <glguy> that's related
06:28:27 <phz_> hoho
06:29:09 <phz_> thanks
06:38:10 <AfC> quchen: I was more asking whether I *should* be (attempting) to give a criterion benchmark lots of capabilities, or rigourously doing the tricks to ensure it's only got one. [I usually turn -threading on as a matter of course]
06:42:02 <hoppfull> Hello, I'm having problems with generics. I'm trying to define a union type like this: "data Shape = Line Floating | Rectangle Floating Floating" but I can't seem to get it to work
06:42:28 <ski> `Floating' is not a type. it's a type class
06:42:31 <hoppfull> "data Shape Floating a => a = Line a | Rectangle a" doesn't work
06:42:37 <ski> did you mean `Float' ?
06:42:50 <Iceland_jack> hoppfull: Just define it "data Shape a = Line a | Rectangle a a"
06:43:10 <ski> you could do `data Shape a = Line a | Rectangle a a', then add `Floating a' as a constraint to operations using `Shape a'
06:43:22 <hoppfull> Iceland_jack: But then someone would be able to use any type, right?
06:43:45 <Iceland_jack> hoppfull: yes, and that's fine. the operations that require a Floating constraint will have a Floating constraint
06:43:59 <ski> if your operation requires `Floating a', then a user of that operation has to satisfy that constraint
06:44:52 <hoppfull> Iceland_jack: I guess that makes sense.
06:44:57 <hoppfull> Thanks guys!
06:45:06 <Iceland_jack> hoppfull: This may feel counterintuitive, but in Haskell you might define a 2D vector as "data V2 a = V2 a a"
06:45:50 * ski hoppas det hjälper
06:46:36 <Iceland_jack> Then if you define a function that requires the (a)s to be numbers (like cross product), you add a (Num a) constraint
06:46:37 <hoppfull> ski: Jag är hoppfull iallafall
06:46:53 <Iceland_jack> crossZ :: Num a => V2 a -> V2 a -> a
06:46:53 <Iceland_jack> crossZ :: Num a => V2 a -> V2 a -> a
06:46:54 <Iceland_jack> crossZ :: Num a => V2 a -> V2 a -> a
06:46:54 <Iceland_jack> crossZ (V2 x1 y1) (V2 x2 y2) = x1*y2 - y1*x2
06:47:02 <Iceland_jack> Sorry for the repeated type
06:47:11 * ski looks at Sigyn
06:47:13 <Iceland_jack> I mean..... repeated for emphasis!
06:47:18 <hoppfull> Iceland_jack: Yeah, makes sense.
06:47:38 <hoppfull> : )
06:47:53 <Iceland_jack> hoppfull: This allows you to make your types instances of Functor (Foldable, Traversable, ...) if you are familiar with those
06:48:31 <Iceland_jack> data V2 a = V2 a a deriving (Functor, Foldable, Traversable) and you get all sorts of functions for **free**
06:48:47 <Iceland_jack> Functions you couldn't get for free if it had constraints
06:48:53 <ski> > length (2,5)
06:48:56 <lambdabot>  1
06:48:59 <hoppfull> Iceland_jack: Interesting
06:49:01 <Iceland_jack> food for thought if you like free things
06:49:13 <Iceland_jack> sum (V2 a b) = a + b
06:50:46 <hoppfull> Can you do this: "(+) v1 v2 = V2 (a v1 + a v2) (b v1 + b v2)"?
06:51:22 <hoppfull> I mean, can you define + to work with other types than num?
06:51:48 <Iceland_jack> hoppfull: You can *define* V2 to be num
06:51:59 <Iceland_jack> See: https://hackage.haskell.org/package/linear-1.20.5/docs/src/Linear.V2.html#line-166
06:52:31 * ski . o O ( "declare" )
06:52:38 <Iceland_jack> instance Num a => Num (V2 a) where V2 a b + V2 a' b' = V2 (a + a') (b + b')
06:53:37 <hoppfull> Interesting
06:53:44 <hoppfull> Alright, thanks guys!
06:55:14 <ski> `Num' includes other operations as well, of course, that you'd presumably want defined
06:55:50 <bennofs> Is there any way to have pkg-config dependencies in cabal files while falling back to some hardcoded values if pkg-config is not available?
06:55:54 * Iceland_jack has discovered a truly marvelous instance of Num, which this IRC is too narrow to contain
06:58:43 <hvr> bennofs: what kind of hardocded value?
06:59:08 <TheQuietCoder> Hieveryone newbie here
06:59:16 <bennofs> hvr: something like extra-libraries. https://github.com/ivanperez-keera/hcwiid/pull/4 is an example
06:59:37 <hvr> bennofs: do you really mean if pkg-config(1) is missing,
06:59:47 <bennofs> hvr: oh, right
06:59:58 <hvr> or rather if pkg-config doesn't know about the specified dep?
06:59:59 <Iceland_jack> Hey TheQuietCoder
07:00:09 <Iceland_jack> Are you here via ssh? :)
07:00:16 <bennofs> hvr: would be nice if it worked in both cases
07:00:34 <hvr> bennofs: well, you can have cabal fallback to extra-libraries if pkg-depends cannot be satisfied
07:01:00 <hvr> bennofs: but the trouble is that it doesn't allow the cabal solver to fail
07:01:22 <bennofs> hvr: ah. is there a way to have a fallback if pkg-config is not available at all?
07:01:23 <hvr> extra-libraries is checked long after the solver has run
07:02:18 <hvr> bennofs: I'm not sure, but I'm afraid you can't check for the presence of pkg-config(1)
07:02:27 <hvr> (at solver time)
07:02:48 <bennofs> hvr: the fallback to extra-libraries if pkg-depends cannot be found is automatic, right?
07:03:18 <hvr> bennofs: I don't think so... how should cabal know that you want either/or rather than 'and'?
07:03:19 <bennofs> hvr: I don't need this at solver time, I only want to be able to configure the package and not fail with "The program 'pkg-config' version >=0.9.0 is required but it could not
07:03:21 <bennofs> be found."
07:03:42 <bennofs> hvr: how does this fallback work then?
07:03:55 <hvr> via automatic cabal flags, just as it works for every other dependency
07:04:08 <TheQuietCoder> I have a very simple question, can someone breakdown for a function def that I can get my head around?
07:04:22 <hvr> but it's slightly fragile, as there's no guarantee that there's enough pressure for the solver to prefer the pkg-config dependency
07:04:35 <TheQuietCoder> -- 4.Using foldl, define a function dec2int :: [Int] -> Int
07:04:35 <TheQuietCoder>  --   define a function dec2int that converts a decimal to an integer.
07:04:35 <TheQuietCoder>     dec2int :: [Int] -> Int
07:04:35 <TheQuietCoder>     dec2int = foldl (\x y -> 10*x + y) 0
07:04:35 <TheQuietCoder> --
07:04:36 <TheQuietCoder> -- > dec2int [1,2,3]
07:04:38 <TheQuietCoder> -- > 123
07:04:56 <bennofs> hvr: if it defaults to True, it should try the flag first no?
07:05:08 <cocreature> TheQuietCoder: are you familiar with what foldl does?
07:05:15 <TheQuietCoder> yup
07:05:35 <hvr> bennofs: in theory yes, but strictly speaking the solver has no obligation to honor it (it currently does so -- but a different impl may not)
07:05:37 <cocreature> TheQuietCoder: cool, so let’s start with the basecase, what should "dec2int []" return
07:05:58 <hvr> bennofs: I'm just pointing it out... as it may break at some point in the future :-)
07:06:09 <bennofs> hvr: everyone relies on that one though :)
07:06:14 <TheQuietCoder>  [] 
07:06:21 <hvr> bennofs: that's a bad assumption then :-)
07:06:42 <cocreature> TheQuietCoder: no, your type signature says that it should return an Int. [] is not an Int. which Int should it return?
07:07:10 <TheQuietCoder> ok
07:07:22 <TheQuietCoder> sorry.
07:07:31 <bennofs> hvr: hmm, i find it slightly surprising that cabal checks for pkg-config-deps during solving but not if pkg-config is available at all? How does that make sense? o.o
07:07:34 <TheQuietCoder> 0
07:07:34 <hvr> bennofs: ideally, each branch in an automatic-flag conditional should have mutually exclusive conditions
07:08:04 <cocreature> TheQuietCoder: exactly! that’s the 0 you see in "dec2int = foldl … 0"
07:08:09 <hvr> bennofs: I need to check the code tbh... but even if it did; what difference would it make? :)
07:08:25 <bennofs> hvr: then I could use an automatic flag ?
07:08:45 <hvr> if pkg-config is missing, all pkg-config deps would autoamtically fail
07:08:59 <hvr> i.e. be unsatisfiable
07:09:02 <bennofs> hvr: then the flag would be set to false and cabal configure should success
07:09:11 <hvr> yes
07:09:16 <bennofs> hvr: but that's not what happens
07:09:17 <hvr> but you have no version checking
07:09:27 <hvr> it doesn't?
07:09:39 <kosmikus> bennofs: the solver doesn't have a good and precise semantics for "soft" preferences. at the moment, defaults are tried first *when the solver tries to solver for this flag*, but the order in which the solver tries to solve goals may influence whether that choice succeeds or fails in practice.
07:09:54 * shapr hugs kosmikus
07:10:14 <kosmikus> shapr!
07:10:19 * hvr realise that he should be careful what he claims about the solver... otherwise kosmikus will be summoned
07:10:20 <shapr> long time no see!
07:10:26 <bennofs> hvr: i believe I tried this. I put pkgconfig-depends behind an if-conditional based on an automatic flag (Manual: false) and cabal configure still failed if pkg-config (the command) could not be found
07:10:41 <cocreature> TheQuietCoder: so let’s say you know the value of dec2int xs, let’s call that "x" and you are given an integer y and you want to know the value of "dec2int (xs ++ [y])". how can you combine "x" and "y" to get that?
07:10:43 <hvr> bennofs: could be... tbh, I don't have a system w/o pkg-config...
07:10:54 <hvr> so I never really had that situation
07:11:08 <bennofs> hvr: I uninstalled it to test :)
07:11:11 <kosmikus> bennofs: I'm not sure about the absence of pkg-config. It's entirely possible the solver could behave better in such a scenario.
07:11:29 <TheQuietCoder> x is bening the head right?
07:11:55 <TheQuietCoder> the problem i dont where the y comes from
07:11:57 <TheQuietCoder> :)
07:11:59 <cocreature> “bening”?
07:12:08 <cocreature> x = dec2int xs
07:12:35 <TheQuietCoder> keep on going
07:13:07 <cocreature> you’re supposed to tell me how you can combine x and y to get the value of "dec2int (xs ++ [y])" :)
07:13:17 <bennofs> hvr, kosmikus: https://hastebin.com/yosepadoto.cabal and cabal configure errors with "pkg-config could not be found"
07:13:39 <bennofs> hvr, kosmikus: and flags chosen is no-pkgconfig=False
07:14:13 <kosmikus> bennofs: I don't think cabal configure uses the solver.
07:14:32 <TheQuietCoder> I understand the principle at work behing foldly its just in this instance Idon seem to get how decimal notation principle is used to turn [1,2,3] into 123
07:14:38 <bennofs> kosmikus: how does it resolve flags then?
07:14:39 <TheQuietCoder> sorry
07:15:07 <kosmikus> bennofs: in some ad-hoc way.
07:15:31 <ski> > 1 * 10^2 + 2 * 10^1 + 3 ^ 10^0
07:15:33 <lambdabot>  123
07:15:37 <TheQuietCoder> yes throught the ++ operator
07:15:46 <bennofs> kosmikus: wait, so the flag assignment chosen by cabal configure and cabal install may be different? o.o
07:15:49 <kosmikus> bennofs: but it's possible it uses the solver these days.
07:15:49 <cocreature> that’s not ++, that’s + and *
07:15:52 <hvr> bennofs: how can I download the raw version of that .cabal file?
07:16:17 <ski> > 1 + 10 * (2 + 10 * (3 + 10 * 0))
07:16:19 <lambdabot>  321
07:16:24 <bennofs> hvr: curl http://ix.io/r2Y
07:16:27 <hvr> bennofs: nevermind, got it... https://hastebin.com/raw/yosepadoto
07:16:55 <bennofs> ah, I haven't used hastebin much 
07:18:03 <hsk3> Why is Stack aware of Docker? I was expecting it to be unaware of Docker - that it would be just a program that we happen to be running inside of a Docker image. Instead, it turns out Stack even has its own docker command ("stack docker ..."). Why did Stack choose to do this extra coupling?
07:18:12 <TheQuietCoder> lambadot, ski: I got it, base 10 notation it is just i couldnt see it in the syntax of the fun def
07:18:38 <hvr> bennofs: fwiw, new-build does the right thing here
07:18:41 <TheQuietCoder> the variable y being the next iteratiuon?
07:19:04 <hvr> bennofs: so kosmikus' comment seems to apply that the old 'configure' doesn't use the full solver
07:19:21 <bennofs> hvr: hmm, so if I had another package depend on hcwiid, then it would work? that's *really* surprising!
07:20:03 * hvr doesn't disagree... but points out that w/ cabal new-build it's more consistent
07:20:37 <bennofs> hvr: even with cabal new-build I get an error when I actually run it (new-configure does not error though)
07:20:51 * hvr tries again locally
07:21:05 <ski> > snd (foldr (\d (i,n) -> (i+1,d * 10^i + n)) (0,0) [9,4,5])
07:21:07 <lambdabot>  945
07:21:33 <kosmikus> bennofs, hvr: I've just looked into the sources. If pkg-config is not present, then the solver currently assumes that all libraries are available.
07:21:36 <TheQuietCoder> thx ski now I can PICTURE it
07:21:42 <maerwald> hsk3: it does a lot of weird things
07:21:55 <ski> TheQuietCoder : can you do it with `foldl' ?
07:21:55 * hvr gets Failed to query pkg-config, Cabal will continue without solving for pkg-config
07:21:57 <TheQuietCoder> thx komikus for your help!
07:22:27 <bennofs> hvr: what cabal version are you using?
07:22:30 <hvr> kosmikus: so it does fallback to extra-libs semantics?
07:22:44 <hvr> bennofs: cabal 2.1.x from Git
07:23:01 <kosmikus> hvr: what's extra-libs semantics?
07:23:14 <bennofs> hvr: oh, I was using 1.24.2 (Cabal) and 1.24.0.2 (cabal-install), so perhaps it changed since then
07:23:17 <hvr> kosmikus: extra-libraries: <name> 
07:23:32 <ski> oh, you already had a `foldl' version
07:23:39 <hvr> kosmikus: i.e. as you say, not solving, just assuming that you can pass -l<name> as linker option
07:23:43 <kosmikus> hvr: does the solver do anything with them?
07:23:52 <kosmikus> hvr: I don't think so.
07:24:04 <ski> > foldl (\n d -> d + 10 * n) 0 [9,4,5] :: Expr
07:24:06 <lambdabot>  5 + 10 * (4 + 10 * (9 + 10 * 0))
07:24:09 <kosmikus> hvr: so afaics, if pkg-config is not found, then no pkg-config database is passed to the solver.
07:24:13 <ski> > snd (foldr (\d (i,n) -> (i+1,d * 10^i + n)) (0,0) [9,4,5]) :: Expr
07:24:15 <lambdabot>  9 * (10 * 10) + (4 * 10 + (5 * 1 + 0))
07:24:21 <hvr> kosmikus: that's weird then... cause pkg-config provides us w/ C & linker flags
07:24:22 <kosmikus> hvr: and then the solver will just treat all pkg-config libraries as present.
07:24:43 <kosmikus> hvr: oh, but that's probably done post-solver.
07:25:01 <kosmikus> hvr: I mean, afaik, cabal had pkg-config support before the solver had any.
07:25:14 <TheQuietCoder> ski, lambdabot: thx i will now play around with this a bit...
07:25:37 <hvr> bennofs: ok, since I only got the .cabal file, I didn't actually try to build the package... I only solved for the .cabal file ....
07:26:30 <hvr> so there's a good chance it would fail lateron
07:26:41 <bennofs> hvr: how do I get new config to show me flag assignments?
07:26:53 <hvr> bennofs: look at dist-newstyle/cache/plan.json
07:26:59 <hvr> it contains all flag assignments
07:27:30 <hvr> (and this reminds me I wanted to get the pkg-config deps in there as well)
07:27:35 <bennofs> hvr: hmm,  "no-pkgconfig": false
07:27:39 <kosmikus> bennofs, hvr: anyway, what's the conjecture here. that the solver should consider all pkg-config library to be absent if pkg-config is missing/broken (rather than all of them to be present)?
07:28:01 <hvr> kosmikus: yes, IMO yes
07:28:12 <kosmikus> hvr: that sounds sane to me as well.
07:28:21 <maerwald> why?
07:28:31 <hvr> kosmikus: especially given pkg-config provides the required CFLAGS/LDFLAGS
07:28:44 <hvr> kosmikus: otherwise we'd have to guess those, which there isn't a good heuristic for IMHO
07:28:53 <maerwald> hvr: note that some distros create pkg-config files downstream where there is no actual pkg-config file upstream, which means there is no 100% consistent set of equal pkg-config files across distros
07:29:21 <kosmikus> maerwald: yes, exactly this is what I suppose may have been the reason for choosing the default as it is
07:29:37 <hvr> maerwald: sure, but pkgconfig provides essential meta-data we need
07:29:56 <maerwald> it isn't the only way though (see perl, python, sdl-config and so forth)
07:30:35 <kosmikus> I mean, from the solver perspective, it's rather simple to offer both behaviours (all pkg-config deps considered to be present, all pkg-config deps considered to be absent)
07:30:50 <kosmikus> but then there'd be a UI issue again as to how and when to choose what behaviour
07:31:08 <hvr> kosmikus: the point is: would the build have any chance to succceed w/o the needed meta-data?
07:31:29 <maerwald> often times yes
07:31:36 <hvr> maerwald: how does it work?
07:31:51 <hvr> do you have an example?
07:32:17 <maerwald> hvr: libpng 
07:32:34 <maerwald> there's no overly useful metadata there
07:32:49 <hvr> maerwald: the relevant meta-data is: -lpng12
07:32:58 <maerwald> just -lpng
07:33:11 <maerwald> which is easy to assume if pkg-config --libs libpng fails
07:33:27 <bennofs> hvr, kosmikus: there may be packages that depend on the current behaviour by providing *both* extra-libraries and pkgconfig-depends without a flag
07:33:33 <hvr> how should cabal know that 'libpng' translates to -lpng ?
07:33:50 <kosmikus> maerwald, hvr, bennofs: actually, the code in the solver currently says: "If we could not read the pkg-config database successfully we allow the check to succeed. The plan found by the solver may fail to be executed later on, but we have no grounds for rejecting the plan at this stage."
07:33:57 <kosmikus> so it seems to have been a conscious choice
07:34:56 <hvr> bennofs: those are in real trouble though; as they'll break if you have a working pkg-config
07:34:57 <bennofs> hvr, kosmikus: or wait, I don't think that a package with any missing pkgconfig-depends can compile with current cabal
07:35:24 <bennofs> because configuring fails for such packages if either a pkgconfig-depends is missing or pkg-config itself is missing
07:35:44 <maerwald> hvr: pretty much like cmake modules do it
07:35:52 <maerwald> so yes, it's work
07:36:23 <hvr> maerwald: how does cmake do it? :-) (I never used it - being biased towards autotools)
07:36:36 <maerwald> hvr: filename and location hints
07:37:15 <maerwald> "png" would just be enough for it to find it in the standard search paths
07:37:43 <hvr> maerwald: ok, but that only applies if pkg-config doesn't exist, right?
07:37:58 <maerwald> well, cmake sucks, so basically the answer is: depends on the module author :P
07:38:04 <maerwald> but that's how I would write a module, yes
07:38:36 <hvr> cause, if we have a pkg-config depends, we use to specify which version range we're compatible with
07:38:58 <hvr> which is the big benefit of pkg-config (besides getting the real LDFLAGS/CFLAGS)
07:39:46 <kosmikus> hvr, maerwald, bennofs: for reference, the PR that added this functionality to the solver is https://github.com/haskell/cabal/pull/3023 ; there may be some discussion regarding this issue somewhere
07:40:01 <jchia_1> stack build is running ghc one process at a time despite the availability of many cores on my machine. Is there a way to tell it how the level of concurrency to use?
07:40:34 <jchia_1> Does stack build even do parallel builds?
07:40:35 <bennofs> jchia_1: are you building a single package or multiple packages?
07:40:53 <cocreature> jchia_1: there is -j but it should use the number of cores your machines has by default. are you sure there are no dependencies between the different ghc processes?
07:40:58 <maerwald> hvr: I'd just ignore version range if we fall back to non-pkgconfig. Then it's just about "hope it works" anyway
07:41:03 <jchia_1> bennofs: My stack.yaml has multiple packages. I'm doing one stack build for the whole project.
07:41:09 <kosmikus> hvr, maerwald, bennofs: in particular, there is https://github.com/haskell/cabal/commit/d46e3636bb731b2494180bf706b67d3163c28413
07:41:34 <hvr> maerwald: well, I'm ok-ish with that... cause I always make sure I have pkg-config installed anyway =)
07:41:52 <maerwald> hvr: on the other hand, stuff like "sdl-config" emit version as well
07:41:53 <jchia_1> bennofs: I also have extra-dep packages in the packages section in the stack.yaml, so I don't think there's a serial chain of dependency.
07:42:30 <hvr> maerwald: sure... but unfortunately pkg-config is easy to batch-query at startup
07:42:32 <bennofs> jchia_1: stack/cabal call GHC once to build all modules in a package afaik, so you'd need GHC to be parallel in this case
07:42:38 <maerwald> I'd just make sure there is some kind of API that let's people write modules for non-pkg-config cases
07:42:49 <hvr> maerwald: we'd have to add explicit support for sdl-config and <whatever>-config
07:43:06 <hvr> etc
07:43:16 <hvr> the nice thing about pkg-config is that it's modular
07:43:23 <maerwald> hvr: currently, people often do such logic in Setup.hs and so on, but I think it would be nicer if that were part of cabal, like cmake modules
07:43:34 <hvr> maerwald: Setup.hs is too late
07:43:37 <maerwald> yes
07:43:39 <hvr> maerwald: we need it pre-solver
07:43:48 <maerwald> exactly
07:44:23 <kosmikus> sorry, have to go
07:44:28 <hvr> kosmikus: cu!
07:46:27 <maerwald> hvr: also mind wxGTK doesn't seem to have pkg-config files, but just wx-config
07:46:36 <maerwald> and there are more
07:47:39 <maerwald> it's sadly not a consistent standard
07:47:41 <jchia_1> cocreature, bennofs: I'm building multiple packages and 4 of them are extra-dep packages, so I hope to see at least 4 ghc's running in the beginning even if stack build doesn't know how to parallelize building one package. Is stack build known to parallelize any part of the build?
07:48:01 <shapr> if it doesn't I really want it to 
07:48:40 <bennofs> jchia_1: it should build multiple independent packages in parallel i think
07:48:54 <bennofs> jchia_1: try stack -j4 build or something
07:52:01 <jchia_1> bennofs: When I just -j4, the most I saw was two ghc process running concurrently, fewer than I expected.
07:52:16 <jchia_1> bennofs: When I just used -j4, the most I saw was two ghc process running concurrently, fewer than I expected.
07:52:23 <cocreature> jchia_1: maybe the extra-deps depend on each other?
07:53:21 <jchia_1> cocreature: Good point. clang-pure, lzma-conduit, haskell-cpython and one more than depends only on haskell-cpython. I should see 3.
07:55:08 <jchia_1> cocreature: OK, I noticed that clang-pure finished building quite fast. So, maybe there's an explanation.
07:55:31 <jchia_1> But does stack know how to parallelize building one package?
07:56:42 <bennofs> jchia_1: you could try stack build --ghc-option -j4
07:57:50 <cocreature> jchia_1: it does know how to parallelize building one package and it definitely does so for the package you’re working on. I’m not sure if it tries to do that for dependencies
07:59:10 <jchia_1> With --ghc-options -j4, I see that most of the time there are two ghc processes, an improvement.
08:01:37 <michalrus> Can I have git-based versioning in a Cabal project? E.g. using the output of `git-describe` as version.
08:04:05 <bennofs> michalrus: pretty sure that the answer is "no"
08:04:25 * michalrus sobs…
08:04:43 <bennofs> michalrus: you may be able to auto-edit the .cabal during the release process, or perhaps hpack already supports it though
08:05:06 <michalrus> Mhm. =) I’ll read hpack’s docs, thank you!
08:05:27 <bennofs> michalrus: no idea if it does support it, so don't be surprised if it doesn't :/
08:06:27 <michalrus> OK. :)
08:06:41 <sm> there's things like http://hackage.haskell.org/package/vcs-revision
08:08:26 <sm> and http://hackage.haskell.org/package/cabal-file-th
08:09:33 <michalrus> Nice! :) Thank you.
08:16:36 <vikumar> Hey there!
08:33:19 <AWizzArd> > return (*2)
08:33:21 <lambdabot>  error:
08:33:21 <lambdabot>      • Ambiguous type variables ‘m0’, ‘a0’ arising from a use of ‘show_M14503...
08:33:21 <lambdabot>        prevents the constraint ‘(Show (m0 (a0 -> a0)))’ from being solved.
08:33:47 <AWizzArd> When I try this in my ghci it shows no reaction. No error message. Nothing printed.
08:34:17 <Iceland_jack> It gets defaulted to (return (* 2) :: IO (Integer -> Integer))
08:34:50 <Iceland_jack> After running (return (* 2)) you should check the type of "it"
08:34:54 <AWizzArd> And because this IO action has no visible effect – this is why I apparently see nothing?
08:34:59 <Iceland_jack> Yes
08:35:18 <AWizzArd> Ok, thx.
08:36:17 <Iceland_jack> If you "import Text.Show.Functions" it will display "<function>"
08:37:13 <Iceland_jack> It's confusing behaviour
08:53:04 <spatial> http://lpaste.net/354703 I was asking about alternative ways to maintain state. Do I need this code for all immutable data ?
08:56:42 <spatial> Can I not return the value from a function ?
09:00:58 <glguy> returning a value is all a function can do
09:07:30 <spatial> Are states even for simple immutable data maintained like that ?
09:07:44 <davean> sometimes, sometimes not
09:07:50 <davean> I rarely, if ever, use a state monad
09:08:03 <davean> also, you've got multiple tihngs named "fun", I think you're possibly confused
09:08:46 <spatial> You mean the bindings can be anything ?
09:08:53 <davean> ?
09:09:10 <spatial> I didn't get you.
09:10:11 <EvanR> state monad by itself has never really helped me
09:10:29 <davean> Yah, what EvanR said
09:11:08 <EvanR> if you would use a state monad, then just passing and returning updated structures ends up being a lot easier
09:11:34 <EvanR> at least in haskell
09:12:03 <vikumar> huh, that's interesting
09:12:25 <vikumar> why do you not use the state monad?
09:12:34 <davean> Why would you?
09:12:47 <davean> Its kinda a silly way to think of post things IMO
09:12:48 <EvanR> its a pain in the ass, especially if you have multiple "variables"
09:13:07 <davean> well, lens fixes most of the multiple part
09:13:27 <vikumar> huh, sweet
09:13:35 <EvanR> theres a lot of bureauratic overhead with State for complex things, and if its simple things, its even worse
09:13:56 <vikumar> I've never needed to use the state monad myself. Was rather curious about your opinion.
09:14:07 <EvanR> and if youre going to need lenses to deal with it...
09:14:09 <EvanR> jeez
09:14:49 <vikumar> honestly, can't think of a program that required you to worry about all the calculations you do.
09:14:51 <spatial> What do you do with such simple state ?
09:14:53 <EvanR> thing nasa engineering team to develop space pen when russians use the pencil
09:15:04 <EvanR> think*
09:15:14 <davean> EvanR: Talk about a false history
09:15:17 <EvanR> haha
09:15:40 <quchen> You can see the actual pen in DC.
09:16:12 <davean> quchen: NASA used pencils initially
09:16:19 <davean> Turns out pencils are a bad idea in space
09:16:40 <vikumar> yeah, the graphite messed up the electronics
09:16:55 <davean> Among other issues
09:17:07 <davean> Which is a lot like lens
09:17:14 <davean> So thank you EvanR for such an accurate analogy ;)
09:17:43 <EvanR> the total amount of code for State code seems to decreases once you remove State, i have found. 
09:18:05 <davean> This I agree with
09:18:08 <quchen> Same for Reader.
09:18:12 <davean> also few computations are really very stateful
09:18:13 <quchen> Not so much for StateT and ReaderT.
09:18:16 <EvanR> yeah Reader by itself is really silly
09:19:15 <EvanR> however, heres a situation where Reader or passing params would be annoying
09:19:31 <vikumar> alright, time to clear up my head when it comes to monads.
09:19:44 <vikumar> what do you use the state, reader and writer monads for in real life
09:19:51 <vikumar> I've never really understood
09:20:05 <vikumar> I get monads but I can't think of used for the mentioned monads
09:20:27 <vikumar> I get error handling, but I don't think the said monads are really helpful
09:20:40 <quchen> Reader: for configuration data, database connections, file handles.
09:20:45 <EvanR> on running the program you pass in flags that determine system wide configuration parameters that dont change, and are pervasive, such as units of measure, scale, sample rate, audio buffer size, numeric precision size, integer modulus
09:21:21 <quchen> I mostly use State like Reader, except that sometimes the configuration might change.
09:21:25 <EvanR> since it would be used so much, passing it to each calculation would be too explicit
09:21:26 <vikumar> quchen, could you give me an example? Pseudo-code could help me out
09:21:30 <sm> ..or, you pass that around as a parameter. Which is often simpler
09:22:09 <vikumar> EvanR, so passing a parameter throughout the entire program?
09:22:12 <quchen> vikumar: If you have a program that passes a parameter through to lots of functions, then Reader lets you do that implicitly.
09:22:14 <EvanR> not just that
09:22:35 <vikumar> honestly, that sounds suspiciously like a global variable
09:22:42 <vikumar> well, one that can't change
09:22:52 <quchen> handle <- openFile; doThis handle; doThat handle; close handle
09:22:55 <vikumar> but still dependent on that variable
09:23:05 <EvanR> a global constant that is needed by a whole framework, like crypto key size, physics precision, etc
09:23:09 <quchen> Reader style: (doThis; doThat; close) openFile
09:23:19 <EvanR> you could do it with modules, but haskell doesnt have that
09:23:45 <vikumar> huh
09:23:48 <EvanR> the best way ive seen to deal with this is the reflection trick
09:23:55 <vikumar> reflection trick?
09:23:59 <EvanR> yeah
09:24:00 <maerwald> we need more tricks 
09:24:09 <maerwald> so code becomes more difficult to understand
09:24:27 <vikumar> sounds like GHC hackery to me. What is it?
09:24:34 <maerwald> it works without GHC hacks too
09:24:40 <EvanR> i say this because having that parameter in every binary operation as another param will make the code harder to read
09:24:43 <maerwald> but less fast
09:25:07 <EvanR> in math, the equivalent situation is an implicit context youre just supposed to know about
09:25:08 <vikumar> hmmm
09:25:18 <EvanR> "when it wouldnt cause confusion"
09:25:22 <vikumar> that feels familiar
09:25:26 <EvanR> and that happens a lot
09:26:00 <quchen> There’s also the HuuuuugeWhereBlock pattern in Haskell.
09:26:00 <EvanR> a lot of dependent type systems, much work is putting in ways to get implicit like that
09:26:06 <vikumar> alright, so i can use the state, reader and writer monads to keep useful parameter with me wherever I go
09:26:18 <vikumar> why not use dependent type systems?
09:26:32 <EvanR> agda... yep
09:26:36 <EvanR> has modules
09:26:49 <quchen> vikumar: You can’t infer types in general, for example
09:26:54 <EvanR> but its not a programming language
09:27:09 <quchen> vikumar: Implicit invariants AKA dirty hacks are much harder to do
09:27:18 <vikumar> huh, fair point.
09:27:29 <EvanR> you wouldnt need dirty hacks in that case
09:27:45 <maerwald> dependent types is a can of worms too, because it's yet another level of "reasoning" you as a programmer have to know and think about etc.
09:27:50 <quchen> Halts : (A -> Bool) -> Bool :-)
09:27:59 <EvanR> also i was trying to argue the use case shouldnt be thought of as a dirty situation
09:28:11 <dolio> You can't infer Haskell types in general, either. :P
09:28:22 <quchen> Hm, that’s less of a dependent example rather than a strongly normalizing one. Meh, ignore me
09:28:38 <angryMonk> Thanks a lot!
09:28:41 <quchen> dolio: At least it’s decidable.
09:29:24 <dolio> Huh?
09:29:36 <quchen> quchen: Is it not?
09:29:58 <dolio> I'm not sure what you mean that wouldn't hold for dependent types.
09:30:24 <EvanR> rankN types cant be reconstructed
09:30:27 <quchen> dolio: If you have general dependent types you can just lift the halting problem to the type level. Is there a term in Haskell that takes forever to typecheck?
09:31:32 <Hafydd> I think the typechecker gives up after a certain number of operations...
09:31:42 <Hafydd> Configurable per program.
09:32:02 <dolio> If you mean that the language has dependent types and is not total, then that's a difference, I guess, although people have worked on systems where that isn't a problem.
09:32:06 <quchen> Sure, cutting off computation time is a fairly robust way of making things terminate.
09:32:33 <quchen> Oh sure, in a total language you get typechecking back.
09:33:10 <EvanR> i havent tried dependent types without totalness
09:33:15 <EvanR> seems scary
09:33:21 <quchen> Idris?
09:33:32 <dolio> Well, it's coming to a GHC near you, maybe. :)
09:33:36 <EvanR> in idris type level code refuses to run without being total
09:33:41 <quchen> Oh, right.
09:33:48 <quchen> Agda with NoTerminationCheck :-D
09:36:34 <EvanR> termination and non termination ... why are you so pervasive in pretty much everything ever
09:37:33 <thoughtpolice> Cayenne used to just have a literal fixed time limit for compile-time programs to halt, not even specified in terms of number of reductions, IIRC?
09:38:10 <EvanR> like, 5 seconds? ;)
09:38:12 <thoughtpolice> (Well, not 'fixed' in the sense you couldn't change it, just in the sense it was in units-of-time, I think, maybe)
09:38:21 <EvanR> ah
09:38:41 <EvanR> thatd be an annoying thing to introduce to a pure compiler
09:39:26 <thoughtpolice> Ah no, it was reduction steps: https://github.com/csgordon/cayenne/blob/master/cayenne.hs#L405
09:43:22 <adamCS> generics-sop/typelist question:  The NP type in generics-sop is a product type, a list of values parameterized by a functor f and a typelist xs.  E.g., f 1 :* f "Hello" :* Nil :: NP f '[Int,Text].  I am trying to figure out if, given a functor which is a composition of other functors, so, using genereics-sop notation, NP (f :.: g) xs I can "move" the functor from the functor parameter to the typelist and the inverse of that. 
09:43:22 <adamCS>  I think I can manage the former, but I'm stuck on the latter.
09:44:00 <OnkelTem> Hi all
09:44:08 <adamCS> Here's a paste with code to do the "uncomposing": https://pastebin.com/DRUsPA4N
09:44:24 <adamCS> but all attempts at "recomposing" have run aground.
09:44:26 <davean> quchen: There is UndecidableInstances 
09:45:04 <OnkelTem> How to install ghc-mod? Isn't ghc-pkg a program for installing such things?
09:46:49 <davean> OnkelTem: huh?
09:47:05 <davean> OnkelTem: ghc-pkg installs nothing
09:47:18 <davean> OnkelTem: perhaps you want cabal-install?
09:47:40 <kamyar> Hello all
09:47:44 <kamyar> please help me:
09:47:45 <OnkelTem> davean: honestly, I don't know. I try to get something
09:47:56 <OnkelTem> davean: and I want it in PHPStorm :)(
09:48:06 <kamyar> I need a binary serialization library in Haskell which can be deserialized using Python
09:48:18 <davean> OnkelTem: ... I'll leave you to that
09:48:29 <OnkelTem> And it has some paths... like "cabal executable", "ghc-mod" executable 
09:48:36 <kamyar> Apparently MessagePack is not well-documented and I can not use it. CBOR is nor production ready
09:48:46 <EvanR> json, s-expressins
09:48:48 <EvanR> expressions
09:48:52 <OnkelTem> davean: it isn't gonna work?
09:48:55 <EvanR> XML
09:49:16 <EvanR> hmm why binary
09:49:34 <EvanR> also doesnt python have a way to parse arbitrary binary
09:49:38 <davean> OnkelTem: Oh, I have no idea, but PHPStorm, your experience level? You're wanting a lot of very specific things, well outside what the commuity uses, and don't have the background knowlege to put it together.
09:49:49 <davean> OnkelTem: I'm sure someone can get it to work
09:50:26 <OnkelTem> davean: well, PHPStorm is not a panacea. What IDE can I use instead for Haskell programming?
09:51:01 <EvanR> atom, sublime
09:51:04 <EvanR> vim, emacs
09:51:14 <OnkelTem> davean: as for my experience level - it's about zero if you mean Haskell
09:51:25 <OnkelTem> and I think that's obvious from my qs
09:51:29 <kamyar> EvanR: I need a fast and small packet
09:51:31 <davean> I'd say emacs is the most used for Haskell, but theres a number of integrations
09:51:59 <EvanR> then you ought to use binary and custom instances to get very small size
09:52:03 <davean> OnkelTem: Yah, which is exactly the problem. Wanting things setup "your way" becomes reasonable once you know enough to have informed oppions about the way things are setup :)
09:52:08 <EvanR> on python side, use their binary parsing features
09:52:11 <kamyar> EvanR: Yes it does but you know binary format in languages differ
09:52:16 <davean> OnkelTem: so when you wanted weird, specific things with zero knowlege I ran :-p
09:52:26 <EvanR> kamyar: the format is up to you with Binary
09:52:34 <EvanR> its not a language thing
09:52:58 <kamyar> EvanR: What u mean is writing a serializer
09:53:10 <EvanR> if you want very small size yes
09:53:19 <OnkelTem> davean: of that I'm aware and agree. Asking a proper question needs background
09:53:23 <kamyar> EvanR: Can I use cereal and deserialize using Python for example>
09:53:35 <EvanR> as i understand it, binary is more popular now
09:53:43 <kamyar> EvanR: I tried to use MessagePack but the libraries are not well documented and here no one could answer my ambigution
09:53:44 <EvanR> in which case, yes
09:53:49 <davean> OnkelTem: https://github.com/commercialhaskell/intero is commonly used for example, atom and sublime have some support
09:54:14 <EvanR> how you do it with python, youll have to ask somebody/somewhere else
09:54:35 <kamyar> EvanR: I am a python expert and Haskell newbie!
09:54:40 <davean> OnkelTem: I know leksah exists but nothing about it really
09:55:00 <EvanR> kamyar: so, to control the binary output you write Binary instances for your data types
09:55:02 <davean> kamyar: maybe you want to play with pickle then ;) (this is a joke)
09:55:25 <kamyar> EvanR: Yes I know but then I have to write Pickle deserializer in Haskell
09:55:25 <EvanR> it control it on a byte by byte level with the Put monad
09:55:35 <EvanR> wait...
09:55:37 <kamyar> EvanR: I just would rather a standard format
09:55:48 <EvanR> i guess im totally backwards on what you wanted
09:56:00 <kosmikus> adamCS: there's currently no official function for doing that, but it's more or less an "FAQ", and I have some gists that do this
09:56:02 <davean> kamyar: I know little about it, but there is already a pickle library
09:56:10 <EvanR> a format you can *de*serialize in python? or
09:56:12 <davean> kamyar: though pickle is probably a bad choice :)
09:56:12 <OnkelTem> davean: (let me first finish my thought) but you see, I have PHPStorm and it claims to support Haskell development. So I opened the plugin's settings and saw paths: to cabal and to ghc-mod. I'm usign official Docker image with Haskell so I expected things like 'ghc-mod' should be there already which apparently is not the case. 
09:56:37 <EvanR> meh
09:56:38 <davean> OnkelTem: ghc-mod is hardly an "official haskell" thing, whatever that would mean
09:56:44 <OnkelTem> okay
09:56:46 <kamyar> davean: Exactly! I prefer a standard format
09:56:48 <davean> OnkelTem: you'd want "cabal install ghc-mod"
09:57:08 <EvanR> pickle is by far not a standard format, neither is Binary default instances, and neither is ESD
09:57:19 <davean> cabal is about as official as things get
09:57:20 <EvanR> theres no real standard binary formats
09:57:27 <kamyar> EvanR: But MessagePack and CBOR are!
09:57:33 <davean> EvanR: well, theres RFC defined ones
09:57:37 <EvanR> CBOR looks cool
09:57:37 <kamyar> EvanR: What about BSON?
09:57:42 <mizu_no_oto_work> kamyar: https://github.com/well-typed/binary-serialise-cbor
09:57:43 <adamCS> kosmikus:  Cool.  Where can I find them?
09:57:43 <EvanR> but how do you say thats a standard format
09:57:44 <kosmikus> adamCS: this is one straight-forward way of doing it: https://gist.github.com/kosmikus/11523015ed5224de165354af9a40bec7
09:57:48 <bennofs> kamyar: what was the problem with msgpack? http://hackage.haskell.org/package/msgpack
09:58:12 <EvanR> kamyar: if the goal is a standardish, then write the deserializer for that in python
09:58:14 <kosmikus> adamCS: I think I have another approach somewhere, but I currently cannot find it.
09:58:18 <EvanR> if the goal is ease, then do what i said
09:58:25 <davean> kamyar: Hum, perhaps I missed it, but why do you care about "binary" (and I point out *any* format on a modern computer is binary0
09:58:25 <kamyar> bennofs: I a using GHC-8.0.2 and msgpack lib is not compatible
09:58:29 <bennofs> kamyar: oh I see that lib looks pretty low-level
09:58:41 <EvanR> the fact that you have to write the deserializer for a standard in python means... it cant really be that standard
09:58:48 <adamCS> kosmikus:  That looks much like what I tried but I'll look again.  Should it work for any two functors, not just something and identity?
09:59:05 <EvanR> things arent really adding up
09:59:08 <kamyar> EvanR: I have good libs in Python for msgpack CBOR and BSON
09:59:14 <EvanR> then use CBOR?
09:59:26 <kosmikus> adamCS: no, I don't think it works for any two, but you should be able to make it work for composition
09:59:28 <kamyar> EvanR: CBOR package is not production ready in Haskell and has no docs
09:59:32 <bennofs> kamyar: https://www.stackage.org/haddock/lts-8.9/messagepack-0.5.4/Data-MessagePack.html looks pretty straightforward
09:59:32 <EvanR> its already outperforming Binary in haskell
09:59:34 <adamCS> kosmikus:  Ah.  I see what may be different.  Explicit SList argument to go in the from function.
09:59:40 <adamCS> kosmikus: Thanks!
09:59:45 <kosmikus> adamCS: i.e., toNPI :: NP (f :.: g) xs -> NP f (Map g xs)
09:59:51 <kamyar> bennofs: Yes I installed it but I am unable to use since has no docs
09:59:53 <kosmikus> adamCS: that should work, I think
09:59:54 <EvanR> kamyar: are you then, asking for help using the library?
10:00:02 <EvanR> it seems like a silly reason not to use an entire format
10:00:05 <kosmikus> adamCS: of course, you have to slightly adapt the definitions then
10:00:31 <Gurkenglas> auf = coerce makes me wonder if we could refactor towards auf = id, and then have "_Wrapping StateT", "_Wrapping MaybeT" etcetera gain their own names and become the primary points of interaction with those newtypes
10:00:36 <mizu_no_oto_work> kamyar: https://www.youtube.com/watch?v=Mj2cXQXgyWE
10:00:36 <OnkelTem> davean: haha thanks! cabal update && cabal install ghc-mod is now downloading the internet
10:00:38 <kamyar> EvanR: Yes I asked here many times and even emailed the author
10:00:40 <EvanR> kamyar: so are you trying to output CBOR from haskell, or read it?
10:00:42 <kamyar> EvanR: No answer yet
10:00:43 <kosmikus> adamCS: this is also requested often enough that it should probably either go into the library, or into a dedicated extra library that depends on generics-sop
10:00:51 <bennofs> kamyar: to use it, you build your msgpack `Object` with its constructors and the use cereal's https://www.stackage.org/haddock/lts-8.9/cereal-0.5.4.0/Data-Serialize.html#v:encode encode/decode
10:00:59 <davean> OnkelTem: it'll be installed into $SOMEWHERE/.cabal/bin
10:01:11 <davean> where $SOMEWHERE is usually ~, but fuck if I know in a docker image
10:01:25 <EvanR> kamyar: it seems straight forward to me, so if you need help...
10:01:39 <OnkelTem> davean: it's not a problem, Dockerfiles are text files so it's clear what goes where :)
10:01:52 <kosmikus> adamCS: this is the other version: https://gist.github.com/kosmikus/1b40cbc4f0e6abf3f47991f2b22bfaf8 but it's not self-contained, as the definition of All_2 is not given there; but you could probably figure that out yourself :)
10:01:54 <kamyar> bennofs: Can u give me a sample?
10:02:05 <bennofs> kamyar: do you want to deserialize or serialize?
10:02:17 <davean> OnkelTem: this has to do with cabal's configuration though
10:02:27 <kamyar> bennofs: Serialize! the data would be saved in redis and then deserialized in Python
10:02:44 <kosmikus> adamCS: anyway, it's not really "better", but it defines toNPI and fromNPI as instances of a single conversion function (transNP)
10:02:57 <kosmikus> adamCS: so in that way, it's a bit nicer, perhaps
10:03:08 <EvanR> kamyar: you construct a CBOR object then pass it to putCBOR to get a Put, then use that with Binary to serialize
10:03:14 <EvanR> to get a ByteString
10:03:17 <adamCS> kosmikus:  I can see how it's FAQ.  But it might only come up when interfacing with another library so I can also why it's not clear where it should go. 
10:03:36 <EvanR> then send the ByteString to redis
10:03:36 <kamyar> EvanR: Just give me a sample I am newbie!
10:03:47 <EvanR> do you have the docs pulled up?
10:03:55 <EvanR> (no docs seems incredibly wrong here)
10:03:58 <kamyar> EvanR: I have used Redis successfully but the binary format..
10:04:11 <EvanR> https://hackage.haskell.org/package/CBOR-0.1.0.1
10:04:26 <EvanR> they have examples
10:04:49 <mizu_no_oto_work> kamyar: https://github.com/well-typed/binary-serialise-cbor/blob/master/demos/Simple.hs
10:04:55 <kamyar> EvanR: Where is the sample?
10:05:05 <EvanR> in the docs for Data.Binary.CBOR
10:05:10 <EvanR> see the putCBOR snippet
10:05:53 <EvanR> you may have not gotten anyresponse because it seems like a straightforward task to just look at the docs
10:06:09 <EvanR> and responding with that would be annoying ;)
10:06:43 <kamyar> EvanR: No! I was trying to use msgpack but it did not success. I can send my code in pastebin!
10:06:56 <kamyar> EvanR: and I did not find the sample u say!
10:07:07 <kamyar> EvanR: Anyway CBOR is not production ready as the author says
10:07:20 <EvanR> in what way
10:08:15 <davean> Perhaps he means the "Alpha, interface subject to change!"
10:08:16 <cocreature> binary-serialise-cbor has seen production use (although for some reason it still hasn’t made it on hackage)
10:08:29 <davean> which pretty much describes half the Haskell ecosystem, we generally like improving things over keeping things the same
10:08:30 <kamyar> EvanR: The author has stated
10:08:35 <cocreature> or “Warning, this package is very alpha quality right now. I've attempted to implement a useful subset of the CBOR standard, but the interface is still being refined and subject to change. Do not use this for anything important! ”
10:08:43 <EvanR> oh this is a different CBOR package
10:09:07 <EvanR> anyway, you dont need the whole CBOR standard if youre sending your data to python
10:09:51 <EvanR> and whether the producing lib is subjet to change shouldnt deter you from using the format, since youre requirements are more about the format than anything else
10:10:24 <kamyar> EvanR: You mean this code: let x = CBOR_Array [CBOR_UInt 42, CBOR_Float 3.14]
10:10:38 <EvanR> let x = CBOR_Array [CBOR_UInt 42, CBOR_Float 3.14] in runPut (putCBOR x)
10:10:46 <EvanR> gives you a bytestring, yes
10:10:55 <kamyar> EvanR: It is not what I want! I want a automated serialization which can be used with haskell records
10:11:19 <EvanR> you dont want to decide how its represented?
10:11:22 <kamyar> EvanR: BTW I need the names to extract
10:11:39 <kamyar> EvanR: It is standaard in CBOR!
10:11:48 <kamyar> EvanR: Python CBOR lib does it
10:12:14 <cocreature> the cbor standard does not define how to serialize haskell records
10:12:49 <davean> cbor allows rather a large number of ways to serialize the same data
10:13:00 <bennofs> kamyar: here is a msgpack example: https://gist.github.com/1e9c395a09257cb3c6bd46418ae0596e
10:13:28 <EvanR> same issue there
10:14:11 <cocreature> iirc binary-serialize-cbor actually provides a generics based way to serialize Haskell values
10:14:37 <cocreature> but if you care about the format (which you do if you want to deserialize from python) you probably want to avoid that
10:14:37 <kamyar> bennofs: See this then: https://pastebin.com/9JzGzaxK
10:14:54 <kamyar> bennofs: I have a GPS location object not an array
10:16:09 <bennofs> kamyar: first, that example looks completely different from my code. second, then you will need to use the ObjectMap constructor..
10:16:26 <bennofs> kamyar: sry, have to go now
10:17:38 <EvanR> kamyar: right, generics would help there
10:17:42 <EvanR> to get field names
10:17:43 <kamyar> EvanR: Can u help me seeing the code?
10:18:13 <kamyar> EvanR: Exactly! But when I used Generics, the msgpack packages give a wrong bytestring! 
10:18:23 <EvanR> i was still thinking of CBOR
10:18:28 <EvanR> wrong?
10:18:35 <EvanR> i thought you didnt care what it looked like
10:18:46 <kamyar> EvanR: When I leave the mapping to GHC Generics, the extracted msgpack is [1,2],3,4]!
10:18:57 <kamyar> EvanR: [[1,2],3,4]
10:19:10 <EvanR> thats not a bytestring
10:19:13 <kamyar> EvanR: an odd format! 1 is lat, 2 is long,..
10:19:25 <kamyar> EvanR: Hey I know< I mean when deserialized in Python
10:19:43 <kamyar> EvanR: msgpack wrongly converts is to an array without property names!
10:19:54 <kamyar> EvanR: And the worse thing is that it makes a nested array!
10:20:15 <EvanR> when the lib doesnt do what you want
10:20:24 <kamyar> EvanR: So I started trying to gice the mapping manually, with no success
10:20:24 <EvanR> you have to do it yourself
10:21:04 <kamyar> EvanR: At last, what do u think about BSON?
10:21:19 <EvanR> i tend to ignore bson since its associated with mongo
10:21:33 <kamyar> EvanR: thanks anyway
10:21:42 <EvanR> unraveling the 19 arbitary requirements, i would have gone with a text format
10:21:53 <EvanR> like json
10:22:07 <EvanR> or s-expression
10:22:22 <EvanR> you can gzip json or an s-expression to save space
10:23:04 <okuu> Let me see if I actually understand this Jacobian thing: an invertible change of variables is locally a change of basis?
10:23:13 <t7> is there a lispy name for init?
10:23:18 <okuu> Opos.
10:23:19 <okuu> Oops.
10:23:20 <cocreature> EvanR: I tend to stick with text-based formats until I want to have binary data in one of the fields. I just can’t get myself to base64 encode things if I could just use cbor or something like that
10:23:22 <okuu> Wrong channel.
10:23:32 <kamyar> EvanR: Thanks fellow!
10:23:53 <EvanR> cocreature: heh, binary data. array-of-integers for the win!
10:24:01 <EvanR> now its not base64
10:24:37 <cocreature> I’m not sure if I should be impressed that you came up with this or disgusted
10:24:48 <EvanR> cocreature: youre right, if this were real life i would "just use CBOR"
10:25:05 <EvanR> apparently theres an issue with that in this case, though not sure what
10:29:31 <tippenein> why would ghcid exit unexpectedly for ghcid --command 'cabal build' inside a nix-shell ?
10:30:43 <srhb> tippenein: Presumably because cabal build exits?
10:31:01 <srhb> tippenein: The command is usually assumed to be ghci or cabal repl or something like that, which doesn't just exit.
10:31:08 <srhb> (I'm just guessing though)
10:31:13 <tippenein> ah yes. you're right
10:31:21 <tippenein> ghci doesn't work in ghcjs
10:31:37 <tippenein> is why I was using cabal build (incorrectly) in the first place
10:31:52 <srhb> tippenein: Why not develop "interactively" using ghc, then switching afterwards?
10:33:26 <tippenein> seems possible. Not sure how to do that with the nix shell I have rn
10:34:17 <srhb> tippenein: Parameterize the ghc.
10:34:33 <srhb> tippenein: So you can use either pkgs.haskell.compiler.ghc802.callPackage or the ghcjs equivalent
10:34:43 <srhb> tippenein: (or whichever paths you're using)
10:37:23 <adamCS> kosmikus:  So that all compiled, which is good.  But now, trying to use it, I get GHC complaining, basically, that it can't deduce that (Map f xs) is an instance of SListI. Which makes sense, since it's not.  And I can't make an instance for a type family due to lack of injectivity, right?  So this functor shifting has some limits to its usefulness?  
10:37:25 <srhb> tippenein: Or maybe in shell.nix: `if pkgs.lib.inNixShell then (ghc.callPackage file.nix {}).env else ghcjs.callPackage file.nix {}
10:37:52 <srhb> (Though i suppose that's really needless if you're already using both a default.nix or shell.nix...)
10:46:47 <kosmikus> adamCS: you can just add the constraint to the functions that use it. once xs becomes known, GHC can resolve it all.
10:47:51 <kosmikus> adamCS: if that's not acceptable, you should be able to use the functions in Generics.SOP.Dict to compute a dictionary at run-time and make that available by pattern matching on it.
10:50:31 <ExpHP> huh. looks like the "Turtle with Stdout" wrapper I wrote last month was basically reinventing "ConduitM () String IO"
10:51:07 <ExpHP> Heck, Shell itself seems to just be "ConduitM () Void IO"
10:51:31 <ExpHP> wellImeanonceyoulookpasttheimplementation
10:52:31 <EvanR> i dont see implementations anymore, just blond, brunette, redhead
10:53:30 <cocreature> EvanR: obviously pipes has red hair but does machines have brunette or blond hair?
10:53:36 <ExpHP> now that my Eggshell is useless I can't make any more egg-related puns ;_;
10:54:43 <EvanR> spoon
10:55:14 <ExpHP> is noops backwards
11:01:46 <ExpHP> ah, and look at that, the conduit tutorial links to the foldl package when discussing the space complexity of ZipSink
11:02:00 <ExpHP> (the foldl package, of course, being the basis of turtle shells)
11:12:43 <tippenein> srhb: I passed ghc as an input, but the package depends on ghcjs-base and such, so there's no chance it'll build with ghc afaik
11:15:00 <srhb> tippenein: Ah :/
11:16:10 <leu> hi
11:16:36 <tippenein> actually.. ghcjs-base should be available in ghc because it'll compile to webkitgtk or something
11:26:54 <nmdanny> does anyone know how to force stack to use a patched ghc distro (the ones from here https://mail.haskell.org/pipermail/ghc-devs/2017-April/014131.html) ?
11:27:39 <bennofs> nmdanny: I don't know how it works exactly, but you can tell stack to use a different bindist for the compiler
11:28:04 <bennofs> nmdanny: https://github.com/commercialhaskell/stack/blob/master/doc/yaml_configuration.md#setup-info looks like it
11:28:12 <nmdanny> I tried setting a custom setup-info and ghc-variant, but according to the logs it keeps downloading from commericalhaskell
11:28:34 <bennofs> oh, that's what I would have done as well. no idea then, sorry :/
11:30:18 <nmdanny> do the custom setup-info and ghc-variant have to be on my global project stack yaml?
11:30:28 <nmdanny> aka C:\sr\global-project\stack.yaml
11:32:46 <nmdanny> because it seems it just ignores the settings from that file
11:35:09 <bennofs> nmdanny: i think it needs to be in your project yaml
11:35:13 <bennofs> nmdanny: not global one
11:36:22 <kamyar> Hey please fix my code
11:37:19 <kamyar> http://lpaste.net/354708
11:37:25 <pikajude> > let mycode = undefined in fix mycode
11:37:28 <lambdabot>  *Exception: Prelude.undefined
11:37:30 <pikajude> oh dear
11:38:05 <nmdanny> weird, even in my project yaml, it just ignores my settings
11:38:19 <kamyar> pikajude: I pasted it.
11:39:17 <kamyar> What is wrong with my code?
11:39:24 <kamyar> I get parsing error
11:39:38 <hexagoxel> you are using tabs.
11:40:12 <kamyar> hexagoxel: thnx!
11:40:23 <hexagoxel> replace each tab with 4 spaces, might already fix it.
11:42:06 <kamyar> hexagoxel: I did! It fixed!
11:43:06 <nmdanny> seems like I can install the patched ghc with the following command: "stack setup --ghc-bindist "https://downloads.haskell.org/~ghc/8.0.2/ghc-8.0.2-x86_64-unknown-mingw32-win10.tar.xz" --ghc-variant windows64"
11:43:25 <hexagoxel> good, now configure your editor to insert spaces on tab so this does not happen again :p
11:43:34 <nmdanny> but it still ignores the global yaml
11:48:05 <geekosaur> if you have a local stack.yaml then it does not use the global one
11:49:20 <nmdanny> yes but it seems like even when running globally (not in a project folder) it just ignores those settings
12:01:48 <adamCS> kosmikus:  Thanks! I will need to fiddle some with how I planned to use it in order to make that possible. We'll see how it goes...
12:09:55 <Zemyla> Oh, you know the whole trick to only reduce a value to root normal form once, right?
12:11:10 <Zemyla> data Once a = Once () a; once :: NFData a => a -> Once a; once a = Once (rnf a) a; instance NFData (Once a) where rnf (Once () _) = ();
12:23:16 <veshhij> #lambdabot
12:25:58 <edwardk> i remember writing that trick
12:26:34 <adamCS> kosmikus:  Any pointers on deriving the dictionary?  The functions in Generics.SOP.Dict are all about constraints on items in the typelists but not much about proving that things are, in fact, typelists.  But I'm sure I'm missing something.
12:43:56 <dmj`> adamCS: you’re playing with GHC.Generics?
12:44:14 <adamCS> dmj': Yes, but via generics-sop
12:44:24 <adamCS> dmj`: ^
12:44:35 <akr[m]> hi guys, just a quick question: can it ever happen that calling `show` on a value of type `Int` returns the empty string?
12:44:51 <dmj`> adamCS: I see, just curious, what are you trying to do
12:45:23 <kadoban> akr[m]: I don't see how it could, no.
12:46:05 <akr[m]> kadoban: yeah I think so as well
12:46:07 <akr[m]> thank you
12:46:10 <dmj`> akr[m]: no, that wouldn’t be possible
12:46:28 <dmj`> > map show [maxBound :: Int, minBound, 0]
12:46:30 <lambdabot>  ["9223372036854775807","-9223372036854775808","0"]
12:47:21 <adamCS> dmj`: That's a long story!  The short version is that I am trying to take a product type with a Generic instance (Generics.SOP version of Generic, but that is derivable from GHC.Generics.Generic), convert it into the generic product form which generics-sop provides, a list paramterized by a functor and typelist and then "sequence" the functor out.  I can do that easily enough withing generics-sop for an applicative functor. 
12:47:21 <adamCS>  However...
12:47:52 <akr[m]> dmj`: cool :) just a few more values to check… ;)
12:48:15 <akr[m]> hm I wonder how long would it actually take
12:48:17 <adamCS> In my particular case, I have a more efficient sequence function available but it acts on DMap (dependent-map).
12:49:08 <kadoban> akr[m]: 2^64 operations is not in the fun zone of computing. That's towards "brute-force solve crypto" zone.
12:49:48 <akr[m]> > yeah 
12:49:54 <dmj`> akr[m]: how long what would take?
12:49:55 <akr[m]> I'll let the bot be :)
12:49:58 <dmj`> any null . map show . enumFromTo minBound $ (maxBound :: Int) ?
12:50:23 <adamCS> Which would still be fine. I can convert NP f xs into DMap k f where k is some DMap key that is made for the TypeList xs.  But, I have a functor which is a composition of the thing I want to sequence and something else.  But my DMap function (from a library) only works for the functor uncomposed.  SO I am trying to shift the composed functor into the typelist, do the sequencing via DMap, and then shift it back.
12:51:58 <akr[m]> dmj`: bonus points for making it run parallel with map-reduce
12:52:15 <adamCS> dmj`:  Which might be the long way round but, for now, seems more likely than re-writing the library.  I've almost got it except for a constraint that I am having trouble satisfying at the call site.
12:52:56 <dmj`> adamCS: could you paste code :) 
12:53:57 <adamCS> dmj`: https://pastebin.com/gdWtwCd0
12:54:46 <adamCS> which all compiles (except for the incomplete proof near the botttom).  But I want the last function to work without the explicit "SListI (AddFunctor g xs) constraint"
12:57:01 <adamCS> and I think what kosmikus suggested above is that I ought to be able to construct that proof and thus not need the explicit SListI (AddFunctor g xs) constraint.  But I don't know how.
13:11:05 <kosmikus> adamCS: https://gist.github.com/kosmikus/0bedbd1b3eb1c5037bc8bcb8d35a56ba
13:13:21 <adamCS> kosmikus:  Thanks!  I will give that a tryr!
13:13:24 <adamCS> try!
13:15:39 <shapr> Igloo: remember your idea about making lambda frisbee/boomerangs? Did you ever find a boomerang that's close to a lambda?
13:15:46 <dmj`> akr[m]: it still takes a while, even with parallelism
13:15:55 <dmj`> think it’s due to allocating all those strings
13:16:35 <ertes> helo again
13:16:54 <ski> ehlo ertes@2a02:8070:249d:9a00:7eb0:c2ff:fe8c:3228
13:17:05 <shapr> VRFY ski
13:17:21 <Tuplanolla> Can you help me understand this lambda obsession some functional programmers have, shapr? It's not like imperative programmers want everything to look like register machines.
13:17:38 * ski is rusty about SMTP
13:17:40 <ertes> BLUB
13:18:15 <ertes> Tuplanolla: "lambda obsession"?
13:18:17 <shapr> Tuplanolla: my first thought is that people like icons/symbols that identify them as part of a group.
13:18:22 <ertes> as in "FP is about lambdas"?
13:18:53 <shapr> Tuplanolla: although imperative code makes so much money it should be a cash register symbol :-P
13:19:12 <Tuplanolla> Good one.
13:20:01 <shapr> Tuplanolla: what do you think about my theory that it's about belonging to a group with an identifying icon?
13:20:07 <Igloo> shapr: I don't remember that at all, I'm afraid
13:20:24 <Tuplanolla> I don't think much, shapr.
13:20:29 <shapr> Igloo: fair enough, I think we discussed it the last time we met in person.
13:20:44 <shapr> What was that, ten or twelve years ago?
13:20:49 <cocreature> Tuplanolla: thinking is quite powerful. I can highly recommend it
13:20:54 <shapr> Sometimes I remember too much
13:21:18 <dmj`> akr[m]: https://gist.github.com/dmjio/fb34311de75dd9e4d5c9d8a19545b454
13:21:19 <Tuplanolla> I wouldn't want to end up with a thinking problem like my uncle did, cocreature.
13:21:28 <shapr> oookay, I want to hear that story
13:21:52 <Zemyla> I have a quick question.
13:21:54 <cocreature> he thought too much and then his brain exploded?
13:21:59 <shapr> Zemyla: ooh, ask a slow one instead!
13:22:02 <Zemyla> Why is tail [] not [], like drop 1 [] be?
13:22:07 <Zemyla> *woudl be
13:22:08 <Zemyla> *would
13:22:38 <cocreature> Zemyla: I don’t think there is any fundamental reason. it just happens to be defined like that
13:23:11 <Tuplanolla> It has nicer algebraic properties for the cases it's defined at all, Zemyla.
13:24:51 * ski . o O ( "In the Lambda Order they are all first-class. / One Thing to name them all, One Thing to define them, / One Thing to place them in environments and bind them, / In the Lambda Order they are all first-class." )
13:27:58 <Igloo> shapr: Was that at ICFP Uppsala? If so, 2003 it looks like
13:28:17 <ertes> Zemyla: i guess it's supposed to reflect a field of the (:) constructor
13:28:29 <ertes> just like a field of a sum type is partial, unless it occurs in every constructor
13:28:41 <shapr> Igloo: ok, maybe it was 14 years ago
13:28:48 <shapr> I was ... vaguely close?
13:28:54 <EvanR> field of a sum type doesnt really make sense
13:28:57 <ertes> Zemyla: like that: data [a] = [] | (:) { head :: a, tail :: [a] }
13:29:00 <shapr> Igloo: I haven't seen you in forever! Want to come to HacBoston in July?
13:29:00 <EvanR> records are not sums
13:29:03 <ertes> in fact i wish it were defined like that
13:29:31 <ertes> EvanR: haskell allows it though
13:29:59 <EvanR> yeah and PHP allows you to modify a variable variable
13:30:03 <ertes> @let List a = Nil | Cons { lhead :: a, ltail :: List a }  deriving (Eq, Foldable, Functor, Ord, Show, Traversable)
13:30:09 <Igloo> shapr: Don't fancy your odds there. But if you're going to ICFP this year then I'll be pretty close by  ;-)
13:30:13 <ertes> @let data List a = Nil | Cons { lhead :: a, ltail :: List a }  deriving (Eq, Foldable, Functor, Ord, Show, Traversable)
13:30:19 <ertes> oh
13:30:27 <ertes> tsunderebot is gone
13:30:45 <EvanR> can do it -/-> should do it
13:30:52 <shapr> Igloo: ok, I'll sign up for ICFP
13:30:56 <shapr> would be nice to see you again
13:35:10 <ski> tsunderebot ?
13:35:33 <ChaiTRex> lambdabot isn't here.
13:35:36 * ski thought it was lambdabot who was napping
13:35:43 <ski> aye
13:37:32 <sm> quick, now we can plot the overthrow of lambdabot
13:38:19 <ertes> ski: tsu…  lambdabot has insulted more than any human on IRC
13:38:28 <ertes> *insulted me
13:38:37 <akr[m]> dmj`: hey that's pretty cool, I hadn't seen that monad before
13:38:37 <sm> it's drunk on power!
13:38:46 <ski> .. but who is tsunderebot ?
13:39:04 <ski> a backup lambdabot ?
13:42:05 <Jinxit> a joke
14:24:29 <ertes> does anyone a library to resolve relative URLs against an absolute URL?
14:25:17 <ertes> something like: absoluteAt "https://myhost/blah?blubb=x" "//myhost/y" = "https://myhost/y"
14:26:32 <ertes> ah, network-uri can do it apparently
14:32:48 <OnkelTem> Guys, 'cabal install' when launched under root installs everything fine into /root/.cabal/*. But when I run it under user - it doesn't create directories under ~/.cabal except of 'packages' directory
14:32:54 <OnkelTem> Any ideas why?
14:33:11 <ezyang> post your logs? 
14:33:33 <angryMonk> huh
14:33:37 <angryMonk> that's odd
14:33:48 <angryMonk> what system you're using?
14:34:02 <angryMonk> also, why are you installing as root
14:34:18 <angryMonk> pretty sure cabal doesn't require root access
14:34:33 <angryMonk> OnkelTem
14:34:47 <OnkelTem> http://paste.adyax.com/6c2383f
14:35:39 <OnkelTem> system is debian jessie
14:36:08 <angryMonk> huh
14:36:20 <sternenseemann> Zemyla: also if tail was drop 1, you couldn't tell if the list l was empty or of length 1, if tail l == []
14:37:02 <Zemyla> And having tail [x] = [], tail [] = _|_ is better?
14:37:25 <angryMonk> OnkelTem, the only reason I can think of is the fact you're using root
14:37:34 <angryMonk> is there a specific reason?
14:38:27 <angryMonk> look like everything installed properly
14:38:46 <angryMonk> the only benefit you have for using root is the ability to use it for other accounts
14:39:00 <sternenseemann> Zemyla: I guess so, but not optimal, best would be having head :: [a] -> Maybe a and tail :: [a] -> Maybe [a]
14:39:03 <angryMonk> as for the packages, they're usally user-specific
14:39:32 <angryMonk> try using another username
14:42:33 <OnkelTem> let me try
14:45:16 <OnkelTem> angryMonk: lol, I've created another user (test123) and now it runs fine, haven't finished yet though
14:45:29 <angryMonk> sweet
14:45:38 <angryMonk> well, enjoy your weird build
14:45:56 <OnkelTem> how that could be? damn it
14:46:11 <OnkelTem> and my build is... a moment
14:50:14 <OnkelTem> I'm installing from this repo: https://launchpad.net/~hvr/+archive/ubuntu/ghc 
14:50:40 <OnkelTem> it's actually a dockerfile, this one: https://github.com/freebroccolo/docker-haskell/blob/5f1ae82bd27501322100b915c9ae6cc9f9aea129/8.0/Dockerfile
14:52:00 <OnkelTem> Which is a part of this distribution: https://hub.docker.com/_/haskell/
14:52:13 <OnkelTem> called an "official"
15:04:59 <iqubic> Has anyone written 99 Bottles of Beer in Haskell.
15:05:30 <iqubic> Takes no input. Output the song "99 Bottles of Beer" to either a text file, or stdout.
15:05:58 <glguy> Yeah, that'll be pretty easy to find with Google
15:09:07 <hpc> iqubic: might i interest you in https://hackage.haskell.org/package/acme-hq9plus
15:09:54 <iqubic> What is that???
15:10:52 <glguy> It's a URL. If you activate it your default web browser should open it
15:10:59 <hpc> haha
15:11:09 <hpc> it is among other things, a DSL for writing 99 bottles of beer
15:11:09 <iqubic> No, I mean, how does the code work???
15:11:38 <hpc> well you run it, and your machine interprets the bytes as opcodes for the processor
15:11:54 <iqubic> http://www.99-bottles-of-beer.net/language-haskell-1070.html
15:12:00 <iqubic> I like that version better.
15:12:16 <glguy> iqubic: How does it work?
15:13:07 <iqubic> glguy: Well, you put it in a .hs file and you compile it with ghc.
15:13:14 <iqubic> Then you run it.
15:13:38 <glguy> Oh, I meant: How does it work???
15:13:50 <hpc> lol
15:17:16 <Tuplanolla> That's one up from "just fine; thanks for asking".
15:19:15 <dfeuer> iqubic: the bottles of beer should use mapM_ or traverse_, not mapM.
15:19:43 <dfeuer> Efficiency isn't key when drinking, but there's no reason to waste *that* much.
15:20:55 <mjora7> Could a Haskell whiz show me the most efficient program that counts the number of primes between 1 and 1,000,000? I can do it, but slowly... Looking for some efficiency tricks.
15:21:55 <mjora7> Actually I have a more nuanced question... Let me just paste some code first.
15:22:21 <kadoban> A sieve should be able to do it quite quickly. https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes , if you want to implement it in haskell you can use strict arrays like STUArray or something, or something cute like https://www.cs.hmc.edu/~oneill/papers/Sieve-JFP.pdf
15:22:40 <ChaiTRex> There's also a primes section on the Haskell wiki.
15:23:20 <Tuplanolla> :t Data.Vector.create -- I recommend this function, mjora7.
15:23:31 <ChaiTRex> Kind of hard to get things working because they throw functions in random places, but it's here: https://wiki.haskell.org/Prime_numbers
15:25:10 <Tuplanolla> Or is it `Data.Vector.Unboxed.create`? Our robotic maid isn't around to tell.
15:25:53 <ChaiTRex> Are there unboxed vectors?
15:25:59 <ChaiTRex> Oh, never mind.
15:26:57 <ertes> anyone have an idea how to figure out the maximum file name length for the current platform without brute-forcing exceptions?
15:26:58 <mjhoy> is it possible to use a lens to update a structure only when given a Just value, and to leave it unchanged with a Nothing?
15:28:15 <ertes> @let given True = id; given False = const pure
15:28:27 <lambdabot>  Defined.
15:28:48 <davean> ertes: PATH_MAX?
15:28:57 <ertes> > (_1 . given True +~ 5) (10, 20)
15:29:05 <AWizzArd> > do a <- randomR (1,10); return a; $ (mkStdGen 0)
15:29:05 <lambdabot>  (15,20)
15:29:07 <ertes> > (_1 . given False +~ 5) (10, 20)
15:29:15 <lambdabot>  (4,40014 40692)
15:29:17 <lambdabot>  (10,20)
15:29:29 <ertes> mjhoy: would that be good enough?
15:29:30 <AWizzArd> How can I make this return an Int?
15:29:41 <AWizzArd> Where should the type annotation go?
15:29:47 <ertes> AWizzArd: (1, 10 :: Int)
15:29:55 <mjhoy> ertes: interesting, thanks, will have to study that (very new to lens)
15:30:02 <AWizzArd> > do a <- randomR (1,10 :: Int); return a; $ (mkStdGen 0)
15:30:11 <lambdabot>  (4,40014 40692)
15:30:28 <nshepperd> mjhoy: what does "when given a Just value" mean? you mean the initial value of the field?
15:30:30 <AWizzArd> Hmm. Still double.
15:30:30 <davean> ertes: although, its not like two different paths will necissarily have the same limits ...
15:30:32 <ertes> mjhoy: it's a traversal that points to the whole thing, if True or nothing, if False
15:30:56 <davean> ertes: So, you can't even real brute force it, since "it" isn't some actual value
15:31:11 <mjora7> So I realize that using a Sieve is a better way to compute primes. I'm doing it here in a brute force way, is this just the wrong way to tackle the problem in Haskell? https://gist.github.com/aryaforghani/cda8601b2350d68fea1dd325767c1ec6#file-primes-hs
15:31:25 <ertes> davean: yeah…  unfortunately it's annoyingly difficult to catch this particular exception, and in fact i'd prefer not to have it thrown at me in the first place
15:31:34 <mjora7> Also any naming convention suggestions would be much appreciated.
15:31:54 <davean> ertes: well, at least POSIX specifies a min value for the max path length?
15:32:09 <mjhoy> nshepperd: this doesn't make sense in terms of types i think, but i was thinking of:
15:32:15 <mjhoy>  (2,2) & _1 <something> (Just 1) == (1,2)
15:32:23 <ertes> mjora7: well, a sieve is MUCH MUCH MUCH faster
15:32:26 <mjhoy> (2,2) & _1 <something> Nothing == (2,2)
15:32:34 <mjhoy> where <something> does what I want.
15:33:02 <ertes> mjora7: trial division will find like the first few thousand primes in a second, while a sieve will easily find millions
15:33:07 <kadoban> mjora7: Well, it's wrong in that it's slow to do it that way, but that's not specific to haskell. It's slow to do it that way in any language I know of.
15:33:09 <davean> ertes: What makes it so hard to catch?
15:34:24 <nshepperd> mjhoy: I see. Yes, implementing your <something> certainly seems possible
15:34:30 <kadoban> There's a few simple ways to speed up what you're doing a bit, like not trying to divide by every odd number, only the primes you found so far, stopping earlier than x-1, etc., but they won't make it pleasant to do for large numbers anyway.
15:34:55 <ertes> davean: i'd probably have to take apart the generic IOException, get the errno value and match it…  then i'd need to make the filename shorter and try again in a loop
15:35:03 <ChaiTRex> There's wheel factorization or whatever it's called as well.
15:35:42 <kadoban> Yeah, that'll also help a bit, but not that much relatively.
15:35:43 <davean> ertes: catchJust?
15:35:45 <ertes> wheel factoring is actually a kind of sieve…  it uses sieving to eliminate many trial divisions, while gives a constant-factor boost in speed
15:35:52 <ertes> but the factor is typically somewhere around 10 and 100
15:35:55 <ertes> still way slower than a full sieve
15:36:07 <ertes> davean: sure
15:36:29 <ertes> s/while/which/
15:37:16 <ertes> mjora7: BTW, here is an implementation of a completely pure sieve: https://github.com/esoeylemez/snippets/blob/master/PurePrimeSieve.hs
15:37:18 <ChaiTRex> Does sieving exclusively involve using an array (or equivalent) of booleans for each number?
15:37:37 <davean> ertes: I guess I'm not seeing the challenge
15:37:45 <ertes> it's not much faster than trial division unfortunately, because to get the real advantages of a sieve you need mutability
15:37:58 <ertes> davean: it's just inconvenient
15:38:06 <ertes> ChaiTRex: yes
15:38:47 <ij> Why does «stack image container» add a Dockerfile inside the image's root?
15:39:06 <ertes> here is an actual sieve: http://lpaste.net/101980
15:39:14 <ertes> one that uses a compact mutable vector
15:39:38 <nshepperd> > (1,1) & _1 `setMaybe` (Just 22) & _2 `setMaybe` Nothing -- mjhoy
15:39:40 <lambdabot>  (22,1)
15:40:04 <nshepperd> (setMaybe l (Just x) = l .~ x; setMaybe l Nothing = id)
15:40:13 <ChaiTRex> Have there been any Haskell implementations of the Sieve of Atkin?
15:40:28 <kadoban> ertes: The one o'neill came up with isn't exactly blazing fast comparatively, but it's way better than trial division at least, and doesn't use what I'd call mutability.
15:40:33 <ertes> ChaiTRex: the arithmoi library might use it
15:40:41 <mjhoy> nshepperd: hehe I just wrote that out!! found the definition for set' which was helpful.
15:40:46 <mjora7> Ok thanks for the suggestions.
15:41:33 <ChaiTRex> ertes: Ahh, unfortunately not yet: "Currently, an enhanced sieve of Eratosthenes is used, switching to an Atkin sieve is planned (if I get around to implementing it and it's not slower)."
15:41:59 <ertes> kadoban: i'd consider that an implementation detail…  write a super-fast sieve once, test it will, then reuse it forever
15:42:24 <ertes> kadoban: the mutability doesn't need to be exposed (see e.g. arithmoi)
15:43:22 <mjhoy> nshepperd: that was much simpler than I thought. Thanks!
15:43:23 <kadoban> True. I found it interesting though regardless, though not really for practical reasons.
15:44:06 <ertes> wow, i suck at typing these days
15:44:08 <ertes> s/will/well/
15:44:22 * ertes should get more sleep
15:44:28 <kadoban> Heh, didn't even notice that one.
15:44:53 <ertes> your brain kindly auto-corrects my mistakes =)
15:45:09 <kadoban> Indeed :)
15:58:50 <benzrf> life goals: se On GP live
15:58:54 <benzrf> oops wrong channel :(
15:59:37 <EvanR> nice password
16:00:56 <benzrf> not a password
18:23:07 <adamCS> kosmikus: That worked!  Thanks so much for all the help.  Now it's time for me to backtrack and understand a bit more of it.
19:05:24 <kellytk> Does it make sense to model time as IO and the passage of time as IO input events?
19:13:09 <sproingie> kellytk: FRP would be the usual thing for modeling time.  you get an infinite list of events, making List the go to abstraction
19:13:37 <kellytk> Do events come through IO?
19:14:15 <sproingie> ultimately, yeah, though FRP libraries tend to lift it out of IO as soon as possible
19:15:02 <kellytk> Thought so, thanks
19:16:41 <iqubic> Who here uses Vim?
19:19:56 <orion> I do.
19:20:58 <vaibhavsagar> I do!
19:21:06 <ExpHP> I did...
19:21:38 <iqubic> What plugins do you guys use in Vim?
19:22:24 <orion> VundleVim/Vundle.vim, scrooloose/syntastic, bitc/vim-hdevtools, dag/vim2hs, eagletmt/ghcmod-vim
19:23:01 <sproingie> intero works for vim, right?
19:23:16 <sproingie> (i'm an emacs guy myself)
19:23:31 <iqubic> Not tryed intero, but I know it works with Vim yeah.
19:24:30 <sproingie> it's fantastic in emacs, feels like a real IDE
19:24:47 <ExpHP> (when it works)
19:24:59 <sproingie> true for all IDEs, ainnit?
19:25:10 <ExpHP> ....ok yeah :)
19:26:08 <monochrom> Tautologies are true for all IDEs. :)
19:26:37 <sproingie> tautologies are tautologies for all tautologies
19:26:48 <sproingie> tonight's free theorem
19:26:58 <monochrom> :)
19:27:29 <iqubic> So, anyone know what the best haskell linter is? This will work with my current set-up: https://github.com/eagletmt/neco-ghc
19:28:18 <iqubic> Not quite sure what the install instructions want me to do though.
19:29:05 <iqubic> Wait, I know what they want me to do.
19:29:18 <ExpHP> when I used vim, I used syntastic, which IIRC had built-in support for hlint
19:29:33 <ExpHP> ...and I ripped that right out because it was too prissy for my code :V
19:29:51 <iqubic> Also, That's not a linter, but a completion engine.
19:30:03 <vaibhavsagar> I like neomake
19:30:22 <vaibhavsagar> it has support for hlint and hdevtools, which I use heavily
19:30:44 <iqubic> Yeah, I use neomake.
19:30:46 <vaibhavsagar> It's also supposed to support ghc-mod but I couldn't figure out how to get that to work
19:30:56 <iqubic> vaibhavsagar: Do you use ghc-mod?
19:31:11 <vaibhavsagar> no, hdevtools is enough for me
19:31:43 <iqubic> Now, what completion engine do I use??? I'm currently using Deoplete, but I don't think that has Haskell code completion built in.
19:31:59 <iqubic> What do people think of the neco-ghc I posted earlier?
19:33:05 <vaibhavsagar> does it work well for you?
19:33:37 <vaibhavsagar> I've given up on ghc-mod + vim for now in favour of hdevtools
19:34:10 <iqubic> vaibhavsagar: So, you use hdevtools, instead of vim?
19:35:01 <vaibhavsagar> no, I don't use a completion engine right now
19:35:07 <vaibhavsagar> that would be pretty sweet though
19:35:24 <iqubic> vaibhavsagar: Do I need a completion engine?
19:35:31 <iqubic> The answer is no.
19:35:38 <vaibhavsagar> no :)
19:35:47 <vaibhavsagar> hdevtools + vim
19:36:00 <vaibhavsagar> ghcid is nice too, but that's editor agnostic
19:36:04 <iqubic> And do you have a linter too?
19:36:14 <vaibhavsagar> hlint
19:36:24 <iqubic> Cool.
19:36:27 <vaibhavsagar> but neomake takes care of hdevtools + hlint integration
19:36:59 <iqubic> So I just install hdevtools as I would normally, and neomake will just magically make everything work for me?
19:37:08 <vaibhavsagar> yes!
19:37:17 <vaibhavsagar> I usually `stack install hdevtools`
19:37:28 <vaibhavsagar> and `stack install hlint`
19:37:43 <iqubic> vaibhavsagar: You don't install it with your vim plugin manager?
19:38:07 <vaibhavsagar> neomake is the plugin
19:38:26 <vaibhavsagar> hlint and hdevtools are the system applications
19:39:35 <iqubic> And have you set any special whitespace options for haskell files. I saw a thing about that on the Haskell Wiki.
19:43:22 <vaibhavsagar> no, I use https://github.com/tpope/vim-sleuth
20:38:19 <iqubic> So, how does hdevtools work. I install it with stack, and then stuff magically works for me?
20:38:57 <iqubic> Well, provided I also have neomake?
20:40:22 <kadoban> hdevtools that you install with stack is simply a command line program. If it's supposed to do something in your editor, you probably need a plugin of some kind that calls the CLI tool correctly and etc. Which maybe that's what neomake is, never heard of that myself.
20:40:35 <tjtaill> Hi I am trying to get back into haskell after a couple of years absence trying to use wreq to make some REST api calls but I get (InternalException (HandshakeFailed Error_EOF)) anyone have experience using wreq ?
20:41:23 <c_wraith> tjtaill: that looks like one side of the connection is trying to use tls and the other isn't
20:43:29 <tjtaill> c_wraith any idea how I turn TLS on or off from the haskell side using wreq ?
20:43:52 <c_wraith> No.  :)
20:43:56 <iqubic> kadoban: Actually what I needed was this: https://github.com/bitc/vim-hdevtools
20:44:21 <iqubic> What is TLS
20:44:22 <iqubic> ??
20:44:42 <c_wraith> transport-level security.  The replacement for SSL
20:44:48 <kadoban> TLS is the new name for SSL, kinda.
20:45:09 <iqubic> And you can use TLS in haskell?
20:45:34 <iqubic> What does that even mean?
20:45:55 <kadoban> Should be able to in pretty much every language. Every time you want to visit a website, it's usually a good idea that TLS is at least an option.
20:46:17 <kadoban> TLS is pretty close to a required part of the internet
20:46:23 <c_wraith> Browsers are really pushing for it being mandatory for web sites.
20:47:06 <pacak> iqubic: http vs https in this case. Typing any passwords over http is a stupid idea.
20:47:30 <iqubic> Ah. I see.
20:48:59 <tjtaill> c_wraith ah they don't use tls in the sandbox it is working now thanks :)
20:49:51 <c_wraith> tjtaill: I've got a lot of experience with speaking the wrong protocol to services.  So I've got a good sense of what error messages can result from that mixup. :)
21:08:30 <tjtaill> Anyone have a recommendation for a lookup table is Data.Map what most people use ?
21:09:04 <lyxia> that or HashMap
21:09:43 <kadoban> Data.Map is a decent default, sure. Depending on what properties you need, there may be more performant options or etc.
21:12:48 <tjtaill> kadoban it is for a small lookup table still good to learn what recommendations the pros have
21:14:36 <kadoban> Other common options I use are IntMap, Array, STArray, or even just plain [(a, b)] sometimes.
21:16:49 <pacak> tjtaill: There's also EnumMap
21:23:35 <Cale> I would tend to just go with Data.Map
21:24:10 <Cale> My confidence in Data.HashMap is really low at the moment
21:25:25 <Cale> There was a user in here a short while ago whose program which was pretty much entirely pure was producing different results on each run (the result was a Double). It was using pure parallelism (par). I went through and replaced Data.HashMap with Data.Map and that behaviour stopped.
21:25:48 <Cale> (and the program became 2% slower as a result)
21:26:34 <Cale> Data.HashMap does a bunch of reallyUnsafePtrEquality# trickery that I think was possibly the cause of it.
21:26:34 <kadoban> Sounds wacky, wonder why that would be.
21:26:46 <pacak> kadoban: Eq instance for floating point number
21:27:09 <Cale> It wasn't keying the Maps on floating point values or anything silly like that
21:27:13 <kadoban> I have an aversion to hash tables in general I guess, so I don't think I've ever tried haskell's.  Maybe that's for the best.
21:27:38 <kadoban> Ya, using as keys was my guess, but if anything the Data.Map would probably be worse for that so I figured it wasn't that.
21:28:09 <kadoban> Since the Ord/Eq instances are ... fun for IEEE usually, heh.
21:28:11 <Cale> It was something to do with parallel accesses to the HashMaps
21:30:04 <pacak> Cale: Interesting. Do you recall any more details?
21:36:07 <Cale> https://github.com/tibbe/unordered-containers/issues/147
21:36:56 <Cale> It only happens with the parallel runtime, set to use multiple capabilities
21:37:51 <Cale> pacak: ^^
21:37:53 <pacak> Cale: Thanks!
21:46:16 <_sras_> I am trying to use hdevtools on a project, I am getting this error when I issue a "check" command from cli, http://lpaste.net/354720
21:46:25 <_sras_> How can I fix this?
22:01:55 <_sras_> How can I fix this hdevtools error  http://lpaste.net/354720 ?
23:09:34 <cocreature> _sras_: are you using TH?
23:14:33 <_sras_> cocreature: Yes
23:15:07 <cocreature> _sras_: afaik that error comes from using -fno-code which hdevtools probably does and TH. sadly I don’t know of a fix
23:23:21 <pacak> _sras_: You can try compiling modules that declare TH separately via ghc -c or placing them into a separate cabal package
23:30:28 <quchen> Is anyone here using the Iosevka font? I can’t seem to get the <*> and <+> ligatures to work (in Atom).
