00:29:14 <zariuq> ahoj
01:05:24 <Gurkenglas> What do I do about invalid byte sequence arguments? http://lpaste.net/9086871142894927872
01:08:29 <Gurkenglas> MarcelineVQ, but currently stack solver --update-config after stack solver tells one to rerun runs through the process again without having the answer cached
01:11:23 <Gurkenglas> ("stack striplogs.hs --coverage" doesn't seem to generate any .tix files)
01:14:06 <mud> Gurkenglas: Is there a missing command in that? I'm not sure what --coverage applies to.
01:15:05 <Gurkenglas> stack striplogs.hs runs it like a script, note that there's extra stuff at the top of my last paste
01:16:16 <barrucadu> I've had issues before with things run through `stack exec` not working with unicode input, but I can't remember what I did to fix it
01:16:37 <Gurkenglas> (took the general structure of that extra stuff line from https://github.com/commercialhaskell/stack/wiki/Script-interpreter )
01:17:04 <Gurkenglas> Why does stack have anything to do with this, it's at the data level :(
01:17:57 <Gurkenglas> (as in it's in the file that the program computed by main reads and works on)
01:18:15 <barrucadu> If you're on Linux, the LANG, LC_ALL, and LC_CTYPE environment variables affect what happens if you read a file as text
01:18:26 <Gurkenglas> I'm on Windows
01:18:50 <barrucadu> No idea then, but I'd still guess something locale related
01:18:52 <mud> Gurkenglas: I don't see --coverage existing on anything to do with the script interpreter, and it's not a general option. I think you need an actual build command for --coverage to do anything.
01:21:18 <Gurkenglas> I suppose I'll move it into the apps folder and add an executable entry to the .cabal
01:21:53 <geekosaur> on windows ghc determines local from the current console code page. "chcp 65001"
01:22:05 <geekosaur> note that that mode can break at least some releases of git
01:22:14 <geekosaur> *locale from
01:28:39 <Gurkenglas> I know some of those words. I tried executing chcp 65001 and afterwards running the strip logs thingy still crashes the same way
01:29:18 <Gurkenglas> http://lpaste.net/6241204311406149632 complains that there are no tix files, I thought running the compiled program is supposed to generate tix files?
01:30:20 <geekosaur> https://stackoverflow.com/questions/10779149/unicode-console-i-o-in-haskell-on-windows
01:30:35 <geekosaur> that sounds unrelated to locale/code page
01:31:05 <Gurkenglas> but I'm not trying to input or output unicode characters through the console
01:31:36 <geekosaur> the console bit is a hack. windows has no other reasonable way to represent encoding
01:31:53 <geekosaur> (really the unix way is also a hack as in theory you could be using a different encoding for each file, filenames, etc.)
01:32:03 <Gurkenglas> I suppose the haskell logs contain unicode characters somewhere and haskell crashes on readfile or filter or writefile or something
01:32:36 <Gurkenglas> I don't think Hexchat crashed on windows when someone used unicode characters
01:34:43 <geekosaur> hexchat would only encounter it if logging, and possibly not even then
01:35:52 <geekosaur> (note that if it does the usual (and technically wrong) C thing of writing to a blocking fd and not checking the result for a full write, everything will Just Work(tm))
01:36:11 <Gurkenglas> How would I go about getting the logs from http://tunes.org/~nef/logs/haskell/ into a format that my Haskell programs can interact with?
01:36:21 <Gurkenglas> It's fine if the unicode characters are simply deleted.
01:36:34 <geekosaur> ghc's runtime is pedantic about checking that the length written is the length intended, and the Windows bug is that the amoutn written is misreported
01:37:42 <Gurkenglas> (I already have the files downloaded.)
01:37:54 <geekosaur> *reading* is fine. the bug is in WriteFile()
01:38:05 <geekosaur> (win32 call)
01:38:30 <Gurkenglas> Okay, what argument to filter will remove the lines that contain a nonwritable character?
01:40:34 <geekosaur> ...
01:40:46 <Gurkenglas> Or, which unicode characters aren't writable?
01:40:48 <geekosaur> if you are lucky then you can esclude anything with a codepoint > 127
01:41:01 <geekosaur> if you are unlucky, the answer is that it depends on the font, and you can't do anything abotu that
01:41:30 <Gurkenglas> How do I find out the codepoint of a character?
01:41:44 <geekosaur> :t ord
01:41:45 <lambdabot> Char -> Int
01:43:13 <Gurkenglas> I'll just throw filter ((<=127) . ord) at all the file strings then
01:44:58 <Gurkenglas> Nope, still crashes the same way.
01:45:43 <Gurkenglas> Which unicode characters aren't writable depends on the font, so I can't figure out whether all the spaces aren't writable or the c's are the culprit?
01:46:57 <geekosaur> the question there si whether it's got e.g. a control character that is attempting to be rendered as text instead of a control character
01:47:44 <geekosaur> I still suspect this does not have anything to do with the actual problem, unless you have actual proof that this and this alone is why you aren't getting tix files
01:49:13 <Gurkenglas> It's not about the tix files, that's just an additional weirdness on the way to figuring out where exactly it crashed (which you since told me is writeFile), I just want those logs filtered and compacted into one file.
01:50:55 <Gurkenglas> It appears to fail in "07:11:39 <Taneb> I'm using QuickCheck and I have a test that occassionally fails, and it writes "Randomized with seed 1741453704". How can I use that seed to replay the test", right after the a in "and it writes".
01:58:35 <Gurkenglas> Is there a shorter way to write "stack build parrot:exe:parrot-strip-logs && stack exec parrot-strip-logs"?
02:05:38 <Gurkenglas> geekosaur, can I just write one character at a time into a file handle and discard any exceptions?
02:06:13 * zaoqi implemented a Pure Value Pure Functional Sized Lazy Language
02:09:37 <callmecabman> Hello! I've recently discovered a paper about a categorical view on regular languages, but is there a unifying categorification of all the Chomsky hierarchy?
02:11:51 <callmecabman> regular languages are kinda obvious because they are recognized by finite state automata and these are inherently comonadic I suppose
02:27:56 <Gurkenglas> How much slowdown do I get for appending on character at a time to a file?
02:32:24 <Gurkenglas> Huh, it still crashes with parrot-strip-logs.EXE: res/logs/15.01.01: hGetContents: invalid argument (invalid byte sequence) even when I wrap each line of appendFile in a try @SomeException. Also the lines which it fails at do not look like they're about to degenerate into eldritch unicode. Halp?
02:34:18 <mauke> I don't know what you're doing but it's crashing in hGetContents and getting an encoding error
02:34:31 <mauke> appendFile doesn't seem relevant
02:37:32 <MrSkeltal> callmecabman, comonadic?
02:43:12 <Gurkenglas> I switched to Bytestring.Char8 and it all just worked. :/
03:05:08 <osa1> GHCi can infer type of an expression but if I copy the same expression to the file and give it a name (at the top-level) it gives a type error. any ideas what extrension may be causing this?
03:06:16 <dminuoso> osa1: GHCi has some extensions enabled by default
03:06:16 <fakenullie> osa1: what error
03:06:49 <osa1> oh wait, in fact I even have a .ghci file that enables some extensions
03:07:16 <osa1> heh, monomorphism restriction strikes again
03:08:33 <cocreature> -XExtendedDefaultRules defaults can also cause things like this
03:08:37 <osa1> ugh!! it doesn't typecheck when I copy the inferred type to the file
03:12:58 <osa1> OK, here's the code: http://lpaste.net/359614 the commented-out signature is directly copied from GHCi's :t output
03:13:01 <osa1> but it doesn't type check
03:24:47 <geekosaur> and of course not including the type error.
03:26:11 <osa1> added it now
03:33:35 <geekosaur> I think the problem there is 'path' is not inferrable from the RHS
03:33:59 <geekosaur> so the type may be technically correct but no instance can ever be inferred for it
03:36:34 <osa1> geekosaur: I can use TypeApplications for that
03:37:19 <osa1> AllowAmbiguousTypes doesn't fix it
03:38:30 <geekosaur> although I can;t find Data.Open.Union module anywhere (nor can hayoo)
03:39:03 <osa1> http://hackage.haskell.org/package/freer-0.2.4.1/docs/Data-Open-Union.html
03:39:18 <geekosaur> one of the other open unions modules mentions an error like that as meaning a specific misuse...
03:41:59 <geekosaur> I have no idea how you force it to pick one of those two instances...
03:43:01 <osa1> I don't understand why is this related with the library code. if I can't annotate the expression with its inferred type that looks like a GHC bug to me
03:46:57 <MarcelineVQ> what are the steps you take to see that error?
03:47:40 <osa1> (1) load the module into GHCi (2) :t getContents (3) copy :t output to the file
03:48:55 <MarcelineVQ> :t getContents   results in that error?
03:48:56 <lambdabot> error: parse error on input ‘in’
03:49:05 <MarcelineVQ> lambdabot: shush dear :>
03:49:36 <osa1> MarcelineVQ: no :t works fine, if you copy :t output to the file as the type annotation it doesn't type check
03:51:55 <geekosaur> osa1, something may have changed since ghc 7.8, or something may be wrong with your definition of GetContents
03:52:02 <MarcelineVQ> I don't understand those words used in that order :X
03:52:35 <geekosaur> it is not necessarily a bug in ghc because :t does not resolve typeclasses, only actually fully resolving all types does (as is done during full compliation)
03:53:19 <geekosaur> just like :t will happily tell you that dividing two values that have Integral iinstances requirea a type that is (Floating a, Integral a) => ...
03:53:46 <geekosaur> :t (/)
03:53:48 <lambdabot> Fractional a => a -> a -> a
03:53:48 <geekosaur> not Floating
03:53:53 <geekosaur> Fractional, yeh
03:54:07 <osa1> what's wrong with (Fractional a, Integral a)  constraint?
03:54:40 <geekosaur> they're opposites, as defined by the Num hierarchy?
03:54:45 <geekosaur> but you can;t describe that in a type
03:55:27 <geekosaur> if it's Integral then it does not support fractions by definition. so it can't also be Fractional
03:56:12 <geekosaur> but the point is :t does not check instances *at all*. only actually applying it does.
03:56:36 <geekosaur> and this is not a bug
03:57:01 <osa1> do you mean even if I could give a type to my definition it'd be impossible to use because no typeclass instance will ever satisfy the constraints?
03:57:14 <geekosaur> in this case the problem is two instances match it
03:58:26 <geekosaur> best I can find there is that FindElem was supposed to break the loop, so something may be wrong with data File or with how you specified the FindElem
03:58:47 <geekosaur> er. not break the loop, distinguish between the two instances
03:59:09 <geekosaur> but I ended up hip deep in oleg code to find that, so I'm way outside my depth....
03:59:29 <osa1> hmm I think I can choose between these two instnaces with a `r ~ r' ': rs` constraint or something like that
04:22:13 <codeshot> Data.Map has a semigroup instance that prefers values from the left, but I want a map that prefers values from the right (ie, overrides). What's the best way to implement my newtype so I don't lose natural instances that Data.Map comes with?
04:25:36 <codeshot> ie in pseudocode, instance (x != Semigroup) => x MyType where forall f. f (MyType x) = MyType $ f x; instance Semigroup MyType where (<>) = unionWith $ flip const
04:29:29 <cocreature> codeshot: you can’t do that. you’ll either need to explicitely derive the instances you care about (via GeneralizedNewtypeDeriving) or only use your newtype when you need the custom instance and unwrap it afterwards
04:30:17 <codeshot> ok thanks. I prefer to use this newtype all the time so I guess I'll forward the other instances as and when I need them
04:50:37 <codeshot> Is it possible to hide specific instances when importing a module?
04:51:06 <cocreature> no
04:51:14 <cocreature> instances are global
04:56:18 <jvliwanag> If I have `f :: a -> b -> c -> m d`. How can I transform f by using `lift` such that I end up with `g :: a -> b -> c -> t m d` ?
04:57:47 <cocreature> jvliwanag: what constraints do you have on t and m?
04:59:03 <cocreature> :t \f x y z -> lift (f x y z)
04:59:03 <jvliwanag> t is a monad transformer. so long way is `g a b c = lift $ f a b c`. Which is too long to type hehe
04:59:04 <lambdabot> (Monad m, MonadTrans t1) => (t2 -> t3 -> t4 -> m a) -> t2 -> t3 -> t4 -> t1 m a
04:59:20 <cocreature> well just define a helper function if you find yourself using this often
04:59:41 <jvliwanag> hehe oh alright :)
05:32:23 <Gurkenglas> Can I get coverage information about my application code without moving it into a library compartment?
05:41:02 <fendor> Gurkenglas, the hpc tool can generate it if i am correct in memory
05:41:17 <fendor> it is part of stack
05:41:30 <fendor> rather integrated than part
05:41:38 <Gurkenglas> I thought that one consumes the tix files, k
05:42:21 <fendor> i am pretty sure it also generates them
05:43:15 <fendor> you can also publish it to coveralls.io with the stack-hpc-coveralls tool
05:51:42 <Gurkenglas> What encoding does Freenode use? Apparently my problems came from trying to use Data.Text.Encoding.decodeUtf8 on an IRC message
05:53:23 <Rembane> Gurkenglas: Latin-1 or maybe Latin-15
05:53:34 <Rembane> Gurkenglas: Or rather, try them and see what happens.
05:53:46 <liste> Gurkenglas: I think IRC messages have different encodings
05:53:55 <liste> IRC is a binary protocol, it's up to the clients
05:54:25 <Gurkenglas> Why doesn't Data.Text.Encoding have a "try all the encodings and use the one that doesn't crash" decoder ._.
05:54:33 <Rembane> Build one! 
05:54:41 <liste> Gurkenglas: usually that's a bad idea
05:54:50 <liste> but IRC leaves little choice
05:55:18 <liste> Gurkenglas: check if there's a valid UTF-8 sequence - if there is, use UTF8, otherwise latin-1
05:56:02 <Gurkenglas> UTF8 is what I already tried and which took me until now to notice was the culprit
05:57:41 <Gurkenglas> Where's encodeLatin1? o.o
06:17:30 <lyxia> what a curious omission
06:19:43 <sarna> hey guys, how would I modify a structure while iterating over another one? I've got a list, and based on that list, I need to modify coordinates
06:20:01 <sarna> I'd just modify them in place in an imperative language, for looping over my list
06:20:10 <sarna> but idk how to do it here
06:21:05 <lavalike> you might want to produce a different list, collecting all of the results you want
06:21:36 <sarna> it'd be nice. but how? recursion?
06:21:57 <lavalike> sure!
06:22:04 <kuko1> Gurkenglas: see also https://hackage.haskell.org/package/text-icu-0.7.0.1
06:22:04 <sarna> alright, I'll try. thanks
06:23:03 <kuko1> Gurkenglas: the icu library (http://userguide.icu-project.org/conversion/detection) has some (heuristic) encoding detection, but there are no haskell bindings afaik
06:31:01 <sphinxo> how is this possible?  arr
06:31:04 <sphinxo> fromList [("a",5 % 1),("~constant",1 % 1),("x",3 % 1),("~out",0 % 1),("a",0 % 1)]
06:31:22 <sphinxo> ( sorry, it's a map with duplicate keys )
06:32:09 <sphinxo> (Data.Map)
06:32:20 <lavalike> how are you constructing it?
06:32:32 <Tuplanolla> "If the list contains more than one value for the same key, the last value for the key is retained."
06:32:40 <Tuplanolla> Documentation is useful; you should read it, sphinxo.
06:33:01 <Gurkenglas> > M.toAscList . M.fromAscList $ [("a",5 % 1),("~constant",1 % 1),("x",3 % 1),("~out",0 % 1),("a",0 % 1)]
06:33:03 <lambdabot>  [("a",5 % 1),("~constant",1 % 1),("x",3 % 1),("~out",0 % 1),("a",0 % 1)]
06:33:10 <sphinxo> ahhh, thanks
06:33:17 <Gurkenglas> No need to be so mean, Tuplanolla :P
06:57:17 <bigos> I wanted to do something practical with haskell and decided to try to install gtk libraries, now I am in a mess on different machines stack and cabal work differently, I get the errors that do not make sense and would like to start again. how do I delete all the cabal and stack mess and install gi-gtk properly?
06:58:11 <bigos> I am a haskell noob
06:58:50 <bigos> part of the problem is contradictory pieces of information that has changed over the years
06:59:09 <srk> gtk was always painful to work with for me
06:59:26 <bigos> I'm not sure I was following the right instructions for setting up cabal and stack
06:59:48 <srk> though even qt seems hard to me with haskell
06:59:58 <Aditu> hey!  trying to find a library like data-has.  It was mentioned in the comments on https://www.fpcomplete.com/blog/2017/06/readert-design-pattern but now I can't see the comments
07:00:29 <srk> bigos: does errors relate to headers? do you have gtk headers installed?
07:00:56 <bigos> no, it's not headers
07:01:14 <bigos> setup-Simple-Cabal-1.22.5.0-x86_64-linux-ghc-7.10.3: The pkg-config package
07:01:14 <bigos> 'gobject-introspection-1.0' version >=1.32 is required but it could not be
07:01:14 <bigos> found.
07:01:23 <bigos> .... i guess it's dependencies
07:01:31 <srk> that's headers ;)
07:01:34 <srk> yeah, dependencies
07:01:50 <bigos> i was barking at wrong tree?
07:02:34 <Aditu> found the comments on disqus's site!  the package I was looking for is ether
07:03:01 <srk> bigos: https://github.com/leksah/leksah#step-1-install-c-libraries might be helpful
07:09:03 <bigos> I got somewhere because the errors have changed, I have to go now, still I would appreciate the answer how do I start again wil clean cabal and stack. Do I just remove ~/.cabal nad ~/.stack folders ?
07:09:29 <ertes> bigos: and ~/.ghc
07:10:20 <bigos> thanks
07:10:24 <bigos> bye
07:20:01 <codeshot> I've got a data DefState { _defines :: T }; makeLenses ''DefState; What's the neat way to write a binary operator that updates _defines ?
07:20:17 <codeshot> I'm not sure that DefState is a Functor yet, but maybe it always necessarily is
07:20:31 <codeshot> I think it's not
07:28:18 <pavonia> codeshot: Is that your actual data type definition? The syntax seems wrong
07:30:39 <Gurkenglas> set defines :: T -> DefState -> DefState -- codeshot
07:31:53 <Gurkenglas> or "(defines .~) :: T -> DefState -> DefState" - in functional programming, .~ as a binary operator produces functions DefState -> DefState which you can then compose :3
07:58:10 <haskellnoob> Hello, so I'm trying to make a really basic IO program, https://hastebin.com/awuxadedoy.hs, that takes each input line and adds them as a list element and it should add elements until a null line is input, but for some reason it always stops after 3 inputs and inputting a null line doesn't have any effect. :(
07:58:21 <haskellnoob> would really appreciate some suggestions
07:59:56 <Gurkenglas> haskellnoob, that shouldn't even compile, line 5 returns no list
07:59:58 <osa1> haskellnoob: that program is not even well typed, I suspect you're running a different code. show us the acutal code you're running.
08:02:10 <haskellnoob> but it runs? o.O
08:02:34 <pranz> haskellnoob: it doesn't
08:02:52 <pranz> if I fix the type error and run that function I have no problems
08:03:21 <pranz> haskellnoob: we need more context to help you
08:03:32 <haskellnoob> that is literally my whole file
08:03:51 <pranz> so you load it into ghci? or how do you run it?
08:04:06 <haskellnoob> ghc --make yeah
08:04:46 <haskellnoob> it gives me an error about main not being defined but it runs, it just doesn't do what I want it to :s
08:05:17 <haskellnoob> first time I'm trying to do anything with IO so excuse all the errors
08:06:20 <pranz> haskellnoob: hmm, very weird that it compiles at all, but chances are that code isn't running at all whene you're running the program
08:06:41 <pranz> try adding main = readLinesUntilEmpty >> return ()
08:06:45 <pranz> and compile it again
08:08:24 <pranz> btw, if you're just writing small functions and  testing them I reccomend using ghci, it's pretty nifty for that sort of thing
08:08:37 <haskellnoob> okay, that doesn't compile, you're right. Thanks
08:08:53 <haskellnoob> Even for IO?
08:09:27 <pranz> yes, ghci handles IO automatically
08:09:51 <pranz> so you can just type `readLinesUntilEmpty` in ghci after you loaded the file and it works like you'd expect
08:10:47 <haskellnoob> pranz: so how do I terminate the program when I give it an empty line?
08:11:25 <pranz> if the function terminates, ghci will go back to the prompt. if you want to quit ghci, then type `:q`
08:12:59 <sarna> hi guys, would you please help me with this? I get a parse error with this code https://p.teknik.io/Simple/bh8h6
08:13:03 <haskellnoob> yeah but how do I terminate the function when it's given an empty line? Line 7 in my code is illegal but I'm not sure how to go about "stopping" it so to speak. 
08:14:00 <pranz> haskellnoob: oh, right. You want to return an empty list instead of `return ()`
08:14:18 <haskellnoob> ah, gotcha! Thanks for taking your time, pranz
08:14:37 <pranz> no problem :)
08:15:17 <pranz> sarna: you need parantheses around `s:ss`
08:15:33 <sarna> pranz: aw, thank you
08:16:53 <haskellnoob> pranz: so what does "main = readLinesUntilEmpty >> return ()" do exactly? 
08:18:24 <sarna> hm, now it says ss is not in scope. any ideas? I'd say it /is/ in scope
08:18:27 <pranz> haskellnoob: are you familliar with the do-notation? that does the same thing as `main = do <newline> readLinesUntilEmpty <newline> return ()` just on one line
08:19:21 <haskellnoob> ah, slick!
08:19:45 <pranz> (>>) is just a function with the signature "Monad m => m a -> m b -> m b", which may look a bit weird at first but it essentially just says do one thing first, then discard that result and do the next thing
08:19:58 <sarna> hm, now it says ss is not in scope. any ideas? I'd say it /is/ in scope
08:20:08 <sarna> oh sorry, didn't mean to send that
08:22:02 <pranz> sarna: https://p.teknik.io/RfIn5 this works for me fine
08:22:34 <sarna> pranz: yeah, it works. turns out it was a typo earlier in my code :) thanks
08:22:49 <jfg> any reason why singleton constructors like SNil don't have Show instances out of the box?
08:23:17 <jfg> not a big deal but it would be a minor convenience
08:25:16 <M4GNV5> from a [FilePath] how do i filter all entries where doesFileExist returns False?
08:27:08 <pranz> M4GNV5: look into filterM
08:28:17 <M4GNV5> hmm yeah i guess it must be something like filterM (not . doesFileExist) x but not doesnt accept monads. And it seems like there is no notM?
08:29:20 <pranz> @type fmap not
08:29:24 <lambdabot> Functor f => f Bool -> f Bool
08:29:58 <pranz> M4GNV5: ^
08:30:08 <sarna> pranz: yeah, it works. turns out it was a typo earlier in my code :) thanks
08:30:18 <sarna> shucks
08:30:31 <pranz> sarna: problem with your IRC client? :p
08:30:34 <sarna> I'm off, bc I spam out of incompetence
08:30:35 <sarna> yes
08:30:45 <sarna> I'm sorry, my god
08:31:36 <M4GNV5> pranz, ahh now i finally get the fmap thing. thanks :)
08:36:13 <MrSkeltal> suppose I am to implement haskell plugins in a certain C program,
08:36:23 <MrSkeltal> from the perspective of the module system, how would that work
08:41:41 <hpc> MrSkeltal: as in, the program is C and you are writing a plugin that is haskell?
08:42:17 <hpc> MrSkeltal: take a look at the FFI, specifically how foreign export works
08:42:29 <hpc> you might have to write a C wrapper anyway, to control the ghc RTS
08:42:45 <Tuplanolla> You definitely need that, hpc.
08:42:59 <MrSkeltal> yeah that is understood,
08:43:09 <MrSkeltal> but what will the plugin writer do?
08:43:30 <hpc> so, the plugin system for that program has some API
08:43:36 <MrSkeltal> right
08:43:45 <hpc> you need to write C code that matches the API on the "front" end of your code
08:43:54 <hpc> and on the "back" end, it calls haskell code
08:44:08 <hpc> to do that you do some resource management stuff with the ghc runtime system
08:44:15 <MrSkeltal> there's an "init" entrypoint, and a bunch of "hook" type things
08:44:27 <hpc> and you call exported haskell functions that are made to match the C ABI
08:44:35 <MrSkeltal> I've already written a lua plugin for it, but not sure how haskell fits into this picture
08:44:47 <hpc> then in haskell, you write foreign exports that match what the "back" end of your C code expects
08:45:02 <hpc> you're putting together 3 different puzzle pieces
08:45:08 <hpc> the program, a thin C plugin, and haskell
08:45:16 <MrSkeltal> I know all of this
08:45:21 <MrSkeltal> I'm interested in the details
08:45:37 <MrSkeltal> in particular, what would the haskell interface look like,
08:45:56 <MrSkeltal> and how to make sure haskell hooks passed into C aren't collected
08:46:22 <Tuplanolla> I once wrote this to do something similar, MrSkeltal: https://github.com/Tuplanolla/ld-prehaskell
08:46:33 <hpc> see https://wiki.haskell.org/Foreign_Function_Interface - https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/ffi-chap.html
08:46:54 <hpc> you have a lot of freedom in what the C to haskell end looks like, because you control both ends
08:47:00 <hpc> so go with whatever is most comfortable
08:48:02 <MrSkeltal> hpc, that's what I'm trying to figure out
08:49:32 <MrSkeltal> what should the "script" look like
08:51:11 <MrSkeltal> a module exporting an "init" function, and invoking functions from a helper module?
08:51:51 <hpc> it depends on what the plugin api looks like and what you want your plugin to do, and which pieces you want to write in C vs haskell
08:52:05 <hpc> this is an api design problem, for which i suggest the feynmann method
08:52:09 <MrSkeltal> 1509291843 [18:44:03] <MrSkeltal> there's an "init" entrypoint, and a bunch of "hook" type things
08:52:12 <hpc> 1 - figure out the types available to you
08:52:16 <hpc> 2 - think really hard
08:52:19 <Tuplanolla> Oh no.
08:52:28 <hpc> 3 - try something
08:52:30 <hpc> 4 - iterate
08:52:46 <Tuplanolla> I was expecting "3 - write down the solution" there.
08:53:17 <hpc> heh, that's technically what it should be but only feynmann can get it right the first time
08:53:20 <Welkin> hpc: use your sense of smell to crack combination locks?
08:53:53 <Welkin> Tuplanolla: I think you mean Schroedinger
08:54:10 <MrSkeltal> hpc, ok, suppose that the C API consists of two pieces
08:54:49 <hpc> the implicit important piece is in step 2, that you learn something that lets you ask more specific questions, or reduce the problem from "i can do anything" to a series of tradeoffs, etc
08:55:05 <MrSkeltal> there's  int hook_something(int (*handler)(somedata, void *), void *data); void unhook_something(int);
08:55:17 <MrSkeltal> and then your plugin has to export 'void init(void);'
08:55:28 <Tuplanolla> Usually you reduce the problem from "I can do anything" to "I can't do anything".
08:56:40 <hpc> MrSkeltal: a good first pass is probably to write the init function in C, and your handler function(s) in haskell
08:57:09 <MrSkeltal> but I'd like init to be in haskell too
08:57:26 <MrSkeltal> I want haskell to be able to add its own hooks
08:57:27 <iqubic> MrSkeltal: If that's also in haskell, then what is in C?
08:57:38 <MrSkeltal> iqubic, a thin wrapper?
08:57:41 <hpc> well you need at least a little bit of C outside the haskell to run hs_init() or whatever it's called
08:57:49 <MrSkeltal> hpc, sure sure
08:57:57 <iqubic> What would this wrapper do exactly?
08:58:22 <hpc> and that's the outermost layer of the plugin, so it automatically has to expose init()
08:58:43 <hpc> this also saves you having to foreign import hook_something and unhook_something
09:00:36 <MrSkeltal> hmm
09:00:40 <MrSkeltal> one thing I didn't realize
09:00:45 <iqubic> Yes...
09:01:05 <MrSkeltal> if I want multiple scripts
09:01:15 <MrSkeltal> I either spin up multiple ghcs,
09:01:20 <MrSkeltal> or dynamically link haskell in my plugin
09:01:27 <iqubic> Or use threading.
09:01:31 <MrSkeltal> multiple ghc rtses I mean
09:01:31 <iqubic> I think.
09:01:35 <iqubic> AH.
09:01:42 <hpc> what's a script in this context?
09:01:55 <hpc> a handler that's been hooked?
09:01:58 <MrSkeltal> no
09:02:34 <iqubic> Is it a shell script?
09:02:39 <MrSkeltal> there's a program that has support for dynamically loadable plugins,
09:02:47 <iqubic> what program?
09:03:10 <MrSkeltal> and the agreement is that a particular programming language plugin has to support for loading multiple "scripts" in that language
09:03:28 <MrSkeltal> and those scripts work like plugins of their own
09:03:44 <iqubic> What is the program you are writing plugins/scripts for?
09:03:51 <iqubic> Stop being so abstract please
09:03:54 <MrSkeltal> iqubic, is that important?
09:04:12 <iqubic> It will help us better understand what you want to do.
09:06:37 <MrSkeltal> well in this case
09:06:52 <MrSkeltal> I think this resolves to writing a super thing C wrapper to call hs_init/hs_exit
09:07:11 <MrSkeltal> and then the rest happens in a helper haskell module that does ffi all over the place,
09:07:21 <MrSkeltal> and then dynamically loads haskell modules with ghc-as-a-library
09:07:47 <MrSkeltal> sounds sane?
09:08:07 <MrSkeltal> super thin* C wrapper
09:08:20 <iqubic> It might. I wish I knew what program you were using.
09:16:23 <Gurkenglas> Is there a way to profiling report that shows me the source file with colors according to the ressources spent there?
09:16:36 <Gurkenglas> Ow, my english.
09:25:40 <ongy> hm, is there a reason filter is on [a] and not Foldable f => f a?
09:28:35 <mud> ongy: For the result to be the same f, it'd have to be more than Foldable, right?
09:29:24 <ongy> mud: I was thinking (a -> Bool) -> t a -> [a]. Not sure if there's any reasonable more general thing to implement it on. just more liberal input
09:30:08 <mud> Seems to me like it'd be a bit funny for it to kind of convert to a list, but ya that'd be possible.
09:30:37 <Tuplanolla> You need to be able to reconstruct the data structure in some sense, ongy.
09:31:33 <Tuplanolla> While `Functor` gives you structure-preservation, `Foldable` gives you structure-collapsing and `Traversable` gives you both at the same time, none of them provide structure-altering.
09:31:43 <ongy> Tuplanolla: I was thinking about more liberal input, not necessarily keep the output the same
09:31:52 <ongy> but yea, Data.Foldable.toList is a thing, which makes it easy enough
09:32:12 <Tuplanolla> You could generalize to produce `Monoid`, I reckon.
09:38:00 <hello> hi
09:38:03 <hello> all
09:38:15 <hello> I am trying to install something using stack but it does not
09:38:59 <MrSkeltal> Tuplanolla, Alternative
09:39:51 <MrSkeltal> :t (foldr ((<|>) . pure) empty .) . (. toList) . filter
09:39:52 <lambdabot> error:
09:39:52 <lambdabot>     Ambiguous occurrence ‘toList’
09:39:52 <lambdabot>     It could refer to either ‘F.toList’,
09:39:56 <MrSkeltal> :t (foldr ((<|>) . pure) empty .) . (. F.toList) . filter
09:39:58 <lambdabot> (Foldable t, Alternative f) => (a -> Bool) -> t a -> f a
09:40:19 <mud> hello: Can you give more info?
09:40:36 <hello> stack install Language.ECMAScript3.Parser
09:40:51 <hello> Error parsing targets: Directory not found: Language.ECMAScript3.Parser
09:42:56 <hello> not very verbos
09:42:57 <mud> hello: That's a module, you don't install modules. Also, is this an executable or a library? If it's a library, you just state your itention to depend on it when you build the actual thing you want, stack install isn't sensical there.
09:43:46 <int-e> https://hackage.haskell.org/package/language-ecmascript presumably
09:44:01 <hello> so how do I install it?
09:44:01 <int-e> so  stack install language-ecmascript
09:44:21 <mud> Well, do you want it as an executable or are you trying to use it as a library?
09:44:48 <mud> Since it doesn't appear to have an executable, 'stack install' likely isn't what you want.
09:45:05 <mud> In what context are you trying to use this? Is there a .cabal file?
09:45:55 <hello> library
09:47:29 <mud> Well, if there's a .cabal file, depend on language-ecmascript in the .cabal file in the build-depends section and then just build the thing with stack and it'll take care of it.  If not, run whatever you're trying with the --package language-ecmascript flag (for example stack ghci --package language-ecmascrapt), but that's only if you have no context at all
09:49:06 <hello> so stack install is enough
10:00:27 <tinco> if I have a Data.Vector of (Int, Decimal, Decimal), will the vector contain those values or still thunks of those values? I can't seem to make a Vector type with strict entries
10:01:26 <tinco> I'm reading a dataset that I estimate should be around 400MB, but Haskell allocates a lot more than that it seems
10:02:09 <tinco> it jumps to 8GB
10:02:41 <mud> If you want to not have thunks, as far as I know you need the Unboxed variants of whatever array-ish types. I don't know how Vector will be able to do tuples like that though.
10:02:43 <iqubic> :t (<|>)
10:02:44 <lambdabot> Alternative f => f a -> f a -> f a
10:03:02 <tinco> mud: ah so using Vector.Unboxed is the only way?
10:03:22 <tinco> I gave up on it because creating Unboxed instances seemed too arcane
10:03:51 <mud> There should already exist instances for Int ... oh Decimal, I don't know about that one, probably not.
10:04:22 <tinco> yeah
10:05:01 <nshepperd_> Do you need to use Decimal
10:05:20 <mud> What about Ratio Int, does that have one, and can you use that to represent? Or maybe Double if that fits the bill?
10:05:34 <Gurkenglas> A version of :t \f -> asum . fmap pure . filter f . F.toList that works for left-infinite structures would be nice
10:05:38 <tinco> I think so, maybe I could get away with very large ints or something
10:06:40 <tinco> I guess double is an option, I liked the idea of not having to worry about precision
10:07:18 <tinco> hmm it's using 28gb right now :P
10:07:24 <tinco> I wonder if it'll crash at some point
10:07:39 <tinco> it could ofcourse be that I have a bug and it's not actually doing anything useful..
10:08:11 <tinco> oh nvm it's actually streaming, I can track progress
10:10:36 <tinco> wow it finished
10:11:10 <tinco> well who cares about using 30gb of ram on a 16gb machine, it finished within 10 minutes or so :P
10:11:53 <mud> xD
10:13:54 <hello> how do I find name for stack from a module name?
10:15:59 <nshepperd_> Gurkenglas: foldMap (\x -> Alt (if f x then pure x else empty))?
10:18:08 <cocreature> hello: you mean the package name?
10:19:52 <Gurkenglas> Ah, yes, thanks. It seems we're missing afilter and monoidfilter.
10:20:31 <hello> I guess so
10:20:45 <Gurkenglas> Also asumOf should do this instead of using foldrOf.
10:21:23 <nshepperd_> witherable is also a thing
10:21:56 <iqubic> :t asumOf
10:21:58 <lambdabot> Alternative f => Getting (Endo (f a)) s (f a) -> s -> f a
10:22:08 <iqubic> WHAT THE HECK!?!?!
10:22:47 <nshepperd_> Haha
10:23:04 <iqubic> : witherable
10:23:08 <iqubic> :t witherable
10:23:10 <lambdabot> error: Variable not in scope: witherable
10:23:56 <knupfer> How can I examine the head of a type level string?
10:24:19 <knupfer> (without symbolVal)
10:24:55 <knupfer> I already found out, that I can examine the tail, if I know at compiletime the head.
10:25:08 <knupfer> foo :: Proxy (AppendSymbol "a" s) -> Proxy s
10:27:55 <hello> how can I get list of installed packages ?
10:30:33 <nshepperd_> hello: search for the module name on hackage.haskell.org and you'll find a package that provides it
10:32:59 <knupfer> Is what I want even possible?
10:35:23 <nshepperd_> knupfer: use a type checker plugin. Looks like https://github.com/konn/ghc-typelits-symbols is one that does what you want
10:36:07 <iqubic> What library should I use as a testing framework in haskell?
10:36:47 <iqubic> I hear QuickCheck is a thing that works.
10:36:52 <iqubic> Any others?
10:37:17 <knupfer> nshepperd: That's great, thanks for the pointer.
10:37:53 <knupfer> The appending is already provided in ghc8.2.1, let's hope that the others will find it's way as well...
10:40:10 <knupfer> Hm, it's not on hackage, but I'd need the functionality for a library...
10:40:39 <hello> I would like to list of dependencies for a project... it has a cabal file
10:41:17 <knupfer> hello: look into the cabal file in the section "build-depends"
10:41:28 <hello> I mean installed dependencies
10:42:57 <hello> how to install dependencies from a cabal file automatically?
10:46:33 <iqubic> hello: Just add the stuff to the build-depends section of the .cabal file and it should work.
10:46:49 <knupfer> hello: cabal update && cabal build
10:47:19 <iqubic> hello: Are you in a stack project, or a plain cabal project?
10:47:59 <hello> plain cabal
10:48:19 <iqubic> Ah, well then IDK
10:49:10 <hello> from atom/ haskell-ide how do I do that?
10:59:30 <cerebral_monkey> I have heard that in general it is impossible to determine if two expressions are equivalent, and that this is really the halting problem in disguise. Does anyone know where I can find more information, or maybe a proof? My google foo has failed me.
11:00:08 <hpc> two expressions in what language?
11:00:15 <suzu> if i can tell if two functions are the same, then i can use that to tell if a function is equal to bottom
11:00:20 <cerebral_monkey> Two arbitrary expressions in any language
11:00:42 <suzu> but i can't tell if a function is equal to bottom, so it can't be possible to tell if two functions are the same
11:00:43 <cerebral_monkey> suzu: What do you mean by bottom? Forgive me, I am new to Haskell and computer science.
11:00:49 <suzu> bottom meaning it does not halt
11:00:56 <cerebral_monkey> Ah, I see, thank you.
11:01:18 <suzu> that's the proof. pretty short
11:01:33 <cerebral_monkey> A short proof is good enough for me :P
11:01:48 <suzu> :)
11:03:17 <fakenullie> we just need that Chaitin's oracle
11:21:03 <fakenullie> :t liftA2 (+*) (+1) (+2)
11:21:05 <lambdabot> error:
11:21:05 <lambdabot>     • Variable not in scope: (+*) :: a -> a -> c
11:21:05 <lambdabot>     • Perhaps you meant one of these:
11:21:15 <fakenullie> :t liftA2 (*) (+1) (+2)
11:21:17 <lambdabot> Num c => c -> c
11:21:24 <fakenullie> :t liftA2 (+*) (+1) (+2) 3
11:21:25 <lambdabot> error:
11:21:26 <lambdabot>     • Variable not in scope: (+*) :: Integer -> Integer -> t
11:21:26 <lambdabot>     • Perhaps you meant one of these:
11:21:30 <erisco> (+1) * (+2)
11:21:33 <fakenullie> :t liftA2 (*) (+1) (+2) 3
11:21:36 <lambdabot> Num t => t
11:21:44 <fakenullie> > liftA2 (*) (+1) (+2) 3
11:21:48 <lambdabot>  20
11:22:15 <fakenullie> > ((+1) * (+2) 3
11:22:18 <lambdabot>  <hint>:1:15: error:
11:22:18 <lambdabot>      parse error (possibly incorrect indentation or mismatched brackets)
11:22:20 <fakenullie> > ((+1) * (+2)) 3
11:22:24 <lambdabot>  error:
11:22:25 <lambdabot>      • No instance for (Num (Integer -> Integer))
11:22:25 <lambdabot>          arising from a use of ‘e_1123’
11:22:33 <dio> !List
11:23:19 <erisco> it is an instance you have to define yourself, or there is maybe a library which has it
11:23:33 <fakenullie> which instance?
11:24:03 <erisco> Num r => Num (a -> r)
11:25:17 <fakenullie> what I wanted was (a -> b -> c) -> (r -> a) -> (r -> b) -> r -> c
11:25:31 <erisco> why
11:25:54 <fakenullie> just related to Reader exercise
11:26:27 <fakenullie> (<*>) :: Reader r (a -> b) -> Reader r a -> Reader r b
11:27:08 <fakenullie> nevermind
11:28:25 <fakenullie> :t liftA2 (.)
11:28:26 <lambdabot> Applicative f => f (b -> c) -> f (a -> b) -> f (a -> c)
11:29:13 <fakenullie> :t liftA2 (.) (undefined :: r -> a) (undefined :: r -> b)
11:29:15 <lambdabot> r -> a -> c
11:41:04 <knupfer> @pl \f g h x -> f (g x) (h x)
11:41:04 <lambdabot> liftM2
11:41:12 <knupfer> fakenullie: that one?
11:41:32 <fakenullie> yeah
12:28:43 <camm> Hello. May you have problems downloading GHC with stack? I'm running `stack setup` against lts-9 and it hasn't finished in more than one hour.
12:29:52 <athan> camm: does `stack update` work?
12:30:22 <camm> I'll try it.
12:30:51 <athan> I had a funny bug like that when I was using starbucks wifi once
12:33:00 <camm> Well, it get stuck at: "Updating package index Hackage (mirrored at https://s3.amazonaws.com/hackage.fpcomplete.com/) ..."
12:36:03 <eman0n> Hi there, how can I find a certain value constructor in a list?
12:36:15 <eman0n> e.g. I have a datatype:
12:36:35 <eman0n> mydatatype = A arg1 | B arg2 | C arg3
12:37:01 <eman0n> and I have a list [(A x), (b y).....]
12:37:33 <Tuplanolla> > [x | x @ Left {} <- [Left 42, Right 13, Left 69]]
12:37:37 <lambdabot>  [Left 42,Left 69]
12:37:45 <eman0n> I want to make sure is C in this list or not, I tried to use (C _) `elem` list
12:38:14 <eman0n> but haskell gives me type error
12:38:24 <Tuplanolla> > null it
12:38:28 <lambdabot>  False
12:38:38 <Tuplanolla> Like that, eman0n.
12:40:18 <eman0n> why do you use curly brackets after left?
12:40:27 <ahihi> isC (C _) = True; isC _ = False
12:40:32 <ahihi> and then: any isC list
12:40:38 <camm> athan, after a while it throws me this:Network.Socket.recvBuf: resource vanished (Connection reset by peer)
12:42:22 <eman0n> thank you Tuplanolla
12:43:02 <eman0n> how does x @ Left {} work?
12:43:39 <Tuplanolla> It's the combination of an as-patterns and record syntax, eman0n.
12:45:30 <eman0n> awesome..
12:46:19 <eman0n> Never thought it would be like this.
12:47:05 <Tuplanolla> You could also get ahihi's code for free by using lenses.
12:48:15 <Tuplanolla> > any (has _Left) [Left 42, Right 13, Left 69]
12:48:18 <lambdabot>  True
12:49:00 <Tuplanolla> (Rather prisms in this case.)
12:49:07 <ahihi> the large pile of dependencies is arguably not "for free" ;)
12:49:17 <ahihi> (but lenses are very powerful and often worth it)
12:49:48 <eman0n> Thank you guys
12:57:01 <Johulk> Heyo!
12:57:54 <Johulk> Can someone help me with a recursive implementation of group? As in, it grabs a list of Ints , for exampke [1,2,1,2,3,4,5,6,6] and returns the list [[1,1],[2,2],[3],[4],[5],[6,6]]
12:58:26 <erisco> sort first
12:59:11 <Johulk> I don't think I can
12:59:17 <Johulk> this function has to be Eq A
12:59:20 <Johulk> not Ord A
12:59:44 <Johulk> Wait
12:59:46 <Johulk> Not like this
12:59:48 <erisco> then count elements
12:59:56 <Johulk> it groups consecutive equal elements
12:59:57 <Johulk> group :: Eq a => [a] -> [[a]]
13:00:15 <erisco> use foldr
13:00:16 <Johulk> group [1,2,2,3,4,4,4,5,4] goes to[[1],[2,2],[3],[4,4,4],[5],[4]]
13:03:58 <Welkin> there is already a function that does that
13:04:02 <Johulk> I know
13:04:05 <python476> hey there
13:04:06 <Welkin> okay
13:04:11 <Johulk> But I need to make an implementation of it
13:04:12 <python476> I just installed parsec through stack
13:04:22 <Welkin> yeah, then use foldr or foldl'
13:04:23 <python476> identifier <- not in scope
13:04:37 <python476> char, string etc are imported properly but identifier is not, any idea?
13:33:27 <benzrf> @hoogle identifier
13:33:27 <lambdabot> Text.Parsec.Token identifier :: GenTokenParser s u m -> ParsecT s u m String
13:33:27 <lambdabot> Text.ParserCombinators.Parsec.Token identifier :: GenTokenParser s u m -> ParsecT s u m String
13:33:27 <lambdabot> Text.XHtml.Frameset identifier :: String -> HtmlAttr
13:33:36 <benzrf> youre importing Text.Parsec.Token
13:33:38 <benzrf> ?
13:47:36 <Johulk> Guys
13:47:42 <Johulk> my nub implementation isnt working
13:47:43 <Johulk> http://lpaste.net/359632
13:47:51 <Johulk> it says non exaustive patterns
13:48:08 <Johulk> can someone help me»
13:48:26 <geekosaur> you aren't handling the case where the list has exactly two items in it
13:48:28 <cocreature> Johulk: your implementation doesn’t handle lists with only a single element
13:48:43 <geekosaur> or 1, yeh, whoops
13:48:55 <geekosaur> 2 works. sigh. still waking up
13:49:12 <Johulk> ohh
13:49:16 <geekosaur> so once the list has been whittled down to 1 item, it will crash
13:49:25 <int-e> Johulk: and you may rethink what should happen when h == h2.
13:49:33 <int-e> *may want to*
13:50:03 <Johulk> eh
13:50:04 <Johulk> xD
13:50:16 <Johulk> soo
13:50:19 <Johulk> it just copies the list
13:50:23 <Johulk> fml haha
13:50:45 <int-e> and the other case as well, hmpf
13:50:55 <Johulk> Can you help me? xD
13:51:08 <Johulk> I just started haskell and I have no idea what I should be doing
13:51:16 <Johulk> I mean, I do have an idea
13:51:22 <Johulk> but I can't make it work
13:54:06 <int-e> Johulk: you have all the right ingredients already, it's just a matter of getting the two branches of the if correct.
13:54:19 <int-e> (once you've added the single element list case)
13:54:22 <Johulk> ALright
13:54:27 <Johulk> Let me rethink this through then
13:57:58 <Welkin> is there already a function to convert between degrees and radians?
13:58:10 <Welkin> I could write one muyself, especially since we already have `pi`
14:02:17 <Johulk> Cant get it to work int-e
14:02:20 <Johulk> No idea what I should be doing
14:08:44 <jmcarthur> Johulk: Are you struggling with the algorithm, the syntax, the type system, or something else?
14:09:42 <jmcarthur> (I suspect you aren't sure, but it would still be useful to try to recognize what the problem is.)
14:23:35 <ertes> int-e: would you be open to making the 'linear' library available to lambdabot?
14:31:56 <ph88^> hoopl really looks like a nice piece of software
14:32:02 <int-e> ertes: basically, no... because I see no end to such requests once I start actually adding packages. (The fairly random selection of packages that *are* available is basically lambdabot's own dependencies, plus lens which I do not dare to remove :-P.)
14:34:26 <ertes> int-e: i don't mind, although since you have practically every edwardk package already in there, one more wouldn't hurt =P
14:34:32 <int-e> (I also have a technical reason: adding new libraries is not completely free either, and mueval spends 1.5-2 seconds just loading libraries as is.)
14:35:04 <ertes> for every single evaluation?
14:35:07 <int-e> yes.
14:35:15 <ertes> wow, i see
14:35:17 <int-e> mostly loading .hi files
14:35:32 <int-e> as far as I can tell.
14:38:11 <geekosaur> .hi files are a known slow point in loading that the devs have been trying to bring under control for a while
14:41:24 <Logio> Welkin: the "dimensional" libraries have existing functions, but that's probably too heavy for what you're doing
14:44:31 <Cheery> I tried to search with hoogle, but I'd like to see some examples about where type classes and instances have really moved Haskell forward.
14:44:38 <Cheery> or have been useful for the users
14:45:11 <Cheery> the problem is that I think the example is likely somewhere in someone's library
14:45:19 <Cheery> which Hoogle doesn't seem to show.
14:48:24 <Welkin> hoogle does not cover anything other than base + whatever comes with the haskell platform
14:48:34 <Welkin> search hayoo to search everything on hackage
14:49:02 <Welkin> http://hayoo.fh-wedel.de/
14:54:20 <Johulk> Uh guys
14:54:28 <Johulk> I have a file with lots of functions
14:54:33 <Johulk> I was compiling it
14:54:49 <Johulk> and its giving me a parse error on a function type definition
14:56:42 <Johulk> http://lpaste.net/359633
14:56:46 <geekosaur> oten that means you have indentation problems and it's reading the type signature as part of the precedingh code
14:57:04 <Johulk> I get an error between function --26-- and --27--
14:57:15 <Johulk> I know 26 is wrong, the guards and all
14:57:28 <Johulk> I cant get it to work without the guards or with them
14:57:38 <geekosaur> missing = after otherwise
14:57:52 <geekosaur> so it's still parsing the guard expression when it hits the signature
14:58:08 <Tuplanolla> Also missing `else`, Johulk.
14:58:17 <geekosaur> and you can;t put guards *after* the definition
14:58:25 <Johulk> I know
14:58:40 <geekosaur> oh heh and you said otherwise when you wanted else
14:58:45 <geekosaur> :t otherwise
14:58:48 <lambdabot> Bool
14:59:19 <geekosaur> guards are just boolean expressions and 'otherwise' is used because it reads better than | True = ...
15:01:12 <Johulk> Alright
15:01:15 <Johulk> That's fixed, thanks
15:01:27 <Johulk> Now I get an error on --23--
15:01:45 <Johulk> on the definition, (b \\ a), the '\\' being the error
15:01:51 <Johulk> it says the variable is not in scope
15:01:54 <Johulk> but its an operation
15:02:04 <Johulk> where its list b except elements from a
15:02:06 <Welkin> :t (//)
15:02:09 <lambdabot> Ix i => Array i e -> [(i, e)] -> Array i e
15:02:16 <geekosaur> @index (\\)
15:02:17 <lambdabot> GHC.OldList, Data.List, Data.IntMap.Strict, Data.IntMap.Lazy, Data.IntMap, Data.IntSet, Data.Map.Lazy, Data.Map.Strict, Data.Map, Data.Set
15:02:21 <Welkin> is \\ even a function?
15:02:26 <geekosaur> pronbably forgot to import Data.List
15:02:29 <Welkin> oh
15:02:43 <Welkin> I thought list difference was //
15:02:54 <Welkin> guess that is array update
15:02:56 <geekosaur> as for variable, consider that user defined operators are fine in Haskell. and operators are perfectly good variables/bindings, they're just syntactically infix instead of prefix
15:03:12 <geekosaur> set difference iirc
15:03:20 <geekosaur> yeh
15:03:43 <Johulk> so I need to import something?
15:03:52 <geekosaur> Data.List, yes
15:04:22 <Johulk> so, adding import Data.List on top of the all the code will do it?
15:04:48 <geekosaur> it should fix that problem at least
15:05:14 <Johulk> tadaaaaa
15:05:16 <Johulk> it compiles
15:05:23 <Johulk> thanks bois
15:05:25 <Johulk> :D
15:05:30 <Welkin> you need to import anything that is not defined in your module
15:05:39 <Welkin> nothing is imported implictly except for the Prelude
15:06:35 <geekosaur> if you look at the outpu of that @index command I did, it's defined in a lot of places on a lot of different types.
15:06:52 <geekosaur> normally you'd import it qualified so you can use the correct one for the type
15:07:27 <geekosaur> (since most of them are doing the same conceptual thing, one could argue it should be a typeclass method; but that carries its own problems.)
15:08:28 <geekosaur> like, you can treat a list as a set easily enough, but most set-like ops can also be done on maps of variosu kinds, but making a typeclass that also accounts for the value part of the map is painful and iirc a bit expensive
15:08:52 <geekosaur> ...while also still supporting the set-like types tha dont carrie values along
15:09:00 <geekosaur> urgh, typing
15:10:40 <Johulk> Thanks everyone
15:10:42 <Johulk> :D
15:36:09 <power-fungus> I am trying to use monad-transformers with monads-tf. I realized that the ErrorT transformer from the transformers-package is deprecated and the ExceptT monad is suggested as replacement. But my problem is that I need a instance of MonadError but ExceptT is not an instance of that in monads-tf. Note that ExceptT is an instance of MonadError in mtl. Why is this the case that ExceptT is not an instance of MonadError in monads-tf?
15:40:14 <geekosaur> nobody thought about it, probably. monads-tf has been on life support ever since the mtl devs decided to base mtl2 on monads-fd instead of monads-tf
15:40:56 <geekosaur> I see Ross Paterson has been updasing it, but the paucity of releases makes me think it's just enough to keep it bulilding and not to keep up with e.g. the various changes to ExceptT and friends over time
15:46:01 <power-fungus> What is my best option? Using ErrorT instead or switching to mtl, in which ExceptT is a instance of the MonadError class
15:49:26 <geekosaur> I'd probably use mtl. but if you really want type families, you could add an orphan instance fo ryourself and submit a bug/patch to Ross
15:49:46 <geekosaur> it's kind of a pity that monads-tf essentially dropped out of sight after mtl2 came out
15:50:58 <power-fungus> thanks. What is mtl2? I cannot find a package for that, or is it just the mtl package?
15:51:08 <geekosaur> mtl-2.x.x
15:51:25 <power-fungus> ah
15:52:21 <geekosaur> informally mtl2 to distinguish from mtl-1.x which had a number of significant differences, like the simple monads State/Reader/Writer being distinct types instead of type aliases (which causes compatibility issues with older code)
15:53:28 <iqubic> Is there a guide on what exactly a monad transformer is, and how to use it?
15:55:54 <erisco> https://wiki.haskell.org/Monad_Transformers
16:04:23 <Welkin> it is a way to "compose" monads
16:35:24 <jmcarthur> I wouldn't say a monad transformer is a way to compose monads. That's like saying (Int -> Int) is a way to compose Ints.
16:36:02 <jmcarthur> But monad transformers are at least composable (with each other).
17:04:54 <Tehnix> Anyone know who is responsible for the mailing list at <https://mail.haskell.org/mailman/listinfo/haskell>? No matter what mail I put in, it says it's not valid (both @gmail and my personal one)
17:09:34 <geekosaur> ask in #haskell-infrastructure
17:15:18 <liosnrar> so hi
17:15:27 <liosnrar> how does haskell differ from python?
17:15:43 <liosnrar> im just learning python and also haskell but they seem similar
17:16:18 <erisco> static versus dynamic typing, lazy versus strict, pure versus impure
17:17:01 <liosnrar> i suppose python is all the negative aspects of what you said
17:17:34 <erisco> those are just facts, not judgements of good or bad
17:17:57 <liosnrar> objectively pure vs impure, lazy vs strict seem rather weighed as good or bad
17:18:59 <liosnrar> .lambdabot 2+2
17:19:02 <erisco> the only comparison I feel strongly about is typing
17:19:28 <liosnrar> how might one demonsrtate this difference
17:20:18 <liosnrar> x = 1
17:20:23 <liosnrar> x = 'Hello'
17:20:29 <erisco> which difference? typing?
17:20:39 <liosnrar> is that what you meant
17:20:54 <liosnrar> assigned types are dynamic
17:20:57 <liosnrar> in python
17:21:44 <erisco> there is not a demonstration per se, it is just different
17:22:04 <liosnrar> okay fair enough
17:22:07 <erisco> Python programs experience runtime type errors, Haskell programs experience compile time type errors
17:22:22 <liosnrar> ah right Python is interpreted language
17:22:34 <erisco> Python programs do not have type checking as part of compilation, and Haskell programs do not have type checking as part of execution
17:22:34 <liosnrar> i felt python to be a fake language because of this
17:23:03 <liosnrar> fake in the sense of not having essence
17:23:06 <erisco> the difference between interpretation and compilation is irrelevant
17:23:12 <liosnrar> i see
17:23:53 <liosnrar> i suppose an IDE would help with type checking while writing
17:24:02 <CuriousErnestBro> hello, I wanna learn Haskell to be cool but I'm afraid it's confusing. So I'll probably be doing c++
17:24:17 <liosnrar> learn haskell to be cool?
17:24:26 <CuriousErnestBro> yeah
17:24:34 <liosnrar> since when do programmers join the cool clubs
17:24:45 <CuriousErnestBro> it's cool in academia I heard
17:24:56 <liosnrar> oh you mean be the coolest nerd
17:25:08 <CuriousErnestBro> well we're not nerds are we?
17:25:19 <liosnrar> im not sure really
17:25:52 <liosnrar> i suppose nerd is someone with technological knowledge
17:25:52 <erisco> I am not sure of a clear definition to distinguish interpretation from compilation
17:26:26 <liosnrar> in my opinion an interpreted language is a sufficial super-high-level language
17:26:34 <erisco> anyways, Haskell does have interpreters, and so do other statically typed languages
17:26:39 <liosnrar> s/sufficial/superficial
17:26:41 <CuriousErnestBro> idk how deep of a definition you need
17:27:05 <CuriousErnestBro> interpretation goes line by line, compilation does it all in one go
17:27:24 <liosnrar> is there any performance difference?
17:27:26 <erisco> both of you are wrong
17:28:05 <erisco> compilation is translating one language to another
17:28:19 <liosnrar> usually machine language
17:28:36 <erisco> interpretation is evaluating or executing a syntax according to its semantics
17:29:02 <liosnrar> but the interpreter itself would have a compiled source
17:29:15 <erisco> when compiling to machine language, the CPU acts as an interpreter
17:29:28 <liosnrar> now im confusing terms
17:29:29 <erisco> the CPU does not have a compiled source, but rather circuits :)
17:29:39 <liosnrar> compiled copper wires
17:30:23 <liosnrar> is there any chance there is a misunderstanding in the definition of interpreted
17:30:45 <liosnrar> i dont want to think one thing and you mean another
17:31:11 <geekosaur> these days even CPUs are microcode interpreters
17:31:31 <liosnrar> i do believe an interpreter for source code is different to lets say, a real life language interpreter
17:31:53 <liosnrar> translating word for word to another language
17:32:20 <multiplication> geekosaur: can you explain the bit about cpus briefly?
17:32:23 <geekosaur> word for word doesn't work for language interpreters either (see: "invisible idiot")
17:33:01 <erisco> the common sense of interpreted means that both the source program and an interpreting program are required for execution on the CPU
17:33:27 <CuriousErnestBro> erisco, what is "machine language"
17:33:29 <erisco> whereas when we compile to machine code we expect that the CPU can execute this program independently
17:33:30 <geekosaur> multiplication, there's generally a RISC-ish microcode implemented in hardware and the CPU instructions are software programs written in that microcode. it allows Intel to, for example, send out software patches for CPU bugs insead of you having to go buy a new CPU
17:33:47 <erisco> CuriousErnestBro, it is the instruction set of the CPU
17:33:49 <geekosaur> (most OSes get updates and apply them during system boot)
17:34:15 <CuriousErnestBro> erisco, but compiled languages also get translated to that?
17:34:17 <CuriousErnestBro> or no?
17:34:37 <liosnrar> hilarious article about invisible idiot
17:34:50 <geekosaur> cpompiled languages are translated once to some kind of "machine code" (but even this is blurry. consider BEAM, JVM, CLR) 
17:34:54 <erisco> compilation is the process of translating one computer language to another
17:35:21 <erisco> usually this means from a high level language to machine code, and otherwise is called "transpiling", but terminology varies, unhelpfully
17:35:35 <geekosaur> intepreters often translate to some kind of bytecode, but it tends to be high level and specific to a particular langauge implementation, whereas machine code is more general (usually. JVM has some oddball opcodes thta are more or less java specific)
17:36:02 <liosnrar> is there any chance there is a faster execution for languages that compile directly to bytecode?
17:36:13 <erisco> yes
17:36:23 <geekosaur> the real point is that bytecode is rarely saved, source is translated to it every time a program is loaded
17:36:31 <erisco> consider what is being done by technologies such as HHVM, and I am sure there are better examples
17:36:53 <erisco> but it is observing the computation and optimising the byte code on that basis
17:36:57 <liosnrar> oh wait a minute
17:36:57 <geekosaur> and the ones that can save it (perl and python can do this) still have to adjust the compiled bytecode on load, in more complex ways than a shared object loader has to
17:37:32 <geekosaur> and then you get into things like JIT that further blur the boundaries, but JIT generated code also is not generally saved between running instances
17:37:49 <liosnrar> so basically there is no such thing as compile-once-run-many
17:38:00 <erisco> static analysis is not as aware of how efficiently a program will execute
17:38:32 <liosnrar> compile-once-run-now spells out CORN
17:38:32 <geekosaur> I am actually of the onion these days that compiled vs. interpreted is not an especially useful distinction
17:38:55 <erisco> it is a dated idea that interpreted is slow and compiled is fast
17:39:04 <liosnrar> yeas this is what i believed
17:39:09 <geekosaur> in a particular context (say, a partuiclar language implementation) it can tell you some things, but that won't generalize to other implementations muich less other languages
17:39:30 <liosnrar> how about if someone programs in an already low level language
17:39:40 <liosnrar> like, ASSEMBLY
17:39:58 <liosnrar> no compilation necessesary?
17:40:00 <geekosaur> JVM code can run almost as fast as native machine code under the right circumstances; the main reason it doesn't is Java forces you to wrap things in so many levels of abstraction (e.g. factory objects) that you get slowdowns from that
17:40:09 <erisco> Assembly is compiled to machine code
17:40:18 <erisco> and machine code is interpreted by the CPU
17:40:22 <liosnrar> but faster than a high level language would
17:41:24 <liosnrar> High Level -> (compiles) Bytecode -> (compiles) Machine code -> (interpreted) CPU
17:41:33 <liosnrar> Low Level -> (compiles) Machine code -> (interpreted) CPU
17:42:10 <geekosaur> erlang's BEAM works miuch the same as the JVM, but erlang doesn't make you wrap things i so many abstract classes so ti ends up being faster
17:42:49 <liosnrar> i havent reached abstract classes in my java lessons
17:42:57 <liosnrar> im still at encapsulation
17:43:14 <liosnrar> and polymorphism
17:44:10 <liosnrar> my python lessons are still at conditionals
17:44:30 <liosnrar> and haskell i probably wont start until i need it
17:44:47 <liosnrar> who knows when i might need haskell
17:45:00 <erisco> as you become less specific you become more productive, but you also have less control over how things happen
17:45:25 <liosnrar> and you spread out your knowledge thus thinning your expertice
17:45:47 <erisco> in a nutshell this is why high level languages can have unfavourable benchmark comparisons
17:46:17 <liosnrar> aha
17:46:38 <erisco> another aspect though is that programmers are unable to manage some optimisations that are easier for compilers
17:46:39 <liosnrar> i dont suppose running hello world is enough to benchmark every language
17:47:05 <liosnrar> print('Hello world')
17:47:10 <geekosaur> not really
17:47:34 <liosnrar> depends how deep into the benchmark process you want to go into
17:47:37 <Eduard_Munteanu> No, but even more sophisticated benchmarks are rather unrealistic, e.g. prime sieves.
17:47:41 <geekosaur> but, there is no such thing as a general benchmark, really. each specific workload needs to be checked specifically.
17:47:48 <erisco> for example, inlining is not something that a programmer wants to do themselves
17:47:59 <liosnrar> ew no
17:48:11 <Rembane> Profiling <3
17:48:12 <geekosaur> things like the SPEC benchmark can give you an idea about paticular kinds of loads (for SPEC, databases), but even that depends heavily on context
17:48:14 <Rembane> Cache alignment <3
17:48:16 <erisco> the programmer prefers organisation, but to the compiler that is irrelevant
17:48:27 <erisco> so, the compiler is an effective de-organiser
17:48:41 <liosnrar> i guess im gonna go compile my room
17:48:42 <Eduard_Munteanu> Well, you could have fine control over inlining without doing it yourself.
17:49:40 <liosnrar> so basically high level languages are just fancy ways of helping developers write programs easier
17:49:51 <liosnrar> at the cost of more work for the compiler
17:50:02 <erisco> yes, and maybe
17:50:10 <Eduard_Munteanu> Yes, we don't care about compiler's feelings. :P
17:50:16 <liosnrar> haahaha
17:50:21 <liosnrar> perfect!
17:50:54 <erisco> it is less trivial than your wording may make it sound, though
17:51:06 <liosnrar> due to the split seconds
17:51:13 <erisco> even if we considered machine code to be intuitive, we would still seek other ways of representing our ideas
17:51:22 <erisco> and this goes back to what I said about being less specific
17:51:36 <erisco> when I write a program I want to say exactly what is important and no more
17:51:52 <geekosaur> even if it wer eintuitive, we'd want to be able to write something short and "simple" (in some sense) and have something else generate the individual tiny steps
17:52:03 <erisco> everything else I have to say is overhead, extra time, effort, a source of mistakes
17:52:12 <geekosaur> macro procerssors were the first "compilers"/"assemblers"
17:52:30 <liosnrar> wouldn't it be nice if variables defined themselves
17:52:40 <geekosaur> sometimes
17:52:45 <erisco> and so even a machine seeking to write programs would wish for well suited representations
17:52:58 <geekosaur> basic did that, perl did that before concluding it was a common source of mistakes, etc,
17:53:15 <geekosaur> if people didn;t reliably commit typoes, it might work better >.>
17:53:16 <liosnrar> so lets build a machine that's sole purpose is to design the perfect programming language
17:53:18 <Eduard_Munteanu> There was a time when people baked instructions into CPUs simply for programmer convenience. :(
17:53:36 <erisco> there are is no perfect programming language, only perfect programming languages
17:54:13 <liosnrar> we can write a program that makes a compiler that is so smart that you can write programs in plain english
17:54:37 <erisco> that is the interaction between a human boss and a human programmer
17:54:45 <liosnrar> right
17:54:54 <liosnrar> there you go then
17:54:56 <geekosaur> the real trick is sa language smart enough that your boss can write aprogram in plain english >.>
17:55:04 <liosnrar> :D
17:55:06 <geekosaur> or your grandmother, as the case may be
17:55:12 <liosnrar> but then we'd be fired
17:55:23 <liosnrar> we are dumbing down compilers so that we can keep our jobs
17:55:30 <Eduard_Munteanu> @google free employment theorem
17:55:31 <lambdabot> https://en.wikipedia.org/wiki/Full_employment_theorem
17:55:45 <erisco> the trouble with English is that it is cannot reach perfect precision
17:56:16 <erisco> the trouble with PLs is that have not embraced intended imprecision
17:56:40 * Digit watching videos about guix, functional package manager, wondering nix built their own, guix built domain specific in scheme, and wondering if haskell could have one such too, or even how much cabal does similar to guix, and if cabal could handle non-haskell packages, becoming a universal package manager, not just for haskell.
17:56:40 <liosnrar> hilarrious!!
17:57:14 <geekosaur> sadly that isn't quite true, there's a fair bit of https://xkcd.com/1425/
17:57:17 * Digit also wonders if just able one day to write package definitions in curt haskell
17:57:18 <liosnrar> also, english would be a terrible language to choose for a natural language compiler
17:57:49 <Rembane> away
17:57:55 <Rembane> Sorry
17:58:19 <erisco> a language that I seek is one which facilitates a gradient between imprecision and precision
17:58:29 <liosnrar> i wonder what written human language is the least inconsistent and most concise
17:58:51 <liosnrar> im thinking somewhere along the lines of hewbrew aramaic
17:58:52 <Digit> lojban?
17:58:52 <geekosaur> probably one of the constructed ones like lojban
17:58:55 <erisco> the idea is that I can begin with a vague description of the program I want and iteratively refine my description until the program meets my expectations
17:59:00 <liosnrar> whats lojban
17:59:06 <geekosaur> hebrew ... is plenty inconsistent in practice
17:59:13 <Eduard_Munteanu> @google lojban
17:59:14 <lambdabot> https://mw.lojban.org/
17:59:27 <Digit> lojban's the 1st evolution since loglang
17:59:49 <erisco> the beginnings of this can be found in sophisticated type systems (such as DT) and program synthesis (such as enabled by SMT solvers)
18:00:03 <geekosaur> the thing I will guarntee you is: the more widely it is used, the more inconsoistent it will become
18:00:35 <geekosaur> esperanto was more consistent until it started getting people who speak it regularly. we evolve languages to fir our needs with little concern for consistency
18:00:39 <liosnrar> this is amazing
18:00:47 <erisco> I haven't checked on Liquid Haskell in a long time, but it would be interesting if they also used SMT solvers to find a term for the refinement type
18:00:48 <liosnrar> i always learn amazing things on haskell
18:01:08 <Eduard_Munteanu> It reminds me someone actually taught their child Klingon, but he ended up preferring English as he grew up. Turns out it's tough to express concepts other than war, honor and battleships in Klingon. :)
18:01:20 <Digit> subatomic molecules are widely used, and seem consistent.  i think i've found your rule broken there geekosaur.
18:02:07 <Eduard_Munteanu> geekosaur, grammar nazism would make sense for a constucted / specified language.
18:02:14 <Digit> perhaps if there could be version control on language...  :3
18:03:04 <liosnrar> i think i might at Lujban to the languages im learning
18:03:11 <liosnrar> German, Spanish, Italian, Lujban
18:03:11 <geekosaur> Eduard_Munteanu, actually 'grammar nazism' is rarely about language at all. it's about cultural identity.
18:03:26 <Eduard_Munteanu> Hm, yeah.
18:03:34 <liosnrar> really? i thought it was about spelling and syntax correction
18:03:48 <erisco> my criticism of precise natural languages is that they either have to be unchanging or they have to be changed synchronously amongst all users
18:03:52 <Rembane> Isn't it about being a prick?
18:03:59 <liosnrar> yea that too
18:04:11 <erisco> you'd have to imagine a dictionary for such a language to be authoritative, designed by committee, rather than descriptive
18:04:13 <Rembane> So only the Borg can speak a precise natural language?
18:04:18 <geekosaur> lionat the most obvious level yes. it;s when you start looking at *why* that you realize it's about the 'in people' who do it 'right and the 'outsiders' who are so marked by doing it 'wrong'
18:04:37 <geekosaur> er, liosnrar 
18:04:42 <liosnrar> yes
18:05:07 <erisco> could you imagine English 2.0 being published and now that is what you have to speak, precisely?
18:05:19 <liosnrar> that would be a bummer
18:05:35 <erisco> and how do you stop people from getting sloppy and making new words? a language police?
18:05:39 <geekosaur> otherwise, whenit comes down to it no fixed language is capable of expressing everything that can happen in anon-fixed world; languages therefore evolve. 'organically' / in response to need and according to what peole are already familair./confortable with
18:05:57 <liosnrar> erisco make it so that changing the language would make the language incomprehensible by nature
18:06:02 <Digit> spoken natural language, with full range of emphasis and inflection and so on... to have software pick up  all that, is where we surely need go.   ... if we are to converse with our computers, as seen in sci-fi.  
18:06:29 <Digit> and so they can converse with themselves.   "Holy, who's arm is this?"  n_n
18:06:34 <geekosaur> and even borg would build new language coinstructs (words, idioms, etc.) according to what they already have and what combinations of that are most likely to get the message aross
18:06:38 <Rembane> Kän we jahst spell inglish in a mor konsistent wäj?
18:06:41 <erisco> humans are too inflexible, or too unwilling to be inflexible, however you want to see that
18:06:57 <erisco> more practical is to improve our computers to understand natural language
18:07:01 <erisco> as impractical as that is ;)
18:07:05 <liosnrar> yehs wε khan
18:07:37 <Rembane> geekosaur: They would, but they could do it syncronously and maybe not get too much else done, see for instance tea in HHGTTG.
18:08:08 <liosnrar> tea?
18:08:53 <Rembane> liosnrar: Sweet! :D
18:09:07 <Rembane> liosnrar: Have you read the Hitchhiker's Guide to the Galaxy?
18:09:14 <liosnrar> I never could get the hang of Thursdays
18:09:20 <Rembane> liosnrar: Or listened to the radio theater?
18:09:32 <liosnrar> read the books, saw the tv series, watched the film
18:09:36 <Eduard_Munteanu> We should probably not think or specify things in natural language in some cases. It's kinda awful.
18:09:45 <liosnrar> i even cosplayed as arthur dent to local comic con
18:09:53 <Digit> for my text to speech, i have a few reminder alarms.  to get them sounding correct, aheyi had to write in zstray anje ways.
18:10:19 <Rembane> liosnrar: Sweet. The computer on the heart of gold stops working in a space battle because it needs to figure out how to make tea. I think the Borg could be stunned in the same way if they updated their constructed language regularly.
18:10:41 <liosnrar> oh i didnt remember that sequence
18:10:57 <liosnrar> also, the borg was almost imobilized by uploading an impossible shape into their collective
18:11:02 <geekosaur> you didn;t mention the original radio serial, which is different from the other ones
18:11:13 <liosnrar> yea actually none of the mediums are the same
18:11:29 <liosnrar> the books, radio, tv series are all different story lines
18:11:42 <liosnrar> the 2005 movie was based on the tv series tho
18:11:53 <liosnrar> ill say 'loosely'
18:12:26 <liosnrar> the borg would try to analyze the impossible shape and find themselves in an infinite loop
18:12:40 <liosnrar> giving the opportunity to strike the ship and destroy it
18:12:56 <liosnrar> noobs forgot to implement operation time outs
18:13:08 <Rembane> So, the Borg can't be Turing complete.
18:13:14 <Rembane> They're all written in Agda.
18:13:44 <erisco> That's why in that one episode they fed it a geometric problem equivalent to the halting problem
18:13:44 <liosnrar> i guess so
18:14:03 <liosnrar> isn't that the same episode with the impossible shape
18:14:22 <erisco> that's the one I am referring to... I can't remember the exact technobabble
18:14:23 <Rembane> "Here, take this! while(1) { sleep(>9000 years) }"
18:14:27 <geekosaur> that sounbds like the same thing said differently
18:14:35 <liosnrar> yea its the same
18:14:57 <liosnrar> in the end they didn't do it because they felt sorry for the borg
18:15:17 <Rembane> Why are people always feeling sorry for the Borg?! 
18:15:25 <liosnrar> why do they always send the poor
18:16:01 <liosnrar> system of a down reference
18:16:09 <htse> the borg are written in FORTRAN, they'll rewrite your constants, resistance and immutability is futile.
18:16:44 <geekosaur> FORTRAN IV, I guess?
18:16:50 <liosnrar> in the episode I, Borg we meet the only Borg to become independent, therefore we feel sorry for the Borg as a whole since we know they have potential to be normal people
18:16:56 <geekosaur> (later ones actually allow for immutable constants iirc)
18:17:11 <liosnrar> i forget what they nicknamed him
18:17:15 <htse> yeah that's a sorry propect indeed, if you look at the current state of the world
18:17:23 <htse> Hughes
18:17:27 <liosnrar> Hugh
18:17:43 <liosnrar> yea it was funny
18:17:52 <liosnrar> picard: You NAMED him??
18:17:56 <htse> Evil data was a lot more funny and interesting
18:18:14 <liosnrar> evil data? do you mean Lore?
18:18:18 <htse> yes
18:18:20 <liosnrar> xD
18:18:47 <htse> aka he should've been in season 1 so he could've killed Wesley Crusher..
18:18:53 <liosnrar> lol
18:19:00 <liosnrar> Lore liked Wesley I think
18:19:15 <geekosaur> Lore ~ Loki
18:19:20 <htse> probably since he can calculate the pain and suffering a character like WC brings
18:19:39 <liosnrar> heh
18:19:58 <geekosaur> ST:Generations gave Data an emootion chip.. forgetting that that was what differentiated Data from Lore
18:20:00 <liosnrar> remembering that Lore can feel human emotions
18:20:07 <htse> kind of sad they used him like that, deepspace nine had way better 'child interactions'
18:20:09 <liosnrar> bro
18:20:11 <liosnrar> same mind
18:20:14 <htse> with jake and that ferengi boy
18:20:27 <liosnrar> ewww ds9
18:20:32 <liosnrar> boooriinggg
18:20:43 <htse> I loved voyager
18:20:53 <liosnrar> meh so so
18:21:00 <liosnrar> i like space fights
18:21:12 <liosnrar> space fights got decreased every single spin off
18:21:28 <htse> voyager was pretty good in that aspects
18:21:31 <Rembane> geekosaur: I like that. It makes that movie so much better.
18:21:35 <liosnrar> yea thats why i say so so
18:21:53 <geekosaur> the more physics you know/understand the ramifications of, the less likely space fights seem
18:21:56 <liosnrar> you can't beat Picard and Q tho
18:22:15 <geekosaur> FTL's easy. inertia's looking more impossible to manipulate all the time
18:22:27 <liosnrar> geekosaur: sci-fi bordering fantasy in some cases (eg inconsistencies in how the holodeck works)
18:22:33 <htse> man Picard checwing Wesley Crusher out, that was the best scene ever
18:23:00 <htse> it only could've been better if he did a "and I had your mother, she's my bitch now! *mic drop*"
18:23:14 <liosnrar> you mean where he tries him as an ensign for the first time?
18:23:42 <htse> which would lead to Wesley seeking out the Dark side, Picard cutting off his arm in a transporter accident and it being revealed he's his father
18:23:42 <Rembane> geekosaur: So a realistic space battle is everybody gliding away from each other in a frustrating way?
18:24:01 <geekosaur> more that it's all hours to days between salvos
18:24:05 <liosnrar> i would've lost interest in crusher if it weren't for the traveller telling us that he's got a gift in spacetime mechanics
18:24:23 <geekosaur> you can't close in *or* move away in a reasonable amount of time without leaving the crew a thin smear of jelly on the aft bulkhead
18:24:26 <htse> yeah he's so gifted that you'll never hear of him again puny mortals
18:24:32 <Rembane> geekosaur: Sounds incredibly boring.
18:24:42 <liosnrar> xD
18:24:51 <Digit> Rembane: elite/frontier/pioneer do it quite well.    but i suppose it depends on the technology, for the "real"ism.
18:25:19 <Rembane> Digit: Are they games? Books? Movies?
18:25:22 <geekosaur> niven and pournelle actually did a good job of what it would really look iplike in the part of _The Gripping Hand_ that everyone seems to most hate (and these are directly related): the "stern chase"
18:25:26 <htse> well, I think they modelled their realism on how they portrayed relationships: cue Diana and Will
18:25:51 <Digit> Rembane: sure.
18:25:52 <htse> and Picard after he got raped by lloxana of Troy again :P
18:26:01 <liosnrar> that was one thing TNG did that Original Series didn't focus on at all
18:26:06 <Digit> @google zero inertia propulsion
18:26:07 <lambdabot> https://en.wikipedia.org/wiki/Reactionless_drive
18:26:44 <Rembane> The troll physics drive!
18:26:50 <htse> hey fix that with like a zero flux space inverted modulator
18:26:51 <geekosaur> in the 60s you couldn't ght such things past Broadcast Standards (aka censors)
18:27:03 <htse> it was very advanced stuff 30000 stardates ago, now it's meh
18:27:15 <liosnrar> Fun fact: Lloxana of Troy was Gene Roddenberry's wife, and was also the voice of the computer
18:27:19 <geekosaur> freaking McCarthyism holdovers
18:27:22 * Digit had thought google might give the same link as ddg gives
18:27:23 <htse> yeah
18:27:28 <htse> best computervoice ever
18:27:42 <liosnrar> Fun fact also: Google Assistant at one point was using the same voice for responses
18:27:45 <geekosaur> 'Lwaxana Troi', btw
18:27:51 <liosnrar> tanks
18:28:17 <liosnrar> i suppose there was some kind of copyright issue and now she is some other american voice
18:28:19 * geekosaur kinda has a ridic amount of ST trivia...
18:28:26 <liosnrar> xD
18:28:36 <liosnrar> hey you should try for some competitions
18:28:44 <htse> or it's the fact that she died
18:28:45 <liosnrar> the more details you know the better
18:28:48 <geekosaur> I dfid one on Delphi once back in the day, came in 2nd
18:28:55 <liosnrar> oooh
18:28:57 <liosnrar> awesome
18:29:12 <Clint> delphi, yikes
18:29:29 <geekosaur> was around then I considered maybe there were better ways to u(ab)use my memory >.>
18:29:42 <liosnrar> lol
18:29:48 <liosnrar> so you learned Haskell
18:30:09 <liosnrar> xD
18:30:45 <liosnrar> ah no i just realized the time
18:30:45 <htse> I never understood why the federation didn't have cloaking devices
18:30:53 <liosnrar> they were illegal
18:31:21 <htse> yeah but that's just asking your politicians to rename it so you can have them
18:31:23 <geekosaur> the novels are not canon but made a specific point about their unreliability, building on the original ST episodes involving them
18:31:34 <liosnrar> federation was a peace keeping thing, cloaking devices denote hostile motives
18:31:44 <htse> "no, they're not cloaking devices, they're a modular paint layer to bring some dazzle to our ships, see?!"
18:31:56 <liosnrar> xD
18:32:05 <htse> yeah that's why they carried the photon torpedos of peace
18:32:16 <liosnrar> i just laughed out loud
18:32:19 <liosnrar> xDDD
18:32:20 <htse> even the "we're not a warship" enterprise
18:32:37 <liosnrar> they only used them as self defence
18:32:40 <geekosaur> ob fnadom "we come in peace, soot to kill, shoot to kill"
18:32:44 <geekosaur> *fandom
18:32:53 <htse> startrekking across the universe
18:33:13 <liosnrar> i really would love to stay and chat more about ST trivia, but its 3:30 am!!!
18:33:20 <Digit> yeahp.   tis like an aicraft carrier doing circles off the coast off foreign nations, n going "it's just for diplomacy and exploration".  n_n
18:33:21 <htse> man, Kirk fist)fighting that gaseous cloud.. good times.. good lsd too
18:33:22 <liosnrar> and i need to wake up in 4 hours D:
18:33:46 <liosnrar> have a goodnight/evening/morning/afternoon!!
18:33:51 <htse> night
18:33:54 <liosnrar> cyaaazzz
18:33:58 <liosnrar> o/
18:34:11 <liosnrar> "I'll be in my ready room"
18:35:06 <htse> "Diana, I'm dyslexic, you be in my room, ready!" "in your ready room, captain?" "that's what I said, didn't I?" *bowchikawowow*
18:53:53 <htse> has any of you tried the clckwrks cms package?
18:54:08 <htse> I was thinking of using that to make a website
19:14:07 <camm> Hello. May you know why `stack setup` throws the following error: http://lpaste.net/359635
19:15:01 <camm> I've been having problems downloading GHC with stack. I'm not sure what the problem could be.
19:21:03 <lyxia> camm: what's in stack.yaml
19:22:24 <camm> I'm running it in my home directory. The $HOME/.stack/config.yaml has a lot of lines commented.
19:28:49 <camm> lyxia, may you know what could be the problem?
19:37:19 <camm> Well, it seem that the problems solves itself. :-°
19:45:16 <geekosaur> that looked like a DNS error to me. raw.githubusercontent.com is a CNAME for github.map.fastly.net; maybe fast.ly's dns was hosed briefly?
20:35:51 <benzrf> i hate reading this https://i.imgur.com/dU51eS2.png
20:36:17 <benzrf> they didnt even fucking register fast.ly (or at least not anymore)
20:36:19 <benzrf> why.
20:38:30 <geekosaur> guess they gave up the name
20:44:22 <ternary> Does anyone know how cabal looks for C headers? I rebooted my machine and now cabal complains about missing C dependencies, despite them still being there and pkg-config being able to find them just fine
20:46:44 <geekosaur> if it's not been told to use a pkg-config package then it looks in the compiler default places (usually just /usr/include)
20:48:28 <ternary> I have them listed out in pkgconfig-depends if that's what you mean
20:49:59 <geekosaur> that seems odd.
20:50:27 <geekosaur> it should be trying to build a stub C program using the include and lib information from pkg-config
20:50:48 <geekosaur> possible run cabal with -v3 to see exactly what it is doing and the error it gets
20:56:29 <ternary> Ok, it's actually suring linking, and I'm getting a bunch of undefined reference errors with the found .so file. It's all for functions that I'm not doing anything with, so I'm not sure what it's trying
20:56:39 <ternary> Stuff like clReleaseCommandQueue@OPENCL_1.0
20:57:41 <ternary> during* not suring
20:58:15 <codeshot> Is there a Functor that acts like list but applicative applies pairwise instead of combinatorially ?
20:59:01 <Axman6> ZipList
20:59:13 <codeshot> thanks
20:59:34 <codeshot> oh my, that's in base
20:59:58 <codeshot> I did some googling and then was sat here saying "Well that's dumb, it should exist"
21:31:57 <ternary> geekosaur: If you still care, I figured out that it was me installing NVidia's proprietary drivers that broke it
21:32:33 <ternary> I was using ffmpeg, and the drivers replaced my version of libOpenCL with one that didn't have symbols that ffmpeg wanted
21:59:48 <iqubic> What testing framework do you guys use for Haskell?
22:00:28 <iqubic> I know QuickCheck exists. Are there others that exist too?
22:01:03 <peddie> iqubic: might want to check out hedgehog
22:01:15 <iqubic> I'll look into that.
22:01:40 <iqubic> How hard would it be to write a graphical web browser in Haskell? Is that even a feasible thing to do?
22:01:54 <iqubic> Like one that i can watch Youtube and Netflix in.
22:02:03 <iqubic> Or is that just too complex?
22:02:19 <Welkin> why would you write a web browser?
22:02:21 <ternary> Are you gonna leverage existing stuff like webkit/v8?
22:02:29 <iqubic> Mostly I just want to be able to write browser extensions in Haskell
22:02:52 <Welkin> you can compile haskell to machine code, javascript, or many other languages
22:02:59 <Welkin> the whole browser doesn't need to be in haskell
22:03:24 <Welkin> look at electron or node webkit
22:03:36 <Welkin> it is a browser you can wrap up as a desktop app
22:04:47 <iqubic> I don't know much about that.
22:22:01 <localhorse> what do you think of PureScript?
22:22:44 <Welkin> globalhorse: what about it?
22:24:09 <iqubic> Is that a functional programming derivative of JavaScript?
22:24:20 <iqubic> Or is it something else entirely?
22:25:15 <Welkin> it is derived form haskell
22:25:31 <Welkin> it compiles to javascript (specifically) but has a backend for c++ and erlang now
22:25:47 <Welkin> it has row polymorphism and is strictly evaluated
22:25:51 <systemfault> Purescript is probably the best solution to write purely functional code in the browser
22:25:52 <Welkin> it came out a few years ago
22:25:55 <systemfault> (IHMO)
22:26:02 <Welkin> systemfault: that depends
22:26:08 <Welkin> haskell/ghcjs is very very good
22:26:16 <systemfault> GHCJS creates huge binaries and is pain to setup... Elm is annoying.
22:26:25 <Welkin> I think I might prefer haskell over purescript in this case
22:26:35 <jared-w> I'd say the setup pain of GHCJS is the biggest negative of it, period
22:26:35 <Welkin> I have worked with elm and purescript already
22:26:44 <ternary> GHCJS allows me to share stuff between client and server which is awesome
22:26:44 <Welkin> yes, that is true
22:26:49 <pacak> ghcjs generates some huge scripts...
22:26:57 <Welkin> pacak: not really any more
22:27:03 <Welkin> not any larger than what you get from webpack
22:27:05 <jared-w> The binaries of GHCJS are necessary in size because you need to bake in a lazy execution runtime system into every runtime
22:27:08 <Welkin> in fact, smaller
22:27:25 <Welkin> you run it through closure compiler to remove dead code and then compress it
22:27:26 <jared-w> In fact, considering that you need that lazy evaluation RTS, the binaries are ridiculously small tbh
22:27:30 <ternary> The closure compiler can get my binaries down to less than 200Kb after compression
22:27:41 <mud> You can get ghcjs sizes down to easily workable just by closure-compiler and gzip. It's not a big deal
22:27:43 <systemfault> Hmm, that's great
22:27:56 <Welkin> a typical webpack buld (plain javascript/es6) can be 5-20mb
22:28:04 <mud> And in terms of setup, you can just use reflex-platform. It uses nix, but requires knowing exactly none of nix.
22:28:16 <Welkin> after dead code elimination, minification, and compression it can be 1-2mb
22:28:31 <Welkin> you need to compare apples with apples
22:28:46 <Welkin> in this case, ghcjs is as good or better
22:29:36 <iqubic> What is row polymorphism?
22:29:48 <Welkin> iqubic: go to the purescript website or channel to learn moew
22:29:52 <Welkin> more*
22:30:03 <iqubic> mud: I know a great bit more than none of nix.
22:30:12 <iqubic> I run NixOS
22:31:14 <capisce> any amount is a great bit more than none in relative terms
22:31:41 <iqubic> I know.
22:31:52 <iqubic> I know a fair bit of nix.
22:34:53 <Welkin> iqubic: so shy bairns get newt?
22:49:08 <jared-w> mud: reflex-platform doesn't work super great on arch linux because nix is sorta broken on Arch
22:49:20 <jared-w> iqubic: row polymorphism is very similar to algebraic subtyping
22:50:58 <iqubic> jared-w: I don't know what that is either.
22:51:15 <jared-w> It gives you another thing to google :p
22:51:33 <iqubic> Cool. I'll add it to my ever growing list.
22:52:04 <jared-w> I was joking, it's pretty neat and it's my current favorite solution to the 'extensible records' problem but row polymorphism is another way to solve it and it's almost as good
22:52:48 <iqubic> What does haskell use?
22:53:29 <jared-w> Nothing, really. Haskell uses pure pain, which is why we invented lenses
22:54:34 <jared-w> Haskell doesn't even have real records, our records are a horrible hack plastered on top of data-types where they never belonged in the first place
22:54:52 <jared-w> https://leanpub.com/purescript/read#leanpub-auto-record-patterns-and-row-polymorphism  <-- this is a pretty good way to read about row polymorphism
22:55:10 <mud> jared-w: Is it me or is everything broken on arch?
22:55:28 <iqubic> mud: Arch is just screwed up.
22:55:29 <jared-w> mud: Probably just you. I've never had a more stable operating system :)
22:55:46 <mud> I just sure see a *lot* of bugs that only occur on arch.
22:55:49 <iqubic> Haskell and Arch is weird.
22:56:07 <jared-w> Arch is fantastic. The only reason Nix is broken on arch is because nobody has actually built a  package that installs it correctly. If you want to install it manually it works just fine
22:56:54 <iqubic> I use nixos and it is stable. Most stable thing I have run ever.
22:58:07 <jared-w> NixOS is basically the definition of stable, I'm sure; I constantly upgrade things to the bleeding edge and I like having access to the newest code, but I also like having that access in the most stable way possible. I don't see NixOS tackling that as well as Arch, but I'm not as experienced in Nix so I could be wrong
22:58:57 <iqubic> NixOS is the greatest thing that I have seen.
22:59:01 <jared-w> Also, last time I looked into Nix, it didn't seem to have any way to manage the user experience through configuration? That was pretty disappointing to me; I was hoping for a way to do full system configuration pervasively through the nix files
23:00:58 <iqubic> You can configure most things via nix.
23:01:17 <iqubic> Just not 100% of everything.
23:12:26 <guest5081> Oh god, I had one of the most hilarious embarassing moments when talking about types of generic functions with a Rust programmer
23:13:02 <jared-w> guest5081: what happened?
23:13:28 <guest5081> Basically I looked at one of his three line functions that had a very long type signatures (tons of trait bounds), which was longer than the body of the function
23:13:47 <guest5081> and said "in Haskell, global type inference can handle this just fine"
23:13:59 <guest5081> so I wrote a haskell implementation
23:14:07 <guest5081> and ran into the monomorphism restriction
23:14:10 <Cale> I don't currently use NixOS on my desktop machine because it doesn't have support for anything sufficiently gnome-2-like for me (Mate or Cinnamon)... but I use the nix package manager a lot.
23:14:12 <jared-w> lol
23:14:50 <towerio> lol
23:15:00 <jared-w> Cale: that also weirds me out a bit. Like, why should your WM/DM choice be affected by the OS you run?
23:15:44 <jared-w> guest5081: I guess you could always counter with "well... even if we need a type signature, ours are way easier to type out"
23:16:12 <guest5081> Yeah, haskell at least doesn't have the turbofish operator in its type signatures
23:16:41 <vaibhavsagar> Cale: When was the last time you checked? https://github.com/NixOS/nixpkgs/tree/master/pkgs/desktops/mate
23:16:55 <systemfault> So, I'm convinced to give ghcjs a try again, what's your favorite way to install it?
23:17:14 <jared-w> systemfault: the only mostly sane way I know of is through reflex-platform
23:17:23 <jared-w> (or if you're already using NixOS...)
23:18:00 <systemfault> I'm on OSX... and last time I used it, it was with Nix and it took a year to compile from source. Was trying to avoid that, if possible
23:18:14 <systemfault> Hopefully, it's better now.
23:18:33 <jared-w> reflex-platform has all the caches fixed up for you so it's just downloading a shit ton of stuff and very little compiling :p
23:18:40 <systemfault> <3
23:18:44 <systemfault> Trying then
23:19:04 <Cale> vaibhavsagar: Oh nice. It was maybe 6 months ago :)
23:19:30 <Cale> vaibhavsagar: Maybe I should try again. It *would* be nice to have a nix config that actually set up my desktop environment the way I like it.
23:20:01 <vaibhavsagar> FWIW the last time I tried NixOS with a non-KDE setup it didn't go so well
23:20:32 <vaibhavsagar> but it turns out I'm reasonably okay with KDE, so I just use that
23:21:32 <jared-w> I switched to linux solely so I could use a tiling window manager instead of osx's stuff. I'm not about to give up my precious bspwm just so I get a fancier operating system that I don't know how to use yet :p
23:22:23 <Cale> jared-w: All my coworkers use xmonad.
23:22:32 <jared-w> on NixOS?
23:22:35 <Cale> yeah
23:22:53 <jared-w> oh sweet. Yeah I should've figured that one would work well, in retrospect
23:23:12 <vaibhavsagar> yup, most people I know who use NixOS also use XMonad
23:23:33 <jared-w> Switching to XMonad has also been on my bucket list for a while... hmm... I'll probably try switching to that on arch and see how that goes; it'll be one less pain point if I ever eventually migrate to NixOS
23:23:57 <Cale> Personally, every time I tried tiling WMs, I was really annoyed. I'm still waiting for someone to bother writing an XMonad configuration which works just like Metacity.
23:24:26 <jared-w> Do you use multiple monitors? I feel like that's a common pain point of tiling WMs being annoying
23:24:32 <Cale> Yes
23:24:36 <Cale> But even if not...
23:25:28 <jared-w> ¯\_(ツ)_/¯ tiling WMs are a godsend for me on my laptop; when I'm using multiple monitors they can get a little annoying but they're still useful enough for me to have a much better productivity boost than without 'em. But yeah, I can see multiple monitors and a good mouse really diminishing the appeal of a tiling WM
23:25:32 <Cale> There are a lot of things I like to do, for instance with chat programs, where I'll obscure the useless parts of one window with another, but keep the last few lines of the chat and text entry visible to click in
23:25:48 <Cale> and I just can't be bothered to program all these special cases of how I use overlapping windows
23:27:13 <jared-w> Yeah, I can get that; I just never overlap windows anyway so it works out. I keep my IRC client in a pop-up window that I can hide/show on a keybind; it's configured to be always on top and follows me as I switch virtual monitors and that works for me :)
