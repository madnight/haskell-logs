00:02:58 <Lokathor> saurabhn_, is there something IN the mvar?
00:03:27 <saurabhn_> Lokathor: not initially... but this is what is putting something in the mvar -- https://gist.github.com/saurabhnanda/3bd3172ecf19157142e45282fbf23a8b#file-blocking-hs-L7
00:03:56 <Lokathor> er, right, rather, i mean to ask what readMVar reads out
00:04:10 <Lokathor> it gets a useful value, and all that?
00:06:26 <saurabhn_> Lokathor: the value is never used for anything... it's just a signalling mechanism
00:06:40 <wagle> its not finding the gitit specific modules
00:06:48 <Lokathor> oh I was thinking of tryRead
00:06:59 <Lokathor> readMVar always blocks until there's a thing to read
00:07:00 <Lokathor> hmm
00:07:27 <wagle> they have odd paths, like /Users/wagle/.stack/global-project/.stack-work/install/x86_64-osx/lts-9.8/8.0.2/lib/x86_64-osx-ghc-8.0.2/gitit-0.12.2.1-JjUAs9wz7Y7D2Z9rtJPSMg/Network/Gitit/Interface.hi
00:07:43 <wagle> OOOOOOO..  global project?
00:08:26 <wagle> Axman6: still here?
00:08:36 <wagle> bedtime almost for me
00:09:18 <Lokathor> saurabhn_, sadly I can't recall any special rules or reasons this would be
00:09:37 <Lokathor> switch to STM :P
00:13:29 * wagle keels over, goes zzz
00:22:07 <saurabhn_> what's the easiest way to check if an async thread has crashed?
00:26:00 <cocreature> waitCatch
00:26:27 <cocreature> or "poll" if you don’t want to wait until it stops
00:27:39 <Lokathor> the latest crime of the Prelude is that it doesn't expose the sized integral types
00:27:48 <Lokathor> Word8, Word32, Int32, etc
00:29:41 <saurabhn_> cocreature: thanks... trying to debug an async mysteriously stopping...
00:29:57 <saurabhn_> cocreature: why does the following snippet block indefinitely on a takeMVar, but works fine with a readMVar - https://gist.github.com/saurabhnanda/3bd3172ecf19157142e45282fbf23a8b
00:32:47 <ertes-w> hell
00:33:21 <ventonegro> hell-o
00:33:38 <vtcoo> world
00:35:09 <saurabhn_> is it possible that "too many files open" error causes the RTS to misbehave wrt tracking async-threads?
00:36:32 <dmj`> saurabhn_:  Pool should handle concurrent access for you. Not sure an MVar is even necessary
00:38:15 <saurabhn_> dmj`: that's what I thought. But my POC is showing different results - https://github.com/bos/pool/issues/30
00:39:48 <dmj`> this is how it behaves https://github.com/bos/pool/blob/master/Data/Pool.hs#L277-L288
00:41:01 <saurabhn_> dmj`: not sure what to make of that... takeResource only takes the resource.  Look at https://github.com/bos/pool/blob/master/Data/Pool.hs#L250-L266
00:41:41 <dmj`> right, withResource wraps that, the docs describe its behavior
00:41:42 <dmj`> https://github.com/bos/pool/blob/master/Data/Pool.hs#L231-L249
00:41:44 <saurabhn_> parallel question -- how do I write a case match on **values**, not data constructors? 
00:42:18 <liste> saurabhn_: pattern synonyms
00:42:29 <saurabhn_> dmj`: those docs don't say anything about passing the resource-reference to an async thread. Can pool track this?
00:43:00 <liste> saurabhn_: https://ocharles.org.uk/blog/posts/2014-12-03-pattern-synonyms.html
00:43:20 <saurabhn_> liste: too heavy... can I use "Guards" as described in http://learnyouahaskell.com/syntax-in-functions without defining a helper function?
00:44:33 <liste> saurabhn_: you mean using guards with case?
00:44:54 <dmj`> saurabhn_: it’s all handled for you internally. Internally it uses STM to track DB connections
00:45:34 <saurabhn_> dmj`: somehow the test code that I wrote, isn't demonstrating that. 
00:45:44 <cocreature> if you escape your resources to external threads, pool is lost
00:46:09 <saurabhn_> dmj`: sharing my test code...
00:46:50 <liste> saurabhn_: yes, sure you can use guards with case. there's also https://www.schoolofhaskell.com/school/to-infinity-and-beyond/pick-of-the-week/guide-to-ghc-extensions/basic-syntax-extensions#multiwayif
00:47:18 <saurabhn_> dmj`: https://gist.github.com/saurabhnanda/10715c547c4c9756ab61b8d854574b68
00:47:43 <cocreature> use withAsync in your main thread
00:50:04 <dmj`> saurabhn_: you’re probably allocating a lot of TSO’s, since you are forking in a tight loop and keeping the threads around for 2 seconds. What is the behavior you’re seeing?
00:50:54 <saurabhn_> what's TSO's?
00:51:19 <dmj`> forever . forkIO . threadDelay (10 ^ 6) is basically what you’re doing
00:51:21 <dmj`> https://ghc.haskell.org/trac/ghc/wiki/Commentary/Rts/Storage/HeapObjects#ThreadStateObjects
00:51:35 <saurabhn_> one version keeps going on forever... the other version displaying output for 10 lines... pauses for 2sec... then displays the next 10 lines....
00:52:28 <dmj`> what is the difference between the two versions
00:52:39 <saurabhn_> cocreature: from the docs -- "withAsync is like async, except that the Async is automatically killed (using uninterruptibleCancel) if the enclosing IO operation returns before it has completed."
00:52:49 <saurabhn_> cocreature: do they mean ENCLOSING or ENCLOSED?
00:53:22 <saurabhn_> dmj`: placement of async -- forever $ async.... vs forever $ withResource pool $ \conn -> async $ ....
00:53:28 <cocreature> they mean enclosing
00:54:21 <cocreature> in general, there is no way for a lib to magically track that you escape things to other threads
00:54:27 <cocreature> you need to deal with that yourself
00:54:44 <cocreature> e.g. by ensuring that the forked threads don’t live longer than the thread owning the resource pool using withAsync
00:56:03 <dmj`> @saurabhn_ can you remove the threadDelay
00:56:03 <lambdabot> Unknown command, try @list
00:56:05 <supercynic> note about withAsync: it only kills the thread, but doesn't wait for it to die
00:56:08 <saurabhn_> dmj`: any thoughts on what cocreature is saying ^^
00:56:28 <saurabhn_> dmj`: my POC is also confirming what cocreature is saying
00:56:34 <supercynic> if you use withAsync from your main thread, the async thread may not have enough time to clean up
00:57:39 <saurabhn_> cocreature: is this something that linear types OR borrower/checker solves?
00:57:48 <cocreature> supercynic: depends on what you mean by “time to clean up”. it might not have time to completely properly but iirc async changed it’s behavior somewhat recently (within the last two years or so) to wait for the termination of the borrow checker
00:58:04 <cocreature> eh s/borrow checker/exception handler/
00:58:06 <cocreature> …
00:58:34 <cocreature> saurabhn_: not really, they will just forbid escaping references to other threads
00:59:01 <saurabhn_> ah finally got my asycn error message -- "=====> Job Poller crashed due to Left openFile: resource exhausted (Too many open files)" 
01:00:02 * hackagebot matplotlib 0.6.0 – Bindings to Matplotlib; a Python plotting library – https://hackage.haskell.org/package/matplotlib
01:01:24 <saurabhn_> is that error supposed to be an OS-wide error or some process is running out of File-descriptors? how do I find out which process? If it were GHCi, would the OS have terminated GHCi itself?
01:01:47 <supercynic> cocreature: i'm observing some really weird behaviour
01:02:01 <supercynic> main = withAsync (threadDelay 1000000 `finally` (threadDelay 1000000 *> putStrLn "Test")) (\_ -> pure ())
01:02:10 <supercynic> terminates instantly with no output
01:02:30 <supercynic> main = withAsync (threadDelay 1000000 `finally` (threadDelay 1000000 *> putStrLn "Test")) (\_ -> putStrLn "Quit")
01:02:49 <supercynic> this one on the other hand shows the behaviour you just described
01:03:10 <supercynic> it prints "Quit", then waits for half a second, then prints "Test"
01:04:01 <supercynic> i guess in the former version the secondary thread doesn't have enough time to reach the 'finally'
01:05:54 <cocreature> supercynic: right, you are going to need something like forkFinally but I’m not sure there is an async equivalent of that
01:07:06 <cocreature> but for the usual “bracket” pattern that’s not a problem. either you have time to allocate resources and install exception handlers or you don’t have time to even allocate resources
01:09:58 <A1206> is it possible to call .net dll's from haskell?
01:10:20 <supercynic> cocreature: yeah, seems reasonable
01:23:26 <MUWA> testing...
01:25:23 <|{ame> hello, is there a more compact way of writing:  case ws of Nothing -> return ()  Just something -> f something. 
01:26:02 <tomsmalley> maybe (return ()) f
01:31:26 <Boomerang> mapM_ f
01:32:02 <cocreature> or traverse_ if you want to be more “modern” (and more general)
01:32:08 <saurabhn_> my ghci session is holding about 200+ open files that are showing up as the following in lsof -- "ghc       27429 saurabhnanda  254     PIPE 0xc485124d3c8a509d      16384         ->0xc485124d4e0d659d" -- and I'm getting a "openFile: resource exhausted (Too many open files)" error. What are these open files?
01:33:00 <supercynic> yeah, please avoid using mapM* and forM*, so they can die peacefully
01:33:38 <Boomerang> I was going for compactness ^^ But yes you can do better!
01:33:55 <cocreature> it’s kind of annoying that traverse_ is so long
01:34:11 <supercynic> i don't mind the length, but i do mind that i still have to import Data.Foldable
01:34:11 <merijn> saurabhn_: Well, do you open lots of files?
01:34:17 <cocreature> for forM_, for_ is even shorter :)
01:34:21 <saurabhn_> supercynic: didn't completely understand. I don't think I've used forM or mapM to create these threads. I've used async to spawn them off in the background. And I'm not really holding on to the async reference. Has it anything to do with using `forever` in the async loop?
01:34:37 <supercynic> saurabhn_: that wasn't for you
01:34:45 <saurabhn_> supercynic: oh sorr
01:35:17 <saurabhn_> merijn: lot's  of async threads. Each thread is reading a file, POSTing it to an node-HTTP service running on another port, then sending an email via SMTP.
01:35:41 <cocreature> are you closing the files properly?
01:35:53 <cocreature> in particular are you reading them strictly?
01:36:01 <merijn> ^^ what he said
01:36:07 <saurabhn_> cocreature: I'm using Text.IO.readFile to read the file contents. Not really opening/closing them manually.
01:36:54 <saurabhn_> cocreature: then I'm using Wreq to post to the node-microservice, and Wreq, I believe uses BSL. Could that be causing anything?
01:37:55 <saurabhn_> just wondering -- does Wreq keep the network connection open till the response body is consumed?
01:39:54 <mniip> damn, how come there isn't a "createThread :: IO a -> IO (IO a)"
01:40:04 <merijn> mniip: What would that do?
01:40:20 <merijn> mniip: Also, that looks a lot like async?
01:40:31 <merijn> mniip: Since threads don't have a builtin way to communicate results back
01:40:48 <mniip> createThread m = do v <- newEmptyMVar; forkIO (m >>= putMVar v); getMVar v
01:40:58 <mniip> imagine how clever it would be to write...
01:41:09 <mniip> do t <- createThread (...)
01:41:13 <mniip>    join t
01:41:35 <mniip> :t Control.Monad.join
01:41:36 <lambdabot> Monad m => m (m a) -> m a
01:41:41 <cocreature> mniip: should that be "pure (getMVar v)"
01:41:43 <mniip> yes
01:41:55 <cocreature> also I agree with merijn, it does look a lot like async
01:42:21 <mniip> well
01:42:34 <mniip> async doesn't give you the pun of using "join" to join threasd
01:42:58 <merijn> cocreature: getMVar doesn't exist :p
01:43:09 <merijn> Probably readMVar or takeMVar
01:43:12 <cocreature> merijn: heh fair enough
01:43:17 <mniip> merijn, retreiveMVar
01:43:40 <mniip> unearthMVar
01:43:46 <mniip> winkleOutMVar
01:44:13 <saurabhn_> could I be facing https://github.com/bos/wreq/issues/57
01:44:14 <DigitalKiwi> if you join threads you make fabric! ...or rope
01:44:36 <DigitalKiwi> of course that's just string theory
01:44:41 <|{ame> thank you everybody, it worked ;)
01:46:17 <merijn> Right, so anyone here experienced with Travis CI setups? (Not specifically for Haskell)
01:46:29 <mauke> I'm using travis for some of my stuff
01:46:47 <mniip> likewise
01:47:10 <merijn> mauke: Do you know if it's possible to group parts of the buildscript conveniently so the logs get collapsed together?
01:47:15 <mniip> using it for testing compilation of an android app and it's been terrible so far
01:47:21 <merijn> I'm looking at the Build Stage documentation, but it's...not great
01:48:55 <mauke> I don't even know what you're talking about ¯\(°_o)/¯
01:50:21 <DigitalKiwi> what happened to your eyes
01:50:23 <merijn> mauke: .travis.yml has a "script" which lists build steps to execute. It can also collapse/group things in the output log. I'm trying to see if I can somehow group repetitive sections of the build script to make use of that
01:50:27 <merijn> See https://docs.travis-ci.com/user/build-stages/
01:50:51 <merijn> Somewhat relatedly: Is there a shell command that gives me a unique temporary dictorery I can use?
01:51:27 <mauke> mktemp -d?
01:52:35 <merijn> mauke: Cheers
01:52:58 <DigitalKiwi> you three talking is really confusing
01:53:36 <DigitalKiwi> all of your names start with m, are similar in color, and even though merijn has more letters it's the same length :|
01:54:25 <DigitalKiwi> just thought you should know
01:54:25 <merijn> "more letters" + "same length" = "switch to a fixed width IRC font, you heathen!"
01:54:35 <mauke> * merijn is now known as merÿn
01:54:40 <DigitalKiwi> but it's so pretty :<
01:54:44 <merijn> mauke: Wrong letter
01:54:59 <mauke> then why does it look so right?
01:55:00 <merijn> You mean "merĳn"
01:55:07 <_sras_> I have a stact project inside a folder that containes another stack project. When I try to build the outer project, Stack errors out by saying that there are two main modules. How can I make it to select the right one?
01:55:18 <merijn> And I've tried changing my nick to that, but FreeNode only allows ascii in nicknames
01:55:34 <merijn> US imperialist bastards!
01:55:57 <opqdonut> heh, ÿ is actually pretty close to ĳ if you think about it
01:56:37 <opqdonut> merijn: my guess is exotic chars in nicks are banned to make kicking/banning people easy
01:56:58 <merijn> opqdonut: That's what you have tab complete/host masks for!
01:57:03 <DigitalKiwi> that's what happens when two parallel lines meet discretely and get stuck
01:57:11 <opqdonut> merijn: yeah modern clients help with this
01:58:43 <mniip> "FreeNode"
01:58:46 <mniip> what is this 2002
01:59:43 <DigitalKiwi> if you want unicode names you have to move to PayNode
01:59:54 <opqdonut> yeah the logo is actually 0free9node
02:00:00 <DigitalKiwi> unicode is expensive ya know
02:00:08 <mauke> merijn: ok, that looks complicated. my stuff is more like https://github.com/mauke/Function-Parameters/blob/master/.travis.yml or https://github.com/mauke/unibilium/blob/master/.travis.yml
02:00:38 <mniip> DigitalKiwi, paidleaf
02:01:09 <merijn> mauke: Yeah, I have the complicated stuff generated by multi-ghc-travis atm: https://github.com/merijn/broadcast-chan/blob/master/.travis.yml
02:01:11 <phaazon> UTCTime has no instance for Binary? :(
02:01:16 <phaazon> how is that even possible :(
02:01:59 <mniip> phaazon, because it's not an integral type
02:02:00 <merijn> mauke: I'm just trying to make multi-ghc-travis work nicely with cabal.project (well, actually I think I've got that solved now, just gotta make sure the resulting script doesn't suck balls
02:02:01 <DigitalKiwi> mniip when the tree was damaged in the storm what did he get from his employer? paidleaf
02:02:32 <mniip> phaazon, it's a pair of numbers, and they're not even nice
02:02:55 <phaazon> mniip: so how do I transform an object that owns an UTCTime into a ByteString then?
02:03:12 <merijn> phaazon: Clearly you render UTCTime to Text and serialise that :p
02:03:16 <mniip> ah Binary, I thought I read Bits
02:03:28 <phaazon> whatever can gives me a ByteString
02:03:31 <mniip> you might be able to derive Binary via Generics
02:03:37 <phaazon> give*
02:03:47 <phaazon> I guess pack . show is a bit overkill, right?
02:04:15 <opqdonut> sounds like a reasonable first implementation
02:04:21 <merijn> phaazon: Convert to CTime/EpochTime? https://hackage.haskell.org/package/time-1.8.0.3/docs/Data-Time-Clock-POSIX.html
02:04:36 <Cale> It's an instance of Data, so SYB-style generics are more likely
02:04:38 <phaazon> yeah, I’ll go with convertString . show
02:04:43 <phaazon> it sucks, but it’s something.
02:04:48 <phaazon> SYB?
02:04:59 <Cale> Scrap Your Boilerplate
02:05:06 <phaazon> (:
02:05:13 <Cale> https://hackage.haskell.org/package/syb
02:05:39 <Cale> so, binary...
02:06:04 <Cale> https://hackage.haskell.org/package/binary-generic-0.2.1/docs/Data-Binary-Generic.html
02:06:07 <Cale> there it is
02:06:29 <Cale> You can use getGeneric and putGeneric on UTCTime
02:07:29 * hackagebot data-diverse 1.1.0.0 – Extensible records and polymorphic variants. – https://hackage.haskell.org/package/data-diverse
02:41:44 <saurabhn_> I'm seeing some really strange behaviour... if I use Text.IO.readFile OR Wreq.post in my code it leads to  "too many files open" error after running for some time. Any ideas on how to get to the bottom of this?
02:42:38 <boj> not properly closing connections/files and using up your OS file descriptors i imagine
02:43:43 <Boomerang> You could increase the number of open files. I think it's `ulimit`
02:44:35 <Boomerang> `ulimit -a` to see the current values and `ulimit -n 1234` to set the limit to 1234
02:45:03 <saurabhn_> Boomerang: don't want to resort to that because it'll most definitely blow-up in production. My understanding is that the connections should no longer even be open after an async exits.
02:46:05 <saurabhn_> Boomerang: hang on... 
02:46:15 <saurabhn_> Boomerang: it's only 256 files 
02:46:20 <Boomerang> That makes sense :) I often find that for web servers the default limit of 1024 is too low.
02:46:55 <Cale> saurabhn_: Yeah, it's common for filehandle limits to be *really* draconian for some reason.
02:47:42 <Cale> I don't really understand why these things have to be such a limited resource. It probably has something to do with everything being written in C.
02:48:08 <saurabhn_> Boomerang: would 40-connection pool + equal number of asyncs + one read file + 2-3 wreq calls per async run over that 256 limit easily?
02:48:40 <saurabhn_> is an async an open FD?
02:49:07 <Cale> Not if you're talking about what I think you are
02:49:46 <Cale> https://hackage.haskell.org/package/async-2.1.1.1 ?
02:50:00 <Cale> https://hackage.haskell.org/package/async-2.1.1.1/docs/src/Control-Concurrent-Async.html#Async
02:50:28 <saurabhn_> is there any way to monitor the open number of FDs in a GHCi session? Can I start a new async thread to print that out every few seconds?
02:52:47 <Boomerang> saurabhn_: I think you can see the number of FDs using the pid of the process: https://www.cyberciti.biz/tips/linux-procfs-file-descriptors.html
02:53:20 <Boomerang> and then use watch to see it change over time
02:53:23 <Cale> You can ls /proc/<pid>/fd
02:53:34 <Cale> where <pid> is the pid of your process
02:56:35 <saurabhn_> Cale:  you know how to do that in Mac OSX?
02:58:10 <merijn> Cale: No, it's because the defaults assume a multi-user system
02:58:23 <merijn> Cale: Don't want 10k files open per user on a system with 100+ users
03:00:13 <saurabhn_> open FDs have stabilised at around 510
03:00:26 <saurabhn_> let me try increasing the DB pool size to see what happens
03:02:06 <AWizzArd> Which is „the best” lib to use to do SQL with an Oracle DB?  HDBC?  http://hackage.haskell.org/packages/search?terms=oracle
03:03:41 <Cale> merijn: Why not?
03:04:01 <supercynic> Cale: the reasoning i read (about the ridiculous default FD limit) was that they are trying to stop buggy software from running amok
03:04:01 <Cale> merijn: What would be so terrible about having a million files open?
03:04:33 <supercynic> i don't know if that's the official reasoning, but it's bullshit in either case
03:06:13 <Cale> Personally, I feel like the system should just be able to open files until you run out of memory for filehandles.
03:06:43 <supercynic> agreed
03:08:20 <saurabhn_> Handling Ctrl+C in Haskell -- is this the correct way? http://zguide.zeromq.org/hs:interrupt
03:11:46 <supercynic> saurabhn_: it's an option, but i prefer to just throw an exception at the main thread
03:12:33 <saurabhn_> and what's the easiest way to shut down any async threads that my have been spawned? (I'm in GHCi, so the process it not going to exit)
03:12:44 <saurabhn_> s/it/is
03:13:47 <supercynic> saurabhn_: do mainTid <- myThreadId; installHandler sigINT (CatchOnce (killThread mainTid)) Nothing
03:13:57 <supercynic> same for sigTERM
03:14:17 <saurabhn_> does anything in the async package make this automatic at all?
03:14:17 <supercynic> that way ctrl+c just raises an async exception
03:14:33 <supercynic> you're using withAsync, aren't you?
03:28:41 <yoneda> AWizzArd: I've used it, but you have to apply the patch https://github.com/abbradar/hdbc-odbc/commit/79ffd1f5060d2c8b5cbdfd4eba8ae6414372d6b7 if working with odbc in order to avoid the annoying error 'Prelude.chr: bad argument'
03:32:34 <AWizzArd> yoneda: was this the only lib that you used to access Oracle? Or did you try others too?
03:35:21 <knupfer> Is there a append function for unboxed strings?
03:35:39 <knupfer> append "foo"# "bar"# === "foobar"#
03:38:18 <lesshaste> out of interest.. why is 1/0 Infinity and not undefined?
03:38:51 <lesshaste> I mean NaN
03:38:52 <merijn> lesshaste: That's only true for Double
03:39:03 <merijn> lesshaste: And why is "because IEEE754 says so"
03:39:05 <lesshaste> merijn, it just seems a mathematical mistake to me
03:39:33 <lesshaste> merijn,  Is 1/0 defined as a double?
03:39:43 <lesshaste> (1/0)*0
03:39:43 <lesshaste> NaN
03:39:45 <knupfer> lesshaste: depends
03:39:53 <lesshaste> is that also IEEE754 ?
03:39:53 <knupfer> > 1/0 :: Double
03:39:56 <merijn> lesshaste: It defaults to Double in the absence of annotations
03:39:56 <lambdabot>  Infinity
03:40:06 <knupfer> > 1/0 :: Fractional
03:40:09 <lambdabot>  error:
03:40:09 <lambdabot>      • Expecting one more argument to ‘Fractional’
03:40:09 <lambdabot>        Expected a type, but ‘Fractional’ has kind ‘* -> Constraint’
03:40:17 <knupfer> > 1/0 :: Rational
03:40:20 <lambdabot>  *Exception: Ratio has zero denominator
03:40:56 <lesshaste> (1/0)*0  is NaN not Infinity because of IEEE754 rules too?
03:41:24 <lesshaste> ok.. so the madness is IEEE754 :)
03:42:39 <lesshaste> 2/1 :: Fractional   gives an error too of course
03:43:06 <lesshaste> merijn,  thanks
03:43:07 <knupfer> Yeah, it was a typo
03:43:11 <lesshaste> k
03:43:21 <lesshaste> thanks knupfer 
03:43:35 <lesshaste> how do you define a complex type in haskell?
03:44:05 <lesshaste> Data.Complex ?
03:44:14 <merijn> yeah
03:44:16 <Boomerang> > 1 :+ 1
03:44:19 <lambdabot>  1 :+ 1
03:45:12 <mauke> > 1 :: Complex Double
03:45:12 <lesshaste> thanks
03:45:15 <lambdabot>  1.0 :+ 0.0
03:45:35 <electrocat> is there a way to add the HasCallStack typeclass to everything implicitly?
03:45:37 <lesshaste> mauke, ah! 
03:45:59 <merijn> electrocat: I think you can always get callstacks when you compile with profiling? Not sure, though
04:00:26 <dave24> https://www.olivierverdier.com/posts/2015/10/09/type-logic-haskell/#associativity-and-distributivity
04:00:44 <dave24> I don't understand this, is he saying that those statements are true
04:01:00 <dave24> what if A, C but not B?
04:01:44 <dave24> Sorry if this is only marginally related to haskell
04:02:10 <opqdonut> if A=C=1, B=0, then BvC=1 and so A^(BvC)=1
04:02:30 <opqdonut> oh there's typo
04:02:37 <maerwald> I want total functions
04:02:48 <opqdonut> that should be A^(BvC) <=> (A^B) v (A^C)
04:03:03 <opqdonut> etc
04:03:03 <dave24> That would make sense
04:03:17 <dave24> ok, it's not just me. Thanks!
04:06:59 <electrocat> merijn: you're right, but i want to get the callstack at runtime using https://hackage.haskell.org/package/base-4.10.0.0/docs/GHC-Stack.html
04:07:27 <electrocat> it would be a pain if i had to add HasCallStack => to every function definition ever in my codebase
04:08:18 <merijn> electrocat: Not sure then, tbh
04:09:19 * hackagebot foundation 0.0.16 – Alternative prelude with batteries and no dependencies – https://hackage.haskell.org/package/foundation
04:09:19 * hackagebot basement 0.0.3 – Foundation scrap box of array & string – https://hackage.haskell.org/package/basement
04:13:05 <merijn> ugh...Travis take ages to fetch GHC :\
04:14:39 <maerwald> call the support.. oh wait, you're probably using infrastructure for free :>
04:16:45 <erisco> where should I go or what should I subscribe to to learn about tools and products that could be relevant to me as a Haskell programmer?
04:17:56 <hpc> really, stack is the only one you need to know that's haskell-specific
04:18:17 <hpc> maybe nix if you're a tea-drinker :P
04:18:21 <merijn> hpc: cabal-install would help
04:18:35 <hpc> merijn: yeah, that's fair
04:18:54 <erisco> things come out such as Haskell Book which would be great to know about from a news letter or something
04:19:06 <hpc> you'll also want to know general tools like git and such
04:19:17 <erisco> I can't figure out everything just from catching conversations in #haskell
04:20:02 <supercynic> erisco: haskell-cafe and reddit
04:20:22 <merijn> hpc: I think you misspelled mercurial
04:20:34 <hpc> heh
04:20:46 <barrucadu> I think you misspelled darcs :p
04:20:53 <merijn> barrucadu: Can't use darcs with github
04:20:56 <hpc> erisco: for concepts, you'll want to know the PVP and reproducible builds
04:20:58 <maerwald> coming up with dead DVCSes now? :>
04:20:59 <supercynic> i think you misspelled pijul
04:21:08 <maerwald> or alpha DVCSes
04:21:13 <hpc> cvs 4 lyf
04:21:35 <merijn> I'd consider using darcs if I could actually use it for anything
04:21:46 <erisco> hpc, I don't mean to ask what the defacto Haskell tools are… I mean to ask how to learn of new Haskell tools and products
04:21:47 <merijn> But can't use it with 90% of existing project
04:21:53 <hpc> ah
04:21:54 <merijn> Mercurial, OTOH, works just fine :)
04:21:55 <erisco> the official mailing lists are probably a good start
04:22:02 <erisco> I don't reddit…
04:22:11 <erisco> but I guess I can read it
04:22:33 <supercynic> or you jump on the bandwagon and use the stack ecosystem…  then all you need is to eat whatever the stack team throws in your direction =)
04:22:35 <merijn> 2 minutes to fetch 40MB worth of GHC :\
04:22:37 <hpc> yeah, here + mailing lists + reddit will find you everything
04:22:57 <merijn> Is that launchpad being so slow, or what?
04:23:07 <hpc> there's really not a whole lot you need to learn in terms of discovering that the tools to know are X, Y, and Z
04:23:10 <erisco> the nearest place I can think of for a Haskell get-together is in Toronto, painfully far away
04:23:12 <maerwald> launchpad still exists? xD
04:23:28 <merijn> maerwald: It's where hvr's GHC PPAs are
04:23:34 <maerwald> oh jeez
04:23:52 <maerwald> I remember it crashing my browser
04:24:11 <merijn> ah...bollocks
04:24:24 <merijn> wildcards don't get expanded in quotes?
04:24:38 <hpc> bash wildcards?
04:24:44 <supercynic> erisco: i'm subscribed to haskell-cafe…  if it's important enough, it will be mentioned there one way or another
04:24:55 <merijn> I guess I'll have to individual characters when I wanna safely generate wildcard names
04:24:58 <merijn> hpc: Yeah
04:25:03 <supercynic> i don't read haskell reddit, unless i'm reeeally bored
04:25:06 <hpc> they expand in "" iirc, but not ''
04:25:13 <merijn> hpc: They don't expand in "" either
04:25:16 <merijn> hpc: Variables do
04:25:19 <hpc> ah
04:25:20 <merijn> hpc: * does not
04:25:28 <barrucadu> There's also https://planet.haskell.org/ which is good for keeping up with blogs
04:25:29 <merijn> hpc: Which is really ruining my day...
04:25:37 <hpc> what about "$(echo *)"?
04:25:53 <merijn> hpc: Since defensive programming dictates I have to defend against morons having whitespace in their directory names
04:25:58 <barrucadu> https://haskellweekly.news/ has a feed too, and tends to include good stuff
04:26:06 <hpc> you should use perl then
04:26:09 <z0ttel> I like whitespaces in my names
04:26:10 <z0ttel> =D
04:26:36 <merijn> hpc: Travis script, so it's stuck with bash
04:26:50 <saurabhn_> okay, so landed with a non-stack project on hackage. I've cloned the repo. How do I build this thing without messing up my global env?
04:27:05 <supercynic> merijn: i have spaces in my directory names…
04:27:21 <supercynic> not in code bases though
04:27:24 <merijn> supercynic: Then I hate you for making my life difficult >.<
04:27:32 <barrucadu> saurabhn_: cabal sandboxes or cabal new-build
04:27:34 <opqdonut> saurabhn_: cabal new-build
04:27:51 <supercynic> merijn: how?
04:27:55 <barrucadu> Or even just run `stack init` and use stack
04:27:57 <saurabhn_> not 'cabal build' ?
04:28:07 <hpc> merijn: perl -e then :D
04:28:14 <merijn> hpc: Not sure perl is available
04:28:15 <opqdonut> saurabhn_: that installs stuff globally AFAIK
04:28:22 <merijn> oh, partially quoted works, at least...
04:28:26 <barrucadu> new-build has the fancy sandboxing stuff
04:28:31 <saurabhn_> ah... dodged a bullet there!
04:28:36 <supercynic> merijn: you should be prepared to handle spaces in file names, much like you should be prepared to handle line feeds…  and it's not exactly difficult =)
04:28:54 <merijn> supercynic: Yeah? You try and write bash scripts that deal with that shit
04:29:02 <merijn> supercynic: stringly-typed hell
04:29:03 <maerwald> that's pretty easy
04:30:03 * hackagebot hmep 0.1.1 – HMEP Multi Expression Programming – a genetic programming variant – https://hackage.haskell.org/package/hmep
04:32:51 <supercynic> merijn: i do it all the time
04:33:30 <supercynic> merijn: there are a few basic rules to follow, and you should follow them any way when writing shell scripts
04:33:35 <merijn> supercynic: Right, and now embed that bash script inside a yaml file, complicating quoting even more
04:33:47 <merijn> supercynic: And now embed that yaml file in haskell string literals
04:34:00 <supercynic> merijn: in fact i do even that all the time =)
04:34:09 <supercynic> merijn: the trick is to use block syntax
04:34:23 <supercynic> then you don't need to care about quoting
04:34:34 <merijn> Pretty sure block syntax is a no go here
04:34:41 <supercynic> why?
04:35:13 <merijn> Because Travis expects you to write everything as a sequence
04:35:45 <supercynic> what do you mean?  block syntax is just another way to notate a string
04:35:48 <supercynic> blah: |
04:35:52 <supercynic>   my two-line
04:35:54 <supercynic>   string
04:36:10 <erisco> looks like that yaml thing
04:36:22 <opqdonut> it's called .travis.yml for a reason
04:37:05 <hexagoxel> merijn: https://github.com/lspitzner/brittany/blob/master/.travis.yml#L258
04:38:21 <merijn> ugh, and of course their yaml parser is retarded...
04:38:41 <opqdonut> merijn: anyway, can't you just invoke a script from travis?
04:38:48 <opqdonut> a script written in some saner language
04:38:48 <maerwald> yes
04:39:01 <merijn> hexagoxel: https://github.com/merijn/broadcast-chan/blob/travis/.travis.yml#L81
04:39:30 <merijn> hexagoxel: It's somehow interpreting 'printf "packages' as a key >.>
04:40:30 * hackagebot polydata-core 0.1.0.0 – Core data definitions for the "polydata" package – https://hackage.haskell.org/package/polydata-core
04:40:45 <supercynic> merijn: i'm not exactly a fan of mixing quoting styles, but in this case it's useful:  - 'printf "…" > …'
04:41:10 <opqdonut> why not have all that stuff in a .travis.sh file, and then just invoke that in the script:
04:41:14 <supercynic> YAML is a bit too flexible about strings
04:41:18 <opqdonut> one less layer of quoting to handle
04:41:51 <hexagoxel> the only downside is that travis will report "failure while invoking big_script" instead of the exact step then.
04:42:27 <opqdonut> set -x helps with that
04:42:37 <opqdonut> (make bash print out every line as it is executed)
04:43:06 <opqdonut> or perhaps a middle ground, have a .prepare-cabal.sh or something
04:43:21 <saurabhn_> anyone knows blaze-markup? What does this do? ==> line = Leaf "line" "<line" " />"
04:44:23 <opqdonut> https://hackage.haskell.org/package/blaze-markup-0.8.0.0/docs/Text-Blaze-Internal.html#v:Leaf
04:44:32 <opqdonut> looks like tag name, open tag, close tag
04:44:41 <mauke> I don't, but my guess is: it defines a custom 'leaf' value
04:44:44 <mauke> er
04:44:46 <mauke> 'line'
04:44:50 <supercynic> open half-tag, close half-tag
04:44:52 <mauke> for emitting <line > tags
04:46:27 <supercynic> saurabhn_: you shouldn't need to deal with MarkupM though
04:46:46 <saurabhn_> fixing a bug in some other library
04:47:08 <saurabhn_> this is used like the following ==> line ! file (toValue filename)
04:47:59 <saurabhn_> which doesn't compile, because `!` is expecting a MarkupM, but is being passed an `a -> MarkupM`. Changing the definition of `line` to `line = Leaf "line" "<line" " />" ()` (notice the unit at the end) seems to make it compile, but I don't know what I just did.
04:48:53 <yoneda> AWizzArd: (sorry for my delay) no, I haven't tried other libs, they didn't compile on my systems. HDBC, instead, nowaday is pretty update
04:55:42 <AWizzArd> yoneda: oki, thanks for the feedback!
04:55:46 <merijn> cocreature: ping?
05:04:54 <saurabhn_> is there any way to integrate this TH function in my monad-stack and get it to report the filepath and file-location properly?
05:04:58 <saurabhn_> ==> https://hackage.haskell.org/package/airbrake-0.2.0.0/docs/src/Airbrake.html#notifyQ
05:06:01 <thblt> I have a small problem with Stack on Nixos.  I'm using stack on a shebang for a small script, with pandoc as the only dependency.
05:06:08 <thblt> My stack is configured to use nix
05:06:24 <thblt> And the setup phase fails with "The program ar is required but it could not be found."
05:06:24 <thblt>  
05:06:32 <thblt> I've installed binutils, and ar is in path
05:11:09 <maerwald> path is a "relative" concept in nix :D
05:12:52 <thblt> maerwald: ar at a prompt runs ar :)
05:13:57 <thblt> (including the very same prompt I run my script from)
05:15:19 <thblt> ... but actually it seems that was the issue, installing binutils at OS level solved it.
05:15:39 <thblt> maerwald: thanks! :)
05:17:18 <geekosaur> welcome to nix. take a look at the glue scripts they use sometime; you will no longer winder why things like this happen, at least.
05:17:41 <geekosaur> (presuming you don't go blind)
05:17:52 <thblt> geekosaur: :-)
05:18:37 <thblt> I'll try not to go blind, and for now, I think I'll just forget my idea to run my small program as a script.
05:18:50 <thblt> (it's complaining about something else now)
05:19:03 <geekosaur> actually though, I would wonder if it's something simple. like setting PATH and not exporting it
05:19:21 <supercynic> thblt: /usr/bin/env is your friend on NixOS =)
05:19:31 <supercynic> #! /usr/bin/env myprog
05:20:05 <thblt> supercynic: I'm using it, but the issue was some package builder somehow not looking for ar in $PATH, I guess. 
05:20:18 <thblt> The new issue is about zlib, so I'm giving up, it's really not important enough.
05:21:01 <supercynic> thblt: what about just replacing stack by nix?
05:21:30 <thblt> supercynic: Indeed, there's GHC with packages.
05:21:50 <thblt> I'll try
05:22:11 <thblt> (ghc.ghcWithPackages, I mean)
05:22:18 <supercynic> thblt: and there is cabal2nix
05:22:57 <supercynic> if you use 'cabal2nix --shell', you will get a nix expression that works with nix-build directly
05:23:26 <maerwald> I'd rather use stack than nix :>
05:23:41 <maerwald> both are weird tools, but the stack expression at least works reliably
05:24:06 <maerwald> err, s/expression/abstraction/
05:24:28 <cocreature> merijn: pong
05:26:55 <cheater> i would like to have a simple local store (in a single file) to store some ADTs inside with enums etc. this is a single-user application and the lib should enforce single access. what's the best way to do this?
05:26:56 <merijn> cocreature: I was gonna ask you to test my new multi-ghc-travis with cabal.project, but the last change I wanted to make before submitting a PR is taking longer to fix then I was planning to take >.>
05:27:32 <cocreature> merijn: I’m not touching my travis config unless I have to, it took me way too long to get it working :P
05:27:32 <cheater> it doesn't need to be human readable, and it only needs to store small amounts of data (a few mb at most)
05:27:42 <cheater> MB
05:28:27 <merijn> cocreature: Should only be a matter of "./make-travis-yml cabal.project" with this setup :)
05:28:47 <cocreature> merijn: not really, I need to get an up2date LLVM installed as well
05:28:50 <merijn> cocreature: I'm trying to be fancy and use folding on the build output, but somehow it's not working for me...
05:29:37 <merijn> Frustratingly it seems to work just fine for other people...
05:31:22 <maerwald> I kinda like Kokas effect semantics more than haskells, although io is still kinda "all or nothing"
05:31:46 <maerwald> pretty similar to F* actually
05:33:14 * hackagebot computational-geometry 0.1.0 – Collection of algorithms in Computational Geometry. – https://hackage.haskell.org/package/computational-geometry
05:43:21 * hackagebot text-containers 0.1.0.0 – Memory-efficient string-indexed container types. – https://hackage.haskell.org/package/text-containers
05:43:21 * hackagebot indextype 0.2.1.0 – A series of type families and constraints for "indexable" types. – https://hackage.haskell.org/package/indextype
05:54:27 * hackagebot computational-geometry 0.1.0.1 – Collection of algorithms in Computational Geometry. – https://hackage.haskell.org/package/computational-geometry
05:58:54 <supercynic> hvr: text-containers looks really useful…  thanks!
05:59:20 <Athas> Does the zlib package work on Windows?
06:05:34 * hackagebot computational-geometry 0.1.0.2 – Collection of algorithms in Computational Geometry. – https://hackage.haskell.org/package/computational-geometry
06:05:34 * hackagebot lxd-client-config 0.1.0.0 – Read the configuration file of the standard LXD client. – https://hackage.haskell.org/package/lxd-client-config
06:15:28 <LeanderK> Hey, is it possible to write a type-family that extract the domains from a type-level list of functions ('[Bool -> Int, String -> String]) ?
06:18:53 <merijn> Right...any cabal.project users around?
06:18:58 <merijn> I need guinea pigs
06:24:41 <supercynic> LeanderK: should be straightforward with a closed type family
06:26:07 <LeanderK> supercynic like this: type family "ToDomain (f :: a -> b) :: b where; ToDomain (a -> b) = a"?
06:29:00 <LeanderK> supercynic sry, got a few as and bs mixed up. Well this crashed GHC and i wanted to make sure i am on the right track 
06:32:17 <hexagoxel> LeanderK: type family ToDomain (xs :: [*]) :: [*] where ToDomain '[] = '[]; ToDomain ((a -> b) ': r) = a ': ToDomain r
06:32:43 <supercynic> LeanderK: type family MapCod (xs :: [Type]) :: [Type] where MapCod '[] = '[]; MapCod ((a -> b) ': xs) = b ': MapCod xs
06:33:13 <supercynic> err, replace Type by * in your version (unless you're using TypeInType anyway)
06:33:58 <supercynic> i tried to do it with a generic Map function, but haskell doesn't like partial application
06:35:54 * hackagebot log-warper 1.3.2 – Flexible, configurable, monadic and pretty logging – https://hackage.haskell.org/package/log-warper
06:39:46 <saurabhn_> what's the easiest way to spawn a fire-and-forget thread so that it doesn't cause any issues with the parent thread whatsoever?
06:40:00 <saurabhn_> will a simple 'async' do the job?
06:41:02 * hackagebot computational-geometry 0.1.0.3 – Collection of algorithms in Computational Geometry. – https://hackage.haskell.org/package/computational-geometry
06:43:28 <EvanR> saurabhn_: forkIO is exactly that
06:43:45 <EvanR> async is for when you do want solid interaction with the parent
06:44:14 <EvanR> a simple forkIO thread will continue independently and crash or end in silence
06:44:27 <maerwald> does he mean an actual thread?
06:44:29 <saurabhn_> a simple forkIO will handle sync/async exceptions (still haven't understood all that masking/unmasking stuff)
06:44:40 <saurabhn_> maerwald: no, green-thread
06:45:10 <EvanR> only if the async exception is directed at that thread, which is up to you
06:46:04 <EvanR> those are used in async to implement cancel for example
06:46:12 <supercynic> saurabhn_: if there is no communication between the threads, and you're using -threaded, then a thread created by forkIO pretty much acts like a separate haskell program that runs simultaneously
06:46:30 <supercynic> saurabhn_: with one caveat: when the main thread exits, all threads exit
06:46:49 <saurabhn_> that's cool... so, forkIO it is!
06:46:54 <supercynic> immediately, so it won't have time for cleanup, even if you use stuff like 'bracket' or 'finally'
06:47:15 <saurabhn_> EvanR: and if the forked thread doesn't have the parents ThreadId then it can't throwTo, right?
06:47:19 <EvanR> forkIO falls short when you want to be notified when the thread ends, or monitor several such threads
06:47:35 <supercynic> or simply give threads time to release resources properly
06:47:49 <saurabhn_> using this thread it to notify a remote service of errors. Don't want that to error out itself.
06:48:08 <EvanR> errors in the thread? or other errors
06:48:45 <EvanR> if you want to do something when the thread crashes, use async
06:49:25 <saurabhn_> don't care if the error reporter itself crashes. Won't be able to really do anything about it.
06:49:30 <Cale> data MaybeNot a = Only a | Everything
06:53:31 <Psybur> Since there's a bottom, is there a top? :D
06:55:04 <Cale> Perhaps it really ought to be  data MaybeNot a = Only (a -> Void) | Everything
06:55:12 <Cale> but that's actually less useful :)
06:55:58 <Cale> Even if it's a bit of a joke, I actually have run into a funny situation now and then where this would have prevented confusion
06:56:34 <Cale> Where you have a Maybe of some data regarding a restriction, and Nothing ends up meaning "give me all of it".
06:57:05 <saurabhn_> how can I get an Exception's "name"?
06:57:12 <saurabhn_> need to pass it to Airbrake.
06:59:39 <wagle> gitit loads plugins, but has problems such that I need to pass "-v" to the dynamic ghc linker to show the import path its using..  how to pass "-v" via environment var
06:59:41 <wagle> ?
07:00:40 <John882> How can I querry a rest API in Haskell?
07:03:22 <John882> actually I find alot packages, looking for a package that let's me just get some numbers from a trading website.
07:03:45 <John882> Theres no logging required what do you guys reccomend?
07:03:51 <ventonegro> John882: wreq
07:07:01 <John882> ventonegro: Thank you
07:07:20 <ventonegro> John882: np
07:12:36 <supercynic> Cale: you could use (type Pred a = a -> Bool) + <http://math.andrej.com/2007/09/28/seemingly-impossible-functional-programs/>
07:12:37 <supercynic> =)
07:14:10 <stevenxl> Hi folks. I am looking at a library with teh following export list (http://lpaste.net/359216)
07:14:20 <stevenxl> What does the "-- * Resource" line indicate?
07:14:44 <stevenxl> Is it a Haddock comment? 
07:14:57 <Cale> stevenxl: yes
07:15:07 <stevenxl> Cale: OK thank you. 
07:23:17 <wagle> gitit is a haskell package that has a number of modules, which dynamically loaded modules can use.  how to install those modules where using stack?
07:24:28 <kuribas> @hoogle (Monad f, Monoid b) => [f b] -> f b
07:24:28 <lambdabot> Data.Edison.Seq.ListSeq lview :: (Monad rm) => [a] -> rm (a, [a])
07:24:29 <lambdabot> Data.Edison.Seq.ListSeq rview :: (Monad rm) => [a] -> rm (a, [a])
07:24:29 <lambdabot> Text.HTML.Tagchup.PositionTag concatTexts :: Monoid string => [T name string] -> [T name string]
07:25:08 <barrucadu> @type fmap mconcat . sequence
07:25:10 <lambdabot> (Monad f, Monoid b) => [f b] -> f b
07:30:00 <kuribas> barrucadu: I was looking for an alternative
07:30:07 <kuribas> but it doesn't seem to exists
07:31:40 <kuribas> :t foldl (liftA2 mappend) mempty
07:31:42 <lambdabot> (Monoid (f c), Monoid c, Applicative f, Foldable t) => t (f c) -> f c
07:32:23 <kuribas> well, this maybe...
07:34:39 <kuribas> :t foldl (liftA2 mappend) (pure mempty)
07:34:41 <lambdabot> (Monoid c, Applicative f, Foldable t) => t (f c) -> f c
07:35:23 <EvanR> monoidal parsing!
07:36:27 <kuribas> EvanR: I was thinking about combining configuration options :)
07:36:32 <kuribas> with Endo
07:36:49 <EvanR> ah yeah that to
07:37:24 <EvanR> foldl' ?
07:39:29 <kuribas> yeah
07:42:03 <supercynic> :t flip (foldr (\c go x -> c >>= (go $!) . mappend x) pure) mempty
07:42:04 <lambdabot> (Monoid b, Monad m, Foldable t) => t (m b) -> m b
07:42:26 <supercynic> kuribas: no need to build the intermediate list =)
07:43:08 <supercynic> kuribas: but why don't you just make the configuration itself a Monoid?
07:43:56 <kuribas> supercynic: the configuration is Endo myOptions.
07:44:14 <kuribas> supercynic: basicly "myOptions -> myOptions"
07:44:18 <EvanR> yeah i think many libs make the Config a monoid
07:44:19 <supercynic> kuribas: you're transforming defaults?
07:44:29 <kuribas> yeah, exactly
07:44:47 <supercynic> kuribas: here is an alternative that can deal with defaults and has the configuration itself as a monoid: http://ertes.eu/tutorial/config-monoids.html
07:46:49 <EvanR> nice styling
07:47:17 <iAmerikan> where are haskell type expressions from? Wasn't there a guy who came up with the system...?
07:47:26 <kuribas> Or I could just use record syntax, when I only need to pass them to a function: myFun arg1 (defaultArgs {optField1 = 2, optField2 = "2"}
07:48:39 <supercynic> kuribas: same thing, except you no longer need the "myFun arg1" part
07:48:56 <supercynic> mempty { optField1 = 2, optField2 = "2" }
07:49:27 <supercynic> oh, i misunderstood…  but it's simpler regardless, because processing options is simply (<>)
07:49:37 <supercynic> EvanR: mine?
07:49:43 <EvanR> youre ertes?
07:49:54 <supercynic> yeah
07:49:59 <kuribas> supercynic: you cannot use mempty as a function...
07:50:21 <supercynic> kuribas: i'm not using it as a function
07:50:35 <supercynic> mempty is the empty configuration
07:51:20 <kuribas> supercynic: myFun is the function I want to call, arg1 is a mandatory argument.
07:51:25 <nshepperd_> > mempty 1 :: []
07:51:28 <lambdabot>  error:
07:51:28 <lambdabot>      • Expecting one more argument to ‘[]’
07:51:28 <lambdabot>        Expected a type, but ‘[]’ has kind ‘* -> *’
07:52:03 <supercynic> kuribas: yeah, as i said, i misunderstood
07:52:16 <EvanR> you could wrap something as a function with a higher order function
07:52:20 * nshepperd_ facepalm
07:52:24 <EvanR> lol
07:52:35 <supercynic> (although actually you can use mempty as a function) =)
07:52:39 <nshepperd_> > mempty 1 :: String
07:52:40 <EvanR> :t const
07:52:42 <lambdabot> a -> b -> a
07:52:43 <lambdabot>  ""
07:52:54 <kuribas> nshepperd_: oh right, function application is the reader monad.
07:52:58 <nshepperd_> :)
07:53:11 <iAmerikan> I understand my question may have been worded strangely, but I remember reading the type expressions came from somewhere
07:53:44 <supercynic> iAmerikan: the type system comes from logic, specifically lambda calculus
07:54:13 <iAmerikan> Okay, didn't someone come up with the type expression notation prior to haskell?
07:54:14 <supercynic> iAmerikan: the exact name of the system, IIRC, is "System F_omega"
07:54:31 <EvanR> which notation specifically are you talking about
07:55:01 <supercynic> iAmerikan: haskell uses an abbreviated form of what is pretty much the original notation, but with ASCII symbols and words
07:55:49 <iAmerikan> EvanR: something like inc :: Integer -> Integer
07:56:04 <iAmerikan> supercynic: thank you :) I'll check out the system
07:56:19 <EvanR> yeah look at simply typed lambda calculus
07:57:13 <EvanR> : is used to mean "_ of type _" and -> is used to form a function type with domain and codomain types
07:57:31 <EvanR> haskell corrupted the : and doubled it
08:01:45 <kuribas> what would be more readable for optional arguments?  myFun mandatory1 (intOption 2 <> strOption "2") or myFun mandarory1 (defaultOption {intOption = 2, strOption = "2"})
08:02:15 <EvanR> i like the first one
08:02:38 <kuribas> I've been thinking to write a TH library that does the plumbing for that.
08:02:55 <EvanR> i was going to say, a different programming language would probably even nicer :)
08:03:28 <kuribas> than haskell?
08:03:34 <kuribas> nooooo
08:03:48 <EvanR> sad but true
08:04:00 <kuribas> after 38 python programming, haskell is heaven...
08:04:05 <kuribas> 38 hous
08:04:08 <kuribas> hours
08:04:17 <EvanR> unless you came up with a way to not have 1 function with a million configuration arguments
08:04:26 <EvanR> then haskell shines
08:05:03 <EvanR> 1 function with a million configuration arguments is kind of like another programming language
08:05:16 <EvanR> the configuration is the program
08:06:08 <kuribas> EvanR: I have 45  optional arguments for my function
08:06:23 <kuribas> which generates a font
08:07:54 <kuribas> EvanR: I don't get what you want to say...
08:08:06 <kuribas> that I shouldn't pass 45 optional arguments?
08:08:39 <EvanR> i tend to hate those APIs
08:08:49 <EvanR> jquery, every ruby lib ever, etc
08:09:49 <kuribas> how would you handle it then?
08:10:00 <EvanR> how are the options used
08:10:02 <merijn> ugh...
08:11:14 <kuribas> EvanR: they generate several opentype header fields.
08:11:34 <kuribas> EvanR: without requiring the user to understand all the subtle interactions, unless they want to.
08:11:45 <leshow> Does fromList get compiled away in a lot of cases? When I use OverloadedLists I worry that I'm inserting needless O(n) functions calls implicitly every time I pass a list
08:11:55 <merijn> Any advice on how to determine how to losen my dependency bounds? I picked up a bunch of new dependencies, and I just fixed them to the current version, but doesn't compile with some older GHCs
08:12:11 <merijn> But I dunno how to find which ones to relax to get a working install plan
08:12:37 <Athas> Why do you want your code to work with such a huge range of GHCs anyway?
08:13:13 <merijn> ryone to switch to my code :p
08:13:23 <EvanR> kuribas: all i can think of really is the endo thing, defaultOptions gives you the default font, and (f . g . h . ...) defaultOptions gives you the adjusted font. which i think youre pretty much already saying
08:13:31 <Athas> My advice would be to just use Stack, which in essence will allow you to specify exact package versions for each version of GHC you want to support.
08:13:37 <kuribas> EvanR: yeah
08:14:06 <kuribas> EvanR: except renaming Endo to Option, for clarity, and perhaps some TH magic to autogenerate the Endo functions
08:14:25 <kuribas> as it's mostly boilerplate
08:14:27 <merijn> Athas: That is...utterly unhelpful
08:14:28 <EvanR> i was thinking the f, g, h were in your lib
08:14:44 <EvanR> its the config adjustment language you would want to use
08:14:50 <EvanR> combine them simply with .
08:15:12 <EvanR> if the options is a record, its just lenses
08:15:20 <merijn> Athas: I find stack rather a pain in the neck to use, so I can't be arsed to invest more time to learn it, and still doesn't solve my issue of "how to determine which bounds can be loosened"
08:15:35 <kuribas> EvanR: they are just fields, like "fontWidth x = Option $ \f -> f {fontWidth_ = x}
08:15:56 <EvanR> ok theres that
08:15:57 <kuribas> EvanR: like a lens, but I don't want readers
08:16:19 <EvanR> though i default to modifiers instead of setters
08:17:11 <EvanR> setFontWidth x = Option $ \f -> f {fontWidth_ = x}
08:17:40 <kuribas> EvanR: isn't that exactly the same?
08:17:48 <EvanR> with a different name
08:17:55 <kuribas> ah right
08:18:10 <Psybur> In order to follow this symbols used in this paper, what should I study before hand? Is this discrete math? https://maartenfokkinga.github.io/utwente/mmf91m.pdf
08:18:50 <c_wraith> Psybur: pretty sure all the weird notation in that paper is defined by that paper
08:19:25 <Cale> Psybur: That paper invents most of its notation
08:19:27 <Cale> yeah
08:19:27 <Psybur> The circle with the plus in it? /\? \/?
08:20:19 <Cale> \/ is "or"
08:20:27 <Psybur> I think \/ and /\ or union and intersect right heh and the plus with a circle around is sum?
08:20:34 <Cale> The circle with + is an arbitrary function
08:20:39 <c_wraith> || is the only slightly odd one to a programmer - it's concatenation, not OR
08:20:40 <Psybur> ah ok
08:21:07 <c_wraith> but SQL uses || as its string concatenation operator, so you might have seen it used that way once
08:22:20 <Cale> || isn't concatenation, it's the pair type
08:23:41 <Cale> i.e. A || B is what we would write as (A,B) at the type level in Haskell.
08:24:22 <Cale> I'm not really sure why they use that notation
08:30:16 <supercynic> kuribas: if you use my approach, you can just use generics…  no need for TH =)
08:36:48 <wagle> #haskell-stack seems largely deserted..  how to get haskell stack to install a package's modules somewhere where they can be found, instead of something like
08:36:56 <wagle> ./global-project/.stack-work/install/x86_64-osx/lts-9.8/8.0.2/lib/x86_64-osx-ghc-8.0.2/gitit-0.12.2.1-JjUAs9wz7Y7D2Z9rtJPSMg/Network/Gitit/Interface.hi
08:39:51 <geekosaur> if you want that, you do not want stack
08:41:11 <kuribas> If I make a library with optionally TH, can you still use it when you don't need TH, for ghcjs, crosscompiling etc?
08:43:07 <sm> merijn: to start, you could check hackage matrix builder reports for your various deps
08:44:41 <sm> then do a bunch of cabal install --dry -w ghc-VER [--constraint ...] testing to find some plausible install plans
08:44:54 <shapr> jml: I'm enjoying your post: https://jml.io/2017/10/spake2-how-haskell-helped.html
08:47:19 <wagle> geekosaur: what DOES one use stack for?
08:47:40 <shapr> jml: did you go to haskellX ?
08:48:10 <wagle> here, gitit supports "plugins", which need to import gitit's modules
08:48:26 <geekosaur> wagle: a reproducible builds environment, which requires that stack control the compiler and package dtabases
08:49:08 <wagle> well, thats what I'm trying to achieve>
08:49:11 <wagle> ?
08:49:14 <zhixings002> hi, i'm learning haskell, can anyone tell me if i can specify the typeclass of some parameter when defining my type instead of saying the same thing for every function? thanks
08:49:50 <geekosaur> wagle, doesn;t sound like it. or it sounds like you are trying to do it entirely the wrong way, since you apparently think violating stack's package management is the correct solution
08:50:20 <geekosaur> zhixings002, you cannot. (unless you use a GADT but that comes with different problems)
08:50:34 <sm> wagle: "To enable a plugin, include the path to the plugin (or its module name) in the plugins field of the configuration file." ?
08:50:36 <geekosaur> you used to be able to do something that looked like it would do that, but in fact did not.
08:51:35 <wagle> loading dynamic plugins and linking them to the package's own modules is a bad idea? 
08:51:43 <wagle> wow
08:51:56 <geekosaur> zhixings002, you may be interested in 'type' (aka type aliases). but you cannot make the type itself bring a constraint into scope unless that constraint is existential (i.e. a GADT)
08:52:04 <wagle> (I didn't design gitit, by the way)
08:52:15 <geekosaur> wagle, excuse me, I said precisely what was the bad idea
08:52:21 <geekosaur> it was not what you just said
08:52:28 <wagle> I just thought learning stack would be a good idea
08:52:58 <zhixings002> geekosaur, thank you. another question: can i reload the "arbitrary instance" for a type alias? for example if i have type Matrix = [[Float]], i will not be able to write instance Arbitrary Matrix because there's already an instance of [[Float]] defined in quickcheck
08:53:16 <geekosaur> zhixings002, it is an alias, not a new type
08:53:24 <wagle> well, then you aren't addressing what I'm trying to do..  you called it "violating"
08:53:39 <geekosaur> wagle, ... perhaps you need to take a step back.
08:55:05 <c_wraith> wagle: it just seems like you're going about things the super-hard way.  stack is designed specifically to prevent what you say you want to do.  That makes stack a poor choice for doing it.
08:55:06 <wagle> ?
08:55:09 <geekosaur> the problem is not that stack can;t do what you need. the problem is that stack does not do it the way you seem to think is correct
08:55:40 <wagle> then how to do it?
08:55:52 <c_wraith> wagle: though geekosaur has a good point.  It can achieve the same end result in a different way
08:56:20 <wagle> been asking how to do it since last night
08:56:42 <wagle> the thing doesnt work now, how to fix?
08:56:48 <geekosaur> actually, you have not been asking your real problem, I'm not even sure you have now.
08:57:13 <geekosaur> you have, from what I have seen, been asking random things that you thought might help with whatever the real problem is
08:57:32 <sm> wagle: remember this is the first many of us have seen of your question. Seems like you have installed gitit, and want to run some of its plugins ?
08:59:23 <wagle> when gitit tries to link plugins dynamically, it can't importegitit's own modules (not found)
08:59:37 <wagle> when gitit tries to link plugins dynamically, it can't import gitit's own modules (not found)
09:00:05 <geekosaur> likely what you need is: stack exec -- gitit ...
09:00:17 <wagle> ah
09:00:23 <geekosaur> (if you are passing gitit any options, you must have that "--")
09:00:23 <wagle> makes sense
09:00:50 <geekosaur> this gives gitit access to stack's package db. note that if gitit tries to *install* anything there, you stand a good chance of breaking stack
09:01:30 <geekosaur> in that case, you may want a cabal sandbox instead. (and then it's cabal exec -- gitit ...)
09:01:38 <geekosaur> in the sandbox dir
09:01:49 <geekosaur> a shell alias will help with that if it is needed
09:02:44 <wagle> tried "stack exec -- gitit -f current.config"
09:03:17 <wagle> didnt work but maybe gitit isnt doing it right
09:04:00 <zhixings002> geekosaur, i tried to enable the ExistentialQuantification extension and define my type like this "data Matrix = forall f. (Eq f, Ord f, Fractional f) => Mat [[f]]" but then i can't deriving (Show) at the same line, why is that?
09:04:15 <sm> troubleshoot with stack exec -- ghci, import Network.Gitit.Interface perhaps
09:04:51 <sm> you should be able to import any gitit module listed by stack exec -- ghc-pkg list gitit 
09:04:56 <geekosaur> zhixings002, because you did not give it a Show instance inside the forall, and because deriving around a forall is often problematic anyway
09:05:05 <stevenxl> Hi folks. I used `stack ghci` to load a ghci prompt in the context of a project, and the prompt now has 1000 modules listed. How do I set it to not list the loaded modules?
09:05:18 <sm> :set prompt "ghci >"
09:05:22 <geekosaur> and a forall is probably not the solution here, as I suggested earlier.
09:05:25 <stevenxl> sm: thank you
09:05:34 * sm meant: "ghci> "
09:05:58 <cocreature> stevenxl: to expand upon sm’s answer you can put “:set prompt "❯ "” in ~/.ghci and it will be automatically executed when you start ghci
09:06:01 <mnoonan> I think you mis-spelled :set prompt "λ>"
09:06:04 <zhixings002> geekosaur, oh ok thanks, where can i lookup more details (and the problems) of forall?
09:06:11 <stevenxl> cocreature: i like that
09:06:12 <stevenxl> will do
09:07:26 * sm meant: you should be able to import any gitit module listed under exposed-modules: by stack exec -- ghc-pkg describe gitit (wagle)
09:07:34 <geekosaur> zhixings002, https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#existentially-quantified-data-constructors for starters, but I don't think that goes into detail on what they actually mean.
09:09:23 <geekosaur> https://ocharles.org.uk/blog/guest-posts/2014-12-19-existential-quantification.html https://wiki.haskell.org/Existential_type
09:09:26 <wagle> sm: they are exposed modules according to that.. 
09:10:13 <zhixings002> geekosaur, thank you, that's a lot to learn for a starter like me ;)
09:10:32 <geekosaur> yes. this is not a simple extension, and will not give you simple answers
09:11:42 <geekosaur> which is why this is almost certainly not the correct answer here. in one sense it will do what you want, but it does so by disabling a lot of other stuff you are likely expecting to be able to do
09:12:39 <wagle> at this point, I suspect that gitit's ancient way of linking plugins isnt compatible with stack
09:13:23 <wagle> since I'm hoping to work on gitit, I thought stack would be the way to go
09:13:30 <geekosaur> in particular: it is not there to let you bring constraints into scope at function definitions. it does that to enable you to work with the hidden box it creates around your type. if you don;t specifically need that box, this is the wrong way to get a constraint into scope
09:14:14 <geekosaur> uh, rephrase.not 'hidden box around your type'; instead, 'box it hides your type in'
09:14:31 <geekosaur> and that hiding is the key point.
09:18:03 <sm> wagle: linking plugins any way at all is not common, so it's not impossible, but you haven't shown anything indicating stack is involved yet
09:18:16 <sm> how does it go with the ghci command
09:20:51 <wagle> ghci wasnt installed for some reason..  falling asleep sitting up at the moment, so not getting anywhere yet
09:21:13 <wagle> gonna take a nap now, i think
09:21:25 <sm> good move, it will probably just work when you wake up :)
09:21:33 <wagle> haha
09:21:56 <sm> gitit is cool and I'd like to see you succeed
09:52:40 <eschnett> is there a package defining CCC (cartesian closed categories) type classes?
09:53:53 <eschnett> i know Control.Category in base, but that’s too basic. there is also https://github.com/ekmett/hask, but that seems over the top.
09:55:32 <cocreature> eschnett: maybe https://hackage.haskell.org/package/category-extras-0.53.0/docs/Control-Category-Cartesian-Closed.html
09:59:35 <eschnett> cocreature: thanks!
10:42:29 <amf> with the applicative style parsing, e.g. `X <$> char 'x'` how would i skip some initial thing and then parse. right now i have `p = do; string "notneeded"; X <$> char 'x'`. im not sure how to get rid of the do
10:43:28 <mauke> string "asdf" *> ...
10:43:28 <geekosaur> :t (*>)
10:43:30 <lambdabot> Applicative f => f a -> f b -> f b
10:46:01 <raynold> ahh it's a wonderful day
10:46:27 <amf> ha. i had that, but needed () around the <$> term. thanks!!
10:48:06 <glguy> :t \x a b -> x <$ a <*> b
10:48:09 <lambdabot> Applicative f => (a -> b1) -> f b2 -> f a -> f b1
11:02:08 <amf> i keep doing fmap (fmap toS) (optional (many alphaNum))).. is there a function which reduces those fmaps to one?
11:03:26 <glguy> optional (fmap toS (many alphaNum))
11:04:54 <amf> glguy: youre the best!
11:10:03 <dmwit> glguy: `x <$ a <*> b` is super cute
11:10:22 <EvanR> ok i am building SDL2 on raspberry pi, looking good so far. Next step will probably be getting GHC to work
11:11:08 <sm> building a portable arcade machine EvanR ?
11:11:36 <EvanR> well see how portable it is
11:14:57 <iqubic> glguy: Why is it that even building glirc from hackage yeilds issues?
11:18:01 * hackagebot hasmin 0.3.3 – CSS Minifier – https://hackage.haskell.org/package/hasmin
11:18:08 <sm> not glguy, but: "building X from hackage" covers a large space of actions with a very large set of failure modes
11:18:32 <cocreature> “issues” is also not a very good description of the errors you’re seeing
11:19:48 <iqubic> So, I cloned this: https://github.com/glguy/irc-core
11:20:19 <cocreature> so you didn’t install from hackage after all?
11:20:26 <sm> aHA!
11:20:31 <iqubic> No.
11:20:47 <iqubic> I used the stack build instructions from the README
11:21:16 <iqubic> And I get errors running "stack build"
11:21:22 <sm> errors!
11:21:27 <sm> disgraceful
11:21:29 <cocreature> you really need to provide more information
11:21:45 <jdnavarro> I'm getting CPP errors regarding !Cabal2 not being recognized
11:22:15 <jdnavarro> I suspect I'm not using the right preprocessor or I need to configure it properly or something
11:22:38 <iqubic> paste.pound-python.org/show/uCYoHg6jG39Y35HlobEe/
11:22:39 <geekosaur> a c preprocessor should treat an undefined symbol in #if as 0
11:22:48 <cocreature> jdnavarro: please show us the full error message and a minimal example of your error
11:22:52 <iqubic> https://paste.pound-python.org/show/uCYoHg6jG39Y35HlobEe/
11:23:16 <iqubic> That the output from the second time running "stack build"
11:23:46 <iqubic> I already ran "stack init --resolver=lts-8 --solver"
11:23:58 <iqubic> And then tried "stack build" and got that output.
11:24:00 <geekosaur> jdnavarro, what platform?
11:24:12 <jdnavarro> here is the error: http://lpaste.net/359220
11:24:44 <cocreature> iqubic: remove the bot package from "packages" in your stack.yaml
11:25:22 <jdnavarro> I'm (begrudgingly) on MacOS
11:25:39 <iqubic> will that work?
11:26:17 <cocreature> iqubic: I wouldn’t suggest it, if I didn’t think it would help. ofc I might be wrong but just try it out and see if it gest you somewhere
11:26:35 <sm> heh, iqubic's no fool..
11:26:40 <geekosaur> jdnavarro, was afraid of that. sounds like clang has once again tightened things up to the detriment of haskell's abuse of cpp
11:28:24 <iqubic> cocreature: It seems to have worked.
11:28:52 <jdnavarro> full error report: http://lpaste.net/359220
11:28:59 <iqubic> Well, except, I can't run the program.
11:29:20 <jdnavarro> yeah, it seems clang is involved
11:29:31 <jdnavarro> is it the default compiler used by GHC now?
11:29:54 <jdnavarro> (C compiler)
11:30:41 <geekosaur> it is the only compiler on os x
11:30:59 <geekosaur> unless you manually install a gcc, and then you risk compatibiliy issues with apple's c++ libs
11:31:31 <iqubic> "Warning (added by new or init): Specified resolver could not satisfy all dependencies. Some external packages have been added as dependecies. You can suppress this message by remove it from stack.yaml"
11:31:40 <iqubic> That is what is happening now.
11:31:48 <iqubic> And I can't run glirc at all.
11:32:37 <cocreature> iqubic: I’m repeating myself but you need to provide more details “I can’t run glirc” is not a description that allows anybody to diagnose what might be the problem
11:33:27 <iqubic> Well. I type "glirc2" into my terminal, and I am given "command not found"?
11:33:57 <cocreature> run "stack install" instead of "stack build" and make sure ~/.local/bin is in your PATH
11:34:00 <geekosaur> if you did stack build then you need stack exec
11:34:08 <iqubic> Oh, I see.
11:34:08 <geekosaur> or, do stack install instead
11:34:50 <geekosaur> jdnavarro, what does 'clang --version' report?
11:34:58 <iqubic> the fonts are all screwed to hell, but I don't care.
11:35:15 <jdnavarro> geekosaur: Apple LLVM version 9.0.0 (clang-900.0.37)
11:35:26 <geekosaur> (also, clang-- for having a nice TODO in the clang 6 manual where the warning options should be. siigh)
11:35:35 <geekosaur> . . . dammit apple
11:36:07 <jdnavarro> there is also a /usr/bin/gcc that seems to be a renamed clang
11:36:15 <geekosaur> yes
11:36:21 <geekosaur> as I said, os x has only clang
11:36:26 <geekosaur> you don't get to pick
11:36:26 <glguy> I removed the stack install instructions and reverted the accidentally committed bot changes
11:36:29 <sm> iqubic: I tried that procedure, glirc built and runs here
11:36:49 <geekosaur> and clang has been going for pedanticism of late, which means things we rely on keep breaking
11:36:50 <iqubic> glguy: I got it working.
11:36:51 <sm> how to stop the damn thing is my problem..
11:36:57 <glguy> sm: /exit
11:37:02 <sm> thanks :)
11:37:02 <iqubic> but my fonts are so screwed up.
11:37:12 <geekosaur> possibly what you need to do is install cpphs and follow its directions to hook it into ghc
11:38:00 <iqubic> glguy: What fonts does glirc use?
11:38:04 <glguy> it doesn't
11:38:11 <iqubic> What do you mean?
11:38:16 <glguy> It doesn't use any fonts
11:38:36 <jdnavarro> geekosaur: I have cpphs installed through cabal install
11:38:42 <iqubic> How do the lines near the bottom of the client be displayed.
11:38:56 * jdnavarro will reinstall cpphs and also try brew install ghc
11:39:20 <geekosaur> jdnavarro, the second part of what I said was not optiona;
11:39:47 <iqubic> glguy: The horizontal lines near the bottom of the client are not being displayed properly.
11:40:07 <glguy> You can change that character here: https://github.com/glguy/irc-core/blob/v2/src/Client/Image/StatusLine.hs#L39 I still need to move that into the config
11:40:13 <geekosaur> installing cpphs does nothiong but install cpphs. if you need it to be the default preprocessor for Haskell, there are extra steps needed that should be documented 
11:40:24 <iqubic> glguy: What character is being used there
11:40:32 <sm> iqubic: it requires that your terminal be set up to display unicode characters properly, eg have a unicode font configured in your terminal app
11:40:41 <iqubic> I see.
11:41:07 <jdnavarro> geekosaur: alright, I'll look into how to make ghc use cpphs by default
11:41:35 <geekosaur> I suspect ghc is going to have to sort out the license issues and find a way to include cpphs, at least on os x
11:42:00 <geekosaur> c compilers are not going to care about haskell compilers using their preprocessor
11:43:07 <halp> Hey guys, I'm getting desperate here. If any of ya can help me out with my OSX issue that would be amazing:
11:43:08 <halp> https://stackoverflow.com/questions/46734646/haskell-stack-doesnt-work-correctly-on-osx-sierra
11:43:24 * jdnavarro is missing his old Arch Linux laptop
11:45:28 <monochrom> Oh Arch Linux has its own problem these days. You won't miss it (unless you mean you miss an older, working Arch version.)
11:46:03 <geekosaur> halp, I think the haskell platform issue is known (and may have recently been fixed although if so it may not have hit brew yet)
11:46:49 <geekosaur> the other one is ... weird
11:47:07 <halp> Oh okay, so perhaps in a little while I should be able to reinstall and things will work out? I installed using the wget way too
11:47:14 <halp> Yeah I have no idea
11:47:20 <halp> You mean the linker error?
11:47:21 <geekosaur> the real error there prints as a warning because gee thanks apple
11:47:32 <halp> Fresh install of xcode, have gcc
11:47:42 <halp> Fresh like yesterday fresh
11:48:02 <geekosaur> it doesn't recognize the archive containing your code so it skips it and then obviously can't find the symbols defined within it
11:48:24 <sm> I must say #haskell has shifted noticeably from CS and type system chat quite a bit towards install & tool support..
11:49:09 <monochrom> Yeah all the people who know CS and types haven't been hired IRL.
11:49:18 <monochrom> err, have!
11:49:20 <Tuplanolla> Could it be that we finally have tools to worry about, sm?
11:49:23 <sm> and their arch broke :)
11:49:31 <monochrom> All the people who know CS and types have been hired IRL.
11:49:47 <sm> we had em before Tuplanolla.. more users now I think
11:50:31 <sm> monochrom hmm there might be some truth in that
11:51:38 <monochrom> The wake-up call for me is that one day someone asked "where is the channel where I can find accountants to talk to?"
11:51:55 <monochrom> and it dawned on me that accountants actually have a life, we nerds don't.
11:52:09 <shapr> ouch
11:53:06 <halp> Yeah I feel bad coming in here essentially asking for tech support, but I've been trying to get this stuff working for months. I really wanna get this stuff rolling so maybe I can come back here and talk about legit questions in type theory
11:53:44 <sm> halp: don't feel bad. I used to wish I could get such questions answered in here
11:54:24 <geekosaur> I ditched apple over a year ago because they kept breaking things. they're still breaking things. if it's not part of xcode, they don't care about it.
11:54:55 <sm> in another timeline, #haskell-beginners or #haskell-tools might take the bulk of this stuff but in this one we seem to like one big channel 
11:54:59 <monochrom> Yeah I used to think "one day when I have the money I'll buy a macbook".
11:55:24 <geekosaur> halp, what does 'file /Users/trevord2/someproj/.stack-work/dist/x86_64-osx/Cabal-1.24.2.0/build/libHSsomeproj-0.1.0.0-6corWoTDCA69pE1sqNF8Id.a' report?
11:55:29 <monochrom> Then one night I had a dream. I was trying to use GHC on a macbook.
11:55:44 <sm> I enjoy haskelling on a macbook very much. Terrified of OS upgrades though
11:55:52 <monochrom> I woke up and decided "OK that's a showstopper".
11:56:27 <halp> mmm, how should I open that file? vim is showing me naught but @ symbols
11:56:52 <monochrom> The command is "file" as said.
11:57:34 <merijn> Any cabal.project users willing to be guinea pigs?
11:57:36 <geekosaur> I asked you to run a command named 'file' which reports what kind of file the system thinks it is
11:58:16 <halp> current ar archive random library
11:58:39 <geekosaur> nothing about platform or etc.?
11:59:13 <halp> Nawp, fullout:
11:59:22 <geekosaur> apple can't make anything about this easy, can they. sigh
11:59:44 <halp> http://lpaste.net/359223
11:59:49 <geekosaur> and ld doesnt report what arch it thinks the archive is any more, because tht would be helpful
12:00:22 <sm> halp: are High Sierra is it ?
12:01:19 <halp> I think it's just Sierra, "about this Mac" does not say "High" anywhere
12:04:22 <sm> on my Sierra mac, a similar file has the .dylib extension
12:05:35 <sm> I don't mean to confuse the issue. I guess you have newer xcode command line tools than me or something
12:05:38 <geekosaur> .a is a static archive, not a dylib
12:05:40 <merijn> sm: dylib is for dynamic libraries
12:05:56 * geekosaur is trawling the stack bug tracker...
12:07:16 <sm> oh, I have the .a file as well.
12:07:37 <geekosaur> halp, I think if this is a new stock install of stack then you want to open a bug at https://github.com/commercialhaskell/stack/issues/new
12:08:01 <halp> Oh wow really? Okay. 
12:08:11 <monochrom> It is a Haskell-Platform-bundled stack IIRC.
12:08:27 <geekosaur> no, they said on stackexchange they removed that and followed the official stack install 
12:08:40 <sm> what's stack --version, anyway
12:08:45 <monochrom> Oh oops.
12:09:00 <halp> Version 1.5.1, Git revision 600c1f01435a10d127938709556c1682ecfd694e (4861 commits) x86_64 hpack-0.17.1
12:09:10 <sm> looks good
12:09:32 <halp> Is what I have here enough info to open an issue?
12:09:32 <halp> https://stackoverflow.com/questions/46734646/haskell-stack-doesnt-work-correctly-on-osx-sierra
12:09:52 <halp> I also have a gif of what happens linked in the SO question:
12:09:57 <halp> https://imgur.com/gallery/afYym7m
12:10:00 <sm> use just the stuff after UPDATE
12:10:07 <halp> kk
12:11:31 <sm> and I wonder what's clang --version
12:14:53 <merijn> Can I silence deprecation warnings somehow?
12:15:57 <merijn> 'cause someone was a little optimistic about how much would be removed between GHC 7.6 and 7.8 :p
12:16:38 <monochrom> -Wno-warnings-deprecations
12:17:07 <merijn> monochrom: No way to control exactly which ones, I suppose?
12:17:19 <monochrom> I haven't tried it. I only looked for "deprecat" on the flag list.
12:18:36 <geekosaur> I think fine tuning warnings is slated for a future ghc?
12:18:49 <geekosaur> hopefully it will include deprecations
12:19:54 <merijn> 7.6 is optimistically warning that Control.Concurrent.QSem(N) are deprecated and will be removed in 7.8 and you should use the SafeSemaphore package. Meanwhile, GHC 8.2 is still including those modules and the deprecation warning is gone :p
12:20:35 <monochrom> Oh, no wonder.
12:21:04 <cocreature> merijn: the solution is to do what everybody else does and only support the last 3 GHC releases :P (scnr)
12:21:36 <merijn> Also, if someone managed to get output folding in TravisCI working (like Idris' https://github.com/idris-lang/Idris-dev/blob/master/.travis.yml#L114-L116), I'm curious how. Because copying the documented approach (like Idris is using) is somehow not working for me and I can't for the life of me figure out how
12:25:45 <merijn> The only possible difference I can think of now is that my yaml is indented with only 1 space, rather 2 like Idris' yaml file. In which case I'm going back to hating all software
12:25:46 <jojoreference> hello
12:31:50 * hackagebot htoml-megaparsec 1.0.1.3 – Parser for TOML files – https://hackage.haskell.org/package/htoml-megaparsec
12:31:50 * hackagebot postgresql-simple-queue 0.5.1.0 – A PostgreSQL backed queue – https://hackage.haskell.org/package/postgresql-simple-queue
12:32:03 <helloolleh> Hello, ladies and gentlemen... this might be a VERY dump question, but I am very new to haskell. MY SITUATION: whenever I look at code examples, i See massive import blocks. And in .cabal-files there are plenty of build dependencies too... MY QUESTION: How do you guys know, when you write a program, WHAT packages you will need
12:34:13 <merijn> helloolleh: I don't, I just add them as I realise I need them
12:34:40 <helloolleh> ok... how do you realize that?
12:34:47 <merijn> "oh, I need to use a socket!" *add network dependency and import*
12:34:50 <Cale> By knowing about packages which exist
12:34:58 <Cale> or searching for them on hackage
12:35:07 <helloolleh> i'm very sorry for my stupidity.
12:35:17 <Cale> they're typically organised by what the code in them does
12:35:35 <Cale> so if you want code which handles a particular task, you might look for packages which do that
12:35:43 <mnoonan> for me, half the time is "I need a random function with a type like *this*".. looks up "*this*" on hoogle, sees package and module name
12:36:54 <helloolleh> ... so you look for a specific type-signature on hoogle OR you search hackage for packages by category
12:37:04 <cocreature> helloolleh: it’s not a stupid question, it takes some time to get an overview of the Haskell ecosystem
12:37:22 <merijn> helloolleh: Do you know any other languages?
12:37:24 <cocreature> helloolleh: I mostly just google for “haskell tcp socket” if I need to use tcp sockets and see what comes up
12:37:39 <mnoonan> yeah, the other 49% of the time I have the hackage module documentation open and am actively looking for something
12:37:48 <cocreature> I don’t find hackage itself particularly useful for discovering new packages apart from looking at the deps of other packages
12:38:07 <helloolleh> yes.. i know javascript ;)
12:38:14 <merijn> cocreature: Searching on the index package works occasionally
12:38:22 <merijn> helloolleh: So, how would you find packages on npm?
12:38:36 <cocreature> merijn: it does work occasionally but I rarely find it to be the most effective method
12:39:19 <helloolleh> very stupid approach... I almost know all the packages i need for my job... so there is not much searching involved
12:41:00 <Cale> Actually using Google and just adding "hackage" to your search query is often better than using Hackage's built-in search
12:41:29 <iqubic> Cale: It is? That's silly.
12:41:31 <Cale> The main downside being that you'll often be linked to older versions of documentation and packages
12:42:18 <Cale> iqubic: It makes sense, PageRank over the entire web is much better at ranking things than Hackage could be
12:42:22 <merijn> Cale: WHich browser do you use?
12:42:24 <monochrom> Current Hackage searcher is dumber than previous version's.
12:42:39 <geekosaur> iqubic, that's very often true. often google's search engine (or bing etc.) is better than one provided on the site itself
12:42:43 <Cale> merijn: Chrome. I have an extension which will link me to the newer docs. :)
12:42:50 <monochrom> Previous version's: It can search for module names.
12:42:59 <merijn> Cale: Ah, yeah, I was gonna mention that ;)
12:43:12 <geekosaur> there are some sites where I don't even bother with the site search and ask google site:whatever.org search ...
12:43:21 <Cale> Yeah, one thing I really find annoying is when you put an exact package name in the search box, that doesn't guarantee the package comes up first.
12:43:37 <iqubic> The heck?
12:43:47 <iqubic> Cale: What is the extension that you use?
12:44:00 <merijn> iqubic: https://chrome.google.com/webstore/detail/hackage-fu/dnpldbohleinhdgfnhlkofpgkdcfcfmf?hl=en-US
12:44:05 <merijn> iqubic: It's pretty good!
12:44:05 <Cale> https://github.com/statusfailed/hackage-fu
12:44:07 <monochrom> It should be no secret that homemade search engines and homemade PRNGs are laughing sticks.
12:44:27 <c_wraith> sticks?
12:44:34 <monochrom> sticks.
12:44:53 <Rembane> How long are they?
12:45:01 <Cale> monochrom: But the non-homemade PRNGs are also usually terrible
12:45:41 <iqubic> Well, I now have Hackage-Fu added to Chrome
12:45:46 <monochrom> Oh Alta Vista's search engine was also terrible. :)
12:46:05 <c_wraith> Cale, how about slow, incomprehensible, and backdoored by the NSA? that's a good combo for a PRNG, right?
12:46:19 <iqubic> How do I check if the hackage-fu extension is working?
12:47:02 <Cale> iqubic: Go to an old version of any package
12:47:07 <Cale> click on some module
12:47:28 <Cale> See if a red thing appears at the top of the page with a link to the newer documentation
12:47:44 <iqubic> Nope.
12:47:51 <iqubic> Not working at all/
12:48:51 * hackagebot ekg-cloudwatch 0.0.1.5 – An ekg backend for Amazon Cloudwatch – https://hackage.haskell.org/package/ekg-cloudwatch
12:48:53 <Cale> https://hackage.haskell.org/package/containers-0.5.7.0/docs/Data-Map.html -- here, I get some orange text in the upper right "Newer - 0.5.10.2"
12:48:58 <Cale> and a link (Latest)
12:49:17 <iqubic> Works there.
12:49:22 <iqubic> For me too.
12:49:39 <iqubic> Does it work for you here: https://hackage.haskell.org/package/glirc-2.6
12:49:54 <merijn> iqubic: No, only on module pages
12:50:22 <iqubic> Ah. That was my confusion
12:51:01 <Cale> from that page you can see that there are newer versions anyway
12:51:12 <geekosaur> you can already tell on that page bcause you have the list of versions with the one you are looking at bolded and the most recent at the end of the list
12:56:35 <merijn> Man, nothing makes me appreciate improvements to base as much as having to make things work with an older version >.>
13:23:34 <booba> zzq:test
13:24:36 <shapr> booba: emacs restarted!
13:26:00 <booba> shapr: emacs never slept ;)
13:48:52 <merijn> Is there a list of which extensions were added in which version of GHC somewhere?
13:49:38 <monochrom> Each GHC Users Guide has a Release Notes.
13:50:06 <mauke> but that's sorted by ghc version, not by extension
13:50:23 <merijn> monochrom: Yeah, but I wanted a comprehensive single list, not lots of little ones to dive through
13:50:41 <merijn> I recall finding one earlier this week, but for the life of me I can't find it again
13:51:35 <merijn> Aha!
13:51:41 <merijn> Success: https://ghc.haskell.org/trac/ghc/wiki/LanguagePragmaHistory
13:54:46 <MarcelineVQ> merijn: And it's even up to date, nice find
13:58:02 <Apocalis_> Is there a common combinator that does `Text.pack . show`?
14:01:18 <monochrom> There are two special ones in Data.Text.Lazy.Builder.Int and Data.Text.Lazy.Builder.RealFloat if you have numbers in mind and you are already doing Data.Text.Lazy and you don't mind Builder.
14:04:43 <shafox> if my function returns Maybe a, how can I make the function to return a ?
14:05:23 <mauke> what do you want to happen if the result is Nothing?
14:05:29 <drostie> shafox: you have to first decide on a default value.
14:05:33 <monochrom> Is it literally "Maybe a" with "a" being type variable, or do you really mean a concrete scenerio like "Maybe Int"?
14:05:51 <dmwit> Do we get to vote? I like mauke's response the best.
14:06:06 <boj> +1
14:06:10 <monochrom> I vote for mine. :)
14:06:13 <drostie> heh
14:06:50 <drostie> @shafox the most generic way is embraced by the Prelude function maybe :: b -> (a -> b) -> Maybe a -> b if you'd like.
14:06:50 <lambdabot> Unknown command, try @list
14:07:05 <drostie> oh crap I forgot this is IRC for a sec.
14:09:20 <EvanR> hopefully, Nothing is impossible
14:09:28 <EvanR> then the answer is easy
14:12:57 <dmwit> monochrom: In `a ~ Int => a -> Maybe a`, is `a` a type variable or is it a concrete scenario? What about `Integral a => a -> Maybe a`? `a -> Maybe a`? `b -> Maybe a` has a clear answer, though.
14:13:06 <merijn> wut....
14:13:17 <merijn> Why the fuck is transformers-compat using manual flags?
14:13:31 <monochrom> I don't know.
14:13:32 <merijn> It literally says on the package that cabal should auto toggle flags
14:13:56 <merijn> monochrom: I'm guessing it happened to work because older versions of cabal-install had a bug where they ignored the manual setting of flags
14:15:33 <merijn> edwardk: ping?
14:31:31 <shafox> The result type is  Maybe [MyType] . 
14:31:59 <shafox> for Nothing I would like to have Nothing. 
14:32:05 <mauke> that makes no sense
14:32:15 <mauke> you said you didn't want Maybe in the result type
14:32:19 <monochrom> So keep it as Maybe [MyType]?
14:32:19 <shafox> sorry. 
14:33:19 * hackagebot postgresql-simple-queue 0.5.1.1 – A PostgreSQL backed queue – https://hackage.haskell.org/package/postgresql-simple-queue
14:33:22 <shafox> in case of nothing I am not sure what to do. 
14:33:46 <EvanR> thats a problem
14:33:54 <monochrom> Then keep it as Maybe [MyType] and let the caller decide what to do?
14:33:57 <mauke> step 1: figure out what you want to happen
14:34:03 <mauke> step 2: make the computer do it
14:34:27 <monochrom> No no, that step 2 is premature.
14:34:50 <monochrom> In-between there needs a "prove that what you want is actually self-consistent".
14:35:19 <EvanR> shafox: is Nothing even possible? assuming no bugs
14:35:26 <EvanR> if so, what does it mean
14:35:51 <shafox> EvanR: I am pretty sure that there wont be a case of Nothing. 
14:36:11 <EvanR> then maybe figure out how to not put Maybe in the return type at all
14:36:12 <monochrom> OK so why is there a Nothing in the first place?
14:36:39 <shafox> its the library function.
14:37:06 <EvanR> what library function
14:37:09 <monochrom> OK so it's total BS when you said Nothing won't happen?
14:37:16 <shafox> conduit. 
14:41:40 <EvanR> without knowing what the library function is... 
14:42:09 <monochrom> They don't want to say more.
14:43:09 <EvanR> its possible that for some f, if you restrict to a subset of the domain, the outputs is restricted to a subset of the codomain
14:43:15 <shafox> i will create an example and put it in a gist. 
14:43:22 <EvanR> (and our type system fails to help us)
14:43:34 <merijn> I don't suppose cabal allows constraints "/= 1.2.3" on dependencies?
14:44:01 <monochrom> It does. Write "< 1.2.3 || > 1.2.3" :)
14:44:12 <haskler> Hello all
14:44:26 <monochrom> http://www.vex.net/~trebla/haskell/cabal-cabal.xhtml#constraints
14:44:59 <merijn> monochrom: Yeah, that's what I have now, but it's rather ugly >.>
14:45:03 <xenon-> what popular library defines flip ($) operator?
14:45:19 <monochrom> Ah. No, cabal doesn't have a direct "/="
14:45:19 <xenon-> usually named & irrc
14:45:40 <merijn> monochrom: I don't think it's working anyway, since I have to constraint something that's not really something that's easy to control, I think
14:45:40 <monochrom> ($) is right in Prelude.
14:46:02 <xenon-> & = flip ($) isn't
14:46:06 <haskler> I'm looking for a type something like:   `Thing a`   with a constructor like "Min", "Max" and "Middle a".  The idea being, if I have an interval finger tree, I can have one entry `Interval Min firstEntry` and a last entry `Interval lastEntry Max` which will catch any entry beyond my first or last entries
14:46:22 <EvanR> a whole library for a one line definition?
14:46:24 <merijn> monochrom: bleh, this broken transformers-compat is making my life rather annoying >.>
14:46:33 <merijn> xenon-: Data.Function
14:46:34 <haskler> I know how to write such an entry, but I remember seeing something like this before
14:46:39 <merijn> xenon-: For recent GHC versions
14:46:54 <monochrom> (&) is in Data.Function which is in base so it comes with GHC.
14:47:58 <merijn> Bleh...this transformers-compat fuckup is ruining my ability to get a working install plan on 7.8 :\
14:47:59 <xenon-> I see, cool. might upgrade one of these days
14:48:26 <xenon-> I dread having to deal with all the errors in the existing code though
14:49:27 <monochrom> Data.Function.(&) is "since 4.8.0.0". That may mean GHC 7.10
14:49:44 <xenon-> 7.8.4 here
14:49:48 <haskler> So does anyone know of an existing type like I described?  I searched package for instances of Ord but none of them fit exactly
14:49:51 <wagle> how to load modules at runtime in 8.2.1?  the source says ghci only or somesuch
14:50:58 <wagle> google gives a confusing spectrum of documentation from the passt 20 years or so
14:51:23 <haskler> searched hackage*
14:55:44 <merijn> If I want a cabal entry to work for all GHC versions of x.y, can I do "if impl(ghc == x.y.*)" or something?
14:56:15 <merijn> Because "if impl(ghc == x.y)" apparently doesn't work for subversions of that
14:59:51 <glguy> merijn: You can use    impl(ghc >= 8.0) && impl(ghc < 8.1)
15:00:06 <glguy> or impl(ghc >= 7.2 && < 7.6)
15:00:43 <merijn> glguy: Cheers
15:02:39 <glguy> merijn: What's the transformers-compat issue?
15:03:03 <merijn> glguy: Flags are defined as manual, rather than automatic, even though it is intended cabal-install automatically toggles them
15:03:25 <merijn> glguy: This worked in the past, due to cabal-install being buggy and ignoring the fact it's not supposed to toggle manual flags
15:03:31 <merijn> glguy: But that bug has been fixe
15:04:12 <glguy> Oh, then we should just fix the cabal file
15:04:14 <merijn> Which means that, by default, transformers-compat-0.5.4.1 is unbuildable
15:04:17 <merijn> glguy: Yes
15:04:27 <glguy> edwardk: Do you know any reason why these flags are listed as manual?
15:09:34 <glguy> merijn: What version of Cabal fixed this?
15:11:32 <xenon-> what are the greatest improvements in ghc since 7.8.4? any notable extensions?
15:12:06 <xenon-> that didn't exist in 7.8.4
15:12:50 <johnw> AMP
15:12:57 <johnw> isn't that 7.10?
15:13:08 <johnw> partial types?
15:13:10 <johnw> pattern synonyms?
15:13:14 <johnw> i forget what wasn't in 7.8 yet
15:13:31 <johnw> type applications
15:13:58 <johnw> compact region
15:14:01 <johnw> s
15:15:31 <merijn> glguy: dunno, tbh
15:15:40 <merijn> glguy: fairly recent
15:15:59 <glguy> Travis is building things with a Cabal 2.1.0.0 successfully 9 days ago
15:16:04 <glguy> is it a newer change than that?
15:16:35 <merijn> glguy: no
15:16:45 <merijn> glguy: It only ends up breaking for old ghcs
15:16:59 <merijn> glguy: Specifically for me it's broken on 7.8
15:17:04 <xenon-> johnw thanks, you're right that Applicative was not a superclass of Monad in in 7.8.4, not sure about the other two, I'm not familiar with them
15:17:14 <merijn> glguy: Since on other versions I think transformers-compat is a no-op
15:17:34 <glguy> merijn: Oh, I see. Travis is configured to use Cabal 1.18 to build on GHC 7.8
15:18:14 <merijn> glguy: I'm using hvr's Travis set up which always uses Cabal head I think?
15:18:32 <merijn> glguy: Anyway going to bed now, I'll look into it further tomorrow
15:19:32 * hackagebot bool8 0.0 – Alternative Bool type stored as byte – https://hackage.haskell.org/package/bool8
15:24:03 <phaazon> anyone has an explaination why non-exhaustive patterns are not a direct error in ghc?
15:24:07 <phaazon> I’m always amazed by that
15:24:13 <phaazon> it seems a design hole / flaw
15:28:44 <Rembane> phaazon: It's very good when prototyping. 
15:29:08 <sm> wagle: there are number of little-used alternatives on hackage
15:29:22 <sm> also a haskell wiki page
15:29:48 <phaazon> Rembane: that’s not a good reason to me
15:29:52 <phaazon> you can easily do a 
15:29:57 <phaazon> _ -> error "I’m prototyping!"
15:30:16 <wagle> sm: yeah, stretching back decades
15:30:45 <wagle> trying to figure out what the future way is, starting with 8.2.1
15:31:20 <Rembane> phaazon: Indeed. Isn't there a warning flag for disallowing non-exhaustive patterns?
15:31:33 <stevenxl> Is it possible, with the right extension, to derive a Monad for a newtype such as: 
15:31:35 <stevenxl> https://www.irccloud.com/pastebin/okBmseBq/
15:31:49 <xenon-> `Rembane zes
15:31:54 <xenon-> Rembane yes
15:31:56 <wagle> sm: the gitit code uses 3 different api's, depending on ghc version
15:32:16 <sm> that is far more effort than you'll get from most packages :)
15:32:41 <sm> gitit++
15:32:49 <wagle> well, I'm trying to now maintain it..  not that I am that clued
15:33:54 <sm> excellent
15:34:23 <sm> I would like to be able to install it from stackage again
15:34:45 <sm> or hackage.
15:35:08 <wagle> stackage != stack?, havent really tried it
15:35:39 <wagle> I'm also evaluating the current haskell build environments
15:35:53 <sm> easier to read about it at stackage.org
15:35:58 <hpc> stackage is to stack, what hackage is to cabal
15:36:01 <hpc> more or less
15:36:11 <wagle> ah
15:36:25 <hpc> stackage runs the whole LTS thing
15:36:31 <sm> or, stackage is to hackage as debian releases are to github
15:36:41 <wagle> heh
15:36:53 <hpc> debian releases aren't all that either
15:37:14 <sm> as debian releases are to debian unstable ? something like that
15:39:13 <wagle> stackage doesnt believe in 8.2.1?
15:39:30 <wagle> (no idea if I should believe or not)
15:39:34 <sm> 8.2.1 is in the nightly snapshots, not yet lts
15:39:44 <wagle> aha
15:40:28 * wagle slowly unflounders-about himself
15:40:45 <sm> it'll all make sense in the end
15:40:49 <monochrom> Even 8.2.2 is around the corner. Maybe it's wiser to aim for that instead.
15:41:14 <sm> we need cartographers drawing maps of this stuff
15:41:19 <monochrom> But if LTS wants to do a wait-and-see it's understandable.
15:41:46 <wagle> hrm..  hard to find dynamic plugin loading docs that arent dated 2005
15:42:08 <c_wraith> nothing of note had changed since then.
15:42:24 <monochrom> Use the GHC API directly or use hlint.
15:42:35 <sm> I would expect any of pandoc's three plugin systems to work, if you satisfy the deps
15:42:43 <c_wraith> except that ghc will unload dynamically loaded code that is no longer referred to from anywhere
15:42:45 <monochrom> But even I lost interest in that 5 years ago.
15:43:11 <sm> and the last one is probably the one you want
15:43:15 <monochrom> Wait, it will? I thought it won't.
15:43:32 <wagle> i'll find out I guess
15:43:52 <monochrom> Or rather, the observable effect is ghci memory footprint is like the 2nd law of thermodynamics.
15:44:27 <monochrom> Oh, I was observing something else. Nevermind.
15:44:37 <wagle> hlint?
15:44:39 <c_wraith> ghci doesn't let go of things. that's not the same.
15:44:47 <c_wraith> wagle, no, hint
15:44:48 <wagle> seems to be a static checker
15:44:58 <wagle> oh, ok
15:45:16 <monochrom> Naw, I was observing repeating ":load Mine.hs" a million times. Not the same as loading *.o files.
15:45:19 <sm> heheh imminent madness averted
15:45:48 <geekosaur> monochrom, wagle, if I understand correctly a number of lts packages are broken enough by 8.2.1 that they basically need 8.2.2 before they can cut an 8.2-based lts
15:45:51 <monochrom> Oh oops, yeah, it's hint, I typoed.
15:46:32 <wagle> ah, ii need more speed than an interpreter would provide
15:47:14 <geekosaur> if using hintm the only part that would be interpreted is the glue layer
15:47:18 * wagle looks through the GHC API docs again
15:47:20 <geekosaur> it would be calling the compiled plugin
15:47:42 <wagle> oh!  
15:48:09 <monochrom> You can aim for the equivalent of ghci doing this: While it needs your My.hs file to be present, after a bit of parsing it will load and use My.o instead and you get the speed.
15:48:45 <monochrom> I don't know how to tell hint to do the same, but if ghci can do it, the GHC API can too.
15:49:07 <monochrom> Pre-compile your My.hs with -fPIC -dynamic.
15:49:33 <monochrom> (If Linux. I don't know the Windows story.)
15:49:44 <geekosaur> if you ask it to load a module and a compiled version is available, it will by default be used. (both ghci and hint)
15:49:59 <monochrom> OK neat.
15:50:13 <geekosaur> you have to force loading the source version with something like :load *Foo
15:50:14 <monochrom> Make sure your My.hi is also present there. It's part of the checking.
15:50:19 <iqubic> What is the deal with 8.2.1 being faulty or wonky?
15:50:32 <monochrom> 8.2.1 is not faulty or wonky to me.
15:51:04 <wagle> macos  8)
15:51:06 <geekosaur> it's mostly working but there are a few regressions, mostly speed issues but one nasty memory corruption issue they're still tracking down
15:51:19 <geekosaur> (like, severe compile slowdowns in a few cases)
15:51:42 <geekosaur> the mmeory corruption only seems to occur in one specific case
15:51:54 <wagle> i thought i'd give stack a spin when cabal barfed at me
15:52:56 <geekosaur> iqubic, do remember that the first two components of the version comprise the major version (similar to the linux kernel), and the minor version starts at 1 instead of 0, so 8.2.1 is the first release of this major version
15:53:07 <geekosaur> they try to catch stuff before releasem but bugs happen
15:53:20 <iqubic> I see. 
15:53:47 <iqubic> Why is it that many packages are broken under 8.2.1?
15:53:47 <monochrom> Everything just works fine for me. It's just me.
15:54:09 <monochrom> People say Ubunto Pulseaudio broke on them, but it works fine to me.
15:54:28 <geekosaur> I didn't say many. but stackage is a full set of packages; they try to keep all of them working as a group, because that's the point
15:54:29 <monochrom> People say Archlinux broke on them, but I use Ubuntu.
15:54:52 <geekosaur> in extreme cases they will drop packages from the set, but usually that si only done in nightlies until the problem is fixed so they can do a complete lts
15:55:08 <monochrom> People say after upgrading Windows their Chrome became black. Didn't happen to me.
15:55:29 <hpc> this is why i only use beos
15:55:46 <geekosaur> writing haikus?
16:00:28 <sm> this is why I switched to paper notebooks
16:00:53 <sm> ...but every frickin pen leaves blots...
16:02:02 <iqubic> What web browsers do you all use?
16:02:22 <Rembane> Clay tablet. Red clay. Good stuff.
16:04:09 <wagle> I dont need my foot, trying the GHC API
16:12:26 <geekosaur> tbh hint is there for a reason. the ghc api is ... complete, but not really designed for people
16:13:34 <geekosaur> in some ways it's more of a compiler construction kit than a library. with instructions that assume you already know what's going on (otoh you can at least find that out, via the ghc Commentary)
16:27:30 <wagle> hrm.  he's using runghc and ghc api
16:27:42 <wagle> at least that makes sense now
16:30:06 <wagle> .. meaning that hint IS likely the way to go here
17:59:15 * hackagebot htoml-megaparsec 1.0.1.5 – Parser for TOML files – https://hackage.haskell.org/package/htoml-megaparsec
18:25:40 * hackagebot tomlcheck 0.1.0.8 – Command-line tool to check syntax of TOML files – https://hackage.haskell.org/package/tomlcheck
18:44:40 <tmciver> Hey folks. I'm running into an "injective" error and so started to research that. This has lead me to several blogs (like this one: http://lambda.jstolarek.com/2015/05/injective-type-families-for-haskell) that uses the "~" operator. Can someone point me to a link that discusses this operator? I've seen it before but know nothing about it and it is not very google-able. :)
18:48:42 <MarcelineVQ> idk about discussion, but the manual entry is here https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#equality-constraints
18:49:28 <tmciver> That's something. Thanks MarcelineVQ.
18:58:19 * hackagebot with-index 0.1.0.0 – A tiny library for composing indexed traversals – https://hackage.haskell.org/package/with-index
19:54:27 <exio4> what was that paper which gave us a maximum asymptotic complexity overhead of O(logn) for a functional algorithm? 
19:54:33 <exio4> (over an imperative one)
19:57:07 * hackagebot forest-fire 0.2.1 – Recursively delete CloudFormation stacks and their dependants – https://hackage.haskell.org/package/forest-fire
19:58:29 <c_wraith> exio4: I don't recall a paper specifically.  It was just a general observation that you can model mutable RAM with a function balanced BST for an O(log n) overhead on memory accesses
19:58:40 <c_wraith> *functional balanced BST
19:59:06 <exio4> c_wraith: yeah, I remember a paper which went more on detail about it 
20:26:42 <benzrf> is there actually a way to write this in haskell without using IO or something? https://i.imgur.com/BW90780.png
20:27:21 <shanemikel> is anybody around using nix?
20:27:58 <shanemikel> I'm trying to build a project with docs (doHaddock = true), and I see the haddock stuff building, but the docs aren't ending up in the ./result link
20:30:23 <geekosaur> benzrf, I can imagine a runtime primitive which did such evaluation (basically doing a 'hidden' thread fork). I imagine it'd be fragile in the presence of bottoms
21:03:00 * hackagebot madlang 2.4.2.20 – Randomized templating language DSL – https://hackage.haskell.org/package/madlang
21:04:59 <wagle> is haskell-platform still a fgood way to install (say ghc 8.0.2)..  brew wants to install 8.2.1, but I think thats breaking my app
21:08:36 <wagle> haha..  it directs me to brew's haskel platform, which installs...  8.2.1!  *sigh*
21:10:49 <boj> wagle: you may want to look at stack
21:11:32 <boj> you can pin stack lts releases in stack.yml and it'll only pull the relevant ghc down for you
21:12:07 <wagle> boj: been there, tried that, it wnts to make a bigger mess (i need runtime plugins, and it hides my modules in an obscure location)
21:12:42 <wagle> oh, hmm
21:13:58 <wagle> i need my app to work by last night..  
21:24:38 * hackagebot madlang 2.4.2.21 – Randomized templating language DSL – https://hackage.haskell.org/package/madlang
21:25:38 <Dydon> Hello everyone
21:25:40 <Dydon> Anyone around?
21:25:48 <boj> hello
21:26:04 <Dydon> Hey boj! This is my first time using IRC since literally 1997.
21:26:11 <Dydon> Do people still use this? 
21:26:15 <boj> indeed
21:26:43 <Dydon> Are there any interesting channels you would recommend for general chatting?
21:27:07 <boj> hmm, i'm sure there are some, but not off the top of my head
21:27:19 <boj> this one is dedicated to the haskell programming language
21:27:30 <Dydon> Very interesting
21:48:53 * hackagebot thread-hierarchy 0.1.0.2 – Simple Haskel thread management in hierarchical manner – https://hackage.haskell.org/package/thread-hierarchy
22:09:07 * hackagebot concurrency 1.2.1.2 – Typeclasses, functions, and data types for concurrency and STM. – https://hackage.haskell.org/package/concurrency
22:23:22 <saurabhnanda> how can one add typeclass constraints to a lambda function
22:23:53 <glguy> saurabhnanda: They'll be inferred as usual
22:24:03 <glguy> or you can use a type signature on the expressino
22:24:27 <saurabhnanda> Control.Exception.catch (throwM DivideByZero) (\((Exception e) => e) -> show $ toConstr e)
22:24:35 <saurabhnanda> "parseError on => " ^^
22:25:10 <glguy> No, the type signature doesn't go onto the pattern unless you're using ScopedTypeVariables
22:25:15 <glguy> and a type signature uses ::
22:25:31 <mauke> :t catch
22:25:34 <lambdabot> Exception e => IO a -> (e -> IO a) -> IO a
22:25:39 <Maxdamantus> It's definitions that can have constraints, not individual expressions.
22:25:43 <mauke> that already says Exception e =>
22:25:55 <Maxdamantus> (unless you're using higher-ranked types)
22:26:11 <glguy> saurabhnanda: What are you actually trying to do, what exception are you trying to catch?
22:27:10 <saurabhnanda> glguy: all exceptions... want to report them to airbrake.
22:27:39 <mauke> catching all exceptions is a bad idea in general
22:27:56 <saurabhnanda> want to split up the exception into type & message fields to send to Airbrake. The "type" field will be the exception constructor.
22:28:18 <saurabhnanda> mauke: no, not for my use-case. For error reporting to Airbrake it is THE idea.
22:28:35 <glguy> saurabhnanda: No, you can't split it up into constructor and fields
22:28:47 <mauke> what is airbrake?
22:28:48 <glguy> at least not for all exceptions
22:29:14 <saurabhnanda> glguy: why not? All Exceptions need to be Typeable, and from there I can just call toConstr on the exception
22:29:24 <saurabhnanda> mauke: error logging tool.
22:29:32 <glguy> saurabhnanda: Because toConstr doesn't have anything to do with Typeable
22:30:21 <saurabhnanda> glguy: sorry, Data.Data
22:30:32 * hackagebot madlang 2.4.2.22 – Randomized templating language DSL – https://hackage.haskell.org/package/madlang
22:30:41 <glguy> saurabhnanda: Right, which is why this won't work
22:30:48 <mauke> http://hackage.haskell.org/package/base-4.10.0.0/docs/Control-Exception.html#t:AsyncException
22:31:06 <saurabhnanda> I'm certain Typeable and Data have something in common... let me check
22:31:19 <mauke> StackOverflow and HeapOverflow don't sound like something you normally want to catch
22:31:32 <mauke> Typeable is a superclass of Data IIRC
22:32:03 <glguy> OK, so I overstated that they were unrelated, but still you can't do this
22:34:14 <koala_man> I want to iterate a large file. Can I use ByteString.Lazy getContents and foldr over it, or will end up keeping everything in memory?
22:34:21 <saurabhnanda> glguy: got it -- tyConName $ typeRepTyCon $ typeOf x
22:34:33 <glguy> saurabhnanda: No, that doesn't do what you wanted
22:34:58 <saurabhnanda> glguy: that gives me the constructor name
22:35:03 <glguy> Of the type
22:35:15 <glguy> which doesn't help you to get the data constructor or the fields
22:35:23 <saurabhnanda> tyConName $ typeRepTyCon $ typeOf x
22:35:34 <pacak> > S.fromList "Typeable" `S.intersection` S.fromList "Data"
22:35:38 <lambdabot>  fromList "a"
22:36:00 <pacak> Hmm... It seems they share letter 'a'...
22:37:30 <pacak> koala_man: With foldr - I'd say it will try to read all the things in memory first.
22:38:12 <glguy> saurabhnanda: Your best bet will be to ``show`` the exception and rely on people writing well behaved Show instances
22:38:15 <saurabhnanda> glguy: will figure out the constructor name splitting in a bit. How do I get something on the lines of the  following to work, without specifying e::SomeException in the handler -- Control.Exception.catch (throwM DivideByZero) (\e -> putStrLn $ show $ tyConName $ typeRepTyCon $ typeOf e)
22:39:02 <glguy> You can: handle (\(SomeException e) -> print e) :: IO () -> IO ()
22:39:26 <glguy> show works better here as the Typeable interface loses too much information
22:39:27 <koala_man> pacak: what can I do to avoid that?
22:40:36 <pacak> koala_man: foldl' might  work. Or I'd do it with one of the streaming libraries.
22:40:49 <saurabhnanda> glguy: exactly. As soon as I put SomeException, Typeable seems to think that it's a SomeException, not the original exception.
22:41:05 <WinterFox[m]> How do you install haskell packages?
22:41:12 <koala_man> isn't foldl just worse?
22:41:16 <WinterFox[m]> I want to use this http://hackage.haskell.org/package/DRBG-0.5.2/docs/Crypto-Random-DRBG.html
22:41:22 <glguy> saurabhnanda: No, that's why you match on the SomeException data constructor
22:41:27 <saurabhnanda> don't really want to depend on `show` in this case. All the types are right there. Why is it so hard to get to them when you need them?
22:41:27 <glguy> as in my example
22:41:28 <pacak> WinterFox[m]: cabal DRBG
22:41:44 <pacak> koala_man: There's a difference between foldl and foldl'
22:41:50 <glguy> saurabhnanda: the types are not there, a hash of the type and its name are there passed as an extra dictionary
22:41:55 <glguy> the actual "types" are long gone
22:42:01 <pacak> foldl' is strict, foldl is lazy
22:42:12 <saurabhnanda> so how do I get my hands on that hash?
22:42:30 <pacak> WinterFox[m]: cabal install DRBG
22:42:39 <WinterFox[m]> Thanks
22:43:03 <koala_man> pacak: there's no foldl' in ByteString.Lazy
22:43:04 <glguy> It's in the typerep, keep in mind that it might only be unique to a particular executable, so you wouldn't want to store it in a database of errors
22:43:56 <koala_man> nm I'm just insane
22:44:02 <saurabhnanda> glguy: it would be mapping to a string representation of the type & the constructor somewhere, right?
22:44:22 <pacak> koala_man: http://hackage.haskell.org/package/bytestring-0.10.8.1/docs/Data-ByteString-Lazy.html#v:foldl-39-
22:45:01 <pacak> WinterFox[m]: Might need to do cabal update before that. Some would recommend using stack instead.
22:45:03 <koala_man> pacak: that does indeed seem to work with constant memory. thanks!
22:45:24 <glguy> saurabhnanda: I don't think the hash portion is actually exposed. It's an implementation detail
22:46:05 <WinterFox[m]> pacak: Do stack and cabal do similar things?
22:46:06 <glguy> But this path is worse than show, so it doesn't really matter
22:46:31 <pacak> glguy: Everything is exposed with enough unsafePerformIO :)
22:47:05 <glguy> Oh, fun. pacak is taking over help with the question!
22:47:20 <dsal> What's a good intro to parsec?
22:47:40 <pacak> WinterFox[m]: Cabal is package manager, stack is something bikeshedded on top of cabal, also manages versions of ghc.
22:48:01 <saurabhnanda> aargh... it was simple
22:48:07 <saurabhnanda> Control.Exception.catch (throwM DivideByZero) (\(SomeException e) -> putStrLn $ show $ tyConName $ typeRepTyCon $ typeOf e)
22:48:27 <pacak> dsal: Specific questions? It's relatively simple...
22:48:34 <glguy> saurabhnanda: now run that and see how it doesn't let you know that it was a DivideByZero exception
22:48:39 <saurabhnanda> no data is being lost anywhere. All exceptions are wrapped in the GADT/Existential of SomeException. Just had to take it out.
22:48:49 <saurabhnanda> glguy: Solving that now...
22:49:05 <dsal> pacak: Just looking to start.  I need to parse a string and build an expression from it.
22:51:12 <pacak> dsal: runP :: Stream s Identity t => Parsec s u a -> u -> SourceName -> s -> Either ParseError a 
22:52:05 <pacak> dsal: s - stream type, u - user state  (put () if you don't want any), SourceName - used in error reporting, empty string will do, s - input.
22:52:13 <pacak> Parsec s u a - monadic expression
22:52:47 <pacak> runP (True <$ string "foo") () "" "foo"
22:53:02 <pacak> ^ with appropriate imports this will produce Right True. I think.
22:53:09 <dsal> Where's runP?
22:53:23 <dsal> @hoogle runP
22:53:23 <lambdabot> Data.Text.Internal.Read runP :: IParser t a -> IReader t a
22:53:23 <lambdabot> Text.Parsec runP :: (Stream s Identity t) => Parsec s u a -> u -> SourceName -> s -> Either ParseError a
22:53:24 <lambdabot> Text.Parsec.Prim runP :: (Stream s Identity t) => Parsec s u a -> u -> SourceName -> s -> Either ParseError a
23:05:49 <pacak> dsal: Btw, there's also attoparsec which is somewhat easier to use but it produces worse error messages on bad input.
23:06:19 <dsal> Hmm.  I'll look at that, too.  I'm doing something I hope is really simple.
23:06:44 <pacak> Also parsec itself is pretty much dead and there's more development activity in megaparsec, but I haven't used it myself.
23:07:39 <cocreature> megaparsec also has a bunch of tutorials https://markkarpov.com/learn-haskell.html#megaparsec-tutorials
23:08:27 <cocreature> but it looks like there is not really one that just teaches the basics
23:09:03 <dsal> People like to write docs that show off what's possible.  Those are typically pretty awful for someone who wants to try something simple.
23:09:10 <MarcelineVQ> I found https://markkarpov.com/megaparsec/parsing-simple-imperative-language.html reasonably basic
23:09:34 <johnw> I still use parsec all the time, even if development has stalled
23:11:20 <cocreature> johnw: do you have a specific reason to use parsec over megaparsec or is it just a case of using the thing you’re already familiar with?
23:13:39 <johnw> already familiar, no performance constraints, just want to get parsing done ASAP and not think about it
23:16:55 * hackagebot rakuten 0.1.0.0 – The Rakuten API in Haskell – https://hackage.haskell.org/package/rakuten
23:26:20 <nshepperd_> In haskell "development has stalled" sometimes means the library is finished :p
23:28:02 <nshepperd_> I use parsec, seems to work
23:28:02 <johnw> yep
23:28:26 <johnw> plenty of my Haskell projects are still used by me daily, but haven't been touched in years; it's a good language like that
23:38:32 <cocreature> is there a package which provides an URI type that provides a more structured representation that already separates uriPath into segments, uriQuery into query params and so on?
23:39:06 <cocreature> using a combination of network-uri and http-types I can do the parsing but it’s bit annoying since they don’t fit together very well (e.g. ByteString vs String)
