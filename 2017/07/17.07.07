00:00:54 <mniip> uh
00:01:11 <mniip> the whole point of proving is making sure there are no malicious parts
00:01:15 <trigone> Axman6: sure, i'll look into it. the main advantage at asking here is, i can get bits of general data without having to my next week on that topic only.
00:01:21 <mniip> if there are you've got a contradiction
00:01:40 <trigone> mniip: i do know, but then can it not be used to *make* malicious programs?
00:01:46 <mniip> how?
00:02:21 <trigone> no idea...
00:02:38 <Axman6> I don't understand the question
00:02:58 <trigone> nevermind, got another one
00:03:39 <trigone> is there a chance someday every program can be checked for malicious or erroneous code in a generic way?
00:03:47 <Axman6> no
00:04:00 <Axman6> I think it would be pretty easy to show that that amounts to the halting problem
00:04:23 <pacak> trigone: Suppose my program launches missiles every time I type "cat" in any window. Is that intentional or malicious?
00:04:29 <trigone> Axman6: ok, mathematically impossible...
00:05:04 <trigone> pacak: you're right, you need to define what the program is meant to do first
00:05:18 <Axman6> that in itself is very difficult
00:05:28 <trigone> suppose that it is done, is checking always doable then?
00:05:33 <trigone> Axman6: yes i can imagine
00:05:56 <quick_dudley> If we knew how to do that we wouldn't need to write the program in the first place
00:06:05 <Axman6> (btw, seL4 took something like 25 manyears to verify, which included defining the properties it should have - and these properties rely on the hardware implementing the semantics they have assumed)
00:06:29 <mniip> yeah, you could iterate over all strings until you found one that matches the behavior
00:07:25 <trigone> Axman6: oh... well that is a long time. is the kernel extensible now? as in, you don't need to redo the whole work if you want to modify it do you?
00:07:45 <trigone> mniip: what are you answering to?
00:07:54 <mniip> to quick_dudley
00:08:15 <trigone> mniip: so you saying they're wrong?
00:08:19 <Axman6> well, it's a microkernel, so you can write new processes for it without needing to change anything
00:08:28 <mniip> no
00:08:34 <mniip> I'm continuing their line of thought
00:08:44 <Axman6> they recently proved many of its properties still hold when using it's hypervisor too, but that required more proof work IIRC
00:08:52 <trigone> quick_dudley: why did you say that?
00:09:07 <trigone> Axman6: don't know what a hypervisor is
00:09:20 <Axman6> it's the software that runs virtual machines
00:09:21 <mniip> it's a visor that lets you see in hyperspace
00:09:34 <Axman6> VMware, VirtualBox etc are examples of hypervisors (losely)
00:09:54 <mniip> qemu-kvm
00:09:55 <Axman6> loosely*
00:10:12 <mniip> yeah, qemu vs qemu-kvm is a good distinction
00:10:20 <trigone> Axman6: virtual systems?
00:10:26 <Axman6> yeah, qemu isn't a hypervisor, but an emulator, but qemu-kvm is a hypervisor
00:10:43 <trigone> is it a pun over supervisor?
00:10:47 <Axman6> trigone: you don't know what a virtual machine is?
00:11:02 <trigone> Axman6: well not in details but i know what it does
00:11:15 <trigone> i was asking if that was what i thought it was
00:11:37 <trigone> Axman6: how do you define a virtual machine?
00:11:40 <mniip> hypervisor is a specific type of a VM implementation where it runs in ring-0 alongside your kernel
00:11:55 <mniip> and makes use of native MMU (etc) for speed
00:11:59 <Axman6> it's generally an operating system which is being managed by another operating system
00:12:33 <trigone> mniip: but it's not like having two systems at once, there is a hierarchy?
00:12:46 <merijn> mniip: A hypervisor is just "something that manages VMs"
00:13:00 <Axman6> a hypervisor allows that guest OS to execute most of its instructions directly on the hardware, but handles privileged instructions on behalf of the guest btu passing those requests to the host OS
00:13:03 <mniip> merijn, er?
00:13:17 <merijn> mniip: https://en.wikipedia.org/wiki/Hypervisor
00:13:26 <Axman6> s/btu/by
00:13:35 <merijn> mniip: You have native hypervisors which run baremetal or hosted, which run on top of an existing OS
00:13:38 <Maxdamantus> qemu-kvm is a discontinued project that contains a bunch of code that was merged into mainline qemu.
00:14:12 <merijn> Anyway, VM/hypervisor seems kinda -offtopic unless we're discussing HaLVM
00:14:28 <trigone> Axman6: so, they created a hypervisor? why did they need one?
00:14:34 <Maxdamantus> Hopefully noone's intentionally actually installing qemu-kvm anymore.
00:14:39 <mniip> merijn, I suppose I've only seen type-1 hypervisors
00:15:44 <merijn> mniip: And most virtualisation software (including hosted ones) use direct hardware support nowadays. Every Intel/AMD chip manufactured after like 2007 has hardware support for MMU virtualisation
00:15:45 <Axman6> trigone: so you can run Android on your phone
00:16:05 <mniip> right
00:16:10 <mniip> that was kinda my point
00:16:14 <Maxdamantus> Is the Linux kernel a hypervisor for the userspace code it runs in VMs?
00:16:21 <mniip> use the host MMU instead of emulating one
00:16:25 <trigone> wait, type-1 look like having a multi-OS system. in that configuration, what is the 
00:16:28 <trigone> "host" ?
00:16:39 <mniip> as well as host cpu's instruction parser and interpreter
00:17:05 <trigone> Axman6: does not help me get it, i know nothing of smartphones
00:17:14 <merijn> Maxdamantus: No, but if you run, e.g. VirtualBox on top of linux, then virtualbox would be a type 2 (i.e., hosted) hypervisor in that scenario
00:17:38 <mniip> merijn, are you sure?
00:17:50 <mniip> vboxdrv.ko?
00:18:10 <merijn> mniip: Well, it's managing VMs and running on top of host OS, no? :)
00:18:35 <mniip> I'm not familiar with the details but something tells me "alongside" is a more appropriate description
00:18:36 <mniip> ontologically
00:18:41 <merijn> trigone: ok, before this turns into a 3 hour VM discussion, what was the original question? :)
00:18:43 <Maxdamantus> I'm guessing he's implying that since it involves a kernel object, it *IS* part of the OS.
00:18:48 <trigone> in the wiki schema, there's no kernel next to the hypervisor... it just looks like one hypervisor somehow managing several OS, which i thought impossible
00:18:50 <Maxdamantus> rather than something running on top of it.
00:19:09 <mniip> trigone, why would it be impossible
00:19:13 <merijn> trigone: baremetal hypervisors are, basically, really minimalist operating systems
00:19:47 <merijn> trigone: So there *is* a kernel in there, but the kernel *is* the hypervisor
00:19:47 <trigone> merijn: Axman6 mentioned it in passing
00:20:02 <mniip> how big does a baremetal hypervisor need to be? it would be well under a megabyte of machine code
00:20:34 <trigone> merijn: that's what i thought...
00:21:13 <merijn> trigone: At that level of detail it basically becomes hard to draw clear lines in definitions :)
00:21:59 <trigone> mniip: well at the time of starting using linux i wanted to not need to reboot to change of OS, but they told me it was mostly impossible...
00:22:09 <trigone> detail?
00:22:35 <merijn> trigone: That's not really possible no, mostly because linux was never designed to be amenable to that
00:23:01 <trigone> so the OS on top of the hypervisor have to be designed for it
00:23:20 <merijn> trigone: Or did you mean change OS to something other than a different version of the same OS? (like upgrading kernel), because that's DEFINITELY not possible :)
00:23:44 <trigone> so when does the need for more than one OS at once arise? Axman6 spoke of smartphones but i have no idea what that entails.
00:23:47 <mniip> merijn, it's called hibernation
00:24:10 <trigone> merijn: no i did not mean hot-swap the OS/kernel or something
00:24:11 <merijn> trigone: Well, VPS are the classical example use case of virtualisation
00:24:20 <mniip> I propose we move to #haskell-offtopic
00:24:21 <Maxdamantus> tbh, "hypervisor" just seems like a vague term that's probably best used for marketing purposes.
00:24:29 <merijn> trigone: Yes, let's go to #haskell-offtopic
00:24:30 <Maxdamantus> Like calling a CPU "64-bit"
00:24:39 <trigone> k
00:25:01 <trigone> i'm there
00:27:04 <Maxdamantus> All that's happening is that some piece of software is passing a bit more control to hardware, without breaking safety.
00:44:23 <Phyx-> trigone: one example is ARMv8's secure states. since the different EL levels can be completely isolated by the hardware architecture they can run two different OSes. typically in the more secure state you'd run a small RTOS os which you've verified correct, secure etc, and in the other you can run your general one, like android. Or a simpler example, running both AArch64 and AArch32 apps in their own native OSes on the same hardware at the same EL level.
00:46:54 <merijn> Phyx-: We've moved to -offtopic :)
00:48:21 <Phyx-> merijn: I just wanted to answer the one question :) but thanks :)
00:54:20 <Eduard_Munteanu> Any idea how HTTP or similar packages handle caching? I want to retrieve a document from a cache unless expired.
01:01:03 <merijn> Eduard_Munteanu: You mean you're wanting to cache locally?
01:01:29 <merijn> Eduard_Munteanu: I'm not sure what you mean by "how does HTTP handle caching"?
01:02:04 <Eduard_Munteanu> merijn, yes, I want the response cached locally.
01:02:32 <merijn> Eduard_Munteanu: I'm assuming that none of the packages do any caching, so you'd have to do that yourself
01:03:02 <hanna> They also don't seem to assist you with caching
01:03:06 <hanna> so you'd have to set and parse the headers yourself
01:03:08 <Eduard_Munteanu> merijn, I was hoping there was some helper to check if a document is expired.
01:03:17 <Eduard_Munteanu> Hm.
01:03:32 <hanna> Eduard_Munteanu: http://hackage.haskell.org/package/wreq seems to do caching
01:03:54 <hanna> while providing a pretty high-level API
01:05:31 <Eduard_Munteanu> They seem to parse header themselves, hm.
01:05:57 <hanna> (I'm suggesting you could use this package, not looking to see how they did it :D)
01:06:10 <Eduard_Munteanu> I could use wreq, though I'm a bit unsure of the security of 'tls', OpenSSL seems like a safer approach wrt time attacks.
01:06:50 <hanna> yeah, high-level crypto makes me nervous as well
01:07:46 <hanna> but afaik the underlying package, cryptonite, implements all primitives in assembly
01:07:48 <hanna> or C
01:08:15 <hanna> so at least they should be constant time / branchless / whatever
01:08:49 <hanna> (to be fair, if you're worried about timing attacks then you're not allowed to process the data you receive in haskell anyway, right? :p)
01:10:01 <Eduard_Munteanu> hanna, I thought 'tls' implemented it in Haskell.
01:10:14 <Eduard_Munteanu> Fully, that is.
01:10:17 <hanna> Eduard_Munteanu: it seems like tls implements *TLS* in Haskell, but not the ciphers employed by TLS
01:10:23 <hanna> At least it depends on `cryptonite`
01:10:30 <Eduard_Munteanu> Oh, hm.
01:10:51 <hanna> You'd probably have to check the source to be fully sure
01:11:08 <Eduard_Munteanu> I'm not entirely sure of the security issue here, if it's even an issue for a client.
01:11:36 <Eduard_Munteanu> It does not seem like a TLS request could disclose some secret on a timing attack.
01:12:12 <hanna> When it comes to timing attacks, the key itself is not the only sensitive piece of information at your disposal
01:13:05 <Eduard_Munteanu> I'm merely interested in downloading some JSON securely, i.e. making sure it isn't modified in transit.
01:13:06 <hanna> hmm so for example https://github.com/vincenthz/hs-tls/blob/master/core/Network/TLS/Crypto/DH.hs
01:13:27 <hanna> It calls out to Crypto.PubKey.DH which comes from package cryptonite
01:13:40 <hanna> but I also see this line     stripLeadingZeros (DH.SharedKey sb) = DH.SharedKey (snd $ B.span (== 0) sb)
01:13:54 <hanna> (although to be fair, the shared key is public knowledge to the attacker making the connection)
01:16:15 <hanna> http://hackage.haskell.org/package/cryptonite-0.23/docs/src/Crypto-Number-Generate.html#generateMax seems like this is how they generate their private key
01:16:31 <hanna> at least for DH
01:17:09 <hanna> I don't know enough about crypto to know how sensitive the DH private key is, but it feels to me that if you can guess that you can MITM
01:17:33 <merijn> Anyone here know any tools that: 1) is good at online checking of haskell files, 2) supports cabal new-build, and 3) works with vim?
01:18:19 <merijn> I've found an intero for neovim implementation, but I dunno whether 1) intero supports new-build and 2) how hard porting from neovim to vim would be
01:18:48 <cocreature> merijn: there is none afaik, intero definitely doesn’t support new-build
01:18:57 <grmp> what does online checking?
01:19:15 <merijn> cocreature: I hate the world...goddammit
01:20:12 <merijn> cocreature: I actually managed to get a proof of concept support for new-build hacked into hdevtools only to find out that I can never get that to work sanely unless I manage to determine to which component a specific file belongs and I have no way of doing that, afaik :\
01:20:17 <cocreature> Haskell tooling is a mess
01:20:26 <merijn> Short of implementing an incredibly hacky cabal file parser that's brittle as fuck
01:20:51 <cocreature> we are just doing it the wrong way around: instead of every tooling having to support every build tool, build tools should support a way to call tooling
01:21:18 <merijn> cocreature: There's an experimental branch for new-build that exports "show-build-info" which should accomplish that, but it's not merged
01:21:45 <cocreature> it doesn’t help if _only_ new-build has something like that. we need build, new-build and stack to expose the same interface
01:23:10 <quchen> merijn: Why don’t you use Cabal to parse Cabal files?
01:24:14 <quchen> merijn: parsePackageDescription it’s called I think
01:24:51 <merijn> quchen: There's a reason I ripped the entire Cabal dependency out of hdevtools, it's a fucking mess of #ifdef because the cabal interface keeps changing
01:25:19 <merijn> quchen: I considered readding a tiny bit to get the dependency information out
01:25:37 <merijn> quchen: Except, there doesn't appear to be any part that actually tells me which component a file belongs too
01:25:44 <merijn> quchen: So it doesn't actually solve my problem
01:26:41 <merijn> quchen: If you somehow manage to find a way to do the simple "filename -> component name" mapping, then you'll be my hero forever, but I haven't managed yet
01:29:57 <quchen> merijn: Well, I put together a horrible hack to write acme-everything, so I don’t think I have a better suggestion
01:30:47 <cocreature> merijn: to make your things even more complicated: it could also belong to multiple components
01:32:00 <merijn> cocreature: That's fine, because that means it has to compile with either set of dependencies
01:32:23 <merijn> cocreature: All I care about is finding A set of flags that I can compile it with
01:33:23 * hackagebot miso 0.1.3.0 – A tasty Haskell front-end framework – https://hackage.haskell.org/package/miso
01:33:53 <cocreature> merijn: good luck with that :p
01:55:24 <daemoz> Hey all, I'm having trouble with cabal. I'm trying to install distributive-0.5.2 but it keeps failing to install and I can't figure out why.
01:55:41 <cocreature> daemoz: you’ll need to be a bit more specific in how it’s failing
01:56:11 <daemoz> cocreature: What information do you need? I run cabal install on a project that depends on it and it simply sayd "failed to install" for distributive.
01:56:28 <cocreature> daemoz: there is a logfile somewhere
01:56:37 <daemoz> one second
01:56:40 <cocreature> I think cabal tells you where it is
01:56:59 <cocreature> you can also run cabal with -v3 to get more output
01:57:37 <daemoz> ix.io/ylW
01:58:01 <cocreature> let me guess, you’re on archlinux?
01:58:14 <daemoz> correct.
01:58:17 <daemoz> nice guess.
01:58:21 <daemoz> Does this come up a lot?
01:58:25 <merijn> daemoz: No, archlinux broke shit :)
01:58:29 <daemoz> T_T
01:58:33 <cocreature> it comes up a lot for archlinux users :)
01:58:39 <cocreature> I should write some blogpost so that I can just link to it
01:58:43 <merijn> I thought the arch linux wiki had some documentation on how to fix things
01:58:48 <cocreature> it does?
01:59:02 <merijn> Well, someone claimed it did on reddit
01:59:07 <merijn> I'm just parrotting them :p
01:59:13 <cocreature> daemoz: so step 1. install ghc-static
01:59:24 <merijn> Step 1) get a proper OS ;)
01:59:29 * merijn hides
01:59:48 <daemoz> hahaha!
01:59:53 <daemoz> merijn: such as?
02:00:04 <merijn> daemoz: FreeBSD? :p
02:00:07 <cocreature> step 2. try to get a statically linked cabal from somewhere (e.g. you can use the one from the archrepos from a few weeks ago)
02:00:17 <daemoz> installing ghc-static
02:00:21 <cocreature> step 3. nuke everything Haskell related that you installed via pacman except for ghc and ghc-static
02:00:22 <grmp> voidlinux
02:00:30 <daemoz> grmp: isn't that just arch?
02:00:31 <cocreature> step 4. yell at the maintainer to stop doing this crap
02:00:40 <daemoz> cocreature: hahahaha, got it.
02:01:09 <HaskellLord69> +1 voidlinux
02:01:20 <grmp> no! it appears to, without systemd and yaourt
02:01:30 <trigone> is there a place where i could find a relatively exhaustive list of topics relative to haskell coding? especially, ordered in a way that allow for progressing from one level to another?
02:01:51 <trigone> what you're saying about arch, is it the same for manjaro?
02:01:58 <cocreature> probably
02:02:10 <cocreature> at least when they update their repos. I think they lag behind a bit
02:02:29 <cocreature> trigone: http://dev.stephendiehl.com/hask/ is a pretty good overview but it’s not topologically ordered
02:02:52 <quick_dudley> O
02:02:55 <trigone> cocreature: if i install ghc/haskell from somewhere else, can i still code in haskell without limitation on manjaro/arch?
02:03:16 <cocreature> trigone: depends on what “somewhere else” means
02:03:17 <quick_dudley> On my current computer I got cabal by running "stack install cabal-install"
02:03:29 <cocreature> yeah that’s one option to get a statically linked cabal
02:03:32 <trigone> cocreature: ah yes i like this tutorial. indeed when i think about it it's pretty comprehensive
02:03:45 <merijn> I just install GHC from bindist and build cabal myself, because I like to suffer :p
02:03:50 <trigone> well i was thinking about stack indeed. does that work?
02:05:07 <cocreature> merijn: you bootstrap cabal?
02:05:42 <quick_dudley> I prefer stack's actual build process but when stackifying old projects that weren't cabalized in the first place you can sometimes get them running with "cabal init; stack init"
02:05:44 <merijn> cocreature: Sure, it's just a matter of "run one script, wait a bit"
02:05:46 <lambdamu> trigone: I don't think stack is very picky when it comes to linux distributions: https://docs.haskellstack.org/en/stable/install_and_upgrade/
02:06:17 <cocreature> merijn: I thought someone recently detected that the bootstrap process has been broken for some time and nobody noticed because everybody is too lazy to do that but maybe it was just on some platforms
02:06:20 <merijn> cocreature: Most reliable way I've found to get user-only installs on machines
02:06:33 <merijn> cocreature: oh, there was a minor bug in the install script
02:06:39 <merijn> cocreature: Which is trivial to fix
02:06:51 <merijn> cocreature: Not sure whether it was backported, but I just fixed it locally
02:07:47 <cocreature> I just continue to carry around existing binaries of cabal like a sourdough and use them to build new ones
02:08:24 <merijn> cocreature: That doesn't help you install on a new system :p
02:08:46 <cocreature> merijn: it does as long as you use the same OS and architecture :)
02:09:11 <[exa]> ...or binary wrappers :]
02:09:57 <_sras_> Using Servant, is there any way to bring in the value of the HOST header in the incoming request into the endpoint handlers?
02:10:50 <knupfer> How can I export in a module nearly every function without listing them?
02:11:02 <knupfer> module A (module a hiding (foo)) where
02:11:05 <knupfer> doesn't work
02:11:11 <knupfer> s/a/A
02:11:27 <cocreature> "module A (module A) where import A hiding (foo)" should work iirc
02:11:35 <cocreature> eh nvm
02:11:41 <cocreature> I somehow thought those were different As
02:11:52 <trigone> knupfer: maybe you can use an intermediate module to filter
02:11:55 <cocreature> "module B (module A) where import A hiding (foo)" works
02:12:02 <cocreature> so you can use a separate module
02:12:07 <knupfer> ok, thanks
02:12:30 <trigone> that's pretty clunky though. anyway haskell's syntax for import/export is very weird but maybe there's an actual reason...
02:12:37 <trigone> say i add then remove dependent types (or whatever's emulating them) from some haskell code, compiling for each cases. would the two binaries be different?
02:14:09 <quick_dudley> Probably depends how you're emulating dependent types
02:14:37 <lambdamu> trigone: GHC compilation isn't binary deteminstistic, you can compile the very same code and end up with two different binaries
02:15:02 <trigone> lambdamu: twice in a row? seriously? why is it not deterministic?
02:15:35 <trigone> lambdamu: putting aside differences and platforms or stuff like that?
02:15:35 <quick_dudley> Does the nondeterminism come from forkIO?
02:15:45 <lambdamu> trigone: There are many reasons, randomized algorithms is one
02:16:06 <trigone> lambdamu: you meani n the code to compile or in GHC?
02:16:12 <lambdamu> in GHC
02:16:32 <lambdamu> We have interface determinism, since recently, though
02:17:29 <quick_dudley> What's interface determinism?
02:17:31 <trigone> still even if i t's the case, let's talk theory: if GHC was not somehow non-deterministic, would having dependent types change the program's compilation? esp, is there a risk of performance drop, even with types erased at compile time
02:18:00 <merijn> cocreature: welp, I've discovered a new emotion I wasn't aware of
02:18:03 <lambdamu> quick_dudley: Compiling the same code with the same flags, should give you the same .hi files
02:18:28 <cocreature> merijn: I’ve worked on HIE a bit in the past, so I feel your pain
02:18:32 <merijn> cocreature: The odd mix of utter frustration and relieve that I actually can pretty trivially compute the shit I need, but no one really bothered to point that out
02:18:49 <quick_dudley> Oh: that does make sense
02:19:10 <cocreature> merijn: how so?
02:19:16 <merijn> cocreature: I was perfectly able to figure out the package flags per component, but no way to figure out the component of a file or a good way to generate the flags for ALL components
02:19:42 <lambdamu> trigone: I'm not an expert on that but I think that dependently typed programs can (and have to) end up carrying evidence around at run time, but then you probably be able to write such a program without dependent types
02:19:49 <merijn> cocreature: Turns out, if you run "cabal new-build" (i.e. no targets = all components) it actually dumps out a .ghc.environment file that contains the packages need for EVERY component.
02:20:10 <lambdamu> trigone: s/be able/would not be able/
02:20:15 <merijn> cocreature: So if someone had pointed that out to me, I actually could've skipped all this effort
02:21:10 <merijn> cocreature: I don't get per-component warning/compile flags that way, but I can (for now) simply disable warnings via GHC_OPTS pragma's and then it "Just Works (TM)"
02:21:53 <_sras_> Using Servant, is there any way to bring in the value of the HOST header in the incoming request into the endpoint handlers?
02:23:06 <trigone> lambdamu: so maybe one could write a program to erase dependent types from a program? just wondering... at any rate, do you think it might still harm the speed or memory of the program?
02:23:31 <nvd> I'm trying to understand how to use hail ( https://github.com/TaktInc/hail )
02:23:36 <nvd> Wrong channel, sorry
02:25:35 <lambdamu> trigone: Hm I'm not sure what you are getting at, at the end of the day dependently types can compile to lambda expression, but since types are values in that setting types can be passed around and computed with just like values, there is no type erasure in dependent types like there is in HM types systems
02:26:22 <lambdamu> trigone: In fact there is no clean separation of compile time and run time with dependent types
02:26:46 <ventonegro> lambdamu: The Idris TDD book says otherwise
02:27:09 <lambdamu> ventonegro: What does it say?
02:27:14 <ventonegro> I think it's more like constexpr in C++
02:27:29 <ventonegro> It says the types are resolved at compile time
02:27:36 <ventonegro> I'll search for the actual quote
02:27:41 <cocreature> merijn: ah nice
02:27:53 <ventonegro> maybe I got it wrong
02:29:10 <lambdamu> ventonegro: I don't see how that would be possible in general, maybe you can represent them in some way and stop calling them types, but that's just a trick of course
02:29:25 <ventonegro> lambdamu: "Type-level functions exist at compile time only. There’s no runtime representation of Type, and no way to inspect a Type directly, such as pattern matching."
02:29:59 <ventonegro> lambdamu: chapter 6, section 6.1.3
02:30:59 <lambdamu> ventonegro: Hm ok but not all functions involving types are type-level functions right?
02:31:36 <cocreature> ventonegro: let’s say you have the standard dependent list type which is indexed by its length
02:31:46 <cocreature> ventonegro: now write a function that returns its length by matching on the type
02:31:50 <cocreature> good luck erasing the types
02:31:52 <ventonegro> lambdamu: There is no such distiction in Idris, any total function can be used at compile-time
02:32:29 <trigone> a priori, in haskell types die before runtime. the only question is to know if it can still have a performance effect, like modifying how GHC chooses inlines or whatever (i nearly know nth of the compilation process, so i may just be saying absurdity)
02:32:57 <lambdamu> ventonegro: But the quote makes the distinction, does it not? Also I think "Type" has no representation that doesn't mean it's values (other types) have none
02:33:16 <trigone> cocreature: is that not only in idris?
02:33:29 <trigone> do we have types as values in haskell too?
02:33:38 <cocreature> trigone: well ventonegro was talking about idris
02:33:40 <lambdamu> ventonegro: But I'm speculating here, I would need more context on Idris to say something sensible
02:33:43 <trigone> oh right
02:33:45 <ventonegro> lambdamu: The book says elsewhere that type-level functions are just functions called sat compile-time
02:34:25 <ventonegro> "Only functions that are total will be evaluated at the type level. A function that isn’t total may not terminate, or may not cover all possible inputs. Therefore, to ensure that type-checking itself terminates, functions that are not total are treated as constants at the type level, and don’t evaluate further."
02:35:57 <trigone> so, in haskell, dependent types (their equivalent), risk for performances or not?
02:35:58 <lambdamu> ventonegro: Well this goes deep into the implementation choices of idris, but for very fundamental reasons I don't think any true implementation of dependent types can meaningful support type erasure
02:37:08 <lambdamu> trigone: The haskell equivalent if there is one would probably be singleton types and I think they can end up passing class instances around at runtime, but about that I know even less
02:37:08 <cocreature> lambdamu: it can’t support type erasure in all cases. you can still eliminate types in a lot of places and afaik idris tries to do so very agressively
02:37:15 <quick_dudley> As far as I know the DataKinds extension is the closest Haskell actually gets to dependent types
02:37:28 <ventonegro> cocreature: The length of the vector is obviously present at runtime, but no type-checking is being performed there
02:37:52 <lambdamu> cocreature: Yeah that makes sense
02:38:29 <cocreature> ventonegro: nobody said that type-checking happens at runtime. but the fact that type-checking happens at compile-time doesn’t mean you can erase all types
02:38:30 <ventonegro> Nat's compile down to ints
02:39:13 <ventonegro> You can pattern match on the Nat's all you want, that doesn't mean they survive compilation
02:40:20 <ventonegro> OTOH I am hardly an expert, so maybe it's better if I shut up before I say something really stupid
02:40:26 <ventonegro> :)
02:42:48 <trigone> lambdamu: singletons don't seem such a weight to carry, are they?
02:43:05 <trigone> s/seem/seem to be/
02:45:57 <lambdamu> trigone: I really don't know, I wouldn't worry about it, but only because I wouldn't use them systematically in the first place
02:46:48 <trigone> anyway, dependent types to survive post compilation seems to kill one major point of compile-time additional checks. if they survive as runtime values, then any additional type control would become, obviously, dynamic and thus unknown before runtime. but maybe i'm missing sometihng
02:47:14 <trigone> lambdamu: i agree, but it's always better to know before putting it everywhere or something
02:48:00 <trigone> s/it/them
02:49:12 <lambdamu> trigone: If you want to know more about singletons and their implementation I would try the two papers linked here: https://hackage.haskell.org/package/singletons
02:50:28 <trigone> thanks!
02:51:39 <trigone> can i ask about : Docs not available [build log] All reported builds failed as of 2017-06-01 
02:52:35 <lambdamu> trigone: You can look at 2.2
02:52:55 <trigone> lambdamu: oh right, thanks
02:53:57 <trigone> well the docs are unreadable... nevermind, i'll read the papers sometime
02:56:16 <lambdamu> trigone: The Data.Singletons.Prelude* and the Data.Promotion.Prelude* modules are generated, the other modules are ok, the gist of it is in Data.Singletons
03:58:33 <tinpot96> The recursive case for `map` is: `map f (x:xs) =  f x : map f xs` . To make this strict on each element, I add a ! bang on the `x` head element. How do I make this map fully strict, i.e. to make sure that `f x` is fully evaluated before the `map f xs` ?
03:59:52 <Athas> tinpot96: let x' = f x in x' `seq` (x' : map f xs)
04:00:11 <Athas> Although this is only evaluated to weak-head normal form.
04:00:20 <Athas> You need 'deepseq' if you really mean "fully evaluated".
04:00:30 <Athas> (But that is the case for bang-patterns too.)
04:02:13 <tinpot96> Athas: thanks
04:10:19 <mpickering> Does anyone know of any examples of using Vinyl with type literals?
04:13:51 <osa1> every package in a stackage release is supposed to test its test-suite, right?
04:13:54 <osa1> s/test/pass
04:15:32 <merijn> osa1: Well, someone moved a package of mine into stackage despite it not even having a test suite, so...
04:16:02 <osa1> merijn: heh. but stackage build bot would run your test-suite if you had one, right?
04:16:09 <merijn> I suppose it not having a test suite means it trivially passes all of it's test suites, but the guarantees of that aren't particularly strong ;)
04:16:12 <merijn> osa1: No clue
04:16:38 <osa1> I'm wondering if stackage is giving the guarantee that all the packages in a release pass all the tests when built with that stackage version.
04:18:23 <lambdamu> osa1: In general yes but for some packages the tests are disabled, https://github.com/fpco/stackage/blob/0ad2dd610226f49565a15c0fcbc3d7991e64c508/build-constraints.yaml#L3426
04:19:27 <lambdamu> osa1: Besides skipped-tests there is also expected-test-failures with another bunch of packages
04:20:54 <quick_dudley> I have a test suite with one test on my hackage package, but there are many many ways I could accidentally cause it to fail.
04:22:32 <osa1> lambdamu: thanks.. that's quite a lot of packages. I'm guessing that the problem is with building test dependencies rather than running them or the tests being failed
04:24:14 <ongy> shouldn't stack make it easy to build the test dependencies?
04:24:36 <osa1> unless your test dependencies aren't on stackage, sure
04:25:25 <merijn> Hell, I've had tests that didn't even have dependencies on Hackage :p
04:25:46 <ongy> merijn is evil
04:26:07 <lambdamu> osa1: the test suites for packages in skipped-tests aren't even built the test suites for the packages in expected-test-failures are run but failure has no consequence, afaict
04:26:21 <quick_dudley> If your test dependencies aren't on stackage you can add them to extra-deps in stack.yaml
04:27:38 <quick_dudley> or add them to packages in stack.yaml with "extra-dep: true"
04:28:22 <merijn> ongy: Takes a while for patches to get merged upstream
04:28:34 <merijn> ongy: If your tests rely on such a patch you can't depend on a hackage version
04:29:26 <ongy> ah. I don't think i had that yet for just the tests
04:29:40 <ongy> may be because I suck at writing tests and mostly avoid it.... please help
04:29:42 <merijn> I think technically it was benchmarks, rather than tests for me
04:29:54 <merijn> But I can imagine the same occasionally applies to tests
04:38:14 * hackagebot ForestStructures 0.0.0.2 – Tree- and forest structures – https://hackage.haskell.org/package/ForestStructures
04:58:28 * hackagebot hopenssl 2.2.1 – FFI Bindings to OpenSSL's EVP Digest Interface – https://hackage.haskell.org/package/hopenssl
05:10:37 * hackagebot integer-logarithms 1.0.2 – Integer logarithms. – https://hackage.haskell.org/package/integer-logarithms
05:26:18 <AWizzArd> Do we have users of https://github.com/transient-haskell/transient here?
05:27:06 <Gurkenglas> Given a memory profile such as the example image here https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/profiling.html#profiling-memory-usage , how am I to interpret it? Is each column, for its time, a probability distribution of the answer to the question "If I choose a random heap location used by ghc, what's the thunk I'll hit there?"? Like, "(119) testspheres/Main.CAF" says that the module 
05:27:06 <Gurkenglas> Main.CAF defines the identifier testspheres, this was the 119th definition to become known to the profiler, and it stands for the thunk that is gotten by unpacking testsphere's definition?
05:28:06 * hackagebot BiobaseBlast 0.2.0.0 – BLAST-related tools – https://hackage.haskell.org/package/BiobaseBlast
05:28:29 <Gurkenglas> (And what should I do in order to not need to ask this kind of question?)
05:31:23 <Gurkenglas> Is there something that'll show a more detailed memory profile for one point in time? Like, a thunk forest of all the current top-level thunks, perhaps colored as the previous image, in order to make it obvious what should have been more strict
05:35:20 <zomg> I finally solved my thread and disappearing exception issue https://gist.github.com/jhartikainen/87da759c3f75a85ac3612ff80133c56f
05:35:31 <zomg> Turns out it was because of GHCi afterall :P
05:36:12 <zomg> I wrote a simple program which just did the two commands in the bottom of that gist - error disappears... but then I realized the main thread just closes right away and added a getLine to just hold it... and lookie there, there's the exception
05:41:12 <trigone> what is the hackagebot? automated messenger to rely the recently added/modified packages on hackage?
05:41:33 <merijn> trigone: Yes
05:41:59 <trigone> merijn: kay thanks! one single message per updating?
05:42:16 <merijn> trigone: It batches them in some cases, I think
05:42:16 <ClaudiusMaximus> if there are lots at once it batches them
05:42:26 <merijn> I'm looking at amazonka here >.>
05:42:55 <trigone> merijn: ok
05:43:18 <trigone> you mean lots of different packages or updates of the same package?
05:43:56 <merijn> trigone: The guy behind amazonka split it into like 20 packages and always updates all at the same time, spamming the channel :p
05:44:29 <trigone> merijn: on purpose? what's amazonka?
05:44:55 <merijn> trigone: amazon API wrappers
05:45:08 <quchen> edwardk: DA is eating the world, huh?
05:45:14 <merijn> on purpose? probably not, but I don't think the package really deserve to be so finegrained
05:45:19 <quchen> edwardk: Did they offer you a contract with lots of black bars as well? :-D
05:45:48 <trigone> merijn: i just checked. i'd say more than 20
05:46:48 * hackagebot hsyslog 5.0.1 – FFI interface to syslog(3) from POSIX.1-2001 – https://hackage.haskell.org/package/hsyslog
06:17:23 <catsup> is there a version of >=> that throws away the argument like >> ?
06:18:02 <merijn> catsup: heh? What would that look like?
06:18:54 <sproingie> >=> is intended for composition, one that threw away the left wouldn't be all that useful
06:20:16 <catsup> it's useful in the same way as >>
06:20:25 <sproingie> all i can think of would be foo >=> \_ -> bar
06:20:43 <sproingie> i suppose one could define it
06:20:46 <catsup> yeah i normally use const bar
06:20:54 <catsup> (*=>) :: Monad m => (a -> m b) -> m c -> a -> m c
06:20:54 <catsup> a *=> b = a >=> const b
06:21:33 <sproingie> (not even gonna say what i'd call that operator)
06:22:58 <quick_dudley> foo >=> \_ -> bar == (bar =<<) . foo
06:26:13 <catsup> i feel you can't define it yourself because the code will be incomprehensible to others
06:26:34 <catsup> seems like a gap in the api tho :/
06:26:40 <merijn> what's wrong with just >=> and const?
06:27:36 <catsup> merijn: seems to me it's as "wrong" as eliminating >> and making do with const
06:33:38 * hackagebot church-pair 0.1.0.1 – Church encoded pair – https://hackage.haskell.org/package/church-pair
06:35:33 <makalu> if I build a shared library with cabal and install it into a prefix, the path will be prefix/lib/x86_64-linux-ghc-8.0.1/foo.so. Am I not supposed to use shared libraries built with one version of GHC with newer versions of GHC?
06:36:44 <ClaudiusMaximus> makalu: there is no stable abi between ghc versions, so it's all version-specific
06:36:56 <sproingie> version compatibility is very dicey.  assume it doesn't exist.
06:37:36 <sproingie> could probably get away with 0.0.x differences, but no guarantees
06:38:13 <makalu> ok thanks
06:38:44 <makalu> so it's assumed that noone will create a closed source commercial haskell library :)?
06:38:56 <sproingie> it's assumed they'll recompile it
06:39:34 <sproingie> most haskell libs are static
06:40:40 * hackagebot rattletrap 2.3.1 – Parse and generate Rocket League replays. – https://hackage.haskell.org/package/rattletrap
06:40:58 <ventonegro> makalu: Given that GMP is linked statically on Windows, I don't think that's a use case people would worry about
06:41:29 <ventonegro> The commercial binary thing, I mean
06:41:31 <makalu> ventonegro: wait, are you saying that if I compile a binary on windows, GMP is statically linked to the RTS?
06:41:33 <sproingie> even commercial libs usually distribute source to licensees
06:41:45 <sproingie> makalu: yes, but GMP no longer has a viral license
06:42:20 <ventonegro> sproingie: Oh? Do you have a handy source for that around?
06:42:40 <makalu> it's lgpl which means I can use it in commercial projects only if I link it dynamically?
06:42:41 <sproingie> check the gmp homepage
06:42:50 <ventonegro> makalu: exactly
06:42:54 <dhtns2> Code golf challenge: f :: [Int] -> [[Int]], where the outputs of f are copies of its input with the first element negated, then the second, then the third etc.
06:42:55 <sproingie> i was just recently made aware of that myself
06:43:47 <dhtns2> So, f [1,2,3] = [[-1,2,3], [1,-2,3], [1,2,-3]]
06:44:00 <ventonegro> Nope, still LGPL
06:44:14 <sproingie> it used to be strictly GPL, that was the viral license
06:44:18 <sproingie> LGPL isn't viral
06:44:28 <ventonegro> sproingie: true
06:44:58 <ventonegro> sproingie: But you still cannot link statically and not open up your side
06:45:09 <sproingie> not true, LGPL doesn't care how it's linked
06:45:20 <ventonegro> it does
06:45:25 <merijn> sproingie: It does
06:45:29 <Clint> it cares that you can replace the free part
06:45:31 <ClaudiusMaximus> i think the intent of the LGPL is to allow that part of the code to be replaced, so you could provide .o files to allow relinking
06:45:34 <sproingie> whatever.  there's a reason they changed the license, i suggest you read it
06:45:46 <merijn> Clint: non-free part, but yes
06:45:50 <ventonegro> sproingie: maybe you should read it
06:45:56 <merijn> Clint: Well, both I suppose
06:46:03 <Clint> merijn: yeah, depends how you look at it
06:46:34 <sproingie> only offender left in this area is readline and we have libedit to replace that
06:46:40 <mniip> :t map (Control.Comonad.Store.peeks negate) . holesOf traverse
06:46:42 <lambdabot> (Traversable t, Num s) => t s -> [t s]
06:46:52 <vektorweg1>  ghc: panic! (the 'impossible' happened)
06:46:53 <vektorweg1> lol
06:47:26 <sm> g'day all
06:47:29 <merijn> I wonder if you get away with static linking LGPL code if you also distribute a non-static version
06:47:50 <romildo> It seems to be more than one library for date representation in Haskell. What is the recommended one?
06:48:09 <ventonegro> merijn: probably
06:48:32 <sm> when I do readProcessWithExitCode "less" [] input, less detects non-interactivity somehow and dumps all output at once. How can I stop that ?
06:48:38 <mniip> dhtns2, ^
06:48:41 <dhtns2> mniip: impressive
06:49:13 <mniip> unortunately lambdabot can't import that module
06:50:08 <romildo> Is there a type for date representation in the Haskell standard library?
06:50:28 <sm> I think it's inheriting stdin/stdout from the parent console session, so what makes it act non-interactively ?
06:50:58 <mniip> sm, it probably checks isatty
06:51:02 <sproingie> less is detecting a tty, and when it doesn't have one, it behaves differently
06:51:06 <mniip> you need to create a pty pair
06:51:26 <lyxia> romildo: the time library has one
06:51:26 <mniip> or use the 'script' shell utility if you can't bother
06:51:39 <cocreature> sm: it’s not inhereting stdin/stdout
06:51:50 <cocreature> sm: so isatty fails
06:52:19 <mniip> readProcessWithExitCode sounds a lot like popen
06:52:20 <sm> ah is it not ? It looked like readProcessWithExitCode what setting Inherit
06:52:22 <mniip> which means it creates a pipe
06:52:39 <pierrot> Hi! I upgraded Debian to Debian 9 but I'm still getting the same error when I try to install ghc-vis
06:52:44 <pierrot> http://sprunge.us/YJQZ
06:52:48 <mniip> sm, no it's doing CreatePipe
06:52:51 <cocreature> sm: readProcessWithExitCode calls readCreateProcessWithExitCode which sets CreatePipe
06:52:57 <cocreature> sm: https://hackage.haskell.org/package/process-1.6.0.0/docs/src/System-Process.html#readProcessWithExitCode
06:53:22 <sm> you are right, thanks!
06:54:13 <cocreature> sm: but for less readProcessWithExitCode sounds kind of wrong anyway. why do you want the stdout and stderr of less?
06:54:27 <sm> I don't really
06:54:39 <sm> just want to provide it some stdin
06:55:25 <mniip> and want it to output to the tty?
06:55:27 <cocreature> hm that’s probably kind of tricky since you also don’t want to redirect stdin so users can still navigate
06:55:43 <mniip> cocreature, less reads from stdout
06:56:01 <cocreature> mniip: it reads input from stdout? wtf?
06:56:02 <Clint> pierrot: why is it using old glib and cairo?
06:56:09 <mniip> if it's a tty - yes
06:56:17 <cocreature> huh
06:56:27 <mniip> think about it
06:56:30 <mniip> foobar | less
06:56:38 <mniip> stdin is a pipe yet you can still navigate
06:56:47 <cocreature> oh right
06:56:51 <sproingie> i thought it directly opened the tty
06:56:53 <cocreature> I never realized that
06:57:27 <mniip> hmm, maybe
06:57:55 <mniip> it does do a TCGETS on stdout
06:58:03 * sm has blundered into deep waters
06:58:09 <mniip> and then opens the pgroup's ctty
06:58:11 <ventonegro> BTW when I asked about this on Twitter Gabriel Gonzalez replied with a link to some instructions on how to link GMP dynamically on Windows https://twitter.com/asandroq/status/712240516201578496
06:58:20 <mniip> sm, just inherit the stdout
06:58:27 <sm> great, I'll try it
06:58:38 <sproingie> right, it grabs the terminal of stdout
06:59:44 <pierrot> Clint: I don't know
07:01:30 <Clint> pierrot: looks like ghc-vis needs to be updated for newer base too
07:04:18 <sm> um, how would I do that without having my own custom version of readCreateProcess ? It forces CreatePipe
07:05:29 <sproingie> you won't be able to use readCreateProcess for this
07:05:30 <merijn> sm: Why not call createProcess yourself?
07:06:18 <sproingie> you don't want the output piling up if you're going to discard it anyway
07:06:21 <sm> you're right, that's easier. Thanks
07:11:10 <pierrot> Clint: so there si nothing I can do right?
07:11:14 <pierrot> is*
07:12:39 * shapr hugs pierrot
07:12:46 <shapr> frustration is hard
07:13:03 <pierrot> lol
07:13:05 <pierrot> yes, it is
07:22:03 <sm> yay, I can run an interactive pager like this: https://gist.github.com/simonmichael/929f7434a4db2216382d72c8a1345ead
07:22:40 <sm> in ghci, but not when compiled, it shows no output at first, until I press a few keys. Something to do with stdout buffering mode  ? Or -threaded ?
07:23:58 <shapr> pierrot: How do you release frustration so you can go back to doing hard things?
07:25:03 <monad_cat> buying my ICFP tickets, should I get a CUFP talks tickets? None have been published yet
07:25:31 <sproingie> sm: ghci is fighting your subprocess for input.  it's not the most polite repl around that way.
07:25:33 <fosskers> Hm, I can't seem to get `-fllvm` to work on GHC 8.0.2. Must my system llvm be _exactly_ 3.7?
07:26:03 <sproingie> i'd hope not
07:26:29 <glguy> fosskers: you need the correct version of llvm
07:26:35 <sm> ah, fair enough
07:27:26 <sm> though.. I should see output from less even with no input, and input to less does seem to work normally
07:27:48 <sm> well not a big deal
07:28:35 <zentrified> hey guys, I am having the strangest problem with independentscreens no longer displaying a unique workspace on each monitor (i have three monitors)
07:28:45 <sm> hledger's help command is getting smarter. Thanks all
07:28:55 <zentrified> very much like xinerema has been enabled (but it hasn't)
07:29:16 <zentrified> anyone experienced something similar lately ?
07:29:41 <fosskers> glguy, thought so. the GHC user guide claims: "Currently LLVM 2.8 and later are supported."
07:29:54 <fosskers> 3.5 and 3.9 are available on my system, but not 3.7
07:30:00 <sproingie> sm: are you invoking it in ghci with :main or calling it directly?  it might fight you less using :main
07:30:05 <sproingie> operative word "might"
07:30:15 <fosskers> I wonder if it'll update for GHC 8.2
07:31:44 <merijn> fosskers: Unlikely
07:32:10 <merijn> fosskers: There's some work on using LLVM bytecode which would improve the portability across LLVM versions
07:32:22 <merijn> fosskers: But until that is done, I wouldn't expect the LLVM restriction to change
07:36:34 <fosskers> merijn, alright I'll try to figure out how to get 3.7 on here
07:36:45 <fosskers> seems like every version _but_ 3.7 is available, haha
07:38:15 <mniip> can anyone explain what "Free -" is?
07:38:48 <mniip> I've hit the HoTT section on free monoids, and I understand why [] is a free monoid (and I understand free groups too) but the definition they give goes way over my head
07:39:11 <dolio> What definition do they give?
07:40:18 <sm> sproingie: yes I was using :main
07:41:05 <mniip> forall monoids M, hom_monoid (List(A), M) \equiv A -> M
07:41:44 <dolio> So, that is the adjoint definition of freeness.
07:42:29 <dolio> You have a category of algebraic things and homomorphisms between them.
07:42:43 <mniip> - <- it
07:42:45 <mniip> o <- my head
07:43:05 <dolio> And a forgetful functor from the algebraic things back to sets, say.
07:43:14 <dolio> That forgets the algebraic structure.
07:43:15 <mniip> so far so good
07:44:07 <dolio> And the free algebraic thing over a set A is created by the left adjoint to that forgetful functor, which means that that equivalence holds.
07:44:14 <dolio> Which probably doesn't help you.
07:44:29 <dolio> But, the idea is kind of like this...
07:44:46 <mniip> I could dig up the formal definition of adjoin
07:44:54 <mniip> but I have no intuition for it
07:45:11 <dolio> To give a homomorphism from Free A to M, it suffices to specify what happens to values of A (how to map them into M).
07:46:40 <dolio> Everything else is determined, because the only other structure of Free A, besides the elements of A being injectable into it, is stuff defined by the algebraic theory, which has to map into corresponding operations in M.
07:46:49 <mniip> right
07:47:14 <mniip> hmm
07:47:15 <dolio> And also, you can actually go the other direction, too.
07:47:34 <mniip> and this extends to any concrete category?
07:47:46 <dolio> But, the only interesting content of a List A => M homomorphism is what you do with the elements.
07:48:24 <dolio> You can do this for algebraic things.
07:48:33 <dolio> Free monoid over a set.
07:48:42 <dolio> Free group over a monoid.
07:49:17 <dolio> I mean, there's a lot of stuff you can do it with.
07:49:20 <Clint> pierrot: you can file bugs/issues
07:49:20 <dolio> Free monad over a functor.
07:51:23 <mpickering> How should I benchmark data types which contain "Any", there isn't an NFData instance for Any but it is lifted so can be a thunk so I should force it somehow?
07:51:55 <mniip> hmm
07:52:40 <mniip> mpickering, from a type perspective best you can do is seq
07:53:00 <mniip> Any is akin to exists a. a
07:53:48 <Philonous> How can the text package work with with ghcjs, when it actually uses primitive memory operations and even calls into c ?
07:54:08 <sproingie> might be a port
07:54:43 <mniip> dolio, alright thanks
08:03:18 <jonge> hey there. when i start a sub process in haskell (within its own group), and then try to hReadLine on its stdout handle, i get early EOFs. but: this only happens when i run my haskell app within a docker container. if i run it natively on my linux host, it works! what can be the problem here?
08:04:59 <ongy> are you sure the child doesn't die in the container?
08:05:41 <jonge> ongy: if i launch exactly the same command by hand in a shell in that container, then it works perfectly.
08:06:00 <fosskers> Odd that `Data.List.NonEmpty` doesn't expose a foldl1'
08:06:24 <fosskers> List and Vector certainly do
08:07:11 * lyxia notifies CPS that programmers are letting children die in containers.
08:07:49 <sproingie> what do continuations have to do with this? ;p
08:07:58 <romildo> How can I get the integer and fractional parts of a double value x? Should I use (truncate x) for the integer part, and (x - truncate x) for the fractional part? Or is a better way of doing it?
08:08:10 <Axman6> my they were being starved of resources so they needed to be aborted
08:08:25 <Axman6> :t decodeFloat
08:08:26 <lambdabot> RealFloat a => a -> (Integer, Int)
08:08:37 <Axman6> hmm, that may not be what you want
08:08:45 <Axman6> :t properFraction
08:08:46 <lambdabot> (Integral b, RealFrac a) => a -> (b, a)
08:08:55 <Axman6> > properFraction pi
08:08:57 <lambdabot>  (3,0.14159265358979312)
08:09:02 <sproingie> close enough
08:12:44 <romildo> > properFraction 5.6
08:12:46 <lambdabot>  (5,0.5999999999999996)
08:12:56 <jonge> ongy i just checked it. the sub process is running for sure, but as soon as i read from it i get an eof
08:13:25 <ongy> that's interesting. Are you trying to spawn it into the container from the outside?
08:14:39 <romildo> Axman6, sproingie, is there a function that would give (5, 0.6) for the argument 5.6?
08:14:58 <ongy> > 5.6
08:15:00 <Axman6> no
08:15:00 <lambdabot>  5.6
08:15:17 <Axman6> because that's not how floating point works
08:15:31 <Axman6> > 1/3 :: Double
08:15:33 <jonge> ongy my haskell app is basically the entry point of the container. it launches a few sub processes and listens to them. which works without docker, but immediately breaks on premature EOFs
08:15:33 <lambdabot>  0.3333333333333333
08:15:39 <Axman6> > 1+1/3 :: Double
08:15:41 <lambdabot>  1.3333333333333333
08:15:53 <Axman6> > properFraction (1+1/3 :: Double)
08:15:55 <lambdabot>  (1,0.33333333333333326)
08:15:57 <jonge> ongy i do not do anything from outside apart starting the docker container itself.
08:16:26 <sproingie> what's on stderr?
08:16:59 <sproingie> also, are you checking the exit code?
08:19:38 <byorgey> romildo: yes, there is.
08:19:46 <byorgey> > properFraction (5.6 :: Rational)
08:19:47 <lambdabot>  (5,3 % 5)
08:21:02 <byorgey> romildo: if you really care about the difference between 0.6 and 0.599999999999999996 then you should be using Rational, not Double.
08:21:33 <romildo> Axman6, I am parsing an Excel spreadsheet with the help of the xlsx package. Internally to the spreadsheet dates are stored as doubles. For what I could understand, the integer part of the float represents the days from 30 December 1899, and the fractional part is a fraction of a day displacement from midnight.
08:21:55 <romildo> byorgey, see above.
08:21:59 <dmj`> Philonous: think ghcjs-shims might provide that
08:22:11 <jonge> sproingie: i am checking the exit code with `getProcessExitCode` and it returns nothing, which means that the program did not exit yet.
08:22:31 <jonge> afterward i need to catch the exception to see what the exit code is, but i am not doing that yet. 
08:22:42 <romildo> So I need to build a date from the integer and fractional parts of a double value.
08:22:54 <byorgey> romildo: oh, well in that case, who cares about the difference between 0.6 and 0.5999999999999996?  It is like a small fraction of a second difference.
08:23:18 <byorgey> just take the fractional part, multiply it by the number of seconds in a day or whatever, and then call 'round' to get an integer number of seconds.
08:23:35 <Eduard_Munteanu> (And if you do care, why a double in the first place?)
08:23:38 <zomg> when there's a strange formatting issue of course it's Excel :)
08:24:00 <zomg> a friend has built possibly one of the best compatible xls parsers and he tells me the file format is totally nuts...
08:24:31 <romildo> Eduard_Munteanu, because a double is what the xlsx package offers me. It is stored like that in the spreadsheet.
08:27:56 <sproingie> parsing .xls or .doc files is insanity.  .xlsx and .docx are a little more reasonable
08:28:54 <romildo> Also I am not sure what to use for representing dates in my application: Data.Dates.DateTime from the dates package, or Data.Time.Clock.UTCTime from the time package. What comments on that?
08:29:26 <romildo> Any comments on the options for date representation?
08:31:06 <zomg> sproingie: yeah the -x formats probably have less legacy baggage :)
08:41:19 <sproingie> zomg: i'm told there's bits in the legacy formats that no one remembers what they're for, the docs were lost long ago
08:47:59 <juanpaucar> Does somebody know how postgressimple works with SQL types
08:48:14 <juanpaucar> those custom types that are pretty much sum types in postgres
08:48:21 <juanpaucar> using CREATE TYPE ...
08:50:30 <orion> (And in postgres it's a massive PITA to add or remove a value from a user-defined enum)
08:52:15 <juanpaucar> Sorry, i forgot to establish my question, how would fromRow and toRow instances be defined?
08:58:26 <orion> I think you want FromField, not FromRow. Here is an example for Bool: https://www.stackage.org/haddock/lts-8.21/postgresql-simple-0.5.3.0/src/Database.PostgreSQL.Simple.FromField.html#line-293
09:00:46 <ddk> hello all ...!
09:01:56 <lep_> hello
09:06:13 <ddk> can any one help me with grenade library
09:06:30 <juanpaucar> orion: thanks, i'm checking it
09:09:04 <jle`> ddk: if you have a question, best to just ask it :)
09:20:57 <ddk> is there someone who is familiar with grenade library ...
09:21:50 <srhb> ddk: Ask your question, the channel will probably be able to help :)
09:21:59 <srhb> ddk: Asking to ask is usually not a good approach.
09:23:32 <ddk> actually I am a newbie in ML and want to use grenade ...someone familiar with it can direct me to resource
09:25:22 <Axman6> ML?
09:25:38 <ddk> Axman6: yes ...
09:25:39 <Axman6> oh machine learning, not the language!
09:26:22 <ddk> I have to teach a network to produce xor operations using grenade
09:26:42 <ddk> I need to know how to start with haskell
09:28:26 <sproingie> can't say that i recommend learning the subject and the language at the same time
09:29:57 <ddk> I m familiar with Haskell
09:32:32 <hpc> Axman6: i make that mistake all the time
09:35:18 <jle`> ddk: oh boy that's a lot of things to learn at the same time
09:35:22 <jle`> learning ML and Haskell and Grenade
09:48:02 <ddk> jle`: I know haskell
10:00:59 <crobbins> > properFraction $ 56 % 100
10:01:01 <lambdabot>  (0,14 % 25)
10:02:14 <drugoaxl72> ciao
10:02:21 <drugoaxl72> !list
10:02:54 <fresheyeball> jyp[m]: hey there
10:03:03 <fresheyeball> are you Jean-Philippe?
10:08:00 <ddk> I have to teach a network to produce xor operations using grenade can someone help me to start
10:13:11 <husel> Hello, I was wondering if anyone could point me in the right direction for exercise 4.7 here? https://pastebin.com/zWCK6r3a I'm guessing the tuple format isn't consistent between the three functions returning Right, but I'm not sure how to unify them
10:16:20 <srhb> husel: Perhaps they mean for you to nest several Eithers
10:16:32 <koala_man> seems like a weird exercise
10:16:39 <srhb> Agreed
10:20:02 <husel> srhb: You mean something like instead of Right (a, b, c), Right(a, Right (b, c)) ?
10:20:28 <srhb> husel: Or Right (Left (a,b))
10:21:00 <srhb> husel: (which actually has the two-tuple in there)
10:21:01 <husel> Ah, so the left is a value and the right is another either
10:21:15 <srhb> husel: Something like that.
10:21:22 <husel> Thanks, I'll give it a go :)
10:21:49 <crobbins> i wish there was a hoogle for data structures
10:22:16 <srhb> dhoogle, where types are terms, too!
10:22:21 <koala_man> husel: if it seems weird and awkwards, it's because it is. I don't know why they insist on Either here
10:22:53 <srhb> Probably just some type gymnastics without any real point.
10:23:04 <srhb> It's not a terrible exercise, it's just not motivated beyond that.
10:23:05 <ReinH> husel: where is that problem from?
10:23:18 <husel> koala_man: Okay haha, I guess I need another function at the end to take the Eithers and give back a raw value too
10:23:26 <ReinH> Because it doesn't make any sense.
10:23:35 <husel> ReinH: YetAnotherHaskellTutorial pdf
10:23:37 <srhb> husel: You won't be able to do that (without going back to the type you already had
10:23:49 <ReinH> husel: The problem as stated has no solution
10:23:58 <ReinH> It's impossible to solve.
10:24:30 <husel> ReinH: Because of the Either?
10:24:35 <ReinH> Yes.
10:24:45 <ReinH> Either doesn't have enough members to represent all possible values
10:24:58 <srhb> Sure it does.
10:25:20 <ReinH> Not as written, no.
10:25:37 <srhb> Not as read, I think. ;-P
10:26:08 <koala_man> either either an element or a two tuple or either a three or four tuple
10:26:11 <ReinH> If the intention is nested eithers then it's poorly written.
10:26:32 <koala_man> makes as little sense in English as in Haskell
10:27:10 <srhb> I can only imagine the intention is to teach how to squeeze four things into two holes.
10:27:25 <srhb> Again, poorly motivated, but not senseless.
10:27:31 <ReinH> I was going to mention the pigeon hole problem, actually.
10:27:51 <ReinH> I also don't see how it has much value as an exercise
10:27:55 * srhb shrugs
10:28:51 <bollu> I'm conflicted, do I import Arrow for (&&&)
10:29:01 <bollu> (\p -> (p, f p)) is what I want
10:29:05 <bollu> but.. using Arrow for this seems like abuse
10:29:09 <bollu> >_<
10:29:21 <bollu> any ideas?
10:29:32 <ReinH> Then write \p -> (p, f p)
10:29:49 <bollu> yes, but creating a lambda always feels icky
10:30:00 <bollu> (id &&& f) looks so much nicer, no?
10:30:03 <ReinH> Well, which is the least of the two icky feelings?
10:30:07 <geekosaur> not to me...
10:30:07 <bollu> I can't tell
10:30:10 <ReinH> writing a lambda or importing Control.Arrow?
10:30:11 <bollu> which was why I came here
10:30:16 <ReinH> I like lambdas.
10:30:34 <byorgey> #haskell can't tell you how icky you feel.  Only you can decide.
10:30:36 * shapr fires an arrow at ReinH
10:30:39 <bollu> :) 
10:30:39 <husel> I guess this is the solution: https://pastebin.com/T4JJ64ne Interesting type signature haha
10:30:41 <shapr> I like arrows.
10:31:03 <bollu> hm, I'll keep it as a lambda :) 
10:31:09 <ReinH> They're basically asking you to show that 4 = 1 + 1 + 1 + 1
10:31:18 <bollu> I was hoping for some sort of majority consensus 
10:31:45 <shapr> it's hard to find consensus in a group of coders.
10:34:18 <ReinH> I think I'd prefer tag f p = (f p, p), since (,) is functorial in its second argument.
10:34:45 <ReinH> and (a,b) is commonly used to mean "b's tagged with a's"
10:35:38 <byorgey> ReinH++
10:35:50 <crobbins> also, the arrow solution requires more cognitive load than the lambda one
10:36:02 <crobbins> the lambda version is arguably far more readable
10:36:48 <ReinH> byorgey: o/
10:37:07 <byorgey> crobbins: how much cognitive load it requires depends a lot on one's prior experience.
10:37:44 <crobbins> right, and the average programmer, haskell or otherwise, rarely deals with arrows
10:38:11 <byorgey> for me I think (id &&& f) actually causes less cognitive load, because I am already very familiar with the idiom, and it involves fewer variable names to process
10:40:14 <crobbins> byorgey: i guess if the code already made heavy use of Control.Arrow, you could make the argument. but if this is the only use case, it's probably overkill
10:40:17 <shapr> I read the arrows paper several times in a row, it's burned into my memory.
10:41:42 <ReinH> It's like a catechism for shapr
10:49:33 <mniip> I've stumbled upon "FORMAL DERIVATION OF A PATTERN MATCHING ALGORITHM" by Bird et al. Does anyone have any idea where they borrowed the notation from?
10:50:30 <mniip> the notation is the craziest I've ever seen yet they say "we do assume some familiarity with the basic ideas of functional programming." as if it was a common notation
10:50:40 <byorgey> mniip: do you have a link to a PDF?
10:50:48 <mniip> http://ac.els-cdn.com/0167642389900361/1-s2.0-0167642389900361-main.pdf?_tid=edca13c0-633b-11e7-9027-00000aacb360&acdnat=1499449650_40cc0b967d35d84b1b30a517b65cb21a
10:51:19 <mniip> you'll have to click a button - can't get a direct link...
10:51:34 <byorgey> oh, this is squiggol, aka Bird-Meertens formalism
10:52:39 <byorgey> see www.cs.ox.ac.uk/jeremy.gibbons/publications/nzfpdc-squiggol.ps.gz
10:53:22 <ddk> will somebody can help me a little for starting with grenade
10:53:35 <byorgey> mniip: the notation can be translated pretty directly into Haskell, you just have to learn the translations of all the different symbols
10:53:42 <mniip> I figure
10:53:47 <mniip> I'm slightly reminded of APL...
10:54:22 <ddk> its urgent for me ....
10:55:00 <mniip> byorgey, I'm trying to figure out if an algorithm I've devised is isomorphic to this one...
10:55:29 <mniip> it looks like it might just be
10:56:48 <byorgey> mniip: sounds fun, good luck!
11:02:52 * hackagebot servant-generic 0.1.0.0 – Specify Servant APIs with records. – https://hackage.haskell.org/package/servant-generic
11:02:52 * hackagebot BiobaseNewick 0.0.0.2 – Newick file format parser. – https://hackage.haskell.org/package/BiobaseNewick
11:05:28 <ReinH> ddk: no one can help you until you ask your question. Once you ask it, anyone who can help you might.
11:06:01 <ddk> well I have asked it two times ....again now >>
11:06:15 <ReinH> You haven't asked it?
11:06:33 <ddk> I have to teach a network to produce xor boolean operation using grenade
11:07:06 <ddk> earlier I asked but no one replied
11:07:16 <ReinH> ddk: you said you need to know how to start with haskell and then you said you know haskell
11:07:26 <ReinH> you never asked a concrete question about your problem that could be answered
11:07:42 <ReinH> And until you ask it, no one can answer it
11:07:52 <ReinH> But if you want to argue about this, we can do that instead of trying to help you.
11:08:08 <ddk> ohh sorry 
11:08:34 <ddk> actually I have to write this .. I ahve to start with ML
11:08:53 <ddk> but now I have posted my concrete question
11:09:16 <ReinH> You have?
11:09:20 <catsup> how can i find out the specific type of an exception i caught with SomeException?
11:09:29 <ReinH> ddk: I don't see it.
11:09:46 <catsup> more reliably than searching the text of it on google
11:09:47 <ddk> I have to teach a network to produce xor boolean operation using grenade
11:09:49 <monochrom> catsup: You may like http://www.vex.net/~trebla/haskell/exception-tutorial.xhtml#supertyping
11:09:54 <ReinH> ddk: that isn't even a question
11:10:08 <ReinH> and it certainly isn't concrete enough to have any answers
11:10:15 <catsup> monochrom: does it answer my question tho?
11:10:20 <merijn> catsup: Simon Marlow's paper is really good at explaining the neat things you can do with SomeException
11:10:21 <monochrom> I think yes.
11:10:26 <ReinH> ddk: Where specifically are you having trouble doing that? What have you tried so far?
11:10:34 <catsup> i don't want to use SomeException, i want to be catching one specific exception, i just don't know what its name is
11:10:49 <ddk> ReinH: I am new to ML
11:10:53 <merijn> catsup: What do you mean "I don't know what it's name is"?
11:10:59 <ReinH> ddk: you will find that the quality of answers you receive will be in proportion to the quality of question you ask
11:11:12 <catsup> merijn: I don't know what the specific type is
11:11:16 <ReinH> This is not a ML channel. I'm sure there are other resources that can help you learn ML.
11:11:28 <merijn> catsup: Well, then you're boned until you find out
11:11:35 <ReinH> If you have a specific question about using Haskell or using the grenade library, perhaps someone can help you with that.
11:11:35 <monochrom> OK great, today people ask and answer questions for the clear objective of arguing.
11:11:37 <catsup> i know what the error string is
11:11:40 <ddk> I got the basic concept of how it is done in ML i.e. how to teach in ML
11:12:03 <merijn> catsup: You can try googling the error string and find out that way
11:12:07 <ReinH> monochrom: Oh, it must be a day that ends in 'y'.
11:12:09 <catsup> Network.Socket.bind: resource busy (Address already in use)
11:12:15 <merijn> catsup: Ah
11:12:23 <merijn> catsup: Probably IOError (or whatever it's called)
11:12:35 <merijn> IOException, even
11:12:47 <ReinH> ddk: Ok, well, once you have a question that's relevant for this channel, go ahead and ask it.
11:12:48 <ddk> but I am having problem to understand grenade library to use it for solving my problem of xor
11:12:56 <lyxia> catsup: you can catch the exception as SomeException and print the underlying type
11:13:06 <catsup> lyxia: how?
11:13:07 <ReinH> Yes, you've mentioned that. You still haven't told us what specific problem you are having.
11:13:09 <monochrom> which is what my link shows you
11:13:38 <monochrom> But no, five minutes of reading my article can be saved by 15 minutes of arguing with people on IRC.
11:13:48 <ddk> ReinH: I am not getting how to start or any reading resourse 
11:14:00 <catsup> ah, it's just `typeOf e`
11:14:02 <ReinH> ddk: This isn't a channel for teaching you how to do ML.
11:14:08 <catsup> monochrom: you didn't tell me whether it answered the question
11:14:26 <monochrom> <monochrom> I think yes.
11:14:28 <ReinH> catsup: He literally did tell you that.
11:14:34 <catsup> oh, well i didn't see that.  my bad
11:15:24 <ddk> I want to see some beginner level code written in Haskell with grenade .....if someone has used it then please show me path to proceed
11:15:32 <MarcelineVQ> ddk: clone this repo, grenade has an example project in it https://github.com/HuwCampbell/grenade
11:15:52 <ReinH> ddk: grenade literally comes with an example.
11:16:32 <ddk> MarcelineVQ: I cloned but the example is for higher level people I think ..the experts
11:16:35 <ReinH> monochrom: I've noticed a strong correlation between people who believe that every problem is someone else's fault and people who are not good at solving problems.
11:16:53 <MarcelineVQ> ddk: I see, but that's as simple as grenade gets
11:16:55 <ddk> ReinH: I can't understand
11:17:17 <monochrom> They really need to go get an MBA and become managers and leave programming.
11:17:35 <monochrom> Plus it is more well paid.
11:17:42 <ReinH> ddk: Then you should find some resources to learn ML. If you have specific questions about Haskell or the grenade library, rather than general questions about ML, those would be on topic here.
11:17:44 <sproingie> long as they're not managing programmers
11:18:55 <sproingie> grenade looks like some impressive type-level stuff.  the ML parts are way over my head tho.
11:19:01 <ADG> I have a folder which contains a single P\d\d\d[ABCD].hs file. I want to compile it to bin/ and 
11:19:13 <ADG> I want to use ghc 7.8.3 not the latest one?
11:19:21 <ADG> can i do that with stack?
11:19:25 <ReinH> Let me give you some examples. "I don't understand what this line in this Haskell file does?" would be an on topic question. "I need someone to teach me ML" would not be an on topic question, and indeed is not a question at all.
11:19:55 <ReinH> Ok, to be pedantic, the first one should properly be "What does this line in this Haskell file do?"
11:20:03 <ADG> as soon as I am done with one file I move it out to some "production" type folder and create a new file.. but same name scheme
11:20:08 <MarcelineVQ> ADG: yes, you choose a resolver with that ghc version, there's a list of the latest resolver per ghc version here https://www.stackage.org/
11:20:29 <ddk> I have a concrete problem to solve :: i.e. to teach a network to give outputs for XOR operations I need only a little guidance to start using grenade ....should I goto ML channel and Haskell channel people are not there for helping a newbie grenade user ...
11:20:48 <ADG> thanks MarcelineVQ
11:21:10 <sproingie> i'd suggest asking people who are familiar with grenade, which appears to be nobody here
11:21:25 <sproingie> maybe grenade isn't the appropriate thing to be using
11:22:04 <sproingie> sigh. not getting sucked into this, i have chores to do.
11:22:14 <ReinH> Well, figure out what the first step in solving that question is. If that step involves learning Haskell, ask a question about it. If it involves learning ML, go learn ML.
11:22:32 <ReinH> s/question/problem
11:22:33 <ddk> sproingie: that's what I asked at first ...that is there someone familiar with grenade  ...but someone pointed me to not to ask these questions
11:23:21 <sproingie> yeah i don't think the overall problem is about haskell, ML, or one library anymore
11:23:44 <MarcelineVQ> seems like ADG 7.8.3 might be a bit old, stack doesn't have a ghc for it for my OS, at least that's what  stack setup --resolver=lts-0.7  is telling me
11:24:16 <ADG> I'm doing Codeforces and they have that as the only haskell compiler
11:24:17 <ddk> I know the concept how to solve it in ML but I have to use grenade that's why I am asking to people who have used it .. I am familiar with Haskell
11:24:17 <ReinH> I'm running out of ways to tell you that your questions are not (yet) on topic here, so I will stop.
11:24:27 <ADG> I did made one file with 8.0.2 but then you know ...
11:24:29 <sproingie> lts-0.7 is itself pretty old
11:24:39 <monochrom> My school is still at 7.4 :)
11:24:44 <johnw> ReinH: if it keeps happening, don't worry :)
11:24:58 <ReinH> ddk: Try to come up with a question you think we can answer and then ask it. Arguing about this is wasting everyone's time, yourself included.
11:25:05 <grmp> as I understand it, in grenade, you just have to describe the network you want to use
11:25:37 <sproingie> school curricula i can see sticking to some old version
11:25:51 <ADG> Atleast they have it (your school)
11:25:58 <ReinH> I wonder what a survey of Java versions used in schools would look like.
11:26:22 <ADG> Mine uses Java 6, C++98, Ubuntu 12
11:26:35 <ADG> you can wonder if they have anything else
11:26:40 <ddk> grmp: have you used it before please let me see some code ... I want to know how to do it ..I can't get it with the provided documentation
11:27:51 <monochrom> Actually there is high chance that I will be teaching the course that uses GHC next time, and so I will be in a position to say "let's update to 8.2 already"
11:27:58 <grmp> never used it, but I don't think you need more code than on those on the readme if you just want to use it
11:28:26 <ADG> isn't there any way to just get/compile ghc 7.8.3 & just compile with it?
11:28:48 <monochrom> My school actually has Java 1.6, 1.7, and 1.8.
11:28:54 <ddk> grmp: read that many times but can't undersatnd 
11:28:55 <grmp> if you want to understand how it is implemented, it's another story, it seems beautiful
11:29:18 <ddk> grmp: no I only have to use it ...
11:30:06 <monochrom> ADG: Are you OK with 7.8.4 instead of 7.8.3?
11:30:19 <monochrom> But anyway go to https://www.haskell.org/ghc/
11:30:37 <ADG> As long it compiles on judging servers
11:30:38 <monochrom> It goes all the way back to 6.10.1 so meh
11:30:48 <ddk> ok I think nobody here is familiar with grenade or else don't have time to help me 
11:31:04 <monochrom> But you may have to think outside Stack and use GHC directly.
11:31:11 <grmp> ddk: have you read Grenade.Core.Network too?
11:31:11 <ddk> I am leaving thanks for the support community 
11:31:33 <monochrom> which in practice just means you have to use the "strip" command yourself and cp/mv the exe to ~/bin yourself.
11:32:39 <ddk> grmp: yes... but didn't get
11:33:06 <ADG> currently it just seems replacing <$> with fmap is enough for it work from 8.x to 7.8.3
11:35:36 <ReinH> ddk: I'll say again: the quality of answers is proportional to the quality of questions. If you want better "support", work on coming up with better questions.
11:35:37 <johnw> ddk: good luck
11:35:52 <ReinH> I'll also note that everyone here is an unpaid volunteer spending their free time helping people.
11:36:13 <grmp> ddk: you just have to tell something like that: type YourNetworkName = Network '[layers] '[shape]
11:36:50 <merijn> ReinH: I would've reminded myself of sunk cost fallacy way sooner before investing more time :p
11:36:56 <ReinH> merijn: well, yes.
11:37:08 <ReinH> but I'm here either way, so
11:37:08 <grmp> specify what the layers are, and how they connect (shapes)
11:37:14 <ReinH> since I'm procrastinating on doing other things
11:38:07 <grmp> ddk: that's all
11:38:20 <srhb> grmp: They're gone.
11:38:43 <grmp> :) nevermind
11:39:13 <mniip> byorgey, eh. Could be an article-worthy algorithm :p
11:39:32 <mniip> unless it is already published by bird himself
11:39:56 <grmp> grenade is one of those library (like brick or diagrams), just awesome in code and in doc
11:40:57 <HaskellLord69> Currently learning brick, the docs and examples are great.
11:43:48 <Sten`> join #haskell-it
11:44:24 <srhb> Sten`: Is that an italian channel or just a startuppy name?
11:44:56 <Sten`> the italian channel
11:45:46 <johnw> i think it was for IT professionals using Haskell :)
11:46:49 <srhb> There's a disturbing lack of standardization. I see #haskell_ru, #haskell.se, #haskell-it
11:47:02 <srhb> (obviously the middle one is right.)
11:47:12 <monochrom> /join #haskell'prime
11:47:18 <MarcelineVQ> we should write a standard
11:47:31 <srhb> Totes.
11:47:37 <MarcelineVQ> It'll be easy, we just have to all agree, what could go wrong
11:48:02 <srhb> Yeah, that's the easy step.
12:03:26 <mpickering> Is it possible to specify git dependencies in cabal files yet?
12:04:11 <hpc> that would not be a good idea
12:04:19 <srhb> mpickering: I've not heard of any plans for that, so I doubt there's a "yet"
12:04:51 <mpickering> I will add a submodule then, thanks
12:05:01 <hpc> it would make hackage impossible to mirror properly
12:05:12 <merijn> mpickering: Sounds like the kinda thing new-build should deal with Soon (TM)
12:05:29 <merijn> mpickering: new-build lets you give cabal local dependencies
12:06:28 <mpickering> It is not something I plan to put on hackage but still needs to be buildable reproducible, there is a dependency which is not on hackage 
12:06:42 <merijn> mpickering: Right, that's exactly what new-build gives you
12:07:09 <merijn> mpickering: If you can live without tools like ghc-mod/intero until my current quest to fix ghc-mod is done :p
12:07:39 <mpickering> I am using new-build already :P, it works great
12:08:00 <mpickering> but I was wondering whether there was something other than cloning the dependency into the project directory
12:08:21 <merijn> mpickering: I think there is a plan to let new-build do cloning for you, but it's not implemented yet
12:08:25 <MarcelineVQ> srhb, mpickering: I​ have heard plans for that. In fact there's a ticket about it somwhere, let's see... 
12:08:30 <wizwizwizwiz> is it possible to synchronize the GC across multiple haskell procs?
12:08:42 <MarcelineVQ> https://github.com/haskell/cabal/pull/4289
12:08:51 <merijn> mpickering: "[STRIKEOUT:There is also a stanza source-repository-package for specifying packages from an external version control.] (Not implemented.)"
12:08:52 <wizwizwizwiz> and specifically i mean anti-synchronize,... so that all but one process, for instance, could be running the GC at a given time
12:09:23 <merijn> mpickering: but as yet there isn't yet
12:09:38 <srhb> MarcelineVQ: Thanks!
12:09:39 <merijn> mpickering: I just have a makefile that takes care of cloning for me
12:09:39 <MarcelineVQ> note the mafia mention which may be useful as well
12:10:32 <mpickering> thanks all
12:10:46 <mpickering> I think adding it as a submodule is fine for now
12:11:13 <srhb> merijn: How low-tech!
12:11:51 <merijn> srhb: The rest of the repo is already C++ code so I have a makefile anyway
12:12:02 <merijn> srhb: I just wired cabal and the clones into the existing make infrastructure
12:12:36 <sproingie> wizwizwizwiz: you can call performGC explicitly, but i don't know of any way to suspend automatic GC between such calls
12:12:38 <srhb> merijn: I was mostly joking. :-) low-tech seems fine.
12:13:19 <Tuplanolla> You could suspend the entire process, sproingie...
12:13:37 <sproingie> that would tend to render it even less responsive than during a gc
12:14:15 <Tuplanolla> Whatever; requirements were met.
12:15:15 * hackagebot tweet-hs 1.0.0.0 – Command-line tool for twitter – https://hackage.haskell.org/package/tweet-hs
12:23:49 <andromeda-galaxy> Is there a Template Haskell way of making StablePtrs to (arbitrary) values that are inside a splice?
12:24:09 <andromeda-galaxy> I want to be able to do something like $$(mkAndFillCOpaqueTable hsval1 hsval2 hsval3)
12:24:35 <andromeda-galaxy> which generates a C file with statically known StablePtrs that are compiled as values - so basically no work has to happen for setup at runtime
12:27:11 <andromeda-galaxy> (the context here is that I am trying to wrap gperf in a useful way as a Template Haskell thing for generating (minimal) perfect hash tables at compile time with Haskell values... I can also just map to an index and then use that to lookup something in an Array# or something, but I was curious if this was possible)
12:29:47 <aphorisme> has anyone a good guess how to implement a substitution function for `data CoreTerm f = Var String | App f f | Abs String f` in the context of data types alla carte / compdata package ? I cannot see how to write `subst :: String -> ...` as an algebra. : /
12:30:57 <_ts_> hi, I'm new here, but would have a question immediately ;)
12:31:50 <_ts_> is there a TH-function that generates a data type from a GHC.Generics.Rep?
12:32:50 <_ts_> so in a way the reverse of generating a generic representation from a data type with TH?
12:33:51 <lyxia> _ts_: this looks feasible, but I don't know anything readily available.
12:34:54 <_ts_> lyxia, thanks, it's already good to know I'm not re-inventing the wheel ;)
12:35:23 <lyxia> _ts_: What is that for?
12:35:45 <andromeda-galaxy> _ts_: IIRC the constructors of Rep types are pretty close to the TH representation, you can probably write one without much work
12:36:14 <wizwizwizwiz> there is no method to suspend GC?
12:36:39 <geekosaur> no
12:37:03 <_ts_> lyxia: I'm working on a library for managing the evolution of a data type
12:37:30 <lyxia> some kind of migration?
12:37:40 <_ts_> yes, exactly
12:38:13 <_ts_> it is a type-level DSL in which you describe the change-log to a data type
12:38:36 <_ts_> and then that changelog is transformed into a Generic representation
12:39:11 <_ts_> so you can get a Generic representation for every revision of the data type
12:40:25 <_ts_> now, if I define a data type, then I can compare that to a revision of the type level representation
12:40:56 <_ts_> and what I'm looking for now it to just generate that data type for me ;)
12:41:38 <_ts_> andromeda-galaxy: thanks, I'll give it a go
12:41:39 <sproingie> my favorite rts option is -B: Sound the bell at the start of each (major) garbage collection.
12:43:34 <monochrom> type-level DSL...
12:43:39 <lyxia> aphorisme: cata :: (f a -> a) -> Fix f -> a   (f ~ CoreTerm) Substitution should produce a new term, so    a ~ Fix f   corresponds to the type of "substituted terms" (i.e., results of a substitution), which are simply terms. The algebra (f (Fix f) -> Fix f) takes a CoreTerm node, whose children are terms on which substitution was already performed, and transforms it into a new substituted term...
12:59:34 <aphorisme> lyxia: worked. Thanks a lot.  : )
13:09:25 <shapr> OH SURE
13:09:56 <monochrom> eh?
13:13:12 <wuschel> Hi. Quick question: g ( f x ) = g . f x = g $ f x 
13:13:14 <wuschel> ^ ?
13:13:33 <hpc> what's the question?
13:13:33 <cocreature> wuschel: not quite it’s (g . f) x not g . f x
13:13:55 <wuschel> cocreature: thanks!
13:14:02 <cocreature> @src (.)
13:14:03 <lambdabot> (f . g) x = f (g x)
13:14:09 <geekosaur> wuschel, $ is just application. the difference is that in common use cases, (g . f) expects a value but (g $ f) *is* a value
13:14:44 <wuschel> Hm. Let me think about that for a while. 
13:15:16 <mnoonan> :t \f g -> (g . f)
13:15:17 <geekosaur> that is, (g . f) is always a function. (g $ f) might or might not be; it's the same as (g f), the only thing the $ does is play precedence games so you can omit parentheses in some cases
13:15:18 <lambdabot> (a -> b) -> (b -> c) -> a -> c
13:15:19 <monochrom> It is also possible to write "g . f $ x"
13:15:23 <mnoonan> :t \f g -> (g $ f)
13:15:24 <lambdabot> t1 -> (t1 -> t) -> t
13:16:17 <wuschel> I see. Lambda calculus. 
13:16:21 <wuschel> Thanks!
13:16:38 <wuschel> @ monochrom geekosaur cocreature
13:18:35 <recursion-ninja> How do I construct a Free Monad that is also a Free Alternative? I looked in the `free` package and the `Free` type is not an instance of Alternative and the `Alt` type is not an instance of Monad. Can I compose these somehow?
13:19:48 <johnw> well, you could extend the Free type to include Choice and Empty constructions...
13:21:57 <recursion-ninja> johnw: So the hypothetical `FreeAlt` would have 4 constructors: Pure, Free, Choice, Empty?
13:22:04 <johnw> yes
13:22:13 <johnw> you can probably form it using a functor product, to reuse what's in 'free'
13:25:17 <recursion-ninja> johnw: Hmm... that makes more sense. I was trying to extend my particular monadic interpreter to have a "choice" like constructor, but was running into a lot of type errors. I'll tinker around with a FreeAlt type and see if I can "compose" the stuff from Free and Alt sensibly.
13:30:37 <dolio> The problem with just adding choice and empty is that their structure won't be quotiented by the expected rules.
13:31:30 <dolio> If you care about that.
13:34:36 <mpickering> Is there a way to write overloaded field selectors with template haskell?
13:41:43 <romildo> How can the definition   comparison test select = \x y -> test (select x) (select y)    be rewritten without explicitly naming the parameters x and y in the lambda expression?
13:42:15 <hpc> @src on
13:42:15 <lambdabot> (*) `on` f = \x y -> f x * f y
13:42:24 <hpc> test `on` select
13:42:31 <hpc> in fact
13:42:33 <hpc> comparison = on
13:42:49 <romildo> oh! thanks.
13:43:13 <hpc> on is the base for a few other neat things like comparing
13:43:16 <hpc> @src comparing
13:43:16 <lambdabot> comparing p x y = compare (p x) (p y)
13:43:18 <MarcelineVQ> in the actual libs on has a much cuter operator
14:09:25 <orion> Anyone using opaleye in production? If so, could you comment on your experience?
14:23:04 <typedrat> Is there a reason that GHC can't use the closedness of DataKinds and/or closed type families when type-checking, outside of "no one has implemented it yet"? I'm wondering if that might be a feature request (or even something that'd be worth considering attempting myself), because it'd be really nice not to have to tell the compiler that a bunch of different class instances for variable types can be assumed when there is a finite set 
14:23:16 <typedrat> and it damn well knows that every member of that set has an instance
14:24:03 <typedrat> It sounds like a ludicrous pain in the butt, but at the same time it'd a lot of type-level-fun heavy code a lot cleaner
14:25:17 <typedrat> (This thought brought to you by procrastinating on working on my own compiler's type system)
14:27:10 <monochrom> I don't know closed type families. I think I know DataKinds. How do I verify that GHC doesn't use the closedness of DataKinds?
14:37:23 <typedrat> @monochrom: http://lpaste.net/356781 . That's obviously an example a long way from any practical use, but I'm running into it when dealing with "Trees That Grow"-style types, that is where I'm using type families and a flag kind for what compiler phase I'm in to manage what information is available at any given node on the AST.
14:37:23 <lambdabot> Unknown command, try @list
14:39:21 <typedrat> It's not that surprising that it's not there, really, because the performance impacts would get fairly impressively awful with bigger types, but it'd be a real nice extension to be able to use when dealing with extremely finite types so I don't have to tell it in a billion places that (F x) is an instance of whatever class I'm working with for upwards of ten different Fs at this point
14:39:44 <iqubic> typedrat: You don't need to use the "@" when referring to another person.
14:40:20 <monochrom> Ah I see.
14:40:22 <typedrat> I know, I'm just trying a new IRC client that tries to be "hip" and "with it" apparently
14:40:48 <Taneb> typedrat, I think to some extent a hip and with it IRC client is a contradiction in terms
14:41:09 <crobbins> typedrat: which client?
14:41:13 <crobbins> on which OS?
14:41:25 <monochrom> "hip" and "with it" are glued at the hip.  <duck>
14:41:25 <typedrat> A new version of Textual on macOS
14:41:48 <crobbins> limechat on mac, hexchat on linux
14:42:03 <typedrat> It's a very macOS thing to do, I feel. I miss when things were being done an OS X way instead.
14:42:25 <typedrat> Kids, lawn, etc.
14:45:19 <iqubic> monochrom: Do you use xmonad?
14:45:27 <iqubic> I'm having a few issues with it.
14:45:40 <iqubic> Can you come to #xmonad and help me out?
14:45:49 <monochrom> Why me?
14:46:14 <iqubic> I'm not sure.
14:46:16 <Clint> bad karma
14:46:26 <iqubic> I just know that you are an xmonad user.
14:46:47 <iqubic> Also, I'm don't really want to wait for other people to help me.
14:46:55 <iqubic> I guess I'll just wait though.
14:47:12 <Tuplanolla> People on #xmonad may also be users.
14:47:20 <monochrom> Wrong. I do not use xmonad.
14:47:55 <iqubic> Oh. I thought I remembered seeing you there in the past.
14:48:37 <iqubic> Seeing as this is getting off topic, I will just wait for a response in #xmonad to my queries
14:48:59 <iqubic> What WMDE do you use?
14:49:07 <monochrom> If you have had any experience with communist countries or free government services in welfare states...
14:49:14 <iqubic> *WM/DE
14:49:21 <monochrom> You will have noticed that free services usually incurs waiting.
14:49:31 <iqubic> Yeah, I know.
14:49:35 <iqubic> I'll just wait.
14:53:12 <orion> Nothing is more expensive than something that is free.
15:00:46 <vktec> Hi, I've recently started learning Haskell, and am enjoying it so far. While practising using Monads in various ways, I wrote this code[1], which does the same thing using two different syntaxes. The code almost works, but when running it the result of the first putStr ("What is your name? ") is put on the line after the input. I suspect line buffering is at fault, but can't seem to find a flush function.
15:00:47 <vktec> Can anyone point me in the right direction?
15:00:49 <vktec> [1]: https://ptpb.pw/m5qC/haskell
15:01:58 <hpc> https://hackage.haskell.org/package/base-4.9.1.0/docs/System-IO.html#v:hFlush and https://hackage.haskell.org/package/base-4.9.1.0/docs/System-IO.html#v:stdin
15:02:07 <hpc> you may also want https://hackage.haskell.org/package/base-4.9.1.0/docs/System-IO.html#v:hSetBuffering
15:04:17 <vktec> Perfect! hFlush did the trick. Thanks hpc 
15:04:37 <vktec> I'll remember hSetBuffering for future reference
15:08:55 <orion> In Opaleye there is a type: data Table writerColumns viewColumns. To create a Table value you use the type constructor: Table :: String (TableProperties writerColumns viewColumns)
15:09:14 <orion> TableProperties is generated using TH: $(makeAdaptorAndInstance "pFoo" ''Foo')
15:09:33 <orion> That's all well and good if "writerColumns" exactly equals "viewColumns".
15:09:45 * hpc imagines writing ''Foo' in any other programming language
15:10:01 <orion> But what if I want my writerColumns do be *different* than my viewColumns?
15:10:07 <orion> What do?
15:10:41 <hpc> use something less magic than makeAdaptorAndInstance
15:11:18 <hpc> i am not familiar with opaleye, but for the most part anything TH can do, you can do with a bit more tedium
15:11:23 <orion> The type definition for TableProperties is: data TableProperties writerColumns viewColumns -- with instances for ProductProfunctor, Profunctor, Functor, and Applicative.
15:11:45 <orion> Profunctors are a weak spot in my understanding.
15:12:45 * hackagebot scientific 0.3.5.1 – Numbers represented using scientific notation – https://hackage.haskell.org/package/scientific
15:13:28 <iqubic> orion: Profunctors are contravarient in one type parameter, and covarient in the other.
15:13:32 <iqubic> What's the issue.
15:13:50 <orion> ha
15:16:53 <typedrat> orion: the solution I like the best is to just ignore the pro functor stuff as much as is possible, and just use the normal Applicative instance of TableProperties
15:17:23 <typedrat> There's an example in the Opaleye repository, and I can link you to the GitHub for my blog if you want to see a more practical example
15:19:08 <typedrat> https://github.com/typedrat/typedrat-site/blob/master/app/Typedrat/DB/Types.hs is basically copied right out of the example (I should probably make it a bit cleaner...), in use it looks something like https://github.com/typedrat/typedrat-site/blob/master/app/Typedrat/DB/User.hs
15:21:32 <orion> typedrat: Interesting. Thanks.
15:23:08 <orion> typedrat: Are you happy with Opaleye?
15:36:02 <typedrat> orion: Very! It's got a few rough edges in terms of boilerplate (especially in terms of adding a new type to its vocabulary) and it's a little bit tricky to figure out what type it actually wants sometimes, but the former just needs someone (why not me? maybe it will be at some point) to write some good TH stuff that can automate it well enough and the latter just needs some more documentation, but it'll always be true to some extent
15:36:09 <typedrat> strongly typed language in a safe way
15:37:52 <orion> Cool.
15:51:23 <c_wraith> I'm curious about the database library that keeps getting shown as a demo of dependent haskell.. 
15:52:00 <MarcelineVQ> me too, does it have a name? :>
15:52:11 <c_wraith> not that I'm aware of. 
15:52:16 <MarcelineVQ> oh :o
15:53:21 <c_wraith> I think it's on github somewhere, but names are hard. 
15:59:28 <monochrom> Is it m36?
15:59:42 <monochrom> err, project-m36
16:01:58 <c_wraith> doesn't look like it 
16:09:07 <djapo> hello guys, i don't know if ill be able to get some help here but im getting some compilling errors http://bpaste.net/show/40a91f705a54
16:11:36 <joncfoo[m]> djapo: the compiler says `Couldn't match type ‘GHC.Word.Word64’ with ‘(KeyMask, KeySym)’` - what do think that means?
16:12:57 <djapo> joncfoo[m]: i fixed it with (0, somekeysym) 
16:13:18 <djapo> but i don't know if that is what is expected, or generally practiced
16:13:22 <joncfoo[m]> there you go, you knew what it meant :)
16:13:45 <joncfoo[m]> you'd have to read the field's documentation regarding what it is expecting
16:14:07 <djapo> yeah, i haven't played with haskell since high school.
16:14:15 <joncfoo[m]> e.g. what does it mean to have a 0 in `(0, someKeySym)`
16:16:03 <djapo> it means that no key mask is used, and just the keysym
16:16:06 <c_wraith> joncfoo[m], the latter is a pair. it holds two values inside it. 
16:16:36 <c_wraith> joncfoo[m], it's not the same thing as either of its components alone. 
16:16:52 <MarcelineVQ> c_wraith: https://github.com/goldfirere/dependent-db  https://www.cis.upenn.edu/~sweirich/papers/eisenberg-thesis.pdf
16:17:09 <c_wraith> ah, that's the one. 
16:17:52 <joncfoo[m]> c_wraith: I was asking the significance of the first tuple value - I think djapo gets it :)
16:18:12 <c_wraith> it's a cool idea.. infer the schema at compile time, do a check at program startup that the inferred schema matches what the database provides. 
16:18:45 <c_wraith> joncfoo[m], yeah, I figured out what you meant eventually, and noticed the question had been answered. :) 
16:18:45 <MarcelineVQ> monochrom: Who was your thesis supervisor? Sorry if I missed an answer to that previously
16:22:50 <MarcelineVQ> monochrom: ah, Hehner was the name I was trying to remember
16:23:37 <MarcelineVQ> had lost my page with a Practical Theory of Programming loaded and couldn't recall the title
16:24:53 * hackagebot data-diverse 0.7.0.0 – Extensible records and polymorphic variants. – https://hackage.haskell.org/package/data-diverse
16:31:06 <NemesisD> type family question. if i've got class Foo a where data Bar a; ... ,  data Wrapper a = ABar (Bar a), is there any possible way to derive show for data Wrapper a?
16:31:29 <NemesisD> so far everything i've tried requires undecideableinstances
16:32:39 <monochrom> MarcelineVQ: E.C.R. Hehner
16:37:02 * hackagebot pdfname 0.1 – Name a PDF file using information from the pdfinfo command – https://hackage.haskell.org/package/pdfname
16:38:22 <MarcelineVQ> monochrom: thank you
16:39:13 <NemesisD> or i guess secondary question, how unsfae is undecidable instances?
16:50:19 <lyxia> NemesisD: it has no effect on runtime safety. At worst you may have to increase a depth bound for instance resolution.
16:51:01 <NemesisD> lyxia: ok, so in this case i just enabled it and then did deriving instance Show (Bar a) => Show (Wrapper a)
16:51:16 <lyxia> that's the right way
16:53:10 <NemesisD> ah ok. also, i'm sort of confused in a typeclass when i should be using `type` or `data`
16:56:40 <dfeuer> alexbiehl: ping
17:02:36 <lyxia> NemesisD: one criterion is whether you want the associated type to be injective, in which case you probably want data, although there are injective type families now, to confuse things.
17:04:51 <NemesisD> lyxia: I don't understand the difference
17:12:03 <lyxia> NemesisD: it's similar to the difference between the usual type and data declarations.
17:12:39 <lyxia> NemesisD: type defines a synonym/alias, data declares a new datatype altogether.
18:02:39 <JagaJaga> Hello! Can you suggest some ntp lib?
18:08:10 * hackagebot chorale 0.1.8 – A module containing basic functions that the prelude does not offer – https://hackage.haskell.org/package/chorale
18:09:37 <qqumber> I'm using y'all to regulate my emotions
18:51:23 <Wheet> I need help with haskell related things
18:51:54 <johnw> Wheet: please start with your first question; showing code and the error you encounter are most effective
18:52:47 <Wheet> johnw, my first question is: in your own words, what is haskell?
18:53:22 <glguy> Wheet: There is a lot of material online you can find to answer that. Best to start searching with Google or Bing
18:53:51 <johnw> I'm not even sure the words that come to me are what would help anyone wanting to know
18:55:44 <Wheet> There's a lot of marerial online for everything
18:56:01 <Wheet> However, it doesn't result in the same social experience
18:56:16 <johnw> For me, Haskell is an immutable, functional language that permits a call-by-need evaluation model
18:58:04 <osfameron> Wheet: it might, however, be helpful for you to see what's available online and let people know what about it you want clarification on?
18:58:33 <osfameron> "So I read that it's immutable, but I don't really understand why that's useful?" etc.
18:59:40 <Wheet> I'm very intrigued by what johnw has stated 
19:06:52 <juri_> dude, i'm two years in, and i have problems answering that question. go fix something, then tell me what haskell is.
19:07:42 <juri_> god. almost three years in. i suck at this. ;P
19:08:56 <Wheet> I cannot believe I've gone my entire life having never heard of haskell
19:09:13 <Wheet> Yet, the words of johnw are still all I really know if it
19:09:26 <Wheet> of*
19:09:56 <johnw> well, it's quite a wonderful thing; if you like programming and computer science at all, you shuold enjoy it
19:13:03 <johnw> but bootstrapping someone's knowledge from absolute zero is not a task well suited to IRC
19:13:24 <johnw> glguy is right that it's best to start somewhere like http://learnyouahaskell.com/
19:15:47 <Wheet> johnw, right now I'm just enjoying this state of only knowing what you've told me
19:16:19 <Wheet> There's a whole language out there that I've been oblivious to up until now, I don't want to rush things
19:16:30 <johnw> savoring the process, I can appreciate that :)
19:41:48 <qqumber> johnw: I'm going to cut out masks to wear at my 42th birthay from your skin with surgical precision and surgical tools under very safe narcosis, you will be safe and I'll apply synthetic steralized skin, so you'll recover well.
19:42:09 --- mode: ChanServ set +o glguy
19:42:14 <johnw> definitely not on topic :)
19:42:18 --- mode: glguy set +b *!*@gateway/tor-sasl/qqumber
19:42:26 --- kick: qqumber was kicked by glguy (off-topic)
21:26:31 * hackagebot pdfname 0.1.1 – Name a PDF file using information from the pdfinfo command – https://hackage.haskell.org/package/pdfname
21:33:15 <moet> i have a project which does `Data.Vector.replicateM n Data.Binary.getWord8` for large values of n
21:33:41 <moet> it's deserializing a rather large file which contains unsigned bytes
21:34:19 <moet> using the profiler, it's clear that this isn't a very efficient approach
21:35:06 <moet> does anybody have suggestions as to how to more efficiently approach binary deserialization?
21:36:08 <quick_dudley> Is it using too much memory or is it just too slow?
21:37:39 <geekosaur> long runs of Word8 makes me think ByteString
21:38:03 <moet> it accounts for 48.1% individual time and 56.2% individual alloc
21:38:09 <moet> so i guess it's using too much memory
21:39:12 <moet> yeah, i'm working from a bytestring, but sometimes the files contain other types (not unsigned bytes) so i stuck with the binary package
21:40:45 <moet> i could special-case for Word8 to use `Data.Vector.fromList . Data.ByteString.unpack` but that wouldn't solve the other cases which still use `Data.Vector.ReplicateM n Data.Binary.getBlah`
21:41:58 <quick_dudley> I'm not sure I understand where you're stuck with the binary package
21:43:27 <moet> sometimes the files don't contain unsigned bytes (Word8) .. sometimes they contain Int16 or Int32 or Float..
21:44:01 <moet> the binary package facilitates deserializing to each of those generically.. `Data.ByteString.unpack` only facilitates deserializing to Word8
21:44:39 <quick_dudley> http://hackage.haskell.org/package/binary-0.8.5.1/docs/Data-Binary-Get.html#g:11
21:45:24 <quick_dudley> Files can't contain anything except bytes: anything else is just encoded in bytes.
21:46:25 <moet> [edit] sometimes the files don't contain bytes representing Word8 .. sometimes they bytes representing Int16 or Int32 or Float..
21:46:51 <moet> [edit] sometimes they contain bytes representing Int16 or Int32
21:47:07 <quick_dudley> That's what getInt32be and getInt32le are for
21:47:09 <moet> that's why i'm using the binary package, because it has getInt8 and others
21:47:19 <moet> yes, and getINt32be, etc..
21:47:43 <moet> my concern is about the profile of `Data.Vector.replicateM n Data.Binary.get*`
21:48:09 <moet> i was wondering if there might be something obviously inefficient that i'm missing
21:48:43 <quick_dudley> In that case: probably nothing obvious
21:48:50 <moet> hehe
21:49:29 <quick_dudley> I guess you could try using Data.Vector.Unboxed
21:49:37 <moet> well then what about less obvious things? .. the data structure into which i'm deserializing looks like `data Blah = BlahU8 !(V.Vector W.Word8)`
21:49:47 <moet> ah, i am using Data.Vector.Unboxed, actually
21:50:20 <moet> do i need to but little hashes around Word8 or something?
21:50:37 <moet> [reading about unboxing atm..]
21:51:09 <quick_dudley> I think in the case of Data.Vector.Unboxed it just unboxes them automatically
21:51:55 <moet> hrm..
21:54:04 <quick_dudley> I've actually been having a similar problem with something I'd been storing via read and show (I know that's not recommended anyway), and it hogs memory because it doesn't pack the data into the array until it's finished parsing it.
21:56:34 <moet> sounds similar
21:57:00 <moet> i'll try to paste a quick repro
22:04:40 <lyxia> Does it have to be a vector? Can't you just take a slice of the original bytestring?
22:05:13 <moet> lyxia: what if the bytestring are encoded doubles?
22:05:43 <lyxia> that makes more sense
22:07:45 <quick_dudley> You could also use Data.Vector.Storable and System.IO.MMap
22:08:26 <moet> hmm... that's an interesting option
22:10:49 <moet> the file is compressed so i just went for the bytestring option
22:11:17 <quick_dudley> Oh, yeah. If you're decompressing it then there's no advantage to using mmap
22:11:42 <moet> i don't have to do it compressed though, so mapping could be perfect
22:11:56 <moet> as long as haskell doesn't try to copy it all into memory before letting me work with it :)
22:12:24 <hanna> With mmap, linux does that internally
22:12:27 <hanna> On-demand
22:12:37 <moet> i'll try and see; this is a good way for me to learn about efficiency
22:13:24 <hanna> moet: also iirc `binary` is very bad at de/serializing floats
22:13:39 <moet> oh, i wasn't aware of that
22:14:05 <hanna> `cereal` is better, but if you can, you could also try http://hackage.haskell.org/package/store
22:16:02 <hanna> (that one only works on fixed size values though)
22:18:46 <moet> still interesting; i'll try it
22:21:13 <quick_dudley> hanna: I'm curious about `binary` being so bad at floats. I'm guessing it's something that could be improved without modifying too much unrelated code.
22:22:11 <hanna> quick_dudley: it's possible the information may be outdated
22:22:16 <cocreature> quick_dudley: it’s not binary per se but the default Binary instance of Float and Double. changing that could break any code that relies on it
22:22:17 <hanna> I just came across it via google the other day
22:22:24 <hanna> https://hackage.haskell.org/package/data-binary-ieee754-0.4.4/docs/src/Data-Binary-IEEE754.html#getFloat32le seems like the place to look
22:23:04 <cocreature> if you use the functions at https://hackage.haskell.org/package/binary-0.9.0.0/docs/Data-Binary-Get.html#g:15 it’s pretty decent
22:23:09 <hanna> (odd that it's doing so much conversion, I would expect an in-memory reinterpretation after possible bit flip)
22:23:28 <hanna> s/bit flip/word flip/
22:24:06 <hanna> (but I guess this way is “safer”?)
22:25:04 <hanna> ah, for getFloathost it uses raw casting
22:25:21 <hanna> asw ell as getFloatle
22:25:37 <hanna> no idea why this is separate from the stuff in Data.Binary.IEEE754
22:26:17 <quick_dudley> This source code says it allocates a pointer, writes a word to it, casts the pointer, and reads from it again
22:27:12 <quick_dudley> I wonder whether or not unsafeCoerce would actually give any different results
22:27:48 <quick_dudley> brb: I'm going to ask quickcheck
22:30:26 <nshepperd> iirc the reason is unsafeCoerce doesn't work for Word -> Float because of floating point vs word registers on x86
22:31:01 <quick_dudley> Oh
22:31:19 <hanna> That seems weird
22:31:40 <hanna> Shouldn't moving values in and out of registers be on a completely separate layer, which has to follow the dependencies of the haskell code?
22:31:59 <hanna> and anyway you do get a result
22:34:23 <hanna> interesting, seems those getDoublehost etc. are new
22:34:31 <hanna> not in 0.8.3.0 which is what I have
22:36:52 <hanna> https://0x0.st/Gs_.txt but using `cereal` I can verify this
22:37:19 <nshepperd> https://ghc.haskell.org/trac/ghc/ticket/2209
22:37:28 <hanna> but maybe the native code gen of GHC would screw it up?
22:38:06 <nshepperd> yes
22:38:33 <hanna> interesting
22:38:39 <nshepperd> i'm sure it depends on whether the optimizer unboxes things
22:38:45 <hanna> makes sense
22:39:00 <hanna> at any rate, a pointer cast would probably be the easiest solution
22:39:09 <hanna> before even deserializing it, if you mmap the original file
22:40:37 <quick_dudley> That's true. The function I wanted to compare with unsafeCoerce turned out to not be exported from its module
22:51:38 <Axman6> 1/ment
22:51:40 <Axman6> bleh
22:55:51 <quick_dudley> Talking about reading floats reminded me: one of my spare time projects is a parser library. I recently discovered that rounding errors made it parse floats and doubles incorrectly, and my quick fix was to parse them as `Rational`s and convert later. I just checked the `base` source code to see if the `Read` instance does anything more clever: turns out it does the same thing.
22:57:28 <hanna> quick_dudley: were you updating the Double incrementally as you read in digits?
22:57:37 <quick_dudley> Yes
23:00:44 <hanna> I think the most “proper” approach would be to parse it as (Mantissa, Exponent10) directly. For example if you have 123.456e-5 you can parse (123456, -8) directly
23:01:01 <hanna> that would give you O(n) space with the length of the user-written string for the intermediate representation
23:01:10 <hanna> the problem with the Rational approach is that it blows up for e.g. e-50000
23:01:28 <hanna> because it generates a gigantic Integer divided by another gigantic Integer
23:04:28 <quick_dudley> I did think of that problem but I figured the "Rational" way would work in the meantime
23:05:52 <hanna> http://hackage.haskell.org/package/scientific-0.3.5.1/docs/Data-Scientific.html
23:05:53 <hanna> heh, this exists
23:06:30 <Axman6> yeah generally Scientific is the right place to start when reading base 10 fractional numbers
23:06:44 <Axman6> > decodeFloat pi
23:06:46 <lambdabot>  (7074237752028440,-51)
23:06:54 <Axman6> > decodeFloat 1.0
23:06:56 <lambdabot>  (4503599627370496,-52)
23:07:03 <Axman6> > decodeFloat 0
23:07:05 <lambdabot>  (0,0)
23:07:57 <hanna> `toRealFloat` from there apparently also goes through rational but bounds it to make sure e-1000000 returns -Infinity
23:15:40 <hanna> I wonder why Scientific isn't an instance of RealFloat
23:15:53 <hanna> oh, floatDigits is not constant
23:16:02 <Axman6> Scientific isn't a great type to use for computation btw, it can be very slow, and IIRC occasionally may not terminate
23:16:15 <hanna> how does it compare to CReal?
23:17:34 <Axman6> not sure, but CReal is designed for computation, Scientific isn't really
23:19:33 <quick_dudley> Is CReal on hackage? hoogle doesn't know about it
23:20:01 <Axman6> I can't remember which package it is
23:21:46 <quick_dudley> It's in numbers. I haven't used CReal itself but I've used Symbolic which is in the same package. Took me a minute to remember
23:21:48 <hanna> it's in `numbers`
23:21:58 <hanna> It's pretty darn slow
23:22:07 <hanna> I use it mostly because I like the Show instance more than that of Double
23:22:30 <hanna> It will show e.g. 0.0001 as 0.0001 instead of 1.0e-4
23:30:18 <quick_dudley> The numbers package seems to be unmaintained: the last commit to its github repo was 3 years ago and it has 6 open pull requests going back to 2014
23:42:17 <moet> is there an easy way to map the result of an io action, before its arguments are given?
23:42:44 <moet> so far i'm doing `(fmap pureTransform) . action`
23:43:04 <moet> wasn't sure if there was a name for it or sth
23:56:39 <moet> so far the benchmarking isn't showing much that's interesting
23:57:00 <moet> i'll be back on tomorrow with more of your suggestions and paste code+results
