00:00:12 <Veinor> Nothing happened, although maybe freenode just silently ignores the message.
00:00:26 <codm> The Network.Socket send function calls withCstring (http://hackage.haskell.org/packages/archive/network/2.2.1.3/doc/html/src/Network-Socket.html#send).
00:00:30 <Veinor> Only one way to find out!
00:00:32 <c_wraith> heh.  I got myself k-lined on a different network for accidently tab-completing to /oper once. :)
00:00:38 <codm> Does that mean I can't send UDP packets with 0-valued bytes?
00:01:10 <Veinor> nope, they're not quashing the lines
00:01:26 <Veinor> weird
00:01:32 <bos> codm: shouldn't be a problem.
00:01:40 <copumpkin> the withCString docs say it would be
00:01:45 <copumpkin> "the Haskell string may not contain any NUL characters
00:01:45 <copumpkin> "
00:01:51 <copumpkin> I'd file it as a bug
00:02:31 <codm> bos:  Just a doc bug, then?  It does seem to work in limited tests.
00:02:49 <Axman6> argh! :'(
00:02:56 <Axman6> now cabal's broken :'(
00:03:01 <codm> Would be nice if sendBufTo allowed a NULL sockaddr, for connected UDP sockets.
00:03:12 <Axman6> wait... using the wrong ghc i think
00:03:15 <copumpkin> codm: looking at the withCString implementation, it looks like it depends on whether you're GHC or not
00:03:42 <bos> it makes no attempt to check for NUL.
00:03:49 <lispy|web> I've gotten k-lined on freenode before from trying to use standard irc commands.  Forgot which one.  Happened a couple times before I figured out the problem.
00:03:51 <bos> it just assumes that you're passing to a C function that cares.
00:04:07 <codm> Ah, now I understand what's going on.  Thanks.
00:04:26 <copumpkin> well, the non-glasgow-haskell version
00:04:28 <copumpkin> uses withArray0
00:04:38 <copumpkin> whereas the GHC one uses length haskellstring
00:04:54 <copumpkin> so in GHC it shouldn't make a difference
00:05:03 <jorick> how do i turn [a,b,c,d,e] into [a, a+b, a+b+c, a+b+c+d, a+b+c+d+e]?
00:05:06 <copumpkin> but in general, I'd file it as a bug
00:05:18 <copumpkin> jorick: scanl1 (+)
00:05:23 <jorick> thanks
00:05:29 <copumpkin> > scanl1 (+) [a,b,c,d,e]
00:05:30 <lambdabot>   [a,a + b,a + b + c,a + b + c + d,a + b + c + d + e]
00:05:56 <codm> copumpkin: Thanks.  Under a bit of deadline pressure, but will probably file several bug reports in a couple of weeks.
00:06:08 <codm> Appreciate the help tonight.
00:06:17 <Veinor> > a + b - b
00:06:18 <lambdabot>   a + b - b
00:06:21 <Veinor> lol
00:06:22 <Axman6> > scanl (+) 0 [a,b,c,d]
00:06:23 <lambdabot>   [0,0 + a,0 + a + b,0 + a + b + c,0 + a + b + c + d]
00:06:51 <hiredman> interesting
00:06:51 <Axman6> codm: what kind of deadline? work related or school?
00:08:07 <Axman6> awesome, i still have access to ANU's T2
00:08:14 <lispy|web> > fix $ \f -> scanl1 (+) [0,1] ++ f
00:08:15 <lambdabot>   [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,...
00:08:22 <lispy|web> > fix $ \f -> scanl1 (+) [0,1, 1] ++ f
00:08:23 <lambdabot>   [0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,...
00:08:26 <lispy|web> doh!
00:09:15 <copumpkin> :t fix (ap sequence)
00:09:16 <lambdabot> forall a. [[a] -> a] -> [a]
00:09:31 <Axman6> :t fix
00:09:32 <lambdabot> forall a. (a -> a) -> a
00:09:36 <codm> codm: both.  work is school.
00:09:41 <Axman6> heh
00:09:41 <jorick> :t printf
00:09:42 <lambdabot> forall r. (PrintfType r) => String -> r
00:09:50 <Axman6> @instances PrintfType
00:09:53 <lambdabot> Couldn't find class `PrintfType'. Try @instances-importing
00:09:55 <codm> Axman6: I meant to day Axman6: both.  Somewhat tired as you can probably tell.
00:10:03 <copumpkin> @let loeb = fix (ap sequence)
00:10:04 <lambdabot>  Defined.
00:10:05 <Axman6> heh, yeah.
00:10:24 <lispy|web> > fix $ \f -> 0 : 1 : 1 : scanl1 (+) f
00:10:25 <lambdabot>   [0,1,1,0,1,2,2,3,5,7,10,15,22,32,47,69,101,148,217,318,466,683,1001,1467,21...
00:10:25 <jorick> > printf "a ~s" "test"
00:10:26 <lambdabot>   Ambiguous type variable `a' in the constraints:
00:10:26 <lambdabot>    `GHC.Show.Show a'
00:10:26 <lambdabot>      a...
00:10:32 <lispy|web> oh, I need a drop
00:10:46 <lispy|web> > fix $ \f -> 0 : 1 : scanl1 (+) (tail f)
00:10:46 <lambdabot>   [0,1,1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131...
00:10:57 <Axman6> > printf "a ~s" "test" :: String
00:10:58 <lispy|web> Okay, I suck
00:10:58 <lambdabot>   "a ~s* Exception: Printf.printf: formatting string ended prematurely
00:11:02 <copumpkin> > loeb [const 1, (2*) . (!!2), const 7, sum . take 2]
00:11:04 <lambdabot>   [1,14,7,15]
00:11:06 <Axman6> > printf "a %s" "test" :: String
00:11:08 <lambdabot>   "a test"
00:11:27 <lispy|web> > 0 : fix $ \f -> 1 : 1 : scanl1 (+) f
00:11:28 <lambdabot>   Couldn't match expected type `[t]'
00:11:28 <lambdabot>         against inferred type `(a -> a) ...
00:11:34 <lispy|web> > 0 : (fix $ \f -> 1 : 1 : scanl1 (+) f)
00:11:35 <lambdabot>   [0,1,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,109...
00:11:38 <lispy|web> ah, ha!
00:11:45 <Axman6> heh
00:12:06 <monochrom> This is why I disbelieve in $ altogether.
00:12:11 <lispy|web> > fix printf
00:12:15 <lambdabot>   mueval-core: Time limit exceeded
00:12:21 <Veinor> > fix $ \f -> 0 : 1 : scanl1 (+) f
00:12:21 <copumpkin> > fix seq
00:12:22 <lambdabot>   [0,1,0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,1...
00:12:23 <lambdabot>   {()->()}
00:12:37 <copumpkin> > fix ((0:) . scanl (+) 1)
00:12:38 <lambdabot>   [0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946...
00:13:30 <copumpkin> > nubBy (flip divides)
00:13:32 <lambdabot>   * Exception: divide by zero
00:13:37 <copumpkin> > nubBy (flip divides) [2..]
00:13:39 <lambdabot>   [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101...
00:13:52 <lispy|web> uh
00:14:00 <Veinor> that's great :D
00:14:01 <lispy|web> :t divides
00:14:02 <lambdabot> forall a. (Integral a) => a -> a -> Bool
00:14:19 <Veinor> > 9 `divides` 18
00:14:20 <lambdabot>   True
00:14:22 <copumpkin> divides = flip isFactorOf
00:14:28 <Axman6> > nubBy (flip divides) . fix $ ((0:) . scanl (+) 1)
00:14:30 <lambdabot>   [0* Exception: divide by zero
00:14:30 <copumpkin> actually
00:14:38 <bos> copumpkin: how come you have a zillion followers on twitter?
00:14:49 <Veinor> bos: cause he's on the iphone dev team? :P
00:15:07 <Veinor> also I need to reason out why that fibonacci series thing works
00:15:09 <copumpkin> yeah, it's a bunch of 14-year-olds with ipod touches who want to be l33t hax0rz, mostly
00:15:15 <lispy|web> So, if nubBy takes a list, how does nubBy (flip divides), get going?
00:15:16 <bos> copumpkin: oh, funny.
00:15:31 <Axman6> > let fibs (!x,!y)  = x : fibs (y,(x+y) in  nubBy (flip divides) . fibs $ (1,1)
00:15:31 <Veinor> > :t nubBy
00:15:31 <copumpkin> lispy|web: I passed it a list... it broke the first time
00:15:32 <lambdabot>   <no location info>: parse error on input `in'
00:15:32 <lambdabot>   <no location info>: parse error on input `:'
00:15:35 <lispy|web> :t nubBy (flip divides)
00:15:35 <lambdabot> forall a. (Integral a) => [a] -> [a]
00:15:43 <Axman6> > let fibs (!x,!y) = x : fibs (y,(x+y)) in  nubBy (flip divides) . fibs $ (1,1)
00:15:44 <lambdabot>   <no location info>: Illegal bang-pattern (use -XBangPatterns)
00:15:51 <Axman6> > let fibs (x,y) = x : fibs (y,(x+y)) in  nubBy (flip divides) . fibs $ (1,1)
00:15:56 <lambdabot>   mueval-core: Time limit exceeded
00:15:59 <Axman6> lame
00:16:02 <c_wraith> > 1
00:16:03 <jorick> I should just be able to replace "show" by printf "%.3d", no? it gives me type errors...
00:16:04 <lambdabot>   1
00:16:04 <Veinor> I'll bang pattern you
00:16:10 <lispy|web> > nubBy (flip divides)
00:16:11 <lambdabot>   * Exception: divide by zero
00:16:16 <lispy|web> that's the one Id on't get
00:16:22 <c_wraith> :t printf
00:16:23 <lambdabot> forall r. (PrintfType r) => String -> r
00:16:27 <lispy|web> it has type, [a] -> [a]
00:16:45 * Axman6 doesn't think being on the iPhone dev team is cool
00:16:51 <c_wraith> @instances PrintfType
00:16:52 <lambdabot> Couldn't find class `PrintfType'. Try @instances-importing
00:16:53 <lispy|web> ?src nubBy
00:16:53 <lambdabot> nubBy eq []             =  []
00:16:53 <lambdabot> nubBy eq (x:xs)         =  x : nubBy eq (filter (\ y -> not (eq x y)) xs)
00:16:56 <copumpkin> Axman6: glad to hear it :)
00:17:10 <Veinor> copumpkin: also I'm insulted :(
00:17:10 <Axman6> @index printf
00:17:11 <lambdabot> Text.Printf
00:17:15 <c_wraith> Unless it means you can get us all free iPhones.  And free service. :)
00:17:20 <copumpkin> lol
00:17:25 <copumpkin> depends what you mean by free ;)
00:17:25 <Axman6> @instances-importing Text.Printf.PrintfType
00:17:26 <lambdabot> IO a
00:17:27 <jorick> yeah i included Text.Printf, still no cake
00:17:39 <lispy|web> > nubBy (flip divides) :: (Integral a) => [a] -> [a]
00:17:40 <lambdabot>   * Exception: divide by zero
00:17:51 <copumpkin> lispy|web: it doesn't work like that
00:18:03 <lispy|web> I don't see how it can have a divide by zero when it's not fully applied
00:18:11 <Axman6> yeah...
00:18:12 <copumpkin> lispy|web: it's the evil smallcheck function show instance
00:18:12 <c_wraith> Free = O(1)$, right?
00:18:13 <copumpkin> > (+1)
00:18:14 <lambdabot>   {-3->-2;-2->-1;-1->0;0->1;1->2;2->3;3->4}
00:18:28 <Veinor> > (-1)
00:18:29 <lambdabot>   -1
00:18:32 <lispy|web> oh, that is not right...
00:18:33 <Veinor> > (1-)
00:18:34 <lambdabot>   {-3->4;-2->3;-1->2;0->1;1->0;2->-1;3->-2}
00:18:37 <copumpkin> Veinor: why??
00:18:46 <Veinor> 03:15:09 < copumpkin> yeah, it's a bunch of 14-year-olds with ipod touches who want to be l33t hax0rz, mostly
00:18:51 <Veinor> :P
00:18:54 <lispy|web> copumpkin: thanks for clarifying
00:18:55 <lispy|web> > f
00:18:56 <lambdabot>   Ambiguous type variable `a' in the constraints:
00:18:56 <lambdabot>    `SimpleReflect.FromExpr ...
00:18:56 <copumpkin> Veinor: you're not part of the mostly!
00:19:10 <copumpkin> Veinor: you're following me?
00:19:15 <lispy|web> > head
00:19:16 <lambdabot>   * Exception: Prelude.head: empty list
00:19:19 <Veinor> oh okay :D
00:19:19 <Veinor> yeah
00:19:26 <Veinor> prognosys
00:19:28 <monochrom> I am also a 14-year-old with an iPod Touch.
00:19:38 <lispy|web> > Just
00:19:39 <lambdabot>   {()->Just ()}
00:20:14 <lispy|web> I think if we're going to have that, then the errors should be catched and something else should be printed
00:20:21 <copumpkin> :o
00:20:29 <Veinor> ?
00:20:44 <lispy|web> > head ==> <function> :: [a] -> a, or something
00:20:45 <lambdabot>   <no location info>: parse error on input `<'
00:20:49 <monochrom> Don't worry, I am not on twitter.
00:20:59 <Veinor> bah
00:21:00 <Veinor> it's all the rage
00:21:07 <copumpkin> monochrom: I was about to say, it seemed out of character :P
00:21:12 <jorick> oh waaaw it looks like i finished my program!! thank you everyone for the help
00:21:56 <Axman6> hooray :)
00:22:10 <monochrom> Haskell programs have short time-to-market.
00:22:35 <jorick> yeah i just needed something to calculate the shape of a tent i'll be making
00:22:55 <Axman6> heh
00:23:06 <Axman6> that's possibly the strangest use for a haskell program i've heard :P
00:23:27 <jorick> Axman6: http://shangri-la.jottit.com/
00:23:31 <jorick> i'll be posting the code there pretty soon
00:24:10 <hiredman> looks nice
00:24:19 <lispy|web> jorick: is that a yurt?
00:24:26 <Axman6> jorick: ha, awesome
00:25:05 <hiredman> I think yurts have square walls
00:25:52 <monochrom> A forum I frequent once hosted a game. I wrote in Haskell programs to make programmed, conditional moves. I used HXT to read the HTML.
00:25:57 <jorick> lispy|web no a yurt has a cilinder wall with a "china man hat" on it
00:26:12 <lispy|web> jorick: ah
00:26:26 <lispy|web> See what I know?  Yeah, it all fits in this thimble, isn't it great?
00:29:55 <jorick> hmmm, i was trying to save my (working) code on codepad.org and it's complaining about a lack of type definition (i have none). isn't there some option i can put at the top of my source to make codepad use the same type discovery ghci does?
00:30:23 <Axman6> just use hpaste
00:31:26 <jorick> Axman6 but hpaste doesn't execute the code, only shows it... i'd like to have the results of the code along
00:31:36 <Axman6> paste them too :P
00:31:39 <jorick> or yeah i guess i can just paste it
00:32:43 <koala_man> how is ContraFunctor used?
00:32:57 <Veinor>  -* [Getting Started with PHP on Athena](http://stuff.mit.edu/afs/sipb/project/doc/pgp/pgp.html) <br />
00:33:01 <Veinor> -A quick guide to using PHP security on Athena.
00:33:04 <Veinor> +* [Getting Started with PGP on Athena](http://stuff.mit.edu/afs/sipb/project/doc/pgp/pgp.html) <br />
00:33:06 <Veinor> +A quick guide to using PGP security on Athena.
00:35:17 <copumpkin> koala_man: when you need a contravariant functor
00:36:04 --- mode: ChanServ set +o dibblego
00:36:08 --- kick: co_kantor was kicked by dibblego (dibblego)
00:36:26 <copumpkin> koala_man: so you have contramap :: (a -> b) -> f b -> f a, and pretend for a moment you can write type sections, then let f = (-> c), and you get (a -> b) -> (b -> c) -> (a -> c)
00:36:29 <Itkovian> Nice shot.
00:36:44 <copumpkin> you can do that with a newtype
00:36:54 --- mode: dibblego set -o dibblego
00:37:08 <copumpkin> koala_man: and that's what the ContraF newtype is for :)
00:37:58 <koala_man> ah. neat
00:38:12 * lispy|web thought that a contra map was something for 90's video games...
00:38:23 <koala_man> thanks
00:38:48 <lispy|web> heh, and someone made a webite where you can play contra...
00:39:00 <copumpkin> :)
00:40:16 <hackagebot> graphviz 2999.6.0.0 - GraphViz bindings for Haskell. (IvanMiljenovic)
00:40:19 <hackagebot> Graphalyze 0.7.0.0 - Graph-Theoretic Analysis library. (IvanMiljenovic)
00:40:21 <hackagebot> SourceGraph 0.5.0.0 - Use graph-theory to analyse your code (IvanMiljenovic)
00:42:02 <ivanm> the great trifecta! :p
00:46:23 <ivanm> dibblego: ^^
00:46:29 --- mode: ChanServ set +o dibblego
00:46:33 --- kick: australian_male_ was kicked by dibblego (dibblego)
00:46:37 --- kick: grissou was kicked by dibblego (dibblego)
00:46:55 <Itkovian> Somebody has a grudge?
00:46:56 <Itkovian> :-)
00:47:00 --- kick: co__CR__CE was kicked by dibblego (dibblego)
00:47:09 <ivanm> Itkovian: yes, I don't like spammers
00:47:34 <Itkovian> ivanm: That's one fine attitude there!
00:48:11 <Itkovian> I just love the sound Colloquy makes when somebody gets kicked
00:48:43 <ivanm> who?
00:50:23 --- kick: phil\420 was kicked by dibblego (dibblego)
00:50:56 * Itkovian does a happy little dance
00:51:39 <Axman6> ok, so, if you write a library that uses GPL code, can you make your library LGPL?
00:51:45 --- kick: couwo was kicked by dibblego (dibblego)
00:51:55 <Axman6> (i'm thinking a wrapper around a GPL library)
00:52:59 --- kick: Co_CaRi_Ce_Byrn was kicked by dibblego (dibblego)
00:53:04 --- kick: co_OL_YM_FB was kicked by dibblego (dibblego)
00:54:54 <MiniCow> ivanm: Colloquy is an IRC client. Mine makes an explosion sound when somebody gets kicked. Sounds like a war zone in here at the moment ;-)
00:54:59 <ivanm> ahhh
00:55:10 <opqdonut> hehe
00:56:14 --- mode: dibblego set +r
00:56:23 <ivanm> what does +r do?
00:56:30 --- kick: LeRebel was kicked by dibblego (dibblego)
00:56:53 --- kick: ce_lagi_telanjan was kicked by dibblego (dibblego)
00:57:06 --- kick: ce`cariCwo_bae was kicked by dibblego (dibblego)
00:57:07 <Itkovian> MiniCow: Yeah, it does. I'm cranking up the volume. Too bad I cannot redirect it to my airport express ;-)
00:57:08 <blackdog> I've got a bunch of code that handles marshalling across the Haskell-Ruby border. I want to put it on Hackage so I don't have to package it with the Ruby stuff - what would be a sensible namespace? Language.Ruby.Hubris?
00:58:18 --- kick: Alex_chn_lg_kese was kicked by dibblego (dibblego)
00:59:53 --- mode: dibblego set -o dibblego
01:00:40 <ivanm> blackdog: sounds OK to me
01:02:43 <blackdog> righto, in the absence of howls of protest, Language.Ruby.Hubris it is.
01:04:02 <Axman6> sounds like that's exactly how it should be named to me
01:10:54 <Axman6> does Malcolm Wallace hang out here? i don't know hiw nick if he does
01:11:12 <ivanm> preflex: seen malcolmw
01:11:13 <preflex>  malcolmw was last seen on #haskell 5 days, 39 minutes and 36 seconds ago, saying: jargonjustin: in polyparse, backtracking is the default, and you mark definitely-non-backtrackable paths with 'commit'
01:11:14 <ivanm> Axman6: ^^
01:11:44 <Axman6> ah, right. heh, we've even talked before (hscolour author, made some hanges i was after)
01:11:48 <Axman6> changes*
01:20:24 <dcoutts> Axman6: pong
01:20:31 <Axman6> o/
01:21:03 <Axman6> i managed to get my problem fixed, but it turned up something not too nice. does cabal-install not yet work with ghc-6.12?
01:21:30 <hackagebot> control-event 1.1.0.2 - Event scheduling system. (ThomasDuBuisson)
01:23:38 <blackdog> dcoutts: you did the c2hs cabal integration, right? does it Just Work, or is there fiddling involved?
01:25:25 <dmead> sharpening the ban hammer
01:25:38 <dmead> woops
01:25:40 <dmead> wrong window
01:25:41 <dmead> suz!
01:25:54 <blackdog> dmead: should a banhammer be sharp? who'll clean up the mess?
01:26:06 <dmead> the sharper the better
01:26:25 <Axman6> can you even sharpen a hammer? i thought you'd want one to be blunt
01:26:39 <hiredman> I saw some d&d stats someone had drawn up for a banhammer item
01:27:46 <dmead> haha
01:28:06 <dcoutts> blackdog: it works if you're not using chs style {# imports #}
01:28:07 <dmead> i'm surprised an MMO hasn't had one yet
01:28:40 <dcoutts> blackdog: chs style {# imports #} require running c2hs on the modules in the right order, and Cabal does not do that.
01:29:03 <malcolmw> Axman6: pong
01:29:32 <Axman6> hi malcolmw, i was just wondering who you were, because i've been watching lots of the videos you've posted to vimeo :)
01:30:01 <blackdog> dcoutts: ok. don't think i'm using them, should be golden.
01:31:15 * Axman6 -> dinner
01:31:21 <malcolmw> Axman6: the videos are very popular
01:38:13 <lispy|web> videos?
01:39:11 <lispy|web> ?faq can Haskell post videos to the web?
01:39:11 <lambdabot> The answer is: Yes! Haskell can do that.
01:39:21 <lispy|web> It never gets old...
01:39:42 <lispy|web> @FAQ Can Haskell out substructural type OCaml?
01:39:42 <lambdabot> Unknown command, try @list
01:39:48 <lispy|web> @faq Can Haskell out substructural type OCaml?
01:39:48 <lambdabot> The answer is: Yes! Haskell can do that.
01:39:58 <lispy|web> That one should give a link to Oleg's site
01:40:12 <opqdonut> :P
01:40:37 <dolio> You mean structural type?
01:41:47 <dolio> I'm not sure HList out-does OCaml, either, despite it being pretty impressive that it's possible in Haskell at all. :)
01:42:31 <vegai> @faq Can Haskell be slower than  Ruby when massimporting files to sqlite?
01:42:31 <lambdabot> The answer is: Yes! Haskell can do that.
01:42:40 * vegai concurs.
01:43:21 <blackdog> ouch. how'd that happen?
01:43:54 <Alpounet> the structural stuff Oleg wrote is pretty impressive
01:44:14 <ciscbrain> @faq Can Haskell make you blow your foot off?
01:44:15 <lambdabot> The answer is: Yes! Haskell can do that.
01:44:21 <ciscbrain> this is nice..
01:45:14 <lispy|web> dolio: I dunno, I just skimmed oleg's latest email
01:45:27 <vegai> blackdog: bad coding from my part, probably :)
01:46:01 <dolio> Oh, that's got structural subtyping in the title.
01:46:10 <dolio> That's different from substructural typing, though.
01:46:42 <dolio> Substructural typing is what you get when to turn substructural logic into a type system. So, like, linear types. Uniqueness types....
01:46:46 <blackdog> vegai: if only there were some sort of statistically sound benchmarking package in Haskell
01:46:49 <ivanm> malcolmw: it would be nice if the video captions had who was speaking in each one rather than just the title...
01:47:44 <lispy|web> dolio: ah, I'm pretty adept at misquoting.  Glad you noticed ;)
01:48:20 <dolio> Well, whatever. It's pretty easy to switch them around like that.
01:49:13 <dolio> Kind of an unfortunate situation that two different things came to be so closely named.
01:49:20 <malcolmw> ivanm: the authors of the paper are listed in the description of each video
01:49:58 <ivanm> ahhhh, didn't see that... was just looking on the thumbnail page :s
01:50:13 <vegai> blackdog: :-D
02:05:59 <pozic> Is there any dependent type system that has the power of the calculus of (co) inductive constructions, but that is documented clearly in a document available on line? I also believe the Coq type system is too big, with all its module rules, and all that.
02:06:45 <dolio> Isn't Coq elaborated down to a pretty simple core theory?
02:08:38 <dolio> Not that I know of any good documents on it.
02:11:55 <pozic> dolio: the core is, but at least the reference manual doesn't make it easy to make a miniCoq.
02:12:46 <dolio> Well, there is still a fair bit to implementing the core that isn't in your typical "a simple dependent type theory" papers.
02:13:00 <dolio> Like, the impredicative Prop universe.
02:13:39 <dolio> And impredicative Set. I'm not even sure how that works.
02:18:45 <hackagebot> geniconvert 0.20 - Conversion utility for the GenI generator (EricKow)
02:21:48 <pozic> dolio: impredicative stuff is not anymore in 8.2 by default, AFAIK.
02:22:10 <dolio> I doubt they'd remove Prop.
02:22:18 <pozic> dolio: the typing rules for it are in the reference manual, they are just not straight forward.
02:22:20 <dolio> But I don't really use Coq, so I don't know.
02:22:49 <pozic> dolio: oh, I don't know either. I only used it for maybe 5 hours, or so.
02:37:43 <Axman6> hmm, what
02:37:52 <Axman6> what's a operator that works on only one thing?
02:38:00 <Axman6> like ¬True
02:38:03 <malcolmw> unary
02:38:05 <Botje> unary operator
02:38:12 <Axman6> unary, thanks :)
02:38:16 <mercury^> dons: are you there?
02:38:17 <Botje> or "a very picky operator" :)
02:38:51 <Axman6> @src Num
02:38:52 <lambdabot> class  (Eq a, Show a) => Num a  where
02:38:52 <lambdabot>     (+), (-), (*)           :: a -> a -> a
02:38:52 <lambdabot>     negate, abs, signum     :: a -> a
02:38:52 <lambdabot>     fromInteger             :: Integer -> a
02:39:49 <Axman6> :t reads
02:39:50 <lambdabot> forall a. (Read a) => String -> [(a, String)]
03:12:05 <Axman6> :t (/)
03:12:06 <lambdabot> forall a. (Fractional a) => a -> a -> a
03:12:12 <Axman6> @src Fractional
03:12:13 <lambdabot> class  (Num a) => Fractional a  where
03:12:13 <lambdabot>     (/)             :: a -> a -> a
03:12:13 <lambdabot>     recip           :: a -> a
03:12:13 <lambdabot>     fromRational    :: Rational -> a
03:13:13 <Axman6> @src Rational
03:13:14 <lambdabot> type Rational = Ratio Integer
03:13:18 <Axman6> @src Ratio
03:13:19 <lambdabot> data (Integral a) => Ratio a = !a :% !a
03:14:08 <pozic> mercury^: I think if you want to contact dons, you have to say that you found a bug in ByteString.
03:14:55 <ivanm> heh
03:15:09 <ivanm> @remember pozic I think if you want to contact dons, you have to say that you found a bug in ByteString.
03:15:10 <lambdabot> It is stored.
03:15:43 <dolio> Well, it's 3 A.M. where dons is now, I think.
03:16:06 <dolio> Unless he's traveling.
03:16:09 <ivanm> @time dons
03:16:11 <lambdabot> Local time for dons is Tue Sep 29 03:13:58 2009
03:16:30 <ivanm> unless he's logged in remotely, it sure looks like it's 3AM there...
03:18:50 <Axman6> :t (**)
03:18:51 <lambdabot> forall a. (Floating a) => a -> a -> a
03:18:58 <Axman6> @src Floating
03:18:58 <lambdabot> class  (Fractional a) => Floating a  where
03:18:59 <lambdabot>     pi                                                      :: a
03:18:59 <lambdabot>     exp, log, sqrt, sin, cos, tan                           :: a -> a
03:18:59 <lambdabot>     asin, acos, atan, sinh, cosh, tanh, asinh, acosh, atanh :: a -> a
03:18:59 <lambdabot>     (**), logBase                                           :: a -> a -> a
03:19:35 <Beelsebob> why... didn't I do that before
03:23:20 <ivanm> Beelsebob: because you didn't
03:23:22 <ivanm> duh
03:23:23 <ivanm> ;-)
03:23:54 <Beelsebob> ivanm: I spent all night trying to set up a python twitter script to run in cron
03:24:00 <Beelsebob> twidge just worked first time
03:24:05 <Beelsebob> I hadn't even checked hackage
03:24:10 <ivanm> heh
03:37:51 <sinelaw> question about infix: in a+b+c, what does haskell do? (a+b)+c or a+(b+c)?
03:38:07 <sinelaw> (still struggling with syntax, esp. bracketing)
03:38:32 <Axman6> > a + b + c
03:38:33 <lambdabot>   a + b + c
03:38:36 <Axman6> bleh
03:38:48 <Axman6> ((a + b) + c)
03:39:05 * Axman6 just happens to be writing a symbolic maths library at the moment to test such things
03:39:27 <sinelaw> Axman6, how do i know that? i mean from what syntax rule
03:39:42 <Axman6> because that's how (+) is defined
03:39:49 <opqdonut> ?info (+)
03:39:50 <lambdabot> (+)
03:40:07 <opqdonut> (+) is infixl 6 or something like that
03:40:09 <dibblego> sinelaw, :info (+) at ghci gives "infixl 6 +"
03:40:14 <Axman6> there's an infixl 3 (+) wherever the Num is defined (something like that at elast)
03:40:42 <sinelaw> so for every infix function, i need to check specifically how it's defined
03:40:50 <opqdonut> (it's stupid that ?info is different from :info)
03:40:52 <opqdonut> sinelaw: yeah
03:40:52 <Axman6> > sin pi :: CReal
03:40:54 <lambdabot>   0.0
03:40:56 <EnglishGent> does anyone know if there's a Haskell library for the flickr api?
03:41:07 <EnglishGent> :)
03:41:13 <sinelaw> opqdonut, ok and what if I just use `function`
03:41:13 <opqdonut> but some operators don't have associativity
03:41:17 <opqdonut> > True == True == True
03:41:18 <lambdabot>   Precedence parsing error
03:41:18 <lambdabot>      cannot mix `GHC.Classes.==' [infix 4] and `GH...
03:41:37 <opqdonut> sinelaw: that is infixl 9 by default
03:41:37 <opqdonut> (or something like that)
03:41:45 <sinelaw> what's 9?
03:41:49 <Axman6> > True == True == True == True
03:41:50 <opqdonut> but you can also say "infixr 5 function" if you want to
03:41:50 <opqdonut> sinelaw: the precedence level
03:41:50 <lambdabot>   Precedence parsing error
03:41:51 <lambdabot>      cannot mix `GHC.Classes.==' [infix 4] and `GH...
03:41:57 <sinelaw> ah
03:41:59 <sinelaw> 9 is highest or lowest?
03:42:13 <benmachine> opqdonut: @info is actually just @undo
03:42:18 <benmachine> this took me ages to work out
03:42:46 <opqdonut>  
03:42:55 <opqdonut> benmachine: ah :D
03:43:00 <opqdonut> sinelaw: lowest
03:43:33 * benmachine personally is of the opinion that 8 is lower than 9?
03:43:43 <sinelaw> opqdonut, so for example: return (:) ‘ap‘ c ‘ap‘ sequence cs
03:43:52 <opqdonut> i meant lowest precedence of course
03:44:03 <sinelaw> is really: return (((:) 'ap' (c 'ap' (sequence cs))))
03:44:11 <opqdonut> no
03:44:15 <opqdonut> function application binds tightest
03:44:51 <sinelaw> so (return (:)) 'ap' (c 'ap' (sequence cs)))
03:44:51 <sinelaw> ?
03:44:51 <opqdonut> so it's ((return (:)) `ap` c) `ap` (sequence cs)
03:44:52 <Axman6> so you can have sin x + cos y
03:44:54 <opqdonut> there's a section in the haskell report on these things
03:45:08 <opqdonut> you should probably read it
03:45:09 <sinelaw> opqdonut, ok i'll look it up
03:46:01 <Axman6> @src Complex
03:46:01 <lambdabot> data (RealFloat a) => Complex a = !a :+ !a
03:48:11 <Axman6> @hoogle Complex
03:48:12 <lambdabot> module Data.Complex
03:48:12 <lambdabot> Data.Complex data RealFloat a => Complex a
03:48:30 <Axman6> @src RealFloat
03:48:30 <lambdabot> Source not found. stty: unknown mode: doofus
03:48:33 <Axman6> :O
03:48:37 <Axman6> damn you lambdabot!
03:50:21 <ketil> @seen dcoutts
03:50:22 <lambdabot> Unknown command, try @list
03:50:27 <ketil> @botkick
03:50:27 <lambdabot> Unknown command, try @list
03:50:27 <lunabot>  :o
03:50:28 <dcoutts> @arr!
03:50:28 <lambdabot> Shiver me timbers!
03:50:39 <ketil> Hah.  It worked anyway :-)
03:50:45 <benmachine> @botverb
03:50:45 <lunabot>  :o
03:50:46 <lambdabot> Unknown command, try @list
03:51:01 <benmachine> oic
03:51:01 <ketil> I can only find a PDF presentation on Data.Text, not the thesis?
03:51:12 <dcoutts> ketil: ask Tom
03:51:12 <lambdabot> dcoutts: You have 1 new message. '/msg lambdabot @messages' to read it.
03:51:16 * ketil wonders who neutered the 'bot.
03:51:20 <ketil> @seen tom?
03:51:20 <lambdabot> Unknown command, try @list
03:51:21 <dcoutts> ketil: I'm not sure where it is published exactly
03:51:30 <benmachine> ketil: just @seen
03:51:43 <benmachine> preflex: seen someone
03:51:44 <preflex>  someone was last seen on ##c++ 19 days, 14 hours, 28 minutes and 35 seconds ago, saying: roxlu: oh.. ok then :)
03:52:08 <ketil> benmachine, OK, thanks.
03:52:29 * benmachine wonders if it is interesting that dcoutts saying @arr didn't trigger the new-message thing
03:52:36 <ketil> dcoutts, right - is he on here or should I find his email?
03:53:20 <sinelaw> opqdonut, the report is no easy read - it's complete and thus overwhelming
03:53:25 <ketil> dcoutts, I keep hearing (from the Unicode crowd) that UTF-16 is more efficient, but I like UTF-8.  So I am curious how they fare on different benchmarks.
03:53:56 <dcoutts> ketil: but why do you like UTF-8, I wonder if it's just a gut feeling or if it is rational ? ;-)
03:54:17 <Jafet> Efficient is a transitive adjective
03:54:17 <ketil> It's a gut feeling, but my gut is very rational.
03:54:23 <dcoutts> ketil: since the API does not let you know what the internal encoding is, what does it matter?
03:54:25 <ketil> (At least, it's where my rations go, if that counts)
03:54:47 <ketil> dcoutts, Efficiency, of course.
03:55:08 <dcoutts> ketil: right exactly, and that's why we implemented all three and benchmarked
03:55:15 <dcoutts> and picked the best
03:55:44 <dcoutts> and if the factors of compiler, cpu etc change then it can be changed
03:56:07 <ketil> I have fairly large textual data, a few gigabytes.  Plain ASCII, of course.
03:57:10 <ketil> Currently, I use ByteString, which works fine, of course.  But I strongly suspect that converting to UTF-16 would slow down things and increase memory overhead.
03:57:36 <dcoutts> ketil: right, you're not doing any unicode, so it'd all be overhead
03:57:57 * Jafet has a feeling that these conundrums would go away if the consortium adds gzipped encodings
03:58:09 <dcoutts> ketil: my intuition is that it's the extra comparisons needed for utf8 that makes it slower. Tight loops with lots of comparisons doesn't make ghc very happy. The results might look different in a couple years when the new backend is done. I think it'd also look different if you coded up the same tests in C.
03:58:29 <ketil> Yes.  Presumably, I should just stay with BS, and Data.Text isn't meant to replace it.
03:58:56 <dcoutts> ketil: it's supposed to be a good default choice for text
03:59:34 <dcoutts> ketil: and your GBs of ASCII only is a bit of an outlier so you can use the non-default choice of the Char8 view of bytestring
04:00:30 <ketil> Yes.  Although I think it's an important outlier - there's lots of data out there in 8-bit encodings that you can often ignore the particulars of.
04:01:40 <ketil> Anyway - I'll mail Tom H and ask for a PDF.  After all, curiosity killed whatever I was supposed to spend my time on. :-)
04:02:28 <sinelaw> help - this is my program: main = return (show [1..])
04:02:47 <sinelaw> running "runghc bla.hs" works, but compiling ghc and running it does nothing
04:03:42 <lpsmith> ketil:  there was an interesting discussion of various unicode encodings on LtU:  http://lambda-the-ultimate.org/node/3166#comment-46295
04:03:58 <lpsmith> I found shap's reply particularly interesting.
04:04:06 <ketil> lpsmith, thanks - will look.
04:10:02 <ketil> lpsmith, shap reflect to a large extent my views.  The great thing about utf-8 is that the cost for plain ascii is very close to bytestring, so it seems a good candidate if one is aiming for a replacement.
04:14:52 <lpsmith> Yeah, I'm curious why some people claim UTF-16 is "faster",  and if their claims are really very credible
04:15:17 <lpsmith> Although I've heard it's often a good choice for chinese character sets
04:15:25 <vegai> anyone know if HDBC-sqlite3 can be opened in deferred or exclusive lock mode?
04:15:38 <vegai> s/be opened/open a db/
04:17:03 <ketil> lpsmith, If you fit into the BMP, but not into 2-byte utf-8, this isn't surprising.  But I'm not so sure why we should optimize Chinese at the expense of everybody else - keep in mind that a Chinese code-point represents a word, not a phoneme.
04:17:08 <lilac> lpsmith: i think the speed question depends a lot on the type of text you're processing. if you're doing something weird where UTF-8 gives you three octets per character, then /maybe/...
04:17:43 * lilac doesn't know which characters require three bytes in UTF-8 though...
04:17:52 <SamB_XP> well, utf-8 has a lot more branches when you're decoding anything but pure ASCII ...
04:18:26 <lilac> i would guess that a UTF-8 processing algorithm would be memory-bound or IO-bound
04:18:30 <ketil> Quote from LtU: "It isn't as though we often have valid reason to 'index' into strings other than to iterate through them."
04:19:19 <hackagebot> hssqlppp 0.0.8 - Sql parser and type checker (JakeWheat)
04:19:21 <ketil> This is exactly the opposite of my sentiment: iteration is done by HOFs or uncons/take/drop, indexing is only for random access.
04:19:24 <SamB_XP> lilac: well, it kind of sucks for in-memory
04:20:41 <lilac> SamB_XP: i can't know without profiling but i'd think getting half as many L2 cache misses would outweigh the increase in branches for text which is mostly ascii
04:21:36 <lilac> the code complexity which arises from dealing with utf-8 is another matter, but the same problem arises for utf-16
04:21:50 <SamB_XP> hmm.
04:22:17 * lilac is in favour of utf-8 on disk for mostly-ascii text and ucs-4 in memory
04:22:37 <lilac> but the in-memory question depends on how much text you're storing in memory at once.
04:23:20 <Zao> There's always somewhat clever tradeoffs like Data.Text's Text.
04:24:26 <lilac> i find my thinking on such matters is helped by imagining that utf-8 and utf-16 are just compression algorithms
04:24:54 <lilac> (and they're not even /good/ compression algorithms for text...)
04:25:02 <Jafet> That is what an encoding sometimes does, and sometimes doesn't
04:25:23 <Jafet> GzippedText
04:25:42 <Jafet> Like, who needs random access anyway
04:26:15 <SamB_XP> well, dictd, for one
04:26:30 <SamB_XP> not that that stops it from using gzip-compatible files anyway
04:27:17 <Jafet> Dictionaries aren't "GBs of text"
04:27:38 <Jafet> Come to think of it, I've never encountered GBs of text, much less Unicode text
04:28:16 * SamB_XP wonders what Gutenburg is up to
04:34:58 <ketil> Jafet: your genome is about 3GB of text, but the encoding is not (yet) supported directly in Haskell.
04:35:59 <ketil> Comparisons between gene sets can often generate several GBs of XML (and thus, nominally, Unicode) text.
04:36:32 <SamB_XP> biologists are insane
