00:07:49 <ncalexan> @keal
00:07:49 <lambdabot> nsa prevent me from returning to math on efnet
00:07:53 <ncalexan> @keal
00:07:53 <lambdabot> i just got banned from math because i not have good ability to convey thoughts
00:07:57 <ncalexan> @keal
00:07:57 <lambdabot> all i know is i have experienced my own death unhappening...
00:10:25 <ski> @yarr
00:10:25 <lambdabot> Aye
00:22:55 <lispy> oh geez, i thought keal was really here for a second
00:26:14 <bolrod> @yarr
00:26:14 <lambdabot> Smartly me lass
00:59:28 <araujo> Hello everyone!
02:16:10 <farre> ping nibro
03:04:38 <shapr> akemp: Loop isn't stateful quite like you think. For functions you have recursion, for monads you have mfix, and for arrows you have loop. Look at http://www.cse.ogi.edu/PacSoft/projects/rmb/recdo.ps.gz
03:07:10 <shapr> Lots of quiet today.
03:07:17 <shapr> Lots of joining and leaving too.
03:08:20 <tic> I think the proper term is a "net split" :P
03:08:32 <ValarQ> nah, it's just plain quiet
03:10:31 <tic> it's not. case in point.... ;)
03:14:08 <ValarQ> well, i guess you can't argue whether it's quiet or not without breaking the silence...
03:18:39 <twobitsprite> does doing something like "newtype Foo = Bar Int deriving Num" kind of defeat the purpose? It seems like when I do that, any function which accepts a Foo will also accept an int... 
03:19:21 <audreyt> twobitsprite: no, it wouldn't; a function accepting (Num a)=>a will accept both, but a function accepting Foo will reject Int.
03:19:26 <tennin> what exactly do I need to compile GHC from darcs source?
03:20:19 <audreyt> tennin: http://cvs.haskell.org/cgi-bin/cvsweb.cgi/~checkout~/fptools/ghc/HACKING?content-type=text%2Fplain
03:22:20 <twobitsprite> audreyt: it doesn't seem like it... I have "f :: Position -> Position" and "f (Pos n) = Pos (n + 4)" but when I load it in ghci and say "f 5" I get "Pos 9"...
03:23:33 <audreyt> twobitsprite: because 5 is a (Num a)=>a
03:23:35 <audreyt> not a Int
03:23:45 <audreyt> f (5::Int) -- this would fail
03:24:09 * audreyt kinda hopes String is a (Str a)=>a also
03:24:15 <audreyt> I mean, "string"
03:24:28 <tennin> ok --- do I need a newer existing GHC than 6.4.1, though?
03:24:31 <audreyt> that will cleanly make fps integration so much easier
03:24:38 <audreyt> tennin: I think 641 would do
03:25:19 <Ringer> Hello, how to compile haskel programm as static library and use it in C++?
03:25:19 <twobitsprite> audreyt: hmm... I want to make it so that my function will only accept things that were constructed like "Pos ..."
03:25:59 <tennin> it's complaining about Distribution/Compat stuff
03:26:03 * shapr boings
03:26:16 <tennin> oh well, I probably shouldn't be trying to do this yet anyway
03:26:27 <audreyt> twobitsprite: "5" is always a valid constructor to Pos, if you derive Num.
03:26:41 <audreyt> twobitsprite: if you don't like that... don't derive num :)
03:26:57 <twobitsprite> audreyt: hrm... that means I'll have to define my own arithmetic... :P
03:26:59 <audreyt> (or derive Num manually, and disable the fromInteger method)
03:27:07 <twobitsprite> ahh
03:27:12 <twobitsprite> I'll try that
03:27:54 <tennin> I just want the GHC API stuff
03:30:50 <beelsebob_> @where paste
03:30:50 <lambdabot> http://paste.lisp.org/new/haskell
03:32:06 <Ringer> sory for repeat, how to compile haskel programm as static library and use it in C++?
03:33:24 <Ringer> does anybody know?
03:33:50 <sieni> Ringer: http://www.haskell.org/ghc/docs/6.4/html/users_guide/ffi.html
03:34:06 <twobitsprite> typically one wants to have the higher-level language call out to the lower-level language, so I don't know how much support there is for doing things the other way'
03:35:21 <shapr> http://www.haskell.org/hawiki/FfiTutorial
03:35:33 <shapr> See the "Calling Haskell From C" section
03:35:34 <sieni> twobitsprite: it sounds reasonable to want to write a library in Haskell and provide a C interface to non-Haskell users
03:36:00 <twobitsprite> sieni: I suppose...
03:36:11 <shapr> mmm, milk
03:36:28 <shapr> I want Sake!
03:39:19 <Ringer> sieni: yes you right
03:48:12 <sieni> hs_init() ignores second and subsequent calls, so it appears that the ghc run time system can be shared between different libraries written in Haskell that provide a C interface.
03:58:33 <Ringer> as i understend, we cant use FFI library as simple as extern C... 
04:01:14 <Ringer> for library users can simply use library must create wrapper in C
04:01:52 <Ringer> sory for my horrable english :)
04:02:11 <musasabi> one can use foreign exported functions straight from C.
04:11:53 <Ringer> did someone have using Haskell libraryes in C++ experience?
04:17:04 <Ringer> i want to use Haskell for develop AI module for game, all other game modules in C++
04:17:39 <tre_> is there a haskell paste site?
04:17:44 <tre_> lisppaste2, url?
04:17:45 <lisppaste2> To use the lisppaste bot, visit http://paste.lisp.org/new/haskell and enter your paste.
04:17:47 <tre_> lisppaste2, url
04:17:48 <lisppaste2> To use the lisppaste bot, visit http://paste.lisp.org/new/haskell and enter your paste.
04:17:55 <tre_> lisppaste2 url
04:17:55 <lisppaste2> To use the lisppaste bot, visit http://paste.lisp.org/new/haskell and enter your paste.
04:18:35 <Lemmih> Ringer: There's quite a bit of overhead in using Haskell from a foreign langauge.
04:20:07 <musasabi> Ringer: just declare the Hasekell parts in a header in a foreign "C" { declarations } block.
04:21:39 <lisppaste2> tre pasted "haskell road, chapter 1 question" at http://paste.lisp.org/display/18199
04:21:56 <tre_> http://paste.lisp.org/display/18199
04:22:37 <tre_> nvm, I figured it out via trial and error
04:24:37 <Ringer> i confused that hs_init() hs_exit();
04:25:07 <shapr> Is there an SVG dtd for HXT or HaXml?
04:25:09 <Ringer> i confused that hs_init() hs_exit() must used
04:28:10 <Ringer> so library users must use HsFFI.h and some strange initializations like hs_init() and hs_exit()
04:29:58 <tre_> thanks Beelsebo1 
04:30:12 <tre_> woops, you get the idea ;)
04:32:09 <timbod> I've written some straightforward haskell code for drawing charts (ie XY plots etc). Before I go much further - anyone aware of anything similar that already exists?
04:38:58 <musasabi> Ringer: just have too extra routines mylib_init() and mylib_cleanup() that call hs_init/hs_exit. They only need to be called once (and forgetting hs_exit should not matter on most systems)
04:40:26 <shapr> Totally off-topic but geeky + funny - http://news.com.com/Roomba+takes+Frogger+to+the+asphalt+jungle/2100-1043_3-6049922.html
04:40:45 <shapr> timbod: There was a long gnuplot thread a few months back.
04:40:48 <shapr> check the mailing lists.
04:41:14 <shapr> timbod: If you don't like gnuplot, check out gtk2hs and cairo, you'll get gorgeous output.
04:41:25 <dcoutts> :-)
04:41:57 <boegel> shapr: did you enjoy the FunMath info I showed you ?
04:42:23 <timbod> shapr: What I've got is using cairo (and gtk2hs just for displaying windows so far). The output is pretty nice
04:43:27 <boegel> timbod: screenshots ?
04:45:12 <timbod> boegel: It's not really fit for public consumption yet - hence my original question. Can I paste a ScreenShot somewhere now?
04:45:30 <xerox> Yes, you can use <http://www.imageshack.us> !
04:45:39 * xerox waves
04:46:27 <Ringer> musasabi: thank you for advice :)
04:47:39 <boegel> timbod: anywere really, use your own webspace and name it temp.png or whatever
04:47:48 <boegel> just something we can drool on
04:53:48 <timbod> boegel: It's only early stages: http://www.dockerz.net/twd/chart.png
04:53:58 <timbod> but cairo + haskell = nice
04:54:16 <xerox> @karma+ timbod -- right on!
04:54:16 <lambdabot> timbod's karma raised to 1.
04:54:19 <dcoutts> timbod, that's nice!
04:54:45 <dcoutts> timbod, when you're in less early stages can we hae some screenshots + a little blurb for the gtk2hs web site?
04:55:03 <dcoutts> like these:
04:55:03 <dcoutts> http://haskell.org/gtk2hs/archives/category/screenshots/
04:55:53 <timbod> No problem - it's just something I've been tinkering in 15-30 min chunks on my ferry ride to work (over the last week or so)
04:56:58 <timbod> dcoutts: that clock is pretty slick.
04:57:12 <dcoutts> aye ;-)
04:57:37 <xerox> timbod: so you've built up some framework to plot?
05:00:11 <timbod> xerox: It's mean to be general purpose, but it's not sophisticated yet. Data types for axes, plots, and layouts. Immediate needs are legends, and automatic axis scaling and labelling.
05:01:20 <shapr> timbod: wow, looks nice.
05:01:56 <shapr> I'd say, put up a darcs repo and mention your code on the haskell-cafe list.
05:04:00 <timbod> shapr: I know the release often/release early bit, but it's just a bit too early :-)
05:04:47 <timbod> I'm just trying to get gtk2hs up and running on my mac now (so far it's been under linux).
05:05:34 <dcoutts> timbod, let me know how that goes, I'm told it works but I've never been able to test it personally.
05:05:37 <xerox> timbod: which mac?
05:06:29 <timbod> xerox: g5 imac. I'm presently waiting for darwinports to compile half of gnome :-(
05:06:41 <xerox> Ouch.
05:07:15 <xerox> I'll investigate the matter too, soonish.
05:07:21 <dcoutts> timbod, gtk2hs only needs gtk+ and you probably want glade too
05:07:44 <dcoutts> you don't need all of gnome for gtk2hs
05:08:18 <xerox> Maybe darwinports has freaky dependencies?
05:09:06 <timbod> dcoutts: I got the gtk2hs configure script to run ok, but glade, gtksourceview etc weren't there. I'm a bit surprised at how many extra packages they depend on.
05:11:35 <dcoutts> timbod, that's ok they're optional
05:11:51 <dcoutts> timbod, the configure script notices they're not present and doesn't build those bits
05:12:02 <timbod> dcoutts: sure, but I was greedy, and decided I wanted them.
05:12:10 <dcoutts> ah ok
05:35:53 <juhp> dcoutts: thanks again for the ghc gcc41 patch headsup :)
05:36:44 <dcoutts> juhp, it's cparrott who deserves the credit
05:37:01 <dcoutts> juhp, I'd never try gcc 4.1 on my desktop :-)
05:37:08 <adu> ghc is connected to gcc?
05:37:15 <mikezs> just wondering, how do you get the first, second or whatever element from a n-tuple?
05:37:18 <dcoutts> adu, rather intimately
05:37:24 <adu> cool
05:37:32 <juhp> adu: building particularly yes
05:37:35 <adu> o ya it compiles to C,, forgot
05:38:08 <adu> dcoutts why wouldn't you try gcc 4.1?
05:38:35 <dcoutts> adu, because it's still masked in gentoo and I run a mostly stable system
05:39:00 <adu> does masked == unstable?
05:39:22 <dcoutts> juhp, but my top tester runs all the latest stuff so he found the problem, fixing it was easy once we knew what was going on
05:39:30 <dcoutts> adu, it means not well tested
05:39:41 <adu> ic
05:40:13 <adu> mikezs: define your own functions
05:40:55 <adu> n1of5 (a, b, c, d, e) = a
05:40:57 <adu> n2of5 (a, b, c, d, e) = b
05:40:59 <adu> etc...
05:43:40 <xerox> Or use some more meaningful datatype, with records.  data Foo = Foo { bar :: Int, baz :: String, ... }.  Each of bar, baz, ... are functions Foo -> type.
05:52:06 <Saulzar> Hmm, does anyone know where the equivalent for glActiveTexture exists in HOpenGL? It's eluding me 
05:54:28 <Saulzar> (As I say that it shows up...)
05:56:11 <Saulzar> A bit out of the way to be in CoordTrans
06:01:13 <ihope> Now which channel did I forget to join?
06:04:29 <timbod> dcouts: gtk2hs + cairo works for me now
06:04:45 <dcoutts> timbod, nice, did you need to do anything special?
06:05:02 <dcoutts> timbod, and you used darwin ports to install gtk+ etc right?
06:05:30 <timbod> Had to manually set the LD_LIBRARY_PATH at runtime to prevent "can't load .so/.DLL for: png12 (dlopen(libpng12.dylib, 10): image not found)"
06:05:45 <timbod> dcoutts: yes that was with darwinports
06:06:18 <timbod> It all built cleanly which was pleasing indeed.
06:06:24 <dcoutts> great
06:06:35 <dcoutts> timbod, darwinports dosn't put libpng on the library path?
06:07:37 <timbod> It put it into /opt/local/lib, which presumably is found for normal exes. Don't know why I needed to set LD_LIBRARY_PATH explicitly to make the dlopen work
06:18:51 <ihope> > 8^5
06:18:52 <lambdabot> 32768
06:19:09 <ihope> > (8^5) `mod` 9 -- what's the fixity of `mod`?
06:19:10 <lambdabot> 8
06:30:39 <ihope> > 8^5 `mod` 9
06:30:40 <lambdabot> 8
06:30:50 <ihope> > 8^(5 `mod` 9)
06:30:51 <lambdabot> 32768
06:33:34 <dblhelix> ihope: class (Real a, Enum a) => Integral a where
06:33:34 <dblhelix>   ...
06:33:34 <dblhelix>   mod :: a -> a -> a
06:33:34 <dblhelix>   ...
06:33:35 <dblhelix>         -- Imported from GHC.Real
06:33:37 <dblhelix> infixl 7 mod
06:33:58 <ihope> Thanks
06:34:06 <dblhelix> ihope: the same as `div`, so that makes sense ;)
06:34:17 <ihope> Yep, it does :-)
06:34:32 <Saulzar> You can find out from :info in ghci
06:34:46 <chrisbrown> has anyone here used the ghc-api?
06:36:27 <ihope> I oughta give lambdabot an @info once I'm done with my threaded factorial function.
06:36:47 <xerox> Hm?
06:36:59 <xerox> chrisbrown: Lemmih played with it extensively I think.
06:37:32 <chrisbrown> thanks
06:37:44 <chrisbrown> Lemmih: have you used the ghc-api?
06:40:34 <dons> he's the authority on the ghc-api
06:53:17 <bolrod> dblhelix: any chance we're getting the marks of the first practicum any time soon ? :)
06:55:47 <dons> ihope, we added an @info once. but it's really noisy, so it got disabled
06:55:56 <dons> if you can think of a concise version, that'd be cool
06:56:03 <ihope> Maybe @fixity?
06:56:07 <dons> it can't just print the result of :info
06:56:10 <dons> yeah, perhaps that.
06:56:31 <dons> and another for the class members
06:56:55 <dons> you could add it to the Type plugin, which does other interactions with ghci
06:57:11 <Lemmih> chrisbrown: Yeah.
06:57:16 <dblhelix> bolrod: I'm still awaiting the results from one student-assistent; I expect to receive those tomorrow; then results will probably be published Sunday evening
06:57:50 <ihope> And could replies to the "normal" @info just always go directly to the requesting user, rather than the channel?
06:58:04 <bolrod> hrmm
06:58:40 <xerox> That's quite a nice idea.
06:59:24 <dons> that's a possibility. a bit more work.
06:59:37 <dons> or @info could just emit the ghci command line you should be using ;)
06:59:42 <ihope> :-)
07:00:10 <bolrod> dblhelix: ok =)
07:01:25 <xerox> That requires copy&paste, dons! Awww...slackslackaslack.
07:03:20 <dons> ok, lambdabot should install itself on the user's machine, via ctcp, and then launch ghci with the correct command
07:03:30 <dons> I think that would be reasonable
07:03:48 <ihope> Hmm, I think so.
07:05:05 <edwinb> I don't suppose anyone here is familiar with using the TFP latex class file?
07:06:40 <dons> i think ndm had a paper in tfp last year?
07:07:31 <edwinb> I just get an annoying and apparently ignorable error from LaTeX...
07:11:35 <ihope> How long will it take to factor this ~270-digit number?
07:12:08 <dons> my grandma would ask "how long is a piece of string?" in return.
07:12:25 <ihope> :-)
07:12:28 <dons> i always thought that an odd question.
07:15:02 <ihope> The last 6 digits are 541801
07:15:02 <ihope> Eh, what the heck. I'll decide the answer is 5.
07:15:02 <ihope> "Therefore, it MUST BE FIVE!"
07:33:12 <chrisbrown> Lemmih: can I use the api with ghc 6.4, or do I need 6.5?
07:33:25 <pierre-> @where FastCGI
07:33:25 <lambdabot> I know nothing about fastcgi.
07:34:16 <Lemmih> chrisbrown: You need ghc-6.5
07:34:36 <chrisbrown> is there any documentation?
07:34:53 <Lemmih> chrisbrown: I wrote a compat library for 6.4.x but it's pretty hacky.
07:34:58 <chrisbrown> ok
07:35:07 <Lemmih> chrisbrown: No, there's only the source.
07:35:36 <chrisbrown> i'm hoping it will fix the issues im having with the programatica type checker
07:39:07 <pierre-> where can i get the FastCGI library?
07:39:59 <Lemmih> http://www.cs.chalmers.se/~bringert/darcs/haskell-fastcgi/
07:40:24 <pierre-> Lemmih: thanks
07:41:25 <chrisbrown> Lemmih: I take it i need to download ghc 6.5, are there any options i need to build the api?
07:43:21 <ndm> does anyone know how i can test if i am at the end of the string with parsec?
07:43:33 <ndm> i want to do if the string is now empty, do somehting, else do something else
07:44:33 <Lemmih> chrisbrown: Nope. The API is always built since it's used by the GHC binary.
07:44:43 <chrisbrown> ok
07:44:50 <chrisbrown> I'll give it a whirl
07:45:02 <Lemmih> ndm: eof; ... <|> other
07:45:10 <ndm> Lemmih: perfect, thanks!
07:47:46 <ihope> @index <|>
07:47:47 <lambdabot> Text.ParserCombinators.Parsec.Prim, Text.ParserCombinators.Parsec
07:48:39 <ihope> @moo
07:48:40 <lambdabot> Maybe you meant: map more msg todo yow
07:53:02 <pierre-> @where cgi
07:53:03 <lambdabot> I know nothing about cgi.
07:54:52 <dcoutts> vincenz, do you mind if I stick that pic of your red-black tree debugging on the gtk2hs website?
07:55:36 <dcoutts> vincenz, I know it's not a ploished thing, but it's nice for users to know that it's possible to use gtk2hs+cairo for quick one off / throw away programs.
07:55:58 <pierre-> @where fps
07:55:58 <lambdabot> http://www.cse.unsw.edu.au/~dons/fps.html
07:57:49 <vincenz> dcoutts: sure
07:58:05 <vincenz> @where hac
07:58:06 <lambdabot> http://haskell.org/haskellwiki/HAC
07:58:11 <dcoutts> vincenz, should I use this one, or a different one? http://oasis.yi.org:8080/test.png
07:58:39 <vincenz> heh...wait up
07:59:22 <pierre-> @where unix
07:59:22 <lambdabot> I know nothing about unix.
08:00:32 * adu hits lambdabot with a wet fish
08:00:43 <vincenz> dcoutts: I can make a better pic
08:00:48 <dcoutts> vincenz, cool
08:00:53 <vincenz> the new ones have lines
08:01:33 <dcoutts> nice
08:01:42 <dcoutts> vincenz, so how long did it take to write?
08:01:45 <vincenz> but that'll have to be later... my laptop is shutdown and I have to run to the doctor for a tetanosthingy
08:01:51 <vincenz> dcoutts: not long at all
08:01:55 <dcoutts> ok
08:02:06 <dcoutts> vincenz, I'm thinking about what to write for the blurb
08:02:09 <vincenz> ah yes, a tetanos shot, the word escaped me
08:02:15 * xerox sings puuure, puuuure, puuuure.
08:02:31 <dcoutts> hia xerox :-)
08:02:39 <xerox> Hey :-)
08:02:48 <dcoutts> when are we going to look at that pure cairo layer?
08:03:02 <dcoutts> pure *typed* cairo layer
08:03:06 <xerox> Mumble.
08:03:08 <vincenz> dcoutts: after countless hours of hacking an RB tree, and getting frustrated, I finally coded up a haskell program to check the consistency.  With the help of this I was easily able to find the final bug which I doubt I would've ever found without the visual view of the tree, allowing me to detect exactly what case was failing
08:03:27 <pierre-> strange, i'm trying to build the FPS library, but ghc hags out with "ghc.exe -- error encountered" (i'm using WinXP)
08:03:35 <pierre-> where the problem can be
08:03:37 <dcoutts> vincenz, that's a nice blurb! I'll use that.
08:03:38 <xerox> After tomorrow's test I think I'm quite free from schoolstudying.
08:03:39 <pierre-> ? 
08:03:44 <dcoutts> xerox, cool
08:03:48 <vincenz> dcoutts: you can have the entire code if you want
08:03:53 <dcoutts> xerox, good luck
08:03:57 <dcoutts> vincenz, that'd be nice
08:04:01 <xerox> Until 27, when I'll depart for Vienna
08:04:08 <vincenz> but later...gotta go to the doctor and get me a sore arm :(
08:04:11 <xerox> Vien?  I don't know how's called in englush :-)
08:04:15 <dcoutts> vincenz, have fun :-)
08:04:23 <vincenz> xerox: vienna
08:04:30 <xerox> Then, study study study, exam exam exam, puff pant urgh.
08:04:39 <dcoutts> poor xerox 
08:04:51 <vincenz> wait
08:04:52 <vincenz> that's
08:05:00 <xerox> thanks :-(
08:05:00 <vincenz> study study study, exam exam exam, sex sex sex?
08:05:12 <vincenz> or what's the puff pant urgh
08:05:31 <xerox> Tomorrow's one is about YOUR reinessance, Duncan... I must admit it doesn't *really* interest me... but that is :-)
08:05:42 <xerox> (English licteracy)
08:06:00 <dcoutts> xerox, heh, it doesn't interest me too much either :-)
08:06:14 <xerox> Who would have said!  <snork>
08:06:19 <vincenz> it's easy, the only thing worth remember about renaissance is da vinci
08:06:32 <vincenz> :D
08:06:44 <xerox> Britain!
08:07:08 <adu> and banks
08:07:10 <xerox> Coleridge, Wordsworth, Shelley, ....
08:07:23 <vincenz> che palel
08:07:24 <adu> we owe private banking to the renaissance
08:07:31 <vincenz> palle even
08:07:37 <vincenz> anyways I'm off before the doctor closes
08:07:42 <xerox> Good luck!
08:07:49 <vincenz> yeah thx :/
08:08:10 <vincenz> there's a reason the last time I got one of these was 13 years ago
08:09:14 <adu> Medici
08:09:22 <adu> thats the name
08:09:40 <xerox> Weren't they in Florence?
08:10:50 <adu> yes, they were major players in the Italian Renaissance
08:11:16 <xerox> Ar you italian?
08:11:22 <adu> no
08:11:28 <xerox> Okay.
08:18:03 <dcoutts> yay, ghc-6.4.1 is going to get marked stable on x86 & amd64 today (in Gentoo that is)
08:18:47 <dcoutts> just in time for ghc-6.4.2 to come out :-)
08:22:20 <chrisbrown> Lemmih: can you remember which build of 6.5 you used?
08:22:27 <chrisbrown> im trying to find one that will compile :)
08:32:28 <Lemmih> chrisbrown: I pulled it yesterday, I think.
08:40:36 <davidhouse> afternoon all
08:44:02 <lesshaste> if I have
08:44:03 <lesshaste>   member []     y = False
08:44:04 <lesshaste>   member (x:xs) y = (x==y) || member xs y
08:44:08 <araujo> Hello!
08:44:16 <lesshaste> will this terminate on an infinite list if x is found?
08:44:26 <ihope> Yep.
08:44:28 <lesshaste> I mean y is found :)
08:44:31 <lesshaste> ihope, why is that?
08:44:43 <jethr0_> > True || undefined
08:44:44 <lambdabot> True
08:44:56 <ihope> Well, the (x==y) || member xs y doesn't evaluate member xs y if (x==y) is true.
08:45:48 <boegel> > 1 > 0 || 1 > 1/0
08:45:48 <lambdabot> True
08:45:54 <boegel> > 1 > 1/0
08:45:55 <lambdabot> False
08:46:01 <boegel> > 1 > (1/0)
08:46:02 <lambdabot> False
08:46:08 <boegel> anyway, you get the point :p
08:46:09 <ihope> > 1 < 1/0
08:46:10 <lambdabot> True
08:46:15 <wilx> > 1/0
08:46:15 <lambdabot> Infinity
08:46:25 <rizzix> rofl
08:46:25 <boegel> > 1 > Infinity
08:46:26 <lambdabot>  Not in scope: data constructor `Infinity'
08:46:35 <wilx> @index Infinity
08:46:36 <lambdabot> bzzt
08:46:42 <boegel> anway
08:46:43 <davidhouse> no public constructors
08:46:47 <boegel> *anyway
08:46:49 <boegel> I'm off home
08:46:53 <davidhouse> it's even signed:
08:46:56 <davidhouse> > -1/0
08:46:57 <lambdabot> -Infinity
08:46:59 <boegel> my last night at home with my parents
08:47:07 <boegel> wo0 !
08:47:19 * ihope still thinks infinity = -infinity
08:47:20 <wilx> Hmm, what if you want to use infinity or NaN in floating point computation?
08:47:35 <lesshaste> ihope, ah right.. so basically || is defined in some clever way 
08:47:45 <ihope> Not really.
08:47:50 <ihope> True || _ = True
08:47:55 <ihope> False || x = x
08:48:07 <lesshaste> ihope, right.. it could be defined as _ || True = True
08:48:11 <ihope> Yep.
08:48:14 <lesshaste> ihope, how would you know it wasn't?
08:48:21 <davidhouse> > 1/0 || True
08:48:21 <ihope> > True || undefined
08:48:22 <lambdabot>  add an instance declaration for (Fractional Bool)
08:48:23 <lambdabot> True
08:48:25 <ihope> > undefined || True
08:48:26 <lambdabot> Undefined
08:48:29 <ihope> That way.
08:48:37 <lesshaste> testing :)
08:48:39 <lesshaste> thx
08:49:00 <lesshaste> I only just understand that you have ghc wired up to this channel :)
08:49:06 <ihope> :-)
08:49:07 <lesshaste> I was wondering what you were doing :)
08:49:14 <rizzix> lambdabot
08:49:17 <rizzix> :)
08:49:22 <lesshaste> cool
08:49:37 <lesshaste> what is the terminology for being strict on one side of the argument?
08:49:55 <ihope> Um...
08:49:58 <rizzix> ~?
08:50:02 <lesshaste> err.. even that might not have been the right way to put it
08:50:10 <lesshaste> I mean when you only need to evaluate the right hand side
08:50:22 <lesshaste> for example
08:50:30 <ihope> I dunno.
08:50:35 * ihope must go now
08:50:37 <lesshaste> me neither :)
08:50:38 <lesshaste> thx ihope 
08:51:03 <lesshaste> is the y =(x==y) really needed?
08:51:10 <lesshaste> what's wrong with just (x==y) ?
08:51:24 <rizzix> ??
08:51:25 <lambdabot> Not enough arguments to @.
08:51:28 <araujo> (||) is one of the so called "short circuit" operators.
08:51:42 <davidhouse> lesshaste, where are you looking?
08:51:50 <lesshaste>   member []     y = False
08:51:50 <lesshaste>   member (x:xs) y = (x==y) || member xs y
08:52:04 <lesshaste> I was wondering why y=(x==y) is needed
08:52:09 <davidhouse> and what are you proposing to change it to?
08:52:20 <lesshaste>  member (x:xs) (x==y)  || member xs y
08:52:23 <rizzix> that = is an assignment operator so as to speak :P
08:52:29 <lesshaste> hmm...
08:52:30 <davidhouse> you're defining the function
08:52:32 * lesshaste runs away
08:52:37 <lesshaste> I got confused..sorry
08:52:45 <davidhouse> you're saying member, given (x:xs) and y, is the result of (x==y) || member xs y
08:52:53 <lesshaste> no.. I got confused
08:52:56 <lesshaste> I am saying nothing !
08:53:18 <lesshaste> thx for not flaming me :)
08:53:26 <davidhouse> > let member _ [] = False; member y (x:xs) = (x==y) || member y xs in 5 `member` [1..10]
08:53:27 <lambdabot> True
08:53:57 <davidhouse> (swapped the arguments around to make the infix a bit prettier)
08:54:16 <rizzix> > let a = 1
08:54:16 <lambdabot>  parse error on input `}'
08:54:42 <rizzix> hmm i need an auto rejoin
08:56:01 <davidhouse> > let member x l = maybe False (const True) $ find (==x) l in 5 `member` [1..10]
08:56:02 <lambdabot> True
08:56:18 <rizzix> const?
08:56:19 <davidhouse> > let member = elem in 5 `member` [1..10] -- :)
08:56:20 <lambdabot> True
08:56:29 <davidhouse> const x _ = x
08:56:39 <rizzix> oh
08:56:44 <davidhouse> const True is just \_ -> True
08:57:15 <pierre-> hello.
08:57:39 <davidhouse> > 5 `elem` [1..]
08:57:40 <lambdabot> True
08:57:52 <pierre-> is there any examples of using Network.CGI?
08:58:02 <davidhouse> @google examples Network.CGI haskell
08:58:04 <lambdabot> http://www.haskell.org/ghc/docs/6.4/html/users_guide/packages.html
08:58:37 <pierre-> ? there's nothing interesting...
08:58:46 <davidhouse> sorry. just thought i'd try google
08:59:45 <rizzix> > let member = elem in member 10 [1..]
08:59:46 <lambdabot> True
09:00:09 <pierre-> i tried to google already
09:01:24 <davidhouse> anyone got GHC installed on SUSE?
09:02:02 <Saulzar> I have, davidhouse 
09:02:12 <davidhouse> Saulzar: use a package? or was it from source
09:04:53 <MarcWeber> do you have some MonadIO examples? I want to learn why I get this error: Ambiguous type variable `m' in the constraint:
09:04:57 <MarcWeber>       `MonadIO m' arising from use of `con' at test2.hs
09:05:45 <davidhouse> MarcWeber: pastebin some code
09:07:24 <rizzix> is there any javadoc like support for haskell?
09:08:07 <adu> rizzix : do you mean literate haskell?
09:08:21 <adu> in literate haskell you can have TeX commands and stuff
09:09:16 <MarcWeber> davidhouse: http://www.rafb.net/paste/results/8rEtE712.html
09:09:24 <rizzix> Yea. I was thinking more along the lines of extracting comments from haskell files as "html" docs
09:10:14 <davidhouse> MarcWeber: what's the type of con?
09:10:20 <adu> rizzix : you can extract everything between \end{code} and \begin{code} which will be the comments
09:10:58 <adu> latex renders to HTML iirc...
09:11:29 <rizzix> ic.. and are the standard libraries documented ?
09:11:33 <adu> so you don't need a javadoc-like tool with literate haskell, you just need tex
09:12:21 <adu> they're documented in the standard
09:12:25 <adu> and here: http://haskell.org/ghc/docs/latest/html/libraries/
09:12:37 <MarcWeber> da 
09:12:37 <davidhouse> rizzix: try haddock
09:12:39 <MarcWeber> davidhouse: http://www.rafb.net/paste/results/y6rC7Y49.html
09:13:32 <rizzix> thx adu :)
09:14:03 <rizzix> davidhouse: i'll look it up 
09:14:27 <davidhouse> @where haddock
09:14:27 <lambdabot> http://www.haskell.org/haddock/
09:17:04 <davidhouse> MarcWeber: do :t dblookup
09:20:17 <MarcWeber> davidhouse: dblookup :: t -> IO [Int]
09:20:31 <MarcWeber> mt is the same without t as expected..
09:20:38 <davidhouse> yep.
09:20:51 <davidhouse> if you remove the 'con' and pass in 5 or something, what happens?
09:20:55 <davidhouse> from the dblookup con call
09:21:29 <MarcWeber> davidhouse: It compiles
09:21:38 <davidhouse> i think the problem is that when it tries to build the type of that statement it ends up with a generic 'm' type variable
09:21:54 <davidhouse> and generic type variables are bad, because it doesn't know which type to use
09:22:02 <davidhouse> try just adding a type signiture to con
09:22:09 <davidhouse> that puts it into IOP
09:22:11 <davidhouse> *IO
09:22:31 <davidhouse> e.g. con :: (Database.HaskellDB.Database.Database -> IO a) -> IO a
09:25:21 <ndm> in Parsec, a <|> b, does b if a fails without consuming any input
09:25:42 <ndm> is there a corresponding one that tries b *even if* a consumed a bit of output hten failed
09:25:45 <MarcWeber> davidhouse: I think it works.. let me try my original dblookup first
09:26:24 <gzl> ndm: I think 'try' or something
09:26:44 <gzl> very vaguely remembering, but maybe that does it (i.e. try a <|> b)
09:26:53 <davidhouse> @index try
09:26:53 <lambdabot> Control.Exception, System.IO.Error, Text.ParserCombinators.Parsec.Prim, Text.ParserCombinators.Parsec
09:27:11 <ndm> gzl, thanks  - got it sorted now
09:27:40 <gzl> was it try?
09:27:55 <ndm> gzl: indeed, try a <|> b
09:27:59 <gzl> cool
09:37:06 <MarcWeber> davidhouse: You have helped me tremendesly! I'm tracking down my next error ;)
09:40:37 <ibid> hrm, planet lambda or so? is somebody already working on it?
09:41:31 <MarcWeber> davidhouse: forever $ justfor davidhouse $ print "thanks" ;) I tried something like that before but there is another strange thing.. When using comparing numbers I can pass 2 when looking up strings I have to pass (Just "value") .. 
09:42:03 <davidhouse> MarcWeber: where?
10:00:36 <dany2k> 24~
10:20:36 <dcoutts> @where hwn
10:20:36 <lambdabot> http://sequence.complete.org/
10:22:23 <rizzix> "(?ref :: MVar s, ?name :: String) => a" what does the ? mean
10:34:40 <dcoutts> how's this for a good bug report?
10:34:40 <dcoutts> http://www.haskell.org//pipermail/glasgow-haskell-users/2006-March/009899.html
10:35:34 <xerox> ``It's b0rked!!''
10:36:07 <dcoutts> xerox, indeed :-)
10:36:16 <waern> hehe
10:36:39 <dcoutts> @quote DennisHeuer
10:36:40 <lambdabot> DennisHeuer hasn't said anything memorable
10:36:52 <dcoutts> what? has lambdbot fogoten it?
10:37:07 <dcoutts> dons, it was DennisHeuer wasn't it?
10:37:51 <dcoutts> still, that bug report isn't as good as Dennis's one:
10:37:52 <dcoutts> http://www.haskell.org//pipermail/glasgow-haskell-bugs/2006-March/006285.html
10:38:28 <dcoutts> Are you fully nerd????
10:38:35 <dcoutts> Man, unbelievable....
10:38:49 <Excedrin> ahahah
10:38:53 <xerox> Haha.
10:38:58 * dcoutts still finds that one funny
10:39:53 <stepcut> heh
10:40:51 <davidhouse> you don't know?
10:41:00 <davidhouse> the more question marks you use, the cooler you are.
10:41:19 * xerox suppresses a > repeat "?"
10:41:29 <davidhouse> :P
10:41:39 <dcoutts> @where language of choice for the fully nerd
10:41:40 <lambdabot> I know nothing about language.
10:42:17 <xerox> @state
10:42:17 <lambdabot> Look!  A ladder!  Maybe it leads to heaven, or a sandwich!
10:42:17 <lambdabot>  
10:42:20 <xerox> @. vixen . state kean
10:42:20 <lambdabot> compose module failed: Parse error: "kean"
10:44:30 <rizzix> @. vixen state kean
10:44:31 <lambdabot> Beer, it's so much more than just a breakfast drink!
10:44:35 <rizzix> :)
10:44:48 <xerox> hmm.
10:44:55 <xerox> that's not what I wanted, I fear.
10:45:05 <rizzix> :o
10:45:35 <xerox> @state
10:45:35 <lambdabot> kean
10:45:42 <xerox> @. vixen . state arr
10:45:42 <lambdabot> you sir are no gentleman
10:45:44 <davidhouse> what does @vixen do?
10:45:45 <xerox> @state
10:45:45 <lambdabot> I heard andersca is a pirate
10:45:47 <xerox> Yes!
10:45:59 <davidhouse> @help @vixen
10:45:59 <lambdabot>  @help <command> - ask for help for <command>
10:46:03 <davidhouse> @help vixen
10:46:03 <lambdabot> sergeant curry's lonely hearts club
10:46:07 <xerox> @vixen what do you do?
10:46:08 <lambdabot> let's don't talk about that
10:46:18 <davidhouse> i'm so confused.
10:46:28 <xerox> That way it talks with the arrr.
10:46:40 <Spark> @vixen what what what what
10:46:40 <lambdabot> let's don't talk about that
10:46:50 <xerox> @vixen asl?
10:46:51 <lambdabot> 19/f/California
10:47:00 <rizzix> ahaha
10:47:19 <davidhouse> @vixen what are you?
10:47:19 <lambdabot> yes, i am
10:47:26 <davidhouse> @vixen what day is it?
10:47:26 <lambdabot> let's don't talk about that
10:47:30 <xerox> Encoding videos is no fun // is no fun // is no fun
10:47:35 <davidhouse> @vixen what's the weather like?
10:47:35 <lambdabot> i dunno, what is it?
10:47:43 <davidhouse> @vixen you're a bit rubbish
10:47:43 <lambdabot> what are you
10:47:50 <rizzix> lol
10:47:56 <xerox> (a-la ``London's bridge's fallin' down // fallin' down // fallin' down'')
10:59:10 <binary42> I am playing around with hs-plugins and got it to install; however, when I go to test the installed library with lambdabot it chokes on linking:
10:59:25 <binary42>  /usr/bin/ld: table of contents for archive: /usr/local/lib/plugins-1.0/libHSplugins-1.0.a is out of date; rerun ranlib(1) (can't load from it)
10:59:57 <binary42> I am not exactly sure how to go about solving the above :-)
11:00:07 <rizzix> run ralib?
11:00:11 <rizzix> *ranlib
11:00:39 <rizzix> ranlib /usr/local/lib/plugins-1.0/libHSplugins-1.0.a
11:01:33 <binary42> thanks. Why is that?
11:01:40 <rizzix> dunno :(
11:05:06 <rizzix> i believe it has something to do with the .a archive not being updated correctly *shurgs*
11:07:58 <binary42> Thanks either way. Just kind of odd to see.
11:08:07 <cinema> ß«@«n~¤}
11:08:26 <rizzix> ?
11:09:50 <rizzix> binary42: if you are compiling lambdabot do let me know if you are successfully able to test the Search plugin
11:10:33 <mnislaih> hi all, newb here wanting to ask a 'do notation' question
11:10:53 <binary42> rizzix:  I will if I try it. Right now I am looking at trying to write some of my own plugins for learning purposes. 
11:10:55 <mnislaih> how can I use monadic values in the clauses inside a list comprehension
11:11:06 <rizzix> ok
11:12:05 <mnislaih> I am inside a State Monad, and need to run Stateful computations which depend on the elements being generated inside the list comprehension. Is using the do notation legal inside a list comprehension or which is the easiest way around ?
11:12:37 <MarcWeber> davidhouse: In the last line.. I was really tired.. I had to lay down for a while ;) Now I'm back again http://www.rafb.net/paste/results/sX1WJJ48.html
11:12:38 <mauke> I don't know, but you can translate list comprehensions to use do notation
11:13:05 <davidhouse> you can also translate do notation in [] to list comprehensions, which are generally easier to read ;)
11:13:34 <mnislaih> mauke: But then I would be inside the List monad, and I would have to use StateT right?
11:13:35 <davidhouse> mnislaih: so your function type is something like State [a] Value?
11:13:39 <mauke> hmm, why are there no monad comprehensions?
11:13:40 <mnislaih> davidhouse can you elaborate ?
11:13:50 <mnislaih> yes
11:14:03 <davidhouse> i'd personally use StateT.
11:14:08 <davidhouse> but you don't have to.
11:14:30 <mnislaih> I am not so comfortable with monads at this point, so I'd probably mess it all
11:14:33 <davidhouse> sure.
11:14:43 <davidhouse> well, what have you got so far? pastebin it
11:15:31 <mnislaih> ok give me a sec to beautify it a bit
11:16:38 <mnislaih> http://pastebin.com/618475
11:16:46 <davidhouse> MarcWeber: i'm not sure, i guess it has something to do with (.==.), which i'm not familiar with
11:17:53 <mnislaih> davidhouse: functions prefixed by M are monadic
11:17:59 <mnislaih> suffixed *
11:18:05 <davidhouse> mnislaih: and you want to know if you can use do notation for that second list comprehension?
11:18:23 <mnislaih> right. What I have written there is my 'wished' notation
11:19:02 <mnislaih> see the line "let arity <- getArityM f'"
11:19:10 <davidhouse> do can only do "var <- something" if something is in the monad you're working in
11:19:33 <davidhouse> i.e., that second list comprehension would have to be in State
11:19:58 <mnislaih> :^ 
11:20:27 <mnislaih> but we are inside a command already. I thought it was already, how can I get it in State then
11:20:28 <MarcWeber> davidhouse: me neither yet ;) But it works..  I'll dive into the library after finishing my project.. I think the idea is really great. It's all from haskelldb.
11:20:45 <davidhouse> and if getArityM returns something in State, you can't use it in a list comprehension
11:21:18 <mnislaih> so.. I'd have to desugarize this into a chain of mapM and filterM, right ?
11:21:35 <davidhouse> this is crying out for monad transformers ;)
11:21:46 <mnislaih> and.. how much would it take for this to work with ListT or StateT? 
11:22:01 <mnislaih> and which one should I use ?
11:22:17 <davidhouse> let me just check something
11:22:20 <ibid> http://antti-juhani.kaijanaho.fi/planet-haskell/
11:22:29 * ibid wants more feeds
11:23:07 <davidhouse> yep. i'd use StateT StateType [] ValueType
11:24:45 <mnislaih> ok, I am willing to mess with monad transformers, but just another question: this computation (it is called 'safe') is only a part of a bigger computation. How will it affect to use StateT with []? Can it potentially break things down ?
11:25:09 <mnislaih> I mean, the switch from simply State to StateT with []
11:25:12 <davidhouse> what monad is the larger computatuion is?
11:25:16 <davidhouse> *in
11:25:20 <mnislaih> all in State 
11:25:26 <mnislaih> with the same state, of course
11:25:44 <davidhouse> i think they'd likely have to be in StateT [] as well
11:26:23 <davidhouse> mnislaih: try something like http://pastebin.com/618499
11:26:36 <mnislaih> I just want to make sure the monadic bind will act predictably, i.e. producing the same results
11:26:41 <davidhouse> but then i'm fairly new to this stuff as well
11:27:00 <mnislaih> cool, this is what I had in mind
11:27:28 <mnislaih> ah, that's great. Since I have to explicitly lift computations in the inner monad
11:27:50 <mnislaih> non lifted computations should just work as before, right ?
11:27:55 <davidhouse> yep
11:27:58 <mnislaih> :D
11:28:09 <davidhouse> monad transformers are disgustingly easy
11:28:12 <mnislaih> thanks a lot for your help! :D
11:28:23 <mnislaih> not if you have to learn it all on your own
11:28:43 <vincenz> what's new
11:29:13 <davidhouse> mnislaih: i'm in the same position
11:29:18 <davidhouse> learnt it all from all about monads
11:29:27 <davidhouse> plus experimentation
11:29:38 <mnislaih> that's my source too
11:29:45 <mnislaih> But I still fear the continuation monad
11:29:58 <mnislaih> and even more the fact that monads are continuations in disguise
11:30:16 <mnislaih> or are they not?
11:30:21 <ibid> some of them are
11:30:23 <ibid> cerainly not all
11:30:27 <davidhouse> i haven't touched continuations
11:30:55 <mnislaih> there was a paper from Wadler talking about that. I remember reading it and understanding nada
11:31:39 <rizzix> monads hurt my brain :P
11:32:14 <mnislaih> well it shouldn't be so, if after all Haskell is our language of choice
11:32:28 <mnislaih> I think I'm coming into terms with them
11:32:45 <rizzix> 'tis
11:33:00 <mnislaih> but as someone said "Haskell is not 'a little different,' and will not 'take a little time.' It is very different and you cannot simply pick it up....."
11:33:24 <mnislaih> (early this morning in fact)
11:33:31 <ibid> send me feeds!
11:34:17 <davidhouse> haskell was my first functional language
11:34:23 <davidhouse> but i love it now.
11:34:38 <rizzix> i love it to.. i just need to master it ;)
11:34:51 * rizzix is a n00b :)
11:34:56 <mnislaih> same for me :(
11:35:31 <sieni> I learned Scheme first which, I think, has been a good way to learn functional programming
11:35:35 <mnislaih> using Visual Haskell here, a godsend for noobs
11:36:10 <sieni> (since you can just read r5rs and start hacking Scheme. Haskell is quite a bit more complicated language)
11:36:30 <mnislaih> I'd like to learn Scheme too, whenever I can steal some time from Haskell for it
11:36:32 <sieni> IDE:s are evil
11:36:36 <davidhouse> it's Kate and GHCi for me.
11:36:53 <sieni> mnislaih: well, just grab r5rs and start reading
11:37:01 <davidhouse> although it needs tabs.
11:37:05 <rizzix> TextMate + GHCi here 
11:37:16 <sieni> mnislaih: the best web formatting I've seen is: http://www-sop.inria.fr/mimosa/fp/Bigloo/doc/r5rs.html
11:37:55 <davidhouse> is Either used for anything other than errors?
11:38:20 <sieni> davidhouse: yes
11:39:04 <sieni> davidhouse: If you look lambdabot's configuration file, you give the http proxy as Just "<url comes here>" or Nothing
11:39:14 <davidhouse> err
11:39:18 <davidhouse> that's Maybe
11:39:25 <sieni> davidhouse: oops, my bad
11:39:48 <sieni> I was certain that you were talking about Maybe ^_^
11:39:52 <davidhouse> Maybe is really useful. but i haven't really played with Either yet, just seen it used for errors.
11:42:49 <sieni> davidhouse: well, you can do dynamic typing with that
11:43:22 <rizzix> @type Data.Maybe.fromMaybe
11:43:23 <lambdabot> forall a. a -> Maybe a -> a
11:43:56 <sieni> davidhouse: if you want to store both strings and integers in a list you can do stuff like
11:44:03 <davidhouse> rizzix: what does that do?
11:44:07 <sieni> > [Left 7, Right "8"]
11:44:08 <lambdabot> [Left 7,Right "8"]
11:44:11 <davidhouse> sieni: ah, that's true.
11:44:13 <davidhouse> nice.
11:44:25 <davidhouse> > fromMaybe 5 (Just 10)
11:44:26 <lambdabot> 10
11:44:31 <davidhouse> > fromMaybe 5 (Nothing)
11:44:32 <lambdabot> 5
11:44:33 <davidhouse> ah
11:44:45 * JKnecht wonders if F# has anything other than .net 2.0 to cause one to prefer it over visual h.
11:44:46 <rizzix> Sort of clashes in functionality with Either
11:44:49 <davidhouse> > maybe 5 id $ Just Nothing
11:44:50 <lambdabot>  add an instance declaration for (Num (Maybe a))
11:45:04 <davidhouse> > maybe 5 id $ Just 3
11:45:05 <lambdabot> 3
11:45:10 <davidhouse> > maybe 5 id Nothing
11:45:11 <lambdabot> 5
11:45:11 <mnislaih> F# is some kind of ML right ?
11:45:21 <davidhouse> fromMaybe is just maybe with id.
11:45:21 <rizzix> yea
11:45:39 <chrisbrown> its also a semitone lower than G
11:45:41 <chrisbrown> :P
11:45:44 <mnislaih> But it produces NET bytecodes ? 
11:45:52 <rizzix> yea
11:45:53 <JKnecht> yeah basically, compatible with ocaml libs but full interface to .net and targets .net 2.0.
11:46:09 <sieni> mnislaih: yes, I think F# is an OCaml variant
11:46:17 <JKnecht> but runs with vs 2003 also.
11:46:29 <mnislaih> I was confused by the comparison to Visual Haskell
11:46:52 <rizzix> where?
11:46:58 <sieni> vi and shell are the only needed development environment!
11:47:15 <mnislaih> rizzix: a few lines above
11:47:38 <rizzix> oh yea :P
11:48:59 <davidhouse> where's the monadic instance definition of IO?
11:49:05 <davidhouse> in darcs.haskell.org
12:02:11 <ihope> Um, you mean the "instance Monad IO where..."?
12:02:28 <davidhouse> yeah. i think i got it actually.
12:02:39 * davidhouse is trying to understand how IO is implemented
12:03:12 <ihope> Well, it's not "very easily" definable in Haskell code, I think.
12:03:19 <davidhouse> i've got that it uses ST with a state of RealWorld (which apparently doesn't have any constructors)
12:03:54 <Lemmih> ':i Type' will tell you where the instances are declared.
12:03:56 <davidhouse> oops, gotta dash
12:03:57 <ihope> I'd say "data IO a where Return :: a -> IO a; :>>= :: IO a -> (a -> IO b) -> IO b)" :-)
12:04:23 <ihope> instance Monad IO where return = Return; (>>=) = (:>>=); fail = error
12:06:58 <ndm> davidhouse: check out Yhc, thats got a simple definition of IO
12:07:22 <mnislaih> ndm is Neil Mitchell right ?
12:07:31 <ndm> mnislaih: yep
12:07:41 <sieni> davidhouse: you'll probably find that IO and state etc. can be described as pure functions of type Byte -> [Byte] -> [Byte], where the first argument is the newest byte received, the second is the list of previously received bytes and the result is the bytes output.
12:07:48 <mnislaih> ndm: how viable would it be a Hoogle for Google Desktop ?
12:07:48 <ihope> > 2*3*5*7
12:07:49 <lambdabot> 210
12:08:10 <ndm> mnislaih: its written in haskell, and i don't know the google desktop API that well
12:08:13 <ndm> but should be feasible
12:08:19 <mnislaih> well it's just COM, that's not the problem
12:08:30 <ndm> are you meaning index the .hs files on your machine, then have hoogle search that?
12:08:35 <mnislaih> but does Hoogle require the hs files to be in some hierarchy, etcetera ?
12:08:38 <ndm> or a hoogle plugin to google desktop
12:08:38 <mnislaih> yep
12:08:50 <mnislaih> no, I mean the real thing: index the desktop files
12:09:00 <ndm> hoogle creates an index file from a .hs file
12:09:07 <ndm> the location of files is unimportant
12:09:22 <ndm> it actually uses haddock (HEAD only) to generate hoogle database files
12:09:22 <mnislaih> but does it work with standard, non pre-parsed hs files ?
12:09:26 <BetaTEST> noob question: is there a way in haskell interpreters (i.e. GHCi) to define function and immediately start using it without need to save it to file? i really loved that in lisp :)
12:09:47 <mnislaih> noob here too: you can use let in GHCi
12:09:52 <ndm> no, they require preparsing
12:10:03 <ibid> BetaTEST: let f x = 42
12:10:03 <ndm> but there is no reason hoogle can't preparse and cache them
12:10:14 <mnislaih> then I understand it should be feasible
12:10:19 <sieni> BetaTEST: in ghci, yes (as ibid said). In hugs no.
12:10:23 <ndm> should be, yes
12:10:30 <mnislaih> that's gonna be my next personal project, if you don't mind :)
12:10:37 <ndm> fantastic :)
12:10:37 <BetaTEST> thanks. i'll like it then :)
12:10:43 <mnislaih> or if no one does it before
12:10:45 <ndm> any help you need, just ask
12:10:52 <mnislaih> sure
12:11:00 <ndm> i have a target of lots of hoogle improvements
12:11:10 <ndm> but all things in the core of hoogle
12:11:15 <ndm> better matches, faster matches
12:11:24 <xerox> What would you suggest to a guy starting a Networking-enabled Haskell project?
12:11:29 <xerox> In fact, a server?
12:11:30 <ndm> you'll probably want to get a HEAD build of haddock
12:11:44 <sieni> BetaTEST: but a "real" toplevel is a bit hard in statically typed languages (and especially lazy ones).
12:11:45 <ndm> either a nightly build (if they exist) or compile one yourself
12:11:58 <ndm> and investigate the -hoogle option - thats what hoogle uses to generate the database
12:12:09 <mnislaih> aha ok
12:12:21 <mnislaih> then I just need to learn how to package my Haskell app in a COM object
12:12:33 <ndm> take a look at Visual Haskell
12:12:41 <ndm> that did loads of COM vs Haskell stuff
12:12:44 <mnislaih> are the sources free ?
12:12:47 <mnislaih> I saw the paper
12:12:52 <ndm> maybe slighly free...
12:13:05 <ndm> I think the paper outlined a rough thing of how to do COM
12:13:05 <mnislaih> maybe that'll be enough, because I think sources are not open
12:13:22 <sieni> BetaTEST: If you are accustomed to Lisp style development (i.e. a Lisp image running for half a year and patching the software as you develop it), then it's not that easy in ML or Haskell
12:14:07 <MaLDMaN> hello
12:14:17 <MaLDMaN> im new to haskell and i ahve to do an assignment
12:14:35 <MaLDMaN> i was wondering if it is posible to declare a global variable in haskell and change the data in it
12:14:42 <ndm> davidhouse: http://www-users.cs.york.ac.uk/~malcolm/cgi-bin/darcsweb.cgi?r=yhc-devel;a=headblob;f=/src/packages/yhc-base-1.0/YHC/Internal.hs - thats how Yhc implements IO internally
12:14:45 <mauke> you can't change variables
12:15:10 <MaLDMaN> so how can i store for example a list and add data to it?
12:15:20 <sieni> BetaTEST: in GHC you have hs-plugins, which is quite close to the Lisp Way
12:15:21 <Lemmih> MaLDMaN: You don't want that, trust me.
12:15:21 <BetaTEST> sieni, half a year is too long for me :) actually, i didn't write any production-quality software in lisp yet, c/perl/java/etc only.
12:15:49 <mnislaih> MaLDMaN it is possible in the ST monad, or using IORefs, but it's not a good idea probably
12:16:25 <sieni> BetaTEST: if you like the Lisp way, you could take a look at the source code for Yi and Lambdabot who use hs-plugins extensively
12:16:28 <ihope> MaLDMaN: well, can you tell us what the assignment is so we can give you a few hints (not the answer? :-)?
12:16:35 <ibid> no bloggers here?!
12:16:38 <MaLDMaN> ok in my assignment i had to define a type Store = [(Variable,Data)]
12:16:43 <MaLDMaN> now variable is a string
12:16:47 <MaLDMaN> and data is a interger
12:16:56 <MaLDMaN> it told me to define an empty store
12:17:12 <MaLDMaN> store :: Store
12:17:15 <MaLDMaN> store = []
12:17:19 <ihope> Yep.
12:17:28 <MaLDMaN> now when i set data myself it for example
12:17:37 <MaLDMaN> store [("test",5)]
12:17:42 <MaLDMaN> i can run some functions
12:17:48 <rizzix> ?
12:17:51 <MaLDMaN> but i have to write a function that adds a tuple to it
12:17:55 <BetaTEST> sieni, lisp programs are easy to write because style is similar to thinking :) but it's hard to read them because you need to adapt someone else thoughts.. what can be said about haskell?
12:17:57 <MaLDMaN> how can i do something like that
12:18:18 <ihope> MaLDMaN: try looking at the types of (:) and []
12:18:23 <ihope> s/[]/(++)/
12:19:07 <sieni> BetaTEST: hard to tell :-)
12:19:09 <MaLDMaN> i made a function that sort of works but the thing is that it doesnt update store for me
12:19:18 <magnus--> MaLDMaN: The idea is that you return a NEW store when you add something to an old one. You don't modify the old one
12:19:22 <MaLDMaN> it just outputs the result i want it to be
12:19:28 <ibid> magnus--: updating is not functional
12:19:30 <ibid> gah
12:19:34 <ibid> MaLDMaN: ^
12:19:39 <MaLDMaN> so i can just overwrite store?
12:19:41 <ibid> magnus--: sorry
12:19:47 <magnus--> np
12:19:47 <ibid> MaLDMaN: that's not functional
12:19:48 <rizzix> no
12:19:53 <davidhouse> MaLDMaN: what are you trying to achieve?
12:19:54 <BetaTEST> sieni, haskell syntax still scares me :)
12:19:56 <ibid> MaLDMaN: and no, you can't do that
12:19:58 <davidhouse> like, the big picture
12:20:10 <rizzix> MaLDMaN: you need to _return_ a new one
12:20:12 <MaLDMaN> Define a function getVal, which takes a Store and a variable name,
12:20:12 <ihope> MaLDMaN: if the assignment needs you to *change* store, then the assignment's wrong...
12:20:12 <MaLDMaN> and returns its value. You may assume that the variable is defined
12:20:12 <MaLDMaN> in the Store.
12:20:12 <MaLDMaN> getVal :: Store -> Variable -> Data
12:20:25 <MaLDMaN> wait that was the wrong one
12:20:35 <MaLDMaN> Define a function setVar, which takes a Store, a variable name and a
12:20:35 <MaLDMaN> value, and returns an updated Store with the variable value updated.
12:20:35 <MaLDMaN> setVal :: Store -> (Variable, Data) -> Store
12:20:39 <sieni> BetaTEST: You'll get used to it. I learned Scheme before Haskell and it was pretty easy to get used to the syntax.
12:20:46 <mauke> yes, returns a new store
12:20:47 <davidhouse> MaLDMaN: you're not updating the store
12:20:51 <mauke> it doesn't change the old store
12:20:53 <MaLDMaN> thats what i need to define setVal
12:20:54 <davidhouse> you're returning a new, modified one
12:21:11 <mauke> @hoogle [(a,b)] -> a -> b
12:21:12 <lambdabot> No matches, try a more general search
12:21:13 <MaLDMaN> but then i cannot work with the tuple i just added
12:21:22 <mauke> @hoogle a -> [(a, b)] -> b
12:21:23 <lambdabot> No matches, try a more general search
12:21:31 <MaLDMaN> i cant use getVal to find what i added
12:21:33 <davidhouse> @type lookup
12:21:34 <lambdabot> forall b a. (Eq a) => a -> [(a, b)] -> Maybe b
12:21:38 <Lemmih> MaLDMaN: Sure you can. You just use the new store.
12:21:50 <ihope> MaLDMaN: pass the value returned from setVal into getVal
12:22:01 <sieni> BetaTEST: some things are different though.
12:22:08 <Lemmih> MaLDMaN: let newStore = setVal oldStore (var,dat) in getVal newStore var
12:22:24 <BetaTEST> sieni, is there good tutorial?
12:22:29 <ihope> getVal "foobar" (setVal oldStore ("foobar", 3))
12:23:02 <BetaTEST> sieni, something that will get you used to syntax and basic ideas :)
12:23:02 <davidhouse> is unsafePerformIO a way out of the IO monad?
12:23:09 <xerox> Yes, it is.
12:23:18 <ihope> But you should be careful when using it.
12:23:21 <MaLDMaN> Lemmih can i talk to you in private plz
12:23:22 <ibid> davidhouse: yes, but it is really unsafe, don't make a mistake about that
12:23:23 <davidhouse> when should I use it?
12:23:30 <ibid> davidhouse: when you know you must
12:23:30 <sieni> BetaTEST: for Haskell? Yes. If you already know functional programming, then "Gentle introduction to Haskell" is quite useful. Then there is the more verbose one called "Yet Another Haskell Tutorial"
12:23:32 <Lemmih> davidhouse: Yeah, kinda like a gun is a way out of this world. (:
12:23:38 <ibid> davidhouse: and never ever otherwise
12:23:45 <sieni> BetaTEST: and the Gentle really should read "Gentle"
12:23:47 <Lemmih> MaLDMaN: Sorry, I gotta go in a bit.
12:23:49 <ihope> davidhouse: when your IO a doesn't actually perform an action and will always return the same thing.
12:24:02 <MaLDMaN> ok
12:24:04 <davidhouse> thanks ihope.
12:24:09 <davidhouse> @where yaht
12:24:09 <lambdabot> http://www.isi.edu/%7Ehdaume/htut/
12:24:11 <ihope> For example, reading a file that won't change while you're running the program.
12:24:13 <davidhouse> MaLDMaN: tried that?
12:24:25 <MaLDMaN> i dont know how to implement it
12:24:26 <sieni> @where yaht
12:24:26 <lambdabot> http://www.isi.edu/%7Ehdaume/htut/
12:24:30 <sieni> oops
12:24:35 <sieni> @where gith
12:24:35 <lambdabot> I know nothing about gith.
12:24:38 <sieni> @where gih
12:24:38 <lambdabot> I know nothing about gih.
12:25:01 <vincenz> dum dum dum
12:25:02 <vincenz> @where hac
12:25:03 <lambdabot> http://haskell.org/haskellwiki/HAC
12:25:04 <ihope> MaLDMaN: if you want to add a value to a list, you can use (:): 3 : [2,1] = [3,2,1]
12:25:14 <ihope> > 3 : [2,1]
12:25:15 <lambdabot> [3,2,1]
12:25:20 <sieni> BetaTEST: anyway, the "gentle" introduction is at http://www.isi.edu/~hdaume/htut/tutorial.pdf
12:25:25 <MaLDMaN> setVal :: Store -> (Variable, Data) -> Store
12:25:25 <MaLDMaN> setVal [] (v,d) = [(v,d)]
12:25:25 <MaLDMaN> setVal store (v,d) = (v,d):store
12:25:29 <davidhouse> ndm, 'data World; newtype IO a = IO (World -> Either IOError a)'. is that all there is to it?
12:25:31 <MaLDMaN> i wrote this function and it works
12:25:35 <bolrod> > (:) 3 [2,1]
12:25:36 <lambdabot> [3,2,1]
12:25:36 <MaLDMaN> it out puts what i want
12:25:45 <ndm> davidhouse: yes, that is indeed exactly the way Yhc does it
12:25:49 <xerox> ihope: the right answer is "never" :-)
12:25:59 <MaLDMaN> but i cant figure out a way that when i try find the new variable in the list it cannot be found since its not updating the variable
12:26:12 <mauke> MaLDMaN: it doesn't change any variables
12:26:13 <davidhouse> ndm, i'm still not quite understanding. how can you have something of type World if it doesn't have any constructors?
12:26:22 <mauke> MaLDMaN: YOU CANNOT CHANGE VARIABLES IN HASKELL
12:26:26 <ndm> davidhouse: there was a paper on various different implementations of IO by someone
12:26:30 <MaLDMaN> yeah i got that
12:26:45 <ndm> davidhouse: data Word = Word
12:26:46 <mauke> you have to use the return value for future computations
12:26:51 <ndm> * World = World
12:26:55 <MaLDMaN> so how can i add the new variable to the list and let it be accessed from other functions?
12:27:07 <ndm> there is only one value
12:27:14 <ihope> MaLDMaN: pass the list into those other functions.
12:27:18 <davidhouse> MaLDMaN: you get a new store. give that to the other functions
12:27:18 <mauke> save the return value and pass it to other functions
12:27:33 <BetaTEST> sieni, isn't that yaht?
12:27:47 <davidhouse> ndm, well, okay, it doesn't seem to hold any data.
12:28:28 <ndm> davidhouse: imagine it holds all the worlds data, but obviously thats not possible, so it passes a dummy value, and by being abstract, stops people from having two worlds at one point in time
12:28:56 <davidhouse> so the actual implementation is at a different level
12:29:01 <davidhouse> (presumably not haskell code)
12:29:09 <ndm> davidhouse: no, that is the real implementation
12:29:17 <ndm> its just C doesn't need a monad to play with the world
12:29:18 <ihope> Oh, by the way... an IO a can be turned into an ST RealWorld a, but what's the point of having one of those?
12:29:33 <ndm> ihope: i think thats implementation dependant
12:30:03 <ndm> the World serves to sequence them - before the next action can perform, it needs the world from the previous one
12:30:21 <ihope> Um, I guess what I'm asking is if there's a way to get a RealWorld.
12:30:36 <davidhouse> ihope, there's no constructors for that
12:30:47 <davidhouse> well, in yhc you have World.
12:30:57 <davidhouse> but in GHC it's just 'data RealWorld'
12:31:03 <ndm> yes
12:31:09 <ndm> but in GHC you can do ST RealWorld
12:31:15 <ihope> davidhouse: I know there aren't any constructors, like with IO, but there are many IO values out there.
12:31:18 <ndm> in Yhc that concept wouldn't work, i don't think
12:31:33 <davidhouse> oh, good point.
12:31:55 <ndm> for IO there is a valid constructor in Yhc, IO
12:32:15 <ndm> for internal debugging purposes I have one named OI :)
12:32:23 <mnislaih> bye all. ndm I'll pm you my email in case you want to contact me
12:33:04 <ihope> @hoogle IO RealWorld
12:33:04 <lambdabot> System.Exit.exitFailure :: IO a
12:33:36 <ihope> So what's the point of having an ST RealWorld a if you can't get a RealWorld anywhere?
12:33:39 <davidhouse> > undefined::IO RealWorld
12:33:39 <lambdabot>  Not in scope: type constructor or class `RealWorld'
12:33:54 <ihope> :-P
12:34:22 <ihope> So you're saying there is no point?
12:34:33 <davidhouse> me? i don't have a clue
12:34:51 <davidhouse> brb.
12:37:17 <AllenJB|2> http://pastebin.com/618682 - Can anyone see what's wrong with my exampleBase2 please? The full error message and code are in the pastebin. Pastebin line numbers are actual line numbers.
12:41:05 <ihope> AllenJB|2: that list is supposed to be a [Membership], but the first element seems to be a tuple.
12:41:20 <ihope> Try removing the type annotation and seeing what type you end up with...
12:42:11 <Lemmih> AllenJB|2: 'Family "Brown", ...' should be 'Family "Brown" ...' (without the comma).
12:42:12 <mauke> AllenJB|2: remove the comma
12:42:30 <rizzix> (Family "Brown", [
12:42:35 <rizzix> that loooks wrong
12:44:17 <AllenJB|2> Thanks people - that appears to have fixed it  =)
12:44:23 * shapr puts a banana in an envelope and wraps it up with barbed wire.
12:44:44 <mauke> mmh, banana
12:45:49 * ihope inserts some barbed wire into a banana such that an envelope is somehow involved
12:47:49 * sieni inserts a banana somewhere and wonders if the barbed wire should somehow be involved
12:47:50 <mauke> http://img123.imageshack.us/img123/6229/banana2ce.gif
12:48:16 <shapr> I'm already using lenses to see the screen, so...
12:48:41 <ihope> http://tinyurl.com/ec5mf >:-)
12:48:56 <shapr> Anyone know if there's already SVG support for HXT or HaXml?
12:49:54 <sieni> mauke: nice
12:50:44 <sieni> mauke: actually in a juggling show Denis Paumier (a pretty good juggler) did tricks like that with a club. Those were cool.
12:58:02 <Lethalman> hello
12:58:53 <Lethalman> i've a problem with Socket.socket $ Socket.AF_INET Socket.Stream (Socket.PortNum 1) what's the correct way to create a TCP stream socket?
13:02:11 <sebell> Lethalman: For starters, what's the problem?
13:02:30 <Lethalman> i'm trying to create a socket
13:02:31 <xerox> That the third arg isn't a PortNum.
13:02:43 <xerox> ...but a ProtocolNumber.
13:02:54 <xerox> (Which in turn is a CInt.)
13:03:35 <Lethalman> PortNum is a constructor for ProtocolNumber
13:03:52 <xerox> type ProtocolNumber = CInt
13:03:59 <xerox> ProtocolNumber is a synonym for CInt.
13:04:06 <Lethalman> oh yeah sorry
13:04:09 <xerox> newtype PortNumber = PortNum Word16
13:04:19 <xerox> PortNum is a constructor for PortNumber.
13:04:22 <sieni> Lethalman: Get a copy of that book, and enjoy :-) -> http://www.amazon.com/gp/product/0131411551/104-9465180-0586348?v=glance&n=283155
13:04:24 <Lethalman> i just looked at the below type PortNumber in the reference :)
13:04:39 <xerox> sieni: :P
13:04:55 <sieni> xerox: It's a good book
13:06:39 <sieni> xerox: did you e.g. know how to donate a file descriptor to another process (Posix-portably) through a unix domain socket?
13:06:57 <sebell> I might be retarded, but I think you want 6 (TCP) anyways
13:07:06 <jyp> Is there a library to parse and pretty print haskell sources, and that handles comments (haddock-style) as well ?
13:07:14 <xerox> It's been quite a long time since I fiddled with UNIX network programming last time... :-)
13:07:38 <sieni> xerox: well... I get paid for it ^_*
13:07:58 <xerox> Aww! :-)
13:09:25 <sieni> xerox: I'm kind of El Architecto del that product -> http://www.ssh.com/products/tectia/client/
13:11:39 <xerox> What is it?
13:11:53 <davidhouse> an ssh client?
13:11:53 <xerox> Beside the marketing babblings? :-)
13:25:27 <florenz> hi
13:25:59 <florenz> does someone know, if there is a possibility to tell ghc precisely what gcc to use?
13:26:42 <florenz> at my site, there are several versions of gcc and ghc picks the wrong one
13:28:36 <Lethalman> i found the Select module into an example but it seems doesn't exist anymore, how do i create a poll for async connections?
13:29:14 <michie1> anyone up for answering a trivial n00bi question from someone whose memory has deserted him?
13:29:22 <ndm> michie1: yep
13:29:26 <michie1> say I've a list [1,2,3,4,5]
13:29:38 <michie1> how do I take the third element (and just the third)?
13:29:48 <gzl> use !!
13:29:50 <ndm> @hoogle [a] -> Int -> a
13:29:51 <lambdabot> Data.List.(!!) :: [a] -> Int -> a
13:29:51 <lambdabot> Prelude.(!!) :: [a] -> Int -> a
13:29:51 <lambdabot> Data.List.head :: [a] -> a
13:30:02 <ihope> > [1,2,3,4,5] !! 2
13:30:02 <lambdabot> 3
13:30:18 <ihope> > 0xDECAFBEBAD
13:30:19 <lambdabot> 956888247213
13:30:25 <Excedrin> florenz: -pgmc cmd   Use cmd as the C compiler
13:30:33 <michie1> gzl, ihope: Thanks, I knew it was a simple operator
13:30:37 <xerox> michie1: getting elements of lists through indices is usually not a good sign.
13:31:38 <Lethalman> can someone tell me how can i do a select on handles?
13:33:18 <florenz> Excedrin, sorry, this gives me sh: gcc: not found.
13:34:00 <florenz> but i get this all the time at the moment because i removed all gccs from my $PATH
13:36:01 <florenz> Excedrin, this is because i'm using an old ghc -- i'm trying to bootstrap at the moment
13:36:19 <florenz> i will try a newer one which has already the -pgmc option
13:40:20 <michie1> xerox: I can see where you're coming from, but I
13:40:33 <ihope> > 234982 ^ 3 `mod` 1000000
13:40:34 <lambdabot> 414168
13:40:47 <michie1> xerox: 'm dealing with silly lists of permutations (get elt. n, put it at position m) that are probably easiest to handle this way
13:40:54 <ihope> > 414168 ^ 266667 `mod` 1000000
13:40:56 <lambdabot> 391232
13:41:07 <ihope> That's not right.
13:43:57 <int-e> says who?
13:44:39 <xerox> > (((414168 ^ 266667) `mod` 1000000),(414168 ^ (266667 `mod` 1000000)))
13:44:42 <lambdabot> Terminated
13:47:12 <int-e> > 414168 ^ 10 `mod` 1000000 == 414168 ^ 400010 `mod` 1000000
13:47:16 <lambdabot> True
13:47:56 <int-e> > 414168 ^ 10 `mod` 1000000 == 414168 ^ (4*5^5+10) `mod` 1000000
13:47:57 <lambdabot> True
13:48:53 <ihope> > 5 ^ 7 `mod` 31
13:48:54 <lambdabot> 5
13:48:59 <ihope> > 8 ^ 7 `mod` 31
13:49:00 <lambdabot> 2
13:49:09 <ihope> > 2 ^ 13 `mod` 31
13:49:10 <lambdabot> 8
13:52:21 <ihope> > map ((`mod` 31) . (^ 13) . (`mod` 31) . (^ 7)) [0..30]
13:52:22 <lambdabot> [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]
14:19:43 <thedward> huh, hoogle.net is some sort of bondage site (and is the first hit for hoogle)
14:19:48 <thedward> (on google)
14:20:02 <ihope> @google hoogle
14:20:04 <lambdabot> http://www.hoogle.net/
14:20:30 <ihope> Eeph.
14:20:35 <wilx> Heh.
14:20:57 <wilx> Well, we need to establish a model for users who seek the keyword "hoogle".
14:21:16 <ihope> @hoogle google
14:21:17 <lambdabot> No matches found
14:21:22 <wilx> At the start you couldn't get LaTeX by querying for "latex" either.
14:27:30 <mwc> http://rafb.net/paste/results/HPdxOE18.html could somebody see why that's trying to access index errors?
14:27:50 <mwc> as far as I can tell from trying those index selectors manually, it shouldn't exceed the bounds
14:28:39 <ndm> @where hoogle
14:28:40 <lambdabot> http://www.haskell.org/hoogle
14:28:47 <mwc> maybe I'm too tired to spot it
14:41:29 <astrolabe> Is there a standard way to convert from a DiffArray to an Array?
14:48:36 <astrolabe> and the other direction?  It seems daft to have to write my own.
15:03:09 <Excedrin> which tutorial is best (or good) as an introduction to programming?
15:10:45 <ndm> @learning
15:10:45 <lambdabot> Unknown command, try @listcommands.
15:10:51 <ndm> @listcommands
15:10:51 <lambdabot> use listcommands [module|command]. Modules are:
15:10:51 <lambdabot> babel base code compose dice dict djinn dummy dynamic elite fact haddock help hoogle karma lambda localtime more pl plugs poll pretty quote search seen spell state system todo topic type unlambda version vixen where
15:11:27 <ndm> Excedrin: http://www.haskell.org/tutorial/
15:11:30 <ndm> thats one
15:11:42 <ndm> there are loads all over the place, read one after another until you find one you like
15:12:27 <ndm> and of course, if there is anything you don't know, just ask
15:12:53 <ndm> Excedrin: http://www.isi.edu/~hdaume/htut/ is meant to be good too
15:16:19 <Excedrin> ndm: thanks, but are any of them better suited for someone who has never programmed before?
15:16:49 <ndm> Excedrin: no idea, i didn't learn from any of those and i had programmed before
15:17:03 <Excedrin> it seems like "The Haskell School of Expression" might be a good choice, except that it's a book
15:17:38 <ndm> Excedrin: i guess most will be aimed at people who have programmed before...
15:19:36 <astrolabe> @learn
15:19:36 <lambdabot> http://www.haskell.org/learning.html
15:21:00 <astrolabe> Excedrin: You've never programmed before?
15:22:49 <Excedrin> I have, I'm asking on behalf of someone else
15:23:10 <twobitsprite> so, a do construct can only operate on one type of monad at a time? You can't utilize multiple monad types in the same do?
15:23:36 <ndm> twobitsprite: no
15:24:13 <ndm> a do desugars to >> and >>= and both of those operate on one monad, i.e. the input and output are both of the same monad type
15:24:14 <Excedrin> I've looked at YAHT and the Gentle Introduction, but neither of them seems like a good start for someone with no prior experience
15:24:48 <ndm> some Uni's teach Haskell as a first language
15:24:58 <ndm> their lecture notes might be a good start
15:25:14 <twobitsprite> http://www.cs.chalmers.se/Cs/Grundutb/Kurser/d1pt/d1pta/external.html
15:25:35 <twobitsprite> that's supposed to be an "intro to programming" using haskell
15:25:40 <Excedrin> thanks
15:25:43 * twobitsprite hasn't read it
15:27:29 <astrolabe> I really like 'the little lisper' as an introduction to programming, but that's about lisp.
15:27:44 <Excedrin> I have the little schemer and the little mler
15:27:45 <astrolabe> Maybe we need a 'little haskeller'
15:28:04 <astrolabe> Excedrin: Maybe lend one of those to your friend.
15:28:43 <Excedrin> apparently there is a "Little Haskeller"
15:28:44 <myavuzselim> does ~~ have a name? I can't find much in google with "double tilde"
15:29:16 <myavuzselim> I saw it in http://www.perl.com/lpt/a/2005/09/08/autrijus-tang.html
15:30:00 <myavuzselim> Or is it ~ which is two times used?
15:30:27 <astrolabe> Excedrin: It doesn't seem to be in the 'little lisper' style at all.
15:30:40 <astrolabe> Which is a shame
15:30:41 <Excedrin> yea, it's not. I'm just browsing thru it
15:30:47 <Maddas> myavuzselim: Isn't it being defined in the 'where' clause?
15:31:13 <myavuzselim> oh yes, I am sorry :o)
15:31:34 <myavuzselim> my bad
15:31:36 <Maddas> No worries
15:44:56 <ndm> myavuzselim: for haskell function searches, use Hoogle
15:50:18 <AllenJB|2> At the moment we're having "fun" doing predicatelogic in Haskell and they've given us some code such as the follwoing: statement0 = (notOp (somePerson (\x->isIsland (x))))
15:50:18 <AllenJB|2> What's the technical name for the \x -> syntax? I'm trying to look it up in the docs but it's quite hard when you don't know the name ;)
15:51:21 <ihope> Lambda botation.
15:51:28 <ihope> s/botation/notation/
15:51:42 <AllenJB|2> Thank you
15:59:17 <resiak> Is "lambda botation" what happens when lambdabot attacks?
16:00:39 <ihope> :-D
16:01:56 <ihope> Hmm, what has kind (* -> *) -> * -> *?
16:02:13 <ihope> Oh, monad transformers?
16:02:29 <int-e> yes
16:02:30 <ihope> Was somebody trying to make (->) a monad transformer, then?
16:02:44 <ihope> "Couldn't match kind `?? -> ? -> *' against `(* -> *) -> * -> *'"
16:03:16 <ihope> Now we just need monad transformer transformers.
16:03:28 <ihope> You know... MaybeTT ListT IO
16:05:42 <int-e> > lift return 1
16:05:43 <lambdabot> Couldn't match kind `(* -> *) -> * -> *' against `?? -> ? -> *'
16:06:19 <ihope> :-)
16:06:27 <ihope> Well, close...
16:06:31 <ihope> > return lift 1
16:06:31 <lambdabot>  add an instance declaration for (Show (m a -> t m a))
16:06:37 <ihope> Hmm.
16:06:40 <ihope> @type list
16:06:40 <lambdabot> Not in scope: `list'
16:06:44 <ihope> @type lift
16:06:45 <lambdabot> Not in scope: `lift'
16:07:03 <int-e> A missing $ in monad-heavy code is enough :)
16:07:31 <ihope> Heh...
16:07:38 <palomer> oh boy
16:07:44 <ihope> > lift (return 1)
16:07:44 <lambdabot>  add an instance declaration for (Show (t m a))
16:08:05 <int-e> but the best part of ghci (6.4.1) output is this: Urk! Inventing strangely-kinded void TyCon: <some name> (* -> *) -> * -> *
16:09:28 <ihope> Whoo!
16:09:42 <int-e> > lift return
16:09:42 <lambdabot>  add an instance declaration for (Show (t ((->) a) (m a)))
16:09:53 <ihope> Whoa.
16:09:57 <int-e> (it does that for this one)
16:11:46 <ihope> Weird.
16:12:52 <SyntaxNinja> shapr, etc., get your feeds into the new planet-haskell (see haskell-cafe)
16:13:01 <SyntaxNinja> http://antti-juhani.kaijanaho.fi/planet-haskell/
16:24:55 <stepcut> is there a way to do nested guards?
16:25:14 <stepcut>  | cond1
16:25:20 <stepcut>   | subcond1
16:25:28 <stepcut>   | subcond2 = ...
16:26:06 <stepcut> or do I just and them, | cond1 && subcond1 = ..., | cond1 && subcond2 = ....
16:26:49 <ihope> Hmm, nested guards sound nice...
16:30:28 <stepcut> hrm, I think I can do it as one layer this time -- but nested guards do seem like a more clear way to express certain types of nested conditional structures
16:33:57 <ndm> stepcut, if cond1 is true
16:34:10 <ndm> then do you definately want to do one of hte nested guard statements?
16:34:13 <ndm> if so you can do:
16:34:23 <ndm> | cond1 = case () of
16:34:33 <ndm>                   _ | subcond1 -> a
16:34:42 <ndm>                    _ | subcond2 -> b
16:34:57 <stepcut> ndm: neat
16:36:11 <stepcut> ndm: I think going to try to work something like that out
16:36:27 <stepcut> s/think/was/
16:36:57 <stepcut> but my brain is not on all the way today
16:39:50 <palomer> whoa, I just wrote code that just worked
16:42:42 <stepcut> palomer: :p
16:42:57 <stepcut> palomer: did it compile on the first try ? Or just run correctly once you got it to compile ?
16:44:53 <palomer> ran correctly once I got it to compile
16:45:37 <stepcut> ah, that is one of the primary reasons I use haskell ;)
16:46:02 <stepcut> though, a few minutes ago, it actually compiled on the first try -- and I thought maybe I compiled the wrong file or something ;)
16:47:16 <palomer> you probably did
16:47:29 <stepcut> heh
17:10:43 <vincenz> palomer: hi
17:15:31 <palomer> high
17:34:46 <ihope> @google tounge of frog
17:34:47 <lambdabot> http://www.angelfire.com/la/carlosmay/Tof.html
17:38:04 <Lemmih> From a comment in GHC: "This is not the ugliest code you could imagine, but it's bloody close." (:
17:38:49 <dons> hehe
17:42:17 <ihope> @type length
17:42:18 <lambdabot> forall a. [a] -> Int
17:42:29 <ihope> Not Integer?
17:42:36 <ihope> > maxBound :: Int
17:42:37 <lambdabot> 2147483647
17:42:51 <ihope> > length (replicate 2147483648 1)
17:42:52 <lambdabot> 0
17:42:56 <ihope> Oh.
17:42:59 <ihope> > length (replicate 2147483649 1)
17:43:00 <lambdabot> 0
17:44:36 <ihope> @hoogle [a -> b] -> a -> [b]
17:44:37 <lambdabot> No matches, try a more general search
17:44:45 <ihope> Hmm.
17:45:26 <ihope> @hoogle IO (a -> b) -> a -> IO b
17:45:26 <lambdabot> No matches, try a more general search
17:57:32 <Lemmih> > replicate 2147483648 1
17:57:33 <lambdabot> []
17:59:23 <ihope> !
17:59:34 <ihope> > replicate 2147483647 1
17:59:35 <lambdabot> [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
17:59:35 <lambdabot> [5 @more lines]
17:59:39 <ihope> > replicate 2147483648 1
17:59:40 <lambdabot> []
17:59:56 <ihope> @type replicate
17:59:57 <lambdabot> forall a. Int -> a -> [a]
17:59:59 <ihope> Aha!
18:00:14 <Lemmih> > 2147483648 :: Int
18:00:15 <lambdabot> -2147483648
18:01:02 <ihope> > let replicate 0 _ = []; replicate (1+x) {- will you ever forgive me? -} y = (y : replicate x y) in replicate 2147483648 1
18:01:02 <lambdabot>  Parse error in pattern
18:01:03 <Lemmih> @type List.genericLength
18:01:04 <lambdabot> forall i b. (Num i) => [b] -> i
18:01:06 <ihope> Hmm.
18:01:22 <ihope> > let replicate 0 _ = []; replicate x y = (y : replicate (x-1) y) in replicate 2147483648 1
18:01:22 <lambdabot> [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
18:01:22 <lambdabot> [5 @more lines]
18:01:29 <ihope> > let replicate 0 _ = []; replicate x y = (y : replicate (x-1) y) in length (replicate 2147483648 1)
18:01:33 <lambdabot> Terminated
18:01:40 <ihope> > let replicate 0 _ = []; replicate x y = (y : replicate (x-1) y) in length (replicate 2147483647 1)
18:01:43 <lambdabot> Terminated
18:01:46 <ihope> Bleh.
18:50:16 <ihope> I am sleep have a nice day.
19:33:10 <ihope> > 3 {}
19:33:10 <lambdabot>  Empty record update
19:33:57 <Lemmih> I thought you were sleeping...
19:34:23 <ihope> Dang, you figured me out!
19:34:27 <dons> he's dreaming about lambdabot
19:34:50 <ihope> Ah, I see. You're all just a dream.
19:35:18 <ihope> Haskell makes especially pleasant dreams...
19:35:32 <dons> actually, i'm a bot. Lemmih might be too.
19:36:14 <ihope> How long is it to drop a nick?
19:37:09 <ihope> Oh, big question. ncurses doesn't seem to like Windoze... is there an alternative?
19:37:51 <dons> hmm. 
19:38:11 <ihope> You're going to say to switch to Linux, I know it...
19:38:14 <dons> you need a curses.h and cyginw, I think.
19:38:28 <ihope> Ermp, I meant to... meh, ah well.
19:38:40 <dons> switching to bsd or linux would be a better option...
19:39:06 <ihope> A driver! A driver! My Windows for a driver! Or something like that.
19:39:26 <dons> a driver for what?
19:39:41 <ihope> A wireless network adapter.
19:39:58 <dons> yeah? i thought wifi pretty much just worked these days.
19:40:06 <ihope> One of those ones that costs about 10 dollars or something.
19:40:43 <ihope> Would wireless network interface be a more general and/or applicable term?
19:41:34 <dons> no, I gues for $10 you might get some weird undocumented card. fair enough
19:41:40 <ihope> Heh.
19:41:59 <dons> but you can run windows drivers under emulation on linux.
19:42:07 <ihope> Emulation? Sounds fun.
19:42:07 <dons> at least for some cards.
19:42:13 <ihope> Well, I suppose I'm going to wake up now or something. Bye bye...
19:42:20 <dons> not sure how complete the coverage is.
19:45:54 <Lemmih> You guys know of any research being done in the area of proper source code indentation?
19:48:32 <dons> I would think back in the 80s, on the attribute grammar editors, there'd be some stuff
19:48:50 <dons> let me see if i can find some mentoin in my yi bibliography
19:49:12 <dons> structure editrso, i mean
19:49:50 <Lemmih> Right, like in proxima.
19:50:06 <dons> yep.
19:50:12 <dons> that's the reference I was looking at
19:50:32 <dons> any of those editors that only let you type in valid syntax, and lay it you for you
19:51:26 <dons> there might be some references in the back of the yi paper
19:51:42 <dons> and check scholar.google.com and citseer
19:53:39 <dons> http://openssh.com/usage/graphs.html, hehe ssh.com rapidly disappearing
19:55:37 <Excedrin> dons: ./Setup.lhs build fails for me during link, with the message that YiUtils.o doesn't exist
19:55:55 <Excedrin> what should I look at?
19:56:19 <dons> which Cabal version?
19:56:44 <Excedrin> how can I check?
19:57:14 <dons> ghc-pkg list Cabal
19:57:26 <Excedrin> 1.0
19:57:29 <Lemmih> Implementing auto-indentation in hIDE is gonna be harder than syntax-highlighting and type-checking together. *sigh*
19:57:32 <Excedrin> er, Cabal-1.0
19:57:56 <dons> Lemmih, i'd think so.
19:58:03 <dons> but not too much harder. it's pretty printing with magic rules, no?
19:58:25 <dons> Excedrin, you need 1.13 or greater
19:58:37 <Excedrin> oh, ok, thanks
19:58:40 <dons> I think
20:00:27 <Lemmih> dons: One would need an incremental parser /-:
20:01:51 <Lemmih> Writing such a parser is gonna be difficult, I think. Even proxima re-parsed the entire file in every iteration.
20:04:02 <Lemmih> Bed time. Good night, dons.
20:08:01 <dons>    night
20:54:57 <twobitsprite> is there a stdlib for grids?
20:56:59 <Korollary> what is a grid?
21:00:43 <twobitsprite> Korollary: I.e., a game board :)
21:01:26 <Philippa> nope, and I've never seen one for any language
21:01:50 <Philippa> (and I've played many board games whose boards're better described by graphs than grids)
21:02:05 <Philippa> do you want anything more than 2d array facilities?
21:02:24 <twobitsprite> Philippa: I've considered looking into the possible use of graphs... and pointers?
21:02:51 <twobitsprite> Philippa: well... I'm writing a Go program... so .....
21:03:02 <twobitsprite> s/and/any
21:04:11 <Philippa> hey Smokey`, LTNS
21:04:59 <twobitsprite> any references for using graphs to describe a board game?
21:05:39 <Philippa> plenty for decision trees, they're all over the AI literature. A little less for "just" describing the board as a graph, but usually because you can extrude out the decision tree from it
21:05:58 <Philippa> (but eg consider how A* must inherantly work for pathfinding on a board...)
21:06:29 <twobitsprite> Philippa: well... I'm not writing the AI... I'm writing a program that will write the AI :P (i.e. genetic programming)
21:06:48 <Philippa> then any old shitty representation'll do, no?
21:07:00 <dons> a [[a]] ?
21:07:14 <dons> but A* works nnicely on fgl graphs
21:07:29 <dons> you could try that.
21:07:34 <twobitsprite> A*?
21:07:43 <dons> the boards itself would probably be a [[a] or an Array of Arrays
21:08:10 <lispy> twobitsprite: A* is a path searching algorithm
21:08:31 <twobitsprite> lispy: ahh, of course... I wasn't sure if that was haskell talk, or AI talk
21:09:07 <lispy> is A* the one where you do a depth first search but limit the depth and keep increasing it till you find a path?
21:09:20 <Philippa> no, that's iterative deepening
21:09:42 <Philippa> A*'s the one that's like dijkstra with a different terminating condition and a heuristic
21:10:24 <lispy> hmm...i'll have to check my AI book, i've apparently mistaken A* for iterative deepening for quite some time :)
21:17:45 <twobitsprite> what does "->" mean outside the context of a lambda?
21:17:54 <twobitsprite> @type (->)
21:17:55 <lambdabot> parse error on input `->'
21:18:20 <Korollary> @type map
21:18:21 <lambdabot> forall b a. (a -> b) -> [a] -> [b]
21:19:11 <dons> it's a type constructor
21:19:13 <twobitsprite> er... n/m... it is in a lambda, I missed the \
21:19:31 <twobitsprite> well... it was used in an expression, which threw me off...
21:19:33 <BUGIBBA24M> hi ppl
21:20:13 <BUGIBBA24M> anyone feels like helping me ? 
21:22:16 <Korollary> aw
21:22:40 <Korollary> just ask
21:25:55 <BUGIBBA24M> well its to built a programming language simulator ive written most of what it asks
21:27:23 <BUGIBBA24M> but the output opf the instructions are funnyit gives this format ([String,Integer],[String])
21:27:46 <BUGIBBA24M> [String,Integer] - this is to simulate a collection of variables
21:28:04 <BUGIBBA24M> but what about the [String ] ? :/
21:29:19 <BUGIBBA24M> i have to figure why is that needed because i cant finish it  if i dont
21:35:30 <dons> homework eh?
21:36:27 <Philippa> and I suspect he spends most of his time typing "A/S/L?" with a nick like that...
21:36:45 <Korollary> let's not judge
21:36:52 * Korollary chuckles
21:37:02 <Philippa> sure. Taking the piss is another matter :-)
21:37:14 <dons> judging is fun.
21:39:28 <Korollary> What's so special about call/cc?
21:39:49 <dons> what's not special about it?
21:39:55 <dons> it's pretty powerful
21:39:59 <Cale> Korollary: it breaks referential transparency horribly and gives you first-class goto labels?
21:40:07 <dons> you can implement thredas and exceptions with it..
21:40:22 <dons> so, yeah, special.
21:41:38 <bynari> Haha
21:43:03 <Korollary> I can't motivate myself to learn lisp or scheme.
21:43:37 <dons> I think that's reasonable :)
21:44:03 <gzl> I never could either.
21:44:54 <Cale> I can see with lisp -- common lisp is really irritating. I did a few projects in it, and found it fairly frustrating. Scheme seems alright, but I haven't written as much of it.
21:45:37 <Cale> There are a few features in lisp which basically make your life hard if you try to apply ordinary functional idioms.
21:46:18 <Philippa> I can't motivate myself to learn beyond understanding the basic concepts
21:46:36 <Philippa> mostly because I don't see anything new of value put against everything else I understand
21:46:56 <Philippa> I know there're systems I can build in it that I can't in a suitable statically typed language at the mo
21:47:16 <Philippa> but they're generally ones I don't want to even contemplate building without a type checker
21:47:22 <Korollary> It goes "oh s-expressions are so simple and powerful and used for everything".... "except IF is a special case because evaluating strictly would mean executing both branches." Argh.
21:47:57 <Philippa> s-expressions /and macros/... :-)
21:48:07 <Korollary> yeah. 24 more special cases.
21:58:28 <Korollary> oh for the love of monad
21:59:01 <Korollary> nice library design, ocaml
21:59:06 <Korollary> "matched_string s returns the substring of s that was matched by the latest Str.string_match, Str.search_forward or Str.search_backward. The user must make sure that the parameter s is the same string that was passed to the matching or searching function."
21:59:41 <dons> yikes!
22:00:32 <dons> should they be disowned from the fp community?
22:00:40 <audreyt> that is straight from "perldoc perlre"
22:00:46 * audreyt is surprised
22:00:47 <dons> ah.
22:01:21 <Korollary> sinking down to the levels of perl.
22:01:30 <Korollary> $1 $2, etc. eh?
22:02:01 <audreyt> yup
22:02:39 <audreyt> (though perl6 is moving away from that and into parsec combinators)
22:02:59 <audreyt> s/parsec/parser/
22:03:24 <dons> :)
22:04:31 <audreyt> eg. http://perlcabal.org/~gaal/peek/slide37.html
22:04:42 <Philippa> cool
22:05:10 <audreyt> I think the regex-inspired syntax reads better, but that may just be me :)
22:05:12 <Philippa> why do I have the feeling your TaPL project's possibly the best thing that ever happened to perl?
22:05:44 <audreyt> (I think CPAN is widely agreed to be the best thing that ever happened to perl... but I'll take the second place :))
22:05:56 <Philippa> fair enough :-)
22:06:20 <Korollary> cpan is the best thing that ever happened to perl programmers, not perl ;)
22:07:27 <audreyt> *smile*
22:18:11 <palomer> ok
22:18:15 <palomer> someone tell me what a row type is
22:25:22 <Philippa> palomer: we're talking about records here, right?
22:25:56 <Philippa> IIRC, a row type is effectively a record type - contains a bunch of fields, or more usually is an empty row or the extension of a field onto a row or...
22:34:02 <palomer> ah
22:34:07 <palomer> so row-type=record-type
22:34:07 <palomer> gotcha
22:35:09 <palomer> night!
22:51:31 <dons> \yow!
22:51:32 <lambdabot> DIDI ... is that a MARTIAN name, or, are we in ISRAEL?
22:53:30 <shapr> yow!
22:53:36 <audreyt> \yow!
22:53:36 <lambdabot> I can't decide which WRONG TURN to make first!!  I wonder if BOB
22:53:36 <lambdabot> GUCCIONE has these problems!
22:56:22 <Korollary> hey shapr
22:56:34 * Korollary cringes while editing a perl script.
22:56:47 <dons> \dynamic-reload quote
22:56:48 <lambdabot> module reloaded
22:56:52 <dons> \help b52s
22:56:52 <lambdabot>  @help <command> - ask for help for <command>
22:57:41 <dons> \dynamic-reload quote
22:57:42 <lambdabot> module reloaded
22:57:47 <dons> \help b52s
22:57:48 <lambdabot> Anyone noticed the b52s sound a lot like zippy?
22:57:52 <dons> \b52s
22:57:52 <lambdabot> Hot pants explosion at the factory!
22:58:00 <dons> \b52s
22:58:01 <lambdabot> Hot pants explosion at the factory!
22:58:04 <dons> \b52s
22:58:05 <lambdabot> Watch out for that piranha. There goes a narwhale. HERE COMES A BIKINI WHALE!
22:58:17 <dons> actual b52s lyrics
22:58:56 <dons> \b52s
22:58:56 <lambdabot> Watch out for that piranha. There goes a narwhale. HERE COMES A BIKINI WHALE!
22:59:00 <dons> \b52s
22:59:00 <lambdabot> His ear lobe fell in the deep. Someone reached in and grabbed it. It was a rock lobster!
23:00:27 <dons> \b52s
23:00:28 <lambdabot> It's a dreary downtown day, but at the end of my 40 foot leash is my little friend quiche.
23:00:44 <shapr> dons: Does it say 'love shack' occasionally?
23:00:50 <dons> ah, it should!
23:00:55 <dons> I'll have to add some more lyrics
23:01:22 <shapr> Only B52s song I really know is Love Shack, but I agree it sounds like Zippy.
23:01:48 <dons> Rock Lobster and Planet Claire also have a very zippy feel
23:03:52 <ibid> please submit your blog feeds to planet haskell :)
23:04:22 <dons> ibid, I think ndm has a blog. Also araujo.
23:04:27 <dons> there's also a hwn feed
23:04:52 <dons> hmm, shapr and peteg have had blogs at some point
23:04:53 <dons> also sseefried (seafood)
23:05:23 <dons> i'm sure there are more. but maybe we need theire permission to syndicate? is it rude to syndicate without perms?
23:08:42 <ibid> dons: i'm asking people to submit their own feeds
23:09:05 <ibid> dons: i know of several i'd like to add myself but am waiting for their okay
23:09:13 <ibid> (i'll pester them on personal email later)
23:11:23 <Korollary> what is planet haskell? is it like planetquake?
23:23:50 <ibid> Korollary: http://antti-juhani.kaijanaho.fi/planet-haskell/
23:24:07 <ibid> (hopefully will be moved to a better URI soon)
23:30:27 <shapr> ibid: I have a blog!
23:30:47 <shapr> Though I'm trying to switch to Oleg's HSXML...
23:30:54 <shapr> using PLog at the moment
23:31:04 <dancor> i just can't work out a good way to manipulate multiple state monads in one function
23:31:20 <dancor> it seems like a very reasonable thing to need to do
23:31:53 <dancor> i'm trying to make a scrabble game.  so you've got like the board and the bag and the racks, a bunch of state monads.
23:33:31 <ibid> shapr: see my post in -cafe and follow instructions :)
23:33:52 <dancor> if i have like f :: State (a, b, c) and g :: State (a, c) it's not easy to pass a, c to g from f..
23:34:36 <dancor> i think something with State Map might be optimal, but it's all very complicated..
23:35:16 <dons> \where+ planet-haskell http://antti-juhani.kaijanaho.fi/planet-haskell/
23:35:17 <lambdabot> Done.
23:35:31 <dancor> any tips or ideas?
23:35:57 <dons> ibid, if you want the Haskell Weekly News rss feed, it's here: http://sequence.complete.org/node/feed
23:36:09 <dons> you have my ok to use it. though i'm not sure if it's what you are looking for
23:37:23 <ibid> dons: added
23:37:49 <ibid> dons: hrm, you're using h1 there?
23:37:58 <vlcak> \join #sane
23:37:59 <ibid> guess i'll have to adjust my css :)
23:37:59 <lambdabot> Not enough privileges
23:38:48 <ibid> dons: and also, i already have the yhc blog listed, so hwn fits the bill nicely
23:38:51 <ibid> dons: thanks
23:42:23 <dons> ok. cool
23:42:35 <dons> maybe I shouldn't be using h1
23:49:06 <ibid> dons: hrm, that feed address looks suspiciously like a full feed of sequence. is this false?
23:51:57 <ibid> hrm, it doesn't look like it exports anything else, though
23:53:27 <robokop> when i have a case of chars can i make one line for both the uppercase and the lowercase
23:55:04 <Korollary> no, they are different values if I understood you correctly
23:55:25 <robokop> ke
23:55:51 <Korollary> but you can convert your input to all uppercase and then you only need to list the uppercase options
23:56:20 <Korollary> case (toUpper something) of ... yadda yadda.
23:56:28 <robokop> thanks
23:56:59 <adu> hi
