00:00:06 <ohub> Yep, me too. And many lispers also :)
00:00:09 <dons> ?version
00:00:10 <lambdabot> lambdabot 3p370, GHC 6.4.1 (Linux i686 3.20GHz)
00:00:10 <lambdabot> darcs get http://www.cse.unsw.edu.au/~dons/lambdabot
00:00:11 <dons> ^^ see
00:00:34 <ohub> This article about Scheme interpreter in Haskell caught my interest
00:01:13 <dons> ?unlambda `.!i
00:01:14 <lambdabot> !
00:01:25 <dons> ah, lambdabot even has an unlambda interpreter :}
00:05:18 <dons> @pl \x y -> x + 1
00:05:19 <lambdabot> const . (1 +)
00:05:26 <dons> and a code refactorer
00:05:42 <dons> @pl \(a,b) -> (f a, g b)
00:05:43 <lambdabot> f *** g
00:06:08 <dons> @pl \f xs -> xs >>= return . f
00:06:08 <lambdabot> fmap
00:06:47 <dons> actually , two code refactorers:
00:06:54 <dons> ?hylo fact 0 = 1 ; fact n = n * fact (n-1)
00:06:55 <lambdabot> fact = hylo (_L :: Mu (Const () :+: (Const v2 :*: Id))) g h
00:06:55 <lambdabot>  where g (Left (())) = 1
00:06:55 <lambdabot>    g (Right (((n), v1))) = n * v1
00:06:55 <lambdabot>    h 0 = Left (())
00:06:55 <lambdabot>    h n = Right (((n), (n - 1)))
00:07:01 <dons> that one generates hylomorphisms
00:07:10 <dons> which are kin of nuts
00:07:18 <dons> kind, not kin ;)
00:07:28 <dons> maybe they are kin of nuts. it makes sense
00:10:02 <Lemmih> Hylomorphisms are great for scaring newbies, it seems.
00:10:42 <dons> they scare me
00:11:24 <dons> though we'll be getting a new improved more concise @hylo soon.
00:11:42 <dons> I wrote to the DrHylo author, and he's sending me the new pointfree super versionn
00:12:03 <dons> it's for "extreme pointfree programming" , I think was the quote
00:12:20 <dons> Alcino Cunha, is the guy
00:21:01 <shapr> dons: Is CSE roughly the same as gzipping an AST?
00:25:30 <dons> hmm. yeah, kind of.
00:25:50 <dons> interesting way to look at it.
00:26:09 <Lemmih> gzipping?
00:26:45 <dons> makes me wonder what a gzip pass in a compiler for a purely functional languagee would do..
00:27:12 <dons> Lemmih, I think he means in terms of how the gzip algo compresses data with a lookup table
00:27:13 <jewel> obviously it's there to prevent using up all the RAM
00:27:46 <dons> you float out repeated expressions and bind them, using the new ident in place.
00:28:23 <dons> roughly what gzip does to strins  with a lookup table
00:28:49 <dons> I think if you actually tried to implement gzip as an compiler optimiation, over an AST, you'd end up with CSE.
00:29:39 <xinming1983> lisppaste2: url
00:29:40 <lisppaste2> To use the lisppaste bot, visit http://paste.lisp.org/new/haskell and enter your paste.
00:30:57 <flux__> so, how would another algorithm, like bzip2 fit in?-)
00:31:35 <flux__> it is very difficult to see that working at all, though ;)
00:32:13 <shapr> Burroughs-Wheeler does something seriously crazy, doesn't it?
00:32:16 <flux__> yes
00:32:16 * shapr googles
00:32:22 <flux__> atleast arithmetic compression is out of the question
00:33:02 <flux__> I think they refer to it as 'fft for text'
00:33:15 <shapr> Huh, I didn't know Julian Seward wrote bzip2
00:33:54 <shapr> um, 'Burrows-Wheeler' oops
00:41:54 <shapr> flux__: That idea is twisting my head into knots.
00:42:55 <flux__> I guess in essence you would want to reduce redundancy in a program, and compression algorithms do just that, so one would imagine some common ground could be found
00:43:29 <shapr> I think I don't understand Burrows-Wheeler well enough to do that.
00:44:22 <flux__> yeah, but it isn't obvious, to me, that it is impossible take advantage of it, either ;)
00:45:24 <flux__> but, I guess if it is akin to more similar to huffman-encoding than merely finding similarities, then it would be clear that is isn't suitable..
00:45:29 <flux__> s/akin to //
00:48:44 <osqulda> is zipper contexts a one-hole context from partial differentiation?
00:48:49 <osqulda> as defined by McBride?
00:48:54 <osqulda> or is it just differentiation?
00:48:59 <osqulda> please explain.
00:49:04 <osqulda> kosmikus?
00:50:56 * shapr zips osqulda into a bag!
00:51:51 <osqulda> osqulda prefers sets
00:52:24 <shapr> I am happy for osqulda.
00:52:33 <shapr> flux__: Hey, I figured it out.
00:53:06 <shapr> BW increases compressibility by sorting the input.
00:53:37 <shapr> Any sort would do it, but BW is reversible. That's always handy for decompression.
00:53:58 <flux__> I got that, it's the reversibility attribute of the operation that isn't straight-forward to grasp ;)
00:54:19 <shapr> You don't need reversibility yet, we don't use Quantum Computers.
00:54:41 <shapr> The good point of BW in code would be the ability to reorder your computations for efficiency.
00:55:11 <shapr> So lazy evaluation combined with commutative chunks of code like monads give you some of the same advantages.
00:55:30 <shapr> Though that's sort of runtime Burrows-Wheeler...
00:55:33 * shapr thinks more.
00:56:31 <shapr> I dunno, that sounds kinda cheesy.
00:57:31 <shapr> Maybe arithmetic encoding of programs would be where you approximate or interpolate the same result with a similar process that takes less time?
01:02:09 <genneth_> osqulda: as i understand it, a zipper is constructible in a fairly trivial way from differentiating
01:04:41 <osqulda> but the context's are one-hole ones?
01:04:48 <Lemmih> shapr: Did you see my Haskell debugger: http://darcs.haskell.org/~lemmih/DebugLog.txt ?
01:04:50 <osqulda> McBride's unpuslished manuscripts gives the partial diff.
01:05:35 * Korollary found shapr on last.fm via franka
01:06:20 <shapr> Lemmih: That's way spiffy.
01:07:46 <shapr> Korollary: You have a last.fm account?
01:08:03 <osqulda> genneth_ I read it was not trivial at lambada/lambdatheultimate (name..)
01:08:37 <Korollary> shapr: yessah
01:09:56 <genneth_> osqulda: i don't really know the specifics; i suspect i got the impression of trivial from something that oleg wrote, which does translate to "impossible" in real terms
01:11:19 <genneth_> i didn't think i was that offensive...
01:11:31 * genneth_ goes and cries about everyone running away and not being loved
01:25:10 <shapr> genneth: I don't think you were offensive.
01:25:20 <shapr> I think osqulda is more focussed on the knowledge than the niceties.
01:25:26 <genneth> :-D
01:37:55 <ski> @yow
01:37:56 <lambdabot> I haven't been married in over six years, but we had sexual counseling
01:37:56 <lambdabot> every day from Oral Roberts!!
02:00:14 <shapr> tennin: http://lambda-the-ultimate.org/node/1337
02:00:14 <shapr> dang
02:00:16 <shapr> he's gone.
02:01:36 <Lemmih> How about banning borism? At least temporarily?
02:01:49 <ski> @elite http://lambda-the-ultimate.org/node/1337
02:01:49 <lambdabot> http://1AmbD4-The-ul7Im4t3.0rG/N0DE/1337
02:06:31 <kuvkir> hi all.
02:06:55 <kuvkir> how to interact with ghc within emacs?
02:07:19 <Lemmih> kuvkir: Do you have haskell-mode installed?
02:07:47 <kuvkir> i use haskell-mode,but whet i press C-c C-z it said 'Symbol's function definition is void: switch-to-haskell'
02:09:21 <shapr> M-x turn-on-haskell-ghci
02:09:26 <shapr> then C-c C-l
02:10:01 <TuringTest> kuvkir: I use haskell-ghci-load-file
02:10:42 <dcoutts> TuringTest, does save/restore make sense btw?
02:10:43 <kuvkir> shapr: thanks, it works.
02:10:51 <TuringTest> dcoutts: I think so, I am testing it in a moment
02:11:13 * TuringTest testing...
02:11:33 <TuringTest> dcoutts: save/restore works!  Thanks for the hint.
02:11:53 <dcoutts> TuringTest, cool. It's a nicer idiom anyway.
02:12:12 <dcoutts> but the other thing is a bug we'll look into.
02:12:16 <dcoutts> xerox_!!!
02:12:17 <dcoutts> :-)
02:12:51 <dcoutts> basically I think our with***Pattern functions are conceptually flawed
02:13:13 <dcoutts> because the pattern can be used by the cairo conext after the with*** goes put of scope
02:13:20 <dcoutts> put/out
02:13:59 <dcoutts> so perhaps the solution is to merge setSource into with***pattern
02:14:21 <dcoutts> so that we use the pattern for that time and then reset
02:14:25 <dcoutts> not sure
02:51:40 * shapr throws lambdas
02:52:25 * chrisbrown catches lambdas and eats them for breakfast
02:52:44 <ski> noo, don't eat the lambdas !
02:52:54 <shapr> Watch out for acid redex!
02:52:55 <ski> the lambdas are our friends !!
02:53:14 <shapr> @google acid redux
02:53:15 <lambdabot> http://www.enutritionals.net/acid-redux.htm
02:53:56 <shapr> hey boy!
02:54:10 <boy> shapr: sup
02:54:18 <boy> @seen dons 
02:54:18 <lambdabot> dons is in #haskell. Last spoke 2 hours, 25 minutes and 28 seconds ago.
03:10:08 <pierre-> hello.
03:11:54 <boy> hey
03:44:29 * shapr discovers an RSS aggregator in Haskell - http://huronbox.com/~james/techdemos/haskell.html
04:14:53 * shapr grumbles at "Unicode data in a Unicode-only collation or ntext data cannot be sent to clients using DB-Library (such as ISQL) or ODBC version 3.7 or earlier."
04:17:20 <genneth> shapr: time for UTF-7 encoding?
04:22:26 <wilx> Is UTF-7 standardised?
04:23:27 <musasabi> yes.
04:24:21 <musasabi> http://www.ietf.org/rfc/rfc2152.txt - UTF-7 A Mail-Safe Transformation Format of Unicode
04:38:33 <bolrod> hello
04:39:11 <bolrod> someone here using wxhaskell on linux?
04:46:59 <musasabi> yes
04:48:52 <bolrod> how did you install it. ?
04:49:32 <musasabi> compiled a suitable version of wxgtk and then installed it from source.
04:49:52 <musasabi> the trick is that wxgtk should be with unicode disabled.
04:49:54 <bolrod> hrm
04:50:08 <bolrod> I installed it from repository
04:50:10 <bolrod> (ubuntu)
04:50:45 <bolrod>  I think
04:51:00 <bolrod> yes
04:51:21 <bolrod> you sure its going to work with unicode disabled? :P
04:52:03 <bolrod> I get
04:52:03 <bolrod> wxc/include/wrapper.h:172: error: no matching function for call to 'wxDataObjectSimple::wxDataObjectSimple(char*&)'
04:52:07 <bolrod> plus alot of other errors
04:54:35 <musasabi> bolrod: that is the unicode vs no unicode error I think.
04:54:41 <bolrod> hrm
04:54:51 <bolrod> I can't uninstall libwxgtk2.6-0
04:54:56 <bolrod> well... I'll break some other things
04:55:38 <musasabi> Does anyone have a Debian package for c2hs-0.14.5 ?
04:56:56 <bolrod> oh man... stupid package manager forcing dependancies
04:57:08 <bolrod> how do I force them to not follow dependancy tree?
04:58:20 <musasabi> dpkg + --force-something
04:58:36 <bolrod> lets see
05:11:02 <dcoutts> bolrod, wxHaskell has to be compiled against wxGTK that has been built without odbc or unicode
05:11:34 <dcoutts> bolrod, you can see the gentoo wxhaskell packages for details if you care
05:12:03 <dcoutts> you see, you lot should be using gentoo and then you wouldn't have these problems :-)
05:14:02 <dons> ?yow!
05:14:03 <lambdabot> ANN JILLIAN'S HAIR makes LONI ANDERSON'S HAIR look like RICARDO
05:14:03 <lambdabot> MONTALBAN'S HAIR!
05:16:11 <boy> dons: !
05:17:05 <ValarQ> :/
05:17:15 <boy> boy to dons
05:17:26 <dons> hi
05:17:38 <boy> dons: i hope you haven't released hs-plugins yet
05:20:39 <boy> dons: do you know who i am?
05:21:02 <bolrod> blah..now I can't install gtk dev because of the dependancies
05:21:05 <bolrod> >::/
05:24:46 <dons> ah, boy == jips?
05:24:59 <boy> dons: yeah
05:25:04 <dons> how's that plugins patch coming along?
05:25:29 <boy> dons: not good... apparently marlow's readFile' also does lazy IO so it suffers the same problems as readFile
05:25:39 <dons> hmm
05:25:45 <dcoutts> use slurp
05:25:46 <dons> it's quite possible to read all of a file though
05:25:55 <dons> you only need to call length s `seq` return ()  on it
05:26:45 <dons> unless something else is at play
05:27:17 <dons> dcoutts, I reckon there must be nearly 200 tools in the http://haskell.org/haskellwiki/Libraries_and_tools pagge.
05:27:20 <dons> maybe more
05:27:23 <dons> i should count them up
05:27:44 <boy> dcoutts: is there any way to close a file that has been opened with readFile?
05:27:47 <dcoutts> yeah, there's a lot
05:28:12 <dcoutts> boy, I don't think so. Use hOpenFile and hClose if you need that
05:28:40 <dcoutts> dons, and your point is that I've got a few more left to package for gentoo? ;-)
05:29:01 <dons> strictRead h = do
05:29:02 <dons>     s <- openFile h ReadMode
05:29:02 <dons>     length s `seq` return ()
05:29:02 <dons>     hClose h
05:29:02 <dons>     return s
05:29:12 <dons> dcoutts, oh no. just that there is a lot!
05:29:22 <boy> dons: yeah but that probably eats a lot of memory
05:29:34 <dons> shrug. you gotta read the whole file anyway
05:29:37 <dons> theyre' pretty short
05:29:39 <dons> 10k or so
05:29:45 <dons> average srce file is like 5k
05:29:52 <dons> length on 1M is bad
05:30:07 <dons> if we were really worried about performance I'd start using packed strings
05:30:49 <boy> dons: hm... so do you think you could replace the 2 calls to readFile in merge with your strictRead? or do you want me to do it and submit a patch?
05:31:25 <dons> i'd like you to try it, see if it fixes your problem
05:31:26 <dons> and if so, submit a patch, yeah :)
05:31:32 <dcoutts> dons, I wonder how many of those things are not bitrotted or a pita to build...
05:31:47 <boy> dons: ok i'll try it right now
05:31:49 <dons> probably a few are a pita.  some are new though
05:32:06 <dons> we need Cabal karma . a special prise for Cabalising your project.
05:32:16 <dons> prize. me brain sleepy yes
05:32:34 <bolrod> dah.. compiling
05:32:35 <bolrod> :)
05:38:39 <boy> dons: hm... your strictRead function doesn't seem to compile
05:39:12 <dcoutts> dons, I had no idea there were so many haskell libs. But how do I find out if they're any good?
05:39:18 <dons> oh, maybe I should ensure things typecheck
05:39:36 <dons> dcoutts, how? that's an odd question
05:39:49 <dcoutts> dons, imagine a less experienced haskell user comes along and looks at that, how do they know which one to use
05:39:50 <boy> dons: Couldn't math `[a]' against `GHC.IOBase.Handle'
05:40:08 <boy> dons: In the first argument of `length', namely `s'
05:40:24 <ValarQ> dcoutts: they could check for "dcoutts" in the packet maintainer string :P
05:40:27 <dcoutts> I mean some art not used and bitrotted, some are superceeded by others, some were not developed into mature things
05:40:29 <dcoutts> ValarQ, hah
05:40:46 <dcoutts> dons, how does cpan deal with that?
05:41:01 <dcoutts> dons, we need some kind of way of figuring out the de-facto standards
05:42:35 <boy> dons: i think you meant to use hGetContents
05:45:01 <Saulzar> Hmm, I agree. Some are clearly much more usable "right now", others maybe of more of a research interest
05:48:06 <shapr> Hm, what's a good amount to charge for Haskell development?
05:48:12 <boy> a lot :)
05:48:27 * dcoutts agrees with jip
05:48:35 <boy> you mean boy
05:48:44 * shapr thinks of the many nicknames boy has had.
05:48:45 <dcoutts> oh ok then
05:49:37 <boy> dons: it workssssssssss!
05:50:02 <bolrod> yay.. wxhaskell seems to compile \o/
05:50:52 <shapr> dcoutts: That guy is asking for a free demo based on a real use case. I think I'll try it...
05:51:13 <dcoutts> shapr, which guy?
05:51:22 <shapr> The Haskell's market guy.
05:52:07 <dcoutts> shapr, the POS system?
05:52:37 <boy> piece of sh!t?
05:52:38 <shapr> We never discussed how much to charge for Haskell development. Personally, I'd rather charge according to the specs rather than by hour.
05:52:46 <shapr> Point of Sale, I suspect.
05:52:50 <dcoutts> indeed
05:53:15 <dcoutts> shapr, because that way if you're quick then you get paid more per hour?
05:53:46 <shapr> dcoutts: *exactly*
05:53:52 <dcoutts> ;-)
05:54:00 <shapr> And if you're slow you know you need to have some other job.
05:54:05 <bolrod> you could make a ratio
05:54:15 <bolrod> 1 hour haskell coding vs. 2 hours C coding
05:54:18 <dcoutts> shapr, sounds like you need more details on the spec
05:54:27 <shapr> Yeah, I agree.
05:54:45 <dcoutts> shapr, glade is great for makeing GUIs quickly
05:54:53 <shapr> It's pretty easy to come up with a rough design based on his original PoS description, but it'd still require spike solutions to try out the pieces.
05:55:03 <shapr> I would definitely use Glade.
05:55:09 <tuomov> glade is great for making crap quickly.
05:55:18 <shapr> tuomov: Suggest better options?
05:55:22 <tuomov> Vis :)
05:55:35 <shapr> Can I use it on win32 and Linux with Haskell? :-)
05:55:43 <tuomov> if you write it first :)
05:55:49 <dcoutts> heh heh :-)
05:55:51 <shapr> Glade is already written...
05:56:07 <tuomov> it has the approach opposite to the correct approach
05:56:10 <dcoutts> and is the gtk+ de-facto standard
05:56:16 <shapr> Still, it works.
05:56:16 <tuomov> programs connect to glade shit, instead of glade shit connecting to programs
05:56:18 <dcoutts> though it admittedly is not perfect
05:56:25 <shapr> Nothing is perfect.
05:56:37 <shapr> But if it lets me make money writing Haskell, I'm willing to cut it a break :-)
05:56:45 <tuomov> it is limited to WIMP, so it's utter crap. 
05:56:50 <dcoutts> but it's loads quicker than designing guis in code
05:56:56 <dcoutts> and easier to make it pretty
05:57:04 <shapr> tuomov: Well, fix it or get over it :-)
05:57:05 <dcoutts> compared to GUI combinators
05:57:19 <tuomov> it can't be fixed
05:57:35 <dcoutts> GUI combinators give you a certain style, which I tend to call... ugly
05:57:36 <shapr> 'Do something better' is sufficiently equal to 'fix it.'
05:57:47 <tuomov> it sucks that everthing this days wimpwimpwimpwimpwimpwimpwshitshitshit
05:57:51 <shapr> If you get Vis working, I'll use it.
05:57:53 <tuomov> +is
05:57:55 <shapr> Otherwise, I'll use Glade.
05:58:02 <tuomov> and nobody wants to create anything better
05:58:05 <tuomov> nobody who has the time anywya
05:58:06 <boy> dons: check it out: http://img515.imageshack.us/img515/698/coolshit1bi.png
05:58:07 <shapr> You do.
05:58:11 <boy> that was made with glade btw
05:58:13 <tuomov> I don't have the time
05:58:22 <shapr> Well, I can't help there.
05:58:31 <tuomov> and it's fighting against the windmills, because the desktop lamers don't want flexibility
05:58:36 <dcoutts> shapr, what about the db stuff?
05:58:41 <shapr> dcoutts: HaskellDB on top of HDBC
05:58:43 <tuomov> ein desktop environment, ein widget set, ein configuration
05:58:44 <dcoutts> shapr, and replication?
05:58:47 <shapr> Postgresql does replication.
05:58:51 <boy> tuomov: how is ion going? :)
05:58:59 <dcoutts> shapr, it's tricky to setup I blieve
05:59:17 <shapr> dcoutts: Good point, I wonder if SQLite or other HDBC friendly backend has better sync support?
05:59:18 <Saulzar> What do you mean glade stuff should connect to your program? Program should be independant of interface?
05:59:28 <shapr> hoi vincenz 
05:59:33 <dcoutts> shapr, it's not clear what the scalabilty or connectivity of this system should be
05:59:41 <boy> Saulzar: i think he is talking about theoretical ideas
05:59:48 <tuomov> Saulzar: of course. that's the only sensible approach anyone with a few brain cells left would use
06:00:04 <tuomov> but these desktop fascists want to limit you to a single interface
06:00:05 <dcoutts> shapr, for example, why do we need replication & aggregation if we could use a centeral postgres server?
06:00:11 <Saulzar> Makes it very hard to specify behaviour... gui code is often not just a simple wrapper
06:00:16 <dcoutts> shapr, eg do we need disconected operation?!
06:00:27 <shapr> dcoutts: He mentions flaky network connectivity.
06:00:30 <boy> dons: the good news is that it works
06:00:37 <dcoutts> shapr, or are we expecting this system to scale to 100's of terminals
06:01:01 <dcoutts> shapr, well he should realise that it might be cheaper to make the network work than to allow disconected operation
06:01:04 <tuomov> Saulzar: programs simply provide commands and data in a manner that all kinds of UI modules can use it for their stylesheets, possibly even autogenerating parts
06:01:05 <carp> does anyone have a ghc binary for an intel mac knocking around?
06:01:08 <tuomov> a bit like html+css
06:01:16 <dcoutts> shapr, then we need to be able to merge results
06:01:28 <dcoutts> shapr, and that sounds like an app layer operation, not a db layer one
06:01:32 <tuomov> with standardised names for certain often-occuring commands and so on
06:01:52 <shapr> dcoutts: Agreed
06:02:05 <shapr> dcoutts: Though that may be one reason he wants it in Haskell, it'd be easy to make a DSL for merging.
06:02:09 <Saulzar> Makes no sense to be agressive and call stuff "shit" and "facists", people just use stuff which works. It's like Haskell vs Java, makes no sense to insult Java without attempts to improve the situation :)
06:02:16 <dcoutts> shapr, yes perhaps
06:02:36 <boy> but java really is shit :P
06:02:36 <tuomov> Saulzar: the gnome people very specifically oppose configurability
06:02:38 <dcoutts> shapr, an alternative is a client server system with a centeralsied db but the clients to not access the db directly
06:02:44 <tuomov> they truely are desktop fascists.
06:02:49 <shapr> dcoutts: I'd be happiest with that.
06:02:56 <shapr> tuomov: They don't force you to use Gnome.
06:03:03 <tuomov> in practise they do
06:03:21 <dcoutts> shapr, eg using secured message passing from client to server
06:03:22 <shapr> No one is tying you down to a Gnome box :-)
06:03:23 <tuomov> because every lamer uses their shit, and there's no other software left
06:03:27 <Saulzar> Not if you use KDE, but I supect that has a 4 letter word too :)
06:03:27 <tuomov> e.g. firefox was ruined completely
06:03:28 <shapr> tuomov: Chill out man
06:03:33 <shapr> tuomov: so fork it.
06:03:35 <shapr> It's open source.
06:03:38 <tuomov> too much work
06:03:42 <shapr> then stop complaining.
06:03:43 <tuomov> I switched to non-free software
06:04:01 <shapr> I have similar feeling on the issue of Java vs Haskell.
06:04:05 <tuomov> gnome is ruining the free software experience
06:04:09 <tuomov> I'd rather use windows than gnome
06:04:12 <SirPrize> I'm trying to write a Haskell program which implements Server sockets.  Unfortunately, I get the message "IO.hPutChar: does not exist".  What gives? :-(
06:04:13 <shapr> So I started #haskell, and ran the Haskell wiki for awhile, and did TMR.
06:04:15 * dcoutts hugs gnome
06:04:22 <shapr> tuomov: So go for it.
06:04:25 * SirPrize looks around hopefully
06:04:49 <boy> tuomov: what do you think about emacs?
06:04:52 <shapr> SirPrize: Do you have a short chunk of code you can put onto a paste site?
06:04:55 <tuomov> I'll probably start running windows in vmware for apps besides those running in xterm
06:05:02 <tuomov> emacs sucks
06:05:06 <SirPrize> shapr: Yeah, let me quickly put it up on pastebin
06:05:18 <shapr> dcoutts: HOpenSSL would handle that.
06:05:39 <dons> boy, it works?
06:05:40 <dcoutts> shapr, right, and/or the haskell xmlrpc libs
06:05:47 <vincenz> hey shapr 
06:05:53 <SirPrize> shapr: I've just put it up on http://pastebin.com/632638 
06:05:53 <dons> didn't i say 4 or 8 weeks ago to use seq? ;)
06:06:02 <vincenz> still trying to clean up my site o.O
06:06:07 <tic> that reminds me, I should make a References page and throw in the HDirect paper in there.
06:06:14 <dons> dcoutts, don't sites usually have a score next to a library, to rank it?
06:06:18 <tuomov> all the gtk fanboyism present in this channel recently is disgusting..
06:06:23 <dons> something like amazon or sourceforge?
06:06:26 <dcoutts> dons, yes please :-)
06:06:28 <shapr> dcoutts: I'd suggest the famous hs-plugins for automated upgrading.
06:06:33 <dons> tuomov, ah!
06:06:42 <dons> I LOVE D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[DCURSES
06:06:46 <dons> and wifi
06:07:17 <tuomov> every second time a look to the channel, someone's talking about gtk
06:07:24 <dcoutts> shapr, for centeral upgrade
06:07:25 <boy> dons: did you see my screenshot?
06:07:26 <shapr> tuomov: Chill out man, this is #haskell. People get to use whatever gui they want. Write a Haskell gui binding to something else and talk about it, yeah?
06:07:32 <dons> we sould talk about ion more often
06:07:38 <ihope> How can I infer the type of some expression by hand?
06:07:38 <boy> ion is cool
06:07:42 <tuomov> shapr: bzzzt. error! not gui!
06:07:44 <dons> ?remember tuomov every second time a look to the channel, someone's talking about gtk
06:07:44 <lambdabot> Done.
06:07:46 <dcoutts> tuete, that'd by my fault for maintaining and promoting gtk2hs
06:07:51 <shapr> Yeah, I love ion. It makes me productive.
06:08:00 <shapr> tuomov: Ion fits into gui imho.
06:08:02 <ihope> \x y -> x >>= (>>= y) -- what type does this have?
06:08:03 <boy> is there a function that counts how many elements of value x are in a list?
06:08:12 <chrisbrown> does anyone know where I could get the visual studio plugin for haskell?
06:08:20 <dcoutts> boy, length . filter (==x)
06:08:21 <chrisbrown> @where visual
06:08:22 <lambdabot> I know nothing about visual.
06:08:26 <tuomov> shapr: gui in general parlance is synonym for wimp gui
06:08:28 <dons> boy, screen shot? sorry., wandered off for a while
06:08:30 <boy> dcoutts: ah yes
06:08:32 <chrisbrown> @where visual studio
06:08:32 <lambdabot> I know nothing about visual.
06:08:43 <boy> dons: http://img515.imageshack.us/img515/698/coolshit1bi.png
06:08:47 <shapr> tuomov: If it loads pix, I call it graphical.
06:08:59 <SirPrize> shapr: I changed the original "import IO" line to be "import System.IO", and I see I've pasted that version online.  It didn't make a difference.  Result was still "Program error: <handle>: IO.hPutChar: does not exist (file does not exist)"
06:09:01 <boy> dcoutts: cool thanks, btw this screenshot is done with glade and gtk2hs :)
06:09:16 <dcoutts> boy, I see
06:09:28 <shapr> dcoutts: That sounds like everything...
06:09:28 <dcoutts> what does it do?
06:09:36 <tuomov> shapr: programs shouldn't force graphical interface when they don't need to draw graphics
06:09:56 <shapr> tuomov: Sure, I haven't said otherwise.
06:10:04 <boy> dcoutts: it lets you see the result of applying a custom string-processing function
06:10:14 <tuomov> thus, talking of "gui bindings" is an error.
06:10:15 <dons> boy, length . filter (==x)
06:10:19 <dons> is your functoin
06:10:29 <boy> dons: thanks, dcoutts already told me this :P
06:10:34 <dons> oh.
06:10:43 <dons> wandered off, like I said
06:10:50 <Philippa> tuomov: no it's not. Someone's got to specify how the interface is rendered sooner or later, and unless you're into pointless style you'll have bindings for the method of doing so
06:11:04 <tuomov> no.
06:11:20 <tuomov> programs only provide commands, and possibly ask for a canvas with some capabilities (opengl, cairo, ...)
06:11:28 <shapr> tuomov: y0, take it to #haskell-blah or something.
06:11:31 <vincenz> and we reinvent the wheel for buttons every time
06:11:31 <tuomov> they don't ask to present commands in any particular manner
06:11:37 <Philippa> tuomov: see "someone". Deal with it.
06:11:51 * shapr makes shooing motions
06:11:55 <Philippa> I, and I emphasise this, *did not state it's the same program that supplies the command*
06:12:08 <Philippa> but even in your model, there's need for it sooner or later if the user likes WIMP
06:12:08 <vincenz> tuomov: which basically means that people will be coding their own buttons, making the whole gui experience even less uniform
06:12:23 <tuomov> uniformity is undesirable
06:12:28 <shapr> y0 y0, take it off to #haskell-blah
06:12:28 <vincenz> not for users
06:12:30 <dons> why aren't we talking about haskell anymore? i like lambdas.
06:12:36 * shapr hugs lambdas
06:12:48 <shapr> dons: Ever considered hs-plugins for pushing software upgrades?
06:12:52 <dons> ah, boy. cool. good to see the plugins loading.
06:12:59 <dcoutts> shapr, I think we need more details on the spec, specifically how easy they expect it to be to do upgrades, how bad the connectivity is expected to be and if they expect things to keep working when disconected and finally what how scalable the system is expected to be in terms of nodes and quantity of data?
06:13:01 <tuomov> vincenz: I want things uniform between programs I use, they way I like, but not like everyone else likes
06:13:06 <dons> ah, interesting idea, shapr.
06:13:06 <boy> dons: yeah, now the program doesn't crash when there is a merge error :D
06:13:09 <shapr> tuomov: DUDE.
06:13:16 <shapr> HELLO
06:13:20 <Philippa> tuomov: you find it undesirable. I find a level of uniformity in the UIs I use desirable. I therefore like having access to means of encoding this, something which a good set of bindings and a language capable of expressing the relevant abstractions (topicality!) useful
06:13:22 <dons> boy, great!
06:13:22 * shapr points to #haskell-blah
06:13:24 <dons> darcs send.
06:13:32 <tuomov> this our-size-fits-all idiology of modern desktops is disgusting
06:13:33 <Philippa> -useful + provides
06:13:47 <shapr> tuomov: one more gui comment and it's punt time.
06:13:55 <boy> dons: i actually need to fix up the code first, since i added a bunch of imports for marlow's readFile' that are no longer necessary
06:14:00 <dons> boy, and the readFile should be something like, this,, right?
06:14:02 <dons> readFile' f = do
06:14:02 <dons>     h <- openFile f ReadMode
06:14:02 <dons>     s <- hGetContents h
06:14:02 <dons>     length s `seq` return ()
06:14:05 <dons>     hClose h
06:14:07 <dons>     return s
06:14:08 <Philippa> dons, shapr: I've considered hs-plugins for updating web apps on the server while they're still available to the user
06:14:12 <dons> just grab a new hs-plugins, and start over. or darcs revert ...
06:14:23 <boy> dons: yes, that's exactly it
06:14:24 <vincenz> Philippa: so you would encode the webpages dynamically?
06:14:39 <dons> Philippa, hmm. I wonder if nibro has thought on this
06:14:46 <dons> hsp was heading in this directoin somewhat
06:14:53 <Philippa> vincenz: depends on mood. Nothing stops you from preprocessing a template, or from caching the result of preprocessing 'til the template's altered
06:14:55 <SirPrize> shapr: Any tips or pointers on the code I pasted for the server socket error?  It runs, but when I connect to it via telnet and send it a line, it errors out. :-(
06:14:58 <shapr> hsp -> xul?
06:15:02 <dcoutts> http://www.elis.ugent.be/~kehoste/haskell-blah/shapr-ChanOp_dcoutts.png
06:15:22 * shapr grins
06:15:25 <dons> dcoutts, we'd need hackage to rank everything.
06:15:29 <Philippa> shapr: write the xul binding :-) I'm doing plain HTML at the mo, though I'm tempted to write an ECMAscript binding sometime
06:15:30 * dons should submit some patches
06:15:31 <dcoutts> dons, yes.
06:15:39 <boy> dons: there is an alternative to this strictRead though. the alternative is to use regular hGetContents, and explicitly hClose the file before "return $ MergeFailure [e]"
06:16:07 <shapr> SirPrize: http://kyagrd.dyndns.org/wiki/HaskellServerProgramming ?
06:16:08 <dons> either way. strictness is ok -- we don't rely on lazy input for anything
06:16:36 <boy> dons: what do you mean?
06:16:52 <dons> I'm saying, I don't mind the seq version. if it works, use it, and submit it to me
06:16:59 <tuomov> I must say that since the introduction of #haskell-* the spirit of this channel has also detoriated considerably
06:17:10 <shapr> SirPrize: http://www.haskell.org/hawiki/HaskellNewbie_2fTcpIpAndNetworking
06:17:15 <dons> tuomov, you think? how so?
06:17:23 <tuomov> I guess #haskell is about the join the pantheon of the big software projects' channels
06:17:29 <boy> dons: ok i'll do that. i guess later on we can do performance benchmarks and shit, but for now i guess the important thing is that strictRead works :)
06:17:37 <tuomov> everyone is constantly complaining of off-topic stuff
06:17:48 <dons> tuomov, well, during .au time it seems just like normal #haskell to me.
06:17:51 <Maddas> @yow
06:17:52 <lambdabot> -- I have seen the FUN --
06:18:05 <ihope> @fortune
06:18:06 <lambdabot> 	Two morticians alternated in sharing the responsibility of covering
06:18:06 <lambdabot> [17 @more lines]
06:18:07 <dcoutts> shapr, I worked at a company for a while and they were building this distributed system. They used asynchernous message passing over secure links, much like authenticated email. That gave them reliability in the face of disconected operation.
06:18:34 <dons> hmm. i see we're up to 186 nicks. must be getting towards end of session.
06:18:42 <dons> or our bots are breeding
06:18:47 <shapr> dcoutts: Interesting
06:18:51 <int-e> bad lambdabot :)
06:19:01 <ihope> @bad
06:19:02 <lambdabot> Maybe you meant: faq id map
06:19:03 <dcoutts> shapr, they were actually using corba, but the system was used at a higher level than corba, the interface it presented to apps was of messages to named nodes.
06:19:15 <int-e> @botsnack no
06:19:16 <lambdabot> :)
06:20:07 <dcoutts> shapr, so like email it kept a message store on disk and didn't acknowledge mesage recept until the message had been stored to disk on the local store. Then it'd send it on to the destination node or application.
06:20:48 <dcoutts> shapr, an application in this context being much like a local mailbox.
06:21:24 <dcoutts> shapr, then look at darcs send + serverside procmail apply. It does actually make quite a robust distributed system.
06:21:44 <dcoutts> shapr, and it's secure and uses well tested infrastructure.
06:21:55 <shapr> And encryption would only require Daan Leijen's darcs-server.
06:22:18 <dcoutts> shapr, one normally doesn't need encryption, just authentication, GnuPG would be enough.
06:22:34 <shapr> It would even work through proxies since nearly anything will pass http.
06:22:46 <tnks> msg lambdabot 2 + 2
06:22:51 <dcoutts> shapr, I was assuming actual email :-)
06:23:03 <tnks> (crap)... trying to using lambdabot non-invasively.
06:23:24 <tnks> is that possible?
06:23:30 <shapr> tnks: Yeah, try /query lambdabot 
06:23:39 <tnks> cool.
06:24:06 <shapr> dcoutts: darcs-server would allow 'instant' pushing. Email can be low priority sometimes.
06:24:18 <dcoutts> shapr, right but thats synchronous
06:24:36 <shapr> Assuming no collisions, you'd even be able to sync among clients rather than to a server.
06:24:41 <shapr> That would be nifty.
06:24:46 <dcoutts> shapr, so it depends on the expected level of service in the presense of network disconectivity
06:24:54 <shapr> Yeah, I agree.
06:25:19 <dcoutts> for nodes that are up and down all the time being async is a great bonus
06:25:21 <dons> tnks, in fact, lambdabot can be installed locally and run from the command line, if you want to try it that way
06:25:31 <dons> probably most useful if you use it a lot
06:25:49 <dcoutts> shapr, so ask for more specs
06:25:57 <nothingmuch> http://www.theregister.co.uk/2006/03/31/ebay_box_sale/
06:26:10 <nothingmuch> wait... that should be on #haskell-blah, i think
06:26:10 <shapr> Yeah, I will.
06:26:41 <boy> dons: when i try darcs send i get "No recorded local changes to send!"
06:27:08 <dons> darcs whatsnew -s ?
06:27:08 <SirPrize> shapr: Thanks for the links!  We'll check them out and let you know how they go.
06:27:18 <dons> did you record your changes?
06:27:19 <tnks> hmm.  I tried /query lambdabot, and I'm sending it messages, but it doesn't seem to be responding.
06:27:37 <dons> tnks, you probably aren't registered or identified?
06:27:44 <tnks> oh.
06:27:46 <tnks> that's it.
06:27:48 <boy> dons: no
06:27:51 <lambdabot> Yes, you can talk to me if you want.
06:28:11 <dons> boy, darcs whatsnew -s ; darcs record ..files ... ; darcs send  :)
06:28:24 <tnks> I need to set up this new IRC client to do that automatically.
06:28:27 <vincenz> dons: what 's is darcs send?
06:28:38 <dons> darcs send the patch to me
06:29:02 <dons> hands up if you know what Proof General is?
06:29:13 * shapr raises his hand
06:29:16 * earthy raises his hand
06:29:20 <dons> and who knew that Proof General v2 is written in Haskell?
06:29:27 <shapr> Really?
06:29:30 * earthy drops his hand
06:29:33 <dons> http://proofgeneral.inf.ed.ac.uk/Kit
06:29:45 <earthy> *schweet*!
06:29:48 <earthy> just what I wanted!
06:30:07 <dons> I only noticed this today, too.
06:30:13 <boy> dons: hm.... it wants to know my email address
06:30:39 <shapr> Where's the source?
06:30:48 <dons> boy, you can probably type anything. but the mail needs a 'From:' right?
06:31:03 <boy> dons: i typed "boy" let's see if it works...
06:31:12 <earthy> gimmegimmegimme!
06:31:19 <boy> hm... patch name...
06:31:28 <earthy> Proof General was cool in a 'ugh, I don't want to install emacs' kind of way
06:31:39 <dons> exactly!
06:31:50 <dons> emacs dependencies for isabelle made me cry
06:32:19 <earthy> I actually did some isabelle in 1993 with Tobias Nipkow and Stefan whatshisname
06:32:36 <boy> dons: it sent it! w00t
06:32:39 <boy> i hope
06:32:44 <earthy> they were kinda puzzled by my usage of the ML toplevel that Isabelle still provides
06:32:50 <dons> ah, I met Tobias recently. he came to oz to work on a book with Gerwin Klein, his phd student, on Isabelle
06:33:01 <earthy> 'well, I don't have emacs'
06:33:04 <dons> hehe
06:33:13 <dons> I do the same thing with the Twelf toplevel
06:33:22 <dons> it also uses an emacs thingy
06:33:33 <boy> dons: i gotta take a shower now...
06:33:41 <dons> but Proof General is pretty nifty. 
06:33:57 <dons> just weird that so much elisp got written before they decided to write in something else
06:34:01 * earthy nods
06:34:09 <earthy> niftyness abounding there
06:35:20 <dons> shapr, don't know about src. Just noticed this entry in last Nov. HCAR -- but nobody seems to have noticed at the time..
06:44:42 <vincenz> Anyone use listings in latex?
06:49:17 <ndm|bristol> vincenz: i used to
06:49:34 <vincenz> ndm|bristol: I'm trying to highlight some code (to show before/after)
06:50:01 <ndm|bristol> $\weirdlatexcommand x $
06:50:13 <vincenz> $ aren't processed inside a listings
06:50:20 <ndm|bristol> they are, aren't they?
06:50:26 <ndm|bristol> oh, you need to set mathsescape
06:50:26 <vincenz> nope
06:50:34 <ndm|bristol> with the settings for listings
06:50:36 * vincenz uses $ in haskell 
06:50:41 <ndm|bristol> you can make it so they are processed
06:50:42 <vincenz> ah thank you :)
06:50:52 <vincenz> (might also make my vim highlighting work a bit better)
06:50:54 <ndm|bristol> not sure how you escape a $ though
06:54:40 <vincenz> anyone know of a haskell button?
06:54:44 <vincenz> (for a website?)
06:54:49 <vincenz> in the style of the buttons that can be seen on
06:54:54 <vincenz> http://notvincenz.com/
07:05:31 <resiak> One of the enums in the library that I'm binding with c2hs is a bitwise set of flags; what's the Haskellish way to check for set bits within values of this enum?
07:06:35 <Saulzar> Data.Bits?
07:06:44 <neologism> vincenz: you never tried basic? ;)
07:08:09 <vincenz> neologism: good point ;)
07:08:25 <vincenz> neologism: the site is really sparse at the moment (started it two days ago)
07:08:56 <neologism> you would be the first person I know who never touched basic ;)
07:09:03 <dcoutts> resiak, we tend to use lists of enum values
07:09:09 <resiak> Saulzar: Thanks
07:09:26 <dcoutts> resiak, see the Flags class in gtk2hs, fromFlags, toFlags
07:09:30 <resiak> dcoutts: Yeah, just been poking around in gtk2hs and found System.Glib.Flags. I'll use something like that.
07:12:44 <resiak> Or indeed I could just use _that_ :)
07:18:44 <vincenz> shapr: what's your site?
07:26:07 <shapr> vincenz: www.scannedinavian.com
07:32:05 * vincenz adds it to his links
07:33:48 <audreyt> http://www.dan.co.jp/~dankogai/yapcasia2006/lamdaorz3.mov
07:36:09 <audreyt> # larry wall's "bugs manifesto".
07:46:22 * davidhouse curses Parsec using State as a type constructor
07:46:42 <davidhouse> when i want to use Control.Monad.State and Parsec in the same file, i have to qualify one of them :(
07:47:53 <kowey> S.get and S.put don't seem super-painful
07:48:16 <Saulzar> Could just use a synonym for the State type
07:48:55 <ihope> type PState = Parsec.State?
07:49:11 <Philippa> where does Parsec have a State constructor? I only use the core stuff, which I could swear only uses a type variable?
07:49:37 <kowey> there's also 'hiding'
07:49:59 <ihope> Wait... type PState a = Parsec.State a... whatever :-)
07:50:29 <davidhouse> ihope, would that work
07:50:29 <davidhouse> ?
07:50:43 <davidhouse> surely using 'State' would still cause an ambiguity
07:50:52 <ihope> Well, I'm not sure.
07:51:10 <ihope> Try it. import qualified Parsec; import Control.Monad.State...
07:51:33 <ihope> type MState a = Control.Monad.State a -- if that doesn't work, use this too
07:52:05 <davidhouse> i think the cleanest solution is to import Control.Monad.State as St, then just use St.State
07:52:28 <davidhouse> if i imported Parsec qualified i'd have to do Parsec.<|> and all sorts of monstrosities
07:52:49 <kowey> why not just hide Parsec's State constructor?
07:53:12 <ihope> Hmm, good idea.
07:53:18 <ihope> "I owe everything to my parents, especially my mother and father." -- Greg Norman
07:53:37 <davidhouse> kowey, how?
07:54:15 <ihope> import Parsec hiding State -- something like this
07:54:31 <kowey> import Parsec hiding (State)
07:55:00 <davidhouse> oh, nice.
07:55:03 <davidhouse> didn't know about that.
07:55:30 <ihope> Then import qualified Parsec (State)?
07:55:43 <kowey> why?
07:55:59 <ihope> So you
07:56:11 <ihope> 'll have access to Parsec.State?
07:56:19 <kowey> oh yeah... i gotcha
07:56:21 <davidhouse> i don't need it.
08:27:05 <davidhouse> can you group pattern matches in a case?
08:27:17 <davidhouse> i.e. case p of { A, B -> X; C -> Y }
08:27:40 <shapr> You can do it with guards, I think.
08:28:11 <wilx> Why don't you just use case p of { C -> Y ; _ -> X } instead :)
08:28:48 <davidhouse> okay, here's my problem in full:
08:29:13 <davidhouse> i have a load of data constructors. two of them take parameters, Optional and Repeat. the others don't.
08:29:37 <davidhouse> i want a predicate function that says if all of a list are Optionals or Repeats
08:30:02 <davidhouse> so something like all (\p -> case p of { Optional a -> True; Repeat a -> True; _ -> False }) l
08:30:11 <davidhouse> but i was wondering if the first two could be grouped
08:30:11 <mattam> (Optional _ | Repeat _) is not valid haskell ?
08:30:39 <davidhouse> > (Just 9) == (Just _)
08:30:40 <lambdabot>  Pattern syntax in expression context: _
08:30:42 <ihope> Hmm...
08:31:06 <mattam> in a case clause i mean
08:31:07 <wilx> I guess I would use helper predicate in where clause.
08:31:19 <ihope> > case Just 9 of x | x == Just y -> y
08:31:20 <lambdabot>  Not in scope: `y'
08:31:24 <ihope> Ow.
08:31:47 <davidhouse> huh?
08:31:57 <davidhouse> > case Just 9 of x | y -> y
08:31:58 <lambdabot>  Not in scope: `y'
08:32:05 <davidhouse> oh, wait
08:32:12 <davidhouse> guards don't pattern match, do they.
08:32:19 <davidhouse> hence why you use otherwise and not _.
08:32:40 <monochrom> I think (\p -> case p of { Optional a -> True; Repeat a -> True; _ -> False }) is as good as it gets.
08:32:41 <wilx> Guards are just that, Boolean expressions.
08:32:43 <wilx> iirc
08:32:57 <kuvkir> how to convert numbers to strings ?
08:33:07 <resiak> show
08:33:09 <wilx> > show 1
08:33:10 <lambdabot> "1"
08:33:19 <mattam> in caml you could write 'match p with (Optional _ | Repeat _) => smthg | _ =>...'. I'm quite amazed you don't have that in haskell
08:33:19 <kuvkir> resiak: thanks
08:33:40 <ihope> > read "1" :: Integer
08:33:41 <lambdabot> 1
08:33:56 <vincenz> mattam: yes and that is actually unsafe in ocaml but not in haskell :)
08:33:59 <vincenz> mattam: even odder
08:34:07 <mattam> wdym ?
08:34:22 <vincenz> if your matching forces a reference to be changed
08:34:34 <vincenz> match (x.ref = ...; x.ref)
08:35:04 <mattam> the match expr is evaluated only once (or it should anyway)
08:35:37 <mattam> i don't see how that could cause a problem
08:38:36 <mattam> well bbl, vincenz i'd like to know your argument :)
08:39:03 <sjanssen_> has anyone read Andy Gill's deepSeq proposal on the haskell-prime mailing list?
08:42:40 <chrisbrown> dammit
08:42:53 <chrisbrown> why doesn't the GHC AST derive Show?
08:44:37 <Saulzar> sjanssen, I'd really like that...
08:44:58 <Saulzar> Even deepEval in IO () or something would be great
08:46:03 <sjanssen_> the idea of a deepseq bit is utterly genious
08:46:17 <palomer> what's deepseq?
08:46:21 <sjanssen_> otherwise deepSeq is far too expensive for long lists etc.
08:46:46 <davidhouse> @index unsafePerformIO
08:46:47 <lambdabot> System.IO.Unsafe, Foreign
08:46:49 <sjanssen_> an operator that makes sure an entire data structure is evaluated
08:47:27 <sjanssen_> lists for example, would recursively seq their tails
08:47:27 <ihope> unsafePerformIO is necessary for bad programming.
08:47:35 <Saulzar> Oh nice, DriFT already has deepSeq deriving, I should really check that out.
08:49:33 <davidhouse> i like import ... hiding ..., but is there a way to not import Prelude functions?
08:49:46 <Saulzar> import Prelude hidng
08:49:53 <davidhouse> for example, i want to write a function called log that does some logging, but this is clashing with Prelude's log.
08:50:13 <davidhouse> Saulzar: oh, nice. :)
08:50:19 <monochrom> import Prelude hiding (log)
08:51:38 <ihope> Is there a way to not import the Prelude at all? >:-)
08:51:50 <sjanssen_> import Prelude ()
08:52:24 <ihope> Oh.
08:53:13 <ihope> Now, is it possible to actually define seq, or do I have to use a Seq class?
08:53:23 <sjanssen_> seq is a primitive
08:53:31 <sjanssen_> but it isn't in a class
08:53:42 <ihope> class Seq a where seq :: a -> b -> b
08:54:55 <sjanssen_> I don't think you could write seq purely in Haskell, it requires RTS support
08:55:22 <ihope> seq (_:_) = id; seq [] = id...
08:55:52 <ihope> seq (Just _) = id; seq Nothing = id; seq (Right _) = id; seq (Left _) = id
08:55:53 <sjanssen_> oh yeah, duh.
08:56:30 <ihope> > assert:
08:56:31 <lambdabot>  parse error on input `}'
08:56:34 <vincenz> we need a haskell button!
08:56:36 <ihope> Aww.
08:56:53 <resiak> Bah, c2hs is choking on /usr/include/regex.h with "The symbol `restrict' does not fit here." Has anyone seen this before? It occurs with an essentially empty .chs file, so I fear it's not something I've broken.
08:56:58 <sjanssen_> but if you wanted to do seq through pattern matching, you'd definitely need a class
08:56:59 <Saulzar> [Ok] [Cancel] [Haskell] ?
08:57:01 <ihope> vincenz: and what would happen upon pushing said button? ;-)
08:57:27 <ihope> Aww, Saulzar beat me to it.
08:57:43 <vincenz> I meant an internet button
08:57:48 <vincenz> don't you know the word button?
08:57:54 <vincenz> those small pngs abut 120x30
08:58:03 <Saulzar> Ah
08:58:43 <Saulzar> Netscape Now!  kind of thing
08:59:31 <vincenz> yeah
08:59:33 <vincenz> or getfirefox
08:59:39 <vincenz> http://notvincenz.com
08:59:40 <vincenz> like on the left
09:01:16 <dcoutts> resiak, hmm, looks like current c2hs doesn't grok that construct, let me check...
09:01:50 <monochrom> Use the logo on www.haskell.org
09:02:09 <dcoutts> resiak, it should understand the restrict keyword. What does your code look like?
09:02:21 <monochrom> Heh, there are even two sizes.
09:02:24 <resiak> dcoutts: C{Parser,Lexer}.hs make mention of it. I'll pastebin the offending chunk of regex.h; hang on.
09:02:48 <dcoutts> resiak, perhaps that bit of C is using restrict as a variable name or something naughty
09:03:28 <resiak> dcoutts: It doesn't appear to be.
09:03:35 <dcoutts> can I see?
09:04:30 <lisppaste2> resiak pasted "offending chunk of regex.h" at http://paste.lisp.org/display/18491
09:04:32 <resiak> I'm just pasting...
09:05:58 <davidhouse> is Writer easy to get out of?
09:06:25 <resiak> dcoutts: The error from c2hs is at /usr/include/regex.h:570: (column 125). 570 is the second `extern int'; I will cpp it if that'd help?
09:06:58 <dcoutts> s'ok
09:07:29 <monochrom> runWriter gets out of Writer. Is that what you mean?
09:07:47 <davidhouse> yeah, i guess
09:08:09 <davidhouse> just implementing some logging to find out where my algorithm's going wrong, and i feel Writer will be easier than IO ;)
09:09:05 <TuringTest> davidhouse: Would Debug.Trace.trace work?
09:09:17 <dcoutts> resiak, what c2hs version are you using?
09:09:24 <monochrom> execWriter returns the log and discards the algorithm's result.
09:09:32 <davidhouse> TuringTest: probably. i haven't checked that out yet.
09:09:36 <davidhouse> how does it work/
09:09:51 <TuringTest> @type Debug.Trace.trace
09:09:51 <lambdabot> forall a. String -> a -> a
09:10:01 <resiak> dcoutts: 0.13.6 . I'm aware that there's a newer one, as-yet unpackaged for Debian --- I'll try that out.
09:10:02 <TuringTest> It emits the string to stderr and returns a unchanged
09:10:42 <TuringTest> It does this when the expression is evaluated, as you would expect.  But if it is evaluated once, then the string is only printed once.
09:10:44 <davidhouse> @docs Debug.Trace
09:10:44 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/base/Debug-Trace.html
09:11:09 <TuringTest> > trace "1" 2
09:11:10 <lambdabot>  Not in scope: `trace'
09:11:19 <TuringTest> > Debug.Trace.trace "1" 2
09:11:20 <lambdabot>  Not in scope: `Debug.Trace.trace'
09:11:43 <davidhouse> "When called, trace outputs the string in its first argument". how does it 'output' it?
09:11:47 <dcoutts> resiak, ok, I know very little about the c2hs parser for 0.13.x. I completely rewrote the parser in 0.14.x. Try the latest release.
09:12:00 <davidhouse> oh, it's not referentially transparent.
09:12:37 <monochrom> It uses unsafePerformIO
09:12:51 <monochrom> (or something even more evil)
09:13:00 <resiak> dcoutts: Aaaaaah. I misread the changelog as saying that that was 0.13.x; I should learn to read. I'll build 0.14.5
09:13:08 <dcoutts> resiak, from looking at the current grammar it should work, but that aspect of the C grammar is quite tricky so I'm not sure. If it doesn't work, report it as a bug to the c2hs mailing list.
09:13:42 <dcoutts> resiak, and a workaround would probably be to define __restrict to be nothing at all
09:16:22 <davidhouse> how does trace work? i've annotated my algorithm with various trace calls, but then how do i get them to display in the console?
09:16:27 <resiak> dcoutts: and sure enough, doing that makes c2hs spit out all the errors that _are_ my fault. :-) Thanks for your help.
09:16:42 <monochrom> If the algorithm is executed, things will happen.
09:16:46 <dcoutts> resiak, so parsing the C header works now?
09:17:18 <davidhouse> monochrom: i'm running it in GHCi. could it be that GHCi is just ignoring stderr?
09:17:35 <monochrom> Ha, I don't know.
09:17:56 <resiak> dcoutts: with 0.13.6 and -D__restrict= . I've not built the latest version yet; I'll report to the mailing list if that still fails without the workaround.
09:18:09 <dcoutts> resiak, ok, ta
09:20:21 <monochrom> It works for me.  f 0 = trace "base" 0; f n = trace "recurse" (f (n-1)); main = print (f 10)
09:20:54 <monochrom> In ghci if I run main or ask for f 5, I get recurse and base printed.
09:21:09 <vincenz> what do you think of the haskell button?
09:21:13 <vincenz> http://notvincenz.com
09:21:33 <ihope> Is that a Haskell button?
09:21:47 <vincenz> well I just gimped it
09:22:11 <monochrom> It is not obvious.
09:22:21 <vincenz> too little contrast?
09:22:26 <monochrom> Right.
09:22:26 <ihope> Ah...
09:22:39 <ihope> http://www.notvincenz.com/wiki/uploads/Site/haskell_button.png
09:22:55 <ihope> You could add a border...
09:22:59 <resiak> There's a button generator somewhere
09:23:00 <vincenz> i did, it's white
09:23:04 <vincenz> resiak: not with pictures
09:23:09 <ihope> Hmm...
09:23:27 <resiak> fair enough
09:23:34 <ihope> @google button generator
09:23:37 <lambdabot> http://www.buttongenerator.com/
09:23:37 <Saulzar> Maybe the lambda by itself without the circle
09:24:03 <vincenz> that is just a scaled down version of the actual logo
09:24:16 <vincenz> let me try something else
09:24:39 <Saulzar> Yeah, I recognise it - but the details around the edge are quite fine and don't add much in the tiny version
09:27:09 <vincenz> new version
09:27:40 <vincenz> hmm
09:27:43 <vincenz> gonna remove the extra stuff
09:27:46 <vincenz> just the lambda and circle
09:27:49 <vincenz> but it's starting to look like something
09:36:00 <maus> Hello
09:36:26 <maus> i need to do heavy binary io in my program
09:36:42 <vincenz> Saulzar: yeah I know... just lazy at the moment, 
09:37:00 <maus> i know there are several libraries for that
09:38:20 <maus> but which of them should i choose?
09:42:06 <Saulzar> Bulat seems claim some impressive numbers of his new library :)
09:42:44 <vincenz> dcoutts: if you could do me a favour?
09:42:57 <dcoutts> vincenz, ?
09:43:24 <vincenz> link to my site in that entry about the RB-tree?
09:43:28 <maus> Saulzar: I've read about it in mailing list, but i want to know more about alternatives
09:43:29 <vincenz> I have the code on my site
09:43:55 <maus> NewBinary is also mentioned frequently, but i cant find documentation for it
09:46:40 <SyntaxNinja> w00t
09:58:09 <vincenz> dcoutts: thx :)
09:58:30 <dcoutts> vincenz, ok sure, got a link?
09:58:42 <vincenz> dcoutts: to the software or just the main site?
09:58:56 <vincenz> http://notvincenz.com/wiki
10:00:13 <dcoutts> vincenz, which ever one you want me to link to? or did you want both?
10:01:06 <vincenz> hmm
10:01:38 <vincenz> code can be found on the "Software" link on <a href="http://notvincenz.com/wiki"> Christophe Poucet's</a? site
10:05:08 <vincenz> I wonder if I should get some darcs  on my site
10:06:09 <Saulzar> Hmm, anyone used DriFT much? It's not seeing the standard module Numeric
10:06:52 <ihope> > log 2147483648 / log 2
10:06:53 <lambdabot> 31.000000000000004
10:07:01 <ihope> > log 2147483647 / log 2
10:07:02 <lambdabot> 30.999999999328196
10:07:02 <chrisbrown> Saulzar: ive used DrIFT
10:07:05 <ihope> Woot.
10:07:24 <chrisbrown> Saulzar: Im not surprised - if you look at the code you'll wonder DrIFT works at all
10:08:47 <Saulzar> Hmm, actually it's not seeing any standard library
10:08:58 <chrisbrown> you could create a blank Module Numeric in a junk folder and then include the junk in your DrIFT include path that usually works
10:09:29 <chrisbrown> I had problems with it picking up loads of the standard modules
10:09:52 <chrisbrown> the easiest is to create blank modules - unless you are using DrIFT over the standard modules for some reason
10:10:23 <Saulzar> Hmm, so create a fake tree of standard modules?
10:10:28 <chrisbrown> basically
10:10:42 <chrisbrown> I had to do that when creating instances for the Programatica data types
10:10:54 <chrisbrown> what are you using DrIFT for?
10:11:59 <Saulzar> Thought it might be nice for NFData, as well as record update functions (perhaps)
10:12:49 <chrisbrown> whats NFData?
10:12:58 <Saulzar> deepSeq
10:13:38 <Saulzar> What were you using it for?
10:13:53 <chrisbrown> to create instances for Term and Typeable to use with Strafunski
10:15:46 <chrisbrown> its awful - Template Haskell is much better
10:17:46 <Saulzar> Hmm
10:43:01 <ihope> > 1660/2
10:43:02 <lambdabot> 830.0
10:44:10 <mwc> how's Arrakis this time of year, Muad_Dib?
10:47:23 <SyntaxNinja> hehe
10:47:36 <SyntaxNinja> we have a meeting room named arrakis, and I got confused there for a second
10:48:54 <jyp> @quote
10:48:54 <lambdabot> gzl says: [on why monads are scary] maybe it's because people look up monad on wikipedia, find the category theory page, and crap themselves
10:51:22 <mwc> Haha, my reaction was to go dig my 3rd year algebra text out of storage
10:51:59 <mwc> probably also due to the fact that they ask on here and get N responces with N^2 different definitions
11:01:26 <gzl> mwc: about monads?
11:01:52 <ARous1984> So...how hard is it to build a list of integer lists ranging from 1 to n^2, where n is a number like 2 or 3 or 4?
11:02:11 <gadolin> hey,  i installed ghc 6.4-4 on my ubuntu, i can't go into interpreter mode under eclipse(3.2),  how can i force eclipse to use interpreter since  It expect main :/  
11:02:45 <Cale> ARous1984: so the type is [[Integer]]?
11:02:50 <ARous1984> Yes
11:02:57 <aufrank> hello!
11:03:03 <Cale> Could you give a small example of what you want?
11:03:14 <ARous1984> the actual list that is built?
11:03:17 <Cale> yeah
11:03:19 <ARous1984> or the haskell code im writing to do it
11:03:20 <ARous1984> k
11:03:36 <aufrank> I've got a function of type makeWords :: Eq a => [a] -> [a] -> [a] -> [a] -> [[a]]
11:03:42 <Cale> Do you perhaps means something like
11:03:47 <ARous1984> [[1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], ...]
11:03:54 <ARous1984> where n = 3
11:03:56 <ARous1984> in this case.
11:03:58 <aufrank> when I use it as my main function, I get a type error when I load the file in ghci
11:04:19 <aufrank> main = makeWords "pbtdkg" "aiou" "pbtdkg" "aiou"
11:04:29 <Cale> ARous1984: how many copies do you want? Infinitely many?
11:04:38 <ARous1984> up to n^4
11:04:39 <aufrank> I get this error in ghci
11:04:49 <aufrank>  Couldn't match `IO a' against `[[Char]]'
11:05:15 <ARous1984> so 3^4 copies in my example above.
11:05:22 <ARous1984> or 64 :D
11:05:29 <Cale> > let f n = replicate (n^4) [1..n^2] in f 3
11:05:30 <lambdabot> [[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,
11:05:30 <lambdabot> [4 @more lines]
11:05:31 <ARous1984> err imean...heh, 81
11:05:53 <mwc> gzl, yeah
11:05:58 <aufrank> how can I run this function that's supposed to return a list of Chars as the main function in ghci?  it worked in hugs but does not work in ghci
11:06:01 <ihope> O, I cried, covered in heatherlike plants. (7)
11:06:22 <Cale> aufrank: main has to be of type IO a
11:06:25 <Cale> for some a
11:06:54 <ARous1984> Cale, what is f in this case?
11:06:56 <Cale> either change the name to something else, or apply print to it
11:07:02 <Cale> f n = replicate (n^4) [1..n^2]
11:07:14 <ihope> data Maybe_ where Maybe_ :: Maybe a -> Maybe_
11:07:15 <ARous1984> ah, function :D
11:07:35 <ARous1984> thanks, btw, this is all in an effort to write a sudoku solver :)
11:07:44 <Cale> :)
11:07:53 <gzl> mwc: I dunno. I never found the category theory of monads especially inviting. :)
11:07:56 <Cale> did you see mine?
11:08:04 <aufrank> Cale: thanks!!
11:08:09 <aufrank> second q:
11:08:12 <ARous1984> your sudoku solver?
11:08:16 <Cale> yeah
11:08:18 <ARous1984> no.
11:08:25 <Cale> @oldwiki SudokuSolver
11:08:26 <lambdabot> http://www.haskell.org/hawiki/SudokuSolver
11:08:48 <aufrank> are there prelude functions or included modules do pick a random element from a list?
11:08:55 <aufrank> s/do/to/
11:09:03 <monochrom> module Random
11:09:13 <ARous1984> ah yes, ive seen those..but ive never really done anything with monads.
11:09:16 <aufrank> thanks again!!
11:09:22 <ARous1984> and i dont know if we can use them.
11:09:47 <Cale> ARous1984: ah, it's for a course?
11:10:04 <ARous1984> yes
11:10:19 <Cale> aufrank: well, you can generate random numbers and use (!!)
11:10:41 <aufrank> !! is the list indexer, neh?
11:10:49 <vincenz> > [1..10] !! 5
11:10:50 <lambdabot> 6
11:11:02 <aufrank> excellent
11:11:05 <ihope> > "Hello, world!" !! 5
11:11:06 <lambdabot> ','
11:11:10 <aufrank> ok, thanks all
11:11:12 <vincenz> > 'ihope" !! 0
11:11:12 <lambdabot>  lexical error in string/character literal
11:11:16 <vincenz> > "ihope" !! 0
11:11:17 <lambdabot> 'i'
11:11:30 <aufrank> I reckon I'll be back at some point soon, but this'll get me a little further!
11:11:37 <ARous1984> cool bot :D
11:11:39 <Cale> aufrank: do you know how to use the IO monad?
11:11:39 <ihope> > "vincenz" !! 0
11:11:40 <lambdabot> 'v'
11:11:51 <vincenz> vi
11:11:54 <aufrank> Cale: only partly.  learning slowly
11:12:22 <aufrank> got a meeting, gotta run.  thanks for the help!
11:12:25 <Cale> aufrank: getting random values involves IO at some stage (unless you want pseudorandom numbers which are always the same)
11:12:28 <gadolin> so do u know how to run interpreter from eclipse...  it show error in first line that says main function not define in module
11:12:49 <Cale> aufrank: if you have any trouble, ask me and I'll point you at some reading on the wiki :)
11:13:45 <ihope> vincenz: your name is now vin.
11:13:53 <ihope> Mine is ih.
11:14:00 <Cale> gadolin: which GHC are you running? I know that some versions annoyingly complained when you tried to run GHCi without a main action defined.
11:14:04 <ihope> The bot is la.
11:14:07 <gadolin> 6.4-4
11:14:11 <Cale> hmm
11:14:26 <Cale> does it do the same when you just run ghci directly?
11:14:38 <Cale> I don't really know much about eclipse
11:15:01 <vincenz> vinihla
11:15:25 <Cale> vanilla
11:15:45 <ARous1984> Damn hugs version 2002 =p
11:16:39 <gadolin> Cale: "let fun = 2" in Ghci is ok,
11:16:58 <vincenz> gadolin: you mean 42
11:17:19 <monochrom> 42 is overrated
11:17:41 <gadolin> :P
11:17:48 <vincenz> I actually went using it for a lon time before knowing it's source
11:17:50 * vincenz never read those books
11:17:56 <vincenz> I always thought it was cause 
11:18:02 <vincenz> 42_dec = 101010_bin
11:18:28 <Cale> vincenz: apparently, he just picked it at random
11:18:40 <vincenz> either way... 8bits is better
11:18:44 <vincenz> > 42 + 256
11:18:45 <lambdabot> 298
11:18:55 <vincenz> 298_dec = 10101010_bin
11:19:04 <vincenz> or use a nibble :D
11:19:12 <vincenz> 10_dec = 1010_bin
11:19:29 <gadolin> even when i write fun = 42 in eclipse it still shows me lovely red circle about error 
11:19:51 <vincenz> gadolin: what plugin do you use?
11:19:55 <vincenz> do you have a link?
11:20:00 <vincenz> gadolin: did you try something like
11:20:03 <vincenz> module XXX where 
11:20:08 <vincenz> fun = 42
11:20:27 <ARous1984> "darn" !! 0
11:20:36 <vincenz> 'd'
11:20:57 <vincenz> > reverse ":('
11:20:57 <lambdabot>  lexical error in string/character literal
11:21:00 <vincenz> > reverse ":("
11:21:01 <lambdabot> "(:"
11:21:19 <ARous1984> heh
11:21:19 <Cale> @listcommands
11:21:20 <lambdabot> Unknown command, try @list
11:21:23 <Cale> @list
11:21:24 <lambdabot> list [module|command]. Where modules is one of:
11:21:24 <lambdabot> babel base compose dice dict djinn drHylo dummy dynamic elite fact haddock help hoogle karma lambda localtime log more pl plugs poll pretty quote search seen slap spell state system todo topic type unlambda version vixen where
11:21:35 <Cale> @help drHylo
11:21:36 <lambdabot> drHylo provides: hylo
11:21:40 <vincenz> @hylo
11:21:42 <Cale> @help hylo
11:21:42 <lambdabot> hylo <expr>. Derive hylomorphism for <expr>. Based on DrHylo.
11:21:42 <lambdabot> [4 @more lines]
11:21:50 <gadolin> i check it
11:21:50 <Cale> @more
11:21:51 <lambdabot> Uses the Pointless.Combinators from:
11:21:51 <lambdabot> [3 @more lines]
11:21:52 <Cale> @more
11:21:53 <lambdabot>  http://wiki.di.uminho.pt/twiki/bin/view/Alcino/PointlessHaskell
11:21:53 <lambdabot> Mirrored:
11:21:53 <lambdabot>  http://www.cse.unsw.edu.au/~dons/Pointless/
11:22:04 <vincenz> @hylo map . filter (x==)
11:22:04 <lambdabot> drHylo module failed: user error (SrcLoc {srcFilename = "<unknown>", srcLine = 1, srcColumn = 19}: Parse error)
11:22:43 <vincenz> is there any easy way to extract the title from a pdf document?
11:23:10 <ihope> > 1927 - 267
11:23:11 <lambdabot> 1660
11:23:12 <gadolin> vincenz it is 0.9.1
11:23:21 <gadolin> vincenz:  it is 0.9.1
11:24:48 <gadolin> heheh ...and eclipse.org went down :/
11:25:52 <ARous1984> What is this operator: // ?
11:26:06 <vincenz> > [1..10] // [1..5]
11:26:07 <lambdabot> Couldn't match `Array i e' against `[a]'
11:26:14 <mauke> @index //
11:26:14 <lambdabot> Data.Array.IArray, Data.Array.Unboxed, Data.Array.Diff, Data.Array
11:26:18 <vincenz> oh
11:26:24 <vincenz> > [1..10] \\ [1..5]
11:26:25 <lambdabot> [6,7,8,9,10]
11:26:39 <ARous1984> ah
11:26:42 <vincenz> > ([1..10]++[1..10]) \\ [1..5]
11:26:43 <lambdabot> [6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]
11:26:47 <vincenz> > ([1..10]++[1..10]) \\ [2..5]
11:26:48 <lambdabot> [1,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]
11:26:52 <vincenz> interesting
11:26:57 <vincenz> it assumes a sorted list as set for the operator \\
11:27:34 <vincenz> > sequence $ map (\x -> [x, x]) [1..10]
11:27:35 <lambdabot> [[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,
11:27:35 <lambdabot> [5 @more lines]
11:27:38 <vincenz> grr
11:27:52 <vincenz> > concatMap (\x -> [x, x]) [1..10]
11:27:52 <lambdabot> [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10]
11:27:54 <ARous1984> @index ->
11:27:54 <lambdabot> bzzt
11:27:59 <vincenz> > (concatMap (\x -> [x, x]) [1..10]) \\ [1..5]
11:27:59 <lambdabot> [1,2,3,4,5,6,6,7,7,8,8,9,9,10,10]
11:28:07 <vincenz> oh it's first occurence based
11:28:20 <ARous1984> x -> y
11:28:34 <vincenz> > (\x -> x) 1
11:28:35 <lambdabot> 1
11:28:44 <vincenz> ARous1984: lambda syntax
11:28:47 <Cale> > do x <- [1..10]; [x,x]
11:28:48 <lambdabot> [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10]
11:28:58 <ARous1984> we got a really brief intro to haskell, basically how to use hugs..im trying to learn the rest.
11:28:59 <vincenz> Cale: thx :)
11:29:12 <vincenz> > [1..10] >>= repeat 2
11:29:13 <lambdabot> Couldn't match `[a]' against `t -> t1'
11:29:18 <vincenz> help repeat
11:29:22 <vincenz> @type repeat
11:29:23 <lambdabot> forall a. a -> [a]
11:29:41 <Cale> > [1..10] >>= replicate 2
11:29:42 <lambdabot> [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10]
11:29:52 <vincenz> @type replicate
11:29:53 <lambdabot> forall a. Int -> a -> [a]
11:29:55 <vincenz> hah
11:30:44 <vincenz> > [1..10] >>= replicate 2 >>= (+1)
11:30:45 <lambdabot>  add an instance declaration for (Num [b])
11:32:04 <resiak> > [1..10] >>= replicate 2 >>= ((:[]) . (+1))
11:32:04 <lambdabot> [2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11]
11:33:49 <ARous1984> what does _ mean in haskell?
11:34:06 <Cale> ARous1984: in a pattern, it's a blank spot
11:34:18 <Cale> (it'll match anything, and not bind it to a variable)
11:34:22 <ARous1984> ah
11:34:55 <vincenz> > [1..10] >>= replicate 2 >>= return . (+1)
11:34:56 <lambdabot> [2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11]
11:35:12 <resiak> that's the badger
11:35:28 <sieni> badger badger
11:35:32 * sieni boings
11:35:53 <sieni> but this doesn't answer the fundamental question
11:35:55 <vincenz> badger?
11:35:59 <resiak> badger.
11:36:24 <Cale> > do x <- [1..5]; replicate x x
11:36:25 <lambdabot> [1,2,2,3,3,3,4,4,4,4,5,5,5,5,5]
11:36:44 <vincenz> @pl (\x -> fun x x)
11:36:45 <lambdabot> join fun
11:36:52 <vincenz> > [1..10] >>= join replicate
11:36:53 <lambdabot> [1,2,2,3,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10]
11:37:01 <Cale> yeah
11:37:10 <vincenz> @type join
11:37:11 <lambdabot> Not in scope: `join'
11:37:11 <Cale> that involves the reader monad :)
11:37:17 <Cale> @type Control.Monad.join
11:37:18 <vincenz> @hoogle join
11:37:18 <lambdabot> forall a (m :: * -> *).
11:37:18 <lambdabot>         (Monad m) =>
11:37:18 <lambdabot>         m (m a) -> m a
11:37:18 <lambdabot> Monad.join :: Monad a => a (a b) -> a b
11:37:18 <lambdabot> Control.Monad.join :: Monad m => m (m a) -> m a
11:37:20 <lambdabot> Data.PackedString.joinPS :: PackedString -> [PackedString] -> PackedString
11:37:23 <vincenz> Cale: cool
11:38:16 <Cale> join should really be in the Prelude
11:38:40 <sieni> vincenz: http://70.84.131.212/data/toons/badger.swf
11:38:56 <sieni> vincenz: remember to watch it until the end
11:39:01 <vincenz> with sound?
11:39:08 <sieni> vincenz: yes
11:39:21 <vincenz> I'm not getting any 
11:39:50 <Cale> besides, why the strange link?
11:40:15 <Cale> That's a Weebl cartoon
11:40:26 <vincenz>  can't get the sound
11:40:26 <sieni> Cale: indeed
11:40:32 <ARous1984> Is it possible to have a data structure which is basically a list, that has different types in it?
11:40:52 <sieni> vincenz: what about: http://www.badgerbadgerbadger.com/
11:41:01 <vincenz> nope
11:41:03 <vincenz> must be my syste
11:41:21 <Cale> ARous1984: Well, the first answer is no, but with extensions, yes, sort of.
11:41:47 <sieni> Cale: the link was what was reading in the browser, when I dug out the direct link to the swf
11:41:58 <Cale> sieni: ah
11:43:30 <ARous1984> wow its taking a long time to build ghc on this mac
11:43:35 <ARous1984> damn darwinports.
11:45:25 <Cale> ARous1984: you probably should try to avoid building GHC yourself
11:46:23 <Cale> ARous1984: there are binary packages for Mac OS
11:46:32 <ARous1984> Really?
11:46:37 <Cale> yeah
11:46:44 <ARous1984> They arent in the downloads section of GHC's website.
11:46:59 <Cale> oh?
11:47:11 <Cale> http://haskell.org/ghc/download_ghc_641.html#macosx
11:47:40 <Cale> http://haskell.org/ghc/dist/6.4.1/MacOSX/GHC-6.4.1.pkg.zip
11:48:03 <ARous1984> cool thanks
11:48:05 <mwc> ARous1984, it takes about 5 hours
11:48:14 <ARous1984> Oh, wow :)
11:48:15 <ARous1984> heh.
11:48:16 <mwc> it builds a whole whack of libs
11:48:28 <ARous1984> It took me an hour to build hugs version nov-2002
11:48:54 <Cale> that's an old version of hugs, btw
11:49:01 <ARous1984> Its the one the department uses.
11:49:08 <ARous1984> So I have to write my haskell program to work with that one.
11:49:16 <mwc> fair amount of debian users around there? :P
11:49:23 <ARous1984> ubuntu, actually.
11:49:38 <Cale> debian has 2005
11:49:52 <mwc> Cale: in Stale, Rusting, or Broken?
11:50:01 <monochrom> haha
11:50:34 <mwc> okay, that's my 2 lines of flame war for the day
11:50:48 <Cale> Well, I'm not sure about the other versions, but unstable definitely has up-to-date Haskell stuff.
11:51:42 <vincenz> does the badger thing ever end?
11:51:43 <Cale> (and it's usually not broken -- I think in the 5 years I've used it, there have only been 2 or 3 times where a package I wanted wasn't installable, and those problems are generally resolved quickly.)
11:51:50 <Cale> vincenz: no, it's a loop
11:52:18 <Cale> actually, make that 6 years
11:55:44 <MarcWeber> How is ghc, fptools, darcs/cvs related at the moment? ghc is availible via darcs, fptools via cvs (official docs haskell.org/ghc -> documentation)
11:56:52 <musasabi> MarcWeber: there is a darcs transition with most of the active stuff having switched over to darcs.
11:58:14 <MarcWeber> musasabi: But this is only ghc, not the other fptools projects?
11:59:02 <musasabi> some have transitioned. e.g. haddock, happy, etc
12:00:34 <MarcWeber> musasabi: Which is the darcs repo dir ? haskell.org/ghc is used by the gentoo ebuild. The others you have mentioned are then haskell.org/happy, .. ?
12:01:39 <musasabi> MarcWeber: browse http://darcs.haskell.org/
12:04:58 <MarcWeber> musasabi: thx
12:14:43 <aufrank> if I'm too dense to realize which patterns I'm not matching, is there a good way to diagnose non-exhaustive pattern errors in ghc?
12:16:27 <mauke> -fwarn-incomplete-patterns or just -W
12:17:47 <aufrank> thanks, mauke 
12:20:28 <ihope> lambdabot
12:20:31 <ihope> 's blue.
12:20:35 <ihope> Bright blue.
12:30:49 <mwc> OT: anybody know if you can use innovate as a transitive verb? Oxford desk dictionary is failing me
12:32:09 <monochrom> I have not heard of "x innovates y".
12:33:23 <mwc> yeah, oh well
12:36:04 <Cale> 1. trans. To change (a thing) into something new; to alter; to renew. Obs. (rare after 1750.)
12:42:54 <boy> i'm back
12:43:11 <boy> @seen dons 
12:43:11 <lambdabot> dons is in #haskell. Last spoke 6 hours, 7 minutes and 48 seconds ago.
12:52:20 <aufrank> monochrom: I know innervates, but not innovates
12:52:25 <mwc> hahha
12:54:10 <aufrank> how do I find out if a certain module contains the function I want to use?
12:54:20 <aufrank> that is, does List contain a member function?
12:54:26 <mwc> hoogle?
12:54:27 <MarcWeber> What is packed string about?
12:54:48 <mwc> strings without the singly-linked-list structure
12:55:01 <_frederik_> is it like impossible to get haddock to parse stuff? i thought it would use the same parser as ghc
12:55:29 <mwc> _frederik_, make sure you have -- |  and not --| ?
12:55:31 <mwc> that bit me
12:55:34 <MarcWeber> mwc: So it's not just a list .. but like in any other language where you have functions to do all the stuff?
12:55:41 <_frederik_> mwc: it's not that
12:55:48 <mwc> MarcWeber, that's the idea
12:55:54 <_frederik_> it's certain type signatures, template haskell, i don't know
12:59:14 <aufrank> lisp lets you treat lists like sets-- if I want to do the same sort of thing in haskell (ask about members, do unions, etc), is there a standard module to use?
12:59:52 <Korollary> Data.List
13:00:05 <Korollary> @type elem
13:00:06 <lambdabot> forall a. (Eq a) => a -> [a] -> Bool
13:00:28 <Korollary> also see Data.Set
13:01:03 <aufrank> thanks Korollary 
13:11:55 <malcolm> ping dons?
13:16:53 <boy> double-ping dons
13:17:53 <boy> @seen dcoutts 
13:17:54 <lambdabot> dcoutts is in #haskell-blah, #gentoo-haskell and #haskell. Last spoke 2 hours, 14 minutes and 15 seconds ago.
13:20:04 <aufrank> Cale: earlier you offered links about doing random numbers with the IO monad-- still offering? :)
13:20:37 <malcolm> @seen dons
13:20:37 <lambdabot> dons is in #haskell. Last spoke 6 hours, 45 minutes and 14 seconds ago.
13:21:33 <SamB> @hoogle (a, a) -> IO a
13:21:34 <lambdabot> No matches, try a more general search
13:23:24 <aufrank> ok, home for the day
13:23:31 <aufrank> thanks for the help today, all
13:25:19 <shapr> malcolm: Dons tends to wake up around midnight eurotime.
13:26:05 <malcolm> shapr: I guessed that from the amount of time he has been asleep according to @seen
13:26:29 <boy> what is eurotime?
13:26:40 <shapr> roughly GMT
13:27:40 <malcolm> I wanted to ask him about his testsuite packaging (from ghc) that he claims to run frequently on nhc98.
13:27:52 <SyntaxNinja> hiya malcolm
13:28:03 <malcolm> yo, syntax
13:28:05 <SyntaxNinja> who has done the work of optimizing the shootout benchmarks?
13:28:16 <boy> SyntaxNinja: think it was dons
13:28:18 <shapr> dons, musasabi, TuringTest, and others.
13:28:46 <SyntaxNinja> dons, musasabi: alive?
13:29:36 <SyntaxNinja> malcolm: how's it going?
13:30:13 <malcolm> SyntaxNinja: tired, I just finished a paper for submission to IEEE Visualization conference.
13:30:43 <SyntaxNinja> malcolm: are you going to relax this weekend?
13:30:51 <shapr> Let your hair down?
13:31:01 <malcolm> My hair is always down :-)
13:31:09 <boy> shapr: did you get a hair cut already? :D
13:31:23 <shapr> boy: No, but I am not even a shadow of malcolm.
13:31:40 <boy> shapr: i don't believe it. no such thing is possible
13:31:49 * shapr looks for pix of malcolm
13:32:28 <shapr> http://www-users.cs.york.ac.uk/~malcolm/img/malcolm.jpg
13:32:30 <SyntaxNinja> I used to have long hair, not as nice as malcolms, but then I started losing it. ah well.
13:32:35 <malcolm> I hope you aren't confusing me with Igloo, David Roundy, or Autrijus...
13:33:06 <SyntaxNinja> buncha long hairs around here
13:33:07 <boy> yikes, i wish i could grow my hair long :( i would do anything
13:33:19 <shapr> Truly Igloo has lotsa hair. This is from three years ago - http://www.cse.unsw.edu.au/~sseefried/seafood/photos/people/people-Pages/Image8.html
13:33:41 <shapr> Happily I lost a buncha weight since then too.
13:34:49 <SyntaxNinja> here's simon, ian, and droundy:http://www.syntaxpolice.org/pics/estoniaBerlin/Estonia/10.html
13:35:17 <SyntaxNinja> we need to get Igloo, droundy, malcolm, shapr, simon, and autrijus in a single photo for this next ICFP
13:35:18 <malcolm> My hair is lazily evaluated.  Gravity is demanding that it reach to the ground, but with the typical FP inefficiency, the hair is taking a long time to get there.
13:35:40 <SyntaxNinja> heh
13:35:43 <monochrom> haha
13:36:15 <boy> you guys need to get together after the next ICFP and meet for a salon-a-thon
13:36:22 * shapr grins
13:37:22 <shapr> My hair is still getting longer. I nearly shaved it off an hour ago.
13:37:23 <Philippa> naturally my own hair's distinctly more boyish than the guys' :-)
13:37:31 <Philippa> heh
13:37:40 <Philippa> I remember doing that. Should've picked a different time of year though
13:37:45 <shapr> It's gotten to the lots of trouble stage.
13:38:09 * Philippa nods
13:38:11 <Philippa> know the feeling
13:38:53 <shapr> boy: You could come to the next ICFP in Portland Oregon.
13:39:13 <boy> shapr: unfortunately i'm not allowed to leave the country :(
13:39:23 <shapr> aww
13:39:47 <shapr> I put up the pic of John Hughes riding my unicycle.
13:39:50 <mwc> boy trouble with the law?
13:40:05 <shapr> malcolm: Have you seen the EuroHaskell pix?
13:40:09 <Philippa> national service type stuff, perhaps?
13:40:13 <boy> mwc: something like that
13:40:20 <malcolm> shapr: yeah, was amused by them at the time
13:41:06 <shapr> We gotta do another EuroHaskell sometime.
13:41:13 <shapr> Maybe in the UK this time.
13:41:43 <malcolm> shapr: no hold on, i'm getting confused between eurohaskell and the estonia bash
13:42:17 <shapr> http://www.scannedinavian.com/~shae/eurohaskell/unsafeperformio.jpg
13:42:21 <shapr> And other pix in that dir.
13:42:27 <shapr> I should recreate the gallery.
13:42:53 <TuringTest> shapr: I still think the sign should have said "Either Male Female"
13:43:25 <boy> is a woman's rest room really necessary at such a conference?
13:43:26 * shapr laughs
13:43:33 <shapr> boy: Um, yes?
13:43:43 <TuringTest> ... Autrijus...
13:44:01 <shapr> Also that gorgeous blonde chick that Bringert was dating at the time.
13:44:06 <shapr> She does Haskell.
13:44:23 <shapr> And she was at EuroHaskell for a bit.
13:44:25 <boy> if so, i refuse to believe that she is a real woman
13:44:29 * shapr shrugs
13:44:37 <shapr> There are more female Haskell programmers than you think.
13:44:49 <boy> you mean there is one of them :D
13:44:50 * TuringTest refuses to believe boy is a real boy.
13:44:59 * boy is a real boy!
13:45:10 <shapr> I don't think it's necessary to point out female Haskellers as special cases... because they're not.
13:45:12 <mwc> Compsci at my school is about 50% Indian/Asian male, 50% female
13:45:18 <Philippa> boy: sorry, you're imaginary
13:45:22 <monochrom> Real or not, she goes to the female washroom.
13:46:18 <shapr> Now if we had a Haskeller who was implemented in Haskell, I'd point that out.
13:46:24 <mwc> It's hard to look cool: wearing polarized sunglasses in front of an LCD monitor
13:46:36 <Philippa> shapr: lambdabot needs a random code generator :-)
13:46:38 <mwc> shapr, Lt. Cmdr. Lambda/
13:46:49 * shapr laughs
13:47:06 <mwc> Nah, should be Cmdr. Lambda: data's higher order brother?
13:48:19 <boy> this eurohaskell thing sounds exciting... when and where will it be
13:48:20 <boy> ?
13:50:47 <shapr> Last time was Summer of 2004.
13:50:51 <shapr> Next time.. who knows?
13:54:06 <shapr> What about this summer in Stockholm?
13:56:16 <malcolm> Did eurohaskell operate like a workshop or like a hack-a-thon?
13:58:28 <shapr> malcolm: Well, what does a workshop operate like?
13:58:52 <malcolm> shapr: talks, mainly, plus some discussion
13:59:45 <shapr> It ended up being both.
13:59:54 <shapr> John Hughes gave a talk on arrows.
13:59:56 <mwc> workshop: scheduled talks, not held in organizer's mother's basement
13:59:57 <mwc> :P
14:00:03 <shapr> Lunar^ gave a talk on hOp.
14:00:18 <shapr> I gave an intro to Haskell, and a talk on monads.
14:00:41 <shapr> I think my monads talk sucked though.
14:00:54 <malcolm> shapr: wow, sounds brave to me, giving an intro to Haskell with John Hughes in the audience
14:01:04 <shapr> Happily, he wasn't there then :-)
14:01:34 <mwc> Are there any arrow libraries out there?
14:01:45 <malcolm> YAMPA
14:01:57 <shapr> From hacking on QuickCheck I've realized that Hughes has a *much* deeper understanding of the subtleties of Haskell than I do.
14:02:03 <shapr> musasabi wrote PArrows.
14:02:20 <shapr> HXmlToolbox has arrow combinators.
14:02:42 <shapr> There are a few GUI libs that use arrows.
14:02:45 <malcolm> shapr: you might expect such appreciation from one of the language's designers
14:03:14 <boy> i still haven't figured out how to use the arrows in Haskell Xml Toolbox :(
14:03:19 <shapr> malcolm: Sure, but keep expecting to catch up!
14:03:28 <shapr> er "I keep expecting"
14:04:13 <shapr> I really do learn quickly when I'm interested in something, but the Blub paradox means that distant objects are sometimes *much* more distant than they appear.
14:04:54 <shapr> Unlike the subtleties of Python and Java, I haven't reached the edges of Haskell in years of exploration.
14:05:15 <shapr> (Not that I don't take short trips to Epigram, Joy, etc)
14:05:32 <shapr> salut danly
14:06:05 <mwc> Scala looks kind of interesting
14:06:16 <mwc> modulo the JVM/CLR bits
14:06:28 <shapr> danly: Learning Haskell?
14:07:26 <danly> shapr: Hello! No, not learning Haskell.
14:07:34 <shapr> Aw, why not?
14:07:40 <shapr> Long time user?
14:07:45 <danly> I picked it up a few years ago for a handful of classes, but haven't used it since due to lack of necessity
14:08:19 <danly> I'm finding myself back into projects after studying computing theory for a few years and thought I'd see what's buzzing
14:08:42 <shapr> This channel is buzzing.
14:09:08 <Philippa> that's the bugs in your irc client, shapr
14:09:11 * shapr looks for something to buzz.
14:09:15 <shapr> Philippa: aha!
14:10:17 <shapr> danly: Anyway, lots of cool stuff happening here.
14:10:32 <shapr> lambdabot regularly gets new code.
14:10:59 <shapr> lambdabot has reached such a state of usefulness that dons recently got it running without the irc part.
14:11:03 <monochrom> I learned arrows by using HXL.
14:11:07 <shapr> Now it's available for use within emacs and vim.
14:12:20 <monochrom> Perhaps I should arrange to post my usage of HXL.
14:12:21 <boy> monochrom: please teach me
14:12:36 <shapr> danly: Are you looking for anything in particular? Fun projects to join, neat ideas to explore, something else?
14:13:24 <shapr> malcolm: Are you allowed to do moonlighting?
14:13:30 <danly> shapr: not particularly... I'm still at the tail end of this current semester, so I haven't time to look into too much
14:13:51 <malcolm> shapr: consultancy is OK on top of an academic job yes
14:14:27 <shapr> malcolm: Just wondering, this "Haskell's market" thread has me wanting to create a loosely organized pool of Haskell consultants.
14:16:42 <malcolm> shapr: I'm sure you could count several people in on that.  It would seem a bit unfair to give work to those of us who already have a job though, if there are others trying to make a living at it freelance.
14:17:33 <shapr> I'd give work to those who could get it done fastest, and fall back to those who are free at the time.
14:18:10 <mwc> you could apply for a grant to develop and implement a scheduling algorithm to do so
14:18:16 * shapr grins
14:18:19 <mwc> that would take care of your startup costs
14:20:11 <shapr> malcolm: Who else is trying to do freelance Haskell work?
14:20:24 * shapr thinks...
14:20:25 <malcolm> Wouldn't the geographical separation make things tricky, or are you a firm believer in the power of the internet?
14:20:45 <shapr> Well, I've been making my money via the 'net for the last six years.
14:21:01 <malcolm> shapr: you don't meet your clients in person?
14:21:07 <mwc> Cool, that would be a sweet thing if I could swing that
14:21:09 <shapr> I met my largest client once in ... 2002?
14:21:15 <shapr> For a coupla days.
14:21:15 <mwc> how did you get started, shapr 
14:21:20 <shapr> mwc: It was an accident.
14:21:46 <shapr> Someone was hand editing a bunch of html pages and I was like "Geez, lemme write you a regex."
14:21:58 <shapr> That escalated quickly.
14:22:13 <shapr> regex -> generate html sources with python -> zope/plone
14:22:39 <shapr> Then I had more work than time.
14:23:09 <shapr> My australian clients came out of ICFP2003 =)
14:23:14 <mwc> Do you have some constant clients or is it mostly/all transitory?
14:23:23 <shapr> It's all transitory.
14:23:41 <shapr> That mostly means "Too much work or not enough money".
14:24:05 <shapr> So when I disappear for weeks at a time...
14:24:42 <mwc> Ah, we shouldn't put your unicycle photos on milk cartons
14:25:06 <malcolm> shapr: do you quote a fixed price for a job, or bill by the hour?
14:25:09 <shapr> malcolm: It's not really necessary to meet clients in person. Text and voice chat works fine.
14:25:20 <shapr> I've been doing by the hour so far, but imho that's limiting.
14:25:43 <shapr> I'd much rather quote a fixed price for a job, and then do my best to find a more efficient and maintainable solution.
14:25:50 <mwc> Right now I'm in the process of deciding if I want to get my PhD or get a real job
14:25:54 <astrolabe> low risk and low gain for cost plus
14:26:52 <astrolabe> It is hard to get a PhD unless you are 100% committed IMHO
14:26:55 <mwc> I've thought it would be fun to do some work in applying FP to Scientific computing, since the latter is a fairly big area for me right now. Just don't know if I have the right undergrad degree to be accepted to a program where I could do that
14:26:55 <shapr> Still, my commute is pretty short. I have to sit up and turn on the screen.
14:26:56 <malcolm> software engineering questions like "how long is it going to take to code X" have always baffled me
14:27:16 <shapr> malcolm: It's pretty easy to answer, you write a tiny X first, and then you know.
14:27:52 <mwc> and you bill them for "Solution Space Analysis"
14:27:56 <malcolm> yeah, but you don't get paid for the tiny one, because the client hasn;t accepted your quote yet.
14:27:56 <monochrom> haha
14:28:13 <monochrom> well, it can be negotiated.
14:28:37 <shapr> malcolm: It depends.
14:28:38 <monochrom> OTOH if you are experienced, you can estimate.
14:28:59 <aFlag> is there a paste-bin with haskell syntax coloring?
14:29:04 <astrolabe> I'm always amazed at how long it takes me to code things.
14:29:06 <malcolm> in my experience, it always takes twice as long as you expect, even when you take your experience into account
14:29:15 <shapr> For me the question was, "Should I charge my clients for my time spent learning something new that's required for their solution?"
14:29:16 <mwc> aFlag, the old wiki had a paste page
14:29:22 <mwc> but a real paste bot would be nice
14:29:27 <mwc> maybe something lambdabot should do
14:29:41 <shapr> malcolm: There is a reliable algorithm for estimation.
14:29:55 <shapr> 1. come up with your best estimate 2. double the amount of time and increment the units.
14:30:16 <astrolabe> I thought there should be a factor of 10 in there somewhere
14:30:26 <shapr> Thus an estimate of two hours becomes four days, and four days becomes eight weeks.
14:30:31 <monochrom> Yeah, ask for 10 times as much money.
14:30:32 <malcolm> you mean, guess one hour, double and increment = 2 days
14:30:33 <astrolabe> Ah :)
14:30:38 <Lunar^> shapr: you were trying to talk about monads while riding your unicycle though
14:30:44 <shapr> Lunar^: Did it work? :-)
14:31:15 <Lunar^> not much, but that was neat
14:31:48 <shapr> Glad you enjoyed it :-)
14:32:26 <shapr> malcolm: That algorithm is shockingly reliable.
14:33:01 <mwc> I'm guessing shapr is something of an ADHD case :P
14:33:12 <shapr> mwc: What gives you that impression?
14:33:19 <malcolm> Cool, I'll remember it when you ask me to do some consultancy for you...
14:33:23 <mwc> Unicycling during the monad talk?
14:33:24 * shapr grins
14:35:06 <shapr> malcolm: Another way to get a good estimate is to only estimate how much work you can do during the next week.
14:36:01 <boy> > show (1 / 0)
14:36:02 <lambdabot> "Infinity"
14:36:05 <boy> wtf?
14:36:19 <SyntaxNinja> > show "boy"
14:36:20 <lambdabot> "\"boy\""
14:36:27 * shapr goes to sleep
14:36:29 * shapr &
14:36:31 <SyntaxNinja> > let boy = (1/0) in show boy
14:36:32 <lambdabot> "Infinity"
14:36:48 <boy> > show (sqrt (-1))
14:36:49 <lambdabot> "NaN"
14:36:57 <malcolm> is dons awake yet?
14:37:11 <boy> > tail []
14:37:12 <lambdabot> Add a type signature
14:37:25 <boy> > tail ([] :: [Int])
14:37:26 <lambdabot> Exception: Prelude.tail: empty list
14:49:15 <tenni1> re the estimation algorithm, what unit follows years?
14:49:43 <monochrom> I propose decades.
14:50:20 <monochrom> For example there was a time the AI people said "we'll have theorem provers in several years".  It turned out to be decades.
14:50:36 <tenni1> ok
14:50:42 <mwc> What about cold fusion?
14:50:47 <tenni1> Knuth must have been using a naive estimation algorithm
14:50:48 <mwc> We'll certainly have that in another 25 years :P
14:51:14 <monochrom> cold fusion is not a software project.
14:55:12 <tennin> this is good news for me though, as my three-week project is just now entering its sixth month
15:01:06 <aFlag> i've been doing some exercices from my book here and I can't figure out what's wrong with this function
15:01:08 <aFlag> http://rafb.net/paste/results/0fsXhU36.html
15:01:26 <aFlag> it yields "Program error: pattern match failure: onSepareteLines []"
15:01:46 <aFlag> I don't get why should there be a pattern match failure
15:02:34 <monochrom> spelling mistake on line 3
15:02:53 <Korollary> It could be [ [] ]
15:03:39 <monochrom> onSepareteLines is not onSeparateLines
15:04:45 <aFlag> oh, i didn't see it, thanks. It was quit dumb mistake :(
15:05:19 <boy> can i have a where inside the then part of an if?
15:05:43 <boy> > if True then (y where y = 1) else 2
15:05:44 <lambdabot>  parse error on input `where'
15:05:50 <mwc> you want let
15:05:55 <boy> > if True then y else 2 where y = 1
15:05:56 <lambdabot> 1
15:05:58 <boy> :'(
15:06:10 <boy> > if True then let y = 1 in y else 2
15:06:11 <lambdabot> 1
15:06:24 <boy> mwc: how come let works but when doesn't?
15:06:30 <mwc> if ... then... else ... is a single expression
15:07:02 <mwc> let ... in ... is a single expression, it can go anywyer
15:07:10 <mwc> where introduces a new scope, afaik
15:07:20 <mwc> I'm sure that's not really technical or correct language
15:07:27 <boy> mwc: ok, but why is this good?
15:07:45 * mwc looks up from the Tao Te Ching
15:07:49 <mwc> it is.
15:08:01 <monochrom> hahaha
15:08:34 <aFlag> by the way, i'm reading "haskell: the craft of functional programming", is it supposed to be good?
15:09:42 <monochrom> > (if True then y else 2 where y = 1) + 2
15:09:42 <lambdabot>  parse error on input `where'
15:09:55 <monochrom> This shows that the rule about "where" is more subtle.
15:10:24 <boy> monochrom: hm... that is scary
15:10:26 <monochrom> And also what lambdabot does is subtle.
15:10:28 <gzl> I kind of wish they had misprinted that as "haskell: the cruft of functional programming"
15:10:38 <mwc> Ok, I have the report right next to me
15:10:42 <mwc> I'lll look it up
15:10:46 <boy> > ((if True then y else 2) where y = 1) + 2
15:10:46 <lambdabot>  parse error on input `where'
15:10:52 <monochrom> If you write this:
15:11:06 <monochrom> f x  = if True then y else 2 where y = 1
15:11:17 <monochrom> The computer parses that as:
15:11:34 <monochrom> (f x = if True then y else 2) where y = 1
15:11:55 <monochrom> (The parentheses are mine for informal illustration only.)
15:12:13 <monochrom> Thus "where" is to be attached to a definition/declaration, not an expression.
15:12:57 <boy> monochrom: hm.... why is this good?
15:14:00 <monochrom> Now I attempt to explain why lambdabot accepts:
15:14:08 <monochrom> > x where x=1
15:14:08 <lambdabot> 1
15:14:35 <mwc> it implicitely "prepends" foo = to that?
15:14:43 <mwc> and then outputs the value of foo
15:14:44 <monochrom> My hypothesis is that if you enter "blah" it executes "let it = blah in print it"
15:14:52 <mwc> YAY
15:15:18 <monochrom> Thus "let {it = x where x=1} in print it" still makes sense.
15:15:46 <astrolabe> @where shootout
15:15:46 <lambdabot> I know nothing about shootout.
15:15:58 <mwc> shootout.alioth.debian.org
15:16:01 <astrolabe> Does anyone know 
15:16:03 <astrolabe> thatnks
15:16:14 <mwc> @help
15:16:14 <lambdabot> help <command>. Ask for help for <command>. Try 'list' for all commands
15:16:18 <mwc> @list
15:16:18 <lambdabot> list [module|command]. Where modules is one of:
15:16:18 <lambdabot> babel base compose dice dict djinn drHylo dummy dynamic elite fact haddock help hoogle karma lambda localtime log more pl plugs poll pretty quote search seen slap spell state system todo topic type unlambda version vixen where
15:16:25 <mwc> @where
15:16:25 <lambdabot>  @where <key>, return element associated with key
15:16:35 <mwc> @fact
15:16:35 <lambdabot> I can not handle empty facts.
15:16:42 <mwc> @help fact
15:16:43 <lambdabot> fact <fact>, Retrieve a fact from the database
15:16:53 <mwc> Hmmm, anybody know how to register that?
15:19:38 <int80_h> w00t
15:20:39 <mwc> @where+ shootout http://shootout.alioth.debian.org
15:20:40 <lambdabot> Done.
15:20:44 <mwc> @where shootout
15:20:45 <lambdabot> http://shootout.alioth.debian.org
15:20:50 <mwc> I feel special
15:22:45 * int80_h wants to be special too, by golly
15:22:54 * int80_h pouts
15:25:17 * mwc shares the special brownies
15:25:39 * int80_h gets loopy and doesn't know why
15:26:30 <int-e> oh, they stopped using lines of code ... at least in the P4 shootout
15:27:13 <mwc> good, python is probably the only language that can't be fudged up to have everything on the one line
15:27:50 <mwc> expression count would be more meaningful, but hard to decide for each entry
15:28:18 <Philippa> "fine, we'll shove everything in let instead of using top-level bindings" :-)
15:28:43 <mwc> Doh, that's still one expression :D
15:28:47 <int80_h> is this a lisp discussion?
15:29:07 <mwc> no ith not
15:29:45 <mwc> "What motherf***er put an eth in lithp?"
15:30:08 <mwc> possibly the only good line from The Cable Guy
15:30:43 * int80_h giggles
15:30:55 <int80_h> well "let" and "bindings" made me think...
15:30:56 * sieni does not giggle
15:31:00 * boy is gonna give dons 5 more minutes. after that he's going to sleep
15:31:15 <Korollary> @localtime dons
15:31:16 * int80_h thinks you are mistaken that he ever giggled.
15:31:17 <lambdabot> Local time for dons is Sat Apr  1 09:31:47 2006
15:31:48 <mwc> He's either at a kangaroo rodeo or surfing
15:33:40 <int80_h> the idea that he's off surfing is highly dubious. Kangaroo rodeo is much more likely
15:55:51 <vincenz> anyone looked at k?
15:56:46 <x3m> anyone got the url where they compared haskell performance(of one program) vs some other languages?
15:57:07 <TuringTest> x3m, could you be more specific?
15:57:13 <vincenz> @google shootout
15:57:15 <lambdabot> http://www.miniclip.com/bushshootout.htm
15:57:20 <Korollary> @where shootout
15:57:20 <lambdabot> http://shootout.alioth.debian.org
15:58:02 <x3m> TuringTest: im not sure what test it was really, saw the link before, they had made a program and compared speed with for example c++ and so on
15:58:10 <TuringTest> ah
15:58:43 <Korollary> I've seen a few. The link I posted is the most famous and extensive one.
15:59:27 <TuringTest> x3m : http://bitbenches.infogami.com/ ?
15:59:46 <TuringTest> x3m : They work on erland
15:59:48 <TuringTest> erlang
16:05:00 <mwc> how does erlang do so well?
16:05:52 <TuringTest> They are experts ... they modified erlang to handle these tasks
16:10:34 <Excedrin> is there something similar to Ocaml's Unix.establish_server in Haskell? (establish_server accepts connections on some socket, then forks and calls some function with the connected socket's in and out channels as arguments)
16:11:07 <Excedrin> hmm, maybe HAppS
16:15:28 <dcoutts> boy, pong
16:16:04 <x3m> TuringTest: it was something similiar but in that test i think haskell beated c in some tests
16:16:05 <boy> dcoutts: sup
16:16:20 <dcoutts> boy, you pinged me earlier
16:17:00 <boy> dcoutts: hm.... did i?
16:17:09 <dcoutts> seems so
16:17:25 <dcoutts> <boy> double-ping dons
16:17:25 <dcoutts> <boy> @seen dcoutts 
16:17:42 <boy> dcoutts: yeah, i guess i wanted to ask you something
16:17:54 <dcoutts> can you remember the question?
16:18:56 <boy> dcoutts: not exactly... but i have a better question: how is hIDE coming along?
16:19:05 <dcoutts> ask Lemmih 
16:19:51 <boy> hm..... narf what did i want to ask you?
16:21:17 <lisppaste2> TuringTest pasted "Excedrin" at http://paste.lisp.org/display/18501
16:21:39 <TuringTest> Excedrin: That is an untested bit of code, but it looks close
16:22:25 <Wallbraker> http://slashdot.org
16:22:56 <SyntaxNinja> hi CosmicRay
16:23:17 <CosmicRay> good evening SyntaxNinja 
16:26:07 <SyntaxNinja> CosmicRay: how's hack?
16:26:58 <CosmicRay> SyntaxNinja: pretty good.  hacking on my blog a bit more tonight yet, then I'm going to try some darcs evangelism
16:27:00 <CosmicRay> ;-)
16:27:07 <Excedrin> thanks TuringTest 
16:27:24 <CosmicRay> how bout you?
16:27:25 <SyntaxNinja> CosmicRay: cool. on who?
16:27:33 <CosmicRay> SyntaxNinja: the authors of serendipity ;-)
16:27:39 <CosmicRay> (the blog software I switched to)
16:27:41 <lisppaste2> TuringTest annotated #18501 with "for Excedrin" at http://paste.lisp.org/display/18501#1
16:27:54 <SyntaxNinja> CosmicRay: I'm doing OK. working on automating some build scripts and reporting here.  
16:28:05 <CosmicRay> nice.
16:28:07 <TuringTest> I like Control.Monad instead of hand written loops sometimes.
16:29:20 <CosmicRay> ooo, this Text.Regex.Lazy looks like an awesome hack.
16:29:51 <TuringTest> Thanks
16:30:04 <CosmicRay> whoa, that's you.
16:30:05 <x3m> TuringTest: http://shootout.alioth.debian.org/gp4/benchmark.php?test=all&lang=all this was it :)
16:30:06 <CosmicRay> I had no idea.
16:30:12 <TuringTest> CosmicRay: I have many names...
16:30:20 <CosmicRay> TuringTest: I would suggest perl-compatible regular expressions
16:30:30 <CosmicRay> TuringTest: as an answer to your question about favorite extensions
16:30:34 <CosmicRay> TuringTest: Python also uses those
16:31:05 <CosmicRay> TuringTest: Pesco also has a nice pure Haskell library that introduces some perlish regexp operators for Text.Regex.  If you don't already have them in your library, it might be nice to have.
16:35:29 <TuringTest> CosmicRay: Given the existing examples, a bigger parser would be possible to implement.  But I am tired of writing all that Parsec for now.
16:36:34 <TuringTest> Currently I am connecting gnuplot to haskell and gtk2hs / cairo.  It works!
16:36:44 <dcoutts> yay
16:37:03 <TuringTest> I can render everything from the "test" command from gnuplot.
16:37:52 <TuringTest> Thanks, dcoutts, for the API help.
16:37:59 <dcoutts> no problem
16:38:20 <dcoutts> I hope to see this plot stuff develop into a really useful library
16:39:25 <TuringTest> I may merge it with the GSL wrapper re-write : http://dis.um.es/~alberto/GSLHaskell/doc/ : that alberto is doing
16:39:45 <dcoutts> I see
16:39:56 <TuringTest> The same command stream could be re-routed to openGL commands, if I know openGL
16:43:20 <TuringTest> Is there a paste-board for images somewhere handly?
16:47:11 <int-e> I wonder if are there similar libraries for predicates and relations (providing products and maybe efficient representations of special relations - equivalence relations come to mind)
16:50:48 <TuringTest> dcoutts: Screenshot of cairo rendering gnuplot's test: http://img307.imageshack.us/my.php?image=gnuplotgtk2hscairotest8ny.png
16:51:04 <dcoutts> cool!
16:51:51 <dcoutts> TuringTest, do you want a little writup on the gtk2hs website screenshot section?
16:52:02 <dcoutts> http://haskell.org/gtk2hs/archives/category/screenshots/
16:52:26 <TuringTest> Sure.
16:53:04 <dcoutts> so pick a picture (or more) and write a little bit about what it is any what's interestign about it or how you wrote it
16:53:17 <dcoutts> you can se the previous examples for the general idea
16:54:02 <dcoutts> eg, this one is a nice example:
16:54:03 <dcoutts> http://haskell.org/gtk2hs/archives/2006/03/09/cops-and-robbers/
16:55:48 <TuringTest> dcoutts: What's the easiest way to render to a png  with gtk2hs/cairo?
16:56:38 <dcoutts> TuringTest, cairo can draw to png surfaces
16:56:45 <dcoutts> or you can jsut use a screenshot
16:56:51 <dcoutts> is that what you mean?
16:57:10 <TuringTest> draw to png surfaces.  It would be easier.
16:57:23 <dcoutts> ok, let me find the api...
16:57:43 <dcoutts> http://haskell.org/gtk2hs/docs/current/Graphics-Rendering-Cairo.html#10
16:57:50 <TuringTest> surfaceWriteToPNG
16:57:54 <TuringTest> Hmmm...
16:57:54 <dcoutts> yep
16:58:23 <dcoutts> I'm not 100% sure if that works for any old surface or just image surfaces
16:58:45 <dcoutts> I think it should work for any surface, but like I say, I'm not totally sure
17:05:06 <Smokey`> April Fools day is awesome on the internet :P
17:06:00 <Descoloda> its also the day after my birthday, i was 8 hours from becomming a april fools day, and boy that would suck
17:07:53 <sieni> my friend has a birthday today, maybe I should try to wake him up
17:08:00 <Descoloda> heh
17:08:08 <Descoloda> he will hate you
17:08:24 <sieni> well... he won't wake up
17:09:03 <sieni> since he always uses the mechanical shaking thingie as the call "sound"
17:09:25 <sieni> like the one meant for deaf people even though he's not deaf
17:09:58 <Descoloda> slashdot looks.. yegh
17:10:55 <TuringTest> dcoutts: I have png rendering working
17:11:04 <sieni> slightly gayish, I'd say
17:11:05 <dcoutts> TuringTest, well done
17:11:29 <TuringTest> withImageSurface to renderWith to surfaceWriteToPNG
17:15:36 <TuringTest> dcoutts: It looks like, on close inspection, that the textExtentsWidth for "4" is too wide for some reason.
17:16:05 <TuringTest> I am guessing the font code in cairo/gtk/pango is lying
17:17:12 <dcoutts> TuringTest, possibly. According to the docs the width should be the actual inked width
17:17:34 <dcoutts> as opposed to the textExtentsXadvance which is the logical width
17:17:41 <TuringTest> what is the default gtk2hs font...hmm....
17:18:06 <dcoutts> TuringTest, it's picked by default by cairo, you can change it of course
17:18:18 <dcoutts> TuringTest, also you might get better results with pango
17:18:37 <TuringTest> Hmm...
17:19:01 <dcoutts> TuringTest, cairo can be used with multiple font backends, it provides it's own "toy" text api but for serious work people are expected to use pango or some other system.
17:19:31 <SyntaxNinja> Igloo: does ghc not really install on a clean sarge system?
17:19:54 <dcoutts> Pango gives you lots of control over all aspects of the text rendering. The pango api is a tad more complex.
17:20:02 <Igloo> SyntaxNinja: ghc from sarge should
17:20:28 <SyntaxNinja> Igloo: I get  ghc6: Depends: libreadline5-dev but it is not going to be installed
17:21:24 <Igloo> SyntaxNinja: What version of libreadline5 and libreadline5-dev is installed, if any?
17:23:37 <SyntaxNinja> libreadline5-dev: Depends: libreadline5 (= 5.0-10) but 5.1-6 is to be installed
17:23:48 <SyntaxNinja> I didn't install  this system, so maybe it's not as clean as I am expecting. hmm
17:24:18 <Igloo> sarge has 5.0-10, not 5.1-6
17:25:21 <SyntaxNinja> I'll have to ask the sysadmin I guess. the only sources in /etc/apt/sources.list are sarge sources. 
17:25:31 <SyntaxNinja> hm, but when I update, I still get that
17:27:45 <SyntaxNinja> i'll sort it on monday I guess :) 'night all
17:29:20 <vincenz> HAH!
17:29:25 <vincenz> Why are people always so hostile?
17:29:38 <vincenz> Do people enjoy bringin each other down to prove their own superiority?
17:30:14 <Igloo> vincenz: Are you talking about me?
17:30:36 <vincenz> no
17:30:44 <vincenz> these two guys arguing on clf
17:30:56 <Igloo> OK  :-)
17:30:58 <vincenz> harrop and fishbacher
17:31:11 <vincenz> well it feels more like fischbacher is trying to bring down harrop
17:31:12 * Igloo stops rereading the above to work out why it seems hostile  :-)
17:31:27 <sieni> vincenz: I'm not usually hostile towards people that just disagree with me, but mostly towards people who actively renounce any common sense and refuse to accept basic principles of elementary logic
17:31:36 <vincenz> tho on the one hand I do think that harrop does self-advertise a bit too much...
17:31:37 <sieni> (like modus ponens :-P)
17:31:45 <vincenz> I do not agree with the tactics employed by fischbacher
17:31:49 <vincenz> and wonder what his purpose is
17:31:55 <vincenz> besides, harrop has some interesting stuff
17:32:17 <sieni> is harrop this benchmarking guy?
17:32:19 <vincenz> I don't know the full istory of course, it seems this originated on wikipedia
17:32:21 <vincenz> sieni: yeah
17:32:43 <heatsink> what is clf?
17:32:49 <vincenz> comp.lang.functional
17:32:53 <heatsink> ah
17:33:20 <vincenz> I also find it amusing how both people use "Dr ..." as their names
17:33:36 <vincenz> but notwithstanding that, harrop has some cool hackery to say the least
17:34:07 <vincenz> hmm
17:34:10 <sieni> vincenz: jon harrop is actually not _that_ annoying... he has fixed some obvious flaws in his benchmarks that have been pointed to him 
17:34:15 <vincenz> sieni: no I know...
17:34:25 <vincenz> sieni: I don't agree with his advertising, but I have no qualms with him
17:34:36 <vincenz> he's cool
17:34:41 <vincenz> so I wonder why fischbacher is so opposed to him
17:34:46 <vincenz> trying to bring down the work harrop did
17:35:21 <vincenz> "harrop does not prestate his goals and only draws summaries after he made experiments, so his work is crap"
17:35:24 <vincenz> which is bullshit
17:35:27 <vincenz> is the core message
17:35:39 <vincenz> observing experimental data is always a worthwhile effort
17:36:35 <vincenz> I thought flaming at this level was more something of the 90s
17:36:45 <vincenz> On another note
17:36:46 <sieni> vincenz: that kind of claim (about harrop's experiments) is probably unfair, since at least in the ray tracer experiment I think he provided enough information to reproduce the experiments
17:36:56 <vincenz> sieni: I completely agree
17:37:14 <vincenz> if I started a paste-site on my website that supports haskell syntax... would you guys be prone to use it?
17:38:32 <sieni> can't something like paste.lisp.org be fixed to support haskell and ml and such? (just a question)
17:38:47 <vincenz> I guess
17:38:52 <vincenz> I'd just like some nice content on my site :)
17:38:55 <petekaz> I added erlang syntax to lisppaste.
17:38:58 <petekaz> It wasn't that hard.
17:40:01 <vincenz> time to add a darcs button to my site :)
17:40:21 <sieni> petakaz: I don't see any erlang choice in the "Colorize as:" thingie
17:44:32 <dcoutts> Igloo, yeah maybe ppc64 -minimal-toc is worth a go.
17:47:58 * vincenz makes a darcs button :)
17:48:31 * vincenz pokes dcouts to approve his comment
17:51:40 <vincenz> Feel free to sign my guestbook!
17:51:41 <vincenz> http://www.notvincenz.com/wiki/pmwiki.php/Other/Guestbook
17:56:11 <mwc> @hoogle [[a]] -> [a]
17:56:12 <lambdabot> Prelude.concat :: [[a]] -> [a]
17:56:19 <mwc> I have a question about list comprehensions
17:56:38 <vincenz> what is terve?
17:56:59 <mwc> if I have a comprehension of the form: [f x y  | x <- [1..10], y <- g x]
17:57:08 <mwc> is that going to build a list for each value of x and then concat them together?
17:57:18 <mwc> or will the compiler generate more efficient code?
17:59:29 <Korollary> I dont think it will concat anything
18:01:16 <monochrom> > [ (x,y) | x<-[1..3], y<-[0..x] ]
18:01:17 <lambdabot> [(1,0),(1,1),(2,0),(2,1),(2,2),(3,0),(3,1),(3,2),(3,3)]
18:01:34 <mwc> what I mean, is the list generated by some sort of linear method?
18:01:57 <mwc> The H98 report doesn't say anything
18:01:58 <monochrom> There is a concatenation.
18:02:00 <mwc> but I presume it would
18:02:11 <mwc> monochrom, is there?
18:02:33 <monochrom> > do { x<-[1..10]; y<-[0..x]; return (x,y) }
18:02:34 <lambdabot> [(1,0),(1,1),(2,0),(2,1),(2,2),(3,0),(3,1),(3,2),(3,3),(4,0),(4,1),(4,2),(4,3),(4,4),(5,0),(5,1),(5,2),(5,3),(5,4),(5,5),(6,0),(6,1),(6,2),(6,3),(6,4),(6,5),(6,6),(7,0),(7,1),(7,2),(7,3),(7,4),(7,5),(7,6),(7,7),(8,0),(8,1),(8,2),(8,3),(8,4),(8,5),(8,6),(8,7),(8,8),(9,0),(9,1),(9,2),(9,3),(9,4),(9,5),(9,6),(9,7),(9,8),(9,9),(10,0),(10,1),(10,2),(
18:02:34 <lambdabot> 10,3),(10,4),(10,5),(10,6),(10,7),(10,8),(10,9),(10,10)]
18:02:47 <monochrom> > do { x<-[1..3]; y<-[0..x]; return (x,y) }
18:02:48 <lambdabot> [(1,0),(1,1),(2,0),(2,1),(2,2),(3,0),(3,1),(3,2),(3,3)]
18:03:01 <monochrom> >>= contains a concatenation.
18:03:31 <mwc> are list comprehensions implemented in terms of the list monad?
18:05:57 <vincenz> [1..3] >>= \x -> [0..x] >>= \y -> return (x,y)
18:06:01 <vincenz> > [1..3] >>= \x -> [0..x] >>= \y -> return (x,y)
18:06:02 <lambdabot> [(1,0),(1,1),(2,0),(2,1),(2,2),(3,0),(3,1),(3,2),(3,3)]
18:09:26 <dons> moin!
18:09:34 <vincenz> dons: hello!
18:09:45 <dons> mwc, nope. they''re desugared to maps, iirc
18:09:53 <dons> hey vincenz
18:10:10 <dons> mwc, the translation is in the H98 report
18:10:24 <dons> however, we used to have monad comprehensions
18:10:26 <vincenz> funky that a monad implementation would be in the report
18:10:34 <dons> and there's a strong connection between comprehensions and monads
18:11:06 <vincenz> nm.. the [] syntax
18:11:59 <mwc> yeah, there is a concat in there
18:12:01 <mwc> oh well
18:20:58 <dons> ?seen malcolm
18:20:58 <lambdabot> I saw malcolm leaving #haskell-blah and #haskell 3 hours, 41 minutes and 3 seconds ago.
18:24:01 <Korollary> hmm, aussie grand prix
18:24:10 <dons> ah, this weekend?/
18:24:15 <dons> how did that sneak up on me
18:24:18 <Korollary> yes
18:24:43 <dons> it's confusing this yeaar, since it's normally the first race of the season
18:25:33 <Korollary> I almost missed Malaysia too
18:34:27 <TuringTest> dcoutts: The pango rendering for the text is working
18:37:14 * TuringTest goes to bed and dies
18:58:24 <petekaz> sieni: I submitted the patch to the lisp paste maintainer a month ago, he's way backed up, but here is the erlang syntax working on my lisppaste instance: http://www.kazmier.com/paste/display/27
19:03:32 <mwc> So basically, somebody would need to write a haskell parser in lisp
19:03:49 <dons> ?quit new code, thanks rizzix!
19:04:07 <dons> ?help gsite
19:04:22 <lambdabot> gsite <site> <expr>. Search <site> for <expr> using google
19:04:34 <dons> ?gsite haskell.org Lambdabot
19:04:36 <lambdabot> http://www.haskell.org/haskellwiki/Lambdabot
19:04:40 <dons> groovy
19:04:49 <dons> ?karma+ rizzix
19:04:50 <lambdabot> rizzix's karma raised to 1.
19:05:07 <petekaz> mwc: you don't need a full parser to get coloring. I definitely didn't write one for erlang.
19:05:30 <dons> could we get by with just a _lexer_ ?
19:05:35 <dons> like we do for most coloring
19:05:40 <dons> (of syntax))
19:05:53 * dons guesses what you guys are talking about
19:06:14 <dons> writing a lexer for haskel is fairly easy. only 6 classes of tokens. and a bunch of keywords
19:06:30 <mwc> yes
19:06:36 <dons> handling {- -} is a bit trickier, but still only 5 lines or so
19:06:45 <mwc> Talk of haskell coloring for lambdabot
19:06:57 <dons> oh!
19:07:11 <dons> that would be kind of cool
19:08:25 <mwc> I think a dedicated paste function for lambdabot would be better
19:08:54 <petekaz> @version
19:08:54 <lambdabot> lambdabot 3p376, GHC 6.4.1 (Linux i686 3.20GHz)
19:08:54 <lambdabot> darcs get http://www.cse.unsw.edu.au/~dons/lambdabot
19:09:04 <dons> we have a bit of a paste plugin going.
19:09:21 <dons>  but no real idea yet on how to monitor an off-site paste page
19:10:00 <dons> it would be possible to run a paste server on lambdabot's box though
19:10:04 <mwc> I was thinking of putting the paste page IN lambdabot. SOrt of a simple http responder
19:10:12 <dons> hmm
19:10:20 <dons> that's cool
19:10:29 <dons> yeah, I like this
19:10:31 <mwc> another possibility would be a haskell based fcgi app
19:10:59 <dons> yeah, I don't mind an exernal app (that could be distributed with lambdabot)
19:12:52 <dons> and lambdabot can take care of the irc messaging  -- using the ides in the DarcsPatch plugin
19:15:06 <mwc> It seems to me, we'd need a DB interface for storing pastes + metadata; a pretty-printer (plenty of those around); and some sort of engine for world domination.
19:15:22 <dons> yeah, the world domination engine would be critical
19:16:26 <dons> a really basic system, just using standard libs, could be coded up fairly quickly I think
19:16:34 <dons> adding DB support would be a bit more.
19:18:10 <Korollary> the world domination could be lazily implemented.
19:19:25 <mwc> Korollary, you've uncovered my cunning plan
19:19:36 <dons> map rule [ people ! n | n <- [1..] ]
19:45:53 <mwc> @hoogle (Ord a) => a -> a -> a
19:45:55 <lambdabot> Prelude.max :: Ord a => a -> a -> a
19:45:55 <lambdabot> Prelude.min :: Ord a => a -> a -> a
19:45:55 <lambdabot> Prelude.asTypeOf :: a -> a -> a
19:52:33 <petekaz> mwc: you still there, http://www.kazmier.com/paste/display/29
19:52:47 <petekaz> A quick crack at haskell syntax for lisppaste.
19:53:34 <petekaz> bear in mind, its EXTREMELY minimal, and I'm a total haskell newbie that doesn't even know the syntax yet.
19:54:18 <petekaz> I need to add to the list of reserved words (I'll peek in the emacs mode for that in a moment).
19:54:39 <mwc> that's ok, I'm  total newbie at lisp
19:55:11 <mwc> Looks pretty good
19:55:15 <mwc> beats plain text
19:55:42 <petekaz> Well, I just took my erlang mode and tweaked it a tad.
20:01:55 <dons> the lexical syntax is here, if you want to borrow from that: http://darcs.haskell.org/ghc/ghc/compiler/parser/Lexer.x
20:02:05 <dons> acutally, that's a bit commplex
20:02:11 <dons> a simpler one would do. let me see....
20:03:08 <dons> ah, here we go: http://darcs.haskell.org/alex/examples/haskell.x
20:03:14 <dons> you could use that to work out the patterns to match
20:03:30 <dons> it's much much simpler than ghc's with all the ghc extensions.
20:03:37 <dons> but would give great results, if translated to liisp
20:09:43 <petekaz> I was just farting around, I still am not quite sure how to write a correct syntax for the lisppaste bot.  You guys should write a haskell one though, I'm sure you could come up with a very cool mechanism to let people define their own syntaxes.
20:12:14 <dons> yeah, it would be a good idea. and very doable I think
20:12:40 <petekaz> I'd love to see how it compares to the lisp one.
20:33:17 <Korollary> hello new york
20:52:59 <dons> Lemmih, ping. where's your code at now that its not on scannedinavian?
21:08:38 <MenTaLguY> howdy
21:17:45 <Lemmih> dons: darcs.haskell.org/~lemmih/
21:18:31 <dons> ah great.
21:28:40 <dons> I wish MediaWiki has a darcs push interface 
21:53:51 <Korollary> The English on the history page at haskell.org could use some clean-up.
22:40:38 <BlurredWe> Are there any tutorials/walkthroughs about building a compiler in haskell?
22:41:15 <dons> yep. let me find the link ...
22:42:00 <BlurredWe> cool, I'm in a compilers class right now, but we're writing ours in C, I'd like to see how haskell compares
22:45:06 <dons> it's called "Implementing 
22:45:13 <dons> ah, hang on
22:45:24 <musasabi> Functional languages are quite nice for writing compilers.
22:45:30 <dons> Haskell is pretty much built for writing compilers. 
22:45:41 <dons> it would be its main use, just about
22:46:11 <dons> mostly due to pattern matching on data structure, and writing pure transformations over ASTs
22:46:34 <dons> http://research.microsoft.com/%7Esimonpj/papers/slpj-book-1987/index.htm
22:46:34 <dons> is about implementing Haskell in Haskell
22:46:34 <BlurredWe> yeah, figured it'd be pretty sweet, spend 10ish hours yesterday working on just making the tree from our parser in C...
22:46:52 <dons> http://research.microsoft.com/Users/simonpj/Papers/pj%2Dlester%2Dbook/
22:47:02 <dons> oh, it's crazy to do it in. 
22:47:04 <dons> C
22:47:24 <dons> you could get an small compiler written in a couple of days
22:47:34 <BlurredWe> thanks for the paper, but it's actually one step too removed for me it looks like.  I don't want to make a compiler FOR haskell, but a compiler IN haskell :)
22:47:53 <dons> yes, but it describes building lexers, parsers code generators and so on
22:47:58 <dons> just so happens its for Haskell
22:48:26 <dons> you'd do the same for another language.
22:48:54 <BlurredWe> I've had basic compilers, so I understand the data structures and such, just hoping somebody did a step-by-step of building something simple in haskell 
22:49:57 <Saulzar> Maybe this would be of interest:
22:50:00 <Saulzar> http://halogen.note.amherst.edu/~jdtang/scheme_in_48/tutorial/overview.html
22:50:28 <coumbes> I was just going to post that :)
22:50:43 <dons> there's also a list of useful tools here: http://www.haskell.org/haskellwiki/Libraries_and_tools/Compiler_tools
22:51:08 <dons> and Appel wrote "Modern Compiler Implementation in ML" -- which is pretty much the same as doing it in Haskell, but messier
22:51:46 <BlurredWe> that scheme_in_48 tutorial is closer, thanks for all the help, if you run across any more links in the next hour or so, send em over, but I'm going to take a look at these
22:53:44 <BlurredWe> I've dabbled in haskell before, but never really had much real use for (did the whole factorial thing, but not much further), so maybe if I can see something actually implemented in it, it'd be cool
22:54:42 <dons> basically, you define a Syntax.hs with your AST data type. Write a lexer with Alex, and a parser with Parsec or Happy. Then write a transformation of your AST into whatever backend. a basic interpreter for a small fp lang (or mini-C) would be around 1k loc. maybe less.
22:55:42 <dons> pugs, the perl 6 compiler, is written in Haskell. so they might have some resources as well.
22:56:00 <BlurredWe> sweet, my C implementation of a fake C-- language is already at ~3000 loc, w/o any tree traversal yet
22:56:08 <dons> argh
22:56:16 <tennin> I just read a 1000-line program that implements an alternate XML syntax with a macro system
22:56:19 <BlurredWe> it's not difficult code mind you...
22:56:43 <tennin> not quite a compiler, but sort of related
22:57:44 <dons> tree traversal is going to be very easy. I just can't imagine ever doing this kind of thing in C. it would be horrible
22:58:10 <dons> you don't use a systems proogramming language to do symbol manipulation and transformation
22:58:31 <tennin> but it's the first real Haskell program I've read through, and I think it fit that role nicely
23:02:47 <tennin> it was called PXSL, http://community.moertel.com/pxsl/
23:03:21 <BlurredWe> cool
23:03:37 <Korollary> there are some neat libraries here: http://www.di.uminho.pt/~joostvisser/software/UMinhoHaskellSoftware-1.0/index.html
23:03:44 <BlurredWe> and writing the compiler in C isn't hard, you're just implementing published algorithms, and it does things like statemanchines and top-down parsers easily
23:03:48 <tennin> though now that I've decided to try and avoid XSLT altogether I probably won't end up actually using it, oh well
23:04:54 <BlurredWe> s/statemanchines/state machines/
23:05:37 <BlurredWe> tennin: thats a good idea, for xml that has more data in it's tree structure than in it's 'content', cool even :)
23:07:01 <musasabi> dons: are the C bits in fps really needed?
23:07:44 <musasabi> dons: seing the shootout code would it not be possible to force GHC to do it.
23:07:48 <dons> not really. they could be replacced (and will be in the new packedstring)
23:08:27 <musasabi> any version of that already published?
23:19:36 <dons> musasabi, what we could do is remove the cbits from fps, if needed.
23:19:57 <dons> are you thinking of installing fps on the shooout box?
23:19:59 <dons> the cbits only provide minor things
23:20:15 <dons> and could all be replaced or removed
23:23:04 <musasabi> no shootout this time.
23:23:56 <musasabi> If you have already something please send it my way, I will make a temporary version tonight (with cpp to choose between cbits and haskell) and an another .cabal file.
23:25:11 <musasabi> -> out for the day
23:25:11 <dons> ah, I see. you just don't want the cbits for some reason?
23:25:27 <musasabi> yes, hacking them away is easier than hacking the build system or adding a dependency to an external installation of fps.
23:26:14 <dons> ok.
23:27:05 <dons> replacements can be found in here, for some of the functions: www.cse.unsw.edu.au/~dons/packedstring.tar.gz
23:27:16 <musasabi> thanks
23:27:20 <dons> ultimately though, we want to move the large fps api into that one.
23:36:53 <kolmodin_> morning!
23:37:32 <kolmodin_> I've written a compiler for javalette (mini-C) and it was 1014 LOC
23:37:45 <kolmodin_> so, good estimation, dons :)
23:38:13 <dons> ah, excelent :)
23:38:26 <dons> my mini-ml compiler to haskell was around 1200, iirc
23:39:07 <kolmodin_> this was mini-C to java assembler
23:39:07 <dons> but it had an interpreter and compiler backend. bloat!
23:39:31 <dons> cool .so that sounds very similar to what this guy was looking for.
23:43:43 <kolmodin_> I've written a compiler/interpreter for another even simpler imperative language too, it did mini-mini-C -> java and interpretion. 586 LOC
23:44:42 <kolmodin_> I don't know any languages better than Haskell to do that kind of thing
23:45:03 <dons> I agree. we should have a Haskell compiler-golf contest ;)
23:45:14 <kolmodin_> :)
23:51:07 <dons> linking lambdabot always makes my hmp3 skip momentarily. bad lambdabot!
23:51:21 <dons> linking ghc makes the universe stop, so I guess it could be worse
23:57:16 <kolmodin_> have you got enough RAM in your machine?
23:58:10 <dons> not really. 256M
23:58:33 <dons> i think it's more the memory traffic though
23:58:41 <dons> between the streaming mp3 and the linker
23:59:41 <ValarQ> dons: hows the ogg support going?
