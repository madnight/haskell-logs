00:00:18 <edwardk> ok,, then the Monad m :: m a -> a doesn't terrify me so much =)
00:00:20 <Heffalump> and obviously then questions of evaluation order (and in some cases whether evaluation of things is repeated) come into play
00:00:27 * edwardk nods
00:00:34 <edwardk> did yo adopt some sort of sane default?
00:00:47 <Heffalump> the uses of run can never escape the bit of code that you apply the TH function to
00:00:48 <edwardk> left to right or something?
00:00:54 * edwardk nods.
00:00:56 <Heffalump> yes, left to right
00:00:57 <edwardk> yeah that makes total sense.
00:01:17 <Heffalump> the implementation at tag 'initial' in that repo evaluates everything first, then runs the expression
00:01:18 <edwardk> i love the idea
00:01:38 <Heffalump> my current implementation stops lifting at an if, so you only evaluate things for it if you take the branch
00:01:38 <edwardk> a little strict monady light syntax environment.
00:01:55 <edwardk> ah good idea
00:02:01 <Heffalump> but the thing that stops lifting at the if is a separate "strategy" so you can easily choose not to use it
00:02:27 <Heffalump> (I also intend to do this for case, but that's more of a pain in terms of effort, and how to do it is obvious so I'd rather figure out how to handle functions first)
00:02:51 <edwardk> yeah
00:03:03 <edwardk> i see in the readme a bit about weirdness involving lambda functions
00:03:13 <Heffalump> yeah, cos it'll just lift everything at the moment
00:03:20 <Heffalump> so it'll just break if it pulls things out of scope
00:03:24 <edwardk> ouch
00:04:22 <Heffalump> in the current code, the traversal code itself is very brief (5 lines to recognise "run", 7 or 8 to recognise "if", and then a few more to construct the "do" expressions)
00:04:35 * edwardk nods.
00:04:39 <Heffalump> which hopefully will make new stuff to handle lambdas etc clearer
00:04:41 <edwardk> I'm starting to abuse template haskell a bit
00:05:00 <edwardk> so i can read the code, not so sure i could write all the data and typeable stuff though =)
00:05:21 <edwardk> i see you went and slapped in the MaybeT
00:05:40 <Heffalump> yeah, a bit annoying it's not in the mtl
00:05:44 * edwardk nods.
00:05:45 <Heffalump> I could just have used ErrorT () I guess.
00:05:52 <Heffalump> which is presumably why it's not there
00:05:55 <edwardk> ahhh
00:05:57 <edwardk> good point
00:08:08 <edwardk> i definitely like the idea of the light and airy monad coding syntax though
00:09:00 <edwardk> what did liyang's talk cover?
00:09:11 * edwardk alas is on the wrong side of the ocean to have made it over for anglohaskell
00:10:38 <Heffalump> he was implementing something that translates "f x y z" like I would translate "f (run x) (run y) (run z)", basically
00:10:54 * edwardk nods.
00:11:09 <edwardk> so how to handle lambda expressions in your approach?
00:11:14 <Heffalump> though with an underlying Applicative class, rather than Monad (Applicative is like Monad but has an operator of type f (a->b) -> f a -> f b instead)
00:11:22 <Heffalump> s/instead/instead of >>=/
00:11:26 <edwardk> ahh
00:11:27 <edwardk> ok
00:11:34 <edwardk> makes sense
00:11:45 <Heffalump> it's basically a case of turning the function into a monadic function if it has any runs in it
00:11:53 <Heffalump> and then finding all call sites and changing those to use run
00:12:08 <Heffalump> but that could be tricky if it's passed around as a higher order function
00:12:19 <Heffalump> and if it escapes the $(translate ...) then it's of course impossible
00:12:28 <edwardk> so basically equivalent to using ap, no?
00:12:34 <Heffalump> edwardk: yes
00:12:34 <edwardk> @type ap
00:12:36 <lambdabot> forall b (m :: * -> *) a. (Monad m) => m (a -> b) -> m a -> m b
00:12:48 <Heffalump> but I don't think you can implement >>= from ap, so Applicative is strictly weaker than Monad
00:12:56 <edwardk> yeah makes sense
00:13:59 <Heffalump> anyway, I thought it was disgusting (cos you start with a type incorrect expression, for one thing, and for another thing you have no explicit clue about side-effecting subexpressions)
00:14:00 <edwardk> so you operate on the presumption that only one monad type will be used in a $(translate ...) block?
00:14:04 <Heffalump> yes
00:14:31 <Heffalump> but I think that's ok, cos if you nest them the inner one would be translated first
00:14:42 <Heffalump> oh, but the inner one would translate any runs that should be handled by the outer one too, bah
00:14:50 <Heffalump> yeah, that's buggered
00:14:56 <edwardk> mostly just trying to think through all the semantic issues.
00:15:04 <Heffalump> I think really I need to make the translation type-directefd
00:15:07 <edwardk> there are quite a few here.
00:15:08 <Heffalump> s/directefd/directed/
00:15:11 * edwardk nods.
00:15:19 <Heffalump> but I'm not sure I have access to the types
00:17:03 * edwardk is trying to figure out if the applicative version could be fixed up more readily than the run version
00:17:24 <edwardk> they both have their warts
00:17:55 <edwardk> the nice part of the applicative form is that it has a lighter syntax.
00:18:13 <vincenz> @usrs
00:18:14 <edwardk> and if the whole idea is to shed the monadic shell, thats appealing.
00:18:15 <lambdabot> Maximum users seen in #haskell: 235, currently: 203
00:18:16 <vincenz> @users
00:18:16 <lambdabot> Maximum users seen in #haskell: 235, currently: 203
00:18:29 <vincenz> > return "blue pill" >>= replicate 203
00:18:30 <lambdabot>  ["blue pill","blue pill","blue pill","blue pill","blue pill","blue pill","bl...
00:18:56 <Heffalump> well, my main motivation is not having to refactor code when a single bit of monadic stuff is introduced
00:19:14 <edwardk> yeah
00:19:16 <edwardk> i love the idea
00:19:40 <edwardk> haskell syntax is fairly fragile. you make a small change and it ripples through your code
00:19:54 <edwardk> you have to change things in seemingly unrelated places to account for it
00:19:59 <xerox> vincenz: that's id!
00:20:31 <Heffalump> trying to translate things that are too complicated is probably a bad idea in some respects anyway, because the user should be able to easily imagine what the translation will be
00:20:38 <vincenz> xerox: what??
00:20:49 <Heffalump> otherwise we're just making a language that's really hard to understand the semantics of
00:20:51 <xerox> ?pl \f x -> return x >>= f
00:20:51 <lambdabot> id
00:21:03 <vincenz> I know
00:21:04 <Heffalump> that's a monad law, that is :-)
00:21:06 <vincenz> it just looks funkier :)
00:21:08 <xerox> Yup.
00:21:24 <edwardk> hrmm
00:22:03 <edwardk> not sure about the type information you have either
00:22:10 <edwardk> i don't think you get it at the TH stage
00:22:18 <edwardk> because you feed this into the type checker
00:22:28 <edwardk> then That goes through and infers everything as usual
00:22:41 <edwardk> you only get access to explicit annotations
00:22:46 <Heffalump> I don't think you can have badly typed expressions inside [| ... |] though
00:22:56 <Heffalump> Liyang was complaining about this
00:23:05 <edwardk> you can write whatever you want in [| |].. it just gets type checked and blows up =)
00:23:08 <Heffalump> but the information isn't made available, I think.
00:23:10 <edwardk> in the next stage
00:23:22 <edwardk> its part of that whole TH lifecycle
00:23:32 <Heffalump> it does some kind of internal consistency checking before it gets quoted, AIUI
00:23:38 <edwardk> ah
00:23:43 <Heffalump> so it doesn't get typechecked against external stuff, but it does internally
00:23:47 <vincenz> big cheer for love \o/
00:23:54 <edwardk> fiddlesticks
00:24:11 <edwardk> makes a good case for the run() annotations
00:28:25 <edwardk> heh ReaderT Rec (MaybeT (WriterT [Bind] Q)) a is a bit of a mouthful =)
00:28:45 <Heffalump> what I do with the ReaderT is a bit sick :-)
00:28:52 <edwardk> noticing
00:29:36 <roconnor> @karma+ love -- \o/
00:29:36 <lambdabot> love's karma raised to 1.
00:29:43 <Heffalump> I'm not sure if the code wasn't nicer before I introduced that
00:29:49 <Heffalump> (look back a couple of darcs patches)
00:29:49 <edwardk> heh never knew about gmap*
00:30:06 * edwardk isn't very proficient with darcs yet
00:30:14 <Heffalump> that was why I needed instances of Data
00:30:25 <edwardk> makes sense
00:30:35 <Heffalump> get into a new directory and use unpull to remove a couple of patches
00:30:41 <Heffalump> (or just do it locally then repull the patches)
00:32:39 <edwardk> switch to SYB for traversal ... (requires change to TH datatype in GHC) tha patch?
00:33:14 <edwardk> wow this used to be a lot more verbose
00:33:52 <edwardk> findruns is pretty painful
00:33:55 <Heffalump> indeed
00:34:19 <Pseudonym> sieni: I don't know what's more frightening, the cartoon or the URL.
00:34:25 <Heffalump> edwardk: when I said "wasn't nicer before", I meant before the ReaderT was introduced
00:34:36 <Heffalump> Fri Aug 11 01:56:00 BST 2006  ganesh@earth.li
00:34:36 <edwardk> ah
00:34:36 <Heffalump>   * refactor with more monad transformers
00:34:39 <edwardk> k
00:34:41 <Heffalump> it's clearly nicer with SYB
00:34:44 <edwardk> pulling it back in
00:35:16 <edwardk> stop before pulling that or after?
00:35:41 <edwardk> guessing before
00:35:47 <edwardk> since its the last
00:36:02 <Heffalump> before
00:37:07 <Heffalump> (I said last couple of patches cos I have another one locally I just realised I hadn't pushed, but it's a fairly trivial and uninteresting one)
00:37:32 <edwardk> main shift i see is the findrun <-> ifchoice stuff
00:38:03 <Heffalump> well, the definition of findruns changes quite a bit
00:38:17 <edwardk> oh yeah
00:38:46 <Heffalump> but findrun and ifchoice become more self-contained
00:38:56 * edwardk nods.
00:39:32 * edwardk really needs to get more comfortable with ReaderT and WriterT 
00:39:45 <edwardk> I more or less know the latter for log stuff and not much more
00:41:40 <Heffalump> I originally used StateT cos I didn't understand WriterT
00:41:46 * edwardk is trying to understand your use of ReaderT
00:41:53 <Heffalump> but then I looked at WriterT again before doing that if lifting, and it was much nicer
00:42:01 <edwardk> I read it, and it goes right past me
00:42:02 <Heffalump> findruns is a recursive traversal
00:42:06 <edwardk> yeah
00:42:20 <edwardk> setting up some sort of environment each time or something with the reader?
00:42:20 <Heffalump> but neither findrun nor ifchoice calls findruns directly
00:42:34 <edwardk> ok
00:42:36 <Heffalump> so I need some way to tie the recursive knot
00:42:51 <Heffalump> and I do that using ReaderT to store the "thing that should be called recursively"
00:43:03 <edwardk> heh
00:43:05 <edwardk> ok
00:43:16 <edwardk> hence Rec { unRec :: ...
00:43:19 <Heffalump> right
00:43:48 <edwardk> yeah i should probably adopt readerT a bit more
00:44:02 <edwardk> currently i do all sorts of fixpoint crap
00:44:18 <Heffalump> well, I think the fixpoint bit is nasty.
00:44:35 <Heffalump> But it saves me having to write lots of combinators that just lift things to take an extra argument
00:44:42 * edwardk nods.
00:45:25 <int-e> @where logs
00:45:25 <lambdabot> http://tunes.org/~nef/logs/haskell/ http://meme.b9.com/cdates.html?channel=haskell
00:45:47 <xerox> > runWriter (do { tell "beep"; tell "beep"; return (); })
00:45:48 <lambdabot>  Not in scope: `tell'
00:45:52 <xerox> Yack.
00:46:16 <dons> ?where stats
00:46:17 <lambdabot> http://www.cse.unsw.edu.au/~dons/irc/
00:46:59 * edwardk continues to claw his way up the rankings.
00:47:47 <Heffalump> wow, I'm 9th
00:48:08 <edwardk> ah overall
00:48:23 * edwardk needs to yammer quite a bit more to get on that chart =)
00:48:33 <dons> today was a busy day
00:50:42 <edwardk> heff: going to chew on this for a while =)
00:50:45 <Heffalump> today is only just starting :-)
00:50:50 <edwardk> heh
00:52:58 <vincenz> @where vincenz
00:52:58 <lambdabot> http://notvincenz.com/
00:53:07 <vincenz> @where+ vincenz http://www.esat.kuleuven.ac.be/~cpoucet/
00:53:08 <lambdabot> Done.
00:53:10 <edwardk> @where edwardk
00:53:11 <lambdabot> I know nothing about edwardk.
00:53:22 <edwardk> @where+ edwardk http://slipwave.info/
00:53:22 <lambdabot> Done.
00:53:28 <edwardk> neat
00:55:10 <edwardk> hrmm so how does ghc generate c, still through the stg -> c-- approach from the old papers?
01:00:39 <eivuokko> For normal compilation, yeah, it goes through stg and c--, afaiu.  (And it takes the asm from c-compiler and mods that)
01:00:54 <edwardk> hrmm
01:01:12 <edwardk> so i could hook in a javascript generator at either the stg or c-- layers?
01:01:13 <edwardk> =)
01:01:26 <eivuokko> Hmm
01:01:36 <eivuokko> Maybe you'd want to hook it to core instead?
01:01:38 <dons> Core -> Stg -> Cmm -> {Asm, C}    C -> Asm -> Mangled Asm
01:01:42 <edwardk> i could generate an stg->javascript implementation pretty easily
01:01:47 <edwardk> it wouldn't be idiomatic
01:01:50 <edwardk> but it would be easy
01:01:52 <edwardk> core is big
01:01:57 <dons> simpler would be the cmm layer,  i think
01:02:07 <edwardk> well, cmm assumes a lot of c like structure
01:02:09 <dons> since you've had your translation to imperative forms done.
01:02:10 <protontorpedo> how do haskell and clisp differ?
01:02:13 <edwardk> and javascript has a more functional feel
01:02:14 <protontorpedo> help please
01:02:19 <vincenz> protontorpedo: haskell is typed
01:02:22 <edwardk> i can implement the thunks there
01:02:23 <protontorpedo> I can not decide to learn haskell smalltalk or clisp
01:02:26 <dons> protontorpedo: check out haskell.org, seriously
01:02:32 <protontorpedo> I have been
01:02:41 <edwardk> protontorpedo: pick one, use it.
01:02:43 <dons> don't bother with smalltalk. clips is too old. try haskell.
01:02:53 <vincenz> clips :D
01:03:05 * dons had a lisp, it seems
01:03:15 <eivuokko> Hmmm.  Would c-- tailcalls be a problem for javascript?
01:03:39 <vincenz> dons: can I ask you something
01:03:46 <vincenz> dons: my latest blog article, the brief comment, too personal?
01:04:03 <dons> protontorpedo: the problem is : the questions you're asking eally require dissertations to answer properly. they're far too vague
01:05:12 <edwardk> eivuokko: i have a workaround for that with an appel trampoline
01:05:19 <edwardk> the javascript would be basically cps transformed
01:05:35 <edwardk> eivuokko: i use it for my js->js recompiler already
01:05:42 <eivuokko> Heh, cool.
01:06:02 <edwardk> build up about a thousand stackframes and throw an exception all the way down with the current function and arguments to build the stack back up
01:06:20 <eivuokko> You're right.  Then stg->js would be fairly simple, probably.
01:06:37 <edwardk> yeah, read the stg paper and basically said 'i could transcode this' =)
01:06:58 * edwardk winces at the thought of compiling ghc in javacript though =)
01:07:10 <int-e> or just go the boring  while (1) { f=f(); } route.
01:07:51 <edwardk> eiv: not sure i understand enough of the ghc-as-a-library to know how to hook in at that stage thoug
01:08:07 <eivuokko> Depending what you want, wouldn't yhc be easier?  Ghc runtime requirements seem annoying to implement.
01:08:14 <edwardk> i can build something to translate the structures but how would i get called?
01:08:40 <edwardk> yhc might, i just know more about stg and the ghc internals than i do about yhc right now and i like ghc's feature set
01:08:44 <eivuokko> I have no idea about ghc-api.
01:08:48 <edwardk> i don't know if i want to give up the features i use.
01:09:12 <edwardk> if i write a minitranslator for something else it'll probably never get used
01:09:19 <edwardk> if i can build it for ghc, market =)
01:09:23 <edwardk> well, users anyways
01:09:26 <eivuokko> :)
01:10:16 <edwardk> nice thing is i can actually ignore a good portion of the stg stuff since i can build in javascript closures
01:10:58 <edwardk> so the stg lambda expression { } \n { } -> ... i can ignore all the operational semantic content in the outer { }'s
01:11:11 <edwardk> the inner one of variables to bind i have to listen to though
01:11:50 <edwardk> the nice thing about translating stg is i always know my closure gets called with the correct arity, so i don't have any of the issues i would run into in core.
01:12:01 <edwardk> no partial applcations, etc.
01:12:14 <edwardk> so i can use single javascript functions
01:12:28 <eivuokko> Hmmm.
01:12:53 <eivuokko> Cool project :)
01:12:57 <edwardk> heh
01:13:12 <edwardk> i came on here thinking i would write javascript in haskell, now i'm moving haskell to javascript =)
01:13:18 <edwardk> or thinking about it anyways
01:13:23 <vincenz> dons: is haskell better than assembly?  How is it different
01:14:13 <dons> :P
01:14:40 <dons> @slap vincenz
01:14:41 * lambdabot slaps vincenz
01:15:59 <mnislaih> @seen Lemmih
01:15:59 <lambdabot> Lemmih is in #haskell-blah, #oasis, #haskell-overflow and #haskell. I don't know when Lemmih last spoke.
01:16:00 <roconnor> edwardk: what happened to writing a javascript haskell bytecode interpreter?
01:16:21 <edwardk> roconnor: was never going to use bytecodes
01:16:37 <roconnor> oh, maybe that was someone else.
01:16:37 <edwardk> roconnor: its a compiler
01:16:44 <edwardk> still working on that part
01:16:58 <roconnor> I thought jhc or yhc was going to be ported to javascript.
01:17:11 <edwardk> just getting distracted by various intermediate languages, and i got to the stg stuff and i thought it could be readily implemented in javascript
01:17:32 <edwardk> no idea
01:17:38 <roconnor> @what stg
01:17:38 <lambdabot> I know nothing about stg.
01:17:50 <edwardk> spineless tagless g-machine
01:17:57 <roconnor> ah
01:18:27 <roconnor> @what+ stg spineless tagless g-machine
01:18:28 <lambdabot> I know nothing about stg.
01:18:34 <edwardk> sice by then all the type checking stuff is done, it seems like a good place to hook in a weakly typed language
01:18:51 <dons> ?fact-set stg spineless tagless g-machine
01:18:52 <lambdabot> Fact recorded.
01:18:55 <dons> ?fact stg
01:18:56 <lambdabot> stg: spineless tagless g-machine
01:19:09 <roconnor> @what stgg
01:19:09 <lambdabot> I know nothing about stgg.
01:19:10 <roconnor> @what stg
01:19:11 <lambdabot> I know nothing about stg.
01:19:16 <roconnor> hmmm
01:19:17 <dons> ?help what
01:19:17 <lambdabot> what <key>. Return element associated with key
01:19:27 <edwardk> helpful =)
01:19:27 <dons> ?what lambdabot
01:19:28 <lambdabot> http://www.cse.unsw.edu.au/~dons/lambdabot.html
01:19:35 <dons> it's a synonym for @where, I think
01:19:36 <roconnor> ?help fact
01:19:36 <lambdabot> fact <fact>, Retrieve a fact from the database
01:19:43 <edwardk> ah
01:19:55 <roconnor> @where stg ;)
01:19:56 <lambdabot> I know nothing about stg.
01:20:17 <edwardk> @where+ stg http://citeseer.ist.psu.edu/peytonjones92implementing.html
01:20:17 <lambdabot> Done.
01:23:34 <edwardk> a lot of the complexities of the STG machine could be simplified if the garbage collector used by ghc was conservative
01:24:16 <edwardk> it jumpts through some pretty painful multiple stack hoops to avoid putting unboxed types where they might be mistaken for pointers by the gc system
01:24:53 <wolverian> does ghc use stg?
01:24:56 <edwardk> would want to undo this distinction if implementing in javascript
01:25:13 <edwardk> says something to that effect in the wiki on it
01:25:26 <dons> wolverian: yep. ghc's rts is an stg machine
01:25:36 <edwardk> does everything in core, spits out stg in the end then c-- from that
01:25:48 <edwardk> trying to see if javascript could plug in for c-- in most cases
01:26:00 <edwardk> though, no Integer support =(
01:26:00 <eivuokko> I can't see how to get stg out of ghc-api, besides -ddump-stg
01:26:24 <edwardk> eiv: ick, that could be problematic
01:26:34 <wolverian> dons, ah, thanks.
01:26:41 <eivuokko> I might be wrong, you might want to post ml and ask.
01:27:05 <eivuokko> Current ghc' stg has only one stack.
01:27:06 <edwardk> i think i might be able to access it from CodeGen or something
01:27:13 <edwardk> eiv: oh?
01:27:23 <edwardk> no a stack and b stack any more?
01:27:25 <edwardk> good
01:27:34 <eivuokko> Indeed.
01:27:48 <edwardk> thought it seemed like a product of the early 90s =)
01:27:59 <edwardk> glad to see they have since read modern gc literature =)
01:28:00 <eivuokko> The gc knows what locations are pointers via infotables
01:28:10 * edwardk nods.
01:29:49 <edwardk> i am debating about whether i should write an actual STG parser in javascript and then run entirely in that. or if i should generate javascript from haskell
01:30:01 <edwardk> the former has the benefit that the package might be smaller
01:30:19 <edwardk> the latter has the benefit that it can be a little simpler
01:30:19 <dons> -ddump-stg is the only way
01:30:32 <edwardk> that would tend to convince me to go the former path =)
01:30:55 <dons> using -fext-core would be safer, perhaps
01:31:14 <edwardk> what does -fext-core do?
01:31:44 <dons> dumps Core to a file. Core has a semi-standard syntax (unlike stg code)
01:31:50 <dons> and stg code is just a form of Core, anyway
01:32:07 <edwardk> core seemed bigger, stg added some other annotations
01:32:27 <edwardk> and has some interesting properties involving no partial applications i didn't see noted for core
01:32:48 <edwardk> then maybe i don't understand core very well
01:34:33 <dons> yep, its saturated core, with some gc annotations
01:34:55 <edwardk> the saturations and annotations are why i want to use it =)
01:35:08 <edwardk> easier mapping onto javascript functions
01:35:25 <dons> ok. then you have to parse -ddump-stg output
01:35:28 <edwardk> and i can treat each thunk as an object or a function
01:35:32 * edwardk sighs.
01:35:45 <edwardk> will play around
01:35:55 <edwardk> its a much much faster project than the ecma4 thing anyways =)
01:36:11 <edwardk> (famous last words)
01:38:21 <edwardk> hrmm are the function names in stg consistent across modules for linking purposes?
01:38:44 <edwardk> or will i have to mangle yet again?
01:39:19 <dons> aren't external names fully qualified?
01:39:26 <edwardk> lambdabot needs @stg =)
01:39:41 <edwardk> wanted to make sure
01:41:53 <edwardk> heh
01:41:59 <edwardk> this may get ugly =/
01:43:19 <xerox> What is stg?
01:43:27 <eivuokko> @what stg
01:43:27 <lambdabot> http://citeseer.ist.psu.edu/peytonjones92implementing.html
01:43:51 <eivuokko> Ah, spineless tagless g-machine.
01:44:23 <edwardk> heh, the annotation is already proving to be useful
01:45:08 <eivuokko> It is unfortunate that the paper is a bit old.
01:45:18 <edwardk> there are more recent ones
01:45:23 <edwardk> mostly attacking its taglessness
01:45:47 <eivuokko> Depends what you're interested in.  Actual implementation details are not up to date, even in the devel-manual thingy.
01:46:02 <edwardk> not sure the -ddump-stg is complete.
01:46:08 <edwardk> the *bitmap* annotations for instance.
01:46:15 <edwardk> yeah
01:46:20 <edwardk> i can mine source if i must
01:46:32 <eivuokko> I'd say it's a safe bet that you will.
01:48:26 <dons> yep. it doesn't inclue the GC stuff
01:48:36 <edwardk> that should be ok for me
01:48:41 <dons> thta's a fairly new addition
01:48:47 <edwardk> i can rely on javascript's gc
01:48:56 <edwardk> and freely mix 'unboxed' and 'boxed' types
01:49:12 <edwardk> coz a box becomes a thunk to me
01:49:21 <edwardk> same stg machinery
01:50:00 <edwardk> hrmm, those SRT( ) annotations just seem to indicate type signatures, not sure i need them except to link, you think?
01:50:25 <edwardk> stating what types go in each slot in the closure it appears
01:51:54 * edwardk warns any translation of this will probably suck
01:52:11 <edwardk> i just started to do the math on how much overhead goes into a string
01:52:13 <edwardk> =)
01:53:45 <therp> ghc is written in haskell right?
01:53:51 <norpan> right
01:53:53 <Cale> especially as Chars are 32 bits :)
01:54:06 <Cale> (unboxed)
01:54:08 <norpan> edwardk: 12 bytes per char
01:54:14 <edwardk> cale: well they are 16 bits in javascript anyways
01:54:21 <dons> edwardk: dcoutts has a lovely graphic of this, compared to bytestrings
01:54:32 <dcoutts> :-)
01:54:35 <dcoutts> morning
01:54:40 <edwardk> norpan: in my case it'd be worse in javascript, the memory usage per thunk will be probably closer to 40
01:54:43 <therp> simon p. jones seems to be the driving force behind ghc.. I just noticed that I recently read many functional papers with his name ontop
01:55:07 <edwardk> therp: thats pretty much the understatement of the century =)
01:55:11 <ProfTeggy> therp, Simon P. Jones?  Never heard of that guy...
01:55:23 <Cale> hehe
01:55:37 <Cale> WWSPJD?
01:55:41 <norpan> well, the century is still young
01:55:47 <xerox> Cale: probably not irc :)
01:55:56 <edwardk> xerox: he's been in here =)
01:56:01 <norpan> @users
01:56:02 <lambdabot> Maximum users seen in #haskell: 235, currently: 201
01:56:05 <norpan> bah
01:56:10 <Cale> edwardk: what's his nick?
01:56:11 <xerox> Low tide.
01:56:18 <int-e> @seen simonpj
01:56:19 <lambdabot> I haven't seen simonpj.
01:56:22 <therp> edwardk: what's the next heightening/gain of "force" then? :)
01:56:23 <norpan> i want @rock @paper @scissors commands
01:56:24 <edwardk> he came in as simonpj to invite folks to anglohaskell
01:56:37 <Cale> ah
01:56:39 <xerox> norpan: now, that's an idea! go for it :D
01:56:47 <dons> rock paper scissors eh? hmm
01:56:52 <dons> ?dice 1d3
01:56:52 <lambdabot> 1d3 => 2
01:56:58 <Cale> You see Simon Marlow in here fairly regularly
01:56:58 <xerox> ?dice 1d3
01:56:59 <dons> ?. run show dice 1d3
01:56:59 <lambdabot> 1d3 => 1
01:56:59 <lambdabot> compose module failed: IRCRaised Parse error: "show"
01:57:05 <xerox> dons wins.
01:57:26 <dons> hmm not quite. i want to wrap dice in @run
01:57:37 <xerox> show?
01:57:50 <dons> i need @quote
01:57:54 <dons> opposite of @unquote
01:58:19 <xerox> ?. run id dice 1d3
01:58:20 <lambdabot>  Not in scope: `d3'
01:59:04 <Cale> ?. run . id dice 1d3
01:59:04 <lambdabot>  Parse error
01:59:14 <dons> id doesn't quote
01:59:17 <Cale> hmm
01:59:26 * dons adds it
01:59:32 <xerox> ?. vixen . state keal
01:59:33 <lambdabot> i'm sure you can, but i don't think you should
01:59:35 <xerox> ?state
01:59:36 <lambdabot> can GMP support KealDigit? I invent KealDigit
02:00:16 <mnislaih> what type would you expect of (unsafeCoerce# mzero :: () )  ?
02:00:27 <dons> () ?
02:00:33 <mnislaih> well, it is not
02:00:40 <mnislaih> Monad m => ()
02:00:44 <mnislaih> and it is silly imho
02:00:49 <dons> ah
02:00:55 <dons> unsafeCoerce# is _unsafe_ ;)
02:01:06 <mnislaih> well, but it should have well defined semantics even so
02:01:32 <mnislaih> can this be a 'bug'  in its implementation ?
02:01:52 <mnislaih> I am considering to post it to the ml
02:02:29 <dcoutts> hah ha
02:03:11 <dcoutts> bug: unsafeCoerce# is unsafe, please fix.
02:03:12 <norpan> the type seems correct
02:03:30 <norpan> you need to know which dictionary to look up mzero in
02:03:56 <mnislaih> but you can type it later norpan, right ?
02:04:04 <norpan> how?
02:04:19 <mnislaih> you have all the instances you need in the dictionary, dont you?
02:04:50 <norpan> but mzero is polymorphic
02:05:04 <dcoutts> in a typeical impl a type does not magically have all it's instances, it only passes the ones that are needed
02:05:16 <dcoutts> since some dictionaries have to be constructed at runtime
02:05:47 <norpan> also, how owuld unsafeCoerce# choose which mzero to use here?
02:05:57 <norpan> should it magically pick?
02:06:00 <mnislaih> unsafeCoerce shouldnt choose that
02:06:35 <Cale> norpan: It's an error for it not to be determined.
02:07:28 <int-e> On the implementation level, does unsafeCoerce# do anything at all? Or does it just fool the type checker?
02:07:35 <mnislaih> it just fools the tc
02:07:47 <mnislaih> it's a no-op
02:08:11 <int-e> Ok. I thought so but didn't find confirmation for the theory. Thanks.
02:08:17 <Cale> You can write unsafeCoerce using unsafePerformIO though
02:08:17 <norpan> Cale: so here it should be an error rather than that type?
02:08:31 <mnislaih> I don't see why it shouldn't go ahead and remove the predicate constraint. After all, unsafeCoerce is about being 'unsafe'
02:08:39 <int-e> using a polymorphic reference. yes. I've seen that.
02:08:39 <mnislaih> Imposing this restriction doesn't make much sense to me
02:09:22 <Cale> norpan: oh, you gave it a type
02:09:53 <norpan> no, it was mnislaih
02:09:58 <Cale> ah, and right, the monad constraint is there
02:09:59 <norpan> i'm just commenting
02:10:05 <Cale> That makes sense
02:10:14 <mnislaih> Cale, why ?
02:10:27 <mnislaih> I still can't agree :(
02:10:32 <Cale> Because you're using mzero
02:10:44 <Cale> actually, shouldn't it be MonadPlus?
02:10:55 <mnislaih> oh idd, my fault
02:12:04 <Cale> Just because it's a function of type a -> b doesn't mean that it magically removes class constraints
02:12:28 <mnislaih> as a function that cannot be defined in Haskell
02:12:48 <mnislaih> it's up to ghc to decide what it does, 'magically' or not
02:13:06 <mnislaih> (imho)
02:13:10 <norpan> but my point is that mzero is polymorphic so you need some way to determine which instance to use
02:13:18 <norpan> and that is by the class constraint
02:13:25 <Cale> > let f x = () in f mzero
02:13:26 <lambdabot>  Add a type signature
02:13:35 <Cale> same problem there
02:13:58 <norpan> well, not by the class constraint actually, but that is an artifact
02:14:02 <Cale> > const () mzero
02:14:03 <lambdabot>  Add a type signature
02:14:31 <dons> haven't installed the new defaulting ghc yet
02:14:38 <dons> i'll have to port hs-plugins first, i suspect :(
02:16:16 <dons> ?quit add @read/show
02:17:03 <edwardk> @help read
02:17:30 <lambdabot> read "<foo>". Print <foo>
02:17:48 <dons> ?dice 1d3
02:17:49 <lambdabot> 1d3 => 2
02:17:56 <dons> ?. show dice 1d3
02:17:56 <lambdabot> "1d3 => 2\n"
02:17:59 <mnislaih> this is bad :S
02:18:02 <mnislaih> @tell Lemmih I need his help to move the stuff from the renamer into the desugarer
02:18:02 <lambdabot> Consider it noted.
02:18:07 <xerox> ?type \x -> const (+x) x
02:18:08 <lambdabot> forall a. (Num a) => a -> a -> a
02:18:13 <edwardk> @read 12
02:18:13 <lambdabot> dummy module failed: IRCRaised Prelude.read: no parse
02:18:19 <dons> ?. run init . show dice 1d3
02:18:19 <lambdabot> compose module failed: IRCRaised Parse error: "init"
02:18:20 <edwardk> @help show
02:18:20 <lambdabot> show <foo>. Print "<foo>"
02:18:23 <xerox> ?type \x -> const x (+x)
02:18:24 <lambdabot> forall a. (Num a) => a -> a
02:26:16 <edwardk> @tell emertens all the DsMonad stuff from the other day was it referencing the fact that all desugaring occurs in the DsMonad, not that the result of the list comprehension was a monad =)
02:26:16 <lambdabot> Consider it noted.
02:31:16 <edwardk> night folks
02:42:15 <kzm_> Anybody here build debian (ubuntu, really) packages with dh_haskell?
02:42:15 <lambdabot> kzm_: You have 1 new message. '/msg lambdabot @messages' to read it.
03:08:52 <shapr> <shapr> @karma+ java -- pushing programmers to Haskell \n <lambdabot> shapr's karma lowered to 21.
03:08:53 <shapr> ouch!
03:09:07 <dons> heh
03:09:26 <dons> ok, lambdabot hacking 101
03:09:30 <dons> lesson time:
03:09:46 <dons> step 1: load a lambda into the state
03:09:47 <shapr> ?
03:09:49 <dons> ?state (\xs -> case last (init xs) of '1' -> "rock"; '2' -> "paper"; '3' -> "scissors")
03:09:50 <lambdabot> (\xs -> case last (init xs) of '1' -> "rock"; '2' -> "paper"; '3' -> "scissors")
03:09:59 <dons> now, compose another plugin, with this state
03:10:05 <dons> ?. read . run . ++ . show dice 1d3
03:10:06 <lambdabot>  paper
03:10:07 <dons> ?. read . run . ++ . show dice 1d3
03:10:08 <lambdabot>  rock
03:10:09 <shapr> dons: Yeah, I have iohcc archives, but the drive is in the other box.
03:10:09 <dons> ?. read . run . ++ . show dice 1d3
03:10:11 <lambdabot>  paper
03:10:24 <shapr> dons: Wow, that's crazy cool
03:10:49 <dons> so its generating new arguments to the state program, using dice, and the result is evaluated as haskell
03:10:53 <shapr> Sounds like @lambda should be doing this sort of stuff.
03:10:57 <dons> the read and show are for stripping quotes
03:13:37 <jewel> shapr, do you know where I can find haskell 'golf' contests?
03:14:12 <shapr> jewel: If you mean the IOHCC archives, they're about half a meter from my knee.
03:14:49 <jewel> are there any similar contests (involving other languages too)?
03:14:53 * shapr wonders if he has the necessary network hardware, or if it's easier to just swap the drive into his current machine.
03:15:15 <shapr> The IOHCC was modelled on the IOCCC, so you could check for contests related to the IOCCC.
03:15:37 <shapr> I wish IDE would handle more than two drives per controller.
03:15:50 <shapr> Or that SCSI weren't so expensive.
03:16:41 <shapr> jewel: What exactly are you looking for?
03:16:54 <shapr> I had some ideas about expressiveness of text yesterday on the subway.
03:17:16 <shapr> My nokia 770 has a screen with 800x480 resolution, and I'd like to get more info onto those pixels.
03:17:48 <shapr> Has anyone measured orthographies for information content? For example, is arabic or chinese able to put more info on the same number of pixels?
03:18:06 <shapr> I've been thinking about some sort of compositional orthography that works like higher order functions.
03:18:12 <merus> shapr: There have been studies, but I haven't the sufficient caffiene concentration to remember them
03:18:28 <shapr> merus: Know any keywords I can google?
03:18:31 <merus> I seem to remember that you pay for the expressiveness in character complexity
03:18:49 <shapr> I had that hypothesis already.
03:19:01 <merus> sorry, I'm kinda useless right now :(
03:19:11 <shapr> It would make sense that chinese has the greatest info content, as well as the highest cost of learning.
03:19:27 <vegai> arabic might, since it doesn't waste space on vowels
03:19:32 <shapr> The first step along that road is something like Tengwar where the vowels are carried on top of consonants.
03:19:40 <vegai> yes, like Tengwar
03:19:41 <shapr> Arabic works like tengwar?
03:19:43 <shapr> neat
03:20:03 <merus> Don't you even pay for that with ambiguous orthography?
03:20:12 <vegai> Tolkien had very few original ideas, he was just a good ... combinator
03:20:21 <shapr> I figured that research into psychological limits of shape recognition would tell you how complex you could make a composed shape without losing understanding.
03:20:37 <merus> Then again, I know people on IRC who enjoy typing in consonants, so maybe not.
03:20:41 <shapr> I also wonder if there's research into 'most recognizable shapes' for example.
03:20:58 <shapr> Tengwar is too self-similar to be quickly read, imho.
03:21:07 <merus> shapr: Lojban did a study on most recognizable phenomes, but that's not what you want.
03:21:14 <shapr> It looks like a bunch of letters b p d etc
03:21:22 <shapr> merus: No, not that.
03:21:29 <merus> Yeah.
03:21:32 * merus thinks.
03:21:35 <shapr> But it is a useful data point into psychological recognition.
03:22:09 <shapr> I also think that zooming interfaces would help my info maximization.
03:23:05 <shapr> I'd like to have the current focussed text larger and in the center, and the figures or pictures relevant to this text should be on the corners. And those figures should zoom in when I move my focus to them.
03:23:09 <ValarQ> shapr: โฮจิ๋นเรียกทัพทั่วหัวเมื
03:23:26 * shapr switches his process encoding to ut6-8
03:23:27 <shapr> utf-8
03:23:28 <shapr> argh
03:23:34 <shapr> This flu won't go away.
03:24:26 <shapr> I also wonder if research has been done into alternate corpus structures, like vertical vs horizontal vs spiral etc
03:25:51 <shapr> I wonder if standard compression could be used on text.
03:26:14 <shapr> Something like the FIASCO compressor where compression might take time, but decompression would be easily done by the reader.
03:26:51 <ValarQ> spiral?!?
03:27:04 <shapr> ValarQ: Why not?
03:27:07 <ValarQ> isn't that a bit to fancy?
03:27:10 <shapr> Didn't BetaMax work that way?
03:27:47 <shapr> No, it wouldn't be too fancy if you have a handheld screen and you want to focus on lookahead or lookbehind, depending on which way the spiral winds.
03:27:51 <ValarQ> just because BetaMax was a very big success doesn't mean that it's a good way to store information
03:27:55 * shapr laughs
03:28:56 <shapr> Yeah, but... the reason that circles and spheres are popular in pressure and heat oriented industries is that they have even density of heat/pressure. Wouldn't it make sense to do the same thing with information?
03:29:25 <shapr> My peripheral vision is a disc around the center of my focus, I could read faster if information were spiraled.
03:29:54 <ValarQ> yeah, i believe CDs work with a similar concept, but i don't want my newspaper written in a spiral
03:30:00 <shapr> Ever tried it?
03:30:19 * shapr wonders if everyone here is kept awake at nights asking these kinds of questions.
03:30:28 <ValarQ> no, i have never found a spiralformed newspaper
03:30:34 <monochrom_> Do the same spherical thing with information?  I must be hallucinating.  I should go to sleep.
03:30:51 <ValarQ> heh
03:31:14 <shapr> There's always time to try new things!
03:31:47 <shapr> I am regularly attacked by these sorts of questions, I'm not just trying to inflate my slipping irc stats ;-)
03:32:01 * shapr is only 8th this month!
03:32:06 <ValarQ> yeah, but a CD player can rotate the media, to do that with a newspaper could be somewhat annoying
03:32:17 <shapr> A screen can rotate info too.
03:32:47 <ValarQ> yeah, but that creates a machine dependency for reading your newspaper
03:33:04 <shapr> I don't think paper will be the standard approach forever.
03:33:13 <ValarQ> then you have the issue with holding the position in the text in your head
03:33:17 <shapr> I suspect it'll go away in a few years. It's getting ever more expensive.
03:33:48 <shapr> Don't betamax tapes wrap around the outside and then feed from the inside or something?
03:34:00 <shapr> I was thinking about a moving/scrolling spiral.
03:34:12 <musasabi> orc stats?
03:34:15 <musasabi> *irc even
03:34:22 <shapr> musasabi: http://www.cse.unsw.edu.au/~dons/irc/haskell-06.html
03:34:23 <lambdabot> Title: #haskell @ freenode.org stats by dons
03:36:02 <jewel> shapr, there are lots of (indian) scripts that put vowels above or below consonants (http://www.omniglot.com/)
03:36:03 <lambdabot> Title: Omniglot - writing systems and languages of the world
03:36:29 <musasabi> shapr: seems old, as it claims noone has been kicked.
03:36:35 <ValarQ> "lambdabot's faithful follower, dons...", heh
03:36:57 <shapr> musasabi: It doesn't seem to pick up on kicks, dunno why.
03:37:20 <musasabi> at least we now know who is leading in the dons&lambdabot relationship :-)
03:38:57 * shapr grins
03:39:34 <shapr> hiya profmakx, learning Haskell?
03:39:39 <profmakx> hey
03:39:50 <shapr> Haven't I seen your name on the mailing lists before?
03:39:57 <profmakx> well yes, i will if i finally find the time and a nice project
03:40:01 <profmakx> i dont think so
03:40:09 <shapr> Oh ok. Do you have any questions?
03:40:28 <profmakx> not yet
03:40:39 <profmakx> but i will have em
03:41:23 <shapr> profmakx: Ok, feel free to ask here when you get some questions.
03:41:57 <profmakx> yeah. I wonder if i should implement some Group-Theory algorithms in haskell just for fun
03:44:04 <ricky_clarkson> shapr: I don't know why, but I was just walking down the road and wondered whether you use a unicycle to get about, or just for fun in a small area.
03:44:04 <shapr> It would be neat.
03:44:15 <shapr> ricky_clarkson: Both
03:44:25 <ricky_clarkson> How often do you fall?
03:45:01 <shapr> It depends. In normal riding I don't fall, much like bicycling. When I'm trying to stretch my skills, I figure I'm not trying very hard if I don't fall.
03:45:18 <shapr> I rode my unicycle at AngloHaskell this past weekend - http://www.undecidable.org.uk/edwin/photo/anglohaskell.php
03:45:20 <lambdabot> Title: AngloHaskell
03:45:46 <shapr> This appears to be the most popular picture of me from anglohaskell - http://www.undecidable.org.uk/edwin/photo/anglohaskell.php?photo=IMG_0390.jpg
03:45:47 <lambdabot> Title: AngloHaskell
03:46:22 <shapr> I got most of his hair chopped off yesterday so I don't look like that now.
03:46:27 <shapr> s/his/my
03:46:37 * shapr tries to smack himself awake.
03:46:51 <shapr> ricky_clarkson: If you're ever in the same town with me, I'd be happy to teach you how to unicycle.
03:47:27 <edwinb> unicycling looks fun!
03:47:41 * ricky_clarkson probably needs the training wheel.
03:48:01 <ricky_clarkson> shapr: I don't get out of the North West much.
03:48:03 <profmakx> like about 3 extra wheels ;)
03:48:17 <profmakx> do you all live in the UK?
03:48:27 <ricky_clarkson> Manchester.
03:48:32 * ricky_clarkson swears at everyone by accident.
03:49:27 <ValarQ> shapr: is that some spiralshaped text on that shirt? :)
03:50:32 <ricky_clarkson> ValarQ: He obviously designed it while riding. ;)
03:51:11 * shapr grins
03:51:25 * xerox lunches
03:51:31 <ValarQ> :)
03:51:36 * shapr launches!
03:51:40 <shapr> whee!
03:51:49 <shapr> Anyway, I live in Stockholm for the moment.
03:51:50 <ricky_clarkson> shapr: Does the name Slava Pestov mean much to you?
03:52:05 <shapr> ricky_clarkson: Sure, yeah.
03:52:08 <xerox> Forth!
03:52:16 <shapr> Author of Factor, maintainer (and author?) of jEdit, etc
03:52:29 <shapr> Productive guy in the area of concatenative languages.
03:52:47 <ricky_clarkson> He was talking about the future of programming languages moving away from a text representation, i.e., you manipulate an AST directly with, say, a graphical tool.
03:53:19 <shapr> I disagree slightly, I think you'll manipulate with voice more than anything else, and display graphically.
03:53:38 <ricky_clarkson> Well, the graphical tool is just an example, doesn't matter what you actually use.
03:53:50 <ricky_clarkson> He is the author of jEdit, but not the maintainer now, afaik.  A group of eejits maintain it (I say this because the plugins linked to from jedit.org have a tendency to crash).
03:54:38 <ricky_clarkson> He could only think of one example of this in existence, and it was a toy.  Do you know of anything?
03:56:06 <vincenz> Anyone here from UK?
03:56:06 <vincenz> l
03:56:36 <ricky_clarkson> vincenz: Manchester.
03:57:15 <vincenz> know any good medical schools in UK?
03:57:20 <profmakx> the idea of editing an AST directly sounds interesting, but i am having trouble imagining such a tool at the moment
03:57:45 <ricky_clarkson> profmakx: Me too.
03:58:18 <profmakx> we had such an idea for a source-code revision system
03:58:22 <profmakx> to overcome formatting issues
03:58:31 <profmakx> i.e. storing only an ast
03:58:36 <ricky_clarkson> Those can be overcome by having a code reformat done on commit.
03:58:53 <profmakx> we settled with this too ;)
03:58:59 <gds> AST plus metadata (for comments, docs, etc) presumably...
03:59:38 <profmakx> hmm there are quite a lot "graphical programming languages" but i doubt it is like editing an AST
03:59:39 <ricky_clarkson> Could you reasonably represent a program in a relational database?
04:00:03 <ricky_clarkson> profmakx: Any that are complete, fsvo complete?
04:00:04 <norpan> i couldn't :)
04:01:00 <profmakx> fsvo == "for some value of"?
04:01:03 <ricky_clarkson> Yes.
04:01:33 <norpan> editing the haskell ast or even better with some connection between bindings should be a nice project to research
04:01:42 <shapr> ricky_clarkson: Was his one example Aardappel?
04:02:07 <ricky_clarkson> No.  I could find it by grepping logs, but I don't remember it being that odd a name.
04:02:31 <shapr> There are many graphical programming languages. Check out StarLogo, Aardappel, and various languages by Wouter van Oortmerssen.
04:02:47 <shapr> Also check out graphical dataflow languages.
04:02:54 <profmakx> well i thought more of LavVIew or similar
04:03:14 <ricky_clarkson> Wow, Gmail took an email thread about teaching tutorials on bash and Perl, and gave me sponsored links to "Potty Training in 3 Days" etc.
04:03:27 <norpan> haha
04:05:22 <ricky_clarkson> http://rifers.org/paste/content/paste/1456/image
04:06:10 <kzm_> dons: about the . plugin - is there a way to add parameters to the first plugin?
04:06:26 <kzm_> parentheses, for instance?
04:08:38 <profmakx> hmm, does anyone know if anybody did Term Rewrtigin (Knuth Bendix) using haskell? or is it considered a "bad idea" doing such things in haskell ;)
04:17:34 <norpan> why should it be a bad idea to do Term Rewrtigin
04:17:52 <profmakx> I dont know
04:17:57 <profmakx> thats why i ask
04:18:04 <profmakx> i am not too experienced using haskell
04:18:36 <norpan> i would say it's not a bad idea to try anything in haskell
04:19:01 <Dylan> term rewriting is not hard with pattern matching and what have you.
04:33:41 <gds> profmakx: I think the @pf lambdabot plugin uses term rewriting, doesn't it?
04:33:53 <int-e> @pf
04:33:54 <lambdabot> (line 1, column 1):
04:33:54 <lambdabot> unexpected end of input
04:33:54 <lambdabot> expecting white space, natural, identifier, lambda abstraction or expression
04:34:14 <gds> @pf \x y -> x ++ y
04:34:15 <lambdabot> (++)
04:34:28 <int-e> @pl f x y = y + x
04:34:29 <lambdabot> f = (+)
04:34:31 <gds> @pf \x y -> x ++ " and then " ++ y
04:34:31 <lambdabot> (. (" and then " ++)) . (++)
04:34:50 <xerox> I like concat [x,"and then",y]
04:34:58 <int-e> @help pl
04:34:59 <lambdabot> pointless <expr>. Play with pointfree code.
04:43:23 <profmakx> okay, i will look at it
04:48:07 <dons> kzm_: no, there's currently no way. however.... you can put one parameter in the state plugin (with ?state), and then use that to simulate a second argument, somewhat, with ++ and run
04:48:31 <dons> here, we want to produce two arguments to ?run:
04:48:36 <dons> ?state (\xs -> case last (init xs) of '1' -> "rock"; '2' -> "paper"; '3' -> "scissors")
04:48:36 <lambdabot> (\xs -> case last (init xs) of '1' -> "rock"; '2' -> "paper"; '3' -> "scissors")
04:48:43 <dons> so put the first in the state
04:48:47 <dons> ?. read . run . ++ . show dice 1d3
04:48:48 <lambdabot>  scissors
04:48:56 <kzm_> Ah, so that's where 'state' comes into play.
04:49:01 <dons> and then ++ combines the result of 'show dice' with the state, and passes the result to run
04:49:08 <kzm_> Yeah, I saw the example.
04:49:13 <xerox> ?state (\xs -> case last (init xs) of '1' -> "rock"; '2' -> "paper"; '3' -> "scissors")
04:49:13 <lambdabot> (\xs -> case last (init xs) of '1' -> "rock"; '2' -> "paper"; '3' -> "scissors")
04:49:15 <dons> so think of 'state' as a single bound variable you get to use
04:49:15 <kzm_> Only one global state, no?
04:49:16 <xerox> ?. read . run . ++ . show dice 1d3
04:49:18 <lambdabot>  scissors
04:49:22 <xerox> Even!
04:49:32 <dons> and ++ is how you can read it
04:49:45 <dons> this is _highly_ suboptimal for scripting lambdabot ;)
04:50:06 * dons -> dinner
04:50:54 <profmakx> i wonder if i get lambdabot to build finally
05:03:04 <dons> profmakx: let me know what the problem is. its supposed to be pretty straightforward now
05:03:27 <profmakx> i tried it a few months ago and it did not work
05:03:34 <profmakx> i will try again this evening
05:03:52 <profmakx> had something to do with packages not being installed or installable
05:26:57 <kzm_> Time for a silly and irrelevant question?  Good, I knew you would.  As 'make' prints the commands it runs, is there any way to highlight them, to distinguish from command output?
05:39:45 <xerox> factors n = do { p <- primes; if n `mod` p /= 0 then [] else return p `mplus` factors (n `div` p) }
05:39:49 <xerox> Why does it hang?
05:41:03 <ibid> what's primes?
05:42:19 <gds> @type primes
05:42:21 <lambdabot> Not in scope: `primes'
05:42:35 <gds> I presume it's an infinite list of prime numbers.
05:42:45 <xerox> Yup.
05:42:52 <xerox> primes = 2:3:[n | n <- [5,7..], all (\p -> n `mod` p /= 0) (takeWhile (\p -> p*p <= n) primes)]
05:43:48 <ibid> i wanted to see if it depends on factors for some reason :)
05:43:56 <norpan> xerox: should that really be return in the end there?
05:44:06 <xerox> norpan: I am not sure.
05:44:30 <norpan> ah, my fault, i read it wrong
05:44:35 <xerox> Oh what do you mean?
05:44:37 <xerox> Ah, okay.
05:50:37 <ibid> xerox: try with primes = 2:3:undefined and then try factors 3 and factors 5. this might give some insight, or maybe not
05:51:17 <xerox> > let primes = 2:3:undefined; factors n = do { p <- primes; if n `mod` p /= 0 then [] else return p `mplus` factors (n `div` p) } in factors 3
05:51:18 <lambdabot>  Undefined
05:51:21 <xerox> > let primes = 2:3:undefined; factors n = do { p <- primes; if n `mod` p /= 0 then [] else return p `mplus` factors (n `div` p) } in factors 5
05:51:22 <lambdabot>  Undefined
05:51:44 <ibid> hm
05:51:52 <ibid> i get
05:51:54 <ibid> factors 3                                                                      [3*** Exception: Prelude.undefined
05:52:09 <ibid> (imagine a linebreak:)
05:53:36 <xerox> It doesn't shortcut for some reason
05:53:48 <int-e> > let primes = 2:3:undefined; factors 1 = mzero; factors n = do { p <- primes; if n `mod` p /= 0 then mzero else return p `mplus` factors (n `div` p) } in factors 3 :: [Int]
05:53:49 <lambdabot>  Undefined
05:54:03 <ibid> maybe look at how instance Monad [] is defined in ghc libs?
05:54:13 <ibid> if there are strictness issues
05:54:49 <norpan> well, you don't have a stopping condition
05:54:52 <norpan> do you?
05:54:59 <int-e> oh wait. right.
05:55:12 <int-e> there's no 'cut' in MonadPlus
05:55:48 <norpan> you need to stop looking through primes when you are done
05:56:15 <int-e> (that's Prolog's cut operator)
05:56:23 <norpan> that is, when you reach 1
05:56:24 <xerox> That's probably what I want :)
05:56:35 <xerox> norpan: ah! That's an insightful idea.
05:57:01 <int-e> I added 1 as a base case, but it will never stop the p <- primes 'loop' the way it is.
05:57:12 <xerox> Adding `factors 1 = mzero' doesn't help.. hrrrmpf
05:57:28 <xerox> Oh right, sorry.
05:57:36 <int-e> it does help, you get the error at a different position now ;)
05:57:54 <norpan> well, it needs to be there though
05:59:33 <kzm_> @karma + static typing
05:59:33 <lambdabot> + has a karma of 0
05:59:42 <kzm_> @karma+ static_typing
05:59:42 <lambdabot> static_typing's karma raised to 1.
06:00:07 * kzm_ just refactored the world, and hey, it just keeps on working (when the type checker is satisfied, that is)
06:00:12 <dons> :)
06:03:36 <kzm_> Anybody read http://www.defmacro.org/ramblings/not-ready.html ?
06:03:38 <lambdabot> Title: defmacro - Why Exotic Languages Are Not Mainstream
06:04:17 <dons> yeah
06:04:19 <dons> pondering
06:04:24 <kzm_> Is it really fair to complain about Graphics.SOE not working too good?  I'd be more worried if it was WxHaskell or GtkHs (and even more so if I actually used GUIs)
06:04:47 <dons> I think it was suggested that he use Gtk2Hs, but didn't . His loss
06:05:25 <kzm_> The problem is that influential textbooks require homebrew libraries, I guess.
06:05:29 <dons> we don't have enough windows developers
06:05:44 <kzm_> (Of course, at the time, and all that)
06:06:30 <kzm_> Yeah, I wish somebody would port my code to Windows.  And maintain the port.  And give me the occasional back massage. :-)
06:06:49 <dons> so, what's the conclusion here? a language isn't mainstream because it isn't supported well on windows? but the windows people aren't contributing the code.. so its not going to be mainstream ...
06:07:06 <dons> luckily ndm and eivuokko have been pushing things a bit
06:07:16 <dcoutts_> he missed out when quoting me that there was another SOE impl available
06:08:00 <merus> He's definately looking for a bone to pick
06:08:02 <merus> =/
06:08:04 <profmakx> most of the people expect things to run "out of the box" i suppose
06:08:14 <profmakx> especially windows-people
06:08:19 <merus> windows--
06:08:42 <dons> yeah. the kind of people who contribute the least code, but demand the most :/
06:08:50 <profmakx> jep
06:09:16 <kzm_> @karma- windows
06:09:16 <lambdabot> windows's karma lowered to -1.
06:09:23 <profmakx> ;)
06:09:27 <profmakx> not even low enough -.-
06:09:41 <dons> ah well, the conclusions are fairly vacuous, in this case. he got his code to work, and the ide wasn't quite what he was looking for. not sure what that says about the language itself
06:09:54 <merus> Oops, forgot I was on #haskell.
06:10:30 <profmakx> so, whats your IDE?
06:10:57 * merus needs suggestions for an IDE on OS X :)
06:11:02 <dons> ide? /bin/sh ?
06:11:10 <profmakx> ;)
06:11:53 <dons> profmakx: you're not related to profteggy are you? :)
06:11:54 <kzm_> Hey, why not take a step out of the 70's and use Emacs?  And enjoy the wonders of the 80's instead.
06:12:08 <profmakx> no dons
06:12:18 <SamB_XP> kzm_: or even both!
06:12:21 <profmakx> whats 80s then?
06:13:25 <kzm_> Emacs, of course.
06:13:44 <eivuokko> What needs to be done in Windows this time?
06:14:20 <kzm_> format C:, then install...oh, wait, you're being serious.
06:14:34 <eivuokko> I am just interested, and used to flames, so no prob.
06:14:43 <kzm_> :-)
06:14:44 <kzm_> Sorry.
06:15:26 <profmakx> eivuokko: Write an IDE for Haskell thats like Visual studio only better
06:15:26 * kzm_ has done his commits for today, and is just obnoxiating away the last minutes...
06:15:30 <profmakx> and with less people
06:15:36 <profmakx> you have 1 week
06:15:54 <roconnor> there's a karma- command!
06:15:56 * ricky_clarkson points at Notepad.
06:16:22 <roconnor> @karma- c++
06:16:23 <lambdabot> c++'s karma lowered to -1.
06:16:25 <roconnor> @karma- c++
06:16:26 <lambdabot> c++'s karma lowered to -2.
06:16:26 <roconnor> @karma- c++
06:16:27 <lambdabot> c++'s karma lowered to -3.
06:16:28 <roconnor> @karma- c++
06:16:28 <lambdabot> c++'s karma lowered to -4.
06:16:34 <profmakx> o.O
06:16:34 <roconnor> I feel better now.
06:16:40 <kzm_> But the converse is also true:
06:16:40 <profmakx> let me guess
06:16:43 <profmakx> templates?
06:16:44 <kzm_> @karma+ c--
06:16:44 <lambdabot> c--'s karma raised to 1.
06:16:46 <kzm_> @karma+ c--
06:16:46 <lambdabot> c--'s karma raised to 2.
06:16:49 <kzm_> :-)
06:17:06 <madpickle> @karma C
06:17:06 <lambdabot> C has a karma of 0
06:17:10 <madpickle> yes
06:17:14 <kzm_> Sounds about right.
06:17:15 <madpickle> and C would maintain the equilibrium
06:17:40 <roconnor> http://r6.livejournal.com/23916.html
06:17:42 <lambdabot> Title: r6: Programming in C++ is Not Humanly Possible
06:18:18 <kzm_> eivuokko, anyway - I don't use windows, but two items from the list is a dynamically linked GMP (or a non LGPL'ed replacement), and a working SOE Graphics.
06:18:59 <eivuokko> Is SOE really that important?
06:19:27 <kzm_> It was for this blogging guy.
06:19:28 <merus> "I am also not nearly smart enough to program in Haskell." -- Amen.
06:19:38 <eivuokko> Íf you mean HGL or whatever it is, iirc it was pretty....80s code.
06:19:56 <norpan> @karma c++
06:19:57 <lambdabot> c++ has a karma of -4
06:20:15 <kzm_> I guess the problem is that SOE (the book) is commonly used, and requires the library for examples.
06:20:34 <profmakx> excuse my ignorance but what is meant by SOE?
06:20:39 <kzm_> Which means that people will try to use SOE, and if it doesn't work...
06:20:44 <kzm_> SOE = School of Expression
06:20:53 <kzm_> textbook, with its own graphics library.
06:20:53 <roconnor> ?fact SOE
06:20:54 <lambdabot> I know nothing about soe
06:20:56 <eivuokko> As for GMP, dynamically linking it is very dubious, as GHC grabs the allocator.  It is another nest of problems in itself.  Hopefully the Integer will get resolved soonish.
06:21:00 <roconnor> ?where soe
06:21:00 <lambdabot> http://haskell.org/soe/
06:21:06 <kzm_> And if anybody has my copy, please return it ASAP!
06:21:25 <SamB_XP> heh
06:21:28 <SamB_XP> mine too!
06:21:39 <profmakx> ah ive seen that at the library
06:21:43 <SamB_XP> though I know I didn't lend it to any of you ;-)
06:22:05 <kzm_> Right, that's (GMP's allocator) another problem.  But I think it was brought up because of licensing issues.
06:22:14 <eivuokko> Yeah, indeed.
06:22:16 <kzm_> (Not that either bothers me much at this stage)
06:23:01 <eivuokko> It is the reason I am not using haskell for production code. :-)
06:23:37 <kzm_> You FFI to GMP-using C code, then?
06:23:42 <profmakx> yeah vfor production code use C++
06:23:43 <profmakx> *runs*
06:24:01 <kzm_> Careful, or you'll inherit the language's karma.
06:24:09 <eivuokko> kzm_, No, I can't stand LGPL without DLL, and I need multiple haskell DLLs in one program...meaning two ghc heaps.
06:24:31 <eivuokko> I actually do, almost all of the code is C++.
06:25:35 <kzm_> Sounds cumbersome with the current situation, yes.
06:25:51 * kzm_ looks at his watch, and realizes he must run.
06:26:08 <eivuokko> Have fun.
06:28:47 <dcoutts_> musasabi, JaffaCake didn't like '?'. We can do without it.
06:29:06 <kzm_> Hah.  Somebody else is picking up children, I can entertain you with my insights for several minutes more.
06:30:04 <kzm_> As for IDE, anybody look at Yi?
06:30:37 <dons> I think that's not really an option.
06:31:08 <dons> well, maybe it is, modulo more code being written
06:31:13 <norpan> Yi looks promising
06:31:34 <dons> it seems to keep getting a few patches a week, so that's good. people like hacking on it.
06:31:47 <Lemmih> I think there are too many unresolved issues hindering a proper IDE for Haskell.
06:31:49 <profmakx> if only i were into application programming... but i am not -.-
06:32:20 <kzm_> I looked at EclipseFP at some point, but the interface is just too confusing.
06:32:52 <kzm_> Perhaps if I got somebody to show me how Eclipse is supposed to work, at least I'd be able to identify the things that aren't working correctly.
06:32:58 <SamB_XP> Lemmih: do you think 6.6 will help?
06:33:00 <eivuokko> Lemmih, what should be resolved?
06:33:07 <Lemmih> SamB_XP: Nope.
06:34:24 <ricky_clarkson> Eclipse seems to work for other languages.  There is a Python, a Ruby, a C/C++ and (obviously) a Java IDE plugin for it already.
06:34:44 <ricky_clarkson> I know what you mean though, it does seem impenetrable but I think it's a matter of reading the right documentation.
06:34:47 <SamB_XP> ricky_clarkson: but, do they work?
06:34:49 <kzm_> I'm sure it works, I just don't have any clue as to how :-)
06:34:52 <wolverian> ricky_clarkson, too bad its editor sucks.
06:34:54 <ricky_clarkson> Dunno.  I use the Java one only.
06:34:54 <dons> so the eclipse users should improve the haskell support.
06:34:59 <Lemmih> ricky_clarkson: For some definition of "work".
06:35:05 <SamB_XP> ricky_clarkson: I mean do they help people write code?
06:35:10 <kzm_> dons, and vice versa :-)
06:35:14 <ricky_clarkson> SamB_XP: Sure, for Java at least.
06:35:19 <SamB_XP> well yeah
06:35:25 <SamB_XP> I gathered it is helpful at least for
06:35:27 <SamB_XP> Java
06:35:44 <SamB_XP> ... silly enter key ...
06:36:03 <ricky_clarkson> My ' key is next to my enter key, I keep hitting it.
06:36:20 <Lemmih> eivuokko: Ideally, something like Proxima would be perfect. However, implementing a proxima-style system is very tricky.
06:36:29 <SamB_XP> well. I wasn't trying to use that key, though
06:36:54 <SamB_XP> maybe I was going for the Shift key
06:37:11 <dcoutts_> Lemmih, do you mean Pivotal?
06:37:30 <kzm_> Since I only have small projects, I get by with /bin/sh (well, zsh) and Emacs.  I guess that is true for a lot of Haskell users - so while there is a vague feeling of needing an IDE to impress the crowds, the actual demand is perhaps not so strong.
06:37:36 <SamB_XP> eek, note to self: never leave time machine in junk yard
06:37:39 <Lemmih> dcoutts_: http://www.pivotal.com/?
06:37:45 <SamB_XP> garbage dump would be a better place, probably
06:37:58 <SamB_XP> http://zortic.com/d/20060210.html
06:37:59 <lambdabot> Title: Zortic - Friday, February 10, 2006
06:38:10 <kzm_> A similar argument for Windows support, I guess.  You need to bootstrap a community for the ball to start rolling.
06:38:17 <dcoutts_> Lemmih, http://www.cs.kent.ac.uk/projects/pivotal/index.html
06:38:19 <lambdabot> Title: Pivotal home page
06:38:26 <ricky_clarkson> kzm_: Maybe you could just build something on emacs then, like JDEE aimed for.
06:38:41 <SamB_XP> ricky_clarkson: heh
06:38:51 <SamB_XP> those who want an IDE probably mostly do not like Emacs anyway
06:39:05 <SamB_XP> a few might just need *more*
06:39:13 <kzm_> You mean, like, dynamic typing, dynamic scope, etc?  Hey, I use Haskell to get away from all that!
06:39:30 <ricky_clarkson> I know, rewrite emacs in Haskell.
06:39:34 <Lemmih> dcoutts_: Pivotal doesn't even try to be an IDE.
06:39:37 <ricky_clarkson> Chuck Norris could do it in his lunch break.
06:39:44 <SamB_XP> ricky_clarkson: heh
06:39:54 <SamB_XP> well, we have Yi.
06:39:56 <ricky_clarkson> Emaskell.
06:40:01 <SamB_XP> but that isn't exactly Emacs
06:40:44 <SamB_XP> but figuring out how to replace elisp with Haskell is not trivial, especially when the maintainer is a vi user ;-)
06:42:37 <SamB_XP> oh, and few Haskell users are elisp hackers in the first place, afiak...
06:46:28 <dons> and we don't really have a proper embeddable haskell
06:46:43 <SamB_XP> what would that be?
06:46:50 <dons> but i agree, being a vim user doesn't help create the new emacs. you sort of end up with the new vim, strangely
06:46:52 <SamB_XP> what features would it need?
06:46:57 <SamB_XP> heh
06:47:04 <SamB_XP> "strangely"
06:47:11 <dons> ideally you'd run the whole thing on top of ghci, yeah?
06:47:28 <dons> so you could query any part of the running program, with new haskell code, at any time
06:47:28 <xerox> Embedding Haskell? This is the Internet Age--just write a IRC interface for your program, and talk to lambdabot.
06:47:34 <SamB_XP> eh. ideally you'd mention a few features it would need
06:48:28 <SamB_XP> hmm, what sort of querying?
06:48:47 <dons> well, you can write some elisp to inspect bits of emacs' state
06:48:54 <dons> you can't do that in yi or lambdabot
06:48:57 <dons> well, not very easily
06:49:12 <SamB_XP> hmm
06:49:13 <SamB_XP> true
06:49:20 <dons> you start with an interpreter, then the application gets proper haskell extensibility
06:50:04 <gds> So, some editing macros for ghci then? Start with readline, and move from there?
06:50:05 <SamB_XP> I still don't get what you mean...
06:50:24 <ricky_clarkson> SamB_XP: Have you ever played with emacs lisp?
06:50:31 <SamB_XP> yeah.
06:50:59 <SamB_XP> but I don't get what dons thinks the "embeddable Haskell" needs to do
06:51:39 <dons> its a library, providing an interpreter, over which you hoist an application, as well as being able to add new bits of code on the fly.
06:51:56 <dons> so you can customise the thing any way you like
06:52:36 <xerox> Much like a lisp image?
06:53:01 <dons> i presume so
07:02:14 <mnislaih> Lemmih: did you see the mail ?
07:03:16 <Lemmih> I haven't read it yet. I'll look at it when I return from the post-office.
07:03:59 <mnislaih> ok, I need to know your thoughts and Simon's on this
07:04:25 <mnislaih> at least of one of the two of you
07:13:01 <dcoutts_> Igloo, any opinion on this configurations debate?
07:22:29 <ndm> @seen dons
07:22:29 <lambdabot> dons is in #oasis, #haskell-overflow and #haskell. I last heard dons speak 29 minutes and 28 seconds ago.
07:23:15 <dons> @seen ndm
07:23:16 <lambdabot> ndm is in #haskell-overflow, #haskell-blah and #haskell. I last heard ndm speak 46 seconds ago.
07:23:34 <ndm> dons: have you seen the defaulting proposal stuff by Olaf, for Haskell'
07:23:34 <lambdabot> ndm: You have 1 new message. '/msg lambdabot @messages' to read it.
07:23:49 <dons> oh hmm. rings a bell.
07:24:02 <dons> why?
07:24:41 <ndm> because you were blogging about defaulting
07:24:46 <dons> ah :)
07:24:49 <dons> so I was.
07:24:57 <ndm> i just got back from a week off, so still catching up on blogs :)
07:25:15 <dons> yeah, the issue for lambdabot's been fixed anyway. thanks to simonpj's patch
07:25:35 <dcoutts_> yeah, he was quick
07:26:19 <dons> i think the key is to keep a list of possible features you'd like, and then when simon works on that area of the compiler, send in the proposal
07:26:28 <dcoutts_> heh
07:26:42 <dons> hopefully the module is still open, and in the simon-brain-cache, increasing the changes for a patch-hit ;)
07:26:43 <dcoutts_> simon/the simons
07:26:50 <dons> chances.
07:27:02 <dons> yes. Simon^2
07:30:25 * dons `sleep` (until morning)
07:30:53 <Igloo> dcoutts_: If you give me a pointer to a summary then I'll try to read it this weekend
07:31:07 <dcoutts_> Igloo, it's all on the cabal-devel list
07:31:23 <dcoutts_> Igloo, starting with simon's configurations patch & semantics
07:31:32 <dcoutts_> and then moving onto various issues over the semantics
07:31:41 <dcoutts_> and endless new proposals
07:31:49 <dcoutts_> well, variations
07:32:09 <dcoutts_> Igloo, I'd like your input as another packaging person
07:32:20 <dcoutts_> I feel our problems are underrepresented
07:32:55 <dcoutts_> my main issue at the moment is about automatically picking up dependencies from the environment
07:56:58 <emertens> good morning
07:56:58 <lambdabot> emertens: You have 1 new message. '/msg lambdabot @messages' to read it.
08:21:51 <agocorona> I use Visual Haskell, but a decent AJAX IDE would be the best.
08:22:39 <emertens> that would be pretty amazing if there was a haskell ide online
08:22:45 <emertens> where people could try out programs
08:22:50 <emertens> without installing a thing
08:22:58 <agocorona> yes, yes
08:22:58 <emertens> run with restrictions similar to lambdabot
08:23:06 <norpan> lambdabot is online
08:23:24 <emertens> I'm talking about multi-line text input
08:23:36 <emertens> with auto-completion, and error underlining as you type :)
08:23:41 <agocorona> I also want to develop remotely
08:23:56 <emertens> if I knew how to do that...
08:24:01 <agocorona> and debugging out of the box
08:25:04 <agocorona> i mean, debugging for newbies. we, the experts, dont need debug ;-)
08:25:39 <agocorona> emertens: how?
08:26:18 <emertens> I don't understand your question.
08:27:02 <agocorona> emertens: if I knew how to do that...
08:27:23 <emertens> Yeah.. If I knew how to write that AJAX application, I would
08:47:01 <LordBrain> i pulled an all nighter on Yi
08:47:06 <LordBrain> :)
08:48:02 <LordBrain> In addtion to a bunch of other less visible upgrades...
08:48:30 <LordBrain> Yi now has Visual Mode!
08:48:40 <profmakx> -.-
08:49:29 <LordBrain> :)
08:50:19 <LordBrain> There's still a few things to polish up tho, sometimes the highlight vanishes misteriously, I need to fix the psuedo-modeline at the bottom of the screen, and cut should include the cursor...
08:50:38 <LordBrain> mysteriously... heh
08:51:39 <abcde`> Everyone likes flashy screenshots... :)
08:56:20 <LordBrain> ok
08:56:48 <LordBrain> i'll make one after i finish these last things...
08:57:09 <LordBrain> oh heck.. i'll make one now...
08:59:42 <LordBrain> is there a simple xprogram for doing that, that i can just apt-get in debian?
09:01:23 <abcde`> for what?
09:01:33 <LordBrain> screen shot... i found one
09:01:42 <abcde`> ImageMagick has `import'
09:01:44 <abcde`> ah
09:05:09 <LordBrain> http://urz.jerkface.net/yi/YiVisualMode.jpg
09:05:25 <LordBrain> hmmm seems the quality isnt htat great huh
09:06:01 <sjanssen> .jpg is probably a poor choice for a screenshot
09:06:02 <abcde`> ooo fancy
09:06:06 <sjanssen> .png should be better
09:06:46 <LordBrain> ok
09:10:29 <LordBrain> http://urz.jerkface.net/yi/YiVisualMode.png
09:12:42 <LordBrain> its a yucky domain name i know... belongs to a friend heh
09:13:15 <abcde`> it's not one of the fastest of servers...
09:13:35 <mauke> o see the stars that shine above / sit with me and we'll hold hands / behold the glory that is nature / gonna fuck me a bullfrog / one of the big ones with goofy eyes
09:13:37 <int-e> hmm. imagemagick would be a good idea. convert YiVisualMode.png Yi.png (lossless) compresses the thing to 64kb
09:13:53 <LordBrain> well its my computer
09:14:06 <LordBrain> heh.. that i'm sitting at... makes it very convenient.
09:15:09 <LordBrain> it still isnt very clear tho
09:16:31 <int-e> (same screenshot: http://int-e.home.tlink.de/haskell/Yi.png)
09:16:48 <mauke> whoa
09:16:54 <mauke> that's a lot faster
09:17:18 <svref> How do I find the first element of a list that satisfies some condition (say being (>5))?
09:17:50 <mauke> @type (head .) . filter
09:17:55 <lambdabot> forall a. (a -> Bool) -> [a] -> a
09:17:55 <LordBrain> @type find
09:17:57 <lambdabot> forall a. (a -> Bool) -> [a] -> Maybe a
09:18:39 <svref> are you all talking to me? :)
09:18:44 <mauke> yes
09:18:47 <int-e> mauke: 64 kb instead of 2 MB :)
09:18:50 <sjanssen> @type \p -> foldr (\x -> if p x then const x else id) undefined
09:18:52 <lambdabot> forall a. (a -> Bool) -> [a] -> a
09:19:05 <sjanssen> @pl \p -> foldr (\x -> if p x then const x else id) undefined
09:19:06 <lambdabot> flip foldr undefined . flip flip id . (`ap` const) . (if' .)
09:19:41 <LordBrain> lol
09:20:02 <LordBrain> i didnt know the if.. then.. stuff could be reduced
09:20:22 <norpan> @type if'
09:20:23 <lambdabot> Not in scope: `if''
09:20:42 <mauke> @index if'
09:20:43 <svref> Are you having fun at my expense?  In lisp its just "find pred list"...
09:20:43 <lambdabot> bzzt
09:20:44 <sjanssen> if' isn't a standard function, just something @pl uses
09:21:00 <LordBrain> svref: that works in haskell too...
09:21:02 <sjanssen> svref: you'll want to use the find function
09:21:05 <int-e> > let if' a b c = if a then b else c ...
09:21:06 <lambdabot>  Parse error
09:21:15 <mauke> svref: huh? we gave you the solution
09:21:19 <int-e> @botsnack
09:21:19 <lambdabot> :)
09:21:22 <int-e> lambdabot: sorry.
09:22:09 <int-e> > find (>5) [1,2,7,2,1,8]
09:22:10 <svref> mauke: none of the tutorials I've read so far have mentioned this "forall" thing
09:22:11 <lambdabot>  Just 7
09:22:22 <mauke> svref: oh, just ignore it
09:22:44 <svref> LordBrain: "Variable not in scope: 'find'"
09:22:44 <mauke> where it = everything between "forall" and "."
09:22:49 <mauke> @index find
09:22:50 <lambdabot> Data.List
09:22:55 <sjanssen> svref: import Data.List
09:24:05 <svref> Allright, sorry for being so clueless everyone, but Ive finally understood (most) of what you've said.  :)
09:24:33 <mauke> even the (head .) . filter part? :-)
09:24:38 <emertens> > find (>5) [1,2,3,4]
09:24:39 <lambdabot>  Nothing
09:24:58 <emertens> (head .) . filter suffers from:
09:25:00 <emertens> > head []
09:25:00 <lambdabot>  Add a type signature
09:25:07 <emertens> > head [] :: [Int]
09:25:08 <emertens> ?
09:25:08 <lambdabot>  Exception: Prelude.head: empty list
09:25:33 <mauke> it's equivalent to \pred list -> head (filter pred list)
09:26:21 <emertens> who said to use that?
09:26:45 <mauke> the lisp version would be something like (lambda (pred list) (car (remove-if-not pred list)))
09:27:37 <emertens> that would be a particularly inefficient way to define find, no?
09:27:56 <emertens> in a call-by-value language in particular
09:28:00 <svref> aaah!
09:28:10 <sjanssen> haha
09:28:17 <emertens> wth?
09:28:19 <sjanssen> we scared svref away
09:28:58 <norpan> you bastards
09:33:16 <LordBrain> @index inBounds
09:33:17 <lambdabot> bzzt
09:33:55 <LordBrain> lol
09:34:47 <emertens> It would be interesting to see a library like Hibernate for Haskell
09:35:23 <abcde`> There is one, but work on it stops every few months.
09:35:29 <norpan> hehe
09:35:29 <abcde`> (hah)
09:35:33 <norpan> what is hibernate
09:35:43 <abcde`> I've no idea
09:35:50 <emertens> Hibernate is an ORM for Java
09:35:54 <abcde`> just thought of that.
09:35:56 <abcde`> ooh
09:36:29 <norpan> and what is an orm
09:36:30 <emertens> Object/Relational Mapping
09:36:51 <emertens> In an OO language, it allows you to hide the correlation between your data objects and your database
09:36:59 <emertens> it's a "persistence" library
09:37:05 <norpan> ok but haskell is not an oo language
09:37:15 <emertens> but it still needs persistence
09:37:31 <emertens> and databases are a good way to provide that to multiple clients
09:37:53 <norpan> but that's like stateful objects
09:38:40 <emertens> and
09:39:02 <norpan> which is the basis of an oo language but hardly the basis of haskell
09:40:10 <emertens> So you are saying that Haskell should not be used to solve problems where data is persisted across multiple executions?
09:40:27 <norpan> not at all
09:40:31 <emertens> oh good
09:41:37 <emertens> all I'm suggesting is that such a library could populate data records at the programmers request
09:42:00 <emertens> and when a programmer wanted to persist data, he could pass a new data record back to the library
09:42:30 <beschmi> emertens: i think the closest thing to hibernate in haskell is included in happs
09:42:35 <beschmi> http://happs.org/
09:42:37 <lambdabot> Title: HAppS -- Haskell Application Server (version 0.8 )
09:42:39 <emertens> and, in the fashion of hibernate, the relationship between those data records and the RDBMS could be defined in some config file
09:42:44 <emertens> I'll give it a look
09:43:07 <ricky_clarkson> Well, Hibernate is trying to get away from that, and have the source files express those relations.
09:43:27 <emertens> that's a shame...
09:43:36 <emertens> it least in my opinion :)
09:43:59 <tibbe> I need a list of the ASCII characters (octet 0 - 31, 127 i.e. control characters), what would be the easiest way to generate one?
09:44:27 <beschmi> happs seems to be closer to prevayler
09:44:35 <emertens> prevayler?
09:45:11 <ricky_clarkson> emertens: Hibernate depends a lot on reflection, there isn't really a statically typesafe equivalent afaik.
09:45:35 <ricky_clarkson> dmlloyd is considering writing one for Java, but it's only in the planning stage.
09:45:46 <beschmi> persistent objects in java without a relational DB
09:45:55 <emertens> > chr 41
09:45:56 <lambdabot>  ')'
09:45:59 <tibbe> or better yet, how could I get a list of all ASCII characters? filter isAscii <name of all chars>
09:46:07 <emertens> tibbe: map chr [0..31]
09:46:12 <ricky_clarkson> beschmi: Doable with an OODB or random serialisation libraries.
09:46:15 <tibbe> thanks
09:46:22 <stepcut> concurrent clean has an extension for persistent data
09:46:26 <emertens> > map chr [0..31]
09:46:27 <lambdabot>  "\NUL\SOH\STX\ETX\EOT\ENQ\ACK\a\b\t\n\v\f\r\SO\SI\DLE\DC1\DC2\DC3\DC4\NAK\SY...
09:46:52 <kpreid> > [Char.chr 0 .. Char.chr 31]
09:46:53 <lambdabot>  "\NUL\SOH\STX\ETX\EOT\ENQ\ACK\a\b\t\n\v\f\r\SO\SI\DLE\DC1\DC2\DC3\DC4\NAK\SY...
09:46:57 <beschmi> emertens: there is also haskelldb for haskell - DB mapping
09:47:12 <emertens> I'll give that a look to
09:47:14 <stepcut> I believe with clean, you can save partially evaluated functions, infinite lists, etc
09:47:24 <emertens> now that sounds cool :)
09:47:32 <ricky_clarkson> emertens: Hibernate is probably theoretically wrong too, as it tries to make the relationship transparent, which it can never fully be.
09:47:47 <norpan> now, saving unevaluated thunks would be cool
09:47:57 <ricky_clarkson> stepcut: Wow.
09:48:12 <norpan> if we give haskell a graph rewriting semantics, that should be possible
09:48:23 <emertens> ricky_clarkson: if you set up your interfaces right, you can do a pretty good job at removing anything hibernate speicifc from your business code
09:48:56 <stepcut> there is also a project, mobile haskell, that can send thunks from one server to another. I suspect that could also be used to save the thunks to disk and read them back.
09:48:58 <ricky_clarkson> Sure, that's what DAO is about, but you could do that equally well if Hibernate didn't aim for transparency.
09:48:58 <sabren> does anyone know why Control.Concurrent.MVar.addMVarFinalizer is GHC only?
09:49:15 <stepcut> the mobile thunks have to be byte-code though (but you can mix byte-code and native code in the same problem i think)
09:49:24 <stepcut> s/problem/program/
09:49:28 * stepcut goes out for coffeee
09:50:19 <ricky_clarkson> stepcut: A DB would still be useful though if you have to let another programming language look at the records.
09:51:08 <kowey> Say one day i got really desperate to have "global" variables in Haskell (in IO)...
09:51:16 <kowey> would it be ok to do something like global = unsafePerformIO $ newIORef Foo ?
09:51:27 <norpan> kowey: never
09:51:34 <norpan> unless you wrap it property
09:51:36 <norpan> properly
09:52:01 <stepcut> ricky_clarkson: yes
09:52:12 <kowey> norpan : how would i go about doing something like this?
09:52:16 <sjanssen> kowey: you need to make steps to make sure global isn't inlined
09:52:38 <sjanssen> {-# NOINLINE global #-} and compile with -fno-cse
09:52:39 <kowey> i'm not so sure i'm really keep on the idea of building up a monad transformer stack and all that
09:52:55 <emertens> I've never used unsafePerformIO, but I thought that I read that you can only put stuff in it if you don't care fi it's run 0 to many times
09:53:17 <norpan> you need to make sure calls that update global are evaluated properly too
09:54:03 <kowey> so i should probably make a function like setGlobal and do {-# NOINLINE setGlobal #-} ...
09:54:16 <stepcut> it would be neat to turn HAppS transactianol stuff into a general purpose library
09:54:16 <sabren> I'm trying to get the SOE graphics examples working under hugs. Graphics.SOE is broken in the WinHugs release, and a new release is being held up because winhugs doesn't compile, because a file uses Control.Concurrent.MVar.AddMvarFinalizer but that doesn't exist in hugs. Anyone know why? :)
09:55:28 <eivuokko> sabren, Nobody implemented it - it wasn't probably originally part of the spec.  Ghc has lots of these small extensions functions.
09:55:31 <norpan> kowey: yes, and you need to ensure that setGlobal really is evaluated when you want it to
09:56:02 <norpan> so you need to do stuff like case setGlobal ... of () -> ...
09:56:04 <emertens> I thought that Graphics.SOE worked on windows in GHC 6.4.2
09:56:05 <sjanssen> but setGlobal would be in the IO monad, right?
09:56:12 * stepcut really goes out for coffee now
09:56:23 <kowey> sjanssen: yeah it would
09:56:33 <norpan> i see
09:56:49 <kowey> the darcs AtExit code does something like unsafePerformIO $ newMVar Foo
09:56:53 <norpan> i've done stuff like that with write-once-read-many constants
09:56:58 <norpan> that's almost ok
09:56:59 <kowey> with the NOINLINE
09:57:09 <kowey> well, yeah, it would be write-once-read-many
09:57:13 <kowey> i just want to set a flag
09:57:19 <sabren> eivuokko: hmm.. that's kind of what i figured. I looked at the GHC implementation, and it seems simple enough, but hugs doesn't compile it
09:57:36 <sabren> emertens: i couldn't get it working last night.. let me try it again
09:57:41 <emertens> I realize that NOINLINE is just a flag / constant, but every time you write it I feel like you are yelling that you really really can't inline
09:57:59 <norpan> well, that's what it means :)
09:58:05 <sjanssen> the only worrisome part is creating the IORef in the first place, right?  After that you can use it like any other IORef
09:58:49 <norpan> yes, and since global is a top-level binding it will only be evaluated once, unless it's inlined
09:59:14 <sabren> emertens: with the first SOE example (which draws the string hello world) a window pops up but it's just a blank window, and it says not responding
09:59:28 <emertens> sabren: you aren't using VIsual Haskell, are you?
09:59:31 <emertens> or .6.5
09:59:36 <kowey> ok, i'll try that out, thanks, norpan and sjanssen!
09:59:38 <norpan> and i don't know if top-level bindings are ever inlined
09:59:48 <sabren> emertens: nope, just GHCi 6.4.2
10:00:00 <emertens> sabren: can you pm me the code you are running?
10:00:08 <norpan> it would not make much sense to inline them
10:00:09 <emertens> My book is at home
10:00:21 <sjanssen> norpan: top levels are inlined fairly often
10:00:26 <norpan> unless they create very large data objects
10:00:38 <sabren> emertens: sent. thanks :)
10:00:38 <norpan> top level functions i can understand
10:00:43 <norpan> but top level bindings?
10:01:25 <eivuokko> sabren, addMVarFinalizer uses weak references in ghc, which don't exist under hugs.  Maybe it could be simulated with same tactic ForiegnPTr works, tho.
10:01:50 <norpan> sjanssen: when would it make sense to inline a top level binding
10:02:45 <sjanssen> norpan: doesn't seem like there's a lot of cases that it would make sense
10:03:02 <norpan> in fact i think i have code that depends performance-wise on them not being inlined
10:03:57 <emertens> sabren: hmm, i guess it's breaking for me too, i must have run those examlpes on my powerbook
10:04:00 <sabren> eivuokko: hmm.. maybe it would be easier just to remove where it's being used? the usage is here: http://cvs.haskell.org/cgi-bin/cvsweb.cgi/fptools/libraries/base/System/Process/Internals.hs?rev=1.16
10:04:02 <lambdabot> Title: fptools/libraries/base/System/Process/Internals.hs - view - 1.16
10:04:30 * emertens lunch
10:04:47 <sabren> emertens: heh. thanks. i might try it on my mac then
10:05:09 <sjanssen> norpan: perhaps the NOINLINE is just a precaution, in case a future compiler would inline that binding
10:05:27 <norpan> actually, i'm not sure it's allowed to inline it :)
10:06:03 <norpan> and if you want it inlined you do the usual f () = ... trick
10:06:05 <sabren> eivuokko: addMVarFinalizer is being used in mkProcessHandle so that they can close the handle, but again.. it can't compile in hugs
10:06:19 <eivuokko> sabren, I see.
10:06:50 <sabren> eivuokko: it seems like it would be a pretty simple thing to fix, but i'm a complete newbie :D
10:07:01 <eivuokko> I wonder how current hugs compiles with that.  It's still there: http://darcs.haskell.org/packages/base/System/Process/Internals.hs
10:07:41 <sabren> eivuokko: it *doesn't* compile. that's why there isn't a new release
10:07:57 <eivuokko> ndm, Ping.
10:08:31 <sabren> eivuokko: the old release breaks the SOE examples, so I was looking into the problem. :D
10:08:49 <eivuokko> I think ndm might be able to help you better
10:08:56 <eivuokko> I have already forgotten how to compile hugs
10:09:35 <sjanssen> norpan: are Haskell compilers required to use sharing with top level bindings?
10:10:27 <sabren> eivuokko: thanks.. he's the one who tipped me off about the problem :)
10:10:35 <eivuokko> sabren, Does this problem come up if I compile hugs?
10:10:37 <eivuokko> Ah, right.
10:10:51 <norpan> sjanssen: i don't know, but they should :)
10:11:24 <norpan> the semantics is very not specified in haskell
10:11:30 <sabren> eivuokko: I don't know how to compile hugs either...
10:11:30 <norpan> this has both good and bad sides
10:11:55 <sjanssen> if a compiler can prove that a thing is inexpensive to compute, I've got no problem with it being inlined
10:12:09 <sjanssen> so perhaps a bit of wiggle room is good
10:13:09 <eivuokko> sabren, Well, the long story is that you need to make that handle either ForeignPtr or a data with MVar and ForeignPtr.  Then make ForeignPtr finaliser call the the CloseHandle.  And gotta be sure that you keep ForeingPtr alive as long as the MVar if you have both.
10:13:22 <eivuokko> sabren, Or not so long story, but that's the general plan, I think.
10:14:07 <sabren> eivuokko: hmmmmm... it looks like it was originally not an MVar : http://cvs.haskell.org/cgi-bin/cvsweb.cgi/fptools/libraries/base/System/Process/Internals.hs.diff?r1=1.10.2.4;r2=1.10.2.5;f=h
10:14:09 <lambdabot> Title: fptools/libraries/base/System/Process/Internals.hs - diff - 1.10.2.5
10:14:24 <eivuokko> sabren, It might be that there's some clever finaliser trick for hugs, but I don't know hugs too well.
10:14:24 <norpan> well, it mentions it in the reason for the monomorphism restriction
10:15:08 <norpan> but not as a requirement for the compiler
10:15:39 <roods> wouldn't length be more effient to have the pattern length (x:xs) = 1+length xs before length [] = 0?
10:16:04 <norpan> roods: since the patterns are non-overlapping it doesn't matter
10:16:08 <int-e> hmm, no. they test the same thing
10:16:14 <sabren> eivuokko: well, thanks for your help :)
10:16:22 <roods> int-e: you followed me from #math, huh
10:16:25 <roods> i'm hip to you game.
10:16:27 * roods &
10:16:30 <int-e> roods: nope
10:16:40 <eivuokko> sabren, Do you have an idea what I need to do to trigger the bug/error?
10:16:47 <norpan> roods: i think it's you who are the follower
10:16:50 <int-e> I've been here for quite a while :)
10:16:58 <roods> norpan: perhaps.
10:17:14 <sabren> eivuokko: it's in the build itself: http://hackage.haskell.org/trac/hugs/ticket/30
10:17:16 <lambdabot> Title: #30 (Windows and Hugs, fails to complete build of base) - Hugs - Trac
10:17:48 <eivuokko> Oh, clever
10:17:56 <eivuokko> It fails to compile and then just doesn't exists
10:18:08 <sabren> :)
10:18:42 <eivuokko> Most build systems just stop on errors.
10:19:19 <int-e> roods: a comparable C question would be whether to prefer if (a==0) { something; } else { otherthing; } to if (a!=0) { otherthing; } else { something; }
10:20:04 <roods> int-e: i only asked because this haskell tutorial mentioned that it tries the first pattern then goes onto the second.
10:20:16 <int-e> roods: because comparing a tag is all to tell [] and x:xs apart.
10:20:18 <sabren> eivuokko: yeah. could we just put some kind of #ifDef so that hugs used the old implementation instead of the MVar version?
10:20:20 <norpan> roods: well, conceptually it does, but that gets optimized of course
10:20:37 <eivuokko> sabren, I haven't looked into old one yet.  Just thinking it over :)
10:21:39 <sabren> eivuokko: me too. :) the diff is pretty short though - i linked it a few lines back
10:21:43 <norpan> roods: and you shouldn't worry about such small performance things
10:21:44 <eivuokko> sabren, The old version won't work either, I am afraid...it uses weakref
10:21:50 <sabren> eivuokko: ah
10:23:55 <eivuokko> sabren, data ProcH_ = OpenH (ForeignPtr HANDLE) | ExitS Int; newtype ProcH = ProcH (MVar ProcH_) -- I don't see why this wouldn't work as well.
10:24:54 <eivuokko> I think I'll look into it after my ghc build gets ready.
10:25:04 <sabren> eivuokko: :D thanks!!
10:25:43 <sabren> eivuokko: I don't really follow what that means yet, but if it works, that would help a lot of people out I think. :)
10:31:13 <thetallguy> Random question: is there a function to list the available libraries?
10:39:18 <Lemmih> thetallguy: No.
11:01:14 <SamB> Hmm...
11:01:50 * SamB wonders what sort of monad to use for a validity checker for RML
11:02:12 <SamB> probably a Read/Writer or something like that...
11:04:12 <SamB> is there a nice tutorial on writers somewhere or do I have to puzzle it out from sources?
11:05:40 <thetallguy> Anyone got a link to the ghc 6.6 libraries pages?
11:05:52 <roconnor> @docs
11:05:53 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/index.html
11:05:59 <SamB> @type mappend
11:06:03 <roconnor> is that 6.6?
11:06:04 <lambdabot> Not in scope: `mappend'
11:06:11 <SamB> @hoogle Monoid
11:06:12 <lambdabot> Data.Monoid :: module
11:06:13 <lambdabot> Data.Monoid.Monoid :: class Monoid a
11:06:19 <SamB> @type Data.Monoid.mappend
11:06:20 <thetallguy> roconnor: thanks.
11:06:21 <lambdabot> forall a. (Data.Monoid.Monoid a) => a -> a -> a
11:06:43 <SamB> @instances-importing Data.Monoid Monoid
11:06:44 <lambdabot> (), (a -> a), (a, b), (a, b, c), Ordering, [a]
11:07:55 <roconnor> (0,1) `mappend` (1,2)
11:08:01 <roconnor> > (0,1) `mappend` (1,2)
11:08:02 <lambdabot>  Not in scope: `mappend'
11:08:28 <roconnor> what does it do?
11:08:39 <SamB> I'm pretty sure the full instance head is (Monoid a, Monoid b) => (a, b), anyway
11:08:43 <SamB> er.
11:08:44 <roconnor> oh
11:08:49 <SamB> add a Monoid after the =>
11:08:56 <roconnor> ok
11:09:36 <roconnor> LT `mappend` GT
11:09:44 <roconnor> > LT `mappend` GT
11:09:45 <lambdabot>  Not in scope: `mappend'
11:09:48 <roconnor> oh right
11:09:51 <SamB> why is there an RWS but no RW?
11:10:06 <roconnor> SamB, I just set S to ()
11:10:10 <SamB> yeah.
11:10:30 <SamB> still seems like it might be less efficient
11:10:33 <roconnor> Actually I set R to (), but you get the idea.
11:10:38 <SamB> heh
11:10:52 <roconnor> SamB, I hope GHC can optimise it away!
11:11:04 <weierstrass> sup, IINM there is a central repository for haskell libraries? i can't seem to find it by google
11:11:10 <roconnor> otherwise we are all in big trouble.
11:11:23 <SamB> I guess it could, as long as you don't ever try to use it and GHC can tell that...
11:11:27 <SamB> JHC would for sure...
11:11:41 <SamB> (if only it supported MPTCs
11:13:23 <SamB> I'm a bit doubtful about the S, since it has to pass that around...
11:13:31 <SamB> and rerturn it too
11:13:32 <eivuokko> weierstrass, Not really.  We hope to have one at hackage.haskell.org.  For now, it is best to just to browse libraries page at haskell.org.  darcs.haskell.org/packages has some set of common libraries.
11:13:53 <weierstrass> ok thanx a lot eivuokko
11:14:40 <SamB> hmm.
11:15:07 <SamB> @hoogle [String] -> [String]
11:15:07 <lambdabot> No matches, try a more general search
11:15:10 <SamB> hmm
11:19:32 <emertens> SamB: what functionality are you looking for?
11:20:17 <SamB> I need to keep track of a few different kinds of things...
11:20:38 <emertens> I mean in a [String] -> [String] function
11:20:47 <SamB> oh, that.
11:20:56 <SamB> I was looking for a type synonym actually ;-)
11:21:41 <emertens> like type Strings = [String]?
11:22:05 <bourbaki> moin
11:22:07 <SamB> probably I was thinking of some synonym for [a] -> [a] or String -> String...
11:27:19 <SamB> hmm, do I care about the possibility that someone will try to define a type in a function... lets see...
11:27:22 <SamB> probably not.
11:27:36 <SamB> Its just my code I want to check, after all ;-)
11:28:12 <bourbaki> is there a .NET implementation for haskell?
11:28:44 <SamB> what do you mean?
11:28:51 <SamB> there is hugs.net, I think
11:29:50 <eivuokko> I think someone said that yhc can compile into .net, but not sure about that.
11:30:07 <bourbaki> i would like to use the haskell notation in a .net app
11:30:39 <emertens> it would probably be less of a hack to try somethign like F#
11:30:56 <bourbaki> i just found a dotlisp and just thought it would be cool to have prolog haskell lisp notation in an application
11:31:04 <bourbaki> F#?
11:31:06 <SamB> ???????
11:31:12 <roconnor> ?where F#
11:31:12 <lambdabot> I know nothing about f#.
11:31:23 <roconnor> ?google F#
11:31:25 <lambdabot> http://research.microsoft.com/projects/ilx/fsharp.aspx
11:31:25 <lambdabot> Title: This page has been replaced
11:31:31 <roconnor> oh noes
11:31:34 <bourbaki> SamB id like to use haskell like code for mathematical expression
11:31:42 <emertens> http://research.microsoft.com/fsharp/fsharp.aspx
11:31:46 <bourbaki> and prolog for csp and logical expression
11:31:59 <roconnor> @where+ F# http://research.microsoft.com/fsharp/fsharp.aspx
11:32:00 <lambdabot> Done.
11:32:15 <emertens> "F# is a pragmatically-oriented variant of ML that shares a core language with OCaml. F# programs run on top of the .NET Framework."
11:32:20 <bourbaki> ah f# sounds good
11:32:31 <roconnor> OCaml!
11:32:33 <roconnor> bah
11:32:39 <roconnor> ;)
11:33:14 <lispy> the lack of type classes really makes ocaml feel clunky if you're used to haskell
11:33:18 <SamB> it said "core language", not "crazy features"
11:33:45 <bourbaki> hehe
11:33:58 * lispy grumbles about crashing visual studio...yet again
11:34:02 <bourbaki> i hope im not stepping on anyones foot here
11:34:03 <lispy> man, windows is such a POS
11:34:07 <eivuokko> lispy, Hiya
11:34:11 <lispy> eivuokko: hi
11:34:15 <bourbaki> but dont have .NET and haskell a lot in common in general?
11:34:20 <dcoutts_> @seen musasabi
11:34:20 <lambdabot> musasabi is in #haskell-overflow, #haskell-blah and #haskell. I last heard musasabi speak 7 hours and 57 minutes ago.
11:34:36 <SamB> bourbaki: such as a GUB?
11:34:47 * lispy expects "End Now" to have a reasonable meaning for "Now"
11:34:53 <bourbaki> whats gub?
11:35:00 <SamB> Grand Unified Bytecode
11:35:16 <eivuokko> lispy, How's the ...comdlg? bindings going?  Did you get something together?  If there's something to be added into Win32, it's a good time to do now, before ghc 6.6
11:35:21 <bourbaki> never heared of that but i mean things like boxed types and the strong typeing and such
11:35:33 <SamB> well, that isn't much ;-)
11:35:41 <SamB> lots of systems have boxed types
11:35:47 <lispy> eivuokko: i could send you what i have, but it's unfinished...i was told to just write the GUI in our main application
11:35:55 <bourbaki> i bet there are more then these similarities
11:36:02 <lispy> eivuokko: so, i haven't worked on it much lately
11:37:06 <emertens> fucking vs.net is slow like balls!
11:37:16 <lispy> emertens: yeah :(
11:37:25 <lispy> emacs for the win
11:37:29 <eivuokko> lispy, Ok, such is life.  If there's usable bits, I'd be interested.
11:37:36 <emertens> and this is a friggin' 2.6ghz w/ 2gigs ram
11:37:50 <SamB> heh
11:38:00 <lispy> eivuokko: hmm...okay i think i had a working file dialog (without any nice abstraction at some point) i'll email you what i have and let you decide if it's useful
11:38:37 <lispy> emertens: itunes is also horrible slow on windows...i counted to 70 before giving up on itunes to restore it's window so i could change songs
11:38:54 <emertens> lispy: and scrolling seems choppy in it
11:39:00 <lispy> emertens: very
11:39:03 <wilx> foobar2000 ftw
11:39:09 <eivuokko> lispy, Cool.  I'd love to see it. ei at vuokko dot info
11:39:19 <emertens> I wish they'd just buy me a mac pro
11:39:22 <lispy> eivuokko: okay
11:39:32 <emertens> and let me dual boot when there was no other way to accomplish whatever
11:39:44 <emertens> *sigh*
11:41:02 <eivuokko> emertens, fwiw, I had some problems with some files under vs 2k5 - I suspect they are samekind of problems that make 2k3 lock up due to some wierd utf encoding mess.
11:41:23 <SamB> I suppose I really don't care if someone tries to put a "do" or a "return" at the top level, either... because *I'm* not going to...
11:41:46 <emertens> my problem is that this solution I'm working on has like 20 projects and a ton of aspx pages in the web project
11:41:56 <emertens> and when ever I build even a single project
11:42:00 <SamB> hmm, should the return type of the current function be part of my environment?
11:42:08 <emertens> it takes a good 30 seconds to "recover" from whatever the hell it odes
11:42:11 <eivuokko> Ah deps are slow?
11:42:14 <emertens> (window stops responding)
11:42:28 <emertens> and god forbid that I want to debug the web project
11:42:36 <emertens> because then it has to re "validate" every page
11:42:45 <eivuokko> On those cases I usually build from commandline when possible.
11:42:45 <emertens> including all of the CMS pages from Microsoft CMS server
11:43:19 <emertens> the advantage is that I get a 5 minute break every time I'm ready to test something
11:43:48 <emertens> to make things slower, they have us developing in a virtual machine
11:43:57 <emertens> so we can develop on win2k3
11:44:20 <eivuokko> Err
11:44:23 <eivuokko> Err.
11:44:25 <emertens> because they want to use microsoft commerce server, which only runs on 2k3
11:47:02 <greenrd> funny, I always assumed that by now, microsoft (with their supposed "developers developers developers" focus) would have made a blazing fast IDE that blew Eclipse etc. out of the water in every way...
11:47:24 <mnislaih> GHC hackers: what is a HsCoerce and where does it show up after typechecking ?
11:47:37 <SamB> you know they aren't *really* focusing on developers as *users*, right?
11:47:59 <SamB> only as a means to sell more copies of windows
11:49:09 <SamB> hmm
11:50:53 <glguy> I like developing in Cocoa (ObjC on OS X)
11:51:04 <glguy> but I haven't gotten a job doing it yet
11:54:20 <dcoutts_> mnislaih, I don't know but I'd guess that it's used for unsafeCoerce#
11:55:15 <mnislaih> could be, but I get the feeling that it's something more general
11:55:40 <eivuokko> greenrd, Are you trying to say there's some single killer ideas/features that make some editors and IDEs significantly better than their competitors?  And that VS should have some/more of those?  Because as I see it, the diffrences are usually pretty small in terms of real functionality, and user preferences rule over most features.
11:56:13 <greenrd> well, I dunno
11:56:21 <greenrd> speed is quite important tho
11:56:52 <eivuokko> Most build systems are slow on big projects :)
11:57:11 <dcoutts_> see recursive make considered harmful
11:57:13 <mnislaih> Comments in ghc can be really obscure: "A Coercion is an expression with a hole in it. We need coercions to have concrete form so that we can zonk them"
11:57:33 <dcoutts_> mnislaih, have you found the comments in klingon yet?
11:57:55 <mnislaih> rofl, not yet. havent gone that deep !
11:58:18 <dcoutts_> some have accompaning translations, some don't
11:58:51 <mnislaih> I will be trying to contribute to the cause with some comments in spanish and catalan
11:59:19 <mnislaih> let's join forces to create the weirdest ever commented code !
12:01:30 <lispy> eivuokko: i just sent the email, let me know if you get it
12:02:13 <glguy> isn't there some disagreement where some people don't believe catalan and valencian are different languages?
12:04:22 <mnislaih> yes, there are.
12:04:38 <eivuokko> lispy, Thanks, got the mail :-)
12:04:44 <lispy> eivuokko: ah good
12:04:45 <mnislaih> but only on the catalonian side. they say that catalan is the only true language, and that valencian is just a derivative
12:05:22 <mnislaih> when as a matter of fact, both are derivatives and none of the two is considered to be an ancestor of the other
12:06:52 <roods> I don't understand what is meant by a "type constructor" is this any different from a constructor in java/c++?
12:07:25 <Igloo> Yes
12:07:36 <Igloo> Do you know what the type "Maybe Int" means in Haskell?
12:08:13 <roods> By "means" do you mean that it is a set of values?
12:08:15 <glguy> Well, i have no opinion on the issue, i just knew that there was one :)
12:08:17 <Cale> roods: quite different. It's sort of a function on types.
12:08:30 <Cale> It builds a new type from existing ones
12:08:34 <Igloo> roods: Are you familiar with it?
12:08:41 <mnislaih> no strong opinions here either. I just happen to live in Valencia, but I'm not native
12:08:57 <Igloo> Assuming you are, "Maybe" is a type constructor. It takes an argument (Int in this case) and /constructs/ the type Maybe Int
12:09:06 <glguy> I was wasting time on wikipeida one day a while back :)
12:09:18 <Cale> data Maybe a = Nothing | Just a -- this means that a value of type (Maybe a) is either the value Nothing, or something of the form (Just x) where x is of type a.
12:09:30 <Igloo> roods: Similarly, Just is a data constructor. It takes a value, say 5, and /constructs/ some data (in this case Just 5)
12:09:32 <glguy> Maybe:type constructor::Just:?
12:09:36 <Cale> Maybe is called a type constructor, Nothing and Just are data constructors
12:09:44 <glguy> ah, data constructor
12:09:53 * lispy has now crashed visual studio twice in the hour...grrr
12:10:05 <Cale> Just 5 :: Maybe Integer
12:10:33 <roods> sorry i don't get it.
12:10:37 <Cale> hmm
12:10:43 <roods> i'll try and review the doc i have and think it over.
12:11:22 <glguy> Maybe is a function that takes a type name, and returns a type. Just is a function that takes a value and returns a value of type Maybe
12:11:38 <glguy> Just 1 has the type of Maybe Int
12:11:43 <Cale> @type Just
12:11:44 <glguy> err
12:11:44 <lambdabot> forall a. a -> Maybe a
12:11:54 <Cale> @kind Maybe
12:11:56 <lambdabot> * -> *
12:12:01 <glguy> Maybe (Num a)
12:12:13 <Cale> Num a => Maybe a
12:12:18 <glguy> yeah, that
12:12:37 <glguy> it was already loosing when I said that Just returned a Maybe
12:12:54 <glguy> (value of)
12:13:05 <SamB> it does... sortof...
12:13:12 <glguy> well, a Maybe a
12:23:07 <Cale> roods: another good example (though perhaps confusing because we use special syntax for it) is the type constructor for lists.
12:23:28 <roods> Cale: that is what i'm reading about now.
12:23:29 <Cale> Which is represented by wrapping the type in square brackets
12:23:40 <Cale> You can also just write [] before the type
12:23:47 <Cale> > [1,2,3] :: [] Integer
12:23:48 <lambdabot>  [1,2,3]
12:36:37 <glguy> "You got a yellow rupee. How nice for you."
12:41:17 <gaal> Hi! More circularity questions, but this feels like it oughta be eaiser to solve than the class problem.
12:41:41 <gaal> I have modules A and B. B does import {-# SOURCE #-} A
12:42:03 <gaal> There's a datatype B.dt that wants to derive Show, Eq etc.
12:42:33 <gaal> some of its members are pulled from A, via an hs-boot file, where they derive Show etc.
12:42:55 <gaal> but now, while compiling B, I'm getting missing instance errors. Is there a workaround?
12:47:45 <SamB> hmm?
12:48:07 <SamB> did you do the "derivings" in both the .hs and the .hs-boot file?
12:48:40 <gaal> SamB: no, I'm putting the data declarations in abbreviated form in the -boot file.
12:49:26 <gaal> in some cases it is not practicable to include the full declaration.
12:49:28 <SamB> try it with either the "deriving" for the needed instances or just write "instance" declarations without "where" clauses?
12:50:05 <gaal> where to put the instances, in the boot or in the consuming module?
12:50:12 <SamB> the boot file of course
12:50:19 <gaal> actually - tried that, it didn't work.
12:50:33 <gaal> there's a note in the docs saying instances are quirky in boot files
12:50:54 <SamB> what happens if you put in the "deriving" stuff?
12:51:14 <gaal> and I can't boot the entire type, it creeps additional types
12:51:25 <SamB> don't worry about the constructors
12:51:33 <gaal> also, "data X deriving Show" is illegal, even in boot files.
12:51:33 <SamB> just the deriving part...
12:51:43 <SamB> it shouldn't actually derive anything, after all...
12:51:53 <SamB> just pretend it has
12:51:54 <gaal> that's a syntax error.
12:52:03 <SamB> ouch :-(
12:52:25 <SamB> the next thing to try is showering the maintainers' heads with large, heavy objects
12:52:39 <gaal> "wait for 6.6"
12:52:58 <SamB> oh, you mean they've fixed it already?
12:53:19 <gaal> dunno
12:53:38 <gaal> I hope it'll be fixed by then...
12:53:57 <gaal> *sigh* writing to ghc-users again...
12:54:01 <SamB> well, check the latest in the tree
12:54:11 <SamB> if that doesn't work, large objects!
12:55:36 <gaal> This is for pugs. We can require 6.6 when it comes out, but not 6.5 right now.
12:55:39 <SamB> after all, the standard doesn't say anything about cycles in the import graph, right? so presumably they are completely standard.
12:55:41 <gaal> Anyway, thanks.
12:56:08 <SamB> well, I meant just so you'd know whether or not you needed to "encourage" the maintainers to fix it ;-)
12:56:09 <gaal> worst case there's #include... :-((
12:56:16 <SamB> oh ack
12:56:59 <SamB> well, cyclic imports aren't much better if they are compiled all together...
12:58:21 <gaal> they cease to be imports :)
12:58:39 <gaal> I mean :(, really...
12:58:40 <SamB> they are still imports
12:59:03 <SamB> its just that the modules are no longer modular
13:01:00 <gaal> nnno, if I bunch up everything in one compilation unit they are no longer imports
13:01:59 <sjanssen> @yow
13:02:00 <lambdabot> Mary Tyler Moore's SEVENTH HUSBAND is wearing my DACRON TANK TOP in a
13:02:00 <lambdabot> cheap hotel in HONOLULU!
13:11:50 <dcoutts_> hia sjanssen, how's the ByteString hacking going?
13:13:09 <dcoutts_> any benchmarks yet? is your generic 'ByteString a' as fast when used at type Word8?
13:13:22 <dcoutts_> it'd be interesting to know the price of it being more generic
13:22:56 <sjanssen> dcoutts_: 'tis going well
13:23:05 <dcoutts_> cool
13:23:07 <sjanssen> I don't have any numbers yet, but I should soon
13:23:22 <dcoutts_> great, what's your impression?
13:23:33 <dcoutts_> do you think it's a big or small cost?
13:24:25 <sjanssen> I don't have any predictions, but I'm hopeful
13:25:11 <sjanssen> I think using SPECIALIZE and INLINE should clear up most potential problems
13:26:07 <SamB> hmm, that reminds me...
13:26:12 <SamB> SUPERSPECIALIZE is neat
13:26:40 <dcoutts_> sjanssen, right, sounds reasonable
13:26:57 <dcoutts_> sjanssen, have you seen the latest streams stuff?
13:27:12 <dcoutts_> it really is very quick
13:28:44 <dcoutts_> on my box we're doing interact(map (*2) . map (+1)) on 50mb of data in 0.170 sec
13:29:05 <sjanssen> nice
13:29:09 <dcoutts_> which is about 10x faster than it used to be when we started on the fusion stuff
13:29:11 <glguy> @type interact -- [String] -> [String] ?
13:29:13 <lambdabot> (String -> String) -> IO ()
13:29:33 <dcoutts_> glguy, except here I mean ByteString
13:29:45 <glguy> what is the purpose of interact?
13:29:56 <sjanssen> dcoutts_: that number for strict or lazy bytestrings?
13:30:04 <dcoutts_> sjanssen, that was strict
13:30:15 <SamB> glguy: making cat easy to write ;-)
13:30:21 <dcoutts_> heh
13:30:51 <dcoutts_> glguy, yeah, it's for progs that stream from stdin to stdout with a transformation in between
13:31:22 <dcoutts_> interact f = putStr . f =<< getContents
13:32:00 <dcoutts_> actually it's a relic from the old pre-monads style of Haskell IO
13:32:18 <dcoutts_> which was based on lazy streams of chars
13:37:00 <dcoutts_> sjanssen, so how close are you to having something close to Data.PackedString ?
13:37:12 <dcoutts_> if you're close then we can try and get it in to ghc 6.6
13:37:32 <dcoutts_> the old Data.PackedString API has been deprecated
13:37:51 <dcoutts_> and JaffaCake is hoping for a new impl based on your stuff
13:38:28 <dcoutts_> and following the same API as Data.ByteString.Char8 but for proper unicode, not ascii
13:38:34 <SamB> @hoogle [a] -> Maybe a
13:38:34 <lambdabot> Maybe.listToMaybe :: [a] -> Maybe a
13:38:35 <lambdabot> List.find :: (a -> Bool) -> [a] -> Maybe a
13:38:42 <sjanssen> I'd say I'm close
13:38:52 <sjanssen> when is 6.6 being released?
13:39:04 <glguy> I heard less than 1.5 months
13:39:35 <dcoutts_> yeah, less
13:39:50 <dcoutts_> first release candidate is supposed to be at the end of the month
13:40:12 <sjanssen> yeah, Aug. 25, that is cutting it a little close
13:40:25 <dcoutts_> well that's only the first RC :-)
13:40:46 <SamB> that is cutting it close! that is the day before my birthday!
13:40:46 <dcoutts_> when are you're supposed to be done for the SoC ?
13:41:07 <sjanssen> the 21st
13:41:19 <dcoutts_> of aug?
13:41:23 <dcoutts_> as in 10 days from now?
13:41:28 <sjanssen> yep
13:41:33 <dcoutts_> I see
13:41:39 <dcoutts_> well then, no probs :-)
13:42:47 <dcoutts_> sjanssen, it's much easier to get new modules in for 6.6 than 6.6.1
13:43:24 <dcoutts_> so long as the api is good, some other things can be fixed up later
13:43:40 <sjanssen> true, true
13:44:17 <SamB> and id the API is bad, people will *demand* that it be fixed, no?
13:44:22 <dcoutts_> heh
13:45:05 <dcoutts_> libs shipped with ghc are supposed to have a stable api for the duration of a major version
13:45:22 <dcoutts_> ie no api changes for 6.6.1 6.6.2 etc
13:45:46 <kolmodin> the 21st of august is my birthday :)
13:46:11 <dcoutts_> yay
13:46:27 <SamB> well then I guess we can't release it until it has been thoroughly tested!
13:47:19 <sjanssen> the API is a no-brainer, really.  Just copy Data.ByteString.Char8
13:47:45 <SamB> point ;-)
13:47:58 <roods> what is the difference between lists and touples?
13:48:04 <roods> *tuples
13:48:18 <sjanssen> so maybe I should just submit a module full of: map = undefined; filter = undefined; ...
13:48:41 <SamB> roods: consult a mathematical dictionary
13:49:01 <roods> SamB why?
13:49:07 <roods> those are terms in haskell
13:49:21 <SamB> well...
13:49:22 <sjanssen> tuples are fixed length and can hold values of several types.  Lists are variable length and are heterogenous
13:49:27 <sjanssen> oops, homogenous
13:49:27 <SamB> @dict-all tuple
13:49:28 <lambdabot> Unknown command, try @list
13:49:43 <SamB> @help dict
13:49:43 <lambdabot> I perform dictionary lookups via the following 13 commands:
13:49:44 <lambdabot>  @all-dicts .. Query all databases on dict.org
13:49:44 <lambdabot>  @devils ..... The Devil's Dictionary
13:49:44 <lambdabot>  @easton ..... Easton's 1897 Bible Dictionary
13:49:44 <lambdabot>  @elements ... Elements database
13:49:45 <lambdabot> [9 @more lines]
13:49:47 <agocorona> /topic
13:49:48 <SamB> @all-dicts tuple
13:49:50 <lambdabot> *** "tuple" foldoc "The Free On-line Dictionary of Computing (27 SEP 03)"
13:49:50 <lambdabot> TUPLE
13:49:51 <roods> sjanssen: thanks
13:49:51 <lambdabot>  
13:49:53 <lambdabot>     Toyohashi University Parallel Lisp Environment.  A parallel
13:49:55 <lambdabot>     Lisp based on KCL.
13:49:57 <lambdabot> [58 @more lines]
13:50:01 <SamB> eh. not that one.
13:50:13 <SamB> @web1913 tuple
13:50:14 <lambdabot> No match for "tuple".
13:50:16 <SamB> aww
13:50:22 <SamB> @google tuple
13:50:26 <lambdabot> http://en.wikipedia.org/wiki/Tuple
13:51:19 <SamB> well, one difference is you can't map over or index a tuple
13:51:47 <SamB> another difference is a tuple can have different types of values in it
13:51:55 <SamB> > (1, "hello")
13:51:56 <lambdabot>  (1,"hello")
13:52:00 <SamB> > [1,"hello"]
13:52:01 <lambdabot>  add an instance declaration for (Num [Char])
13:52:01 <lambdabot>   In the list element: 1
13:52:01 <lambdabot>   ...
13:53:37 <SamB> incidentally, pairs are by far the most popular kind of tuple in Haskell
13:55:02 <ValarQ> SamB: blame arrows
13:55:10 <SamB> ValarQ: that would be silly
13:55:20 <SamB> most of them have nothing to do with arrows
13:55:21 <ValarQ> yeah, probably
13:55:57 <ValarQ> well, they are the simplest form of tuple, and the simpler the better, right?
13:56:27 <SamB> there just seems not to be all that much call for sticking three of something together like that in a list or wherever
13:56:38 <SamB> or maybe people just write a real datatype when that happens
13:57:04 <ValarQ> sounds likely
13:57:16 <ValarQ> i know i often do that at that point
13:57:32 <glguy> > let mapt f t = join (***) f t in mapt (+1) (3,5)
13:57:33 <lambdabot>  (4,6)
13:58:10 <glguy> > let mapt = (join .) . (***) in mapt (+1) (3,5)
13:58:11 <lambdabot>    Expecting a function type, but found `(b, (b, b'))'
13:58:11 <lambdabot>    Expected type:...
13:58:13 <SamB> anyway, I know I'm much more likely to encounter nested pairs than triples, at least in anything other than the return type of a function which is usually pattern-matched against immediately
13:58:20 <ValarQ> thats no reason to not have curry3 and uncurry3 in Haskell' thought
13:58:44 <glguy> @pl mapt f t = join (***) f t
13:58:45 <lambdabot> mapt = join (***)
13:58:53 <glguy> > let mapt = join  (***) in mapt (+1) (3,5)
13:58:54 <lambdabot>  (4,6)
13:59:04 <glguy> oh yeah... duh
13:59:07 <stepcut> heh
14:00:45 <glguy> does lambdabot have a rewrite rule for something like that?
14:01:00 <glguy> @pl f (a,b) -> (f a , f b)
14:01:00 <lambdabot> (line 1, column 9):
14:01:01 <lambdabot> unexpected ">" or "-"
14:01:01 <lambdabot> expecting variable, "(", operator or end of input
14:01:04 <glguy> @pl \ f (a,b) -> (f a , f b)
14:01:04 <lambdabot> (`ap` snd) . (. fst) . (flip =<< (((.) . (,)) .))
14:01:34 <glguy> ew
14:03:50 <vincenz> yo
14:04:00 <agocorona> @quote
14:04:00 <lambdabot> lispy says: I just remembered this dream i had the other morning.  I was trying to tell my alarm clock how to snooze by using a list comprehension
14:04:08 <glguy> @pl >>= id
14:04:09 <lambdabot> (line 1, column 1):
14:04:09 <lambdabot> unexpected ">"
14:04:09 <lambdabot> expecting white space, natural, identifier, lambda abstraction or expression
14:04:14 <glguy> @pl (>>=) id
14:04:14 <lambdabot> (id >>=)
14:04:15 <sjanssen> @keal
14:04:15 <lambdabot> its because the timeline diverges and past events themselves unhappen
14:04:20 <glguy> @pl (=<<) id
14:04:20 <lambdabot> join
14:05:00 <glguy> anyone know if join is actually defined as >>= id?
14:06:23 <mauke> glguy: well, it's the most obvious definition
14:06:28 <sjanssen> @fptools Control.Monad
14:06:28 <lambdabot> http://darcs.haskell.org/packages/base/Control/Monad.hs
14:07:03 <glguy> join              :: (Monad m) => m (m a) -> m a
14:07:04 <glguy> join x            =  x >>= i
14:07:08 <glguy> d
14:07:13 <glguy> makes sense
14:07:30 <glguy> @type mapAndUnzipM
14:07:31 <lambdabot> forall c b (m :: * -> *) a. (Monad m) => (a -> m (b, c)) -> [a] -> m ([b], [c])
14:07:37 <glguy> Who here has used that one?
14:07:44 <mauke> @djinn (Monad m) => m (m a) -> m a
14:07:44 <lambdabot> Cannot parse command
14:26:06 <glguy> anyone know of a tool I can use to remotely view my coffee machine webcam?
14:26:13 <glguy> other than vnc :)
14:26:48 <mnislaih> why would you want to do that in the first place :D
14:27:01 <Cale> glguy: hmm, I wonder what the computer science club was using...
14:27:17 <Cale> They had a PNG file which never stopped loading on their website
14:27:51 <glguy> the coffee pot is in one of the labs on the othe side of the floor
14:27:56 <glguy> (it's a private pot for my group)
14:28:11 <glguy> if you take the last of the coffee you have ot refill it
14:28:18 <glguy> so it's good to know when it's full and when it's low ;)
14:29:08 <glguy> I've already got a webcam on the computer... right now I can vnc to it, but i was thinking if i could capture the image, I could do some analysis and figure out what percentage full the pot is
14:29:14 <mnislaih> that's the lazy spirit !
14:29:18 <glguy> and make an rss stream
14:29:19 <glguy> !
14:29:27 <glguy> then firefox could track it for me
14:29:47 <glguy> and so could the rest of the people
14:33:53 <monochrom> You're crazy!
14:34:31 <mnislaih> he's putting technology to a good use
14:34:45 <mnislaih> imagine what this guy could do with those japanese dog-like robots
14:34:58 <Cale> @palomer
14:34:58 <lambdabot> Hrmph, looks like I killed the channel
14:35:07 <Cale> @palomer
14:35:08 <lambdabot> As someone who's studied GADTs, I've never found a use for them.
14:35:32 <mnislaih> @ elite . palomer
14:35:39 <mnislaih> hmm
14:35:42 <glguy> @. elite palomer
14:35:42 <lambdabot> 7H3y'RE tEL|ing u |Ie5!
14:37:32 * Heffalump thinks palomer is wrong.
14:37:35 <Heffalump> @Heffalump
14:37:36 <lambdabot> Unknown command, try @list
14:37:39 <Heffalump> hmph.
14:38:46 <mnislaih> every day I discover something new about lambdabot
14:39:02 <Heffalump> is Haskell Weekly News dead?
14:39:50 <monochrom> It's a bit too ambitious to anticipate weekly news.
14:39:51 <mnislaih> hopefully it's just a Summer break
14:40:09 <monochrom> Unless you also include the latest conversations in #haskell.
14:40:40 <monochrom> "This week Cale lures another troll into learning Haskell.  Another satisfied customer!"
14:41:00 <norpan> @users
14:41:03 <lambdabot> Maximum users seen in #haskell: 235, currently: 207
14:41:27 <norpan> @. elite users
14:41:28 <lambdabot> M4xiMu/\/\ uSERS S33n iN #|-|A$Ke1l: 235, (urr3N+|y: 207
14:41:29 <monochrom> "xerox has written a Roman numeral translator in the type language!"
14:41:30 <glguy> I can't imagine any of those drunken ***hat's that came in last night went out and "learned" anything
14:41:43 <mauke> @kale
14:41:44 <lambdabot> evaluating expressions is ALL haskell does?????
14:41:45 <glguy> s/\'//
14:42:18 <glguy> what was the **shat's name that started with a "pro" last night?
14:42:30 <monochrom> prontotorpedo
14:42:37 <glguy> @quote prototorpedo
14:42:37 <lambdabot> prototorpedo hasn't said anything memorable
14:42:41 <glguy> that can't be it
14:42:46 <glguy> @quote protontorpedo
14:42:46 <lambdabot>  or is haskell doomed to be a mysql driver
14:42:48 <Heffalump> @foo
14:42:48 <lambdabot> Maybe you meant: faq todo yow
14:42:53 <Heffalump> @help
14:42:53 <lambdabot> help <command>. Ask for help for <command>. Try 'list' for all commands
14:42:58 <monochrom> oops forgot an n
14:43:17 <norpan> @quote norpan
14:43:21 <sjanssen> @quote protontorpedo
14:43:56 <Heffalump> @yhjulwwiefzojcbxybbruweejw
14:43:59 <norpan> the bot is dead, long live the bot
14:44:09 <Heffalump> the bot is msging me the output of @list
14:44:12 <glguy> someone probably set off lambdabot's flow prot
14:44:13 <lambdabot> norpan hasn't said anything memorable
14:44:15 <lambdabot>  or is haskell doomed to be a mysql driver
14:44:15 <Heffalump> sorry..
14:44:17 <lambdabot> Exception: <<loop>>
14:44:33 <sjanssen> lambdabot: you should be multithreaded
14:44:46 <monochrom> Eh? yhjulwwiefzojcbxybbruweejw causes a loop?
14:45:00 <sjanssen> @v
14:45:00 <lambdabot> "\"\\\"\\\\\\\"\\\\\\"
14:45:02 <Heffalump> @yhjulwwiefzojcbxybbruweejw
14:45:02 <lambdabot> Exception: <<loop>>
14:45:03 <mnislaih> only if Heffalump pronounces it
14:45:05 <Heffalump> apparently.
14:45:14 <sjanssen> @yhjulwwiefzojcbxybbruweejw
14:45:14 <lambdabot> "\"#$%&'()*+,\""
14:45:21 <Heffalump> multithreading wouldn't help that much unless it interleaved the output of the threads for sending to the server
14:45:25 <Heffalump> @yhjulwwiefzojcbxybbruweejw
14:45:26 <lambdabot> "\""
14:45:36 <monochrom> This is perplexing
14:45:48 <sjanssen> > let v = show v in v
14:45:49 <lambdabot>  "\"\\\"\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\...
14:45:59 <Heffalump> hehe
14:46:01 <sjanssen> > let v = show (head v ) ni v
14:46:01 <lambdabot>  Parse error
14:46:11 <sjanssen> > let v = show (head v ) in v
14:46:12 <lambdabot>  Exception: <<loop>>
14:46:27 <sjanssen> > let v = show (map succ v) in v
14:46:28 <lambdabot>  "\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]]^^__``aabb...
14:46:59 <Heffalump> > show '\''
14:47:00 <lambdabot>  "'\\''"
14:47:04 <Heffalump> > show '''
14:47:05 <lambdabot>  lexical error in string/character literal
14:47:14 <mnislaih> someone should op and ban the spammers
14:47:19 <Heffalump> I'm surprised show (head v) loops, it should just output '
14:47:27 <Heffalump> what spammers?
14:47:54 <mnislaih> err.. you are among them, in my screen
14:48:11 <norpan> i can't op
14:48:16 <norpan> i'm not trusted
14:48:45 <norpan> but please stop
14:48:53 <Heffalump> mnislaih: I'm hardly interrupting much..
14:49:12 <mnislaih> http://bash.org/?627168
14:49:13 <lambdabot> Title: QDB: Quote #627168
14:49:18 <mnislaih> let it be, I was jking
14:49:48 <monochrom> hahaha
14:50:30 <mnislaih> I'm sick of trying to understand the ghc sources
14:50:43 <dcoutts_> heh
14:50:47 <dcoutts_> it takes I while
14:51:01 <dcoutts_> are you investigating anything in particular?
14:51:18 <mnislaih> I am playing cards with the desugarer
14:51:34 <norpan> playing chess more likely....with Death
14:51:35 <mnislaih> Trying to extend dsExpr
14:51:50 <mnislaih> but I cant seem to guess what will come in
14:51:52 <dcoutts_> you're adding more syntactic sugar?
14:52:02 <sjanssen> you should play Stratego, more fun
14:52:07 <mnislaih> no, it's for adding breakpoints
14:52:11 <dcoutts_> ah right
14:52:38 <norpan> "har du kommit för att hämta mig?"
14:52:43 <mnislaih> if I could stop the evaluation right in there and examine the terms
14:52:45 <norpan> "jag har redan länge gått vid din sida"
14:53:06 <mnislaih> are you learning swedish ?
14:53:17 <dcoutts_> mnislaih, use a breakpoint! :-)
14:53:27 <dcoutts_> mnislaih, or use Debug.Trace.trace
14:53:40 <norpan> no, that is from the film "the seventh seal"
14:53:41 <mnislaih> oh I wish I had already implemented this so I could use it ;)
14:53:49 <mnislaih> If I could go back and forth in time
14:53:50 <glguy> "some girl on the street asked if I was saved yet" "i told her i saved at the checkpoint a couple minutes back" "and can reload from there if I de" "she was confused"
14:54:15 <norpan> those christians
14:54:19 <norpan> they never give up
14:54:43 <Philippa> glguy: played GTA2?
14:54:47 <Philippa> "Jesus saves!"
14:55:00 <glguy> hell yeah! :)
14:55:08 <glguy> the good old days of GTA2
14:55:34 <glguy> man... if you set up oil slicks near water, the police would skid off into the water non-stop
14:55:37 <glguy> hours of fun
14:57:36 <edwardk> phillipa: the rest of you take full damage.
14:58:34 * edwardk waits, no one responds to the D&D joke, and sulks off into the corner.
14:59:05 <SamB> hmm?
14:59:10 <glguy> saving throws
15:02:24 <Cale> haha
15:02:41 <vincenz> Philippa: you beloved funny nickname guy was here yesterday
15:02:58 <vincenz> sjanssen:
15:03:08 <vincenz> > fix (show . map succ)
15:03:09 <lambdabot>  "\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]]^^__``aabb...
15:03:23 <Philippa> vincenz: the one who got kicked last time?
15:03:26 <vincenz> yeah
15:05:18 <Philippa> what happened?
15:05:38 <edwardk> beloved funny nickname guy? =)
15:06:39 <typecheck> can haskell code be compiled to .exe?
15:06:58 <vincenz> Philippa: he was asking annoying questions, even dons and Cale were getting frustrated
15:07:02 <vincenz> Philippa: but not sufficient reason
15:07:04 <glguy> typecheck: easily
15:07:12 <edwardk> protontorpedo/shemale_magic?
15:07:15 <Philippa> different nick this time, I take it?
15:07:22 <glguy> no no, as protontorpedo
15:07:28 <edwardk> ah
15:07:29 <edwardk> k
15:07:48 <vincenz> Philippa: he changed nick while here
15:07:56 <typecheck> glguy, thanks
15:08:04 <typecheck> glguy, but how big will be the executable?
15:08:33 <Lemmih> typecheck: This big: |---------------------|
15:08:47 <typecheck> oh, that's big.
15:09:10 <glguy> that's odd, mine is this big : |-----------------------------|
15:09:20 <Lemmih> glguy: Did you strip it?
15:09:26 <Philippa> that's because you have a small monitor
15:09:41 <Cale> @quote+ glguy that's odd, mine is this big : |-----------------------------|
15:09:41 <lambdabot> glguy that's odd, mine is this big : |-----------------------------| hasn't said anything memorable
15:09:49 <Cale> @addquote glguy that's odd, mine is this big : |-----------------------------|
15:09:49 <lambdabot> Unknown command, try @list
15:09:57 <Cale> @remember glguy that's odd, mine is this big : |-----------------------------|
15:09:57 <lambdabot> Done.
15:10:00 <vincenz> glguy: I really hope you have a BIG font
15:10:04 <vincenz> glguy: on my screen that is rather small
15:10:06 * Lemmih grins.
15:10:13 <glguy> I use a big version of Lucidia Console, actually
15:10:24 <glguy> but i didn't put mine up to the monitor to verify
15:10:25 <vincenz> I mean SERIOUSLY myopic sight big
15:11:35 <glguy> fortunately that isn't my first quote :)
15:11:47 <stepcut> bah, if people would set the DPI on their monitor correctly, we could all see it the same size regardless of the size of the monitor (though the font point size would still affect it)
15:11:57 <vincenz> @quote glguy
15:11:58 <lambdabot>  that's odd, mine is this big : |-----------------------------|
15:12:04 <glguy> stepcut: OS X 10.5 is almost here :)
15:12:08 <vincenz> stepcut: I'm talking fontsize
15:12:22 <vincenz> stepcut: that font needs to be at least like 60
15:12:40 <stepcut> glguy: the pre-release of Linspire 5.1 did it "right", but we had to drop that at the last minute :(
15:13:30 <Philippa> stepcut: there is no correct DPI
15:13:36 <Lemmih> stepcut: You're working on Linspire?
15:13:42 <vincenz> Philippa: sure there is
15:13:43 <glguy> recently relevant: http://bash.org/?229070 <pihlopase> Jesus Saves <jbroome> pases to moses, SCOOOOORE
15:13:44 <lambdabot> Title: QDB: Quote #229070
15:13:45 <Philippa> not when it comes to rendering text, or other things specced in pixels
15:13:48 <vincenz> Philippa: .0
15:13:55 <edwardk> glguy: hahahaha
15:13:58 <stepcut> Philippa: there is a correct DPI, but there is a missing piece of the equation (distance from screen)
15:14:01 <benja_> hm. "Equational reasoning for macros: A reflective tower of abstract syntax trees" -- does that sound interesting to anyone here?
15:14:19 * benja_ is wondering whether it would be worth the while to write something on that topic =)
15:14:28 <Philippa> stepcut: even then, it doesn't matter for most of the data we're actually displaying
15:15:15 <madpickle> no, benja, it does not
15:15:17 <mnislaih> hey Lemmih
15:15:21 <benja_> ok :)
15:15:26 <Cale> benja_: hehe
15:15:27 <madpickle> academia isn't supposed to be fun. if you ARE having fun, you're not an academic.
15:15:32 <stepcut> Philippa: perhaps
15:15:32 <SamB> hahaha
15:15:36 <edwardk> benja: where at?
15:15:57 <edwardk> madpickle: crap, then i need to find a new label for myself
15:15:58 <benja_> edwardk: you mean the article? no idea
15:16:04 <madpickle> edwardk: heheh
15:16:14 <Philippa> stepcut: most of it doesn't have measurements in inches or an equivalent unit
15:16:19 <stepcut> anyway, 20 years of people ignoring DPI has made it pretty worthless (though for a long time apple shipped 72dpi monitors with set the system DPI to 72dpi -- so it was actually right)
15:16:23 <madpickle> postgrads are lovingly referred to as poorly-paid employees of the university around here.
15:16:59 <edwardk> mad: well, thats an appropriate label i guess =)
15:18:08 <SamB> stepcut: some of us don't want to see it the "same size"
15:18:19 * we think you do
15:18:54 <Philippa> SamB: quite. For a 19" CRT, most people'd consider the size I have my IRC client's text set up to be scarily big
15:18:56 <SamB> because then to get more stuff on the screen, we need to get a physically larger monitor
15:19:10 <Philippa> the only reason I don't have code this big too is it makes it harder to scan for structure
15:19:56 <stepcut> SamB: As I said, there is a piece of the puzzle missing -- the ability for the user to dictact the apparent size they want
15:20:04 * edwardk uses itsy bitsy fonts on high resolution screens
15:20:09 <SamB> hmm
15:20:10 <edwardk> can't stand big text sizes
15:20:11 <edwardk> =)
15:20:26 <SamB> people tell me my fonts are tiny
15:20:31 * we use large font's when coding to encourage ourselves to to keep functions smaller
15:20:57 * Philippa can go without further eyestrain
15:21:28 <SamB> but I need them that way to be able to fit two or three things on the screen and have any hope of seeing what I want in them without clicking around
15:21:32 * we have lost interest in this nick
15:21:41 * edwardk likes small fonts because i find pretty much in concord with psychological studies that my error rate shoots up exponentially when the code i am thinking about doesn't fit on the screen.
15:22:01 <Philippa> here that tends to be an encouragement to factor better
15:22:03 <johnnowak> monaco 9 is the Godfont.
15:22:09 <edwardk> yeah
15:22:10 <emertens> wait... did I make that stupid size crack as 'glguy'?
15:22:32 <emertens> i did :)
15:22:34 <emertens> sweet
15:22:47 <Philippa> though I should probably check my editor's bookmark features for quick "check the datatype then go back" type stuff
15:27:20 * heatsink made a change to the mangler while doing a new port of ghc to ia64
15:28:05 <heatsink> The compiler works, but I'm not sure the change is right, especially when foreign code is involved
15:29:12 <SamB> foreign code?
15:29:16 <SamB> oh. that kind.
15:29:19 <SamB> what sort of change?
15:29:27 <SamB> you must have done something crazier than what I did once.
15:29:37 <heatsink> I removed floating-point save and restore code from the prologue and epilogue.
15:29:56 <SamB> oh, why?
15:29:59 <heatsink> I think that means that, if you call haskell code from C, then it will overwrite some of your C floating-point registers.
15:30:57 <heatsink> The mangler's job is to remove the stuff that manipulates the stack, because compilation via C produces functions that follow the C stack protocol, but haskell functions all execute in the same stack frame.
15:31:08 <heatsink> so there's no place on the stack to really save those floating-point registers.
15:31:41 <heatsink> If I don't change anything, then the mangler aborts on compiling floating-point code.
15:33:09 <heatsink> Apparently the problem didn't show up on earlier ia64 ports.
15:33:26 <heatsink> Would the glasgow-haskell-users list be the right forum for this issue?
15:33:42 <SamB> how about the -bugs list?
15:33:54 <SamB> or trac or whatever
15:34:53 <heatsink> Is that a discussion list?  It seems to be more like an announcement list.
15:35:26 <SamB> I dunno!
15:35:34 <heatsink> I guess I'm worried about submitting a bug and claiming it's a fix.
15:37:24 <SamB> huh?
15:38:11 <edwardk> hrmm, does anyone have any recommendations for an lcd widescreen monitor with pivot? i want something better to read papers on
15:38:11 <heatsink> I'm worried that my "fix" fixes the obvious bug and introduces a subtle bug.
15:38:14 <heatsink> brb
15:38:28 <SamB> oh, you have a "fix"?
15:38:31 <edwardk> realize thats a bit off topic
15:38:59 <SamB> widescreen?
15:39:02 <vincenz> edwardk: the dell ones?
15:39:03 <SamB> oh, so you can turn it around?
15:39:04 <vincenz> 24 inch
15:39:09 <SamB> and have a tallscreen?
15:39:20 <edwardk> samb: yeah for reading papers on
15:39:25 <edwardk> looking for a good resolution
15:39:27 <Philippa> it's kinda the opposite approach, but I'm tempted to get a Nokia 770 on the basis you can drag it onto a sofa or read in bed
15:39:57 * edwardk tends to think sitting n the same desk chair he types from, otherwise he falls asleep. =)
15:40:24 <Philippa> in my case that often leads to staying up hours later than intended
15:40:27 <edwardk> vincenz: i found a 21" dell, but it got crappy reviews and didn't go as high resolution wise as i'd like
15:40:38 <Philippa> also, it'd give me an excuse to stay in bed when my SO's not going to get up for hours anyway
15:40:43 * edwardk tends to stay up til 6 am when i have to work at 8am anyways =)
15:40:47 <Philippa> which has advantages
15:40:59 <Philippa> yeah, I can't really get away with that so much now
15:41:19 * edwardk has a very understanding fiancee =)
15:41:40 <Philippa> Damien's usually last into bed these days anyway. I blame WoW.
15:46:16 <edwardk> hrmm the dell 24" doesn't seem to state it supports a 90 degree pivot
15:47:39 <edwardk> oh it does
15:47:40 <edwardk> neat
15:48:13 <dcoutts_> SyntaxNinja, g'evening! got any time to think about cabal configurations?
15:49:52 <heatsink> SamB: yes, my fix is the change to the mangler that removes the floating-point register spill & fill code
15:51:00 <dcoutts_> heatsink, do you know why it was removing the spill code?
15:51:02 <SamB> is there a bug already about the fact that anything using FP currently does not work?
15:51:11 <dcoutts_> for integer registers I think that was important
15:51:26 <heatsink> dcoutts_, What I mean is, my fix removes the spill code.
15:51:32 <dcoutts_> ah, ok
15:51:43 <SamB> heatsink: is there a bug?
15:51:52 <dcoutts_> and what happens to the values that you would have spilled?
15:52:07 <heatsink> The values that would have been spilled are just clobbered.
15:52:23 <dcoutts_> and that's safe?
15:52:33 <dcoutts_> I recall there was all this stuff about disabling the ia64 register window
15:52:38 <heatsink> I think that's unsafe.
15:52:47 <dcoutts_> at least when inside Haskell code
15:52:48 <heatsink> The register window is just for integer registers.
15:52:52 <dcoutts_> ah ok
15:52:56 <heatsink> when inside haskell code, it should be safe.
15:53:20 <dcoutts_> sorry, I mean in haskell code not using the register window
15:53:33 <dcoutts_> not about the safety of clobbering
15:53:35 <heatsink> But if the runtime or external C code makes use of those registers, there could be unexpected results
15:54:05 <dcoutts_> the runtime shouldn't use fp code I think
15:54:16 <dcoutts_> and it does do some saving stuff before ffi calls
15:54:53 <dcoutts_> have you talked to the guy who did the ia64 port originally?
15:54:57 <heatsink> Hmm.  Do you know what file does the ffi save/restore stuff?
15:55:16 <dcoutts_> I don't remember, no, but there's assembly there somewhere
15:55:31 <heatsink> No.  I did post a question to haskell-cafe a few days ago, but nobody replied there.
15:55:32 <dcoutts_> actually it's used even when returning to the RTS
15:55:46 <dcoutts_> heatsink, you probably want to email him directly
15:55:48 <dcoutts_> I did
15:55:55 <dcoutts_> he was very helpful
15:56:24 <dcoutts_> his email address is on the ghc dev wiki as ia64 maintainer
15:57:04 <heatsink> matt chapman?
15:57:23 <nostromo> a quick question, I can't find a definition of !! (google or the haskell wiki can't search such beasties). Any pointer?
15:57:39 <dcoutts_> heatsink, sounds right
15:59:13 <heatsink> nostromo, it's in the Prelude.  Do you have the source code of that?
15:59:25 <nostromo> yup, thnks
15:59:30 <heatsink> dcoutts_, ok, I'll check with him
15:59:58 <heatsink> thx
16:01:28 <nostromo> I see, it is just index. can I specify slices? (this is actually what I looked for)
16:01:52 <heatsink> That takes two functions: take and drop
16:02:05 <heatsink> take n gives you the first n elements
16:02:15 <heatsink> drop n ignores the first n elements
16:02:23 <heatsink> You should be able to write a slice function from those
16:17:10 <nostromo> cool 500 vs 5000 reductions. take and drop work quite well for infinite streams ;-)
16:18:19 <heatsink> heh
16:18:45 <heatsink> what are these reductions you're coutning?
16:18:48 <nostromo> fibonacci is tricky, as trivial implementations are exponential
16:19:13 <nostromo>  let fibs = 0:1:zipWith (+) fibs (tail fibs) in take 20 fibs
16:19:27 <nostromo> vs let fibs = 0:1:zipWith (+) fibs (tail fibs) in [fibs !!i | i<-[0..20]]
16:19:49 <heatsink> that's linear vs. quadratic.
16:20:14 <nostromo> yes, before it was far worser, with the naive implementation
16:20:57 <heatsink> (!!) turns out to be not very useful, because if you use it often you prbably want an array instead of a list...
16:21:05 <nostromo> [fibo i | i<- [1..20]] 750000 reductions
16:21:37 <heatsink> That's a lot more expensive.
16:21:53 <nostromo> so it is 500 taking the first 20 of the stream, 5000 computing the stream 20 times, 750000 computing the naive recursive solution
16:22:32 <nostromo> fibo n = fibo(n-1)+fibo(n-2))
16:23:24 <heatsink> One of those things about haskell... writing correct code is not so hard; writing good code takes much more knowledge of the language.
16:24:34 <SyntaxNinja> dcoutts_: nope :( its a little nuts, I'm traveling next week. but maybe something quick?
16:25:35 <nostromo> well, any recursive implementation of fibonacci is going to be hard, it is an exponential algorithm
16:49:43 <fasta> Can someone check whether this is indeed down? http://cvs.sf.net/
16:52:05 <stepcut> fasta: seems to be down for me
16:52:30 <fasta> stepcut: thank you.
17:06:38 <lispy> what are the requirements to get ghci on acid running?
17:06:43 <lispy> just lambdabot?
17:06:50 <lispy> do you have to be able to compile ghci?
17:10:16 <stepcut> just lambdabot+GoA
17:10:23 <stepcut> assuming you have a working ghci on your system
17:10:34 <stepcut> and possibly ByteString
17:10:48 <edwardk> ghci on acid?
17:11:25 * stepcut changes that to definately fps
17:11:39 <Cale> To get ghci running on acid, you can get the little gnomes who live in the bumps on the wall to help you.
17:13:24 <Cale> They will power it with the magical colour-swirling gems which they dig from their mines. Or was that minds?
17:13:30 <lispy> Cale: they don't like me anymore...
17:13:45 <lispy> Cale: i spill a cat on them...
17:14:19 <Cale> hehe
17:26:06 <thetallguy> I thought GoAs were extinct.
17:40:49 <musasabi> dcoutts: home now.
17:40:55 <dcoutts> hia Muad_Dib
17:40:56 <dcoutts> err
17:40:59 <dcoutts> musasabi,
17:41:10 * dcoutts curses tab-complete
17:41:43 <dcoutts> musasabi, so JaffaCake didn't like the '?' and I can't blame him :-)
17:42:11 <dcoutts> but the other aspect, that of flags seems more palatable
17:42:57 <dcoutts> btw, in my revised proposal I allow using(pkg>1.0) conditionals, but these may only refer to build-depends we've already comitted to
17:43:08 <dcoutts> so it can be used for the fps case
17:43:15 <dcoutts> without needing a user flag
17:43:42 <dcoutts> but any decisions that depend on the external environemnt need flags
17:43:59 <dcoutts> and since we're not having || deps then there's no foo || base trick
17:44:44 <dcoutts> there is a problem of ordering of evaluation of configurations
17:45:34 <dcoutts> there's some solutions to that, live with a top to bottom order, do them in dep order and ban cycles, iterate 'til fixpoint
17:45:34 <musasabi> dcoutts: how would that work with a renamed package?
17:45:50 <dcoutts> with a renamed package? example?
17:46:39 <dcoutts> ok so a package gets renamed from A to B
17:46:41 <musasabi> dcoutts: there is a package called foo-bar. Then it is merged to foo in a later version. Now we need to depend on either (foo-bar or foo > some_version)
17:46:50 <dcoutts> right
17:47:05 <musasabi> thus no build-depend for the package flags
17:47:41 <dcoutts> how would we deal with that under the original proposal?
17:48:02 <dcoutts> by checking what's available in the environment right?
17:48:52 <musasabi> build-depends: flag(old_foo) ? foo-bar, !flag(old_foo) ? foo
17:49:06 <musasabi> flag: old_foo = foo > some_version
17:49:12 <dcoutts> so we can do the same
17:49:16 <dcoutts> flag: old_foo
17:49:28 <dcoutts> default: available(foo>version)
17:49:42 <dcoutts> configurations: old_foo
17:49:49 <dcoutts> build-depends: foo-bar
17:49:52 <dcoutts> configurations: !old_foo
17:49:55 <dcoutts> build-depends: foo
17:50:34 <dcoutts> so it's expressed as a preference for the new version if it's available
17:50:43 <dcoutts> but we can make it go either way with the flag
17:51:25 <musasabi> hmm'
17:51:30 <musasabi> seems sensible
17:51:37 <musasabi> Have to read that in the morning
17:51:54 <dcoutts> it might not be sensible in the morning :-)
17:53:50 <musasabi> well it is 3:53 in the morning and I didn't sleep the night before this one.
18:00:09 <dcoutts> musasabi, wow, fair enough
18:22:35 <vincenz> woah
18:22:36 <vincenz> weird
18:22:42 <vincenz> my personal google homepage keeps refreshing at a high rate
18:22:57 <vincenz> bug?
18:23:24 <SamB> eh.
18:23:29 <SamB> maybe, maybe not ;-)
18:23:50 <SamB> ... you expected it to update only when something had changed?
18:24:16 <vincenz> erm
18:24:18 <vincenz> no sriously
18:24:21 <vincenz> I go to that pgage
18:24:26 <vincenz> it refreshes > 1/s
18:24:38 <SamB> yeah, I don't doubt that it does ;-)
18:25:13 <vincenz> no but it's messing up
18:25:24 <vincenz> like the whole page refreshes > 1/s
18:26:01 <SamB> hmm, point, it shouldn't reload the whole page...
18:26:24 <SamB> it should use web 2.0 and pull XML asynchronously, come to think of it...
18:28:06 <vincenz> I know
18:28:08 <vincenz> it's never done this before
18:28:15 <vincenz> I thought perhaps a virus on my comp
18:28:22 <SamB> I didn't like it very much for some reason anyway
18:28:23 <vincenz> or they got hacked?
18:28:32 <SamB> they mis-hacked, more likely
18:31:12 <vincenz> OH!
18:31:14 <vincenz> New features!
18:34:38 <SamB> see? and while they were added they added the feature that makes it reload multiple times a second ;-)
18:34:48 <SamB> s/added/at it/
18:34:52 <jargonjustin> vincenz: Now refreshing at greater than 60Hz!
18:35:03 <SamB> jargonjustin: uh
18:35:14 <SamB> 60Hz is 60/s, not 60/m
18:35:23 <SamB> er, 60/min
18:35:30 <jargonjustin> SamB: Whoops, you're right.
18:35:41 <vincenz> 60 mertz
18:36:01 <jargonjustin> Web sites should not have a cycle time, certainly not in the same range as my TV.
18:36:59 <vincenz> seems they were prepping for new features
18:37:05 <vincenz> gogle calendar
18:37:07 <vincenz> and date and time
18:37:11 <vincenz> plugins for personal homepage :)
18:37:21 <SamB> you'd think they could do that with web *1.0*
18:37:49 <SamB> the date and time, I mean
18:37:50 <vincenz> what?
18:37:53 <vincenz> tv-refresh?
18:37:59 <vincenz> SamB: no like a nice plugin :)
18:38:05 <vincenz> with localized clock :)
18:38:10 <vincenz> looks neat too
18:38:28 <SamB> doesn't the browser usually give the local time to JavaScript programs that ask for the time?
18:39:03 <SamB> or do you mean that it goes counter-clockwise in the southern hemisphere?
18:41:03 <vincenz> it just looks neat
18:41:05 <vincenz> try it out
18:43:52 <vincenz> btw
18:44:02 <vincenz> counter-clockwise rotation of water is a myth
18:45:23 <SamB> it always goes clockwise?
18:45:24 <SamB> really?
18:46:16 <vincenz> no
18:46:18 <benja_> http://www.snopes.com/science/coriolis.htm
18:46:20 <lambdabot> Title: Urban Legends Reference Pages: Science (Flush Bosh)
18:46:23 <vincenz> benja_: it's bs
18:46:25 <vincenz> in fact
18:46:43 <vincenz> a mechanical professor of our uni went down to the equator to demonstrate
18:46:45 <vincenz> before explaining the math
18:46:51 <vincenz> coriolis is far too weak a force to work on water
18:46:56 <vincenz> especially so localised
18:47:20 <SamB> so which way does it go, then?
18:47:38 <vincenz> which ever awy the nozzle is directed
18:47:43 <vincenz> if it turns at all
18:56:43 <madpickle> say, i have a list comprehension that calls take; is there a way to get the index of the current element the list comprehension?
18:56:46 <madpickle> like:
18:57:06 <madpickle> [(n, i) | n <- take 50 [1..], ???]
18:57:14 <Cale> zip [0..]
18:57:19 <madpickle> ooh
18:57:23 <madpickle> so obvious :(
18:57:39 <Cale> It's only obvious after you've seen it :)
18:58:45 <cmarcelo> is it possible generating a haskell program statically linked to a C library? ghc "-static" flag seem to work only with haskell libs..
18:59:08 <cmarcelo> (with GHC)
19:00:05 <dons> you have to pass -static to gcc as well, I think
19:00:09 <dons> -optc-something
19:01:20 <LordBrain> dons, :)
19:01:25 <LordBrain> I added visual mode
19:02:15 <LordBrain> http://urz.jerkface.net/yi/Yi.png
19:02:26 <Korollary> nice url
19:02:53 <LordBrain> you like it?
19:03:06 <LordBrain> domain belongs to a friend of my brother's...
19:03:07 <Korollary> what is it doing?
19:03:15 <Korollary> highlighting?
19:03:36 * Korollary is an emacs user
19:03:41 <LordBrain> yeah, and cut and paste, and replace, all those vim style visual mode goodies.
19:03:45 <Korollary> ah ok
19:03:56 <Korollary> how do you copy and paste in vim?
19:04:16 <Dylan> vjjjjy
19:04:36 <Dylan> among many other ways
19:05:17 <benja_> `1
19:05:26 <LordBrain> vim has a mode that vi doesnt, called visual mode, that is basicly for selecting regions.
19:05:34 <benja_> [sorry, wrong key]
19:06:41 * dons looks
19:06:57 <dons> hey!!
19:07:02 <dons> ?karma+ LordBrain
19:07:02 <lambdabot> LordBrain's karma raised to 2.
19:07:03 <dons> ?karma+ LordBrain
19:07:03 <lambdabot> LordBrain's karma raised to 3.
19:07:05 <dons> well done!
19:07:13 <LordBrain> :)
19:07:19 <dons> very very nice.
19:07:27 <Korollary> Yi for teh win
19:08:11 <LordBrain> there is a little bug in the display of the highlight that i'm going to fix, then i'll record the patch
19:08:15 <dons> so, now we just need the syntax highlighting done. i should commit my partial syntax highlighter, and just let you finish it...
19:08:31 <jgrimes> mm syntax highlighting in yi would get me interested
19:09:00 <LordBrain> we need tabs fixed, the cursor movement operations still choke on tabs.
19:09:17 <dons> yes. that too
19:09:49 <dons> here's my current status with syn hl:
19:09:50 <dons> http://www.cse.unsw.edu.au/~dons/images/yi-color.png
19:09:55 <dons> I can do one line :)
19:10:03 <LordBrain> also... range isnt supported yet.. even tho the visual mode outputs the range syntax dutifully when you push :
19:10:10 <Korollary> full blown parser?
19:10:15 <dons> ghc's lexer
19:10:58 <Korollary> how is indenting going to work?
19:11:09 <dons> add a parser ?
19:14:46 <dons> ?users
19:14:47 <lambdabot> Maximum users seen in #haskell: 235, currently: 195
19:15:03 <lispy> ?lusers
19:15:03 <lambdabot> Maximum users seen in #haskell: 235, currently: 195
19:15:07 <lispy> ;)
19:16:56 <madpickle> ok, what i have now is: [(a,b) | a <- take 50 [1,4..], b <- take 50 [1..]]
19:17:21 <madpickle> the problemwith that is it's squared, and will run the a <- qualifier 50 times
19:17:32 <madpickle> how can i make the index counter, but make it only execute it once?
19:17:45 <lispy> paralell list comp. or zip
19:17:54 <madpickle> could you show me either?
19:18:08 <lispy> > zip (take 50 [1,4..]) (take 50 [1..])
19:18:09 <lambdabot>  [(1,1),(4,2),(7,3),(10,4),(13,5),(16,6),(19,7),(22,8),(25,9),(28,10),(31,11)...
19:18:30 <lispy> i don't know the syntax for parallel list comps.
19:18:39 <madpickle> ok
19:18:43 <madpickle> i'll have a play with that - thanks.
19:18:55 <lispy> np, just hope it's close to what you wanted :)
19:19:06 <lispy> @type zip
19:19:08 <lambdabot> forall b a. [a] -> [b] -> [(a, b)]
19:19:50 <dons> > [ (x, y) | x <- "haskellisfun" | y <- [1..10] ]
19:19:50 <lambdabot>  Parse error
19:19:56 <dons> bah no parallel list comps
19:20:13 <madpickle> i use Hugs - does it support that?
19:20:17 <dons> Prelude> [ (x, y) | x <- "haskellisfun" | y <- [1..10] ]
19:20:17 <dons> [('h',1),('a',2),('s',3),('k',4),('e',5),('l',6),('l',7),('i',8),('s',9),('f',10)]
19:20:26 <madpickle> my book says nothing about parallel list comprehensions
19:20:27 <dons> probably not supported in hugs
19:21:55 <dons> hmm. theyre' a bit underused. maybe i should try to use them more often
19:23:12 <dons> so, if list comprehensions are a syntax for map and filter. parallel list comprehensions are syntax for the zip* s
19:23:58 <jlhamilton> > take 50 (zip [1,4..] [1..])
19:23:59 <lambdabot>  [(1,1),(4,2),(7,3),(10,4),(13,5),(16,6),(19,7),(22,8),(25,9),(28,10),(31,11)...
19:24:04 <LordBrain> 5Chmmmmm
19:24:09 <dons> > [ e | e <- zip [1,4..] [1..] ]
19:24:11 <lambdabot>  [(1,1),(4,2),(7,3),(10,4),(13,5),(16,6),(19,7),(22,8),(25,9),(28,10),(31,11)...
19:24:36 <ell-hask> Does anyone else have trouble compiling wiht -prof on an AMD64?
19:24:50 <LordBrain> could htat have worked for that question we had the other day about strings and conditions?  [ s | s <- strings | c <- conditions, cs]
19:25:09 <LordBrain> s/cs/c s/
19:25:09 <dons> probably. since its just syntax for zips
19:25:16 <LordBrain> hmmm
19:25:24 <LordBrain> a zip wouldnt do it actually...
19:25:27 <dons> [ e | e <- zip [1,4..] [1..] ] == [ (a,b) | a <- [1,4..] | b <- [1..] ]
19:25:38 <LordBrain> we needed the conditions all mapped over each s
19:26:04 <LordBrain> so that answers my question
19:26:06 <LordBrain> :)
19:28:50 <ell-hask> > [land | land <- middleEarth, (not.elem) land mordor]
19:28:51 <lambdabot>  Not in scope: `mordor'
19:31:59 <Pete_I> haha
19:32:24 <Pete_I> must be too far to travel.
19:32:47 <vincenz> (not . elem) won't work
19:32:49 <vincenz> you need
19:32:53 <vincenz> (not .) . elem
19:33:51 <dons> or: mordor `notElem` land
19:34:00 <dons> ?hoogle notElem
19:34:01 <lambdabot> Prelude.notElem :: Eq a => a -> [a] -> Bool
19:34:24 <dons> however, I think this code doesn't type check anyway
19:34:26 <vincenz> or
19:34:30 <lispy> you guys and your fancy functions
19:34:30 <vincenz> dons (problem statement)
19:34:32 <dons> since land :: Land, and mordor :: Land
19:34:57 <dons> you really mean > [ land | land <- middleEarth, land /= mordor ]
19:35:17 <ell-hask> more like, land does not intersect with mordor.
19:35:35 <ell-hask> subset, proper or not
19:35:36 <dons> ah i see. hmm
19:35:45 <dons> ?hoogle intersect
19:35:46 <lambdabot> List.intersect :: Eq a => [a] -> [a] -> [a]
19:35:46 <lambdabot> Data.Set.intersect :: Ord a => Set a -> Set a -> Set a
19:35:46 <lambdabot> List.intersectBy :: (a -> a -> Bool) -> [a] -> [a] -> [a]
19:36:12 <ell-hask> [land | land <- middleEarth, not $ intersect land mordor]
19:36:16 <ell-hask> sounds good
19:36:23 <dons> doesn't type check ;)
19:36:26 <vincenz> yes it does
19:36:31 <vincenz> middleearth = [[Land]]
19:36:38 <dons> ?type not . intersect
19:36:40 <lambdabot>   Expecting a function type, but found `b'
19:36:40 <lambdabot>    Expected type: [a] -> Bool
19:36:50 <vincenz> oh
19:36:56 <dons> intersect land mordor /= []
19:36:58 <vincenz> @type (not .) . intersect
19:36:59 <lambdabot>   Couldn't match `Bool' against `[a]'
19:36:59 <lambdabot>    Expected type: [a] -> [a] -> Bool
19:37:18 <vincenz> @type (null . ) . intersect
19:37:19 <lambdabot> forall a. (Eq a) => [a] -> [a] -> Bool
19:37:40 <ell-hask> right, null
19:37:53 <dons> yeah
19:37:59 <ell-hask> what is the best way to find an infinate loop in your code?
19:38:10 <vincenz> ell-hask: execute it and run it for really long
19:38:26 <dons> compile with profiling, and terminate it. then the loop should be on top of the call stack
19:38:32 <ell-hask> I mean, locate what in your code is causing the infinate loop.
19:38:58 <vincenz> ell-hask: give code to dons
19:38:59 <ell-hask> dons: I tried to use prof, but my compiler hates me.  Is there a problem with the FC5 rpms?
19:39:14 <dons> no idea.
19:39:39 <dons> you'll need 6.5 to have termiation generate profiing output anyway, I think
19:39:49 <ell-hask> Well, I'll move it to my more stabe system once it is free.
19:41:01 <ell-hask> 6.5 is planned for release soon?
19:41:09 <dons> yes
19:41:13 <dons> 2 weeks or so
19:44:35 <lispy> oh, that's soon
19:45:09 <Cale> Awesome :)
19:45:24 <Cale> Is it in feature-freeze?
19:46:20 <vincenz> that like brain-freeze?
19:46:44 <Cale> yeah, but without the ice cream
19:46:58 <vincenz> sounds just painful
19:48:08 <VyNiL> Hello, ive heard of the existence of some so called "code brokers" that manage data structures between different languages
19:48:17 <VyNiL> but cant find anything about it on the net
19:48:31 <VyNiL> does anyone know where i can get information about it?
19:50:13 <vincenz> o.O
19:50:17 <dons> sounds a little like a foreign function interface?
19:50:24 <dons> but that's not a term i've heard before.
19:50:57 <Cale> There was this one FFI library which applied to a fairly wide set of languages, but I can't remember its name. I think it started with an S.
19:51:00 <vincenz> swig?
19:51:16 <Cale> could have been
19:51:36 <Cale> yeah, that looks like it
19:51:49 <vincenz> yeah swig
19:52:41 <VyNiL> that narrows my searcha a lot! thanks ;)
19:52:46 <Dylan> swig's quite insane for some languages.
20:03:59 <dons> oh fact for the day. class constraints can be written infix: f :: (a :=: b) => a -> b
20:04:27 <Cale> heh, cool
20:04:34 <Cale> with unicode?
20:04:43 <dons> ascii is ok. i presume unicode works too
20:04:58 <newbcoder> how does hugs and ghc compare?
20:05:12 <Cale> newbcoder: ghc is more featureful
20:05:15 <dons> * Back-quotes work as for expressions, both for type constructors and type variables
20:05:17 <Cale> It's a compiler
20:05:27 <Cale> and comes with ghci which is sort of comparable to hugs
20:05:38 <Cale> hugs has a prettier interface on windows
20:05:53 <newbcoder> hmm
20:05:54 <dons> * Fixities may be declared for type constructors, or classes
20:06:11 <Cale> and hugs is an interpreter, which means that it's generally slower
20:06:21 <newbcoder> okay; it's ghc then
20:06:22 <newbcoder> thanks :-)
20:06:23 <Pete_I> it is pretty though :)
20:06:52 <Cale> We need a pretty cross-platform UI for GHC :)
20:07:22 <Cale> or at least on windows, since terminal emulators all suck on windows
20:09:34 <svref> how do I find the nth element in a list?
20:10:46 <Cale> svref: xs !! n
20:11:10 <Cale> > ["Oranges", "Apples", "Pears", "Grapes"] !! 2
20:11:11 <lambdabot>  "Pears"
20:11:38 <svref> wow, you got a problem, haskell has some unintuitive punctuation to solve it!  Almost Perl-like in that regard.  :)
20:12:24 <sieni> > [0..] !! 5p
20:12:25 <lambdabot>  Not in scope: `p'
20:12:28 <sieni> > [0..] !! 5
20:12:29 <lambdabot>  5
20:12:57 <dons> ?type (!!) -- its just a function
20:12:58 <lambdabot> forall a. [a] -> Int -> a
20:13:27 <johnnowak> what's the logic behind the !! syntax?
20:13:30 <LordBrain> hmm "code broker" makes me think of corba
20:13:37 <LordBrain> corba or com or something
20:13:59 <svref> if it were to use any funk punctuation at all, it should use the array-ref metaphor: x[i]
20:14:15 <dons> but you can't write that as a function in haskell. it would have to be special syntax
20:14:42 <dons> > let (.!.) = (!!) in [0..5] .!. 4
20:14:43 <lambdabot>  4
20:15:32 <svref> Right, so instead they just grabbed something out of the air, even more difficult to remember than just calling the function "banannas".  (I'm not really grouchy, mind you, I just tried googling this first and found zilch, so feel defensive)
20:15:47 <dons> shrug. now you now
20:15:50 <dons> know
20:15:55 <svref> thank you.
20:15:57 * johnnowak prefers (list-ref '(Oranges Apples Pears Grapes) 2) 
20:15:59 <dons> you should hoogle for these things
20:16:07 <dons> ?hoolge [a] -> Int -> a
20:16:08 <lambdabot> Prelude.(!!) :: [a] -> Int -> a
20:16:17 <Cale> svref: Also, read the prelude
20:16:22 <LordBrain> it really should be a subscript
20:16:23 <Cale> It'll save you lots of trouble :)
20:16:27 <LordBrain> but we cant write subscripts
20:16:45 <Cale> http://haskell.org/onlinereport/standard-prelude.html
20:16:46 <lambdabot> Title: The Haskell 98 Report: Standard Prelude
20:17:06 <Cale> There's a lot of subtly cool stuff in there
20:17:07 <svref> I've been trying too, but I don't really know where "the prelude" can be read, at least in human readable form...
20:17:13 <Cale> right there
20:17:35 <dons> when i was learning, i just printed out the Prelude.hs file, and memorised it :)
20:17:38 <LordBrain> [] would just make it like other computer langauges... but x[i] isnt any more natural than x !! i, it's jsut that you already learned it.
20:17:47 <vincenz> dons: HAH
20:17:55 <vincenz> dons: I printed out the GHC sources to learn haskell
20:17:55 <LordBrain> unless i'm missing something...
20:18:20 <LordBrain> i printed it too dons!
20:18:20 <vincenz> dons: Not to learn it through the used haskell, but by analyzing what the compiler did with the code, it was self-bootstrapping knowledge
20:18:25 <LordBrain> great minds
20:18:40 <dons> heh
20:18:52 <LordBrain> i have a notebook filled with printouts
20:19:00 <vincenz> :P
20:19:03 <LordBrain> prelude is in there from the report
20:20:25 <svref> LordBrain: so you're arguing there's no value to doing something the way Every Other Language does something?!  By that logic, perhaps we should change vowels 'aeiou' into whitespace.  :)
20:20:55 <dons> svref: the point is: you can't write x[n] without resorting to hacking the language
20:21:01 <dons> so they didn't hack the language
20:21:03 <svref> ok.
20:21:28 <svref> I would have just named it with a function name I'd have a chance to guess, like list-ref, or elt, or nth....
20:21:38 <dons> index?
20:21:40 <LordBrain> hmmmm its not every other language....
20:21:43 <dons> sometimes it's called 'index'.
20:21:45 <svref> that's thes print
20:21:51 <LordBrain> scheme doesnt do it that way...
20:21:52 <svref> that's the SPIRT
20:22:01 <dons> anyway, this x[n] syntax is only used in some languages unrelated to haskell
20:22:03 <svref> that's the SPIRIT!
20:22:03 <LordBrain> does ocaml do it that way?
20:22:13 <johnnowak> neither [] nor !! is logical.
20:22:28 <Cale> Of course, you could also write it yourself :)
20:22:49 <ell-hask> On the standardization topic: why did they decide on 31 bits for the language though?  That seems like a really unneeded hack.
20:22:58 <ell-hask> I mean, for Int
20:23:01 <svref> wow, "spirit" is really _really_ hard for me to type, since my brain tries really hard to type "print" instead.
20:23:06 <dons> hmm? you want to enable the option of a tag bit, ell-hask
20:23:08 <lispy> ell-hask: yeah, that bugs me too
20:23:20 <dons> its 2^29-1, isn't it?
20:23:21 <LordBrain> since haskell tries to be reminescent of the notations used in mathematics, i think if anything it should be a subscript..
20:23:39 <ell-hask> Oh, well, that is even worse.
20:23:44 <lispy> subscripting is hard in ascii
20:23:48 <LordBrain> yeah
20:23:54 <Cale> LordBrain: I agree there, but obviously we have a way to go in text-encoding technology before that'll happen
20:23:54 <svref> x_i
20:24:06 <lispy> we could have a language basde on latex :)
20:24:23 <dons> define some unicode symbol for (!!)
20:24:29 <lispy> \frac{ 1 }{ 2 } instead of 1 / 2
20:24:31 <dons> that should be enough for anyone ;)
20:24:33 <LordBrain> x_i notation, that makes sense, too bad we used _ for dummy variables
20:24:51 <Cale> It'll be nice when ghc6.6 comes out and we can define ∈ :)
20:24:52 <dons> but also remember, !! is an unusual operation on lists
20:25:00 <dons> so why have special support?
20:25:02 <svref> Yeah, I guess _ is more useful in dummy vars.
20:25:03 <Cale> Yeah, that's a good point
20:25:05 <lispy> i think pattern matching is more common than !! so i think using _ for patterns was wise
20:25:12 <LordBrain> good point there dons
20:25:19 <Cale> svref: If you find that you need !! a lot, you're using the wrong data structure
20:25:24 <svref> I agree
20:25:31 <Cale> xs !! n is O(n)
20:26:01 <ell-hask> svref: But there is an array data type in the standard libs.
20:26:10 <lispy> isn't it worse than that because you might need to compute the spine of the lisT?
20:26:13 <svref> well, if people are interested, the problem I'm trying to solve (very crappily) is to find the median of a list of integers.  Right now I'm just finding the middle element of the list after sorting it.
20:26:36 <svref> effeciency isn't a concern, O(n^8) is fine
20:26:39 <lispy> svref: i think that's fairly reasonable
20:26:46 <LordBrain> thats the mode
20:26:53 <LordBrain> middle after sorting
20:26:57 <LordBrain> median is the average...
20:26:58 <johnnowak> no it isn't.
20:27:12 <johnnowak> median is the middle after sorting.
20:27:16 <lispy> i thought median = mode...but i get all those m words mixed up :)
20:27:18 <LordBrain> oh
20:27:22 <johnnowak> mode is the most common
20:27:24 <lispy> or is mode most common?
20:27:25 <johnnowak> mean is the "average"
20:27:26 <lispy> ah
20:27:27 <svref> never heard of "mode".
20:27:29 <LordBrain> thats right, mode is most common
20:27:41 <nostromo> la mode :)
20:27:57 <lispy> ala mode?
20:28:08 <mwc> What's the median of a set of numbers with even cardinality?
20:28:18 <svref> ah, so everyone wants ala mode because it implies ice-cream.
20:28:24 <LordBrain> so mean is the average, and the median is the middle after sorting..
20:28:33 <svref> mwc: you just pick one of the inner two.
20:28:45 <LordBrain> mwc: the average of the two middle numbers
20:29:02 <LordBrain> oh
20:29:06 <johnnowak> in some cases it might be acceptable to take the mean of the middle two, but generally you don't
20:29:45 <nostromo> so sorting is n.ln n for reasonable algorithms (say quicksort)
20:30:02 <mwc> the significance of a median or mode is that's it's an actual datum, you wouldn't want to ruin that by averaging
20:30:16 <nostromo> inserting in a balanced btree and taking the root element could be a straight solution
20:30:34 <mwc> Apparently the definition is that the median is the element such that no more than half of the set is greater than it, and no more than half is less than it.
20:30:47 <mwc> So I think that either of the two inner ones could be considered a median in that case.
20:30:54 * johnnowak nod
20:39:36 <ell-hask> svref, how is the median code going?
20:40:15 <ell-hask> Have you tried to subtract the mean, find what number is closest to zero, and add the mean back?  That is a fun way to do it.
20:40:54 <ell-hask> Not that it actually works.
20:41:05 <lispy> lol
20:41:41 <cmarcelo> dons: tks for the -optc tip.
21:03:13 <LordBrain> dons: the patch is ready now
21:03:39 <LordBrain> (visual mode patch for yi)
21:03:47 <LordBrain> pull it from my repo
21:06:18 <LordBrain> hmmm there's still some bug fixes needed
21:06:37 <LordBrain> but i'll go ahead and release it.. and let the fixes come in separate patches.
21:06:46 <LordBrain> lots of new features.
21:08:10 <LordBrain> something wrong with the >> and <<
21:26:00 <SamB> sweet ;-)
21:26:33 <SamB> RWS gives output lazilly ;-)
21:26:40 <LordBrain> RWS?
21:26:48 <SamB> at least, as long as you don't need the S
21:26:57 <SamB> @hoogle RWS
21:26:57 <lambdabot> Control.Monad.RWS :: module
21:26:57 <lambdabot> Control.Monad.RWS.RWS :: (r -> s -> (a, s, w)) -> RWS r w s a
21:26:57 <lambdabot> Control.Monad.RWS.RWS :: newtype RWS r w s a
21:27:13 <lucca> how about RMS?
21:27:26 <SamB> RMS gives output still?
21:27:30 <lucca> heh
21:27:36 <SamB> I thought he was like old or something by now!
21:28:26 <SamB> RWS seems to work nicely for linting
21:42:08 <glguy> 'lo
21:49:39 <svref> What is the division that works like Integer -> Integer -> Float
21:49:48 <svref> ?
21:51:25 <Cale> svref: apply fromIntegral to the Integers first
21:54:32 <svref> > avg x = (sum x) / (length x)
21:54:32 <lambdabot>  Parse error
21:55:04 <dons> > let avg x = (sum x) / (length x) in avg [1..5]
21:55:05 <lambdabot>  add an instance declaration for (Fractional Int)
21:55:05 <lambdabot>   In the definition of `...
21:55:13 <dons> > let avg x = (sum x) / (genericLength x) in avg [1..5]
21:55:14 <lambdabot>  3.0
21:55:16 <Cale> > let avg x = (sum x) / (fromIntegral $ length x) in avg [2,7,3,1,5]
21:55:17 <lambdabot>  3.6
21:55:27 <Cale> or that, yeah
21:55:35 <dons> my genericLength trumps your fromIntegral ;)
21:55:54 <|Steve|> What does fromIntegral $ length x do?
21:55:59 <|Steve|> I've never seen $.
21:56:02 <dons> ?type ($)
21:56:04 <lambdabot> forall b a. (a -> b) -> a -> b
21:56:08 <Cale> same as  fromIntegral (length x)
21:56:12 <dons> ?type length [1..10]
21:56:14 <lambdabot> Int
21:56:20 <dons> ?type fromIntegral (length [1..10])
21:56:21 <lambdabot> forall b. (Num b) => b
21:56:23 <dons> ?type fromIntegral $ length [1..10]
21:56:24 <lambdabot> forall b. (Num b) => b
21:56:25 <Cale> f $ x = f x, but $ has really low precedence
21:56:41 <svref> so length returns a hardware-accellerated Int?
21:56:46 <|Steve|> Oh, that's good to know.
21:56:49 <Cale> right
21:56:50 <dons> yep. hardware accelerated
21:56:54 <Cale> hehe :)
21:57:08 <Cale> and then boxed ;)
21:57:20 * dons propoes that # now be known as the hardware-accelerated kind
21:57:44 <|Steve|> "hardware-accelerated" ints?
21:57:53 <dons> ?type length
21:57:55 <lambdabot> forall a. [a] -> Int
21:58:04 <dons> ?type genericLength
21:58:05 <lambdabot> forall i b. (Num i) => [b] -> i
21:59:43 <glguy> |Steve|: "hardware accelerated int" just means "normal 32-bit int that the processor is good with dealing with, assuming for a 32 bit processsor"
21:59:59 <glguy> rather than the Integer type, which uses arbitrary space
22:00:05 <svref> yep.  Not so hot at those 300-bitters.
22:00:10 <glguy> to hold numbers larger than Int
22:00:20 <Cale> > 2^1024
22:00:22 <lambdabot>  1797693134862315907729305190789024733617976978942306572734300811577326758055...
22:01:00 <svref> is there no GC tag ala Ocaml?
22:01:23 <svref> e.g. Ocaml's 31 bit integer type
22:01:23 <|Steve|> I wouldn't call that hardware accelerated.
22:01:31 <SamB_XP> heh
22:01:34 <|Steve|> I'd just say it was an Int rather than an Integer.
22:01:43 <glguy> it's a native type
22:01:49 <SamB_XP> no, the GC goes off the entry pointer...
22:01:54 <dons> there's unboxed values, yes.
22:01:59 <svref> Steve: well, the analogy from computer graphics is, I think, straightforward
22:02:07 <SamB_XP> and only boxed values have those
22:02:08 <dons> ?type 1#
22:02:09 <lambdabot> GHC.Prim.Int#
22:02:19 <SamB_XP> info pointer, it is also called
22:02:19 <dons> that's as hardware accelerated as you'll get
22:02:27 <glguy> Either way I don't care :) this isn't my comparison
22:02:56 <SamB_XP> because the info table is directly before the code...
22:03:35 <glguy> is there any way for code compiled by haskell to make use of the PowerPC's altivec operations?
22:03:38 <SamB_XP> oh, and Ints are boxed
22:03:42 <|Steve|> svref: Not really. In that case you're talking about hardware that'd meant for dealing with triangles (or quads or strips of them) rather than doing it in software. The values themselves are the same.
22:04:01 <SamB_XP> glguy: you might as well write that kinda code in C and/or ASM
22:04:21 <glguy> I'm aware that you can do it in C and ASM
22:04:28 <|Steve|> altivec is actually fun to write.
22:04:34 <|Steve|> I'd do it in C using the intrinsics though.
22:04:43 <|Steve|> No need to do assembly. Let the compiler schedule instructions for you.
22:05:13 <dons> yeah, write some C to do it, and call the C functions directly from Haskell
22:05:30 <Cale> You don't write altivec code directly, you write code which solves discrete optimisation problems to generate altivec code ;)
22:05:31 <glguy> but GCC never optimizes to use the altivec instructions?
22:05:46 <svref> Steve: and when you use bignums for adding 2+2, the values are the same there too.  :)
22:06:12 <LordBrain> what's altivec?
22:06:55 <|Steve|> glguy: I've had to unroll loops written with altivec to get gcc to scheudle sanely, but it does do it.
22:07:08 <|Steve|> It's loop unrolling doesn't work as well (hence the manually).
22:07:34 <|Steve|> svref: Not true at all. I mean the data passed to the hardware is exactly the same as passed to the software. The difference is how the processing is done.
22:07:47 <glguy> my logic was just that ghc generates c, and compiles it with gcc, so there could be potential that the resulting code would be able to utilize optimizations that generate altivec code
22:07:49 <|Steve|> You don't have special types to use hardware rendering.
22:08:06 <|Steve|> glguy: Quite possibly. Pass -faltivec and -maltivec if possible.
22:08:15 <|Steve|> (I think those are the right options.)
22:08:51 <|Steve|> On linux, you need something like -mabi=altivec
22:09:09 * Starglider has one of the last PowerMac G4s, it is rather sad that PPC is going away.
22:09:19 <|Steve|> It is sad.
22:09:20 <svref> Steve: maybe you're programming at a lower level than I ... I have no idea if GL translates my glVertex3f into a different, implementation specific data type.
22:09:26 <glguy> I have one of the final G4 Powerbooks too
22:09:27 <Starglider> Unless you write console games anyway.
22:10:09 <|Steve|> svref: My point was you pass it vectors consisting of three or four floats in either case.
22:10:21 <svref> not if I use glVertex3i :)
22:10:30 <|Steve|> heh, true.
22:10:50 <glguy> LordBrain: altivec instructions accelerate vector operations. i really don't know much about it, i believe that it is like how Intel processors have SSE or MMX instructions
22:11:02 <|Steve|> That's correct.
22:11:12 <|Steve|> SSE is harder to write in my opinion.
22:11:13 <glguy> something relating to performing the same operation to a lot of data
22:11:21 <|Steve|> There are fewer xxm registers for one thing.
22:11:22 <glguy> and possibly more
22:11:38 <|Steve|> mmx is gutted, it can't be interleaved with the x87 instructions for some strange reason.
22:11:48 <LordBrain> will the scarcity of g4 powerbooks make them expensive? or will people fear they wont be supported by any new software and that will make them cheaper?
22:11:56 <dottedmag> |Steve|: reason was the cost.
22:11:56 <Starglider> MMX is legacy tech anyway as of x86-64
22:12:04 <Cale> hrm, any idea why my processor might be running at 100% without any process appearing in top to be using significant amounts of CPU?
22:12:11 <glguy> LordBrain: no more expensive than the P4 made the PIII
22:12:13 <Starglider> As is x87.
22:12:13 <|Steve|> I don't think mmx has anything to do with x86-64.
22:12:17 <|Steve|> They are 64 bit registers though.
22:12:29 <Starglider> I thought MMX ops aren't allowed in 64bit mode.
22:12:42 <|Steve|> LordBrain: Making so-called univeral binaries is pretty easy.
22:12:49 <|Steve|> mmx registers are 64 bit.
22:13:02 <glguy> you just tell X-code to do it
22:13:08 <|Steve|> Xcode, but yes.
22:13:14 <LordBrain> yeah.. i dont think there will be a problem with software support, but maybe if that is the impression in the market i dont know.
22:13:24 <|Steve|> It took me about a week to convert my project to a working universal  binary.
22:13:58 <|Steve|> I think people's G5s will be around for a while (I know mine will be) so I really hope UBs don't go away in favor of i386 only any time soon.
22:14:17 <dons> Cale: hmm. kernel bug
22:14:19 <dons> ?
22:14:24 <SamB_XP> they not makin' PPC hardware anymore?
22:14:25 <Cale> dons: that's what I'm thinking
22:14:30 <svref> Dag nabbit, I'm still having trouble writing the function "average", because I can't divide!
22:14:40 <svref> avg x = (sum x) / (List.genericLength x)
22:14:41 <dottedmag> Cale: kernel doing something expensive, like non-DMA data transfer.
22:14:44 <glguy> Apple finished converting their whole hardware line to intel at the WWDC
22:14:46 <|Steve|> SamB_XP: IBM is probably still making them, but Apple is no longer selling them in new products.
22:14:46 <LordBrain> ppc will still be popular in cars
22:14:48 <LordBrain> heh
22:14:52 <glguy> which is going on now
22:15:02 <glguy> or
22:15:03 <glguy> just ended today
22:15:05 <dons> ?pl average x = sum x / (genericLength x)
22:15:06 <lambdabot> average = liftM2 (/) sum genericLength
22:15:07 <|Steve|> ppc is a lot of fun, I have to say.
22:15:11 <Cale> Whatever it was, it just randomly stopped.
22:15:20 <dons> > let average = liftM2 (/) sum genericLength in average [1..100]
22:15:21 <lambdabot>  50.5
22:15:28 <SamB_XP> its too bad they had to switch...
22:15:39 <SamB_XP> it will be such a boring world with just intel...
22:15:46 <Cale> I just hope it's some stupid kernel issue and not that I'm rootkitted :)
22:15:47 <|Steve|> x86 needs to die.
22:15:53 <Starglider> PPC powers all of the current gen consoles.
22:15:54 <|Steve|> It needed to die a decade ago.
22:16:00 <Korollary> Cale: oh no. bsd bug.
22:16:01 <SamB_XP> |Steve|: I wouldn't go quite that far
22:16:05 <|Steve|> No?
22:16:08 <|Steve|> It's a terrible arch.
22:16:12 <SamB_XP> but it certainly shouldn't be the only thing there is
22:16:18 <|Steve|> The only reason it works is that it's risc "under the hood."
22:16:18 <Starglider> And x86-64 isn't exactly i386
22:16:29 <|Steve|> Granted, but the IA-32 needs to die.
22:16:36 <|Steve|> or the IA32-64 as some are calling it.
22:16:44 <|Steve|> IA-64 was a travesty.
22:16:51 <Starglider> Travesty?
22:16:54 <SamB_XP> huh?
22:17:02 <SamB_XP> IA32-64?
22:17:16 <Starglider> More like a research project that got commercialised way before it was ready.
22:17:22 <dottedmag> designed to be compatible with 16-bit processor designed to be compatible with 8-bit processor :)
22:17:29 <|Steve|> SamB_XP: I saw someone call x86-64 IA32-64.
22:18:08 <SamB_XP> dottedmag: it does pretty well considering
22:18:25 <svref> dons: when I call "avg" with [1..10] it works, but when I try it on my real data it crashes: [340,375,413,443,483,523,563,603,645,686,726,766,806,846,886,926,966,1006,1046,1084,1124,1174,1233,1293]
22:18:46 <svref> dons: No instance for (Fractional Integer)...
22:19:08 <Cale> svref: map (fromIntegral data)
22:19:14 <dottedmag> SamB_XP: Why not use some emulation mode instead and drop historical warts?
22:19:27 <svref> Cale: what's going on here?
22:19:39 <Cale> svref: You're using / with integers, which is disallowed
22:19:40 <LordBrain> the emulation mode is in the hardware.. its fast
22:19:40 <SamB_XP> emulation mode?
22:19:50 <Starglider> Ah, that comment I made about MMX/x87 being no longer supported is actually just a Windows thing.
22:19:56 <SamB_XP> heh
22:19:59 <Cale> svref: You have to convert them to Floats or Doubles or another Fractional type before you can use /
22:20:00 <dons> > let average = liftM2 (/) sum genericLength in average [340,375,413,443,483,523,563,603,645,686,726,766,806,846,886,926,966,1006,1046,1084,1124,1174,1233,1293]
22:20:01 <lambdabot>  789.8333333333334
22:20:11 <Cale> dons: hehe
22:20:19 <|Steve|> Okay, I'm leaving. I hope you all have a pleasant Friday night/Saturday.
22:20:22 <Starglider> In that Microsoft are talking about no longer saving the x87 registers on context swap.
22:20:47 <Cale> svref: when you play with it at the ghci prompt, you're passing in lists where the type of numbers isn't yet determined
22:20:56 <dons> svref: strictly though, you should say it fails with a type error (not a crash :)
22:21:05 <glguy> @type genericLength
22:21:06 <lambdabot> forall i b. (Num i) => [b] -> i
22:21:06 <dons> since the error is found at compile time.
22:21:07 <Cale> svref: the use of (/) will cause the type to default to Double
22:21:51 <glguy> > let avg xs = fromIntegral (sum xs) / genericLength xs in avg [340,375,413,443,483,523,563,603,645,686,726,766,806,846,886,926,966,1006,1046,1084,1124,1174,1233,1293]
22:21:52 <lambdabot>  789.8333333333334
22:22:18 <Cale> svref: But if you obtained those numbers some other way, and they already have type Integer, it'll fail, since your function wants a list of things of some Fractional type.
22:22:43 <svref> thanks.  fromIntegral ... I don't know really what it does, but it looks kinda like a cast in C, but going the other direction...
22:22:53 <glguy> @type fromIntegral
22:22:54 <lambdabot> forall b a. (Num b, Integral a) => a -> b
22:23:07 <LordBrain> does ghc do the banana split optimization i read about in "The Algebra of Programming" ? so that these averages are computed in one pass?
22:23:26 <Cale> svref: It turns any Integral value (Int, Integer, Word8, etc.) into any other kind of number.
22:23:57 <svref> I clearly have to learn a bit more about type propagation...
22:24:21 <Cale> The only other function for numeric conversion you really need to know about is realToFrac
22:24:32 <Cale> @type realToFrac
22:24:33 <lambdabot> forall b a. (Fractional b, Real a) => a -> b
22:24:47 <Cale> Real is a Really bad name for that class :)
22:25:38 <Cale> types in the class Real have implemented toRational, which converts a value of that type to a Rational number.
22:26:24 <svref> with corresponding loss of data...
22:26:45 <SamB_XP> eh? not really
22:26:58 <LordBrain> no data loss...
22:27:02 <svref> you're saying pi can be made rational without gnawing off decimal places?
22:27:04 <SamB_XP> none of the types *I* know of represent irrational numbers anyway
22:27:18 <SamB_XP> ... do you know of any?
22:27:46 <lispy> > toRational pi
22:27:47 <lambdabot>  884279719003555%281474976710656
22:27:55 <svref> Well, in Maple, Matlab, etc, there are numeric types that keep sqrt(2) symbolically
22:28:00 <glguy> where is that type class hierarchy diagram
22:28:01 <LordBrain> i suppose we could take advantage of laziness to have an infinite pi...
22:28:10 <SamB_XP> > fromRational (toRational pi) == pi
22:28:12 <lambdabot>  True
22:28:17 <SamB_XP> what data loss?
22:28:18 <LordBrain> > pi
22:28:19 <lambdabot>  3.141592653589793
22:28:23 <merus> LordBrain: I know there's a by-digit formula for it :)
22:28:28 <Cale> right, anything which comes close to implementing real numbers can't correctly implement the Real class.
22:28:50 <SamB_XP> @instances Real
22:28:51 <lambdabot> Double, Float, Int, Integer
22:28:56 <merus> It is a computable number, isn't it?
22:29:00 <SamB_XP> @instances Fractional
22:29:01 <lambdabot> Double, Float
22:29:06 <Cale> pi is certainly computable
22:29:07 <glguy> pi can be defined
22:29:09 <merus> sweet~
22:29:11 <SamB_XP> @instances-importing Data.Rational Fractional
22:29:12 <lambdabot> Double, Float
22:29:16 <glguy> you can't compute all of it's digits though
22:29:18 <Cale> in fact it's a really nice number as far as that goes
22:29:27 <merus> if only it weren't that almost all of the reals weren't :(
22:29:30 <Cale> glguy: Well, you can, in a sense
22:29:36 <glguy> Cale: you will die first
22:29:39 <SamB_XP> well, anyway, none of the normal types represent irrationals...
22:29:44 <Cale> For each digit n, you can compute the nth digit.
22:29:51 <glguy> Cale: or at least the universe will end
22:29:54 <Cale> er, each natural
22:29:59 <Cale> yeah :)
22:30:09 <LordBrain> theres even ways to compute the nth digit without computing the n-1th
22:30:10 <merus> Meh.  The universe ending has little to do with mathematics :)
22:30:24 <lispy> merus: yes!
22:30:26 <svref> glguy: but then, according to christianity, he'll go to an infinately long afterlife, where he'll have copious free time to finish computing pi.
22:30:28 <merus> Except the halting problem >.>
22:30:34 <glguy> I'm more talking about trying to "count to infinity" is all
22:30:49 <Cale> eventually it will take so long that you'll lose patience, like your race might die off, or your sun will grow large enough to engulf your planet, or something like that :)
22:30:49 <glguy> svref: you mean "time to continue computing pi"
22:30:53 <SamB_XP> svens: except the fact that there is no end pretty much guarentees he will never reach it
22:30:58 <A_Quarter> OMG
22:31:04 <SamB_XP> er, svref
22:31:05 <A_Quarter> How da hell does FoldR work
22:31:26 <lispy> > foldr 0 (+) [1..5]
22:31:27 <lambdabot>     add an instance declaration for (Num (a1 -> (a -> a -> a) -> a -> a ->...
22:31:40 <lispy> @type foldr
22:31:41 <lambdabot> forall b a. (a -> b -> b) -> b -> [a] -> b
22:31:43 <glguy> A_Quarter: conceptually, it replaces all of the (:) constructors with the function you provided, and replaces the [[ and the end with the second argument
22:31:43 <A_Quarter> jesus I have to take Haskell i@ College
22:31:51 <LordBrain> you got your 0 and (+) reversed
22:31:58 <lispy> yeah
22:31:59 <Cale> A_Quarter: You know how lists are built from cons (:) and nil [] ?
22:32:06 <lispy> > foldr (+) 0 [1..5]
22:32:07 <lambdabot>  15
22:32:08 <glguy> sum = foldr (+) 0    ... given 1:2:3:4:5:[] this becomes 1+2+3+4+5+0
22:32:09 <A_Quarter> []:1 = [1]
22:32:18 <Cale> other way
22:32:19 <A_Quarter> ohhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
22:32:22 <glguy> A_Quarter: 1:[] = [1]
22:32:35 <A_Quarter> jesus why is this so complex
22:32:38 <lispy> > 1:[] == [] 1
22:32:39 <lambdabot>    The function `[]' is applied to one arguments,
22:32:39 <lambdabot>   but its type `[a]' ha...
22:32:42 <samc> ozone ?
22:32:44 <Cale> A_Quarter: foldr replaces each cons with a specific function, and the nil with a specific value
22:32:51 <A_Quarter> Gotcha
22:32:55 <A_Quarter> And foldl?
22:32:58 <lispy> Cale: does "[] a" only work at the type level?
22:32:58 <A_Quarter> goes the other way?
22:33:07 <Cale> foldl is a little less natural, but yeal
22:33:09 <Cale> yeah*
22:33:19 <LordBrain> foldl is left associated...
22:33:20 <Cale> I made some possibly helpful diagrams
22:33:32 <Cale> http://cale.yi.org/autoshare/folds.png
22:33:40 <glguy> A_Quarter: foldl (+) 0 [1,2,3,4,5]  === ((((0+1)+2)+3)+4)+5)
22:34:01 <A_Quarter> gotcha
22:34:03 <A_Quarter> thanks a lot!
22:34:04 <svref> Cale: wow, you whipped those up fast.
22:34:12 <A_Quarter> WOAH Cale
22:34:17 <Cale> svref: I whipped them up in advance.
22:34:19 <A_Quarter> Those are nice!
22:34:23 <Cale> yeah :)
22:34:39 <glguy> Cale: I'd say that the diagram for scanl is less than obvious :)
22:34:41 <lispy> i think foldl is bit more natural
22:34:45 <Cale> glguy: yeah :)
22:34:55 <lispy> because you start at the seed and combine
22:34:58 <Cale> glguy: but if you study it carefully, it's meaningful :)
22:35:10 <lispy> > foldl1 (+) [1..10]
22:35:12 <lambdabot>  55
22:35:12 <glguy> I even know what scanl does, and I'm not sure what your diagram means :)
22:35:19 <lispy> > foldl11 (+) [1..10]
22:35:20 <lambdabot>  Not in scope: `foldl11'
22:35:24 <A_Quarter> is Haskell usefull in Web APPs
22:35:26 <A_Quarter> ?
22:35:26 <lispy> > foldl1' (+) [1..10]
22:35:27 <lambdabot>  55
22:35:41 <lispy> A_Quarter: some work has been done there, but not a lot
22:35:46 <merus> Yeah, Cale... I don't get your pics :)
22:35:49 <A_Quarter> Im studying it @ collge and I dont see any use
22:35:53 <Cale> glguy: and you can see that computing the initial elements of the list generated by scanl will be easier than computing the same for scanr
22:36:02 <glguy> A_Quarter: you don't see any use for what?
22:36:05 <gzl> you're studying it specifically for web apps?
22:36:05 <A_Quarter> haskell
22:36:09 <gzl> ok.
22:36:11 <A_Quarter> or functional programming, other than math
22:36:13 <LordBrain> the haskell webserver performs better than apache
22:36:19 <A_Quarter> ohh yeah?
22:36:21 <lispy> A_Quarter: the main reason to study haskell at college is to expand your mind, very few people go on to use haskell in "the real world"
22:36:21 <A_Quarter> no way
22:36:22 <Cale> merus: Those are call dags.
22:36:33 <A_Quarter> lispy why is that?
22:36:40 <Cale> merus: Really, in functional programming, your code is a graph
22:36:44 <lispy> A_Quarter: not sure, i use haskell at my job
22:36:57 <A_Quarter> I use RubyOnRails.. and create APps in 5 mins
22:36:58 <A_Quarter> hehe
22:37:02 <glguy> Cale: people call what [directed acyclic graphs]?
22:37:13 <lispy> A_Quarter: have you watched the SoR parody?
22:37:14 <Cale> glguy: that's the term
22:37:15 <A_Quarter> Haskell is pretty cool though
22:37:16 <LordBrain> i never studied haskell in college
22:37:17 <merus> A graph?  Functions are vertices, edges are calls?
22:37:22 <glguy> Cale: what are "those" i mean
22:37:24 <A_Quarter> Just sooo complex
22:37:25 <Cale> merus: yeah
22:37:31 <LordBrain> and i intend to use it for practical purposes
22:37:33 <A_Quarter> to understand that is
22:37:40 <gzl> I'm curious to learn Ruby on Rails.
22:37:43 <A_Quarter> Sor Parody?
22:37:45 <glguy> A_Quarter: what are you studying in college?
22:37:48 <A_Quarter> RoR is just something else
22:38:05 <glguy> @quote emertens
22:38:05 <lambdabot>  screw ruby on rails, I'm using snakes on a plane
22:38:06 <lispy> A_Quarter: sql on rails
22:38:07 <A_Quarter> On Studying hugs
22:38:13 <gzl> hahaha
22:38:16 <gzl> good quote
22:38:22 <lispy> haah, snake on a plane
22:38:35 <LordBrain> lol
22:38:39 <glguy> A_Quarter: no i mean what degree are you studying for?
22:38:44 <SamB_XP> isn't that a movie?
22:38:47 <gzl> yes
22:38:52 <gzl> a crazy movie with samuel l jackson
22:39:05 <merus> Anyone implemented topological sort lately?
22:39:15 <gzl> with the rumored sequel "snakes on EVERY plane"
22:39:31 <lispy> what about explosive gatorade on the plane?
22:39:32 <svref> A_Quarter: I've been studying it for 3 days.  I'm still tounge-tied on a lot of stupid syntax stuff.  But forcing purely functional outlook is helpful, seems to have shaken me out of some bad habits.
22:39:38 <gzl> lispy: now that's just crazy talk.
22:39:39 <glguy> doesn't snakes on a plane have to bomb first before they can talk about sequels?
22:39:53 <A_Quarter> Software Engineering  glguy
22:39:54 <gzl> glguy: obviously you haven't been following hollywood recently.
22:40:07 <Cale> merus: and you get sharing, so for something like  "let x = 5+5 in x * x", the graph ends up having 3 vertices rather than 7
22:40:23 <Cale> or possibly 4 :)
22:40:25 <A_Quarter> svens your talking aboput ROR or haskell?
22:40:49 <A_Quarter> svref i mean
22:40:50 <merus> Cale: You always make me think of Haskell as something different each time I talk to you :P
22:41:01 <Cale> hehe
22:41:03 <svref> A_Quarter I talk about Haskell
22:41:06 <glguy> merus: that's because he hasn't decided what it is
22:41:21 <A_Quarter> Syntax is what usualy kills me
22:41:25 <A_Quarter> I can build the world with logic
22:41:29 <A_Quarter> but the syntax... Omg
22:41:34 <glguy> A_Quarter: as a college student, it's not important what specific applications the language has
22:41:35 <A_Quarter> such a pain in the ass with every language
22:41:45 * merus can't decide if he wants to screw around with topological sort more, or just fail at writing TMs.
22:41:49 <glguy> A_Quarter: I'd argue that it's more important that it teachs you a new way to look at a problem
22:41:53 <glguy> (and then solve it)
22:41:58 <A_Quarter> haskell does
22:42:18 <A_Quarter> But I cant use logic unless I get the Syntax
22:42:22 <merus> Haskell knows what it is?!?  It's self-aware!  Nuke the site from orbit, it's the only way to be sure!
22:42:35 <A_Quarter> since I get frustated when things dont work syntatically, but do logicaly
22:42:37 * merus </alien>
22:42:40 <A_Quarter> logicly
22:42:56 <A_Quarter> err
22:42:57 <A_Quarter> wrong work
22:43:03 <glguy> and again?
22:43:06 <A_Quarter> word
22:43:08 <A_Quarter> lol
22:43:10 * merus was pissed that nub wasn't in Hugs.Prelude >:(
22:43:28 <svref> its the same with any language, computer or human, you just have to grind teeth and learn vocabulary.  Reading a good intro book also helps more than anything.
22:43:28 <glguy> map head . group . sort?
22:43:53 <A_Quarter> parent_ids = @person.find_all_descendants.collect {|c| c.id }  << @person.id
22:43:56 <Cale> merus: that's because it's in Data.List
22:43:57 <svref> though IRC is mighty helpful too :)
22:44:03 <A_Quarter> Thats what Im havign fun with
22:44:04 <glguy> @index nub
22:44:04 <A_Quarter> lol
22:44:04 <lambdabot> Data.List
22:44:09 <A_Quarter> TIll my classdes start
22:44:12 <A_Quarter> then its Haskell time
22:44:28 <glguy> @where Data.List
22:44:29 <lambdabot> I know nothing about data.list.
22:44:30 <merus> Well, it made me figure out how to emulate it, so I guess not knowing where it was was helpful.
22:44:38 <glguy> what's the command that brings up the source file
22:46:19 <glguy> "parent_ids = @person.find_all_descendants.collect {|c| c.id }  << @person.id" This is ruby?
22:47:03 <Cale> @docs Data.List
22:47:03 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/base/Data-List.html
22:47:11 <Cale> @libsrc Data.List
22:47:11 <lambdabot> http://darcs.complete.org/fptools/libraries/base/Data/List.hs
22:47:16 <glguy> yeah, that
22:47:29 <glguy> http://darcs.complete.org/fptools/libraries/base/Data/List.hs
22:47:43 <glguy> lambdabot: show the channel the title please
22:47:50 * edwardk waves ello.
22:47:52 <glguy> i guess lambdabot doesn't post 404 messages
22:48:06 * Korollary hits edwardk with a 1541
22:48:43 * edwardk strikes back with a 1581 that he has hidden in his pocket.
22:49:04 <edwardk> no jokes about my 3-1/2" floppy =)
22:49:21 <glguy> :-.
22:49:29 <Korollary> Why hit a fallen man
22:49:37 <edwardk> fair nuff
22:49:39 <edwardk> how goes?
22:49:56 <glguy> no wonder i can't switch nicks
22:49:56 <Korollary> gr00vy
22:49:59 <glguy> emertens: tag, your it
22:50:09 <edwardk> shucks
22:50:33 <glguy> ??
22:50:33 <edwardk> so what gives with the emertens/glguy multiple personality disorder? =)
22:50:51 <glguy> I used to go by glguy
22:51:01 <glguy> and then I grew up and based my nick on my name
22:51:06 <edwardk> fair enough
22:51:12 <glguy> FUCK
22:51:13 <edwardk> used to use harmless, similarly
22:51:22 <glguy> i hate this irc client
22:51:29 * lispy still uses lispy
22:51:40 <lispy> i haven't written a line of lisp in over 6 months i would guess
22:51:44 <edwardk> heh
22:51:58 <Korollary> rehab works
22:52:07 <lispy> i'll have to switch to lambdy
22:52:19 * edwardk 's interests change every 4-6 months, so I probably wouldn't want to fix my nick to my current interests. =)
22:52:21 <emertens> every time I close the "connections" window
22:52:25 <emertens> it reverts me back to glguy
22:52:32 <emertens> (no, i will not just leave the window open)
22:52:39 <lispy> my nick was lispservice originally
22:52:50 <emertens> sounds kind of gay... ;)
22:53:06 <emertens> success!
22:53:08 <lispy> coming form glguy ;)
22:53:10 <edwardk> lispy: heh
22:53:25 <emertens> I don't get it
22:53:38 <Korollary> ?vixen does glguy sound gay?
22:53:38 <lambdabot> isn't it obvious?
22:53:39 <lispy> if i irc'd as dagit i'd get a lot of "Hey, you watch battle star galactica?" questions :)
22:53:50 <emertens> obviously not gay :-p
22:54:00 <Korollary> ?vixen does glgay sound gay?
22:54:00 <lambdabot> yes
22:54:03 <SamB_XP> glguy sounds gay?
22:54:06 <lispy> ?vixen do you like lispservice
22:54:07 <lambdabot> yah, i like
22:54:16 <edwardk> heh. i used 'bloodbunny' for all of 3 months 7-8 years ago for a game and i still have people calling me by that name
22:54:24 <SamB_XP> it sounds reminiscent of OpenGL to *me*
22:54:31 <edwardk> (was slapping together levels for jazz jackrabbit 2 at the time: http://www.jazz2online.com/J2Ov2/downloads/info.php?levelID=92 )
22:54:32 <edwardk> =)
22:54:33 <lambdabot> Title: Jazz2Online - Download Information for BloodBunny's CTF Pack
22:54:40 <lispy> lol, i thought glguy == opengl guy
22:54:46 <lispy> i didn't think of any other meaning...
22:55:13 <edwardk> oh dear
22:55:15 <edwardk> hehehhehe
22:55:21 <emertens> quick history :) Gamma Lambda Secretary -> glsec -> glguy (term expired)
22:55:32 <edwardk> gamma lambda secretary?
22:55:41 <emertens> college fraternity, gamma lambda chapter
22:55:44 <edwardk> ahh
22:55:45 <edwardk> heh
22:55:50 <lispy> oh
22:55:51 <edwardk> i did kinda figure it was opengl =)
22:55:55 <emertens> most do
22:55:58 <Korollary> gamma lambda calculus
22:56:00 <emertens> and it makes sense that it would be that
22:56:26 * edwardk wonders how many would be opengl fans have been deprived a nick. ;)
22:56:26 <emertens> my girlfriends old room mate said it meant "good looking" guy
22:56:33 <emertens> my girlfriend doesn't like her anymore
22:56:43 <edwardk> heh
22:56:44 <Korollary> how rational
22:57:12 <emertens> now that you know that they are both women, I'd say that it seems rational
22:57:24 <emertens> but if I had left out genders :)
22:57:27 * edwardk went up and bought a new monitor, so now he can read papers without panning and zooming. 
22:57:50 <edwardk> never thought i'd be geeked about rotating a monitor ;)
22:58:20 <emertens> is that a form of "psyched"?
22:58:31 <edwardk> yeah
22:58:54 <sm> now that sounds handy
22:59:08 <lispy> psyched, stoked, geeked...hmm...any other synonyms i'm forgetting?
22:59:15 <sm> does it rotate, or stay always vertical ?
22:59:58 <edwardk> rotates you can swivel it back and forth. 1920x1200 or 1200x1920
23:00:27 <Korollary> sweet
23:01:06 <emertens> is it one of the kinds that tells the OS that it swiveled?
23:01:10 * edwardk was sitting around reading papers on it while his internet was down earlier.
23:01:13 <emertens> so that you don't have to manually adjust it?
23:01:22 <edwardk> emertens: it has software for it, but i'm using the stuff from my video card for it right now
23:02:37 <edwardk> primarily because i gave in and turned my crt at work on its side the other day for the same purpose and this way i don't have to adjust my settings when i go back and forth =)
23:02:49 * edwardk carries a laptop with him.
23:03:23 <edwardk> the sideways crt is less useful though
23:04:50 <edwardk> I started looking at the stg->javascript translation, and I think it might be better for me to do grin->javascript for jhc
23:05:01 <edwardk> since jhc does a better job of pruning what it outputs
23:05:20 * lispy imagines a song, "Bloodbunny" set to the tune of "brass monkey" by the beastie boys
23:05:24 <edwardk> read the grin paper and it doesn't seem so bad.
23:05:27 <edwardk> lispy: heh
23:05:48 <edwardk> i found out they were running the 'world championships' on my levels every year, it was kinda creepy ;)
23:06:00 <Korollary> heh
23:06:19 <edwardk> heh, and more over i was somewhat miffed to find that epic megagames bundled one of my levels with a holiday level pack without obtaining my permission in any way
23:07:28 <edwardk> ah well
23:07:32 <edwardk> that was like 6 years ago
23:07:49 <emertens> my fiancée just woke up and said "um um um um i'm just trying to say... yes I accept" and then fell back asleep...
23:08:11 <lispy> nice
23:08:15 <edwardk> heh, i would say she's trying to send a message, but you already said 'fiancee' =)
23:08:30 <Adamant> yeah, be glad she's not just your GF and saying that
23:08:35 <edwardk> hehehe
23:08:53 <emertens> if I asked her to marry me and she said "um um yes, i accept"
23:08:57 <emertens> I'd be worried right there
23:09:09 <edwardk> fair enough
23:13:04 <edwardk> @where jhc
23:13:05 <lambdabot> http://repetae.net/john/computer/jhc/
23:24:11 <emertens> where is that feature list that shows the differences in jhc and ghc?
23:24:36 <edwardk> iirc jhc's feature list is a bit sparse, but it generates small object files
23:24:50 <edwardk> its basically whatever catches john meacham's eye. =)
23:26:01 <emertens> from jhc's site: only about 70% of nofib compiles at the moment.
23:26:03 <Cale> jhc is eventually going to be a very cool haskell compiler :)
23:26:04 <emertens> what is nofib
23:26:20 <Cale> emertens: it's a test suite of medium size programs
23:26:25 <edwardk> cale: though i admit the website sounds somewhat defeatist about it ever scaling =/
23:27:10 <Heffalump> the changelog suggests nothing has happened with jhc for 18 months :-(
23:27:23 <Korollary> unlikely
23:27:43 <emertens> what is unlikely?
23:27:52 <edwardk> basically wondering if i should just try to implement grin, its about the same complexity as stg
23:27:56 <Korollary> that nothing happened
23:28:20 <edwardk> but i'd have to prune a lot less
23:29:44 <emertens> is ghc the only compiler ready for "production" use?
23:29:53 <edwardk> emertens: feels that way
23:30:00 <edwardk> hugs is pretty stable feeling too
23:30:25 <edwardk> at least those are the only two with a decent suite of extensions =/
23:30:47 <wilx> nhc seems pretty mature too...
23:30:59 * merus hugs his hugs :)
23:31:08 * edwardk will poke around in nhc later tonight
23:31:25 <emertens> does ghc pass "nofib"??
23:31:30 <emertens> s/\?//
23:32:34 <Cale> emertens: Yeah, for practical use at this point, ghc is your best bet.
23:33:35 <emertens> anyway... it's getting late
23:33:41 <emertens> I'll talk to everyone later
23:33:55 <edwardk> nhc doesn't seem to have much in the way of extensions towards mptcs, fundeps, etc.
23:33:58 <edwardk> =(
23:34:15 <edwardk> @where nhc
23:34:16 <lambdabot> http://haskell.org/nhc98
23:34:41 <edwardk> thats what i thought, yeah, its more or less haskell 98 + whatever you can't survive without.
23:36:49 <dons> edwardk: there's been commits to jhc much more recently than 18 months ago.
23:37:12 <dons> http://www.cse.unsw.edu.au/~dons/images/commits/community/
23:37:12 <lambdabot> Title: Haskell Community Project Activity
23:37:23 <edwardk> dons: that was someone else's comment =)
23:37:51 <dons> oh oops. yes.
23:38:43 <tibbe> what would be a good name for a function that has this type, [(a, b)] -> [(b, a)] and mirrors the pairs? inverse?
23:39:00 <dons> mapSwap ?
23:39:28 * merus hunts around for things to do :/
23:39:42 <musasabi> morning
23:39:53 <dons> > let swap (a,b) = (b,a) in map . swap $ zip "haskell" [1..]
23:39:53 <lambdabot>  Couldn't match `a -> b' against `(b1, a1)'
23:39:54 <tibbe> mapSwap = map swap ;)
23:40:03 <musasabi> morning
23:40:04 <dons> > let swap (a,b) = (b,a) in map swap $ zip "haskell" [1..]
23:40:06 <lambdabot>  [(1,'h'),(2,'a'),(3,'s'),(4,'k'),(5,'e'),(6,'l'),(7,'l')]
23:40:24 <merus> cute :)
23:41:13 * edwardk is somewhat surprised there is no (a,b) -> (b,a) function in the stdlib. =)
23:41:17 <dons> ?pl swap (a,b) = (b,a)
23:41:18 <lambdabot> swap = uncurry (flip (,))
23:41:18 <Korollary> musasabi: you commit to jhc, right?
23:41:25 <edwardk> ah
23:41:32 <musasabi> Korollary: from time to time yes.
23:41:32 <stepcut> > map (uncurry (flip (,))) $ zip "haskell" [1..]
23:41:34 <lambdabot>  [(1,'h'),(2,'a'),(3,'s'),(4,'k'),(5,'e'),(6,'l'),(7,'l')]
23:41:46 <SamB_XP> @djinn (a, b) -> (b, a)
23:41:46 <lambdabot> f (a, b) = (b, a)
23:41:50 <Korollary> musasabi: what's the activity been like recently?
23:41:52 <Cale> uncurry is to (,) as foldr is to [] :)
23:41:55 <musasabi> dons: is swap or flipPair a better name?
23:41:57 <SamB_XP> @. pl djinn (a, b) -> (b, a)
23:41:58 <lambdabot> f = uncurry (flip (,))
23:42:06 <musasabi> Korollary: it is in bursts.
23:42:10 <SamB_XP> isn't this fun?
23:42:16 <edwardk> i like the @. pl djinn trick
23:42:18 <dons> swap is nice, considering fst and snd
23:42:19 <edwardk> neat
23:42:46 <musasabi> Korollary: you have to ask JohnMeacham for his plans. I will probably push patches in ~two weeks.
23:57:04 <tibbe> I can't find a parse combinator that takes one parser that should succeed and one that should fail, i.e. ascii butNot digit
23:57:12 <tibbe> is there one?
23:57:29 <Heffalump> isn't there a negation combinator?
23:57:41 <SamB_XP> eh
23:57:54 <SamB_XP> I don't think so...
23:57:58 <tibbe> not what I can see
23:58:01 <edwardk> hrmm, how far would it advance?
23:58:16 <SamB_XP> what are you trying to do?
23:58:34 <tibbe> http://www.cs.columbia.edu/sip/syntax/rfc2068.html#national
23:58:36 <lambdabot> Title: ABNF Specification for &lt;rfc2068.abnf&gt;
23:58:45 <tibbe> lots of rules on the type: octet but not ....
23:58:48 <Heffalump> the case you describe would be better dealt with using a character specific filter
23:58:59 <SamB_XP> noneOf springs to mind...
23:59:03 <Heffalump> there's a combinator of type (Char -> Bool) -> (...) isn't there?
23:59:09 <tibbe> yes
23:59:14 <SamB_XP> satisfy?
23:59:26 <tibbe> but then I can't reuse parsers that I already have
23:59:29 <Heffalump> so you can construct the (Char -> Bool) as (\c -> isAscii c && not (isDigit c))
23:59:36 <tibbe> yes
23:59:53 <SamB_XP> I really think there ought to be a nice notation for that
