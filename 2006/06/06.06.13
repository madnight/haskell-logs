00:08:31 <Lokadin> anyone used shellac before?
00:36:27 <neologism> moin
01:09:34 <sieni> what? nothing about haskell on this thread: http://ask.slashdot.org/askslashdot/06/06/12/2044245.shtml
01:09:37 <lambdabot> The title of that page is "Slashdot | The End of Native Code?"
01:11:05 <flux__> sieni, would it be relevant? naah, who am I kidding, that's no reason to have a reference to something in /. ;)
01:11:20 <dons> ?tell petekaz perhaps we could get a 80 char limit on the output of ?url. seems like it would be pretty easy to spam this way (see palomer's efforts earlier today)
01:11:21 <lambdabot> Consider it noted.
01:18:29 <Lokadin> say how do i run this : 
01:18:32 <Lokadin> loadMap :: FilePath -> IO Map
01:18:32 <Lokadin> loadMap filename = do raw <- readFile filename return (read raw)
01:18:37 <Lokadin> er ooops
01:18:43 <Lokadin> runShell :: ShellDescription st -> ShellBackend bst -> st -> IO st
01:18:44 <Lokadin> Run a shell. Given a shell description, a shell backend to use and an initial state this function runs the shell until it exits, and then returns the final state.
01:29:09 <dsacode> Hello! Is there some haskell library that implements polynomial arithmetic?
01:33:37 <Cale> You'd think so... I know that I've written such things for myself before.
01:33:57 <Cale> DoCon most likely does, though it's massive overkill
01:35:36 <kzm> Anybody know if it's possible to set RTS parameters (specifically -N) from inside Haskell?  I'd like to specify number of threads from a regular parameter, and not force the user to use +RTS options.
01:36:35 <Cale> oh, haha, does it ever
01:37:03 <Cale> kzm: I recall some trick involving compiling an extra .o from C...
01:37:36 <kzm> Yep.  I have used the hooks.c trick (stolen from droundy and darcs) to set things like heap size depending on available RAM.
01:38:12 <kzm> I guess hooks.c could do a bit of parameter parsing on its own...hmm.
01:39:00 <Cale> hmm
01:39:01 <eivuokko> You can set lots of rts params by simply peeking/poking into them.  But to start new thread you'd need to call some functions..
01:39:34 <Cale> or, you could just write a wrapper shell script :)
01:40:55 <kzm> eivuokko, so it may not be doable from C hooks?
01:41:04 <Cale> Is -N documented?
01:41:29 <kzm> May be a 6.5 thing.  I know I saw it *somewhere* :-)
01:42:26 <eivuokko> kzm, uhm, yeah, it is doable from c-hooks, I think.
01:42:35 <eivuokko> kzm, I thought you meant during haskell execution.
01:43:10 <eivuokko> Isn't -N is smp thing, number of processors (ie active OS threads)
01:43:15 <kzm> No, basically, I'd like to synchronize the number of CPU threads and the pieces I split data into.
01:43:20 <kzm> Yes, that's right.
01:43:47 <kzm> Of course, with -N n I tend to get n+3 or so threads, but hey, I'm not going to quibble.
01:43:49 <Cale> Um, isn't it a problem that ghc_rts_opts :: char* ?
01:44:25 <Cale> or is there some other hook which makes it a function?
01:44:54 <kzm> I just set values in a struct.  Typically 'RtsFlags.GcFlags.maxHeapSize'.
01:45:37 <kzm> So if there is an ..ahem... RtsFlags.SMPFlags.numThreads, I can just parse out my programs 'threads' parameter, and set it to that value.
01:45:40 <petekaz> don: I see there are a few things to enhance on my url plugin.
01:45:41 <lambdabot> petekaz: You have 1 new message. '/msg lambdabot @messages' to read it.
01:46:15 <petekaz> s/don/dons/
01:46:39 <kzm> BTW, talking about hooks - I need to do some post-build work for a Cabal library.  Is there a simple example?
01:48:22 <kzm> And: back to SMP - I have an 8-cpu Sun here - is there a binary dist of ghc-6.5 for Sun/sparc/solaris?
01:48:41 * kzm has temporarily given up on porting to POWER/AIX.
02:01:22 <audreyt> hm?
02:01:34 <audreyt> I've contribed a port for ppc/aix
02:02:13 <audreyt> http://haskell.org/ghc/download_ghc_642.html#powerpcaix
02:02:15 <lambdabot> The title of that page is "GHC: Download version 6.4.2"
02:07:36 <Pete_I> handy functionality.
02:07:43 <Pete_I> what does it say when the page doesn't have a title?
02:08:09 <petekaz> @tell dons Here are the things I'll add to the url plugin: bot protection to prevent infinite loops, spam control (limiting the length of titles to some char limit - I think 80 is too short though), and more generous parsing of URLs from contextual messages.
02:08:09 <lambdabot> Consider it noted.
02:08:30 <petekaz> Pete_I: it couldn't parse a url in a contextual message
02:08:32 <Pete_I> http://www.google.com/
02:08:33 <lambdabot> The title of that page is "Google"
02:08:43 <petekaz> i.e, http://www.google.com"
02:08:44 <lambdabot> You have specified an invalid URL
02:08:48 <petekaz> i.e, http://www.google.com,
02:08:48 <lambdabot> The title of that page is "ERROR: The requested URL could not be retrieved"
02:09:07 <Pete_I> hmm
02:09:11 <petekaz> I will tune the parsing of URLs in contextual messages.
02:10:16 <petekaz> @ask dons Do you think for bot protection that we should limit page title requests to 1 per n seconds?  What value should n be?
02:10:16 <lambdabot> Consider it noted.
02:11:17 * petekaz goes to the gym
02:15:27 <alar> www.google.com
02:16:10 <alar> http://www.google.com
02:16:11 <lambdabot> The title of that page is "Google"
02:18:04 <pejo> kzm, not that I know of. I had no trouble building it with 6.2 when I tried earlier though. 
02:23:02 <kzm> pejo, the build broke down for me.  That was with an older compiler (6.0.1), so perhaps I should first get a recent stable compiler?  Or perhaps I was just unlucky with the snapshot.
02:24:00 <kzm> Is each snapshot tested in any way (nofib?)?  On different architectures?
02:56:57 <kzm> Considering bang patterns, what is the advantage of having them in the patterns, rather than in the signature?
02:58:41 <Cale> kzm: they don't belong in the signature
02:59:24 <Cale> kzm: You're not going to reject the use of a function based on the use of bang patterns, so it's not part of the type.
02:59:58 <Cale> It also allows for greater flexibility in terms of what actually gets evaluated
03:16:26 <Saulzar> Hmm, they're also completely different things
03:17:40 <pejo> kzm, not sure what version of ghc it requires. The stable snapshots are quite easy to install though, so installing 6.4.x might be worth trying.
03:21:42 <alar> I have stupid newbie question
03:22:03 <alar> writing primitive parser I cannot select the basic type
03:22:28 <alar> is (String->(a,String)) or ReadS a better?
03:24:29 <kzm> Cale but you're not going to match/mismatch patterns based on bangs either, are you?  So they don't belong in the patterns either :-)
03:24:48 <Cale> kzm: there's a nice duality with ~
03:25:03 <Cale> and it does belong somewhere in the formula
03:25:22 <Cale> (it's really hard to manage them on the type theoretic level)
03:25:35 <kzm> And doesn't the flexibility mean less options for optimiziation?  At least in my cases, I usually want a function to be strict regardless of which pattern matches.
03:25:43 <Cale> alar: do you need ambiguity?
03:26:53 <Cale> kzm: bang patterns have a trivial interpretation/definition in terms of seq, so it wouldn't change anything
03:26:54 <kzm> My main gripe is yet more ambigous syntax and backwards incompatibility.
03:27:26 <Cale> The backwards incompatibility is tiny
03:27:34 <Cale> and it's not ambiguous
03:28:08 <kzm> Cale true - and you can always do something like: f !x = f' x where f' p1 = ... ; f' p2 = ..
03:29:49 <kzm> It's ambigous in the sense that a piece of code means differnt things depending on a combination of compiler versions and options.
03:30:21 <Cale> Well, that's the point of standardising on them
04:10:00 <Itkovian> hmm
04:10:00 <Itkovian> network is back it seems
04:10:00 <Itkovian> afternoon
04:10:00 <Itkovian> when I start babbling, it means my brain is evaporating
04:30:12 <gds> Anyone know if it's possible to run haskell progs on series 60 mobile phones?
04:30:44 <alar> =))
04:33:58 <dcoutts> gds, does it support gcc? if so then hugs is worth a go
04:36:37 <gds> GCC 2.9 I think...
04:46:04 <kzm> Anybody seen an "error reading .setup-config" message from Cabal?
04:46:24 * kzm just did the usual configure, build, install thing.
04:53:31 <SemanticPhilosop> > [1..2]
04:53:32 <lambdabot>  [1,2]
04:53:39 <SemanticPhilosop> >[1..]
04:54:04 <SemanticPhilosop> > [10..1]
04:54:05 <lambdabot>  []
04:54:34 <Pete_I> > reverse [1..10]
04:54:35 <lambdabot>  [10,9,8,7,6,5,4,3,2,1]
04:54:49 <SemanticPhilosop> > [10,9..1]
04:54:50 <lambdabot>  [10,9,8,7,6,5,4,3,2,1]
04:55:47 <mgoetze> > [1,4,9..25]
04:55:47 <lambdabot>  Parse error
04:57:01 <kzm> Hmm..seems I cannot do install as root if I build as user?  (GHC 6.4.1)
05:03:33 <alar> @instances Monad
05:03:34 <lambdabot> ((, ArrowMonad a, Cont r, ContT r m, Either e, ErrorT e m, IO, Maybe, RWS r w s, RWST r w s m, Reader r, ReaderT r m, ST s, State s, StateT s m, Writer w, WriterT w m, []
05:03:47 <Pete_I> does haskell have an equivelent to perl's hashes or python's dictionaries?
05:03:52 <alar> @hoogle Reader
05:03:53 <lambdabot> Control.Monad.Reader :: module
05:03:53 <lambdabot> Control.Monad.Reader.Reader :: r -> a -> Reader r a
05:03:53 <lambdabot> Control.Monad.Reader.Reader :: newtype Reader r a
05:03:54 <integral> Data.Map
05:03:57 <JaffaCake> dcoutts_: do you want to try debugging this gcc-4.1.1 bug?
05:04:01 <integral> Pete_I: err, Data.Map :-)
05:04:55 <alar> @info ReadS
05:04:55 <lambdabot> Unknown command, try @list
05:05:02 <alar> @list
05:05:02 <lambdabot> list [module|command]. Where modules is one of:
05:05:02 <lambdabot> babel base compose dice dict djinn drhylo dummy elite fact fresh haddock help hoogle instances karma lambda localtime log more pl plugs poll pretty quote search seen slap spell state system tell
05:05:02 <lambdabot> todo topic type unlambda url version vixen where
05:05:16 <alar> @type ReadS
05:05:17 <lambdabot> Not in scope: data constructor `ReadS'
05:05:29 <alar> @hoogle ReadS
05:05:30 <lambdabot> Prelude.ReadS :: type ReadS a
05:05:30 <lambdabot> Prelude.reads :: Read a => ReadS a
05:05:30 <lambdabot> Numeric.readSigned :: Real a => ReadS a -> ReadS a
05:06:15 <alar> @list instances
05:06:15 <lambdabot> instances provides: instances instances-importing
05:06:33 <alar> @list tell
05:06:33 <lambdabot> tell provides: tell ask messages messages? clear-messages
05:06:41 <alar> @help ask
05:06:41 <lambdabot> ask <nick> <message>. When <nick> shows activity, ask them <message>.
05:06:48 <alar> @help tell
05:06:48 <lambdabot> tell <nick> <message>. When <nick> shows activity, tell them <message>.
05:07:01 <alar> @help messages?
05:07:01 <lambdabot> messages?. Tells you whether you have any messages
05:07:09 <alar> @messages?
05:07:09 <lambdabot> Sorry, no messages today.
05:11:59 <wimp> what is it about persistent data structures that make them so great?
05:12:35 <wimp> oh, n/m
05:12:37 <wimp> i'm stupid
05:12:44 <sieni> everything \o/
05:12:44 <wimp> it's 5am; brain going slowly
05:13:03 <flux__> there are no stupid people, only stupid questions. no, wait, that's not how it went ;)
05:13:51 <alar> @state
05:13:51 <lambdabot> This page intentionally left blank.
05:15:53 <grabboid> i'm getting some warnings from ghc about orphan instances.. i have declared a type in module A, then i have an instance declaration in module B which imports A. I can't move the instances over to A because the instance methods won't be visible in B.. What can be done to get rid of this warning? 
05:17:52 <grabboid> without using -fno-warn-orphans :)
05:19:07 <ndm> grabboid: why won't the instance methods be visible in B, if B imports A?
05:19:27 <grabboid> dunno it says they're not in scope
05:19:38 <ndm> they should be...
05:19:42 <grabboid> hmm
05:19:50 <ndm> depends, how have you declared A?
05:19:57 <ndm> module A where ?
05:20:05 <ndm> and how have you imported it, import A ?
05:20:23 <ndm> that should make the instances in A visible to anyone doing import A
05:20:51 <grabboid> hang on
05:22:33 <grabboid> its module A where
05:22:59 <grabboid> then the type def somewhere down below is: newtype MyType = ..
05:23:56 <grabboid> then the instance like: instance Ord MyType where ... some methods here
05:24:32 <ndm> then it should be visible in B
05:24:58 <grabboid> yeah that's what i thought.. but somehow it isnt :S
05:25:33 <alar> @haddock Char
05:25:33 <lambdabot> Unknown command, try @list
05:25:43 <alar> @doc Char
05:25:43 <lambdabot> Char not available
05:25:49 <alar> @doc Data.Char
05:25:49 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/base/Data-Char.html
05:25:51 <ndm> grabboid: you are misunderstanding orphans :)
05:26:19 <ndm> you need to put the definition of MyType in the same file as a declaration of its instances
05:26:31 <ndm> http://www.haskell.org/ghc/docs/latest/html/users_guide/options-sanity.html
05:26:32 <lambdabot> The title of that page is "4.7. Warnings and sanity-checking"
05:26:34 <ndm> search for orphans
05:26:49 <ndm> http://www-users.cs.york.ac.uk/~ndm/
05:26:50 <lambdabot> The title of that page is "Neil Mitchell - Home Page"
05:26:59 <ndm> oh, cool new lambdabot feature :)
05:27:46 <grabboid> hmm read that bit.. and i still don't get it lol
05:29:27 <grabboid> i mean isnt that what i just did.. i put both definition of the type as well as the instances in the file where module A is.
05:29:38 <ndm> in that case GHC is being a fool
05:29:40 <ndm> can you post the file anywhere?
05:29:42 <ndm> @where paste
05:29:43 <lambdabot> http://paste.lisp.org/new/haskell
05:29:51 <ndm> just the file A
05:30:00 <grabboid> k
05:30:18 <alar> @type foldr
05:30:19 <lambdabot> forall b a. (a -> b -> b) -> b -> [a] -> b
05:30:19 <alar> @type foldr1
05:30:20 <lambdabot> forall a. (a -> a -> a) -> [a] -> a
05:31:21 <lisppaste2> grabboid pasted "orphans :S" at http://paste.lisp.org/display/21209
05:31:23 <lambdabot> The title of that page is "Paste number 21209: orphans :S"
05:31:42 <grabboid> that's the relevant bits from A
05:31:44 <ndm> now thats an almost entirely useless lamdabot message :)
05:31:49 <grabboid> lol
05:33:15 <ndm> grabboid: works fine for me with ghc -c A.hs
05:33:57 <grabboid> but if you include it in B.hs and try to call the mempty method for example?
05:34:29 <grabboid> err i mean import
05:35:27 <ndm> module B where
05:35:29 <ndm> import A
05:35:30 <ndm> import Data.Monoid
05:35:32 <ndm> main = show (mempty :: RepairAdmin)
05:36:25 <grabboid> oh wait.. its the Monoid stuff of course
05:37:46 <grabboid> yep i forgot the import Monoid in B.. orphans are gone :)
05:38:46 <grabboid> thanks
05:39:38 <ndm> no probs
05:39:54 <alar> can someone lure lambdabot into #oasis
05:39:56 <alar> ?
05:40:14 <dons> @join #oasis
05:40:21 <dons> do you want it there permanently?
05:41:47 <Paltas> privet alar :)
05:42:54 <alar> zdravstvuy :)
05:43:18 <alar> dons: there should be oasisbot, but now it's down
05:43:34 <dons> ah, right
05:43:34 <vincenz> dons: I'll think about it
05:43:52 <vincenz> Might as well
05:43:55 <vincenz> oasisbot only needs to be in oasislog
05:43:58 <vincenz> which is for repo watching
05:44:16 <alar> is there a command to shut one of two bots?
05:44:42 <vincenz> alar: I would not prefer people at random having htat power
05:44:44 <Paltas> hi vincenz :)
05:44:52 <vincenz> hello Paltas 
05:45:05 <alar> vincenz: privileged command would do ok
05:45:20 <vincenz> alar: there are priviledged users and in that case yes
05:45:22 <vincenz> just @part
05:45:49 --- mode: ChanServ set +o vincenz
05:46:00 <alar> then noone should be privileged for both bots =)
05:49:35 * kzm is pleased to announce, for all you fans of senseless benchmarks and irrelevant competitors, that my knuc entry now, by a cunning application of esoteric data structures, smothers all competition.  I.e. beats the C entry by an amount that is probably smaller than the differences in CPU.  Hooray!
05:50:09 <dons> hehe. cool!
05:50:12 <dons> but is it legal?
05:50:13 <ndm> @where shootout
05:50:14 <lambdabot> I know nothing about shootout.
05:50:15 <Pete_I> nice.
05:50:20 <dons> ?shootout
05:50:20 <lambdabot> http://shootout.alioth.debian.org/gp4/benchmark.php?test=all&lang=all
05:50:21 <ptolomy> woo.
05:50:29 <ndm> ?shootout knuc
05:50:29 <lambdabot> http://shootout.alioth.debian.org/gp4/benchmark.php?test=all&lang=all
05:50:37 <dons> nah, just a const.
05:50:52 <kzm> Probably not legal.  I use a compressed index, instead of a "hash table".
05:51:10 <kzm> It's just a test anyway, but it seems to work.
05:53:10 <kzm> Now I have to track down a wee bit of excessive memory consumption.  Who knows what fruits can be reaped from the tree of profiling?
05:53:25 <alar> is it legal to state "instance Monad ReadS" ?
05:54:46 * ptolomy will enjoy the shootout-ey boost the he believes will happen with the release of GHC 6.6
05:55:52 <kzm> I thought cabal built profiling versions by default?
05:56:23 <dons> nope you need -p
05:56:44 <kzm> Where?  To configure?
05:56:58 <dons> ptolomy: yeah. i think so too. we should be able to submit a few shorter entries (and faster too, i'd imagine)
05:57:02 <dons> kzm, yep
05:57:25 <kzm> Unrecognized flags: -p.
05:57:30 * kzm gets a feeling of deja vu.
05:59:21 <dons> hmm. old cabal
05:59:24 <kzm> And I can't get it to work with 6.5 (where -p presumably works)
05:59:26 <dons> ./Setup.hs configure -p ?
05:59:43 <dons> i have some deja vu. didn't we talk about this?
06:00:33 <kzm> Seems familiar. So I can either: upgrade my 6.4.1 cabal, rip out and replace my 6.5 fps, or just wait for these things to fix themselves?
06:00:53 <kzm> Any other alternatives?  Can the -p problem be hacked around?
06:01:20 <dons> just update cabal , i think. grab it off the cabal home page
06:02:03 <kzm> Oh wait.  I don't need to profile.  My knuc entry reads BS, but - get this - *converts it to [Char]* before packing it in the index.
06:02:07 <ndm> looking at the Clean entry for knuc, they have teh statement "import LanguageShootout"
06:02:19 <kzm> No need to ask where the time is spent - nor memory for that matter.
06:02:21 <ndm> is that allowed under the rule?
06:02:36 <kzm> As long as they count LOC from that library, perhaps?
06:02:58 <ndm> I can't see it...
06:03:05 <dons> ndm. yah. bit dodgy imo.
06:03:05 <kzm> And one of the Erlang entries contained the equivalent of #asm, IIUC.
06:03:23 <dons> kzm, convert to [Char] eh? bad kzm
06:03:39 <kzm> Working on it.  I guess that means no pony this year either?  
06:03:41 * kzm sighs.
06:03:53 <dons> ndm, the shootout can be a bit loose with the rules -- since there aren't really any
06:04:04 * dons shrugs
06:04:18 <dons> you just keep sending in fast code, hoping you can convince them of it. 
06:04:24 <dons> and hoping no one complains too much
06:04:25 <kzm> It is, after all, a gentleman's pursuit.  (And gentlewoman's)
06:04:31 <dons> right
06:04:54 <ndm> hmm, sounds quite broken, really... - pity there can't be one thats just functionality based, rather than "you must do it the same way as C"
06:05:12 <dons> ndm. very much so. it hobbles many of our options
06:05:18 <dons> i.e. "have to use a mutable hashtable"
06:05:32 <ndm> is anyone maintaining a list of the best haskell entries, written in haskell style haskell?
06:05:40 <dons> ndm, yeah, on the hawiki
06:05:52 <ndm> with graphs vs the shootout versions?
06:06:06 <dons> nope. nothing that elaborate
06:06:15 <ndm> that would be nice to see...
06:06:31 <dons> however, we'll probably be able to return to the nice versions once bytestring's on the shootout box (at least in some of the examples)
06:06:37 <kzm> Often some notes about timing.  And hey, feel free to upload the graphs (or their links) to the wiki.
06:07:29 <dons> yeah, there should be timing info for a few
06:07:30 <ndm> personally, I use Hugs for everything, so performance is not really my priority :)
06:07:35 <dons> :)
06:07:56 <dons> but ghci is so nice these days
06:07:56 <vincenz> dons: my interpreter works \o/
06:08:11 <ndm> although i'm now at 15 seconds to load my project, which is a bit annoying
06:08:28 <ndm> when WinHaskell is done, I might switch to ghci, or at least for some uses
06:08:31 <ndm> ghci is just too slow
06:08:38 <ndm> to load, rather than to run
06:09:01 <dons> really, when using compiled .o files?
06:09:18 <ndm> most of the time I am compiling things afresh
06:09:21 <ndm> and making big changes
06:09:23 <dons> that's usually how i work. i compile the project, then use ghci to test / interpret just the bit sthat change
06:09:26 <dons> ah, right
06:09:34 <ndm> typing :r is also annoying - WinHugs does it automatically
06:09:41 <ndm> and hyperlinks on errors
06:09:42 <dons> oh, that's nice.
06:09:48 <ndm> all things i can't live without
06:10:12 <ndm> although WinHaskell will add both of those things to GHCi
06:10:13 <kzm> dons: how do I get a CStringLen from a ByteString?
06:10:16 <dons> i think both vim and emacs support jumpting to the locatoin of the error in ghci
06:10:23 <malcolm> the most annoying thing about GHCi is there is no :edit command.
06:10:31 <dons> kzm, hmm packCStringLen , iirc.
06:10:48 <dons> ?type Data.ByteString.packCStringLen
06:10:49 <lambdabot> Foreign.C.String.CStringLen -> Data.ByteString.Base.ByteString
06:10:56 <dons> oh, wrong way
06:11:19 <kzm> Okay, I need that too :-)
06:11:25 <dons> ?type Data.ByteString.useAsCString
06:11:26 <lambdabot> forall a. Data.ByteString.Base.ByteString -> (Foreign.C.String.CString -> IO a) -> IO a
06:11:43 <dons> hmm. looks like we're missing useAsCStringLen,.
06:11:48 <dons> perhaps that should be added
06:11:55 <kzm> You really need to get FPS into hoogle.
06:11:56 <malcolm> I have use cases where Data.ByteString makes my code 4x slower
06:11:57 <dons> since there's unsafeUseAsCStringLen
06:12:08 <dons> malcolm: yeah, the complexity changes
06:12:14 <dons> so anything with a cons will get worse
06:12:20 <dons> since cons becomes O(n)
06:12:58 <malcolm> dons: no conses, just map, zipWith, drop
06:13:00 <dons> malcolm: though if you have small cases, i'd like to see them. perhaps they're bugs
06:13:21 <malcolm> does drop have bad complexity?
06:13:24 <dons> you could try map' , it's a non-fuseable, but 1.5x faster map
06:13:27 <dons> drop is O(1)
06:13:28 <dons> zip
06:13:33 <dons> zipWith however, is poor
06:13:41 <dons> its unpacking the string into [Char]
06:13:48 <dons> try to avoid it if possible
06:14:11 <dons> zipWith f ps qs
06:14:11 <dons>     | null ps || null qs = []
06:14:12 <dons>     | otherwise = f (unsafeHead ps) (unsafeHead qs) : zipWith f (unsafeTail ps) (unsafeTail qs)
06:14:33 <dons> anything doing an unpack isn't going to be very nice
06:14:36 <malcolm> hmm, but zipWith could so easily be a good fusable producer
06:14:57 <ndm> dons, why is there a requirement for zipWith to be unpacked?
06:15:24 <dons> malcolm, ah, now that's interesting. you want fuseable with build/foldr fusion ? we haven't looked much at that yet.
06:15:37 <dons> i was talking more about the array fusion used between bytestring ops
06:15:58 <malcolm> I've been doing some work on fold/unfold fusion, and it is much nicer than foldr/build conceptually, but of course more difficult to implement
06:16:15 <dons> i can imagine. foldr/build isn't so nice.
06:16:38 <malcolm> a zipWith that was array-fusable would be good too
06:16:40 <dons> dcoutts and i have been furiously working on trying to find more general array fusion rules the last couple of weeks
06:17:07 <SamB_XP> you have to admit that foldr/build beats the pants off full deforestation, though ;-)
06:17:30 <dons> malcolm: do you have an example program where the performance gets worse?
06:17:56 <malcolm> dons: sure, but I don't know whether I want to give it away yet.
06:18:17 <malcolm> dons: I have the feeling it is "user error" - I've done something silly
06:19:02 <dons> ndm, its not unpack. see above, its equivalent to an unpack, which is known to be slow. generating the [a] from the array is expensive compared to operating on the arrays alone.
06:19:39 <ndm> I was asking why can't you just operate on an array directly
06:19:41 <dons> malcolm: hehe. ok. well i'm always welcoming of performance complaints/data.
06:19:56 <ndm> i.e. alloc an array the min size of both of them, and then do it a bit more "in place"
06:20:19 <malcolm> dons: my best-performing version does lazy streaming from a file of bytes through lots of  zipWith, map, concat, pipelines, and the ByteString version tries to do the same, but by indexing into the ByteString instead of using lazy hGetContents
06:20:36 <dons> ndm, but zipWith generates a result of some type 'a', not necessarily a ByteString (?)
06:20:58 <dons> malcolm: have you tried the new ByteString.Lazy type?
06:21:23 <dons> using lazy liists of L1 cache-sized chunks of byte strings.
06:21:34 <malcolm> how about a specialise zipWith :: (Word8->Word8->Word8) -> ByteString -> ByteString-> ByteString
06:21:37 <ndm> ah, indeed! (stupid me), perhaps have an optimised zipWithBS :: ByteString -> By
06:22:03 <dons> malcolm: yes, that might be a very useful thing.
06:22:05 <dons> i'll add it
06:22:16 <ndm> can the GHC rules do a specialise on that
06:22:24 <ndm> I think there is some type specialisation facility
06:22:31 <dons> i could add a rewrite rule
06:22:48 <SamB_XP> yeah, you use rewrite rules for that kind of specialization
06:23:00 <dons> much as SPECIALISE does, but using a hand-optimised version
06:23:03 <SamB_XP> there used to be special syntax for it, but not anymore
06:24:55 * malcolm tries Data.ByteString.Lazy but finds type clashes
06:25:12 <dons> it uses a different ByteString type
06:25:39 <dons> usually you can just get away with changing the import qualified though
06:27:02 <dons> or maybe you need Data.ByteString.Lazy.Char8 ?
06:27:11 <vincenz> dons: you know what would be a cool plugin for lambdabot?
06:27:26 <dons>  @coffee ??
06:27:32 <vincenz> dons: ever played zenmoo?
06:27:33 <malcolm> dons: I need unsafeHead and unsafeTail - but are they exported for Lazy bytestring?
06:27:40 <SamB_XP> that would be a warm plugin, dons!
06:27:50 * vincenz snickers at SamB_XP 
06:27:52 <dons> no, there's no unsafeHead,Tail. you'd have to use normal head and tail
06:28:02 <malcolm> dons: OK, will try
06:28:06 <vincenz> dons: like a stdDragon, instead of an unsafe one?
06:28:07 <dcoutts> malcolm, there's less benefit for lazy byte strings
06:28:22 <dcoutts> malcolm, since we have to check a cons cell anyway
06:28:29 <dons> yeah, its not just an index operation. you walk the spine of the list, then index.
06:28:47 <vincenz> isn't the spine of a list just a list?
06:28:49 <petekaz> How do I make this: map isSuffixOf [".", ","] into a single predicate that I can then use to pass to 'any'?
06:28:52 <dcoutts> malcolm, so I think the current lazy head & tail cannot be improved upon
06:28:53 <vincenz> erm, just -the- list
06:29:30 <dons> petekaz, actually, i added something very similar to that to Lib/Utils.hs today
06:29:33 <vincenz> dons, dcoutts: Out of curiousity, how does BS behave in threaded apps?
06:29:43 <dons> petekaz, check arePrefixesOf 
06:29:46 <dcoutts> vincenz, no idea, how should it?
06:29:48 <kzm> hah!  Cleaning out some [Chars], and running time is 0.7s for the 250K benchmark.
06:29:52 <vincenz> dcoutts: faultfree?
06:29:55 * alar thinks parser should form not only MonadPlus, but a ring
06:30:09 <petekaz> dons: ok, thanks.
06:30:12 <dcoutts> vincenz, should be fine, if you find any bugs tell us
06:30:33 <dons> vincenz: yeah, no bugs found yet. runs in lambdaobt and hmp3, both highly threaded (particularly lambdabot)
06:30:52 <malcolm> dons: the lazy bytestring now gives me : Couldn't match `GHC.Int.Int64' against `Int' in the argument to 'drop'
06:30:58 <kzm> (Of course, the output is all wrong now...) :-/
06:31:08 <dons> malcolm: yep sorry. fromIntegral should be the ansewr.
06:31:18 <dons> we have filtered data > 4G
06:31:19 <dcoutts> malcolm, if you can spot any improvement for anything in .Lazy then do tell, it's not been looked at quite as much as the normal ByteString module.
06:31:31 <dons> so needed to think about the index type size.
06:31:55 <dons> so, as you see, things like index, drop , length return Int64s
06:32:52 <vincenz> alright :)
06:33:18 <vincenz> dons: anyways, a zenmoo-type plugin..
06:34:10 <dons> so, what does that entail? these words you use "zenmoo" "stdDragon" mean nothing to me :S
06:34:40 <vincenz> dons: stdDragon has nothing to do with it, that was just referring to your "unsafe head and tail instead of a normal head and tail"
06:34:53 <vincenz> a bad joke basically
06:35:08 <vincenz> dons: as for zenmoo, it used to be a mud where you had to try to speak as little as possible except when prompted
06:35:20 <vincenz> dons: if you gained in karma, your rate of speech was allowed to increase
06:35:36 <dons> heh
06:35:43 <dons> very zen
06:35:48 <vincenz> yah
06:36:10 <vincenz> anyways my interpreter works but my language is still nameless :(
06:36:29 <sinfinity> vincenz: what does it do?
06:36:34 <alar> oasislang?
06:36:36 <sinfinity> vincenz: the language, that is.
06:36:46 <Pete_I> vincenz, name your language 'nameless'
06:36:51 <vincenz> sinfinity: allows me to communicate with the computer
06:36:57 <dons> oasis is kind of a nice name for a language
06:36:58 <sinfinity> vincenz: ;)
06:37:13 <alar> desertongue
06:37:19 <alar> works only in oases
06:37:47 <sinfinity> oasis seems a bit pretentious
06:37:54 <vincenz> mlirage?
06:38:07 <vincenz> sinfinity: oasis is the name I use for all my stuff hence #oasis
06:38:14 <vincenz> it derives from abstractoasis
06:38:18 <SamB_XP> oasis is a nice name for OASIS
06:38:19 <vincenz> the name of my computerS :D
06:38:27 <alar> aha
06:38:31 <alar> mirage is nice!
06:38:56 <malcolm> dons: ByteString.Lazy gives no improvement over the ordinary ByteString, for my application.
06:39:02 <vincenz> or dromedary ... insinuating it's got less than O'caml (only one hump)
06:39:13 <dons> malcolm: you switched to lazy io?
06:39:38 <dons> getContents, or similar.
06:39:40 <malcolm> dons:  However, in the non-streaming case, it has to be said that ByteString was a big win over ordinary arrays
06:39:48 <dons> ah, that's interesting
06:39:56 <dons> hadn't thought about that.
06:40:12 <dons> dcoutts: we should maybe benchmark the performance of, say, a map over UArrays at some point
06:40:32 <malcolm> dons: for non-streaming, the algorithm was worse than  linear in the size of the array, but for byteStrings, it became exactly linear
06:40:36 <dcoutts> dons, as a comparison to map over ByteString you mean
06:40:48 <dons> dcoutts: yep.
06:41:22 <dcoutts> malcolm, what's your application btw?
06:41:45 <dons> malcolm: hmm. very interesting. now, would specialising zipWith improve things for you, to :: (W -> W -> W) -> ByteString -> ByteString -> ByteString ?
06:42:03 <malcolm> dcoutts: the marching cubes algorithm for isosurface extraction (visualisation of datasets)
06:42:28 <dcoutts> malcolm, oh, ok, and how does strings / io fit into that?
06:42:33 <dons> or, i should say, if i improve the speed of zipWith, say 2 or 3x, would that help?
06:42:49 <malcolm> dons: the dataset is stored as a flat file of bytes
06:43:42 <malcolm> Is it easy to write zipWith8 too? :-)
06:44:05 <dons> we should add a few 'N' variants. people seem to use them :)
06:44:27 <ihope_> 'N' variants?
06:44:32 * vincenz knows :)
06:44:33 <shapr> zipWithN
06:44:37 <ihope_> Ah.
06:44:41 <vincenz> oasis, mIVRage and DDromeTaries
06:45:17 <vincenz> tool, language, what it kills
06:45:50 <dons> malcolm: well, one thing is to use map' if your not writing array-fuseable code. another is to try first-order versions of some functions (like filterNotByte instead of filter). and i'll look at this zipWith case.
06:45:54 <ihope_> zipWith8 f' (a:as) (b:bs) (c:cs) (d:ds) (e:es) (f:fs) (g:gs) (h:hs) = f' a b c d e f g h : zipWith8 f' as bs cs ds es fs gs hs; zipWith8 _ _ _ _ _ _ _ _ _ = []
06:46:15 <ihope_> See? It's easy :-)
06:46:24 <dons> if you're able to send the code as a benchmark for us,  that would be useful too :)
06:46:32 <vincenz> use TH
06:46:45 <ihope_> But it gets annoying when you get to zipWith27...
06:47:19 <malcolm> Here is a comparison between hGetContents >>= listArray and FPS.hGetContents:  dataset size=68kb, arr=0.67s, fps=0.67s;  dataset size=16Mb, arr=924s, fps=180s
06:47:40 <dons> cool
06:48:02 <vincenz> ihope_: use TH
06:48:07 <ihope_> TH?
06:48:17 <dons> malcolm, hGetContents is slower than readFile, btw. since it has to realloc, for normal bytestrings.
06:48:22 <dons> for lazy bytestrings, its the same
06:48:28 <amiddelk> ihope_: "Template Haskell"
06:48:34 <ihope_> Ah.
06:49:05 <malcolm> dons: oh, I imagined that hGetContents was identical to readfile for bytestrings
06:49:51 <dons> no, if you imagine how it works, readFile can ask the OS for the buffer size, then just fill it. hGetContents reallocs by doubling, as more data is read.
06:50:30 <kzm> I wrote my own hGetLines using unsafeInterleaveIO - presumably, this will leak the file handle when used for files?
06:50:55 <kzm> (I never close it explicitly, since it's hard to tell when it is safe to do so.)
06:51:59 <dons> yeah, the handle should be in a semi-closed state, at least (right, dcoutts?) so that other calls to hGetLines will fail on the same file, instead of interleaving reads
06:52:14 <dcoutts> dons, it should, but doesn't yet
06:52:23 <kzm> s/on the same file/on the same handle/ ?
06:52:31 <dons> kzm, yep
06:52:33 <dcoutts> kzm, theoretically both
06:52:57 <dcoutts> kzm, at least withing the same process on the same file name, since ghc will use locking
06:53:06 <dcoutts> as required by the H98 standard
06:53:28 * kzm wonders if that is a good thing or not.
06:54:58 <kzm> ..and if it even works over NFS etc.
06:55:28 * malcolm finds that using readFile instead of hgetContents makes only a small constant improvement in running time
06:56:18 <dons> yeah, you're more likely to see it continue to work as the machine's memory runs out, rather than hGetContents, which will fail at about 1/2 of ram, when realloc does an ill advised memcppy
06:58:17 <dons> malcolm: can you try map' (if you map over large byte strings) ? it would help a bit, if the code isn't array fuseable (which it won't be unless you're writing fold . map or filter . map )
06:58:27 <dons> ?type Data.ByteString.map'
06:58:28 <lambdabot> (Word8 -> Word8) -> Data.ByteString.Base.ByteString -> Data.ByteString.Base.ByteString
06:58:40 <dons> ndm, how do I add fps to hoogle?
06:59:08 <ndm> dons, do you have a new haddock version? i.e. compiled from darcs?
06:59:32 <dons> ah, no. only 0.7
07:00:08 <ndm> step 1, make haddock documentation
07:00:38 <ndm> step 2, build hadhtml from data/hadhtml in the hoogle repo
07:00:46 <ndm> put the ByteString.html in a separate folder
07:00:54 <ndm> hadhtml "folder in which bytestring is"
07:01:14 <dons> righto
07:01:17 <vincenz> what do you guys think of LaFIDDaR
07:01:21 <vincenz> @google lafiddar
07:01:24 <lambdabot> No Result Found.
07:01:38 <ndm> then it will either put the hoogle info in a separate file, or to the stdout (can't remember)
07:01:50 <ndm> get that bit, and cat it at the end of the hoogle.txt file lamdabot uses
07:01:57 <dons> cool. will do.
07:02:01 <ndm> the next version of haddock will make this a bit easier :)
07:02:08 <malcolm> dons:  I see.  Could be useful though, as our datasets get larger.  The IEEE visualisation contest 2006 has an earthquake simulation of the order of 25Gb (and that is the decimated version - the physicists have cut it down already).
07:02:29 <dons> ndm, ah, so i can use my current haddock
07:02:37 <ndm> dons, you can with hadhtml
07:02:39 <SamB_XP> why is it not binimated?
07:02:40 <dons> malcolm: oh, for that size you'd need to use lazy bytestrings, wouldn't you?
07:02:48 <dons> or do you have that much ram.... ?
07:02:50 <ndm> but haddock-head has a -hoogle switch, to generate the haddock docs automatically
07:03:00 <SamB_XP> dons: you don't necessarily need to load it all in one go
07:03:07 <dons> oh, right.
07:03:29 <ihope_> Yipe!
07:03:44 <dons> malcolm: we did manage to transform a 1T stream in just under 8hours in testing. so seems possible
07:04:00 <dons> 1Tb, i suppose i should say
07:04:00 <vincenz> dons: market this to google ;)
07:04:10 <vincenz> dons: hah!
07:04:13 <vincenz> dons: that's a cheap number
07:04:17 <vincenz> > 1024/8
07:04:18 <lambdabot>  128.0
07:04:28 <dons> vincenz, google's buying haskell code these days?
07:04:29 <vincenz> dons: cause you work with bytes, not bits
07:04:29 <malcolm> SamB_XP: the reduced version was decimated by a factor of 4 in each spatial dimension, and 100 in the temporal dimension.
07:04:31 <lisppaste2> petekaz pasted "Can I not do this?" at http://paste.lisp.org/display/21212
07:04:33 <lambdabot> The title of that page is "Paste number 21212: Can I not do this?"
07:04:35 <vincenz> dons: dunno
07:04:39 <vincenz> dons: if they did...wow
07:04:49 <vincenz> lol
07:04:53 <vincenz> lisppaste2 and lambdabot are competing
07:05:01 <petekaz> (btw, I'm fixing that)
07:05:04 <dons> ah, right.
07:05:07 <dons> just about to ask.
07:05:14 <vincenz> http://notvincenz.com/wiki
07:05:15 <dons> should it ignore lisppaste?
07:05:17 <lambdabot> The title of that page is "Your Page Title"
07:05:21 <dons> or do you have some other scheme.
07:05:29 <vincenz> http://www.notvincenz.com/wiki/pmwiki.php/Icfp/Main
07:05:31 <lambdabot> The title of that page is "Not Vincenz's Wiki | Icfp / Main"
07:05:43 <petekaz> I'm am going to have a list of strings that it'll ignore completely.
07:05:45 <vincenz> is that really necessary?
07:05:51 <vincenz> petekaz: on every link?
07:05:54 <dons> petekaz: ok. sounds good
07:05:59 <vincenz> petekaz: wouldn't it be better to be on demand?
07:06:07 <dons> vincenz: ?
07:06:13 <vincenz> dons: @nameof ...
07:06:20 <vincenz> instead of patternmatching every url
07:06:32 <petekaz> vincenz: I prefer it on all the time, that is how I've implemented for fsbot as well.
07:06:34 <ihope_> http://
07:06:34 <lambdabot> The title of that page is "ERROR: The requested URL could not be retrieved"
07:06:39 <dons> no, the point is to have it just help out like this. on al lthe time.
07:06:42 <SamB_XP> haha
07:06:47 <vincenz> http://www.playboy.com
07:06:49 <lambdabot> The title of that page is "Playboy.com: Sex, Playboy Centerfolds, Playboy Models, Playboy Pictures, Playmates, Playboy Magazine"
07:06:55 <dons> but petekaz's fine tuning atm
07:06:59 <ihope_> Oh dear.
07:07:06 <dons> ?url-off
07:07:06 <lambdabot> Url disabled
07:07:07 <vincenz> dons: I still think that on-demand would be better
07:07:07 <SamB_XP> did someone actually demo the loop?
07:07:22 <SamB_XP> I mean, with another lambdabot and everything?
07:07:24 <vincenz> dons: I mean people only care if they want to know, and if they want to know they can askk
07:07:34 <petekaz> SamB_XP: I'm working on that as well.
07:07:43 <vincenz> petekaz: what if the title of a webpage is a url?
07:07:51 <dons> well, is it sarahbot that has similar behaviour?
07:07:56 <petekaz> vincenz: I'm working ont that as well.
07:08:16 <dons> we've had it running all day, i wonder what the reaction's been. 
07:08:19 <SamB_XP> petekaz: so has Science been done?
07:08:20 * dons reads the logs
07:08:39 <ndm> my reaction was "thats cool"
07:08:42 <vincenz> @echo http://www.google.com
07:08:42 <lambdabot> echo; msg:IrcMessage {msgPrefix = "vincenz!n=vincenz@d51A5999E.access.telenet.be", msgCommand = "PRIVMSG", msgParams = ["#haskell",":@echo http://www.google.com"]} rest:"http://www.google.com"
07:08:46 <petekaz> vincenz: imo, on demand defeats the whole purpose.  when someone posts a url, I want to know what it is before I have to go there.
07:08:55 <vincenz> petekaz: so you ask lambdabot
07:09:04 <dons> yes, i agree. it should be passively filtering
07:09:26 <SamB_XP> wasn't the whole point to show off the filtering?
07:09:31 <petekaz> vincenz: I disagree, but since I have no clout here, it's not my choice.
07:09:41 <vincenz> in addition, most links can be categorized into either pastes...which are already annotated, or pure links which are typically placed in a context when people mention them
07:09:47 <dons> SamB_XP: no, we added the filtering so we could write the url plugin :)
07:09:57 <SamB_XP> whatever!
07:09:57 <petekaz> vincenz: I am adding code to ignore certain links.
07:10:05 <petekaz> vincenz: that takes care of all pastes.
07:10:11 <vincenz> ah alrighty
07:10:17 <dons> anyway, seems the reaction has been fairly positive today
07:10:23 <dons> and some useful results turned up
07:10:25 <SamB_XP> dons: so > uses that too, now?
07:10:27 <vincenz> except for this asshole <-  ?
07:10:30 <dons> SamB_XP: yep
07:10:42 <petekaz> Can someone help me with this: http://paste.lisp.org/display/21212
07:10:45 <SamB_XP> good ;-)
07:11:02 <dons> also the log plugin uses it too
07:11:08 <dons> to generate #haskell logs
07:11:33 <SamB_XP> so, how about #perl6-style karma?
07:11:42 <dons> petekaz, why not take (length str - length s) str ?
07:11:44 <petekaz> Well, I'm happy that the contextual feature was a win then!
07:11:48 <dons> and avoid the reverse?
07:11:50 <shapr> yah, it's great!
07:12:08 <dons> SamB_XP: yeah, that'd be nice. the comments attached to karma is useful
07:12:19 <petekaz> dons: ok, sure.  but it still won't work.  can I not do the 2 functions and one with a set of guards?
07:12:29 <petekaz> I get a parse error.
07:12:41 <dons> oh, your extra =
07:12:47 <dons> here: stripSuffixes (s:ss) str =
07:12:49 <dons> is wrong
07:12:51 <petekaz> oh ... doh!
07:12:54 <dons> :)
07:12:57 <petekaz> I didn't see that!
07:13:07 <dons> neither did i till you made me look
07:13:43 <dons> SamB_XP: in fact, there may be lots of fun new things we can write, now we've got the whole channel stream to play with
07:13:52 <dons> ideas, ideas!
07:14:05 <petekaz> I want the stats module.
07:14:08 <petekaz> er plugin.
07:14:12 <SamB_XP> oh, you know, it is not necessary for you to say SamB_XP when you talk to me ;-)
07:14:15 <dons> yeah, stats would be good.
07:14:27 <dons> SamB_XP: oh, i just discovered my tab key autocompletes nicks. its fun!
07:14:32 <dons> :P
07:14:36 <SamB_XP> you could just say SamB and it would work just as well ;-)
07:14:46 <dons> but that doesn't autocomplete
07:14:53 <SamB_XP> oh, true
07:14:54 <dons> so you should change your nick... ;)
07:15:02 <SamB_XP> I think samx should change!
07:15:29 <wolverian> ('SamB' autocompletes in some clients, such as bitchx, or irssi when automatic autocompletion (cough) is enabled)
07:15:31 <dons> oh?
07:15:51 <dons> wolverian: really? 
07:15:51 <SamB_XP> so does this mean you will be calling me this even when I am IRCing from Linux?
07:16:06 <SamB> such as now?
07:16:16 <petekaz> dons: what is this \SOH thing?  IrcMessage {msgPrefix = "petekaz!n=user@c-24-61-206-4.hsd1.ma.comcast.net", msgCommand = "PRIVMSG", msgParams = ["#petekaz",":\SOHACTION http://www.google.com\SOH"]}
07:16:17 <dons> ah, i see.
07:16:30 <dons> i will hit tab twice in future :)
07:16:36 <SamB> > fromEnum '\SOH"
07:16:36 <lambdabot>  Improperly terminated character constant
07:16:39 <SamB> > fromEnum '\SOH'
07:16:40 <lambdabot>  1
07:16:40 <wolverian> dons, yes. it's really annoying, though, as often the first word in your phrase begins the same way as some nick on the channel. you'd have to check the nick list every time you say something, just in case the first word is autocompleted.
07:16:50 <wolverian> dons, so. I don't think anyone uses that feature. :)
07:16:53 <dons> petekaz: that's a null byte, used to delimit the action in the irc grammar
07:17:13 <petekaz> thanks.
07:17:22 <SamB> dons: a null byte?
07:17:31 <SamB> > fromEnum '\NUL'
07:17:32 <lambdabot>  0
07:17:33 <dons> brain explosion
07:17:47 <dons> its \1 of course
07:17:50 <shapr> I wish I could pattern match on string prefixes directly. Is there some cheesy trick to allow that? How should I write country ("foo":_) = ?
07:18:21 <dons> hmm. a pattern guard trick?
07:18:28 <petekaz> dons: Should the null be stripped out of all contextual messages?
07:18:38 <SamB> ooh! k ++ s patterns!
07:18:47 <dons> f s | Just pref <- getPref s && pref == xyz = .. ?
07:19:13 <SamB> those would be perhaps better liked than n + k patterns ;-)
07:19:23 <dons> petekaz: well, we don't want it in the logs. but perhaps it is useful to us, since it makes it easier to write plugins that manipulate actions, potentially
07:19:32 <petekaz> true.
07:19:45 <Stinger_> a ('f' : 'o' : 'o' : _) = ":P"
07:19:50 <dons> so i'd leave it, unless you have a reason to remove it. the log module can do its own trick to get rid of them (i think it already does)
07:20:28 <SamB> perhaps you could use TH to generate the patterns?
07:21:22 <SamB> > [p| x |]
07:21:22 <lambdabot>  Parse error
07:21:26 <SamB> aww
07:21:33 <dons> yeah :/
07:21:35 <shapr> SamB: Sounds interesting.
07:21:52 <SamB> dons: have you not got TH to parse yet, or is there no [p| |] syntax?
07:21:54 <dons> after we went to all the trouble of making TH safe and happy in @eval, the new parser...
07:22:03 <dons> haven't hacked the parser
07:22:27 <dons> i looked at how it was done in the ghc parser, then looked at the Lanugage.Haskell parser we're using, and decided i should work on my thesis
07:22:33 <shapr> heh
07:22:41 <SamB> okay, so how come I get:
07:22:46 <SamB> <interactive>:1:4: Not in scope: `x'
07:23:00 <dons> ?
07:23:12 <dons> runplugs can handle it.
07:23:31 <dons> the Eval plugin first parses the fragment, which will rule out non-h98
07:24:14 <SamB> Prelude> [p| x |]
07:24:14 <SamB>  
07:24:14 <SamB> <interactive>:1:4: Not in scope: `x'
07:25:00 <dons> i don't understand your question. you get it because you're using ghci. 
07:25:37 * SamB looks for TH manual
07:27:46 <alar> SamB: http://www.haskell.org/hawiki/TemplateHaskell
07:28:00 <alar> for me it is rather good source
07:28:47 <alar> there is a link to tutorial
07:29:04 <SamB> yes, I've gotton there from haskell.org/th ;-)
07:29:38 <SamB> apparantly I've been there before ;-)
07:31:07 <alar> ah =)
07:32:50 * shapr smacks Python
07:33:12 <Pete_I> what'd python do?
07:33:17 <shapr> It's not Haskell!
07:33:29 * Pete_I smacks haskell
07:33:32 <Pete_I> it's not perl!
07:33:35 <shapr> hah
07:34:01 <SamB> so? I'm sure it could be if you wanted.
07:34:04 <shapr> Haskell is not perfect, but it is the best tool I've found.
07:34:08 * vincenz smacks you all1
07:34:11 <vincenz> You are not me!
07:34:16 <SamB> haha
07:34:26 <shapr> Occasionally you find an abstrosity in the Haskell world, but most things are spiffy.
07:34:27 <Pete_I> i'm sure it'd be great if i could get around all the typing crap
07:34:38 <shapr> What sort of typing crap is in your way?
07:34:45 <vincenz> shapr: the keyboard
07:34:52 <shapr> abstrosity == abstraction monstrosity
07:34:54 <shapr> I love that word :-)
07:34:56 <Pete_I> shapr, the fact that it cares about types
07:35:09 <vincenz> Pete_I: so does perl, except that it boms at runtime
07:35:14 <vincenz> s/boms/bombs
07:35:16 <SamB> Pete_I: typing saves a *lot* of typing
07:35:30 <eivuokko> Heh
07:35:30 <shapr> Types are a crutch where you declare puzzle piece edges for your values, and then the system does the puzzle for you and whines if the edges don't match.
07:35:52 <shapr> Pete_I: Anything more specific I/we can help with?
07:36:14 <Pete_I> not at the moment.
07:36:40 <dons> you can turn off the type system, and do all the checking yourself. just insert unsafeCoerce# in front of every function application
07:36:53 <SamB> @type foldM
07:36:55 <lambdabot> forall a (m :: * -> *) b. (Monad m) => (a -> b -> m a) -> a -> [b] -> m a
07:36:59 <dons> though you may end up spending some time in gdb... ;)
07:37:23 <Pete_I> dons at this stage of my haskell learning that'd be a very bad idea
07:37:24 <SamB> some very nasty time!
07:37:36 <SamB> Pete_I: we know that ;-)
07:37:48 <vincenz> no we don't
07:37:52 <SamB> what you don't know is that that would be a bad idea at any stage of haskell learning
07:38:26 <dons> yeah, just teasing. its such an obviously bad thing to do -- to disable the type checking -- that hopefully you see the benefits immediately :)
07:38:32 <vincenz> @seen oeet
07:38:33 <lambdabot> I haven't seen oeet.
07:38:41 <vincenz> @seen oejet
07:38:41 <lambdabot> I haven't seen oejet.
07:39:25 <SamB> you use unsafeCoerce# maybe once every third blue moon
07:39:45 <dons> or never..
07:39:54 <SamB> I said maybe ;-)
07:40:06 <dons> its rare that you have a proof of some type, yet the compiler can't find it
07:40:08 <Pete_I> i doubt i'll ever have a use for it.
07:40:10 <SamB> I know they have to use it in Data.Dynamic
07:40:10 <vincenz> use unsafeCoerce# :: Maybe Never
07:40:23 <dons> SamB, write. to implement type casting :)
07:40:37 <dcoutts> vincenz, Just Never or Nothing?
07:40:44 <dons> becaues Dynamics encode a proof of type equality, that the compiler can't spot (since its at runtime)
07:40:45 <SamB> of course, Data.Dynamic doesn't *quite* have a proof
07:40:51 <vincenz> dcoutts: yep :)
07:40:54 <dons> yeah, its well, sort of.
07:41:10 <vincenz> dcoutts: damn, I ddn't catch that type-error
07:41:14 <SamB> basically the proof is only valid given correct instances of Typeable
07:41:29 <dons> that's your axiom. 
07:41:42 <dons> that the cpp Typeable.h is correct and unhacked ;)
07:41:54 <shapr> What's currently the best way to run Haskell code on a cluster?
07:42:04 <shapr> hMPI?
07:42:14 <SamB> well, and that nobody has written instances of their own that use the same names as other instances
07:42:38 * shapr wishes for GHC-OTP
07:42:39 <dons> shapr, or write a program that runs on each node, and does its communicating via normal network calls
07:42:45 <shapr> Hm, yeah
07:43:26 * dons tries to write the evil coerce $, but can't find the skull-and-cross bones ascii char
07:43:29 <SamB> @type foldM
07:43:30 <lambdabot> forall a (m :: * -> *) b. (Monad m) => (a -> b -> m a) -> a -> [b] -> m a
07:43:32 <SamB> @type foldr
07:43:34 <lambdabot> forall b a. (a -> b -> b) -> b -> [a] -> b
07:43:48 <shapr> dons: It's probably in unicode :-)
07:43:56 <dons> heh
07:44:22 * BCoppens gives dons ☠
07:44:31 <SamB> hmm
07:44:37 <SamB> oh, right
07:44:43 <BCoppens> :P
07:45:06 * SamB can use foldr just fine to construct a monadic value, duh ;-)
07:48:50 <SamB> can someone try this in a recent GHCi?
07:49:04 <SamB> > :m +Language.Haskell.TH.Syntax
07:49:05 <lambdabot>  Parse error
07:49:13 <SamB> oh sorry
07:49:22 <SamB> runQ [p| 'c' |] >>= print
07:50:07 <SamB> I get
07:50:09 <dons> (%) = unsafeCoerce#
07:50:09 <dons> main = do
07:50:09 <dons>     putStrLn % "foo"
07:50:09 <dons>     let x :: Int
07:50:09 <dons>         x = (+1) % "haskell"
07:50:12 <dons>     print x;
07:50:14 <dons> ;)
07:50:18 <SamB> *** Exception: typecheck/TcSplice.lhs:(128,0)-(150,44): Non-exhaustive patterns in function tc_bracket
07:50:38 <shapr> dons: Good choice, percent is the closest char to crossed bones.
07:50:59 <dons> types are for losers, bugs are for winners!
07:51:05 <dons> shapr: yeah, i reckon
07:51:19 <SamB> well, can someone try it?
07:51:48 <SamB> oh, hmm, maybe I have a more recent build myself, actually
07:54:51 * dons `ap` pillow
07:57:55 <vincenz> `ap` pliance
07:58:54 <Pete_I> is there an eval function in haskell?
08:01:58 <Dino__> Hm. I see System.Eval.Haskell
08:02:32 <Pete_I> where's the docs for all this stuff?
08:02:42 <lispy> Pete_I: not in the lisp or python sense.  But peole have built libraries that allow for it
08:02:53 <lispy> @doc System.Eval.Haskell
08:02:53 <lambdabot> System.Eval.Haskell not available
08:03:01 <lispy> @doc Prelude
08:03:01 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html
08:03:35 <Pete_I> lispy, thanks
08:04:27 <lispy> np
08:05:15 <Dino__> There's a Contents link at the top where you can see a large tree of modules, not just Prelude. Can lambdabot provide that URL, to the Haskell Hierarchical Libraries top-level?
08:05:23 <petekaz> dons: patch headed your way.
08:06:10 <petekaz> missed him .. oh well.
08:06:11 <shapr> @libs
08:06:11 <lambdabot>  not available
08:06:29 <shapr> Dino__: I think lambdabot has something like that, not sure where it is though.
08:06:47 <lispy> @where libs
08:06:48 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/index.html
08:06:51 <CosmicRay> Igloo: what are your plans for ghc 6.4.2?
08:07:57 <Dino__> You know, I don't see System.Eval.(anything) in these docs. :/
08:08:17 <lispy> Dino__: try http://haskell.org/ghc/docs/latest/html/libraries/index.html
08:08:46 <lispy> that link i gave you before must have been too specific
08:09:01 <SamB> hs-plugins comes with GHC now?
08:09:03 <Dino__> But I do see it in that haddock doc for plugins-0.9.10  http://www.cse.unsw.edu.au/~dons/hs-plugins/html/System-Eval-Haskell.html
08:09:45 <vincenz> grr
08:09:50 <vincenz> my language needs typeclasses
08:09:57 <Dino__> SamB: Is that what that is, hs-plugins?
08:10:36 <SamB> we call it hs-plugins, yes ;-)
08:10:37 <Dino__> Er, I see it in the URL I just pasted, nm.
08:11:29 <lispy> vincenz: i think most languages need typeclasses :)
08:12:24 <SamB> does C++ need typeclasses?
08:12:47 <lispy> they are adding concepts, so apparently yes
08:12:49 <vincenz> lispy: that's a rather broad and inaccurate statement
08:13:12 <SamB> Python wouldn't know what to do with typeclasses
08:13:23 <SamB> Perl either, methinks
08:14:40 <lispy> *shrug* I was mostly teasing, but they seem so useful in haskell I don't know how we get by without them in other languages
08:15:19 <SamB> yeah, I do often want that sort of thing ;-)
08:15:57 <Pete_I> ugh, why?
08:16:58 <SamB> because they are *nice*!
08:17:20 <Pete_I> eh...if you say so...
08:22:09 * SamB isn't very articulate about this :-(
08:22:34 <vincenz> @type lookup
08:22:36 <lambdabot> forall b a. (Eq a) => a -> [(a, b)] -> Maybe b
08:22:40 <vincenz> @type M.looup
08:22:41 <lambdabot> Couldn't find qualified module.
08:22:41 <lambdabot> Maybe you're using the wrong syntax: Data.List.(\\) instead of (Data.List.\\)?
08:22:48 <ihope_> @type let s x y z = Control.Monad.Cont.Cont (\c -> (x z) y z) in s
08:22:49 <vincenz> @type Data.Map.lookup
08:22:49 <lambdabot> forall t t1 r a. (t -> t1 -> t -> r) -> t1 -> t -> Control.Monad.Cont.Cont r a
08:22:50 <lambdabot> forall a (m :: * -> *) k. (Ord k, Monad m) => k -> Data.Map.Map k a -> m a
08:30:10 <ihope_> ...Um, data Cont r a = Cont ((r -> a) -> a)?
08:32:28 <ihope_> Oh!
08:37:47 <Pete_I> how do i put this nogcd (a, b, c) = (gcd a (gcd b c)) == i
08:37:54 <Pete_I> in lambda form?
08:39:20 <vincenz> hmm
08:39:30 <vincenz> type classes, functors or object-classes
08:39:35 * vincenz doesn't know which to pick
08:39:46 <shapr> Pete_I: lambda calculus? or just lambdas in Haskell?
08:39:57 <Pete_I> lambda calculus
08:40:05 <vincenz> \(a,b,c) -> (gcd a (gcd b c))
08:40:48 <shapr> What about \a b c gcd.(gcd a (gcd b c)) ?
08:47:03 * shapr boings quietly
08:47:18 <joe_k> hmm i just got a Heap exhausted
08:47:25 * dmhouse places an amplifier next to shapr
08:47:32 <dmhouse> Nothing wrong with loud boinging :)
08:47:53 * shapr boings LOUDLY!
08:48:03 <dmhouse> I (might) be able to teach Haskell at my school next year!
08:48:11 <shapr> cool!
08:48:18 <joe_k> it says use +RTM -M<size> but then I get "bad RTS option: -M512"
08:48:34 <joe_k> s/+RTM/+RTS/
08:49:48 <liyang> joe_k: you want +RTS -M512M
08:50:03 <joe_k> thanks
08:54:35 <joe_k> hmm still exceeding heap size... i made what I thought was a minor change
08:54:39 <joe_k> any idea how to diagnose?
08:57:48 <joe_k> found it... mistyped function name was returning list of length 12000 instead of list of len 10 
09:01:50 <Pete_I> is there a function to remove duplicates from a list?
09:02:17 <dmhouse> > nub [1,2,4,4,6]
09:02:20 <lambdabot>  [1,2,4,6]
09:02:27 <shapr> joe_k: Sounds like a laziness problem.
09:02:30 <SamB> > nub "lol"
09:02:31 <lambdabot>  "lo"
09:05:04 <Pete_I> thanks.
09:05:46 <dmhouse> Pete_I: :b Data.List in GHCi is worth a read.
09:06:39 <Pete_I> ok
09:08:05 <ptolomy_> @hoogle foldl
09:08:06 <lambdabot> Prelude.foldl :: (a -> b -> a) -> a -> [b] -> a
09:08:06 <lambdabot> Prelude.foldl1 :: (a -> a -> a) -> [a] -> a
09:08:06 <lambdabot> Data.List.foldl' :: (a -> b -> a) -> a -> [b] -> a
09:08:25 <Pete_I> there enough zipN's?
09:09:24 <dmhouse> Hehe
09:09:58 <liyang> One should really be writing pure f <*> l1 <*> l2 ... anyway.
09:10:33 <dmhouse> liyang: please, f <$> l1 <*> l2 <*> ...
09:11:09 <liyang> :-/
09:11:18 <liyang> I have issues with how <$> is currently defined...
09:11:26 <dmhouse> How so?
09:11:39 <liyang> But yeah, if you're going down that route... iI f l1 l2 ... Ii
09:11:58 <Igloo> CosmicRay: My current plans are to package it
09:15:50 <liyang> <$> is defined as an alias for fmap, which seems wrong given it should be an operator on applicative things. (Applicative is a subclass of Functor.) I'd rather define it as  f <$> a = pure f <*> a  so that I can then write a trivial instance Functor ... where fmap = <$> . (Much like how fmapDefault and foldMapDefault of Data.Traversable are default implementations of their respective superclass methods.)
09:15:56 <liyang> If that makes any sense at all.
09:16:17 <dmhouse> Yeah, true.
09:16:30 <dmhouse> It means you have to instantiate Functor if you want Applicative.
09:16:40 <dmhouse> But isn't it class Functor f => Applicative f anyway?
09:16:45 <CosmicRay> Igloo: do you know how soon?
09:16:53 <shapr> dmhouse: I think that's right.
09:17:38 <dmhouse> Yep.
09:17:48 <dmhouse> http://darcs.haskell.org/packages/base/Control/Applicative.hs
09:17:52 <liyang> dmhouse: Right. But your Functor instance is already given by the Applicative instance, so you should be able to write fmap = {some default thing, namely (<$>)}
09:18:11 <liyang> should be able to write a trivial Functor instance, I mean.
09:18:38 <dmhouse> But you'd have to write a Functor instance before you'd try to write an Applicative one.
09:18:46 <liyang> Nope. :)
09:18:47 <dmhouse> Oh, never mind.
09:18:52 <dmhouse> I see what you mean.
09:19:33 <dmhouse> Really it'd be easier if there were an "instance Applicative f => Functor f where fmap = (<$>)"
09:19:41 <shapr> Yeah, I agree.
09:20:07 <liyang> Or some other way of specifying default superclass method instances.
09:20:13 <dmhouse> Right.
09:20:29 <liyang> I think this has already been discussed elsewhere, so I'll get back to work now. XD
09:20:37 <shapr> What are you working on?
09:20:50 * shapr should be working too..
09:21:23 * dmhouse is helping out the wikibook, then he'll probably go back to checking out HaRe.
09:21:43 <liyang> Random hackage on ``functional (or applicative?) programming with STM'' or somesuch...
09:22:11 <shapr> neat
09:31:51 <CosmicRay> Igloo: do you have an eta for 6.4.2?
09:35:25 <CosmicRay> hey SyntaxNinja 
09:38:34 <SyntaxNinja> hey Co
09:38:35 <SyntaxNinja> er
09:38:36 <SyntaxNinja> CosmicRay: 
09:38:39 <SyntaxNinja> CosmicRay: hey.
09:38:42 <CosmicRay> hi ;-)
09:38:57 <SyntaxNinja> CosmicRay: how's Xen?  I've got a xen server, but I had our full time sysadmin set it up :)
09:39:13 <CosmicRay> it hates my motherboard.
09:39:18 <CosmicRay> other than that, OK ;-)
09:39:24 <CosmicRay> by "hate" I mean "doesn't boot"
09:39:39 <SyntaxNinja> CosmicRay: I've tried to get it working on my laptop, but yeah, it's painful.  some folks on #debian-devel seem to know what's what, when they're not arguing w/ each-other they might share w/ you.
09:39:50 <CosmicRay> heh
09:42:07 <Pete_I> CosmicRay, by 'it' did you mean the xen server, or the sysadmin?
09:42:48 <CosmicRay> Pete_I: the xenlinux kernel
09:43:01 <Pete_I> ok
09:44:44 <vincenz> @hoogle zipWithM
09:44:45 <lambdabot> Monad.zipWithM :: Monad a => (b -> c -> a d) -> [b] -> [c] -> a [d]
09:44:45 <lambdabot> Control.Monad.zipWithM :: Monad m => (a -> b -> m c) -> [a] -> [b] -> m [c]
09:44:45 <lambdabot> Monad.zipWithM_ :: Monad a => (b -> c -> a d) -> [b] -> [c] -> a ()
10:07:06 <vincenz> > M.union (M.fromList [(1,2)]) (M.fromList [(1,3)])
10:07:07 <lambdabot>  {1:=2}
10:12:17 <dmhouse> What would be an easy example to explain the list monad?
10:12:41 <dmhouse> I know 'the canonical example is parsing ambiguous grammars', but I never considered that to be too easy.
10:12:52 <Pegazus> O_o
10:13:02 <Pegazus> what does monads has to do with ambigous grammars?
10:13:16 <dmhouse> Parsing ambiguous grammars is nicely done with the list monad.
10:13:21 <Pegazus> O_o
10:13:23 <Pegazus> what's a monad?
10:13:46 * dmhouse checks this *is* #haskell
10:13:50 <dmhouse> @google all about monads
10:13:52 <lambdabot> http://www.nomaware.com/monads/html/
10:13:56 <dmhouse> Try that, Pegazus.
10:13:59 <Pegazus> k
10:14:24 <dmhouse> Any ideas, then?
10:17:22 <Pegazus> it's too long
10:17:33 <Pegazus> itn's there a brief and short explanation?
10:19:43 <palomer> pffffffffffffffffffffffffffffffffffft
10:19:44 <palomer> hahahahah
10:20:17 <vincenz> @hoogle (m a) -> m [a]
10:20:18 <lambdabot> Prelude.id :: a -> a
10:20:18 <lambdabot> Prelude.asTypeOf :: a -> a -> a
10:20:18 <lambdabot> Prelude.const :: a -> b -> a
10:21:18 <vincenz> > sequence $ take 10 $ replicate (return 1) :: [Int]
10:21:19 <lambdabot>    Expecting a function type, but found `a'
10:21:19 <lambdabot>    Expected type: [a]
10:21:19 <lambdabot>    I...
10:21:36 <vincenz> > sequence $ take 10 $ replicate (return 1) :: [[Int]]
10:21:37 <lambdabot>    Expecting a function type, but found `a'
10:21:37 <lambdabot>    Expected type: [a]
10:21:37 <lambdabot>    I...
10:21:45 <vincenz> > sequence $ take 10 $ replicate (return 1) :: Maybe [Int]
10:21:46 <lambdabot>    Expecting a function type, but found `a'
10:21:46 <lambdabot>    Expected type: [a]
10:21:46 <lambdabot>    I...
10:22:12 <vincenz> > (sequence $ take 10 $ repeat (return 1)) :: Maybe [Int]
10:22:13 <lambdabot>  Just [1,1,1,1,1,1,1,1,1,1]
10:22:14 <vincenz> \o/
10:24:50 <Pete_I> how do you get the first/second/third item in a triple?
10:25:36 <Pete_I> nvm, i figured it out
10:25:41 <CosmicRay> \fst3 (x, _, _) -> x
10:26:26 <vincenz> @hoogle zipWithM_
10:26:27 <lambdabot> Monad.zipWithM_ :: Monad a => (b -> c -> a d) -> [b] -> [c] -> a ()
10:26:27 <lambdabot> Control.Monad.zipWithM_ :: Monad m => (a -> b -> m c) -> [a] -> [b] -> m ()
10:39:46 <dmhouse> What would be an easy example to explain the list monad?
10:39:59 <dmhouse> I know 'the canonical example is parsing ambiguous grammars', but I never considered that to be too easy.
10:41:09 <liyang> non-determinism? (Same thing, but less concrete...)
10:41:33 <dmhouse> liyang: right, but more concretely? :)
10:42:13 <liyang> There must be easier examples of non-det out there...
10:42:40 <dmhouse> That's what I was thinking.
10:44:30 * dfeuer thinks about tree-shaped electric circuits.
10:48:04 <yip> can i use malloc and then write some asm in there and then execute it somehow?
10:51:31 <dfeuer> huh???
10:51:36 <dfeuer> malloc?
10:51:57 <shapr> liyang: What about game tree exploration?
10:51:57 <dmhouse> @hoogle malloc
10:51:58 <lambdabot> Foreign.Marshal.Alloc.malloc :: Storable a => IO (Ptr a)
10:51:58 <lambdabot> Foreign.ForeignPtr.mallocForeignPtr :: Storable a => IO (ForeignPtr a)
10:51:58 <lambdabot> Foreign.ForeignPtr.mallocForeignPtrArray :: Storable a => Int -> IO (ForeignPtr a)
10:52:09 <shapr> liyang: Like scoring paths in tic-tac-toe?
10:53:07 <dmhouse> shapr, hmm.
10:54:28 <dmhouse> So, for example, given a board configuration, find the possible final boards?
11:22:01 <vincenz> o.O
11:22:38 <vincenz> that's messed up
11:22:50 <vincenz> something compiles fine even though it's not typed properly 
11:22:55 <dmhouse> Hehe :)
11:22:56 <dmhouse> what is it?
11:23:03 <palomer> there are correct programs that are untypeable
11:23:30 <palomer> for some definition of "correct"
11:23:41 <vincenz> basically
11:23:43 <vincenz> in my Exp
11:23:47 <vincenz> ELit Lit ...
11:23:50 <vincenz> then in my interpreter
11:23:52 <vincenz> I match 
11:23:58 <vincenz> ELit v -> return $ VPrim v
11:24:04 <vincenz> except that VPrim should take a Prim, not a Lit
11:24:23 <vincenz> and haskell compiles it without complaining
11:24:49 <palomer> it doesn't typecheck in haskell?
11:24:53 <vincenz> it does!
11:24:56 <vincenz> it compiles just fine
11:24:58 <vincenz> without a hitch
11:25:00 <vincenz> annd it shouldn't
11:25:03 <palomer> in haskell?
11:25:10 <dmhouse> You must be doing some weird voodoo.
11:25:27 <vincenz> palomer: yes!
11:25:41 <greenrd> pastebin it, please
11:25:51 <apfelmus> vincenz: so does it crash at least?
11:26:22 <vincenz> greenrd: it's too spread out
11:26:28 <vincenz> aha at last
11:26:37 <vincenz> last two times I recompiled it didn't complain
11:26:43 <greenrd> hahaha
11:27:08 <greenrd> Did it skip the file in question?
11:27:29 <greenrd> That could happen if a clock is out of whack
11:28:20 * vincenz shrugs
11:31:05 <vincenz> allrighty
11:47:08 <Lokadin> what does the evaluation function mean?
11:47:25 <monochrom> As in?
11:47:46 <Lokadin> Shellac
11:48:06 <Lokadin> mkShellDescription :: [ShellCommand st] -> (String -> Sh st ()) -> ShellDescription st
11:48:09 <Lokadin> Creates a simple shell description from a list of shell commmands and an evalation function.
11:48:27 <Lokadin> evaluateFunc :: (String -> Sh st ())The evaluation function for this shell
11:49:03 <apfelmus> Lokadin: looks like it tells how to evaluate shell commands (the String thingies)
11:49:25 <Lokadin> i don't quite understand, could you perhaps give an example?
11:51:08 <Lokadin> please?
11:51:48 <apfelmus> Lokadin: of course, i'm just figuring out what shellac is :-)
11:52:13 <Lokadin> oh alright .ui.i'o thanks ;)
11:57:25 <nomeata> Hi. I'm using gtk2hs, and I can't find the function to show a simple modal message box.
11:59:25 <apfelmus> Lokadin: mh, it doesn't compile right now but i suspect that
12:00:48 <Lokadin> apfelmus: well i can run a Shell, if i use initialShellDescription
12:01:08 <monochrom> nomeata: somewhere under Graphics.UI.Gtk.Windows.Dialog
12:01:21 <Lokadin> runShell initialShellDescription basicBackend initBackend
12:01:34 <Lokadin> that runs a shell without anything
12:02:11 <apfelmus> mkShellDescription [\_-> ("somecmd", parseCommand id, head (commandSyntax id), head (commandSyntax id))] shellPutStr
12:02:12 <Lokadin> if i could find out what initialShellDescription says i'm sure it would be pretty straight forward from there
12:02:17 <apfelmus> might give something useful
12:02:42 <apfelmus> Lokadin: unfortunately, i mean the library doesn't compile
12:02:52 <Lokadin> oh
12:02:57 <Lokadin> i have an ebuild for it
12:03:03 <Lokadin> do you want it?
12:03:12 <Lokadin> or are you not using gentoo?
12:03:31 <apfelmus> Lokadin: not using gentoo :(
12:03:34 <Lokadin> :(
12:04:06 <Lokadin> oh
12:04:21 <Lokadin> wow i think you're probably quite right :)
12:04:25 <Lokadin> i'll go try it now
12:04:59 <monochrom> dialogNew, then use Graphics.UI.Gtk.Windows.Window.windowSetModal to make it modal.
12:06:12 <dmhouse> Grr. I hate projects with such long module names.
12:06:28 <dmhouse> E.g. Text.ParserCombinators.Parsec, Graphics.UI.Gtk, ...
12:06:53 <monochrom> Need Eclipse-style completion :)
12:07:12 <bringert> hmm, it seems I won't see what anyone else says until I say something myself
12:07:15 <dmhouse> Trunk GHCi has tab completion against names in scope :)
12:07:28 <dmhouse> bringert: which crazy client are you using?
12:08:05 <bringert> hmm, I can't see anything, not even what I write myself. I heard a bling sound though so I guess someone said something to me
12:08:08 <bringert> weird
12:08:09 <bringert> brb
12:08:10 <Lokadin> apfelmus: !!! :) it worked
12:08:45 <nomeata> monchrom: MessageDialog is linked from there, but the link is dead.
12:09:09 <apfelmus> Lokadin: :-) the library does compile now
12:09:11 <monochrom> Don't use MessageDialog.  It doesn't exist yet.
12:09:37 <nomeata> ok, I see. thanks for the info
12:10:16 <Lokadin> apfelmus: cool, :) now i have to get the commands to do something other than print themselves to screen lol
12:10:45 <bringert> let's see how it works now
12:10:53 <dmhouse> bringert: boo!
12:11:00 <bringert> is anyone else here using Colloquy
12:11:08 <bringert> dmhouse: bah
12:11:25 <dmhouse> bringert: Ah, it's working now? By the way, you could check the logs to see if your client is working.
12:11:32 <vincenz> @hoogle intersperse
12:11:33 <lambdabot> List.intersperse :: a -> [a] -> [a]
12:12:29 <Lokadin> g2g!!
12:13:06 <vincenz> @hoogle putStrLn
12:13:07 <lambdabot> Prelude.putStrLn :: String -> IO ()
12:13:07 <lambdabot> IO.hPutStrLn :: Handle -> String -> IO ()
12:13:25 <bringert> the logs have everything I said, there just seems to be some bug in Colloquy 2.1 beta that doesn't display anything that's said after I join a channel
12:14:41 <monochrom> Buffering problem?  You'll see everything after 4k of stuff is accumulated or after you close. :)
12:15:53 <bringert> haha, could be
12:22:02 <shapr> hej bringert!
12:22:09 <bringert> hej shapr!
12:22:14 <shapr> hope is way cool!
12:22:15 <bringert> I like your blog
12:22:19 <bringert> :-)
12:22:20 <shapr> thanks :-)
12:22:27 <shapr> Did you see Sofia's Andy Warhol tribute?
12:22:56 <bringert> shapr: nope, looking now
12:23:13 <shapr> bringert: Oh hej, do the most recent hope updates change the db structure? Should I dump and reload my blog/image entries?
12:23:24 <bringert> yes
12:23:39 <bringert> they add some tables for roles and permissions
12:23:57 <bringert> they don't change any exisiting tables
12:24:08 <shapr> Has the table structure changed for blob/halbum? Will I need to write a migration SQL script?
12:24:12 <shapr> ah, excellent
12:24:27 <bringert> though some updates that hopefully should happen soon will change some existing tables
12:24:53 <shapr> ok
12:25:59 <shapr> I had a question about making Hope do something zope-like, but I can't remember it off the top of my head.
12:26:03 <bringert> shapr: great about shae update
12:26:32 <apfelmus> Lokadin: interesting, interesting. although i wonder why the evaluation function is not supplied piecewise by the individual shell commands.
12:26:43 <lightstep> is there a simple explanation of the to-place zipper and more advanced methods? i'm having trouble with oleg's article
12:26:48 <lightstep> s/to/two/
12:27:05 <bringert> shapr: I saw some hope thoughts in your blog
12:28:22 <lightstep> my main problem is that the explanation seems too tied to haskell, which is lazy and hides sharing. there are examples of one-hole zippers for strict languages on the internet
12:28:35 <lightstep> are there examples of two-hole zippers?
12:28:38 <sinfinity> bringert: does hope have any online documentation?
12:29:00 <bringert> sinfinity: no
12:29:08 <bringert> sinfinity: expect the source code
12:29:11 <bringert> except
12:29:31 <sinfinity> bringert: right :D you have a lot of interesting/useful looking stuff out there
12:29:36 <shapr> bringert: Yeah, but it was something more than than.
12:29:36 <bringert> sinfinity: I could build some haddock, but the API is changing pretty rapidly
12:29:54 <shapr> sinfinity: Plus Hope is way easy to hack on..
12:30:02 <shapr> sinfinity: You can ask me when bringert isn't around.
12:30:09 <shapr> Oh!
12:30:16 <shapr> I wanted to ask about integrating Flippi and Hope
12:30:36 <sinfinity> shapr: alright :D
12:30:41 <shapr> And about generalized tagging, is that planned?
12:31:10 <shapr> I realize I'd like to generalize a lot of plugins, like comments and tags which could be applied to any type, even themselves.
12:31:15 <bringert> shapr: A wiki module is on the TODO list. Basically it would just be a static page module, with page names in URLs
12:31:31 <bringert> shapr: yeah, generalized comments and tags are also on the TODO
12:31:51 <shapr> Do you know how you'll do the generalized stuff? I couldn't come up with a good way to do it in Haskell.
12:32:03 <shapr> It'd be easy in an RDBMS style though.
12:32:29 <bringert> I will change the tags table to have a two column-key, one column for the type of thing that is tagged ("image","entry" etc.), and the second for the id
12:33:07 <bringert> I'm not sure about the details, but I think it should work
12:33:12 <bringert> comments wil work the same way
12:33:25 <bringert> the RSS stuff should also be generalized
12:35:13 <Itkovian> The sky just openened above my head. With a bang.
12:37:51 <BCoppens> Itkovian: still no drop of rain here
12:38:47 <Itkovian> Where do you live?
12:39:10 <BCoppens> near Dendermonde
12:39:15 <Itkovian> It seems to be moving out to sea
12:39:27 <Itkovian> wanna take this to #haskell-blah?
12:39:43 <BCoppens> #haskell-blah?
12:39:47 <Itkovian> teh channel for haskellers to discuss OT stuff
12:39:57 <BCoppens> ah =)
12:46:36 <nomeata> is there a nicer library for sending mail thatn MissingH.EMail.Sendmail? One that takes care of encodings and stuff?
12:47:15 <lispy> nomeata: who made the one you're using? there is one i saw once that looked good, but you might be using it already
12:48:01 <ibid> nomeata: that feature belongs in a MIME library, not in a SMTP/sendmail library
12:48:11 <ibid> nomeata: missingh might have one, dunno :)
12:51:55 <bringert> shapr: I've never used Flippi, what features does it have?
12:52:56 <ibid> nomeata: of course, a smtp/sendmail library could cooperate with a mime library in order to provide a "one-call" interface :)
12:53:58 <shapr> Flippi has a neat plugin architecture, extensible syntax, various neat wiki features.
12:54:24 <basti_> i would want to add, flippi is not Typo3, which is great in itself.
12:54:25 <shapr> ibid: There's the HaskellNet Google SoC project that aims to fix that problem.
12:54:36 <shapr> basti_: Is Typo3 written in Haskell?
12:54:47 <basti_> no, but it is an argument in favour of haskell.
12:54:51 <shapr> huh?
12:55:05 <ibid> shapr: not my problem :)
12:55:18 <shapr> ibid: I know, just saying that MIME + SMTP will be a reality soon.
12:55:19 <basti_> had typo3 been written in haskell, it could have never been as bad.
12:55:20 <shapr> and IMAP too
12:55:40 <ibid> shapr: aren't those in missingh already?
12:55:49 <ibid> shapr: not sure about mime but otherwise?
12:56:42 <shapr> iirc, MissingH has minimal MIME support, but the real solution is to integrate the six or seven subset-of-MIME modules into something that the whole community can use & extend.
12:57:01 <shapr> @google-count filetype:hs mime
12:57:01 <lambdabot> Unknown command, try @list
12:58:42 * SamB sends darcs repo to library list
12:59:02 <shapr> hiya zacch 
12:59:24 <zacch> hi!
12:59:53 <shapr> How's code?
13:00:17 <zacch> what code?
13:00:23 <dmhouse> shapr, do you just know _everyone_?
13:00:24 <zacch> nice channel motto.
13:00:42 <dmhouse> zacch: Hehe, I've always thought that.
13:01:12 <SamB> JaffaCake: does it need a nudge or am I below the limit? Or hasn't it reached mailman yet?
13:01:16 <dmhouse> [#haskell]
13:01:22 <dmhouse> Err, oops
13:01:41 <zacch> dmhouse: also testing a new IRC client??
13:01:54 <zacch> actually, I am... M-x irc in Emacs 22 CVS
13:02:03 <SamB> emacs 22!
13:02:12 <SamB> oh noes! I'm out of date!
13:02:14 <dmhouse> zacch: Nope, just tapping my fingers on my touchpad and invoked X's paste.
13:02:23 <SamB> haha
13:02:40 <SamB> I didn't know you could middle click with the pad
13:02:52 <dmhouse> Yep, I've got a very cool touchpad.
13:02:53 <zacch> we should lobby to get Haskell mode into vanilla Emacs
13:02:57 * SamB thought you needed to push the buttons to do that
13:03:02 <shapr> dmhouse: Not everyone.. but I can tell you lots about most people on #haskell and in the Haskell community.
13:03:17 <SamB> zacch: I prefer chocolate emacs!
13:03:21 <shapr> dmhouse: I'm just very enthusiastic about Haskell and its community.
13:03:30 <dmhouse> SamB: my touchpad can middle-mouse click, right click, scroll both ways, and click and drag.
13:04:02 <dmhouse> And do some fun things like scroll further than is physically possible with the width of the touchpad (you just keep your finger at the edge and it carries on scrolling).
13:04:11 <shapr> zacch: Yeah, ChilliX came up with our channel motto accidentally some years ago when I confused him by freely mixing German and English.
13:06:17 <dmhouse> shapr, that's cool. xerox mentioned that you were like a big #haskell lookup table :)
13:06:36 * SamB wonders why gmail doesn't scan for viruses before I send me email, and remember that there aren't any?
13:06:55 <shapr> dmhouse: Yeah, I think one of my quotes is that I'm an index into the Haskell world.
13:06:58 <shapr> @quote shapr
13:06:58 <lambdabot>  I am hexed and vexed ;-)
13:07:02 <zacch> shapr: there's a new tutorial-style text on my HP, "thinking in states", it contains a bit of Haskell. Probably useful for beginners.
13:07:14 <shapr> zacch: Cool, I'll check it out.
13:07:16 <monochrom> Haskell: "We put the Funk in Funktion".  OCaml: "We put the App in Applikative"   :)
13:07:38 <zacch> Prolog: We put the Pro in Prolog.
13:07:44 <dmhouse> Hehe.
13:07:50 <shapr> zacch: I've put up a new blog using bringert's Hope - http://www.scannedinavian.com/hope/
13:08:11 <monochrom> Thinking in states?!  Heresy!
13:08:11 <shapr> Hope is way nifty.
13:08:12 * SamB wonders why he is able to drag text out of the X-Chat window now
13:08:31 <monochrom> (But where can I read it? :) )
13:08:50 <zacch> monochrom: ask our Google-enemy/friend
13:08:58 <SamB> well, only the text entrys, not the main scrolling text...
13:09:15 <monochrom> @google zacch's HP
13:09:17 <SamB> @google "Thinking in states"
13:09:17 <lambdabot> No Result Found.
13:09:18 <lambdabot> http://stud4.tuwien.ac.at/~e0225855/tist/tist.html
13:09:24 <zacch> yeah
13:09:33 <zacch> funny.
13:10:44 <dmhouse> shapr: Wow, you changed your name?
13:11:03 <shapr> dmhouse: Yup, I wanted something that described me, and Shae is short for shapr :-)
13:11:10 <monochrom> zacch is now known as e0225855 XD
13:11:26 <zacch> ahem.
13:12:02 <dmhouse> shapr: Hmm. Interesting.
13:12:07 <dmhouse> How do you pronounce your middle name?
13:12:10 <shapr> muh-tays
13:12:17 <shapr> That one is Dutch for Matthew
13:12:21 <dmhouse> Ah.
13:12:32 <shapr> My last name has to do with a greek goddess...
13:12:42 <dmhouse> I was wondering whether you just threw some letters together or whether there was some meaining in it :)
13:13:33 <shapr> Matijs just sounds so nice when spoken, especially in the softer Flanders accents.
13:14:01 <shapr> Nijmegen just isn't the same, I think you have to be a heavy smoker just to speak the g in graag gedann if you're from Nijmegen.
13:17:12 <shapr> dmhouse: Sometimes I come up with crazy ideas and then later realize they're at least misguided... so I thought about changing my name for seven years before I really did it. That also gave me time to come up with a name I really like.
13:17:33 <shapr> Much like a tattoo, a name isn't something you can easily change.
13:17:44 <dmhouse> shapr, that's very interesting.
13:18:04 <shapr> Though... when I was changing my name one of the questions was "Have you changed your name once this month already?"
13:18:13 <dmhouse> Heh!
13:18:16 <dmhouse> Did you dislike your old name? Or was it something else?
13:18:19 <SamB> haha
13:18:26 <shapr> It seems that there was a legal maximum limit placed on name changes per month because some people were using it to get out of paying bills.
13:18:46 <basti_> lol
13:19:01 <SamB> wow
13:19:21 <JKnecht> if the language diff is sufficiently great, you have to make a new name. Like English <-> Chinese.
13:19:45 <dmhouse> I've just always thought of my name as my own label.
13:19:51 <sieni> shapr: what was your name originally?
13:20:06 <SamB> what, chinese people can't try to pronounce english names?
13:20:14 <shapr> dmhouse: Nah, several things motivated my name change. Names have power of a sort, and I wanted something that really describes me. Also, in the bible, a name change signifies a major change in the person. Being diagnosed with ADHD and getting Ritalin was a major life change.
13:20:39 <shapr> sieni: http://www.scannedinavian.com/hope/entry/22
13:21:19 <JKnecht> no.
13:21:37 <shapr> dmhouse: Yeah, but think about that lump of plastic in the corner.. let's call it a 'printer'. The name printer immediately invokes certain preconceived notions, even though it's just a lump of plastic and metal. Names affect perception dramatically.
13:22:37 <basti_> thats good for chinese then. they call their children like "luck", "happiness" or "prosperity" ;)
13:22:51 <shapr> dmhouse: For related info see - http://www.scannedinavian.com/hope/entry/5
13:23:00 <sieni> shapr: well Erisson is such a common name that your site is listed 5th in google :-)
13:23:04 <JKnecht> transliterating chinese names to english makes sense, but the reverse doesn't. Some english/western words are partially phonetically transliterated, but new Chinese words are formed.
13:23:39 <shapr> sieni: Well, it means "son of a greek goddess"
13:23:47 <dmhouse> shapr, true. So you were uncomfortable with the preconceptions surrounding your old name?
13:23:54 <shapr> The goddess of Discord, even.
13:24:06 * shapr thinks about that question...
13:24:24 <shapr> dmhouse: To some degree, yes. But I hadn't really thought about it that way before.
13:25:03 <sieni> shapr: which goddess?
13:25:14 <SamB> eris!
13:25:15 <shapr> Erisson == son of eris
13:25:25 <shapr> @wikipedia eris
13:25:28 <lambdabot> No Result Found.
13:25:32 <shapr> @wikipedia Eris
13:25:34 <lambdabot> No Result Found.
13:25:42 <SamB> @google eris
13:25:44 <lambdabot> http://en.wikipedia.org/wiki/Eris
13:25:50 <SamB> oookay
13:26:03 <SamB> something must have broken @wikipedia...
13:26:18 <shapr> For more information on Eris, read The Principia Discordia, or consult your nearest pineal gland.
13:26:19 <sieni> ah :-)
13:26:48 <dmhouse> shapr, cool, thanks. I don't think I've ever talked to someone who has changed their name for reasons other than sheer ulititarianism. :)
13:27:19 <dmhouse> (My friend's mum had a _very_ long Egyptian name she changed when she moved to England)
13:27:40 <shapr> From one viewpoint I just wanted to... but from my viewpoint I did it for very important reasons.
13:27:47 <tlampo> Hi guys, sorry for bothering you, but is there a way to know what type a specific variable is, in haskell ?
13:27:48 <shapr> That sounds cool :-)
13:27:59 <shapr> tlampo: use :t in ghci, or @type in lambdabot 
13:28:11 <monochrom> Not within the program.
13:28:17 <SamB> @type id
13:28:19 <lambdabot> forall a. a -> a
13:28:19 <tlampo> cool, thanks, sorry
13:28:26 <shapr> tlampo: What variable do you have?
13:29:21 <tlampo> I have to make a function that may receive to different data type, and depending on the type of each one, it has to do a different thing...
13:29:37 <shapr> Maybe a typeclass would be useful?
13:29:48 <tlampo> If it is a pair, I need only the first element, if it's not a pair, then I take the variable as it is...
13:29:58 <dmhouse> Yep, a typeclass.
13:30:16 <dmhouse> (Or perhaps rethink the problem as a whole)
13:30:21 <tlampo> typeclass ? I'll go check that out... Thanks a bunch, guys..
13:30:27 <dmhouse> It's a rare occasion when I need a function like that.
13:31:05 <SamB> well, show doesn't do the same thing for every type!
13:31:15 <tlampo> g2g, I'm on a ssh from college to my house, it couldn't be any slower... Thanks again, sorry for bothering you...
13:32:50 <lazy> hi, I'm trying to run a program in ghci (6.2.2) but it always fails with "Can't find module `System.Process'".  What's the problem here?  Isn't System.Process in the base package which is loaded by default?
13:33:12 <JKnecht> 6.2.2
13:33:33 * SamB might have once had 6.2.2
13:33:45 <dmhouse> lazy, you really need to upgrade. 
13:33:58 <dmhouse> System.Process may have been included since 6.2.2.
13:34:00 <SamB> yeah, stop using debian stable...
13:34:24 <lazy> so that version is too old?
13:34:31 <SamB> maybe!
13:34:47 <SamB> you could check the docs, I guess...
13:34:59 <SamB> @google GHC 6.2.2 docs
13:35:01 <lambdabot> http://www.haskell.org/ghc/download_ghc_622.html
13:35:05 <SamB> hmm.
13:35:18 <SamB> @google GHC 6.2.2 inurl:docs
13:35:20 <lambdabot> http://www.haskell.org/ghc/docs/6.2.2/
13:35:27 <sieni> its like 20 months old
13:35:46 <sieni> +'
13:35:51 <dmhouse> And no System.Process.
13:35:58 <lazy> indeed, thank you
13:49:59 * shapr upgrades Hope
13:50:11 <petekaz> @google hope
13:50:12 <lambdabot> http://www.hopetech.com/
13:50:15 <petekaz> :-)
13:50:23 <shapr> @google hope haskell
13:50:24 <lambdabot> http://www.cs.kent.ac.uk/people/staff/cr3/bib/
13:50:28 <shapr> @google hope haskell bringert
13:50:29 <lambdabot> http://tunes.org/~nef/logs/haskell/04.07.22
13:50:31 <shapr> hmm
13:50:39 <shapr> petekaz: hope.bringert.net
13:50:50 <shapr> @where hope
13:50:50 <lambdabot> http://hope.bringert.net/
13:51:01 <petekaz> what is this hope you speak of?  in haskell, there can be no such thing :-)
13:51:09 <bringert> shapr: creating the new database tables is a bit of a pain
13:51:56 <shapr> createdb doesn't do it?
13:52:02 <petekaz> is it going to be a generic framework for webapps, or specific to blogs?
13:52:03 <bringert> shapr: I ended up loading Hope.Permission.DBDesc into ghci
13:52:09 <shapr> yow
13:52:15 <bringert> shapr: well, yes, but it fails because some modules already exist
13:52:16 <shapr> No way to incrementally build tables?
13:52:22 <bringert> not atm
13:52:36 <shapr> Would be nice... is it possible?
13:52:38 <bringert> that would fail if any existing tables are modified too
13:52:48 <shapr> petekaz: generic webapp framework 
13:52:55 <bringert> just adding the tables that don't exist should be easy enough
13:53:08 <bringert> figuring out the delta to do update table is not so easy
13:53:10 <shapr> You could check to see if the existing tables match the dbdesc?
13:53:13 <shapr> oh, hm
13:53:19 <bringert> besides, haskellDB doesn't have update table
13:53:28 <shapr> No, but it could whine to the user?
13:53:28 <petekaz> cool!!  I'm new to haskell, but everything I do programming wise always inevitably needs to have some sort of web access.
13:53:39 <bringert> true
13:53:50 <shapr> I can upgrade my tables by hand if it's less trouble than dumping and reloading the data.
13:54:07 <bringert> another problem is that getting the dbdesc from the database might not gave you the dbdesc you started with
13:54:14 <shapr> oh hm
13:54:25 <bringert> because of various RDBMS weirdness and type mismatch
13:54:49 <bringert> anyway, I could have createAllTables catch any exceptions it runs into
13:54:50 <shapr> When tables don't match, can you dump the sql that would be used to create the non-matching table to the user?
13:55:05 <shapr> petekaz: Hope is nifty, have you seen the installations bringert and I have?
13:55:14 <bringert> I should just add an option to dump the SQL anyway
13:55:25 <petekaz> shapr: just the web page you pointed me to.
13:55:37 <shapr> petekaz: http://www.scannedinavian.com/hope/
13:55:39 <bringert> that way the user can get the SQL for the whole setup, and tweak to add indexes, change MySQL table types, etc.
13:55:47 <shapr> bringert: Yeah, would be nice.
13:55:54 * shapr must now massage his gf, bbl
13:56:02 <bringert> :-)
13:56:57 <petekaz> What's the deal with unicycles in scandinavian countries.
13:57:30 <petekaz> this is the 2nd blog in less than 2 weeks I've seen them mentioned, Luke Gorrie of Erlang fame was blogging about one as well.
13:57:47 <petekaz> I thought it was a joke, now I'm starting to wonder.
14:03:50 <bringert> petekaz: the unicycle or the girlfriend?
14:11:46 <vincenz> re
14:21:49 <shapr> petekaz: Where's Luke's blog?
14:23:52 <kpreid_> shapr: fyi I updated e.lhs
14:26:30 <dmhouse> Is it possible to make a strictly normalising Turing complete calculus?
14:26:52 <darrint_> Is there an function noop that returns IO()?
14:27:38 <dmhouse> darrint_: how about return ()?
14:27:53 <dmhouse> 'return a' is the action that does nothing and has the result of a.
14:28:38 <darrint_> ah. Thanks.
14:28:58 <greenrd> Is there a way to print a type with all type synonyms expanded?
14:29:03 <greenrd> e.g. in ghci
14:29:10 <dmhouse> :i typename
14:29:16 <dmhouse> I _think_ that does it.
14:30:25 <greenrd> It's not a type name
14:30:30 <greenrd> It's a type expression
14:31:49 <dmhouse> Oh, then I'm not sure.
14:32:21 <bringert> shape: welcome back
14:32:54 <bringert> shapr: so, who's this new girlfriend of yours?
14:33:08 <greenrd> and if I make it a type name it still doesn't expand the type synonyms
14:37:04 <kpreid_> greenrd: only works for monomorphic, but try Data.Typeable.typeOf (undefined :: typeToExamine)
14:42:26 <yip> can i call a c function from haskell?
14:43:43 <dmhouse> Yep.
14:43:56 <dmhouse> yip, look at the Foreign Function Interface (FFI).
14:44:04 <yip> what if it's one of those c libraries that isn't compiled, it's just header files
14:47:16 <shapr> bringert: I've been dating her for nearly a year now, and her self description just now is "Jag är helt underbar"
14:47:49 <bringert> sounds good
14:48:07 <bringert> is she the reason for the Stockholm move?
14:48:07 <dmhouse> Aww, @bable doesn't have a swedish mode. (Or danish, whatever :).)
14:48:09 <shapr> bringert: But seriously, she's Swedish and she's nifty.
14:48:12 <dmhouse> *@babel
14:53:30 <petekaz> shapr: http://fresh.homeunix.net/~luke/weblog/glog.html#5%20Jun%202006%2020:33:51%20%2B0200
14:54:11 <petekaz> shapr: you still learning erlang, or did that summer job not come through for you?
14:57:43 <greenrd> and if I make it a type name it still doesn't expand the type synonyms
14:57:48 <greenrd> oops
14:57:51 <greenrd> wrong window
15:01:10 <darrint_> has timerfunc in hopengl been renamed to something?
15:01:45 <int-e> @hoogle something
15:01:46 <lambdabot> Data.Generics.Schemes.something :: GenericQ (Maybe u) -> GenericQ (Maybe u)
15:10:51 <darrint_> hoogle can't find it, or any function beginning with timer
15:10:59 <darrint_> But it is documented in old tutorials
15:14:01 <darrint_> hoogle doesn't seem to cover hopengl
15:15:19 <darrint_> !!! addTimerCallback !!!
15:23:06 <bringert> shapr: Hope darcs now has a a working role permissions editor
15:23:17 <bringert> though you can't add new roles yet
15:23:55 <shapr> yay!
15:24:04 <shapr> I'll finish my upgrade tomorrow though, time for sleep now.
15:27:19 <bringert> shapr: good night
15:30:35 <greenrd> Any tricks for debugging "Couldn't match the rigid variable `b' against the rigid variable `b11'", other than thinking really hard?
15:30:51 <greenrd> I'm kind of used to such messages now, but this is getting quite complicated
15:35:48 <Cale> that usually means that you've given a type signature which is overly polymorphic
15:36:27 <greenrd> I probably need to separate out this bit of code into a separate function with its own type signature
16:01:12 <SamB> greenrd: what kind of code?
16:01:51 <vincenz> Cale: my compiler works :)
16:05:39 <ricebowl> is there any function that is like takeWhile but carries state, i.e. so that I can group contiguous elements in a list into sublists?
16:05:55 <ricebowl> [1,2,3,6,7,8,10] -> [[1,2,3],[6,7,8],[10]]
16:07:16 <dcoutts> nomeata, file a feature request to make constructing simple dialogs easier
16:07:57 <SamB> dialog box combinators!
16:09:14 <greenrd> SamB: Heavy stuff that simulates dependent types
16:09:25 <ricebowl> @hoogle (a -> a -> Bool) -> [a] -> [[a]]
16:09:26 <lambdabot> List.groupBy :: (a -> a -> Bool) -> [a] -> [[a]]
16:09:37 <SamB> greenrd: no wonder!
16:10:20 <SamB> @localtime JaffaCake 
16:10:41 <SamB> @timefor JaffaCake
16:10:41 <lambdabot> Unknown command, try @list
16:10:57 <SamB> @hit JaffaCake 
16:10:58 <lambdabot> No match for "JaffaCake".
16:11:07 <SamB> @help hit
16:11:08 <lambdabot> help <command>. Ask for help for <command>. Try 'list' for all commands
16:11:12 <SamB> @hit
16:11:18 <SamB> @hit me
16:11:19 <vincenz> \o/
16:11:19 <lambdabot> No match for "me".
16:11:35 <vincenz> Work hard, play hard :)
16:11:38 <stepcut> hit is probably been spell-checked into something else ?
16:11:38 * vincenz is in a great mood
16:11:46 <SamB> stepcut: yeah
16:12:05 <SamB> but there is unfortunately no way (that I know of) to get lambdabot to tell me what
16:12:57 <dcoutts> nomeata, you can file a feature request here: http://hackage.haskell.org/trac/gtk2hs/newticket
16:20:30 <vincenz> \o/
16:23:53 <vincenz> dcoutts: question... eta-expansion for builtins.. (foreign declarations)...pre or post typecheck?
16:24:10 * vincenz does it post-type check atm
16:24:45 <vincenz> basically I generate code-samples based on the type which are themselves properly typed (although at that moment it matters little)
16:25:03 <vincenz> (the properly typed bit)
16:25:04 --- mode: vincenz set -o vincenz
16:33:27 <vincenz> JaffaCake: Perhaps you know how this is done in GHC?
16:33:36 <vincenz> @seen JaffaCake 
16:33:36 <lambdabot> JaffaCake is in #haskell. I last heard JaffaCake speak 11 hours, 29 minutes and 40 seconds ago.
16:47:13 <vincenz> @hoogle replicate
16:47:14 <lambdabot> Prelude.replicate :: Int -> a -> [a]
16:47:14 <lambdabot> Control.Monad.replicateM :: Monad m => Int -> m a -> m [a]
16:47:14 <lambdabot> Control.Monad.replicateM_ :: Monad m => Int -> m a -> m ()
16:55:07 <twb> What's the \bot invocation to simplify an expression?
16:55:14 <vincenz> @pl
16:55:14 <lambdabot> (line 1, column 1):
16:55:14 <lambdabot> unexpected end of input
16:55:14 <lambdabot> expecting white space, natural, identifier, lambda abstraction or expression
16:55:18 <twb> Thanks.
16:55:35 <twb> @pl \x.\f.f x
16:55:35 <lambdabot> (line 1, column 3):
16:55:36 <lambdabot> unexpected "."
16:55:36 <lambdabot> expecting letter or digit, operator, pattern or "->"
16:55:39 <twb> Gah!
16:55:45 <twb> @pl \x -> \f -> f x
16:55:45 <lambdabot> flip id
16:55:52 <twb> flip!
16:55:56 <twb> Of course!
16:56:05 * monochrom flips twb
16:56:33 <twb> I'm writing in Scheme; I don't have the luxury of all the predefined functions :-(
17:02:05 <petekaz> OT: anyone here have a gmail account?  do they offer POP access?
17:02:15 <AtnNn> they do
17:02:17 <vincenz> petekaz: yes
17:03:35 <petekaz> cool, my mother-in-law's community in FL just got free wireless, so she dropped her roadrunner account, not realizing that the free wireless does not include email services.
17:04:16 <petekaz> And she likes her Apple Mail client vs reading mail via the web.
17:19:58 <twb> Beware: you can never pop what google flags as spam.
17:20:03 <twb> And you can't disable spam flagging.
17:20:20 <twb> So if google false-positives non-spam, you never know about it unless you use the web UI.
17:20:55 <petekaz> hmmm ... thanks.
17:21:11 <petekaz> the mother-in-law would never have figured that one out.
17:21:33 <Adamant> are you sure about that?
17:21:34 <jer> twb, well that's retarded
17:21:43 <twb> I know.
17:21:44 <Adamant> I thought I turned off Google's spam-flagging
17:21:49 <twb> Unforunately, I am not google.
17:21:56 <petekaz> fortunately, I can't imagine an elementary school teacher getting a lot of email that might be falsely idenitified as spam.
17:22:20 <twb> Well, for obvious reasons I can't tell you how many false positives I've had.
17:22:33 <twb> I only found a couple by chance.
17:23:16 * jer tends to get about one false positive a month; but i get literally hundreds of caught spam weekly (usually around 450 ~ 650 every 2 weeks)
17:23:24 <jer> so 1 false positive a month is a small price to pay
17:23:53 <mlh_> twb> "obvious reasons" .. you mean you really have won the lottery/buy viagra/invest in dodgy oil stocks?
17:23:59 <mlh_> :-)
17:24:18 <twb> No, I mean that I didn't detect the false positives, because I only use the POP interface.
17:24:42 <twb> It's like trying to count the number of uncaught plagiarists in an exam.
17:25:26 <SamB> well, you start by subtracting from the number of exam takers the number of caught plagiarists....
17:25:42 <twb> Heh
17:25:53 <SamB> I'm not sure what you do next, though
17:26:09 <twb> That gives you an upper bound.
17:26:14 <twb> And obviously the lower bound is 0
17:26:14 <SamB> yes ;-)
17:32:24 <sethk> if you took the test, you probably know that the lower bound is 1
17:32:41 <twb> That's mean.
17:42:18 * palomer pokes Cale 
18:21:32 * palomer pokes cale again
18:23:41 <dudleyf> @help
18:23:41 <lambdabot> help <command>. Ask for help for <command>. Try 'list' for all commands
18:33:05 <Cale> hello
18:43:43 <dons> morning
18:43:53 <jgrimes> dons, morning :)
19:22:12 <Pete_I> in [ n | n <- [0..] what is n called?
19:23:08 <dons> well, the n <- ... is called the 'generator'
19:23:14 <SamB> a comprehension-bound variable?
19:23:19 <Pete_I> ok. thanks.
19:23:49 * SamB just made that up ;-)
19:23:53 <dons> there's not really an standard name for that variabe.
19:23:54 <Pete_I> why do we still call them variables in haskell if they never vary?
19:24:04 <dons> they're math variables
19:24:09 <dons> f x = x
19:24:16 <dons> the variable 'x' varies
19:24:20 <Pete_I> ah
19:24:28 <dons> the _true_ variables
19:24:39 <dons> not these crazy mutable ones, which is a low-level abuse of the term ;)
19:25:50 <SamB> the ones bound at top level are actually more like constants, but we call them variables anyway because, well, we do ;-)
19:26:17 <dons> well, you might call them constant applicative forms, or actually constants if they really are const
19:27:00 <Pete_I> well, they do seem to be constants.
19:27:14 <Pete_I> within their own scope atleast
19:27:34 <SamB> well, for any given type, they always have the same value!
19:27:55 <dons> SamB, you mean things like: x = 10 ?
19:28:15 <darrint_> Does anyone have an example of how to use readPixels (hopengl)?
19:28:19 <SamB> anything!
19:28:39 <Pete_I> SamB, what about type IO? :)
19:28:59 <SamB> well, you don't call those constants, you call them procedures or something like that
19:29:09 <SamB> functions, commands
19:29:16 <dons> oh, i was thinking more like: f = map . filter . id
19:29:19 <dons> or something like that
19:29:56 <SamB> well, you usually don't call one of those a variable
19:30:09 <dons> right
19:30:10 <SamB> but you might refer to a bunch of things including that as variables
19:31:17 <Pete_I> so...shouldn't we stop calling them variables if they don't vary?
19:32:08 <Pete_I> dons, what does that code do?
19:32:10 <dons> things at the top level are special, often have their own special nomenclature (yes!), but it doesn't change the general use of variables in the expr bodies
19:32:14 <Dino__> I guess you could think of in a different sense of the word variable. As in, that value can vary with each evaluation of the function. But not during an evaluation.
19:32:29 <Dino__> Does that make sense?
19:32:40 <dons> Dino__: exactly.
19:32:44 <dons> that's what it is. like math
19:32:58 <Pete_I> mmm, i thought that was called scope.
19:33:01 <dons> each time you apply the function 'f', its variables will vary.
19:33:09 <dons> Pete_I: hmm, not really.
19:33:14 <Pete_I> ok
19:33:17 <Pete_I> i got it :)
19:33:20 <dons> scope is related.
19:33:38 <dons> the scope of the argument doesn't change on each application though.
19:33:43 <dons> s/variable/
19:33:55 <Dino__> What they teach us with imperative variables is really a named container whose contents can be changed.
19:34:04 <dons> yeah, a mutable container
19:34:36 <dons> a special case hack, really ;)
19:35:08 <dons> so in languages like ML and Haskell, they're a not-so-often used special type, MVar, or IORef (and in ML its, hmm, forget..)
19:35:28 <dons> which specify the slighly weird, and dangerous semantics of mutability
19:35:34 <Pete_I> why would you need a mutable variable?
19:35:58 <dons> sometimes they're useful. thread synchronisation for example
19:36:01 <dons> global variabels
19:36:07 <dons> that really vary ;)
19:36:19 <Dino__> Huh, I didn't know those things existed in Haskell.
19:36:22 <dons> sometimes for efficiency, an IORef can be handy
19:36:40 <dons> state :: MVar Editor
19:36:40 <dons> state = unsafePerformIO $ newMVar emptyEditor
19:36:41 <dons> {-# NOINLINE state #-}
19:36:43 <dons> an ioref
19:36:43 <marencian> can someone please tell me what the dot operator does? the docs just say "function composition" which is foreign to me
19:36:53 <dons> NOW AVERT YOUR EYES!
19:37:03 <dons> s/ioref/global var/ -- more coffee please
19:37:29 <dons> normally you use them in the IO monad, or ST, to ensure the sequencing is right
19:37:42 <dons> marencian: it combines two functions, e.g.
19:37:44 <dons> ?type (.)
19:37:46 <lambdabot> forall c a b. (b -> c) -> (a -> b) -> a -> c
19:38:01 <dons> takes one function from b -> c, and another from a ->b, and combines them
19:38:05 <SamB> dons: don't confuse the poor creature!
19:38:06 <dons> producing a new functoin from a -> c
19:38:09 <dons> so,
19:38:11 <SamB> basically:
19:38:21 <dons> > (+1) . (+2) $ 1
19:38:22 <lambdabot>  4
19:38:29 <dons> > (+1) . (+2) $ 0
19:38:30 <lambdabot>  3
19:38:36 <SamB> f . g = (\x -> f (g x))
19:38:44 <dons> right, like writing:
19:39:01 <dons> > (1+ (0+2))
19:39:02 <lambdabot>  3
19:39:20 <dons> most often used in 'pipelines'
19:39:23 <Pete_I> eh, why would you need that?
19:39:29 <SamB> > let (f . g) x = f (g x) in ((+1) . (*2)) 3
19:39:30 <lambdabot>  7
19:39:36 <SamB> oh, cool!
19:39:37 <dons> > filter (/='e') . map toLower $ "hEskEkll"
19:39:38 <lambdabot>  "hskkll"
19:39:38 <Dino__> dons: Wow, as a beginner, I found those (+1) . (+2) things hard to read. :o
19:39:40 <SamB> you can also write it:
19:39:45 <SamB> (f . g) x = f (g x)
19:40:07 <SamB> which is much easier to read than the version with a slash ;-)
19:40:11 <marencian> ahh I think I see now, thanks, I'll mess around with it for a while until i realise i don't understand
19:40:18 <SamB> haha
19:40:25 <SamB> equational reasoning!
19:40:38 <dons> > map toLower . reverse $ "HEKLAD"
19:40:39 <lambdabot>  "dalkeh"
19:40:53 <dons> > map toLower (reverse $ "HEKLAD")
19:40:54 <lambdabot>  "dalkeh"
19:41:10 <dons> Dino__: yeah, sorry :)( I should have used list functions to demo)
19:41:10 <Dino__> But those +1 and +2 things there are curried addition functions.
19:41:22 <dons> yep. too many concepts in the one line
19:41:34 <dons> > map (+1) [1.3]
19:41:35 <lambdabot>  [2.3]
19:41:53 <dons> oh, my comma slipped
19:42:14 <dons> > map (^2) [1..4]
19:42:15 <lambdabot>  [1,4,9,16]
19:42:30 <Dino__> One thing that's taking some time to get used to is that it seems like constant values, "variables" and functions.. all really the same thing. Just expressions.
19:42:42 <dons> yep.
19:42:42 <dons> its all just exp
19:42:42 <dons> ressoins
19:42:48 <Pete_I> yep, that's cool
19:42:57 <marencian> interesting
19:43:07 <dons> but variables are those things that change when you apply the function to different values
19:44:40 <dons> really, the base language is just 4 constructs, and some sugar. function application (f x), function abstraction (\x -> x+1), let bindings (allocation), case bindings (pattern matching)
19:44:44 <dons> the rest is details ;)
19:45:28 <Pete_I> where's IO fit in there?
19:45:43 <dons> its just another container type
19:45:48 <dons> its not particularly special
19:46:16 <dons> the monad operators define a sequencing abstraction, which is the interesting bit
19:46:20 <dons> but no magic is required
19:46:42 <dons> since you get sequencing with other mechanisms as well: 
19:46:51 <dons> > case 1+2 of x -> case x + 3 of y -> y + 4
19:46:52 <lambdabot>  10
19:47:04 <dons> is essentially all IO boils down to
19:47:15 <dons> a bunch of nested cases threading their results
19:48:17 <dons> IO certainly isn't part of the core language.
19:49:34 <Dino__> I was having trouble reading the cases. But I see.. first 1+2 pattern matches the x and so on and keeps getting used in a sequence.
19:49:54 <Dino__> This is basically what those >> operators are doing?
19:50:26 <dons> first you evaluate 1+2, bind the result to 'x', and then ...
19:50:32 <dons> Dino__: yep
19:51:02 <dons> here's >>= for IO:
19:51:03 <dons> bindIO (IO m) k = IO ( \ s ->
19:51:03 <dons>   case m s of 
19:51:03 <dons>     (# new_s, a #) -> unIO (k a) new_s
19:51:03 <dons>   )
19:51:11 <dons> unIO (IO a) = a
19:51:29 <dons> so the trick is the right hand side of the bind (i.e. f >>= k)
19:51:39 <dons> the 'k' is applied to the result of running 'f'
19:51:54 <dons> which then expands to another case, which continues the process
19:52:14 <dons> just read (# #) as a tuple (they're unboxed tuples, for efficiency)
19:53:52 <dons> so, getLine >>= print --> IO $ \s -> case getLine s of (s', c ) -> print c s'
19:54:01 <Dino__> The tuple, is it the only way something can return multiple things? Or, everything has to return one *something*, so that something can be this pair/triple/whatever.
19:54:05 <dons> and clearly, the ordering is maintained.
19:54:24 <dons> Dino__: its a way to define a struct. 
19:54:38 <dons> you could use a custom data type as well
19:54:42 <Dino__> Well, multiple things not of the same type.
19:54:47 <dons> data Pair a b = Pair a b
19:54:51 <dons> Dino__: yep
19:55:05 <dons> data (,) a b = (,) a b -- same thing
19:56:32 <dons> and you can see what 'return' would do. it builds something of IO a out of an a,
19:56:36 <dons> returnIO x = IO (\ s -> (# s, x #))
19:57:08 <SamB> a tuple is just a datatype like any other:
19:57:12 <dons> and IO itself is just a newtype for functions from state -> state', 
19:57:14 <dons> newtype IO a = IO (State# RealWorld -> (# State# RealWorld, a #))
19:57:44 <dons> so, all imperative programming is just a special case of functional programming
19:57:58 <dons> the case where you thread the state around in a monad
19:58:28 <SamB> data (,) a b = (,) a b deriving (Eq, Ord)
19:58:32 <SamB> data (,,) a b c = (,,) a b c deriving (Eq, Ord)
19:58:35 <SamB> etc.
19:58:41 <dons> having implicit state as the default setting of your language seems like a bad default, just like having mutable containers for all variables by default.
19:58:54 <Dino__> SamB: I see, these are just already-defined datatypes.
19:58:54 <SamB> apparantly in NHC they even go in the export list of Data.Tuple!
19:59:20 <SamB> Dino__: they have special *syntax*, but there isn't much to that
19:59:23 <dons>   , curry   -- :: ((a, b) -> c) -> a -> b -> c
19:59:23 <dons>   , uncurry -- :: (a -> b -> c) -> ((a, b) -> c)
19:59:23 <dons> #ifdef __NHC__
19:59:23 <dons>   , (,)(..)
19:59:23 <dons>   , (,,)(..)
19:59:25 <dons> ...
19:59:27 <SamB> just some AST stuff
19:59:45 <SamB> and parsing
20:00:04 <dons> yep. just fun synatx for writing data Pair a b = Pair a b deriving (Eq, Ord)
20:00:12 <sethk> I ordered a new monitor this morning, and it isn't here yet.  What's this world coming to?
20:00:20 <dons> hehe
20:00:29 <SamB> sethk: you go to the store if you want it same-day, silly
20:00:38 <dons> and i was happy when my shoes arrived from the uk in two weeks... 
20:00:45 <sethk> SamB, but the store was out of it.  Is that reasonable?
20:00:54 <SamB> well, you wait!
20:00:57 <Dino__> dons: Very interesting, what you said about imperative programming being a special case of functional.
20:01:02 <sethk> SamB, shouldn't the store have known I needed it and ordered it last week?
20:01:16 <SamB> sethk: only if the store is evil and stalking you
20:02:09 <dons> Dino__: this is why we often say that haskell's the finest imperative programming language in the world
20:02:16 * SamB wonders if GHC can parse "data (a, b) = (a, b)", too
20:02:59 <dons> since it does imperative programming perfectly, + you get all the other goodies: nice syntax, static typing, powerful data types, great abstractions, custom state for monads and so on.
20:03:30 <SamB> now, note that there is nothing in the standard saying that tuples are declared in data declarations like this ;-)
20:03:47 <SamB> but the fact that they *can* be should demystify them considerably
20:04:01 <dons> SamB: i don't think data (a, b) = (a, b) will parse
20:04:05 <SamB> also, the standard is a bit out of date
20:04:19 <dons> but data a :,: b = a :,: b would be fine.
20:04:24 <SamB> dons: well, it ought to, but there isn't much motivation with the global scope ;-)
20:04:31 <dons> which implie that perhaps data a , b = a , b should too
20:04:42 <dons> and then add optional custom brackets to your type
20:04:54 <dons> data <a,b> = <a,b> should be lega ;)
20:05:21 <SamB> ah... but then what would data a , b , c = a , b , c do?
20:05:25 <SamB> dons: you are confusing Haskell with maths again, I think
20:05:30 <dons> precedence
20:05:36 <SamB> Haskell is interpreted by a computer!
20:05:47 <SamB> maths are interpreted by humans!
20:05:55 <SamB> that is the principle difference between Haskell and maths
20:06:07 <sethk> dons, if you don't answer my email soon I'll have to go back to writing in cobol or something
20:06:13 <dons> really??
20:06:22 <dons> sethk: don't scare me.
20:06:27 <Korollary> the gloves come off
20:06:45 <dons> sethk, you really need the patch? perhaps i should devote some time to it then.
20:06:49 <SamB> sethk: you couldn't just write in, oh, C or something sane like that?
20:07:04 <sethk> dons, I don't have to have it, no, but it is bothering me.  I want to know the answer
20:07:09 <sethk> SamB, that's even worse.
20:07:20 <dons> sethk. ok.
20:07:22 <SamB> or if you must use a wordy language, you could take Inform 6 for a spin ;-)
20:07:29 <dons> it bothers me too, because i think it might be easy
20:07:56 <sethk> dons, it's a common situation, and besides, if we decided to write something up about this project, we want code we don't have to make excuses for.
20:08:04 <dons> yep
20:08:17 <dons> ok. i've scheduled it for today
20:08:24 <dons> that and getting out the delayed HWN issue
20:08:50 <sethk> thanks
20:09:12 <Dino__> SamB: Do you perhaps mean I7?
20:09:21 <SamB> er, yeah!
20:09:25 <SamB> haha
20:09:26 <Dino__> (the new Inform that's basically English)
20:09:28 * SamB is tired
20:09:44 <SamB> Inform 6 is the old one that looks like some kind of insane C!
20:10:26 <Dino__> I always felt it was weirder than C even. I mean, functions are defined inside [ ] with the name just inside the first [
20:10:41 <SamB> that is why I said "insane C"
20:10:42 * ptolomy checked for HWN probably 7 times at work today.
20:11:19 <sethk> sounds like lisp using [ instead of (
20:11:21 <Dino__> But I wonder if this new Inform will be problematic in its own ways. It's more of a rules thing like make.
20:11:39 <SamB> evidently they fixed the bug I reported.
20:11:46 <SamB> the program was "The kitten is nowhere."
20:12:03 <SamB> it basically crashed the compiler.
20:12:40 <Dino__> SamB: heh, interesting. I haven't touched any of it yet. I don't use Win or Mac and don't have the energy to get crazy with the Wine for it.
20:12:57 <SamB> well, someone was working on a Linux port in Haskell
20:13:04 <SamB> but I haven't looked for about a month ;-)
20:13:05 <Dino__> So, waiting for when it has a sane cli compiler.
20:13:16 <LordBrain> writing the kernel?
20:13:24 <Dino__> SamB: That's right, I remember reading that. Somebody working on a gtk Haskell IDE for it.
20:13:26 <SamB> (of the IDE)
20:13:55 <SamB> I really ought to see about getting it from arch -- presumably theres been another release by now of this IDE ;-)
20:14:44 <SamB> of course, you still need WINE to run the compiler. or did last I checked.
20:14:45 <LordBrain> i downloaded yi
20:15:03 <LordBrain> i dont think it compiled tho... something i'm missing
20:15:20 <dons> fps perhaps?
20:15:21 <Dino__> dons: Regarding what you said about Haskell being the finest.. I've been very impressed with a lot of things. People seem to get a huge load of work done and absolutely love writing in it.
20:15:40 <dons> yeah. its fun. haskell hackers walk around with smiles on their faces all the time :)
20:16:06 <jgrimes> I'm coding in haskell right now, and loving it!
20:16:12 <dons> since they don't need a debugger, mainly and the code is the shortest around.
20:16:24 <LordBrain> hmm i see fps come up in here often.. what is it?
20:16:36 <LordBrain> functional post script?
20:16:37 <dons> a fast string data type, and corresponding io library
20:16:42 <dons> ?where fps
20:16:42 <LordBrain> ah
20:16:42 <lambdabot> http://www.cse.unsw.edu.au/~dons/fps.html
20:16:56 <sethk> hmm, functional postscript, what a concept.  :)
20:16:57 <LordBrain> functional postscript is a different fps
20:16:58 <dons> for C-ish speed and memory usage, but a haskell list api
20:17:01 <SamB> Function PostScript is an ML library of some kind
20:17:26 <LordBrain> @google fps functional
20:17:28 <lambdabot> http://www.mm.informatik.tu-darmstadt.de/~kuehne/fps/
20:18:32 <LordBrain> hmm my local google gave me something else
20:19:03 <Korollary> different big brother
20:19:04 <LordBrain> http://www.scsh.net/resources/fps.html
20:20:02 <SamB> hmm, they changed Google Groups again didn't they?
20:20:16 <Dino__> I was thinking about that a few days ago, like where's the debugger. But.. it's different, you can't really do the many of the things you do in a debugger like stop execution at some point.
20:20:29 <SamB> o/` its beginning to look a lot like g-mail o/`
20:20:47 <Dino__> Is it that you can use the various interpreters (hugs, ghci) for debugging? As in, load your code, evaluate functions with known data?
20:20:56 <SamB> yeah!
20:20:59 <LordBrain> i guess google isn't referentially transparent
20:21:02 <LordBrain> ;)
20:21:35 <SamB> LordBrain: how would you get new versions that way?
20:21:56 <SamB> anyway, they'd need longer URLs and a *lot* more diskspace
20:22:02 <LordBrain> lol
20:25:49 <SamB> ah, they do still have the old-style UI
20:28:22 * SamB downloads new version of IDE from http://www.thewhitelion.org/inform7/
20:28:37 <SamB> News thread was http://groups.google.com/group/rec.arts.int-fiction/browse_frm/thread/58aea4aa14ee2d96
20:30:30 * SamB notices Arch instructions
20:30:57 <SamB> hmm, my arch is not happy
20:31:01 * SamB tries to get a newer one
20:33:04 <SamB> I tried to get XPCOM and Haskell to play, but I couldn't even find enough docs to parse the interface files
20:33:21 <SamB> (and parts of some of them were flat-out wrong!)
20:33:45 <SamB> oh, this was because of an irritating problem with the I7 IDE
20:34:27 <SamB> Dino__: oh, and the typechecker helps a lot with keeping the bugs out, too ;-)
20:34:34 <SamB> as well as the simplicity
20:40:41 <mlh_> whats the floating point mod function called?
20:41:30 * SamB does :i Floating
20:41:46 * SamB :i Fractional
20:42:05 <SamB> well...
20:42:31 <SamB> oh, right, RealFloat
20:42:53 <SamB> and RealFrac
20:43:51 <SamB> well, you could try properFraction
20:44:09 <SamB> > properFraction (10/9)
20:44:10 <lambdabot>  (1,0.11111111111111116)
20:46:44 <Dino__> That's sort of like divMod for real numbers.
20:47:04 <mlh_> > 5.0 / 4.0
20:47:05 <lambdabot>  1.25
20:47:53 <SamB> > divmod 10 9
20:47:54 <lambdabot>  Not in scope: `divmod'
20:47:59 <SamB> > divMod 10 9
20:48:01 <lambdabot>  (1,1)
20:48:22 <SamB> and divMod is for Integral numbers, btw
20:49:19 <mlh_> which module would properFraction be in?
20:49:43 <SamB> module?
20:49:52 * SamB didn't use any modules
20:50:10 <Pete_I> apparently it's in Prelude
20:50:11 <SamB> :i RealFrac
20:50:22 <Dino__> It's part of class RealFrac?
20:50:44 <mlh_> oh yeah ,sorry
20:54:51 <dons> ?quit the daily patch and push
20:55:43 <dons> this is a http://www.cse.unsw.edu.au/~dons/lambdabot.html test
20:56:09 <lambdabot> The title of that page is "lambdabot"
20:56:22 <dons> this is a, http://www.cse.unsw.edu.au/~dons/lambdabot.html, test
20:56:23 <lambdabot> The title of that page is "lambdabot"
20:56:37 <dons> ?version
20:56:38 <lambdabot> lambdabot 3.1p127, GHC 6.5 (OpenBSD i386 )
20:56:38 <lambdabot> darcs get http://www.cse.unsw.edu.au/~dons/lambdabot
20:57:21 <SamB> <lambdabot> darcs get http://www.cse.unsw.edu.au/~dons/lambdabot
20:57:21 <lambdabot> The title of that page is "Index of /~dons/lambdabot"
20:58:52 <mlh_> what is there a multiline haskell comment char sequence?
20:59:18 <dons> > "haskell\   \is cool"
20:59:18 <Korollary> {- stuff -}
20:59:20 <lambdabot>  "haskellis cool"
20:59:28 <dons> oh, sorry, comment
20:59:28 <dons> not string
20:59:50 <dons> > "haskell\   \is cool" {- big comment -} ++ "here"
20:59:51 <lambdabot>  "haskellis coolhere"
21:00:07 <mlh_> Korollary: thanks
21:00:11 <Dino__> Huh, that's strange notation, that \
21:00:27 <dons> think of it running over multiple lines..
21:00:32 <Dino__> Coming from a huge amount of Perl development, I was disappointed to not have here-document.
21:00:37 <dons> "abcdef\
21:00:40 <dons> \efghi"
21:00:54 <dons> Dino__: actually, hugs has here documents
21:00:54 <mlh_> like poetry/but different/sloshes when others slash/
21:01:00 <Dino__> I've seen the \ continued line in some languages, but not the second one.
21:01:52 <dons> the \ 's delimit a gap in the string, which may have newlines and other things in them
21:01:56 <dons> so you're not forced to write
21:02:03 <dons> <<EOF
21:02:03 <dons> abc
21:02:03 <dons> def
21:02:03 <dons> EOF
21:02:09 <Dino__> Yeah, I see that now, that would have been nice in like every other lang that uses the \
21:02:09 <dons> instead, you write f = "abcdef\
21:02:14 <dons>              \defghi"
21:02:30 <dons> yep
21:02:35 <Dino__> Becuase you think 'Great, I can continue this on the next line' but you have to dork your indenting.
21:03:34 <Dino__> Huh, special thing only supported by Hugs.
21:04:50 <dons> yep
21:07:13 <SamB> > "Hello,\x01 strange\x01 World!"
21:07:14 <lambdabot>  "Hello,\SOH strange\SOH World!"
21:11:49 <SamB> @seen JaffaCake 
21:11:49 <lambdabot> JaffaCake is in #haskell. I don't know when JaffaCake last spoke.
21:13:14 <SamB> dons: why doesn't lambdabot just mention the last time she heard JaffaCake speak, and say that she was offline for 0 seconds since?
21:13:43 <dons> I think in this case, it hasn't heard JaffaCake speak since the state got zapped on the weekend
21:13:47 <dons> @seen SamB
21:13:48 <lambdabot> SamB is in #perl6 and #haskell. I last heard SamB speak 34 seconds ago.
21:13:55 <dons> @seen dcoutts
21:13:56 <lambdabot> dcoutts is in #gentoo-haskell, #haskell-overflow, #haskell-blah and #haskell. I don't know when dcoutts last spoke.
21:14:05 <dons> @seen Igloo
21:14:05 <lambdabot> Igloo is in #darcs and #haskell. I don't know when Igloo last spoke.
21:14:10 <dons> hmm.
21:14:25 <dons> could be the seen state isn't being preserved over reboots. let's see..
21:14:36 <SamB> dons: earlier she said she had seen him 12 hours before
21:14:41 <SamB> er, heard him
21:14:41 <dons> ah, ok
21:15:41 <SamB> @seen Pete_I 
21:15:42 <lambdabot> Pete_I is in #haskell. I don't know when Pete_I last spoke.
21:15:53 <Pete_I> now.
21:15:58 <Pete_I> @seen Pete_I
21:15:58 <lambdabot> You are in #haskell. I last heard you speak just now.
21:16:54 <SamB> Pete_I: lambdabot is smart enough to know that if you are the one asking, you are asking right when you are asking ;-)
21:17:05 <SamB> well, not smart really
21:17:06 <dons> yeah, seems possibly the seen exit handler isn't being run. i'll investigate
21:17:39 <Pete_I`> @seen Pete_I
21:17:40 <lambdabot> Pete_I has changed nick to pete_i`.
21:17:40 <lambdabot> pete_i` is in #haskell. I last heard pete_i` speak just now.
21:17:55 <Pete_I`> nick tracking too. nice.
21:19:16 <dons> its the super-bot of the world!
21:19:43 <Dino__> Have to hit the sack, see you guys later. Thank you for all the help.
21:20:45 <SamB> well, it doesn't say "I lasy heard you speak just now." this time.
21:20:50 <SamB> er, last.
21:28:59 <dons> ?pl \n -> (head n , length n)
21:28:59 <lambdabot> liftM2 (,) head length
21:31:59 <dons> ?hoogle temp
21:32:00 <lambdabot> Distribution.Extension.TemplateHaskell :: Extension
21:32:00 <lambdabot> System.Directory.getTemporaryDirectory :: IO FilePath
21:32:00 <lambdabot> System.IO.openBinaryTempFile :: FilePath -> String -> IO (FilePath, Handle)
21:33:02 <dons> ?hoogle openTempFile
21:33:03 <lambdabot> System.IO.openTempFile :: FilePath -> String -> IO (FilePath, Handle)
21:37:38 <SamB> arch uses strange names for directories
21:43:46 <johnnowak> does anyone know of a good haskell mode for vim?
21:43:53 <johnnowak> i'm about to put a pole through my computer
21:44:44 <dons> there's a few on the haskell.org site
21:44:51 <dons> what's specifically wrong with what you're using?
21:45:34 <johnnowak> well i was trying to use vim sans any special modes
21:45:44 <johnnowak> i'm one of these people who loves the tab key
21:45:48 <johnnowak> needless to say, we had a fight
21:46:00 <johnnowak> so i did :set expandtab
21:46:03 <johnnowak> which seems to have helped
21:46:06 <dons> yes, you'll wnat that.
21:46:13 <dons> i have:
21:46:14 <dons> set tabstop=4
21:46:14 <dons> set shiftwidth=4                " auto indent width
21:46:14 <dons> set expandtab
21:46:26 <johnnowak> i was surprised that:
21:46:28 <johnnowak> let x = 0
21:46:30 <johnnowak>    y = 2
21:46:32 <johnnowak> is a syntax error
21:46:38 <dons> layout.
21:46:39 * johnnowak is new to haskell
21:46:50 <johnnowak> yes i see this now. i have been educated. 
21:46:53 <dons> the x and y should align
21:46:55 <johnnowak> mhm.
21:47:03 <johnnowak> one of these vim modes will do that for me?
21:47:14 <dons> here's some vim modes I use: ftp://www.cse.unsw.edu.au/pub/users/dons/vim/
21:47:27 <dons> and add :filetype indent on to your .vimrc
21:47:53 <johnnowak> what does that do? not familiar
21:48:01 <dons> turn on auto indenting 
21:48:05 <dons> for languages that support it
21:48:22 <dons> also useful are:
21:48:23 <dons> set comments=bO:--
21:48:24 <dons> set formatoptions=tcqr
21:48:24 <johnnowak> not the same as :set autoindent ?
21:48:27 <dons> to have comments completed
21:48:41 <dons> johnnowak: hmm . not sure. possibly
21:49:13 * johnnowak thinks vim beats orthogonality to death with a tire iron
21:49:54 <johnnowak> thank you very much for the help
21:50:05 <johnnowak> now i just need to figure out how to conditionally enable the modes :)
21:50:09 <Korollary> @karma+ dons
21:50:10 <lambdabot> dons's karma raised to 36.
21:50:16 <sieni> you get a hangover just from the thought of having to do any kind of customization to vim
21:50:36 <johnnowak> sieni: it's true. i just leave it permanently in my scheme mode :)
21:51:50 <Korollary> @vixen Do you like country music?
21:51:51 <dons> yeah, we've got some plans on the haskell wiki to rewrite yi entirely on top of ghci, as the true emacs killer
21:51:55 <lambdabot> i'd say i like
21:52:10 <dons> ?gwiki Yi
21:52:15 <johnnowak> Yi?
21:52:29 <dons> a vim/emacs clone I wrote in haskell a couple of years ago
21:52:34 <dons> ?where yi
21:52:35 <lambdabot> http://www.cse.unsw.edu.au/~dons/yi.html
21:52:43 <dons> ?wiki Yi
21:52:43 <lambdabot> http://www.haskell.org/haskellwiki/Yi
21:52:52 <dons> ^^ new plans
21:52:53 <SamB> not necessarily a very good emacs clone
21:52:56 <johnnowak> oh yes i saw this the other day browsing around
21:53:02 <Korollary> That almost looks like (? wiki Yi)
21:53:02 <dons> no. but a very good vi clone, imo
21:53:04 <SamB> seeing as dons here doesn't seem to actually know how to use Emacs
21:53:06 <johnnowak> will it hurt my pinky? 
21:53:11 <dons> does mg reasonably well
21:53:15 <johnnowak> SamB: Who does?
21:53:16 <sieni> SamB: you don't need much to beat the crap out of emacs
21:53:29 <dons> seeing as _I don't use emacs_ :)
21:53:30 <mwc> Eighty Megs and Constantly Swapping?
21:54:14 <SamB> mwc: um, is it really 80 megs?
21:54:21 <dons> yeah, its more about getting the extensibility right. then SamB can write the emacs modes.
21:54:24 <mwc> Nah, that's an older joke
21:54:29 <SamB> haha
21:54:31 * johnnowak 's binary is 36M
21:54:35 <SamB> me write emacs modes...
21:54:37 <Korollary> I once hit 90M with 200 buffers (with some very large files)
21:54:49 <mwc> it may grow to 80 megs, but that's not enough to start swapping
21:55:10 <johnnowak> mwc: it is if you run a java program at the same time
21:55:15 <SamB> if you want me to write them with my attention span of approximately one week, maybe ;-)
21:55:48 <sieni> the biggest trouble is that emacs has too much global state which hampers multi-file editing.
21:55:51 <mwc> johnnowak, hahah, we need to release a LISP implementation on top of the JVM. WHat's the sound of a million hard drives swap grinding?
21:55:58 <SamB> johnnowak: yeah, but then you'd need a Java joke, not an Emacs joke
21:56:17 <johnnowak> SamB: don't confuse the issue with facts
21:56:19 <SamB> mwc: wouldn't JHC be a better use of resources?
21:56:26 <Korollary> import Eight.Megs.And.Constantly.Swapping;
21:57:08 <mwc> SamB, yeah, it looks like JHC is gonna be the Haskell mlton
21:57:29 <SamB> mlton takes a gig to compile its stdlib too?
21:57:34 <mwc> hahahah, yes
21:57:46 <mwc> when bootstrapping the compiler, it can take that much easily
21:57:49 <SamB> doesn't it at least have a bigger stdlib?
21:57:57 <SamB> well, at least MLton is bootstrapped ;-)
21:58:00 <mwc> whole program optimization is pretty cool
21:58:07 <mwc> SamB, well, it's self hosted
21:58:17 <SamB> well yes
21:58:27 <SamB> that is generally the point of bootstrapping a compiler
21:58:55 <mwc> I tend to think of bootstraping a compiler as being able to build it in its native language wihtout a preexisting compiler, like the ocaml distribution
21:59:35 <SamB> I generally think of bootstrapping a compiler as something that was hopefully done long ago ;-)
22:00:10 * johnnowak rebels and will just write everything { with ; braces }
22:00:10 <SamB> after that, it is just building
22:00:38 <SamB> johnnowak: lucky for you, that is actually allowed in Haskell, unlike in Python
22:00:55 <SamB> johnnowak: be sure to write your modules like this:
22:00:57 <johnnowak> SamB: Since when is it not allowed in python?
22:01:04 <SamB> module Foo where { ; }
22:01:06 * johnnowak thought it was, but doesn't care much for python
22:01:13 <SamB> since forever
22:01:19 <SamB> { } is for dictionaries
22:03:02 <johnnowak> well i don't like it anyway! so there!
22:03:06 * johnnowak is having a rough evening
22:03:16 * johnnowak is being assaulted by configuration files
22:03:28 <SamB> oh, and put stuff between the { ; } in the module declaration ;-)
22:03:39 <SamB> adding more ; as needed
22:04:17 <Korollary> johnnowak: The layout rule is surprisingly simple actually. I had no idea why I had any problem with it when I first learned.
22:04:59 <johnnowak> Korollary: I have no problem with the rule. I have a problem with my editor. :)
22:05:44 <mwc> johnnowak, spaces/tabs stuff?
22:06:02 <sieni> johnnowak: and remember to put your tab to 7 spaces, use the tabs and wonder, why everything is fubar
22:06:10 <Korollary> lol
22:06:11 <johnnowak> mwc: Yes yes. It's all sorted now, more or less.
22:06:14 <mwc> -- vim: autoindent expandtab tabstop=4 
22:06:30 <mwc> anybody else have any settings that work well for Haskell?
22:06:31 <johnnowak> mwc: Any reason why four? Other than lining up nicely with let?
22:06:41 <mwc> johnnowak, that's pretty much it actually
22:06:47 * johnnowak ahhs
22:07:09 <mwc> plus I'm used to reading 4 width tabs
22:07:14 <mwc> I find 8 eats too much space
22:07:40 <johnnowak> i normally use three, which i think i'm alone in
22:08:12 <johnnowak> i find it just as readable as four and less jarring than two :)
22:08:19 <mwc> hmm, I use half-tabs (2 space) for various things
22:08:24 * johnnowak thinks there was a study done that proves him right but has no evidence
22:09:11 <mwc> so 3 would ruin the symettry
22:09:53 <SamB> and also, it looks awful for lets
22:10:06 * johnnowak is referring to scheme mainly
22:10:12 <mwc> HERETIC!
22:10:13 <jer> i use 2 space tabs for most of the stuff i write (ruby, io); couldn't adapt to using 2 with haskell code though
22:10:17 <SamB> though you really shouldn't be using tabstops for haskell
22:10:21 <johnnowak> mwc: don't care for scheme? ;)
22:10:32 <johnnowak> SamB: Yes I can see this now. :(
22:10:36 <mwc> It's just LISP with a tiny bit of sense
22:10:54 <johnnowak> mwc: What's wrong with that?
22:10:58 <SamB> scheme is lisp without the dangerous namespaces
22:11:12 <mwc> I just don't like LISP, never found a use for it
22:11:26 <SamB> (you can accidentally mutate imported symbols in Common Lisp)
22:11:35 <johnnowak> i love the consistency in syntax.. going from scheme to haskell hurts, i assure you
22:11:50 <johnnowak> not to say that i won't get used to it.
22:12:02 <sieni> johnnowak: I didn't notice anything like that
22:12:02 <mwc> the best thing is that the lisp syntax was actually intented as an intermediate forms
22:12:15 <mwc> the real ALGOL-style syntax for the language was never completed
22:12:17 <SamB> but it isn't a very good IR if you ask me
22:12:24 <johnnowak> mwc: proof?
22:12:33 <SamB> what do you call Dylan?
22:12:42 <Pseudonym> I call him "Bob".
22:12:45 <johnnowak> SamB: Dylan.
22:12:46 <jer> johnnowak, i think going from <foo> to haskell hurts =]
22:12:51 <SamB> not *that* Dylan.
22:12:53 * Korollary slaps Pseudonym 
22:12:56 <johnnowak> jer: Likely. :)
22:12:57 <mwc> http://en.wikipedia.org/wiki/S-expressions 2nd paragraph
22:12:58 <Pseudonym> Dylan Thomas?
22:13:11 <mwc> Dylan the language
22:13:11 <SamB> @google dylan
22:13:12 <lambdabot> http://www.bobdylan.com/
22:13:16 <Korollary> lol
22:13:16 <SamB> hmm.
22:13:22 <johnnowak> mwc: Seems to have worked out for them wrt macros
22:13:26 <SamB> Google shares your misconception.
22:13:27 <mwc> basically Apple slapped together an algol-style syntax on top of CLOS
22:13:29 <SamB> @google dylan language
22:13:30 <lambdabot> http://www.double.co.nz/dylan/
22:14:03 <johnnowak> SamB: Who are you talking to?
22:14:19 <jer> mwc, are you sure that wasn't objc? they slapped a java-like syntax ontop of objc not long after NeXT bought apple for -435 million USD$
22:14:30 <SamB> Pseudonym is the one that said "Bob" ;-)
22:14:32 <mwc> jer, I think you're mistaken
22:14:33 <SamB> so him
22:14:39 <Korollary> jer: I think it was apple with dylan
22:14:43 <mwc> Objective C was designed by Brad Cox and adopted whole-hog by NeXT
22:14:44 <jer> mwc, no, this much i know for sure that happened
22:15:02 <SamB> jer: are you certain that that was not in fact Java?
22:15:03 <jer> mwc, yes i'm familiar with the history.. when apple "bought" NeXT, they changed the way objc looked
22:15:03 <mwc> Apple did implement a Java interface for the NeXT API
22:15:08 <jer> SamB, i'm absolutely positive
22:15:16 <jer> mwc, yes and it still exists today; that's not what i'mm talking about
22:15:28 <SamB> objc does not look like Java!
22:15:39 <jer> i know it doesn't
22:15:40 <mwc> jer, got any references? I've never heard this before
22:15:43 <jer> i said apple gave it a new syntax
22:15:48 <jer> mwc, one sec, i'll get you a couple
22:15:53 <johnnowak> jer: before and after?
22:15:57 <johnnowak> mwc: ditto
22:15:58 <mwc> jer, Wikipedia doesn't mention anything on Objective-C
22:16:31 <jer> mwc, http://www.mactech.com/articles/mactech/Vol.13/13.07/RhapsodyFAQ/index.html is one
22:16:35 <lambdabot> The title of that page is "Rhapsody FAQ"
22:16:54 <jer> mwc, it was quickly dropped anyway
22:17:00 <SamB> jer: these QuakeEd sources I have here, which are genuine NeXT sources, appear quite similar to modern sources to me...
22:17:43 <jer> SamB, that's fine; apple did this, not NeXT; and it was before Rhapsody was renamed to Mac OS X Server 1.0
22:17:48 <SamB> or do you mean an additional syntax that noone uses?
22:17:51 <jer> so you're looking timeframe 1997-ish
22:17:51 <mwc> jer, that article seems to be full of beans on this
22:18:02 <mwc> it's not really a technical thing
22:18:32 <jer> mwc, Now, the new Objective-C syntax may have a Java-like syntax, but it isn't Java. It's still Objective-C, which means you still have all the power of C. One advantage is that developers can jump between C++, Java and Objective-C as the need arrives. Taking a C++ library, hooking it up to some Java networking code, and throwing on an Objective-C interface is easy, and each language can directly access any of the others. With the new syntax for Objective
22:18:36 <mwc> yeah, I read that
22:18:54 <mwc> Except that bridging between languages has nothing to do with the syntax
22:19:01 <mwc> it has everything to do with runtime systems
22:19:10 <jer> urgh, i wish i still had my old rhapsody dev stuff with this .. i'd show you some bloody code =]
22:19:30 <jer> mwc, this wasn't a bridge, it was a new syntax for objc
22:19:35 <mwc> jer, are you sure that this isn't something apple tried and silently killed?
22:19:58 <jer> mwc, there were limited releases to various companies; apple got serious negative reaction
22:19:59 <mwc> The objective-C I learned in 2001 looked exactly like the stuff I've seen from 86
22:20:01 <jer> and killed it
22:20:05 <mwc> jer, ahhhh
22:20:06 <jer> mwc, right, apple switched back 
22:20:11 <SamB> and this article does seem awfully confused about the distinction between runtime and syntax
22:20:35 <SamB> ooh! 86!
22:20:39 <SamB> I'm from 86!
22:20:43 <jer> urgh.. sucks, i'm normally a packrat but i distinctly recall throwing this stuff out
22:20:55 <mwc> But anyways, Apple did infact invent Dylan, back before they bought NeXT and were still looking to replace their aging and decrepit OS
22:20:58 <jer> so much easier to show you code rather than fight it tooth and nail =]
22:21:15 * johnnowak believes jer
22:22:25 <mwc> I believe you too, now that you clarified it
22:22:39 <mwc> I thought you were implying the current Obj-C syntax was the new one apple cooked up
22:22:44 <jer> ah; no
22:22:48 <jer> sorry for not being clear before
22:22:50 <SamB> yeah
22:23:03 <SamB> now that I know you aren't claiming that anything came of it
22:23:05 <bdash> http://www.mactech.com/articles/mactech/Vol.13/13.10/Oct97FactoryFloor/index.html has an example
22:23:07 <lambdabot> The title of that page is "Oct 97 Factory Floor"
22:24:38 <jer> yup, that looks ilke it
22:24:57 <mwc> Cocoa really is one of the best OO API's I've seen
22:25:15 <mwc> I wish we had a functional equivalent for Haskell of the same calibre
22:25:16 <jer> mwc, indeed; and it was really good back in 1994 too when OpenStep was released =]
22:26:04 <Pseudonym> Gotta go.  Fare well!
22:26:05 <bdash> jer: wow, that "modern" syntax sure is ugly... good thing they dropped it ;)
22:26:19 <SamB> http://www.opendylan.org/fragments/values.phtml
22:26:21 <lambdabot> The title of that page is "12 Dylan Fragments: Everything's a Value"
22:26:36 <SamB> that really does look kind of like strange lisp code
22:27:32 <SamB> ooh, #key shows up too!
22:27:42 <mwc> SamB, http://en.wikipedia.org/wiki/Dylan_programming_language#Syntax has examples of the early S-expression form
22:32:33 <SamB> apparantly Dylan is a failed initiative -- I never knew!
22:32:57 <SamB> I thought *all* lisps were doomed to relative obscurity, save CL, scheme, and elisp
22:34:17 <SamB> so if Dylan is really CLOS with syntax, why isn't it built on CL?
22:34:30 <SamB> because there are no parser libraries for CL?
22:39:58 * SamB wonders why these "peeps" bunnies have three eyes -- until he realizes one of them is supposed to be a nose ;-)
22:40:50 * johnnowak has honestly wondered the same
22:41:17 <palomer> I don't like the way my sister looks
22:51:46 <LordBrain> how did that come up?
22:51:49 <LordBrain> heh
22:53:29 <sieni> LordBrain: it's obviously logically connected to the preceding discussion on the channel
22:54:25 <LordBrain> well i missed it
22:54:59 <LordBrain> i was not here.. and i didnt read the whole scroll 
22:56:05 <sieni> just kidding
22:56:15 <sieni> i missed the connection too :-)
22:56:21 <LordBrain> oh, you got me!
22:56:25 <LordBrain> hehe
22:56:32 <Korollary> @palomer
22:56:32 <lambdabot> Category theory is the Paris Hilton of mathematics
22:56:40 <sieni> well said!
22:58:06 <palomer> it's funny cuz it's true
23:11:49 <shapr> Good morning #haskell!
23:12:24 <Korollary> #<Function haskell {5802CD89}>
23:13:53 <shapr> hm
23:15:17 <Korollary> shapr: how'z kode?
23:16:42 <shapr> Code is flowing, both Python and Haskell.
23:16:50 <shapr> I'm updating my Hope install right now.
23:18:16 <shapr> Korollary: How's code on your end of the wire?
23:18:52 <Korollary> C++ at work. Some lisp at home.
23:18:56 <shapr> bringert: I like having hopeModules in Config.hs instead of using mkModules
23:19:29 <bringert> hi shapr
23:19:43 * bringert is at a motel in portland
23:19:45 <shapr> good morning bringert!
23:19:58 <shapr> Oh have you been hanging out with Ninja Jones?
23:20:41 <shapr> @timein bringert
23:20:43 <lambdabot> Local time for bringert is Tue Jun 13 23:20:18 2006
23:21:12 <shapr> I dreamed in Swedish last night, that was weird.
23:21:23 <bringert> I will see him tomorrow
23:21:38 <bringert> was it a swedish girl whispering in your ear
23:21:56 <Korollary> shapr: I've been dreaming in English for quite a while.
23:22:14 <shapr> Korollary: Is English your first language?
23:22:19 <Korollary> no
23:22:29 <shapr> Interesting, what is your first language?
23:22:35 <Korollary> Turkish
23:22:46 <Korollary> It happened perhaps six months after I moved to the US
23:22:53 <shapr> bringert: Nah, though that would be nice. I think I had a business conversation in Swedish, I was trying to sell or buy something.
23:23:04 <shapr> Korollary: That's neat. Do you still dream some in Turkish?
23:24:03 <Korollary> shapr: Not at all.
23:24:22 <Korollary> shapr: Do you talk to yourself in Swedish?
23:24:43 <shapr> Sometimes yeah, just to practice words and structures I might forget.
23:25:05 <Korollary> I was talking to myself in english before I had the first dream in english
23:25:44 <shapr> That's cool, maybe dreaming in Swedish is a sign that I'm gaining skill with the language.
23:25:55 <Korollary> how many years has it been now?
23:26:06 <shapr> I'm not exactly sure.
23:26:07 <palomer> or that you're in the market for new furniture
23:26:12 * shapr looks at his passport
23:26:31 <Korollary> palomer: are you bilingual?
23:27:00 <palomer> yes
23:27:13 <Korollary> palomer: do you dream in french or english?
23:27:18 <shapr> I think it's been about three years. Most Swedes speak English so I haven't had to speak that much Swedish.
23:27:46 <palomer> english
23:27:56 <shapr> Do you ever dream in French?
23:27:58 <bringert> shapr: you have a swedish girlfriend now, that should help
23:27:58 <palomer> http://adam.pra.to/content/jerker/ <--best thing about sweden
23:28:00 <lambdabot> The title of that page is "BEHOLD! THE SHRINE TO THE IKEA JERKER DESK!"
23:28:22 <palomer> I don't remember when was the last time I dreamt in french
23:28:37 <palomer> I only speak french to my mom and extended family
23:28:42 <palomer> and to the cornerstore clerk
23:29:01 <palomer> (and a couple of friends)
23:29:04 <palomer> I live mostly in english
23:29:11 <shapr> bringert: Yeah, my Swedish has improved dramatically since then. Hearing Sofia speak Swedish to her family and friends helps me learn.
23:29:15 <shapr> Quel dommage
23:29:21 <palomer> I was in paris for half a year; I don't remember any dreams
23:29:30 <shapr> J'aime les française!
23:29:46 <palomer> les franaise de la frane?
23:30:01 <bringert> ikea has great product names, "beslut" for example
23:30:05 * shapr grins
23:30:05 <Korollary> lol
23:30:18 <shapr> You know you've been in Sweden too long when fart and slut are no longer funny.
23:30:33 <shapr> hiya good_boy 
23:31:00 <shapr> bringert: Seen http://www.coolabah.com/sweden/youknow.html ?
23:31:06 <lambdabot> The title of that page is "YOU KNOW YOU’VE BEEN IN SWEDEN TOO LONG WHEN"
23:31:18 <good_boy> why for DecToBin :: Int -> [Int] -> [Int] I get Syntax error in declaration (unexpected `::')?
23:31:31 <bringert> shapr: no, good stuff
23:31:36 <shapr> good_boy: Are you putting that into ghci or what?
23:31:58 <good_boy> into winhugs
23:32:38 <shapr> Try putting that into a file and loading the file into winhugs.
23:32:52 * palomer says "close the lights"
23:33:11 <bringert> shapr: some of the things on that list are strange
23:33:26 * palomer is off!
23:33:36 <shapr> bringert: Like what?
23:33:57 <shapr> palomer: And you're leaving too? :-)
23:34:59 <good_boy> i get still the same error
23:35:02 <bringert> shapr: "open the television", "Don't panic" 
23:35:12 <bringert> the thing about jaywalking
23:35:33 <shapr> good_boy: Can you put the contents of the file you loaded into http://rafb.net/paste/ ?
23:35:35 <lambdabot> The title of that page is "Nopaste"
23:35:38 <bringert> 5 should have d) he's gay
23:35:47 <shapr> good_boy: And then give us the resulting url of the paste?
23:36:11 <good_boy> http://rafb.net/paste/results/vwp40Z18.html
23:36:16 <shapr> bringert: Here in Boden people do cross the street when the light is red, but mostly because there just isn't much trafic.
23:37:01 <bringert> shapr: yeah, I had the impression that people do that everywhere in sweden
23:37:36 <good_boy> Me, here in Germany, I do that too ^^
23:37:44 <bringert> swedish are generally less lactose intolerant than many other people I think
23:37:55 <shapr> I think the general comment is that Swedes generally follow the rules very closely.
23:38:00 <bringert> true
23:38:09 <bringert> most of them are very accurate
23:38:38 <Lemmih> good_boy: use 'decToBin'.
23:38:48 <good_boy> oh...
23:39:26 <shapr> good_boy: It seems like you have an overuse of guards, but try this http://rafb.net/paste/results/WZ3bsr87.html
23:39:42 <bringert> that list is looong
23:40:00 <shapr> bringert: Except the ones I know who work black. That makes me crazy since I pay so much taxes.
23:41:02 <shapr> It is true that I unicycle till it's down to -17°C, and I only wear a t-shirt and shorts if it's 0° or above.
23:41:36 <shapr> This one is really funny --> You think that if you smoke a joint you will wind up in an insane asylum. [or become a habitual criminal]
23:42:03 <bringert> very true
23:42:04 <shapr> A friend of mine had her teenager son get into Rastafarianism, and then was extremely upset when she found him smoking pot.
23:42:18 <good_boy> still.... this doesnt help...
23:42:25 <good_boy> I get the same error again.
23:42:26 <bringert> we're fed that stuff in school
23:42:53 <shapr> Sadly, it doesn't cut down on the amount of hard drugs available in Boden.
23:43:07 <shapr> It seems that there's either too much or not enough anti-drug feelings here.
23:43:55 <shapr> I don't think marijuana will kill someone, though I don't smoke that or anything else. I do think cocaine/heroin/etc will permanently ruin someone's life.
23:45:25 <good_boy> can i just leave the signature out?
23:47:14 <Korollary> on line 3, you need a = after otherwise
23:47:15 <Cale> good_boy: you can't name ordinary functions starting with an uppercase letter -- if nobody's mentioned that
23:47:45 <Pete_I> Cale, why not?
23:47:56 <Cale> Pete_I: because they're data constructors
23:48:03 <Pete_I> ok
23:48:12 <good_boy> Korollary : Yup
23:48:25 <Cale> and otherwise, not Otherwise
23:48:44 <good_boy> works now ^^
23:48:55 <jer> shapr, there's a kid, 19 years old, who was high and driving; he's now permanently on wheels -- paralized, and his then girlfriend dead. you can't tell me pot doesn't change lives
23:49:02 <shapr> bringert: Anyway, for all these negative comments about Sweden, I think that overall it's the same as the USA, some good and some bad. I like it here.
23:49:13 <jer> (that said, i'm against no more control over it than alcohol)
23:49:17 <shapr> jer: Yeah, but that's the same level of alteration as alcohol.
23:49:51 <kzm> shapr, where are you from originally?
23:50:10 <jer> err a kid, 19 years old in my town ... got ahead of myself there =]
23:50:14 <shapr> jer: Also, according to that sort of pattern I believe people shouldn't drive after sex or a nasty argument either. It's the same sort of "don't operate machinery when altered."
23:50:15 <shapr> kzm: Alabama!
23:50:43 <jer> shapr, i can attest to the nasty argument bit... almost killed myself doing that
23:50:59 <kzm> so you came to Sweden with a banjo on your knee?
23:51:10 * kzm doesn't know a whole lot about Alabama. :-)
23:51:20 <shapr> kzm: I had it removed when I got here. Now I have a lute (fisk?)
23:51:39 <jer> shapr, they have good surgeons in sweeden, eh?
23:51:40 <jer> =]
23:51:45 * shapr grins
23:51:49 <kzm> Hey, that's ours.  You get surströmming.
23:51:58 <shapr> Oh right, surströmming...
23:52:11 <shapr> I just had to come up with some sort of musical instrument connection :-)
23:53:20 <shapr> jer: Anyway, the general principle is that my glands are not my consciousness, and I know I have to correct my behaviour one way or the other when my glands are having a strong effect.
23:53:20 <kzm> Somehow, I only seem to know Alabama from songs:  "I'll try to stay serene and calm/when Alabama gets the bomb" (Who's next, Tom Lehrer)
23:53:37 <Korollary> Sweet home Alabama
23:53:40 <shapr> Alabama is a nice place. It's kinda warm though.
23:54:00 <jer> shapr, you'll forgive me for thinking you're full of it (at least while there's a chance you may injur other people operating a motor vehicle)
23:54:02 <shapr> But I haven't been there in four years or so, I've lost touch.
23:54:10 <shapr> jer: What do you mean?
23:54:54 <jer> shapr, you may think you can control yourself when you're high or drunk; but when you're in a position where you may injur or worse, kill someone because of being high or drunk, you'll forgive me if i don't believe that you can control it
23:55:35 <Korollary> I can't control myself when I am sober.
23:55:40 <kzm> jer, the laws here are pretty strict about DUI, so basically you don't drink and drive. And the traffic victim numbers are fairly low, I think.  Presumably Sweden is similar.
23:55:57 <jer> granted, if you're in sweeden that means there's an ocean separating the two of us, so i don't have to worry about you being drunk or high and potentially hitting my kids while you're drunk or high
23:56:20 <shapr> jer: Oh no, I mean that I am sometimes forced to operate normally when glandularly altered and in those cases I must correct my behaviour and keep on operating. I don't think I can drive when chemically altered from THC or alcohol. (But I can drive when taking amphetamines or methylphenidate, from my prescription.)
23:56:37 * jer is in Canada; the numbers in my province are a little higher than in most border states in the USA =/
23:56:56 <jer> shapr, oh sorry, i thought you meant when you were drunk or high; my apologies
23:57:24 <shapr> On the good side, the only thing I drive in Sweden is my unicycle, now with 1.5 times the tire volume --> http://www.scannedinavian.com/hope/entry/15
23:57:36 <shapr> jer: No worries, that's why I asked for clarification :-)
23:57:45 <Korollary> jer: BC?
23:57:49 <jer> Korollary, ontario
23:58:00 <sieni> methylphenidate == kiddie coke ^_^
23:58:01 <shapr> jer: btw, how many kids do you have?
23:58:05 <jer> shapr, 3
23:58:19 <jer> 11, 4 and 2 weeks
23:58:40 <sieni> with 3 different women?
23:58:58 <jer> nah; younger two are with the same woman; oldest was a summer fling when i was a teen
23:59:01 <sieni> oh, 11 and 4 were in years :-)
23:59:04 <shapr> sieni: I knew a guy on irc who illegally bought methylphenidate so he could study for four hours at a time. I should have told him that me and my ADHD friends do that same thing.
23:59:06 <jer> yeah sorry =]
23:59:40 <shapr> Except, we buy it legally... anyway...
23:59:46 <sieni> -> meeting
23:59:48 <good_boy> Instance of Floating Int required for definition of decToBin
23:59:53 <good_boy> what does that mean?
