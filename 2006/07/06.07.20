00:00:08 <u221e> What does fps stand for anyway, and why is the package still called that?
00:00:24 <Pete_I> frames per second
00:00:27 <dons> fast packed strings, it was the old name
00:00:45 <dons> since they're fast, and they're packed, and they're strings :)
00:00:53 <Pete_I> acronyms shouldn't have more than one meaning...
00:00:55 <JKnecht> palomer: would have answered your q, but a) would have to have broken into parts and b) already too far OT.
00:01:03 <zenpro> dons: I see.
00:06:33 <dons> zenpro: done much haskell hacking?
00:07:34 * dons is getting excite about the icfp contest
00:08:29 <zenpro> dons: not really, I've been learning for a few weeks now and I'm highy impressed
00:09:05 <dons> that's cool. well, i encourage you to hang out here, its a good place to absorb the things going on in the community
00:09:06 <zenpro> dons: I'm essentially a Ruby hacker, while before I was into C#.
00:09:10 <dons> have you met lambdabot?
00:09:29 <zenpro> I downloaded it and took a look at the code
00:09:37 <dons> oh, cool! :)
00:09:52 <dons> so you've seen the various things she does?
00:09:53 <zenpro> but I don't really know it too well
00:10:01 <zenpro> @where yaht
00:10:01 <lambdabot> http://www.isi.edu/%7Ehdaume/htut/
00:10:13 <zenpro> > product [1..9]
00:10:14 <lambdabot>  362880
00:10:25 <dons> well, since we have this static typing, we can rule our unsafe programs, and hence its safe to run random code,
00:10:30 <dons> > map (+1) [1..5]
00:10:31 <lambdabot>  [2,3,4,5,6]
00:10:31 <zenpro> but it looks like it can do much more
00:10:32 <dons> as you've seen
00:10:42 <dons> then there's a type checker
00:10:44 <dons> ?type map
00:10:45 <lambdabot> forall b a. (a -> b) -> [a] -> [b]
00:10:54 <zenpro> cool
00:10:55 <dons> and a tool to search the haskell libs, using a type as a key
00:11:01 <dons> ?hoogle (a -> b) -> [a] -> [b]
00:11:02 <lambdabot> Prelude.map :: (a -> b) -> [a] -> [b]
00:11:02 <lambdabot> Control.Parallel.Strategies.parMap :: Strategy b -> (a -> b) -> [a] -> [b]
00:11:02 <lambdabot> Prelude.scanr :: (a -> b -> b) -> b -> [a] -> [b]
00:11:10 <dons> which is pretty nifty
00:11:16 <dons> you can also search by ident
00:11:19 <dons> ?hoogle map
00:11:20 <lambdabot> Prelude.map :: (a -> b) -> [a] -> [b]
00:11:20 <lambdabot> Data.IntMap.map :: (a -> b) -> IntMap a -> IntMap b
00:11:20 <lambdabot> Data.IntSet.map :: (Int -> Int) -> IntSet -> IntSet
00:11:24 <dons> ?hoogle+
00:11:24 <lambdabot> Data.Map.map :: (a -> b) -> Map k a -> Map k b
00:11:25 <lambdabot> Data.Set.map :: (Ord a, Ord b) => (a -> b) -> Set a -> Set b
00:11:25 <lambdabot> Data.Map :: module
00:11:26 <zenpro> dons: I think it's just about time that I blog about it :)
00:11:36 <u221e> lambdabot is dons baby ;)
00:11:38 <dons> then there's a tool to generate code from a type
00:11:48 <dons> ?djinn a -> b -> (a,Maybe b)
00:11:48 <lambdabot> f a b = (a, Just b)
00:11:53 <dons> ?djinn a -> a
00:11:54 <lambdabot> f a = a
00:12:01 <zenpro> lambdabot is very impressive
00:12:06 <dons> now, what else. oh, you can find the kind of a type
00:12:09 <dons> ?kind Either
00:12:10 <lambdabot> * -> * -> *
00:12:12 <dons> ?kind Int
00:12:13 <lambdabot> *
00:12:16 <u221e> dons, do IO ;)
00:12:21 <dons> then, there's a code refactoring tool
00:12:27 <dons> ?pl \x y ->  x + y + x
00:12:28 <lambdabot> flip =<< ((+) .) . (+)
00:12:31 <dons> ?pl \x y ->  x + y
00:12:32 <lambdabot> (+)
00:12:44 <dons> u221e: i don't think i can do IO.
00:12:48 <dons> oh, yes i can. or, i can try
00:12:53 <dons> > putChar 'x'
00:12:53 <lambdabot>  No IO allowed
00:13:24 <u221e> > error "Test"
00:13:25 <lambdabot>  Add a type signature
00:13:27 <dons> then there's the usual irc thingies, like @tell, and so on
00:13:29 <zenpro> @google Haskell Rocks
00:13:32 <lambdabot> http://harold.hotelling.net/old_blog/000940.html
00:13:33 <lambdabot> Title: Stuff and things: Haskell rocks
00:13:44 <zenpro> neat
00:13:54 <dons> ?babel en de Haskell is super cool
00:13:56 <lambdabot>  Haskell ist abkühlen Super
00:14:08 <dons> well, babel isn't the greatest machine translator
00:14:13 <dons> ?vixen-on
00:14:14 <lambdabot> What's this channel about?
00:14:19 <zenpro> dons: great job
00:14:19 <lambdabot> I'm just a sexy little school girl :)
00:14:19 <dons> hey vixen! what do you think of haskell?
00:14:20 <lambdabot> Ooh, functional programmers are so hot!
00:14:32 <zenpro> lol
00:14:32 <dons> hehe, so true.
00:14:33 <lambdabot> do i amuse you?
00:14:33 <lambdabot> My sister likes Yahoo better. Her screenname is FoxxyGurl83. If you have yahoo you should message her, she's just as pretty as me :)
00:14:38 <dons> ?vixen-off
00:14:39 <lambdabot> Bye!
00:14:39 <zenpro> how old are you lamdba?
00:14:44 <zenpro> too late :)
00:14:53 <dons> ?spell lambdabot
00:14:54 <lambdabot> lambda bot lambda-bot lambda lambdas lambda's
00:15:02 <dons> and usual boring things (in comparison to the language tools)
00:15:10 <dons> oh, there's a couple of lambda calculus interpreters
00:15:12 <dons> ?help lam
00:15:12 <lambdabot> help <command>. Ask for help for <command>. Try 'list' for all commands
00:15:15 <dons> ?help lambda
00:15:15 <lambdabot> lambda <expr>. Evaluate the lambda calculus expression, <expr>
00:15:24 <dons> lambda (\x . x) 1
00:15:24 <zenpro> wow, great job on the bot
00:15:30 <dons> ?lambda (\x . x) 1
00:15:30 <lambdabot> 1
00:15:48 <dons> well, its a useful tool once you get to know it.
00:15:55 <dons> oh, doc/api things
00:15:58 <dons> ?docs Data.List
00:15:58 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/base/Data-List.html
00:16:02 <dons> ?fptools Data.List
00:16:03 <lambdabot> http://darcs.haskell.org/packages/base/Data/List.hs
00:16:11 <dons> so you can find the source or documentation
00:16:35 <dons> some jokes,
00:16:35 <zenpro> very handy
00:16:36 <dons> ?yow
00:16:36 <lambdabot> I smell like a wet reducing clinic on Columbus Day!
00:16:40 <dons> ?brain
00:16:40 <lambdabot> I think so, Brain, but don't you need a swimming pool to play Marco Polo?
00:16:47 <dons> ?fresh
00:16:47 <lambdabot> Ham
00:16:57 <dons> last one is a random haskell project name ;)
00:17:06 <dons> @instances Monad
00:17:07 <lambdabot> ((->) r), ArrowMonad a, Cont r, ContT r m, Either e, ErrorT e m, IO, Maybe, RWS r w s, RWST r w s m, Reader r, ReaderT r m, ST s, State s, StateT s m, Writer w, WriterT w m, []
00:17:09 <dons> is useful
00:17:34 <zenpro> how long did it take you to develop it?
00:17:51 <dons> oh, there's been about 60 people work on it.
00:18:00 <dons> it slowly got worked on starting around 2002, iirc.
00:18:09 <dons> but we really kicked it along startin 2005.
00:18:27 <zenpro> I can see it's a quite complex application
00:18:32 <dons> there's a graph here, http://www.cse.unsw.edu.au/~dons/lambdabot.html
00:18:33 <lambdabot> Title: lambdabot
00:18:50 <dons> its a fairly simple architecture. just an irc library, and a dispatch mechanism
00:18:58 <dons> but then there's a heap of plugins
00:19:02 <dons> where all the complexity lies
00:19:23 <dons> actually, there's even a couple of research papers that mention lambdabot :)
00:19:33 <u221e> How does the plugin system work?
00:19:57 <dons> each plugin is represented as a first class module, using a Module class
00:20:09 <dons> at start up, all plugins are dynamically loaded, and they register the commands they implemente
00:20:33 <zenpro> ok
00:20:36 <dons> when you type a command, the lambdabot core looks up a table to see if it is a command, and if so, passes the text to the relevant handler in the plugin
00:20:46 <zenpro> so the community provided you with many plugins
00:20:50 <dons> which returns some text, which is then output
00:20:52 <dons> right
00:21:06 <norpan> @dons
00:21:06 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/index.html
00:21:08 <dons> since its pretty simple to write a new plugin, just a function from String -> String, essentially
00:21:19 <dons> oh, there's spell checking too :)
00:21:28 <dons> ?yOw
00:21:28 <lambdabot> CONGRATULATIONS!  Now should I make thinly veiled comments about
00:21:29 <lambdabot> DIGNITY, self-esteem and finding TRUE FUN in your RIGHT VENTRICLE??
00:21:31 <dons> ?yaw
00:21:32 <lambdabot> This TOPS OFF my partygoing experience!  Someone I DON'T LIKE is
00:21:32 <lambdabot> talking to me about a HEART-WARMING European film ...
00:21:35 <dons> ?yoow
00:21:36 <lambdabot> Let's all show human CONCERN for REVEREND MOON's legal difficulties!!
00:21:39 <dons> ?yooooow
00:21:39 <lambdabot> Unknown command, try @list
00:21:45 <dons> ?y
00:21:45 <lambdabot> Maybe you meant: yhjulwwiefzojcbxybbruweejw yow . v
00:21:56 <dons> the yhjul... command is underappreciated
00:22:00 <norpan> i'm sure that was what he meant
00:22:23 <norpan> ?yhjulwwiefzojcbxybbruweejw
00:22:23 <lambdabot> "\"\\\"\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\"
00:22:27 <zenpro> eheh
00:22:31 <norpan> yeah
00:22:52 <dons> its a bit of an in-joke, since we had a notorious bug in @eval where you could get an infinite list of 'shows' produced
00:22:57 <dons> with the above output
00:23:04 <dons> if you guessed an internal identifier correctly
00:23:12 <norpan> > fix show
00:23:13 <lambdabot>  "\"\\\"\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\...
00:23:22 <dons> ?v
00:23:23 <lambdabot> "\""
00:23:35 <dons> was the original ident, but then i changed it to yhjulwwiefzojcbxybbruweejw
00:23:40 <dons> however, someone worked that out :)
00:23:46 <dons> so now its random
00:23:50 <zenpro> :)
00:25:23 <norpan> @dice
00:25:24 <lambdabot> "dice" (line 1, column 1):
00:25:24 <lambdabot> unexpected end of input
00:25:24 <lambdabot> expecting digit
00:25:29 <norpan> @dice 6
00:25:29 <lambdabot> 6 => 6
00:25:33 <norpan> @dice 6
00:25:33 <lambdabot> 6 => 6
00:25:37 <norpan> hmmm
00:25:45 <zenpro> @dice 6
00:25:46 <lambdabot> 6 => 6
00:25:49 <norpan> @help dice
00:25:50 <lambdabot> dice <expr>. Throw random dice. <expr> is of the form 3d6+2.
00:25:54 <norpan> ah
00:26:00 <norpan> @dice 1d6
00:26:01 <lambdabot> 1d6 => 5
00:26:20 <zenpro> @dice 1d6
00:26:21 <lambdabot> 1d6 => 3
00:26:24 <norpan> i won
00:26:34 <zenpro> :)
00:26:51 <norpan> we need a rock/paper/scissors module
00:27:07 <dons> oh, that would be kind of fun, yes!
00:27:13 <norpan> @rock
00:27:14 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/index.html
00:27:15 <dons> to solve decisions for us
00:27:20 <u221e> What does liftM do?
00:27:32 <dons> u221e: it lifts a value into a monad
00:27:34 <norpan> @type liftM
00:27:35 <lambdabot> forall r (m :: * -> *) a1. (Monad m) => (a1 -> r) -> m a1 -> m r
00:27:47 <norpan> it's like fmap
00:27:56 <dons> liftM f m1              = do { x1 <- m1; return (f x1) }
00:27:58 <norpan> lifts a function
00:28:16 <dons> so you have a function, and a monadic actoin, and you apply f to m
00:28:19 <dons> a la fmap.
00:28:38 <norpan> actually, for all sensible monads, liftM == fmap
00:29:15 <dons> personally, i would have written it :  liftM k a = a >>= \x -> return (k x)
00:29:29 <zenpro> dons: what kind of bindings are there for the gui widgets libraries?
00:29:39 <norpan> @paper
00:29:40 <lambdabot> Unknown command, try @list
00:29:42 <norpan> @scissors
00:29:43 <lambdabot> Unknown command, try @list
00:29:43 <dons> gtk2hs and wxHaskell are the two big ones.
00:29:47 <dons> ?where gtk2hs
00:29:47 <lambdabot> http://haskell.org/gtk2hs/
00:29:49 <norpan> ok, commands are free
00:29:51 <dons> ?where wxHaskell
00:29:51 <lambdabot> http://wxhaskell.sourceforge.net/
00:30:03 <dons> gtk2hs is the most active, these days
00:30:08 <mlh> @dice 123d3423
00:30:09 <lambdabot> 123d3423 => 0
00:30:12 <dons> but isn't so portable to windows.
00:30:22 <norpan> it isn't?
00:30:25 <u221e> Why uses Haskell and windows?
00:30:25 <boegel> dons: I think it is, nowadays
00:30:29 <u221e> Who
00:30:31 <boegel> u221e: very true :)
00:30:33 <dons> it is portable, but people complain
00:30:41 <dons> u221e: ndm does. he's the only one ;)
00:30:41 <boegel> dons: oh, ok
00:30:44 <mlh> @dice 2d6
00:30:44 <lambdabot> 2d6 => 7
00:30:46 <norpan> well, people always complain
00:30:48 <dons> well, simonpj does too
00:30:54 <mlh> @dice 6d6
00:30:54 <lambdabot> 6d6 => 19
00:30:58 <mlh> @dice 7d6
00:30:59 <lambdabot> 7d6 => 24
00:31:01 <dons> and then i heard that 95% of computer users use windows too
00:31:05 <zenpro> dons: ok so gtk2hs is cross-platform right?
00:31:10 <mlh> @dice 1d2
00:31:10 <lambdabot> 1d2 => 2
00:31:12 <mlh> @dice 1d2
00:31:13 <dons> yeah, i think so.
00:31:13 <lambdabot> 1d2 => 2
00:31:15 <mlh> @dice 1d2
00:31:15 <u221e> Is that the pen and paper module? ;)
00:31:16 <lambdabot> 1d2 => 2
00:31:25 <mlh> @dice 1d2
00:31:25 <lambdabot> 1d2 => 2
00:31:26 <dons> zenpro: check with dcoutts when he wakes up. he's one of the main authors
00:31:42 <norpan> i use gimp and inkscape on windows
00:31:49 <mlh> @dice 1d4
00:31:50 <lambdabot> 1d4 => 4
00:31:56 <norpan> they both use gtk2
00:31:57 <zenpro> dons: I mean Linux is cool, but I wouldn't cut out 95% of my audience :)
00:32:11 <mlh> @dice 1d2
00:32:12 <norpan> or is there some other portability issue that has to do with haskell rather than gtk2?
00:32:12 <mlh> @dice 1d4
00:32:13 <mlh> @dice 1d4
00:32:13 <mlh> @dice 1d4
00:32:14 <mlh> @dice 1d4
00:32:20 <dons> norpan: not that i know of.
00:32:27 <dons> people do gtk2hs on windows
00:32:31 <ValarQ> mlh: what the heck are you doing?
00:32:36 <zenpro> I will
00:32:38 <dons> mlh, looks like you ran out of randoms
00:32:43 <dons> i'd run and hide, if i were you...
00:32:53 <mlh> oops.  someone feed /dev/random quick!
00:33:02 <dons> ?bot
00:33:15 <norpan> oh no, he killed lambdabot!
00:33:16 * ValarQ suspects mlh has linked his local /dev/random to #Haskell
00:33:17 <norpan> you bastard!
00:33:19 <lambdabot> 1d2 => 2
00:33:21 <lambdabot> 1d4 => 4
00:33:23 <lambdabot> 1d4 => 4
00:33:25 <lambdabot> 1d4 => 3
00:33:27 <lambdabot> 1d4 => 2
00:33:29 <lambdabot> :)
00:33:36 <dons> she wsa waiting on /dev/random to fill up ;)
00:33:43 <norpan> @smile
00:33:44 <lambdabot> Unknown command, try @list
00:33:59 <boegel> @botsnack
00:34:00 <lambdabot> :)
00:34:01 <mlh> ok, i was worried there.  i was always getting m from ndm
00:34:09 <mlh> @lart mlh
00:34:10 <lambdabot> Maybe you meant: last part
00:34:11 <zenpro> can we make it say "you bastards
00:34:17 <zenpro> !"
00:34:18 <norpan> @say you bastards
00:34:18 <lambdabot> Maybe you meant: faq map slap
00:34:21 <dons> ?state you bastards
00:34:22 <lambdabot> you bastards
00:34:25 <dons> ?state
00:34:26 <lambdabot> you bastards
00:34:26 <norpan> state
00:34:30 <norpan> indeed
00:34:36 <ValarQ> @slap yourself
00:34:36 <norpan> @slap
00:34:36 * lambdabot smacks yourself about with a large trout
00:34:37 <lambdabot> why on earth would I slap
00:34:37 <dons> ?id echo some text
00:34:37 <lambdabot> echo some text
00:34:43 <zenpro> when we say "oh my god, they killed kenny!"
00:35:01 <dons> could be done, yes :)
00:35:13 <dons> a variant on the Url.hs plugin, that scans for http://
00:35:15 <zenpro> that would amuse newcomers
00:35:31 <norpan> a generic regexp trigger
00:35:47 <mlh> rather than spam the channel, can i request a private audience with lambdabot?
00:35:50 <norpan> that'd be mayhem
00:35:58 <norpan> mlh: just /msg it
00:35:59 <dons> mlh, yes.
00:37:16 <mlh> it's slow. dons you're being random enough
00:37:23 <mlh> not!
00:38:20 <dons> hey?
00:40:09 <mlh> lambdabot is not replying to my /msg
00:40:36 <zenpro> too many connections?
00:40:44 <zenpro> I was playing with it too :)
00:40:49 <mlh> heh
00:41:03 <dons> ?bot
00:41:03 <lambdabot> :)
00:41:14 <mlh> ok, now it's ok
00:41:15 <dons> mlh, are you identified to freenode?
00:41:20 <mlh> yeah
00:41:27 <dons> maybe someone was running a big computation?
00:41:32 <thou> hi, is missingh missing? is there another site for it besides @url missing?
00:41:33 <zenpro> ?who is harrassing you lambda
00:41:34 <lambdabot> Maybe you meant: echo ghc what wn
00:41:35 <dons> meaning the other threads weren't getting a chance
00:41:39 <zenpro> :)
00:41:42 <dons> ?where missingh
00:41:42 <lambdabot> http://quux.org/devel/missingh
00:41:46 <dons> thou?
00:41:53 <dons> ?url missingh
00:41:53 <lambdabot> http://quux.org/devel/missingh
00:41:55 <dons> hmm.
00:41:56 <thou> it's broken link for me
00:42:00 <dons> it _isn't_ missing though
00:42:01 <u221e> Hm... hs-plugins. Dons, just how many projects do you have running here? ;)
00:42:06 <dons> ?google missingh
00:42:09 <lambdabot> http://quux.org/devel/missingh/
00:42:14 <dons> interesting
00:42:18 <dons> u221e: oh a few
00:42:29 <thou> and when i try to go to it from gopher, i get just an empty page
00:42:48 <thou> it's been that way for a few days anyways
00:42:55 <dons> zenpro: http://www.cse.unsw.edu.au/~dons/code.html
00:42:56 <lambdabot> Title: software
00:42:58 <ValarQ> hmm, missingh is missing
00:43:00 <thou> i figured jgoerzen was messing with his page
00:43:21 <u221e> dons, is hs-plugins 1.0 stable?
00:43:28 <dons> yeah
00:45:16 <thou> hmmm, well, i just realized i can get it from http://darcs.complete.org/
00:45:18 <lambdabot> Title: Darcs repositories on complete.org
00:47:23 <zenpro> good night guys
00:48:44 <dons> ciao
00:49:48 <u221e> dons: The Yi README seems to be out of date
00:50:16 <dons> hmm, yes?
00:50:23 <norpan> it's become a WRITEME?
00:50:46 <dons> do you mean the bit before or after "The following is outdated" ?
00:51:10 <dons> @seen stefanw
00:51:10 <lambdabot> I haven't seen stefanw.
00:51:21 <u221e> That's another thing, why is "The following is outdated" near the top of the file?
00:51:41 <u221e> I assume the stuff under it isn't outdated.
00:51:51 <dons> the story: i cabalised yi, quickly updated the readme, left it.
00:52:21 <dons> u221e: if you're building/playing with yi, a readme patch would be karma-worthy ;)
00:52:38 <dons> maybe i need to implement @reward or @candy
00:52:47 <Stinger_> ooh candy
00:52:56 <u221e> So is the quick start section at the top correct?
00:52:58 <dons> actually, @reward should say "candy" or "chocolate cake" or something
00:53:08 <u221e> Besides Setup.lhs being Setup.hs of course
00:53:11 <dons> u221e: yes, just build it like a normal cabalised program
00:53:20 <dons> so setup configure ; build ; install
00:53:38 <u221e> Do I have to install it?
00:53:45 <dons> you can install it inplace
00:53:58 <dons> ./Setup.hs configure --prefix=`pwd` ; ./Setup.hs build
00:54:05 <dons> and then run dist/build/yi/yi, iirc
00:54:18 <dons> or also do ./Setup.hs install, and it will be dumped into `pwd`/bin
00:54:49 <dons> it will start up as vim by default, but if you're an emacs guy, try --as=mg or --as=emacs2
00:55:09 <u221e> What's HSX?
00:55:31 <dons> hsx is a haskell parser (extended) by nibro, that he uses for hsp.
00:55:37 <dons> its not needed for normal plugin use
00:56:01 <u221e> It says hs-plugins depends on it
00:56:21 <dons> you have hs-plugins-1.0?
00:56:34 <dons> hmm. where does it say this?
00:56:46 <dons> I see:
00:56:46 <dons> * Optional:
00:56:47 <dons>    If you are doing a lot of `merge'-related operations, and require
00:56:47 <dons>    an extended haskell parser, you can compile hs-plugins to use
00:56:47 <dons>    HSX, Niklas Broberg's Haskell parser library
00:57:00 <u221e> BUILDING AND INSTALLING
00:57:24 <dons> i think you have an older hs-plugins then?
00:57:42 <dons> want to grab hs-plugins 1.0, or else the darcs version?
00:57:48 <u221e> No, I'm reading from the Yi readme ;)
00:58:00 <u221e> I haven't downloaded hs-plugins yet
00:58:02 <dons> ah. my bad.
00:58:11 <dons> you don't even need hs-plugins to build yi these days
00:58:22 <dons> do you have yi from darcs?
00:58:26 <dons> if not, get that.
00:58:54 <u221e> Ok, cool.
00:59:12 <dons> then you only need fps, besides, iirc
00:59:19 <dons> yes, that's right
01:00:05 <norpan> fast fucked strings
01:00:30 <dons> norpan :/
01:00:51 <u221e> I already have fps of course ;)
01:00:55 <neologism> have you seen this?
01:00:56 <neologism> http://www.ibm.com/developerworks/java/library/j-cb07186.html?ca=dgr-lnxw07Haskell
01:00:58 <lambdabot> Title: Crossing borders: Explore functional programming with Haskell
01:01:08 <u221e> neologism, your too late ;)
01:01:16 <neologism> ok ok ;)
01:01:21 <neologism> dont beat me :)
01:01:34 <u221e> I didn't, someone else did
01:01:45 <dons> yeah, we talked about it earlier :)
01:01:57 <dons> quite interesting seeing 'java' and 'haskell' in the same url
01:02:03 <u221e> dons, what with it saying I need to call autoreconf?
01:02:40 <dons> you do. unless you already have a ./configure ?
01:03:23 <u221e> Hm, haven't had to do that for any of the other packages I've built so far
01:03:49 <dons> some haskell packages use ./configure for additional tests
01:04:03 <dons> since cabal doesn't do everything, or else they are ported from an existing autohell framework
01:04:23 <ValarQ> "As I mentioned earlier, monads can represent changes in state. But even with monads, managing state is difficult -- so don't try." ?
01:04:51 <u221e> Heh, I don't have automake or aclocal ;)
01:05:02 <dons> ah well. i pondered that line too. but felt he was trying to be clear that functional style is to be preferred, ValarQ ?
01:05:18 <dons> so that people don't just blindly port everything into IO
01:05:20 <ValarQ> dons: yeah, maybe i ripped it out of context...
01:08:34 <ValarQ> it seems to be written for javacoders
01:09:13 <dons> yeah, by a guy who's written java books
01:09:38 <ProfTeggy> bbl -- lecturing
01:11:17 <u221e> dons: Yi build just failed
01:11:36 <u221e> gcc: dist/build/./yi-tmp/cbits/YiUtils.o: No such file or directory
01:11:52 <dons> cabal bug
01:12:04 <dons> copy the .o files from their dist/* location to where cabal expects them to be
01:12:18 <dons> recent cabals don't suffer from this
01:13:50 <u221e> A I see, it got put in cbits/cbits instead of just cbits... how strange.
01:13:53 <dons> so its looking in cbits/ but i suspect the bug puts them in dist/build/./yi-tmp/ ?
01:13:56 <dons> ah cbits/cbits
01:14:00 <dons> yeah, simple bug
01:15:19 <u221e> dons, how do you remove a package?
01:15:40 <dons> ghc-pkg unregister foo
01:15:49 <dons> and then remove it from lib/foo
01:16:08 <dons> i think you can uninstall some Cabal packages, but haven't tried it
01:16:26 <dons> maybe that's a new feature
01:16:28 <u221e> Can I have two different versions of the same packages installed at once?
01:16:48 <dons> yes, you can
01:17:17 <dons> i had all of fps-0{1..7} at one point installed
01:19:36 <shapr> Good morning #haskell!
01:20:09 <u221e> Which one would ghc use?
01:20:35 <dons> whichever one is visible - which will be the most recently installed, iirc
01:20:38 <dons> morning shapr !
01:20:43 <ValarQ> shapr: morning
01:22:55 <void> Hi, is thera an availible fft implementation for haskell?
01:24:26 <dons> hmm, i don't know of one. check haskell.org/ under 'libraries and tools'
01:24:43 <dons> otherwise, you can use the forieign function interface to call a C fft
01:24:59 <dons> additionally, you might consider asking on haskell-cafe@haskell.org
01:25:03 <dons> maybe someone there knows.
01:25:20 <sieni> fftw is probably a good choice if you want a good c library
01:26:58 <dons> yeah, a binding to the ocaml-generated fftw (that's right, yes?) would be nifty
01:30:04 <sieni> I don't remember which parts were ocaml generated
01:31:40 <sieni> http://www.fftw.org/faq/section2.html#languages
01:31:41 <lambdabot> Title: FFTW FAQ - Section 2
01:32:25 <dons> super-cool
01:32:39 <dons> so that would be a good option - an ffi binding to fftw.
01:32:50 <dons> i'd imagine many would be interested in that
01:36:24 <sieni> unfortunately for some, fftw is gpl
01:39:14 <JaffaCake> the mailing lists don't seem to be sending out any messages, and I don't know why.  Is anyone here a postfix expert or could help me debug?
01:40:50 <dons> hmm. so that's where my mail went.
01:41:03 <dons> Igloo: know any postfix?
01:41:29 <JaffaCake> so haskell.org is receiving mail and the messages are making it into the ML archives, but nothing is being sent out
01:41:41 <JaffaCake> I've tried restarting postfix
01:42:13 <dons> yeah, i saw that things ended up in the archives.
01:42:33 <JaffaCake> the mailman logs appear to be empty
01:42:34 <dons> shapr, around?
01:44:51 <JaffaCake> there is nothing in the mail queue from July 19 onwards
01:51:51 <JaffaCake> ah, I think it was mailman that needed restarting
01:51:59 <JaffaCake> looks like I've unblocked it now
01:54:03 <dons> ah, /me gets a bunch of mail suddenly
02:00:44 <shapr> 6y0
02:00:49 <shapr> dons: Wassup?
02:00:51 <shapr> Hiya JaffaCake!
02:01:14 <dons> shapr: oh, just wondering if you knew any postfix, to help JaffaCake. but problem solved now
02:01:18 <shapr> I think AngloHaskell will be fun!
02:01:45 <shapr> Yes, I know postfix, but was not here at that moment.
02:02:09 <shapr> I've started using Google Talk more lately. It's nice.
02:04:49 <shapr> dons: What other community activity could be graphed? Mailing lists, commits, irc, and ?
02:05:36 <shapr> JaffaCake: Hey! I have a GHC question.
02:05:37 <dons> yes, mailing lists are graphed (see gmane). commits are graphed already, here, http://www.cse.unsw.edu.au/~dons/images/commits/community/
02:05:38 <lambdabot> Title: Haskell Community Project Activity
02:05:54 <dons> hmm, there could be deeper analysis of the mailing list
02:06:00 <dons> new project annoucnements?
02:06:01 <shapr> dons: Oh, I know! Research papers!
02:06:04 <dons> ah yes.
02:06:13 <dons> harder to get all in one place, but possible
02:06:28 <shapr> Is the citeseer database of citations spiderable?
02:06:36 <shapr> If we could walk the citations as a graph it'd be pretty easy.
02:06:37 <dons> not sure, but its not complete either
02:06:54 <dons> maybe the german citeseer, (i can never remember the name)
02:06:58 <shapr> DLBP
02:07:03 <dons> ah yes.
02:07:04 <shapr> Whatever the full name is.
02:07:09 <shapr> DBLP?
02:07:10 <dons> that'd be spiderable
02:07:12 <shapr> Anyway....
02:07:24 <shapr> I think it covers less than Citeseer sadly.
02:07:33 <shapr> I really should finish FLM if only for the citations.
02:07:35 <dons> i.e. find references to 'haskell' in abstracts, perhaps
02:09:40 <dons> the question, then, shapr, is what to do with this data?
02:09:47 <dons> can we use it to improve things somehow?
02:09:58 <dons> or do they all just point to: hackageDB
02:10:00 <shapr> Yeah, that's always the goal.
02:10:08 <shapr> Hmm
02:10:08 <dons> and maybe a research papers archive
02:11:08 <dons> interesting, http://news.bbc.co.uk/2/hi/science/nature/5191384.stm
02:11:09 <lambdabot> Title: BBC NEWS | Science/Nature | Secrets of ocean birth laid bare
02:11:19 <dons> new ocean opening up in east africa
02:13:56 <shapr> dons: Like you told me about research papers, how can people apply the data to improve their own life.
02:14:06 <shapr> hm
02:14:15 <shapr> Oh, I have some ideas.
02:16:14 <shapr> For one thing, we could use mailing list archives to find nearby subjects.
02:16:29 <shapr> Though I'm not sure how to do that exactly, can bayesian stats do that?
02:16:33 <dons> hmm, drawing a graph of concepts?
02:16:35 <shapr> Yeah
02:16:41 <dons> like Haskell -> Monads -> Category Theory ..
02:16:43 <shapr> Right
02:16:50 <shapr> That would be good for both newbies and experienced users.
02:16:51 <dons> that's interesting
02:17:09 <dons> google should be able to do this for us!
02:17:13 <shapr> They can!
02:17:21 <shapr> But not limited to one mailing list.
02:17:33 <dons> well, could we not limit the scope somehow?
02:18:05 <shapr> http://labs.google.com/sets
02:18:07 <lambdabot> Title: Google Sets
02:18:10 <shapr> I don't see a way to limit it.
02:18:22 <dons> hmm. very interesting
02:19:08 <shapr> It doesn't seem to work with CT, monad, haskell, lambda cal, & arrow
02:19:10 <shapr> hm
02:19:34 <shapr> Do you know anyone who does subject extraction from a corpus? Maybe Hal Daume...
02:20:01 <shapr> I did bayesian stats for Paskalle, but you'd have to do something slightly different.
02:20:17 <dons> well, MegaMonad ;)
02:20:21 <shapr> hm!
02:20:45 <dons> i think there must be well known techniques for doing this
02:21:03 <shapr> Yeah, but no one on #haskell who does is awake now :-)
02:21:36 <dons> the sets thing isn't really suited to these abstract concepts, i think
02:21:42 <dons> its close, but not quite right.
02:21:51 <shapr> Yeah, I wonder what is right.
02:22:12 <dons> it seems to like proper nouns
02:22:16 <dons> and things with websites :)
02:22:44 <dons> green,purple,red does well though
02:23:06 <shapr> JaffaCake: The solution to http://hackage.haskell.org/trac/ghc/ticket/706 appears to be to pass the ForeignStubs to DriverPipeline.compile. That implies to me that ForeignStubs should be in the ModIface, since it's pre-link info. Do you think that's the right place to add that info?
02:23:08 <lambdabot> Title: #706 (GHC links _stub.o files regardless of whether any 'foreign import' decls r ...
02:23:09 <dons> but its looking for sets.
02:23:14 <MarcWeber> What is wrong with my cabal file? http://rafb.net/paste/results/9rBfpH10.html
02:23:15 <dons> so haskell gives java, ML ..
02:23:24 <dons> whereas we want related concepts
02:23:58 <shapr> Yeah, bayesian spam filtering is a special case of partitioning a corpus into two segments.
02:24:04 <shapr> We want many segments.
02:24:33 <dons> possibly we could do it from paper keywords
02:24:45 <dons> you know how acm and other papers have a a concepts keyword list?
02:24:54 <shapr> Yeah, but automated extraction from mailing lists would be more impressive.
02:25:03 <shapr> Yeah, is that automatically built, or author submitted?
02:25:04 <dons> indeed.
02:25:09 <MarcWeber> Got it. .hs was missing.
02:25:14 <dons> the authors classify their own work
02:25:20 <dons> and you end up with a large classified db
02:25:24 <shapr> Seems like they might miss useful keywords.
02:25:33 <dons> so when two separate authors use the same words, you get a connection
02:25:38 <dons> and edge in the graph,
02:25:49 <dons> so hs-plugins uses dynamic linking,
02:26:04 <shapr> Hidden Markov Models just might work.
02:28:08 <shapr> dons: Oh hey, did you see the paper on a bayesian stats definition of human surprise?
02:28:20 <shapr> I bet that could be applied to writing video games and building haunted houses.
02:29:44 <Muad_Dibber> nice to see that dons is called more often than lambdabot herself :P
02:30:11 <shapr> You're looking at the IRC stats?
02:30:13 <Muad_Dibber> yup
02:31:45 <MarcWeber> Is there an easy way to get the module defining an identifier (function/ data/ ..) from installed packages? something like ghc-pkg -list-packages-and-modules-defining ParseError ?
02:32:06 <shapr> Haddock can find it for you.
02:32:07 <MarcWeber> lambdabot?
02:32:14 <shapr> @index ParseError
02:32:15 <lambdabot> Text.ParserCombinators.Parsec.Error, Text.ParserCombinators.Parsec
02:37:57 <MarcWeber> @index readMS
02:37:58 <lambdabot> bzzt
02:40:09 <xerox> @remember dons so i suspect dynamically typed langs, that just work (bugs and all) will always be more popular with the masses since most people don't understand bug theory ;)
02:40:09 <lambdabot> Done.
02:40:34 <shapr> haha
02:40:40 <xerox> So many interesting conversations early in the morning, a reason why I should learn to wake up earlier %)
02:41:04 <MarcWeber> shapr: Where does it look for information? assocs <- readMS ... readMS = liftIO $ readMVar ?ref
02:41:10 <MarcWeber> now I'm lost.
02:41:15 <xerox> I woke up an hour ago and I passed all the time reading the #haskell backlog.
02:41:25 <boegel> xerox: omg :) you freak :p
02:41:30 <shapr> MarcWeber: Who? What?
02:41:40 * xerox chuckles
02:41:53 <MarcWeber> shapr: Where does the @index command find its information?
02:41:56 * xerox brews some other tea
02:42:03 <shapr> dons: Any ideas on how to enter multiline quotes into @remember?
02:42:18 <dons> hmm.
02:42:29 <dons> use one long line?
02:42:31 <dons> hehe
02:42:32 <xerox> Encode as strings, with quotes and \n ?
02:42:35 <dons> yeah
02:42:49 <shapr> MarcWeber: The first version used Haddock and built a Map out of the exported names. I never got around to pushing that version, so TheHunter wrote a new version. I think he scrapes the webpages or something.
02:43:03 <xerox> @remember.read
02:43:04 <lambdabot> Unknown command, try @list
02:43:11 <xerox> So it's like you've showed your lines :-)
02:43:51 <shapr> It's good, but IRC is limited to 512 chars.
02:43:53 <gds> shapr: Use the context callback, and have commands "@beginquote nick" and "@endquote" ?
02:44:01 <shapr> Oh yeah!
02:44:12 <dons> yeah, you could do that
02:44:12 <shapr> Interesting, IRC markup...
02:44:15 <gds> I was thinking about doing something like that for @tell...
02:44:19 <dons> sort of the inverse of ?vixen-on ?vixen-off
02:44:26 <gds> But it'd be most useful in privmsgs...
02:44:31 <xerox> MarcWeber: index :~> http://www.cse.unsw.edu.au/~dons/lambdabot/Plugin/Haddock.hs
02:44:32 <dons> or have an accumulating versoin
02:44:35 <gds> and currently the context callback isn't called back there...
02:44:43 <dons> i.e. ?remember-cons
02:44:44 <gds> Easy to fix though, I expect...
02:45:03 <xerox> remember.read is the most easily hackable, but as you please!
02:45:16 <dons> yeah, i like remember.read myself
02:45:39 <xerox> MarcWeber: then, for the states, see there :~> http://www.cse.unsw.edu.au/~dons/lambdabot/State/
02:45:39 <lambdabot> Title: Index of /~dons/lambdabot/State
02:46:10 <xerox> shapr: I've got into Gale again, and I've noticed you've been there recently too!
02:47:22 <xerox> shapr: It would be nice to have RSS generated from gale logs.
02:47:54 <shapr> I'm most interested in Jabber at the moment.
02:48:08 <shapr> The IRC protocol is quite limiting.
02:48:19 <MarcWeber> shapr: So I can't use my libs beeing installed locally.. ;-( Perhaps I should use ghc-pkg list, ghc-pkg describe (all packages) ..  with ghc --show-iface to generate some kind of index..
02:48:28 <xerox> Oh, today is also the worldjumpday
02:48:32 <gds> shapr: jabber-bots ? ;)
02:48:32 <xerox> I wonder if they have jumped yet
02:48:43 <shapr> Doesn't GHC 6.5 handle user-local package files?
02:49:19 <shapr> MarcWeber: Oh, I see what you mean.
02:49:32 <shapr> MarcWeber: It wouldn't be too hard to hack a search function into ghci...
02:49:33 * shapr thinks
02:49:51 <xerox> Just run lambdabot locally :-)
02:49:54 <MarcWeber> shapr: Shouldn't be to hard to either parse output or add this function.. Could be used by any developement system.
02:49:54 <xerox> It's very handy!
02:50:11 <MarcWeber> xerox: @index doesn't include my local libs... ;-(
02:50:12 <xerox> http://fooling.lambdabot http://www.worldjumpday.org/
02:50:39 <xerox> dons: how is Haddock.hs state generated?
02:51:00 <MarcWeber> I've already installed it because there was a time thought I would need my ip adress.. which might change.. So my idea was to use lambdabot tell it.. ;-
02:51:43 <shapr> MarcWeber: Yes, --show-iface is an excellent idea.
02:52:12 <shapr> I wonder if --show-iface output is already a Read instance?
02:52:15 * shapr hacks around...
02:52:17 <dons> xerox: there's a script in scripts/ iirc
02:52:27 <xerox> MarcWeber: there's a script! :)
02:52:49 <xerox> http://www.cse.unsw.edu.au/~dons/lambdabot/scripts/GenHaddock.hs
02:53:05 <dons> hmm. you could actually write a ghci command to bind to lamdbabot
02:53:15 <dons> it lets you define local bindings for things
02:53:26 <xerox> You mean you can extend GHCi?
02:53:30 <dons> which would be useful, say :pl or :hoogle or :docs
02:53:31 <shapr> I'm seeing the beginning of a real Haskell dev environment here...
02:53:45 <MarcWeber> Where can I find it? Should I ask on the ghc mailinglist to include it as option into the ghc distribution? Would be really useful.. (for me at least)
02:53:45 <dons> xerox: yeah, ghci lets you define new custom commands, of some sort
02:53:54 <xerox> Oh, let's do it!
02:54:03 * xerox eagerly wants :pl
02:54:05 <dons> look at :def <cmd> <expr>
02:54:22 <dons> were <cmd> calls the local lambdabot
02:54:26 <gds> shapr: a dev environment/IDE that handles on-line collaboration for you is actually a very cool idea....
02:54:29 <shapr> The GenHaddock script builds from the website.
02:54:46 <shapr> gds: Did you see my idea about using plugs with a Flash frontend?
02:54:59 <gds> I don't think I did, no....
02:55:08 <xerox> Oh crazy.
02:55:09 <shapr> Even an ajaxy frontend would work. Have you seen the bash via xmlrpc & streaming http?
02:55:12 <gds> web based haskell?
02:55:16 <xerox> expr is an Haskell expression!
02:55:22 <xerox> Exciting.
02:55:34 <shapr> Yeah, for IRC collaboration multiple people could type into the flash frontend and see the output.
02:55:45 <xerox> dons: is there a switch to turn off lambdabot echoing the IRCMessage record locally?
02:55:48 <shapr> Sort of like joining an IRC channel, but joining a GHCI session instead.
02:55:53 <bortzmeyer> I try to reuse a "data" in another data (http://paste.lisp.org/display/22908) but it fails
02:56:15 <gds> Are we talking something like google spreadsheet - all the docs/code/etc stored centrally, and connected to by remote devs?
02:56:20 <shapr> gds: Right
02:56:23 <gds> Could be cool :)
02:56:24 <dons> xerox: no, but there should be (using verbose=0 or something)
02:56:28 <dons> xerox: its a one line command
02:56:32 <shapr> Using @plugs so that security is not a problem.
02:56:34 <dons> otherwise, use sed//
02:56:39 <shapr> Or however > works in lambdabot.
02:56:55 <shapr> Since I've been learning Flash recently it wouldn't be very hard.
02:57:19 <dons> xerox: there's some shell scripts for calling @pl from vim
02:57:25 <dons> you might use those to work out some of the details
02:57:35 <dons> lambdabot/scripts/vim
02:57:40 <shapr> I think lambdabot plugins need someway to autoderive an xmlrpc interface.
02:57:42 * xerox hops
02:57:44 <dons> echo "pl $DECL" | ./lambdabot 2> /dev/null | sed '$d;/Irc/d;s/lambdabot> //'
02:57:47 <gds> Sounds great to me - though of course, it'd be nice to be able to dev IO based stuff sometimes...
02:58:06 <shapr> gds: Yeah, but the Flash front end idea was mostly for the goal of teaching.
02:58:10 <xerox> One can just wrap a runProcess around that string!
02:58:16 <gds> That makes sense :)
02:58:42 <shapr> True collaboration would be more fun, but I'm not sure how to do it. Gobby?
02:58:59 * gds ponders the possibility of virtualisation for heavy dev stuff (IO and all)
02:59:17 <dons> xerox: this is a cool idea. you're going to follow it up?
02:59:30 <dons> ghci integration of lambdabot is even better than editor integration
03:00:03 * xerox is just trying
03:00:42 <dons> getting @instances, @docs, @hoogle, @pl, @fptools, and some others would be cool
03:00:51 <shapr> MarcWeber: Dumping exports from an interface looks pretty easy at first glance...
03:00:58 <xerox> Seems like I must run to a nearby shop now, hrrmpf. Be back in a lil while. I'll try dons!
03:01:08 * shapr is reading ghc/compiler/iface/MkIface.showIface
03:01:26 <shapr> MarcWeber: Are you using 6.4.2 ?
03:04:07 <bortzmeyer> So, any idea why (http://paste.lisp.org/display/22908)  fails?
03:04:47 <dons> hmm. not enough info from that paste.
03:04:55 <dons> oh, yes there is
03:05:00 <dons> data Statement = Declaration
03:05:01 <dons>             | Transition
03:05:02 <dons> is wrong
03:05:27 <bortzmeyer> I know it is wrong :-) ghc told me so. But why is it not possible?
03:05:36 <dons> you're defining two new data values, Declaration and Transition that have the same names as the constructors for data Declaration and  Transition
03:05:40 <dons> you mean,
03:05:53 <dons> data Statement = Decl Declaration | Trans Transition
03:07:17 <shapr> MarcWeber: Or you could grep it out of show-iface
03:08:01 <bortzmeyer> dons: OK, thanks, but it is painful (I need to add another word, Decl)
03:08:03 <shapr> Hm, how do I find the line number of the last occurence of a pattern in a file?
03:08:22 <shapr> Using shell utils...
03:08:24 <dons> bortzmeyer: yes, since you want to distinguish them all as separate types
03:08:30 <dons> an alternative would be,
03:08:45 <dons> data Statement = Declaration {name::String, value::String} | Transition {message::String, start::String, end::String}
03:08:50 <dons> maybe that's what you wanted to start with?
03:09:05 <dons> note that now you can't distinguish decls and trans statically based on their type
03:09:18 <bortzmeyer> dons: I started with your solution but I wanted to be able to manipulate Declaration and Transition separately
03:09:44 <dons> right, that's a good idea
03:09:53 <dons> you get more properties if they have separate types, as well
03:10:11 <dons> since you then have functions that are guaranteed only to take Declatarions, for example
03:10:36 <dons> the downside is that if you want to have a union of Declaration and Transition, you'll need to have a tag
03:10:57 <dons> i.e. Decl | Trans, or maybe StmtD and StmtT
03:11:04 <dons> no way around it.
03:11:52 <bortzmeyer> dons: OK, many thanks, I don't have a solution but I have an explanation :-) Thanks for the details
03:11:58 <dons> makes sense, the need for tags in the union?
03:12:18 <dons> well, the solution is data Statement = StmtD Declaration  | StmtT Transition
03:12:20 <bortzmeyer> dons: I'm not convinced but I can live with it
03:12:23 <dons> this kind of structure is used in ghc, for example
03:12:50 <dons> one possibility would be to reuse the Either type
03:13:02 <dons> type Statement = Either Decaration Transition
03:13:15 <dons> and then you get the Left and Right tags, instead of StmtD and StmtT
03:13:23 <dons> still, there's tags, though
03:14:11 <bortzmeyer> dons: yes, it does not make a big difference
03:17:25 <MarcWeber> shapr: I could also use tags.. But thats all a work around. no, 6.5.2
03:17:43 <shapr> How is hasktags a workaround?
03:18:03 <dons> I use hasktags
03:18:08 <dons> i even have a tags file for everyone ...
03:18:45 <shapr> MarcWeber: find -name \*.\*hs | xargs hasktags
03:19:04 <dons> there's a script, http://www.cse.unsw.edu.au/~dons/tmp/tag-fptools
03:19:25 * xerox 's back
03:19:26 <shapr> What's htags?
03:19:35 <xerox> ctags for Haskell code!
03:19:40 <SamB_XP> dons: how is the need for a tag a downside, again?
03:19:40 <xerox> Quite neat to use in Emacs.
03:19:43 <shapr> oh
03:19:57 <shapr> How does hasktags and htags compare?
03:20:01 <xerox> <keypress> :~sheesh~> module defining it
03:20:48 <dons> and here's the resulting tag file, http://www.cse.unsw.edu.au/~dons/tmp/f
03:21:03 <dons> SamB_XP: oh, more to type, I suppose.
03:21:15 <dons> i don't really see it as a downside. its the only way to solve the problem
03:21:25 <SamB_XP> but at least it is typeable ;-)
03:21:29 <dons> since you need to distinguish the values at runtime some how
03:21:46 <dons> so all possible solutions come down to emulating tags
03:22:14 <xerox> ?hoogle Handle -> IO String
03:22:15 <lambdabot> IO.hGetContents :: Handle -> IO String
03:22:16 <lambdabot> IO.hGetLine :: Handle -> IO String
03:22:16 <lambdabot> System.IO.hShow :: Handle -> IO String
03:25:11 <MarcWeber> Has anyone of you tried to compile, use hquickfile? I've posted to haskellcafe some time ago.
03:26:37 <norpan> @paste
03:26:37 <lambdabot> http://paste.lisp.org/new/haskell
03:26:41 <norpan> @where paste
03:26:42 <lambdabot> http://paste.lisp.org/new/haskell
03:26:45 <norpan> good!
03:26:56 <alar> how can I get cmdline arguments? can't find which module is responsible for this
03:27:14 <dons> getArgs
03:27:18 <dons> ?hoogle getArgs
03:27:19 <lambdabot> System.getArgs :: IO [String]
03:27:26 <dons> ?index getArgs
03:27:27 <alar> thanks!
03:27:27 <lambdabot> System.Environment
03:27:30 <alar> @karma+ dons
03:27:31 <lambdabot> dons's karma raised to 44.
03:27:37 <norpan> bah, i knew that
03:27:37 <dons> xerox: @index is another one.
03:28:08 <xerox> dons: right!
03:28:27 <MarcWeber> alar: There is also Pescos commandline lib
03:28:46 <alar> @google Pescos commandline
03:28:48 <lambdabot> http://tunes.org/~nef/logs/haskell/06.02.23
03:29:11 * xerox lunches
03:29:15 <alar> @more
03:29:40 <alar> @google Pescos command line
03:29:42 <lambdabot> http://tunes.org/~nef/logs/haskell/04.08.21
03:30:21 <alar> @WHERE Pescos commandline
03:30:22 <lambdabot> Unknown command, try @list
03:30:29 <alar> @where Pescos commandline
03:30:30 <lambdabot> I know nothing about pescos.
03:30:53 <dons> its in missingh, isn't it?
03:31:50 <alar> @where missingh
03:31:51 <lambdabot> http://quux.org/devel/missingh
03:32:07 <dons> generally though, getArgs + getOpt is enough
03:32:11 <dons> ?hoogle getOpt
03:32:12 <lambdabot> Distribution.GetOpt.getOpt :: ArgOrder a -> [OptDescr a] -> [String] -> ([a], [String], [String])
03:32:12 <lambdabot> Distribution.GetOpt :: module
03:32:12 <lambdabot> Distribution.GetOpt.getOpt' :: ArgOrder a -> [OptDescr a] -> [String] -> ([a], [String], [String], [String])
03:32:17 <alar> yes
03:32:24 <alar> it's enough for my purposes
03:32:36 <dons> System.Console.GetOpt, i mean
03:32:40 <alar> @hoogle getEnv
03:32:41 <lambdabot> System.getEnv :: String -> IO String
03:32:41 <lambdabot> System.Environment.getEnvironment :: IO [(String, String)]
03:32:42 <MarcWeber> http://www.scannedinavian.org/~pesco/
03:33:14 <MarcWeber> Seems to be down
03:37:03 <gds> Does anyone know what "exposed: False" does in a cabal file?
03:38:21 <MarcWeber> gds: No. You can find the documentation on haskell.org -> documentation -> cabal .. But I don't konw how up to date it is.
03:39:16 <gds> MarcWeber: I've looked through http://www.haskell.org/ghc/docs/latest/html/Cabal/ and not found it....
03:39:17 <lambdabot> Title: Common Architecture for Building Applications and Libraries
03:39:54 <gds> I suspect it's a relatively new thing, since my copy says "Setup.hs: lambdabot.cabal:15: Unknown field 'exposed'"
03:40:36 <dons> are you trying to build lambdabot?
03:40:47 <gds> I'm trying to apply the latest patches, yes :)
03:40:56 <dons> oh , i thought i removed that patch. hmm
03:41:09 <gds> Ah...
03:41:26 <gds> I'll wait until you have then, I guess ;)
03:41:35 <dons> gds, either darcs get again, or darcs unpull the patch about 'making lambdabot a package'
03:41:44 <gds> Ok :)
03:41:47 <dons> the change broke a few things
03:41:51 <dons> so i'ts reverted
03:42:04 <gds> I must just have pulled at a bad time :)
03:42:51 <shapr> MarcWeber: Do you use tags?
03:42:57 <gds> " make lambdabot a package and export ShowQ."
03:43:06 <shapr> A shellscript to update a local copy of @index would be nicer though.
03:44:15 <dons> gds, that's it
03:44:17 <dons> unpull that one
03:45:17 <gds> Cheers - working now :)
03:45:20 <MarcWeber> shapr: With vim, sure
03:45:34 <shapr> It's actually fun to wander around inside GHC.
03:47:04 <norpan> better than THC?
03:48:44 <shapr> Definitely
03:48:54 <sieni> norpan: _That_ would be a cool name for a Haskell Compiler
03:49:12 <alar> The Haskell Compiler, =)
03:49:16 <shapr> yeah
03:49:29 <alar> shapr: what's better than TH?
03:49:56 <sieni> There are a few towns that Finland could donate for the purpose. E.g. Tampere Haskell Compiler or Turku Haskell Compiler
03:50:01 <shapr> Myself, I don't like the chemical THC.
03:50:12 <shapr> But if you like it, that's fine.
03:50:24 * ValarQ thinks the Glorious Haskell Compiler is pretty acceptable
03:50:25 <norpan> never tried it actually
03:50:28 <alar> I can't use yourself :)
03:51:17 <alar> Tambov Haskell Comrade :)
03:51:23 <shapr> Hm, how do I forward ~pesco to another url in apache2 config?
03:51:28 * shapr is fixing scannedinavian.org
03:56:21 <shapr> Maybe I should email JaffaCake with questions, might be faster.
04:11:28 <foxy_> dons, the reason I was thinking about versions for Yi was considering something like html where you might want an ascii source view as well as a rendered view (very easy with gtk+mozembed)
04:11:46 <dons> The Haskell Compiler?
04:12:04 <dons> foxy_: hmm. but why darcs? i didn't understand that bit
04:12:36 <foxy_> dons, <shrug> someone's already done the hard work ;
04:12:59 <dons> no, but i didn't understand the reason to use darcs? whta do you want to do with it?
04:13:06 <foxy_> dons, you might have edits in different windows that need to be merged
04:13:29 <foxy_> you'd only need the per file functionality
04:13:53 <foxy_> and the repo would have to be memory-based
04:14:06 <foxy_> (and I think undo is a good use)
04:18:53 <u221e> dons: What does io mean in lambdabot?
04:34:47 <u221e> oh, it just means liftIO
04:43:42 * xerox found a name for this GHCi affarir
04:43:48 <xerox> Let's smok'em out!
04:55:23 <alar> oh, yes
04:55:40 <alar> compiler with name "THC" would be forbidden by DEA
04:59:26 <shapr> Seriously?
04:59:45 <boegel> :)
04:59:45 <shapr> JaffaCake: ping
04:59:50 <sieni> haha
05:00:20 <xerox> Do we have any plaintext+markup :~parse~> html/whatever tool in Haskell?
05:00:20 <sieni> Maybe also the recursice acronym "THC's a Haskell Compiler" would work
05:00:38 <xerox> sieni: hehe, nice one.
05:00:51 <alar> sieni: then a"a Haskell Compiler" would also forbidden by DEA
05:00:54 <alar> :)
05:01:06 <shapr> xerox: Pesco just wrote something.
05:01:16 <xerox> shapr: like?
05:05:00 <sieni> Also, the statement "THC is a chemical" causes DEA forbid all chemicals including, but not limited to sulphuric acid
05:05:32 <alar> :)
05:05:34 <roconnor> THC, I love it.
05:06:03 <xerox> shapr: nice one!
05:06:42 <sieni> ghc might consider changing its name to THC in order to appeal to younger generations
05:07:12 <xerox> o/~ GHC in the sky with diamoooonds o/~
05:09:01 <xerox> Anybody knows how to have lines and columns numbers displayed in vim?
05:09:26 <xerox> Something like a (a,a) tuple at the bottom lÃ²ine would be perfect.
05:09:46 <xerox> Damg lan.
05:09:57 <sieni> by banging your head on the keyboard wishing there was a good enough editor configurable in Haskell?
05:10:13 <xerox> Yarrr.
05:12:36 <mlh> http://localhost:25/
05:12:43 <mlh> :-o
05:13:30 * xerox growls
05:16:03 <roconnor> @vixin growl
05:16:04 <lambdabot> My sister likes Yahoo better. Her screenname is FoxxyGurl83. If you have yahoo you should message her, she's just as pretty as me :)
05:16:17 <xerox> FYI it is "set ruler".
05:16:25 <roconnor> @vixin Gurl?
05:16:26 <lambdabot> nevermind about that
05:17:15 <shapr> The recent d-bus binding will make writing Nokia 770 apps easier.
05:18:33 * psnl wonders where the vixin command came from
05:19:08 <shapr> VixenLove
05:19:22 <psnl> who was?
05:19:43 <shapr> Mark Wotton (aka blackdog) wrote the lambdabot vixen plugin as a clone of the original VixenLove IM bot written in Visual Basic.
05:19:49 <shapr> @google vixenlove visual basic
05:19:52 <lambdabot> http://www.stargeek.com/item/7529.html
05:19:52 <lambdabot> Title: Random PHP Trivia or How I Learned to Love the . Operator
05:19:54 <alar> @vixen love
05:19:54 <lambdabot> you are soooo interesting
05:20:47 <shapr> psnl: The idea was to engage people in IM chat and see how long it could fool them. Sadly, many humans on Yahoo, MSN, and AOL chats cannot give a Turing Test... and probably couldn't pass it either :-/
05:20:59 <psnl> right
05:21:24 <u221e> Whats a funDep?
05:21:31 * psnl mutters dark words about that not being a turing test
05:24:40 <shapr> Hiya ndm
05:24:49 <ndm> hiya shapr
05:24:51 <shapr> How's code?
05:25:28 <xerox> shapr: it was Evan who made the d-bus initial binding, fun fun fun :)
05:25:44 <xerox> I think I got him interested in Haskell again with SoC last year %)
05:26:05 <shapr> xerox: Cool :-)
05:26:12 <ndm> not too bad - my phd code thingy is hard, my filepath module is done, my gtk engine is coming along nicely, hoogle 4 is being planned, winhaskell is getting useable, hat-gui is close to working
05:27:31 <xerox> @spell dependencies
05:27:32 <lambdabot> dependencies
05:28:39 <psnl> ndm: you are writing a gui for hat?
05:28:59 <ndm> psnl: yep, i have a reasonable chunk done
05:29:04 <ndm> @where hat-gui
05:29:05 <lambdabot> I know nothing about hat-gui.
05:29:14 * psnl swears in three different langauages
05:29:21 * shapr swears in Haskell
05:29:25 <shapr> _!_
05:29:31 <ndm> @where+ http://www-users.cs.york.ac.uk/~ndm/projects/hat.php
05:29:32 <lambdabot> Done.
05:29:39 <ndm> psnl: see that link
05:29:44 <ndm> @where+ hat-gui http://www-users.cs.york.ac.uk/~ndm/projects/hat.php
05:29:45 <lambdabot> Done.
05:29:48 <shapr> ndm: Code is good :-)
05:30:01 <ndm> shapr, hows job interview prerparations ?
05:30:13 <shapr> I'm learning the insides of GHC, it's fun.
05:30:19 <psnl> ndm: I was going to do my diseration on a gui for hat
05:30:36 <ndm> psnl: if you really want to, i will give up at this point, and you can do the rest
05:30:42 <edwinb> psnl: you still can...
05:30:46 <ndm> take this as a proof of concept, and add the rest in
05:30:57 <edwinb> A BSc dissertation doesn't have to be original
05:30:59 <ndm> its got the two easiest ones done so far, there are about 6 tools left
05:31:21 <ndm> psnl: the code is in the main repo, as hatgui
05:31:36 <alar> @where
05:31:37 <lambdabot>  @where <key>, return element associated with key
05:31:42 <alar> @where
05:31:43 <lambdabot>  @where <key>, return element associated with key
05:31:59 <psnl> edwinb: I'ld like it to be original, being me and all
05:32:09 <edwinb> you can be original without doing the whole thing yourself
05:32:13 <ndm> psnl: if you finish off the rest, it will be original
05:32:14 <psnl> ndm: thanks
05:32:38 <edwinb> YOu should stand on people's shoulders, not their toes ;)
05:32:40 <ndm> psnl: i'd love someone to work on this properly - rather that me doing the easy bits and running out of time :)
05:33:01 <psnl> ndm: sure
05:33:23 <psnl> ndm: I'll have a look at it in my time
05:33:59 <ndm> psnl: cool, i'll stop working on it for the mo, if you have any questions about it just ask - but it should be reasonably simple
05:35:00 <psnl> ndm: were you just going to redo the tactics listed on the hat page?
05:35:35 <ndm> psnl: the idea is to libraryfy each tool, and then link in
05:35:49 <ndm> take a look at HatStack.hs and HatStackText.hs, which I split up
05:36:04 <ndm> HatStack is an API, HatStackText is the old hat-stack tool, using the HatStack api
05:36:14 <ndm> then HatGui uses HatStack as an API to do the stack stuff
05:36:16 <psnl> ndm: aye, thats what I was thinking
05:36:46 <ndm> after doing that, you can start to integrate them a bit more - i.e. have a hat-cover view all the time, and for hat-stack when you select a line jump to that place in the code
05:36:54 <psnl> yeah
05:37:09 <ndm> and vice versa - clicking on a line in the code might hat-observe that function
05:37:32 <ndm> also i want syntax colouring for the hat-cover using hscolour
05:37:57 <ndm> and if you read my hat-visual report, that has my ideas for a new GUI only view of the hat data
05:38:14 <alar> what's hscolour?
05:38:18 <ndm> @where hscolour
05:38:19 <lambdabot> I know nothing about hscolour.
05:38:19 <psnl> yeah, I read that when doing the lit study
05:38:27 <ndm> @google hscolour
05:38:30 <lambdabot> http://www.cs.york.ac.uk/fp/darcs/hscolour/
05:38:31 <lambdabot> Title: hscolour
05:38:41 <ndm> @where+ hscolour http://www.cs.york.ac.uk/fp/darcs/hscolour/
05:38:41 <lambdabot> Done.
05:38:49 <ndm> psnl: wow, i never thought anyone would read that :)
05:38:56 <ndm> i did a presentation as well
05:39:03 <psnl> ndm: I was also thinking about improving hat-cover for more than one trace
05:39:09 <ndm> thats on the website too
05:39:21 <ndm> psnl: with the hat-cover api i made, thats a trivial task
05:39:25 <psnl> ndm: yey
05:39:29 <ndm> you just parse them, then union the output
05:39:38 <ndm> and the guy next to me is working on a multitrace library
05:39:39 <psnl> double yey
05:40:04 <shapr> Does anyone know if adding a field to ModIface will mean changing the format of the .hi interface files?
05:40:14 <alar> @where hmake
05:40:14 <lambdabot> http://haskell.org/hmake
05:40:39 <dons> shapr: i'd expect so...
05:40:45 <dons> but you'd have to regen the binary instance, no?
05:40:50 <dons> Binary instance
05:41:03 <psnl> ndm: so with quickcheck, you could generate lots of test cases and have a good go at working out what is used in total, rather than for one or two runs
05:41:14 <psnl> ndm: coming to the meetup?
05:41:19 <ndm> psnl: indeed, a fantastic idea - also the coverage method would be good
05:41:32 <ndm> psnl: i can't make the friday, but will come for the saturday if everyone is still there
05:41:46 <psnl> ndm: I might not be around on the sat
05:41:48 <ndm> psnl: you might want to mail the hat list with your ideas
05:42:22 <psnl> ndm: will do, though the new tactics I have in mind I want to prototype first, since they are insane ;-)
05:42:39 <ndm> psnl: are they GUI only, or console as well?
05:42:42 <ndm> and any hints?
05:43:08 <ndm> you also might want to check w-hat first, to check your tactics can't be implemented in that
05:43:20 <ndm> although i'm not sure much public information exists on w-hat, yet
05:45:38 <psnl> one idea was to cross hat-detect with hat-diff. you entered your expected result, and it tried to guess what went wrong
05:46:19 <psnl> by running the computation backwards. it depends on one-to-functions and abuse of currying
05:47:34 <ndm> psnl: if that worked, it would be crazy and very impressive
05:48:57 <psnl> ndm: yeah, but it won't work without a lot of fiddling
05:49:09 <psnl> ndm: the basic problem is programs shed infomation
05:49:27 <ndm> psnl: yeah, it certainly seems very non-trivial
05:49:38 <xerox> ?index forkIO
05:49:38 <lambdabot> Control.Concurrent
05:49:57 <ndm> a gui would probably be more like an undergrad project - that seems phd level
05:50:07 <psnl> ndm: it depends how fast I get the rest of it done
05:50:22 <ndm> if you wanted another hat project, converting the base libraries so they compiled with hat would be a good one
05:50:38 <ndm> i.e. so hat doesn't have a separate copy of hacked libraries, but just uses the normal ones
05:50:40 <psnl> knowing Paul[1], he will generate a few ideas himself, and want me to do them
05:50:50 <ndm> Paul[1]?
05:50:51 <psnl> [1] my supervisor, Paul Callaghan
05:50:55 <xerox> dons - I keep getting a ExitFailure 127 :(
05:51:19 <dons> hmm.
05:51:32 <dons> psnl: hehe. funny cite style.
05:51:49 <psnl> ndm: the other thinking about base libs is special tactics for debugging certain apps
05:51:50 <dons> its a good idea, since you can lazily explain that ref later ;)
05:51:52 <ndm> i have read his ambiguous parsing of happy ones
05:52:25 <ndm> dons, figured out why lamdabot needs unix?
05:52:26 <psnl> that was last year's daft fp student project
05:52:54 <dons> ndm, oh, i wsa to do that, wasn't i.
05:53:03 <ndm> i am writing a happy competitor, so best to check out the competition first :)
05:53:08 <dons> hmm. well, one way to find out is to remove the dep, and build it
05:53:12 <dons> then see where it breaks
05:53:34 <psnl> ndm: what do you think the problem is with happy?
05:53:35 * ndm types runhaskell Setup build
05:53:49 <ndm> psnl: http://www-users.cs.york.ac.uk/~ndm/projects/parsing.php
05:53:51 <lambdabot> Title: Neil Mitchell - Parsing
05:53:55 <ndm> poor "user interface" to the programmer
05:54:18 <ndm> there is no easy textual correspondance between what is a valid happy spec and what is not - i.e. will you get shift/reduce conflicts etc when you compile
05:54:23 <roconnor> @hoogle build
05:54:23 <ndm> its Haskell dependant
05:54:23 <lambdabot> GHC.Exts.build :: ((a -> b -> b) -> b -> b) -> [a]
05:54:24 <lambdabot> Distribution.Simple.Build.build :: PackageDescription -> LocalBuildInfo -> Int -> [PPSuffixHandler] -> IO ()
05:54:24 <lambdabot> Data.Graph.Inductive.Internal.Heap.build :: Ord a => [(a, b)] -> Heap a b
05:54:30 <roconnor> > GHC.Exts.build seq
05:54:31 <psnl> you mean; its based on yacc syntax ;-)
05:54:31 <lambdabot>  Not in scope: `GHC.Exts.build'
05:54:49 <ndm> psnl: yes, all of these are criticisms of yacc just as much as happy
05:54:50 <xerox> roconnor: evil!
05:55:16 <ndm> its just that yacc is a C tool, so not working well is just part of life, with Haskell we can (and should!) do better
05:55:16 <roconnor> [].
05:55:49 <xerox> Prelude GHC.Exts> build seq
05:55:49 <xerox> []
05:56:26 <xerox> You don't like Parsec ndm?
05:56:34 <ndm> dons, it has a dependancy on plugins?
05:56:39 <ndm> xerox: no, not really
05:56:40 <edwinb> Parsec and happy have different advantages...
05:56:43 <dons> runplugs does, yes, ndm.
05:56:47 <dons> not lambdabot itself.
05:56:48 <edwinb> I use both for different things
05:56:55 <dons> so you don't get the runtime eval, if you don't have plugins
05:57:05 <xerox> edwinb: care to explain? I never used happy(& friends.)
05:57:29 <psnl> @remember ndm its just that yacc is a C tool, so not working well is just part of life
05:57:30 <lambdabot> Done.
05:57:31 <edwinb> I use happy when I have a static and fairly complex grammar that I want statically checked (for ambiguities, for example)
05:57:48 <edwinb> and I use parsec if the grammar is fairly simple and I might want to change it dynamically, like allow the user to add rules.
05:58:01 <ndm> once i have done my parser thing, everyone will want to use it for everything :)
05:58:18 <Philippa> a "first-order parsec" would be useful for a good many things
05:58:18 <xerox> edwinb: How is Parsec not statically checked?
05:58:19 <ndm> its also fast that either parsec or happy, even though i consider that to be irrelevant
05:58:29 <edwinb> xerox: where does it check for reduce/reduce conflicts?
05:58:37 <Philippa> xerox: it's a monad. Therefore you can have higher-order parsers, therefore it's pretty much turing complete. Check *that*.
05:58:53 * xerox groans
05:58:55 <edwinb> there can be more to static checking than just types...
05:59:01 <ndm> dons, so lamdabot depends on a version of fps you've never released, hehe
05:59:13 <xerox> On the other hand, I don't know happy, how does it work?
05:59:16 <Philippa> edwinb: strictly speaking it doesn't /have/ them. But yes, it'd be useful
05:59:21 <xerox> edwinb: thanks for the explanation.
05:59:23 <ndm> xerox: do you know yacc? bison?
05:59:25 <dons> ndm, yes. the super 0.7 version
05:59:28 <dons> i should tag it
05:59:30 * edwinb decides not to think about a dependent type representing an unambiguous grammar
05:59:32 <dons> after icfp
05:59:34 <Philippa> and probably quite doable for the first-order fragment (which is pretty much PEGs)
05:59:40 <xerox> No, I always kept myself away from those beasts, ndm.
05:59:42 <ndm> you should, about 400 patches since teh last tag
05:59:48 <Philippa> having functions that do the analysis should be enough
06:00:00 <Philippa> and that's plenty practical. Just interpret the monad/arrow/whatever another way
06:00:04 <xerox> That's also why I didn't like Hoogle code when I first read it ;-)
06:00:17 <ndm> xerox: no happy parser in there now
06:00:18 <xerox> I thought.. but there is Parsec! Why should people use anything else.
06:00:24 <ndm> and to be hoenst, i don't like the parser either
06:00:38 <ndm> xerox: feel free to write a new one :) I have specs for hoogle 4 parsing on the wiki
06:00:43 <psnl> ndm: the ambigous stuff in happy I infer to be slow
06:00:46 <ndm> if someone else wrote that bit, i'd be happy
06:00:55 <ndm> psnl: my thing will not be ambiguous
06:01:32 <psnl> cool
06:01:58 <psnl> ndm: you seem to have a lot of projects on the go
06:02:15 <ndm> psnl: i have a lot more than are listed there, on my website, or that i have told peopl;e about
06:02:24 <ndm> and remember, none of these are my actual PhD :)
06:02:45 <psnl> how long since you started?
06:02:51 <ndm> psnl: often i forget which projects i have, which is why i keep a list on a whiteboard at home
06:02:54 <ndm> psnl: 2 years
06:03:34 <xerox> Philippa: so there are parsers you can't do in Parsec, or you will have troubles doing?
06:04:40 <Philippa> there're parsers that might be painful in parsec, but no - the problem is that because it's so powerful it's also a bitch to do static analysis on
06:05:40 <ndm> dons: Setup: Cannot find: sh
06:06:00 <dons> oh, in ./build ?
06:06:07 <dons> hmm. no. what's this then?
06:07:13 <roconnor> xerox: who uses build anyways.
06:07:17 <ndm> runhaskell Setup configure
06:07:28 <dons> roconnor: fusion hackerz
06:07:30 <ndm> then it says it can't find sh, no idea why
06:07:43 <dons> configure must use sh
06:07:56 <dons> no, that's not right
06:07:59 <ndm> dons: and on my sh-less windows system?
06:08:02 <dons> hmm. weird.
06:08:09 <dons> can you compiler Setup.hs
06:08:19 <dons> compile, ghc -o setup --make Setup.hs ?
06:08:29 <dons> then try ./setup configure ?
06:08:56 * psnl has a whiteboard these days, and it has tons of hat related notes on it
06:09:04 <xerox> ?fptools GHC.Exts
06:09:05 <lambdabot> http://darcs.haskell.org/packages/base/GHC/Exts.hs
06:09:22 <ndm> psnl: you should really email the hat team, to give them advanced notice
06:09:32 <ndm> and maybe even come to the next hat-day
06:09:36 <alar> @help fptools
06:09:37 <lambdabot> fptools <lib>. Lookup url of ghc base library modules
06:09:48 <ndm> dons, same result
06:09:55 <dons> super weird
06:10:01 <psnl> ndm: will do
06:10:10 <psnl> ndm: when is the next hat-day?
06:11:15 <xerox> ?type mkNil
06:11:17 <lambdabot> Not in scope: `mkNil'
06:11:39 <xerox> ?type GHC.Base.mkNil
06:11:40 <lambdabot> Not in scope: `GHC.Base.mkNil'
06:11:44 <xerox> :P
06:12:17 <ndm> psnl: there has only ever been one, they talked about having one "sometime in the future"
06:12:27 <roconnor> are any prelude functions defined in GHC using build?
06:12:31 <psnl> ndm: right
06:12:35 <ndm> its not that clear, my guess is Colin will bring it up when he gets back to England
06:12:57 <roconnor> @hoogle [a]
06:12:58 <lambdabot> Prelude.repeat :: a -> [a]
06:12:58 <lambdabot> Maybe.maybeToList :: Maybe a -> [a]
06:12:58 <lambdabot> Prelude.cycle :: [a] -> [a]
06:13:24 <psnl> ndm: has any work been done on IO based debugging?
06:13:39 <ndm> roconnor: look at the list of good consumers and good produces in the GHC manual
06:13:49 <ndm> psnl: not that i know of, although i have heard the idea mentioned before
06:14:28 <ndm> more of doing a traditional variable inspection and code stepping in a do block
06:14:57 <psnl> ndm: my thinking was to do with programs that read something in, do a computation on that, and write it out again, without holding state. for example, a web server
06:15:25 <shapr> Isn't that sort of like QuickCheck?
06:15:29 <ndm> psnl: not that i know of - but i'm not really a core hat hacker, i only went to hat-day for a free meal :)
06:15:45 <psnl> I was thinking about a ethereal style view of the open IO thingys
06:15:46 <shapr> Oh, hat
06:16:22 <psnl> ndm: yeah, I thought about that too, I'll have to have another look though the hat-day stuff
06:17:03 <roconnor> @pl g c n = c 'a' (g c n)
06:17:04 <lambdabot> g = fix (liftM2 (.) ($ 'a'))
06:17:10 * shapr looks for another bug to fix while waiting to hear back from JaffaCake 
06:17:11 <ndm> psnl: yteah, idon't think that much was said about it, but i think olaf referred to it in passing
06:17:21 <ndm> shapr: my bugs :)
06:17:36 <ndm> shapr: my console bug is particularly weird, and should be easy to fix
06:17:48 <JaffaCake> shapr: did you send me an email?
06:17:53 <shapr> ndm: Is that the up arrow stuff?
06:17:55 <ndm> about a g being used as the first letter of a prompt :)
06:17:58 <shapr> JaffaCake: yup, to gmail & ms
06:18:03 <roconnor> > build $  fix (liftM2 (.) ($ 'a'))
06:18:04 <lambdabot>  Not in scope: `build'
06:18:05 <ndm> shapr: yep :)
06:18:07 <roconnor> oh yeah
06:18:17 * JaffaCake checks spam folders
06:18:23 <shapr> ndm: I'll look into it. This is only my second day hacking on GHC, so no promises :-)
06:18:51 * dons is happy to see all these people diving into ghc
06:18:59 <ndm> shapr: its probably in GHCi, and I was able to hack on that without about half an hour of trying, so you should be able to
06:19:09 <shapr> It's much easier to dive into GHC than I expected.
06:19:21 <ndm> shapr: first task is to try and see if its widnows specific
06:19:26 <dons> shapr, was it you who talked about putting the commentary onto the wiki?
06:19:37 <dons> and was it me who said it was a great idea?
06:19:38 <shapr> dons: Yup, me.
06:19:40 <shapr> yup, you
06:19:44 <psnl> ndm: what is your phd on, if you don't mind me asking?
06:19:45 <shapr> But I haven't heard back from chilli
06:19:55 <dons> ah ok. yeah, i think he might be travelling
06:19:55 <shapr> ndm: Yeah, that much I can easily do.
06:20:08 <ndm> psnl: http://www-users.cs.york.ac.uk/~ndm/projects/catch.php
06:20:10 <lambdabot> Title: Neil Mitchell - Catch - Case And Termination Checker for Haskell
06:20:23 <dons> shapr: but i'll kick his butt if he says no. (well, actually, considering his black belts.. )
06:20:24 <ndm> shapr: i fear if its windows, it may go unfixed :(
06:20:39 <roconnor> @pl repeat a = build (fix (liftM2 (.) ($ a)))
06:20:39 <lambdabot> repeat = build . fix . liftM2 (.) . flip id
06:21:10 <roconnor> that's not so bad
06:21:22 <shapr> dons: Hah
06:21:27 <alar> gates of hate and windows of fear
06:22:27 <psnl> ndm: thats cool
06:22:40 <psnl> ndm: will you get it folded into ghc?
06:22:55 <ndm> psnl: i have a load of code, and can do shortish examples, and am working on other stuff
06:23:06 <ndm> psnl: no, its based on Yhc Core, but will probably remain a separate project
06:23:19 <ndm> although the GHC hackers would be welcome to steal the analysis, if they felt like it
06:23:19 <shapr> ndm: Works fine on debian/unstable
06:23:48 <ndm> shapr: i suspected as much, probably readline issues and escape characters or some such
06:24:20 <ndm> unless there really is a stray 'g' floating around in the GHCi source code
06:24:26 <xerox> dons: Do you think it would be better to first hack in a lambdabot --quiet option, or hack^2 with regexps the output?
06:24:35 <roconnor> ndm: isn't repeat a good producer?
06:24:38 <xerox> dons: I've got something nearly working.
06:25:00 <roconnor> oh wait, i see it in the list now
06:25:01 <psnl> ndm: right-oh
06:25:08 <roconnor> ndm: nevermind
06:25:42 <xerox> roconnor: that points-free code is exceptionally not bad!
06:25:44 <dons> xerox: --quiet would be easy, disabling the irc thing by default might be a reasonable idea too
06:25:59 <dons> or optionally turning it on with verbose=True in Config.hs
06:26:01 <xerox> roconnor: also, count that flip id could have a name on its own.
06:26:32 <xerox> dons: I vote for disable it by default too.
06:26:35 <roconnor> :type flip id
06:26:41 <roconnor> @type flip id
06:26:43 <lambdabot> forall b c. b -> (b -> c) -> c
06:26:46 <roconnor> @type ($)
06:26:47 <lambdabot> forall b a. (a -> b) -> a -> b
06:26:51 <dons> xerox: go for it. should n't be too hard to find the print stmt..
06:27:01 <roconnor> @type flip ($)
06:27:02 <lambdabot> forall b b1. b1 -> (b1 -> b) -> b
06:27:03 <xerox> dons: I wonder, this way we are coming up with a "powerful" GHCi
06:27:16 <xerox> Will we end up with TWO ghci?!
06:27:34 <dons> yeah, kind of strange. makes me think we should sit back and come up with an design strategy
06:27:38 <shapr> I agree
06:27:39 <dons> well, we augment the existing ghci
06:27:41 <xerox> Indeed.
06:27:48 <roconnor> Is ($) = id
06:27:57 <xerox> roconnor: yup.
06:28:07 <roconnor> screw $, I'm using `id` from now on
06:28:12 <xerox> > (+1) `id` 2
06:28:13 <lambdabot>  3
06:28:19 <ndm> dons, so any ideas on the sh problem?
06:28:29 <dons> i have no idea
06:28:34 <xerox> dons: on the other hand, hack GHCi support for IRC seems... doubtful
06:28:36 <ValarQ> xerox: why use id in that way?
06:28:39 <dons> i can't see how the cabal build would break like that.
06:28:50 <roconnor> negate 5 + 7
06:28:51 <ndm> dons, me neither, is upgrading cabal a good plan?
06:28:52 <dons> ndm, unless you're running the ./build script?
06:28:54 <roconnor> > negate 5 + 7
06:28:54 <xerox> Or other means of communication other than the commandline, that is.
06:28:55 <lambdabot>  2
06:28:59 <roconnor> > negate $ 5 + 7
06:29:00 <lambdabot>  -12
06:29:04 <roconnor> > negate `id` 5 + 7
06:29:05 <xerox> ValarQ: rebel.
06:29:05 <lambdabot>  2
06:29:05 <ndm> dons, setup configure
06:29:07 <roconnor> oh
06:29:10 <roconnor> never mind
06:29:15 <ndm> i will rename the build script, just in case
06:29:16 <xerox> roconnor: fixity.
06:29:19 <ValarQ> xerox: ok then...
06:29:20 <roconnor> too bad
06:29:21 <dons> ndm, makes no sense then. try the cabal with 6.4.2, perhaps?
06:29:27 <xerox> Indeed, roc'.
06:29:34 <ndm> dons: thats hte one i am using
06:29:38 <dons> hmm
06:29:43 <dons> super weird.
06:29:47 <dons> try a manual build then?
06:29:49 <dons> ghc --make
06:29:58 <ndm> dons: what about the BotPP?
06:30:08 <dons> ah, you'll need to compile that first
06:30:20 <ValarQ> does haskell98 allow  a `func` b  where func only takes one argument?
06:30:38 <dons> ValarQ: what's the type going to be?
06:30:46 <xerox> ValarQ: what does it mean?
06:30:46 <dons> you mean, like
06:30:52 <dons> > id $ id 1
06:30:53 <lambdabot>  1
06:31:02 <dons> but you'd write it as: id `id` 1 ?
06:31:07 <dons> (answer: no)
06:31:24 <psnl> ndm: did you ever think about making your gui use hs-plugins?
06:31:24 <xerox> > id `id` 1
06:31:26 <lambdabot>  1
06:31:31 <ndm> psnl: which GUI?
06:31:35 <ndm> for hat-gui?
06:31:38 <psnl> yeah
06:31:46 <xerox> What's the problem with that?
06:31:47 <ndm> there doesn't seem much advantage i could thing of?
06:32:12 * psnl was thinking about people coming up with new tactics and wanting to a gui frontend
06:32:31 <dons> xerox: heh
06:32:52 <roconnor> ValarQ: id takes two arguments
06:33:05 <ValarQ> roconnor: it does?
06:33:07 <dons> > (+2) $ negate 1
06:33:08 <lambdabot>  1
06:33:14 <ValarQ> @type id
06:33:15 <alar> "åíçó øâ
06:33:16 <lambdabot> forall a. a -> a
06:33:17 <dons> > (+2) `negate` 1
06:33:18 <lambdabot>  add an instance declaration for (Num (a -> a))
06:33:18 <lambdabot>   In the definition of `uf...
06:33:24 <roconnor> the first is a function and the second is a value to apply that function to
06:33:40 <roconnor> >type flip $ flip id
06:33:48 <roconnor> @type flip $ flip id
06:33:49 <lambdabot> forall a c. (a -> c) -> a -> c
06:34:01 <roconnor> @type (flip . flip) id
06:34:02 <lambdabot> forall a c. (a -> c) -> a -> c
06:34:20 <roconnor> and clearly (flip . flip) does nothing
06:34:28 <ValarQ> ok, you lost me
06:34:30 <ndm> dons, Could not find module `System.Posix.Process': imported from Lamdabot
06:34:37 <dons> ah ha
06:34:43 <roconnor> ValarQ: sorry. a->a is polymorphic
06:34:53 <roconnor> in particular a could be equal to b -> c
06:35:06 <dons> ndm, yes, I see:
06:35:06 <dons> import System.Posix.Process
06:35:07 <roconnor> so id also has the type (b -> c) -> (b -> c)
06:35:07 <dons> import System.Posix.Signals
06:35:16 <roconnor> aka (b -> c) -> b ->c
06:35:19 <ValarQ> roconnor: oh, then i see
06:35:20 <dons> now, why is Process imported. that's weird.
06:35:22 <roconnor> which is a binary function
06:35:49 <dons> ndm, oh, to call exitImmediately
06:36:02 <dons> ndm, is there a window's exit() you can call instead?
06:36:13 <ValarQ> roconnor: then i get the flip id type as well
06:36:32 <ndm> dons: exitWith?
06:36:50 <ndm> which is standard haskell 98?
06:36:58 <ndm> or does it need some different behaviour?
06:36:58 <dons> ndm, problem is messy exception handlers
06:37:08 <dons> so i think i gave up and called exitImmediately/hit it with a hammer
06:37:21 <dons> ndm, so you could live with a messy exit for now
06:37:27 <vincenz> @type nil
06:37:28 <lambdabot> Not in scope: `nil'
06:37:35 <dons> and replace exitImmediately with something harmless
06:37:37 <ndm> dons, _exit
06:37:38 <xerox> dons, I want to write something robust :(
06:37:40 <dons> __MINGW_ it
06:37:44 <dons> or _exit would do.
06:37:49 <dons> xerox, yes?
06:38:03 <ndm> dons, _MINGW_ it? #ifdef __MINGW_ ?
06:38:19 <ndm> (again, eeek levels rising, since i'm compiling this without MINGW)
06:38:31 <dons> ah well, whatever your cpp symbol is
06:38:45 <dons> use whatever works. someone must have guessed MINGW at some point
06:39:18 <dons> but if you have something that makes sense, do that. i trust your portability hygiene
06:39:28 <alar> ndm: what are you compiling with?
06:39:41 <ndm> alar: GHC
06:39:44 <ndm> on Windows
06:40:05 <dons> if necessary, make up __WINDOWS__ and add it to the command line
06:40:05 <ndm> dons, Lib.Regex?
06:40:22 <dons> grr.
06:40:28 <ndm> dons, i'll hack it up first, be hygenic next time round
06:40:30 <dons> yes, our extended regex lib
06:40:39 <ndm> where can i grab that from?
06:40:40 <dons> but there's a portable regex.h in ghc's base lib
06:40:54 <dons> some how we can link with that, i'm hoping
06:40:58 <dons> (on windows)
06:41:20 <dons> ndm, is it installed in ghc-6.x/include ?
06:41:22 <dons> on your system?
06:41:48 <xerox> dons: may I paste to you some lines privately?
06:41:54 <alar> ndm: GHC under MinGW, CygWin or even VisualHaskell?
06:41:58 <dons> go nuts, xerox
06:43:20 <vincenz> for a really tough puzzle: http://www.logicmazes.com/theseus.html#small
06:43:22 <lambdabot> Title: Theseus and the Minotaur
06:43:50 <xerox> dons: wondering how to build something robust up from that.
06:43:55 <u221e> I swear, reading Haskell source code is like trying to read a Chinese newspaper
06:44:03 <xerox> reading until "lambdabot>" and then process a query?
06:44:17 <dons> xerox, hmm, come up with a script to call that does the work?
06:44:23 <dons> i'd just write a 2 line shell script
06:44:29 <dons> a la scripts/vim/*
06:44:32 <xerox> dons: may the script be an Haskell application?
06:44:32 <dons> and call that from ghci
06:44:35 <xerox> Oh-uhm.
06:44:38 <dons> indeed it may
06:44:45 * xerox tries
06:45:01 <xerox> OK, I like the idea.
06:45:14 <u221e> You have know like 5000 different things :(
06:45:31 <xerox> I've made a darcs repository and I will put the code online as soon as it start working!
06:45:55 <dons> ?remember u221e I swear, reading Haskell source code is like trying to read a Chinese newspaper
06:45:55 <lambdabot> Done.
06:46:03 <dons> u221e: what's troubling you?
06:46:07 <dons> have you met @index?
06:46:11 <dons> @index fmap
06:46:12 <lambdabot> Control.Monad, Prelude, Control.Monad.Reader, Control.Monad.Writer, Control.Monad.State, Control.Monad.RWS, Control.Monad.Identity, Control.Monad.Cont, Control.Monad.Error, Control.Monad.List
06:46:33 <dons> u221e: for even faster learning, install the haddock docs locally, and the fptools src
06:46:48 <dons> and use a tags file from your editor to jump directly to the defn of functions you don't know
06:46:57 <dons> let me know if you want more info on that
06:47:12 <ihope> So is there a way to simulate global variables in Haskell without using unsafePerformIO or passing a pointerthingy around?
06:47:22 <dons> an IORef?
06:47:23 <xerox> We need `Haskell in a box' maybe?
06:47:25 * xerox chuckles
06:47:47 <ihope> dons: but doesn't that require passing the reference around everywhere?
06:47:47 <xerox> dons: that counts as pointerthingy I believe...
06:47:50 <xerox> :-)
06:47:51 <dons> ihope: well, there's implicit parameters, the state monad
06:47:57 * xerox nods
06:48:06 <dons> the state monad would be the conventional solution
06:48:11 <xerox> There also is ST !
06:48:12 <ihope> Well, I wanted to "extend" the IO monad.
06:48:13 <dons> since it just changes your type, no explicit threading
06:48:16 <dons> or ST.
06:48:22 <dons> ihope: so StateT IO ?
06:48:23 <xerox> ihope, you do not want referential transparency?
06:48:29 <xerox> Or do you want implicit parameters?
06:48:33 * xerox chuckles heavily
06:48:35 <ValarQ> whats the difference between State and ST?
06:48:46 <ihope> Um...
06:49:09 <xerox> ValarQ: State models stateful computations of the form s -> (a,s); ST gives you STRefs, which are like IORefs, but without IO.
06:49:22 <ihope> Well, is there a way to be absolutely sure (in GHC) that 'unsafePerformIO newIORef' will only be evaluated once?
06:49:45 <xerox> main = unsafePerformIO newIORef -- maybe
06:49:46 <dons> instance Monad (State s) where
06:49:47 <dons>     return a = State $ \s -> (a, s)
06:49:47 <dons>     m >>= k  = State $ \s -> let
06:49:47 <dons>         (a, s') = runState m s
06:49:47 <dons>         in runState (k a) s'
06:49:51 <dons> versus
06:49:57 <dons> instance Monad (ST s) where
06:50:04 <dons>     return x = ST (\ s -> (# s, x #))
06:50:06 <roconnor> How do IORefs relate to MVars?
06:50:11 <dons>     (ST m) >>= k
06:50:11 <dons>       = ST (\ s ->
06:50:11 <dons>     case (m s) of { (# new_s, r #) ->
06:50:11 <dons>     case (k r) of { ST k2 ->
06:50:11 <dons>     (k2 new_s) }})
06:50:23 * xerox runs naked through the code.
06:50:26 <dons> roconnor: hmm, IORefs don't do concurrency
06:50:28 <xerox> Oops.
06:50:33 <shapr> xerox: Watch out for that pointy lambda!
06:50:39 <u221e> What does liftIO do?
06:50:41 * xerox dodges
06:50:44 <shapr> @index liftIO
06:50:44 <lambdabot> Control.Monad.Trans, Control.Monad.Reader, Control.Monad.Writer, Control.Monad.State, Control.Monad.RWS, Control.Monad.Cont, Control.Monad.Error, Control.Monad.List
06:50:49 <ihope> xerox: nah, that'll try to run 'unsafePerformIO newIORef', but it's not an IO thing.
06:50:52 <shapr> @type Control.Monad.Trans.liftIO
06:50:52 <dons> u221e: its like liftM for the IO monad
06:50:53 <roconnor> Is there any reason to use ST over STM?
06:50:53 <lambdabot> forall (m :: * -> *) a. (MonadIO m) => IO a -> m a
06:50:55 <petekaz> dons: what tool do you use for all of your graphs?
06:50:58 <shapr> @type Control.Monad.Writer.liftIO
06:50:59 <xerox> It lifts an IO computation in the MonadIO of choice
06:51:00 <lambdabot> forall (m :: * -> *) a. (MonadIO m) => IO a -> m a
06:51:12 <dons> petekaz: i use gnuplot, and i have a custom script (see the code in darcs-graph )
06:51:16 <dons> ?where darcs-graph
06:51:16 <lambdabot> http://www.cse.unsw.edu.au/~dons/code/darcs-graph/
06:51:19 <shapr> roconnor: I prefer that extra M.
06:51:28 <ihope> shapr: you know, @hoogle can act sort of like @index and @type rolled into one.
06:51:32 <petekaz> dons: thanks.
06:51:35 <xerox> roconnor: those are completely differnt things!
06:51:37 <roconnor> shapr: that's what I'm thinkg
06:51:47 <shapr> ihope: Yeah, it's a better approach.
06:51:55 <dons> ST is old skool
06:51:59 <shapr> ihope: But the source isn't available yet, I don't think.
06:52:02 * shapr looks at ndm 
06:52:08 <dons> STM is new fangled, complete magic, super cool, but not the same
06:52:25 <u221e> I'm trying to understand the lambdabot source but I seem to be lost on anything related to a Monad.
06:52:52 <roconnor> xerox: really?  Aren't the TVars and MVars in STM better versions of the STRefs in ST?
06:52:59 <ihope> u221e: well, the IRC monad or whatever it is is probably just IO, but different, if you know what I mean.
06:53:23 <dons> u221e: yeah, perhaps just remember the LB monad is a state monad for carrying around the lambdabot global state
06:53:31 <roconnor> oh wait, ST is parameterized.
06:53:35 <dons> its over IO, so you can call IO underneath
06:53:37 <roconnor> I see
06:54:13 <ihope_> So will a NOINLINE pragma make sure something's only evaluated once?
06:54:16 <dons> "A Very Modal Model of a Modern, Major, General Type System"
06:54:19 <dons> fun paper name
06:54:27 <shapr> u221e: lambdabot started out as an infinite loop that would read from a pipe. Then Pseudonym added pattern matching on the incoming string. IRC sends signals like ":PRIVMSG " and stuff.
06:54:27 <u221e> Anyone have any idea what the codex on the icfp contest page is? ;)
06:54:51 <dons> its a secret puzzle, i suspect
06:55:12 <shapr> Later, that pattern matching code was split out into the BaseModule plugin, where all the basic system code lives.
06:55:32 <dons> yeah, that was a good design decision
06:55:33 <shapr> Since lambdabot is now a typeclass with methods for each IRC signal, you can make it do anything you want by making your own typeclass.
06:55:44 <shapr> polli did the BaseModule stuff.
06:56:12 <u221e> It's called a codex so my guess is it's some kind of way to translate something, archaeolinguistically :)
06:56:40 <xerox> ?type maybe
06:56:41 <lambdabot> forall b a. b -> (a -> b) -> Maybe a -> b
06:57:26 <ihope_> Oh, yeah. Better than a -> (a -> a) -> Maybe a -> a.
06:58:35 <shapr> Hm, windows users would probably like to run darcs-all as well.
06:58:55 <shapr> Or can they be expected to have a unix-on-win environment that will execute a sh script?
06:59:08 <roconnor> @strings codex.umz
06:59:08 <lambdabot> Unknown command, try @list
06:59:19 <roconnor> ignoti et quasi occulti
06:59:27 <roconnor> welldonedaed si luap
06:59:36 <shapr> paul is dead?
06:59:39 <roconnor> Evan Chan was murdered
06:59:49 <roconnor> evalso dark the con of man
06:59:58 <roconnor> dustsolomon
07:00:10 <roconnor> GIF89a@
07:00:14 <u221e> What's a funDep?
07:00:20 <shapr> also dark the con of man sounds like an anagram.
07:00:20 <dons> a functional dependency
07:00:25 <roconnor> novus ordo seclorum
07:00:25 <dons> ?where haskell-exts
07:00:26 <lambdabot> I know nothing about haskell-exts.
07:00:30 <dons> ?where haskellexts
07:00:31 <lambdabot> http://hackage.haskell.org/trac/haskell-prime/wiki/HaskellExtensions
07:00:34 <shapr> roconnor: cryptonomicon joke?
07:00:34 <dons> u221e: ^^
07:00:35 <roconnor> shapr, have you read the Da Vinci code?
07:00:38 <vincenz> I installed libghc-magic-dev
07:00:43 <vincenz> and for some reason it's not listed by ghc-pkg
07:00:43 <shapr> Yes, but I don't remember that much of it.
07:00:46 <vincenz> :(
07:00:50 <shapr> It was pretty cheesy.
07:00:54 <dons> its an extension to the type class systtem allowing for prolog-like programming in the type checker, roughly
07:01:03 <shapr> Focault's Pendulum was much better.
07:01:08 <roconnor> dark the con of man was an anagram in the book.
07:01:19 <xerox> u221e: are you familiar with multi parameter type classes?
07:01:24 <u221e> No
07:01:26 <roconnor> templar
07:01:27 <shapr> Sadly, Umberto Eco isn't as advertised as whatshisname.
07:01:31 <shapr> David Brown?
07:01:31 <roconnor> societas_eruditorum
07:01:41 <xerox> u221e: are you familiar with single-parameter type classes?
07:01:49 <roconnor> tycon mismatch
07:02:06 <sieni> hmm... I don't think I've thrown a snowball out of the balcony this time of the year before
07:02:14 <roconnor> the rest looks like encrypted data
07:02:18 <vincenz> how do I coalesce my ghc-pkg-6.4.1 and ghc-pkg-6.4 list into one ??
07:02:25 <xerox> sieni: pics! :)
07:02:37 <xerox> u221e: like Num, Ord, Eq, ... ?
07:02:50 <u221e> xerox: That depends if those are any different then the normal type classes I already know.
07:02:53 <roconnor> it looks like what my loop-aes ecrypted swap looks like
07:02:57 <u221e> Yes
07:03:05 <xerox> u221e: what are the normal type classes you already know?
07:03:19 <shapr> I've been meaning to get around to mounting my drive as loop encrypted.
07:03:21 <sieni> xerox: just melting my regfrigerator :-
07:03:22 <sieni> )
07:03:23 <roconnor> abulafiabad wolf
07:03:23 <u221e> The ones you listed.
07:03:28 <xerox> u221e: ok. Now imagine |class Foo a b where ...|
07:03:31 <roconnor> i love bees
07:03:33 <roconnor> ???
07:03:37 <vincenz> Anyone?
07:03:44 <xerox> u221e: It is an extension to the Haskell98 standard, it has two type variables.
07:04:05 <ndm> sorry, fire alarm :)
07:04:12 <xerox> u221e: Now you can think of instances like |instance Foo Int Char where ...| |instance Foo () Double where ...| and so on.
07:04:15 <ndm> shapr, the code for Hoogle is out in a darcs and has been for ages
07:04:19 <shapr> ndm: We know you were really reading slashdot!
07:04:21 <xerox> u221e: with me?
07:04:25 <shapr> ndm: whoops, my mistake
07:04:28 <u221e> So far.
07:04:40 <ndm> darcs get http://www.cs.york.ac.uk/fp/darcs/hoogle
07:04:42 <lambdabot> Title: Index of /fp/darcs/hoogle
07:05:18 <shapr> ndm: Do win32 Haskellers expect to have a unix-on-win installed when building GHC?
07:05:33 <xerox> u221e: now, in the same sense the result of a function whose type is a -> Maybe a depends (functionally) on the parameter's type a....
07:05:40 <alar> shapr: nope
07:05:50 <ndm> shapr, i don't know, you pretty much need to unzip a linux distro on your hard drive
07:05:51 <xerox> u221e: you can make functional dependencies between class typevars.
07:05:53 <shapr> In that case, the darcs-all shell script needs to have an equivalent batch file.
07:06:14 <ndm> shapr: i use Linux to do GHC development, because compiling on Windows is too painful
07:06:24 <ndm> Hugs also depends on mingw
07:06:30 <ndm> and uses various shell scripts
07:07:00 <u221e> xerox: SOrry, I don't get it ;)
07:07:07 <shapr> ndm: So how do people build GHC for windows?
07:07:07 <xerox> u221e: Practically it means that for "class Foo a b | a -> b" (which reads `class foo a b where a chooses b') you will have the parameter a chosing the b.
07:07:13 <shapr> hej eal
07:07:32 <xerox> u221e: So you can only have |instance Foo Int Char where ...| which has Int as a, and no more.
07:07:39 <xerox> I.e. Int chooses Char.
07:07:50 <roconnor> http://www.wired.com/news/culture/0,1284,65365,00.html
07:07:51 <lambdabot> Title: Wired News: I Love Bees Game a Surprise Hit
07:07:57 <xerox> You can't now write |instance Foo Int Double|, for instance. (pun not intended.)
07:08:05 <ndm> shapr, there is a two page document somewhere
07:08:14 <ndm> but it scared me too much to read through it
07:08:19 <xerox> u221e: this make typeclasses _way_ powerful.
07:08:32 <u221e> Hm...
07:08:39 <ndm> alar, GHC on my nice pretty windows command line
07:08:51 <xerox> u221e: Do you agree that if you pass a Int to a function whose type is a -> Maybe a, you get a Maybe Int as result?
07:09:04 <alar> ndm: that probably means MinGW
07:09:10 <u221e> Yea...
07:09:11 <ndm> dons, C:\ghc\ghc-6.4.2\include\regex.h
07:09:16 <xerox> Hence the type of the type variable 'a' of the return value is (functionally) dependend on the 'a' of the argument.
07:09:18 <alar> because Cygwin has its own bash
07:09:23 <ndm> alar: GHC was compiled with mingw, but is running natively now
07:09:25 <xerox> The same goes for the classes there.
07:09:32 <alar> oh
07:09:44 <eivuokko_> mingw is as native as you get in Windows.
07:09:51 <eivuokko_> msys stuff isn't
07:09:55 <xerox> u221e: I have some convoluted examples of what you can do with them, since they are so powerful, but they are pretty convoluted examples, as I say.
07:10:02 <alar> ndm: and it can compile to binaries without MinGW's GCC?
07:10:09 <ndm> alar: no, sadly not
07:10:23 <ndm> eivuokko_: no, you can get more native, use Yhc :)
07:10:33 <xerox> ?wiki User:PaoloMartini
07:10:33 <u221e> You know, I don't really see what's so special about the All about Monads tutorial...
07:10:33 <lambdabot> http://www.haskell.org/haskellwiki/User:PaoloMartini
07:10:36 <xerox> ^- u221e see the class Add there.
07:11:04 <u221e> After part 1, it, frankly, isn't very good.
07:11:15 <eivuokko_> ndm, How is yhc more native than mingw?  Mingw produces native Windwows binaries, except relying Microsoft C runtime which neccesarily doesn't come with Windows.
07:11:27 <u221e> xerox: Ok.
07:11:46 <ndm> eivuokko_: because it doesn't require mingw, which is a bit like an OS over windows
07:11:59 <eivuokko_> ndm, Mingw is nothing like an os.  It just a toolchain.
07:12:17 <eivuokko_> ndm, msys and cygwin are posix emulation layers.  Mingw is not.
07:12:17 <ndm> eivuokko_: its still a big dependancy
07:12:42 <eivuokko_> Sure.
07:13:04 <Philippa> the only indirection the code sees from 'native' is going via C though
07:13:32 <eivuokko_> Anyway, I don't see the day when people can realistically develop in Windows using ghc without having a c compiler.
07:13:57 <ndm> but it would be nice if they could use Visual Studio, and not rely on Mingw
07:14:20 <eivuokko_> Yeah, but Visual Studio is bigger dependency than mingw in amount of bits :)
07:14:41 <sieni> if they are such wooden eyes that can't use mingw, then probably they shouldn't be using haskell in the first place
07:14:44 * xerox yums a yoghurt
07:15:20 <ndm> eivuokko_: not if you get the express edition, thats pretty lean, and 100% free
07:15:32 <ndm> (free as in teh good kind, beer)
07:15:34 <xerox> Is there a document titled like... ``how to cabalize your application in less than 0.2 seconds'' ?
07:15:39 <eivuokko_> ndm, I know.
07:15:51 <u221e> xerox: What does | mean in the context of a class definition?
07:15:52 <vincenz> xerox: rm -rf
07:16:00 <alar> VisualStudio IDE is extremely slow
07:16:03 <xerox> u221e: it introduces the functional dependencies
07:16:15 <ndm> alar: for Haskell, yes, for C, no
07:16:30 <xerox> u221e: after that you write the arrowic dependencies between type variables, that's it.
07:17:12 <xerox> u221e: note that ... | a b -> c ... only means that a and b choose c, there is no application going on.  It is a short hand for a -> c, b -> c.
07:17:23 * xerox stabs vi	
07:17:32 * xerox stabs vincenz properly
07:19:05 * vincenz bleeds to death
07:19:31 <alar> ndm: anyway VisualHaskell is the only comiler I have here on Windows, WinHugs does not produce binaries
07:20:02 <eivuokko_> alar, Commandline ghc?
07:20:22 <ndm> alar, Yhc?
07:20:35 <ndm> anyway, WinHugs rocks, and is super duper fast
07:20:36 <alar> don't have these
07:20:44 <eivuokko_> alar, Pick an editor, there are plenty.  Nobody forces you to use VisualHaskell if you dislike the IDE or can't make it work like you want.  And commandline ghc works just fine.
07:21:00 <ndm> I personally do TextPad with command line ghc
07:21:08 <ndm> ghc --make File is pretty easy
07:21:17 <eivuokko_> alar, VisualHaskell however is one of the most integrated devel envs there are for haskell.
07:21:26 <Philippa> TextPad with ghci most of the time and a tool set up to ghc --make here
07:21:47 <alar> yes
07:22:01 <ndm> I use WinHugs most of the time, and occasionally head for ghc --make
07:22:05 <Philippa> though I wish TextPad's highlighting were smarter
07:22:14 <ndm> Philippa: what in particular?
07:22:16 <Philippa> it gets confused by identifiers like foo'
07:22:25 <ndm> ah, I have character highlighting turned off
07:22:52 <ndm> which makes it pretty good, although 'x' is not hilighted, but i can live with that
07:23:40 <roconnor> area51
07:26:34 <Philippa> I'm kinda waiting for TextPad 5, on account of 4.x not really doing unicode properly
07:26:38 <Philippa> (or rather, not rendering it properly)
07:29:23 <ndm> never had a need for Unicode
07:29:42 <ndm> I'm hoping for better latex support, so I can give up on WinEdt
07:29:47 <ndm> although I suspect thats unlikely
07:29:54 <psnl> edwinb: I meant to ask you if you read the thing on /. about compilers
07:31:46 <srle> hi all
07:31:48 <srle> question
07:32:06 * pesco is saved by a cocktail.
07:32:08 <Philippa> better latex support would also be good, yeah. I took a look at the unicode features because there're times I consider using non-ASCII characters in code
07:32:22 <srle> why following code is not error in haskell: let x = x + 5 in putStrLn $ show x
07:32:29 <srle> program always frezes
07:32:42 <psnl> srle: its a black-hole computation
07:32:48 <roconnor> u221e: I found something in the codex
07:32:49 <Philippa> (and because I wanted to know how easy it could be made to type them - an easy way to 'shift' \ to lambda'd be nice sometimes, for example)
07:33:04 <roconnor> @paste
07:33:04 <lambdabot> http://paste.lisp.org/new/haskell
07:33:14 <srle> psnl : OK, but it is obvious error
07:33:18 <Philippa> srle: for the same reason for(;;){} isn't an error in C
07:33:36 <Philippa> but it's quite hard to distinguish from many similar examples that aren't errors
07:33:51 <psnl> srle: do you think non-termination is an error?
07:34:03 <srle> psnl : but in C I cam do Cntr-D and get out of the program
07:34:10 <lisppaste2> roconnor pasted "pulled from the codex" at http://paste.lisp.org/display/22914
07:34:15 <srle> psnl : in ghci on window I can not do that
07:34:16 <Philippa> for values of "quite hard" that mean "no computer can do it"
07:34:19 <roconnor> CBV
07:34:21 <roconnor> call by value
07:34:29 <sieni> srle: oh really?
07:34:39 <srle> psnl : Cntr-C
07:34:52 <srle> psnl : I've mistyped the first time
07:35:04 <vincenz> how do I uninstall ghc?
07:35:18 <vincenz> along with any packages it might have in it's cabal?
07:35:31 <psnl> srle, Philippa; ghci spots it though the fact it can't infer a type, but even so...
07:36:04 <Philippa> psnl: ghci can spot it at runtime, yes
07:36:37 <srle> psnl : OK, are there any flags in ghc to give the worning for blackhole
07:37:11 <psnl> srle: how would you id a black-hole computation...
07:37:20 <psnl> I mean, its the halting problem
07:37:59 <srle> psnl : but people try to type: let x' = x + 1
07:38:08 <srle> and sometimes forgot '
07:38:16 <Philippa> psnl: strictly speaking, black-holes are a subset of halting anyway
07:38:30 <srle> so, it would be helpfull to have the worning for simple cases
07:38:43 <Philippa> or to learn to use another naming scheme
07:38:52 <srle> Philippa : :)
07:39:04 <Philippa> you can shoot yourself in the foot in any language
07:39:20 <psnl> srle: if you can think of a way to do it, then telling the ghc people how to do would be good
07:39:45 <srle> other question: what is good debugging tool for haskell?
07:39:55 <psnl> hat
07:40:01 <srle> I am aware that functional programs dont need degurrer, but...
07:40:02 <jgrimes_> Is there a way to use Kleene plus, Kleene star, or separated list notation in a Happy grammar?
07:40:06 <psnl> www.haskell.org/hat
07:40:12 <srle> psnl : tnx
07:40:22 <shapr> jgrimes_: I think musasabi's Arrow parser has those directly.
07:40:23 <psnl> srle: ooh, flaming ;-)
07:40:51 <srle> psnl : no :)
07:41:30 <jgrimes_> shapr: hmm, ok
07:41:42 <Philippa> getting ghci accepting ctrl-C in windows again'd be nice
07:42:38 <shapr> jgrimes_: One neat thing about musasabi's use of arrows is that the Show instance of parsers is the matching regex.
07:43:01 <shapr> dons: Yay, permissions from Manuel to copy the Commentary to the GHC developer's wiki.
07:43:02 <jgrimes_> shapr: that is pretty neat
07:43:27 <psnl> srle: as a thought for you, main = putStrLn $ process $ getLine >>= main, which is similar to x=x+1, isn't that rare
07:44:33 <srle> psnl : I'll think of that. :)
07:44:42 <shapr> @seen musasabi
07:44:42 <lambdabot> I saw musasabi leaving #haskell-overflow, #haskell-blah and #haskell 1 day, 7 hours, 36 minutes and 8 seconds ago, and .
07:44:51 <shapr> Anyone know what happened to musasabi?
07:45:10 * shapr sends an email to musasabi so he knows we miss him.
07:45:21 <jgrimes_> shapr: I take it Arrows aren't a standard ext?
07:45:26 <srle> Does anyone knows any concurent haskell applications?
07:45:30 <shapr> They are a standard extensions, just not often used.
07:45:35 <shapr> srle: Lots!
07:45:36 <jgrimes_> shapr: oh, cool
07:45:47 <shapr> srle: Anything that uses threads uses Control.Concurrent.
07:45:59 <shapr> @where arrows
07:45:59 <lambdabot> http://www.haskell.org/arrows/
07:46:04 <srle> I would like to translate them to Software Transactional Memory, to see are they faster or slower
07:46:09 <xerox> shapr: yeah we do!
07:46:33 <shapr> srle: Doesn't the original STM paper include benchmarks?
07:46:37 <sieni> shapr: he talked 25 minutes ago on ircnet
07:46:56 <srle> shapr : let me see
07:47:01 <shapr> sieni: Ok, good to hear. I was wondering if he was terribly ill or something.
07:48:19 <vincenz> @tell dcoutts When compiling gtk2hs ..10 gtk/Graphics/UI/Gtk/Signals.chs:463:2: Not in scope: `connectGeneric'
07:48:20 <lambdabot> Consider it noted.
07:48:21 <shapr> Maybe he just overdosed on haskell.
07:48:30 <shapr> vincenz: Oh hey, getting into GHC is really easy.
07:48:36 <vincenz> :
07:48:37 <vincenz> :)
07:48:43 <shapr> vincenz: Jump in and hack, and feel free to ask me any questions. I'll answer if I can.
07:49:00 <sieni> shapr: might be :-)
07:49:00 <xerox> sieni: any idea why he didn't show up here lately?
07:49:06 <xerox> hehe.
07:49:11 <vincenz> shapr: got some highlevel overview document?
07:49:19 <xerox> He was doing some serious HAppS work last time I heard him.
07:49:31 <srle> shapr : I didn't find any benchmarks in STM Haskell paper
07:49:34 <shapr> There's the GHC commentary, but the high level overview is that there used to be two pieces, hsc and the batch driver.
07:49:44 <shapr> hsc would compile one file, and the batch driver carried around multifile info.
07:49:55 <shapr> Nowadays they're the same thing, but that structure is still found throughout the compiler.
07:50:02 <srle> if STM is so good, it would replace Concurent Haskell in applications where it hase sence
07:50:08 <shapr> It's nicely functional, here's how to do one step, now do that over the sequence.
07:50:35 <shapr> srle: STM is so good from what I see, and I think it will replace other threading approaches.
07:50:54 <vincenz> shapr: I mean of the sources
07:51:02 <srle> shapr : do youany reallife application that use STM Haskell?
07:51:18 <srle> shapr : do you know any reallife application that use STM Haskell?
07:51:40 <shapr> srle: Several people on #haskell have worked on a bittorrent client that uses STM.
07:51:53 <shapr> The client isn't finished, but STM makes locking and threading *much* easier to deal with.
07:52:29 <shapr> @where conjure
07:52:30 <lambdabot> http://j.mongers.org/pub/haskell/darcs/conjure/
07:52:54 <shapr> Hm, isn't Lemmih's repo better than that one?
07:53:35 <srle> tnx
07:54:08 <vincenz> @where+ conjure http://darcs.haskell.org/~lemmih/conjure/
07:54:09 <lambdabot> Done.
07:54:13 <edwinb> psnl: which thing on /. ?
07:55:48 <psnl> edwinb: http://it.slashdot.org/article.pl?sid=06/07/18/0146216
07:55:51 <lambdabot> Title: Slashdot | High-level Languages and Speed
07:56:37 <vincenz> psnl: it's slanted too much towards java
07:57:20 <edwinb> oh, that one...
07:57:38 <edwinb> some of the comments amused me...
07:57:44 <psnl> yeah, thought they might
07:58:50 <vincenz> C is not a low level language. If you're not directly manipulating the registers on the processor, you are not in a low level language (and forget about the "register" keyword, modern compilers just treat register variables in C/C++ as memory that needs to be optimized for speed).
07:58:55 <vincenz> :D
07:59:07 <vincenz> I guess only microcode and assembly are lowlevel the
08:00:10 <sieni> Well, C is a portable assembler (as is C++)
08:00:18 <psnl> "The job of maping C/C++ code to machine code is trivial" <- love this one
08:00:22 <sieni> sorry, "portable"
08:01:02 <sieni> C provides people with the expressiveness of fortran combined with the portability of assembler
08:01:09 <vincenz> :D
08:01:43 <alar> @remember sieni C provides people with the expressiveness of fortran combined with the portability of assembler
08:01:44 <lambdabot> Done.
08:04:14 <Philippa> vincenz: that's a very specific definition of low-level. Some'd say you're working in a low-level language any time you're having to deal with details that aren't relevant to the problem domain
08:05:00 <alar> I'd say you're working at low level when you have to control everything :)
08:05:06 <Philippa> (if you're being nice, the same definition modulo the definition of the domain concepts for the language)
08:05:06 <emertens> I've read this stuff about C being so easy to map to machine code... what are you guys reading
08:05:11 <emertens> I can't remember what it was
08:05:15 <Philippa> that's lowest level, certainly
08:05:31 <Philippa> yeah, C's real easy to map to most machine code so long as you don't care about speed
08:05:43 <Philippa> though there're still architectures that eg don't have a hardware stack
08:05:50 <Philippa> hell, I've got a system like that sitting under my TV
08:07:05 <vincenz> Philippa: I was using sarcasm
08:07:22 <vincenz> Philippa: the first line was a quote from an article
08:07:26 <vincenz> should've made that clearer
08:07:49 <vincenz> so we agree "violently" as audreyt put it the other day
08:10:51 <Philippa> :-) Fair enough. High-level languages that allow serious low-level manipulation are certainly an area of interest of mine
08:11:17 <psnl> emertens: http://it.slashdot.org/article.pl?sid=06/07/18/0146216
08:11:23 <lambdabot> Title: Slashdot | High-level Languages and Speed
08:12:05 <sieni> Are the usage of high level languages and amphetamines somehow correlated?
08:12:35 <alar> sieni: is THC not enough =)
08:16:00 <vincenz> Philippa: haskell?
08:17:30 <vincenz> anyways a) c is easy to map, b) c is hard to map efficiently
08:17:34 <Philippa> haskell as it stands doesn't manage to be high-level enough about the lowest-level stuff
08:17:40 <Philippa> yeah
08:18:10 <Philippa> the amount of time C compilers spend working out which info in a program is actually spurious is... impressive
08:18:33 <vincenz> well it's cause as a programmer you have unlimited capabilities
08:18:45 <vincenz> to do completely insane stuff
08:18:58 <vincenz> int x = (int) pointer;
08:19:04 <vincenz> int y = x/2;
08:19:05 <vincenz> ...
08:19:14 <vincenz> void * pointer2 = (void*) y*2
08:19:24 <vincenz> there goes aliasing analysis
08:19:28 * vincenz waves
08:22:05 <Philippa> that, and there's no way to say you haven't done it
08:28:13 <vincenz> yeah
08:29:58 <emertens> is dons around?
08:30:13 <vincenz> prolly asleep
08:30:15 <vincenz> @localtime dons
08:30:18 <lambdabot> Local time for dons is Fri Jul 21 01:25:10 2006
08:30:29 <emertens> ah
08:30:51 <bortzmeyer> Why does  Data.HashTable.lookup is in the IO monad? I understand why using Maybe (the key may not exist) but why IO, which does not allow pure functional use of lookup?
08:30:56 <vincenz> anyone have some suggestions for nourishing/tasting but quick-fix food to use for during competition?
08:31:07 <vincenz> bortzmeyer: like in all monads, it fails
08:31:16 <Lemmih> bortzmeyer: It uses mutable arrays.
08:31:26 <emertens> bortzmeyer: it does in place updates
08:31:51 <bortzmeyer> So, even if I create it with fromList, without mutating the hash table, I cannot lookup in a pure functional way?
08:32:03 <vincenz> bortzmeyer: yes you can
08:32:09 <vincenz> bortzmeyer: fromJust $ ...lookup
08:32:32 <vincenz> or am I confusing hashtable with map
08:32:43 <Philippa> vincenz: how quick's quick, what facilities will you have access to?
08:32:50 <Lemmih> bortzmeyer: That's right, you can't.
08:32:54 <Philippa> I find pasta works if you've got some pre-made sauces around
08:32:56 <vincenz> Philippa: oven, microwave, fireplactes
08:33:04 <Lemmih> bortzmeyer: You can use Data.Map instead, though.
08:33:11 <Philippa> but I'm a bit careless about letting it boil over, and not too picky about how al dente or otherwise it is
08:33:16 <vincenz> :)
08:33:24 <vincenz> bortzmeyer: use map ?
08:33:39 <Ulfalizer> hmm
08:33:47 <vincenz> Data.Map more specifically
08:33:53 <vincenz> Philippa: yeah but pasta for 4 days...
08:33:53 <bortzmeyer> Lemmih: I assumed that Data.Map was much slower for large tables?
08:34:21 * Ulfalizer needs word lists for different languages in some easy format
08:34:38 <vincenz> Ulfalizer: [[String[[
08:34:41 <vincenz> erm [[ .. ]]
08:34:42 <Philippa> true. Sandwiches also good
08:34:56 <Philippa> toast, in a pinch. Nukable ready meals can provide a lot of variety, though they cost
08:34:57 <vincenz> I'll get some fruits and salads
08:35:04 <Philippa> eww... :-)
08:35:06 <vincenz> nukable ready meals aren't very nutrient
08:35:08 <Ulfalizer> vincenz: yeah, i meant finding them on the 'net :)
08:35:24 <bortzmeyer> vincenz: fromJust takes care of the Maybe, but not of the IO monad
08:35:30 <Philippa> depends what you mean by nutrient, most of them do okay for carbs and protein - it's the other stuff that's problematic
08:35:34 <vincenz> Ulfalizer: what about the file that unix spell uses and then finding different versions?
08:35:35 <emertens> bortzmeyer: HashTable is in IO because it gains speed from being mutable
08:35:39 <Ulfalizer> i looked at aspell format but got tired
08:35:48 <vincenz> Philippa: yeah but just carbs and proteins are prone to make you drowsy
08:35:55 <bortzmeyer> Lemmih:Data.Map.lookup is in a monad, too
08:35:57 <Ulfalizer> i could have a look at ispell as well..
08:36:10 <vincenz> bortzmeyer: yeah I know, I was thinking of Data.Map
08:36:24 <xerox> ?type M.lookup
08:36:25 <vincenz> bortzmeyer: there -is- a solution
08:36:29 <lambdabot> Couldn't find qualified module.
08:36:29 <lambdabot> Maybe you're using the wrong syntax: Data.List.(\\) instead of (Data.List.\\)?
08:36:36 <xerox> ?type Data.Map.lookup
08:36:38 <lambdabot> forall a (m :: * -> *) k. (Ord k, Monad m) => k -> Data.Map.Map k a -> m a
08:36:38 <vincenz> bortzmeyer: if yo're sure that you never alter the table... unsafePerformIO
08:36:48 <Lemmih> bortzmeyer: Yes, and that's OK.
08:37:01 <xerox> ?type (Data.Map.lookup :: Int -> Data.Map.Map Int String -> Maybe String)
08:37:02 <lambdabot> Int -> Data.Map.Map Int String -> Maybe String
08:37:12 <vincenz> bortzmeyer: and what Lemmih said for Data.Map, that monad can for instance be Maybe
08:37:25 <xerox> That's a monad.
08:37:30 <xerox> (-:
08:37:33 <vincenz> Philippa: the other constraint is that it's gotta hold for 4 days
08:37:44 <emertens> @instances Monad
08:37:45 <bortzmeyer> @type Data.Map.lookup
08:37:45 <lambdabot> ((->) r), ArrowMonad a, Cont r, ContT r m, Either e, ErrorT e m, IO, Maybe, RWS r w s, RWST r w s m, Reader r, ReaderT r m, ST s, State s, StateT s m, Writer w, WriterT w m, []
08:37:46 <lambdabot> forall a (m :: * -> *) k. (Ord k, Monad m) => k -> Data.Map.Map k a -> m a
08:38:07 <vincenz> xerox: I wonder what lookup returns in the ((->) r) monad :D
08:38:18 <Philippa> most of the nukables're freezable. But hey, we only do our food shopping once a week here anyway
08:38:19 <xerox> ?type fail
08:38:21 <lambdabot> forall (m :: * -> *) a. (Monad m) => String -> m a
08:38:43 <vincenz> Philippa: I usually cook, don't eat nukables since I left uni
08:38:55 <xerox> > runReader fail 1
08:38:57 <lambdabot>    Expecting a function type, but found `Reader r a'
08:38:57 <lambdabot>    Expected type: R...
08:39:01 <bortzmeyer> OK, disconnecting to try Data.Map
08:39:12 <xerox> runReader (fail "foo") 1
08:39:15 <emertens> running out of memory?
08:39:18 <xerox> > runReader (fail "foo") 1
08:39:19 <lambdabot>  Add a type signature
08:39:26 * vincenz snickers
08:39:29 <xerox> hehe
08:39:32 <xerox> ?type runReader
08:39:34 <lambdabot> forall a r. Reader r a -> r -> a
08:39:40 <xerox> > runReader (fail "foo") 1 :: String
08:39:42 <lambdabot>  Exception: foo
08:39:48 <xerox> That's it.
08:39:52 <vincenz> not very useful
08:39:58 <vincenz> and that's not really part of the -> monad
08:40:06 <xerox> That's more or less why Cale screams when he reads `fain' inside `class Monad'.
08:40:10 <vincenz> yeah
08:40:11 <xerox> Exactly.
08:40:13 <vincenz> was gonna say that
08:40:19 <xerox> fail, even.
08:40:38 <shapr> I wish Sony would sell me a tiny box with two Cell CPUs and two plugs, ethernet and power.
08:41:01 <Philippa> wait a few months?
08:41:01 <xerox> Cale might get you one :-)
08:41:06 <shapr> I'm not really willing to pay $600 for a console for which I won't buy games.
08:41:31 <gds> I thought they lost money on the consoles and made it back on the games...?
08:41:41 <Philippa> they generally do, yes
08:41:42 <gds> So, pity the folk that /do/ play ;)
08:41:43 <emertens> the PS3 comes with 7+1 redundant cell cores, doesn't it?
08:41:57 <Philippa> you're thinking about the SPUs within the Cell
08:42:05 <emertens> ah
08:42:45 <shapr> The +1 core is where they're selling you ones with a broken core because their yield is so low.
08:42:55 <vincenz> shapr: and ghc?
08:43:23 <emertens> that's reassuring, isn't it
08:43:28 <shapr> I could port GHC to the Cell myself. It's this crappy Blu-ray and hypervisor stuff that irritates me.
08:43:31 <vincenz> it's the only way to work
08:43:46 <vincenz> small technology sizes invariably lead to a) lower yield, but more importantly b) higher process variations
08:43:57 <shapr> There's a much more sensible approach actually.
08:44:19 <shapr> They should quilt a pattern of CPU and cache ram onto a die, and then sell the entire die based on how much of it works.
08:44:31 <emertens> lol
08:44:31 <shapr> That's the generalization of the Cell cpu.
08:44:37 <vincenz> shapr: why do you think some pentiums are cheaper/
08:44:44 <vincenz> same fabricatin, process variation led to lower speed
08:44:50 * shapr has written about this in his blog several times.
08:45:50 <shapr> Right now they quilt CPUs onto a die and then cut them apart with a diamond saw. Chips are lost to fabrication errors and to being sawn.
08:46:16 <greenrd> how provisional is the provisional date for AngloHaskell?
08:46:29 <greenrd> I'd like to book my trip ASAP :)
08:46:29 <Philippa> it's based on provisional interview dates
08:46:33 <shapr> My suggestion is to use the hexagon&square pattern you see in floor tiles. Make the bigger tiles memory, and don't saw them apart.
08:47:05 <vincenz> shapr: not really
08:47:18 <shapr> Philippa: Oh, now it's not a provisional date :-)
08:47:24 <shapr> As of this instant.
08:47:35 <greenrd> eh?
08:47:39 <greenrd> that's quite a coincidence
08:50:34 <MarcWeber> I want to parse something like this: start something between end something between shouldn't be able to "eat" the end. So using parsecs between won't work. Is the only way to do this using tokens?
08:52:06 <Philippa> shapr: cool
08:52:19 * shapr boings furiously
08:52:22 * greenrd just deleted "provisional" from the wiki page
08:52:23 <shapr> Yay! It'll be fun!
08:52:23 <greenrd> :)
08:52:26 <shapr> greenrd: good idea!
08:53:02 <shapr> greenrd: Are you showing up?
08:53:05 <xerox> Is there a idiomatic, fast, clean, and optimal way to get out of the (command:args) <- getArgs breakage on 0-arguments list passed to the binary?=
08:53:05 <vincenz> @where anglohaskell
08:53:06 <lambdabot> I know nothing about anglohaskell.
08:53:18 <greenrd> http://haskell.org/haskellwiki/AngloHaskell
08:53:19 <lambdabot> Title: AngloHaskell - HaskellWiki
08:53:21 <greenrd> I hope so
08:53:29 <vincenz> xerox: if length == 0 ..
08:53:30 <xerox> (I'll only accept solutions which have all of that attributes.)
08:53:30 <shapr> @where+ anglohaskell http://haskell.org/haskellwiki/AngloHaskell
08:53:31 <lambdabot> Done.
08:53:41 <xerox> (-:
08:54:06 <xerox> main = do { (cmd:args) <- getArgs; ... }
08:54:22 <xerox> It breaks when getArgs returns [], that is.
08:54:59 <ihope_> We need monadic case stuff.
08:55:04 <vincenz> main = do { args <- getArgs; if length args == 0 then do {print usage} else do { let (cmd:args) = args; ...}}
08:55:09 <ihope_> mcase getArgs of {...}
08:55:35 <xerox> Eeeek.
08:55:49 <xerox> Let's abstract it inside getArgs
08:55:55 <vincenz> or use getopt
08:55:57 <xerox> getArgsFailingWith usage
08:56:05 <ihope_> Um...
08:56:06 <vincenz> use getopt
08:56:24 <xerox> )-:
08:56:58 <vincenz> it's easy as pie
08:57:13 <ihope_> By the way, there's a "null" function that can be used to check if a list is empty or not.
08:57:15 <vincenz> look  at my darcs-apply prog on my website
08:57:18 <ihope_> > null []
08:57:20 <lambdabot>  True
08:58:13 <vincenz> ihope_: liar
08:58:32 <ihope_> Hmm?
08:58:58 <ihope_> > null (undefined:undefined)
08:58:59 <lambdabot>  False
08:59:33 <xerox> vincenz: what site?
08:59:46 <vincenz> @where vincenz
08:59:46 <lambdabot> http://notvincenz.com/
08:59:53 <xerox> o_O
09:00:01 <vincenz> http://www.notvincenz.com/wiki/pmwiki.php/Personal/Software
09:00:04 <lambdabot> Title: Not Vincenz's Wiki | Personal / Software
09:00:11 * vincenz off to get groceries
09:00:24 <vincenz> ack, it doesn't use getopts yt
09:00:27 <vincenz> I thought I had done that
09:00:48 <vincenz> just a sec
09:00:57 <xerox> It doesn't, exactly.
09:01:39 * vincenz installs apache
09:02:21 <bortzmeyer> OK, Data.Map works fine, thanks to all
09:02:35 <greenrd> shapr: maybe we should put what we are interested in - and any suggested conversation topics or even *gasp* talks - on the wiki page?
09:03:13 <vincenz> xerox: ok
09:03:31 <greenrd> I'll be looking for some feedback on my freaky freaky simulating dependent types in haskell work
09:03:56 <vincenz> http://oasis.yi.org/Tester.hs
09:03:59 <vincenz> xerox: look at that
09:03:59 <shapr> greenrd: Sure, yeah.
09:05:57 <greenrd> I don't want to go first though ;)
09:06:09 <shapr> Well, write down what you want to talk about.
09:06:20 <greenrd> ok
09:06:27 <greenrd> I don't want to scare people off though ;)
09:06:35 <shapr> If you have specifics like papers and code, give urls.
09:07:30 <greenrd> yeah, good idea, I need to polish things up a bit first though
09:09:41 <shapr> Because I like to read up on stuff before I talk about it.
09:09:47 <greenrd> sensible
09:09:58 <xerox> > unwords ["hi","there"]
09:09:59 <lambdabot>  "hi there"
09:10:01 * shapr wonders what to talk about.
09:10:11 <psnl> beer?
09:10:14 <shapr> hm
09:10:17 <psnl> types?
09:10:18 <shapr> At AngloHaskell?
09:10:22 <shapr> Ok, I can do that.
09:10:30 <xerox> shapr: points-free contest :D
09:10:31 <shapr> I should probably bring my copy of TaPL...
09:10:41 <shapr> That way I can defend myself if anyone mugs me.
09:10:42 <xerox> Laptops off... 3, 2, 1..
09:10:48 <shapr> They don't call it The Brick Book for nothing, ya know.
09:11:32 <greenrd> psnl: can I "book" some of your floor space please?
09:11:50 <ihope_> Points-free contest, eh?
09:11:59 <int-e> pointless contest :)
09:12:00 <ihope_> Hmm...
09:12:03 <greenrd> hehe
09:12:21 <psnl> greenrd: um, yes
09:12:22 <ihope_> @. pl djinn (a -> b -> c -> d) -> (a -> b -> c) -> (a -> b) -> a -> d
09:12:23 <lambdabot> f = (. ap) . ap . (ap .) . ap
09:12:38 <ihope_> That's quite the expression, that is...
09:12:44 <greenrd> psnl: ta
09:12:54 <ihope_> @. pl djinn (a -> b -> c -> d -> e) -> (a -> b -> c -> d) -> (a -> b -> c) -> (a -> b) -> a -> e
09:12:55 <lambdabot> f = (. ((. ap) . ap . (ap .) . ap)) . ap . (liftM2 ap .) . (. ap) . ap . (ap .) . ap
09:12:59 * edwinb wonders how much floor space psnl has...
09:13:00 <psnl> greenrd: you will need a sleeping bag, + I'll may have to kick you out on sat morning
09:13:05 <psnl> edwinb: 14sq meters
09:13:07 <greenrd> no probs
09:13:27 <xerox> Oh, we've got a precise date?
09:13:42 <xerox> ?type until
09:13:44 <lambdabot> forall a. (a -> Bool) -> (a -> a) -> a -> a
09:13:55 <xerox> ?type when
09:13:56 <lambdabot> forall (m :: * -> *). (Monad m) => Bool -> m () -> m ()
09:14:02 <greenrd> yup
09:14:06 <greenrd> @where AngloHaskell
09:14:06 <lambdabot> http://haskell.org/haskellwiki/AngloHaskell
09:14:21 <psnl> edwinb: if this room was in durham, it wold be a lecture room
09:15:07 <edwinb> psnl: excellent
09:16:49 <shapr> dcoutts: Hey, AngloHaskell needs a designated contact who can give directions from the station to wherever we are. If you're coming, could you do that?
09:17:44 <jgrimes_> has any haskell related gathering ever happened on the east coast of the US that anyone can recall?
09:18:30 <shapr> Maybe an ICFP?
09:19:57 <shapr> jgrimes_: If you have enough nearby people, organize one?
09:21:00 <jgrimes_> shapr: I would if that were the case, but so far as I know it isn't
09:21:22 <xerox> ?type replicateM
09:21:23 <lambdabot> forall a (m :: * -> *). (Monad m) => Int -> m a -> m [a]
09:21:31 <xerox> ?type repeatM
09:21:32 <lambdabot> Not in scope: `repeatM'
09:21:38 <xerox> ?type iterateM
09:21:39 <lambdabot> Not in scope: `iterateM'
09:21:53 <jgrimes_> shapr: of course I may start a HUG (Haskell Users Group?) at my university just for the fun of it. Maybe someone will show up if I do enough advertising.
09:22:28 <Dark-Side> what uni you at?
09:23:05 <jgrimes_> North Carolina State University, in the US.
09:23:30 <Lemmih> Greetings SyntaxNinja.
09:24:19 <ihope_> You know, I could just have a Quantum monad.
09:24:26 <Dark-Side> oh right
09:25:03 <shapr> hiya SyntaxNinja! Coming to AngloHaskell?
09:25:13 <shapr> jgrimes_: Sounds good to me :-)
09:26:28 <shapr> ihope_: Probably already is one, check the ICFP2003 proceedings.
09:26:52 <SyntaxNinja> shapr: in Angolia?
09:26:58 <shapr> Nah, in Cambridge!
09:27:10 <shapr> Dark-Side: Coming to AngloHaskell in Cambridge?
09:27:31 <SyntaxNinja> that would be fun! but alas, unless I get sponsored to go punting in cambridge, I think I'll have to settle for Euro-Haskell-USA (aka ICFP)
09:27:33 <Dark-Side> nope fraid not
09:27:40 <dmhouse> Afternoon all.
09:27:52 <shapr> SyntaxNinja: Maybe next time :-)
09:27:54 <shapr> hiya dmhouse
09:27:59 <dmhouse> Hey shapr.
09:28:02 <shapr> Dark-Side: It's free :-)
09:28:24 <Dark-Side> ah yes but travel isnt :P
09:28:27 <shapr> That's true.
09:29:26 <greenrd> shapr: So uh, what time on friday should I aim to arrive by?
09:30:31 <ihope_> Hmm, but if I go for that, I wouldn't be able to simulate this stuff on an actual quantum computer.
09:31:27 <shapr> SPJ says that MSR will provide some hanging-out space and wifi on Friday during working hours.
09:31:39 <psnl> cool
09:31:50 <psnl> pity I will not be there, but
09:31:56 <shapr> Busy on Friday?
09:32:19 <dmhouse> When is AngloHaskell?
09:32:31 <shapr> 4th and 5th of August.
09:32:37 <psnl> shapr: work
09:32:51 <shapr> Ah
09:32:52 <dmhouse> Aha. I'll be in France! :)
09:32:52 <psnl> I'm only really free friday evening/sat morning
09:32:55 <shapr> dmhouse: awww
09:33:08 <dmhouse> Maybe next year.
09:33:17 <dmhouse> (This should totally be an anual thing.)
09:33:20 <dmhouse> *annual
09:35:17 <shapr> food, bbl
09:35:45 <edwinb> psnl: not around saturday evening?
09:37:42 <psnl> edwinb: aye, alan's birthday
09:38:26 <edwinb> who is alan?
09:39:34 <psnl> alan duffell, my housemate from last year
09:39:43 <psnl> not the year just past, but the one before that
09:42:29 <edwinb> ah, don't know him...
09:44:02 * genneth sees AngloHaskell
09:44:08 * genneth is definitely there
09:44:41 <Lemmih> Yay!
09:46:31 * Philippa is vaguely wishing you could get GHC to evaluate functions that're known to terminate at compile-time
09:46:48 <Philippa> as in, "here's an interpreter for a sub-turing-complete language, here's a program for it, build me the resulting function?"
09:46:54 <Philippa> TH, I guess
09:47:26 <alar> is TH not powerful for this?
09:47:58 <alar> or you want primitive for "compile-evaluation" to be present in TH itself?
09:48:15 <Philippa> TH can be made to do it with some small tweaking of the interpreter, yes
09:48:43 <Philippa> OTOH, the user now has to know they're using TH, and thus you have to separate out the cases where the program's not defined at compile-time
09:48:54 * alar admires the trick with "import Compiler" from Impure Thoughts
09:49:06 <Philippa> you're talking to the author :-)
09:49:11 <alar> yes
09:49:32 <Philippa> but it's not as nifty if you're instead building a parsing combinator lib
09:49:54 <Philippa> hrmm, wonder what happens if you seq (or deepSeq) a function returning a function?
09:49:58 <greenrd> Philippa: So you want partial evaluation in ghc
09:50:11 <Philippa> greenrd: sort of. Strictly speaking, it's just plain evaluation :-)
09:50:17 <alar> I have not imagine the uses of it , but I think there are many, and I'll like the result
09:50:21 <greenrd> It's evaluating part of the program :)
09:50:32 <Philippa> well yes, the return type's a function...
09:54:05 <Philippa> IKWYM :-)
10:01:13 <vincenz> IKWYM?
10:01:24 <alar> I know what you mean
10:01:32 <vincenz> IWKYM !
10:01:58 <sieni> You what know you mean?
10:02:21 <sieni> I mean I mean
10:02:40 <greenrd> I Want to Know What You Mean?
10:03:08 <sieni> I Want to Know Your Mileage?
10:05:02 <vincenz> time to eat something
10:05:13 <greenrd> dcoutts, psnl: Are your offers of floor space for AngloHaskell only for the friday night?
10:11:21 <vincenz> what is "TFA"
10:31:24 <shapr> vincenz: If it's slashdot, it's from RTFA (article)
10:31:29 <vincenz> ah
10:31:47 <vincenz> shapr: for our team "Lazy bottoms" do you recommend "bottombot" or "botbottom"
10:31:55 <shapr> bottombot
10:31:57 <dmhouse> How about botbot?
10:32:06 <shapr> vincenz: great name btw
10:32:08 <dmhouse> According to Wikipedia, bottom is often abbreviated to bot.
10:32:17 <shapr> heh
10:32:21 <vincenz> shapr: thx
10:33:34 <Vincenz> damn botbot is regged
10:34:02 <dmhouse> aww
10:34:10 <_|_> that works
10:34:21 <dmhouse> _|_, cool.
10:34:26 <_|_> doh
10:34:28 <_|_> regged too
10:34:30 * dmhouse wanted to see if irssi would underline the |
10:35:04 <_|_> heh
10:35:05 <_|_> funny
10:35:09 <_|_> can't have the name _|__|_
10:36:04 <ulfdoz> dmhouse: here, iot doesn't.
10:36:19 <dmhouse> ulfdoz: snap.
10:36:55 <vincenz>  Nickname: botbot
10:36:55 <vincenz> 19:36 -NickServ(NickServ@services.)-          Registered: 1 year 13 weeks 5 days (2h 3m 58s) ago
10:36:59 <vincenz> 19:36 -NickServ(NickServ@services.)-           Last Seen: 1 year 11 weeks (2h 43m 13s) ago
10:37:07 <vincenz> 2 weeks... more than a year a go
10:37:07 <SyntaxNinja> xerox: 'sup?
10:38:24 <shapr> vincenz: Go talk to #freenode and ask 'em to drop the nick for you.
10:38:31 <vincenz> shapr: was just doing that
10:38:32 <vincenz> :)
10:38:36 <vincenz> which should I get?
10:38:38 <vincenz> _|_ or botbot
10:38:56 <dmhouse> botbot! :)
10:39:03 <shapr> I think _|_ is very #haskell
10:39:07 <vincenz> I can always release it to the #haskell community after
10:39:10 <shapr> But hey, whatever appeals to you.
10:39:16 <vincenz> yeah I like _|_ too
10:39:19 <dmhouse> Yeah, _|_'s probably better, actually.
10:39:48 <vincenz> it's moderated
10:44:41 <vincenz> seems _|_ will dissapear with an upgrade
10:45:07 <shapr> Why is it moderated?
10:45:18 <vincenz> they do frequence +voice runs apparently
10:45:21 <vincenz> prolly to stop spammers?
10:47:37 <shapr> Oh, I see what you mean.
10:47:46 <shapr> I thought you meant _|_ was moderated.
10:48:06 <vincenz> no, but _|_ will dissapear after upgrade
10:48:12 <shapr> Whyso?
10:48:19 <shapr> Won't allow | in nicks?
10:49:01 <vincenz> 19:47 <nalioth> when the software upgrades go into effect, any nick w/o a actual letter or number in it is gonna disappear, from what i understand
10:49:54 <shapr> Interesting
10:50:20 <vincenz> this is a bug in freenode tho: _|_ #freenode-social Cannot send to channel so cannot change nicks
10:50:28 <shapr> weird
10:50:36 <vincenz> can't change nicks when in moderated chans
10:50:54 <shapr> That's probably not a bug.
10:51:05 <vincenz> done
10:51:08 <shapr> I've seen people send messages to moderated channels by changing their nick to the words.
10:51:11 <vincenz> ah
10:51:15 <vincenz> yeah the thought occured to me
10:51:36 <vincenz> oh well, I'll use _|_ for now, after that I've got oasisbot for #oasis
10:51:43 <vincenz> so no use in allocating more nicks than necessary
10:52:35 <shapr> Yeah, true.
10:53:02 <vincenz>         userinfo        = "BotBot:Lazy Bottoms trusty bottom",
10:53:08 <shapr> :-)
10:56:15 <xerox> People!
10:56:16 <xerox> *GOA> :def pl ghci "pl"
10:56:16 <xerox> *GOA> :pl f x x = f x
10:56:16 <xerox> f = fix const
10:56:16 <xerox> *GOA>
10:56:20 * xerox grins
10:56:30 <xerox> (That's GHCi.)
10:57:52 <Cale> @pl f x = f x x
10:57:53 <lambdabot> f = fix join
10:58:57 <xerox> dons got me hanged in this GHCi On Acid thing
10:59:01 <shapr> GOA?
10:59:03 <vincenz> hmm
10:59:07 <xerox> (-:
10:59:08 <shapr> We want cabal-get!
10:59:10 <vincenz> vincenz@abstractlappy:~/work/ext/lambdabot$ ./Setup.hs configure
10:59:10 <vincenz> *** Exception: Line 19: Unknown field 'hs-source-dirs'
10:59:14 <xerox> We do.
10:59:23 <shapr> xerox: I especially want it for Hope.
10:59:23 <xerox> I'll push it and go to work on cabal-get.
10:59:27 <shapr> Yay!
11:00:01 <xerox> Let me play with GOA a little more, little little more, so that you can use it. It's fun to have lambdabot IN GHci.
11:00:16 <xerox> (And useful, think @index, @hoogle, ...)
11:00:29 <shapr> Yeah, but I want cabal-get for Hope!
11:00:40 <shapr> It's a pain in the butt to manually install all the packages.
11:00:58 <shapr> Anyway, I have my own code I should be writing :-)
11:01:07 * xerox beats himself with a heavy lambda
11:02:58 <vincenz> @tell dons When doing "Setup configure --bindir" for lambdabot I get this: *** Exception: Line 19: Unknown field 'hs-source-dirs'
11:02:59 <lambdabot> Consider it noted.
11:09:02 <shapr> hiya danb
11:09:15 <danb> hey shapr
11:09:45 <danb> lambdabot runs djinni, right?
11:10:42 <danb> *djinn
11:10:44 <Lemmih> vincenz: Change hs-source-dirs to hs-source-dir.
11:10:59 <vincenz> thx
11:11:00 <Lemmih> vincenz: Or upgrade Cabal.
11:11:31 <danb> @djinn a -> a
11:11:31 <lambdabot> f a = a
11:11:51 <danb> @djinn (a, Either b c) -> (Either a b, Either a c)
11:11:52 <lambdabot> f (a, b) =
11:11:52 <lambdabot>   case b of
11:11:52 <lambdabot>   Left c -> (Right c, Left a)
11:11:52 <lambdabot>   Right d -> (Left a, Right d)
11:12:07 <danb> @pointfree \a -> a
11:12:07 <lambdabot> Unknown command, try @list
11:12:11 <danb> @list
11:12:11 <lambdabot> list [module|command]. Where modules is one of:
11:12:12 <lambdabot> babel base compose dice dict djinn drhylo dummy elite eval fact fresh haddock help hoogle instances karma lambda localtime log more pl poll pretty quote search seen slap spell state system tell todo
11:12:12 <lambdabot> topic type unlambda url version vixen where
11:12:50 <danb> @lambda \a -> a
11:12:50 <lambdabot> <<Plugin.Lambda.LMEngine.EvalMonad Dynamic -> Plugin.Lambda.LMEngine.EvalMonad Dynamic>>
11:13:02 <danb> o_0
11:13:17 <danb> anyone know how i might convert to pointfree style?
11:13:32 <SamB> @pl code with a point to it
11:13:33 <danb> @pi \a -> a
11:13:33 <lambdabot> code with a point to it
11:13:33 <lambdabot> id
11:13:52 <danb> SamB: thx, just found it on the wiki too ;)
11:14:13 <danb> @pl \a -> a
11:14:14 <lambdabot> id
11:14:16 <SamB> btw, it is spelled P L, not P I
11:14:21 <danb> @pi \a -> a
11:14:22 <lambdabot> id
11:14:24 <SamB> oh, yeah, you got it
11:14:30 <danb> yeah, but both seem to work ;)
11:14:39 <danb> (although the first was an accident)
11:14:39 <SamB> spelling correction, yeah...
11:14:43 <danb> ah
11:15:13 <danb> @pl \(a,s) -> case s of Left b -> (a,b); Right c -> (a,c)
11:15:13 <lambdabot> (line 1, column 28):
11:15:14 <lambdabot> unexpected ">" or "-"
11:15:14 <lambdabot> expecting variable, "(", operator or end of input
11:15:19 <emertens> really, it should be pf tho, right?
11:15:37 <danb> @pl \(a,s) -> case s of (Left b) -> (a,b); (Right c) -> (a,c)
11:15:37 <lambdabot> (line 1, column 30):
11:15:38 <lambdabot> unexpected ">" or "-"
11:15:38 <lambdabot> expecting variable, "(", operator or end of input
11:15:53 <vincenz> @tell dons Ok, after following Lemmih's guideleins of changing it to hs-source-dir, I now get issues as it can't find BotPP, I checked and it should have an extra "scripts" in the path in lambdabot.cabal.  After changing this, it still says it can't find it tho
11:15:53 <lambdabot> Consider it noted.
11:16:33 <danb> hmm, ghci likes it, but lambdabot doesn't...
11:16:48 <emertens> @pl (\(a,s) -> case s of { (Left b) -> (a,b); (Right c) -> (a,c) })
11:16:48 <lambdabot> (line 1, column 22):
11:16:49 <emertens> ?
11:16:49 <lambdabot> unexpected "{"
11:16:49 <lambdabot> expecting variable, "(", operator or ")"
11:17:12 <emertens> either way, that's not really a great candidate for point-free style... is it?
11:17:50 <danb> emertens: no, but Carl A. Gunter renders it in a CCC and i'm trying to make sense of it ;)
11:18:14 <danb> @pl uncurry $ \a -> either (Left . (,) a) (Right . (,) a)
11:18:15 <lambdabot> uncurry (ap (either . (Left .) . (,)) ((Right .) . (,)))
11:18:37 <danb> (my previous versions lacked Left and Right anyway...)
11:18:51 <danb> @type ap
11:18:53 <lambdabot> forall b (m :: * -> *) a. (Monad m) => m (a -> b) -> m a -> m b
11:19:36 <danb> wow... i think it's using the (Either a) monad
11:19:55 <emertens> Left and Right are the two contructors of Either
11:20:47 <emertens> @pl \x -> either ((,) x) ((,) x)
11:20:48 <lambdabot> liftM2 either (,) (,)
11:21:28 <danb> @type uncurry $ uncurry either . ((Left .) . (,) &&& ((Right .) . (,))
11:21:29 <lambdabot> parse error (possibly incorrect indentation)
11:21:54 <danb> @type uncurry $ uncurry either . ((Left .) . (,) &&& (Right .) . (,))
11:21:55 <lambdabot> forall a a1 a2. (a, Either a1 a2) -> Either (a, a1) (a, a2)
11:22:01 <danb> hah
11:22:15 <emertens> danb, are you trying to get the values out of the Either, or into one?
11:22:18 <danb> and neither version is comprehensible ;)
11:23:00 <danb> emertens: both. i'm trying to make a point-free value of type (a * (b + c) -> (a * b) + (a * c))
11:23:16 <ihope_> @. pl djinn (a, Either a1 a2) -> Either (a, a1) (a, a2)
11:23:17 <lambdabot> (line 3, column 12):
11:23:17 <lambdabot> unexpected ">" or "-"
11:23:17 <lambdabot> expecting variable, "(", operator or end of input
11:23:19 <danb> @pl uncurry $ uncurry either . ((Left .) . (,) &&& (Right .) . (,))
11:23:20 <lambdabot> (line 1, column 44):
11:23:20 <lambdabot> unexpected "&"
11:23:20 <lambdabot> expecting variable, "(", ".", space, operator or ")"
11:23:21 <lambdabot> ambiguous use of a left associative operator
11:23:39 <ihope_> @djinn (a, Either a1 a2) -> Either (a, a1) (a, a2)
11:23:39 <lambdabot> f (a, b) =
11:23:40 <lambdabot>   case b of
11:23:40 <lambdabot>   Left c -> Left (a, c)
11:23:40 <lambdabot>   Right d -> Right (a, d)
11:24:01 <ihope_> @pl f (a, b) = case b of Left c -> Left (a, c); Right d -> Right (a, d)
11:24:02 <lambdabot> (line 1, column 29):
11:24:02 <lambdabot> unexpected ">" or "-"
11:24:02 <lambdabot> expecting variable, "(", operator or end of input
11:24:04 <danb> does lambdabot support command composition? ;)
11:24:20 <emertens> \x -> either ((,) x) ((,) x)    does what your original code does..
11:24:20 <danb> @pl . @djinn ...
11:24:22 <lambdabot> (line 1, column 1):
11:24:22 <lambdabot> unexpected "."
11:24:22 <lambdabot> expecting white space, natural, identifier, lambda abstraction or expression
11:24:30 <jer> @help compose
11:24:30 <lambdabot> . <cmd1> <cmd2> [args].
11:24:31 <lambdabot> . [or compose] is the composition of two plugins
11:24:31 <lambdabot>  The following semantics are used: . f g xs == g xs >>= f
11:24:36 <danb> emertens: right, but it's not point-free
11:24:44 <danb> holy crap!
11:24:50 <ihope_> @p pl djinn ...
11:24:50 <lambdabot> Maybe you meant: palomer part paste pl pl-resume pointless poll-add poll-close poll-list poll-remove poll-result poll-show pretty print-logs print-notices purge-notices . v
11:24:54 <ihope_> @. pl djinn ...
11:24:54 <lambdabot> Cannot parse command
11:25:14 <palomer> you meant palomer
11:25:14 <danb> @compose pl djinn (a, Either b c) -> Either (a,b) (a,c)
11:25:15 <lambdabot> (line 3, column 12):
11:25:15 <lambdabot> unexpected ">" or "-"
11:25:15 <lambdabot> expecting variable, "(", operator or end of input
11:25:38 <emertens> @t liftM2 either (,) (,)
11:25:38 <lambdabot> Maybe you meant: tell time todo todo-add todo-delete topic-cons topic-init topic-null topic-snoc topic-tail topic-tell type . v
11:25:46 <emertens> @type liftM2 either (,) (,)
11:25:48 <lambdabot> forall b a. a -> Either b b -> (a, b)
11:25:48 <danb> @compose @pl @djinn (a, Either b c) -> Either (a,b) (a,c)
11:25:49 <lambdabot> compose module failed: IRCRaised Parse error: "@pl"
11:26:15 <emertens> danb, the @ just means "for lambdabot" it's not in the actual command name
11:26:17 <danb> @. pl djinn (a, Either b c) -> Either (a,b) (a,c)
11:26:18 <lambdabot> (line 3, column 12):
11:26:18 <lambdabot> unexpected ">" or "-"
11:26:18 <lambdabot> expecting variable, "(", operator or end of input
11:26:27 <danb> k
11:26:34 <dmhouse> @djinn (a, Either b c) -> Either (a, b) (a, c)
11:26:35 <lambdabot> f (a, b) =
11:26:35 <lambdabot>   case b of
11:26:35 <lambdabot>   Left c -> Left (a, c)
11:26:35 <lambdabot>   Right d -> Right (a, d)
11:26:57 <dmhouse> I'm not sure pl likes cases.
11:27:05 <danb> yeah
11:27:11 <danb> right. that's the problem i had ealier
11:27:14 <danb> same parse error
11:27:15 <dmhouse> @pl f (a, b) = case b of Left c -> Left (a, c); Right d -> Right (a, d)
11:27:15 <lambdabot> (line 1, column 29):
11:27:16 <lambdabot> unexpected ">" or "-"
11:27:16 <lambdabot> expecting variable, "(", operator or end of input
11:27:36 <ihope_> Hmm...
11:27:46 <emertens> @pl \(a,b) -> (a, either id id b)
11:27:46 <lambdabot> second (either id id)
11:28:02 <ihope_> @type \f x -> case x of Left y -> Left y; Right y -> f y
11:28:03 <lambdabot> forall a b b1. (b -> Either a b1) -> Either a b -> Either a b1
11:28:07 <emertens> > (second (either id id)) 1 (Left 2)
11:28:08 <lambdabot>    The function `(second (either id id))' is applied to two arguments,
11:28:09 <lambdabot>   ...
11:28:22 <emertens> > (second (either id id)) (1, (Left 2))
11:28:24 <lambdabot>  (1,2)
11:28:31 <emertens> hurry beer!
11:29:00 <emertens> @type second
11:29:01 <lambdabot> forall (a :: * -> * -> *) c d b. (Arrow a) => a b c -> a (d, b) (d, c)
11:29:10 <emertens> @where second
11:29:10 <lambdabot> I know nothing about second.
11:29:15 <ihope_> @hoogle second
11:29:17 <lambdabot> Control.Arrow.second :: Arrow a => a b c -> a (d, b) (d, c)
11:29:27 <dmhouse> In terms of functions (which instantiate Arrow):
11:29:42 <dmhouse> second :: (b -> c) -> (d, b) -> (d, c)
11:30:23 <emertens> danb: there you go then: Control.Arrow.second (either id id)
11:30:40 <dmhouse> (Applies the function to the second element of the tuple.)
11:30:45 <dmhouse> > second (+2) ('a', 4)
11:30:46 <lambdabot>  ('a',6)
11:31:11 <danb> hmm
11:31:16 <ihope_> @type either id id
11:31:17 <lambdabot> forall b. Either b b -> b
11:31:26 <danb> @type second (either id id)
11:31:28 <lambdabot> forall b d. (d, Either b b) -> (d, b)
11:31:45 <danb> not quite...
11:32:06 <emertens> What do you want it to do then?
11:32:21 <dmhouse> What's the type again?
11:32:36 <dmhouse> (a, Either b c) -> Either (a, b) (a, c), perhaps?
11:32:39 <danb> i want a point-free value with type (a, Either b c) -> (Either a b, Either a c)
11:32:46 <danb> yeah
11:32:50 <dmhouse> Oh. That's different to what I pasted.
11:32:56 <danb> and i have two already, btw
11:33:04 <danb> dmhouse: oh, yes...
11:33:14 <danb> dmhouse: isomorphic, though ;)
11:33:23 <dmhouse> True.
11:33:40 <danb> Either (a,b) (a,c) ~ (Either a b, Either a c)
11:34:26 <dmhouse> Well,
11:34:44 <danb> crap
11:34:54 <ihope_> Um, one has two "Either" and the other just has one.
11:35:05 <danb> i want a point-free value with type (a, Either b c) -> Either (a,b) (a,c)
11:35:14 <danb> dmhouse: you were right, i was wrong
11:35:24 <dmhouse> Right.
11:35:50 <dmhouse> f (x, Left y) = Left (x, y); f (x, Right y) = Right (x, y) -- correct? Now to points-free-ify?
11:35:54 <danb> "distributive law isomorphism"
11:36:06 <danb> dmhouse: yes
11:36:34 <ihope_> (a*b) + (a*c) = (a+b) * (a+c)?
11:36:48 <danb> dmhouse: one version i have already is: uncurry $ uncurry either . ((Left .) . (,) &&& (Right .) . (,))
11:36:58 <dmhouse> Heh, right.
11:37:09 <dmhouse> I forgot about (&&&)! That should make things easier.
11:37:16 <emertens> @type (&&&)
11:37:18 <lambdabot> forall (a :: * -> * -> *) c' c b. (Arrow a) => a b c -> a b c' -> a b (c, c')
11:37:21 <danb> ihope_: a * (b + c) = (a*b) + (a*c)
11:37:32 <dmhouse> Oh. I meant (***).
11:37:41 <dmhouse> @type (***)
11:37:43 <lambdabot> forall (a :: * -> * -> *) c' c b' b. (Arrow a) => a b c -> a b' c' -> a (b, b') (c, c')
11:38:05 <ihope_> danb: but that's not Either (a,b) (a,c) and (Either a b, Either a c); it's (a, Either b c) -> Either (a, b) (a, c).
11:38:41 <danb> ihope_: right. see my correction above near "dmhouse: you were right, i was wrong"
11:39:04 <danb> ihope_: i confused myself for a while
11:40:30 * _I_ relaxes and notes that Mac OS 9 must die... along with the 'academics' that insist on using it and complicating my life.
11:40:43 <edwardk> whoa
11:41:23 <edwardk> not sure where that nick came from
11:42:11 <dmhouse> Ah, I have an idea.
11:42:14 <emertens> @pl (\ (a,b) -> either (Left . ((,)a)) (Right . ((,)a)) b)
11:42:14 <lambdabot> uncurry (ap (either . (Left .) . (,)) ((Right .) . (,)))
11:42:19 <dmhouse> That was m idea.
11:42:22 <dmhouse> *my.
11:42:27 <dylan> for a minute, edwardk, I thought you were bottom...
11:42:45 <edwardk> heh
11:42:56 <edwardk> i think it was my fiancee's idea of a joke
11:43:04 <emertens> > (uncurry (ap (either . (Left .) . (,)) ((Right .) . (,)))) (1,Left 2)
11:43:05 <lambdabot>  Add a type signature
11:43:16 <ihope_> > (3,) 2
11:43:16 <lambdabot>  Parse error
11:43:19 <ihope_> Pah.
11:43:29 <ihope_> , is an infix function, 'kay? :-P
11:43:30 <emertens> ((,)3)2
11:43:31 <edwardk> like i said, i'd rather be a bottom than one day suddenly stop computing ;)
11:43:36 <emertens> >((,)3)2
11:43:47 <emertens> > ((,)3)2
11:43:49 <lambdabot>  (3,2)
11:43:49 <emertens> ?
11:44:09 <emertens> > (uncurry (ap (either . (Left .) . (,)) ((Right .) . (,)))) (1,Left 2) :: Either (Int, Int)
11:44:10 <lambdabot>    `Either (Int, Int)' is not applied to enough type arguments
11:44:10 <lambdabot>   Expected...
11:44:22 <emertens> > (uncurry (ap (either . (Left .) . (,)) ((Right .) . (,)))) (1,Left 2) :: Either (Int, Int) (Int,Int)
11:44:24 <lambdabot>  Left (1,2)
11:44:37 <emertens> danb: hurry beer!
11:44:46 <danb> emertens: huh?
11:44:55 <emertens> that one works at least
11:45:01 <danb> @type (,,,,,,,,,,,,)
11:45:03 <lambdabot> forall m l k j i h g f e d c b a. -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> (a, b, c, d, e, f, g, h, i, j, k, l, m)
11:45:05 <danb> i like those
11:45:38 <edwardk> danb: they are still buggy
11:45:49 <danb> oh?
11:45:53 * dmhouse shudders to think about how GHCi's pretty printer would output that type/
11:45:58 <edwardk> danb: note the lack of a before ->
11:46:09 <edwardk> lambdabot breaks after 4-5 of them
11:46:12 <danb> ah
11:46:19 <danb> hmm
11:46:22 <bolrod> yes
11:46:34 <bolrod> and after 650 something.. it doesn't even give a type anymore
11:46:39 <danb> haha
11:46:39 <edwardk> hahahaha
11:46:56 <bolrod> there is a max-tuple length ;)
11:46:56 <ihope_> dmhouse: every parameter on a separate line, of course.
11:47:03 <dmhouse> ihope_: precisely.
11:47:19 <edwardk> there is?
11:47:25 * edwardk starts refactoring code frantically
11:47:27 <edwardk> =)
11:47:29 <vincenz> something like
11:47:36 <vincenz> @type (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,)
11:47:38 <lambdabot> forall t81 t80 t79 t78 t77 t76 t75 t74 t73 t72 t71 t70 t69 t68 t67 t66 t65 t64 t63 t62 t61 t60 t59 t58 t57 t56 t55 t54 t53 t52 t51 t50 t49 t48 t47 t46 t45 t44 t43 t42 t41 t40 t39 t38 t37 t36 t35 t34
11:47:38 <lambdabot> t33 t32 t31 t30 t29 t28 z y x w v u t s r q p o n m l k j i h g f e d c b a. -> b -> c -> d -> e -> f -> g -> h -> i -> j -> k -> l -> m -> n -> o -> p -> q -> r -> s -> t -> u -> v -> w -> x -> y ->
11:47:38 <lambdabot>  z -> t28 -> t29 -> t30 -> t31 -> t32 -> t33 -> t34 -> t35 -> t36 -> t37 -> t38 -> t39 -> t40 -> t41 -> t42 -> t43 -> t44 -> t45 -> t46 -> t47 -> t48 -> t49 -> t50 -> t51 -> t52 -> t53 -> t54 -> t55
11:47:38 <lambdabot> -> t56 -> t57 -> t58 -> t59 -> t60 -> t61 -> t62 -> t63 -> t64 -> t65 -> t66 -> t67 -> t68 -> t69 -> t70 -> t71 -> t72 -> t73 -> t74 -> t75 -> t76 -> t77 -> t78 -> t79 -> t80 -> t81 -> (a, b, c, d,
11:47:40 <lambdabot> e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t50, t51, t52, t53,
11:47:43 <lambdabot> t54, t55, t56, t57, t58, t59, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t70, t71, t72, t73, t74, t75, t76, t77, t78, t79, t80, t81)
11:47:46 <bolrod> hmm...
11:47:48 <bolrod> weird
11:47:52 <ihope_> Nope, that wasn't it :-P
11:47:54 <vincenz> at least it's fixed
11:47:59 <bolrod> why does it continue with t28...
11:47:59 <edwardk> you only hit 107 =)
11:47:59 <greenrd> there's the a bug again
11:48:00 <vincenz> it used to do 1/line
11:48:29 <vincenz> bolrod: cause we have 27 letters in our alphabet :D
11:48:31 <ihope_> a = t2, then?
11:48:38 <bolrod> > length ['a'..'z']
11:48:39 <lambdabot>  26
11:48:42 <bolrod> I See
11:49:04 <vincenz> they should use my code for variable generation:
11:49:07 <bolrod> what's 27?
11:49:15 <ihope_> > succ 'z'
11:49:16 <lambdabot>  '{'
11:49:20 <ihope_> > pred 'a'
11:49:22 <lambdabot>  '`'
11:49:26 <ihope_> Choose one.
11:49:28 <bolrod> so.. where is that variable ?
11:49:36 <bolrod> > let { = 5 in {
11:49:37 <lambdabot>  Parse error
11:49:41 <vincenz> > let mkVars i o = let vars = i ++ (map concat . sequence $ [vars, o]) in vars in mkVars (map return ['a'..'z']) (map return ['0',,'9'])
11:49:42 <lambdabot>  Parse error
11:49:53 <edwardk> maybe one type is taken up by that of the tuple?
11:50:07 <edwardk> so the universe isn't empty to start?
11:50:08 <vincenz> > let mkVars i o = let vars = i ++ (map concat . sequence $ [vars, o]) in vars in mkVars (map return ['a'..'z']) (map return ['0'..'9'])
11:50:10 <lambdabot>  ["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s"...
11:50:20 <vincenz> > drop 25 $ let mkVars i o = let vars = i ++ (map concat . sequence $ [vars, o]) in vars in mkVars (map return ['a'..'z']) (map return ['0'..'9'])
11:50:21 <lambdabot>  ["z","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","b0","b1","b2","b3","...
11:50:23 <ihope_> > let let = let in let
11:50:23 <lambdabot>  Parse error
11:50:39 <vincenz> > drop 285 $ let mkVars i o = let vars = i ++ (map concat . sequence $ [vars, o]) in vars in mkVars (map return ['a'..'z']) (map return ['0'..'9'])
11:50:41 <lambdabot>  ["z9","a00","a01","a02","a03","a04","a05","a06","a07","a08","a09","a10","a11...
11:50:44 <dmhouse> > let in 4
11:50:45 <lambdabot>  4
11:51:05 <vincenz> > drop 2885 $ let mkVars i o = let vars = i ++ (map concat . sequence $ [vars, o]) in vars in mkVars (map return ['a'..'z']) (map return ['0'..'9'])
11:51:07 <lambdabot>  ["z99","a000","a001","a002","a003","a004","a005","a006","a007","a008","a009"...
11:51:16 <edwardk> cute
11:51:24 <vincenz> it's great
11:51:27 <ihope_> > let mkVars i o = let vars = i ++ (map concat . sequence $ [vars, o]) in vars in mkVars (map return ['a'..'z']) (map return ['0'..'9'])
11:51:28 <lambdabot>  ["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s"...
11:51:53 <vincenz> how about natural numbers :D
11:51:53 <bolrod> it's ok
11:52:01 <vincenz> > drop 2885 $ let mkVars i o = let vars = i ++ (map concat . sequence $ [vars, o]) in vars in mkVars (map return ['1'..'9']) (map return ['0'..'9'])
11:52:02 <lambdabot>  ["2886","2887","2888","2889","2890","2891","2892","2893","2894","2895","2896...
11:52:09 <vincenz> >  let mkVars i o = let vars = i ++ (map concat . sequence $ [vars, o]) in vars in mkVars (map return ['1'..'9']) (map return ['0'..'9'])
11:52:10 <lambdabot>  ["1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17"...
11:52:22 <vincenz> I typically use it like this
11:52:33 <vincenz> ['a'..'z'] and just plain ["'"]
11:52:37 <vincenz> to get more and more '
11:52:44 * edwardk nods.
11:53:01 <edwardk> i have a slightly more painful one for my javascript atomizer
11:53:08 <edwardk> but thenn its written in javascript =)
11:53:41 <danb> > drop 2885 $ let mkVars i o = let vars = i ++ (map concat . sequence $ [vars, o]) in vars in mkVars (map return ['a'..'z']) (map return ['\''])
11:53:42 <lambdabot>  ["z'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''...
11:53:58 <vincenz> danb no need to do map return
11:54:00 <vincenz> just use the string
11:54:12 <vincenz> the reason I use map return is cause you can't do ["a".."z"]
11:54:26 <danb> right
11:54:31 <vincenz> list monad
11:55:30 <dmhouse> Anyone else's Channel 5 reception got really rubbish lately? (UK)
11:55:31 <danb> alright, back to work
11:55:48 * ihope_ feels a sudden need to make a list of prime numbers
11:56:10 <bolrod> go ahead
11:56:13 <vincenz> dmhouse: you mean politics?
11:56:29 <dmhouse> vincenz: No, I mean TV.
11:56:40 <vincenz> yeah but you said rubbish on tv
11:56:52 <ihope_> What's this? A C file?
11:57:05 <dmhouse> vincenz: I mean the reception. The signal quality.
11:57:16 <vincenz> dmhouse: yeah, low signal/noise ration, politics
11:57:43 <dmhouse> vincenz: as it turns out, I _am_ watching some politics ;)
11:57:56 <vincenz> :)
11:58:04 <vincenz> then it's a good thing you're getting saved by static
11:58:09 <dmhouse> But it's not on channel 5.
11:58:14 * ihope_ shrugs and compiles it
11:59:06 <dmhouse> Yay! Film Four is on Freeview from Sunday!
11:59:54 <vincenz> blegh
12:03:42 <greenrd> What, permanently?
12:03:51 <dmhouse> I believe so.
12:04:32 * ihope_ wonders *how* to compile it
12:05:07 <edwardk> a c file?
12:05:09 <edwardk> =)
12:05:18 <edwardk> you know you've been doing haskell too long when...
12:05:20 <vincenz> ihope_: gcc
12:05:48 <ihope_> Hmm, apparently the binary got misplaced.
12:06:48 <ihope_> Okay, it says "2 3 5 7 11 13 17 19 23 29 ..." and then that it found 3 prime?
12:08:31 <edwardk> ihope: again with you know you've been programming in haskell too long.. ihope. there are these things that people with weaker type systems get.. they are called 'bugs' =)
12:09:06 <vincenz> edwardk: I thought those were the little things that flit in front of my screen
12:09:17 <edwardk> those too
12:10:07 <edwardk> all because grace murray harper found one trapped between a couple of relays... people have been blaming their logic problems on insects this entire time ;)
12:10:14 <ihope> Oops, now it's generating negative primes.
12:10:19 <shapr> Yay, musasabi is alive. He's been really sick for awhile.
12:10:28 * edwardk checks musasabi's pulse.
12:10:37 <edwardk> i won't believe it until he speaks
12:10:39 <ihope> That's what happens when you use C :-)
12:10:49 * vincenz applies monads to musasabi's chest
12:10:51 <jer> erider, no, they're called "errors"; naming htem "bugs" takes the onus off the programmer
12:11:14 <edwardk> considering i showed up here about 3 weeks ago trying to ask him a question =)
12:11:21 <ihope> I don't think whoever was the first to call it a bug.
12:11:29 <vincenz> shapr: soon people will say that about me if I keep sleeping < 3 hours per night
12:11:33 <edwardk> actually grace murray harper coined the term
12:11:44 <shapr> Admiral Cobol
12:11:55 <vincenz> in the dining room with the chandelier?
12:12:08 <edwardk> from the physical taping of the bug in her log book.
12:12:19 <erider> ??
12:12:20 <edwardk> went off to become an admiral, etc.
12:12:25 <ihope> Oh, apparently her name was Hopper.
12:12:29 <edwardk> woops
12:12:32 <edwardk> my bad =)
12:12:45 <erider> jer ??
12:12:46 <shapr> right, hopper
12:12:53 <edwardk> one of those names =)
12:12:58 <shapr> http://en.wikipedia.org/wiki/Grace_Hopper
12:13:05 <ihope> "It was while she was working on Mark II that she discovered a moth in a relay â a bug in the computer. . . . Erroneously, some have cited this incident as the genesis of the term bug, but the term was already in wide use."
12:13:07 <shapr> She wrote the first compiler.
12:13:08 <jer> erider, ...
12:13:09 <edwardk> didn't check my wikipedia or anything before rattling it off the cuff
12:13:24 <jer> erider, oops, sorry, nick completion error
12:13:41 <erider> ok no worries :)
12:13:47 <edwardk> shapr: you ever get a chance to look further at the tornado code stuff i sent off the other day?
12:14:40 <ihope> And it seems that the word "bug" was used this way (more-or-less) back in Edison's time.
12:15:08 <edwardk> interesting
12:15:24 <edwardk> another error i can cite in the text book, whee
12:18:16 * vincenz is off to get sloshed
12:18:20 <vincenz> wish me a good drunkship
12:18:22 <SamB> well, its not just your textbook
12:18:32 <dmhouse> Hi ndm.
12:18:38 <jgrimes_> how do you define a recursive anonymous function?
12:18:39 <ndm> hi dmhouse
12:18:45 <dmhouse> jgrimes_: With fix.
12:18:51 <SamB> jgrimes_: with a combinator!
12:18:52 <dmhouse> jgrimes_: Or not at all, more likely.
12:18:54 <SamB> such as foldr
12:18:56 <ndm> jgrimes_, with let and lack of anonomousness
12:19:08 <vincenz> ndm: anonoms?
12:19:18 <SamB> anonymity is overrated, yeah ;-)
12:19:24 <edwardk> samb: well, the 101 sections here at eastern teach it as part of the course and i'm pretty sure there is a test question on it. going to get that eradicated.
12:19:29 <ndm> @spell anonomusness
12:19:30 <lambdabot> anonymousness anonymousness's enormousness
12:19:32 <ihope> > fix (\f x -> if x == 0 then 1 else x * f (x-1)) 4
12:19:33 <lambdabot>  24
12:19:37 <ihope> ndm: anonymity?
12:19:57 <vincenz> anomality
12:20:14 <dmhouse> anonymification.
12:20:41 <SamB> vincenz: you, sir, are an anomaly
12:20:44 <jgrimes_> hm, ok.
12:20:55 <vincenz> SamB: I sir, am getting drunk
12:20:58 <vincenz> soon
12:21:15 * ndm has a beer at my computer right now
12:21:22 <vincenz> ndm: well I'm going out for drinks :)
12:21:23 <ihope> @google anonymity
12:21:26 <lambdabot> http://en.wikipedia.org/wiki/Anonymity
12:21:36 <vincenz> ndm: btw, our teamname is "Lazy bottoms" :)
12:21:37 <ihope> Wikipedia strikes again!
12:21:46 <edwardk> vincenz: nice
12:21:56 <vincenz> http://www.notvincenz.com/wiki/pmwiki.php/Icfp/Main
12:21:58 <lambdabot> Title: Not Vincenz's Wiki | Icfp / Main
12:22:08 <SamB> hmm, I've heard of lazy butts before, but I dunno about lazy bottoms...
12:22:15 <vincenz> _|_
12:22:28 <vincenz> "undefined" is a lazy bottom
12:22:40 <ndm> vinci still need a team, i think
12:22:45 <sieni> lazy bottom <3
12:22:53 <vincenz> ndm: well there are people in #oasis forming a second team
12:23:00 <vincenz> ndm: lemmih, adept, jyp and myself decided to stick to 4
12:23:01 <ndm> anyone i know?
12:23:02 <jgrimes_> > fix id::Int
12:23:03 <lambdabot>  Exception: <<loop>>
12:23:24 <vincenz> ndm: psixi, alar, akshaal maybe, marc_vw, maybe lightstep might show
12:23:43 <vincenz> ndm: just click on team to see all the possible members that might still need a home
12:23:43 <ndm> I might just not do this one, or might force my office mates into it
12:24:01 <vincenz> basically all the people lost to bitrot
12:24:16 <vincenz> ndm: do they know haskell?
12:24:48 <ndm> vincenz: yes, very very well
12:24:58 <vincenz> I wish my office mates knew haksell
12:25:02 <vincenz> the closest they get is C
12:25:03 <ndm> in fact all have written a haskell compiler in haskell
12:25:17 <vincenz> lucky bastard :)
12:25:29 <ndm> but none of them seem to want to do it
12:25:54 <vincenz> anyways
12:26:01 * vincenz >>= town =<< liquor
12:26:52 <ndm> so, how would people go about eliminating crashes from Haskell?
12:26:59 <ndm> i.e. removing things like head []
12:27:00 <sieni> so you are getting yourself and liquor to town?
12:27:15 <ndm> sieni: once there he can invoke a union operator on him and the alcohol
12:27:21 <vincenz> yeah
12:27:26 <vincenz> join liquor vincenz
12:27:47 <vincenz> sieni: learn your operator precedence :P
12:28:54 <shapr> edwardk: No, I haven't had a chance to read that yet. Speaking of codes, have you seen the fractal compression that Nokia is using for their binary images?
12:29:34 <edwardk> i've seen various fractal compression techniques, but not that one in particular
12:30:36 <edwardk> i did a fair bit of wavelet stuff back in the day, but the fractal stuff always struck me as kinda hand-wavy, might have gotten more rigorous since i last looked
12:30:46 <jgrimes_> dmhouse: how do you use fix? I keep getting: exception <<loop>>
12:30:52 <shapr> edwardk: http://www.linuxjournal.com/article/4367
12:30:53 <lambdabot> Title: FIASCO--An Open-Source Fractal Image and Sequence Codec | Linux Journal
12:30:56 <dmhouse> jgrimes_: With great dificulty.
12:31:01 <dmhouse> jgrimes_: Really, use a let. Please.
12:31:03 <jgrimes_> dmhouse: apparently =/
12:31:26 <dmhouse> fix f = f (fix f)
12:31:35 <dmhouse> I.e. f (f (f (f (...))).
12:32:27 <jgrimes_> yeah... sounds fun though.
12:33:06 <shapr> edwardk: Nokia is using this for their firmware images.
12:33:08 <edwardk> heh that article is typical of the hand-wavy problem.. a handful of details on jpeg that everyone knows and then command line parameters for the other algorithm coz the writer's head exploded =)
12:33:45 <edwardk> its not a bad technique, its just i haven't seen a good tech report on psychometrics or why, just some random images splashed out there.
12:34:17 <shapr> In any case, Nokia is using it because it's lossless, gives great compression ratios, takes a long time to compress and very little time to decompress.
12:34:35 <edwardk> yeah
12:34:46 <edwardk> makes perfect sense in a cell phone/portable market
12:34:47 <dmhouse> Lossless JPEGs?
12:34:59 <edwardk> nah, random fractal encoder nonsense
12:35:03 <dmhouse> Oh, righ.
12:35:05 <dmhouse> t
12:35:21 <shapr> I wonder what "long time to compress" means in wall clock time.
12:35:35 <shapr> I also wonder if something like rainbow tables could be used to speed it up.
12:35:43 <edwardk> well, when i last looked it was 'come back in an hour' =)
12:35:59 <edwardk> but compression goals and processing speed has shifted quite a bit since then
12:36:07 <edwardk> s/has/have/
12:36:21 <shapr> An hour is just fine for something like a .deb
12:36:30 <shapr> Days is too much.
12:37:03 * shapr considers hacking this into cabal-get.
12:37:21 <edwardk> wouldn't bother for non-image stuff
12:37:25 <edwardk> not much self-similarity
12:37:32 <edwardk> you'd be better off playing with BWTs
12:37:35 <jgrimes_> > fix (\n -> 2)::Int
12:37:36 <shapr> Seems to work for Nokia.
12:37:37 <lambdabot>  2
12:38:03 <dmhouse> jgrimes_: do you want the whole story?
12:38:30 <jgrimes_> dmhouse: sure
12:38:35 <edwardk> for a whole what 5-10% improvement?
12:38:40 <dmhouse> jgrimes_: Okay then.
12:38:52 <dmhouse> jgrimes_: How much do you know of the lambda calculus?
12:39:19 <shapr> edwardk: If it beats bz2, it's worth it for debs.
12:39:22 <jgrimes_> dmhouse: little
12:39:39 <edwardk> hrmm
12:40:09 <edwardk> as usual, i can't find anything concrete online, so i'll let you go chase phantoms =)
12:40:11 <dmhouse> jgrimes_: Well, you know the basic premises? There are three types of terms in the lambda calculus. Values, lambda abstractions (\x. t) and applications (t1 t2).
12:40:18 <shapr> Especially once this $100 laptop hits South Africa
12:40:24 <edwardk> yeah
12:40:27 <jgrimes_> dmhouse: yeah, I know the basics
12:40:34 <shapr> edwardk: http://linuxmafia.com/pub/linux/utilities-general/fiasco-1.1.tar.gz
12:40:38 <shapr> Closer to concrete?
12:40:43 <dmhouse> jgrimes_: Most lambda calculi with simple type systems don't have any kind of recursion in them.
12:40:56 <edwardk> well, i was looking for a writeup
12:40:58 <dmhouse> Actually, let me rephrase.
12:41:28 <edwardk> if it makes you feel better i BWT javascript before sending it to the browser, and unbwt client side to get better  compression myself so i can empathize ;)
12:41:29 <dmhouse> At first, it's not obvious how to do recursion in the lambda calculus.
12:41:46 <shapr> edwardk: Thesis title is "Low Bit-Rate Image and Video Coding with Weighted Finite Automata" by Ullrich Hafner... I'm looking for a copy now.
12:41:57 <shapr> What's BWT?
12:41:59 <dmhouse> After all, it's basically all anonymous functions, and as you spotted, you can't easily do recursion there.
12:42:01 <shapr> Oh, burroughs wheeler
12:42:06 <edwardk> yeah
12:42:08 <jgrimes_> dmhouse: right
12:42:12 <dmhouse> However, there is a way of doing it.
12:42:22 <dmhouse> Let's look at what recursion really means:
12:42:28 <edwardk> rather fond of the skew algorithm for suffix arrays, so its something like to code up when i move to a new language =)
12:42:48 <edwardk> yes, i realize its not the most efficient in practice because of the large constant, but its a beautiful algorithm
12:42:55 * shapr enjoys listening to people teach lambda cal
12:43:02 <dmhouse> Hmm.
12:43:07 <dmhouse> I may have already typed this up. Hold on.
12:43:24 * jer enjoys cookies =]
12:43:50 <edwardk> speaking of which i haven't coded it up in haskell yet, hrmm =)
12:44:24 <_Codex> absolutely best way to learn lambda calculus is by reading it from "Curry-Howard isomorphism" paper.
12:44:33 <dmhouse> jgrimes_: http://paste.lisp.org/display/21902
12:44:37 <jgrimes_> dmhouse: all right
12:44:55 <dmhouse> jgrimes_: That's a bit concise, so ask if you get confused.
12:44:59 <shapr> _Codex: Seriously?
12:45:01 <jgrimes_> dmhouse: sure
12:45:03 <dmhouse> _Codex: Hmm. Really?
12:45:11 <_Codex> shapr: yes. really.
12:45:16 * dmhouse doesn't remember that paper being LC-heavy.
12:45:53 <dmhouse> _Codex: do you know about the various LCs? How about the various type systems? What's the 'normalising property'? What's the best way of doing proofs on LC programs?
12:45:59 * dmhouse thinks a textbook would be better.
12:46:35 <_Codex> dmhouse: yes, that's all in the CHI. strong normalisation etc.
12:47:00 <dmhouse> _Codex: which paper are you referring to?
12:47:27 <_Codex> http://folli.loria.fr/cds/1999/library/pdf/curry-howard.pdf has it I think.
12:47:38 <edwardk> shapr: downloading the paper from citeseer
12:48:12 <edwardk> or not
12:48:14 <sieni> looks cool
12:48:15 <edwardk> as it appears to be down
12:48:40 <edwardk> anyways the tornado code stuff from earlier is great fun, ut unfortuately patented out of existence =(
12:48:53 <emertens> tornado code?
12:48:58 <edwardk> which is sad, becuase they are linear time to encode/decode
12:49:19 <edwardk> tornado codes are an LDPC erasure code for encoding information on a channel that may lose packets. i.e. a network.
12:50:06 <edwardk> so you can take a chunk of 64 items, break them up into 128 items that if you receive any 64 you can reassemble the original for instance.
12:50:15 <edwardk> and do the disassembly and reassembly in linear time
12:50:41 <edwardk> useful for responseless transmission, typical multicast scenarios, etc.
12:50:44 <jgrimes_> dmhouse: ah ok. I think I get it. I had actually heard the beginning of Sussman explaining the least fixed point in the (old) SICP lecture videos  before getting completely lost. But that clears it up pretty well.
12:51:00 <dmhouse> jgrimes_: Awesome.
12:52:01 <dmhouse> Most of the texts I'd seen prior to seeing that had just said 'Look, we can use fix to do recursion!', but this one says 'Look, this is recursion, isn't it cool? If we do this and do that and foo and bar and BANG! fix seems the most natural thing to use'.
12:52:18 <edwardk> since its linear you could use a tornado code to break apart an arbitrary sized file into an appropriate sized packets, and then transmit them, so you coud listen and reassemble without the reed-solomon overhead
12:53:32 <edwardk> and i'm going to shut up now, because as usual when this topic comes up, everyone stops responding =)
12:56:49 <edwardk> shapr: i confess i am more or less in agreement with http://en.wikipedia.org/wiki/Fractal_compression
13:03:28 <shapr> edwardk: You found the paper? What's the citeseer url?
13:04:29 <emertens> edwardk: I just read through your answer to my question
13:04:32 <emertens> that sounds pretty sweet
13:05:03 <astrolabe> hmmmm I bet they do that using 128 vectors in K^64, any 64 of which are a basis.
13:05:07 <bringert> is this the main HUnit repo: http://darcs.haskell.org/packages/HUnit/
13:05:09 <lambdabot> Title: Index of /packages/HUnit
13:08:15 <astrolabe> There could be significant gains to lazy suffix arrays
13:19:28 <dylan> @hoogle lowercase
13:19:29 <lambdabot> System.Win32.NLS.lCMAP_LOWERCASE :: LCMapFlags
13:20:14 <ndm> @hoogle toLower
13:20:15 <lambdabot> Char.toLower :: Char -> Char
13:20:40 <ndm> dylan: ^
13:21:51 <dylan> Right. one wonders why this tutorial was using "lowercase"
13:25:08 * alar thinks it would be fun to add lambdabot to #icfpc
13:26:04 <heatsink> Generate an entry with djinn :)
13:26:45 <SamB_XP> uhhhhh
13:26:58 <SamB_XP> it has to actually perform the task well, doesn't it?
13:27:09 <SamB_XP> not just have the right type!
13:27:23 <heatsink> Well we wouldn't expect it to win.
13:27:43 <heatsink> But it would be a legitimate use of the zero-person team loophole.
13:27:46 <SamB_XP> it probably would get disqualified off the bat for breaking the rules
13:29:00 <alar> do you mean "getting help from lambdabot" against the rules?
13:30:19 <SamB_XP> no, I mean it wouldn't follow the rules of whatever game the entries are supposed to play!
13:31:18 <jgrimes_> @fp Control.Arrow
13:31:19 <lambdabot> http://darcs.haskell.org/packages/base/Control/Arrow.hs
13:43:30 <ihope> @docs GHC.Num
13:43:31 <lambdabot> GHC.Num not available
13:43:45 <ihope> @hoogle Floating
13:43:46 <lambdabot> Prelude.Floating :: class Fractional a => Floating a
13:43:54 <ihope> @docs Prelude
13:43:55 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html
13:46:12 <xs> has anyone used HFuse recently?
13:49:41 <ihope> "Complex xr xi / Complex yr yi = Complex (xr/yr - xi/yi) (xr/yi + xi/yr)" <- that isn't right, is it?
13:50:31 <xs> do you need to (Complex xr xi) / (Complex yr yi) ?
13:50:48 <ihope> Yes...
13:51:17 <ihope> ...There's a Data.Complex module, isn't there?
13:51:48 <xs> yes
13:52:02 <xs> real_path :+ imag_part i think
13:52:13 <dmhouse> ihope: http://en.wikipedia.org/wiki/Complex_numbers#Complex_fractions
13:55:35 * ihope makes a Quantum datatype, defined by wavefunction
13:58:56 <dmhouse> @seen kowey
13:58:57 <lambdabot> I saw kowey leaving #haskell and #darcs 8 days, 18 hours, 48 minutes and 26 seconds ago, and .
13:59:12 <ihope> And , eh?
14:13:10 <LordBrain> Lemmih, SamB: wrt Conjure (bittorrent client), i see the MILESTONES file says the current milestone is 1.. Does that mean we've reached milestone 1, and thus have a working seeding client?
14:14:43 <Lemmih> LordBrain: No, Conjure can't seed yet.
14:15:18 <LordBrain> ok thanks
14:15:54 <SamB_XP> Lemmih: what do you mean? it exits when the file finishes downloading?
14:15:55 <shapr> hiya CosmicRay
14:16:12 <Lemmih> LordBrain: The components are there but they aren't assembled.
14:16:29 <CosmicRay> hey shapr!
14:16:31 <LordBrain> interesting
14:16:31 <SamB_XP> Lemmih: do they even fit right?
14:16:49 <Lemmih> SamB_XP: They do. We just need a bit of logic.
14:17:03 <LordBrain> what happens if i build Conjure?
14:17:04 <astrolabe> ihope: your sum is wrong I think
14:17:06 <SamB_XP> bah on logic! use irational behaviour instead!
14:17:09 <LordBrain> i havent tried yet
14:17:11 <shapr> Lemmih: Invariants would be really nice.
14:17:14 <shapr> Hiya Heffalump!
14:17:16 <Heffalump> 'lo
14:17:22 <ihope> astrolabe: hmm?
14:17:22 <shapr> Heffalump: AngloHaskell dates are .. well, I think they're set.
14:17:43 <Heffalump> and what are they..? :-)
14:17:51 <shapr> Oh, 4th & 5th of August.
14:17:59 <Heffalump> so Friday+Saturday
14:18:06 <Lemmih> LordBrain: You'd get a semi-assembled bittorrent client.
14:18:13 <astrolabe> ihope: The way I work it out is to multiply numerator and denominator by the complex conjugate of the denominator
14:18:21 <shapr> Hopefully I can find somewhere cheap/free to sleep on Friday night...
14:18:22 <Heffalump> what dates are each of you here, then?
14:18:23 <astrolabe> ihope: That makes the denominiator real
14:18:29 <shapr> Heffalump: All at the same time.
14:18:35 <ihope> Well, I decided to use Data.Complex, so that's...
14:18:55 <astrolabe> ihope: that sounds best of all :)
14:18:57 <Heffalump> oh, right. The 4th?
14:19:08 <shapr> We all get interviewed on the 3rd.
14:19:37 <Lemmih> shapr: Did Frances mail you back?
14:19:38 <Heffalump> ah, so you plan the entire 4th for the meet?
14:19:52 <astrolabe> Aren't you worried microsoft will turn you to the dark side?
14:19:56 <shapr> Lemmih: Not yet
14:20:08 <xerox> astrolabe: are SPJ & friends in the dark side?
14:20:11 <shapr> astrolabe: The job offer specifies that GHC will remain BSD.
14:20:25 <SamB> shapr: nobody would want it if it didn't!
14:20:25 <shapr> astrolabe: I am fine with being paid to write BSD code.
14:20:28 <xerox> Oh, in _that_ sense.
14:20:40 <astrolabe> I'm only joshing
14:20:54 <astrolabe> Since I work for an 'evil' organisation myself
14:20:58 <SamB> anyway, this is Microsoft Research, not Microsoft Monkey Lab
14:20:58 <shapr> I'm glad they specified that in the offer.
14:21:06 <monochrom> Microsoft is not the dark side.  AT&T is the dark side.  Remember where C/C++ came from! XD
14:21:22 <SamB> monochrom: you don't think C is useful?
14:21:31 * SamB takes away monochrom's RTS
14:21:40 <monochrom> C is useful but C is dark side Jedi. :)
14:21:44 <astrolabe> You can't dis bell labs.
14:21:46 <Heffalump> so where/what will the meet be?
14:21:52 * SamB takes away monochromes fancy bindings
14:21:55 * Lemmih gives SamB_XP an RTS written in C--
14:22:22 <xerox> http://www.zug.com/gab/index.cgi?func=view_thread&head=1&thread_id=44344
14:22:23 <SamB> Lemmih: it won't be unless they implement parameters, you know
14:22:24 <lambdabot> Title: ZUG: Comedy Articles: Prank Phone Call To AT&T
14:22:30 <SamB> parts are, but not the whole thing
14:22:30 <xerox> That's _fun_
14:22:33 <shapr> Heffalump: MSR will furnish a hang-out spot and wifi access during working hours on Friday.
14:22:39 <monochrom> The Jedi reference implies the necessity of a balance, so by "dark side" we by no means mean a moral judgement! XD
14:23:00 <SamB> monochrom: balance?
14:23:01 <Heffalump> oh, cool
14:23:15 <SamB> you don't have the same understanding of the force that I do
14:23:17 <monochrom> Yeah, we need some people to code the RTS in C :)
14:23:44 <Heffalump> do you have a particular project in mind for it?
14:23:47 <monochrom> The force that can be understood is not the True Force :)
14:24:17 <shapr> There's no real agenda yet for AngloHaskell, so I don't know what'll happen.
14:24:40 <Heffalump> I'll work out whether to take a day off once one emerges :-)
14:24:44 <monochrom> MSR wifi does worry me :)
14:24:53 <SamB> monochrom: I think you are talking about some crazy eastern religion and not Star Wars, somehow
14:24:57 <shapr> greenrd wants to talk about simulating deptypes.
14:25:06 <sieni> shapr: except that most of the channel predicts that you will *boing*.
14:25:10 * Philippa will probably bring a board or card game or two for anyone who isn't feeling up to code and doesn't fancy Go btw
14:25:24 <Philippa> *thinks*
14:25:33 <SamB> does shapr have a pogo stick as well as a unicycle?
14:25:35 <Philippa> wonder how many in attendance will've played the chairman's game before?
14:25:37 <shapr> sieni: There's a very good chance that I'll boing.
14:25:46 <shapr> I'm planning on bringing my mountain unicycle.
14:25:57 * xerox wnats to play Go :D
14:25:58 <shapr> SamB: It's a very boingy unicycle.
14:26:02 <edwinb> you won't find any mountains in cambridge ;)
14:26:04 <SamB> ah
14:26:26 <SamB> edwinb: thats okay, he can ride it on the sides of buildings instead
14:26:31 <edwinb> heh
14:26:34 * Heffalump hasn't played it despite having gone to Oxford
14:27:16 <wagle> anyone know what the second colon in  E R x = { a \elem A | (\forall b \elem B : a R b : b \elem x) } means?  (bird uses the notation in his algebra of programming book)
14:27:37 <shapr> I think Pierce explains that notation in TaPL...
14:27:53 <ihope> @kind Data.Complex.Complex
14:27:54 <lambdabot> * -> *
14:28:03 <wagle> shapr: you dont remember?/
14:28:09 <Heffalump> wagle: it's a precondition
14:28:26 <shapr> wagle: Nope, and TaPL is in a moving box atm.
14:28:30 <Heffalump> for all b in B such that a R b, b is in x
14:28:39 <wagle> shapr: where you moving?
14:28:58 <shapr> wagle: Stockholm
14:29:07 <Heffalump> so the whole thing means the elements of A such that that statement is true
14:29:13 <Heffalump> shapr: oh, leaving the frozen wastelands?
14:29:18 <dcoutts> shapr, pong
14:29:21 <shapr> Sort of... there's snow here too.
14:29:24 <shapr> dcoutts: hiya!
14:29:30 <wagle> is that good?
14:29:36 <dcoutts> shapr, so yeah I can give directions
14:29:41 <shapr> dcoutts: ah cool!
14:29:50 <sieni> luleå is a summer vacation place for real northerners!
14:29:58 <wagle> shapr, Heffalump : thanks
14:30:02 <dcoutts> vincenz, you'll need to tell me more about your setup, it's probably something to do with configure and USE_GCLOSUE_SIGNALS_IMPL
14:30:03 <Heffalump> dcoutts: did you decide on AngloHaskell?
14:30:17 <dcoutts> Heffalump, well apparently shapr et al did
14:30:21 <dcoutts> or MSR did
14:30:22 <sieni> or was it boden
14:30:23 <Heffalump> no, I meant did you decide if you are going
14:30:26 <sieni> whatever
14:30:28 <shapr> sieni: I used to live in Boden.
14:30:36 <Heffalump> since your entry on the page says "depends on the date"
14:30:42 <dcoutts> shapr, still 4th & 5th Aug ?
14:30:47 <dcoutts> if so then yeah
14:31:03 <shapr> dcoutts: I'm pretty sure that's correct.
14:31:10 <dcoutts> great
14:31:20 <dcoutts> shapr, so need floor space?
14:31:33 <shapr> Frances sent us an email saying "Yes these are confirmed" Then a few hours later we got some weird message...
14:31:37 <sieni> shapr: yes, that, but the ink used to be so expensive when I was a kid that they only printed "Luulaja" in the maps.
14:31:49 * Heffalump will probably be able to offer floorspace to a few too
14:32:06 * dcoutts has offered floorspace to shapr, Lemmih and xerox 
14:32:06 <Heffalump> is there a location plan for the Saturday?
14:32:13 <dcoutts> xerox, has not decided yet
14:32:19 <shapr> dcoutts: MS Exchange sent us a "recall message" thingy. I hope that's just a bug.
14:32:31 <Heffalump> if it's a recall message it's probably not a bug
14:32:33 <shapr> Heffalump: Not that I know of, suggestions?
14:32:35 <xerox> dcoutts: I have decided to come :-)
14:32:35 <Heffalump> I've never seen those sent out by accident
14:32:39 <dcoutts> xerox, yay!
14:32:52 <xerox> Yeah, it will be nice to finally meet you!
14:32:54 <Heffalump> shapr: I was thinking it would be hard, which was why I was asking :-)
14:32:55 <sieni> -> sleep
14:32:55 <ndm> dcoutts: are you lot there saturday night?
14:32:57 <SamB> don't they know that you can't unsend email?
14:32:58 <xerox> Thank you very much for the space.
14:33:04 <dcoutts> ndm, I will be
14:33:08 <shapr> Heffalump: I sent a reply asking what that meant, but haven't gotten anything in return.
14:33:14 <ndm> dcoutts: cool, can i get some floor space?
14:33:20 <dcoutts> xerox, no probs, it'll be nice to meed up
14:33:25 <ndm> just saturday night, i have a wedding friday night
14:33:31 <Heffalump> dcoutts: whereabouts do you live?
14:33:33 <shapr> xerox: Do you have pix online so I can recognize you?
14:33:39 <dcoutts> ndm, I'll check with my parents what numbers they feel ok with
14:33:41 <xerox> shapr: no :(
14:33:45 <shapr> Oh hey, who's bringing a digital camera?
14:33:46 <ndm> dcoutts: cheers
14:33:53 <dmhouse> shapr, wear badges with IRC nicks!
14:33:55 <edwinb> I'll have a camera...
14:33:58 <xerox> my cellphone does 1280x800 :)
14:34:02 <shapr> It's been three years since I had a picture of me with Heffalump or Igloo!
14:34:04 <dcoutts> Heffalump, newham, Barton Road
14:34:06 * Heffalump will have a camera
14:34:11 <Heffalump> DYM Newnham?
14:34:16 <dcoutts> err yesh
14:34:22 <shapr> xerox: So, take a picture with your phone and upload it to your Hope site?
14:34:26 <Heffalump> quite close to MSR then
14:34:29 <dcoutts> yeah
14:34:31 <xerox> shapr: I am not sure :-)
14:34:34 <dcoutts> waliking distance
14:34:35 * Heffalump lives off the A428
14:34:48 <Heffalump> so basically driving only unless people have a bike
14:34:56 <shapr> unicycle?
14:34:57 <dcoutts> 20-30 min walk from mine to MSR
14:35:02 <dcoutts> or 10 min unicycle
14:35:03 * shapr grins
14:35:17 <dmhouse> dcoutts: Don't you live in Oxford?
14:35:17 <Philippa> I figure the bigger issue's how far from the pub we pick after MSR anyway?
14:35:29 <dcoutts> dmhouse, I do, my parents live in Cambridge
14:35:32 <shapr> Heffalump: Know of any pubs with wifi?
14:35:36 <dmhouse> I thought Cambridge and Oxford were more than a 30 minute walk away from each other.
14:35:36 <shapr> I'll bring my Nokia 770.
14:35:39 <dmhouse> Aha.
14:35:48 <shapr> The Fruits of ARM!
14:35:51 <xerox> shapr: evil!
14:35:55 <dcoutts> dmhouse, yeah, they're 6 hours by bike on a good day
14:36:00 <Heffalump> shapr: well, unicycling is presumably a bit slower than bicycling but not that much
14:36:08 <dcoutts> dmhouse, or 4 hours by bus on a bad day
14:36:16 <Heffalump> so I guess it'd be about 20 mins (3 miles or so)
14:36:26 <Heffalump> hopefully about 2 hours by car tomorrow
14:36:35 <Heffalump> assuming someone in Oxford finds us a location to do the contest in ;-)
14:36:43 * wagle wonders about 21 speed unicycles
14:36:44 <xerox> Contest contest contest!
14:36:52 <shapr> I don't actually know whether Secret Joy is faster or slower than a unicycle.
14:36:57 <SamB> wagle: unicycles with gears?
14:37:14 <wagle> SamB: pedal down mountains
14:37:14 <shapr> Here are my unicycle pix - http://www.scannedinavian.com/hope/tag/unicycle
14:37:17 <shapr> SamB: They do exist.
14:37:17 <xerox> ...than a bicycle?
14:37:29 <dmhouse> Where's MSR in relation to the university? Which colleges is it near?
14:37:34 <shapr> wagle: Currently only in two speeds, but I've been doing research on magnetic gears...
14:37:41 <Heffalump> dmhouse: very few
14:37:41 <sieni> unicycles with gears? that sounds almost suicidal, if not difficult
14:37:47 <Heffalump> it's west of all of them, basically.
14:37:47 <dcoutts> my 36" would beat most other unicycles
14:37:51 <shapr> truly
14:37:54 <shapr> Food, bbiab
14:37:55 <xerox> 36" !!!
14:37:58 <SamB> how do you change gears?
14:37:58 <dcoutts> oh yeah
14:38:03 <dcoutts> change wheel
14:38:03 <dmhouse> Heffalump: near Robinson, or the UL?
14:38:04 <xerox> dcoutts: will you teach me to unicycle? :-)
14:38:09 <Heffalump> http://maps.google.co.uk/maps?f=d&hl=en&saddr=CB3+0FB&daddr=CB3+7GP&ie=UTF8&ll=52.214444,0.036736&spn=0.059426,0.161018&om=1
14:38:11 <lambdabot> Title: Google Maps
14:38:12 <dcoutts> xerox, my sister might :-)
14:38:17 <xerox> Yay!
14:38:20 <Heffalump> it's the right dot on that map (the left dot is my house)
14:38:29 <Heffalump> dmhouse: further west than either, but roughly that area
14:38:35 <Heffalump> about 10 mins walk maybe from the UL
14:38:41 <Heffalump> no, more than that from the UL
14:38:55 <Heffalump> it's right by the M11
14:39:36 <dmhouse> It looks further north than the UL too.
14:39:41 <Heffalump> yes, it is
14:39:45 <dmhouse> Is it near the compsci building?
14:39:45 <Heffalump> the UL is south of Madingley Road
14:39:49 <Heffalump> dmhouse: right next to it
14:39:53 <Heffalump> looks the same too
14:39:55 <dmhouse> Ah. Right :)
14:40:02 <dcoutts> http://maps.google.co.uk/maps?f=d&hl=en&saddr=CB3+0FB&daddr=CB3+7GP&ie=UTF8&ll=52.214444,0.036736&spn=0.059426,0.161018&om=1
14:40:03 <lambdabot> Title: Google Maps
14:40:05 * xerox goes back to Cabal ~~ talk to you later
14:40:08 <dcoutts> my house to MSR
14:40:14 <Heffalump> dcoutts: that's the URL I pasted :-)
14:40:21 <Heffalump> you need to follow the "link to this page" link first
14:40:25 <dcoutts> but with a different post code
14:40:32 <Heffalump> unless your house miraculously has a different postcode to mine, it's not.
14:40:35 <Heffalump> s/different/same/
14:40:43 <dcoutts> err yeah
14:40:45 * dcoutts fixes
14:40:59 <dcoutts> http://maps.google.co.uk/maps?f=d&hl=en&saddr=CB3+0FB&daddr=CB3+9LE&ie=UTF8&om=1
14:41:00 <lambdabot> Title: Google Maps
14:41:09 <Heffalump> got any ideas for a Saturday location, anyway?
14:41:09 <dcoutts> there we go
14:41:22 <dcoutts> I don't know about wifi pubs
14:41:27 <Heffalump> oh, I cycled right past that every day for a few days
14:41:34 <Heffalump> then I found a better route
14:42:12 <edwinb> If we go to a wifi pub, can we talk on irc to each other too?
14:42:20 <xerox> You live in a green place :)
14:42:25 <Igloo> dcoutts: So any chance there is still floor space for a little one?
14:42:25 <dmhouse> edwinb: ;)
14:42:36 <dcoutts> Igloo, I need to check numbers with my parents
14:42:44 <dmhouse> edwinb: With all the crazy accents flying around it might be the only option.
14:42:46 <dcoutts> Igloo, I suspect 4 of us is about tops
14:43:02 <dcoutts> Igloo, btw we can use 008 tomorrow to monday
14:43:08 <edwinb> hmm
14:43:08 <Heffalump> oh, cool
14:43:18 <dcoutts> Heffalump, are you doing icfp with us?
14:43:21 <Heffalump> yeah.
14:43:24 <dcoutts> cool
14:43:29 <xerox> dcoutts: who is your team?
14:43:30 <Igloo> Cool, thanks for sorting it!
14:43:32 <Heffalump> I'll even come to Oxford now you've promised a location ;-)
14:43:54 <dcoutts> Igloo, I mentioned it to Oege and he told the chap who's using that office to take Monday off :-)
14:43:54 <Heffalump> dun(kosmi)[pavel?]loolump
14:44:10 <dcoutts> Igloo, yeah, what is Pavel doing?
14:44:15 <Heffalump> we should have persuaded Damien to join in
14:44:20 <dcoutts> aye
14:44:21 <Heffalump> he said he can't commit to the whole time
14:44:30 <dcoutts> slacker ;-)
14:44:41 <xerox> hah, good luck
14:45:01 <dmhouse> Wheres' that weird word from? I saw it on Andres LÃ¶h's website.
14:45:09 <dmhouse> s/Wheres'/Where's/
14:45:35 <Heffalump> dmhouse: dunkosmiloolump = Duncan (Coutts), Kosmikus (Andres Loeh), (Ig)loo, (Heffa)lump
14:45:37 <Igloo> I don't think I know anything you two don't know
14:45:48 <dcoutts> right'o
14:46:10 <Heffalump> it was his idea for our ICFP 2004 team name
14:46:16 <dmhouse> Aha.
14:46:30 * dmhouse really wishes he could make the meetup
14:46:54 <dmhouse> Make sure you organise it next year :)
14:47:24 <ndm> is anyone else going to be able to offer floor space?
14:47:45 <dcoutts> Heffalump, so how many can you cope with?
14:47:58 * dcoutts will call his parental units
14:48:06 <Heffalump> ermm. Probably quite a few if Amanda doesn't object
14:49:38 <dmhouse> dcoutts: http://en.wikipedia.org/wiki/Duncan_Coutts Never knew you were so multi-talented.
14:49:52 <heatsink> heh
14:49:56 <Heffalump> I think we had two couples and three singles sleeping here when we had a party
14:50:20 <dcoutts> dmhouse, that'll be the guitar palyer?
14:50:45 <dmhouse> dcoutts: Yes, I guessed that wasn't you ;)
14:50:54 <dcoutts> heh, yeah
14:51:02 <dcoutts> he's knocked me off the top spot on Google!
14:51:15 <ndm> i had a wikipedia person knock me off the top of google as well :(
14:51:20 <emertens> i just realized that C# has infinite lists... IEnumerable<int> fibs() { int a=0,b=1,c;for(;;){c=a;a=b;b+=c;yield return c;}}
14:51:56 <heatsink> emertens, iterators are lists.
14:52:03 <SamB> google needs to tweak their ranking algorithms...
14:52:08 <Heffalump> yield makes it more elegant though :-)
14:52:25 <ndm> SamB, to be honest, the famous people probably deserve to beat us realtively obscure people
14:52:27 <emertens> heatsink: iterators are for anything that happens to be enumerable
14:52:49 <dmhouse> Heffalump: so you, dcoutts, Igloo are all at Oxford, and kosmikus is in Bonn?
14:53:11 <Heffalump> yes, though he's not doing the contest with us this year (and didn't last year). Hence the () round his bit in the name.
14:53:14 <monochrom> Yes that's called a "generator".  C# and Python have generators.  It is their way of providing lazy infinite sequences.
14:53:16 <SamB> ndm: famous people?
14:53:17 <dmhouse> Aha.
14:53:21 <Igloo> kosmikus was coincidentally in Oxford the week leading up to the contest 2 years ago
14:53:21 <Heffalump> he was visiting Oxford the year we did do it together
14:53:22 <SamB> famous for what?
14:53:28 <dmhouse> Cool. :)
14:53:31 <Heffalump> and I'm not at Oxford any more, but I plan to go there for the weekend.
14:54:00 * ndm has no team :(
14:55:08 <Heffalump> dcoutts: do you still have magic Oxford parking widgets?
14:55:14 <ndm> one year i want to organise Colin Runciman and Malcolm Wallace into a team
14:55:22 <dcoutts> Heffalump, no but I know a place to park for free
14:55:31 <Heffalump> oh, where?
14:55:37 * dcoutts finds it on google maps
14:56:08 <dcoutts> http://maps.google.co.uk/?ie=UTF8&ll=51.762163,-1.274017&spn=0.005332,0.013454&om=1
14:56:09 <lambdabot> Title: Google Maps
14:56:15 <SamB> so why does a rockstar deserve to beat dcoutts for the name?
14:56:46 <SamB> I think we should move that page to Duncan_Coutts_(Rockstar)
14:56:49 <ndm> because one is a rock star, the other is a PhD student
14:57:06 <ndm> without trying to put phd students down, rock stars trump them
14:57:10 <dcoutts> heh
14:57:21 <SamB> but this other guy didn't write any cool Haskell libraries
14:57:46 * edwinb wonders if there are any rock stars who are also PhD students
14:57:51 <xerox> And can't maintain e^x more packages every season.
14:57:57 <SamB> its hard to do both
14:58:07 <SamB> they each demand so much time and energy!
14:58:17 * dmhouse wonders if Duncan Coutts and Duncan Coutts are in fact one and the same person
14:58:34 <dcoutts> I think not
14:58:48 <SamB> well, does dcoutts live in canada?
14:58:53 <dcoutts> nope
14:58:56 * Heffalump looks at the photo on the wikipedia page
14:58:58 * Heffalump is not too sure
14:59:08 <Igloo> He does seem to go "on holiday" quite often
14:59:08 <Heffalump> I've never seen dcoutts with that little hair, so he could look like that if he did
14:59:24 <SamB> Heffalump: you can't go by that! maybe they stole a photo of dcoutts by accident!
14:59:31 <dcoutts> Igloo, that's 'coz I'm lazy
14:59:38 <dcoutts> which as we all know is a virtue
15:00:04 * dmhouse notices that there are suspiciouslly few pictures of dcoutts on his website
15:00:05 <wagle> dcoutts: cardinal or ordinal?
15:00:18 <Igloo> dcoutts: So you deny rumours you are actually touring?
15:00:26 <xerox> http://images.google.com/images?q=duncan+coutts
15:00:27 <lambdabot> Title: duncan coutts - Google Image Search
15:00:28 <Igloo> Or visiting your country home in Canad?
15:00:41 * dcoutts cannot comment
15:00:43 * Heffalump discovers that Igloo's girlfriend is about to visit us for an entire year
15:00:52 <xerox> haha
15:00:56 <Heffalump> well, one year plus one weekend.
15:01:01 <dmhouse> Wow. Actually,
15:01:15 <dmhouse> http://www.sadowsky.com/media/artists/coutts/coutts.jpg
15:01:23 <dmhouse> http://web.comlab.ox.ac.uk/oucl/people/photos/duncan.coutts.gif
15:01:27 <dmhouse> Surprisingly similar...
15:01:53 <Heffalump> as I said..
15:02:03 * dcoutts looks even more similar now with the beard
15:02:23 <dcoutts> I like this one:
15:02:23 <dcoutts> http://images.google.com/imgres?imgurl=http://packages.gentoo.org/images/dev-lang/ghc.jpg&imgrefurl=http://packages.gentoo.org/ebuilds/%3Fghc-6.4.2&h=250&w=208&sz=23&hl=en&sig2=n_phUkrMcMtB-q7Yrqymbw&start=15&tbnid=hNWPS5_sJQiyeM:&tbnh=111&tbnw=92&ei=_Py_RIX8FJXYRp_N4bsN&prev=/images%3Fq%3Dduncan%2Bcoutts%26svnum%3D10%26hl%3Den%26lr%3D
15:02:25 <lambdabot> Title: Google Image Result for http://packages.gentoo.org/images/dev-lang/ghc.jpg
15:02:47 <xerox> http://packages.gentoo.org/images/dev-lang/ghc.jpg
15:03:21 <Jaak> *shrug* it just took me 5 and a half hours to build -.-
15:04:31 <dcoutts> Jaak, on gentoo?
15:04:38 <Jaak> yessir
15:04:45 <dcoutts> ghc 6.6 should be more modular
15:04:57 <dcoutts> with fewer libs in the ghc package
15:05:03 <dcoutts> and optional profiling libs
15:07:03 <Jaak> nice, but i'm not complaining now that it's installed. the compilation is just small annoyance of gentoo that i can live with :)
15:07:55 <dcoutts> there is of course ghc-bin :-)
15:09:23 <Jaak> too late now :P
15:12:52 * shapr finds a picture of dcoutts 
15:12:58 <dcoutts> oh dear
15:13:14 <shapr> dcoutts: You look really relaxed.
15:13:17 * dcoutts googles for pics of himself
15:13:17 <shapr> http://web.comlab.ox.ac.uk/oucl/people/duncan.coutts.html
15:13:19 <lambdabot> Title: Duncan Coutts
15:13:22 <dcoutts> heh
15:13:26 <dcoutts> that's not a great one
15:14:40 <SamB> @google pictures of dcoutts
15:14:43 <lambdabot> http://lwn.net/Articles/166962/
15:14:43 <lambdabot> Title: LWN: Creating/Manipulating Images with gd (Linux Journal)
15:14:48 <dcoutts> hah
15:14:49 <SamB> hmm
15:15:42 <monochrom> The benefit of gentoo is that you have an optimized ghc so that next time you compile ghc it will be faster by a few seconds.
15:16:00 <norpan> supa
15:16:36 * edwinb googles for pics of himself and finds http://sneezy.cs.nott.ac.uk/epigram/epilogue/wp-content/local2.jpg
15:16:41 <edwinb> that frightens me a lot...
15:17:04 <dcoutts> monochrom, I don't know if that's really true
15:17:24 <dcoutts> we give you a bit more rope with which to hang yourself ;-)
15:17:45 <SamB> monochrom: oh joy!
15:18:09 <SamB> I can save seconds in the future by wasting hours now!
15:18:18 <monochrom> hee hee hee
15:18:38 <SamB> *what a timesaver!*
15:19:00 <dcoutts> monochrom, we let you use some CFLAGS and trip off some packages
15:19:07 <dcoutts> otherwise it's an ordinary ghc
15:19:24 <edwinb> The best bit is that you can kid yourself that you're really working and go to the pub while it's building.
15:20:03 <SamB> hahaha
15:20:06 <ndm> another advantage is that it gets lots of tests building ghc,
15:21:41 <ndm> dcoutts: i took a look at the arrows paper yesterday
15:22:00 <ndm> not entirely sure if you can hook a gui up in the same way
15:22:14 <ndm> or rather what benefits it might bring over the current method
15:22:20 <shapr> shortcuts
15:22:34 <ndm> shapr, for example?
15:23:04 <shapr> You can build a loop and then shortcut out of it when updates aren't needed.
15:23:28 <ndm> shapr, i can do that already
15:23:41 <ndm> if your variables have Eq defined on them
15:25:11 <shapr> ndm: Check out "Modeling User Interfaces in a Functional Language" http://www.apocalypse.org/~antony/work/index.html
15:25:12 <lambdabot> Title: Antony's Work Page
15:25:29 <shapr> ndm: Which is tactful for, "I'm sure there are advantages, but heck if I remember what they are off the top of my head :-)"
15:26:16 <ndm> shapr, cheers
15:26:31 <shapr> Someone wrote a really neat arrows based gui binding, but I can't remember where I saw it...
15:26:35 <shapr> Nor can I find the source anymore :-/
15:26:44 <ndm> have you seen my proplang?
15:26:59 <shapr> They found the same problem everybody finds, you can't lift functions into arrows and still get all the lovely arrow properties.
15:27:39 <shapr> No, proplang?
15:27:52 <ndm> @where+ proplang http://www.cs.york.ac.uk/fp/darcs/proplang
15:27:53 <lambdabot> Done.
15:28:04 <ndm> in particular check out Sample.hs, at the top, for some of the cool bits
15:28:26 <ndm> i am most proud of a wordcount in 2 lines
15:28:42 <ndm>     sb!text =< with1 (txt!text) (\x ->
15:28:44 <ndm>         "Word count: " ++ show (length $ words x))
15:29:37 <norpan> huh
15:29:42 <ndm> which means that the status bars text property is the text property of the txt control
15:29:48 <ndm> with that function applied, calculate the lines
15:30:17 <ndm> and whenever the text control's text changes, it automatically updates
15:30:46 <norpan> lots and lots of infix operator
15:30:48 <norpan> s
15:31:09 <ndm> norpan: perhaps, you can think of txt!text as a single object
15:31:17 <ndm> like txt.text in Java or something
15:31:20 <ndm> rather than an operator
15:31:50 <Cale> and apparently, you can think of =< as flip ($)
15:31:53 <ndm> text sb =< with1 (text txt) (\x ->
15:31:55 <ndm> "Word count: " ++ show (length $ words x))
15:31:56 <norpan> =< =<= +=
15:32:14 <ndm> thats equivalent, if you want less infixness
15:32:43 <ndm> +=, add an event, =< is binding, =<= is =< with x id
15:32:48 <Cale> oh, so =< and ! are the same?
15:33:04 <ndm> Cale: in reality, yes, but in principle, no
15:33:29 <norpan> i've had too much beer tonight to understand
15:33:30 <ndm> and they have different precidence
15:33:47 <ndm> the user interface is only a first go, the concept is the important bit
15:34:02 <ndm> user interface = combinators, not user interface = gtk
15:34:49 <norpan> now, sleep
15:34:51 <norpan> gnite
15:38:48 <monochrom> Very slick. ndm.
15:39:16 <ndm> monochrom: cheers, i now have the question of what to do with it :)
15:39:37 <ndm> i.e. is it worth finishing into a full API? releasing as a library? or what?
15:40:47 <monochrom> If your operators are implemented over gtk2hs, I'll be very happy.
15:40:54 <ndm> monochrom: they definately will be
15:40:59 <dcoutts> :-)
15:41:04 <ndm> and i want to provide access for hte underlying Gtk api as well
15:41:11 <ndm> although need to think about how to do that a bit more
15:41:18 <ndm> since PropLang Window /= Window
15:41:31 <ndm> although I might be able to make some of the controls the same
15:41:42 <ndm> and adding properties is pretty trivial
15:43:31 <ndm> if anyone does have any suggestions where it should go from my sample, i'd be grateful to hear them?
15:46:51 <shapr> Alex probably has suggestions.
15:47:07 * shapr tries to remember Alex' last name...
15:47:42 <shapr> The OpenGL / GUI Alex... he was at ICFP2003 and he wanted to build a generic GUI interface, like Python/Perl/etc's generic db-api
15:48:22 <LordBrain> Why is it, when i look at online docs for Parsec, i always see this Parser type, but when i look at the actual types it always says GenParser...
15:48:25 <LordBrain> ?
15:48:41 <shapr> Because GenParser is an alias for a Char specialized Parser.
15:48:53 <dmhouse> GHCi does some type synonym resolving.
15:49:06 <LordBrain> hmmm
15:49:08 <shapr> I think it's actually Char () Error or something
15:49:10 <monochrom> type Parser a = GenParser () Char a  -- IIRC
15:49:10 <LordBrain> so does hugs apparently...
15:49:20 <shapr> aha
15:49:29 <dmhouse> You can look it up by doing :i CharParser in GHCi.
15:50:44 <shapr> bringert: I think that's main HUnit repo. Not much has happened with HUnit since it was originally written.
15:52:02 <bringert> it doesn't handle error calls (non-IO exceptions) very well
15:52:17 <bringert> HDBC managed to crash the test suite
15:52:33 <LordBrain> so does Gen stand for Generic?
15:52:59 <LordBrain> I was thinking Generate
15:53:02 <swiert> shapr: Axel Simon?
15:53:03 <monochrom> general
15:53:07 <shapr> bringert: HUnit is designed around IO based exceptions. I think it expects you to upcast them.
15:53:09 <shapr> swiert: YES!
15:53:23 <shapr> swiert: Thanks, that was really bugging me.
15:53:32 <swiert> no problem.
15:53:40 <bringert> shapr: but then I would have to know that the code I'm testing is going to throw them
15:53:47 <swiert> He came to Nottingham to talk about gtk2hs some time back.
15:54:17 <shapr> bringert: Maybe a catch all?
15:54:23 * shapr doesn't have a better idea
15:55:34 <dcoutts> Axel Simon is the original Gtk2Hs author and current co-maintainer with me
15:56:03 <dcoutts> and ran the GUI taskforce for a while
15:56:09 <bringert> shapr: the problem is that assertEqual forces the whole value, by using == and show, and if the value fails half-way though, it's hard to catch it outside of that
15:56:21 <bringert> unless I hack assertEqual or write my own
15:56:34 <ndm> dcoutts: GUI taskforce?
15:56:43 <wagle> shapr: Alexander Botero-Lowry <alex@foxybanana.com>?
15:57:13 <shapr> edwardk: Hey, I was just wanting to talk to you... Is there any relation between turbo codes and tornado codes?
15:57:29 <shapr> wagle: Don't think so. Haven't heard of him before.
15:58:02 * wagle 's google skills are weak
15:58:19 <dcoutts> ndm, aye, IFCP 2003 I think
15:58:28 <dcoutts> there was a mailing list for a while
15:58:36 <dcoutts> the conclusion was that it would not work
15:58:42 <ndm> a GUI taskforce?
15:58:43 <dcoutts> hence wxHaskell and Gtk2Hs
15:58:47 <ndm> what would not work?
15:58:50 <ndm> oh, a unified
15:58:50 <edwardk> turbo codes allow for different kinds of error other than just erasure
15:58:56 <shapr> I think the conclusion was that a generic GUI interface would take years to finalize, and we wanted to build GUIs now.
15:58:57 <dcoutts> a unified api
15:59:03 <dcoutts> I forget the exact details
15:59:04 <ndm> I think with prop lang you can get most of the unified stuff
15:59:11 <bringert> I've asked libraries@haskell.org what they think about replacing Network.CGi with NewCGI, http://www.haskell.org//pipermail/libraries/2006-July/005580.html
15:59:12 <lambdabot> Title: Replacing Network.CGI with NewCGI
15:59:13 <edwardk> so they are a solution to a more general problem, and hence have worse performance characteristics when applied in the space tornado codes are designed for
15:59:14 <ndm> just when you call out to the GTK bits you will not get it
15:59:25 <edwardk> tornado codes only deal with erasure
15:59:30 <ndm> since i am tempted to port proplang to the Win32 API if its stable enough
15:59:33 <shapr> So SPJ said that wxWindows was portable and well known, why not just use that?
15:59:37 <ndm> along with glade support
15:59:40 <edwardk> which is what you get in a packet scenario
15:59:49 <shapr> edwardk: Okay, that makes sense.
15:59:51 <ndm> shapr: on Windows with GHC 6.4.2, no
16:00:02 <ndm> portable, wellknown, unmaintained :(
16:00:23 <shapr> Oh, too bad
16:00:24 <ndm> while GTK has a much better developer contact (i.e. dcoutts :) )
16:00:32 <dcoutts> ;-)
16:00:41 <edwardk> the thing that makes tornado codes interesting is they have a linear time assembly and disassembly mechanism unlike, say, reed-solomon codes.
16:00:47 <shapr> Yeah, an active and enthusiastic developer is the best resource.
16:00:59 <edwardk> the !@#&( patent problems on the other hand...
16:01:05 <shapr> Yeah, patents suck.
16:01:10 <dcoutts> and Gtk+ is developing faster than wxWidgets too
16:01:45 * edwardk has marked on his calendar many dates when patents expire and he can work do work on stuff =)
16:02:27 <edwardk> though it looks like the tornado code ones won't lapse any time soon as there are ~6 patents and they all overlap and have been isued as recently as last year
16:02:32 <edwardk> in some cases
16:02:51 <edwardk> i'm moswtly interested in them for distributed storage technologies, etc.
16:03:18 <ndm> anyway, beer and fixed point theorems call
16:03:21 <ndm> night
16:03:27 <edwardk> breaking n packets into n+k packets such that any n can reassemble the original set seems useful, and nicely generalizes raid concepts.
16:03:52 <shapr> I wonder if Erlang's mnesia uses that.
16:04:09 <edwardk> probably a simpler code without patent encumbrance
16:04:39 <shapr> I'm often tempted to implement an idea and then put the code on my website saying "This code is patented, this is only a demonstration for learning purposes. Don't use this."
16:04:46 <edwardk> yeah
16:04:54 <edwardk> i did that with "SEAL" way back when
16:05:00 <shapr> And then when the patent expires, the code will be there.
16:05:02 <edwardk> in my cryptography phase
16:05:27 <monochrom> yay fixed point theorems
16:06:10 <SamB> shapr: probably most programs infringe on patents anyway
16:06:15 <shapr> Yeah, true.
16:06:21 <SamB> you might as well just put that on all your source files!
16:06:22 <shapr> But then, most patents infringe on each other...
16:06:53 <edwardk> yeah but if you're ever dumb enough (like me) to look up that you might be liable, then you can be held accountable for punitive damages, etc.
16:07:11 <edwardk> the best advice you can get on patents is to pretend they don't exist and act surprised ;)
16:07:24 <edwardk> when someone tells you one does exist =)
16:08:09 <dmhouse> Have a fun sleep everyone.
16:08:39 * edwardk lost the ability to sell a volumetric rendering library from inquiring too closely about whether I was infringing a patent that basically equated to patenting looking up a vector in a table.
16:08:50 <edwardk> so i'm a little bitter ;)
16:09:11 <Cale> edwardk: claim that your ideas are obvious
16:09:42 <edwardk> i could, and i could break the patent and show prior art back to 1986 in the demo scene community, but it would be entirely on my dime.
16:09:52 <heatsink> Defending such claims can be expensive.
16:09:57 <edwardk> i didn't have 50k to fight the legal battle over a product that would only net me slightly more than that
16:10:14 <edwardk> it was a gamble i wasn't willing to undertake at the time, nor financially able to support.
16:10:22 <shapr> As I've said before, the legal system itself has become the biggest punishment.
16:10:45 <edwardk> patents have a chilling effect all out of proportion, due to the fact that burden of proof is on the person claiming they were granted without consideration of prior art.
16:11:03 <Cale> shapr: are you voting for the Piratpartiet?
16:11:13 <shapr> I'd say the big problem is that independent discovery is stifled.
16:11:18 <shapr> Cale: I'm tempted.
16:11:31 <edwardk> and all legal costs fall to the plaintiff, with none going to the defendant unless they lose, so they have no reason not to get the best law team possible.
16:11:35 <Cale> I would :)
16:11:40 <shapr> My actual solution is simpler, let's colonize .aq and build a datahaven.
16:11:54 <edwardk> coz i'd be footing the bill anyways
16:12:07 <shapr> Let's put servers and coders on ships in international waters and then sell services that use patented software.
16:12:34 <shapr> The software never leaves the servers in international waters, we just work on customer data and then send it back.
16:12:51 <edwardk> well, i can supply you with some blazingly fast isometric volumetric rendering technology that plays really nicely with modern 3d hardware ;)
16:13:01 <edwardk> shapr: heh, reminds me of Sealand.
16:13:07 <shapr> Yeah, Sealand roxx
16:13:09 <Cale> New Sealand!
16:13:12 <shapr> hah
16:13:24 <edwardk> or the Neil Stephenson novel.
16:13:30 <shapr> Whatever happened to Sealand anyway? I know the guys there seceded from the UK, but then what?
16:13:36 <edwardk> er Neal
16:13:39 <edwardk> its still there
16:13:43 <shapr> Yeah, it's a total cryptonomicon clone.
16:13:45 <edwardk> they have a data center on it
16:13:47 <shapr> And?
16:13:47 <edwinb> the UK still doesn't recognise it...
16:14:00 <edwardk> uk still doesn't recognize it, but no one is kicking them out
16:14:04 <shapr> I still think .aq is the only viable option. It's currently unowned.
16:14:13 <Cale> http://www.sealandgov.org/
16:14:14 <shapr> Or seafloor colonization.
16:14:15 <lambdabot> Title: The Principality of Sealand
16:14:48 <edwardk> they got themselves in a right muddle because of the whole judge disavowing ownership of sealand as an autonomous entity outside of british waters during the hostage crisis
16:14:57 <edwardk> so its hard for the UK to do anything about it from what i understand.
16:15:22 <edwardk> whoa, big fire in june
16:15:27 <edwardk> news to me
16:16:52 <bringert> shapr: what does unowned mean in this context? http://www.iana.org/root-whois/aq.htm
16:16:53 <lambdabot> Title: IANA | .aq - Antarctica
16:18:29 <shapr> bringert: I mean that there is no government currently claiming ownership of the .aq land.
16:18:52 <bringert> aka Antarctica
16:19:23 <bringert> shapr: many governments have claims in Antarctica, but they have agreed to put them aside
16:19:53 <bringert> I don't think they'd let anyone new make a claim there
16:20:20 <bringert> what if you'd create a new land mass in international waters?
16:23:01 <heatsink> Heh... coding on the black market...
16:23:01 <shapr> How could you do that?
16:23:05 <edwardk> http://classroomantarctica.aad.gov.au/materials/TerritoriesCol.pdf
16:23:19 <edwardk> shows the claims
16:23:26 <bringert> shapr: find somewhere shallow, and dump lots of stuff there
16:23:29 <edwardk> but yeah, there is some big accord in which they are all set aside
16:23:57 <bringert> or find a shallow place in a volcanic region and wait for an eruption
16:24:22 <shapr> There are some aq domains - http://www.comnap.aq/
16:24:24 <lambdabot> Title: COMNAP - the National Antarctic Programs &mdash; COMNAP
16:24:29 <shapr> Using Zope even :-/
16:24:36 <Pseudonym> wHERE'S .AQ?
16:24:40 <Pseudonym> Oops.
16:24:43 <Pseudonym> Caps loCK PROBLEM.
16:24:45 <shapr> G'day Pseudonym
16:24:50 <Pseudonym> G'day.
16:24:54 <heatsink> If the seychelles go underwater, do they become international waters?
16:25:01 <bringert> Pseudonym: Antarctica
16:25:18 <edwardk> "Antarctica shall continue for ever to be used exclusively for peaceful purposes and shall not become the scene or object of international discord"
16:26:15 <bringert> shapr: do you have any hope features that you would like today
16:26:19 <shapr> Yes!
16:26:22 * shapr checks his list...
16:26:25 * bringert can't decide what to do
16:26:30 <Pseudonym> Right.
16:26:52 * Pseudonym is trying to work out what a bunch of emperor penguins would do with a server
16:26:58 <Pseudonym> Put linux on it, obviously.
16:26:59 <edwardk> http://www.aad.gov.au/default.asp?casid=76 has info on the treaty
16:27:00 <lambdabot> Title: Australian Antarctic Division - Antarctic international law
16:27:25 <Pseudonym> (Though I _think_ Tux is meant to be a fairy penguin, not an emperor.)
16:27:29 <edwardk> heh
16:27:55 <wagle> "paenguin"
16:28:32 <heatsink> Pseudonym: they'd surf the internet, of course. http://wallyandosborne.com/2005/07/27/internet-what-to-look-up/
16:28:34 <lambdabot> Title: Wally and Osborne Â» Archive Â» The Internet: What To Look Up?
16:28:42 <shapr> bringert: I'd like to have a personal area where all my items are listed, like Member folders in Plone.
16:29:37 <shapr> bringert: Here's the site I'm going to put on top of Hope, just in case it helps - http://www.zbornica.com/
16:29:38 <lambdabot> Title: Dobro Doli u Zbornicu
16:29:43 <bringert> shapr: you have that already, http://www.scannedinavian.com/hope/user/1
16:29:49 <bringert> shapr: but it could be nicer
16:30:04 * Pseudonym supposes that if they use linux in Antarctica, they'd logically use BSD in Hell
16:30:21 <shapr> bringert: Hm, forums? Seems easy enough to hack the comment plugin into a forum.
16:30:26 <bringert> shapr: so I guess I should localized Hope to croatian then?
16:30:49 <Pseudonym> Ah, coffee.  BBS
16:30:59 <shapr> bringert: Do you know Croatian?
16:31:12 <wagle> Pseudonym: antarctica seems pretty frozen over
16:31:42 <bringert> shapr: not really, but I can read maybe half of what's on that page
16:31:45 <SamB> you know, they don't have a research station in Hell...
16:32:02 <bringert> if I try hard
16:32:26 <shapr> bringert: Impressive :-)
16:33:17 <shapr> Any thoughts on a templating language? Mirjana wants to be able to build pages herself. I don't think she'd mind learning Haskell, so a DSL would be enough.
16:33:32 <bringert> half is not very much if you want to understand what they're saying
16:33:50 <shapr> She did SNOBOL, Icon, C, Prolog and a few other languages in college, but she hasn't done any programming lately.
16:33:59 <bringert> is that for page layout / design, or for content?
16:34:16 <bringert> i.e., what does "build pages" mean?
16:34:35 <shapr> Layout of content?
16:34:56 <shapr> Yeah, layout / design.
16:35:22 <shapr> I'll ask her how well she knows CSS, that would be the easiest approach.
16:35:30 <bringert> yeah, I was hoping that that could be done in CSS
16:35:35 <bringert> but of course some things can't
16:35:43 <shapr> Like what?
16:36:04 <bringert> adding text for example
16:36:15 <bringert> changing order of things doesn't work so well
16:36:34 <heatsink> If you have tiled image backgorunds and want your boxes to have a size that's a multiple of the tile size... you can't do that.
16:36:44 <bringert> duplicating list navigation controls, etc.
16:37:04 <shapr> Hm
16:40:25 <shapr> I'd like to be able to define the view of a particular mime type.
16:40:37 <bringert> for uploaded files?
16:40:39 <shapr> Like, how to display PDF documents for example.
16:40:40 <shapr> Yeah
16:41:01 <shapr> Is there a typeclass for displaying items?
16:41:08 <bringert> yes
16:41:16 <shapr> Ah, so I can already do that then?
16:41:20 * shapr boings!
16:41:49 <shapr> bringert: btw, is radestock always so friendly? :-)
16:42:04 * shapr coughs
16:42:31 <bringert> I think he is fed up with HaskellDB's lack of polish
16:42:41 <shapr> Well it is a student project...
16:43:00 <bringert> I didn't think think he was being rude
16:43:06 <shapr> ok
16:43:11 <bringert> he just wanted to ask a quick question
16:43:25 <bringert> maybe my response was too terse
16:45:12 <shapr> Can I tag a tag?
16:45:17 <bringert> not yet
16:45:26 <shapr> Just thinking about programming being a superset of haskell.
16:45:27 <bringert> you also can't tag a user
16:45:35 <shapr> hm, hadn't thought of that.
16:45:54 <mcnster> hello.  is there a reason why poll() is not somewhere in Posix.*, or can i just implement it as a ffi?
16:45:56 <shapr> Tag doesn't show the count correctly.
16:46:04 <bringert> but I want to fix at least the latter
16:46:20 <bringert> and have tags be per-user
16:46:30 <bringert> so that you can see who tagged something
16:46:47 <shapr> That'd be neat.
16:47:10 <bringert> shapr: hmm, that's weird
16:47:24 <bringert> maybe a PostgreSQL / HaskellDb thing
16:47:26 <edwardk> mcnster: its not there?
16:47:46 <mcnster> edwardk, if it is, its hiding
16:47:47 <shapr> Probably so
16:47:50 <edwardk> heh
16:47:53 <edwardk> fair nuff
16:48:14 <bringert> shapr: since it works correctly for me
16:48:18 <mcnster> i'm just wondering if there is a technical reason for its absence...
16:48:25 <edwardk> http://www.dcs.gla.ac.uk/mail-www/glasgow-haskell-bugs/msg01148.html
16:48:28 <lambdabot> Title: Re: No select in LibPosix?
16:48:29 <shapr> bringert: You're using SQLite?
16:48:48 <edwardk> but even so
16:49:07 <bringert> shapr: MySQL for http://hope.bringert.net/ FlatDB for the test setup on my laptop
16:49:08 <edwardk> i think its just a 'hey we don't have to support it coz its not in the spec' nerdy response ;)
16:49:29 <shapr> bringert: I am highly tempted to try Hope on my 770 =)
16:49:35 <bringert> shapr: but I have PostgreSQL on the laptop too, I could try it out
16:49:38 <edwardk> nevermind that people might want to be able to wait on more than a couple hundred filehandles at once or anything ;)
16:49:48 <bringert> shapr: can GHC cross-compile for it?
16:49:53 <mcnster> cool.  i'll consider it supported in the next 15 minutes ;-)
16:49:59 <edwardk> heh
16:50:06 <shapr> Nah, but JHC and YHC are possibilities.
16:50:13 <shapr> Not that I have any useful reason to run Hope on my 770...
16:51:29 <edwardk> http://www.haskell.org/~simonmar/papers/conc-ffi.pdf mentions some issues with select/poll
16:52:48 <edwardk> but it seems to be mostly in the context of trying to (ab)use it to drive the concurrent haskell's blocking io
16:54:03 * shapr finds Hope.Item.View
16:54:56 * bringert wonders how many cans of Windows Vista sparkling water he has had today
16:55:00 <bringert> at least 3
16:55:09 <shapr> Is there seriously such a thing?
16:55:15 <bringert> yes
16:55:20 <shapr> Wow
16:55:28 <bringert> lemon-lime taste
16:55:39 <bringert> just tastes like carbonated water to me
16:56:34 * shapr tries to figure out how to define a new Item type.
16:57:00 <shapr> bringert: How would I build something simple like a Link Item?
16:58:00 <bringert> shapr: look at an existing module, for example halbum2. There is an Image type in modules/halbum2/Hope/Halbum/Types.hs
16:58:15 <shapr> aha
16:58:32 <bringert> shapr: then make it an instance of ITEM
16:58:59 <bringert> shapr: and of ItemHtml, as in modules/halbum2/Hope/Halbum/View.hs
16:59:00 <shapr> Cool, phantom types.
16:59:17 <shapr> That's pretty easy.
18:13:17 <dylan> @hoogle permute
18:13:18 <lambdabot> Text.ParserCombinators.Parsec.Perm.permute :: PermParser tok st a -> GenParser tok st a
18:13:18 <lambdabot> Distribution.GetOpt.Permute :: ArgOrder a
18:14:02 <edwardk> permutations            :: [a] -> [[a]]
18:14:02 <edwardk> permutations []         =  [[]]
18:14:02 <edwardk> permutations (x:xs)     =  [zs | ys <- permutations xs, zs <- interleave x ys ]
18:14:02 <edwardk>   where interleave          :: a -> [a] -> [[a]]
18:14:02 <edwardk>         interleave x []     =  [[x]]
18:14:04 <edwardk>         interleave x (y:ys) =  [x:y:ys] ++ map (y:) (interleave x ys)
18:14:30 <edwardk> (from the other day on channel when the subject arose)
18:26:14 <dylan> @list
18:26:15 <lambdabot> list [module|command]. Where modules is one of:
18:26:15 <lambdabot> babel base compose dice dict djinn drhylo dummy elite eval fact fresh haddock help hoogle instances karma lambda localtime log more pl poll pretty quote search seen slap spell state system tell todo
18:26:15 <lambdabot> topic type unlambda url version vixen where
18:26:28 <bd_> @djinn [l] -> [[l]]
18:26:28 <lambdabot> -- f cannot be realized.
18:26:44 <bd_> @djinn (x,y)->(y,x)
18:26:45 <lambdabot> f (a, b) = (b, a)
18:26:51 <bd_> @djinn (x,y)->x
18:26:51 <lambdabot> f (a, _) = a
18:26:58 <bd_> @djinn [x]->x
18:26:59 <lambdabot> -- f cannot be realized.
18:27:53 <wagle> @djinn (x : y) = x
18:27:53 <lambdabot> Cannot parse command
18:28:13 <wagle> @djinn (x:y) = x
18:28:14 <lambdabot> Cannot parse command
18:28:17 <bd_> @help drhylo
18:28:17 <lambdabot> drhylo provides: hylo
18:28:21 <bd_> @help hylo
18:28:21 <lambdabot> hylo <expr>. Derive hylomorphism for <expr>. Based on DrHylo.
18:28:22 <lambdabot> Uses the Pointless.Combinators from:
18:28:22 <lambdabot>  http://wiki.di.uminho.pt/twiki/bin/view/Alcino/PointlessHaskell
18:28:22 <lambdabot> Mirrored:
18:28:22 <lambdabot>  http://www.cse.unsw.edu.au/~dons/Pointless/
18:28:22 <edwardk> heh
18:28:26 <bd_> oO
18:28:35 <bd_> @hylo (++)
18:28:36 <lambdabot> drhylo module failed: IRCRaised user error (SrcLoc {srcFilename = "<unknown>", srcLine = 1, srcColumn = 5}: Parse error)
18:28:42 <edwardk> @. pointless djinn (x,y) -> (y,x)
18:28:42 <lambdabot> f = uncurry (flip (,))
18:28:50 <edwardk> muahahaa
18:29:09 <wagle> what is djinn?
18:29:21 <edwardk> it tries to figureout a function with a specified type signature
18:29:28 <bd_> @. pointless \v -> let n = v:(map (+v) n) in (n !! v)
18:29:28 <lambdabot> compose module failed: IRCRaised Parse error: "\\v"
18:29:36 <bd_> @. pointless func v = let n = v:(map (+v) n) in (n !! v)
18:29:37 <lambdabot> compose module failed: IRCRaised Parse error: "func"
18:29:37 <wagle> @djinn [x,y] = x
18:29:38 <lambdabot> Cannot parse command
18:29:51 <edwardk> the @. concatenates two plugins
18:29:51 <bd_> @pointless \v -> let n = v:(map (+v) n) in (n !! v)
18:29:52 <lambdabot> ap (flip (!!)) (fix . liftM2 (.) (:) (map . (+)))
18:30:03 <bd_> ah
18:30:41 <edwardk> afk
18:30:44 <bd_> @help paste
18:30:45 <lambdabot> paste. Paste page url
18:30:48 <bd_> @paste
18:30:48 <lambdabot> http://paste.lisp.org/new/haskell
18:31:42 <lisppaste2> dylan pasted "permute a list" at http://paste.lisp.org/display/22946
18:35:09 <dylan> so, bd_ and I (well, really just bd_) are trying to make a function prettier.
18:51:29 <dons> morning all
18:51:30 <lambdabot> dons: You have 2 new messages. '/msg lambdabot @messages' to read them.
18:51:53 <dons> oh, thankyou ms. bot.
19:50:22 * c7g is away: (Auto-Away after 10 mins) [BX-MsgLog On]
19:52:11 <dons> boo
20:09:35 <LordBrain> Any of the Conjure coders here?
20:10:32 <LordBrain> i suspect i am using a bad version of Data.ByteString or something...
20:10:56 <lisppaste2> LordBrain pasted "Errors building Conjure Bittorrent Client" at http://paste.lisp.org/display/22951
20:12:09 <dons> LordBrain: hmm. bad version? which version?
20:12:22 <LordBrain> i think its the latest.. but by bad i mean.. incompatible
20:12:41 <dons> yep. looks like Conjure hasn't tracked the last change to the api
20:12:52 <dons> its missing an 'import Data.ByteString.Base' in that module
20:12:59 <LordBrain> oooooh
20:13:07 <dons> try adding that to BEncode/BLexer.hs
20:13:13 <LordBrain> thanks
20:14:13 <LordBrain> hmmmm it used a qualified import of Data.ByteString.Char8
20:14:21 <LordBrain> as BS
20:14:56 <dons> ok
20:15:09 <LordBrain> so now i would have to understand what to leave BS, and what to change to something else or unqualified
20:15:29 <LordBrain> i guess thats the dissadvantage of qualified imports..
20:15:43 <dons> well, just import qualified Data.ByteString.Base as BS too
20:15:43 <dons> ?
20:15:49 <LordBrain> oh
20:15:53 <LordBrain> i didnt realize i could do that
20:16:01 <dons> if i understand your problem correctly.
20:16:10 <dons> yes, you can. it's a nice thing ::)
20:17:10 <LordBrain> ./BEncode/BLexer.hs:23:8:
20:17:12 <LordBrain>     Couldn't match `GHC.Word.Word8' against `Char'
20:17:29 <LordBrain> hmmm
20:18:07 <dons> looks like something is expecting a Char, but you're now using a Word8 op
20:18:14 <dons> Char operations come from *.Char8
20:18:24 <dons> everything else is a Word8 op
20:18:42 <LordBrain> hmmm
20:21:08 <LordBrain> its either from BS.span or BS.unpack
20:22:14 <dons> well, it should give you a line/col number in the error?
20:22:50 <LordBrain> well the exact reported position puts me on whitespace
20:23:13 <LordBrain> here it is with 1 line of context on either side ;)
20:23:15 <LordBrain>         '-' -> let (digits,rest') = BS.span isDigit rest
20:23:15 <LordBrain>                    number = read (BS.unpack digits)
20:23:15 <LordBrain>                in TNumber (-number) : lexer rest'
20:23:57 <LordBrain> (inside a case statement)
20:24:32 <LordBrain> i would post the whole sorce.. but i think its already online...
20:25:51 <LordBrain> http://darcs.haskell.org/~lemmih/conjure/Conjure/BEncode/BLexer.hs
20:26:38 <dons> probably BS.unpack? shouldn't be a Char8 unpack?
20:26:53 <dons> no, it should be, with that 'read' there
20:28:03 <LordBrain> correction, the url is http://darcs.haskell.org/~lemmih/conjure/BEncode/BLexer.hs
20:30:13 <LordBrain>  hmm FPS doesnt have a changelog
20:30:41 <LordBrain> well maybe darcs does that automatically somewhere and i just dont understand darcs yet...
20:31:26 <dons> LordBrain: the change log is 'darcs changes'
20:31:37 <dons> i.e. darcs changes | less
20:32:07 <LordBrain> ok
20:32:08 <LordBrain> thanks
20:34:06 <LordBrain> i see your name is in there, go dons
20:35:15 <dons> hehe
20:36:03 <dylan> mmm. I like haskell's namespace stuff.
20:36:52 <dons> dylan: yeah? how so?
20:36:56 <dylan> it's hierarchical.
20:37:10 <dons> well, that's good, yes :)
20:37:22 <dons> sometimes the module system feels tacked on, though. no functors
20:37:29 <dylan> with directories and such.
20:37:34 <LordBrain> hmmm
20:37:48 <dons> dylan: keeps things well organised
20:37:57 <dylan> Well, in ocaml, Foo.Bar would mean Bar is defined in module Foo, which must be foo.ml
20:38:27 <dons> ah, so its more flexible than that
20:38:32 <dons> in haskel.
20:38:34 <dylan> yes.
20:38:43 <dylan> it's like perl or python.
20:39:06 <dons> that's an interesting comparison. i hadn't though of that.
20:39:13 <dons>  but yes, its similar to perl. hmm
20:39:40 <LordBrain> well.. not that i would want to contaminate haskell with a java convention... but for addon modules, it seems there is nothing to prevent to packages using exactly the same spot in the hierarchy... java i understand has this reverse-domain-name convention for that...
20:39:47 <dons> dylan: have you had a chance to hack up some haskell then?
20:40:06 <dons> LordBrain: right. there's nothing atm. but we're fixing that
20:40:15 <dylan> dons: I wrote a randomly chosen rot-n cipher thing.
20:40:28 <dons> ok. good
20:40:36 <dylan> I've written some haskell before, actually.
20:40:40 <LordBrain> dons: what ideas are floating around for that?
20:40:50 <dons> yeah, i suspected as much dylan :)
20:41:10 <dons> LordBrain: oh, there's been a long discussion on libraries@ about splicing modules and so on
20:41:16 <dylan> plus I tend to read LtU, and all the interesting papers use haskell. :P
20:41:20 <LordBrain> also seems to cause problems with API changes... like maybe API's should have versions... and things
20:41:20 <dons> i haven't been following closely
20:41:25 <dons> dylan: true!
20:41:33 <dons> its a conspiracy
20:41:49 <dons> LordBrain: well, with cabal, you get package versions
20:42:02 <dons> (as long as you don't depend on a darcs version of some lib ;)
20:42:15 <LordBrain> hmm
20:42:23 <dylan> (on a side note... interesting things for ocaml tend to require patches to ocamlc, where at least some interesting haskell things just work right off the bat in ghc...)
20:42:49 <dons> oh, you means as libraries, rather than extensions to the compiler?
20:42:57 <dylan> Yeah.
20:43:08 <dons> yes, this has been a bit of a feature. laziness + higher order = good ability to write new syntax
20:43:21 <dylan> the license might have something to do with it too
20:43:37 <dons> oh, that's interesting. what do you mean by that?
20:43:40 <dylan> ocaml's compiler and such are QPL.
20:43:54 <dylan> any changes to it must be only distributed as patches.
20:44:01 <dons> hmm. that's not so nice
20:44:15 <dons> we all have our own private ghc's with funny things hacked in. well, some of us do
20:44:19 <LordBrain> well technically darcs is distributed as patches, right? ;)
20:44:23 <dylan> the reasoning behind it is the ocaml compiler represents a lot of research or somesuch
20:45:04 <dons> huh. haskell's lucky to have been born as this `open' response to miranda
20:45:21 <dylan> Aye.
20:45:27 <dons> so it got infused with openness from day 1
20:45:42 <LordBrain> yeah... and maybe we're lucky simonpj wasnt yet working at microsoft... not sure how that works
20:45:49 <Adamant> patches only? that blows
20:45:49 <dylan> hmm, there seems to be a few languages named after moons of Uranus...
20:45:53 <dons> also, ghc's supposed to be a research platform for anyone to hack on
20:46:12 <dylan> old languages, anyway. Oberon, Miranda...
20:46:20 <dons> LordBrain: well, he's free to do what he likes. MS doesn't own him, he works for an organisation funded by MS
20:46:31 <LordBrain> oh thats good
20:47:15 <dons> i.e. if you go and visit the GHC HQ, there's an awful lot of linux boxes running
20:47:34 <LordBrain> well.. i'm not sure microsoft has a problem with its researchers using linux
20:47:42 <dons> no, apparently not.
20:47:46 <LordBrain> they hired that gentoo guy after all
20:47:47 <augustss> > 1+2
20:47:48 <lambdabot>  3
20:47:49 <dons> they just want those papers with "MS Resarch' on them
20:47:56 <dons> morning lennart
20:48:00 <augustss> @pl \ x -> x
20:48:01 <lambdabot> id
20:48:03 <dons> or, hmm, night!
20:48:53 <dylan> it's just like when a place a sea-food / thrift store purches a baseball team.
20:49:03 <augustss> @pl \ g -> ff (\ a -> (g, a)) (f g)
20:49:04 <lambdabot> liftM2 ff (,) f
20:49:10 <dylan> they want the team named "Bill's Pawn and Prawn Basebal Team", aye?
20:49:16 <dons> yeah
20:49:27 <dons> hehe
20:50:18 <LordBrain> Temporary failure resolving 'haskell-unsafe.alioth.debian.org'
20:50:23 <LordBrain> has this moved or something?
20:50:25 <LordBrain> anyone know?
20:50:45 <augustss> dons: who wrote the pl plugin?
20:51:03 <dons> Thomas Yaeger
20:51:06 <dons> let me find you the ref/code
20:51:50 <dons> http://www.cse.unsw.edu.au/~dons/code/lambdabot/Plugin/Pl/
20:51:51 <lambdabot> Title: Index of /~dons/code/lambdabot/Plugin/Pl
20:51:55 <Korollary> hi lennart
20:52:00 <augustss> thanks!
20:52:06 <dons> Thomas has gone off to do a math degree I think. been a while since we've seen him round here
20:52:09 <augustss> Phil Wadler wanted to know
20:52:22 <dons> cool!
20:52:27 <LordBrain> i'm glad i majored in math
20:52:46 <augustss> he couldn't decipher what the liftM2 was ;)
20:52:55 <augustss> neither could I
20:52:56 <dons> heh
20:53:14 <dons> augustss: there's a bit of a history of @pl here http://www.haskell.org/haskellwiki/Pointfree
20:53:15 <lambdabot> Title: Pointfree - HaskellWiki
20:53:15 <augustss> @hoogle liftM2
20:53:16 <lambdabot> Monad.liftM2 :: Monad a => (b -> c -> d) -> a b -> a c -> a d
20:53:16 <lambdabot> Control.Monad.liftM2 :: Monad m => (a1 -> a2 -> r) -> m a1 -> m a2 -> m r
20:53:36 <dons> Thomas was a bit sneaky. He put in lots of rules that use the (-> a) monad
20:53:44 <dons> we were very confused for a few months
20:53:50 <augustss> yes, I've noticed
20:54:12 <LordBrain> i dont think a computer science degree at my school would have been theoretical enough
20:55:42 <dons> @pl \(a,b) -> (f a, g b)
20:55:43 <lambdabot> f *** g
20:57:16 <LordBrain> i heard comp sci people there talk of lisp.. but never haskell.. that was back in 99 tho.
20:57:38 <dons> well, that's still after 9 years of haskell, yeah?
20:57:48 <LordBrain> yeah..
20:59:05 <LordBrain> it could be i just didnt notice or listen to the right comp sci people
20:59:36 <LordBrain> it seemed actually they were more into C and C++ mostly, and lisp for AI stuff.
20:59:50 <Korollary> that is true in a lot of places
21:00:09 <Dino_> I'm looking at installing hscurses. The register target, that does something with making the ghc aware of it?
21:00:23 <jmob> LordBrain: My school teachs SML
21:00:42 <dons> Dino_: yes, from memory, hscurses registers itself in the package system that way
21:00:44 <jmob> LordBrain: Albeit later in your career as a CS student
21:00:59 <LordBrain> System Management Language?
21:01:16 <LordBrain> or Standard ML?
21:01:17 <jmob> LordBrain: standard meta language, a strict fp language
21:01:26 <LordBrain> ok
21:02:30 <Dino_> Is this separate from install because it need only be done once (or rarely)? But the rest of the stuff may change and be installed repeatedly without doinking the registration.
21:02:31 <LordBrain> there sure are a lot of SMLs
21:02:47 <Pegazus> @type map map
21:02:47 <jmob> LordBrain: The current prof. that teaches the "programming paradigms" class pretty much just makes it in to an SML class, with a little prolog at the end.
21:02:48 <lambdabot> forall a b. [a -> b] -> [[a] -> [b]]
21:02:55 <Pegazus> good
21:02:56 <LordBrain> there's something called Spacecraft Markup Language
21:02:56 <Pegazus> :)
21:03:31 <jmob> I think in the context of #haskell you can assume Standard ML first.
21:03:55 <Korollary> Dino_: that is correct.
21:04:11 <LordBrain> wikipedia says Standard ML means Standard Markup Language..
21:04:26 <LordBrain> and doesnt even mention the Meta
21:04:48 <dons> Markup?
21:04:51 <dons> never heard that before
21:05:03 <dons> ?karma- wikipedia
21:05:04 <lambdabot> wikipedia's karma lowered to -1.
21:05:26 <Pegazus> @type foldr foldr
21:05:27 <lambdabot>   Occurs check: cannot construct the infinite type: t = [a] -> t
21:05:28 <lambdabot>    Expected type: (a -> ([a] -> t) -> [a] -> t) -> ([a] -> t) -> [a] -> t
21:05:37 <Pegazus> mmmm what does that means?
21:05:42 <LordBrain> oh maybe i read the wrong line or something, nevermind
21:05:48 <LordBrain> i checked again and i dont see it
21:05:53 <Pegazus> @type foldr
21:05:54 <lambdabot> forall b a. (a -> b -> b) -> b -> [a] -> b
21:06:14 <Pegazus> @filter filer
21:06:14 <lambdabot> Unknown command, try @list
21:06:17 <Pegazus> @filter filter
21:06:18 <lambdabot> Unknown command, try @list
21:06:21 <Pegazus> @type filter filter
21:06:23 <lambdabot>   Expecting a function type, but found `Bool'
21:06:23 <lambdabot>    Expected type: (a -> Bool) -> Bool
21:06:35 <Pegazus> @type filter
21:06:36 <lambdabot> forall a. (a -> Bool) -> [a] -> [a]
21:06:40 <Pegazus> @type map filter
21:06:41 <augustss> @type id id
21:06:41 <lambdabot> forall a. [a -> Bool] -> [[a] -> [a]]
21:06:42 <lambdabot> forall a. a -> a
21:06:52 <Pegazus> :)
21:06:55 <Pegazus> @type x x
21:06:57 <lambdabot> Not in scope: `x'
21:06:57 <lambdabot>  
21:06:57 <lambdabot> <interactive>:1:2: Not in scope: `x'
21:07:37 <Pegazus> @type not
21:07:39 <lambdabot> Bool -> Bool
21:07:48 <Pegazus> mm is there any function with signature a->b?
21:07:58 <Dino_> Thank you.
21:08:08 <dons> Pegazus: you can also talk to lambdabot in a private msg :) /msg lambdabot @bot
21:08:19 <LordBrain> @hoogle a->b
21:08:21 <lambdabot> Control.Monad.Error.throwError :: MonadError e m => e -> m a
21:08:21 <lambdabot> Control.Monad.State.put :: MonadState s m => s -> m ()
21:08:21 <lambdabot> Control.Monad.Writer.tell :: MonadWriter w m => w -> m ()
21:08:27 <LordBrain> hmm
21:08:36 <dons> LordBrain: missing a space or two, i think
21:08:42 <dons> @hoogle a -> b
21:08:43 <LordBrain> @hoogle a -> b
21:08:44 <lambdabot> Control.Monad.Error.throwError :: MonadError e m => e -> m a
21:08:44 <lambdabot> Control.Monad.State.put :: MonadState s m => s -> m ()
21:08:44 <lambdabot> Control.Monad.Writer.tell :: MonadWriter w m => w -> m ()
21:08:45 <lambdabot> Control.Monad.Error.throwError :: MonadError e m => e -> m a
21:08:45 <lambdabot> Control.Monad.State.put :: MonadState s m => s -> m ()
21:08:46 <lambdabot> Control.Monad.Writer.tell :: MonadWriter w m => w -> m ()
21:08:47 <LordBrain> oops
21:08:50 <dons> nope hmm
21:09:00 <dons> well, its not too bad.
21:09:05 <dons> ?hoogle+
21:09:05 <lambdabot> Prelude.const :: a -> b -> a
21:09:05 <lambdabot> Prelude.seq :: a -> b -> b
21:09:05 <lambdabot> Control.Parallel.par :: a -> b -> b
21:09:12 <dons> and so on..
21:09:21 <LordBrain> const
21:09:35 <LordBrain> is close...
21:09:38 <LordBrain> or wait
21:09:46 <dons> ?hoogle+
21:09:46 <lambdabot> GHC.Conc.pseq :: a -> b -> b
21:09:46 <lambdabot> Maybe.fromMaybe :: a -> Maybe a -> a
21:09:46 <lambdabot> Prelude.($!) :: (a -> b) -> a -> b
21:10:45 <Pegazus> thanks dons :)
21:13:41 <jmob> > :t system
21:13:42 <lambdabot>  Parse error
21:13:54 <jmob> @type system
21:13:55 <lambdabot> Not in scope: `system'
21:14:13 <jmob> @type System.Cmd.system
21:14:14 <lambdabot> String -> IO GHC.IOBase.ExitCode
21:15:24 <jmob> > do { x <- System.Cmd.system("echo foo") ; return x }
21:15:25 <lambdabot>  Not in scope: `System.Cmd.system'
21:15:29 <cmarcelo> JohnMeacham: hello. is jhc supposed to compile with GHC 6.5 (quasi-HEAD)?
21:15:35 <jmob> sadness
21:16:46 <lispy> the pretty printer is cool (had to share that)
21:17:14 <lispy> jmob: you can't do IO with lambdabot
21:17:20 <lispy> > return 1 :: IO Int
21:17:21 <lambdabot>  No IO allowed
21:17:41 <lispy> so even if you had System.Cmd.System you'd be sunk
21:18:00 <jmob> Ah, sweet.
21:18:08 <dons> > putChar 'x'
21:18:09 <lambdabot>  No IO allowed
21:18:33 <jmob> Can you force an infinite loop?
21:18:42 <lispy> you can but lambdabot will just terminate the look
21:18:44 <lispy> er loop
21:18:52 <lispy> > [1..]
21:18:53 <lambdabot>  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,...
21:19:01 <dons> > let f () = f () in f () :: ()
21:19:05 <lambdabot> Terminated
21:19:05 <dylan> > let foo r = foo (r + 1) in foo 1
21:19:06 <lambdabot>  Add a type signature
21:19:23 <dons> > let foo r = foo (r + 1) in foo 1 :: ()
21:19:26 <lambdabot> Terminated
21:19:35 <dons> ?help run
21:19:36 <lambdabot> run <expr>
21:19:36 <lambdabot> You have Haskell, 3 seconds and no IO. Go nuts!
21:20:01 <jmob> Does lambdabot spawn a process to controll excution time?
21:20:06 <dons> yep
21:20:06 <zarvok> @vixen which languages will win the icfp contest?
21:20:07 <dylan> it's really cool to be able to banish all IO like that.
21:20:07 <lambdabot> i'm 19
21:20:15 <lispy> > let fibs = 1 : 1 : zipWith (+) fibs (tail fibs) in fibs !! 100000000
21:20:19 <lambdabot> Terminated
21:20:43 <dons> dylan: yeah. since the compiler generates a proof that there's no IO, it makes running arbitrary code much less stressful :)
21:21:04 <lispy> but, how do you get around unsafePerformIO?
21:21:10 <LordBrain> dons, it turns out i was wrong about where the error was... i would have known that if i read the whole error message instead of just the line and column
21:21:11 <dons> its not in scope
21:21:26 <jmob> dons: I implemented a web based python interpreter
21:21:38 <dons> lispy, so its a combination of a type checker, and a trusted core
21:21:52 <dons> jmob: how do you control IO?
21:21:54 <dons> sand boxing?
21:22:09 <jmob> dons: but I used a pretty big sledge hammer since I created a Xen VM for each interpreter that was requested.
21:22:16 <dons> yikes
21:22:28 <lispy> dons: FWIW, i mentioned this to a perl hacker and he told me that in perl there is a way to make perl gaurantee that you're not doing IO, it shocked me
21:22:44 <dons> well, hmm. i've not heard that before.
21:22:47 <dylan> with Safe.
21:23:05 <dons> so it checks you only use a trusted core?
21:23:17 <dylan> you can deny the opcodes for I/O, and restrict access to only particular modules.
21:23:24 <dons> opcodes. huh
21:23:32 <dylan> perl is compiled to a bytecode.
21:23:38 <dons> yeah,
21:23:45 <dons> so that's a reasonable solution, i think.
21:23:49 * dylan is no safe expert.
21:23:59 <jmob> dons: the system image was basically only had a c library and python, no much more, with not very much memory
21:24:17 <dylan> "man Safe" should give info on any system with perl
21:24:33 <LordBrain> perl 6 sounds like its going to have a lot of functional ideas... currying for example
21:24:46 <lispy> dons: i guess with the way perl is used i can see why it's built into the language...
21:25:01 <dons> lispy: yes
21:25:09 <jmob> LordBrain: Perl 6 should be SomethingElse 1.0
21:25:16 <dons> i mean, starting with taint checking and all that
21:25:23 <LordBrain> jmob.. yeah it kinda sounds like that
21:25:43 <jmob> LordBrain: Changing the language that much and keeping the name reminds be of Visual Basic
21:26:29 <dylan> well, it still keeps the spirit of perl.
21:26:51 <dylan> which is to have every language feature that is reasonabilly possible.
21:26:52 <lispy> VB has actually blossomed into a usable POS instead of just a POS...it surprises me
21:27:12 <LordBrain> jmob.. well its going to be able to run in some kind of backward compatiblity mode i think
21:27:25 <dylan> delimited dynamic variables? perl can do that. :)
21:27:36 <dons> heh
21:27:40 <dylan> not very well, not with very many gurantees, but anyway
21:27:58 <LordBrain> it will recognize perl 5 files as being perl 5 and act accordingly
21:28:09 <jmob> lispy: Currently I feel like there's no reason to use VB, other than for scripting a heavily MS dominated application, C# is the "real" .NET language.
21:28:59 <lispy> jmob: yeah, C# is a can of worms too tho
21:29:06 <jmob> lispy: I've had the fortune of not having to deal with VB until my most recent employer
21:29:12 <lispy> jmob: annymous functions + threads == evil
21:29:17 <dylan> The syntax, oh my word, the synax! (of C#)
21:29:39 <jmob> dylan: ...isn't much different from Java/C?
21:29:47 <dylan> Exactly!
21:29:50 <lispy> yeah
21:29:57 <LordBrain> lol
21:30:09 <lispy> my complain with VB is that my code is totally brittle.
21:30:09 <dons> hehe
21:30:23 <jmob> dylan: I don't like the MS EveryThingHasToBeUpperCasedExceptVariables convention.
21:30:24 <lispy> *I* can't seem to write high quality code in VB
21:30:25 * dylan quit a job over C# (and the IDE it comes with)
21:31:01 <dylan> jmob: hungaring notation is evil, indeed. Especially prefixing every class with 'cls' and using 's32' for ints...
21:31:03 <LordBrain>  i think the syntax of C was reasonable for C, but then everybody learned C, and everything else copied it to make it easier for others too learn based on what they already know..
21:31:05 <jmob> dylan: The IDE supposedly improved a lot the second pass around (or so I was told).
21:31:08 <dylan> *hungarian
21:31:15 <dylan> jmob: this was earlier this year. :)
21:31:20 <LordBrain> and it no longer seems right
21:31:35 <jmob> dylan: Oh really!  Maybe it sucked a lot more before.
21:31:38 <lispy> true hungarian notation is apparently really handy and nice but MS has degenerated from true hungarian and uses stupid type prefixing
21:31:39 <LordBrain> like java for example...
21:31:53 <Korollary> lispy: that was it, tho
21:32:02 <Korollary> type prefixing that is
21:32:05 <dylan> struct *foo[] -- not a good thing.
21:32:26 <lispy> have you heard Joel on Software's rant about hungarian notation?
21:32:39 <Korollary> I read it a long time ago
21:32:40 <LordBrain> suffers from being too much like C++, and C++ is cooler.. because the one can reason out somewhat a point to all the overhead, while in java it seems like the overhead is there to make it more c++ like...
21:32:47 <lispy> he uses it to prefix "unsafe" strings compared with "safe strings" (for outputting in a webapp)
21:33:15 <lispy> the more i program in haskell the more i despise C++
21:33:22 <dylan> Has no one else encountered the "prefix every class name with 'cls'" thing?
21:33:43 <jmob> dylan: I haven't yet, certainly encountered the C prefix though.
21:33:49 <lispy> dylan: i've seen other prefixes but not that one
21:33:52 <Korollary> C & I for MS stuff mostly
21:34:00 <Korollary> IUnknown, etc.
21:34:01 <jmob> CArray, CList, CPoop...
21:34:15 <lispy> IUnknown and IDispatch are COM/OLE
21:34:16 <dylan> the more functional programming I use, the more bizzare (to non-FP people, anyway), my one-off perl scripts become.
21:34:49 <lispy> yeah, my code is getting obtuse for non FP people
21:34:59 <lispy> but for me it's getting easier to read/understand :)
21:35:06 * int-e is reminded of http://www.joelonsoftware.com/articles/Wrong.html (it deals quite a bit with what hungarian notation should be and what people made of it)
21:35:08 <lambdabot> Title: Making Wrong Code Look Wrong - Joel on Software
21:35:17 <jmob> lispy: doing FP stuff it C++ sucks though.
21:35:23 <LordBrain> i'm not familiar with using FP in perl
21:35:32 <RyanT5000> @karma+ joelonsoftware
21:35:32 <lambdabot> joelonsoftware's karma raised to 1.
21:35:36 <RyanT5000> that guy is awesome
21:35:36 <jmob> lispy: the overhead is ridiculous to the point of being pointless.
21:35:52 <LordBrain> is there support for it? or do i have to always for example, right my own version of filter etc?
21:35:59 <dylan> hmm?
21:36:04 <dylan> in perl?
21:36:07 <LordBrain> yeah
21:36:14 <Korollary> There is a Functional over at CPAN
21:36:15 <dylan> perl calls filter "grep"
21:36:25 <LordBrain> oh yeah thats right
21:36:32 <dylan> grep foo($_), @list;
21:36:50 <jmob> Python actually has filter, or generator expressions.
21:37:13 <lispy> that's like list comps. right?
21:37:52 <jmob> yes, python has lisp comps too... but I mentioned generator expressions since they're essestially "lazy" descriptions of a list.
21:38:00 <lispy> i played with the idea of writing my latest app at work in python and gave up when i saw python using 500mb of ram to parse a file and generate an xml version...
21:38:10 <lispy> ah right
21:38:15 <lispy> "streams" as they are often named
21:38:49 <lispy> i bet my haskell version will be able to do it lazily and thus use a much lower overhead while doing more
21:38:59 <dylan> I don't notice much difference between python and perl. Except perl has nicer HTTP libraries.
21:39:01 <lispy> but i don't have it hooked up end to end to do the benchmark yet
21:40:06 <lispy> is anyone here interesting in a library for generating Spreadsheet ML (the XML inputs files for excel)?
21:41:04 <dylan> you said XML in the same sentence as excel. That is scary
21:41:27 <lispy> well, it was easier than figuring out a way to generate .xls files
21:41:34 <LordBrain> hmmm python is easier to learn i think, fewer operators, takes a one size fits all appraoch... import your modules.. and whip out your script
21:41:53 <dylan> I still need to find a good 'realish' project for getting used to haskell.
21:42:02 <lispy> python is deceptively easy
21:42:17 <lispy> dylan: contribute to darcs!
21:42:46 <dylan> lispy: Not interested. Darcs is cool, but I'm tied in to using svk right now.
21:43:00 <lispy> ah
21:43:07 <dylan> ($HOME lives in svk)
21:43:08 <LordBrain> lispy: why deceptively?
21:43:20 <lispy> LordBrain: at work we use python to script our main applications
21:43:27 <lispy> LordBrain: i run into python weirdness a lot
21:43:35 <LordBrain> hmm ok
21:43:42 <dylan> Example: Python's standard HTTP libraries.
21:43:42 <LordBrain> example?
21:43:48 <LordBrain> oh
21:43:56 <dylan> They give you *TEXT* to work with, as the result of HTTP requests.
21:44:09 <dylan> perl's LWP gives you objects.
21:44:11 <LordBrain> yeah... i've heard there's a lot of strangeness in the code thats out there to import
21:44:21 <lispy> LordBrain: COM can be tricky (but that's an unfair example), threading is not as easy as it looks
21:44:47 <lispy> and yeah, every library seems to be different
21:45:15 <dylan> I was very surprised when urllib and urllib2 turned out to be very non-"objecty"
21:45:42 <dylan> and twisted (a networking / concurrency library) is utterly insane. very useful, but insane.
21:45:42 <lispy> python doesn't seem to be terribly functional or objecty even though it supports both at least a little
21:46:09 <lispy> well, i need to get going, meeting a friend at the pub
21:46:16 <lispy> see you guys later!
21:46:18 <dylan> which is weird, as people always rag on perl for being less "objecty" than python.
21:47:16 <LordBrain> hmm maybe what they are talking about is how you get a lot more stuff built into the language in perl, rather than having a small language with modules to import
21:48:01 * dylan has never had a problem remembering all 213 builtin functions.
21:48:08 <LordBrain> i think perls approach does make a higher learning curve.. you have to use it regularly or else its kind of a pain, where as python, you can be real causual
21:48:09 <dons> heh
21:49:55 <dylan> I wouldn't say that. I don't need to know very much to use perl. Although, I'm biased... I learned it first at age 15 or so.
21:50:14 <dylan> The syntax is a lot more complex, though
21:50:43 <LordBrain> python, you can forget everything, and relearn each time you go to program, and its not a big deal.
21:51:35 <dylan> I don't remember ever having to relearn perl stuff... common lisp, yes. C++, yes. But not perl.
21:51:59 <dylan> "hmm, I did something strange and got a syntax error. I best... not do the strange thing"
21:52:11 <LordBrain> maybe you just did a lot of perl
21:52:25 <dylan> well, it's a first programming language.
21:52:29 <dylan> probably counts for something.
21:52:47 <dylan> it manages to feel smaller than C or C++ to me, though.
21:53:11 <LordBrain> c++ is huge too
21:53:18 <int-e> but C?
21:53:21 <LordBrain> if you count the standard libs
21:53:31 <LordBrain> C is medium size i think
21:53:43 <LordBrain> if you include the standard libs
21:54:09 <dylan> if I remember POSIX, lots of perl just works.
21:54:10 <LordBrain> medium-large
21:54:25 <dylan> e.g. printf, socket, etc.
21:54:28 <LordBrain> pascall was smaller i think
21:54:31 <LordBrain> than c
21:54:40 <dylan> modula-2 is was smaller than C.
21:54:46 <LordBrain> yeah
21:54:52 <dylan> Wirthian languages focused on making things simple.
21:54:54 <LordBrain> modula-2 is what pascal was based on right?
21:55:08 <dylan> No, Pascal is an ancestor of modula-2
21:55:13 <LordBrain> oh
21:55:16 <LordBrain> got it backwards
21:55:23 <int-e> modula 2 is pascal with modules ... or so
21:55:24 <LordBrain> anyway, yeah
21:55:35 <LordBrain> oh turbo pascal had units, which were cool
21:55:47 <int-e> I know. But Wirth's Pascal didn't.
21:55:52 <dylan> Pascal -> Modula -> Modula-2 -> Oberon -> Oberon-2
21:55:58 <LordBrain> youd tell it to use a unit, and it would only grab from it the code it needed
21:56:09 <dylan> Somewhere in there, Ada was forked off.
21:56:24 <dylan> Wirth didn't/doesn't think very highly of Ada, as I recall reading.
21:56:57 <LordBrain> scheme is kinda retro in that sense of aiming for small
21:57:08 <LordBrain> it seems to me
21:57:31 <dylan> well, I don't think anyone seriously tries to make big languages these days.
21:57:40 <LordBrain> well...
21:57:52 <dylan> haskell is complex, but that is mostly the type system, no?
21:57:57 <LordBrain> maybe thats because langauges are so huge nowadays everyone longs for the good ole days
21:58:05 <int-e> don't forget the syntactic sugar
21:58:14 <LordBrain> yeah lots of sugar in haskell
21:58:15 <int-e> that's quite hard for a beginner.
21:58:17 <LordBrain> but i like it
21:58:22 <dylan> int-e: I come from perl. Syntax sugar is something I'm used to. :)
21:58:25 <dons> dylan: yeah, the type system is fairly big. the grammar is tricky. but there's still, what , 5 implementations of haskell
21:58:30 <dons> so it can't be too hard..
21:58:51 <int-e> dylan: it's a different level of complexity. much easier to learn than the type system I guess.
21:59:11 <dylan> I used to, for example, hate python's indent syntax.
21:59:19 <dons> haskell is just loaded with so many concepts. i'm not even close to understanding all the concepts people employ
21:59:22 <dylan> then I learned ocaml... since then, I don't care what the syntax is.
21:59:23 <dons> no oneis
21:59:53 <dylan> dons: which is a good thing. :)
22:00:03 <dons> particularly on type level programming, that's a relatively new, and unexplored area
22:00:13 <dons> no one really knows where its going to end up
22:00:40 <dons> dylan: right. lots of fun things to explore
22:00:58 <LordBrain> the nice thing about haskell sugar, is its math like... and so its not hard for begginers if those beginners are like coming from the right background
22:01:47 <wolverian> dylan, Ada seems nice to me, especially the new revision.
22:02:07 <dylan> did I say non-nice? I mean, it's huge. Doesn't mean it isn't nice.
22:02:20 <LordBrain> hmmm i have trouble seeing the point to ada
22:02:30 <wolverian> I'm just saying that to put my opinion against Wirth's. naturally mine is just as important, if not more. ;)
22:02:45 <LordBrain> of course i'm not up to speed on how its evolved..
22:03:09 <wolverian> LordBrain, it's a nice try at making a high level low level language.
22:03:19 <dylan> I wouldn't want to write something for fun in Ada.
22:03:27 <wolverian> me neither.
22:03:36 <LordBrain> wolverian: sounds kinda like c++'s goal
22:03:38 * dylan sleeps.
22:03:42 <LordBrain> at least in my mind
22:03:43 <wolverian> LordBrain, except c++ sucks. ;)
22:03:48 <LordBrain> hehehehe
22:03:58 <wolverian> well, no. but c++ is complicated where ada is merely complex.
22:06:06 <LordBrain> i prefer c++, but i dont know ada
22:06:12 <LordBrain> so of course i prefer c++
22:06:38 <audreyt> I know some fortran, but I don't know ada, but I already prefer ada over fortran :)
22:06:54 <RyanT5000> COBOL FTW!
22:06:56 <audreyt> (or really, any known language over fortran)
22:07:15 <audreyt> s/known/unknown/
22:07:21 <dons> hmm, what's this, "Design a bot and win a prize" ?
22:07:39 <dons> oh, for MSN
22:08:18 <RyanT5000> so here's what i want: modules with parameters
22:08:20 <dons> oh, and the bot has to use "multiple Windows Live services"
22:08:24 <RyanT5000> LOL
22:09:07 <RyanT5000> anyway, what if an import could have arguments?
22:09:39 <RyanT5000> that could take away a lot of extraneous type parameters
22:10:04 <audreyt> ...or maybe you want associated types?
22:10:11 <RyanT5000> audreyt: yes
22:10:29 <RyanT5000> either way, really
22:10:53 <RyanT5000> are associated types in, or going in soon?
22:13:17 <dons> in some months time, in the head.
22:13:32 <RyanT5000> k
22:14:17 <RyanT5000> is there any way around that kind of stuff right now?
22:14:43 <RyanT5000> my current situation is that i have a World that holds Boards which hold Cells
22:14:57 <RyanT5000> Cells need to store ShipIDs, the type of which is defined in the World module
22:15:09 <RyanT5000> so i have to pass the ShipID argument all the way down
22:15:24 <RyanT5000> or do something like have a World.Types module
22:15:46 <RyanT5000> but it's my contention that keeping knowledge hierarchical is important - so Cells shouldn't know Boards or Worlds even exist
22:16:57 <RyanT5000> i dunno, something just seems unnecessarily verbose about this situation to me
22:32:53 <JohnMeacham> cmarcelo: I have not tried it.
22:35:13 <cmarcelo> JohnMeacham: here I get a conflict in DataConstructor, when try to solve it (by disambiguating wheter its exporting getProduct from itself or from other module) GHC panics: "ghc-6.5: panic! (the 'impossible' happened)"..
22:42:23 <cmarcelo> JohnMeacham: I was trying to test a replacement for Atom.hs, using Judy.. =P do you know (aprox.) how much (or a range) atoms get created/used in a compilation?
23:01:11 <dons> cmarcelo: how's the hacking going?
23:01:58 <RyanT5000> how do i actually do what is described here? it's listed as "fixed" http://cvs.haskell.org/trac/ghc/ticket/651
23:02:01 <lambdabot> Title: #651 (Template Haskell doesn't work with profiling) - GHC - Trac
23:02:20 <dons> you're trying to use TH and profiling?
23:02:37 <JohnMeacham> cmarcelo: no, but there is a routine to print out the whole table, you could add one right before the program quits and see what it spits out. I bet there are a lot of them.
23:02:43 <RyanT5000> dons: yeah
23:03:03 <u221e> Does a functor need anything else besides a fmap?
23:03:10 <dons> so the mysterious line is:
23:03:11 <dons> "Is it possible to compile the program twice, once without profiling, and again with profiling, and
23:03:14 <dons> u221e: nope
23:03:17 <dons> use appropriate flags to tell GHC which .o files to load when evaluating the TH splices? I don't
23:03:20 <dons> think so right now, but it's possible I'm wrong."
23:03:30 <RyanT5000> dons: but then why would it be listed as "fixed" as of a month ago?
23:03:34 <RyanT5000> the flag must have been added
23:03:47 <dons> RyanT5000: ah, then check the cvs commits *cough* darcs changes
23:03:55 <u221e> Are lists an instance of the functor class?
23:03:56 <dons> http://www.haskell.org//pipermail/cvs-all/
23:03:57 <lambdabot> Title: The Cvs-all Archives
23:04:04 <dons> u221e: yes, since there's a list monad
23:04:11 <dons> and all monads are functors
23:04:14 <dons> @instances Functor
23:04:15 <lambdabot> ((->) r), Cont r, ContT r m, Either e, ErrorT e m, IO, Maybe, RWS r w s, RWST r w s m, Reader r, ReaderT r m, ST s, State s, StateT s m, Writer w, WriterT w m, []
23:04:20 <dons> (the last one)
23:04:40 <dons> Good to see your study continues, u221e :)
23:04:55 <dons> fmap = map for [a]
23:05:56 <RyanT5000> dons: alright, so i need to build once without profiling, and once with -osuf
23:06:07 <RyanT5000> is it possible to cabalize this?
23:06:22 <RyanT5000> (that's two total builds, the latter being with -osuf and -prof)
23:06:37 <dons> hmm, is there a prof-options flag? in cabal? i think so
23:06:45 <dons> which would make it seems possible to add the -osuf thingy
23:06:50 <RyanT5000> yeah
23:06:51 <u221e> :\
23:06:57 <RyanT5000> but how do i get it to do two separate builds?
23:07:13 <dons> oh, if you specify profiling, you get both built
23:07:21 <RyanT5000> oh, ok
23:07:30 <dons> u221e: :)
23:07:49 <u221e> dons: What is the actually function fmap
23:08:15 <cmarcelo> JohnMeacham: i'll try that.
23:08:18 <dons> hmm?
23:08:20 <dons> ?type fmapt
23:08:22 <lambdabot> Not in scope: `fmapt'
23:08:22 <dons> ?type fmap
23:08:23 <lambdabot> forall (f :: * -> *) b a. (Functor f) => (a -> b) -> f a -> f b
23:08:30 <dons> > fmap (+1) [1..10]
23:08:31 <lambdabot>  [2,3,4,5,6,7,8,9,10,11]
23:08:53 <u221e> > fmap (\x -> x*x) [1, 2, 3, 4]
23:08:54 <lambdabot>  [1,4,9,16]
23:09:20 <dons> u221e: so its a function that takes a function from a -> b, and a value in Functor f, and gives you a new result in Functor f
23:09:45 <u221e> > (concat (map (\x -> [x*x]) [1, 2, 3, 4]))
23:09:46 <dons> ?type fmap toUpper (getChar)
23:09:46 <lambdabot>  [1,4,9,16]
23:09:47 <lambdabot> IO Char
23:10:01 <dons> which you'd usually write as:
23:10:08 <dons> ?type toUpper `fmap` getChar
23:10:10 <lambdabot> IO Char
23:10:18 <dons> and corresponds to
23:10:20 <cmarcelo> dons: i'm now testing some software (rbr, parts of jhc and pugs) with new map types backended by Judy.. i'll try to report to mailing list when get more concrete results..
23:12:15 <dons> ?type getChar >>= \c -> return (toUpper c)    -- wifi broke
23:12:16 <lambdabot> IO Char
23:12:24 <JohnMeacham> cmarcelo: I did some testing with Judy before, for lots of lookups in a static table, I think IntSet might be faster, but as soon as there is any mutation, Judy wins.
23:12:29 <u221e> Is the bind function for ALL monads based on join and map?
23:12:49 <dons> hmm, no, I don't think so
23:12:54 <dons> hmm . maybe. i'll check
23:13:11 <cmarcelo> btw, what do I get from instantiating Monoid class?
23:13:21 <dons> ++  :)
23:13:51 <dons> u221e: well, hmm, it depends on what you mean.
23:13:55 <dons> we do have this: fmap f xs  ==  xs >>= return . f
23:13:59 <dons> that's true for all monads
23:14:19 <dons> so in that way (f)map is related to >>=
23:14:19 <u221e> dons: I'm reading Cales article again.
23:14:23 <u221e> http://www.haskell.org/haskellwiki/Monads_as_Containers
23:14:24 <lambdabot> Title: Monads as Containers - HaskellWiki
23:14:53 <u221e> "What bind does is to take" ,,,
23:16:08 <dons> yep, there you go.
23:16:26 <dons> i've used 'return .' instead of join
23:16:38 <dons> ?type join
23:16:39 <lambdabot> forall a (m :: * -> *). (Monad m) => m (m a) -> m a
23:16:57 <u221e> So are all monads just containers?
23:17:08 <dons> well, its a metaphor that helps you view them.
23:17:15 <dons> some people don't like the container metahpor
23:17:22 <dons> others find it a useful way to think about it
23:17:46 <dons> the alternative is to think of monads as a way of abstracting over sequencing of computations, i suppose
23:18:25 <dons> if you look at the Monad class, you see that it can only be instantiated by 'container' types
23:18:33 <dons> that is, types that hold some element
23:18:59 <dons> @instance Monad
23:19:00 <lambdabot> Maybe you meant: instances instances-importing
23:19:03 <dons> @instances Monad
23:19:04 <lambdabot> ((->) r), ArrowMonad a, Cont r, ContT r m, Either e, ErrorT e m, IO, Maybe, RWS r w s, RWST r w s m, Reader r, ReaderT r m, ST s, State s, StateT s m, Writer w, WriterT w m, []
23:19:13 <u221e> It would be pretty usless otherwise I would think.
23:19:14 <dons> in particular, [], Maybe, IO ..
23:19:18 <dons> u221e: right.
23:19:39 <dons> you need to be able to do things to the elements in the container, using Cale's metaphor
23:19:44 <dons> i.e. sequence them
23:20:01 <dons> whether they be list elements, or sequence of IO actions
23:22:37 <dons> so once you think about the abstraction-over-the-order-of-computations, its not hard to start imagining monads for actions that run backwards, or in some non-deterministic fashion
23:22:47 <dons> rather than just top-to-bottom order
23:23:00 <dons> and then arbitrary transformations over actions
23:23:28 <dons> at this point i pity the poor imperative programmers tied to top-to-bottom evaluation
23:23:45 <dons> and who can't see beyond this limitation ;)
23:34:21 <u221e> What does "misplaced type signature" mean?
23:34:42 <Pseudonym> You should put your type signatures in the source file, not write them on a separate piece of paper where the compiler can't see it.
23:35:24 <dons> hehe
23:39:09 <u221e> I'm trying to make a list monad and ghci is throwing very unhelpful errors at me
23:39:23 <RyanT5000> has anyone here used SerTH?
23:43:00 <mwc> I just wrote a little blurb on lazyness and how it improves performance and helps you compute with infinite and partially undefined structures on the wiki. http://www.haskell.org/haskellwiki/Performance/Laziness
23:43:02 <lambdabot> Title: Performance/Laziness - HaskellWiki
23:43:13 <Pseudonym> u211e: Can we see some source code and the actual text of the error message please?
23:45:20 <u221e> dons: How can I make my type into a *->* kind?
23:48:11 <mwc> u221e, if it's a empty datatype, use an explicit kind annotation like ghc provides. Otherwise, add a new type parameter: data MyType a ---> data MyType a b
23:54:59 <RyanT5000> i keep getting this error when trying to compile SerTH:
23:54:59 <RyanT5000> Codec/Serialize/SerTH/Instances.hs:1:0:
23:54:59 <RyanT5000>     Illegal variable name: `False'
23:54:59 <RyanT5000>     When splicing generated code into the program
23:56:44 <u221e> mwc, but my list ype only needs one type parameter?
23:57:13 <u221e> Ignore the question mark.
23:58:04 <RyanT5000> if you have a type data List a = Null | Cons a (List a), List has kind (* -> *)
23:58:43 <mwc> u221e, kind basically refers to the number of types a higher order type needs to construct a type. It's similar to function types. For instance [] is kind (* -> *) since you need a type to make a list of that type
23:59:55 <dons> ?kind Maybe
23:59:57 <lambdabot> * -> *
23:59:58 <dons> for example
