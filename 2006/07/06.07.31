00:10:25 <RyanT5000> what exactly is the structure of a box anyway?
00:11:01 <RyanT5000> something like (Either a (b, b->a))?
00:15:06 <edwardk>  
00:15:07 <edwardk>     Illegal instance declaration for `TGe x y b''
00:15:07 <edwardk>         (There must be at least one non-type-variable in the instance head
00:15:07 <edwardk>          Use -fallow-undecidable-instances to permit this)
00:15:07 <edwardk>     In the instance declaration for `TGe x y b''
00:15:15 <edwardk> how bad is -fallow-undecidable-instances?
00:16:06 <edwardk> the case in question is pretty mundane.
00:16:08 <edwardk> class TBool b => TGe x y b | x y -> b
00:16:08 <edwardk> instance (TLt x y b, TNot b b') => TGe x y b'
00:16:48 <edwardk> where TLt x y b | x y -> b, and TNot b b' | b -> b', b' -> b
00:18:58 <edwardk> ahh found it
00:19:12 <edwardk> needed TBool b' in the requirements
00:19:40 <RyanT5000> edwardk: i can't answer your question, but i can tell you that i've had many problems with simmilar instances - when i try to make a reduction like that
00:19:49 <RyanT5000> ah
00:20:11 <edwardk> its a cascading thing from the fact that i didnt specify booleanness on my TNot type
00:20:31 <edwardk> coz i'm using it for my infinite precision 2's complement type arithmetic stuff as well
00:21:44 <edwardk> now the one thats going to kill me for decidability is my reversible full adder =)
00:24:49 <edwardk> wheeee. 500 lines of undecidable instances =)
00:41:33 <Antoine> Make easy money, go to www.eurobarre.com/index_fr.php?p=299932947535
01:19:09 <boegel> Antoine: I can't find any pron on that website, is something wrong with it?
01:23:59 <shapr> @yow !
01:24:00 <lambdabot> Don't worry, nobody really LISTENS to lectures in MOSCOW, either! ...
01:24:00 <lambdabot> FRENCH, HISTORY, ADVANCED CALCULUS, COMPUTER PROGRAMMING, BLACK
01:24:00 <lambdabot> STUDIES, SOCIOBIOLOGY! ...  Are there any QUESTIONS??
01:24:15 <dons> ?uptime
01:24:16 <lambdabot> uptime: 1 day, 4 hours, 35 minutes and 34 seconds
01:24:18 <dons> ?version
01:24:19 <lambdabot> lambdabot 4p36, GHC 6.5 (OpenBSD i386 )
01:24:19 <lambdabot> darcs get http://www.cse.unsw.edu.au/~dons/lambdabot
01:24:25 <shapr> g'day dons
01:24:26 <dons> patches just keep ticking along
01:24:27 <shapr> How's code?
01:24:29 <dons> heya shapr
01:24:55 <dons> good good. dcoutts and I are getting this new `streams' fusion system into fps. way faster than before (!)
01:24:56 <shapr> @tell shapr d00d, as if!
01:24:57 <lambdabot> You can tell yourself!
01:24:59 * shapr grins
01:25:22 <dons> shapr, i'm going to start a blog about my coding adventures
01:25:24 <dons> should i use hope?
01:25:26 <shapr> YES!
01:25:41 <dons> its appropriate for this kind of thing? can i get rss over to planet.haskell.org ?
01:25:46 <shapr> I'm glad you're starting a blog, I'll have more good Haskell stuff to read!
01:25:47 <shapr> YES!
01:25:50 <boegel> shapr: how did the interviews with the Microsoft people go?
01:25:52 <dons> ok. great!
01:25:54 <shapr> I'm using Hope for my RSS feed.
01:26:13 <shapr> boegel: It happens on Thursday!
01:26:29 <dons> shapr, so hope is self explanatory? i just grab it from the usual suspects ?
01:26:38 <boegel> shapr: oh, ok :)
01:26:46 <shapr> boegel: There are two other #haskell people being interviewed. I know the Simons will make the best choice and pick the person who will be best for the Haskell world.
01:26:49 <ValarQ> hello folks
01:26:58 <boegel> shapr: coolness
01:27:12 <boegel> shapr: any idea how many get interviewed in total.
01:27:16 <boegel> s/;/?
01:27:16 <dons> shapr, do we know how many externals are applying? outside of our irc oasis?
01:27:18 <shapr> I'm sure that each candidate hopes that will be them, but I really do hope the best choice is made for the Haskell world, even if it's not me.
01:27:22 * boegel urghs
01:27:31 <dons> morning ValarQ
01:27:48 <shapr> I think there aren only three people applying, and all of them are long time #haskell regulars.
01:27:55 <shapr> s/aren/are
01:27:56 <dons> huh
01:27:56 <boegel> shapr: who are the other #haskellers? dons? Phillipa? Lemmih?
01:28:00 <dons> very interesting.
01:28:03 <dons> no, i'm not applying
01:28:06 <boegel> oh
01:28:13 <boegel> dons: too much work already? :)
01:28:15 <dons> my supervisor would wack me about the ears for not finishing my phd, if i did that
01:28:18 * shapr grins
01:28:22 <boegel> dons: hehe
01:28:35 <shapr> Or he'd ask you to cut him half the pay if you get your PhD for doing the GHC job!
01:28:39 <boegel> dons: then just sue him with all the money you're about to earn
01:28:52 <dons> i'm about to earn money?
01:28:58 <shapr> boegel: Of course, dons' supervisor is also a #haskell regular, so...
01:29:00 <dons> this sounds very good. do tell me more..
01:29:02 <boegel> dons: if you would apply, maybe, yes
01:29:08 <dons> ah. :)
01:29:08 <boegel> boegel: oh, heh :)
01:29:21 <boegel> shapr: so; who are the two other people applying?
01:29:57 <shapr> Lemmih is one of them, I don't think he minds me saying that. But the third person hasn't made it clear whether they want the knowledge to be public or not.
01:30:08 <boegel> shapr: oh, ok
01:30:18 <boegel> I knew about Lemmih, so I guess that's no problem :)
01:30:33 <boegel> exciting :)
01:30:42 <shapr> Also, we (dis)organized AngloHaskell around the MSR interview, it'll be fun!
01:30:53 * boegel wonders what kind of question you will be getting
01:31:11 <boegel> questions (hopefully) ;)
01:31:28 <dons> maybe they have a super question combinator
01:31:28 <shapr> I don't know.
01:31:34 <dons> in which all other questions can be expressed?
01:31:40 <dons> so there will be only 1 question
01:31:55 <shapr> scary
01:32:00 <shapr> Actually, I read this - http://www.ofb.net/~niniane/interview_howto.html
01:32:01 <lambdabot> Title: Preparing For a Software Engineering Interview
01:32:07 <shapr> And realized I have no idea of the format of the interview.
01:32:24 <dons> heh
01:32:25 <shapr> Will there be coding questions? Will I need to do something on a whiteboard? I have no idea.
01:32:45 <dons> learn up on your gnu make and porting issues, I'd think?
01:32:57 * dons -> home, bbl
01:33:33 <shapr> I think I'd rather switch to Maak.
01:34:55 <shapr> I also wonder whether Maak could be used inside GHC. The whole DriverPipeline has a bunch of dependency calculation happening but distributed around the code somewhat. That seems like a good place for a DSL.
01:36:42 <ValarQ> Maak?
01:37:41 <shapr> @google eelco maak haskell
01:37:43 <lambdabot> https://svn.cs.uu.nl:12443/repoman
01:38:03 <shapr> It's a haskell-make that uses directed acycle graphs.
01:38:06 <shapr> acyclic*
01:38:08 * shapr can't type today.
01:39:34 <ValarQ> is it a cabal replacement or enhancement?
01:39:52 <shapr> @tell dons Hope isn't exactly self explanatory, but if you have any questions, feel free to ask one of me, bringert, jgrimes, or xerox
01:39:52 <lambdabot> Consider it noted.
01:40:04 <shapr> Neither, Maak is much older than cabal.
01:40:41 <shapr> Lemme find the paper...
01:44:42 <shapr> aha! http://www.cs.uu.nl/wiki/Trace/IntegratingSoftwareConstructionAndSoftwareDeployment
01:44:44 <lambdabot> Title: Trace / Integrating Software Construction And Software Deployment
01:47:51 <vincenz> boegel: ping
01:50:47 <mnislaih> GHC hackers: how does TyVar renaming work ?
01:50:52 <ValarQ> shapr: oh, its a make & ebuild replacement :)
01:51:09 <mnislaih> is there any easily accesible function to rename a tyvar or all the tyvars of a type ?
01:52:52 <vincenz> shapr: that last story is so funny !
01:53:10 <mnislaih> trying to do unification over Type terms is driving me mad, I've got the feeling I'm doing it all wrong
01:53:38 <dcoutts> foxy_, ping
01:55:50 <Lemmih> mnislaih: Unification?
01:56:29 <mnislaih> Lemmih:  I am working in reconstructing types
01:56:30 <vincenz> mnislaih: need some help?
01:56:45 <vincenz> mnislaih: I recently wrote a type inference engine for my compiler
01:56:51 <mnislaih> isn't unification the apropiate route ?
01:56:56 <vincenz> Yeah
01:57:01 <vincenz> It is
01:57:07 <vincenz> But if you need help :)
01:57:15 <shapr> vincenz: What last story?
01:57:19 <mnislaih> the problem is I don't know exactly how GHC deals with tyvars
01:57:22 <vincenz> shapr: in thelink you gave on interviewing
01:57:30 <mnislaih> so I don't know when and where they need renaming
01:57:49 <vincenz> oh
01:58:00 <vincenz> why would you want to rename it
01:58:05 * vincenz just read backwards to get the old context
01:58:14 <mnislaih> I'll try to get an example
01:58:28 <shapr> vincenz: Oh, I see
01:58:45 <vincenz> shapr: dont' get a pepsi
01:58:52 <vincenz> kindly refuse and ask for a glass of water
01:59:00 <vincenz> ;)
01:59:05 <shapr> heh
01:59:09 <shapr> Right, time for focus.
01:59:16 * shapr disappears
01:59:16 <int-e> if asked why, wink mysteriously and say 'they don't explode'
01:59:37 <mnislaih> vincenz: trying to unify 'a->[a]' with 'Maybe [a]' -> [a]' where a is a metavariable ranging over tyvars seems to fail because of renaming
02:00:12 <mnislaih> it looks like, in ghc, all the 'a' are assigned to the same TyVar, so of course it won't unify
02:00:38 <vincenz> you need to instantiate first
02:00:48 <mnislaih> Lemmih: do you know any place to look at for an example ?
02:00:50 <boegel> vincenz: pong
02:00:52 <vincenz> a -> [a] is implicitly forall a. a -> [a]
02:00:55 <vincenz> boegel: you pinged friday?
02:01:09 <boegel> vincenz: heh
02:01:10 <boegel> erm :)
02:01:16 <vincenz> ?
02:01:30 <Lemmih> mnislaih: They have the same unique identifier?
02:01:36 <boegel> vincenz: can't remember why really... I guess I had something todo with the upcoming meeting with you guys
02:01:41 * vincenz nod
02:01:45 <boegel> vincenz: any news on that yet? when?
02:01:55 <vincenz> well it seems we agreed last week of august
02:02:04 <vincenz> due to vacation and other external schedule conflicts
02:02:29 <Lemmih> (their name - 'a' in this case - is only used for pretty printing)
02:02:33 <mnislaih> I am using tcRnUnify. Yes they do, but I have actually splitted the (->) and I am unifying each set of arguments separately (tcRnUnify takes [Type] so it's fine))
02:02:42 <mnislaih> Yes, they have the same unique number
02:02:43 <vincenz> you need to instantiate first
02:03:23 <mnislaih> vincenz: I have already worked out the problem with foralls by turning (a->[a]) into a list containing [a, [a] ]
02:03:31 <boegel> vincenz: hmm, ok
02:03:33 <vincenz> no
02:03:36 <vincenz> you need to instantiate
02:03:41 <vincenz> a -> [a] as is is a poly type
02:03:42 <boegel> vincenz: and I heard Koen was coming to?
02:03:42 <vincenz> not a mono type
02:03:49 <vincenz> boegel: so itkovian told me
02:03:59 <vincenz> and some guy named "Lieven" ?
02:04:18 <earthy> hey, I know that guy. :)
02:04:36 <Lemmih> mnislaih: I don't quite understand what you're trying to do.
02:04:43 <mnislaih> Lemmih: I mean tcUnifyTys sry
02:05:23 <boegel> vincenz: yeah, my direct advisor. Is he coming too?
02:05:37 <vincenz> boegel: so Itkovian told me
02:05:41 <vincenz> boegel: what does Lieven work on?
02:05:45 <boegel> vincenz: ok, that's cool.
02:05:57 <mnislaih> Lemmih: when I have a polymorphic datacon such as (:), and the first argument is sufficiently instantiated, it's possible to recover the type of the second
02:06:07 <boegel> vincenz: he is our direct advisor, he knows what we all (Itkovian, me, others) are working on
02:06:09 <vincenz> boegel: we'll need to settle a date so I can book a meeting room etc
02:06:15 <boegel> Koen doesn't know the details on it, Lieven does
02:06:33 <boegel> vincenz: yeah, well, I guess the easiest way would be to mail Itkovian on it
02:06:41 <mnislaih> I try to do that by unifiying the type extracted from the datacon, with the types of the arguments. Actually it's a bit more involved, because I may also have type information coming from the typechecker
02:06:45 <vincenz> boegel: but I take it that Koen is your supervisor (promotor)
02:07:05 <boegel> vincenz: well, yeah, but that's kind off chaging I think
02:07:12 <Lemmih> mnislaih: Ah.
02:07:16 * vincenz nods
02:07:22 <boegel> vincenz: a recent paper I worked on, has just my and Lieven's name on it...
02:07:49 <vincenz> ah I see
02:08:00 <boegel> vincenz: Lieven got a partial prof-contract (or whatsjemecallit), hence he can be our promotor too from now on
02:08:10 <boegel> vincenz: kind of complicated ;)
02:08:15 <mnislaih> Lemmih: if you know of an example of tcUnifyTys usage point me at it
02:08:49 <vincenz> cool :)
02:08:52 <Lemmih> mnislaih: I'm afraid not. I'll look into it after I've eaten.
02:09:09 <mnislaih> vincenz: sorry but I didn't understand what you meant before about instantiating. Care to explain ?
02:09:33 <vincenz> boegel: not yet sure whom I'll invite on this side... most definitely my soon to be daily advisor (he's finishing his phd soon).  Not yet sure if about my supervisor yet (though I take it Koen might like to talk to him if he's here)
02:10:26 <vincenz> mnislaih: there is a difference between a polymorphic type and a monomorphic type.  All functions are generalized to polymorphic types.  Hence if you want to unify, you have to instantiate the freevariables with unique tyvars to get a monomorphic type. unification happens on monomorphic types
02:10:47 <vincenz> this is called instantiating a polymorphic type to a monomorphic type
02:10:55 <vincenz> and that will typically replace the 'a' by a unique tyvar
02:15:08 <mnislaih> oops sorry, I had to leave in a rush. The garden people said they were going to fumigate, so I had to move myself to another tree
02:15:32 <mnislaih> sorry for leaving in the midst of a conversation vincenz
02:15:49 <vincenz> n
02:15:50 <vincenz> p
02:15:59 <mnislaih> ok, in this case all the types have been instantiated with unique tyvar instances. The problem remains that I don't know exactly where these instances are coming from, and why they seem to have all the same identifier
02:16:36 <vincenz> then I don't know, I'm not yet familiar with GHCs internals
02:27:44 <vincenz> :/
02:29:23 <boegel> vincenz: who's your advisor?
02:30:26 <vincenz> Catthoor
02:30:29 <vincenz> oh advisor
02:30:32 <vincenz> Stelios Mamagkakis
02:30:43 <vincenz> (Stylianos... but everyone calls him Stelios)
02:31:16 <boegel> vincenz: ok... do you know Hendrik Blockeel?
02:31:37 <vincenz> fraid not
02:31:49 <boegel> hmm, k
02:31:49 <vincenz> seems he's .cs
02:31:57 <boegel> oh, yeah, might be
02:32:09 <vincenz> http://www.cs.kuleuven.ac.be/~hendrik/
02:32:10 <lambdabot> Title:
02:32:12 <vincenz> why?
02:32:13 <boegel> but since we're in Leuven anyway, we might meet up with him too, atleast me and Lieven
02:32:20 <vincenz> :0
02:32:22 <vincenz> :)
02:32:30 <vincenz> let's move this to #oasis?
02:32:34 <boegel> vincenz: because we're in contact too, he's trying some AI stuff on our dataset
02:32:36 <boegel> vincenz: sure
02:48:20 <vincenz> @join #oasis
02:49:35 <dons> dcoutts: do we have scripts to graph the new fusion benchmark results
02:49:36 <lambdabot> dons: You have 1 new message. '/msg lambdabot @messages' to read it.
02:49:47 <dcoutts> dons, no
02:49:53 <dcoutts> I was using gnumeric before
02:49:59 <dons> ok. well, i've run them and have results
02:50:03 <dons> just have to inspect now
02:50:21 <dcoutts> I tried to script something with gnuplot but the results weren't very satisfactory
02:50:30 <dcoutts> would be ok for inspecting
02:50:34 <dcoutts> but not for a paper
02:50:42 <dons> right
02:50:46 <dcoutts> I couldn't get it to put labels on the columns
02:54:33 <musasabi> A functional alternative for Gnuplot would be nice
02:55:18 <dcoutts> there is!
02:55:22 <musasabi> where?
02:55:46 <dcoutts> http://dockerz.net/software/chart.html
02:55:48 <lambdabot> Title: A haskell chart library
02:58:35 <musasabi> that looks nice
02:58:43 <dons> dcoutts: what do we need to do now, re. paper/code?
02:59:00 * dons makes some notes
02:59:34 <dons> * QC for the new rules ; * some useful graphs
02:59:52 <dons> * develop structure for the paper
03:15:25 <dcoutts> dons, yeah, that sounds right
03:15:53 <dcoutts> for the code there are a few more things we can fuse easily
03:17:05 <dons> ah, ok. such as?
03:17:16 <dons> the more the better, I say.
03:17:52 <dcoutts> minimum maximum length
03:18:07 <dcoutts> those are the ones where we've got specialised impls
03:18:17 <dons> oh, yes. i saw you commented out the old rules for those
03:18:27 <dons> so we should port them across
03:18:27 <dcoutts> but we should rewrite them to fusable form and then if they dont fuse then write them back
03:18:31 <dcoutts> I've got code for it
03:18:34 <dons> yep
03:18:37 <dons> ah, ok
03:19:09 <dcoutts> oh, we need to see why the streams is currently slow for lazy bytestrings
03:19:39 <dcoutts> it was only a first pass at that code so the perf hasn't been studied at all
03:20:23 <dcoutts> oh we can fuse take, drop, takeWhile, dropWhile
03:20:43 <dcoutts> any & all
03:21:10 <ValarQ> how do i create a timeout in STM?
03:21:16 <dcoutts> we were going to look at eliminating reverses
03:21:23 <ValarQ> the examples in the STM papers didn't work very well :/
03:21:29 <dcoutts> we can fuse head, tail, first & last
03:21:54 <dcoutts> fusing appeand, cons, snoc might be slower than unfused
03:22:37 <musasabi> ValarQ: registerDelay :: Int -> IO (TVar Bool)
03:23:17 <dcoutts> though concat might be faster, concatMap might be interesting/tricky to fuse
03:23:29 <dcoutts> oh and then unpack
03:23:36 <dcoutts> we really must fuse unpack
03:23:40 <dcoutts> and eliminate unpackWith
03:23:57 <dcoutts> and eliminate unpackFoldr
03:24:11 <ndm> dcoutts, i redownloaded and installed the latest versions of Gtk+ and the crashes seem to have gone away
03:24:23 <dcoutts> ndm, oh, good
03:24:28 <ndm> woops, spoke too soon, it just crashed and bailed on me :(
03:24:32 <dcoutts> ndm, might just be random
03:24:36 <dcoutts> heh
03:24:51 <dcoutts> ie a memory bug that's sensitive to memory layout
03:25:03 <ndm> looks like it
03:25:13 <musasabi> ValarQ: only in GHC 6.5 though.
03:25:15 <ndm> seems like moving the mouse and resizing are the things most likely to make it fire
03:25:27 <ndm> but it doesn't always
03:25:32 <dcoutts> in which case the crash usually happens in unrelated code
03:25:50 <dcoutts> so the tricky bit is finding which things we're using eariler which cause a crash later
03:25:50 <ValarQ> musasabi: thats no problem
03:26:19 <ndm> dcoutts, i can crash it about 75% of runs, within about 10 seconds
03:26:24 <ValarQ> musasabi: problem is that i can't hoogle for it :/
03:26:29 <ndm> sometimes its just moving the mouse nearby
03:26:45 <ndm> Gtk-ERROR **: file ../../../gtk+/gtk/gtktextlayout.c: line 1124 (get_style): assertion failed: (layout->one_style_cache == NULL)
03:26:46 <ndm> aborting...
03:26:51 <dcoutts> ndm, can we do a binary search on the functions you're using to find the offending one ?
03:26:59 <musasabi> It is in Control.Concurrent.STM (which imports it from GHC.Conc)
03:27:00 <dcoutts> eg comment out half the features and try that
03:27:15 <ndm> dcoutts, would be hard, since it kind of uses all features internally for the proplang
03:27:20 <dcoutts> mm
03:27:21 <ndm> will give it a go...
03:28:03 <ValarQ> musasabi: thanks
03:28:15 <dcoutts> ndm, also I should try it here I suppose and see if I can reproduce it with 0.9.10 and the current dev version
03:28:19 <ndm> dcoutts, if castToWidget raises an exception which i catch, does that screw anything up?
03:28:27 <dcoutts> ndm, shouldn't do
03:28:46 <ndm> dcoutts, its 90% stable on my home machine and 100% stable on my other machine
03:28:52 <ndm> and about 2% stable on this
03:28:56 <dcoutts> heh
03:29:02 <ndm> so i wouldn't be surprised if you can't replicate it
03:29:12 <ndm> they all have the same Gtk2hs and GHC
03:29:15 <dcoutts> sometimes using a malloc debugger can trigger it if it doesn't happen normally
03:30:29 <ndm> well the code is online
03:30:32 <ndm> @where guihaskell
03:30:33 <lambdabot> I know nothing about guihaskell.
03:30:49 <ndm> @where+ guihaskell http://www.cs.york.ac.uk/fp/darcs/guihaskell
03:30:50 <lambdabot> Done.
03:30:56 <ndm> @where proplang
03:30:57 <lambdabot> http://www.cs.york.ac.uk/fp/darcs/proplang
03:32:14 <ndm> i changed gtk versoin, same issue
03:32:40 <dcoutts> dons, similarly we should be able to fuse the elem/find/index style functions
03:33:13 <dcoutts> dons, the more tricky ones are the binary bytestring operators
03:34:17 <dcoutts> dons, copy fuses trivially :-)
03:34:47 <dons> ok. cool.
03:35:03 <dons> so we can do short circuiting functions now.
03:35:12 <dons> like find
03:35:44 <dons> elemIndex, findIndex and so on?
03:36:08 <dons> this is how the streams stuff originally arose, btw. i asked roman how we could do short ciruiting functions :)
03:36:15 <ValarQ> is there any 'Hierarchical Libraries' for ghc-6.5 anywhere?
03:36:18 <dons> and he went and thought about it for a week or two
03:36:27 <ValarQ> they don't seem to exist in http://www.haskell.org/ghc/docs
03:36:28 <dons> ValarQ: ? they come with 6.5..
03:36:29 <lambdabot> Title: Index of /ghc/docs
03:36:35 <dons> oh, the docs. no.
03:38:19 <sylvan> http://www.haskell.org/ghc/dist/current/docs/
03:38:20 <lambdabot> Title: GHC Documentation
03:38:37 <dcoutts> dons, yeah, we'd got to the end of what we could fuse with only using string transformers and went looking for producer/consumer fusion
03:38:56 <dons> yup
03:39:03 <ValarQ> there they are, thanks sylvan :)
03:39:22 <sylvan> np
03:39:26 <dcoutts> and it's wit the short circut stuff that we have to justify our rules as refinments rather than equalities
03:39:45 <dcoutts> dons, as we're dropping _|_'s
03:39:53 <dcoutts> and that needs justifying in the paper
03:40:08 <dons> ok. tomorrow then i will graph these results burning a hole in my harddrive, and write the QCs. and try to add back minimum/maximum/length
03:40:16 <dons> dcoutts: ok. that would be an interesting section in the paper
03:40:22 <dons> more theory == good
03:40:38 <ndm> dcoutts, seems its appending stuff to the text box that raises the error
03:40:51 <ndm> (guihaskell.exe:2956): Gtk-WARNING **: Invalid text buffer iterator: either the
03:40:53 <ndm> iterator is uninitialized, or the characters/pixbufs/widgets in the buffer have
03:40:55 <ndm> been modified since the iterator was created.
03:40:55 <dcoutts> dons, I'll send my patches for the min/max/length
03:40:56 <ndm> You must use marks, character numbers, or line numbers to preserve a position ac
03:40:58 <ndm> ross buffer modifications.
03:41:00 <ndm> You can apply tags and insert marks without invalidating your iterators,
03:41:02 <ndm> but any mutation that affects 'indexable' buffer contents (contents that can be
03:41:03 <ndm> referred to by character offset)
03:41:05 <ndm> will invalidate all outstanding iterators
03:41:06 <dons> ndm, oh you worked out the issue with groupBy last night?
03:41:08 <ndm> i get that error occasionally, but crash out most of the time
03:41:19 <dons> it was the transitivity (or lack of) of /= ?
03:41:30 <dons> did we get a solution?
03:41:32 <ndm> dons: the basic issue is that you can't write groupBy Lazy in terms of groupBy strict
03:41:39 <ndm> the solution is to rewrite it afresh
03:41:46 <dons> due to grouping over chunk boundaries?
03:41:53 <ndm> it is the lack of transitive and associativity of the operator
03:41:55 <ndm> yep
03:42:08 <dons> so a soln based on span is required.
03:42:24 <ndm> you were assuming group (x:xs) == x:group xs where x `k` head xs
03:42:26 <ndm> yep
03:42:39 <dons> yeah. its clear now.
03:42:43 <ndm> probably easiest to write it in terms of Lazy.Span in the first instance
03:42:49 <dons> yup
03:42:53 <dcoutts> dons, the issue is that when we continue a group onto a second block we're calling P.groupBy k on that block, but it's comparing to the first characer in that block, not to the first character in the previous block.
03:43:00 <dons> any luck proof-afying the patterns, ndm?
03:43:09 <dons> dcoutts: right
03:43:20 <ndm> the other solution is to add a groupByWithFirstChar function
03:43:34 <ndm> dons: not yet, i'm rewriting my proover, so its broken at the moment
03:43:51 <dcoutts> the reason I changed from using lazy span is that it's slow because it traverses too much
03:43:56 <dons> hmm
03:44:02 <dcoutts> the current style of code is much faster
03:44:08 <dons> yeah, i recall
03:44:16 <dcoutts> I'm hoping it can be fixed, eg with groupByWithFirstChar :-)
03:44:31 <dcoutts> which we use when continuing a block
03:44:34 <dons> ok
03:44:48 <ndm> but you'll have to export that, which is yuck
03:44:56 <dcoutts> or define it locally
03:45:05 <dons> hmm. defining locally is reasonable
03:47:35 <ndm> dcoutts, textBufferInsert seems to be the code that goes wrong
03:47:45 <dcoutts> ndm, ok
03:47:54 <ndm> sometimes it raises an assertion (which i don't think it should ever), sometimes it raises a segfault
03:48:06 <dcoutts> ndm, taking it out makes everything work ok?
03:48:16 <ndm>     end <- textBufferGetEndIter buf -- is always used just before
03:48:18 <ndm> dcoutts, yep
03:48:31 <dcoutts> it may just be a symptom
03:48:36 <ndm> although it also means that nothing ever gets sent to the output console, so if its a bug related to that
03:48:52 <dcoutts> that the text iter or buffer is getting overwritten and triggers and assertion/segfault
03:49:01 <dcoutts> and/an
03:49:02 <ndm> quite possible
03:49:28 <ndm> well i don't use unsafePerformIO or any FFI stuff in my code
03:49:33 <ndm> which i guess means its not my fault?
03:49:54 <ndm> it is multi-threaded though, is Gtk thread safe?
03:50:16 <foxy_> dcoutts, pong
03:50:22 <foxy_> :)
03:50:24 <ndm> but i have made sure only one thread can write to the buffer, by commenting out all the other ones, and it still crashes
03:50:29 <dcoutts> foxy_, found the problem
03:50:37 <foxy_> yay
03:50:43 <dcoutts> ndm, you're not using -threaded are you?
03:50:56 <ndm> dcoutts, i am
03:51:01 <ndm> is that wrong?
03:51:02 <dcoutts> ndm, ah, that's the bug
03:51:15 <ndm> so how do i use multithreaded code with Gtk?
03:51:27 <dcoutts> you can use multiple Haskell threads
03:51:33 <dcoutts> just not multiple OS threads
03:51:39 <dcoutts> GUIs are not multithreaded, especially on win32
03:51:54 <ndm> I just call forkIO (readOut out)
03:52:08 <ndm> thats the only thread, and also the thread that does all the writing
03:52:12 <dcoutts> that's ok so long as you're not using the threaded rts
03:52:19 <dcoutts> you can use haskell threads
03:52:37 <ndm> but when i removed -threaded, suddenly it didn't bother firing off the forkIO
03:52:44 <dcoutts> you just can't link using ghc --make -threaded ...
03:53:00 <dcoutts> ndm, right, see the FAQ on using multiple threads
03:53:47 <dcoutts> it's a somewhat unfortunate situation
03:54:31 <ndm> so I can rewrite forkIO with timeoutAddFull (yield >> return True) blah ?
03:54:51 <dcoutts> no, that allows all haskell threads to run
03:55:01 <dcoutts> by periodically yielding to ghc's scheduler
03:55:15 <dcoutts> if you find you can't tolerate the solution there are others but then you can't use haskell threads
03:55:47 <ndm> ah, so i just shove that near initGUI?
03:55:51 <dcoutts> yes
03:56:57 <dcoutts> a non-polling soltion requires more support from the rts, I do bug JaffaCake about it occasionally but the rts is in flux atm anyway
03:57:00 <ndm> any reason mainGUI doesn't do that automatically?
03:57:16 <dcoutts> not everyone likes the idea of polling
03:57:43 <ndm> ah, mainPropLang will in that case :)
03:57:51 <dcoutts> ok
03:58:17 <ndm> thanks for that, its weird it works on my home machine then...
03:58:25 <dcoutts> I should really make mainGUI fail if the prog was linked with -threaded
03:58:35 <dcoutts> well that's the effects of OS threads isn't it
03:58:44 <dcoutts> different cpu speeds etc etc
03:58:54 <ndm> actually, this machine is hyper threaded
03:58:56 <ndm> the others aren't
03:59:01 <dcoutts> that might be it
03:59:07 <dcoutts> finer interleaving
03:59:12 <ndm> is there an easy check to see if -threaded was used?
03:59:18 <dcoutts> yes
03:59:28 <dcoutts> I'll make mainGUI check
03:59:33 <dcoutts> but you can do it too
03:59:44 * dcoutts looks it up
04:00:24 <ndm> I was going to do it in initPropLang, to catch it easier, before the user has potentially segfaulted
04:00:47 <dcoutts> @hoogle rtsSupportsBoundThreads
04:00:49 <lambdabot> Control.Concurrent.rtsSupportsBoundThreads :: Bool
04:01:05 <ndm> assert (not that) ?
04:01:09 <dcoutts> ndm, yes that's a good idea, as I say I'll do the same in initGUI
04:01:30 <dcoutts> ndm, you could give a more descriptive error like "don't link using -threaded"
04:01:33 <dcoutts> :-)
04:02:48 <ndm> will do, i thought assert allowed you to include a message
04:02:59 <ndm> but i now remember thats assertNote, which I defined in my other project
04:06:36 <musasabi> hmm. I found out a way to type what I wanted. Now the only problem is that the size of the type is exponentially related to the depth of the expression :-(
04:07:15 <ndm> dcoutts, no luck, now forkOS does nothing
04:07:31 <dcoutts> ndm, yes, you just use forkIO
04:07:39 <dcoutts> forkOS is for bound threads
04:07:43 <ndm> dcoutts, i meant forkIO
04:08:05 <dcoutts> and you're using the timeoutAdd (yield >> return True) 50
04:08:13 <ndm> should i add that line at initGUI or mainGUI
04:08:25 <ndm> yes, i tried both places, neither seems to work
04:08:35 <ndm> or does it need to be magically somewhere in the middle?
04:08:45 <dcoutts> it can be anywhere
04:09:07 <dcoutts> the thread sparked by forkIO will only get a chance to run once mainGUI is called however
04:09:25 <dcoutts> since that's when the timeoutAdd callbacks will start happening
04:09:26 <ndm> i have it just after initGUI at the moment
04:09:53 <dcoutts> that should be ok
04:09:59 <ndm> should...
04:10:10 <dcoutts> when are these threads being forked?
04:10:17 <ndm> after initGUI
04:10:35 <dcoutts> and as soon as mainGUI starts they stop?
04:11:13 <ndm> they don't show any life at all
04:11:29 <ndm> although its hard to tell, let me tweak the code...
04:11:33 <dcoutts> that can't be my fault :-)
04:11:45 <dcoutts> it's only my fault if they stop once you make a blocking foreign call
04:11:47 <dcoutts> ie mainGUI
04:11:54 <ndm> i'll test...
04:12:00 <dcoutts> try running the concurrency demo
04:12:09 <dcoutts> it's called progress iirc
04:12:12 <ndm> ah, it appears to be working
04:12:17 <ndm> just VERY slowly
04:12:32 <dcoutts> hmm
04:12:34 <ndm> i.e. printing out the hugs logo > 1 min
04:12:51 <ndm> time to run :version, 15 seconds
04:12:53 <dcoutts> that's not good :-)
04:13:11 <ndm> each character calls back into gtk2hs with an appendText
04:13:19 <dcoutts> hmm
04:13:28 <ndm> is ghc blocking on the call to gtk2hs, and they were switching their execution
04:13:53 <ndm> but it is running concurrently at least
04:14:11 <dcoutts> try putting a print in the timoutAdd
04:14:21 <dcoutts> see if it really is happening 50 times a second
04:15:13 <dcoutts> it's possible I suppose that ghc is relinquishing it's timeslice when it calls back to gtk
04:15:20 <ndm> how?
04:15:31 <ndm> under yeild?
04:15:43 <dcoutts> not sure, I wouldn't have expected it to be the case
04:16:28 <foxy_> ndm have you written a GTK terminal ?
04:16:36 <dcoutts> ndm, how many threads do you have?
04:16:42 <dcoutts> just two or lots?
04:16:44 <ndm> dcoutts, 2 or 3 tops
04:16:50 <ndm> foxy_: kinda
04:16:58 <dcoutts> are they just waiting on IO from the child process?
04:17:14 <ndm> dcoutts,  i added tracing with putStrLn before yeild, and the performance goes back to normal speed!
04:17:21 <ndm> dcoutts, yep
04:17:23 <dcoutts> !?
04:17:34 <ndm> ran it again, slow once more
04:17:54 <dcoutts> ndm, in that case if we can't get the threads reliable it's possible to do this without threads
04:17:58 <dcoutts> I think
04:18:25 <ndm> dcoutts, i'm welcome to exactly how?
04:18:47 <ndm> dcoutts, http://www.cs.york.ac.uk/fp/darcs/guihaskell/Evaluator.hs
04:18:53 <dcoutts> ndm, you can use the glib main loop to tell you of IO events
04:18:55 <ndm> readOut and readErr are the only two threads
04:19:24 <dcoutts> so you get a callback whenever there is particular kinds of IO activity on a file descriptor
04:19:50 <ndm> hmm, would work, uglier though, since i can't use a lazy stream of characters, which is just a beautiful design...
04:19:55 <ndm> but never mind...
04:19:55 <dcoutts> so if your threads/IO pattern is very simple then that would work
04:19:57 <dcoutts> it is uglier
04:20:38 <ndm> ok, so what magic do i do to get that going?
04:21:57 <dcoutts> ndm, inputAdd
04:22:34 <dcoutts> it takes a FD, some conditions like IOIn, a priority and a callback
04:22:54 <ndm> how do i get a FD from a FileHandle?
04:23:03 <ndm> @hoogle FD -> FileHandle
04:23:04 <lambdabot> No matches, try a more general search
04:23:52 <dcoutts> handleToFd
04:24:10 <dcoutts> @hoogle Handle -> Fd
04:24:11 <lambdabot> No matches, try a more general search
04:24:18 <dcoutts> @hoogle Handle -> IO Fd
04:24:19 <lambdabot> No matches, try a more general search
04:24:23 <dcoutts> hmm
04:24:39 <dcoutts> @type System.Posix.IO.handleToFd
04:24:40 <lambdabot> GHC.IOBase.Handle -> IO System.Posix.Types.Fd
04:24:58 <ndm> @hoogle File"this has the side effect of closing the handle and flushing the write buffer?
04:24:59 <lambdabot> Hoogle Error: Parse Error: Unexpected character '"this has '
04:25:58 <dcoutts> ndm, then either use fdToHandle again or use the lower level IO functions
04:26:11 <dcoutts> ndm, it's not an easy thing to use inputAdd, I kind of discourage it :-)
04:26:18 <ndm> hmm, great...
04:26:19 <dcoutts> I only added it under duress
04:26:27 <dcoutts> threads are nicer
04:26:30 <dcoutts> (usually)
04:26:43 <ndm> hmm, are you going to fix threads at some point?
04:26:59 <dcoutts> if we can persuade JaffaCake of its importance
04:26:59 <eivuokko> ndm, I am not sure if you already found a solution to your process handle <-> id problem, but the reason why your ffi-stuff didn't work is that the function is new (XP sp1) and it hasn't got into mingw import libs yet.  There are few solutions, but I have written them down at home...where my net is down.
04:27:06 <sieni> reference to undefined identifier: usually
04:27:20 <eivuokko> written them in mail that is, not code :-(
04:27:41 <ndm> dcoutts, please do, for the moment i'll just use threads and only develop it at home
04:27:53 <ndm> with the hope that someone fixes the threads issue before i'm ready to use it properly
04:27:59 <ndm> eivuokko: i didn't realise that...
04:28:09 <dcoutts> ndm, that's not likely, we've been tring to fix it for a couple years
04:28:24 <ndm> dcoutts, have you tried threats :)
04:28:36 <dcoutts> I've tried cunning low level hacks
04:29:01 <dcoutts> extracting the info I need to get the RTS and the glib main loop to cooperate
04:29:19 <dcoutts> via low level C code, importing all kinds of privae RTS .h files
04:29:33 <dcoutts> as a proof of concept it mostly worked
04:29:44 <ndm> eivuokko: i didn't realise it was XP only, i'd rather use something more general, do you know of an equivalent function?
04:29:50 <ndm> or set of functions to get the same behaviour
04:29:59 <ndm> dcoutts, well good luck to you - would be very nice
04:31:18 <dcoutts> the rts design has changed since my last hacks
04:31:24 <eivuokko> ndm, There isn't one afaik.  I think the only "sensible" solutions are to enumerate processes for process ids.  This has been problem for me when I wrote my tracer/debugger...I couldn't get process id for the process I was debugging.
04:31:35 <dcoutts> and with the recent smp stuff the scheduler has changed some more
04:31:50 <dcoutts> I should ask JaffaCake what the current prospects are
04:31:58 <ndm> dcoutts, have you openned a bug for jaffacake to keep it reminded of?
04:32:11 <dcoutts> no, perhaps I should
04:32:20 <ndm> eivuokko: is there a function to enumerate processes relibaly?
04:32:38 <foxy_> dcoutts, you found the problem?
04:33:14 <ndm> eivuokko: found it, EnumerateProcesses, then OpenProcess to check the handle
04:33:32 <eivuokko> ndm, There are many.  CreateToolsnapShot32 and Process32First or something like that.  Then there's dbghlp stuff, registry/performance counters and even some EnumerateProcesseses (with variations for servers and terminal services)
04:34:16 <ndm> eivuokko: thanks for your help, have to go now but will look more when i get back
04:34:32 <eivuokko> ndm, Yeah sure.  I can't do much from where I am right now either.
04:38:12 <dons> dcoutts: so streams under 6.5 seems 3-4x faster than under 6.4.1
04:38:20 <dcoutts> dons, yeah
04:38:21 <dcoutts> nice
04:38:26 <dons> pretty cool
04:38:42 <dcoutts> foxy_, yes, you can't focus a widget that's not visible
04:38:54 <dons> which system corresponds to what we're currently doing? WrapElimMapFilter?
04:39:04 <dcoutts> dons, yes
04:39:21 <dcoutts> which seems to be as fast as WrapElimNoAcc right?
04:39:27 <foxy_> dcoutts, oh, how do I make a widget visible, that's what I thought I was doing with focus?
04:39:51 <dcoutts> foxy_, you're tring to make the right notebook tab visible, so do that instead
04:39:57 <dons> dcoutts: streams seems to be mostly faster then, under 6.5. but some are slower
04:40:09 <foxy_> dcoutts, OK, thanks
04:40:31 <foxy_> dcoutts, I was also helping you could help with a newbie c2hs question...
04:40:32 <dcoutts> foxy_, sadly that needs an Window -> Index mapping
04:40:56 <foxy_> I spoke too soon :(
04:40:58 <dcoutts> as the notbook switch to tab function needs a tab by an int index
04:41:05 <dons> dcoutts: yeah, NoAcc and MapFilter seem around the same
04:41:17 <dcoutts> dons, which Streams ones are slower?
04:41:26 <dcoutts> in 6.5 compared to 6.4.2
04:42:55 <foxy_> dcoutts, are you referring to 'notebookSetCurrentPage :: NotebookClass self => self -> Int -> IO ()' ?
04:43:05 <vincenz> Question abuot where clauses
04:43:14 <vincenz> are they monomorphically restricted if you don't give them arguments?
04:43:16 <dcoutts> foxy_, right.
04:43:30 <vincenz> where tag = A.Tag ...
04:43:35 <vincenz> where tag x = A.Tag ... x
04:44:08 <dcoutts> foxy_, after you've set the right page then you might think about settign the focus, depeding on the behaviour you want
04:44:22 <dcoutts> you may not need to, I'm not 100% sure
04:44:29 <dons> dcoutts: up/up seems marginally slower. and down/map. but only just
04:44:37 <foxy_> dcoutts, how do I get the window index?
04:44:40 <dcoutts> dons, oh yes, I did notice that
04:45:00 <dons> but in other places, its 4x faster :)
04:45:21 <dons> filter/filter is much faster
04:45:27 <dcoutts> foxy_, either keep a mapping as you add them, or perhaps you could try enumerating the children of the notebook using container functions
04:45:39 <dcoutts> dons, as is map/map
04:46:02 <dons> ah, yes, twice as fast. which removes the need for map'
04:46:10 <dcoutts> from my results it looked 3x faster and filter/filter 2x faster
04:46:19 <foxy_> dcoutts, does the numbering start at 1 in order of addition?
04:46:24 <dcoutts> yes eliminating map' would be nice
04:46:33 <dons> dcoutts: mine are opposite. filter/filter is 3x, map is 2x
04:46:34 <dcoutts> foxy_, probably from 0
04:46:38 <dcoutts> dons, heh
04:46:56 <dons> could be different input data
04:47:09 <dcoutts> dons, what size file are you using, and what cpu?
04:47:20 <dcoutts> I was using a 50Mb .iso
04:47:30 <dcoutts> so probably a fair spread of 0's
04:47:34 <foxy_> dcoutts, notebookPageNum :: (NotebookClass self, WidgetClass w) => self -> w -> IO (Maybe Int)
04:47:37 <dons> 30M text, 1.6Ghz Pentium M
04:47:49 <dcoutts> foxy_, ah, ok good find :-)
04:48:10 <dcoutts> dons, so not many 0's in that
04:48:23 <dcoutts> oh, no it's 102
04:48:36 <dcoutts> > Char.chr 101
04:48:37 <lambdabot>  'e'
04:48:39 <dcoutts> > Char.chr 102
04:48:40 <dons> yeah
04:48:40 <lambdabot>  'f'
04:48:43 <dcoutts> ah right
04:48:44 <dons> designed for text
04:48:48 <dcoutts> yes
04:48:58 <dcoutts> so less of those in a .iso
04:49:05 <foxy_> dcoutts, I get   "Cannot find a definition for `mxClassID' in the header file." and many more like it when running c2hs.  I can see the definitions in the .h file?
04:49:12 <dons> so the filters will be smaller and faster.
04:49:45 <dcoutts> foxy_, when building gtk2hs or your own thing?
04:50:03 <foxy_> dcoutts, my own thing
04:50:15 <dons> I need to look at how these streams are compiled into Core
04:50:24 <dcoutts> and this thing in the headers is a what? a  function, type, constant... ?
04:50:38 <dcoutts> and how are you referencing it in your .chs file?
04:51:19 <dcoutts> dons, oh, the up/up down/down will be slower because of the scanS problem
04:51:38 <dons> ah
04:51:42 <dons> yep
04:51:44 <dcoutts> you could try the previous technique of doing a cons/snoc on the outside
04:51:49 <dons> ok.
04:51:52 <dcoutts> rather than in the scanS
04:53:06 <foxy_> dcoutts an enumeration: {#enum mxClassID {underscoreToCase} deriving (Eq,Show,Read)#}
04:53:27 <foxy_> dcoutts, but nothing gets recognised
04:53:32 <dcoutts> and in the header?
04:54:07 <dcoutts> foxy_, if it's long paste it somewhere or use #haskell-oveflow
04:54:19 <foxy_> typedef enum {
04:54:21 <foxy_> 	mxUNKNOWN_CLASS = 0,
04:54:22 <foxy_> <snip>
04:54:24 <foxy_> } mxClassID;
04:54:32 <dcoutts> hmm
04:54:36 <vincenz> is there a concatMapM
04:54:42 <vincenz> @hoogle concatMapM
04:54:42 <lambdabot> No matches found
04:54:46 * vincenz snaps
04:54:54 <vincenz> Anyone know a patter for
04:55:05 <vincenz> > liftM concat $ mapM (mapM f) lofl
04:55:05 <lambdabot>  Not in scope: `lofl'
04:55:30 <vincenz> hmm
04:55:38 <vincenz> mapM f $ concat lofl maybe
04:56:06 <ricky_clarkson> lying on the floor laughing?
04:56:08 <ricky_clarkson> lofl
04:56:12 <vincenz> list of list
04:56:40 <foxy_> @pl liftM concat $ mapM (MapM f)
04:56:41 <lambdabot> fmap join (mapM (MapM f))
04:56:42 <dcoutts> foxy_, as a diagnostic try c2hs --keep and then look in the .i file for mxClassID
04:56:49 <foxy_> ok
04:57:14 <dcoutts> the .i file is what c2hs actually parses after running cpp
04:57:23 <vincenz> foxy_: lambdabot is not -that- smart
04:57:57 <foxy_> # 1 "Matrix.h"
04:57:59 <foxy_> # 1 "<built-in>"
04:58:00 <foxy_> # 1 "<command line>"
04:58:02 <foxy_> # 1 "Matrix.h"
04:58:10 <foxy_> that's all that's in it
04:58:25 <dcoutts> foxy_, then your cpp stuff is not right
04:58:58 <dcoutts> are you importing the right header, does it need something -D defined to expose things?
04:59:14 <foxy_> I wrote a test .c with the CPP stuff that includes the file fine...
04:59:24 <dcoutts> test with cpp
04:59:43 <dcoutts> or gcc -E and your .c file
04:59:54 <dcoutts> perhaps it needs some define
05:01:27 <foxy_> does c2hs have to be able to read all the .h files included from the one I'm targetting?
05:04:41 <vincenz> @pl liftM concat $ mapM f
05:04:41 <lambdabot> fmap join (mapM f)
05:04:46 * vincenz mutters
05:13:32 <foxy_> dcoutts, c2hs isn't picking up the include path I give it, it is exactly the one I give cpp
05:14:20 <dcoutts> foxy_, you're using -C-I/usr/include/foo ?
05:14:43 <foxy_> yup
05:16:05 <dcoutts> foxy_, as another diagnostic, try -cecho
05:16:22 <dcoutts> then look at the .i file so see what the exact cpp command line opts were
05:18:21 <foxy_>   The symbol `-' does not fit here. (referring to the leading '-')
05:18:23 <foxy_> ->  -x c -I/C/Apps/MATLAB704/extern/include MxMatrix.h
05:20:42 <foxy_> > let foo f x = f (x x) (x x) in foo foo
05:20:43 <lambdabot>    Occurs check: cannot construct the infinite type: t = t -> t1
05:20:43 <lambdabot>    Expe...
05:21:09 <ndm> dcoutts, if you told JaffaCake that adding proper threads for GHC to for Gtk2hs would get him WinGHC for free, that might give him some motivation
05:21:39 <dcoutts> ndm, you tell him :-)
05:22:01 <dcoutts> JaffaCake, ping :-)
05:22:38 <ndm> dcoutts, i have no idea what the problem even is :)
05:22:51 <dcoutts> foxy_, so does that look like the right or wrong cpp command then?
05:23:00 <dcoutts> ndm, no, but you've got the carrots
05:23:17 <dcoutts> I know what the problems are
05:23:22 <ndm> dcoutts, cool - i'll waft the carrots, while you explain the problems
05:23:51 <ndm> dcoutts, will get some nice carrot looking screenshots for him
05:24:40 <foxy_> dcoutts, those arguments work on the command line with cpp
05:25:18 <ndm> foxy_: cpp might be screwing things up for you, it sometimes does, in which case cpphs is the fix
05:25:33 <foxy_> ok
05:25:41 <foxy_> @where cpphs
05:25:41 <lambdabot> http://www.cs.york.ac.uk/fp/cpphs/
05:25:55 <foxy_> @karma+ dcoutts
05:25:55 <lambdabot> dcoutts's karma raised to 17.
05:26:10 <ndm> foxy_: on windows?
05:26:23 <foxy_> ndm, yes
05:27:12 <ndm> foxy_: get a HEAD build of cpphs, and add -cpp -pgmPcpphs -optP--cpp to the GHC command line
05:27:33 <ndm> i only added the --cpp feature a few days ago
05:27:45 <ndm> which is needed to use cpphs through windows with GHC
05:29:47 <foxy_> ok, I'll try that
05:30:23 <foxy_> ndm, the ghc --make command line? or in the makefile?
05:30:42 <ndm> whereever you had -cpp before, replace it with the bit
05:30:57 <ndm> "-cpp -pgmPcpphs -optP--cpp"
05:31:21 <ndm> translation: use cpp, use cpphs as the preprocessor, pass the extra flag --cpp to cpphs
05:32:38 <ndm> dcoutts, http://www-users.cs.york.ac.uk/~ndm/temp/carrot.png -- the carrot
05:33:17 <foxy_> ndm, dcoutts, cpphs didn't help
05:33:39 <vincenz> ndm: reminds me of the ocaml interpreter on windows :)
05:34:03 <dcoutts> foxy_, so you had it working with cpp, ie producing the right output
05:34:17 <ndm> vincenz: thats draft one, it will get a lot better!  - see http://www-users.cs.york.ac.uk/~ndm/projects/winhaskell.png
05:34:19 <foxy_> for my test.c
05:34:24 <dcoutts> so how did the cpp command you used compare with the command outputted into the .i file?
05:34:33 <vincenz> ndm: nice :)
05:34:50 <vincenz> ndm: make a separate lambdabtot window :)
05:34:58 <ndm> vincenz: naturally :)
05:35:07 <dcoutts> ndm, nice carrots
05:35:11 <ndm> and debugging, and profiling
05:35:18 <foxy_> I didn't prepend -x c
05:35:27 <vincenz> ndm: and then call it DrHaskell :)
05:35:38 <ndm> vincenz: already a project by that name
05:35:43 <vincenz> ndm: and hoogle!
05:35:44 <vincenz> damn
05:35:53 <ndm> @where+ DrHaskell http://www.cs.york.ac.uk/fp/darcs/drhaskell/
05:35:54 <lambdabot> Done.
05:35:57 <dcoutts> foxy_, does prepending -x c make cpp produce no proper output?
05:36:18 <ndm> vincenz: yep, and drhaskell, catch, hoogle, hsspell, hscolour, haddock etc ...
05:36:27 <ndm> and cabal naturally
05:36:30 <foxy_> dcoutts, nope, prepending still works
05:36:36 <vincenz> ndm: what does drhaskell do?
05:36:47 <dcoutts> foxy_, you're sure you've got it working with cpp? cpp -x c -I/blah  > foo.i
05:36:53 <dcoutts> actually produces the right output?
05:36:58 <foxy_> yup!
05:37:12 <ndm> vincenz: for example, i write map f (map g x), and drhaskell goes "hmm, perhaps map (f . g) x would be a better thing to write"
05:37:15 <dcoutts> and when c2hs does the exact same thing it doesn't?
05:37:23 <vincenz> ndm: ah
05:37:27 <dcoutts> foxy_, it's using the same cpp? try -ccpp
05:37:51 <mux> god, I hate css
05:37:53 <ndm> vincenz: but its not nearly useable yet
05:37:54 <dcoutts> ndm, na leave that for the compiler to do
05:38:11 <mux> it's so cool theoritically and so incredibly shitty in practice
05:38:13 <vincenz> Anyone know how to renumber SCREEN windows?
05:38:36 * dcoutts heads out to the shops
05:38:39 <vincenz> kinda like "/window move left" in irssi, but then for SCREEN
05:38:42 <ndm> dcoutts, similar but not quite - its about suggesting refactorings for better code, rather than improving speed
05:38:45 <dons> mux, css is theoretically cool?
05:38:58 <ndm> i.e. putStrLn (show x) ==> print x
05:39:15 <foxy_> dcoutts, I tried using --cpp=cpp and now I get:
05:39:16 <foxy_> # 1 "MxMatrix.h"
05:39:18 <foxy_> # 1 "<built-in>"
05:39:20 <foxy_> # 1 "<command line>"
05:39:21 <foxy_> # 1 "MxMatrix.h"
05:39:36 <mux> dons: oh yeah, theoritically it allows you to do what it was designed for, which is a lot
05:39:40 <dons> mux, isn't it just more crud on the crud pile ?
05:40:12 <ndm> dcoutts, anyway, becuase of the lack of threading that carrot example takes about 5 seconds per line to produce, so thats the stick (that the carrot runs too slowly)
05:40:17 <mux> you prefer embedding the style information inside the html page? with tons of <font> tags and the like?
05:40:25 <mux> CSS *is* needed
05:40:32 <ndm> css is pretty nice, i think
05:40:34 <ndm> i like it :)
05:40:39 <dons> sure, abstraction is needed
05:40:40 <mux> it just doesn't work because browser makers can't read a spec
05:41:02 <ndm> mux: css is relatively well implemented if you pick the right subset
05:41:07 <mux> even those ones that are supposedly CSS compliant and all shits themselves
05:41:23 <mux> ndm: that is, if you do hacks, using hardcoded widths in pixels and such
05:41:39 <ndm> mux: never! i hate it when people do that
05:42:04 <mux> yes, I do too, but in many cases you can't have something properly scalable that works with every browser
05:43:33 <mux> or you have to resort to using <table>
05:43:39 * mux sighs
05:45:54 <ndm> table is pretty handy, and if used right, can be properly scaleable
05:46:20 <mux> yes, if your information can be structured as a table and it makes sense
05:46:31 <mux> otherwise you'd rather use <div>, in a perfect world
05:57:32 <LordBrain> i know how to retitle screen windows...
06:00:30 <ski> vincenz : ^A:number 5
06:00:36 <vincenz> thx
06:00:37 <vincenz> :)
06:00:45 <ski> (swaps if occupied)
06:00:57 <LordBrain> aha.. cool
06:01:54 <LordBrain> i always thought ^A was a strange choice for the meta... yet i always leave it on the default setting so i am never tripped up if i go to a fresh install or something.
06:03:00 <LordBrain> in bash, ^A takes you to the beginning of the line
06:03:43 <LordBrain> my brother uses ^K
06:05:45 <LordBrain> while we are on the topic, does anyone know what the ASCII XON/XOFF commands are used for? ^A^s in screen
06:06:38 <LordBrain> they seem like a misfeature to me, because i have hit them accidentally a few times
06:07:19 <ski> iirc, it was something about the receiver telling the other party it for a while can't handle more input (buffers full or whatever)
06:07:34 <ski> i think one can turn it off in screne
06:08:47 <LordBrain> yeah.. i think i'll disable it
06:08:54 <ski> s/screne/screen/
06:11:47 <jtal> I found this example in a tutorial: http://lolofie.com/h.html
06:12:00 <jtal> I think it is slightly broken but I'm not sure
06:12:19 <vincenz> @type foldr
06:12:20 <lambdabot> forall b a. (a -> b -> b) -> b -> [a] -> b
06:12:50 <jtal> can someone take a look for me? :>
06:20:01 <dcoutts> foxy_, lets move to #haskell-overflow
06:20:17 <kowey> jtal: the indentation on that is messed up
06:20:26 <kowey> jtal: you might want to see http://en.wikibooks.org/wiki/Haskell/Indentation
06:20:44 <jtal> ok
06:21:10 <dcoutts> ndm, can't you use line buffering for taking to the hugs/ghci process?
06:21:31 <dcoutts> so you can write a line at a time rather than per-char
06:21:35 <ndm> dcoutts, "abc" ++ show (sum [1..1000000000])
06:21:52 <jtal> the thing parses, its just that the description says "will print out everything inputted and then exit when given an empty word"
06:21:54 <dcoutts> ndm, hmm, ok block buffering?
06:22:03 <ndm> dcoutts, not really, i can do time buffering, i.e. keep looking and buffer up for 0.n seconds
06:22:04 <jtal> I'll fix the indentation first and see if it changes the behavior
06:22:11 <dcoutts> ndm, non blocking block buffering
06:22:14 <ndm> dcoutts, again, block buffering is just less predictable line buffering
06:22:20 <ndm> dcoutts, how do i do that?
06:22:27 <dcoutts> hGetNonblocking
06:22:28 <ndm> no blocking block buffering would be fine
06:22:42 <dcoutts> @hoodle nonblocking
06:22:43 <lambdabot> System.IO.hGetBufNonBlocking :: Handle -> Ptr a -> Int -> IO Int
06:22:43 <lambdabot> System.IO.hPutBufNonBlocking :: Handle -> Ptr a -> Int -> IO Int
06:22:51 <dcoutts> it's a bit low level
06:22:53 <dcoutts> Ptr a
06:22:57 <jtal> hSetBuffering for me
06:23:26 <ndm> it is very low level, and is a bit like papering over the cracks
06:23:38 <ndm> and will still be slow, for when i do need to print
06:23:48 <dcoutts> why?
06:24:04 <ndm> each print is slow, doing one per char is very slow
06:24:18 <ndm> but even if i do it in bigger blocks, its still going to end up being a performance bottleneck
06:24:24 <ndm> just at a higher granularity
06:24:26 <dcoutts> hmm
06:24:27 <dcoutts> right
06:24:29 <ndm> so still won't be proper speed
06:24:33 <dcoutts> that makes all the difference
06:24:36 <ndm> i do time buffering on windows
06:24:51 <dcoutts> but yes, it's a bit odd why we're getting pauses
06:24:53 <ndm> i buffer for up to 0.1 seconds, and a max of 10000 letters
06:24:59 <dcoutts> I'd like to know what's really going on
06:25:00 <ndm> can you replicate on Linux?
06:25:11 <dcoutts> I've not tried yet
06:25:17 <dcoutts> @where guihaskell
06:25:18 <lambdabot> http://www.cs.york.ac.uk/fp/darcs/guihaskell
06:25:32 <dcoutts> @where proplang
06:25:33 <lambdabot> http://www.cs.york.ac.uk/fp/darcs/proplang
06:25:44 <ndm> those copies are the ones i'm using to test it via
06:27:19 <ndm> dcoutts: actually, hold on a sec, haven't pushed the proplang changes
06:27:32 <jtal> kowey: oops, I messed up indentation when pasted to html- so my question is- that function should _return_ everything typed, not _print_ everything thats been typed, right?
06:28:54 <kowey> guess that description is wrong... i see what you mean
06:28:55 <ndm> dcoutts, pushed now
06:29:02 <dcoutts> ndm, no .cabal file?
06:29:13 <ndm> dcoutts, patches welcome :)
06:29:23 <ndm> if you look at make.bat, it should tell you how to do it
06:29:31 <jtal> kowey: thanks, I'm new so I tend to believe anythign in print :>
06:29:33 <ndm> and put guihaskell and proplang in the same directory
06:29:40 <dcoutts> ndm, ah
06:29:41 <ndm> since they just -i each other
06:30:06 <ndm> not on top of each other, but with the same parent - gui\proplang and gui\guihaskell i have
06:30:18 <dcoutts> yep
06:31:20 <ndm> and if you want to be sure its not overhead of changing the textbox, in PropLang.Gtk change:
06:31:32 <kowey> jtal: is this tutorial online? (am working on the haskell wikibook with dmhouse, and always on the lookout for things we can swallow)
06:31:33 <ndm> in liftTextView
06:31:52 <ndm> gtkPropEvent ==> getProp and comment out the second argument
06:32:10 <ndm> that stops PropLang from registering a handler on the text view, although it doesn't make any performance difference
06:32:22 <ndm> but i suspect its the first thing you'll think of :)
06:33:01 <dcoutts> ndm, it's very quick here
06:33:37 <ndm> dcoutts, do you have multi-processor?
06:33:54 <dcoutts> no
06:34:19 <dcoutts> [0..500] is instant
06:34:31 <jtal> kowey: http://www.isi.edu/~hdaume/htut/tutorial.pdf
06:34:46 <kowey> oh! yaht, thanks
06:35:03 <dcoutts> ok well not instant but pretty quick
06:35:14 <ndm> dcoutts, its at least 25 secs on my machine
06:35:20 <dcoutts> hmm
06:35:36 <ndm> well at least my GuiHaskell will be useable for people who aren't me
06:35:40 <kowey> yes... yaht is very good (but don't worry if you don't understand the continuations chapter)
06:35:47 <ndm> i'll wait til i get home, and try it on that machine
06:35:58 <ndm> see if its fast or slow, then i can figure out if its windows or HT
06:36:31 <dcoutts> ndm, might be differences in the threading in the RTS on win32
06:36:54 <ndm> dcoutts, could be anything, will search for more data points
06:37:08 <dcoutts> ndm, yeah, we want to know where the time is being taken
06:37:33 <dcoutts> you've added trace points where we have C<->Haskell transitions?
06:37:54 <dcoutts> perhaps also add cpu time to the trace so we can see big gaps
06:38:01 <ndm> dcoutts, guihaskell takes up pretty much 100% CPU while its doing the outputting
06:38:12 <ndm> if you tell me how, i'll add trace points :)
06:38:21 <dcoutts> print!
06:38:29 <dcoutts> we're in IO afterall
06:38:40 <dcoutts> @hoogle cputime
06:38:41 <lambdabot> CPUTime :: module
06:38:41 <lambdabot> CPUTime.cpuTimePrecision :: Integer
06:38:41 <lambdabot> CPUTime.getCPUTime :: IO Integer
06:39:45 <ndm> where shall I add that?
06:44:22 <ndm> dcoutts, i commented out the appendText function, so it does return (), and it still takes a long time to do [1..500], even though its not actually printing anything
06:45:11 <dcoutts> ndm, so the thread now doesn't call back to C when it gets input
06:45:28 <dcoutts> so it's only the callback time for the timeout?
06:45:38 <dcoutts> does it take 100% cpu when it's idle?
06:45:46 <ndm> dcoutts, i guess so, yes, but now it doesn't take 100% CPU
06:46:23 <ndm> in fact, the time to do the processing is now 0% pretty much
06:46:38 <ndm> but it still takes a while to return
06:46:41 <dcoutts> ndm, but it still takes a long time at 100% cpu?
06:46:54 <ndm> dcoutts, no, 0% CPU, but a long time still
06:47:04 <ndm> at 100% CPU it takes longer, but actually outputs stuff to the screen
06:47:47 <dcoutts> ok, so we want traces in the thread that's waiting on IO from hugs
06:47:57 <dcoutts> every time it does a read/getchar
06:48:22 <dcoutts> and proably before/after the yield
06:48:25 <dcoutts> with cpu times
06:48:31 <dcoutts> so we can see where the big gaps are
06:48:40 <ndm> it doesn't do getChar
06:48:43 <ndm> it does getContents
06:48:46 <ndm> then lazily processes it
06:49:10 <ndm> but i can tag the processing function
06:49:55 <ndm> and given that the processor is now 0%, won't i need wall clock, since cpu will probably not go up?
06:52:55 <dcoutts> ndm, right, wall clock
06:53:45 <dcoutts> btw getContents does non blocking block buffering ok
06:54:04 <dcoutts> so you should be able to turn block buffering on when using hGetContents
06:54:42 <dcoutts> how were you doing it before in C ?
06:55:31 <ndm> dcoutts, buffering?
06:55:57 <ndm> in a separate thread, time buffering, reading single chars, and buffering them up into n char blocks with a timer to flush the buffer
06:56:10 <ndm> what can i use to get the time, rather than getTime?
06:56:34 <dcoutts> ndm, for the handles to/from hugs, what buffering are you using now?
06:56:45 <ndm> dcoutts, none
06:56:54 <ndm> i explicitly set nobuffering
06:57:00 <dcoutts> I think you should be able to use block buffering
06:57:08 <dcoutts> since you're using hGetContents
06:57:30 <eivuokko> ndm, Did you write bindings to enumerate processes in Windows?
06:58:01 <ndm> eivuokko: no, have given up on that for the moment...
06:58:50 <ndm> dcoutts, show ClockTime is pretty useless, not enough resolution
06:58:50 <eivuokko> ndm, If it (may) helps you, I'll add something in Win32.
06:59:01 <dcoutts> ndm, :-(
06:59:16 <ndm> eivuokko: i just want to GenerateConsoleCtrlEvent on a processhandle, anything that you could add that gives me that would be great!
07:00:32 <ndm> dcoutts, i get abotu 12 characters per second out of [1..500]
07:00:43 <ndm> dcoutts, thats with block buffering
07:01:21 <dcoutts> bizarro
07:01:48 <ndm> yep indeedy :)
07:11:04 * edwardk waves ello.
07:21:17 <LordBrain> is there a tutorial specially taylored to hscurses?
07:27:04 <sek> does anyone know if there exists a haskell interpreter that allows step by step tracing (ideally say like prolog sicstus does). hat claims to do tracing but i'm not sure if it is the same
07:28:10 <dons> LordBrain: nope.
07:28:18 <dons> sek, hat
07:28:22 <dons> ?where hat
07:28:23 <lambdabot> http://haskell.org/hat
07:28:32 <dons> there's also freja
07:28:34 <dons> ?where freja
07:28:35 <lambdabot> I know nothing about freja.
07:28:41 <dons> ?google freja haskell
07:28:43 <lambdabot> http://www.haskell.org/hat/publications.html
07:28:43 <lambdabot> Title: Hat publications
07:28:48 <dons> oh, interesting
07:30:38 <ndm> hat provides all the functionality of hood and freja
07:31:01 <dcoutts> ndm, I've got a thing working using hGetBufNonBlocking & hWaitForInput
07:31:16 <dcoutts> but your buisness with escape codes etc confuses me :-)
07:31:19 <ndm> dcoutts, using the inputWait, or threads?
07:31:23 <dcoutts> threads
07:31:33 <dcoutts> but using inputAdd would be similar
07:31:36 <ndm> dcoutts, i need to parse escape codes, and on certain escape codes fire events, and on others tweak formatting
07:31:50 <dcoutts> sure
07:32:04 <ndm> i do a :set prompt %s\ESC[50m
07:32:14 <ndm> and then when i see escape code 50 thats the end of computation
07:32:20 <dcoutts> though it would work differently when one is doing a string at a time rather than char at a time I guess
07:32:27 <psi> what are you coding?
07:32:30 <ndm> indeed
07:32:36 <ndm> would need to make it stateful in some way
07:32:38 <dcoutts> otherwise you don't get the advantages of doing appendText with a big chunk of text
07:32:56 <dcoutts> which reduces the number of redraws which is obviously faster
07:33:05 <ndm> psi: a WinHugs, but all platforms, all interpretters and written in haskell
07:33:27 <ndm> dcoutts, yes, i figured that for performance at some point i would want to move to appendText which chunks
07:33:35 <psi> I once made the gtk text widget support ansi escape sequences (well, the colors at least). I found it a bit of a pain :)
07:33:46 <psi> ndm: cool
07:33:49 <ndm> psi: was pretty easy for me
07:34:04 <ndm> psi: http://www-users.cs.york.ac.uk/~ndm/temp/carrot.png
07:34:51 <dcoutts> ndm, btw embeding a toolbar in a notebook tab is ugly under most themes
07:34:52 <psi> why are you using escape sequences?
07:34:59 <dcoutts> because noone else ever does that :-)
07:35:01 <ndm> dcoutts, but not under windows :)
07:35:13 <dcoutts> true
07:35:19 <ndm> i'll work on making it look good once it works
07:35:27 <dcoutts> though I've never seen anyone do it on windows either ;-)
07:35:31 <ndm> but having a toolbar in a notebook is a pretty good interface
07:35:49 <ndm> bigger buttons, less need to learn, lots of commands avaiable, no need for menus
07:35:57 <ndm> its similar to waht the new MS Office interface will be
07:36:02 <ndm> although i thought of it first :)
07:36:06 <dcoutts> heh
07:36:19 <ndm> dcoutts, have you seen screenshots of the new office interface?
07:36:24 <dcoutts> some
07:36:33 <psi> does ghci print out text with escape sequenses?
07:36:34 <dcoutts> I rcall it was wierd
07:36:44 <sek> thanks dons
07:37:04 <dcoutts> and I'm not sure how they switched toolbars to fit the context
07:37:05 <dmhouse> dons: ping
07:37:12 <ndm> dcoutts, its very cool
07:37:23 <ndm> psi: no, it doesn't, but i use :set prompt to make it
07:37:41 <psi> ah
07:37:59 <ndm> dcoutts, contextual tabs: http://blogs.msdn.com/jensenh/archive/2006/03/07/545300.aspx
07:38:00 <lambdabot> Title: Jensen Harris: An Office User Interface Blog : The Long Road to Contextual Tabs
07:38:40 <ndm> i used the beta of Office 2007 for a bit, very impressive, very easy to use
07:39:40 <ndm> i think tabs and toolbars is the best way for guihaskell, so i can support hat etc. without either deep menus no one finds, or lots of toolbars
07:40:24 <ndm> dcoutts, any chance of a sceenshot showing just how bad it is under Linux?
07:42:05 <LordBrain> so guihaskell is a gui version of an interactive interpretter?
07:42:23 <SamB> LordBrain: it sounds more like an IDE
07:42:27 <ndm> LordBrain: and lots more, but yes, at the minimum
07:42:28 <LordBrain> oh
07:42:36 <ndm> more like a gui interactive interpretter than an IDE
07:42:43 <ndm> but about half way beteween, i'd say
07:42:50 <dcoutts> ndm, http://dhcp0332.gradacc.ox.ac.uk:8080/~duncan/GuiHaskell.png
07:43:12 <dcoutts> it's mainly the double border thing
07:43:36 * mux notes it's harder to find explanatory texts on arrows than it is to find some on monads
07:43:36 * SamB doesn't get how a GUI is useful on something that is more like an interpreter...
07:43:52 <emertens> What is the "best" library for writing GUI haskell apps in windows?
07:43:55 <ndm> dcoutts, that should be easy to fix
07:43:58 <ndm> emertens: Gtk2hs
07:44:03 <LordBrain> there is a wikibook that covers arrows i think
07:44:05 <dmhouse> emertens: Either wxHaskell or Gtk2Hs.
07:44:24 <emertens> Do either of those work with Visual Haskell (ghc 6.5)
07:44:29 <ndm> SamB, ever used WinHugs? it give features like hyperlinks to error locations, copy and paste, drag and drop, all that good stuff missing from consoles
07:44:42 <SamB> drag and drop?
07:45:07 <dmhouse> ndm, WinHugs isn't a console-based app?
07:45:14 <dcoutts> emertens, there are no builds for VH no, which is not to say you couldn't build either for VH but you probably do not want to try.
07:45:19 <ndm> dmhouse: no, not at all
07:45:21 <emertens> It seems like Visual Haskell would be hard to beat if you had Visual Studio 2003
07:45:28 <emertens> dcoutts: alrighty
07:45:37 <mux> Visual Haskell.NET
07:45:38 <ndm> emertens: its dead slow, doesn't have debugging and just makes my system crawl
07:45:40 <emertens> I've got 6.4.2 installed as well
07:45:55 <emertens> ndm: I've never had speed issues with it
07:46:01 <LordBrain> there's a Visual Haskell?
07:46:04 <emertens> ndm: but I can agree on the debugging
07:46:05 <dcoutts> emertens, there's Gtk2Hs for 6.4.2, there's no wxHasekell fro 6.4.2 as far as I know
07:46:07 <LordBrain> is that a microsoft product?
07:46:10 <ndm> emertens: i have a 750Mhz athlon
07:46:11 <SamB_XP> no
07:46:21 <ndm> yes
07:46:26 <emertens> ndm: I haven't used a computer of that speed for many year ;)
07:46:29 <ndm> its by people at microsoft, its just released free
07:46:38 <ndm> emertens: i am a poor student, and have been for many years
07:46:45 <dmhouse> ndm: looks good.
07:46:50 <SamB_XP> ndm: it isn't an MS product if you don't have to pay for it, silly!
07:47:01 <SamB_XP> unless you used to, I guess
07:47:06 * dmhouse needs to check out Haskell development environments for Windows, as he'll be teaching a Haskell course from September.
07:47:19 <ndm> SamB_XP: in that case XP isn't a MS product :)
07:47:22 <dcoutts> emertens, http://haskell.org/~duncan/gtk2hs/gtk2hs-0.9.10.exe
07:47:23 <ndm> dmhouse: I recommend WinHugs
07:47:24 <SamB_XP> ndm: sure it is
07:47:26 <dmhouse> Sadly I don't think using Visual Haskell will be an option.
07:47:36 <ndm> SamB_XP: i never paid for it :)
07:47:40 <LordBrain> two different definitions of the word product
07:47:40 <SamB_XP> ndm: sure you did
07:47:51 <dmhouse> ndm: yes, I think that looks like the best option. How does it integrate with, say, EclispeFP? At all?
07:47:55 <emertens> will WinHugs run gtk2hs?
07:48:00 <dcoutts> emertens, no
07:48:05 <LordBrain> why do they give away visual haskell?
07:48:06 <emertens> gtk2hs is ghc only, right
07:48:10 <ndm> dmhouse: not a all is my guess
07:48:12 <dcoutts> yes, at the moment
07:48:13 <SamB_XP> ... unless you got your computer used and warezed XP?
07:48:22 <ndm> but it can add editor support relatively easy, with a single option
07:48:32 <ndm> and if you give me the details, i'll put it in the build
07:48:32 <emertens> Who said that there was a 6.4.2 version of gtk2hs?
07:48:37 <dcoutts> emertens, http://haskell.org/~duncan/gtk2hs/gtk2hs-0.9.10.exe
07:48:38 <LordBrain> @where visual haskell
07:48:39 <lambdabot> I know nothing about visual.
07:48:42 <dmhouse> ndm: do you have any common problems using WinHugs? I.e. with non Hugs-compatible libraries?
07:48:45 <emertens> dcoutts: that one gave me an error
07:48:50 <emertens> dcoutts: it wanted 6.4.1 or 6.2
07:48:56 <LordBrain> @where visualhaskell
07:48:56 <lambdabot> I know nothing about visualhaskell.
07:48:58 <dcoutts> oh, hmm
07:49:02 <ndm> dmhouse: lack of Gtk2hs, other than that, no - i use it for everything, including Yhc etc.
07:49:04 <emertens> @google visual haskell
07:49:05 <LordBrain> @google visual haskell
07:49:06 <lambdabot> http://www.haskell.org/visualhaskell/
07:49:07 <lambdabot> Title: Visual Haskell
07:49:07 <lambdabot> http://www.haskell.org/visualhaskell/
07:49:08 <lambdabot> Title: Visual Haskell
07:49:13 <dmhouse> ndm: awesome.
07:49:27 <dmhouse> ndm: 'including Yhc'? You can use different compiler backends with it?
07:49:38 <ndm> dmhouse: i develop Yhc using WinHugs
07:49:43 <dmhouse> Oh, I see.
07:50:13 <dmhouse> ndm: which editor do you use?
07:50:20 <ndm> dmhouse: TextPad
07:50:39 <dmhouse> ndm: what kind of Haskell support does it have? Is it free?
07:50:44 <ndm> dmhouse: Its also got inbuild support for gvim and another one, whatever is on the york undergrad computers
07:50:52 <ndm> dmhouse: syntax hilighting, very good editor, no
07:51:02 <emertens> Is 6.4.2 not supported? or could i just trick gtk2hs to use it?
07:51:08 <dcoutts> emertens, are you sure? it works for me
07:51:16 <dmhouse> Is it easier to set up than Eclipse? :)
07:51:19 <mnislaih> dmhouse: I vote for Visual Haskell. I use Emacs for ghc hacking, and Visual Haskell for all my pet projects (when/if I can use Windows)
07:51:32 <mnislaih> Eclipse is not difficult to set up, is it ?
07:51:35 <emertens> dcoutts: Can i just ignore the error then?
07:51:44 <ndm> dmhouse: trivial, and beautiful, and its non-paid version is not crippled or that annoying
07:51:47 <ndm> certainly useable
07:51:52 <dcoutts> emertens, I just tried and it works finds ghc-6.4.2 ok http://haskell.org/~duncan/gtk2hs/gtk2hs-0.9.10.exe
07:51:59 <dmhouse> mnislaih: I don't think that'll be an option, my school doesn't have VS.NET installed due to conflicts with older VS versions.
07:52:22 <dcoutts> emertens, are you sure you're not getting versions confused, the previous builds did indeed need 6.4.1 or 6.2
07:52:27 <ndm> dmhouse: i recommend any external editor of your choice - there are a pile of open source ones, but since TextPad is the best i just use that
07:52:38 <ndm> then whichever you pick, bug me and i'll add WinHugs integration automatically
07:52:39 <emertens> dcoutts: the version that you linked works
07:52:41 <ndm> and then you'll be set
07:52:43 <emertens> dcoutts: the version of the site doesn't
07:52:54 <LordBrain> TextPad i never heard of
07:52:57 <dcoutts> emertens, yes, that's why I gave you the link :-)
07:53:01 <ndm> @where textpad
07:53:01 <lambdabot> I know nothing about textpad.
07:53:02 <emertens> dcoutts: :-p
07:53:13 <dcoutts> the previous builds were for 6.2.2 or 6.4.1
07:53:28 <musasabi> Visual Haskell seems better than the Eclipse integration. Then again if you have lots of *nix using people and want only show one tool then Eclipse or Emacs might make sense.
07:53:47 <mnislaih> VH integrates very well with Cabal, ghc-api, etc.
07:53:52 <mnislaih> EclipseFP does nothing of that.
07:54:05 <emertens> dcoutts: is gtk 2.8.X ok?
07:54:11 <dcoutts> emertens, yes
07:54:33 * dmhouse wonders if there's an educational license for textpad
07:54:44 <ndm> dmhouse: i think there is, btu its still paid
07:54:57 <mnislaih> the good thing of Eclipse over emacs is that it gives you syntax error highlighting
07:55:03 <mnislaih> But I still prefer Emacs
07:55:09 <musasabi> mnislaih: Eclipse is good if you want the same environment for both windows and *nix and one does not want emacs for some reason.
07:55:18 <ndm> dmhouse: Educational discounts for site licenses are available on request.
07:55:22 <LordBrain> i'm a vimmer...
07:55:23 * mnislaih agrees 
07:55:23 <dmhouse> ndm: just saw that.
07:55:35 <ndm> its so good i even paid for it, which is the only piece of shareware i ever have
07:55:46 <ndm> even though its perfectly easy to use without paying for
07:55:59 <ndm> (although i guess something an organisation doesn't want to do)
07:56:19 <LordBrain> i wish vim's moded editing concept was more popular in other products... it just seems viewer key strokes to me.
07:56:27 <LordBrain> fewer
07:56:30 <musasabi> Emacs Haskell support seems much more friendly than the Vim one (automatic indent works and ghci integration).
07:56:41 <SamB_XP> well...
07:56:48 <SamB_XP> for a strange definition of "works"
07:57:02 <dmhouse> SamB_XP: keep hitting TAB, it works fine.
07:57:17 <SamB_XP> it doesn't always do well...
07:57:38 <musasabi> it does well 90% of the time which is enough.
07:57:52 <dmhouse> Works pretty flawlessly for me. The only annoying thing is 'if' statements.
07:58:02 <LordBrain> i'd like to use moded editing in interactive interpretters
07:58:07 <LordBrain> i kinda do in hugs
07:58:13 <LordBrain> because i just :e to get vim
07:58:14 <SamB_XP> it doesn't handle cases in "do" blocks too well, either
07:58:20 <kowey> it'd be nice if computers came with foot pedals : emacs users could bind them to meta and ctrl, vimmers could bind them to Esc and :
07:58:35 <dmhouse> You can certainly buy foot pedals.
07:58:42 <mnislaih> lol
07:58:44 <LordBrain> kowey: on laptops, i use the touch pad for esc
07:58:49 <LordBrain> its nice
07:58:53 <jgrimes_> kowey: I use a big trac-ball with buttons on the floor
07:59:25 <kowey> ahah! so i'm not alone in thinking that feet are a useful channel for talking to the computer
08:00:08 <LordBrain> i like to sit back and put my feet up tho
08:00:25 <LordBrain> hehe
08:00:51 <kowey> i'm not sure i'd like the touchpad esc thing... already touchpad-click drives me up the wall
08:01:37 <ricky_clarkson> And you could use the pedals to play the organ too.
08:02:20 <LordBrain> vi originally went to normal mode when you used the arrow keys i think.. i wonder if thats actually better
08:03:05 <dmhouse> What we _really_ need is a frequency detector so we could whistle commands to our editor.
08:03:24 <kowey> don't think our officemates would be so keen on that though :-)
08:03:50 <ricky_clarkson> Whenever I shout "Bastard" a bug should be logged against my editor.
08:04:41 * dmhouse adds a new page to the wikibook
08:09:16 <LordBrain> maybe students should just have an editor class before they take programming
08:10:00 <LordBrain> or an IDE class
08:10:12 <mahogny> omg. NO
08:10:15 <LordBrain> lol
08:10:28 <mahogny> IDEs should be banned in a first course on programming
08:10:37 <LordBrain> ok
08:10:44 <LordBrain> why's that?
08:10:54 * gds imagines already competative unis stengthening their identity be teaching different editors...
08:11:01 <SamB_XP> apparantly they only confuse beginners
08:11:10 <ricky_clarkson> LordBrain: http://jqa.tmorris.net/GetQAndA.action?qids=52&showAnswers=true
08:11:11 <mahogny> because here the IDE makes the students confused about what is really going on in the compilation process
08:11:12 <lambdabot> Title: Java Questions and Answers - FAQ #32
08:11:28 <ricky_clarkson> Generally applicable though I think.
08:11:46 <ricky_clarkson> I got confused trying to learn lisp through slime for the same reason.
08:11:47 <emertens> I was looking at gtk2hs, and the demo apps leave a console window open when they run
08:11:51 <emertens> is there a way to get around that?
08:12:09 <dcoutts> emertens, there's a FAQ about that on the Gtk2Hs website
08:12:22 <gds> I've wondered a few times if our (programming culture) fondness for ascii might be a limmitation...
08:12:24 <mahogny> however, a tool that *should* be used in a first course, although I haven't managed to convince the people at my uni, is a tracer that shows how the program is working. it would be perfect to train their intuition
08:12:43 <ValarQ> mahogny: thats right, just throw ed(1) at them instead :)
08:12:45 <mahogny> gds: it is, no doubt
08:12:45 * gds notes that CSP is "natively" handwritten...
08:12:53 <mahogny> ValarQ: :D
08:13:13 <gds> the ascii mCSP representation is quite clunky by comparison...
08:15:13 <LordBrain> ok.. well thats fine with me, i dont use an ide much anyway
08:15:33 <LordBrain> so an editor course
08:15:41 <LordBrain> :)
08:16:49 <LordBrain> do you think you could make a whole course out of vim or emacs?
08:16:59 <jgrimes_> maybe a 1 hour course
08:17:14 <LordBrain> yeah... i think stretching it out too far would be really boring
08:17:25 <_Codex> emacs needs 3 year course though.
08:17:26 <ValarQ> LordBrain: doesn't emacs contain an IDE?
08:17:36 <LordBrain> i dont use emacs
08:17:40 <LordBrain> i use vim for everything
08:17:44 <ndm> ValarQ: and an operating system, and a shrink
08:18:14 * ValarQ uses emacs for coding and elvis for configuration
08:18:20 <marcavis> Hello guys, I have just installed libreadline in my $HOME/lib directory, how do I make GHC (the "generic linux with glibc 2.3" version) find it?
08:18:45 <ValarQ> for very small jobs i even use ed(1) sometimes
08:19:01 <_Codex> emacs startup is blazingly fast compared to other OS's.
08:19:32 <dmhouse> _Codex: Emacs doesn't need a 3 year course. You can be as productive as you are with other editors inside a week.
08:19:50 <dmhouse> And then you just keep getting more productive :)
08:20:03 <mahogny> ...pico!
08:20:14 * mahogny runs
08:20:27 <Stinger_> cat > file.hs
08:20:51 <LordBrain> sometimes i want an ide version of vim
08:21:12 <LordBrain> but i'm not happy with any i tried yet
08:21:24 * gds wants yi to be a little more advanced ;)
08:21:59 <ndm> dmhouse: you can be productive in TextPad in about a minute, and you never need to learn anything again
08:22:23 <gds> (separating the concerns of the UI and the underlying stuff seems like a good idea to me)
08:23:19 <jgrimes_> ndm: Is there a non-windows version of TextPad?
08:23:33 <LordBrain> is anyone proficient in both emacs and vim?
08:23:49 <LordBrain> that sounds like it would be a bit annoying sometimes.. as you reach for the wrong binding
08:24:03 <ndm> jgrimes_, no, which is why i never boot Linux
08:24:30 <jgrimes_> ndm: I guess on the opposite, thats why I'll never use textpad ;)
08:24:39 <jgrimes_> I have heard many good things, though.
08:24:52 <emertens> Vim and Emacs' bindings are so different that I've never found myself confused
08:25:20 <LordBrain> i sometimes find myself wanting vim stuff in the shell
08:25:33 <xs> use vi keybindings?
08:25:35 <emertens> LordBrain: you cna put the shell in Vim mode...
08:25:36 <LordBrain> which is possible.. but its annoying to do vim when i cant see what mode i am in
08:25:37 <gds> LordBrain: I'm vaguely proficient in both...
08:25:59 <gds> in that I do switch from one to the other every so often...
08:26:01 <LordBrain> there is no feedback on my esc key if you put bash in vim mode
08:27:27 <LordBrain> do any vim users actually make use of that mode? i have a feeling its very few
08:28:04 <kowey> i tried for a while, but my fingers were so used to emacs-mode in shell that i eventually gave up
08:28:09 <jgrimes_> LordBrain: we have all of our hp-ux boxes set up with vi key bindings at work.
08:28:45 <LordBrain> jgrimes_: the lack of feedback doesnt bug you?
08:28:52 <LordBrain> it seems buggy in my version too
08:28:59 <LordBrain> like it switches modes inexplicably sometimes
08:29:52 <jgrimes_> LordBrain: I would assume it isn't too bad once you get used to it, but then again... I've never gotten used to it.
08:30:39 <LordBrain> i dont like to find out what mode i am in by pressing keys and having them not work
08:31:12 <jgrimes_> LordBrain: the other sysadm likes it, but he has also been using vi -> vim for quite a while
08:31:26 <LordBrain> one or twice a really strange thing happened, where readline switched to vi mode inside an interpretter even tho i dont have it set up to use vi mode
08:31:50 <LordBrain> i've been using vim for a while too
08:32:12 <LordBrain> the original vi might not have had feedback tho.. and i cant really stand not having it.
08:33:10 <jgrimes_> I would like to start using yi, or at least messing around with it. It would be nice to use an editor extensible in haskell.
08:33:21 <LordBrain> yeah
08:33:31 <LordBrain> me too... eventually
08:33:33 <gds> LordBrain: is there a hook you can add a feedback call to?
08:33:45 <gds> jgrimes_: another "me too" :)
08:38:27 <ricky_clarkson> I know very little about Haskell, but if it's completely statically typed, how would you go about adding/removing plugins to such an editor?
08:38:45 <LordBrain> hsplugins
08:38:49 <LordBrain> i figure
08:39:21 <jgrimes_> @where hs-plugins
08:39:21 <lambdabot> http://www.cse.unsw.edu.au/~dons/hs-plugins/
08:40:10 <jgrimes_> ricky_clarkson: http://www.cse.unsw.edu.au/~dons/papers/SC05.html
08:40:10 <lambdabot> Title: Dynamic Applications From the Ground Up
08:44:48 <LordBrain> gds, i dont know about it... there might be... i didnt find anything about it last i was looking tho
08:45:14 <LordBrain> if someone adds that i may switch
08:45:37 <LordBrain> really, what would be deal is like a status line in the terminal
08:45:44 <LordBrain> or something
08:46:02 <LordBrain> like terminal vim mode of some sort
08:46:34 <LordBrain> hmm maybe not
08:48:18 <LordBrain> i wonder if what i want would end up adding an ncurses dependency
08:52:14 <gds> LordBrain: What emacs are you using?
08:52:38 <LordBrain> i'm not..
08:52:57 <LordBrain> i suppose its installed...
08:53:05 <LordBrain> xemacs i think
08:53:13 <LordBrain> not sure if it is installed even
08:53:20 <gds> I may well have been reading at cross purposes with you :)
08:53:31 <LordBrain> oh
08:53:46 <LordBrain> i want the feedback in bash, not the editor, i'm happy in the editor
08:53:54 <gds> Cool...
08:54:11 <gds> Sorry - only half an eye on the channel :S
08:54:12 <vincenz> @hoogle (a -> Bool) -> [a] -> ([a], [a])
08:54:13 <lambdabot> List.partition :: (a -> Bool) -> [a] -> ([a], [a])
08:54:13 <lambdabot> Prelude.break :: (a -> Bool) -> [a] -> ([a], [a])
08:54:13 <lambdabot> Prelude.span :: (a -> Bool) -> [a] -> ([a], [a])
08:54:19 <LordBrain> like in bash in vi mode.. i want to be able to see it imediately if i press <Esc> to go to normal mode that the mode has switched.
08:57:32 <vincenz> @type lookup
08:57:37 <lambdabot> forall b a. (Eq a) => a -> [(a, b)] -> Maybe b
08:57:47 <vincenz> hmm
09:02:19 <marcavis> .../ghc-6.4.2: error while loading shared libraries: libreadline.so.5: cannot open shared object file: No such file or directory. How can I make the generic linux version of ghc find the readline that is on my $HOME/lib?
09:02:56 <marcavis> Also, I don't have a root account
09:08:22 <Cale> marcavis: add it to your LD_LIBRARY_PATH ?
09:08:56 <Cale> (and be sure to export that variable, of course)
09:12:06 <ndm> @seen dcoutts
09:12:07 <lambdabot> dcoutts is in #gentoo-haskell, #haskell-overflow, #haskell-blah and #haskell. I last heard dcoutts speak 59 minutes and 58 seconds ago.
09:12:18 <ndm> dcoutts, just as slow on my home computer :(
09:12:19 <dcoutts> @yarr!
09:12:20 <lambdabot> Smartly me lass
09:12:22 <dcoutts> hmm
09:12:38 <ndm> actually, maybe slightly faster
09:12:46 <vincenz> okk
09:12:47 <ndm> even though this is a 750Mhz vs a 3Ghz
09:12:53 <ndm> but still unuseable
09:13:10 <vincenz> dcoutts: I could use some advice on performability
09:13:19 <vincenz> [(String, foo)]
09:13:27 <dcoutts> ndm, presumably if you don't use the GUI then it's really quick?
09:13:41 <ndm> dcoutts, you mean outputting to the screen, or using a GUI at all?
09:13:43 <vincenz> I want to detect if some String is one of the heads.... I plan to do this often... should I also pass in an extra [String]?
09:13:48 <ndm> if i use -threaded its really quick :)
09:14:05 <marcavis> cale: it's working now, thanks!
09:14:06 <dcoutts> ie it's not the one-char-at-a-time-lots-of-context-switching that's the problem?
09:14:27 <dcoutts> ndm, I mean, don't run mainGUI and just output to the console
09:14:30 <Cale> marcavis: great :)
09:14:36 <dcoutts> and not using -threaded
09:14:51 <dcoutts> ndm, then presumably we get it going quickly right?
09:15:49 <ndm> dcoutts, i would assume so, but let me check
09:16:03 <ndm> although i don't see how it can be the char at a time issue, if when compiling with -threaded it works fine
09:16:14 <dcoutts> -threaded does IO totally differently
09:16:28 <dcoutts> vincenz, is that data static?
09:16:39 <vincenz> dcoutts: built once, yes
09:16:54 <dcoutts> vincenz, and you want to look up just by prefix?
09:17:06 <vincenz> well it's a list lookup
09:17:11 <vincenz> I guess I could just do lookup
09:17:17 <vincenz> and then in case of Nothing do nothing :)
09:17:18 <vincenz> seesm smarter
09:17:29 <dcoutts> no, I mean are you matching on == or a prefix
09:17:34 <ndm> ok, giving it a try...
09:17:41 <vincenz> dcoutts: ==
09:17:57 <dcoutts> vincenz, oh ok then use a Map
09:18:05 <vincenz> hmm
09:18:06 <vincenz> yeah
09:18:33 <vincenz> but first I wasn't thinking of just using plain lookup, so Map was bad
09:18:55 <dcoutts> there are some things that'd be faster than Map but they get more complex
09:19:11 * vincenz nods
09:19:16 <vincenz> on another note
09:19:31 <vincenz> is it possible to do the recursive lookup trick one often does with arrays for memoisation, with maps?
09:20:24 <ndm> dcoutts, even without calling mainGui it shows the window, never paints it, and never does any console IO...
09:20:40 <ndm> i just forked, then did waitForProcess pid
09:20:50 <sjanssen> vincenz: do you know all of the keys that you will look up before hand?
09:20:59 * vincenz nods
09:21:10 <vincenz> basically I have an ast
09:21:17 <sjanssen> then yes, just use Data.Map.fromList
09:21:18 <eivuokko> ndm, I've added toolhelp32-based process enumeration in System.Win32.Process, again in http://tamelambda.net/darcs/Win32/  And also openProcess-helper.  Please let me know if they work for you (I only tested those as much as they output something sensible looking)
09:21:19 <vincenz> with lame thunks that wrap primitive calls
09:21:20 <lambdabot> Title: Index of /darcs/Win32
09:21:35 <ndm> eivuokko: cheers :)
09:21:41 <vincenz> sjanssen: yeah but the recursive thing is for something else, but I guess it's not possible with maps due to pattern matching on Just x
09:22:02 <vincenz> :/
09:22:06 <dcoutts> ndm, just comment out the gui bits completely
09:22:17 <dcoutts> ndm, the console IO bits must work on their own
09:22:20 * vincenz wishes there were a data type indexed by non Ints that are not  -> m value
09:22:24 <vincenz> but plain -> value
09:22:27 <sjanssen> vincenz: you can't use fromJust, or something?
09:22:29 <vincenz> with the knowledge that it contains the keys you need
09:22:37 <vincenz> sjanssen: fromJust prolly uses pattern matching too, no?
09:22:46 <vincenz> so it can't be used for the lazy memoisation trick
09:22:47 <sjanssen> what is the problem with pattern matching?
09:22:53 <vincenz> lazyness
09:23:00 <sjanssen> it will work fine
09:23:01 <dcoutts> there's no problem
09:23:04 <vincenz> o.O
09:23:16 <vincenz> no I'll get a Nothing when looking up something that's not built yet
09:23:36 <dcoutts> only if you're too strict
09:23:37 <sjanssen> you won't if you use fromList
09:23:53 <vincenz> imagine a set of recursive functions in an AST
09:23:58 <vincenz> and I want to see which has side-effects...
09:24:12 <vincenz> basically any function calling some primiitve that has side-efects has side-effects
09:24:14 <sjanssen> what fromList will do is build the structure of the tree and evaluate the keys (because they're compared as they're inserted), but the values won't be evaluated
09:24:19 <vincenz> and any function calling a function that has side effects, has side-effects
09:24:30 * vincenz would like to do this without a unify/normalize two-pass syste
09:25:16 <vincenz> tho I guess that won't work with the lazyness trick, cause recursive functions will cause it to calculate endlessly when asking for a result..
09:25:21 <vincenz> :/
09:25:39 <vincenz> unless I can somehow check for re-entrancy
09:26:48 <sjanssen> mutually recursive functions won't terminate using the array trick either
09:26:57 <vincenz> no I know, just realized that
09:27:16 <vincenz> unless...there's some way to annotate you're currently looking it up and shouldn't reenter
09:27:30 <ndm> dcoutts, doesn't work at all without -threaded...
09:27:45 <dcoutts> ndm, ?!
09:27:53 <dcoutts> that's not good
09:27:58 <ndm> @where paste
09:27:58 <lambdabot> http://paste.lisp.org/new/haskell
09:27:59 <dcoutts> it certianly should do
09:28:16 <dcoutts> does ghc not use non-blocking IO on windows ?
09:28:20 <lisppaste2> ndm pasted "for dcoutts" at http://paste.lisp.org/display/23414
09:28:32 * dcoutts tries that code on unix
09:28:33 <ndm> if you compile that without threading, nothing happens
09:28:47 <ndm> you get begin wait and nothing else
09:29:31 <dcoutts> ndm, ok same here
09:29:35 <dcoutts> something's wrong
09:30:13 <ndm> i did report a ghc bug on this earlier
09:30:17 <ndm> no idea whats meant to happen
09:30:32 * ndm is a thread newbie...
09:30:41 <dcoutts> ndm, waitForProcess blocks
09:31:19 <dcoutts> ndm, change it for getChar for example
09:31:57 <ndm> that works fine now, with getChar
09:31:59 * vincenz loves the GADT stuff and how it simplifies life :)
09:32:11 <dcoutts> that's why it worked with -threaded, since that gets around the blocking of waitForProcess
09:32:14 <vincenz> @karma+ bringert Great stuff with compos, my code is so much simpler that it would've been
09:32:14 <lambdabot> bringert's karma raised to 7.
09:32:26 <dcoutts> by using another OS thread
09:33:31 <vincenz> @type Data.Map.lookup
09:33:33 <lambdabot> forall a (m :: * -> *) k. (Ord k, Monad m) => k -> Data.Map.Map k a -> m a
09:34:11 <sjanssen> @type Data.Map.!
09:34:12 <lambdabot> parse error on input `Data.Map.!'
09:34:21 <sjanssen> @type (Data.Map.!)
09:34:22 <lambdabot> forall a k. (Ord k) => Data.Map.Map k a -> k -> a
09:35:50 <shapr> Is dana n xu on the channel?
09:35:58 <ndm> shapr: not as far as i know
09:36:15 <ndm> shapr: i guess you've just seen her HW paper :)
09:36:26 <vincenz> ndm: paper?
09:36:52 <ndm> vincenz: static checking for haskell, ESC/Haskell, something like that
09:37:01 <vincenz> checking of what?
09:37:08 <ndm> properties
09:37:13 <shapr> ndm: Actually, I noticed she's coming to AngloHaskell and asked if she'd give a talk on lambda floating.
09:37:37 <ndm> head x @ requires (not (null x))
09:37:45 <ndm> shapr: oh, cool, i wanted to talk to her about her paper
09:37:46 <shapr> I figure the very best AngloHaskell is where all attendees give some sort of talk.
09:37:52 <shapr> ndm: Show up! :-)
09:37:59 <ndm> shapr: i will on saturday
09:38:05 <shapr> Cool
09:38:06 <xerox> What is lambda floating?
09:38:06 <ndm> have a friends wedding on friday, or would be there then as well
09:38:22 <ndm> how is it different from lambda lifting?
09:38:23 <shapr> xerox: I have very little idea myself...
09:38:40 <ndm> shapr: i think her ESC/Haskell stuff would be way more interesting
09:38:49 <shapr> I think I've read about it in papers by Hughes and in JHC documentation.
09:39:06 <ndm> are we having proper meetings on saturday?
09:39:12 <shapr> ndm: You think it would be equally comprehensible to those of little clue such as myself?
09:39:17 <ndm> since i can't make the friday, and would love to hear more about this stuff
09:39:22 <shapr> There's no real plan for Saturday.
09:39:22 <ndm> shapr: its relatively simple
09:39:33 <shapr> Aw, did haskell.org die?
09:39:42 <ndm> well i'm getting a train half way accross the country for it - so I want something good :)
09:39:48 <shapr> Hm, connection refused...
09:39:48 <SamB> http://haskell.org
09:39:49 <ndm> shapr: seems like it to me
09:40:05 <ndm> i thought it was just a housemate on bittorrent, but everything else works
09:40:08 <SamB> well, lambdabot isn't saying anything...
09:40:34 <shapr> Problem is, we need someplace to do stuff on Saturday.
09:40:39 <shapr> We have no venue
09:40:59 <SamB> hmm hmm hmm
09:41:01 <ndm> :(
09:41:17 <shapr> Even a public park would be better than nothing.
09:41:22 <ndm> we'll need somewhere, if we want to do anything
09:41:28 <ndm> no chance of MSR cambridge
09:41:31 <dmhouse> Go sit on the backs, by the Cam :)
09:41:31 <SamB> apparantly even without incineration, the status LED puzzle stumps my idiot non-goal-directed solver...
09:41:33 <ndm> or even cambridge uni?
09:41:34 <shapr> A pub or other place of business would want regular sales in order for us to hang around.
09:41:53 <ndm> I have full access to my department at weekends, so if a uni student was there we could just barge in
09:42:29 <shapr> hm
09:42:38 * SamB wonders how you write a goal-directed solver
09:42:46 <shapr> I gotta go shopping, but maybe dcoutts or Heffalump has ideas for a venue?
09:42:52 <SamB> I'm guessing step 1 is "learn prolog"
09:43:14 <dmhouse> shapr: can't MSR offer you a room?
09:43:26 <shapr> dmhouse: Yeah, during weekdays and normal working hours....
09:43:29 <shapr> But not for Saturday.
09:43:31 <dmhouse> Aha.
09:43:46 <xerox> SamB: you can use classes and instances as prolog :)
09:43:51 <liyang> To be honest, you wouldn't want to sit in the CL on a Saturday anyway.
09:43:52 <dmhouse> I'm sure the computer science building will be open, perhaps ask someone with contacts if you can use it.
09:43:55 <SamB> xerox: hahaha
09:44:00 <liyang> We can do pair programming on a punt or something.
09:44:03 <shapr> dmhouse: Worth trying.
09:44:05 <shapr> liyang: hah!
09:44:09 <xerox> ?wiki Roman_numerals
09:44:09 <lambdabot> http://www.haskell.org/haskellwiki/Roman_numerals
09:44:14 <xerox> ^- SamB
09:44:14 <shapr> Anyway, shopping, bbl
09:44:14 <dmhouse> ?remember liyang We can do pair programming on a punt or something.
09:44:15 <lambdabot> Done.
09:44:24 <SamB> no thanks, SWI has, like, a debugger and stuff!
09:44:42 <SamB> plus I don't want to figure out how to do IO in the typesystem
09:44:49 <xerox> Pfeeeet.
09:47:40 <SamB> I suppose I can try and solve it manually
09:49:24 <vincenz> SamB: swi?
09:49:53 <vincenz> SamB: yeah we finally wrote it in prolog ;)
09:54:08 <vincenz> sjanssen: getting back to the recursive thign
09:55:38 <vincenz> sjanssen: what if I wanted somehow to make an infinite AST by inline the functions at their call sites, even for recursive calls... think this would be possible with the recursion through the Map?
09:55:39 <sjanssen> you rang? </lurch>
09:56:00 <vincenz> :D
09:56:24 <vincenz> just bugs me that you can't have a lookup that doesn't return Maybe, and have to resort to ugly tricks like fromJust
09:56:39 <sjanssen> vincenz: there is Data.Map.! that ignores the error
09:58:09 <sjanssen> > let m = M.fromList ((0, []) : [(i, i : (m M.! (i-1))) | i <- [1..3]]) in m
09:58:10 <lambdabot>  {0:=[],1:=[1],2:=[2,1],3:=[3,2,1]}
09:58:24 <vincenz> > (M.fromList [(1,"a"), (2, "b")]) ! 1
09:58:25 <lambdabot>  Couldn't match `Array i e' against `Data.Map.Map k a'
09:58:34 <vincenz> > (M.fromList [(1,"a"), (2, "b")]) M.(!) 1
09:58:35 <lambdabot>  Not in scope: data constructor `M'
09:58:41 <vincenz> > (M.fromList [(1,"a"), (2, "b")]) (M.!) 1
09:58:42 <lambdabot>    The function `(Data.Map.fromList [(1, "a"), (2, "b")])'
09:58:42 <lambdabot>   is applied t...
09:58:59 <sjanssen> > M.fromList [(1,"a"), (2, "b")] M.! 1
09:59:00 <lambdabot>  "a"
10:00:09 * vincenz nods
10:00:19 <vincenz> > M.fromList [(1,"a"), (2, "b")] M.! 3
10:00:20 <lambdabot>  Exception: Map.find: element not in the map
10:00:29 <vincenz> I see
10:03:33 <dcoutts> ndm, so where did we get to?
10:03:40 <ndm> dcoutts, a brick wall
10:03:55 <dcoutts> so it worked at full speed without using the GUI
10:04:08 <ndm> hmm, looks like it will be 5 hours to go from the wedding to cambridge
10:04:17 <ndm> and end up passing through york, where i live anyway...
10:04:27 <ndm> but only £20, so not too bad
10:04:31 <dcoutts> aye
10:04:31 <ndm> dcoutts, yep
10:04:46 <dcoutts> ndm, here's an idea, reduce the polling frequency to one a second or less
10:05:01 <dcoutts> ndm, and lets see if it's really only doing one character per yield
10:05:11 <dcoutts> or if there is something else going on
10:05:41 <ndm> timeoutAddFull what is once per second
10:06:01 <ndm> and btw, someone will need to convince me something real is going to happen on saturday of the anglohaskell to make it worth 10 hours on a train
10:06:14 <ndm> i'm happy to come, but want to have good quality haskelling in return :)
10:06:22 <liyang> Not coming on the Friday then?
10:06:51 <ndm> liyang: have a friends wedding friday, so can't
10:06:56 <ndm> otherwise i definately would
10:07:09 <ndm> dcoutts, how do i change timeoutAddFull to make it once per second?
10:07:18 <ndm> bad timing...
10:07:25 <ndm> (to both dcoutts and liyang)
10:07:54 <dcoutts> ndm, the 50 you're using atm is 50 milliseconds, so change it to 1000 to get a second, or use 2 seconds or more
10:08:10 <dmhouse> ?index FilePath
10:08:10 <lambdabot> System.IO, Prelude, Distribution.Compat.FilePath
10:08:48 <sek> If anyoe could help me, i have the following function: func ... | CONDITION && ... = ...  | CONDITION && ... = ... where CONDITION = (relies on the params of func).     I get an error that CONDITION is out of scope, is this normal?
10:08:59 <ndm> dcoutts, and while i'm complaining ( :) ) any way to speed up linking Gtk2hs?
10:09:23 <lispy> hmm...anyone else having trouble connecting to haskell.org?
10:09:32 <ndm> lispy: yes
10:09:36 <dcoutts> ndm, I'm not sure if split objs would help or hinder
10:09:49 <lispy> ah sad, i wanted to read some cabal documentation :(
10:10:03 <sek> the reason is saving having to write a long boolean condition a couple of times in each | case
10:10:08 * lispy pokes haskell.org with a stick to see if it will at least jerk limply
10:10:19 <dcoutts> lispy, I can't ssh in either
10:10:23 <dmhouse> Looks down to me.
10:11:07 <lispy> any idea if the "right people" know?
10:11:14 <lispy> or how to contact them if they don't
10:12:32 <ndm> lispy, olaf i think, and just getting my stick out now...
10:13:47 * lispy doesn't know olaf but will just sit back for the time being
10:14:13 <lispy> ndm: did you get your Ctrl+C issue resolved?
10:14:25 <ndm> lispy, not yet, but progress made, have to try eivuokko's stuff
10:15:09 <lispy> well, that's good at least
10:16:18 <ndm> dcoutts, its taking forever just to load up to the prompt with 1000 as the delay
10:17:11 <dcoutts> ndm, are you still using all the other GUI code? or just initGUI and mainGUI ?
10:17:24 <ndm> dcoutts, all the proplang stuff
10:17:38 <ndm> the whole gui basically
10:17:44 <dcoutts> basically you just want the previous console version but with initGUI and mainGUI and the polling bit
10:18:16 <ndm> dcoutts, i get really slow speed, but more than 1 char per second, but not by much
10:18:46 <dcoutts> is it using 100% cpu or waiting lots
10:18:51 <dmhouse> I found my Nano! :)
10:18:53 * dmhouse beams
10:18:58 <vincenz> :)
10:19:06 <dmhouse> I'd lost it since Easter.
10:21:18 <ndm> dcoutts, low cpu, not very fast
10:21:26 <sek> so are things defined under where available only for the right hand side of the functional equation and not for the boolean cases?
10:21:30 * SamB wonders how in the world you figure out what subgoals you need for this
10:21:32 * dcoutts tries the same
10:21:34 <ndm> dcoutts, thats with 50 as the timeout
10:21:36 <SamB> vincenz: any hints?
10:21:43 <dcoutts> ndm, oh
10:21:53 <lisppaste2> ndm pasted "slowness" at http://paste.lisp.org/display/23415
10:22:28 <ndm> dcoutts, oh ?
10:22:43 <dcoutts> with 50
10:22:56 <ndm> dcoutts, yep, about 1 min + to get to the hugs prompt, printing out the logo
10:23:11 <ndm> its dumping it line by line
10:23:20 <ndm> which is guess is the line buffering, will turn that off on stdout
10:23:58 <dcoutts> it's really quick here, hmm.
10:24:20 <ndm> maybe 3 characters per second...
10:24:28 <dcoutts> let me try something else...
10:25:23 <dcoutts> with the timeout set to 5000 I get it appear in two jumps, 5 sec appart
10:25:34 <ndm> dcoutts, will try that...
10:25:46 <ndm> dcoutts, oh, just checked, that was with 1000
10:26:41 <ndm> with 50 its really slow, but maybe 20 times faster than 1000
10:27:27 <dcoutts> ndm, with the prog this simple we really ought to be able to tell where the big time gaps are
10:27:45 <dcoutts> we need more tracing
10:27:51 <dcoutts> we want to trace the timer
10:27:59 <dcoutts> and when each char is recieved & printed
10:28:06 <dcoutts> to see how they interleave
10:28:13 <ndm> dcoutts, i will happily compile and test anything you send over
10:28:32 <ndm> (as long as it doesn't call deleteFile ;) )
10:28:35 <dcoutts> hah
10:29:05 <vincenz> crap
10:29:08 <vincenz> can't access haskell.org
10:29:14 <vincenz> what's the Data.Map method to remove an item?
10:29:16 <ndm> vincenz: no one can
10:29:19 <vincenz> @hoogle Data.Map.remove
10:29:20 <lambdabot> No matches, try a more general search
10:29:25 <ndm> @hoogle remove
10:29:25 <vincenz> @hoogle Data.Map.delete
10:29:26 <lambdabot> No matches, try a more general search
10:29:26 <lambdabot> Directory.removeDirectory :: FilePath -> IO ()
10:29:27 <lambdabot> Directory.removeFile :: FilePath -> IO ()
10:29:27 <lambdabot> Distribution.PreProcess.removePreprocessed :: FilePath -> [String] -> [String] -> IO ()
10:29:34 <vincenz> @hoogle Data.Map.erase
10:29:35 <lambdabot> No matches, try a more general search
10:29:37 <vincenz> mutter
10:29:46 <vincenz> @type Data.Map.delete
10:29:47 <lambdabot> forall a k. (Ord k) => k -> Data.Map.Map k a -> Data.Map.Map k a
10:29:49 <vincenz> ah
10:30:03 <ndm> there is actually a hoogle development mirror somewhere...
10:30:38 <lispy> i find that /msg lambdabot works pretty good :)
10:30:40 <ndm> dcoutts, changed to use "type Test.hs" as the command, to check its nothing to do with hugs, still slow
10:30:53 <lispy> i just don't always think to add the /msg part :)
10:30:58 <ndm> vincenz: @hoogle Something.something == hoogle go crazy
10:31:06 <vincenz> thx
10:31:07 <dcoutts> ndm, try:
10:31:08 <dcoutts> timeoutAdd (print "before yield" >> yield >> print "after yield" >> putStrLn "" >> return True) 1000
10:31:15 <dcoutts> and
10:31:16 <dcoutts>         readOut hndl = do
10:31:16 <dcoutts>             c <- hGetContents hndl
10:31:16 <dcoutts>             mapM_ print c
10:31:35 <dcoutts> ndm, we want to see how the ops interleave
10:32:04 <dmhouse> ?type Data.Map.lookup
10:32:06 <lambdabot> forall a (m :: * -> *) k. (Ord k, Monad m) => k -> Data.Map.Map k a -> m a
10:32:28 <dmhouse> ?hoogle Maybe a -> a -> a
10:32:29 <lambdabot> Maybe.fromMaybe :: a -> Maybe a -> a
10:32:29 <lambdabot> Prelude.maybe :: b -> (a -> b) -> Maybe a -> b
10:33:56 <lisppaste2> ndm pasted "for dcoutts" at http://paste.lisp.org/display/23416
10:34:48 <dcoutts> ndm, huh? what's all the garbled strings?
10:34:55 <ndm> dcoutts, no idea!
10:35:04 <ndm> buffering, maybe?
10:35:10 <dcoutts> hmmm
10:35:17 <ndm> even though i have them all switched to NoBuffering
10:35:29 <dcoutts> buffering doesn't change the output
10:35:37 <ndm> true
10:35:38 <dcoutts> yie'lid' ?
10:35:43 <dcoutts> oh, hmm
10:35:50 <dcoutts> I suppose it's an interleaving
10:36:01 <lisppaste2> ndm annotated #23416 with "Tweaked, for better output" at http://paste.lisp.org/display/23416#1
10:36:05 <dcoutts> it's a fine grained one if it is
10:36:15 <SyntaxNinja> xerox: y0
10:36:22 <ndm> dcoutts, that i changed it to [ and ] as begin and end yeild
10:36:26 <ndm> SyntaxNinja: I want to hack cabal
10:36:33 <ndm> and add Catch, Yhc and Hat support
10:36:36 <ndm> and base library support
10:36:46 <ndm> (and pay you back for the beer i've already drunk!)
10:36:52 <dcoutts> ndm, you set no buffering on stdout? that's probably not helpful here
10:37:05 <ndm> dcoutts, so remove that buffer setting?
10:37:08 <dcoutts> hia SyntaxNinja
10:37:11 <dcoutts> ndm, yeah
10:37:40 <dcoutts> SyntaxNinja, I was wondering about cabal-get/-server/-whatever plans
10:38:02 <dcoutts> SyntaxNinja, xerox was asking me stuff the other day that I didn't have any good answers to
10:38:05 <ndm> dcoutts, slower to output stuff
10:38:25 <dcoutts> ndm, we want line buffering
10:38:30 <lisppaste2> ndm annotated #23416 with "crazy with standard buffering" at http://paste.lisp.org/display/23416#2
10:38:34 <dcoutts> so we can see each print statement
10:39:13 * dcoutts doesn't grok that output
10:39:22 <vincenz> @type foldr
10:39:23 <lambdabot> forall b a. (a -> b -> b) -> b -> [a] -> b
10:39:27 <ndm> dcoutts, its coming...
10:40:17 <lisppaste2> ndm annotated #23416 with "Still crazy" at http://paste.lisp.org/display/23416#3
10:41:06 <ndm> dcoutts, its only doing a few chars per yeild
10:41:12 <dcoutts> yes
10:41:20 <SyntaxNinja> ndm: sounds good!
10:41:31 <SyntaxNinja> dcoutts: what's the question?
10:41:43 <ndm> SyntaxNinja: but its all dependant on being able to do base with cabal build, cabal install
10:41:53 <dcoutts> SyntaxNinja, so, cabal-get/-server, what's the plan? what are the components?
10:42:13 <dmhouse> What's the easiest way to run a command and get its output? I've used runInteractiveCommand in the past but that's a bit cruft when all you want is the output..
10:42:25 <dcoutts> SyntaxNinja, xerox has been working on an indexer and something for moving packages from incomming/ to pub/ iirc
10:42:50 <dcoutts> SyntaxNinja, how many server side and client side components are there?
10:43:38 <dcoutts> there seemed to be some confusion
10:44:51 <dcoutts> ndm, does the number of chars change if you put in two yields?
10:45:06 <dcoutts> perhaps ghc's timeslices on windows are much much smaler than on unix
10:46:55 <ricky_clarkson> Is Fudgets what I should look at to see how GUI toolkits are done in FP languages?
10:49:24 <SamB> ricky_clarkson: in theory or in practice?
10:49:25 <ndm> dcoutts, no, less
10:49:29 <ricky_clarkson> SamB: Either.
10:49:34 <ricky_clarkson> Is haskell.org deaded?
10:49:39 <ndm> dcoutts, about half, its completely whacked!!!!
10:49:40 <SamB> in practice, we use gtk2hs or wxHaskell
10:49:44 <SamB> usually gtk2hs
10:49:53 <dcoutts> ndm, ?!?!111
10:50:03 <ricky_clarkson> So the layout will be the same as gtk2 or wx..
10:50:21 <ricky_clarkson> Layout as in 'where widgets end up'.
10:50:23 <SamB> well, it looks like wxHaskell has wierd layout handling
10:50:42 <ndm> dcoutts, YES!!!!!!, I KNOW!!!!!!
10:50:50 <dcoutts> ricky_clarkson, easiest is to use the glade visual gui builder with gtk2hs
10:50:54 <dcoutts> ndm, ;-)
10:51:10 <emertens> Would a Data.Map be the correct structure to hold a large, static lookup table where each key might have multiple values?
10:51:14 <dcoutts> ndm, we should ask JaffaCake, this is too wierd for me
10:51:19 <ndm> dcoutts, well maybe thats not entirely half, slightly less is my guess
10:51:22 <SamB> that is, different from wxWidgets
10:51:34 <ndm> dcoutts, but a lot less at hte start
10:51:43 <dcoutts> ndm, for kicks, try sequence_ (repeat 10 yield)  or something like that
10:51:46 <ndm> dcoutts, yep, i concurr
10:51:49 <ricky_clarkson> dcoutts: I'm looking for unusual ways of handling layout.
10:52:01 <dcoutts> ricky_clarkson, can you be more specific?
10:52:04 <lispy> ricky_clarkson: then try java :)
10:52:14 <ricky_clarkson> lispy: Been there, conquered that.
10:52:18 <lispy> @google totally gridbag
10:52:20 <lambdabot> http://madbean.com/anim/totallygridbag
10:52:20 <lambdabot> Title: madbean » Totally Gridbag
10:52:23 * ricky_clarkson is an op in ##java.
10:52:27 <SamB> ricky_clarkson: I suggest looking at wxHaskell and Fudgets, in that case
10:52:50 <lispy> ricky_clarkson: how can you conquere that?  it doesn't fight fair? ;)
10:52:56 <dcoutts> ricky_clarkson, one can do layout combinators but they generall suck
10:53:19 <ricky_clarkson> dcoutts: I'm looking for interesting stuff for progressing Java's layout stuff further.
10:53:33 <dmhouse> ricky_clarkson: traitor!
10:53:34 <dmhouse> :)
10:53:38 <SamB> dmhouse: come on
10:53:53 <ricky_clarkson> Or for demoing an FP-ish layout manager I wrote for Java - some elegant Haskell or something that, say, provides compile-time checking that components don't overlap etc.
10:53:54 * dmhouse remembers FRUIT has direct connections with Java
10:53:56 <dcoutts> doing visual layout of guis in code is usually hard because of the disconnect
10:54:17 <ricky_clarkson> dcoutts: But people manage it for web pages.
10:54:26 <ricky_clarkson> Many people write CSS by hand.
10:54:35 <dcoutts> ricky_clarkson, well they probably have gui designers for that too :-)
10:54:36 <SamB> CSS! ick.
10:54:45 <dmhouse> SamB: what's wrong with CSS?
10:54:51 <ndm> ricky_clarkson: glade makes it irrelevant, because its quite easy
10:54:53 <SamB> well, the layout stuff seems pretty icky
10:54:55 <ricky_clarkson> There are GUI designers for that, but only the monkeys use it.
10:55:01 <dcoutts> and they use CSS which helps to seperate the structure and the visual fine tuning
10:55:03 <dmhouse> ricky_clarkson: web forms are not really comparable to 'real' GUIs.
10:55:05 <ricky_clarkson> ndm: So I should look at how glade handles layout.
10:55:08 <lispy> actually, i found glade hard to use
10:55:09 <SamB> because you have to specify offsets by hand...
10:55:21 <dmhouse> lispy: really? You just drag and drop the widgets, then edit their properties...
10:55:27 <ndm> dcoutts, look like the number of yeilds makes no difference
10:55:28 <ricky_clarkson> dmhouse: That's a fault with 'real' GUIs, because most web forms are much more usable than most 'real' GUIs.
10:55:34 <lispy> dmhouse: and then they aren't the right shape...
10:55:35 <SamB> dmhouse: easier said than done?
10:55:40 <lispy> so you fuss with them a bit
10:55:44 <dcoutts> ricky_clarkson, it's basically nested horazontal and vertical boxes, like <div> <span>
10:55:48 <ricky_clarkson> Also include all this Ajax cod when I say webforms.
10:55:50 <emertens> @hoogle lookupBy
10:55:51 <lambdabot> No matches found
10:55:59 <dcoutts> ricky_clarkson, so you can use the same in java
10:55:59 <SamB> well, XUL might interest you
10:56:08 <SamB> though it ain't Haskell by any means...
10:56:15 <SyntaxNinja> dcoutts: one server side, one client side.  there are tickets explaining all of this...
10:56:19 <SyntaxNinja> ndm: "do base"?
10:56:20 <dmhouse> XUL and Glade are pretty much means to the same end, right?
10:56:25 <ricky_clarkson> SamB: I rolled my own XUL before I heard of XUL, and have already decided I don't like it.
10:56:26 <erider> hi all
10:56:33 <dmhouse> Apart from you can use XUL in Firefox.
10:56:35 <ndm> SyntaxNinja: the haskell.org base library
10:56:38 <ricky_clarkson> I'd rather write my code in a programming language.
10:56:44 <dcoutts> SyntaxNinja, we were having a hard time relating the code we found to the tickets
10:56:49 <SamB> ricky_clarkson: or you could use HTML forms ;-)
10:57:05 <dcoutts> ndm, ok, that's odd, we need to ask JaffaCake
10:57:07 <ricky_clarkson> SamB: Yes.
10:57:10 <SyntaxNinja> dcoutts: http://hackage.haskell.org/trac/hackage/ticket/62
10:57:13 <lambdabot> Title: #62 (trim down cabal-get dependencies) - Hackage - Trac
10:57:18 <ricky_clarkson> There are things like HTMLLayouts for some languages.
10:57:26 <dcoutts> ndm, if it really makes no difference then the timer frequency should not matter
10:57:29 <SamB> or a library with a similar API to whatever you use to make them
10:57:30 <ndm> dcoutts, cool
10:57:37 <ndm> well it definately does...
10:57:38 <SyntaxNinja> dcoutts: that's the main story.  please fix up any tickets you see that don't mesh with that!
10:57:56 <dmhouse> Wow, this month has been the hottest month on record.
10:58:03 <dmhouse> (In the UK.
10:58:06 <SyntaxNinja> dmhouse: remember: global warming is just a _theory_.
10:58:13 <dcoutts> ha ha ha
10:58:13 <SamB> heh
10:58:30 <SamB> why is it just a theory? because the oceans are still existant?
10:58:51 <dcoutts> gravity is just a theory ;-)
10:59:08 <ricky_clarkson> Imagine if Newton had seen the apple bounce up rather than fall down.
10:59:24 <dcoutts> we'd have called him mad
10:59:32 <ricky_clarkson> Plenty did/do.
10:59:35 <dcoutts> heh
10:59:41 <dmhouse> 'do'?
10:59:42 <ricky_clarkson> He was pretty mad especially towards the end.
10:59:56 <dmhouse> Many past geniuses were.
10:59:58 <dcoutts> xerox, ping
11:00:00 <ricky_clarkson> He spent years writing out digits of pi.
11:00:27 <lispy> the digits are pi are worth writing out
11:00:35 <lispy> what else do you do with extra toilet paper?
11:00:43 <therp> samb: I recently read "The Skeptical Environmentalist" by Bjoern Lomborg. It changed my view about environmental movements quite a bit. If you have the tip to dig through 450 pages of numbers and statistics (the author is a statistican himself) I'd recommend it
11:00:53 <ricky_clarkson> lispy: Stick it to the wall.
11:01:12 <therp> samb: s/tip/time/ - strange typos today, too much italian sun
11:01:32 <therp> ndm: many thanks for the paper and the source code!
11:01:37 <SyntaxNinja> dcoutts: is that pretty clear?  I've shown that ticket to xerox about 10,000 times.
11:01:42 <therp> ndm: (speaking of typing haskell in haskell)
11:01:46 <dmhouse> Why do I have to put all my imports at the top of my modules?
11:01:47 <ricky_clarkson> troppo mucho vino bianco
11:02:07 <ndm> therp: no probs
11:02:33 <ricky_clarkson> mucho is wrong, but I can't remember the right word.
11:02:51 <dmhouse> I'd like to place imports next to the section of my file where I use the functions from it.
11:02:51 <dcoutts> SyntaxNinja, heh, I think the problem was that there were various bits of code lying about where he wasn't sure how/if the fitted into the model
11:03:26 <dcoutts> SyntaxNinja, so we upload packages with scp initialy?
11:03:47 <SamB> dmhouse: I have no idea why you aren't allowed to do that already
11:04:02 <SyntaxNinja> dcoutts: yeah, something like that.  most people have access to monk, so this is a good way to get bootstrapped, IMO (and audreyt's)
11:04:03 <SamB> well. maybe it makes it easier to do dependency calculation this way...
11:04:15 <SyntaxNinja> dcoutts: that way we don't have to worry about trust issues.
11:04:20 <dcoutts> SyntaxNinja, and then the server component extracts the .cabal file and puts it and the tarball in the right dir and updates the index
11:04:24 <SyntaxNinja> I cleaned up ticket names a little.
11:04:26 <SamB> (since the compiler can throw out the rest of the code after the imports)
11:04:27 <dmhouse> SamB: well, you'd just have to regex out the imports first.
11:04:29 <dcoutts> SyntaxNinja, yes, that's quite reasonable
11:04:32 <SyntaxNinja> dcoutts: that's right. cabal-server-install mostly does htat.
11:05:06 <dcoutts> SyntaxNinja, ok
11:05:09 <SamB> dmhouse: but this way, it doesn't have to lex much beyond the last import
11:05:39 <SamB> perhaps another reason is that it is considered bad style to do this
11:05:42 <dcoutts> SyntaxNinja, and then cabal get downloads the index and any other .cabal files it needs and uses that to decide which tarballs to download and build/install
11:05:44 <dmhouse> SamB: you could do a two-pass parse, the 'import' lines are dead easy to spot.
11:05:46 <SamB> (import from the middle of a module)
11:05:51 <dmhouse> SamB: yes, but why?
11:05:56 <SamB> dmhouse: what if they aren't on lines?
11:06:00 <ndm> dcoutts, ok, food calls, but please cc me if you mail JaffaCake
11:06:11 * dmhouse has M-x occur to find all his imports, so I don't see why it's bad style.
11:06:25 <SamB> dmhouse: you recall the layout rule?
11:06:29 <SamB> it cuts both ways
11:06:33 <dcoutts> ndm, ok
11:06:37 <SyntaxNinja> dcoutts: that's right!
11:06:46 <SyntaxNinja> dcoutts: please clarify the tickets if they're not clear!
11:06:48 <SamB> (well, okay, not really... but it turns out the top level is just another block)
11:06:55 <SyntaxNinja> sometimes I brain-dump and it's hard to tell what's clear and what I've left out.
11:06:57 <dmhouse> Hrm?
11:07:13 <SamB> module Main where { main = putStrLn "Hello, World!" }
11:07:34 <dmhouse> True.
11:07:49 <dcoutts> SyntaxNinja, so what was the rationalle on what info from the .cabal files to include into the index.txt ? there seems to be some duplication the purpose of which is to immediately obvious to me.
11:08:16 <dcoutts> to/not
11:08:19 <dmhouse> Therefore we should be able to do 'let main = putStrLn "Hello, World!" in module Main'. :)
11:08:31 <SamB> which would mean the compiler would have to not only find lines beginning with "import", but actually parse the whole toplevel (at least far enough to determine the nesting)
11:08:57 <mahogny> has anyone put together a must-read-articles list regarding good uses of the type system? (ie papers with good original content that inspires)
11:09:21 * lispy notes that haskell.org is still down
11:09:30 <Philippa_> I should've done one for my TMR article but didn't
11:09:41 <SyntaxNinja> dcoutts: what duplication of purpose?  I think it was basically "what does the user need for a "cabal-get list"  "
11:09:51 * SyntaxNinja notes that monk.haskell.org is still up ;)
11:10:15 <musasabi> mahogny: the System FC article is very nice, but unfortunately the implementation is still not in the main branch.
11:10:16 <dmhouse> 'Problem loading page: monk.haskell.org;
11:10:35 <musasabi> s/article/paper
11:10:41 <lispy> SyntaxNinja: what is monk?
11:10:47 <ihope_> @hoogle fold
11:10:47 <lambdabot> Data.IntMap.fold :: (a -> b -> b) -> b -> IntMap a -> b
11:10:48 <lambdabot> Data.IntSet.fold :: (Int -> b -> b) -> b -> IntSet -> b
11:10:48 <lambdabot> Data.Map.fold :: (a -> b -> b) -> b -> Map k a -> b
11:10:58 <mahogny> musasabi: hmm. that's a bit too cutting-edge right now o_O I wanna learn to use what exists currently properly first
11:11:21 <dfeuer> @hoogle monk
11:11:22 <lambdabot> No matches found
11:11:24 <dcoutts> SyntaxNinja, so it's got name, deps and short description. The deps are there to allow you to download all the .cabal files at once rather than serially?
11:11:41 <dcoutts> I suppose that's a reasonable optimisation
11:12:29 <emertens> @pl \x -> maybe x ((10*x)+)
11:12:30 <lambdabot> ap maybe ((+) . (10 *))
11:12:34 <SamB> hmm, I think I'll turn my idiotic solver loose with the incinerator...
11:14:51 <SamB> oh, better switch it to depth-first mode
11:14:58 <dcoutts> SyntaxNinja, most package managers actually show a little more info than that so they might need to download every .cabal file anyway at which point one could have gotten away with a more miminal index that just lists the packages available.
11:15:37 <dcoutts> SyntaxNinja, eg the way we had our gentoo hackage tool working was much like apt. It downloaded the entire metadata collection.
11:16:37 <dcoutts> So it might be worth considering the pros cons of a minimal vs maximal index
11:16:49 <dcoutts> were maximal is just a concatenation of all the .cabal files
11:16:51 <eivuokko> dcoutts, SyntaxNinja, and isn't having deps in inventory quite bad, because there almost certainly need to be conditional dependencies (Win32 vs posix packages for example).  The ticket about conditionals don't fit that.  (But it's sometime since I checked cabal-server)
11:16:55 <SamB> have you seen apt's indexes? those are good aside from the fact that they are huge and re-transferred in their entirety...
11:17:06 <dcoutts> eivuokko, good point
11:17:07 <dmhouse> Gah, haskell.org being down is seriously limiting to the Haskell development you can do.
11:17:27 <Philippa_> yeah? I don't actually use it for reference that often
11:17:37 <dcoutts> eivuokko, the deps syntax is probably subject to change with the optional stuff so it might be better to leave it out of the index entirely
11:17:42 <musasabi> the lib reference is nice
11:18:04 <emertens> @hoogle a -> b -> [c]
11:18:05 <lambdabot> Data.Graph.Inductive.Internal.FiniteMap.rangeFM :: Ord a => FiniteMap a b -> a -> a -> [b]
11:18:17 <xerox> Hi dcoutts, SyntaxNinja!
11:18:22 <dcoutts> hia xerox
11:18:31 <mahogny> lesson to be learned: download all docs for offline browsing :(
11:18:40 <dcoutts> xerox, you has lots of Qs before but I've forgotten half of them...
11:18:50 <xerox> dcoutts - So the design we sketched doesn't make sense?
11:18:57 <dcoutts> xerox, I think it does
11:19:06 <dcoutts> but there are other possabilites to be considered
11:19:06 <xerox> dcoutts - I.e. the clients are supposed to regenerate the index?
11:19:10 <dmhouse> Philippa_: I need to find a grammar for ghc --show-iface, I don't know that off the top of my head :)
11:19:35 <dcoutts> xerox, the question is how much goes in the index vs has to be downloaded from each .cabal file
11:19:51 <xerox> dcoutts - I can't still understand what cabal-server-install (in its Main.hs file) has to do with the server-QA-program we were talking about.
11:19:53 <emertens> what is fmap for Maybe?
11:20:16 <xerox> emertens - fmap f (Just x) = Just (f x); fmap f Nothing = Nothing.
11:20:19 <dcoutts> xerox, one extreme is to have nothing but package name-version in the index and the other extreme is to have all the .cabal files concatenated into the index
11:20:26 <emertens> xerox: no, what is the function called
11:20:35 <xerox> dcoutts - Yes, I've read that.
11:20:40 <xerox> (In the backlog here now)
11:20:43 <dcoutts> ok
11:20:53 <xerox> emertens - What do you mean?
11:21:06 <eivuokko> dcoutts, FWIW, It'd seem to me that huge (and compressed) index with all cabal-files would be a better choice.
11:21:15 <emertens> xerox: fmap specific to a list is map
11:21:21 <emertens> xerox: what is fmap specific to a Maybe
11:21:25 <xerox> emertens - it has no specific name.
11:21:29 <emertens> oh..
11:21:30 <dcoutts> eivuokko, yes I can certainly see some advantages to that, but I'm keeping my mind open
11:22:04 <dcoutts> SyntaxNinja, so how much has this been considered already? the index/.cabal file format split
11:22:15 <eivuokko> dcoutts, Sure.  Just my 0.02 cents :)  It's not like I'm doing any of the hacking, so.. :)
11:22:22 <dcoutts> xerox, I think cabal-server-install is just your prog for moving a package from incomming/ to pub/
11:22:30 <xerox> dcoutts - Am I wrong or there was no such cabal-server-install/Main.hs program in that design we discussed?
11:22:36 <dcoutts> eivuokko, thanks for the contributions!
11:22:44 <xerox> Hmmmm.
11:23:05 <xerox> I really want to code that, but I don't know if it fits the idea of the Cabal developers.
11:23:15 <dcoutts> to code what?
11:23:20 <dcoutts> cabal-server install
11:23:27 <xerox> cabal-server {import,index}
11:23:32 <dcoutts> right
11:23:34 <eivuokko> dcoutts, Btw, is there a convient way to follow these discussions?  Are they in private mails or in trac?  I'd like to get mail from the trac changes if that's where this stuff is.
11:23:48 <dcoutts> xerox, I don't know if that's in the scope of your project. I assumed it was.
11:23:49 <SyntaxNinja> lispy: monk is aka hackage aka cvs
11:24:01 <SyntaxNinja> lispy: I mention it because it's hosted by galois :)
11:24:10 <xerox> dcoutts: I can't exacly understand it too :(
11:24:13 <dcoutts> eivuokko, not really. there's some trac tickets
11:24:22 <dcoutts> xerox, ask SyntaxNinja!
11:24:37 <dcoutts> SyntaxNinja, help us, we seem to be confused. :-)
11:24:49 <xerox> Yes! I'm sorry :-/
11:25:07 <SyntaxNinja> dcoutts: yeah. we should brainstorm the index size and what should be there.
11:25:21 <dcoutts> agreed
11:25:22 <xerox> I really need some precise ideas, I liked what we sketched with duncan, but I don't know if that is the plan
11:25:26 <lispy> SyntaxNinja: eewww...you said 'cvs'
11:25:37 <eivuokko> SyntaxNinja, could we get trac changes -> cabal-devel@, please?  Atleast tickets, like ghc has.
11:25:52 <xerox> SyntaxNinja: cabal-server-install is supposed to run on the client machine of the uploaders or on monk?
11:25:52 <SyntaxNinja> eivuokko: when we eventually have conditional dependencies, I assume they'll make it into cabal-get, which itself can do the computation of what to download.
11:26:10 <SyntaxNinja> dmhouse: if you have debian, you can install haskell-doc, which has the libraries docs.
11:26:28 <dcoutts> eivuokko, SyntaxNinja has actually been trying to get more of these discussions on cabal-devel. (which I wholly support)
11:26:32 <SyntaxNinja> SamB: I'm intimately familiar w/ apt's indexes :)
11:26:39 <dmhouse> SyntaxNinja: ooh, thanks :)
11:26:41 <SyntaxNinja> hi xerox
11:27:29 <dcoutts> xerox, if I understand correctly, cabal-server-install is the same thing as your cabal-server import command
11:27:45 <dcoutts> but written by different people at different times
11:27:57 <dcoutts> with vaugly different ideas about index format etc
11:27:59 <SyntaxNinja> dcoutts: just in a quick hacking session w/ audreyt. seemed to make sense that we show what's necessary for "cabal-get list".  We could do more, it's no big deal. we could concat all the .cabal files, it's not like that's going to be HUGE.
11:28:00 <xerox> dcoutts: and it does not write out the new index yet
11:28:07 <SyntaxNinja> at least in the short term :)
11:28:27 <dcoutts> SyntaxNinja, indeed :-)
11:28:38 <dcoutts> and with .tar.gz perhaps
11:28:55 <dcoutts> it'd be significantly faster than downloading each .cabal file seperaetly
11:29:33 <emertens> how do I import a module and require its function to be fully qualified?
11:29:39 <SyntaxNinja> xerox: cabal-server-install can run on the server machine, not client machine. that way we can easily change it :)
11:29:45 <sjanssen> emertens: import qualified Foo
11:29:53 <dcoutts> emertens, import qualified Foo [as Bar]
11:30:14 <emertens> wonderful!
11:30:15 <emertens> thanks
11:30:53 <SyntaxNinja> xerox: dcoutts: I'm always happy to help out!  I can't answer questions like "I'm confused" though.  I have no idea where to start, so yes please get specific!
11:31:13 <dcoutts> xerox, so what were the other confusions?
11:31:24 <SyntaxNinja> xerox: dcoutts: the ultimate goal, is to get cabal-get done pretty quickly and in deployment so we can start populating a collection of cabal packages that all work together, "testing" or something :)
11:31:25 <dcoutts> SyntaxNinja, yes of course ;-)
11:31:26 <xerox> That question you just answered is what blocked me, I couldn't understand wether I was going to write the scp-ing code, or the tool ran on the server.
11:31:33 <dcoutts> SyntaxNinja, right.
11:31:35 <SyntaxNinja> the details are very open, and you can make decisions!
11:31:56 <xerox> I was starting to write that code separately, the cabal-server tool I discussed with dcoutts
11:32:06 <SyntaxNinja> xerox: run the tool on the server, should be able to do somethin glike 'ssh hackage.haskell.org cabal-server-install" < mypackage-1.0.tgz maybe? from the client
11:32:47 <dcoutts> xerox, so combining adding a package and rebuilding the index in one operation
11:32:57 <SyntaxNinja> ja
11:33:05 <xerox> OK
11:33:11 <xerox> More questions:
11:33:20 <SyntaxNinja> dmhouse: np :)
11:33:34 <SyntaxNinja> lispy: I think its darcs.haskell.org too.  monk has many names.
11:33:35 <xerox> cabal-server should fail and report naming inconsistences?
11:33:50 * lispy breathes a sigh of relief
11:33:58 <SyntaxNinja> eivuokko: I think you could do that via RSS if you want!
11:34:19 <xerox> In particular, the .cabal file name and the tarball name should match, as well as the unpacked directory name
11:34:26 <SyntaxNinja> eivuokko: http://hackage.haskell.org/trac/hackage/query?status=new&status=assigned&status=reopened&format=rss&owner=ijones&order=priority
11:34:28 <xerox> Case-sensitively
11:34:34 <SyntaxNinja> except get rid of 'owner=ijones' :)
11:35:12 <dcoutts> SyntaxNinja, yes, xerox and I were discussing some minimal QA checks that cabal-server-install would perform
11:35:14 <xerox> Also, what do you think about a hierarchy like: incoming/ where to put new packages, pub/ where to deploy them, (even rejected/ for failing ones?)
11:35:20 <dmhouse> SyntaxNinja: where does it put said docs?
11:35:24 <SyntaxNinja> xerox: yeah I think it should just reject packages that don't conform.  let's just make everyone be consistent since who really cares what the naming standard is.
11:35:51 <dcoutts> xerox, so we probably don't need an 'incoming'
11:35:53 <SyntaxNinja> dmhouse: you should be able to point your browser to something like: file:///usr/share/doc/ghc6-doc/html/libraries/index.html
11:36:11 <xerox> SyntaxNinja: alright, duncan says cabal even provide a command to create the tarball with correct names, so no exuses
11:36:11 <eivuokko> SyntaxNinja, Oh, yeah, thanks. :)  Tho, I'd prefer emails - and I'm lazy but to put my own rss2email up, but it's ok.
11:36:13 <SyntaxNinja> maybe you want an incoming later when we want to start batching things up more.
11:36:14 <xerox> *excuses
11:36:16 <dcoutts> xerox, and rejected probaly isn't needed, just do nothing for rejected packages
11:36:19 <SyntaxNinja> xerox: right.
11:36:22 <LordBrain> is haskell.org down?
11:36:26 <dmhouse> LordBrain: yes.
11:36:56 <xerox> dcoutts: ok, it doesn't make much difference, one gets the filenames from the arguments instead of the directory listing.
11:37:04 <dcoutts> right
11:37:10 <dcoutts> or as stdin
11:37:14 <SyntaxNinja> xerox: main priority is something that works, and is safe. we can make tweaks later.
11:38:19 <SyntaxNinja> I figured we'd have an "unstable, testing, stable" setup like debian.  we make sure that "Testing" contains stuff that works together, with the latest GHC or something, with a cabal and cabal-get, so everything is totally consistent.
11:38:24 <xerox> I like to understand from the ground up, I easily get stuck in corner cases, but I understand, I'm working toward this goal then.
11:38:41 <xerox> They call me for dinner, bbiab &
11:38:55 <SyntaxNinja> then every so often we'll cp testing to stable and call it good.  dcoutts will get to name the releases if he's still cabal release manager ;)
11:38:59 <SyntaxNinja> xerox: food is for the weak! ;)
11:39:06 <dcoutts> SyntaxNinja :-)
11:39:34 <dcoutts> SyntaxNinja, do you mean I get to think of a name as well as a version number? ;-)
11:39:44 <SyntaxNinja> xerox: dcoutts: be relentless about cleaning up tickets that have gotten inconsistent.  don't worry about me!
11:39:52 <dmhouse> SyntaxNinja: ah, haskell-doc actually only gives the report and the Gentle Introduction.
11:40:05 <dcoutts> cabal 1.2 - the "pantomime polar bear" release
11:40:12 <SyntaxNinja> dmhouse: try ghc6-doc
11:40:19 <SyntaxNinja> dcoutts :)
11:40:20 <dcoutts> SyntaxNinja, right'o
11:40:27 <SyntaxNinja> I figured haskell-doc would include ghc6-doc
11:41:06 <dcoutts> SyntaxNinja, btw, we should get trac 0.10 as soon as we can, as it's got things like the ability to delete tickets (think spam) and integration with spam filters.
11:41:34 <dcoutts> I had to clear up dozens of spam tickets in the Gtk2Hs trac the other day
11:42:11 <dcoutts> trac 0.10 will have an askimet spam plugin, Gtk2Hs's WordPress site already uses that to good effect
11:42:21 <dcoutts> it's stoped ~3000 spam comments
11:42:30 <dmhouse> SyntaxNinja: ah, that's better, thanks again.
11:42:37 <dcoutts> while still allowing legit comments
11:42:40 <SyntaxNinja> dmhouse: :)
11:43:26 <dcoutts> SyntaxNinja, any plan for optional signing later? can we make the index format flexible?
11:43:35 <SyntaxNinja> dcoutts: hm. we have this problem that we're using the darcs patch to trac. maybe we should give up on that.  does the new version do anything w/ darcs?
11:44:07 <dcoutts> SyntaxNinja, ah well we can wait 'til the darcs patch gets up to speed with trac 0.10
11:44:09 <SyntaxNinja> dcoutts: we'd better make it flexible so we can do signing later. we could add sha1 sums now to support that later.
11:44:20 <SyntaxNinja> dcoutts: I wonder if there's any plan to make that happen
11:44:24 <shapr> Dang, haskell.org is offline.
11:44:24 <dcoutts> SyntaxNinja, so lets talk about index format
11:44:27 <shapr> SyntaxNinja! Hiya!
11:44:32 * shapr hugs SyntaxNinja 
11:45:09 <dcoutts> SyntaxNinja, suppose we had as the index some (compressed) bundling of all the .cabal files
11:45:20 <dcoutts> a bit like the apt cache?
11:45:26 <shapr> Sounds cool.
11:45:29 <dcoutts> so you do cabal-get update
11:45:34 <dcoutts> then cabal-get install
11:46:03 <dcoutts> that was the way our gentoo haskage tool worked with the old xml-rpc based hackage
11:46:41 <SamB> would be nice if it could rsync them or something...
11:46:53 <dcoutts> no need if it's just one file
11:47:01 <vincenz> > partition (== 0 . `mod` 2) [1,2,3,4]
11:47:01 <lambdabot>  Parse error
11:47:11 <vincenz> > partition ((== 0) . (`mod` 2)) [1,2,3,4]
11:47:12 <lambdabot>  ([2,4],[1,3])
11:47:15 <vincenz> say Odd
11:47:47 <dmhouse> vincenz: what's odd about that?
11:47:48 <LordBrain> yeah sections need to be in parenthesis
11:47:58 <vincenz> not getting expected output in my proggy
11:48:00 <SyntaxNinja> shapr: u around?
11:48:07 <SyntaxNinja> oh hey, scrollback.
11:48:12 <SyntaxNinja> we must have thought aobut each-other at the same time.
11:48:21 <shapr> Nah, I'm square today! No rounds for me!
11:48:46 <SyntaxNinja> shapr: must be cycling a lot :)
11:49:13 <SyntaxNinja> dcoutts: that sounds pretty OK by me.  a compressed collection of .cabal files is probably not very big.
11:49:21 <dcoutts> yeah
11:49:27 <dcoutts> and then what about signing?
11:49:31 <shapr> Actually, yes. I did 2.5 hours when I got lost in Stockholm.
11:49:34 <dcoutts> where does the .sig go
11:49:47 <dcoutts> perhaps as extra files in the index
11:50:00 <emertens> is HashTable the mutable version of Map?
11:50:11 <dcoutts> with different names so that a client that doesn't know about signing can ignore them
11:50:15 <vincenz> ah
11:50:17 <vincenz> I know why :D
11:50:24 <SyntaxNinja> stockholm!
11:50:31 <dmhouse> ?hoogle HashTable
11:50:32 <lambdabot> Data.HashTable :: module
11:50:32 <lambdabot> Data.HashTable.HashTable :: data HashTable key val
11:50:47 <SyntaxNinja> dcoutts: you can have detatched .sigs for each .cabal file or something
11:50:59 <dcoutts> SyntaxNinja, yes, exacly
11:51:01 <dcoutts> SyntaxNinja, yeah, so suppose the index is literally a .tar.gz of .cabal files (probably flat dir structure)
11:51:13 <shapr> SyntaxNinja: Yeah, I am no longer the northernmost Haskeller. I think it's psi nowadays.
11:51:16 <dcoutts> and then later we can add .sha1 or .sig files
11:51:18 <SyntaxNinja> dcoutts: but you're thinking too far ahead I think :) for one thing, what are we protecting against? we can do this in the next step.
11:51:27 <dcoutts> and earlier clients will ignore non .cabal files
11:51:41 <dmhouse> emertens: they look similar.
11:51:49 <SyntaxNinja> dcoutts: maybe we'd add the sha1 of the tarball or whatever to the .cabal file as a field?
11:52:27 <dcoutts> SyntaxNinja, aye, that'd be ok to protect the tarball but not the .cabal file
11:52:30 <SyntaxNinja> since it's a source release system, I guess that we can use the same sigs as the original author; apt-secure uses the system they do because the binaries are built by the server.
11:53:25 <SyntaxNinja> dcoutts: then we sign the .tgz of all cabal files with a server key
11:53:32 <dcoutts> yep
11:53:59 <dcoutts> how does that work exactly? is that a seperate file?
11:54:15 <dcoutts> or does it modify the tar.gz ?
11:54:33 <shapr> Separate sig is easiest? index.tar.gz.sig ?
11:54:41 <dcoutts> right
11:55:02 <dmhouse> @localtime dons
11:55:05 <lambdabot> Local time for dons is Tue Aug  1 04:53:44 2006
11:56:08 <dcoutts> a similar possability for the 00-index.tar.gz is to be a tarball of the pub tree and just missing the .tar.gz packages
11:56:18 <dcoutts> so it'd mirror the dir structure
11:56:24 <dcoutts> and contain all the .cabal files
11:56:30 <dcoutts> and .sig or whatever
11:56:39 <dcoutts> that makes it easy to build
11:56:52 <dcoutts> tar -c  --exclue '*.tar.gz'
11:57:05 <dcoutts> (or something like that)
11:58:08 <shapr> I hope haskell.org didn't get cracked.
11:58:21 <SyntaxNinja> has anyone tried to alert the maintainers of haskell.org yet?
11:58:24 <paj> Hi
11:58:24 <dcoutts> ssh: connect to host haskell.org port 22: Connection refused
11:58:32 <shapr> Yeah, I got the same thing.
11:58:42 <dcoutts> SyntaxNinja, not yet as far as I know
11:59:01 <dmhouse> Any GHC hackers around? Where might the implementation for --show-iface be (which takes a filename for a .hi file and prints it in human-readable format)?
11:59:14 <shapr> It's probably in MkIface, but I can check...
11:59:44 <psi> shapr: is boden further south?
12:00:47 <SyntaxNinja> out of the kindness of my heart, I offer you all: http://hackage.haskell.org/~ijones/tmp/ghc-libraries/
12:02:04 <dmhouse> Gah, my Firefox's being very buggy
12:02:14 <dmhouse> It refuses to open certain URLs.
12:02:24 <dmhouse> It just stops with a white screen.
12:03:25 <paj> dmhouse: kill Firefox thoroughly and restart it.  Sometimes it hangs around after you think youve exited it.
12:04:03 <dmhouse> david@tarn:~$ ps aux | grep firefox
12:04:03 <dmhouse> david     5498  1.0  0.1   2876   800 pts/4    S+   20:03   0:00 grep firefox
12:04:09 <dmhouse> Is that thorough enough?
12:04:29 <paj> dmhouse: looks good enough.
12:04:52 <dmhouse> paj: had this problem yourself? Or are you just guessing?
12:05:48 <paj> Had problems with Firefox a few versions ago, and restarting was the answer.  But you had to make sure you really had restarted it.
12:06:40 <dmhouse> Well that seems to have fixed it, thanks.
12:08:40 <xerox> Back.
12:08:46 <dmhouse> Wb!
12:08:47 <roconnor> welcome back
12:13:01 * SyntaxNinja emails john peterson re haskell.org
12:13:04 <SyntaxNinja> hi xerox
12:13:19 <ndm> SyntaxNinja: i have already emailed olaf
12:15:41 <SyntaxNinja> ok
12:15:45 * SyntaxNinja lunch &
12:16:18 <xerox> SyntaxNinja: food is for the weak! (-;
12:22:32 <ihope_> Hmm... so how can I run an IO action, say, every 20 milliseconds so that I could accurately measure large amounts of time? Would "wait 20 milliseconds, forkIO the action, repeat" work?
12:22:52 <mahogny> no
12:22:54 <dmhouse> How about recursion + threadDealy?
12:22:57 <dmhouse> *threadDelay
12:22:59 <mahogny> it would cause a small drift
12:23:33 <ihope_> How much of a drift?
12:23:44 <mahogny> the time it takes to execute forkIO
12:23:59 <mahogny> =in theory unbounded due to process cycling
12:24:18 <mahogny> best would be if you could check against an absolute clock
12:24:22 <mahogny> like the system clock
12:24:53 <dmhouse> How about having two seperate actions? One that fires every second, and one that fires every 20 milliseconds. After the fiftieth call for the 20 millisecond action, it looks at the error, and adjusts how long it's going to delay to match that.
12:24:53 <ihope_> Yeah, that'd work.
12:25:10 <dmhouse> Or three, or four actions...
12:25:33 <mahogny> dmhouse: still got some errors creeping in there + it's complex
12:25:54 <ihope_> Well, if accessing the system clock is accurate even just to the second, it'll work.
12:26:10 <dmhouse> I figured using the system clock was cheating :)
12:26:14 <mahogny> lol
12:26:31 <mahogny> if you have a nice language primitive, then you don't need the system clock
12:26:36 <mahogny> and that would be the best way
12:26:44 <mahogny> the system clock is a bit messy
12:26:56 <mahogny> s/a bit/very
12:27:37 <dmhouse> I've just compiled GHC, and I want to use --show-iface on the interface files I produced.
12:27:42 <dmhouse> I get the error: mismatched interface file versions: expected 6041, found 6
12:27:54 <mahogny> hm. someone should maybe write a module for this. once written it's fairly easy to reuse
12:27:55 <ihope_> So what's the best if I can handle errors as long as they don't stack up?
12:28:14 <xerox> ihope_: fix $ \f -> action; threadDelay 20; f :: IO a
12:28:19 <mahogny> ihope_: well. any way but using an absolute reference will stack up
12:29:16 <ihope_> Well, just how much drift would I get if I used my original solution?
12:29:33 <dmhouse> ihope_: try it! :)
12:29:56 <mahogny> ihope_: that would be xerox code. it works unless your program relies on having no drift
12:29:59 <dmhouse> What's the easiest way to get a set of .hi files for the standard libs? Compile GHC?
12:30:11 <ihope_> mahogny: mine does a forkIO.
12:30:20 <dmhouse> xerox: you missed a 'do'.
12:30:22 <mahogny> ihope_: well, not much difference
12:30:29 <mahogny> ihope_: same properties
12:30:39 <ihope_> A drift of, say, one second per minute is fine.
12:30:51 <mahogny> I doubt it will drift that much
12:31:00 <mahogny> well. hm. actually, I can't say
12:31:09 <dmhouse> xerox: interesting use of 'fix', though. :)
12:31:12 <mahogny> check it :)
12:31:53 <mahogny> ihope_: what will you be using this for?
12:32:00 <ihope_> A game.
12:32:15 <mahogny> keeping FPS?
12:32:26 <ihope_> It'd be an IRC game.
12:32:27 <SamB> why don't you just base the time on the sound buffers?
12:32:29 <SamB> oh.
12:32:30 <dmhouse> Ooh :)
12:32:33 <mahogny> ihope_: then don't worry
12:32:39 <SamB> heh
12:32:41 <SamB> hehehe
12:32:43 <ihope_> I don't think the players will care much if I give them 2 minutes and 59 seconds when I said I'd give them 3 minutes :-)
12:32:52 <SamB> or the other way round
12:33:03 <SamB> (the more likely situation)
12:33:16 <ihope_> Oh, yeah, give them 3 minutes and 1 second?
12:33:33 <mahogny> ihope_: of course, if you can rearrange your code as to actually make a timer for 3 minutes instead 20msec intervals, then your problem is 100% solved
12:33:44 <dmhouse> ihope_: really, network lag is going to swamp whatever miniscule drift you happen.
12:33:49 <dmhouse> *happen to have
12:35:41 <SamB> if you were writing a real videogame, with sound and graphics and all that, I'd say you should time it by the sound buffer. and don't ever use SDL for audio.
12:40:33 <mahogny> samb what do you prefer over sdl for audio?
12:41:16 <SamB> something that would let you find out the buffer status (how full it is)
12:41:43 <mahogny> hm. I usually don't even have to bother about buffers nor filling them o_O
12:42:15 <SamB> sound buffers are important
12:42:50 <ihope_> Hmm, that drift's pretty severe...
12:42:56 <mahogny> I just set up a three-liner that I want to have a thread call with a certain frequency
12:43:08 <mahogny> ihope_: try xerox version. forkIO might be a bit expensive
12:43:26 <mahogny> no sound buffer or mess involved when I do frame skipping
12:44:19 <SamB> you have sound, though?
12:44:44 <mahogny> yeah. but I never get to manage the buffers manually unless I produce sound on the fly. which I never do
12:45:07 <SamB> how do you produce it then?
12:45:50 <mahogny> music: hook up threads for a suitable MOD/XM-library that does the shit. samples: just call a function, it is already hooked to the buffer callbacks
12:46:06 <mahogny> writing a new sound buffer system would just be reinventing the wheel
12:46:30 <SamB> what does the mod library use for output?
12:46:42 <ihope_> A drift of 4 seconds per minute...
12:46:51 <mahogny> I use the library allegro for sound, so that is what it uses in turn
12:47:06 <SamB> ah, allegro is pretty decent I think
12:47:20 <mahogny> I ported parts of it to haskell
12:48:14 <SamB> anyways, SDL doesn't do the job or let you do it properly...
12:48:37 <mahogny> sdl is for people who like to reinvent the wheel. I stay clear of it :)
12:48:43 <ihope_> Without forkIO, it's 5 seconds per minute.
12:48:56 <mahogny> ihope_: evil
12:49:16 <ihope_> Of course, the action I was performing was writing to an MVar...
12:49:28 <SamB> allegro certainly seems to have a lot of wheels available for it ;-)
12:49:46 * ihope_ sets his loop to tick every second instead of every 1/50 of a second
12:49:57 <mahogny> ihope_: a very evil solution: a thread that each second starts another thread that each 20msec that second calls the shit... but now I am starting to think you should write us that library for using absolute clocks :)
12:51:07 <dmhouse> What's the easiest way to get a set of .hi files for the standard libs? Compile GHC?
12:51:40 <ihope_> Ah, now it's much better: about 1 second per minute.
12:54:32 <dmhouse> ?ask dons how he got hold of his set of .hi files for the standard libs -- just compiling GHC?
12:54:32 <lambdabot> Consider it noted.
12:55:36 <dcoutts> xerox, ping
12:55:54 <xerox> Pong!
12:56:04 <musasabi> dmhouse: that way at least I can get .hi files.
12:56:21 <dcoutts> xerox, so index format...
12:56:39 <dmhouse> musasabi: any idea what 'mismatched interface file versions: expected 6041, found 6' means?
12:57:28 <dcoutts> xerox, so we were thinking about what to use for the index
12:57:40 <SamB> dmhouse: it means somethign is messed up
12:57:41 <dcoutts> xerox, and if it should be minimal or maximal
12:57:48 <xerox> dcoutts: right
12:57:56 <dcoutts> xerox, and one suggestion I have is to just use tar
12:57:56 <SamB> dmhouse: try deleting the .hi it seems to be complaining about?
12:58:16 <dmhouse> SamB: I'm getting that when I do a ghc --show-iface hiFile.hi
12:58:24 <ihope_> @ask ihope_ why he's talking to himself
12:58:24 <lambdabot> You can tell yourself!
12:58:24 <SamB> oh oh
12:58:30 <ihope_> Pweh.
12:58:32 <dmhouse> SamB: and it happens on every hi file I try.
12:58:36 <SamB> that means you are using the wrong version of GHC
12:58:38 <ihope_> @ask ihope why he's talking to himself
12:58:39 <lambdabot> Consider it noted.
12:58:50 <xerox> dcoutts: sounds good to me, cabal-get needs to be updated to this format after, right?
12:58:55 <dcoutts> xerox, tar -czf 00-index.tar.gz --exclude='*.tar.gz' .
12:58:58 <dcoutts> xerox, right
12:59:27 <xerox> dcoutts: SyntaxNinja said he wants something working, so, should I just go and make cabal-server-install emit a good-for-the-moment 00-latest.txt?
12:59:44 <dcoutts> xerox, well this is even easier
12:59:47 <dcoutts> it needs no code
12:59:51 <dmhouse> SamB: the wrong version of GHC? I just built it.
13:00:16 <dcoutts> xerox, as I understand it, cabal-get needs updating either way
13:00:21 <SamB> perhaps you should try a version that works ;-)
13:00:45 <SamB> but seriously, were those .hi files buit with that version of GHC?
13:00:45 <xerox> dcoutts: OK
13:01:19 <dmhouse> SamB: yes, I believe so. I just basically darcs got, then built everything.
13:01:27 <dmhouse> So unless the darcs repo contains the binary files...
13:01:45 <xerox> dcoutts: easier you say?
13:02:00 <SamB> dmhouse: are you using the GHC that you built?
13:02:04 <dcoutts> xerox, right, it doesn't need any code to generate the index
13:02:11 <dmhouse> SamB: ahh. :)
13:02:18 <dmhouse> SamB: of course, that was a little silly.
13:02:20 <xerox> dcoutts: I see
13:02:27 <xerox> dcoutts: I was thinking about the modifications to cabal-get
13:02:32 <dmhouse> Great, and I just did a 'make clean' as well.
13:02:34 <dcoutts> xerox, ah yes
13:02:38 <SamB> oops
13:02:38 * dmhouse waits for make to finish
13:02:47 <dcoutts> xerox, the actual commands I'd use would be: tar -czf 00-index.tar.gz --exclude='*.tar.gz' pub && mv 00-index.tar.gz pub/
13:02:50 <dmhouse> :)
13:02:56 <dmhouse> SamB: thanks for your help.
13:03:03 <xerox> dcoutts: awesome indeed.
13:03:11 <SamB> I detect a fast CPU
13:03:33 <dcoutts> xerox, ie start in the dir below pub and then make a tarball of it recursively, except for the tarballs in the pub dirs
13:03:47 <dcoutts> then move the new index over the last one
13:03:50 <xerox> dcoutts: yup, I understand
13:04:13 <dcoutts> there we go! no need for cabal-sever-install for now
13:04:20 <xerox> OK.
13:04:24 <dcoutts> so you can go work on cabal-get :-)
13:04:44 <dcoutts> ok, well there is still the QA aspect
13:04:55 <dcoutts> but to get something working quick that's not needed
13:05:07 <xerox> And one should put the .cabal file by hand as well as the tarball
13:05:09 <musasabi> dmhouse: it sounds like the .hi was created by a different version of GHC than you are running.
13:05:11 <xerox> OK
13:05:41 <dcoutts> xerox, right, that would be by hand for the moment until there is a cabal-server-install
13:05:55 <dmhouse> musasabi: indeed, I hadn't done a make install so `ghc` referred to my older one, so `ghc --show-iface` failed.
13:05:58 <xerox> Right.
13:06:01 <xerox> So cabal-install now.
13:06:12 <dcoutts> xerox, so the simplest thing for cabal-get would be to unpack that tarball
13:06:22 <dcoutts> xerox, and then look in the .cabal files
13:06:33 <dcoutts> to find the names etc
13:06:49 <dcoutts> which allows it to work out the http urls
13:07:28 <dcoutts> cabal-install update
13:07:31 <dcoutts> errr
13:07:35 <dcoutts> cabal-get update
13:07:43 <dcoutts> cabal-get install Foo-1.0
13:07:47 <xerox> No it's right, it's cabal-install update
13:08:37 <xerox> $ cabal-install -c etc-cabal-install/ update
13:08:38 <xerox> ...
13:08:41 <xerox> Downloading package list from server 'file:///Library/WebServer/Documents/cabal-server-install/pub/unstable'
13:08:44 <xerox> $
13:10:21 <dcoutts> xerox, so what do you think?
13:10:29 <sehute> evening
13:10:45 <xerox> I was trying to find the sensible code while we were talking
13:11:03 <xerox> I think it is doable
13:11:11 <dcoutts> xerox, the issues we had with the current format is that including the deps in the index text file might not be a good idea in the end if the format of deps is likely to change
13:11:21 <xerox> Right
13:11:29 <dcoutts> so cabal-get would need to download all the .cabal files anyway
13:11:30 <xerox> This way the format is the Cabal one
13:11:41 <dcoutts> which is slower than just getting one compressed archive of them
13:12:02 <dcoutts> and the advantage of an archive is that you can stick in other files later
13:12:09 <dcoutts> like .sha1 of .sig files
13:12:15 <dcoutts> for security verification
13:12:20 <xerox> Right
13:12:31 <dcoutts> without breaking eariler clients which can just ignore those files
13:12:46 <xerox> So I could make a repository with this format now, and hack cabal-get to work on it?
13:12:54 <dcoutts> right
13:14:06 <xerox> OK... ready, steady, go! :)
13:14:26 <sehute> is it possible to do opengl graphics in a gtk2hs window?
13:14:53 <SamB> sehute: with that gtkgl thingy, yeah
13:15:00 <dcoutts> sehute, yes
13:15:10 <sehute> I want to learn graphics programming in Haskell, but the online resources seems a bit scarce so far
13:15:14 <xerox> dcoutts: I suppose the question I will pose now is the idea behind having both apt-get and apt-cache
13:15:35 <sehute> SamB&dcoutts: thanks
13:15:42 <dcoutts> sehute, http://haskell.org/gtk2hs/archives/2005/11/11/more-opengl-goodness/
13:15:43 <lambdabot> Title: Gtk2Hs » Blog Archive » More OpenGL goodness
13:15:48 <xerox> dcoutts: Where to download the index, and unpack it? I suppose /var/cache/something is a good place, as apt does, but then it needs to be ran as root for updates
13:15:48 <lambdabot> good? not great?
13:15:59 <dcoutts> sehute, you need the dev version of Gtk2Hs for the GtkGL bits
13:15:59 <lambdabot> Thank God for AOL that I could meet people like you!
13:16:05 <dcoutts> there's demo code to look at
13:16:06 <lambdabot> Guys who can speak latin really turn me on.
13:16:08 <shapr> oops
13:16:09 <lambdabot> oops you did it again?
13:16:11 <shapr> @vixen-off
13:16:11 <lambdabot> Bye!
13:16:20 <sehute> dcoutts: okay, I didn't know, thanks
13:16:31 <shapr> I meant to do that in private message! It seems that vixen-on is not limited by channel....
13:16:46 <dcoutts> heh
13:16:51 <xerox> shapr: that sounds... weird
13:16:57 <shapr> :-P
13:17:12 <dcoutts> xerox, you mean do we want a cabal-cache too? probably not. at least not yet.
13:17:16 <sehute> dcoutts: but I can still make a distributable binary that people that doesn't have Gtk2hs+GtkGL can use, right?
13:17:27 <dcoutts> sehute, yes
13:17:42 <neologism> what is the url for haskell'06 draft on wiki?
13:17:47 <xerox> dcoutts: no no, I just want to work out where to keep the index :)
13:17:56 <dcoutts> sehute, depending on the platform you may need to bundle .dlls or statically link or something.
13:18:03 <xerox> Oh well, it now keeps the index in the config dir
13:18:06 <xerox> I'll keep it this way
13:18:20 <dcoutts> xerox, where does it put the tarballs?
13:18:21 <sehute> dcoutts: I see. Thanks for the info. :)
13:18:33 <dcoutts> sehute, what OS are you thinking of?
13:18:46 <sehute> dcoutts: I tried HGL on Windows today, btw, and none of the examples worked. No windows showed up.
13:18:56 <sehute> dcoutts: I am mainly thinking of a Debian-based os
13:18:59 <dcoutts> HGL with ghc is borked
13:19:09 <sehute> dcoutts: but any LSB-compliant plattform would be nice
13:19:13 <dcoutts> sehute, that's easy then as Gtk will already be installed
13:19:23 <xerox> dcoutts: conf-dir/packageS/
13:19:44 <dcoutts> sehute, the only slightly odd dep you'll need to specify is the gtkgl package
13:20:15 <sehute> dcoutts: great!
13:20:44 <sehute> dcoutts: I'll look into gtk2hs+gtkgl. I'll probably bang me head against the wall a couple of times before I make anything fly, tough :)
13:20:58 <dcoutts> sehute, sorry, I mean 'gtkglext', see gtkglext.sourceforge.net
13:21:07 <dcoutts> it'll be available on debian
13:21:10 <sehute> dcoutts: ok, great
13:21:30 <dcoutts> xerox, fair enough, keep whatever it uses now
13:21:57 <ihope> Does diffClockTimes x y return x-y or y-x?
13:21:57 <lambdabot> ihope: You have 1 new message. '/msg lambdabot @messages' to read it.
13:26:41 <ihope> y-x, apparently.
13:26:56 <ihope> ...No, x-y.
13:27:24 <ihope> So you want the later time first.
13:31:38 <sehute> both krugle.com and koders.com doesn't seem to support Haskell :/
13:32:47 <tibbe> I would like to read a line from a socket but Network.Socket is slightly undocumented
13:33:09 <tibbe> I want everything up to \r\n (but throw away those two)
13:33:41 <xerox> tibbe: does it give back to you a handle?
13:33:43 <Lemmih> tibbe: hGetLine?
13:33:44 <lambdabot> Lemmih: You have 1 new message. '/msg lambdabot @messages' to read it.
13:34:27 <xerox> As Lemmih says, along with hSetBuffering handle LineBuffering, I think.
13:34:45 <Lemmih> The buffering shouldn't matter.
13:34:50 <ihope> Hey, I've been doing this backwards...
13:34:52 * ihope starts over
13:35:18 <sehute> I seem to recall to have read here once, that there's a difference between function . function and function.function. Is that so? And what does it mean?
13:35:33 <xerox> sehute: no, there isn't.
13:35:44 <sehute> xerox: phew, okay, thanks :)
13:35:52 <ihope> Well, things like Foo.Bar are parsed differently from Foo . Bar, I think.
13:35:54 <xerox> sehute: the other case `.' has a special meaning is Module.function.
13:35:54 <Cale> sehute: There isn't, but note that . is used as a module separator
13:36:01 <ihope> Yeah, that.
13:36:11 <Cale> So you can have a data constructor Foo, and a module Foo
13:36:12 <sehute> okay, so there is a difference? *confused*
13:36:22 <Cale> and Foo.bar will be different from Foo . bar
13:36:33 <Cale> if bar is a function in the module Foo
13:36:39 <Cale> and also in the local module
13:36:50 <sehute> so " . " is function composition, and "." is object membership?
13:36:54 <Cale> It's a pretty rare case
13:37:08 <ihope> sehute: modules, not objects.
13:37:11 <Cale> "." is also function composition -- it's just that it overlaps badly
13:37:14 <xerox> Also if you have imported qualified Foo, and have a constructor Foo, Foo.Foo will be different from Foo . foo.
13:37:21 <xerox> Ops, last foo is Foo in fact.
13:37:26 <Cale> But " . " can't be misparsed
13:37:33 <Lemmih> > (succ.succ) 10
13:37:34 <lambdabot>  12
13:37:43 <Cale> the lesson is to always insert spaces around infix operators
13:37:45 <sehute> Okay, so " . " can't be misinterpreted. It's always function composition. But "." varies?
13:37:49 <Cale> yes
13:38:04 <SamB> yeah, the same thing happens with TH and $...
13:38:07 <Cale> Sort of bad, but works okay in practice
13:38:24 <sehute> ookay, so it's important to always use spaces around infix operators, and "." and "$"
13:38:24 <Cale> yeah, the TH and $ issue is possibly more annoying
13:38:38 <ihope> Well, . and $ are infix operators.
13:38:46 <sehute> ihope: and TH too?
13:38:48 <Cale> Yeah, I almost think the spec should require space around infix operators
13:39:08 <Cale> The only place I'd find that awkward is in mathematical expressions -- especially with exponentiation
13:39:10 <sehute> Luckily, I have the habit of including spaces around infix operators already. :)
13:39:15 <Cale> x ^ 2 looks really awkward.
13:39:33 <ihope> Well, just always put spaces around ".".
13:39:36 <sehute> Cale: is that really needed? Instead of just x^2?
13:39:39 <dmhouse> I'm used to 'x ^ 2'.
13:39:42 <ihope> Just what is TH?
13:39:53 <dmhouse> ihope: Template Haskell.
13:39:58 <sehute> okay, so always put spaces around ".", as long as you're intending to do function composition. Got it.
13:39:59 <Cale> sehute: no, it's not, but it would be if the spec enforced that spaces were required around infix operators
13:40:24 <ihope> sehute: yep.
13:40:36 <sehute> Cale: oh, we're moving into the hypothetical dimention. This is too much, I'm confused with reality already. ;)
13:40:40 <Cale> hehe
13:40:44 <dmhouse> haskell.org is working! :)
13:41:41 <sehute> Okay, but if I mean function composition, I will always be safe if I just include spaces around "."?
13:41:43 <mahogny> yup. been up for a while. in particular, I think it started right when I needed the gtk2hs reference :)
13:41:45 <LordBrain> yay!
13:41:47 <Cale> sehute: well, it's something that's been proposed before. It would allow for some nice things, like using - as hyphen to separate words, which is one thing that I actually like about lispish conventions
13:41:49 <ihope> sehute: yep.
13:42:24 <sehute> thanks
13:42:39 <dcoutts> ah when did haskell.org come back up?
13:42:39 <ihope> Well, you can't do function composition that way in the middle of a string literal :-)
13:42:45 <sehute> I think I'll save the exact meaning of "." without spaces for a documentation-reading-session some other time ;)
13:43:00 <LordBrain> ah, using spaces on dot.. thats a good tip... i've already started developing a bad habit then
13:43:01 <sehute> ihope: ;)
13:43:03 <xerox> Cale: long names are confusing to me
13:44:00 <sehute> xerox: Super­califragilistic­expialidocious
13:44:25 <Cale> HasCanonicalRepresentativeDeterminatorOfExternalSet
13:44:42 <LordBrain> lol
13:45:18 <Cale> HasIsFullSubgroupGLorSLRespectingSesquilinearForm
13:45:42 <Cale> GAP has some pretty funky identifiers in its standard library.
13:45:46 <vincenz> \o/
13:45:53 <dmhouse> Someone wrote a Lisp function to find the longest symbol name.
13:45:56 <dmhouse> It was pretty cool.
13:46:06 <dmhouse> (In Emacs, I should say.)
13:46:21 <Cale> what was it?
13:46:34 <dmhouse> I'm trying to find the function again :)
13:48:23 <Cale> You know, when you're programming and using identifiers like BrauerTableOfExtensionBySingularAutomorphism, you really feel like you're doing something. :)
13:48:47 <vincenz> Cale: hi
13:48:54 <Cale> hi
13:49:03 <monochrom> http://java.sun.com/j2se/1.5.0/docs/api/java/sql/DatabaseMetaData.html#supportsDataDefinitionAndDataManipulationTransactions()
13:49:10 <Cale> heh, I almost typoed "hi" as "no"
13:49:15 <monochrom> (long name in Java library)
13:49:34 <ihope> Cale: common typo in some places ;-)
13:49:34 <dmhouse> Cale: it's times like those I feel glad for C-M-/. :)
13:49:44 <vincenz> C-M-/ ?
13:49:45 <dmhouse> (Refering to the long symbols thing.)
13:49:54 <dmhouse> vincenz: ever used Open Office Writer?
13:50:16 <sehute> I'm trying to find random haskell-code-snippets on the web, but I can't find many. Does any of you have a couple of spare ones?
13:50:33 <sehute> I just wish to read some source
13:50:34 <ihope> sehute: what sort of code snippets?
13:50:36 <xerox> monochrom - Fortunately we're expressing such things in form of types here, and we don't type types too much :)
13:50:37 <ihope> Anything?
13:50:41 <sehute> ihope: anything
13:50:49 <monochrom> http://www.vex.net/~trebla/haskell/   has some code snippets of mine.
13:50:50 <vincenz> dmhouse: erm, no?
13:50:51 <lambdabot> Title: Index of /~trebla/haskell
13:51:05 <sehute> thanks! :)
13:51:15 <vincenz> dmhouse: I use vim and latex
13:51:16 <dmhouse> vincenz: Basically, you start typing a word, then C-M-/ will attempt to complete it to any of the previous words in the buffer.
13:51:17 <vincenz> who needs more?
13:51:24 <LordBrain> can java do something like an "as" so we dont have to write out the whole heirarchical paths to things? this.here.nice.little.thing?
13:51:28 <vincenz> and vim has completion :)
13:51:43 <ihope> There's also this: http://www.haskell.org/haskellwiki/Applications
13:51:45 <lambdabot> Title: Haskell in practice - HaskellWiki
13:51:49 <vincenz> dmhouse: but at first I thought you meant emacs... C-M-* smells of emacs
13:51:51 <monochrom> import Control.Monad.Fix as F
13:52:11 <monochrom> Oh, Java!  No.
13:52:15 <dmhouse> vincenz: oh, C-M-/ is Emacs, it's just similar to a feature of OOo Writer.
13:52:29 <vincenz> ah
13:52:33 <monochrom> For Java I use Eclipse and it does all the imports for me.
13:52:35 <vincenz> I guess OOo has some bad features
13:52:36 <LordBrain> poor java programmers
13:52:55 <monochrom> They're happy because they have Eclipse. :)
13:53:07 <LordBrain> Object Oriented o-things?
13:53:16 <dmhouse> LordBrain: Open Office . org
13:53:19 <LordBrain> ooh
13:54:26 <sehute> ihope: thanks, I'll look at that too
13:55:08 <sehute> monochrom: how can I generate a single random number in the range 0..9 in ghci? I tried using the source I found on your page, but I got various error-messages.
13:55:26 <sehute> monochrom: *** Exception: user error (Prelude.readIO: no parse)
13:55:41 <sehute> and
13:55:53 <sehute> Prelude> import Random             [\n]            <interactive>:1:0: parse error on input `import'
13:55:58 <Igloo> :m + Random
13:56:00 <Igloo> randomRIO (0, 9) >>= print
13:56:07 <LordBrain> num <- randomRIO (1::Int, 9)
13:56:26 <LordBrain> er make that 1 a zero
13:56:38 <xerox> Igloo: the print isn't needed thanks to GHCi :)
13:56:52 <monochrom> Please save the "complete example" in a .hs file
13:57:01 <Cale> xerox: you sure?
13:57:15 <xerox> It was like that last time I tried, and surprised me too.
13:57:20 <Igloo> xerox: It is for me...
13:57:23 <sehute> monochrom: I did. Then I started ghci, then :l modulename, then main
13:57:27 <Cale> Prelude> :m + Random
13:57:27 <Cale> Prelude Random> randomRIO (1::Int, 9)
13:57:27 <Cale> Prelude Random>
13:57:52 <sehute> thanks, I got a random number now :)
13:58:14 <sehute> monochrom: I probably don't know how to load it properly
13:58:22 <xerox> *GOA> :m + System.Random
13:58:22 <xerox> *GOA System.Random> randomRIO (0,9)
13:58:22 <xerox> 0
13:58:22 <xerox> *GOA System.Random> randomRIO (0,9)
13:58:22 <xerox> 8
13:58:36 <monochrom> Who is GOA?
13:58:41 <lisppaste2> LordBrain pasted "Guess My Number Example" at http://paste.lisp.org/display/23430
13:58:42 <xerox> ?where goa
13:58:43 <lambdabot> http://www.cse.unsw.edu.au/~dons/code/goa/
13:59:09 <sehute> monochrom: I saved the example at the bottom of this page: http://www.vex.net/~trebla/haskell/random.xhtml
13:59:12 <sjanssen> Cale, xerox: I think this is new behavior in GHC 6.5
13:59:12 <sehute> monochrom: as random.hs
13:59:23 <sehute> monochrom: then I started ghci random.hs
13:59:29 <xerox> monochrom: a.k.a.:
13:59:30 <xerox> *GOA> :pl \f xs -> xs >>= return . f
13:59:31 <xerox> fmap
13:59:45 <Igloo> xerox: Does GOA give you an instance for Show a => Show (IO a)?
13:59:53 <xerox> No.
13:59:58 <Igloo> What version of ghci?
14:00:06 <xerox> The Glorious Glasgow Haskell Compilation System, version 6.5.20060608
14:00:14 <Igloo> Ah, that's probably why then
14:00:16 <sehute> monochrom: then I typed "main", and got this: http://www.vex.net/~trebla/haskell/random.xhtml
14:00:34 <sehute> monochrom: then I typed "main", and got this: *** Exception: user error (Prelude.readIO: no parse)
14:00:40 <sehute> monochrom: (not the url)
14:02:28 <monochrom> What do you type after typing "main" and pressing enter?   You should then enter a number.
14:02:57 <sehute> monochrom: ah, I didn't know :)
14:03:17 <monochrom> Have you read the text too?
14:04:31 <sehute> monochrom: it didn't work with a number either
14:04:39 <sehute> monochrom: no, I just wanted to check out snippets :)
14:04:45 <sehute> monochrom: I will read the text too
14:05:03 <sehute> monochrom: here's what happens: http://paste.uni.cc/8860
14:05:04 <monochrom> You can also read the code.  There is a line "seed <- readLn" and you know what it means.
14:05:46 <monochrom> Please don't enter "main 10".
14:06:02 <monochrom> <monochrom> What do you type after typing "main" and pressing enter?   You should then enter a number.
14:06:10 <monochrom> I did say "pressing enter" there.
14:06:20 <monochrom> Sorry for making you read carefully.
14:06:30 <sehute> monochrom: that works
14:06:38 <monochrom> And sorry for repeating or not repeating everything a 100 times.
14:07:07 <sehute> monochrom: actually, I'm about to go to bed, so I might be a bit counterproductive and not as thorough as I should be. I just wanted to quickly test out some snippets. But now it works fine here, thanks. :)
14:09:08 <sehute> what is literate haskell?
14:09:21 <dmhouse> sehute: it's a weird concept invented by Donald Knuth.
14:09:27 <sehute> monochrom: the snippet generated random numbers like it was no tomorrow
14:09:34 <lispy> sehute: comments are given priority...
14:09:35 <dmhouse> Basically, instead of the bulk of the file being code, and some comments tacked on, it's the other way around.
14:09:36 <SamB> it is haskell with extra comments delimited wierdly
14:09:42 <SamB> or emails from certain people on the list
14:09:44 <sehute> dmhouse: it looks like a mix between haskell, ghci and latex?
14:09:56 <ihope> Every line that doesn't begin with > is a comment, I think.
14:09:57 <SamB> sehute: pick one of ghci and latex
14:09:58 <dmhouse> sehute: there are two styles of literate Haskell.
14:10:06 <lispy> sehute: there are two lines of literate haskell, one looks like latex
14:10:12 <dmhouse> sehute: you can either prefix every line with '> '
14:10:24 <lispy> er i meant kinds not lines
14:10:27 <dmhouse> sehute: or wrap the code with \begin{code}...\end{code}.
14:10:56 <sehute> the one I'm looking at now uses \begin{verbatim}
14:11:04 <SamB> that is not code
14:11:11 <SamB> that is just sample code
14:11:12 <dmhouse> That's LaTeX.
14:11:18 <sehute> http://www24.brinkster.com/srineet/para/para.lhs.txt
14:11:22 <sehute> oh, okay
14:11:35 <lispy> hey, looks like haskell.org is back
14:11:40 <dmhouse> You can include arbitrary LaTeX in your comments, if you use the LaTeX style.
14:11:52 <SamB> or maybe this is fake .lhs
14:12:03 <SamB> oh wait
14:12:05 <SamB> the birdfeet
14:12:08 <sehute> the author of the file says: "The literate Haskell para.lhs (I have renamed it to para.lhs.txt because my hosting service won't show files with unknown extensions)"
14:12:08 <SamB> it has birdfeet
14:12:29 <SamB> so it is the "> " style
14:12:40 <dmhouse> Ah, clever.
14:12:47 <dmhouse> It's a weird mix of the two.
14:13:02 <SamB> well.
14:13:18 <dmhouse> It's a LaTeX file, so to begin with you think it's a LaTeX-file LHS file, but it's Bird-style.
14:13:20 <SamB> the LaTeX style doesn't work as well as it could
14:13:51 <SamB> without a good LaTeX package to help, that is
14:14:45 <sehute> so... lhs is as close as you get to code as poetry?
14:14:50 <dmhouse> ;)
14:14:55 <dmhouse> No, you don't need LHS for that.
14:15:27 <dmhouse> pascal = iterate (\row -> zipWith (+) ([0] ++ row) (row ++ [0])) [1]
14:15:29 <monochrom> code as blogs, rather
14:15:30 <sehute> Of course, you've got shakespeare ;) http://shakespearelang.sourceforge.net/report/shakespeare/shakespeare.html
14:15:31 <lambdabot> Title: The Shakespeare Programming Language
14:15:34 <dmhouse> That's enough poetry for anyone.
14:15:39 <monochrom> (#define blogs ramblings)
14:16:31 <lispy> how do you get cabal to build haddock documentation?
14:17:45 <sehute> I like the concept of literate haskell.
14:18:06 <sehute> sehute: It makes the sourcefile very... complete, in a way
14:18:17 <sehute> oups, that wasn't really for me
14:18:28 <monochrom> That is no poetry or drama.  That is self-adventure!  I mean, "If so, proceed to Scene III" ...
14:19:26 <dmhouse> I dislike literate Haskell.
14:19:36 <monochrom> I like XTHML
14:19:53 <lispy> i'd like to know how to use haddock with cabal
14:19:59 <SyntaxNinja> y0
14:20:02 <dmhouse> The delimeters end up getting crufty, and Haddock works plenty well.
14:20:20 <SamB> dmhouse: what about for writing papers?
14:20:30 <lispy> SyntaxNinja: do you know how to help me?
14:20:36 <dmhouse> SamB: that and emails, and things like that, it can be worth it.
14:20:45 <dmhouse> SamB: but for people that try to use it for actual code...
14:20:46 <lispy> SyntaxNinja: i've looked at the manual but it doesn't appear to talk about it
14:20:54 <SyntaxNinja> lispy: what's the question?
14:20:56 <SyntaxNinja> ./setup haddock?
14:21:08 <SamB> dmhouse: oh, yeah, that can be annoying
14:21:21 <SamB> especially if the literate stuff doesn't talk about the *code*!
14:21:40 <monochrom> Let me commit the crime of the year: duplicate the function of Knuth's web and weave and tangle, except this time the input language is XHTML!
14:21:58 <SamB> monochrom: ah, the horror! how are you going to do that anyway?
14:22:13 <monochrom> HXT has all the primitives one needs.
14:22:27 <SamB> huh
14:22:28 <SamB> ??
14:22:31 <SamB> oh riht.
14:22:34 <SamB> er, oh right.
14:22:47 <SamB> but, I meant, what elements are you even going to use for it?
14:23:13 <monochrom> Applying arrows, the most beautiful tool of all, to process XHTML, the most evil application of all!
14:23:19 <SamB> and isn't XHTML a pain to write anyway?
14:23:28 <sehute> dmhouse: would you like literate Haskell if there was an easy way to convert it to "normal" Haskell?
14:23:35 <dmhouse> sehute: there is. :)
14:23:36 <SamB> sehute: there is!
14:23:36 <SyntaxNinja> haskell.org is back up
14:23:45 <dmhouse> SyntaxNinja: has been for a while.
14:23:48 <SamB> how do you suppose the compiler can compile it?
14:23:52 <sehute> monochrom: yeah, shakespeare is very strange :)
14:24:01 <monochrom> Just need a simple convention.  Let's say <pre class="haskell"> ... </pre> contains Haskell code, all else is documentation.
14:24:19 <lispy> SyntaxNinja: thanks
14:24:19 <dcoutts> ndm, I've been looking at this win32 assembly stuff, it looks interesting
14:24:20 <sehute> If literate haskell is concieved by Donald E Knuth, it must be good :P
14:24:27 <dmhouse> SamB: but it produces compiler-, not human-readable code.
14:24:28 <SamB> monochrom: you don't remember what tangle and weave do, do you?
14:24:32 <lispy> SyntaxNinja: that pretty much works (haddock can't find some files)
14:24:34 <dcoutts> ndm, it may solve our haskell package dll install problems
14:24:50 <SamB> sehute: it isn't
14:24:52 <dmhouse> sehute: it's good when it's used well.
14:24:55 <SamB> not exactly
14:24:55 <ndm> dcoutts, woot!
14:24:57 <lispy> SyntaxNinja: i guess i can't read the documentation or it's just not clear that 'setup haddock' was the way to invoke it
14:25:05 <SamB> I mean Knuth doesn't even use Haskell
14:25:10 <sehute> dmhouse: if there are converters for lhs, surely it can't be that bad? :)
14:25:16 <monochrom> I think I'll just need tangle to extract code.  I think I don't need weave.
14:25:17 <SyntaxNinja> lispy: :)
14:25:19 <dcoutts> ndm, http://msdn2.microsoft.com/en-us/library/ms235542.aspx
14:25:36 <SamB> monochrom: but tangle is called "tangle" for a reason!
14:25:37 <monochrom> My weave = id.
14:25:43 <SamB> do you remember what that reason is?
14:25:45 <sehute> SamB: I guess he's busy with the next version of Mix ;)
14:25:45 <dmhouse> sehute: The point is that people try to use it for normal code.
14:26:01 <monochrom> It re-orders code according to directives in the input file.
14:26:15 <dmhouse> sehute: the \begin{code}...\end{code} or '> ' delimeters get crufty, and there's just no point to it.
14:26:17 <sehute> dmhouse: I can see that literate Haskell for normal every-day code might be overkill
14:26:19 <monochrom> It also duplicates code according to directives.
14:26:27 <dmhouse> Haddock can annotate normal modules sufficiently well.
14:26:30 <lispy> SyntaxNinja: i think the problem is that i clicked on the "setup haddock" node in the help and it says, "Build the interface documentation for a library using Haddock." and i thought to myself, "Yes! that's exactly what i want to learn to do..."
14:26:45 <ndm> dcoutts, i have used manifests before, but mainly for that cool XP look
14:26:45 <monochrom> Someone actually noted that you can use it for copy-and-paste re-use.  Evil.
14:26:50 <sehute> dmhouse: I agree that I've seen more elegant commenting-conventions
14:27:11 <dcoutts> ndm, well apparently they can be embeded in .exe's too
14:27:19 <dcoutts> rather than as seperate files
14:27:22 <ndm> dcoutts, yep, thats what i did
14:27:26 <ndm> as a resource
14:27:30 <dcoutts> ah right
14:27:31 <ndm> with index 24, i beleive
14:27:38 <SyntaxNinja> lispy: yeah, the context is missing I guess if you just look at that page.
14:27:42 <sehute> So, what's the favorite way to comment Haskall? Just a bunch of "--"s ?
14:27:53 <monochrom> -- = //
14:27:53 <sehute> s/Haskall/Haskell/g
14:28:01 <dmhouse> @where Haddock
14:28:02 <lambdabot> http://www.haskell.org/haddock/
14:28:02 <monochrom> {- -} = /*  */
14:28:04 <dmhouse> sehute: try that.
14:28:07 <sehute> No docstring-ish comments?
14:28:09 <dcoutts> sehute, yeah. or use {- for -} commenting out big chunks of code
14:28:23 <lispy> sehute: think of haddock as docstring-ish comments
14:28:23 <dmhouse> sehute: Haddock is what you want.
14:28:31 <dmhouse> -- | This function does nothing.
14:28:36 <monochrom> The last one is a lie.  {- -} > /* */ is the truth.  You can have {- {- -} -}, but not /* /* */ */
14:28:37 <dmhouse> noOp :: Monad m => m ()
14:28:40 <dmhouse> noOp = return ()
14:28:59 <lispy> dmhouse: the biggest argument for literate vs. haddock that i can think of is that not all projects need to provide documentation just for programmers, so sometimes you want something besides haddock
14:29:12 <dmhouse> lispy: then write a user manual.
14:29:33 <sehute> dmhouse: thanks
14:29:34 <lispy> dmhouse: yeah, and literate haskell allows you to do that if you use the latex style.  For example, darcs does this
14:29:56 <dmhouse> lispy: there are different levels of documentation. I'd argue you'd need at least two: a user-orientated one and a programmer-orientated API documentation.
14:30:27 <lispy> dmhouse: yeah, i agree
14:30:28 <sehute> is it possible to use both literate haskell and haddock at the same time?
14:30:31 <dmhouse> I don't think embedding a user manual into your code would be a good idea.
14:30:34 <dmhouse> sehute: yes.
14:30:57 <sehute> or is that an abomination?
14:31:00 <mux> hmm, what's the syntax for compiler directives inline in the source code already?
14:31:02 <dmhouse> Because the user manual should be referring to the program _concepts_, not the program _functions_.
14:31:03 <lispy> dmhouse: darcs uses literate haskell for the user manual and nothing for the other kind :( (I have pushed very hard for haddock adoption and consensus was "NO")
14:31:42 <dmhouse> The user manual shouldn't be constricted by the module layout, for example.
14:31:49 <sehute> perhaps the trend is to just move all userdocumentation to the web?
14:31:51 <dcoutts> ndm, so pehaps the model should be that one distributes pre-compiled haskell libs as shared side by side assemblies, and apps can either use those assemblies or bundle them privaely for extra convenience.
14:31:52 <ihope> "modifyIORef ref (addToClockTime freq)"
14:32:10 <dmhouse> And the user manual might, and perhaps should, be maintained by a different team to the coders.
14:32:17 <LordBrain> yeah... that makes sence.. a hacker manual would be a different story
14:32:18 <ihope> That'll cause drift every time it's called...
14:32:27 <LordBrain> sense
14:32:38 <SamB> dmhouse: are you talking about darcs?
14:32:39 <ndm> dcoutts, might work, but likely to be a lot of work
14:32:39 <LordBrain> or hacker's guide or something
14:32:42 <dcoutts> ndm, so to make it work transparently with haskell compilers on win32 we need an assemblies field in the .cabal file, much like the frameworks fields for OSX.
14:32:59 <dmhouse> SamB: I'm doing a general rant, but it happens to apply to darcs, I guess.
14:33:02 <sehute> is darcs and cabal related?
14:33:16 <dcoutts> sehute, not really
14:33:22 <LordBrain> some parts of the code are really relavent to the user interface tho.. so i can see maybe it being embedded in those areas
14:33:22 <dcoutts> they're both written in Haskell
14:33:36 <sehute> I see
14:33:39 <LordBrain> just to ensure it is kept in sync
14:33:43 <mux> ah, {-# ... #-}
14:34:04 <dmhouse> sehute: darcs is a revision control system. Cabal is a system for packaging, distributing and installing Haskell programs.
14:34:08 <sehute> mux: bearded cat-eye cyclops smilies
14:34:13 <ihope> So how fast is "modifyIORef ref (addToClockTime freq)"?
14:34:31 <mux> sehute: interesting escription :-)
14:34:50 <sehute> mux: well, I'm an interesting erson >;)
14:34:52 <ihope> Oh, never mind, it won't cause drift.
14:35:01 <sehute> mux: :P
14:35:04 <mux> uhoh, IRC typo-puns :-)
14:35:25 <sehute> :D
14:37:07 <sehute> there are some classical computer jokes about emacs and vim, etc
14:37:13 <sehute> are there any classical ones about haskell?
14:37:46 <LordBrain> dmhouse: i think the right way to go is probably to code to the user manual, ie, it is like a spec.. at least for some things, like APIs.
14:38:03 <dmhouse> LordBrain: I disagree.
14:38:11 <dmhouse> Users don't care how your program works
14:38:12 <LordBrain> if code conflicts with the manual, its a bug
14:38:16 <dmhouse> The specification must.
14:38:27 <dmhouse> Therefore, the specification and the user manual must be distinct.
14:38:59 <LordBrain> well, i'm basing this off of what i saw happen in GGI, it's supposed to provide consitent functionality over different platforms but it didnt until someone wrote a manual.
14:39:06 <dmhouse> For example, the user manual for, say, an IRC program, would list how to connect, change your password etc.
14:39:20 <LordBrain> well i did say APIs
14:39:23 <dmhouse> The specification would list the conformance to various network protocols, port numbers and so on.
14:40:17 <dmhouse> The code conforms to the specification. The UI conforms to the user manual.
14:41:13 <LordBrain> they had a checkmode function which is supposed to suggest a reasonable video mode setting relative to your specified needs
14:41:51 <LordBrain> but its algorithm for determining a mode was inconsistent with different backends
14:43:37 <ihope> Um, hey, the module typechecks and all that...
14:43:55 <ihope> And the ugliest part of it seems to be the function to wait half a timeDiff.
14:44:03 <ihope> s/timeDiff/TimeDiff/
14:44:14 <LordBrain> my brother was making a game on ggi, and he was testing it with many different targets(backends), and was annoyed when it was inconsistent with the man page... so he wrote a sort general version of it that all the backend users could just interface with to get consistent behavior.
14:44:23 <ihope> > 31556926000000 :: Int
14:44:23 <lambdabot>  1801276288
14:44:38 <xerox> > maxBound + 1 :: Int
14:44:40 <lambdabot>  -2147483648
14:44:44 <LordBrain> like the beginnings of a miniture little backend framework
14:44:48 <ihope> Well, no point in multiplying the number of years by 31556926000000 to get an Int, then...
14:45:29 <LordBrain> vast improvement for the usefulness of the checkmode function
14:49:22 <ihope> Doink...
14:52:54 <sehute> good night everyone :)
14:53:03 <ihope> Well, this works, but it's happily munching away on my CPU stuff.
14:54:19 <edwardk> how goes?
14:54:23 <xinming> 'window stick off'
14:54:36 <ihope> This also works, and it also eats my CPU.
14:54:43 <dmhouse> Hiya edwardk.
14:54:48 <dmhouse> xinming: ?
14:54:57 <edwardk> so i think i might have gone a little insane.
14:55:26 <edwardk> http://slipwave.info/jugs/src/Type/Algebra.hs is probably going to stop where its at. I only needed Boolean Ring =)
14:55:41 <xinming> xinming: Oops, I'm just trying irc for stick off every windows stick bit... :-)
14:56:45 <dmhouse> Once I've make'd GHC, where's the resulting binary?
14:56:55 <dmhouse> I haven't make installed.
14:58:44 <edwardk> find . -name "ghc" and see what it comes up with. =)
14:58:53 <edwardk> check the compiler folder though
14:59:00 <xinming> dmhouse: sorry, I'm just trying irc for stick off every windows stick bit... :-)
14:59:08 <edwardk> compiler/stage2
14:59:20 <dmhouse> edwardk: ah, nice.
14:59:27 <dmhouse> edwardk: thanks.
14:59:29 <dmhouse> xinming: have fun. :)
15:00:25 <edwardk> so has anyone ever heard of using infinitely long 2s complement arithmetic to encode the integers?
15:00:56 <edwardk> i wound up tripping over the idea while implementing duality stuff in my type level binary numbers.
15:01:12 <edwardk> seems to hold up quite nicely and not have to give up any properties of Succ, etc.
15:02:02 <edwardk> formally i think it would work out as a boolean ring of countably infinite many values for which every value in the ring has an infinitely long tail consisting of all 0s or 1s for its most significant bits.
15:02:38 <SamB> edwardk: of course...
15:02:44 <edwardk> duality holds, every element is idempotent, succ is cleanly defined with a unique successor as long as you normalize the tail
15:03:02 <SamB> isn't that pretty much what Integer does anyway?
15:03:09 <edwardk> i just hadn't seen anyone actually formalize it
15:03:18 <edwardk> yeah. i think gmp does more or less that under the hood
15:03:41 <SamB> in any case, the Bits interface presents an interface like that
15:03:45 <SamB> er, instance
15:03:53 <edwardk> i had it working with a full adder i've coded. but i think i'm going to see if i can replace the full adder with an S/G/P carry adder.
15:04:09 <edwardk> doing it at the type level. but glad to hear its not new =)
15:05:10 <ihope> So I wrote my no-drift clock thing.
15:05:33 <ihope> Where should I put it?
15:05:35 <edwardk> currently trying to use a reversible adder so i get subtraction for free, etc.
15:05:52 <edwardk> and doing binary so i can transform div into a binary search problem
15:06:20 <edwardk> hows the clock work?
15:06:40 <ihope> Well, a clock consists of a resolution and a future time.
15:07:02 <ihope> There's a waitOnClock function which waits for the future time to come, then adds the resolution to it.
15:08:34 <ihope> The ugly part is waiting for the future time to come. I used a function which converts the resolution into microseconds, then cuts that in half, then uses threadDelay to wait that long.
15:09:58 <edwardk> ouch
15:10:29 <edwardk> so you do the zen thing of getting half way there and waiting until the hardware backlog causes you to overrun or arrive on time
15:10:40 * SamB wonders if his idiot solver is working correctly...
15:11:03 <edwardk> btw.. i'm starting to like fundeps.
15:11:30 <edwardk> i figured out a way to fake some class level dependencies without carrying parameters around, at least in the closed case.
15:11:43 <edwardk> still can't use them in a type, but they are useful for classes.
15:12:26 <edwardk> going to go back and try them on that horrific algebra thing
15:12:48 <ihope> edwardk: yep, that's what I do.
15:13:02 <edwardk> it kinda motivated them =)
15:13:16 <edwardk> Using the trick in http://slipwave.info/jugs/src/Type/Boolean.hs
15:13:32 <edwardk> to make sure that the Bools remain closed without carrying another paramter
15:14:01 <edwardk> because I have a base class TCBool with instances for T and F, then I define TBool as a subclass and never export the base class
15:15:07 <edwardk> sinc you can't get your hands on the 'Closure' object to construct a new instance of TBool TBool remains closed.
15:15:40 <edwardk> but the second class means i don't have a parameter dirtying up my type class forever
15:22:08 * ihope wonders why waitOnClock uses up all his CPU
15:24:02 <ihope> It should be spending most of its time in ThreadDelay.
15:24:36 <lisppaste2> dmhouse pasted "Testing lisppaste.el" at http://paste.lisp.org/display/23437
15:24:49 <dmhouse> Nice :)
15:27:14 <ihope> Aha!
15:27:44 <ihope> I was actually telling threadDelay to wait for the greater of 1 microsecond and some negative amount of time.
15:28:42 <ihope> Yeah, it works now.
15:29:38 <LordBrain> dons here?
15:30:23 <dmhouse> @localtime dons
15:30:25 <lambdabot> Local time for dons is Tue Aug  1 08:29:05 2006
15:30:35 <LordBrain> anyone know what the difference between a CursesStyle and a DrawingStyle in hscurses?
15:31:37 <SamB> prehaps DrawingStyle is higher-level?
15:32:13 <ihope> Now, I should be able to do something else for a while, come back, and see that my AbsoluteTime clock hasn't drifted.
15:32:47 <LordBrain> the documentation is pretty sparse
15:34:51 <LordBrain> apparently drawing style has 3 constructors... dstyle_{normal,focus,active}
15:35:36 <SamB> ah
15:37:36 <LordBrain> i still dont know what they are used for tho
15:38:14 <LordBrain> CursesStyle uses the internal curses representation for colors and attributes
15:38:49 <SamB> what were you expecting?
15:39:05 * SamB doesn't think there is really any other way to do it...
15:39:17 <LordBrain> well maybe DrawingStyle is in contraast to that...
15:39:27 <LordBrain> i'm not sure
15:39:43 <LordBrain> this example program i'm reading converts CursesStyles to DrawingStyles
15:39:55 <LordBrain> maybe the widgets use DrawingStyles..
15:40:00 <SamB> curses sadly does not have a whole lot of portability in the area of colors
15:40:08 <LordBrain> i know
15:40:16 <LordBrain> curses is sad for portability for a lot of reasons
15:40:35 <LordBrain> unless by portability we just mean *nix
15:40:45 <SamB> heh
15:41:00 * SamB has some code that uses it for DOS/Win32/Linux
15:41:04 * shapr throws thunderbolts
15:41:17 <ihope> And you better not just mean *nix, as I'm on Windows :-)
15:41:27 <SamB> And the main user usually uses it windows
15:41:28 <LordBrain> i think my brother made an implementation of turbo c's conio.h as a wrapper on curses
15:41:44 <ihope> So how much error do you think is reasonable for this driftless clock?
15:42:19 <LordBrain> hmmm... i wouldnt think to use curses for windows... unless you mean windows with cygwin.. or a wrapper around curses like that conio thing i just mentioned
15:42:34 <SamB> the DOS is just because, well, the old version only worked in DOS and I wanted to be able to test them side-by-side
15:42:49 <LordBrain> conio.h still comes with borland c++ i think... so that would work out swell
15:43:05 <mahogny> ihope: that is something you only know by looking in a specification of whatever program you write
15:43:20 <LordBrain> SamB: you use curses on windows?
15:43:41 <SamB> (The old version was in ASM and used fairly raw VGA access, including BIOS calls)
15:43:50 <SamB> LordBrain: for the ZSNES debugger, yes
15:44:17 <LordBrain> does that require cygwin?
15:45:22 <Cale> Man, another Chinese IP address I have to add to hosts.deny.
15:46:20 <ihope> Um, this wasn't working before...
15:46:26 <mwc> Cale, mongols at the gate?
15:46:41 <LordBrain> if you're porting dos stuff to nix, i think it makes more sense to implement a dos api ontop of curses.. and if you are programming with portability in mind it seems to be the same situation to me..
15:46:41 <Cale> yeah, some moron doing a dictionary attack
15:46:53 * mwc recognizes the Mongols are culturally distinct from the Chinese, or specifically, the Han Chinese
15:47:07 <ihope> And now it works perfectly?
15:47:12 <ihope> s/?/./
15:47:26 <ihope> How come it didn't work before but now it's working? Argh!
15:47:43 <LordBrain> curses is just huge... at the least you need to confine yourself to some well defined subset i think...
15:48:10 <SamB> LordBrain: API?
15:48:16 <LordBrain> library
15:48:18 <SamB> there was no API.
15:48:40 <mahogny> LordBrain: well, ignoring the widgets is a good start
15:48:42 <SamB> unless you call accessing the VGA memory directly and using BIOS to switch video modes an API?
15:49:32 <mwc> It's always struck me as a deficiency in IP and the physical transports that something like the Etherkiller can't be used remotely.
15:49:43 <SamB> anyway, that can't be implemented portably, for fairly obvious reasons
15:49:43 <LordBrain> what do you mean?
15:50:02 <LordBrain> SamB: i dont mean the asm version
15:50:02 <SamB> there were no function calls
15:50:14 <Cale> mwc: indeed :)
15:50:17 * ihope decides not to cut the time to wait in half
15:50:23 <LordBrain> you made your debugger acess memory directly?
15:50:30 <SamB> I didn't write the debugger
15:50:52 <LordBrain> and who would think to use curses to access memory direct... i am lost somehow here
15:50:52 <SamB> I just ported it to C+curses
15:51:09 <LordBrain> oh
15:51:17 <LordBrain> but your port doesnt do direct access right?
15:51:22 <SamB> of course not
15:51:38 <SamB> it still does call the BIOS to switch video modes, but only on DOS
15:52:06 <LordBrain> well, here's what i would have done... port it to something small like conio, and use a wrapper on curses for nix.
15:52:35 <LordBrain> hmm maybe i dont know everything it did tho... if there are multiple video modes and all
15:52:42 <SamB> not really
15:52:48 <SamB> it just needed to switch to textmode
15:52:57 <LordBrain> yeah
15:53:11 <LordBrain> well you had to do platform specific code for that anyway it sounds like
15:53:21 <ihope> Here it is, the driftless clock: http://pastebin.ca/109242
15:53:59 <ihope> Should I put it up on one of the mailing lists?
15:54:25 <SamB> but anyway, one of the regular ZSNES devs had anticipated that this code would be ported to use curses, and included it in his ZSNES build tool for idiots
15:54:44 <LordBrain> borland c++ is nice, for portability, i believe its a free download too.. and comes with conio.h... so that could be used for win32 console, turbo c for dos console, and gcc+curses for nix
15:55:01 <LordBrain> :)
15:55:14 <SamB> actually the DOS version of this program is built with DJGPP
15:55:21 <SamB> it is 32-bit through and through.
15:55:33 <SamB> though they are hoping to get it to work in 64-bit somehow too...
15:55:35 <LordBrain> oh ok
15:55:55 <LordBrain> that works too
15:56:27 <LordBrain> i think they might be making a 64-bit djgpp
15:56:28 <SamB> though DJGPP does include a conio.h, iirc. but anyway, the windows builds are done with mingw32 and MSVC...
15:58:30 <LordBrain> yeah, msvc is like a defacto standard.. but if you have to choose a proprietary compiler, i think bc would be better because at least its free as in beer... that way you could have users on windows making their own builds without necessarily having to be developers.
15:58:51 <SamB> MSVC is available for free, or so they say.
15:58:56 <LordBrain> oh it is?
15:58:59 <LordBrain> i havent kept up
15:59:06 <SamB> anyway, mingw32 is Free
15:59:10 <LordBrain> yeah
15:59:14 <LordBrain> mingw32 is good
15:59:17 <SamB> and you don't need both of them
15:59:28 <mahogny> well, for how long can that be guaranteed? as soon as there is more money in selling it, they will
16:00:36 <dmhouse> Welcome to tomorrow! :)
16:01:00 <SamB> I'm not sure the one you can get for free is sufficient to compile ZSNES -- I suppoes it probably is, but the mingw32 path is so much more convenient
16:01:27 <LordBrain> yeah
16:01:40 <mahogny> yeah. I just wish there was a "dumb"-edition for ordinary users so the need to provide binaries would be less
16:02:08 <LordBrain> dumb edition of mingw32?
16:02:17 <mahogny> yeah
16:02:24 <SamB> especially with this build tool for idiots that grabs a distribution of mingw specially made just for building ZSNES...
16:02:26 <mahogny> "double-klick here to build and install"
16:02:30 <LordBrain> yeah, or better cross compiling support
16:02:35 <SamB> the tool is also convenient for non-idiots
16:02:46 <SamB> it is called "zget"
16:02:49 <LordBrain> like for autotools and all... they tend to assume you compile on the same platform
16:03:16 <mahogny> autotools just need to go, on all platforms :P
16:03:20 <LordBrain> yeah
16:03:52 <LordBrain> i was talking with my brother.. he thinks a system based on gnome's pkg-config should replace it
16:04:09 <SamB> so instead of having WIP binaries for ZSNES, now they just have "zget" which fetches the latest ZSNES from SVN and builds it for you (perhaps after installing the needed mingw distribution)
16:04:11 <LordBrain> and be nice for cross-compiling
16:04:28 <LordBrain> a true cross-compiling build system
16:04:31 <mahogny> I think there are many options. the important thing is to unite for one of them, and start using it
16:04:31 <SamB> pkg-config is insufficient, I think
16:04:37 <SamB> it is good but not enough
16:04:47 <LordBrain> yeah, he wasnt suggesting using it as is
16:05:17 <SamB> one or more tools to tie it all together is/are needed
16:05:42 <LordBrain> pkg-config in its present form also isnt cross-compiling friendly i dont think
16:05:43 <SamB> should do what autoconfig is *supposed* to do, I guess
16:06:07 * dcoutts has spent the last hour tring to install win32 dev software
16:06:11 <SamB> er, autotools I guess
16:06:13 <dcoutts> it's soo difficult
16:06:20 * dcoutts hugs emerge
16:06:48 <mahogny> not difficult, but terribly time consuming
16:06:49 <LordBrain> you mean mingw32 ?
16:07:03 <dcoutts> I mean MS's free C compiler and associated tools
16:07:08 <SamB> zget is really nice...
16:07:16 <dcoutts> well, that was after finding that that is what I needed
16:07:31 <dcoutts> mingw32 is easy to install by comparison
16:07:41 * SamB was thinking dcoutts should have said "/me emerge hugs"
16:07:47 <dcoutts> heh
16:08:05 <dcoutts> for the MS stuff you have to install other software just to unpack it
16:08:12 <SamB> ouchouchouch
16:08:28 <dcoutts> perhaps if I were admin on the machine it'd be easier
16:09:00 <LordBrain> maybe they want it to be inconvenient, to provide more incentive to buy their product
16:09:01 <SamB> dcoutts: you should try out zget and then play some SNES games to deal with the stress ;-)
16:09:07 <dcoutts> but computer labs tend not to like to let you be admin
16:09:32 <mahogny> dcoutts: that is some shit. like when you are not privileged enough to bring up the calendar :P
16:09:36 <LordBrain> but free for download enough so that people cant complain that it isnt relative to competition like borland
16:09:48 <dcoutts> mahogny, heh, that's nice. does that really happen?
16:09:56 <mahogny> dcoutts: very common
16:09:57 <SamB> dcoutts: try it?
16:09:57 <LordBrain> is borland c++ still called borland? i heard they were selling their developer tools business
16:10:17 <SamB> they ought to just disable all the editing controls
16:10:19 <mahogny> dcoutts: it is beyond my imagination how they missed such an obvious thing
16:10:22 <SamB> so you can see but not touch
16:10:40 <dcoutts> I don't know what this windows calendar is that you mean
16:10:41 <SamB> LordBrain: probably they also are selling the name?
16:10:46 <dcoutts> I don't normally use windows
16:10:51 <SamB> dcoutts: double clicl on clock
16:10:53 <mahogny> dcoutts: double-klicking the time
16:10:55 <SamB> er, *clik
16:10:57 <SamB> nope
16:11:05 <SamB> click
16:11:19 <SamB> ack, can't type!
16:11:23 <dcoutts> hmm no clock at all
16:11:33 <SamB> heh
16:11:33 <mahogny> hm. I wonder if this is a brittain/US/shit thing. because I have seen Klick although I wanna spell it Click
16:11:55 <SamB> mahogny: heh
16:12:04 <ihope> Hmm, this message seems too short for the "plain old" Haskell mailing list, but it seems like it shouldn't go on haskell-cafe.
16:12:09 <SamB> usually I see "click"
16:12:14 <dcoutts> ah, prefs "show the clock"
16:12:29 <SamB> I have maybe seen "klick" in names of products
16:12:58 * ihope decides to post it to haskell anyway
16:13:52 <LordBrain> yeah klick is a trademark i think
16:14:12 <SamB> "too short"?
16:16:22 <ihope> Too short, aye.
16:17:48 <dmhouse> ihope: pastebin.ca is sloooow.
16:22:06 <LordBrain> i figured it out... mkDrawingStyle :: CursesStyle -> DrawingStyle makes a single CursesStyle into the record type, DStyle { dstyle_normal :: CursesStyle, dstyle_focus :: CursesStyle, dstyle_active :: CursesStyle }
16:25:41 <LordBrain> i guess focus and active are some transformations, like bolding it and inverting it or something...
16:26:21 <ihope> Heh, I set my system clock forward and the non-drifter followed. Then I set it back, and then it stopped.
16:26:24 <ihope> dmhouse: but it's cooool...
16:26:40 <dmhouse> ihope: in fact, it's not loading at all here.
16:27:16 <mahogny> ihope: that's a known problem. I know some clocks that fixes it but one shouldn't have to
16:37:01 <dmhouse> dcoutts: so helpful you're now guessing at what people's problems might be? :)
16:37:06 <ihope> It's not a bug; it's a feature! :-)
16:37:15 <dcoutts> dmhouse, you mean wx?
16:37:21 <dmhouse> dcoutts: yeah ;)
16:37:42 <dcoutts> well I did spend quite some time trying all the combinations for the gentoo ebuild, to see which worked
16:37:45 <dcoutts> not many did
16:37:54 <dcoutts> by which I mean 1 did
16:39:12 <dcoutts> dmhouse, or perhaps I should leave people to suffer wx installs so they switch to Gtk2Hs instead ;-)
16:39:20 <dmhouse> Hehe
16:39:50 <mahogny> wx, burn in hell!
16:40:39 <mahogny> anyway, wx is broken in itself. I helped a guy who coded it in C++, and then realized that it was too slow ... for a graphing tool :P
16:41:32 <dmhouse> It's far too late. Good night all.
16:41:40 <dcoutts> g'night dmhouse
16:56:27 <LordBrain> you know, for simulating conio on top of curses, haskell's threads would be nice... that way you can do the key_waiting type of thing.
16:56:47 <LordBrain> without much overhead or dependencies
16:58:52 <ndm> dcoutts, actually i thought your post was a pretty good advert for gtk2hs
17:01:18 <dcoutts> ndm, heh
17:01:24 <ndm> just "Duncan, Gtk2hs maintainer" as a sig would be a great advert
17:01:39 <ndm> as in use gtk2hs, get some real support and properly working versions
17:01:41 <dcoutts> aye, I should have done that
17:04:16 <LordBrain> does sourceforge let you use darcs instead of cvx?
17:04:16 <LordBrain> cvs
17:04:25 <dcoutts> LordBrain, no
17:04:38 <dcoutts> they may use svn these days
17:04:43 <LordBrain> oh
17:04:57 <LordBrain> is there a darcs answer to sourceforge?
17:05:04 <dcoutts> darcs.haskell.org
17:05:11 <LordBrain> ah
17:12:45 <LordBrain> so if i have my own project, i can just upload it there?
17:22:53 <dcoutts> LordBrain, if you've got a shell account
17:28:27 <jargonjustin> Is it possible to use Unicode characters in a Parsec parser?
17:29:23 <SamB_XP> jargonjustin: sure
17:29:40 <SamB_XP> but getting them out of a file is an exercise for the reader
17:31:37 <jargonjustin> SamB_XP: How I'm writing a parser for a predicate logic rule program and it'd be nice to be able to have it able to parse Unicode characters (right arrow, mathematical not, for all, etc).  I don't need to include them in Strings or anything, just recognize the character.
17:31:52 <jargonjustin> SamB_XP: Using char with a unicode literal in the source doesn't parse in GHC.
17:37:48 <Twanvl> You could try '\1234' or '\x1234'
17:46:19 <LordBrain> does darcs use a client server model, or is it somehow all clients?
17:46:28 <heatsink> I just cross-compiled ghc.  Is there a testsuite I can use to make sure the compiler is working correctly?
17:51:49 <Cale> jargonjustin: Yeah, do what Twanvl said, or else GHC 6.5 (the development version) is okay with unicode in source files.
17:52:09 <lispy> > 1 `div` 0
17:52:11 <lambdabot>  Exception: divide by zero
17:52:17 <lispy> > 1 / 0
17:52:18 <lambdabot>  Infinity
17:52:23 <jargonjustin> Twanvl, Cale: Thanks
17:52:33 <Cale> > 1 / 0 :: Rational
17:52:34 <lambdabot>  Exception: Ratio.%: zero denominator
17:52:54 <lispy> interesting that it's not always an exception
17:53:06 <heatsink> I thought %: was a constructor.
17:53:20 <Cale> % is a smart constructor
17:53:32 <Cale> :% is a constructor, but it's hidden
17:53:38 <heatsink> oh I see.
17:53:49 <heatsink> ls
17:53:51 <heatsink> oops
17:54:18 <lispy> @type div
17:54:19 <lambdabot> forall a. (Integral a) => a -> a -> a
17:54:51 <lispy> @type (/)
17:54:52 <lambdabot> forall a. (Fractional a) => a -> a -> a
17:55:46 <dcoutts> heatsink, one thing to try is to recompile ghc with itself. if that works then your port was good.
17:55:57 <dcoutts> heatsink, but yes, there is a testsuite
17:57:09 <dcoutts> http://haskell.org/ghc/dist/ghc-testsuite-6.4.2.tar.gz
17:57:42 <heatsink> dcoutts, well, the recompilation has finished making an in-place compiler that seems to be working.  But I made some changes to the mangler dealing with floating-point code so I'd like some reassurance there.
17:57:43 <dcoutts> unpack it to the top level of the ghc build dir
17:57:49 * heatsink dls
17:58:00 <dcoutts> heatsink, what arch are you porting to?
17:58:09 <heatsink> ia64
17:58:15 <dcoutts> ah
17:58:27 <dcoutts> porting again?
17:58:37 <heatsink> This system has glibc2.2 installed, the older version on the website requires 2.3, so I had to cross-compile from x86.
17:58:44 <dcoutts> ah ok
17:59:08 <dcoutts> if you have any mangler patches I'm sure they'd be welcome
17:59:21 <dcoutts> I had problems with the mangler when I did the ia64 builds for gentoo
17:59:40 <dcoutts> the mangler problems vary with gcc version
17:59:42 <heatsink> I'll submit a patch to the bugsite once it's working.
18:00:23 <dcoutts> heatsink, I got 6.4.1 working actually but then had mangler problems with 6.4.2
18:00:42 <heatsink> interesting.  I'm building 6.4.2.
18:00:52 <heatsink> Do you remember when the mangler problem showed up?
18:00:55 <dcoutts> what gcc version?
18:01:07 <heatsink> 3.4.2
18:01:11 <dcoutts> hmm
18:01:24 <dcoutts> there was an email thread on it some time back
18:01:28 <dcoutts>  can try and find it
18:02:00 <dcoutts> heatsink, perhaps I should try 3.4.x I was using 3.3.2
18:03:01 <heatsink> It wouldn't hurt stability.  I dunno if it makes much of a difference tho
18:03:08 <SamB> jargonjustin: but you also need to not read the files you wish to parse as iso-8859-1
18:03:18 <SamB> which tends to be the normal way things get read
18:03:33 <jargonjustin> SamB: Any way I can tell it to read it as UTF-*?
18:03:44 <dcoutts> heatsink, I started a thread here:
18:03:45 <dcoutts> http://www.haskell.org//pipermail/glasgow-haskell-bugs/2006-March/006350.html
18:03:46 <lambdabot> Title: GHC on IA-64
18:04:09 <lispy> > isNan (1/0)
18:04:09 <lambdabot>  Not in scope: `isNan'
18:04:15 <lispy> > isNaN (1/0)
18:04:16 <lambdabot>  False
18:04:40 <dcoutts> heatsink, that thread is about a compile problem in another package, but when I tried 6.4.2 later, I ran into the same problem when compiling one module
18:04:46 <lispy> > isNaN (1/0)
18:04:47 <lambdabot>  False
18:04:48 <lispy> oops
18:04:52 <lispy> > isNaN (0/0)
18:04:53 <lambdabot>  True
18:04:55 <dcoutts> heatsink, it was to do with spilling registers and register windows
18:05:03 <SamB> well, there is a decoding function that will take some Chars resulting from interpreting the file as iso-8859-1 and give you what you would have got if you read the file as utf-8
18:05:20 <heatsink> Ah, I see.
18:05:27 <dcoutts> also: http://www.haskell.org//pipermail/glasgow-haskell-bugs/2006-March/006353.html
18:05:29 <lambdabot> Title: ghc 6.4.1 on ia64
18:05:33 <heatsink> lemme check on that alloc instruction.
18:06:01 <dcoutts> heatsink, in that email Matthew Chapman explained why I was getting the errors
18:07:27 <lispy> hmm..so haskell doesn't have an xslt library?
18:07:51 <SamB> lispy: doesn't it?
18:07:54 <dcoutts> haskell's a better xslt anyway
18:07:59 <SamB> I thought HXT had one
18:08:06 <SamB> but nobody uses it because the combinators are more fun
18:08:15 <heatsink> ah, I see.
18:08:32 <lispy> i could check HTX, HaXml doesn't have one
18:09:08 <SamB> dcoutts: do you remember where that [Char] -> String UTF-8 decoding function is?
18:09:56 <dcoutts> SamB, there is such code in jhc, gtk2hs, and the streams lib
18:10:14 <SamB> dcoutts: thought there was some in gtk2hs
18:10:32 <heatsink> dcoutts: I'm getting a different problem though.  There are floating-point registers being explicitly spilled and filled, and there wasn't any mangler code to find that.
18:10:42 <dcoutts> SamB, see glib/System/Glib/UTFString.chs
18:10:43 <SamB> dcoutts: could you suggest something for jargonjustin ?
18:10:51 <SamB> oh, there it is ;-)
18:11:01 <SamB> @google "glib/System/Glib/UTFString.chs"
18:11:03 <lambdabot> No Result Found.
18:11:05 <SamB> hmm.
18:11:13 <dcoutts> heatsink, hmm, I wonder why I didn't find that.
18:11:43 <heatsink> dunno.  If it happened, you would have had a "Prologue junk?" error like what you posted.
18:11:50 <dcoutts> SamB, jargonjustin: http://darcs.haskell.org/gtk2hs/glib/System/Glib/UTFString.hs.pp
18:12:01 <lispy> SamB: hmm..maybe it's easier to use the combinators, but i'm going to want to generate, store and load transformations from files...so xslt seems like a good fit
18:12:01 <jargonjustin> dcoutts, SamB: Thanks
18:12:17 <dcoutts> heatsink, true, but all the ones I saw matched the pattern in those emails
18:12:28 <dcoutts> jargonjustin, see toUTF & fromUTF
18:12:38 <SamB> dcoutts: yeah, I'd just about reconstructed that from your path and the repo url from gtk2hs/_darcs/prefs/repos
18:12:52 <lispy> SamB: basically, i'm pulling data out of a database, adding element tags to say what the data means and then applying xslt to give the data a particular look
18:13:04 * dcoutts -> bed
18:13:16 <heatsink> g'night
18:13:24 <SamB> lisppaste2: well, HXT has some XSLT code, and there is at least one paper about it too
18:13:32 <dcoutts> heatsink, g'night and good luck with the ia64 builds
18:13:44 <SamB> @google formal semantics for XSLT
18:13:47 <lambdabot> http://homepages.inf.ed.ac.uk/wadler/papers/xsl-semantics/xsl-semantics.pdf
18:14:01 <SamB> yeah, thats probably the paper I was thinking...
18:14:28 <heatsink> thx
18:14:45 <SamB> er, lispy
18:14:59 <lispy> SamB: i'll look at it
18:15:01 <lispy> thanks
18:15:47 <lispy> SamB: it's probably not that hard to serialize a description of which combinators to use...
18:15:56 <lispy> maybe i should look into that...
18:16:19 <SamB> lispy: I meant, if you wanted to use a different XML library, you could write your own XSLT implementation (if it supports namespaces, anyway)
18:17:19 <lispy> SamB: that sounds like a lot of work for something that already exists, doesn't it?
18:17:38 <SamB> I suppose
18:17:48 <SamB> but HXT does have too many exported names :-(
18:18:25 * lispy needs to learn denotational semantics
18:18:43 <SamB_XP> I haven't looked at the paper yet
18:18:45 <lispy> i see them all the time and yet when i took my PL theory class the prof said, "No need to study denotational semantics, no one uses them!"
18:18:46 <SamB_XP> actually
18:19:01 <SamB_XP> lispy: that is backwards!
18:19:08 <lispy> apparently i see a lot of papers by no ones
18:19:21 <SamB_XP> usually professors are wanting to teach things that most people think nobody uses ;-)
18:19:27 <lispy> heh
18:19:44 <SamB_XP> (of course, usually "most people" are wrong...
18:20:01 <SamB_XP> ) but anyway, you should have told him you were a Haskellite
18:20:22 <lispy> SamB_XP: i don't see anything on this page about xslt: http://www.fh-wedel.de/~si/HXmlToolbox/
18:20:24 <lambdabot> Title: Haskell XML Toolbox 6.1
18:20:34 <SamB_XP> lispy: huh
18:20:37 <SamB_XP> I thought there was code
18:21:42 <SamB> maybe I have the wrong library
18:22:03 <lispy> in the haddock i see DOM, validator, parsor and xpath
18:22:04 <SamB> or a bad memory
18:22:07 <SamB> hmm.
18:22:08 <lispy> maybe you were thinking of xpath?
18:22:21 <lispy> hmm...xpath might be a good 90% solution
18:22:23 <SamB> I could have sworn I saw something about XSLT
18:22:56 <lispy> apparantly the haxml mentality is that you don't need xslt when you can use haskell
18:23:01 <lispy> but i don't really "get it"
18:23:10 <lispy> they give you a bunch of filters
18:23:19 <SamB> I don't get it either
18:23:37 <SamB> I think HXT's Arrow interface makes more sense
18:23:42 <lispy> i can't even till if the filtering can be applied to objects you get from dtd2haskell or if you have to use the generic xml parser to use them
18:24:00 <SamB> most likely the generic one...
18:25:09 <lispy> i think you're right
18:25:16 <lispy> but i haven't seen where they come out and say it :)
18:25:39 <lispy> well, i think i'm going to call it a day
18:25:42 <lispy> and try to figure this out later
18:25:55 <dons> morning
18:25:56 <lambdabot> dons: You have 1 new message. '/msg lambdabot @messages' to read it.
18:26:45 <lispy> SamB: i think reading this will hepl me http://gnosis.cx/publish/programming/xml_models_fp.html
18:26:47 <lambdabot> Title: XML Programming Paradigms (part four) -- Functional Programming approached to XM ...
18:26:56 <lispy> dons: morning
18:27:03 * lispy is just getting off work :)
18:27:18 * lispy waves good bye and logs out for a bit
18:27:58 <SamB> someone HAS written an XSLT processor using HXT, apparantly...
18:28:21 <SamB> ./doc/hvalidator/thesis/x2257.html:>&#13;               The Haskell XML Toolbox project will be maintained and enlarged at the University of Applied Sciences Wedel. One student already wrote an XSLT processor on the basis of this project. Another student is writing a program using the Haskell XML Toolbox for deriving Java classes from DTDs.
18:35:18 <LordBrain> hmmm you can access java classes in haskell?
18:35:36 <SamB> LordBrain: you can?
18:36:02 <LordBrain> oh ambiguous text, i missinterpretted
18:37:10 <LordBrain> i thought you just said that Haskell XML Toolbox is being used by a haskell programmer in a haskell program for the purpose of deriving java classes from DTDs.
18:37:33 <LordBrain> but why would you need java classes in your haskell? hence my question
18:37:49 <SamB> oh, I think they were generating java classes with Haskell code
18:37:56 <LordBrain> yeah
18:38:00 <SamB> that was just a grep result line
18:38:16 <LordBrain> its just ambiguous phrasing
18:38:38 <SamB> it isn't ambiguous if you know that it would be crazy to try to interface Java with Haskell ;-)
18:38:47 <LordBrain> right
18:38:48 <LordBrain> :)
18:39:01 <SamB> well, I mean, in an FFI kind of way
18:39:05 <LordBrain> gramatically its ambiguous tho
18:39:13 <SamB> most things are ;-)
18:39:16 <LordBrain> true
18:40:19 <MarcWebe2> Hi. Can you have a look at this errormessage? http://rafb.net/paste/results/Ls8GaB64.html.  (Line 36,38, 3,9 are important .. Does it cause trouble here that there is a type Ezcontentobject and a module Ezcontentobject?)
18:40:24 <LordBrain> i've been deciphering an hscurses example program all day, taking notes... maybe i should turn it into some kind of tutorial.
18:41:16 <MarcWebe2> LordBrain: I would be interested ;)
18:43:27 <LordBrain> ok MarcWebe2
18:43:28 <lispy> SamB: it is possible
18:43:36 <SamB> lispy: yeah
18:43:43 <SamB> but not what I'd call a good idea
18:43:45 <lispy> SamB: you'd most likely want to use JNI, iirc eclipse-fp does this
18:44:14 <SamB> oh, well, maybe it is a good idea if you start with a Java program...
18:44:26 <lispy> SamB: they didn't happen to provide a link to an xslt implmentation did they?
18:45:00 <SamB> lispy: don't see it
18:45:06 <SamB> drop them an email?
18:45:25 <SamB> offer to bribe the student for a license ;-)?
18:46:10 <lispy> :)
18:46:36 <lispy> so is HXT preferred over HaXml?
18:46:47 <lispy> it looks like HaXml was updated more recently but isn't as mature
18:51:22 <lispy> "The most important and useful filter combinator is `o`. We call this operator Irish composition, for reasons which should be obvious."
18:51:26 <lispy> am i just dense?
18:51:36 <lispy> i have no idea why you would call something an Irish composition
18:51:42 <SamB> haha
18:51:47 <SamB> me either
18:52:16 * lispy makes notes on how not to write documentation :)
18:53:56 <lispy> "The equivalent to Unix pipes it the "Irish composition" combinator, represented by the infix operator "o". This combinator applies one filter to the results of another one. This is similar to a pipe, which passes the output of one program as the input to another one."
18:54:19 <SamB> about the same as >>>, I gather
18:54:25 <lispy> i still have no idea why they took that name, but i think i get it
18:54:30 <SamB> I think HXT is just too promiscuous
18:54:35 <lispy> i would have said >>= just because i don't think in arrows :)
18:54:39 <SamB> too many exported names
18:55:05 <SamB> well, I'm comparing it to the HXT Arrow interface
18:55:12 * lispy nods
18:55:15 <SamB> because that is the best one I know of ;-)
18:55:32 <lispy> hmm...you're going to force me to try HXT aren't you? ;)
18:55:37 <SamB> though being in the IO monad is a bit odd for an XML combinator arrow
19:02:55 <dons> LordBrain: i was just thinking that we do need such a tutorial
19:03:26 <dons> LordBrain: I also found From "Writing Programs with NCURSES", by Eric S. Raymond and Zeyd M. Ben-Halim useful
19:03:44 <dons> and feel free to look a hmp3 or yi for more curses examples
19:05:23 <LordBrain> ok
19:05:37 <dons> sjanssen: following the sequence class discussion on the ml?
19:05:42 <LordBrain> i might just start it on the wiki...
19:05:43 <dons> ?where hmp3
19:05:44 <lambdabot> http://www.cse.unsw.edu.au/~dons/hmp3.html
19:05:54 <LordBrain> i think i saw a page on practical haskell that can link to it
19:06:04 <dons> yep.
19:06:26 <LordBrain> but perhaps the tutorial, or some version of it,  should come with the hscurses package eventually.
19:07:09 <dons> sure.
19:07:17 <dons> just mail stefan. he'd be very interested, I'm sure
19:08:15 <monochrom> I have used HXT arrows without IO.
19:09:28 <lispy> LordBrain: you're learning ncurses with haskell?
19:09:46 <lispy> LordBrain: did you see that Stefan's implementation has an example program?
19:09:55 <lispy> LordBrain: i was reading through it a bit yestarday
19:10:07 <sjanssen> dons: yeah, I have been
19:11:25 <sjanssen> @where edison
19:11:26 <lambdabot> http://www.eecs.tufts.edu/~rdocki01/edison.html
19:15:44 <LordBrain> lispy: which example are you referring to?
19:15:54 <LordBrain> i'm reading ContactsManager
19:16:56 <LordBrain> ContactsManager.hs which indeed was written by Stefan Wehr
19:17:15 <LordBrain> i have my own annotated copy.
19:17:44 <lispy> LordBrain: dat's the one
19:17:47 <LordBrain> i'm learning some haskell too as i go... since i'm still fairly new to it.
19:18:03 <LordBrain> so i'm probably the ideal kind of tutorial writer..
19:18:52 <SamB> dons's implementation has *two* example programs
19:19:06 <SamB> though they are primarily applications rather than examples...
19:19:24 <lispy> LordBrain: i feel like i'm starting to know "haskell" pretty good, but when i looked at Stefan's code i realized i had a lot of patterns and styles to learn still :)
19:19:25 <SamB> oh, and the curses library is more a part of them than they are of it
19:19:41 <LordBrain> yeah :) i learned StateT
19:19:58 <LordBrain> that's probably a common idiom
19:20:05 <SamB> for me it is
19:20:17 <lispy> is there a tutorial about it?
19:20:24 <SamB> I use it probably every other program
19:20:32 <lispy> if not, that's a good tutorial for someone to write :)
19:20:32 <dons> everyone wants tutorials for everything!
19:20:39 <LordBrain> hehehe
19:20:42 <dons> should we have tutorials for everything?
19:20:47 <dons> do they do this in perl or python?
19:20:48 <SamB> why does StateT need a tutorial?
19:20:52 <dons> (I'm serious)
19:20:52 <lispy> dons: yeah, they cut down on the "getting your foot in the door" time :)
19:20:57 <SamB> couldn't you just look a the wiki page?
19:21:02 <SamB> @wiki StateT
19:21:03 <lambdabot> http://www.haskell.org/haskellwiki/StateT
19:21:19 <SamB> nothing there?
19:21:29 <lispy> ah, in my mind a decent wiki page can server as a great tutorial
19:21:30 <SamB> @oldwiki StateT
19:21:31 <lambdabot> http://www.haskell.org/hawiki/StateT
19:21:50 <SamB> oh
19:22:03 <dons> maybe we need a wiki page of tutorials that should exist
19:22:05 <lispy> basically, a tutorial is some directed examples to help you get a feel for it...you read it while you brush up on the concepts or theory
19:22:07 <LordBrain> i made a firefox plugin for searching the wiki
19:22:14 <SamB> not a page
19:22:24 <dons> LordBrain: can you make a lambdabot plugin for searching the wiki?
19:22:30 <dons> ?help todo
19:22:31 <lambdabot> todo. List todo entries
19:22:45 <LordBrain> what did SamB just use, if there is no such plugin?
19:22:46 <SamB> @oldwiki MonadState
19:22:47 <lambdabot> http://www.haskell.org/hawiki/MonadState
19:22:58 <dons> ?todo-add Tutorial for hscurses/curses
19:22:59 <lambdabot> Entry added to the todo list
19:23:03 <dons> any others?
19:23:12 <lispy> @wiki yeah_but_it's_not very smart
19:23:13 <lambdabot> http://www.haskell.org/haskellwiki/yeah_but_it's_not very smart
19:23:20 <SamB> StateT is just the T version of State
19:23:32 <SamB> @todo
19:23:33 <lambdabot> 0. SamB: A way to get multiple results from a google search
19:23:33 <lambdabot> 1. SamB: @get-shapr summons shapr instantly
19:23:33 <lambdabot> 2. SamB: stop mangling long urls
19:23:33 <lambdabot> 3. dons: improve formatting of @dict
19:23:33 <lambdabot> 4. dons: write Haskell Manifesto
19:23:35 <lambdabot> [20 @more lines]
19:23:38 <dons> ?gwiki yeah_but_it's_not very smart
19:23:40 <lambdabot> No Result Found.
19:23:44 <dons> ?gwiki StateT
19:23:46 <lambdabot> No Result Found.
19:23:50 <SamB> @get-shapr
19:23:51 <lambdabot> shapr!!
19:23:52 <SamB> well.
19:23:55 <dons> but google doesn't index our wiki very well for some reason
19:24:01 <dons> ?gwiki lambda
19:24:03 <lambdabot> No Result Found.
19:24:07 <dons> stoopid
19:24:16 <LordBrain> oh
19:24:16 <SamB> I think I need to be a lambdabot admin so I can clear off my old todo entries
19:24:29 <dons> SamB, ok
19:24:40 <lispy> dons: how's the manifesto coming? ;)
19:24:43 <dons> ?todo-del 1
19:24:44 <lambdabot> Removed: @get-shapr summons shapr instantly
19:24:53 <dons> ?todo
19:24:54 <lambdabot> 0. SamB: A way to get multiple results from a google search
19:24:54 <lambdabot> 1. SamB: stop mangling long urls
19:24:54 <lambdabot> 2. dons: improve formatting of @dict
19:24:54 <lambdabot> 3. dons: write Haskell Manifesto
19:24:54 <lambdabot> 4. lispy: don't let lambdabot's prettyprinter split the sequence @foo across lines
19:24:54 <LordBrain> well, there is really no programming involved in firefox search plugins, they are just xml files which tell firefox how to interface with the search page provided on the web
19:24:56 <lambdabot> [19 @more lines]
19:24:57 <lispy> um...but it doesn't summon him instantly
19:25:01 <dons> ?todo-del 1
19:25:02 <lambdabot> Removed: stop mangling long urls
19:25:08 <SamB> lispy: does the best it can!
19:25:17 <LordBrain> lamdabot could do the same thing tho
19:25:20 <lispy> oh, hey i have a tod
19:25:20 <LordBrain> hmmm
19:25:28 <lispy> er todo, and i didn't know it
19:25:29 <SamB> I don't think shapr has CTCP ANNOY support
19:25:36 <lispy> :)
19:25:42 <dons> heh
19:25:58 <LordBrain> you know what... i could write a lamdabot plugin that actually can use any firefox plugin.
19:26:09 <dons> ihope: you posted a driftless clock. cool!
19:26:17 <SamB> LordBrain: really?
19:26:35 <dons> ihope, maybe you should stick it on the haskell wiki under our examples or idioms category?
19:26:35 <SamB> LordBrain: do you have access to an XPCOM interfacing tool of some kind?
19:26:47 <dons> @tell ihope you should stick your driftless clock on the haskell.org wiki
19:26:48 <LordBrain> no
19:26:48 <lambdabot> Consider it noted.
19:27:19 <SamB> does lambabot still mangle long URLs?
19:27:31 <dons> oh, i thought not
19:27:32 <dons> maybe i'm wrong
19:27:33 <LordBrain> the firefox plugins are just xml files which tell firefox how to interact with search pages which are usually php cgi's or some such... but any cgi will do.
19:28:00 <SamB> dons: thought not which?
19:28:08 <LordBrain> all we would need is for lambdabot to understand firefox's xml search plugin langauge
19:28:10 <SamB> LordBrain: oh, the search plugins
19:28:14 <LordBrain> yeah
19:28:20 <SamB> knock yourself out with the search plugin ;-)
19:28:31 <lispy> i thought fora minute you meant all firefox plugins :)
19:28:50 <SamB> I officially think whatever you do to the search plugin will probably be an improvement ;-)
19:28:52 <dons> so who is going to write the firefox plugin binding to lambdabot ;)
19:29:00 <SamB> dons: its just for search
19:29:03 <LordBrain> yeah.. thats more of an undertaking.. but i suppose it is doable... but i'm not that ambitious yet.
19:29:06 <dons> so we can transparently use all firefox plugins :P
19:29:19 <SamB> dons: but we don't have the firefox UI
19:29:21 <dons> SamB I know. search isn't so good atm
19:29:29 <dons> ui schmooey
19:29:45 <SamB> well, the firefox plugins generally extend the UI in some way
19:29:46 <SamB> if small
19:30:02 <LordBrain> yeah.. doenst seem worth the effort
19:30:05 <lispy> why doesn't lambdabot allow me to check my gmail? ;)
19:30:07 <SamB> some do the opposite
19:30:10 <LordBrain> lol
19:30:28 <SamB> lispy: because checking your email is not a public activity
19:30:31 <lispy> @gmail lispy ==> you have 2 messages
19:30:31 <lambdabot> Unknown command, try @list
19:30:51 <lispy> SamB: we could start a new area in social computing ;)
19:30:53 <dons> i'm sure people would love lambdabot logging into gmail from my box, as them
19:31:02 <lispy> dons: yeah!
19:31:10 <SamB> if you want everyone in #haskell to know when you check mail and whether you have new messages... then maybe you'd like a gmail plugin...
19:31:17 <dons> heh
19:31:32 <lispy> you guys should help me sort through all my spam :)
19:32:00 <SamB> if you think we won't kickban you for subjecting us to that...
19:32:12 <LordBrain> lol
19:32:16 <lispy> lol, you know i've been kidding right?
19:32:21 <SamB> yes ;-)
19:32:25 <SamB> I like to play along ;-)
19:32:32 <lispy> okay good
19:32:49 <lispy> one thing that could be interesting is a way to get lambdabot to monitor darcs repos
19:33:02 <lispy> i think vincenz was working on something like that for #oasis
19:33:12 <LordBrain> yeah
19:33:16 <LordBrain> that would be nice
19:33:29 <dons> ?remember JohnMeacham I liken learning haskell to tipping over a vending machine. you can't just push it, you gotta rock it back and forth a few times building up momentum until bam! suddenly the flash of insight hits and it all makes sense.
19:33:29 <lambdabot> Done.
19:33:36 <dons> and presumably the candy falls out
19:33:48 <lispy> lol
19:33:54 <SamB> haha
19:34:13 <SamB> but then you gotta do it again... and again... and again!
19:34:40 <lispy> i wonder what psychologists have to say about that sort of "sudden understanding" i'd like to find out if they have an explanation
19:35:01 <SamB> eureka!
19:35:13 <lispy> you foundit?
19:35:16 <SamB> oh wait, that is an exclamation, not an explanation
19:36:00 <sjanssen> @keal
19:36:00 <lambdabot> nsa try kill me numerous times
19:36:35 <lispy> http://www.alleydog.com/glossary/definition.cfm?term=Insight
19:36:37 <lambdabot> Title: Psychology Glossary. Definitions to psychology terms written in English, not psy ...
19:36:42 <lispy> they call it "insight" apparently
19:36:50 <SamB> probably they say "well, I've bumped my head against this a few times before, and this time I finally got it"
19:38:04 <lispy> googling psychology insight isn't the most helpful :(
19:39:18 <SamB> perhaps psychologists are not very insightful
19:40:15 <lispy> http://en.wikipedia.org/wiki/Insight_phenomenology
19:40:20 <lispy> SamB: likely
19:40:24 <Korollary> It sounds like the threshold energy in chemistry, or cyclotrons.
19:40:30 <LordBrain> dons: i dont know.. i feel like i got a bam right away almost in terms of understanding what others wrote... but now i'm rocking it back and forth to get more the hang of writing my own programs.
19:41:30 <dons> :)
19:41:32 <LordBrain> its like math in that way, it seems obvious when someone else is demonstrating.
19:41:46 <SamB> well
19:42:02 <SamB> its a bit like writing ;-)
19:42:15 <SamB> you have to figure out what you are trying to say and how best to say it ;-)
19:42:22 <LordBrain> yeah
19:42:28 <lispy> yeah, start out with an outline or general prose and keep working it until it's nice?
19:42:51 <dons> it is a bit like writing prose, isn't it.
19:42:57 <dons> sometimes
19:43:09 <SamB> if by "an outline" you mean "some nice types"
19:43:15 <lispy> which always reminds me of this quote: http://www.brainyquote.com/quotes/quotes/g/genefowler170073.html
19:43:16 <lambdabot> Title: Gene Fowler Quotes
19:43:30 <lispy> Writing is easy. All you do is sit staring at a blank sheet of paper until the drops of blood form on your forehead.
19:44:45 <SamB> oh, I like this:
19:44:50 <SamB> The best way to become a successful writer is to read good writing, remember it, and then forget where you remember it from.
19:45:24 <lispy> is that a twain quote?
19:45:44 <emertens> @hoogle heads
19:45:45 <dons> see you don't even have to forget if you write source code. you just have to check the license
19:45:45 <lambdabot> No matches found
19:45:47 <Korollary> Ann Coulter
19:45:57 <emertens> @hoogle [a]->[[a]]
19:45:58 <lambdabot> List.inits :: [a] -> [[a]]
19:45:58 <lambdabot> List.tails :: [a] -> [[a]]
19:45:58 <lambdabot> List.group :: Eq a => [a] -> [[a]]
19:46:05 <dons> good lambdabot
19:46:08 <SamB> emertens: there is only one head ;-)
19:46:22 <dons> lists are not medusas
19:46:27 <SamB> you probably meant inits ;-)
19:46:29 <LordBrain> i wrote a little bouncing ball program which used lazy evaluation iterating over an infinite list... and I have a feeling one of the concepts i could have used  but didnt have yet was StateT.
19:46:48 <SamB> hmm?
19:46:55 <lispy> LordBrain: of the wxhaskell bouncing ball program?
19:46:56 <SamB> I dunno if that works
19:47:07 <lispy> LordBrain: i think i read the source code and thought that was pretty cool
19:47:20 <LordBrain> no.. thats not mine... i dont know wxhaskell
19:47:48 <lispy> LordBrain: ah, then you suck ;)
19:47:57 <lispy> just teasing of course..
19:48:14 <lispy> i should get dinner
19:48:21 <LordBrain> well this was just one of my first haskell programs... i guess i could post it.
19:48:27 <dons> go for it
19:48:38 <dons> we'll offer some advice, perhaps
19:48:40 <SamB_XP> a bouncing-ball program with a lazy list sounds neat ;-)
19:48:50 <dons> it does. sound nice and elegant
19:48:55 <dons> tutorial-worthy!
19:49:34 <SamB_XP> I suppose it is most likely not an abuse of Show?
19:49:56 <dons> heh
19:50:01 <dons> that would be fun
19:50:39 <lisppaste2> LordBrain pasted "Bouncing Ball" at http://paste.lisp.org/display/23444
19:51:10 <SamB> hmm I wonder if my idiot solver will find a solution by morning?
19:51:24 <SamB> 19083 naesten   30   5  4312 2604 2056 R 81.8  1.0 270:04.62 advent
19:51:36 <SamB> still at 4312 for VIRT
19:52:10 <dons> that's very nice LordBrain.
19:52:15 <SamB> > 270/60
19:52:17 <lambdabot>  4.5
19:52:21 <dons> I can't fault it.
19:52:36 <LordBrain> wow, thanks :)
19:53:01 <SamB> it might look nicer if lisppaste had syntax highlighting ;-)
19:53:22 <dons> maybe you could abstract it somehow. add some ball combinators
19:53:33 <dons> rather than explicit putStrLns. but that'd just be sugar
19:53:40 <SamB> I bet you could write some nice combinators in there...
19:53:48 <SamB> but it would still not look as nice as it ought.
19:54:02 <SamB> because you can't just give a diagram of the desired output
19:54:14 <dons> yeah
19:54:18 <dons> or can you....
19:54:20 <SamB> which is a bit sad...
19:54:24 <SamB> dons: not yet you can't!
19:54:31 * dons thinks of the 2-d language puzzle in the icfp contest
19:54:41 <SamB> heh
19:54:50 <SamB> that doesn't involve a diagram of the output
19:54:58 <LordBrain> i found in hugs it runs out of ram using this purely functional approach
19:54:58 <SamB> that involves a stupid diagram of the algorithm
19:55:22 <dons> LordBrain: probably a space leak somewhere?
19:55:32 <dons> ghc might spot it and optimise it away
19:56:26 <LordBrain> i am not sure this is write, but after reading Stefan's ContactsManager example, i'm thinking i could use StateT and MonadIO to try to get some kind of consistent interface between a functional and truely stateful approach.
19:57:08 <SamB> I mainly use MonadIO for doing IO from interpreters ;-)
19:57:42 <SamB> apparantly I like to write interpreters
20:00:04 * vincenz does the mambo
20:00:10 <vincenz> bored
20:00:18 <LordBrain> if there is a space leak i'd be interested in having that pointed out
20:00:20 <vincenz> dons: what other langs do you code besides haskell?
20:00:43 <SamB_XP> LordBrain: heh
20:00:50 <SamB_XP> those are tricky to spot
20:01:15 <dons> sh, C, perl (not so much anymore)
20:02:05 * SamB_XP codes in Haskell, C and Python
20:02:26 <dons> vincenz: did you get my .css working?
20:02:28 * SamB_XP has hacked the evil mangler a bit for his own twisted ends, though
20:02:33 <dons> yeah?
20:02:36 <LordBrain> i've tried almost every language i've ever heard of
20:02:37 <dons> what twisted ends?
20:02:53 <dons> LordBrain: sure. but what do you actually write regular code in?
20:02:55 <LordBrain> and by tried, that means i did at least a basic tutorial and one program..
20:02:55 <SamB_XP> oh, just getting objdump to disassemble the code and hexdump the data
20:03:31 <LordBrain> dons, well i'd say it used to be c++ was my main language, but i havent used it in a long time now, except to fix a bug or something in someone elses code.
20:03:34 <SamB_XP> I've since most likely lost the changes, but I could do it again if anyone cared
20:03:35 * lispy used to use a lot more lisp
20:03:52 <SamB_XP> it wasn't as evil as everyone made out
20:04:01 <dons> SamB: heh
20:04:01 <SamB_XP> was almost disappointed
20:04:02 <lispy> at work  i tend to code in VB.NET, C++, python and recently i've been sneaking in haskell
20:04:07 <LordBrain> i did python for a good period of time
20:04:46 <lispy> at work i've been exposed to Fortran and R but i don't really use those other than as one time things
20:04:50 <LordBrain> python is very easy to learn tho it seems to me... if you know something like c++
20:05:04 <SamB_XP> python like C++?
20:05:10 <LordBrain> no
20:05:14 <SamB_XP> oh good
20:05:15 <LordBrain> but if you know c++ and oo design
20:05:30 <SamB_XP> C++ has something to do with OO design ;-)?
20:05:31 <LordBrain> python is pretty simple in comparison
20:05:35 <dons> lispy: how's your move to push haskell into your work been going?
20:05:41 <dons> anyone else writing haskell now at your work?
20:05:46 <dons> or just secret lispy tools
20:05:58 <LordBrain> i know syntaxNinja uses haskell at work
20:06:15 <lispy> dons: my manager said at my performance review, "I trust your technical skills.  You're welcome to explore tools/technologies to solve problems and implement things"
20:06:20 <Pseudonym> Note: If you know C++ _and_ OO design.
20:06:25 <dons> lispy: cool.
20:06:28 <lispy> dons: no one else knows haskell
20:07:10 <lispy> if they ask me about it i'm happy to tell them how cool it is, but i try not to push it on them :)
20:07:35 <LordBrain> i never tried smalltalk
20:08:16 <lispy> it's really nice that haskell has good performance and compiles to machine code
20:08:16 <LordBrain> i've always been a little dissapointed with java... maybe they set me up that way because of all the hype.
20:08:24 <dons> i'm interested in writing more Isabelle. maybe some epigram
20:08:47 <lispy> this allows me to sneak in dlls that were written in haskell
20:08:53 <dons> ah!
20:08:59 <dons> nice idea, lispy
20:09:10 <LordBrain> yeah
20:09:15 <dons> lambdas by stealth
20:09:32 <dons> maybe we need a tutorial on "How to convert your workplace to be lambda friendly"
20:09:36 <dons> in 24 hours
20:09:37 <lispy> heh, haskell dlls: lambdas in stealth mode
20:09:40 <dons> for dummys
20:09:44 <lispy> lol
20:10:11 <SamB_XP> dummies actually don't understand how to program
20:10:21 <SamB_XP> they certainly don't like Haskell
20:10:52 <LordBrain> i was just thinking back to conio, it uses a sort of if key_waiting then readkey type approach i think which is incompatible with ncurses. you'd need a buffer set up in a separate thread... a nice little coniolib written in haskell wouldnt have a problem giving that.
20:11:07 <Dreadshoot> isnt that why they pick haskell.. they cant handle the power of c++
20:11:24 <dons> LordBrain: well, you can have a read thread sending chars over a Chan
20:11:33 <SamB_XP> well, true, C++ is awfull complicated
20:11:46 <dons> that's how you'd get your buffer and threads.
20:11:51 <dons> LordBrain: I use this model in yi and hmp3
20:11:51 <lispy> joking aside, it seems that corporate support of a language makes a huge difference for a lot of industry types
20:11:59 <LordBrain> cons yeah... i say it would be nice in haskell because threads are not a big deal..
20:12:02 <LordBrain> dons
20:12:14 <dons> ah i see
20:12:25 <Korollary> In the industry, language choice is almost not a technical matter at all.
20:12:29 <Dreadshoot> lispy: probably does
20:12:36 <Dreadshoot> its a factor at least
20:13:05 <LordBrain> in C.. its yucky.. every conio program becomes 2 processes instead of 1 on your machine... which would be annoying..
20:13:25 <dons> LordBrain: oh, actually, I read my keys in the main thread in hmp3
20:13:32 <lispy> looking at our C++ code at work,  see so many things that are completely new to me...often i find out they're not truly C++ but MS specific
20:13:32 <dons> run = forever $ sequence_ . keymap =<< getKeys
20:13:32 <dons>   where
20:13:32 <dons>     getKeys = unsafeInterleaveIO $ do
20:13:32 <dons>             c  <- UI.getKey
20:13:32 <dons>             cs <- getKeys
20:13:33 <Dreadshoot> well dont use conio then
20:13:34 <dons>             return (c:cs) -- A lazy list of curses keys
20:14:15 <LordBrain> Dreadshoot: i'm talking if you're emulating conio on ncurses, to port old dos programs say... if i remember right there is some technical issue like this.
20:14:47 <SamB_XP> dons: how does that work?
20:14:48 <lispy> so with ncurses do you endup doing event dispatch?
20:15:06 <SamB_XP> dons: don't you need to update the time display too?
20:15:14 <lispy> i sort of got the impression ncurses was basically mvc for console appls
20:15:15 <LordBrain> lispy, thats why you have to learn from the ansii standard
20:15:25 <SamB_XP> lispy: hahaha
20:15:32 <dons> SamB_XP: there's threads controlling each part of the display
20:15:35 <SamB_XP> lispy: would maybe be nice
20:15:50 <SamB_XP> dons: is that legal?
20:15:56 * lispy blushes
20:15:59 <SamB_XP> I mean, is curses rated for that?
20:15:59 <dons> sure?
20:16:00 <lispy> i was being serious :)
20:16:07 <SamB_XP> lispy: I know
20:16:13 <dons> you can call curses any time you want
20:16:23 <LordBrain> lispy: mvc = MSVC ?
20:16:25 <Dreadshoot> as long as you dont curse here ;)
20:16:26 <dons> esp. if the state is locked anyway..
20:16:27 <SamB_XP> lispy: I still think it is funny that you managed to get that idea
20:16:43 <SamB_XP> lispy: though it would be kinda cool
20:16:49 <lispy> LordBrain: mvc = model-view-controller, an OO technique for GUI design (and some other applicatinos, but mostly gui)
20:17:15 <LordBrain> oh
20:17:16 <LordBrain> yeah i know it
20:17:23 <dons> SamB, e.g. this runs,
20:17:24 <dons> clockLoop = forever $ threadDelay delay >> UI.refreshClock
20:17:24 <dons>   where
20:17:25 <dons>     delay = 500 * 1000
20:17:51 <LordBrain> no, ncurses is not object oriented.. at least not in its inception.. now it has widgets which are like objects..
20:18:22 <LordBrain> curses predates the OO Craze.
20:18:44 <SamB_XP> widgets?
20:19:01 <lispy> yeah
20:19:05 * SamB_XP tries to keep away from such odd things
20:19:33 <SamB_XP> (usually they are wierd extensions that integrate poorly with the rest)
20:19:52 <lispy> SamB_XP: fer instance: http://www.tldp.org/HOWTO/NCURSES-Programming-HOWTO/tools.html
20:21:55 <LordBrain> dons: i take it forever makes the thread for you?
20:22:06 <dons> nope. it just loops its argument
20:22:10 <LordBrain> oh
20:22:15 <dons> then you call forkIO clockLoop in main
20:22:28 <LordBrain> i see
20:22:41 <dons> here, http://www.cse.unsw.edu.au/~dons/code/hmp3/Core.hs
20:27:55 <lispy> i wonder if i could write a haskell program to periodically update my google talk status message so it would do annoying marquees and such
20:28:24 <lispy> i bet i'd just need a jabber library
20:28:51 <dons> afternoon foxy
20:30:31 <LordBrain> dons i bookmarked that for later reading
20:30:43 <lispy> oh hm...someone wrote cl-xmpp under the MIT license...i bet i could port that
20:41:15 <Korollary> yo mathewm
20:44:04 <mathewm> hello
20:53:43 <vincenz> dons: yep perfectly
20:54:02 <vincenz> dons: so which languages do you use?
20:54:46 <dons> hmm? for what?
20:54:51 <dons> got a url?
20:55:02 <vincenz> dons: it's not online yet, gotta fill it with content
20:55:05 <vincenz> dons: for coding
20:55:14 <dons> i thought i responded earlier..
20:55:30 <vincenz> ah missed it
20:55:36 <dons> ~[6~[6~12:59  dons:: sh, C, perl (not so much anymore)
20:56:00 <LordBrain> dons: maybe, if you think its a good idea, i'll start the hscurses tutorial from my bouncing ball program... show how to convert it into a curses version... then go on to Stefan's ContactsManager example..
20:56:08 <vincenz> dons: no ruby/python? scheme?
20:56:08 <dons> yeah, good idea
20:56:39 <dons> nope. haskell for all that stuff, sh,sed,perl for small scripts. C for C
20:56:55 <vincenz> I found scheme is neat cause you can make new semantics without having to make an AST, use scheme as the AST :)
20:57:02 <vincenz> not that I've coded in it yet, but that appeals to me
20:58:42 * vincenz gives a ++ for his C
20:58:49 <vincenz> > "C" ++ "++"
20:58:50 <lambdabot>  "C++"
20:58:51 * vincenz grins
20:59:03 <zarvok> haha, that was terrible
20:59:09 <dons> truly terrible
20:59:14 * vincenz actually orded oleg's reasoned schemer
20:59:23 <dons> oleg's??
20:59:29 <vincenz> erm yeah
20:59:31 <vincenz> oleg and some other guy
20:59:36 <dons> Oleg K?
20:59:36 <vincenz> tho amazon doesn't list oleg as author
20:59:38 <vincenz> yep
20:59:39 <emertens> I've got a copy of The Reasoned Schemer too
20:59:42 <dons> wrote a book?
20:59:43 <vincenz> emertens: is it good?
20:59:50 <dons> Oleg K wrote a book?
20:59:52 <vincenz> dons: he implemented a prolog like system in scheme
20:59:54 <emertens> interesting at least
20:59:54 <vincenz> it's called "kanren"
21:00:00 <vincenz> this book talks about it
21:00:02 <emertens> Oleg Kiselyov is on the cover
21:00:03 <dons> huh. I didn't know that.
21:00:07 <dons> on the cover!!
21:00:10 <vincenz> dons: it's even on LtU!
21:00:11 <emertens> at least his name is
21:00:13 <dons> hmm
21:00:17 <dons> there you go.
21:00:31 <dons> the multifaceted Oleg K
21:00:35 <vincenz> dons: but that's a reason that scheme is starting to appeal to me....
21:00:55 <vincenz> dons: the ability to define new semantics in it easily (like java+beta class based system, a prolog like sytem, etc etc)
21:03:28 <lispy> vincenz: i bet a lot of those things are easy to define in haskell tho too?
21:03:46 <vincenz> not really
21:03:54 <vincenz> not easily at least
21:04:05 <vincenz> the easiest way to go is just to define a lexer/parser with an AST and interpreter
21:04:31 <lispy> yeah i guess with lisp you're basically working with the ast when you use macros
21:04:36 * vincenz nods
21:04:51 <lispy> but...surely template haskell allows this sort of work?
21:04:53 <monochrom> Scheme = The Extensible Markup Language of the past.
21:05:07 <vincenz> monochrom: why of the past?
21:05:20 <vincenz> lispy: I doubt you can redefine "syntax" taht easily (then again, what is syntax in scheme...)
21:05:20 <dons> there's this new thing called XML, vincenz :)
21:05:25 <dons> I think is what monochrom is suggesting
21:05:28 <zarvok> heh
21:05:28 * vincenz smacks dons upside the head
21:05:46 <vincenz> XML
21:05:53 * vincenz hates XLM
21:06:46 <monochrom> You should smack me, if you are to smack.
21:06:51 <vincenz> XML is so incredibly hyped up, and people believe it to be this formal thing when all it really is is conventions for naming
21:06:54 <lispy> yeah, XLM is terrible...it's like how dare you misspell a 3 letter acronym :)
21:07:41 <monochrom> XML could be given a semantics through XLM.
21:07:54 <vincenz> eXtremely Lame Model?
21:08:02 <lispy> extensible language model?
21:08:03 <monochrom> Extensible Language Markup. :)
21:08:17 <SamB_XP> I thought XML was just some HTML-style S-expression standard
21:08:20 <dons> Error-prone lousy mush?
21:08:28 <vincenz> dons: you're pro xml?
21:08:35 <lispy> SamB_XP: yeah!
21:08:39 * dons doesn't do anything with xml
21:08:46 <lispy> SamB_XP: except without the TM status
21:08:54 <SamB_XP> TM status?
21:08:59 <lispy> turing machine...
21:09:02 <SamB_XP> oh
21:09:03 * vincenz whews and rebelieves in dons
21:09:08 <vincenz> dons: you nearrly lost a faithful
21:09:17 <SamB_XP> S-expressions are turing complete now?
21:09:24 <SamB_XP> as a concept?
21:09:26 <lispy> well, when they represent lisp
21:09:35 <monochrom> Yes, XML is some HTML-style way of doing what S-expressions do.  Thus my comment.  Also I am not the originator of this view.  I credit Greg Wilson for noting this.
21:10:02 <monochrom> There are also other people who saw it.
21:10:08 <SamB_XP> XML isn't a naming convention, it is a syntax convention...
21:10:09 <vincenz> monochrom: sure, and so is binary
21:10:24 <SamB_XP> vincenz: noooooo
21:10:25 <vincenz> SamB_XP: I mean that any "xml-document" is only formalized by aggreed upon convetions of tagging
21:10:32 <SamB_XP> binary is not s-expressions
21:10:36 <lispy> no, xml is just a way of storing trees
21:10:39 <vincenz> SamB_XP: says who?
21:10:45 <SamB_XP> vincenz: says me
21:10:50 <lispy> what about binary xml?
21:10:51 <vincenz> lispy: in a very inefficient and unreadable way, sure
21:10:55 <vincenz> lispy: but use YAML
21:10:57 <SamB_XP> binary XML yes
21:11:09 <SamB_XP> binary could actually be a gzipped text file
21:11:16 <SamB_XP> that isn't much like an s-expression now is it?
21:11:42 <lispy> or it could be a gzipped gzipped text file!
21:11:46 <vincenz> look if you're gonna compare two things purely based on syntax
21:11:50 <vincenz> then I could say haskell is a lot like c
21:11:56 <vincenz> they both have {} and ;
21:13:04 <vincenz> and if then else *raises his eyebrows suggestively*
21:13:16 <monochrom> I think some of you were sidetracked by your hostility to XML when you read my comment.  My comment does not praise XML.
21:14:03 <SamB_XP> I think XML is nice because it prevents squabling about who's S-expression syntax to use ;-)
21:14:43 <SamB_XP> oh, and lots of languages have libraries for it
21:14:47 <vincenz> my point about XML is simple, it's overhyped to be a formal model while all it is is agreed upon conventions for tagging "that node should be 'item
21:14:53 <vincenz> and be part of 'category'
21:14:57 <vincenz> with field 'name'
21:15:06 <SamB_XP> it ought to have a formal model
21:15:10 <emertens> XML seems very appropriate for something like Glade
21:15:10 <SamB_XP> it would be so easy
21:15:22 <vincenz> emertens: I prefer YAML then, which is just as conventional and much easier to read
21:15:39 <SamB_XP> but then some people want the names of their prefixes preserved, which makes it trickier...
21:16:11 <vincenz> but I'll stop my rant :D
21:16:25 <vincenz> back to the original point, I think scheme's an interesting language for what I mentioned priorly
21:16:44 <vincenz> just haven't been able to use it except for icfpc 2003
21:17:59 <zarvok> should have written Scheme goggles into adventure
21:18:13 <emertens> man... you let your girlfriend buy the groceries, she spends 100$, and there's not a thing to eat
21:18:17 <monochrom> XML is a syntax syntax and no semantics. That's correct.  That is why I say S-expressions are XML of the past.  S-expressions are a syntax syntax and no semantics.  You may plug in the Scheme semantics, but even then you can modify it.
21:19:21 <SamB_XP> emertens: what does she buy?
21:19:59 <emertens> stuff for dinners... lunches...
21:20:07 <emertens> breakfast, cereal... cereal sounds good
21:20:10 <emertens> thanks :)
21:24:56 <cayl> good night
21:25:47 <vincenz> zarvok: there were scheme goggles
21:26:01 <zarvok> there were?
21:26:06 <vincenz> erm yes?
21:26:07 <zarvok> christ, I should pay more attention
21:26:12 * zarvok didn't write adventure
21:26:18 <zarvok> or play most of it, for that matter
21:26:33 <zarvok> 2d, blackknots and balance were mine
21:26:38 <vincenz> Any news on the release?
21:26:40 <zarvok> and I played advise
21:26:53 <vincenz> zarvok: what was your intended solving strategy for them?
21:27:09 <zarvok> ah, yeah, we're going to release under a permissive open source license during or immediately after ICFP
21:27:30 <Dreadshoot> who won icfp?
21:27:39 <zarvok> a mystery until the conference
21:27:43 <Dreadshoot> ok
21:27:50 <vincenz> they like carrot baiting people at cmu
21:27:51 * vincenz grins
21:27:55 <zarvok> heh
21:27:58 <vincenz> :P
21:27:59 <zarvok> well, it's tradition
21:28:11 <zarvok> as for solving strategy
21:28:24 <zarvok> in 2d, we expected people to do rev and mult by hand
21:28:31 <zarvok> and write a compiler for raytrace
21:28:35 * vincenz nods
21:28:41 <vincenz> check
21:29:36 <zarvok> as for blackknots, obviously, all the puzzles are solvable by a polymorphic time algorithm
21:29:39 <zarvok> although it's not general
21:29:46 <vincenz> yeah if you knew the algo
21:29:59 <zarvok> sure, but coming up with it is the fun part
21:30:01 <SamB_XP> what do you expect people to do with adventure?
21:30:16 <zarvok> honestly, we're completely baffled that people solved adventure by hand
21:30:19 <zarvok> the later puzzles I mean
21:30:27 <zarvok> we expected people to write solvers
21:30:28 <SamB_XP> I have a big problem with it
21:30:30 <lispy> polymorphic time algorithm?
21:30:31 <vincenz> and balance?
21:30:48 <SamB_XP> it uses too much RAM
21:31:01 <SamB_XP> it was above firefox last time I checked...
21:31:15 <emertens> what problems are you guys discussing?
21:31:22 <lispy> did you mean polynomial?  i only aske because i haven't heard people use polymorphic in that context before but i could think up reasons why it makes sense there
21:31:29 <lispy> emertens: the icfp puzzles
21:31:41 <zarvok> balance we solved some problems by hand and others by writing a program to find ways to permute the registers
21:32:12 <zarvok> obviously there are many ways to solve most of the problems, so we were interested to see what people would do
21:32:20 <SamB> here is my stop127:
21:32:25 <SamB> PHYSICS 1
21:32:25 <SamB> SCIENCE 0
21:32:37 <zarvok> yeah, all the stop puzzles were solvable in two instructions
21:32:45 <SamB> the same two ;-)
21:32:49 <zarvok> yep
21:32:59 <zarvok> discovered this by accident
21:33:11 <SamB> me too ;-)
21:33:12 <vincenz> zarvok: all the stop problems were the same
21:33:19 <zarvok> was testing the certify program and accidentally used stop program on stop127
21:33:23 <zarvok> thought there was a bug at first
21:33:38 <zarvok> so I wrote step_balance to see what was happening :)
21:33:40 <SamB> but then you noticed the modular PC thing?
21:33:59 <zarvok> yeah
21:34:02 <SamB> you mean we would not have had a step_balance if you hadn't done that?
21:34:06 <SamB> that would have sucked so bad
21:34:19 * vincenz nods
21:34:24 <zarvok> heh, it was already a vague thought, but writing simulators and the like has always been a part of the ICFP
21:34:27 <SamB> not that I got my UM done in time for the contest
21:34:47 <zarvok> and it's such a simple language, I don't think it would have been a problem
21:35:13 <SamB> what in the world kind of solver are you supposed to write for adventure
21:35:20 <zarvok> anyway, I'm going to stop talking about this stuff.  We're saving a lot of it for the talk
21:35:26 <zarvok> the talk at ICFP, I mean
21:35:27 <SamB> well, okay, so I could have written a balance implemenation
21:35:33 <SamB> zarvok: so?
21:35:38 <SamB> I'm not going to be there anyway.
21:35:53 <dons> SamB, but we usually relay the icfp talk live to this channel anyway...
21:35:59 <SamB> oh really?
21:36:03 <dons> same with the haskell workshop :)
21:36:10 <SamB> I didn't know you could do that
21:36:10 <dons> well, we did last year and the year before
21:36:13 <SamB> when is it?
21:36:21 <dons> "relay live" == tell you what's going on
21:36:35 <dons> end of sept
21:36:40 <SamB> aww. I thoght you meant STT
21:36:48 <monochrom> That's no fun.
21:36:56 <SamB> which?
21:37:22 <u221e> Wow, subtract and branch if negative is actually turing complete...
21:37:24 <monochrom> "SPJ is giving his talk now.  ....  SPJ has given his talk now."   OK, who needs to be told that?
21:37:26 <dons> well, if someone wants to write a speech-to-irc converter in the next 2 months, i'm sure we could use it
21:37:47 <SamB> monochrom: ah, yeah
21:38:36 <SamB> zarvok: so I can't imagine how to write a proper solver for adventure...
21:38:40 <monochrom> "SPJ bit his tongue during the dessert break."  Now this is what we want to know!
21:39:03 <zarvok> SamB:  A solver for adventure is a very interesting problem, and I'm not going to spoil the fun of talking about it at ICFP :)
21:39:05 <SamB> I've been stumbling along with my idiot non-goal-directed solver
21:39:15 <SamB> zarvok: there should be PAPERS!
21:39:20 <zarvok> heh, there will be
21:39:28 <SamB> if there are not, I will have your hide!
21:39:32 * zarvok is scared
21:39:42 <SamB> hehe
21:40:01 <SamB> what do you know, you actually have a realname
21:40:25 <zarvok> heh, do I have one associated with my IRC nick?
21:40:35 <SamB> nope
21:40:42 <SamB> at least, not necessarily
21:40:46 <vincenz> zarvok: RUN!
21:40:48 <zarvok> hahaha
21:41:04 <zarvok> I'm being google stalked!
21:41:05 * SamB doesn't remember how it works
21:41:10 <monochrom> You are nobody.
21:41:34 <SamB> it comes up when I do the something like /whois
21:41:50 <zarvok> Indeed
21:42:00 <u221e> Are there any other single instruction computer concepts besides subtract and branch if negative?
21:42:02 <monochrom> It is a compliment.
21:42:27 <SamB> the thing I can't figure out with this adventure thing is how you figure out subgoals...
21:42:49 <monochrom> Consider: Nobody knows it all! Nobody is perfect! Nobody can write bugless code! ...
21:42:58 <zarvok> heh
21:43:02 <Korollary> u221e: What do you mean? Like test-bit-and-set?
21:43:37 <SamB> also, what is a "goal"?
21:43:44 <monochrom> I have a great idea for a single-instructor computer.
21:43:52 <SamB> I suppose it had better be a list of parts...
21:43:56 <monochrom> err single-instruction.
21:44:04 <zarvok> Now that ICFP is over my boss has me working on implementing some haskell features for SML.  Should be fun
21:44:28 <monochrom> The one single instruction is this.  Execute the Haskell program stored at address 0 and onwards.
21:44:35 <SamB> hahaha
21:44:37 <Korollary> zarvok: what kind of features?
21:44:45 <SamB> that doesn't sound like an instruction to me...
21:44:46 <zarvok> oh, type classes and monads, to start
21:44:52 <SamB> zarvok: sweet
21:45:02 <zarvok> yeah, I think it's going to be interesting
21:45:07 <SamB> I've heard they were going to add those to some ML or other...
21:45:20 <SamB> are you nominated as "they"?
21:45:20 <zarvok> he wrote a great paper about how to implement type classes as ML modules, so it will be instructive to implement
21:45:47 <monochrom> Yeah, everything you call "CISC" looks like child-play when compared to my single-instruction computer.
21:46:02 <zarvok> heh, well, I think it's more for research than to release to the SML community, but who knows
21:47:01 <vincenz> zarvok: who was that?
21:47:04 <vincenz> zarvok: cause I read the paper
21:47:08 <monochrom> Your boss is chak?
21:47:11 <vincenz> or skimmed it at least
21:47:14 <u221e> Hm, there is also reverse-subtract and skip if borrow
21:47:15 <zarvok> my boss is harper
21:47:16 <SamB> my solver basically creates a tree of all the states it can reach and traverses the tree looking for a state in which it has assembled whatever component you are supposed to assemble in the given puzzle...
21:47:17 <zarvok> same paper
21:47:42 <monochrom> Harper takes nobody as apprentice!
21:47:42 <SamB> of course, I haven't implemented the inventory restrictions...
21:47:56 <zarvok> http://www.cs.cmu.edu/~rwh/papers.htm
21:47:58 <lambdabot> Title: Papers
21:48:02 <zarvok> it's called "modular type classes"
21:48:49 <SamB> for the status LED, I've had it running for
21:49:13 <zarvok> SamB: haha, you can keep telling me about it, but I'm really not going to give a solution
21:49:21 <SamB> 19083 naesten   30   5  4312 2604 2056 R 87.7  1.0 368:41.69 advent
21:49:28 <SamB> yeah I should just bug vincenz
21:49:34 <SamB> he might have something to give me ;-)
21:49:36 <zarvok> :)
21:51:06 <SamB> at one point I had botched the incineration logic (in an effort to get it to only incinerate items immediately after taking them, so as to trim the tree down some), and it incinerated everything and then tried to put it all together ;-)
21:51:43 <SamB> for most of the problems I have commented out the code to try incinerating things and added that in by hand
21:52:04 * zarvok needs to reboot into linux
21:52:07 <zarvok> be back shortly
21:52:10 <SamB> heh
21:52:19 <monochrom> Sounds like "Dies irae, dies illa, solvet seculum in favila"
21:52:33 <SamB> so I hope this comes up with results by morning...
21:54:03 <SamB> it will probably have to get a good part of the way through its depth-first traversal of the tree...
21:54:12 <SamB> I have incinerating everything at the beginning...
21:55:21 <SamB> I wonder why the memory usage on this program hasn't gone up in the...
21:55:41 <SamB> > 368 / 60
21:55:42 <lambdabot>  6.133333333333334
21:55:51 <SamB> well, in hours
21:56:40 <SamB> do lazy depth-first traversals usually use constant memory?
21:57:02 <monochrom> Only as much memory as the current depth.
21:57:16 <SamB> hmm, I suppose it got to the bottom or something...
21:58:04 <SamB> I expect breadth-first would be worse
21:58:44 <SamB> in any case, it wouldn't prefer the solutions that involve incinerating as many things as possible as soon a possible...
21:58:57 <SamB> I better go sleep.
21:59:07 <SamB> I am doing nothing of any use here...
21:59:13 <zarvok> sleep is for the weak
21:59:15 <SamB> not even having fun
21:59:28 <zarvok> heh
21:59:32 <SamB> well, I happen to be one of the weak
21:59:42 <zarvok> it seems we all are
21:59:58 <SamB> it is one of the basic doctrines of my religion ;-)
22:00:04 <zarvok> heh
22:00:12 <SamB> or something like that
22:00:24 * SamB isn't sure he is using the word doctorine correctly
22:00:28 <SamB> er.
22:00:30 <SamB> or spelling.
22:00:39 <SamB> anyway, to bed!
22:00:42 <zarvok> night
22:01:16 <vincenz> zarvok: wait, what were you now then?
22:01:35 <zarvok> hmm?
22:03:34 <vincenz> zarvok: you said you were booting to linux
22:03:44 <zarvok> vincenz: yeah, I was in windows to play poker
22:03:44 <zarvok> :)
22:03:51 * vincenz blinks
22:04:19 * zarvok applies his math skills to take peoples money on the internet
22:05:07 <vincenz> :D
22:05:16 <vincenz> zarvok: wrote a program for it?
22:05:20 <zarvok> heh, no
22:05:22 <zarvok> I enjoy playing
22:05:30 <vincenz> I don't get this new rave of poker
22:05:33 <vincenz> everyone seems to be into it
22:05:39 <vincenz> all tech magazines come with an extra insert on poker
22:05:44 <zarvok> oh really?
22:05:53 <zarvok> I just think it's an interesting game mathematically
22:06:09 <vincenz> how' s that?
22:07:00 <zarvok> Since it's not a full-information game, it's hard to determine a "perfect" strategy, so you have to incorporate calculations about the reliability of your read on your opponents
22:07:22 <zarvok> I play with some software that analyzes my opponent's play and displays statistics on how likely they are to do various things
22:07:29 <vincenz> ah :)
22:09:18 <zarvok> Even when playing limit poker, analyzing your opponents actions can often influence the mathematically "correct" decision
22:09:25 <zarvok> anyway, I just find it fun
22:10:23 <zarvok> though I wish the companies would release software for linux.  It's a pain to deal with one OS for work and another for pleasure
22:14:18 <vincenz> poker is work?
22:14:30 <vincenz> :P
22:14:32 <zarvok> heh
22:15:05 <zarvok> I once convinced my father that I was going to leave school and play poker professionally
22:15:08 <zarvok> he was displeased
22:15:47 <zarvok> it was fun
22:16:30 <zarvok> so I guess you use linux exclusively, vincenz?
22:17:49 <vincenz> lately yes
22:17:54 <vincenz> then again, I wrote my documents in latex
22:18:16 <zarvok> yes
22:18:19 <vincenz> only thing I use windows for (in vmware on computer laptop) is for the SAP, cause it borks in linux firefox
22:18:28 <zarvok> ah
22:19:20 <zarvok> I remember that during my freshman year here they made us learn latex during a math course, and everyone complained.  I'm so glad they did though, it's so convenient
22:19:47 <zarvok> I can't imagine going back to something else, especially for anything technical
22:21:03 <Korollary> If I had a dollar for every student complaint...
22:21:19 <zarvok> actually, one of the guys I work for (Karl Crary) is working on an extension to latex that would let you use haskell inside your documents
22:21:27 <zarvok> could be pretty
22:46:07 <JohnMeacham> dons: I really like that analogy, I have used it several times. I need to refine it though. I like the implication you might get crushed, but you will have all the candy you want either way.
22:49:06 <Cale> zarvok: Rock, Paper, Scissors is where it's at. Why play partial-information games when you can play zero-information games?
22:49:19 <Cale> :)
22:50:26 <zarvok> :)
22:50:48 <zarvok> the work that is done on RPS bots never ceases to amaze me
22:51:53 <zarvok> that a game with an obvious and well-known "optimal" strategy in the no-information case could draw in so many different solutions is kind of neat
22:57:03 <Cale> yeah, under the assumption that your opponents are not playing optimally, things get fairly interesting
22:58:21 <falconair_> there is a famous series of "Numerical Recipes" books for C/C++/Fortran and similar books for Java/Small Talk, is there such a book (or other reference) for haskell...or even other functional languages?
22:58:36 <Korollary> falconair_: Not that I know of
22:59:08 <zarvok> falconair_: though feel free to write one - I might buy it :)
22:59:41 <snak1> dear colleagues, anybody up to help a haskell newbee? :)
22:59:48 <Korollary> Numerical Recipes are very performance conscious. Destructive updates are good.
23:00:06 <int-e> . o O ( write in C, use FFI. )
23:00:17 <Korollary> . o O ( exactly )
23:00:19 <falconair_> from what i understand it should actually be easier (perhaps the speed will be slower), it should be easier to do derivatives, integrals (symbolically?), perhaps even linear algebra and monte carlo....at this point, i'm not even sure how to do high school algebra (solving for variables)....
23:01:01 <edwardk> well, monte carlo not so much coz you need to have a random number source or use sobel sequences for faster convergence in typical use cases.
23:01:07 <falconair_> hm....my concern is not really speed, i was actually hoping to learn not just functional programming (beyond fold/filter/map/cons/head/tail)...but also how to do math using programming langs :)
23:01:21 <Sentinel> falconair_: are those books any good?
23:01:23 <Lemmih> snak1: Sure.
23:01:26 <Korollary> falconair_: Of course. The recipes themselves are fairly short functions. But it already exists in optimized library form. I think there's a DSP library written in haskell, though.
23:01:29 <edwardk> well, i've taught out of numerical recipes
23:01:40 <edwardk> its one of my favorite books on the shelf
23:01:46 <edwardk> the information density is amazing
23:01:49 <Pseudonym> It's a good book to teach from.
23:01:55 <Pseudonym> Pity the code is crap.
23:02:00 <Korollary> It's a good book. Yes, the code sucks.
23:02:09 <edwardk> heh, well, the code is basically fortran transliterated as appropriate =)
23:02:10 <snak1> falconair: math's very convenient in Haskell. That's why I switching to it.
23:02:12 <Korollary> C++ versions sucks mightily.
23:02:21 <Sentinel> why? bad optimized?
23:02:26 <Korollary> No, poor style.
23:02:36 <Sentinel> like.. got an example?
23:02:39 <edwardk> very well optimized, just terse variable names, no real explanation of how it works, etc.
23:02:47 <edwardk> sure one sec
23:02:50 <Korollary> Not at the moment. It's been a while. I remember preferring the C versions.
23:03:03 <Sentinel> but terrible variable names dont really matter that much
23:03:04 <falconair_> i have a book, math, logic and something else in haskell ... i was hoping for a more complete and concrete (and practical) example of using haskell/ocaml to do financial modeling
23:03:20 <Sentinel> bad explanation is bad though
23:03:41 <Korollary> falconair_: You need to talk to lennart (augustss) when he's around.
23:03:53 <snak1> I want to make a function, that calculates a cartesian product of a bunch of lists
23:03:54 <edwardk> ahh crap i guess i don't have them onm this machine
23:04:13 <snak1> so far I wrote it as follows:
23:04:14 <Korollary> edwardk: I think the book text is online.
23:04:21 <edwardk> the code is very very fast, very well optimized, but its usualy not idiomatic for the c implementation they use 1 based arrays, etc.
23:04:25 <falconair_> yeah, i think at nr.com
23:04:40 <edwardk> like i said, it shows its fortran roots a lot
23:04:45 <snak1> descProduct :: [[a]] -> [[a]]
23:04:45 <snak1> descProduct nss = foldl f [[]] nss
23:04:45 <snak1>         where f a b = [x++[y]|x<-a,y<-b]
23:05:17 <edwardk> no oop, no encapsulation, just raw routines with short inscrutable names. If you already know what you need its probably in there.
23:05:35 <Sentinel> im only interested in the c/c++ version
23:05:37 <snak1> it works, but I have a gut feeling that it's not the best solution
23:05:41 <falconair_> so...is it a good idea to look at matlab or S-Plus code...since they are supposed to be functional as well...and try translating that to haskell?
23:06:34 <edwardk> possibly. i usually fall back on translating my Mathematica code when i have to figure out a way to think about a problem in haskell =)
23:06:36 <snak1> falconair: I humbly think that the best way is to understand the methods, write them formally on a piece of paper and then _implement_ in haskell
23:07:02 <int-e> snak1: if you use foldr, you get [x]++y instead, or just x:y
23:08:08 <int-e> snak1: that's an improvement. If you want to be obscure, you can write  descProduct = sequence .
23:08:12 <edwardk> anyways as for nr site, they have the books but not the code online
23:08:33 <snak1> int-e: thanks!
23:09:08 <falconair_> hm...the "financial contracts" paper looks really interesting, i was hoping to do some simpler stuff before trying to implement that...my search shall continue ! :)
23:10:41 <Sentinel> Korollary: it looks like they put the C version online, but they seem to have split it to shitloads of pdf's instead of one :/
23:11:09 <snak1> int-e: that sequence . thing rules :)
23:11:41 <int-e> snak1: the  .  isn't part of it - that was the period at the end of the sentence. Sorry.
23:13:17 <snak1> int-e: why do you call it obscure? is it the bad style to use this function?
23:13:28 <Cale> actually, I don't think it's that obscure anymore :)
23:13:37 <Cale> I use that all the time, myself :)
23:14:09 <Cale> The reason why it might be a little obscure is that sequence is a general monadic function
23:14:13 <Cale> @type sequence
23:14:15 <lambdabot> forall a (m :: * -> *). (Monad m) => [m a] -> m [a]
23:14:39 <int-e> snak1: It's obscure for beginners because it involves monads ... the list monad to be precise
23:15:05 <Sentinel> i wonder if there any other good books similar to these numerical recipies for c/c++
23:15:11 <snak1> int-e: I'm ok with monads after the course on category theory
23:15:20 <int-e> Cale: heh. I tend to use it a lot, too :)
23:15:49 <Cale> snak1: you took a course at your uni?
23:15:51 <int-e> snak1: if it isn't obscure to you, that's great.
23:16:17 <falconair_> snak1: where did you take this category theory course?
23:16:45 <snak1> falconair: it was disguised as a course called "functional programming" :)
23:16:58 <falconair_> i see
23:17:18 <snak1> Cale: yes
23:18:18 <zarvok> cd ..
23:18:25 <zarvok> I do that far too much
23:21:11 <snak1> falconair: I took that course and now my supervisor cannot force me to use C again. :)
23:22:02 <snak1> I just love the way math is expressible in Haskell
23:28:46 <falconair_> snak1: frankly i don't really know how to program anything but java (and a bit of C/C++ from college days)...but since i started looking at haskell (and other functional langs)...i simply get annoyed with java :)
23:29:25 <newbcoder> yeah; who won the ICFP?
23:29:38 <Korollary> we won't know till september
23:29:41 <zarvok> newbcoder: it will be announced at the conference in sept.
23:29:51 <newbcoder> ARGH
23:29:55 <zarvok> heh
23:29:55 <newbcoder> WTF
23:30:04 <zarvok> it's the same way every year
23:30:05 <newbcoder> are they sending the packets over by pigeons or what?
23:30:11 <Korollary> african swallows
23:30:38 <zarvok> it's actually a subterranean network of snails
23:31:22 <Cale> They're using continental drift as a means of communication.
23:31:28 <zarvok> hahaha
23:31:43 <zarvok> @remember Cale They're using continental drift as a means of communication.
23:31:43 <lambdabot> Done.
23:32:42 <LordBrain>  there are invertible functions, XML <-> S expression
23:33:07 <LordBrain> so if you dont like xml, you could just turn it into S expressions, work it there, then turn it back to use xml tools if need be.
23:33:18 <newbcoder> lambdabot, Cale
23:33:25 <newbcoder> doh; how do you pull stuff out of lambdabot?
23:33:32 <zarvok> @quote cale
23:33:32 <lambdabot> cale hasn't said anything memorable
23:33:35 <zarvok> @quote Cale
23:33:36 <lambdabot>  They're using continental drift as a means of communication.
23:33:48 <newbcoder> @remember newbcoder newbcoder is the best of them all
23:33:49 <lambdabot> Done.
23:33:52 <newbcoder> muhahahaha
23:34:10 <zarvok> @quote
23:34:10 <lambdabot> mikaeli says: My friend bought a new laptop; it had MSBLASTER preinstalled. I couldn't believe it either and installed XP and the apps many times, run virus killers and everytime the blaster came
23:34:10 <lambdabot> back. Everything was packed on a rescue cd. And virus was in m$ works installation files.
23:34:37 <LordBrain> anyway, xml's supposed usefulness comes from it being standardized
23:34:54 <johnnowak> bah to xml.
23:35:43 <LordBrain> so its only useful if we all use it... which seems slightly chicken/egg-ish if you know what i mean...
23:36:11 <LordBrain> suppose it wasnt hyped enough to get so much attention.. then it would be useless
23:36:34 <LordBrain> but because it has been adequately hyped, it has some value...
23:38:14 <LordBrain> s expressions are a million times nicer in a typical editor tho
23:38:30 <zarvok> but my XML looks so pretty in firefox
23:38:31 <zarvok> :)
23:44:00 <johnnowak> zarvok: heathen!
23:44:09 <zarvok> heh
23:46:08 <vincenz> death to xml
23:46:12 <vincenz> long live yaml
23:50:36 <audreyt> xml works naturally if all your data have a notion of one single "parent"...
23:50:38 <lispy> heh
23:50:53 <audreyt> ...but otherwise yaml is a better fit for e.g. algebraic data types and records
23:50:59 <lispy> you guys were ragging on xml when i was here earlier
23:51:14 <lispy> hmm...maybe i should look at yaml
23:51:50 <int-e> xml is a markup language. it's meant for text with markup. siiiigh.
23:51:54 <lispy> yaml is ugly too
23:52:36 * audreyt hands lispy s-expressions
