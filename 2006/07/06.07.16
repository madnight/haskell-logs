00:00:05 <Failure02> well that's nice to know then
00:00:18 <edwardk> > (234^234252) `div` (234^234252)
00:00:20 <lambdabot>  1
00:00:20 <dons> just for reference,
00:00:22 <dons> _ ^ 0       =  1
00:00:22 <dons> x ^ n | n > 0   =  f x (n-1) x
00:00:22 <dons>            where f _ 0 y = y
00:00:22 <dons>                  f a d y = g a d  where
00:00:24 <edwardk> it was the string =)
00:00:24 <dons>                        g b i | even i  = g (b*b) (i `quot` 2)
00:00:27 <dons>                          | otherwise = f b (i-1) (b*y)
00:00:29 <dons> _ ^ _       = error "Prelude.^: negative exponent"
00:00:49 <edwardk> it just has a damn fast number library
00:01:12 <dons> there's a gcd primop, which might be useful to you
00:01:20 <Failure02> > (234234234^234234234234) `mod` 100
00:01:24 <lambdabot> Terminated
00:01:27 <dons> > gcd 41343 43242
00:01:28 <lambdabot>  3
00:01:31 <edwardk> yeah
00:01:36 <Failure02> that line crashed ghci for me
00:01:43 <edwardk> not going to work for crypto stuff
00:01:45 <dons> > lcm 344324 32444
00:01:46 <lambdabot>  2792811964
00:02:07 <edwardk> does haskell use gmp under the hood?
00:02:11 <dons> anyway, if you need some specific, highly optimised thingy, find a C implementation, and bind to that
00:02:14 <dons> edwardk: yes, for Integer
00:02:25 <edwardk> thats what he needs gmp has a function for doing what he wants
00:02:36 <edwardk> can you get at the gmp calls/
00:02:36 <dons> ah, so bind to that then.
00:02:39 <dons> foreign import ...
00:02:55 <edwardk> and use them on Integers?
00:02:58 <Failure02> well it's not hard to implement in pure haskell. it would just be convenient if it existed in the prelude
00:03:01 <dons> this has come up on the mailing list before ,actually, so I suspect that its already been done
00:03:03 <edwardk> *nods*
00:03:15 <dons> Failure02: did you check the math libs?
00:03:23 <Failure02> no
00:03:28 <Failure02> which are there?
00:03:38 <dons> check here, http://haskell.org/haskellwiki/Libraries_and_tools/Mathematics
00:03:39 <lambdabot> Title: Libraries and tools/Mathematics - HaskellWiki
00:04:01 <Failure02> what a cool bot :)
00:04:39 <dons> what's the function called in gmp?
00:05:08 <dons> mpz_ui_pow_ui or something?
00:05:19 <u221e> Why are there so many broken links on haskellwiki?
00:05:34 <dons> a lot of the libs are old/ported from the previously static haskell.org
00:05:37 <dons> not all have been updated
00:05:49 <edwardk> http://cvs.haskell.org/trac/ghc/wiki/AddingNewPrimitiveOperations
00:05:50 <lambdabot> Title: AddingNewPrimitiveOperations - GHC - Trac
00:06:02 <dons> oh, that's more than you'd need to do
00:06:11 <dons> I mean, gmp is already linked in the rts, so a foreign import would work
00:06:16 <edwardk> discusses a bit about the headaches of gettig Integers back and forth to the ffi
00:06:23 <edwardk> which is why i was concerned
00:06:37 <dons> ah, very nice.
00:06:43 <dons> "Why do I need mpz_powm?"
00:06:49 <dons> The GMP mpz_powm function computes "(BASE raised to EXP) modulo MOD" for some integers BASE, EXP, ...
00:07:01 <edwardk> yepp
00:07:12 <dons> i'm not convinced you need a new primop though.
00:07:17 <edwardk> remembered reading it on my random documentation binge =)
00:07:19 <dons> a foreign import from user land seems much simpler
00:07:49 <dons> Failure02: check that link edwardk just posted. Looks like the full story
00:08:04 <edwardk> though note at the end the guy didn't get it to work =)
00:08:15 <wli> I think ghc already optimizes it.
00:08:17 <dons> except that the author doesn't consider the problem of marshalling to C, via the FFI, which I think is the easier story
00:08:34 <dons> wli, you think it actually calls mpz_powm?
00:08:36 <edwardk> Quite simply because I have so far been unable to figure out how to pass Integer operands efficiently between Haskell and C. I am still, however, in the market for a solution of this nature.
00:08:45 <edwardk> was his reasoning on ffi
00:08:49 <Failure02> it's a bit hardcore for me. :(
00:08:54 <dons> hmm. I think the usual way would be the way.
00:09:48 <edwardk> not knowing enough about the usual way i will smile and nod sagely
00:10:25 <dons> it's actually quite interesting seeing the C code that gets generated,
00:10:26 <dons> e.g.
00:10:28 <dons> _s2qR = ~158516711 ^ 2147483539 & 158516711 ^ _s2r3 >> 31;
00:10:37 <dons> from (234234234^234234234234) `mod` 100
00:10:59 <edwardk> hrmm
00:11:22 <edwardk> I see the c int primtive to CInt but i don't see the Integer mapping
00:11:33 <dons> there's a bunch of gunk around it, actually
00:12:01 <dons>         _s2vF = %MO_S_MulMayOflo I32(5, 2147483647);
00:12:03 <dons> primop call
00:12:45 <dons> but for full control, foreign import "gmp_pow" :: Integer -> ...
00:12:53 <dons> write a Storable instance for Integer that does the marshalling
00:12:54 <dons> call
00:13:21 <edwardk> heh, but isn't Integer internally just a gmp object anyways?
00:13:23 <dons> or ask on glasgow-haskell-users@haskell.org, since I think this might have been pondered before
00:13:34 <edwardk> so how to do the marshalling without wasted effort
00:13:41 <dons> edwardk: right, so hopefully 'marshalling' is unboxing and a castPtr
00:13:42 <edwardk> since this will likely be the single most often used call in the code
00:13:47 <edwardk> *nods*
00:14:08 <dons>    | J# Int# ByteArray#         -- large integers
00:14:10 <Failure02> i didn't find a function in any of the math libraries that i checked
00:14:27 <dons> there's the ptr, edwardk, the ByteArray#
00:15:11 <dons> hmm. i think i might be able to do this in 4 or 5 lines
00:15:25 <dons> so we want to call
00:15:25 <dons> #define mpz_powm __gmpz_powm
00:15:26 <dons> __GMP_DECLSPEC void mpz_powm __GMP_PROTO ((mpz_ptr, mpz_srcptr, mpz_srcptr, mpz_srcptr));
00:15:29 <dons> ?
00:16:43 <edwardk> yeah
00:16:54 <dons> so I need to find 4 ptrs
00:17:18 <dons> mpz_t's I suppose
00:18:04 <edwardk> r b e m , where r is the return value, and is set to b^e `mod` m
00:18:07 <edwardk> are the parameters
00:18:19 <dons> righto
00:18:47 <dons> seems doable.
00:18:56 <dons> but i'll have to try later, people visiting..
00:19:59 <foxy_> dons, is Yi.Lexers to be used for regexps?
00:20:41 <edwardk> http://www.mail-archive.com/haskell@haskell.org/msg15066.html talks a bit about marshalling
00:20:43 <lambdabot> Title: Re: [Haskell] for large x, log (x::Integer) :: Double
00:21:14 <edwardk> @tell dons http://www.mail-archive.com/haskell@haskell.org/msg15066.html talks a bit about gmp integer marshalling
00:21:14 <lambdabot> Consider it noted.
00:40:51 <haskey> hi
00:40:58 * wli installs a bunch of postgresql stuff
00:41:28 <edwardk> heh i thought you worked for oracle? =)
00:42:35 * wli does kernel hacking for oracle and as of yet has no clue whatsoever regarding databases (apart from super-low-level "database engine" affairs irrelevant to invoking them or how any particular one works).
00:42:47 <edwardk> ahhh
00:43:21 <wli> We're talking about cluelessness beyond cluelessness here.
00:43:26 <edwardk> fair enough
00:43:48 <wli> I've no idea how to ask a database server daemon to do anything. Or even what's typically asked of them.
00:44:17 <wli> Anyway, postgresql is largely chosen because I can apt-get -f install it
00:44:28 <edwardk> i've had to use most of the various database engines out there, but aside from a little hacking on the mysql internals and a grad course on internals. i try to stay on the outside of them =)
00:44:32 <edwardk> ahh
00:44:37 <haskey> I've a quick question guys
00:44:46 <edwardk> shoot
00:45:01 <wli> edwardk: In theory I will be able to talk to it in Haskell at some point.
00:45:30 <wli> edwardk: In practice things look messy at the keeping doc websites up and similar levels.
00:45:49 <haskey> I'd love to understand how much more Haskell can give me compared to Ruby?
00:46:07 <edwardk> well
00:46:18 <edwardk> talk about apples and oranges =)
00:46:36 <haskey> edwardk: I know Haskell is purely functional. Ruby is OO.
00:46:57 <edwardk> haskell is lazy at heart, while ruby just offers some lazy comprehension stuff. haskell is purely functional and has a arguably the strongest type system out there
00:47:04 <wli> edwardk: I wrote a toy database engine semester project in 3 hours once.
00:47:35 <wli> edwardk: (more an indictment of the nonseriousness of the course than any statement of prowess)
00:47:58 <edwardk> ruby takes the stance that it is better to have usable defaults than configurability. haskell takes totally the opposite stance, which may or may not be good depending on how you view the world
00:47:59 <pejo> wli, I was just about to ask if you passed on those 3 hours of work.
00:48:08 <edwardk> heh
00:48:22 <wli> pejo: With flying colors. The only requirement was for a very limited interface to work.
00:48:27 <edwardk> for my database course i wound up reinventing STM in an imperative context. kind of funny in retrospect
00:48:30 <haskey> edwardk: ok I see. Someone told me "don't spend time on Haskell, study Ocaml. He knows that I care about performances, but I care about having a good language. Any comments?
00:48:53 <wli> pejo: query/update interface that is
00:49:00 <edwardk> well, ocaml vs. haskell comes down to strict vs. lazy, and that haskell has imho a much cleaner syntax than ocaml.
00:49:35 <haskey> edwardk: ocaml syntax sucks a bit I agree. But performance wise, does Haskell keep it up?
00:49:36 <edwardk> i'm not a haskell junkie by any stretch of the imagination, but i do love its syntax. (and i've used ocaml a lot more than haskell over the years)
00:49:57 <edwardk> depends on usage patterns. haskell is quite competitive. take a look on the great language shootout pages.
00:50:38 <edwardk> @google great language shootout
00:50:39 <lambdabot> http://shootout.alioth.debian.org/
00:50:39 <haskey> edwardk: I saw that they are equally distributed (9 test in favor of Ocaml, 9 for Haskell)
00:50:55 <edwardk> then go in favor of what you like =)
00:51:03 <haskey> edwardk: eheheh
00:51:21 <haskey> edwardk: I'm reading "YAHT". is it a good start for a ruby programmer?
00:51:33 <edwardk> personally i find the monad tricks in haskell to be an eye opening experience. true referential transparency is amazing.
00:51:45 <edwardk> thats a good start i think. people seem to recommend it.
00:51:57 <edwardk> i kinda started by reading everything i could get my hands on for 2 weeks.
00:52:12 <edwardk> (that was about 3-4 weeks ago)
00:52:13 <edwardk> =)
00:52:27 <haskey> edwardk: good, then I go study, and I'll pop here asking questions if I don't understand things or if I have further doubts
00:52:33 * wli would very much like hdbc docs
00:52:34 <edwardk> sounds good.
00:52:45 <haskey> edwardk: thanks :)
00:53:15 <edwardk> i've become kind of a constant fixture around here, mostly annoying those who know more than i do about language specifics, but i'll be happy to help insofar as i can.
00:54:02 <wli> aha, the HDBC website is back
00:54:11 <haskey> thanks. take care.
00:54:59 <pesco> Anybody know how the "topics" feature for the (mailman) mailing lists work? Can I use it to recieve only "ANNOUNCE" messages from haskell@haskell.org?
00:56:17 <wli> Nothing particularly interesting about HDBC. So, now to figure out how on earth to be less spoofable than assuming web clients are authenticated when they present a known cookie.
00:56:52 * wli == CGI/database idiot
00:57:44 <edwardk> wli: this for code of your own?
00:57:56 <edwardk> wli: usually you want to build and maintain some sort of session
00:58:30 <edwardk> usually by scribbling into a database or whatever session framework you have and then checking it against the host they are coming from and your allowed timeouts on each page visit
00:59:13 <edwardk> and then just pass it back and forth somehow with each page visit, in the  url, as a hidden field in forms, etc or via cookie
00:59:22 <wli> Is this just some sort of cookie field?
00:59:37 <edwardk> it can be, but cookies are notoriously unreliable
00:59:41 <edwardk> so i tend not to use them
01:00:03 <wli> What are the other ways besides cookies, then?
01:00:20 <wli> I don't know of any session frameworks.
01:00:31 <edwardk> when i code in java or cocoon i just let cocoon determine whether or not cookies are supported and have it implicitly pass the session along. bbut thats some java servlet magic
01:00:40 <edwardk> well. what are you writing your code in?
01:00:44 <wli> (this should really be a standardized protocol)
01:01:13 <edwardk> well, the other option is to pass it as a cgi parameter. those ?foo=bar&baz=whatever things
01:01:13 <wli> I want to use Haskell for it.
01:01:58 <wli> edwardk: Shouldn't I use the one that doesn't show up in the URL? (and https for that matter)
01:01:59 <edwardk> add another parameter that indicates who they are, create it if its not there, then store it to/retrieve it from the database
01:02:11 <edwardk> well. there is a dilemma there
01:02:34 <wli> The CGI parameter passing that doesn't appear in the URL, that is.
01:02:49 <edwardk> you want to store it in a GET url (the ?foo) if they can go back to the previous page,. otherwise their back button won't work. and you won't be able to POST it on an <a href=...> link
01:03:12 <edwardk> not everything will probably interact with your cgi via a submit button, keep that in mind
01:03:27 <edwardk> you might want to be able to browse stuff and a lot of those will be good old fashioned hyperlinks.
01:03:35 <edwardk> while it was in cookie form you didn't have to do anything to those
01:03:44 <edwardk> once you give up on cookies you have to mangle those too
01:03:53 <wli> This is a mess.
01:04:13 <edwardk> and if you tie the session key to their ip then it doesn't matter if you pass it in the clear as part of the url
01:04:14 <wli> Part of my concern is leaking the keys.
01:04:26 <edwardk> you build one, md5 it or something and send it to them
01:04:34 <edwardk> they aren't readily reversible and are transient
01:04:43 <edwardk> they indicate that the current session was authenticated nothing more
01:05:48 <wli> How do I convince them to pass this thing back and forth like that?
01:06:00 <edwardk> you don't. it comes with the url =)
01:06:19 <edwardk> what is the application in question?
01:07:54 <wli> I basically want to have a bunch of surveys and track them on a per-user basis for data mining purposes.
01:08:16 <edwardk> will the user explictly log into your site with a username/password?
01:08:37 <wli> Yeah. I'm hoping for as much crypto and anonymity as possible.
01:08:52 <wli> Not sure how to arrange that.
01:10:09 <edwardk> ok, so they come to the site. first part you want to start tracking them at you hit your cgi. nothing fancy yet. in your cgi you create a session key, assign it in the database. then you write it into all of the urls for the page. so that every page you go to from then on has that session key associated with it
01:10:16 <edwardk> so you can map back to the session
01:10:23 <wli> I want to, for instance, compute correlation and/or covariance matrices for things like (creationist, NASCAR fan, likes country & western music)
01:10:27 <edwardk> when they authenticate you associate their username and password with the session in the database
01:11:06 <edwardk> i'll spare you the trouble, the diagonal on that is all close to 1 =)
01:11:50 <wli> Well, the point is getting different sort of cultural, ideological, etc. datapoints for the same people lined up all in one spot.
01:12:05 * edwardk ducks, in case wli is  a creationist, nascar fan or likes country & western music =)
01:12:13 <wli> Not those specific things (which I pulled out of my arse from foreknowledge of correlation).
01:12:16 <edwardk> yeah
01:12:31 <edwardk> i gathered, just wanted to poke fun =)
01:14:01 <wli> What I think will happen is something like "survey packages" posted something like posts on web BBS sites are, but restricted somewhat in posting.
01:14:31 <edwardk> but if you want statistics then you'd probably not want to use the 'cookies only' way to track user login. there is some stastical correlations with 'paranoid about cookies' that would bias your sample =)
01:14:44 <edwardk> *nods*
01:14:49 <wli> In a survey package you'd have things like "clericalism vs. anticlericalism survey" or "entertainment genres"
01:15:01 <wli> Or "demographics"
01:15:20 <wli> In those there'd be the individual survey questions.
01:15:26 <edwardk> *nods*
01:15:57 <wli> People could check on things like surveys they've responded to but incompletely, or surveys that have been updated since they last responded, etc.
01:17:08 <wli> And last, but not least, look at principal components analysis, MDS, and k-means clustering results.
01:17:32 <edwardk> gah, when did google personalized search stop letting you filter out the spam sites
01:17:53 <wli> (those being periodically updated and hence de facto static content)
01:18:16 <haskey> what's a good editor for Haskell under Windows?
01:18:35 <edwardk> haskey: depends on what you're used to. do you have microsoft visual studio 2003 installed?
01:18:56 <haskey> I've 2005. Does Visual Haskell works with 2005?
01:19:05 <edwardk> ahh, i don't think so actually =/
01:19:23 <edwardk> there is an eclipse plugin
01:19:27 <wli> edwardk: When the smoke clears things like "What are the best nonideological methods for determining someone's political party affiliation?" and so on are the sorts of things I'd like to be able to divine from the survey.
01:19:52 <edwardk> thats the only thing i've used really on windows other than visual haskell. i mostly use vim off my linux box
01:20:22 <haskey> edwardk: is the eclipse plugin any good?
01:20:31 <wli> edwardk: You can sort of see what the whole thing would look like just from knowing what the survey thingie is trying to do.
01:20:33 <Pegazus> hi, what does {} means? : data ExpressedValue = Nro {stripNro::Int}
01:20:50 <edwardk> eg: thats a record
01:20:54 <edwardk> er peg
01:21:11 <edwardk> those are fields with names, once you construct one you can access it by name
01:21:15 <Pegazus> mmm what's a record? a named tuple?
01:21:50 <edwardk> so Nro { stripNro = 12 } returns a record of that type.. then you can access the fields of say a record bound to variable x with stripNro x
01:22:01 <edwardk> the main usefulness is when you have several fields
01:22:38 <edwardk> then you can make a new record with all but one of the fields the same by going x { somefield = 123 } which returns a record, the same as x except for one of its fields have changed
01:22:39 <Pegazus> k
01:22:59 <edwardk> its pretty much just sugar over a data Expressedvalue = Nro Int
01:23:06 <Pegazus> k
01:23:32 <Pegazus> sugar is sweet :)
01:23:33 <edwardk> but the record syntax can make code that has to repack a lot of those sorts of things a lot shorter
01:23:35 <edwardk> yeah
01:27:38 <wli> edwardk: The big issue with crypto/etc. here is that these things amount to rather impressive dossiers on the respondents... privacy is an enormous concern.
01:27:45 <edwardk> yeah
01:28:09 <edwardk> well, https the sending of the password and whatever you think will be sensitive
01:28:13 <wli> edwardk: So the authentication methods and security need to be a bit stringent.
01:29:02 <edwardk> as for crypto, https will do all that work for you, encode the session keys in a robust way and that will take care of the rest
01:29:14 <wli> edwardk: AIUI there are database security methods that try to avoid allowing inferences that would uniquely identify individuals.
01:29:33 <edwardk> *nods*
01:29:49 <wli> edwardk: Those are the next things I need to know about after getting CGI straight (which it sounds like https solves for the most part).
01:29:52 <edwardk> you can refactor and split data apart, but then you damage your ability to mine =)
01:31:20 <foxy_> @hoogle unless
01:31:20 <lambdabot> Monad.unless :: Monad a => Bool -> a () -> a ()
01:31:20 <lambdabot> Control.Monad.unless :: Monad m => Bool -> m () -> m ()
01:31:20 <lambdabot> System.Win32.Types.failUnlessSuccess :: String -> IO ErrCode -> IO ()
01:31:32 <wli> edwardk: The answer to that may lie in the paucity of per-vector operations needed for MDS, PCA, et al.
01:32:32 <wli> edwardk: Or otherwise offloading work to the client.
01:32:36 <edwardk> yeah
01:32:52 <edwardk> no matter what you do you will have something tying the user to an identifier
01:32:59 <edwardk> and you will have something tying that identifier to data
01:33:10 <wli> But the data need not be intelligible as stored.
01:33:25 <edwardk> so, if you are absolutely paranoid, don't let those two factors be put together =)
01:34:32 <wli> Well, ultimately, I have to be able to claim that it's not an Orwellian surveillance affair.
01:34:39 <edwardk> heh
01:34:43 <edwardk> good luck with that
01:34:52 <edwardk> i don't trust any survey site as far as i can throw them =)
01:35:10 <edwardk> especially if i have to log in
01:35:52 <wli> Most of the database security affairs assume that the central tabulator is trusted, but the third parties to which it grants access need to be restricted.
01:36:12 <edwardk> *nods*
01:36:57 <wli> In this case, not only is the central tabulator not trusted, but somehow it needs to prove that it's not hiding dossiers on people somewhere.
01:37:20 <edwardk> btw- for 7 of the last 10 years i ran a dot-com that gobbled lots of other dot-coms. had plenty of proprietary billing data, etc. know the drill.
01:37:29 <edwardk> well
01:37:40 <edwardk> the easiest answer is not to ask for a username/password
01:37:42 <wli> So the idea of just slurping up survey responses raw into a database is untenable.
01:37:49 <edwardk> and don't retain anything more than the survey they fill out
01:37:56 <edwardk> that wya you CAN"T track it back to them =)
01:38:10 <wli> edwardk: Then the correlations are impossible to make and I might as well not bother.
01:38:20 <edwardk> correlations between surveys, yes
01:38:24 <edwardk> but within a survey no
01:38:37 <edwardk> its a matter of scope
01:38:58 <edwardk> you could also provide some form of unique identifier that they can suppky you to resume later
01:39:06 <wli> I want the vector to be as long as possible, limiting the scope is another pack-your-bags-and-go-home scenario.
01:39:09 <edwardk> but don't tie it to their name or email address
01:39:25 <wli> edwardk: Yes, that's the idea going in.
01:40:50 <wli> If I can arrange it so that they keep their own dossiers to themselves and answer requests for various things, that might help. OTOH, it's all a black box to a non-programmer, so they'll never see the difference...
01:41:02 <edwardk> gah
01:41:13 <edwardk> hate the fact that hitting escape on trillian kills the window
01:41:36 <edwardk> its a nervous habit i have in vi to hit escape while i think =)
01:42:32 <wli> My concern is actually that someone (e.g. the NSA) would seize the database rubber hose -style and go hunting for the respondents.
01:42:45 <sieni> edwardk: that _really_ is teh suxxor
01:45:56 <haskey> does Haskell allow test driven development? And if so, is it encouraged within the community?
01:46:09 <edwardk> very much so!
01:46:13 <edwardk> try quickcheck! =)
01:46:57 <edwardk> quickcheck is a tooll that can automatically generate test cases based on the parameters to a claim.
01:47:22 <edwardk> its one of the neatest things i've come across since starting to look at haskell as a serious programming language
01:47:31 <edwardk> there is also HUnit a JUnit clone
01:49:00 <wli> Probably won't help... as soon as they send in more shadows than there are components in their vectors it can be reconstructed.
01:49:39 <haskey> quickcheck... cool, bookmarked.
01:50:05 <edwardk> wli: not much you'll be able to do on the database and government front if you want to operate the service in the states i think.
01:50:29 <edwardk> i'm just glad i'm not still running an ISP these days ;)
01:50:54 <wli> edwardk: I can ship the whole codebase to some other country and get someone else to run it.
01:51:09 <wli> Who furthermore wouldn't say where the code came from.
01:51:14 <edwardk> heh
01:51:50 <edwardk> well, thats awful conspiratorial sounding given that this channel is logged in like 8 public places by bots =)
01:52:38 <wli> I should call the whole thing off before I get assassinated or something, then.
01:52:44 <edwardk> heh
01:52:47 <edwardk> we'll miss you
01:54:10 <xerox_> Ohayou!
01:54:51 <edwardk> heya xerox
01:55:10 <edwardk> and er... michigan to you too =)
01:55:53 * wli should really leave the country.
01:56:02 <edwardk> where would you go?
01:56:26 <edwardk> not like you're going to get away from dmca type laws, they've popped up just about everywhere in the name of free trade
01:56:28 <wli> Western Europe and Scandinavia sound good.
01:57:10 <wli> Well, DMCA-type stuff is far from the only concern.
01:57:20 <edwardk> true
01:58:10 <wli> One of the big concerns would be going where I could avoid repatriation...
01:58:35 <edwardk> that narrows your options somewhat
01:59:22 <wli> e.g. minimal time-to-citizenship, worker visas not being tied to barring from application for citizenship, etc.
02:01:09 <wli> I've been looking halfheartedly for years... I think it's probably already too late.
02:01:24 <edwardk> personally i'm just enjoying my break from the real world in academia
02:02:23 <edwardk> though after this summer i'll need to figure out what i'm doing until i can get into a ph.d program
02:02:34 <sieni> wli: become an american-african like Vince Cate: http://online.offshore.com.ai/publicity/nyt-citizenship/
02:02:48 <edwardk> coz of the timing of things i won't be able to get into one until next year or so
02:05:30 <edwardk> anyways i feel your pain, i used to do a bunch of java cryptography stuff that our rather asinine laws made somewhat awkward
02:05:52 <wli> sieni: Unfortunately I'm not independently wealthy and I require pharmacological fruits of industrial civilization for survival (literally).
02:06:01 <edwardk> and before that i had bunch of c/c++ crypto code
02:06:22 <wli> Well, I'm not really into crypto or security, so I've little to worry about there.
02:07:49 <lispy> oh cool, looks like someone was downloading my haskell conversion of the nehe tuts
02:08:25 * wli needs to find some kind of expat channel
02:09:47 <edwardk> heh
02:10:32 <lispy> actually it may have just been the msn webcrawler :(
02:11:05 <edwardk> heh
02:11:16 <lispy> in fact it looks like the vast majority of my web traffic is automated :)
02:11:35 <edwardk> wondered why i was getting so much traffic today and tracked it back to the fact that audrey said something in passing about my site on the pugs blog
02:13:45 <shapr> @yow !
02:13:45 <lambdabot> There's a little picture of ED MCMAHON doing BAD THINGS to JOAN RIVERS
02:13:45 <lambdabot> in a $200,000 MALIBU BEACH HOUSE!!
02:14:02 <lispy> @. elite yow
02:14:02 <lambdabot> My nOSE iz0rz NUmb!
02:14:12 <xerox> ?state
02:14:12 <lambdabot>  @state @state
02:14:13 <edwardk> heh
02:14:26 <shapr> @state Alabama
02:14:27 <lambdabot> Alabama
02:14:30 <edwardk> @. elite palomer
02:14:31 <lambdabot> L3ArNinG VI/\/\ iz0rz PoiNtLE$s
02:14:35 <edwardk> woot
02:14:36 <edwardk> =)
02:14:43 <shapr> @. elite keal
02:14:44 <lambdabot> aLl i xn0\/\/ i$ i h4VE 3Xp3rIeNcEd my 0\/\/N d34tH UnHaPpeNiN9...
02:14:59 <edwardk> didn't know about @.
02:15:08 <lispy> UnHaPpeNiN9 is the worst
02:15:17 <xerox> @state
02:15:17 <lambdabot> Alabama
02:15:21 <xerox> @. vixen . state keal
02:15:21 <lambdabot> If I was looking for anonymous casual sex, I wouldn't be sitting here behind my computer talking to you!
02:15:24 <xerox> @state
02:15:24 <lambdabot> ithink has to do with hardcased government failsafe in chip
02:15:27 <xerox> haha.
02:15:46 <JohnnyL> no such thing as a $200,000 malibu beach house.
02:16:00 <edwardk> heh
02:16:09 <lispy> @state
02:16:09 <lambdabot> ithink has to do with hardcased government failsafe in chip
02:16:12 <edwardk> well, i think that was the point to go 'yow!' about =)
02:16:15 <lispy> what is @state?
02:16:23 <edwardk> the edmcmahon thing was kinda passe =)
02:18:40 <lispy> @palomer
02:18:40 <lambdabot> That's nuts!
02:18:42 <lispy> @state
02:18:43 <lambdabot> ithink has to do with hardcased government failsafe in chip
02:18:50 <lispy> interesting
02:19:04 <xerox> ?state
02:19:04 <lambdabot> ithink has to do with hardcased government failsafe in chip
02:19:12 <xerox> ?state remember this
02:19:12 <lambdabot> remember this
02:19:16 <xerox> haha.
02:19:18 <xerox> Ops.
02:19:20 <lispy> so you save something with @state something, and then retrive it with @state?
02:19:22 <xerox> ?state
02:19:22 <lambdabot> remember this
02:19:38 <xerox> Right. Now analyze what's going on here:
02:19:45 <xerox> ?. vixen . state keal
02:19:45 <lambdabot> )
02:19:48 <xerox> ?state
02:19:49 <lambdabot> my very first computer was an 80-0840
02:19:50 <edwardk> probably how . works
02:20:21 <xerox> Hm, what do you mean? ?. and ?state are different things.
02:20:39 <edwardk> well is state fed in as the default input to the function?
02:20:54 <edwardk> @state foo
02:20:55 <lambdabot> foo
02:20:57 <edwardk> @elite
02:20:57 <lambdabot> Say again?
02:21:02 <edwardk> hrmm
02:21:04 <edwardk> guess not =)
02:21:10 <edwardk> @. @elite @state
02:21:10 <lambdabot> compose module failed: IRCRaised Parse error: "@elite"
02:21:30 <xerox> ?. vixen keal
02:21:30 <lambdabot> Prolly
02:21:34 <edwardk> @. @elite state
02:21:34 <lambdabot> compose module failed: IRCRaised Parse error: "@elite"
02:21:38 <xerox> But this way you don't know what keal said!
02:21:40 <xerox> (-:
02:21:49 <xerox> ?. vixen . state keal
02:21:49 <lambdabot> If I was looking for anonymous casual sex, I wouldn't be sitting here behind my computer talking to you!
02:21:51 <xerox> ?state
02:21:52 <lambdabot> my very first computer was an 80-0840
02:22:01 <xerox> Now you have all of the discussion =)
02:22:10 <lispy> heh
02:22:16 <edwardk> @. elite palomer
02:22:16 <lambdabot> Ca7e9oRY THe0rY IS +|-|3 P4RIS hiL+0N Oph /\/\atHEmA+i(S
02:22:24 <edwardk> @. elite state
02:22:24 <lambdabot> mY VEry FIR$T (0MPu7er wAz0rz An 80-0840
02:22:31 <xerox> ?. vixen . state palomer
02:22:31 <lambdabot> good? not great?
02:22:34 <xerox> ?state
02:22:34 <lambdabot> I think vim is good for the rubbish bin
02:24:38 <edwardk> @help babel
02:25:11 <xerox> ?babel it de ciao
02:25:28 <lambdabot> babel <lang1> <lang2> <phrase>.
02:25:30 <lambdabot> Translate a phrase in lang1 to lang2.
02:25:32 <lambdabot> Language is an element of"german","de" "greek","el" "english","en" "spanish","es" "french","fr" "italian","it" "dutch","nl" "portuguese","pt"
02:25:34 <lambdabot> babel module failed: IRCRaised Prelude.head: empty list
02:25:55 <edwardk> @. babel en it palomer
02:25:55 <lambdabot> compose module failed: IRCRaised Parse error: "en"
02:26:08 <edwardk> @babel en it testing this
02:26:09 <lambdabot>  prova del questo
02:26:19 <edwardk> @help .
02:26:20 <lambdabot> . <cmd1> <cmd2> [args].
02:26:20 <lambdabot> . [or compose] is the composition of two plugins
02:26:20 <lambdabot>  The following semantics are used: . f g xs == g xs >>= f
02:26:45 <edwardk> @. (babel en it) palomer
02:26:45 <lambdabot> compose module failed: IRCRaised Parse error: "(babel"
02:26:48 <edwardk> shucks =)
02:26:57 <xerox> eh :)
02:27:01 <xerox> Fix it :-)
02:27:24 <edwardk> @. pl palomer
02:27:24 <lambdabot> (line 1, column 2):
02:27:24 <lambdabot> unexpected "_"
02:27:24 <lambdabot> expecting lambda abstraction or expression
02:27:26 <edwardk> =)
02:28:53 <xerox> ?code
02:28:53 <lambdabot> Maybe you meant: more todo vote
02:28:58 <xerox> :(
02:30:44 <edwardk> hrmm. can we access the plugins from the > prompt?
02:30:53 <xerox> ?version
02:30:54 <lambdabot> lambdabot 4p28, GHC 6.5 (OpenBSD i386 )
02:30:54 <lambdabot> darcs get http://www.cse.unsw.edu.au/~dons/lambdabot
02:30:54 <xerox> there
02:32:00 * xerox hacks up a new plugin
02:33:28 <yaxu> threadDelay() doesn't seem to do anything in the ghc that comes with ubuntu
02:35:28 <edwardk> !#!@# escape
02:38:17 <edwardk> lambdabot needs a babelfish fixpoint generator
02:39:35 <mahogny> I think you need to consider the metric used, or you will at least run into problems with the HTTP header :)
02:39:51 <xerox> I wonder if unsafePerformIO is welcome in lambdabot sources :P
02:39:55 <edwardk> yeah
02:40:25 <edwardk> er yeah to mahogany, no idea to xerox =)
02:40:41 <Saulzar> There are some already :)
02:40:51 <Saulzar> According to grep
02:40:56 <edwardk> heh
02:42:37 <edwardk> lots of random crap in there
02:42:39 <edwardk> @devils lawyer
02:42:41 <lambdabot> *** "LAWYER" devils "THE DEVIL'S DICTIONARY ((C)1911 Released April 15 1993)"
02:42:41 <lambdabot> LAWYER, n.  One skilled in circumvention of the law.
02:42:41 <lambdabot>  
03:03:36 * shapr boings
03:04:30 <astrolabe> hey shapr
03:05:31 <xerox> Yow-
03:07:53 <edwardk> heya
03:08:37 <xerox> Is it possible that if I load lambdabot in GHCi I can use my new command
03:08:45 <xerox> ..but if I --online it, it doesn't work?
03:10:26 <xerox> That's crazy.
03:10:50 <xerox> lambdabot> choose
03:10:50 <xerox> IrcMessage {msgPrefix = "null!n=user@null", msgCommand = "PRIVMSG", msgParams = ["#haskell",":@choose"]}
03:10:54 <xerox> Unknown command, try @list
03:10:59 <xerox> While in GHCi
03:11:00 <xerox> lambdabot> choose
03:11:00 <xerox> IrcMessage {msgPrefix = "null!n=user@null", msgCommand = "PRIVMSG", msgParams = ["#haskell",":@choose"]}
03:11:03 <xerox> Yes.
03:11:05 <shapr> hiya astrolabe
03:11:16 <astrolabe> good luck with the job!
03:11:57 <yaxu> hm, sleep works but usleep doesn't, i guess i need to recompile ghc?
03:14:54 <xerox> lambdabot> choose
03:14:54 <xerox> IrcMessage {msgPrefix = "null!n=user@null", msgCommand = "PRIVMSG", msgParams = ["#haskell",":@choose"]}
03:14:58 <xerox> Yes.
03:14:59 <yaxu> (threadDelay doesn't work either)
03:15:00 <xerox> Ops
03:15:09 <xerox> lambdabot> choose death cake
03:15:10 <xerox> cake
03:15:14 <xerox> lambdabot's AI.
03:23:45 <Saulzar> yaxu, It rounds to 50 ms intervals, are you sure you're giving it a big enough delay?
03:24:04 <yaxu> yes i gave it 1000 to test it
03:24:15 <yaxu> it returned straight away
03:25:46 <jyp> Suspends the current thread for a given number of microseconds (GHC only).
03:25:58 <jyp> so, 1ms
03:26:05 <jyp> gets rounded to 0
03:26:13 <jyp> , yaxu
03:26:46 <yaxu> ah
03:26:56 <yaxu> so i'm being stupid
03:27:05 <jyp> Just overlooking :)
03:27:19 <yaxu> somehow i got into my head that micro was 1/1000
03:27:25 <yaxu> rather than 1/1000000
03:27:36 <yaxu> thanks both
03:28:15 <jyp> Many people make the same mistake.
03:28:26 <jyp> I guesss the doc could be improved.
03:28:53 <yaxu> improve the people
03:29:14 <jyp> :)
03:31:27 <yaxu> wow, a pico second is hardly any time at all
03:33:51 <yaxu> anyway, i added some extra 0s to my program and it works, if only it were always that easy
04:39:59 <dons> ?uptime
04:40:00 <lambdabot> uptime: 2 days, 5 hours, 26 minutes and 29 seconds
04:42:42 <roconnor> ?downtime
04:42:42 <lambdabot> Unknown command, try @list
04:43:13 <roconnor> lambdabot has been offline for 3 days, 6 hours, 34 minutes and 54 seconds
04:45:02 <dons> boo :P
04:45:02 <lambdabot> dons: You have 1 new message. '/msg lambdabot @messages' to read it.
04:51:56 <erider_> hi all
04:55:49 * erider_ wonders whats going on today, "usually this is the busiest channel on the network"
04:55:50 <dons> hey erider_
04:55:55 * vincenz waves
04:55:57 <dons> back for more haskell hackifying?
04:56:03 <dons> heya vincenz !
04:56:06 <vincenz> hi
04:56:11 <dons> now, wasn't i trying to hook you two up?
04:56:11 <vincenz> just got back from toronto
04:56:20 <dons> vincenz: you came from ocaml, yeah?
04:56:29 <vincenz> dons: yeah
04:56:33 <erider_> hi dons
04:56:35 <dons> any tips for erider_ -- he's just considering switching, iirc
04:56:42 <dons> erider_: is that right?
04:56:45 <vincenz> what sort of tips?
04:56:52 <dons> you'd done some OCaml, erider_ ?
04:56:58 <dons> or am I dreaming?
04:58:25 <erider_> I downloaded O'caml a few days ago and I look at a tutorial yesterday but I think I'm more interested in haskell
04:58:42 <erider_> looked*
04:58:57 <dons> oh, i think i'm confusing you with someone yesterday who was switching from ocaml to haskell
05:00:29 <erider_> nah not me I'm new to both I am lisp lover. but I will get haskell a look see
05:00:30 <dons> ah, it was dylan, the ocaml guy
05:00:37 <dons> cool
05:01:55 <erider_> thats possible because I remember seeing him on the channel yesterday
05:02:21 <dons> it's a, what, sunday morning, in europe, and the us. so not too surprising its quiet
05:02:28 <dons> should pick up in a couple of hours or so
05:02:33 <vincenz> heh
05:02:48 <sieni> 3:02 pm in Helsinki
05:02:56 <vincenz> dons: I went to sleep at 3am on friday night drunk, got up at 8am saturday..... and I'm still on that day (24h day, I lost some due to timezone change)
05:03:40 <dons> yikes, you in .ca now? was that it?
05:03:42 <vincenz> no
05:03:42 <vincenz> .be
05:03:46 <tony2> the weather is great in th UK for a change also (typing in the garden).
05:03:50 <dons> oh, you went back/
05:04:20 <dons> tony2: nice :)
05:04:27 <tony2> so most people will be away from their screens If they have sense.
05:04:30 * dons ponders a rainy night in sydney
05:05:00 <dons> time for some hacky sack!
05:05:19 <tony2> hacky sack, yeah!
05:05:31 <erider_> as far as I can tell I think haskell doesn't have as many quarks as o'caml or I think haskell is easier to learn then O'caml
05:05:45 <dons> i think both those might be true, yes.
05:06:02 <dons> there was a strong emphasis on teaching in the early years of haskell
05:06:10 <dons> which helped keep things simmple and regular
05:06:38 <dons> (since the idea is to use it as a first language, to teach the foundation of CS)
05:08:33 <tony2> I was taught it as a first langauge, but there was no followup advanced course, and we didn't get as far as Monads/Type Classes etc. Which was quite silly IMO.
05:09:39 <dons> tony2: after about 5 years of just stuffing around with hacky sacks, i'm trying to really improve. i finally `got it' when i saw some of these videos, http://www.flipsider.com/gallery/?g2_itemId=34
05:09:42 <lambdabot> Title: Flipsider.com - Advanced
05:10:06 <dons> ah, interesting, where'd you study at?
05:10:20 <tony2> Imperial college london.
05:10:27 <dons> (they didn't get as far as monads when i did haskell in comp1A, but we did get to typeclasses)
05:10:46 <dons> they have since added more of a practical emphais, so they do gtk2hs programming and ffi
05:10:50 <tony2> nobody else bothered continuing.
05:11:10 <tony2> we were taught it as declaritive programming.
05:11:18 <sieni> ripwalk would be cool to learn
05:11:20 <mux> you guys are lucky, the only language I ever did in school was turbo pascal
05:12:16 <tony2> they followed up with Java, and everyone was relived. Crazy.
05:12:51 <tony2> ffi, wow, as part of comp1A, or later?
05:13:11 <dons> i think for the bonus parts of some of the 1A assignments
05:13:14 <dons> for the crazy people
05:13:44 <tony2> cool, they really gave everyone the impression it was a toy language in Imperial.
05:13:49 <dons> mostly its the usual story, recursion, induction, data types, hmm modules. been a while..
05:13:57 <dons> yeah, the key is not to make it appear as a toy
05:14:04 <tony2> I agree.
05:14:08 <dons> so throw ghc a them, do real things, solve real problems
05:15:35 <tony2> dons, are you doing a phd?
05:15:53 <dons> yep, in my final year now
05:15:56 <dons> yay!
05:16:22 <tony2> how has that been? I'm considering applying for one in UK somewhere
05:16:32 <tony2> and doing something FP realted.
05:17:00 <dons> fun, lots of work, sometimes you feel lost, need to find something you are really interested in, and a good supervisor
05:17:12 <dons> but i think its been the best 3 years so far
05:17:25 <tony2> (I only got a 2:1 as an undergrad though, not sure how much that will mater)
05:18:16 <tony2> A good supervisor seems to be the constant when I ask people that question.
05:18:16 <dons> depends on who and where. if you've got some good practical skills, many supervisors won't care about grades (since they're not always connected to performance as a researcher)
05:18:51 <dons> yeah, at least in the uk you've got some room to shop around
05:19:04 <dons> i just lucked into one of the few fp groups here in .au. that was fortunate.
05:19:09 <madpickle> most places will accept a 2/1 or even a 2/2 if you do a MS first
05:19:34 <madpickle> it depends on how much bad luck they've had with graduants -- if a lot never completed their postgraduate study, they tend to be stricter.
05:19:50 <dons> yeah, that's fair enough
05:20:04 <madpickle> if you did a dissertation in the 3rd year and you got a good mark on that, they'd do a 2/2 if you ask em politely
05:20:08 <bmud2> what's 2/1 , 2/2 stand for ?
05:20:14 <madpickle> degree classification
05:20:27 <tony2> don't really fancy more taught work, as in doing a MS first.
05:20:28 <madpickle> 2/2 is 50-60, 2/1 is 60-70, and 1/1 is 70+
05:20:32 <dons> tony2: and get started now! hack some haskell, get out there in the community. it surely helps if your supervisor has already heard of you :)
05:20:41 <bmud2> kinda like eyesight huh ? haha 6/6
05:20:42 <dons> port ghc to something :)
05:20:47 <madpickle> bmud2: heheh
05:20:59 <madpickle> amiga 500
05:21:19 <tony2> dons, sounds like a plan.\
05:21:21 <dons> 1/1 is 70+ , interesting, its 75 here for '1st class'
05:21:33 <madpickle> ok, so local variations i guess
05:21:36 <madpickle> but it's in that ball park
05:21:44 <madpickle> oh, you're aussie
05:21:50 <madpickle> ok, so not local variation then :P
05:21:53 <dons> well, its a little bit different here, not too much
05:22:06 <madpickle> yeah, your system is based on our antiquated system :P
05:22:45 <dons> hehe. that sounds plausible
05:27:46 * wli cries... no ghci for sparc
05:29:21 <wli> ytf did it disappear?
05:30:44 <Igloo> On Debian?
05:30:59 <Igloo> When did it last actually work correctly for you?
05:32:18 <wli> I think after simonmar logged in to fix it... probably just left it sitting there in-place
05:32:29 <Igloo> 6.4.2 doesn't enable it due to http://hackage.haskell.org/trac/ghc/ticket/631
05:32:31 <lambdabot> Title: #631 (GHCi doesn't work unregisterised) - GHC - Trac
05:33:50 <wli> 6.2.2 was what simonmar patched
05:34:22 <wli> (which no longer runs due to upgrades nuking old libreadlines)
05:35:16 <wli> no idea if the patches propagated or what
05:38:17 <vincenz> ping
05:39:13 <wli> looks like a regression since 6.2.2 with unclear origin
05:39:24 <dmhouse> vincenz!
05:39:35 <dmhouse> vincenz: can I PM you?
05:40:27 <Igloo> Back then it was probably being built registerised, but I had to turn that off as it wasn't being actively maintained and thus was bitrotting
05:42:36 <vincenz> dmhouse: yes
05:42:44 <vincenz> dmhouse: or talk in oasis?
05:42:53 <vincenz> que passa igloo
05:44:34 <Igloo> hmm?
05:46:37 <vincenz> how are you
05:46:44 --- mode: ChanServ set +o vincenz
05:49:04 <Igloo> Fine thanks  :-)
05:51:44 <vincenz> good to be backc in #haskell
05:51:44 <vincenz> l
05:53:01 <xerox> ?vixen we're sorry for the sound of the choppety choppety
05:53:01 <lambdabot> it's okay, i forgive you
06:00:06 <vincenz> who is CMIUC?
06:00:22 * vincenz scratches his head
06:00:54 * sieni scratches his butt
06:01:02 * vincenz kicks sieni
06:02:14 <sieni> :-(
06:04:19 <ulfdoz> vincenz: Let me try your pills. :)
06:04:43 <xerox> sieni: did you find the novel you were talking about yesterday?
06:05:06 <vincenz> ulfdoz: pills?
06:05:21 <xerox> Why are you an operator vincenz ?
06:05:38 <dmhouse> Because we enclosed him in backticks.
06:05:40 <vincenz> ulfdoz: you don't need pills, just get drunk, go to bed at 3am, wake up at 8am and spend 24 hours awake of which > 13 hours travelling
06:05:49 --- mode: vincenz set -o vincenz
06:06:03 <vincenz> xerox: Chanserv op'ed me
06:06:30 <ulfdoz> vincenz: You look overly excited to me. :)
06:06:38 <vincenz> oh sleep depriv
06:06:50 <vincenz> and waiting for the kickoff meeting of our ICFPC team
06:07:34 <vincenz> ulfdoz: though I don't think I'm overly exccited... it's just that I have a comment from someone codenamed CMIUC on my guestbook, and 50% chance it was someone from #haskell
06:09:31 <xerox> Let's do a points-free contest
06:09:40 <dmhouse> Yay"
06:09:43 <dmhouse> *Yay!
06:09:48 <xerox> Somebody say an expression, and then we points-free it without the help of ?pointless
06:10:05 <xerox> Lambdacandies for the winner (and the partecipants as well)
06:10:58 <dmhouse> @djinn (a -> b) -> a -> b -> a
06:10:58 <lambdabot> f _ a _ = a
06:11:06 <dmhouse> Hmm. Maybe not.
06:11:08 <vincenz> xerox: ever heard of /msg?
06:11:24 <xerox> vincenz - But.. but.. for the honor!
06:11:30 <vincenz> oh
06:11:37 <vincenz> I thought you said lambdacandies!
06:11:41 <vincenz> people will kill for those
06:11:53 <xerox> (That's why I offered it to every partecipant.)
06:12:09 <vincenz> oh right... I should read full sentencces instead of diagonally
06:12:26 <dmhouse> We should come up with a nice algorithm, then pointsfreeify it.
06:12:38 <xerox> If we had ?code we could lookup a random piece of code.
06:12:56 <dmhouse> How about that lovely code for producing pascal's triangle?
06:13:19 <dons> ok, start with: inits (x:xs)        =  [[]] ++ map (x:) (inits xs)
06:13:35 <dmhouse> > let pascals = iterate (\row -> zipWith (+) ([1] ++ row) (row ++ [1])) [1] in take 3 pascals
06:13:36 <lambdabot>  [[1],[2,2],[3,4,3]]
06:14:12 <dons> or, how about, unionBy eq xs ys        =  xs ++ foldl (flip (deleteBy eq)) (nubBy eq ys) xs
06:14:43 <xerox> By the way...
06:14:51 <xerox> ...this would be a fun thing to propose for AngloHaskell!
06:15:03 <xerox> ``Turn off your laptop, only pen and paper!''
06:15:04 <dmhouse> Hah.
06:15:22 <xerox> inits (x:xs)        =  [[]] ++ map (x:) (inits xs)   --  <- this one!
06:15:44 <xerox> This needs fix. Crazy dons.
06:16:06 <xerox> pascals is way simpler :-)
06:16:52 <dmhouse> Why does it need fix?
06:17:04 <dmhouse> Why can't you recurse normally?
06:17:12 <xerox> How do you recurse without points?
06:17:58 <dmhouse> xerox: Treat the name of the current function as free?
06:18:22 <dmhouse> Which way does (.) associate?
06:18:34 <xerox> Left, I think.
06:18:52 <dmhouse> Ah, nah, it's to the right.
06:18:57 <dmhouse> infixr 9 .
06:19:26 <kpreid> right makes it lazier
06:19:30 <kpreid> hm, no, only barely
06:20:22 <greenrd> I'm looking to package cabal-based packages for conary-based Linux distributions
06:20:34 <greenrd> so I'm looking at the gentoo ebuilds for a guide
06:20:58 <xerox> Well, I've done pascals.
06:21:00 <greenrd> Where is the "haskell-cabal" that the HaXml ebuild inherits from?
06:21:02 <xerox> > take 3 $ iterate (ap (zipWith (+) . (++ [1])) ([1] ++)) [1]
06:21:03 <lambdabot>  [[1],[2,2],[3,4,3]]
06:21:08 <xerox> *^_^*
06:21:33 <dmhouse> Is there a way to transform f . g . h to something where g is at the right-hand edge?
06:21:44 <xerox> hehe
06:22:01 <xerox> I did eta-expand the last time when I needed to do it.
06:22:03 <xerox> (IIRC)
06:22:16 <dmhouse> How does that help?
06:22:55 <mauke> ?pl \g -> f . g . h
06:22:55 <lambdabot> (f .) . (. h)
06:23:13 <mauke> \g -> ((f .) . (. h)) g
06:23:16 <dmhouse> Nice. (But cheating ;))
06:23:20 <xerox> Nooo.
06:23:26 <xerox> We're doing it manually, mauke!
06:24:19 <xerox> f . g . h = (\x -> f . x . h) g = (\x -> f . (x . h)) g = (\x -> (f .) ((.) x h)) g = ((f .) . (. h)) g
06:24:36 * xerox grins
06:24:42 <vincenz> xerox: that is so wrong
06:24:48 <vincenz> oh wait
06:24:49 <xerox> How?
06:24:49 <vincenz> it's not
06:24:58 <vincenz> grr
06:25:14 <xerox> You see what I mean, dave?
06:25:31 <dmhouse> xerox: Yeah.
06:25:39 <xerox> It might be that eta-expand is the wrong name.
06:25:46 <dmhouse> No, I see what you mean now. Nice.
06:25:52 <xerox> Cool :-)
06:26:16 <xerox> I still wonder what trick does TheHunter use.
06:26:33 <xerox> I wonder even more where did he go, but well.. :)
06:26:54 <dmhouse> We played a game at school where we'd take 5 digit numbers and write them in 3 digit bases.
06:26:57 <dmhouse> :)
06:27:10 <xerox> Yay.
06:27:10 <vincenz> 3 digit bases?
06:27:15 <dmhouse> Yeah
06:27:22 <vincenz> how do you get that many symbols
06:27:28 <xerox> You choose a base so that the number has three digits, if I understand correctly.
06:27:41 <dmhouse> No, bases with three digits, i.e. base 357
06:27:47 <vincenz> dmhouse: right
06:27:52 <dmhouse> And we wrote it like 64|124|98
06:27:55 <vincenz> dmhouse: how do you get 357-10 symbols
06:28:02 * xerox scratches head
06:28:18 <dmhouse> xerox: Write 1,052,992 in base 357.
06:28:29 <vincenz> > 64 * 357*357 + 124*257 + 98
06:28:29 <lambdabot>  8188702
06:28:31 <xerox> That's not five-digits!
06:28:36 <dmhouse> Okay, well, roughly five.
06:28:39 <vincenz> dmhouse: you must lead a boring life
06:28:49 <vincenz> dmhouse: nearly 8 digits is not roughly 5
06:28:52 * sieni scratches butt
06:29:01 <xerox> Should I iterate mod?
06:29:06 <dmhouse> I.e. find the a, b, c... such that a*357^0 + b*357^1 + c*357^2 + ...
06:29:33 <xerox> By hand?
06:29:39 <dmhouse> Oh, right, I meant 6/7 digit numbers.
06:29:41 <dmhouse> xerox: Yeah.
06:29:47 <vincenz> dmhouse: bored?
06:29:53 <vincenz> dmhouse: and it's not terribly complex, just modulo stuff
06:29:55 <dmhouse> ... that sum = 1,052,992.
06:29:59 <vincenz> dmhouse: did you ensure to use primes as bases?
06:30:08 <vincenz> dmhouse: huh?
06:30:08 <dmhouse> No?
06:30:10 <vincenz> dmhouse: no 8M
06:30:16 <vincenz> dmhouse: leftmost is highest
06:30:27 <vincenz> dmhouse: just like 18 = 1*10^1 + 8 *10^0
06:30:56 <dmhouse> Yes, but 1*10^1 + 8*10^0 = 8*10^0 + 1*10^1 :) (+) is commutative.
06:31:10 <vincenz> oh
06:31:11 <vincenz> so it
06:31:12 <vincenz> it4s
06:31:16 <vincenz> c | b | a
06:31:18 <vincenz> not a | b | c
06:31:23 <dmhouse> Oh, sure.
06:31:43 <vincenz> that's where I assumed wrongly
06:31:46 <roconnor> > unfoldr (\x -> Just (x `div` 357, x `mod` 257)) 1053992
06:31:47 <lambdabot>  [2952,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,...
06:31:55 <mauke> > let foo n b = (if n `div` b /= 0 then foo (n `div` b) b else []) ++ n `mod` b in foo 8188702 357
06:31:56 <vincenz> roconnor: you need the same number
06:31:56 <lambdabot>  add an instance declaration for (Integral [a])
06:31:56 <lambdabot>   In the definition of `jq...
06:32:01 <roconnor> > unfoldr (\x -> Just (x `mod` 357, x `div` 257)) 1053992
06:32:02 <lambdabot>  [128,174,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,...
06:32:04 <xerox> unfoldr-fu!
06:32:15 <vincenz> roconnor: they're both supposed to be 357
06:32:17 <mauke> > let foo n b = (if n `div` b /= 0 then foo (n `div` b) b else []) ++ [n `mod` b] in foo 8188702 357
06:32:18 <lambdabot>  [64,89,193]
06:32:25 <roconnor> > 128 + 174*357 + 15*357^2
06:32:26 <lambdabot>  1973981
06:32:36 <roconnor> oops
06:32:40 <roconnor> > unfoldr (\x -> Just (x `mod` 357, x `div` 357)) 1053992
06:32:41 <lambdabot>  [128,96,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,...
06:32:50 <roconnor> > 128 + 96*357 + 8*357^2
06:32:51 <lambdabot>  1053992
06:33:22 <dmhouse> Right, that's pretty much how you do it.
06:33:30 <dmhouse> 1) Write down the powers of the base
06:33:37 <dmhouse> 2) Find the largest power smaller than the number
06:33:50 <dcoutts> dons, still awake?
06:33:57 <dmhouse> 3) Find how many multiples of that power go into the number
06:34:11 <dmhouse> 4) Subtract
06:34:15 <dmhouse> 5) Repeat.
06:34:21 <vincenz> dcoutts: does gtk2hs work on macc?
06:34:38 <mauke> > let foo n b = n `mod` b : if n `div` b /= 0 then foo (n `div` b) b else [] in foo 12345 10
06:34:39 <lambdabot>  [5,4,3,2,1]
06:34:45 <dcoutts> vincenz, yes, (using X11 at the moment, but Gtk+ 2.10.o no supports non-X11)
06:34:51 <xerox> mauke: nice.
06:34:59 <vincenz> dcoutts: in addition on the computers at work I installed gtk2hs and ghc locally.... everything compiles fine.... but when an application of mine that uses gtk2hs links.... I get link errors on png stuff
06:35:19 <mauke> ?pl
06:35:19 <lambdabot> (line 1, column 1):
06:35:20 <lambdabot> unexpected end of input
06:35:20 <lambdabot> expecting white space, natural, identifier, lambda abstraction or expression
06:35:22 <mauke> argh
06:35:29 <xerox> dmhouse: what an evil game, by the way.
06:35:35 <vincenz> dcoutts: any ideas off the top of your head?
06:35:39 <xerox> Let's pl it out manually?
06:35:40 <dmhouse> xerox: It's quite fun and extremely geeky :)
06:35:44 <dcoutts> vincenz, you mean at runtime or compile time?
06:35:49 <vincenz> compile time
06:35:52 <vincenz> c-linking
06:35:59 <dcoutts> vincenz, so ghc fails to find libpng ?
06:36:07 <dcoutts> or rather gcc
06:36:07 <dmhouse> xerox: Might be complex, there are lots of instances of the variables.
06:36:16 <vincenz> I don't know.... I guess so, I get a lot of undefined symbols for ...png cairo_png and such
06:36:36 <vincenz> I'd think that if gtk2hs cacn be make installed it should be able to be used?
06:36:45 <dcoutts> vincenz, try pasting the entire command and error
06:36:55 <vincenz> can't now, it's at work... I'll do so tomorrow
06:36:55 <dcoutts> vincenz, yes, should be the case
06:37:08 <dcoutts> ok
06:37:11 <vincenz> thx
06:37:42 <xerox> ``It's not that we don't do things that are complex, it's that things are complex because we don't do it.'' - some asian guy...
06:40:29 <tony2> I've been experimenting with top-down programming today, and I think I'm converted. Normally I program in a bottom up style, but I decided to try writing from top down and using undefined lots, to type check early.
06:40:38 <shapr> I like that approach.
06:41:00 <tony2> I read the mapReduce paper, and thought I'd give it a go.
06:41:11 <xerox> The Google architecture thing?
06:41:24 <tony2> yeah, the microsoft paper on typing it in haskell.
06:41:40 * xerox arfs
06:41:42 <xerox> Point us!
06:42:06 <tony2> http://www.cs.vu.nl/~ralf/MapReduce/
06:42:08 <lambdabot> Title: Google's MapReduce Programming Model -- Revisited
06:42:12 <xerox> dmhouse - Do you have any other code on which we can points-free happily? :)
06:42:48 <dmhouse> xerox: hold on.
06:43:32 <dmhouse> @google applicative functor
06:43:37 <lambdabot> http://www.haskell.org/pipermail/haskell/2004-August/014463.html
06:43:37 <lambdabot> Title: [Haskell] Applicative translucent functors in Haskell
06:43:41 <dmhouse> There's a nice definition of transpose in that paper.
06:43:54 <xerox> I have one too!
06:45:13 * shapr boings
06:45:52 <xerox> > foldr (zipWith (:)) (repeat []) [[1,2,3],[4,5,6]]
06:45:53 <lambdabot>  [[1,4],[2,5],[3,6]]
06:45:55 <xerox> *^_^*
06:46:07 <dmhouse> Ah, that's nice, and not recursive.
06:46:21 <xerox> More points-free code!
06:46:32 <dmhouse> Yes, it's already points-free.
06:46:49 <tony2> does someone have nice code for working out all permutations of a list?
06:47:01 <dmhouse> tony2: There are many algorithms.
06:47:12 <dmhouse> tony2: I remember there being one in the LicensedPreludeExts.
06:47:21 <xerox> http://haskell.org/hawiki/LicensedPreludeExts
06:47:22 <lambdabot> Title: LicensedPreludeExts - The Haskell Wiki
06:48:10 <xerox> ski also have some slick permutation code.
06:48:15 <dmhouse> -- a faster version written by Johannes Waldmann, added by Mirko Rahn
06:48:15 <dmhouse> permutations :: [a] -> [[a]]
06:48:15 <dmhouse> permutations []     = [[]]
06:48:15 <dmhouse> permutations (x:xs) = [ zs | ys <- permutations xs , zs <- everywhere x ys ]
06:48:15 <dmhouse> everywhere :: a -> [a] -> [[a]]
06:48:17 <dmhouse> everywhere x []     = [[x]]
06:48:18 <tony2> dmhouse, hey thats a good page.
06:48:20 <dmhouse> everywhere x (y:ys) = (x:y:ys) : [ y:zs | zs <- everywhere x ys ]
06:48:23 <xerox> (Which came in Haskell, Prolog, and Mercury code.)
06:48:54 <tony2> ski?
06:49:16 <shapr> Stefan Ljungstrad
06:49:19 <xerox> Yeah, the #haskell, #scheme, and #prolog regular (above all)
06:49:28 <xerox> shapr and names....
06:49:46 <shapr> What?
06:49:58 <xerox> I can't remember names no matter what! :)
06:50:00 <shapr> oh
06:50:04 <dmhouse> > lookup "ski" shapr
06:50:05 <lambdabot>  Not in scope: `shapr'
06:51:12 <xerox> shapr :: Graph NickName RealName Factoid Paper
06:51:53 <shapr> :-P
06:51:58 <shapr> xerox == paolo
06:52:02 <xerox> (-:
06:54:47 * shapr listens to Jimmy Buffet while building Hope.
06:54:59 * xerox wants new Hope too.
06:55:13 <xerox> I should trash my db in the process of upgrading, though :(
06:57:41 <shapr> Yeah, that's the only thing slowing me down too.
06:58:16 <xerox> I wonder why we do need an SQL db.
06:58:22 <xerox> Or better, a relational database.
06:59:04 <shapr> It does have serious advantages. Zope uses a DB for lots of useful stuff.
06:59:17 <xerox> What advantages?
06:59:45 <shapr> But a filesystem/database mix like reiser4 would solve all those problems and more.
07:00:14 <shapr> Hm, it wants the RSS package...
07:00:29 <shapr> I thought that got folded into Hope?
07:01:43 <shapr> xerox: Maybe migrate will do it for us?
07:01:55 <shapr> iirc, bringert said the only thing we need to do manually is to add md5hash passwords.
07:02:06 <xerox> I have also missed the first DB update
07:02:13 <xerox> But yes, he said so, I remember
07:04:13 * shapr boings happily
07:04:33 <vincenz> :/
07:05:04 <xerox> It would be cool to have a tool which abstracts the differences
07:05:24 <shapr> xerox: Anyway, whether it's a graph, database, or filesystem; you need something to give structure, yeah?
07:05:24 <xerox> Like `show` out the old db and `read` it in the new.
07:08:29 <dmhouse> http://today.reuters.co.uk/news/newsarticle.aspx?type=oddlyEnoughNews&storyid=2006-07-12T225123Z_01_N12301241_RTRIDST_0_OUKOE-UK-CANADA-PAPERCLIP.XML
07:08:33 <dmhouse> :)
07:08:43 <madpickle> that's so last week
07:08:44 <madpickle> :(
07:08:59 <dmhouse> Still.
07:09:20 <madpickle> clever.
07:09:28 <madpickle> the guy deserves it for being original
07:09:35 <dmhouse> Hrm. I'm bored. I think I'll translate Benjamin Peirce's LC interpreter in Haskell.
07:10:50 <dmhouse> *Pierce
07:12:26 <zarvok> I <3 TaPL
07:12:33 <zarvok> Pierce's books are great
07:13:18 <zarvok> except for the OCaml
07:13:36 <dmhouse> Nah, that's good.
07:13:44 <dmhouse> Means I can translate them to Haskell as an exercise :)
07:13:54 <zarvok> hehe
07:14:17 <sieni> i don't quite understand why ocaml is used instead of standard ml
07:14:23 <zarvok> would have preferred straight SML though
07:14:24 <zarvok> yeah
07:14:32 <zarvok> ocaml seems kind of crusty to me
07:14:44 <dmhouse> 'Crusty'?
07:14:49 <zarvok> Objects scare me
07:14:51 <zarvok> :)
07:15:18 <sieni> and qpl is a sucky license, which is used for the ocaml compilers
07:15:19 <vincenz> objects are not the core concept of ocaml
07:15:30 <vincenz> functor modules are
07:15:37 <zarvok> Oh, I know, I'm just being random
07:15:52 <zarvok> Mostly I'm just more familiar with SML, but really the differences are minimal enough for it not to matter
07:15:57 <zarvok> at least for pierce's purposes
07:16:03 <dmhouse> vincenz: Happen to know if there's an ocaml-mode for Emacs?
07:16:13 <vincenz> and the crusty part is the lack of type classes and the non-first classness of data constructors
07:16:17 <vincenz> dmhouse: don't use emacs, sorry
07:16:25 <zarvok> dmhouse: there is
07:16:45 <zarvok> I know you can apt-get it on debian, let me see if I can find a webpage for it itself
07:17:11 <zarvok> http://wwwfun.kurims.kyoto-u.ac.jp/soft/lsl/ocaml.html
07:17:14 <lambdabot> Title: O'Caml software/libraries
07:18:31 <dmhouse> Thanks, zarvok.
07:18:55 <zarvok> no problem
07:39:01 <headache> hey any hackers here... i need www.mavishare.com 's php code. simple. i pay 5,000$ if youre successful - that is all, msg me ill be on freenode all day
07:41:05 <Lemmih> headache: http://en.wikipedia.org/wiki/Hacker_definition_controversy
07:41:18 <ookk> what is the difference between the "where" and "let" expressions?
07:41:33 <dmhouse> where isn't.
07:41:39 <dmhouse> (An expression, that is.)
07:41:57 <Lemmih> headache: ANd http://catb.org/jargon/html/H/hacker.html
07:41:59 <dcoutts> ookk, let can be used in an expression context, where can be used in a definition context
07:42:01 <lambdabot> Title: hacker
07:42:19 <ookk> ok
07:42:34 <dmhouse> _Expressions_, like if, case and let...in... can be bundled up in parentheses, e.g. (let x = 4 in \y -> x) "hello", and do lots of other things.
07:42:40 <dmhouse> where is part of a function definition.
07:42:50 --- mode: Igloo set +b *!*@user-12ldilb.cable.mindspring.com
07:42:53 --- kick: headache was kicked by Igloo (Igloo)
07:43:29 <dmhouse> Less subtle differences: when you have guards, where scopes over all of them, let is restricted to a single guard
07:44:55 <ookk> is "let" statements updated in each iteration of a recurisve function?
07:45:45 <dmhouse> Could you give an example?
07:48:21 <ookk> recursive n = let a = 2*n; a*recurisve (n+1)
07:48:24 <ookk> for instance
07:48:48 <ookk> will "a" be updated in each step in the recursion?
07:48:58 <ookk> or will the let-statement only be evaluated once?
07:49:04 <dcoutts> you mean let a = 2*n in a*recurisve (n+1)
07:49:23 <ookk> yes
07:49:27 <dcoutts> it's evaluated each time
07:49:35 <ookk> ok thx
07:49:37 <dcoutts> since it depends on the 'n' parameter of the functions
07:50:02 <dcoutts> if it didn't then the compiler might "lift" it out and only evaluate it once
07:51:15 <dcoutts> ookk, basially the let / where always have the right values given the context
07:51:43 <dcoutts> it has the value you'd expect by evaluating the expression in the context
07:52:14 <ookk> okay
07:52:17 <ookk> thx
07:55:13 <shapr> Yay, hope is built!
07:57:33 <mauke> > let if' a b c = if a then b else c in join((fix.).((join.).).(.((.)join.).(.flip(.).(.flip flip[].(if'.(0/=))).(flip(.))).flip(.).((.).).((:).).flip mod).(.).((.).flip(.).flip div)) $ 10 12345
07:57:33 <lambdabot>  add an instance declaration for (Num (t -> a))
07:57:42 <mauke> > let if' a b c = if a then b else c in join((fix.).((join.).).(.((.)join.).(.flip(.).(.flip flip[].(if'.(0/=))).(flip(.))).flip(.).((.).).((:).).flip mod).(.).((.).flip(.).flip div)) 10 12345
07:57:44 <lambdabot>  [5,4,3,2,1]
07:57:58 <dmhouse> Hah.
07:57:59 <dmhouse> :)
07:58:13 <dmhouse> mauke: Did you do that yourself?
07:58:16 <mauke> yes
07:58:20 <dmhouse> Nice.
07:58:40 <dmhouse> What did it start off being?
07:58:54 <dmhouse> > let if' a b c = if a then b else c in join((fix.).((join.).).(.((.)join.).(.flip(.).(.flip flip[].(if'.(0/=))).(flip(.))).flip(.).((.).).((:).).flip mod).(.).((.).flip(.).flip div)) 6 12345
07:58:54 <lambdabot>  [3,5,0,3,3,1]
07:59:55 <shapr> xerox: Any idea where all the config stuff went? Like, how to set login/pass?
08:00:02 <mauke> > let foo b x = let r n = let q = n `div` b in n `mod` b : if q /= 0 then r q else [] in r x in foo 6 12345
08:00:03 <lambdabot>  [3,5,0,3,3,1]
08:00:13 <mauke> ?pl foo b x = let r n = let q = n `div` b in n `mod` b : if q /= 0 then r q else [] in r x
08:00:14 <lambdabot> foo = fix . ap (flip . (ap .) . (. flip (flip . liftM2 if' (0 /=)) []) . flip . (((.) . (:)) .) . flip mod) (flip div)
08:01:45 <dmhouse> @type zip
08:01:46 <lambdabot> forall b a. [a] -> [b] -> [(a, b)]
08:01:59 <dmhouse> @instances Ord
08:02:00 <lambdabot> (), Bool, Char, Double, Either a b, Float, Int, Integer, Maybe a, Ordering, [a]
08:02:02 <dmhouse> @instances Enu
08:02:03 <lambdabot> Not a class! Perhaps you need to import the  module that defines it? Try @help instances-importing.
08:02:05 <dmhouse> @instances Enum
08:02:06 <lambdabot> (), Bool, Char, Double, Float, Int, Integer, Ordering
08:02:10 <mauke> @. djinn type zip
08:02:11 <lambdabot> -- f cannot be realized.
08:02:12 <dmhouse> Aww, no tuples.
08:03:43 <dmhouse> @hoogle zipM
08:03:44 <lambdabot> Monad.mapAndUnzipM :: Monad a => (b -> a (c, d)) -> [b] -> a ([c], [d])
08:03:44 <lambdabot> Control.Monad.mapAndUnzipM :: Monad m => (a -> m (b, c)) -> [a] -> m ([b], [c])
08:04:03 <dmhouse> ndm: Is there a reason why @hoogle shows both the hierarchial and non-hierarchical module results?
08:04:27 <ndm> dmhouse: , yes, but you're not going to like it :)
08:04:28 <lambdabot> ndm: You have 1 new message. '/msg lambdabot @messages' to read it.
08:04:43 <dmhouse> ndm: Hah, what would it be, then?
08:04:46 <ndm> dmhouse: i removed duplicate ones, but if you notice one is Monad a and one is Monad m
08:05:02 <ndm> and my removal was only text based
08:05:12 <dmhouse> Right. So Hoogle doesn't know it can rename type variables?
08:05:36 <ndm> Hoogle does, but the duplicate elimination is done by hadhtml, which doesn't
08:05:59 <dmhouse> Right.
08:06:12 <ndm> @hoogle ->>
08:06:12 <lambdabot> hoogle: unrecognized option `->'
08:06:12 <lambdabot> unrecognized option `->'
08:06:12 <lambdabot> HOOGLE - Haskell API Search
08:06:12 <lambdabot> (C) Neil Mitchell 2004-2005, York University, UK
08:06:12 <lambdabot>  
08:06:14 <lambdabot> [16 @more lines]
08:06:43 <ndm> @tell dons, yep, its the command line parsing coming into effect - i'll try and fix that for the next version, -- gives similar behaviour
08:06:44 <lambdabot> Consider it noted.
08:06:59 <dmhouse> @type replicateM 7 (return ())
08:07:00 <lambdabot> forall (m :: * -> *). (Monad m) => m [()]
08:07:12 <ndm> the next version of hoogle will give results from Control.Monad only, hence there is no problem left, and no duplicates
08:07:16 <dmhouse> @type zip [1..] $ replicateM 7 (return ())
08:07:17 <lambdabot> forall a. (Num a, Enum a) => [(a, [()])]
08:15:34 <dmhouse> @hoogle entryNew
08:15:34 <lambdabot> No matches found
08:15:55 <dmhouse> Hmm. How can I find the location of a function within the Gtk2Hs source tree?
08:16:19 <dcoutts> dmhouse, use the haddock index
08:16:23 <dcoutts> that tells you the module
08:16:32 <dmhouse> Ah, clever. Thanks.
08:16:33 <dcoutts> or just use grep -R :-)
08:17:13 <dcoutts> dmhouse, also, since you're looking for an Entry thing just look in the Entry module
08:17:40 <dmhouse> Yeah, I forgot that Gtk calls text boxes
08:17:42 <dmhouse> 'entries'.
08:21:21 <ndm> dmhouse: or build hoogle docs for gtk2hs
08:21:48 <dcoutts> ndm, ah yes, I was going to do that, if I do did you want me to send them to you?
08:21:56 <ndm> dcoutts: don't both, i will
08:22:12 <ndm> i'm writing a new tool to automate the generation using the new haddock stuff
08:22:20 <ndm> so can have gtk2hs as the first test case
08:22:21 <shapr> Wow cool, TMR got mentioned in the history of Haskell.
08:22:28 <shapr> And one of my cheesy quotes too!
08:22:30 <dcoutts> shapr, yeah, I noticed that
08:22:31 <dcoutts> heh
08:22:35 <dcoutts> didn't notice that bit
08:22:41 <ndm> yeah, there is also a passing mention of yhc
08:22:52 * dcoutts noticed that Gtk2Hs & wxHaskell were mentioned
08:23:43 <ndm> with a "and wxHaskell is the better one" :)
08:23:43 <dmhouse> So did Lemmih, and they referred to him as 'Lemmih' and not 'David Himmelstrup' :)
08:24:11 <dcoutts> ndm, as the more popular they said
08:24:27 <ndm> hehe, having played with both now, i'm pretty sure gtk2hs will win in the end
08:24:49 <dcoutts> ndm, so long as we can find the time to keep doing releases I think so too
08:25:08 <dcoutts> there havn't been any wxHaskell releases for yonks
08:25:16 <Lemmih> I got mentioned?
08:25:18 <ndm> indeed, us poor windows users are left with nothing
08:25:22 <dcoutts> and Gtk+ keeps improving
08:25:32 <dcoutts> Gtk+ 2.10.0 is improved on Windows
08:25:38 <dcoutts> and now has a native OSX backend
08:25:40 <ndm> wxWindows beats Gtk+ any day, i'm afraid
08:25:55 <ndm> but the haskell bindings for Gtk are just better maintained
08:25:56 <dmhouse> Lemmih: I'll search for your name. I can't remember what it was regarding.
08:25:56 <Spark> why?
08:25:58 <dmhouse> Perhaps Hackage.
08:26:07 --- mode: ChanServ set +o dmhouse
08:26:07 <Spark> why is wxwindows better
08:26:08 <Lemmih> Neat!
08:26:15 * dcoutts heard reports from wxWidgets users who said that wxWidgets doesn't look that good on windows either
08:26:16 <ndm> Spark, more native
08:26:24 <Spark> why is that an advantage?
08:26:33 <Spark> surely thats a disadvantage these days
08:26:33 <ndm> it doens't look that good, but it looks a lot better
08:26:48 <xerox> Was SoC mentioned in the paper as well? :)
08:26:49 <Spark> appearance is meaningless if the toolkit is customisable
08:26:50 <ndm> blending in with all the other applications on the users computer is a disadvantage?
08:27:06 <Spark> "blending in"?
08:27:07 <dcoutts> I've never seen these differences, except the file dialog
08:27:10 <ndm> yes, but i don't want a picture of britney spears on every program - i just want it to look like windows
08:27:19 <ndm> dcoutts: its not too bad, but hte menu bars are horribly bad
08:27:26 <Spark> then set the default skin to whatever you want
08:27:29 <dmhouse> Lemmih: http://paste.lisp.org/display/22679
08:27:38 <ndm> which is surprising, given that native windows is just white background, black text!
08:27:39 --- mode: dmhouse set -o dmhouse
08:27:49 <dcoutts> ndm, if you can get a screenshot showing the difference then file a bug, or send them to me and I'll file a bug
08:27:52 <Lemmih> dmhouse: Right.
08:27:55 <ndm> Spark: but there is not a default skin that looks like my program
08:28:12 <Spark> why not>
08:28:23 <dmhouse> Lemmih: You should read the paper, it's worth it.
08:28:52 <ndm> I don't know why there isn't. its beyond me
08:28:55 <Spark> what do you mean by "blending in"?
08:29:13 <ndm> looking exactly like a native windows gui app
08:29:24 <Spark> gtk can do that
08:29:34 <Spark> but its not necesaarily a good thing
08:29:41 <Spark> you might want the appearance to be maintained cross platform
08:29:46 <dcoutts> ndm, unfortunately the win32 box I've got is not much good for spotting theme glitches since it's over rdesktop in 16 colours :-)
08:29:57 <ndm> no, only someone who uses multiple desktops would want that
08:30:03 <ndm> and even then, its unlikely
08:30:13 <ndm> for almost every windows user, they want a windows program to look like windows
08:30:15 <dcoutts> yeah, that's why noone likes java AWT
08:30:22 <ndm> (actually, thats wrong, most are stupid and like skins, grr!)
08:30:34 <dcoutts> though windows apps are suprisingly inconcitent
08:30:41 <ndm> i know!
08:30:46 <Spark> but you havent explained why you cant configure gtk to look like windows
08:30:49 <dcoutts> eg each version of office has a different theme
08:30:56 <ndm> Spark: you can, its just that no one has
08:30:57 <Spark> and which windows toolkit? the new .net stuff? the win98 style?
08:31:04 <Spark> ndm: i bet they have
08:31:11 <Spark> i have seen aqua themes
08:31:21 <dcoutts> Spark, it's mostly right, but there are apparently some minor differences, ndm says the menues are not quite right
08:31:42 <Spark> is that inherent to gtk or just a bug in the skin though
08:31:56 <dcoutts> just a thing no one has pointed out / fixed yet
08:31:57 <ndm> Spark: the native one, there really is a native one (check notepad for examples :) )
08:32:11 <ndm> am just working on some screenshots to illustrate them :)
08:32:13 <dcoutts> I've seen bug reports on similarl minor issues, so I think if someone points it out clearly then it'll be fixed
08:32:36 <dcoutts> it may be that Gtk+ 2.10.0 is better there, they mentioned Windows theme improvements
08:33:25 <ndm> is that released yet?
08:33:36 <ndm> makes sense for me to check the bug is still there before reporting
08:34:10 <ndm> I also found a difference in the behaviour as well with menus
08:34:46 <ndm> http://www-users.cs.york.ac.uk/~ndm/temp/gtk2hs.png
08:35:06 <dcoutts> ndm, ta
08:35:11 <ndm> I can spot about 4 differences, which are:
08:35:27 <ndm> 1) menu bar, gradient on Gtk2hs, solid on Windows
08:35:45 <ndm> 2) Blue highlight in the wrong place, not flush to the window
08:36:02 <dcoutts> Gtk+ 2.10.0 is out now, yes, there arn't any win32 insaler yet I think
08:36:07 <ndm> 3) Menu border too heavy, black instead of gray
08:36:19 <ndm> 4) Icons, although I can ignore that one
08:36:35 <dcoutts> ndm, is that the standard XP theme then?
08:36:43 <ndm> and behaviour wise, click on a menu item (i.e. File) then press Alt and in Windows the menu disappears, in Gtk2Hs is stays there
08:36:54 <ndm> dcoutts: yep, standard XP Luna, which is the default
08:37:14 <dcoutts> right'o, I'll record this info for a bug report
08:37:49 <dcoutts> it would be good to check if this is still in 2.10, I'll ping when the win32 installers for that are available
08:38:09 <ndm> I just flipped my machine to the other XP Style, and there are bugs, but different ones
08:38:12 <ndm> want a shot of that too?
08:38:25 <ndm> Gtk did flip style in response, so it understands the difference
08:38:53 <wolverian> windows doesn't exist! la la la I can't hear you
08:39:46 <ndm> dcoutts: http://www-users.cs.york.ac.uk/~ndm/temp/gtk2hs2.png
08:40:12 <ndm> the other style, Windows XP, Classic Windows, still wrong in a similar number of ways, plus the hilight rectangle is wrong
08:40:27 <dcoutts> yes I see
08:40:54 <dmhouse> Things that open dialogue boxes need a '...' suffix to their label, at least in Windows.
08:41:22 <wolverian> I wonder if it's noteworthy that without cleartype the windows theme doesn't even antialias the menu texts by default. I believe gtk does.
08:42:04 <dcoutts> gtk uses the windows text drawing api on win32 so it should be the same
08:42:55 <wolverian> ah, okay. never mind me then :)
08:43:09 <Spark> ndm the gtk one looks better though :)
08:43:53 <dcoutts> heh, that's not really the point
08:44:03 <dcoutts> looking right is important
08:44:12 <ndm> Spark: even so, it looks different, unfamiliar - even if in the abstract one looks better, it still looks worse compared to notepad
08:44:17 <wolverian> you conformist :)
08:44:47 <Spark> ndm: why dont you just edit the style yourself
08:45:10 <ndm> Spark: I care enough to complain, but not enough to do anything about it
08:45:25 <dcoutts> it's in the Gtk WIMP theme code, it's not that easy to edit
08:48:36 <ndm> dcoutts: any suggestions how i would convert the Gtk2Hs repo to just plain Haskell code?
08:48:44 <ndm> i.e. transforming the chs files?
08:48:53 <dcoutts> ndm, run c2hs on each of them
08:48:58 <dcoutts> ndm, bascially do a build
08:49:10 <dcoutts> that generates and keps all the .hs files
08:49:15 <ndm> can you build it with Cabal yet?
08:49:19 <dcoutts> no
08:49:22 <dcoutts> in fact jsut ./configure --enable-docs
08:49:29 <dcoutts> then edit the haddock command
08:49:39 <Cale> dcoutts: If I wanted to write a program in which there was a terminal with ansi colour support using gtk2hs, what would you recommend?
08:49:45 <dcoutts> so that it uses the version and flags that you want
08:50:17 <dcoutts> Cale, I'd recommend finnishing off the VTE binding that I started
08:50:23 <Cale> dcoutts: :)
08:50:33 <dcoutts> Cale, VTE is the terminal widget
08:50:52 <Cale> That would be handy. I'm considering writing a mud client.
08:51:05 <Cale> All the mud clients for linux are painful to use.
08:51:49 <ndm> dcoutts: it complains it can't find  Package requirements (glib-2.0 >= 2.0.0 gobject-2.0 >= 2.0.0)
08:52:13 <ndm> are they likely to be already installed with gtk, and need pointing out to the config, or need installing additionally?
08:52:23 <dcoutts> ndm, they come with gtk
08:52:43 <dcoutts> ndm, you're building from source on windows?
08:52:50 <dcoutts> I thought you couldn't abide msys
08:53:02 <ndm> i have no choice if i want haddock docs it seems
08:53:07 <ndm> i can't really, but must occasionally
08:53:33 <dcoutts> are you following the instructions on the gtk2hs site for building from source on win32
08:53:45 <dcoutts> ndm, if you tell me what to do, I can build the hoogle bits
08:54:07 <ndm> it should just be pass --hoogle to haddock
08:55:10 <ndm> if you are using Haddock from darcs
08:56:27 <dcoutts> right
08:56:43 <dcoutts> ndm, btw, how does the menu drawing compare to that of IE
08:56:45 <ndm> if you can give me a hoogle database, i'll put it on haskell.org/hoogle
08:56:50 <dcoutts> ok cool
08:57:14 <dcoutts> I found a Gtk= drawing bug report and they're discussing the difference between say IE and WordPad
08:57:23 <dcoutts> http://bugzilla.gnome.org/attachment.cgi?id=64326&action=view
08:57:44 <ndm> dcoutts: IE is closer - it has gradient menu bars (bad), and the highlight is not at the left (bad), but it is at the top (good) and the actual menu is lighter (good)
08:58:02 <ndm> thats XP classic
08:58:05 <ndm> but yeah, IE is wrong
08:58:14 <ndm> WordPad uses Windows menus
08:58:19 <ndm> IE doesn't
08:58:25 <dcoutts> ok
08:58:50 <ndm> Gtk matches IE in a few places, but has bugs that neither IE or native have
08:59:52 <dcoutts> and then office is different again:
08:59:53 <dcoutts> http://bugzilla.gnome.org/attachment.cgi?id=65149&action=view
09:01:27 <ndm> yeah, office is much much worse than either IE, Gtk2Hs or Native
09:01:49 * dcoutts wonders which gtk should try to match
09:01:54 <ndm> thats office 2000 I think, every version has an entirely different UI
09:01:59 <ndm> most definately native windows
09:02:24 <ndm> native windows is what is provided by the Windows API, and is the right one (TM)
09:02:28 <ndm> everyone else is wrong
09:02:51 <ndm> although it would be reasonable to provide other GUI skins for windows matching those other styles, after native windows was done, if anyone cared
09:03:05 <wolverian> vista will add complications..
09:03:41 <bolrod> hahahaha.. dayum.. did google just get hacked?
09:04:21 <dmhouse> bolrod: ?
09:04:34 <bolrod> check google on the 'image' pages
09:04:39 <bolrod> and the next button looks like this
09:04:43 * shapr boings
09:04:43 <bolrod> http://images.google.nl/intl/en/nav_next.gif
09:04:52 <bolrod> that's friggin' weird
09:05:05 <xerox> ?
09:05:15 <bolrod> indeed
09:05:19 <xerox> Seems right here.
09:05:22 <ndm> bolrod: looks normal to me...
09:05:22 <wolverian> uh.. what?
09:05:30 <ndm> g l e >
09:05:37 <bolrod> damn
09:05:44 <glguy> You got hacked ;)
09:05:44 <ndm> bolrod: can you copy the image, or screen shot it?
09:05:56 <bolrod> that link looks ok to you?
09:06:00 <dmhouse> bolrod: Why, what does it look like for you?
09:06:12 <bolrod> I'm opening it with opera..
09:06:23 <bolrod> with firefox it looks ok
09:07:29 <bolrod> heh ;/
09:07:42 <dmhouse> What does it look like?;
09:08:16 <bolrod> k sec
09:08:59 <bolrod> http://bolrod.homelinux.org/nav_next.jpe
09:09:32 <wolverian> o.o
09:09:48 <dcoutts> ndm, what gtk verson were you using for those screenshots?
09:09:59 <ndm> dcoutts: how can i tell?
09:10:08 <bolrod> yes.. I know.
09:10:21 <bolrod> maybe opera fuxxored up or something
09:10:23 <dcoutts> ndm, the installer says, or the windows instaleld app box says
09:12:07 <dmhouse> Eurgh. Debugging run-time errors sucks.
09:12:56 <ndm> dcoutts
09:12:58 <ndm> Development Environment 2.8.18-rc1
09:12:59 <ndm> Runtime 2.4.7 rev a
09:13:03 <ndm> dmhouse: tried Hat yet?
09:13:13 <dcoutts> ndm, which were you actually usign then?
09:13:16 <dmhouse> ndm: Actually, I haven't.
09:13:38 <ndm> dcoutts: no idea, it just lists both in teh list
09:13:47 <dcoutts> probably 2.8, as 2.4 would not have any native theme
09:13:56 <ndm> that would be my guess, i'll uninstall 2.4
09:13:59 <dmhouse> I think when the SoC project to implement good debugging in GHCi is done I'm going to sit down and write kickass emacs integration for GHCi, Hat and a bunch of other Haskell debugging stuff.
09:14:03 <dcoutts> ndm, good idea
09:14:08 * dmhouse saw a vide of SLIME and was very jealous.
09:14:12 <wolverian> bolrod, it's most likely a glitch in your opera's cache.
09:14:23 <xerox> dmhouse: You'll get tons of positive karma this way!
09:14:25 <bolrod> I'm cleaning it now
09:14:38 <neologism> hwos the ghci debuging project going?
09:14:42 <ndm> dmhouse: http://www-users.cs.york.ac.uk/~ndm/projects/hat.php
09:14:44 <lambdabot> Title: Neil Mitchell - Hat
09:14:46 <bolrod> but I swear.. I have never seen that picture before
09:14:57 <ndm> look at teh screenshot of hat-stack, how could you want more than that :)
09:15:13 <dmhouse> ndm, a Hat GUI would be wonderful :)
09:15:36 <ndm> dmhouse: that is one, its only got hat-stack and hat-cover so far, but hat-observe is targeted for Monday
09:16:07 <dmhouse> Wow, that looks like a really target for part of haskell-mode.
09:16:19 <dmhouse> I'd like to wait until the work on GHCi is complete, though.
09:16:30 <bolrod> DUDE!  now the other picture is something completely different O_o
09:16:59 <ndm> dcoutts: the installer sucked, it vaped both of them :(
09:21:34 <ndm> http://haskell.org/hoogle/?q=Gtk&package=gtk
09:21:35 <lambdabot> Title: Gtk - Hoogle
09:21:53 <dcoutts> ndm, heh :-)
09:22:23 <dcoutts> ndm, I'll do the haddock/hoogle bit when I'm done with the Gtk+ theme bug report
09:22:46 <ndm> dcoutts: cool, its a total hack, but should give Gtk2hs stuff quicker than waiting for hoogle 4
09:25:39 * shapr smacks self
09:26:40 <dmhouse> shapr: ?
09:28:18 <shapr> Hiya marc_vw_, how's code?
09:28:36 <shapr> dmhouse: Ah I just dropped the Hope database on my desktop, not my server.. no wonder it wasn't working.
09:28:42 <shapr> That's usually a sign that I need a break.
09:28:52 <dmhouse> shapr: Nice. :)
09:29:42 <marc_vw_> shapr: one moment, i need to get the nick back
09:30:54 <glguy> Is this a joke? "Darcs is decentralized, based on a "theory of patches" with roots in quantum mechanics."
09:31:14 <mahogny> what makes you think so?
09:31:40 <glguy> the roots in quantum mechanics
09:31:43 <mahogny> :)
09:31:44 <xerox> The chief captain is a physicist.
09:31:47 <marc_vw_> commutators and symmetry
09:31:53 <marc_vw_> are centrol to darcs and qm
09:32:06 <marc_vw_> i have recognized no more similarities yet
09:32:41 <ndm> glguy: that might be the underlying theory, but you can entirely ignore that statement
09:32:48 <ndm> it is entirely decentralized
09:32:50 <dmhouse> glguy: If you read the Theory of Patches bit, he explains how concepts from Quantum Mechanincs inspired the Patch Theory.
09:33:07 <ndm> glguy: but as a darcs user, there really isn't much need to
09:33:42 <ndm> dcoutts, 2.8.18-rc1, definately
09:34:54 <glguy> Does GHC 6.4.2 optimize tail recursion by default? or is -O needed?
09:35:20 <ndm> glguy: I would strong guess it doesn anyway
09:35:46 <ndm> in fact, its pretty impossible to evaluate a lazy language without tail recursion, every haskell implementation will do it by default
09:36:34 <glguy> good to know :)
09:36:41 <xerox> glguy: No, it doesn't.
09:37:03 <dmhouse> xerox: ? Why not?
09:37:44 <marc_vw> ndm: can i have link for that theory of patches text you mentioned?
09:38:03 <marc_vw> dmhouse: can i have link for that theory of patches text you mentioned?
09:38:11 <ndm> marc_vw: i didn't mention it, but its in the darcs user manual, as an appendix
09:38:16 <marc_vw> ndm: sorry
09:38:18 <dmhouse> marc_vw: It's part of the Darcs documentation.
09:38:28 <marc_vw> hm i read it several times
09:38:38 <marc_vw> another run :-)
09:40:20 <xerox> Oh
09:40:27 <xerox> It doesn't do CSE by default, not TCO.
09:40:30 <xerox> No idea about TCO.
09:41:19 <dmhouse> I would guess it does TCO, otherwise nearly all Haskell programs would have really bad space performance. :)
09:41:41 <xerox> That would be my guess too :)
09:42:16 <marc_vw> i found it http://abridgegame.org/darcs/manual/node8.html#SECTION00810000000000000000
09:42:17 <lambdabot> Title: Theory of patches
09:43:04 <marc_vw> hm, not more than about sloppy proofs and operators
09:44:24 <marc_vw> what i still didn't get is the meaning of these ' on patches
09:45:53 <mauke> http://multimedia.alternet.org/mediafiles/DJ_teds_techno_tubes_15_11072006.mp3
09:50:51 <glguy> @hoogle foldl'
09:50:52 <lambdabot> Data.List.foldl' :: (a -> b -> a) -> a -> [b] -> a
09:52:38 <dmhouse> marc_vw: such as?
09:53:13 <marc_vw> why does he not write P1 P2 = P2 P1 simply?
09:53:34 <marc_vw> he uses the apostrophes and not the =
09:54:01 <dmhouse> marc_vw: I'm not sure which example you're refering to.
09:55:10 <marc_vw> dmhouse: definition 2
09:55:37 <dmhouse> marc_vw: They're P1 and P1' aren't the same patch.
09:55:45 <dmhouse> Err, s/They're//
09:55:57 <marc_vw> dmhouse: i am stupid i need an example
09:56:38 <marc_vw> dmhouse: maybe this guy is just cautious
09:56:44 <dmhouse> marc_vw: A patch is a set of changes with an associated context, right?
09:56:50 <marc_vw> dmhouse: yes
09:56:53 <dmhouse> The contexts aren't the same if you swap the order around.
09:56:57 <dmhouse> So it's not the same patch.
09:57:30 <xerox> That depends on how do you make the context, I think?
09:57:36 <marc_vw> this would mean patch as in that bit of diff output, not patch as in a certain change
09:57:43 <dmhouse> I don't remember the details, it's a while since I've read that.
09:57:57 <marc_vw> you are probably right
09:58:03 <xerox> marc_vw: How is `certain change' defined?
09:58:05 <dmhouse> It means 'patch' as in the formal definition of patch that he gives.
09:59:51 <marc_vw> this would be a nice idea
10:00:22 <marc_vw> he lists certain types of patches
10:02:16 <dmhouse> Right, I've re-read bits of that document, I think I can explain.
10:02:37 <dmhouse> A patch, formally, is a set of changes with the context which describes the tree of files it gets applied to.
10:02:57 <dmhouse> So with P1 P2, the changes that P1 makes would be reflected in P2's context.
10:02:58 <xerox> An annotated tree?
10:03:25 <dmhouse> In other words, P2 depends on P1.
10:03:42 <dmhouse> So if you wanted to apply P2 _first_, you'd have to change its context to reflect this change in sequence.
10:03:47 <xerox> What does "P1 P2" mean?
10:04:16 <dmhouse> Oh, hang on, my terminology is wrong.
10:04:36 <dmhouse> P1 P2 = apply patch P2, then apply patch P1.
10:04:47 <dmhouse> So with P2 P1, the changes that P1 makes would be reflected in P2's context.
10:04:59 <dmhouse> In other words, P2 depends on P1.
10:05:11 <dmhouse> So if you wanted to apply P2 _first_, you'd have to change its context to reflect this change in sequence.
10:05:18 <dmhouse> There, I think that's right.
10:05:33 <xerox> What does notationally mean P2 P1 ?
10:06:15 <dmhouse> xerox, P1 P2 = apply patch P2, then apply patch P1.
10:06:35 <dmhouse> Actually, what I said might not be right.
10:07:44 <dmhouse> Hrm.
10:09:50 <dmhouse> Hmm, I'm not surel;
10:09:57 <dmhouse> s/l;/./
10:10:30 <marc_vw> i think he mixes implementation and semantics
10:10:58 <marc_vw> from a semantic standpoint, a patch P should stand for the associated change of the underlying object
10:11:09 <marc_vw> it should not depend on context i think
10:11:31 <marc_vw> if i look at a real patch, of course it is usually given as bit of context
10:11:48 <dmhouse> Well, an explicit context makes it useful for when you want to, e.g. prove that two patches don't commute (they conflict)
10:13:54 <marc_vw> i see it more as a kind positional marker that is somewhat resistant to certain changes :-)
10:14:25 <dmhouse> How do you mean?
10:14:40 <xerox> Like a circle in a plane from which the point representing the patch can't move out.
10:14:45 <marc_vw> the context bit allows to say i mean that bit of the soruce
10:14:55 <marc_vw> it is better than a line number
10:15:05 <marc_vw> because that fails if some one adds or deletes lines
10:15:17 <dmhouse> What if there are identical sections of code?
10:15:49 <marc_vw> usually patch(the tool) gives so much context that this unique
10:16:00 <xerox> I'd take an infinite number of monkeys, and an infinite number of pcs and try practically.
10:17:37 <johwil> > 5 + 5
10:17:42 <lambdabot>  10
10:18:08 <xerox> ?botsnack
10:18:08 <lambdabot> :)
10:18:15 <lightstep> are ml functors stronger than type classes? can i emulate runtime dictionary creation with modules (modulo the phase shift)?
10:19:20 <johwil> xerox : Do you know how to get a list of commands?
10:19:34 <xerox> Yup. Use ?list.
10:20:00 <johwil> xerox: Thanks
10:20:05 <johwil> ?list
10:20:05 <lambdabot> list [module|command]. Where modules is one of:
10:20:05 <lambdabot> babel base compose dice dict djinn drhylo dummy elite eval fact fresh haddock help hoogle instances karma lambda localtime log more pl poll pretty quote search seen slap spell state system tell todo
10:20:05 <lambdabot> topic type unlambda url version vixen where
10:20:31 <xerox> You're welcome. Sometimes it's better to /QUERY lambdabot directly for these affairs of exploration.
10:20:55 <bolrod> @vixen do you prefer channels or queries
10:20:55 <johwil> You're so right, Sorry!
10:20:55 <lambdabot> i do occassionally, i guess
10:21:07 <bolrod> ic
10:21:34 <bolrod> @vixen do you prefer queries over channels?
10:21:34 <lambdabot> yes i do
10:21:37 <bolrod> see
10:21:53 <xerox> Some other times, conversely, the whole channel start some orgasmic collaborative party poking lambdabot.
10:22:03 <xerox> They call it "golfing."
10:22:08 <bolrod> :o
10:22:20 <bolrod> @vixen do you like xerox ?
10:22:20 <lambdabot> yah, i like
10:22:27 <xerox> G'day monochrom-sensei.
10:22:28 <bolrod> ok ;)
10:22:49 <monochrom> good day
10:26:00 <dmhouse> @ask kowey what program he uses to create the image on, e.g. the arrows page/monad page/darcs's patch theory page.
10:26:01 <lambdabot> Consider it noted.
10:26:26 <xerox> dmhouse: which images?
10:26:39 <dmhouse> xerox: e.g. http://en.wikibooks.org/wiki/Understanding_darcs/Patch_theory
10:27:14 <xerox> Cool.
10:33:08 <ndm> dcoutts: i have a working but highly hacked Gtk search engine now
10:34:51 <ndm> @seen dcoutts
10:34:52 <lambdabot> dcoutts is in #haskell-overflow, #haskell and #gentoo-haskell. I last heard dcoutts speak 1 hour, 4 minutes and 35 seconds ago.
10:35:17 <shapr> @yow !
10:35:17 <lambdabot> Are the STEWED PRUNES still in the HAIR DRYER?
10:35:38 <ValarQ> heh
10:36:04 <roconnor> @vixen
10:36:04 <lambdabot> i understand
10:36:18 <ValarQ> @quote
10:36:19 <lambdabot> ChrisKuklewicz says: Are there little known Haskell idioms for doing math? Is there an undocumented -funleash-fortran parameter?
10:37:13 <shapr> @quote
10:37:14 <lambdabot> dcnstrct says: even the #lisp people say go with haskell
10:37:22 <shapr> xerox: I have the new Hope working, sort of ...
10:37:27 <xerox> Kewl.
10:37:37 <shapr> I think there's something wrong with the CSS though.
10:38:06 <xerox> Steal bringert's last one :O
10:38:24 <dmhouse> @quote
10:38:24 <lambdabot> lispy says: I just remembered this dream i had the other morning.  I was trying to tell my alarm clock how to snooze by using a list comprehension
10:38:29 <dmhouse> @quote
10:38:29 <lambdabot> SamB says: Boy, point-free Arrows are worse than Forth...
10:38:35 <monochrom> hahahaha
10:38:36 <dmhouse> @quote
10:38:36 <lambdabot> mattam says: [Monads are] much more elegant [than soccer] in general.
10:38:42 <xerox> hah hah hah
10:38:45 <dmhouse> @quote
10:38:45 <lambdabot> reddi says: and now i know: IT DOES NOT WORK ALWAYS ;-)
10:38:51 <dmhouse> @quote
10:38:51 <lambdabot> malcolm says: I don't believe you need to invoke the full awesome majesty of Template Haskell
10:38:54 <xerox> How's that possible, lispy ?
10:38:58 <dmhouse> I like that one.
10:39:00 <dmhouse> @quote
10:39:00 <lambdabot> jmob| says: I want the world to stop at that point, go away, and give me it's argument..
10:39:10 <dmhouse> @quote
10:39:10 <lambdabot> adept says: Tried to co-read and co-understand comonads, but got co-re dump
10:39:20 <dmhouse> @quote
10:39:21 <lambdabot> dons says: who was it who said (shapr?) that they welcome their competitors using languages other than haskell? it's a bad sign if your enemies start coding in haskell!
10:39:33 <dmhouse> @quote
10:39:33 <lambdabot> hakko says: most programmers have a lot of religious issues about their work, yes.
10:39:35 <shapr> I said it about windows actually, but yeah...
10:39:39 <dmhouse> Okay, I'll stop. :)
10:39:43 <shapr> @quote
10:39:43 <lambdabot> jmob| says: I want the world to stop at that point, go away, and give me it's argument..
10:40:08 <dmhouse> @quote
10:40:08 <lambdabot> SyntaxNinja says: I think that the compiler authors will fly here from England just to kill me if I did that
10:40:13 <dmhouse> @quote
10:40:14 <lambdabot> gFunk says: [the main advantage of functional programs are that they're] incorrect the first 1000 times you try to compile it!
10:40:16 <xerox> ``uote
10:40:18 <xerox> Ops.
10:40:23 <dmhouse> @quote
10:40:23 <lambdabot> sethk says: it's certainly true that you can clobber the stack in C without even getting out of bed in the morning
10:40:27 <dmhouse> @quote
10:40:27 <lambdabot> kolmodin says: I would rather lose my left arm than write it in Java
10:40:31 <dmhouse> @quote
10:40:31 <lambdabot> lispy says: I just remembered this dream i had the other morning.  I was trying to tell my alarm clock how to snooze by using a list comprehension
10:40:33 <dmhouse> @quote
10:40:33 <lambdabot> xerox says: I am really interested specifically in bottoms in this very moment.
10:40:44 <shapr> Booty call!
10:40:45 <dmhouse> @quote
10:40:45 <lambdabot> ihope says: Laziness is free, but it doesn't always pay off.
10:40:58 <shapr> I like that one.
10:41:10 <dmhouse> 'Hard work pays off later. Laziness pays off now!'
10:41:18 <glguy> I was just reading "Tying the Knot" and wondered if the garbage collector can determine when a circular list is no longer needed
10:41:26 <xerox> "I want the world to stop at that point, go away, and give me it's argument.." is great
10:41:51 <dmhouse> I like lispy's idea for turning on the snooze button.
10:41:54 <shapr> glguy: When no one has a handle to it, it goes away.
10:42:10 <roconnor> glguy: garbage collectors ought to be able to handle circular structures: mark-and-sweep
10:42:18 <glguy> alright
10:42:24 <monochrom> Yes, the garbage collector can free it.
10:42:28 <glguy> I didn't know if it was some simple reference counter or what
10:42:50 <monochrom> If some system can't free it, the system is evidently not a garbage collector.
10:42:59 <glguy> but I guess that nothing about haskell is "simple" ;)
10:43:41 <shapr> The whole program runs from a single top level statement, so I think you could use a simple reference counter as long as you always count references from the root.
10:44:26 * shapr isn't sure that made any sense.
10:44:37 <monochrom> I can't make sense of it.
10:45:26 <shapr> Well, mark-and-sweep does just that, so...
10:45:37 <monochrom> But I propose a debate topic for today.  "CS curricula should stop advertising reference counting as a garbage collector."
10:45:40 <Cale> glguy: when things aren't connected to the current evaluation, they get removed.
10:45:54 <glguy> yeah, makes sense now
10:46:05 <roconnor> isn't reference counting an optimisation for a GC?
10:46:35 <glguy> I've got a bad habit of "thinking outloud" on IRC
10:46:41 <shapr> glguy: That's a good habit.
10:46:54 <shapr> I do it myself, and I learn lots that way.
10:47:09 <jgrimes> doesn't CPS force evaluation thus making it non-lazy?
10:47:23 <monochrom> It's a good habit as long as you also loudly announce you're thinking out loud, so that people know.
10:47:36 <shapr> I'm always thinking out loud.
10:47:40 <shapr> I think... ;-)
10:47:45 <xerox> Aha.
10:48:11 <roconnor> jgrimes: not really, CPS changes the types
10:48:11 <xerox> Paradoxic, eh?
10:49:04 <shapr> xerox: you think the output of ${echo 'mypassword' | md5sum } should work for the md5 hash bringert is using now?
10:49:27 <ndm> roconnor: typically reference counting is slower than using a GC
10:49:28 <xerox> I think so, shapr.
10:49:29 <palomer> @palomer
10:49:30 <lambdabot> As someone who's studied GADTs, I've never found a use for them.
10:49:39 <jgrimes> roconnor, care to explain further? I am just trying to understand CPS...
10:50:04 <xerox> Why tune on @palomer while we can get you live?
10:51:10 <ndm> the palomer on IRC is merely a bot, but @palomer has lamdabot give him a prod and get a real  live quote from him
10:51:22 <ndm> or thats my theory at least ;)
10:53:13 <roconnor> jgrimes: actually now that I think about it, the types changing and the lazy evaluation are two separate issues.
10:53:23 <roconnor> anyhow, evaluation is still lazy.
10:53:51 <jgrimes> even if evaluation of one function is guaranteed before the evaluation of another function?
10:53:57 <roconnor> but the functions being evaluated are a bit more complicated.
10:55:01 <roconnor> the functions are ``sequenced'' but the order of normalization is still lazy.
10:55:09 <jgrimes> hmm
10:55:10 <jgrimes> ok
10:55:38 <roconnor> I'll make the claim that the sequencing is only usefull when you start using callcc
10:55:48 <roconnor> otherwise it is irrelevent
10:55:59 <roconnor> or at least not noticable or something
10:56:11 * roconnor not compeletely sure if what I am saying is true.
10:57:24 <jgrimes> all right :D
10:58:55 <dcoutts> ndm, where is that then?
10:59:06 <ndm> dcoutts, http://haskell.org/hoogle/?package=gtk&q=Gt
10:59:07 <lambdabot> Title: Gt - Hoogle
10:59:17 <ndm> all it needs is a hoogle database for Gtk, and its ready to go
10:59:24 <ndm> provided no one types in a blank search...
10:59:50 <dcoutts> ok, I'm doing that bit now
11:00:00 <ndm> cool
11:01:51 <roconnor> jgrimes: I could be wrong
11:04:10 <dcoutts> ndm, so with haddock --html I use a bunch of other options, eg --odir, --prologue, etc do I need any opts with --hoogle?
11:06:14 <ndm> dcoutts, no, it should just drop out a hoogle.txt in the working directory
11:06:20 <ndm> it may well ignore all other options
11:07:14 <shemale_magic> my work is considering bringing in jboss for 20k or so
11:07:19 <shemale_magic> free sotware but 20
11:07:21 <shemale_magic> 20k
11:07:39 <shemale_magic> thats to start per year
11:09:36 <shemale_magic> they want distributed transaction
11:10:35 <dcoutts> ndm, ok got it
11:10:45 <dcoutts> just email it to you then?
11:10:52 <dcoutts> email addr?
11:10:58 <ndm> yep, thats good ndmitchell    -AT     gmail
11:13:43 <glguy> When GHC explains a type as a->a vs t->t what is it trying to tell me
11:14:09 <dcoutts> ndm, sent :-)
11:14:22 <ndm> dcoutts: got
11:14:47 <dmhouse> glguy: Nothing.
11:15:00 <dmhouse> glguy: type variables names are interchangeable.
11:15:13 <SamB> glguy: it just depends where the type variable comes from
11:15:26 <glguy> right, but there must be some reason that it jumps to the middle of the alphabet
11:15:46 <monochrom> Is that in an error message?
11:15:56 <glguy> no
11:16:07 <glguy> :t (\f -> f)    for my example
11:16:30 <ndm> http://haskell.org/hoogle/?package=gtk&q=textView
11:16:31 <lambdabot> Title: textView - Hoogle
11:16:50 <ndm> @type (\f -> f)
11:16:51 <lambdabot> forall t. t -> t
11:17:01 <glguy> @type foldl
11:17:02 <lambdabot> forall a b. (a -> b -> a) -> a -> [b] -> a
11:17:09 <monochrom> @type (\f g -> (f,g))
11:17:10 <lambdabot> forall a b. a -> b -> (a, b)
11:17:34 <glguy> exactly... why does it jump around the alphabet? it can't just be arbitrary
11:17:35 <monochrom> I can't explain the choice of names, but it is not worrisome.
11:17:39 <glguy> @type id
11:17:40 <lambdabot> forall a. a -> a
11:17:41 <ndm> dcoutts: all done
11:17:55 <monochrom> Oh, you don't know how arbitrary programmers are :)
11:17:55 <ndm> glguy: id has an explicit type sig, using a, hence why it uses a there
11:18:00 <dcoutts> ndm, cool, so how do I link to it?
11:18:08 <ndm> i bet t is from type
11:18:21 <ndm> dcoutts: the issue is that there is no front page for gtk
11:18:28 <ndm> give me a sec, and i'll remedy that
11:18:31 <glguy> but the \f -> f example used t's while \f g->(f,g) used a and b :)
11:18:33 <SamB> glguy: why can't it just be arbitrary?
11:18:34 <dcoutts> ndm, ok great
11:18:41 <dcoutts> ndm, I'll link it from the gtk2hs docs page
11:18:45 <SamB> how else is it supposed to name type variables automatically?
11:18:57 <monochrom> I think you will have to ask the Simons.
11:19:08 <glguy> SamB: generally, it appears to start and a and work its way up
11:19:14 <ndm> dcoutts: you can add also add a hoogle gtk search if you want, next to the docs search
11:19:20 <glguy> I'm just curious what causes it to jump to t's and t1's
11:19:47 <dmhouse> glguy: t for type.
11:19:47 <SamB> glguy: probably when it derives them from type signatures involving ts
11:19:52 <dcoutts> ndm, not sure what you mean
11:20:08 <shemale_magic> does haskell have 'distributed transactions'
11:20:17 <shemale_magic> can haskell do same stuff as J2EE but nicer?
11:20:22 <ndm> dcoutts: you have a search button on the front page, and a text field, you can add a hoogle gtk2hs one there if you want
11:20:24 <shemale_magic> jboss sems expensive
11:20:32 <shemale_magic> I think they take my business for a ride
11:20:41 <ndm> when i saw that search box, i was really hoping it was index search :)
11:20:51 <dcoutts> ndm, oh I see what you mean, directly on the gtk2hs website itself
11:21:00 <ndm> if you want, eys
11:21:20 <dcoutts> not sure if we can do that, I'd have to look into the WP stuff involved
11:22:11 <SamB> > let f :: t -> t; f x = x; f *** f
11:22:11 <lambdabot>  Parse error
11:22:18 <SamB> > let f :: t -> t; f x = x; f *** f in f
11:22:19 <lambdabot>  Parse error
11:22:30 <SamB> > let f :: t -> t; f x = x; in f *** f
11:22:31 <lambdabot>  Add a type signature
11:22:34 <SamB> arg
11:22:37 <SamB> @type let f :: t -> t; f x = x; in f *** f
11:22:38 <lambdabot> t -> t; f x = x; in f *** f :: forall b b'. (b, b') -> (b, b')
11:22:53 <SamB> dons really ought to fix that!
11:23:11 <dcoutts> @seen gour
11:23:12 <lambdabot> I saw gour leaving #haskell 1 day, 20 hours, 49 minutes and 33 seconds ago, and .
11:23:51 <shapr> xerox: Any ideas what Hope stands for?
11:24:15 <shapr> Haskell Otonomuss Publishing Environment?
11:24:42 <shapr> Haskell Oriented Publishing Environment?
11:26:45 <shapr> Higher Order Publishing Environment?
11:27:15 <roconnor> @what hope
11:27:15 <lambdabot> http://hope.bringert.net/
11:30:03 <ndm> dcoutts, http://haskell.org/hoogle/?package=gtk
11:30:04 <lambdabot> Title: Hoogle
11:30:20 <dcoutts> ndm, cool!
11:30:21 <shemale_magic> how does j2ee compare to haskell?
11:30:30 <ndm> warning and disclaimer, hack hack hack!
11:30:36 <dcoutts> ndm, I'm also hacking an extra seach box into the gtk2hs site
11:30:38 <ndm> shemale_magic: they are incomparable
11:31:10 <ndm> dcoutts: cool, include <input type="hidden" name="package" value="gtk"> in the form
11:31:22 <dcoutts> right
11:32:37 <dcoutts> woot!
11:32:48 <ndm> woot, just saw it - thats really really handy!
11:32:58 <dcoutts> @karma+ ndm
11:32:59 <lambdabot> ndm's karma raised to 7.
11:33:48 <ndm> Hoogle 4 will natively support all these packages, properly, and has some other useful features for Gtk2hs, including multiword search
11:33:59 <dcoutts> sounds nice
11:34:00 <ndm> i.e. textview buffer set
11:34:07 <dcoutts> ah right
11:34:14 * edwardk wakes up and  stumbles around the channel looking for coffee.
11:34:16 <ndm> rathern than searching for a type over a type :)
11:35:21 <ndm> (all I now need to do is actually _write_ Hoogle 4)
11:37:20 <lightstep> is there a standard package for integer algebra in haskell? i want stuff like isPrime
11:37:38 <ndm> dcoutts: how easy was it to generate hoogle documentation using haddock? did it just work straight off? (i never actually tested it on a real project)
11:37:52 <dcoutts> ndm, yeah, it just worked
11:38:02 <dcoutts> I just removed all the normal options and added --hoogle
11:38:12 <ndm> wow, thats kinda surprising, but definately good
11:38:16 <dcoutts> :-)
11:46:30 <yaxu> i wish .hi files didn't get in the way of tab completion
11:46:59 <petekaz> Does haskell have syntactic sugar for pattern matching strings?  In erlang, I can do things like:  "pe" ++ Rest = "pete" and Rest would be equal to "te".  In haskell, the only way I know how to do this is the long way:  f 'p':'e':rest
11:47:18 <ndm> petekaz: no, it doesn't
11:47:20 <dmhouse> Right, that's pretty much the only way to do it with a pattern.
11:47:34 <dmhouse> of course, s/Rest/rest/.
11:47:35 <ndm> but you can do f x | "pe" `isPrefixOf` x
11:47:42 <petekaz> too bad ... doesn't seem like it would be hard to implement.
11:47:44 <roconnor> Haskell needs views!
11:47:51 <dmhouse> petekaz: There are ambiguities.
11:48:03 <petekaz> dmhouse: of course, but in erlang, vars are Captilized.
11:48:20 <dmhouse> petekaz: Best is to do what ndm says and then just drop the length of prefix.
11:48:36 <dmhouse> petekaz: let (x++y) = "Hello world". What would x and y match to?
11:49:07 <lightstep> prolog would do that
11:49:28 <petekaz> dmhouse: right, but erlang doesn't let you do that either.
11:49:46 <roconnor> @what views
11:49:46 <lambdabot> I know nothing about views.
11:49:50 <roconnor> @what view
11:49:50 <lambdabot> I know nothing about view.
11:50:07 <roconnor> http://www.haskell.org/development/views.html
11:50:08 <lambdabot> Title: Views: An Extension to Haskell Pattern Matching
11:50:11 <Igloo> You could define a function after such that you could do   | Just rest <- after "pe" = ...   (with extensions)
11:50:39 <petekaz> Well, as ndm said, I can just use a guard expression.
11:50:58 <Igloo> Yeah, but dropping the prefix isn't nice that way
11:51:47 <petekaz> true ... I hadn't seen your version.
11:52:04 <Philippa_> haskell doesn't need views. It might benefit from transformational patterns
11:52:44 <ndm> I personally just use ('h':'e':'l':'l':'o':xs), its not that bad
11:52:59 <ndm> in other programming languages that would be considered elegant :)
11:53:08 <petekaz> What if it were not a constant?
11:53:36 <Philippa_> parsec (or another parsing lib) is your friend
11:53:38 <dmhouse> You can't use previous bindings in a pattern anyway :|
11:54:02 <dmhouse> > let x = 'a'; (x:ys) = "bbc" in x
11:54:02 <lambdabot>    Conflicting definitions for `x'
11:54:02 <lambdabot>   In the binding group for: x, x, ys
11:54:07 <roconnor> @what transformational patterns
11:54:07 <lambdabot> I know nothing about transformational.
11:54:14 <roconnor> @what transformational-patterns
11:54:15 <lambdabot> I know nothing about transformational-patterns.
11:54:27 <Philippa_> @google transformational patterns haskell
11:54:33 <lambdabot> http://citeseer.ist.psu.edu/erwig00pattern.html
11:55:08 <dcoutts> ndm, ah, this rocks :-)
11:55:21 <roconnor> oh
11:55:30 <Philippa_> the short version is that they're "pass it through a function first" patterns
11:55:54 <roconnor> foo x | ["pl",rest" <-splitAt 2 x = ...
11:55:59 <roconnor> foo x | ["pl",rest"] <-splitAt 2 x = ...
11:56:04 <roconnor> or whatever the notatation is
11:56:28 <ndm> dcoutts, good good :) - it will definately be worth it for me
11:56:36 <dmhouse> foo x | ("pl", rest) <- splitAt 2 x = ... would work, I think, yes.
11:56:41 <xerox> shapr: no idea.
11:56:47 <roconnor> right
11:56:53 <dcoutts> ndm, I'm sending an email to the gtk2hs users list to advertise it :-)
11:56:57 <ndm> there should really be some program that integrates haddock hoogle and hscolour to produce the ideal website documentation for a program
11:56:59 <dcoutts> xerox, have you seen?!
11:57:12 <ndm> dcoutts: cc me, so I can see if people bring up any complaints
11:57:17 <dcoutts> ndm, ok
11:57:36 <ndm> actually, i'm joinging the users list now , given i am now a user :)
11:58:02 <petekaz> Igloo: where is this 'after' function you used?
11:58:21 <ndm> petekaz: you can define it yourself
11:58:26 <petekaz> oh.
11:58:34 <ndm> in about a single line
11:59:00 <ndm> after :: String -> String -> Maybe String
11:59:21 <ndm> after prefix value = if prefix `isPrefixOf` value then Just (drop (length prefix) value) else Nothing
12:00:07 <Philippa_> ndm: re that integration, last I looked haddock's not really that good for 'internal' rather than interface documentation?
12:00:40 <ndm> Philippa_: i was more thinking of for external documentation, i.e. Gtk2Hs's interface
12:00:56 <ndm> but its reasonably good at internal docs as well, for an app rather than a library
12:01:17 <xerox> dcoutts: seen what?
12:01:46 <dcoutts> xerox, see the new search button on the Gtk2Hs site
12:01:49 <dcoutts> @where gtk2hs
12:01:49 <lambdabot> http://haskell.org/gtk2hs/
12:02:23 <dcoutts> ndm, I added a feature to link haddock docs back to source code
12:02:32 <xerox> Cool!
12:02:51 <ndm> dcoutts, http://www-users.cs.york.ac.uk/~ndm/projects/filepath/System-FilePath.html
12:03:05 <ndm> that uses the source link feature with HsColour to link to colourised and hyperlinked code
12:03:21 <petekaz> I wish there was a book on Haskell, or rather ghc, that included nice docs for all the enhancements that matter in practical use of the language.  Right now, one is forced to chase down links to papers that people happen to point out.  (concurrency, exceptions, these enhanced guards, ffi, etc ...)
12:03:23 <dcoutts> nice to know people are using it :-)
12:03:27 <xerox> shapr: you definitely should give it a try at customizing the CSS to meet your... taste?
12:03:37 <ndm> dcoutts: yep, its great :)
12:03:38 <dcoutts> ndm, at the same time I added a similar feature to link to a wiki
12:03:52 <xerox> petekaz: Haskell' report?
12:04:00 <ndm> i didn't spot that one
12:04:03 <petekaz> what's that?
12:04:15 <xerox> The new language specifications, in the workings.
12:04:19 <petekaz> oh.
12:04:27 <dcoutts> ndm, which lib authors could use to allow users to comment on stuff, eg providing examples of usage
12:04:31 <dmhouse> petekaz: A.k.a. Haskell-prime.
12:04:37 <petekaz> That would be nice I suppose assuming it covered the topics I mentioned.
12:04:47 <dcoutts> ndm, it works just like the source code linking feature
12:04:47 <ndm> dcoutts, yeah a cool idea for things like gtk2hs
12:04:51 <dmhouse> The ' is actually a prime mark, but sadly ASCII is rather limited :)
12:05:10 <ihope> Hmm... you guys do realize that "Haskell User's Operating System and Environment" actually spells "huose", don't you? :-P
12:05:13 <ndm> for my purpose i found that by the time i moved the tests into the haddock, there was no need for anymore user docs
12:05:14 <xerox> petekaz: good or bad, it covers the sensible ones, in a certain sense :-)
12:05:26 <petekaz> I wish one of you haskell gurus would make a "Practical Haskell" book, similar to the recent "Practical Common Lisp" book which was great.
12:05:47 <xerox> dons should definitely be one of the authors.
12:05:49 <ndm> and by having a cool test generation framework that extracts the tests from the haddock, turns them into quickcheck properties and runs them its better for everyone
12:06:04 <xerox> And dcoutts, and all the fps hackers, for sure :-)
12:06:34 <xerox> Maybe it could be made a collaborative work, much like a wiki, petekaz?
12:06:34 * roconnor doesn't write practical haskell.
12:06:56 <petekaz> I'm reading the haskell wikibook now.
12:07:13 <Philippa_> I don't by the standards of some people in here, OTOH I certainly do a line in lightweight does-the-job code
12:07:17 <petekaz> But I love deadtree books with nice typography.
12:07:20 <xerox> I think it is quite new, surely newer than most of the content of hawiki.
12:07:23 <Philippa_> (largely because if it's not lightweight I'll never get it done)
12:07:41 <dmhouse> petekaz: What do you think of it (the wikibook)?
12:08:09 <xerox> Philippa_ - Agreed! Who else can take part to this in your opinion? We could force them^W^Wask pleasently.
12:08:18 <petekaz> dmhouse: good so far.
12:08:37 <dmhouse> petekaz: If you don't understand something, or have any ideas, @tell me or kowey.
12:08:39 <shemale_magic> what is a distributed transaction?
12:08:45 <shemale_magic> jta in j2ee?
12:08:52 <shemale_magic> why does one need it?
12:09:10 <petekaz> shemale_magic: java in a haskell channel?
12:09:33 <dmhouse> I think someone should answer shemale_magic, they've posted their question a few times.
12:09:44 <Philippa_> shemale_magic: is there any particular reason for your nick? Only the term "shemale" is considered pretty offensive by everyone I know it could apply to
12:09:46 <dmhouse> (Sadly I don't know enough about industrial programming to be able to answer it.)
12:09:55 <Philippa_> I can't answer the question accurately, I can have a good guess though
12:10:03 <Philippa_> (a transaction taking place across multiple machines)
12:10:09 <xerox> ``A distributed transaction is an operations bundle in which two or more network hosts are involved.''
12:10:13 <roconnor> what does the question have to do with haskell?
12:10:34 <Philippa_> it's a problem that might be reasonably attacked in haskell at some point
12:10:38 <tony2> http://en.wikipedia.org/wiki/Distributed_transaction
12:10:58 <xerox> ``Usually, hosts provide transactional resources, while the transaction manager is responsible for creating and managing global transaction that encompasses all the operations against such resources.''
12:11:09 <ValarQ> roconnor: it doesn't, but maybe he/she is to scared of the people in #java (/me is)
12:11:40 <qwr> shemale_magic: http://www.lc.leidenuniv.nl/awcourse/oracle/server.920/a96521/ds_txns.htm
12:11:43 <lambdabot> Title: Distributed Transactions Concepts
12:11:56 <xerox> ``Distributed transactions, as any other transactions, must have four ACID properties, where atomicity guarantees all-or-nothing outcomes for the unit of work (operations bundle).''
12:12:07 <petekaz> I love my lambdabot addition :-)
12:13:17 <Philippa_> I'm usually in two minds about that kind of thing with bots myself
12:13:38 <Philippa_> if you could magically determine whether the material was eg worksafe that'd be useful though
12:15:01 <shemale_magic> shemale is offensive to a real shemale you know?
12:15:05 <shemale_magic> how interesting
12:15:12 <Philippa_> to every single trans woman I know, yes
12:15:13 <petekaz> Philippa_: it was my first haskell code that did anything interesting, that and the contextual examination of content available in plugins.
12:15:21 <shemale_magic> ones I know thinks its great
12:15:22 <Philippa_> be they pre-op or post
12:15:33 <shemale_magic> your friends are the majority you assume?
12:15:48 <shemale_magic> shemale is much sexier than tranny
12:15:51 <shemale_magic> or ladyboy
12:15:53 <shemale_magic> or dickgirl
12:16:08 <Philippa_> all of which're vicious terms largely used by the sex industry
12:16:12 <ihope> Hmm, argh.
12:16:21 <shemale_magic> pm me utisde chat
12:17:17 <ihope> "mapper func [] = []; mapper func (x:xs) = mapper (func x) xs" <- now I understand: that second equation is the right answer to the wrong question.
12:18:32 <dmhouse> ihope: ?
12:19:20 <ihope> I think what's-his-name was supposed to write a function that applied a function to every element of a list. And indeed, that's what the second equation does.
12:19:27 <ihope> Or would do, if it were possible to do that.
12:19:52 <dmhouse> Err, no it doesn't.
12:19:56 <roconnor> ihope: you mean map?
12:20:00 <ihope> I know, it doesn't typecheck.
12:20:00 <dmhouse> Oh, hang on. I see.
12:20:02 <ihope> roconnor: yes.
12:20:05 <roconnor> ok
12:20:09 <dmhouse> mapper f [1..3] -> f 1 2 3
12:20:13 <ihope> Yep.
12:20:29 <dmhouse> Polyvariac function.
12:20:30 <dcoutts> ndm, our bug got marked as a dupliate
12:20:33 <dcoutts> see http://bugzilla.gnome.org/show_bug.cgi?id=340203
12:20:34 <lambdabot> Title: Bug 340203 - [patch] Support &quot;prelight state&quot; in menu bars and noteboo ...
12:20:52 <dcoutts> ndm, and paritucalrly the screenshots of this patch someone has submitted:
12:20:53 <dcoutts> http://pcman.sayya.org/gtk_win32/
12:20:55 <lambdabot> Title: PCMan's GTK+ Win32 Enhancement
12:21:23 <kuribas> Is it possible to read a block of data from a file directly into an array?
12:21:53 <dcoutts> kuribas, yep
12:22:07 <ihope> So just now I realized that, and I feel semi-terrible.
12:22:18 <ndm> dcoutts: that looks a lot better, a lot more native
12:22:22 <dcoutts> kuribas, hGetArray
12:22:36 <ndm> although it still has a gradient in the menu bar, but to be fair, quite a few programs do that now (IE, Firefox)
12:22:36 <dcoutts> ndm, so hopefully that'll get in to Gtk+ 2.10.x
12:22:44 <ndm> that would be very nice :)
12:23:00 <dcoutts> ndm, well we can complain about that later when it's clear what changes have been made :-)
12:23:26 <ndm> to be honest, thats the least different of all the changes, so I can live with that one :)
12:23:56 <ihope> I'd apologize, if I knew who to apologize to :-P
12:24:07 <xerox> dmhouse: Do you think it is typeable?
12:24:30 <dmhouse> xerox: With typeclass hackery, yes.
12:24:38 <xerox> Let's try?
12:24:55 <dmhouse> Hmm.
12:25:09 <edwardk> xerox: heh i'd like to see it, but its outside of my reach i think
12:25:10 <ndm> isn't everything typeable with appropriate GHC hackery?
12:25:27 <dmhouse> There are various emails around displaying how to do polyvariadic functions with typeclasses, I think it'd be a pretty simple application.
12:25:31 <dmhouse> Can't remember how it's done, though.
12:25:53 <kuribas> dcoutts: I'd like to read a header first with a parsec parser, and then the rest directly into an Array, is that possible?
12:26:04 <edwardk> http://okmij.org/ftp/Haskell/vararg-fn.lhs
12:26:16 <xerox> If it can't be typed, there must be a reason.
12:26:23 <dcoutts> kuribas, if you know the offset where parsec finnished then possibly yes
12:26:25 <roconnor> ihope: is the leson that english is a poor specification language?
12:26:41 <ihope> roconnor: well... yeah, I guess.
12:26:43 <dcoutts> kuribas, or if there is a simple way of splitting the header that might be easier
12:26:53 <edwardk> xerox: follow that link =)
12:26:59 <xerox> I know that one.
12:27:05 <edwardk> ah k
12:27:49 <edwardk> so now you want your mapper thing to take a list and generate arguments, so kind of the inverse problem
12:28:24 <monochrom> There is a way of using English with clarity.  Basically translate a formal language to English word for word. :)
12:29:07 <edwardk> formal languages inevitably layer on some form of informal reasoning. =)
12:29:12 <xerox> monochrom - And then the grammar?
12:29:42 <xerox> No wait, I agree.
12:29:57 <nibber-shemale> :)
12:30:42 <monochrom> If the formal language is prefix, and English is infix, yes there is a grammar mismatch.  But we can correct it.  Translate parse tree for parse tree, how about that?
12:31:02 <ihope> English can have multiple parse trees.
12:31:14 <ihope> "The red ball and bat" <- is the bat red?
12:31:24 <ndm> ihope: not if you use enough brackets :)
12:31:32 <roconnor> ihope: is that (multiple parse) trees, or multiple (parse trees)?
12:31:36 <monochrom> English needs brackets. :)
12:31:46 <monochrom> hahahaha
12:31:48 <ihope> It has them, but they don't work.
12:31:48 <xerox> Then we get lisp.
12:32:05 <nibber-shemale> hakell is not lisp or ml right?
12:32:11 <int-e> the ball (which is red) and the bat (which is actually black)
12:32:12 <nibber-shemale> how deos haskell differ from ml or lisp?
12:32:14 * int-e chuckle
12:32:16 <nibber-shemale> Im curious
12:32:16 <int-e> s
12:32:26 <Philippa_> haskell resembles a pure, lazy ML
12:32:27 <roconnor> haskell is statically typed, unlike lisp
12:32:32 <nibber-shemale> is lisp not 'lazy'
12:32:41 <roconnor> haskell is pure and lazy, unlike ml and lisp.
12:32:44 <Philippa_> type classes're the main difference from ML's type system
12:32:45 <nibber-shemale> hm
12:32:55 <jer> nibber-shemale, lazily evaluated; both ML and LISP are strict. haskell is statically typed, lisp is dynamic. haskell is pure, ML and LISP are not
12:32:56 <nibber-shemale> paul graham said static typing is a problem for macros building
12:33:02 <nibber-shemale> on his site
12:33:03 <SamB> nibber-shemale: eh
12:33:06 <jer> bah need to type faster =D
12:33:08 <nibber-shemale> and many were disappnted by ml
12:33:09 <SamB> we use it for most of *our* macros
12:33:21 * roconnor isn't a big fan of paul graham
12:33:35 <nibber-shemale> really?
12:33:52 <nibber-shemale> please expalin pure and lazy a little
12:33:57 <nibber-shemale> (im igonorant i know)
12:34:04 <jer> paul graham cracks me up. he does good things for lisp, then stunts it all by saying "but all lisps suck, i'm writing a new one!" he could've just kept quiet until he had something =]
12:34:09 <SamB> yeah, type classes are useful for all kinds of things you might use macros for in other languages...
12:34:27 <ndm> nibber-shemale: Paul Graham says that once you pick your language, everything more powerful looks pointless, everything less powerful is not useable
12:34:30 <roconnor> > let ones = 1:ones in ones
12:34:31 <lambdabot>  [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1...
12:34:41 <ihope> nibber-shemale: if a language is pure, then the evaluation of a value can't do anything except waste time. :-)
12:34:44 <norpan> > fix (1:)
12:34:45 <ndm> interestingly he picked a lanuage without laziness or types, and now considers them pointless :)
12:34:45 <lambdabot>  [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1...
12:35:10 <Philippa_> ihope: quips're better when they're actually true :-)
12:35:14 <ndm> with laziness a lot of the requirement for macro's disappears
12:36:00 <nibber-shemale> really?
12:36:04 <nibber-shemale> cmon
12:36:16 <nibber-shemale> so yu can write program that write rpogram ?
12:36:17 <ndm> yep :)
12:36:20 <roconnor> With laziness all excution is deferend until needed.  If execution is never needed, it is never performed.
12:36:23 <nibber-shemale> programs thats what he goes on about
12:36:33 <jer> nibber-shemale, one doesn't need macros for that
12:36:40 <ndm> you can certainly write a meta-circular evaluator in haskell
12:36:44 <ndm> and have it be strongly typed
12:36:45 <nibber-shemale> hm
12:36:59 <ndm> that doesn't require macro's at all, even in lisp
12:37:05 <nibber-shemale> see he calims clisp is best because data n operatiosn are same somehow
12:37:06 <monochrom> Reading Paul Graham is like reading Mao: you can always use one quote to critique another.
12:37:12 <nibber-shemale> and that alows macros that even scheme cant do
12:37:19 <jer> nibber-shemale, there are other languages where that is the case too; Io, TCL
12:37:27 <xerox> Man!
12:37:28 * Philippa_ hands monochrom a card for taking the Chairman's name in vain
12:37:30 <xerox> Oleg's code is crazy!
12:37:39 * xerox understood how it does work, finally.
12:37:49 <ndm> nibber-shemale: anything Paul Graham can do untyped, Oleg can do better and fully typed
12:37:49 <nibber-shemale> lol
12:38:01 <lisppaste2> kuribas pasted "read pbm file" at http://paste.lisp.org/display/22699
12:38:01 <roconnor> Philippa_: point of order
12:38:01 <nibber-shemale> oleg?
12:38:10 <nibber-shemale> jer what does tcl do?
12:38:24 <jer> nibber-shemale, in tcl, code is data as well
12:38:26 <astrolabe> xerox: crazy good or crazy bad?
12:38:31 <nibber-shemale> no no
12:38:34 <xerox> Crazy good, 'labe.
12:38:34 <kuribas> Does anyone know of a better way to do this?
12:38:43 <nibber-shemale> he specifically says clsip is only one where the code is data
12:38:48 <nibber-shemale> I dont think tcl cn do that
12:38:52 <nibber-shemale> scheme even cant
12:38:53 <jer> nibber-shemale, it's more of a glue language though; i personally havn't used it in years
12:38:53 <astrolabe> In machine code, code is data :)
12:39:27 <xerox> astrolabe- Want me to explain?
12:39:35 <roconnor> kuribas: isn't there a primitive for parsing numbers?
12:39:50 <monochrom> kuribas: At a glance, I think it's fine.
12:39:50 <jer> nibber-shemale, well i'll take tcl out of the picture since i'm not terribly familiar with it anymore... but Io definately is a language where code is data. i can replace a running io program with another io program N times (where N is a value between 0 and infinity) without restarting it (as an example). 
12:39:57 <astrolabe> xerox: Not at lengh please, but what does the code do?
12:40:04 <glguy> Isn't TemplateHaskell designed to give Haskell the macro functionality that lisp has?
12:40:04 <Philippa_> Paul Graham in exaggeration shocker, then?
12:40:13 <dmhouse> glguy: Not really.
12:40:15 <jer> can't do this in haskell unfortunately though
12:40:20 <kuribas> monochrom: yes, probably.
12:40:20 <nibber-shemale> io
12:40:27 <nibber-shemale> hmm I have not heard ofio
12:40:29 <dmhouse> It's designed to give Haskell templating/metaprogramming functionality
12:40:30 <nibber-shemale> of io
12:40:35 <glguy> I don't know anything about TemplateHaskell, I just thought i saw something about code as data
12:40:35 <kuribas> monochrom: Yes, but it's a bit slow.
12:40:38 <glguy> nevermind
12:40:51 <dmhouse> But it _does_ happen to give macro-like functionality, yes. :)
12:40:52 <jer> nibber-shemale, iolanguage.com ;it's very new, not production quality yet, but under heavy development.. most of the semantics have stabalized
12:41:10 <roconnor> @docs Text.ParserCombinators.Parsec
12:41:11 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/parsec/Text-ParserCombinators-Parsec.html
12:41:40 <xerox> astrolabe - It does make a function of type:
12:42:18 <xerox> build' :: [a] -> a -> a -> ... repeat "a ->" ... a -> [a]
12:42:23 <monochrom> I don't know how to speed it up.
12:42:27 <roconnor> kuribas: at the very least use read instead of that foldl
12:42:34 <roconnor> > read "5"::Integer
12:42:35 <lambdabot>  5
12:43:15 <kuribas> roconnor: yes
12:43:31 <astrolabe> xerox:  how many "a ->"  s?
12:43:37 <xerox> astrolabe: infinite.
12:43:44 <astrolabe> ug
12:44:30 <kuribas> monochrom: I want the parser (pbmParser) to return the rest of the stream, but I wonder if "many1 anychar" doesn't do to much work.
12:44:40 <xerox> *Mapper> build 1 :: [Int]
12:44:40 <xerox> [1]
12:44:40 <xerox> *Mapper> build 1 2 3 4 5 6 :: [Int]
12:44:40 <xerox> [1,2,3,4,5,6]
12:44:40 <xerox> *Mapper> build 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 :: [Int]
12:44:42 <xerox> [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
12:45:04 <kuribas> monochrom: However I couldn't find another way to do that.
12:45:14 <astrolabe> xerox: that can't be standard haskell?
12:45:39 <monochrom> parsec is inherently quite eager.
12:45:51 <int-e> astrolabe: sure. type classes are powerful. the Text.Printf module does something similar.
12:45:58 <xerox> astrolabe - Only multiparameter typeclasses with functional dependencies are needed, astrolabe.
12:46:04 <lisppaste2> roconnor annotated #22699 with "from Parsec docs" at http://paste.lisp.org/display/22699#1
12:46:28 <astrolabe> wow
12:46:39 <xerox> int-e - Do you understand the code? Want to give it a try to type ihope's function?
12:46:49 <glguy> xerox, I think you left out an instance of "astrolabe" in your last statement
12:47:07 <xerox> glguy - Wooops.
12:47:19 <glguy> :)
12:47:19 <edwardk> astrolabe: i pasted a link to the code above aways
12:48:53 <kuribas> roconnor: Thanks, but that doesn't really change the real issues.
12:50:30 <int-e> xerox: the mapper one? that's impossible; you'd need lists that encode their length on the type level for that stuff.
12:51:06 <shemale_magic> ok
12:51:11 <shemale_magic> wow
12:51:19 <shemale_magic> so haskell is free
12:51:25 <int-e> hello number 201.
12:51:35 <dmhouse> shemale_magic: Yeah. Open source. :)
12:51:38 <shemale_magic> and can do pretty much anything in a way that is very low bug prone
12:51:51 <shemale_magic> now if erro does happen how do u track it down
12:52:07 <shemale_magic> I hd ahrd time trackign this ftp autoamtion problem at work that is launched by perl scipts
12:52:07 <dmhouse> There are a few tools around.
12:52:15 <dmhouse> For example, Hat.
12:52:19 <shemale_magic> like we have this big ftp cycle
12:52:25 <shemale_magic> with our WAN
12:52:29 <shemale_magic> but if a connection is bad
12:52:43 <glguy> um... some kind of weird bot?
12:52:49 <xerox> int-e - build' can be passed in, if you take that as 'f', can't be done by means of recursion?
12:52:50 <dmhouse> glguy: ?
12:52:55 <shemale_magic> it bombs and oen site is weird u can ftp by commadn line and drop small files lie 3k but anything larger and it hangs , and its only for this one site
12:53:10 <shemale_magic> and u can downlaod fine no problem, but upload hangs on files larger than say 3k
12:53:23 <shapr> shemale_magic: Hey, can you look at your private messages?
12:53:27 <shemale_magic> k
12:53:48 <haskell-curious> k
12:53:49 <haskell-curious> ?
12:53:49 <int-e> xerox: hmm. maybe. higher order types are still scary for me.
12:53:54 <xerox> (-:
12:53:54 <shapr> haskell-curious: thanks :-)
12:53:55 <dmhouse> haskell-curious: Thanks very much :)
12:54:09 <glguy> if not a bot then a joke
12:54:10 <xerox> ?karma+ haskell-curious
12:54:10 <lambdabot> haskell-curious's karma raised to 1.
12:54:11 <glguy> either way...
12:54:18 <dmhouse> glguy: Who?
12:54:31 <glguy> serious?
12:54:40 <int-e> xerox: but I don't want to think about it right now.
12:55:37 <monochrom> What's going on?
12:55:54 <haskell-curious> heh
12:56:02 <haskell-curious> well
12:56:35 <haskell-curious> I ont like the stink of java or perl at my work, dont really get c++, so imlooking to learn something cool than can help me esp when i start my own businesss
12:56:39 <haskell-curious> haskell seems powerful
12:56:55 <dmhouse> It certainly is.
12:57:01 <haskell-curious> or I can learn perl or something more batttle tested that has bunch of frameworks
12:57:03 <haskell-curious> n modules
12:57:04 <dmhouse> (In fact, it's Turing-complete :))
12:57:09 <haskell-curious> heh
12:57:17 <haskell-curious> paul graham says no one want to program a turing machine
12:57:21 <haskell-curious> haha
12:57:47 <Philippa_> that much is true, though I started figuring out enough tricks to get started when I was bored in a lecture once
12:57:48 <dmhouse> Right. Perl, or other more mainstream languages, have more modules available.
12:57:49 <yaxu> mmmm, infinite memory
12:57:51 <SamB> dmhouse: you know very well that turing completeness is not all of what people are looking for when ask for "power"
12:58:02 <Philippa_> SamB: hence the smiley
12:58:05 <xerox> int-e: no problem!
12:58:12 <SamB> point
12:58:20 <dmhouse> However, Haskell's got pretty good support for most things you could want to do.
12:58:29 <SamB> sure, anything powerful would *be* turing complete
12:58:43 <Philippa_> I'm not sure I agree with that either. Epigram's powerful
12:58:46 <int-e> polynomial slowdown is not quite acceptable for most problems and people ;)
12:58:50 <dmhouse> SamB: Sorry if that wasn't obvious enough. I know that sarcasm tends to be very flaky over text-based communications. :)
12:59:04 <SamB> Philippa_: what, epigram isn't turing complete?
12:59:22 <haskell-curious> barinfuck is turing complete
12:59:25 <Philippa_> yeah, evaluation always terminates
12:59:28 <haskell-curious> but i wont een lok at it
12:59:28 * dmhouse /win closed the wrong window :)
12:59:35 <SamB> Philippa_: oh, thats odd!
12:59:46 <SamB> well, most anything powerful happens to be turing complete, anyway!
12:59:49 <Philippa_> not odd at all, it's an extremely sensible decision for a dependantly-typed language
12:59:58 <haskell-curious> so how about doing infomation transer between remote servers and central one
13:00:01 <SamB> I suppose so
13:00:02 <Philippa_> as it means the typechecker's got half a hope of terminating too
13:00:03 <dmhouse> Philippa_, SamB: which language?
13:00:06 <monochrom> Haskell is also fairly weak on "debugging".  (I would call it "execution trace".)  But it's ok on unit testing.
13:00:08 <Philippa_> dmhouse: epigram
13:00:18 <Philippa_> it's only really weak on debugging IO
13:00:19 <haskell-curious> right now my work uses perl, ftp, c++, java tomcat 5 apache, and mysql
13:00:26 <haskell-curious> I dont know if its optimal at all
13:00:27 <Philippa_> for pure code, you can go a long way with ghci
13:00:36 <SamB> monochrom: probably because there isn't much in the way of "execution" to trace ;-)
13:00:37 <dmhouse> haskell-curious: I would mention that Haskell has a learning curve. It requires a change in perspective which some find hard.
13:00:45 <dmhouse> However, it's _very_ rewarding and very helpful.
13:00:49 <haskell-curious> I have no programming except bash
13:00:55 <haskell-curious> nothing to unlearn!
13:00:57 <dmhouse> Some say it's about as hard as learning to program again.
13:00:58 <haskell-curious> ;)
13:01:26 <SamB> hmm, well, if you haven't learned in the first place maybe you can avoid the need to learn twice -- and just take ten times as long to learn it the first time ;-)
13:01:35 <SamB> (there is so much to learn!)
13:02:00 <SamB> of course, you don't need to learn that much just to use it ;-)
13:02:15 <kuribas> Does an array with type (IArray UArray Bool) use one bit per pixel?
13:02:29 <SamB> er.
13:02:30 <dmhouse> Anyone could learn Lisp in one day, except that if they already knew Fortran, it would take three days. (Marvin Minsky)
13:02:33 <SamB> that isn't even a type!
13:02:42 <sjanssen> kuribas: IArray is a type class
13:03:18 <sjanssen> kuribas: I assume you mean UArray i Bool, and in that case, yes there is one bit per element
13:03:53 <kuribas> sjanssen: and it takes the same storage space as a C array?
13:04:05 <kuribas> (aproximately)
13:04:10 <SamB> wait what?
13:04:12 <glguy> C has bit arrays?
13:04:21 <sjanssen> kuribas: I don't think that C will pack an array like that
13:04:26 <SamB> UArray i Bool uses one bit per element?
13:04:41 <sjanssen> SamB: yes
13:04:42 <SamB> I thought it used at least a byte per element!
13:04:47 <dcoutts> nope
13:04:55 <dcoutts> that's UArray i Word8
13:05:02 <glguy> lol
13:05:03 <SamB> I'm not sure whether to be appaled or really excited!
13:05:15 <dcoutts> it's slower but more compact
13:05:21 <SamB> yeah, thats what I thought
13:05:32 <kuribas> sjanssen: No, C doesn't.  But you can extract the bits using bit masks.
13:05:33 <dcoutts> for one app I switched to UArray i Word8 since it's faster
13:05:34 <sjanssen> kuribas: this is the internal representation of UArray:data UArray i e = Data.Array.Base.UArray !i !i GHC.Prim.ByteArray#
13:05:41 <dcoutts> but I was going all out for speed
13:05:46 <SamB> it seems like there should be a choice of fast or small
13:06:11 <haskell-curious> well
13:06:26 <haskell-curious> is anyone here building business apps using haskell?
13:06:32 <SamB> sjanssen: that is very unhelpful, because it doesn't say a thing about how the data is packed into the bytes
13:06:36 <haskell-curious> does it help get a lot fo work done?
13:06:43 <sjanssen> SamB: yeah, I think the packed representation is controversial
13:06:50 <dmhouse> haskell-curious: There are a few companies around using Haskell.
13:07:30 <dmhouse> haskell-curious: Check out the Companies section of http://haskell.org/communities/
13:07:31 <lambdabot> Title: Haskell Communities and Activities Report
13:07:39 <haskell-curious> paul grahams mentions not using a relational db
13:08:01 <haskell-curious> are relational dbs neede d for large data ses or canu anipulate them with a good language better than using a db
13:08:19 <haskell-curious> paul grhama said viawe sued files and software did rest
13:08:31 <haskell-curious> viaweb
13:08:49 <dmhouse> Ah, Paul Graham is the Hackers and Painters guy.
13:09:27 <RicardoEduardo> DCC SEND FREENODE-MUST-END-TOR-ACCESS 0 0 0
13:09:35 <kuribas> sjanssen: I need an efficient data structure for representing bilevel bitmaps.  What would be the best?
13:09:43 --- mode: ChanServ set +o dmhouse
13:09:46 <sjanssen> kuribas: UArray of Bools
13:09:51 --- mode: dmhouse set +b *!*=debian-t@tor/session/external/x-38357f3653849e28
13:09:51 --- kick: RicardoEduardo was kicked by dmhouse (no thanks.)
13:10:32 <dmhouse> Sorry, JohnMeacham, jlhamilton. He's been kickbanned.
13:10:47 --- mode: dmhouse set -o dmhouse
13:11:18 <dylan> What was that?
13:11:24 <norpan> yeah?
13:11:28 <dylan> some sort of DCC attack over tor?
13:11:34 <dmhouse> dylan: it's a security hole in certain IRC clients.
13:11:54 <norpan> xchat?
13:12:20 <kuribas> sjanssen: ok, thanks
13:13:29 <dylan> oh, that's the netgear attack thing
13:13:31 <kpreid> dmhouse: actually, it's a firewall attempting to hide that hole
13:13:37 <haskell-curious> wel lets talk a bit about haskell being used in real live sites,  wht sies ro program exist in haskell that I can try?  is there an irc client thaat runs on widows xp? is there a web browser?
13:13:56 <sjanssen> kuribas: that will work well for you unless you need to do operations like anding two array together
13:14:16 <dmhouse> haskell-curious: How about a BitTorrent client?
13:14:25 <dmhouse> @where conjure
13:14:25 <lambdabot> http://j.mongers.org/pub/haskell/darcs/conjure/
13:14:29 <petekaz> haskell-curious: I wrote a vocabulary quiz in haskell!  http://www.kazmier.com/~kaz/vocab.cgi
13:14:48 <petekaz> albeit, it's pretty lame and my first web app in haskell.
13:15:19 <petekaz> and it doesn't have all the vocab populated yet (only 10 words).
13:16:09 <Philippa_> I should get another copy of Flippi running somewhere sometime. That, and pick a stable plugin API and get a full release out again
13:16:11 <kuribas> sjanssen: Not really, I mostly need to handle individual pixels from a singel array.
13:16:47 <stepcut> haskell-curious: some well-known apps include, darcs (revision control), pugs (perl 6 compiler), yi (text editor)
13:17:00 <norpan> and ghc (compiler) :)
13:17:32 <stepcut> norpan: yeah, but I think darcs and pugs are probably more well-known :)
13:17:49 <norpan> and yi less well-known :)
13:17:55 <stepcut> heh
13:18:25 <xerox> Tell me this isn't fabulous
13:18:26 <xerox> *Mapper> build2 insert empty "a" True "b" False "c" True :: Map String Bool
13:18:26 <xerox> fromList [("a",True),("b",False),("c",True)]
13:19:01 <stepcut> haskell-curious: if you are in desperate need of a sudoku solver, there are plenty of those :) -> http://www.haskell.org/haskellwiki/Sudoku
13:19:04 <norpan> xerox: this isn't fabulous
13:19:05 <lambdabot> Title: Sudoku - HaskellWiki
13:19:10 <xerox> :-(
13:19:26 <sjanssen> xerox: the implicit type signature is necessary, yeah?
13:19:36 <haskell-curious> hm
13:19:43 <haskell-curious> how about a cms?
13:20:07 <stepcut> haskell-curious: http://www.acooke.org/jara/halipeto/
13:20:10 <lambdabot> Title: Jara Software: Halipeto: Home Page
13:20:33 <stepcut> I have not used any other cms so I don't know how halipeto compares
13:21:17 <xerox> sjanssen: just because the type of build2 is polymorphic
13:21:18 <xerox> s
13:21:22 <xerox> Ops.
13:21:44 <norpan> xerox: i only did as you said
13:24:26 <nomeata> liyang: hi
13:24:44 <nomeata> liyang: any thing new about the gtk2hs debian packages?
13:35:16 <glguy> so you guys didn't think that haskell-curious was just screwing around or was drunk?
13:36:01 <dmhouse> glguy: Why do you think either of those?
13:37:03 <glguy> Endlessly quoting of Paul Graham for starters
13:37:30 <petekaz> What's wrong with that?
13:37:31 <glguy> I just couldn't take him seriously, I guess I'm just not as nice as you
13:37:43 <dmhouse> Hehe :)
13:37:47 <sjanssen> I'd say he's just a newbie
13:38:09 <glguy> Kinda gives a bad name to newbies... no?
13:38:18 <petekaz> If it were not for paul graham's essays, I would never have revisted Lisp, which in turn let me discover erlang and haskell.
13:38:35 <dmhouse> petekaz: Awesome :)
13:38:36 <glguy> I've read On Lisp myself, I'm not saying that Paul Graham is a bad guy
13:38:38 <yaxu> we were all newbies once
13:38:47 <sjanssen> glguy: I don't think so.  I think he was sincere
13:39:11 <yaxu> Paul Graham isn't a good guy either, in my opinion
13:39:31 <glguy> Maybe if Haskell teaches me nothing else, it will teach me to be more tolerant of other people in it's irc channel then...
13:41:10 <yaxu> i find a lot of his writing pretty bad
13:41:34 <norpan> a bit hyped, but not bad
13:41:45 <glguy> I prefered Practical Common Lisp over On Lisp, but I learned from both
13:42:30 <yaxu> his tutorials are great, i don't like his essays though in general
13:43:23 <xerox> I like papers.
13:43:26 <glguy> I'm skimming through Hackers and Painters now...
13:44:01 <yaxu> it's pretty dreadful
13:44:12 <dmhouse> I started reading a riposte to that once.
13:45:13 <dmhouse> I like Joel Spolsky's writing.
13:45:42 <glguy> Paul Graham really seems to emphasis figuring out what your program should do as you write it
13:46:07 <edwardk> ahh neat class Iso x y | x -> y, y -> x where iso :: x -> y; osi :: y -> x works =)
13:46:33 <yaxu> glguy: well i identify with that part
13:46:35 <edwardk> fundeps don't suck =)
13:47:52 <edwardk> er, in GHC, not hugs. back to drawing board. checking HList
13:47:53 <norpan> why do you need osi
13:48:04 <edwardk> don't really
13:48:20 <dmhouse> edwardk: Ah, don't be worried about things not working in hugs.
13:48:30 <norpan> if you have a and b, why not just make instances of Iso a b and Iso b a
13:48:42 <edwardk> yeah
13:48:49 <edwardk> like i said, i don't really =)
13:49:07 <norpan> isee
13:49:18 <yaxu> http://www.idlewords.com/2005/04/dabblers_and_blowhards.htm
13:49:19 <lambdabot> Title: Dabblers and Blowhards
13:49:34 <dmhouse> yaxu: That's the riposte I mentioned! Cool.
13:50:36 <xerox> What's the problem with that class?
13:51:02 <edwardk> xerox: it works fine in ghc
13:51:28 <yaxu> dmhouse: not sure i agree with that either, i mean I think there are similarities between painters and hackers, but paul graham's essay isn't  about that
13:52:45 <xerox> Anybody knows what the class constructor maps to in logic? Or whatever subfield the semantic is.
13:53:26 <yaxu> http://mywebpages.comcast.net/dness/notes/graham5.html
13:53:26 <edwardk> paul graham sounds like someone who likes to hear himself talk =)
13:53:28 <lambdabot> Title: Mind / Matter
13:53:37 <edwardk> and doesn't have a whole heck of a  lot to say
13:53:39 <yaxu> another good critique
13:53:45 <xerox> edwardk - I agree.
13:54:09 <edwardk> kinda reminds me of Wofram, without the messiah complex =)
13:54:22 <edwardk> or rather, with a more mild form
13:54:51 * xerox wonders what a mild form of messiah complex looks like
13:54:58 <yaxu> i don't think there's any harm in people their putting naive essays on the internet, the problem comes when people take them seriously
13:55:05 <edwardk> *nods*
13:55:56 <xerox> I don't think the latter is a problem even.
13:56:23 <edwardk> rather fond of that dabblers and blowhards writeup "All of these statements are wrong, or dumb, or both, and yet they are sprinkled through various essays like raisins in a fruitcake, with no further justification"
13:56:27 <yaxu> xerox: go on
13:56:30 <edwardk> very colorful analogies
13:56:49 <xerox> yaxu: it's more being at the center of attention, maybe
13:57:12 <glguy> Dabblers and Blowhards mentions Gödel, Escher, Bach... which reminds me that I need to finish reading that book
13:57:27 <xerox> glguy - I am never able to do that too!
13:57:40 <glguy> I can usually pick it up and read a couple chapters
13:57:45 <yaxu> glguy: i started reading that, but then my professor slagged it off
13:57:50 <xerox> I always keep restarting the chapter or the entire book in search of ideas!
13:57:55 <edwinb> GEB is great
13:57:58 <xerox> "slagged" ?
13:58:00 <glguy> and then I look at how much progress I've made
13:58:06 <yaxu> sorry, i'm english :)
13:58:16 <glguy> and how much time has passed, and I do something else for a while
13:58:31 <norpan> geb is a good book
13:58:32 <yaxu> anyway, he says it's important to read, but has flaws
13:58:56 <dmhouse> What's GEB about?
13:59:02 <edwinb> I enjoy reading Paul Graham; I think it's largely because I disagree with most of it and it's good for my brain to justify to myself why he's wrong...
13:59:04 <norpan> it's about a lot
13:59:23 <norpan> self-reference is a big component of it
13:59:29 <dmhouse> Who's it by?
13:59:35 <edwardk> heh i'd never heard of paul graham before this =)
13:59:38 <edwinb> hehe
13:59:46 <edwinb> dmhouse: Douglas Hofstadter
13:59:46 <norpan> edwardk: you haven't missed much
13:59:59 <edwardk> i've been kind of hiding from the blogosphere
14:00:57 <glguy> LOL @ "Line drawings are in fact the most difficult visual medium [5]"  (scrolling down...) [5] Dipshit.
14:01:59 <dmhouse> Why should I read GEB?
14:02:20 <_Codex> dmhouse: it's good book
14:02:23 <norpan> well
14:02:35 <norpan> it should be read when you are a teenager
14:02:36 <dmhouse> (I don't mean that belligerently. I'm curious.)
14:02:52 <dmhouse> norpan: Well, check. :) What's next?
14:02:57 <norpan> but it's mildly entertaining and perhaps you'll pick up a new viewpoint
14:03:28 <norpan> the dialogue is amusing sometimes
14:03:45 <norpan> and there are quite a few ncie analogies
14:03:51 <edwinb> It's an entertaining book about maths, logic, music, programming, etc... and the link between all of them
14:04:04 <dmhouse> Cool. It sounds fun. I'll stop by my library.
14:04:24 <norpan> and also people sometimes makes references to it and then you want to be in the know
14:04:25 <yaxu> it's quite long :)
14:04:31 <edwinb> and it takes years to read it all ;)
14:04:36 <edwinb> (I still haven't...)
14:04:42 <norpan> i have
14:04:47 <norpan> both in english and swedish
14:05:01 <xerox> dmhouse - It is more than fun, it could become your religion!
14:05:08 <glguy> I am truthful, but my truth transcends this universe
14:05:37 <dmhouse> Thanks.
14:05:39 <dmhouse> Well, g'night all.
14:05:43 <xerox> Goodnight!
14:05:46 <yaxu> speaking of the link between music and programming, i nearly have a music improv system working in haskell
14:06:06 <xerox> What is a `music improv system' ?
14:06:08 <yaxu> hoping to be able to demo it by friday
14:06:24 <yaxu> http://www.wired.com/news/technology/0,71248-0.html
14:06:25 <lambdabot> Title: Wired News: Real DJs Code Live
14:06:32 * xerox notes on the calendar
14:06:39 <yaxu> http://toplap.org/
14:06:43 <lambdabot> Title: Main Page - Toplap
14:06:50 <tony2> Paul Graham annoys me. *But* he doesn't annoy me as much as the spam I don't get because of my baysian spam filter would.
14:07:07 <yaxu> basically interactive programming to generate music
14:07:15 <tony2> that second sentance needed several commas.
14:07:25 <yaxu> tony2: very good point tho
14:07:32 <xerox> WOW
14:07:43 <xerox> yaxu: I want to see that :-)
14:08:01 <glguy> tony2: You mean that you are using a baysian spam filter coded from the examples in "On Lisp" ?
14:08:21 <glguy> (or was Paul Graham responsible for the Baysian spam filter in general)
14:08:40 <xerox> The latter.
14:08:45 <tony2> glguy, he didn't invent them, but was responsible for them getting into mainstream I belive.
14:10:12 <xerox> yaxu: what is toplap?
14:11:09 <monochrom> A laptop upside down is a toplap? :)
14:12:13 <xerox> ``(Temporary|Transnational|Terrestrial|Transdimensional) Organisation for the (Promotion|Proliferation|Permanence|Purity) of Live (Algorithm|Audio|Art|Artistic) Programming'' is scary!
14:13:01 <yaxu> xerox: a group of people making talking about making live audio (and video) performances through interactive programming
14:13:08 <yaxu> and creative use of interactive programming in general
14:13:41 <yaxu> http://en.wikipedia.org/wiki/Interactive_programming
14:13:59 <yaxu> hs-plugins looks great for interactive programming with haskell
14:19:26 <edwardk> the main reason i like haskell is that its given me gobs of papers to read over the last month or so.
14:21:11 <Korollary> heh
14:21:43 <Korollary> I think that's partly true for everybody.
14:31:48 <JohnMeacham> dmhouse: hrm?
14:40:18 <ookk> what type does the function "truncate" have?
14:40:42 <sjanssen> @hoogle truncate
14:40:43 <lambdabot> Prelude.truncate :: (RealFrac a, Integral b) => a -> b
14:40:43 <lambdabot> System.Win32.File.tRUNCATE_EXISTING :: CreateMode
14:40:57 <ookk> the expression truncate $ sqrt $ n refuses to compile because i pass it to a function taking an Int
14:41:09 <ookk> how can i convert the result of truncate to an Int then?
14:41:23 <tony2> fromIntegral
14:41:49 <sjanssen> > truncate (sqrt 2) :: Int
14:41:50 <lambdabot>  1
14:42:05 <sjanssen> ookk: what is the type of n?
14:42:34 <ookk> basically this is what i want to do: phi = [(2*) $ length $ filter ((== 0).(mod n)) [1..truncate $ sqrt $ n] | n <- [1..]]
14:42:54 <ookk> and it complains about: `RealFrac b' arising from use of `truncate' at 12.hs:11:68-75
14:42:57 <ookk> when i try to compile
14:43:54 <sjanssen> > [(2*) $ length $ filter ((== 0).(mod n)) [1..truncate $ sqrt $ fromIntegral n] | n <- [1..]]
14:43:55 <lambdabot>  [2,2,2,4,2,4,2,4,4,4,2,6,2,4,4,6,2,6,2,6,4,4,2,8,4,4,4,6,2,8,2,6,4,4,4,10,2,...
14:44:24 <ookk> why do i have to do fromIntegral n ?
14:44:37 <ookk> doesnt n <- [1..] produce Int?
14:44:45 <dcoutts> @type [1..]
14:44:47 <lambdabot> forall a. (Num a, Enum a) => [a]
14:45:01 <int-e> ookk: because sqrt wants a Float
14:45:03 <lispy> @type sqrt
14:45:04 <sjanssen> ookk: your problem was using both sqrt and mod on the same thing.  There aren't any types that support both functions
14:45:04 <lambdabot> forall a. (Floating a) => a -> a
14:45:31 <sjanssen> mod is supported on integral types, sqrt on floating
14:45:41 <sjanssen> and truncate is in RealFrac
14:46:01 <ookk> ok seams to be alot of different types
14:46:03 <sjanssen> > [1..] :: Double
14:46:03 <lambdabot>  Couldn't match `Double' against `[a]'
14:46:13 <sjanssen> > [1..] :: [Double]
14:46:13 <lambdabot>  [1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0...
14:46:18 <sjanssen> > [1..] :: Int
14:46:18 <lambdabot>  Couldn't match `Int' against `[a]'
14:46:38 <sjanssen> anyway, you get the point
14:46:58 <LordBrain> hmmm.. is there no website specifically for the conjure project?
14:47:03 <ookk> yeah  it works now
14:47:16 <LordBrain> i've been googling around for a bit now
14:47:51 <int-e> ookk: http://haskell.org/onlinereport/basic.html#sect6.3 -- everything in Num and below that (connected by arrows) are numbers.
14:47:52 <lambdabot> Title: The Haskell 98 Report: Predefined Types and Classes
14:48:57 <ookk> ok
14:49:00 <ookk> thx
15:00:41 <edwardk> the gradual evolution of monadic understanding: "sequence [newTVar [], i <- range(l',h')]" ---> "sequence $ replicate rangeSize(l',h') $ newTVar []" ---> "replicateM rangeSize(l',h') $ newTVar []"
15:01:04 <edwardk> sigh. the sad thing about haskell is i can't stand to see code i wrote an hour ago, let alone a day ago =)
15:01:22 <edwardk> that 'i hate my old code' problem crops up faster and faster here =)
15:01:44 <xerox> Is i <- range(l',h') a valid expression in that context?
15:02:26 <edwardk> works find, returns a list of integers, then the list comprehension builds that many STM (TVars [a])'s
15:02:51 <edwardk> and sequence glues them into an STM ([TVar [a]])
15:03:15 <edwardk> l' and h' are both members of Ix at this point
15:04:05 <xerox> > sequence [Just a, x <- Nothing]
15:04:05 <lambdabot>  Parse error
15:04:17 <xerox> As I thought.
15:04:25 <edwardk> ?
15:04:39 <xerox> "sequence [newTVar [], i <- range(l',h')]"
15:04:53 <xerox> Same thing?
15:04:57 <edwardk> not quite
15:05:09 <edwardk> > sequence [Just a, x <- range(1,5)]
15:05:09 <lambdabot>  Parse error
15:05:16 <edwardk> er
15:05:33 <edwardk> > sequence [Just x, x <- range(1,5)]
15:05:33 <lambdabot>  Parse error
15:05:59 <edwardk> the first version worked fine i tell you =)
15:06:19 <xerox> No way!
15:06:20 <edwardk> but  can't get an stm monad in here to show on lambdabot
15:07:09 <edwardk> l', h' are members of Ix and Num in my case because that ssatement arose in the context of growing the hashtable
15:07:38 <edwardk> the current version is:
15:07:39 <edwardk>    top <- replicateM n $ newTVar []
15:07:39 <edwardk>     return $ listArray (l,h') $ elems a ++ top
15:07:39 <edwardk>  
15:07:55 <xerox> Still doesn't make sense to me.
15:08:07 <edwardk> ahh
15:08:08 <edwardk> woops
15:08:12 <edwardk> there was a | not a , =)
15:08:54 <xerox> Ahhh :)
15:09:20 <edwardk> > sequence $ [Just i | i <- [1..4] ]
15:09:20 <xerox> You can: sequence [action | _ <- ...]
15:09:21 <lambdabot>  Just [1,2,3,4]
15:09:27 <edwardk> yeah
15:09:33 <edwardk> well i didn't know that at the time =)
15:09:38 <xerox> Where _ is syntactically correct pattern-match-and-discard
15:09:43 <edwardk> *nods*
15:10:32 <edwardk> i found the stm equivalent of
15:10:34 <edwardk> > replicateM 10 $ Just 1
15:10:35 <lambdabot>  Just [1,1,1,1,1,1,1,1,1,1]
15:10:39 <edwardk> to be a little more concise though
15:10:55 <xerox> Clean.
15:12:00 <edwardk> look me a while to grok the random Control.Monad.foo functions =)
15:13:11 <ookk> haskell code tends to get obfuscated for me :P
15:13:12 <ookk> nr_of_div = 0 : 1 : [((2*) $ length $ filter ((== 0).(mod n)) [1..intsqrt n]) - ((\i -> if (intsqrt i)^2 == i then 1 else 0) n)| n <- [2..]]
15:13:24 <ookk> readable? :P
15:13:29 <edwardk> heh
15:13:41 <edwardk> haskell can be a write only language =)
15:14:13 <edwardk> >  0 : 1 : [((2*) $ length $ filter ((== 0).(mod n)) [1..intsqrt n]) - ((\i -> if (intsqrt i)^2 == i then 1 else 0) n)| n <- [2..]]
15:14:14 <lambdabot>  Not in scope: `intsqrt'
15:14:20 <edwardk> ahh shucks
15:14:26 <ookk> ohh
15:14:56 <ookk> well that is a truncated int, can be replaced by truncate $ sqrt $ fromIntegral n
15:15:17 <ookk> then it gets even more obfuscated
15:15:42 <edwardk> >  0 : 1 : [((2*) $ length $ filter ((== 0).(mod n)) [1..intsqrt n]) - ((\i -> if (intsqrt i)^2 == i then 1 else 0) n)| n <- [2..]] where intsqrt = truncate . sqrt . fromIntegral
15:15:42 <lambdabot>  Parse error
15:15:54 <edwardk> er
15:16:00 <ookk> nr_of_div = 0 : 1 : [((2*) $ length $ filter ((== 0).(mod n)) [1..(truncate $ sqrt $ fromIntegral $ n)]) - ((\i -> if (truncate $ sqrt $ fromIntegral $ i)^2 == i then 1 else 0) n)| n <- [2..]]
15:16:11 <ookk> > nr_of_div = 0 : 1 : [((2*) $ length $ filter ((== 0).(mod n)) [1..(truncate $ sqrt $ fromIntegral $ n)]) - ((\i -> if (truncate $ sqrt $ fromIntegral $ i)^2 == i then 1 else 0) n)| n <- [2..]]
15:16:11 <lambdabot>  Parse error
15:16:28 <ookk> > nr_of_div = 0 : 1 : [((2*) $ length $ filter ((== 0).(mod n)) [1..(truncate $ sqrt $ fromIntegral n)]) - ((\i -> if (truncate $ sqrt $ fromIntegral i)^2 == i then 1 else 0) n)| n <- [2..]]
15:16:28 <lambdabot>  Parse error
15:16:41 <edwardk> > let intsqrt = truncate . sqrt. fromIntegral in  0 : 1 : [((2*) $ length $ filter ((== 0 : 1 : [((2*) $ length $ filter ((== 0).(mod n)) [1..intsqrt n]) - ((\i -> if (intsqrt i)^2 == i then 1 else 0) n)| n <- [2..]]
15:16:41 <lambdabot>  Parse error
15:17:06 <edwardk> lambdabot thinks its unreadable too =)
15:17:23 <ookk> hehe
15:17:25 <ookk> works in ghci
15:17:37 <ookk> > let nr_of_div = 0 : 1 : [((2*) $ length $ filter ((== 0).(mod n)) [1..(truncate $ sqrt $ fromIntegral n)]) - ((\i -> if (truncate $ sqrt $ fromIntegral i)^2 == i then 1 else 0) n)| n <- [2..]]
15:17:38 <lambdabot>  Parse error
15:19:30 <xerox> ?type zero
15:19:32 <lambdabot> Not in scope: `zero'
15:23:52 <xerox> > let n = 0:1:[2 * (length (filter ((== 0).(mod n)) [1..truncate (sqrt $ fromIntegral n)])) - if (truncate (sqrt $ fromIntegral n))^2 == n then 1 else 0 | n <- [2..]]in take 20 n
15:23:53 <lambdabot>  [0,1,2,2,3,2,4,2,4,3,4,2,6,2,4,4,5,2,6,2]
15:24:32 <xerox> What's that?
15:25:11 <ookk> number of divisors
15:25:45 <ookk> ... of n
15:26:25 <xerox> > let n = 0:1:[2 * (length (filter ((== 0).(mod n)) [1..truncate (sqrt $ fromIntegral n)])) - if (truncate (sqrt $ fromIntegral n))^2 == n then 1 else 0 | n <- [2..]] in take 20 (zip [0..] n)
15:26:26 <lambdabot>  [(0,0),(1,1),(2,2),(3,2),(4,3),(5,2),(6,4),(7,2),(8,4),(9,3),(10,4),(11,2),(...
15:26:41 <xerox> Ah, not proper divisors.
15:33:25 <edwardk> ahh
15:33:28 <edwardk> number of divisors
15:50:21 <palomer> yes!
15:50:24 <palomer> my grammar is unambiguous!
15:50:38 <edwardk> woot!
15:51:28 <palomer> the frown docs need some cleaning up
15:54:27 <monochrom> Congratulations
15:55:39 * palomer raises the roof
16:01:27 <palomer> anyone know if alex is greedy?
16:02:48 <SamB> well I've never caught it begging for money
16:02:58 <SamB> it does have the "longest match" rule if that is what you mean
16:03:39 <SamB> (in the even of a tie, the whichever pattern was first matches)
16:03:50 <emertens> Ah... the joys of sitting on the balcony, grilling burgers, and still being tied in to the intarweb
16:04:47 <skew> I've written up a typed AST for System F, but I haven't figured out how to make an evaluator:  http://rafb.net/paste/results/GrwwgU89.html
16:05:05 * Korollary hacks emertens' wifi
16:05:27 <emertens> I'm using TCP over carrier pidgeon
16:05:45 <Korollary> I can see your pigeons have rather low latency.
16:05:51 <emertens> *encrypted* pigeons at that ;-)
16:05:54 <SamB> --- Ping reply from emertens : 1.81 second(s)
16:06:08 <SamB> you have some amazing pigeons.
16:06:11 <Korollary> Isnt that kinda speed a case of animal abuse?
16:06:16 <emertens> I'm actually, just assuming you'll be pinging me
16:06:19 <emertens> and sending out responses
16:06:19 <SamB> really quick pigeon handlers too
16:06:31 <SamB> heh
16:06:37 <SamB> I bet you can't do that
16:07:13 <emertens> I'm using an oracle, so no problem
16:07:22 <SamB> emertens: so you can figure out the cookie?
16:07:51 <emertens> shhh, it's a secret
16:08:01 <emertens> I don't need government types coming around
16:08:13 <emertens> or it was
16:11:29 <emertens> Does lambdabot have a function for recommending good papers on Haskell?
16:11:43 <emertens> @paper
16:11:43 <lambdabot> Unknown command, try @list
16:11:46 <emertens> @list
16:11:46 <lambdabot> list [module|command]. Where modules is one of:
16:11:46 <lambdabot> babel base compose dice dict djinn drhylo dummy elite eval fact fresh haddock help hoogle instances karma lambda localtime log more pl poll pretty quote search seen slap spell state system tell todo
16:11:46 <lambdabot> topic type unlambda url version vixen where
16:11:47 <SamB> @google "good haskell paper"
16:11:49 <lambdabot> No Result Found.
16:11:54 <SamB> @google good haskell paper
16:11:56 <lambdabot> http://www.haskell.org/hawiki/CoMonad
16:11:56 <lambdabot> Title: CoMonad - The Haskell Wiki
16:14:07 <dcoutts> @localtime dons
16:14:08 <lambdabot> Local time for dons is Mon Jul 17 09:09:36 2006
16:16:00 <xerox> I just fed GHC some heavy typeclass hacker and it didn't faint!
16:20:53 <skew> GHC is eating people now!
16:21:30 <dylan> Not just people, hackers!
16:22:07 <madpickle> @slap
16:22:07 * lambdabot smacks  about with a large trout
16:22:10 <madpickle> heheh
16:22:24 <SamB> @slap madpickle
16:22:25 * lambdabot smacks madpickle about with a large trout
16:22:30 <madpickle> @karma- samb
16:22:30 <lambdabot> samb's karma lowered to -1.
16:22:33 <madpickle> :P
16:22:43 <SamB> huh!
16:22:44 <madpickle> that's just mean
16:22:46 <SamB> oh wait
16:22:47 <madpickle> :(
16:22:48 * madpickle cries
16:22:49 <SamB> @karma SamB
16:22:49 <lambdabot> You have a karma of 9
16:22:53 <SamB> oh good ;-)
16:22:57 <madpickle> oh, case sensitive
16:22:59 <SamB> @karma+ samb
16:22:59 <lambdabot> samb's karma raised to 0.
16:23:01 <madpickle> hello, bug
16:23:05 <SamB> yeah, case sensitive
16:23:10 <madpickle> @spank samb
16:23:10 <lambdabot> Unknown command, try @list
16:23:11 <emertens> don't you lose karma for checking your own?
16:23:13 <SamB> we'd be very happy for you to fix it ;-)
16:23:17 <SamB> emertens: no
16:23:18 <skew> so are nicks
16:23:26 <madpickle> nicks aren't case sensitive
16:23:26 <SamB> skew: so are nicks what?
16:23:30 <emertens> ah (I've seen some that do that :) )
16:23:35 <madpickle> /nick SKEW
16:23:39 <madpickle> SKEW Nickname is already in use.
16:23:48 <SamB> @karma+ SamB
16:23:48 <lambdabot> You can't change your own karma, silly.
16:23:52 <SamB> @karma- SamB
16:23:52 <lambdabot> You can't change your own karma, silly.
16:24:12 <emertens> that's deep
16:24:16 <madpickle> very
16:24:39 <kpreid> @. elite karma- kpreid
16:25:41 <SamB> @. elite karma- SamB
16:25:47 <SamB> @karma SamB
16:25:50 <kpreid> hmmmmmmm
16:25:52 <lambdabot> yOU caN'+ CHan93 y0uR oWn KAR/\/\a, SIl|y.
16:25:55 <lambdabot> yOu c4N'7 (hANgE YouR oWN karmA, sIL|Y.
16:25:55 <kpreid> oh
16:25:56 <lambdabot> You have a karma of 9
16:25:57 <madpickle> lol
16:25:58 <SamB> heh
16:25:59 <madpickle> yay for lag
16:26:04 <SamB> someone must have been listing commands or something
16:27:35 <kpreid> @. . id id a
16:27:36 <lambdabot> compose module failed: IRCRaised Parse error: "a\n"
16:27:43 <kpreid> aw
16:28:33 <xerox> Now!
16:28:35 <xerox> Watch me!
16:28:38 <xerox> *TaoSpree> (f (+(1::Int)) :: Int -> Int) 2
16:28:38 <xerox> 3
16:28:38 <xerox> *TaoSpree> (f (+(1::Int)) (+(1::Int)) :: Int -> Int) 2
16:28:40 <xerox> 4
16:28:49 <SamB> @. elite . elite keal
16:28:50 <lambdabot> I C4N exP1aIN whY zomETHinG i5 Wi+hoU7 xno\/\/In9 W|-|a+ +|-|3 RULe5 d3CiD3d 8y /\/\4N 4re
16:29:02 <madpickle> http://www.amazon.com/exec/obidos/tg/detail/-/B00067F1CE/ref=pd_ys_ir_all_60/103-7799488-2095812?_encoding=UTF8&v=glance
16:29:04 <madpickle> lmaao
16:29:04 <lambdabot> Title: Amazon.com: JL421 Badonkadonk Land Cruiser/Tank: Everything Else
16:29:28 <madpickle> i wonder if you get supersaver shipping
16:29:45 <madpickle> or a "$50 coupon off any purchase larger than $300 in the weapons and armor division"
16:29:52 <Korollary> oh my. It even has customer reviews.
16:30:15 <madpickle> 84 to be exact
16:31:15 <madpickle> item weight: 1100 pounds
16:31:19 <madpickle> batteries not included.
16:31:42 * xerox gasps
16:31:44 <xerox>     Illegal instance declaration for `Mappable a (r -> Int -> Int)'
16:31:45 <xerox>         (the Coverage Condition fails for one of the functional dependencies)
16:32:37 <SamB> madpickle: but it is in the "everything else" division!
16:33:16 <madpickle> heheh
16:35:03 <palomer> rephrase my question: does alex use max match or min match?
16:40:57 <foxy__> @seen dons
16:40:58 <lambdabot> dons is in #haskell-overflow and #haskell. I last heard dons speak 10 hours, 26 minutes and 45 seconds ago.
16:41:06 <foxy__> @localtime dons
16:41:08 <lambdabot> Local time for dons is Mon Jul 17 09:36:36 2006
16:41:24 <AI_coder> @localtime AI_coder
16:41:25 <lambdabot> Local time for AI_coder is Sun Jul 16 17:44:51 GMT 2006
16:41:32 <AI_coder> Haha, it's wrong.
16:41:50 <palomer> it seems alex uses maxmatch
16:42:23 <sjanssen> AI_coder: it asks your IRC client, so your computer is the one that's wrong
16:42:54 <sjanssen> @localtime lambdabot
16:43:06 <sjanssen> @keal!
16:43:06 <lambdabot> oh btw my fpu is blown due to a hardcased failsafe i have 3 year warranty right. and then they call fads
16:43:22 <palomer> @palomer!
16:43:23 <lambdabot> That's nuts!
16:44:15 <palomer> hrmph
16:44:21 <palomer> say I was to use happy/lex
16:44:31 <palomer> the problem is is that my string can't be tokenized
16:44:42 <palomer> certain parts can
16:44:43 <palomer> others not
16:44:46 <palomer> how do I deal with this?
16:45:18 <dcoutts> munch as one big token and parse it in haskell code
16:45:42 <dcoutts> eg see ghc's lexer for examples of mixing custom lexing code with alex
16:45:45 <palomer> so I wouldn't use happy?
16:46:15 <dcoutts> what can't be tokenised?
16:46:50 <palomer> I'm parsing musical notation
16:46:56 <palomer> things like "abcd | defg"
16:47:08 <palomer> abcd can't be tokenized
16:47:39 <dcoutts> can't it be treated as a single token?
16:47:40 <palomer> since it could either be [Note "a",Note "b",Note "c",Note "d"]
16:47:59 <palomer> or SongTitle "abcd"
16:48:12 <palomer> dcoutts: but then I would need to parse that token
16:48:20 <dcoutts> that's ok, do the parsing later
16:48:48 <dcoutts> or use costom lexing code for those bits
16:48:58 <palomer> I think I see
16:49:15 <dcoutts> eg ghc uses a custom lexer for decoding haskell strings
16:49:27 <dcoutts> including decoding escape sequences etc
16:50:02 <palomer> but how do you switch from an alex generated lexer to a custom one?
16:50:21 <dcoutts> see the ghc lexer
16:50:53 <palomer> hrmph
16:50:58 <palomer> I could also use lexer states
16:51:15 <palomer> or I parse the bare string
16:51:17 <palomer> oh the choices
16:51:20 <dcoutts> yep, there are some examples of that in the ghc lexer too
16:52:25 <palomer> lexer states seems to be the norm
17:11:25 <dcoutts> vincenz, have you seen the new Gtk2Hs Hoogle search?
17:11:39 <vincenz> no
17:11:44 <dcoutts> @where gtk2hs
17:11:44 <lambdabot> http://haskell.org/gtk2hs/
17:11:46 * vincenz can't sleep :/
17:11:50 <vincenz> I was up for 30 hours
17:11:54 <vincenz> slept for 5
17:11:56 <vincenz> cacn't sleep anymore
17:12:00 <dcoutts> poor vincenz
17:12:19 <dcoutts> it's the API search button on the side bar on the Gtk2Hs web site
17:12:54 <vincenz> congrats
17:13:04 <dcoutts> to ndm
17:13:38 <dcoutts> should make it easier for you to find things :-)
17:13:55 <vincenz> yep :|
17:17:01 <foxy__>  /Haskell has a smallish, and rather geeky, user base./ (Hudak /et al/, 2006)
17:17:45 <dcoutts> heh
17:18:14 <sjanssen> foxy__: I enjoyed the part about the hyenas and red meat a bit more
17:19:16 <tony2> ha, foxy__, he makes us sound like we're about to be beaten up !!
17:19:37 <tony2> I really liked the paper.
17:19:52 <dcoutts> wli, the hdbc website is back
17:19:55 <dcoutts> @where hdbc
17:19:56 <lambdabot> I know nothing about hdbc.
17:20:02 <dcoutts> @where+ hdbc http://gopher.quux.org:70/devel/hdbc/
17:20:02 <lambdabot> Done.
17:20:12 <dcoutts> including the api docs
17:20:21 <Philippa_> tony2: I wouldn't say that. True geeks include a surprisingly high proportion of martial artists
17:20:39 <Korollary> Yes
17:20:40 <dcoutts> @where+ hdbc http://quux.org/devel/hdbc
17:20:40 <lambdabot> Done.
17:20:45 <dcoutts> @where hdbc
17:20:45 <lambdabot> http://quux.org/devel/hdbc
17:21:10 <Korollary> and it's not because they get beat up. It's just that martial arts is somewhat a geeky hobby
17:23:51 <Philippa_> yeah, they amount to geeking both the body's means of movement and the way human brains react when they're trying to do so quickly at the same time
17:24:58 <tony2> Out of context it can be mis-parsed as the users are small and geeky, rather than the user base. That's all I meant.
17:25:04 <Philippa_> PvP computer games with some kind of time element do the latter as well, and they're pretty much classically geeky
17:25:48 <Korollary> heh. Small haskellers.
17:26:28 <Philippa_> I'm just trying to think who's the smallest haskeller I've met. I've not met that many, in fairness
17:26:58 <kuribas`> How can I map over an unboxed array?
17:27:25 <kuribas`> fmap gives me: No instance for (Functor (Data.Array.Base.UArray (Int, Int))) arising from use of `fmap' at invert.hs:4:33-36
17:27:54 <sjanssen> kuribas`: UArray can't be an instance of Functor because it has constraints on what kind of elements it can contain
17:29:07 <kuribas`> sjanssen: That makes sense.  Is there no function to map to another UArray of the same type?
17:29:18 <tony2> Actually, I think I've only ever met two haskellers in the real-world.
17:29:20 <sjanssen> kuribas`: Data.Array.IArray.amap
17:29:34 <dcoutts> @type Data.Array.IArray.amap
17:29:34 <sjanssen> I haven't met any Haskellers
17:29:35 <lambdabot> forall e i (a :: * -> * -> *) e'. (Ix i, Data.Array.Base.IArray a e, Data.Array.Base.IArray a e') => (e' -> e) -> a i e' -> a i e
17:29:37 <tony2> (and they were approx average size)
17:30:32 <Korollary> it can't be worse than The Little Schemers
17:31:05 <tony2> Korollary, true, true.
17:31:23 <kuribas`> sjanssen: Ah thanks.  I already tried amap, but I forgot to include Data.Array.Unboxed...
17:32:11 <xerox> I've got a crazy function.
17:32:39 <xerox> It generates the number 2^n where (n-1) is its number of arguments.
17:34:16 <SamB> xerox: so?
17:34:22 <vincenz> :/
17:35:44 <xerox> So what?
17:36:11 <vincenz> la vita e un processo di tortura?
17:37:33 <SamB> how is that supposed to qualify as crazy?
17:39:01 <vincenz> xerox: how did you write that ni haskell?
17:39:07 <vincenz> xerox: functions are not polyvariadic
17:39:42 <xerox> *TaoSpree> unW (c (+) 1 :: W (Int -> Int)) 0 :: Int
17:39:42 <xerox> 1
17:39:42 <xerox> *TaoSpree> unW (c (+) 1 2 3 4 :: W (Int -> Int)) 0 :: Int
17:39:42 <xerox> 10
17:39:42 <xerox> *TaoSpree> unW (c (+) 1 2 3 4 5 6 7 8 9 10 :: W (Int -> Int)) 0 :: Int
17:39:44 <xerox> 55
17:39:51 <xerox> Yes I did!
17:39:58 <vincenz> oh
17:40:11 <vincenz> I didn't say not
17:40:12 <Korollary> what is c?
17:40:12 <vincenz> I asked how
17:40:25 <xerox> c is magic.
17:40:32 <vincenz> xerox: from oleg's post?
17:40:35 <xerox> c :: (C a r) => (a -> a -> a) -> a -> r
17:40:51 <Korollary> well, then it's not as simple as you said before
17:41:06 <xerox> Simple?
17:41:35 <xerox> Sorry, when it was producing the power of two that was because I was using (+2) as function and not looking at the arguments besides the first oe.
17:42:06 <xerox> I just was a bit overwhelmed after 3 hours of hacking on this, and I gasped when I saw producing power of two's ... and compile!
17:42:25 * Korollary throws a Peano at xerox
17:42:39 * xerox succs
17:42:57 * vincenz sees xerox gets squished by a bigger Peano
17:43:14 <xerox> Now I will do ihope's function, finally.
17:43:17 * xerox grins evilly
17:43:22 <vincenz> what function
17:43:40 <xerox> m f (x:xs) = m (f x) xs
17:43:52 <xerox> Not sure about the [] case.
17:44:01 <vincenz> xerox: error on it
17:44:07 <vincenz> c is pretty clear
17:44:09 <vincenz> you need at least one a
17:44:19 <xerox> What?
17:44:25 <vincenz> c :: (C a r) => (a -> a -> a) -> a -> r
17:44:29 <vincenz> you need one a
17:44:30 <vincenz> always
17:44:33 <xerox> I know
17:44:36 <vincenz> so error on []
17:44:51 <xerox> That's what is bothering me now
17:44:59 <ihope> m f [] = f
17:45:01 <xerox> I shoud simply add a k
17:45:12 <ihope> Aye?
17:45:13 <xerox> m k f [] = f k
17:45:26 <xerox> m k f (x:xs) = f k (f x) xs
17:47:07 <ihope> But that's not recursive.
17:47:27 <ihope> Unless f = m, or something. >:-)
17:47:31 <xerox> Ops.
17:47:32 <xerox> :D
17:48:50 <vincenz> xerox: not to mention it's rather useless
17:49:04 <vincenz> xerox: most cases functions will have 2 arguments
17:49:12 <vincenz> at which point you can just foldr it over the list
17:49:14 <vincenz> and it'll do the same
17:49:52 <xerox> Simpler said that done
17:50:15 <sjanssen> vincenz: actually, this function is more similar to foldl
17:50:17 <vincenz> > foldr (+) 0 [1..9]
17:50:18 <lambdabot>  45
17:50:29 <vincenz> sjanssen: right a fold of some sort, I never remember the direction
17:50:48 <ihope> Right fold is right-associative, left fold is left-associative.
17:51:19 <ihope> @type let m k f [] = f k; m k f (x:xs) = f k (f x) xs in m
17:51:21 <lambdabot>   Occurs check: cannot construct the infinite type: t = t1 -> t2 -> t
17:51:21 <lambdabot>    Expected type: t1 -> t2 -> t
17:51:27 <ihope> How fun.
17:51:49 <sjanssen> is it really possible to write this function where the length of the list isn't known at compile time?
17:52:11 <ihope> sjanssen: sure it is, if you use Typeclass Magic.
17:52:13 <xerox> I just proved I can write f
17:52:20 <xerox> Now I am trying to prove m.
17:53:19 <sjanssen> but in your tests, aren't the number of arguments to f known at compile time rather than run time?
17:53:53 <xerox> No, they are known at runtime.
18:03:20 <vincenz> xerox: the unW (c (+) ...) stuff
18:03:23 <vincenz> that's known at compiletime
18:11:37 <xerox> vincenz: oh, really?
18:12:40 <xerox> AHAHAH
18:12:42 * xerox des
18:13:16 <xerox> *TaoSpree> unW (d (c f) [1] :: W (Int -> Int)) 0 :: Int
18:13:16 <xerox> 1
18:13:16 <xerox> *TaoSpree> unW (d (c f) [1..3] :: W (Int -> Int)) 0 :: Int
18:13:16 <xerox> 6
18:13:16 <xerox> *TaoSpree> unW (d (c f) [1..10] :: W (Int -> Int)) 0 :: Int
18:13:19 <xerox> 55
18:13:23 <xerox> I'm getting good at this.
18:16:08 <palomer> has anyone here used states in alex?
18:18:46 <sjanssen> xerox: what is W?
18:19:28 <dons> morning!
18:19:37 <sjanssen> evening
18:20:06 <dons> how's the hacking going sjanssen ?
18:20:13 <dons> we've got, what, 4 weeks to go?
18:20:23 <sjanssen> thereabouts
18:20:51 <dons> what's the state of unicode, atm?
18:20:58 <sjanssen> I'm currently moving ByteString to StorableVector
18:21:11 <sjanssen> I'll push as soon as I get it to typecheck
18:21:11 <dons> ok.
18:22:23 * xerox pokes dons
18:22:27 <xerox> sjanssen: just a wrapper.
18:22:35 <xerox> I am cleaning up the code and then I want to show you dons!
18:22:42 <kuribas`> Haskell is slooooowwww ...
18:23:05 <dons> kuribas`: unlikely. it's one of the 3-4 fastest languages around
18:23:08 <dons> ?shootout
18:23:08 <palomer> @seen edwardk
18:23:09 <lambdabot> http://shootout.alioth.debian.org/gp4/benchmark.php?test=all&lang=all
18:23:09 <lambdabot> edwardk is in #perl6, #haskell-overflow, #haskell-blah and #haskell. I last heard edwardk speak 2 hours, 32 minutes and 30 seconds ago.
18:23:21 <dons> are you _compiling_ with ghc, with optimisations on?
18:23:21 <ndm> I saw the win32 shootout today
18:23:29 <palomer> kuribas`: tell me about it
18:23:33 <kuribas`> dons: yes
18:23:37 <ndm> in that, Haskell is pretty slow because they are still using 5.2 and bad code
18:23:47 <dons> 5.2??
18:23:49 <ndm> i emailed them to try and get it fixed
18:23:52 <ndm> 5.0.4.
18:23:58 <ndm> i'm not used to a console mode IRC client
18:24:03 <ndm> and backspace is broken :)
18:24:05 <dons> kuribas`: have you profiled? you might have introduced a space leak
18:24:09 <kuribas`> I wrote a program that inverts a pbm file, and it takes 32s for a large file.
18:24:16 <kuribas`> dons: hmm, no
18:24:22 <dons> do you use lists, or arrays/bytestrings?
18:24:31 <kuribas`> yes
18:24:32 <ndm> kuribas, does it do the inversion byte by byte?
18:24:32 <dons> lists would be super inefficient for this problem
18:24:36 <sjanssen> kuribas`: are using a UArray of bools?
18:24:44 <kuribas`> yes
18:24:52 <dons> how do you do the IO?
18:24:55 <dons> hPut/hGET?
18:25:02 <ndm> dons, with the appropriate fusion, if its a list it could be very efficient
18:25:06 <kuribas`> using interact
18:25:07 <sjanssen> kuribas`: that will be incredibly slow
18:25:13 <palomer> kuribas`: get ready to put some work in if you want to get your code up to speed
18:25:13 <dons> ah. slow...
18:25:21 <dons> you're packing [Char] into an array.
18:25:36 <dons> try Data.ByteString for the IO instead, or hGet/hPut directly into the array
18:25:45 <dons> you should get C-ish speed
18:26:08 <kuribas`> dons: the problem is that I want to parse the header first.
18:26:09 <dons> you'd see this as soon as you profiled, I'd think. the packing function would be taking all the time
18:26:20 <dons> sure, then use Data.ByteString
18:26:23 <dons> ?where fps
18:26:24 <lambdabot> http://www.cse.unsw.edu.au/~dons/fps.html
18:26:35 <dons> its designed for the kind of problem you're describing :)
18:26:36 <sjanssen> the problem is UArray of bools.  mapping a function onto that means a bitwise op to get the bit out, then negating, then another bitwise op to put it back in
18:26:46 <dons> that could be costly too
18:26:54 <dons> I don't like the interact though
18:27:12 <dons> kuribas`: for conclusive proof, profile.
18:27:15 <lisppaste2> kuribas annotated #22699 with "new image.hs code" at http://paste.lisp.org/display/22699#2
18:27:20 <dons> kuribas`: compile with -prof -auto-all -O
18:27:24 <sjanssen> best to follow dons suggestion of moving to ByteString, then map a bitwise negation on each word8
18:27:25 <dons> then run with +RTS -p -RTS
18:27:37 <vincenz> hmm
18:28:04 <dons> that looks nasty unpackPixels :: Char -> [Bool]
18:28:34 <lisppaste2> kuribas annotated #22699 with "invert" at http://paste.lisp.org/display/22699#3
18:28:36 <dons> its not so much that haskell is slow, its that you pick a data type with the wrong space behaviour
18:29:02 <kuribas`> dons: I see, so I shouldn't use char?
18:29:20 <kuribas`> But how can I parse the header fields then?
18:29:20 <dons> you should avoid [Char]
18:29:46 <dons> yeah, so here you're parsing with parsec. that can stay as [Char]
18:30:01 <dons> or rewrite it in Data.ByteString using a hand-written parser
18:30:08 <palomer> man, if I hadn't been reading that self help book, I could be really pushing dons' buttons
18:30:16 <palomer> oh well
18:30:22 <dons> but you need a way to fill your array, probably a a bytestring, without conversion to and from [Char]
18:30:47 <mwc> I'd sure like to see Haskell' adopt SML's local ... in ... end construct. It's sort of a multi-definition where, which can be simulated by appending a where to a tuple definition, which is how I do it now. But the SML form is more readable, IMAO.
18:31:19 * palomer high fives mwc
18:31:41 <dons> kuribas`: do you know the offset into the file you reach after reading the header?
18:31:51 <dons> so that you could then just suck everything in from that point?
18:31:51 <kuribas`> dons: no
18:32:23 <dons> then I suggest rewriting the parser (its pretty small) in Data.ByteString.
18:32:51 <dons> then you'll avoid all the list stuff, and the inefficient bool twiddling
18:33:11 <dons> ideally, you should profile now before you change things, so you get an idea of the key places to look at
18:33:15 <kuribas`> dons: well I thought that an unpacked array of Bool would be efficient
18:33:50 <dons> they are (see the shootout). i've not considered that a map over such an array might be inefficient. we'll see if that's really a downside
18:34:05 <dons> profile, anyway. compile with -prof -auto-all -O, run with +RTS -p -RTS, read foo.prof
18:34:16 <kuribas`> When I use ghc -prof etc I get an error: Could not find module `Data.Char':
18:34:26 <kuribas`> I don't get that error without -prof
18:34:26 <dons> oh, you don't have profiling libs installed.
18:34:39 <dons> can you pull them in from your OS packaging system?
18:34:43 * xerox pokes dons
18:34:48 <dons> xerox?
18:34:53 <kuribas`> yes, apt-get :-)
18:34:57 <foxy__> dons, get you get my patch?
18:35:12 <dons> foxy__: yep.
18:35:15 <xerox> Do you know how to highlight haskell code in haskellwiki?
18:35:28 <dons> <haskell>foo :: a -> b </haskell>
18:35:53 <xerox> Clean.
18:36:08 <xerox> Hmm, doesn't seem to work.
18:36:23 <xerox> Oh, nevermind.
18:37:06 <xerox> ?wiki User:PaoloMartini
18:37:06 <lambdabot> http://www.haskell.org/haskellwiki/User:PaoloMartini
18:37:10 <xerox> Check that out, dons!
18:37:10 <kuribas`> dons: I don't see how I can avoid the twiddling with Bool, unless I use a packed format for my array.
18:37:37 <xerox> I lost the count of the hours it took me.
18:37:58 <xerox> (To implement `c' and `d', that is.)
18:38:00 <dons> I think sjanssen suggested you dump it into a bytestring, which you can then map over, it'll use a bit more space, but need less operators to access
18:38:07 <dons> so time should be improved.
18:38:11 <dons> but worry about the IO first.
18:38:17 <xerox> (See test1 and test3 in particular.)
18:38:48 <dons> any time you convert your file array to a [Something] performance will be bad
18:39:11 <dcoutts> dons, did you see that the linspire people have a parser using ByteString ?
18:39:20 <dons> yeah, I heard about that
18:39:20 <xerox> vincenz: ping
18:39:22 * dcoutts would like to see that code
18:39:29 <dons> dcoutts: any idea on the groupBy buggle?
18:40:25 <dcoutts> dons, no, I'm still getting the multiple fusion systems working
18:40:37 <dons> ok. i'll investigate
18:40:45 <xerox> @tell vincenz sure that is compile time, the idea is to typecheck it!
18:40:45 <lambdabot> Consider it noted.
18:41:09 <dcoutts> dons, I thought it was working for chunk size of 1
18:41:27 <xerox> `d's type required a hard GHC joint work
18:41:28 <dcoutts> dons, see if that still works, perhaps the bug is only expsoed for 2
18:41:38 <dons> hmm. yes, maybe.
18:42:04 <dcoutts> dons, otherwise if it's failing for sizes of 1 then perhaps it's lying about here in code I never sent
18:43:11 <kuribas`> dons: Can't it optimize away the lists, by agressive inlining or something?
18:43:39 <dons> there are cases, but in general no, you'd need to give the compiler more information for that to happen
18:44:06 <dons> still, profile. where's the slow stuff?
18:44:24 <dons> this would be a good bytestring benchmark, actually.
18:44:48 <dcoutts> kuribas`, it depends on how you use the lists, for some uses the intermediate lists can be eliminated, but not always, if you need to know you can get the compiler to tell you
18:45:03 <dcoutts> dons, what's the benchmark exactly?
18:45:16 <dcoutts> parsing and inverting a pnm file?
18:45:22 <lisppaste2> kuribas annotated #22699 with "profiling stuff" at http://paste.lisp.org/display/22699#4
18:45:23 <dons> oh, in this case kuribas` is inverting an image
18:45:54 <dcoutts> inverting the colour at each pixel or flipping it upside down?
18:46:17 <kuribas`> inverting the color at each pixel
18:46:18 <dons> kuribas`: lots of conversion functions getting in the way?
18:46:26 <dons> and IO, writePBM
18:46:40 <dons> replacing that with bytestrings should chop 30% off the runtime straight away
18:48:04 * xerox yawnes
18:51:11 * dcoutts yawns also
18:51:15 <dcoutts> mm, more tea
18:51:20 <xerox> Duncan, did you see my code?
18:51:24 <dcoutts> nope
18:51:27 <dcoutts> what code?
18:51:29 * xerox boings
18:51:37 <xerox> http://haskell.org/haskellwiki/User:PaoloMartini
18:51:38 <kuribas`> I see, it's the intermediate functions that take all the time and space.
18:51:38 <lambdabot> Title: User:PaoloMartini - HaskellWiki
18:51:44 <dcoutts> xerox, did you decide if you're comming to cambridge? :-)
18:51:53 * dcoutts would like to meet xerox in person
18:52:12 <xerox> I'm short on money, if my parents are willing to fund me, I'll happily come, for sure.
18:52:39 * xerox would like to meed dcoutts too!
18:52:43 <dcoutts> I'll almost certainly be able to offer you free accomodation
18:52:51 <dcoutts> and dinner too probably
18:52:55 <xerox> Oh great.
18:52:58 * xerox hugs dcoutts 
18:53:05 <dcoutts> which should cut down on the cost
18:53:13 * edwardk wakes back up
18:53:21 <xerox> edwardk: see my code!
18:53:24 <xerox> I typed that!!!
18:53:24 <edwardk> heya dons, any luck with that mpz_powm thing?
18:53:34 <vincenz> 4am
18:53:34 <lambdabot> vincenz: You have 1 new message. '/msg lambdabot @messages' to read it.
18:53:39 <xerox> (It's called `d' there.)
18:53:39 <dons> oh, been sleeping since we had that conversation
18:53:47 <dons> so haven't looked into it further
18:53:55 <vincenz> time to try to get an hour or two of sleep
18:53:55 <dcoutts> xerox, I don't understand it :-) what's going on?
18:54:21 <edwardk> xerox: you ever figure out how to do that polyvariadic thing you wanted?
18:54:26 <xerox> ihope came up with d f [] = f; d f (x:xs) = d (f x) xs
18:54:40 <xerox> He said it was the right answer to the wrong question
18:54:55 <dcoutts> heh
18:54:56 <xerox> But the question implicitly poses was interesting enough to keep me hacking that code for.... 5 hours?
18:55:01 <ihope> Well, the first equation was originally "d f [] = []".
18:55:02 <xerox> And I got it, I think
18:55:02 <edwardk> heh
18:55:11 <xerox> edwardk: check the url above
18:55:12 <edwardk> i've been off reading random papers
18:55:28 <dons> xerox: you've seen the polyvariadic function games, using roughly, d f [] = f; d f (x:xs) = d (f x) xs, but with a typeclass?
18:55:53 <xerox> What do you mean by "with a typeclass" ?
18:55:58 <xerox> (Did you see the code?)
18:56:16 <lispy> what was the question? (why was it the answer to the wrong question...)
18:56:32 <lispy> how does that type check?
18:56:47 <xerox> ^_^
18:56:53 <lispy> @type let {d f [] = f; d f (x:xs) = d (f x) xs} in d
18:56:54 <lambdabot>   Occurs check: cannot construct the infinite type: t = t1 -> t
18:56:54 <lambdabot>    Expected type: t1 -> t
18:56:58 * xerox grins
18:57:56 <xerox> I miht try to explain...
18:58:10 <xerox> I will probably fall asleep in some minutes anyway
18:58:23 <bolrod> ofcourse
18:58:24 <bolrod> :)
18:58:36 <bolrod> hrm... it'll get light in a few minutes
18:58:40 <edwardk> No instance for (Num Bool)
18:58:40 <edwardk>       arising from the literal `4' at xerox.hs:30:62
18:58:40 <edwardk>     Possible fix: add an instance declaration for (Num Bool)
18:58:40 <edwardk>     In the expression: 4
18:58:40 <edwardk>     In the third argument of `foldr', namely `[1, 2, 3, 4]'
18:58:41 <edwardk>     In the call (foldr (+) 0 [1, 2, 3, 4])
18:58:43 <dons> kuribas`: how are you going? worked out any improvements?
18:58:45 <lispy> @localtime bolrod
18:58:46 <lambdabot> Local time for bolrod is Mon Jul 17 03:58:24 2006
18:58:49 <edwardk> on the code from your page xerox =)
18:58:53 <xerox> Oh, crap.
18:59:19 <bolrod> actually... there already is a reddish glow far on the horizon
18:59:41 <bolrod> in about 15 minutes.. birds will be singing..
18:59:50 <lispy> the sun was up before i slept on sat. morning...
19:00:07 <bolrod> sun comes up at ... 5:30 I think
19:00:08 <lispy> that was a fun night...even avoided the hang over :)
19:00:11 <xerox> edwardk: comment out that test
19:01:11 <kuribas`> dons: Not really, I think I'll have to rewrite the functions so they don't use intermediate lists.
19:01:16 <xerox> edwardk: haha sorry
19:01:28 <edwardk>  i did
19:01:30 <edwardk> works fine otherwise
19:01:49 <kuribas`> dons: I thought they would be optimized away by the compiler.
19:01:53 <xerox> edwardk: I've made it a recursive defnition inadvertedly
19:02:01 <xerox> dons: I mean, I had to use type classes
19:02:09 <xerox> dons: if you were referring to other code, I'd like to see
19:02:18 <edwardk> *nods*
19:02:31 <xerox> edwardk: you see? it ought to be a `test1' at the end, not 2
19:02:36 <xerox> OK.
19:02:55 <xerox> Works? :D
19:03:12 <bolrod> how nice would sources be.. with only functions like... test_###
19:03:38 <xerox> I don't know how to use QuickCheck yet, or I could have tried.
19:03:47 <dons> kuribas`: that's one step. you might also consider constructing a bytestring from your writePBMs function. let me see if I can hack one up..
19:03:50 <edwardk> yeah works fine
19:04:04 * xerox boings happily
19:04:23 <dons> dcoutts: confirmed. this new groupBy bug occurs at chunk=2, instead of 1
19:04:27 <dons> so an odd/even issue?
19:04:29 <dcoutts> dons, heh
19:04:37 <bolrod> xerox: ofcourse.. a new day is beginning!
19:04:58 * xerox is tempted to give bolrod a crazy function to type, as answer
19:05:03 <edwardk> heh thinking about using this approach for the javascript arguments now ;)
19:05:32 <bolrod> ;o
19:05:38 <xerox> %)
19:09:03 <bolrod> what the hell was that O_o
19:09:10 <bolrod> ur face is liek... twisted!
19:10:19 <vincenz> I can't sleep :/
19:10:33 <dons> bolrod: it's a serious condition, you shouldn't make fun of xerox
19:10:48 <bolrod> sorry :(
19:11:03 <dons> having a twisted face ;)
19:11:05 <bolrod> vincenz: yeah... and birds are singing outside... they make me feel more awake
19:11:08 <SamB_XP> xerox: just write functions returning Bool
19:11:10 <dcoutts> dons, really not sure about what's wrong with lazy groupBy, it's remarkably tricky I found
19:11:19 <vincenz> bolrod: I had 30 hour day yesterday and slept 5 hurs
19:11:22 <xerox> SamB_XP: sorry?
19:11:27 <dons> yeah. i don't know of a trickier function. :/
19:11:29 <vincenz> bolrod: and before that 30 hour day I had also slept only 5 hours
19:11:31 <SamB_XP> to use QuickCheck
19:11:37 <xerox> SamB_XP: ah cool.
19:11:49 <bolrod> hrm... lets see
19:11:50 <SamB_XP> True is good, False is bad
19:12:01 <dons> dcoutts: suggests to me we should integerate n=1,2,3.. into the QC tests
19:12:05 <dons> since this went unnoticed
19:12:05 <SamB_XP> you can do more, but that is enough to start with
19:12:10 <dcoutts> yeah
19:12:27 <bolrod> dude... I can't even say.. I went to bed at 4:30 yesterday..
19:12:29 <xerox> SamB_XP: and how to use them to check?
19:12:32 <dcoutts> though I thought the arbitrary instance should do that
19:12:36 <bolrod> because for a normal person that would seem 2 days ago
19:12:41 <bolrod> when it was actually yesterday..
19:12:53 <bolrod> this is weird
19:12:59 <SamB_XP> xerox: well... you name them correctly and run the script on them ;-)
19:13:03 <dcoutts> dons, perhaps the arbitrary instance needs improving, is there any way we can see examples of the random data it's generating?
19:13:05 <SamB_XP> er, on your file
19:13:15 <xerox> SamB_XP: now what's this script?
19:13:34 <dcoutts> dons, is the bug the same for /= as == ?
19:13:43 <dons> doesn't appear with ==
19:13:45 <dons> only /=
19:13:55 <dons> (hmm, like before?)
19:14:07 <SamB> @google conjure quickcheck.hs
19:14:11 <lambdabot> http://j.mongers.org/pub/haskell/darcs/conjure/
19:14:11 <lambdabot> Title: Index of /pub/haskell/darcs/conjure
19:14:26 <vincenz> dcoutts: use Debug.Trace?
19:14:32 <SamB> thae quickcheck.hs there might be useful
19:14:38 <dcoutts> yeah, could do
19:14:59 <xerox> SamB: thanks!
19:15:05 <SamB> you name them starting with "prop_"
19:15:12 <dons> kuribas`: looking at writePBM, you'd be able to construct rows in O(1) using take.drop with a bytestring, instead of O(n) using your 'row' function, if your bm's were bytestrings.
19:15:46 <xerox> SamB: I see. Will try.
19:15:53 <xerox> Goodnight Haskellers!
19:15:58 <xerox> Variadic dreams.
19:16:01 <SamB> good night
19:16:03 <vincenz> morning xerox
19:16:11 <SamB> heh, variadic dreams
19:16:57 <kuribas`> dons: Yes, but I prefer the bm's to be twodimensional arrays, because they are easier to manipulate.
19:17:20 <vincenz> kuribas`: that's just an interface issue
19:17:36 <vincenz> getat im x y = getat' im (x+rowlength*y)
19:18:00 <dons> kuribas`: hmm, yes. perhaps an array of bytestring?
19:18:18 <dons> (since you could then write them directly, uninterpreted. but still index rows?)
19:18:57 <dcoutts> why not a UArray (Int, Int) Word8 ? (or even Char)
19:19:31 <kuribas`> I use an UArray (Int, Int) Bool, which should be reasonably efficient.
19:19:32 <dons> well, he's got UArray .. Bool atm, it's more the conversion in and out of this form that's costing, iirc
19:19:50 <dons> so e.g. to write to file, and to pack and unpack from [Char]
19:19:59 <dons> is that right, kuribas` ?
19:20:02 <kuribas`> yes
19:20:49 <dons> ideally you'd use an hGetBuf/ByteString.readFile populate an array directly. though it's then harder with the array index type.
19:21:16 <dons> an interesting problem. a variety of solutions, non obviously optimal
19:22:05 <dcoutts> copying is relatively cheap
19:22:28 <kuribas`> I'll try to write directly to file using putChar, instead of creating a string
19:22:54 <dons> some arrays can be written directly
19:22:54 <kuribas`> Perhaps reading is more efficient using getChar.
19:23:12 <dons> hGetArray/hPutArray
19:23:19 <dons> ?hoogle hGetArray
19:23:20 <lambdabot> Data.Array.IO.hGetArray :: Handle -> IOUArray Int Word8 -> Int -> IO Int
19:23:40 <dons> which is like a bit slower bytestring, ultimately
19:23:53 <dcoutts> shouldn't be slower
19:23:58 <kuribas`> In any case, it is more important to have fast access to the array, than to do fast IO.
19:25:15 <dcoutts> one could write out a 2D array of chars by copying to a 1D and then using that for fast IO
19:25:28 <dcoutts> that's probably quicker than lots of putChar
19:25:43 <dcoutts> the copyign is probably cheaper than the locking
19:26:00 <dons> kuribas`: though writePBM was 1/3 your running time. due to the row construction, i suspect, and then the String writing (how big are these file?)
19:26:32 <kuribas`> ~ 1MB
19:26:55 <dons> so string io will be slow there as well. it's the combination of row construction and [Char] constructoin/io
19:27:12 <dons> remember a [Char] is represented as a list of pointers to pointers to char
19:28:30 <kuribas`> dons: Yes.  The concatMap function is also very inefficient, but it could be made efficient when the compiler does agressive inlining.
19:29:01 <palomer> yes!
19:29:20 <vincenz> no!
19:29:25 <kuribas`> Apparently ghc doesn't do agressive inlining...
19:29:33 <dcoutts> dons, speaking of which I reckon we can fuse concatMap effeiciently under the streams system
19:29:33 <kuribas`> vincenz: why not?
19:29:51 <vincenz> kuribas`: I was responding to palomer's out of the context yes.
19:29:59 <vincenz> kuribas`: inlining is typically a good idea, yes
19:30:24 <dons> dcoutts: now that would be interesting
19:30:32 <dons> since its such a troublesome function over arrays
19:30:42 <vincenz> dcoutts: most likely, especially if you work at the block level
19:31:10 <vincenz> only the last block will cause a bit more work
19:31:18 <dons> kuribas`: sure it does. its quite amazing watching the inliner go to work sometimes.
19:31:33 <dons> anyway, the solution is clear, get rid of [Char], [Bool]
19:31:43 <vincenz> dcoutts: at which point, however, I wonder how efficient it will be for smaller bytestrings
19:31:53 <palomer> who says idiomatic haskell is slow?
19:31:58 <palomer> WHO
19:32:11 <dcoutts> world health organisation?
19:32:15 <kuribas`> dons: how can I see when ghc does inlining?
19:32:18 <palomer> that's who
19:32:25 <lispy> why is the WHO publishing lies about haskell?
19:32:34 <dons> -ddump-simpl-stats would be one way
19:32:40 <dons> (with -O of course)
19:32:47 <palomer> Hu pushed'em to it
19:32:48 <lispy> maybe HIV is made up too....
19:33:16 <sjanssen> I wonder if concatMap could be made to work with list fusion . . .
19:33:22 <dons> concatMap will immediately become a foldr ((++) . f) []
19:33:46 <dons> which will, in the right conditions, fuse with any build/foldr ops
19:34:47 <vincenz> sjanssen: not unless you can go inside the blackbox of the haskell system
19:34:52 <vincenz> sjanssen: cause it requires pointer relinking
19:35:51 <kuribas`> I'll work on it more tomorrow, thanks for the help!
19:36:15 <dons> kuribas`: ghc inlines based on a 'small enough' heuristic. if you find that its not inlining things you think should be (semi-unlikely) you can really crank it up. -funfolding-use-threshold
19:36:31 <dons> so the default is 8, you can try 1000 and get everything inlined :}
19:36:53 <kuribas`> dons: yay, I have to try that!
19:37:03 <dons> in array code, more useful is to try -fliberate-case-threshold
19:37:20 <dons> it seems to help expose array internals better
19:37:20 <vincenz> what does that do
19:37:35 <vincenz> ah
19:37:37 <sjanssen> dons: do you think this program will fuse? length $ concatMap (enumFromTo 1) [1 :: Int .. n]
19:37:51 <dons> tweak's the liberate case optimisation, vincenz (according to the docs ;)
19:38:02 <dons> sjanssen: if there's a rule for length as build/foldr
19:38:10 <dons> i.e. length = foldl ..
19:38:12 <sjanssen> dons: there is
19:38:20 <dons> then yeah, it should.
19:38:36 <dons> you might need ghc 6.5 to have it match (rule matching is a bit wobbly in 6.4)
19:38:45 <sjanssen> which is sort of questionable, because in some cases the length fusion causes a program to stack overflow
19:39:15 <dons>     1 fold/build
19:39:16 <vincenz> why doesn't haskell use heap-allocated stackframes?
19:39:18 <dons> is fired
19:39:45 <dons> you'd really want foldl'/length, like we have in bytestring
19:39:47 <edwardk> hrmm, has anyone else had trouble with the HList sources?
19:40:07 <dons> lengthU = foldl' (const . (+1)) (0::Int)
19:40:34 <sjanssen> dons: GHC's list fusion can't do left folds
19:40:41 <dons> ah, silly me
19:40:47 <vincenz> sjanssen: why not?
19:40:49 <dons> stoopid build/foldr
19:41:05 <dons> "length" [~1] forall xs. length xs = foldr incL (I# 0#) xs
19:41:05 <dons> "lenAcc" [1]  forall n#. foldr incL (I# n#) = lenAcc n#
19:41:27 <sjanssen> vincenz: nobody has devised a framework that makes it all work.  I'm new to this so I don't know all the answers
19:41:34 <edwardk> darcs, installed, make(d), but the make blows up with:
19:41:34 <edwardk> Record.hs:237:20:
19:41:34 <edwardk>     A pattern type signature cannot bind scoped type variables `v'
19:41:34 <edwardk>       unless the pattern has a rigid type context
19:41:34 <edwardk>     In the pattern: v :: v
19:41:35 <edwardk>     In the definition of `hTPupdateAtLabel':
19:41:37 <edwardk>         hTPupdateAtLabel l (v :: v) r
19:41:39 <edwardk>                            = hUpdateAtLabel l v r
19:41:41 <edwardk>                            where
19:41:43 <edwardk>                                (_ :: v) = hLookupByLabel l r
19:41:47 <edwardk> it might be a ghc head thing though
19:41:48 <vincenz> edwardk: use a paste site?
19:41:57 <dons> looks like a ghc head thing
19:42:00 <edwardk> kk
19:42:07 <vincenz> sjanssen: but what's the current limitation with foldl over foldr?
19:42:08 <dons> not surprising with HList, it sits on the undefined edge
19:42:14 <edwardk> *nods*
19:42:31 <edwardk> so i can either have 6.5 features or the stuff hlist gives =)
19:42:36 <vincenz> dons: just like schroedinger's cat?
19:42:38 <sjanssen> vincenz: if I remember correctly, you can fuse either right folds or left folds but not both
19:42:48 <vincenz> sjanssen: ah ... yeah that makes sense
19:43:53 <edwardk> ok, 6.4.2 is playing nice
19:45:19 <dcoutts> vincenz, it's possible to express foldl as a foldr, and indeed get fusion that way, however ghc is missing an analysis & transformation needed to make that produce effecient code. It's an acknowledged shortcomming.
19:46:04 <edwardk> currently playing with hlist to see if i can shoehorn in javascript style namespaces
19:48:09 <vincenz> dcoutts: using reverse?
19:49:29 <dcoutts> vincenz, no, using higher order stuff
19:49:40 <dcoutts> see if you can work it out :-)
19:51:10 <vincenz> not now, too tired, but sure
19:52:41 <vincenz> I'm guessing something with flip
19:54:48 <dcoutts> dons, I'm sending you a couple huge patches for fps-unstable and going to bed
19:54:55 <dons> ok.
19:55:46 <dcoutts> well actually I can discuss them first
19:55:51 <dcoutts> perhaps on -overflow
20:16:18 <DukeDave> an oddity:
20:16:39 <DukeDave> Fraction> reduceFrac (addFrac (2,3) (16,32))
20:16:47 <DukeDave> (7, 6)
20:17:09 <DukeDave> however
20:17:12 <DukeDave> Fraction> (reduceFrac . addFrac) (1,4) (16,32)
20:17:24 <DukeDave> Type error
20:18:15 <DukeDave> ... I was under the immpression that  f (g x) = (f . g) x     :)
20:18:49 <dons> fractions aren't nice
20:18:54 <haskey> 10/3 returns 3.333333333333. How do I get the integer division between 10 and 3?
20:19:03 <dons> > 10 `div` 3
20:19:04 <lambdabot>  3
20:19:05 <DukeDave> oh, it's my own fraction class by the way :)
20:19:21 <haskey> dons: thanks
20:19:26 <dons> > 1.1 + 2.2 -- i don't like anything 'cept Int and Word
20:19:26 <lambdabot>  3.3000000000000003
20:19:49 <zarvok> heh, nice example dons
20:19:50 <Cale> What about Integer?
20:20:09 <dons> i considered Integer, but I mean _really_, infinite precision? come on.
20:20:15 <haskey> so lamdbabot does calculations and answers to basic questions right? for example 5^3
20:20:23 <dons> and no so basic.
20:20:24 <dons> any haskell
20:20:30 <Cale> haskey: It evaluates haskell expression
20:20:30 <Cale> s
20:20:40 <haskey> 5^3
20:20:46 <Cale> > 5^3
20:20:48 <lambdabot>  125
20:20:52 <dons> > fix $ \f -> 1 : 1 : zipWith (tail f) f
20:20:52 <Cale> > 2^100
20:20:52 <lambdabot>    Expecting a function type, but found `[a]'
20:20:52 <lambdabot>    Expected type: [a]
20:20:52 <lambdabot>   ...
20:20:53 <lambdabot>  1267650600228229401496703205376
20:20:58 <Cale> > 2^500
20:20:59 <lambdabot>  3273390607896141870013189696827599152216642046043064789483291368096133796404...
20:20:59 <dons> bad me.
20:21:00 <zarvok> haskey, to get it to evaluate, stick a > in front of the expression
20:21:01 <haskey> that's fucking howesome
20:21:17 <haskey> I can't believe you built such a bot
20:21:21 <Cale> > let fibs = 0 : 1 : zipWith (+) fibs (tail fibs) in fibs
20:21:22 <lambdabot>  [0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,...
20:21:23 <haskey> is it written in haskell?
20:21:26 <Cale> yes
20:21:43 <dons> > fix $ \fibs = 0 : 1 : zipWith (+) fibs (tail fibs)
20:21:43 <lambdabot>  Parse error
20:21:50 <dons> > fix $ \fibs -> 0 : 1 : zipWith (+) fibs (tail fibs)
20:21:51 <lambdabot>  [0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,...
20:21:56 <Cale> hehe
20:22:12 <DukeDave> @hoogle fix
20:22:13 <lambdabot> Control.Monad.Fix.fix :: (a -> a) -> a
20:22:13 <lambdabot> Control.Monad.Fix :: module
20:22:13 <lambdabot> System.IO.fixIO :: (a -> IO a) -> IO a
20:22:31 <dons> recursion combinator
20:22:46 <haskey> oh my god... this is so cool
20:22:46 <lispy> oh i was thinking fibs started with [1,1..], is that a different sequence?
20:22:56 <DukeDave> ah, beyond my scope then :)
20:23:26 <dons> ?type map (+1)
20:23:27 <lambdabot> forall a. (Num a) => [a] -> [a]
20:23:31 <dons> ?vixen-on
20:23:32 <lambdabot> What's this channel about?
20:23:37 <dons> what do you think of haskell hackers?
20:23:37 <lambdabot> Ooh, functional programmers are so hot!
20:23:40 <dons> true
20:23:40 <lambdabot> what do you want to know about me?
20:23:48 <dons> well, hmm. age?
20:23:48 <lambdabot> i'm 19
20:23:52 <lispy> @keal
20:23:53 <lambdabot> tomorrow i share next mathematical secrety
20:23:58 <dons> ?vixen-off
20:23:58 <lambdabot> Bye!
20:24:06 <DukeDave> mmm, spare time :)
20:24:09 <dons> ?google lambdabot
20:24:10 <lambdabot> http://www.cse.unsw.edu.au/~dons/lambdabot.html
20:24:11 <lambdabot> Title: lambdabot
20:24:14 <haskey> ahahah
20:24:23 <haskey> ok
20:24:33 <lispy> @version
20:24:33 <lambdabot> lambdabot 4p28, GHC 6.5 (OpenBSD i386 )
20:24:33 <lambdabot> darcs get http://www.cse.unsw.edu.au/~dons/lambdabot
20:24:53 <haskey> now can somebody explain me why a language like haskell is not the most used in the world? from what I've seen it's awesome
20:25:25 <dons> i know. we ask ourselves this everyday
20:25:31 <lispy> haskey: not many people know it and it's not exactly tried and true compared to some other languages
20:25:41 <lispy> but it's certainly nice
20:25:58 * lispy goes back to his fortran90
20:26:01 <lispy> ;)
20:26:04 <dons> yikes!
20:26:09 <haskey> I've used Ruby and many other for ages
20:26:27 <haskey> and they are nice (Ruby, Python, etc)
20:26:31 <lispy> how/when did you start learning haskell
20:26:40 <DukeDave> I've been going for 6 months on and off now - it's only the once a week epiphanies that keep me going :)
20:27:23 <haskey> lispy: I wanted to do some math programs for fun. Ruby dies on factorial(800) 'stack too deep'
20:27:23 <LordBrain> i agree its awesome
20:27:32 <lispy> > ((: []) =<<) "yes, i agree!"
20:27:32 <lambdabot>  "yes, i agree!"
20:27:45 <haskey> also Ruby it's 50/100 times slower then Haskell in general
20:27:51 <dons> haskey: hehe. ruby's not one of the highest performing languages around
20:27:52 <lispy> > ((: "a little surprise.") =<<) "Oh, look! "
20:27:53 <lambdabot>  "Oa little surprise.ha little surprise.,a little surprise. a little surprise...
20:28:37 <haskey> so I was looking for a mathematical prone language, but general enough to use it for everything. Also a fast one. And I needed a language close to Lisp (functional)
20:28:46 <LordBrain> i went to a Books-a-Million store here, and they didnt even have one book on haskell... not even in their computers to put on order
20:28:51 <haskey> I heard about Haskell since 2002 but I never took the time to study it
20:29:11 <haskey> well, now I'm starting to study it (using the YAHT)
20:29:25 <dons> haskey: i think for function + fast + general + math, haskell's just about the only choice
20:29:27 <LordBrain> the only source for books is the university library
20:29:49 <dons> LordBrain: we have several books online for free, did you check haskell.org?
20:29:59 <LordBrain> well and online thats true
20:30:12 <haskey> dons: yep. I still use Ruby but it pisses me off the poor implementation and the community attitude: we don't care and if you need speed integrate C
20:30:16 <lispy> dons: yeah i wish maple was half as pleasant as haskell (or that haskell had the libraries that maple has)
20:30:21 <LordBrain> i think the market is ripe tho
20:30:27 <haskey> dons: if I wanted to use C I would write anything in C
20:30:39 <dons> :)
20:31:17 <LordBrain> i'm not sure haskell would be suitable for something very low level like a kernel
20:31:20 <lispy> well, integrating C is sometimes suggested here too
20:31:32 <dons> LordBrain: though there's at least 3 kernels written in haskell now
20:31:32 <haskey> lispy: yes that's right
20:31:45 <haskey> lispy: but not to calculate the factorial of 2000.
20:31:52 <lispy> LordBrain: http://www.cse.ogi.edu/~hallgren/House/
20:31:53 <lambdabot> Title: House
20:32:13 <LordBrain> interesting dons, thats good... somebody has to break these barriers
20:32:14 <haskey> guys I'm falling in love with lamdbabot :-D
20:32:26 <lispy> haskey: yeah, usually C is just used to interface with an api or provide some low level IO
20:32:46 <lambdabot> haskey, i'm falling in love with you too ;)
20:32:55 <haskey> lol
20:33:21 <lispy> haskey: do you like opengl?
20:33:53 <haskey> lispy: yes if I need to do some graphical rendering I use opengl
20:34:11 <lispy> haskey: i started to convert the nehe tutorials to haskell: http://projects.codersbase.com/repos/nehe-tuts/
20:34:12 <lambdabot> Title: Index of /repos/nehe-tuts
20:34:22 <lispy> maybe you'll find it interesting...
20:34:31 <dibblego> is Haskell used on many commercial projects?
20:34:45 <haskey> lispy: I'll look into it, thanks
20:34:48 <haskey> dibblego: a few
20:34:58 <dons> there's a few. check haskell.org's front page. for a history of haskell, including commerical use.
20:35:02 <lispy> dibblego: i've started using it at work
20:35:04 <dibblego> righto thanks
20:35:05 <haskey> dibblego: Linspire/Freespire for exemple
20:35:14 <dons> typically in high-assurance stuff that must have no bugs. though its more and more used for just anything
20:35:34 <dons> and lots of university projects use it
20:35:37 <lispy> and galois uses haskell exclusively iirc
20:36:38 <lispy> oh and if you want to help in the haskell community, get darcs
20:36:58 <lispy> most haskell projects are converting to use it instead of svn or cvs
20:37:03 <dibblego> why?
20:37:14 <lispy> i'd answer but i'm completely biased :)
20:37:20 <dibblego> I'm still interested :)
20:37:26 <lispy> i'll just say that, darcs is way better
20:37:28 <dons> its just a simpler, cleaner system. its written in haskell
20:37:31 <lispy> let me get you VCS comparison link
20:37:39 <dons> so we all send patches amongst each other via darcs
20:37:45 <dons> ?version
20:37:45 <lambdabot> lambdabot 4p28, GHC 6.5 (OpenBSD i386 )
20:37:45 <lambdabot> darcs get http://www.cse.unsw.edu.au/~dons/lambdabot
20:37:47 <dibblego> I use Subversion quite a lot, and I've heard this and that about darcs
20:37:48 <dons> for example ^^
20:37:48 <LordBrain> i dont quite understand why opengl is so popular.. it's not supported on most of the systems i've used
20:37:59 <LordBrain> they're running debian...
20:38:10 <dons> its good having a standard rcs for the whole community
20:38:18 <dons> no interoperability issues. we just darcs it all
20:38:21 <LordBrain> it's like i need special proprietary drivers and libraries
20:39:56 <lispy> dibblego: this is probably a good start: https://www2.ft888.net/dm/uggc/orggre-fpz.oreyvbf.qr/pbzcnevfba/comparison.html
20:40:02 <dibblego> ta
20:40:50 <lispy> LordBrain: at least it's not directx
20:40:59 <LordBrain> well thats true..
20:41:06 <dibblego> what does Linspire have to do with Haskell?
20:41:07 <SamB_XP> hmm, the camera work in this anime is very jerky
20:41:30 <jcreigh> SamB_XP: "camera"?
20:41:47 <dons> dibblego: the system tools are all written in haskell
20:41:58 <LordBrain> linspire hires haskell programmers... uses it as the main language of their development department or something
20:42:36 <SamB_XP> jcreigh: well, it looked like nothing so much as if someone was recording it with a camcorder, it was so jerky. but actually that was just in a short part of it...
20:42:55 <SamB_XP> I think it is a joke...
20:44:27 <lispy> interesting, not everyone things decentralized version control is a good: http://blog.ianbicking.org/distributed-vs-centralized-scm.html
20:44:28 <lambdabot> Title: Distributed vs. Centralized Version Control
20:44:59 <haskey> Linspire is actually very smart in using Haskell. For two reasons: 1) Haskell hackers are no vb wanna be programmer. They are usually competent even if they are just learning it. In fact you come to Haskell usaully after experience with other good languages. 2) With haskell, for what I've seen you can write code that's is pretty much bug free. Like a mathematical proof for a non-complex problem. But i'm a novice, so
20:45:01 <dons> its easy to use darcs as a centralized system though
20:45:06 <SamB_XP> it depends on the nature of the program and its development model
20:45:47 <dons> that's quite insightful haskey, many would agree
20:46:23 <lispy> dons: re: darcs, i think the author of that article disagree
20:46:47 <dibblego> dons, when you say "system tools", you mean tools of its Linux distribution?
20:46:52 <haskey> what do you think about haskell video lessons from Dr. Otto in a german university? they are free online
20:47:01 <lispy> one of his points is that you can let your patches hang out on your hard drive because the vcs will let you check them in there
20:47:38 <lispy> haskey: i watched part of one, it seemed pretty good.  But my connection was slow and i ran out of disk space (the files are huge)
20:48:01 <SamB_XP> hmm...
20:48:18 <SamB_XP> 2. Making work available and locatable by other developers.
20:48:28 <haskey> ok I'll go watch them then, and I'll let you know what I think :)
20:48:52 <dons> dibblego: from what I'm aware of, things like its packaging tools, its /etc-munging tools and so on are written in haskell
20:49:23 <lispy> and before haskell they used ocaml apparently
20:49:36 <dibblego> suppose I am approached by a client to write a web application - could I choose Haskell and be reasonably successful?
20:49:59 <lispy> there are libraries for web apps that are immature but usable
20:50:01 <SamB_XP> lispy: why would you leave your patches on your drive when it is easy to send them to the maintainer?
20:50:02 <dibblego> I am tired of using all these pure functional languages just for fun
20:50:17 <dons> many here use them for paid work.
20:50:19 <lispy> SamB_XP: apparently because you can
20:50:20 <dons> i do.
20:50:25 <SamB_XP> lispy: thats stupid
20:50:30 <dibblego> more so, i am tired of using broken languages for "not fun" i.e. work
20:50:36 <SamB_XP> because if you don't send it, you get conflicts!
20:50:38 <SamB_XP> duh!
20:50:41 <dibblego> dons, what sort of work exactly?
20:51:01 <dons> *cough* research into functional programming languages...
20:51:09 <dons> actually , not just that.
20:51:14 <dibblego> aah research - that's always been an option
20:51:29 <dons> chemistry problems. and other kinds of research. like writing mp3 players
20:51:49 <dibblego> so I think I'm stuck with broken languages for the time being
20:51:55 <dons> how so?
20:52:01 <dons> just use haskell for your next problem
20:52:31 <dibblego> will I be able to deliver on a schedule?
20:52:41 <SamB_XP> depends
20:52:51 <SamB_XP> don't fight laziness, because it will fight you back
20:52:54 <dons> probably earlier, since you're missing bugs. unless you're learning the language at the same time.
20:52:57 <dibblego> assume I know all there is to know about Haskell (which is far from true)
20:53:13 <dons> oh, then yes, you should be a magnitude more productive. there's some papers on this
20:53:26 <dibblego> SamB_XP, I'm not fighting laziness, which I think is my weak point, otherwise, I'd just use those crap languages
20:53:29 <dons> the us. military did a big study on productivity in haskell, ada and a bunch of things
20:53:33 <dons> and haskell came out as the most productivty
20:53:46 <SamB_XP> dibblego: not that kind of laziness!@
20:53:51 <dibblego> dons, I assume there was a cost though in the initial investment of time to learn
20:54:03 <SamB_XP> I mean, don't try to strongarm your Haskell code into strictness
20:54:25 <SamB_XP> don't try to strongarm Haskell code period...
20:54:31 <dons> if you're interested, play around until you're comfortable, then try it out for real.
20:54:39 <dibblego> righto cheers
20:54:52 <SamB_XP> yeah, you could, um, fix @karma
20:54:54 <SamB_XP> so that
20:54:59 <SamB_XP> @karma samb
20:54:59 <lambdabot> samb has a karma of 0
20:55:02 <SamB_XP> was the same as
20:55:06 <dibblego> you mean fix the bot?
20:55:06 <SamB_XP> @karma SamB
20:55:06 <lambdabot> SamB has a karma of 9
20:55:32 <dons> the galois guys have a nice story about how they kept finishing jobs way ahead of schedule, so much so that clients had to say "slow down", we haven't finished even deploying the last code you sent us
20:55:50 <dibblego> dons, web applications written in Haskell?
20:55:56 <SamB_XP> thats a relatively simple problem that doesn't require you to know too much Haskell to come up with a solution ;-)
20:56:04 <dons> galois? no. that was language translators, I think
20:56:23 <edwardk> heh
20:56:45 <dibblego> clients want web applications
20:56:51 <dibblego> sad but true
20:56:56 <dons> we need a slogan, "Lift is short, Use Haskell"
20:57:02 <dons> grr.
20:57:06 <SamB_XP> hmm?
20:57:12 <SamB_XP> what has Lift to do with it?
20:57:12 <dons> Life is short. Use Haskell
20:57:19 <lispy> hasakell on win32 could be better.  For example, if you want to interface with COM or .NET it maybe easier to embed a python interpreter in your haskell app :)
20:57:26 <SamB_XP> Lifting is nice and all, but...
20:57:31 <dons> heh
20:57:33 <Revision17> the lambda logo needs to has more sex appeal
20:57:38 <SamB_XP> but... but...
20:57:45 <Revision17> ;)
20:57:52 <SamB_XP> well, I guess I could relax the rules about embedding Python just this once...
20:58:02 <SamB_XP> I mean its even more painful to embed Haskell, so...
20:58:08 <monochrom> "People are lazy. Use Haskell."
20:58:55 <dons> something about life being too short to chase down runtime errors, get yourself a static type system
20:59:48 <SamB_XP> I had to trace down an error in ZSNES -- it turned out to be an improperly initialized global variable...
20:59:54 <monochrom> "Life is short. Type statically."
21:00:02 <lispy> SamB_XP: those are painful to find
21:00:14 <Revision17> "Haskell.  Purely functional for your unit testing pleasure."
21:00:19 <SamB_XP> well in this case it was obvious which variable it was
21:00:21 <jcreigh> dons: Don't forget that some people use lanaguges with manual memory management. *shudder*
21:00:23 <jgrimes> dibblego, for web applications look at Hope and WASH
21:00:41 <dons> well, it's their time they're wasting, right?
21:00:43 <dibblego> I am looking at HAppS at the moment
21:00:45 <SamB_XP> but I was not smart enough to check what I initialized it to in the definition ;-)
21:01:42 <lispy> would you guys consider java to be a type safe language?
21:02:15 <dons> well, i've seen a lot of java type system extensions of the years
21:02:24 <dons> so they're in the community of static typers
21:02:37 <dibblego> what kind of Java type system extensions?
21:02:50 <dons> research papers. lots of wacky things
21:03:01 <monochrom> Sometimes it's safe.
21:03:10 <lispy> dons: i want to say "No" because of how many times i've had unexpected nulls survive/proggate through my programs
21:03:37 <dons> yeah, too many runtime errors, eh? see you're missing other things like structural pattern matching
21:03:39 <dibblego> yes null is the dynamically typed placeholder that is assignable to any reference type
21:03:42 <dons> that remove more bugs as well.
21:04:02 <SamB_XP> > undefined
21:04:03 <lambdabot>  Add a type signature
21:04:03 <dibblego> the best way to solve that is to fail immediately upon encountering "null", but it's partially optimal
21:04:06 <SamB_XP> > undefined :: ()
21:04:07 <lambdabot>  Undefined
21:06:50 <lispy> pattern matching is nice
21:07:01 <lispy> but in an OO language it might be a night mare
21:07:34 <Pegazus> why's that?
21:07:47 <lispy> classes tuck away so much state
21:07:51 <dons> its nice, since you can do structural induction to develop a function, and the compiler is able to check for missing branches
21:07:51 <dibblego> I believe that OO is intrinsically defective and digresses from a formal definition of "software"
21:08:02 <dons> yeah, it makes more sense in a pure language
21:08:17 <Cale> Well, it's generally impossible there. The whole point of OO is to abstract your data representation, and pattern matching is deconstruction of data representations.
21:08:22 <Pegazus> <dibblego> do you know OO well so to make such a statement?
21:08:24 <dons> ?remember dibblego I believe that OO is intrinsically defective and digresses from a formal definition of "software"
21:08:24 <lambdabot> Done.
21:08:44 <SamB_XP> @quote
21:08:44 <lambdabot> samc says: monads are hard, let's go shopping
21:08:47 <SamB_XP> @quote
21:08:47 <lambdabot> Alanna says: Saying that Java is nice because it works on all OS's is like saying that anal sex is nice because it works on all genders.
21:08:50 <dibblego> Pegazus, sure, I have been documenting this belief for years in an attempt to prove me wrong
21:08:55 <Pegazus> dons: smart compilers can check missing branches without structural induction too
21:09:05 * lispy <3 Alanna
21:09:06 <SamB_XP> except that anal sex *does* work on all genders...
21:09:09 <SamB_XP> @quote
21:09:09 <lambdabot> samc says: monads are hard, let's go shopping
21:09:11 <SamB_XP> @quote
21:09:11 <dibblego> *in an attempt to attract criticism to prove me wrong
21:09:11 <lambdabot> <basti_> says: Snow doeth lay upon the lands. Even with cunning newtype; deriving the newtype is recursive. Great leaders brings less pain.
21:09:24 <Pegazus> dibblego: what do you think OO is about?
21:09:26 <SamB_XP> @quote
21:09:26 <lambdabot> xerox says: you know, befunge is probably the only language I've seen where you can run code pasted from IRC with the <nick> tags still in place ;-)
21:09:30 <dons> you don't see much formal reasoning about java or any imperative/oo lang. it's just too hard. and bugs result
21:09:42 <SamB_XP> @quote
21:09:43 <lambdabot> tennin says: [very #haskell] anyone know of any good books/papers on the application of category theory to databases?
21:09:50 <SamB_XP> @quote
21:09:51 <lambdabot> kolmodin says: I would rather lose my left arm than write it in Java
21:09:52 <dibblego> Pegazus, that is a key question, for which there is not a good answer
21:10:13 <Pegazus> as far as i know, OO is most of all a design issue, not an implementing one...
21:10:18 <dons> wow, we have a lot of anti-java sentiment :}
21:10:25 <dibblego> dons, I believe that you don't see formal reasoning, because it would violate the agenda of the person providing the reasoning
21:10:30 <Pegazus> on how to distribute responsabilities and behaviors and how to modularize your code...
21:10:40 <dibblego> dons, I used to work on the IBM Java implementation for many years
21:10:40 <dons> do you think #java has many anti-haskell quotes? ;)
21:10:41 <SamB_XP> @quote
21:10:41 <lambdabot> augustss says: hbc still has some unique features, like views.  that i've never used..
21:10:52 <SamB_XP> @quote
21:10:53 <lambdabot> Philippa says: hey, if the guy wants a monadectomy that's his choice
21:10:54 <dibblego> ##java is full of dim-wits unfortunately
21:11:33 <dibblego> Pegazus, that's what the glossy brochure says - nothing more
21:11:55 <SamB_XP> @quote
21:11:55 <lambdabot> wilx says: I mean, besides the murders, it all looks so nice.
21:12:05 <lispy> @quote
21:12:05 <lambdabot> kzm says: My program contains a bug.  How ungrateful, after all I've done for it.
21:12:06 <Pegazus> the idea of OO is try to model real world the best possible (that means try to achive the model that best reflects real world).
21:12:08 * SamB_XP wonders what that was about
21:12:14 <SamB_XP> the thin about the murders
21:12:15 <Pegazus> focusing on whose responsability is doing each thing...
21:12:25 <dons> joke about posting to the wrong channel
21:12:36 <lispy> @quote
21:12:37 <lambdabot> sethk says: it's certainly true that you can clobber the stack in C without even getting out of bed in the morning
21:12:41 <SamB_XP> Pegazus: in the real world, the fridge does not take responsibility for writing things on the grocery list ;-)
21:12:50 <Pegazus> that way, you can then change any "encapsulated" object, without affecting the rest of the system...
21:12:51 <dibblego> Pegazus, under that definition, the only benefit is to provide a higher-order communication mechanism, but unfortunately you must sacrifice the notion of "software" inversely proportional to that higher-order
21:13:00 <Pegazus> <SamB_XP> Pegazus: in the real world, the fridge does not take responsibility for writing things on the grocery list ;-) --> that's what about
21:13:09 <Pegazus> in a well designed OO system, a friged wouldn't do that...
21:13:20 <dibblego> well designed and OO are oxymoronic
21:13:22 <SamB_XP> the grocery list doesn't, either!
21:13:22 <Pegazus> there are objects who just have "data"
21:13:36 <Pegazus> and "object who can think, and make actions and decisions with that data"
21:13:39 <glguy> friged?
21:13:41 <SamB_XP> nor does the marker!
21:13:53 <Pegazus> if you make a fridge think,y ou are probably not modelling your reallity quite well...
21:13:58 <dibblego> I have been having this argument with my colleagues for years - I recently changed jobs such that I was working wiht intelligent people, and now they can see why OO is utterly flawed :)
21:14:04 <SamB_XP> it is the person who must write on the grocery list with the marker!
21:14:10 <dibblego> IBM does not have intelligent people unfortunately :)
21:14:31 <SamB_XP> really? maybe it just has deluded intelligent people
21:14:39 <SamB_XP> or maybe they were in another division
21:14:39 <Pegazus> OO is really bad used...
21:14:40 <dibblego> SamB_XP, yes, that may be more accurate
21:14:47 <Pegazus> but that's not OO fault
21:15:01 <Pegazus> the fact that most ppl in the world doesn't know how to do things properly...
21:15:04 <dibblego> I don't think I'll have the arguments that I spent hours on, in an IRC channel
21:15:07 <Pegazus> doesn't mean the things they do are a shit...
21:15:12 <SamB_XP> well....
21:15:19 <lispy> OO can give you nice collection classes and gui libraries, what else does it do nicely?
21:15:20 <SamB_XP> maybe it means OO isn't actually very intuitive?
21:15:22 <dibblego> Pegazus, provide for me a "well designed" OO system and I will show you how incredibly flawed it is
21:15:26 <LordBrain> hmmm maybe designed and java are oxymoronic.. :P but i wouldnt go so far to say that about absolutely all oo
21:15:32 <glguy> What brought up debating whether or not OO design is good or not?
21:15:49 <lispy> i asked about Java
21:15:50 <dibblego> lispy, hence, higher-order communication - we can talk about the This or the That, without enumerating its functions (yes, OO has functions)
21:15:53 <lispy> it snow balled from there
21:16:05 <Pegazus> <dibblego> Pegazus, provide for me a "well designed" OO --> by the time beeing, i don't know one :)
21:16:22 <dibblego> Pegazus, I postulate that no such thing can exist, they are orthogonal requirements
21:16:32 <Pegazus> i postulate that it can exist
21:16:42 <dibblego> as such, I ask for proof
21:16:51 <dibblego> I promise downfall
21:16:54 <ozone> Cocoa?  (Objective-C)
21:16:58 <dibblego> of course, I have been wrong in the past
21:17:04 <dibblego> 1987 to be exact :)
21:17:13 <SamB_XP> if it merely can exist, I think that is pretty evidence that OO is damned hard!
21:17:16 <glguy> dibblego: Have you used ADO.NET?
21:17:16 <lispy> ah, good year for mistakes
21:17:22 <dibblego> glguy, unfortunately, yes
21:17:28 <Pegazus> if you want answer to this questions
21:17:37 <Pegazus> i can tell you where there is ppl who knows much more than i about it
21:17:38 <LordBrain> a lot of oo overused inheritance without thought to the sorts of flexibility required
21:17:41 <Pegazus> and you can ask them :)
21:17:43 <glguy> dibblego: what is a more ideal, non-OO solution that you have seen
21:17:51 <Pegazus> a lot of oo overused inheritance  --> a lof of users made that...
21:17:57 <LordBrain> lof?
21:17:58 <Pegazus> OO doesn't need inheritance
21:18:06 <Pegazus> inheritance is often used for code rehuse
21:18:08 <dibblego> LordBrain, inheritance does not acknowledge the notion of time/computation progression, the proof for this is self-evident (except for the glossy brochure nonsense)
21:18:11 <Pegazus> and that's not the purpose OO gives it...
21:18:12 <LordBrain> well yeah users write programs...
21:18:16 <LordBrain> you know what i meant
21:18:19 <dibblego> inheritance is used to prevent code reuse
21:18:24 <Pegazus> inheritance is only "well" used to provide runtime polymorphism...
21:18:31 <dibblego> it is well used in a black hole
21:18:38 <dibblego> where computational progression ceases to exist
21:18:41 <Pegazus> if you want to rehuse code, you should use other things
21:18:49 <dibblego> such as non-OO languages :)
21:19:25 <lispy> haskell's polymorphism promotes reuse
21:19:27 <lispy> @type map
21:19:28 <lambdabot> forall b a. (a -> b) -> [a] -> [b]
21:19:32 <lispy> for instance...
21:19:34 <SamB_XP> C++ seems to be okay if you don't use too much inheritance
21:19:34 <Pegazus> so?
21:19:51 <LordBrain> you have to have a brain to design
21:19:52 <Pegazus> <SamB_XP> C++ seems to be okay if you don't use too much inheritance --> C++ is the greatest thing ever if you know how to use it properly
21:19:58 <Pegazus> sadly most ppl doesn't...
21:20:05 <SamB_XP> but I'm not convinced it is actually OO
21:20:12 <SamB_XP> if used properly
21:20:16 <lispy> and that's not a logical conclusion...
21:20:16 <sieni> Pegazus: like built-in closures and all that?
21:20:27 <Pegazus> no idea what closures are...
21:20:48 <Pegazus> anyway...
21:20:51 <sieni> Pegazus: lambda and all that
21:20:52 <LordBrain> hmmm.. haskell is the greatest thing ever...
21:20:55 <lispy> you can think of it as a way of preserving the lexical scope
21:20:57 <Pegazus> a language has nothing to do with OO
21:21:02 <Pegazus> a language might provide facilities to do OO
21:21:08 <Pegazus> but if you don't know what you are doing
21:21:10 <LordBrain> hehehe
21:21:12 <lispy> OOP vs. OOD?
21:21:13 <Pegazus> you'll probably end doing shit...
21:21:26 <Pegazus> OO i told you, is more a design issue...
21:21:27 <Pseudonym> By the same agument, a language can
21:21:31 <Pseudonym> 't be "functional"
21:21:32 <Pegazus> you can do OO in C, or in ASM if you want...
21:21:34 <LordBrain> yeah
21:21:36 <dibblego> Pegazus, please, provide for me an OO system that you would consider not broken, I will enumerate each of its flaws - hopefully you might reconsider your position
21:21:48 <Pseudonym> Some languages support OO as their primary, all-pervading organisation mechanism.
21:21:50 <Pegazus> i'm not an expert on OO dibblego
21:21:53 <Pseudonym> We call these languages "OO".
21:21:55 <Pegazus> i just know a little about it...
21:21:58 <lispy> dibblego: unix is a good OO design, IMHO
21:22:08 <Pseudonym> Unix is NOT a good OO design.
21:22:09 <Pegazus> mmm
21:22:15 <Pegazus> unix has some kind of OO design
21:22:18 <dibblego> there is a good article on demonstrating that OO is just a euphemism on top of functions
21:22:23 <Pegazus> you can use it as an example
21:22:30 <Pegazus> (probably not too good) but well...
21:22:37 <monochrom> I don't think dibblego is asking for an OO system authored by Pegazus personally.
21:22:48 <lispy> what is bad about the OO desgin of unix?
21:23:02 <Pegazus> you can see Unix pipes system as something a little OO
21:23:07 <Pegazus> the idea is that you have little programs
21:23:14 <Pseudonym> Compare the standard Unix synchronisation mechanisms: select/poll, pthreads, SysV IPC, signals...
21:23:16 <LordBrain> i've seen several things.. tho i havent digested them.. which illustrate coexistence of oo and the functional paradigm
21:23:16 <Pegazus> that alone doesn't make lot's of usefull things
21:23:28 <Pegazus> but when you connect them all togheter in a proper way, you can make some interesting things..
21:23:37 <Pegazus> each one carries just a little part of the work, he knows how to do properly
21:23:37 <Pseudonym> There's no concept of "interface" between them all that's in any way coherent.
21:23:43 <Pegazus> the other doesn't know how each one does what it does...
21:23:51 <SamB_XP> Pegazus: why do I keep thinking "Monads"?
21:23:56 <Pegazus> <LordBrain> i've seen several things.. tho i havent digested them.. which illustrate coexistence of oo and the functional paradigm-- > OO is a design issue
21:24:02 <Pegazus> functional is more an implementation thing
21:24:06 <SamB_XP> or "Arrows"?
21:24:06 <LordBrain> good point
21:24:08 <Pegazus> they has nothing to do from my point of view
21:24:12 <lispy> Pseudonym: i'm thinking more basic, like files are a good concept for which we have many 'types' of files
21:24:28 <Pseudonym> Oh, ioctl(), good point.
21:24:39 <Pseudonym> Now there's a non-OO interface if there ever was one. :-)
21:24:59 <Pseudonym> Yes, we have "types" of files.
21:25:23 <Pseudonym> But there's no concept of "interface" that's actually worth using.
21:25:30 <LordBrain> well.. i brought it up, because i've seen it somewhat taken for granted many times that you cant do oo in a purely functional langauge..
21:25:32 <Pseudonym> The Hurd is a better example of OO.
21:25:34 <lispy> read/write? cat?
21:25:38 <Pegazus> i don't get what you are trying to say Pseudonym
21:25:47 <Pegazus> LordBrain: you can
21:25:51 <LordBrain> yes
21:25:52 <Pegazus> oo is a design thing
21:25:56 <monochrom> When unix pipelining is brought up, I think pointfree functional composition.  http://www.vex.net/~trebla/weblog/pointfree.html
21:25:57 <lispy> scala is both functional and OO
21:25:58 <lambdabot> Title: The Point of Pointfree
21:26:05 <Pegazus> a language can give you features to easy your implementation of it
21:26:06 <LordBrain> um... i know that
21:26:11 <Pegazus> but it's most of all a design thing
21:26:17 <Pegazus> on wich object has each responsability
21:26:25 <lispy> monochrom: yeah, and w4sh drives that pointhome
21:27:02 <Pseudonym> Pegazus, I think you might be confusing two things here.
21:27:03 <monochrom> And of course, yay for arrows!
21:27:13 <Pegazus> what things Pseudonym?
21:27:15 <skew> so, about that Haskell - Setup.lhs for haskelldb from darcs doesn't seem to compile DBDirect
21:27:15 <edwardk> is there a version of !! that returns a Maybe type?
21:27:16 <Pseudonym> One of the benefits of OO is, no doubt, that it came with an analysis and design methodology.
21:27:35 <Pseudonym> But OOAD and OOP, while tightly coupled, are different.
21:27:44 <Pegazus> no idea what OOAD is
21:27:44 <Pseudonym> Unix is definitely NOT designed using OOAD.
21:27:46 <lispy> skew: error?
21:27:52 <Pseudonym> Object oriented analysis/design.
21:27:57 <Pegazus> i was just giving a simple, bad example with uniex
21:28:00 <skew> no error, just doesn't end up compiling that
21:28:11 <Pegazus> i don't know what you mean by Object oriented analysis/design.
21:28:13 <lispy> skew: what does it compile?
21:28:23 <palomer> shizzle.
21:28:35 <lispy> skew: i built haskelldb pretty recently but i don't think i had any problems after upgrading to a recent cabal
21:28:48 <lispy> @palomer
21:28:48 <lambdabot> Scalliwags!
21:28:51 <Pseudonym> For the record, here's Alan Kay's definition of OOP:
21:28:53 <Pseudonym> OOP to me means only messaging, local retention and protection and
21:28:54 <monochrom> edwardk: I can't recall one.
21:28:54 <Pseudonym> hiding of state-process, and extreme late-binding of all things.
21:28:55 <lispy> indeed, scalliwags!
21:28:58 <lispy> @state
21:28:58 <lambdabot> I think vim is good for the rubbish bin
21:29:11 <Pseudonym> I suppose in that sense, Unix is OOP.
21:29:13 <Pegazus> that's Alan Kay's definition, not mine
21:29:27 <Pseudonym> He coined the term.
21:29:28 <lispy> yeah, why would we listen to alan Kay for a definiton of OO...
21:29:30 <Pegazus> the example of unix was just an example..
21:29:31 <LordBrain> ack.. dont take my vim
21:29:42 <Pegazus> i told you it wasn't really good
21:29:44 <glguy> lol @ lambdabot trying to start flame wars over it's holiness, ViM
21:30:02 <palomer> palomer says: OOP is Ostensibly Obtuse Penguins
21:30:03 <lispy> @vixen do you use yi?
21:30:04 <lambdabot> yes i do
21:30:11 <Pseudonym> One of the key things he noted, though, was that each object could have different algebras, and the algebras form families.
21:30:17 <LordBrain> oh that reminds me i downloaded yi
21:30:22 <LordBrain> but i never compiled it
21:30:25 <Pseudonym> OO programming languages call these "interfaces", usually.
21:30:33 <Pseudonym> That's what Unix sorely lacks.
21:30:40 <Pegazus> ?
21:30:46 <SamB_XP> oooh, yeah!
21:30:54 <palomer> unix sorely lacks office 2006
21:30:59 <SamB_XP> a good SCSI interface would be good
21:31:06 <SamB_XP> palomer: surely not
21:31:08 * lispy hits palomer with a large trout
21:31:11 <SamB_XP> for it is not a sore lack
21:31:11 <glguy> I don't think any operating system supports "office 2006"
21:31:12 <LordBrain> hmmm office 2006 doesnt run under wine?
21:31:18 <SamB_XP> it is a happy lack!
21:31:20 <Pseudonym> A standard event delivery model would be nice.
21:31:31 <SamB_XP> we don't want MS's crapy Office sweets!
21:31:42 <Pseudonym> As I said previously: select/poll, pthreads, SysV IPC, signals...
21:32:05 <LordBrain> i used to use ms office all the time.. then i migrated to linux.. and its like.. i hardly see the point of an office suite now at all... strange how that happens.
21:32:20 <palomer> you're telling yourself a LIE
21:32:31 <LordBrain> hmm
21:32:36 <lispy> LordBrain: i still see the usefulness of a spreadsheet
21:32:43 <Adamant> @quote
21:32:43 <lambdabot> kzm says: My program contains a bug.  How ungrateful, after all I've done for it.
21:32:46 <LordBrain> i guess
21:32:48 <LordBrain> but i hardly use it
21:33:02 <lispy> spreadsheets are like a functional language which is good at certain tasks
21:33:08 <LordBrain> of course there are plenty of office suites available...
21:33:10 <SamB_XP> the only thing we could possibly miss is excel!
21:33:29 <lispy> SamB_XP: latex isn't the best for presentations
21:33:36 <SamB_XP> and I was going to say that before I saw that lispy had mentioned it
21:33:39 <lispy> what if you want sound and animations?
21:33:47 <glguy> then you should be shot
21:33:49 <SamB_XP> er, sound and animations?
21:33:56 <monochrom> I use Open Office Calc to do my tax.
21:33:58 <lispy> it *is* a presentation
21:34:00 <glguy> nothing is more annoying than dancing powerpoint presentations
21:34:04 <LordBrain> hmmm i dont use latex much either... i ended up handcoding my resume in xml...
21:34:05 <lispy> heaven forbid you use a chalk board
21:34:08 <SamB_XP> you are crazy if you think I can do that without annoying the crap out of the viewers
21:34:19 <SamB_XP> well, maybe some nice PDF transitions are okay...
21:34:27 <SamB_XP> (PDF has transitions right?)
21:34:35 <lispy> acrobat has transitions
21:34:46 <lispy> but id ont' think thet pdf file stores any transation information
21:35:18 <monochrom> If I find sound and animation appropriate for a presentation, my own body can do them real-time.
21:35:27 <SamB_XP> I'm pretty sure I saw something about that in the presentation package I used the one time I made a presentation in LaTeX
21:35:42 <SamB_XP> hehe
21:35:52 <SamB_XP> anyway, who needs transitions?
21:36:19 <glguy> the same people that need animated gif email links on their geocities homepage, I'm afraid ;)
21:36:35 * lispy gets offended ;)
21:36:49 <LordBrain> what do we mean transitions?
21:36:50 <SamB_XP> well, I mean, its no big deal if I don't have time to learn how to do them, right?
21:37:00 <LordBrain> is that like when a catepillar becomes a butterfly?
21:37:01 <SamB_XP> LordBrain: between pages of a presentation
21:37:18 <monochrom> Why oh why do you *need* transitions?
21:38:26 <LordBrain> hmm maybe spreadsheet cells should all be embeddable objects
21:38:45 <monochrom> please don't bring up "objects" again :)
21:38:49 <LordBrain> and instead of spreadsheets we'd all be working in some more general document
21:38:57 <LordBrain> oh ok
21:38:59 <LordBrain> hehehe
21:39:09 <LordBrain> anyway i need to be off to sleep
21:39:12 <monochrom> Can we subclass the cells too?  XD
21:39:30 <SamB_XP> no, but you can implement the Cell typeclass all you want ;-)
21:40:01 <monochrom> And instead of spreadsheets we'd all be working on some OOA OOD.
21:40:03 <palomer> @2palomer
21:40:03 <lambdabot> Blargh!
21:40:11 <palomer> @state
21:40:11 <lambdabot> I think vim is good for the rubbish bin
21:40:14 <palomer> @state
21:40:14 <lambdabot> I think vim is good for the rubbish bin
21:40:23 <LordBrain> blasphemy
21:40:24 <palomer> ok, what's @state ?
21:40:27 <glguy> @slap lambdabot
21:40:27 * lambdabot smacks lambdabot about with a large trout
21:40:32 <palomer> @state
21:40:32 <lambdabot> I think vim is good for the rubbish bin
21:40:46 <monochrom> Looks like that's the definition of @state. :)
21:40:48 <Adamant> @dance
21:40:48 <lambdabot> "dice" (line 1, column 1):
21:40:48 <lambdabot> unexpected end of input
21:40:48 <lambdabot> expecting digit
21:40:53 <monochrom> "extensional definition" :)
21:40:54 <palomer> it seems state has only one use: to say the only thing that's absolutely true
21:40:56 <lispy> @state Nothing
21:40:56 <lambdabot> Nothing
21:41:07 <Adamant> @state "hello"
21:41:07 <lambdabot> "hello"
21:41:17 <palomer> @state @state
21:41:17 <lambdabot>  @state
21:41:20 <lispy> @. vixen . state palomer
21:41:20 <lambdabot> yeah, why not?
21:41:21 <lispy> @state
21:41:21 <lambdabot> As someone who's studied GADTs, I've never found a use for them.
21:41:24 <LordBrain> not to say it... to /state/ it
21:41:29 <SamB_XP> @help state
21:41:30 <lambdabot> state [expr]. Get or set a state variable.
21:41:33 <palomer> @state
21:41:34 <lambdabot> As someone who's studied GADTs, I've never found a use for them.
21:41:40 <palomer> it seems @state == @palomer
21:41:40 <Adamant> @state "DCC JUUUUUSTKIDDING, folks"
21:41:41 <lambdabot> "DCC JUUUUUSTKIDDING, folks"
21:41:47 <palomer> @palomer "hello"
21:41:47 <lambdabot> woof
21:41:51 <SamB_XP> @id
21:41:54 <palomer> @palomer "hello"
21:41:54 <lambdabot> I think you're all nuts
21:41:55 <nealar> @palomer
21:41:56 <lambdabot> Pfft
21:41:57 <monochrom> It seems @state has state!
21:42:03 <SamB_XP> @state
21:42:03 <lambdabot> "DCC JUUUUUSTKIDDING, folks"
21:42:07 <Adamant> @Adamant
21:42:07 <lambdabot> Unknown command, try @list
21:42:08 <SamB_XP> @state
21:42:08 <lambdabot> "DCC JUUUUUSTKIDDING, folks"
21:42:20 <SamB_XP> @state aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaahhhhhhhhhhhhhhh!
21:42:20 <lambdabot> aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaahhhhhhhhhhhhhhh!
21:42:27 <monochrom> Haha, @state states what's in its state!
21:42:28 <LordBrain> does yi support vims script langauge?
21:42:30 <SamB_XP> @id
21:42:36 <SamB_XP> @state
21:42:37 <lambdabot> there is no state
21:42:40 <SamB_XP> @state
21:42:40 <lambdabot> there is no state
21:42:41 <SamB_XP> @state
21:42:42 <lambdabot> there is no state
21:42:44 <SamB_XP> @state aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaahhhhhhhhhhhhhhh!
21:42:44 <lambdabot> aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaahhhhhhhhhhhhhhh!
21:42:45 <SamB_XP> @state
21:42:45 <lambdabot> aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaahhhhhhhhhhhhhhh!
21:42:47 <monochrom> hehehee
21:42:50 <LordBrain> @state
21:42:50 <lambdabot> there is no state
21:42:50 <SamB_XP> ooooh
21:42:52 <glguy> the simplest things...
21:42:56 <SamB_XP> so someine is feeding it things
21:42:59 <SamB_XP> or something
21:43:00 <Adamant> @state "I'm a pretty birdy"
21:43:00 <lambdabot> "I'm a pretty birdy"
21:43:01 <SamB_XP> @state
21:43:02 <lambdabot> "I'm a pretty birdy"
21:43:14 <lispy> @. vixen . state keal
21:43:14 <lambdabot> you sound like an awesome guy... are you single?
21:43:18 <SamB_XP> @. elite keal
21:43:19 <lambdabot> beT7er BE a7LEa5t 16X16 cO1or \/\/ith 3XteNd3D AS(iI ze7
21:43:19 <lispy> @state
21:43:20 <lambdabot> there is no state
21:43:25 <palomer> EH??
21:43:37 <Adamant> @state @quote
21:43:37 <lambdabot>  @quote
21:43:45 <lispy> @. state quote
21:43:45 <lambdabot> TuringTest says: They got it work in Haskell without understanding Haskell.  It is quite an achievement, of some description.
21:43:51 <palomer> @state
21:43:52 <lambdabot> TuringTest says: They got it work in Haskell without understanding Haskell.  It is quite an achievement, of some description.
21:44:03 <palomer> @quote
21:44:03 <lambdabot> SebastianHanowski says: I tried to formalise a proof of rev (rev l)  = l i found in W. Kluges book "Abstract Computing Machines - A Lambda Calculus Perspective" which is pretty much a 'Pimp My Ride'
21:44:03 <lambdabot> for SECD-machines.
21:44:07 <SamB_XP> @. elite . state keal
21:44:07 <lambdabot> i |4(k iN \/ERBA| And SoCI41 3XpR3zsI0N
21:44:08 <SamB_XP> @state
21:44:08 <lambdabot> i lack in verbal and social expression
21:44:28 <glguy> calling an out-of-scope function isn't as easy as I had hoped
21:44:30 <palomer> @quote
21:44:30 <lambdabot> gzl says: [on why monads are scary] maybe it's because people look up monad on wikipedia, find the category theory page, and crap themselves
21:44:32 <Adamant> @quote @state
21:44:32 <lambdabot>  @state hasn't said anything memorable
21:44:47 <SamB_XP> @quote
21:44:47 <lambdabot> PaulGraham says: I get the impression that using [Haskell] would feel like reading a novel written by a literary critic.
21:44:54 <SamB_XP> heh
21:44:59 <nealar> @quote lambdabot
21:44:59 <lambdabot>  lambdabot hasn't said anything memorable
21:45:08 <LordBrain> did he really say that?
21:45:15 <lispy> @quote lispy
21:45:15 <lambdabot>  I just remembered this dream i had the other morning.  I was trying to tell my alarm clock how to snooze by using a list comprehension
21:45:38 <lispy> @quote dons
21:45:39 <lambdabot>  the type system is *great* for coding while sleepy.. you just hack any garbage together, and let the type checker deal with it
21:46:00 <lispy> oh, maybe that's how it worked in my dream :)
21:46:02 <SamB_XP> @quote me
21:46:02 <lambdabot> me hasn't said anything memorable
21:46:05 <LordBrain> haskell is awesome.. and when you go back to do some other language for a job or somethign and return.. you appreciate it even more
21:46:07 <SamB_XP> @quote SamB
21:46:08 <lambdabot>  Boy, point-free Arrows are worse than Forth...
21:46:18 <SamB_XP> @quote
21:46:18 <lambdabot> desrt says: man... there's this whole dark side to haskell that dr. kahl didn't teach us in 3e03
21:46:24 <SamB_XP> @quote
21:46:24 <lambdabot> mwc says: I actually got away with running Haskell through a TeX pretty printer and handing it in as pseudocode
21:46:33 <SamB_XP> hahahaha
21:46:44 <lispy> hah
21:46:48 <LordBrain> hahaha
21:47:06 <SamB_XP> well, I don't imagine professors really care that it isn't real code, so long as it reads well
21:48:00 <LordBrain> that depends on the assignment and the professor i suspect
21:48:07 <SamB_XP> I suppose
21:48:10 <SamB_XP> @quote
21:48:11 <lambdabot> xerox says: I am really interested specifically in bottoms in this very moment.
21:48:16 <SamB_XP> hmm
21:48:23 <SamB_XP> @quote
21:48:23 <lambdabot> fsbot says: English -> English: no matching translation services found.
21:48:32 <SamB_XP> hahahaha
21:48:34 <SamB_XP> @quote
21:48:34 <lambdabot> Cale says: The perfect programming language is mathematics, but that only runs on mathematicians.
21:48:41 <monochrom> Nice, note that in Haskell classes they don't ask you to hand in pseudocode like in Java classes.
21:49:04 <SamB_XP> probably because Haskell code is easier to read ;-)
21:49:07 <SamB_XP> @quote
21:49:07 <lambdabot> kolmodin says: I would rather lose my left arm than write it in Java
21:49:11 <SamB_XP> @quote
21:49:11 <lambdabot> joelr says: the learning curve is far steeper with Haskell but it is far more elegant and readable
21:49:15 <SamB_XP> @quote
21:49:16 <lambdabot> Itkovian says: real programmers don't write docs, if it was hard to write, it should be hard to understand
21:49:23 <glguy> lol
21:49:25 <glguy> I like that one
21:49:28 <SamB_XP> hahaha
21:49:35 <SamB_XP> he's kidding, I hope ;-)
21:49:35 <LordBrain> lol
21:49:45 <SamB_XP> @quote
21:49:45 <lambdabot> Korollary says: an olegweek is a complex entity with an imaginary part
21:49:51 <SamB_XP> hahaha
21:49:53 <lispy> <shrug> that's how i feel about HCI :)
21:49:57 <Cale> well, "Haha, only serious"
21:50:05 <Cale> (re: Itkovian)
21:50:20 <palomer> @quote
21:50:20 <lambdabot> kzm says: My program contains a bug.  How ungrateful, after all I've done for it.
21:50:23 <SamB_XP> well, I meant about the "should" part
21:50:24 <palomer> @quote
21:50:25 <lambdabot> ChilliX says: You need to seek a balance between category theory and VLSI
21:50:31 <SamB_XP> hahaha
21:50:49 <LordBrain> VLSI?
21:50:58 <glguy> very large scale integration?
21:51:00 <SamB_XP> EE stuff
21:51:04 <LordBrain> @google VLSI
21:51:06 <lambdabot> http://www.semiconductors.philips.com/
21:51:06 <lambdabot> Title: Philips Semiconductors
21:51:07 <SamB_XP> IC's and all that
21:51:28 <skew> dons: is hs-plugins from darcs supposed to build with Cabal 1.1.4 and cpphs 0.7? I'm getting syntax errors at C macros
21:51:45 <skew> just following the instructions from the README
21:52:12 <dons> hmm. builds for me. not sure about cpphs though..
21:52:28 <dons> ghc 6.4.x?
21:52:39 <SamB_XP> @quote
21:52:40 <lambdabot> Taral says: But I can do DP in C, which has no RT
21:52:41 <skew> some 6.5
21:52:47 <SamB_XP> @quote
21:52:47 <lambdabot> SamB says: Because sliced bread gives horribly uninformative error messages?
21:53:02 <skew> src/AltData/Typeable.hs:452:0: parse error (possibly incorrect indentation)
21:53:22 * DukeDave dances
21:53:24 <dons> ah, 6.5... you are missing the Typeable.h header
21:53:45 <dons> you need to grab the Typeable.h header from 6.4.x, and make sure ghc can see it when compiling hs-plugins
21:54:01 <dons> i.e. includes:             Linker.h Typeable.h
21:54:09 <monochrom> Why was someone ignorant of OOA/OOD defending OO?  I mean, even I have read Peter Codd.
21:54:09 <dons> ghc-options:          -Wall -O -fasm -funbox-strict-fields -fno-warn-missing-signatures -I/home/dons/lib/ghc-6.4.2/include/
21:54:33 <monochrom> (Boy, those books were certainly hard to read.  No math.)
21:54:49 <SamB_XP> hahaha
21:55:03 * SamB_XP needs to go to bed if all he can say is "Hahaha"
21:55:05 <alar> OOA? what is it?
21:55:12 <monochrom> analysis
21:55:18 <glguy> d for design
21:56:06 <skew> dons: my copy of 6.5 seems to have Typeable.h, but it's not on the includes line
21:56:37 <dons> yep, you need the 6.4.x one
21:59:58 <skew> seems to work now, thanks
22:00:16 <dons> cool
22:00:34 <dibblego> is there a MacOSX implementation of Haskell?
22:00:45 <glguy> ghc?
22:00:49 <glguy> hugs98?
22:01:06 <audreyt> dibblego: MacIntel or PPC?
22:01:07 <dons> nhc? yhc? hugs? ghc? jhc?
22:01:15 <dibblego> PPC
22:01:18 <dons> answer: yes. there is :)
22:01:24 <edwardk> gah OOHaskell has so many fixed IO monad references.
22:01:29 <audreyt> oh. http://haskell.org/ghc/download_ghc_641.html#macosx
22:01:30 <lambdabot> Title: GHC: Download version 6.4.1
22:01:45 <audreyt> the 6.4.2 has eternally been "coming soon"
22:01:50 <glguy> darwinports has ghc 6.4.2
22:01:57 <audreyt> I wonder if wolfgang will skip into 6.4.3 directly
22:02:10 <Cale> or 6.6 :)
22:02:14 <audreyt> or that, yeah.
22:06:15 <Cale> "They gave each address a “16-bit” number, which meant that the total number of available addresses worked out at about four billion (2 to the power of 32)."
22:06:22 <skew> is 6.6 supposed to improve the interaction of type classes and gadts?
22:06:33 <Cale> http://www.timesonline.co.uk/article/0,,3-2270472,00.html
22:07:15 <dons> hmm
22:07:23 <Cale> Does that make anyone else feel ill?
22:07:32 <jgrimes> Cale, ouch.
22:08:01 <Cale> "But as use grew, it became clear that the old protocol, IPv4, wasn’t big enough, so a new one was written based on “32-bit numbers”. That increased the number of available addresses to 340 undecillion, 282 decillion, 366 nonillion, 920 octillion, 938 septillion — enough for the foreseeable future, Mr Kessens said."
22:08:17 <SamB_XP> hehe
22:08:27 <SamB_XP> they mentioned that in ZSNES already
22:08:31 <SamB_XP> > 2^32
22:08:32 <lambdabot>  4294967296
22:08:36 <SamB_XP> > 2^128
22:08:37 <lambdabot>  340282366920938463463374607431768211456
22:08:57 <SamB_XP> er, #ZSNES
22:09:05 <SamB_XP> okay, now for sleep
22:09:09 <lispy> > 2^16
22:09:11 <lambdabot>  65536
22:09:15 * audreyt is reminded of the brazillion joke
22:09:29 <audreyt> # http://politicalhumor.about.com/library/jokes/bljokebushbrazilian.htm
22:09:30 <lambdabot> Title: Bush Brazilian Joke - Bush Brazilian Soldiers Joke
22:10:00 <dons> hehe
22:10:05 <SamB_XP> lol
22:10:13 <DukeDave> okay, I've been using hugs all the time up until now
22:10:41 <DukeDave> I'm a little confused as to how I use the main func now I wish to compile my prog :|
22:10:45 <lispy> heh!
22:10:49 <dons> ghc upside yourself, man!
22:10:59 <dons> main = do somethings
22:11:02 <audreyt> DukeDave: ghci or ghc --make
22:11:05 <lispy> @type main
22:11:06 <lambdabot> Not in scope: `main'
22:11:20 <lispy> main :: IO ()
22:11:22 <DukeDave> so say I have     helloWorld :: String
22:11:22 <lambdabot> main :: IO ()
22:11:25 <palomer> hehe
22:11:33 <DukeDave> can I just           main = do helloWorld
22:11:40 <Cale> Also, he's off by a great deal due to rounding.
22:11:51 <lispy> in that case you'd probably want to display the string
22:12:01 <Cale> > 2^128 - 340282366920938000000000000000000000000
22:12:02 <lambdabot>  463463374607431768211456
22:12:04 <lispy> which means print or putStrLn most likely
22:12:21 <Cale> > (2^128 - 340282366920938000000000000000000000000) `div` (2^32)
22:12:22 <lambdabot>  107908475819842
22:12:28 <lispy> he's off by more addresses than we currently have
22:12:44 <DukeDave> well, my func returns [(Int, Int, Int)]
22:12:50 <Cale> he's off by approximately 107908475819842 times the number of addresses we currently have
22:13:00 <DukeDave> I'd just like the list to be dumped on std out
22:13:09 <glguy> DukeDave: main = putStrLn $ show myFunction
22:13:10 <lispy> > 107908475819842 > (2^32)
22:13:11 <lambdabot>  True
22:13:27 <SamB_XP> > (2^128 - 340282366920938000000000000000000000000) `div` (2^64)
22:13:27 <lambdabot>  25124
22:13:34 <palomer> all this arithmetic is hurting my head
22:13:37 <Cale> that is, he's off by more IPv4 internets than there are IPv4 addresses.
22:13:47 <lispy> hehe, well put
22:14:02 <SamB_XP> and plus he claimed that the addresses were 32-bit
22:14:08 <Cale> yeah
22:14:12 <SamB_XP> I think thats far more glaring, personally
22:14:19 <SamB_XP> because that is a magnitude error
22:14:22 <Cale> that's what initially made me feel sick to my stomach
22:14:23 <DukeDave> main =  putStrLn $ show (solve [1..9])
22:14:30 <SamB_XP> also it shows he doesn't know how to take powers
22:14:36 <SamB_XP> or to take powers
22:14:38 <DukeDave> ERROR "FinalSolver.hs":3 - Unresolved top-level overloading
22:14:40 <DukeDave> :(
22:14:52 <sjanssen> DukeDave: you can shorten that to main = print $ solve [1..9]
22:14:54 <Cale> or any combinatorics at all, even the simplest things they teach you in highschool
22:15:21 <glguy> does print = putStrLn . show ?
22:15:30 <sjanssen> glguy: it does indeed
22:15:34 <SamB_XP> Cale: do they teach you bits in highschool thesedays
22:15:43 <DukeDave> glguy, sjanssen, in both cases I'm getting the error
22:15:46 <SamB_XP> @pl putStrLn . show
22:15:46 <lambdabot> putStrLn . show
22:15:49 <SamB_XP> hmm
22:15:52 <SamB_XP> @pl needs work
22:15:53 <lambdabot> needs work
22:15:56 <glguy> DukeDave: are you putting that main = in your code?
22:16:02 <glguy> DukeDave: or are you typing it into ghci?
22:16:08 <DukeDave> into code
22:16:10 <SamB_XP> @pl there is an echo in here
22:16:10 <lambdabot> (line 1, column 18):
22:16:11 <lambdabot> unexpected reserved word "in" or "i"
22:16:11 <lambdabot> expecting variable, "(", operator or end of input
22:16:17 <SamB_XP> haha
22:16:23 <DukeDave> as in I'm defining the func main
22:17:08 <Cale> http://www.monzy.com/?p=151
22:17:10 <lambdabot> Title: monzy.com » Combinatorics
22:17:12 <glguy> SamB_XP: @pl means point -free ... what did you expect it to do in that case?
22:17:14 <DukeDave> makes no sense  *_*
22:17:28 <glguy> or "pointless" i suppose... pl and all
22:17:34 <sjanssen> DukeDave: the program loads in hugs without the main function?
22:17:35 <dons> SamB_XP: you could submit a new rewrite rule to @pl ?
22:17:43 <lispy> @pl \x -> putStrLn (show x)
22:17:44 <lambdabot> putStrLn . show
22:17:45 <dons> putStrLn . show  --> print
22:18:04 <SamB_XP> @pl-submit putStrLn . show --> print
22:18:04 <lambdabot> Unknown command, try @list
22:18:08 <DukeDave> so it's fair to say that
22:18:10 <SamB_XP> uh, it don't work
22:18:12 <glguy> SamB_XP: ok, I see what you were trying to do
22:18:13 <DukeDave> main :: IO ()
22:18:16 <DukeDave> and
22:18:20 <DukeDave> main =  print (solve [1..9])
22:18:22 <SamB_XP> dons: you must fix it!
22:18:42 <lispy> dons: did you figure out the bug with @type (,,,,,,,,)
22:18:45 <SamB_XP> or, you could not give sleepy people ideas ;-)
22:18:46 <DukeDave> where solve :: [Int] -> [(Int, Int, Int)]
22:18:53 <glguy> DukeDave: you don't need to define a type for main (tho that's probably not the issue you are having)
22:18:53 <dons>  @pl should probably do destory/unfold or build/foldr fusion
22:18:57 <dons> that'd give some fun results
22:19:05 <DukeDave> glguy, was just stating it for clarity :)
22:19:09 <glguy> DukeDave: you could paste your program to the pastebot
22:19:11 <SamB_XP> destry/unfold, you mean?
22:19:13 <SamB_XP> not destory?
22:19:23 * SamB_XP wonders what destory would do to his reading material
22:19:30 <dons> destroy, though destory seems useful too
22:19:37 <DukeDave> gladly, cheers :)
22:19:39 <sjanssen> as de story unfolds . . .
22:19:48 <dons> destory/unroll or something
22:19:51 <glguy> destroy?
22:20:05 <glguy> @hoogle destroy
22:20:05 <lambdabot> System.Win32.Mem.c_HeapDestroy :: HANDLE -> IO Bool
22:20:05 <lambdabot> System.Win32.Mem.heapDestroy :: HANDLE -> IO ()
22:20:10 <SamB_XP> it would, like, turn my reading material into non-narrative works or something!
22:20:11 <dons> could almost be an April 1 story
22:20:20 <SamB_XP> that would almost be *worse* than destroying it
22:20:23 <dons> ?google destroy unfold fusion
22:20:26 <lambdabot> http://www.cs.ioc.ee/~tarmo/papers/aplas04.pdf
22:20:42 <dons> ?hoogle build
22:20:43 <lambdabot> GHC.Exts.build :: ((a -> b -> b) -> b -> b) -> [a]
22:20:43 <lambdabot> Distribution.Simple.Build.build :: PackageDescription -> LocalBuildInfo -> Int -> [PPSuffixHandler] -> IO ()
22:20:43 <lambdabot> Data.Graph.Inductive.Internal.Heap.build :: Ord a => [(a, b)] -> Heap a b
22:20:49 <dons> ah good, hoogle knows build.
22:20:55 <dons> now, that could be useful in @pl
22:21:12 <lisppaste2> dukedave pasted "trouble with main" at http://paste.lisp.org/display/22741
22:22:40 <glguy> DukeDave: that code gives me type errors
22:22:41 <lispy> DukeDave: i doubt you have problems with main
22:22:41 <lispy> (solve [1..9])
22:22:42 <lispy> solve :: [[Int]] -> [[Frac]]
22:23:01 <lispy> perhaps, (solve [[1..9]]) but i doubt that's what you want either
22:24:11 <DukeDave> ah crap
22:24:21 <DukeDave> perhaps it is a little too late, I've just noticed
22:24:45 <lispy> and 'test' is probably buggy
22:24:58 <lispy> only works on lists with 3 elements?
22:25:01 <DukeDave> yup
22:25:03 <lispy> that's a bit fishy
22:25:15 <DukeDave> suggestions?
22:25:21 <lispy> use a tuple instead
22:27:01 <DukeDave> cool, working on it
22:27:08 <DukeDave> I'll patch up and re-paste
22:27:20 <lispy> okay, i'll probably go to bed before then :)
22:27:21 <DukeDave> any other critisms very much welcome :)
22:27:29 <DukeDave> good call ;)
22:27:39 <lispy> just a general comment that tuples are generally better than fixed size lists
22:28:11 <lispy> but you could also curry it
22:28:25 <lispy> test f1 f2 f3 instead of test (f1, f2, f3)
22:29:01 <glguy> solve looks like a foldl
22:29:08 <glguy> not sure if it's worth it to write it as such
22:29:42 <glguy> or at least a foldr
22:30:04 <sjanssen> glguy: it's a filter . map
22:30:30 <glguy> yeah, that makes more sense than my idea
22:31:33 <sjanssen> solve = filter test . map (map listToFrac . splitList 3)
22:32:26 <glguy> isn't there a version of splitList in List?
22:32:53 <glguy> @hoogle Int -> [a] -> ([a],[a])
22:32:54 <lambdabot> Prelude.splitAt :: Int -> [a] -> ([a], [a])
22:33:01 <glguy> splitAt :)
22:33:33 <glguy> now that I've said that, I'll look closer at split list and learn that it's not the same
22:33:40 <DukeDave> :)
22:33:46 <DukeDave> it's basically just a hack
22:33:57 <DukeDave> I'm trying to find the problem the program is to solve
22:34:02 <DukeDave> but I've lost the url :)
22:34:21 <DukeDave> which makes the last 6 hours I've spent working on it somewhat wasted
22:34:33 <glguy> oh, it splits the list into sections
22:35:01 <DukeDave> aha
22:35:03 <DukeDave> http://www.ecmselection.co.uk/high_iq_enter_and_win/brainbuster_no_20.html
22:35:04 <lambdabot> Title: ecm selection ... high-tech recruitment specialists brainbuster no. 20
22:35:35 <DukeDave> the code on pastebin finds all 20 solns in ~25secs
22:35:43 <DukeDave> so it's optimising time
22:36:13 <DukeDave> (and also learn good haskell code etiquette time)
22:36:42 <dons> fire up that profiler.
22:37:18 <DukeDave> gah, I keep writing hacky code
22:38:57 <lispy> DukeDave: that's fine, that's how we all start.  The next step is to learn to rewrite things so that you can take advantage of builtin stuff.  Like all the functions from Prelude
22:39:04 <lispy> and i'm off to bed...
22:39:14 <DukeDave> cheers for the help, nn
22:39:22 <lispy> yw, good night
22:39:28 <DukeDave> I'll have it down to 10 lines for tomorrow :)
23:21:14 <wilx> SamB_XP, the thing about murders was about Midsomer Murders TV series.
23:29:10 <normal-dude> is haskell a ml
23:29:17 <normal-dude> derivative?
23:29:25 <edwardk> distant third cousin =)
23:29:37 <edwardk> http://research.microsoft.com/~simonpj/tmp/history.pdf will give you more detail
23:29:49 <edwardk> its closer to miranda
23:31:45 <Cale> If you're comfortable with ML, you shouldn't find Haskell too hard to pick up, I wouldn't think.
23:31:52 <edwardk> *nods*
23:32:49 <normal-dude> miranda?
23:32:55 <normal-dude> wtf is mirnda?
23:34:24 <Cale> Miranda is a trademark of Research Software Ltd.
23:34:27 <Cale> :)
23:34:28 <normal-dude> oh
23:34:30 <edwardk> heh
23:34:31 <normal-dude> well
23:34:32 <Cale> http://en.wikipedia.org/wiki/Miranda_programming_language
23:34:48 <normal-dude> I recent ly heard perl can do functional programming as explained in a book called higher order perl
23:34:58 <edwardk> its an old programming language, kind of introduced lazy functional programming to the masses.
23:35:07 <Cale> Miranda is a non-strict purely functional programming language developed by Professor David Turner as a successor to his earlier programming languages SASL and KRC, using some concepts from ML and Hope.
23:35:24 <Cale> (in case you're too lazy to open the link)
23:36:08 <edwardk> turner basically took miranda out into the marketplace via his company Research Software Ltd, that Cale mentioned above.
23:36:54 <edwardk> the haskell committee asked him if they could build their language on it, he said no, which is why the syntax differs in a lot of ways
23:37:30 <normal-dude> hm
23:37:40 <normal-dude> never heard of it so it must have bombed in the market
23:37:45 <normal-dude> hey it mentions APL
23:37:48 <normal-dude> I heard APL is nice
23:37:54 <normal-dude> but need a funny keyboard
23:37:55 <normal-dude> heh
23:38:02 <edwardk> used to, can be coded without that now
23:38:18 <normal-dude> does it lose it pzaazasz
23:38:36 <normal-dude> he apl site I read said it was dope because it was so brief u could understand more
23:38:53 <normal-dude> gosh I cant pick my nose anymore with out a wipe sheet of papaer
23:38:55 <edwardk> kind of the same argument you hear about haskell
23:39:09 <normal-dude> so haskellis brief?
23:39:15 <normal-dude> is there a haskell for windows?
23:39:24 <normal-dude> ;)
23:39:26 <Cale> there are implementations on most platforms
23:39:27 <edwardk> yeah, thats what won me over (terseness, not the windows version) =)
23:39:38 <Cale> GHC and WinHugs
23:40:13 <Cale> GHC is the serious compiler, and it comes with GHCi which is the interactive shell.
23:40:49 <normal-dude> oow
23:40:50 <Cale> Hugs/WinHugs is an interpreter, and will do well for learning.
23:40:52 <normal-dude> free?
23:41:03 <Cale> yeah, I don't know of any commercial implementations
23:41:04 <normal-dude> ghc too hard to learn on?
23:41:05 <edwardk> yeah both are
23:41:09 <Cale> GHC is good too
23:41:14 <normal-dude> scheme seems to be a cool lang
23:41:16 <Cale> (for learning)
23:41:18 <dibblego> given, http://www.haskell.org/ghc/dist/stable/dist/ how does one figure out the latest stable?
23:41:19 <normal-dude> anyone here try scheme
23:41:20 <lambdabot> Title: Index of /ghc/dist/stable/dist
23:41:20 <normal-dude> ?
23:41:25 <Cale> sure
23:41:36 <normal-dude> is it productive?
23:42:00 <Cale> scheme is all right, I find its lack of types annoying, but some people seem to like that
23:42:08 <edwardk> grab the one without the .200xxxxxxx in the name
23:42:11 <Cale> If you're going to try a lispish language, try scheme.
23:42:23 <dibblego> is the latest stable of GHC 6.4.2.20060716 ?
23:42:27 <Cale> CL is annoying by comparison.
23:42:31 <normal-dude> clisp has no manuals
23:42:34 <normal-dude> :(
23:42:35 <Cale> What?
23:42:39 <Cale> Yes it does
23:42:39 <normal-dude> well new one by siebels
23:42:47 <normal-dude> or paul grahams book
23:42:51 <normal-dude> which I couldnt grok
23:42:56 <Cale> It has a manual which is over 1000 pages.
23:43:21 <Cale> http://www.lisp.org/HyperSpec/FrontMatter/index.html
23:43:23 <lambdabot> Title: Common Lisp HyperSpec (TM)
23:43:34 <normal-dude> can u learn to program from this manual?
23:43:42 <Cale> I did.
23:44:00 <Cale> Though you might want to try a tutorial :)
23:44:10 <Cale> I already knew scheme to some extent.
23:44:22 <normal-dude> what is a macro?
23:44:33 <Cale> Code which is expanded at compile time
23:44:47 <normal-dude> paul graham says clisp macro is best sicen data and operations are same or something
23:44:58 <normal-dude> since
23:45:26 <normal-dude> use them to write programs that write programs?
23:45:31 <edwardk> if you have 45 minutes or so, you might try listening to http://technetcast.ddj.com/tnc_play_stream.html?stream_id=644 it has a good introduction to PLT Scheme, and covers scheme macros
23:45:33 <normal-dude> hm
23:45:51 <Cale> Most of the things which I see lisp/scheme folks using macros for can be done quite nicely without them using laziness and monads.
23:46:10 <Cale> But either way works :)
23:46:26 <normal-dude> hmmmm
23:46:29 <normal-dude> really?
23:46:33 <edwardk> hygeinic macros are one of the things that the haskell fold haven't really caught up with. template haskell/generic haskell, etc isn't quite that smooth
23:46:49 <normal-dude> what in hell is hyg macro?
23:47:02 <Cale> I don't know what I'd do with macros in Haskell even if I had them
23:47:11 <edwardk> a scheme (define-syntax ... ) block
23:47:12 <normal-dude> paul graham said repeatedly that he choose clisp to deliver an app becaus eof real macros
23:47:16 <Cale> I haven't thought of much to do with TH as it is.
23:47:22 <normal-dude> hm
23:47:23 <edwardk> listen to the video
23:47:26 <normal-dude> k
23:47:28 <wli> I'd like ML-style functors outright in addition to type classes.
23:47:31 <edwardk> and paul graham is not god =)
23:48:15 <edwardk> er listen to the audio, there is no video associated with that netcast
23:48:35 <normal-dude> funny cuz audio says
23:48:43 <normal-dude> your watching dr dobbs
23:48:51 <edwardk> *nods*
23:49:03 <edwardk> there are powerpoint slides there you'll need to open up to follow along
23:49:09 <normal-dude> scheme can do heavy lifting
23:49:25 <Cale> hm?
23:49:29 <edwardk> but it was the best introuction to whats cool and new in the scheme community that i've seen in a long time
23:50:21 <edwardk> i mostly was planning on abusing template haskell to do 2 things, one was to debate about embedding the javascript code as a compile time code generator, the other was to work around the lack of class associated types
23:50:48 <edwardk> but its very closely tied to the syntax of the core, so if you don't know it well its hard to use.
23:50:55 <Cale> But you have functional dependencies.
23:51:04 <edwardk> fundeps are nice but don't fix my types
23:51:13 <Cale> hmm
23:51:19 <edwardk> my hash type still bloats to something like
23:51:34 <normal-dude> llol eric doesnt want to admit we exist
23:51:40 <normal-dude> eric raymond?
23:51:42 <normal-dude> lol
23:51:44 <edwardk> VHash a r k v, and i have to pass around several explicit dictionaries
23:51:52 <normal-dude> this guy kicksass
23:51:54 <normal-dude> WOW
23:52:11 <edwardk> shriram is pretty funny =)
23:52:22 <normal-dude> lol
23:52:36 <normal-dude> not because we are wankers
23:52:44 <normal-dude> lol
23:52:49 <normal-dude> hes indian comedy
23:53:43 <edwardk> but basically cale, i was translating one bit of code that worked quite nicely and was very concise written for STM and TVars
23:53:46 <normal-dude> module system puts most object systems to shame
23:53:54 <edwardk> into a generic version of the code that worked with IO or ST monads
23:53:57 <normal-dude> module system puts most module systems to shame
23:53:59 <u221e> dons, you around?
23:54:06 <normal-dude> supposedly scheme also great for debugging
23:54:15 <edwardk> which necessitated using a couple of classes with fundeps as you suggested
23:54:20 <normal-dude> wow
23:54:27 <normal-dude> this audo kicks ass
23:54:29 <normal-dude> ASS
23:54:31 <Cale> normal-dude: actually, that's a lie, you have to do lots of debugging in scheme :)
23:54:49 <normal-dude> dymamic content using continuations
23:54:51 <edwardk> but the number of classes associated with each call was getting nuts
23:54:52 <normal-dude> woa!
23:54:58 <edwardk> and wasn't cleanly associated with the interface any more
23:55:02 <normal-dude> whos olin shivers
23:55:32 <edwardk> half of what he's talking about is in relation to people who are physically in the audience normal-dude, so keep that in mind =)
23:56:16 <normal-dude> :)
23:56:32 <normal-dude> he said all 4scheme programmers are in room so if roof fell in they shut up finally
23:56:34 <Cale> http://www.cc.gatech.edu/~shivers/
23:56:36 <lambdabot> Title: Olin Shivers
23:56:40 <normal-dude> dynamic content 8x as fast
23:56:45 <normal-dude> as mod perl and apache
23:56:48 <normal-dude> fast as heck
23:56:50 <normal-dude> :)
23:56:51 <edwardk> fromList :: (MArray a [(k,v)] m, VArray m a, Eq k) => (k -> Int) -> [(k,v)] -> m(VHT a k v)
23:56:52 <normal-dude> wht!!
23:56:56 <normal-dude> can this be true?
23:57:02 <edwardk> that first item in the dictionary list bugs me
23:57:16 <Cale> normal-dude: why not?
23:57:20 <edwardk> eposes a bunch of nonsense about the internals
23:57:21 <u221e> My program just got posted to  on the shootout site... they say that it's 2 seconds slower. THat can't be right, everyone how has tested it says it's faster then the old code.
23:57:27 <Cale> normal-dude: It's not like perl runs incredibly fast
23:57:47 <edwardk> the wrapped version: fromList :: (Var m r, MArray a [(k,v)] m, VArray m v, Eq k) => (k -> Int) -> [(k,v)] -> m (VHash r a k v) is even worse
23:58:34 <normal-dude> scheme is beautiful?
23:58:42 <Cale> normal-dude: In a sense
23:58:43 <edwardk> its a point of view =)
23:58:55 <normal-dude> mod perl is supposed to be blindingly fast
23:59:00 <normal-dude> as is fast cgi
23:59:00 <edwardk> if you can see past parenthesis it has a certain minimalist beauty
23:59:02 <normal-dude> :)
23:59:15 <u221e> This pisses me off.
23:59:25 <edwardk> blindingly fast isn't a term i would apply in either case, but both are perfectly adequate
23:59:32 <edwardk> u?
23:59:38 <normal-dude> cmpared to what
23:59:40 <normal-dude> c?
23:59:46 <normal-dude> can you use c for web?
23:59:52 <Cale> yes, of course you can
23:59:59 <edwardk> yeah you can write cgi's in anything normal-dude
