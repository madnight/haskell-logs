00:00:32 <hyrax42_> who was on the winning ICFP 2005 team?
00:01:12 * shapr pokes at markupToHtml
00:01:24 <shapr> Hm... I want an example.
00:01:35 <shapr> markupToHtml defaultMarkupXHtmlPrefs testinput :: (Monad m) => m (Either String Text.XHtml.Html)
00:01:37 <shapr> Now what?
00:04:56 <lispy> Right!
00:05:09 * lispy gets haskell-cgi
00:05:19 <lispy> guess i missed that one...i have cgi-compat instead
00:06:19 <bringert> lispy: eh
00:06:27 <bringert> I think it only works with cgi-compat
00:06:31 <bringert> not cgi
00:06:38 <bringert> I should fix that somehow
00:06:49 <lispy> the INSTALL says to use haskell-cgi
00:07:10 <bringert> well, that's not correct these days I think
00:07:16 <lispy> but i'm getting some weird funk between xhtml versions
00:07:23 <bringert> cgi / cgi-compat is a bit of a mess
00:07:41 <lispy> well, shouldi cancel the build of haskell-cig?
00:07:42 <shapr> bringert: Is there an example usage of markupToHtml ?
00:07:43 <lispy> er cgi
00:07:47 <bringert> did you install cgi-compat with one xhtml version, and then use another for something else
00:07:56 <bringert> shapr: yes, in hope. and in hask-home
00:07:59 <lispy> bringert: i must have, but now i can't seem to fix it
00:08:19 <bringert> weord
00:08:24 <shapr> heh
00:08:27 <shapr> a weird weird
00:08:46 <lispy> so, okay now i have just one xhtml
00:08:54 <lispy> i'll unregister the old cgi-compat
00:09:08 <lispy> er hide
00:09:20 <lispy> ./Network/NewCGI.hs:1:0: unknown package: xhtml-2006.8.29
00:09:26 <lispy> and when i tried to build the new version i get
00:09:36 <lispy> which is the version i used to build it originall
00:09:37 <lispy> Oh
00:09:40 <lispy> duh, i need to make clean
00:10:06 * lispy is kinda slow sometimes
00:10:20 * lispy thinks that sometimes has become mosttimes over the years
00:11:29 <shapr> bringert: Micropatch coming your way for hask-home :-) it shouldn't say hask-tag in the homepage url
00:12:39 <ValarQ> why am i always getting so surprised by how small my code gets when i port it to Haskell?
00:13:20 <shapr> You could post your code to haskell-cafe and watch it vanish into almost nothing.
00:13:30 <ValarQ> would be fun :)
00:13:43 <shapr> bringert: You put out a bunch of cool code, thanks :-)
00:13:44 <ValarQ> not that i have the need for it...
00:14:21 <skew> because you don't want to believe you worked so much harder than necessary writing the first one?
00:14:48 <hyrax42_> ?hoogle Identity a -> [a]
00:14:49 <lambdabot> No matches, try a more general search
00:14:59 <lisppaste2> ValarQ pasted "NC group assigner" at http://paste.lisp.org/display/27710
00:15:12 <bringert> shapr: thanks
00:15:13 <skew> ValarQ: perhaps it's good - you're probably less surly at work this way ;)
00:15:13 <ValarQ> shapr: tricky to make it more compact
00:15:42 <ValarQ> skew: yeah, probably
00:15:56 <bringert> shapr: patch pushed, thanks. dunno how that got there
00:16:08 <shapr> That's why you have users, they find bugs!
00:16:24 <bringert> shapr: I added hmarkup and two kinds of HWS to my projects page, thanks for reminding me
00:16:36 <shapr> What was it you said to gmh, that I was the one user every Haskell programmer had? =)
00:16:41 <skew> what's an NC group?
00:17:05 * shapr thought that was a great compliment
00:17:37 <ValarQ> skew: it's a sort of parameter groups in the ISO standard CNC language
00:18:02 <ValarQ> skew: like you can give it the command to make a linear movement to X:2 Y:4
00:18:21 <ValarQ> skew: but not X:2 X:5 for obvious reasons, because X and X is in the same group
00:19:43 <bringert> shapr: I remember saying that, but not to whom
00:19:57 <bringert> it's true
00:20:10 <skew> 'M' falls through if a is not in the list?
00:20:44 <ValarQ> it should
00:21:09 <ValarQ> i probably should remove that otherwise = 0 for 'G' as well
00:21:45 <ValarQ> great, it's now shorter :)
00:22:21 <skew> where do the result numbers come from?
00:22:25 <skew> why isn't there a 5?
00:23:30 <ValarQ> i don't have those numbers in my head, i probably don't support those codes
00:23:50 <ValarQ> the important thing is that i can make a difference between the commands
00:24:02 <ValarQ> er, codes
00:26:51 <ValarQ> hello psi
00:27:15 <psi> hi
00:28:12 <lispy>  4 DIMM slots for up to 4GB of DDR2 PC4200 RAM
00:28:14 <lispy> er sorry
00:28:23 <lispy> -ECHAN
00:28:30 <lisppaste2> skew annotated #27710 with "squishy" at http://paste.lisp.org/display/27710#1
00:29:56 <ValarQ> skew: nice
00:30:20 <skew> or maybe you should go the other way around, flattening out to more clauses in numeric order
00:31:22 <ValarQ> @type lookupBy
00:31:23 <lambdabot> Not in scope: `lookupBy'
00:31:30 <skew> it's defined in the paste
00:31:38 <ValarQ> oh
00:31:57 <ValarQ> silly me :)
00:33:49 <ValarQ> @type find
00:33:50 <lambdabot> forall a. (a -> Bool) -> [a] -> Maybe a
00:33:56 <ValarQ> that might work thought
00:34:39 <skew> that's probably the one
00:34:50 <skew> lookupBy = find . (.fst)
00:34:58 <skew> er
00:35:10 <skew> lookupBy pred a = find (pred a.fst), anyway
00:35:33 <skew> @pl \p a -> find (p a . fst)
00:35:33 <lambdabot> (find .) . flip flip fst . ((.) .)
00:37:51 <ValarQ> is that an assignment in a guard?
00:38:09 <skew> oh, that should be Just c <- ...
00:38:11 <skew> pattern guard
00:38:30 <ValarQ> ok
00:40:51 <ValarQ> glasgow extension apparantly
00:46:21 <ValarQ> @karma+ skew
00:46:22 <lambdabot> skew's karma raised to 1.
00:46:40 <dons> ValarQ: yep, pattern guards are a glasgow ext. that may well make it into haskell'
00:46:50 <dons> (i think i've only seen one objection)
00:47:01 * dons is big pattern guards fan
00:47:57 * shapr laughs hysterically at aptitude
00:48:20 <ValarQ> dons: what was the objection?
00:48:55 <wolverian> shapr, did it want to resolve a conflict by removing your pants?
00:49:00 <shapr> """ apt is an essential package! Are you sure you want to remove it? Type 'Yes, I am aware this is a very bad idea' if you are. """
00:49:02 * wolverian coughs
00:49:10 <wolverian> oh :)
00:50:27 <shapr> That's the longest "I'm sure" phrase I've seen.
00:52:41 <shapr> Yay, hmarkup happiness!
00:52:46 <dons> ValarQ: oh, that you can encode pattern guards in terms of monads, hence redundant
00:53:01 <dons> (but this misses the point about expressive syntax, I think)
00:53:13 <dons> (we add do notation for the same reason )
00:53:22 <Syzygy-> shapr: I've seen other "I'm sure"-phrases of similar length...
00:53:50 <shapr> All debian/apt users must try "apt-get moo"
00:53:51 <skew> dons: you need to encode the whole pattern match in a monad for it to really work
00:53:56 <shapr> Syzygy-: Like what?
00:53:58 <dons> yeah, pretty nasty
00:55:45 <ValarQ> dons: is that a bad thing?
00:57:43 <dons> well, I think its too verbose and unwieldy
00:58:07 <dolio> shapr: You should apt-get install cowsay
00:59:36 <skew> dons: I think you could make a nice pattern system based on sugar for monadic operations
01:00:07 <ValarQ> but you could still write this?    | Just c <- (flip lookup table) =<< someMaybeValue
01:00:10 <skew> perhaps it's best to leave the implementaiton to the compiler
01:00:26 <shapr> dolio: I've used cowsay, but apt-get moo is a really cool easter egg
01:00:36 <dolio> :)
01:00:49 <skew> I think implementing pattern matching is a lot hairier with dependent types
01:02:02 <ValarQ> haskell-mode didn't recognize pattern guards...
01:02:05 <Syzygy-> shapr: Cannot remember where I saw it, but it was some package management trap somewhere as well I think.
01:02:09 <ValarQ> oh well...
01:03:53 <shapr> Has anyone here tried a Movidis x16 system?
01:04:07 <shapr> I was wondering if they'd be any good as a desktop/workstation.
01:07:55 <lisppaste2> skew annotated #27710 with "too squishy" at http://paste.lisp.org/display/27710#2
01:09:22 <skew> shapr: how much does it cost?
01:09:43 <shapr> It's $1k USD for the dev board and $2k USD for a working system.
01:09:59 <shapr> That's 16 MIPS cores @ 500MHz
01:10:20 <Bobstopper> for unsafeInterleaveIO will just the overall IO command argument be deferred lazily, or each IO part of the command argument also be delayed lazily?
01:10:26 <dolio> Wow, that's a lot less than I was expecting it to be.
01:10:44 <skew> that's cheaper than any of the Niagara boxes
01:11:20 <shapr> Movidis seems to have the best op to dollar ratio at the moment.
01:12:07 <shapr> Cavium also makes 1GHz versions of that CPU - http://www.cavium.com/OCTEON-Plus_CN58XX.html , maybe Movidis will start selling a system that uses those if they make enough cash on their current offerings.
01:12:08 <lambdabot> Title: Cavium Networks - Products > OCTEON MIPS64 Processors > Silicon > OCTEON&trade;  ...
01:13:23 <shapr> Right now they only offer 500 and 600 MHz
01:14:00 <dons> mmm. how many cores?
01:14:00 <shapr> Their system comes with a PCI-X slot, I wonder if there are any PCI-X graphics cards with drivers I could build for MIPS?
01:14:05 <dons> 16?
01:14:07 <shapr> yup
01:14:18 <dons> mmmm. maybe i should get one.
01:14:20 <shapr> But unlike the Cell, these are real cores.
01:14:28 <dons> yeah
01:14:28 <shapr> dons: You need it for your research
01:14:35 * shapr grins evilly
01:14:40 <shapr> Aren't you doing NDP stuff?
01:15:39 <shapr> skew: On the other hand, Niagara chips will probably make great desktop systems right out of the box. Movidis might not.
01:16:28 <shapr> I'd still love to try GHC-SMP and STM on 16 cores.
01:18:47 <dolio> Is GHC available for that processor?
01:19:14 <dcoutts> GHC works on mips
01:19:29 * mux notes JavaScript is gaining features from the functional world
01:19:30 <dcoutts> though it's not a registerised port yet I think
01:19:46 <dcoutts> Bobstopper, it only does one level of delay
01:19:56 <skew> is that less or more important with all the registers on those chips?
01:19:57 <mux> array comprehensions, destructured assignment which are just a weak pattern-matching
01:20:03 <Bobstopper> dcoutts: thanks
01:20:12 <dcoutts> skew, probably more so
01:20:27 <dcoutts> skew, it makes about 50% difference
01:20:36 <mux> let expressions
01:21:14 <lispy> well, ifinally got it installed
01:21:16 <mux> http://developer.mozilla.org/en/docs/New_in_JavaScript_1.7
01:21:19 <lambdabot> http://tinyurl.com/pzlvf
01:21:20 <lispy> but now how do i use it!
01:21:23 * lispy should sleep
01:21:32 * shapr too
01:21:33 <Bobstopper> Oh, and if it interests anyone, I seem to have fixed the problems I was having running GHC under wine, so it's looking more feasible now.
01:21:42 <dcoutts> Bobstopper, nice
01:21:44 <shapr> Bobstopper: Oh that' cool
01:22:33 <lispy> shapr: after i install
01:22:39 <lispy> shapr: how do i actually blog something/
01:22:50 <lispy> that seems to be missing in the instructions :)
01:24:31 <shapr> um, add a user
01:24:33 <shapr> log in
01:24:35 <shapr> then create an entry
01:24:49 <shapr> user number 1 is the superuser
01:25:49 <lispy> hmm...
01:25:53 <lispy> i get permission denied
01:25:56 <lispy> when i login
01:26:17 <lispy> this might be what bringert meant :)
01:26:28 <shapr> Use a command line SQL client to add a row to the users table
01:26:48 <lispy> i'll do it tomorrow
01:26:51 <lispy> i'm tired :)
01:26:54 <shapr> me too
01:26:58 <shapr> 3:30 am here
01:27:05 <lispy> on a good note
01:27:08 <lispy> i found the ram for the server
01:27:15 <lispy> so i'll be able to buy 3 more gigs
01:27:17 <shapr> yay
01:27:23 <lispy> (looks like the board maxes at 4 gigs)
01:27:36 <lispy> but 4 gigs physical ram will be plenty
01:28:02 <shapr> I agree
01:28:36 <lispy> night
01:28:39 * shapr &
01:29:06 <araujo> morning!
01:29:09 <araujo> dons, right here!
01:41:55 <dolio> Wow, JVM implemented in Ruby.
01:42:32 <wilx> Heh, that sounds slow.
01:42:41 <dolio> :)
01:42:48 <ValarQ> they aren't supposed to be fast :P
01:46:33 <ValarQ> "This allows constant-time concatenation of results using function composition.", Haskell Hierarchical Libraries about ShowS
01:46:42 <ValarQ> how is that done in reality?
01:47:06 <dcoutts_> ValarQ, what makes you think it's different to how it's described ?
01:48:09 <ValarQ> oh, i don't think the docs are lying
01:49:00 <ValarQ> i just don't see how i should use it
01:49:07 <dcoutts_> thing . thing
01:49:22 <dcoutts_> and then apply it to "" to get a String
01:49:29 <dcoutts_> at the very end
01:49:38 <norpan> but saying it's constant time is not really truthful
01:50:03 <norpan> more like linear time
01:50:11 <norpan> instead of quadratic
01:50:48 <dcoutts_> http://darcs.haskell.org/gtk2hs/tools/hierarchyGen/TypeGen.hs
01:50:52 <lambdabot> http://tinyurl.com/z75dk
01:50:53 <dcoutts_> ValarQ, ^^ example
01:51:19 <dcoutts_> norpan, huh? the concatenation is constant time, so when you use a linear number of them ...
01:51:27 <dcoutts_> so it's perfectly truthful
01:51:52 <dons> araujo: hwn is out, and the repo is tagged, if you want to try to translate the 20061010.txt file?
01:52:00 <shapr> How do I detach a program from my terminal? I want to run this HAppS wiki but ./wiki > /devnull & complains when I try to logout.
01:52:04 <norpan> since you need to evaluate the string, it can't be less than linear in the size of the string
01:52:14 * shapr feels sleepless and clueless
01:52:26 <dcoutts_> shapr, nohup
01:52:28 <xerox> shapr: press C-z and type bg ?
01:52:39 <shapr> xerox: didn't work
01:52:41 <shapr> I'll try nohup
01:52:45 <xerox> nohup, Duncan is right.
01:52:58 <vegai> screen ./wiki if all else fails :)
01:52:59 <dcoutts_> shapr, you need to start the prog with nohup ./wiki > /devnull &
01:53:16 <xerox> By the way, good morning :)
01:53:16 <Cale> norpan: the question isn't "how much time does it take to evaluate the result?", it's "how much time does this function constribute to the computation of the result?"
01:53:53 <norpan> Cale: compared to what
01:54:13 <earthy> yaay, a new hwn
01:54:22 <shapr> nohup ./wiki > /dev/null & also does not work
01:54:24 <shapr> weird
01:54:28 <dcoutts_> norpan, by that reasoning 'id' is not constant time
01:54:41 <dcoutts_> since if I apply id to a linear data structure...
01:54:42 <earthy> shae, weren't you going to bed on the account of it being almost 4am at your location?
01:54:56 <dcoutts_> @localtime shapr
01:54:57 <lambdabot> Local time for shapr is Tue Oct 10 03:54:35 2006
01:55:00 <shapr> earthy: shhh!
01:55:11 <norpan> dcoutts_: that's not a fair comparison, id does not change the argument
01:55:16 <Cale> norpan: that is, how much time is spent evaluating calls to f
01:55:20 <norpan> change is the wrong word
01:55:22 <ValarQ> shapr: having problems letting go of the scandinavian timezone? :)
01:55:23 <Syzygy-> earthy: Come now. She still has at least 5 minutes until it's getting urgent. :P
01:55:28 <shapr> heh, yes
01:55:29 <Cale> norpan: so what about (:)
01:55:30 <Cale> ?
01:55:35 <Cale> is it linear time?
01:55:41 * ValarQ guesses shapr just forgot to change /etc/localtime when he moved
01:55:46 <shapr> :-P
01:55:53 * earthy was wondering 'bout that, given that the last location I had on you was somewhere in northern sweden... ;)
01:55:54 <dibblego> ?where lambdabot
01:55:54 <lambdabot> http://www.cse.unsw.edu.au/~dons/lambdabot.html
01:55:56 <dcoutts_> norpan, does (.) change its argument ?
01:55:57 <shapr> vegai: What's the default keycombo to bail out of screen?
01:56:10 <Syzygy-> shapr: C-a C-d
01:56:12 <shapr> ah, thanks
01:56:21 <shapr> happiness!
01:56:21 <norpan> dcoutts_: no, but the functions involved need to do some work in order to do concatenation
01:56:27 <earthy> that's not bail out, that's detach
01:56:36 <Cale> (x:xs) only takes constant time to evaluate the cons, but fully evaluating the result of the cons will take time linear in the length of xs
01:56:48 <earthy> bail out is C-a C-K (repeated)
01:56:52 <shapr> That's what I meant. Anyway, my cute wiki hack is running and I can go to bed.
01:57:11 <Syzygy-> earthy: That was how I interpreted the question. Your suggestion would kill everything in the screen, and I think shapr wants the screen to keep runing...
01:57:21 <shapr> Syzygy-: Also, I'm not a she - http://www.scannedinavian.com/hope/tag/shae
01:57:27 <Syzygy-> Oh. Ooops.
01:57:39 * Syzygy- is so used to "Shae" being an explicitly female name...
01:57:52 <shapr> It usually is, but I was named Robert when I was born...
01:57:58 <Cale> Then you have things like map f xs, where map itself contributes linear time, assuming that all the elements of the list are eventually needed, but only constant time for each element you need.
01:58:00 <shapr> Shae is short for shapr.
01:58:11 <Syzygy-> Right.
01:58:13 * shapr falls over asleep
01:58:19 <earthy> nightynight. :)
01:59:47 <xerox> Cale: what about |map ackermann xs|.
02:00:06 <Cale> xerox: all the time would be spent in ackermann, not map
02:00:21 <norpan> i suppose it depends on what you mean
02:00:23 <xerox> Ah, you were analyzing in perspective.
02:01:08 <Cale> You really kind of have to treat things this way to properly understand how long things will take :)
02:04:54 <Cale> go into ghci and try these two things:
02:05:01 <Cale> foldl (++) [] (map show [1..10000])
02:05:15 <Cale> foldl (.) id (map shows [1..10000]) ""
02:05:56 <Cale> if you have too fast a machine to see the difference, increase the size of the list some more :)
02:06:16 <ValarQ> thats quite a difference :)
02:06:59 <vegai> or better yet, hugs
02:07:18 <musasabi> morning
02:07:21 <Bobstopper> when comparing the length of a list, is the whole list parsed in haskell, or just as much as is needed to find if the comparison holds (eg length x > 1)?
02:07:23 <vegai> howdy
02:07:29 <Syzygy-> Cale: Whoa!
02:07:41 <Cale> Bobstopper: the entire spine of the list is forced
02:07:42 <Bobstopper> s/parsed/processed/
02:07:46 <Bobstopper> ok, thanks
02:07:46 <int-e> Bobstopper: all of them is processed
02:07:50 <Cale> Bobstopper: but not necessarily the elements
02:07:58 <musasabi> shapr: quick solution = screen. Slower solution, bug someone (e.g. me), to release the daemon code.
02:08:01 <ValarQ> but how do i convert  (unlines . map unwords) foo    where foo is of type [[String]]
02:08:08 <ValarQ> to ShowS
02:08:31 <int-e> > map (const ()) (repeat 1) `compare` map (const ()) []
02:08:32 <lambdabot>  GT
02:09:43 <Cale> ValarQ: just apply showString to it
02:11:28 <norpan> is the compiler allowed to optimize that you think?
02:11:35 <norpan> length xs > 1
02:11:42 <int-e> not really
02:11:46 <ValarQ> Cale: ?
02:11:52 <spectei> i just started fiddling with haskell today, and have come accross a problem .... i have a function that does: uncap  w = if elem "-uncap" opts then (map toLower w) else w
02:11:53 <Cale> ValarQ: ?
02:11:53 <int-e> because of the different behaviour for infinite lists
02:12:06 <Cale> ValarQ: showString :: String -> ShowS
02:12:16 <spectei> i'd like it to do something like: uncap  w = if elem "-uncap" opts then if isUpper w then (map toLower w) else w else w
02:12:20 <int-e> and changing bottoms to values is not generally safe.
02:12:22 <spectei> unfortunately that doesn't compile
02:12:22 <ValarQ> Cale: don't i have to have something like  unlinesS :: [ShowS] -> ShowS
02:12:37 <dcoutts_> spectei, try using gaurds
02:12:41 <int-e> norpan: how about not . null . take 1  though ...
02:12:54 <spectei> dcoutts guards ?
02:13:11 <Cale> ValarQ: your process is already linear time, you don't have to worry
02:13:14 <dibblego> spectei, they are covered in yaht
02:13:30 <Cale> you could rewrite it to do that, I suppose
02:13:45 <dcoutts_> spectei, uncap w | "-uncap" `elem` opts && isUpper w = map toLower w
02:13:53 <dcoutts_>              | otherwise = w
02:14:03 <dcoutts_> (the | bits have to line up)
02:14:12 <Cale> concat is defined in terms of foldr with (++), which means that it will be efficient
02:14:21 <Cale> foldl with (++) is what's bad
02:14:26 <spectei> dcoutts ok
02:14:38 <ValarQ> @type unlines.showString
02:14:39 <lambdabot>   Expecting a function type, but found `b'
02:14:39 <lambdabot>    Expected type: String -> [String]
02:14:50 <earthy> who do I have to annoy to improve the performance of GHC?
02:14:50 <Cale> @type showString . unlines
02:14:51 <lambdabot> [String] -> String -> String
02:15:04 <spectei> dcoutts_, compile error "Couldn't match `[Char]' against `Char' Expected type: [Char] Inferred type: Char In the second argument of `map', namely `w' In a right-hand side of function `uncap': map toLower w"
02:15:07 <dcoutts_> spectei, though there's also a type error there, what is the type of 'w' ?
02:15:26 <spectei> 'w' should be a char
02:15:30 <spectei> but it also might be a word
02:15:37 <spectei> (as i said, this is my first go)
02:15:38 <Cale> ValarQ: of course, you'd only do this if you wanted to insert that string into a bunch of ShowS stuff.
02:15:43 <dcoutts_> spectei, ok then use toLower rather than map toLower
02:15:58 <dcoutts_> spectei, if it were a [Char] then you'd use map toLower
02:16:12 <spectei> ok
02:16:17 <spectei> how would i get the first character from the word ?
02:16:23 <dcoutts_> head
02:16:24 <Cale> head
02:16:25 <spectei> (because i would need that for 'isUpper' right ?
02:16:30 <dcoutts_> exactly
02:16:36 <Cale> or pattern matching
02:17:04 <spectei> hmm
02:17:35 <Cale> > let title "" = ""; title (x:xs) = toUpper x : map toLower xs in title "hELLo!"
02:17:36 <lambdabot>  "Hello!"
02:18:26 <spectei> :)
02:18:27 <beelsebob> anyone fancy helping me with a problem trying to nicely type my program?
02:18:44 <spectei> hah, doesn't fix the problem anyway
02:18:49 <earthy> time ghc --make Main -o Main
02:18:55 <earthy> real    3m1.871s
02:18:55 <earthy> user    1m43.782s
02:18:55 <earthy> sys     0m10.311s
02:19:06 <earthy> it compiled 3 small files for chrissakes!
02:19:29 <Cale> spectei: is opts in scope?
02:19:37 <spectei> Cale, yeah, its not a compile problem
02:19:40 <spectei> thats sorted
02:20:00 <spectei> basically the unicode is screwy somewhere
02:20:13 <spectei> if you're interested i can point you at the source and my dad
02:20:15 <spectei> *data
02:21:37 <Cale> hmm :)
02:21:56 <Cale> I should probably sleep, it's 5am :)
02:22:16 <spectei> hah ok man :)
02:22:26 <xerox> Goodnight Cale.
02:22:28 <Cale> (normally I'd have a look though, you might want to post them somewhere for people to see)
02:22:31 <Cale> 'night all
02:22:39 <earthy> 'night cale
02:22:45 <xerox> @paste
02:22:45 <lambdabot> http://paste.lisp.org/new/haskell
02:23:00 <spectei> http://www.cs.chalmers.se/~markus/extract/
02:23:02 <lambdabot> Title: The Extraction Tool
02:26:23 <dibblego> I had the problem the other day, but forget what I did to fix it: trying to build lambdabot gives *** Exception: Line 22: Unknown field 'hs-source-dirs'
02:27:02 <musasabi> dibblego: upgrade Cabal
02:27:37 <dibblego> yep, someone said that too, but that wasn't it
02:33:10 <dibblego> is there a deb package for cabal?
02:34:37 <dibblego> found it
02:45:03 <lisppaste2> skew annotated #27710 with "way too squished" at http://paste.lisp.org/display/27710#3
02:49:26 <skew> ValarQ: as to your earlier question, a big part of the reason Haskell makes for smaller code is that it's shorter to make a function for something repeated (at least) three times if the function body is at least twice as long as the function name
02:54:51 <skew> and then the first round brings more code down to a size you can fit on your screen and in your head, so you can start seeing and reifying higher-level abstractions, and keep folding down the code.
02:56:06 <araujo> dons, yeah , already translated
02:56:35 <araujo> dons, right now i am heading to univ (bit hurry) , i will push when i get back
02:56:56 <araujo> so i can re-check better
02:57:19 <dons> great work!
02:57:22 <dons> araujo++
02:57:25 <araujo> dons, :-)
02:57:41 <araujo> dons, it should work just fine with darcs add, send .. right?
02:57:56 <dons> i think so, yes. darcs add ; darcs record ; darcs send
02:58:03 <dons> assuming you have email set up on your box
02:58:11 <araujo> Cool
02:59:00 <skew> Like Chebyshev approximation, over-abstracting your code and backing off a few steps gives nice results.
02:59:11 <araujo> ok, i am off, will do that dons !
02:59:18 <dons> that's a nice explanation, skew
03:02:40 <dibblego> I wish I knew why lambdabot won't stay connected from home
03:02:56 <dibblego> might put a relay in between and figure it out
03:23:16 <dibblego> dons, I have a trace of the traffic between lambdabot and the IRC server when it pings out - I can't see anything interesting, but do you want it anyway?
03:27:57 <dons> dibblego: sure
03:28:09 <dibblego> I'll email the two files (traffic to/from)
03:28:18 <dons> cheerrs
03:29:50 <dibblego> what's your email? not easy to find :)
03:30:03 <dibblego> ah found it
03:30:39 * gds wonders if dons at haskell dot org would get there ;)
03:32:42 <dons> gds, no unfortunately. dons at cvs.haskell.org might though (it used to anyway). my real address is on my webpage though
03:33:37 <musasabi> Is the "d" in the following a safe place to unsafeCoerce#?
03:33:46 <musasabi> class Dep a b | a -> b
03:33:46 <musasabi> data D a where D :: Dep a b => b -> D a
03:33:46 <musasabi> d :: Dep a b => D a -> b
03:33:46 <musasabi> d (D b) = unsafeCoerce# b
03:34:48 <therp> is there some that relates to haskell like slime does to common lisp?
03:35:12 <skew> musasabi: if you have instance Dep a a
03:35:54 <musasabi> skew: note the fundep.
03:36:19 <int-e> musasabi: why do you need the unsafeCoerce# at all?
03:36:22 <musasabi> skew: the instance will be of the form "Dep Foo Bar"
03:36:31 <musasabi> int-e: because GHC type checker does not love me.
03:36:33 <skew> then you will be casting a Foo to a Bar
03:36:47 <skew> the fundep doesn't say a and b have to be related in any sensible way
03:37:14 <Lemmih> What would be a good name for a sourceforge-like site for Haskell?
03:37:15 <musasabi> skew: d :: Dep Foo Bar -> D Foo -> Bar; and inside D :: Dep Foo Bar -> Bar -> D Foo. Thus the D will contain a Bar.
03:37:21 <dons> i'm not sure you'll need a coerce here. 5 mins on the list, and oleg or someone will submit your soln :)
03:37:27 <dons> Lemmih: hmm!
03:37:54 <Lemmih> dons: hmm.org is taken.
03:37:54 <dons> lambdaforge? :)
03:38:01 <skew> musasabi: ah, that way it should work
03:38:01 <Binkley> I was thinking lazyforge
03:38:30 <dons> writer.monad.org ?
03:38:37 * dons wonders if monad.org is taken
03:38:53 <Binkley> the domain is registered but there's nothing there but a placeholder
03:38:59 <dons> yep
03:39:59 <dons> hackage.org?
03:40:16 <dons> ?fresh will know the answer
03:40:17 <lambdabot> Habb
03:40:20 <Lemmih> Well, hackage is something different.
03:40:24 <skew> musasabi: see "A Framework for Extended Algebraic Data Types" http://www.comp.nus.edu.sg/~sulzmann/publications/tr-eadt.ps.gz
03:40:26 <dons> ?fresh
03:40:28 <lambdabot> http://tinyurl.com/hqpfc
03:40:28 <lambdabot> Habc
03:40:37 <skew> musasabi: it should work, and there are plans for how to fix it
03:40:55 <dons> what you up to Lemmih ?
03:41:58 <Lemmih> I've been thinking about the Right Way to write such a thing.
03:42:28 <Lemmih> (SyntaxNinja and I disagree on some of the key points, I believe)
03:42:52 <musasabi> skew: yes, that represents an extension how to do it. But need a solution that should work with even GHC 6.4.2.
03:44:23 <musasabi> I think System Fc can do it.
03:44:33 <skew> perhaps an explicit equality term would help
03:45:21 <Lemmih> dons: And a sourceforge-like system would complement HackageDB and cabal-install nicely.
03:47:43 <MarcWeber> dons: Had you time to try my scripts? I haven't received any feedback yet. Either there is no interest or people do have problems installing it.. So I wonder wether I've made something wrong. If so I want to fix it.
03:48:15 <skew> musasabi: unsafeCoerce# can do it too.
03:48:31 <skew> and for once, you are actually in a position to discharge the proof obligation
03:49:15 <dons> MarcWeber: ah ok. some feedback: needs more install instructions/simpler :)
03:49:26 <dons> i saw lots of interesting links, but maybe some little demos?
03:49:33 <dons> or explanations of what each thing does?
03:49:41 <dons> or maybe a darcs repo to pull from (?)
03:50:15 <Igloo> Lemmih: Is hackage working now then?
03:50:43 <dons> I think maybe some hackage guru should write a little tut/demo on uploading and downloading a package...
03:50:58 <dons> then we can maybe get that distributed around and get some packages up there?
03:51:25 <earthy> that'd be good
03:51:30 <dons> mmm! ANNOUNCE: STM invariants and exceptions
03:51:41 <dons> 1. The main change is to add support for dynamically checked data
03:51:41 <dons> invariants
03:51:42 <Lemmih> Igloo: Well, hackagedb is working.
03:52:01 <Igloo> Lemmih: So what's not working?
03:52:23 <Lemmih> Igloo: I don't know. What's not working?
03:52:34 <dons> Lemmih: I'm basically waiting for an "It's done and working now. Upload your packages with: this command here; download them with: this command"
03:52:44 <dons> message. is that the state we're in now?
03:52:53 <Igloo> Oh, I assumed you meant whatever comprises hackage and isn't hackagedb wasn't working
03:53:14 <Igloo> So yeah, like dons says, can I upload my packages and have them appear on the website now?
03:53:25 <Lemmih> dons: Uploading is done via a perl script on darcs.haskell.org /-:
03:53:42 <dons> ah ok. see I didn't know that. so what needs to be done then?
03:53:45 <dons> what's the plan?
03:53:59 <Lemmih> xerox: What's the plan?
03:54:35 * gds pulls the latest lambdabot patches, fixes his state conflicts, and is surprised by:
03:54:46 <gds> Modules.hs:4:23: parse error on input `.'
03:54:51 <Lemmih> I personally believe we need a non-trivial sourceforce-like system to allow anonymous additions.
03:54:53 <gds> $ wc Modules.hs
03:54:53 <gds>   1  49 296 Modules.hs
03:55:13 <dons> gds, its a simple file. check it manually
03:55:17 <Igloo> Lemmih: Why anonymous?
03:55:22 <gds> Also, Modules.hs contains no instances of the character '.'
03:55:39 <dons> gds, checking.
03:55:40 <musasabi> unsafeCoerce# route seems to work nicely.
03:55:42 <int-e> Modules.hs gets preprocessed somehow.
03:55:43 <gds> Cheers :)
03:55:47 <musasabi> with lots of explicit type signatures.
03:55:53 <dons> musasabi: heh
03:56:07 <Lemmih> Igloo: Well, not anonymous but for people without ssh access to darcs.haskell.org.
03:56:25 <dons> yes, we do need that.
03:56:36 <Igloo> Ah, yes. But we don't need a SF-like thing to allow that
03:56:48 <dons> wikis seem to manage without too much trouble
03:57:00 <Igloo> We just need a CGI form or anon-ftp upload dir or something
03:57:15 <Lemmih> Like in my first version of hackagedb, yes.
03:57:30 <Igloo> My impression as an outsider is wikis cause quite a lot of trouble  :-)
03:58:02 <dons> heh
03:58:33 <skew> I'd suggest looking at PLaneT
03:59:48 <musasabi> dcoutts_: what is the status of the ByteString serialization layer?
03:59:56 <Lemmih> Anyhow, I want darcs hosting, auto-generated haddock documentation, project pages showing `darcs changes` and so on.
04:00:19 <yip> Igloo: hi, where is that article of yours about template haskell and custom optimizations?
04:01:41 <Igloo> Is http://web.comlab.ox.ac.uk/oucl/work/ian.lynagh/papers/Unrolling_and_Simplifying_Expressions_with_Template_Haskell.ps what you want?
04:01:43 <dons> Lemmih: yes, that sounds good.
04:01:44 <lambdabot> http://tinyurl.com/jknt4
04:01:54 <yip> Igel: yeah, but wasn't there an html page also?
04:02:15 <dons> yip: there's also seafood's article on optimisations with TH (both should be available from haskell.org/th iirc)
04:02:28 <Igloo> Lemmih: That would be cool, but the ability to upload packages is a more important first step IMO
04:02:41 <Igel> yip: what where when why?
04:02:43 * Igel is afk
04:03:06 <yip> sorry Ige1
04:03:10 <dons> wow. malcolm super commits to the nhc list
04:03:21 <yip> Igloo: didn't you also have an html page, with pictures of a mandelbrot?
04:04:04 <dons> mandelbrot? maybe that was seafood's TH stuff?
04:04:13 <dons> the pan/panic image stuff?
04:04:23 <Lemmih> Igloo: Someone else can do that.
04:04:26 <Igloo> http://web.comlab.ox.ac.uk/oucl/work/ian.lynagh/Fraskell/
04:04:28 <lambdabot> Title: Fraskell, http://tinyurl.com/nffcu
04:04:32 <Igloo> Lemmih: Heh, OK  :-)
04:05:05 <Igloo> yip: It's almost certainly bitrotted, BTW
04:05:21 <yip> yeah, Fraskell!
04:05:23 <yip> thanks!
04:05:32 <dons> yip: not this stuff, http://www.cse.unsw.edu.au/~sseefried/pantheon_gallery.html?
04:05:34 <lambdabot> Title: Sean Seefried - PanTHeon Gallery, http://tinyurl.com/kjly2
04:05:40 <dons> (that's TH + mandelbrot too :}
04:05:52 <dons> you both did mandelbrots.
04:05:56 <dons> Igloo: hehe didn't know t
04:06:49 <yip> dons: no, i was looking for the one that uses template haskell to do domain specific optimizations
04:07:02 <dons> yeah, they both do :)
04:07:24 <dons> that's the point. ;) seafood and Igloo apparently both used TH to do mandelbrot set dsl optimisations
04:08:55 <dons> (seafood's a bit different I see. he implemented Pan in Haskell with TH doing Pan-specific optimisations)
04:08:56 <Igloo> Mine isn't for a DSL (although I did also make a pan-a-like)
04:09:11 <dons> ah right
04:10:02 * dons wades through 300 malcolm-hat-patches
04:10:50 <dons> gds, all looks good here.
04:12:18 <yip> Igloo: but it was an application specific optimization, right?
04:13:19 <Igloo> I don't think so. It was a combination of constant folding and an "unroll this function based on the nth argument" function, IIRC
04:13:40 <yip> Igloo: so why don't they add this optimization directly into ghc?
04:14:01 <Igloo> To do it domain specifically you'd actually write the MB function with TH directly
04:14:10 <gds> dons: then I'll play for a bit, I guess :)
04:14:29 <Igloo> There's no need to have it in GHC, it's a standalone module
04:15:27 <yip> Igloo: yes, but if it were in GHC and automatically applied when necessary, all applications would benefit, instead of them having to specifically use the module
04:15:38 <earthy> !sigh
04:15:48 <Igloo> "automatically applied when necessary" is the hard bit...
04:15:56 <earthy> why aren't there big warning signs around Cabal 1.0?
04:17:12 <earthy> the 'Do not use, very incomplete' warning signs
04:17:14 <lambdabot> Warning: don't use Cabal 1.0. Use a newer release
04:17:35 <earthy> why, thanks! :)
04:18:08 <earthy> now go and edit http://www.haskell.org/cabal/download.html and reflect that warning there! :)
04:18:09 <lambdabot> Title: The Haskell Cabal
04:18:30 <earthy> but anyway, Dazzle is now cabalized. yaaaay. :)
04:18:37 <dons> yay!
04:18:40 <dons> earthy++
04:19:22 <earthy> (not completely, mind you... there's still some work to do to get the bindings to the external library in the right place...)
04:19:39 <earthy> but the dazzle makefile didn't do that either
04:20:04 <earthy>  wc -l Dazzle.cabal Makefile
04:20:04 <earthy>       40 Dazzle.cabal
04:20:04 <earthy>      778 Makefile
04:20:17 * earthy smiles
04:22:56 <dcoutts_> hia dons, my talk to the group (using your slides) went ok
04:23:21 <dcoutts_> dons, I edited them just a bit: http://haskell.org/~duncan/bytestring/intro-talk.ps
04:23:23 <lambdabot> http://tinyurl.com/f6ceg
04:24:33 <dcoutts_> earthy, I'll do that later today when I announce Cabal-1.1.6
04:24:56 <earthy> that'd be useful. :)
04:25:47 <dcoutts_> musasabi, I've got some initial code for lazy ByteString serialisation. It's not complate or perf tested yet. You're welcome to have a play though if you like.
04:26:33 <dcoutts_> musasabi, I can make it available if you want to look (though it'll take me a while to retreive it)
04:26:39 <earthy> now to get GHC on our buildfarm. :P
04:29:22 <dons> dcoutts_: great.
04:30:46 <Patterner> I just installed Cabal 1.1.6 with ghc-6.5.20061001 under gentoo.
04:31:10 <dcoutts_> Patterner, -> #gentoo-haskell
04:31:39 <dcoutts_> Igloo, so what's going on with the 6.6 release? Will it be today or a rebuild and tomorrow ?
04:31:40 <Patterner> i gave up on gentoo-* channels.
04:31:52 <dcoutts_> heh
04:32:07 <dcoutts_> well the haskell one is better :-)
04:32:45 <dcoutts_> Patterner, I just usually prefer not to flood the main #haskell channel with our debugging
04:32:56 <Igloo> Tomorrow, all going well
04:33:00 <dcoutts_> cool
04:33:08 <Patterner> well, all i said was "it works"... no need for debugging :)
04:33:32 <dcoutts_> Patterner, oh, sorry, I misunderstood! I thought you were about to tell us about a bug :-)
04:34:01 <dcoutts_> which I was going to help fix, glad it worked ok for you :-)
04:34:14 <Patterner> bugs belong to bugs.gentoo.org...
04:34:29 <dcoutts_> well, not for the packages in our overlay
04:34:31 <kosmikus> not bugs regarding the gentoo-haskell overlay
04:35:49 <Patterner> yeah right, and not for bugs regarding self-made ebuilds...
04:39:58 <Igloo> Is Malcolm darcsing hat?
04:40:13 <Igloo> Ah, n/m, found the explanation mail
04:42:22 <dons> Igloo: oh? what's the expln?
04:42:31 <dons> i might have missed that in the flood :)
04:45:33 <Igloo> http://www.haskell.org/pipermail/cvs-nhc98/2006-October/005474.html
04:45:35 <lambdabot> Title: [cvs-nhc98] mega-apologies!, http://tinyurl.com/fm78b
04:46:10 <dcoutts_> heh
04:46:51 <dons> hehe
04:47:59 <dons> heh, so that was the back log of hat patches. nasty
04:48:14 <dons> and here I was thinking malcolm was in a personal hackathon quest
04:48:23 <Igloo> :-)
04:48:35 <roconnor> @seen SamB
04:48:35 <lambdabot> SamB is in #perl6 and #haskell. I last heard SamB speak 8h 8m 56s ago.
04:48:46 <SamB_XP> roconnor: yes?
04:54:16 <roconnor> SamB, So, the problem with marking shift as inline (as I assume your patch did) is that you haven't marked rotate as inlined, which may or maynot also be a problem...
04:54:32 <dcoutts_> can someone double check for me what the Cabal trac anonymous login is:
04:54:33 <dcoutts_> http://hackage.haskell.org/trac/hackage/wiki
04:54:34 <roconnor> What we really need to do is find out why shift isn't being inlined.
04:54:35 <lambdabot> Title: Hackage - Trac
04:54:43 <dcoutts_> is it "haskell" or "haskell'" ?
04:54:57 <SamB_XP> roconnor: people better not be expecting that to be efficient...
04:54:58 <dcoutts_> I can't check because it already recognises me
04:55:26 <roconnor> SamB: people better not expect rotate to be effictent?
04:55:34 <SamB_XP> yeah
04:56:00 <SamB_XP> well, maybe you could inline it...
04:56:15 <roconnor> I expect (x rotateR 2) --> (x shiftL 30) .|. (x shiftR 2)
04:56:21 <SamB_XP> hmm...
04:56:24 <roconnor> I don't expect a function call.
04:56:34 <SamB_XP> okay, you have a point there...
04:56:36 <roconnor> (again only when rotating by a constant)
04:57:15 <roconnor> SamB_XP: my original problem is from the UM implemenation, but now I am thinking about my SHA2 implemenation.
04:57:16 <dcoutts_> you need some constant propagation analysis thing
04:57:28 <roconnor> it does a lot of rotating and a little shifting.
04:57:28 <SamB_XP> dcoutts: mmmm
04:57:42 <roconnor> rotating by constants
04:57:51 <dcoutts_> SamB_XP, and use that to guide inlining decisions
04:57:55 <roconnor> anyhow, I'm reading SPJ's paper on inlining.
04:58:04 <Una^_> Guys, I just started learning haskell and I am getting undefined variable toUpper, I notice that im in Hugs.Base... so Prelude is not loaded?
04:58:16 <dcoutts_> Una^_, import Char
04:58:18 <roconnor> @hoogle toUpper
04:58:18 <lambdabot> Char.toUpper :: Char -> Char
04:58:24 <musasabi> dcoutts_: I want to play with using it with HAppS at some point, but there is no hurry at the moment, since there are many more urgent thigns to do.
04:58:31 <roconnor> yep, the toUpper function is in the Char module.
04:58:35 <dcoutts_> musasabi, ok
04:58:42 <SamB_XP> or Data.Char, these days...
04:58:44 <Una^_> dcoutts_: Thanks.
04:58:46 <dcoutts_> musasabi, what would your use case be btw ?
05:07:46 <musasabi> dcoutts_: binary serialization/deserialization without IO-monad. Just looking for a good way to package with the normal HAppS distribution.
05:08:05 <musasabi> dcoutts_: and it is moving slowly in the direction of lazy bytestrings.
05:08:39 <dcoutts_> musasabi, ok, cool. I was vaugely wondering if you had and specific examples of stuff you'd want to serialise.
05:08:55 <dcoutts_> eg would it be Haskell data types or something with a prescribed binary format
05:11:28 <musasabi> Haskell data types.
05:12:14 <musasabi> @hoogle Name -> Q Type
05:12:15 <lambdabot> No matches, try a more general search
05:28:50 <dcoutts_> earthy, mind seeing if I've missed anything:
05:28:51 <dcoutts_> http://www.haskell.org/cabal/
05:28:52 <lambdabot> Title: The Haskell Cabal
05:35:07 <gds> dons: The error was that I had some extraneous whitespace in my Modules.hs (a trailing " \n"). So BotPP ran instalify on the "\n" string...
05:41:38 <SamB> what the hell is a "family instance"?
05:45:06 <roconnor> what context?
05:49:31 <jmmv> hi
05:50:16 <roconnor> hi
05:52:21 <SamB> roconnor: ./darcs-all pull
05:52:36 <SamB> in ghc tree
05:52:57 <dolio> SamB: Something to do with associated types, then?
05:53:06 <SamB> dolio: I suppose...
05:53:19 <dolio> http://cvs.haskell.org/trac/ghc/wiki/TypeFunctions
05:53:22 <lambdabot> Title: TypeFunctions - GHC - Trac, http://tinyurl.com/psxjn
05:53:47 <dolio> Although I don't see any "family instance" on there.
05:53:47 <SamB> huh, I was just going to look for AT stuff on that wiki ;-)
05:54:41 <SamB> fundeps implemented on top of ATs?
05:54:44 <SamB> this I gotta see...
05:55:04 <dolio> Yeah, I thought fundeps were slightly more general.
05:55:23 <dolio> But perhaps I'm misremembering.
05:55:42 <SamB> I think they are, in general
05:56:07 <dolio> The common cases you can do with both, though.
05:56:27 <dolio> Or something like that.
05:56:29 <SamB> yes
05:59:11 <musasabi> Any ideas how to debug a concurrency problem that occurs in ghci but not code compiled (either with -threaded or without -threaded) ?
06:01:56 <SamB> what sort of problem?
06:05:33 <yip> ok so i need to design a c function whose haskell equivilent would be getFromFoo :: Foo -> IO [(String, [(String, String)])]
06:05:35 <musasabi> SamB: a thread seems to block until hitting ^C to terminate main.
06:06:02 <SamB> while the readline prompt is showing?
06:06:43 <musasabi> when running main it blocks, but when hitting ^C and getting back to the readline prompt pending actions run.
06:06:54 <SamB> huh
06:07:12 <SamB> what is main doing during all this?
06:08:23 <musasabi> just doing a loop with getChar. (it was doing that earlier and it worked, just changed things outside main)
06:09:14 <SamB> how mysterious!
06:09:41 <SamB> I don't suppose you know how GHCi was built?
06:12:27 <musasabi> standard 6.4.2.
06:12:43 * musasabi tries sprinkling tracing calls and see where it is hanging.
06:13:12 <yip> Char type is 32 bit, right?
06:13:20 <SamB> usually!
06:13:24 <SamB> it might be 31 sometimes
06:13:59 <musasabi> Char is able to hold a unicode codepoint.
06:14:17 <yip> so what happens when i convert a [Char] to a char* in order to call a c function?
06:14:39 <xerox> musasabi: then what is that stops one using UTF-8 in Haskell?
06:15:50 <roconnor> xerox: library support?
06:16:14 <musasabi> xerox: people do use unicode with Haskell.
06:16:23 <musasabi> (personally I prefer UTF16)
06:16:41 <Syzygy-> @hoogle showReal
06:16:42 <lambdabot> No matches found
06:17:02 <yip> what happens for values of Char > 255 when they are converted into a C char value?
06:17:14 <dcoutts_> the high bits are ignored
06:17:17 <Syzygy-> yip: Truncation iirc
06:17:27 <yip> that doesn't sound good
06:17:28 <Syzygy-> Which is equivalent (for unsigned stuff at least) to value % 256
06:17:46 <musasabi> yip: well C char is usually 8 bits.
06:18:03 <musasabi> and using blindly UTF8 would only cause problems
06:18:08 <yip> right, but if you truncate then you might end up with a 0, which would indicate the end of the string in c
06:19:28 <musasabi> yip: the solution is of course not to pass things which might be unsafe to C functions excepting char*
06:19:29 <Syzygy-> yip: What, precisely, was your question? If you're asking for the behaviour of char foo = (char) blah; then as long as blah is of numeric value, you'll get truncation and possibly compiler warnings
06:20:56 <yip> musasabi: so i should map my strings through a function that converts all chars to be < 256 before passing them to c?
06:22:05 <yip> actually my real question is, i have a c++ library that has this clunky API for getting a value that is the equivilent haskell type [String, [(String, String)])], and i'm wondering what the best C api is to wrap this c++ function so i can make a haskell binding
06:22:31 <dcoutts_> yip, does the C(++) api expect ASCII or UTF8 or what ?
06:23:04 <dolio> You could possibly call the mangled C++ function from haskell directly, too.
06:23:18 <dolio> There's a wiki page somewhere about doing that sort of thing.
06:23:32 <yip> dcoutts: no, ascii/utf8 isn't my problem here, i was just curious
06:24:03 <roconnor> I don't suppose there is a way to display the information in a .hi file.
06:24:17 <yip> dolio: problem is, it's not even a single c++ function. you are supposed to first call a c++ function for getting an iterator, then you are supposed to call various functions for iterating over it
06:24:35 <dcoutts_> roconnor, ghc --show-iface I think
06:24:36 <xerox> roconnor: IIRC some --ddump-option.
06:24:39 <xerox> Right.
06:24:42 <dolio> Ah, yeah. That'd probably be hairy.
06:25:02 <roconnor> cool
06:25:33 <yip> dolio: yeah, so i need to have a single c function that goes through this procedure and puts all the data in a big struct, which can then be converted to a haskell [(String, [(String, String)])]
06:25:34 <SamB> roconnor: whatcha up to?
06:26:26 <xerox> @arr
06:26:26 <lambdabot> Smartly me lass
06:26:28 <xerox> @arr
06:26:28 <lambdabot> Ahoy mateys
06:26:30 <xerox> @arr
06:26:30 <lambdabot> Har de har har!
06:26:34 <roconnor> SamB: I'm inspecting GHC/Word.hi
06:26:51 <xerox> I've finally found the name of a theorem, and it's so similar to "keelhaul's formula" that I keep calling it that way.
06:26:55 <roconnor> SamB: small functions need to exposed to be inlined across modules.
06:27:09 <SamB> roconnor: yes, they are
06:27:31 <roconnor> shift3 :: Word32 -> GHC.Base.Int -> Word32
06:28:00 <SamB> the needed function is exposed even in my installed GHC
06:28:49 <Syzygy-> xerox: What is the theorem "normally" called?
06:28:53 <roconnor> $wshift4 :: GHC.Prim.Word# -> GHC.Prim.Int# -> GHC.Prim.Word#
06:29:06 <roconnor> So this is a good start.
06:29:06 <SamB> roconnor: thats the one
06:29:06 <xerox> Syzygy-: trying to find it again...
06:29:14 <SamB> that is the one that wouldn't inline
06:30:28 <roconnor> oooh, I see that shiftRL# has already been inlined into it.
06:30:36 <xerox> Syzygy-: http://en.wikipedia.org/wiki/Faulhaber%27s_formula
06:30:38 <lambdabot> http://tinyurl.com/nk929
06:30:42 <Syzygy-> Whoa. Seems "emerge darcs" takes longer than "emerge jre"...
06:31:16 <xerox> Syzygy-: Yuck. It's not quite similar, fear the lambdabot.
06:31:24 <musasabi> yip: btw UTF8 does not solve the problem since UTF8 encodes "\0" as 0.
06:32:09 <Syzygy-> xerox: Ah. Neat.
06:32:44 <xerox> Yeah.  I was impressed when the professor talked about it, but he couldn't give a proof in the iven time; he had to finish with other things.
06:32:47 * SamB wonders what the best way to guide GHC into this inlining is
06:33:42 <roconnor> SamB: ?
06:33:46 <roconnor> what are you wondering?
06:33:49 <Itkovian> rufus been around today?
06:34:25 <musasabi> A way to list all threads and in which function and state they are would be nify for debugging.
06:34:46 <musasabi> *nifty
06:35:56 <pejo> roconner, are you planning to try to fix the inliner for your problem?
06:36:01 <roconnor> we should check to see if $wrotate4 is inlined.
06:36:17 <SamB> well, to convince it to inline those, we'd need it to be able to guesstimate how much work it can save due to knowing the values of arguments
06:36:34 <roconnor> pejo: that's the idea.  But the first step is to understand why the inliner doesn't inline it.  Then with that knowledge, see how to proceed.
06:36:42 <Bobstopper> musasabi: I got wine + ghc working
06:37:03 <SamB> roconnor: the reason is:
06:37:12 <pejo> roconner, please holler if  you find something useful to read about inlining anywhere.
06:37:15 <SamB>                                guidance IF_ARGS 2 [0 0] 17 0
06:37:52 <roconnor> pejo: http://research.microsoft.com/%7Esimonpj/Papers/inlining/index.htm
06:37:54 <lambdabot> Title: Simon Peyton Jones: papers, http://tinyurl.com/paj45
06:38:12 <SamB> pejo: how about callSiteInline in compiler/coreSyn/CoreUnfold.hs ?
06:38:22 <SamB> er, sorry, .lhs
06:38:41 <pejo> SamB, isn't that just the decisions ghc takes?
06:38:52 <SamB> pejo: sorry?
06:39:10 <SamB> callSiteInline is how GHC decides whether or not to inline something
06:39:13 <pejo> roconner, nods, read that one.
06:39:14 <musasabi> Bobstopper: good :-) Details somewhere?
06:39:30 <pejo> SamB, I'm interested in inlining in general, not just how GHC does it.
06:40:23 <SamB> oh
06:40:24 <SamB> ;-)
06:40:49 <Bobstopper> musasabi: http://www.haskell.org/haskellwiki/GHC_under_WINE . The problem is with wine's builtin msvcrt.dll. Replace it with a native version and the problem's solvered.
06:40:53 <lambdabot> Title: GHC under WINE - HaskellWiki, http://tinyurl.com/gw6va
06:41:00 <pejo> Does lambdabot cut URL's when they are too long? The title of the inlining page isn't "Simon Peyton Jones: Papers".
06:41:40 <pejo> Truncate I mean, I have no idea why I used the word 'cut' there.
06:42:53 <SamB> roconnor: I almost want to have 2^n table of sizes
06:42:55 <musasabi> Bobstopper: thanks.
06:43:07 <Igloo> pejo: Yes it is
06:43:16 <SamB> but that would be exponential in arg count, clearly...
06:45:07 <pejo> Igloo, doh, sorry.
06:47:22 <zzctb> hi, whats the easiest way given an element to delete all its occurrences in a given list?
06:48:01 <aleator> filter?
06:48:12 <int-e> @type delete
06:48:13 <lambdabot> forall a. (Eq a) => a -> [a] -> [a]
06:48:47 <int-e> hmm, no. filter
06:48:53 <int-e> > delete 2 [2,2]
06:48:54 <lambdabot>  [2]
06:49:00 <int-e> > filter (2 /=) [2,2]
06:49:02 <lambdabot>  []
06:49:12 <zzctb> thanks a lot
06:57:28 <Una^_> @hoogle fromInt
06:57:28 <lambdabot> Prelude.fromInteger :: Num a => Integer -> a
06:57:29 <lambdabot> Prelude.fromIntegral :: (Integral a, Num b) => a -> b
07:41:09 <earthy> @pl \y -> x `rem` y == 0
07:41:09 <lambdabot> (0 ==) . (x `rem`)
07:41:15 <earthy> !autolart
07:41:49 <dylan> the point-free version is a lot easier to read.
07:42:02 <earthy> not to me it isn't :)
07:42:49 <dylan> @type (0 ==) . (x `rem`)
07:42:50 <lambdabot> Not in scope: `x'
07:43:00 <dylan> @type \x -> (0 ==) . (x `rem`)
07:43:01 <lambdabot> forall a. (Integral a) => a -> a -> Bool
07:43:18 <dylan> @type \x -> (0 ==) . (rem x)
07:43:20 <lambdabot> forall a. (Integral a) => a -> a -> Bool
07:44:39 <earthy> the volume of a pizza with radius z and height a is  pi * z * z * a...
07:45:50 <xerox> hahaha
07:46:04 <x3m> OLD
07:46:14 <xerox> @remember earthy <earthy> the volume of a pizza with radius z and height a is  pi * z * z * a...
07:46:32 <swiert> zzctb: filtermake
07:46:37 <swiert> oops
07:47:55 <xerox> I find the points-free version easy to read.
07:48:18 * earthy finds the lambda-version easier to devise
07:48:43 <earthy> yes, the points-free version is easy enough to read
08:05:46 <CosmicRay> hrmm, why does hugs not like this unless I give it -98:
08:05:50 <CosmicRay> instance ProgressTypes (MVar ProgressRecord) where
08:05:56 <CosmicRay> how can I do that in a haskell98-compliant way?
08:15:10 <sjanssen> CosmicRay: Either wrap (MVar ProgressRecord) in a newtype, or somehow write an instance for MVar a
08:24:27 <CosmicRay> ah.
08:24:49 <sjanssen> the restriction is kind of obscure
08:25:11 <sjanssen> something about instances can only have type variables applied to type constructors
08:27:32 <hygge> hello
08:27:52 <hygge> what does { }'s means in data type declarations?
08:28:33 <sjanssen> hygge: it means that it's a record declaration
08:28:50 <hygge> hmm
08:28:52 <hygge> okey
08:28:55 <hygge> i better google that
08:30:22 <dmhouse> Here's a nice POTD: using all of the numbers 8, 8, 3, and 3, and the operations addition, subtraction, products and quotients (and parentheses), make the number 24.
08:30:45 <dmhouse> The Haskell brute-force solution is a nice exercise in the list monad.
08:30:54 <dmhouse> (Of course, that's no solution for solving it yourself ;))
08:31:55 <hygge> a potd?
08:31:56 <ValarQ> POTD?
08:32:00 <hygge> problem of the day?
08:32:14 <hygge> i already got plenyy, thx anyways dmhouse
08:32:17 <hygge> plenty*
08:38:34 <cjeris> dmhouse: in the twenty-four game, is division truncating, rounding, or exact?
08:39:19 <dcoutts_> heh, apparently there's a channel on freenode which - if you join it - will get you automatically banned from freenode
08:39:59 <psi> weird.
08:40:03 <ibid> yes, there are
08:40:07 <dcoutts_> perhaps it's a bot trap
08:40:10 <ibid> i think several
08:40:15 <ibid> they are bot traps, yes
08:40:22 <Igel> cjeris, dmhouse: if it's rounded, there is (8*8 / 3) + 3 = 24.333333...
08:40:26 <hygge> hah
08:41:36 <roconnor> 2^n table of sizes?
08:41:51 <roconnor> SamB, 2^n table of sizes?
08:43:41 <ValarQ> problematic to use parantheses in the listmonad, it's probably easier to think of the problem in rpn instead of infix
08:47:50 <glguy> I didn't see any use of + - * / and permutation of [8,8,3,3] that returned 24...
08:47:54 <glguy> wonder what I did wrong
08:48:04 <dozer> is Data.Graph the up-to-date haskell graph API, or has it been superceeded?
08:48:33 <hygge> can a constructor have spaces in it ? like data room = Bath Room | Kitchen ?
08:48:46 <dcoutts_> no
08:49:06 <glguy> also, it you must use: data Room
08:49:06 <dcoutts_> that'd mean a Bath with a field called Room
08:49:15 <glguy> a field of TYPE Room
08:49:24 <hygge> hmm okej
08:49:38 <hygge> ah
08:49:42 <hygge> i se
08:49:43 <hygge> see
08:50:55 <dmhouse> glguy: probably forgot brackets.
08:51:19 <yip> @seen musasabi
08:51:20 <lambdabot> musasabi is in #ghc, #haskell-overflow, #haskell-blah and #haskell. I last heard musasabi speak 2h 8m 24s ago.
08:51:21 <glguy> dmhouse: I used an RPN stack, brackets don't exist
08:51:50 <glguy> ?paste
08:51:51 <lambdabot> http://paste.lisp.org/new/haskell
08:52:16 <lisppaste2> glguy pasted "quick and dirty and wrong" at http://paste.lisp.org/display/27720
08:52:27 <dmhouse> glguy: clever way of doing things. My initial approach was equivalent to an RPN stack without the 'R', I guess.
08:52:47 <dmhouse> It was just permuting the operations on top of the four permutations of starting numbers
08:52:54 <glguy> yeah
08:54:21 <lisppaste2> dmhouse pasted "3388 Solution" at http://paste.lisp.org/display/27721
08:54:26 <dmhouse> That's my solution.
08:54:45 <dmhouse> Another thing to be wary of is rounding errors. find (==24) doesn't tend to work because of that.
08:54:54 <dmhouse> Try find (\z -> z > 23 && z < 25)
08:55:40 <cjeris> dmhouse: so division is supposed to be rounding, not exact?
08:55:42 <glguy> dmhouse: 24.3333333 comes up
08:55:50 <dmhouse> glguy: ignore that.
08:55:54 <glguy> dmhouse: did you intend for me to use "div" and not (/)?
08:55:56 <dmhouse> cjeris: no, it's meant to be exact.
08:56:29 <dmhouse> But GHC makes some precision errors so that the correct solution yields 24.000006 or something.
08:56:40 <roconnor> SamB, I solved by problem. ... use `shift` (-7) instead of `shiftR` 7. :P
08:56:56 <dmhouse> If you're allowed div, then 8*8 `div` 3 + 3 works.
08:57:25 <cjeris> (floating point)--
08:58:18 <glguy> dmhouse: so what is the correct order of operations to get 24.000006?
08:58:22 <roconnor> SanB, oh wait, that's not the whole storry
08:58:47 <glguy> OH
08:58:49 <Igloo> If you use Rational then you should be able to do it exactly
08:58:54 <glguy> hm
08:59:05 <dmhouse> Igloo: hrm, true.
08:59:07 <glguy> I wonder if I need to add a flip (/) and flip (-)
08:59:16 <int-e> but you'll have to deal with division by 0 properly then
08:59:17 <dmhouse> glguy: that's what I did. :)
08:59:47 <dmhouse> ?hoogle Rational
08:59:48 <lambdabot> Prelude.Rational :: type Rational
08:59:48 <lambdabot> Text.PrettyPrint.HughesPJ.rational :: Rational -> Doc
08:59:48 <lambdabot> Language.Haskell.TH.RationalL :: Rational -> Lit
08:59:57 <dmhouse> > (0 :: Rational) / 0
09:00:05 <lambdabot>  Exception: Ratio.%: zero denominator
09:00:14 <dmhouse> So an exception, rather than a number. I see.
09:00:17 <glguy> nope
09:00:26 <glguy> that didn't do it
09:00:39 <glguy> I need to stagger adding elements to the stack
09:00:41 <int-e> 8/(3-8/3) is the solution.
09:00:43 <glguy> and performing operations
09:00:55 <glguy> > 8/(3-8/3)
09:00:56 <lambdabot>  23.99999999999999
09:00:58 <dmhouse> int-e++
09:01:09 <int-e> (good memory)
09:01:28 <dmhouse> > (8 :: Rational) / (3 - 8/3)
09:01:29 <lambdabot>  24%1
09:02:26 <glguy> I wrote code to do this for Project Euler
09:02:31 <glguy> but I don't keep my code around all the time
09:02:54 <musasabi> yip: pong
09:03:00 <glguy> You had to find the set of 4 numbers that gave the greatest number of unique results using operators like this
09:03:43 <yip> musasabi: can you please help me with some happs stuff?
09:03:53 <Una^_> Noob question, im trying to find the number of occurences of a certain number contained in a list, im recursing through the list and can match fine, but im not sure how to keep a total?
09:04:24 <dmhouse> Could one newtype Rational and add an exception handler in the division case?
09:04:39 <glguy> > length $ filter (==2) [1,2,3,4,5,22,3,4,2,1,2,3,4]
09:04:40 <lambdabot>  3
09:04:53 <dmhouse> Perhaps not newtype... data ExtendedRational = Infty | Rational
09:04:53 <sjanssen> Una^_: use an accumulating parameter
09:05:15 <musasabi> yip: yes, feel free to ask.
09:05:17 <dmhouse> Or even, data ExtendedRational = Infty | Finite Rational
09:05:18 <glguy> > foldl' (\acc x -> if x == 2 then acc+1 else acc) 0 [1,2,3,4,5,22,3,4,2,1,2,3,4]
09:05:19 <lambdabot>  3
09:05:25 <yip> musasabi: ok, well first of all, does happs have file uploads yet?
09:05:31 <Una^_> sjanssen: k ty, ill try that
09:05:47 <int-e> hmm, I lost my code snippet for this it seems.
09:05:57 <roconnor> Sooo, what make GHC evaluate  7 >= 0 at compile time, but not product [1..2]?
09:06:33 <musasabi> yip: not at the moment. One app used to do them, but the code never got integrated.
09:06:46 <yip> musasabi: but they are on the way and happs will soon have it?
09:07:52 <sjanssen> roconnor: 7 >= 0 is considerably simpler than product [1..2]
09:08:05 <roconnor> sjanssen: according to what measure?
09:08:13 <musasabi> yip: They are on the todo-list, but not the most high priority stuff. I think HAppS will have them this year, but depends on the priority of different things.
09:08:30 <yip> musasabi: "this year" ? :O
09:08:50 <sjanssen> roconnor: common sense, I guess.  I don't have any concrete explanation for you
09:09:07 <roconnor> sjanssen: heh, I'm not sure GHC has a common sense function ;)
09:09:38 <musasabi> this year = 2006. not that many months.
09:09:42 <sjanssen> roconnor: product is defined as a recursive function, I bet it's trickier to unwind those at compile time
09:10:03 <roconnor> sjanssen: that would be my guess
09:10:21 <sjanssen> the enumeration is recursively defined as well
09:10:43 <roconnor> question, are all non-recursive closed terms evaluated at compile-time?
09:10:49 <yip> musasabi: hm....... oh yeah :) so my question is, how can read a txt file from the filesystem and process that and then output an html with some results?
09:11:57 <musasabi> yip: simpleHTTPIO + return $ readFile "foobar" ?
09:12:07 <xerox> + O_o
09:13:43 <yip> @type readFile
09:13:44 <lambdabot> FilePath -> IO String
09:13:56 <yip> simpleHTTPIO?
09:13:59 * roconnor tries to find the inliner in ghc sources
09:17:10 <musasabi> yip: http://youzen.b2.fi/~musasabi/f.hs
09:19:31 <yip> musasabi: thanks that looks good, but now the whole "application" is stuck with simpleHTTPIO, which might not be necessary for everything
09:22:16 <musasabi> yip: one can have handlers with both IO and without IO. (I think pass.net does that, but not sure if there is example code of it in the examples/ dir)
09:22:34 <yip> hm.... actually just having everything in IO might not be so bad
09:22:34 <roconnor> oh right, haskell isn't strongly normalizing
09:22:57 <roconnor> so it would be very afraid to evaluate a recursive definition at compile time.
09:23:16 <musasabi> yip: 3 min and I have the example how to do it.
09:23:29 <yip> musasabi: cool thanks!
09:26:54 * shapr boings
09:30:21 <shapr> Goood morning #haskell!
09:30:53 <dmhouse> Heya shapr.
09:32:10 <ski> good evening
09:35:27 <hyrax42_> ?instances-importing Control.Monad.Identity Eq
09:35:28 <lambdabot> (), Bool, Char, Double, Either a b, Float, Int, Integer, Maybe a, Ordering, [a]
09:36:56 <hyrax42_> huh
09:37:09 <hyrax42_> ?docs Control.Monad.Identity
09:37:09 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/mtl/Control-Monad-Identity.html
09:37:21 <xerox> ?instances Control.Monad.Identity
09:37:22 <lambdabot> Not a class! Perhaps you need to import the  module that defines it? Try @help instances-importing.
09:38:58 <hyrax42_> there's no derived Eq instnace
09:39:04 <hyrax42_> according to the docs anyway
09:39:09 <ski> @instances Control.Monad.Trans.MonadTrans
09:39:09 <lambdabot> Not a class! Perhaps you need to import the  module that defines it? Try @help instances-importing.
09:41:01 <araujo> hi hi!
09:41:48 <hyrax42_> > () == ()
09:41:50 <lambdabot>  True
09:43:26 <ski> @instances-importing Control.Monad.Trans MonadTrans
09:43:27 <lambdabot> ContT r, ErrorT e, RWST r w s, ReaderT r, StateT s, WriterT w
09:46:33 <ski> @hoogle t m0 b -> (forall a. m0 a -> t m1 a) -> t m1 b
09:46:34 <lambdabot> Did you mean: t M0 b -> (Forall A. M0 a -> t M1 a) -> t M1 b
09:46:34 <lambdabot> Data.Generics.Schemes.everywhere :: (a -> a) -> a -> a
09:46:34 <lambdabot> Data.Generics.Schemes.everywhere' :: (a -> a) -> a -> a
09:47:53 <ski> @hoogle t M0 b -> (Forall A. M0 a -> t M1 a) -> t M1 b
09:47:54 <lambdabot> No matches, try a more general search
09:50:16 <dozer> is there a labelled graph type in the libraries?
09:55:58 <dcoutts_> dozer, Data.Graph or Data.Graph.Inductive
09:56:26 <dozer> Data.Graph doesn't seem to support edge labels
09:56:44 <dcoutts_> .Inductive does
09:57:30 <dcoutts_> hia bringert
09:57:39 <bringert> hi dcoutts_
09:57:54 <dozer> ah thanks, I'd missed that
09:58:33 <musasabi> yip: http://youzen.b2.fi/~musasabi/io_or_no_io.hs
09:59:10 <musasabi> yip: that has also automatic input handling FromMessage and XML results etc
10:09:24 <dozer> Is foldl or foldr better to use? Presumably one plays nicely with lazyness?
10:10:21 <vegai> some things are more efficient with foldl, some with foldr
10:10:35 <vegai> while for most things, it doesn't matter that much
10:10:46 <dozer> I'm just doing a fancy sum, so I assume it doesn't matter
10:10:49 <yip> musasabi: looks good, thanks
10:10:51 <yip> musasabi: another question
10:11:30 <kpreid> dozer: for a sum foldl' is best, IIRC
10:11:48 <dozer> thx
10:12:29 <kpreid> foldr and foldl will both be poor in that case (foldr non-tail-recurses, and foldl builds lots of thunks)
10:13:14 <yip> musasabi: how can i spawn some sort of long-running IO action when i get a request, and then return a result immediately, storing i guess a thread handle in some session data?
10:13:32 <yip> musasabi: and then being able to check during later requests if the action has completed already
10:13:34 <greenrd> Why does $ sometimes cause a compile-time error where ordinary parentheses do not?
10:14:19 <roconnor> greenrd: because $ isn't sufficently polymorphic.
10:14:28 <roconnor> or something like that
10:15:03 <yip> @hoogle forkIO
10:15:03 <lambdabot> Control.Concurrent.forkIO :: IO () -> IO ThreadId
10:16:16 <musasabi> yip: I have code for that (it is called blocking-io) and is quite involved to get right.
10:16:44 <musasabi> the complication is to get it right even when there are crashes in the middle.
10:17:27 <yip> musasabi: what about forkIO?
10:17:49 <musasabi> yip: how would that help?
10:18:48 <musasabi> yip: client accesses your app and the access is succesfull. Your app forkIOs the long running thread. 15min later it crashes. Does the action need to be replayed.
10:18:52 <yip> i want to have like a url "/start" that will invoke a long computation on the server, and then a url "/check" that will tell me if the computation is still running or if it is completed
10:19:47 <yip> musasabi: i'm actually not really interested in data consistency
10:19:59 <yip> musasabi: if i get a crash, or if i restart the server i'm willing to lose all data
10:23:02 <musasabi> evil :-)
10:23:58 <yip> musasabi: do you have an example that uses HAppS.Agents.SessionKeeper?
10:24:10 <yip> musasabi: and what's the difference between SessionKeeper and SessionKeeprEx?
10:24:12 <musasabi> I am writing tonight a mail about doing blocking IO events to the HAppS ML, it may be interesting for you.
10:24:54 <musasabi> yip: SessionKeeprEx is a new thing (coded this morning after drinking too much caffeine) that support having events fired when a session timeouts.
10:25:20 <musasabi> yip: there is examples/session_ex.hs
10:25:30 <jmmv> now that you mention mls... any generic must-subscribe-mailing-list about haskell?
10:25:42 <yip> ah, ok i think i only need the simple SessionKeeper then
10:25:56 <musasabi> haskell-cafe@haskell.org and haskell@haskell.org
10:26:22 <shapr> I'm quite interested in HAppS sessions, I want to add user logins to my HAppS wiki hack.
10:26:24 <musasabi> yip: the simple SessionKeeper has the same API, but you can ignore all the EventHandler stuff.
10:26:28 <jmmv> aha, thanks
10:26:37 <dmhouse> Gah, I hate the 'The instance type must be of form (T a b c)' rule.
10:26:56 <shapr> jmmv: I always read your nick as "j0r m1l4ge m4y v4ry"
10:26:58 <dmhouse> Is there a flag to allow instance declarations for synonyms?
10:27:07 <jmmv> shapr, heh, you are not the only one
10:27:53 <dmhouse> E.g. I have type Term = GenTerm DBIndex; type NamedTerm = GenTerm String.
10:28:19 <dmhouse> I want to instantiate a class C separately for these two types.
10:28:24 <shapr> musasabi: Do you have a moment to look at my HAppS wiki hack and suggest improvements? I'd like to add it to the tutorial, but I figure it needs cleaning first.
10:29:03 <musasabi> shapr: I'll have time in an hour, late to sauna at the moment. (but I am eager to look at the code)
10:29:05 <yip> shapr: are you from the uk?
10:29:14 <shapr> musasabi: ok, cool
10:29:18 <shapr> yip: No, I'm from Alabama.
10:29:26 <shapr> That's where I learned Swedish ;-)
10:29:28 * shapr is joking
10:29:42 <shapr> I really am from Alabama.
10:29:49 <yip> shapr: hm.... ok cause i heard there is someone from the Imperial College of London who wrote a wiki in haskell
10:29:52 <mcnster> any gtk2hs gurus:  what is the gtk2hs equiv. of gtk_object_set_data()/g_object_set_data()?
10:30:01 <shapr> yip: http://www.scannedinavian.com/hope/about
10:30:14 <dcoutts_> mcnster, there isn't really because that's not type safe
10:30:25 <Bourbaki> nabend
10:30:40 <shapr> yip: I wrote my wiki yesterday
10:31:03 * edwardk waves hello.
10:31:05 <mcnster> dcoutts, hmm.  i think i need to keep state on a window...
10:31:27 <dmhouse> I need to install something frameworky so I can get started hacking on these forums I was thinking of building.
10:31:42 <dcoutts_> mcnster, we provide objectCreateAttribute, objectSetAttribute, objectGetAttributeUnsafe
10:31:49 <dmhouse> Hope's going to a be an absolute nightmare (unless cabal-install is stable yet?).
10:31:56 <dcoutts_> mcnster, which is equivalent I guess, but it's not at all a nice thing to use
10:32:11 <mcnster> dcoutts_, no it didn't look nice :(
10:32:11 <dcoutts_> mcnster, and as I said, and as the name suggests, it's totally not type safe
10:32:28 <dcoutts_> just keep it around as an ordinary haskell value
10:32:34 <yip> shapr: wow. so where can i try this wiki?
10:32:44 <dcoutts_> eg bundle the Window and your extra state together in a record
10:33:05 <shapr> yip: http://www.scannedinavian.com:8000/
10:33:19 <mcnster> dcoutts_, i need to keep state in a signal handler
10:33:33 <dcoutts_> mcnster, use an IORef or some other abstraction
10:33:39 <shapr> yip: It's just a quick hack, I'm going to add bringert's hmarkup wiki -> xhtml today, and maybe I'll have time to add support for HAppS user sessions.
10:34:01 <yip> shapr: nice, you made it in one day?
10:34:02 <shapr> yip: This wiki is partially designed to exercise all the cool bits of HAppS so it can be a tutorial.
10:34:10 <yip> sweet
10:34:17 <shapr> I made it in about three hours.
10:34:51 <mcnster> dcoutts_, can i say:  window `onExpose` (foo arg1)  ?
10:34:58 <dcoutts_> mcnster, a common pattern is to have a record with all your state, and keep it in an IORef, then you have a little wrapper that allows you to run IO actions that can access and update that state
10:35:18 <dcoutts_> then you can use that from a signal handler
10:35:19 <shapr> heya aFlag, haven't seen you around much lately.
10:35:36 <aFlag> yeah, I've been busy at college
10:35:55 <shapr> yip: The source is still ugly, but I can @paste it if you'd like to see.
10:36:16 <yip> shapr: well, what i really need some source of is a simple sessions example
10:36:37 <shapr> I haven't tried sessions yet, lemme look at musasabi's demo.
10:36:46 <mcnster> dcoutts_, i will experiment.  thank you.
10:40:01 <jmmv> heck, the more I code in haskell, the more I like it (and it has only been a few time)...  it'll be painful to use other languages when needed! ;-)
10:41:11 <dozer> had to design a big Java api with coleagues yesterday
10:41:35 <dozer> ended up designing it in haskell and then converting it to classes for implementation :)
10:41:39 <yip> what is EvSession?
10:42:18 <shapr> dozer: smart :-)
10:42:28 <shapr> jmmv: I know that feeling :-)
10:43:09 <shapr> yip: If you look at http://happs.org/auto/apidoc/HAppS-Agents-Users.html it shows "type EvUsers a r = forall ev . Ev (Users a) ev r"
10:43:12 <lambdabot> http://tinyurl.com/o6pnh
10:44:01 <yip> shapr: yes, but what about EvSession?
10:44:15 <shapr> So I'd guess that EvSession might be something like type EvSession a r = forall ev . Ev (Session a) ev r
10:44:43 <yip> shapr: weird how it's not in the docs though
10:44:44 <jmmv> dozer: I'm not at that point yet ;)  (of being able to design big things functionally... too much oop in my head)
10:45:15 <dozer> jmmv: it was a big component architecture - we had to say what each box did, and what it could rely on
10:45:26 <dozer> jmmv: the oo modelling realy was just an implementation detail inside the box
10:46:25 <jmmv> boxes... that's how I was taught the basics of functional programming
10:46:42 <jzhang> hey
10:46:50 <jzhang> have anyone else had trouble building yi
10:46:53 <jzhang> with ghc6.5
10:47:22 <shapr> jzhang: You could ask dons when he's awake, he wrote yi.
10:48:04 <jzhang> ah
10:48:07 <jzhang> one more question
10:48:13 <jzhang> when ghc outputs an error
10:48:16 <jzhang> with a line number
10:48:22 <jzhang> is that with comments and whitespace stripped?
10:48:37 <jzhang> because I got a parse error (possibly incorrect indentation)
10:48:39 <shapr> Nope, it should be that line in the source code.
10:48:52 <shapr> Ah, in that case it can be in the line(s) above.
10:48:54 <jzhang> and the line didn't look like it had an indentation error
10:49:05 <shapr> Was it if then else?
10:49:08 <jzhang> ah
10:49:33 <shapr> If you could paste the code that didn't work, we might be able to help.
10:49:34 <shapr> @paste
10:49:35 <lambdabot> http://paste.lisp.org/new/haskell
10:50:13 <shapr> yip: Have you seen the Sessions demo code that musasabi put onto the HAppS group?
10:50:59 <shapr> jzhang: Any other questions I/we can help with?
10:51:03 <yip> shapr: i think so
10:51:31 <yip> but i can't find this function "withUsers"
10:51:36 <jzhang> do I post the whole file?
10:51:46 <jzhang> or just the line that ghc is complaining about?
10:52:19 <shapr> jzhang: If it's an indentation error you probably want to paste ten lines above and below the line ghc mentions.
10:52:25 <shapr> But you can paste the whole file, that's fine.
10:53:47 <lisppaste2> jzhang pasted "Error compiling Yi with GHC6.5" at http://paste.lisp.org/display/27726
10:53:57 <shapr> yip: I can't find it either.
10:54:21 <shapr> jzhang: Which of those lines does it complain about?
10:54:38 <shapr> oh, the if/then/else lines?
10:55:11 <ValarQ> can ghc handle unicode characters as symbols?
10:55:44 <shapr> ValarQ: If so, that was only added in the last year or so.
10:56:02 <ValarQ> ok...
10:56:17 <sjanssen> jzhang: then and else should be indented further than if
10:56:19 <lisppaste2> jzhang annotated #27726 with "Typeable.hs" at http://paste.lisp.org/display/27726#1
10:56:26 <shapr> jzhang: I'm going to guess that the "else Nothing" line needs to be indented more.
10:57:13 <shapr> jzhang: See how the "cast" function has an "else Nothing" that is indented less than the "then" above it?
10:57:27 <jmmv> bbl
10:57:30 <jzhang> yeah
10:57:36 <shapr> I think that's the problem.
10:58:05 <Igloo> That's fine
10:58:16 <Igloo> Which is line 452?
10:58:21 <jzhang> nope
10:58:23 <jzhang> getting the same error
10:58:34 <jzhang> line 452 is INSTANCE_TYPEABLE1(Maybe,maybeTc,"Maybe")
10:58:45 <jzhang> that can't be the line with the indentation error
10:59:07 <jzhang> is there a function in emacs haskell mode
10:59:10 <jzhang> that reindents the whole file?
10:59:24 <Igloo> Oh, look at the source after CPP has happened (assuming that's CPP)
10:59:33 <Igloo> ghc -E should do it
10:59:45 <Igloo> Leaving Typeable.hspp or something IIRC
11:00:54 <shapr> jzhang: There is a way to reindent an entire file, but I don't think it works with haskell-mode. But with other stuff C-c h selects the whole buffer and M-C-\ indents the selected region.
11:00:58 <jzhang> what does ghc -E do?
11:01:08 <Igloo> Stops after cpp
11:01:31 <jzhang> cpp?
11:02:49 <shapr> Have you ever used the C++ preprocessor?
11:03:06 <jzhang> no
11:03:10 <jzhang> is it like C macros?
11:03:11 <roconnor> what is a .tib file, as in ghc/compiler/simplCore/simplifier.tib.
11:04:17 <shapr> yup
11:04:44 * shapr only answered after re-checking http://en.wikipedia.org/wiki/C_preprocessor
11:04:51 <shapr> I don't use C much =)
11:05:49 <jzhang> so I should compile this file individually?
11:05:51 <jzhang> with ghc -E?
11:06:07 <shapr> I think so.
11:06:28 * SamB still thinking about incentive structure for getting GHC to inline things like the worker for shift
11:06:57 <jzhang> ok
11:06:58 <jzhang> that's done
11:07:04 <jzhang> it generted a bunch of files
11:07:08 <jzhang> including .hspp
11:07:24 <jzhang> no errors there
11:07:56 <SamB> roconnor: I don't suppose you've already figured it out?
11:07:59 <shapr> Can you paste the .hspp file that matches the one that gives you an error?
11:09:05 <shapr> That will probably show the indentation problem.
11:09:07 <jzhang> ok
11:09:35 <jzhang> but the hspp was generated with no errors
11:10:17 <lisppaste2> jzhang pasted "Typeable.hspp" at http://paste.lisp.org/display/27730
11:10:50 <roconnor> SamB, no I had an error
11:10:59 * SamB wonders where the rules for >=# and such come from
11:11:02 <roconnor> SamB, but I have made some progress
11:11:14 <SamB> what have you found? besides that you can use shift (-7)?
11:11:38 <roconnor> I was wrong about that shift (-7)
11:11:42 <SamB> oh
11:11:44 <roconnor> I haven't been able to reproduce my results ;)
11:11:51 <SamB> that sounded freaky anyway ;-)
11:12:15 <shapr> Igloo: Shouldn't that have gotten rid of   44: #if __GLASGOW_HASKELL__ >= 603 ?
11:12:55 <shapr> jzhang: Can you paste the error you get from ghc?
11:13:59 <jzhang> [18 of 24] Compiling AltData.Typeable ( src/AltData/Typeable.hs, dist/build/AltData/Typeable.o )
11:13:59 <jzhang> src/AltData/Typeable.hs:452:0:
11:13:59 <jzhang>     parse error (possibly incorrect indentation)
11:14:03 <roconnor> SamB, check out my latest post: http://www.haskell.org/pipermail/glasgow-haskell-users/2006-October/011239.html
11:14:05 <lambdabot> Title: [Haskell] Expecting more inlining for bit shifting, http://tinyurl.com/hrrg8
11:14:33 <musasabi> shapr: here.
11:14:33 * roconnor is digging into the guts of the GHC inliner
11:14:56 <Igloo> shapr: Yes, that doesn't look at all like right
11:15:08 <Igloo> jzhang: Are you giving the -cpp option to GHC?
11:15:14 <jzhang> no
11:15:21 <Igloo> That's your problem then
11:15:24 <jzhang> well I'm just using ./Setup.lhs build
11:15:33 <shapr> hmm
11:15:35 * shapr grabs yi
11:15:36 <yip> musasabi: what is "withUsers" from that sessions_ex.hs?
11:16:05 <jzhang> how would I edit the configure files then
11:16:05 <roconnor> SamB, I almost have a reasonable workaround.  by adding a case i# of 0# -> W32# x#, ... sadly for some bizarre reason it still fails with that.
11:16:11 <jzhang> Setup.lhs doesn't actually call ghc
11:16:14 <Igloo> If you add -v it might tell you what command it's running
11:16:28 <Igloo> It doesn't?
11:16:50 <jzhang> -v?
11:16:54 <jzhang> that's not one of the options
11:17:27 <jzhang> oh ok
11:17:28 <jzhang> it's a flag
11:17:42 <jzhang> it's calling
11:18:03 <jzhang> it is using the -cpp flag
11:18:08 <SamB> roconnor: oh, so you think I should be working on improving sizeExpr?
11:18:32 <Igloo> OK, use the same options to make the hspp file (remove any -o foo and -c options)
11:18:54 <roconnor> what is sizeExpr?
11:19:03 <jzhang> you mean compile Typeable.hs separately?
11:19:08 <jzhang> from Setup.lhs?
11:19:13 <musasabi> yip: that is generated by the TH code.
11:19:32 <Igloo> With -E, yes
11:19:36 <Igloo> (which doesn't compile it)
11:19:45 <jzhang> ok
11:19:55 <yip> musasabi: crikey
11:20:00 <roconnor> SamB, ah I was just looking at CoreUnfold.lhs
11:21:02 <musasabi> yip: withUsers act = withLocalState users (\n st -> st { users = n }) act
11:21:59 <roconnor> SamB, yes, it does seem to be size_up (Case ...) that needs some tinkering
11:22:09 <jzhang> so I just generate the .hspp file from Typeable.hs?
11:22:31 <hyrax42> why is there no method for Ix that takes an int and bounds and gives back the element corresponding to the index
11:22:37 <hyrax42> i.e. Ix.index^-1
11:22:52 <yip> musasabi: hm.... withLocalState....
11:23:14 <yip> musasabi: what is withLocalState? it's not in the docs either
11:25:22 <jzhang> I'm still confused as to what I'm supposed to do
11:25:28 <jzhang> I've compiled Typeable.hs with ghc -E
11:25:35 <musasabi> yip: make that localState. From HAppS.MACID
11:25:35 <jzhang> and ended up with the hspp file
11:25:50 <jzhang> how do I get it to link with the rest of the files compiled by Setup.hs
11:26:07 <yip> musasabi: aha, thanks!
11:27:08 <musasabi> yip: adding -ddump-splices to ghc command line will make it print out the TH code it is splicing from the TH declarations if you want to look at it.
11:27:39 <yip> musasabi: hm... interesting
11:28:57 <Igloo> jzhang: Show us the hspp file
11:29:09 <glguy> are the ghc 6.6 sources the release sources?
11:29:18 <Igloo> jzhang: It isn't compiled, it will just show what the error means
11:29:25 <Igloo> glguy: No
11:30:09 <roconnor> hmm, ghc isn't very portable.  It seems to require ghc to compile.
11:30:37 <jzhang> ok
11:30:41 <jzhang> I'll paste it
11:30:44 <Igloo> roconnor: I guess gcc isn't very portable either, then
11:30:55 <shapr> roconnor: C compilers often have that problem too.
11:31:14 <Igloo> glguy: Oh, actually, it might be now
11:31:30 <lisppaste2> jzhang pasted "Typeable.hspp" at http://paste.lisp.org/display/27731
11:31:48 <glguy> Igloo: it was named ghc-src-6.6.tar.bz2 or something like that
11:32:01 <Igloo> jzhang: That hasn't been through cpp
11:32:12 <jzhang> so what do I do to it?
11:32:22 <Igloo> glguy: The one made yesterday isn't. The one made today might be.
11:32:27 <jzhang> I'm not terribly familiar with the detailed build process
11:32:32 <jzhang> I'ms till trying to learn ghc
11:32:55 <jzhang> I usually just use Setup.hs and it usually just works
11:33:23 <mrezk> Hi !
11:33:40 <jzhang> do I just run it through /usr/bin/ghc -cpp Typeable.hspp?
11:34:39 <mrezk> I'am sorry... but someone had this problem with ghc? ->> <interno>:0:1: lexical error
11:36:23 <jzhang> can someone explain to me what I do with a hspp file?
11:36:31 <glguy> would it be considered an obfuscation to write: join (liftM2 (+)) (randomR (1,6)) to simulate rolling two dice
11:36:32 <jzhang> after I compile to hspp with ghc -E
11:36:46 <jzhang> how would I link it with the rest of the stuff generated by Setup.hs?
11:37:02 <dolio> That doesn't really roll twice, does it?
11:37:24 <glguy> dolio: yeah, it does
11:37:38 <glguy> dolio: the fact that you had to ask probably means that it's an obfuscation :)
11:37:47 <dolio> :)
11:37:54 <dolio> ?type randomR
11:37:55 <lambdabot> forall a g. (Random a, RandomGen g) => (a, a) -> g -> (a, g)
11:38:03 <roconnor> glguy: you need the join?
11:38:13 <glguy> dolio: I'm not directly using randomR
11:38:26 <glguy> dolio: I meant to write getRandomR
11:38:26 <glguy> where
11:38:27 <glguy>       getRandomR b = do
11:38:27 <glguy>          (a,stdGen') <- gets (randomR b)
11:38:27 <glguy>          put stdGen'
11:38:30 <glguy>          return a
11:38:53 <glguy> roconnor: without join: liftM2 (+) (getRandomR (1,6)) (getRandomR (1,6))
11:38:55 <roconnor> glguy: Have you tried MonadRandom?
11:39:00 <glguy> roconnor: nope
11:39:12 <roconnor> glguy: oh I see now.
11:40:13 <roconnor> glguy: how about fmap sum $ sequence $ replicate 2 $ getRandom (1,6) :)
11:40:19 <glguy> ?type let getRandomR b = gets (randomR b) >>= \(a,s) -> put s >> return a in join (liftM2 (+)) (getRandomR (1,6))
11:40:20 <lambdabot> forall (m :: * -> *) a s. (Num a, Random a, RandomGen s, MonadState s m) => m a
11:40:44 <glguy> roconnor: you mean: fmap sum $ replicateM 2 (getRandom (1,6)) ? That's what I originally had
11:41:14 <roconnor> glguy: Cale's MonadRandom is totally awsome.  It ought to be part of the Haskell Report.
11:41:20 <shapr> jzhang: Can you paste the .hspp file?
11:41:42 <glguy> roconnor: I'm reading this now: http://www.haskell.org/haskellwiki/NewMonads/MonadRandom
11:41:44 <lambdabot> Title: New monads/MonadRandom - HaskellWiki, http://tinyurl.com/nlrgg
11:41:52 <roconnor> mrezk: It sounds like the file you are trying to compile is very broken.
11:42:06 <roconnor> it seems like there is a error on line 1, character 0
11:43:11 <mrezk> <roconnor>: but it I just downloaded it (Cabal) and I did "make"
11:43:57 <mrezk> ghc-pkg unregister Cabal
11:44:08 <mrezk> and i trayed to intall a newer one
11:44:20 <mrezk> 1.1.4
11:44:43 <roconnor> mrezk: ah.  'fraid I am of no help here.
11:45:06 <mrezk> :'( Thenks any way!
11:45:06 <mrezk> :o)
11:46:05 <lispy> mrezk: i should be able to help
11:46:16 <shapr> jzhang: I just built yi and it worked fine. Are you using the latest Yi from the darcs repo with ghc 6.4.2 and fps 0.8 or later?
11:46:17 <lispy> mrezk: i've installed cabal from make and by using cabal
11:46:29 <mrezk> oh! great!
11:46:40 <lispy> mrezk: where is your error? did you paste it somewhere?
11:46:55 <mrezk> nop...
11:46:56 <mrezk> but
11:47:01 <mrezk> I can paste it...
11:47:06 <mrezk> where do you prefer?
11:47:09 <lispy> ?where paste
11:47:09 <lambdabot> http://paste.lisp.org/new/haskell
11:47:13 <mrezk> ok
11:47:31 <mrezk> give me a minute pls
11:47:37 <lispy> mrezk: for future ref, the readme or whatever comes with cabal is bad
11:47:42 <lispy> mrezk: it tells you to use make
11:47:42 <jzhang> uh, I'm using ghc 6.5
11:47:47 <lispy> mrezk: it should tell you to just use cabal :)
11:48:19 <lispy> mrezk: if you'eve already unregistered your old cabal we'll have to use the makefile
11:48:40 <lisppaste2> mrezk pasted "Cabal" at http://paste.lisp.org/display/27733
11:48:48 <jzhang> shapr: I'm using ghc 6.5
11:48:55 <jzhang> shapr: is that going to break anything?
11:49:05 <mrezk> http://paste.lisp.org/display/27733
11:49:08 <lispy> shapr: so i have a diff, how do i apply it?  I diff'd against 1.13 and now i want to apply to 1.13.2 and see if it breaks anything
11:49:18 <lispy> mrezk: looking now
11:49:18 <mrezk> ready...
11:49:24 <mrezk> thenks! :o)
11:50:11 <lispy> mrezk: do you really need 1.1.6?  I'm not sure it's ready...
11:50:25 <lispy> mrezk: maybe 1.1.4 would be fine?
11:50:33 <mrezk> it has the same error...
11:50:36 <lispy> hmm
11:50:38 <mrezk> I trayed it 2 :(
11:50:42 <shapr> lispy: patch works with diffs that address subdirs
11:50:42 <lispy> you used -cpp
11:50:48 <shapr> jzhang: I don't know.
11:51:03 <mrezk> mm.... I dont think so.. i just did make
11:51:09 <lispy> mrezk: which is good, that's the main hang up i know about
11:51:22 <shapr> jzhang: If you have 6.4.2 installed, can you build with that first? That'll tell you if it's just 6.5 incompat or if you're missing libs or something else.
11:51:34 <lispy> oh hmm..
11:51:47 <lispy> mrezk: what does Setup.lhs looks like? (can you annotate your paste)
11:52:00 <mrezk> yes...
11:52:16 <lispy> shapr: okay, i'll see if i have patch
11:52:24 <lispy> shapr: no dice
11:52:36 <mrezk> <lispy> Do you mean... the content or what happend if I lunch it?
11:52:36 <dcoutts> I've seen that error before somewhere
11:52:45 <lispy> mrezk: the contens
11:52:55 <lispy> mrezk: since that seems to be where we get the lexical error
11:52:56 <mrezk> I'am sorry... maybe it is an stupid question... but I am newbbe
11:53:02 <mrezk> ok...
11:53:35 <lispy> dcoutts: is it a problem with unlit?
11:53:37 <dcoutts> lispy, btw, that's not true: "if you'eve already unregistered your old cabal we'll have to use the makefile"
11:53:41 <lisppaste2> mrezk pasted "Setup" at http://paste.lisp.org/display/27735
11:53:45 <glguy> roconnor: I'm using MonadRandom now.  Since Cale used the same getRandomR function name as me, it was as simple as changing evalStateT to evalRandomT (c:
11:53:49 <lispy> dcoutts: oh, good to know
11:53:54 <lispy> dcoutts: you can reregister?
11:54:00 <mrezk> http://paste.lisp.org/display/27735 , and was also sent to #haskell at Freenode.
11:54:03 <shapr> lispy: apt-get -uf install patch
11:54:04 <mrezk> here ir is
11:54:09 <mrezk> *it
11:54:13 <Cale> glguy: :)
11:54:13 <dcoutts> lispy, runghc Setup.lhs just works (as of 1.1.6)
11:54:26 <dcoutts> the Makefile is now always optional
11:54:38 <lispy> mrezk: in the future, please use the "annotate this paste" button, it will keep all your related pastes together
11:54:40 <glguy> Cale: but your fromList function came in handy for simplifying some other code... though I'm not sure i like using "fromList" for that fucntion
11:54:49 <mrezk> ok...
11:54:51 <dcoutts> the error is comming from cpp I think
11:54:53 <lispy> shapr: i'm at work :(
11:54:56 <lispy> shapr: meaning windows
11:55:37 <lispy> hmm..with bird style don't you need spaces around the code?
11:55:55 <shapr> lispy: oh
11:56:14 <lispy> dcoutts: so wouldn't he need a blankline after #!/usr/bin ?
11:57:03 <dcoutts> lispy, so this is just vanilla cabal-1.1.6 using ghc-6.4.1 on linux and running make?
11:57:03 <lispy> shapr: but i have mingw which is, i think, where diff comes from...wonder why they wouldn't provide patch too
11:57:14 <lispy> dcoutts: ask mrezk :)
11:57:24 <dcoutts> mrezk, do you know what version of gcc you've got ? gcc --version
11:57:25 <lispy> dcoutts: but it looks that way
11:57:46 <mrezk> mmm... I am seeing it now....
11:58:07 <mrezk> gcc (GCC) 4.0.3 (Ubuntu 4.0.3-1ubuntu5)
11:58:24 <lispy> well, that should be fine i'd think
11:59:44 <dcoutts> mrezk, I can't reporduce this with gcc-3.4.6 or gcc-4.1.1
12:00:08 <dcoutts> and using ghc-6.4.1
12:00:14 <dcoutts> hmm
12:00:22 <mrezk> do you mean that I should upgrade my gcc?
12:00:26 <dcoutts> mrezk, no no
12:00:30 <dcoutts> mrezk, try this:
12:00:59 <dcoutts> ghc -v --make Setup.lhs -o setup
12:01:12 <dcoutts> and annotate your last paste with the verbose output
12:01:18 <dcoutts> we want to see the cpp invocation
12:01:32 <dcoutts> ghc calls cpp and I think that's failing
12:01:43 <dcoutts> I want to see exactly which call to cpp fails
12:01:45 <lisppaste2> mrezk annotated #27735 with "ghc -v ...." at http://paste.lisp.org/display/27735#1
12:02:04 <mrezk> ready...
12:03:00 <mrezk> mmm... it 's in spanish...
12:03:13 <mrezk> I can traslate if you need help
12:03:35 <dcoutts> gcc -E -undef -traditional -v -I /usr/lib/ghc-6.4.1/include -x c ./Distribution/Simple.hs -o /tmp/ghc16273.hscpp
12:03:43 <dcoutts> so if you just run that it fails right ?
12:03:54 <dcoutts> with the same error "<interno>:0:1: lexical error" ?
12:04:12 <mrezk> nop...
12:04:19 <mrezk> do I paste the result?
12:04:22 <dcoutts> sure
12:04:41 <dcoutts> oh, hmm
12:04:48 <dcoutts> we probably need this first:
12:04:58 <lisppaste2> mrezk annotated #27735 with "it works..." at http://paste.lisp.org/display/27735#2
12:05:13 <mrezk> ready
12:05:18 <dcoutts> hmmm
12:06:46 <mrezk> say the true... $DEITY doesnt love me !! :p
12:06:51 <dcoutts> mrezk, ok try running the whole command after "*** C pre-processor" in your annotaion 1
12:06:58 <dcoutts> with all the -D bits etc
12:07:23 <mrezk> let's see-...
12:07:53 <dcoutts> btw, what does "Fin de la lista de búsqueda" mean ?
12:08:11 <lispy> end of some list?
12:08:20 <mrezk> End of searching list
12:08:24 <dcoutts> ok
12:09:13 <mrezk> mmm... I 'am sorry.... but after what ***C ?
12:09:32 <dcoutts> gcc -E -undef -traditional -v -I /usr/lib/ghc-6.4.1/include -D__HASKELL1__=5 -D__GLASGOW_HASKELL__=604 -D__HASKELL98__ -D__CONCURRENT_HASKELL__ -Dlinux_BUILD_OS=1 -Di386_BUILD_ARCH=1 -Dlinux_HOST_OS=1 -Di386_HOST_ARCH=1 -x c ./Distribution/Simple.hs -o /tmp/ghc16273.hscpp
12:09:45 <lispy> shapr: oh, i do have patch i just need to use the mingw shell instead of cmd.exe
12:10:14 <roconnor> SamB, do you know where UnfoldingGuidance is declared?
12:11:38 <lisppaste2> mrezk annotated #27735 with "command" at http://paste.lisp.org/display/27735#3
12:11:48 <mrezk> that command?
12:12:05 * roconnor wishes it was easier to navigate through a haskell project
12:12:17 <lispy> roconnor: in what way? (just curious)
12:12:41 <lispy> roconnor: like, you have an identifier and you want to lookup the def'n?
12:12:43 <roconnor> Say I am looking at a file, and I want to know what the data type UnfoldingGuidance is.
12:12:46 <lispy> roconnor: what editor do you use?
12:12:55 <roconnor> lispy: right now I am using less.
12:13:08 <lispy> roconnor: somewhere on the ghc wiki they explain how to use tags with emacs to jump around in a project
12:13:31 <shapr> roconnor: hasktags?
12:13:32 <lispy> roconnor: less isn't a great code viewer...but i use it a lot too :)
12:13:44 <shapr> Yeah, hasktags makes it way easy to jump around in source
12:13:58 <roconnor> hasktags?
12:14:07 <lispy> shapr: so i'm tyring something like: patch -p1 . ../mydiff.diff and i get errors that '.' is not a file
12:14:10 <shapr> Do you know about tags files?
12:14:36 <shapr> lispy: I dunno, my brain is too fried at the moment...
12:14:42 <lispy> shapr: heh, okay
12:14:45 <roconnor> shapr: not entirely
12:14:46 <shapr> Oh, I forgot to eat again...
12:14:51 <shapr> Do you guys ever forget to eat for days at a time?
12:14:52 * lispy hates using patch it feels too low level
12:15:07 <lispy> shapr: no, my stomach is my guide
12:15:10 <shapr> lispy: Yeah, but the real solution was to hack on the darcs repo :-)
12:15:16 <lispy> shapr: but droundy told me he forgets to eat pretty often
12:15:35 <shapr> lispy: Oh hey! Why not steal the _darcs from a 1.13 repo and throw it into your working ByteString sources?
12:15:39 <shapr> Then run darcs whatsnew, yeah?
12:15:40 <lispy> shapr: hmm..yes, but i thought we agreed we needed a 1.13 version
12:15:57 <lispy> i don't think 1.13 comes with _darcs
12:16:05 <lispy> it seems that _darcs is for the devel branch
12:16:10 <shapr> I'm pretty sure a 1.13 darcs repo exists.
12:16:17 * roconnor feels close to being able to fix GHC's inliner
12:16:41 <lispy> shapr: only if it's a tag in the darcs repo (i admit i didn't check for a tag yet)
12:16:52 <SamB> roconnor: oh yeah?
12:16:56 <dcoutts> mrezk, I'm stumped! Can I ask you to post this to cabal-devel and ghc-users and say that we need help in identifying which bit is failing.
12:17:33 <SamB> I've already started compiling my attempted fix!
12:17:40 <mrezk> yes... of course... which is the url ?
12:17:52 <roconnor> yeah, we just need to extend the cases in which that branch of sizeEval, is executed.
12:18:14 <dcoutts> mrezk, email cabal-devel@haskell.org and glasgow-haskell-users@haskell.org
12:18:29 <roconnor> SamB, sizeExpr
12:18:33 <lispy> dcoutts: doesn't mrezk need to get on the mailing lists too?
12:18:34 <roconnor> cool, what is your fix!
12:18:47 <lispy> dcoutts: so he/she needs a link to the mailman probably...
12:18:57 <SamB> well, I moved that branch into a function...
12:19:03 <SamB> oh, and now I got a compile error ;-)
12:19:04 <dcoutts> mrezk, and incldue the full output that we got when you ran with -v, so that'd be the content of your annotation #1
12:19:24 <shapr> roconnor: fix f = x where x = f x
12:19:34 <mrezk> ok...
12:19:37 <lispy> shapr: sadly the darcs repo doesn't have a tag that goes tha far back
12:19:38 <dcoutts> lispy, should be ok
12:19:44 <shapr> aww
12:19:44 <lispy> i wonder if i should just start using the newer haxml
12:19:50 <dcoutts> mrezk, thanks very much
12:19:51 <SamB> shapr: not your fix, mine!
12:19:56 <shapr> lispy: It's not compatible.
12:20:00 <shapr> SamB: aww!
12:20:12 <shapr> lispy: 1.15 and later use XmlContent
12:20:15 <mrezk> no! pls... thenks to you! I am sending the email...
12:20:15 <lispy> shapr: oh...that would be bad for me
12:20:24 <roconnor> shapr: :P
12:21:31 <lispy> ah got it
12:21:54 <lispy> patch -p1 -i ../HaXml-1.13.diff  <-- from inside the directory with the HaXml-1.13.2 source
12:22:11 <shapr> I always thought "just one fix" where fix f = x where x = f x was an amusing thought.
12:22:13 <SamB> shapr: if you have a fix for the inliner that teaches it that things like >=# applied to a variable and a literal should give a discount for that variable...
12:22:26 <SamB> by all means, share it
12:22:28 <lispy> shapr: i prefer fix f = f (fix f)
12:23:14 <SamB> lispy: some of us aren't so confident in the compiler's ability to do CSE on that as others
12:23:41 <lispy> heh, ah
12:23:42 <dmhouse> What's the best way for declaring separate instances of a class for two types which are just specific synonymic instances of a polymorphic type?
12:23:42 <shapr> lispy: That is simpler.
12:24:23 <shapr> roconnor: http://emacswiki.org/cgi-bin/wiki/TagFile
12:24:23 <dmhouse> I.e. I have data GenTerm a = ..., and type NamedTerm = GenTerm String, type Term = GenTerm DBIndex
12:24:24 <lambdabot> Title: EmacsWiki: TagFile
12:24:34 <dmhouse> I want different Show instances for Term and NamedTerm
12:24:40 <roconnor> SamB, we want (exprFreeVars e)  `subVarSet` (mkVarSet top_args) && something_else
12:24:54 <roconnor> except even that isn't quite right.
12:24:56 <dmhouse> newtypes are going to be a huge pain.
12:25:16 <dmhouse> As the instances don't in fact overlap, I think I should be able to do this.
12:25:23 <dmhouse> Is there a compiler flag?
12:26:15 <roconnor> oh sweet type Id = Var
12:26:40 <roconnor> SamB, okay so that does work. All I need to do is figureout that something_else ibt
12:27:15 <roconnor> bit
12:27:19 <SamB> roconnor: wth are you doing?
12:28:03 <roconnor> @paste
12:28:04 <lambdabot> http://paste.lisp.org/new/haskell
12:28:06 * SamB wonders why PrimOp doesn't export PrimOpInfo primOpInfo
12:29:33 * SamB makes it do so
12:30:46 <lisppaste2> roconnor pasted "My inline idea" at http://paste.lisp.org/display/27738
12:31:22 <lispy> shapr: what was your email addy?  I have a patch against 1.13.2 worked out
12:31:30 <roconnor> Of course, It would be better if I understood in which cases something like 7 >= 0 gets evaluated by the compiler.
12:31:30 <mrezk> well... I have sent the email... thenks everybody! Bye!
12:31:46 <shapr> lispy: shae at Scanned In Avian dot com
12:31:47 <lispy> mrezk: good lock
12:31:48 <lispy> er luck
12:31:52 <lispy> shapr: thanks
12:32:08 <lispy> shapr: scanned is one word right?
12:32:17 <shapr> yup
12:32:17 <lispy> that whole bird thing
12:32:19 <lispy> cool
12:32:20 <shapr> ScannedInAvian
12:33:32 <Lemmih> Good morning, #Haskell.
12:33:39 <roconnor> SamB maybe something_else should be (exprIsTrival e)
12:33:47 <roconnor> seems like a safe start!
12:34:32 <SamB> roconnor: huh
12:34:59 <SamB> I had a rather different approach...
12:35:14 <SamB> yours might be a lot better than mine
12:35:43 <SamB> then again maybe it won't be
12:35:50 <roconnor> SamB, what's your approach?
12:36:03 * roconnor the more approaches the better.  We can pick the best one.
12:36:07 <SamB> well, mine is especially geared to the the comparison primitives
12:36:26 <SamB> I'll send it to you as soon as it builds
12:37:57 <roconnor> ah
12:38:44 <roconnor> Now that think about it, I will need to requrie that e contain exactly one free variable... too bad, but I suppose that is the most common case.
12:38:47 <dmhouse> Evening, Lemmih.
12:39:32 <roconnor> there is no way to say, this is a great function to inline if these N arguements are all specified.
12:40:09 <SamB> yeah, mine is very very specific compared to yours ;-)
12:41:18 <roconnor> what is isRuntimeVar, and isRuntimeArg
12:41:26 <SamB> I don't know!
12:41:37 <SamB> where do you see them?
12:43:04 <roconnor> SamB, in the definition of exprIsTrivial
12:43:20 <roconnor> @isRuntimeVar v@ returns if (Lam v _) really becomes a lambda at runtime,
12:43:20 <lambdabot> Unknown command, try @list
12:43:24 <roconnor> i.e. if type applications are actual lambdas because types are kept around
12:43:24 <roconnor> at runtime.
12:43:45 <roconnor> what is opt_RuntimeTypes?
12:44:39 * roconnor feels like just trying his fix to see if it works. :)
12:44:46 <SamB> the type variables actually aren't kept around at runtime, though, afaik...
12:45:01 <SamB> roconnor: that is the usual method, yes ;-)
12:45:13 <roconnor> Oooooh, this is the thing about the big and small lambdas
12:45:23 <roconnor> Lam is used for both in the core expr
12:45:42 <Igloo> opt_RuntimeTypes is very experimental
12:45:53 <Igloo> And surely the usual method is just to prove it correct?  :-)
12:45:53 <SamB> big lambdas are /\ and are for types?
12:46:13 <SamB> Igloo: for an inliner?
12:46:26 <SamB> especially for code that just generates hints for the inliner?
12:46:29 <SamB> come on!
12:46:39 <SamB> it isn't correct, it is heuristic!
12:46:52 <SamB> and I bet I spelled it wrong too
12:47:12 <roconnor> Okay, I'm thinking exprIsTrivial is too trival, and won't consider x >= 0 as trivial.
12:47:22 <SamB> roconnor: um, yeah ;-)
12:47:42 <SamB> also shouldn't that be x# >=# 0# ?
12:48:05 <roconnor> I'd like to consider it all trivial.
12:48:26 <SamB> x >= 0 isn't trivial, though
12:48:42 <SamB> >= is a method in a typeclass
12:48:52 <roconnor> oh, fair point
12:49:08 * roconnor looks at exprIsDupable
12:49:14 <dolio> Even 0 is.
12:49:18 <SamB> that too
12:49:27 <SamB> x ... probably isn't.
12:49:44 <roconnor> doesn't look appropriate
12:50:25 <SamB> man, this is going to take forever...
12:50:35 <roconnor> actually, maybe exprIsDupable is okay.
12:50:53 * SamB really has a much more restricted approach
12:51:19 * roconnor looks at exprIsCheap
12:51:38 <roconnor> nope
12:52:10 <roconnor> nah, exprIsDupable is no good.
12:52:24 <roconnor> We need an expression that is guareenteed to be evaluated at compile time.
12:52:27 <lispy> Lemmih: morning, thanks for your help with that cabal thing...i think i have it straightened out now
12:52:54 <roconnor> SamB, you haven't been able to find the part that does compile time evaluation have you?
12:53:07 <SamB> roconnor: no
12:53:17 <SamB> however, I have decided to try just matching a Lit
12:53:37 <SamB> as one of the arguments of a Compare primitive
12:53:56 <SamB> the other of which is a variable from top_args
12:54:13 <roconnor> heh
12:54:19 <roconnor> quite specific
12:54:24 <roconnor> but very common.
12:54:26 <SamB> as I said!
12:54:48 <SamB> I have also written a comment that says if someone can come up with a better way, they should go right ahead
12:55:22 <roconnor> SamB, don't forget to revert your changes to shift
12:55:55 <SamB> well, I wasn't going to try looking at shift for an example of something this should help with, certainly
12:57:04 <SamB> hmm, for some reason some modules have to actually be recompiled due to a change I made in PrimOps...
12:57:14 <SamB> even though I only added exports to the export list!
13:10:06 <lispy> dons: hmm...seems the ?seen output is funny in the formatting fo time
13:10:08 <lispy> ?seen dons
13:10:08 <lambdabot> dons is in #ghc, #haskell-overflow and #haskell. I last heard dons speak 8h 21m 54s ago.
13:10:19 <lispy> ii just had one that ended like this
13:10:32 <lispy>  6d 19h 30m 45s ago, and .
13:10:48 <roconnor> I can't find where expressions are evaluated at compile time.
13:10:52 <roconnor> so I'm going to bed.
13:11:40 <SamB_XP> roconnor: btw, I think its done with fake RULES
13:11:58 <roconnor> SamB_XP: sounds pretty reasonable.
13:12:10 <roconnor> let me know if you find out for sure.
13:12:19 <SamB_XP> based on the output I see when that happens
13:12:27 <roconnor> ohhhh
13:12:34 <roconnor> hah
13:12:44 <roconnor> so, that suggests your solution is the best one.
13:12:52 <roconnor> maybe
13:13:02 <roconnor> probably
13:13:05 <SamB_XP> probably not the best
13:13:18 <SamB_XP> but it has the advantage of being, in my opinion, likely to work ;-)
13:13:24 <roconnor> although, if someone does case (head x) ..
13:13:34 <roconnor> and x is provided.
13:13:50 <roconnor> x is effectively being analized.
13:14:09 <roconnor> oh, but head does a case analysis on x.
13:14:23 <SamB_XP> anyway... that isn't my problem...
13:14:23 <roconnor> so x is being analyzed.
13:14:41 <roconnor> ... actually this shifting business isn't your problem either...
13:14:54 <SamB_XP> oh, well, yes it is
13:14:59 <SamB_XP> I decided to hack on it ;-P
13:22:37 <roconnor> SamB_XP: ah ha, foo = I# (gcdInt# 7# 11#) isn't inlined
13:22:50 <roconnor> er isn't evaluated at compile time.
13:22:59 <SamB> uh huh
13:23:05 <roconnor> primop   IntGcdOp    "gcdInt#"    Dyadic   Int# -> Int# -> Int#
13:23:05 <roconnor>    with out_of_line = True
13:23:17 <roconnor> see: labled out_of_line = True
13:23:56 <roconnor> Perhaps things that are out_of_line = False are evaluated at compile time.
13:24:08 <roconnor> ... I'm starting to think it is important to look for items evaluated at compile time.
13:24:23 <roconnor> We will want if (0 <= x && x <= 7) then ...
13:24:35 <roconnor> to work for inlining as well.
13:24:42 <lispy> not saying this because it hink it's out of line with #haskell, but you might get better help in #ghc
13:24:56 <lispy> s/help/discussion/
13:24:57 <SamB> well, I wouldn't be surprised if && got inlined and that was converted to two cases...
13:25:08 <SamB> lispy: oh
13:25:25 <roconnor> SamB: oh, right.
13:36:31 <Heffalump> ChilliX: you around?
13:36:50 <ChilliX> yep
13:37:14 <Heffalump> did you see the email I sent to the c2hs mailing list a couple of weeks ago about the repo?
13:38:00 <ChilliX> Yes, if you ask because of the email I just sent, I saw your email in the archives shortly after.
13:38:16 <ChilliX> I checked, but I don't have it in my inbox anymore and I cannot remember having seen it.
13:38:29 <Heffalump> ok :-)
13:38:49 <ChilliX> So, either my harddisk dying a few weeks ago, actually killed some mails (which I thought it handn't) or I missed yours among the tons of spam I am getting.
13:38:52 <ChilliX> sorry
13:38:58 <Heffalump> that's ok
13:39:06 <Heffalump> I was just a bit confused :-)
13:39:17 <ChilliX> I'll fix the repo in the way you suggested
13:39:58 <ChilliX> Just one question.  Will that mess up people who already got a copy of the repo?
13:40:02 <Heffalump> nope
13:40:11 <ChilliX> ok, good
13:40:25 <Heffalump> (probably wise to test this yourself, but I'm pretty confident)
13:40:43 <Heffalump> the key thing about darcs is that the current repo state doesn't depend on the order in which patches are, just what set of patches you have
13:40:44 <ChilliX> ok - thanks for fixing the probelm!
13:40:51 <Heffalump> so since my fix just reorders patches and adds a couple, it should all be fine
13:40:58 <ChilliX> yeah, we discussed this the other day
13:41:14 <ChilliX> A cunning trick...
13:43:26 <Heffalump> (of course, if anyone tries to get on windows directly from an existing copy of the repo or one where the patches end up in the wrong order again, they're still screwed. But they can always get from the main repo first then pull from such a repo)
13:43:50 <glguy> when will . become usable for lambda-expressions?
13:44:13 <ChilliX> Heffalump: yeah, that's fine
13:44:14 <Heffalump> and patches don't spontaneously reorder themselves, so they shouldn't end up in the wrong order anywhere that people didn't explicitly do something weird
13:45:06 <glguy> ?where yaht
13:45:06 <lambdabot> http://www.cs.utah.edu/~hal/docs/daume02yaht.pdf
13:46:57 <nomeata> Hi. I have installed libghc6-haxml-dev, but ghc does not seem to find it: Could not find module `Text.XML.HaXml'
13:47:11 <nomeata> using ghc -O  --make latexki.hs  -o latexki
13:47:27 <Heffalump> you need -package HaXml
13:47:34 <Heffalump> or -package haxml or some such capitalisation
13:47:39 <Heffalump> (perhaps HaXML)
13:48:03 <sjanssen> Heffalump: --make tells GHC to automatically find the needed packages
13:48:14 <Heffalump> sjanssen: oh, ok
13:48:22 <Heffalump> I didn't think it did, but I don't use it all that much
13:48:41 <sjanssen> nomeata: does haxml show up when you run this command: ghc-pkg list
13:49:22 <nomeata> yes, but in parenthises
13:49:35 <nomeata> (or whatever the correct spelling for that is :-)
13:49:39 <sjanssen> I think that means it's hidden
13:50:17 <sjanssen> try "ghc-pkg expose haxml-whateverversion"
13:53:50 <nomeata> that worked. I guess that's a bug in the debian package, then, is it?
13:54:38 <sjanssen> I'm not sure
13:54:47 <sjanssen> that might be the most appropriate behavior
13:55:55 <nomeata> but it takes root to change that? what's the problem with exposing the package?
13:56:35 * lispy waves from mclass
13:56:54 * Heffalump thinks that's a bug
14:19:49 <araujo> dons, you got mail :-)
14:21:57 <araujo> dons, Let me know how exactly things will spread ....
14:23:07 <kolmodin> araujo: spanish stuff?
14:23:14 <araujo> kolmodin, yeah!
14:23:30 <kolmodin> :)
14:23:57 <kolmodin> how well does the spanish speakers speak english? I figure it might vary from place to place
14:24:27 <araujo> kolmodin, Not common in south-america at least .. i don't know how things are on spain
14:24:48 <kolmodin> right
14:25:08 <kolmodin> well, anything for making haskell available to more people :)
14:25:13 <araujo> yay!
14:26:46 <musasabi> How did one do "reallyUnsafePrintAddr :: a -> IO ()" ?
14:28:57 * araujo saluda a erider 
14:30:03 <erider> hola araujo
14:34:43 <Lemmih> musasabi: Coerce to Addr#?
14:35:49 <Lemmih> > let f a = Ptr (unsafeCoerce# a) :: Ptr () in f 10
14:35:50 <lambdabot>  Not in scope: type constructor or class `Ptr'
14:42:45 <SamB> okay, so what is with GHC.Conc not building?
14:46:43 <musasabi> Lemmih: thanks.
14:48:58 <monochrom> Hello Haskellers
14:49:14 <xerox> Howdy m.
14:57:51 <sylvan> Hah, I was watching this interview:http://channel9.msdn.com/Showpost.aspx?postid=230438 he talks a bit about Haskell and at the end the interviewer says "So why not just make Haskell easier to use?" and he replies "We are! It's called Visual Basic .Net!"
14:57:55 <lambdabot> Title: Brian Beckman: Monads, Monoids, and Mort, http://tinyurl.com/frnxu
15:00:57 <araujo> sylvan, haha
15:01:22 <sylvan> VB9 is actually quite cool, but I think I still prefer Haskell :-)
15:01:40 <redacted> I cannot say that I like any basic variant.
15:01:48 * araujo doesn't use anything with 'Visual' on its nam
15:02:06 <dcoutts> I liked the version in the UM in this year's ICFP
15:02:15 <redacted> I just don't really care for the syntax.
15:02:16 <dcoutts> roman numerals and no 0
15:02:17 <dcoutts> clasic
15:02:26 <Philippa> yeah, that was nice
15:02:26 <gmh33__> anyone here know a /lot/ about router setup ? lol
15:02:48 <dcoutts> gmh33__, you've probably got the wrong channel for that
15:02:48 <sylvan> Have you guys looked at VB9 any? THere's a tech preview out. I mean it's still a bit messy since it's based on VB8, but Eric Meijer et al have really started harvesting FP stuff and made it a lot better.
15:03:10 <gmh33__> I was just hoping that if I went into a super duper awesome programmer channel that someone would be a sysadmin or something :P
15:03:27 <SamB> hehe
15:03:49 <SamB> gmh33__: the trick is to be in the super-dooper channel for longer before asking ;-)
15:04:01 <araujo> gmh33__, you were wrong then ... except for the super dupper awesome programmer part
15:04:48 <gmh33__> I'm in this channel quite a bit :P
15:05:33 <SamB> I mean, don't ask your off-topic question less than 20 seconds after entering the channel ;-)
15:05:46 <gmh33__> so how about that haskell language
15:05:49 <gmh33__> pretty nifty huh?
15:05:50 <gmh33__> so
15:05:53 <araujo> yeah, and throws some lambdas before
15:06:01 <SamB> sugar lambdas!
15:06:05 <gmh33__> anyone who happens to like haskell also happen to know a bit about router config ?
15:06:19 * araujo throws some syrup lambdas at everyone!
15:06:51 <qwr> gmh33__: /join #linux* ;)
15:06:58 <SamB> oh great.
15:07:04 <SamB> I don't think my code is working...
15:07:12 <gmh33__> see I have this one Router monad and I need to bind it to another Router monad
15:07:19 <SamB> heh
15:07:24 <gmh33__> but I think I screwed up the lambda expression I'm binding too
15:07:31 <monochrom> Do you have a RouterT?
15:07:32 <araujo> gmh33__, bind them!
15:07:40 <yip> this channel really does not like to go off topic, even though the topic may be broad. but standard router config is most likely not on topic
15:07:49 <gmh33__> araujo: I tried, but the second lambda is wonky
15:08:28 <monochrom> I actually find that programmers and sysadmins are pretty disjoint.
15:08:46 <gmh33__> so when I try to liftM back into Router monad one, it sploads
15:08:52 <araujo> Well, that depends upon the language.
15:09:05 <SamB> I think we relax it a little depending on how far up the yacker list you are. Or maybe I'm just imagining things for my own convenience...
15:09:05 <gmh33__> maybe I should try #perl or #python :P
15:09:23 <araujo> I bet #perl could help you with this better ....
15:09:24 <araujo> :-)
15:09:25 <edwardk> monochrom: sit in #perl for a while. that view will change ;)
15:09:34 <monochrom> maybe you should try the web forums of the specific routers
15:09:45 <Philippa> yeah, but that's because perl is a programming language primarily intended for sysadmins
15:09:48 <SamB> forums! noooooo! anything but that!
15:09:48 <gmh33__> i mean, since perl is more often used to system automation :P
15:09:49 <araujo> i think there is a hardware channel too
15:09:51 <Philippa> I'm tempted to say it shows
15:10:00 <monochrom> Well Perl proves my point! XD
15:10:22 <edwardk> heh, i have a bunch of t1 routers lying around here and the original firmware source code from my previous job, i wonder how hard it would be to rewrite it in haskell. Make the RouterT jokes more concrete ;)
15:10:23 <SamB> monochrom: that lame "exception to prove the rule" thing?
15:10:42 <araujo> Well, Perl6 might be a bit different ... if TimToady doesn't shoot himself first
15:10:55 <monochrom> No. Perl illustrates that programmers and sysadmins are disjoint.
15:11:19 <monochrom> Note: they *think* they're programming.
15:11:36 <araujo> That's other topic :-)
15:11:49 * edwardk hrmmfs. (I actually like perl) =P
15:11:52 <monochrom> Gosh don't we love to be off-topic
15:12:11 <araujo> perl6 looks promising
15:12:54 * qwr . o O ( perl scripts are still quite nice... after shell scripts )
15:13:03 <yip> I'm trying to figure out how to spell the name of the programming Brian keeps mentionning, Askel, askl... What's the correct name?
15:13:13 <edwardk> i didn't really mind perl5. the $@% madness is a little hideous, but it did a lot of things other languages won't or can't do and it did it by mangling all of its variables so its cheap to add syntax to the language.
15:13:36 <edwardk> in most languages adding a new keyword is horrific, in perl its an afterthought.
15:15:22 <edwardk> i've actually been tempted to mimic it a time or two. in fact at one point i mangled all my keywords in a test language just to see how painful it would be to go the other way.
15:16:06 <edwardk> haskell has since shown me the one true way of clean lines and layout, but at the time it seemed sound =P
15:16:34 <monochrom> How do you add syntax?
15:16:43 <yip> haskell's syntax isn't all that perfect
15:17:36 <araujo> What language got it?
15:18:01 <araujo> Thoguh, i've found the Haskell syntax the more pleasant to use
15:18:17 <edwardk> monochrom: to haskell? you don't. =)
15:18:25 <monochrom> In Perl 5.
15:18:57 <edwardk> monochrom: unless while x if until, etc. keywords about in perl and can be added without breaking existing code for the most part.
15:19:02 <edwardk> er abound in
15:19:27 <lispy> same with lisp :)
15:19:51 <Maddas> lispy: not quite
15:19:51 <araujo> I think that kind of feature are an advantage in some languages, but not others.
15:20:03 <araujo> Mainly in those where the syntax might be complicated, as in perl
15:20:30 <monochrom> I don't understand.  Those unless while if until etc. aren't they built in, i.e., the parser is hard-coded to accept all conceivable permutations?
15:20:34 <lispy> Maddas: when not?
15:20:44 <edwardk> the ecmascript committee by comparison is bound by a several year old decision to reserve the set of keywords from java, and so winds up having to make some pretty weird interpretations of the words or painful rules in order to avoid adding new syntactic constructs that break the language, coz then existing sound code does nuts
15:21:09 <edwardk> monochrom: they are, but they snuck in new builtins fairly regularly
15:21:17 <araujo> edwardk, i thought those keywords were built-in on perl
15:21:40 <lispy> Maddas: even 'if' in lisp can be implemented
15:21:42 <Maddas> lispy: What's special about adding any of those forms in lisp? Not much, I'd say, as they don't have any fancy syntax different from normal control constructs.
15:21:43 <lispy> in lisp
15:21:46 <monochrom> OH! You're saying since variables look like $x, x is a keyword.
15:21:47 <edwardk> araujo: my point is they don't have to fear collisions between their variable name spaces and their keywords, is all, nothing deep ;)
15:22:02 <araujo> ok
15:22:12 <edwardk> monochrom: yeah, and it was added fairly late in the design as i recall
15:22:15 <lispy> Maddas: the wey they evaluate their parameters varies that's what makes them special in lisp
15:22:20 <Maddas> lispy: I know.
15:22:34 <monochrom> I think "add syntax" sounded deep.  "add keywords" is clearer.
15:22:45 <araujo> i agree.
15:22:51 <Maddas> lispy: But I was mostly nitpicking ;-)
15:23:25 <edwardk> sorry got stuck in a phrasing i read on dave herman's blog where he bitched about the difficulty of extending the syntax or keyword set for ecmascript compared to scheme ;)
15:23:51 <Maddas> edwardk: They do have to fear collisions between functions and keywords anyway, though :-)
15:24:03 <monochrom> OK, but those committee people are notorious for making trivial things sound deep.
15:24:40 <monochrom> Or nevermind.
15:25:07 <araujo> That's the best way to stagnate a language.
15:25:18 <edwardk> maddas: yeah, hence why i was saying maybe one should mangle the keywords instead ;)
15:25:28 <edwardk> if there aren't many of them it seems sensible.
15:25:53 <monochrom> Hmm all keywords are like $x, variables are like x?
15:25:59 <edwardk> yeah
15:26:01 <edwardk> or @foo
15:26:02 <edwardk> or something
15:26:22 <monochrom> $instance Monad Router $where ...
15:26:24 <edwardk> @class Foo @where
15:26:24 <lambdabot> Unknown command, try @list
15:26:26 <twanvl> Like GHC core?
15:27:11 <edwardk> or something lower key, give up a symbol that is less obtrusive: .class Foo .where
15:27:27 <araujo> edwardk, Let me tell you ... that's something i still need to get used with perl
15:27:41 <araujo> And from my current point of view, don't find too much attractive.
15:27:45 <edwardk> sure
15:27:51 <lispy> i remember a discussion where they talked about java programmer celebrating their foreach construct...and lisp progammers saying, "Couldn't you just get the macro from a buddy?"
15:28:03 <edwardk> i gave it up moving to haskell, too
15:28:28 <monochrom> I bet the answer is "we get IDE code templates from a buddy"
15:29:02 <edwardk> basically trying to figure out my intermediate language's surface syntax, so these ideas are fresh in my mind.
15:29:04 <lispy> ibet your mom from a buddy ;)
15:29:09 <lispy> er get
15:29:23 <Luctus> I'm learning haskell classes, can someone please explain this error? http://rafb.net/paste/results/AzUfC090.html
15:29:37 <monochrom> bad bad bad boy you lispy.
15:29:52 <lispy> monochrom: :)
15:30:21 <lispy> Luctus: data Foo = Foo_ Int deriving Show drop the '_'
15:30:32 <lispy> data Foo = Foo Int deriving Show -- completely valid
15:30:37 <araujo> monochrom, Count Sun as a 'buddy'? :-)
15:30:41 <int-e> Luctus: Bar_ f+1.0 is parsed as (Bar_ f) + 1.0
15:30:42 <Luctus> lispy - I know, but that's not the problem
15:30:43 <edwardk> Bar_ f + 1.0 means (Bar_ f) + 1.0 not Bar_ (f + 1.0)
15:30:45 <monochrom> Luctus: you have to duplicate the code.
15:31:18 <int-e> Luctus: for that to work, the 1.0 must be converted to Bar, which requires an instance of Fractional for Bar. Which is what the error message says.
15:31:29 <edwardk> hence why it thinks that Bar has to be a Num to add it to 1.0 =)
15:31:34 <int-e> Luctus: the fix is to write Bar_ (f+1.0) :)
15:31:55 <int-e> @type 1.0
15:31:57 <lambdabot> forall t. (Fractional t) => t
15:31:58 <Luctus> aw..crap
15:32:12 <Luctus> that was too easy =)
15:32:29 <int-e> those error messages can be confusing.
15:32:32 <Luctus> thanks for the help
15:36:38 <chessguy> hey, i'm trying to use haskell to generate all matrices with a particular format. any suggestions how to go about it?
15:36:50 <edwardk> For a dependently typed language, would the following syntax be hard to read, pi takes the role of forall and Pi in a pure type system: data List a Nat where Cons : pi a. a -> List a n -> List a (n+1); Nil : pi a. List a 0
15:37:41 <edwardk> er insert a ? into my english where appropriate
15:38:02 * shapr swears at government-ish websites that *require* flash
15:38:12 <edwardk> chessguy, as an array?
15:38:18 <lispy> shapr: the irc requires flasH?
15:38:22 <chessguy> or a list, or whatever
15:38:23 <lispy> shapr: lame!
15:38:27 <lispy> er ircs
15:38:29 <lispy> bleh
15:38:30 <monochrom> define matrix data structure. generate values of that data structure. (up to this point, no regard to format. but only until now...) write a Show instance for this data structure that produces the desired format.
15:38:33 <lispy> i can't even type it
15:38:37 * lispy sneaks up on the letters
15:38:39 <lispy> irs
15:38:39 <edwardk> chessguy: define format? contents? values? shape?
15:38:41 <lispy> there
15:38:41 * shapr snickrs
15:38:51 <chessguy> sorry, i didn't define it very clearly
15:38:58 <shapr> I keep dropping my vowels, I guess that's how I got shapr.
15:39:21 * lispy keeps dropping his bowels but feels he shouldn't talk about it ;)
15:39:22 <chessguy> i'm looking at all bit matrices where i know like 10 entries
15:39:35 <shapr> ouch
15:39:36 <chessguy> not all
15:39:42 * lispy is just kidding
15:39:42 <chessguy> all 4x7
15:39:56 <monochrom> Hey shpr, how is it going?  (duck)
15:40:00 <chessguy> so i'm looking at 2^18 matrices, roughly 260k
15:40:15 <edwardk> ok.
15:40:25 <chessguy> and for each matrix, i need to perform an operation on it and look at the result
15:40:35 <shapr> If the the bus route pdf takes thirty seconds to load on my 2.4GHz desktop, what's the likelihood it'll take longer to display on my Nokia 770? I guess there's not a PDF optimizer available in Haskell? =)
15:41:06 <edwardk> so generate numbers from 0..2^18-1, shuffle the bits around to set the ones you know, and then compute. what kind of operation?
15:41:41 <chessguy> mmmm, not sure it's quite that simple
15:41:55 <Maddas> shapr: Ouch! Does it contain inappropriately large graphics? (Scaled down in geometry, but large in terms of data size)
15:42:20 <chessguy> for each matrix, i need to multiply it by a series of vectors
15:42:21 <shapr> Maddas: yes, amazingly large - http://www.bjcta.org/fileadmin/user_upload/bjcta.org/images/routes/BUS_system_map.pdf
15:42:23 <lambdabot> http://tinyurl.com/zwdvy
15:42:48 <monochrom> YES! Bus route maps are obviously scanned from paper prints to pdfs.
15:42:51 <chessguy> namely, all non-zero 1x4 bit vectors
15:42:56 <Maddas> Eeek.
15:43:06 <Maddas> monochrom: ...and saved as PDF ^_^
15:43:23 <Maddas> Wow, that map is quite terrible to use.
15:43:33 <dolio> edwardk: That's close to epigram for a case that simple, no?
15:43:35 <shapr> yup
15:43:39 <Maddas> (It only takes a few seconds to zoom in or so on my laptop, but still)
15:43:54 <shapr> Maddas: Try scrolling around... with xpdf that takes longer.
15:44:02 <edwardk> dolio: reasonably. not doing epigram's silly layout stuff though
15:44:21 <shapr> It's doing some sort of lazy drawing. In any case, I wish this PDF didn't suck. I need to take the bus to go get my driver's licens.
15:44:35 <shapr> I wish I could just drive my car to get my driver's license, but the state troopers might frown upon that practice.
15:44:38 <chessguy> can haskell convert from decimal to binary?
15:44:46 <shapr> Yes, NumExts
15:44:49 <dolio> edwardk: Yeah, I read a paper on it earlier today, and I'm not sure I'm thrilled with that kind of thing. You seem to be able to leave it out if you don't need it.
15:44:56 <Philippa> edwardk: what's wrong with foo.bar->baz (sans the pi) or perhaps foo:bar->baz as a syntax?
15:45:10 <Philippa> (given that pi generalises -> too)
15:45:23 <chessguy> maybe i should just generate all 2^28 matrices
15:45:31 <dolio> edwardk: In which case it turns into something a lot like Haskell GADT (which looks similar to what you're doing).
15:45:33 <monochrom> My CS department once had an experimental web page.  It sported a picture of our building.  OK that's good.  The picture was like 3 megapixels.  OK fine.  The HTML code asked to shrink it down to like 200x100.  OK so what's the point of sending out 3 megapixels?
15:45:45 <edwardk> phillipa: because i have pi and sigma types both, so i don't want to drop the designation or absorb it into { }'s
15:46:11 <shapr> monochrom: No point at all.
15:46:15 <chessguy> shapr: how do i tell whether that module is preloaded in hugs/ghci
15:46:19 <monochrom> I raised hell.
15:46:34 <Philippa> edwardk: fair enough :-)
15:46:41 <edwardk> dolio: and yeah i'm trying to keep the syntax close to haskell GADTs coz people like them and they aren't scary
15:47:20 <monochrom> read "123" converts decimal to binary.
15:47:26 <shapr> > raise "hell"
15:47:26 <lambdabot>  Not in scope: `raise'
15:47:33 <chessguy> > read "123"
15:47:34 <lambdabot>  Add a type signature
15:47:55 <monochrom> read "123" :: Int.   Clearly Int is in binary inside the computer.
15:48:00 <edwardk> hrmm, brb
15:48:05 <chessguy> > read "123" :: Int
15:48:06 <lambdabot>  123
15:48:30 <monochrom> That the output "123" is in decimal again is because show converts binary back to decimal!
15:48:45 <chessguy> monochrom, are you trying to be cute?
15:49:00 <monochrom> No. I'm trying to dispell a myth.
15:49:09 <shapr> chessguy: You could use Data.Bits.bit
15:49:30 <shapr> But try -package lang and then NumExts.showBin
15:49:39 <shapr> > NumExts.showBin "5"
15:49:40 <lambdabot>  Not in scope: `NumExts.showBin'
15:49:47 <chessguy> actually, if bitwise and/or is defined, i guess i could use that
15:49:50 <Lemmih> showBin?
15:50:01 <dons> morning
15:50:16 <shapr> g'day dons
15:50:31 <chessguy> > 3 & 1
15:50:32 <lambdabot>  Not in scope: `&'
15:50:34 <dolio> But "123" isn't decimal, either. It's stored in binary.
15:50:42 <shapr> chessguy: http://www.haskell.org/ghc/docs/latest/html/hslibs/sec-NumExts.html
15:50:44 <dolio> Just a different binary encoding than in Int.
15:50:44 <lambdabot> Title: 4.23. NumExts, http://tinyurl.com/n4lfw
15:50:47 <monochrom> Yeah, something like showBin will *preserve* the binary-ness of the number when formatting as string.  NOT converting decimal to binary.
15:51:24 <int-e> @index .&.
15:51:24 <lambdabot> Data.Bits, Foreign
15:51:33 <int-e> > 3 .&. 1
15:51:34 <lambdabot>  Add a type signature
15:51:38 <int-e> > 3 .&. 1 :: Int
15:51:39 <lambdabot>  1
15:51:56 <monochrom> I like mocking misguided questions like "how to convert string to number"
15:51:57 <chessguy> what's with the .'s?
15:52:02 <chessguy> function compositions?
15:52:07 <lennart> monochrom: There's nothing that says 123 is stored in binary in the computer.  It depends on what machine you are running on.  (Though non-binary machines are rare these days. :) )
15:52:16 <int-e> just parts of the infix operator.
15:52:34 <int-e> @index &
15:52:34 <lambdabot> Data.Graph.Inductive.Graph, Data.Graph.Inductive
15:52:39 <int-e> @index |
15:52:40 <lambdabot> bzzt
15:52:54 <int-e> > 3 .^. 5
15:52:54 <lambdabot>  Not in scope: `.^.'
15:53:02 <int-e> > 3 `xor` 5
15:53:03 <lambdabot>  Add a type signature
15:53:20 <monochrom> Yes, lennart, but the Platonic idea that representations are not the numbers themselves is too confounding for mere programmers.
15:53:37 <shapr> I've heard of trinary and decimal representations, are there others that have been used?
15:53:58 <int-e> > let (...) = enumFromTo in 3...5
15:53:59 <lambdabot>  [3,4,5]
15:54:26 <lennart> Flash memories actually use quadary (if that's a word)
15:54:35 <shapr> wow
15:55:10 <monochrom> I heard that a quantum computer could use any (whole number) base.
15:55:52 <monochrom> OH!  That reminds me.  Modems use a high whole number base too.
15:56:18 <lennart> ummmm, it's tricky to say what you mean by base exactly for a quantum computer
15:57:10 <monochrom> Modems use phase modulation.  You pick say 8 (or 16, or 32, ... as your precision permits) different phase angles.  Then you can send the digits 0-7.
15:58:15 <monochrom> So basically the way they could go up from 14.4kbps to 28.8kbps to ... is by having more different phase angles.
15:58:16 <lennart> yep
15:58:52 <dolio> edwardk: Your language won't be dependent on xemacs, will it? :)
15:58:52 <lennart> the symbol rate for modems is something like 2400 baud
15:58:58 <reilly> does anyone have any advice on picking a framework for working with XML in haskell?
15:59:14 <reilly> Haskell XML Toolbox looks pretty good
15:59:26 <SamB> eeeeek
15:59:30 <reilly> but
15:59:31 <SamB> it is decieving!
15:59:35 <monochrom> I like arrows.  I go with the Haskell XML Toolbox.
15:59:37 <shapr> reilly: HaXml is nice too.
15:59:43 <SamB> you will notice that it exports *waaaay* too much from each module!
15:59:47 <reilly> how is it deceiving?
16:00:17 <reilly> over export is potentially more than annoying
16:00:17 <Maddas> monochrom: You can also just use more different amplitude steps with the same number of angles :)
16:00:25 <Maddas> s/ different//
16:01:03 <reilly> HaXml documentation looks weak
16:01:35 <chessguy> > let Matrices = [1..20] in filter (>10) Matrices
16:01:36 <lambdabot>  Not in scope: data constructor `Matrices'
16:01:42 <shapr> I've had positive experiences with both HXmlToolbox and HaXml.
16:02:00 <musasabi> HaXml is easier to use.
16:02:04 <reilly> shapr: what do you like about each, what annoyed you?
16:02:16 <krin> [IRC] krin on #debian (+Pcfntl 691,lag:0) lilo: http://freenode.net/news.shtml | 3.1r3: /msg dpkg sarge 3.1r3 | STATUS: http://wi
16:02:16 <krin>     channel #debian
16:02:16 <krin> <quintin> streuner: look--I'm just going to ignore you now, 'cause you are
16:02:17 <lambdabot> Title: freenode news: 23 September 2006
16:02:18 <krin>           really pissing me off.  this is *not* a driver issue!
16:02:20 <krin> <eeyore-> slept: if you see IRQ > 20-ish, then you have (and are using) IO
16:02:28 <monochrom> http://www.haskell.org/pipermail/haskell-cafe/2006-August/017737.html  is a reason against HaXml
16:02:30 <lambdabot> Title: [Haskell-cafe] HaXml question, http://tinyurl.com/hav23
16:02:35 <shapr> HXT doesn't have enough intro docs. I set up a bunch of unit tests to assuage that, but Uwe didn't turn them into an intro as I had hoped =)
16:02:57 <SamB> shapr: it also has *waaay too many* exports!
16:03:01 <SamB> don't forget that part!
16:03:11 <shapr> HaXml doesn't do XSLT, and is generally more strongly typed than HXT, and sometimes that gets in the way.
16:03:26 <chessguy> can i define a constant in a module?
16:03:29 <shapr> On the other hand, the author of HaXml shows up on #haskell regularly, and is very helpful.
16:03:41 <monochrom> The type Content -> [Content] is very limiting.
16:03:46 <shapr> The author/maintainer of HXT does not show up on #haskell, but he does respond quickly to email.
16:03:48 <SamB> showing up on #haskell is a *biiiig* plus
16:04:08 <SamB> shapr: but doesn't seem to be on the libraries list!
16:04:14 <shapr> In my opinion, HaXml is easier to learn, and easier to use if you don't need it for stuff that HXT can do and HaXml can't :-)
16:04:41 <shapr> Also, I really like where HaXml is going with the XmlContent type that was introduced in 1.14
16:04:56 <reilly> so more stateful walking an XML tree is a weakness of HaXml?
16:05:02 <reilly> walking of
16:05:03 <SamB> huh?
16:05:06 <shapr> But most production Haskell code still uses HaXml 1.13 with its years old familiar API.
16:05:09 <reilly> monocrom's link
16:05:19 <monochrom> HaXml offers no help on stateful walking.
16:05:23 <reilly> right
16:05:35 <SamB> other toolkits do?
16:05:40 <reilly> but that looks ok in HXt, provided you grok arrows
16:05:41 <monochrom> HXT does, but providing a state arrow.
16:05:53 <SamB> oh, you mean the swis-army-arrow?
16:06:00 <SamB> er, *swiss
16:06:01 <monochrom> Yah
16:06:12 <SamB> yow!
16:06:36 <profmakx> @yow
16:06:36 <profmakx> ?
16:06:36 <lambdabot> CONGRATULATIONS!  Now should I make thinly veiled comments about
16:06:37 <lambdabot> DIGNITY, self-esteem and finding TRUE FUN in your RIGHT VENTRICLE??
16:06:51 <monochrom> s/but/by/
16:07:00 <shapr> My right ventricle is not in the least enjoyable. In fact, it's one of my problems in life.
16:07:24 <shapr> Doh, I meant left ventricle...
16:07:34 <monochrom> The proc...do (arrow) notation is also very readable.
16:07:52 <SamB> shapr: they are hard to tell apart if you can't see 'em and aren't doctor person!
16:08:08 <shapr> reilly: Anyway, I can scrape up production code for both HaXml and HXT if I have time.
16:08:09 <reilly> i've spent some time with patterson's and hughes' papers
16:08:27 <reilly> shapr: thanks, i would appreciate it
16:09:51 <monochrom> http://www.vex.net/~trebla/haskell/hxt-arrow/    but I have only covered very basic stuff, specifically just up to >>>.  I am now writing the lesson on &&& and the proc-do notation.
16:11:42 <aFlag> I want to learn more about monads. I read the monads chapter on "haskell: the craft of functional programming" but I still don't know the subject really well
16:12:02 <shapr> @google "all about monads"
16:12:07 <lambdabot> http://www.nomaware.com/monads/
16:12:07 <lambdabot> Title: Nomaware | Monads
16:12:35 <aFlag> thanks
16:12:36 <Adamant> "Tackling the Awkward Squad" is good
16:12:42 <reilly> thanks monochrom
16:12:45 <shapr> reilly: Hm, my HXT code was for HXT 2.02, about two years ago. On the good side, I got paid to write it =)
16:12:57 <reilly> nice
16:14:40 <shapr> hiya mwc, how's code?
16:14:44 <reilly> my feeling on monads is that the "theory" is a barrier if you start with it but not a big deal if you spend a bunch of time taking them apart and puting them back together again
16:14:51 <dibblego> what wiki software does haskell.org use?
16:15:01 <araujo> mediawiki ?
16:15:19 <mwc> shapr, just got back from thanksgiving in dialup country
16:15:45 <monochrom> we were just talking about the working principles of modems :)
16:17:53 <reilly> modems still exist?
16:18:02 <reilly> wow
16:18:26 <reilly> next thing you'll be telling me is that people still save their programs on paper tape
16:18:41 <monochrom> I have programs on cassette tape.
16:19:12 <dcoutts> monochrom, I sometimes record things off the radio too ;-)
16:19:16 <monochrom> I still write with a fountain pen.
16:19:28 <reilly> i still remember the smell of oiled paper tape for an ASR 33 teletype
16:19:33 <monochrom> I have computer programs, written in BASIC, on cassette tape.
16:19:52 <monochrom> (They were not broadcasted off radio.)
16:20:29 <monochrom> Hmm, not a bad idea!
16:20:46 <dcoutts> programme/program
16:22:00 <monochrom> "This is your PJ monochrom again!  Tonight we'll enjoy Dijkstra's shortest path algorithm, Hoare's quicksort, and a shooting game I have just written."  <funny electronic tone>
16:22:21 <shapr> I still use a slide rule.
16:22:28 <shapr> But I'm looking for a better slide rule.
16:25:32 <shapr> I want a prosthaphaeretic slide rule.
16:25:40 <dibblego> lambdabot is throwing exceptions
16:26:18 <hoopy> Hello.
16:26:22 <aFlag> hi
16:26:43 <hoopy> I have a macintosh with an intel processor
16:26:57 <aFlag> congratulations
16:27:12 <hoopy> what compilers are available for my platform?
16:27:17 <hoopy> aFlag, thanks!
16:27:33 <aFlag> doesn't ghc work there?
16:27:42 <hoopy> last I checked, no
16:28:07 <reilly> hoopy: ghc-6.5 runs there, but there isn't a standard binary distro yet
16:28:32 <reilly> go here http://hackage.haskell.org/trac/ghc/wiki/X86OSXGhc
16:28:36 <lambdabot> Title: X86OSXGhc - GHC - Trac, http://tinyurl.com/fnmrx
16:29:18 * edwardk waves hello.
16:29:32 <emk> Wow, monad transformers make my brain hurt.
16:29:41 <reilly> i'm running my own build of the 6.6 branch from darcs at http://darcs.haskell.org/ghc-6.6/ghc
16:29:44 <lambdabot> Title: Index of /ghc-6.6/ghc
16:30:00 <hoopy> reilly, are you running an intel mac?
16:30:05 <reilly> yes
16:30:10 <reilly> acmbook pro
16:30:13 <reilly> macbook
16:30:33 <edwardk> emk: monad transformers are nifty keen though
16:30:35 <hoopy> i have a macbook, but i'm using it like a desktop these days, external input devices and a nice large LCD
16:30:49 <reilly> same here
16:30:56 <edwardk> i carry a StateT Foo IO around with me everywhere I go it seems =)
16:30:58 <emk> edwardk: They are very clever, but yow, they're heavy Haskell. :-)
16:31:54 <reilly> anyway, the first link will give you a decent build till 6.6 is released
16:31:59 <emk> Should I generally be using Control.Exception instead of Control.Monad.Error.ErrorT for most normal purposes?
16:32:43 <hoopy> thanks
16:33:00 <hoopy> hopefully I'll be able to wrap my mind around this haskell business
16:33:02 <dons> ?users
16:33:24 <lambdabot> Maximum users seen in #haskell: 256, currently: 224 (87.5%), active: 40 (17.9%)
16:43:26 <chessguy> is there an upper limit for Integers in Haskell?
16:43:48 <Pseudonym> Yes.  Heap space is a practical limit.
16:44:02 * xerox ponders a trip to London
16:44:12 <dibblego> hardware limit
16:44:26 <chessguy> maybe a better way to ask, will i have problems if i treat 136 million as an Integer?
16:44:29 <Pseudonym> Apart from that, log_2(n) < size_t
16:44:43 <chessguy> what's size_t?
16:44:57 <Pseudonym> 136 million is small.
16:45:05 <Pseudonym> chessguy: It's C.  Ignore it.
16:45:15 <Pseudonym> > L.fac 10000
16:45:16 <lambdabot>  Not in scope: `L.fac'
16:45:19 <Pseudonym> Grrr.
16:45:32 <Pseudonym> > product [1..10000]
16:45:35 <lambdabot>  2846259680917054518906413212119868890148051401702799230794179994274411340003...
16:45:38 <Pseudonym> There you go.
16:45:47 <chessguy> heh. what's that?
16:45:53 <aFlag> even Int should be able to hold 136 million
16:46:08 <dons> > maxBound :: Int
16:46:09 <lambdabot>  2147483647
16:46:16 <SamB> > maxBound :: Integer
16:46:16 <chessguy> oh cool
16:46:17 <lambdabot>  add an instance declaration for (Bounded Integer)
16:46:17 <lambdabot>   In the expression: ma...
16:46:25 <Pseudonym> And if that's not enough...
16:46:29 <Pseudonym> maxBound :: Word64
16:46:38 <Pseudonym> > maxBound :: Word64
16:46:38 <dons> > maxBound :: Word64
16:46:39 <lambdabot>  18446744073709551615
16:46:40 <lambdabot>  18446744073709551615
16:46:44 <SamB> > 136 * 10^6 :: Int
16:46:44 <chessguy> :)
16:46:45 <lambdabot>  136000000
16:47:00 <chessguy> works for me
16:47:00 <Pseudonym> 2^64 ought to be enough for everyone.
16:47:03 <dons> > 136 * 10^6 * 10^6
16:47:04 <lambdabot>  136000000000000
16:47:39 <dons> Pseudonym: we have a sign up in the unsw/cse microkernel group to that effect (talking about 64 bit address spaces) :)
16:47:43 <aFlag> hum, Pseudonym printed the largest number, I guess he wins
16:48:00 <Pseudonym> > ackermann 4 10000
16:48:01 <lambdabot>  Not in scope: `ackermann'
16:48:02 <Pseudonym> Damn.
16:48:04 <dons> > 2 ^ 100
16:48:06 <lambdabot>  1267650600228229401496703205376
16:48:13 <dons> > 2 ^ 1024
16:48:14 <lambdabot>  1797693134862315907729305190789024733617976978942306572734300811577326758055...
16:48:21 <dons> > 2 ^ 2048
16:48:23 <lambdabot>  3231700607131100730071487668866995196044410266971548403213034542752465513886...
16:48:24 <Pseudonym> @let ackermann 0 n = n + 1
16:48:26 <lambdabot> Defined.
16:48:28 <xerox> `...' considered harmful.
16:48:33 <dons> heh
16:48:46 <Pseudonym> @let ackermann m 0 = ackermann (m-1) 1
16:48:47 <lambdabot> Defined.
16:48:57 <dons> i hope this works.
16:48:58 <Pseudonym> @let ackermann m n = ackermann (m-1) (ackermann m (n-1))
16:49:00 <lambdabot> Defined.
16:49:05 <Pseudonym> > L.ackermann 2 2
16:49:07 <lambdabot>  7
16:49:10 <Pseudonym> Woohoo.
16:49:13 <chessguy> > 3 .&. 8
16:49:14 <lambdabot>  Add a type signature
16:49:14 <dons> yes, looks good:
16:49:15 <xerox> Great :)
16:49:17 <dons> ackermann 0 n = n + 1
16:49:17 <dons> ackermann m 0 = ackermann (m-1) 1
16:49:18 <dons> ackermann m n = ackermann (m-1) (ackermann m (n-1))
16:49:22 <chessguy> > 3 .&. 8 :: Integer
16:49:22 <dons> is the actual src in the file
16:49:23 <lambdabot>  0
16:49:26 <Pseudonym> dons: Tried it before.
16:49:35 <Pseudonym> > L.ackermann 3 4
16:49:36 <lambdabot>  125
16:49:38 <dons> ah cool. i've not :)
16:49:50 <Pseudonym> > L.ackermann 4 2
16:49:52 * Pseudonym holds breath
16:49:53 <LiquidEngineer> hi
16:49:54 <lambdabot> Terminated
16:49:56 <Pseudonym> Damn.
16:50:01 <LiquidEngineer> lol
16:50:04 <chessguy> > 3 .&. 9 == 1
16:50:05 <lambdabot>  Add a type signature
16:50:07 <LiquidEngineer> fun time to enter hte room
16:50:11 <Pseudonym> LOL!
16:50:13 <Pseudonym> Sorry.
16:50:21 <chessguy> > (3 .&. 9 :: Integer) == 1
16:50:22 <LiquidEngineer> :)
16:50:22 <lambdabot>  True
16:50:30 <LiquidEngineer> I'm curious, does anyone use wxHaskell?
16:50:32 <chessguy> > (3 .&. 9 :: Integer) == 0
16:50:34 <lambdabot>  False
16:50:52 <emk> LiquidEngineer: Some wx experience, but not in Haskell...
16:50:55 <xerox> Hence 1 /= 0.
16:51:02 <dons> gtk2hs is probably more widespread these days, LiquidEngineer
16:51:11 <Pseudonym> ackermann 4 2i is alrger than the number of atoms in the visible universe.
16:51:13 <chessguy> grrr
16:51:21 <chessguy> why doesn't winHugs like .&.
16:51:27 <dons> import Data.Bits ?
16:51:32 * dcoutts is currently hacking on gtk2hs
16:51:51 <mwc> dcoutts, point release that builds with 6.4.2 coming soon?
16:51:54 <xerox> dcoutts it may happen that I'll be in London next week!
16:52:07 <dcoutts> xerox, cool! come up to Oxford :-)
16:52:07 <emk> wxWidgets produces professional-quality Windows applications, reasonable GTK applications, and iffy Mac applications.
16:52:16 <xerox> dcoutts or succ next, I don't know.  Yeah I could :D
16:52:18 <LiquidEngineer> iffy Mac stuff?
16:52:24 * LiquidEngineer has a mac
16:52:40 <xerox> G'night for now
16:52:41 <dcoutts> mwc, you mean 6.6, it builds fine with 6.4.2
16:52:58 <mwc> Oh, I seem to remember having to get a patch from darcs to make it work with the newer cabal or something
16:53:04 <mwc> maybe that was something else on my system...
16:53:08 <emk> LiquidEngineer: I haven't tried porting our stuff to MacOS X in a couple of years, and I hear wxMac has improved substantially, but it used to be noticably weaker than wxGTK and wxMSW.
16:53:18 <mwc> emk, absolutely was.
16:53:33 <mwc> likely to crash randomly... I've been hearing it's better too.
16:54:03 <mwc> But now GTK is native on mac os x... so I'd rather use that if I had to do a 3-platform program.
16:54:05 <dcoutts> mwc, wouldn't have been gtk2hs, it doesn't use Cabal yet
16:54:32 <emk> LiquidEngineer: But for solid Win32 apps with GTK portability, it's a great toolkit. We've got serious end-user code running on it, and we love it.
16:54:35 <dcoutts> xerox, I've got a whole spare room with bed you can stay in
16:54:49 <dcoutts> xerox, I'll show you around Oxford
16:55:06 <mwc> dcoutts, I checked my portfile, it was actually a patch for the xulrunner stuff.
16:55:15 <dcoutts> mwc, ah, that figures
16:55:22 <mwc> Oxford eh?
16:56:29 <chessguy> @paste
16:56:29 <lambdabot> http://paste.lisp.org/new/haskell
16:57:09 <liyang> (do I smell an imminent Gtk2Hs release?)
16:57:17 <dcoutts> liyang, not quite yet
16:57:18 <Pseudonym> No, sorry, that's my socks.
16:57:23 <dcoutts> hah hah
16:57:28 <liyang> >.<;;
16:57:36 <liyang> Eww.
16:58:51 <ndm> dcoutts, do i smell one as soon as GHC 6.6 comes out for Windows....
16:59:03 <dcoutts> ndm, probably not
16:59:10 <dcoutts> as that's tomorrow morning
16:59:37 * ndm cries in a corner
16:59:42 <mwc> 6.6 is coming out on windows tomorrow?
16:59:42 <dcoutts> poor ndm
16:59:52 <dcoutts> on all platforms
16:59:56 <mwc> Woohoo!
17:00:05 <Igloo> Well, the Windows installer may well be lagged
17:00:09 <mwc> Did they fix some of the random OSX/ppc crashes?
17:00:12 <dcoutts> well, it was supposed to be today, but last minute hitches etc
17:00:17 <ndm> Igloo: i have offered a free and open source installer for GHC...
17:00:23 <LiquidEngineer> gtk is native?
17:00:32 <dcoutts> LiquidEngineer, depends on your point of view
17:00:32 <LiquidEngineer> on MacOS X?
17:00:34 <ndm> LiquidEngineer: no, unless you use Linux/GNOME
17:00:49 <Igloo> ndm: Is it any better featurewise than the current one?
17:00:49 * LiquidEngineer doesn't consider running X Windows "native"
17:00:49 <dcoutts> LiquidEngineer, it doesn't use X11 on OSX anymore
17:01:03 <LiquidEngineer> dcoutts: how does that work?
17:01:05 <ndm> Igloo: do you consider "can actually be built by more than one person" a feature?
17:01:06 <Igloo> ndm: And how much work would it be for you to make it?
17:01:07 <dcoutts> LiquidEngineer, and of course it's never used X11 on windows
17:01:19 <dcoutts> LiquidEngineer, it uses native graphics libs
17:01:19 <Igloo> ndm: Apart from that
17:01:23 <ndm> Igloo: it would move to being a simple script run for all nightly builds
17:01:45 <LiquidEngineer> so...if I'm doing wxHaskell development and want ot make a mac app, what's the best way?
17:01:46 <ndm> Igloo: it installs, uninstalls, and doesn't trash Hug's registry settings - what more could you want ;)
17:02:09 <Igloo> ndm: Err, I'd quite like answers to my questions  :-)
17:02:12 <SamB> LiquidEngineer: maybe it just *looks* wrong
17:02:19 <dcoutts> LiquidEngineer, try compiling it on OSX, that ought to work :-)
17:02:32 <LiquidEngineer> ah
17:02:38 <LiquidEngineer> so I don't have to do anything special.  Neat.
17:02:53 <Igloo> (or at least answers I can understnad, if those were answers)
17:02:55 <ndm> Igloo: it would basically be a working installer, that can be easily build by anyone, entirely open source, but has no advantages over the existing one, apart from cooperating with WingHugs
17:03:15 <ndm> Igloo: i.e. if the existing one could actually be built freely, i'd stick with that
17:03:23 <Igloo> OK, thanks
17:03:31 <LiquidEngineer> Does anyone kow what the progress is on Mac GHC 6.4.2?
17:03:54 <Igloo> LiquidEngineer: Would you prefer a 6.4.3 to 6.6?
17:03:57 <mwc> It seemed to work. I remember it randomly segfaulting when building really large packages
17:04:01 <dcoutts> ndm, so when are we going to get a win32 binary cabal package builder ?
17:04:17 <ndm> dcoutts, when i get round to it - i have a week scheduled towards the end of october
17:04:20 <LiquidEngineer> I'm confused
17:04:24 <dcoutts> ndm, oh cool
17:04:35 <ndm> dcoutts, to make HsInstall, which covers Hat, Yhc, WinHugs and Cabal
17:04:45 <dcoutts> ndm, perhaps you can piggyback on the hackagedb collection
17:04:46 <LiquidEngineer> http://haskell.org/ghc/download.html
17:04:47 <ndm> (and is written in C, despite the Hs prefix)
17:04:48 <lambdabot> Title: The Glasgow Haskell Compiler
17:04:53 <LiquidEngineer> that says the latest version is 6.4.2
17:04:55 <Igloo> LiquidEngineer: 6.6 should work fine if that's what you were asking?
17:04:58 <Igloo> It is, currently
17:05:07 <ndm> dcoutts, hopefully, but the windows installer code needs doing custom, but yes, using their package list
17:05:12 <LiquidEngineer> then what's 6.6?
17:05:21 <SamB> ... the next version?
17:05:22 <Igloo> The almost-released next version
17:05:35 <LiquidEngineer> ah
17:05:36 <LiquidEngineer> cool
17:05:49 * SamB wonders if he can get his inliner changes working & included in the release?
17:05:50 <LiquidEngineer> wierd versioning
17:06:13 <LiquidEngineer> I suppose it's the even/odd stable/unstable thing?
17:06:17 <dcoutts> right
17:06:20 <Igloo> yup
17:09:12 <LiquidEngineer> ah
17:09:33 <ndm> SamB, unlikely....
17:09:33 <LiquidEngineer> does GHC change language features as it updates or just improvements to compiling stuff?
17:09:45 <ndm> LiquidEngineer: both
17:10:35 <dcoutts> LiquidEngineer, though the minor releases, eg 6.4 -> 6.4.1 don't change language features or libs
17:10:40 <LiquidEngineer> ah
17:10:51 <LiquidEngineer> so where does teh haskell language standard come form?
17:10:52 <LiquidEngineer> from?
17:11:00 <dcoutts> see haskell.org
17:11:03 <LiquidEngineer> ah
17:11:11 <dcoutts> there's a standardised Haskell98
17:11:26 <dcoutts> and then a couple official extensions
17:11:30 <LiquidEngineer> I assume GHC implements Haskell98 with extras?
17:11:35 <dcoutts> and then a large number of extras
17:11:48 <SamB> nobody can stand to use Haskell98 without at least the first two extensions
17:11:50 <dcoutts> some of which are defacto standards
17:11:51 <ndm> LiquidEngineer: in a similar way that C++ implements C "with extras"
17:11:59 <SamB> well, or maybe just the first one
17:12:14 <dcoutts> SamB, the library namespace one ?
17:12:23 <SamB> ndm: but GHC actually does implement Haskell 98!
17:12:35 <ndm> SamB, i know, mostly...
17:12:36 <SamB> dcoutts: yeah, that one
17:12:51 <ndm> there are some GHC'ism's that slip through without -fglasgow-exts
17:12:53 <SamB> ndm: what won't it accept? or what types does it do wrong?
17:13:11 <ndm> SamB, recursive modules ;
17:13:26 <LiquidEngineer> so, should I use gtk2hs instead of wxHaskell if I wanna do mac development?
17:13:30 <SamB> oh, well, there is that one
17:13:37 <dons> araujo: http://www.haskell.org/haskellwiki/HWN/es!
17:13:39 <lambdabot> Title: HWN/es! - HaskellWiki
17:13:44 <dons> araujo: great work on the spanish translatoin
17:13:45 <ndm> LiquidEngineer: i'd recommend Gtk2Hs regardless of which OS you are on
17:13:52 <dcoutts> LiquidEngineer, depends what you want, both now can work without X11
17:13:58 <dons> araujo++
17:14:19 <LiquidEngineer> ndm: ah
17:14:20 <LiquidEngineer> why?
17:14:26 <dcoutts> LiquidEngineer, Gtk2Hs is a bit better supported and documented imho
17:14:46 <dcoutts> but then I develop it, so I'm biased
17:14:52 <LiquidEngineer> ah
17:15:01 <LiquidEngineer> I've never programmed with either toolkit
17:15:01 <SamB> hehe
17:15:04 <ndm> LiquidEngineer: if something goes wrong with wxHaskell, you're screwed, or have minimal support resources, if its with Gtk2Hs you complain to dcoutts, he fixes it the next day
17:15:09 <SamB> dcoutts: you get enough support right?
17:15:15 <LiquidEngineer> is gtk easy to learn?
17:15:17 <SamB> you never forget to answer your emails ;-)
17:15:26 <dons> syntaxfree, this is what I was thinking of yesterday, except in portugese, http://www.haskell.org/haskellwiki/HWN/es/2006-10-10
17:15:29 <lambdabot> Title: HWN/es/2006-10-10 - HaskellWiki, http://tinyurl.com/kq6nk
17:15:33 <SamB> (that is, the ones you send yourself asking for help with gtk2hs)
17:15:39 <dcoutts> ndm, unless you ask me to do a win32 build for the next day :-)
17:15:41 <ndm> LiquidEngineer: yes, easy enough - i learnt it without knowing Gtk or anything first
17:15:54 <ndm> LiquidEngineer: but bookmark the Hoogle Gtk2Hs is my suggestion!
17:15:59 <dcoutts> SamB, oh I always reply to my emails to myself promptly
17:16:06 <dons> ?seen syntaxfree
17:16:07 <lambdabot> I saw syntaxfree leaving #haskell 10h 50m 21s ago, and .
17:16:17 <ndm> dcoutts, but i know that if i ask on a public mailing list with an insulting phrase you would do it :)
17:16:24 <dcoutts> ndm, hah hah
17:16:56 <ndm> although i have no intention of upgrading to 6.6 until at least 6.6.1, so will not be bugging you
17:16:56 <LiquidEngineer> Hoogle?
17:17:11 <dcoutts> LiquidEngineer, it's a Haskell API search
17:17:12 <ndm> LiquidEngineer: http://haskell.org/hoogle
17:17:14 <lambdabot> Title: Hoogle
17:17:16 <Pseudonym> You know that anything ending in "oogle" has to be a search system.
17:17:26 <ndm> The environment variable HUGSFLAGS, if set.
17:17:38 * ndm has paste issues...
17:17:39 <ndm> http://haskell.org/hoogle/?package=gtk
17:17:41 <lambdabot> Title: Hoogle
17:18:40 <ndm> LiquidEngineer: if you can do anything without Hoogle, I'm impressed, Haskell.org went down taking Hoogle with it and I ended up reading papers rather than coding...
17:19:16 <LiquidEngineer> lol
17:19:18 <LiquidEngineer> I'm a student
17:19:20 <LiquidEngineer> I do simple stuff
17:19:34 <LiquidEngineer> I wanna do some XML parsing and RSS feed reading though
17:19:40 <LiquidEngineer> something tells me I'll be looking at Hoogle for that
17:20:02 <ndm> just use HaXml or HXT
17:20:13 <ndm> or haskell-source-extensions (HSX)
17:20:35 <ndm> HSX is great for generating XML
17:20:44 <ndm> HaXml would be my choice for reading it
17:20:59 <dcoutts> mine too
17:21:14 <araujo> dons, yay!
17:21:33 <araujo> dons, cool, i will add a link to the main page :-)
17:22:03 <araujo> dons, that was pretty much straight forward, i think i could do it every week :-)
17:22:30 <dons> great!
17:22:31 <shapr> bringert has extended stepcut's RSS.hs
17:22:47 <dons> i've added a link to it from the main HWN page already
17:23:09 <dons> and also from the headlines on sequence.complete.org
17:23:35 <dons> see here http://www.haskell.org/haskellwiki/HWN and http://sequence.complete.org/
17:23:37 <lambdabot> Title: Haskell Weekly News - HaskellWiki
17:24:24 <dons> araujo, in future HWN editions i'll include a [es] link in the first paragraph, pointing to http://www.haskell.org/haskellwiki/HWN/es
17:24:26 <lambdabot> Title: HWN/es - HaskellWiki
17:24:50 <araujo> dons, great!
17:24:55 <LiquidEngineer> what's RSS.hs?
17:24:58 <dons> (which you might like to translate that page too ;)
17:25:03 * ndm heads to sleep
17:25:07 <LiquidEngineer> it sounds like it might be useful for my purposes: I need to read some RSS feeds
17:25:57 <shapr> LiquidEngineer: http://www.cs.chalmers.se/~bringert/darcs/haskell-rss/doc/
17:26:01 <lambdabot> http://tinyurl.com/jmgjj
17:26:19 <gmh33__> woo I successfully bound Router monad 1 to Router monad 2
17:26:23 <gmh33__> >_>
17:26:23 <gmh33__> <_<
17:26:45 <LiquidEngineer> ah
17:26:54 <LiquidEngineer> I don't suppose there's a library specifically for reading RSS?
17:26:55 <LiquidEngineer> :)
17:27:57 <araujo> dons, added to the TODO :-)
17:28:04 <lispy> LiquidEngineer: what sorts of things would it need to do?
17:28:11 <lispy> LiquidEngineer: i mean haxml reads xml
17:28:16 <araujo> dons, that would definitely culd bring more spanish HWN readers.
17:28:17 <lispy> LiquidEngineer: wouldn't that be enoguh?
17:28:31 <SamB> what if it was RSS 3.0 or whatever?
17:28:41 <SamB> you know ... the REALLY simple one?
17:28:42 <araujo> h, s/culd//
17:29:02 * lispy doesn't use rss so knows next to nothing about it
17:29:23 <LiquidEngineer> I'm guessing haxml would be it then
17:29:26 <LiquidEngineer> :)
17:29:28 <araujo> dons, i hope you don't mind, i have added a small note at the end for people to redirect spanish collaboration to me on the HWN.
17:29:49 <araujo> dons, Which i could also pass to you for english if any.
17:29:56 <araujo> so we can have a nice feedback.
17:30:42 <dons> arau	yes. that's a good idea.
17:31:10 <lispy> dons: how's code?
17:31:12 <dons> also, you should linke from http://www.haskell.org/haskellwiki/Haskell.es to HWN/es i think
17:31:13 <lambdabot> Title: Haskell.es - HaskellWiki
17:31:33 <dons> lispy: slow. getting organised for my flight tomorrow
17:31:48 <lispy> dons: oh, you mentoined that...going to padl?
17:31:59 <dons> no no. to google! :)
17:32:08 <dons> padl is in january
17:32:17 <lispy> Oh, right in sf?
17:32:23 <dons> yep.
17:32:23 <araujo> dons, yeah, doing that
17:32:38 <lispy> dons: ah, hope you enjoy sf, it's a cool city
17:32:44 <lispy> dons: bring layers
17:32:55 <dons> oh, a bit cold?
17:33:01 <lispy> if it's anything like oregon you'll be adding and removing them through out the day :)
17:33:07 <lispy> i hear it's just kinda 60 all the time
17:33:12 <lispy> and often foggy
17:33:28 <lispy> which is sort of the description of my home town actually
17:33:34 <lispy> which is also near the coast
17:33:54 <Igloo> lispy: Are you going to PADL, then?
17:34:00 <dons> ok. cheers. yeah, should be fun.
17:34:20 <lispy> Igloo: no plans :)
17:34:36 <dons> padl is in Nice anyway
17:34:42 <lispy> dons: i've also heard that this is summer time for SF
17:34:49 <lispy> dons: so it may actually be better than 60 there
17:34:54 <dons> oh? good!
17:35:09 <lispy> dons: eh, probably best to go with a travel guide :)
17:35:21 <lispy> all my info is second hand
17:36:48 <Igloo> Huh? Do seasons in SF not obey the tilt of the Earth?
17:37:10 <lispy> just what i heard from someone that has spent a few years there
17:37:24 <lispy> she said that their summer always came in fall
17:38:12 <monochrom> There is also ocean current, which complicates the matter.
17:38:28 <lispy> http://www.wunderground.com/US/CA/San_Francisco.html
17:38:31 <lambdabot> http://tinyurl.com/5qkkf
17:38:36 * ThreeQ lives across the bay from SF
17:38:40 <lispy> looks like the forcast is high 60's
17:38:41 <ThreeQ> dunno how similar our weather is though
17:39:35 <lispy> this site is probably a bit better though
17:39:37 <lispy> http://www.sanfrancisco.com/weather/index.shtml
17:39:38 <lambdabot> Title: San Francisco Weather, http://tinyurl.com/hujtx
17:39:53 <dons> and I suppose up in Mountain View it'll be different again.
17:40:10 <lispy> "...making September, October and early November the three best months to visit San Francisco."
17:40:22 <lispy> dons: yeah, should be less coastal there
17:40:54 <dons> ThreeQ: you had much experience catching the caltrain , that heads up to mountain view?
17:41:14 <dons> or lispy? easy system? to follow?
17:41:17 <ThreeQ> dons: yes, actually
17:41:51 <ThreeQ> easy?
17:42:38 <ThreeQ> are you taking it on a weekend or during the week?
17:42:57 <lispy> dons: oh i didn't use caltrain, but san jose light rail wasn't bad...pretty good by US standards (which are very low)
17:43:20 <ThreeQ> on the weekend it comes every hour and stops at every stop
17:43:30 <lispy> dons: some funny things at the san jose stations...the reader board only nells you the current time..no info about the transit
17:44:22 <dons> say I was arriving at sfo and heading up to MV, that'd be doable when i'm half asleep from jet lag?
17:44:33 <dons> on friday.
17:44:39 <lispy> heh
17:44:41 <ThreeQ> you'd have to take bart from SFO to millbrae
17:45:16 <ThreeQ> then get on caltrain there
17:45:25 <ThreeQ> and make sure whatever train you're on actually stops at mountain view
17:46:30 <SamB> okay, so, UnfoldingGuidance isn't stored in interface files is it?
17:46:36 * lispy heads to the local lug's hacknight
17:46:53 * dons drwons in packet loss
17:47:00 <lispy> "Next, on The UnfoldingGuidance, ..."
17:47:02 <dons> ThreeQ: right. ok. ounds easy enough
17:47:15 <SamB> dons: you wouldn't happen to know?
17:47:28 <dons> i've got the timetable, looks like most trains stop at mountain view
17:47:31 * lispy &
17:47:41 <dons> SamB: its in the .hi files, isn't it?
17:47:44 <LiquidEngineer> Hmm....
17:48:02 <LiquidEngineer> Haxml does "xml parsing?"
17:48:16 <LiquidEngineer> does that mean I can get an xml file and then extract data from it easily?
17:48:23 <LiquidEngineer> that's what parsing means in this context, right?
17:48:48 <LiquidEngineer> I essentially want to do html scraping, but there's an RSS feed, so I figure, why not go with that
17:49:20 <dons> you could hack apart lambdaFeed for the xml handling ?
17:49:39 <LiquidEngineer> lambdaFeed?
17:49:48 <dons> ?where  lambdaFeed
17:49:48 <lambdabot> http://www.cse.unsw.edu.au/~chak/haskell/lambdaFeed/
17:50:07 <dons> not sure how it does xml, but it does _sometthing_ with rss
17:50:41 <monochrom> Yes, "xml parsing" refers to that.
17:51:50 <LiquidEngineer> monochrom: is there a tutorial?  So far I've found stuff having to do with dtds and xlst, which I don't necessarily have/need
17:52:45 <SamB> dons: are you any good with the inliner?
17:52:45 <monochrom> I don't know.
17:55:58 <dibblego> has anyone produced a document of the programming language spectrum? it seems like there should be one
18:01:45 <SamB> dons: I have some GHC patches I want someone to look at... they don't seem to be working right, though the code seems to be evaluated...
18:03:02 <SamB> I'd like someone to look at them and tell me what I'm doing wrong...
18:04:02 <chessguy> > let a=1; b=2; c=3 in a+b+c
18:04:03 <lambdabot>  6
18:06:01 <dibblego> what's the function to go from [a,b,c,d] to [a,b,c] ?
18:06:12 <SamB> init?
18:06:15 <SamB> or take 3...
18:06:19 <dibblego> init
18:06:21 <dibblego> yes thanks
18:07:13 * SamB just sends patches to dons
18:11:39 <monochrom> f [a,b,c,d] = [a,b,c]
18:11:49 <monochrom> f _ = error "bad argument"
18:12:49 <dons> this is kind of nice, http://empathybox.com/archives/8
18:12:50 <lambdabot> Title: Empathy Box :: 5 Principles For Programming
18:14:19 <monochrom> Why does everyone use Wordpress?  To the point I look at a web page and I can immediately tell from its look-n-feel it's Wordpress.
18:15:26 <profmakx> cause it uses MySQL!!11!
18:15:29 <profmakx> meh
18:23:01 * dons dreams of 80 core cpus and massive concurrency killing off imperative programming for good
18:24:01 * Oliver puts money on it not happening for at least 40 years
18:24:08 <dibblego> we have formed the Software Liberation Front
18:24:16 <dibblego> to tackle the imperative programming problem
18:24:53 <dibblego> The Software Liberation Front (SLF) is dedicated to stamping out terrorist acts; such as the use of the = operator; YOU Are Either With Us Or Against Us
18:24:58 <dibblego> The SLF will succeed in The War on the Register Update
18:25:15 <chessguy> what does this error mean?
18:25:15 <chessguy> ERROR file:.\Encoding.hs:18 - Cannot infer instance
18:25:15 <chessguy> *** Instance   : Bits [a]
18:25:15 <chessguy> *** Expression : showCodeWords
18:25:22 <dibblego> I talk crap sometimes
18:25:23 <SamB> @google "Software Liberation Front"
18:25:25 <lambdabot> http://www.smh.com.au/news/breaking/movement-on-the-software-liberation-front/2005/09/01/1125302672215.html
18:25:26 <lambdabot> Title: Movement on the software liberation front - Breaking - Technology - smh.com.au
18:25:38 <dibblego> gah, the name is taken!
18:25:41 <dons> I suspect what will happen though is that people will just be programming in a functional style, maybe even with monads to encapsulate effects, in their imperative languages (so, functional in all but name)
18:25:47 <SamB> @google "The War on the Register Update"
18:25:50 <lambdabot> No Result Found.
18:25:51 <SamB> dibblego: never fear!
18:26:02 <SamB> for that seems to be a generic usage, not a reference to any particular group
18:26:04 <sjanssen> chessguy: it means that there's no instance of Bits for lists.  Are you trying to do a shift or bitwise and on a list?
18:26:06 <profmakx> war on register update -.-
18:26:13 <dons> the imperative guys seem to know they have to reduce state and side effects
18:26:17 <dibblego> SamB, phew
18:26:18 <chessguy> ugh, i didn't mean to'
18:26:36 <dibblego> dons, right, I explained that to a colleague this morning in fact
18:27:32 <sjanssen> we haven't exactly solved the parallelism problem in functional languages either
18:27:33 <Oliver> Er, some of them do.
18:27:58 <sjanssen> I agree that functional programming has a more solid foundation to so though
18:28:16 <SamB> sjanssen: but they are more "what state do we want" than "ack we have waaaaay too much state!"
18:28:28 <dibblego> Oliver, yes, my colleagues in particular who reinvent functional programming with imperative languages :)
18:29:18 <dons> i esp. like how that guy http://empathybox.com/archives/8 independetly arrives at state monads when talking about method-local variables have no publicly accessible state"
18:29:19 <lambdabot> Title: Empathy Box :: 5 Principles For Programming
18:29:20 <dibblego> "refactoring" they call it
18:33:28 --- topic: '["http://www.haskell.org/haskellwiki/HaWikiMigration - act soon or the data will be deleted!", "Join us as we move forward toward the Age of the Lambda", "Haskell - the language of ICFP winners 3 years running", "Logs: http://tunes.org/~nef/logs/haskell/"]'
18:33:28 --- topic: set by dons on [Tue Sep 26 08:23:47 2006]
18:33:28 --- names: list (clog_ gmwils dgoldsmith \z scsibug aFlag dolio Oliver emk slime_mold noclouds exnor sethk jcreigh gmh33__ jgrimes redacted Pseudonym hoopy dibblego erider sris ThreeQ krin falconair Carillon_ ziggurat shawn Adamant Plareplane_ gaal monochrom FPBiker irgs neurogeek arjanoosting hyraxfourtwo genneth foxy_ l_a_m araujo Patterner ChilliX kpreid cdfh converter Betovsky potyka slipstream-- bortzmeyer Nioate Averell Wallbraker szabi_ eshrgrgfewgfe)
18:33:28 --- names: list (ramki cwenner velco joe_k nothingmuch lispy takuan thou SamB_XP hyrax42_ mathewm audreyt wolverian svens dvekravy_ lambdabot yip Lemmih Elendal Bobstopper giksos shobadobs lennart marcuss wilx shapr Philippa Tigge dylan lmbdwr sylvan profmakx saccade Igloo flux__ Pupeno lisppaste2 xinming xerox matthew-_ astrolabe Cale drbean eno-away sjanssen frownster dechunker dropdrive Khisanth moonlite x3m dfranke atsampson psykotic dblog Xgc mlh dottedmag)
18:33:28 --- names: list (AI_coder lucca ajonat ibid tessier_ Pete_I meddle johs dany2k ValarQ earthy moleris greenrd GeoBesh sellout carp SimonRC mux rycee Thomas2_ resiak pejo emu dcoutts_ psnl dons klutometis ohub Narcisse noj scw gds pingu orbitz kalven qwr Spark Codex_ kaol mornfall ricebowl glguy arcatan satan cods Azmo kzm TSC fnordus Godeke clog Maddas Eidolos cjay mattam explicitjelly Korollary eyck chrisb_ zamez arguile tessier Twigathy boliver__ cathper)
18:33:28 --- names: list (integral SamB woggle petekaz newsham sieni df_ dcoutts ksandstr ozone nattfodd cpatrick dwm kolmodin shrimpx nomeata tmoertel_away ulfdoz bdash bran_ aleator magagr musasabi jmob gdsx mathrick Lunar^ Daveman badalex qz andrea james_w mGem cmeme norpan kpk vegai Syzygy- kosmikus liyang epiphone ski nnunley)
18:34:14 <SamB> monochrom: not *all*
18:34:17 * scsibug is rather fond of the Technology Liberation Front
18:34:41 <monochrom> heh
18:35:49 <dolio> It's much better than your enemies, the Liberation Front for Technology.
18:36:20 <dibblego> @google Technology Liberation Front
18:36:23 <lambdabot> http://www.techliberation.com/
18:36:23 <lambdabot> Title: The Technology Liberation Front
18:36:57 <dibblego> terrorists use the = operator
18:37:09 <dibblego> we are liberators, purporters of freedom!
18:37:30 <SamB> dibblego: you mean purveyors?
18:37:49 <SamB> harbringers?
18:37:50 <monochrom> I'm a pretender of freedom.
18:38:21 <dibblego> dunno actually
18:38:29 <dibblego> and does it matter in propaganda material?
18:39:13 <SamB> ... for programmers? yes.
18:39:37 <dibblego> these are not programmers
18:39:58 <dibblego> these are victims of terrorism
18:40:18 <SamB> imperative programmers *are* victims of terrorism
18:41:20 <dibblego> the terrorists mingle with the civilians and disguise themselves as programmers
18:41:37 <dibblego> the SLF declares "imperative programmer" an oxymoron
18:41:41 <SamB> no, I think the terrorists are more abstract in this case
18:41:58 <dibblego> corporate managers
18:41:59 <SamB> I think "imperative programmer" means "victim of terror"
18:42:14 <dibblego> the terrorist training camps masquerading as universities
18:42:22 <dibblego> our militia will target the next Java class
18:44:52 <dibblego> I'll stop talking shit now
18:45:00 <monochrom> Good idea.
18:45:10 <dibblego> thought you'd like that one :)
18:45:41 * SamB doesn't think the teacher would be thrilled if he tought people how to do their homework in Haskell instead of C++
18:45:59 <SamB> of course, that would be if anyone in those classes actually came for tutoring...
18:46:47 <dibblego> why not?
18:46:59 <dibblego> other than, because the class mandates C++
18:47:22 <dibblego> in which case, it is just indoctrination of falsehood
18:47:31 <dibblego> but we see that all the time
18:47:50 <SamB> well also its kind of hard to override methods in subclasses in Haskell ;-)
18:48:12 <dibblego> can you not remove the desire to perform such an atrocity?
18:48:56 <dibblego> this imperative programming is like a religion - I have tried to describe it as a directed graph, so that vertices with the least dependencies can be targetted first
18:50:06 <dibblego> this book said God is real and since God is real and he said the book is right, both God and the book are right
18:50:09 <thou> SamB: would you say specialization, and partial specialization, would be close enough (to overriding methods)?
18:51:42 <SamB> not to be able to do C++ homework, no.
18:51:45 <thou> dibblego: i don't think it's that bad.  there's a very strong historical record of imperative programming (assembly, etc.)
18:52:03 <SamB> dibblego: missing a very big part of the argument
18:52:07 <dibblego> thou, the arguments I have suggest to me that it is much worse
18:52:31 <dibblego> the God, book problem can be described as: God <-> book - you must quash both at once
18:52:32 <SamB> like, the part where you prove that god is truthful is kind of an important step!
18:52:46 <dibblego> that is an axiom of God
18:52:59 <dibblego> and you should be disciplined for failing in such knowledge
18:53:01 <SamB> or, you could start somewhere entirely different
18:53:09 <monochrom> I am holier than thou. :)
18:53:22 <dibblego> monochrom, precisely :)
18:53:42 <monochrom> I am just joking with thou.
18:53:51 <dibblego> monochrom, thou art likewise
18:54:13 <SamB> I have yet to see a good argument for God both existing and being good, iirc... probably because I haven't read enough of them in my philosophy book..
18:54:40 <SamB> (and I already believe in those, too!)
18:54:42 <dibblego> SamB, that's not the point - you see the flaw in the above reasoning and most people would - I have simplified most religions
18:54:56 <dibblego> the graph for imperative programming needs to be created
18:55:07 <dibblego> God <-> book is quite simple and obviously flawed
18:55:16 <thou> monochrom: why not say, "how great thou art"?
18:55:33 <SamB> how about we start with the book and work our way towards God ;-)?
18:55:49 * SamB thinks that way is a lot easier
18:55:51 <dibblego> I'm sure someone has studied in detail how to squash a religion
18:56:00 <monochrom> how great thou art
18:56:08 <thou> why thank you!  :-)
18:56:18 <SamB> thou: not you!
18:56:21 <monochrom> and I am holier than thou.
18:56:28 <thou> hehe
18:56:31 <dibblego> thou is holiest of all
19:32:43 <glguy> What's all this business about "God"s "book"s and "imperative programming languages"?
19:33:19 <monochrom> Someone gave his opinion on religions.
19:39:29 * lispy waves
19:42:32 <Bobstopper> Could someone with windows please tell me what getPermissions returns when run on the System Information Folder in c:\ ?
19:42:49 * Bobstopper waves back to lispy
19:45:15 <lispy> Bobstopper: hey
19:45:25 <lispy> i have windows at work and on one machine at home
19:45:31 <lispy> but i'm at neither place :(
19:45:37 <lispy> otherwise i'd be happy to fire up ghci and test
19:45:46 <Korollary> @index getPermissions
19:45:47 <lambdabot> System.Directory, Distribution.Compat.Directory
19:45:50 <Bobstopper> oh ok, no problem
19:45:52 <Korollary> I think I can do that
19:45:57 <Bobstopper> cool, thanks
19:46:19 <Bobstopper> Also, let me know if you've set windows to show hidden files and folders and hide operating system files
19:47:07 <Korollary> does that make a diff?
19:47:19 <Bobstopper> It may do. That's kinda what I want to test
19:51:29 * lispy notes that his almost working hope install has turned into a completely not working hope install
19:51:41 <lispy> and i didn't touch anything :(
19:51:48 <lispy> ?get-shaper
19:51:49 <lambdabot> shapr!!
19:52:06 <lispy> shapr: my hope install died :(
19:52:32 <Korollary> Bobstopper: doesn't make a difference
19:52:57 <Korollary> Bobstopper: (getPermissions "C:\\System Volume Information") >>= print
19:53:14 <Bobstopper> what does it return?
19:53:17 <Korollary> Bobstopper: Permissions {readable = True, writable = True, executable = False, searchable =True}
19:53:17 <lispy> that's good, i was pretty sure that hide/show hidden files was exclusively a windows explorer setting
19:53:28 <Bobstopper> hmm. Does getDirectoryContents work?
19:54:38 <Korollary> Bobstopper: Yes
19:55:04 <Bobstopper> I wrote a program like find under unix to test windows directory searching and compiled it under wine. I gave it to a friend running windows and it got stuck at that directory saying "getDirectoryContents: invalid argument". I thought it had to do with it being a system directory.
19:55:04 <hyrax42_> ?type ixmap
19:55:06 <lambdabot> forall e i j. (Ix j, Ix i) => (i, i) -> (i -> j) -> Array j e -> Array i e
19:55:10 <Bobstopper> Oh well, thanks for your help, Korollary
19:55:48 <monochrom> There may be a difference between "administrative user" and "normal user".
19:55:57 <Korollary> Bobstopper: Maybe his user didn't have the same permissions as mine?
19:56:10 <dibblego> glguy, dibblego is just talking his usual crap
19:56:29 <dibblego> glguy, /ignore dibblego works for me
19:56:30 <lispy> dibblego: you tell dibblego he better watch it ;)
19:56:56 <dibblego> g'day lispy I am writing your [a] -> [a] -> [[a]]
19:57:01 * lispy has no idea what the context is
19:57:12 <lispy> dibblego: oh, shoot and when i was at work i forgot to post that code
19:57:15 <lispy> dibblego: sorry :((
19:57:17 <dibblego> Eq a => [a] -> [a] -> [[a]]
19:57:18 <monochrom> monochrom: monochrom sent you a message
19:57:19 <Bobstopper> Possibly... He might be running as a restricted user somehow. But it shouldn't have tried to do a getDirectoryContents unless getPermissions showed it to be searchable. So I was a bit confused by it.
19:57:27 <dibblego> I don't want to see it anyway until I am finished :)
19:57:44 <lispy> dibblego: ah
19:57:55 <lispy> dibblego: i found QC to he really helpful when i wrote mine
19:57:59 <chessguy> what the...
19:58:06 <chessguy> What is this winHugs error? ERROR - Garbage collection fails to reclaim sufficient space
19:58:07 <Bobstopper> I was thinking perhaps under windows, directories are searchable whether they're readable or not.
19:58:47 <dibblego> lispy, I can imagine that
19:58:53 <monochrom> chessguy: The program uses too much memory, and the default heap size is small.
19:58:55 * Korollary has so many apps open that he can barely navigate
19:59:42 <lispy> chessguy: is that the same as: ERROR - Upgrade to GHC ;)
20:01:19 <monochrom> Woah, sleep is the cousin of death!  I can kind of see that... threadDelay and killthread are kind of in the same module...
20:02:08 <chessguy> lispy, i dunno, you tell me
20:02:14 <chessguy> i'm the n00b
20:03:06 <monochrom> I think you should note the ;)
20:03:06 <lispy> chessguy: i'm just teasing
20:03:10 * lispy  is a life long n00b
20:03:44 <dibblego> let t [] _ = [[]];t x y = if y `isPrefixOf` x then t (take (length y) x) y else y : t (tail x) y in t "a,b,c" ","
20:03:47 <dibblego> > let t [] _ = [[]];t x y = if y `isPrefixOf` x then t (take (length y) x) y else y : t (tail x) y in t "a,b,c" ","
20:03:51 <lambdabot> Terminated
20:04:31 <dibblego> can you step through code with a debugger?
20:05:33 <aFlag> are there frameworks for webdevelopment using haskell?
20:05:46 <dibblego> aFlag, HAppS and hope
20:06:00 <aFlag> thanks
20:06:10 <aFlag> have you used them?
20:06:12 * Lemmih is using hxweb.
20:06:19 <dibblego> no
20:06:38 <monochrom> t (take (length y) x) y   will repeat itself if x==y
20:07:04 <aFlag> i wonder if it's as mature as zope, ruby on rails, etc
20:07:53 <monochrom> Err, more correctly: if y is a prefix of x, t (take (length y) x) y will get into a loop in which x==y henceforth.
20:08:23 <monochrom> Example.  t "ab" "a" = t "a" "a" = t "a" "a" = ...
20:08:39 <Bobstopper> aFlag: probably not, but they're haskell and that's gotta count for something ;)
20:08:40 <dibblego> yeah I think I included the bit I wanted to exclude
20:08:41 <Cale> You really don't need a debugger here, you can execute the code on paper quite nicely :0
20:08:46 <Cale> er, :) rather
20:08:49 <Cale> hehe
20:08:57 <dibblego> Cale, but can it be done?
20:09:27 <Cale> There are some odd debuggers for Haskell like hat
20:09:49 <Cale> and buddha
20:10:04 <aFlag> I've tried to use debuggers on haskell, never had much luck hehe
20:10:09 <dibblego> > take 3 [1,2,3,4,5,6,7,8]
20:10:10 <lambdabot>  [1,2,3]
20:10:14 <Cale> Yeah, it's easier just to understand the code
20:10:17 <dibblego> how do I get the [4,5,6,7,8] ?
20:10:21 <Cale> drop 3
20:10:26 <dibblego> righto then, I'll try understanding :)
20:10:34 <Cale> > drop 3 [1..8]
20:10:35 <lambdabot>  [4,5,6,7,8]
20:10:56 <aFlag> there's a function that prints what you passes to it and return the value passed as parameter
20:11:05 <aFlag> but I forgot what it's called
20:11:07 <dibblego> > let t [] _ = [[]];t x y = if y `isPrefixOf` x then t (drop (length y) x) y else y : t (tail x) y in "a,b,c" ","
20:11:07 <lambdabot>    The function `"a,b,c"' is applied to one arguments,
20:11:08 * lispy keeps a notepad when he's debugging haskell and just does equational reasoning
20:11:08 <lambdabot>   but its type `[C...
20:11:14 <dibblego> > let t [] _ = [[]];t x y = if y `isPrefixOf` x then t (drop (length y) x) y else y : t (tail x) y in t "a,b,c" ","
20:11:15 <lambdabot>  [",",",",",",""]
20:11:17 <aFlag> it might be helpful when you're feeling too lazy to actually read the code
20:11:21 <monochrom> I don't think it's fair to say "no one needs debuggers".  But if I may speak for just myself: I tossed out the debugger idea the same day I tossed out imperative programming.
20:11:22 <Cale> Debug.Trace.trace
20:11:29 <aFlag> yeah, that's the one
20:11:30 <lispy> ido a lot of pen and paper substitutions like it's algebra class and the bugs fall right out
20:11:51 <dibblego> well pen and paper is just like a debugger, only with the ability to perform a transcription error
20:12:14 <Cale> dibblego: well, depends on what you mean by "debugger"
20:12:29 <dibblego> right, well that's how I use a debugger - even in imperative land - I realise most people don't
20:12:36 <lispy> i'm usually interested in correctness not just squashing a bug :)
20:13:11 * lispy thinks linus torvalds has some relevant and instructive ideas on debugging
20:13:24 <aFlag> lispy, what did he say about it?
20:14:13 <lispy> let me see if i can find it
20:14:34 <lispy> http://linuxmafia.com/faq/Kernel/linus-im-a-bastard-speech.html
20:14:38 <lambdabot> Title: linus-im-a-bastard-speech, http://tinyurl.com/bjzxt
20:14:41 <lispy> that's the famousone
20:15:14 <dibblego> let t [] _ = [[]];t x y = if y `isPrefixOf` x then t (drop (length y) x) y else y : t (tail x) y in t "a,b,c" "," -- do I need an accumulator for this?
20:15:32 <mwc> Is there some sort of good tutorial on thinking lazily?
20:16:01 <dibblego> mwc, you can look at the lame emulations in places like the core Java API
20:16:17 <mwc> Lame emulations?
20:16:26 <dibblego> sure, java.io.InputStream
20:16:39 <mwc> No, I'm thinking more of stuff like fix for instance
20:16:48 <dibblego> as opposed to an array which is inherently strictly evaluated
20:17:04 <ThreeQ> mwc: fix exists in strict languages too
20:17:38 <mwc> Well, if you take the canonical fibbonachi example... fix (\fibs -> 1 : 1 : zipWith (+) fibs (tail fibs))
20:17:46 <mwc> I would have written that with a generating function
20:18:16 <lispy> Because I'm a bastard, and proud of it!
20:18:16 <lispy> Linus
20:18:31 <mwc> ThreeQ, give me an example?
20:18:34 <lispy> ?remember Linus Because I'm a bastard, and proud of it!
20:18:54 <monochrom> I learned lazy evaluation by hand-executing a few programs by rewriting.
20:19:33 <lispy> mwc: lookup dynamic programming examples in haskell, those are illustrative
20:19:40 <lispy> ?google dynamic programming haskell lazy
20:19:43 <lambdabot> http://journals.cambridge.org/production/action/cjoGetFulltext?fulltextid=335990
20:19:47 <lispy> mwc: also, tying the knot
20:19:48 <dibblego> I think that linus article is full of crap
20:20:02 <mwc> lispy, I've done lots of dynamic programming
20:20:05 <ThreeQ> (fix (lambda (f) (lambda (x) (if (= x 0) 1 (* (f (- x 1)) x))))
20:20:13 <mwc> I guess I was looking for a more zen-like approach to these things
20:20:24 <ThreeQ> that's factorial in scheme using the applicative order fixed point combinator
20:20:37 <monochrom> What is zen-like?
20:20:47 <mwc> monochrom, those lessons you learn from experience
20:20:53 <mwc> and can't teach anybody
20:21:13 <lispy> mwc: and you want a tutorial for it? ;)
20:21:38 <mwc> lispy, more like some examples on where it's effective in surprising ways
20:21:49 <mwc> It seems I don't really make use of it in any really creative ways
20:22:16 <monochrom> OK.  Well I did exactly that, as I said.  The prerequisite was that I knew the exact definition of "call by name" or "applicative order" or whatever, so that I knew I was on the same page as the computer (modulo representations and optimizations).
20:22:56 <gmh33__> is ThreeQ in the wrong channel ? :P
20:23:18 <ThreeQ> ghm33__: mwc wanted an example of using fix in a strict language =P
20:23:26 <gmh33__> yeah I scrolled up lol
20:23:49 <gmh33__> I have Chicken on my laptop
20:23:52 <gmh33__> I just don't really use it :/
20:24:55 <dibblego> Lemmih, do you use that with apache?
20:25:02 <monochrom> Some interesting examples I showed in my FP lectures  http://www.cs.utoronto.ca/~trebla/fp/   Lectures 9 and 10 have sample executions.
20:25:04 <dibblego> (that = hxweb)
20:25:04 <lambdabot> Title: Albert's Functional Programming Course
20:25:44 <gmh33__> monochrom: where do you teach ?
20:25:45 <lispy> dibblego: what do you disagree with?
20:26:13 <dibblego> lispy, the undermining of the value of the debugger
20:26:30 <monochrom> This was a course I made and taught to a few friends.
20:26:57 <dibblego> lispy, when you say you do inductive proof or whatever with pen and paper, I use a debugger the same way - I know many people don't (I've seen them)
20:27:07 <gmh33__> aww I was hoping you were a professor with a PH.D. and a huge brain :P
20:27:25 <gmh33__> though those two things aren't dependant on one another..
20:28:34 <mwc> monochrom, I'm at UWO applied math and looking for grad schools
20:29:01 <lispy> dibblego: i think linus is complaining about a mentality.  If you use a debugger to automate what you would do on paper, then maybe it's an okay use.  Like he says, use on if you want.  But please be a careful hacker.
20:29:08 <monochrom> I have a small brain.  But the fraction of it occupied by my logical side is larger.
20:29:21 <dibblego> lispy, maybe
20:30:15 <lispy> i use spreadsheets as calculators...why because they layout the data well and give me all my answers at once
20:30:18 <gmh33__> is there a function which takes a string and run the function of that name ?
20:30:29 <gmh33__> or something like that :/
20:30:30 <lispy> but i guess you could call them a calculator and then be against them too
20:30:54 <lispy> gmh33__: like apply :: [String] -> ??
20:30:55 <mwc> gmh33__, it's be almost impossible to type that :)
20:31:03 <mwc> @type apply
20:31:04 <lambdabot> Not in scope: `apply'
20:31:08 <gmh33__> oooo
20:31:32 <gmh33__> @hoogle apply
20:31:33 <lambdabot> Data.Graph.Inductive.Query.Monad.apply :: GT m g a -> m g -> m (a, g)
20:31:33 <lambdabot> Data.Graph.Inductive.Query.Monad.apply' :: Monad m => GT m g a -> g -> m (a, g)
20:31:33 <lambdabot> Data.Graph.Inductive.Query.Monad.applyWith :: Monad m => (a -> b) -> GT m g a -> m g -> m (b, g)
20:31:51 <lispy> otoh, we have ($) which applies functions
20:31:54 <lispy> ?type ($)
20:31:55 <lambdabot> forall b a. (a -> b) -> a -> b
20:32:28 <gmh33__> like if I have a string "+" and I wanted to add two numbers together ?
20:32:53 <lispy> gmh33__: you could write an interpreter
20:33:12 <lispy> eval "+" a b = Number (a + b)
20:33:29 <gmh33__> man I'm dumb lol
20:33:37 <gmh33__> thanks lispy
20:33:44 <lispy> gmh33__: and if you wanted to write something like that you might want to learn about gadts, but that might be a bit advanced...hard to say
20:35:28 <lispy> gmh33__: it's not really a stupid thing to ask about
20:35:43 <lispy> gmh33__: some programming languages intentionally try to make this easy
20:35:48 <lispy> some are not concerned about it
20:36:18 <gmh33__> yeah
20:36:27 <gmh33__> I should have thought about the patern matching though heh
20:36:40 <lispy> pattern matching is nice
20:36:45 <lispy> you could also use lookup
20:36:47 <lispy> ?type lookup
20:36:49 <lambdabot> forall b a. (Eq a) => a -> [(a, b)] -> Maybe b
20:37:29 <lispy> > fromJust (lookup "+" [("+", (+)), ("-", (-))]) 1 2
20:37:31 <lambdabot>  3
20:37:37 <TSC> That is alist lookup?
20:37:44 <lispy> TSC: yes
20:38:01 <lispy> or better than fromJust use liftM2
20:38:14 <lispy> > liftM2 (lookup "+" [("+", (+)), ("-", (-))]) 1 2
20:38:15 <lambdabot>    Expecting a function type, but found `Maybe b'
20:38:16 <lambdabot>    Expected type: a1 -...
20:38:23 <lispy> hmm..maybe i did something wrong
20:38:36 <lispy> ah, i probably need to return both those numbers
20:38:42 <TSC> lookup returns a maybe
20:38:48 <lispy> > liftM2 (lookup "+" [("+", (+)), ("-", (-))]) (return 1)  (return 2)
20:38:49 <lambdabot>    Expecting a function type, but found `Maybe b'
20:38:49 <lambdabot>    Expected type: a1 -...
20:38:54 <TSC> You want it to return just a function
20:39:04 <TSC> (I think!)
20:39:04 <lispy> ?type Maybe (+)
20:39:06 <lambdabot> Not in scope: data constructor `Maybe'
20:39:08 <lispy> ?type liftM2
20:39:09 <lambdabot> forall r (m :: * -> *) a2 a1. (Monad m) => (a1 -> a2 -> r) -> m a1 -> m a2 -> m r
20:39:14 <lispy> ?type Just (+)
20:39:15 <lambdabot> forall a. (Num a) => Maybe (a -> a -> a)
20:39:32 <lispy> yeah, i have something backwards in my reasoning
20:39:45 <lispy> > liftM2 (+) (Just 1) (Just 2) -- this is what i was remembering
20:39:47 <lambdabot>  Just 3
20:40:06 <TSC> Yes, the maybes are on the operands there, not the operator (:
20:40:18 <lispy> > (lookup "+" [("+", liftM2 (+)), ("-", liftM2 (-))]) (return 1)  (return 2)
20:40:19 <lambdabot>    The function `(lookup "+" [("+", liftM2 (+)), ("-", liftM2 (-))])'
20:40:20 <lambdabot>   i...
20:40:50 <lispy> ?type lookup "+" [("+", liftM2 (+)), ("-", liftM2 (-))]
20:40:52 <lambdabot> forall (m :: * -> *) r. (Monad m, Num r) => Maybe (m r -> m r -> m r)
20:41:10 <lispy> ah hmm..
20:41:50 <lispy> so that's not right because i have the monad inside the maybe
20:42:57 <ThreeQ> > (lookup "+" [("+", (+)), ("-", (-))]) >>= (\f -> 1 `f` 2)
20:42:58 <lambdabot>  add an instance declaration for (Num (Maybe b))
20:43:02 <dibblego> is prolog a pure FP language?
20:43:07 <lispy> > lookup "+" [("+", liftM2 (+)), ("-", liftM2 (-))] >>= \f -> f 1 2
20:43:09 <lambdabot>  add an instance declaration for (Num (Maybe r))
20:43:13 <TSC> It's a logic language
20:43:41 <lispy> oh we had the same idea...but what is up with that instance
20:43:54 <ThreeQ> ?type lookup "+" [("+", (+)), ("-", (-))]
20:43:56 <lambdabot> forall a. (Num a) => Maybe (a -> a -> a)
20:44:03 <dibblego> TSC, does that make it incomparable?
20:44:08 <ThreeQ> ?type (lookup "+" [("+", (+)), ("-", (-))] >>=)
20:44:10 <lambdabot> forall a b. (Num a) => ((a -> a -> a) -> Maybe b) -> Maybe b
20:44:32 <TSC> dibblego: I suppose not
20:44:35 <lispy> oh
20:44:39 <ThreeQ> > lookup "+" [("+", liftM2 (+)), ("-", liftM2 (-))] >>= \f -> Just (f 1 2)
20:44:40 <lambdabot>  add an instance declaration for (Num (m r))
20:44:50 <lispy> > lookup "+" [("+", liftM2 (+)), ("-", liftM2 (-))] >>= \f -> Just (f 1 2)
20:44:51 <lambdabot>  add an instance declaration for (Num (m r))
20:44:57 <lispy> heh, i'm one step behind
20:45:19 <ThreeQ> hmmm
20:45:26 <lispy> ah, the liftM2 is the problem
20:45:32 <ThreeQ> oh yeah
20:45:35 <ThreeQ> what is that doing there
20:45:43 <lispy> > lookup "+" [("+", (+)), ("-", (-))] >>= \f -> return (f 1 2)
20:45:45 <lambdabot>  Just 3
20:45:53 <lispy> > lookup "squid" [("+", (+)), ("-", (-))] >>= \f -> return (f 1 2)
20:45:55 <lambdabot>  Nothing
20:46:01 <gmh33__> g'night all
20:46:10 <lispy> gmh33__: see we have a nice evaluator for you now!
20:46:14 <ThreeQ> haha, when you said "we had the same idea" I assumed it was 100% the same
20:46:16 <lispy> gmwils: good night
20:46:51 <lispy> ThreeQ: hehe
20:46:57 * lispy told the wrong person good night
20:46:58 <lispy> oh well
20:47:12 <ThreeQ> I don't think he noticed
20:47:21 <lispy> i never thought of using lookup like that before, but it makes so much sense
20:47:56 <lispy> > do { f <- lookup "+" [("+", (+)), ("-", (-))]; return (f 1 2) }
20:47:57 <lambdabot>  Just 3
20:48:06 <lispy> and written that way it looks pretty simple
20:48:18 <lispy> > do { f <- lookup "foo" [("+", (+)), ("-", (-))]; return (f 1 2) }
20:48:19 <lambdabot>  Nothing
20:48:27 <lispy> > do { f <- lookup "-" [("+", (+)), ("-", (-))]; return (f 1 2) }
20:48:28 <lambdabot>  Just (-1)
20:48:34 * lispy digs the maybe monad
20:52:19 <lispy> ?. pl undo do { f <- lookup "-" [("+", (+)), ("-", (-))]; return (f 1 2) }
20:52:19 <lambdabot> flip ($ 1) 2 `fmap` lookup "-" [("+", (+)), ("-", (-))]
20:52:25 <lispy> so simple!
20:52:26 <lispy> ;)
20:52:56 * lispy notes that fmap could be a prefix liftM
20:53:13 <lispy> and if it were a liftM2 you wouldn't need that flip ($ 1)
20:53:22 <lispy> and then youd be where ThreeQ and I wanted to go
20:53:51 <lispy> ?type (flip ($ 1) 2 `fmap`)
20:53:53 <lambdabot> forall (f :: * -> *) c a b. (Functor f, Num a, Num b) => f (a -> b -> c) -> f c
20:54:24 <lispy> although, why doesn't it have a return
20:54:32 <lispy> > flip ($ 1) 2 `fmap` lookup "-" [("+", (+)), ("-", (-))]
20:54:33 <ThreeQ> the lookup trick won't work for heterogeneous functions though
20:54:34 <lambdabot>  Just (-1)
20:54:40 <lispy> ThreeQ: right
20:54:54 <lispy> ThreeQ: unless you wrap them or use an HList
20:54:59 <ThreeQ> HList?
20:55:04 <lispy> ?where HList
20:55:05 <lambdabot> http://homepages.cwi.nl/~ralf/hlist/
20:55:17 <lispy> type class hackery to get heterogenous lists
20:55:20 <lispy> quite clever
20:55:21 <ThreeQ> 404 :(
20:55:26 <lispy> oh, foo
20:55:36 <lispy> ?google HList _darcs
20:55:40 <lambdabot> http://darcs.haskell.org/HList/_darcs/
20:55:40 <lambdabot> Title: Index of /HList/_darcs
20:55:52 <lispy> get it from there minus the _darcs
20:56:10 <lispy> but that first page would have had a researh paper actually explaining it
20:57:03 <lispy> http://homepages.cwi.nl/~ralf/HList/
20:57:05 <lambdabot> Title: Strongly typed heterogeneous collections
20:57:08 <lispy> that page works for me
20:57:12 <lispy> no 404 here
20:57:18 <lispy> Oh
20:57:20 <lispy> typo
20:57:32 <ThreeQ> yeah
20:57:55 <lispy> ?tell dons can you change the ?where entry for HList to have a captial H for HList instead of hlist
20:57:55 <lambdabot> Consider it noted.
20:57:56 <Uvanta> > [x|x<-[2,4..], x<10]
20:58:00 <lambdabot> Terminated
20:58:17 <Uvanta> > [x|x<-[2,4..], x<11]
20:58:21 <lambdabot> Terminated
20:58:27 <lispy> Uvanta: it will work in ghci though
20:58:35 <Cale> sort of
20:58:52 <Cale> > take 5 [x | x <- [2,4..], x < 11]
20:58:53 <lambdabot>  [2,4,6,8,10]
20:58:55 <lispy> takeWhile is probably better
20:59:13 <Cale> > takeWhile (< 11) [2,4..]
20:59:14 <lambdabot>  [2,4,6,8,10]
20:59:17 <lispy> > takeWhile (< 11) [2,4..]
20:59:19 <lambdabot>  [2,4,6,8,10]
20:59:23 * Uvanta is stupid
20:59:33 <Uvanta> i now understand the reason... ):
20:59:36 <sjanssen> @where+ HList http://homepages.cwi.nl/~ralf/HList/
20:59:36 <lambdabot> Done.
20:59:40 <sjanssen> @where HList
20:59:40 <lambdabot> http://homepages.cwi.nl/~ralf/HList/
20:59:43 <lispy> Oh
20:59:51 <lispy> ?where hlist
20:59:52 <lambdabot> http://homepages.cwi.nl/~ralf/HList/
20:59:59 <lispy> i thought dons had to remove the old one first
21:00:09 <lispy> ?tell dons nevermind, guess anyone can reset it
21:00:10 <lambdabot> Consider it noted.
21:00:27 <Cale> It spends forever waiting for the next element, but doesn't manage to get one. Lambdabot wants a whole line before it will give anything back to IRC.
21:00:45 <lispy> lambdabot is so greedy that way
21:00:52 <Cale> > filter (< 1000) [2,4..]
21:00:55 <lambdabot>  [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,5...
21:00:58 <Cale> :)
21:01:14 <Cale> hmm :)
21:01:21 <Cale> > filter (< 60) [2,4..]
21:01:25 <lambdabot> Terminated
21:01:29 <Cale> nope
21:01:35 <Botty> o_0
21:01:43 <Cale> I think it computes a bunch and then cuts it off further.
21:01:50 <sjanssen> hmm, I bet that could be fixed
21:01:54 <Cale> it could be
21:02:00 <Cale> but it's annoying
21:02:14 <Cale> since runplugs is a separate executable
21:02:38 <sjanssen> Cale: and the timeout stuff is all in runplugs?
21:02:48 <Cale> yeah
21:02:52 <Cale> I think so
21:03:03 <Cale> It's been a while since I looked at it
21:03:11 <lispy> actually the timeout is independent of runplugs
21:03:22 <lispy> lambdabot runs runplugs
21:03:36 <lispy> and if it takes to long or uses too many resources it stops waiting
21:03:57 <lispy> it does this also for bf
21:04:05 <Uvanta> have anyone tried running frag?
21:04:06 <lispy> quickcheck and a few others
21:04:06 <Uvanta> http://haskell.org/haskellwiki/Frag
21:04:07 <lambdabot> Title: Frag - HaskellWiki
21:04:11 <sjanssen> @hoogle popen
21:04:11 <lambdabot> No matches found
21:04:13 <lispy> Uvanta: not lately, but i ran it once
21:04:19 <Cale> Uvanta: yeah, back a while ago
21:04:19 <lispy> Uvanta: want a screen shot as proof?
21:04:49 <Uvanta> i've darcs get blah and now trying running it
21:05:00 <Uvanta> and...
21:05:03 <Uvanta> weird
21:05:12 <lispy> http://files.codersbase.com/tmp/screen5.png
21:05:38 <lispy> http://files.codersbase.com/tmp/screen3.png
21:05:42 <Uvanta> current version of frag in darcs seems not to run
21:05:44 <lispy> ^^^ i killed a bot
21:05:49 <lispy> hmmm...
21:06:54 <Uvanta> with error message "pattern match failure", i've expected all kinds of 'dependency' stuffs, 'version' stuffs, but never have expected this kind of runtime error
21:07:00 <Cale> hmm, blackbox/fluxbox?
21:07:29 <lispy> Cale: evolution
21:07:32 <Uvanta> here it is
21:07:34 <Uvanta> "user error (Pattern match failure in do expression at main.hs:64:3-19)"
21:07:37 <lispy> Cale: er
21:07:44 <lispy> Cale: sorry...thinko
21:07:58 <lispy> Cale: crap...what is it called...ah, enlightenment
21:08:03 <Uvanta> i tried it in windows, and a friend of mine tried it in gentoo linux, same error occurs
21:08:05 <Cale> oh, it is :)
21:08:21 <lispy> Uvanta: hmm...
21:08:22 <Cale> You're using a rather blackbox-looking enlightenment theme then :)
21:08:32 <lispy> Cale: yeah, i think the theme is caled blackbox :)
21:08:58 <Uvanta> current version seems to have a bug, maybe a typo, or parentheses missing, or whatever
21:09:01 <lispy> Uvanta: i'll look at that line
21:09:17 <lispy> like 64, eh?
21:09:19 <lispy> er line
21:09:45 <Uvanta> yeap
21:09:53 <lispy> oof, apache doesn't give me line numbers :)
21:10:08 <lispy> this line? (progName,[name]) <-getArgsAndInitialize
21:10:10 <Uvanta> source code of mine says
21:10:12 <Uvanta> main = do
21:10:12 <Uvanta>    (progName,[name]) <-getArgsAndInitialize
21:10:18 <Uvanta> yes
21:10:37 <lispy> yeah, so getArgsAndInitialize might be returning (progName, [])
21:10:40 <lispy> that could cause that error
21:11:12 <lispy> change it to args <- getArgsandInitalize; print args
21:11:15 <lispy> see what it prints
21:12:07 <lispy> Usage: a.out leveleg
21:12:20 <lispy> make sure you pass 'leveleg' on the command line
21:12:27 <lispy> so that it can load a level
21:14:10 * lispy thinks he should send in a patch to make it print the usage message when the pattern doesn't match
21:14:59 <Uvanta> oops.. i didn't know i should pass an argument in command line
21:16:13 <Uvanta> main.exe: user error (unknown OpenGL call glGenBuffersARB, check for GL_ARB_vert
21:16:13 <Uvanta> ex_buffer_object or OpenGL 1.5)
21:16:43 <lispy> hmm..so maybe do don't have hardware acceleration setup?
21:17:01 <Uvanta> probably
21:17:22 <lispy> glxinfo seems like the command to get that info in linux
21:17:26 <lispy> but i'm rusty on the details
21:18:27 <lispy> oh, but you're windows huh?
21:18:32 <lispy> because main.exe
21:18:42 <Uvanta> yes i'm in windows
21:19:19 <lispy> well, i'm not sure then
21:19:26 <Botty> update your gfx drivers if you haven't already
21:19:27 <lispy> usually setting up opnegl is done for youin windows
21:19:47 <Botty> the windows defualt is sw accel, I dunno what extensions it includes
21:19:49 <Uvanta> gfx drivers?
21:20:05 <Botty> graphics drivers, for your video card
21:22:14 <Uvanta> okay, thanks.. i should check that again... damn intel graphic card :(
21:22:43 <Botty> intel? hmm, might be embedded.  ahwell, should still have drivers.
21:28:32 <chessguy> > let prob w = (0.999^(7-w))*(0.001^(w)) in prob 3
21:28:33 <lambdabot>  9.96005996001e-10
21:28:53 <chessguy> my calculator gives .000332ish
21:29:15 <chessguy> never mind, i'm stupid
21:29:38 <chessguy> apparently my calculator doesn't see ^ and / as the same thing. how odd :)
21:47:02 <aFlag> what's redex?
21:47:22 <Cale> aFlag: reducible expression
21:48:14 <Pseudonym> Logically, it's any expression which has enough arguments to perform an evaluation step.
21:48:35 <Pseudonym> So a constant is not a redex (there's no evaluation to do), but a CAF is.
21:48:39 <Pseudonym> As is (\x -> E) V
21:48:50 <aFlag> like (\x -> x+2) 3 would be a redex?
21:48:58 <Cale> yeah
21:49:00 <Pseudonym> Right.
21:49:02 <aFlag> hum
21:49:07 <Pseudonym> (+) 1 2 is a redex, but (+) 1 isn't
21:49:52 <monochrom> Ah!  Now I know why it's called a redex.
21:51:17 <Pseudonym> In general, if you have a term rewrite system, a redex is an expression that matches the left-hand-side of a rule.
21:51:37 <Pseudonym> That's where the term comes from.
21:52:20 <aFlag> yeah, now I'm thinking about it, I think I've read it on a book I have
21:52:29 <aFlag> I just forgot :(
21:52:53 <Uvanta> whoa
21:52:55 <Uvanta> frag works
21:53:07 <Uvanta> that was really a problem of gfx driver
21:53:19 <Uvanta> thanks a lot, Botty!
21:53:34 <Botty> no problem :)
21:54:19 <chessguy> ok, i have myList :: [([Int],Double)] and i need to sort the outer list in ascending order by the doubles inside the pairs. suggestions?
21:54:50 <Cale> sortBy (comparing snd)
21:55:01 <chessguy> wow, that's it?
21:55:04 <Cale> where comparing p x y = compare (p x) (p y)
21:56:32 <chessguy> so  let comparing p x y = compare (p x) (p y) in sortBy (comparing snd) myList
21:56:36 <chessguy> right?
21:56:43 <Cale> sure
21:56:55 <Cale> comparing is, I think, in Data.Ord in the development GHC.
21:57:32 <Cale> yes
21:59:55 <chessguy> where is sortBy?
21:59:59 <Cale> Data.List
22:02:26 <chessguy> ok, last dumb question for tonight. i need to tell ghci to evaluate an expression and dump the result (a list of some 260,000 pairs) to a text file. how might i do that?
22:03:31 <Lemmih> writeFile "file" (show (...))?
22:04:42 <chessguy> sounds reasonable to me
22:05:01 <chessguy> i think i just finished my first (relatively) usefull haskell module
22:08:00 <Korollary> I have a feeling that you may want to switch from list of pairs to Data.Map.
22:08:24 <chessguy> well, i'll probably do a lot of refining of this module
22:08:34 <monochrom> @pl \(x,y) -> (f x, y)
22:08:34 <lambdabot> first f
22:08:35 <chessguy> for now, i'll be happy if it works
22:10:07 <chessguy> hmm. in Lemmih's example, where will file show up?
22:10:28 <chessguy> i'm assuming "file" is just the file name
22:10:56 <dons> mmmm....
22:10:56 <lambdabot> dons: You have 3 new messages. '/msg lambdabot @messages' to read them.
22:10:59 <dons> ralink++
22:11:07 * dons plugs in a wifi card on openbsd and "it just works" !
22:11:21 <glguy> woot
22:11:24 <glguy> huzzah!
22:11:26 <dons> ral0: flags=8843<UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST> mtu 1500
22:11:36 <glguy> and it's completely integrated into ifconfig
22:11:40 <dons> yep
22:11:46 <monochrom> Let A be an arrow type.  Bear in mind that -> is also an arrow type.  If I write like "arr (first f)", will that confuse newbies? :)   Note that the inner first f has type (x,y)->(fx,y), the outer arr(whatever) has type A (x,y) (fx,y).
22:11:48 <dons> (that's a lot nicer than linux too)
22:11:50 <glguy> (unlike some operating systems (boo hiss)
22:11:53 <dons> hehe
22:12:08 <bringert> shapr: the new swedish government wants to allow you to move to sweden and get a job: http://sr.se/cgi-bin/ekot/artikel.asp?Artikel=966298
22:12:11 <lambdabot> Title: Alliansen enig om arbetskraftsinvandring - sr.se, http://tinyurl.com/r6dpo
22:12:47 <ThreeQ> ?type callCC . flip id
22:12:49 <lambdabot> Not in scope: `callCC'
22:12:50 <glguy> using arr shouldn't be more confusing than using return, for example, should it?
22:13:06 <ThreeQ> ?type Control.Monad.Cont.callCC . flip id
22:13:07 <glguy> > [id] <*> [()]
22:13:07 <lambdabot>  Not in scope: `<*>'
22:13:08 <lambdabot> forall (m :: * -> *) b. (Control.Monad.Cont.MonadCont m) => b -> m b
22:13:13 <dons> boo hiss
22:15:32 <glguy> there has to be a better way to save in *New* Super Mario Bros. (gameboy ds) than to beat the last level
22:15:47 <dons> heh
22:17:24 <monochrom> Someone has an emulator.  You can probably save whatever way you like in the emulator.
22:17:37 <monochrom> The emulator is written in Haskell.
22:18:14 <ThreeQ> monochrom: is there one for the game boy DS?
22:24:59 <shapr> bringert: Argh! NOW they change their mind!
22:26:15 <bringert> shapr: :-) we only have elections every 4 years
22:26:25 * shapr sighs
22:26:34 <glguy> context?
22:26:51 <shapr> I left Sweden because I couldn't be employed there.
22:27:32 <shapr> One month after I left national elections change the gov't, and now two months after I leave the new gov't says they're going to let non-EU people be employees.
22:28:00 <glguy> whoa, there are countries that enforce their immigration lawas?
22:28:12 <dons> :/
22:28:55 <glguy> shapr: where are you from that is not in the EU?
22:29:06 <shapr> I'm from Alabama.
22:29:18 <glguy> Ah ,okay
22:29:27 <hyraxfourtwo> where are you now
22:29:36 <hyraxfourtwo> I thought you were in sweden :?
22:29:36 <shapr> I've just been living in Finland and Sweden for the last seven years, so most people thought I was from the EU originally.
22:29:45 <hyraxfourtwo> oh now in finland?
22:29:46 <shapr> hyraxfourtwo: Now I'm from Sweden :-)
22:30:02 <shapr> I keep saying "@!#~ this isn't like Sweden."
22:30:27 <shapr> For example, mass transportation here in Birmingham is unspeakably bad.
22:30:38 <hyraxfourtwo> you're in UK now
22:30:40 <bringert> shapr: you can e-mail the prime minister: fredrik.reinfeldt@moderat.se and let him know you want to come here
22:30:53 <hyraxfourtwo> ?
22:31:06 <shapr> I own a car, I want a license, but I can't get to the license testing place because the busses routes suck so bad.
22:31:13 <hyraxfourtwo> public transport is crap outside of london pretty much
22:31:15 <shapr> hyraxfourtwo: No, I'm back in Birmingham Alabama.
22:31:18 <hyraxfourtwo> oh
22:31:19 <hyraxfourtwo> haha
22:31:23 <glguy> moderat? is that swedish for "Moderate" as in a "Moderate Policital Party"? or is Moderat swedish for government? other?
22:31:28 <shapr> Sweden's public transport is great.
22:31:30 <bringert> the former
22:32:20 <bringert> shapr: I think you would actually get a response.
22:32:56 <glguy> shapr: don't you have to take a car to take the test?
22:33:58 <shapr> bringert: Well, skatteverket is unhappy with me because I owe them tax money, so I'll wait to send an email until after I can pay my leftover taxes...
22:34:06 * shapr sighs
22:34:36 <shapr> glguy: Yes, I need a car to take the test. Should I drive my car up to the state trooper's testing building?
22:35:14 <glguy> shapr: Everyone that I've known that took the test (in Missouri) drove to the tes ton a learner's permit with a licensed driver
22:35:52 <shapr> I'm 35, my license expired in 2000, and my relatives all have their own busy lives.
22:36:07 <shapr> I have been driving my car around anyway though, I had to drive it across town to get it home for example.
22:36:10 <bringert> shapr: good plan
22:36:17 <bringert> re taxes
22:36:27 * bringert goes to do some teaching
22:36:32 <bringert> stupid 8 am classes
22:36:36 * shapr goes to do some sleeping
22:37:17 <shapr> And tomorrow morning, I get to walk ~15 blocks to the nearest bus stop.
22:37:25 <glguy> that blows...
22:37:30 <dons> you need a unicycle
22:37:39 <dons> or a public transport system that doesn't suck?
22:37:46 <shapr> I have a unicycle, I just don't have a lock for it.
22:37:51 <dons> argh
22:38:21 <shapr> And the courthouse has a metal detector where you walk in, I bet they won't let me take my unicycle inside.
22:38:25 * shapr sighs
22:39:00 <shapr> On the good side, my gf visits in two weeks!
22:39:04 * shapr BOINGS
22:39:05 <dons> yay!
22:39:15 <glguy> tmi
22:39:29 <shapr> heh
22:39:58 <dons> hehe
22:40:06 <dons> ?uptime
22:40:06 <lambdabot> uptime: 1d 3h 16m 15s, longest uptime: 6d 15h 1m 36s
22:40:08 <dons> ?users
22:40:21 <lambdabot> Maximum users seen in #haskell: 256, currently: 215 (84.0%), active: 23 (10.7%)
22:41:12 <dons> hehe, first entry in the flight faq for my travel agent: "How do I lodge a complaint about my experience during security checks at the airport?"
22:41:19 <dons> :D
22:41:43 <dibblego> Sydney or US?
22:41:57 <dons> US
22:42:01 <dibblego> LAX?
22:42:06 <glguy> *
22:42:08 <dons> SFO
22:42:16 <dibblego> never been there
22:42:17 <dons> well, no specific in this case
22:42:25 <dibblego> Sydney is full of morons though
22:42:31 <dons> did LAX last year. irksome
22:43:03 <dons> but at least got a whole row to myself on the way home (apprently everyone's going syd -> LA, and not vice versa)
22:45:11 <Uvanta> err.. lambdabot tells who is active or not by its own analysis on the log? interesting.
22:45:33 * glguy wants lambdabot to identify the ghosts
22:45:37 <dibblego> ?users
22:45:38 <lambdabot> Maximum users seen in #haskell: 256, currently: 214 (83.6%), active: 23 (10.7%)
22:45:46 <dons> Uvanta: roughly, yes.
22:45:48 <dibblego> currently: 214 my client says 217
22:46:03 <dons> yeah, could be ghosts or something
22:46:16 <dons> maybe it misses some particular quit messages, not sure.
22:46:35 <Uvanta> or it does not count itself as a user
22:46:36 <dons> (not terribly fussed about fixing it..)
22:46:42 <glguy> does lambdabot exclude itself? lisppaste?
22:46:48 <dons> it shouldn't do.
22:47:13 <Uvanta> and maybe some more bots?
22:47:23 <Uvanta> afaik cmeme is a log bot
22:47:40 <dons> afaik, having written the code, it just looks at the initial /names list, and then modifies that on quits, joins and parts (and so on)
22:49:49 <glguy> ?uptime
22:49:49 <lambdabot> uptime: 1d 3h 25m 57s, longest uptime: 6d 15h 1m 36s
22:50:30 <Uvanta> then simply killing and turning it on will fix the problem, and i guess that's why you aren't urged to fix it
22:50:37 <dons> yep
22:50:50 <glguy> a sad day for haskell ;)
22:50:54 <dons> heh
22:51:22 <hyraxfourtwo> ?index evaluate
22:51:23 <lambdabot> Control.Exception, Test.QuickCheck, Debug.QuickCheck
22:51:31 <hyraxfourtwo> ?docs Control.Exception
22:51:32 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/base/Control-Exception.html
22:52:28 <Lemmih> dons: I hope you'll be taking pictures at the summit.
22:52:42 <dons> yeah, i plan to
22:52:56 <dons> blog blog blog
22:53:54 <dons> i really need lambda candies laced with something addictive to hand out
22:55:19 <glguy> sounds redundant...
22:56:34 <dons> heh
22:57:00 <glguy> according to this advertisement, if I go to school to be an vet tech. I could work with ponies and kittens!
22:57:09 <dons> that's cool!
22:57:25 <glguy> wtf have I been doing with my life worrying about computer languages and algorithms??
22:57:40 <glguy> *ponies*
22:57:52 <foxy> dons, does frag work on win?
22:57:57 <dons> *kittens*
22:58:03 <dons> foxy: I think so, yeah.
22:58:05 <dons> not 100% sure
22:58:19 * glguy has never successfully executed frag
22:58:55 <foxy> I'm recompiling GHC with GLUT support to give it a go...
22:59:11 <glguy> Linux?
22:59:19 <dons> has anyone had experience with digital cameras under bsd or linux? anything to look out for?
22:59:23 <foxy> glguy: win
22:59:28 <foxy> dons, penguins
22:59:43 <dibblego> dons, never had a problem on linux
22:59:44 <glguy> foxy: oh... I thought that ghc has opengl support by default (default build)
22:59:57 <Botty> iglguy - looks like it relies on tricky gl extensions.  really it should check for their existance and use them if their there, and make do if they're not
22:59:58 <glguy> dons: most seem to work like generic usb mass storage
22:59:59 <foxy> glguy, GL and GLU yes, but not GLUT
23:00:03 <glguy> oh
23:00:04 <dons> dibblego: they should just be usb mass storage, right?
23:00:05 <dons> yep
23:00:22 <ThreeQ> how would I implement a function that returns the current continuation?
23:00:38 <Botty> I'm not even gonna try to run frag on linux.  haven't ever gotten gl working properly
23:00:39 <glguy> foxy: you might think that, based solely on my nick, that I know what GL, GLU, or GLUT are, but if you did... you would be wrong ;)
23:01:07 <dons> Frag was developed on windows and linux, foxy (btw)
23:01:15 <dons> see the screenshots for the windows proof
23:01:20 <foxy> glguy :), gl.h and glu.h are the standard OpenGL headers, GLUT is a simple window toolkit on top of OpenGL
23:04:13 <ThreeQ> I'm looking at http://darcs.haskell.org/packages/monads/Monad/Prelude.hs and I see a returnCC function, but it's not clear to me how you would write returnCC in the normal Cont monad
23:04:19 <lambdabot> http://tinyurl.com/z8l88
23:08:24 <Cale> ThreeQ: can't you just derive that using the implementation of callcc in the Cont monad?
23:08:32 <Cale> (and return)
23:09:54 <Botty> 'fromIntegral' always throws me off. makes me do a double take and consider the possibility of a general haskell function for numerical integration
23:10:07 <Cale> hehe
23:11:55 <musasabi> dons: the digital cameras that work as USB storage devices just work, but some cameras (e.g. Canon 300D) use proprietary protocols which need specific programs under linux to work.
23:12:43 <musasabi> dons: of course if you want to use raw images instead of jpg, making sure your favorite image editor can import the format the camera is using (or finding a conversion tool) is a good thing to check.
23:15:36 <lispy> ?seen dons
23:15:36 <lambdabot> dons is in #ghc, #haskell-overflow and #haskell. I last heard dons speak 14m 21s ago.
23:15:44 <lispy> dons: where do frag patches go?
23:16:00 <lispy> _darcs/prefs/author doesn't exist
23:16:04 <dons> musasabi: right thanks. i was going to avoid canon for that reason
23:16:17 <dons> lispy: oh me.
23:16:29 <dons> i should put an author file in
23:16:55 <dibblego> dons, I have a canon and plug it straight into the USB port no problems - even my girlfriend does it on the Ubuntu machine - easy
23:17:06 <dons> ok. cool.
23:17:24 <dibblego> didn't install any software or set up anything special
23:17:27 <dons> and what does it present? a mass storage device with what, .jpg files on it?
23:17:36 <dons> or do you need gphoto or something
23:17:38 <dibblego> yeah I think so - something like that
23:17:46 <dibblego> no, it's really easy
23:17:49 <gour> anyone use dat tapes for backup?
23:17:58 <dibblego> easier than what windows users go through
23:18:08 <dibblego> gour, that is so 90's
23:18:08 <dons> yeah
23:18:19 * gour has to convert some old hi8 tapes to DV, so he is looking for appropriate media
23:18:37 <gour> dibblego: i know, but what is more reliable? dvd? nope
23:19:01 <dibblego> gour, I use remote replication per-commit to US, Germany and another site in Australia
23:19:02 <lispy> dons: building frag now to amke sure my patch is good
23:19:18 <lispy> dons: Uvanta was trying to run frag and it gave pattern match failurs!
23:19:22 <musasabi> dibblego: which Canon camera - one offering USB storage or the proprietary protocol (which needs gphoto2 or similar to read) ?
23:19:31 <lispy> dons: and that was because no level was given on the command line..
23:19:37 <lispy> dons: so i'm fixing that
23:19:38 <dibblego> so unless some rogue state like say North Korea drops a bomb on all locations simultaneously...
23:19:44 <gour> dibblego: it's ~100 hours of raw-material and i want to archive produced movies too
23:19:47 <dibblego> musasabi, lemme ask my girlfriend :)
23:20:14 <glguy> gphoto2 works on OpenBSD
23:20:25 <dons> musasabi: so if i'm wandering around duty free inthe airport, i should keep an eye for cameras explicitly talking about usb support (or even linux support?) is that too much to hope for?
23:20:41 <dibblego> gour, mail the data for initial set up?
23:20:46 <lispy> dons: linux support is a bit much to ask for
23:20:47 <gour> dibblego: someone suggested raid but it means at least 6 HDs (350GB), ie. new machine
23:20:50 <dons> glguy: heh that's cool.
23:20:59 <dibblego> raid doesn't prevent flood/fire/theft
23:21:09 <dons> lispy: just feeling good that my wifi card says 'linux' on the box :)
23:21:16 <lispy> dons: cool!
23:21:18 <dons> you can only dream
23:21:22 <musasabi> dons: if you have internet access just googling for the camera model + linux usually is a good indication.
23:21:23 <glguy> dibblego: but does it protect against tornados?
23:21:28 <gour> dibblego: how to mail eg. 2TB of data?
23:21:35 <dibblego> raid is useless - I have no use for it
23:21:40 <dons> musasabi: yep. doing so. cheers.
23:21:41 <dibblego> gour, no idea mate
23:21:44 <lispy> dons: now that you mention ralink...i think my athero card is by them
23:21:53 <musasabi> most cameras just work.
23:21:57 <dibblego> I even have two big raid machines at home in my garage - should ebay them or something
23:21:57 <gour> dibblego: that's why i am thinking about tapes...
23:22:07 <dons> musasabi: ok. that's good to know. :)
23:22:14 <Botty> gour - 6 HDs?
23:22:23 <dibblego> dons, yeah you can be pretty sure it will "just work"
23:22:25 <earthy> gour: tape is viable, but expensive for the capacities you're looking at
23:22:27 * dons just went through 4 wifi cards to find 1 good one... so is feeling extra cautious
23:22:28 <Botty> must be RAID 5 or something, because most use 2
23:22:29 <earthy> get external spindles
23:22:38 <earthy> i.e. harddisks
23:22:46 <gour> Botty: yes, raid 5,  6 x 350GB to get around 2TB
23:22:55 <lispy> dons: but ididn't think to mention them before...also, anything by intel is supposed to support linux..they had a big company initiative to support open source, esp. linux from now on and they seem to be sticking to it
23:22:59 <Botty> oh. you need 2TB.  I miissed that detial
23:23:18 <Botty> just get 1000 gmail accounts
23:23:24 <dibblego> lol
23:23:25 <vegai> the ralink cards have a gpl driver. Although that doesn't guarantee quality at all.
23:23:29 <gour> earthy: i am thinking about dat72 or (maybe) dlt
23:23:42 <dons> the ralink guys also gave docs to the openbsd devs, so we have bsd drivers too
23:23:48 <dons> which was really really nice to see
23:24:06 <vegai> Sure. Their own driver is kinda bad, though. It works, but..
23:24:13 <dons> heh
23:24:14 * hyrax42_ is wondering why there are Ix instances for IOMode and Ordering
23:24:17 <gour> earthy: you have some recent experience with tapes?
23:24:41 <hyrax42_> I suppose "why not" is a valid answer
23:24:42 <gour> earthy: i used dds-1 but was not very satisfied, so i wonder if dat72 & dlt is better?
23:24:59 <lispy> we got permission at work to buy a big bad tape backup server but we haven't picked one to buy et
23:25:29 <gour> lispy: what kind of tapes?
23:25:36 <lispy> gour: not sure...
23:25:46 <dibblego> I honestly see no use for those kind of things if you have enough bandwidth
23:25:52 <lispy> gour: we were probably going to buy something from dell that provided enough capacity
23:26:03 <glguy> hooray!, I have ghc 6.6 installed
23:26:14 <lispy> dibblego: it's our only option, we need to backup about 1 TB
23:26:29 <lispy> 6.6 was released?
23:26:34 <dibblego> lispy, that's about how much I have backed up around the world symmetrically encrypted
23:26:42 <glguy>  / /_\// /_/ / /  | |      GHC Interactive, version 6.6, for Haskell 98.
23:26:50 <dibblego> lispy, furthermore, if I do a commit, within one minute it is replicated worldwide
23:26:57 <glguy> I built it from the sources label 6.6
23:27:03 <lispy> dibblego: that's cool for you, but like i said, not an option for us
23:27:10 <dibblego> lispy, why not?
23:27:27 <lispy> it would take far too long
23:27:30 <lispy> for one thing
23:27:36 <dibblego> lispy, you're about to spend $x on tapes to hold n bytes - you could just spend it elsewhere
23:27:45 <dibblego> only for the initial replicate
23:27:46 <gour> dibblego: i have 1024/192 adsl here and 1 hour of raw video is 12-13GB
23:28:00 <dibblego> but no longer than "whoever looks after the tapes" to drive to their off-stie location
23:28:10 <lispy> dibblego: we have many gig files is the reason we have terabyte data
23:28:21 <gour> same here
23:28:33 <dibblego> lispy, what is the difference between taking the tape home and taking the data home and putting it on a replciation server?
23:28:54 <dibblego> the difference is that the manual process is eliminated with a replication server
23:29:07 <dibblego> and replications occur real-time
23:29:14 <lispy> well, like i said, not gonna happen for us
23:29:24 <lispy> that would be even worse
23:29:28 <dibblego> like I said, I see no reason for big silly tapes
23:29:38 <dibblego> what would be worse?
23:29:45 <gour> dibblego: dat tapes are not so big
23:29:57 * glguy recommends that dibblego not be involved in lispy's solution... it would bother him too much
23:30:04 <gour> he he
23:30:39 <dibblego> I just looked hard for refutation to "tapes are pointless and excessively expensive" at it seems there isn't one
23:31:08 <gour> yep, they still have use for certain applications
23:31:36 <lispy> bandwidth is expensive and setting up a location to store the date is prohibitive
23:31:52 <dibblego> then does that mean your tapes will live on-site?
23:32:18 <dibblego> that's not a backup solution
23:32:27 <dibblego> if they live off-site then you have contradicted
23:32:30 <lispy> no idea yet, but moving them somewhere is cheaper than getting highspeed internet + hardware to store the data, no?
23:32:33 <gour> in my case - yes. in some closet...similarly as hi8 tapes which i have (some from '92)
23:32:34 <dibblego> "a location to store the date is prohibitive"
23:33:03 <dibblego> cheaper? hell no! how much is your tape backup server?
23:33:30 <dibblego> bandwidth is not expensive at all - the analogous to that is petrol for your boss to take the tapes off-site
23:33:35 <dibblego> how much is petrol in your city?
23:33:46 <lispy> no idea, i don't drive
23:33:54 <dibblego> more than bandwidth :)
23:34:45 <dibblego> I still see no use for all this excessive expense and room for failure/data loss
23:35:13 <lispy> i know
23:35:32 <dibblego> if "the corporation said so" is what occurred, then I simply concede
23:35:37 <dibblego> I have worked for those places before
23:35:44 <dibblego> but certainly "sense says so" is false
23:36:03 <lispy> i just don't think replicating gigs of data is worth the hassle when it won't buy us anything and will cost us a lot
23:36:08 <dibblego> gour, you should take off-site backups
23:36:27 <gour> dibblego: not with 2TB and my adsl
23:36:28 <dibblego> no, it will ensure less room for data loss and cost less
23:36:42 <dibblego> gour, then I don't call that a backup
23:36:55 <lispy> if it takes 8 hours to replicate and it goes down in the middle and has to restart, how do we deal with that?
23:36:55 <gour> dibblego: you can call it archive copy
23:37:05 <dibblego> it will *not* take 8 hours to replicate
23:37:15 <dibblego> the analogous is taking the tapes home for the first time
23:37:17 <lispy> bandwidth is expensive, remember?
23:37:18 <dibblego> so do just that
23:37:30 <dibblego> if it is a zillion bytes, transport them manually
23:37:39 <dibblego> I have done exactly that myself before
23:37:47 <gour> dibblego: how long i need to transfer 1hour of video - 13hrs with 1024/192 adsl?
23:38:04 <dibblego> in any case, perform a local network replicate first anyway then replicate off that (with encryption)
23:38:05 <gour> s/13hrs/13GB
23:38:20 <dibblego> how long does it take to transmit a data delta? 2 seconds? I'll check my logs if you like
23:38:40 <dibblego> furthermore, where is there room for data loss? within a 1 minute time period
23:38:51 <lispy> we record videos from our simulation software, so deltas don't make sense
23:38:51 <dibblego> the worst case scenario is losing 59.9 seconds of data
23:38:55 <gour> in my case there is no data delta.
23:39:06 <dibblego> there is delta on top of existing data
23:39:14 <dibblego> what will you take home on your tapes?
23:39:19 <dibblego> a delta?
23:39:20 <gour> i simply convert hi8 tape into DV and need to store that in a safe place
23:39:23 <lispy> dibblego: no
23:39:31 <lispy> dibblego: our tapes will not hold incrementals
23:39:36 <dibblego> why not?
23:39:40 <lispy> that was very important
23:39:49 <dibblego> how is that important?
23:39:55 <lispy> it's too risky (in terms of reconstruction) to deal with deltas
23:40:07 <dibblego> not at all
23:40:21 * gour thinks dibblego does not understand fully the intricacies involved in dealing with video-material
23:40:21 <dibblego> I will receive an email within 1 minute if a reconstruction fails
23:40:33 <dibblego> video material has nothing to do with anything
23:40:37 <dibblego> you might mean "expensive deltas"
23:40:54 <dibblego> there is absolutely no risk in reconstruction with a proper solution
23:41:03 * gour reads about 7 IDEs for PHP - http://www-128.ibm.com/developerworks/opensource/library/os-php-ide/?ca=dgr-btw03PHP-IDEs-7 wondering when we'll discuss IDEs for Haskell
23:41:30 <lambdabot> Title: Seven great PHP IDEs compared, http://tinyurl.com/qcrp5
23:41:32 <dibblego> I use intellij idea quite successfully
23:41:42 <earthy> gour: we already do. yi, hIDE, Visual Haskell, EclipseFP, Emacs Haskell Mode, vim...
23:41:49 <lispy> dons: please let me know if you get the patch, not sure if sendmail is happy on this machine
23:41:51 <dibblego> I should sell a backup solution and prove betterness than silly tapes
23:41:53 <dons> earthy++
23:42:03 <gour> dibblego: i just need to store eg. 3hours of DV on 36GB tape and store it somewhere until i need it again. no diff/incremental backups etc.
23:42:07 <dons> lispy: got it.
23:42:21 <dons> lispy++ first external frag patch!
23:42:28 <lispy> nice!
23:42:29 <dibblego> gour, sure, that's not backup - and has ntohing to do with what I said - data loss is perfectly possible and an accepted risk
23:42:38 <gour> dibblego: same when i make a 'movie' - i just want to store raw DV version (besides burning DVD)
23:42:50 <earthy> gour: you want archival quality... scary
23:42:59 <earthy> especially with DV data
23:43:03 <dibblego> gour, sure, not backup, data loss is potential and not mitigated, etc.
23:43:06 <lispy> dibblego: yes, and i'd probably buy it...i don't like tapes, but for our non-detlta'd archives they come out ahead of our alternatives
23:43:10 <gour> earthy: yi is functional? hiDE works?
23:43:18 <dibblego> lispy, I still do not see why
23:43:23 <gour> earthy: why (scary) ?
23:43:26 <lispy> dibblego: i know :)
23:43:26 <earthy> gour: yi is functional, hIDE works. not very well though
23:43:34 <lispy> dibblego: but let's drop it :)
23:43:34 <dibblego> lispy, I am forced to conclude I am right again
23:43:37 <dibblego> sure
23:43:40 <gour> earthy: editing mpeg is not adequate?
23:43:53 <earthy> gour: all writable optical media have not been tested longer than (say) 20 years
23:44:07 <earthy> gour: all magnetical media have known finite shelflife shorter than 50
23:44:12 <earthy> (years)
23:44:22 <earthy> so... how do you archive this...
23:44:25 <gour> earthy: that's why i don't want to depend on optical media (dvd, blu-ray, hd dvd...)
23:44:31 * lispy hopes our data doesn't need to last that long :)
23:44:50 <earthy> lispy: I *know* I want some of my data to last that long
23:45:00 <lispy> earthy: yeah...true
23:45:02 <earthy> I plan to turn 80, once. That is half a century from now.
23:45:14 <lispy> earthy: but i was hoping the data at work wouldn't have to :)
23:45:29 <earthy> it'd be shitty to not have the digital pics taken now available any more
23:45:37 <gour> earthy: so when i produce eg. some 'movie' from raw material i'll burn it as mpeg on dvd for playback, but want to keep DV version on tape so i can re-edit without (too much) loss - if needed
23:45:40 <earthy> I just have *no* clue how I'm going to make that happen
23:45:49 <earthy> gour: obviously
23:46:04 <dibblego> earthy, you'd have to store the hardware or assume it still exists
23:46:08 <hyrax42_> ?fptools Prelude
23:46:09 <earthy> gour: but what is your archive's lifespan...
23:46:09 <lambdabot> http://darcs.haskell.org/packages/base/Prelude.hs
23:46:14 <Cale> who goes 50 years without buying a new harddrive?
23:46:18 <gour> earthy: that's why i am asking about experience with newer types of tapes - dat72, dlt...
23:46:27 <Botty> just have a few hard drive backups and replace periodically, or as they fail
23:46:40 <lispy> gour: it's very likely we will buy dlt, i know dell sells them
23:46:42 <earthy> gour: LTO, DLT4. they work. are expensive, but work. and work well
23:47:05 <earthy> however, for backups, cs.uu.nl has gone for a linux system with a shitload of disk and fs snapshots.
23:47:10 <dibblego> Botty, in various locations :)
23:47:18 <Botty> well, yes
23:47:25 <hyrax42_> ?fptools GHC.Base
23:47:26 <lambdabot> GHC.Base not available
23:47:28 <dibblego> and replicate real-time :)
23:47:32 <hyrax42_> gah
23:47:32 <gour> earthy: for now i have hi8 tapes from 90's, but hi8 camcorder died and i am playing them back (for converting into DV) with D8 camcorder, but this technology is at the end
23:47:44 <Botty> I use gmail for my personal svn, but thats me
23:47:46 <gour> earthy: so want to 'upgrade' media
23:47:56 <earthy> dibblego: actually, the best way to do digital archives I've come up with up to now is to keep copying to new media
23:47:57 <Botty> I suppose there's no guarrantee that won't go away
23:48:09 <earthy> gour: yeah, exactly
23:48:11 <dibblego> earthy, me too
23:48:22 <gour> earthy: yes, dlt is expensive... any experience with dat72 (dds-5) ?
23:48:34 <earthy> nope. unfortunately not
23:48:39 <dibblego> earthy, but that doesn't mean the hardware is around to support it in time + 1
23:48:58 <dibblego> you could even submit your favourite "media application" for backup
23:49:03 <gour> earthy: i do not want to go into blu-ray & hd dvd with bunch of copy-protection schemes. who knows it will work at all on linux
23:49:05 <dibblego> but you still need the hardware
23:49:28 <earthy> dibblego: basically, it amounts to setting up your archive with open file formats on an accessible machine talking an open network protocol
23:49:51 <earthy> when you're at that point, you simply have to upgrade every x years, where the current optimum seems to be x == 5
23:49:59 <dibblego> that doesn't guarantee anything
23:50:07 <dibblego> even if the formats were closed, it means nothing
23:50:28 <earthy> dibblego: do you have a better way?
23:50:44 <dibblego> nope, like I said, it all depends on the hardware being available
23:50:59 <earthy> (yes, hardware may fail. that's where hot spares and online backups come in)
23:51:11 <dibblego> even if you submit "the application that reads the closed format"
23:51:29 <dibblego> you need to be able to run that application
23:51:39 <dibblego> so you might submit "the operating system that runs that application"
23:51:49 <dibblego> you can't submit the hardware
23:52:11 <earthy> dibblego: I've gone throuh 6 OS'es as my main platforms.
23:52:28 <dibblego> I don't have a main platform
23:52:45 <earthy> dibblego: then how do you work? :)
23:52:54 <dibblego> with whatever I might have :)
23:53:06 <dibblego> now that I am not working for The Filth, I generally use linux
23:54:02 <earthy> it's interesting to note, by the way, that TeX is one of the very few systems that were designed with archival of documents written for it in mind
23:55:01 <lispy> earthy: what do you mean? (i've never heard about this)
23:55:40 <earthy> lispy: one of the design goals of TeX was that a document written in (say) 1984 could still be rendered in (say) 2084 or 4084
23:55:54 <earthy> that is one of the reasons TeX the program was published as a book.
23:56:06 <lispy> hmm...
23:56:13 <lispy> but how can knuth ensure that?
23:56:50 <earthy> lispy: he retains the rights to the name TeX.
23:57:05 <dibblego> he can't
23:57:17 <earthy> so anything you write that deviates from TeX the program as published by Knuth, is not TeX.
23:57:23 <earthy> dibblego: he can while he lives.
23:57:36 <dibblego> did he submit the compiler as a book too?
23:57:40 <earthy> and his heirs can in the first 50 or so years after his death
23:57:43 * lispy signs the petition for Knuth's immortatlity :)
23:57:45 <dibblego> nope
23:58:01 <dibblego> North Korea drops a bomb on every x86 CPU - now what?
23:58:12 <dibblego> did he submit the compiler's compiler?
23:58:18 <dibblego> was it x86 code?
23:58:20 <earthy> dibblego: you seem of the opinion that algorithms can not be executed by hand...
23:58:35 <dibblego> I'm assuming this one can't
23:58:44 <earthy> TeX is written in WEB, WEB is a well defined method of writing Pascal
23:59:01 <earthy> with human-readable text
23:59:13 <earthy> you've never seen TeX the program, have you?
23:59:17 <dibblego> no
23:59:32 <earthy> you've never read any of the taocp volumes either?
23:59:38 <dibblego> no
23:59:42 <earthy> 'ah'
23:59:48 <lispy> oh they are interesting
23:59:59 <Botty> its called literate programming right? like literate haskell, except its a bit limited compared to the 'real' stuff
