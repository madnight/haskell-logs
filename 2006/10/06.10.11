00:00:08 <lispy> they run on a computer that has never existed outside of software, afaict
00:00:11 <dibblego> so I hear often
00:00:15 <earthy> lispy: indeed.
00:00:58 <earthy> the entire body taocp code is written in an assembly language devised just for the books
00:01:14 <earthy> (which actually makes sense, given the point at which knuth started writing them)
00:01:46 <earthy> one of the interesting problems that haskell' seems not to want to solve is that of language representation
00:02:03 <earthy> this was something that was quite common in the 1960's
00:02:15 <earthy> so Algol 68 was defined *independent* of its machine representation
00:02:46 <earthy> (and there was a fair number of those, with different so-called stropping conventions and the like)
00:03:02 <earthy> wow, that was short.
00:03:49 <lispy> earthy: so
00:04:03 <lispy> earthy: knuth's approach is sort of operations semantics, eh?
00:04:10 <earthy> sort of
00:04:59 <kzm> Is (GHC's) Float still underperforming compared to Double?
00:05:21 <kzm> (Or is my recollection faulty?)
00:05:25 <earthy> anyway, time to hang the laundry to dry. :)
00:05:27 * lispy has been meaning to write his own mmix machine in haskell (for the challenge) then write all the taocp algorithms in haskell (for pratical use)
00:05:42 <therp> is it possible to rewrite parts of ghci when running a ghci session?
00:05:54 <earthy> therp: erk?!
00:06:10 <earthy> explain what you want to do. :)
00:06:13 <ThreeQ> ?type \x -> callCC $ \k -> return (x, k)
00:06:14 <lambdabot> Not in scope: `callCC'
00:06:22 <ThreeQ> \x -> Control.Monad.Cont.callCC $ \k -> return (x, k)
00:06:28 <ThreeQ> ?type \x -> Control.Monad.Cont.callCC $ \k -> return (x, k)
00:06:30 <lambdabot>   Occurs check: cannot construct the infinite type: b = (a, b) -> m b1
00:06:30 <lambdabot>    Expected type: b
00:06:30 <therp> earthy: in sbcl (common lisp compiler) it's absolutely no problem to rewrite the compiler in an sbcl session
00:06:53 <therp> earthy: I want to start to hack on ghci, but I'm not really interested in edit/compile/run/test cycles. that kind of software development sucks
00:07:37 <ThreeQ> therp: you could try loading ghci in ghci, then running it
00:08:20 <therp> threeq: will that enable me to do modifications to ghc in the "session image" ?
00:08:33 <ThreeQ> what's a "session image"?
00:08:38 <lispy> therp: i could say similar things of the edit/reload/whoah-what-state-is-my-address-space-really-in? cycle though (and yes, i've hacked a fair bit of lisp)
00:09:14 <earthy> therp: yeah, you could modify the 'session image'
00:09:18 <earthy> it would require reloading though
00:09:40 <earthy> but honestly, I think it'd be painful
00:10:26 <Cale> Er, you're proposing to replace parts of the code while the program is running?
00:10:30 <therp> threeq: in lisp, you don't have a program image that's loaded, but usually you load the whole cl environment, that includes the compiler too. using the compiler you can subsequently modify the program currently loaded, or load a totally different into the current processes space, that's the reason why many lispers talk about it as session
00:10:46 <therp> cale: that really a trivial thing in CL. yes, I'm proposing that
00:10:52 <therp> +is
00:10:57 <dons> the ghc faq does talk about developing ghc in ghci
00:11:02 <Cale> I don't see how you could do that and retain type safety.
00:11:04 <dons> you compile the tree once (for speed) then test changes in ghci only
00:11:05 <lispy> therp: i think given the reasonably dependency checking of haskell, all you'd really be saving yourself in the more lisp style would be the time it takes to setup some test case...which means, just load a file with your test case
00:11:07 <dons> much faster turn around
00:11:40 <Cale> Well, I suppose you could insist that all changes made had no impact on the types involved.
00:12:34 <Cale> Also, how is that supposed to interact with typeclasses? What happens if you remove an instance which is in use?
00:12:45 <lispy> i used to think the one-session-hacking was a good idea until a few times i came back to my programs and they wouldn't even compile
00:12:52 <Cale> It seems like a stupidly unsafe thing to do.
00:13:03 <lispy> after a few times i learned that old expressions would hang around and sometimes the new code wouldn't reflect that
00:13:15 <therp> lispy: I want to do adhoc test cases. I just switch between my lisp source code editor and my slime repl back and forth. that's much faster and much more conventient, and at the end much more productive that formalizing a set of test cases. I learned my leason here
00:13:18 <Cale> oh, for sure
00:13:39 <Cale> With lazy evaluation it would be even more insane
00:13:47 <hyrax42_> what's teh best way to take a right section of (-)
00:13:53 <lispy> therp: but, what if you need to go through the same test cases later?
00:14:10 <therp> lispy: I would dump my slime history file
00:14:19 <Cale> Because you might, say, replace the f in some map f xs call when the whole list had not been mapped over yet
00:14:32 <Korollary> ?pl \x -> 2 - x
00:14:33 <lambdabot> (-) 2
00:14:43 <Cale> Which would result in part of the list having the old f applied, and part having the new f.
00:14:48 <lispy> ?pl \x -> x - 2
00:14:48 <lambdabot> subtract 2
00:14:58 <Cale> (or else, all of it having the old f, and you being confused :)
00:15:21 <lispy> therp: i think you should give dons suggestion a try :)
00:15:35 <lispy> therp: it may be close enough to be workable
00:16:03 <hyrax42_> lispy: ah, subtract... thankgs
00:17:07 <lispy> hyrax42_: thank Korollary
00:17:19 <gour> earthy: earlier you mentioned hIDE as one of the IDEs for haskell. i cannot built it, so what does it do at the moment?
00:17:19 <hyrax42_> oh woops
00:17:20 <lispy> hyrax42_: was his idea :)  i just took the other section to see what pl would say
00:17:22 <hyrax42_> thanks Korollary
00:17:33 <hyrax42_> lispy: thanks retracted
00:17:34 <hyrax42_> ;)
00:17:34 <earthy> gour: good q
00:17:40 <lispy> hyrax42_: that's better ;)
00:17:47 <gour> earthy: :_)
00:18:09 <lispy> gour: careful, you're about to lick your eyeball...
00:18:56 <gour> lispy: right. more care should be invested in 'smiling'. my irc client does not take care :-)
00:19:14 <earthy> last time I looked it allowed me to edit my haskell. but vim was better, so I returned to vim. :)
00:19:24 <therp> dons: can you point me to the faq you mentioned. the one in the wiki doesn't include anything about ghc in ghci
00:19:52 <gour> i'm still with (g)vim, although gedit is becoming functional too
00:20:24 <Bourbaki> nabend
00:20:24 * lispy is die hard emacs
00:20:51 <earthy> lispy: you had the luxury of learning emacs, then. ;)
00:21:25 <lispy> lol
00:21:26 <therp> earthy: it only takes a half year to learn how to take advantage of the most relevant features :)
00:21:36 <Cale> whoa, Emacs lisp still uses dynamic scoping?
00:21:44 <hyrax42_> Cale: yep
00:21:58 <Cale> How do they put up with it?
00:22:02 <earthy> therp: I went through half a year of pain learning vi
00:22:10 <earthy> I don't want to redo that for another editor. ;)
00:22:12 <hyrax42_> they'd have to rewrite everything otherwise
00:22:17 <hyrax42_> is my guess
00:22:20 <Korollary> frankly, who cares
00:22:22 <hyrax42_> that's a lot of everything
00:22:22 <lispy> Cale: yeah, but...remember it's much older than all the other lispsand they don't want to break the huge existing library
00:22:52 <ThreeQ> ?type \x -> Control.Monad.Cont.callCC $ \k -> return (x, k)
00:22:53 <lambdabot>   Occurs check: cannot construct the infinite type: b = (a, b) -> m b1
00:22:54 <lambdabot>    Expected type: b
00:22:58 <ThreeQ> how do I get this to typecheck?
00:23:16 <ThreeQ> I remember there being some trick for the y combinator...
00:23:17 <lispy> Cale: and elispers claim that dynamic scope simplifies much of what you use elisp for
00:23:53 <lispy> Cale: of course...it's also preventing elisp from having any threading
00:24:26 <lispy> Cale: which means using emacs as a development platform (which happens whether it's a good idea or not) gets hampered by the single threaded nature
00:24:43 <Cale> I find it amazing that it manages to be that large and still working with dynamic scoping. You'd never know if calling another person's function is safe.
00:24:53 <lispy> Cale: so things like email clients, irc clients, ftp clients (which all exist and are popular in emacs) suffer
00:25:33 <lispy> Cale: well, you want all the code in emacs to interact to some extent
00:25:39 <lispy> the code is friendly
00:25:43 <Cale> heh
00:25:45 <lispy> it wants to help each other
00:26:06 <lispy> but yeah, i guess in some ways it is amazing
00:27:51 <lispy> Cale: think of it this way...
00:27:58 <lispy> Cale: people joke that emacs is an os
00:28:07 <sieni> therp: lispy: Didn't Yale Haskell have sort of Lispish development environment: http://burks.bton.ac.uk/burks/foldoc/18/130.htm
00:28:10 <lambdabot> Title: Yale Haskell, http://tinyurl.com/m26wy
00:28:13 <lispy> Cale: now imagine an OS where all programs share an address space and there is no threading
00:28:14 <sieni> lispy: it just lacks a decent editor
00:28:17 <Cale> anyway, I was going to say that the earlier suggestion of replacing code at runtime was rather like dynamic scoping, but much worse
00:28:31 <lispy> sieni: i've never seen it, is that yhc?
00:28:38 <sieni> no
00:28:41 <Cale> But apparently some people aren't bothered by dynamic scoping :)
00:28:46 <Korollary> erlang has hot code swapping
00:28:47 <sieni> something older and probably defunct or something
00:29:19 <gour> what happened with that wxwidgets haskell ide (iirc, haste) ?
00:29:39 <Cale> lisppaste2: url
00:29:54 <lisppaste2> To use the lisppaste bot, visit http://paste.lisp.org/new/haskell and enter your paste.
00:30:16 <dons> therp: hmm. i read it somewhere.. maybe it was even the ghci paper/document?
00:30:18 <lispy> Cale: for a second there i thought you accidentally nick completed on lisppaste2 but wanted a url from me :)
00:30:28 <Korollary> erlang also has pattern matching and const space tail recursion.
00:30:29 <Cale> heh
00:31:12 * lispy just learned it's said, errlang not urlang
00:31:17 <dons> heh, haskell has hot code swapping too....
00:31:24 <lisppaste2> Cale pasted "example" at http://paste.lisp.org/display/27766
00:31:27 <dons> (yeah i know i know..)
00:31:34 <lispy> dons: but
00:31:38 <lispy> dons: how does it work?
00:31:45 <lispy> dons: i mean, can i keep stuff in memory?
00:31:46 <dons> not the same as erlang
00:31:51 <lispy> okay
00:31:55 <dons> state? yes.
00:32:04 <lispy> see i struggle with this
00:32:10 <dons> you can keep sockets open and so on
00:32:19 <dons> (see last year's hs-plugins paper)
00:32:29 <lispy> i think i read it at least once actulaly :)
00:32:38 <lispy> just didn't sink in i guess
00:32:56 <dons> its a userland hot swapping system. not rts-based like erlang (which is much more sophisticated)
00:33:11 <lispy> can you give me a simple example of what can't be saved across the reload?
00:33:21 <dons> application state
00:33:32 <lispy> a socket is not application state?
00:33:33 <dons> so anything you've got in a monad, ioref or whatever
00:33:35 <dons> sure it is
00:34:07 <hyrax42_> dons misread?
00:34:28 <dons> oh yes :)
00:34:38 <lispy> seems like you said a socket can be kept open, but it's also application state :)
00:34:42 <dons> what can't be saved. hmm. anything not findable from the root GC ptrs
00:35:06 <dons> if you can find the state, you can save it
00:35:09 <therp> dons: is there a "canonical" paper on ghci? my haskellwiki searches fail to produce results
00:35:12 <lispy> Oh, so you mean rts stat cannot be saved?
00:35:23 <dons> no, its userland
00:35:26 <lispy> therp: wiki search sucks :(
00:35:31 <dons> so user land controls the reentry point, for example
00:35:42 <Korollary> there are many ghc papers. The spineless tagless g machine is the one that starts it I believe.
00:35:44 <Bluelive> was there something here like a ddos attack ?
00:35:44 <lispy> ?google site:haskell.org ghc in ghci
00:35:47 <lambdabot> http://www.haskell.org/ghc/docs/6.4.2/html/users_guide/win32.html
00:35:47 <lambdabot> Title: Chapter 11. Running GHC on Win32 systems
00:35:51 <dons> yeah, check the ghc documents page
00:36:05 <dons> Bluelive: hmm. no.
00:36:21 <dons> Bluelive: why?
00:36:34 <Bluelive> weird, my isp blocked my modem because i was ddossed, they think because i was on freenode
00:36:49 <lispy> Bluelive: weird
00:36:49 <dons> ah. freenode does do port scanning
00:36:59 <dons> they might have mistook that for an attack?
00:37:05 <Bluelive> with 100k packets / sec ?
00:37:09 <dons> oh no.
00:37:32 <lispy> dons: okay, so, we have sockets and things inside your application can be restored...but then what was something we can't restore? (sorry for the insistence, just trying to see how this is different)
00:37:46 <Bluelive> i have no logs either so no clue how to find anything
00:37:51 <dons> freenode scans from 'please.read.http.proxyscan.freenode.net"
00:38:04 <dons> (82.96.96.3
00:38:04 <dons> )
00:38:10 <lispy> heh, good name
00:38:19 <Bluelive> hardly think freenode would itch them
00:38:36 <Bluelive> hmz, no clue
00:38:40 <Bluelive> owell, thanks
00:40:35 <lispy> dons: it seems like, if it isn't part of my application state, how can i care (or tell) if it was reloaded?
00:42:42 <Bourbaki> hey dons
00:45:43 <therp> dons: hm, no luck on digging through the ghc documentation/developer wiki. maybe I should ask in a ghc-devel list
00:46:29 <lispy> therp: if you find the answer, creating a page on the wiki would be a very kind thing to do :)
00:46:40 <therp> lispy: sure :)
00:47:34 <Korollary> how about http://hackage.haskell.org/trac/ghc/wiki/Commentary
00:47:37 <lambdabot> Title: Commentary - GHC - Trac, http://tinyurl.com/ocuyo
00:47:50 <Korollary> and http://hackage.haskell.org/trac/ghc/wiki/GhcPapers
00:47:52 <lambdabot> Title: GhcPapers - GHC - Trac, http://tinyurl.com/l3ugp
00:47:54 <therp> korollary: I haven't spotted anything there
01:02:54 <vincenz> suggestion for std-lib > let segment n l = takeWhile (not null) $ map (take n) $ iterate (drop n) l in foobar 3 [1..10]
01:03:02 <vincenz> > let foobar n l = takeWhile (not null) $ map (take n) $ iterate (drop n) l in foobar 3 [1..10]
01:03:03 <lambdabot>    Expecting a function type, but found `Bool'
01:03:03 <lambdabot>    Expected type: a -> Bo...
01:03:10 <vincenz> > let foobar n l = takeWhile (not . null) $ map (take n) $ iterate (drop n) l in foobar 3 [1..10]
01:03:12 <lambdabot>  [[1,2,3],[4,5,6],[7,8,9],[10]]
01:06:52 <lispy> ?pl foobar n l = takeWhile (not . null) $ map (take n) $ iterate (drop n) l in foobar 3 [1..10]
01:06:53 <lambdabot> (line 1, column 73):
01:06:53 <lambdabot> unexpected reserved word "in" or "i"
01:06:53 <lambdabot> expecting variable, "(", operator, "$", "$!", "`seq`" or end of input
01:07:00 <lispy> ?pl foobar n l = takeWhile (not . null) $ map (take n) $ iterate (drop n) l
01:07:00 <lambdabot> foobar = (takeWhile (not . null) .) . ap ((.) . map . take) (iterate . drop)
01:12:21 <dblhelix> @hoogle unfoldr
01:12:22 <lambdabot> List.unfoldr :: (a -> Maybe (b, a)) -> a -> [b]
01:12:22 <lambdabot> Data.List.unfoldr :: (b -> Maybe (a, b)) -> b -> [a]
01:15:59 * earthy looks at that output and goes 'duh'
01:16:10 <earthy> why the hell are the typevariables swapped in the second?
01:19:33 <ibid> but they are?
01:19:36 <ibid> just differently
01:20:11 <Cale> It's the same type
01:20:39 <earthy> it is
01:21:06 <Cale> Probably depends on which variables the person who wrote each version used.
01:21:12 * earthy thinks so
01:21:15 <earthy> weird though
01:25:37 <ibid> and i again misread what earthy wrote :)
01:27:23 * earthy is used to that. My girlfriend also tends to hear stuff I never said. ;)
01:31:41 <Syzygy-> earthy: That is a frightfully mean thing to be saying about your uncle.
01:32:07 * earthy grins
02:01:03 <bourbaki> nabend
02:03:27 <profmakx> ?time bourbaki
02:03:28 <lambdabot> Local time for bourbaki is Wed Oct 11 11:03:05 2006
02:03:36 <profmakx> ok. namd
02:03:42 <bourbaki> :)
02:03:55 <bourbaki> hehe
02:08:46 <roconnor> ?time SamB
02:08:47 <lambdabot> Local time for SamB is Wed Oct 11 05:08:33
02:14:49 <araujo> morning!
02:15:43 <roconnor> > if undefined then True else Ture
02:15:44 <lambdabot>  Not in scope: data constructor `Ture'
02:15:49 <roconnor> > if undefined then True else True
02:15:50 <lambdabot>  Undefined
02:16:09 <mwc> What's "lazy" pattern matching?
02:16:14 <mwc> I came across them in an older paper
02:16:26 <mwc> \~(x,y) vs \(x,y)
02:16:47 <roconnor> lazy pattern matching is when a pattern match is ``guarenteed'' to succeed
02:17:08 <slime_mold> > let f ~(x:xs) = "fine" in f []
02:17:09 <lambdabot>  "fine"
02:17:10 <roconnor> therefore the pattern matching is delayed until one of the bound variables is actually demanded.
02:17:40 <roconnor> all patterns in lets and lambdas are by default lazy.
02:17:59 <roconnor> (at least the to level patterns are lazy)
02:18:27 <mwc> > let f ~True = "test" in f False
02:18:28 <lambdabot>  "test"
02:19:10 <mwc> > let f ~b@True = b in f False
02:19:11 <lambdabot>  Irrefutable pattern failed for pattern (b@GHC.Base.True)
02:19:19 <mwc> I see, interesting
02:20:08 <mwc> So the primary use would be as the most general pattern that's still meaningful in a function definition?
02:21:24 <roconnor> I wouldn't say that
02:21:36 <roconnor> well maybe
02:22:25 <roconnor> I'd say it would be useful when you know for logical reasons about your program, that a pattern match is guarenteed to succeed, but you need to delay the pattern match for some reason (such as circular programming)
02:22:51 <roconnor> OTOH, I don't think I've ever used lazy patterns directly.
02:23:13 <roconnor> they are most useful in let expressions and lambdas, when they are automatically applied anyway.
02:25:16 <roconnor> you can almost define seq a b = if a = a then b else b
02:25:57 <norpan> roconnor: that's no good
02:26:10 <norpan> first, a == a, and second, that is more like deepSeq
02:26:18 <roconnor> ah
02:26:52 <norpan> seq only evaluates to whnf, which is like the outermost constructor
02:31:33 <mwc> norpan, really
02:35:51 <roconnor> > case undefined of _ -> True
02:35:53 <lambdabot>  True
02:35:57 <roconnor> :)
02:41:02 <roconnor> @fp GHC.Num.gcdInteger
02:41:03 <lambdabot> GHC.Num.gcdInteger not available
02:42:31 <roconnor> @fp GHC.Num
02:42:31 <lambdabot> GHC.Num not available
02:48:59 <gds> @help fp
02:48:59 <lambdabot> help <command>. Ask for help for <command>. Try 'list' for all commands
02:49:08 <gds> helpful :)
03:00:06 <roconnor> gds fp isn't the right name for the command.  Unfortunately I don't know what the right name is.
03:01:11 <ValarQ> @pl \x -> if x then True else False
03:01:12 <lambdabot> flip (flip if' True) False
03:01:26 <norpan> > let a = (1:undefined) in a `seq` (head a)
03:01:28 <lambdabot>  1
03:01:31 <roconnor> @pl \x -> case x of _ -> True
03:01:32 <lambdabot> (line 1, column 17):
03:01:32 <lambdabot> unexpected "_"
03:01:32 <lambdabot> expecting variable, "(", operator or end of input
03:01:40 <roconnor> @pl \x -> case x of a -> True
03:01:41 <lambdabot> (line 1, column 19):
03:01:41 <lambdabot> unexpected ">" or "-"
03:01:41 <lambdabot> expecting variable, "(", operator or end of input
03:01:44 <norpan> > let a = (1:undefined) in if a == a then (head a) else (head a)
03:01:45 <lambdabot>  Undefined
03:02:33 <roconnor> is seq really more useful than deepseq?
03:02:46 <roconnor> I've only used seq on ints, where it is the same.
03:02:47 <ValarQ> whats if' ?
03:02:59 <norpan> roconnor: yes, seq is more useful
03:03:22 <roconnor> @type if'
03:03:24 <lambdabot> Not in scope: `if''
03:07:31 <ValarQ> @hoogle if'
03:07:31 <lambdabot> No matches found
03:07:34 <ValarQ> :/
03:45:41 <ndm> who are the debian haskell people?
03:46:03 <ndm> @seen lambdabot
03:46:03 <lambdabot> Yes, I'm here. I'm in #ScannedInAvian, #perl6, #oasis, #darcs, #ghc, #gentoo-haskell, #haskell_ru, #haskell.es, #haskell.se, #haskell.it, #haskell-overflow, #haskell-blah and #haskell
03:57:40 <ndm> @seen dons
03:57:40 <lambdabot> dons is in #ghc, #haskell-overflow and #haskell. I last heard dons speak 3h 19m 36s ago.
03:58:29 <kzm> Anybody familiar with Data.IntSet internals?  Any pointers?
03:58:38 <kzm> @seen
03:58:38 <lambdabot> Lately, I have seen andara, audreyt, basvandijk, int-e, kzm, ndm, nothingmuch, roconnor, samb and svnbot6.
04:01:27 <SamB> hey! my name is SamB, you inconsistantly case-sensitive robot!
04:11:09 <kzm> SamB: you can fix it, you know?
04:11:26 <SamB> you are suggesting I switch to "samb" for my nick?
04:12:27 * SamB doesn't have any idea how to do decent IPC, so actually fixing it is out...
04:21:39 <fasta> How can I nest two case expressions? Something like this, but then with layout and that it compiles: case foo of Nothing->case bar of Nothing -> Nothing Just barVal->Nothing Just fooVal->Nothing
04:23:13 <roconnor> just indenting properly ought to work.
04:23:19 <SamB> if you want to do it on one line, you need {;}
04:24:12 <fasta> roconnor: I tried to do it with indenting, but it seems it doesn't like:
04:25:17 <fasta> Just fooVal -> <newline> indent to the position directly below fooVal: case somethingElse
04:27:01 <SamB> @paste it
04:27:02 <lambdabot> http://paste.lisp.org/new/haskell
04:31:34 <lisppaste2> fasta pasted "Indentation" at http://paste.lisp.org/display/27772
04:31:47 <fasta> It's exactly like this, only this works :(
04:34:35 <Bobstopper> do any other windows users get "invalid argument" when they run getDirectoryContents on "\System Volume Information" ?
04:35:01 <fasta> Arg, I forgot to put an "of" there....
04:36:30 <roconnor> @spell adapter
04:36:31 <lambdabot> adapter
04:36:34 <roconnor> @spell adaptor
04:36:35 <lambdabot> adapter adapt or adapt-or adapt adepter
04:37:49 <vincenz> @spell roconnor
04:37:49 <lambdabot> O'Connor Connor Rockne Conner conner
04:38:38 <Bobstopper> @spell hocuspocus
04:38:39 <lambdabot> couscous hospices hockshops cusps hibiscus
04:38:48 <vincenz> two words
04:50:42 <Igloo> ndm: Do you want to make the .debs yourself?
04:51:10 <Azmo> an "IOUArray Int Int" requires 4 bytes per element, but when i create an "IOArray Int Int" it is not 8. is that because it is "non-strict" ?. is it possible to get a mutable boxed and strict array instead?
04:52:00 <Igloo> Azmo: Why do you want it boxed?
04:52:35 <Azmo> because the unboxed version can not store the types i want to store :]
04:52:39 <psykotic> does anyone have a copy of landin's "mechanical evaluation of expressions" lying around? it seems impossible to track down
04:53:13 <Igloo> Ah, no. You can wrap the array updating functions with variants that seq their arguments appropriately, though
04:54:12 <Azmo> i'm not sure i understand that ..
04:54:20 <Azmo> variants?
04:54:39 <Azmo> is there perhaps a good example somewhere?
04:54:46 <Igloo> I mean things like   f x = x `seq` TheRealModule.f x
04:55:05 <Igloo> Put that in TheFakeModule and import that instead of TheRealModule
04:55:51 <Azmo> i'm not sure what this has to do with space requirements of arrays
04:56:08 <Igloo> Nothing, it is to make it strict
04:56:17 <Igloo> The extra space is used because of all the boxes
04:56:17 <Bobstopper> does anyone know if ghc's getPermissions reports permissions correctly for windows?
04:56:44 <dcoutts> Igloo, so one more build today or a relase today? :-)
04:57:32 <Azmo> i don't think the strictness is the problem. i can store evaluated expressions, and they still take slightly more than 8 bytes instead of 4.
04:59:08 <dcoutts> Azmo, if it's boxed then you have to account for the size overhead of the box.
04:59:33 <dcoutts> Azmo, that's one advantage to an unboxed array
05:00:22 <Azmo> yes, but should not the space requirement of each element be the element contents + the pointer to it?
05:00:44 <Azmo> that is 8 bytes for a "IOArray Int Int", but i get around 13 bytes or so.
05:01:00 * roconnor imagines there is a thunk structure in there someplace
05:03:33 <Azmo> thunk? :o
05:05:14 <roconnor> I'm not entirely sure what a thunk is, but I imagine it to be quite spacious.
05:06:03 <Azmo> :]
05:08:56 <Azmo> would have been nice to just store an int. tried the "Int#", but did not work.
05:09:48 <lisppaste2> Azmo pasted "spacious boxes" at http://paste.lisp.org/display/27774
05:11:24 <roconnor> how are you measuring the space usage?
05:11:50 <roconnor> because Haskell won't evaluate the i-1 untill the value is demanded.
05:12:26 <Azmo> it's a recursive call. i monitor the space usage of the process.
05:12:56 <roconnor> so the space isn't being taking by the array
05:13:29 <roconnor> oh wait
05:13:31 <Azmo> i'm quite certain it is. the same program with an IOUArray takes 4 bytes per element.
05:13:35 <roconnor> the i-1 is demanded immediately
05:13:39 <roconnor> okay, nevermind
05:13:42 <Azmo> :]
05:16:41 <roconnor> cool, you can build an RS232 adapter while only using 5 inventory slots.
05:17:38 <ndm> Igloo: we don't mind
05:17:56 <ndm> Igloo: but our experience at making that kind of thing is limited, so would probably need a bit of help/advice
05:18:08 <ndm> Igloo: and probably proper debian people to test it, check it
05:19:58 <musasabi> morning
05:20:50 <Igloo> ndm: OK, I'll try to write a reply later
05:33:44 <ndm> Igloo: thanks, absolutely no rush - I'm happy to wait til way after 6.6 :)
05:43:15 <roconnor> how would people feel about GHC executing all non-recursive closed expressions at compile time?
05:43:26 <roconnor> oops
05:43:40 <roconnor> possibly wrong channel
05:54:26 <wilx> Isn
05:54:29 <wilx> Ooops.
05:55:19 <wilx> Isn't that what most compliers should do? Like...the most obvious optimization?
05:55:53 <wilx> Constant expression folding, or some such name?
05:56:40 <ndm> wilx: yes, but in most languages + is a primitive, in Haskell its not quite as primitve
05:57:03 <wilx> Hmm, I see.
05:57:08 <flux__> wilx, like, putStr $ calculate_fractal 0.4 0.1 100 would produce a binary that would simply have the end produce?-)
05:57:22 <flux__> (it would be cool, although it would require some on-disk caching of the intermediate results)
05:57:28 <wilx> :)
05:57:32 <roconnor> wilx: GHC currently will not rewrite gcd (14::Int) (21::Int) into 7::Int.
05:57:56 <roconnor> I suppose you can argue that gcd is recursive.
05:57:57 <flux__> if ghc could be instructed to do so, people would experiment with it
05:59:17 <Philippa> I'd play with a "partially evaluate this!" pragma
05:59:34 <Philippa> not that I have "runParser foo" and relatives in mind or anything
06:04:14 <roconnor> @where yhc
06:04:15 <lambdabot> http://www.cs.york.ac.uk/~ndm/yhc
06:04:18 <roconnor> @where jhc
06:04:19 <lambdabot> http://repetae.net/john/computer/jhc/
06:04:35 <ndm> @where+ yhc http://www.haskell.org/haskellwiki/Yhc
06:04:35 <lambdabot> Done.
06:05:05 <ndm> roconnor: if you're looking for partial evaluation stuff in teh Yhc repo, you'll find none
06:05:31 <roconnor> ndm: I'm just trying to remember the difference between yhc and jhc
06:05:38 <roconnor> I get easily confused.
06:06:13 <ndm> roconnor: yhc = nhc fork, small, portable; jhc = new compiler, super optimisation, unfinished (i think)
06:35:01 <roconnor> what is the advantage of bzip2 over gzip?
06:37:06 <yip> potential for smaller file sizes
06:40:10 <beelsebob> not really huge amounts though
06:44:00 <roconnor> I wish scp worked site-to-site.
06:49:06 <mikael> hey
06:49:19 <shapr> y0
06:49:25 <mikael> oh, hey shapr
06:49:26 <mikael> what's up?
06:54:28 <jmmv> hi
06:55:42 <Xgc> 7z seems to compress a bit better than bzip2.
06:56:07 <roconnor> jmmv: hi
07:02:37 <shapr> mikael: code! I wrote a minimal wiki on top of HAppS.
07:02:47 <mikael> :o HAppS?
07:02:50 * mikael feels out of the loop
07:04:52 <roconnor> shapr: time to switch haskell.org over to it.
07:06:11 <Igloo> Sure, after all, we only have 3 wikis so far  :-)
07:06:12 <Philippa> roconnor: a minimal wiki's not good enough
07:06:40 <Philippa> otherwise someone would've seriously suggested flippi
07:06:44 <shapr> I added wiki markup last night, and I'm going to add user login today.
07:06:50 <shapr> Yeah, Flippi is nice.
07:07:19 <dylan> minimal is better than mediawiki. ;)
07:07:27 <mikael> amen
07:08:05 <mikael> hey, I saw john hughes's annual "cool functional programming" speech today 8-)
07:08:17 <mikael> er, "cool functional programming stuff"
07:08:31 <dons> oh, do we have details? url?
07:08:35 * dylan lives a few miles from Jimbo Wales, though, better not say too many bad things about mediawiki.
07:08:45 <dons> mikael, sounds fun.
07:08:49 <mikael> I might get a video recording up
07:08:55 <dons> dylan: or what ... he'll come a get you? :)
07:08:55 <profmakx> is there a function to apply a permutation to a list?
07:09:45 <dylan> dons: Anything is possible!
07:09:57 <mikael> first part was about the history of functional programming and erlang in particular, second part was basically a report from ICFP about commercial uses of functional languages
07:10:10 <dons> ah right!
07:10:19 <dons> yes, john was preparing notes on that
07:10:43 <kowey> shapr: extra credit if you get it working with latex syntax :-)
07:12:33 <gour> dcoutts: ping
07:12:46 <dcoutts> @arr!
07:12:46 <lambdabot> Arrr!
07:13:19 <shapr> kowey: I'm using bringert's HMarkup, so whatever it supports.
07:13:56 <gour> dcoutts: i've heard that mighty england has arrive in zagreb mostly taking care how to defend being afraid of getting andora-like experience. is it true?
07:14:06 <gour> s/arrive/arrived
07:14:29 <dcoutts> gour, I've no idea what you're talking about! :-)
07:15:18 <gour> dcoutts: ok then. we'll hear you about 9pm (est)
07:24:08 <sjanssen> woo!  time to build GHC 6.6!
07:30:25 <dcoutts> sjanssen, do you run gentoo ?
07:30:40 <sjanssen> dcoutts: yeah, on one of my boxes
07:30:51 <dcoutts> oh, nice, well the ghc-6.6 ebuild is now available
07:30:56 <dcoutts> in our overlay
07:31:02 <sjanssen> nice
07:31:04 * dcoutts is building now
07:31:16 <sjanssen> is the documentation on the overlay somewhere?
07:31:38 * glguy built 6.6 on OpenBSD yesterday...no hitches
07:31:56 <dcoutts> glguy, before it was even released eh?
07:32:00 <dcoutts> sjanssen, what do you mean?
07:32:12 <glguy> dcoutts: yeah, the sources were available
07:32:38 <dcoutts> sjanssen, oh, how to use it, there's general overlay docs on the gentoo website, or I think you can now just use layman
07:32:52 <dcoutts> which is an overlay manager, and get the haskell overlay
07:32:59 <dcoutts> layman knows were to get it
07:33:06 <sjanssen> okay
07:34:10 <SimonRC> is there a better way to write: (do (_, foo) <- asdf; return foo)?
07:34:27 <SimonRC> I fiddled with liftM snd but couldn;t seem to get it to work.
07:34:40 <glguy> SimonRC: fmap snd asdf?
07:34:53 <roconnor> liftM snd adsf
07:35:09 <glguy> it's all the same thing :)
07:35:22 <roconnor> not for ArrowMonad ;)
07:35:36 <glguy> it *should* be
07:35:40 <SimonRC> or, as I had forgotten: asdf >>= return . snd
07:35:57 <hyrax42_> ?type build
07:35:59 <lambdabot> Not in scope: `build'
07:36:17 <glguy> asdf >>= return . snd   is the round-a-bout way of writing: liftM snd asdf
07:36:26 <glguy> ?pl asdf >>= return . snd
07:36:26 <lambdabot> snd `fmap` asdf
07:36:47 <glguy> roconnor: lambdabot likes me better (-; ^^
07:37:47 <roconnor> fmap is not infix!
07:40:19 <SimonRC> I like the handy instances for all the monad transformers that are provided in the library (e.g.: (Monoid w, MonadState s m) => MonadState s (WriterT w m)), but is there a way to derive them automatically?
07:40:53 <SimonRC> They are great for getting rid of all the lifts, and if you want to re-arrange your layers of monad transformers
07:46:13 <sjanssen> SimonRC: what do you mean by "derive them automatically"?
07:48:09 <hyrax42_> it is common to use undefined to type check code in progress?
07:48:27 <mikael> yes
07:49:12 <mikael> I like to define things as undefined, write quickcheck properties, and then start implementing
07:49:31 <hyrax42_> gah *still* need to learn to use quickcheck
07:49:36 <SimonRC> sjanssen: For example, look at the list of instances for WriterT...
07:49:43 <mikael> :-) the basics are pretty easy
07:49:49 <hyrax42_> though not sure what sort of properties I might need for this
07:50:04 <hyrax42_> oh wait
07:50:07 <hyrax42_> I have some ideas
07:50:25 <SimonRC> They say stuff like: "A writer wrapping a state can be used as a state" "a writer wrapping a reader can be used as a reader", etc
07:50:27 <hyrax42_> ?instances Arbirtrary
07:50:28 <lambdabot> Not a class! Perhaps you need to import the  module that defines it? Try @help instances-importing.
07:50:32 <sjanssen> SimonRC: you want to create your own class, or you want to make your transformer an instance of all of those classes?
07:50:41 <SimonRC> sjanssen: the latter
07:50:44 <hyrax42_> ?instances-importing Test.QuickCheck Arbitrary
07:50:46 <lambdabot> (), (a -> b), (a, b), Bool, Double, Float, Int, Integer, [a]
07:50:53 <mikael> ?instances Arbitrary
07:50:55 <lambdabot> Not a class! Perhaps you need to import the  module that defines it? Try @help instances-importing.
07:50:57 <sjanssen> SimonRC: sadly, I don't think so
07:51:12 <SimonRC> hmm
07:51:23 * glguy wonders what changed in the 6.6 tarball between the 10th and 11th
07:51:37 <sjanssen> unfortunately we have to write O(m * n) instance decls for m classes and n transformers
07:51:41 <hyrax42_> d'oh no instances Enum a => Arbitrary a
07:51:51 <SimonRC> sjanssen: I suppose the deriver could just keep sticking "lift"s in until the thing typechecked ;-)
07:51:54 <hyrax42_> ?docs QuickCheck
07:51:55 <lambdabot> QuickCheck not available
07:52:04 <hyrax42_> ?docs Test.QuickCheck
07:52:05 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/QuickCheck/Test-QuickCheck.html
07:52:16 <mikael> I think there are far more arbitrary instances than those listed by lambdabot...
07:52:34 <hyrax42_> how can there be an instance for Integer
07:52:39 <hyrax42_> what distribution does it use
07:52:40 <hyrax42_> ?
07:52:42 <sjanssen> SimonRC: if your data type is a newtype of some other transformer, you might be able to use newtype deriving
07:53:25 <SimonRC> sjanssen: I don't have a specific need.  The question is from my general interest.
07:54:32 <SimonRC> sjanssen: "(Monoid w, MonadState s m) => MonadState s (WriterT w m)" was good enough for this case.  It allowed me to just throw together this interpreter once I had chosen the monad involved.
08:01:43 <glguy> A hippopotamus is just a really cool opotamus.
08:02:23 <vincenz> nono
08:02:36 <vincenz> hippopotamus = hip popotamus = hip father otamus
08:02:59 <vincenz> erm a hip otamus dad
08:04:21 <glguy> I saw a Boxing commercial and it said "It's a fight to the finish" That's a good place to end.
08:05:44 <dolio> Are you picking up where Mitch Hedberg left off?
08:05:54 <glguy> I'm reading his wikipedia entry
08:06:01 <glguy> and sharing his comedy with the channel :)
08:07:02 <chessguy> ok, i have a myList :: [([Int],Double)] which has 216000 pairs in it. it's sorted by the double in the pair. a lot of the pairs have the same double value. can i convert this to [([[Int]],Double], so that i get a list of lists for each unique Double?
08:07:09 <dolio> Let me have the Steak Fajita Sub---but don't bother ringing it up, it's for a duck!
08:07:20 <nothingmuch> does anybody have ghc 6.6 binaries for osx/ppc?
08:07:33 <glguy> chessguy: you might start with groupBy
08:07:53 <chessguy> @type groupBye
08:07:54 <chessguy> @type groupBy
08:07:55 <lambdabot> Not in scope: `groupBye'
08:07:56 <lambdabot> forall a. (a -> a -> Bool) -> [a] -> [[a]]
08:08:22 <chessguy> using == you mean?
08:08:36 <dolio> @type group
08:08:37 <lambdabot> forall a. (Eq a) => [a] -> [[a]]
08:08:43 <glguy> chessguy: you'll have to compare the snd's of each tuple
08:08:59 <glguy> chessguy: and then go back through and merge them
08:09:08 <Syzygy-> > group $ map (/4) [1..25]
08:09:10 <lambdabot>  [[0.25],[0.5],[0.75],[1.0],[1.25],[1.5],[1.75],[2.0],[2.25],[2.5],[2.75],[3....
08:09:18 <fasta> Why is Data.Queue deprecated? Data.Sequence does not provide the same interface.
08:09:26 <Syzygy-> > group $ map (`mod`4) [1..25]
08:09:28 <lambdabot>  [[1],[2],[3],[0],[1],[2],[3],[0],[1],[2],[3],[0],[1],[2],[3],[0],[1],[2],[3]...
08:09:32 <dcoutts> malcolm, I see the point about the definition of strict fields in terms of seq. I always think of the domain-theoretic explanation where it's all about identifying or not identifying _|_'s.
08:09:40 <glguy> > group $ sort $ map (`mod` 4) [1..25]
08:09:41 <lambdabot>  [[0,0,0,0,0,0],[1,1,1,1,1,1,1],[2,2,2,2,2,2],[3,3,3,3,3,3]]
08:09:46 <Syzygy-> glguy: Ah.
08:10:08 <fasta> And a queue is a standard ADT, which should be in its own module, even though it could be implemented in terms of Data.Sequence
08:10:13 <Ulfalizer> > group [1, 1, 2, 2, 2, 3]
08:10:13 <chessguy> hmm
08:10:14 <lambdabot>  [[1,1],[2,2,2],[3]]
08:10:21 <mikael> > /whois Ulfalizer
08:10:22 <lambdabot>  Parse error
08:10:23 <malcolm> dcoutts: I just did some algebra on strict field examples myself, and came to the conclusion that ghc is right, nhc98 is wrong
08:10:26 <mikael> hey now
08:10:29 <mikael> that's not fair
08:10:31 <chessguy> is it ok to use == to compare Doubles in haskell? you can't do that in c/c++
08:10:35 <glguy> mikael: who is he?
08:10:36 <dcoutts> malcolm, oh right, interesting
08:10:42 <Ulfalizer> mikael: do i know you? :)
08:10:55 <mikael> Ulfalizer: that's what I was trying to find out
08:11:04 <mikael> Ulfalizer: you don't happen to be a first-year CS student at GU? :-)
08:11:23 <dolio> > 4/3 - 1 == (1/3 :: Double)
08:11:23 <Ulfalizer> nah, third-year at lith
08:11:25 <lambdabot>  False
08:11:27 <mikael> oh.
08:11:57 <chessguy> > ((4/3) - 1) :: Double) == (1/3 :: Double)
08:11:58 <lambdabot>  Parse error
08:11:58 <malcolm> dcoutts: at least, in an operational interpretation, as Robert Dockins points out.
08:12:26 <malcolm> dcoutts: If you do it inductively, then nhc98 is permitted to be right as well...
08:12:48 <Ulfalizer> mikael: do i have a familiar nick or something? :)
08:12:56 <chessguy> @type (4/3)
08:12:58 <lambdabot> forall a. (Fractional a) => a
08:13:18 <mikael> well, there's a guy in my class named Ulf... :-P
08:13:41 <Ulfalizer> we're pretty rare i guess.. :/
08:13:42 <chessguy> so i can't use ==
08:13:56 <dolio> > 1/3 == (1/3 :: Double)
08:13:57 <mikael> and being in #haskell kind of narrows it down
08:13:57 <lambdabot>  True
08:13:57 <Ulfalizer> at least in the 30- age group..
08:14:11 <dolio> Depends how you're computing the doubles.
08:14:14 <chessguy> well sure, if you compare it with itself
08:14:31 <chessguy> it's complicated
08:14:34 <Ulfalizer> you study haskell at GU?
08:14:44 <dolio> > (4/3 - 1) - (1/3 :: Double)
08:14:45 <lambdabot>  -5.551115123125783e-17
08:14:47 <shapr> Ulfalizer: How many people are in the 30+ age group on #haskell?
08:14:53 <shapr> I thought mikael was in the 20- age group?
08:14:59 * chessguy breaks out the slapping rod and looks sternly at lambdabot
08:15:02 <mikael> yep.  the first programming class is "intro to functional programming", which uses haskell
08:15:11 <glguy> 20-? would that be 20 and less? ;)
08:15:22 <glguy> lambdabot: a/s/l
08:15:30 <glguy> ?vixen a/s/l
08:15:30 <lambdabot> 19/f/California
08:15:34 <Ulfalizer> mikael: we used lisp. i wish we would've used haskell instead :/
08:15:38 <chessguy> wow, you have a whole class on FP? we get about 4 weeks out of the entire 4 years
08:15:39 <shapr> mikael: Have you gotten any taller since EuroHaskell?
08:15:45 <mikael> shapr: I'm barely legal now!
08:16:07 * vincenz would love to be a teacher of programming :)
08:16:47 <shapr> I'm wearing my Google SoC t-shirt! It's one size too large...
08:16:50 <dolio> I imagine many programs don't get a lot more than a few weeks of FP.
08:17:06 <mikael> not sure if I'm any taller
08:17:10 <mikael> I'm like 185 or something
08:17:17 <glguy> We barely touched on FP in my degree program
08:17:18 <shapr> Man, I got a spam talking about imperative updates and I thought it was about programming :-(
08:17:20 <mikael> oh, were you in SoC?
08:17:37 <shapr> Yeah, HaskellNet
08:17:43 <shapr> I was a mentor.
08:17:44 <mikael> Sick of im$pera tive up dates??  Buy Haske11 $20
08:17:48 * shapr grins
08:18:04 <dolio> We had a 300-level course on "programming language concepts" that covered some FP, and did some SICP style stuff with scheme.
08:18:09 <dolio> But that was about it.
08:18:19 <chessguy> that's so stupid
08:18:19 <mikael> GU/chalmers seems to be the haskell capital of the world or something
08:18:45 <chessguy> what's GU?
08:18:50 <mikael> gothenburg university
08:19:10 <mikael> the GU CS program is basically a chalmers program, excepting the bureaucratic differences
08:19:35 <Ulfalizer> is chalmers the technical branch of GU, like LiTH is the technical branch of LiU?
08:19:52 <mikael> something like that
08:20:33 <mikael> if you study computers at chalmers you're studying to be an engineer, which involves a bunch of mandatory engineering classes
08:21:31 <mikael> at GU CS, we don't have *any* mandatory classes past the first year
08:21:33 <hyrax42_> the intro to programming languages course here (McGill) got a lot cooler... right *after* I took it
08:22:06 <chessguy> hyrax, what level is that class?
08:22:11 <hyrax42_> 300
08:22:13 <hyrax42_> COMP 302
08:22:19 <chessguy> ours is a 400-level class
08:22:31 <chessguy> which is so stupid
08:22:49 <hyrax42_> it's now in SML, and you write an interpreter for a simple quasi-subset of ML
08:23:05 <dolio> It seems I wrote some haskell for assignments in my AI class, though.
08:23:21 <dolio> Since we could use whatever in that.
08:23:21 <hyrax42_> and includes a bit on streams and lazy evaluation that I believe is done in scheme
08:23:55 <hyrax42_> I'm sitting in on the new one, just to see what I missed
08:24:50 <chessguy> the head of our CS department is majorly into evolutionary computation, which is cool, but he also thinks c/c++ is the only way to do it
08:25:11 <fasta> chessguy: have you already proved him otherwise?
08:25:25 <chessguy> not i
08:25:28 <chessguy> but others, sure
08:25:36 <fasta> chessguy: what others?
08:25:38 <hyrax42_> I realise I prefer haskell to SML... cleaner syntax, and stuff like print : () stands out now as being a kludge
08:25:44 <chessguy> Koza
08:26:01 <chessguy> all his GP code is in lisp
08:26:02 <fasta> chessguy: oh, right, that guy
08:26:17 <fasta> chessguy: I saw some of his code. Looked pretty complicated.
08:26:17 <hyrax42_> chessguy: the AI prof here thinks C is the only way to do search, because you need the speed
08:26:36 <dolio> Heh, this code I wrote is crazy.
08:26:37 <hyrax42_> well the prof teaching now
08:26:37 <chessguy> hyrax42_, i can understand that, but i disagree that speed is the only way to go
08:26:45 <chessguy> for AI
08:26:57 <dolio> The problem was to solve tic tac toe with minimax and alpha-beta pruning...
08:27:08 <chessguy> lol, what a stupid problem
08:27:12 <eshrgrgfewgfe> <dolio> The problem was to solve tic tac toe with minimax and alpha-beta pruning... --> what the hell is this?
08:27:25 <chessguy> like using a sledgehammer to pound in a nail :)
08:27:28 <hyrax42_> chessguy: yeah... well you know I'm trying my project in haskell... I'm just worried she'll end up right.  Turns restricted to 5 seconds
08:27:40 <hyrax42_> you can just do a lookup for tic tac toe
08:27:45 <dolio> So apparently what I wrote was a typeclass that solved any minimax alpha-beta problem given appropriate methods, and then wrote an instance for tic tac toe.
08:27:54 <hyrax42_> if you're starting, you win.  There are 3 possible starts
08:28:10 <chessguy> i thought tictactoe was a forced draw
08:28:15 <hyrax42_> oh?
08:28:21 <hyrax42_> maybe
08:28:23 <fasta> hyrax42_: tic tac toe is draw when both players play optimally.
08:28:42 * hyrax42_ loses :/
08:28:44 <eshrgrgfewgfe> tic tac toe is also draw when both players play stupidally...
08:28:54 <fasta> eshrgrgfewgfe: heh
08:29:06 <psi> if you don't start in the center, the other player wins
08:29:15 <eshrgrgfewgfe> <psi> if you don't start in the center, the other player wins --> that's false
08:29:21 <eshrgrgfewgfe> you can start wherever you want
08:30:01 <psi> oh, perhaps I'm mistaken.
08:30:02 <glguy> if you start in a corner, then the other player must play the center or lose
08:30:10 <hyrax42_> ok there are a lot of seemingly sensical instances that are omitted inthe librariers
08:30:13 <hyrax42_> libraries
08:30:16 <glguy> otherwise, optimal play results in draws
08:30:16 <eshrgrgfewgfe> <glguy> if you start in a corner, then the other player must play the center or lose -> that's true
08:30:53 <chessguy> dolio, you should use GP to evolve an algorithm for tictactoe :)
08:30:58 <chessguy> that would be cool
08:31:04 <dolio> Heh.
08:31:06 <hyrax42_> or hmm maybe not so sensical
08:32:01 <chessguy> dolio, that's what i'm trying to do for chess
08:32:32 <hyrax42_> how are you evolving it?
08:32:37 <hyrax42_> I mean what is your genotype, I guess
08:33:06 <chessguy> brb, phone
08:33:08 <dolio> Wow, I wonder what version of ghc I was using. One of the assignments uses Data.FiniteMap
08:33:42 <hyrax42_> dolio: some of the tuts still mention FM, so if you were just settign out you might have used it
08:33:55 <hyrax42_> I know I did, and that was only a few months ago
08:34:02 <dolio> Ah, that could be.
08:34:53 <glguy> The problem with solving tic tac toe with a minmax search is that since optimal play always results in a draw, the computer can't know how to start
08:35:02 <chessguy> back, sorry
08:35:18 <chessguy> glguy, sure it can
08:35:32 <glguy> with an opening book of course
08:35:40 <chessguy> it just arbitrarily picks one of the optimal paths
08:35:49 <glguy> right, but
08:36:05 <glguy> I'm saying that a minmax search isn't enough to actually pick good opening moves
08:36:15 <chessguy> you're wrong :)
08:36:30 <sjanssen> @quote BulatZiganshin
08:36:30 <lambdabot> BulatZiganshin hasn't said anything memorable
08:36:34 <sjanssen> @quote bulat
08:36:34 <lambdabot> bulat hasn't said anything memorable
08:36:38 <sjanssen> @quoate bulatz
08:36:38 <lambdabot> bulatz hasn't said anything memorable
08:36:42 <Ulfalizer> @quite lambdabot
08:36:42 <lambdabot> Maybe you meant: quit quote
08:36:43 <glguy> no, I'm not, because a minmax search will say that all moves result in draw
08:36:48 <chessguy> so?
08:37:08 <glguy> chessguy: so.... some moves are better than others, and a minmax search can't tell you that
08:37:14 <glguy> better when playing stupid humans
08:37:23 <chessguy> oh, that's a different question
08:37:23 <sjanssen> @remember BulatZiganshin as usual, Streams library may be used to solve this problem
08:37:42 <chessguy> usually, you assume that the opponent will play optimally
08:38:00 <glguy> right
08:38:28 <chessguy> there are modifications to alphabeta which could take into account what you're suggesting
08:38:41 <Ulfalizer> @quote mahogny
08:38:41 <lambdabot> mahogny hasn't said anything memorable
08:39:14 <glguy> chessguy: I'm not arguing that there are no algorithms to handle this situation
08:39:25 <chessguy> ok, in that case you're right :)
08:41:09 <chessguy> anyway, who asked me about my genotype?
08:41:52 <chessguy> hyrax42_, i'll start with genes that look at static things about the position in order to determine what move to make
08:42:20 <hyrax42_> so you'll have to hand-code some features to look for?
08:42:48 <chessguy> well, i'm going to hand-code some very simple things, and use ADFs to build more complex ones
08:42:53 <hyrax42_> and this is for what.. your static evaluation for where you cut off the depth of the search:?
08:43:11 <chessguy> no, i'm going to start with a depthless search :)
08:43:35 <hyrax42_> move based purely on static evaluation?
08:43:39 <chessguy> yup
08:43:45 <hyrax42_> yoiks
08:43:49 <chessguy> to start with
08:43:53 <hyrax42_> I guess that will evolve up your static eval real quick
08:44:03 <chessguy> eventually i'll add more advanced genes
08:44:05 <hyrax42_> *hopefully ;)
08:44:29 <chessguy> but i'm no going to take the alphabeta approach of searching to some depth and then doing a static eval
08:44:34 <hyrax42_> ADFs?
08:44:56 <chessguy> Koza's second GP book is all about ADFs - Automatically Defined Functions
08:45:08 <chessguy> functions that evolve and can then be used as genes
08:45:09 * hyrax42_ checks library
08:45:12 <hyrax42_> sounds interesting
08:45:58 <hyrax42_> GP: T&P?
08:46:17 <chessguy> the idea is that instead of evolving a single tree for each individual, you evolve multiple trees, with different genotypes, and the genotype for the main tree includes functions which can call the other trees
08:46:26 <chessguy> s/functions/genes/ if you like
08:46:27 <hyrax42_> oh no stupid library search
08:46:50 <chessguy> http://www.amazon.com/Genetic-Programming-Automatic-Discovery-Adaptive/dp/0262111896
08:46:55 <lambdabot> http://tinyurl.com/gvgs4
08:48:09 <hyrax42_> that's in the library... the first one seems like a grad student has it though... due nov 9 :/
08:48:18 <hyrax42_> I'll pick it up and have a flick
08:48:34 <chessguy> the second has some review of the concepts in the first
08:48:44 <hyrax42_> that's good
08:49:14 <hyrax42_> woah there are at least 4 of them
08:49:24 <chessguy> anyway, i think the notion of static evaluation to give a score in terms of pawns is quite bogus
08:49:42 <hyrax42_> "in terms of pawns"?
08:50:09 <chessguy> yes, most chess engines will evaluate a position and say, e.g., the score is +.54
08:50:31 <chessguy> which (usually) means white's position is better by a score of .54 pawns
08:50:55 <hyrax42_> huh
08:51:00 <hyrax42_> oh
08:51:06 <hyrax42_> where a queen is 9 and so on
08:51:06 <hyrax42_> ?
08:51:08 <chessguy> right
08:51:25 <chessguy> but humans don't think like that
08:51:50 <chessguy> they choose a move based on features of the position, but don't "score" those features
08:51:51 <roconnor> what is The reference for spineless tagless g machines?
08:52:05 <hyrax42_> hm
08:52:32 <chessguy> it's a requirement of alphabeta
08:52:43 <hyrax42_> yeah
08:52:44 <chessguy> that's the only reason engines think that way
08:53:11 <hyrax42_> just wondering how wyhou'd choose a move if you didn't rank them somehow
08:53:13 <roconnor> @what stg
08:53:15 <lambdabot> http://citeseer.ist.psu.edu/peytonjones92implementing.html
08:53:27 <hyrax42_> but you're right, humans don't really rank them like that
08:54:26 <chessguy> well, i have some ideas for that, but i want to get a basic static approach working first. unfortunately, there doesn't seem to be any real GP libraries for haskell
08:55:40 <chessguy> anyway, lunch time
08:56:08 <hyrax42_> yea
08:56:12 <hyrax42_> then I need to get lost
08:58:19 <hyrax42_> ?type guard
08:58:25 <lambdabot> forall (m :: * -> *). (MonadPlus m) => Bool -> m ()
08:58:52 <hyrax42_> ?fptools Control.Monad.MonadPlus
08:58:54 <lambdabot> Control.Monad.MonadPlus not available
08:59:00 <hyrax42_> ?fptools Control.Monad.Monad
08:59:01 <lambdabot> Control.Monad.Monad not available
08:59:04 <hyrax42_> ?fptools Control.Monad
08:59:06 <lambdabot> http://darcs.haskell.org/packages/base/Control/Monad.hs
08:59:28 <glguy> guard++
09:37:25 <jmmv> hmm, what is the way to force the evaluation of a variable before using it?  (more specifically, I want the result of readFile be really returned before doing another operation)
09:37:32 <glguy> seq
09:37:50 <roconnor> @hoogle evaluate
09:37:50 <glguy> x `seq` f x, or f $! x
09:37:52 <lambdabot> Control.Exception.evaluate :: a -> IO a
09:37:52 <lambdabot> Test.QuickCheck.evaluate :: Testable a => a -> Gen Result
09:38:24 <roconnor> @docs Control.Exception
09:38:25 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/base/Control-Exception.html
09:39:09 <jmmv> thanks
09:40:36 <roconnor> readFile "Foo" >>= evaluate
09:40:48 <roconnor> I guess
09:42:30 <araujo> hi hi!
09:44:17 <jmmv> roconnor, yeah, that did it
09:45:17 <roconnor> glguy: I suppose seq will only put it in head normal form.
09:45:56 <roconnor> oh wait, supposedly evaluate will only do that too.
09:46:07 * roconnor surprised that it worked.
09:47:10 <jmmv> seq didn't work (or maybe I didn't use it correctly)
09:47:19 <jmmv> the thing is that I have something like:
09:47:21 <jmmv>                 ls <- readFile pidfile >>= evaluate
09:47:21 <jmmv>                 writeFile pidfile (unlines $ new ls pid)
09:47:33 <jmmv> (let race conditions aside)
09:49:17 <musasabi> jmmv: strictReadFile fp = do c <- readFile fp; length c `seq` return c
09:51:09 <jmmv> oh, nicer :)
09:52:23 <roconnor> @hoogle strictReadFile
09:52:24 <lambdabot> No matches found
09:52:29 <roconnor> oh right
09:52:43 <roconnor> length c
09:53:50 <jmmv> wow, my first real-program in haskell is sloooowly progressing :-)
09:58:25 <jmmv> bbl
10:11:46 <marcot> Hello.
10:12:20 <marcot> Does that simonpj article  Tackling the awkward squad talk only about IO monads or about monads in general?
10:14:46 <marcot> Does anyone know a good monad tutorial?
10:14:59 <therp> syzygy: what's your paper about?
10:16:24 <Syzygy-> therp: Regular sequences in group cohomology. :)
10:17:19 <roconnor> http://www.nomaware.com/monads/html/
10:17:21 <lambdabot> Title: All About Monads
10:17:42 <dolio> Awkward squad only covers IO monads specifically (among other things).
10:17:49 <dolio> Not monads in general, I think.
10:20:40 <marcot> roconnor: thanks.
10:21:10 <therp> syzygy: oh, fine :).. (internal memo: don't ask questions that are likely to reveal that you have no clue.)
10:21:57 <Syzygy-> therp: No worries. Haskell isn't my main area of interest, and since I got all of my "thinking"-blog added, and not only the haskell-feed, there's going to be a lot happening there that doesn't particularily speak to the haskell crowd.
10:22:59 <Syzygy-> therp: To be specific about the paper: there is a method to talk about groups using algebraic topology. This way, a ring pops out, carrying information about the group. I'm looking at specifically calculated examples of such rings for small groups, and discussing a specific pattern in those rings.
10:25:18 <roconnor> ?fptools Data.Word
10:25:19 <lambdabot> http://darcs.haskell.org/packages/base/Data/Word.hs
10:42:19 <MenTaLguY> hello
10:43:02 <thou> hi, MenTaLguY
10:43:25 <MenTaLguY> I've got a sort of odd question
10:44:13 <MenTaLguY> Background: I'm playing with implementing a dialect of Haskell in which type constructors can take non-type arguments
10:44:58 <MenTaLguY> unfortunately, this means Haskell's nice notation for list and tuple types would then conflict with the notation for list and tuple values
10:45:12 <MenTaLguY> but I'd rather not go back to ML's way of doing things either
10:45:31 <Taral> So where is my debian ghc 6.6 package?
10:46:33 <MenTaLguY> so I was wondering if anyone had any good ideas for a disambiguating syntax, or perhaps an alternate syntax for list/tuple types that isn't as ugly as ML's
10:47:38 <Taral> @ping Igloo
10:47:39 <lambdabot> Not in scope: type constructor or class `Igloo'
10:47:59 <MenTaLguY> hee
10:49:58 <thou> MenTaLguY: something like $[Int]$ == type, [3] == value?
10:50:09 * thou just makes something up
10:50:16 <MenTaLguY> yeah, sort of
10:50:35 <MenTaLguY> that's the right idea, though that particular syntax doesn't seem too appealing
10:50:42 <thou> no, it doesn't
10:50:51 <mikael> wouldn't it kind of conflict with everything else, too
10:51:22 <Igloo> Taral: Yes?
10:51:35 <Taral> Is there a debian ghc 6.6 package?
10:51:38 <Igloo> No
10:51:47 <Taral> :(
10:52:17 <MenTaLguY> mikael: you mean data and type constructors with the same names generally?
10:52:47 <mikael> yeah, I think... but I'm not sure what you have in mind
10:53:55 <MenTaLguY> well, at present just this sort of thing:
10:55:54 <MenTaLguY> ergh, that's too long to do without pasting
10:56:09 <MenTaLguY> but basically this would go hand-in-hand with first-class types
10:56:35 <MenTaLguY> so you could get the type of an expression with e.g. typeOf or something, and pattern-match out e.g. Int parameters to the type
10:57:11 <Taral> @seen wibble
10:57:12 <lambdabot> I haven't seen wibble.
10:57:26 <Taral> funny
10:57:28 <Taral> it says (wibble) :)
11:00:17 <thou> MenTaLguY: there's got to be some unicode characters that would be appropriate :-)
11:03:51 <MenTaLguY> Unicode characters for programming are great ... I just wish there were easy, standard ways to type them
11:04:18 <MenTaLguY> I'm not sure that variations on C's digraphs and trigraphs (a la Perl 6) is a good idea
11:08:03 <Cale> MenTaLguY: Install SCIM :)
11:11:01 <Cale> ∀x. ∀y. x = y ⇔ (∀z. z ∈ x ⇔ z ∈ y)
11:12:26 <MenTaLguY> hmm, any SCIM tutorials?
11:12:39 <MenTaLguY> still doesn't help Windows or OS X users much though I'm afraid
11:13:02 <Cale> I think in OS X there are good ways to type unicode characters already
11:13:12 <Cale> (but I'm not entirely sure)
11:14:15 <Cale> The characters I just typed there are from the LaTeX table for SCIM, which is in the "additional" tables package. You can type most mathematical characters from unicode using the LaTeX equivalents.
11:15:01 <MenTaLguY> aha
11:15:18 <MenTaLguY> actually supporting the LaTeX equivalents is more appealing to me than digraphs/trigraphs
11:15:20 <Cale> and in fact, you don't even need to type the whole LaTeX code for the symbol, just enough of it to get to the character you're after
11:15:27 <MenTaLguY> definitely an idea to pursue
11:15:35 * MenTaLguY nods
11:15:39 <MenTaLguY> I'll have to give that a go too
11:15:44 <MenTaLguY> SCIM, I mean
11:16:00 <MenTaLguY> certainly a more general solution than writing my own toy language :)
11:19:19 <emu> ooo, 6.6
11:20:09 <emu> update topic eh =)
11:24:58 <ValarQ> where is the xor function?
11:29:47 <lispy> so i'm using ghc 6.5 and i get an error not in scope getBounds
11:29:50 <lispy> where has that been moved?
11:30:30 <lispy> ?hoogle getBounds
11:30:32 <lambdabot> No matches found
11:30:42 <ValarQ> @hoogle xor
11:30:43 <lambdabot> Data.Bits.xor :: Bits a => a -> a -> a
11:31:06 <ValarQ> there is the bitwise xor, but where is the equivalent to && and || ?
11:32:37 <sjanssen> @hoogle .&.
11:32:38 <lambdabot> Data.Bits.(.&.) :: Bits a => a -> a -> a
11:32:40 <sjanssen> @hoogle .|.
11:32:40 <lambdabot> Data.Bits.(.|.) :: Bits a => a -> a -> a
11:33:33 <Magicman> I think he means the logical xor. The one that works on Booleans.
11:34:32 <ValarQ> i do
11:34:58 <sjanssen> oh
11:35:25 <sjanssen> you want (/=)
11:36:23 <sjanssen> > [(x, y, x /= y) | x <- [False, True], y <- [False, True]]
11:36:24 <lambdabot>  [(False,False,False),(False,True,True),(True,False,True),(True,True,False)]
11:36:46 <ValarQ> sjanssen: thanks :)
11:36:52 <ValarQ> @karma+ sjanssen
11:36:53 <lambdabot> sjanssen's karma raised to 19.
11:37:27 <lispy> do the ghc devs document all their changes to the libraries?
11:37:38 <lispy> i want to read whats up with getBounds vs. bounds
11:38:16 <sjanssen> lispy: getBounds is monadic so you can have arrays that change size
11:39:21 <lispy> sjanssen: the reason i ask is because
11:39:32 <lispy> http://www.mail-archive.com/darcs-devel@darcs.net/msg02293.html
11:39:34 <lambdabot> Title: [darcs-devel] darcs patch: upcoming GHC 6.6 fixes, http://tinyurl.com/qjx5d
11:39:41 <sjanssen> there used to be: class HasBounds a where bounds :: a i e -> (i, i)
11:39:46 <lispy> that email says ghc newer than 6.4 has getBounds
11:39:53 <lispy> but ih ave 6.5 and it lacks getBounds
11:40:06 <lispy> but it does have bounds
11:40:09 <sjanssen> now that function has been folded into IArray
11:40:19 <lispy> see, that's the stuff i want to kno :)
11:40:37 <sjanssen> lispy: did you look at Data.Array.MArray ?
11:40:46 <sjanssen> that's where it is on my ghc 6.6 install
11:42:29 <dolio> Cale: what desktop/window manager do you use?
11:43:53 <lispy> sjanssen: what i want, is documentation of what gets changed i don't actually care that much about HasBounds vs. getBounds.  I want to know what was moved and why...a page that lists these changes would help me a ton.
11:44:09 <sjanssen> lispy: yes, that would be good
11:47:26 <sjanssen_> lispy: maybe if you start a 6.4 -> 6.6 migration guide on the wiki the documentation will magically populate
11:49:13 <albertlee> first time here, say hi to all.
11:49:31 <therp> hi albertlee
11:51:00 <lispy> sjanssen_: heh
11:53:52 <shapr> hi albertlee, are you joining Haskellers Anonymous?
11:54:01 <shapr> Hi, I'm Shae and I'm addicted to quality code.
11:54:31 <shapr> lhz: Is that like, as fast as I can twitch my leg? LHz == LegaHertz?
11:55:13 <shapr> Wah cool, Credit Suisse is hiring Haskellers. And they sent me an email to see if I've already been hired by someone else.
11:56:35 <albertlee> not yet
11:56:49 <sjanssen_> shapr: nice
11:57:42 <sjanssen_> they expected that you'd "already been hired"?  Is this a hint of some Haskell programmer gold rush?
11:57:46 <albertlee> hiring Haskellers ?
11:58:43 <sjanssen_> lispy: http://www.haskell.org/ghc/docs/6.6/html/users_guide/release-6-6.html
11:58:46 <lambdabot> Title: 1.4. Release notes for version 6.6, http://tinyurl.com/jz9hw
12:05:22 <dolio> ?a. a ? S ? a ? ?
12:05:22 <lambdabot> compose module failed: IRCRaised Parse error: "a"
12:05:32 <dolio> Yay, I finally got it working.
12:05:37 <shapr> sjanssen_: Frederik Eaton told the Credit Suisse guy that I was interviewing with Galois, after which the guy said he might want to hire me if Galois didn't.
12:06:46 <lispy> shapr: cool!
12:06:51 <lispy> shapr: good luck
12:07:32 <albertlee> cool
12:07:54 <sylvan> I want to use haskell for a living too... dammit... Tim Sweeney needs to hurry up and create his uber-language for games..
12:08:01 <Ulfalizer> shapr: what are they using haskell for?
12:08:16 <shapr> Ulfalizer: Financial contracts
12:08:25 <Ulfalizer> ok
12:08:40 <Ulfalizer> could get boring.. :)
12:08:46 <albertlee> oh, financial ~
12:09:19 <shapr> Actually, I think it'd be nifty as long as I got to hack on a combinator language to describe financial contracts in Haskell.
12:09:27 <shapr> Domain Specific Languages are way cool.
12:09:31 <albertlee> so use an interesting language is import
12:09:32 <bringert> and then plug it into excel
12:09:41 <bringert> I'm not kidding
12:09:57 <bringert> they load haskell dlls into excel
12:10:01 <shapr> That's a great idea!
12:10:27 <albertlee> how can make haskell to dll ?
12:10:34 <albertlee> newbie, sorry
12:10:39 <bringert> with ghc
12:10:46 <shapr> Excel is used for lots of financial work, everything from college student monthly budgets up to insanely large stock management 'applications'
12:10:50 <bringert> plus magic
12:11:13 <albertlee> magic ?
12:12:46 <shapr> albertlee: I don't know how GHC makes DLLs, since I use Linux. But I do know DLLs can be made from Haskell programs.
12:13:08 <lispy> yes, in fact i have description of how to do it using cabal
12:13:14 <lispy> albertlee: would you like a link?
12:13:20 <albertlee> ok, that's ok, I mainly use linux too.
12:13:21 <vegai> 8
12:13:39 <lispy> well, just in case
12:13:40 <lispy> http://www.haskell.org/haskellwiki/Cabal
12:13:41 <albertlee> oh , thanks i want the url
12:13:42 <lambdabot> Title: Cabal - HaskellWiki
12:13:51 <lispy> that page explains what i figured out
12:14:18 <shapr> @quote mahogany
12:14:19 <lambdabot> mahogany hasn't said anything memorable
12:15:25 <albertlee> thank you~
12:16:39 <albertlee> i learn haskell for only one week, and use python before. very glad to find this channel
12:16:58 <shapr> I also used Python for years before I found Haskell.
12:17:04 <shapr> Now I've used Haskell for years!
12:17:13 <shapr> @oldwiki HaskellDemo
12:17:14 <lambdabot> http://www.haskell.org/hawiki/HaskellDemo
12:17:30 <albertlee> waa~ guru
12:18:24 * lispy thinks it's hard to be a haskell guru
12:18:28 <lispy> good luck keeping up!
12:18:39 <albertlee> is lambdabot a really bot ?
12:18:39 <lispy> i always feel like a newb
12:18:45 <lispy> ?version
12:18:46 <lambdabot> lambdabot 4p245, GHC 6.5 (OpenBSD i386)
12:18:46 <lambdabot> darcs get http://www.cse.unsw.edu.au/~dons/lambdabot
12:18:50 <shapr> me too
12:19:00 <dolio> ?
12:19:04 <dolio> Oops.
12:19:53 <shapr> I like the GHC 6.6 changelog. We get to instantiate impredicative types now! w00!
12:19:59 <shapr> er
12:20:06 <lispy> is 6.6 released then?
12:20:09 <lispy> is just close still?
12:20:26 * lispy goes to lunch
12:20:28 * lispy &
12:20:28 <arjanb> released today
12:20:29 <shapr> The new impredicative type support means we can instantiate polymorphic values.
12:20:50 <shapr> The monomorphic restriction meant that you could have polymorphic types, but never instantiate them.
12:20:52 <yip> wow, that shit got released!
12:21:18 <roconnor> impredicative type support?
12:21:27 <yip> ghc 6.6!
12:21:43 <roconnor> funny, coq just removed impredicative type support (expect in Prop).
12:24:30 <glguy> coq?
12:24:42 <roconnor> @where coq
12:24:44 <lambdabot> I know nothing about coq.
12:24:49 <roconnor> :(
12:25:05 <roconnor> http://coq.inria.fr/
12:25:07 <lambdabot> Title: The Coq proof assistant
12:25:27 <glguy> http://www.haskell.org/ghc/docs/6.6/html/users_guide/type-extensions.html#impredicative-polymorphism
12:25:29 <lambdabot> Title: 7.4. Type system extensions, http://tinyurl.com/okfbp
12:26:37 <araujo> hello
12:27:01 <araujo> The 'extra-libraries' field in a cabal file is for using non-haskell libs?
12:27:21 <bringert> yep
12:27:28 <araujo> Thanks bringert
12:27:37 <roconnor> well, Haskell wasn't logically consistent anyways...
12:27:58 <shapr> hei esap, ltns
12:28:04 <esap> Hi
12:28:10 <araujo> shapr, hola
12:28:26 <shapr> ¡hola araujo!
12:28:31 <araujo> shapr, :-)
12:28:39 <shapr> ¿como est as?
12:28:47 <araujo> shapr, muy bien! , y tu?
12:28:56 <shapr> I want an upside down period for the front of spanish sentences.
12:29:00 <shapr> .bien.
12:29:05 <shapr> hmm, doesn't really work
12:29:08 <araujo> hah
12:29:25 <shapr> ·bien.
12:29:27 <shapr> hm, better!
12:29:33 <araujo> shapr, or probably an up period!
12:29:36 <araujo> yeah!
12:29:40 * shapr grins
12:29:49 <shapr> esap: How's code?
12:30:19 <esap> shapr: I recently bumped into another problem regarding adujnctions.
12:30:35 <shapr> What is it?
12:31:26 <esap> shapr: When you have adjunction, say F -| G, with, say, F : C x C -> C, then you have to somehow determine what C is.
12:31:43 <esap> shapr: And I don't know how to find out from context what to use there.
12:31:50 <shapr> Sounds a bit like comonads.
12:32:39 <esap> shapr: The C is a category. The problem is, C can be any category where the adjunction exists.
12:33:30 <esap> shapr: One obvious solution is to let the programmer provide that category, but that doesn't sound like a good solution.
12:33:50 <esap> shapr: anyway some kind of matching against the category has to be done there.
12:34:31 <araujo> bringert, i keep getting an unknown symbol while trying to load the lib package ...
12:34:49 <araujo> bringert, what could be the reason? , the lib compiles and install fine.
12:35:07 <shapr> swiert: Do you use dvorak?
12:35:10 <bringert> this is a cabal package that uses a c lib?
12:35:23 <bringert> araujo: what symbol is it that's missing?
12:35:25 <swiert> shapr: yes. Why do you ask?
12:35:38 <shapr> swiert: Your irc username says that.
12:35:57 <shapr> saonteu
12:36:02 <shapr> aoeuhtns
12:36:03 <araujo> bringert, no, it is missing a symbol belonging to one of the haskell lib function ....
12:36:12 <araujo> the lib doesn't use extra-libs
12:36:31 <shapr> Igloo: ghc6 6.6 debs soon?
12:36:32 * shapr boings
12:36:45 <swiert> Ah yes. I hit some obvious keys.
12:36:50 <bringert> araujo: maybe you are missing a haskell package dependency or a -package flag
12:37:11 <araujo> mm...
12:40:45 <GomoX> is there a builtin function to get a list of N times the element A?
12:40:48 <GomoX> (hi)
12:41:13 <Magicman> replicate n a
12:41:18 <GomoX> :D
12:41:19 <Magicman> > replicate 10 1
12:41:20 <lambdabot>  [1,1,1,1,1,1,1,1,1,1]
12:41:20 <GomoX> thanks
12:41:37 <albertlee> take 10 [1,3..]
12:41:54 <albertlee> > 3 + 5
12:41:56 <lambdabot>  8
12:42:00 <albertlee> :)
12:42:08 <araujo> bringert, those are the only two possible problems?
12:42:25 <bringert> no
12:42:30 <bringert> jsut some common ones
12:42:31 <bringert> just
12:42:58 <araujo> yeah, mm ... i think i have it all specified there ....
12:43:08 <bringert> what symbol is it complaining about?
12:45:46 <araujo> ghc-6.5.20061004: /usr/local/lib/lib-0.1/ghc-6.5.20061004/HSlib-0.1.o: unknown symbol `libzm0zi1_Command_returnS_closure'
12:45:47 <araujo> Loading package lib-0.1 ... linking ... ghc-6.5.20061004: unable to load package `lib-0.1'
12:46:08 <araujo> bringert, The 'returnS' function is inside the module Command
12:46:47 <shapr> musasabi: ayh?
12:48:07 <musasabi> shapr: pong
12:48:17 <shapr> bringert: Oh hey, what's up with the -> m Html result of HMarkup?
12:48:27 <Philippa> presumably parsing can fail?
12:48:34 <shapr> oh yeah, duh
12:49:05 <shapr> musasabi: Erm, I may have found the bug =)
12:49:25 <shapr> It's amazing how asking a question can sometimes magically reveal the problem.
12:49:32 <bringert> shapr: no, that's not it
12:49:44 <bringert> it's -> m (Either String Html)
12:49:48 <bringert> the Either is for failing
12:50:06 <bringert> the m is so that the syntax extensions can be monaid
12:50:09 <shapr> I was just trying to figure out an easy way to put the result into header +++ (txt2html input) +++ footer
12:50:12 <bringert> e.g. read external files
12:50:14 <shapr> ohh
12:50:16 <shapr> That makes sens.
12:50:28 <bringert> I should probably document taht
12:50:29 <shapr> sense*
12:50:35 <Philippa> ah, okay. Cool, that makes sense
12:50:45 <Philippa> (still need to do the relevant transformation to Flippi's parser sometime)
12:51:00 <Syzygy-> @hoogle +++
12:51:02 <lambdabot> Control.Arrow.(+++) :: ArrowChoice a => a b c -> a b' c' -> a (Either b b') (Either c c')
12:51:02 <lambdabot> Text.Html.(+++) :: (HTML a, HTML b) => a -> b -> Html
12:51:02 <lambdabot> Text.ParserCombinators.ReadP.(+++) :: ReadP a -> ReadP a -> ReadP a
12:51:03 <shapr> Anyway, I ended up hacking HMarkup into HAppS wiki last night but it doesn't return correctly.
12:51:10 <shapr> Syzygy-: Text.XHtml
12:51:12 <vincenz> damn
12:51:16 <bringert> I'm working on a haskell web app tutorial: http://www.cs.chalmers.se/~bringert/darcs/hs-web-tut/
12:51:23 <lambdabot> http://tinyurl.com/zveza
12:51:26 <bringert> it is written in hamrkup format
12:51:33 <shapr> Spiffy!
12:51:41 <bringert> with custom chunk formats for including haskell files
12:51:59 <bringert> here's the conversion program: http://www.cs.chalmers.se/~bringert/darcs/hs-web-tut/tools/hmarkup.hs
12:52:01 <lambdabot> http://tinyurl.com/g2gxt
12:52:02 <araujo> bringert, i can use perfectly well the , :m ghci option to load the package. It fails when i try to link with -package
12:52:10 <shapr> I want to add a bunch of other stuff to HMarkup. Things that come to mind are hscolour, LaTeX, etc
12:52:46 <shapr> It's nice to have the markup -> (x)html as an extensible plugin.
12:53:02 <bringert> here's the input file http://www.cs.chalmers.se/~bringert/darcs/hs-web-tut/index.t2t
12:53:04 <lambdabot> http://tinyurl.com/k92n9
12:53:28 <bringert> shapr: http://www.cs.chalmers.se/~bringert/darcs/hs-web-tut/tools/hmarkup.hs contains a hscolur plugin
12:53:28 <lambdabot> http://tinyurl.com/g2gxt
12:53:48 <musasabi> shapr: ok.
12:53:52 <bringert> araujo: interesting
12:54:17 <bringert> are you lining statically or dynamically (not that I know if that would make a difference?)
12:54:35 <bringert> araujo: can you paste the commands and output somewhere?
12:54:59 <bringert> araujo: have your tried making clean, recomplining and reinstalling the package, and any pacjages that depend on it
12:55:15 <araujo> bringert, hah, not sure, how do i figure out the type of linking?
12:55:35 <araujo> bringert, let me try re-installing dependency
12:56:06 <bringert> ghc's recompilation checker does not track which of the packages you depend on was used when compiling the exisiting object files. this can lead to interesting errors
12:56:09 <shapr> Actually, I might have a HAppS question. I think the m Html result is why POSTing the page contents doesn't return. Is there something like addSideEffect that returns the result?
12:56:21 <shapr> Ah, backgroundIOandRetry maybe?
12:56:56 <bringert> shapr: m could be Identity if you want
12:58:03 <musasabi> shapr: addSideEffects is not returning a result.
12:58:12 * bringert plays fast and loose with SrcSpans
12:58:35 <musasabi> shapr: what GHC/fps are you using?
12:58:44 <musasabi> shapr: it may be the fps laziness bug.
12:58:51 <shapr> oh
12:59:02 <araujo> argh
12:59:12 <araujo> bringert, worked, i was forgetting to include a exposed module :-|
12:59:15 <shapr> I'm using 6.4.2 and fps 0.8
12:59:45 <shapr> CosmicRay: Hey! Do you know of any PSTN to SIP providers that give numbers in Birmingham AL and/or Stockholm?
12:59:49 <musasabi> shapr: does your fps have the critical patch.
13:00:07 <shapr> musasabi: Not sure, I'll update and reinstall FPS.
13:01:32 <shapr> musasabi: Weird thing is that when I POST the new page contents it gets saved, but I never get forwarded to the view for the page.
13:02:00 <shapr> Ah yes, new fps patches include "fix lazyness of ... spotted by Einar Karttunen"
13:02:17 <shapr> @time musasabi
13:02:19 <lambdabot> Local time for musasabi is Wed Oct 11 23:01:56 2006
13:02:39 <shapr> Ah, I better get my user login code started quickly so I can ask questions.
13:03:23 <shapr> musasabi: Any thoughts on how to build a templating language like that one Behrens pointed out?
13:03:28 <nominolo> ok, stupid newbe Q, but still:  Say I have a state monad. Now, I'd like to run a function in this state monad and after that want to print that.  How do I do that?  If it's helpful I can paste what I have so far.  I probably have some misconception here, but, basically I'd like to "switch to another monad"
13:03:51 <shapr> Does shannon jj behrens hang out on #haskell?
13:04:03 <musasabi> replying to a email first.
13:04:23 <shapr> Sure, I'm not in a hurry.
13:06:28 <sjanssen_> nominolo: after you print, do you want to reenter the state monad?
13:06:39 <nominolo> nope
13:06:59 <sjanssen_> @hoogle State s a -> s -> (s, a)
13:07:00 <lambdabot> No matches, try a more general search
13:07:08 <sjanssen_> @hoogle runState
13:07:08 <lambdabot> Control.Monad.State.runState :: State s a -> (s -> (a, s))
13:07:08 <lambdabot> Control.Monad.State.runStateT :: StateT s m a -> (s -> m (a, s))
13:07:47 <nominolo> ah, ok.  I take a look ..
13:08:51 <dolio> I'm always amazed at how many people vehemently defend the goto statement.
13:08:59 <CosmicRay> shapr: not right off hand, but I'd check the list at voip-info
13:09:12 <CosmicRay> shapr: that teliax.com to start with for birmingham
13:09:23 <glguy> nominolo: usually you will use "evalState" instead of "execState" or "runState"
13:09:36 <CosmicRay> does anyone know how to make a link to a function name with an apostrophe in it for haddock?  I want to link to newProgress', but 'newProgress\'' doesn't do the right thing.
13:10:02 <bringert> shapr: re templating, did I give you the url for the haxml template stuff our students did?
13:10:11 <CosmicRay> shapr: teliax has a pay as you go plan.  2 cents per minute and no monthly fee unless you have an incoming number, which is $5/mo
13:10:42 <liyang> dolio: gotos are wonderful. :)
13:11:00 <arjanoosting> CosmicRay: did you receive my patch for haskell-devscripts?
13:11:22 <CosmicRay> arjanoosting: yes, and I haven't had a chance to review it yet.  thanks, btw!  from your description it sounds excellent.
13:12:08 <CosmicRay> shapr: you may also be interested in Broadvoice's BYOD-lite plan
13:12:22 <musasabi> shapr: back here.
13:13:04 <arjanoosting> CosmicRay: your welcome. Any change you will upload a a new version of lhs2tex to unstable soon?
13:13:34 <CosmicRay> it will happen eventually but is low on my priority list.  feel free to darcs send me a patch to speed it up though
13:13:44 <dolio> Perhaps if haskell got some gotos, it would increase its popularity, and finally go mainstream! :)
13:13:46 <CosmicRay> darcs get http://darcs.complete.org/debian/lhs2tex and lhs2tex.upstream
13:13:57 * CosmicRay thwaps dolio
13:13:59 <arjanoosting> CosmicRay: will take a look at it then.
13:14:12 <glguy> dolio: Haskell has gotos, they are hidden away in the Cont monad
13:14:38 <dolio> Eh, continuations are way scarier than gotos.
13:14:41 <dolio> For some reason.
13:15:03 <bringert> yay! ghc compiles! now let's see what weird and wonderful panics we get
13:15:09 <shapr> bringert: Hm, I think you sent me the url, but I never got around to reading it. Can you give me the url again?
13:15:28 <sjanssen_> @remember bringert yay! ghc compiles! now let's see what weird and wonderful panics we get
13:15:48 <CosmicRay> shapr: several services also let you establish toll-free numbers at low prices.
13:16:10 <bringert> shapr: somewhere in here: http://csmisc14.cs.chalmers.se/haskellwebapps/darcs/xml/
13:16:13 <lambdabot> Title: Index of /haskellwebapps/darcs/xml, http://tinyurl.com/kwdag
13:16:56 <bringert> whoa, it didn't panic
13:17:26 <shapr> dolio: Continuations make a lot more sense than gotos.
13:17:45 <bringert> I must have done something wrong
13:18:38 <dolio> shapr: I can't disagree with you there.
13:18:50 <glguy> is GHC 6.6 supposed to allow the use of the lambda character? or is that something that was being considered for Haskell'?
13:19:11 <dolio> I thought that was just Cale's daydreaming.
13:19:13 <nominolo> glguy, sjanssen_ : thx, guys, that helped - i should have used the standard state monad from the beginning *g*
13:20:06 <sjanssen_> nominolo: rolling your own monads can be educational
13:20:21 <sjanssen_> glguy: give me a minute, I'll see if it works
13:20:40 <nominolo> well, I do.  but I used an incompletely provided state monad
13:23:57 <musasabi> shapr: if the templating language is just used for output I think it can be done without any changes to HAppS
13:25:05 <shapr> ok
13:25:59 <cm> is there an ETA on GHC 6.6 / Win32?
13:26:24 <sjanssen_> glguy: it seems that ghc interprets λ as an alphabetic character
13:29:38 <shapr> hiya cm
13:30:31 <lispy> cm: it wasn't released at the same time?
13:30:31 <cm_> hey
13:31:03 <lispy> hmm..just linux and mac intel
13:31:14 <lispy> that is suspicious
13:31:47 <sjanssen_> cm_: eta on GHC 6.6?  Depends on how fast your machine can compile it ;)
13:32:10 <cm_> i was just waiting for that one ;)
13:32:18 * lispy tries to decide if he wants to keep with visual haskell versions of ghc or finally just take the plunge and stop using it
13:32:42 <glguy> GHC 6.6 compile? hours
13:32:55 <ulfdoz> a/wg #bayern3
13:33:18 <glguy> someone's cat is walking on someone's keyboard
13:33:19 <ropine> greetings
13:33:24 <sjanssen_> glguy: it only took 1.5 hours here
13:33:50 <glguy> sjanssen_: like you said... "hours" (c:
13:34:10 <sjanssen_> I'd say hour(half s)
13:34:26 <sjanssen_> because 2 is when you start saying hours
13:35:16 <glguy> sjanssen_: on what processor?
13:35:57 <sjanssen_> glguy: dual Athlon MP 2200's without building extralibs
13:36:17 <glguy> well, on a single 1700+ w/ extralibs... hours
13:36:23 <glguy> and what are you doing without extralibs?
13:36:30 <glguy> the base install doesn't even include mtl
13:36:33 <sjanssen_> and my Core Duo 1.83 GHz laptop built ghc+extralibs took the same amount of time
13:36:59 <sjanssen_> glguy: yeah, but I run Gentoo which has separate packages for the extralibs
13:37:04 <glguy> ah
13:37:11 <glguy> so you did install them, just not at the same time
13:37:12 <glguy> makes sense
13:38:03 <ropine> does anyone know why -prof interferes with -package on ghc 6.2.2?
13:38:18 <glguy> ropine: are you on OpenBSD?
13:38:21 <ropine> linux
13:38:24 <ropine> debian stable
13:38:24 <sjanssen_> ropine: you probably didn't build profiling version of whatever package
13:38:30 <glguy> ah
13:38:33 <glguy> :(
13:38:39 <ropine> I was afraid you'd say something like that
13:39:10 <sjanssen_> maybe Debian has binaries of the profiling versions you can install?
13:39:28 <sjanssen_> if you installed from binaries in the first place
13:40:04 <ropine> there's a "ghc6-prof" package, which I did install
13:40:17 <bringert> ah, there we go. the 'impossible' happend
13:40:42 <sjanssen_> ropine: you'll want something like "hsql-prof"
13:40:43 <lispy> bringert: BTW, hope seems to be hopelessly broken on my system :(
13:40:52 <bringert> lispy: nice
13:40:56 <bringert> how?
13:41:04 <sjanssen_> lispy: you're hopeless?
13:41:08 <lispy> bringert: well at first when i got it installed i created an account
13:41:10 <lispy> sjanssen_: yes
13:41:26 <lispy> bringert: but when i logged in a got permission denied errors
13:41:41 <bringert> lispy: hmm
13:41:43 <lispy> bringert: several hours later i tried it and it said my mysql server had gone away
13:41:51 <musasabi> cm_: I think a version is being built to be uploaded to the homapage.
13:41:56 <bringert> for lunch presumably
13:42:09 <lispy> bringert: i don't have time to work on it right but i thought i'd mention it
13:42:22 <lispy> bringert: it's at http://hope.codersbase.com/ if you want to see for yourself
13:42:42 <bringert> interesting
13:42:52 <lispy> also, the .htaccess file was ignored and i had to manually put the contents into my vhost directive in my apache file
13:42:52 <bringert> are you using cgi or fastcgi?
13:42:57 <lispy> should be fcgi
13:43:21 <bringert> hope uses persistent db connections when running on fcgi
13:43:42 <bringert> maybe you have a longer timout for killing the fcgi than for the db connection
13:44:00 <lispy> hmm...
13:44:05 <bringert> hope should probably recover if the db connection disappears though
13:44:11 <bringert> try killing you fcgi process
13:44:12 <lispy> right
13:44:15 <lispy> okay
13:45:04 <lispy> yes that helped
13:45:24 <lispy> but i still can't login :)
13:45:34 <lispy> You do not have permission to perform this action.
13:45:35 <lispy> You probably need to log in.
13:45:44 <lispy> (that's the result of logging in)
13:47:01 <shapr> Cale: Do you have a homepage or cv/resume?
13:48:29 <bringert> lispy: can you go to http://hope.codersbase.com/setting/user
13:48:44 <bringert> probably not
13:48:53 <lispy> same error
13:49:13 <bringert> this is with the first user you created?
13:49:16 <lispy> yes
13:49:25 <bringert> strange
13:49:38 <lispy> yeah
13:49:44 <lispy> i'm not sure what to think :)
13:49:52 <lispy> i thought maybe it was related to the session bug you talked about
13:50:00 <bringert> I messed up I think
13:50:06 <bringert> dunno how yet though
13:50:20 <bringert> I don't think it's related to that
13:50:25 <bringert> that's just a performance issue
13:50:32 <lispy> oh okay
13:50:41 <lispy> well, if there is anything i can do to help trouble shoot let me know
13:50:48 <lispy> i'm not even sure where to begin looking for the problem
13:51:16 <bringert> I'll try a few things and come back
13:51:29 <lispy> bringert: no hurry
13:54:48 <lisppaste2> hn pasted "newbee random IO-problem" at http://paste.lisp.org/display/27792
13:57:21 <bringert> lispy: can you look in your sessions table?
13:57:33 <bringert> and at your session cookie?
14:00:09 <sonyoandr> your job suck. why dont you tell your boss he suck. i earn big monee. go to http://www.milliondollarscience.com  and i show u how to make 6000 krones a day... it is not advertising, im so glad i found u to tell u this, because its automatic money you see.. go now. to this site.
14:00:40 <hn> :r
14:00:43 <araujo> wtf?!
14:00:53 <hn> :)
14:01:14 <lispy> bringert: how?
14:02:11 <bringert> lispy: for the table, use the mysql command-line client, for the cookie, use your browser's thing for looking at your cookies
14:02:44 <bringert> see if you have a cookie, and that its id matches one in the db, and that the userid of that cookie in the db is 1
14:03:03 * lispy goes to find a mysql manual
14:06:06 <lispy> bringert: okay i see the cookie in ff
14:06:37 <lispy> there are 48 entries in the sessions table
14:06:41 <lispy> they all have the same sessionid
14:06:47 <lispy> userid = null
14:06:47 <bringert> eh
14:06:56 <bringert> none with userid = 1?
14:07:00 <lispy> none
14:07:05 <lisppaste2> roconnor pasted "rotate core" at http://paste.lisp.org/display/27793
14:07:22 <glguy> ‼
14:07:33 <bringert> strange, they should not have the same session id
14:07:41 <lispy> bringert: also the sessionid column looks smaller than the session id in ff, i'm wondering if mysql is truncating the value
14:07:47 * glguy fixed his ssh session to show unicode finally
14:08:00 <lispy> bringert: well, i typed "select * from sessions;"
14:08:06 <bringert> lispy: which version of mysql is this?
14:08:18 <lispy> $ mysql --version
14:08:18 <lispy> mysql  Ver 14.7 Distrib 4.1.14, for pc-linux-gnu (x86_64) using readline 5.1
14:09:46 <bringert> lispy: anything interesting in the web server error log?
14:10:22 <bringert> the code that generates session ids and stores sessions is in hope/Hope/Session/Operations.hs
14:10:34 <bringert> if you want to try to figure it out
14:11:14 <bringert> if it weren't for the duplicate session ids, I'd think it was a problem with the password / login
14:11:59 <bringert> you can try deleting your cooike and clear the session table
14:12:14 <bringert> but it never should have become that way
14:12:18 <shapr> glguy: Oh, I have a cool ssh trick, put this at the end of your ~/.ssh/config: Host *\nControlMaster auto\nControlPath /tmp/ssh-%h-%p-%r
14:12:43 <bringert> yeah, that's a nice feature
14:13:08 <lispy> bringert: i don't get anything in the error log :(
14:13:39 <bringert> maybe try clearing the cookie and sessions table then
14:14:04 <bringert> just to see if it was some kind of fluke or if it's permanentely messed up
14:14:16 <lispy> okay
14:14:28 * lispy looks in the mysql manual gain
14:14:43 <glguy> shapr: what does that do?
14:15:09 * glguy is reading about it in the man page
14:15:23 <shapr> glguy: Whenever you ssh to another host it creates a socket in /tmp that makes that connection the 'master' and all other connections use its credentials.
14:15:57 <shapr> Setup and teardown time of ssh connections is expensive if you're transferring a zillion small files.
14:16:30 <lispy> bringert: i'll have to work on it later
14:16:33 <lispy> bringert: but this is weird
14:16:34 <shapr> Also, if you're using darcs to send via ssh, you *really* don't want to type your password once for each scp call.
14:16:48 <lispy> bringert: it's as if the sessionids are too big for the column in the table
14:16:53 <glguy> shapr: so I make that change on my local end to facilitate multiple connections to a remote host?
14:17:01 <bringert> shapr: recent darcses use controlmaster automatigally
14:17:12 <bringert> lispy: is this a 64-bit machine maybe?
14:17:48 <bringert> with a 32-bit MySQL
14:17:50 <bringert> just a guess
14:17:52 <shapr> bringert: smart
14:18:05 * glguy doesn't use passwords to SSH, but prefers to use SSHkeys
14:18:27 <lispy> bringert: yes it is
14:18:31 <lispy> bringert: er well
14:18:36 <lispy> bringert: it's a amd64 machine
14:18:46 <bringert> that could be it
14:18:48 <lispy> bringert: debian built the mysql
14:18:58 <shapr> glguy: Yeah, but it still costs to setup and teardown connections even with ssh-agent.
14:19:00 <bringert> maybe MySQL always uses 32 bits for INT
14:19:08 <bringert> but the haskell Int is 64 bits
14:19:13 <lispy> could be
14:19:19 <bringert> type SessionID = Int
14:19:26 <lispy> > 2 ^ 31
14:19:27 <lambdabot>  2147483648
14:19:33 <bringert> try editing Hope/Session.hs
14:19:33 <lispy> oh, that was my session id
14:19:34 <glguy> shapr: I usually don't create multiple connections though.  I do everything through one connection and a screen session (additionally, my local endpoint is a windows box)
14:19:35 <lispy> in the db
14:19:45 <bringert> haha
14:20:02 <bringert> change type SessionID = Int to use Word32 or something
14:20:10 <lispy> hmm...okay
14:20:13 <lispy> well
14:20:21 <lispy> but wouldn't Word32 be too big also
14:20:28 <lispy> I want Int32
14:20:31 <bringert> ok
14:20:33 <bringert> try
14:20:35 <bringert> true
14:20:35 <lispy> (word would be unsigned)
14:20:46 <bringert> you're right
14:21:36 <bringert> hope generates randome SessionID values, so on a 64-bit machine they only fit in a 32 bit int once every 2 billion sessions
14:21:56 <lispy> ?hoogle Int32
14:21:58 <lambdabot> Data.Int.Int32 :: data Int32
14:22:44 <bringert> haskelldb shuld be fixed to take this sort of thing into account
14:22:55 <bringert> now it assumes that an Int fits in an INT
14:23:33 <lispy> this will take a tweaking
14:23:43 <lispy> ./Hope/Session/Operations.hs:118:0:
14:23:43 <lispy>     Couldn't match `Int' against `SessionID'
14:23:55 <bringert> oh, right
14:24:04 <bringert> ok, I have an easier change
14:24:23 <bringert> change genSessionID in Hope/Session/Operations.hs
14:24:47 <bringert> to generate an Int32, then use fromInteger to produce an Int
14:25:03 <lispy> randomRIO (0,maxBound)
14:25:09 <bringert> ah
14:25:10 <bringert> right
14:25:14 <lispy> change that to randomRIO (0, maxBound :: Int32) ?
14:25:51 <bringert> you could even do it without fromIntegral if you do: randomRIO (0, 2**31)
14:25:59 <shapr> musasabi: Yay! Newest FPS fixed my problem!
14:26:02 * shapr boings cheerfully
14:26:08 <lispy>  restrict (s!S.sessionid .==. constant sid)
14:26:17 <bringert> eh, make that 2^31
14:26:18 <lispy> that's actually the line with the error
14:26:32 <bringert> yeah, but that's a pain to fix
14:26:33 <lispy> ?type (!)
14:26:35 <lambdabot> forall e i. (Ix i) => Array i e -> i -> e
14:26:41 <bringert> fixing the generation should be easier
14:26:47 <lispy> so it says S.sessionid has to be Int
14:26:47 <bringert> lispy: different !
14:27:25 * shapr uploads a HAppS wiki binary with HMarkup support.
14:27:37 <lispy> oh, i see what you want me to do and why it will be easier
14:28:18 <bringert> this is not the sort of bug I expect in web apps
14:28:19 <musasabi> shapr: :-)
14:28:31 <bringert> arcane bit-width mismatches
14:28:41 <shapr> musasabi: Next, user login support. I'm sure I'll have bunches of questions.
14:29:30 <lispy> bringert: thanks for your hlep
14:29:46 <bringert> lispy: I hope it works
14:29:46 <lispy> bringert: also, thank you for the help
14:30:02 <lispy> bringert: not sure which is beter the, hlep or the help
14:30:10 <bringert> grr, hard not to make puns when the thing is called hope
14:30:16 <lispy> hehe
14:30:22 <lispy> "I hope works"
14:30:29 <lispy> "My hope works?"
14:30:30 <shapr> It takes four minutes to upload a 4.7mb stripped binary :-/ It's faster to darcs push and rebuild on the server.
14:30:42 <lispy> shapr: ouch
14:30:57 <shapr> bringert: I've been calling mine the "Higher Order Publishing Environment"
14:31:08 <bringert> lispy: http://googlefight.com/index.php?lang=en_GB&word1=help&word2=hlep
14:31:10 <shapr> I don't know if you already have an acronym.
14:31:12 <lambdabot> Title: Google Fight : Make this fight with googleFight help VS hlep, http://tinyurl.com/p57l5
14:31:36 <bringert> shapr: yeah I've seen that, I like it
14:31:54 <bringert> shapr: wouldn't it rather be a backronym?
14:32:02 <shapr> Well, yeah.
14:32:18 <shapr> Oh cool, I didn't know Henrik Nilsson hung out here.
14:33:05 <lispy> bringert: ah, google fight, the real way to decide things
14:33:19 * lispy works on untaring installball
14:33:54 <bringert> lispy: I run a copy of hope locally, using flatdb, to get quick turnaround when developing
14:34:12 <musasabi> shapr: new cabal supports splitted objects (6.6) which may help with executable sizes.
14:34:12 <bringert> of course that wouldn't work for testing this problem
14:34:22 <shapr> yay!
14:34:35 <lispy> bringert: cool! i'm in!
14:34:48 <bringert> sweet!
14:35:24 <bringert> ok, that's the kind of bug you remember and tell your grandchildren about
14:35:32 <shapr> What was the bug?
14:36:00 <shapr> Oh, 32 bit int vs 64 bit int
14:36:03 <bringert> "wow grampa, there were 32-bit databases when you were a kid?"
14:36:10 <lispy> shapr: mysql is dumb :)
14:36:25 <lispy> actually, i guess it's haskelldb
14:36:27 <SamB> does new Cabal come with own ar(1) and ranlib(1)?
14:36:36 * shapr grins
14:36:37 <bringert> well, there's somthing to be said for having the same type have the same range on different systems
14:36:40 <glguy> lispy: flatfile generally don't provide much intelligence
14:36:45 <lispy> haskelldb should have known to use Int32 explicitly or checked for Int64 and used that
14:36:45 <glguy> file*
14:36:46 <glguy> files*
14:37:06 <bringert> I think part of the problem is that haskell's Int varies in size
14:37:14 <lispy> right
14:37:17 <bringert> but yeah, haskelldb should compensate for that
14:37:27 <SamB> its *supposed* to do that
14:37:35 <lispy> i need to customize the color scheme and some other things
14:37:36 <bringert> but then you'd have the hassle of getting Int32s all the time, not Ints
14:38:07 <bringert> lispy: you may want to start from the hope theme instead of the default one
14:38:44 <shapr> yay! HMarkup support - http://www.scannedinavian.com:8000/wiki/FrontPage
14:38:47 <lambdabot> http://tinyurl.com/zser8
14:39:22 <lispy> bringert: okay, also need to fix that bug with mysql connections
14:39:28 <lispy> bringert: any ideas on where to start?
14:39:35 <shapr> Thanks to bringert for writing HMarkup!
14:40:10 <bringert> lispy: HopeFastCGI.hs should be the place to fix the connection thing
14:40:23 <bringert> it should be fastcgi-specific
14:40:54 <Botty> hmm is there a particular type of game that might most benefit from functional programming, eg have a very elegant implementation?
14:41:25 <bringert> I guess that in  the argument to runFastCGI you can first check if the connection is alive, if not make a new one
14:41:27 <Botty> not to say that they don't all apply, but you'd think a certain game or a certain genre would play into it
14:41:38 <lispy> Botty: sudoku :)
14:41:42 <Botty> hehe
14:41:46 <bringert> that needs a bit of hackery though
14:41:51 <Botty> tubad I don't like sudoku :)
14:41:53 <shapr> Botty: Real time strategy
14:42:04 <lispy> bringert: hmm...
14:42:07 <shapr> Botty: though FPS games don't have much state, have you seen Frag?
14:42:20 <Botty> yeah i've seen frag.  pretty cool
14:42:31 <lispy> bringert: i'm thinking something here it tries a few times before giving up (meaning it tries to reestablish a few times)
14:42:37 <Botty> RTS does sound good, thanks
14:43:59 <bringert> lispy: that would be good
14:44:27 <Botty> yeah, quite good actually, 3d rtses have readily procedural geometry (terrain for example) chuck on perlin and a color algo and you're good
14:44:41 <glguy> ew, "file myprogram.hs" is reporting ASCII Java Program Text
14:44:54 <glguy> does java have an import directive?
14:45:01 <resiak> Yes.
14:45:09 <weitzman> It's called, "import"
14:45:27 <glguy> I meant to put quotes around import originally :)
14:46:02 <musasabi> @karma+ shapr
14:46:03 <lambdabot> shapr's karma raised to 26.
14:46:17 <lispy> bringert: i have no idea how to get this working :)
14:46:38 <lispy> bringert: i mean, how do you catch and restart?
14:46:48 <bringert> lispy: thanks for the patch
14:46:59 <lispy> np :) it's only a one liner
14:47:19 <bringert> lispy: you should probably do some silly operation on the db, and catch any exceptions
14:47:56 <lispy> bringert: so cgiMain gets called again on each page request?
14:48:01 <glguy> is "hawiki" outdated or is "haskellwiki"
14:48:09 <shapr> hawiki is outdated
14:48:14 <SamB> @wiki
14:48:14 <bringert> lispy: not with fastcgi
14:48:14 <lambdabot> http://www.haskell.org/haskellwiki/
14:48:15 <bringert> oh sorry
14:48:18 <SamB> @oldwiki
14:48:18 <lambdabot> http://www.haskell.org/hawiki/
14:48:26 <bringert> lsipy: yes, it does
14:48:32 <bringert> lispy: you're right
14:48:46 <bringert> runFastCGI loops and calls cgiMain for each request
14:48:49 <lispy> bringert: so is cgiMain defined in hope?
14:48:53 <lispy> okay
14:48:53 <bringert> yes
14:48:56 <bringert> in Hope.hs
14:49:12 <bringert> you could maybe make an ensureDB :: Database -> (Database -> IO a) -> IO a
14:49:15 <lispy> okay, so i kinda get what to do
14:49:37 <bringert> that checks if the given connection is ok, otherwise wraps the given action in dbConnect
14:49:45 <lispy> just trying to think if that should be in hope or in HopeFastCGI
14:49:56 <bringert> I think HopeFastCGI
14:50:10 <bringert> the only other place cgiMain is called is from HopeCGI
14:50:17 <lispy> cool
14:50:30 <bringert> but there a new db connection is made for each request, so it shouldn't have time to die
14:51:50 <emk> @pl foo x y = f (g ((+) x y))
14:51:50 <lambdabot> foo = ((f . g) .) . (+)
14:52:11 <glguy> Cale: Are you about?
14:52:25 <shapr> musasabi: users.hs is missing something, multithingy instances I think. Adding -fglasgow-exts gets it compiling again.
14:52:49 <dons> SamB: so you're undoing the patch now?
14:53:02 <dons> (should really have an explanation in the patch to motivate it...)
14:53:14 <glguy> ?tell Cale I made a minor correction to http://www.haskell.org/haskellwiki/New_monads/MonadRandom and I was hoping you could verify that it was necessary (I had to make it for my code to compile)
14:53:14 <lambdabot> Consider it noted.
14:54:52 <musasabi> shapr: probably a 6.4 vs 6.6 issue. Pushing a patch.
14:55:24 <shapr> Should I just concat the users state and the wiki state?
14:55:46 <shapr> Is there anything more compositional, or is that something saved for future developments?
14:56:13 <SamB> dons: yeah.
14:56:31 <SamB> I tried to send a complementary patch to the ghc-cvs list...
14:56:49 <SamB> and now my working directory broke :-(
14:57:08 <musasabi> shapr: usually I just define a record type. if they are separate you could have a record containing both types and use withFoo and withBar wrappers.
14:57:47 <SamB> dons: see discussion in #ghc
14:58:32 <SamB> @where ghc
14:58:32 <lambdabot> http://haskell.org/ghc
15:00:28 <SamB> my GHC working dir has serious issues...
15:00:52 <SamB> darcs repair doesn't repair it, yet it is *waay* inconsistant with itself
15:00:58 <lispy> bringert: i'm authenticated in ff and it looks one way and unauthenticated in ie and the css or skin looks totally different
15:01:00 <SamB> and I can't darcs get from it either
15:01:33 <musasabi> Committed experimental blocking IO support to the HAppS repo :-)
15:01:45 <shapr> interesting
15:01:49 <bringert> lispy: is it the authentication or the browser that makes the difference?
15:02:03 <bringert> also, IE caches stuff it shouldn't cache
15:02:06 <bringert> esp IE7
15:02:15 <shapr> IE does all sorts of stuff it shouldn't.
15:02:19 <lispy> bringert: oh, i was hoping you'd know :)
15:02:24 <bringert> try forced reloading
15:02:26 <glguy> )-,:
15:02:39 <lispy> bringert: first time i ever tried it in IE
15:02:42 <glguy> ;_;
15:02:45 <shapr> IE should die.
15:02:50 <lispy> oh
15:02:56 <lispy> bringert: yeah, so how does that work
15:02:57 <glguy> qq
15:02:58 <bringert> lispy: every time I've had problems like that, it was because IE cached the CSSand refused to reloadit
15:03:14 <bringert> lsipy: what?
15:03:24 <shapr> And sometimes I tell my clients to reboot so that MSIE will let them see the website changes.
15:03:25 <glguy> shift+reload button or ctrl+reload button usually works wonders though in IE 6
15:03:30 <bringert> caching?
15:03:35 <lispy> bringert: i mean, ctrl+f5 made it show up correctly in IE, even though the first time i ever tried it in IE it was ready to go
15:03:40 <shapr> Because really, MSIE hates me. Me personally.
15:03:42 <lispy> bringert: how could it have been caching something
15:03:49 <bringert> ah
15:03:51 <bringert> odd
15:04:09 <bringert> yeah, that's strange
15:04:36 <lispy> bringert: thanks again though
15:04:40 <lispy> i'll work on this db connect thing later
15:04:45 <lispy> i should be doing more work stuff at the moment :)
15:04:47 <bringert> maybe it just failed to laod the CSS for some reason
15:04:53 <bringert> :-)
15:04:55 * lispy pokes IE
15:11:34 <shapr> hiya henrik
15:12:48 <hn> is it possible to transform an Int to Char in an expression of putStr? for example: putStr ( "Number:" ++ Int)
15:13:42 <bringert> hm: try show
15:13:44 <shapr> Are you the same Henrik Nilsson who worked on Yampa?
15:13:50 * shapr is wondering...
15:13:50 <hn> I think I've seen something like putStr ( "Number:" ++ (Int :: Char)
15:14:13 <bringert> as in putStr ("Number: " ++ show x)
15:14:19 <bringert> if x is an Int
15:14:25 <hn> what i s yampa? My name i henrik nilsson
15:14:33 <hn> aha!
15:14:50 <dons> > printf "%d" (42::Int)
15:14:51 <lambdabot>  Add a type signature
15:14:58 <dons> > printf "%d" (42::Int) :: String
15:15:00 <lambdabot>  "42"
15:15:08 <dons> > show 42
15:15:10 <lambdabot>  "42"
15:15:16 <bringert> > 42
15:15:17 <lambdabot>  42
15:17:08 <hn> this is in a monad, maby that's why it doesn't work when I try putStr ("Number:" ++ show int)
15:17:14 <dons> > intToDigit 15
15:17:16 <lambdabot>  'f'
15:17:37 <dons> ?type putStr ("Number: " ++ show 5)
15:17:39 <lambdabot> IO ()
15:17:42 <dons> looks fine to me
15:17:54 <dons> ?type printf "Number: %d" (5::Int) :: String
15:17:56 <lambdabot> String :: String
15:18:02 <dons> ?type printf "Number: %d" (5::Int) :: IO () -- hehe!
15:18:04 <lambdabot> IO () :: IO ()
15:18:08 <hn> intToDigit is undefined variable for me
15:18:19 <dons> its nice how haskell uses typeclasses to implement both printf and snprintf in the same function
15:18:32 <dons> intToDigit is in Char
15:18:40 <dons> ?index intToDigit
15:18:41 <lambdabot> Data.Char
15:19:14 <hyraxfourtwo> dons that's good to now
15:19:17 <hyraxfourtwo> know
15:19:21 <dons> mmm Fun in the Afternoon: Thurs 16th Nov in Oxford
15:19:34 <dons> "Graham Hutton and Conor McBride at Nottingham and I are organizing a termly
15:19:35 <dons> seminar "Fun in the Afternoon" on functional programming and related
15:19:35 <dons> topics. The idea is to have a small number of talks as an antidote to
15:19:35 <dons> mid-term blues"
15:19:44 <dons> that sounds really cool
15:19:51 <dons> hyraxfourtwo: yeah.
15:20:11 <hyraxfourtwo> ?fptools Text.Printf
15:20:11 <lambdabot> http://darcs.haskell.org/packages/base/Text/Printf.hs
15:20:19 <dons> ?source Text.Printf
15:20:19 <lambdabot> http://darcs.haskell.org/packages/base/Text/Printf.hs
15:20:36 <hyraxfourtwo> whta's the diff between source and fptools
15:20:45 <dons> nothing
15:20:50 <dons> one's more intuitive I think
15:20:55 <dons> so , that's something ... :)
15:21:03 <hyraxfourtwo> yeah I don't see how source is related
15:21:17 <dons> oh, it gives you the source...
15:21:21 <dcoutts> dons, in Oxford? where was that announced? I'll go.
15:21:29 <dons> dcoutts: haskell@ just now
15:21:34 * dcoutts reads
15:21:47 <dons> Jeremy.Gibbons, Graham Hutton and Conor McBride are organising
15:21:49 <hyraxfourtwo> dons, I was being ironic
15:21:52 <dons> :)
15:22:51 <dons> a "termly seminar" heh
15:25:43 <SamB> dons: people also try @docs with regularity
15:25:45 <SamB> er.
15:25:48 <SamB> @darcs
15:25:48 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/index.html
15:25:52 <dons> yeah
15:25:52 <SamB> and it comes out @docs
15:26:00 <dons> ?users
15:26:05 * SamB got that a bit mixed about
15:26:15 <lambdabot> Maximum users seen in #haskell: 256, currently: 220 (85.9%), active: 33 (15.0%)
15:28:33 <bringert> hn: maybe it's the wrong monad
15:28:40 <bringert> good night all
15:49:09 <dibblego> can function names contain both alphanumeric and non-alphanumeric?
15:49:17 <dibblego> e.g. can I create a function x++y ?
15:49:46 <profmakx> how would you distinguish that from operator for list concatenation -.-
15:50:19 <dibblego> well that's what I thought
15:50:37 <dibblego> I take the answer as the suspect "no" then
15:52:42 <dibblego> > let x = Ordering.EQ in x
15:52:43 <lambdabot>  Not in scope: data constructor `Ordering.EQ'
15:52:50 <dibblego> how do you write that?
15:53:37 <twanvl> > let x = EQ in x
15:53:38 <lambdabot>  EQ
15:53:47 <dibblego> oh thanks
16:08:04 <dons> hey, no ghc's out, stick some votes on http://programming.reddit.com/info/lr5w/comments  :)
16:08:07 <dons> s/now/
16:08:07 <lambdabot> Title: GHC 6.6 is out, supporting: SMP concurrency, impredicative polymorphism and more ..., http://tinyurl.com/eg38m
16:08:48 <dibblego> the latest deb package is at 6.4.1 - how old is that?
16:09:08 <dons> 6 months or so. 6.6 was only released today
16:09:33 <dibblego> was there a 6.5?
16:09:41 <dons> that's the development branch
16:09:47 <dons> stable releases are even numbered
16:09:53 <dibblego> ok
16:10:47 <dibblego> someone who lives near me graffiti's their tag as "DONS" at my local train station
16:10:55 <dibblego> thought you should know that :)
16:11:12 <dons> heh
16:11:19 <dons> you should get a photo .. :)
16:11:25 <dibblego> good idea
16:11:36 <dons> or tag it with some lambdas yourself...
16:11:40 <dibblego> lol
16:13:00 <Lemmih> dons: You've got my vote.
16:14:24 <dons> cheers :) hopefuly this can bubble up the news sites
16:14:45 <sjanssen> dons: you forgot Data.ByteString!
16:14:57 <dons> heh true. i'll add some more of the features.
16:17:33 <dolio> Is impredicative polymorphism what fixed runST $?
16:17:34 <sjanssen> do builds for platforms always trickle in like this for new ghc releases?
16:17:49 <dcoutts> sjanssen, yep
16:23:08 <yip> why is sTToIO unsafeSTToIO?
16:23:15 <edwardk> you know you're a geek when you get bored and buy comonad.com =/
16:23:47 <sjanssen> @hoogle stToIO
16:23:48 <lambdabot> Control.Monad.ST.stToIO :: ST RealWorld a -> IO a
16:23:59 <dons> edwardk: you bought it!?
16:24:00 <edwardk> yip: coz ST gives order to a small number of statements, then you usually work with the objects you froze or what have you. turning it into an IO monad creates a whole other thread of execution
16:24:02 <sjanssen> @hoogle unsafeSTToIo
16:24:03 <lambdabot> No matches found
16:24:09 <dons> I was just thinking about monad.org yesterday...
16:24:13 <edwardk> dons: 8 bucks why not =)
16:24:18 <dons> hell yeah!
16:24:38 <sjanssen> who owns monad.org?
16:24:58 <yip> edwardk: but what's unsafe about it/
16:25:18 <edwardk> yip: well, you can make an ST monad out of nothing, then get an IO monad out of it, from thin air.
16:25:33 <dons> you know you use lambdabot too much when: you type ?whois monad.org at the shell prompt
16:25:43 <edwardk> hhehehe
16:26:07 <dons> Sponsoring Registrar:Network Solutions LLC (R63-LROR)
16:26:16 <dons> Admin Email:katzha@monad.org
16:26:19 <dons> boo
16:26:20 <edwardk> the comonad thing was the end of an hour long search for geeky domain names.
16:26:24 <edwardk> i got really bored
16:26:53 <sjanssen> I want a leet Haskell domain
16:26:57 * sjanssen thinks
16:27:16 <dibblego> by the way, my job is now legitimate: http://workingmouse.com/research/
16:27:17 <lambdabot> Title: Workingmouse: Where you find the Java People!
16:27:25 <dons> ok, i put up more links , if you haven't voted on the story itself, http://programming.reddit.com/info/lr5w/comments
16:27:28 <lambdabot> Title: GHC 6.6 is out, supporting: SMP concurrency, impredicative polymorphism and more ..., http://tinyurl.com/eg38m
16:27:39 <edwardk> it started coz i thought 'the abelian group' would be a funny name for a DBA. then found that taken, so looked at every other form of group i could think of ;)
16:28:23 <dons> maybe we should buy monad.org with the soc money. hmm..
16:28:25 <dons> hehe
16:28:39 <dons> i'd hate for the ruby monad guys to get it..
16:28:44 <edwardk> haha
16:28:46 <edwardk> yeah
16:28:58 <dibblego> hell yeah
16:31:30 <sjanssen> hmm, I'm a newb at domain registration.  What's a decent (/cheap) registrar?
16:31:56 <dons> how can we find out how much monad.org is, too? or if its even for sale?
16:32:03 <edwardk> i just go with something like godaddy, i'm sure you can find someone who will chip a buck or two off
16:32:06 <edwardk> its taken at the moment dons
16:32:15 <dons> i'd really love a dons@monad.org address :/
16:32:29 <sjanssen> edwardk: ah yes, godaddy, the one with the hot girl
16:32:50 <astrolabe> On this page http://haskell.org/ghc/docs/6.6/html/users_guide/lang-parallel.html in the defn of nfib, why is it n1+n2+1 rather than n1+n2?
16:32:52 <lambdabot> Title: 7.15. Parallel Haskell, http://tinyurl.com/orx57
16:34:30 <dons> > let nfib n | n <= 1 = 1 | otherwise = n1 + n2 + 1 where n1 = nfib (n-1) ; n2 = nfib (n-2) in nfib 10
16:34:32 <lambdabot>  177
16:34:35 <dons> hmm
16:34:46 <dons> > fix $ \f -> 1 : 1 : zipWith (+) (tail f) f
16:34:48 <lambdabot>  [1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17...
16:35:18 * SamB wants list admins in more timezones
16:35:20 <dons> well, its 'nfib' .... :) not fib
16:35:28 <lispy> hmm...i can't make this type check...
16:35:38 <astrolabe> dons: true.
16:36:49 <lisppaste2> lispy pasted "IO a -> CGI CGIResult how?" at http://paste.lisp.org/display/27803
16:38:07 <dons> Syzygy-: hey congrats on submitting :)
16:39:13 <astrolabe> dons: I think it's a bug in the documentation.  nfib is defined on this page http://groups.google.com/group/comp.lang.lisp/msg/cf59aa05e73a1b13 like normal fib
16:39:15 <lambdabot> Title: Google Groups: comp.lang.lisp, http://tinyurl.com/gx4et
16:39:47 <dons> astrolabe: yeah... I suspect so
16:40:10 <dons> astrolabe: you could submit a doc patch?
16:40:17 <dons> or at least a bug report on trac
16:40:33 <astrolabe> dons: Where do I find out how to do that?
16:40:41 <astrolabe> (the second)
16:40:45 <dons> here, http://www.haskell.org/ghc/docs/latest/html/users_guide/bug-reporting.html
16:40:48 <lambdabot> Title: 1.2. Reporting bugs in GHC, http://tinyurl.com/zpaes
16:40:51 <astrolabe> thanks
16:41:07 <dons> so it'll be fastest if you show the current version, and a corrected version
16:46:20 <dons> wow. both lennart and hudak are arguing for GADT-style data decl syntax. hmm.
16:46:29 <dcoutts> yeah, interesting
16:46:48 <Cale> I like the where-style data syntax
16:46:48 <lambdabot> Cale: You have 1 new message. '/msg lambdabot @messages' to read it.
16:46:50 <Philippa> I actually quite like Doaitse's proposal
16:47:01 <dons> yeah, that looks cute too
16:47:11 <astrolabe> where is this stuff discussed?
16:47:19 <dons> haskell@ mailing lists
16:47:22 <Philippa> it seems more principled than the where-style syntax to me, too
16:47:24 <astrolabe> ta
16:48:03 <Cale> glguy: hmm, odd that wasn't there
16:48:07 <dons> Philippa: and then genalises nicely to guards for dependent data types ;)
16:49:04 <dons> data Vector a len | len < 100 = Vector (Array Int a) -- hehe
16:51:12 <dons> ?remember Sigbjorn The bug reporter may feel the Haskell grammar "succs" here
16:56:59 <astrolabe> I find that trac thing completely unusable
16:57:30 <astrolabe> The 'login' link doesn't do anything for me.
16:57:32 <Igloo> astrolabe: How so?
16:58:18 <Igloo> astrolabe: What happens if you go to http://hackage.haskell.org/trac/ghc/login ?
16:58:41 <astrolabe> Hang on, I'm having more luck using ie :(
16:58:48 <Igloo> What were you using before?
16:58:49 <astrolabe> but thanks
16:58:53 <astrolabe> firefox
16:58:58 <Igloo> Should work fine
16:59:05 <Igloo> e.g. Simon M uses it
16:59:57 * SamB wonders if Google Groups is going to carry the gmane. heirarchy
17:00:13 <dcoutts> Igloo, any word on upgrading to trac 0.10 ?
17:00:25 <Igloo> Haven't heard anything about it for a while
17:00:51 <dcoutts> maybe we should prod JaffaCake
17:01:02 <dcoutts> gtk2hs's trac needs some love
17:01:16 <dcoutts> it currently gives a python exception & traceback
17:01:26 <dcoutts> and prior to that it was suffering with spam
17:01:39 <Igloo> That doesn't sound ideal
17:01:46 <dcoutts> I need the latest version trac so that I can remove the bug spam
17:01:55 <dcoutts> and then get spam filtering working
17:02:25 <arjanoosting> Igloo: Hi, as the BTS is very slow you might not have seen #392381 (new upstream version of Haddock) yet. I have prepared an update of the debian package of haddock for the new upstream version.
17:02:29 <edwardk> So, how fares the hunt for haskelly domains? =)
17:02:36 <dcoutts> and I need to prod JaffaCake to help me set it up so it emails us when bugs are reported or changed
17:02:46 <dons> i like comonad.com, edwardk
17:03:01 <dons> how can i get a dons@comonad.com address? :)
17:03:18 <edwardk> heh, i can now make subdomains =) uniqueness.comonad.com exponential.comonad.com
17:03:19 <edwardk> sure
17:03:28 <dons> heh
17:03:29 <edwardk> i'll just set you one up when i move it to my server
17:03:30 <Igloo> arjanoosting: OK; I'm about to start putting ghc6 together
17:03:33 <dons> identity.comonad.com
17:03:39 <edwardk> heh
17:03:49 <edwardk> relevance.comonad.com
17:03:53 <SamB> I think JaffaCake should appoint a deputy list admin in a fairly distant timezone, too...
17:03:54 <dons> :)
17:04:08 <dons> SamB: ah right. can you clarify, SamB? what's the motivation?
17:04:24 <dons> (I also suspect having admins 12 hours time shifted is very useful -- it has been on irc)
17:04:26 <arjanoosting> Igloo: lets get all the shiny new stuff into etch! :-D
17:04:33 * Lemmih has never before witnessed such levels of geekiness.
17:04:39 <dons> Lemmih: heh!
17:04:41 <SamB> dons: ... so that someone can push through mails from non-list-members while he is sleeping etc.?
17:04:57 <dons> right. it that kind of admining you want.
17:04:59 <dons> and on weekends...
17:05:13 <SamB> hence "etc."
17:05:26 <Igloo> arjanoosting: Doing my best  :-)
17:05:36 <dons> i'm kind of inclined to volunteer to do this, SamB
17:05:54 <dons> being in a useful timezone for this job
17:05:55 <SamB> you are a prime candidate
17:06:01 <SamB> yes exactly ;-)
17:06:19 <dons> SamB: do you want to write to SimonM about this? and CC me? with what we've discussed?
17:06:35 <dcoutts> arjanoosting, Igloo, you'll be lucky if you beat gentoo :-) we're planning to get ghc-6.6 and all the new libs in within days
17:06:48 <dcoutts> and we have to make sure that exiting packages still build with 6.6
17:06:57 <dcoutts> or at least the latest version of each package should do
17:07:07 <dcoutts> so currently wxhaskell is borked on that front
17:08:11 * Igloo is more interested in doing it right than in doing it first  :-þ
17:08:41 <Igloo> dcoutts: Do you use the extralibs tarball, or make oyur own split tarballs, OOI?
17:08:50 <dcoutts> we use the same tarball
17:08:59 <dcoutts> each ebuild just uses that
17:09:09 <dcoutts> so it only gets downloaded once
17:09:15 <Igloo> Ah, OK
17:09:27 <dcoutts> but it is bigger ths first time of course than if we used split ones
17:09:37 <dcoutts> it's not that much of an issue though
17:09:41 <Igloo> Well, it is bigger if you don't build everything
17:09:44 <dcoutts> right
17:10:03 <dcoutts> when they move to independent releases then we'll follow that
17:10:12 <Igloo> *nod*
17:10:38 <edwardk> kleisli.com is open if you wanted something geeky about the same length ;)
17:11:57 <SamB> dons: okay I have a two to four sentance email
17:12:02 <SamB> does that sound long enough?
17:12:28 <dons> its the semantics that matter ;)
17:12:36 <dons> but yeah, should be ok
17:12:42 <SamB> oh, I should mention the IRC stuff
17:13:08 <dons> (e.g. handling trolls on #ghc, you mean?)
17:13:17 <dons> or ?
17:13:21 <SamB> dunno!
17:13:40 <SamB> you are the one who mentioned 12-hour offsets and IRC admins!
17:14:04 <SamB> "He also said something about having admins 12 hours apart having worked nicely on IRC." thats what I'm saying about that.
17:14:06 <dons> oh, i was just thinking about how its been useful to have an offset admin in our irc channels, to handle trolls
17:14:53 <dons> that, or else we send amphetatmines to cambridge to keep them up for longer hours, and increased productivity
17:15:30 <SamB> okay, sent ;-)
17:15:46 <SamB> gmail is so sweet ;-)
17:16:01 <SamB> it already knows your addresses ;-)
17:16:55 <dons> yikes
17:17:00 <dons> really?
17:17:17 <dons> from the lists you're subscribed to?
17:17:22 <SamB> ... yes!
17:17:29 <SamB> it isn't snooping or anything!
17:17:30 <dons> inneresting
17:18:04 <SamB> at least, I assume that is how
17:18:22 <SamB> maybe I have replied to emails both of you have sent to lists, and that is how it knows
17:18:42 <SamB> I don't pretend to have read the helpfiles lately
17:19:03 <dons> thanks for sending the mail
17:19:05 <Igloo> Is this gmail?
17:19:07 <dons> SamB++
17:19:22 <SamB> Igloo: is what gmail?
17:19:30 <Igloo> that knows dons' address
17:19:35 <SamB> yes
17:19:55 <SamB> but it is *my* gmail
17:20:02 <SamB> my sisters' wouldn't
17:20:20 <dons> well...
17:20:21 * SamB is lucky he has two sisters with gmail accounts
17:20:37 <dons> how do you know your sister doesn't already have my email address?
17:20:37 <SamB> (though I only meant to refer to one)
17:20:49 <SamB> well. she doesn't talk about Haskell!
17:22:27 <shapr> My sister doesn't either. My gf does though.
17:23:53 <shapr> On the topic of random geekiness, I heard someone say something stupid about database/search engine queries, and I really wanted to say "That's total BOOLshit!"
17:23:58 <dons> heh
17:30:20 <dons> oh very nice! http://mult.ifario.us/articles/2006/10/11/first-steps-with-haskell-for-web-applications
17:30:25 <lambdabot> http://tinyurl.com/hr5mo
17:30:30 <dons> kick that ruby rails!
17:30:30 * Lemmih wonders if he could persuade shapr to install Hope for him.
17:31:39 <Lemmih> dons: With GHC-6.6, fastcgi can use the multi-threaded api.
17:32:14 * Lemmih runs a multithreaded Haskell webapp on his SMP box.
17:32:23 <dcoutts> yay
17:32:29 <dons> Lemmih: nice!
17:32:35 <shapr> Lemmih: cabal-install will do 90% of the work
17:32:50 <dons> Lemmih: you shoudl add a comment to the effect here, http://programming.reddit.com/info/lr4i/comments  ... :)
17:32:53 <lambdabot> Title: First Steps with Haskell for Web Applications (reddit.com), http://tinyurl.com/pv84r
17:33:14 * SamB turns off all the crazy warning options
17:34:09 <SamB> hmm.
17:34:13 <SamB> doesn't help :-(
17:35:29 <SamB> apparantly Foreign.C.Types has a long list in it.
17:36:53 <ulfdoz> gone
17:37:04 <dcoutts> can HApps to clever http cache stuff?
17:37:10 <dcoutts> ie does it make it easy?
17:37:33 <dcoutts> to make last changed time of the page from the times of various componants of the page
17:38:14 <dcoutts> eg if I have a db query that returns the last change time of each record then the overall page's last change is the max of those
17:39:08 <dcoutts> and does it do gzip transfers yet? and cahce the .gz version for infrequently-changing pages ? :-)
17:39:15 <shapr> I don't know if HAppS has any built-in functionality for doing that, but it'd be quite simple to save the last updated time in your state accessor.
17:39:47 <shapr> I'm thinking about that sort of thing for the HAppS wiki I'm hacking.
17:39:52 <dcoutts> I hear that for dealing with high loads that the http cache stuff is quite important
17:40:07 <dcoutts> eg with lots of people pinging your rss feed all the time
17:41:01 <dcoutts> I guess it means you can offload much of the work to a caching http proxy
17:41:11 <shapr> I know that high end throughput is one of the big goals of HAppS. I also know it's a lot faster than most other web frameworks I've used, even with Read/Show serialization. Binary serialization is an option, but I haven't tried it yet.
17:41:39 <shapr> Actually, HAppS is the fastest thing I've used in years.
17:41:59 <dcoutts> aye, we were talking about binary serialisation via lazy bytestrings in relation to HApps the other day
17:42:16 <shapr> Faster than CGI because it's not loaded everytime, faster than Zope/J2EE because it's smaller than a brontosaurus....
17:42:24 <dcoutts> heh
17:43:19 <shapr> lispy just made a "use ByteString" patch to HaXml 1.13, so that should speed up HAppS even more.
17:43:29 <dcoutts> interesting
17:43:50 <dcoutts> where's that posted? I'd be interested to read the code
17:43:55 <shapr> The one thing HAppS doesn't have yet is a templating language like Zope Page Templates.
17:44:03 <dons>  musasabi really really cranked the performance of the happs webserver (and elsewhere too, I suspect)
17:44:13 <shapr> lispy just sent it to me and malcolm. I can forward it to you if you like.
17:44:23 <SamB> heh. smaller than a brontosaurus...
17:44:23 <dcoutts> shapr, ta
17:44:27 <shapr> Yeah, much credit to musasabi. HAppS is greased lightning.
17:44:45 <shapr> dcoutts: Which address?
17:46:50 <SamB> what is extendCSEnv
17:47:36 <shapr> @google extendCSEnv filetype:hs
17:47:38 <lambdabot> No Result Found.
17:47:50 <SamB> it is wasting a lot of CPU time (in xterm) printing out lists
17:48:09 <shapr> extend console environment?
17:48:14 <SamB> lists that it already said are long
17:48:20 <SamB> it is in GHC
17:48:26 <SamB> but the CPU time is in xterm
17:48:40 <SamB> (because xterm has to display the text that it spits out)
17:49:19 <aFlag> something I don't understand: when should I use a monad? Other than the IO monads, I can't figure out when I would need them
17:50:14 <dylan> aFlag: Reader is good if you don't want to have to thread variables through your program.
17:50:17 <sjanssen> aFlag: There is a monad for all seasons
17:50:48 <aFlag> sjanssen, what do you mean?
17:51:05 <aFlag> dylan, what do you mean by thread variables?
17:51:07 <sjanssen> aFlag: nothing, really
17:51:22 <SamB> aFlag: he's misconstruing proverbs or something in that vicinity
17:51:25 <sjanssen> aFlag: just that there are plenty of monads, each with their own little niche
17:51:56 <dylan> aFlag: instead of passing a lot of arguments to a function, you can use the Reader monad.
17:51:59 <SamB> StateT is good for BF interpreters ;-)
17:52:03 <dolio> aFlag: one way to mimic (local) stateful programming (for example) is to thread variables through functions.
17:52:22 <dolio> A function takes a state variable, and returns a value and a new state.
17:52:52 <dolio> But that pattern can be captured in a monad.
17:52:59 <aFlag> hum
17:53:07 <dolio> The State monad.
17:55:00 <aFlag> I've used the state monad once, not long ago, and I already forgot how it works. The thing is that I didn't actually really understand it, otherwise I wouldn't forget
17:55:53 <dolio> Instead of 'let (a, s') = f s ; (b, s'') = g s' ; ...', you have do { a <- f ; b <- g ; ...}
17:56:38 <aFlag> where s would be the state, right?
17:56:40 <dolio> You'll notice that in the 'let ...' you're setting up dependencies between variables to control the sequencing.
17:56:42 <dolio> Yeah.
17:56:50 <dibblego> what is the opposite of referentially transparent in that some f(x) not only may not evaluate to the same value, but *definitely* evaluates to a value that it has never evaluated to before?
17:56:53 <dolio> f depends on s, g depends on s', etc...
17:57:01 <dolio> So you have to call f before g.
17:57:10 <dolio> But that sort of sequencing and state threading can be captured in a monad.
17:58:36 <aFlag> yeah, I see. The thing is that, I have a strong understanding of when I should use a list, when I should use a stack, a dictionary. But I don't quite have the understanding of where I should use a monad. Is there some material you suggest me to read that will give me that better understanding?
17:59:33 <lispy> aFlag: well, let's take an example
17:59:40 <lispy> aFlag: have you used lookup before?
17:59:42 <lispy> ?type lookup
17:59:43 <lambdabot> forall b a. (Eq a) => a -> [(a, b)] -> Maybe b
17:59:50 <lispy> it returns Maybe b
17:59:54 <lispy> Maybe happens to be a monad
18:00:07 <aFlag> yeah, I've used lookup
18:00:39 <aFlag> why does Maybe need to be a monad?
18:00:40 <lispy> > do { f <- lookup [("+", (+)), ("-", (-))]; return $ f 1 2 }
18:00:41 <lambdabot>    The function `f' is applied to two arguments,
18:00:41 <lambdabot>   but its type `Maybe b'...
18:00:49 <hyraxfourtwo> ?source Data.List
18:00:50 <lambdabot> http://darcs.haskell.org/packages/base/Data/List.hs
18:01:12 <lispy> heh, of course i get a type error when i give an example...
18:01:13 <dolio> Generally the reason you'd use a monad is for the stuff it does besides being a monad. But they all do something different.
18:01:33 <lispy> ah
18:01:41 <lispy> > do { f <- lookup "+" [("+", (+)), ("-", (-))]; return $ f 1 2 }
18:01:42 <SamB> you use a monad because it is more convenient than writing out equivalent non-monadic code
18:01:42 <lambdabot>  Just 3
18:01:49 <lispy> > do { f <- lookup "foo" [("+", (+)), ("-", (-))]; return $ f 1 2 }
18:01:50 <lambdabot>  Nothing
18:02:20 <lispy> aFlag: now, without the monad instance of Maybe can you do that as easily?
18:02:30 <SamB> that is, when are many things to be tracked and you don't want to have to talk about them except where you use them...
18:03:07 <lispy> > case lookup "foo" [("+", (+)), ("-", (-))] of {(Just f) -> f 1 2; Nothing -> Nothing }
18:03:09 <lambdabot>  add an instance declaration for (Num (Maybe a))
18:03:10 <aFlag> lispy, hum, not as easily
18:03:22 <lispy> > case lookup "foo" [("+", (+)), ("-", (-))] of {(Just f) -> Just $ f 1 2; Nothing -> Nothing }
18:03:24 <lambdabot>  Nothing
18:03:49 <lispy> aFlag: right, because the monad has swept some details we don't care about under the rug
18:04:13 <aFlag> so monads are generally good to keep things implicity (implicite?), right?
18:04:15 <lispy> aFlag: i'd say that's the take away lesson..if there are useful details to hide, a monad can help you hide then (often)
18:04:31 <glguy> > ($ 1 2) (+)
18:04:32 <lambdabot>  add an instance declaration for (Num (t -> a))
18:04:36 <glguy> hmm.
18:04:43 <dolio> > 1 2
18:04:44 <lambdabot>  add an instance declaration for (Num (t -> a))
18:04:44 <lambdabot>   In the definition of `rm...
18:04:50 <aFlag> hum, I see
18:04:52 <glguy> > fmap (\f -> 1 2) (Just (+))
18:04:53 <lambdabot>  add an instance declaration for (Num (t -> b))
18:04:53 <lambdabot>   In a lambda abstraction:...
18:04:59 <glguy> > fmap (\f -> f 1 2) (Just (+))
18:05:00 <lambdabot>  Just 3
18:05:05 <aFlag> but is defining you own monads common?
18:05:09 <lispy> aFlag: monads also help you move data around...there are papers on data flow in haskell that talk about arrows and monads
18:05:17 <SamB> somewhat common
18:05:18 <aFlag> s/you/your/
18:05:34 <SamB> probably I'd more often newtype some stack of Ts
18:05:50 <lispy> ?. pl undo do { f <- lookup "foo" [("+", (+)), ("-", (-))]; return $ f 1 2 }
18:05:50 <SamB> (stacked on one other monad)
18:05:51 <lambdabot> flip ($ 1) 2 `fmap` lookup "foo" [("+", (+)), ("-", (-))]
18:06:41 <aFlag> Is haskell the only language that have monads? I never seen them anywhere else
18:06:59 <SamB> not quite
18:07:08 <lispy> aFlag: other languages have them now, whenever you have OO it's pretty easy to add them for example
18:07:12 <SamB> probably the only one with a Monad typeclass...
18:07:12 <dons> there are a few, but none quite so nice
18:07:17 <shapr> aFlag: I collected a bunch of monad implementations in various languages - http://lambda-the-ultimate.org/node/1136
18:07:19 <lambdabot> Title: Collection of links to monad implementations in various languages. | Lambda the  ...
18:10:24 <aFlag> hum, there are monads implemented in all sorts of languages
18:10:30 <shapr> yup
18:10:41 <shapr> It's just an abstraction. Objects are another abstraction.
18:11:10 <glguy> The only thing about Monads that is intrinsic to Haskell is the do-notation sugar
18:11:19 <dcoutts> xerox, btw, do you know if you're comming to .ox?
18:11:31 <dons> i don't know of any language other than haskell with _monad transformers_ though
18:11:33 <aFlag> objects abstraction was a bit easier to understand. Hum, maybe I only think I understand it
18:11:47 <dons> glguy: any thoughts on that?
18:12:13 <dons> (since langs like C++ only barely have Monad Maybe a working..)
18:12:13 <glguy> dons: that Monad Transformers are not implemented publicly in other languages? or that they are intrinsic to Haskell?
18:12:16 <SamB> typeclasses are also instrinsic to Haskell!
18:12:27 <SamB> at least as much as do-notation...
18:12:29 <dons> that there are no monad transformers in other languages?
18:12:40 <glguy> typeclasses are very similar to interfaces
18:12:48 <SamB> but not the same
18:12:52 <dons> so, there's 10 or so languages with some support for at least Monad (Mybe a),
18:12:58 <dons> but any with monad transformer support?
18:13:22 <br1> Is someone working in ghc6.6 for windows?
18:13:23 <shapr> Maybe in Scheme?
18:13:32 <dons> br1: should work out of the box
18:13:41 <dons> sigbjorn's already posted a windows install, I think.
18:13:48 * SamB moves GHC back to where it was before his repo broke
18:13:58 <SamB> maybe then my libraries will be happy...
18:14:23 <br1> dons: where can I find it?
18:14:56 <SamB> its been released?
18:15:08 <Korollary> yes
18:15:19 * SamB wonders if it has shift inlining...
18:15:21 <dons> br1, ah not yet on the website, but here, http://www.haskell.org/pipermail/glasgow-haskell-users/2006-October/011252.html
18:15:24 <lambdabot> Title: ghc-6.6 candidate Win32 installer, http://tinyurl.com/ju482
18:15:34 <dons> (beta)
18:15:46 <dons> expect the full windows install to be available in a day or two
18:16:06 <dcoutts> haddock-0.8 is now available in gentoo portage
18:16:11 <dons> dcoutts++
18:16:19 <SamB> as opposed to what other portage?
18:16:28 <dons> bsd ports? :)
18:16:29 <dcoutts> as opposed to our overlay
18:16:33 <SamB> oh
18:16:43 <glguy> well played ;)
18:16:45 * SamB was going to suggest one near a river or something
18:17:01 <dolio> Hmm, I wonder if 6.6 will be in edgy eft.
18:17:12 <br1> dons: Great!! :D:D:D
18:17:13 <dcoutts> SamB, which has had haddock-0.8 for days now :-) and _rc1 for even longer
18:17:41 <dons> dolio: let's hope so. ghc 6.6 really kicks butt. i think its a bit of a landmark in haskell releases
18:18:00 <dcoutts> we're fixing up our existing packages to work with ghc-6.6 and then we'll add ghc-6.6 and all the new libs to portage too
18:18:01 <dons> smp concurrency, new regex and bytestring libs, impredicative polymorphism, unicode idents!
18:18:22 <dcoutts> mm, we should start playing with the unicode stuff
18:18:24 <glguy> unicode idents?
18:18:25 <dons> and faster code best of all
18:18:25 <dolio> Yeah. It comes out in a couple weeks, though. I don't know what their time frame for including something like that is.
18:18:33 <shapr> yay!
18:18:51 <dons> glguy: http://programming.reddit.com/ (details in the link)
18:18:54 <lambdabot> Title: reddit.com: programming - what&#39;s new online
18:19:21 <dcoutts> dons, can we use unicode operators yet do you know? or is it just idents to start with
18:19:28 <dons> i think so, yes.
18:19:35 <dons> we can use unicode ops, and unicode keywords
18:19:42 <dons> (i've not tested this though)
18:19:43 <dcoutts> keywords?
18:19:55 <dons> yeah, forall and lambda -> use the unicode syms instead
18:20:00 <dons> lambdas for all!
18:20:03 <dcoutts> cool!
18:20:12 <dcoutts> except the Greek programmers
18:20:13 <dcoutts> heh
18:20:20 <dons> just  need to get Exists sugaring.
18:20:20 <sjanssen> I attempted to use a lambda, and it didn't seem to work
18:20:26 <dons> heh
18:20:44 <sjanssen> is there more than one lambda character in Unicode?
18:20:51 <dcoutts> I don't think so
18:21:18 <SamB> sjanssen: sure!
18:21:19 <dons> shapr: did you see the rubyonrails vs fastcgi/ghc blog?
18:21:25 <glguy> λxf x
18:21:31 <glguy> λx. f x
18:21:36 <glguy> what's the hope of writing that?
18:21:53 <dons> maybe we should bundle up happs, fastcgi et al and call it "Haskell on Rockets" or something
18:22:11 <dcoutts> what is rails anyway?
18:22:16 <sjanssen> SamB: do you know which lambda character I'm supposed to use?
18:22:17 <dcoutts> how did they come up with that name?
18:22:26 <SamB> lowercase!
18:22:39 <SamB> without additives
18:22:41 <dons> ?google ruby on rails
18:22:44 <lambdabot> http://www.rubyonrails.org/
18:22:44 <lambdabot> Title: Ruby on Rails
18:23:05 <dons> ?google ruby on rails in haskell lines of code
18:23:09 <lambdabot> http://gregluck.com/blog/archives/2006/07/report_from_osc.html
18:23:09 <lambdabot> Title: Greg Luck's WebLog: Report from OSCON2006: The Ruby Conspiracy
18:23:09 <dons> come on google!
18:23:11 <dons> doh!
18:23:12 <lispy> no, the acronym has to be hoh
18:23:24 <Korollary> haskell on heroine?
18:23:41 <lispy> actually
18:23:44 <lispy> i guess it could he hor
18:23:51 <lispy> we have RoR and SoR
18:23:55 <Korollary> sounds very Las Vegas
18:23:56 <lispy> why not HoR
18:23:59 <dons> heh
18:24:25 <SamB> U+03BB GREEK SMALL LETTER LAMDA
18:24:25 <SamB> UTF-8: ce bb   UTF-16BE: 03bb   Decimal: &#955;
18:24:25 <SamB> λ (Λ)
18:24:26 <dons> HoT would be nice, for some T
18:24:26 <dcoutts> surely it should be Hore
18:24:35 <glguy> Train
18:24:38 <SamB> haskell on types?
18:24:40 <glguy> Haskell on a Train
18:24:45 <lispy> HoG? -- haskell on gertures (i didn't spell that correctly...)
18:24:50 <dcoutts> snakes on a plane?
18:24:51 <dons> Higher Order, Typed. hmm
18:24:58 <dcoutts> HOT!
18:25:07 <glguy> Haskell on Tacos
18:25:11 <dons> mmm.
18:25:14 <lispy> HoH -- haskell on happs
18:25:17 <glguy> Treadmills?
18:25:27 <lispy> HoG -- haskell on gerbils
18:25:28 <dons> Haskell on Time
18:25:28 <Korollary> why does it have to be 'on' something? How about Haskell behind You!, or Haskell under the mat?
18:26:01 <lispy> HbR -- haskell beyond rails?
18:26:02 <sjanssen> so this seems to work: foo :: ∀ t . t -> t
18:26:03 <dcoutts> Haskell on Time and under budget?
18:26:04 <dons> like satan, get behind me?
18:26:09 <SamB> Korollary: under the mat?
18:26:14 <sjanssen> this doesn't: foo = λx -> x
18:26:14 <dons> sjanssen: mm. cool
18:26:20 <dons> sjanssen: with -fglasgow-exts ?
18:26:30 <sjanssen> dons: yeah
18:26:39 <glguy> What is \u2200?
18:26:41 <lispy> HbTD?
18:26:45 <dons> sjanssen: check Lexer.x ?
18:26:47 <lispy> haskell beyond thunder dome?
18:26:56 <dons> yeah
18:26:59 <dons> i likey
18:27:31 <lispy> or make a pun on curry
18:27:40 <lispy> CoR -- Curry on Rice
18:28:16 * lispy waits while MS access takes litterally hours to run a query
18:28:24 <lispy> okay, i should really learn how to deal with joins
18:28:40 * lispy puts an SQL book on his christmas list :)
18:29:16 <glguy> Haskell after Tomorrow
18:29:30 <glguy> yeah... I've got nothing
18:29:32 <lispy> hat is taken :(
18:31:52 <dons> so now we get ghc 6.6 onto the shootout box and start kicking some smp/bytestring/regex butt!
18:32:01 <lispy> ah yeah
18:32:02 <dcoutts> woho!
18:32:06 <glguy> > [id] <*> [()]
18:32:06 <lambdabot>  Not in scope: `<*>'
18:32:14 * lispy is still waiting for ghc6.6 windows release
18:32:15 <glguy> but first we'll need a modern lambdabot
18:32:17 <lispy> i'm too lazy to build it
18:32:21 <glguy> from which to shout from
18:32:33 <shapr> dons: Yeah, that's nice.
18:32:44 <dolio> What was that? Control.Applicative?
18:32:47 <shapr> dons: I'm tempted to send the guy my wiki.hs as a demo of what HAppS can do.
18:32:51 <dons> the new pcre regex should wip off the regexdna benchmark
18:32:59 <sjanssen> it looks like λ is referenced in the lexer, but it still doesn't parse
18:33:00 <glguy> dons: yeah <*> is in Applicative
18:33:01 <dcoutts> dons, did the Oct 10th HWN make it to LWN? I only see the Oct 3rd one in their weekly edition this week.
18:33:02 <dons> and then fasta, knuc et al should be easy with bytestring
18:33:12 <dons> dcoutts: they seem to have posted the wrong date, but the right link
18:33:17 <dcoutts> oh ok
18:33:28 <dons> (note the text is correct, but quoted for some reason)
18:33:35 <dcoutts> oh yes, so it is
18:33:45 <dons> I think they copy/n/pasted just the second half of the mail i sent in
18:34:04 <dolio> <*> is ap?
18:34:51 <glguy> dolio: yeah
18:35:11 <dolio> Hmm...
18:35:41 <glguy> dolio: Applicatives are just Monads without binds
18:36:07 <dolio> Yeah, I read the paper a little back.
18:36:16 <glguy> I probably read the same paper
18:36:26 <dolio> I was thinking about obscure one-liners with <*> instead of ap.
18:36:40 * lispy really wishes access had a way to cancel queries
18:37:05 <lispy> i didn't actually want to run this query yet :(
18:37:15 <glguy> Ctrl+Break?
18:37:36 <lispy> no dice :(
18:37:42 <shapr> C-c ?
18:37:53 <lispy> shapr: windows :(
18:38:30 <glguy> (F6 / ^Z on windows is EOF)
18:38:35 <glguy> that's the one that I know
18:38:59 <dolio> > let (<*>) = ap in (,) <*> (+1) $ 3
18:39:00 <lambdabot>  (3,4)
18:39:44 <lispy> mmm...reader monad
18:39:46 <glguy> I'd like to see the syntax used in the paper implemnted:
18:39:48 <lispy> tasty!
18:39:50 <shapr> I want a one or two char op for <*>
18:39:58 <glguy> iI (/) sum genericLength Ii
18:39:59 <SamB> lispy: sometimes C-c works on windows
18:40:09 <lispy> yeah, i did try it
18:40:12 <SamB> though maybe that was only when running DJGPP programs on 9x or Cygwin programs...
18:40:18 <lispy> but alas, MS access hates me
18:40:23 <shapr> glguy: ah!
18:41:07 <glguy> shapr: ?
18:41:11 <shapr> iI
18:41:13 <shapr> Ii
18:41:29 <shapr> That's what Conor was using before.
18:41:30 <lispy> ii captian
18:41:30 <glguy> shapr: that's what the paper suggested, riht?
18:41:34 <shapr> Yup
18:41:54 <SamB> so Ii is a data constructor
18:42:04 <SamB> and iI is an overloaded function, right?
18:42:09 <glguy> Yeah
18:42:19 <glguy> but I don't know overloaded functions
18:42:31 <SamB> they are in *typeclasses*!
18:42:41 <Pseudonym> Quick question.  Does anyone have a good explanation as to why he calls it "Idiom"?
18:42:51 <Pseudonym> It seems no idiomatic than anything else.
18:42:59 <SamB> to justify the overuse of Is ;-)
18:43:03 <dibblego> ?where irc bot
18:43:03 <lambdabot> I know nothing about irc.
18:43:08 <shapr> hah
18:43:13 <SamB> heh
18:43:18 <glguy> isn't that old news? didn't it switch to Traversable and Applicative?
18:43:25 <dibblego> can lambdabot give me that "Roll your own IRC bot" article?
18:43:26 <SamB> lambdabot doesn't know anything about IRC, just talks on freenode is all
18:43:30 <Pseudonym> Yeah, but I'm asking why he called it that.
18:43:36 <lispy> ?where tutbot
18:43:37 <lambdabot> I know nothing about tutbot.
18:43:41 <Pseudonym> lambdabot will not encourage her possible replacement.
18:43:44 <SamB> Pseudonym: for lack of a better thing?
18:43:58 <dibblego> @google roll your own irc bot
18:44:01 <lambdabot> http://digg.com/software/Roll_your_own_IRC_bot
18:44:01 <lambdabot> Title: digg - Roll your own IRC bot
18:44:07 * Pseudonym shrugs
18:44:08 <Pseudonym> Maybe.
18:44:15 <SamB> come now, surely lambdabot is so superior in every way to tutbots that she fears not replacement by them?
18:44:27 <lambdabot> You're just trying to upgrade to a newer model. I know it.
18:44:48 <SamB> its one of those "they don't make them like they used to" kinds of things, though
18:45:03 <SamB> like hand tools ;-)
18:45:19 <dons> Pseudonym: i have no idea. I think Idiom is just weird
18:45:34 <dons> SamB: heh
18:45:57 <dons> btw, i think if we rewrote lambdabot's core, it'd be a lot cleaner these days. needs a good overhaul
18:46:04 <dons> though then again, she's not too bad
18:46:08 <dons> she's a good sort
18:46:12 <SamB> lambdabot: do you hear that?
18:46:16 <lispy> okay this query takes a ridiculous amount of time
18:46:27 <SamB> dons: if you are going to do that... some sort of IPC might be nice...
18:46:28 * lispy force kills access
18:46:30 <dons> dibblego: you found the article (should be easily findable from haskell.org)
18:46:39 <dons> SamB: yeah that too
18:46:41 <dibblego> dons, yeah I'm just lazy :)
18:46:51 <dibblego> lambdabot fills my lazy needs
18:46:51 <SamB> where the P denotes "plugin"
18:47:25 <dons> ?where+ tutbot http://www.haskell.org/haskellwiki/Roll_your_own_IRC_bot
18:47:25 <lambdabot> Done.
18:47:41 <dons> i note that i stil see guys log on to #tutbot-hacking every day or so to play around :)
18:47:55 <dons> oh, #tutbot-testing i mean
18:51:01 <SamB> hmm, does darcs.haskell.org have 6.6 lying about built somewhere?
18:51:40 <SamB> or installed, for that matter?
18:51:47 <Smokey`> any sql genius' here?
18:52:13 <Pseudonym> Nobody is a SQL genius.  If they say they are, they're lying.
18:52:33 <SamB> hmm, Haskell *isn't* on time
18:52:41 <SamB> GHC 6.6 was supposed to be out by May 2006!
18:52:43 <Smokey`> well, i'll drop the Q anyway.
18:53:02 <Smokey`> just wondering if anyone knows how to do "SELECT * FROM movie WHERE Awards > (SELECT AVG(Awards) FROM movie);" using a single SELECT statement.
18:53:23 <SamB> wouldn't it be more fun to use a combinator library?
18:54:18 <SamB> @where ghc6.6
18:54:18 <lambdabot> I know nothing about ghc6.6.
18:54:22 <SamB> @where 6.6
18:54:22 <lambdabot> I know nothing about 6.6.
18:55:12 <Pseudonym> Smokey`: Ask yourself, as a database implementor, how you'd do that using only one scan through the table.
18:55:21 <jmob> Haskell is plagued by IRC bot wankers?
18:55:31 <SamB> jmob: what?
18:55:33 <Pseudonym> Having said that, there's a nice way to express it in Haskell.
18:55:44 <jmob> :(
18:55:46 <Pseudonym> Using only one traversal.
18:55:46 <SamB> no, dons wrote an IRC bot tutorial
18:55:59 <Pseudonym> Exercise: Do it!~
18:55:59 <jmob> Oh, okay.
18:56:11 <Korollary> Pseudonym: Eh?
18:56:35 <Pseudonym> Korollary: Suppose you have:
18:56:55 <Pseudonym> data Movie = Movie { {- fields -}; awards :: Int }
18:57:23 <Pseudonym> How could you find all Movies in a list with greater than the average number of awards, traversing the list only once?
18:58:00 <sjanssen> Pseudonym: tying the knot?
18:58:00 <Korollary> strict list?
18:58:13 <Pseudonym> sjanssen: Yup.
18:58:20 <Korollary> that's not one traversal
18:58:32 <glguy> let (avg, results) = f avg source -- kind of thing?
18:58:40 <dibblego> given a function name, can lambdabot give me the URL to it in the GHC doc?
18:58:41 <Smokey`> Pseudonym: that's what I don't understand... but according to this marking scheme, i'll get 0 marks if i have more than 1 select statement for each question...
18:58:54 <Smokey`> although I'm curious if sub-queries count as their own select statement or not
18:59:00 <Smokey`> (in the eyes of my tutor)
18:59:01 <Pseudonym> Smokey`: Is there a reason you asked here, BTW?
18:59:12 <sjanssen> this won't have the nice performance characteristics of the classic repmin example
18:59:15 <glguy> Smokey`: select a > avg(a) doesnt work?
18:59:17 <Smokey`> Pseudonym: because no one else seems to be able ot help me, and you're all pretty bright guys :)
18:59:19 <SamB> Pseudonym: because we are super-duper smart programmers, presumably
18:59:23 <Smokey`> glguy: nope.
18:59:31 <SamB> same as that guy who wanted help with his router configurations!
18:59:57 <sjanssen> Smokey`: your teacher probably made a mistake in the assignment.
19:00:01 <Korollary> if you do [x | x <- someList, x < (avg someList)], then evaluating the head of the list will do one traversal. However, evaluating more elements will effectively traverse the list to the end as well.
19:00:16 <Pseudonym> Why don't you ask your tutor?
19:00:16 <sjanssen> happens all the time when profs assign concrete things like this
19:00:20 <Pseudonym> Seriously.
19:00:24 <Pseudonym> That's what they're for.
19:00:42 <Smokey`> Pseudonym: I have, she's not responding to email, and she's lazy in the fact she only has ~3 hours of visiting hours on monday mornings, and that's it.
19:00:44 <Pseudonym> Ask if sub-selects are allowed.
19:00:52 <Pseudonym> Ah.
19:01:01 <Smokey`> whatever, i'll just assume they are... I dont see any other way it can possibly be done
19:01:12 <SamB> Smokey`: probably if she notices everyone using multiple SELECTS she will wonder why...
19:01:47 <Smokey`> thanks for your input guys :)
19:08:54 <emk> Are there any good books on writing compilers in Haskell?
19:09:49 <emk> I'm interested in gritty practical stuff, and will survive a few monads. :-)
19:10:26 <emk> I've read THIH and Scheme in 48 Hours, but don't yet feel ready for the GHC source.
19:11:32 <Cale> The GHC source also has bits in antiquated style (such as use of monads without the Monad typeclass :)
19:11:40 <dcoutts> emk, take a look at yhc
19:11:45 <dcoutts> Cale, is that still true ?
19:11:48 <Cale> I haven't really gotten to looking too closely at it
19:12:14 <Cale> Well, it was true last time I looked, but that was a while back now.
19:12:16 <Igloo> http://research.microsoft.com/~simonpj/Papers/pj-lester-book/ is one if you mean writing Haskell compilers
19:12:18 <lambdabot> Title: Simon Peyton Jones: book, http://tinyurl.com/fsb9s
19:13:02 <lispy> emk: THIH?
19:13:14 <Igloo> dcoutts: grep -r thenM compiler | wc -l == 858
19:13:22 <emk> Typing Haskell in Haskell. Not a compiler, but a nice piece of one.
19:13:36 <lispy> emk: ah, that's on my list of things to eventually read
19:13:44 * lispy notes the list keeps growing
19:14:20 <emk> dcoutts: YHC looks interesting. Thanks!
19:14:55 <dolio> ?google spineless tagless g machine
19:14:57 <lambdabot> http://citeseer.ist.psu.edu/peytonjones92implementing.html
19:15:24 * lispy mumurs about kids stealing his bike light last night and working till after dark tonight without thinking about it...
19:15:25 <emk> Right now, I'm trying to figure the nicest way to annotate my AST with the types produced by type inference. Obviously some sort of AST -> AST function, but I don't know what approach would be nicest.
19:15:48 <lispy> emk: i've heard before that the simplest AST annotations are the best
19:16:19 * lispy flees into the dark
19:17:27 <emk> I feel like there's some good tips and tricks I just don't know. I'm more comfortable writing compilers in Lisp or whatever, because I've seen good examples and worked on several. Understanding the purely functional idioms is rewarding, but a bit challenging. :-)
19:18:31 <foxy> anyone know how to pass '-D's to cpp through c2hs?
19:18:36 <foxy> @where paste
19:18:36 <lambdabot> http://paste.lisp.org/new/haskell
19:19:45 <lisppaste2> foxy pasted "can't get defines to work" at http://paste.lisp.org/display/27808
19:25:55 <edwardk> back
19:26:12 <edwardk> ok. comonad.com is running now. just need to get gmail for domains set up on it
19:26:23 <edwardk> then you can have your email address dons ;)
19:27:10 <dibblego> can't you set email through the DNS provider?
19:29:16 <Cale> Tiddlywiki would be so much cooler if it was actually a wiki.
19:29:34 <edwardk> well, yeah but i had slipwave.info set up to use gmail for domains, and gmail doesn't know to treat comonad.com as the same thing
19:29:51 <edwardk> cale: yeah. i need to find the time to gut and replace that tiddly with something else.
19:30:15 <Botty> Cale - I believe it's been modified/implemented as a real wiki in numerous instances
19:30:45 <aFlag> shapr, I've been looking at a video of a guy explaning msh, and I don't think it has anything to do with monads. It looks like they'll use .net stuff actually, the guy didn't say anything about monads, at least.
19:31:01 <edwardk> yeah. actually the version i have on te server there is database backed, i just don't have anyone but me with write access to it ;)
19:31:02 <shapr> aFlag: the windows shell thingy is also called "monad" though I have no idea why.
19:31:24 <Cale> aFlag: right, it has nothing to do with monads in the Haskell/mathematics sense
19:31:24 <shapr> I think microsoft picks popular terms and uses them. Take XP for example. I meant only eXtreme Programming before they started using.
19:31:28 <aFlag> yeah, I know, I think it's just a name though
19:31:32 <Botty> shapr - was called monad.  Now its called powershell
19:31:53 <shapr> ah, spiffy
19:31:55 <Cale> They might be using the philosophy sense of the word.
19:32:10 <Cale> (or one of them, anyway :)
19:32:51 <Cale> The etymology in each case is completely different. It's accidental that they turn out to be spelled and pronounced the same :)
19:33:39 <edwardk> yeah though, its kind of cool that monads are indivisible atoms of thought and all that ;)
19:33:40 <shapr> I killed mult.ifario.us :-(
19:34:18 <shapr> ah it's back
19:34:45 <aFlag> yeah, monads seem to have a lot of meanings :P
19:35:19 <Pseudonym> However, the more meanings a word gathers, the less useful it is.
19:35:35 <monochrom> such as "well".
19:35:44 <dibblego> two monads are possessed by every male on the planet
19:36:05 <aFlag> does microsoft use haskell somewhere? Because peyton jones is from microsoft, but I've never seen haskell being used in any microsoft stuff
19:36:11 <Pseudonym> Females have wonads.
19:36:46 <Pseudonym> Or wonyds if you're a separatist feminist.
19:36:53 <gmh33__> aFlag: GHC is maintained by the Microsoft Research facility in Cambridge >_>;
19:37:38 <sjanssen> gmh33__: I don't think that's entirely accurate
19:37:39 <monochrom> Robin Milner is also at Microsoft.
19:38:27 <aFlag> yeah, that's where peyton jones work, right? But I've never seen microsoft advertisments about haskell or any microsoft project that actually was made on haskell
19:39:02 <monochrom> Well there is no advertisement for the Hindley-Milner type system either. :)
19:39:07 <Korollary> Some Xbox teams uses F#
19:39:18 <Cale> That's okay, you don't see most of the work Microsoft Research does in MS products.
19:40:51 <gmh33__> languages that come out of random research facilities are cool ! lol
19:42:12 <sjanssen> gmh33__: Haskell doesn't come out of a random research facility
19:42:39 <skew> "Laconic uses the magic of type theory to solve every problem known to man."
19:43:02 <skew> http://laconic.sourceforge.net/demo/
19:43:03 <lambdabot> Title: Laconic demo
19:44:14 <skew> hehe
19:47:24 <monochrom> In what sense of "random" do you mean by "Haskell doesn't come out of a random research facility"?
19:48:25 * dibblego chuckles at the ensuing debate
19:48:44 <dolio> Haskell wasn't invented at Microsoft Research, I think is what he means.
19:49:28 <sjanssen> dolio: exactly
19:49:56 <sjanssen> I suppose Haskell does "come out of" certain research facilities
19:50:15 <dolio> It's the result of a collaboration between people from a bunch of random research facilities, a.k.a. universities.
19:50:33 <dylan> Laconic, hehehe.
19:52:31 <skew> that's such a funny description, but it does look like a fairly neat system
19:53:06 <Botty> (on the laconic page)"The links to the actual web applications will only work if you are running them locally, and also probably only if you are me." hehe
19:54:02 <skew> I particularly like their development philosophy for typeful progams - I have no idea if they actually live up to it
19:54:12 <gmh33__> woo types
19:54:40 <gmh33__> sjanssen: sorry I was refering to smalltalk and Lua
19:55:38 <skew> The plan is that normal application code doesn't have to bother with them, maybe as much as in ML or something, library code writers have to deal with some gnarly things like folds over row types, and very rarely crazy people have to fire up Coq, and prove a few equality schemes to extend the typechecker
19:58:33 <dylan> laconic is the child-of-mind of Smerdyakov. It's actually pretty cool inspite of that.
19:58:59 <skew> but I'm really here because I read "Scrap Your Boilerplate Reloaded" (http://www.informatik.uni-bonn.de/~loeh/SYB0.html), and it is awesome
19:59:03 <lambdabot> http://tinyurl.com/f5jss
19:59:46 <skew> and I'm thinking that perhaps extensible records have some use in the context of this generic programming stuff
20:01:30 <skew> they mentioned somewhere that a transformation might run a few queries for local information, I'm thinking strictness in a compiler or something, and I was thinking that it might be more efficient to decorate the AST with results of analyses rather than continually recomputing
20:03:57 <skew> I'd also been thinking before if there was some way to provide a sharing-preserving map/fold by hanging extra data onto values in memory
20:04:45 <skew> and I realized that having a data type recurse through an extensible record gives you a place to add arbitrary annotations
20:05:33 <skew> and maybe do even more interesting things if you can avoid name collisions by allocating fresh record labels at runtime.
20:27:32 <sislcb> hello
20:28:06 <Korollary> \o/
20:29:15 <albertlee> hello
20:34:30 <chessguy> whassup
20:34:58 <Botty> gah, what I hate about advanced haskell is all the 3 digit operators
20:35:59 <dibblego> wtf is advanced haskell?
20:36:13 <Botty> uh, stuff with 3 digit operators
20:36:21 <Botty> like ^<<
20:36:52 <Botty> okay, so most of them are two digits
20:37:18 <chessguy> except they're not digits
20:37:25 <Botty> yes well
20:37:27 <dibblego> > [1,2,3] ++ [4,5,6]
20:37:28 <lambdabot>  [1,2,3,4,5,6]
20:37:31 <Botty> 3 charachter operators
20:37:33 <dibblego> is that advanced haskell?
20:37:36 <Botty> no
20:37:55 <dibblego> why not?
20:38:13 <Botty> xd <- hold (point2x p0) -< smpl `tag` rx
20:38:15 <Botty> is though
20:39:08 <Botty> because ++ is a well understood operator.  However, I still think that operators and functions should be overloaded
20:39:27 <dolio> They are.
20:39:29 <Botty> true, it weakens the inference engine
20:39:42 <Botty> are they? then I can overload + to add vectors?
20:39:54 <dolio> If you make vectors an instance of Num.
20:39:58 <ThreeQ> instance Num Vector where  a + b = ...
20:40:06 <Botty> oh, sweet
20:40:52 <ThreeQ> or more likely instance Num t => Num (Vector t) where ...
20:41:17 <ThreeQ> since the vector would probably have a type parameter
20:42:17 <Bobstopper> do any other windows users get "invalid argument" when they run getDirectoryContents on "\System Volume Information" ?
20:43:26 <Bobstopper> ah nevermind. It's a bug either in getDirectoryContents or mingw's access C function.
20:54:04 * lispy waves
20:55:03 <Korollary> I wonder whether best buy sells cell phones without a plan.
20:57:13 <lispy> Bobstopper: how do you know there is a bug?
20:58:44 <lispy> Botty: want to see a cool over loading of (+)+
20:58:49 <lispy> er (+) ?
20:59:15 <Bobstopper> lispy: Well, getParameters is saying directories are readable, writeable and searchable when they're not.
20:59:53 <lispy> grr...can't find crap on the wiki...even when iknow it's there
20:59:58 <edwardk> @seen dcoutts
20:59:59 <lambdabot> dcoutts is in #ghc, #gentoo-haskell, #haskell-overflow and #haskell. I last heard dcoutts speak 1h 48m 14s ago.
21:01:17 <lispy> Botty: http://www.haskell.org/hawiki/CodeExamples?action=highlight&value=polynomial#head-c926349e876dca4d1324036fe67a6eb1fe7afb3c
21:01:20 <lambdabot> Title: CodeExamples - The Haskell Wiki, http://tinyurl.com/j8y8r
21:02:23 <lispy> Botty: it turns lists into polynomials
21:09:39 <Bobstopper> lispy: are you using windows atm?
21:10:39 <dons> ?users
21:10:44 <lambdabot> Maximum users seen in #haskell: 256, currently: 210 (82.0%), active: 30 (14.3%)
21:10:54 <lispy> Bobstopper: osx atm
21:11:01 <Bobstopper> ok, thanks.
21:11:09 <lispy> Bobstopper: but i could be convinced to walk over to my windwos machine and poke it :)
21:13:03 <Bobstopper> heheh :) I wanted to test 3 things: you've got a "\System Volume Information" directory which is currently inaccessible to you (ordinarily it's only usable by the "System" user), ghc's getPermissions returns permissions such that it's readable and searchable even though it's not, and getDirectoryContents fails with an "invalid argument" error
21:13:39 <lispy> Bobstopper: whoa slow down :)
21:13:57 <lispy> Bobstopper: i think i only have an admin user on that machine, is that a problem?
21:14:00 <Bobstopper> heheh sorry. I figured I'd best let you know all 3 things at once if you've got to walk over to another machine. Save you extra trips :)
21:14:11 <lispy> oh, not at all
21:14:15 <lispy> i use screen
21:14:30 <Bobstopper> Only if the admin user can access the "\System Volume Information" directory, which I don't think they're supposed to by default
21:14:34 <Bobstopper> oh ok :)
21:15:26 <lispy> plus my mac is an ibook :)
21:15:51 <lispy> so i should type "C:\System Volume Information" into windows explorer as a pre-test?
21:16:10 <Bobstopper> my testing's showing that getPermissions says all directories are readable and searchable despite permissions and getDirectoryContents consequently always fails, though with that seemingly incorrect error
21:16:35 <lispy> C:\System Volume Information is not accessible.  Access i s denied.
21:17:00 <Bobstopper> sweet. That means you've got an appropriate testing environment :)
21:17:13 <lispy> yay!
21:17:16 <lispy> win2k BTW
21:17:28 <Bobstopper> I think that's ok...
21:17:41 <Bobstopper> how's getPermissions and getDirectoryContents
21:17:54 <lispy> what module? System.Win32+
21:18:01 <Bobstopper> System.Directory
21:18:17 <Bobstopper> Ooh... does System.Win32 have a more appropriate implementation of those fns?
21:18:35 <lispy> i would assume, but i haven't checked
21:19:33 <lispy> Permissions {readable = True, writable = True, executable = False, searchable =
21:19:34 <lispy> True}\
21:19:58 <lispy> Permissions {readable = True, writable = True, executable = False, searchable =
21:20:00 <lispy> True}
21:20:01 <lispy> oops
21:20:03 <lispy> *** Exception: C:\System Volume Information: getDirectoryContents: invalid argum
21:20:04 <lispy> ent (Invalid argument)
21:20:36 <Bobstopper> There it is
21:21:11 <Bobstopper> Ok, cool thanks. So I think there's some problem with how ghc (or more likely mingw) derives permissions on windows...
21:21:39 <lispy> hmmm
21:21:52 <lispy> did you look for a windows specific function?
21:22:05 <Bobstopper> I just had a look there. There doesn't seem to be one.
21:22:15 <Bobstopper> Besides, I'm pretty sure System.Directory is meant to be platform independent
21:22:21 <lispy> aight
21:22:35 <Bobstopper> The implementation of getPermissions uses C calls to access(2) directly
21:22:57 <Bobstopper> mingw's access(2) uses asm for the grunt work and I have no idea what it's doing :)
21:23:15 <lispy> if it uses asm it's probably making a system call
21:23:57 <Bobstopper> Probably...
21:23:58 <lispy> well
21:24:05 <lispy> access(2) is probably posix?
21:24:21 <lispy> which means, they may need the cygwin.dll or whatever to emulate posix
21:24:27 <lispy> that could be where the breakdown happens
21:24:59 <Bobstopper> Yeah, I think it's the mingw's posix layer that I'm looking at
21:25:22 <Bobstopper> it's C and assembly so I can't be sure ;)
21:25:40 * lispy nods
21:27:26 <lispy> System.Win32.File doesn't seem to have much about getting permissions
21:27:35 <lispy> i see file attribute and access modes
21:28:30 <Bobstopper> that'd be it
21:29:58 <lispy> unfortunately they return UINT and don't provide a way to convert the UINT -> [Foo]
21:30:09 <lispy> so it makes it hard to use
21:30:27 <Bobstopper> it's just a Word32
21:30:28 <skew> they don't define a Foo?
21:30:41 <lispy> skew: i don't see a Foo
21:30:50 <lispy> but i sure pitty it..
21:30:56 <skew> hmm, 369 patches behind GHC head
21:31:56 <lispy> heh
21:31:56 <lispy> mOVEFILE_DELAY_UNTIL_REBOOT :: MoveFileFlag
21:33:12 <lispy> in 80 years, when computers don't get booted or rebooted someone will send an email to a mail list and say, "Does anyone actually use vertical tabs??"
21:33:36 <monochrom> haha
21:34:46 <sjanssen> @remember lispy in 80 years, when computers don't get booted or rebooted someone will send an email to a mail list and say, "Does anyone actually use vertical tabs??"
21:35:03 <Bobstopper> Ok, well I guess I should look at reimplementing getPermissions using that stuff in System.Win32.File...
21:35:05 <lispy> sjanssen: it's missing the context :)
21:35:05 <dons> hehe
21:35:11 <sjanssen> I'd never heard of a vertical tab until this thread on the mailing list
21:35:12 <dons> no no
21:35:14 <lispy> guess you guys will get it :)
21:35:22 <dons> i'd heard rumours of it, but never seen one
21:35:29 <dons> Pseudonym: seen a vertical tab, old timer?
21:36:10 <sjanssen> what is it even supposed to do
21:36:37 <lispy> i think it was for navigating on main frame consoles and maybe punch cards...
21:36:38 <Bobstopper> take up an ascii position
21:36:44 <lispy> no real idea though
21:36:49 <dons> its not from typewriter days?
21:37:09 <skew> move down a line without resetting? I think that's line feed.
21:37:17 <Bobstopper> it's for tabbing while writing in chinese
21:37:19 <Pseudonym> I think I have seen a vertical tab once.
21:37:31 <Pseudonym> I don't think that was its original purpose, though.
21:37:44 <lispy> oh, is it like page down?
21:37:50 <dons> mmm, this gets interesting. open source rocks. http://programming.reddit.com/info/lr5w/comments
21:37:54 <lambdabot> Title: GHC 6.6 is out, supporting: SMP concurrency, impredicative polymorphism and more ..., http://tinyurl.com/eg38m
21:37:56 <Pseudonym> lispy: Might you be thinking of form feed?
21:38:11 <lispy> Pseudonym: yeah, that's probably it
21:38:14 <dons> dcoutts: so as soon as gentoo has a ghc 6.6 ebuild we can get cracking
21:38:31 <Pseudonym> Russ Allbery notes
21:38:31 <Pseudonym>         The last time I used a vertical tab intentionally and for some
21:38:32 <Pseudonym>         productive purpose was about 1984.
21:38:40 <dons> heh
21:38:42 <Pseudonym> Before my time.
21:38:57 <dons> just
21:39:00 <dons> :P
21:39:06 <lispy> i love the phrasing
21:39:11 <dons> oh, lennart might though?
21:39:13 <Pseudonym> First time I did any Really Serious Computing(tm) was 1988.
21:39:20 <Pseudonym> And it was reel-to-reel magnetic tape.
21:39:21 <lispy> "...intetionally and for some productive purpose..."
21:39:23 <dons> lennart: ever use a vertical tab?
21:39:49 <lispy> i could see that as the start of our constitution
21:40:10 <lispy> followed by, "...but recent years have sullied this document"
21:40:22 <edwardk> dons, get a chance to read your /msg history yet?
21:40:45 <dons> edwardk: getting there.
21:40:51 <dons> organising travel stuff.... bit busy
21:40:55 <edwardk> fair nuff
21:41:03 <lispy> edwardk: you know what would be weird...if your middle name was jason
21:41:13 <edwardk> ?
21:41:29 <edwardk> its allan actually
21:41:31 <lispy> my middle is edward...so if i ever meet an edward with middle jason that will be odd
21:42:08 <lispy> sorry...bit of a non-sequitor :)
21:42:40 <Pseudonym> RFC 657 looks oddly quaint.
21:42:55 <Bobstopper> my brother's name is Jason Edward Cheeseman...
21:43:06 <Donkeybreath> ~~~ Check out www.jpegtown.com for all your FREE image hosting needs ~~~
21:43:18 <lispy> Donkeybreath: thanks
21:43:22 --- mode: ChanServ set +o dons
21:43:27 --- mode: dons set +b *!*n=james@*.hsd1.or.comcast.net
21:43:27 --- kick: Donkeybreath was kicked by dons (dons)
21:43:30 --- mode: ChanServ set -o dons
21:43:32 <dons> i hate spammers
21:43:34 <lispy> hehe
21:43:42 <Pseudonym> Check out haskell.org for all your FREE programming language needs!
21:43:46 <dons> yeah!
21:43:54 * Pseudonym heads off to #scheme...
21:45:01 <lispy> 1. if neither data receiver nor data sender wants to handle the
21:45:01 <lispy>       output vertical tab characters, the data receiver must do it, and
21:45:02 <lispy>       2. if both data receiver and data sender want to handle the output
21:45:02 <lispy>       vertical tab characters, the data sender gets to do it.
21:45:25 <lispy> i like how if no one wants to do it, the receiver still has to do it :)
21:45:47 <sjanssen> lispy: and if both want to do it, the sender gets to
21:45:49 <lispy> if no one wants to do it...maybe you could just skip it...
21:45:55 <sjanssen> receiver gets the shaft
21:45:59 * Pseudonym tosses a VT to lispy
21:46:00 <Pseudonym> You take it.
21:46:00 <lispy> heh
21:46:06 <dibblego> the data sender is female and the data receiver is male - this a recurring theme
21:47:05 <Pseudonym> http://wiki.yak.net/492
21:47:08 <lambdabot> Title: Vertical Tab Uncoiler
21:47:29 <chessguy> now there's a cool-sounding title
21:47:51 <Bobstopper> I can just see a "cult of the vertical tab" being born out of this channel
21:48:06 <lispy> Pseudonym: cute
21:48:52 <lispy> Bobstopper: given my success rate with girls lately a cult is the only thing i'm likely to sire soon
21:49:52 <Pseudonym> (computer science) A control character that causes a computer printer to jump from its current line to another preset line further down the page.
21:50:04 <lispy> preset?
21:50:08 <Pseudonym> Preset.
21:50:32 <chessguy> so...it's a goto? :)
21:50:41 <Pseudonym> Vertical Goto
21:50:49 <sjanssen> Vertical tab considered harmful?
21:50:55 <lispy> we should see what whitespace uses \v for
21:50:57 <Bobstopper> LoL
21:51:04 <lispy> heh
21:52:16 <lispy> hmm..whitespace doesn't seem to use \t
21:52:19 <lispy> er \vs
21:52:30 * lispy gives up and says, "vertical tab"
21:52:38 <skew> dons: you might mention in the hs-plugins INSTALL that tex2page is packaged with mzscheme
21:52:45 <sieni> lispy: o.O?
21:53:01 <lispy> sieni: see for yourself http://compsoc.dur.ac.uk/whitespace/tutorial.php
21:53:06 <lambdabot> Title: Whitespace Tutorial, http://tinyurl.com/hot7z
21:53:41 <sieni> lispy: ahh ok
21:54:03 <dmead> =)
21:55:22 <lispy> heh, i didn't realize whitespace was written in haskell
21:55:23 <lispy> cool!
21:56:10 <lispy> ?seen ecbrady
21:56:11 <lambdabot> I haven't seen ecbrady.
21:56:19 <lispy> ?seen ebrady
21:56:19 <lambdabot> I haven't seen ebrady.
21:56:24 <lispy> hmm
21:56:31 <skew> dons: have you tried building hs-plugins with 6.6?
21:56:31 <lispy> maybe ebrady doesn't fancy #haskell
21:56:57 <dons> skew: it has two porting issues
21:57:07 <dons> which i hope to fix after i get back from the google summit next week
21:57:13 <skew> what are they?
21:57:22 <dmead> google summit?
21:57:24 <weitzman> Very random question, particularly with all of you being academics and non-US-ians, but are there any current or former Amazon.com employees in here?
21:57:26 <dons> the .hi file format changed, so the hs-plugins .hi parser needs tweaking
21:57:28 <skew> I'm hoping to get it built now - how hard?
21:57:31 <dons> and the entire AltData stuff can be tossed out
21:57:33 <dons> (not too hard)
21:57:43 <skew> cool, I was getting syntax errors in there
21:57:52 <dons> yeah, because of Typeable.h right?
21:57:56 <skew> looked like something ugly to do with cpp
21:58:04 <lispy> weitzman: not me, can i ask why you are wondering?
21:58:06 <dons> not too nasty though. Typeable.h just doesn't exist anymore :)
21:58:28 <dons> so we'll have a meaner, smaller hs-plugins as a result: good!
21:58:30 <skew> were you at the hackathon to hear Simon Peyton-Jones saying you should really just use the .hi parser from GHC if you want one?
21:58:42 <dons> oh, no. but i agree :)
21:58:52 <weitzman> lispy: I'm doing that whole interviewing for a real-world job things
21:58:56 <dons> however, hs-plugins does nicely with its .hi parser-light
21:59:08 <dons> (still better than a ghc-api dependency, imo)
21:59:24 <skew> dons: so just use Data.Dynamic and Data.Typeable instead of AltData?
21:59:28 <lispy> weitzman: steve yegge used to work there and has a blog that sometimes mentioned amazon and their hiring style
21:59:31 <sjanssen> speaking of the Hackathon, when do we get videos of that?
21:59:43 <weitzman> lispy: Want to know about the work environment from the perspective of Haskell programmers, who seem to be very good computer scientists on average
21:59:43 <skew> weitzman: I ran into a bunch of them at the Erlang workshop at ICFP
21:59:45 <dons> skew: yep, since it works with dynamically loaded modules now
21:59:57 <weitzman> skew: Yeah, I heard they use Erlang
22:00:07 <dmead> man
22:00:09 <dmead> xgl is pretty
22:00:11 <dmead> !
22:00:19 <skew> dons: that's only true with 6.6, right?
22:00:24 <lispy> weitzman: you'd enjoy parts of yegge's blog then...the older stuff that he wrote when he was still there
22:01:00 <weitzman> lispy: Thanks
22:01:30 <skew> dons: I'm don't see how relying on the fixed behavior is any different from importing ghc-api
22:02:15 <dons> oh, you have smaller binaries by far
22:02:28 <dons> since my .hi file parser is only 3 modules, but ghc-api is 30M
22:02:36 <skew> ah, in Language.hi
22:02:42 <dons> yep
22:02:58 <lispy> so what is ghc-api for?
22:03:09 <lispy> i thought it let you communicate with ghc as it parses
22:03:10 <skew> well, I think it will probably be easier for me to hack in the ghc-api version than to read up on the new format
22:03:11 <dons> well, typechecking? eval? embedded anything?
22:03:28 <dons> skew: sure maybe. or you can wait for me to do it. it's relatively easy, i think
22:03:46 <dons> we could optionally support ghc-api, its probably the way of the future
22:03:52 <lispy> hmm...interesting
22:04:18 <skew> dons: well, ripping out AltData seemed easy enough
22:04:44 <skew> hey, did you just grab the Iface type out of ghc?
22:05:10 <dons> yep
22:05:21 <dons> and what bits of HsSync and friends i cared about
22:05:28 <skew> cool, then the ghc .hi parser should drop in nicely
22:06:10 <dons> it should do, yeah
22:06:23 <skew> are you planning on making the
22:06:31 <skew> AltData stuff conditional on the compiler version?
22:06:34 <lispy> dons: when you're flying to the US are you going over the pacific?
22:06:36 <skew> or just requiring 6.6 from now on?
22:07:10 <dons> i think i'll just leave 1.0 as ghc 6.4. and earlier and 1.1 will be 6.6 only
22:07:14 <lispy> dons: if so, and you see a missile out side your window, could you....i dunno, knock it into the water or something?
22:07:25 <dons> lispy: will do!
22:07:30 <lispy> thanks
22:07:46 <skew> dons: ah, so I might as well send you a patch for ripping out AltData
22:07:51 <dons> just hope the missle defence shield isn't set too jumpy...
22:08:00 <dons> skew: that'd be useful, yeah
22:08:02 <lispy> heh
22:08:19 <skew> and s/hs-source-dir/hs-source-dirs/ in the cabal
22:10:49 <lispy> i wonder if anyone has done a study to see if the rise of qwerty has changed the way people talk (if they are favoring words that are easier to type in qwerty)
22:13:33 <edwardk> heh
22:13:40 <edwardk> i choose project names on that basis. =)
22:13:46 <edwardk> i also choose file extensions.
22:15:39 <lispy> i know unix seems to be qwerty friendly for the most part
22:16:29 <edwardk> for instance, one of my little intermediate languages is all CPSed, and if you look at CPS from a logic perspective everything you do generates bottoms, or absurdities in your logic. CPS reasons from falsehood, so it seemed that the philosophy of 'ex falso quodlibet' which is really a classical logic argument was strangely applicable, so i thought ok, well, i'll call this stage ex falso, and the file extension 'efq'... nope, thats too
22:18:42 <Botty> my pet language is called futhark, the proper pronunciation of fubar
22:18:49 <edwardk> heh
22:20:15 <Botty> turns out to be relatively nice to type.   keys mostly alternate hands, the keys are easy to hit
22:20:34 <Botty> keys are either on the home row or accessed with the index fingers
22:20:43 <edwardk> *nods*
22:21:23 <Botty> so I'll probably just use the name for any language i make that reaches a usable state...
22:21:39 <skew> hmm, -package ghc doesn't work with the ghci from the linux binaries for 6.6
22:22:04 <edwardk> Right now i figure i'll call the language itself nuel, since my type system's logic is really a PTS'd and CPS transformed version of nuel belnap's display logic.
22:22:35 <skew> somehow, after ":set -package ghc" I get a prompt where not even the prelude is loaded
22:24:15 <edwardk> something is definitely askew
22:24:40 <skew> I'd never seen that before, but ":m -Prelude" also work for getting a nearly empty scope
22:28:24 <skew> dons: I mailed you patches to remove AltData and touch up the .cabal
22:33:37 <dons> skew++ thanks!
22:49:08 <Botty> I must say frag is rather well written
22:49:32 <dmead> hehe
22:49:49 <dmead> frag needs multiplayer
22:50:19 <Botty> clear, I mean, I can just imagine what the same program would be like in C++...
22:50:33 <dmead> look at quake =p
22:50:36 <Botty> program->code
22:50:38 <Botty> heh, yeah
22:51:08 <Botty> though this isn't really full quake (I'm not even going to try to compile it - just gonna use some code)
22:51:14 <lispy> oh yeah quake3 source is muddy
22:51:22 <dmead> i used to mod q3
22:51:25 <dmead> its really hackish
22:51:30 <lispy> and they said it pretty clean by comparison...
22:51:36 <dmead> and all about speed, no nice code at all
22:51:41 <Botty> yeah, i can imagine
22:51:52 <Botty> though frag is pretty fast, right?
22:52:00 <weitzman> If I remember correctly, q3 was happy to flood the network with packets
22:52:09 <skew> ByteString seems to do quite well and speed and clean code.
22:52:12 <dmead> i think it's pretty snappy
22:52:32 <skew> I wonder if you could apply rewrite rules as well to a game core?
22:52:32 <lispy> when quake3 came out, for some reason i spent a couple days just cleaning the code up...when i was done i couldn't tell a difference in performance, but al the compiler warnings were gone and i could compile with arbitrary optimazitons from gcc and get a valid binary
22:52:52 <dmead> compile what
22:52:53 <dmead> quake?
22:53:02 <lispy> quake3 source
22:53:04 <dmead> ah
22:53:05 <dmead> yea
22:53:21 <dmead> carmack had some outside help getting the renderer to run efficiently
22:53:32 <lispy> first couple times i compiled it on osx i got invalid binaries because gcc wasn't optimizing broken code correctly
22:53:39 <dmead> weird
22:53:59 <dmead> yea alot of the renderer was written for RTCW
22:54:01 <lispy> well, if you knew to turn off certain optimizations you'd be fine
22:54:09 <dmead> so he had like no memory to work with
22:54:18 <dmead> err
22:54:18 <lispy> RTCW?
22:54:28 <dmead> return to castle wolfenstein
22:54:33 <dmead> but i mean the original
22:54:35 <dmead> *meant
22:57:02 <Botty> >>> are like the manual way of doing the 'do' notation, right? or totally different...
22:57:24 <Botty> because ObjectBehavior.hs is looking rather inelegant
22:57:34 <skew> >> is for monads
22:57:38 <skew> >>> is with arrows
22:58:14 <shapr> >>>> is for n00bs!
22:58:30 <dmead> o0
22:58:53 <shapr> @seen edwinb
22:58:54 <lambdabot> I saw edwinb leaving #haskell 1d 19h 59m 22s ago, and .
22:59:21 <Botty> oh, its probably what yampa looks like without that preprocessor
22:59:35 <shapr> lispy: Edwin Brady is edwinb on #haskell
23:04:16 <lispy> ah!
23:04:20 <lispy> shapr: thanks
23:04:46 <Pseudonym> class N00b n where
23:05:00 <Pseudonym>   (>>>>) :: n a b -> ... -- forget it
23:05:01 <shapr> Pseudonym: Hey, did you get an email from Credit Suisse?
23:05:08 <Pseudonym> Er... no.
23:05:12 <Pseudonym> Should I have?
23:05:16 <shapr> Maybe not yet.
23:05:38 <skew> (>>>>) :: n o o b -> ...
23:06:16 <shapr> They wanted someone to build a financial contracts DSL who had lots of experience with C/C++ and possibly some numerical algorithms clue, so I gave 'em your web address.
23:06:43 <Pseudonym> I know someone better who is looking for work.
23:07:03 <shapr> I figured your experience hacking on Mercury and Itanium database work would make you a much better candidate.
23:07:05 * lispy would do it
23:07:09 <lispy> er wait
23:07:12 <Pseudonym> He knows as much about financial contracts as I do, of course.
23:07:14 <lispy> what country is it?
23:07:17 <lispy> sweden?
23:07:30 <skew> switzerland?
23:07:34 <lispy> ah
23:07:35 <lispy> righ
23:07:45 <lispy> as long as it would get me out of the US ;)
23:07:56 * lispy isn't serious about applying but wishes he was
23:17:44 * dylan moved his $HOME version control system over to darcs.
23:18:15 <dons> hehe. join the club :)
23:18:29 <dylan> well, it made the setup-home script smaller.
23:18:33 <dons> $ cd $HOME
23:18:34 <dons> $ darcs whatsnew -s
23:18:38 <lispy> dylan: congrats
23:18:40 <dons> M ./.w3m/config -2 +2
23:18:46 <dylan> http://odin.hardison.net/darcs/dylan/conf/setup-home
23:18:47 <dons> ah, better record that
23:18:50 <lambdabot> http://tinyurl.com/qjz8o
23:19:19 <dylan> I don't actually keep $HOME in version control... but then, I don't keep dotfiles in $HOME.
23:19:57 <shapr> Yeah, don't we all keep $HOME in darcs?
23:20:24 <dylan> I used to use CVS, then SVN, then SVK, and now darcs.
23:20:26 * lispy does
23:20:27 <dons> yeah, i just live in a big darcs repo these days
23:20:43 <Pseudonym> darcs pull dons
23:20:50 <lispy> although, i've not properly sync'd mine since darcs 1.0.4
23:20:57 <dons> darcs failed:  Not a repository: dons
23:21:05 <lispy> dacs get dots --partial
23:21:11 <lispy> er dons
23:21:11 <skew> shapr: hmm, I keep things like ghc source trees in $HOME
23:21:45 <dons> Copying patch 21 of 21... done!
23:21:45 <dons> Applying patch 21 of 21... done.
23:21:45 <dons> Finished getting.
23:21:51 <dons> yow. no my head hurts
23:21:59 <lispy> i have ~/local-data where i store all my stuff that isn't automatically in my $HOME repository
23:22:03 <lispy> heh
23:22:26 <dons> we should write down these darcs/$HOME techniques one day
23:22:27 <dylan> lispy: Heh, that's what I used to do. I got tired of programs pooping all over the place, so it's all ~/wc/ for checkouts of stuff.
23:22:46 <dons> i have a nice script that syncs my darcs-ified homedir over the network nighlyt, for example
23:22:53 <dylan> I nuke ~/ every few weeks.
23:23:10 <lispy> dons: hmm...
23:23:13 <dons> good idea. is use /tmp and ~/tmp for similar things (depending on the time scale)
23:23:16 <dylan> re-create ~/wc/, and then do a 'dotify'. :)
23:23:26 <lispy> ah yeah, i haze ~/tmp too
23:23:29 <lispy> er have
23:23:48 <dylan> I have a ~/tmp for tmp stuff, and ~/var for other longer-lived crap.
23:24:01 <dylan> and ~/media for huge multimedia files.
23:24:14 <ThreeQ> has anyone seen an implementation of amb in haskell?
23:24:20 <shapr> Yeah, I have ~/music ~/build
23:24:23 <lispy> amb?
23:24:23 <shapr> amb?
23:24:26 <ThreeQ> (using continuations)
23:24:31 <ThreeQ> oh, the lisp thing
23:24:36 <shapr> What's amb?
23:24:41 <ThreeQ> http://www.ccs.neu.edu/home/dorai/t-y-scheme/t-y-scheme-Z-H-16.html
23:24:44 <lambdabot> Title: Teach Yourself Scheme in Fixnum Days, http://tinyurl.com/hyw76
23:24:47 <lispy> ah, see i would keep ~/music and ~/build inside ~/local-data
23:24:50 <skew> ThreeQ: instance Monad []?
23:25:00 <ThreeQ> skew: yeah, I realize that
23:25:04 <lispy> i should probably have a better name since i mean it as non-darcs
23:25:10 <dylan> lispy: I would keep ~/media in ~/var, except I like to nuke ~/var
23:25:19 <skew> ThreeQ: I suppose you could write one on top of Cont if you like
23:25:21 <ThreeQ> but I was wondering if it could be done using the Cont monad like the implementation there
23:25:27 <ThreeQ> the types aren't quite working out though
23:25:30 <lispy> i used to call it non-sync and then have some stuff under there and then finally what i would now call local-data, but it was just too much typing
23:25:41 <lisppaste2> ThreeQ pasted "Amb" at http://paste.lisp.org/display/27810
23:25:42 <albertlee> anyone use eclipse + fp plugin ?
23:25:53 <albertlee> i got some err and cant use it
23:25:54 <lispy> albertlee: not seriously
23:26:11 <lispy> albertlee: maybe your eclipse or jvm is too old, you need java 5
23:26:12 <ThreeQ> ghc says:
23:26:13 <ThreeQ>     Illegal instance declaration for `MonadState (Amb a) Amb'
23:26:14 <ThreeQ>         (the instance types do not agree with the functional dependencies of the class)
23:26:22 <ThreeQ> which is completely greek to me
23:26:27 <dylan> I wonder if I'm the only one that symlinks all his dotfiles.
23:26:36 <albertlee> i use eclipse3.2 on gentoo,
23:26:42 <albertlee> ok, i update my jvm
23:26:50 <dmead> albertlee
23:26:50 <lispy> dylan: i thought about that, and it's what you have to do with, say, monotone
23:26:53 <dmead> ive fooled with it
23:26:54 <skew> ThreeQ: sounds like you are trying to use MonadState somehow
23:27:00 <dmead> it's really not useable yet
23:27:02 <lispy> dylan: but how do i remember to symlink everything i care about?
23:27:10 <dylan> lispy: a script does it.
23:27:16 <albertlee> ha ?
23:27:31 <ThreeQ> i think that's the correct type, though
23:27:36 <dmead> the fp/haskell plugin
23:27:37 <skew> ThreeQ: perhaps using get,gets,set,sets?
23:27:42 <dmead> isn't really up to par yet imo
23:27:42 <ThreeQ> so why it it illegal?
23:27:45 <lispy> albertlee: the author is really helpful, you should email him
23:27:45 <skew> ThreeQ: if you want to use the continuation monad, that's Cont r
23:27:52 <ThreeQ> I'm using state on purpose
23:28:05 <dylan> I also have per-host config files.
23:28:10 <ThreeQ> newtype Amb a = Amb { unAmb :: StateT (Amb a) (Cont a) a }
23:28:21 <pejo> lispy, if it's too much typing, why not just call it data?
23:28:37 * lispy will probably use eclipse more this term now that he's decided on scala as a new language to learn
23:28:41 <dylan> e.g. procmailrc@frey only installs when the first part of the hostname is frey.
23:28:47 <skew> "class Monad m => MonadState s m | m -> s where"
23:29:00 <lispy> pejo: i could, but what was too much was ~/non-sync/not-managed/local-data
23:29:05 <skew> m is supposed to fix the state, so you can't go mentioning 'a' in it
23:29:19 <skew> why are you trying to keep an Amb action as state anyway?
23:29:25 <lispy> pejo: i had non-sync meaning not part of my $HOME repo, and non-sync meaning not in repository...
23:29:28 <ThreeQ> it's the failure continuation
23:30:00 <lispy> pejo: so my simplification was to just lump it all together and call it local-data
23:30:01 <skew> does it take a value?
23:30:21 <pejo> lispy, (and isn't the majority of your home directory ~/local-data?)
23:30:24 <ThreeQ> it's called to backtrack when the program hits an invalid state
23:30:30 <lispy> pejo: no
23:30:34 <skew> if not, it should have a type more like (forall a . Amb a)
23:30:52 <lispy> pejo: pretty much only darcs repositories end up in there...otherwise it's probably data i want to replicate between my $HOME dirs
23:30:57 <ThreeQ> ooh, what does the "forall a ." do?
23:31:11 <lispy> pejo: so, cd ~/local-data; darcs get ... is a really common thing for me to type
23:31:34 <dmead> is there a function i can call from prelude to filter every member of a list over every member of second list?
23:31:52 <lispy> dmead: like intersect but with filtering?
23:31:59 <dmead> aye
23:32:08 <dmead> i have to examine all pairs of two lists
23:32:16 <lispy> dmead: i'd like in Data.List but it doesn't sound familiar
23:32:20 <lispy> ?index Data.List
23:32:21 <lambdabot> bzzt
23:32:25 <lispy> ?doc Data.List
23:32:26 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/base/Data-List.html
23:32:30 <dmead> kk
23:33:02 <ThreeQ> skew: ghc yells at me when I say "instance MonadState (forall a . Amb a) Amb where ..."
23:33:03 <lispy> ?doc Data.ByteString
23:33:03 <lambdabot> Data.ByteString not available
23:34:14 <skew> ThreeQ: yeah, probably, unless you're running something extremely new
23:34:25 <skew> the types are a bit messy with the cont monad
23:34:37 <ThreeQ> apparently :/
23:34:56 <skew> it looks like you can't get callCC to give you a continuation of that type anyway
23:35:09 <skew> you could use Amb (), though
23:35:27 <lispy> ?hoogle callCC
23:35:28 <lambdabot> Control.Monad.Cont.callCC :: MonadCont m => ((a -> m b) -> m a) -> m a
23:35:36 <Patterner> cool. ebuild for 6.6 is out.
23:36:09 <skew> ready to rock the shootout?
23:36:23 <skew> dons: does 6.6 have ByteString with the stream fusion stuff?
23:36:26 * lispy puts on the montage music
23:36:44 <lispy> skew: yeah, i think that's fps-0.8
23:36:58 <skew> dons++ fusion++
23:37:16 <skew> @karma fusion
23:37:16 <lambdabot> fusion has a karma of 0
23:37:23 <skew> @karma+ fusion
23:37:24 <lambdabot> fusion's karma raised to 1.
23:37:29 <lispy> sadly the karma syntax is a bit restrictive
23:37:51 <GomoX> @karma- fusion
23:37:55 <lambdabot> fusion's karma lowered to 0.
23:37:57 <GomoX> HA
23:37:59 <GomoX> take that
23:38:08 <Smokey`> @karma- GomoX
23:38:09 <lambdabot> GomoX's karma lowered to -1.
23:38:12 <lispy> o_O
23:38:14 <Smokey`> naughty GomoX.
23:38:22 <GomoX> it's 3:35 AM here
23:38:24 <GomoX> be nice
23:38:31 <Smokey`> awww :)
23:38:37 <GomoX> @karma+ GomoX
23:38:37 <lambdabot> You can't change your own karma, silly.
23:38:44 <Smokey`> @karma+ GomoX
23:38:45 <lambdabot> GomoX's karma raised to 0.
23:38:49 <GomoX> :D
23:38:50 <Smokey`> there ya go :)
23:38:54 <dmead> @karma dmead
23:38:55 <lambdabot> You have a karma of 0
23:38:57 <dmead> =(
23:39:02 <dmead> @karma dons
23:39:02 <lambdabot> dons has a karma of 78
23:39:05 <GomoX> @karma+ dmead
23:39:05 <lambdabot> dmead's karma raised to 1.
23:39:05 <thou> @karma+ fusion
23:39:05 <lambdabot> fusion's karma raised to 1.
23:39:06 <lispy> whoa
23:39:06 <dmead> ;o
23:39:18 <dmead> cheater =/
23:39:18 <lispy> ?karma
23:39:19 <Pseudonym> @karma karma karma karma karma chameleon
23:39:19 <lambdabot> karma has a karma of 1
23:39:19 <lambdabot> You have a karma of 12
23:39:22 * GomoX writes an IRC script to rise his karma
23:39:26 <GomoX> *raise
23:39:28 <GomoX> ouch
23:39:30 <Smokey`> lol, karma has a karma of 1...
23:39:31 <thou> idempotent silliness
23:39:37 <lispy> ?karma c
23:39:38 <lambdabot> c has a karma of 3
23:39:48 <lispy> ?karma Java
23:39:49 <lambdabot> Java has a karma of -2
23:39:56 <dmead> good =p
23:39:56 <Pseudonym> ?karma GHC
23:39:56 <lambdabot> GHC has a karma of 2
23:40:01 <Smokey`> smart lambdabot.
23:40:05 <dmead> ?karma slashdot
23:40:06 <lambdabot> slashdot has a karma of 0
23:40:10 <lispy> ?karma lambdabot
23:40:11 <lambdabot> lambdabot has a karma of 27
23:40:21 <dmead> @karma- slashdot
23:40:22 <lambdabot> slashdot's karma lowered to -1.
23:40:26 <lispy> heh, lambdabot has more than twice my karma and i thought i was doing good
23:40:32 <Pseudonym> -1, Flamebait
23:40:39 <Smokey`> @karma Smokey`
23:40:39 <lambdabot> You have a karma of 0
23:40:40 <GomoX> well i'm going to sleep now
23:40:47 <Smokey`> awww, where'd the karma dons gave me go :(
23:41:00 <shapr> @users
23:41:04 <GomoX> I don't know why i came in the channel 12 hours ago but thanks for probably having replied to my questions
23:41:05 <dmead> im going to an agile processes conference at my school next week
23:41:05 <lambdabot> Maximum users seen in #haskell: 256, currently: 215 (84.0%), active: 28 (13.0%)
23:41:13 <shapr> @karma Smokey
23:41:13 <lambdabot> Smokey has a karma of 0
23:41:15 <dmead> gonna heckle em and wine about FP
23:41:18 <GomoX> Bye
23:41:21 <thou> night, GomoX
23:41:32 <shapr> bye GomoX
23:41:36 <Korollary> dmead: Isn't that irrelevant? Have fun, tho.
23:41:45 <dmead> =p
23:42:07 <skew> dmead: www.eecs.berkeley.edu/~tah/Publications/extreme_model_checking.pdf
23:43:09 <dmead> cool
23:43:11 <dmead> your paper?
23:43:13 <Smokey`> I need a small, but interesting project... to get myself back into Haskell...
23:43:15 <skew> no
23:43:19 <Smokey`> Haven't touched Haskell much since last semester :(
23:43:36 <dmead> ah
23:43:39 <lispy> Smokey`: what is interestng for you?
23:43:42 <dmead> yea ron jefferies will be at this thing
23:43:45 <skew> you could also point out that you in fact run your typechecker every time you execute the program...
23:43:51 <lispy> Smokey`: you could extend hope or help with lambdaweb
23:44:20 <Smokey`> lispy: anything relating to computer graphics (real time, or offline), or to a lesser extent physical simulations or networking...
23:44:28 <skew> and if Haskell isn't quite as powerful, the calculus of inductive constructions is approximately equal to ZFC
23:44:29 <lispy> Smokey`: make a scene graph library on top of hopengl
23:44:36 <dmead> smokey: write multipler for frag
23:44:40 <dmead> *multiplayer
23:44:57 <Smokey`> lispy: hmm, i'd prefer to write something I haven't already written in C++
23:45:03 <Smokey`> though it's not a bad idea.
23:45:12 <lispy> Smokey`: yeah, it could be lazy and functional
23:45:23 <Botty> but scene graphs are so much more fun when they're functional
23:45:27 <lispy> and then you dump it into some renderScene :: Graph -> IO ()
23:45:54 <flux__> smokey`, there's your chance to do it better the second (nth) time, while getting a hang of the language ;)
23:46:19 <Smokey`> thinking more along the lines of a haskell implementation of one of my rendering libraries, using ray tracing... but i've no idea how to export symbols from haskell binaries...
23:46:33 <skew> foreign export
23:47:38 <Smokey`> would be nice to see how much performance I can squeeze out of haskell...  comapre haskell/c++ implementations of say, path tracing, or bi-directional path tracing.
23:48:15 <Botty> has anyone ever done raytracing+voxels? could be fun...
23:48:31 <lispy> voxels i dunno, but a ray tracer yes
23:48:34 <Smokey`> would also be a good excersize to familiarize myself with the lower-level modules of haskell...
23:48:38 <dmead> i messed with it in ogre3d
23:48:39 <lispy> i've seen at least two nice ons in hsakell
23:49:20 <flux__> smokey`, you could write haskell bindings for that physics library porrasturvat uses (I can't recall its name..) if they don't already exist, and do something fun with it
23:49:22 <Smokey`> Botty: I've done a bit of work in relation to volume rendering w/ both ray tracing, and real time rasterization...
23:49:24 <Botty> problem with ray tracing and voxels is you don't get good normals, so all the reflections suck
23:49:30 <Botty> oh, sweet
23:50:04 <dmead> i still say multiplayer for frag is a better idea =p
23:50:13 <lispy> Smokey`: image magik for haskell would be nice
23:50:31 <Smokey`> hmmm, soo many possabilities :)
23:50:32 <lispy> Smokey`: whether by C bindings or native implmentation
23:50:45 <Botty> can't wait till computers are good enough to use volumetric stuff for both graphics and physics and maintain decent fps
23:51:00 <flux__> lispy, hmm.. what would be native implementation? imagemagick-lookalike?
23:51:07 <lispy> flux__: ya
23:51:20 <Botty> then again, that'd be one rediculous computer.  I hope at some point people realize they don't actually need new computers for mundane tasks
23:51:22 <flux__> lispy, I'd say that would be very, very much work
23:51:42 <flux__> the ocaml bindings for imagemagick seemed nice
23:51:48 <lispy> flux__: ya, which is why using the C bindings makes good sense really :)
23:51:55 <Pseudonym> The problem is that when computers get to that stage, rendering/simulation algorithms will have moved on.
23:52:10 <Pseudonym> At the moment, we can render Luxo, Jr in real time, but nobody wants to watch it.
23:52:15 <skew> Botty: course they do, or at least they would if we were writing good software - http://research.microsoft.com/~horvitz/
23:52:16 <lambdabot> Title: Eric Horvitz's Homepage
23:52:24 <Pseudonym> Blinn's Law applies.
23:53:13 <skew> Botty: it should be possible to put arbitrary amounts of spare power to guessing what people might want to do, and being ready to do it
23:53:35 <flux__> I saw a few days ago a very nice looking set of water/gas simulation videos on youtube or something
23:53:40 <Botty> skew - true
23:53:40 <flux__> too bad I can't find the url now
23:53:47 <lispy> Smokey`: also, a gtk based photo browser/album for managing lots of images of high resolution with exif support could be cool...i have a photographer/programmer friend who was doing that in java but got sick of a java :)
23:54:03 <Smokey`> haha :)
23:54:06 <Botty> well, maybe not.  pretty hard to write such software, and it'd likely be disturbing to use
23:54:34 <lispy> Smokey`: he had it mostly working, but since he does java/C# at his day job i think he got sick of hacking on it
23:54:55 <skew> flux__: http://www.cs.utexas.edu/~okan/Pixie/gallery/index.htm ?
23:54:59 <lambdabot> Title: Pixie Gallery, http://tinyurl.com/loxzx
23:55:21 <Botty> Pseudonym: heh, i dunno, at a certain point we might have stuff that is just good enough, and all effort will go into enabling bigger and more elaborate worlds
23:55:38 <flux__> skew, that wasn't it..
23:55:57 <skew> well, if you look at the bottom of the page there are links to lots of cool fluid dynamics things
23:56:16 <Botty> I like how those raytracing shots are randomly fuzzy
23:56:24 <Botty> surprising how much that adds
23:56:27 <flux__> I've gotta get to work and check out my web browser history
23:56:47 <lispy> flux__: good reason to go to work
23:56:49 <flux__> :-)
23:57:00 <lispy> Smokey`: oh, write a purely haskell window manager
23:57:06 <dmead> that
23:57:08 <dmead> that'd be hot
23:57:17 <Smokey`> lispy: for linux?
23:57:18 <flux__> with plugin-support, obviously
23:57:20 <dmead> will it not respond until it absolutely has to?
23:57:22 <lispy> Smokey`: sure
23:57:26 <dmead> =p
23:57:29 <lispy> heh
23:57:59 <Pseudonym> Botty: Blinn's Law states that audience expectation grows at the same rate as Moore's Law.
23:58:01 <Botty> holy crap! those flames are hot!
23:58:03 <lispy> Smokey`: ask dons about the minimal wm he uses, based your haskell code on it wouldn't be a bad idea if you don't have the foggiest about how to write a wm
23:58:27 <Smokey`> lispy: haha, you read my mind. :)  Was just about to say I wouldn't know where to start.
23:58:51 <lispy> he found some wm in C that is only like 12kloc of code
23:58:59 <Smokey`> sweet
23:59:00 <dmead> external function calls to Xlibs
23:59:02 <lispy> the author makes a point of keeping it clean and small
23:59:03 <dmead> make a box
23:59:03 <dmead> etc
23:59:13 <dmead> or use a toolkit in C
23:59:18 <flux__> uh.. 12kloc for a minimal wm..
23:59:20 <Botty> Pseudonym - you can't tell between photo-realistic and something theoretically better than that
23:59:29 <flux__> smokey`, you should be able to do much better than that :)
23:59:32 <Smokey`> dmead: lol, I was more refering to how to tell x11 what to render. :P
23:59:36 <lispy> flux__: well, and it has all the functionallity you'd expect
23:59:41 <Pseudonym> Botty: Sorry, what is this "photo-realistic" of which you speak?
23:59:52 <dmead> yea
23:59:54 <Pseudonym> Do you mean a photo?
23:59:57 <dmead> xlibs maghn
