00:00:04 <dcoutts__> they have weekly stuff from many languages
00:03:23 <dcoutts__> http://lwn.net/op/FAQ.lwn#contact
00:03:24 <lambdabot> Title: LWN: The LWN.net FAQ
00:03:42 <dcoutts__> dons: looks like you just send to lwn@lwn.net
00:04:10 <dons> yeah, CosmicRay had some process set up to send to them.
00:04:15 <dons> i'll check what he wrote me about it
00:04:59 <dcoutts__> ok
00:07:53 <dcoutts__> dons: for comparison:
00:07:55 <dcoutts__> http://lwn.net/Articles/161717/
00:07:58 <lambdabot> Title: LWN: Haskell Weekly News
00:08:00 <dcoutts__> http://lwn.net/Articles/161112/
00:08:02 <lambdabot> Title: LWN: Caml Weekly News
00:08:57 <dons> so there's kind of sucks?
00:09:00 <dons> and ours is missing :)
00:10:12 <Bourbaki> moin
00:11:26 <defcon8> guten morgen
00:11:44 <weitzman> @babel en de Greetings and salutations
00:11:46 <lambdabot>  Grüße und Begrüßungen
00:12:53 <weitzman> Is lambdabot messing up the unicode there, or it my IRC client?
00:13:18 <dons> looks fine to me -- latin-1?
00:13:22 <weitzman> Hmm
00:13:26 <weitzman> I'm seeing ??s
00:13:41 <weitzman> "Gr??e ..."
00:13:42 <lispy> wilx: try it on irc
00:13:44 <lispy> er
00:13:48 <lispy> weitzman: try it on the web
00:13:54 <weitzman> Some I'm going to blame GTK and/or gaim
00:13:57 <lispy> weitzman: http://lambdabot.codersbase.com/ i get the special characters
00:13:58 <lambdabot> Title: Lambdabot Web Interface
00:14:38 * lispy &
00:15:01 * weitzman exited (-1)
00:30:14 <dcoutts__> dons: great HWN edition.
00:30:27 <dcoutts__> really interesting CUFP report
00:32:23 <dons> cheers
00:32:41 <dons> yeah, thank rjmh for that :)
00:33:01 <dons> i'd like to try to get some icfp coverage for next week
00:33:41 <vincenz> Wow, continuations seem to be the new hot thing
00:34:00 <dons> vincenz: do you have a reddit account? :)
00:34:13 <vincenz> dons: erm, no why?
00:34:14 * dons look for someone to pimp hwn to the masses
00:34:59 <vincenz> lemme reg
00:35:01 <dons> isn't one of the ways to get to the top of reddit to mention 'haskell'? well, i have a link that mention haskell 17 times ... :)
00:35:20 <dolio> New?
00:35:38 <vincenz> dons: I have a reddit account
00:35:47 <dons> hot off the press. http://sequence.complete.org/hwn/20060927
00:36:09 <dons> dolio: does that seem like reddit material?
00:36:12 <Bourbaki> hidiho dons
00:36:23 <dons> i'm a little unsure, but seems to be roughly from what i've been following on reddit.
00:36:29 <dons> hey Bourbaki
00:37:01 <Bourbaki> dons did you send a mail yet?
00:37:05 <dolio> If people can post "I'm a computer scientist, not your tech support," I think it'd be fine.
00:37:11 <dons> heh
00:37:24 <vincenz> dons: submitted :)
00:37:26 <dons> Bourbaki: not yet. i'll see if i can now. just let me grab some lunch
00:37:29 <dons> vincenz++
00:37:46 <dons> so this will be a little experiement in viral marketing, i suppose
00:37:51 <Bourbaki> of course
00:38:12 <dons> vincenz: ah I see we've hit the front page :)
00:38:24 <vincenz> dons: I quoted you :)
00:38:27 <vincenz> check comment
00:38:38 <vincenz> erm, not quoted you, I mean I appended your name
00:38:42 <vincenz> Hope that's ok
00:38:53 <vincenz> This is the weekly magazine of Haskell and its surrounding community. It is maintained by Don Stewart (irc: dons)
00:39:17 <dons> that's fine.
00:39:42 <dons> now, if 'simple unix tools' got to #1, could this also?
00:39:46 <skew> I've solved the selector thing.
00:40:05 <skew> It seems to work iff I build with -ddump-simpl
00:40:16 <dons> skew? hmm!
00:40:27 <dons> skew you mean -ddump-simpl _makes it work_ ?
00:40:30 <skew> hmm, perhaps my 6.5 build is wierd
00:40:31 <skew> yes!
00:40:37 <dons> scary
00:40:40 <skew> I built with that to check that it was making selector thunks
00:41:26 <skew> and then it worked. I just mailed the list
00:41:38 <skew> at least about a successful run
00:44:20 <dons> vincenz: ok, up to #10 now. good...
00:44:42 <dons> now #9
00:45:45 <dons> #8
00:45:52 <dons> this is fun!
00:45:57 <vincenz> how does that ranking work?
00:46:12 <dons> i think a combination of 'clicks' and 'points'
00:46:24 <skew> never mind, looks like it's just totally nondeterministic whether a build works
00:46:29 <ThreeQ> something about the rate of change of the score
00:46:37 <dons> yeah
00:46:42 <vincenz> that doesn't make sense
00:46:45 <vincenz> it's been stuck at '2 points'
00:46:53 <dons> so we've got 2 points in 5 minutes or so
00:46:59 <dons> wihch is a good rate, I suppose.
00:47:07 <vincenz> yeah but how could it go UP after that?
00:47:14 <dons> clicks, I reckon
00:47:20 <ThreeQ> or maybe the ones above it got voted down
00:47:26 <dons> ah yes.
00:47:33 <vincenz> increase the points ppl!
00:47:40 <dons> heh
00:47:47 <vincenz> this is such a karma-whoring game
00:48:02 <dons> yes
00:48:10 <vincenz> Q: What do people use to organize their notes and todos?
00:48:14 <dolio> Heh, you linked to the C++ lambda article.
00:48:16 <dons> but you can get _voted down_ if it sucks
00:48:18 <dons> so its kind of fair
00:48:43 <dons> vincenz: I use 'devtodo', but also tuomo's riot is good
00:49:01 <dons> http://swapoff.org/DevTodo/
00:49:03 <lambdabot> Title: Dev Todo - SwapOff.org - Trac
00:49:07 <dons> little command line stack
00:49:12 <vegai> when I submitted happs, it got 30 points fairly quickly
00:49:22 <vegai> thanks to many of you, I suppose :)
00:49:33 <dons> heh maybe (?)
00:49:36 <vincenz> dons: do you use del.icio.us?
00:49:59 <dons> nope
00:50:05 <dons> i read it occasionally from rss though
00:50:30 <vincenz> TMI ...
00:50:57 <dons> Too Much Information?
00:52:55 <vegai> http://lukeplant.me.uk/blog.php?id=1107301645
00:52:57 <vincenz> yeah
00:52:58 <lambdabot> Title: Why learning Haskell/Python makes you a worse programmer
00:53:11 <dons> ah, its a quiet time of the day, isn't it? europe just waking up, and the us asleep
00:53:18 <vincenz> dons: 10am
00:53:23 <vegai> summary: Learning Haskell makes other languages suck by comparison.
00:53:33 <dons> vegai: yeah, it went around a bit here recently
00:53:39 <ThreeQ> we aren't asleep quite yet... it's only 1 AM :)
00:53:41 <dons> there's some funny replies on planet.haskell.org
00:54:04 <dons> there's probably some optimal time of the day to post to reddit
00:55:11 <skew> the winning ICFP team used some Haskell?
00:55:18 <dons> yep.
00:55:26 <skew> I recall them claiming that 2D was their language of choice
00:55:31 <dons> they did, yes.
00:55:46 <skew> seems like everybody used a little bit of a lot of languages
00:55:52 <dons> 2D being the one of the puzzle languages in their contest
00:56:19 <dons> i reckon so. it was a multifaceted contest, so using different tools makes sense
00:56:48 <dons> vincenz: #7 ...
00:57:56 <dons> dolio: "Heh, you linked to the C++ lambda article" why'd you mention that?
00:57:59 <dons> funny?
00:58:55 <dolio> I just think it's funny linking to an article about ugly, harder-to-use C++ lambda expressions in a Haskell newsletter.
00:59:02 <dons> yeah, me too :)
00:59:14 <dons> I was originaly going to title it "Count your blessings.. "
00:59:25 <dolio> Heh. Indeed.
01:09:09 <vincenz> dons: \o/
01:10:54 <sieni> yeah, the following piece of code was in FC++: http://www.hurmio.org/~ville/template.html
01:11:31 <scsibug> hah, I think I just went blind
01:11:38 <dolio> Wow.
01:12:14 <sieni> scsibug: sorry about that ;-)
01:13:02 <scsibug> I'm working on a presentation to my management about ICFP, I'll recover soon hopefully
01:13:51 <vincenz> dons: #8
01:14:59 <dons> ah interesting.
01:15:02 <gour> vincenz: tomboy?
01:15:06 <vincenz> gour: que?
01:15:06 <int-e> sieni: thanks for reminding me how awful C++ really is ;)
01:15:36 <ThreeQ> would it be possible to make a "Mod" type in haskell such that the type system would enforce that you could only add/multiply/whatever two values that had the same modulo base?
01:15:46 <dons> yeah
01:15:48 <vincenz> gour: can you refine your question into one with more information?
01:15:51 <dons> a bit tricky, but yes.
01:16:01 <skew> hmm?
01:16:04 <dons> ThreeQ: there's some stuff on the haskel wiki, under 'smart constructors' and 'type arithmetic' on this
01:16:05 <vincenz> dons: just use Succ types?
01:16:12 <skew> if you are making a mod type I don't think it's very hard at all
01:16:23 <int-e> vincenz: I want to work in base 1036817267391871 :)
01:16:25 <vincenz> newtype Succ a = Succ a
01:16:32 <skew> getting it to automatically work for any exponents and so on is a bit toughter
01:16:36 <dons> so using a Mod type, and oleg's decimal type rep
01:16:38 <gour> vincenz: http://www.beatniksoftware.com/tomboy
01:16:42 <lambdabot> Title: Tomboy : Simple note taking
01:16:55 <bringert> is there a basic version of Simon Marlow's Haskell Web Server online somewhere? I hacked the version from fptoll enough enough to compile, see http://www.cs.chalmers.se/~bringert/darcs/hws/
01:16:59 <lambdabot> Title: Index of /~bringert/darcs/hws, http://tinyurl.com/krpu9
01:17:06 <dons> vincenz: ah, we got 1 down vote.
01:17:06 <int-e> vincenz: so a binary or similar representation would be better. :)
01:17:07 <vincenz> gour: I want more fluff
01:17:11 <skew> if you just want one base you can define something like newtype Mod3 = Mod3 Integer, and define your own num instance
01:17:16 <int-e> @uptime
01:17:16 <dons> 3 up, 1 dn
01:17:17 <bringert> but I'm guessing someone might have done that already
01:17:17 <lambdabot> uptime: 2d 5h 53m 32s, longest uptime: 2d 8h 20m 7s
01:17:25 <vincenz> int-e: how?
01:17:26 <ThreeQ> skew: yeah, the idea is that I'd like to do that for any base
01:17:45 <vincenz> newtype Zero a = Zero a
01:17:48 <vincenz> newtype One a = One a
01:17:49 <int-e> vincenz: data Zero = Zero; newtype B0 t = B0 t; newtype B1 t = B1 t
01:17:59 <vincenz> Zero One Zero One Zero One Zero One ()
01:17:59 <int-e> vincenz: is what I used
01:18:12 <skew> ThreeQ: ah, then you need to do a little bit to get the bases right
01:18:32 <vincenz> int-e: why not a decimal system?
01:18:51 <gour> vincenz: tomboy is too heavy?
01:18:55 <int-e> vincenz: because I didn't mean to encode the values manually
01:19:09 <skew> like class TypeNum n where asInteger :: n -> Integer; instance TypeNum Zero where asInteger _ = 0; instance TypeNum n => TypeNum (Succ n) where asInteger ~(Succ x) = 1+asInteger x
01:19:45 <ThreeQ> how would you get the value hidden in the type at runtime?
01:20:03 <ThreeQ> oh wait, it appears you've just answered that
01:20:16 <vincenz> gour: Well I want other kinds of features, basically I want a way to manage my emails, weblinks, pdfs, papers, notes, etc, with tags, in a easy to do way
01:20:23 <int-e> vincenz: http://int-e.home.tlink.de/haskell/Ring.hs is that code
01:20:26 <vincenz> preferably with a lot of nice fluff
01:20:34 <skew> and then make newtype Mod n = Mod Integer, and have instance TypeNum n => Num (Mod n), using asInteger (undefined :: n) for the base everywhere
01:20:34 <vincenz> fluff ala DabbleDB
01:20:40 <int-e> vincenz: which actually defines the decimal digit 3 just to prove a point.
01:20:58 <vincenz> right
01:21:16 <skew> Num already doesn't let you mix different types, so it's just a question of getting the modular number types
01:21:33 <ThreeQ> ah
01:22:04 <ThreeQ> haskell should let you use values in your types
01:22:04 <skew> and it's only a bit of a trick if you want to get a whole bunch of them
01:22:10 <skew> that's called Epigram
01:22:18 <gour> vincenz: http://zoidberg.student.utwente.nl/zim/index.shtml
01:22:21 <lambdabot> Title: Zim - a desktop wiki, http://tinyurl.com/rzbpu
01:22:27 <int-e> That code is also not answering ThreeQ's question, it does something different, though related.
01:22:28 <ThreeQ> C++ also lets you do that unless I'm mistaken
01:22:55 <skew> and we'll all start using it just as soon as they figure out how to let in general recursion without spoiling everything
01:23:06 <vincenz> gour: still lacks a lot of fluff
01:23:06 <ThreeQ> heh
01:23:12 <skew> no, C++ lets you use integral values in types
01:23:25 <ThreeQ> right, that's what I mean
01:23:30 <int-e> as template arguments, yes.
01:23:34 <skew> that's a very special case
01:23:35 <ThreeQ> I guess it's not really arbitrary values though
01:23:38 <int-e> (in function templates, too)
01:24:20 <skew> one fun thing with real dependent types is data Inverse f (f a) = InverseIs a
01:25:28 <gour> vincenz: (didn't try it) http://basket.kde.org/
01:25:32 <lambdabot> Title: BasKet for KDE: Home
01:25:39 <vincenz> dons: crap, it dropped off the chart
01:26:08 <vincenz> gour: interesting
01:26:14 <gour> vincenz: or http://hnb.sourceforge.net/
01:26:16 <lambdabot> Title: hnb - www
01:26:22 <vincenz> gour: basket seems very interesting
01:26:53 <vincenz> gour: hmm, the second one less so.
01:26:57 <vincenz> gour: either way, I'm against hierarchical
01:27:07 <gour> vincenz: :-)
01:27:07 <vincenz> hierarchy is what is currently bottlenecking me
01:27:18 <vincenz> every paper, email, todo, etc
01:27:24 <vincenz> can be categorized under different orthogonal tags
01:27:45 * gour recally old InfoCentral from WP corp.
01:27:49 <dons> vincenz: huh. that sucks
01:28:22 <dons> 3 dn votes and 3 up
01:28:40 <dons> (I notice that a HWN from a couple of weeks ago got 18 pts overal)
01:29:23 <dons> vincenz: well, we've had 75 page reads so far. that's a lot for 1 hour into a hwn edition
01:29:51 <dons> vincenz: maybe we need a more of a attention grabbing headline next time
01:30:09 <vincenz> dons: yeah
01:30:21 <vincenz> dons: "Sexy 24 year old seeks programming geek"
01:30:38 <vincenz> gour: basket looks very nice :)
01:31:04 <gour> vincenz: i'm glad. being on gnome, tomboy is ok for me (with evo)
01:31:21 <vincenz> gour: I use tb not evo
01:31:42 <gour> vincenz: i'm mostly staying away from mozilla stuff :-)
01:31:43 <vincenz> gour: I use gnome too, so not sure how well basket will work
01:31:46 <vincenz> gour: why's that?
01:31:55 <vincenz> evolution was seriously slow for me:/
01:32:24 <gour> vincenz: i don't like ui (widgets); evo is getting better
01:33:03 <gour> recently i also  tried latest sylpheed-claws, it's interesting
01:33:32 <dons> vincenz: where's it ranked now? or has it disappeared?
01:34:02 <vincenz> dons: no idea
01:34:35 <Igloo> dons: What are these points?
01:34:37 <vincenz> WTF
01:34:40 <vincenz> dons: someone reposted it
01:34:43 <Igloo> Or votes, rather
01:34:48 <vincenz> oh no, that's last weeks
01:34:52 <vincenz> dons: 0 points
01:35:04 <dons> maybe we can get some locals to up mod it a bit .... http://programming.reddit.com/info/jzfr/details
01:35:07 <lambdabot> Title: Haskell Weekly News of September 27, 2006 (reddit.com), http://tinyurl.com/jw22o
01:35:38 <dons> Igloo: just trying an experiment with posting the HWN to programming.reddit.com
01:35:45 <dons> (good way to get a few thousand readers)
01:35:46 <vincenz> dons: how do you get that details view?
01:35:58 <dons> oh, i had it open from when it was stil on the front page
01:36:12 <vincenz> yeah but clicking on the link sends you to the page, doesn't show stats
01:36:25 <dons> clicking on 'comments' sends you to the stats
01:36:36 <vincenz> ah
01:36:58 <vincenz> 3 up votes, 3 down votes
01:37:00 <dons> if we can just get one person here to up mod it ... :)
01:37:08 <vincenz> people, vote!
01:37:11 <dons> it might end up back on the front page (I'm guessing)
01:37:15 <dons> http://programming.reddit.com/info/jzfr/details
01:37:18 <lambdabot> Title: Haskell Weekly News of September 27, 2006 (reddit.com), http://tinyurl.com/jw22o
01:38:57 <vincenz> 11
01:38:58 <scsibug> voted ;)
01:39:07 <vincenz> scsibug++
01:39:18 <vincenz> lambdabot karma for reddit karma :)
01:39:19 <dcoutts__> ugg, does that mean I have to sign up?
01:39:23 <vincenz> talk about karma pimping
01:39:30 <vincenz> dcoutts__: it's hassle free, don't even need email
01:39:50 <vincenz> click on register and you're in (which makes me wonder about bots)
01:39:59 <dons> dcoutts__: you just click and register a name. that's it.
01:40:10 <dcoutts__> perhaps we can automate it via lambdabot
01:40:14 <dons> vincenz: #7 ...
01:40:16 <dons> :)
01:40:18 <dons> well done guys!
01:40:20 <dcoutts__> @redit register <nick>
01:40:21 <lambdabot> ParseFailed (SrcLoc {srcFilename = "<unknown>", srcLine = 1, srcColumn = 16}) "Parse error"
01:40:33 <dcoutts__> @redit vote HWN++
01:40:33 <vincenz> dcoutts__: two 'd's
01:40:34 <lambdabot> ParseFailed (SrcLoc {srcFilename = "<unknown>", srcLine = 1, srcColumn = 11}) "Parse error"
01:40:37 <dons> possibly, dcoutts__. hmm.
01:40:57 <dons> 6/3 now :)
01:40:58 <dcoutts__>  @reddit ballot-stuff
01:41:16 <gour> vincenz: i've also started using http://www.gcstar.org/
01:41:18 <lambdabot> Title: GCstar, personal collections manager
01:41:22 <dcoutts__>  @reddit ballot-stuff <how many times would you like to vote today?>
01:41:51 <vincenz> gour: not quite it :/
01:41:58 <dcoutts__>  @reddit pimp HWN
01:42:08 <vincenz> gour: I think basket comes closest, though I fear that it lacks many things, and well, it's got a big dependency on KDE
01:42:17 <dons> i don't think you can vote more than once.
01:44:12 <dcoutts__> dons: no, not with one nick :-)
01:44:43 <vincenz> woot #4
01:45:26 <dons> yay
01:45:30 <dons> dcoutts__: heh
01:46:09 <dons> up to 97 reads now. good.
01:46:24 <dons> usually hwn articles on sequence get around 300-400 all up
01:46:34 <dons> so we'll see if this changes things
01:47:25 <vincenz> dons: register lambdabot on reddit
01:47:29 <vincenz> dons: and automate posting HWN
01:47:32 <vincenz> weekly
01:51:27 <Bourbaki> dons do you still have my email addy?
01:52:19 <gour> vincenz: btw, do you use beagle?
01:52:49 <vincenz> gour: don't know it
01:52:58 <vincenz> gour: In the end I opted for tomboy for note-taking, it'll do for now
01:53:05 * vincenz is trying to get a bit more organized
01:53:09 <vincenz> I forget -a lot-
01:53:18 <vincenz> and paper based doesn't allow idea-refactoring
01:53:36 <gour> vincenz: http://beagle-project.org/Main_Page
01:53:37 <lambdabot> Title: Main Page - Beagle
01:53:49 <vegai> Hmm, have you people seen HV3? http://tkhtml.tcl.tk/hv3.html
01:53:51 <lambdabot> Title: Html Viewer 3 - Tkhtml test application
01:53:58 <vincenz> gour: oooh, nice
01:54:03 <vegai> wouldn't that be a nice basis for a Haskell web browser?
01:54:35 * gour wonders how could vincenz lived wuthout beagle...
01:55:01 <skew> audreyt: ping
01:56:21 <dons> #2 !
01:56:27 <dons> Bourbaki: yep.
02:00:22 <vincenz> gour: I don't get how to launch beagle
02:01:06 <gour> vincenz: put 'beagled' in startup
02:01:34 <gour> vincenz: which distro?
02:01:37 <vincenz> gour: shouldn't install do that?
02:01:39 <vincenz> gour: ubuntu
02:01:53 <vincenz> it's got a plugin for the system menu, allows me to choose a key.... but pressing that key does nada
02:02:08 <gour> vincenz: http://beagle-project.org/Starting_Beagle_Daemon
02:02:11 <lambdabot> http://tinyurl.com/kz36w
02:02:50 <gour> vincenz: on gentoo i've app under Accessories - Search
02:05:26 <gour> vincenz: maybe the key is used by some other apps. i have beagle on my panel
02:07:31 <vincenz> ah, found it :)
02:07:45 <dons> #1  :D
02:07:59 <vincenz> gour: when until all my data is indexed?
02:08:16 <vegai> dons: how long till the first accusation of "reddit Haskell conspiracy" or some such
02:08:33 <dolio> "Is Haskell hype the new Erlang hype?" :)
02:08:35 <dons> hehe
02:09:11 <vegai> is it just me or are you also not seeing the points of that submission?
02:09:12 <dons> still, only 8 votes. there are articles in there with 100s, so we'll see how this lasts
02:09:16 <gour> vincenz: no, afaik, beagle uses some 'peaceful' periods to index. do you have Search in some menu to start searching?
02:09:16 <dons> yeah. me too.
02:09:22 <dons> maybe they don't show them for the first little while?
02:09:35 <vegai> ah, perhaps.
02:09:44 <vincenz> gour: I have search, but it doesn't search any of my pdfs
02:09:50 * vincenz has 6GB of pdfs and ps's
02:10:06 <vincenz> heh
02:10:09 <vincenz> it's still not finding a lot of stuff
02:10:24 <gour> vincenz: have you read http://beagle-project.org/Indexing_Data
02:10:25 <lambdabot> Title: Indexing Data - Beagle
02:10:45 <vegai> although I just submitted something 20 minutes ago, and it already has the points showing.
02:10:53 <vincenz> gour: they're all in my home dir
02:11:12 <gour> vincenz: have you started with export BEAGLE_EXERCISE_THE_DOG=1
02:11:45 <vincenz> gour: nope
02:11:50 <dons> ah, its actually #2. seems to hide some articles?
02:12:31 <gour> vincenz: try again to get quick startup
02:12:47 <vincenz> gour: done
02:12:53 <vincenz> gour: still ... 7GB of data o.O
02:14:37 <gour> vincenz: wait, wait..
02:15:22 <matthew-_> would the mentioned "erlang hype" be the hype of about 2 months ago?
02:15:40 <dolio> It wasn't quite that long ago.
02:15:46 <dolio> 2 - 3 weeks maybe.
02:16:10 <dolio> Apparently people had been posting a bunch of Erlang-related stuff to reddit.
02:16:24 <matthew-_> oh ok. well that's cool, I saw that happen via the erlang mailing lists and then have started working in haskell just in time for the haskell hype!
02:16:26 <dolio> So someone posted a question like, "Is Erlang hype the new Ruby hype."
02:16:42 <matthew-_> yeah, there were a few aggressive self-promoting erlang bloggers
02:17:00 <dolio> Which I found amusing, since the "hype" was, as far as I could tell, entirely contained within reddit, and almost nowhere else.
02:17:37 <matthew-_> yup. Though what qualifies as "anywhere else"?
02:17:56 <dolio> Slashdot, for one. They have plenty of Ruby on Rails articles.
02:18:13 <matthew-_> meh, that's a spam/troll house...
02:18:14 <dolio> Or, had when it was becoming the hotness not too long ago.
02:19:39 <dolio> Ruby gets coverage in other places, I read from time to time, too.
02:19:47 <dolio> Like the KDE developer blogs.
02:20:01 <dolio> Little talk of Erlang there.
02:20:05 <matthew-_> right, so on yesterday's discussion of haskell-based wikis, take a firefox-based gander at http://hikij.wellquite.org/
02:24:50 <NamelessOne> phew... My mind was twisted by java for a whole morning. Have to rely on Haskell to keep my sanity...
02:32:09 <gour> vincenz: how is you hound dog performing?
02:32:53 <roconnor> It's the little things about software that really pisses me off.
02:33:15 <roconnor> like when I ask for a printout to scale to be 4 inches wide and perserving aspect ratio.
02:33:36 <roconnor> and the softare rounds the height to 5 inches.  that's not preserving aspect ratio folks!
02:33:40 * roconnor grrrr
02:34:44 <roconnor> stupid integers
02:41:52 <vincenz> gour: no ideas
02:42:13 <gour> vincenz: i mean do you find your docs?
02:43:52 <vincenz> yep
02:43:56 <vincenz> it's slowly growing in output :)
02:46:09 <gour> good
02:51:23 <araujo> morning
02:53:56 * araujo notices philip uses 'unit' instead of 'return' for the respective monadic operator
02:54:11 <Bourbaki> can anyone roughly explain to me how djinn works?
02:55:32 <kosmikus> boliver__: ping
03:05:36 <ProfTeggy> Hi Andres.  How are things?
03:10:14 <kosmikus> ProfTeggy: good. I'm still in the process of adjusting back to European time after ICFP, but I have lots of interesting ideas to work on :)
03:10:23 <kosmikus> ProfTeggy: and you?
03:11:43 <dcoutts__> @tell yip the darcs version of gtk2hs should now build with ghc 6.6, you'll need to unrecord your patch first or you'll get conflicts.
03:11:43 <lambdabot> Consider it noted.
03:12:33 <dcoutts__> @tell int-e I finally reviewed your final gtk2hs/ghc-6.6 patch and comitted something pretty similar. Thanks!
03:12:33 <lambdabot> Consider it noted.
09:44:14 <x3m> i mean is it anything like ghci parsing or just a framwork to construct own parsing?
09:44:45 <xerox> It's .ly in fact O_o
09:44:47 <xerox> http://darcs.haskell.org/packages/haskell-src/Language/Haskell/Parser.ly
09:44:51 <lambdabot> http://tinyurl.com/nl4n8
09:47:42 <vegai> was Freespire using Haskell for something?
09:57:48 <shapr> vegai: Yeah, shell script & utilities replacement.
09:57:54 <shapr> y0 SyntaxNinja
10:43:48 <Bourbaki> moin
10:52:13 <astrolabe> hi
10:54:27 <Bourbaki> hidiho astrolabe
11:11:48 * shapr boings
11:11:58 * ValarQ snurrar
11:12:12 <xerox> I've just provoked, on purpose, a SIGBUS in a C program, using a TYPECAST!!!
11:12:24 <xerox> (Sounds like @yow, doesn't it?)
11:12:28 <ValarQ> @karma+ xerox
11:12:29 <lambdabot> xerox's karma raised to 22.
11:12:40 <xerox> You should do it, it's relaxing.
11:13:08 <Philippa> xerox: 'grats, what'd you do?
11:14:19 <xerox> Philippa: I did just to see the SIDE effect. I'm getting excited. I've escaped the GHC cage! Muhahahah!
11:14:22 <xerox> (Save me.)
11:14:44 <Philippa> I can't do that any more, we can't replay the side-effects to get to your current state
11:15:18 <xerox> Anyway, it was fun, doing it on purpose, it doesn't happen often (ever.) in Haskell.
11:16:19 <xerox> Trying to get things right without static guarantees is challenging.
11:17:07 <marcot> Hello there.
11:17:08 <xerox> It feels like leaving the nest for the first flight, but with a deja-vu sensation.
11:17:24 <marcot> In HaskellDB how can I separate one part of the result of a query?
11:17:30 <shapr> project it?
11:17:37 * shapr uses a project to show vacation pix
11:17:44 <shapr> um projector*
11:17:51 <shapr> That's what I get for not sleeping last night.
11:18:07 <xerox> 0_o
11:18:33 <shapr> It's 13:07 here and I've been awake since 11:00 yesterday.
11:18:55 * shapr boings his way through the HAppS tutorial
11:19:24 <marcot> I used project in the query, but outside it, I want to get just the value in one field.
11:19:44 <shapr> What's the type of project?
11:20:08 <marcot> The query returns:
11:20:18 <marcot>     [R.Record
11:20:18 <marcot>      (R.RecCons A.Urban_object P.String
11:20:18 <marcot>       (R.RecCons A.Initial_time T.CalendarTime R.RecNil))]
11:22:16 <marcot> How can I get the String of Urban_object in the first field?
11:24:25 <shapr> Can you pattern match on it?
11:24:32 <shapr> There's probably a more sensible approach, I just don't know it.
11:24:54 <marcot> I just want to get the result of my query to a String or a [String] variable.
11:25:22 <marcot> Because it's going to return just one field, cause I'm restricting by the primary key.
11:27:01 <vincenz> \o/
11:27:07 <vincenz> plt-scheme people are really nice
11:28:04 <shapr> I didn't get to meet Adam Chlipala at Haskell Workshop.
11:28:26 <vincenz> shapr: smerdy?
11:28:34 <shapr> yup
11:28:53 <shapr> I wanted to see if his in-person social skills were different from his IRC interactions.
11:29:06 <vincenz> shapr: damn he doesn't look at evil as he sounds on irc
11:29:10 <vincenz> shapr: his website has a picture now
11:29:19 <Lemmih> shapr: How was he?
11:29:22 <shapr> It's always had a pic.
11:29:27 <vincenz> shapr: erm no
11:29:56 <shapr> vincenz: http://www.schizomaniac.net/
11:29:58 <lambdabot> Title: Adam Chlipala
11:30:26 <vincenz> shapr: dunno, I had seen his berkeley page before, picless
11:30:29 <Philippa> I suspect in person he picks up on when to STFU quicker, if nothing else
11:31:07 <Lemmih> Ah, you /didn't/ meet him. I must be tired.
11:31:13 <shapr> No, I didn't. I did want to.
11:31:42 <vincenz> Lemmih: you were at ICFP?
11:31:52 <shapr> No, he got sick.
11:31:54 <Lemmih> vincenz: Alas, no.
11:31:56 <vincenz> oy :/
11:32:08 <vincenz> Lemmih: btw, who sponsors you for that?
11:32:11 <SyntaxNinja> Lemmih: we missed you!
11:32:24 <vincenz> Yeah, no lazy bottoms representative!
11:32:52 <Lemmih> vincenz: My family took the heavy load.
11:33:15 <vincenz> that's cool :)
11:35:51 <marcot> shapr: Hum, I find out here, I should give just the first record to ! .
11:36:02 <shapr> ok
11:36:22 <marcot> But now I have a more strange error. In the code I have two lines almost the same:
11:36:31 <marcot>     (old_table R.! A.urban_object) Q..==. (old_attribute R.! A.urban_object)
11:36:31 <marcot>     Q..&&.
11:36:31 <marcot>     (old_table R.! A.initial_time) Q..==. (old_attribute R.! A.initial_time)
11:36:34 <marcot> ?paste
11:36:35 <lambdabot> http://paste.lisp.org/new/haskell
11:36:57 <vincenz> Lemmih: how strong is your typeclass fu?
11:37:12 <lisppaste2> marcot pasted "Compilation error" at http://paste.lisp.org/display/26923
11:37:30 <Lemmih> vincenz: Somewhat strong.
11:37:43 <vincenz> Lemmih: I was hoping to find a way to generically define 'holes' in data-structures
11:37:53 <marcot> And it's giving error only in CalendarTime and not in String.
11:38:23 <vincenz> not sure if it is possible
11:38:54 <Lemmih> You could ask Oleg.
11:39:06 <vincenz> Lemmih: did you see minikanren?
11:39:21 <Lemmih> vincenz: Nope.
11:39:39 <vincenz> Basically it works on unification.  Now if you look at any type-inference engine, it uses unification as well.  But typically it's customly defined for the specific data-structure representing the type
11:39:46 <vincenz> It would be cool if we could somehow define 'holes' in a datastructure
11:39:51 <vincenz> that can then be filled with variables
11:39:53 <vincenz> to be unified
11:40:01 <vincenz> so we could make a generic unifier
11:41:17 <marcot> shapr: any idea?
11:42:11 <marcot> Can't I use ! in types with RecCons without Expr ?
11:44:04 <marcot> But it's strange, cause with String it reported no error.
11:50:27 <smax> hyi
11:50:28 <smax> hi
11:52:52 <roconnor> smax: hi!
11:53:19 <smax> is haskell easy to grasp if i know C,  or should i learn lisp first
11:53:38 <roconnor> I wouldn't bother with lisp.
11:53:43 <Philippa> learning lisp first won't really help you get haskell
11:53:49 <Philippa> all the hard bits aren't in lisp
11:54:52 <glguy> I'd bother learning LISP, but not because it will make Haskell easier
11:57:38 <therp> smax: learning lisp doesn't help much with haskell, I think
11:59:07 <ventonegro> smax: I come from a C/C++ background
11:59:18 <ventonegro> it hurts the head a little
11:59:35 <kpreid> smax: you should learn both.
11:59:48 <ventonegro> but haskell is so cool it's worth the pain
12:00:20 <ventonegro> maybe knowing Lua helped a little
12:03:37 <vincenz> glguy: specifically scheme, that's a great lisp :)
12:09:37 <lisppaste2> JakeS pasted "Buggy Code" at http://paste.lisp.org/display/26927
12:09:56 <JakesS> Can some one please have a look at that code
12:10:13 <JakesS> I keep getting a "must be an expression"
12:10:20 <JakesS> even when i return an expression
12:10:35 <JakesS> What am I doing wrong?
12:10:50 <Cale> JakesS: Mod-X eh?
12:11:02 <Cale> Or was that what it was called?
12:11:05 <JakesS> lol
12:11:07 <Cale> something like that :)
12:11:18 <JakesS> i guess u have a lot of people coming in here with this
12:11:22 <JakesS> yup mod-x
12:11:28 <kpreid> JakesS: code4 and code5 are misindented.
12:11:33 <JakesS> Haskell is simply too much for me
12:11:43 <JakesS> hmmm i thought i indented it right
12:11:50 <Cale> It's easier to just run the code in your head than to try to get that parser working
12:11:56 <Cale> It's only a validator anyway
12:12:02 <Cale> it won't generate strings which pass
12:12:22 <kpreid> JakesS: if it looks right, make sure that you don't have tabs in your source
12:12:49 <Cale> also, it's purposefully obfuscated
12:12:51 <JakesS> i guessed it is a validator
12:13:07 <JakesS> I thought I got some code to pass the file as an input
12:13:08 <Cale> > sum [product [1..4], product [2..4], 1]
12:13:16 <lambdabot>  49
12:13:38 <JakesS> damn can someone just explain to me what is happening here
12:13:54 <kpreid> JakesS: I just did.
12:14:05 <JakesS> give me assembly any day this lang just needs too differnt a way of looking at things
12:14:11 <Cale> It might help to read the documentation for Parsec
12:14:21 <Cale> which is a similar parsing library to the one which they're using
12:14:52 <JakesS> kpreid: thanks
12:14:54 <Cale> You'll never get that code to compile without an additional library, and I forget which one it was :)
12:15:09 <JakesS> lol lucky me
12:15:10 <Cale> http://www.cs.uu.nl/~daan/download/parsec/parsec.html
12:15:14 <lambdabot> http://tinyurl.com/syalv
12:15:22 <JakesS> cale: have u tried out mod-x?
12:15:52 <Cale> JakesS: I solved a few of the puzzles and then got bored.
12:16:40 <JakesS> u should try it
12:16:50 <JakesS> it gets much better after level 4
12:18:23 <lisppaste2> JakeS pasted "Completed Code" at http://paste.lisp.org/display/26928
12:18:37 <JakesS> hey is that the same as the one i am trying to build?
12:18:45 <roconnor> @karma+ lisppaste2
12:18:45 <lambdabot> lisppaste2's karma raised to 1.
12:19:14 <Cale> JakesS: looks related
12:19:15 <vincenz> LOL: http://xkcd.com/c163.html
12:19:17 <lambdabot> Title: xkcd - A webcomic of romance, sarcasm, math, and language - By Randall Munroe
12:19:34 <Cale> vincenz: hahaha
12:20:08 <roconnor> vincenz: that is pretty funny
12:21:54 <ValarQ> that strip keeps popping up here :)
12:22:09 <Cale> yeah, most of them are really good
12:23:02 <fasta> vincenz: you found someone with a sense of humour. How nice
12:23:23 <vincenz> fasta: what?
12:23:36 <Cale> http://xkcd.com/c156.html
12:23:38 <lambdabot> Title: xkcd - A webcomic of romance, sarcasm, math, and language - By Randall Munroe
12:23:39 <fasta> vincenz: that's long for "hahahaha"
12:23:54 <vincenz> Cale: c++..
12:24:02 <Cale> yeah
12:24:10 <vincenz> http://xkcd.com/c149.html
12:24:11 <lambdabot> Title: xkcd - A webcomic of romance, sarcasm, math, and language - By Randall Munroe
12:24:12 <vincenz> BWAHAHA
12:24:15 <fasta> vincenz: I found it funny that someone used Java and LISP next to eachother.
12:24:24 <fasta> (on the mailing lists)
12:24:25 <vincenz> "simon sez"?
12:24:33 <vincenz> fasta: which mailing lists?
12:24:39 <fasta> Clearly that person doesn't know what LISP is.
12:24:46 <fasta> vincenz: haskell-cafe
12:24:56 <vincenz> fasta: link?
12:25:40 <fasta> vincenz: http://groups.google.nl/group/fa.haskell/browse_thread/thread/e5c25e9977f5ff59/11cae5cbe032e911?lnk=st&q=5gl+haskell&rnum=1#11cae5cbe032e911
12:25:43 <lambdabot> Title: Google Discussiegroepen: fa.haskell, http://tinyurl.com/ksp42
12:26:12 <Cale> That thread should have died a long time ago now
12:26:12 <fasta> Assume that you do not have them: then your programs would look
12:26:13 <fasta> as verbose as Java or LISP programs.
12:26:19 <fasta> Cale: right
12:26:41 <fasta> People that don't program come up with those meaningless comparisons.
12:27:04 <fasta> It's like asking whether one ice cream is better than another to somebody else.
12:27:42 <vincenz> this one is SO geeky: http://xkcd.com/c138.html
12:27:43 <lambdabot> Title: xkcd - A webcomic of romance, sarcasm, math, and language - By Randall Munroe
12:28:29 <fasta> I wish the had those cartoons in the paper I read everyday :)
12:29:39 <fasta> s/the/I
12:30:18 <Cale> http://xkcd.com/c135.html
12:30:20 <lambdabot> Title: xkcd - A webcomic of romance, sarcasm, math, and language - By Randall Munroe
12:31:52 <vincenz> http://xkcd.com/c120.html
12:31:53 <lambdabot> Title: xkcd - A webcomic of romance, sarcasm, math, and language - By Randall Munroe
12:32:39 <vincenz> http://xkcd.com/c117.html
12:32:40 <lambdabot> Title: xkcd - A webcomic of romance, sarcasm, math, and language - By Randall Munroe
12:32:42 <vincenz> ok enough of my spam
12:32:49 <Cale> http://xkcd.com/c114.html
12:32:50 <lambdabot> Title: xkcd - A webcomic of romance, sarcasm, math, and language - By Randall Munroe
12:33:05 <vincenz> Cale: ooh, that one is famous :)
12:34:35 <vincenz> tune in to #oasis for more sensational spma
12:36:07 <xerox> Cale: how was your code to generate the list of every possible string of a given alphabet?
12:36:50 <vincenz> xerox: oh that is easy
12:36:55 <fasta> xerox: f x = repeat (head x)
12:37:06 <xerox> O_o
12:37:12 <vincenz> no
12:37:32 <fasta> Oh, yes. An algorithm does not exists that solves that.
12:37:54 <vincenz> > let f alpha = fix (\x -> alpha ++ sequence ([x, alpha])) in f [1..5]
12:37:55 <lambdabot>    Occurs check: cannot construct the infinite type: a = [a]
12:37:55 <lambdabot>    Expected...
12:38:13 <xerox> It was a `sequence something' IIRC.
12:38:17 <vincenz> > let f alpha = fix (\x -> alpha ++ (concat $ sequence ([x, alpha]))) in f (map return [1..5])
12:38:18 <lambdabot>  add an instance declaration for (Show (m a))
12:38:34 <vincenz> > let f alpha = fix (\x -> alpha ++ (concat $ sequence ([x, alpha]))) in f (map return [1..5]) :: [Int]
12:38:35 <lambdabot>  Couldn't match `Int' against `m a'
12:38:44 <vincenz> > let f alpha = fix (\x -> [] ++ (concat $ sequence ([x, alpha]))) in f (map return [1..5]) :: [Int]
12:38:45 <lambdabot>  Couldn't match `Int' against `m a'
12:38:47 <vincenz> grr
12:38:50 <vincenz> let me fish it up
12:39:58 <vincenz> let f alpha = fix (\l -> alpha ++ (map concat . sequence $ [alpha, l])) in f (map return [1..5])
12:40:03 <vincenz> > let f alpha = fix (\l -> alpha ++ (map concat . sequence $ [alpha, l])) in f (map return [1..5])
12:40:05 <lambdabot>  [[1],[2],[3],[4],[5],[1,1],[1,2],[1,3],[1,4],[1,5],[1,1,1],[1,1,2],[1,1,3],[...
12:40:21 <vincenz> > let f alpha = fix (\l -> alpha ++ (map concat . sequence $ [alpha, l])) in f (map return [1..2])
12:40:23 <lambdabot>  [[1],[2],[1,1],[1,2],[1,1,1],[1,1,2],[1,1,1,1],[1,1,1,2],[1,1,1,1,1],[1,1,1,...
12:40:32 <vincenz> whoops
12:40:50 <vincenz> > let f alpha = fix (\l -> alpha ++ (map concat . sequence $ [l, alpha])) in f (map return [1..2])
12:40:51 <lambdabot>  [[1],[2],[1,1],[1,2],[2,1],[2,2],[1,1,1],[1,1,2],[1,2,1],[1,2,2],[2,1,1],[2,...
12:41:19 <vincenz> xerox: that one?
12:42:18 <xerox> I'm not sure, but it's nice, how do you reason about it?
12:42:49 <SamB> mmm
12:43:03 <SamB> there has to be an easier way to read that!
12:43:06 <xerox> `sequence' is still foreign to me.
12:43:33 <sjanssen> > let f xs = map return xs ++ liftM2 (:) xs (f xs) in f [1..2] -- is this right?
12:43:33 <vincenz> sequence takes one of each, and appends on of each of the second list (which is just my initial token set)
12:43:34 <lambdabot>  [[1],[2],[1,1],[1,2],[1,1,1],[1,1,2],[1,1,1,1],[1,1,1,2],[1,1,1,1,1],[1,1,1,...
12:43:42 <vincenz> sjanssen: nope
12:43:57 <xerox> @arr
12:43:58 <lambdabot> Aye Aye Cap'n
12:43:58 <vincenz> > let f xs = map return xs ++ liftM2 (:) (f xs) xs in f [1..2]
12:43:58 <lambdabot>    Occurs check: cannot construct the infinite type: a1 = [a1]
12:43:59 <lambdabot>    Expect...
12:44:09 <vincenz> that's why you need sequence
13:03:54 <Cale> xerox: oh
13:04:34 <Cale> > [replicate k ['a'..'z'] | k <- [1..]] >>= sequence
13:04:37 <lambdabot>  ["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s"...
13:04:44 <Cale> > [replicate k ['a'..'c'] | k <- [1..]] >>= sequence
13:04:46 <lambdabot>  ["a","b","c","aa","ab","ac","ba","bb","bc","ca","cb","cc","aaa","aab","aac",...
13:05:12 <xerox> Thank you.
13:07:00 <shapr> Hey, this reminds me of a Haskell golf ball I never quite figured out...
13:07:25 <xerox> Yuck, I wasn't remember you *can't* find the size of a (char **), you've got to pass around its size as an int.  Yuck-squared.
13:07:30 <xerox> shapr: what was that?
13:07:56 <shapr> I wanted to add functions to permute an input and have them each applied in order and then together.
13:08:10 <shapr> It was for an elegant means of lazy key promotion in the spam filter I wrote.
13:08:52 <shapr> So I wanted to so, Field*WORD! would become Field*WORD,Field*Word,Field*word,Field*word (case insensitive), WORD!,Word,word,word (case insensitive)
13:08:54 <shapr> as a lazy list
13:08:58 <shapr> I never did get it right.
13:09:23 <shapr> I wrote the promotion functions to give [] as their "I'm done" output, but I wonder if that was a bad idea.
13:14:17 <vincenz> Cale: nice golf
13:14:18 <Lemmih> musasabi: ping.
13:19:23 <twanvl> shapr: something like "map (foldr ($) input) . subsets"?
13:26:14 <JakesS> grrr I give up
13:26:21 <JakesS> can someone just explain this code to me
13:26:23 <JakesS> http://paste.lisp.org/display/26927
13:27:06 <JakesS> it takes a string as input then concats it with "p" and checks if its length is equal to 49
13:27:17 <JakesS> if it is then it runs the function code2
13:27:36 <JakesS> or else it returns failes
13:27:40 <JakesS> failed*
13:27:43 <JakesS> am I right?
13:30:05 <JakesS> grr
13:30:51 <Lemmih> ?check \x -> length (init (x ++ "p")) == length x
13:30:52 <lambdabot>  OK, passed 500 tests.
13:31:29 <JakesS> Lemmih huh?
13:32:11 <Lemmih> JakesS: 'init (x ++ "p")' has the same length as 'x'.
13:32:57 <x3m> is all haskell keywords listed somewhere?
13:33:01 <xerox> In at least 500 cases :)
13:33:09 <xerox> x3m: sure, in the report.
13:33:14 <xerox> @google haskell report
13:33:16 <lambdabot> http://www.haskell.org/onlinereport/
13:33:16 <lambdabot> Title: The Haskell 98 Language Report
13:33:17 <twanvl> x3m: there is also a page on the wiki
13:33:35 <twanvl> http://haskell.org/haskellwiki/Keywords
13:33:37 <lambdabot> Title: Keywords - HaskellWiki
13:34:41 <JakesS> Lemmih: x++"p" is concat string x with "p" right?
13:34:52 <x3m> ah there
13:35:59 <Lemmih> JakesS: Yes.
13:36:10 <musasabi> Lemmih: pong
13:36:22 <Lemmih> > ("Hello" ++ "p")
13:36:24 <lambdabot>  "Hellop"
13:36:24 <Lemmih> > init ("Hello" ++ "p")
13:36:26 <lambdabot>  "Hello"
13:36:48 <Lemmih> musasabi: You had trouble with 'zeroth', right?
13:37:36 <musasabi> Lemmih: I have a working version.
13:39:20 <JakesS> now i am confused with code2
13:39:31 <JakesS> I do not see digit declared any where in the prog
13:39:45 <JakesS> how is this possible?
13:40:21 <twanvl> ?hoogle digit
13:40:22 <musasabi> Lemmih: did some changes to get it working.
13:40:23 <lambdabot> Text.ParserCombinators.Parsec.Char.digit :: CharParser st Char
13:40:24 <lambdabot> Char.digitToInt :: Char -> Int
13:40:24 <lambdabot> Char.intToDigit :: Int -> Char
13:41:30 <JakesS> ohhh so it is declared in a namespace if I put it that way
13:43:48 <JakesS> ty for all that guys but I think I need to sit down and read a haskell tut first
13:45:19 <Lemmih> musasabi: Hm, it worked out-of-the-box for me.
13:45:23 <vincenz> @localtime dons
13:45:24 <lambdabot> Local time for dons is Thu Sep 28 06:45:01 2006
13:45:26 <Lemmih> (with hsx from darcs)
13:58:56 <shapr> xerox: Do you have a Haskell Golf collection?
13:59:17 <shapr> arguile: Hiya, how's code?
14:00:36 <int-e> shapr: something like http://haskell.org/haskellwiki/Blow_your_mind ?
14:00:36 <lambdabot> int-e: You have 1 new message. '/msg lambdabot @messages' to read it.
14:00:38 <lambdabot> Title: Blow your mind - HaskellWiki
14:02:14 <shapr> Oh, I like that page.
14:11:47 <dcoutts__> bringert_: I'll be getting in at 12:17, so in time to get to Chalmers for after lunch. Remind me; is there anything happening tomorrow afternoon, or was it just the talk in the morning at 10am (that I'll be missing)
14:12:21 <vincenz> dcoutts__: workshop?
14:12:27 <dcoutts__> I decided that getting up at 5am to catch a 6:15 train didn't sound fun :-)
14:12:53 <vincenz> dcoutts__: it could be worse :) like taking a 4 hour train to arrive some place, crash in a hotel and get up at 4am for a 5am train for a 6am plain
14:13:01 <bringert_> dcoutts__: nothing that I know of tomorrow afternoon
14:13:32 <dcoutts__> bringert_: ok, want to meet up with me and kolmodin in the afternoon / evening ?
14:14:04 <bringert_> dcoutts__: sure
14:14:32 <bringert_> dcoutts__: if you want somewhere to hang out tomorrow afternoon, you are welcome to sit in my office
14:15:51 <dcoutts__> bringert_: oh, right, ta. Ah, in the email nibro mentions "You are of course very welcome to attend my seminar (Thu at 10, cakes at 2pm)"
14:16:03 <dcoutts__> so there's clearly something happening after lunch ;-)
14:16:03 <bringert_> oh, of course
14:16:20 <bringert_> you wouldn't want to miss that
14:16:26 <dcoutts__> it'd be a bit sneaky to turn up for cakes :-)
14:16:32 <bringert_> not at all
14:16:37 <bringert_> I do that all the time
14:16:38 * dcoutts__ grins
14:16:43 <kolmodin> :D
14:16:50 <dcoutts__> ok, and I'll bring my unicycle
14:17:00 <dcoutts__> (since I'll have it with me anyway)
14:17:01 <bringert> sweet
14:17:03 <kolmodin> heh, I've yet to see you use that thing :)
14:17:11 <bringert> dcoutts__: have you met nad?
14:17:13 <xerox> Zoooooom
14:17:14 <dcoutts__> hia kolmodin
14:17:18 <kolmodin> hi dcoutts__
14:17:20 <bringert> he unicycles to Chalmers
14:17:21 * shapr cheers for unicycling & fp!
14:17:25 <vincenz> dcoutts__: whatcha gonna do at chalmers?
14:17:25 <xerox> shapr: nope, but sounds like a good idea to build on.
14:17:27 <xerox> *one
14:17:28 <dcoutts__> bringert: not sure if I have.
14:17:32 <vincenz> dcoutts__: besides unicycle
14:17:35 <dcoutts__> vincenz: jabbering
14:17:38 <bringert> I've seen him do it in snow, ice and darkness
14:17:43 <dcoutts__> wow
14:17:46 <vincenz> dcoutts__: jabbering?
14:18:01 <dmwit> Must have eaten your carrots...
14:18:04 * dcoutts__ is a fair weather unicyclist
14:18:12 <dcoutts__> vincenz: blabberng ?
14:18:16 <dcoutts__> talking
14:18:25 <dcoutts__> about ByteStrings and related stuff
14:21:59 <shapr> hoi franka
14:22:12 <vincenz> dcoutts__: oh :)
14:22:16 <vincenz> dcoutts__: how far is that from you?
14:22:33 <franka> I have an IM friend, a very sweet, smart, tall, Christian gothic girl in the UK, who I would like to recommend a nice, smart, tall (?) guy to.
14:22:36 <franka> Any takers?
14:22:51 <vincenz> franka: heh, seriously?
14:22:58 <franka> Absolutely serious.
14:23:00 <franka> She is 17.
14:23:13 * vincenz points at dcoutts__ 
14:23:15 <vincenz> he lives in the uk
14:23:15 <dcoutts__> vincenz: about 3 hours by high speed train
14:23:21 <franka> Likes older guys.
14:23:24 <vincenz> dcoutts__: there's a train from uk to sweden?
14:23:52 <dcoutts__> vincenz: oh, probably, via France, Holand, Belgum and Denmark.
14:24:01 * vincenz winces
14:24:01 <dcoutts__> vincenz: I'm in Stockholm atm.
14:24:05 <vincenz> dcoutts__: ah that explains
14:24:09 <dcoutts__> :-)
14:24:41 <shapr> dcoutts__ qualifies as nice, smart and tall.
14:24:59 <franka> How old are you, dcoutts__?
14:25:01 <vincenz> shapr: and ukian
14:25:06 <dcoutts__> hah hah hah
14:25:14 <franka> :)
14:25:28 * dcoutts__ is not single
14:25:34 <shapr> dcoutts__ gets top marks in both nice and smart. Being less than seven feet tall, he does not get top marks in tall.
14:25:51 <vincenz> shapr: seven feet is excessive
14:25:51 <dcoutts__> heh, thanks shapr
14:25:55 * shapr grins
14:25:57 <vincenz> I think anything > 6 feet qualifies as tall
14:25:57 <dcoutts__> 2 is enough
14:26:28 <kolmodin> 2 feet? that's not very tall
14:26:28 * vincenz is enjoying a nice kwak
14:26:47 <vincenz> kolmodin: that's not height but length
14:26:58 <franka> My friend is getting a great laugh out of this.
14:27:05 <franka> I am reposting all your comments.
14:27:14 <shapr> Hey, we take nearly all questions seriously.
14:27:14 <kolmodin> hah :)
14:27:26 <dcoutts__> kolmodin: 2 feet and 2 hands
14:27:49 <shapr> Sadly I am short, minorly clueful, nice and attached to someone in Sweden.
14:27:54 <dcoutts__> g'night folks
14:27:57 <franka> Seriously, guys, this girl wears gothic clothes to church.  She's a hottie.
14:28:00 <shapr> g'nite duncan!
14:28:03 <dcoutts__> see you tomorrow bringert
14:28:09 <vincenz> franka: heh, not everyone is a goth
14:28:14 <kolmodin> dcoutts__: right, then I'm only one brain smart. that's about average
14:28:25 <franka> She's still waiting.
14:28:38 <bringert> dcoutts__: see you
14:28:40 <xerox> Waiting is the key.
14:28:59 <vincenz> xerox: hey, you're in that age category, no?
14:29:06 <franka> Ah, shapr, I know you are not available.
14:29:17 <xerox> I'm in .it!
14:29:25 <shapr> But I am thoroughly Christian.
14:29:41 <vincenz> xerox: we all are, CS is the main people-feeder for IT
14:29:46 * shapr laughs
14:29:49 <xerox> hehe
14:30:13 * shapr wonders if professional.it is taken
14:30:18 <shapr> or maybe industry.it
14:30:28 <shapr> infotech.it ?
14:30:31 <vincenz> shapr: do.it
14:30:33 <xerox> Both.
14:30:35 <vincenz> just.do.it
14:30:41 <xerox> The third too.
14:30:57 <sjanssen> shut.it ?
14:30:58 <shapr> hey, do.it is not taken!
14:31:04 <xerox> do.it seem to be available.
14:31:06 * shapr sends money to xerox!
14:31:19 <shapr> hiya stepcut
14:31:21 <xerox> shapr: hmmm.
14:31:22 * shapr boings
14:31:31 <xerox> Shall we?
14:31:36 <xerox> Maybe it is not registrable?
14:31:37 <shapr> Oh let's
14:31:39 <shapr> I don't know.
14:31:40 <int-e> hmm, maybe they don't hand out two letter domain names?
14:31:44 <shapr> Seems like nike would have taken it.
14:32:04 <shapr> int-e: at.it is taken
14:32:18 * shapr was considering http://shoot.at.it/
14:32:41 <xerox> I get `incorrect' for do it, in a registering site.
14:32:49 <int-e> shapr: created:     before 960129 ... that says something
14:32:52 <shapr> And of course, fuck.it is taken. Is anyone surprised?
14:33:11 <franka> Come on.  There's gotta be some young, hot Haskell-programming studs in the UK!
14:33:17 <bringert> haha
14:33:19 <vincenz> franka: that's a contradiction
14:33:20 * shapr thinks
14:33:28 <bringert> that's not a sentence you see every day
14:33:33 <shapr> There's that hot Frank guy in NL.
14:33:34 <shapr> oh wait
14:33:39 <bringert> franka: you need available as well
14:33:44 <vincenz> Higher-order Typing Haskell-programming studs?
14:33:49 <int-e> shapr: it's also a 'Geographical Italian Second Level Domain'
14:33:49 <vincenz> are you sure you don't mean "STUBS"?
14:34:11 <bringert> franka: that's that tough one. hot Haskell studs are in high demand
14:34:15 <shapr> truly
14:34:26 <vincenz> bringert: higher order typing haskell stubs are defacto
14:34:36 <Itkovian> franka: post some pics of this hottie, then you might sparklemore interest
14:34:36 <shapr> Hm, I thought of one that almost matches, but is not interested in women.
14:35:05 <franka> <sigh>
14:35:09 * shapr grins
14:35:16 <xerox> Ah-ha.  http://it.wikipedia.org/wiki/ISO_3166-2:IT  AT = Asti
14:35:28 <franka> She says, "probably the most attractive one of the lot lol".
14:35:59 <Itkovian> well, is she looking for witty, horny, or pretty?
14:36:18 <shapr> Smart & nice seemed to be requirements.
14:36:20 <shapr> and in the UK
14:36:35 <franka> Oh, she says, "other than you, of course, dear.  tell em that, get your reputation up ï¿¼"
14:36:37 <Itkovian> I fit neither
14:36:43 <Itkovian> plus, I'm married :-)
14:36:43 * shapr grins
14:36:53 <franka> But, of course, my reputation is not in question.
14:36:57 <xerox> That's a plus yeah.
14:36:58 <shapr> Of course not.
14:37:02 <Itkovian> tell her to join us here :-)
14:37:04 <franka> She says "witty".
14:37:12 <shapr> Any guy who can wear eyeshadow with confidence has a solid reputation.
14:37:14 <xerox> ?babel en it witty
14:37:17 <lambdabot>  witty
14:37:19 <Itkovian> dang, I'm horny :-)
14:37:43 <xerox> And I'm sleepy, have fun, g'night.
14:37:49 <franka> Itkovian: "heck no"
14:38:01 <kolmodin> g'night everybody
14:38:02 <Itkovian> haha
14:38:03 <franka> "amen to shapr lol"
14:38:12 <int-e> @vixen do you like Haskell?
14:38:12 <lambdabot> church is my favourite computer scientist.
14:38:40 <Itkovian> franka: so, she's sitting next to you. you are older and witty.
14:38:42 <Itkovian> go for it
14:38:49 <vincenz> yeah franka, make us proud
14:39:05 <Itkovian> and tell us in 5 minutes how she was
14:39:17 <franka> We're speaking on IM.  She's 17 and in the UK.  I'm 33 and in NL.
14:39:19 <vincenz> Itkovian: lazy evaluation
14:39:26 <vincenz> franka: implementation details
14:39:28 <Itkovian> vincenz: haha
14:39:39 <vincenz> Itkovian: going to ACES?
14:39:39 <xerox> We need a @vincenz if he keeps it like that
14:39:45 <Itkovian> ah well, you can have cybersex no?
14:39:50 <Itkovian> vincenz: yes
14:39:53 <vincenz> xerox: what?
14:39:55 <vincenz> Itkovian: which day?
14:40:00 <Itkovian> vincenz: but I'm not presenting anything
14:40:02 * xerox hides and runs away
14:40:06 <Itkovian> vincenz: both, of course.
14:40:14 <Itkovian> I need to sleep there to be able to bowl
14:40:16 <vincenz> Itkovian: I'm considering just going to attend and meet people as well
14:40:20 <Itkovian> if Koen pays, that is
14:40:54 <Itkovian> franka: if she's so hot, that should work out well :-)
14:41:20 <vincenz> xerox >>= _|_
14:41:42 <vincenz> Itkovian: ben een zalige kwak aan't drinken :)
14:41:54 <vincenz> Itkovian: maar zou goed zijn als ik kom dan? Kunnen we bespreken
14:42:15 <araujo> hello!
14:42:16 <Itkovian> sure, we could talk about cool things
14:42:32 <vincenz> Itkovian: cool :)
14:42:37 <vincenz> Itkovian: boegel goin?
14:42:38 <Itkovian> just know that from 5pm I shall not be sober anymore
14:42:43 <Itkovian> at least, that's the plan
14:42:46 <vincenz> Itkovian: btw, do we have to register?
14:42:49 <vincenz> for attendance
14:43:18 <Itkovian> vincenz: yes, I think so. Certainly if you want a room, though I think the deadline for that has passed.
14:43:21 <shapr> franka: I'm 35 and in the USA.
14:43:32 <Itkovian> I'm 28 and in Belgium
14:43:39 <vincenz> Itkovian: well it ain't far from my grandmother, I could ask her if I could stay
14:43:42 <glguy> ?vixen a/s/l
14:43:42 <vincenz> Itkovian: 27 :P
14:43:43 <lambdabot> 19/f/California
14:43:49 <vincenz> @vixen a/s/l
14:43:49 <lambdabot> 19/f/California
14:43:57 <Itkovian> wow
14:44:13 <Itkovian> silicon californian vixen
14:44:28 <vincenz> Itkovian: where will you get drunk?
14:44:53 <franka> Pass the word on.
14:44:58 <franka> I wanna get this girl mated.
14:44:59 <phas> ehi
14:45:06 <vincenz> franka: coupled or mated?
14:45:59 <phas> think about a "Speek recognizer" plugin for lambdabot
14:46:04 <phas> it will be cool
14:46:14 <phas> s/Speek/Speech
14:46:39 <Itkovian> vincenz: at the bar. they have duvel
14:46:40 <shapr> phas: Good idea, you think Viterbi is enough?
14:46:44 <Itkovian> and decent wine at the table
14:46:44 * shapr wants Duvel
14:47:05 <vincenz> Itkovian: neat
14:47:12 <vincenz> Itkovian: no kwak?
14:47:15 * vincenz wants kwak!
14:47:17 <Itkovian> dunno
14:47:28 <vincenz> Itkovian: I've heard of some belgians that don't know what kwak is
14:47:31 <phas> shapr: erg
14:47:42 <Itkovian> ouch
14:47:52 <Itkovian> never drunk any, but I do know it :-)
14:48:24 <vincenz> it's great
14:48:27 * vincenz is enjoying one now
14:48:38 <vincenz> Itkovian: pity I couldn't attend the scenario meeting :/
14:48:58 <Itkovian> doesn't matter
14:49:04 <Itkovian> I've got enough work already
14:49:10 <shapr> Do you guys hang out? vincenz, Itkovian, boegel?
14:49:11 <vincenz> not just for profiling
14:49:18 <vincenz> also for the scenario work
14:49:25 <Itkovian> bogel works with me
14:49:28 <vincenz> shapr: we live in differnet cities
14:49:40 <shapr> phas: bringert wrote a binding for HTK, have you seen it?
14:49:41 <Itkovian> I could do something together with vincenz
14:49:50 <Itkovian> if I find time :-)
14:49:50 <vincenz> Itkovian: you already have a family
14:50:13 <shapr> phas: Speech recognition isn't difficult to code. But it is difficult to code well. But that's true of many things.
14:50:52 <phas> shapr: uhm
14:52:08 <shapr> phas: Have you heard hidden markov models?
14:52:17 <shapr> "heard of"
14:52:54 <kencausey> I'm a newbie and reading through YAHT.  On page 31 there is an example (the first) using do and it breaks the line immediately after do and then indents for the next line and so on.  However haskell-mode in xemacs is giving me an error "Invalid syntax designater: ?\t" when I hit tab on that first line after do.
14:53:28 <phas> shapr: ergh
14:53:38 <shapr> kencausey: That's because haskell-mode was really written for gnumacs.
14:53:48 <shapr> I have the same problem, I just manually indent it some spaces.
14:54:00 * Itkovian uses Vim
14:54:02 <Itkovian> :-)
14:54:14 <shapr> kencausey: The full story as I remember is that the built-in xemacs haskell-mode clashes with haskell-mode 2.0
14:54:30 <phas> shapr: i'm looking at HTK
14:54:31 <kencausey> aha, I see
14:54:33 <shapr> I forget how to fix it off the top of my head. I may remember tomorrow.
14:54:48 <kencausey> shapr: Thanks, gives me an idea of how to search at least
14:54:57 <shapr> Are you using debian/unstable?
14:55:01 <kencausey> yes
14:55:09 <shapr> Me too
14:55:37 <shapr> That's the story then, haskell-mode 2.0 is much spiffier, but clashes with the OEM xemacs haskell-mode.
14:55:39 * Itkovian goes to sleep
14:55:40 <Itkovian> ttyl
14:56:08 <shapr> kencausey: You'll also get font errors with literate haskell files. I've fixed those before, but I also forget how.
14:56:28 <shapr> Once I've made up for my lack of sleep I will probably remember the fixes.
14:56:44 <kencausey> :)
15:00:03 * shapr google stalks kencausey 
15:00:18 <shapr> kencausey: What sort of handheld?
15:00:35 <kencausey> ah, that's old, I haven't worked with that group now in, oh 2-3 years
15:00:53 <kencausey> but it was an old original iPaq
15:01:09 <kencausey> 3600 I guess was the search, battery is toast now
15:01:12 <shapr> I got a Nokia 770 on January 5th, and I'm happy with it.
15:01:15 <kencausey> err s/search/series/
15:01:16 <kencausey> cool
15:01:47 <stepcut> shapr: I would be extremely happy with it, if bluetooth worked reliably :(
15:01:53 <shapr> The replaceable battery was one deciding feature for me after my unremovable IIIc rechargeable battery died.
15:01:56 <shapr> stepcut: What's the problem?
15:02:27 <kencausey> some of the core handhelds.org guys work for Nokia now I think
15:02:39 <stepcut> shapr: the bluetooth driver crashes often -- a real pain if you are using a keyboard
15:02:54 <stepcut> https://maemo.org/bugzilla/show_bug.cgi?id=408
15:02:56 <lambdabot> http://tinyurl.com/gv3tx
15:03:08 <shapr> hm, I was considering buying a keyboard
15:03:22 <vincenz> shapr: how are you typing now?
15:03:49 <shapr> I'm not using my Nokia 770.
15:03:57 <stepcut> shapr: if you get a keyboard, make sure get one that supports the real bluetooth keyboard profile -- some show up as a comm port and require wacky drivers
15:04:07 <shapr> Is that the problem you're having?
15:04:28 <stepcut> yeah
15:04:45 <shapr> Still, it seems that the bt chip firmware is the problem.
15:04:53 <shapr> Once again, closed source for the lose.
15:05:29 <stepcut> right
15:05:34 <stepcut> sorry, there are two issues :)
15:05:55 <stepcut> the firmware crashing is a problem, due to the binary blob that TI provides :(
15:05:57 <shapr> kencausey: Any other Haskell questions?
15:06:15 <shapr> Yeah, the cx3110 conexant wifi chip has its own binary blob as well.
15:06:40 <shapr> I've been perusing the wifi driver source in hopes of emitting raw 802.11 frames
15:07:03 <shapr> On the good side, I learned that it's easy to spoof a mac address.
15:07:21 <kencausey> shapr: not at the moment, distracted by an issue in one of my other communities right now (squeak)
15:07:25 <kencausey> shapr: but thanks, I'm sure I will
15:08:01 <shapr> I've always meant to get around to trying nebraska. Self's multiuser interface was so very cool.
15:08:03 <stepcut> regarding the keyboard profile - there are drivers that you can use with the nokia 770 for not-HID keyboards, but you won't be able to use the keyboard with other things, like a cell phone. Since HID bluetooth keyboards don't cost anything more, it is wise to get the right one :)
15:08:16 <shapr> I'll remember that.
15:08:19 <stepcut> I got the wrong one :-/
15:08:55 <shapr> My next purchase will probably be the spiffy new bluetooth stereo headset from Nokia. I've worn out my headphones jack.
15:09:02 <sris> Hi, im trying to learn how to use $, in this code, http://paste.lisp.org/display/26936 where should i put $ to get rid of all the  () except the (x:xs)-ones
15:09:38 <stepcut> shapr: you might look into one that does the A2DP profile -- that is the profile that supports stereo headset + microphone
15:09:41 <sris> in the two last rows
15:09:48 <stepcut> shapr: useful for newer cell phones, or VoIP on the 770
15:09:55 <shapr> stepcut: Yeah, that's the ones I want. 501 is the model number.
15:10:03 <stepcut> yeah
15:10:10 <kencausey> shapr: Yes, I will warn you though that Nebraska hasn't been maintained much in a long time, it probably still works 90%, but I wouldn't be suprised at some problems.
15:10:35 <shapr> Sadly there isn't a bluetooth profile that supports stereo sound and voice input as you would want with a teamchat game.
15:11:26 <shapr> You either get responsive mono in/out or stereo out with a half second delay.
15:13:04 <stepcut> suck
15:13:57 <stepcut> do the 501 let you pair the stereo with one device and the mic/mono with a phone at the same time ?
15:13:58 <shapr> sris: You can start by changing the last line from (attachHeads '-' y (optAlignments (x:xs) ys)) to (attachHeads '-' y $ optAlignments (x:xs) ys)
15:14:34 <shapr> stepcut: Yup, you can listen to music from your 770 and hit a button to answer a call from your phone.
15:14:43 <shapr> Not sure if it can be set to autoanswer while listening to music.
15:14:54 <stepcut> cool
15:15:05 <stepcut> do you have a 3G phone ?
15:15:21 <shapr> sris: $ is the same as function application, but it has low precedence instead of high.
15:15:23 <vincenz> stepcut: is that like a 5GL Programmng language?
15:15:33 <stepcut> vincenz: more or less :)
15:15:33 <vincenz> shapr: money?
15:15:34 <sris> shapr, yeah that worked, im not sure of how i shuld thing of $ and how to use it, seems kind of random :D
15:15:47 <shapr> I have a years old Nokia 6310i with the very first firmware, it randomly crashes when I use bluetooth.
15:15:57 <shapr> I can't figure out where to update the firmware in AL
15:16:48 <stepcut> shapr: who is your provider ?
15:16:48 <shapr> sris: Well, if you have f g h is that f (g h) or is it (f g) h ?
15:16:52 <shapr> Cingular
15:17:02 <sris> (f g) h
15:17:22 <sris> right?
15:17:23 <shapr> I have an unlimited traffic GPRS subscription, but it's so very slow compared to Sweden.
15:17:36 <stepcut> i bet
15:17:45 <shapr> sris: Right, so how could you make it into f (g h) ?
15:17:47 <int-e> sris: right
15:17:59 <sris> f $ g h
15:18:04 <shapr> sris: you got it!
15:18:19 <int-e> . o O ( f . g $ h )
15:18:26 <shapr> :-P
15:18:33 <sris> well, i think its ++ that is making me do stupid stuff
15:18:42 <shapr> What's the precedence of ++ ?
15:18:50 <sris> i dont know ;)
15:18:59 <shapr> Neither do I...
15:19:07 <int-e> @info ++
15:19:08 <lambdabot> ParseFailed (SrcLoc {srcFilename = "<unknown>", srcLine = 1, srcColumn = 1}) "Parse error"
15:19:14 <int-e> @info (++)
15:19:14 <lambdabot> (++)
15:19:23 <sris> that's useful :D
15:19:29 <agocorona> fine
15:19:36 <int-e> Prelude> :i (++)     -->   ++ :: [a] -> [a] -> [a]         -- Imported from GHC.Base;  infixr 5 ++
15:19:47 <shapr> But if attachHeads takes three args and optAlignments takes two, you probably don't need any parens.
15:20:50 <shapr> Ã¤r det klart?
15:20:59 <shapr> FÃ¶rstÃ¥r?
15:21:08 <sris> hehe, nej ;)
15:21:33 <int-e> a ++ b $ c ++ d is (a ++ b) $ (c ++ d)
15:21:42 <int-e> so you probably need the parentheses
15:22:12 <sris> ok
15:22:18 <int-e> ($) has precedence 0. (++) (as shown above) has precedence 5
15:22:31 <sris> higher binds harder?
15:22:35 <int-e> right
15:22:52 <sris> well then. parenteses it is. thanks
15:22:53 <int-e> tighter :)
15:23:02 <int-e> stronger.
15:23:12 <shapr> You can figure out any expression by comparing the precedence and sidedness(?) of the operators, and you can set the precedence of your own operators with infixl number or infixr number
15:23:51 <int-e> shapr: associativity (left-associative, right-associative)
15:23:59 <shapr> thanks
15:24:23 <int-e> although that term is a bit overloaded :/
15:24:23 <shapr> Kanske jag har talat fÃ¶rmycket svenska idag. Eller jag behover att sova...
15:24:43 * shapr talar Alabamsk i Alabama
15:29:35 <psi> shapr: "kanske har jag" ska det vara! "Eller sÃ¥ behÃ¶ver jag sova..."
15:29:45 <basti_> vara my ass
15:31:41 <psi> what you said translates well directly into english, so I see where you got it from. Swedish people tend to do the same thing, but the other way around.
15:48:29 <shapr> psi: thanks
15:49:40 <araujo> yay!
15:49:43 <araujo> yay!
15:52:57 <vincenz> yay!
15:53:13 <araujo> :-)
16:01:35 * shapr boings
16:02:17 <Oliver> Hi
16:02:48 <shapr> hiya Oliver
16:02:52 <shapr> How's code?
16:03:27 <Oliver> Not bad. Unfortunately haven't had time for much Haskell lately :/
16:03:35 <Oliver> You?
16:04:12 <shapr> I'm doing the HAppS tutorial at the moment.
16:05:01 <Oliver> Ahh, I imagine that is an interesting beast.
16:05:12 <shapr> definitely
16:08:44 <dibblego> there are crusaders of FP and crusaders of OO, lots of open source this and that and people contributing in ways that they feel matter - are there any whose sole intention is to educate those using OO and/or the imperative style (I realise many FP users make a clear distinction) thaty they are simply reinventing FP in a flawed, misrepresented and deficient way that will never approach the higher possibilities because the tools are p
16:08:44 <dibblego> rovably deficient?
16:08:59 <dibblego> Backus is an 80 year old grumpy man and rightly so
16:09:27 <dibblego> we can't let him go thinking his work was useless
16:09:33 <vincenz> dibblego: what about proper oo langs, like smalltalk?
16:09:36 <araujo> Any good/nice lambda paper (~ 30-50) worth of printing for reading?
16:09:47 <shapr> You can't change the minds of others, but you can answer their questions when they ask.
16:09:49 <araujo> (~ 30-50 pages)
16:10:00 <dibblego> vincenz, smalltalk is broken - but I realise that many FP users don't see it that way - in which case, focus on imperative style
16:10:12 <dibblego> shapr, sure, but there is no forum fo these people
16:10:14 <shapr> Also note that smalltalk has some important FP features.
16:10:22 <vincenz> dibblego: how is it broken
16:10:29 <shapr> dibblego: lambda-the-ultimate.org used to be such a forum, and #haskell still is
16:10:35 <araujo> dibblego, Why is st broken?
16:10:42 <dibblego> vincenz, I don't want to go into it right now
16:10:48 <shapr> dibblego: Post it on your blog!
16:11:00 <vincenz> what shapr said
16:11:04 <dibblego> I don't have a blog, and I fear having one
16:11:05 <shapr> Then you won't have to repeat it or clarify it over and over.
16:11:17 <dibblego> also I am not the best communicator
16:11:20 <araujo> And if Backus is depressed or anything , he shouldn't be .. what else he wants to do?
16:11:48 <dibblego> I envisage a forum where like-minded people can discuss strategies for purporting information (or destroying disinformation) -- I am not overly talented at this
16:11:53 <shapr> dibblego: If you want to communicate, write blog entries and wiki pages.
16:11:54 <araujo> dibblego, why is ST broken?
16:12:08 <dibblego> araujo, another day
16:12:15 <araujo> ?
16:12:21 <araujo> No, right now.
16:13:00 <shapr> Most of the info I've picked up I found on google.
16:13:05 <dibblego> shapr, there are others who are far more talented than I at doing these kind of things - I could learn but why not use the talents of others?
16:13:07 <shapr> I read papers and blog entries :-)
16:13:11 <araujo> I don't like people judging like that languages in such a way.
16:13:36 <shapr> dibblego: What are you good at?
16:13:53 <araujo> It's like people biitching about Haskell being broken.
16:13:55 <dibblego> araujo, it requires *lots* of dialogue and starts with a basic set of axioms that are difficult to paraphrase
16:14:00 <dibblego> araujo, it isn't
16:14:09 <vincenz> dibblego: that's a fairly weak defense
16:14:21 <vincenz> 'I say sao, but I suck at communicating so I won't defend my position'
16:14:26 <araujo> That explains absolutely nothing about "brokenness"
16:14:27 <dibblego> if 2 + 2 produces 5, and the + operator purports to add two numbers together, then it is broken (reductio ad absurdum) provably sof
16:14:29 <dibblego> *so
16:14:44 <shapr> I really think a writeup is better than a live discussion
16:14:45 <vincenz> > let 2 + 2 = 5 in 2 + 2
16:14:46 <lambdabot>  5
16:14:48 <shapr> This is a religious issue :-)
16:14:49 <vincenz> you mean like that?
16:15:07 <dibblego> shapr, so do I - I've attempted it unsuccessfully in this channel before and didn't get far
16:15:19 <shapr> Have you written down your thoughts point by point?
16:15:35 <shapr> I think everyone needs to be able to communicate no matter what their talents.
16:15:35 <dibblego> shapr, I don't think it is - if you can establish a common premise (e.g. a basic set of axioms of what software is for example), you can prove a contradiction in say smalltalk and software
16:15:53 <shapr> That would be interesting, have you written up such a thing?
16:16:01 <shapr> I'd be happy to help with grammar, spelling and writing style.
16:16:02 <dibblego> shapr, yes, my boss has about 50 big sheets of paper pinned up on a whiteboard and constantly questions them
16:16:11 <shapr> Take pictures!
16:16:14 <dibblego> shapr, yes I've started writing a book
16:16:26 <shapr> send me your draft!
16:16:31 <dibblego> yes, my manager is purchasing one where it can be saved
16:16:39 <shapr> I won't necessarily agree, but I will listen and discuss.
16:16:53 <dibblego> shapr, I'm happy to do so - I am almost at a stage where I can solicit initial feedback
16:17:01 <dibblego> shapr, thanks, I'll keep it in mind
16:17:09 <vincenz> likewise :)
16:17:31 <dibblego> thanks vincenz
16:18:41 <dibblego> I tried to explain to my boss yesterday that "X is broken" is incorrect unless the assumed premise coincides by chance
16:18:52 <dibblego> this is a Axiology 101
16:19:02 <dibblego> if you cut a car in half, it is not broken
16:19:05 <shapr> The problem with the description "broken" is that you need to make your premises clear ahead of time.
16:19:23 <shapr> Otherwise people get all pissy.
16:19:23 <dibblego> if you cut a car in half and have a requirement to go from A to B, you have a contradiction that needs resolution
16:19:30 <dibblego> right
16:19:37 <shapr> Yes, I agree with you.
16:19:49 <dibblego> if you have a requirement to view a car in cross section, the car is not broken
16:19:54 <dibblego> then you might say "what is a car"
16:20:02 <dibblego> the act of cutting it in half makes it not a car?
16:20:04 <dibblego> I'd argue yes
16:20:19 <shapr> Then you have to think about trailers
16:20:20 <shapr> and trains
16:20:38 <dibblego> in other words, the relative position of the left door to the right door is an axiom of a car
16:20:41 <basti_> honestly. I think this is too abstract to make any sense.
16:20:46 <dibblego> in changing that axiom, it is no longer a car
16:21:06 <basti_> if i write 2+2 (or a+b), i know what i mean, and i can even formalize it
16:21:19 <basti_> there's no point in debating semantics, generally
16:21:26 <dibblego> basti_, yes, some people see it that way, and some people are much better at addressing the layperson audience - I have trouble sacrificing accuracy for appeal
16:21:41 <basti_> i'm not sacrificng accuracy.
16:21:44 <basti_> i can define what 2+2 is
16:22:15 <dibblego> I could concede and say "once you learn the basic premise of axiology, it is strikingly obvious" - but this is like saying "once you learn the basic premise of category theory, monads are strikingly obvious" -- it's a cop out
16:22:37 <dibblego> there are simplifications of monads out there for a layperson
16:22:40 <Philippa> yeah, generally at that point rather than debating you should be discussing what you each meant and getting back to arguing about those statements
16:23:13 <basti_> honestly, i don't see a problem in programming language semnatics
16:23:17 <dibblego> Philippa, preventing the chance of the straw man
16:23:57 <Philippa> btw, I think something can reasonably be described as broken by comparing it to its supplier's description
16:24:16 <Philippa> equivalent to saying "this value's of the wrong type"
16:24:18 <dibblego> basti_, my boss never did either until I challenged him "I will watch over your shoulder and point out each time you suffer because of that deficient language" -- every 5 seconds it occurred - but he didn't quite see it, he does now
16:24:23 <dibblego> *didn't
16:24:38 <basti_> well then, do point it out
16:24:42 <basti_> do not talk about how you did it
16:24:54 <dibblego> there is a digression from "software" within that language to a degree that allows me to highlight a contradiction every 5 seconds
16:24:59 <basti_> i don't care what your boss thinks.
16:25:19 <dibblego> basti_, it took 230 hours for me to point it out (our estimate since we had to not bill for it)
16:25:35 <dibblego> I really don't like doing it on IRC (sorry for the cop out)
16:25:35 <basti_> you should write a paper about it
16:25:48 <dibblego> yes, but I suck at it
16:25:58 <dibblego> I admit my own deficiency - there are better authors than myself
16:25:59 <basti_> yea, so you come here to complain huh
16:26:06 <dibblego> I am not complaining at all
16:26:27 <basti_> sounds a lot like it though
16:26:35 <dibblego> I'm sorry it appears that way
16:26:47 <dibblego> I am simply looknig for a means to purport information for those who seek it
16:26:57 <basti_> write it down
16:27:00 <basti_> not on IRC
16:27:11 <basti_> make a website
16:27:12 <basti_> whatever
16:27:19 <basti_> a wiki
16:27:33 <dibblego> I don't want to appear as a sole authority on rightness
16:27:42 <dibblego> I have a personal paradox I know
16:28:18 <dibblego> in any case, I figure there might be an existing forum or interest in such a thing that not only I share
16:28:39 <shapr> You'll still have to communicate on that forum.
16:28:43 <basti_> yea
16:29:06 <dibblego> well, I'll just continue to write and hope that works
16:29:20 <basti_> do it in an organized way
16:29:24 <basti_> i.e. not on irc.
16:29:25 * Philippa strongly disagrees with the idea that message passing OO is a bad reinvention of FP
16:29:42 <dibblego> Philippa, I agree too
16:29:50 <dibblego> I agree in disagreeing that is
16:29:56 <Philippa> though I think C++ or Java-style OO is a kludgy attempt at higher-order procedural code, which is isomorphic to impure FP
16:30:04 <dibblego> basti_, ok thanks
16:30:05 <basti_> i think, OO was first invented to overcome things that wouldn't miss with FP
16:30:28 <Philippa> and OO as a modelling technique's highly valuable as soon as you have to interact with other systems
16:30:35 <dibblego> basti_, I know few people personally who have a deep understanding of both FP and imperative style for example - perhaps I need to find some
16:31:06 * basti_ is a programmer for something like 13 years now, first imperative, and functional since college.
16:31:07 <dibblego> -- OO is an appeal to conceptualisation and human psychology at the expense of software
16:31:09 <Philippa> I suspect most of the good FP coders in here also have a deep understanding of common imperative style code
16:31:29 <dibblego> Philippa, probably, but dons is the closest to me and he is 1000km away :)
16:31:41 <Philippa> sucks to be you
16:31:45 <basti_> i do not think physical distance does make a big difference
16:31:59 <Philippa> I dunno, sometimes getting together over a beer or something helps
16:32:04 <dibblego> basti_, I do - only through experience - I once didn't
16:32:05 <basti_> yea probably
16:32:38 <dibblego> I can make much more progress in one hour with a person on most topics than many hours in other less personal forums
16:32:40 <basti_> helps.
16:32:52 <dibblego> that might be something specific to me though
16:33:05 <basti_> whatever.
16:33:09 <Philippa> I can do pretty well over PM normally too
16:33:15 <Philippa> though having pen'n'paper helps sometimes
16:33:20 <dibblego> I should have completed that Psychology degree that I started
16:33:28 <Philippa> let's face it, sometimes 2d is just better for visualising terms
16:34:10 <basti_> dibblego: if i were you, I'd try to find a verbal form for my thoughts firsthand.
16:34:30 <pejo> dibblego, seriously, show your readers the respect of actually writing something comprehensible and put it online somewhere. Badmouthing OO without reason will only make people ignore your statements.
16:34:36 <basti_> that is, words that can be used to explain what you're thinking.
16:34:54 <basti_> you talked a lot, but there was handwaving at the central points
16:35:02 <basti_> which is natural, but doesn't help your point
16:35:12 <dibblego> I don't intend to badmouth anything - only demonstrate things as they are (or observe a proof that I am wrong)
16:35:15 * vincenz handwaves at basti_ 
16:35:31 <Philippa> yeah, but you're failing to demonstrate
16:35:34 <dibblego> basti_, agreed
16:35:37 <dibblego> yes I know
16:35:45 <Philippa> or indeed to convince that that's as things are
16:35:46 <dibblego> I have no intention to do that today or on IRC at all
16:35:56 <basti_> ok
16:35:58 <dibblego> the assumption that I do, is false
16:35:58 <vincenz> dibblego: then don't make statements, start small
16:36:52 <dibblego> ok, well thanks for the tips
16:36:55 <basti_> i've once heard a saying:
16:37:10 <vincenz> basti_: he who says less will be bashed less
16:37:13 <basti_> when you can't explain what you're about in under 1 minute, you're making a mistake
16:37:36 <dibblego> basti_, I think that's a stifling of innovation
16:37:43 <dibblego> basti_, and largely incorrect
16:37:48 <dibblego> explain the universe in under one minute
16:37:58 <Philippa> It exists. There, done.
16:38:05 <dibblego> since you cannot, that there is a universe is a mistake
16:38:12 <vincenz> dibblego: now you're being facetious on unrelated issues.
16:38:13 <dibblego> Philippa, fine, OO is broken, there done
16:38:22 <basti_> i think you're being a bit... unrelated now
16:38:24 <Oliver> I think you should collect what you want to say such that you can say it under a minute, not nesescarily that your idea is wrong if you can't spit it out on the spot in under 1 minute :)
16:38:28 <dibblego> I am? I don't see it
16:38:43 <Philippa> no, you don't. But you also don't see how to communicate well either
16:38:50 <basti_> i mean: if you got a job, you can explain what you're doing in under 1 minute
16:38:52 <dibblego> Philippa, sure, I concede to that
16:38:56 <basti_> in laymen's terms even
16:39:05 <basti_> even if you're doing theoretic physics
16:39:10 <Philippa> trust me, I know all too well from prior experience what that's like, but you need to back down for now, because you *do* need to be able to explain each building block in about a minute
16:39:32 <dibblego> I think the only distinction is that few people will disagree with "it exists" (it appeals to a mass) while many disagree with "OO is broken" -- I see no other distinction
16:39:37 <Philippa> basti_: "small whizzy things, I make them hit each other and go boom!"
16:39:42 <basti_> if you got an interest you can explain it in under one minute
16:39:58 <basti_> if you go on talking and talking, and nobody understands, something is wrong
16:40:06 <dibblego> I cannot see a justification for "OO is broken" in under one minute
16:40:16 <basti_> yea.
16:40:17 <basti_> see.
16:40:20 <dibblego> basti_, there are many people who understand, just not in here
16:40:37 <vincenz> dibblego: ah, apply to the, "you're all dumb so you don't get it" technique
16:40:49 <dibblego> basti_, it may be that "OO is broken" can be broken down into smaller topics that can be one minute - lots of work - but not feasible on IRC
16:41:04 <dibblego> vincenz, I was just noting that I am not on my own - nothing to do with dumbness
16:41:07 <Philippa> dibblego: you're mixing up many different things called OO
16:41:07 <basti_> maybe some sourcecode that supports it?
16:41:11 <Philippa> please attack specific things
16:41:20 <Philippa> OO analysis and design is not the same as OO programming...
16:41:22 <dibblego> Philippa, no, I can formally define it - I have done it even
16:41:23 <vincenz> dibblego: very feasible, if you were to first think out your thoughts instead of just putting an idea out there .  Like I said, start small, make concrete cases and build up
16:41:24 <basti_> maybe a short mention of an issue that someone had?
16:41:47 <vincenz> a case study?
16:41:48 <vincenz> an example?
16:41:53 <vincenz> a motivatign example?
16:41:53 <dibblego> ok, well it seems that we are arriving at the same conclusions that I have
16:41:57 <basti_> mind, it's not like that i think OO is unbroken...
16:42:04 <Philippa> dibblego: go on, what's your formalisation of OO...
16:42:13 <Philippa> this should be a laugh
16:42:16 <dibblego> Philippa, can't be done in under a minute :)
16:42:21 <basti_> it's just: youre coming here and go like "OO is broken, there! is anyone with me?"
16:42:28 * vincenz Philippa I love having you on irc.  You're always on my side of any discussion, but you're much better at defending that position
16:42:33 <dibblego> basti_, no I did not do that at all - that is a misconception
16:42:33 <vincenz> ack
16:42:38 <vincenz> that was supposed to be a pm
16:42:41 <dibblego> basti_, in fact, I said the exact opposite of that
16:42:42 <vincenz> gun `ap` foot
16:42:51 <basti_> yea whatever.
16:43:02 <basti_> I'm sorry if i misunderstood
16:43:04 <dibblego> the straw man strikes again
16:43:10 <Philippa> vincenz: don't worry, I'm sure you'll live it down :-)
16:43:20 <dibblego> I said I am not looknig to discuss the issue now, didn't I?
16:43:21 <basti_> but the point is: whatever you said, i don't get it, except for you're "opening a very large barrel" as we say in germany
16:43:27 <vincenz> dibblego: instead of running around and attacking everyone.  Take a minute, and explain us your formalization. Or at least give us a motivating exmaple
16:43:34 <vincenz> basti_: let's give him a minute to collect his thoughts
16:43:37 <dibblego> I am not attacking anyone!
16:43:42 <basti_> without explaining your point.
16:43:46 <basti_> yea ok vincenz.
16:43:47 <vincenz> dibblego: please, the formalisation
16:43:50 * basti_ is silent
16:43:51 <dibblego> why is pointing out a mistake an attack!! I blame western culture
16:43:51 <Philippa> dibblego: yes you are, whether you intend it or not
16:44:00 <vincenz> dibblego: Can we stick to the topic
16:44:03 <dibblego> nonsense
16:44:06 <vincenz> dibblego: Could you please give us the formalization?
16:44:07 <dibblego> vincenz, definitely
16:44:11 <dibblego> vincenz, no
16:44:25 <dibblego> is that such a big deal?
16:44:29 <vincenz> A motivating example?
16:44:34 <SyntaxNinja> @seen audreyt
16:44:34 <lambdabot> audreyt is in #ghc, #haskell and #perl6. I don't know when audreyt last spoke.
16:44:45 <basti_> people should make the difference between "attacking a point" and "attacking a person", and accusations of either.
16:44:59 <dibblego> vincenz, my boss claims the equals/hashCode methods of java.lang.Object are a good place to start explaining it - I'm not so sure
16:45:13 <Philippa> basti_: agreed. I think playing the "people here don't get it" card early is attacking people
16:45:23 <dibblego> basti_, I do not wish to attack any person at all - and if I appear so, then please understand that it is the point that matters to me
16:45:42 <basti_> I was talking very generally.
16:45:48 <basti_> I'm not angry at anyone here.
16:45:51 <vincenz> dibblego: so basically you're rehashing your boss's words without having a solid foundation and withoout willingness to explore the possibility that A) he might be wrong B) it might be ag ood idea to discuss this constructively instead of just flifing out ideas so that we might get to the kernel of truth and C) that java ain't an ideal language
16:46:03 <dibblego> Philippa, no it isn't - it's simply a concession that should be accepted it - I'll bet they can get it if explained and reasoned (why am I here and not elsewhere?)
16:46:13 <Philippa> and D) Java's model of OO is significantly different from others
16:46:20 <dibblego> Philippa, nobody understand anything if they've never seen it
16:46:26 <Philippa> dibblego: so *show us*
16:46:33 <dibblego> Philippa, my ponit precisely
16:46:36 <vincenz> Hence "motivating example"
16:46:37 <Philippa> because many of us have spent a long time analysing the capabilities of OO code
16:46:39 <dibblego> I am not attacking a person
16:46:50 <dibblego> regardless of whether or not what I show you is correct or not
16:46:53 <Philippa> many of us have spent a long time analysis the semantics of programming languages in general
16:47:04 <dibblego> great, then I choose my audience well
16:47:10 <dibblego> thank you for the complement
16:47:14 <dibblego> crikeys
16:47:32 <dibblego> I want to smash all televisions when I see this "you said I am wrong, therefore you attacked me" bullshit
16:47:36 <vincenz> dibblego: can we at least have a motivating example?
16:47:46 <dibblego> vincenz, within the next few weeks
16:47:49 <Philippa> dibblego: I didn't say that, either. Get on with it.
16:47:58 <vincenz> dibblego: then until then, as most scientists do, don't say things
16:48:00 <Philippa> okay, fine. Then conversation over 'til you've got the goods
16:48:10 <vincenz> can't present a paper without AT LEAST a motivating example
16:48:12 <dibblego> vincenz, I didn't in fact, we digressed from the original point
16:48:19 <dibblego> vincenz, agreed
16:48:26 <vincenz> dibblego: which was that you made a bold claim that "OO is flawed" without any motivation whatsoever
16:48:35 <vincenz> You might be right, who knnows
16:48:42 <dibblego> vincenz, only because someone asked and I object to lying
16:48:43 <vincenz> but until you can demonstrate it, statements are pointless
16:48:48 <dibblego> I agree
16:48:57 <basti_> the problem isn't that we wouldn't agree to OO being flawed
16:49:04 <dibblego> gah
16:49:05 <int-e> OO is hard to do in Haskell, so there must be something wrong with it ;)
16:49:13 <dibblego> does anyone even remember that digression?
16:49:19 <vincenz> Ok
16:49:20 <vincenz> So
16:49:24 <dibblego> this focus on a controversial statement is completely irrelevant
16:49:24 <chessguy> lol, int-e
16:49:24 <vincenz> next point of discussion
16:49:38 <vincenz> @users
16:49:48 * vincenz pokes lambdabot 
16:49:49 <vincenz> @bot
16:49:51 <int-e> chessguy: I'm struggling with that actually. I can't think of a non-OO way to represent GUIs nicely.
16:49:51 <dibblego> someone said "what about smalltalk", my position is that smalltalk does not invalidate "OO is flawed" -- simple as that
16:49:54 <lambdabot> seen module failed: IRCRaised thread killed
16:49:54 <lambdabot> :)
16:49:59 <vincenz> holy cow
16:50:09 <dibblego> anyway, the answer is no
16:50:10 <dibblego> thanks
16:50:12 <vincenz> dibblego: Don't make more bold statements after agreeing that's not a good idea
16:50:20 <chessguy> int-e, i saw a package recently that looked like it did GUI stuff
16:50:25 <dibblego> vincenz, eh?
16:50:27 <vincenz> > 1
16:50:28 <lambdabot>  1
16:50:30 <chessguy> i didn't look at it really at all
16:50:32 <vincenz> @users
16:50:35 <lambdabot> Maximum users seen in #haskell: 241, currently: 215 (89.2%), active: 25 (11.6%)
16:50:40 <dibblego> vincenz, isn't that what happened?
16:50:48 <vincenz> > replicate 215 "lambda-cookie"
16:50:49 <lambdabot>  ["lambda-cookie","lambda-cookie","lambda-cookie","lambda-cookie","lambda-coo...
16:50:49 <dibblego> vincenz, which made the discussion take a right-angled corner?
16:51:04 <vincenz> dibblego: I'm not reentering a discussion we just agreed upon was useless
16:51:14 <dibblego> vincenz, fair enough
16:51:18 <vincenz> Everyone take a lambda-cookie
16:51:20 <chessguy> it was called AllFudgets
16:51:25 <dolio> int-e: Functional reactive programming?
16:51:30 <vincenz> fran
16:52:13 <vincenz> > let 2 + 2 = 5 in 2 + 2
16:52:14 <lambdabot>  5
16:52:18 <Philippa> the obvious way to use FRP to run a GUI effectively gives you OO++, though
16:52:29 <Philippa> very much a message-passing kind of environment
16:53:08 <chessguy> OO++?
16:53:23 <vincenz> chessguy: c++'s model
16:53:27 <Philippa> vincenz: no
16:53:30 <vincenz> :P
16:53:34 <vincenz> Philippa: that was sarcasm
16:53:34 <Philippa> just "OO plus a bit"
16:53:47 <int-e> Possibly. I should look at FRP again. I think the last time I did it I wasn't ready for it.
16:53:51 <Oliver> I'm not convinced it's a complete solution in it's current form, FRP seems trickier to use than it promises
16:53:51 <chessguy> what are you talking about in the "little bit"
16:53:53 <vincenz> c was oo, so c++ was oo++
16:53:57 <chessguy> templates?
16:54:18 <Philippa> C wasn't OO, though
16:54:20 <vincenz> I doubt templates are truly necessary in a clean oo system
16:54:24 <vincenz> Philippa: again, sarcasm L/
16:54:25 <vincenz> :/
16:54:36 <Philippa> chessguy: the control over message flow
16:54:37 <vincenz> c++ is definitely not a clean model of oo
16:54:43 <Oliver> OO gui's are a piece of pie to figure out, FRP is non obvious how to get many things done
16:54:49 <int-e> c++ isn't much of an OO language.
16:54:49 <Philippa> C++ isn't a clean model of anything but C++
16:55:02 <vincenz> Philippa: which would be what, spaghetti code?
16:55:12 <Philippa> Oliver: "OO is easy, FP is hard" - give it a few years for idioms to develop
16:55:13 <vincenz> :)
16:55:16 <pejo> vincenz, since templates are a bunch of things, what is it you consider not needed?
16:55:19 <obseler0n> int-e: it is general - purpose
16:55:21 <dolio> I suppose it's a different perspective on OO.
16:55:32 <dolio> Instead of GUI elements being objects with mutable state, they're stream processors.
16:55:32 <Philippa> yeah, whatever shape the foot C++ can shoot you in it
16:55:42 <Oliver> Philippa, No, "OO is easy, FP is easy, FRP is hard" :)
16:55:52 <vincenz> Philippa: I disagree on that point of view, I think the complexity is always there. I think that OO hides it in conventsions regarding message names.  You need to know that for doing X you need to call doX on objects that should be capable of X
16:55:55 <obseler0n> cannot see the point in critisizing it, C++ is an excellent general purpose tool
16:55:56 <dibblego> as an experiment my 5 year old is learning Haskell - he has already gone beyond what I think my ex-colleagues (IBM) would ever be able to understand
16:56:00 <int-e> dolio: that sounds a bit like MVC (model-view-controller) to me.
16:56:21 <vincenz> OO moves complexity from teh language to the library
16:56:24 <dolio> int-e: Did you watch the continue/flapjax video?
16:56:30 <dibblego> I don't think FP is hard to learn; I think imperative is hard to unlearn
16:56:37 <pejo> obseler0n, hardly inflammatory statement at all.
16:56:38 <vincenz> point in case, smalltalk.  The language is ultra simple, it tkaes quite a while to get into the layout of the classes and methods
16:56:41 <int-e> dolio: which I guess is the abstraction that FRP provides. Or so I hope.
16:56:49 <basti_> good night
16:56:49 <int-e> dolio: Yes, I watched it.
16:56:54 <Philippa> dibblego: I regularly teach catamorphisms to people who Don't Do Maths...
16:56:57 <chessguy> dolio: what video?
16:57:00 <dolio> int-e: flapjax is essentially FRP.
16:57:10 <dolio> int-e: But he called it MVC.
16:57:12 <SamB> Philippa: what do you call them?
16:57:14 <vincenz> dibblego: woot, heard about flapjax?
16:57:23 <Philippa> dolio: the stream processors can become stateful
16:57:26 <dibblego> vincenz, no I haven't, do they taste nice? :)
16:57:32 <vincenz> whoops
16:57:37 * vincenz retargets his TAB-completion to dolio 
16:57:46 <Philippa> SamB: so far I've been, er, pointless about them :-) Though I'll say fold, and use length on lists as a motivating example for the name
16:58:19 <Philippa> dolio: FCVO "stateful", of course
16:58:21 <dibblego> Philippa, woul;d you say you are distorting reality a little in order to appeal to your audience?
16:58:21 <vincenz> "look little kids, I have this piece of cloth and if I fold it up, I get the lenght as the number of times it is stacked on top of each other"
16:59:16 <Philippa> dibblego: I've not given a fully formal definition of an initial algebra to them, and sometimes I've not bothered to define multiplication or subtraction on my Nat type before using it, but that's about it
16:59:17 <obseler0n> pejo: well it aint a bad tool
16:59:23 <Philippa> oh, and I'm not doing it in terms of category theory
16:59:35 <mlh> FP may be hard to teach but I suspect it's more the teacher assuming too much and using jargon unecessarily.
16:59:38 <dolio> Philippa: FCVO?
16:59:45 <Philippa> For Certain Values Of
16:59:49 <SamB> Philippa: heh
16:59:51 <mlh> not to mention being bored to death with fibonacci and quicksort
17:00:07 <Philippa> what you actually have is a family of stream processors parameterised on the most recent stage change, being swapped in and out as need be. But same difference.
17:00:15 <SamB> people who Don't Do Math probably don't want to know about something called an initial algebra
17:00:17 <dolio> Philippa: Ah, yeah, well, isn't that the point of using stream processors?  To model state in a way that doesn't technically use what we think of as state?
17:00:20 <SamB> no matter how nice it is
17:00:28 <vincenz> SamB: what is it
17:00:36 <dolio> Philippa: Like SICP's stream model of a bank account?
17:00:45 <SamB> vincenz: I don't know
17:00:54 <SamB> but the name would scare people who Don't Know Math
17:00:58 <SamB> er, Don't Do Math
17:01:02 <Philippa> I'd say it's more to stop the state slipping under our fingers. Same difference though
17:01:23 <Philippa> I might've told one person the term, but I'd have told him to ignore it too
17:01:30 <Philippa> and just talked about types
17:01:45 <Philippa> he's asked to be taught haskell sometime he's got some spare time
17:02:09 <Philippa> there was a real lights-on moment when I explained that arithmetic expressions are tree-structured
17:02:20 <Philippa> I forget whether I pointed out to him that evaluating them effectively is too :-)
17:02:27 <SamB> yeah, well, algebraic datatypes aren't very intimidating
17:02:36 <Philippa> I did point that out to a friend who didn't even manage GCSE maths
17:03:05 <dolio> Incidentally, the continue/flapjax video is here, for those who wanted to know: http://tinyurl.com/rh7zz
17:03:14 <int-e> . o O ( help! somebody tied a knot into my tree! )
17:03:47 <chessguy> dolio, thanks
17:04:49 <Philippa> I have a sneaking suspicion there's a generation of people out there who would've got algebra if only they'd been shown a direct tree representation of it rather than the usual infix stuff
17:05:44 <SamB> mmm
17:06:04 <SamB> I thought everyone knew algebra was trees!
17:07:05 <Philippa> they don't really teach that at school normally
17:07:14 <sris> How can i prevent "There are " to get printed before the calculation in the let block is finshed?
17:07:15 <sris> http://paste.lisp.org/display/26941
17:07:23 <SamB> hmm
17:07:26 <SamB> I suppose not
17:07:31 <SamB> they really ought to!
17:07:47 <SamB> I suppose I did pick that up from programming...
17:08:15 <Philippa> I do like arithmetic evaluators as example folds
17:08:27 <Philippa> they're a wonderful example for most non-programmers
17:09:06 <SamB> programmers too, probably
17:11:28 <Philippa> I think for most programmers they're merely a good example
17:11:36 <Philippa> not quite the same mind-blowing factor
17:18:02 <Philippa> I should go to bed - 'night
17:18:12 <dibblego> g'night
17:31:33 <Oliver> sris, What do you mean "before"?
17:31:58 <sris> well, when i run the applicaton
17:32:10 <sris> it shows "There are "
17:32:27 <sjanssen> @hoogle evaluate -- for sris
17:32:27 <lambdabot> Hoogle Error: Parse Error: Unexpected character '-- for sri'
17:32:36 <sjanssen> @hoogle evaluate
17:32:36 <lambdabot> Control.Exception.evaluate :: a -> IO a
17:32:37 <lambdabot> Test.QuickCheck.evaluate :: Testable a => a -> Gen Result
17:32:37 <sris> and it halts, for as long as the calculation of alignments take
17:32:46 <sris> and then prints the result
17:32:59 <sris> sorry for fragmented typing :)
17:33:33 <sjanssen> sris: you can rewrite to something like do n <- evaluate lengthyComputation; putStrLn ("foo" ++ n)
17:34:16 <sjanssen> hmm, didn't -- after Hoogle commands work before, or am I crazy?
17:36:13 <Oliver> sris, Ah, you'd have to flush the "There are" first ... (not sure how entirely)
17:36:28 <Oliver> sris, Have a look at the IO docs
17:36:52 <sjanssen> Oliver: sris wants the opposite behavior, ie flushing only after the entire strings is ready
17:36:53 <sris> sjanssen, Control Exception, where do i find that?
17:37:08 <sjanssen> sris: import Control.Exception ?
17:37:28 <sjanssen> should be there unless you're using some ancient Haskell system
17:37:55 <sris> i dont know actually, the reference i've got from my teacher is the 98 report
17:38:39 <sjanssen> sris: if it is important to stay Haskell '98, then you can use seq instead of evaluate
17:39:01 <sjanssen> @docs Control.Exception
17:39:01 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/base/Control-Exception.html
17:44:55 <sris> sjanssen, i dont really understan how to use seq
17:46:18 <sjanssen> sris: "seq x y" evaluates x to weak head normal form (ie. evaluates enough to reveal the first contructor), then returns y
17:47:21 <sjanssen> so if you wrote: seq n (putStrLn $ "stuff" ++ n), n is evaluated (to WHNF), then the putStrLn action can happen
17:47:43 <sris> i see
17:48:11 <dmwit> "This is how you're supposed to program, no functional crap."
17:48:13 <dmwit> Nice.
17:48:32 <SamB> dmwit: huh?
17:48:45 <dmwit> Mmmm... in the continuation video.
17:48:54 <dmwit> Probably should have prefaced that... =P
17:49:02 <SamB> "continuation video"?
17:50:22 <dmwit> <dolio> Incidentally, the continue/flapjax video is here, for those who wanted to know: http://tinyurl.com/rh7zz
17:50:50 <Cale> dmwit: Of course, all of those comments are quite tongue-in-cheek
17:51:07 <Cale> He is very much a functional programming person :)
17:51:32 <dmwit> Yes, but with a big "but".
17:51:37 <dmwit> I think.
17:52:04 <dmwit> At least, he seems serious when he claims that state isn't the problem, but rather the dependencies between mutable state.
17:56:33 <dibblego> does he genuinely believe we should all be using continuation passing, or is he saying it sarcastically since continuation passing and functional programming are symbiotic?
17:57:39 <dmwit> It really is hard to tell sometimes.
17:57:46 <int-e> hmm, did you see explicit continuation passing in any of the javascriptish code?
17:58:07 <int-e> I don't think he wants it to be more than an implementation technique, hidden from the programmer.
17:59:04 <dibblego> dmwit, perhaps he is intentional about making it hard to tell as well :)
17:59:13 <dmwit> Yes. =)
17:59:32 <dibblego> downloading 80MB leaves a lot of time to speculate about what it might be
17:59:59 <dibblego> I guess he didn't say it in under a minute :)
18:00:40 <dmwit> No, it's nearly thirty minutes in.
18:01:18 <dolio> He shows the ideal web programming example pretty quickly.
18:01:38 <dibblego> 30 minutes!! I'll have to wait until lunch
18:01:56 <dibblego> is it more educational than comedy? or something else?
18:02:21 <dmwit> It's educational.
18:02:28 <dolio> It's a pitch of some sort.
18:02:36 <dmwit> I find it pretty interesting stuff, even though I've never done any web programming before.
18:02:48 <dibblego> sounds good, I might propose it for lunch for all of us, since we DO NOT HAVE A FOOSBALL TABLE
18:03:03 <dolio> Heh, suffice it to say that his model is far and away better than, say, PHP.
18:03:12 <SamB> dibblego: how do you eat while playing foosball anyway?
18:03:23 <dibblego> SamB, I don't do it, but others try it
18:03:32 <dibblego> SamB, at my previous place of employment that is
18:04:09 <dibblego> I think everyone tries it at least once
18:04:19 <dmwit> =D
18:13:33 <SamB> oh, that kind of continuation
18:28:56 <musasabi> vegai: see the HAppS mailing list for an integrated way to manage users easily.
18:29:29 <musasabi> It seemed quite often requested and thus a prime candidate for a late night hack.
18:39:52 <SamB> this guy is cracking me up...
18:43:23 <SamB> it isn't very convincing when he keeps dissing FP with a lambda in the lower-right corner of the screen...
18:46:56 <dolio> The secret to selling FP to the masses is to tell them it's not FP. :)
18:47:50 <SamB> but you notice the audience keeps laughing when he does that ;-)
18:48:23 <dolio> :) Not everyone seems convinced at the end.
18:48:29 <wchogg> What are you watching, SamB?
18:48:39 <SamB> <dmwit> <dolio> Incidentally, the continue/flapjax video is here, for those who wanted to know: http://tinyurl.com/rh7zz
18:49:03 <wchogg> Ah, okay.
18:49:08 <dolio> Someone asks something like, "stream programming has been around for a while... but what happens when 'reality eventually catches up with you.'"
18:49:19 <dolio> I found his response amusing.
18:49:27 <dolio> "What reality? We have working applications."
18:49:38 <SamB> I thought the idea was for the program to keep up with reality
18:51:30 <dons> ?uptime
18:51:30 <lambdabot> uptime: 2d 23h 27m 46s, longest uptime: 2d 23h 27m 46s
18:52:35 <SamB> hmm, he mentioned reactivity!
19:06:42 <dons> wow, these are just amazing, http://www.thepuzzlefactory.com/2006_chalk.cfm
19:06:45 <lambdabot> Title: Chalk Drawings at PuzzleFactory.com, http://tinyurl.com/ofev7
19:07:21 <dolio> They look three dimensional.
19:08:49 <SamB> yes. from one angle.
19:09:25 <dons> a sophisticated version of the kind of logos that are drawing on football fields for tv
19:10:29 <SamB> the self portrait looks a bit flat
19:11:00 <SamB> assuming he isn't wearing makeup in that one
19:12:09 <SamB> I bet the beer with no shadow is the real beer ;-)
19:12:38 <SamB> hmm, maybe not...
19:12:49 <dons> heh
19:13:06 * SamB notices the shadows on the background people...
19:18:15 <Cale> The beer on the left is obviously the real one :)
19:18:45 <Cale> the last image is particularly impressive
19:18:49 <dons> yeah
19:19:33 <SamB> mmmm
19:19:34 <SamB> yeah
19:19:54 <SamB> good use of surroundings ;-)
19:20:15 <Cale> http://users.skynet.be/J.Beever/pave.htm
19:20:17 <lambdabot> Title: Julian Beever's pavement drawings
19:22:33 <dibblego> I don't think he is tongue-in-cheek about everything
19:24:11 <Cale> http://users.skynet.be/J.Beever/littlelarge.html
19:24:15 <lambdabot> Title: Pavement drawing : Little and Large, http://tinyurl.com/j6yh4
19:24:15 <Cale> heheh
19:26:10 <dmwit> dibblego: I don't think so either.
19:26:25 <Cale> He also has some rather good impressionist paintings.
19:27:21 <sjanssen> @keal
19:27:21 <lambdabot> i have basically written a proof that shows an assumption is wrong
19:29:25 <dons> heh
19:50:57 <sjanssen> @quote
19:50:57 <lambdabot> malig says: I have to admit I'm still stunned when "tying the knot" actually works. it's like I just performed the kind of magic that normally requires a lot more goat's blood
19:51:11 <sjanssen> mmm goat's blood
19:54:38 <dons> part of a complete breakfast
19:55:28 <glguy> Jak si. masz
19:57:55 <monochrom> feta cheese helps understand fixed points
19:58:13 <monochrom> lazy evaluation helps realize them
19:58:43 <dons> I prefer silken tofu for my fixed points
19:59:09 <dons> sometimes this channel is weird
20:03:36 <glguy> booyakasha
20:04:04 <sjanssen> @remember dons sometimes this channel is weird
20:08:20 * lispy waves at #haskell
20:10:02 <Korollary> how did you know he was about to join?
20:10:45 * lispy cackles
20:18:51 <monochrom> Amazing!
20:19:53 <__peter> hi, i'm trying to make a simple calculator language in Haskell using Parsec, and i want to add variables to it. what would be the best way to store the data from the variables in Haskell?
20:22:13 <__peter> my first thought is a hashtable, but i've heard there is performance problems with GHC's hashtables...
20:22:53 <lispy> __peter: i don't claim to know the best way, but what about a Map?
20:23:14 <lispy> __peter: also,  if it's a simple calculator prefermance probably won't be a problem
20:23:19 <dons> __peter: just use a Map. :)
20:23:22 <Korollary> how many variables are you talking about
20:23:42 <RyanT5000> so, i'm considering building a parser for legal citations (i'm in law school right now); the problem is that it'll only be useful if it can recognize malformed citations and correct them (obviously assuming the errors are relatively limited).  What's a good methodology and/or library for building a parser that's robust to human error?
20:23:56 <dons> the hashtable "performance" problems are in the realm of 100s of megabytes, when compared to optimised C hashtables. This has mostly been fixed in recent ghc 6.6
20:24:06 <RyanT5000> (note that the grammar in question is relatively simple - no recursion, my guess is that it's regular)
20:24:12 <__peter> lispy, dons: ok
20:24:28 <lispy> RyanT5000: hmm...learning algorithms are sometimes robust to human generated data
20:24:38 <__peter> Korollary: well, i'm thinking here only probably less than a couple hundred maximum
20:24:40 <Korollary> RyanT5000: Doesnt that largely depend on the grammar?
20:25:09 <lispy> RyanT5000: i've heard of the existence of error correcting parsers...maybe you should check there...
20:25:14 <__peter> Korollary: but it would be nice to be able to have quite a few, just in princable, if i decided to make a more serios language
20:25:19 <lispy> RyanT5000: but i can't help you with them :)
20:25:45 <RyanT5000> Korollary: perhaps, but i was looking for more general advice; i could of course just write a parser by hand (the question is which is easier)
20:25:52 <RyanT5000> alright, cool
20:25:59 <RyanT5000> man, law school is so interesting
20:26:04 <lispy> __peter: in my experienc, it's much better to go with a clean and simple first implementation and change it later as the need arises
20:26:13 <RyanT5000> i spend my days discussing stuff that *can't be formalized*
20:26:24 <Korollary> RyanT5000: I hear there are women there.
20:26:25 <dons> __peter: Map is a good start. if you need to write a real world language, then using HsJudy for the symbol table would be an option (as pugs does)
20:26:34 <__peter> lispy: ok
20:26:41 <RyanT5000> Korollary: there are, in fact; although they are not particularly known for their beauty
20:26:49 <glguy> one of the examples in Haskell SOE has: "moven n = mapM_ (const move) [1..n]". Is there any compelling reason not to use "moven n = replicateM_ n move" instead?
20:26:50 <__peter> dons: ah, i've never heard of HsJudy, i'll check that out. thanks
20:27:02 <__peter> dons: that sounds like it may be what i was looking for
20:27:30 <dons> probably Map won't be a problem, and will be easy (that's what I've used for small languages before)
20:27:36 <RyanT5000> definitely better than comp sci at my undergrad - my operating systems class (a required class) had 200 students and only 4 women
20:27:42 <dons> but if you find that it is a bottleneck, just swap in HsJudy.
20:28:03 <dons> RyanT5000: scary. we have maybe 30/70 women/men (I think).
20:28:10 <dons> certainly many many more than 4 / 200
20:28:11 <lispy> glguy: i can't tell if those are equivalent but i would trust that you've checked the details.  I don't know of any efficiency concerns with mapM_ vs. replicateM_
20:28:29 <__peter> dons: ok, that sounds good. thanks for the advice
20:28:34 <RyanT5000> yeah, well my undergrad overall was 1:3 or 1:4
20:29:55 <RyanT5000> and most of the women were in Electronic Media Arts and Communications, chem, bio, or one of the "less geeky sciences" (my undergrad didn't have any "real" humanities)
20:30:20 <RyanT5000> my girlfriend was EMAC until i convinced her to pick up a second major of comp sci (so she could actually get a job at some point)
20:31:06 <Korollary> Did she get the degree?
20:31:09 <RyanT5000> not yet
20:31:17 <RyanT5000> she's a sophomore
20:31:29 <RyanT5000> (i'm young so it's not weird, lol)
20:31:42 <Korollary> who said ti would be
20:32:12 <glguy> RyanT5000: just a little defensive, eh?
20:32:21 <RyanT5000> no one; it was a pre-emptive strike against someone connecting the average age of a law student (23 to 25) to the average age of a 2nd year undergrad
20:32:30 <RyanT5000> :-/
20:32:40 <null_I_win> pre-emptive strikes rock, and don't ever call me that again
20:32:55 <glguy> wth did you come from??
20:32:58 <Korollary> 25 & 19 ? totally appropriate
20:33:11 <null_I_win> glguy, don't talk to me in that tone!
20:33:13 <Korollary> I dream to go out with a 21 year old when I am in my 40s
20:33:23 <glguy> lol
20:33:32 <Korollary> gold chain, pony tail, porsche. The whole works.
20:33:42 <RyanT5000> Korollary: lol you have a point
20:34:16 <stepcut> Korollary: you don't even need hair: http://www.femalefirst.co.uk/celebrity/13722004.htm
20:34:20 <lambdabot> Title: Patrick Stewart - Patrick Stewart romances girl 39 years younger, http://tinyurl.com/6w8ln
20:34:46 <RyanT5000> lol
20:34:54 <RyanT5000> yeah but he's *patrick stewart*
20:34:59 <stepcut> well...
20:35:11 <RyanT5000> otoh, that could be seen as a violation of the prime directive
20:35:14 <sjanssen> yeah, the man really is a stud
20:35:30 <sjanssen> ever seen him on Risa? (hope I got the spelling right)
20:35:40 <RyanT5000> lol yeah i think you did get the spelling right
20:36:26 <sjanssen> now I gotta find a picture . . .
20:36:31 <monochrom> Haha violation of the prime directive
20:36:56 <dons> heh
20:40:22 <null_I_win> dmwit, I am going to send an email to Shriram Krishnamurthi and try to convince him that he is wrong at some point onward - I think the introduction is extremely good
20:40:37 <dmwit> Hum.
20:41:02 <null_I_win> what is hum?
20:41:04 <glguy> null_I_win: continue webserver guy?
20:41:13 <null_I_win> glguy, yes
20:41:20 <dmwit> Are you terribly certain he would stand behind what he said?
20:41:29 <dmwit> Say, if he were talking in this room?
20:41:29 <dibblego> dmwit, no, first I will ask
20:41:48 <dmwit> But, if you do...
20:41:50 <dmwit> How fun!
20:41:51 <dmwit> =)
20:41:57 <dibblego> dmwit, who is he?
20:42:06 <dmwit> I don't know.
20:42:14 <dmwit> I never heard of him before today.
20:42:30 <dibblego> why did you ask that question?
20:42:41 <dibblego> I am not sure if he is tongue-in-cheek - is that what you mean?
20:43:04 <\z> RyanT5000: What kind of legal citations are you trying to parse?
20:43:14 <RyanT5000> Bluebook, 18th edition
20:43:41 <\z> Um, I had to parse bluebook citations for my last project, and the grammar is much more regular than you would expect
20:43:46 <svref> is there a doubly-linked-list library somewhere, or should I just roll my own?
20:43:54 <dibblego> lawBroken :: CameraInput -> LegalDocument -> Bool
20:43:57 <RyanT5000> really? what was your project?
20:44:02 <\z> you need a few lookup tables and a handful of rules, and all the valid citations fall out
20:44:09 <\z> a search language for a legal search engine.
20:44:17 <RyanT5000> cool
20:44:21 <dmwit> I just think that he's happy to work in the functional world.
20:44:25 <\z> the tricksy ones are USC and CFR, which have to be handled as special cases.
20:44:28 <\z> PL and EO as well
20:44:35 <dmwit> He just wants some other people who won't give it a chance to reap some of the benefits.
20:44:43 <RyanT5000> right, i understand that the grammar is very simple; the problem is being robust to user error
20:44:45 <\z> But everything else is pretty much VOL REPORTER SECTION
20:44:50 <dibblego> dmwit, so you think he is entirely tongue-in-cheek?
20:45:03 <dmwit> No, not exactly...
20:45:07 <dmwit> I'm not sure what I think. =P
20:45:09 <\z> where REPORTER has an optional 2d and 3d suffix
20:45:23 <dibblego> dmwit, I think he honestly believes that pure FP and the "real world" contain contradictions - something I disagree with
20:45:38 <dibblego> dmwit, I'll just send an email and ask - I am not afraid :)
20:45:38 <\z> if you do the math, all valid citations meet maybe a dozen rules, total
20:45:49 <dmwit> dibblego: I think you are right about that.
20:45:53 <\z> easy enough to do in parsec
20:45:58 <dmwit> He definitely finds a dichotomy between fp/world.
20:46:15 <RyanT5000> \z, i need to do stuff like "_Wamsley v. Wamsley_, 345 Md. 142 (1998)"
20:46:23 <RyanT5000> right, the problem is when someone writes something that "obviously" has some meaning, but is improperly formatted
20:46:33 <RyanT5000> automatically reformatting it would be valuable
20:46:44 <dmwit> But I mean, he basically says, most mutable state is because the programmer just isn't good enough to write it in a functional way.
20:46:46 <\z> Are you trying to match the entire string, or just the '345 Md. 142' part?
20:46:50 <RyanT5000> the entire thing
20:46:59 <\z> Hm.  That gets a little bit trickier.
20:47:02 <RyanT5000> yeah
20:47:10 <RyanT5000> the idea is to have integration with MS Word, etc.
20:47:17 <RyanT5000> "Find improper citations"
20:47:18 <dibblego> dmwit, there was a point where he says "there is natural state and unnatural state" -- I think this is a crucial mistake
20:47:22 <RyanT5000> "Suggest corrections"
20:47:23 <dibblego> dmwit, I am trying to find it again
20:47:24 <\z> I'm not a lawyer nor do I play one on TV, but '345 Md. 142' is supposed to be sufficient for citing the case.
20:47:26 <RyanT5000> sort of like spell check for citations
20:47:31 <dmwit> I know what you're talking about.
20:47:40 <dmwit> He calls, fe, the mouse position "natural state".
20:47:42 <RyanT5000> \z, that's a "short form" citation or something
20:47:54 <dmwit> I think this is pretty reasonable, no?
20:47:59 <Korollary> dmwit: Is this from the lang.net video of his?
20:48:02 <dmwit> Have a look at FRAN, for example.
20:48:03 <\z> RyanT5000: Yeah, and the 'short form' is exactly what you use in a search engine.  Go figure.  ;-)
20:48:03 <dibblego> dmwit, right, and he also undermines the value of monads (perhaps sarcastically?), which suggests he might not understand them well
20:48:15 <RyanT5000> one of the slaveries law students are subjected to is called "subciting"
20:48:28 <dmwit> Korollary: I watched one from microsoft.com
20:48:34 <RyanT5000> it's where you go in and check all the footnotes and citations in a given segment of text of a journal article
20:48:34 <dmwit> Maybe it is the same, maybe not, I don't know.
20:48:38 <\z> RyanT5000: So, are you trying to find instances like 'Foo v. Bar, 345 MD 142' and flag it as invalid?
20:48:46 <RyanT5000> right
20:48:49 <Korollary> dmwit: It's probably the same. I remember that bit.
20:48:52 <\z> Ah.  That's a hard problem.  :-)
20:48:55 <RyanT5000> yeah
20:49:12 <RyanT5000> i wonder if learning algorithms would be appropriate
20:49:50 <RyanT5000> maybe some kind of general grammar parser which is inviolable, but then subparsers which are neural nets
20:49:50 <RyanT5000> e.g.: require Author, Title, Source Location, Date
20:49:54 <\z> RyanT5000: from what I remember about the blue book, that's overkill.  You need a good parser, some lookup tables, a handful of rules and a healthy dose of brute force.
20:49:57 <RyanT5000> but within that, find missing commas, etc.
20:50:04 <RyanT5000> probably true
20:50:06 <dibblego> I can't make out his email address
20:50:17 <RyanT5000> which is good because i don't know the first thing about neural nets
20:50:19 <dibblego> http://www.cs.brown.edu/~sk/Contact/ email addresses cannot contain + ?
20:50:23 <lambdabot> Title: Shriram Krishnamurthi: Contact Information
20:50:26 <\z> So, if you can find the short cite within a citation, you can probably figure out the case name and year
20:50:26 <dmwit> Yes it can.
20:50:32 <dibblego> ok then
20:50:37 <dmwit> It goes to the same place as without anything between the + and @.
20:50:45 <\z> And then figure out when the casename is mispelt.  :-)
20:50:45 <RyanT5000> \z, yeah; if i can use westlaw or lexis to look it up
20:51:01 <dmwit> (Good way to catch spam harvesters: realaddress+SPAM@whatever.com)
20:51:12 <RyanT5000> of course, then there are the westlaw and lexis citation formats, which are basically bastardizations of the bluebook format
20:51:36 <dibblego> ah righto
20:51:45 <\z> Again, I'm not a lawyer, but my expectation is that you're dealing with a few cases that focus on a specific portion of case law
20:51:55 <\z> so building up a dictionary of known cases shouldn't be too difficult
20:52:00 <\z> you can just verify against that.
20:52:25 <\z> And if the short form of the citation isn't found, fall back based on the case name, assuming that's spelled properly.
20:52:26 <RyanT5000> eh, not really; maybe for a particular article, but this tool won't be useful if you need to go in and manually add cases
20:52:45 <RyanT5000> (obviously i can do so as a test, though)
20:52:48 <\z> right, at the article level
20:53:05 <RyanT5000> the best thing to do would be get a WestLaw and a Lexis API
20:53:05 <\z> but if you're dealing with IP law, for example, I'd expect some cases are cited multiple times
20:53:17 <\z> so it's a scaling issue.
20:53:22 <RyanT5000> and then have the user give their corresponding password
20:53:24 <\z> fixing one article is hard.  fixing a thousand articles is easier.
20:53:29 <RyanT5000> yeah
20:53:33 <\z> unless you're not focused on a single area of law
20:53:43 <RyanT5000> well, i, personally, am
20:53:45 <\z> Did you see dons' tutbot earlier today?
20:53:50 <lispy> tutbot+
20:53:53 <lispy> er
20:53:54 <lispy> tutbot?
20:54:00 <lispy> dons: you have a tutbot now?
20:54:13 <lispy> dons: related to the stuff i was talking about with you recentely?
20:54:15 <RyanT5000> but the idea is to make this a generalized tool
20:54:17 * lispy gets excited
20:54:20 * lispy starts hopping
20:54:26 <RyanT5000> no, i didn't
20:54:29 <RyanT5000> what is tutbot?
20:54:41 * lispy sits on the edge of hi seat
20:55:01 <\z> http://www.cse.unsw.edu.au/~dons/tmp/bot.hs
20:55:14 <\z> an IRC bot for an article dons is writing. about 100 lines of code
20:55:27 <dibblego> 30:50 "Function programming is obviously not a very good idea, the world is obviously stateful" -- I think he is serious here
20:56:02 <dibblego> 30:45 even
20:56:02 <\z> really cool.  strip all the fat yet still produce a demonstrable IRC bot
20:56:03 <lispy> ah
20:56:21 <Korollary> dibblego: I dont think he meant FP there.
20:56:48 <dibblego> Korollary, he meant pure FP didn't he? he just finished bagging monads
20:57:14 <Korollary> possibly
20:57:18 <svref> will "deriving Eq" work on cyclic datatypes?
20:57:32 <dibblego> I'm pretty sure he meant pure FP, but whether or not he was serious...
20:57:35 <dons> lispy: ?
20:58:11 <\z> dons: tutbot+++ ;-)
20:58:13 <dmwit> dibblego: On the other hand, he is working on FrTime, where I think the Fr stands for functional reactive...
20:58:45 <dons> !id yow!
20:58:46 <tutbot> yow!
20:58:58 <dibblego> dmwit, I'll just ask him
20:59:35 <dmwit> !yow
20:59:45 <dmwit> !help
20:59:47 <dmwit> !list
20:59:48 <Korollary> dibblego: Why do you care what he thinks anyway?
20:59:54 <dons> !uptime
20:59:55 <tutbot> 1m 48s
20:59:57 <dons> !id x
20:59:58 <tutbot> x
21:00:02 <dons> !id that's all folks
21:00:03 <dmwit> !id !id x
21:00:03 <tutbot> that's all folks
21:00:03 <dibblego> Korollary, I care about what I think - I might be wrong
21:00:05 <tutbot> !id x
21:00:11 <dons> !id i'm a tut bot after all
21:00:13 <tutbot> i'm a tut bot after all
21:00:28 <dmwit> !id /msg dmwit hi
21:00:30 <tutbot> /msg dmwit hi
21:00:34 <dons> \z, you found it useful to read the src?
21:00:41 <\z> dons: yep
21:00:48 <dons> (/me doesn't know how tutbot came up in conversation)
21:00:49 <\z> the code layout was a little confusing
21:00:53 <dons> oh?
21:01:08 <\z> yeah.  the Net monad was defined after it was used.
21:01:41 <\z> Took me a while to see socket was socket :: Bot -> Handle, and not something more primitive
21:01:49 <dons> ah ok
21:01:56 <dons> i'll fix that.
21:02:07 <\z> had to look up bracket, but that's just me
21:02:23 <dons> here with syntax highighting, http://www.cse.unsw.edu.au/~dons/tmp/bot.html
21:02:24 <lambdabot> Title: Haskell Tut Bot
21:02:41 <dons> yeah, in the actual tut i'll just start in IO, and then add in the layers of monads and bracket and so on
21:02:55 <\z> also, h <- gets socket took a while to grok, because I didn't see Net = StateT Bot IO
21:03:18 <dons> yeah, so the plan in the demo is to start with threading the socket around manually
21:03:28 <dons> then add the monad, which should explain gets socket
21:03:42 <dmwit> !id is :this a comment?
21:03:44 <tutbot> is :this a comment?
21:03:46 <\z> dons: I mentioned it to RyanT5000 because he was talking about poking around lexis and westlaw for some legal work he's doing
21:04:06 <dons> yes, but that's related to a tutbot how? :)
21:04:09 <\z> tutbot is a great example of exactly how much (or how little) you need to write to add socket I/O to a program
21:04:17 <dons> ah!
21:04:18 <lispy> dons: hearing about a 'tutbot' made me remember the idea we had to build an interactive haskell tutorial around lambdabot's abilities
21:04:28 <dons> right. no, its not that.
21:04:54 <\z> I'm a big fan of rolling things back to first principles, and understanding what's going on
21:05:03 <dons> its more about solving a non-haskellish problem in haskell, simply and easily, as a tut
21:05:10 <\z> if you had done something like 'import IRCBot', I wouldn't have been nearly as interested
21:05:14 <dons> rather than say, starting with a metaphor for what a monad is. we just write a bot.
21:05:25 <dons> \z, yeah me too.
21:05:35 <\z> (although this would make a nice IRCBot module, but not for an interesting example of socket I/O)
21:05:37 <lennart> dons: nice bot :)
21:06:02 <tutbot> thank you lennart :)
21:06:28 <\z> dons: a nice header comment on the bits of the IRC protocol you're supporting would help
21:06:39 <\z> but that's probably a better fit for the tutorial than the code
21:06:45 <dons> good idea.
21:06:56 <dons> yes, i'll explain the protocol piece by piece
21:07:35 <\z> oh, and uptime is a little magical at the moment
21:07:43 <dons> it is?
21:07:54 <dons> yes, i'm not convinced its the best command to use
21:08:01 <\z> it wasn't clear at the first reading that gets time is grabbing time out of st
21:08:04 <dons> the pretty printer is a bit annoying
21:08:12 <dons> ah right
21:08:14 <\z> uptime is a perfectly decent function though
21:08:23 <dons> !uptime
21:08:24 <\z> just need to predeclare Bot to keep that top of mind
21:08:25 <tutbot> 10m 18s
21:08:31 <dons> yep. ok.
21:09:54 <\z> overall, it's _really_ nice
21:10:05 <\z> where else do you want to take it?
21:10:22 <dons> well, its pretty easy to forkIO a prompt to read from stdin
21:10:27 <dons> then you've got yourself an irc client
21:10:51 <dons> so possibly i could do that, and add a little curses layer, and you'd have irssi in maybe 150 loc
21:10:51 <\z> nice
21:11:09 <\z> heh.  cool
21:11:21 <dons> currently its
21:11:22 <dons>                       Code  Comments
21:11:22 <dons> bot.hs                   81     59
21:14:20 <\z> time to go
21:14:22 <\z> g'nite y'all
21:15:32 <lispy> dons: and you could embed python instead of perl (or inaddition to) and it could get quite popular...
21:16:11 <dons> hmm1
21:16:19 <dons> well, its pretty easy to call out to runplugs
21:16:33 <dons> and thus add a network-safe > eval prompt
21:16:37 <lispy> but would that give you the ability customize the UI?
21:16:38 <dons> that might be a nice extension
21:17:00 <lispy> i'd like to use irssi but the hate the UI compared to emacs :)
21:17:03 <dons> oh you mean for a curses wrapper?
21:17:06 <lispy> yeah
21:17:24 <lispy> i could probably customize irssi to work like i want if i knew perl...but i don't and i refuse to learn it :)
21:17:30 <dons> heh
21:18:18 <Eidolos> Did someone say Perl? *ears perk up*
21:18:44 <dons> !uptime
21:18:45 <tutbot> 20m 38s
21:18:52 <dons> its running in ghci. i should check it runs in hugs too
21:20:24 <newsham> for those interested in productivity numbers:  http://blogs.msdn.com/philipsu/archive/2006/06/14/631438.aspx   pay attention to the kloc/yr metrics.
21:20:30 <newsham> (also, hi)
21:20:33 <lambdabot> Title: The World As Best As I Remember It : Broken Windows Theory, http://tinyurl.com/z2wlo
21:23:50 <lispy> bleh, i can't read that because the webpage won't respect my browser window size
21:24:02 <lispy> no way i'm going to keep scolling back and forth to read each line :(
21:24:31 <Korollary> copy & paste into a word doc
21:26:24 <dons> !quit
21:27:24 <newsham> !unquit
21:30:09 <lispy> Korollary: good idea...
21:30:23 * lispy finds a bittorrent for word and windows
21:33:37 <lispy> oleg is really smart
21:34:08 <lispy> i left like a total n00b when he was talking at the haskell-workshop
21:34:22 <lispy> and then i see his email so haskell-cafe and feel that way again :)
21:34:45 <lispy> not like he's being condescending...he seems nice and approachable, but he's often way over my head :)
21:35:17 <Korollary> but you are a total n00b, Marsha.
21:35:59 <dons> ?quote Pseudonym
21:36:00 <lambdabot>  What was considered 100 milli-Olegs of type hackery five years ago is standard operating procedure these days
21:36:04 <dons> close.
21:36:29 <lispy> haha
21:38:43 <dons> lispy, I think we could get some contributors to lambdaweb/lambdatut if we put up something basic, and then ask on haskell-cafe for help
21:41:21 <lispy> dons: yeah
21:41:25 <lispy> dons: i agree
21:41:32 <dons> mmm. http://programming.reddit.com/goto?rss=true&id=k2rl
21:41:36 <lambdabot> Title: lisp, c++, java, c#, python, ruby, smalltalk, cobol Salaries - Free Salary Searc ..., http://tinyurl.com/kulrd
21:41:47 <dons> lisp
21:41:54 <dons> 	$85,000/ ruby
21:41:55 <dons> 	$60,000
21:42:30 <dons> "haskell No Data" boo!
21:43:13 <dons> html, $48,000
21:43:18 <dons> (seems high!)
21:44:05 <dons> ah, they ddon't have ocaml or erlang either.
21:45:51 <svref> I'm writing a doubly-linked-list module ... how should I go about overloading '!!'?  Should I just make up some /different/ silly punctuation, like '!!!' ?
21:45:54 <sjanssen> dons: functional programmer picks up 94,000
21:46:57 <svref> nobody?  Gosh.
21:47:06 <Korollary> @type (!!)
21:47:08 <lambdabot> forall a. [a] -> Int -> a
21:47:19 <dons> yeah, just write your own. or hide the existing (!!)
21:47:29 <dons> sjanssen: hmm!
21:48:02 <sjanssen> dons: none of the jobs listed seemed to be about functional programming though
21:48:33 <svref> dons: thank you.
21:49:29 <sjanssen> svref: does a linked list module really need an operator for indexing?  Seems indexing should be discouraged wherever possible
21:49:51 <svref> good point...but I need it for debugging the module.  :)
21:49:53 <Korollary> discourage doesn't always mean disallow, though.
21:50:17 <dons> you at least should tag the complexity in the docs.
21:50:32 <sjanssen> Korollary: yeah, a function should be provided.  But it probably isn't necessary to waste valuable operator names on it
21:50:36 <svref> well, unless the user was raised in a barn  :)
21:50:48 <svref> The best part about !!! is that it accepts negative arguments.  :)
21:51:05 <dons> heh
21:51:20 <int-e> and you can have !!! !|! !|| and so on!
21:51:23 <sjanssen> svref: so are these DLL in the ST monad or some such?
21:51:32 <dons> 'index' might be a good name.
21:51:51 <svref> sjanssen: me no grok monads yet.  Me raised in barn.  :)
21:52:16 <dons> > let (!|!) = (!!) in [1..10] !|! 3 -- huh.
21:52:17 <lambdabot>  4
21:52:30 <svref> lisp calls it 'ref', hence my name spells "simple vector reference"
21:52:53 <dons> i'd not have though of using |
21:53:04 <svref> int-e, dons: you've lost me on the |.  What is it?
21:53:17 <dons> ?hoogle .|.
21:53:18 <lambdabot> Data.Bits.(.|.) :: Bits a => a -> a -> a
21:53:23 <int-e> svref: another infix operator constituent
21:53:24 <dons> oh, maybe I should have thought of that ;)
21:53:37 <dons> svref: just another char
21:53:41 <int-e> dons: actually I thought of || even though I almost never use it in Haskell
21:53:57 <sjanssen> > let (--|) = (!!) in [1..10] --| 3 -- even more obfuscated
21:53:58 <lambdabot>  4
21:55:04 <weitzman> Do I see the makings of an obfuscated Haskell contest?
21:56:02 <dons> a 4th one?
21:56:06 <dons> maybe its time
21:56:59 <svref> let ([) = (!!) in [1..9][3
21:57:04 <svref> > let ([) = (!!) in [1..9][3
21:57:05 <lambdabot>  Parse error
21:59:32 <dons> > let (-|-) = (!)) in [1..9]-|-3
21:59:32 <lambdabot>  Parse error
21:59:37 <dons> > let (-|-) = (!!) in [1..9]-|-3
21:59:38 <lambdabot>  4
22:00:25 <sjanssen> > let (!$%&*+./<=>?@\^|-!) = (!!) in [1..9] !$%&*+./<=>?@\^|-! 3
22:00:26 <lambdabot>  4
22:00:37 <sjanssen> mwahahaha
22:00:40 <svref> heh
22:00:52 <dons> haskell++
22:03:19 * weitzman starts a list in his head of features the perfect programming language *shouldn't* have
22:03:27 <dons> heh
22:04:00 <sjanssen> weitzman: ah c'mon, user defined operators are great
22:04:04 <dons> its interesting that there is a strong culture against obfuscation in haskell.  despite the ease in which it can be done.
22:04:40 <int-e> hmm, either that or you just get used to it :)
22:04:43 <dons> you could only get away with this if it was a type system hack ;)
22:04:47 <svref> I was angry when I learned the name for !! was !!.  I thought that was a crappy decision.
22:04:59 <dons> its a rarely used operator, though
22:05:06 <Cale> svref: why?
22:05:46 <svref> because I searched up and down for every word I could think of: "nth", "elt", "ref", "reference", "get", etc, and it turned out not to be a word.
22:05:59 <dons> heh you need hoogle
22:06:01 <weitzman> @type nth
22:06:02 <lambdabot> Not in scope: `nth'
22:06:05 <weitzman> Aw
22:06:06 <glguy> > let ask (w:w':j:d) = j in ask [1..10]
22:06:07 <lambdabot>  3
22:06:09 <dons> ?hoogle [a] -> Int -> a
22:06:10 <sjanssen> @hoogle [a] -> Int -> a
22:06:11 <lambdabot> Prelude.(!!) :: [a] -> Int -> a
22:06:11 <lambdabot> Prelude.(!!) :: [a] -> Int -> a
22:06:19 <weitzman> ?hoogle Int -> [a] -> a
22:06:20 <lambdabot> Prelude.(!!) :: [a] -> Int -> a
22:06:21 <int-e> why does Control.Applicative have so many infix operators?
22:06:26 <weitzman> Hoogle is smart
22:06:34 <dons> ?google [a] -> Int -> a
22:06:36 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html
22:06:40 <dons> oh!
22:06:56 <sjanssen> ?google [b] -> Int -> b
22:06:59 <lambdabot> http://www-03.ibm.com/developerworks/blogs/page/gbowerman?entry=finite_field_arithmetic_in_sql
22:06:59 <lambdabot> Title: IBM developerWorks : Blogs : Informix Application Development
22:07:01 <dons> heh
22:07:07 <dons> not as smart as hoogle then
22:07:56 <svref> Even if I was smart enough to use Hoogle then, !! would have been last on my list of search results to read about, since the punctuation is not descriptive.
22:08:05 <weitzman> Abstract algebra in SQL. Haven't seen that one before
22:08:19 <dons> well now you know, svref :)
22:08:40 <dons> reading the prelude and memorising it is a good idea too ;)
22:08:46 <svref> ok
22:08:47 <dons> ?docs Prelude
22:08:48 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html
22:08:56 <sjanssen> Prelude++
22:09:23 <weitzman> The Prelude needs verse numbers to use when quoting it
22:09:50 <int-e> @remember weitzman The Prelude needs verse numbers to use when quoting it.
22:09:51 <dons> e.g.
22:09:52 <dons> (!!) :: [a] -> Int -> a
22:09:53 <dons> List index (subscript) operator, starting from 0.
22:10:21 <weitzman> @docs (!!)
22:10:21 <lambdabot> (!!) not available
22:10:22 <sjanssen> Quoth the Prelude, Chapter 6, verse 4:  Yeah verily shall repeat floweth cons cells over.
22:10:28 <weitzman> I don't get the docs command
22:10:33 <weitzman> Sometimes it works, sometimes it doesn't
22:10:34 <dons> heh
22:10:37 <dons> weitzman: ?
22:10:49 <dons> example?
22:10:53 <weitzman> @docs (!!)
22:10:54 <lambdabot> (!!) not available
22:10:55 <int-e> @docs (!)
22:10:56 <lambdabot> (!) not available
22:10:59 <weitzman> @docs !!
22:10:59 <lambdabot> !! not available
22:11:05 <weitzman> @docs folfl
22:11:05 <lambdabot> folfl not available
22:11:08 <weitzman> @docs foldl
22:11:08 <dons> ?remember sjanssen Quoth the Prelude, Chapter 6, verse 4:  Yeah verily shall repeat floweth cons cells over.
22:11:09 <lambdabot> foldl not available
22:11:13 <dons> docs doesn't work like that
22:11:17 <dons> ?help docs
22:11:17 <lambdabot> docs <lib>. Lookup the url for this library's documentation
22:11:21 <weitzman> That explains why I don't get it
22:11:22 <weitzman> :)
22:11:23 <dons> ?help index
22:11:24 <lambdabot> index <ident>. Returns the Haskell modules in which <ident> is defined
22:11:26 <int-e> ?docs Prelude
22:11:27 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html
22:11:30 <dons> ?help hoogle
22:11:30 <weitzman> Well, it *should* work like that
22:11:30 <lambdabot> hoogle <expr>. Haskell API Search for either names, or types.
22:11:40 <dons> use hoogle
22:11:45 <weitzman> @hoogle (!!)
22:11:46 <dons> then use docs once you know the module
22:11:47 <lambdabot> Did you mean: (!!)
22:11:47 <lambdabot> Prelude.undefined :: a
22:11:47 <lambdabot> Control.Monad.Reader.ask :: MonadReader r m => m r
22:11:56 <weitzman> Hoogle wasn't any more helpful
22:11:57 <dons> that's a hoogle bug , fixed in new hoogle
22:12:01 <dons> ?hoogle !!
22:12:02 <lambdabot> Prelude.(!!) :: [a] -> Int -> a
22:12:09 <dons> ?docs Prelude
22:12:10 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html
22:12:12 <int-e> @index (!!)
22:12:12 <lambdabot> Data.List, Prelude
22:12:34 <dons> ?source Prelude
22:12:34 <lambdabot> http://darcs.haskell.org/packages/base/Prelude.hs
22:12:45 <weitzman> So I guess hoogle on the web links to the docs
22:12:48 <weitzman> But lambdabot doesn't
22:12:51 <dons> yep
22:13:02 <dons> ?hoogle case
22:13:03 <lambdabot> Prelude.case :: keyword
22:13:03 <lambdabot> Language.Haskell.TH.caseE :: ExpQ -> [MatchQ] -> ExpQ
22:13:03 <lambdabot> Test.HUnit.Base.cases :: Counts -> Int
22:13:10 <dons> it links to the keyword wiki page, for example
22:13:15 <lispy> so about that OO class....i wonder if it would be fun to write an old school final fantasy style game in squeak (the small talk emulator)...
22:13:32 <lispy> anyone have thoughtS?
22:13:36 <dons> emulator?
22:13:38 <lispy> maybe you've used small talk?
22:13:41 <dons> interpreter?
22:13:49 <int-e> implementation?
22:13:56 <lispy> should i write one or you think that's what i mean?
22:14:01 <dons> hugs is a ghc emulator ;)
22:14:04 <lispy> hehe
22:14:18 <int-e> hmm, isn't hugs older than ghc?
22:14:33 <dons> yeah, ghci is a hugs emulator, really. and hugs is a gofer emulator
22:14:34 <lispy> writing an emulator using OO ideas might be a good idear
22:14:44 <dons> and gofer, hmm, maybe a hbi emulator (?) or yale haskell
22:14:58 <glguy> miranda?
22:15:04 <skew> int-e: I think the history of Haskell paper would tell you
22:15:12 <dons> maybe. not sure what the miranda interface was like
22:15:22 <glguy> I only know that miranda exists
22:15:23 <dons> hugs is older yes.
22:15:28 <dons> ghci was born in what 2001?
22:15:33 <int-e> skew: I'm sure it would.
22:15:44 <glguy> dons: the most recent one!
22:15:45 <dons> gofer, ~1991, hugs ~94 (?)
22:15:49 <skew> dons: older than ghci, yes. older than ghc?
22:16:05 <dons> ghc 19900.
22:16:16 <glguy> wow
22:16:19 <dons> check the haskell.org 'old news' page
22:16:24 <dons> going back to '84...
22:16:30 <glguy> i was born in '84
22:16:35 <lispy> whoa
22:16:36 <glguy> fyi
22:16:37 <lispy> really?
22:16:45 <glguy> for seriously
22:16:51 * lispy feels old
22:16:56 <dons> here, http://haskell.org/haskellwiki/Old_news
22:16:57 * lispy was born in the 70's
22:16:58 <lambdabot> Title: Old news - HaskellWiki
22:17:02 <weitzman> I existed for parts of 84, but I wasn't breathing air yet
22:17:11 <dons> 1988,  Yale haskell compiler (Hudak et al)
22:17:12 <glguy> the 70's ? did they have *computers* then?
22:17:20 <GomoX> hey
22:17:30 <skew> I was born in '84 too
22:17:33 <GomoX> is there a builtin way to tell if an integer is in a list of integers?
22:17:34 <RyanT5000> what monad would you use if you wanted to statefully build a list?
22:17:34 <dons> "June 1990, Parallel Haskell, Simon Peyton Jones mentions that a parallel Haskell implementation is already running"
22:17:37 <lispy> glguy: they had computer science
22:17:41 <GomoX> like "4 in [1,2,3]"
22:17:47 <skew> elem
22:17:48 <glguy> lispy: you mean the real hard core kind?
22:17:49 <lispy> GomoX: like elem?
22:17:51 <dons> ?type elem
22:17:52 <lambdabot> forall a. (Eq a) => a -> [a] -> Bool
22:18:00 <dons> > 4 `elem` [1..10]
22:18:02 <lambdabot>  True
22:18:05 <GomoX> neat
22:18:07 <GomoX> thanks
22:18:09 <weitzman> @hoogle a -> [a] -> Bool
22:18:10 <lambdabot> Prelude.elem :: Eq a => a -> [a] -> Bool
22:18:10 <lambdabot> Prelude.notElem :: Eq a => a -> [a] -> Bool
22:18:10 <lispy> glguy: knuth was young and fiestier(sp?)...so yes
22:18:23 <glguy> lispy: now that's something that I can respect about the 70's
22:18:24 <dons> ?spell fiestier
22:18:26 <lambdabot> feistier fustier fies tier fies-tier fester
22:18:34 <GomoX> sorry for the n00biness ;D
22:18:35 <sjanssen> RyanT5000: what kind of state do you need?  For full on state with mutable references I'd go ST
22:18:37 <skew> "GHC 0.29 was the last of the Haskell 1.2 compilers, and was a full binary release.
22:19:03 <RyanT5000> sjanssen: just a bool; i'm trying to construct a sentence from substrings, and i just need to keep track of capitalization (though i anticipate needing to keep track of more)
22:19:32 <sjanssen> RyanT5000: oh, then I'd go with plain old State monad
22:19:39 <glguy> My parents had me because they saw that haskell was being developed and they figured that I'd be interested
22:19:44 <glguy> I've always appreciated that
22:19:48 <lispy> heh
22:19:55 <lispy> glguy: your parents are smart
22:20:02 <int-e> glguy: do they know?
22:20:14 <RyanT5000> and then just use function calls to build up the list?
22:20:23 <lispy> int-e: how do you have a son and not know?  i've heard labor hurts
22:20:24 <glguy> int-e: about Haskell?
22:20:48 <lispy> what's haskell?
22:20:57 <glguy> a last name
22:21:04 <dons> or a first name
22:21:11 <glguy> bah
22:21:12 <rashakil> it can even be used as a middle name
22:21:12 <glguy> curry then
22:21:34 <glguy> Haskell didn't even like his name
22:21:48 <glguy> (learned that like all important things in History of Haskell)
22:21:50 <int-e> glguy: No, about Haskell being their reason to give you birth.
22:21:55 <lispy> Hi, I'm Haskell Haskell Haskell
22:21:56 <glguy> int-e: now they do :)
22:22:19 <haskell> no, I am haskell
22:22:22 <haskell> shesh
22:22:23 <lispy> I'm a member of Lambda Lambda Lambda
22:22:51 <RyanT5000> alright so i'm hating the bluebook already
22:22:56 <lispy> bluebook?
22:22:58 <RyanT5000> (legal citation format standard)
22:23:02 <lispy> ah
22:23:09 <RyanT5000> i'm on rule 1.2, and i'm already pissed off
22:23:12 <RyanT5000> and i skipped rule 1.1
22:23:26 <glguy> is that how law works now?
22:23:53 <lispy> when did law start working?
22:23:57 <int-e> is it one of the books where you get solutions for the odd numbered excercises only?
22:24:17 <RyanT5000> it's the rule for when you use "See", "See, e.g.", "Accord.", "See also", "Cf.", etc.
22:24:17 <RyanT5000> glguy: what do you mean?
22:24:28 <glguy> Has anyone else heard the album decksandrumsandrockandroll by propeller heads?
22:24:29 * lispy thinks to write a book of unsolvable exercises and put them as the even numbered problems
22:24:45 <glguy> lispy: problem 2, does this halt?
22:25:00 <RyanT5000> this is a 400-page book describing whether or not you italicize the comma after the title of a book, and similar things
22:25:13 <RyanT5000> glguy: that's solvable for some programs :)
22:25:16 <lispy> glguy: more like, "Prove the generalized continuum hypothesis is false"
22:25:37 <glguy> RyanT5000: sure, but lispy could come up with one that wasn't solvable, it's problem 2!
22:25:58 <RyanT5000> yeah
22:26:15 <RyanT5000> so i wonder if i can make an "English" monad
22:26:19 <lispy> okay, squeak.org is down...maybe i don't want to use it for my class
22:26:19 <glguy> problem 3 could be a solvable halting problem
22:26:22 <RyanT5000> for composing english sentences
22:26:23 <dons> running in hugs (!)
22:26:29 <dons> !uptime
22:26:29 <tutbot> 15s
22:26:32 <RyanT5000> obviously it'd be a subset of english
22:26:46 <dons> ok, so now I try hbi...
22:26:48 <dons> !quit
22:26:55 <RyanT5000> has anyone tried anything so ridiculous before?
22:27:17 <int-e> "'See' is generally the most common signal used in journal articles."
22:27:23 <skew> there's all kinds of stuff about monading semantics for languages
22:27:42 <RyanT5000> hm
22:27:58 <skew> http://www.eecs.harvard.edu/~ccshan/
22:28:23 <GomoX> If  I have an enumerated type like "data Dat = Monday|Tuesday|..."
22:28:29 <GomoX> s/Dat/Day
22:28:37 <skew> "Delimited continuations in natural language", etc.
22:28:47 <GomoX> is there a way to tell what the next constructor in that enumeration is?
22:28:59 <GomoX> like ord($char) + 1 or something
22:29:02 <sjanssen> GomoX: succ
22:29:06 <int-e> GomoX: add a 'deriving Enum'
22:29:10 <int-e> @type succ
22:29:12 <lambdabot> forall a. (Enum a) => a -> a
22:29:18 <int-e> yep, and then use succ
22:29:32 <svref> Does someone have a link to the table of operator precedences?
22:29:40 <GomoX> mmm nice
22:29:50 <GomoX> i'm digging this thing
22:29:51 <GomoX> :D
22:29:59 <int-e> svref: have you tried :i in ghci or hugs?
22:30:11 <GomoX> it feels kinda useless though, but fun anyway
22:30:19 <svref> int-e: thx!
22:30:20 <GomoX> is there any known program made in Haskell?
22:30:30 <GomoX> *well-known
22:30:32 <int-e> svref: mind you it's not a table but it gives you precedences.
22:30:45 <svref> > :i !!
22:30:45 <lambdabot>  Parse error
22:30:52 <svref> bah
22:31:00 <sjanssen> GomoX: darcs is moderately well known
22:31:20 <glguy> is darcs used outside of the Haskell dev world?
22:31:25 <dons> > succ 'x'
22:31:26 <lambdabot>  'y'
22:31:32 <dons> > pred 'x'
22:31:33 <lambdabot>  'w'
22:31:35 <lispy> glguy: of course
22:31:36 <dons> glguy: yeah.
22:31:36 <svref> int-e: actually, I don't see how :i gives precedences...
22:31:44 <glguy> > let it = 'j' in succ it
22:31:45 <lambdabot>  'k'
22:31:52 <GomoX> Another one, how do i derive from more than one thing?
22:31:53 <lispy> glguy: the author works in physics and uses it :)
22:31:56 <dons> very clever, gl	
22:31:58 <int-e> svref: for example: infixr 5 ++
22:32:04 <GomoX> deriving Enum, Show doesn't work
22:32:06 <GomoX> no comma there?
22:32:07 <lispy> GomoX: use syntax like, deriving (Eq, Ord, Show)
22:32:11 <int-e> svref: that means it's right-associative and has precedence 5
22:32:23 <GomoX> ah, many-uples
22:32:25 <GomoX> thanks
22:32:40 <lispy> GomoX: you use the same syntax for importing selectively from modules and for exporting from modules
22:32:45 <int-e> svref: higher precedence binds tighter, associativity is only relevant when combining operators of the same precedence
22:32:56 <svref> ah, my problem was I was looking at !! instead of + ... for some reason it doesn't print that with !!
22:33:09 <skew> can you use haskelldb to put stuff into databases?
22:33:14 <int-e> svref: it's akin to the 'infixl', 'infix' and 'infixr' declarations in the Haskell language.
22:33:40 <int-e> svref: oh. the default is  infix 5  I think
22:34:17 <glguy> i just walked back to the bedroom, and my fiancÃ©e started asking me cooking questions in her sleep
22:34:31 <glguy> I tried playing along, but eventually she woke up and wanted to know why I was asking her questions
22:34:43 <lispy> BUSTED! :)
22:35:06 <int-e> . o O ( Do you want fries with that? )
22:35:10 <glguy> does 'Ã©' show up as an accented 'e'?
22:35:24 <lispy> to me it does
22:35:25 <rashakil> no
22:35:28 <int-e> it does here.
22:35:29 <lispy> no idea how you typed it though
22:35:38 <glguy> as long as it does to one person, I'm on a mac so it's easy to type that in
22:35:48 <lispy> i'm on a mac too
22:36:00 <glguy> on the mac you type: option+E E
22:36:01 <lispy> how would i typeit?
22:36:05 <lispy> hmm
22:36:05 <rashakil> I see '',
22:36:29 <lispy> oh
22:36:31 * glguy -> emertens
22:36:38 <lispy> i'm using emacs which intercepts option
22:37:06 <emertens> This is my native client on mac... i can see unicode (glguy is irssi on obsd)
22:37:13 <lispy> works in firefox though
22:37:32 <lispy> native client on mac? which client?
22:37:39 <emertens> colloquy
22:37:40 <dons> emertens: but its the same person right? or do you behave differently on the mac?
22:37:47 <emertens> I'm much more artistic
22:37:51 <emertens> and I vote democrat
22:37:52 <emertens> on my mac
22:37:58 <lispy> emertens: oh...i tried colloquy and ended up hating it...
22:38:04 <lispy> haah
22:38:10 * dons finds it weird that people use completely  different nicks based on machine..
22:38:14 <emertens> lispy: I'd recommend you not use it then, sounds awful
22:38:30 <dons> emertens: but on openbsd you're a good looking guy? ;)
22:38:32 <lispy> emertens: yeah, but i can't remember what i hated about it
22:38:45 <lispy> everyone is better looking on obsd
22:38:56 <lispy> it's like ecstacy that way
22:38:59 <glmacguy> better?
22:39:09 <dons> but you're a bit more dictatorial when not on the mac?
22:39:30 <glmacguy> techincally I'm still on my mac when I'm on openbsd in the evening
22:39:49 <glmacguy> but at work on my PC, I'm much more professional
22:40:00 * lispy always runs irc from the same machine and just uses screen to change clients
22:40:13 <dons> glmacguy: you use openbsd at work?
22:40:13 <glmacguy> I usually just use my screened openbsd irssi client
22:40:18 <dons> or PC==Windows?
22:40:24 <glmacguy> dons: no... I ssh to my openbsd box
22:40:27 <dons> ah
22:40:28 <glmacguy> work is all windows
22:40:34 <glmacguy> and irc ports are blocked
22:40:36 <lispy> same here
22:40:37 <glmacguy> so i have to ssh out to chat
22:40:42 <dons> heh
22:40:49 <glmacguy> I ssh - tunnel everything out of there
22:41:04 <lispy> i wouldn't want to irc from a work ip, someone might cause them trouble...
22:41:24 <glmacguy> my irc traffic from work looks like all of my other encrypted traffic
22:41:31 <glmacguy> and i use a host mask anyway
22:41:57 <glmacguy> not that I care since I have my computer registered to a fraternity at umr.edu
22:42:01 <glmacguy> and not in my own name
22:42:15 <glmacguy> (which is best because I don't go there anymore)
22:42:38 <glmacguy> but their network is fast :)
22:43:14 * glmacguy :\> end monolog
22:43:33 <glmacguy> err... can't.. help it..
22:43:36 <glmacguy> Hi, I'm a Mac
22:43:41 <glguy> and I'm a PC
22:44:54 <glguy_> (I guess no one has seen the Apple commercials, or everyone is sleeping...)
22:45:24 <lispy> heh
22:45:39 <dons> yeah, they're good.
22:45:39 <glguy_> thank you :)
22:45:41 <lispy> i was trying to download squeak so i can learn some smalltalk
22:45:49 <glguy_> to get with the ladies?
22:45:58 <dons> glguy likes pie graphs, I guess.
22:46:00 <lispy> does that work?
22:46:39 <glguy_> it might, I  just asked if my fiancÃ©e was attracted to people that know many computer languages
22:46:44 <glguy_> and she said "apparently"
22:46:48 <glguy_> so...I'd say go for it
22:47:35 <glguy_> wb
22:47:36 <GomoX> http://pastebin.ca/184724
22:47:36 <GomoX> ERROR "p4-[8].hs":3 - Illegal type "Nat -> Bool" in constructor application
22:47:39 <GomoX> o_O
22:48:07 <GomoX> What does that error mean? The function looks good to me though clearly Hugs isn't swallowing it.
22:48:30 <Cale> GomoX: you haven't applied Nat to enough type arguments
22:48:32 <glguy_> GomoX: you need a Nat a type thing
22:48:42 <glguy_> Nat a -> Nat a -> Bool
22:48:58 <GomoX> oh
22:49:00 <Cale> Perhaps you meant to define Nat as  data Nat = Zero | Suc Nat
22:49:00 <GomoX> right
22:49:18 <glguy_> yeah,  drop the a's :)
22:49:18 <GomoX> Cale: Mmm that makes sense I was already wondering about that
22:49:26 <GomoX> When should i use the a's?
22:49:41 <glguy_> when defining a parametrically polymorphic data type
22:49:52 <GomoX> oh like a list?
22:49:55 <Cale> yes
22:49:58 <GomoX> cool
22:50:08 <GomoX> I just thought they had used an a there at some point in my class
22:50:10 <GomoX> :D
22:50:19 <GomoX> Thanks
22:50:24 <weitzman> Can you specify typeclasses in data declarations? I'm guessing not
22:50:26 <weitzman> As in,
22:50:28 * glguy_ has been waiting to give advice with the words "parametrically polymorphic" for a while
22:50:38 <weitzman> data Show a => Nat a = ...
22:50:42 <Cale> weitzman: yes, but it doesn't mean what you might want it to mean
22:51:10 <glguy_> weitzman: instance Show a => Nat a where -- might be what you wanted
22:51:17 <Cale> in particular, it doesn't restrict the application of that type constructor to types in that class
22:51:27 <weitzman> Indeed
22:51:27 <GomoX> Another one
22:51:34 <GomoX> In that same paste
22:51:44 <GomoX> When I define igual Zero (Suc x)
22:51:46 <Cale> it merely restricts the types of the data constructors, *when they use the type parameter*
22:52:06 <GomoX> Is there a way to tell it that i want it to work also for (Suc x) Zero without writing down that particular case?
22:52:32 <glguy_> GomoX: not really
22:52:35 <Cale> GomoX: no, there's no special notation for commutative things
22:52:43 <GomoX> Ok write down it is :)
22:52:53 <GomoX> deriving conmutative or something :D
22:53:13 <glguy_> GomoX: do this tho
22:53:14 <dons> GomoX: you might be interested in http://www.haskell.org/haskellwiki/Type_arithmetic
22:53:17 <lambdabot> Title: Type arithmetic - HaskellWiki, http://tinyurl.com/jp7bh
22:53:29 <glguy_> err, nvm
22:53:39 <dons> and http://www.haskell.org/haskellwiki/Peano_numbers
22:53:43 <lambdabot> Title: Peano numbers - HaskellWiki, http://tinyurl.com/zefxw
22:53:53 <GomoX> ok
22:54:03 <glguy_> GomoX: reorder the lines, eliminate the 2nd one, and move 3rd up
22:54:13 <glguy_> GomoX: and then for the last do: igual _ _ = False
22:54:24 <GomoX> That's clever
22:54:30 <GomoX> :)
22:54:32 * GomoX does that
22:55:08 <svref> What's the magic syntax to put "!!!" operator in a module declaration?
22:55:29 <kpreid> (!!!)
22:55:29 <dons> module M ((!!!)) where ...
22:55:51 * dons finds it funny that svref compains about !! being unintuitive, and then defines !!!
22:55:54 <dons> ;)
22:55:59 * glguy_ was going to comment
22:56:07 * glguy_ then thought better of it
22:56:12 <dons> ?hoogle index
22:56:13 <lambdabot> Ix.index :: Ix a => (a, a) -> a -> Int
22:56:13 <lambdabot> Data.PackedString.indexPS :: PackedString -> Int -> Char
22:56:13 <lambdabot> Data.Generics.Basics.indexConstr :: DataType -> ConIndex -> Constr
22:56:14 <svref> when in rome...
22:56:19 <glguy_> dons: high five! ;)
22:56:22 <dons> index is also acceptable
22:57:23 <glguy_> "I immediately regret this decision..."
22:57:44 * glguy_ is reminded of Anchorman by "when in rome"
22:58:16 * lispy has an urge to eat something greasy and fattening
22:58:47 <glguy_> like Java?
22:59:07 <glguy_> hmmm, i could have done better than java
22:59:54 <lispy> yes
23:00:25 <lispy> the thing is, i actually can't eat anything greasy and fatteing...it will make me sick...so i don't know why i'm craving it
23:00:46 <glguy_> because you cant have it?
23:02:17 <lispy> maybe
23:14:17 <svref> How do I make "import Prelude hiding map" do what I mean?
23:14:52 <glguy_> (map)?
23:15:24 <svref> by jove!
23:16:35 <lispy> i usually follow that by 'import qualified Prelude (map) as P' so that I can still use map if i need it
23:17:03 <svref> lispy: so P.map is the usual map?
23:17:33 <lispy> yup
23:18:07 <lispy> you can leave out 'as P' if you don't mind Prelude.map
23:18:39 <svref> typing "relude" causes my fingers to fall off too fast.
23:18:41 <svref> :)
23:33:18 <vegai> musasabi: that's great. I'll check it out
23:40:30 * edwardk_ waves hello.
23:40:36 <Korollary> hi
23:40:49 * edwardk_ gripes that the x86 just has too many opcodes ;)
23:41:37 <Korollary> save some fir a rainy day.
23:41:49 <edwardk_> yeah going to. who needs x87 opcodes anyways =)
23:42:17 <Korollary> yeah. then x88, x89. where does this end?
23:42:18 <edwardk_> i want the core ones, sse and maybe mmx
23:42:51 <edwardk_> every time i go 'well, i'll skip those over there, i wind up wanting them anyways
23:43:05 <edwardk_> or there winds up being 'just 1 more' =)
23:43:27 <Korollary> try the south beach diet?
23:45:38 <edwardk_> http://slipwave.info/haskell/hasm/src/X86.hs is the subset i have so far
23:45:51 <edwardk_> i need to add emission code for the sse stuff there and a few random opcodes listed though
23:48:05 <edwardk_> that actually does include all opcodes through D, except for ARPL and ones that don't make sense in 32 bit code
