00:00:33 <libertyprime> my mechanical friend libertyprimebot made up a signature because he was curious what it could be :P
00:48:38 <ndosho> how this function return [(Int,Int)] instead of (Int,Int) ? 
00:48:46 <ndosho> forM [1..n] $ \_ -> do
00:48:46 <ndosho>     [x,y] <- map read . words <$> getLine
00:48:47 <ndosho>     return (x,y)
00:50:04 <[Leary]> > return (2, 3) == [(2, 3)]
00:50:06 <lambdabot>  True
00:50:13 <ski> `forM' collects a new list for you, with one element for each element of the starting list
00:50:48 <ski> [Leary] : that's not what's happening, here
00:50:56 <ski> also, that use of `forM' is equivalent to using `replicateM'
00:51:17 <[Leary]> Oh right, wrong monad.
00:52:43 <ski> ndosho : what did you expect, or want to, happen ?
00:56:58 <ndosho> ski : Thanks a lot now i understand
01:04:10 <ski> @type map read . words <$> getLine
01:04:11 <lambdabot> Read b => IO [b]
01:04:13 <ski> @type traverse readIO . words =<< getLine
01:04:15 <lambdabot> Read b => IO [b]
01:04:52 <ski> ndosho : probably better to use `readIO', since they you'll get any read failure at that point, rather than later
01:05:17 <ski> (another approach could be to use `reads', or `readMaybe', instead)
01:15:51 <dansho> in the chart library, how would i set the x-axis to the range -4, 4?
01:17:23 <dansho> this is what i have so far, not sure what to put in ???: http://dpaste.com/2MF81XG
01:18:09 <ndosho> Thanks very helpfully i'm going to play around with all these functions
01:28:26 <dansho> ah figured it out: http://dpaste.com/27ZWC36
02:47:19 <neobrain> Is there a way to define my own "if" function? I think I've seen a GHC extension to do so a while ago, can't remember what it was though
02:49:07 <neobrain> Ah, RebindableSyntax is the one I was thinking of
02:50:12 <__monty__> You just want to reuse the name?
02:52:12 <neobrain> __monty__: yeah, plus the syntax of "if then else" as opposed to having a function if' :: Bool -> a -> a -> a
02:52:53 <__monty__> Can't say it sounds like a good idea tbh.
02:55:20 <xacktm_> there's a wiki page arguing for it
02:55:58 <xacktm_> oh, he wants to redefine the built-in "if" to that if'
02:56:25 <xacktm_> yeah think of the incompatibilities
02:56:27 <__monty__> It has the same problems as operator overloading only it's even more surprising.
02:56:45 <__monty__> Just to get "nicer" (arguably) syntax.
02:57:08 <__monty__> With great power comes great responsibility : )
04:14:44 <__monty__> ski: Thanks for linking this (https://web.archive.org/web/20130426040216/http://www.txt.io/t-2hv4m) yesterday. It's a decent read. Main thing I learned though, is "You *don't* _link_ to tweets, you reproduce them in full."
06:15:19 <avn> Hello folks! Does anyone familiar with `d-bus` library?
06:15:59 <cocreature> avn: you usually get better answers if you ask your actual question directly :)
06:17:30 <hvim> ww
06:17:45 <geekosaur> http://hackage.haskell.org/package/dbus ?
06:18:22 <avn> geekosaur: https://hackage.haskell.org/package/d-bus
06:18:28 <avn> lot of implementations ;)
06:19:27 <geekosaur> "permissively licensed", whatever that means. also out of date, and not the one most packages use
06:20:15 <geekosaur> bsd3 vs. apache, apparently
06:20:37 <avn> I have a simple relay service -- accept requests from `System` bus, and relay to application on `User` bus. I try to figure out, why it prematurely raise parse error, and close `session` connection.
06:21:01 <avn> geekosaur: I choose mainly by `String` vs `Text`.  (yes, I tried both)
06:21:56 <sm[m]> libertyprime: usually you add deps in the project that needs them
06:35:17 <hvim> Hi. I'm learning Haskell. Why doesn't this work 'liftM Char arbitrary'?
06:35:57 <davean> what do you think that should do?
06:37:02 <davean> :t liftM
06:37:03 <lambdabot> Monad m => (a1 -> r) -> m a1 -> m r
06:37:35 <davean> :t Char
06:37:36 <lambdabot> error:
06:37:36 <lambdabot>     • Data constructor not in scope: Char
06:37:36 <lambdabot>     • Perhaps you meant one of these:
06:38:48 <hvim> I'm reading Real World Haskell book, there is an example oneof [ ..., liftM Char arbitrary, ...]. I looked up oneof it take [Gen a] so I though liftM Char arbitrary creates Gen Char.
06:40:26 <davean> hvim: AH!
06:40:35 <davean> So they define "Char" themselves up above in that case
06:40:43 <davean> find "data Doc"
06:41:36 <davean> liftM, as lambdabot conviniently showed us the type of above, lifts a function to one that takes a monadic ... input? close enough for now ... and transforms it
06:42:11 <davean> so, they're just taking the result of the "arbitrary" and wrapping it with their Char constructor
06:42:28 <hvim> I think I get it now, I by Char they meant Char type they mean Doc constructor.
06:42:59 <hvim> I though they mean vanilla Char as in [Char]. Thanks.
06:43:43 <davean> hvim: they can't mean the type - thats a type not a value
06:43:59 <davean> now since its capitalized it basicly has to be a constructor of some sort
06:44:24 <davean> since the things that are capitalized are types or constructors and since they're at the value level it has to be a constrcutor
06:45:20 <davean> like noun/verb if I say "contact Google" thats a noun and means a company, if I say "google it" thats a verb and means "to search" (ooh yes good, your genericised) 
06:50:58 <hvim> I think I know what you are saying, that type and value show up in different contexts and this is a value context so it must be a value. A type signiture of a function is a type context so the names there cannot be values.
06:54:01 <davean> right
06:54:40 <davean> Technically theres excaptions - like DataKinds, but all that stuff came out WELL after the book, and all are still extensions so you'd know if you were aiming that footgun around.
07:18:56 <gobby> My servant app renders my html on localhost fine, but when I deploy the same app to my webserver it can't find the js files in my html
07:20:37 <gobby> I also have another endpoint that returns JSON that works
07:30:57 <alx741> gobby: how does it reference the js? same dir as the rest of the statics? and from root `/`?
07:33:05 <gobby> alx741: so the html file is rendered at the root and inside the html the js is referenced from within a folder `same_level_as_htmlfile/main.js`
07:34:19 <gobby> alx741: I'm not serving it as a static file, I'm doing it like this: https://pastebin.com/Aecx9R5k
07:37:17 <gobby> alx741: Also the compiled js is from Elm if that makes a difference...
07:38:15 * geekosaur is not convinced that serves js at all, suggesting the app hands out file: urls
07:45:55 <gobby> geekosaur: How would I serve a static html page?
07:47:51 <avn> Well, I figured out that it (`d-bus`) failed on parse MethodReturn packet
07:49:51 <alx741> gobby: oh... I thought you were using the WAI static app
07:50:00 <alx741> gobby: https://docs.servant.dev/en/stable/tutorial/Server.html?highlight=static#serving-static-files
07:50:57 <Guest30734> 1
07:50:59 <Guest30734> 2
07:51:01 <Guest30734> 3
07:51:03 <Guest30734> 4
07:51:05 <Guest30734> 1
07:51:07 <Guest30734> 2
07:51:09 <Guest30734> 3
07:51:11 <Guest30734> 4
07:51:13 <Guest30734> 5
07:51:15 <Guest30734> 6
07:51:17 <Guest30734> 77
07:51:19 <Guest30734> 8
07:51:21 <Guest30734> 5
07:51:23 <Guest30734> 3
07:51:25 <Guest30734> 2
07:51:27 <Guest30734> 3
07:51:29 <Guest30734> 4
07:51:31 <Guest30734> 5
07:51:33 <Guest30734> 6
07:51:34 <int-e> :-(
07:51:35 <Guest30734> 7
07:51:37 <APic> Gesundheit
07:51:37 <Guest30734> 6
07:51:39 <Guest30734> 5
07:51:41 <Guest30734> 4
07:51:43 <Guest30734> 3
07:51:45 <Guest30734> 2
07:51:47 <Guest30734> 1
07:51:49 <Guest30734> hey
07:51:51 <Guest30734> put
07:51:53 <Guest30734> les
07:51:54 <alx741> op?
07:51:55 <Guest30734> gun
07:51:57 <Guest30734> ion
07:52:25 <Guest30734> im learning how to use weechat now
07:52:45 <int-e> well you spammed the channel
07:53:26 <APic> You are learning to abuse it
07:53:29 <alx741> Guest30734: maybe make a garbage room for testing things out?
07:55:37 <Guest30734> maybe ... sorry ...
07:58:26 <hjt> anybody have any suggestions for a nice intro to liquid haskell ?
07:58:52 <alx741> speaking of that, is someone here using some Haskell written IRC client?
07:59:21 <Rembane> alx741: glguy wrote one, it's very nice! 
08:00:16 <gobby> alx741: Sigh...the stack template I downloaded was not using `serve` 
08:00:22 <gobby> alx741: thanks
08:01:15 <alx741> Rembane: how would it compare to weechat/irssi in terms of features?
08:03:48 <Rembane> alx741: I don't use many features of any IRC-client, but I am happy. 
08:04:16 <Rembane> alx741: https://github.com/glguy/irc-core
08:04:59 <alx741> Rembane: ha looks nice, will check it out, thanks
08:06:14 <alx741> hjt: their official tutorial and book look pretty nice...
08:06:50 <Rembane> alx741: No worries, good luck! 
08:09:41 <hjt> <alx741 "hjt: their official tutorial and"> oh didn’t realise there was one, will check it out thanks
08:16:14 <habbah> How does this actually check that a file exists? https://hackage.haskell.org/package/directory-1.3.3.2/docs/src/System.Directory.html#doesFileExist
08:23:01 <monochrom> It probably depends on OS.
08:29:16 <alx741> habbah: depends on the OS, in Unix it uses https://hackage.haskell.org/package/unix-2.7.2.2/docs/System-Posix-Files.html#v:getFileStatus which in turn uses stat(2) I think to query the FS
08:31:23 <habbah> alx741: I took a third look. I missed the "not". If it's a directory, it will return False. fileTypeIsDirectory will return false if it's a file or error otherwise
08:32:08 <habbah> I don't see where it uses getFileStatus though
08:32:24 <geekosaur> getFIleMetadata is a portability wrapper
08:32:32 <geekosaur> on POSIX it wraps getFileStatus
08:32:42 <habbah> Posix.getFileStatus
08:32:46 <habbah> got it
08:33:12 <geekosaur> note that sources are hyperlinked, you can click on getFileMetadata… although the link isnt anchored right for some reason so you end up searching to fnd that
08:33:56 <alx741> geekosaur: 90% of the time it isn't anchored, It's frustrating
08:34:28 <habbah> I'm getting some kind of warning when I scroll down and scroll back up. It doesn't happen in Safari though
08:34:43 <habbah> nor Firefox
08:35:58 <habbah> Oh, it's a Chrome extension causing it to break
08:36:10 <geekosaur> haddocks currently try to load some things that are missing/unloadable :/
08:36:40 <geekosaur> I get a warning about something math-related? most of the time, and more recently an accessibility js thing
08:37:30 <alx741> oh... I also remember reading that they where working on a visual change for haddock docs
08:38:08 <geekosaur> that too, just found the mathjax thing was umatrix saying "what this mathjax.org business?"
09:35:04 <tintinthong> adfasdf
09:35:18 <tintinthong> HELP
09:35:36 <bandali> hi, anyone with experience setting up a matrix-freenode bridge around?
09:53:23 <sm[m]> bandali: I have a little.. but maybe #irc:matrix.org would be better ?
09:54:07 <sm[m]> actually no. All I've done is used a matrix-freenode bridge set up by someone else
09:54:42 <bandali> :) i *think* i have an idea of what i need to do now
09:54:47 <bandali> thanks sm[m] anyway
10:06:20 <Berengal> Is there some convenient way I can zip a Vector and a list?
10:08:27 <cocreature> Berengal: nothing more convenient than converting one of them to the other and then using the zip for that type
10:08:28 <d34df00d> What do you want to get as the output?
10:08:34 <Berengal> a vector
10:08:47 <d34df00d> So, yeah, just convert the list to the vector and Vector.zip them!
10:09:22 <d34df00d> BTW is there any preexisting monad (transformer) on top of ekg to easily get gauges, metrics etc?
10:37:32 <d34df00d> Let's say I want to define a few metrics for my application, some of which are ekg's Counters, and some are Distributions. And let's say I want to have a function that, given a metric identifier, would return the appropriate tracker type for me.
10:38:03 <d34df00d> In a proper dependently typed language I'd probably have `data Metric = PageParseTime | NumPagesFetched` and a function `getMetricTracker :: (m : Metric) -> IO (MetricType m)`
10:38:08 <d34df00d> What's the best Haskell approach to this?
10:39:08 <d34df00d> I've tried type families approach (like `type family MetricInfo (m :: Metric)`) which gives me the MetricType part of the quiz (and it's also more extensible if I do PolyKinds and m :: k instead of m :: Metric), but I don't know how to write the signature of this function.
10:39:47 <[exa]> d34df00d: what kind do you want your 'metric identifier' to be?
10:40:21 <zachk> I think you could just use ADTs/Sum types for that 
10:40:25 <d34df00d> [exa]: I don't really have a definite answer as I don't know what'd be the most reasonable Haskell way.
10:40:56 <d34df00d> [exa]: an ADT with the list of possible metrics is fine I guess. But I'd be eager to hear if there are any other options.
10:41:08 <d34df00d> zachk: how would you map the members of that ADT to the specific metric tracker type?
10:41:16 <[exa]> the most reasonable ways are the simplest ones until you have a proof that a more complex approach is needed
10:41:52 <d34df00d> [exa]: that's reasonable :) And since I'm writing an application, not a general library, I probably don't need any hard extensibility.
10:41:55 <[exa]> especially if you said 'ekg', the less surprise the better. :]
10:42:08 <d34df00d> [exa]: hmm, why so?
10:42:25 <[exa]> oh that's the other EKG. sorry
10:42:31 <d34df00d> My first time with ekg, just seen it referenced in Simon Marlow's book.
10:42:52 <zachk> yoif you have MetricInput -> IO MetricOutput, and metricinput and metricoutput are different sum types, you could map easily 
10:43:33 <d34df00d> zachk: but this gives rise to meaningless functions that take what is a counter metric and produce a, say, distribution tracker.
10:43:43 <d34df00d> While the output type is really determined by the metric identifier.
10:44:07 <zachk> you could use functional dependencies and typeclassses 
10:44:28 <[exa]> I suggest going with multiparam typeclasses first, it's more intuitive
10:44:42 <[exa]> you can basically rewrite this matching to MPTC-style prolog
10:44:42 <zachk> you can have the output type depend on the input type  
10:44:58 <d34df00d> So I'll have one instance per metric type defining the output type?
10:45:08 <[exa]> and eventually convert the code to type families so that it also looks kewl
10:45:18 <[exa]> d34df00d: yes, basically
10:45:40 <d34df00d> I wonder if I can somehow annotate my ADT's ctors with some extra info so that I don't duplicate it.
10:45:54 <d34df00d> Or I'll have to spell out every metric twice.
10:45:59 <d34df00d> Which is fine, but not pleasant :)
10:46:40 <[exa]> d34df00d: you can probably use different types, not different ctors
10:48:44 <d34df00d> With PolyKinds I could use both!
10:48:54 <d34df00d> Which actually gives a nice touch of extensibility!
10:50:55 <[exa]> btw did you read the 'Typing the technical interview'?
10:51:55 <d34df00d> The one about solving the eight queens problems?
10:51:59 <[exa]> yes
10:52:05 <d34df00d> Yeah, I believe I did a year or two ago.
10:52:14 <d34df00d> My type-level fu is way below to grasp it fully, but I enjoyed it!
10:52:28 <[exa]> with a bit of Proxy that style of programming should solve your problems easily
10:53:11 <d34df00d> Hmm.
10:53:44 <d34df00d> data Metric = PageParseTime { ty :: Proxy Distribution } | NumPagesFetched { ty :: Proxy Counter }
10:53:50 <d34df00d> I wonder how far will it get me.
10:54:19 <zachk> maybe GADTs for that? 
10:55:50 <cocreature> you don’t really gain anything by storing a proxy in those constructors since you can just create it when you pattern match on Metric
10:56:48 <d34df00d> cocreature: but in this case I don't need to spell out ctor names twice.
10:57:17 <d34df00d> zachk: I guess it'll have the same expressive power here.
10:57:25 <d34df00d> Metric type does not depend on the specific constructor chosen.
10:57:28 <d34df00d> (although it could, btw)
10:57:42 <d34df00d> Yeah, why not. That's also a direction worth considering!
10:57:49 <zachk> :)
10:58:29 <cocreature> d34df00d: well your code just doesn’t compile if you try to use "ty" as the name for both fields :)
10:59:11 <d34df00d> Damn, right. Should've expected that.
10:59:26 <ski> d34df00d : `MetricType' being ?
10:59:46 * ski doesn't see why use record syntax there
10:59:48 <cocreature> having a field of type "Proxy T" in a constructor isn’t much more useful than having a field of type "()"
10:59:51 <d34df00d> Yeah, perhaps the GADT approach + lifting the type of the counter (or a type-level literal for the metrics name, why not?) to be a parameter fo Metric would be the most reasonable.
11:00:16 <d34df00d> ski: MetricType in a deptyped language? MetricType : Metric -> Type
11:00:39 <d34df00d> Much like type family, which I failed to construct in a useful manner though.
11:01:20 <ski> i mean, what would its values be ?
11:01:59 <d34df00d> The problem I had is even if I have `type family MetricType (m :: Metric)`, I cannot really write anything resembling `getMetricTracker :: (m : Metric) -> IO (MetricType m)`. And I'm not sure how to lift the Metric ctors to the type level in this context.
11:02:22 <d34df00d> ski: a couple of good old Haskell types, Counter and Distribution, say.
11:03:55 <ski> perhaps you could have `getMetricTracker :: forall (m :: Metric). MetricIs m -> IO (MetricType m)'
11:04:31 <ski> i'm wondering whether `MetricType' would be the same as `MetricIs', or perhaps different
11:05:04 <d34df00d> Ah, that's the syntax!
11:05:12 <d34df00d> I had trouble expressing that type variable m should have kind Metric.
11:05:24 <ski> (`MetricIs' here being a "singleton")
11:05:41 <d34df00d> Why not -XTypeApplications?
11:05:50 <d34df00d> I know all the metrics statically at call sites.
11:06:41 <ski> well, presumably you want `getMetricTracker' to different things, depending on which metric you give it ?
11:07:42 <ski> or is it just a generic / parametric "lookup" of some kind, that doesn't conditionalize on the metric variant used ?
11:08:08 <d34df00d> The difference depends only on the value of `MetricType m` (which hashmap to look into), so I could do that through a typeclass or something I guess.
11:08:47 <d34df00d> So this is yes, a lookup, whose "parametrization space" is way narrower than the list of metrics.
11:09:33 * ski isn't sure what "list of metrics" is, here
11:10:00 <ski> also, i thought `MetricType m' was the type of value you were going to produce, not going to consume
11:10:13 <ski> (or did i completely misunderstand what you said, there ?)
11:10:13 <d34df00d> The Metric identifier.
11:10:27 <d34df00d> So, basically, I have a bunch of different metrics, some are counters, some are distriubtions, and that's it.
11:10:42 <d34df00d> I want to be able to generically do something reasonable to a metric given its ID.
11:11:09 <d34df00d> Sure, I could just have getCounterMetric :: CounterMetric m => m -> IO Counter and similarly for distribution metrics.
11:11:24 <d34df00d> But that's not enough type-level programming and not enough learning for a hobby project :)
11:11:48 <Rembane> Famous last words! 
11:11:51 * Rembane ducks and runs :D
11:12:51 <d34df00d> Lol, that's kinda the problem I'm having with Haskell. I'm super productive if I do things the straight way, but if I deviate and try to do something that I consider fancy (like all this stuff)... :)
11:14:28 <Rembane> I have the same problem. :D
11:17:45 <ski> d34df00d : ok, so `Metric' describes the ID ?
11:17:53 <d34df00d> ski: yep!
11:18:21 <ski> and `MetricType' then describes the actual "counter" content of the specified metric ?
11:18:26 <d34df00d> Yes.
11:18:48 <d34df00d> ...which defines if I can just increment it, or just store a new value, or something like that.
11:18:57 <ski> you could try making `MetricIs' a GADT (namely a singleton), and then also `MetricType' a singleton
11:19:45 <d34df00d> If I go the GADT route I'm not really sure I need it to be a singleton (if I understand correctly the general usage of this word).
11:19:59 <ski> (i suppose i have the opposite problem .. not so productive, unless i can try something fun)
11:20:15 <d34df00d> So I could have `data Metric ty where PageParseTime :: Metric Distribution; NuMpagesFetched :: Metric Counter`
11:20:48 <d34df00d> Then I have `getMetricTracker :: HasStore ty. Metric ty -> IO ty` or something like that.
11:20:55 <d34df00d> The clients happily use specific constructors.
11:21:01 <d34df00d> And everybody's happy.
11:21:02 <ski> d34df00d : with just `getMetricTracker :: forall (m :: Metric). IO (MetricType m)', you couldn't use different code, depending on which `Metric' was used
11:21:39 <ski> (it would have to be a single piece of generic / parametric code, that works the same way for all metrics)
11:21:51 <d34df00d> ski: why? If I also have `getMetricTracker :: forall (m :: Metric), HasStore (MetricType m). IO (MetricType m)`, can't I stick the different parts into the HasStore typeclass?
11:22:06 <ski> otoh, if you add an argument of type `MetricIs m' (being a GADT, and probably being a singleton), then you could conditionalize
11:22:10 <d34df00d> I mean, I'm adding another constraint on what a metric type is, but that's a very small set so I'm happy with it.
11:22:41 <ski> d34df00d : i'm not sure what this `HasStore (...).' thing is, it looks like a syntax error to me
11:23:02 <d34df00d> I missed the parens.
11:23:21 * ski is still unsure
11:23:36 <d34df00d> Well, not parens. Should be `getMetricTracker :: forall (m :: Metric). HasStore (MetricType m) => IO (MetricType m)`.
11:23:44 <d34df00d> For `class HasStore ty where ...`
11:24:07 <d34df00d> Parson me.
11:24:28 <ski> oh, ok
11:25:16 <ski> yea, that could work, if `HasStore' (or superclasses) has some member that allows you to identify, or at least get some information out of, the kind of metric being used
11:25:49 <d34df00d> Yep, that's the idea!
11:27:39 * ski confesses to d34df00d
11:36:57 <DigitalKiwi> what's the difference between cabal new-exec and cabal new-run?
11:39:27 <nshepperd> run is for compiling your package then running its binary, exec is for running a shell command with the ghc environment set up
11:39:37 <nshepperd> iirc
11:52:10 <d34df00d> Data.Dynamic desperately needs something like withDynamic
11:55:11 <nshepperd> a prism!
11:58:07 <dmwit> DigitalKiwi: Besides the difference in intention nshepperd described, new-run always builds its target and new-exec never does.
11:58:53 <dmwit> d34df00d: What type do you want withDynamic to have?
12:00:33 <d34df00d> dmwit: well, I just wrote something like
12:00:35 <d34df00d> https://bpaste.net/show/26cb36384608
12:00:57 <d34df00d> Maybe DynOrdCtx could be lifted as DynOrd's type parameter to make it more reusable.
12:01:16 <dmwit> DigitalKiwi: There's a couple differences in the end. new-exec is intended for running build tools; so it doesn't build anything first, and it inspects the command to add flags and pick the right executable (e.g. if you `new-exec ghc` it may become `ghc-8.4.2 --threaded -rtsopts` or whatever). Meanwhile new-run is intended for running executables provided by the project, so it only works on known targets, 
12:01:22 <dmwit> builds them first, but doesn't munge the command-line arguments.
12:02:20 <dmwit> d34df00d: But you can't reuse Dynamic for this. So why does it matter whether there's a withDynamic or not?
12:02:41 <d34df00d> That's the next step — I could generalize Dynamic!
12:03:00 <d34df00d> Indeed, parametrizing it by the expected constraints looks reasonable and useful.
12:05:49 <DigitalKiwi> oh ok thanks
12:06:46 <nshepperd> :t _Dynamic
12:06:47 <lambdabot> (Applicative f, Choice p, Typeable a, AsDynamic t) => p a (f a) -> p t (f t)
12:06:52 <nshepperd> huh, that already exists
12:07:18 <nshepperd> > foldMapOf _Dynamic (show :: Int -> String) (toDyn (5 :: Int))
12:07:20 <lambdabot>  "5"
12:07:29 <nshepperd> > foldMapOf _Dynamic (show :: Int -> String) (toDyn (5 :: Double))
12:07:31 <lambdabot>  ""
12:08:04 <d34df00d> http://hackage.haskell.org/package/lens-4.17.1/docs/Data-Dynamic-Lens.html
12:08:05 <d34df00d> I see.
12:08:18 <nshepperd> being a Prism' instead of a Prism is kind of lame though
12:08:39 <nshepperd> '(Typeable a, Typeable b) => Prism Dynamic Dynamic a b' is totally possible
12:11:00 <nshepperd> not sure that's the kind of withDynamic you're talking about though
12:14:14 <dmwit> d34df00d: https://github.com/glguy/operations/blob/master/src/Object.hs
12:15:03 <dmwit> d34df00d: e.g. your DynOrdCtx is Object '[Ord, Typeable]
12:15:56 <dmwit> d34df00d: And your withDynOrds can be implemented in terms of usingN.
12:16:36 <d34df00d> That's some good stuff there!
12:21:11 <hyperisco> Free advice while I'm here
12:21:22 * ski . o O ( <http://math.andrej.com/2012/12/25/free-variables-are-not-implicitly-universally-quantified/> )
12:23:27 <dmwit> Reason 7 (not listed): you must choose how far out to put the quantifier, and the different places you may choose have different meanings.
12:24:32 <ski> yes
12:24:52 <ski> (and select which way to bind the variable)
12:24:54 <dmwit> ...but I don't really know why you mentioned this post. Is it relevant to the Dynamic discussion we were having, or did you just like it?
12:25:35 <ski> i suppose it's something which i've been nitpicking on, over the years, and i was just happy to see someone else talk about it
12:27:55 * dmwit nods agreeably
12:44:58 <d34df00d> What if I want to do something in a transactionable way, but which requires some IO?
12:45:24 <d34df00d> For instance, I  want to create a new counter in ekg (which is an IO action), but I want to store it in a map and do this only once per counter ID.
12:45:26 <zachk> d34df00d, you mean in STM? 
12:45:31 <d34df00d> So STM is out of the window.
12:45:37 <d34df00d> zachk: I cannot do IO in STM :(
12:45:48 <d34df00d> I thought about something like double-locking with MVars.
12:46:09 <d34df00d> So I first readMVar without blocking everybody else and check if my map contains the needed entry.
12:46:14 <d34df00d> If it does, then I just return it.
12:46:20 <d34df00d> Otherwise, I takeMVar, update the map and putMVar.
12:46:25 <d34df00d> Does this sound OK?
12:46:30 <zachk> break up the storing into a pure action that returns a new map and then "mutate" that in a TVar in an STM, after the IO Action ?
12:46:41 <d34df00d> Or, rather, withMVar.
12:46:56 <d34df00d> zachk: bad things will happen if I perform the same IO action twice.
12:47:13 <d34df00d> So I also need to ensure I create the value for the map (which is the IO action) just once.
12:47:48 <d34df00d> s/the value for the map/the value for the given key under the map/
12:48:44 <cocreature> d34df00d: that sounds like you have a race condition if things change between the readMVar and before you acquire the MVar
12:49:28 <d34df00d> cocreature: hmm, why?
12:49:44 <d34df00d> When I acquire the MVar I check again if nobody has managed to insert a value under the key I need again.
12:50:54 <cocreature> right if you check again then that should work
12:51:24 <d34df00d> > However, it is only atomic if there are no other producers for this MVar.
12:51:24 <d34df00d> Damn.,
12:51:24 <cocreature> but in that case I wouldn’t add the readMVar shortcut without benchmarking to see if it actually makes a difference
12:51:27 <lambdabot>  <hint>:1:8: error: parse error on input ‘,’
12:51:36 <d34df00d> Life is hard.
12:52:02 <cocreature> that should be fine in this case. as long as everything that writes to the MVar does so with a withMVar you should be good
12:52:07 <merijn> d34df00d: WHy are multiple threads doing this?
12:52:36 <d34df00d> cocreature: hmm, what do they mean by being atomic in this case then?
12:52:58 <d34df00d> If all withMVar does is takeMVar + putMVar + all the bracket scaffolding, then I'm not sure at all.
12:53:24 <d34df00d> merijn: that's a global per-app metrics store, and different threads might request different metrics (which are created on-demand).
12:53:35 <d34df00d> Or even the same metric.
12:54:10 <merijn> d34df00d: Why not have a dedicated thread dealing with the creation of metrics and then have any threat that wants a new one send a message to that one thread?
12:54:36 <merijn> d34df00d: i.e. create a Chan of "MetricRequests", 1 dedicated thread handling them, everyone else just writes requests into the Chan
12:55:02 <d34df00d> Hmm, that's an interesting approach I haven't thought about!
12:56:15 <cocreature> d34df00d: if everyone respets the takeMVar + putMVar pattern you’re good. if something does a putMVar without first acquiring the mvar with a takeMVar then things get messed up
12:58:20 <dmwit> You can do it with STM as a two-stage protocol.
12:58:36 <dmwit> First update the Map to say "I'm on it", then update the Map to say "and here's the counter".
12:59:41 <d34df00d> That's probably more straightforward than using chans or queues, and I trust this more than handling MVars myself. I guess I'll go this route, thanks!
13:00:16 <dmwit> I think it's probably less straightforward. =P
13:00:21 <dmwit> But you do you, man.
13:01:07 <merijn> Yeah, I think the Chan solution is by far the simplest
13:06:39 <hyperisco> Please figure out how to type check concurrency.
13:08:03 <d34df00d> merijn: but I'll need need to create a chan at the call site so that the server thread will hand me back the metrics object... And this all starts to sound clunky to me, at least.
13:08:29 <merijn> d34df00d: What do you mean by that?
13:08:43 <merijn> hyperisco: Lookup session types
13:08:47 <d34df00d> merijn: chans are unidirectional, aren't they?
13:09:06 <merijn> d34df00d: Yeah, but the MetricRequest can include an MVar to write replies too :)
13:10:00 <hyperisco> merijn, thanks
13:10:03 <merijn> d34df00d: That's a trick I've used in the past, if you want a central thread to be able to reply to request without knowing who they're from, just include an MVar in the request as "write answer here" tool then the central thread doesn't have to know who's asking
13:10:48 <d34df00d> Oh, I haven't thought about using mvars here!
13:17:23 <infinisil> Neat
13:18:27 <merijn> d34df00d: Wrap it in a single "requestMetric :: MetricType -> IO MetricResult" that creates an MVar, sends it to the channel and immediately blocks to read the result
13:18:39 <merijn> Boom, super convenient API with no worries about races
13:19:18 <d34df00d> Yeah, thanks for the idea, now this route seems like more fruitful for me too!
13:19:25 <d34df00d> Easier to reason about than the state of the map.
13:24:14 <ski>   "This result is folklore, which is a technical term for a method of publication in category theory. It means that someone sketched it on the back of an envelope, mimeographed it (whatever that means) and showed it to three people in a seminar in Chicago in 1973, except that the only evidence that we have of these events is a comment that was overheard in another seminar at Columbia in 1976."
13:24:20 <ski>   "Nevertheless, if some younger person is so presumptuous as to write out a proper proof and attempt to publish it, they will get shot down in flames."
13:48:26 <d34df00d> Alrighty, got it.
13:49:12 <d34df00d> https://bpaste.net/show/35a3d50c1946
13:49:26 <d34df00d> merijn: do you spot any immediate problems in the above?
13:49:52 <d34df00d> newMetricsStore and getMetric is the public API (along with the types involved).
13:50:12 <d34df00d> I could probably omit handleReq's signature though...
13:51:10 <merijn> d34df00d: Looks fine at first glance, you might want to extend the MetricStore with a way to gracefully shutdown the forked thread at some point, but other than that
13:51:39 <d34df00d> I kinda don't like explicit state passing in act
13:51:53 <d34df00d> But wrapping that in StateT IO is probably not worth it.
13:52:26 <d34df00d> merijn: what's the right pattern for this sort of graceful shutdown btw?
13:52:41 <d34df00d> I don't like that void $ forkIO part either :)
13:57:54 <merijn> d34df00d: You can allocate a "TVar Bool" that indicates closed then modify the STM code to check for a message OR whether the Bool changed to closed, then shutdown in the latter case
13:58:26 <merijn> Then you just need an "shutdownThread :: IO (); shutdownThread = atomically $ writeTVar var True"
13:58:39 <merijn> Alternativelly, store the ThreadId from fork and use killThread
13:58:43 <solonarv> d34df00d: if you are shutting down the thread then you might want to killThread it, you needs its ThreadId for that - which is returned by forkIO
13:58:56 <solonarv> so just ditch the void $ and store the ThreadId
13:59:15 <d34df00d> Yeah, that's probably easier than a TVar with a bool
14:23:32 <d34df00d> Let's say I have a function getTracker and a typeclass TrackerLike that look like effectively
14:23:55 <d34df00d> https://bpaste.net/show/0eaa1d414016
14:24:30 <d34df00d> Is it possible to reduce the 'track' method of TraackerLike to just TC.inc and TD.add, and have a function that accepts store and metric and calls getMetric elsewhere?
14:25:17 <d34df00d> A type like `{- appropriate context -} => MetricsStore -> Metric tracker name -> TrackerAction tracker` looks promising but the problem is that I cannot write its body.
16:00:24 <kostas> I'm trying to find some info about the ghc I/O manager, basically in which cases it's implicitly used. Most I find are bug tracks and old stuff.
16:07:44 <slack1256> kostas: implicitly used? The RTS is always using the IO manager.
16:09:16 <davean> slack1256: not really true, the RTS doesn't use the IO manager really. The IO manager is really Haskell code thats in 'base'
16:09:46 <slack1256> AFAIK the "Mio" IO manager was merged around 2014 which came from some paper published on 2013. It shows good speedups on Unix system but it's suboptimal on Windows, so it being changed to a new solution.
16:10:16 <c_wraith> The problem on windows is that IOCP isn't anything like any unix system.
16:10:21 <kostas> I't used when you do IO through System.IO right? I was wondering if it's also used when doing other kind of IO, for example with sys-calls from `unix` package.
16:10:40 <c_wraith> kostas: it's used whenever it's used.  Anyone can call functions that use it.
16:11:16 <kostas> What I'm asking is which are those functions?
16:11:30 <c_wraith> Why does it matter?
16:11:48 <slack1256> Does the "unix" package do syscalls or make use of the RTS to make them?
16:11:53 <davean> kostas: any functions that need to wait really, and just the functions that need to wait
16:12:01 <davean> slack1256: uh, you're thinking about it wrong
16:12:06 <davean> slack1256: its not "syscalls or"
16:12:08 <c_wraith> Roughly, you can think of it as "every blocking IO function *should* be using them, and indicates a bug of some sort if it isn't"
16:12:12 <slack1256> I think they are invariant the RTS has to preserve, so syscalling is out of the question
16:12:21 <davean> slack1256: no
16:12:28 <davean> slack1256: RTS and IO manager are seperate
16:12:44 <slack1256> explain
16:12:50 <kostas> `unix` does system calls. This means it doesn't use it right?
16:12:55 <c_wraith> nope
16:13:05 <c_wraith> doesn't say one way or another.
16:13:13 <davean> slack1256: The IO manager lets you know WHEN you can do syscalls and have them return immediately
16:13:34 <davean> It has nothing to do with the RTS other than, as with all other haskell code, it is run by the RTS
16:13:38 <davean> the RTS just executes Haskell code
16:13:44 <davean> the IO manager is just pure Haskell code
16:15:35 <davean> I don't know what you tihnk the IO manager does that you're comflating it with being involved in the RTS and something having to use it or not
16:16:17 <davean> I think theres some deeper misunderstanding to resolve here
16:16:49 <davean> (The IO manager does sorta give a way to pause a context)
16:17:20 <davean> (Maybe thats what you mean by interacting with the RTS?)
16:20:43 <kostas> Is it used for blocking operations? Is there any reason to use it in writes? (I'm basically asking out of curiosity - I'm not trying to directly use it in any kind :)
16:21:25 <davean> kostas: well, how do you know your write isn't blocking?
16:22:51 <davean> kostas: its used to schedule IO operations so they *aren't* blocking
16:23:13 <davean> also to wake up threads at a given time, etc
16:24:12 <kostas> "they are't blocking" you mean inside a foreign call?
16:26:08 <kostas> The thread still waits, but it can also be interrupted right? Or it doesn't block at all?
16:26:29 <davean> Doesn't block at all
16:26:37 <davean> the haskell thread is not an OS thread
16:27:01 <davean> infact, not even the Haskell thread need block using the IO manager
16:27:21 <davean> the IO manager calls a callback when the condition is meet
16:27:41 <davean> you cna use that to block the Haskell thread
16:28:02 <kostas> I see. So the Os thread definitely does not block and the Haskell thread may or may not block?
16:28:18 <davean> basicly
16:33:14 <slack1256> Yeah, on my mind it isn't that important the is pure haskell code. The interaction with the RTS is too involved to be considered separated
16:34:09 <kostas> Would it be a good design to make a simple I/O manager whenever foreign calls are used? What I mean is having a couple of threads waiting on a queue to run ffi`s instead of the actual user threads?
16:35:24 <davean> slack1256: Exactly how do you think it it interacts with the RTS?
16:35:48 <davean> Because I can, and have, replaced it with entirely different code and the RTS can't notice :-p
16:35:56 <davean> Because it has basicly no interactions with the RTS :-p\
16:36:37 <slack1256> davean: http://haskell.cs.yale.edu/wp-content/uploads/2013/08/hask035-voellmy.pdf read the part of the initialitation the rts does using the IO manager, it crucial
16:36:50 <davean> kostas: well, you owuldn't "make", you'd "use" and you could, it depends on if you can encode the blocking conditions to the IO manager
16:36:58 <slack1256> you can't consider one without the other, the RTS without the IO manager would not make sense
16:37:19 <davean> slack1256: I mean I've read it, and worked on the IO manager
16:37:36 <slack1256> good
16:38:02 <davean> they're not tightly coupled
16:38:17 <davean> I mean I know they say it is
16:38:20 <davean> but I have no idea why
16:38:49 <davean> Theres an API between them, and that API is not related to the internal design
16:42:35 <davean> aybe I just don't have a different enough idea of how one could design an IO manager that owuld break the coupling
16:44:31 <kostas> davean: oh I dodn't know I can use it. What do you mean by the blocking comdition?
16:47:32 <davean> kostas: http://hackage.haskell.org/package/base-4.12.0.0/docs/GHC-Conc-IO.html
17:04:06 <kostas> thanks!
17:31:35 <isovector1> i'm trying to prove to ghc that `IndexOf something list ~ IndexOf something (list ++ more)` whenever the lhs isn't stuck
17:31:52 <isovector1> it's safe to unsafe coerce.... but feels unsatisfactory
17:51:47 <epta> does anyone have the materials from this course? https://www.cs.rit.edu/~mtf/teaching/20131/plt/assignments.html
17:51:56 <epta> pdf links doesn't work for me
19:17:27 <d34df00d> Can I haz quantified types in type families?
19:17:46 <d34df00d> I want something like `type TrackAction Foo = forall m. MonadIO m => m ()`
19:17:53 <d34df00d> (associated with a class instance)
20:03:12 <lyxia> no
20:03:30 <lyxia> you can wrap them in data
20:03:46 <lyxia> data TrackAction Foo = TA (forall m. MonadIO m => m ())
20:14:54 <pie_> is there no built in strip function for String?
20:15:00 <pie_> or trim or whatever its called
20:15:06 <pie_> i want to get rid of leading and trailing white space
20:18:20 <alx741> pie_: there is in extra: https://www.stackage.org/haddock/lts-13.19/extra-1.6.15/Data-List-Extra.html#v:trim
20:18:39 <pie_> but thats not installed by default right?
20:19:32 <alx741> pie_: it is, in the core libraries. You have to put "extra" among the dependencies in the cabal file though
20:19:53 <pie_> ah. well im just using a single file right now, so if i can just import it thats fine i guess
20:20:48 <alx741> pie_: In that case I *think* just having `import Data.List.Extra (trim)` will do it
20:20:57 <pie_>  Could not find module ‘Data.List.Extra’
20:22:03 <alx741> yep, just tried it. You have to use it as a dependency it seems
20:23:16 <pie_> hm thanks anyway
21:01:41 <pie_> is there something for if bool then stuff else Nothing?
21:01:58 <pie_> i suppose Just stuff, if anything
21:12:02 <dmj`> pie_: forM_ / for_ works well with that, if you're in a Monad
21:12:24 <dmj`> forM_ yourMaybe $ \justValue -> stuffToUnit justValue
21:12:26 <jle`> pie_: 'when' ?
21:12:31 <pie_> hmm ill take a look at those thanks
21:12:49 <jle`> pie_: or well, do you have a concrete implementation if what you are thinking of
21:13:01 <jle`> then we can know exactly what you mean, and then see if there is a version already in base or something
21:13:17 <pie_> current out of context snippet: head $ mapMaybe (\offset -> if (isCompatible $ tp offset) then (Just $ join $ tp offset) else Nothing) offsets
21:14:26 <jle`> ah, the Just-if-some-bool you can use guard or mfilter
21:14:39 <jle`> and head + mapMaybe is fmap and asum
21:15:02 <jle`> or well, that gives you a Maybe, with Nothing if the list is empty or nothing is found
21:16:14 <jle`> mfilter isCompatble (Just (tp offset))
21:16:23 <jle`> will give you NOthing if not compatible
21:16:23 <pie_> i dont see guard or mfilter on http://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Maybe.html
21:16:32 <jle`> @where guard
21:16:32 <lambdabot> I know nothing about guard.
21:17:33 <pie_> (i think i did see guard under applicative though earlier?)
21:18:17 <pie_> hm or not i guess
21:19:09 <jle`> ah oops
21:19:13 <jle`> @hoogle guard
21:19:13 <lambdabot> Control.Monad guard :: Alternative f => Bool -> f ()
21:19:14 <lambdabot> Protolude guard :: Alternative f => Bool -> f ()
21:19:14 <lambdabot> Protolude.Monad guard :: Alternative f => Bool -> f ()
21:19:32 <pie_> unrelated...looks like i cant pattern match on a partially applied data constructor?
21:19:38 <jle`> but for this i'd probably use a list comprehension
21:20:18 <jle`> [ join x | offset <- offsets; let x = tp offset; isCompatible x ]
21:22:41 <pie_> hmm, that doesnt look bad
21:23:18 <jle`> that gives you a list of them all
21:23:26 <jle`> and you can use listToMaybe if you want the first
21:23:46 <jle`> list comprehensions are well suited for filtery compositions like these
23:04:31 <fresheyeball> any advice on a modern approach to sharing state between a ghc backend and ghcjs frontend?
23:32:38 <slack1256> I got a non-terminating program (taffybar) on which I would like to profile via +RTS -s --RTS. I can only stop it via SIG{TERM,INT}, but that also make it not print the profiling info. Any suggestion?
23:38:21 <cocreature> slack1256: pretty sure that RTS stats are written out on SIGINT and a simple test program seems to confirm that.
23:38:37 <cocreature> as does the GHC source code https://github.com/ghc/ghc/blob/master/rts/posix/Signals.c#L506
23:38:42 <slack1256> cocreature: that is my impression too!
23:38:46 <slack1256> but taffybar is weird
23:38:56 <slack1256> it need two ^C^C to actually close
23:39:12 <slack1256> the first one get hanging there not doing nothing
23:44:10 <cocreature> that sounds like taffybar might catch UserInterrupt somewhere
23:44:36 <slack1256> Yep, well I know what I have to do now
23:44:42 <slack1256> thanks cocreature
23:46:07 <cocreature> slack1256: +RTS -xc might give you some useful information
23:50:34 <slack1256> Yep, I read that blogpost of neil mitchell about how to detect space leaks with -xc .
23:51:38 <slack1256> curiously, there is a thread on -libraries where they are discussing the pros of adding HasCallStack to partial functions on base vs getting -xc out of -prof
23:59:11 <cocreature> HasCallStack wouldn’t help here. You are trying to get information about the UserInterrupt exception thrown by Ctrl-C, not about a partial function
