00:25:46 <pdxleif> The ghc library section of the release notes seems blank - would anyone know where to find the changelog for the GHC api from 8.4 to 8.6? https://downloads.haskell.org/~ghc/master/users-guide/8.6.1-notes.html#ghc-library
00:25:57 <pdxleif> Wondering about porting liquid haskell to ghc 8.6.
01:03:20 <matsurago> fengshaun: "Beginning Haskell" is quite a good book despite the name. It introduces different GHC extensions and Haskell libraries on Hackage, and real-world examples like how to work with databases
01:31:55 <mniip> I've discovered some blog posts on this topic that I haven't read before
01:32:01 <mniip> but they all omit the technical detail
02:34:05 <q6AA4FD> is anyone familiar with megaparsec?
03:08:12 <oo_miguel> Is the use of ghc-mod encouraged? I just tried to install if via "stack install ghc-mod" but got a lot of dependancy conflicts.
03:22:18 <oo_miguel> oh, and I guess I would have to roll back to an older ghc version in order to use it
05:42:00 * hackage atom-conduit 0.5.0.3 - Streaming parser/renderer for the Atom 1.0 standard (RFC 4287).  https://hackage.haskell.org/package/atom-conduit-0.5.0.3 (koral)
06:27:26 <Gurkenglas> How should I print a console line in color?
06:27:44 <Gurkenglas> or rather, a letter, with other letters perhaps in other colors
06:27:55 <Gurkenglas> is there unicode for this, or something?
06:28:11 <amx> AFAIR there are escape characters for that
06:28:46 <amx> https://stackoverflow.com/questions/4842424/list-of-ansi-color-escape-sequences
06:29:05 <Ferdirand> it's somewhat platform-specific
06:30:11 <hpc> there's a package for it too, ansi-terminal
06:30:41 <hpc> makes it less platform-specific and more ghc-specific
06:31:18 <Gurkenglas> ah i can just print white pieces in small and black in capital letters.
07:23:24 <jgt> anyone here have experience with the safe-money library? If so, how do you render monetary amounts? I need to go from something like `SomeDense "USD" (100 % 1)` to something like `"$100"`.
07:24:15 <jgt> I could implement this stuff myself, but it seems such a typical use-case that there's _probably_ a lib for it
07:48:00 * hackage hledger-iadd 1.3.8 - A terminal UI as drop-in replacement for hledger add  https://hackage.haskell.org/package/hledger-iadd-1.3.8 (hpdeifel)
07:50:44 <jgt> yikes. I figured it out. It's like `Money.withSomeDense (riskSubjectPremium risk) (Money.denseToDecimal Money.Round False (Just ',') '.' 0 (1 % 1))`
07:50:56 <jgt> where `riskSubjectPremium risk` is a SomeDense
07:57:52 <Digit>  <3ing  https://www.youtube.com/watch?v=UvkKf8ME564  linux conf au "designing functional clothes with haskell - noon van der silk".  enthusing, aluring, encouraging, inspiring, especially to an artist & haskell-wannabe like me.
08:00:01 <b_jonas> > (-1-5)
08:00:04 <lambdabot>  -6
08:00:04 <b_jonas> @pl (-1-5)
08:00:04 <lambdabot> 4
08:00:10 <b_jonas> ^ Is this a bug in @pl ?
08:00:18 <Digit> still watching, :O   just seen can svg with it too.   ohhhhh the potential, the possibilities...     i hope i manage to get the staying power to actually get capable with haskell.
08:00:37 <merijn> b_jonas: @pl is...not very smart
08:01:17 <b_jonas> merijn: yeah, but I thought when it meets something it doesn't understand, it either passes it through untransformed or gives an error
08:01:22 <b_jonas> as opposed to giving the wrong result
08:01:36 <hpc> :t \x -> x x
08:01:38 <lambdabot> error:
08:01:38 <lambdabot>     • Occurs check: cannot construct the infinite type: t ~ t -> t1
08:01:38 <lambdabot>     • In the first argument of ‘x’, namely ‘x’
08:01:41 <hpc> @pl \x -> x x
08:01:41 <lambdabot> join id
08:02:05 <hpc> it's basically a fancy string matcher
08:02:05 <merijn> b_jonas: @pl is textual, it doesn't really parse "real" haskell
08:02:10 <jollygood2> I have my own package named foo, that optionally depends on library bar. what should I name that package? foo.bar? and can I put it in the same directory as foo?
08:02:19 <b_jonas> merijn: sure, it parses only a subset
08:02:29 <b_jonas> hpc: wouldn't that be valid if looping types were allowed?
08:02:44 <merijn> jollygood2: Optional dependency? That sounds like it can break lots of things...
08:02:52 <hpc> jollygood2: take a look at stuff like web frameworks which do that all the time
08:03:19 <jollygood2> merijn, maybe I wasn't clear. foo.bar will define some functions related to bar package. foo will know nothing about bar, or foo.bar
08:03:23 <hpc> b_jonas: sure, but that's not haskell ;)
08:03:47 <merijn> jollygood2: Ah, I'd go with foo-bar
08:03:50 <Solonarv> it can also be given a polymorphic type:
08:03:52 <hpc> actually, here's a better one
08:04:08 <hpc> @pl \f -> (\x -> f (x x)) (\x -> f (x x))
08:04:08 <lambdabot> ap (. join id) (. join id)
08:04:26 <jollygood2> should foo and foo-bar be in their own separate directories, or can I put them in the same one?
08:04:29 <merijn> jollygood2: cabal doesn't support multiple packages in a single directory (i.e. cabal and source files in one place), but you can certainly have them in the same repo
08:04:30 <hpc> hmm, not quite as dramatic as i had hoped
08:04:31 <Solonarv> :t let { sa :: (forall x. x -> x) -> a; sa x = x x } in sa
08:04:32 <jollygood2> hpc, which one specifically?
08:04:32 <lambdabot> error:
08:04:33 <lambdabot>     • Couldn't match expected type ‘a1’ with actual type ‘x0 -> x0’
08:04:33 <lambdabot>       ‘a1’ is a rigid type variable bound by
08:04:42 <hpc> that's fix in untyped lambda calculus
08:05:38 <Solonarv> well, one implementation of it, anyway
08:05:45 <merijn> jollygood2: Do you use new-build?
08:05:47 <jollygood2> merijn, what is the advanrtage of having them in the same repo compared to just having two independent packages?
08:05:51 <jollygood2> merijn, stack
08:06:13 <merijn> jollygood2: Easier to develop against unreleased versions while keeping things in sync if they're in the same repo
08:06:32 <merijn> jollygood2: Dunno about stack, with new-build I use something like this: https://github.com/merijn/broadcast-chan
08:06:34 <hpc> you're mixing things up a bit - in the same git repo you just don't have to do multiple "git clone"s to check out your code
08:06:46 <hpc> they're always going to be two separate packages - a package is a unit of built code
08:06:51 <hpc> and a repo is a unit of source code
08:07:03 <hpc> (more or less)
08:07:16 <merijn> jollygood2: 1 repo, 4 directories, each directory being a single packag
08:07:36 <jollygood2> sounds good
08:10:50 <sm> morning all
08:11:23 <sm> could anyone tell me how http://hackage.haskell.org/package/brick-0.46/docs/Brick-Widgets-List.html exports reverse (from GHC.List ? I don't see it from the haddock or source)
08:11:54 <MarcelineVQ> reverse is in prelude
08:12:37 <sm> ohh.. should have read ghci output more carefully. It's also in brick's class Reversible
08:24:22 <Gurkenglas> how do i get intero for emacs to respect the --package shebang in a stack script?
08:39:00 <jollygood2> what's up with this? 1 / 3 :: BigDecimal results in just 0.3333, less precision than Float. https://bpaste.net/show/e758a756384f
08:40:14 <hpc> try (1 / 3) * 100000000000000000000000000000000000000000000000000000000000000000000000000000000
08:40:51 <hpc> you're only seeing the formatted version of it
08:40:54 <jollygood2> BigDecimal 33330000...
08:41:01 <hpc> oh, huh
08:41:13 <jollygood2> there's constructor in the paste, it has just 4 digits with the value 3
08:41:40 <hpc> what package is that in?
08:41:46 <jollygood2> HasBigDecimal
08:43:39 <hpc> so its data type is a tuple of integer and scaling factor
08:44:18 <hpc> and when you do 1/3, it tries to infer a level of precision
08:44:23 <hpc> with matchScales
08:45:12 <hpc> maxPrecision = fromMaybe (precision a + round (fromInteger (precision b) * 10 / 3)) prefScale
08:45:17 <hpc> trim maxPrecision (BigDecimal (divUsing rMode (numA * (10 :: Integer) ^ maxPrecision) numB) maxPrecision)
08:45:36 <hpc> and i guess that ends up evaluating to 4
08:46:13 <hpc> > round (10/3)
08:46:15 <lambdabot>  3
08:46:36 <hpc> 3 + (precision 1) is 4
08:52:06 <jollygood2> hpc, seems like an unusual way to infer precision
08:52:16 <jollygood2> and, as far as I can see, there's no way to override it
08:52:25 <hpc> yeah
08:52:41 <hpc> it's "inspired by" java's BigDecimal, which i suppose is all you really need to know about that package
08:53:35 <hpc> if you want fixed precision decimals, i suggest going with a type that's explicitly fixed precision
08:59:20 <jollygood2> I want more precision than offered by Double. so maybe Data.Decimal is a better choice?
08:59:36 <jollygood2> any other packages that I'm missing?
09:00:16 <c_wraith> There's Rational as an option sometimes
09:00:28 <c_wraith> But whether that's a good idea depends very much on what you're doing
09:00:39 <c_wraith> It's easy for Rational to get out of control, memory-wise
09:01:48 <wroathe> jollygood2: Data.Scientific?
09:02:02 <c_wraith> Data.Scientific is even worse for 1/3
09:02:50 <sm> Decimal is great
09:03:23 <c_wraith> 1/3 *diverges* with Data.Scientific
09:03:31 <Amras> how
09:03:48 <c_wraith> It tries to calculate it in base 10 at infinite precision. strictly.
09:04:02 <spots> hi, is there am easy way to make `elem` case insensitive?
09:05:08 <petercommand> jollygood2: How about exact-real?
09:05:24 <petercommand> http://hackage.haskell.org/package/exact-real-0.12.2/docs/Data-CReal.html
09:05:26 <b_jonas> jollygood2: do you specifically want a haskell package, or do non-haskell multiprecision libraries help if you can wrap them to haskell?
09:05:51 <b_jonas> jollygood2: and do you specifically want decimal floats, or would binary floats work?
09:05:56 <hpc> oddly enough, that's still fixed precision
09:06:17 <hpc> https://hackage.haskell.org/package/numbers-3000.2.0.2/docs/Data-Number-CReal.html is the real real number type
09:06:29 <hpc> (for computable reals, which is as good as you'll ever get)
09:07:39 <petercommand> hpc++
09:08:15 <b_jonas> hpc: that sounds... a bit overpowered if you just want more precision than Double
09:09:03 <hpc> are you saying you've never wondered what the hundred quadrillion and sixty fifth digit of pi is? :P
09:09:24 <davean> johnw_: Compensated
09:09:38 <davean> er, sorry, the person I meant left
09:10:03 <b_jonas> hpc: no, I'm just saying that I'd not use the full power of computable numbers for that. there are simpler methods for that, ones computing bounds for pi with binary floats or even decimal floats
09:10:23 <b_jonas> and even very specialized algorithms for answering questions like that for pi
09:11:09 <b_jonas> but no, I haven't wondered about that in particular
09:17:29 * hackage hledger-ui 1.13.1 - Curses-style user interface for the hledger accounting tool  https://hackage.haskell.org/package/hledger-ui-1.13.1 (SimonMichael)
09:34:30 * hackage mono-traversable 1.0.11.0 - Type classes for mapping, folding, and traversing monomorphic containers  https://hackage.haskell.org/package/mono-traversable-1.0.11.0 (MichaelSnoyman)
09:39:22 <wroathe> Does anyone here know where the kinds of things that can be added to an instance declaration is documented? In particular I'm wondering if new datatypes can be declared local only to an instance
09:39:48 <hpc> look at data families
09:41:20 <hpc> or probably type families more likely
09:41:45 <c_wraith> that sounds more like a data family
09:41:55 <Solonarv> both data and type families can be associated with a class
09:42:21 <hpc> data families are more like one data type distributed across multiple instances
09:42:27 <hpc> rather than associating a type with an instance
09:43:10 <Solonarv> yes
09:43:21 <c_wraith> type families aren't new types for each instance.  data families are.  They happen to share a name, but every data instance is an independent type.
09:43:50 <Solonarv> if you just want a datatype that's used in an instance's implementation, define it top-level (and don't export it, if you want to hide it)
09:45:14 <b_jonas> does haskell have nested modules for namespacing yet? and if so, does it also have general alias declarations?
09:46:00 <c_wraith> how is a nested namespacing different from hierarchical namespacing?
09:46:19 <Solonarv> no and no; Haskell doesn't really have first-class modules, AFAIK
09:46:34 <c_wraith> GHC does, if you're willing to put the work in to use them
09:46:37 <c_wraith> (backpack)
09:46:40 <Solonarv> apparently backpack is somewhere in that solution space but I don't know much about it
09:47:35 <wroathe> Solonarv: Yeah, that's what I ended up doing
09:48:13 <b_jonas> c_wraith: that depends on whether they work the rust way or C++ way. in the rust way, they're not really different. in the C++ way, every identifier in a module is implicitly imported to every module nested in it.
09:48:42 <Solonarv> oh right, C++ has modules as of very recently
09:48:53 <b_jonas> Solonarv: no, in this case I mean C++ namespaces
09:48:55 <b_jonas> not modules
09:48:59 <Solonarv> oh
09:49:09 <b_jonas> oh right
09:49:19 <c_wraith> Ah, I see.  Nothing like that.  Usually Haskell programs are arranged the other way around.  the things closer to the root of the hierarchy depend on their children, not the other way around.
09:49:22 <b_jonas> the terminology differs
09:49:32 <b_jonas> c_wraith: sure, that's what export is for
09:49:53 <b_jonas> you export identifiers from a module, and then another module can import it if it can also name the module
09:50:23 <b_jonas> or it can just refer to them without importing
09:50:49 <b_jonas> that much works the same in haskell and rust, and sort of in C++ too, only in C++ everything is exported by default
09:51:18 <b_jonas> (with a certain exception that lets you partially simulate not exporting things)
09:52:30 <b_jonas> and by "everything" I only mean module-level identifiers, but those include variables, functions, data types, type synonyms, namespaces, and more depending on the language.
10:05:45 <ezyang> did someone say Backpack? :) 
10:06:04 <ezyang> Backpack doesn't count as first class modules, and that's on purpose 
10:06:57 <Rembane> It doesn't? What does it count as?
10:09:00 <ezyang> when people say first class, they usually mean, most of the other orthogonal features in the language also work with it. So functions are first class in the sense that they can be passed around as values, etc.; first class modules would be modules you can pass around as values 
10:09:03 <ezyang> Backpack doesn't do that 
10:10:03 <b_jonas> ezyang: I didn't ask for first class modules though
10:10:24 <Rembane> ezyang: Ah, cool. Thank you
10:10:33 <ezyang> well then :) 
10:59:46 <dogonthehorizon> Hi, trying to get the following to compile[0]. Looking at the source for Req[1] I see that Url needs an argument, so I've tried a few variations with no luck. I thought I understood the error where I needed to pass in a kind `Scheme` to satisfy Url's constructor but I can't seem to pull in 'Scheme from the Req package. Where should I look next to debug the issue? [0]:
10:59:48 <dogonthehorizon> https://gist.github.com/dogonthehorizon/4a6d95900aeb96e1326a8b4f5f89f0c1 [1]: https://hackage.haskell.org/package/req-2.0.0/docs/src/Network.HTTP.Req.html#Url
11:01:39 <hpc> Url Scheme, no quote and title-cased
11:01:59 <hpc> er
11:02:08 <hpc> Url Https, or Url Http
11:02:32 <hpc> or, data ReaderOpts (scheme :: Scheme) = ..., with Url scheme
11:03:26 <hpc> er
11:03:31 <dogonthehorizon> hpc: Ah, I see, so I'd have to add scheme to my ReaderOpts definition? I'm trying to build a CLI that will parse text from the user as the uri, so I don't know at compile time if I'll have https or http. Will I have to do anything special to get ReaderOpts into a ReaderT later on?
11:03:32 <hpc> Url 'Https or Url 'Http
11:03:40 <hpc> https://hackage.haskell.org/package/req-2.0.0/docs/src/Network.HTTP.Req.html#http
11:04:09 <hpc> take a look at parseUrl
11:07:22 <Younder> New book 'Inverse problems in the theory of small oscillations' by Marchenco and Slavin
11:09:43 <dogonthehorizon> hpc: thanks, making uri an Either of http or https compiles. So now any code that makes use of `uri` will need to match on that either? Is there a less boilerplate-y way to make use of it? One line of thought I'm heading towards is implementing a function that executes a req using Alternatives so that the details of https/http are hidden from the caller.
11:10:54 <hpc> operate generically on (Url scheme), and use parseUrl to pick one or the other
11:14:03 <dogonthehorizon> hpc: Fair :) thanks for helping me think through this!
11:18:04 <hpc> yeah
11:18:25 <hpc> that package is kind of weird, it doesn't seem to really make much use of statically knowing if something is https
11:19:23 <Younder> why would it. Once connection is establised, it is just web-data
11:58:36 <flebron> Hi folks. Can there exist a function that shows (in the sense of returning a String) a type? For example, I'd like f (45 :: Integer) to evaluate to "45 :: Integer".
12:00:01 <cocreature> flebron: if you’re willing to incur a Typeable constraint then yes
12:00:29 <cocreature> > typeOf (45 :: Integer)
12:00:32 <lambdabot>  Integer
12:00:37 <cocreature> :t typeOf
12:00:38 <lambdabot> Typeable a => a -> TypeRep
12:01:58 <flebron> Ah very interesting. So reification. I assume this requires some language-level support. Is this a big constraint to ask? i.e. are "most things" Typeable?
12:02:49 <cocreature> a lot of things are Typeable and you can derive the instance
12:36:52 <lyxia> it's done automatically
13:00:10 <Solonarv> in recent GHCs you don't even need to say anything and the instance will be derived for you
13:21:03 <gentauro> > :t typeOf
13:21:05 <lambdabot>  <hint>:1:1: error: parse error on input ‘:’
13:21:18 <gentauro> % :t typeOf
13:21:18 <yahb> gentauro: Typeable a => a -> TypeRep
13:22:02 <Ariakenom> % (\x -> show x ++ " :: " ++ show (typeOf x)) True
13:22:02 <yahb> Ariakenom: "True :: Bool"
13:22:32 <Solonarv> % showWithType x = unwords [show x, "::", show (typeOf x)]
13:22:32 <yahb> Solonarv: 
13:45:58 <pie___> has there been any work on FFI to rust with types more expressive than just C types?
13:46:37 <Solonarv> I vaguely recall reading about such an effort, let me see if I can find it
13:51:14 <Solonarv> pie___: I found this: https://github.com/mgattozzi/curryrs
13:51:22 <b_jonas> pie___: more expressive in what direction? rust FFI already serves zero-length data structures
13:51:30 <b_jonas> that's at least a small extension over C
13:52:25 <Solonarv> better type safety than the "raw" C API, I assumed
13:53:09 <pie___> Solonarv, ah yeah that looks to be in the spirit of what I imagined
13:53:21 <pie___> shame it doesnt seem to work right now according to the readme (?)
13:53:59 * hackage postgrest 5.2.0 - REST API for any Postgres database  https://hackage.haskell.org/package/postgrest-5.2.0 (steve_chavez)
13:55:02 <Solonarv> yeah, also hasn't been updated in a year
13:55:05 <b_jonas> plus the FFI api supports &mut T, exclusive reference, which you can't really express in C
13:55:18 <b_jonas> in the type system that is
13:56:13 <b_jonas> oh wait
13:56:18 <b_jonas> this is the haskell channel
13:56:18 <b_jonas> sorry
13:56:23 <pie___> b_jonas, derp :D
13:56:26 <pie___> all good
13:56:34 <b_jonas> they were open in my IRC client too close to each other
13:56:48 <Solonarv> what channel did you think this was? I'm confused
13:56:55 <b_jonas> Solonarv: mozilla/#rust
13:57:00 <Solonarv> oh
13:57:10 <b_jonas> in which the rust FFI api is on topic
13:57:40 <b_jonas> that one is rather simlar to the Haskell FFI, after you modify it by the differences from haskell to rust
13:57:48 <b_jonas> but a bit more expressive
13:58:09 <b_jonas> because you can express basically any C type as a rust type
13:58:16 <b_jonas> natively without translation
13:58:26 <b_jonas> so that they're reference transparent
14:28:41 <pie___> Solonarv, also theres inline rust but im not sure whats going on there
14:29:04 <Solonarv> oh yeah I'd forgotten about that
14:31:33 <pie___> Solonarv, i had too but i just remembered it
14:42:25 <zachk> is there a preferred way to do logic programming in haskell? perhaps something like minikanren is preferred?
15:03:47 <__monty__> zachk: Don't know. Been watching some Kmett streams though. He's implementing a miniKanren-alike called guanxi.
15:05:38 <zachk> yea I have heard about that, docs look sparse, is it usable if you watch the streams?
15:10:29 <__monty__> Not finished so far. I'm not caught up on the streams though.
15:11:02 <__monty__> If you want to check it out, the first of the streams on this is titled "Back from ICFP" IIRC.
15:32:30 <inkbottle> stack ghci --ghc-options "-package ..."; How do I 'expose' two packages here?
15:39:08 <Solonarv> you use 'stack ghci --package' instead
15:39:55 <Solonarv> inkbottle: ^
15:40:11 <inkbottle> OK
15:41:49 <inkbottle> Solonarv: it did work, thanks
15:46:02 <inkbottle> import Data.ByteString (ByteString); :t "hello" :: ByteString
15:46:18 <inkbottle> that doesn't work; who do I fix it?
15:47:13 <Ariakenom> :t pack
15:47:14 <lambdabot> error:
15:47:14 <lambdabot>     • Variable not in scope: pack
15:47:14 <lambdabot>     • Perhaps you meant one of these:
15:47:16 <inkbottle> Hang on, I might find a solution
15:47:27 <Solonarv> you need OverloadedStrngs
15:47:29 <inkbottle> yes, yes,
15:47:58 <inkbottle> I was following the fst example there: http://hackage.haskell.org/package/cryptonite-0.25/docs/Crypto-Tutorial.html
15:48:14 <inkbottle> or the second...
15:48:56 <inkbottle> Is there example valid? What am I missing?
15:53:03 <lyxia> AFAICT the examples should be valid
15:54:18 <Solonarv> the examples are valid, they just didn't mention the required extensions
15:54:36 <Solonarv> oh, they did in the second one actually
15:54:55 <inkbottle> exact
15:54:58 <inkbottle> my bad
16:24:53 <inkbottle> show <$> ((hashWith SHA1) <$> (BA.convert <$> (BS.readFile "message.txt") :: IO (ByteString))) -- had a hard time finding /one/ type annotation that did make it work, though; gives same result as plain cli sha1sum; very satisfactory ;)
16:25:55 <comstar> do list comprehensions still need a list or can it be  [x  | x <- <Traversable t> ] 
16:26:09 <glguy> There's an extension MonadComprehensions 
16:26:19 <comstar> so, no
16:26:21 <glguy> That allows you to generalize to an arbitrary Monad instance (not Traversable)
16:26:32 <comstar> (thank you though)
16:26:42 <comstar> that sounds really cool as an extension
16:26:58 <hpc> sometimes
16:27:13 <Solonarv> eh, it's just a more confusing version of do notation IMO
16:27:18 <hpc> but you can also use do-notation with lists
16:27:34 <comstar> list comprehensions are? Solonarv 
16:27:43 <hpc> which helps to make list comprehensions less special conceptually
16:28:02 <Solonarv> monad comprehensions, which are a generalization of list comprehensions
16:28:18 <comstar> ah
16:28:26 <Solonarv> I don't mind comprehension syntax for lists but for other monads it's usually more confusing than do notation
16:28:52 <comstar> but in terms of not using extensions I could just use do notation?
16:28:58 <hpc> yep
16:29:15 <inkbottle> do-return, is already mimicking list comprehension notation (IMO)
16:29:33 <comstar> oo
16:29:48 <hpc> in list comprehension syntax, "pattern <- expression" is unchanged, boolean expressions become "guard expression"
16:29:57 <Solonarv> [ x | statements ] is equivalent to do { statements; pure x }
16:29:59 <hpc> and the expression at the start is returned at the end of the block
16:30:03 <Solonarv> (+ what hpc said)
16:30:29 <hpc> > do {x <- [1, 2, 3, 4, 5]; guard (even x); return (x + 10)}
16:30:32 <lambdabot>  [12,14]
16:30:48 <hpc> > [x + 10 | x <- [1, 2, 3, 4, 5], even x]
16:30:50 <lambdabot>  [12,14]
16:34:37 <comstar> pure & return are pretty interrelated like pure is from Applicative, right?   Solonarv hpc (not looking at docs rn to make sure I'm getting it down brain-wise)
16:34:51 <Solonarv> they're actually the same thing
16:35:18 <comstar> because because Applicative m => Monad m right
16:35:21 <hpc> return exists for historical reasons
16:35:25 <comstar> sorry about double because
16:35:32 <hpc> Applicative m => Monad m wasn't always a thing, Monad predates Applicative
16:35:35 <Solonarv> the fact that they both exist is a historical artifact
16:35:38 <comstar> ah
16:35:56 <comstar> do people often use either? or is it a good idea when in Monad-world to stick to return 
16:36:14 <comstar> just for clarity
16:36:18 <hpc> use pure
16:36:21 <Solonarv> the default definition of 'return' is 'pure', and there's a warning for when you define 'return' yourself
16:36:32 <Solonarv> (not on by default, part of -Wcompat IIRC)
16:37:57 <comstar> thanks for all the help
16:38:08 <comstar> :)
16:38:29 <Solonarv> the remnants of pre-AMP haskell can be a bit confusing :>
16:38:46 <Solonarv> generally speaking, prefer the Applicative variant when both exist
16:39:28 <Solonarv> (AMP = Applicative-Monad Proposal; the proposal that made Applicative a superclass of Monad)
16:42:09 <comstar> I feel like I need to dive into the haskell standard/etc at some point just to understand the slight nuances like that
16:44:35 <geekosaur> that won't be in the standard yet
16:48:49 <comstar> geekosaur: :( darn
16:49:09 <geekosaur> most of this ought to be in the extensions part of the ghc manual, I hope
16:49:18 <geekosaur> next standard isn't due until 2020
17:29:02 <day> when trying to compile code that 'import Data.Aeson' I'm getting a 'Could not find module 'Data.Aeson' There are files missing in the 'aeson...' package. GHCI on the other hand imports the Module just fine
17:30:06 <geekosaur> arch?
17:30:16 <day> i tried removing the package and reinstalling it with cabal, which fails because then cabal complains about another missing package
17:30:19 <day> yeah
17:30:28 <day> ghc-pkg check looks nightmarish btw
17:31:08 <geekosaur> easiest fix is to force compiling with -dynamic
17:31:53 <geekosaur> if you want to reinstall packages, you need to remove all haskell libraries installed via pacman and install them all using cabal (or stack if you swing that way, but it should do that anyway because it distrusts system packages... largely because of arch)
17:32:14 <day> lol
17:32:15 <Solonarv> you can get cabal+ghc using ghcup if you go that route
17:32:31 <geekosaur> ghci always loads the dynamic library, so it doesnt have a problem. programs normally link haskell libraries statically but arch removes all the static libraries
17:32:33 <day> is that a temporary thing?
17:32:43 <day> as in is it going to just work again soon?
17:32:59 <geekosaur> arch has been doing this for something like a year and a half now, I doubt they're going to fix it
17:33:09 <sclv> they stubbornly refuse to package things properly
17:33:21 <sclv> its the number one cause of user problems i've seen
17:33:27 <sclv> by like an order of magnitude
17:33:45 <geekosaur> they don't switch their ghc to dynamic by default, then remove all the static libs except a few core ones you hve to install ghc-static to get. which doesn't help with any other library
17:33:47 <lyxia> Yeah it's so bad :/ https://wiki.archlinux.org/index.php/Haskell
17:34:17 <MarcelineVQ> It's a little silly to say the least, all in order to save filespace for a couple large packages (xmonad and pandoc mostly)
17:34:41 <geekosaur> I can't imagine xmonad causes that much of a problem. pandoc, on the other hand, pulls in half the ecosystem
17:40:19 <day> actually i had no idea that haskell normally links statically
17:40:37 <day> isnt it usually the other way around?
17:41:31 <Solonarv> haskell doesn't have a stable ABI so that might be a contributing factor
17:41:34 <slack1256> Yeah, but we can't assume the binary will be run on a environment that has haskell libraries installed (we are not a lingua franca as C), to statically link make sense.
17:41:55 <slack1256> See (man ghc) and search -dynamic for how to enable it.
17:42:42 <day> i already got it working. was just curious
17:43:50 <slack1256> I got a network program that stablishes tcp connection and transfers a file. If the file is 300 MB, it transfers around 160 MB and stops. How do I debug such a problem, strace maybe?
17:43:56 <geekosaur> that, and the abi is not particularly stable because of cross-module inlining which means exact versions of dependencies including supposedly non-public ABIs which secretly get eposed for inlining
17:44:23 <MarcelineVQ> slack1256: My first test would be to find out if it's time related or size related
17:44:29 <sclv> i wonder if we could just prevail on arch to stop packaging ghc :-)
17:44:32 <geekosaur> graph reduction is really slow without
17:44:35 <day> well i guess size doesnt matter anyways these days
17:44:53 <sclv> and abal!
17:44:56 <sclv> cabal
17:47:28 <MarcelineVQ> slack1256: idk much about tcp but finding out if it's time related would narrow things down a bit I think, like indicating if there's a keepalive signal not being done, idk if keepalive matters if you're doing an active transfer or not tho
17:48:14 <orion> slack1256: I would start with Wireshark.
17:55:59 * hackage gamma 0.10.0.0 - Gamma function and related functions.  https://hackage.haskell.org/package/gamma-0.10.0.0 (rockbmb)
18:06:39 <slack1256> MarcelineVQ: Thanks I will start by there.
18:07:06 <slack1256> orion: Sooner or later I would had to learn it. Thanks
18:41:50 <dsal> stack doesn't seem to be working on aarch64.  Does anyone know anything about this?
18:42:08 <dsal> "I don't know how to install GHC for (Linux,AArch64), please install manually"
18:47:14 <geekosaur> I don't think there's an 8.6.3 for aarch64 as yet?
18:47:59 <dsal> 8.6.2 is in https://github.com/commercialhaskell/stackage-content/blob/master/stack/stack-setup-2.yaml -- but hmm...  Perhaps I should try a different lts.
18:48:51 <geekosaur> I don't see an aarch64 on the 6.8.2 ghc downloads page either. or rather, there's a quick link that goes nowhere (link target not found)
18:48:57 <geekosaur> anchor, rather
18:49:47 <geekosaur> and no section for arm builds on either 8.6.2 or 8.6.3 pages
18:50:12 <dsal> 8.6.2 is in the yaml file.  I was able to download as listed in the yaml and run it independently, but stack doesn't seem to care for it.
18:51:06 <dsal> 12.26 also doesn't work.  I think it's not getting the right platform name or something.
19:15:59 * hackage phoityne-vscode 0.0.28.0 - Haskell Debug Adapter for Visual Studio Code.  https://hackage.haskell.org/package/phoityne-vscode-0.0.28.0 (phoityne_hs)
19:50:32 <dsal> Building the correct ghc versions would be a lot less stupid way to spend my time here.
19:51:11 <slack1256> Is there a one-liner analogous to "python3 -m 'http.server'"?
19:51:41 <slack1256> That launches a http server, helpful to pass files between machines on the local network.
19:52:31 <glguy> > ""
19:52:33 <lambdabot>  <hint>:1:2: error:
19:52:33 <lambdabot>      lexical error in string/character literal at character '\ESC'
19:52:44 <dsal> I end up just using the python one.
20:27:29 * hackage hledger-lib 1.13.1 - Core data types, parsers and functionality for the hledger accounting tools  https://hackage.haskell.org/package/hledger-lib-1.13.1 (SimonMichael)
20:28:29 * hackage hledger 1.13.1 - Command-line interface for the hledger accounting tool  https://hackage.haskell.org/package/hledger-1.13.1 (SimonMichael)
21:15:58 <iqubic> So lets say I have some functions that generate X and Y values. Now suppose I want to plot those points and see the results. What haskell library should I use?
21:19:29 * hackage cabal-bundle-clib 0.1.0 - Bundling C/C++ projects in Cabal package made easy  https://hackage.haskell.org/package/cabal-bundle-clib-0.1.0 (zelinf)
21:35:44 <slack1256> iqubic: I use the gnuplot package, the Simple module on that package.
21:36:26 <slack1256> https://hackage.haskell.org/package/gnuplot-0.5.5.3/docs/Graphics-Gnuplot-Simple.html See the plotList function.
21:39:35 <dsal> Does anyone have an aarm64 linux builder handy that can build something with lts-13.5?  I'm putting one together, but it's going to take a while.
21:47:24 <iqubic> slack1256: thanks
21:52:08 <MarcelineVQ> how can I find the \foo character for Enter or Esc ?
21:53:38 <MarcelineVQ> ah got it
21:56:41 <slack1256> $ man ascii ?
22:01:36 <geekosaur> Enter has a complication on POSIX, if the terminal is in raw mode then it's \r, otherwise it's \n
22:02:42 <geekosaur> (actually -icrnl, but programs often still talk about the BSD modes line, character, raw)
22:05:08 <MarcelineVQ> thank yous
22:44:59 * hackage cairo-core 1.16.4 - Cairo Haskell binding (core functions)  https://hackage.haskell.org/package/cairo-core-1.16.4 (magicloud)
22:58:00 * hackage fpe 0.1.0 - Format-preserving encryption.  https://hackage.haskell.org/package/fpe-0.1.0 (galen)
23:03:51 <utdemir> When using pipes, is there a way to create a Consumer which fans-out the input to another set of consumers based on the input, e.g `f :: [Consumer a m ()] -> Consumer (Int, a) m ()` which yields `a` to nth consumer in the list?
23:04:30 * hackage fpe 0.1.1 - Format-preserving encryption.  https://hackage.haskell.org/package/fpe-0.1.1 (galen)
23:15:45 <utdemir> I feel like it's doable by creating a binary-tree like structure which looks like `P.tee (P.filter (<= N) >-> ...) >-> P.filter (> N) >-> ...` or something like that.
23:18:09 <cocreature> utdemir: ime the easiest solution for non-linear pipelines is pipes-concurrency
23:18:51 <utdemir> cocreature: I thought about that, but it feels a bit like cheating for some reason. I actually don't need concurrency.
23:26:49 <cocreature> utdemir: iirc that’s what I’ve seen Gabriel recommend as well so I don’t feel too bad about it :)
23:28:23 <utdemir> Oh, that's great than. Thanks, I'll. And, since you're here, can I ask you something else? Do you know if there's a solution to this on `conduits` or `streaming`?
23:30:54 <cocreature> streaming has streaming-concurrency which lets you pull the same trick
23:31:18 <utdemir> Great, thank you cocreature .
23:31:24 <cocreature> I’m not sure if there is an easier solution for conduit but you can certainly pull the same tricks that pipes/streaming-concurrency uses
23:35:00 * hackage libtelnet 0.1.0.0 - Bindings to libtelnet  https://hackage.haskell.org/package/libtelnet-0.1.0.0 (jack)
23:46:26 <q6AA4FD> i'm writing a program using brick, and it requires the drawing function have a type of 'a -> [Widget b]'. however, my function for state, which is the 'a' in that signature is in the IO monad. is there any way to get around this, for lack of a better term?
23:56:01 <Athas> q6AA4FD: brick does not care where you get the 'a' from.
23:56:31 <Athas> q6AA4FD: this is the appDraw function, right?
23:58:49 <q6AA4FD> yes, it is the appDraw function. i'm a bit unclear on this, but it seems like any function that performs IO will have '-> IO _' at the end of its type signature, right?
