01:34:30 <anrock> Hi guys. Quick question: given a typeclass `Binary a where encode :: a -> Word16; decode :: Word16 -> a` is it possible somehow derive `decode` from `encode`?
01:36:43 <anrock> I guess it should be something like "given `word` generate all values of a via (encode word) and find a corresponding to given word" but i don't know how to express this in haskell.
01:37:10 <clever> anrock: in the case of cbor, that can be difficult, because you have 2 different ways to represent a list
01:37:43 <clever> anrock: a list can either be `<startoflist><itemn><item2><endoflist>` or it can be `<list-of-2><item1><item2>`
01:39:26 <anrock> clever: is it possible for a specific record at least?
01:39:55 <anrock> Specific instance for record, i mean.
01:40:06 <clever> anrock: not really sure
01:42:25 <clever> anrock: the only thing i can think of, is to create a custom monad, that is both encode and decode
01:42:36 <clever> anrock: and then you can convert that custom monad into both an encoder and a decoder
01:43:06 <clever> but the tricky part is writing logic in a bi-directional way, lenses can sometimes help with that, but i know some people try to avoid that
01:43:29 <anrock> Sounds difficult...
01:44:27 <clever> you would need to pass the monad 2 functions, `a -> b -> c -> X` which constructs your record, and something that can somehow be used to pattern match, not sure how that could be passed by reference
01:44:43 <clever> as much as i dislike TH, this would easily be handled by TH, lol
01:44:46 <Unhammer> Why would a regular build require more memory than a --profile build?
01:45:03 <clever> anrock: https://wiki.haskell.org/A_practical_Template_Haskell_Tutorial
01:45:13 <anrock> clever: if my `encode` is total and is a simple mapping, i guess i can just create a predefined Map and implement encode and decode by searching Map k -> v or v -> k.
01:47:04 <Unhammer> I've been wanting to upgrade from 7.10 (yes I know) to 8.6, but the non-profile builds go from 37M to 140M maxres (according to +RTS -sstderr; /usr/bin/time says we go from 131M with 7.10 to 443M with 8.6, or 315M with compacting)
01:47:59 <Unhammer> while the --profile builds are all at around 70M according to RTS (and here are actually the lowest in 8.6 with compacting, 183M, vs 248M in 8.6/7.10 without -c)
01:48:41 <Unhammer> Is GHC 8.6 just noticing that my system has way more memory than that and pre-allocating? (Why then can't I lower it past -M170m?)
02:07:42 <Unhammer> Ugh and I get heap exhausted without specifying -M on data that used to go through fine, while the -hc reports from profile runs look identical. 
02:09:17 <Unhammer> If RTS says 140M maximum residency, that means 140M was used in the Haskell heap, right? It can't be leaks in some C FFI thing? 
03:22:58 <im0nde> Hi, I'm looking for a book to learn haskell. I saw https://wiki.haskell.org/Books but can't make up my mind. About me: I'd say im a decent programmer (in other languages) learning haskell on my own. Looking for something that I can read through from front to back and has exercises for each chapter to check if I learned what was in it. I'd like something that goes further than "just learning the syntax"
03:28:27 <srk> I would suggest Learn You a Haskell for Great Good! and Real World Haskell
03:29:19 <srk> RWH is not quite front to back but you can always get back to some stuff
03:32:24 <maerwald> LYAH is not very good for beginners, unless you had a bottle of wine already (because it's so verbose)
03:32:43 <maerwald> @where cis194
03:32:43 <lambdabot> https://www.seas.upenn.edu/~cis194/spring13/lectures.html
03:32:52 <maerwald> this is usually recommended as a free introduction
03:33:36 <maerwald> about non-free materials I have no idea
03:35:08 <im0nde> maerwald: That looks like good excercises. I suppose the "submit solutions" is not avaitible to non-students of that univesity?
03:35:18 <maerwald> Probably not :D
03:35:33 <maerwald> The course is over since a few years
03:35:35 <sternmull> im0nde: https://en.wikibooks.org/wiki/Haskell
03:40:11 <Rembane> im0nde: If you have a solution and want somebody to look at it you can put it in a gist and come here. :)
03:49:22 <delYsid> Ahem, shadowing a binding made with <- with a later let in GHCi breaks things, is this known behaviour?
03:50:16 <cacasotto> ciao
03:50:25 <delYsid> Just e <- someIOActionReturningMaybe; let Right e = somePureFunctionReturningEither e; length (someField e); -- hangs
03:50:57 <cacasotto> openjokeopenjokeopenjokeopenjokeopenjokeopenjokev
03:51:55 <delYsid> This looks like a bug.
04:11:56 <__monty__> delYsid: Do you mean inside a do-block?
04:12:08 <__monty__> Or are you using pattern guards or something?
04:12:53 <delYsid> __monty__: I mean in GHCi.
04:13:37 <__monty__> a <- 0 errors for me in GHCi.
04:13:55 <__monty__> So, implicit do-block.
04:14:05 <int-e> delYsid: let Right e = somePureFunctionReturningEither e  is recursive
04:14:33 <delYsid> oh, I think I get it.  This is a recursive reference.
04:15:05 <delYsid> Just a <- pure $ Just []; let Right a = Right a; a; -- boom
04:15:51 <delYsid> I guess I need to use an IORef or something.
04:16:15 <delYsid> > Just a <- pure $ Just []; let Right a = Right a; a
04:16:17 <lambdabot>  <hint>:1:25: error: parse error on input ‘;’
04:16:17 <int-e> delYsid: you can just give it a new name instead?
04:16:23 <maerwald> sternmull: those wiki pages lack consistency imo
04:16:29 <maerwald> The arrow article is... odd
04:16:37 <int-e> delYsid: or use the ugly  e <- pure (somePureFunctionReturningEither e)
04:18:00 <delYsid> int-e: Yeah, but since I need to do several calls like this, adding '''''' gets pretty old after a while.
04:18:23 <int-e> delYsid: you can alternate between e and e', for example.
04:18:24 <delYsid> I just forgot that haskell is lazy, stupid.
04:18:31 <sternmull> maerwald: I haven't read all of it. But i liked the parts that i read. With most books i have the problem that they are too verbose. The wikibook feels like a good compromise between terseness and verbosity.
04:18:58 <int-e> delYsid: anyway, there are lots of ways to escape this situation now that it's clear what went wrong :)
04:21:40 <delYsid> int-e: Yeah.  I guess I still need an IORef because I basically have a handle with state, and a bunch of functions to talk to the outside world via that handle.  Whenever I update the state, I somehow have to return the handle with new state.  I gues thats what IORef is for.
04:22:26 <clever> delYsid: ive recently learned how to use STM, and that makes it easy to do atomic state updates
05:11:37 * hackage morley-prelude 0.1.0.3 - A custom prelude used in Morley  https://hackage.haskell.org/package/morley-prelude-0.1.0.3 (gromak)
05:27:07 * hackage incremental-parser 0.3.2.2 - Generic parser library capable of providing partial results from partial input.  https://hackage.haskell.org/package/incremental-parser-0.3.2.2 (MarioBlazevic)
05:40:37 * hackage morley 0.1.0.3 - Developer tools for the Michelson Language  https://hackage.haskell.org/package/morley-0.1.0.3 (gromak)
05:52:21 <HenryCH> hi everyone, beginner question: i am reading some stuff on the reader monad, and i don't understand the benefits of it versus just partial application?
05:55:50 <hpc> the benefit is writing "Reader r a" instead of "r -> a" in your type signatures
05:55:59 <hpc> otherwise they're exactly the same
05:56:07 <hpc> @unmtl Reader r a
05:56:07 <lambdabot> r -> a
05:58:06 <HenryCH> why is that a benefit?
05:58:19 <Cale> You almost never really just use plain Reader, but ReaderT is something that can be done to an arbitrary monad, to get a monad in which you have access to a bit of extra environment
05:59:14 <Cale> It's still very similar to parameter passing, but you're probably going to build some new abstractions/operations on top of that, so that people don't know that your thing uses ReaderT
06:09:41 <dibblego> HenryCH: have you ever had a value, such as "the configuration" and passed it all the way down your function call tree, where it is eventually used?
06:15:20 <HenryCH> dibblego: i see what you're saying, but do i not have the same problem if i use reader? all the stuff that doesnt need the configuration still needs to be reader so the function that finally needs it can ask?
06:15:58 <dibblego> well, you can get the same compositional properties, without the tedium of explicitly passing that value
06:17:35 <HenryCH> i see
06:20:16 <Cale> HenryCH: You have a good point, and a good instinct there. Reader/ReaderT on its own doesn't usually justify its existence. It's as a component of something more involved that it becomes handy to have around.
06:22:11 <Cale> You save yourself a bunch of parameter passing, but then pay for a bunch of bureaucracy involving Reader. If it's ReaderT over IO for example, you'll end up having to liftIO all your IO actions. So if this is the only monad transformer you're using, you'd often rather do without it.
06:22:36 <Cale> But if there are some other monad transformers already in play, then adding the ReaderT doesn't cost anything syntactically.
06:23:26 <HenryCH> Cale: i think i understood 50% of that, thanks though :)
06:23:48 <Cale> Yeah, it's a bit hard to explain without elaborate examples
06:28:05 <ph88> i only used stack so far, how can i use cabal?  i thought i could launch it with   stack exec -- cabal   but it's not found
06:31:14 <Cale> ph88: hmm, I suppose you could just install cabal-install directly, or you could get the whole Haskell Platform. I've been using nix to get all Haskell-related stuff for long enough that I'm not sure what would be best to recommend.
06:31:44 <MarcelineVQ> you generally don't invoke cabal from stack but you can. cabal needs to be on your path, or the path of the project you're stack exec'ing from. so you need to get cabal first, either stack build cabal-install in a project, or stack install cabal-install outside of one. and have the install location it tells you on your path
06:32:50 <ph88> ah great thanks
06:32:53 <MarcelineVQ> further you'll possibly need to say something like "stack exec --no-ghc-package-path -- cabal" but I'm not sure, it's an option if you have trouble
06:33:28 <ph88> i didn't want to necessarily launch cabal from stack. I just thought stack would have already made it available somehow somewhere
06:35:34 <MarcelineVQ> stack can use cabal to solve dependencies (or did at one point), specifically for "stack solver" but it doesn't install cabal for you
06:37:00 <Cale> Stack also uses Cabal (the library) fairly extensively
06:38:38 <ph88> when i build with   cabal build-new  i see    Build profile: -w ghc-8.2.2 -O1     how can i make cabal use the same version of ghc compiler and packages as stack is using ?
06:38:39 <MarcelineVQ> ye, a little unfortunate that Cabal the lib, cabal-install the package, and cabal the executable are so related when trying to discuss any of the 3
06:42:21 <MarcelineVQ> assuming your cabal file has set versions that correspond to the snapshot you're using you can probably -w to a ghc that stack has, you can find them in ~/.stack/programs, or just run cabal via stack if you want to use stack's things
06:43:03 <MarcelineVQ> *your project's .cabal file
06:43:16 <MarcelineVQ> I've done neither so you're now the explorer
06:49:08 <ph88> how can i get an "package environment file" from either stack or cabal ? i inspected their build artifacts but i can't find that file in neither
06:55:02 <ph88> found it for cabal :)
06:58:12 <ph88> ok i found the flag  --write-ghc-environment-files=always  but where is the actual package environment file ?
06:58:20 <ph88> perhaps it's cache/plan.json ?
07:13:57 <cacasotto> ciao
07:29:07 * hackage rebase 1.3.1 - A more progressive alternative to the "base" package  https://hackage.haskell.org/package/rebase-1.3.1 (NikitaVolkov)
07:40:07 * hackage rerebase 1.3.1 - Reexports from "base" with a bunch of other standard libraries  https://hackage.haskell.org/package/rerebase-1.3.1 (NikitaVolkov)
07:42:43 <ph88> found out about that package environment file :)
07:43:11 <ph88> i remember there being a package which auto tunes the GC settings, i don't remember the name and i have a bit of trouble of finding it with google. Anyone knows about it ?
07:43:42 <ph88> eh found that as well ... hackage search is pretty good :P
08:16:28 <ph88> what if a package is unmaintained and the repo is dead. Can somebody take over the package ?
08:18:27 <__monty__> ph88: Afaik, yes. Just contact a hackage curator or trustee maybe?
08:18:34 <__monty__> Find out in #hackage probably.
08:21:13 <c_wraith> yeah, there's a whole process involving public announcement of intent and a waiting period
08:49:07 * hackage TaskMonad 1.0.1 - A collection of tools which can be used to access taskwarrior from xmonad.  https://hackage.haskell.org/package/TaskMonad-1.0.1 (mmagorsc)
09:02:18 <cocreature> ph88: https://wiki.haskell.org/Taking_over_a_package
09:11:37 * hackage stratosphere 0.36.0 - EDSL for AWS CloudFormation  https://hackage.haskell.org/package/stratosphere-0.36.0 (jdreaver)
09:28:56 <TimoMeijer> I'm experimenting with extensible records(I'm using the row-types library) in my project, but I'm running into an issue when I want to modify something in the record in a specific way, which returns very scary errors about overlapping instances and non-deducible types. If anyone could help me figure out what I'm doing wrong, that'd be great! Code: https://gist.github.com/TimoMeijer/1620b47a4ec87b1c7dc8405ba0f1cff9
09:28:57 <TimoMeijer> What I'd like to express is a function that gets a record containing a specific label-type pair, and may modify that type. But when I try to use that function, the scary errors pop up
09:32:44 <TimoMeijer> The main part of the error message after enabling IncoherentInstances is `(((r .- "x") .+ 'Data.Row.Internal.R '[ "x" 'Data.Row.Internal.:-> [Double]]) .! "x") ~ [Double]`, which seems weird to me, as it says right there that the record contains `"x" :-> [Double]`
09:37:57 <Cale> TimoMeijer: Generally, IncoherentInstances is never the way forward
09:38:44 <TimoMeijer> Cale: That's what I imagined, and it doesn't even solve the issue in this case ;P
09:38:45 <Cale> (I shouldn't say *never*, but practically speaking, I've never run into a case where it actually helped.)
09:39:29 <Cale> I'm not terribly familiar with this particular extensible record library
09:39:52 <Cale> A lot of people seem to like vinyl for that, have you considered it as well?
09:40:16 <Cale> Also, I've been doing a whole lot of extensible-record-like stuff with DMap lately, and I can highly recommend that.
09:40:30 <TimoMeijer> I suspect it doesn't have to do with the specific library, but more with my lack of understanding of the more complex concepts
09:41:22 <TimoMeijer> I started out with Vinyl, but actually helpful documentation was non-existent if you don't already know what you're doing. This library was much more accessible, and worked well for my simpler experiments
09:41:40 <Cale> Ah, okay
09:51:52 <monochrom> "never say 'never' again"
09:53:22 <Cale> haha
09:57:02 <Cale> oh!
09:57:36 <Cale> Er, never mind, for a moment I thought I knew what was happening
09:59:58 <DigitalKiwi> bond
10:25:57 <srid> I'm using GADTs in the UpdateEvent of `acid-state`. After having derived all the necessary instances, I'm hitting one final thorny type error (GHC cannot unify the type variable 'r' for some reason; it created 'r0' ...)
10:26:05 <srid> If anyone of is interested in doing a quick pair with me, here's my read-only screen share! https://tmp.srid.ca/p/9999//baftw44q/
10:31:22 <mr971[m]> srid: you have to add an FromJSON instance for your Edit datatype
10:32:22 <srid> mr971[m]: I'm using https://github.com/obsidiansystems/aeson-gadt-th which should have derived it for me (left a note in the code file where exactly)
10:32:44 <srid> the `deriveJSONGADT` TH thing
10:33:09 <srid> I think the culprit is the `r0` (shouldn't it be `r`?)
10:33:48 <mr971[m]> srid: try to add Typeable method constraint to jsonMethodSerializer
10:35:07 <srid> mr971[m]: didn't help
10:35:12 <geekosaur> mr971[m], I think you're missing the point, which is that ghc didn't unify r0 with r and therefore has no idea what instances might apply, because r0 is unspecified
10:35:29 <geekosaur> usually this means there's some link missing somewhere so it can't determine that r0 was supposed to be r
10:35:53 <srid> hint: ctrl+- to reduce the font size (and increase working area of tmux)
10:36:38 <srid> geekosaur: Ya. FWIW the `IsAcidic` class is defined here https://github.com/acid-state/acid-state/blob/master/src/Data/Acid/Common.hs
10:37:10 <geekosaur> but I don't generally work with this stuff so I don't know what's going wrong or why
10:37:52 <srid> GADTs start out to be fun and precisely suitable for an use-case, and then you hit roadblocks like this lol
10:38:19 <mr971[m]> srid maybe doEdit also have to have an instance of FromJSON?
10:39:23 <srid> okay I added `FromJSON r` etc on doEdit, and the error looks slightly different now
10:39:44 <srid> backend/src/Backend/Operation.hs:135:19-24: error:
10:39:44 <srid>     • Ambiguous type variable ‘r0’ arising from a use of
10:39:44 <srid> ‘doEdit’
10:39:44 <srid>       prevents the constraint ‘(FromJSON r0)’ from being
10:39:44 <srid> solved.
10:39:44 <srid>       Probable fix: use a type annotation to specify what
10:39:44 <srid> ‘r0’ should be.
10:39:57 <srid> oops, sorry for the flood
10:40:59 <srid> compiler tells me to "specify what ‘r0’ should be." but exactly do I do this in an instance definition function?
10:41:43 <[exa]> usually it's not straightforward but there are associated types that can be used to solve ambiguities
10:43:48 <mr971[m]> srid: can you show the implementation of IsAcidic class?
10:44:10 <mr971[m]> sry, missed a link posted above
10:44:37 * hackage broadcast-chan 0.2.0.2 - Closable, fair, single-wakeup channel type that avoids 0reader space leaks.  https://hackage.haskell.org/package/broadcast-chan-0.2.0.2 (MerijnVerstraaten)
10:45:37 * hackage broadcast-chan-tests 0.2.0.2, broadcast-chan-pipes 0.2.0.2, broadcast-chan-conduit 0.2.0.2 (MerijnVerstraaten): https://qbin.io/turn-ri-93h2
10:52:10 <mr971[m]> srid: UpdateEvent returns `Event (EventState ev)`
10:52:17 <mr971[m]> after two arguments applied (as in your code)
10:53:09 <srid> mr971[m]: yea, `EventState ev = MethodState ev` which is `JunctureGraph` (see line 136)
10:53:16 <mr971[m]> oh, you just added arguments and moved application of them above
10:53:33 <srid> yes just trying to explicitly add types and see if that helps
10:53:35 <Cale> What's the type of doEdit there?
10:53:46 <Cale> I see
10:53:50 <srid> cool
10:54:14 <Cale> Are those constraints on r actually needed?
10:54:24 <Cale> in the type of doEdit?
10:54:45 <Cale> Okay
10:54:51 <srid> removed them
10:55:07 <Cale> Let's look at updateEvent
10:55:18 <Cale> It seems to require Typeable r
10:55:23 <Cale> But what is r?
10:55:42 <Cale> and why does it require Typeable r?
10:56:03 <Cale> Try removing that constraint as well, if you're not actually using Typeable
10:56:05 <srid> r can be either `()` or `Id` (representing the corresponding 'return value' of an action)
10:56:13 <Cale> ah, okay
10:56:28 <Cale> So what you really need is Has Typeable Edit ;)
10:56:29 <srid> the acid-state instances required me to add Typeable (line 134+)
10:56:55 <Cale> Let's remove the constraint on updateEvent
10:56:58 <Cale> and see what we get
10:57:23 <Cale> okay
10:57:27 <Cale> So, now...
10:57:42 <Cale> er, can you move your cursor?
10:58:14 <Cale> So, if we get a value of type Edit, say e :: Edit r
10:58:23 <srid> (let me know if you want another gotty session with write perms)
10:58:29 <Cale> we can write  has @Typeable e
10:58:44 <srid> what is 'has'?
10:58:50 <Cale> That's from constraints-extras
10:58:52 <mr971[m]> `r` in `Edit r` have to have an instance of `Typeable` i guess
10:58:59 <Cale> deriveArgDict gets us that
11:00:24 <srid> i see `Has'` in the example https://github.com/obsidiansystems/constraints-extras#example-usage
11:00:37 <Cale> yeah
11:00:52 <Cale> Has c f
11:01:00 <Cale> means that given a value x :: f a
11:01:06 <srid> oh damn haha https://github.com/obsidiansystems/constraints-extras/blob/develop/src/Data/Constraint/Extras.hs#L47-L52
11:01:08 <Cale> we can show that there's an instance c a
11:01:27 <Cale> So pick c = Typeable
11:01:28 <srid> ah i see
11:01:30 <Cale> and f = Edit
11:01:39 <Cale> Then given a value e :: Edit a
11:02:01 <Cale> we'll be able to show that Typeable a
11:02:18 <srid> going from the higher-kinded to the simple-kinded
11:02:19 <Cale> (supposing that we have Typeable Id and Typeable (), which we will)
11:03:01 <srid> Cale: is the goal here to derive Typeable for (Edit r) in the same manner aeson-gadt-th derives json instances?
11:03:03 <Cale> So the question is, do we have one?
11:03:18 <Cale> Well, we want to use the instance of Typeable r which we know we'll be able to obtain
11:03:29 <srid> I only assumed that Typeable for those primitive types existed (Id is just Int)
11:03:36 <mr971[m]> do: `:i Id` in repl and see
11:03:38 <Cale> We know that Typeable Id and Typeable () both exist
11:03:42 <Cale> We just don't know which one we need
11:03:54 <srid> right
11:03:55 <Cale> But if we know which Edit we're trying to make, then we'll know
11:04:09 <Cale> and 'has' lets us make that choice
11:04:50 <Cale> Also, we can obtain the appropriate FromJSON instance that way
11:05:13 <srid> oh i see
11:05:21 <Cale> Ah, the constraint on jsonMethodSerialiserForEdit...
11:05:36 <srid> that function is specialized version of the one above which is what i should use
11:06:05 <Cale> FromJSON (Edit r) is an unlikely one
11:06:16 <Cale> However, FromJSON (Some Edit) is more likely
11:06:35 <Cale> When you deserialise, you're not going to know at first which type of Edit you have
11:06:45 <srid> i just remove that function (it had no effect)
11:07:04 <Cale> right, because you won't have FromJSON (Edit r)
11:07:25 <Cale> The deriveJSONGADT thing won't give you that
11:07:32 <srid> I SEE
11:07:39 <Cale> It gives you FromJSON (Some Edit)
11:08:12 <Cale> It could give you any of the constructors of Edit, so you won't know which type of Edit you have until you inspect it further
11:08:35 <Cale> That's from Data.Some
11:09:30 <Cale> Do we want this to be a MethodSerialiser (Some Edit) as well?
11:09:45 <Cale> I forget if I included a ToJSON instance for Some...
11:09:50 <Cale> I hope I did
11:10:15 <Cale> I'd intended to anyway ;)
11:11:05 <srid> here's the `Serialiser' def https://github.com/acid-state/acid-state/blob/master/src/Data/Acid/Core.hs#L95-L115
11:11:24 <Cale> Right, so we can probably do that for Some Edit
11:12:12 <Cale> r is no longer mentioned
11:12:17 <Cale> so it doesn't need constraints
11:12:25 <srid> i think methodserialiser has to use 'Edit r'
11:12:29 <Cale> hmm
11:12:37 <Cale> Maybe, I don't know how this gets used
11:13:07 <Cale> Is there a reason we need to do it in a type-specific way?
11:13:23 <srid> what do you mean?
11:13:40 <Cale> I mean, isn't the goal to encode a bunch of edits?
11:13:58 <srid> right; but in a manner that works with the acid-state's interface.
11:13:59 <Cale> and then when we decode them all, they might have differing types, right?
11:14:25 <srid> MethodSerialiser is used here: https://github.com/acid-state/acid-state/blob/master/src/Data/Acid/Common.hs#L64
11:14:53 <Cale> What's your EventState type look like?
11:15:17 <Cale> Or MethodState
11:15:31 <Cale> ah, hmm
11:15:31 <srid> `type EventState ev = MethodState ev` so it is JunctureGraph
11:15:58 <srid> MethodResult says the type of the 'return value' of an action (edit, in this case)
11:16:19 <Cale> Oh, it's always JunctureGraph, so that one is at least independent of r, hmm...
11:16:25 <srid> some actions (eg: AddVertex) return the vertex id. some don't (hence ())
11:16:35 <srid> yup
11:17:01 <Cale> But the result isn't which will mess things up...
11:17:08 <srid> (JunctureGraph uses Dmap underneath, withits own json instances)
11:17:22 <Cale> We won't know what type of result we're getting until we actually pattern match on the Edit.
11:17:27 <srid> state and actions are handled separately I believe.
11:17:37 <srid> right
11:17:48 <Cale> I was looking at this: UpdateEvent :: UpdateEvent ev => (ev -> Update (EventState ev) (EventResult ev)) -> MethodSerialiser ev -> Event (EventState ev)
11:18:05 <Cale> It's not okay for ev to be (Some Edit)
11:18:16 <srid> but why does the line 149 type declaration not lead to unification of 'r'?
11:18:19 <Cale> because we won't be able to recover what we want EventResult ev to be
11:19:26 <Cale> Actually, let's just comment out that serialiser that's giving the error for the moment and try to work this instance out directly.
11:19:56 <srid> (reverting the Some change right?)
11:20:13 <Cale> I guess, though we won't be able to use that jsonMethodSerialiserForEdit
11:20:19 <Cale> it has unsatisfiable constraints
11:20:41 <Cale> okay...
11:22:08 <Cale> remove the Typeable constraint on r in updateEvent
11:22:17 <Cale> I want to discover exactly where we need it
11:23:12 <Cale> Okay, apparently we need it just for the UpdateEvent constructor alone somehow...
11:23:36 <srid> its used in line 133 as well
11:23:48 <srid> line 137 in fact
11:24:06 <srid> i added it to fix that error
11:24:15 <Cale> I see...
11:24:49 <srid> acid-state requires it, it seems
11:25:20 <Cale> Well, it would be possible to get instance UpdateEvent (Some Edit), but I'm not sure that actually helps
11:25:55 <Cale> At least, I think so...
11:26:09 <Cale> ah, right
11:26:10 <Cale> so...
11:26:40 <srid> `class Method ev => UpdateEvent ev` -- oh new syntax for me
11:27:09 <Cale> That's just a superclass constraint
11:27:41 <Cale> oh, well, we'd need to define a Method instance for (Some Edit), but then we don't know what we want MethodResult to be
11:27:50 <Cale> so that's annoying
11:28:11 <Cale> oh, hmm
11:28:24 <Cale> What if MethodResult (Some Edit) = DSum Edit Identity
11:28:44 <Cale> That'd work
11:28:57 <Cale> Let's try that
11:30:16 <Cale> btw, want to get into a hangout?
11:30:57 <srid> sure. :-) give me 2 mins; going upstairs
11:35:37 * hackage language-c99 0.1.0.0 - An implementation of the C99 AST that strictly follows thestandard.  https://hackage.haskell.org/package/language-c99-0.1.0.0 (frankdedden)
11:36:37 * hackage language-c99-util 0.1.0.0, language-c99-simple 0.1.0.0 (frankdedden): https://qbin.io/wayne-cl-0nbg
12:00:04 <absence> if i have a record "A" with getter typeclasses like HasThis and HasThat, is it possible to avoid writing a lot of boilerplate instances for a record "B" that has a field of type "A"? i can't imagine it working in general with deriving, so it's a bit of a long shot...
12:00:59 <glguy> absence: Yes, you make your class with a method: hasA and then default all of the field accessing methods in terms of that hasA
12:01:35 <glguy> This is how the classy lenses generated by lens package work
12:19:04 <akr> any idea why I get warnings from '-Wname-shadowing', even though I have '-Wno-name-shadowing' in Ghc-Options in my .cabal?
12:21:12 <glguy> akr: Perhaps you added it to one target and not another? Like only on the library and not the executable?
12:22:27 <cocreature> or you are overwriting it somehow, e.g. by a pragma in the file
12:23:38 <glguy> Or... you're loading it with a manual ghci invocation instead of using cabal
12:24:32 <akr> glguy: hmm well it's called through `stack build`
12:24:41 <cocreature> note that if you have both -Wall and -Wno-name-shadowing in ghc-options the order matters
12:25:30 <akr> I have: Ghc-Options: -threaded -O1 -Wall -Wno-type-defaults -Wno-unused-do-bind -Wno-missing-signatures -Wno-unused-binds -Wno-unused-matches -Wno-name-shadowing -freduction-depth=30
12:25:40 <akr> the other warning disables take effect
12:26:03 <akr> I only have one target
12:26:29 <cocreature> is your project public?
12:26:37 <akr> nah, sorry
12:28:03 <cocreature> a stack build should certainly respect that and the order looks fine so assuming you really only have one target my guess would be a GHC_OPTIONS pragma
12:28:20 * akr checks
12:29:25 <cocreature> s/GHC_OPTIONS/OPTIONS_GHC/
12:29:29 <akr> ok so previously someone put the pragmas to disable this warning in files
12:29:53 <akr> so I have '{-# OPTIONS -fno-warn-name-shadowing #-}' in a bunch of files
12:30:33 <akr> oh, I think I got it
12:30:46 <akr> there's also {-# OPTIONS -Wall #-} in a bunch of files
12:31:01 <akr> probably the ones I'm getting the warnings from
12:31:05 <akr> cocreature: thanks!
12:32:34 <cocreature> right those will end up after the ones from your cabal file
12:32:45 <cocreature> so the -Wall overwrites -Wno-name-shadowing from your cabal file
12:32:56 <akr> yup, that's what I figured
12:46:47 <WilliamHamilton[> hi, I have a question on the barebone frp system in http://hackage.haskell.org/package/threepenny-gui-0.8.3.0/docs/Reactive-Threepenny.html . Is there a way to write a function similar to `accumB`, but with an event of monadic functions, instead, like Event (a -> IO a), so that one could for example use some random generation in the update
12:59:55 <adarqui> anyone here use yesod/haskell-persistent? trying to specify both the column name and a default value in the config/models definitions, ie acceptTOS       UTCTime Maybe sql=accept_tos default=now(), but it's breaking somehow by putting a comma at the end (i think): ALTER TABLE "users" ALTER COLUMN "accept_tos" SET DEFAULT now(),
13:01:25 <adarqui> (i can just take the default out and do it elsewhere, but wondering why i cant get it to work)
13:08:13 <heebo> hello, does anyone know what this aeson error means : Left "Error in $: expected (a, b), encountered Object"
13:10:50 <dminuoso> heebo: $: is a top level error, and the rest should be self explanatory.
13:14:36 <dminuoso> heebo: Do you have a more concrete example perhaps?
13:18:20 <heebo> sure on second im trying to do a decode using a derived FromJSON instance
13:18:39 <heebo> ill create a gist
13:22:36 <lyxia> The error does kind of suck because the expected thing and the encountered thing are not in the same category. (I have a pending PR to fix that)
13:22:57 <lyxia> At some point you're trying to deserialize a pair, which should be encoded as an Array of length 2
13:23:02 <lyxia> but you have an Object.
13:25:44 <heebo> ive created a snippet here: https://gitlab.com/snippets/1840555
13:26:22 <heebo> i dont think it actually compiles it just to give a flavour of what im doing
13:33:37 * hackage tttool 1.8.1 - Working with files for the Tiptoi® pen  https://hackage.haskell.org/package/tttool-1.8.1 (JoachimBreitner)
13:43:32 <heebo> thanks lyxia
14:10:47 <Tuplanolla> What's currently the best choice for basic computations with sparse matrices?
14:12:12 <absence> glguy: thanks, that's a nice trick! so it's only possibly to reduce boilerplate for the case when there are multiple functions per typeclass, but not when there's just one function per typeclass?
14:29:22 <Tuplanolla> There's at least `hmatrix` that should work, but it's a bit big.
14:29:43 <davean> carter: what is the best choice for computation with sparce matricies? :-p
14:39:28 <carter> Damn it Davean. Your right I  need to work on that
14:39:32 <carter> Davean focusss
14:39:36 <carter> :p
14:40:24 <carter> Tuplanolla: there’s some stuff that I was working on a few years ago I need to finish before people can understand it.  But atm not any good extensible ones :(
14:44:05 <Tuplanolla> What a shame.
14:58:31 <heebo> so sorry im getting : Left "Error in $: key \"tag\" not present" it seems like aeson requires my json to have a tag element in it so it knows how to encode bytestrings, is there an suggested route for this?
15:05:24 <heebo> ah i think i got it thanks , its for sum types
17:26:09 <ph88> when i have in core    Main.main2 `cast` <Co:3>   what's that <Co:3>  ?
17:32:06 <Tuplanolla> It appears `hmatrix` makes working with sparse matrices extremely unpleasant.
17:32:25 <ph88> how so ?
17:33:57 <Tuplanolla> You can't easily create them with set dimensions or convert them into dense matrices. The solvers have really strange interfaces too.
17:35:55 <Tuplanolla> I also don't trust any floating-point things that are not accompanied by numerical analysis books or papers.
17:36:57 <c_wraith> isn't hmatrix a wrapper around a native library?
17:38:39 <c_wraith> Ah, it's a wrapper around BLAS or LAPACK, depending on how it's compiled.
17:38:53 <c_wraith> So..  Look for numerical analysis of those libraries
17:38:54 <ph88> how do i get core from dependencies ? i only get the core file from my main
17:39:15 <Tuplanolla> Only partially, c_wraith. For example `Internal.CG` is written in Haskell.
17:41:14 <Tuplanolla> Still, wrappers should at least point to the official documentation.
18:01:37 * hackage cli-setup 0.2.0.7 - Helper setup scripts for packaging command-line tools.  https://hackage.haskell.org/package/cli-setup-0.2.0.7 (vmchale)
19:07:37 * hackage composition-prelude 2.0.3.0 - Higher-order function combinators  https://hackage.haskell.org/package/composition-prelude-2.0.3.0 (vmchale)
19:14:37 * hackage composition-prelude 2.0.4.0 - Higher-order function combinators  https://hackage.haskell.org/package/composition-prelude-2.0.4.0 (vmchale)
19:21:15 <coldpress> hey all, is there a way to cpulimit a haskell process? whenever I do, haskell becomes a background process
19:22:44 <slack1256> coldpress: you can cpulimit any process via multiple ways on linux
19:23:07 <slack1256> ulimit, cgroups CPUQuota (via systemd)
19:26:37 * hackage greskell-core 0.1.2.5 - Haskell binding for Gremlin graph query language - core data types and tools  https://hackage.haskell.org/package/greskell-core-0.1.2.5 (debugito)
19:29:10 * geekosaur wonders what coldpress has been doing for "cpu limiting"; that description sounds a bit confused about what does what
19:30:12 <coldpress> geekosaur: to limit the instantaneous %CPU of the process, but no limit on the total CPU time
19:30:40 <coldpress> normally done by `cpulimit -l 60 -p <pid`
19:33:52 <slack1256> you can do that on a haskell program also
19:34:59 <geekosaur> that thing is too clever for its own good, and probably conflicts with how the haskell runtime uses itimers or something
19:40:54 <coldpress> slack1256: with System.Posix.Resource?
19:49:19 <slack1256> coldpress: nop, write you program without care for that. When calling the program use either ulimit to set cpu limit on the environment and call your program
19:50:47 <slack1256> Another option if you have Cgroups with systemd and the cpu controller is to run `$ systemd-run --user --scope -p CPUQuota=60% ./my-awesome-haskell-program` as a more robust solution
21:07:24 <Squarism> anyone know what happend to webghc. Not much has happend to it since january
21:35:37 * hackage elsa 0.2.1.0 - A tiny language for understanding the lambda-calculus  https://hackage.haskell.org/package/elsa-0.2.1.0 (ranjitjhala)
21:39:07 * hackage elsa 0.2.1.1 - A tiny language for understanding the lambda-calculus  https://hackage.haskell.org/package/elsa-0.2.1.1 (ranjitjhala)
22:11:37 * hackage has 0.6.0.1 - Entity based records  https://hackage.haskell.org/package/has-0.6.0.1 (YusakuHashimoto)
22:35:14 <jusss> data Struct val = Empty | NonEmpty StrucType val;   data SturctType = Exec1 | Exec2;   apply::Struct a-> String;    apply (NonEmpty exec struct) ="exec1 or exec2"
22:35:30 <jusss> how I can use an expression to call it?
22:35:46 <jusss> apply NonEmpty ? ?   will get "exec1 or exec2"/
22:36:03 <jusss> apply NonEmpty Exec1 ?
22:43:50 <slack1256> jusss: Can you use a paste service for that code?
22:44:34 <slack1256> jusss: apply (NonEmpty Exec1 undefined) should work
22:44:43 <jusss> slack1256 https://paste.ubuntu.com/p/RS7FtkHfFG/
22:47:10 <slack1256> jusss: I don't understand what you want to do
22:47:50 <jusss> slack1256 just an example from stackoverflow help me understand Value Constructor
23:09:44 <dmwit> jusss: Here are two examples of calls: `apply Empty` or `apply (NonEmpty Exec1 ())`
23:10:51 <dmwit> Just for fun, here's a third that may look a bit weirder to initiates of other languages: `apply (NonEmpty Exec2 (\x -> 3 + x))`
23:10:56 <jusss> dmwit: the question is how to handle that undefined type variable when it is called
23:11:16 <jusss> https://paste.ubuntu.com/p/s84KjsTtjH/
23:12:16 <dmwit> The caller of `apply` may choose any specific type they like to substitute for `a`.
23:12:50 <jusss> dmwit: wait a second, but function don't have a type I think, 
23:12:56 <dmwit> In my three examples above, I left it unspecified (`Empty`), chose the unit type `()` (`NonEmpty Exec1 ()`), and chose a function type `Integer -> Integer` (`\x -> 3 + x`).
23:12:59 <jusss> dmwit: normal function has a type?
23:13:02 <dmwit> Certainly.
23:13:22 <dmwit> :t \x -> 3 + x
23:13:23 <lambdabot> Num a => a -> a
23:13:37 <dmwit> :t \name -> "Hello, " ++ name ++ "!"
23:13:38 <lambdabot> [Char] -> [Char]
23:13:59 <jusss> dmwit: so normal function can be used in pattern match?
23:14:16 <jusss> dmwit: value constructor is totally same with normal functions?
23:14:23 <dmwit> There are no interesting patterns which match functions.
23:14:50 <ggole> Variable patterns!
23:14:53 <dmwit> Yes, data constructors may be applied to functions.
23:15:12 <dmwit> ggole: Right. Variables and underscore. I consider these not interesting, because they can be used for *any* type.
23:15:26 <dmwit> There are no patterns which match functions but do not match every type.
23:16:20 <dmwit> (Hm. Maybe some view patterns, hey? Anyway that's an advanced topic for another time...)
23:16:50 <c_wraith> yeah, view patterns could, but that's a totally different thing, really
23:17:28 <ggole> Hmm, isn't there a pattern ascription extension?
23:17:55 <ggole> It might be better to think of functions not having any constructors with which to destructure function values, rather than talking about types.
23:21:21 <dmwit> You're right. I hereby steal that much better phrasing as my new definition of "interesting".
23:21:51 <jusss> this is really make me confused! so functions do have types? and they have types but can not be used in patter match?
23:22:31 <jusss> value constructor and normal function are same thing or not?
23:22:56 <jusss> can I call value constructor as function?
23:22:57 <slack1256> jusss: yep in the sense that they have types, but they are not of the same "kind"
23:24:42 <jusss> (Num a => a -> a) is one function's type? right?
23:24:45 <slack1256> % :t Just
23:24:45 <yahb> slack1256: a -> Maybe a
23:25:09 <c_wraith> jusss: functions don't actually have constructors.  But that's not conceptually any different from any other type that has constructors, but keeps them hidden someplace you can't import.
23:25:23 <slack1256> Just is a value constructor for Maybe and also a function that returns a Maybe
23:28:37 * hackage password 0.1.0.0 - plain-text password and hashed password datatypes and functions  https://hackage.haskell.org/package/password-0.1.0.0 (cdepillabout)
23:29:37 * hackage password-instances 0.1.0.0 - typeclass instances for password package  https://hackage.haskell.org/package/password-instances-0.1.0.0 (cdepillabout)
23:29:57 <jusss> % :t Maybe
23:29:57 <yahb> jusss: ; <interactive>:1:1: error:; * Data constructor not in scope: Maybe; * Perhaps you meant one of these: `MT.MaybeT' (imported from Control.Monad.Trans.Maybe), variable `maybe' (imported from Prelude)
23:58:37 * hackage password-instances 0.2.0.0 - typeclass instances for password package  https://hackage.haskell.org/package/password-instances-0.2.0.0 (cdepillabout)
