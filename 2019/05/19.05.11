00:37:51 <EmilKarlson> ghc is kind of broken debian buster ppc64el, anyone know how to recompile it without depending on local ghc
00:42:58 <suzu> you could bootstrap and build it from scratch
00:43:01 <suzu> it'd only take you 99 years
00:43:05 <suzu> but its doable
01:26:30 --- topic: 'https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: https://gist.github.com/ | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org'
01:26:30 --- topic: set by glguy on [Sat Jan 05 07:21:52 2019]
01:26:30 --- names: list (clog byte[]1 Saukk UnChallengeD fphilipe_ carif Guest49044 Ariakenom Sk01 natrys tromp linarcx noam nowhereman Miroboru danvet segeljakt esp32_prog knupfer nshepperd tsaka__ oish reactormonk FreeBirdLjj m0rphism drbean valdyn cjenn DTZUZO rprije bgamari milesrout Maxdamantus forgottenone fmixing alyptik xff0x hamishmack fizbin noko_ jwynn6 zxrf noexcept alunduil c-rog ScriptRunner Lord_of_Life ion Cathy bydo khisanth_ _janne kaol restrictedchoice chindy)
01:26:30 --- names: list (vxe diskie Tspoon__ StoneToad_ vs^ fakenerd darjeeling_ forell dddddd Stanley00 toppler`` jrslepak johnw takuan SCHAPiE nekomune lambdabot cloudhead erikd RoguePointer_ simon__ corvidzz_ Tuplanolla1 acarrico1 Zemyla_ esph_ dmwit_ TommyC7 maxvaill1ncourt1 umbriel monochrom sdrodge_ jtcs_ dysfigured srnty_ lpsmith_ yitz mulk codedmart_ cybai delYsid`` verement YongJoon kuttifunk mantasg1 DrOkayClaws pigsalsa_ vlatkoB PatrickRobotham kapilp poljar1 triste)
01:26:30 --- names: list (Unhammer otto_s_ olligobber i1nfusion lagothrix theDon yahb tombusby MonkeyNOS ziyourenxiang revprez_stg bspar korzq son0p atraii dredozubov abhixec justanotheruser Kaivo alx741 Sose aarvar raduom coderpath wildlander govg nixy7 nek0 dale jgt oisdk staafl_ ericsagnes Jesin s00pcan srid9 `slikts Myhlamaeus thunderrd polman plutoniix MindlessDrone xplat Wilmpe cchalmers kini pie_ spion shutdown_-h_now Tritlo rodlogic jgornick wagle mort d0liver mimi_vx dTal)
01:26:30 --- names: list (Foritus FliiFe DavidEichmann catsup tomboy64 bbaren zariuq fnurglewitz tessier sukbeom9 thaumavorio andreas303 dhs227 dukedave daGrevis nilOps lukelau fr33domlover gxt gehmehgeh nitrix jrn roconnor mupf rembo10 gienah_ Putonlalla wonko7 jchia_ sw1nn n-st tito_04 MarcelineVQ piyush-k` Younder dmj` moldybits sppky mjacob sdx23 hpc jb55 cpape ricekrispie2 Sgeo__ NightA swalladge scott Folkol jud enragedjam revprez_atlanta violeta raoul interruptinuse veverak)
01:26:30 --- names: list (epta lassulus michalrus APic mnrmnaugh _ashbreeze_ gspia tomku zfnmxt gsingh93 Novitsh jonatan mniip soncodi giraffe pwestling sqrt2 xorpse Xal totte koz_ Athas cheater aramiscd avn ft oleks markus1189 gentauro icrainbow Anthaas dave_uy nicoulaj theophil8 haasn texasmynsted_ mickdekkers__ xacktm ixian sigmundv_ dan64 tdammers fryguybob jkachmar cppxor2arr Twey srk dmiles mp___ megaTherion jluttine Remy^ Stonebridge_ dogui bandali AWizzArd oberstein cyphase)
01:26:30 --- names: list (cybj xintron kav Nik05 survove [Leary] Niamkik tpsinnem Cale lyxia cgfbee dolio roflik divVerent nfd seanparsons revprez _ikke_ bind Frans-Willem hegge drewbarbs MatrixBot3 jlamothe cpup lockshaw revprez_1nzio bas080 zaquest freusque Profpatsch Ckat perrier-1 pong l8star Rudd0^ Jon leah2 mceier sicklorkin PierreM_ jynn iltiades1 wreckingwalla_ setre troydm amuck drewr spamlessj arianvp dcoutts_ nighty Firedancer Intensity atk devopsdeluxe dustinm devalot)
01:26:30 --- names: list (GGMethos Igloo matheus coeus andyo Wamanuz2 seveg unyu klntsky TheSpectre blue_feint phaul jan-sipr jonge opqdonut Tesseraction Wizek peschkaj graingert kristjansson J_Arcane glowcoil rdivyanshu_ bdw fcse__ devurandom jbetz duncan^ xcthulhu mingc scinawa Phyx- phreedom obfusk catern Orbstheorem cow-orker nano- Cthalupa thi alexelcu Rembane verite- ecx86 moony Peter_Storm_ bananagram a3f Adluc phlym meck jmsx ullbeking stylewarning ocharles abbe azahi)
01:26:30 --- names: list (intelux hexo bertschneider Hotbees cocreature bjobjo benl23 _Tristan_ nh2 Peppep flogfr Enigmagic feuerbach ab9rf phadej dredozub- hodapp teej higherorder nurupo remexre Lowl3v3l stux|RC nikivi joeyh vimto sis7 bollu SchleimKeim rann PoliticsII apoc pdgwien geronimogarcia celphi silverneedle flux pierrot aldum Psybur Blkt nesqi tv gabiruh eacameron runde nemesit|znc terrorjack_ rotaerk_ ProofTechnique SrPx Konehalt1 jchia1 lantti_ heyj AndreasK ranberry__)
01:26:30 --- names: list (ryzokuken hvr JimmyRcom acowley Neuromancer metalrain monad_cat ghuntley Jello_Raptor tinwood milessabin sebhoss typetetris kyagrd__ rslima_ m-renaud Kamuela dani- chin-tastic casdr trebuh mrd hc [exa] leothrix Zoddo gaze___ Nevoic Ranhir DomTorr_ juri_ infinisil PLPD-Bot kip bobby bcoppens arkeet marble_visions dibblego ArneB Myrl-saki mikolaj typedrat Philonous ClaudiusMaximus hjozwiak exarkun nahra int-e albel727 scal swater PHO AJTJ connrs_ pdxleif)
01:26:30 --- names: list (Jonno_FTW WarzoneCommand Tene Randy ByronJohnson TC` ljhms armyriad m4lvin dstolfa_ Nascha a3Dman TimWolla dionyziz DTZUZU amx jrm sphalerite grumble RusAlex DustyDingo lkurusa hive-mind bartavelle thallada dpn` Klumben cheers xtsee ManiacTwister cjwelborn SegFaultAX winny glowpelt jophish Bergle_2 underikar eruditass systemfault ebutleriv bradparker zabracks cemerick fingerzam nbouscal banjiewen Jabbslad mikolaj_ alp scivola Eliel lc_ glguy kjak miklcct)
01:26:30 --- names: list (cross uwap Axman6 Shockk yaroot2 eof urdh raoulb srhb dontdieych mankyKitty pasukon v0d1ch gluegadget bs338 alexknvl hsiktas amatecha paf31_ polux7 infty Fubar^ duckonomy wtw alanz Vq ziman bolverkr amiri raatiniemi monokrome vk3wtf_ Adeon iomonad Hijiri andjjj23 jdt tobiasBora irclogger_com dminuoso lemald kipras`away seliopou andromed1-galaxy Velpoman_ jix akr chivay sujeet saurik_ ent Logio centril1 some02 cgoldamm1r irdr_ michaelsdunn1_ davl)
01:26:30 --- names: list (vodkaInf1rno loc NemesisD dongcarl Deadhand wto tms__ teehemkay jackieh_ _ag_ ammar2 gonz_ edwtjo Wojciech_K blackdog statusfailed comboy CindyLinz rzmt aib rotty Ekho bod_ quaestor Nikotiini earthy bitemyap1 wayne_ jetpack_joe isacl___ billstclair nickoralias pent adamse tehidiot dsal JSharp iphy PotatoGim coot ajmcmiddlin sclv EduardoBautista tazjin georgew boj saidinwot Sparadox spoonm seventh__ Paks niko tumdedum apeyroux cods bjs Mike2_ cbarrett)
01:26:30 --- names: list (M2tias defanor_ case39 Akii telser Natch powerbit milli petercommand CelestialLake hiredman mtjmullen nckx cbmuser mcspud t36s gambpang clever jdevlieghere dumptruckman_ abuss- hexagoxel rootnode_ deni_ Ring0` ayako desnudop1nguino sud0 kark_ connrs- jsatk simony sebastianrkg madnight_ hongminhee thornAvery NextHendrix infinity0 datajerk_ ynyounuo geekosaur xpoqp Zialus jstolarek AfC acro shrifbot PtxDK henrik_ beka vanyaklimenko tsahyt Moyst Ulrar ski)
01:26:30 --- names: list (vqrs lortabac tristanC tstat pyrtsa mpickering gargawel strangeglyph treehaqr Mo0O jp Amadiro reyu xelxebar Unode lpvb deu ahri aidecoe tigerchops lachenmayer __name__ diginet evilmonads pigs nonzen suzu greeny__ qz Heffalump Squarism Saizan raek ephemeron Entroacceptor c_wraith micro lstdgtfp shapr nvt dilinger Ornedan luite PragCypher joel135 lexi-lambda iravid verlet64 Uniaika tjbp platz Reisen burp travv0 unsymbol charukiewicz wrengr_away Madars)
01:26:30 --- names: list (efskap_ dfordivam mccoyc aweinstock echoreply MasseR shreyasminocha Bish kubrat SquidDev ekleog rj1 Kiruwa i7c noctux yushyin arahael joehillen ctag_ tabaqui1 ahihi pacak quarters optmzr myme Majiir sea-gull exferenceBot noCheese DigitalKiwi Guest40074 moocow flebron Mon_Ouie canta petermw Arguggi bob_twinkles carter mitchellsalad_ newhoggy_ gothos Taneb beaky nshepperd_ lurkless fiQ2 bs mmaruseacph2 zymurgy eikke sms guios so TMA [df] arw_ cjh` orzo)
01:26:30 --- names: list (shachaf hiptobecubic_ twk- qzo_ cynick mjrosenb Aleksejs coldpress bengt__ carbolymer mauke_ averell ycheng mulderr mudri elvishjerricco Geekingfrog realloc Dabo nyaomi nibbling_ dexterlb vin-ivar kAworu habbah agrif exio4 h30 rkrishnan dequbed puffnfresh yumh adarqui betawaffle iskander akermu fiddlerwoaroof @Sigyn sivs atomi immae niklasb_ dqd _flow_ Deewiant krystianbajno lieven paraseba debugloop tchakka drager1 kosmikus adius scav parseval fredcy_)
01:26:30 --- names: list (jonrh barrucadu e35b gregberns thoughtpolice SlashLife rodgzilla _ceb koala_man jokester drdo jzl e rootmos_ sm LeaChim eldritch geal linduxed luigy benzrf runawayfive energizer dh jorj Willis Dykam ego dgpratt angerman runeks Liskni_si integral affinespaces sariyar stiell Chousuke Firedancer_ nisstyre maerwald Jacoby6000 aplainzetakind EvanR implementation_ crooked d3lxa w1gz comstar Flonk adarshaj ubercow eagleflo Xandaros wz1000 duairc gilbertw1 cesardv)
01:26:30 --- names: list (HalfEatenPie fiatjaf pharaun lispy khlieng__ steell rom1504 zenzike dexterfoo makergrl caasih moobar nyuszika7h ventonegro SolarAquarion Annihitek bitonic alextes johs darthThorik koankeeper Franciman sssilver dyl ldlework lowryder obiwahn ftop Kneiva avp RecursiveG tureba PyroLagus lavalike datapup spinda _6a68 ambrosia d6e asm89 anderson djanatyn greymalkin mstruebing Jaxan xnyhps raid sgraf lightandlight stass linoge Someguy123 solarus jinblack ezyang)
01:26:30 --- names: list (jdanforth markhuge jfredett idupree Ke pakettiale DwarfMaster mrus davean jvanbure michalisko @ChanServ bafain klugez furnost Clint cyberlard adamCS ruffy_ joeytwiddle sbrg stefan-_ tolt Forkk Guillaum liff cjay- kloeri abra0 riatre wraithm ryjm[payon] lugh brisbin iron_houzi rinfiyks jackhill)
02:17:16 <caissalover> Guys, I need help installing tensorflow in haskell. There's a blog named monday morning haskell, with his help I installed protobuf, libtensorflow and another dependency which I've forgot. Finally, I've to install tensorflow haskell available at https://github.com/tensorflow/haskell . I do not want it inside a docker. What should I do?
02:18:24 <segeljakt> which is the best parser generator in Haskell?
02:19:26 <ski> you could try Happy, or a parser combinator library like MegaParsec
02:20:26 <ski> (Happy is like Yacc. if you go for it, perhaps you want to try BNFC, which is a wrapper around Happy and Alex (lexer generator). actually BNFC can also generate parser and lexer for some other languages)
02:20:30 <ski> @where BNFC
02:20:31 <lambdabot> BNF Converter, http://bnfc.digitalgrammars.com/
02:20:36 <caissalover> I need to know a general process or logic behind installing packages in haskell without cabal.
02:20:37 <ski> @where Happy
02:20:37 <lambdabot> http://www.haskell.org/happy/
02:36:12 <yorick> in ghcjs, how do I got from a JSVal to an Object?
02:38:07 <yorick> I mean, besides importing JavaScript.Object.Internal
02:56:01 <bitonic> is it possible to have a pattern synonym for a record field?
03:15:18 <ski> bitonic : <https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#record-pattern-synonyms> ?
03:15:59 <bitonic> ski: that lets you define a synthetic record constructor, as far as i can tell
03:16:12 <bitonic> what i want is a pattern synonym for a field, where the field could be used just like a normal record field
03:16:26 <bitonic> my concrete example is that I have a `data Foo = Foo { bar :: NonEmpty A }`
03:16:37 <bitonic> or rather `data Foo = Foo { bars :: NonEmpty A }`
03:16:54 <bitonic> and I'd like to be able to have `bar :: A` operating on the `NonEmpty` head
03:18:35 <ski> oh .. interesting
03:19:18 <ski> so this would be a unidirectional synonym thing, then ?
03:20:36 <int-e> does this work? pattern FooCons :: A -> [A] -> Foo A; pattern FooCons{ bar, bart } = FooCons{ bars = bar :| bart }?
03:20:45 <segeljakt> why does Happy not generate the lexer?
03:21:08 * ski thought bitonic wanted overlap
03:21:11 <int-e> (the "t" is for "tail")
03:21:21 <ski> Happy is a parser generator, not a lexer generator
03:21:29 <ski> Alex is a lexer generator
03:21:34 <segeljakt> ah
03:21:39 <segeljakt> can I use them together?
03:21:54 <bitonic> int-e: I'd like to avoid defining a new record constructor, if possible
03:22:06 <ski> if you use BNFC, it'll give you both (and ASTs, and a pretty-printer i think)
03:22:15 <bitonic> the reason is that I'm changing that field type signature and I'd like to avoid refactoring tons of code
03:22:17 <ski> segeljakt : yes. BNFC will do that for you
03:22:24 <int-e> bitonic: I suspect that's impossible, but I don't know for sure.
03:22:36 <bitonic> thanks anyway :)
03:22:56 <int-e> bitonic: at least this should give you a working record update syntax.
03:32:02 <meinhof> did anybody get Undefined symbols for architecture x86_64 error after running stack build?
03:32:06 <meinhof> i am on os x
03:32:23 <duncan^> Can you be more specific?
03:32:54 <meinhof> I get
03:33:53 <meinhof>  /Users/<ME>/.stack/setup-exe-cache/x86_64-osx/Cabal-simple_mPHDZzAJ_2.4.0.1_ghc-8.6.5 --builddir=.stack-work/dist/x86_64-osx/Cabal-2.4.0.1 build lib:yooo exe:yooo-exe --ghc-options " apps this is the thing that causes trouble but it all sense non sensical to me
03:33:57 <talqu> hi, https://pastebin.com/Fs6pqKRN. Is it possible `id` to contain an empty list? If no exception occurs in postgresql, this would imply that id must have an error of 1 element, so head function would never fail here. I'm bit confused how to reason here
03:47:54 <segeljakt> bnfc looks alright but I wish it had builtin support for precedence
03:48:57 <segeljakt> maybe I'm missing something
03:52:39 <ski> segeljakt : use `coercions'
03:55:43 <aveltras> is there a way to make this code being able to deduce (HasDSource m (Bool, Int)) without having to specify this in the constraint https://gist.github.com/aveltras/fe727e15fb643ed1e36ca89f0dfd40bf ? I'd like to be able to just specify the request type the function should be able to handle
03:55:45 <segeljakt> it seems to generate `data Expr = Plus Expr Expr | Minus Expr Expr | ...` but I need `data Expr = Expr BinOp Expr | ...`
03:58:12 <segeljakt> I mean, `data Expr = Binxpr Expr BinOp Expr | ...`
04:06:54 <ski> you could have separate `AddOp' and `MulOp'
05:08:28 <jgt> what's the generic word for functions like these: (==), (<=), (>), etc. Are they comparators? Combinators?
05:09:01 <jgt> I understand the words "function" and "operator" would apply, but they would seem *too* generic
05:11:40 <aveltras> predicate ?
05:11:46 <Uniaika> hohai o/ I'm looking for recent learning material on how to write a simple compiler. Diehl's article on LLVM bindings is quite interesting, but apparently Parsec is to be replaced with Megaparsec, which doesn't seem to contain the tokenisation facilities present in Parsec
05:12:03 <jgt> aveltras: yeah that's probably the right word
05:12:06 <jgt> thanks!
05:12:11 <aveltras> np
05:14:06 <ski> jgt : comparision ?
05:14:39 <ski> (in)equality
05:14:40 <talqu> `type MyAPI t = "api" :> Header "SomeHeader" String`. If i give "api" string name (apiUrl = "api"). I can't `type MyAPI t = apiUrl :> Header "SomeHeader" String`. Getting: Not in scope: type variable apiUrl. Can solve this somehow?
05:15:40 <ski>   type MyAPPIUrl = "api"
05:15:44 <jgt> ski: yeah I thought of "comparator", which I think is more grammatically correct than "comparison", but I'm not sure between "comparator" and "predicate"
05:15:55 <jgt> probably predicate is the right one
05:15:57 <ski>   type MyAPI t = MYAPIUrl :> Header "SomeHeader" String
05:16:09 <aveltras> depens if you're interested in the boolean result of the function or in the fact that it compares thing
05:16:11 <ski> jgt : predicate is more general
05:16:28 <jgt> ski: hmm, maybe you're right
05:16:36 <jgt> ok so I'll go with comparator
05:16:49 <ski> @type comparing
05:16:51 <lambdabot> Ord a => (b -> a) -> b -> b -> Ordering
05:17:34 <jgt> it's ended up in this little bit of code I'm writing: http://ix.io/1IIi
05:17:40 <ski> @let equating :: Eq a => (b -> a) -> (b -> b -> Bool); equating f = (==) `on` f  -- or `equating f x y = f x == f y'
05:17:41 <lambdabot>  Defined.
05:19:00 <segeljakt> can you make cabal run bnfc when building?
05:19:02 <jgt> is there a shortcut defined for `maybe (pure ()) f mThing`?
05:19:07 <jgt> I seem to do that kind of thing often
05:20:21 <ski> jgt : `mapM_ f mThing' ?
05:20:36 <ski> (or `traverse_' in place of `mapM_')
05:21:25 <jgt> ski: oh yeah! It works! Thanks!
05:21:36 <ski> @. hoogle type maybe (pure ())
05:21:38 <lambdabot> Control.Monad.Extra whenJust :: Applicative m => Maybe a -> (a -> m ()) -> m ()
05:21:38 <lambdabot> Extra whenJust :: Applicative m => Maybe a -> (a -> m ()) -> m ()
05:21:38 <lambdabot> Control.Monad zipWithM_ :: (Applicative m) => (a -> b -> m c) -> [a] -> [b] -> m ()
05:21:47 <ski> @. hoogle type maybe (return ())
05:21:48 <lambdabot> Data.GI.Base.Utils whenJust :: Monad m => Maybe a -> (a -> m ()) -> m ()
05:21:48 <lambdabot> Language.C.Analysis.TravMonad maybeM :: (Monad m) => (Maybe a) -> (a -> m ()) -> m ()
05:21:48 <lambdabot> Control.Monad.IfElse awhen :: Monad m => Maybe a -> (a -> m ()) -> m ()
05:21:53 <jgt> is there any reason to prefer one over the other between traverse_ and mapM_ ?
05:22:33 <ski> you can just as well use `traverse_' here, unless you think `mapM_' is easier to read
05:22:51 <ski> `mapM' and `mapM_' existed before `traverse' and `traverse_'
05:23:05 <ski> but really, only idiomatic power is needed here
05:24:12 <jgt> well that's pretty cool; #TIL. Is there anything else that looks untidy here: http://ix.io/1IIk
05:26:34 <ski> hmm, the `$'s i suppose :)
05:27:11 <ski> i'd probably use `(* 100)' or `(100 *)'
05:27:27 <jgt> do you think parens are generally easier to read?
05:27:28 <ski> and `subtract 1' in place of `flip (-) 1'
05:27:43 <ski> i think `$'s are generally ugly and overused
05:29:19 <ski> (and `BlockArguments' ftw, <https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#more-liberal-syntax-for-function-arguments>)
05:33:51 <jgt> some progress: http://ix.io/1IIo
05:34:05 <ninjaaron> There's a guy on Quora who keeps telling me that functional programming languages (including and espeically Haskell) are "moving away from linked lists"
05:34:10 <ninjaaron> I don't believe him.
05:34:35 <ninjaaron> I mean, I know there are sequences and arrays, but the linked lists aren't going anywhere.
05:34:37 <ski> and `E.select . E.from'
05:34:37 <__monty__> For strings, maybe.
05:35:45 <jgt> ski: how would you use BlockArguments there?
05:36:28 <ski> removing the `$' before the `\'
05:36:52 <ski> (in that case you'd need `(E.select . E.from)', though)
05:37:37 <infinisil> ski: Did you decide on your nick because of the SKI combinators?
05:37:46 <ski> perhaps i'd replace the `let' by a `where', not sure
05:37:55 <ski> infinisil : affirmative
05:38:01 <infinisil> :D
05:38:39 <jgt> infinisil: https://ro-che.info/ccc/8
05:38:53 <ski> i'm not sure it's really that good a nickname/handle .. but it has sortof stuck
05:39:04 * ski smiles at jgt
05:39:15 <ski> (i know which one that is, without having to look)
05:39:47 <jgt> that's like memorising all the rickroll YT video hashes
05:40:10 <ski> (of course, "Currying" should perhaps really be called "Schönfinkelling" ?)
05:41:01 <jgt> ski: oh you know what, a let binding instead of the where would mean I don't have to pass in the model I'm projecting
05:41:35 <ski> jgt : hm, i meant the other way around
05:41:42 <Maxdamantus> :t unschönfinkel
05:41:43 <lambdabot> (a -> b -> c) -> (a, b) -> c
05:42:03 <jgt> ski: you mean nest another `where` inside the `where` that I had?
05:42:22 <ski> yes. but as i said, i'm not sure which ordering reads most nicely to you
05:42:29 <ski> just pointing out the possibility
05:43:33 <jgt> yeah, that works too: http://ix.io/1IIs
05:43:34 <ski> jgt : hm, like memorizing what <https://xkcd.com/386/> is referring to ?
05:43:48 <jgt> hahahaha
05:44:00 <jgt> I haven't memorised xkcd ids
05:44:15 <ski> i haven't really tried, but i've seen that one sufficiently many times, so ..
05:44:58 <ski> (and i haven't really memorized ro-che's, either, but in this context it was pretty obvious which one it had to be, without recognizing the number)
05:47:09 <ski> jgt : anyway, i definitely prefer those brackets to the removed `$'s
05:47:47 <ski> jgt : also, i suppose here you could just as well say `E.offset (100 * maybe 0 (fromIntegral . subtract 1) pspPage)'
05:50:09 <ski> @quote calls.to.support
05:50:10 <lambdabot> shapr says: Contribute your extra $ calls to support the orphan instances today!
05:52:30 <jgt> ski: ah yes, that also works.
05:52:38 <jgt> irc: the crowd-sourced hlint
05:53:46 <jgt> I realise also that using limit and offset is the "wrong" way to do paging in Postgres, but in this case I don't care
05:55:49 <segeljakt> ski, how did you mean with having a separate `AddOp' and `MulOp'?
05:57:15 <ski> segeljakt : `data AddOp = Add | Sub; data MulOp = Mul | Div | Mod', basically
05:58:23 <segeljakt> hmm, ok
05:58:40 <segeljakt> one other question, is it possible to tack on
05:58:43 <ski> perhaps you'd still want a single `data BinOp = Add | Sub | Mul | Div | Mod' (and also the `RelOp's ?), in which case i don't think BNFC can give you that directly, assuming you want some standard precedence and associativity
05:58:53 <segeljakt> oops
05:59:36 <segeljakt> it is possible to add a field to data structures which is not assigned when parsing
05:59:45 <ski>   EMul.      Expr4 ::= Expr4 MulOp Expr5 ;
05:59:51 <ski>   EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;
05:59:57 <ski> something like that was what i had in mind
06:00:13 <ski>   Plus.      AddOp ::= "+" ;
06:00:14 <ski>   ...
06:00:25 <ski>   Times.     MulOp ::= "*" ;
06:00:26 <ski>   ...
06:00:59 <segeljakt> ok
06:01:03 <ski> segeljakt : hmm
06:01:22 <segeljakt> I could have an enum of operators for every level of precedence
06:01:51 <ski> i agree it may be slightly annoying to not have a single `BinOp'
06:02:14 <ski> what would the type of that field be ?
06:03:14 <segeljakt> for the other question, every expression that is parsed has a type, but the type is not known until type inference, but it could be useful to have a field for it
06:04:25 <segeljakt> I'm not sure what is best, to store the type information for every expression in the tree, or in a side table
06:06:59 <ski> i made a copy of the AST, with the annotations on the nodes. type-checking took the untyped AST as input and produced the typed one as output
06:07:27 <ski> (really, i used IndirectComposite, to allow any indirection)
06:07:41 <segeljakt> ok, sounds like a good solution
06:08:00 <reallymemorable> I keep getting this error in VSCode with the HIE extension: https://gist.github.com/reallymemorable/589a6bc421f9ca975aaac8d745745267
06:08:07 <ski> @where DecoratingStructures
06:08:07 <lambdabot> <http://web.archive.org/web/20051126143527/http://haskell.org/hawiki/DecoratingStructures>
06:08:11 <ski> @where IndirectComposite
06:08:11 <lambdabot> <http://web.archive.org/web/20051126141834/http://haskell.org/hawiki/IndirectComposite>
06:10:00 <ski> segeljakt : an alternative is to add another type annotation node to the BNFC (marked `internal', probably), and then type-checking will produce a tree where every path will alternate between annotation nodes and normal nodes. but then you don't get static checking of that property
06:11:57 <infinisil> reallymemorable: -> #haskell-ide-engine
06:59:30 <shapr> ski: you have much of the quote database in your head!
07:08:55 <maerwald> :t head
07:08:57 <lambdabot> [a] -> a
07:08:59 <maerwald> makes sense
07:09:53 <ski> shapr : heh .. mostly things i've added, over time
07:39:31 <sullyj3> Where can I find a list of the instances of List?
07:39:45 <sullyj3> Not seeing it in the docs for prelude or data.list
07:40:03 <sullyj3> or ghc.list
07:42:33 <sullyj3> wait I'm an idiot, instances are found in the class, not the type. nvm
07:50:27 <jgt> @info []
07:50:27 <lambdabot> []
07:50:41 <jgt> thanks lambdabot, that was useful.
07:52:23 <Solonarv> jgt: there is no @info command
07:52:36 <Solonarv> there is a @undo command, and lambdabot uses fuzzy matching
07:54:02 <Younder> Just as long as there is no spoon ;)
07:57:00 <monochrom> @botsnap
07:57:00 <lambdabot> :)
07:57:16 <monochrom> lambdabot snapped before it was cool :)
07:59:25 <ski> (unfortunately `define' doesn't work any longer)
08:01:21 <jgt> ah, ok. I thought it was more similar to GHCi
08:01:34 <ski> % :i []
08:01:35 <yahb> ski: data [] a = [] | a : [a] -- Defined in `GHC.Types'; instance Alternative [] -- Defined in `GHC.Base'; instance Applicative [] -- Defined in `GHC.Base'; instance forall a. Eq a => Eq [a] -- Defined in `GHC.Classes'; instance Functor [] -- Defined in `GHC.Base'; instance Monad [] -- Defined in `GHC.Base'; instance MonadPlus [] -- Defined in `GHC.Base'; instance forall a. Monoid [a] -- Defined in `GHC.Base
08:01:44 <ski> that's GHCi
08:02:11 <ski> (use `%%' to get a paste, i think)
08:07:51 <segeljakt> with bnfc, can you not specify optional terminals / nonterminals?
08:17:09 <monochrom> Also:
08:17:12 <monochrom> @snap monochrom
08:17:12 * lambdabot pulls monochrom through the Evil Mangler
08:30:47 <talqu> Why can't do "bla" :: T.Text in the repl?
08:31:01 <Clint> talqu: did you enable OverloadedStrings?
08:31:21 <talqu> i loaded the module which does enable it
08:32:49 <talqu> Clint: thank, i had to do :set -XOverloadedStrings
08:33:26 <talqu> but that is weird, would be nice if the repl does it by its own. The module im loading does enable this extension
08:33:26 <Solonarv> talqu: loading a file that enables extensions doesn't enable those extensions in GHCi
08:33:55 <Solonarv> I think the main reason is that it would become hard to predict/control which extensions are active in GHCi
08:34:20 <ski> (importing a module that has enabled extensions doesn't enable those extensions in the importing module)
08:35:37 <talqu> Solonarv: i see. how can i enable n extension directly in the `cabal new-repl --set ext1, ext2`? 
08:36:00 <Solonarv> --repl-options='-XFoo -XBar'
08:36:15 <Solonarv> you can also put this in your cabal.project I believe
08:36:42 <Solonarv> or create a .ghci file in the current directory containing ':set -XFoo -XBar'
08:36:57 <talqu> nice, thank you
08:39:49 <ski> @quote Evil.Mangler
08:39:49 <lambdabot> Pseudonym says: All hail the Evil Mangler!
08:44:49 <phaul> what are the right functions in Control.Lens.Plated to check that all constructs of certain type of a recursive AST match a predicate. Ie In a language grammar AST all function calls match a predefined predicate?
08:45:51 <phaul> so far I have only been using transform* and the rest is a bit nebulous to me
08:56:43 <c_wraith> phaul: I think you want to something like  allOf (universe . foldThatTargetsTheElementsYouWant) predicate
08:57:28 <phaul> c_wraith: thanks
08:57:44 <c_wraith> phaul: the key thing there being universe, a Fold that transitively selects all children via the Plated instance
09:05:14 <c_wraith> phaul: I'm sorry.  cosmos, not universe.  (clever naming tricked me!)
09:05:54 <phaul> ok, cosmos. 
09:30:04 <sullyj3> So I'm writing a terminal GUI program using http://hackage.haskell.org/package/vty. I want to call an external terminal, and I do so using System.Process.callCommand. It runs fine. However, when it exits, instead of seeing my own terminal program again, I see my shell. My program is still running, the terminal eats all my keystrokes, and I can't quit my program, I have to close the terminal.
09:30:14 <sullyj3> How do I ensure that control is returned to my UI correct after the external program exits successfully?
09:30:40 <sullyj3> "want to call an external terminal *program*"
09:31:40 <yoav_> Say I have a long string that I know contains somewhere in it "(some number) results" (just like google does) and I want to extract that number. Is Regex the best way or does haskell provide something better?
09:34:18 <infinisil> yoav_: I'd use regex-applicative for that, it's like regex, but better
09:34:41 <sullyj3> Applicatives can parse context free languages, right?
09:35:08 <infinisil> I think so yeah
09:35:54 <infinisil> yoav_: Or a parser combinator library would work too, might even be more fitting in this case
09:35:55 <sullyj3> the answer to my question was to use the suspendAndResume function supplied by the brick library I'm using
09:36:43 <infinisil> yoav_: Ah actually no, if you want to extract just a tiny piece of a long string, regex is the better way to go, not parsers.
09:36:52 <infinisil> So I recommend regex-applicative indeed
09:37:43 <hyperisco> GOOOOOD MORNING #HASKELL
09:38:12 <c_wraith> good mornings are not real
09:38:29 <monochrom> @snap morning
09:38:29 * lambdabot decomposes morning into several parts using the Banach-Tarski theorem and reassembles them to get two copies of morning!
09:38:34 <hyperisco> That's cheerful readiness I love about this place
09:38:43 <monochrom> Wait, that's the opposite of snapping!
09:39:20 <Ariakenom> hyperisco: FYI the world is round
09:39:29 <hyperisco> I don't know why but today I woke up and all I want to do is work… so I am at work oO
09:39:56 <infinisil> Lamest excuse for forgetting it's weekend
09:40:56 <hyperisco> Are you accusing me of being timezone ignorant Ariakenom? Sir I'll tell you I've been working on weathery timey stuff for the last eon
09:41:41 <monochrom> No they're accusing you of being Gaussian-curvature ignorant :)
09:41:59 <hyperisco> infinisil, well now that I am trapped in this embarrassment I have to actually do some work like I meant it
09:41:59 <Ariakenom> solved it yet? this whole weather thing is starting to get on my nerves
09:42:54 <hyperisco> I solved how to choose a weather icon to characterise a day's weather in an extended forecast given the data points we are provided
09:44:25 <hyperisco> it involves a total ordering where most adjacent pairs are largely nonsense
09:44:36 * Ariakenom nods sagely
09:45:06 <monochrom> Ah so you were the one who gave us sun cloud rain snow in the same icon.
09:45:21 <hyperisco> still working out whether drizzling sleet is less or more bad than moderate rain
09:46:09 <yoav_> infinisil: thanks, got regex working
09:47:42 <hyperisco> I also learned that in extended forecasts one always uses a daytime icon even if the inclement weather occurs at night
09:51:23 <hyperisco> people at extreme latitudes must be confused
10:00:20 <Ariakenom> hyperisco: why confused? and how extreme?
10:01:30 <hyperisco> Ariakenom, some days do not have sunset or sunrise times because daytime or nighttime is longer than 24 hours… so I am just saying, the normalisation of extended forecasts to sun icons must be at least a little weird if you live in night
10:03:26 <jgt> this is some *good* Haskell chat
10:06:20 <hyperisco> I came to chat Haskell. What Haskell would you like to chat about?
10:07:25 <hyperisco> I haven't used in almost 2 years, so I am definitely behind on latest developments.
10:09:11 <yoav_> Is there a built-in function that takes an element (a) and a list ([a]) and removes all occurences of the element in the list?
10:09:23 <hyperisco> Yes! Check out filter!
10:09:38 <yoav_> thanks!
10:17:08 <svipal> I'm going crazy with recursive modules
10:23:24 <Unode> hi all, does anyone know any library or bindings to a library that provides a 'cairo-like' drawing capability on the terminal?
10:26:31 <jgt> brick?
10:26:45 <delYsid``> Does base have a Nibble/Word4 type somewhere?
10:26:50 <glguy> Unode: What's cairo like? I use vty for terminal apps
10:27:11 <delYsid``> brick rocks
10:28:53 <Unode> glguy: cairo-like in the API. i.e. something that can draw lines or shapes (in ASCII or some other way) by moving a pointer around and marking or filling content.
10:29:24 <Unode> glguy: are you familiar with the cairo library ? https://www.cairographics.org/
10:29:40 <yoav_> ?uc (\x -> x ++ [1, 2])
10:29:40 <lambdabot> Not enough privileges
10:29:40 <jgt> I have never written any GUI/TUI anything, but if I were to write a TUI app, I understand brick is the way to go
10:29:45 <glguy> I know it exists but not what the API is like
10:30:02 <glguy> brick is popular but adds a lot more weight than I'm usually looking for
10:30:18 <yoav_> What's the command for the parameterless version of a function again?
10:30:48 <jgt> yoav_: do you mean you want to pointfree something?
10:30:51 <Unode> jgt brick seems good but not for this particular use-case. I'm looking for something closer to a canvas and less like curses
10:31:00 <jgt> Unode: wish I could help!
10:31:01 <yoav_> jgt: yeah, I remember lambdadot can do something like this
10:31:12 <Unode> jgt: no worries, thanks for trying
10:31:21 <Unode> I'm not even sure such thing exists/is possible
10:31:28 <jgt> yoav_: apparently, you use @pl
10:31:44 <yoav_> jgt: thanks!
10:32:14 <Unode> glguy: ever done anything closer to plotting/charting ?
10:32:28 <glguy> I've used gnuplot
10:32:41 <Unode> hehe, yeah that's closer indeed
10:33:00 <Unode> but can't think of any way to use it as a canvas xD
10:35:29 <Unode> https://github.com/fdehau/tui-rs is the closest I've got so far. That world map is quite similar to what I'm after but this is rust and doesn't seem like there's an underlying lib.
10:37:22 <ski> @help pl
10:37:22 <lambdabot> pointless <expr>. Play with pointfree code.
10:41:56 <svipal> I was actually making it harder for myself
10:41:59 <svipal> ...
10:58:21 <yoav_> @pl extractNumResults s = (read :: String -> Int) $ filter (/= ',') $ drop 23 $ (s =~ "<span class=\"sb_count\">[0-9,]+ " :: String)
10:58:21 <lambdabot> (line 1, column 22):
10:58:21 <lambdabot> unexpected " "
10:58:21 <lambdabot> expecting operator
11:00:12 <yoav_> @pl (\s -> (read :: String -> Int) $ filter (/= ',') $ drop 23 $ (s =~ "<span class=\"sb_count\">[0-9,]+ " :: String))
11:00:12 <lambdabot> (line 1, column 26):
11:00:12 <lambdabot> unexpected '>'
11:00:12 <lambdabot> expecting operator
11:00:31 <yoav_> Hmm, does the escape not work?
11:01:14 <yoav_> @pl (\s -> (read :: String -> Int) $ filter (/= ',') $ drop 23 $ (s =~ "REGEXP " :: String))
11:01:15 <lambdabot> (line 1, column 26):
11:01:15 <lambdabot> unexpected '>'
11:01:15 <lambdabot> expecting operator
11:01:37 <geekosaur> it's the type ascription
11:01:44 <geekosaur> the @pl parser is somewhat stupid
11:01:58 <yoav_> @pl (\s -> read $ filter (/= ',') $ drop 23 $ (s =~ "<span class=\"sb_count\">[0-9,]+ "))
11:01:58 <lambdabot> (line 1, column 47):
11:01:58 <lambdabot> unexpected "~"
11:01:58 <lambdabot> expecting operator
11:02:03 <yoav_> @pl (\s -> read $ filter (/= ',') $ drop 23 $ (s == "<span class=\"sb_count\">[0-9,]+ "))
11:02:04 <lambdabot> read . filter ((',') /=) . drop 23 . ("<span class=\"sb_count\">[0-9,]+ " ==)
11:02:09 <yoav_> there we go, thanks
11:02:41 <yoav_> I just realized the issue I had is with the type ascription haha
11:02:49 <yoav_> how do I place one in pointfree notation?
11:03:08 <geekosaur> it will work in actual code.
11:03:17 <yoav_> Oh, just the function type instead of the value type.
11:03:20 <geekosaur> but @pl wants to trey to rewrite that into pointfree, which won't work
11:03:39 <geekosaur> and the parser rejects constructs that can't be pointfree-d, like ::
11:04:00 <geekosaur> well, it accepts that and treats as a normal operator, then dies on ->
11:04:29 <yoav_> interesting, thanks for the explanation
11:55:21 <reallymemorable> can anyone tell me why this is failing? https://gist.github.com/reallymemorable/d36130a91b0ce03fcc9925eeca531cd9
11:57:17 <yoav_> I have a [String] xs and a function fn :: (String -> IO Int), I want to get the string from the list that the function gives the maximum value for. I tried using liftM maximumBy over comparing fn xs but it doesn't work, I can't figure out the "extraction" from the IO when I use maximumBy which is kind of like mapping. How can I achieve what I want?
11:59:46 <Cale> yoav_: Perhaps start with forM xs $ \x -> do v <- fn x; return (v,x) -- then you can take the result of that and compare the first components of the pairs
12:00:39 <yoav_> Cale: I'll give that a shot, thansk
12:00:56 <int-e> reallymemorable: a shot in the dark: did you include the {-# LANGUAGE Arrows #-} line?
12:01:21 <aplainzetakind> :t maximum <$> traverse (undefined :: String -> IO Int) (xs :: [String])
12:01:22 <lambdabot> error:
12:01:23 <lambdabot>     • Variable not in scope: xs :: [String]
12:01:23 <lambdabot>     • Perhaps you meant one of these:
12:01:30 <aplainzetakind> :t maximum <$> traverse (undefined :: String -> IO Int) (undefined :: [String])
12:01:31 <lambdabot> IO Int
12:02:07 <aplainzetakind> yoav_: ^ Would this do?
12:02:18 <geekosaur> int-e, there's a link to the full source which includes it. I just unlit-ed it and it looks reasonable
12:03:20 <aplainzetakind> Ah you want the String not the Int
12:04:46 <geekosaur> hm, and the unlit-ed one works here if I comment out the import line (errors on missing types/names, but not a parse error on the proc syntax)
12:06:01 <geekosaur> oh, the link isn't for the same file per the error message. so yes, probably missing LANGUAGE pragma
12:06:14 <geekosaur> reallymemorable, ^^
12:06:35 <int-e> :t proc _ -> do returnA -< 1
12:06:36 <lambdabot> error: parse error on input ‘->’
12:06:40 <yoav_> aplainzetakind: That's awesome, thanks a lot!
12:06:45 <int-e> (that's without -XArrows)
12:08:07 <aplainzetakind> yoav_: But that doesn't get the String?
12:08:46 <yoav_> aplainzetakind: I modified it to get the index, and that's also great for me
12:09:03 <yoav_> Still don't know how exactly I want to do stuff here
12:15:45 <nbloomf> does anyone have tips for speeding up compile times for happy parsers? I've got a moderate sized one that takes 15min+ with no optimizations
12:17:00 <reallymemorable> geekosaur, int-e: yep i missed the pragma
12:17:06 <reallymemorable> still making rookie mistakes...
12:17:08 <reallymemorable> thank you
12:17:54 <adius> If I wanted to create a programming language which is a strict subset of Haskell, what would be the easiest way to do this?
12:18:17 <adius> Monkey patch GHC? Or is there a good way to swap the parser?
12:18:48 <adius> Or check the AST if any of the unallowed syntax constructs was used?
12:19:03 <Uniaika> I'm pretty sure you'd have to replace a bunch of stuff in GHC because lazyness is deeply engrained in it
12:19:22 <Uniaika> or perhaps annotate everything with strictness annotations
12:19:40 <adius> But the initial parsing isn't lazy?
12:19:40 <phadej> strict subset is probably "only removing features", not strict vs. lazy
12:20:05 <adius> =D  Haha yes. Sorry for the confusion. Has nothing to do with strict / lazy
12:20:11 <Cale> adius: Maybe make a preprocessor using haskell-src-exts
12:20:28 <Cale> and just walk over the parsed source and look for stuff which is forbidden?
12:20:37 <adius> I meant a "proper subset"
12:21:14 <aplainzetakind> yoav_: A bit nicer perhaps: `traverse (sequence . (\x -> (x, f x))) xs` gives you `IO [(String, Int)]`, then you can `fmap (fst . maximumBy (comparing snd))` to get your String.
12:23:52 <adius> Cale: Ah yeah, haskell-src-exts might be a good start. Probably the easiest way to get started
12:28:39 <ShyGirl99> Hi, boys! It's time for my Saturday Live Show. I start in 10 minutes. If you would like to watch, just send me a message "Free Vip Invite" in the Cam Site (and let the fun begin!). Link: http://lnnk.in/@vCams
12:31:20 <FriCho> helloo guys
12:34:11 <FriCho> welcome!
12:49:44 <svipal> camgirls in #haskell. gold
12:50:11 <nshepperd> shy but not shy enough to not spam freenode :/
12:51:01 <Uniaika> truly we've achieved fame
12:51:09 <Uniaika> SPJ would weep
13:09:19 <dmj`> it is the most heavily trafficked irc channel, great candidate for spam
13:10:29 <zachk> this channel is the most heavily trafficked one on freenode, dmj` ? 
13:10:50 <dmj`> something like that
13:28:08 <hpyCdr> I'm trying to use the binary package on a lazy Bytestring, but using 'runGetIncremental' seems to always return the rest of a parse as strict bytestring
13:28:23 <hpyCdr> how can I work around this, if I'd like to run it several times?
13:28:44 <hpyCdr> I don't want the input to 'become' strict
13:30:44 <hpyCdr> I guess I could work around this by using take/drop before feeding it, to only provide the required bytes for the parse
13:58:04 <matthewbauer> Does GHC have a way to make `-fexternal-interpreter` work without iserv? I just want it to immediately execute qemu emulator - no servers involved
14:08:38 <geekosaur> what
14:09:32 <geekosaur> if you want qemu, run qemu. the point of -fexternal-interpreter is iserv; emulating a target is incidental
14:09:48 <geekosaur> and if iserv isn;;t there ghc isn't doing anything with the qemu
14:15:31 <__monty__> Why is ReadP's `optional` not as greedy as I expect it to be?
14:24:40 <segeljakt> question: in bnfc, I get this when running make: `Could not load module ‘Data.Array’`
14:25:12 <segeljakt> `It is a member of the hidden package ‘array-0.5.3.0’`
14:25:26 <segeljakt> `You can run ‘:set -package array’ to expose it.`
14:26:07 <segeljakt> I'm very new to Haskell, is `Data.Array` a standard library data structure?
14:26:13 <Cale> yes
14:26:29 <Cale> You probably have array installed already
14:26:32 <geekosaur> standard, but that means less than you think. a minimal haskell installation includes only the minimum needed for the compiler to work
14:27:20 <geekosaur> although array should be part of that. "hidden" usually means missing dependencies somewhere, if you are using stack or cabal v2- or new- commands you need to declare a dependency on the array package for it to be visible
14:31:37 <matthewbauer> geekosaur: i guess i want iserv without the proxy part. doesn't seem too crazy, things like meson do this with `exe_wrapper`, but it doesn't look like ghc has that kind of option. having a server seems like overkill
14:32:18 <geekosaur> not sure what you think is going on
14:32:29 <geekosaur> ghc locally talks to the server on the remote process/emulator/target
14:32:33 <geekosaur> it doesn't do things directly
14:39:49 <segeljakt> I cannot believe it, bnfc bloody works
14:40:00 <geekosaur> oh, medon is a build system of some kind. ghci is an interpreter environment, not a build system. if you use -fexternal-intepreter, that environment lives in the iserv, and the local ghci simply relays commands and responses
14:40:13 <geekosaur> if you load a project, it's loaded into the iserv. if you then run it, it's interpreted there
14:41:12 <geekosaur> if you build something, you're using cabal or stack and they will use a cross-compiler
14:52:16 <talqu> `class Something a where doSomething :: a -> Integer` `instance Something [Char] where...` why doesn't this work without FlexibleInstances extension? 
14:55:19 <geekosaur> because without FlexibleInstances, the instance can only be made for T a b c ... where T is concrete and a, b, c are type variables.
14:55:34 <geekosaur> which is how standard Haskell is defined, so that's what ghc allows by default
14:55:50 <geekosaur> FlexibleInstances is a benign extension but still a deviation from the standard
14:56:35 <geekosaur> so you could have an instance Something [a] where..., but not (per the standard) instance Something [Char]
14:58:53 <talqu> T a b c, how T is concrete here when it still needs to take a b c? 
15:00:45 <geekosaur> I'm not sure what you're asking. the instance is attached to T so that must be concrete. in standard Haskell the instance has no say over what a, b, c are
15:01:25 <geekosaur> ghci implements typeclasses in a way that allows specification of those types. standard Haskell allows a more naïve way of implementing typeclasses, that doesn't
15:03:32 <talqu> geekosaur: Thank you very much, i got it
15:03:50 <geekosaur> er, ghc implements. derp
15:13:47 <ski> segeljakt : cool !
15:21:05 <matthewbauer> geekosaur: yeah i misunderstood the docs, but my impression was i could just do ```ghc ... -fexternal-interpreter -pgmi $qemu_wrapped_ghci```
15:22:02 <matthewbauer> geekosaur: it sounds like ghci doesn't natively support the iserv protocol, unless there's some option i need to add
15:22:12 <geekosaur> yes, but ghci doesn't know about the qemu, it ust knows there's a ghcid to talk to
15:22:55 <geekosaur> https://gitlab.haskell.org/ghc/ghc/wikis/commentary/compiler/external-interpreter
15:24:49 <geekosaur> anyway ghci knows nothing about the qemu, it knows it is talking to an iserv.
15:24:58 <geekosaur> and iserv does all the real work from that point on
15:28:18 <matthewbauer> it sounds like the plain iserv-bin thing does exactly what i want, actually. i wonder why it's not in hackage?
15:31:34 <geekosaur> it shouldn't need to be, iserv comes with ghc
15:33:51 <matthewbauer> geekosaur: awesome thanks!
15:46:01 <dmrd_> hey folks, does any of you have experience w/ the demand analyzer?
15:49:52 <dyl> tdammers: ^ 
18:08:26 <epta> how to fetch submodules in azure devops build?
18:15:38 <epta> figured out, nvm
22:33:21 <Squarism> i have an app that uses lots of threads and database. I wonder what is a good way to synchronize certain "entities". Say only one thread should be able to deal with Subject # X. I need both synchronous and asynchronous interaction with it? MVar comes to min but. So if i have a list of subjects, my complete shared state would be : type AppState = MVar [MVar Subject] ?
22:33:33 <Squarism> (sorry double post, but people seems sleeping)
23:38:47 <Ke> So apparently I have to reinstall ghc on every boot on debian to get xmonad to link without missing symbols, any idea what this could be about
