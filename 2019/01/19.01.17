00:33:57 <Profpatsch> I wonder: can you combine recursion schemes with a breadth-first traversal?
00:34:31 <Profpatsch> Well, I not only wonder, I kind of need that right now. :P
00:35:52 <Profpatsch> (Because I’m unfolding monadically and want to memoize the results of the monadic action.
00:38:46 <jle`> Profpatsch: not sure what you mean by 'combine', but you can use recursion schemes to write a breadth first traversal
00:41:28 * hackage servant-auth-server 0.4.3.0 - servant-server/servant-auth compatibility  http://hackage.haskell.org/package/servant-auth-server-0.4.3.0 (domenkozar)
00:41:51 <Profpatsch> jle`: Is that even possible with cata and ana?
00:42:45 <jle`> "everything" is possible with cata and ana
00:42:49 <Profpatsch> If I understand this correctly you do a breadth-first traversal by creating a queue and listing all direct children, iterating over the queue. But I haven’t looked at Okasaki yet, guess I should do that first.
00:43:40 <coldpress> is there an efficient way to Data.Map.alter every element in the map?
00:44:14 <lyxia> Profpatsch: there's a package somewhere with an applicative functor just for that kind of thing
00:44:59 <jle`> coldpress: hm, what do you mean?
00:44:59 <Profpatsch> lyxia: Not Haskell I’m afraid.
00:45:01 <jle`> coldpress: like mapMaybe ?
00:45:17 <Profpatsch> But I thought this channel might be my best shot anyway. :P
00:45:17 <lyxia> ah
00:45:28 <jle`> Profpatsch: cata can be used to implement any traversal
00:45:34 <jle`> breadth first or depth first
00:47:07 <Profpatsch> jle`: That’s good to know! Can you implement all the combinators in terms of cata and ana then? 
00:47:28 <jle`> technically yes, but they might not always be the most natural way to implement everything
00:47:39 <jle`> that's why the other recursion schemes exist in the zoo
00:48:14 <jle`> although i'm actually not sure now what you mean by "the combinators"
00:48:18 <Profpatsch> jle`: And is hylo faster than running cata after ana? Or does that only make a difference in a strict language?
00:48:32 <Profpatsch> jle`: Yeah, the zoo you mentioned.
00:48:35 <jle`> hylo should be faster because it doesn't create any intermediate data structures
00:48:44 <jle`> ah yeah, i would call them "recursion schemes", not combinators
00:48:55 <jle`> but i guess they are technically combinators :)
00:49:10 <jle`> Profpatsch: hylo doesn't generate any intermediate data structures, so it should be nicer than cata then ana
00:49:13 <Profpatsch> Actually generic effectful fold is just a type specialization of cata. oO https://hackage.haskell.org/package/recursion-schemes-5.1/docs/src/Data.Functor.Foldable.html#cataA
00:49:27 <jle`> yeah, it's just cata-ing into an applicative/monad
00:49:29 <jle`> value
00:50:07 <Profpatsch> jle`: It’s missing anaA here, does that not exist?
00:50:13 <jle`> what is anaA ?
00:50:20 <Profpatsch> Effectful unfold
00:50:41 <Profpatsch> Or just obvious omission I guess.
00:50:54 <Profpatsch> As in: “you got the idea”
00:52:32 <jle`> ah, i'm looking at anaM from data-fix, that might be what you mean
00:53:54 <coldpress> jle`: actually nevermind, thanks for your help though
00:54:08 <jle`> i think maybe it can be implemented in terms of (:.:)
00:55:01 <jle`> hm, maybe not
00:55:51 <jle`> i remember one good reason why cataM is not in recursion-schemes is that it's not clear what the ordering of effects should be
00:56:03 <jle`> and that implementing it using cata directly makes much more sense, because you have a choice on how things are sequenced
00:56:10 <jle`> it might be the same deal with anaM
00:56:52 <jle`> although implementing what you'd implement using cataM in terms of cata is fairly straightforward, i'm not sure if it's the same with ana/anaM
01:02:57 <phadej> there's transverse which let's you e.g. fold natural number into list getting the elements from state
01:03:12 <phadej> haven't tried though, even I added that function
01:04:16 <phadej> in that sense the size of list is determined statically, but elements aren't
01:04:20 <Profpatsch> phadej: Wait, you added that function and haven’t ever used it? :)
01:04:28 <phadej> I used it for different thing
01:04:37 <phadej> not for emulating "anaA"
01:05:08 <phadej> but that's the correct notion for something like anaA - the shape of unfolded thing cannot depend on monadic values, if you don't use Monad constraint
01:05:43 <Profpatsch> phadej: So anaA does not really exist?
01:06:03 <phadej> I haven't found it, I haven't proved it's non-existence :)
01:06:47 <phadej> it just wasn't obvious back then (I needed transverse, so i added it, cataA is trivial)
01:18:27 <jle`> hm yeah, i think anaA can't exist in the form of data-fix
01:18:48 <jle`> anaA :: (Applicative f, Traversable t) => (a -> f (t a)) -> a -> f (Fix t)
01:19:13 <jle`> you need Monad because the effects to generate the next layer depend on the result of the action
01:26:10 <jle`> my anaM-in-terms-of-ana is anaM f = hylo (fmap Fix . join . fmap sequenceA . getCompose) (Compose . f)
01:27:13 <jle`> and you can control the order of effects with substituting sequenceA for any t (f a) -> f (t a) function
01:27:38 <asheshambasta> I guess this is a noob question, but this is a major minefield: https://gist.github.com/asheshambasta/1d6e438650cc799783f90c54ebc19e36 (IMHO)
01:28:29 <asheshambasta> basically, this means that the default FromJSON Text in Aeson doesn't respect non-latin characters? Or am I wrong?
01:33:12 <merijn> asheshambasta: It means you're using show on a String
01:33:15 <merijn> (or Text)
01:33:28 <Ariakenom> asheshambasta: String outputs characters as unicode escaped "\931"
01:33:33 <merijn> asheshambasta: Show will format textual data as "valid Haskell values"
01:33:50 <asheshambasta> Actually, never mind, its GHCI, which probably is calling show as merijn suggests on the output 
01:33:53 <merijn> asheshambasta: Specifically, it will render unicode values as escape sequences
01:34:06 <merijn> asheshambasta: Common confusion ;)
01:34:44 <merijn> > show "Σχολή ιστιοπλοΐας"
01:34:46 <lambdabot>  "\"\\931\\967\\959\\955\\942 \\953\\963\\964\\953\\959\\960\\955\\959\\912\\...
01:35:02 <asheshambasta> Yeah, a continual "lesson learnt" moment: study the case before blaming your tools 
01:35:05 <merijn> > text "Σχολή ιστιοπλοΐας" -- (trick to make lambdabot render Strings, instead of show them)
01:35:07 <lambdabot>  Σχολή ιστιοπλοΐας
01:35:28 <asheshambasta> nice 
01:35:40 <Ariakenom> > let str = "Σχολή ιστιοπλοΐας" in (read . show) str == str
01:35:42 <lambdabot>  True
01:35:53 <merijn> oh, actually, note how the first example using show also escapes the quotes
01:36:00 <merijn> asheshambasta: Because lambdabot calls show *too*
01:36:05 <merijn> > "Σχολή ιστιοπλοΐας"
01:36:07 <lambdabot>  "\931\967\959\955\942 \953\963\964\953\959\960\955\959\912\945\962"
01:37:26 <asheshambasta> in my case, the confusion was two fold; I was testing a Servant API endpoint that outputs JSON and piping the output from curl to `python -mjson.tool`, which also escapes these characters.
01:37:51 <asheshambasta> Then I ran the decodeFileStrict and was presented with similar things in GHCI. 
01:38:07 <asheshambasta> my monkey brain jumped up in panic
01:51:28 * hackage namespace 0.1.4.1 - A Generic Haskell library for managing namespaces  http://hackage.haskell.org/package/namespace-0.1.4.1 (xuhao)
02:56:53 <xsperry> what do you think about all the show functions in here returning ShowS? seems unnecessary to me, not good enough in many cases, and out of the scope of what those functions should do. anyone disagrees? http://hackage.haskell.org/package/base-4.12.0.0/docs/Numeric.html
02:57:05 <xsperry> (I'm asking because I am writing something similar to this)
02:57:28 <merijn> Unnecessary how?
02:58:06 <xsperry> if you want to append a string you can always do it after the call
02:58:19 <merijn> xsperry: That's a lot slower if you do it repeatedly
02:58:48 <xsperry> merijn, so efficiency is the argument? while using String?
02:58:55 <merijn> ShowS is for composing/adding many short strings and does that MUCH more efficiently than ++
02:59:33 <xsperry> we are talking about few character long strings
02:59:56 <merijn> xsperry: In your example, maybe
03:01:39 <xsperry> in most examples, I'd imagine
03:04:05 <xsperry> part of showHFloat's definition, ++ calls all over the place.  (d:ds, e) -> "0x" ++ show d ++ frac ds ++ "p" ++ show (e-1)
03:16:58 <dminuoso> For what its worth, if performance is that relevant, chances are you shouldn't be using Show at all.
03:17:17 <dminuoso> Though.. this is not `Show` I guess.
03:24:29 <matheus23> how do prisms for sumtypes with multiple values in one constructor look like?
03:24:58 <matheus23> data Example = Both Int String | Only String
03:25:09 <dminuoso> matheus23: You can think of "multiple values" as just (,)/(,,)/...
03:25:22 <matheus23> okay. Is that how its done in practice?
03:25:50 <matheus23> because that'd mean I'd for example write toListOf (_Both . _1), and _1 seems undescriptive :/
03:25:59 <matheus23> but alright, thats something that works at least! :)
03:31:16 <siraben> iqubic:  have you heard of logical foundations?
03:31:37 <siraben> It teaches Coq. I've been going through the first couple of chapters and it's really quite fun proving all sorts of things.
03:31:59 <siraben> There's a chapter later on about Haskell code extraction as well, so you could prove something with Coq and generate a verified program.
03:50:54 <argunov12> hey! is there some kind of tldr tutorial and gotchas of Cabal?
03:51:29 <dminuoso> argunov12: use v2-*, be happy.
03:51:55 <dminuoso> argunov12: Or maybe you should be more explicit. What `cabal` are you referring to?
03:52:57 <argunov12> the build tool, the one with v2 commands :)
03:53:03 <dminuoso> argunov12: So `cabal-install` then. 
03:53:42 <argunov12> I mean it can't resolve dependencies, from a github repo, and I don't know where to start troubleshooting
03:54:12 <dminuoso> argunov12: Please gist/paste your cabal file, the command you tried and the full error message you have received.
03:55:52 <argunov12> https://gist.github.com/troglotit/0e52fbb0a17ee952b9db65d9495ea9b0
03:58:21 <__monty__> I think you need a ghc that comes with the right version of template haskell.
03:58:27 <dminuoso> argunov12: What does your cabal user config look like
04:00:15 <argunov12> updated the gist with user config (the one in home dir), it was autogenerated from cabal without my intervention
04:04:05 <argunov12> yeap `Apiary` haven't been updated for a long time, it's not updated for newer GHC
04:04:14 <dminuoso> hvr: ^- is this a hackage metadata bug?
04:04:40 <dminuoso> I thought th was marked as upgradeable in https://github.com/haskell/cabal/pull/1934
04:06:05 <dminuoso> argunov12: Yeah, you could fork the repo, bump the version, see if it builds/tests pass - and if all looks good make a merge-request. Until such a merge request is accepted (and went upstream to hackage) you could use a `cabal.project` to then point to your forked repo.
04:07:03 <dminuoso> Im curious why you have gotten that particular error message though.
04:12:28 * hackage stack2nix 0.2.2 - Convert stack.yaml files into Nix build instructions.  http://hackage.haskell.org/package/stack2nix-0.2.2 (domenkozar)
04:32:44 <Rembane> I want to go from a number between 0 and 6 to a local text representation of a day, and I can't find the function on Hoogle. Which function should I use?
04:35:02 <hpc> use the FormatTime class instance for DayOfWeek, i think
04:35:46 <Rembane> So the formatTime function in the time package? 
04:35:57 <hpc> yeah
04:36:01 <Rembane> Thank you! 
04:37:17 <hpc> after being burned by a few overly-mysterious packages, i just beat it into my head to always check class instances
04:47:25 <reygoch> Is there a way to "react" to failure in MaybeT? I'd like to print out a message in IO in case an operation fails in MaybeT IO a
04:47:50 <merijn> reygoch: Alternative
04:47:54 <merijn> :t (<|>)
04:47:55 <lambdabot> Alternative f => f a -> f a -> f a
04:48:05 <merijn> > Just True <|> Nothing
04:48:07 <lambdabot>  Just True
04:48:17 <merijn> > Nothing <|> Just False
04:48:19 <lambdabot>  Just False
04:48:31 <merijn> reygoch: <|> is basically "try left, if fail, try right"
04:49:22 <reygoch> Hm, what if I want to download a file and operation fails and I just want to log that and exit?
04:49:33 <reygoch> eg:   mUriHtml <- fetchText listURI <|> logE ( Text.unwords [ linksDF, turi listURI ] )
04:50:05 <reygoch> this doesn't work because mUriHtml has to be a concrete value but at that point I just want to log a message and exit the computation.
04:50:42 <hpc> it depends on what logE does
04:50:44 <reygoch> and logE is Text -> MaybeT IO ()
04:51:09 <hpc> make sure logE's effect in MaybeT is to be Nothing
04:51:22 <reygoch> Aha!
04:51:24 <reygoch> thx
04:51:31 <reygoch> that helped me :D
04:54:56 <Profpatsch> jle`: I found https://hackage.haskell.org/package/recursion-schemes-5.1/docs/Data-Functor-Foldable.html#v:gana
04:55:00 <Profpatsch> That looks like anaM.
04:55:12 <Profpatsch> Sorry, missed your last comments before.
04:56:58 <Profpatsch> (forall b. m (Base t b) -> Base t (m b)) is a generalized `sequence` that you have to provide.
04:59:05 <Profpatsch> Oh, but the Monad m goes the wrong way around, so it’s not that.
04:59:24 <Profpatsch> transverse seems closer.
05:10:19 <AfC> Wow the Cabal library takes a long time to compile these days.
05:11:28 <dminuoso> How would you name a IO action that *blocks* indefinitely on some `Async Void`?
05:11:42 <hpc> waitForWhatever
05:11:48 <dminuoso> Heh.
05:19:11 <c_wraith> Async Void is not a very good type
05:19:37 <c_wraith> That is, unless it actually will never complete.  Then it's good.
05:21:50 <dminuoso> c_wraith: It will either never complete or crash. =)
05:22:01 <dminuoso> So either way I'm getting bottom.
05:22:19 <c_wraith> for our definition of "complete", a crash is also not completing. :)
05:22:32 <dminuoso> Fair enough
05:22:47 <hpc> oh, i see
05:22:57 <c_wraith> waitTilTheCowsComeHome
05:23:17 <hpc> blockForever is probably a good name for it then
05:29:20 <dminuoso> c_wraith: Or maybe a GoT reference would be fitting! `waitUntilTheSunRisesInTheWestAndSetsInTheEast :: Server -> IO Void`
05:29:55 <dminuoso> Though, considering an alien race might in billions of years from now rotate the earth the other way around...
05:31:44 <c_wraith> are you implying humans will never get that capacity, even with a billion years, or that humans in a billion years with that capacity will be so alien we wouldn't recognize them anyway?
05:32:15 <__monty__> `waitUntilTheUniverseStopsExpanding` depending on your beliefs about cosmic inflation that should do for any resident of this universe.
05:32:50 <c_wraith> Honestly, in all practical senses, you could go with "waitUntilRightAfterThisComputerPowersDown"
06:11:27 * hackage trackit 0.5 - A command-line tool for live monitoring  http://hackage.haskell.org/package/trackit-0.5 (EmilAxelsson)
06:25:05 * hackage hspec-core 2.7.0 - A Testing Framework for Haskell  http://hackage.haskell.org/package/hspec-core-2.7.0 (SimonHengel)
06:25:57 * hackage hspec-discover 2.7.0 - Automatically discover and run Hspec tests  http://hackage.haskell.org/package/hspec-discover-2.7.0 (SimonHengel)
06:26:58 * hackage hspec 2.7.0 - A Testing Framework for Haskell  http://hackage.haskell.org/package/hspec-2.7.0 (SimonHengel)
06:56:41 <dminuoso> c_wraith: Except that won't hold true if the thread crashes.
07:02:25 <maerwald> why is brittany doing a newline here https://gist.github.com/hasufell/2a79311d9b14452162780c57807c5568#file-foo-hs-L12
07:02:29 <maerwald> that feels quite unidiomatic
07:08:30 <dmwit> pure survived your obfuscator =)
07:08:38 <dmwit> I guess standard library stuff has to.
07:08:46 <dmwit> Pretty clever. Is the tool you used publically available?
07:09:13 <maerwald> dmwit: what tool?
07:09:16 <maerwald> I used brittany
07:09:36 <dmwit> Oh? brittany has an obfuscation mode?
07:09:39 <maerwald> Yeah
07:09:57 <maerwald> That's what my vim does on save buffer xD
07:10:46 <dmwit> Either we have misunderstood each other, or you are proper mad.
07:10:58 <dmwit> Maybe both!
07:11:14 <maerwald> brittany --obfuscate
07:11:44 <maerwald> No, of course I'm kidding. The code isn't even obfuscated xD
07:11:54 <maerwald> That's alien language
07:12:18 <lordcirth_> Why would someone write a Haskell obfuscator?
07:12:34 <dminuoso> lordcirth_: Some folks are not used to having readable code.
07:12:42 <dminuoso> Especially those who come from C++ or Perl.
07:12:50 <maerwald> Because I like to share my proprietary haskell code with 1200 people?
07:13:05 <tdammers> maerwald: just ship binaries only?
07:13:10 <dmwit> lordcirth_: Perhaps so they could run brittany on proprietary code and ask the wider community about the result without breaking contract. =)
07:13:21 <maerwald> tdammers: yeah... I run brittany over binaries.
07:13:41 <dminuoso> Cleanly formatted machine code is important.
07:13:59 <dmwit> maerwald: The newline looks odd to me, too. The only thing I could think of is that it was considering making the ( be indented differently if you had chosen different tabstops or something.
07:14:01 <tdammers> it's kinda bullshit though, the thing that protects your code from being copied is the license, not technical means for hiding it
07:14:11 <dmwit> tdammers: defense in depth
07:14:13 <tdammers> if you have a working binary, you can reverse engineer it
07:14:26 <maerwald> tdammers: no one has the binary :P
07:14:34 <tdammers> maerwald: then why obfuscate?
07:14:34 <dmwit> Not even maerwald!
07:14:40 <lordcirth_> Your mistake here is releasing proprietary code
07:14:50 <lordcirth_> Either share it or don't
07:14:50 <dminuoso> Obfuscating code is silly. 
07:15:03 <dmwit> But nobody has released proprietary code. So why point out a mistake nobody is making?
07:15:11 <dminuoso> Especially if its proprietary. Just add some clause to the contract about the source code.
07:15:47 <dmwit> So. For the first time, I find myself on maerwald's side of an argument. How strange it feels.
07:18:02 <dmwit> maerwald: (Does brittany have a, like, --indentsize or something that you could try briefly to see whether the newline looks saner with shorter or longer indents?)
07:19:12 <tdammers> writing code obfuscators can be fun though
07:20:20 <inkbottle> Really how did you ended up with that code: I find your identifiers awesome (brittany --obfuscate doesn't work for me, even though brittany has a function obfuscate)
07:20:39 <inkbottle> http://hackage.haskell.org/package/brittany-0.11.0.0/docs/Language-Haskell-Brittany-Internal-Obfuscation.html
07:20:50 <dmwit> tdammers: By the way, if you would like to try your hand at reverse engineering a binary, there is a prize for https://github.com/GaloisInc/safeware-challenge as yet unclaimed. =)
07:21:03 <dmwit> err... not that
07:21:06 <dmwit> Let me find a proper link.
07:21:27 * hackage HaskellNet-SSL 0.3.4.1 - Helpers to connect to SSL/TLS mail servers with HaskellNet  http://hackage.haskell.org/package/HaskellNet-SSL-0.3.4.1 (lemol)
07:21:56 <dmwit> This one: https://github.com/GaloisInc/safeware-benchmark
07:23:03 <maerwald> Why are you guys arguing over code obfuscation even?
07:23:22 <dminuoso> Because we like bike shedding.
07:23:36 <maerwald> Yes, there is not enough bikeshedding in open source.
07:23:43 <tdammers> so much. now if you excuse me, I have to go sharpen my yak razor.
07:40:51 <zoominz0d> Anyone?
07:50:57 <jhaj> \join
07:53:44 <parkeraa> Howdy
08:04:20 <dmj`> Is there a library that uses generics to derive functions that test the cases of the constructors in a sum type
08:04:35 <dmj`> data StopLight = Red | Green | Yellow deriving (Generic)
08:05:14 <merijn> dmj`: Does QuickCheck's arbitrary have a Generic instance, maybe?
08:05:18 <statusfailed> dmj`: like "isRed :: StopLight -> Bool" ?
08:05:24 <dmj`> isRed <#> isGreen <#> isYellow :: StopLight -> Bool = getSumCases (Proxy @ StopLight)
08:06:11 <dmj`> merijn: last I checked it didn't had to write my own for that
08:06:15 <statusfailed> dmj`: that looks a lot like servant handlers, I wonder if you could do it their way?
08:06:33 <statusfailed> I don't think it's exactly equivalent to what yo're asking though
08:06:38 <dmj`> merijn: this case is conditionally showing some content on a large sum type. Manually writing out the boilerplate isn't ideal
08:06:54 <dmj`> statusfailed: exactly, was sure someone has already done this though
08:07:00 <dmj`> but couldn't find it
08:07:27 <statusfailed> I think the servant difference is that they don't actually use a sum type though, ,right?
08:08:50 <cocreature> very often you are better off trying to solve your problem some other way. this reeks of boolean blindness
08:09:20 <cocreature> e.g. you end up with things like "map fromJust . filter isJust" instead of "catMaybes"
08:09:40 * shapr puts on his boolean blinders
08:09:52 <dmj`> statusfailed: yea, servant doesn't assume an ADT already exists. It uses a type to reify value level functions inside of a recursive tuple
08:10:18 <dmj`> generics can't really do codegen, it can only inspect what already exists
08:10:40 <cocreature> and for the cases where it actually does make sense, something like lens’ prisms are a more general version of this
08:11:06 <cocreature> in fact generic-lens should give you prisms that you can use for this
08:11:24 <dmj`> cocreature: ah, that's a great idea
08:11:59 <dmj`> cocreature: the specific scenario is I have a navigation page, and based on the constructor in the sum type, I'd like to show its content, but hide all the others
08:12:16 <statusfailed> dmj`: is this for miso?
08:12:36 <dmj`> cocreature: like, it's specifcally to put on the "is-active" class. So the other constructors have to exist
08:12:42 <dmj`> statusfailed: it's for an application built with miso yes
08:12:50 <statusfailed> cool :-)
08:12:56 <dmj`> statusfailed: :) 
08:13:13 <statusfailed> miso is the bomb
08:13:52 <dmj`> statusfailed: thanks for the kind words :)
08:14:32 <statusfailed> thanks for the hard work!
08:15:43 <dmj`> statusfailed: np :) 
08:19:20 <jhaj> I have a return value of [Int] and would liek to discard it and return IO () - what is the simplest way to do this?
08:19:30 <dminuoso> jhaj: `pure ()`
08:19:34 <dminuoso> jhaj: or `void`
08:19:36 <dminuoso> :t void
08:19:37 <lambdabot> Functor f => f a -> f ()
08:19:51 <jhaj> thanks! 
08:21:07 <mreh> https://hackage.haskell.org/package/void-0.6.1/docs/Data-Void.html
08:21:13 <mreh> what the...
08:21:16 <_bo> Is foldl or foldr the same thing as javascript array.reduce()?
08:21:35 <dminuoso> :t foldl
08:21:36 <lambdabot> Foldable t => (b -> a -> b) -> b -> t a -> b
08:21:38 <dminuoso> :t foldr
08:21:39 <lambdabot> Foldable t => (a -> b -> b) -> b -> t a -> b
08:21:51 <dminuoso> _bo: Yes and no.
08:21:54 <cocreature> jhaj: note that often you can avoid producing the list in the first place, e.g., use mapM_ instead of mapM
08:22:04 <_bo> dminuoso, thanks
08:22:07 <cocreature> js reduce is probably the equivalent of foldl'
08:22:18 <jhaj> cocreature ah dang - I totally forgot about those! Thanks
08:22:20 <cocreature> foldl is a mistake and foldr tends to be far less useful in a strict language
08:22:26 <dminuoso> foldlM is the equivalent.
08:22:42 <_bo> :t foldlM
08:22:43 <lambdabot> (Monad m, Foldable t) => (b -> a -> m b) -> b -> t a -> m b
08:23:12 <dminuoso> _bo: The reason is that in JS you can have effects in reduce.
08:23:57 <dminuoso> [1,2,3].reduce((a, x) => { launchMissiles(); return a + x; }, 0)
08:24:09 <mreh> that's a lot of missiles
08:24:58 <_bo> Thanks everyone, will keep on reading, seems there are differences
08:26:37 <dminuoso> _bo: I personally like to think of `foldl` for lists to be a mechanical transformation.
08:26:49 <dminuoso> (or equivalently of foldl'/foldr)
08:26:58 <_bo> Mechanical?
08:27:13 <dminuoso> _bo: https://wiki.haskell.org/wikiupload/3/3e/Right-fold-transformation.png
08:27:25 <dminuoso> That is for lists `foldl/foldl'` just swap out (:) for a function.
08:27:42 <dminuoso> Well. For foldr sorry!
08:27:52 <dminuoso> https://wiki.haskell.org/wikiupload/5/5a/Left-fold-transformation.png
08:51:30 <coldpress> lquit
09:03:27 * hackage b9 0.5.52 - A tool and library for building virtual machine images.  http://hackage.haskell.org/package/b9-0.5.52 (SvenHeyll)
09:09:19 <alphaz> hi
09:09:31 <alphaz> could someone help me with the turtle library?
09:09:42 <alphaz> i want to interact with a ghci process from my code
09:10:04 --- mode: ChanServ set +o glguy
09:10:04 <alphaz> so i used `inshell "ghci" stdin >>= echo` to get started
09:10:04 --- mode: glguy set -fo glguy
09:10:12 <alphaz> which works pretty well
09:10:54 <alphaz> but i can't seem to use State with Shell monad
09:11:16 <alphaz> i want to group the stream output with some condition
09:11:57 * hackage web-inv-route 0.1.2.2 - Composable, reversible, efficient web routing using invertible invariants and bijections  http://hackage.haskell.org/package/web-inv-route-0.1.2.2 (DylanSimon)
09:12:58 --- mode: ChanServ set +o glguy
09:12:58 --- mode: glguy set -jo glguy
09:33:35 <iqubic> is it possible to get a variable that is equivalent to the mathematical constant e in haskell?
09:34:13 <tdammers> depends on what definition of "equivalent" you want
09:34:40 <tdammers> e is irrational, so you can't represent it exactly with the usual data types
09:35:27 <tdammers> it is possible however to implement a symbolic representation, and operators that can deal with it for a subset of possible mathematical operations
09:35:53 <iqubic> tdammers: I want the best possible approximation of e that I can get.
09:35:57 <tdammers> I don't remember the details, but there is a clever encoding that allows you to perform exact calculations on some irrational numbers, including e and π
09:36:34 <tdammers> the best possible would amount to implementing one of those algorithms that calculate an arbitrary number of digits of e, and filling all the available RAM with them
09:36:57 <iqubic> I want some value such that `ln e == 1` is true. Or close enough to it anyways.
09:37:32 <tdammers> let e = exp 1 in ln e :: Double
09:37:34 <tdammers> > let e = exp 1 in ln e :: Double
09:37:36 <lambdabot>  error:
09:37:36 <lambdabot>      • Variable not in scope: ln :: Double -> Double
09:37:37 <lambdabot>      • Perhaps you meant one of these:
09:37:47 <tdammers> > let e = exp 1 in log e :: Double
09:37:49 <lambdabot>  1.0
09:37:57 <tdammers> there you go
09:38:01 <iqubic> What does log do?
09:38:05 <tdammers> log is ln
09:38:08 <iqubic> Ah.
09:38:16 <iqubic> > exp 1
09:38:18 <lambdabot>  2.718281828459045
09:38:19 <tdammers> the relevant part is e = exp 1
09:38:34 <iqubic> Shouldn't that be 2.8...?
09:38:42 <tdammers> no
09:38:47 <iqubic> Why not?
09:38:58 <iqubic> Isn't e = 2.8...?
09:39:04 <tdammers> no, it's not
09:39:08 <tdammers> https://en.wikipedia.org/wiki/E_(mathematical_constant)
09:39:10 <iqubic> Right...
09:39:47 <wroathe> Is there a way to define a constant for use in pattern matching characters? Like if I wanted to do something like: #define SEP '~' and then later foo (SEP:cs) = ...?
09:52:20 <Boarders> I think this should be an illegal instance of MonadWriter: https://gist.github.com/Boarders/ed33faa0a276fbe8070e5c884ecb2ba0
09:52:22 <Boarders> is that correct?
09:52:37 <Boarders> I am not sure what the laws are exactly though and couldn't quickly find them
09:52:56 <fresheyeball> hey out there
09:53:26 <wroathe> Does MonadWriter have laws? Or is it just Monad that has laws?
09:54:15 <Boarders> I have no idea
09:55:32 <lordcirth_> fresheyeball, hi
09:56:25 <fresheyeball> I have a problem, where code is not compiling because the simplier runs out of ticks
09:56:49 <fresheyeball> the module is called Parsers and does mostly configurator stuff
09:57:03 <fresheyeball> how can I debug this? what could be eating the simplifier?
09:57:16 <lordcirth_> Do you have a log you can pastebin?
09:57:34 <lordcirth_> (I don't know enough to help, but logs are good)
09:57:47 <fresheyeball> https://dpaste.de/f29z
10:00:57 <wroathe> fresheyeball: What about the code you're trying to compile?
10:01:01 <wroathe> fresheyeball: Can you paste that?
10:01:06 <wroathe> @where
10:01:07 <lambdabot>  @where <key>, return element associated with key
10:01:10 <wroathe> @where paste
10:01:10 <lambdabot> https://gist.github.com
10:02:28 <fresheyeball> https://dpaste.de/rUb2
10:05:29 <fresheyeball> oh I am on ghc 8.4.3
10:09:43 <mniip> is it okay to repeatedly call Data.Text.tail on a string?
10:10:23 <mniip> ah, they are aliased, ok
10:39:59 <fresheyeball> wroathe: any ideas
10:48:25 <michalrus> Hey, how can I let a QC property fail for a small % of cases?
10:48:39 <michalrus> `cover` is close, but it’s not that.
10:49:49 <michalrus> Hmm, looking at [1], it doesn’t seem one can do that… [1] http://hackage.haskell.org/package/QuickCheck-2.10.1/docs/Test-QuickCheck-Test.html#t:Result
10:56:58 * hackage rattletrap 6.2.0 - Parse and generate Rocket League replays.  http://hackage.haskell.org/package/rattletrap-6.2.0 (fozworth)
10:59:35 <PrimHelios> How long should shakespeare take to build? It's been building for 45 minutes now.
11:04:13 <reallymemorable> Just starting out. Super basic question that I can't seem to google correctly.  Is it possible to assign a file path to a variable?
11:04:51 <klntsky> Is it possible to define a generalized `uncons` using some combination of Foldable/Unfoldable/Traversable/*WithIndex/etc. ?
11:05:09 <klntsky> :t uncons
11:05:10 <lambdabot> [a] -> Maybe (a, [a])
11:05:23 <koala_man> reallymemorable: for all practical purposes, yes
11:06:19 <reallymemorable> path = '/Path/to/file.txt'
11:06:21 <reallymemorable> like that?
11:06:40 <reallymemorable> I have been doing ETL with Python but i need to learn Haskell in general so im starting down the path of using Haskell for ETL
11:07:01 <reallymemorable> I will be doing things like reading files, altering delimiters, saving as new formats
11:07:16 <amalloy> reallymemorable: strings are delimited by ""
11:07:40 <amalloy> 'x' is a Char; "x" is a String
11:07:46 <amalloy> and 'xyz' is illegal
11:09:13 <klntsky> Oh, and I forgot to say that it should be O(1) for lists. I am quite sure it easy to come up with a basic solution using TraversableWithIndex, however, it'll be O(n), because there is no way to stop traversing the list inside the monad AND return the rest of the list after getting the first element.
11:09:40 <koala_man> reallymemorable: if you do that (with double quotes) in the top level of a file, you get a constant global variable of that value you can use anywhere
11:13:49 <reallymemorable> thanks guys!
11:15:01 <reallymemorable> do people do ETL with funcational language?
11:15:11 <reallymemorable> is this really dumb to try?
11:15:42 <koala_man> sounds like an excellent use case
11:15:52 <reallymemorable> ok cool lol
11:19:09 <jle`> Profpatsch: it can't be anaM because it returns t, not f t. the return type is fixed as the t
11:20:06 <jle`> so no choice of type variables will ever give you f t
11:22:08 <johnw> what is ETL?
11:22:39 <[exa]> IMO the 3 phases of data gathering
11:23:26 <mniip> is there a function in the time package that's analogous to clock_gettime(CLOCK_MONOTONIC) ?
11:23:42 <mniip> i.e not linked to any particular time system but measures intervals accurately
11:23:51 <monochrom> I think no.
11:24:03 <neosimsi1> can somebody help with cabal new-style? After I install libraries with `cabal new-install --lib fsnotify` any successive `cabal new-install` can't resolve any dependencies.
11:24:25 <mniip> monochrom, Sad.
11:24:56 <monochrom> Yeah new-install simply doesn't use previous new-install --lib stuff.
11:25:12 <monochrom> I think I heard that it will be supported in the future but not now.
11:25:28 * hackage persistent 2.9.1 - Type-safe, multi-backend data serialization.  http://hackage.haskell.org/package/persistent-2.9.1 (psibi)
11:25:34 <MarcelineVQ> mniip: there's the clock package, dunno if it's still current
11:26:21 <monochrom> Then again this one may be another problem, because if you do "cabal new-install foo" and foo depends on fsnotify and fsnotify is on hackage, worst comes to worst it will just do redundant work, not fail.
11:26:54 <Profpatsch> lol, ETL leads to curious Wikipedia entries: https://en.wikipedia.org/wiki/Data_mart
11:27:13 <neosimsi1> So, is there anything I can do except removing ~/.ghc or remove lines from ~/.ghc/*/environment/default?
11:28:15 <monochrom> That may make no difference actually.
11:29:02 <neosimsi1> The differece is, that I can call cabal new-install again.
11:29:14 <monochrom> OK, so problem solved?
11:29:28 <neosimsi1> Not really...
11:29:42 <Ucenna> had a functional programming question rather than a Haskell one. if I have an immutable object, that has a width and a height attribute. is it bad to have a getter that returns those values? technically I'd be accessing the parent scope and data that wasn't passed to the function. but I'm otherwise still referential transparent and pure.
11:29:43 <monochrom> OK, so no difference.
11:30:14 <Ucenna> I think I'm over thinking this, I just don't want to stray from the function mindset. 
11:30:24 <neosimsi1> The main problem is that I installed xmonad using `cabal new install`. Then to configure xmonad it compiles ~/.xmonad/xmonad.hs whichs needs the module Xmonad
11:30:25 <Ucenna> *functional
11:30:46 <neosimsi1> Ok, yeah no difference :)
11:30:48 <koala_man> Ucenna:  is this different from Haskell's record syntax which auto-generates getters?
11:31:30 <neosimsi1> so in oder to use xmonad I need to call `cabal new-install --lib xmonad` which breaks future calls of cabal.
11:32:04 <Ucenna> well I'm actually coding in JS, so I don't know. but an example method would be say this.getArea(){return this.height*this.weight}
11:33:43 <neosimsi1> I wonder what's the purpose of --lib then.
11:34:06 <monochrom> It is just so ghci can see the stuff.
11:34:39 <monochrom> I think I would stick to v1-install for xmonad.  Not that I actually use xmonad.
11:36:17 <neosimsi1> ok, another stupid question then: Is it "safe" to use v1- and v2- installation simultaneously.
11:36:37 <monochrom> Yes. They don't see each other.
11:36:50 <neosimsi1> Ok, thank you very much.
11:43:27 * hackage lapack-carray 0.0.2.1 - Auto-generated interface to Fortran LAPACK via CArrays  http://hackage.haskell.org/package/lapack-carray-0.0.2.1 (HenningThielemann)
12:01:09 <bsima> "This package indirectly depends on multiple versions of the same package. This is very likely to cause a compile failure."
12:01:20 <bsima> how do I solve this on nixos? 
12:01:39 <bsima> I've tried 'dontCheck' and 'doJailbreak' but i get the same error each time
12:04:25 <dmwit> Is that a nix error or a cabal error?
12:04:36 <bsima> it's a cabal error
12:04:56 <dmwit> Okay. Then I doubt anything you can do with nix itself will help overmuch.
12:05:12 <dmwit> You can add a --constraint that selects a specific version and find out why cabal thinks having two versions is a good idea.
12:05:41 <bsima> how can I find out which package/version is causing the problem?
12:05:54 <dmwit> (Then again I haven't used nix much so I could be wrong about whether you can fix it nix-side. But you'll probably have to figure out the fix cabal-side before you can translate that to a nix-side fix anyway, so.)
12:06:11 <bsima> yeah, i'm thinkging the same
12:06:31 <dmwit> Um. The usual tricks are --verbose or --dry-run.
12:06:37 <dmwit> I admit I would have expected the error itself to say.
12:07:19 <bsima> cabal spits out a bunch of "package X requires Y" but it's not helpful
12:07:36 <bsima> there are 90 of those statements
12:07:40 <MarcelineVQ> what are you typing when you invoke cabal?
12:07:53 <bsima> well i'm using nix, so nix-build
12:08:26 <dmwit> Could you paste the exact error online and send us a link, please?
12:08:34 <bsima> my default.nix uses 'developPackage' which uses 'callCabal2nix' which should just call teh defaults
12:08:38 <bsima> dmwit: yeah one sec
12:12:39 <bsima> dmwit: https://gist.github.com/bsima/dbc641aa3cc608faa5f7c33b191f84f1#shell-output
12:16:02 <bsima> another weird thing is that `nix-shell` with that same setup returns "bash: /nix/store/...ghc-8.4.4-with-packages: Is a directory"
12:16:16 <bsima> it doesn't drop me into a shell, just fails
12:20:37 <tomsen> hey, i ran into a wall on my fp journey. can i form a tree out of different ADTs which all implement a treeItem class with a "children" fcn, which returns a list of other ADTs, which themselves all implement tree etc. im having trouble with the type of the children method. children :: a -> [?]. it makes sense in dynamic languages, but how would you do it with haskell types?
12:22:18 <mniip> tomsen, class HasChildren a where children :: a -> [AChildrenHaver];  data AChildrenHaver = forall a. HasChildren a => AChildrenHaver a
12:23:46 <tomsen> uuuh, i totally ignored the forall syntax till this day without realizing. thank you mniip, i'll dig my head into it!
12:28:45 * sm too.. tomsen let us know if you find the offical forall doc
12:30:18 <tomsen> Buzzword seems to be existential quantification, at least this is what ghc wants as language feature thingy. im trying handson first, but here is a link that came up https://en.wikibooks.org/wiki/Haskell/Existentially_quantified_types
12:38:10 <dmwit> bsima: What? But that error message is incredibly helpful.
12:38:54 <dmwit> bsima: It groups together dependencies which occur with different versions, and lists the variant versions directly.
12:39:46 <dmwit> e.g. the first few lines of the "This package indirectly depends..." stuff say it wants two hashes of aeson-1.3.1.1, namely 2HlXu... and 2z5BD...
12:40:03 <dmwit> The next few are similar for attoparsec, then http-api-data, etc.
12:40:10 <bsima> dmwit: yeah, i guess i'm not sure what to do with this information
12:41:33 <dmwit> One way forward is what I said before: add a --constraint choosing one of the versions and see what goes wrong. That will tell you why cabal thinks it's a good idea to do this weird thing.
12:42:11 <bsima> ok
12:42:47 <sm> tomsen: thanks
12:49:21 <mniip> is there a variant of Chan that swallows duplicate values?
12:50:16 <dmwit> I don't think so.
12:50:24 <dmwit> Are you thinking, like, adjacent dupes, or dupes forever?
12:50:48 <dmwit> Unix's uniq or Haskell's nub?
12:51:26 <mniip> neither
12:51:44 <mniip> when pushing an element into the queue, don't push it if it's currently in the queue
12:54:03 <doyougnu> mniip: so you basically want to track values that have been through the queue already? Couldn't you create a wrapper around a queue to do that?
12:54:17 <doyougnu> or are there too many distinct possible values in the domain?
12:54:53 <mniip> the domain is Word64
12:55:05 <mniip> and no, not "been through the queue already"
12:55:10 <mniip> that would be haskell's nub
12:55:24 <mniip> rather so that you can't push an element that is currently in the queue
12:55:52 <NoidedSuper> You could probably have a `TVar` of items currently on the queue (stored in a set or something) and a `TQueue` for the actual queue 
12:56:01 <NoidedSuper> and write wrappers that update both accordingly 
12:56:05 <doyougnu> ^^
12:56:23 <NoidedSuper> And you could use IntSet since you're storing ints so it will theoretically be super-duper-fast
12:56:49 <mniip> hmm
12:56:59 <mniip> that sounds like a plan
13:01:49 <mniip> hmm, STM *is* required in this case
13:02:13 <NoidedSuper> Yeah, otherwise you get sync issues. You could technically do this with an MVar but that'd be harder for no real benefit
13:06:33 <Guest33573> Hi all
13:06:50 <Guest33573> Am I in haskell irc?
13:06:55 <Guest33573> Is someone there?
13:07:00 <NoidedSuper> You are.
13:07:25 <mniip> NoidedSuper, I don't think one can do this with just MVars
13:07:32 <POGtastic> % [5 | True]
13:07:33 <yahb> POGtastic: [5]
13:07:45 <POGtastic> ^ why does this work if True isn't a list?
13:08:06 <NoidedSuper> Beacuse it interprets the thing as a condition I would assume
13:08:20 <NoidedSuper> and you can do it with MVars if you have one MVar that has a datatype with the queue and the set in it
13:08:29 <NoidedSuper> and then take the MVar and update both things before putting it back every time
13:08:50 <NoidedSuper> mniip ^
13:09:33 <mniip> NoidedSuper, problem is you need to propagate updates
13:09:48 <mniip> if a reading thread takes the mvar and discovers the queue empty
13:09:51 <mniip> what happens next?
13:10:11 <some_newbie> Hey, I'm reading the "Learn you a Haskell for great good" and I don't understand how "[3,2,1] > [2,10,100]" evaluates to True... Thanks for the help
13:10:23 <NoidedSuper> Immediatley put it back, I guess? But yeah then you'd have to wait 
13:10:31 <mniip> busywait? no good
13:10:55 <mniip> some_newbie, Ord on lists performs lexicographical comparison
13:11:35 <NoidedSuper> So since (3 > 2) it returns true
13:12:06 <mniip> > "banana" > "apple"
13:12:08 <lambdabot>  True
13:12:12 <mniip> same principle
13:12:38 <some_newbie> So it only checks the first? I don't understand what lexicographical means...
13:12:46 <mniip> think dictionary order
13:12:58 <mniip> if the first letters are equal, check the second, and so on
13:13:11 <NoidedSuper> It means: "Compare the first two elements. If one is greater than the other, that list is greater. If they are the same, check the second in the same way. Then so on."
13:13:29 <mniip> if all letters are equal but one of the words is shorter, the shorther one comes first (is "less")
13:13:41 <NoidedSuper> Which is also a dictionary convention IIRC?
13:14:19 <some_newbie> Thanks a lot for clarifying, I understand now!
13:16:37 <NoidedSuper> Anytime some_newbie
13:17:28 <Guest33573> Wow
13:18:00 <Guest33573> How do you get your name in the chat?
13:18:33 <shapr> Guest33573: try: /nick developer
13:19:05 <Welkin> try /nick shaprr
13:19:14 <Guest33573> I tried irssi -c chat.freenode.net -n myname -w mypassword
13:19:26 <shapr> Welkin: you're mean
13:19:27 <Welkin> irssi has a config file that you file in
13:19:28 <Guest33573> because I am a newbiew
13:19:34 <shapr> Guest33573: we welcome newbies!
13:19:35 <Guest33573> :q
13:19:40 <shapr> Guest33573: you're here to learn Haskell, yeah?
13:19:43 <tomsen> now we know your password harrrr
13:19:44 <Welkin> shapr: what would you do if we had a shaprr, shaprrr, shaprrr and so on?
13:20:00 <shapr> I'd be confused.
13:20:13 <Guest33573> I've learned haskell
13:20:19 <Welkin> the whole thing?
13:20:21 <Guest33573> from the haskell book
13:20:22 <shapr> oh cool, what's your favorite feature?
13:20:32 <Welkin> what haskell book
13:20:34 <Welkin> there are tons
13:20:42 <Guest33573> the haskellbook
13:20:46 <shapr> haskellbook.com ?
13:20:46 <Welkin> which one?
13:20:51 <NoidedSuper> http://haskellbook.com/
13:20:53 <Guest33573> yes
13:20:55 <Guest33573> the best
13:20:55 <NoidedSuper> Almost certainly this
13:20:57 <Welkin> that's not the name of the book
13:21:05 <Guest33573> book I've ever read
13:21:13 <lordcirth_> Haskell Programming from first principles
13:21:19 <Welkin> yes, I know lordcirth_ 
13:21:34 <lordcirth_> It's a good book. I'm on Chapter 10
13:21:36 <Guest33573> I will rejoin the chat but with a name
13:21:41 <shapr> sometimes I think Welkin enjoys being difficult
13:21:41 <Guest33573> How can I quit it?
13:21:44 <Welkin> the best book on programming I have ever read is Land of Lisp
13:21:50 <Welkin> it has lots of comics
13:21:51 <tomsen> you dont have to rejoin Guest33573
13:21:54 <shapr> Guest33573: probably with /quit
13:21:57 <lordcirth_> Guest33573, you can /quit. but you can just do /nick name
13:22:00 <Welkin> and jokes about haskell being nazi germany
13:22:02 <tomsen> just type /nick <somename>
13:22:15 <zerocoding> yes
13:22:18 <shapr> zerocoding: yay!
13:22:42 <zerocoding> I'm here
13:22:45 <zerocoding> Yess
13:23:00 <shapr> zerocoding: Cool! Got any questions about Haskell?
13:23:01 <zerocoding> I am very happy to join community
13:23:25 <zerocoding> Yes, only about emacs haskell
13:23:28 <zerocoding> mode
13:23:31 <Welkin> got any questions about Mercury?
13:23:40 <shapr> Welkin: take it to the mercury channel :-P
13:23:44 <Welkin> is there even a channel for that?
13:23:48 <zerocoding> I have to go sleep
13:23:52 <shapr> also synchronization through unification is confusing
13:23:56 <zerocoding> I will join yours guys tmr
13:24:02 <shapr> zerocoding: nice to meet you! come back soon!
13:24:06 <NoidedSuper> Happy to have you zerocoding
13:24:08 <Welkin> shapr: have you used mercury?
13:24:13 <shapr> Welkin: I'll never tell
13:24:21 <zerocoding> see you soon guys
13:25:12 <NoidedSuper> I actually have a conceptual problem I think I need to ask for help on
13:25:55 <NoidedSuper> But it's complex enough that I can't really describe it in a little paragraph
13:26:01 <NoidedSuper> maybe I should pastebin this
13:26:09 <Welkin> do an interpretive dance
13:28:27 * hackage dejafu 1.11.0.5 - A library for unit-testing concurrent programs.  http://hackage.haskell.org/package/dejafu-1.11.0.5 (barrucadu)
13:32:48 <geekosaur> sometimes the best venue for that kind of thing is stackoverflow
13:33:49 <NoidedSuper> https://pastebin.com/sQGxRQ4f here's the pastebin but while writing it up I think I figured out what to do so uh
13:34:00 <NoidedSuper> (what I figured out is in said patebin ofc)
13:37:40 <chorhizo> Hey, I've created a simple tictactoe game that I'm going to expand into a networked version, but was wondering if anyone had some style advice for the haskell? https://gist.github.com/PotterJam/93e4b6caf492d018360655961980114d
13:39:36 <lordcirth_> chorhizo, I'm still learning Haskell, but I recall that when I wanted to make a grid-based game, someone here suggested using a Map with (x, y) keys instead of a [[x]]
13:39:45 <lordcirth_> I have no idea if that's good advice or not
13:40:54 <chorhizo> lordcirth_: that is interesting, I wonder why that would be beneficial if wanting fast access over a vector
13:41:09 <lordcirth_> I don't think performance was the point
13:41:30 <Solonarv> note that plain old lists aren't exactly fast either
13:41:46 <Solonarv> For this case I would recommend Array
13:42:00 <chorhizo> yeah  I'm not focusing on speed so much since it's just 3x3
13:42:25 <c_wraith> tic-tac-toe is a funny game, in that there are only like 500k legal game states, and that's not exploiting symmetries to cut it down.
13:42:56 <c_wraith> so you can do things with it that don't make sense in most games, like keeping the full game tree in memory at all times.
13:43:55 <chorhizo> wait 
13:44:01 <chorhizo> that's cool, I might have to try that
13:44:23 <Solonarv> 20k, actually (3^9)
13:44:39 <Solonarv> even fewer *legal* states
13:44:57 <c_wraith> that's board layouts.
13:45:15 <lordcirth_> Yeah, like all X's isn't legal because the game would be over already
13:45:26 <lordcirth_> And doesn't make sense either
13:45:29 <c_wraith> game states including history is bigger
13:46:06 <toovs> i'm getting an "unable to commit 1048576 bytes of memory" memory even though i have twice that amount. any particular reason for this?
13:46:07 <Solonarv> oh that's what you meant by game states
13:48:06 <lordcirth_> toovs, I had that happen today while compiling
13:48:13 <lordcirth_> I ran it again and it worked?
13:48:17 <c_wraith> apparently ~550k game histories total, according to experiments I've done. :)
13:48:43 <c_wraith> https://gist.github.com/chowells79/dbc7c6df2af8f1e00aa6a037c1cfc3d8  fun with lenses and comonads!
13:48:50 <toovs> it's not during compilation, it's a running program
13:50:10 <chorhizo> c_wraith: that looks pretty over my head
13:50:35 <infinisil> The first thing I'd do with a tic-tac-toe game is get rid of all the hardcoded logic and make it work for arbitrary sizes
13:50:37 <c_wraith> chorhizo, it's not meant to be the best way to do it anyway
13:50:51 <infinisil> (just to make the code cleaner)
13:50:55 <c_wraith> chorhizo, just an experiment in using some tools I wanted to get better with
13:53:36 <infinisil> Oh, that reminds me, some time ago I played an online tic-tac-toe game with an infinite grid, and the winning condition was 5 in a row. Turns out to be a very challenging game. I might try to implement this in Haskell at some point, has a bit of everything in it
13:53:51 <lordcirth_> An infinite grid? That's interesting
13:54:04 <monochrom> Hey maybe I should make that my assignment!
13:54:05 <lordcirth_> If both players were perfect, wouldn't it go on forever?
13:54:29 <shapr> sounds like it to me
13:54:36 <infinisil> Could be
13:55:11 <c_wraith> the only 3 outcomes with perfect play would be X wins, O wins, and goes on forever
13:55:18 <c_wraith> hopefully it's the third!
13:58:28 <infinisil> c_wraith: Those are in fact also the only possible outcomes with non-perfect play
14:00:02 <c_wraith> infinisil, right. perfect just makes it so that it's the same one every time.
14:01:09 <infinisil> This simple infinite 5-win tic tac toe is such a simple game, but you can build so much on it, probably a great learning project in any language
14:01:21 <infinisil> Can also code a bot to play against
14:02:45 <c_wraith> OK. randomly fill some portion of squares such that neither side can use them, limit the jump distance. (ie, add hidden information that impacts the flow of the game.)
14:04:09 <zachk> starting to sound a bit like, iirc , conway's angels vs demons or something
14:05:08 <lordcirth_> infinisil, it would certainly be good for learning to wrangle infinities
14:08:29 <infinisil> zachk: Yeah! I just watched a video about that recently, but I can't find it anymore
14:10:02 <infinisil> And if you wanna go crazy, you could make a 3d version lol
14:11:49 <hololeap> i'm looking for a little help understanding why i can't give composeMetaN a type signature and still have it compile: http://dpaste.com/217N78A
14:15:27 <koz_> hololeap: What's :~>?
14:15:55 <Welkin> Natural transformation
14:16:03 <Welkin> maybe
14:16:04 <hololeap> koz_: (f :~> g) is a natural transformation from f to g. it's from the naturalt-transformation library
14:16:23 <koz_> hololeap: OK. And what error do you get if you try and give composeMetaN the type sig GHCi suggests?
14:16:24 <Welkin> it's an ugly operator
14:16:40 <Welkin> servant go rid of it
14:16:43 <Welkin> got*
14:16:48 <koz_> Welkin: I guess it's _not_ read 'eff colon-tilde-arrow gee'?
14:17:44 <hololeap> http://dpaste.com/1P0GEKB
14:18:05 <Welkin> dpaste?
14:18:07 <Welkin> what's that now?
14:18:18 <Welkin> is there a paste site for every letter of the alphabet?
14:18:29 <hololeap> dpaste is awesome, tyvm
14:18:57 <Welkin> urls now support unicode
14:19:05 <Welkin> so you can use chinese characters, or arabic, or whatever
14:19:39 <hololeap> 💩paste.com>
14:19:41 <hololeap> ?
14:19:53 <Welkin> see if it's registered
14:19:58 <koz_> hololeap: I was thinking '干paste.org'.
14:20:02 <Welkin> or maybe that was only for tlds
14:22:57 <hololeap> it wouldn't look so spiffy in punycode anyway
14:23:05 <Welkin> see where you can register paste.中文网
14:23:11 <hololeap> any ideas on my question? :p
14:23:40 <Welkin> haha
14:23:43 <Welkin> 你好.net is available
14:24:53 <Welkin> I should register a chinese-only domain
14:24:54 <Welkin> or japanese
14:25:07 <Welkin> so then noone can type it out and I can't tell them how to spell it
14:25:22 <Welkin> they just have to click a link, which works fine, and is how most people navigate the web anyway
14:26:43 <zachk> when regular people want to go to a url these days, they seem to paste it into a search engine, or type it into a search engine, or so I have noticed
14:26:57 <zachk> they don't seem to know what an address bar is
14:27:13 <Welkin> they need a web portal!
14:27:45 <Welkin> to be fair though, the location input is the same as the search input on most browsers today
14:27:59 <infinisil> *types google.com into the google search bar*
14:28:09 <Welkin> so if you don't type a valid url, it will perform a search in the search engine specified by your configuration
14:28:42 <Welkin> Joe Armstrong had some intersting things to say about DNS
14:28:52 <Welkin> mostly that it's broken, which it is, and it breaks the web, which is does
14:28:56 <Welkin> it has security problems too
14:29:11 <Welkin> he proposes that all resources are accessed using a hash instead that never changes
14:29:26 <Welkin> and a decentralized lookup from hash->ip address
14:31:40 <c_wraith> that fails at the original value of dns - being something a human can remember
14:32:18 <Welkin> no one needs to remember an address these days though
14:32:23 <Welkin> we use links and bookmarks
14:32:32 <Welkin> the browser remembers
14:32:45 <Welkin> you find it by searching in a search engine, or someone sends you a link
14:32:54 <zachk> how do you advertise your website then in media other then on a computer?
14:33:43 <heebo> hello my .stack folder is 18G , is there a way i can save space, e.g. can i just delete older ghc that i no longer use
14:34:20 <Welkin> this isn't 1999 anymore
14:34:28 <Welkin> no one make television commercials for their dot com
14:36:17 <koz_> Welkin: Isn't that what IPFS basically does?
14:36:25 <geekosaur> not sure what idyllic planet welkin lives on, but a hash wouldn't have worked so well for the url my doctor gave me yesterday evening
14:36:27 * hackage b9 0.5.60 - A tool and library for building virtual machine images.  http://hackage.haskell.org/package/b9-0.5.60 (SvenHeyll)
14:38:04 <jle`> heebo: if you don't mind a little rebuilding, you can just delete .stack
14:38:14 <jle`> in the future stack will rebuild whatever it needs
14:40:02 <Welkin> geekosaur: then it should have been a QR code or something your phone can read
14:40:06 <Welkin> or you can use ocr to grab the url
14:40:42 <geekosaur> full privilege mode enabled, I see
14:41:54 <Welkin> I'm just exploring the possibilities in the case where there is no DNS
14:42:06 <Welkin> it;s an interesting thought experiment
14:42:20 <Welkin> things are the way they are because that's how they happened to play out, not because it is the best solution
14:43:06 <Welkin> everyone has a phone these days, even dirt-poor farmers in developing countries
14:43:13 <Welkin> technology is dirt cheap
14:44:27 <Welkin> even better, send a text messag or email to your phone
14:44:34 <Welkin> click the link
14:53:38 <NoidedSuper> I'm still really struggling with this game coordinator problem
14:53:48 <NoidedSuper> The solution I thought I had doesn't work ;-;
14:56:28 <NoidedSuper> I mean, my initial ugly implementation does work
14:56:45 <NoidedSuper> Maybe it's best for me to just do other parts of the program and then come back to the problem 
15:06:23 <gentauro> is there a function like `interact` that instead of beeing `(String -> String) -> IO ()` is `(String -> IO ()) -> IO ()`?
15:07:14 <gentauro> Hoogle doesn't help much ... https://hoogle.haskell.org/?hoogle=(String+->+IO+())+->+IO+()
15:07:51 <gentauro> What I want to do is just read `stdin` and then work on the data while I do some side-effects
15:07:58 <NoidedSuper> forever . (getLine >>=)
15:08:25 <NoidedSuper> Or just (getLine >>=)
15:08:25 <Welkin> some effects on the side? or do you mean you want to perform effects?
15:08:39 <Welkin> a side-effect is an unintended effect (a bug)
15:10:08 <amalloy> probably you mean (getContents >>=)?
15:12:28 * hackage glue-core 0.6 - Make better services and clients.  http://hackage.haskell.org/package/glue-core-0.6 (seanparsons)
15:13:28 * hackage glue-example 0.6, glue-ekg 0.6, glue-common 0.6 (seanparsons)
15:14:03 <gentauro> NoidedSuper: and amalloy thx, it was `getContents`
15:14:05 <gentauro> :-)
15:14:57 <gentauro> http://hackage.haskell.org/package/base-4.12.0.0/docs/Prelude.html#v:getContents
15:15:30 <gentauro> `getContents` is equivalent to `hGetContents stdin` which is what I was looking for
15:18:23 <NoidedSuper> Is there a function that's the opposite of "isn't" from lens? IE, it checks if the prism matches?
15:18:33 <glguy> There's is, and has
15:18:49 <glguy> You can find is in Control.Lens.Extras, but has is there by default
15:21:06 <sm> omg, it really is called isn't
15:21:12 * sm mind blown
15:21:57 <infinisil> That might be a brand new constellation of words: "There's is, and has"
15:22:08 <sm> why are there IsNot and Isn't types ?
15:23:36 <rotaerk> I'd prefer an Ain't type
15:32:55 <infinisil> Yesn't
16:40:39 <mniip> what is the right way to use System.Process to create a process with 2>&1 ?
16:41:04 <mniip> do I createPipe, feed the write end to createProcess via UseHandle, and then ignore the Maybe Handles it gives me?
16:50:03 <hpc> mniip: i think your question generalizes to "how do i merge two handles"
16:50:22 <hpc> which... still not sure of a good answer, but maybe that helps you find it yourself?
16:50:23 <mniip> not.. really?
16:50:35 <mniip> if I have two Handle's it's already wrong
16:50:42 <mniip> they need to be the same file descriptor in the OS
16:50:52 <hpc> ah
16:51:07 <mniip> so that writes to stderr/out get ordered correctly
16:53:30 <hpc> hmm, the UseHandle way seems most likely to work
16:54:22 <hpc> a hacky way is to actually write the command as shell script
16:54:57 <hpc> and somehow deal with the quoting yourself, if the command takes arbitrary arguments
16:57:02 <geekosaur> yeh, createPipe + UseHandle the write end for both std_out and std_err is how you do this
17:01:31 <tomsen> the "news" section on haskell.org is down for me since weeks, does it work for you? btw, do you know what tech they used to make this news aggregation page?
17:22:26 <mniip> hmm, discord-haskell doesn't build with base-4.9.00
17:58:18 <mniip> "Note that Handles provided for std_in, std_out, or std_err via the UseHandle constructor will be closed by calling this function."
17:58:25 <mniip> for the parent but not for the child apparently?
18:32:30 <iqubic`> hello folks
18:33:37 <zachk> hi iqubic 
19:48:54 <suzu> anybody else always needing to stare down GHC.Generics again every time you use it to remember wtf everything is
19:50:58 <orzo> I have a weird bug wrt GHC.Event.  I'm using registerTimeout to handle timed-out network operations but at some point the timeout events stop fireing.  I've verified that thread-death of the thread that registered the timer does not cause this in a simple isolated demo program.  Any ideas on what could stop the timeout events from firing?
19:52:00 <orzo> It occurs when some newish code starts up and makes tcp connections.  It's probably where the problem is, but I can't see how i could even interfere with timeout events if i wanted to
19:56:18 <suzu> perhaps other threads are doing something unkind to the runtime?
19:57:46 <orzo> well, it does not spin the cpu and a lot of stuff goes on working normally, including query/responses that happen not to time out
20:01:28 <cjh`> I am trying to write code to safely convert between different Numeric types and I am having trouble using minBound and maxBound https://ideone.com/irJkPT
20:04:19 <blinkhard> you need a Bounded instance 
20:04:26 <noxecane_> does anyone have an idea how to convert composite-opaleye Db recs to another Haskell level records
20:04:47 <jackdk> what do you mean by 'composite-opaleye'?
20:04:57 <orzo> cjh`: you need forall b. if you are trying to use scoped type variables to refer to the same b type in the body of your function
20:05:43 <orzo> because i is Integer, it is infering Integer for minBound and maxBound
20:05:46 <orzo> clearly not what you intend
20:06:26 <noxecane_> jackdk: https://hackage.haskell.org/package/composite-opaleye...A library that integrates opaleye with vinyl
20:06:26 <orzo> This doesn't compile does it?
20:06:52 <orzo> o nm me, i see errors below
20:07:05 <jackdk> noxecane_ oh, I haven't used that lib sorry
20:07:13 <noxecane_> from the little understanding I have from vinyl(little), conversion(so to speak) is done using something like rcast 
20:08:34 <noxecane_> I have been looking for alternative libraries on top of opaleye(I need its query capabilities) that are on HACKAGE. It's the only one I have seen
20:15:03 <korzq> hello haskell! I am trying to learn haskell but i am stuck at the concept of lambda. What can i do to get pass it?
20:15:38 <glguy> What material are you using to learn Haskell?
20:16:48 <korzq> a book called haskell programming, from first principles 
20:16:54 <korzq> the one with the purple cover
20:17:13 <blinkhard> what is confusing to you about lambdas?
20:17:29 <korzq> everything except the concept of functions
20:17:51 <korzq> i might read another book called learn you a haskell for great good
20:18:39 <cjh`> blinkhard: added a Bounded constraint is insufficient, that was one of the things I tried earlier.
20:19:56 <cjh`> orzo: oh awesome, do I need an extension to add an explicit forall?
20:20:34 <cjh`> orzo: that makes some sense given that the type signature isn't necessarily tied to the definition
20:21:33 <korzq> im guessing 𝜆𝑥.𝑥 means f(x)=x ?
20:21:43 <korzq> input x output x ?
20:21:53 <iqubic> Yes.
20:21:53 <cjh`> korzq: yes, that is just the identity function.
20:21:58 <korzq> ah
20:24:23 <cjh`> orzo: ahh ScopedTypeVariables extension seems enough, it then allows https://ideone.com/kLmLFc which works - thanks
20:24:37 <cjh`> blinkhard: so I do need a Bounded instance, but without the `forall` I never encounter that error
20:25:00 <cjh`> blinkhard: that was also confusing me, as added Bounded or not did not make a difference and I didn't think Num or Integral where within Bounded
20:38:43 <Welkin> that's odd
20:39:14 <Welkin> it's unfortunate that there are no client libraries for newer dataabses like ArangoDB in Haskell
20:39:26 <Welkin> there aren't any in erlang either
20:39:51 <Welkin> by contrast, there are a bajillion SQL libraries in Haskell, amny of these really incredible
20:40:04 <Welkin> but the nosql dataabses don't get as much love
20:40:16 <Welkin> how about some more good non-sql client libraries
20:40:55 <Welkin> the riak bindings look outstanding though
20:41:26 <Welkin> it's not like arangodb is that new either. It's been around for 8 years
20:41:55 <maerwald> I tried mongodb in haskell, wasn't very pleasant
20:42:16 <Welkin> mongo is the worst database of any you could try because it was made by amateurs
20:42:39 <Welkin> try a good nosql database like riak or couchdb
20:43:07 <blinkhard> cjh`, I don't think you need ScopedTypeVariables because the compiler can infer the type
20:43:24 <Welkin> with such amazing sql libraries in haskell, I'd expect great ones for other databases too
20:43:25 <blinkhard> try, with the same constraints, e.g. let x = fromIntegral i in if x < minBound || x > maxBound then 0 else x
20:44:07 <Welkin> mongo has plenty of libraries and plugins to other libraries on hackage
20:44:28 <Welkin> I really want to use arangodb, but the only clients I can find are in java/python/javascript/go
20:44:43 <Welkin> Go has 3 libraries! python has 3! java has 3 or 4
20:44:43 <maerwald> well, quantity usually doesn't mean much
20:44:45 <Welkin> why not add haskell
20:44:54 <maerwald> w
20:44:56 <maerwald> Write one
20:45:02 <Welkin> I have no idea how to
20:45:14 <MarcelineVQ> if you really think it'd be that great you'd be helping other by writing a lib
20:45:15 <Welkin> and don't want to spend a lot of time on it, unless I can write it in a day
20:46:09 <Welkin> I took a look at an erlang library for rethinkdb and the connection function looked daunting. Some kind of TCP handshake dance was going on for dozens of lines
20:46:11 <doyougnu> it would also be a great intro to writing a good dsl in haskell. The domain and combinator design for the database dsls are pretty simple
20:46:16 <cjh`> blinkhard: that is already converting using fromIntegral, which will silently give a bad result if it cannot fit in the destintation type
20:46:33 <cjh`> blinkhard: so I want to check the maxBound for the type itself before using fromIntegral
20:46:36 <Welkin> I don't know how you typically connect to databases through a socket, if you need to do any special handshake or whatnot
20:46:43 <cjh`> blinkhard: the other option would be to convert to and then back and check for equality
20:46:58 * hackage b9 0.5.61 - A tool and library for building virtual machine images.  http://hackage.haskell.org/package/b9-0.5.61 (SvenHeyll)
20:47:29 <Welkin> there wouldn't be any need to write a DSL since arangodb has a query language very similar to sql
20:47:45 <Welkin> you can just send a string to the database with this "raw" query
20:48:20 <Welkin> I think it's from a german company
20:49:06 <doyougnu> yea those types of "use a string for query" bother me because you want a dsl that converts programs in the embedded language to a query string. Then you could type check it
20:49:30 <doyougnu> one time I got half way done with a DSEL for neo4j in clojure but never finished it
20:49:54 <Welkin> of course it has a way to make queries without writing the query yourself (at least using the lcient libraries)
20:50:00 <maerwald> Why do people want to write DSLs instead of libraries
20:50:00 <Welkin> but the query language is really nice
20:50:05 <Welkin> much easier to read than sql
20:50:37 <Welkin> it's a graph database with a document and k/v store all in one
20:50:50 <Welkin> I quite like the query language
20:52:28 <Welkin> and there are no clients yet for the newly re-birthed FoundationDB, Apple's next generation cassandra competitor https://en.wikipedia.org/wiki/FoundationDB
20:52:34 <Welkin> just 9 months ago
20:52:41 <Welkin> no clients in Haskell*
20:53:39 <Welkin> this new class of nosql stores seems to be multi-model (graph, document, and k/v together, with object storage too)
20:54:00 <Welkin> and comes with a sql-like query language as an option
20:55:32 <Welkin> oh, it has a C client library at least (and java, python, ruby), but I wonder if they all wrap the C one or not
20:56:33 <Welkin> writing a client would be very daunting considering the size of the api
20:58:04 <Welkin> haha, yeah they all wrap the C bindings
20:58:19 <doyougnu> lol of course
20:59:01 <doyougnu> ah I realize that may sound passive aggressive...not my intention btw :)
21:00:50 <Welkin> over 4k lines of python just to wrap it
21:01:52 <blinkhard> cjh`, okay, was just making a point about the type errors rather than the underlying enterprise.  good luck!
21:05:11 <Welkin> lambdaman: you're not Phil Wadler!
21:06:43 <lambdaman> @Welkin No, I'm from a galaxy, far far away
21:06:43 <lambdabot> Unknown command, try @list
21:31:58 <cjh`> blinkhard: ahh that makes sense, this is a case where the type errors sadly don't capture the entire story - thanks for your time though :)
21:49:46 <dminuoso> "cabal: Cannot test the package modgud-0.1.0.0 because none of the components are available to build: the test suite 'modgud-test' is not available because the solver did not find a plan that included the test suites"
21:49:54 <dminuoso> What is a "plan" in cabals eyes?
21:52:13 <Welkin> a plan for which packages to install
21:52:34 <Welkin> that are within the constraints
21:54:20 <cocreature> dminuoso: yeah usually that means that your test suite has a constraint that cannot be satisfied
21:54:46 <cocreature> dminuoso: e.g. yesterday I had a test suite with hspec < 2.7 and I passed --constraint "hspec >= 2.7" to cabal so things failed
21:55:07 <dminuoso> cocreature: Yeah apparently I specified a build-depends package that does not exist. Im curious as to why I did not get a more detailed diagnostic what constrained it cailed to satisfy.
21:56:13 <jackdk> I too wish it put out more information than that
21:56:36 <cocreature> yeah the error message is terrible tbh
21:56:40 <dminuoso> I mean apparently passing `--enable-tests` along side is enough to get the desired diagnostics, but that seems like a bit of voodoo.
21:56:57 <dminuoso> (Especially since Im running `cabal new-test --enable-tests`)
22:00:18 <dminuoso> https://github.com/haskell/cabal/issues/3923
22:00:21 <dminuoso> Heh this seems to be it.
23:26:12 <dminuoso> :t orElse
23:26:13 <lambdabot> error: Variable not in scope: orElse
23:26:22 <dminuoso> % import GHC.Conc.Sync
23:26:23 <yahb> dminuoso: 
23:26:26 <dminuoso> % :t orElse
23:26:26 <yahb> dminuoso: STM a -> STM a -> STM a
23:26:29 <dminuoso> This is amazing! :)
