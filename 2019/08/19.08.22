00:59:51 <cinimod> I am running the tests on a package. If I do `stack test ...` then the tests run but if I do `cabal new-test ...` then I get  error while loading shared libraries: libgfortran.so.4: cannot open shared object file: No such file or directory
00:59:58 <cinimod> Does anyone have any tips on how to fix cabal?
01:00:05 <cinimod> Maybe I should raise a ticket on the cabal repo
01:02:54 <dminuoso> cinimod: Which package?
01:05:56 <merijn> gfortran looks like gcc
01:06:16 <merijn> cinimod: This doesn't look like a cabal issue, this looks like an environment misconfiguration issue
01:06:41 <cinimod> merijn: but stack seems to be more lenient?
01:07:24 <cinimod> dminuoso: lapack but I needed to patch it and its dependencies to get it to even build
01:07:25 <merijn> cinimod: I don't know how/if stack manipulates where it looks for libraries, so I can't comment on what it's doing
01:07:45 <cinimod> merijn: any tips on how to debug this?
01:08:03 <merijn> cinimod: Step one would be "rerun cabal command with -v3"
01:08:18 <cinimod> I tried adding extra-libs: gfortran but that didn't seem to help
01:08:33 <cinimod> merijn: okey dokey
01:08:33 <merijn> And figured out where it's looking for libgfortran.so.4, second step would be finding where libgfortran.so.4 is
01:08:59 <merijn> cinimod: extra-libs just tells cabal/ghc it needs to link with gfortran, it does not tell it how/where to find libgfortran
01:09:36 <merijn> cinimod: Try "pkgconfig-depends: gfortran" instead?
01:09:45 <merijn> cinimod: That tells cabal to try and find gfortran via pkgconfig
01:10:09 <merijn> (assuming you have pkg-config and you installed gfortran so that pkg-config knows about it)
01:10:32 <cinimod> pkgconfig-depends was not working for me - that's why I had to patch the package and its dependencies
01:10:39 <dminuoso> But really, run `cabal` with `-v3` and show the output.
01:10:47 <cinimod> I just did
01:10:56 <cinimod> Hang on - I will post the output
01:12:43 <cinimod> https://gist.github.com/idontgetoutmuch/489c269dc40f0a59c5f86b22758ab75e
01:16:48 <merijn> cinimod: You said you had to patch things because pkgconfig-depends wasn't working, so what did you patch/change?
01:17:05 <merijn> Because, tbh, that sounds like fixing the wrong problem
01:17:27 <merijn> The solution to pkgconfig-depends isn't finding my dependency is "tell pkg-config where said dependency is" :)
01:19:24 <cinimod> merijn: I have to go now - sorry - I will unpatch the sources and put back in the pkg-config stuff and report the error but that may be tomorrow or later today
01:19:33 <dminuoso> It seems like you have a transitive runtime dependency on fortran via blas
01:19:44 <cinimod> dminuoso: I concur
01:20:04 <cinimod> Hence my feeble attempt at adding gfortran everywhere
01:20:20 * cinimod really really has to go
01:49:12 * hackage cabal-fmt 0.1.1 - Format .cabal files  https://hackage.haskell.org/package/cabal-fmt-0.1.1 (phadej)
02:14:43 * hackage sparse-tensor 0.2.1 - typesafe tensor algebra library  https://hackage.haskell.org/package/sparse-tensor-0.2.1 (nalex)
02:32:57 <dminuoso> I have some code that interacts with my database. I now want to add some code that cleans the database completely for the purpose of tests - what would be some reasonable techniques to provide some threshold that this does not end up in production code?
02:35:04 <boxscape> I would assume the correct way to handle this is to make it part of the tests, or of the test setup
02:35:48 <dminuoso> boxscape: Well that would expose library internals to the testsuite. I'd prefer my testsuite not know anything about the database internals.
02:37:35 <dminuoso> Id rather ship the code inside my library and have some ⌜#ifdef COMPILED_WITH_TESTS; foo = dangerousThing; #elif; foo = emitLogEntries >> pure (); #endif⌝
02:41:13 * hackage sequence-formats 1.3.2 - A package with basic parsing utilities for several Bioinformatic data formats.  https://hackage.haskell.org/package/sequence-formats-1.3.2 (stephan_schiffels)
02:41:35 <__monty__> dminuoso: So no .Internal modules?
02:43:13 <dminuoso> __monty__: Ah interesting, how would that work?
02:43:32 <dminuoso> __monty__: How can I make an internal module from my library accessible to my test suite?
02:43:55 <merijn> dminuoso: He meant just exporting the module and telling people "don't touch!"
02:44:05 <merijn> dminuoso: There's a better solution if you can live with some boilerplate
02:44:34 <merijn> dminuoso: Recent-ish cabal supports internal libraries (not to be confused with cabal 3.0 which supports multiple external libraries)
02:44:53 <dminuoso> Is 2.4.1.0 new enough?
02:45:24 <merijn> dminuoso: So you can put your code into an internal library exporting all the internal bits, then reexport the safe interface publicaly via the public library (i.e. public library and tests both depend on internal library)
02:45:52 <merijn> dminuoso: I'm talking about CABAL spec versions, not cabal-install versions :) But cabal-install 2.4 should support all that stuff
02:46:29 <merijn> dminuoso: Apparently internal library stanza exists since 2.0: https://cabal.readthedocs.io/en/latest/file-format-changelog.html#cabal-version-2-0
02:56:41 <Axman6> There currently isn't any way to reference a specific function in the type system is there? say I had foo :: Int -> String, and I wanted to be able to talk about that function in the type system, applyFunc :: Function 'foo -> (Int -> String)
02:58:01 <dminuoso> Axman6: well thats what singletons is, isnt it?
02:58:11 <Axman6> I guess so
02:58:39 <Axman6> I hadn't thought about it like that, but I guess it is
02:59:47 <dminuoso> Axman6: Can you elaborate a bit more on what you are trying to do?
03:00:11 <dminuoso> merijn: Cheers, I think Ill rather go with an internal module and calling the identifier dontBeStupidAndUseThisInProduction or something. :)
03:07:31 <jgt> dminuoso: https://github.com/facebook/react/blob/80bff5397bf854750dbe7c286f61654ea58938c5/src/umd/ReactUMDEntry.js
03:07:57 <dminuoso> jgt: Ah Im familiar with those :)
03:35:32 <dansimon> Hi guys, I'm working on a code to print out the command arguments (https://pastebin.com/bzGt9Gn6). How do I split up the words with spaces " " and end with a "\n"..? Any ideas?
03:36:12 <dansimon> PutStrLn wount work since I need it all in one line
03:44:15 <boxscape> :t intercalate
03:44:19 <lambdabot> [a] -> [[a]] -> [a]
03:44:49 <boxscape> > intercalate " " ["arg0", "arg1", "arg2"] -- this might help dansimon
03:44:52 <lambdabot>  "arg0 arg1 arg2"
03:45:56 <boxscape> > intersperse ' ' ["arg0", "arg1", "arg2"] -- or alternatively
03:45:59 <lambdabot>  error:
03:45:59 <lambdabot>      • Couldn't match expected type ‘Char’ with actual type ‘[Char]’
03:45:59 <lambdabot>      • In the expression: "arg0"
03:46:02 <boxscape> or not
03:46:25 <dansimon> boxscape: thanks! however, I dont know beforehand how many arguments there will be...
03:46:37 <boxscape> you don't need to
03:47:30 <boxscape> just use `intercalate " " args`
03:48:30 <lavalike> :t words
03:48:33 <lambdabot> String -> [String]
03:48:39 <winny> :t intersperse
03:48:42 <lambdabot> a -> [a] -> [a]
03:48:44 <boxscape> oh, good point
03:48:47 <lavalike> this breaks on whitespace
03:49:19 <boxscape> you can use unwords instead of `intercalate " "`
03:49:34 <boxscape> > intercalate " " ["arg0", "arg1", "arg2"] == unwords ["arg0", "arg1", "arg2"]
03:49:34 <dansimon> thanks guys :)
03:49:38 <lambdabot>  True
03:50:01 <lavalike> words/unwords/lines/unlines are nice ones
04:01:13 <jgt> :t unwords
04:01:16 <lambdabot> [String] -> String
04:01:24 <jgt> :t intercalate
04:01:27 <lambdabot> [a] -> [[a]] -> [a]
04:01:54 <boxscape> :t intercalate :: String -> _ -> _
04:01:56 <lambdabot> error:
04:01:56 <lambdabot>     • Found type wildcard ‘_’ standing for ‘[[Char]]’
04:01:56 <lambdabot>       To use the inferred type, enable PartialTypeSignatures
04:02:00 <jgt> hlint suggested I make the same refactoring recently, but I couldn't since I had a list of Text values, not String values
04:02:06 <boxscape> no partial type signatures :(
04:02:31 <boxscape> @unwords
04:02:31 <lambdabot> Unknown command, try @list
04:02:37 <boxscape> @hoogle unwords
04:02:37 <lambdabot> Prelude unwords :: [String] -> String
04:02:37 <lambdabot> Data.List unwords :: [String] -> String
04:02:37 <lambdabot> Data.String unwords :: [String] -> String
04:02:44 <jgt> I could do a `map pack`, but then it's swings and roundabouts isn't it
04:02:51 <boxscape> there is an unwords in text as well jgt
04:03:03 <boxscape> https://hackage.haskell.org/package/text-1.2.4.0/docs/Data-Text.html#v:unwords
04:04:02 <jgt> boxscape: oh right; I guess I just didn't have it in scope
04:04:27 <jgt> I would have expected ClassyPrelude to expose the Text version
04:05:03 <boxscape> hm, yeah
04:05:41 <absence> i often find myself inventing useless variable names in case expressions, e.g. SomeConstructor a -> process a. is it somehow possible to do this pointfree?
04:06:13 <boxscape> presumably if anything though ClassyPrelude would expose this https://hackage.haskell.org/package/mono-traversable-1.0.12.0/docs/Data-Sequences.html#v:unwords
04:07:32 <jgt> boxscape: oh, that's curious
04:07:38 <jgt> I'm not sure then why I couldn't use unwords there
04:07:43 <jgt> I'll have to revisit it
04:08:13 <boxscape> (jgt: note that I linked the mono-traversable version if that wasn't obvious, this isn't actually exported in ClassyPrelude)
04:08:36 <lavalike> :t Data.Text.unwords
04:08:38 <lambdabot> [Data.Text.Internal.Text] -> Data.Text.Internal.Text
04:08:40 <lavalike> this?
04:09:07 <jgt> boxscape: yes, but ClassyPrelude usually re-exports a bunch of mono-traversable stuff
04:09:10 <jgt> unless I'm deeply confused
04:09:11 <boxscape> yeah
04:09:34 <boxscape> lavalike that's the text version, yeah. The one I linked works for both Text and String
04:09:41 <lyxia> absence: you could get something of that flavor with an eliminator function that encapsulates pattern-matching
04:10:11 <lavalike> fancy
04:12:00 <lyxia> absence: https://github.com/Lysxia/generic-recursion-schemes/blob/master/test/prop.hs#L34 and that eliminator can be derived generically...
04:47:48 <dminuoso> I have a dependency onto a package ldap-client, which is provided via git repository in cabal.project. I have the situation that when I add "--enable-tests" to my cabal v2-build, that it rebuilds ldap-client. Why might that be?
04:50:51 <merijn> dminuoso: Because --enable-test is global and rebuild ldap-client with tests
04:51:11 <merijn> dminuoso: The exact desirable UI/implementation has been a point of discussion for a while
04:51:29 <merijn> This pitfall applies to more commandline
04:51:36 <merijn> +flags
04:52:10 <merijn> dminuoso: You can just create a cabal.project.local and use a "package foo" section to only enable tests for your own package
04:52:26 <dminuoso> merijn: This might be a weird question, but why do I have to specify enable-tests at all? It seems fairly redundant if I already issue v2-test
04:52:50 <dminuoso> Ah let me check out the manual how to do that
04:53:31 <dminuoso> Or perhaps the question should be, what exactly does it mean to "enable a test" 
04:53:33 <merijn> dminuoso: You don't have to, I think?
04:53:41 <merijn> Pretty sure v2-test should automatically enable them?
04:54:02 <dminuoso> merijn: cabal cant even find a build plan if --enable-tests is not passed.
04:54:09 <dminuoso> At least in my case.
04:54:25 <merijn> dminuoso: Sounds like you messed up :p
04:54:30 <dminuoso> "the test suite 'freyja-test' is not available because the solver did not find a plan that included the test suites"
04:54:37 <merijn> What's the build failure without --enable-tests?
04:54:51 <dminuoso> merijn: https://gist.github.com/dminuoso/5df0e7b9dd5196707e0dba20a65a4ed1
04:55:21 <merijn> What's freyja's cabal file?
04:56:13 <merijn> and cabal.project
04:56:19 <dminuoso> merijn: Turns out this is a feature.
04:56:21 <dminuoso> merijn: https://github.com/haskell/cabal/issues/5079
04:56:28 <merijn> Because "cabal v2-test" runs fine in 2 different projects I tried
05:04:11 <dminuoso> merijn: Im curious why, after having read the comments in the issue 2 times, I dont quite understand the what or why.
05:04:58 <merijn> dminuoso: Basically, it seems that it only builds test that can be solved without changing the build plan you build the library with
05:05:33 <merijn> dminuoso: If it did change the buildplan it would rebuild the entire library with the new build plan and then build the tests
05:05:40 <dminuoso> merijn: Given that we generally depend on quickcheck/smallcheck/tasty/hunit/whatever in our tests, but generally not in our production code.. what's the use?
05:05:58 <merijn> dminuoso: Extra dependencies don't conflict
05:06:09 <merijn> dminuoso: For example, my projects I just tried work fine
05:06:27 <dminuoso> Are you saying that the dependencies somehow cause a version change in some of my dependencies?
05:06:28 <merijn> dminuoso: It seems like the extra packages of your tests are forcing different version bounds for the dependencies of your library
05:06:32 <dminuoso> Mmm
05:06:54 <dminuoso> merijn: I see, so it can ammend but not change the original build plan
05:06:57 <merijn> dminuoso: So the reason it doesn't recompute is because alternating v2-test and v2-build would result in continuously rebuilding
05:07:02 <dminuoso> Right
05:07:20 <merijn> dminuoso: So the suggested solution is to set "tests: True" which lead it to solve for "lib + tests" when building the library
05:07:31 <dminuoso> merijn: So presumably its an optimization for the case of "no conflict if using the same build plan"?
05:07:57 <dminuoso> merijn: Is that for .cabal?
05:08:02 <merijn> dminuoso: Because then you will always build the core lib with a plan that doesn't conflict with the tests
05:08:10 <merijn> dminuoso: No, cabal.project or cabal.project.local
05:08:21 <merijn> dminuoso: Basically the same as always passing --enable-tests
05:09:02 <dminuoso> cabal ux can be... odd at times.
05:11:14 <merijn> dminuoso: It's more that "people haven't figured out what the UX should be" as evidenced by that issue
05:12:00 <merijn> dminuoso: Like, sometimes cabal flags should apply to EVERYTHING, sometimes only to local packages, and sometimes only to this one specific package. How do you decide what/when?
05:12:09 <merijn> And what should the UX look like?
05:12:16 <olligobber> jle`, thanks for your help, it worked!
05:12:24 <olligobber> jle`++
05:12:28 <dminuoso> merijn: From a naive users perspective, if I emit "cabal v2-test" - I want my tests to compile.
05:12:42 <dminuoso> It's way beyond reasonable to *sometimes* have to add "--enable-tests"
05:13:03 <dminuoso> I mean imagine my project worked fine, and then I added some dependency to my tests, that required me to emit "--enable-tests". That kind of regression makes no sense
05:13:14 <dminuoso> And its not documented
05:13:37 <dminuoso> Is there a reasonable way for me to have figured out "why this happened" or "what I need to do to solve my problem" by cabals output alone?
05:13:49 <dminuoso> even "cabal v2-test -v3" didnt give me anything at all
05:14:36 <merijn> dminuoso: That issue says the error will be amended before 3.0 release
05:14:56 <merijn> dminuoso: So "no", because you're still using guinea pig versions of v2-build :p
05:14:57 <dminuoso> merijn: (And honestly I still dont fully comprehend the issue)
05:15:31 <dminuoso> merijn: By guinea pig you mean everybody is. Since cabal discourages people from using old-, it's a bit weird to have these kinds of ux bugs still lurking around 
05:15:37 <merijn> dminuoso: If you run "cabal v2-build; ...; cabal v2-test; ...; cabal v2-build" should it rebuild all your code 3 times?
05:15:48 <merijn> dminuoso: Well, how do you find these quirks without users?
05:16:08 <dminuoso> Fair enough
05:16:28 <dminuoso> merijn: Is there a way to figure out which conflict produces this issue?\
05:16:42 <merijn> Compare build plans, I suppose?
05:20:34 <ashesham`> what's the best way to compose a bunch of `Either SomeErr a` in a do block? I'd like to process the next statement only if the previous was a right. I understand this can be done with bind using either onFail onOk x >>= either onFail' onOk' >>= ... etc. 
05:20:56 <ashesham`> I wonder if I'm missing something obvious here. 
05:21:31 <dminuoso> ashesham`: Yup! You can use do-notation to make this a bit less noisy.
05:21:50 <dminuoso> ashesham`: Depending on the structure of your code traverse/traverse_/forM_/forM are also options.
05:21:55 <merijn> ashesham`: Either's monad already stops on the first Left
05:22:20 <merijn> ashesham`: So your usage of either seems redundant?
05:22:53 <merijn> > Right 5 >>= (\x -> Left (x+1) >>= (\y -> Right y))
05:22:57 <lambdabot>  Left 6
05:23:04 <ashesham`> merijn, dminuoso: basically, I have a bunch of functions that each return `m (Either SomeErr a)` and I'd like the do block
05:23:09 <dminuoso> merijn: Bingo! servant-quickcheck was the culprit. Thanks, cabal-plan helped.
05:23:19 <dminuoso> ashesham`: ExceptT :)
05:23:21 <merijn> ashesham`: That looks like ExceptT :)
05:23:47 <ashesham`> yeah; so throwError on Left? 
05:24:06 <merijn> ashesham`: No...Left is already equivalent to throwError
05:24:33 <ashesham`> `func a >>= either throwError return` of some sort? 
05:24:35 <dminuoso> merijn: Note that throwError is mtl interface, the immediate way to emit an error is throwE :)
05:24:41 <dminuoso> Err ashesham` ^-
05:24:47 <merijn> ashesham`: No, just "func a >>= return"
05:25:39 <ashesham`> merijn: func :: a -> m (Either SomeErr b), 
05:26:03 <merijn> ashesham`: ExceptT (func a) >>= foo
05:26:13 <dminuoso> ashesham`: https://gist.github.com/dminuoso/46795f0c2480166b515cdac2854ee401
05:27:12 <ashesham`> dminuoso: ah brilliant. 
05:28:01 <dminuoso> ashesham`: here ⌜f :: IO (Either String a)⌝ for some choice of a, of course. :)
05:30:57 <ashesham`> dminuoso: yeah, got that, thanks a ton (+ merijn)
05:33:16 <dminuoso> merijn: Actually that wasnt it. The only difference between the build plans appears to be that there's an additional package with extra dependencies. This is quite weird.
05:34:31 <dminuoso> Ah wait. I suppose it might cause a difference in some remote transitive dependency.
05:34:47 <dminuoso> I wish if cabal would tell me this on the conflict. :)
05:53:23 <M2en[m]> Is there a language design reason for the exclusion of a Boolean negation operator?
05:54:24 <Taneb> M2en[m]: all operators take two arguments (with one unfortunate exception)
05:55:02 <Taneb> And "not" works perfectly adequately as a function
05:56:08 <dminuoso> Overall I find "not" to be more readable than the common ! (which itself, in prefix position, has a completely different meaning in Haskell)
05:57:07 <M2en[m]> Taneb: What is the unfortunate exception?
05:57:16 <willmcpherson2> not
05:57:22 <ggole> Negation
05:57:30 <willmcpherson2> it's the only unary boolean operator
05:57:44 <willmcpherson2> unless there's an identity boolean operator...
05:57:46 <dminuoso> M2en[m]: (-)
05:57:53 <willmcpherson2> i guess that would be !!
05:57:57 <willmcpherson2> lol
05:58:09 <M2en[m]> That's right!
06:05:13 * hackage scheduler 1.4.2 - Work stealing scheduler.  https://hackage.haskell.org/package/scheduler-1.4.2 (lehins)
06:06:31 <mycroftiv> speaking of booleans, i came up with a way to build integers that express set membership relation of boolean functions over the integers: intofcant :: Integer -> Cantor -> Integer
06:06:31 <mycroftiv> intofcant n c = foldl (+) 0 ( zipWith (*) (map (v c) [0..n]) (map (2 ^) [0..n]))
06:07:27 <mycroftiv> where define something like 'primebits' where primebits n is 1 if n is prime, 0 if it isnt, then do intofcant 20 primebits
06:08:16 <EvanR> somehow i think using primes is worse than using just the place value
06:08:28 <mycroftiv> and get back 665772 :: Integer which represents the answer to question of whether or not each of the first 20 integers is prime 
06:08:58 <EvanR> determining the nth prime is a problem past a certain point
06:09:20 <mycroftiv> the idea is that our integer encodes the answer to the questions: is 1 prime? is 2 prime? is 3 prime? - and yeah im just picking a well known series for the conceptual example
06:10:22 <EvanR> where as if 2^n divides the number, n is a member
06:10:36 <EvanR> to insert, multiply by 2^n
06:11:23 <EvanR> theres probably a nicer implementation of Integer to make this fast, and youre probably looking at something like Set
06:13:06 <boxscape> hm you could almost make a reasonable Num instance of Bool and have - mean not
06:15:03 <EvanR> o my
06:15:16 <boxscape> though I think you can't have + mean or, - mean not, and at the same time have -a be the additive inverse of a
06:15:22 <EvanR> might as well, Num has no official interpretation : )
06:16:00 <boxscape> hmm, the haddock lists a few laws though
06:16:24 <boxscape> it does say the haskell report doesn't specify any
06:17:33 <Guest80400> wait what?
06:18:01 <boxscape> hm?
06:18:07 <EvanR> we have a roman numeral lib... but do we have an egyptian fraction lib
06:18:28 <merijn> EvanR: Hackage's ACME side has given you a calling ;)
06:18:38 <EvanR> is there a sensible Fractional for Bool
06:19:04 <willmcpherson2> oh look we have a dozenal lib
06:20:28 <boxscape> hmm I would have defined it as a newtype of Integer, not of String. Or even Rational.
06:20:51 <boxscape> I mean really you only need it to define alternative show and read instances
06:21:01 <boxscape> the numbers are internally binary anyway
06:21:17 <boxscape> (unless someone uses BCD in haskell I guess)
06:21:50 <EvanR> nah you want to implement rationals as egyptian fractions as well as show them as such
06:22:08 <EvanR> as an egyptian haskeller would do
06:23:15 <EvanR> and have no conversion to Rational available, for added egyptianishness
06:23:50 <Zemyla> If Bool is a Num, then abs = negate = signum = id, fromInteger = odd, (+) = (-) = xor, and (*) = and.
06:25:37 <PotatoRick[m]> hi there, is there any typeclass with generalized "uncons"-ing for lists?
06:25:41 <Zemyla> It's also an Integral. toInteger = toInteger . fromEnum, quotRem a True = (a, False), quotRem a False = error "Division by zero".
06:26:05 <Zemyla> PotatoRick[m]: Control.Lens.Cons.
06:26:11 <willmcpherson2> haskellers really are pointy headed
06:27:03 <boxscape> Zemyla since or is quite often expressed as + I would have chosen that but I suppose the algebraic laws might work better with xor
06:27:55 <Zemyla> They do.
06:28:06 <Zemyla> In fact, it's exactly the field F_2.
06:28:55 <PotatoRick[m]> Zemyla: cool, thanks, i wish there would be a less bigger package than `lens` one, something more atomic
06:31:12 * hackage essence-of-live-coding-quickcheck 0.1.0.1 - General purpose live coding framework - QuickCheck integration  https://hackage.haskell.org/package/essence-of-live-coding-quickcheck-0.1.0.1 (turion)
06:31:15 <yushyin> microlens?
06:44:50 <exarkun> What's the story with https://hackage.haskell.org/package/tasty-discover ?  The gitlab repo is "archived" and I don't see a pointer to any new hosting.  Is it abandoned?  Done and perfect?
06:56:21 <lyxia> microlens lacks prisms
06:56:49 <sebboh> Hello! I am trying to find something old: a haskell-based web application that was used to split expenses (for example among housemates) in an equitable fashion, in that each person's share was commensurate to their income.  The logo was a black and white line drawing (or etching?) of an upside-down table.  As in 'turn the tables'... Can I find it online or in the wayback machine?
07:01:42 * hackage polyparse 1.13 - A variety of alternative parser combinator libraries.  https://hackage.haskell.org/package/polyparse-1.13 (phadej)
07:07:21 <lavalike> sebboh: https://www.housetab.org ?
07:17:13 * hackage bisc 0.2.3.0 - A small tool that clears qutebrowser cookies.  https://hackage.haskell.org/package/bisc-0.2.3.0 (rnhmjoj)
07:17:59 <dminuoso> sebboh: You might want to try the mailing list, if you dont get a response here.
07:36:37 <sebboh> lavalike: that's it! https://web.archive.org/web/20140208175648/http://housetab.org/login The inverted table image has since been removed, but that is indeed the name of the thing.  Thanks!
07:37:35 <dminuoso> https://gist.github.com/dminuoso/3aac6376898aabb39e0d8bc0321a038c does this data type/instance exist somewhere already?
07:42:20 <lavalike> sebboh: cool
08:00:35 <brschkv> anyone up for a discussion about Unit Test (with someone coming from an OO background)?
08:08:20 <lavalike> only if you write unit tests for it
08:12:15 <brschkv> :-)
08:15:25 <brschkv> How do you mock or stub side effect like database queries?
08:15:37 <brschkv> or json outputs?
08:18:56 <monochrom> brschkv: Maybe like this?  http://www.cs.utoronto.ca/~trebla/CSCC24-2019-Summer/a2/
08:24:21 <brschkv> @monochrom I guess so... But let's say I have a method with the following signature: queryDB :: MonadIO m => Connection -> String -> m MyMessage
08:24:21 <lambdabot> Unknown command, try @list
08:24:47 <fendor> brschkv, you can abstract resources with typeclasses. For a unit test, write an implementation of the typeclass that satisfies your mocking. Btu really, it depends on the technology you are using. see for example https://www.fpcomplete.com/blog/2017/06/readert-design-pattern
08:31:52 <exarkun> where do I get a Test.QuickCheck.Property.Testable WaiExpectation instance?
08:32:03 <Madderote> anyone an idea why hlint prefers 'if' over 'case' 
08:32:49 <monochrom> hlint codifies the author's personal preference. Unlink C's lint.
08:33:37 <Madderote> Thx. Will do
08:33:42 <monochrom> But I don't shy away from "if" either.
08:34:16 <Madderote> if is ok, but 'case' IMO is more readable
08:34:23 <merijn> Madderote: hlint is very opinionated and while I think it can be useful for introducing beginners to idioms they maybe unfamiliar with, I would recommend a healthy those of skepticism vs it's recommendations
08:34:53 <merijn> I don't use hlint at all, tbh
08:35:27 <Madderote> @Merijn: I like hlint for some suggestions, but agree it is sometime a bit of a diva
08:35:27 <lambdabot> Unknown command, try @list
08:36:12 <merijn> Madderote: You can configure/disable rules if you don't like them
08:36:39 <monochrom> I don't use hlint either.
08:36:53 <Madderote> Usually only use hlint when building. Tried it in de editor now hence the question. It is quite persistent in liking 'if' over anything ;-) 
08:37:21 <merijn> Personally I avoid if wherever possible
08:37:28 <merijn> I use either guards or case
08:37:50 <Madderote> Yes, me too, so I was curious why I was corrected all the time... 
08:38:33 <Madderote> I know Haskell is not my 'mother tongue' but nonetheless I am free to choose right? 
08:39:10 <monochrom> "1 + (if x>0 then y else z)" this one I would stick to if-then-else and not go out of my way to shoehorn guard or case.
08:39:32 <merijn> monochrom: That's not something I write regularly ;)
08:39:52 <Madderote> monochrom: same here, but you are right about it. 
08:40:02 <monochrom> The time when I use guard is "f x | x>0 = 1+y | otherwise = 1+z" this one of course I would stick to guard.
08:41:33 <merijn> monochrom: If I'm naming expressions anyway I like attaching guards instead of having if on the RHS
08:42:02 <monochrom> But when there are 3 conditions and they're exactly "foo > 0, foo == 0, foo < 0" such as most binary search tree algorithms, I will switch to "case compare foo of".
08:42:57 <jle`> if only there was a LambdaIf
08:42:58 <merijn> monochrom: I'd often do things like "f x = 1 + myValue; where myValue | x > 0 = y; | otherwise = z"
08:43:07 <merijn> jle`: You mean MultiWayIf?
08:43:17 <jle`> half-joking about an analogy to LambdaCase
08:43:20 <jle`> how would you replace:
08:43:22 <jle`> myFunc = \case
08:43:25 <jle`>   False -> blah
08:43:28 <jle`>   True -> something
08:43:37 <jle`> with an if/then/else, without giving a name to a variable?
08:43:41 <merijn> jle`: "bool blah something" :p
08:43:51 <jle`> but then you use layouting
08:43:56 <jle`> if blah/something are multiple lines
08:44:01 <merijn> > bool 'a' 'b' True
08:44:05 <lambdabot>  'b'
08:44:27 <turab> :t bool
08:44:30 <lambdabot> a -> a -> Bool -> a
08:44:36 <monochrom> jle`: For most uses, \case doesn't need to name the param, but \if does.
08:44:38 <hyperisco> I have thought that indentations should be like parentheses, so you could just indent arguments to bool
08:44:39 <jle`> bool (do x; y; z; blahblah; something; goodbye) ..
08:45:05 <merijn> jle`: If things are multi line it doesn't hurt to name them anyway :)
08:45:13 <monochrom> Because I'm writing "x^2 > 10" I have to bind and use "x" there.
08:45:16 <merijn> And then you can use bool with the names
08:51:42 * hackage spectral-clustering 0.3.1.2 - Library for spectral clustering.  https://hackage.haskell.org/package/spectral-clustering-0.3.1.2 (GregorySchwartz)
08:52:22 <Madderote> :merijn/monochrom:, thx for the insights. disabled hlint in IDE though... 
08:52:36 <Madderote> Tends to get a little annoying :D
08:55:13 * hackage spectral-clustering 0.3.1.3 - Library for spectral clustering.  https://hackage.haskell.org/package/spectral-clustering-0.3.1.3 (GregorySchwartz)
08:59:06 <Squarism> anyone know if something interesting is happening with webghc or asterius?
09:00:58 * ski . o O ( "occurse check" )
09:04:37 <turab> Assume I have a value of the following type: Either A (Either B C). What's the cleanest way to print A, B, or C? 
09:04:59 <turab> My first solution was to use ($), but that will also print "Left" and "Right" which is something I don't want
09:05:20 <ski> @type either print (either print print)
09:05:23 <lambdabot> (Show a1, Show a2, Show a3) => Either a1 (Either a2 a3) -> IO ()
09:05:24 <monochrom> I would combine "either" and "print".
09:05:31 <monochrom> Yeah, like that.
09:05:34 <turab> I thought of using (<$>) but I don't think Either's fmap is called recursively
09:05:43 * hackage hierarchical-spectral-clustering 0.4.1.3 - Hierarchical spectral clustering of a graph.  https://hackage.haskell.org/package/hierarchical-spectral-clustering-0.4.1.3 (GregorySchwartz)
09:05:59 <turab> ski: I have that currently.
09:06:38 <ski> > map ((^ 2) <$>) [Left 2,Right 3]
09:06:39 <turab> I was just curious if there is something else? (My mind went straight to generics but that seems to much in this case)
09:06:41 <lambdabot>  [Left 2,Right 9]
09:07:02 <turab> too much*
09:08:30 <ski> i'm not sure what kind of thing you'd prefer instead. perhaps you have something a bit more complex than `Either A (Either B C)'
09:09:54 <turab> Your suggestion is 100% fine, I was just curious if there is something obvious I can't think of :)
09:11:12 <ski> if you're looking for something like "find all `A's,`B's,`C's in a data structure, and print them", then i suppose something like generics could be appropriate
09:11:39 <freeman[w]> does anyone have a working example of a .ghcid file? using the example here does not work: http://neilmitchell.blogspot.com/2017/11/ghcid-with-vs-code.html
09:32:53 <lucy2> @djinn m ([a]) -> (a -> m ([b])) -> m ([b])
09:32:54 <lambdabot> Error: Undefined type []
09:32:58 <lucy2> hm
09:34:29 <c_wraith> djinn can't handle recursive types like [] 
09:35:31 <geekosaur> :exf "m ([a]) -> (a -> m ([b])) -> m ([b])"
09:35:41 <hololeap> is there a way to set default ghc options on the command line (other than aliases, bash scripts, etc)?
09:37:14 <geekosaur> hololeap, not that I'm aware of, beyond RTS options applicable to any GHC-compiled program
09:37:53 <geekosaur> probably for the best given they can aready be hidden on the command line, in cabal files, and in source files (LANGUAGE, OPTIONS_GHC, etc.)
09:39:05 <geekosaur> hm, .ghc-environment files. which I am not convinced are the right approach exactly for above reason
09:39:26 <hololeap> i just want to set -no-keep-hi-files -no-keep-o-files as a default when i'm compiling a one-off .hs file
09:39:42 <hololeap> and maybe -O2
09:40:13 <geekosaur> I broke down and started cabal v2-ifying all my one-offs. so they're not one-offs any more, sigh
09:40:50 <hololeap> i can set -O2 in {-# OPTIONS-GHC ...  but it doesn't work for -no-keep-hi-files -no-keep-o-files
09:40:52 <geekosaur> (wish cabal let me have more than one file per directory. I mean, I already told it which target to use, why does it care there are others in the same directory?)
09:41:34 <sclv> i do think it would be nice to have the equiv of ghc env files for cmd line args that _don't affect build output_
09:41:48 <sclv> like verbosity flags etc
09:41:56 <sclv> since different people have different preferences
09:41:59 <sclv> but i suppose aliases are enough
09:43:21 <boxscape> hololeap do you use the same command for compiling one off files and compiling larger projects?
09:44:07 <hololeap> no, i use cabal for anything larger than a single file. i just like to experiment with single files, and then compile them with ghc directly if i want a better estimation of performance
09:44:26 <boxscape> in that case it seems like using an alias for one-off files doesn't have many downsides
09:44:41 <hololeap> fair enough
09:57:49 <exarkun> shapr: So I might have misunderstood my difficulty, rather than being about quickchecking monadic APIs it is probably about quickchecking WAI APIs
09:58:03 <exarkun> shapr: And I didn't see how hedgehog helps with that at all
09:58:23 <exarkun> shapr: but I did switch from bare hspec to tasty so now I can write quickcheck or hedgehog easily
10:03:20 <exarkun> shapr: so now I have https://github.com/PrivateStorageio/PaymentServer/blob/1.stripe-webhook-endpoint/test/SpecStripe.hs#L62-L67 and I'm thinking if I can turn this alone into a quickcheck or hedgehog thing.
10:09:28 <AWizzArd> monad-logger has log*S macros which allow me to specify a source. The source however is just a Text (type LogSource = Text). How could I make my own variant of this where I need to pass in something like `data MySource = A | B | C`  instead?
10:16:57 <boxscape> I feel like this is kind of a neat way to give you disambiguators between duplicate record fields, especially if were to generate them automatically with template haskell I guess
10:16:59 <boxscape> https://gist.github.com/JakobBruenker/fa3ab3b644a7d7798b8d2b4c6ea14d04
10:17:24 <boxscape> s/between/for
10:18:46 <lyxia> haha
10:35:06 <boxscape> When I get "Record update is ambiguous, and requires a type signature" in something like p {_name = x}, where exactly do I put the type signature?
10:40:40 <bergey> (p { _name = x } :: TypeOfP ) should work.  There are likely other options, but I'd need more context.
10:41:50 <boxscape> that does work. Interesting, I'd have expected that it could be inferred on that level since the function as a whole has a top level signature
10:51:52 <lyxia> the problem is that record disambiguation happens before typechecking
10:52:13 <boxscape> ah, I see
10:53:18 <mawis> Sorry, it seems I'm mentally blocked at the moment. How do I sum up two Maybe Integer to get out a Maybe Integer as the result (Just if both inputs were Just).
10:53:36 <lyxia> liftA2 (+)
10:53:51 <mawis> Oh right ... thank you.
10:53:59 <mawis> I guess it's time to stop working for today ;)
10:54:24 <boxscape> hm does TypeApplication syntax work with binary operators?
10:58:36 <boxscape> I think the answer is no...
11:00:11 <jle`> is...michael peyton jones related to simon peyton jones?
11:01:04 <boxscape> is there any way in which you can have a type application not be the first argument to a function? It doesn't produce a parse error, but I can't quite figure out what to do with the error message.
11:01:26 <boxscape> for example (id 4 @Int) produces "cannot apply expression of type 'a0' to a visible type argument 'Int'"
11:01:53 <jle`> i don't think so
11:02:09 <boxscape> but is ghc trying to do *something* with it, considering it's not a parse error?
11:02:10 <jle`> yeah, i never understood that message either
11:02:13 <boxscape> okay
11:02:33 <lavalike> mawis: also (+) <$> maybeA <*> maybeB :D
11:04:09 <boxscape> huh weirdly enough if I do "test = id" in ghci and try "test @Int 4" I get a similar error message
11:04:18 <boxscape> even though of course id @Int 4 works
11:04:35 <jle`> what if you :t test
11:04:44 <jle`> hm, interesting
11:04:45 <boxscape> a -> a
11:04:52 <boxscape> but if I give it that as explicit type signature it works
11:04:54 <jle`> maybe it only works if you give a type signautre explecitly
11:04:57 <boxscape> yeah
11:05:02 <jle`> signautre
11:05:26 <boxscape> sonds nautical
11:05:34 <c_wraith> oh, yeah. explicit type annotations require an explicit signature. 
11:05:40 <boxscape> okay
11:05:47 <c_wraith> it's a weird design choice. 
11:06:01 <jle`> i suppose it gets around ambiguities in application order
11:06:08 <c_wraith> but it comes from the fact that explicit signatures let you specify the order. 
11:06:09 <jle`> by gets around i mean 'means you don't have to worry about'
11:07:01 <c_wraith> and yes, this means that changing the order of type variables in a forall is a breaking change now. 
11:08:21 <boxscape> if you try to do (id 4 @Int) maybe it thinks you're using type application on the whole expression? 
11:08:36 <jle`> (id 4) @Int might be how it si parsed
11:08:41 <boxscape> yeah
11:08:49 <boxscape> and if you wrap (id 4) in an explicit type signature it works
11:08:53 <jle`> having the normal application precedence rules
11:09:17 <boxscape> oh yeah I guess that's true
11:10:01 <boxscape> (id 4) @Int has (more or less) the same error message as 4 @Int, as well
11:10:21 <hyperisco> Named arguments is underappreciated, I think.
11:10:26 <jle`> 4 @Int would be nice to be legal
11:10:30 <jle`> i believe there is a GHC proposal
11:10:39 <iqubic> > id 4
11:10:42 <lambdabot>  4
11:11:00 <jle`> 4 @Int is nice because of the precedence of application
11:11:09 <jle`> vs. the alternative, (4 :: Int), requiring extra parantheses
11:11:18 <boxscape> or.. (4 :: Num p => p) @Int
11:11:22 <boxscape> (which works)
11:11:26 <jle`> heh
11:13:05 <jle`> the proposal was rejected
11:13:09 <jle`> https://github.com/ghc-proposals/ghc-proposals/pull/129
11:13:11 <boxscape> :(
11:13:21 <c_wraith> you know, some of these signature-based rules also are about dealing with kind issues.
11:13:52 <c_wraith> like... is (4 @Complex) valid? 
11:13:59 <hololeap> what's the easiest/most elegant way to implement something like this given what's in the base libraries?
11:14:02 <hololeap> https://algorithms.tutorialhorizon.com/print-all-combinations-of-subset-of-size-k-from-given-array/
11:14:44 <c_wraith> without a ton of wasted work, specifically? 
11:14:48 * EvanR looks around before getting nerd sniped
11:15:30 <jle`> hololeap: does "the base libraries" mean "the base library"?
11:15:37 <hololeap> i thought of \k -> takeWhile ((==k) . length) . dropWhile ((/=k) . length) . subsequences
11:15:53 <c_wraith> that would qualify as wasting a lot of work. 
11:16:00 <jle`> or does it mean the boot libraries that 'come with' ghc 
11:16:13 <hololeap> jle`: i'm not sure what it's called, but base and the libraries that come bundled with ghc, like mtl, etc
11:16:21 <boxscape> by "coming with" ghc do you mean "coming with" the haskell platform?
11:16:57 <jle`> 'coming with' as in, ghc uses them to build so it's somewhat safe to assume you have them available 
11:17:01 <jle`> transformers, haskeline, containers
11:17:29 <c_wraith> also, is that even correct? does subsequences document an ordering for its output? 
11:17:47 <hololeap> c_wraith: that was the problem i ran into
11:17:48 <jle`> you can probably do something with StateT Int []
11:18:12 <jle`> subsequences as in, filterM (\_ -> [False, True]) ?
11:18:13 <c_wraith> hololeap: use filter instead, to be correct. 
11:18:26 <jle`> > filterM (\_ -> [False, True]) [1,2,3]
11:18:29 <lambdabot>  [[],[3],[2],[2,3],[1],[1,3],[1,2],[1,2,3]]
11:18:51 <DigitalKiwi> jle`: i'm told he's his son
11:19:01 <c_wraith> but that's still turning an O(n `choose` k) problem into an O(n!) problem. 
11:19:37 <jle`> DigitalKiwi: ah, that's nice
11:20:14 <jle`> i think StateT Int [] keeps the spirit of the algoirhtm on the page
11:21:28 <jle`> @let pickMe = StateT $ \i -> if i == 0 then [(i, False)] else [(i, False), (i - 1, True)]
11:21:30 <lambdabot>  .L.hs:365:22: error:
11:21:30 <lambdabot>      • No instance for (Num Bool) arising from the literal ‘0’
11:21:30 <lambdabot>      • In the second argument of ‘(==)’, namely ‘0’
11:22:03 <jle`> @let pickMe = StateT $ \i -> if i == 0 then [(False, i)] else [(False, i), (True, i - 1)]
11:22:08 <lambdabot>  Defined.
11:22:25 <hololeap> :t pickMe
11:22:29 <lambdabot> (Eq a, Num a) => StateT a [] Bool
11:22:33 <jle`> > flip runStateT 2 $ filterM pickMe [1,2,3,4]
11:22:37 <lambdabot>  error:
11:22:37 <lambdabot>      • Couldn't match expected type ‘a -> StateT s m Bool’
11:22:37 <lambdabot>                    with actual type ‘StateT Integer [] Bool’
11:22:50 <jle`> > flip runStateT 2 $ filterM (\_ -> pickMe) [1,2,3,4]
11:22:53 <lambdabot>  [([],2),([4],1),([3],1),([3,4],0),([2],1),([2,4],0),([2,3],0),([1],1),([1,4]...
11:23:01 <jle`> hm, nope
11:23:17 <jle`> that gives you the "at most 2" subsets
11:23:24 <EvanR> is it just me or do you pretty much always have to flip runStateT and similar transformer "run" functions
11:23:25 <jle`> > flip evalStateT 2 $ filterM (\_ -> pickMe) [1,2,3,4]
11:23:28 <lambdabot>  [[],[4],[3],[3,4],[2],[2,4],[2,3],[1],[1,4],[1,3],[1,2]]
11:23:41 <EvanR> doesn't that tell you something about the API
11:23:50 <hololeap> oh well, i'll just look into it myself then
11:24:07 <hololeap> i was hoping this was a common problem with a well-known solution
11:24:58 <c_wraith> I don't think you can just assemble existing things to get something efficient here. 
11:25:12 <jle`> is that a challenge
11:25:12 <c_wraith> maybe this means we need to add something to base. 
11:25:22 <boxscape> hmm my attempts to have some sort of Lens pattern for duplicate record fields only resulted in having something like `person^.field @"name"` vs `company^.field @"name"`, which is arguably worse than `person^.personName` vs `company^.companyName` :/
11:25:34 <jle`> i mean, you can pretty much directly port the algorithm here using the boot libraries
11:25:37 <EvanR> this sounds like a edk blog post waiting to happen
11:25:45 <jle`> as a mutable algorithm
11:26:09 <c_wraith> jle`: I meant (though did not say) without using explicit recursion. 
11:26:13 <jle`> boxscape: why is it arguably worse?
11:26:26 <boxscape> because now you have to type @ and "
11:26:37 <hololeap> jle`: is that a common term? "boot libraries"? i never know what to call them.
11:26:44 <boxscape> which I'd probably find more annoying than just a longer lens name
11:26:50 <jle`> i usually call them 'standard libraries'
11:26:56 <jle`> even though that term is vague-ish
11:27:00 <jle`> boot libraries is a specific term
11:27:20 <jle`> it refers to this list https://gitlab.haskell.org/ghc/ghc/wikis/commentary/libraries/version-history
11:27:40 <boxscape> You can do `person^.name` and `company^.name`, but only if you know beforehand which field names you want to cover, I think 
11:27:45 <c_wraith> jle`, by the way, I feel like this is almost certainly related to the send more money problem, which it appears we both did blog posts on. :) 
11:27:49 <boxscape> or you could just make classes for every possible field name...
11:28:01 <jle`> c_wraith: hah. yeah, the StateT Int [] was inspired by the send more money
11:28:18 <jle`> boxscape: right, there are advantages and disadvantages in all of those ways
11:28:25 <boxscape> yeah, that makes sense
11:28:30 <jle`> one thing about making a class or personName is that you need to pollute the namespace
11:28:50 <jle`> class pollutes O(num fields) and personName pollutes O(num fields * num types)
11:28:57 <jle`> whereas field @"name" pollutes none
11:29:03 <boxscape> that's true
11:29:10 <jle`> also you might like OverloadedLabels, which allows you to write field #name
11:29:16 <boxscape> ah, nice
11:29:32 <jle`> which is basically a sugary equivalent
11:29:45 <boxscape> that's actually much nicer to type
11:29:46 <EvanR> is "name" there a String ?
11:29:52 <boxscape> it's a Symbol
11:29:53 <jle`> it's a literal
11:29:55 <EvanR> ah
11:30:18 <jle`> field #name, the #name gets interpreted as "name" :: Symbol
11:30:37 <EvanR> so at runtime it's not anything like a String
11:30:48 <jle`> but, OverloadedLabels is kind of a weird system, involving typeclasses
11:30:49 <EvanR> which would be awful
11:31:04 <jle`> EvanR: yeah, it's basically used by ghc to resolve a typeclass
11:31:06 <jle`> instance
11:31:24 <jle`> (at compiletime)
11:32:25 <jle`> boxscape: #name is sugar for (fromLabel @"name")
11:32:35 <boxscape> okay
11:33:19 <boxscape> gonna need to look into this a bit more, it doesn't quite work as a drop-in replacement
11:33:46 <jle`> yeah, usually what you would do is have 'field' take some type that encodes a lens based on a name/symbol
11:34:08 <jle`> and then you write a generic instance FromLabel s (MyLensEncoding s) or something like that
11:34:15 <boxscape> I see
11:34:29 <jle`> it's not that simple, mylensencoding needs the types too but yeah
11:35:05 <jle`> alternatively you can just have a FromLabel instance for the lenses directly
11:35:17 <jle`> so you can do foo ^. #name, buuuut that involves orphan instances
11:35:39 <boxscape> hmm interesting
11:35:42 <jle`> that's what http://hackage.haskell.org/package/generic-lens-labels does
11:35:53 <boxscape> okay
11:36:13 <jle`> "Please do not depend on this package from any hackage libraries.", heh
11:36:26 <boxscape> oh hey the class in that package even has the same name my class has, HasField
11:36:45 <boxscape> (it is a fairly obvious choice I suppose)
11:37:08 <jle`> if you have HasField then it would be fun to get the overloaded labels inteface from it :)
11:37:14 <hololeap> is there any semantic difference between (for instance) `WriterT w (State s)` and `StateT s (Writer w)`? should i worry about which choice to use in this case?
11:37:24 <geekosaur> re API, it;s hard to pick a right one there; sometimes you want the initial state to be directly accessible, sometimes the "program" to run
11:37:59 <geekosaur> best you can do is provide both and let people pick the one fitting their use case, or pick one and have people "flip" to get the other
11:37:59 <jle`> @unmtol WriterT w (State s)
11:38:00 <lambdabot> Plugin `unmtl' failed with: `WriterT w (State s)' is not applied to enough arguments, giving `/\A. s -> (A, w, s)'
11:38:03 <jle`> @unmtol WriterT w (State s) a
11:38:04 <lambdabot> s -> (a, w, s)
11:38:08 <boxscape> oh wait
11:38:12 <jle`> @unmtl StateT s (Writer w) a
11:38:12 <lambdabot> s -> (a, s, w)
11:38:14 <boxscape> I didn't realize HasField is a class in base
11:38:31 <hololeap> jle`: so they're isomorphic in this case
11:38:36 <hololeap> thanks
11:39:07 <jle`> they are implemented with the same underlying representation
11:39:14 <jle`> but they might have different APIs
11:39:26 <hololeap> what's the difference between unmtl and unmtol?
11:39:40 <jle`> the difference is that unmtol is a typo :|
11:39:58 <hololeap> lambdabot seemed to accept it...
11:40:00 <jle`> boxscape: too bad it's not a lens :'(  but i think there is a proposal that might make it one
11:40:07 <boxscape> sounds cool
11:40:12 <jle`> lambdabot is...forgiving of typos
11:40:20 <hololeap> huh :/
11:40:24 <jle`> @pointloss \x -> x
11:40:24 <lambdabot> id
11:40:38 <jle`> @paintless \x -> x
11:40:38 <lambdabot> id
11:40:48 <boxscape> @paintloss \x -> x
11:40:48 <lambdabot> id
11:41:52 <jle`> ultimately it reduces spam, i think
11:45:42 <EvanR> :u map
11:45:49 <boxscape> Is there some way in ghci to get the simplified type of something applied to a type synonym?
11:45:50 <rmageddon> can i post here
11:46:12 <jle`> boxscape: not sure if it works for type synonyms, but try :kind! maybe
11:46:19 <boxscape> yeah tried that, doesn't work :(
11:46:41 <l33tasfv8> testing my chat client
11:46:48 <jle`> rmageddon: if you have code you want to paste, try using a pastebin site like paste.ee instead of directly pasting it into irc :)
11:47:20 <jle`> but if you just mean like talking to us, then you can :) as long as the topic of discussion is about haskell
11:47:21 <rmageddon> ok, thank you'
11:55:41 <boxscape> so.. when I run a nix-shell with hackage packages, that usually works just fine. But if I try to use generic-lens, I can't seem to import the actual modules that are part of this package. How would I go about debugging thiss?
11:56:13 * hackage bytesmith 0.1.0.0 - Nonresumable byte parser  https://hackage.haskell.org/package/bytesmith-0.1.0.0 (andrewthad)
11:57:59 <boxscape> I can see the module .hi files in my /nix/store
11:58:11 <infinisil> boxscape: Check the version you're using with ghc-pkg list
11:58:44 <boxscape> it's not its output
11:58:51 <boxscape> s/its/in its/
11:59:13 <boxscape> I guess the nix package might be messed up somehow?
11:59:56 <boxscape> hold on
12:00:14 <boxscape> I tried again and now it works, so... yay?
12:00:24 <boxscape> (i.e. I tried restarting the nix shell)
12:02:52 <exarkun> Does UTCTime have a RealFrac instance or is the accepted answer on https://stackoverflow.com/questions/4194340/is-there-a-better-way-to-convert-from-utctime-to-epochtime wrong/outdated?
12:06:13 <dmwit> exarkun: Neither of those alternatives is correct.
12:06:28 <turab> What are the benefits of using cabal's test-suite stanza instead of executable stanza?
12:06:30 <exarkun> :)
12:06:57 <turab> I feel like the one could also make an executable to run tests
12:07:15 <turab> s/the one/one/
12:07:29 <exarkun> dmwit: Can you elaborate?
12:07:32 <dmwit> turab: test-suite's are not installed
12:07:54 <turab> Ah that makes sense
12:07:54 <dmwit> exarkun: What's to elaborate on? There's no instance RealFrac UTCTime, and also the answer you linked to is not wrong or outdated.
12:07:57 <sclv> also, running "cabal test" both builds and runs
12:08:18 <dmwit> sclv: cabal run does that, too, so no big difference there
12:08:27 <turab> ^
12:08:33 <exarkun> dmwit: Sorry.  I don't understand.  I thought those were the two alternatives.  Since they're not, I must not understand something - but I don't know what it is.
12:08:37 <sclv> but so does cabal test
12:08:45 <sclv> also if you only have one suite you don't need to specify further
12:08:56 <exarkun> dmwit: `round` seems to have a RealFrac constraint on its first argument
12:09:08 <dmwit> exarkun: Yes, but `round` is not applied to a UTCTime in that answer.
12:09:23 <exarkun> ugh.  indeed.
12:09:26 <exarkun> thanks.
12:11:48 <ysangkok> in which cases would it be incorrect, for example? just curious
12:11:55 <merijn> dmwit: cabal test runs multiple test suites, though. Run requires an explicit executable to run
12:12:23 <dmwit> Yup, that's a real difference, I agree.
12:13:09 <dmwit> ysangkok: What is the "it" which your question refers to?
12:15:19 <ysangkok> dmwit: the functions in answers of the stackoverflow question that was linked from exarkun above, for example the answer from Yitz which i identified as an alternative, and which does not use "round" on a UTCTime because it uses round after converting to seconds
12:15:54 <exarkun> ysangkok: dmwit meant the alternatives I presented
12:16:07 <exarkun> "UTCTime has a RealFrac instance", "the accepted answer is wrong"
12:19:56 <ysangkok> aah gotcha, thanks. 
13:02:13 * hackage ditto 0.4 - ditto is a type-safe HTML form generation and validation library  https://hackage.haskell.org/package/ditto-0.4 (goolord)
13:03:42 * hackage ditto-lucid 0.4 - Add support for using lucid with Ditto  https://hackage.haskell.org/package/ditto-lucid-0.4 (goolord)
13:09:39 <ullbeking> woohoo!!!!! woweeee!!!!!
13:09:43 * hackage trasa-form 0.4 - generate forms using lucid, ditto and trasa  https://hackage.haskell.org/package/trasa-form-0.4 (goolord)
13:09:56 <ullbeking> guess what just arrived?
13:10:06 <ullbeking> (hint: it has something to do with haskell)
13:10:18 <lavalike> a book?
13:10:22 <ullbeking> indeed!
13:10:25 <lavalike> ding!
13:10:41 <ullbeking> The Haskell School of Music by Hudak and Quick
13:10:48 <lavalike> that's lovely
13:10:58 <lavalike> I reopened that some months ago for fun
13:10:59 <ullbeking> isn't it? :-)
13:11:16 <ullbeking> i love when programming languages are couples with something beautiful
13:18:27 <hololeap> i don't understand this meaning of `difference`: https://hackage.haskell.org/package/containers-0.6.2.1/docs/Data-IntMap-Strict.html#v:difference
13:19:07 <merijn> hololeap: Do you understand intersection?
13:19:11 <hololeap> shouldn't the result be `fromList [fromList [(3, "b"), (7, "C")]` ?
13:19:44 <merijn> ah...hmmm that example looks odd
13:19:54 <[Leary]> That's the /symmetric/ difference, hololeap.
13:20:06 <merijn> [Leary]: Oh, right!
13:20:36 <merijn> I've been annoyed at the lack of symmetric difference in the past
13:20:51 <dmwit> hololeap: difference x y notionally iterates over the keys in y, deleting each one from x
13:21:12 <hololeap> i see
13:21:50 <dmwit> (...but implemented in a more efficient way than literally doing that.)
13:22:42 * hackage scotty-form 0.2.0.0 - Html form validation using `ditto`  https://hackage.haskell.org/package/scotty-form-0.2.0.0 (goolord)
13:37:14 <hololeap> it seems pretty straightforward to implement using Data.IntMap.Merge.Strict
13:39:21 <boxscape> is there some kind of newtype that defines a Monoid instance for Maybe that works like Alternative? Or would that break some kind of algebraic law?
13:40:16 <hololeap> boxscape: First ?
13:40:41 <hololeap> Data.Monoid.First
13:40:55 <boxscape> looks good, thanks
13:46:04 <hololeap> boxscape: note that it says in the docs: Use of this type is discouraged ... will be marked deprecated in GHC 8.8, and removed in GHC 8.10
13:46:11 <boxscape> ah, ok
13:46:55 <boxscape> So Alt is what I should be using then
13:47:04 <merijn> Semigroup :)
13:47:17 <merijn> Monoid.First is deprecated in favour of Semigroup.First
13:47:21 <boxscape> ah
13:47:25 <boxscape> thanks
13:48:10 <merijn> Although that's not a Monoid. OTOH you don't need a monoid with maps, since you can just delete
13:49:24 <boxscape> I don't think I've needed mempty very much in general, compared to <>
13:50:03 <boxscape> though I suppose I indirectly use it when using foldMap and such
13:50:07 <hololeap> "Use Option (First a) to get the behavior of First from Data.Monoid."
13:50:12 <hololeap> from https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Semigroup.html#t:First
13:50:13 <boxscape> ah, nice
13:50:30 <hololeap> this is all new to me too :/ (the deprecation that is)
13:50:51 <boxscape> except Consequently, this type is no longer useful. It will be marked deprecated in GHC 8.8 and removed in GHC 8.10.
13:50:53 <boxscape> for Option
13:51:13 <hololeap> lol wat
13:51:24 <dmwit> What is the difference between Control.Monad.Trans.Accum and C.M.T.Writer.CPS?
13:51:29 <boxscape> https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Semigroup.html#t:Option
13:52:29 <hololeap> oh, that actually makes sense
13:53:00 <boxscape> But then what is the correct way to get a Monoid with First behaviour? I suppose Alt after all?
13:54:09 <hololeap> boxscape: it should work as-is using `Maybe (Data.Semigroup.First a)` if you are using GHC 8.4 or higher
13:54:18 <boxscape> Ah, I see
13:54:45 <hololeap> (mempty :: Maybe (Data.Semigroup.First a)) === Nothing
13:55:36 <hololeap> or, more generally, (mempty :: Maybe a) === Nothing
13:55:48 <dmwit> I guess they're different. No idea how to choose between them, though.
13:58:27 <hololeap> oops, (mempty :: Semigroup a => Maybe a) === Nothing
14:01:54 <hololeap> speaking of, is there a typeclass that represents structures that have `mempty`, but not necessarily `mappend`? like Monoid without the Semigroup part?
14:02:34 <hololeap> oh, maybe Data.Default
14:02:50 <hololeap> or something like that :/
14:02:59 <merijn> Data.Default is a godawful class
14:05:35 <boxscape> well, algebraically, the whole point of the identity element is that it leaves the other object identical if used with it in the binary operation, right? So it seems that from that point of view it wouldn't really make sense to have an identity element without a binary operation to go with it
14:06:09 <merijn> boxscape: What would it be the identity for?
14:06:32 <boxscape> exactly
14:06:59 <merijn> wait, I misread that comment :)
14:07:37 <boxscape> this seems like it would kind of fit the bill though, although the name would suggest that it's the Pointed type in haskell https://en.wikipedia.org/wiki/Pointed_set
14:07:52 <boxscape> which is a different thing from... a Monoid without a binary operation, as it were
14:08:32 <boxscape> (I think, anyway. For all I know they might be isomorphic somehow)
14:09:38 <hololeap> on second thought, there wouldn't be much use for a typeclass like that, anyway :)
14:10:02 <boxscape> speaking of though, I've been wondering - is the "identity function" called that because it leaves the element it's applied to identical, or because it's the identity element of composition?
14:16:18 <hololeap> @unmtl StateT s [] a
14:16:18 <lambdabot> s -> [] (a, s)
14:17:10 <hololeap> @unmtl ListT (State s) a
14:17:11 <lambdabot> s -> ([] a, s)
14:19:22 <c_wraith> boxscape: they're the same thing, when you look at why the identity element for an operation is called that. 
14:21:11 <boxscape> hmm I guess. Still, one meaning probably came first, right? Either someone first came up with the name when thinking about monoids and such or someone did when looking it f(x) = x
14:24:21 <c_wraith> I suspect the first use of the term came in the context of additive or multiplicitive identities. this is just because, iirc, those ideas were worked out before the idea of functions (at least as a thing to study) 
14:24:40 <boxscape> I see
14:32:29 <freeman42x> worked today on creating these Haskell editor / IDE easy setup instructions: https://twitter.com/razvan_panda/status/1164650006353195009
14:49:09 <crobbins_> i seem to be having a hard time figuring out how to use TemplateHaskell + ScopedTypeVariables + TypeApplications
14:49:50 <wildtrees> sounds like a rough mix crobbins_ 
14:50:07 <crobbins_> foo :: forall a. Typeable a => Q Exp ; foo = [| bar @a |]
14:50:12 <crobbins_> wildtrees: yup!
14:50:24 <crobbins_> problem is, GHC keeps making @a a fresh type var
14:50:31 <crobbins_> and not using the one introduced by forall
14:51:00 <crobbins_> i thought about refactoring to use Name instead, but i'd rather just have the full type supplied so i don't have to work out hier kinds and stuff
14:51:23 <crobbins_> 'foo @(Maybe Int)' as opposed to...whatever I'd have to do to get that going with Name
14:51:28 <infinisil> freeman42x: Why don't you just link to the github thing directly? Like this one has to go to twitter first so they can click on the suspicion buff.ly link, which then forwards you to github..
14:51:37 <infinisil> suspicious*
14:52:04 <infinisil> And why use link shorteners anyways? Twitter doesn't count urls towards the char limit, and github shows you analytics already
14:52:04 <crobbins> i've even tried using Proxy
14:52:15 <crobbins> but i guess there's no Lift (Proxy a) instance?
14:53:03 <MarcelineVQ> infinisil: they used to count hashtags and urls to the limit, just at a fixed cost for either, do they not now?
14:53:32 <freeman42x> infinisil, here's the github link: https://github.com/razvan-panda/haskell-editor-setup
14:53:53 <infinisil> MarcelineVQ: Urls do count, but a fixed amount I'm pretty sure, because twitter uses their own shortener on it
14:53:55 <freeman42x> infinisil, "And why use link shorteners anyways" buffer automatically uses URL shortener
14:54:00 <freeman42x> good point, I will disable that if possible
14:54:30 <crobbins> is there a way to reify the type of a type var in TH?
14:55:05 <infinisil> freeman42x: But nice to see some people writing on Haskell setups :)
14:55:45 <infinisil> Ah you're the one who did the PR for a config.nix installation for all-hies, I'll have to check it out later
14:56:45 <freeman42x> infinisil, yeah, hehe, I run into the issue of not knowing how to do that so I said it would be good to contribute the solution
15:02:33 <wildtrees> crobbins, Typeable maybe? not sure maybe search for some sort of generics 
15:03:02 <crobbins> wildtrees: yeah was digging through there, i already need it for something else, but i don't know if i can go from 'TypeRep -> Type`
15:03:24 <halogenandtoast> So maybe I am missing something partially obvious, but looking at https://www.snoyman.com/blog/2019/08/haskell-kata-with-try-file-lock, I don't see how it's possible for version1 to return an IO a.
15:04:14 <halogenandtoast> because using withTryFileLock we end up with a function returning an IO (Maybe a)
15:04:30 <wildtrees> crobbins, I dont know about the TH part, but you would need some sort of value I think to construct the Type from the TypeRep 
15:07:38 <halogenandtoast> I mean I suppose it could catch and return Nothing, but that seems odd
15:07:57 <mpickering> Does anyone know a library which runs an action after a certain amount of allocation is reached?
15:09:25 <PotatoRick[m]> hi there, can i have somehow automatically derived instance of `Generic` for `Data.Vector.Vector` from `vector` package?
15:13:04 <boxscape> Have you tried standalone deriving?
15:20:34 <Zemyla> No, you can't derive Generic from Vector, because that would expose the internal representation.
15:56:07 <PotatoRick[m]> boxscape: it doesn't work because constructors aren't public
15:56:55 <ensyde> does anyone use haskell on void linux?
16:16:26 <curiousprogramme> hi guys how are you
16:25:30 <Infernus> test
16:28:29 <nedlo> *
16:28:51 <nedlo> *
16:30:07 <nedlo> testing
16:30:36 <nedlo> cat
16:33:09 <nedlo> multi
16:34:06 <nedlo> multi
16:36:53 <nedlo> some+words+in+sentence
16:37:25 <iqubic> nedlo: Can you please take this testing to a private message?
16:37:34 <iqubic> Or do it elsewhere?
16:42:46 <wildtrees> nedlo, join #test ! 
16:43:42 * hackage valid 0.1.1.0 - Type isomorphic to `Either` with `Applicative` instance which combines errors  https://hackage.haskell.org/package/valid-0.1.1.0 (MatthewFarkasDyck)
17:32:30 <d34df00d> Hi!
17:33:36 <d34df00d> Let's say I work for some company and want  to promote Haskell there. Obviously, there will be some proprietary packages that aren't worth pushing to the big upstream hackage, but that would still be nice to use by just referring to them in the cabal or hpack files. What's the best way to have a custom separate repo?
17:35:14 <dmwit> Are cabal.project files an option for you?
17:35:26 <Axman6> I don't know of cabal supports this but stack does
17:35:27 <dmwit> We use them extensively at my work (together with git submodules).
17:35:47 <Axman6> and git submodules are the other option
17:36:10 <Axman6> (though you have to be careful to keep your submodules up to date)
17:36:13 <d34df00d> dmwit: dunno, I have never used cabal.project before. Thanks for pointing!
17:36:17 <dmwit> It is also possible to run Hackage locally, of course. The cabal docs has info on how to setup your cabal.config.
17:38:30 <d34df00d> Yeah, some folks did that (the local hackage copy) on my previous place, but my impression is that it's way way way more effort-demandinng.
17:39:01 <d34df00d> Axman6: when you say stack you mean putting the gihub uris to extra-deps?
17:39:12 <Axman6> yes
17:39:21 <dmwit> Well, the main thing is that it adds a sort of "release" step separating "I'll just change this other package" from "now I can use the modified package".
17:39:45 <d34df00d> Ah cool. Yeah, I considered that, but it kinda requires duplicating the same info, first by putting it into extra-deps and then to the .cabal/package.yaml.
17:40:55 <dmwit> There is https://cabal.readthedocs.io/en/latest/nix-local-build.html#specifying-packages-from-remote-version-control-locations
17:41:19 <dmwit> But I think that's probably a bit more cumbersome than submodules.
17:42:14 <d34df00d> All in all, submodules or extra-deps looks like the most straightforward approach so far.
18:14:10 <freeman42y> does any of you guys use HIE inside Emacs? I would need a simple init.el configuration to help me set it up
18:17:42 * hackage sliceofpy 1.0.0 - Python-ish slicing traversals for Haskell.  https://hackage.haskell.org/package/sliceofpy-1.0.0 (lgastako)
18:25:29 <nshepperd> i don't really get the use of submodules. wouldn't it be easier to just put everything in one repo?
18:26:12 * hackage xmobar 0.30 - A Minimalistic Text Based Status Bar  https://hackage.haskell.org/package/xmobar-0.30 (JoseAntonioOrtegaRuiz)
18:26:23 <nshepperd> then you also get the benefit of being able to easily refactor things at whim without ever breaking anything
19:34:40 <zeta_0> when i looked up the `toLower` function with hoogle in emacs i got this, so how do i import the `toLower` function ? https://hastebin.com/yitojuzose.php
19:35:54 <zeta_0> here is the haskell code i am trying to run: https://hastebin.com/kasakozayi.apache
19:36:27 <Axman6> Data.Char would be the canonical place to get toLower from, assuming you want the Char -> Char version
19:38:10 <zeta_0> Axman6: thanks, i thought i needed to import something from `Prelude`
19:39:22 <Axman6> Prelude is imported implicitly (you need to specifically excluse its import if you don't want it)
19:41:30 <zeta_0> Axman6: oh that makes sense, do mean `exclude` ?
19:42:20 <Axman6> uh yes
19:42:44 <zeta_0> Axman6: thanks
19:45:49 <wejehteman> i'm a little confused about data types. if I import System.Random and put getStdGen into a variable like this "var01 <- getStdGen" and I ask it the type of var01 I get StdGen. Which is all good and well. But if I want to be able to operate on it I need to know is the actual data itself a string or an int, so I know what kind of functions to pass it
19:45:50 <wejehteman>  to and what not to. Does that make any sense?
19:48:12 * hackage log4hs 0.0.7.0 - A python logging style log library  https://hackage.haskell.org/package/log4hs-0.0.7.0 (gqk007)
19:48:46 <wejehteman> if I just pass var01 to ghci it'll give me something like "1620749285 1" is that a string?
19:48:54 <Axman6> You shouldn't need to know what's inside it, if you look at https://hackage.haskell.org/package/random-1.1/docs/System-Random.html#t:StdGen you can see it's a member of the RandomGen class, so you can call next :: StdGen -> (Int, StdGen), genRange :: StdGen -> (Int, Int) and split :: StdGen -> (StdGen, StdGen) on it
19:49:27 <Axman6> that's it's Show instance, it doesn't necessarily tell you anything about its internal structure, and now should you care about its structure
19:49:38 <lyxia> An StdGen is neither a string or an int
19:50:48 <Axman6> its implementation has intentionally been hidden from you, but the operations you can perform on a StdGen have been given to you in System.Random
19:51:02 <zeta_0> why is this code throwing an error ?
19:51:04 <zeta_0> isEven 0 = True
19:51:04 <zeta_0> isEven 1 = False
19:51:04 <zeta_0> isEven (n + 2) = isEven n
19:52:09 <wejehteman> I think I understand. Thanks
19:52:16 <lyxia> the thing between isEven and = should be a pattern, but (n + 2) is not a pattern
19:52:19 <Axman6> n+k patterns are no longer valid in GHC without an extension IIRC
19:52:32 <Axman6> lyxia: it used to be a pattern
19:52:55 <Axman6> https://stackoverflow.com/questions/3748592/what-are-nk-patterns-and-why-are-they-banned-from-haskell-2010#3748700
19:53:01 <lyxia> it used to be a pattern ages ago
19:55:55 <zeta_0> oh i see, i am learning from this haskell cheat sheet, i guess it is a bit outdated: http://cheatsheet.codeslower.com/CheatSheet.pdf
19:57:28 <Axman6> I wouldn't advise learning any language from a cheatsheet, there are some fundamental concepts which you will need to understand which a cheatsheet will not be able to teach. I would only use that as a quick reference after reading some other more in depth source
19:58:43 <Axman6> looks like it's from 2010, so probably doesn't have any of the Haskell2010 changes
20:00:29 <zeta_0> i am just going to go through this haskell cheat sheet once or twice, then i will just use it as a reference
20:01:01 <Axman6> well jujst keep in mind, Haskell is probably nothing like languages you've used before
20:03:19 <zeta_0> Axman6: yeah, i saw that very early on
20:04:49 <zeta_0> Axman6: right now i am learning some category theory, then i am going to learn some lambda calculus
20:24:46 <zeta_0> is there an alternative to `n + k patterns` ?
20:27:32 <ClaudiusMaximus> > let { isEven 0 = True ; isEven 1 = False ; isEven (subtract 2 -> n) = isEven n } in isEven 7  -- using -XViewPatterns
20:27:34 <lambdabot>  False
20:27:43 <lyxia> you bind a number and subtract 2 from it.   isEven n = isEven (n - 2)
20:37:00 <hololeap> wow... i could have saved a bunch of work if i had realized that gcd and lcm were in Prelude
20:51:51 <freeman42y> this sentence confuses me: If you are a not a trusted user (or you do not know whether you are a trusted user), then edit /etc/nix/nix.conf. If you are not a trusted user, you may edit ~/.config/nix/nix.conf instead.
20:51:59 <freeman42y> from: https://github.com/input-output-hk/plutus#nix
20:52:53 <lyxia> looks like a typo
21:02:19 <zeta_0> what does the word `clause` mean in haskell ? does it mean `command` ?
21:03:11 <sobhan> i want to start writing bigger codes (small size projects with some IO/Network) but i don't really have any idea how to structure my code, i know it's generally frowned upon asking open ended questions but is there a recommended way to do this?
21:05:15 <dmwit> zeta_0: I guess mostly I hear "where clause". I'm not sure "clause" is used alone much. "where clause" means all the definitions in the block introduced by the `where` keyword.
21:06:27 <dmwit> sobhan: https://stackoverflow.com/q/3077866/791604
21:09:51 <MarcelineVQ> 'let' and 'where' and 'deriving' are the 3 things the report refers to as clauses
21:17:32 <wrunt[m]> Can I call a function at compile time? I want to do this:
21:17:46 <wrunt[m]> `testUUID :: UUID
21:17:46 <wrunt[m]> (Just testUUID) = fromText "6cf43a02-158c-11e7-803e-0242ac110017"
21:17:47 <wrunt[m]> `
21:18:01 <Axman6> that should just work
21:18:13 <wrunt[m]> yeah, but I get a compiler warning
21:18:18 <wrunt[m]> should I just suppress that?
21:18:40 <Axman6> (The answer to can youy call a function at compile time is Template Haskell, but that also works"
21:18:41 <wrunt[m]> (for non-exhaustive pattern match)
21:19:08 <Axman6> hmm, I have a feeling making it an irrefutable pattern may get rid of the warning: ~(Just testUUIDC) = ...
21:19:57 <wrunt[m]> No, I'm still getting the warning
21:20:16 <wrunt[m]> Ideally it would be a compile-time error if the pattern match failed, so maybe I need Template Haskell
21:21:14 <Axman6> is there an IsString instance for UUID?
21:22:08 <wrunt[m]> no
21:22:51 <Axman6> you coulde also do testUUID = case fromText ... of Just uuid -> uuid; Nothing -> error "This should never happen"
21:26:23 <wejehteman> why does this code work perfectly fine in ghci but won't compile? http://ix.io/1T6F
21:27:29 <nisstyre> wejehteman: what doesn't work?
21:27:33 <Axman6> "Won't compile" isn't very helpful
21:28:09 <wejehteman> well when I try to run it with runhaskell it throws up a bunch of errors, but if I just enter the lines in manually into ghci no problem
21:28:21 <nisstyre> looks like you need to add some type annotations?
21:28:21 <Axman6> which errors...
21:28:29 <nisstyre> https://ideone.com/fHxDv7
21:28:34 <nisstyre> best to specify the actual errors you get
21:28:39 <nisstyre> instead of just saying it errors out
21:28:45 <wejehteman> kk
21:28:58 <nisstyre> the compiler tells you what you need to do to fix it there
21:29:08 <nisstyre> "      Probable fix: use a type annotation to specify what ‘a0’ should be."
21:30:15 <Axman6> wejehteman: pretend we're mechanics, if you turn up and say "My car doesn't work" they'll fix your cigarette lighter and charge you $200. If you say "My car won't start, the starter motor makes a weird noise when I try to start it" They'll replace your battery and you'll have a working car
21:30:24 <nisstyre> this version works https://ideone.com/i332xr
21:30:43 <wejehteman> http://ix.io/1T6G
21:30:44 <MarcelineVQ> Or more likely just clean your posts and charge you $200
21:31:25 <nisstyre> the thing you're tripping up on is that numbers get automatically specialized in ghci
21:31:31 <nisstyre> but they stay polymorphic in ghc
21:32:02 <nisstyre> https://wiki.haskell.org/Monomorphism_restriction
21:33:47 <zeta_0> dmwit, MarcelineVQ: thanks
21:34:03 <wejehteman> nisstyre Oh sure. I'm sure it did. If only I spoke compiler better than I speak mandarin.
21:35:57 <wejehteman> sorry, i'm really slow at this, how does one "use a type annotation to specify what ‘a0’ should be"?
21:37:27 <nisstyre> wejehteman: the a0 being referred to there is the first value in the tuple being returned
21:37:47 <nisstyre> you can tell because it says "Ambiguous type variable ‘a0’ arising from a use of ‘show’"
21:38:01 <nisstyre> so it's complaining about a type variable that is part of the type of show
21:38:15 <nisstyre> show is polymorphic, show :: Show a => a -> String
21:38:24 <nisstyre> it has to know the type of 'a' before it can do anything
21:38:39 <nisstyre> otherwise it can't select an appropriate instance of the type class Show (capital S)
21:38:51 <wejehteman> i actually kind of understand what you are saying, but how do I tell it the type of a?
21:38:52 <nisstyre> if that type is ambiguous it can't do anything, therefore error
21:39:01 <nisstyre> in ghci, if I remember correctly, it will just choose Integer for you
21:39:12 <nisstyre> wejehteman: see the link I pasted
21:39:25 <nisstyre> https://ideone.com/i332xr
21:39:33 <nisstyre> you just use the :: syntax
21:41:18 <wejehteman> thanks! 
21:41:35 <nisstyre> np
21:51:02 <wejehteman> nisstyre one more question if you are still around and feel up to it. I'm trying to understand why $ wont work after show and parentheses have to be used instead. Is that some limitation of $ where it can't enclose the :: or the Int? 
21:51:57 <iqubic> I'm not the one you asked, but if you are using (:: Int) it needs to in paretheses. Always. No matter what.
21:52:41 <iqubic> Giving an explicit type like that always requires a pair of parenthesis. Also, $ is just a normal function, nothing special there.
21:52:46 <iqubic> @src ($)
21:52:46 <lambdabot> f $ x = f x
21:54:26 <sobhan> dmwit: thanks
21:55:26 <wejehteman> thanks
21:57:48 <wejehteman> I think I get it. The parentheses have to go after show because the output of fst is what I'm assigning the type to.
21:58:22 <wejehteman> And then like you said, $ just wont cut it for assigning a type in this way.
21:59:12 <iqubic> No. Actually, the parentheses go after the show because show doesn't know if your whole number should be presented as an Int, like "4" or a float like "4.0"
21:59:42 * hackage shh 0.7.0.4 - Simple shell scripting from Haskell  https://hackage.haskell.org/package/shh-0.7.0.4 (lukec)
21:59:49 <wejehteman> Yea, that's more or less what I meant I just don't know how to word things correctly.
22:02:05 <wejehteman> I must be some sort of masochist considering how I keep coming back and trying to learn all this stuff.
22:02:25 <Axman6> it's worth it in the end
22:03:40 <wejehteman> a couple hours a day and I'll get there someday. anyway thanks again to both the guys who helped out. i'm heading off now.
22:04:15 <Axman6> good luck, and keep asking questions!
22:17:13 * hackage yaml 0.11.1.1 - Support for parsing and rendering YAML documents.  https://hackage.haskell.org/package/yaml-0.11.1.1 (MichaelSnoyman)
22:40:18 <cinimod> dminuoso: clever: I am back - if I use Pkgconfig-Depends then I get cabal: parsing output of pkg-config --modversion failed
22:42:54 <cinimod> https://github.com/commercialhaskell/stack/issues/2020
22:43:38 <cinimod> But apparently this was fixed some time ago
23:53:26 <freeman42y> how can I fix this? https://i.imgur.com/3P7IuL3.png
23:54:04 <dmwit> source-repository is a section heading, not a field.
23:54:07 <dmwit> ...as the error says.
23:54:07 <Axman6> where di you put the source-repository section?
23:54:14 <Axman6> did*
23:54:27 <dmwit> So it's a top-level thing.
23:54:43 <Axman6> See how it's used in https://hackage.haskell.org/package/lens-4.17/lens.cabal
23:54:59 <dmwit> But if you want a more specific suggestion than that, you're gonna have to show us the contents stack-fix.cabal.
