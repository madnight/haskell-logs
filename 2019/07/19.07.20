01:01:22 <tomjaguarpaw> Can someone remind me how I can use an operator as a type variable?
01:01:40 <tomjaguarpaw> `id :: (a ~> b) -> (a ~> b)`, for example
01:18:35 <jackdk> I don't understand your example
01:20:15 <tomjaguarpaw> How about
01:20:16 <tomjaguarpaw> compose :: Category (~>) => (a ~> b) -> (b ~> c) -> (a ~> c)
01:20:16 <tomjaguarpaw> compose = (>>>)
01:21:01 <tomjaguarpaw> I only know how to write
01:21:02 <tomjaguarpaw> compose :: Category arr => (a `arr` b) -> (b `arr` c) -> (a `arr` c)
01:21:03 <tomjaguarpaw> compose = (>>>)
01:21:14 <tomjaguarpaw> I thought I could do the former, but maybe not.  Maybe operators can only be used as types, not type variables.
01:22:15 <hnra> I'm currently reading "Composing monads" by Jones and Duponcheel and noticed that the paper makes use of Monad comprehensions and it being more general than just list comprehensions. I also noticed that there exists a GHC extensions enabling this in Haskell but it does not seem very popular. Is there any backstory on why monad comprehensions aren't more common in haskell despite it being a seemingly "old" and useful concept?
01:22:46 <tomjaguarpaw> Perhaps because do-notation is more explicit
01:28:09 <hnra> Is do-notation common in papers? I'm guessing the notion might not have been around for this 93 paper.
01:32:33 <Lycurgus> good guess if 93 is 1993
01:37:30 <jackdk> tomjaguarpaw: a tyvar is a varid: https://www.haskell.org/onlinereport/decls.html#sect4.1.3 and a varid is not a varsym https://www.haskell.org/onlinereport/lexemes.html#sect2.4
01:37:35 <jackdk> I think
01:38:27 <tomjaguarpaw> hnra: Monad comprehensions allow you to do [ q | p <- x, q <- y, p ]
01:38:34 <tomjaguarpaw> In do-notation this is do { p <- x; q <- y; guard p; return q }
01:38:38 <tomjaguarpaw> so the former don't buy you much
01:39:35 <tomjaguarpaw> jackdk: So sounds like it's never been possible?  Maybe I dreamed it.
01:41:52 <jackdk> it was a good dream
01:44:32 <tomjaguarpaw> Ah well, thanks for the help.
01:49:47 <hnra> I wasn't aware that do-notation was possible using curly brackets. The syntactic differences don't seem very big then.
01:50:10 <hnra> Thank you!
01:50:28 <Sose> Anyone using Haskell IDE Engine and VSCode plugin for it? for some reason ghc panics if I have "{-# LANGUAGE QuasiQuotes #-}" at the top of a file
02:18:53 <maerwald> I can't run cabal new-build on a read only filesystem anymore. Cabal is trying to open .git/FETCH_HEAD in write mode
02:24:27 <ski> hnra : i think perhaps sometimes people may use monad comprehensions for monad that have a "collection" feel ?
02:25:21 <ski> tomjaguarpaw : you used to be able to use operators as type variables (rather than type constructors, whic used to have to start with `:', in operator form)
04:03:42 <infinisil> How can I create a Pipe that returns its value whenever there are no more inputs?
04:04:10 <infinisil> I can do it by using `Pipe (Maybe Input) Output m r`
04:04:19 <infinisil> But I don't think that's how pipes are supposed to be used
04:08:48 <xenon-> Hello. I have a parser that takes date string and returns LocalTime. This worked fine, except now I'm adding support for a different websites, that sometimes uses relative time (ie, "Published N hours ago"). I'm not sure how to handle this. I can either return IO LocalTime, or create a new RelativeLocalTime data type
04:12:05 <xenon-> I think I missed the most obvious solution.. parser should take LocalTime as an argument
04:13:59 <infinisil> Ahhh, I want the next function: https://hackage.haskell.org/package/pipes-4.3.11/docs/Pipes-Tutorial.html#g:4
04:14:26 <infinisil> I think
04:15:47 <infinisil> Wait, I can't use that in a pipe directly
04:18:57 <xenon-> do you think that would be the best? to take current time as an argument. that way all my parsing functions could still be pure
04:19:10 <infinisil> Maybe instead of declaring my function as `Pipe Input Output m r` i should use `Producer Input m r -> Consumer Output m r`
04:19:33 <infinisil> Um, the other way around
04:19:37 <infinisil> Wait no
04:19:49 <infinisil> `Producer Input m r -> Producer Output m r`
04:27:47 <s-maxim> Hello everyone, can someone help me with this issue I am facing trying to build a ghc cross-compiler with host=amd64-linux-ubuntu (I think) and target=armv8-rpi3-linux-gnueabihf (not sure what forth part of that tuple means)?
04:29:27 <s-maxim> I am trying to follow instructions from gitlab wiki and most of the action seems to be working okey so far, but I still got the error. I am assuming that this error happens somewhere near the end, but I'm not sure at all as I fail to find something useful by google logs from there
04:30:37 <s-maxim> Anyways, from what I understand, at some point build tries to create bunch directories inside my /usr/loca/bin and, since I am not running as a superuser (which I would really like to avoid if possible), it fails with permission error
04:30:38 <merijn> s-maxim: Try #ghc (lower traffic, so your question is less likely to get lost, plus more experts in building GHC around :))
04:31:06 <merijn> s-maxim: Did you specify a prefix when you ran configure?
04:31:09 <s-maxim> merijn Aight, thanks, omw
04:31:17 <s-maxim> Or not
04:31:49 <s-maxim> No I didn't ._. I only specified what was mentioned here: https://gitlab.haskell.org/ghc/ghc/wikis/building/cross-compiling
04:32:20 <merijn> s-maxim: configure scripts default to installing in /usr/ unless you override it with a custom prefix, so I'm wondering if that happens here
04:32:23 <s-maxim> This was my configure: ```./configure --target=armv8-rpi3-linux-gnueabihf --with-ghc=/home/maxim/.stack/programs/x86_64-linux/ghc-8.6.5/bin/ghc --enable-unregisterised```
04:32:27 <merijn> (Also, wow, that wiki page is slow)
04:32:55 <merijn> s-maxim: I can't get it to load, but simple thing to try is just add "--prefix=some/non/root/path"
04:33:23 <merijn> s-maxim: That would install relative to some/non/root/path and hopefully that'd get rid of trying to touch stuff under /usr/
04:33:27 <s-maxim> Okey, looks like a pretty silly mistake
04:33:37 <merijn> No clue if it works, but can't hurt to try :)
04:33:37 <s-maxim> Huge thanks for that
04:34:25 <merijn> If not, then I have no idea and you should try #ghc
04:38:30 <movedx> Hello. New to Haskell. Going over http://learn.hfm.io/fundamentals.html. Unsure why line 7 of 02.hs breaks here? https://gist.github.com/mrcrilly/6d024c93a67f4907f27bef3056e88730 
04:39:34 <movedx> The error is "Couldn't match type ‘Integer’ with ‘Int’". I can't quite get my head around that.
04:40:12 <ggVGc> movedx: read about what Integer and Int are. It's a bit fucky, but basically Integer is an actual native int type
04:40:14 <ggVGc> which can overflow
04:40:21 <ggVGc> while Int is infinite precision
04:40:30 <ggVGc> meaning, you have to explicitly convert between them
04:40:32 <ggVGc> using fromIntegral
04:40:37 <merijn> The real problem here is probably The dreaded MonoMorphism restriction
04:40:55 <ggVGc> sorry, I just joined, so I guess I might be missing some context
04:40:57 <merijn> movedx: Presumably there is other code in the file, yes?
04:40:58 * ggVGc retracts
04:41:09 <movedx> The document does mention fromIntegral actually. I think I've misread it.
04:41:22 <movedx> merijn: yep that's correct. I'm following along with it all
04:41:44 <merijn> movedx: Ok, so the problem here is that if you had *just* your code it would work fine
04:41:49 <merijn> (as in the code in the paste)
04:41:57 <merijn> :t (10, 10, "yellow"
04:41:59 <lambdabot> error:
04:42:00 <lambdabot>     parse error (possibly incorrect indentation or mismatched brackets)
04:42:00 <merijn> :t (10, 10, "yellow")
04:42:04 <lambdabot> (Num a, Num b) => (a, b, [Char])
04:42:23 <merijn> Notice how those first two elements can be any Num instance (including Int!) so that works fine
04:42:32 <movedx> so it's a pattern matching issue?
04:43:24 <merijn> movedx: No, the real issue is the monomorphism restriction: Basically, since those tuples are polymorphic every time you use them with a different type, a new tuple has to be made
04:43:50 <merijn> movedx: That's generally considered bad, because if you write a tuple like that you expect it to be a constant that's just generated once and used
04:44:04 <xenon-> ggVGc, you meant to say the opposite. Integer has infinite precision
04:44:30 <merijn> movedx: There's two solutions: 1) you always create a new copy every time the tuple is used, or 2) you say "well, this thing can only have one type and then we treat it as a constant value"
04:45:08 <merijn> movedx: The former is...inconvenient because code that seems constant (like a tuple) is suddenly recomputed a lot at runtime (imagine if the computation was really expensive, that'd be bad!)
04:46:02 <merijn> movedx: The latter means you avoid those subtle, hard to find performance problems, but since you're making polymorphic values monomorphic (i.e. the opposite of polymorphic) you now get compile time problems if you try to use it with different types (aka the Dreaded MonoMorphism Restriction)
04:46:32 <merijn> movedx: The report decided that "easy to fix compile time errors" > "hard to find performance problems", so Haskell uses option 2
04:47:33 <merijn> movedx: So basically somewhere else in your file you're using the tuples as "(Integer, Integer, String)" and in the code you pasted you're (trying) to use it as "(Int, Int, String)", so the compiler complains it can't succesfully convert c1 and/or c2 to a single monomorphic type
04:48:10 <merijn> movedx: There are two solutions: 1) use fromIntegral in your code (or the other code) to convert from the monomorphic type to the one you need
04:48:36 <merijn> movedx: 2) (probably simpler/easier) add an explicitly polymorphic type for c1/c2, as the MMR only applies to values without type signatures
04:48:46 <merijn> movedx: So "c1 :: Num a => (a, a, String)" or something
04:49:21 <movedx> Hmm.
04:50:07 <xenon-> movedx can code that fails to compile?
04:50:08 <movedx> https://gist.github.com/mrcrilly/dbb7b3f92a1f70f36f6fcfdb6e9d881c -- this is the whole file. I'm trying to identify where I'm cnfusing matters for the compiler.
04:50:14 <xenon-> *movedx can you paste code that fails to compile?
04:51:10 <xenon-> movedx that compiles for me
04:51:15 <merijn> movedx: Oh, it might be defaulting the tuples to Integer because they're not used directly...
04:51:29 <merijn> movedx: Try adding "c1, c2 :: ColourPoint"
04:52:15 <movedx> xenon-: compiles and is usable? You can do 'colourOfPoint c2' without error?
04:52:43 <movedx> merijn: That did it for me...
04:53:01 <movedx> So "10" was basically becoming an Integer, not an Int?
04:53:16 <movedx> I assume Integer is of the primitive kind and Int is a Type Class?
04:53:32 <merijn> movedx: Right, so the absence of usage to infer things from the MMR uses defaulting rules to decide what to pick and those default to Integer (for integral things) and Double (for floating points)
04:53:56 <merijn> movedx: No, Integer and Int are both types (avoid the use "kind", it means something else in Haskell)
04:53:57 <xenon-> 10 is polymorphic. it defaults to Integer
04:54:02 <xenon-> > 10 :: Int
04:54:04 <lambdabot>  10
04:54:07 <xenon-> > 10 :: Integer
04:54:12 <xenon-> > 10 :: Double
04:54:13 <lambdabot>  10
04:54:17 <lambdabot>  10.0
04:55:04 <xenon-> you didn't provide any type annotations, and compiler couldn't figure out the type from the context, so it defaulted to Integer
04:55:32 <ggVGc> xenon-: pretty sure that's not correct?
04:55:40 <xenon-> what part?
04:56:06 <ggVGc> Int is infinite precision and Integer is native, right? Otherwise I guess I've had the wrong idea for a long time :(
04:56:11 <merijn> ggVGc: No
04:56:12 <ggVGc> will educate myself
04:56:14 <ggVGc> oh well
04:56:16 * ggVGc sucks
04:56:19 <merijn> Integer is infinite precision, Int is bounded
04:56:33 <movedx> I think that makes sense. It defaulted 10 to Integer in c1 and c2 because I never toldit otherwise, so c1 and c2 aren't ColourPoints?
04:56:54 <merijn> movedx: Right
04:57:25 <xenon-> yes. if you had colourOfPoint c2 somewhere in that file, it would figure out that 10 has to be Int
04:57:44 <movedx> Thanks a lot. Appreciate it. I've been meaning to learn haskell for some time now, coming from C, then PHP/Python, now Go and now Haskell. I picked up Elm recently and fell in love (hate doing web/UI dev, but Elm makes it a pleasure.)
04:57:57 <movedx> I think Haskell will do the same for server-side development.
06:38:37 <infinisil> Ohh regarding the pipes thing, I can just do an infinite loop, I don't need to take care of terminating inputs
06:38:40 <infinisil> No need for next or so
07:46:27 <infinisil> So the pipes library is actually pretty nice, it's exactly what I needed for my code :D
08:07:42 <Sose> anyone got any ideas how to fix or avoid this issue while stile using QuasiQuotes extension? https://gist.github.com/Sose/c84016268ea1c1dbe3327086bd83ff9f
08:08:05 <Sose> the error message has "version `GLIBC_2.29' not found" but I'm pretty sure glibc is installed but maybe it's looking in the wrong place or something?
08:10:02 <Sose> local/glibc 2.29-3.1 (base) is installed from repos
08:58:38 <orzo> i'm trying to debug someone els's code.  I was trying to insert debug prints, but the problem i'm having is that the types are making it impossible to get any information
09:00:09 <orzo> is it possible to get some info using unsafeCoerce or something? to get a bit of runtime info about an object, maybe just a showable typerep?
09:02:13 <EvanR> there is a way to get debug prints i pure code, Debug.Trace
09:02:27 <orzo> i know
09:02:45 <EvanR> there is no way to get runtime type information for anything which didnt inculde Show or Typeable, since it just doesn't exist at runtime
09:03:19 <ski> orzo : perhaps try <https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/ghci.html#the-ghci-debugger>, if you haven't yet
09:03:58 <monochrom> I will scaremonger you by deliberating exploiting the open-endedness of your question. If you "show (unsafeCoerce True :: Maybe Int)" you will get false information.
09:07:18 <nshepperd> 'Not only do we now know the type of left, but all the other partial types have also been resolved.' what is this witchcraft
09:07:46 <monochrom> Type inference?
09:08:03 <monochrom> AI?
09:08:31 <orzo> i'm trying to debug https://github.com/owickstrom/gi-gtk-declarative/issues/46 and i have prints in code responsible for setting up signals but i see it's setting up 2 signals but i have no way of telling what signals those are
09:08:58 <orzo> it's absurd if i can't get that info
09:10:01 <orzo> i'm looking at src/GI/Gtk/Declarative/Attributes/Internal.hs function 'addSignalHandler' if anybody wants to try with me
09:11:21 <orzo> i can see that case OnSignalPure and case OnSignalImpure are each happening once during my test, but i cant seem to inspect the arguments of those constructors
09:16:04 <nshepperd> ghc ought to add some kind of debugging mode which attaches show and typeable instances to every value
09:16:22 <nshepperd> so you can print stuff in polymorphic functions
09:17:13 <nshepperd> (without changing a hundred type signatures)
09:17:30 <orzo> similar to profiling
09:19:03 <Zemyla> Okay, so quick question. Cont (s -> r) is pretty much the same as StateT s (Cont r).
09:20:46 <monochrom> Wait, is it?
09:21:43 <nshepperd> orzo: i think your current options are: 1. unsafeCoerce the value to the type it actually is if you know it. 2. add a Show constraint and propagate it up the call chain to every use site 3. attempt to use the ghci debugger ski linked
09:23:02 <monochrom> Ah OK yes.
09:23:23 <Zemyla> If you make newtype SCont s r a = SCont { unSCont :: Cont (s -> r) a } deriving (Functor, Applicative, Monad, MonadCont), and then do instance MonadState s (SCont s r) where state f = SCont $ cont $ \c -> uncurry c . f
09:23:51 <nshepperd> @unmtl StateT s (Cont r) a
09:23:52 <lambdabot> s -> (a -> s -> r) -> r
09:24:08 <nshepperd> neat
09:25:32 <ski> @unmtl StateT rs (ContT o m) a
09:25:33 <lambdabot> rs -> (a -> rs -> m o) -> m o
09:25:38 <ski> @unmtl ContT o (ReaderT rs m) a
09:25:38 <lambdabot> (a -> rs -> m o) -> rs -> m o
09:25:44 <Zemyla> Then what is the behavior of the callCC function with regards to the state? Is it equivalent to liftCallCC or liftCallCC'?
09:25:48 <ski> nshepperd ^
09:26:04 <ski> Zemyla ^
09:26:40 <orzo> nshepperd, ski: the docs for the debugger show "break" command taking only a number and the examples are always a single file.  How do i use the debugger when main is one file but the code of interest is a loaded library module
09:27:16 <Zemyla> Pretty sure it would be liftCallCC, since the docs say that liftCallCC' violates the uniformity property (even though that's the version used in the implementation of MonadCont (StateT r m).
09:27:32 <infinisil> ski: Goddamnit I tried to write out the whole unmtl thing by hand
09:31:08 <solonarv> wait, shouldn't @unmtl StateT s (Cont r) a --> s -> ((a, s) -> r) -> r ?
09:31:33 <solonarv> of course that's the same as the actual output, but I'm still surprised that lambdabot curries the type too
09:31:52 <infinisil> Oh true
09:32:15 <infinisil> @unmtl (a, b) -> c
09:32:15 <lambdabot> (a, b) -> c
09:33:03 <infinisil> @unmtl Reader (a, b) c
09:33:03 <lambdabot> a -> b -> c
09:41:45 <lyxia> Zemyla: it's not equivalent to liftCallCC or liftCallCC' since those apply the continuation to some state, whereas callCC for Cont has no knowledge of state.
09:42:50 <orzo> when i say :l fails.hs in ghci, it says it's loading a bunch of modules but paradoxically omits the one module of interest that i know is used by the program because i have debug prints there that are making output on the console
09:44:12 <orzo> it wont let me set a break point there either
09:44:33 <glguy> orzo: Is the module in a separate package?
09:44:38 <lyxia> actually, it might be liftCallCC' by considering that the application of the continuation to the state can be eta-reduced away
09:45:25 <glguy> orzo: Because you can't set breakpoints on modules you're loading from another package
09:46:31 <orzo> its workin now, i must have done somehin wrong before
09:55:27 <hyperisco> salutations
09:56:36 <Lycurgus> yello hyperisco 
09:58:48 <shapr> greetz hyperisco
11:33:27 <rsoeldner> Someone already wrote a HasSwagger instance for http://hackage.haskell.org/package/servant-multipart-0.11.4 ? Struggle to implement it
12:37:40 <KellyUS> Hi. If you enjoy sexting, join me in Snapchat: kelly_crown
12:40:13 <turab> Nah
12:53:05 <fragamus> regarding record syntax, it appears that a given field can have multiple names. Is this true, and if so, why does this feature exist?
12:53:51 <glguy> fragamus: It's a shortcut to create multiple fields of the same type
12:54:00 <fragamus> oh nice
12:54:28 <fragamus> I'm glad I asked
12:59:04 <hyperisco> Must take after the same feature at the top level
13:03:08 <davean> fragamus: It follows from the same syntax for sharing a type between functions or anything else 
13:03:15 <davean> fragamus: its not special to records
13:03:49 <fragamus> I see
13:46:49 <Mrbuck> recursion thinking so hard
13:47:30 <Mrbuck> I faced a recusrion code in python and wondering with haskell thnking is same 
13:48:08 <monochrom> I am sympathetic because the feature allowing "x, y, z :: Int -> Bool" (and then x, y, z can be defined separately elsewhere) is seldom explicitly taught.  To a large extent you have to look at Prelude source code to see it used for real.
13:49:02 <monochrom> Most textbooks and tutorials will leave you with the assumption "I must put 'x :: Int -> Bool' right before the def of x".
13:49:14 <monochrom> or s/assumption/impression/
13:49:51 <MarcelineVQ> Not that I mind that myself since it assists me as a reader to mind the type directly before minding the body
13:51:44 <MarcelineVQ> It is occasionally frustrating to have to search around for the type declaration of the thing I'm looking at
13:52:07 <monochrom> And from a Java background one might not even realize that it is possible to separate type sig from def.
13:52:51 <ski> sometimes i wonder if it would be better, to have the item separator in record syntax to be `;', instead of `,'
13:53:31 <hpc> something you see rarely in literate code is all types at the top, then definitions below
13:53:36 <MarcelineVQ> I'm all for the record syntax version at least, since it's all in one place. Well I'm for options in general, I just have a preference.
13:53:38 <hpc> because it fits the narrative in the comments better
13:54:05 <ski> (the "record syntax version" being ?)
13:54:24 <monochrom> Here is one of the rare use cases when it makes sense to separate type from def.  Suppose x, y, z are a mutually recursive group, and they could benefit from the same local helper function that you think it makes no sense to put at the top level.
13:54:26 <MarcelineVQ> ... = Foo { a,b,c :: Int, ... }
13:54:52 <ski> ok (so you meant multiple identifiers sharing the same type signature)
13:55:44 <ski> monochrom : Haskell ought to have an equivalent of the SML `local'-`in'-`end', imho
13:55:46 <monochrom> So you won't be writing "x :: Int -> Bool; x n = blah".  But your could go "(x, y, z) = blahblah where helper x = etcetc".
13:56:11 <monochrom> Yeah local-in is really better.
13:56:49 <monochrom> Don't forget it even allows "local { import Data.ByteString; ... } in readFile whatever"!
13:57:15 <monochrom> And IIRC also "local { data SecretType = ... } in ..."!
13:57:22 <ski> having to say `(foo,bar,baz) = (myFoo,myBar,myBaz) where foo = ..shared..; bar x = ..x..shared..; baz y z = ..y..z..sharedl.; shared = ...' is annoying
13:57:31 <monochrom> Pretty sure all of you have covetted that one! >:)
13:57:54 <ski> monochrom : yep :)
13:58:40 <monochrom> How would you pronounce "Haskeml" if one day someone made it? >:)
14:00:15 <monochrom> Or alternatively "Hasmell" if you don't find it a name smell teeheehee
14:00:28 <ski> in O'Caml, you can write stuff similar to `Data.ByteString.(..readFile..whatever..)'
14:01:48 <MarcelineVQ> is sml the gold standard to aspire to for a modle system? if not, is there something that might be?
14:02:11 <monochrom> Yes.
14:02:24 <monochrom> But MoscowML is the platinum standard. :)
14:02:25 <MarcelineVQ> assuming I'm using the word module correctly, I'm trying toinclude the local in end stuff above when I say this
14:02:57 <monochrom> MoscowML's module system is even more general and 1st-class than SML's.  But I forgot the details.
14:03:01 <MarcelineVQ> Is platinum worth more than gold on this topic?
14:03:05 <monochrom> Yes!
14:03:08 <MarcelineVQ> ehe
14:03:19 <monochrom> But also "gold is good enough 99% of the time".
14:03:27 <EvanR> 1 plat = 5 gold
14:03:41 <EvanR> YMMV
14:04:28 * ski got a book autographed by Peter Sestoft ..
14:04:55 <monochrom> Platinum is only necessary when you're doing chemistry and need a catalyst for organic reactions, or a needle to pick up some salt and do flame colour tests. Both of which cannot use gold.
14:07:06 <ski> MarcelineVQ : `local'-`in'-`end' is like `let'-`in'-`end', but for declarations, rather than for expressions
14:07:51 <monochrom> Oh yeah I blew my first local-in mock example.
14:08:35 <MarcelineVQ> Are either of you aware how agda's module system compares to sml?
14:09:44 <ski> i believe you parameterize modules in Agda by value, not by other modules
14:09:47 <monochrom> Here is a better one. local { import Data.Text; import Data.Text.IO; import Data.Map } in { myfunc = writeFile "myfile" . pack . toList }
14:10:22 <ski> i'm not too familiar with the limits of the system, e.g. of nesting modules, mutually recursive modules, higher-order modules, and so on
14:10:44 <MarcelineVQ> ski: paramaterise by module meaning something like what backpack does?
14:10:53 <monochrom> Yeah
14:11:26 <ski> `let <local decls> in <expr> end' is an expression. `local <local decls> in <decls> end' is a declaration
14:12:21 <ski> in Lolli, you can also parameterize modules (by values, including predicates)
14:12:54 <ski> if you want to make a local assumption, you can use `-o' (linear asssumption, can (must) be used once), or `=>' (intuitionistic assumption)
14:14:07 <ski> e.g. you can do `(edge a b,edge a c,edge b d,...) -o path a k Path' to ask for a non-cyclic path in the locally assumed graph
14:14:55 <ski> (non-cyclic, because once you've noticed the face that there's an edge between two nodes, that fact/assumption/resource is used up, so you can't use it again (unless you backtrack, and try some alternative route))
14:16:37 <ski> now, if you have a sorting module `sorting Compare', parameterized on a comparision predicate, you can locally assume (an instance of) the predicates defined by that module, specialized to the particular comparision predicate you pass it, like `sorting my_compare --o ( ..sort.. )'
14:16:40 <Boarders> is there some standard function that is like scanl but which returns the last value at the end?
14:17:07 <Boarders> I can easily write it myself but I just wonder if there is something standard
14:17:11 <Rembane> Boarders: Should it throw away all the other values? 
14:17:26 <Boarders> no it should return the last element and the list
14:17:32 <Boarders> in a single pass
14:17:37 <Rembane> Boarders: Got it. 
14:17:38 <ski> > scanl (++) "" ["a","bc","def"]  -- is this not what you want ?
14:17:40 <lambdabot>  ["","a","abc","abcdef"]
14:18:56 <MarcelineVQ> ski: That's very much like backpack. Though just from what I've read; I haven't used it.
14:20:21 <phadej> :t \f b xs -> runState (traverse (\x -> state $ \s -> let z = f s x in (z,z)) xs) b
14:20:25 <lambdabot> Traversable t1 => (b -> t2 -> b) -> b -> t1 t2 -> (t1 b, b)
14:20:40 <phadej> i.e. if scanl doesn't fit, you probably want to use State
14:21:00 <ski> @type mapAccumL
14:21:02 <lambdabot> Traversable t => (a -> b -> (a, c)) -> a -> t b -> (a, t c)
14:21:03 <MarcelineVQ> Are there systems that explore what you can do when scope is first class? Caveat being that I'm not sure what that "first class scope" means, it's just a phrase that popped into my head due to this convo
14:21:27 <ski> yea, i was just about to ask what you meant by that :)
14:22:02 <Boarders> phadej: looks good thanks
14:22:19 <phadej> Boarders: yeat mapAccumL is also nice
14:22:31 <phadej> but most likely, your code will be more readable if you just use State
14:22:40 <phadej> (not as oneliner)
14:22:45 <ski> (giving bindings for free variables) an expression is reduced to a normal form (of some kind), a "value"
14:23:30 <ski> (given an input value to match) a pattern is matched (with the value), to yield bindings (of the variables in the pattern)
14:23:50 <lavalike> > mapAccumL ((join (,) .) . (++)) "" ["a","bc","def"]
14:23:52 <lambdabot>  ("abcdef",["a","abc","abcdef"])
14:23:55 <dmj`> can CPP be nested in a module
14:23:58 <ski> a command is executed for an effect
14:24:27 <ski> a declaration is *elaborated*, to yield bindings (not only value bindings, but also type bindings, &c.)
14:27:50 <ski> the structure/module language in the MLs is also about bindings. but it's a separate language, "wrapping outside" the "normal" language involving expressions, patterns, &c.
14:28:11 <hyperisco> MarcelineVQ, in PHP the scope is a mutable map, so make of that what you will.
14:28:18 <ski> (it also talks about structure and functor bindings)
14:29:04 <ski> (you can't nest the module language inside the usual language .. well, at least not without some kind of "first-class modules" extension, which has been experimented with)
14:29:21 <ski> hyperisco : yea, i don't think that's a good idea
14:29:27 <ski> (having it be mutable)
14:30:10 <hyperisco> I think changing behaviour based on what is in scope is also a little weird.
14:30:25 <ski> MarcelineVQ : perhaps having more powerful declaration language, or perhaps a module language, is what you had in mind with "first class scope"
14:31:06 <ski> sometimes people talk about "first class patterns", i suppose thinking that you could define functions that return patterns, and then be able to use calls to such where patterns are expected
14:32:02 <ski> (i'm not sure how they'd intend for that to work. afaik, stuff like pattern synonyms (or, backward modes of functions, as in Mercury), is the sensible way to do this)
14:32:38 <dmj`> dmj`: yes, you can
14:32:43 <dmj`> dmj`: thanks
14:33:07 <ski> however .. if we're talking about staged programming, then it can make sense to talk about a piece of code which has free variables, to be able to pass it around, and only later decide where those free variables are to be bound (some systems based on modal logic tries to tackle this question)
14:33:39 <ski> (and one could also imagine not only passing around expression code, but also pattern code, &c.)
14:35:51 <EvanR> expression code... pattern code... bindings code... scope code... can we begin to populate a code zoo to list all the kinds of code
14:36:04 <EvanR> (not joking)
14:36:14 <hpc> davinci code
14:36:15 <MarcelineVQ> ski: That's a lot of leads thank you
14:43:28 <ski> EvanR : well, in those descriptions, "code" was a technical term. namely a particular kind of value
14:45:41 <ski> (a few hours ago, i elaborated for a while about that (staged programming), on #haskell-offtopic)
14:47:22 <EvanR> man i am out of the loop...
15:05:57 <monochrom> EvanR: Just don't be out of the recursion, and you'll be OK!
15:09:18 <wroathe> What's the cleanest way to handle logic with multiple maybe values? The ways that I've been doing it are pattern matching in nested case statements, the maybe function, and function argument pattern matching
15:09:34 <wroathe> But in certain situations that always seems messy when I'm dealing with more than two maybe values
15:10:47 <wroathe> For example: https://gist.github.com/JustinChristensen/1571912cfbbe41a2bcc68a1eaae14194 (this probably isn't correct, I haven't compiled yet to find out)
15:11:47 <shapr> if >>= is bind, what's the textual name for =<< ? reverse bind?
15:12:53 <dmj`> shapr: that's what I say
15:13:00 <shapr> ok, thanks
15:13:01 <dmj`> or "dnib"
15:13:35 * ski . o O ( Mua'dnib )
15:16:59 <philipwhite> I have an issue that doesn't relate to haskell the language. I'm trying to build the Idris compiler, which is written in haskell, and depends on zlib (and a lot of other stuff on hackage), but both `cabal new-build` and `cabal install --only-dependencies` hang on downloading zlib.
15:18:08 <infinisil> wroathe: Looks fine to me, what library is that?
15:18:14 <philipwhite> I ran `cabal install --verbose=2 zlib` to try to pinpoint the issue, and I saw that it runs curl on the URL of the hackage tar.gz, which makes sense, but the curl call never finishes.
15:18:21 <ski> wroathe : `makePool = fromMaybe (throwM (userError "...")) (liftA3 (createPool doConnect close))' ?
15:18:37 <ski> wroathe : why are there `Maybe's in your `Config' ?
15:20:00 <wroathe> ski: I read config from multiple sources that potentially contain null fields, and then I merge them all together in order of percedence
15:20:09 <wroathe> ski: Right now I'm using Maybe to model that
15:20:15 <wroathe> But I'm not totally happy with that decision
15:20:24 <infinisil> That should really be an implementation detail
15:20:36 <wroathe> precedence*
15:21:16 <wroathe> https://gist.github.com/JustinChristensen/1571912cfbbe41a2bcc68a1eaae14194
15:21:24 <wroathe> I added another file to give you an example of what that looks like
15:21:27 <ski> wroathe : could you have `data ConfigF f = MkConfigF {dbStripes :: f DBStripes,dbKeepAlive :: f DBKeepAlive,dbConnections :: f [DBConnection],...}', and then `type MaybeConfig = ConfigF Maybe',`type Config = ConfigF Identity', with `runConfigF :: Applicative i => ConfigF i -> i Config' ?
15:21:52 <wroathe> ski: I could, and I thought about doing so, but I don't know what that would buy me
15:22:02 <wroathe> Other than the ability to use other functors instead of Maybe
15:22:12 <ski> wroathe : `initDBPool' wouldn't have to deal with `Maybe'
15:22:39 <wroathe> How so? 
15:22:44 <wroathe> I'm not following, sorry
15:23:18 <wroathe> Also, the connections aren't part of my config
15:23:20 <ski> because it'd be passed a `ConfigF Identity' (after you've collected your config and verified all fields are present, with `runConfigF')
15:23:42 <wroathe> Oh, you're suggesting a config validation step basically
15:23:55 <wroathe> Before getting to this resource initialization stage
15:23:56 <ski> oh, so why can `dbConnections' give `Maybe' ?
15:24:06 <wroathe> that's the number of connections
15:24:16 <wroathe> I just made it a config value for now, because I could
15:24:21 <ski> (i guessing at a bunch of stuff here, because i've only seen a small snippet of your code)
15:24:56 <ski> "Oh, you're suggesting a config validation step basically","Before getting to this resource initialization stage" -- yes
15:26:42 <wroathe> I'm just building a web app for fun. The main routine: 1. Reads configuration from a bunch of sources ordered by precedence and merges them into a final config value, 2. Initializes a Context for a Reader, then 3. Runs the app
15:26:51 <wroathe> Fairly standard stuff
15:27:09 <wroathe> I like your suggestion though. Thanks for that.
15:27:15 <ski> np
15:27:33 <ski> (i've seen this sort of thing before, so i was hoping it might apply in your case)
18:24:30 <d34df00d> Hi!
18:25:06 <d34df00d> Let's say I have a `class Has part r where ...` and an `instance Has r r where ...`
18:25:21 <d34df00d> Further, let's say I have `type SqlMonad r m = (MonadReader r m, Has SqlEnv r)`
18:26:13 <d34df00d> While refactoring some code, I accidentally changed a function type signature into `runSqlMonad :: (forall m. SqlMonad SqlEnv m => m a) -> IO a` and got the following warning message:
18:27:22 <d34df00d> https://bpaste.net/show/tD33
18:27:25 <d34df00d> And I figured out I have trouble understanding what does it really mean. So, what is it trying to tell me?
18:34:21 <lyxia> SqlMonad SqlEnv m expands to (MonadReader SqlEnv m, Has SqlEnv SqlEnv)
18:34:29 <lyxia> and the second constraint it redundant.
18:34:33 <d34df00d> Yep, that I understand.
18:34:40 <d34df00d> But why does it say something about fragile type inference?
18:35:41 <d34df00d> And this is probably a stupid question, but why the second constraint is actually redundant? I could have a more specific `Has SqlEnv SqlEnv`, couldn't I?
18:36:12 <d34df00d> Hmm... Disregard the last one, I guess.
18:36:29 <d34df00d> Is it safe to say that constraints not mentioning any type variables are always redundant?
18:36:33 <lyxia> I'm not sure what that comment about type inference is about either.
18:36:38 <lyxia> yes
18:37:33 <lyxia> There should only ever be at most one instance for every ground type in the whole world.
18:38:22 <lyxia> You can try to abuse/break coherence at your own risks.
18:44:05 <freusque> my mail provider can't reach trustees@hackage.haskell.org
18:44:29 <freusque> is the protocol of contacting this address to be allowed to upload to hackage still actual?
18:45:08 <freusque> I do get a forbidden response when trying to upload a candidate.
19:14:37 <dmwit> freusque: This is a great place to post, and that's on-topic here, but you might also want to post to #haskell-infrastructure.
19:14:53 <dmwit> The volume in here can get high, so if the right person isn't looking right now your message might get lost.
19:15:59 <dmwit> That said, there is http://hackage.haskell.org/users/register-request 
19:16:19 <dmwit> Oh, perhaps that's where you see the "contact trustees@" rule.
19:16:34 <dmwit> So yeah, I'd ask in -infrastructure.
20:29:27 <s-maxim> Hello everyone! I am trying to build a cross ghc to target `armv8-rpi3-linux-gnueabihf`, but I can not find a way around certain error which happens when (I think) packages are getting installed for the one of the final phases: Installing library in /home/maxim/haskell/raspberry/cross-ghc/8.6.1/lib/armv8-rpi3-linux-gnueabihf-ghc-8.6.1/ghc-prim-0.5.
20:29:28 <s-maxim> 3dist-install/build/HSghc-prim-0.5.3.o: copyFile: does not exist (No such file or directory)ghc.mk:985: recipe for target 'install_packages' failed
20:30:31 <s-maxim> Does anyone know how a workaround for this? There are similar error mentioned in https://gitlab.haskell.org/ghc/ghc/issues/16053 and https://gitlab.haskell.org/ghc/ghc/issues/16132, but I'm not sure if those are really related and what to do with those anyway
20:30:38 <s-maxim> Thanks for your help in advance
22:16:01 <slack1256> What is the extension that allows to to call `Type` to `*`?
22:21:40 <MarcelineVQ> import Data.Kind
22:24:51 <slack1256> Thank you!
22:24:54 <MarcelineVQ> there's StarIsType or NoStarIsType is you really wanted those
22:25:08 <MarcelineVQ> I forgot what they were called or I'd have mentioned that along with the import
22:32:55 <slack1256> I like imports more that extensions though
22:32:59 <freusque> dmwit: thank you, I'm trying there.
