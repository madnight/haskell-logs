00:33:17 <reactormonk> Does the haskell syntax strictly require block comments to start at the beginning of a line? Aka {- and -} are only allowed at the beginning of a line?
00:33:49 <Saulzar> reactormonk, No
00:40:47 <reactormonk> Then what is the rule for the -} not ending the comment here? https://gitlab.haskell.org/ghc/ghc/blob/master/compiler/rename/RnEnv.hs#L138
00:42:07 <Saulzar> Comments can nest
00:51:58 <reactormonk> Oh god, that's gonna get interesting. Trying to fix https://github.com/JustusAdam/language-haskell/issues/94
00:53:03 <Saulzar> Don't take me as an authority on it - but it seems to be the case..
00:59:33 <reactormonk> Looks like the definition is already recursive
01:06:34 <reactormonk> Ah, found it
01:36:26 <AMDphreak> If you'r haskell and you know it, clap your hands
01:38:39 <int-e> that was... odd.
01:41:11 <lavalike> üëè
01:42:02 <int-e> \ÍôÆ/
02:59:31 <oo_miguel> I want to add some random salt to an otherwise pure encryption function. Might I go away with using unsafePerformIO here? Or will this be an antipattern or even dangerous?
03:01:24 <Taneb> oo_miguel: that could be dangerous, in that you can't guarantee that GHC will execute the IO again each time
03:02:03 <oo_miguel> Taneb: Given the same input right?
03:02:51 <oo_miguel> like something as (myEncrypt "secret",myEncrypt "secret").. might only call the encryption once?
03:02:58 <Taneb> Yeah
03:03:07 <Taneb> Or it might call it twice, or even three times
03:03:27 <oo_miguel> calling it twice should not really matter
03:03:44 <oo_miguel> since I only get the next random number within the IO monad
03:03:46 <Taneb> My point is you've got no guarantee here at all
03:04:14 <Taneb> And if you're using randomness it's going to give you different answers for the same input, or maybe not, but you don't know
03:05:03 <oo_miguel> yes, I understand. but it will definitely call IO at least once for every unique input I suppose?
03:05:34 <oo_miguel> which does not imply it is not dangerous of course
03:07:58 <oo_miguel> Taneb: thank you!
03:53:20 <arsdragonfly> Wondering if anyone could take care of the maintenance of http://hackage.haskell.org/package/cpphs
03:53:38 <kuribas> is there a convention for naming lenses, besides underscore?
03:54:09 <arsdragonfly> hasn't received any bugfixes and breaking a whole lot of packages downstream
03:54:27 <sicklorkin> % min 1e9 2^64
03:54:27 <yahb> sicklorkin: 1.8446744073709552e19
03:55:00 <kuribas> :t 1e9
03:55:01 <sicklorkin> % min 1 2^32
03:55:01 <yahb> sicklorkin: 1
03:55:02 <lambdabot> Fractional p => p
03:55:37 <sicklorkin> % min 1000000 2^64
03:55:37 <yahb> sicklorkin: 18446744073709551616
03:56:33 <kuribas> sicklorkin: 2^64 cannot be represented exactly by a Double float
03:56:39 <sicklorkin> % min 1000000 2^64
03:56:40 <yahb> sicklorkin: 18446744073709551616
03:56:40 <int-e> kuribas: yes it can
03:56:44 <sicklorkin> % min 1 2^32
03:56:45 <yahb> sicklorkin: 1
03:56:58 <sicklorkin> I see.. wow that got me super confused
03:57:03 <int-e> kuribas: 2^64-1 can't.
03:57:55 <kuribas> int-e: ah, you're right...
03:58:05 <sicklorkin> i must lead to a lot of error in peoples code.. only when I ran quickcheck did I think it fails on the 70th pass
03:58:10 <sicklorkin> It must
03:58:28 <kuribas> sicklorkin: floating point computations are always tricky
03:58:30 <cocreature> arsdragonfly: if the maintainer is not responding there is a procedure for how you can take over a package
03:59:23 <cocreature> arsdragonfly: https://wiki.haskell.org/Taking_over_a_package
03:59:39 <kuribas> sicklorkin: the laws that apply to the reals don't apply to floats
03:59:52 <sicklorkin> % define
03:59:52 <yahb> sicklorkin: ; <interactive>:167:1: error: Variable not in scope: define
04:00:02 <sicklorkin> monotonicallyIncreasingOddsAtMinima :: Int -> Int -> Double
04:00:02 <sicklorkin> monotonicallyIncreasingOddsAtMinima minima n
04:00:02 <sicklorkin>     | n <= minima = 1
04:00:02 <sicklorkin>     | otherwise = max 1 $ min 1e6 2^(n - minima)
04:00:23 <sicklorkin> returns zero
04:00:55 <sicklorkin> in some cases.. I understand now, but looking at it i'm wonderign how could it return zero
04:02:18 <cocreature> sicklorkin: you do realize that "min 1e6 2 ^ x" parses as "(min 1e6 2)^x", right?
04:02:37 <cocreature> so the min 1e6 part isn‚Äôt useful in any way since you can simplify min 1e6 2 to 2
04:03:31 <sicklorkin> cocreature:  min 1e6 1+2
04:04:16 <cocreature> that also parses as (min 1e6) + 2
04:04:24 <cocreature> *(min 1e6 1) + 2
04:04:49 <cocreature> not putting a space around an operator does not change its precedence
04:05:14 <sicklorkin> i know that..
04:05:53 <sicklorkin> so min and + have same precedence?
04:06:46 <cocreature> function application always has a higher precedence than any infix operator
04:07:13 <sicklorkin> got it
04:07:17 <cocreature> so the function application in applying "min 1e6" to "2" takes precedence over +,^ or any other operator
04:08:28 <sicklorkin> function application then bedmass
04:11:27 <sicklorkin> cocreature: thanks
04:52:33 <mleeming> Hi, I'm trying to install the either the haskell mode for atom editor, or leksah, but they don't seem compatible with ghc-8.6.5
04:53:33 <mleeming> Is anyone aware of a free, maintained, modern (i.e. not vim or emacs) haskell mode for a linux-based environment?
04:54:18 <__monty__> mleeming: That GHC is probably too new. If you want comfortable tooling use an old GHC. That is the price currently.
04:55:33 <mleeming> Okay, thanks __monty__. Not the answer I was hoping for but you probably just saved me a lot of time.
04:55:49 <mleeming> __monty__++
04:56:27 <__monty__> mleeming: Yes, it's a little unfortunate. Thankfully, the language is awesome enough for most of us to cope without a fancy setup : )
04:57:09 <mleeming> Yeah, I'm a fan. I used it at uni but it's been a long while since I looked at it.
04:57:45 <mleeming> Quite a few new features since then.  :)
04:59:38 <cocreature> haskell-ide-engine + vscode might be an option
05:06:48 <mleeming> I'm using Ubuntu, can't get VS working sadly.  :(
05:09:31 <kuribas> mleeming: maybe intellij-haskell? https://plugins.jetbrains.com/plugin/8258-intellij-haskell
05:10:15 <mleeming> That looks promising.
05:10:33 <__monty__> mleeming: I highly recommend investing the time to learn and set up either vim or emacs btw, it pays off.
05:12:29 <mleeming> My finger muscle memory is already too tightly coupled to Eclipse editor for my day job: vim and emacs are both a bit too different.
05:35:02 <vivekramaswamy> Hello All a quick question on pointfree programming in Haskell. Please see code example here https://gist.github.com/vivekramaswamy/24e4a3e4ac16649ab11efe7d99c782a8 my question is const function has the type (a->b->a) given any two arguments it will return the first argument. As composition works from left to right, should the right way be (1 +).const but I get an error if I do that. I am confused please explain
05:36:42 <mleeming> You don't need the const function
05:36:48 <mleeming> Just do (+1)
05:37:32 <mleeming> Your error is because const is a function of 2 arguments, not one.
05:37:52 <mleeming> Alternatively do (+1).id
05:45:29 <vivekramaswamy> If I don't give const, I can only pass one argument to the function, but the deal is to pass 2 arguments
05:47:31 <[Leary]> vivekramaswamy: ((+1) . const) x y = (const x + 1) y ... Applying a number to y probably isn't what you wanted to do. But with a sane Num instance for functions, that would actually work out: (const x + 1) y = const x y + 1 y = x + 1. Doing it the other way around works without the Num instance: (const . (+1)) x y = const (x + 1) y = x + 1
05:50:21 <vivekramaswamy> Thanks Leary and mleeming, that clears. I guess you need to think lazy evaluation here.
05:52:25 <[Leary]> It doesn't really have anything to do with laziness, it's just a matter of knowing that `(f . g) x` is `f (g x)`, and checking you have your functions in the right order.
05:53:45 <dmwit> What does "composition works from left to right" mean to you?
05:53:56 <dmwit> (It doesn't line up with my understanding of composition.)
05:55:47 <vivekramaswamy> Well the function on the left hand side first gets applied to the argument and the result there of will pass to the next function in the chain. as Leary pointed out (f.g)x = f (g x). The left most function gets applied first 
05:56:36 <vivekramaswamy> Sorry I meant right to left
05:59:24 <dmwit> Yes, okay, right-to-left is correct. =)
06:11:45 <vivekramaswamy> Leary I still don't understand how you got this ((+1) . const) x y = (const x + 1) y, shouldn't const be applied to x y to give x that gets passed to (1 +) to give the answer (1 + x) . forgive me if it is a dumb question, but I am trying to figure it out
06:12:24 <__monty__> vivekramaswamy: All functions in haskell only take a single argument.
06:13:19 <__monty__> So don't think a function needs to be saturated before a result can be passed to the next function in the composition.
06:17:34 <Lears> vivekramaswamy: f x y z = ((f x) y) z, so you can completely forget about y and z when computing f x. (((+1) . const) x) y = ((+1) (const x)) y = (const x + 1) y
06:19:56 <__monty__> Or ((const x) + 1) y, for clarity
06:20:36 <vivekramaswamy> Thanks Lears, Monty and sarna, I think I need to read some more theory, but I think I am beginning to understand this.
06:23:47 <__monty__> vivekramaswamy: If you wanted to pass two arguments to const, you'd have to use the blackbird operator: `... = (.).(.); ((+1) ... const) x y = (const x y) + 1`
06:48:09 <turion> I can't use pulseaudio through pulse-simple because it throws some C error, and I can't find the source repository to report a bug. What do people use these days to simply produce some sound on Linux?
06:48:29 <turion> (I mean samples generated in Haskell, not playing a file)
07:11:40 <hpc> turion: i forget the library i ended up using, but its backend was alsa
07:11:45 <hpc> rather than pulseaudio
07:21:15 <turion> hpc: Ok, that's worth looking into. Do you have any sample code online?
07:26:25 <hpc> looks like i never pushed it to github
07:26:31 <hpc> it was just some random experimentation
07:28:30 <turion> I found the ALSA bindings a bit daunting, that's why I tried pulse-simple
07:28:37 <turion> And it used to work a year or two ago
07:29:03 <turion> I'm surprised, it seems like few people do audio in Haskell
07:29:30 <turion> I mean there's Tidal and Euterpea, and that's kind of big, but they go through MIDI, files, or SuperCollider usually
07:45:05 <turion> hpc: It was probably https://github.com/yav/alsa-haskell?
07:47:33 <turion> Has anyone ever worked with https://github.com/Ongy/pulseaudio/? I can't find examples or good docs. The test is not very illuminating.
08:05:53 <sicklorkin> why do infix operators and `fun` have lower precedence than fuctions?
08:07:32 <__monty__> sicklorkin: Because in `f x + g y` mathy convention is the functions are evaluated first?
08:08:04 <sicklorkin> okay, what about ``?
08:09:14 <lyxia> there's no obvious reason to make them different from other operators, so they're the same.
08:09:39 <sicklorkin> %  min 1 100000 `subtract` 4
08:09:39 <yahb> sicklorkin: 3
08:09:53 <sicklorkin> %  min 1 subtract 10000 4
08:09:53 <yahb> sicklorkin: ; <interactive>:169:1: error:; * No instance for (Ord (Integer -> Integer -> Integer)) arising from a use of `it'; (maybe you haven't applied a function to enough arguments?); * In the first argument of `print', namely `it'; In a stmt of an interactive GHCi command: print it
08:11:29 <cocreature> sicklorkin: you can define custom precedence for `f` just like you can for other operators
08:13:00 <sicklorkin> cocreature: is it obvious tho that flip subtract and `subtract` have different precedence? I think hlint always suggest to use `foo` instead of flip foo for example and this can lead to some undesirable outcomes
08:14:19 <cocreature> function application which you are using in "flip subtract" has a higher precedence than any infix operator, e.g., `subtract`
08:14:53 <cocreature> function names enclosed in backticks aren‚Äôt different from other infix operators in that regard
08:20:47 <sicklorkin> so `` isn't just for symbolic operators
08:20:59 <cocreature> not sure I understand the question
08:21:16 <cocreature> enclosing a name in backtick allows you to treat it as an infix operator
08:27:36 <dmwit> Random testing is too good.
08:31:23 <sicklorkin> cocreature: would it be perverse to consider `f` inheriting the fixity level of f rather than whatever `` is? I'm trying to find the code that deals with this.
08:32:00 <dmwit> Not perverse, correct.
08:32:15 <dmwit> `` doesn't have an inherent fixity.
08:32:56 <dmwit> % infixl 6 plus; infixl 7 times; plus x y = x+y; times x y = x*y
08:32:57 <yahb> dmwit: ; <interactive>:170:10: error: parse error on input `plus'
08:33:08 <cocreature> you need "infixl 6 `plus`"
08:33:25 <dmwit> heh
08:33:30 <cocreature> but yeah there isn‚Äôt some magic fixity for things enclosed in ``
08:33:34 <dmwit> % infixl 6 `plus`; infixl 7 `times`; plus x y = x+y; times x y = x*y
08:33:34 <yahb> dmwit: 
08:33:42 <sicklorkin> %  (`subtract`) 1 3
08:33:43 <yahb> sicklorkin: ; <interactive>:172:12: error: parse error on input `)'
08:33:43 <dmwit> % 3 `plus` 4 `times` 5
08:33:44 <yahb> dmwit: 23
08:33:52 <sicklorkin> % (-) 1 3
08:33:52 <yahb> sicklorkin: -2
08:34:19 <dmwit> % 4 `times` 5 `plus` 3
08:34:19 <yahb> dmwit: 23
08:34:35 <dmwit> (Evidence that `times` has different fixity than `plus` there.)
08:34:51 <dmwit> (If they were the same, one or the other of those would have done `plus` first.)
08:37:03 <dmwit> (Okay, false alarm. Maybe random testing is not *too* good. It turns out it's now discovered bugs in the test twice, and bugs in the implementation none times. Dang.)
08:37:10 <cocreature> when you don‚Äôt specify fixity it defaults to "infixl 9"
08:39:27 <sicklorkin> does fixity only apply to infix functions?
08:41:30 <dmwit> Certainly.
08:41:39 <dmwit> Wait.
08:42:01 <dmwit> Do you consider `times` (*with* backticks, not using markdown-y syntax here) an infix function?
08:42:08 <dmwit> (I do consider it infix.)
08:43:34 <sicklorkin> dmwit: i've always considered it infix, but my meaning of infix has always meant (reverse the arguments)
08:43:43 <dmwit> Wait, what?
08:43:50 <dmwit> Using a thing infix doesn't reverse its arguments.
08:44:02 <sicklorkin> i mean that `f` is analogous to flip f
08:44:07 <dmwit> Perhaps you're thinking of using it infix *and also* making a section of it by applying only the second argument...?
08:44:14 <dmwit> No, `f` is not analogous to flip f.
08:44:22 <sicklorkin> dmwit: i'm well aware of this now
08:44:26 <dmwit> However, (`f` foo) is analogous to flip f foo.
08:45:28 <sicklorkin> dmwit: i did "min 1 10 `subtract` 4"
08:45:46 <dmwit> Okay?
08:45:58 <dmwit> Same as this, with the same argument order:
08:46:03 <dmwit> > subtract (min 1 10) 4
08:46:07 <lambdabot>  3
08:46:10 <dmwit> > min 1 10 `subtract` 4
08:46:13 <lambdabot>  3
08:46:36 <dmwit> Perhaps you are confused here because subtract is already a flipped version of another operator.
08:46:39 <dmwit> ?src subtract
08:46:39 <lambdabot> subtract x y = y - x
08:47:30 <sicklorkin> >  max 10000 10 - 4
08:47:33 <lambdabot>  9996
08:47:56 <dmwit> subtract = flip (-) -- ...
08:48:40 <dmwit> ?let notSubtract x y = x - y
08:48:42 <lambdabot>  Defined.
08:48:49 <dmwit> > max 10000 10 `notSubtract` 4
08:48:53 <lambdabot>  9996
08:50:00 <sicklorkin> dmwit: anyway, i fully understand where my confusion started.. 
08:50:30 <sicklorkin> precedence of subtract and `subtract` aren't the same..
08:50:48 <sicklorkin> which was why I made my statement before about inheriting 
08:51:24 <sicklorkin> > max 1000 notSubtract 10 4
08:51:27 <lambdabot>  error:
08:51:27 <lambdabot>      ‚Ä¢ No instance for (Ord (Integer -> Integer -> Integer))
08:51:27 <lambdabot>          arising from a use of ‚Äòe_11000104‚Äô
08:52:16 <dmwit> You can sort of think of prefix function application as binding tighter than any infix function application.
08:52:17 <monochrom> There is also precedence of function application to conside.r
08:52:53 <monochrom> sin x + y = (sin x) + y.  f x g z = ((f x) g) z.
08:53:30 <sicklorkin> monochrom: right.. so getting ghc to fail type checking "max 1000 10 `notSubtract` 4" isn't possible.
08:53:38 <dmwit> (...and in prefix form, "fixity" is not a thing. All applications associate left and have the same precedence.)
09:11:47 <sicklorkin> is there a way to check an infix' fixity in ghci?
09:13:53 <dmwit> % :i +
09:13:54 <yahb> dmwit: class Num a where; (+) :: a -> a -> a; ...; -- Defined in `GHC.Num'; infixl 6 +
09:13:58 <dmwit> sicklorkin: ^
09:14:11 <dmwit> % :i subtract
09:14:12 <yahb> dmwit: subtract :: Num a => a -> a -> a -- Defined in `GHC.Num'
09:14:15 <dmwit> aww
09:14:36 <sicklorkin> > :i notSubtract
09:14:39 <lambdabot>  <hint>:1:1: error: parse error on input ‚Äò:‚Äô
09:14:44 <dmwit> % :i notSubtract
09:14:45 <yahb> dmwit: ; <interactive>:1:1: error: Not in scope: `notSubtract'
09:14:59 <dmwit> % :i times
09:14:59 <yahb> dmwit: times :: Num a => a -> a -> a -- Defined at <interactive>:171:52; infixl 7 `times`
09:15:04 <dmwit> yay
09:15:28 <dmwit> If it doesn't show a fixity declaration, it means it has the default. I can never remember what the default is, and so I wish it would show it even when it was default, but c'est la vie.
09:15:49 <sicklorkin> % time2 n = n*2
09:15:49 <yahb> sicklorkin: 
09:16:13 <sicklorkin> % :i time2
09:16:13 <yahb> sicklorkin: time2 :: Num a => a -> a -- Defined at <interactive>:180:1
09:16:23 * dmwit tries to imagine what sicklorkin is hoping fixity will mean for a one-argument function
09:16:32 <sicklorkin> lol
09:16:58 <sicklorkin> % times2 n m = n*m
09:16:58 <yahb> sicklorkin: 
09:17:03 <sicklorkin> % :i times2
09:17:04 <yahb> sicklorkin: times2 :: Num a => a -> a -> a -- Defined at <interactive>:182:1
09:18:23 <dmj`> \(shouldChangeName :: Bool) -> person { name = "bob" | shouldChangeName }
09:18:31 <dmj`> think this could be cool syntactic sugar to add to haskell
09:18:43 <dmj`> similar to [ 1 | True ], etc.
09:19:54 <dmwit> Seems pretty niche.
09:24:40 <sicklorkin> dmj`: like a ternary operator?
09:25:17 <dmj`> sicklorkin: yea, sorta. It's just sugar for \shouldChangeName -> if shouldChangeName then p { name = "bob" } else p
09:25:30 <dmj`> we do similar for lists, so why not records
09:26:31 <dmj`> dmwit: yea, that's the feedback I've been getting. Too specific
10:41:57 <dmj`> is it impossible to express recursive rules in an alex lexer spec
10:44:45 <dmj`> would like to express $thing = $maybeThing $thing, without resorting to modes
11:21:32 <vobj0> I wonder if it is that silent or I just don't have any permissions to read anything
12:25:29 <wroathe> So what do you guys think, attoparsec or megaparsec?
12:25:47 <wroathe> In terms of maturity, feature completion, performance etc
12:33:36 <dmj`> wroathe: attoparsec for speed, megaparsec for better error messages 
12:37:57 <wroathe> dmj`: Thanks
12:40:25 <__monty__> dmj`: Does that still hold though? The megaparsec author seems pretty confident that attoparsec rarely beats it.
12:41:21 <dmj`> __monty__: probably depends on what is being parsed, who backtracks less, how it was written etc. 
12:43:27 <dmj`> __monty__: people care too much about speed 
12:44:29 <__monty__> I agree, it's like Integer v. Int or Unicode v. ByteString (o.O), just go with the former unless you *know* it matters.
12:45:43 <wroathe> Honestly I'm going to go with Attoparsec just because I've got a pretty robust example of it's usage with the aeson source code
12:45:51 <wroathe> And because I'm not doing anything too heavy duty
13:01:02 <dmj`> wroathe: what are you attempting to parse? Does it have a BNF?
13:21:15 <turab> Anyhere has some interesting use case of the reverse state monad that has not been mentioned on any forum?
13:33:56 <Lycurgus> reverse state monad
13:38:44 <Cale> turab: It's kind of interesting in the context of FRP, particularly in the style of reflex-dom. I haven't yet come up with an actual use of it in a piece of shipping software, but the closest I've seen was in managing Events used to chain the tab-order of some widgets together.
13:39:36 <Cale> (so, the reverse-time state would be able to receive the backward tab Event from the following widget)
13:41:00 <merijn> Weren't there some blogposts on it (but called the Tardis monad)?
13:41:01 <conal> turab: iirc, reverse state gives a natural way to add numbers lazily, including infinite precision.
13:41:07 <conal> turab: http://conal.net/blog/posts/adding-numbers
13:41:49 <turab> Interesting. Thanks all!
13:42:49 <turab> merijn: Yea I read most of them yesterday and was curious if there were some uses not shared on any of those posts
13:44:22 <turab> ... Or if there were any I missed
14:09:47 <d34df00d> I wonder if there is a proposal for an extension to parse N-tuple (a1, ... an) as N-1 nested pairs (a1,(a2,  ... (a_{n - 1}, an))) like idris does.
14:10:03 <d34df00d> No need for N instances of classes to cover tuples of up to size N!
14:13:11 <wagle> is there a good reason this doesn't work?
14:13:13 <wagle> ii = [1..1022] :: [Int]
14:13:13 <wagle> ss = map (printf "%010b") ii
14:13:41 <hexagoxel> mapM_ ?
14:14:26 <wagle> grrr..  nothing staty printf is monadic
14:15:00 <wagle> .. says ..
14:15:11 <wagle> but that would make sense
14:15:18 <Clint> wagle: what doesn't work about it?
14:15:57 <lavalike> :t map (printf "%010b") ([1..1022] :: [Int])
14:16:03 <lambdabot> PrintfType b => [b]
14:16:18 <wagle> I just want to convert a list of ints to binary strings with leading zeroes
14:16:34 * hexagoxel was wrong..
14:16:50 <wagle> oops..  I believed 
14:16:52 <wagle> haha
14:16:52 <lavalike> that unifies with [String]
14:17:35 * hexagoxel will at some point learn to always ask for the exact error first
14:17:43 <wagle> ii = [1..1022] :: [Int]
14:17:43 <wagle> ss = map (printf "%010b") ii :: [String]
14:17:50 <Rembane> hexagoxel: But then we won't be in the same club anymore. :(
14:18:07 <lavalike> > map (printf "%010b") ([1..1022] :: [Int]) :: [String]
14:18:10 <lambdabot>  ["0000000001","0000000010","0000000011","0000000100","0000000101","000000011...
14:18:18 <wagle> it4 was a big hairy error, too big to paste here
14:19:03 <wagle> yeah, I waws uncomfortable embedding type annotations in expressions
14:19:32 <wagle> really bizarre to HAVE to embed
14:19:44 <wagle> for something so simple
14:20:07 <lavalike> printf being variadic is forcing you to action
14:23:28 <wagle> ah then, here I go (this makes me happier):
14:23:29 <wagle> showb10 = printf "%010b" :: Int -> String
14:23:29 <wagle> ss = map showb10 [1..1022]
14:26:41 <hexagoxel> type signature on ss should be sufficient, too
14:26:53 <hexagoxel> or, if type applications count:
14:27:02 <hexagoxel> % map (printf @(Int -> String) "%010b") [1..2]
14:27:03 <yahb> hexagoxel: ["0000000001","0000000010"]
14:27:49 <fulgjon> Hey, installed nixos couple days ago and it gives me a headache. I try to use a package from hackage in my project, but when I try to build it nix is saying that it's marked as broken. Why is it so? Granted, there's no default.nix in those package sources. Maybe it's silly question, but is this what makes it ‚Äúbroken‚Äù?
14:28:58 <wagle> hmmm..  more plausible than type annotations everywhere
14:34:53 <dmwit> % unwords $ map (printf "%010b") [1..2]
14:34:54 <yahb> dmwit: "0000000001 0000000010"
14:35:00 <dmwit> Look ma, no type annotations!
14:35:15 <wagle> rofl
14:35:29 <wagle> dmwit++
14:37:56 <fendor> `words . unwords /= id` right? Otherwise you could do a dummy cast
14:38:58 <pyan> What do you mean by ‚Äúdummy cast‚Äù here? Both words and unwords have monomorphic types.
14:42:00 <fendor> In the above context, unwords inferred that the type of (printf "...") must be String. If you do not want to write type annotations, but want to have this inference without context afterwards, you could write `words . unwords` to force the type to be `String`
14:42:06 <wagle> if cycles are strings, do i have to newtype them to define a new instance of Eq on them (Eq Cycle), or is there a cleaner trick in these modern times?  
14:42:36 <wagle> I wanna say "type Cycle = String"
14:42:56 <fendor> however `words . unwords` is not the id function, so it doesnt work in general
14:43:11 <pyan> Ah.
14:43:23 <wagle> and then "instance Eq Cycle where" ...
14:44:45 <fendor> wagle, newtyping is very clean
14:45:18 <fendor> so that would be the way to go 
14:46:04 <wagle> drove me mad in my youth (fighting a program with very complex typings)
14:46:36 <pyan> How would the type checker know whether a particular String is meant to be used as a String or as a Cycle?
14:46:58 <pyan> In order to select the appropriate Eq instance.
14:47:09 <wagle> (porting a large hugs program)
14:47:21 <fendor> with various new technologies like GeneralizedNewtypeDeriving, it should not be a problem.
14:47:44 <wagle> dunno..  hoped something better than newtype had occurred since my youth
14:48:15 <wagle> maybe GeneralizedNewtypeDeriving is what I want
14:48:23 <wagle> .. looking for
14:48:56 <turab>  Field1 (a, b, c, d, e, f, g, h, i, j, kk, l, m, n, o, p, q, r, s) (a', b, c, d, e, f, g, h, i, j, kk, l, m, n, o, p, q, r, s) a a'
14:49:01 <turab> This made me chuckle
14:49:57 <fendor> I dont know how complex your types are, but I had a good time with newtyping a lot of basic datatypes to add more meaning to them. Like distance, velocity, cost, etc... With all these deriving stuff it was also very easy to use them in arithmetic 
14:50:29 <wagle> 20 years ago
14:50:49 <fendor> goodness, I was a baby back then :D 
14:51:08 <wagle> i'm refiguring out newtypes now
14:51:55 <pyan> Mmm... The interaction between GADTs and GeneralizedNewtypeDeriving is kinda funny.
14:53:34 <pyan> Like, why am I seeing any GHC.Prim.coerce in error messages?
14:54:22 <pyan> I just want to break type safety in peace, without being concerned with GHC internals.
14:54:47 <fendor> pyan++
14:55:37 <fendor> damn type safety, always trying to ruin great ideas
14:59:13 <pyan> Type safety is okay. Gratuitously exposing implementation internals is not. Why do I need to know what a function called GHC.Prim.coerce exists, when I have not imported GHC.Prim anywhere? If I wanted to see implementation internals of compilation units I am not directly using, Common Lisp and C++ already exist for that purpose.
15:02:44 <wagle>   "damn the torpedoes, ROMming speed!"
15:03:02 <wagle> oopa
15:03:13 <wagle>   "damn the types, ROMming speed!"
15:03:56 <wagle> a bad comedian always blames his keyboard
15:04:36 <hpc> the keys are right next to each other
15:05:05 <wagle> (split keyboard)
15:11:59 <__monty__> fulgjon: It's marked broken because it doesn't build or doesn't pass its tests. A lot of packages are marked broken currently. I haven't really looked into why.
15:12:39 <__monty__> fulgjon: You could check out haskell.nix for a different approach. Or use an overlay to unmark them broken, I guess.
15:24:48 <colluphid> n
15:26:08 <fulgjon> __monty__: Thanks, I've already managed to build my project with overlay anyways. I was curious what's wrong with that package and if is there a way to fix it. I've just found build log on hydra. Guess I've to write to the maintainer.
16:35:42 <wagle> @hoogle uniq
16:35:43 <lambdabot> Data.Vector uniq :: Eq a => Vector a -> Vector a
16:35:43 <lambdabot> Data.Vector.Fusion.Stream.Monadic uniq :: (Eq a, Monad m) => Stream m a -> Stream m a
16:35:43 <lambdabot> Data.Vector.Generic uniq :: (Vector v a, Eq a) => v a -> v a
16:36:46 <wagle> coulda sworn I found uniq for Eq Lists on the web, but I can't find it again
16:37:17 <wagle> everything else wants hashable or ord
16:40:30 <Lears> wagle: Maybe you want Data.List.nub? An implementation using Ord should be faster though.
16:42:38 <wagle> oic, i'm blind, it wasn't actually finding Data.List.Unique
16:44:38 <wagle> nub was not an obvious name to look for or glom onto..  8/  oh well..  thanks much
16:45:06 <Lears> @hoogle Eq a => [a] -> [a]
16:45:07 <lambdabot> Data.List nub :: Eq a => [a] -> [a]
16:45:07 <lambdabot> GHC.OldList nub :: Eq a => [a] -> [a]
16:45:07 <lambdabot> Distribution.Compat.Prelude.Internal nub :: Eq a => [a] -> [a]
16:45:39 <Lears> That's what's so good about search-by-type; doesn't matter too much what the name is.
16:45:55 <wagle> oic
16:50:07 <thosgood[m]> @hoogle [a] -> (a -> [b]) -> [b]
16:50:09 <lambdabot> Prelude (>>=) :: forall a b . Monad m => m a -> (a -> m b) -> m b
16:50:09 <lambdabot> Control.Monad (>>=) :: forall a b . Monad m => m a -> (a -> m b) -> m b
16:50:09 <lambdabot> Control.Monad.Instances (>>=) :: forall a b . Monad m => m a -> (a -> m b) -> m b
16:50:33 <thosgood[m]> oh of course
16:53:05 <solonarv> thosgood[m]: also concatMap :: (a -> [b]) -> [a] -> [b]
16:53:32 <thosgood[m]> <solonarv "Tim: also concatMap :: (a -> [b]"> thanks
17:03:37 <Axman6> ... was that a Matrix reply? in my IRC? :S
17:09:45 <monochrom> Neo is replying you :)
18:10:05 <turab> Are there tools other than SYB and Uniplate that are used? I am studying generics and was just curious if there is anything else I should look into
18:10:48 <solrize_> ghc.generics
18:11:25 <Axman6> and generics-sop on top of that
18:11:36 <Axman6> (sop = sum of products)
18:11:51 <turab> Oh that also reminds of generics-eot
18:12:01 <turab> Thanks all!
18:15:26 <Axman6> ok, algorithms question. AssumeI have an array of sorted unsigned integers. I then want to rotate all those integers one bit to the left and then get a sorted array. IS there an efficient algorithms for this, given we know that the data is nearly sorted? 
18:17:49 <Axman6> It feels like I can partition by the high order bit, and then use the fact that the middle bits are in order already just fix up places where the last bit is out of order
18:18:06 <Axman6> the last bit causes the result to be out of order*
18:27:07 <turab> Sounds like an interesting problem
18:27:30 <turab> I am having trouble seeing how the data after shifting is nearly sorted tho
18:34:57 <Axman6> hmm, yeah maybe you're right
18:35:44 <Axman6> might need 4 partitions
18:44:44 <turab> There is also this interesting fact that a number's ordering might only change when the most significant bit of the bigger num is 1 and the other is 0
18:47:22 <turab> ...Ehh I don't know about that
18:47:51 <dmj`> TIL about NumericUnderscores a/ BinaryLiterals
18:48:05 <dmj`> foo :: Int = 0b0__0
18:48:10 <dmj`> s/a/w
18:49:41 <monochrom> Oh wait you can combine them?!
18:50:01 <turab> Maybe it is true. I can't come up with a counter example but also can't seem to utilize that fact if it were true
18:50:37 <mpiechotka> Sorry for if this is a stupid question but I had a few year break from Haskell. Why is "instance MonadReader r (t m) => MonadReader r (S2Fin sy s t m) where" undecidable? I'd think S2Fin sy s t m -> t m -> r so S2Fin sy s t m -> r.
18:51:23 <Axman6> 0b1001_0110, love it
18:53:16 <dmj`> yea, swift does this
18:53:41 <turab> mpiechotka: Does it complain about Coverage Cond?
18:54:21 <mpiechotka> turab: yes
18:55:23 <turab> https://ghc.gitlab.haskell.org/ghc/doc/users_guide/glasgow_exts.html#extension-UndecidableInstances
18:57:21 <turab> I think there is an explanation there. I remember having to search more about coverage conds cus I felt like I didn't really understand it from the docs
18:59:26 <dmj`> > readInt 2 (`elem` ("01" :: String)) digitToInt (drop 2 $ filter (/='_') "0b0__01")
18:59:29 <lambdabot>  [(1,"")]
19:03:07 <mpiechotka> turab: Yeah. I remember about undecidable instances. It just looks decidable for me given the functional dependencies...
19:05:12 <turab> Whoops, I meant to point to the Coverage Conditions explanation in that link
19:37:24 <turab> How often are types of rank greater than 2 used?
20:05:21 <jle`> dminuoso: i atlked about this in my most previous blog post, but i concluded that it was (Natural,)
20:33:14 <MarcelineVQ> jle`: is that a double entendre?
20:56:23 <Axman6> ;)
22:45:50 <vijaytadikamalla> hey, I am trying to setup a new stack project, it requires GHCJS
22:46:12 <vijaytadikamalla> it is giving the this error `I don't know how to install GHC on your system configuration, please install manually`
22:46:54 <vijaytadikamalla> Provided on website stack yaml 
22:46:56 <vijaytadikamalla> https://docs.haskellstack.org/en/stable/ghcjs/
22:47:40 <Lycurgus> what kind of system?
22:47:51 <vijaytadikamalla> ubuntu 18.10
22:47:59 <vijaytadikamalla> ghc version 8.2
22:48:43 <vijaytadikamalla> stack version 2.1.3
22:49:51 <Lycurgus> well I can't comment on ghcjs, it's a pain, I know that. Regular stack and ghc should work fine though although that's not a LTS ubuntu I don't think
22:49:57 <Lycurgus> but that shouldn't matter
22:50:28 <jneira> "Support for > lts-9 snapshots (GHC 8.2 and above) is currently work in progress."
22:50:40 <jneira> https://docs.haskellstack.org/en/stable/ghcjs/
22:50:41 <Lycurgus> a pointless pain imo, unless somebody else sets up and manages the tool chain
22:51:15 <Lycurgus> oh yeah i didn notice the downlevel ghc
22:51:29 <jneira> So i am afraid you'll have to build it from source
22:51:42 <Lycurgus> has ghcjs run out of steam and is pined on 8.2?
22:52:44 <Lycurgus> it's a fairly common pattern
22:52:53 <jneira> They are keeping it in sync with ghc, but building from source
22:53:10 <Lycurgus> ah
22:53:49 <vijaytadikamalla> is there anyway to specify ghc version in stack?
22:53:54 <Lycurgus> actually now think I recall it's been that way for some years
22:54:08 <Lycurgus> (i.e ghcjs)
22:54:23 <Lycurgus> yeah set in stack.yaml
22:54:32 <Lycurgus> whatever lts level
22:55:44 <jneira> i got to build it for windows so i guess building from source in linux would be factible :-P
22:55:59 <vijaytadikamalla> so using stack.yaml file provide in the website "for the latest one based on ghc-8.0.1" should not be a problem, right?
22:56:18 <vijaytadikamalla> https://docs.haskellstack.org/en/stable/ghcjs/
22:57:39 <Lycurgus> resolver: lts-13.29 is what I have set
22:57:58 <jneira> in theory it shouldn't, if your project can be built with that ghc version
22:58:15 <vijaytadikamalla> i set it to "resolver: lts-7.19"
22:58:16 <Lycurgus> (8.6.5)
22:58:47 <vijaytadikamalla> still does not work
23:01:09 <jneira> :-/  what error does it throw? the same one?
23:02:01 <vijaytadikamalla> yes
23:06:14 <jneira> mmm i'll give a try with stack (fyi there is a #ghcjs channel too)
23:07:03 <vijaytadikamalla> ok thanks!
