00:04:28 <jzyamateur> so I have a library section in my .cabal file, and an executable section also, What do I specify in executable section's "build-depends" in order to make use of library?
00:05:09 <jzyamateur> I am using stack generated template cabal file.
00:06:18 <jzyamateur> Also I have a confusion, typically module name is in uppercase, but when specified as a part of "build-depends" in executable section, it can be lower case?
00:07:19 <MarcelineVQ> You'd use the package name from the top of the file "name: foo". No, modules aren't listed in builds-depends, only packages.
00:07:57 <MarcelineVQ> that is to say if you had "name: foo" then your build depend to use the library is foo
00:08:37 <MarcelineVQ> stack templates should have this filled in already though, if the template has library and executable section already
00:10:59 <jzyamateur> I still have trouble understanding this: here is the file : https://github.com/chetnashah/haskell-morse-sample/blob/master/morse.cabal
00:11:25 <jzyamateur> the build-depends section specifies "morse" library
00:11:29 <jzyamateur> ?
00:12:21 <jzyamateur> jzyamateur: MarcelineVQ or is it a package made out of library?
00:15:50 <MarcelineVQ> Yes morse is a package that provides what's defined by library. A cabal file defines a package which is why the library's name is the name at the top of the cabal file.
00:19:40 <jzyamateur> Ah.. so cabal file "name" field specifies the name of the package being made for the library section?
00:19:46 <MarcelineVQ> Yes
00:19:56 <jzyamateur> Cool... Thanks
00:31:07 <trcc> does System.Directory getFileSize work for directories as well?
01:00:22 <redsombrero> hey all
01:22:53 <sshine> does anyone here use emacs, lsp-mode, lsp-haskell and ghcide? is it possible for you to get nicer looking type hints and errors than this? https://i.imgur.com/jlfTZTg.png
02:10:31 * hackage giphy-api 0.7.0.0 - Giphy HTTP API wrapper and CLI search tool.  https://hackage.haskell.org/package/giphy-api-0.7.0.0 (passy)
03:28:03 <jzyamateur> Was wondering why there is no type variable in this instance defn: http://hackage.haskell.org/package/base-4.12.0.0/docs/src/GHC.Base.html#line-854, where as there is typevar in this one: http://hackage.haskell.org/package/base-4.12.0.0/docs/src/GHC.Base.html#line-297
03:30:15 <merijn> jzyamateur: Do you know what the term "kind" means?
03:30:36 <jzyamateur> yeah, types classify into kinds.
03:30:59 <merijn> jzyamateur: Ok, so you know that all values have types with kind *, right?
03:31:08 <jzyamateur> yeah
03:31:27 <merijn> jzyamateur: Typeclasses have types as argument, but are *not* restricted to types of kind *
03:32:28 <merijn> jzyamateur: Within GHC typeclass constraints are represented by the kind "Constraint". Using that terminology we can say "Monoid :: * -> Constraint" i.e., Monoid is a typeclass that takes a type of kind * and returns a constraint
03:32:47 <merijn> jzyamateur: Monad, on the other hand, would be "Monad :: (* -> *) -> Constraint"
03:33:11 <merijn> This makes sense if we look at the type signature of the methods of Monoid and Monad respectively
03:33:15 <merijn> :t mappend
03:33:16 <lambdabot> Monoid a => a -> a -> a
03:33:42 <merijn> Notice that mappend takes values of type 'a' (i.e., must be of kind * since all values are) and 'a' is an instance of Monoid
03:33:45 <merijn> Compare with
03:33:48 <merijn> :t (>>=)
03:33:49 <lambdabot> Monad m => m a -> (a -> m b) -> m b
03:34:16 <merijn> jzyamateur: Notice that >>= talks about 'm a' and 'm b' and only 'm' is an instance of Monad.
03:35:13 <merijn> jzyamateur: So Monad instances require a type that "can be applied to a type", so "* -> *"
03:36:59 <jzyamateur> Ok, merijn, so If i had defined `instance Monad Maybe a where ...` we no longer would be having  `* -> *` for Maybe ?
03:37:13 <merijn> jzyamateur: Right
03:37:26 <jzyamateur> got it
03:40:27 <redsombrero> any opinion on "Should we turn to zsh on Macs?"
04:00:41 <merijn> So, any comments on how best to function call that are long due to long variable names?
04:01:24 <merijn> No maater what I to it almost always look awkward unless it's more than 3 or so lines (which it usually isn't...)
04:05:51 <redsombrero> merijn, what about alliases?
04:08:04 <merijn> redsombrero: That's what I usually for compound expressions, but now I have only 3 arguments which are all long names
04:08:42 <EvanR> in my where clause
04:08:51 <MarcelineVQ> what's it look like? hard to reccomend since the stuff in my head looks good already
04:08:53 <EvanR>   result = fun
04:08:59 <EvanR>     reallyLongName1
04:09:01 <EvanR>     reallyLongName2
04:09:03 <EvanR>     reallyLongName3
04:09:29 <EvanR> where clause solves all the things
04:11:25 <merijn> EvanR: I always find that looking fairly awkward if its only 2-3 lines, but I guess it's the best option
04:13:01 <EvanR>   result = fun reallyLongName1 reallyLongName2 reallyLongName3 -- also works depending on the width of your monitor
04:13:38 <EvanR> i know people who are rabidly against the 80 column thing
04:14:24 <EvanR> this is where they get to shine
04:15:24 <redsombrero> m
04:32:58 <Mrbuck> is there a place where ne can find haskell freelance jobs? I am not ready for haskell job but just to check them
04:40:51 <merijn> I don't know about freelance
04:41:13 <merijn> Haskell Weekly News usually has job openings, so does the haskell-cafe mailing list and sometimes /r/haskell
04:42:12 <Mrbuck> merijn: I am sure I won't be able to do full time job or in a position to get hired so I want to check the freelance jobs 
04:42:22 <Mrbuck> thanks for them
04:53:50 <jzyamateur> so in a newtype definition, we need to have only a single constructor and a single field, but multiple type variables are fine? e..g `newtype State s a = State { runState :: s -> (s, a) }
04:57:21 <merijn> jzyamateur: yeah
04:58:01 <cheater> does there exist a thing like GHC.Natural but without 0?
04:58:41 <dibblego> https://hackage.haskell.org/package/natural-0.3.0.4/docs/Natural.html#t:Positive
04:59:52 <cheater> i'm using this right now http://hackage.haskell.org/package/positive-0.4.1
05:00:01 <cheater> but i was hoping ghc had something built in, like it has naturals
05:04:02 <arampa> hi, noob question incoming:
05:06:19 <arampa> I'm trying to remove every nth occurence of a given character in a list. so far I've only been able to do one or the other (e.g., either remove every nth occurence or all occurences of the character) but I haven't been able to combine them.
05:10:11 <merijn> arampa: Well, how did you solve those individual problems?
05:12:43 <mniip> :t filterM
05:12:44 <lambdabot> Applicative m => (a -> m Bool) -> [a] -> m [a]
05:16:35 <mniip> :t \i c -> filterM (\x -> if x == c then modify (+ 1) *> ((0 ==) . (`mod` i)) <$> get else return True)
05:16:37 <lambdabot> (Eq a1, Num s, Integral a2, MonadState s ((->) a2), MonadState a2 m) => a2 -> a1 -> [a1] -> m [a1]
05:17:12 <merijn> mniip: wow, that's the most inscrutable possible solution >.>
05:17:21 <mniip> I also messed up somewhere
05:17:23 <merijn> I would've just gone with foldr...
05:17:34 <mniip> but you get the gist
05:17:44 <merijn> mniip: Honestly, I don't :p
05:17:52 * tomboy64 snickers
05:18:15 <mniip> run filterM in the state monad, increment a counter at every occurence, drop characters when necessary
05:19:24 <mniip> I wonder... do you get anything useful if you run filterM in Cont
05:19:51 <merijn> You just need "\c n -> fmap fst . foldr (foo c n) ("", 0)" with "foo :: Char -> Int -> Char -> (String, Int) -> (String, Int)"
05:20:12 <merijn> That's nearly infinitely simpler to understand >.>
05:21:18 <mniip> not so fast
05:21:49 <mniip> this needs monadchronicle
05:21:50 <mniip> I think
05:25:05 <merijn> mniip: I don't think that's going to make it more beginner accessible :p
05:25:26 <lavalike> it's gonna give them stories to tell
05:25:38 <merijn> PTSD stories :p
05:26:26 <arampa> the only problem is, this is supposed to be homework and officially we have not learned about foldr and higher order functions yet so I'm not really sure if I can use it (I can barely understand it myself)
05:26:49 <merijn> You can do the same logic via direct recursion
05:26:52 <mniip> so we start with
05:26:54 <mniip> :t \c -> Compose . Compose . map (id &&& (bool Nothing (Just ()) . (c ==)))
05:26:56 <lambdabot> error:
05:26:56 <lambdabot>     • Data constructor not in scope: Compose :: b0 -> c
05:26:56 <lambdabot>     • Perhaps you meant variable ‘icompose’ (imported from Control.Lens)
05:27:10 <mniip> :t \c -> Data.Functor.Compose.Compose . Data.Functor.Compose.Compose . map (id &&& (bool Nothing (Just ()) . (c ==)))
05:27:11 <lambdabot> Eq a => a -> [a] -> Data.Functor.Compose.Compose (Data.Functor.Compose.Compose [] ((,) a)) Maybe ()
05:27:26 <mniip> then we cna use a traverse to turn the units into sequential indices
05:27:35 <merijn> arampa: All you need is an extra recursive argument that tracks "How many times have I seen this character?" that resets when you hit the given 'n'
05:28:04 <merijn> arampa: So you need to recurse over the list and check: 1) is this element relevant to my criteria? and 2) if yes, have I seen enough to drop them
05:49:49 <cheater> is there a better way to avoid this stack with "unsupported cabal-version", other than use an older lts? https://paste.ubuntu.com/p/FdX4JGT4RT/
05:50:16 <cheater> i use lts-13.11 for that reason.
05:50:32 <merijn> cheater: The problem there is that the cabal-version is too *new*, not too old
05:50:48 <merijn> cheater: So the solution is to use an older cabal spec version
05:51:04 <cheater> it's not an error in my package.
05:51:07 <merijn> (or a newer Cabal, which presumably means a newer stack)
05:51:16 <MarcelineVQ> cheater: you using the latest version of stack?
05:51:18 <cheater> someone else has used a newer cabal spec, and stackage people have included it in the lts.
05:51:33 <cheater> MarcelineVQ: i don't know, how do i update it?
05:51:43 <cheater> updating
05:52:01 <MarcelineVQ> you run stack upgrade and then pay attention to where it puts the new bin because you'll need to make sure that's on your path
05:52:21 <cheater> oh, i tried stack update, and was sure it updated it :) thanks
05:52:48 <merijn> cheater: Stack uses Cabal to build things, Cabal is not forward compatible, so versions of stack build using an old Cabal will run into issues with packages using newer cabal versions
05:53:04 <cheater> yeah merijn
05:53:07 <MarcelineVQ> stack update has a different job, it updates the local listing of hackage packages
05:53:18 <cheater> alright, initially it looks like it's using new Cabal.
05:53:31 <cheater> since it's populating a new cache.
05:53:46 <merijn> cheater: The problem is that the stack executable's Cabal is out of date :)
05:53:58 <cheater> right, seems to have worked, thanks :)
06:03:26 <cheater> hey, i'm cleaning up my cabal file, and i have a library section with hs-source-dirs: lib, and a test with hs-source-dirs: test, and when i build the test, it can't find my modules unless i add lib to test's hs-source-dirs. is that normal? i thought depending on the library would be enough.
06:03:52 <merijn> cheater: That's not normal, no
06:04:03 <merijn> cheater: Can you pastebin your cabal file?
06:04:04 <cheater> ah, i had other-modules added to test
06:04:08 <cheater> that fixed it
06:04:10 <merijn> ah :)
06:04:26 <cheater> thanks :)
06:25:31 * hackage ghcid 0.7.6 - GHCi based bare bones IDE  https://hackage.haskell.org/package/ghcid-0.7.6 (NeilMitchell)
06:27:31 * hackage pragmatic-show 0.1.2.1 - Alternative Show class that gives shorter view if possible.  https://hackage.haskell.org/package/pragmatic-show-0.1.2.1 (leftaroundabout)
06:32:25 <merijn> Is there a convenient formulation (pointfree?) of "Monad m => (a -> m b) -> a -> m a" i.e. "\f x -> x <$ f x"
06:35:18 <boxscape> @pl \f x -> x <$ f x
06:35:18 <lambdabot> ap (<$)
06:35:20 <boxscape> seems alright
06:35:32 <merijn> Define "alright" >.>
06:35:57 <boxscape> I guess "convenient" in this context
06:36:16 <merijn> "By convenient" I mean "still readable 2 years from now"
06:36:20 <boxscape> hm, fair
06:38:31 * hackage hakyll-filestore 0.1.7 - FileStore utilities for Hakyll  https://hackage.haskell.org/package/hakyll-filestore-0.1.7 (aergus)
06:42:09 <MarcelineVQ> :t liftA2 fmap const -- idkman
06:42:11 <lambdabot> Functor f => (b -> f a) -> b -> f b
06:47:35 <MarcelineVQ> :t flip ((>>=) . return) -- all seem pretty equal in 'having to still think about'
06:47:36 <lambdabot> Monad m => (a -> m b) -> a -> m b
06:48:11 <MarcelineVQ> oop, that's b, nvm
06:52:31 * hackage core-program 0.2.1.0 - Opinionated Haskell Interoperability  https://hackage.haskell.org/package/core-program-0.2.1.0 (AndrewCowie)
06:52:43 --- mode: ChanServ set +o Sigyn
07:00:50 <cheater> i have a question. when i run cabal test, cabal says that tests are not enabled. i have to run cabal test --enable-tests for tests to build. am i missing something?
07:01:09 <merijn> cheater: Which cabal version?
07:01:20 <cheater> 3.0.0.0
07:01:54 <merijn> Ok, then the answer is "for subtle obscure reasons that people are trying to find a solution for but hasn't been decided yet"
07:02:07 <cheater> ok :)
07:02:10 --- mode: ChanServ set +o Sigyn
07:02:12 <cheater> what about cabal 2.x?
07:02:17 <cheater> should cabal test just work?
07:02:32 --- mode: ChanServ set +o Sigyn
07:03:11 <merijn> cheater: Basically the problem is this: Let's say we have a build plan to build the library. The test library adds extra dependencies so the build plan might use incompatible versions of dependencies. Now, if you keep alternating between "test" and "build" should they each continuously rebuild everything? Probably not what you want
07:03:41 <cheater> how does it prevent the rebuilds?
07:03:43 <merijn> cheater: If you build with "cabal build --enable-tests" and *then* try "cabal test" it should (I think) work
07:03:49 <cheater> aha
07:03:54 <merijn> cheater: By failing like it is for you right now ;)
07:04:12 <cheater> so the "fix" is for people to not do "cabal build" and then "cabal test", it's to have them do "cabal --enable-tests build" and then "cabal --enable-tests test"
07:04:26 <cheater> that's not a fix :) :)
07:04:31 <cheater> but ok :)
07:04:42 <cheater> i know what you're saying
07:04:47 --- mode: ChanServ set +o Sigyn
07:04:48 <merijn> cheater: Right, that's why there's an open issue :)
07:05:00 <merijn> cheater: But it's unclear what the right way to fix it is
07:05:33 <merijn> cheater: You can also control whether tests are build via cabal.project(.local) and avoid having to pass that flag
07:06:53 <cheater> oh, is there a way to make cabal print test output like stack does? :)
07:07:16 <merijn> I don't know how stack prints test output? >.>
07:07:22 <cheater> it just does
07:07:40 <cheater> so if i run check prop_whatever in hedgehog, it shows live output of tests as they're being run
07:07:51 <cheater> and it updates the count of tests that succeeded
07:08:01 <cheater> and shows green checkmarks etc
07:08:30 <merijn> cheater: oh, what command are you running *exactly*?
07:08:39 <cheater> stack test
07:08:44 <merijn> No, for cabal
07:08:51 <cheater> cabal test --enable-tests
07:09:05 <merijn> cheater: What if you do "cabal test --enable-tests all"?
07:09:16 <cheater> same
07:09:25 <cheater> it still redirects to log and doesn't show in stdout
07:09:42 <cheater> it says:
07:09:46 <cheater> Test suite logged to: /foo/bar/baz.log
07:10:00 <merijn> hmm, weird
07:10:09 <cheater> that's normal how i know it tbh
07:10:10 <cheater> :)
07:10:27 <jophish> Yo
07:11:19 <cheater> yo :)
07:12:35 <merijn> cheater: hmm, on travis cabal test definitely prints output for me
07:12:53 <merijn> But my local setup is a bit broken so I can't easily test
07:13:20 <cheater> travis uses logs to show output..
07:13:27 <cheater> :)
07:13:30 <cheater> that's why it shows output :)
07:13:30 <merijn> cheater: No
07:13:35 <cheater> really??
07:13:38 <cheater> hmm
07:13:46 <merijn> cheater: Well, that depends on how you configure travis
07:13:48 <cheater> well it's travis ... it's not normal
07:13:50 <cheater> :)
07:13:51 <merijn> But my setup doesn't
07:13:55 <cheater> ok
07:15:05 <merijn> cheater: Ah "--test-show-details" is what you want (perhaps in your ~/.cabal/config)
07:16:34 <cheater> ahh yes
07:18:00 <cheater> thanks merijn :)
07:20:32 * hackage rank2classes 1.3.1.1 - standard type constructor class hierarchy, only with methods of rank 2 types  https://hackage.haskell.org/package/rank2classes-1.3.1.1 (MarioBlazevic)
07:23:01 * hackage grammatical-parsers 0.4.1.1 - parsers that combine into grammars  https://hackage.haskell.org/package/grammatical-parsers-0.4.1.1 (MarioBlazevic)
07:26:19 <cheater> you need =direct to get color btw :)
07:28:05 <jzyamateur> `<>` is same as `mappend` for a monoid?
07:28:11 <merijn> Yes
07:28:16 <jzyamateur> Also what do you call the `<>` operator?
07:28:22 <merijn> mappend ;)
07:28:24 <cheater> mappend
07:28:28 <cheater> :)
07:28:30 <jzyamateur> hehe.. ok
07:30:27 * ski . o O ( `sappend' )
07:30:31 <jzyamateur> In mathematics though, we have a binary operation (what we are referring to as `mappend` here) in all of these: semigroup, monoid and group. Do we call it `mappend` regardless of not being monoid ?
07:31:07 <jzyamateur> oh so it becomes `sappend`, `mappend` and `gappend` respectively?
07:32:10 <geekosaur> I think at this point mappend is considered backward compatibility?
07:32:20 <geekosaur> since the semigroup one underlies the other two
07:34:39 <MarcelineVQ> I just ​call it <> but I'm a weirdo :X
07:36:04 <f-a> https://prime.haskell.org/query?status=new&status=assigned&status=reopened&group=state&format=rss <-- cert has expired, which is the correct channel to report this?
07:36:11 <f-a> #haskell-infrastructure?
07:38:10 <merijn> f-a: Probably
07:38:58 <f-a> thans
07:40:08 <f-a> I ask because last time channel was dead (then again, my last report was on a weekend too)
07:40:42 <merijn> f-a: There's also an email address, but I forgot what it was
07:41:12 <merijn> admin@haskell.org, probably?
07:43:29 <f-a> merijn: that one was ML related, so I wrote to haskell-cafe-owner@ . Good to know there is a general address too (even better if it is manned)
08:35:10 <dignisismus> In the same way that `span` has `break`, is there something like a "takeWhileNot" function? 
08:35:39 <merijn> dignisismus: "takeWhile (not . f)"? >.>
08:36:29 <dignisismus> Is that how I should write it when coding?
08:36:40 <merijn> dignisismus: That's what I do
08:36:53 <dignisismus> Ah thanks
08:37:34 <merijn> dignisismus: The answer is "below the Fairbairn threshold" (which is the mythical threshold below which it's more work to remember that something exists than it is to reimplement from simpler components)
09:25:59 --- topic: 'https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: https://gist.github.com/ | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org'
09:25:59 --- topic: set by glguy on [Sat Jan 05 07:21:52 2019]
09:25:59 --- names: list (clog toppler MindlessDrone machinedgod __monty__ alx741 conal farzad_aziz oish acidjnk_new fizbin pfurla oisdk danvet I440r Lord_of_Life dddddd m4lvin wroathe obfusk dignisismus jakalx frankunger lprd heatsink xsperry UpstreamSalmon solonarv novum urodna gentauro FreeBirdLjj ad5twoknebor[m] aristid Mesa[m]1 sputny[m] domenkozar[m] alex[m]17 mathyouguy cesar[m] link2xt[m] suhashebbar[m] biox[m] o1lo01ol1o xlogan[m] Orbstheorem[m] aitzol[m] kai10[m] abbe[m])
09:25:59 --- names: list (dominicusin[m] thekyriarchy richardax[m] nonlinear[m] iantownsend GregKNicholson[m slrtbtfs[m] alana[m]1 Cloud[m] PotatoRick[m] Undefined[m] greta[m] foxadee[m] fiddeldibu[m] cyclops19[m] adaizen[m] jhgarner[m] hifutakiko[m] carola[m]1 macerbi[m]1 ChrisPenner[m] corin[m] vikraman lerowukta[m] boutil[m] chorhizo[m] tasrev[m] ghastfilms[m] GreenKarm[m]1 somni[m] krowlan3[m] wobbol[m] NirvinM[m] nasius[m] jochens[m] midi[F][m] parmesan[m] humanwire[m])
09:25:59 --- names: list (masaeedu[m] dikini[m] keith[m] dxml[m] thosgood[m] vpei[m] SamuelH[m] whoops hackeryarn[m] supersweetsweetc aqtusia[m] phanimahesh[m] joachim[m] acowley pdxleif rruizt @Sigyn kleisli geekosaur Ariakenom Azel suspense_ Deide Tesseraction nullifidian ravenousmoose savolla xplat fendor plutoniix khisanth_ hololeap gienah Gurkenglas hpc mnrmnaugh SCHAPiE LKoen cosimone Amras t7 ggVGc Anthaas royal_screwup21 zerotech merijn klntsky regakakobigman m0rphism fweht)
09:25:59 --- names: list (Wuzzy OnkelTem cynick Lears nika Lowl3v3l henriksod shutdown_-h_now glamas sektor dmiles vlatkoB ggole reggie_ bermraj subttle day zaquest boxscape waskell lagothrix theDon abra0 DrAwesomeClaws ericsagnes jluttine carldd tabemann perrier-jouet olle vimto justanotheruser pavonia andreas303 inkbottle doublex Kaiepi ddellacosta revprez_anzio poljar1 arianvp Unhammer fr33domlover kjak jle` jb55 fendor__ essentiality[m] ps-auxw hiroaki Moyst C-16 p0lyph3m)
09:25:59 --- names: list (thunderrd avn alanz tromp_ Randy mupf DTZUZO mountaingoat meck phaul sphalerite PlasmaStar cartwright lnostdal xff0x_ johnw raatiniemi jackhill rosalux unyu thallada andi- xelxebar xtsee MarcelineVQ suppi evanjs NightA mimi_vx teardown sdrodge _xor wejetheman gxt Jesin m1cl `Guest00000 Natch earthy Dykam hc nyuszika7h jwynn6 Boarders tombusby deviantfero fphilipe jameekim stepnem aliabrar[m] taylskid dTal amiri PragCypher sagax m1dnight_ delYsid)
09:25:59 --- names: list (locallycompact rann jdevlieghere koankeeper travv0 andreabedini jophish Xeyame arkeet zmt01 dustinm- monokrome Mon_Ouie Ekho vin-ivar_ anderson_ amxxxx Philonous dashkal_ crtschin ChaiTRex Annihite1 sud0 Ring0`` loc_ bendo_ bcoppens mutantmell bitemyap1 nibbling koala_man robogoat_ habbah_ bsima ghoulguy Ckat chivay Nevoic9 rkrishnan_ vodkaInf1rno Sgeo__ jokester Rudd0^ styledash yahb albel727 tomboy64 Zemyla sujeet dopplergange literallyCrevice _ashbreeze_)
09:25:59 --- names: list (c_wraith ctag seanparsons MonkeyNOS__ evelyn pie_ qbnk4 srid rotty micro rembo10 abrar cybai zzz p3n jmsx Cale davr0s davr0s_ mozzarella nnm MoziM mounty remexre sukbeom DTZUZU tokik rubik ft sicklorkin Paks ion theorbtwo fionnan nckx cheater hiredman monochrom Intensity SquidDev roman2 ahri oats Ulrar topos prophet stux|RC seventh__ Neuromancer cpape daGrevis LnL pacak cgfbee myme abuss wrengr raoulb Jello_Raptor sandman13 fiatjaf krystianbajno darjeeling_)
09:25:59 --- names: list (dredozubov zymurgy rodgzilla blackdog lemald relrod vktec eldritch ullbeking nyaomi Cathy AkhILman d3lxa epta affinespaces Robin_Jadoul haskell_enthusia kAworu_ adarshaj crooked Xandaros PHO pharaun dmwit andromeda-galaxy mrus JSharp barrucadu w1gz hodapp jlamothe Maxdamantus gregberns_ sethetter_ simplegauss_ tumdedum tureba juri_ drdo pasukon Tspoon__ mxf_ lstdgtfp_ atle_ Kneiva_ TMA kiix1 PierreM_ Entroacceptor dfordiva1 Ke mikolaj__ ybit marble_visions_)
09:25:59 --- names: list (nitrix tsahyt_ codedmart Sparadox fiddlerwoaroof bbear_ implementation telser- kuttifunk dunningk- w1d3m0d3 theophil97 zekt83 mmaruseacph2 kosmikus Guest31486 haveo keep-learning[m] grag[m] jonge[m] labs[m] lions[m] Richy[m]1 Testitunnari[m] betz[m] gentlehelm[m] DenisLehmann[m] edwel[m] matrixyz[m] luminousnine[m] NickHu joe[m]5 georgescratcherd neurocyte[m] ist5shreawf[m] eckt[m] jwaksbaum[m] torkel[m] josiah_sama laniusfnv[m] nolep[m] alice[m]1 absnc)
09:25:59 --- names: list (fiberpunk[m] olmvnec[m] buggeas40d[m] rihardsk[m] ldesgoui[m] Ekho[m] atopuzov[m] mujx[m]1 mssx89m[m] jibby[m]1 jwerner[m] case_ratchet[m] aryaan[m] intellection3to3 BaMaung[m] fabianhjr[m] D[m]2 Hanma[m] Bertschneider[m] mmynsted[m] tomtau[m] erasure[m] vsts[m] JakeO[m] Ericson2314 spacekitteh[m] rahduro[m] peter-js[m] xmpln[m] eruvarn[m] PonyDick9000[m] josef[m] eyenx[m] jumzi[m] kaychaks[m] EuAndreh[m] neiluj[m] hans[m]6 twom[m] ppseafield[m])
09:25:59 --- names: list (guiraldelli[m] Mitch[m] kupo_[m] Hakan[m] jibby iffsid themsay[m] tuxsoy alephu5[m] seekerus3r[m] pothyurf[m] likliklik hsw[m] dlilja[m] MrAxilus yesided[m] triste[m] markus[m]4 Chromad[m] Ben[m]5 meu76[m] jak[m]1 NickHu1 Soft[m] joenase[m] asonixDogHeThey[ shiroeni[m] fulgjon MichalLaskus[m] blakec[m] imposs[m] pleasesendnudes[ amb007[m] vkleen PrimeSeeker[m] denbrahe[m] alxev[m] fswalker[m] vector[m]1 ninjatrappeur[m] hjoest[m] cbg[m] anton-latukha[m])
09:25:59 --- names: list (edejong[m] admdch[m] imdoor[m] pietromrtn[m] butterth- umachan Batholith unlink2 phreedom gargawel Cthalupa NinjaTrappeur sw1nn spion mceier ephemera_ feuerbach maralorn sshine uberj_ dolio Igloo moldybits nemesit|znc dazage calloc raduom quintasan thaumavorio gwern Velpoman JoelMcCracken wild_buffalo markus1189 good2cu defanor_ mjuad hackage insanitea atk sigmundv_ ichor linduxed jdt phadej zfnmxt thyriaen[m] mat8913[m] kylos[m] johanejg[m] k4l1gr4[m])
09:25:59 --- names: list (neat72[m] Mougan[m] qasim[m] luisjira[m] jdks[m] xethrog42[m] rainbyte[m] ponette[m] shachiku[m] buster528[m] haskelllisp[m] BoraKaplan[m]1 periapseez[m] gd2398[m] M2ktsre[m] imp0s5ible brevalda[m] kicker22004[m]1 Bimmie[m] mithrandi[m] legowheels[m] Rama[m] danielemarsella[ dl3br[m] M|GNUisnotLinux[ trevortknguyen[m jlorand[m] mgiagante[m] Alec[m]1 adziahel[m] afontain[m] Surgeon[m] Syllo[m] zopsi[m] pschooom[m] patonw[m] thekyriarchy[m]1 maxmaguire[m])
09:25:59 --- names: list (cepxuo AkikoHimenokoji[ firefly1927[m] jonreeve[m] natmac[m] MerlinGttlinger[ avocado yi[m] uelen[m] rgh[m]2 brandon123[m] glothit7ok[m] cal[m] tkots[m] ryemantis[m] bobach[m] nartir[m] texpat[m] dice[m]1 flawr[m] pagoda_5b[m] tmallard[m] sayukimans[m] klaadum[m] ciroyo[m] jay[m]1 Cenion[m] noteventime abc123zzz[m] yur3shmukcik[m] wrunt[m] M0ddba11[m] dustyp[m] cawal[m] Kit[m]2 zorkedon[m] ciet[m] Kenneth[m] ludovicdanjoumad liso[m] tempaccount1[m])
09:25:59 --- names: list (AMlivinfree[m] Paavo[m] unrooted[m] actartis[m] deikatsuo[m] heyakyra[m] yrid[m] donnyllionaire[m charliebucket[m] jeeg[m] inkstain[m] contrun[m] bartholomews[m] dude[m]1 unclechu midi[m] GhostofaConsole[ abdolence[m] rowan[m] markalanrichards jak[m] jorge-jbs[m] d0g01[m] grorg[m] alko[m] gkobeaga[m] hoohaw[m] reconmaster[m] Daquilla[m] moats mouse008[m] pqwy[m] pablo-pie[m] snupples[m] JoGoSi[m] zukken[m] GNULizard[m] vorbex[m] nybble41[m] Cele[m] ilmu[m])
09:25:59 --- names: list (freu[m] reedhhw[m] ShujaRafi[m] deklund[m] JulesRen-Georges jesusvega[m] kumarbis[m] soaoaig[m] makos999[m] bt[m] provessor[m] arianvp[m] guzmanillo[m] olep[m] Gw3n[m] themadman[m] vigilian[m] bkl[m] Noughtmare[m] aquarial[m] korlaplankton[m] jg[m] odd13[m] Vincent[m]1 teaknow[m] gmips[m] Grgoire[m] se224[m] lapav[m] PhilipWhite[m] chris[m]12 suppenkasper[m] janustroelsen[m] ovigren vhzr[m] Rich[m] EmilKarlson beaverfever[m] petrolifero[m] quiet_laika[m])
09:25:59 --- names: list (potato44[m] sm[m] ircer[m] akt[m]1 corin[m]1 vars[m] lukasubo[m] kinga06[m] aterius apurvapavaskar wildtrees[m] godzilla[m] steamedbun[m] RIOTIM[m] shanesveller[m] lihram kitsune[m] cosson[m] kahuna[m] godva[m] MarquisKurt[m] papazeus[m] sphalerit triskeon[m] M2en[m] arturo[m] oniani[m] Eclipse[m] weebull[m] yoltid[m] roberth dag[m] tet[m] tswett[m] derberg[m] JoelMcCracken[m] asayers[m]1 aquarial jak_wolf[m] hvariant[m] makos[m] pebeto[m] br0p0p[m])
09:25:59 --- names: list (SmiVan[m] miseenplace[m] linxnp[m] javjarfer[m] PoopSick[m] ookfof[m] StevenY[m] gandi[m] Jonathan[m]3 cjskaggs[m] kompass[m] dumuzid[m] nh2[m] aruncom2006[m] elosil[m] jennie[m] laith1[m] Kimani[m] gswuichet[m] crvs[m] freeman42x[m] limabeans[m] hkimhvyh[m] popo[m] krangbae[m] danielbmarkham[m max3raza[m] mujx[m5 lmolr[m] luftmensch[m] homebeach[m]1 krhubert[m] javbit[m] schum tops[m] pineapple[m] Godslatestgift[m MartinKlimi[m] friedm[m] kaiyou[m] iarp[m])
09:26:00 --- names: list (MonsieurArcher[m Brio[m] ChristopherBurg[ sudorebootnowsud tindvik[m] test_f[m] WeiTang[m] mattia[m] coil[m] xxthatgirlxx[m] paulus[m] anarcolepsia[m] wuxianhuiyi[m] bee[m]1 alexfmpe[m] VaNilLa[m] giuseppe[m]1 vk3wtf[m] srid[m] roninkaizen[m] jrozanski noam[m] aloiscochard[m] gmind[m] tejok[m] isair[m] tehidiot[m] kadoban luke-clifton[m] siraben aviD fgaz supersven[m] Videled[m] lierdakil[m] vaibhavsagar simbergm peel1 coldpress[m] sdicke[m] ternarysolo)
09:26:00 --- names: list (ClownMaster[m] boistordu sepp2k hdurer[m] afk[m] sielicki drewr xstill sylvie[m] nurupo Twey tsrt^ NONAME tabaqui cchalmers liff yumh michaelpj troydm poga bydo ekleog fliife lowryder lkurusa stzsch ent tlax tsani sellout- acro Kiruwa _deepfire matheus Majiir ixian cp iskander badzergling bgavran mr_yogurt fuzen laxask incertia aesi leah2 a3Dman eyenx dave_uy Chobbes chirpsalot spookm dequbed arahael Mzg Axman6 neildaemond stiell Jonno_FTW Clint anathema)
09:26:00 --- names: list (Vtec234 Guest82049 urdh srhb coldpress wagle Nickerson datajerk srnty ap5 yitz tinwood PtxDK infinisil mikolaj_ dqd kmelvn shachaf atomi gluegadget verement redcheck copypasteque Unode Tourist andyo bdw Rudd0 Sose TC` tomjaguarpaw lavalike sim590 noexcept gilbertw1 Niamkik subfacto1 jfredett anishathalye militia tms_ Fubar^ fryguybob rootnode kirand kwantam valdyn rotaerk ski nesqi tabaqui1 kini koz_ noan DigitalKiwi forell Foritus Vq strangeglyph Fairy)
09:26:00 --- names: list (Bergle_1 bgamari cc0k33 ccokee chindy nekomune _Tristan_ sqrt2 elcaro nee` abbe dibblego thebnq erikd yaroot echoreply APic TemporalShift iomonad lassulus tv gspia int-e lambdabot dxld haasn leothrix jrm jchia1 boj s4msung reorder_ averell tensorpudding petercommand tessier_ miklcct swater Arguggi Madars devurandom pja Slothel_ nshepperd2 grumble Enigmagic nikivi adamCS glowpelt droplet Adeon ereu nuxdie Shun131 auri_ landonf sdx23 Ranhir Hijiri MasseR orzo)
09:26:00 --- names: list (pingu_ Remavas DustyDingo caasih coot dmj` hjozwiak entel statusbot qzo enikar pikajude wz1000 lockshaw_ bjobjo joehillen inimino clynamen_ ziman rawles c-rog jzl niklasb_ teehemkay irclogger_com dminuoso johnstein michalisko madnight EvanR dumptruckman nonzen betawaffle deu wadadli apoc asm89 freusque samebchase coeus MatrixBot3 vk3wtf sea-gull ammar2 mjrosenb energizer guios dyl_ h32 tristanC klugez zerokarm1left scal_ flebron_ dixie_ comboy_ lucas8)
09:26:00 --- names: list (hyperfekt vio_ ocharles adamse pierrot devalot le_jonge jbetz TimWolla daissgr sis7 null_ptr alp mycroftiv runawayfive dan64 adadelta mniip fiQ2 Guillaum peel nlofaro obiwahn carbolymer eagleflo tomku stylewarning Klumben xacktm SolarAquarion TommyC AWizzArd esph cyberlard saurik andjjj23 amosbird johs joeyh komasa tnks bwe ambrosia_ SegFaultAX mikeplus64 arsdragonfly Hotbees idupree2 ab9rf absence silver_needles pong julienXX Taneb stefan hvr Jon aurieeeh)
09:26:00 --- names: list (polux7 lnx mingc raek ^[ jamestmartin amatecha_ dongcarl Orbstheorem darthThorik thi_ phaazon bjs metalrain jesyspa kip ajmcmiddlin ghuntley eacameron xyggos EduardoBautista dani- wildsebastian jackdk J_Arcane boeg tazjin d0liver DrDuck runeks pent gonz_ dsal milessabin typetetris ebutleriv Seich azahi bspar rzmt Athas bandali RecursiveG sm Willis Forkk uniquerockrz Bigcheese_ tdammers statusfailed amuck nil edwtjo hive-mind electrostat raoul pingiun)
09:26:00 --- names: list (Jacoby6000 opqdonut kapil_ mccoyc lexi-lambda joel135 Peter_Storm Firedancer mpickering terrorjack__ adius heyj mitchellsalad_ linoge spinda hamishmack PoliticsII_ sgraf datapup_ Tritlo benl23 sivs _janne evilmonads cruxeternus magicman bollu parseval noCheese bbear so dilinger dysfigured lyxia systemfault kav bolverkr jorj lukelau sobhan M2tias dcoutts benwr_ debugloop teej trucy pcoutin Deadhand aweinstock agrim dagit ynyounuo enemeth79 Jaxan runde)
09:26:00 --- names: list (PatrickRobotham davean sarahzrf mudri canta dh hegge cocreature a3f dolanbatar joshmeredith riatre sariyar niko rslima___ verlet64 liquorice kyagrd__ Kamuela billstclair glowcoil nbouscal PotatoGim elvishjerricco thoradam Ankhers beka vjoki aldum hsiktas chessai saidinwot1 Nikotiini kipras`away Logio duairc oeblink cross immae freeside cjay- malthe jix _ht moocow bengt_ gothos scivola angerman ysangkok hongminhee megaTherion peschkaj nisstyre cheers ycheng)
09:26:00 --- names: list (sveit dogui i7c yushyin noctux SrPx lally edwardk cyphase kaol carter nshepperd1 luite n3t totte restrictedchoice diginet puffnfresh coddinkn cbarrett atraii rom1504 petermw quaestor srk Adluc moobar graingert aidecoe deadk beaky S007 ManiacTwister pdgwien kubrat hexagoxel nopf __4matter_ Nik05 Eliel flogfr ecx86 RoguePointer suzu rootmos zv stvc Flonk shapr digia CindyLinz SlashLife qz catern Drezil charukiewicz wtw Tene ByronJohnson [exa] arw jrslepak)
09:26:00 --- names: list (Someguy123 Ornedan oleks Putonlalla deni connrs_ Squarism jtcs kqr lpsmith tstat nivpgir_ reyu noko_ DDR shadowdaemon maerwald divVerent cheshircat kraem ZoFLo joeytwiddle iron_houzi markhuge jinblack djanatyn avp sssilver luigy geal exio4 Aleksejs [df] connrs- gambpang gsingh93 michalrus Phyx- exarkun Rembane bob_twinkles Firedancer_ jvanbure artem Mo0O rodlogic bind sterni wraithm xarian greymalkin seliopou a7250ag Deewiant exferenceBot lortabac @ChanServ)
09:26:00 --- names: list (bitonic alunduil iravid Lermex epicallan monad_cat alexelcu bradparker winny nkaretnikov Nascha dpn` jsatk fredcy- natim87 Blkt banjiewen interruptinuse PyroLagus zabracks ryzokuken feepo unsymbol morgib dukedave Jabbslad sebhoss simony AfC ephemeron fingerzam xnyhps jlpeters Konehaltia jonrh scav alexknvl NemesisD casdr_ Ferdirand paf31_ edmundnoble aib bananagram `slikts mstruebing griddle dgpratt m-renaud sclv jetpack_joe lieven raid mankyKitty)
09:26:00 --- names: list (lightandlight higherorder ibloom tolt AndreasK rizary_ ProofTechnique spamlessj sebastianrkg integral mjlee nh2_ dexterfoo newhoggy TallerGhostWalt_ ryjm lsix uwap akermu vqrs Geekingfrog twk- t36s lurkless _flow_ solarus kloeri)
09:28:06 <fendor__> My haskell program can not read unicode characters from a file by default, what settings may be wrong?
09:28:08 <EvanR> the refs would also be phantomly typed
09:28:43 <c_wraith> fendor__: does the file encoding match your system's default encoding?
09:28:58 <dmj`> fendor__: call file on the file
09:29:02 <EvanR> your Handle encoding is set to a different encoding than the file
09:29:40 <fendor__> looks alright: https://pastebin.com/MbTY8D52
09:30:01 <pikajude> hmm, why would a markdown file have very long lines
09:30:02 <c_wraith> is your system encoding UTF-8?
09:30:08 <dmj`> fendor__: what is the error ?
09:30:16 <fendor__> this is locale: https://pastebin.com/2DSwr0Sk
09:30:18 <fendor__> wait a second
09:30:51 <cocreature> fendor__: note that it also matters how it is invoked, e.g., iirc cron invokes programs with LANG=C
09:30:51 * EvanR checks all the details in this story a 2nd time
09:30:54 <fendor__> https://pastebin.com/urzB4equ
09:31:16 <cocreature> wouldn’t be surprised if nix resets the locale depending on how you invoke it
09:31:16 <dmj`> fendor__: I get this error all the time with hpack and sometimes stack
09:31:48 <EvanR> i wonder if hGetContents has something to do with it
09:31:48 <fendor__> oh, yeah, should have mentioned that annoying little detail about compiling it with nix
09:32:32 <cocreature> the error is during runtime not during compile time right?
09:32:35 <cocreature> or are you reading this via TH?
09:32:36 <dmj`> fendor__: how are you invoking the binary
09:32:37 <fendor__> yes, run-time
09:32:59 <fendor__> dmj`, this particular error was triggered by `Data.Text.IO.readFile "..."`
09:33:02 * hackage cryptostore 0.2.1.0 - Serialization of cryptographic data types  https://hackage.haskell.org/package/cryptostore-0.2.1.0 (OlivierCheron)
09:33:06 <fendor__> in ghci
09:33:37 <pikajude> what if you manually set the encoding of the handle?
09:33:43 <fendor__> pikajude, then it works
09:33:49 <pikajude> oh, ok
09:33:50 <pikajude> do that then
09:33:55 <EvanR> lol
09:34:23 <pikajude> i think even bytestring readfile (which just reads a byte sequence and doesn't care what encoding it is) needs the handle to be in binary mode
09:34:28 <pikajude> but i may be wrong
09:34:31 <fendor__> pikajude, I dont know how to set the encoding for every handle that might be created. I am seeing a similar problem with servant not being able to decode utf-8 
09:34:36 <c_wraith> I think "why isn't it defaulting correctly" is still a good question.  But you probably should set the encoding specifically in robust software anyway.
09:34:41 <EvanR> why would the^
09:35:04 <fendor__> c_wraith, yeah I wanna do that, but I dont know how
09:35:10 <geekosaur> put it in the environment in main before doing anything else, although that leaves stdin with whatever the default is
09:35:12 <c_wraith> fendor__: in general, do IO as a Bytestring, convert to Text with an explicit encoding
09:35:20 <geekosaur> and stdout/stderr
09:35:43 <geekosaur> hm, mke that setLocale, but same issue
09:35:54 <pikajude> :t hGetEncoding
09:35:55 <lambdabot> error: Variable not in scope: hGetEncoding
09:35:57 <pikajude> oh
09:36:18 <pikajude> it does exist, just not in scope
09:36:21 <pikajude> :t System.IO.hGetEncoding
09:36:23 <lambdabot> GHC.IO.Handle.Types.Handle -> IO (Maybe GHC.IO.Encoding.Types.TextEncoding)
09:36:27 <pikajude> try that on the handle and see what it says
09:36:56 <fendor__> the encoding is "Just ASCII" for stdout
09:36:59 <dmj`> fendor__: I mean like, how are you running the program. Try "LC_ALL=en_US.UTF-8 ./program"
09:37:09 <pikajude> well i'm curious to know what the handle is set to by default
09:37:17 <pikajude> because that would indicate a locale issue
09:37:29 <fendor__> dmj`, project is run by systemd, but the error can also be triggered by just trying to read the file in ghci
09:37:48 <dmj`> fendor__: are you in a nix shell ?
09:37:52 <fendor__> but for the record, ghc has been installed with nix, too
09:37:55 <fendor__> dmj`, yes
09:38:02 <pikajude> if it's set to ASCII that's why it can't read the file
09:38:14 <fendor__> oh, I remember there was something about locale and running in nix-shell..
09:38:16 <dmj`> fendor__: adjust your local in your nix shellHook
09:38:18 <dmj`> locale*
09:38:40 <dmj`> fendor__: first call 'locale' when you enter the shell to see what nix is setting it as
09:38:49 <pikajude> wait, is the systemd process running it in nix-shell too?
09:39:01 <cocreature> a pure nix shell will reset the locale
09:39:02 <fendor__> dmj`, https://pastebin.com/5Unn7KQb
09:39:06 <cocreature> a non-pure shell should work I believe
09:39:07 <fendor__> pikajude, no
09:39:08 <dboussetta> hi
09:39:40 <dmj`> fendor__: get out of the nix shell, and try to run your program. Are you building it with nix-build ? If so, ./result/bin/program
09:39:42 <cocreature> for systemd, I would try setting the locale explicitly. not quite sure where it inherits it from but that sounds easy to mess up
09:40:38 <fendor__> dmj`, when I run the program, the same error happens
09:40:53 <dmj`> fendor__: outside of the nix shell ?
09:41:28 <fendor__> dmj`, yes
09:41:50 <dmj`> are you on darwin
09:41:58 <dmj`> oh, you said nixos right
09:42:36 <fendor__> dmj`, no, it is a debian vm with nix installed
09:43:08 <fendor__> cocreature, I wil try to set the locale explicitly in systemd that sounds reasonable
09:46:40 <dmj`> fendor__: what about LC_ALL=C.UTF-8 ./result/bin/program
09:47:05 <fendor__> dmj`, that works
09:47:13 <dmj`> weird
09:47:33 <fendor__> so, it seems like the encoding is baked into the haskell executable? 
09:47:41 <fendor__> maybe a nix issue?
09:47:42 <dmj`> can you set that in the nix-shell hook too then ?
09:48:04 <geekosaur> default behavior takes it from the environment. I have no idea what nix doess there.
09:48:26 <dmj`> I thought it was a nix issue, but your systems locale seems to be utf8, so it should work
09:48:46 <dmj`> you ran the program outside of the nix shell and it still failed, that shouldn't have happened
09:49:36 <dmj`> I'd try setting LC_ALL=C.UTF-8 in shellHook = ''export LC_ALL=C.UTF-8''; 
09:49:41 <fendor__> if I build and run the program with cabal, the locale seems to be correct
09:50:05 <fendor__> on a different machine though, because on the vm, there is no cabal installed
09:50:56 <merijn> What's the locale on the machine where it works?
09:52:09 <fendor__> a nixos machine: https://pastebin.com/7EQBqSeH
09:52:16 <cocreature> nix patches the locale handling in glibc in some ways iirc but I thought they should be non-problematic here
09:54:12 <fendor__> dmj`, setting LC_ALL=C.UTF-8 in a .conf file for systemd fixes the service
09:56:33 <dmj`> fendor__: woa ok, so check this out
09:57:54 <dmj`> fendor__: if you add this to your code, (mapM_ print =<< getEnvironment), and grep the output on LC, when it fails does the locale say utf8  ?
09:58:01 * hackage PyF 0.8.1.1 - Quasiquotations for a python like interpolated string formater  https://hackage.haskell.org/package/PyF-0.8.1.1 (guibou)
10:02:37 <fendor__> dmj`, https://pastebin.com/SAqEvFfV
10:03:16 <dmj`> fendor__: looks ok, and this failed? was this run outside of the nix shell ?
10:03:36 <fendor__> run outside of the nix-shell and failed, yeah
10:05:36 <cocreature> wouldn’t be surprised if it works if you set LOCALE_ARCHIVE to the locale archive in the store
10:05:45 <cocreature> I had a similar issue at some point
10:05:55 <cocreature> LOCALE_ARCHIVE is part of the patches that nix makes to glibc
10:08:57 <fendor_> sorry, I got disconnected
10:21:31 * hackage schemas 0.2.0.3 - schema guided serialization  https://hackage.haskell.org/package/schemas-0.2.0.3 (PepeIborra)
10:27:33 <geekosaur> fendor_, if you missed it, the suggestion was to point LOCALE_ARCHIVE in the environment to the one in nix's store
10:27:46 <geekosaur> apparently that's one of the glibc hacks nix makes
10:28:45 <geekosaur> and you may be seeing default behavior from an incompatible locale store to the one nix uses
10:29:04 <fendor_> geekosaur, thank you! I am happy with setting LC_ALL in the environment
10:29:54 <fendor_> so, that problem may be caused by debian locale not being compatible to nix?
10:30:32 * hackage zeromq4-simple 0.0.0.2 - More constrained extensions to zeromq4-haskell  https://hackage.haskell.org/package/zeromq4-simple-0.0.0.2 (athanclark)
10:31:11 <geekosaur> glibc can't be linked statically for the same reason, locale stuff changes internally and has to be loaded dynamically and _must_ match
10:31:29 <geekosaur> which is why all the warnings about static linking
10:31:57 <geekosaur> (likewise NSS modules and such which also must be loaded dynamically and have no stable ABI)
10:32:36 * geekosaur strongly prefers BSD libc, but linux won :(
10:33:14 <pikajude> what's one thing you like better about BSD libc?
10:38:28 <geekosaur> stable ABIs, as I just described. fewer weird behaviors (many examples in glibc mailing list discussions). actually complies with standards instead of someone saying "it's close enough and I prefer this behavior"
10:38:49 <pikajude> oh yeah, maybe i should work on learning how to read
10:38:56 * geekosaur needs to care about standards, since he doesn't exist in an all-linux environment
10:39:13 <[exa]> how much smaller is BSD libc than GNU?
10:39:22 <pikajude> about 1.3 yards
10:39:31 <geekosaur> bsds, solaris, occasionally hp/ux and other variants
10:39:58 <merijn> geekosaur: musl all the things!
10:40:13 <geekosaur> haven't checked recently but glibc has a decent amount of cruft including a lot of backward compatibility code that bsd puts in separate compat libraries instead
10:40:53 <geekosaur> oh, also checking the kernel version which means lots of kernel ABI versions hiding inside glibc and it picks which to use on the fly
10:42:20 <pikajude> ooh, fun
10:42:22 <geekosaur> bsd also tends toward more satellite libraries rather than cramming it all into one huge libc
10:42:31 <pikajude> you could use it as a random ABI version generator
10:43:04 <geekosaur> neh, it just has to check the running kernel on startup and select that ABI version for an ever-increasing number of syscalls
10:43:12 <pikajude> aw
10:44:14 <geekosaur> and some (stat() and friends come to mind) have been through a bunch of different ABI revisions; the internals of that group are particularly ugly because of how changes have been layered in
10:45:01 <geekosaur> note I'm not blaming the linux kernel for this, the changes are all reasonable on its end. glibc's handling of it is … sometimes convenient, at a high cost
10:45:39 <geekosaur> flip side, BSD forces you to keep kernel and libc in sync and you can break your system by mismatching buildworld and buildkernel
10:46:41 <geekosaur> or overwriting libc.so with one from a different kernel version, etc. (there are ABI guarantees within a given release or STABLE series, though)
10:47:13 <merijn> Also, why would you *not* want to keep those in sync?
10:48:18 <geekosaur> sometimes when testing e.g. a new device driver, you'd want to boot between different kernel versions. in BSD land this can mean switching between e.g. STABLE and CURRENT, but you also have to swap the userland stuff to do so. on linux it works as long as you use the newer glibc
10:49:36 <geekosaur> it being not unusual that an updated driver requires an updated kernel ABI, which requires a newer kernel series since the ABI is frozen within a given series
10:51:54 <geekosaur> so you have kernel and base OS on one partition and everything else on other(s), which is a good design even on linux so you can do major upgrades more easily — but then you hit e.g. linux insisting you instal everything including your add-ons in /usr/bin. which breaks this and complicates such upgrades
11:08:46 <kuribas> how do you convert between Double and Word64 (ieee)
11:08:48 <kuribas> ?
11:09:16 <kuribas> There was a library or GHC module, but I don't remember which 
11:10:12 <merijn> :t round
11:10:13 <lambdabot> (RealFrac a, Integral b) => a -> b
11:10:27 <merijn> Oh, you wanna type-pun it?
11:11:01 <kuribas> no, float to bit representation 
11:11:07 <kuribas> ieee
11:11:12 <merijn> That's what I said :p
11:11:18 <kuribas> then yes
11:11:26 <geekosaur> unsafeCoerce :p
11:11:42 <kuribas> no, there was a safe way, but I don't remember it
11:11:48 <dignisismus> Is using a filter the recommended way to remove all occurences of an item in a list?
11:11:56 <merijn> dignisismus: filter?
11:11:58 <kuribas> a GHC module
11:12:01 <geekosaur> :t (\\)
11:12:02 <lambdabot> Eq a => [a] -> [a] -> [a]
11:12:20 <ski> > "aa" \\ "a"
11:12:20 <dignisismus> merijn: As in, `filter (/=blah) list`
11:12:22 <lambdabot>  "a"
11:12:30 <merijn> dignisismus: For example
11:12:32 <geekosaur> hm, right
11:14:51 <cocreature> geekosaur: iirc unsafeCoerce doesn’t work here since they can end up in different registers which breaks something
11:15:17 <kuribas> > coerce (1.2 :: Double) :: Word64
11:15:19 <lambdabot>  error:
11:15:19 <lambdabot>      • Variable not in scope: coerce :: Double -> Word64
11:15:19 <lambdabot>      • Perhaps you meant ‘coerced’ (imported from Control.Lens)
11:16:47 <cocreature> coerce only works for newtypes
11:16:50 <infinisil> kuribas: https://stackoverflow.com/questions/6976684/converting-ieee-754-floating-point-in-haskell-word32-64-to-and-from-haskell-float/7002812#7002812
11:17:40 <kuribas> infinisil: that's not it
11:18:00 <kuribas> there was a function that directly converts double to word64
11:18:17 <dignisismus> The book says this but how come this is true? Because all ints are Nums and Integrals: `What length, take, drop, splitAt, !! and replicate have in common is that they take an Int as one of their parameters (or return an Int), even though they could be more generic and usable if they just took any type that's part of the Integral or Num typeclasses (depending on the functions). They do that for 
11:18:23 <dignisismus> historical reasons. However, fixing that would probably break a lot of existing code.`
11:18:38 <cocreature> kuribas: iirc there is castDoubleToWord64
11:20:07 <cocreature> kuribas: https://hackage.haskell.org/package/base-4.12.0.0/docs/src/GHC.Float.html#castDoubleToWord64
11:20:26 <cocreature> apparently somebody thought that it would be a good idea to hide GHC.Float from the haddocks so you have to look at the source …
11:20:27 <kuribas> cocreature: that's not exported
11:20:39 <cocreature> kuribas: it is
11:20:47 <cocreature> it’s just hidden from the haddocks
11:21:15 <kuribas> ah :)
11:22:02 <cocreature> I really hate modules that are hidden from the haddocks. if you really don’t want me to use it, don’t export it. but exporting it but not displaying it in the docs is just hostile to users
11:22:40 <dignisismus> What's the reason for hiding them?
11:23:30 <cocreature> probably because someone thought they are “internal” but not internal enough to actually not export them
11:23:33 <trcc> I need to get the size of a directory in haskell - what is best to use? system.directory getfilesize or system.posix.files getfilestatus and then filesize?
11:23:44 <cocreature> trcc: system.directory since it’s cross platform
11:23:51 <trcc> Thank you cocreature!
11:28:24 <kuribas> I wonder if "replicate n x <>" will avoid creating the list in replicate
11:29:14 <kuribas> with fusion
11:29:52 <kuribas> ugh, so much disinformation: https://www.forbes.com/sites/quora/2017/07/11/why-arent-more-programmers-using-haskell/#2911bd945952
11:30:34 <kuribas> "Haskell (like C++) is mostly a whole program compiler. "
11:31:15 <kuribas> haskell isn't a compile, and ghc doesn't do whole program optimization
11:32:08 <merijn> kuribas: It sorta does, though
11:32:23 <merijn> kuribas: It dumps entire functions in interface files and inlines those cross-module and even cross-package
11:32:35 <kuribas> merijn: only small functions
11:32:37 <merijn> Which is why you need to recompile dependencies if their dependencies change
11:32:42 <merijn> kuribas: Not necessarily
11:32:51 <merijn> kuribas: Depends how much you beat it with INLINE
11:32:58 <kuribas> merijn: you mean INLINABLE
11:33:54 <cocreature> kuribas: https://gist.github.com/cocreature/059e74057a81c41ddc232e992ec4445b looks about as good as I would expect it to look
11:34:18 <merijn> kuribas: Either works
11:34:20 <kuribas> cocreature: ah cool :)
11:35:43 <kuribas> people can tell me that the language doesn't matter, only the program design, but I don't know of any other language that lets me write high level code, and rewrite into efficient code.
11:35:57 <cocreature> kuribas: but it only seems two work if you don’t partially apply (<>), otherwise it doesn’t inline (++) because it’s not saturated
11:37:10 <kuribas> cocreature: you used a lambda?
11:37:26 <cocreature> kuribas: `f i a xs = replicate i a <> xs`
11:37:47 <kuribas> what about (replicate i a <>) <$> xs ?
11:38:44 <cocreature> try it out yourself ;)
11:39:07 <cocreature> although that’s something rather different, did you mean (replicate i a <>) $ xs
11:39:56 <kuribas> nope
11:44:31 <kuribas> cocreature: I don't quite understand the core, but it looks efficient :)
11:45:19 <kuribas> cocreature: if I specialize it to List and IO
11:46:17 <dignisismus> There's `isLatin1` but no `isLatin2` or `isLatin`, why does it have that name?
11:46:39 <cocreature> kuribas: efficiency is measured in the number of magic hashes in the generated code
11:47:00 <kuribas> cocreature: then it's extremely efficient
11:47:03 <merijn> dignisismus: latin2 is the name of an encoding
11:47:06 <merijn> dignisismus: eh, latin1
11:47:14 <merijn> dignisismus: There's no such thing as latin2
11:47:26 <dignisismus> Ah I see, thank you
11:48:47 <kuribas> cocreature: oh I see, it's casting IO [Int] to RealWorld -> (RealWorld, [Int])
11:48:55 * ski . o O ( <https://en.wikipedia.org/wiki/Latin-2> )
11:49:16 <dignisismus> haha
11:49:23 <merijn> ski: Ok, rephrase: apparently it does exist, but no one cares :p
11:49:35 * ski smiles
11:49:56 <pikajude> who even speaks latin? no wonder it's not widely used
11:50:36 <kuribas> pikajude: De gustibus non est disputandum
11:50:38 <merijn> latin1 is 8 bit ASCII superset commonly used for western european languages that don't fit within ASCII (which is only 7 bit)
11:51:07 <pikajude> i know :)
11:55:32 * hackage symbiote 0.0.2 - Data serialization, communication, and operation verification implementation  https://hackage.haskell.org/package/symbiote-0.0.2 (athanclark)
12:03:52 <geekosaur> you can't usefully distinguish any of the latin-N encodings
12:04:50 <geekosaur> so in effect isLatin1 means isAn8BitEncoding, as opposed to 7-bit ASCII or UTF8 which has specific structure
12:05:23 <merijn> geekosaur: What?
12:05:25 <merijn> :t isLatin1
12:05:26 <lambdabot> Char -> Bool
12:05:49 <merijn> geekosaur: isLatin1 just says if a unicode Char falls within latin1 and you can trivially determine that
12:05:53 <geekosaur> right, you can tell it uses 7 bits, uses 8 bits, or in that case is a codepoint which goes over 255
12:06:03 <geekosaur> right, bt the question was why no latin2
12:06:09 <geekosaur> and the answer is "you can't tell"
12:06:39 <merijn> geekosaur: What? Presumably there's a finite number of codepoints in latin2 so why wouldn't you be able to tell if a character is representable in, say, latin2
12:06:53 <geekosaur> because they all use the same 255 codepoints in roughly the same ways
12:07:25 <geekosaur> and especally with only one character you're not guessing which one
12:07:29 <merijn> geekosaur: Does or doesn't latin2 have a unique mapping of 255 byte values to characters?
12:08:03 <geekosaur> the lower 128 are the same for all. the upper ones vary but not in ways you can easily distinguish, and there's no additional information about codepoints as with unicode
12:08:28 <merijn> geekosaur: isLatin1 specifies whether a unicode character is *encodable* as latin-1, you can sensibly get a Char without knowing the encoding you're decoding from, so it's obviously useless for deciding decoding
12:08:31 <geekosaur> you can't ask much more than "is this a letter?" which any given codepoint is/isn't in most of the iso8859 encodings
12:08:57 <merijn> s/you can/you can't/
12:09:49 <merijn> It's perfectly sensible to have isLatin2 which specifies you can encode something as latin2 as this question is completely unambiguous
12:09:57 <geekosaur> oh. not as useful, sounds more like ghc helper for its "can I use iso8859-1 default output" and "who cares about the other encodings anyway?" (I disagree with the latter, but unicode did kind of kill them)
12:10:39 <EvanR> isLatin1... is this character somewhere in latin 1... interesting
12:10:42 <geekosaur> recall the question of how to deal with upgrading ghc's output handler to do locales properly instead of just truncating by default (anyone remember utf8-string package?)
12:11:21 <pikajude> did it do that?
12:11:23 <pikajude> i use that package
12:11:56 <geekosaur> back in the ghc 6.8/6.8 days, it just truncated to 8 bits, yes. unless you forced utf8 encoding yourself, which is what that package let you do
12:12:03 <merijn> pikajude: What? Why?
12:12:22 <pikajude> err, i don't remember
12:12:23 <geekosaur> it's still useful in other contexts, e.g. xmonad uses it to utf8-encode into X11 properties which are still 8bit strings
12:12:37 <pikajude> for encoding UTF8 strings to Word8 lists and back
12:12:53 <merijn> geekosaur: But you can do that with Text too
12:13:15 <pikajude> true, but if you have a String coming from some other source, it's a bit more convenient
12:13:58 <merijn> In entirely unrelated news: Anyone have experience in how to guesstimate an appropriate epsilon for double value comparison?
12:14:16 <geekosaur> we don't have a Text dependency, possibly it should be considered at some point but we stick close to C API and mostly short strings and I'm not sure Text gains much here. and would cause major API breakage because xmonad was designed to be really minimal and sticks very close to the original C APIs
12:14:18 <geekosaur> sigh
12:14:45 <geekosaur> sjanssen even gave up on trying to revise it to use xcb without breaking everything
12:14:48 <EvanR> i never understood epsilon comparison of floats
12:15:28 <EvanR> why is any epsilon better than == (which amounts to some epsilon itself)
12:16:18 <geekosaur> er? because there's often dross in the low bits, because IEEE FP is inexact. and (==) on Float or Double doesn't apply an epsilon, it's an exact comparison
12:16:49 <EvanR> you can interpret == on floats to be "within whatever distance" (distance depends on the arguments magnitude)
12:17:11 <merijn> EvanR: Not a single language does that
12:17:17 <EvanR> um
12:17:24 <merijn> EvanR: That would also be really annoying for when you DO want exact comparisons
12:17:24 <EvanR> that is just what floats are
12:17:27 <geekosaur> but (a) that isn't how it works now (b) and "whatever distance" depends on how you used it and how you computed it
12:17:55 <EvanR> if you interpret a single float as "some real between +/- ULP/2"
12:18:06 <merijn> EvanR: The epsilon of float encoding is too small to properly handle rounding errors
12:18:19 <EvanR> at this point rounding errors were already committed
12:18:22 <merijn> too many false negatives
12:19:40 <EvanR> so is the answer to my question, doing some weird "within delta" calculation more accurate than == ? heh
12:19:45 <merijn> EvanR: Maybe all your float computations always run completely deterministic order of operations, but mine certainly don't, so that interpretation is rather useless for me
12:19:48 <heatsink> merijn: You could propagate the errors algebraically
12:20:02 <merijn> heatsink: You can't
12:20:02 <heatsink> Your ideal calculation is computing f(x, y, z) exactly
12:20:04 <EvanR> i just don't see how that intuitively makes sense
12:20:23 <heatsink> Your real calculation is f'(x + dx, y + dy, z + dz) where dx, dy, dz are bounded
12:20:43 <heatsink> and each operation in f' introduces some additional error that you can also calculate
12:20:45 <merijn> Yeah...none of this high brow stuff is remotely relevant for me
12:21:05 <merijn> heatsink: I don't have until the heat death of the universe to compute this stuff
12:21:11 <EvanR> i think we are asking the same question though
12:21:54 <EvanR> if the implied epislon for == is too small and needs to be bigger, then how much bigger (and why)
12:22:14 <EvanR> it can't be smaller surely
12:22:25 <merijn> EvanR: Why is easily answered
12:22:42 <EvanR> also if some choice is too large, why
12:22:56 <merijn> EvanR: Because IEEE754 floats operations aren't commutative and rounding error thus depends on order of operations
12:23:25 <EvanR> you have formulas that are supposed to compute the same thing but don't because different order of operations
12:23:32 <merijn> Or not associative, I think
12:23:33 <merijn> Either way
12:23:41 <EvanR> ok
12:24:25 <EvanR> i presume you don't expect there to be a 100% right answer
12:24:51 <merijn> Not one describable with finite precision
12:25:23 <merijn> It's a fixpoint algorithm, but since doubles are finite precision there's no way to guarantee it actualy converges to a fixpoint
12:26:05 <heatsink> If you're using an iterative solver, then it converges to near the true fixed point even when there is FP rounding
12:26:07 <nshepperd1> EvanR: calculations with more than one operation often end up with more than 1 ulp of error because of intermediate rounding
12:26:33 <heatsink> (except for very ill-behaved inputs, which you would want to avoid anyway)
12:26:33 <EvanR> i understand that much
12:26:51 <merijn> heatsink: I'm not using a solver and I don't control my inputs
12:26:54 <EvanR> but out of the blue comparing two arbitrary floats using a larger window didn't
12:27:35 <heatsink> Hmm.  Iterative solvers are the only situation I know of where you'd compute a fixpoint involving FP numbers.
12:27:54 <nshepperd1> The ideal calculation returns the nearest floating point number to the true real number answer, in which case == tells you whether it's correct, but that's not always achievable
12:27:55 <merijn> heatsink: Pagerank
12:29:18 <nshepperd1> EvanR: well, i guess comparison with an epsilon is more like "i can't prove that these two values are different if epsilin/2 of rounding error is assumed"
12:30:19 <nshepperd1> So the correct epsilon depends how much error you predict your calculation to have
12:31:02 <EvanR> we're talking of 1 calculation and 2 numbers...
12:31:14 <EvanR> i think the secret is merijn is iterating
12:40:20 <EvanR> > show (undefined :: Void)
12:40:21 <lambdabot>  "*Exception: Prelude.undefined
12:40:22 <heatsink> merijn: I looked at pagerank on wikipedia.  It's solving for a vector R that satisfies 0 = (1-d)/N * 1 + d (L - I) R
12:41:36 <heatsink> merijn: For an ideal calculation, that expression on the RHS would evaluate to the zero vector.
12:42:05 <heatsink> merijn: You would want to calculate that vector, take the norm, and use that norm as your error metric
12:42:43 <heatsink> I still don't know the right bound to compare it against.  But at least this simplifies the FP error to a single number.
12:43:18 <merijn> Simplifying to a single number that I don't know how to compute is isomorphic to not simplifying anything >.>
12:43:36 <heatsink> Hey, it gives you a total ordering
12:43:49 <heatsink> Out of two answers, you can decide which is worse
12:44:12 <merijn> I don't really care, I just care about "is not obviously wrong"
12:45:21 <WorldSEnder> hey I'm wondering if someone can help me. I'm working with polysemy+constraints, trying to figure out how to write Members u r :- Members u (e : r) and I don't even know where to start
12:46:35 <trcc> So I have created my first semi-production haskell backend (rather small), and I would like some feedback, as I do not have any colleagues or similar with Haskell knowledge. What is the best approach to getting this? Are there any Haskell Mentors doing this? A good mailing list for such stuff, or is Reddit the best approach?
12:47:24 <merijn> trcc: Mail haskell-cafe or make a post on /r/haskell?
12:47:27 <merijn> Or ask here :p
12:48:50 <trcc> https://github.com/INTO-CPS-Association/utilities_backend :D
12:49:03 <trcc> Think i'll try the haskell-cafe
12:49:15 <trcc> I did not know about that
12:51:33 <trcc> https://github.com/INTO-CPS-Association/utilities_backend is my first semi-production haskell backend. If anyone has some good comments on topics that I should look into, improvements or similar, please let me know. But keep it within reach if possible :)
13:12:28 <nshepperd1> merijn: find the correct epsilon by experiment! Keep increasing epsilon until 1000 random test cases pass :p
13:14:32 <hpc> let epsilon = 1/0
13:15:55 <[exa]> hpc: sufficiently small
13:16:46 <nshepperd1> Infinity is sufficiently small for government with
13:18:18 <ChaiTRex> > ceiling (1.0/0.0) -- infinity is smaller than you think
13:18:20 <lambdabot>  1797693134862315907729305190789024733617976978942306572734300811577326758055...
13:18:58 <fenedor> lol
13:25:44 <[exa]> wow I'm writing that down. :D
13:27:37 <dignissimus> Is there a function that I can use the get the upper/lower bounds of a type?
13:28:20 <lavalike> :t (minBound, maxBound)
13:28:21 <lambdabot> (Bounded a, Bounded b) => (a, b)
13:28:29 <dignissimus> Thanks
13:28:42 <lavalike> np!
13:31:17 <Iceland_jack> type (~𝈖) = Coercible
13:31:20 <Iceland_jack> https://www.reddit.com/r/haskelltil/comments/dh9z2a/type_coercible/
13:31:48 <sternmull> If i define "and _ False = False; and x True = x" then that would prevent short circuit behavior in "all xs = foldr and True xs", right? If so... isn't that problematic in terms of predictability of resource usage?
13:33:33 <Iceland_jack> and = flip (&&)?
13:34:10 <sternmull> i think so
13:34:17 <Iceland_jack> (that's fold @(Dual All))
13:34:52 <sternmull> i don't understand
13:36:48 <Iceland_jack> @let myAnd = Data.Coerce.coerce (fold :: [Dual All] -> Dual All) :: [Bool] -> Bool
13:36:49 <lambdabot>  .L.hs:255:5: error:
13:36:49 <lambdabot>      Not in scope: ‘Data.Coerce.coerce’
13:36:49 <lambdabot>      No module named ‘Data.Coerce’ is imported.
13:36:54 <Iceland_jack> @let myAnd = coerce (fold :: [Dual All] -> Dual All) :: [Bool] -> Bool
13:36:56 <lambdabot>  .L.hs:254:9: error:
13:36:56 <lambdabot>      • Variable not in scope:
13:36:56 <lambdabot>          coerce :: ([Dual All] -> Dual All) -> [Bool] -> Bool
13:36:57 <Iceland_jack> oh well
13:38:34 <Iceland_jack> It works from Right-to-Left
13:38:34 <Iceland_jack>   >> myAnd [True,error "LEFT", error "RIGHT",True]
13:38:34 <Iceland_jack>   error: ** Exception: RIGHT
13:38:50 <sternmull> what i wonder is that it seems to be quite important to know what argument is the lazy one
13:39:18 <Iceland_jack> oh yeah
13:40:11 <sternmull> For && and other its probably the second argument that is lazy. But where is this documented? Is it even guaranteed by the standard?
13:41:36 <c_wraith> sternmull: it is.  (&&) is required to behave as though it was implemented False && _ = False ; True && x = x
13:43:10 <boxscape> page 112 of the Haskell 2010 report gives the implementation of (&&)
13:43:24 <sternmull> c_wraith: Hm, ok I see that it is defined this way in the Haskell 98 prelude. So this means that everybody has to follow that definition.
13:43:58 <sternmull> It just occurred to me that this is an important detail.
13:44:23 <c_wraith> not that they have to use that definition, just that they must implement it in a way indistinguishable from that definition
13:44:33 <c_wraith> and yes, it is important.
13:44:47 <geekosaur> strictness in particular must match
13:45:01 <geekosaur> in a lazy language that's quite the important detail
13:46:05 <sternmull> Sure. Its just that this detail is quite hidden. For example the documentation for && does not mention it.
13:46:20 <boxscape> it probably should
13:47:36 <boxscape> hm, would there be a  way to define a function f that returns False both for arguments `f undefined False` *and* `f False undefined`? I'm guessing no?
13:47:55 <boxscape> uh
13:48:02 <boxscape> it also must return True for `f True True`
13:48:13 <sternmull> I don't think so.
13:48:16 <c_wraith> There isn't a way without cheating
13:48:17 <boxscape> okay
13:48:23 <c_wraith> fortunately, there is a package for cheating
13:48:29 <sternmull> But that would be cool :)
13:48:38 <boxscape> c_wraith what is that package?
13:48:56 <c_wraith> http://hackage.haskell.org/package/unamb-0.2.7/docs/Data-Unamb.html#v:pand
13:49:11 <sternmull> you would have to "peek" the values without forcing them, right?
13:49:12 <boxscape> interesting, thanks
13:49:17 <c_wraith> it's really heavy-weight
13:49:32 <c_wraith> so it's not really recommended unless the calculations are expensive
13:49:52 <c_wraith> or you are willing to sacrifice a lot to be maximally defined
13:50:12 <monochrom> The "parallel or" problem.
13:50:17 <boxscape> mostly I'm interesting in how the cheats work rather than actually using them
13:50:28 <WorldSEnder> you could unsafeIO evaluate them :x
13:50:37 <c_wraith> it launches threads to do both calculations at once, then combines their results
13:50:57 <monochrom> The cheat uses the fact that in IO an exception is distinguishable from an infinite loop.
13:51:04 <boxscape> I see
13:51:27 <monochrom> And then unsafePerformIO to do that behind your back.
13:52:27 <monochrom> oops, this one uses parallelism.
13:52:46 <monochrom> But there is an acme-spoon which catches exceptions.
13:52:58 <sternmull> isn't that behavior of && violating the statement "if there is a way to evaluate it then lazy evaluation will succeed"? "False && undefined" and "undefined && False" could both be evaluated to False, but Haskell will fail for the second.
13:53:20 <merijn> sternmull: Haskell isn't actually defined to be lazy, though
13:53:34 <c_wraith> it does violate that statement, but that statement isn't how Haskell is defined
13:56:45 <monochrom> No, this is not a violation.  To show a violation, you must define (&&) first.
13:57:25 <monochrom> You must give code for (&&) rather than some axiomatic specification that you don't know whether it could be coded up or not.
13:57:28 <Nolrai> That statement is not the definition of lazy I've seen.
13:58:03 <monochrom> The theorem asserts it for lambda terms (or actual code), not abstract specifications.
13:59:03 <Nolrai> Anyway is there a standard way to get the type of an expression as a string? Like for error messages?
13:59:22 <ski> @type show . typeOf
13:59:23 <lambdabot> Typeable a => a -> String
13:59:28 <monochrom> If you accept Typeable then use typeOf.
13:59:37 <Nolrai> That will work great.
14:07:37 <dignissimus> How can I redefine (==) just for one typeclass?
14:08:13 <juri_> make an eq instance for that typeclass manually?
14:08:24 * ski doesn't understand question
14:08:27 <merijn> I think you mean datatype?
14:08:29 <juri_> or, rather, Eq.
14:09:04 <dignissimus> I think so, I'll check the difference between the two words
14:09:14 <merijn> dignissimus: Eq is a typeclass
14:09:26 <juri_> sorry. brain not working failure.
14:09:28 <merijn> dignissimus: Specifically, the typeclass providing == and /=
14:09:50 <dignissimus> Ahh, yes I meant data type
14:11:42 <juri_> hey, I've written some very ugly haskell code to solve a trigonometric question. would someone care to tell me how to make it not hideous? https://github.com/colah/ImplicitCAD/blob/master/Graphics/Implicit/ObjectUtil/GetBox2.hs#L121
14:21:26 <dignissimus> I got it! If I wanted for some reason to redefine equality on Booleans, I could do (==) a b = (a::Bool) /= (b::Bool)
14:22:31 <dignissimus> Nope, it doesn't work, and I'm using ghci so it might be different to what I'd get compiling a programme
14:24:08 <merijn> dignissimus: You can't
14:24:40 <merijn> I mean, I guess you can, just not in a useful way :p
14:24:53 <dignissimus> Could I do it for data types that I define?
14:24:59 <merijn> > let a == b = a * b + a in 5 == 3
14:25:01 <lambdabot>  20
14:25:13 <merijn> dignissimus: Yes, by defining an instance of Eq for those types
14:32:22 <WorldSEnder> you can have only one instance of a typeclass for each datatype, see also https://stackoverflow.com/questions/9545866
14:50:01 * hackage eventstore 1.3.3 - EventStore TCP Client  https://hackage.haskell.org/package/eventstore-1.3.3 (YorickLaupa)
14:53:51 <Nolrai> ANyone here know SBV? I am trying to use 'select', but I get the "default" value when ever I use a symbolic value as the index, even if its been constrained to be within bounds. Do I have to create concrete values for the indexes? (Using perhapse a different source of non-determanism?)
15:07:29 <dignissimus> merijn: I read on in the book, I understand what it means to define an Eq instance for a type now
15:07:38 <dignissimus> Thanks o/
15:09:49 <Iceland_jack> newtype PAny = PAny Bool; instance Semigroup PAny where (<>) = coerce por
15:09:49 <Iceland_jack> newtype PAll = PAll Bool; instance Semigroup PAll where (<>) = coerce pand
15:10:35 <lyxia> P for parallel?
15:15:34 <ChrisPenner[m]> Yo! For anyone who's missed it so far, I'm working on a book on lenses and optics from beginner to advanced! Early access is available, check it out: https://patreon.com/chrispenner
15:15:34 <d0liver> Is there a way to take an `Except ...` and put it into the context of an `ExceptT ...` without having to explicitly unpack and repack it when the ExceptT is at the top of the stack?
15:18:49 <d0liver> This is what I'm doing right now: `rethrow = either throwError pure .. runExcept`
15:19:18 <d0liver> `..` is composition there.
15:19:30 <merijn> d0liver: You probably want mmorph
15:19:33 <merijn> @hackage mmorph
15:19:33 <lambdabot> http://hackage.haskell.org/package/mmorph
15:20:11 <d0liver> Okay, cool, I'll check it out, thank you.
15:21:32 <merijn> "hoist generalize" or something, probably
15:28:54 <rotaerk> so mmorph is what comes after mmorpg
15:30:49 <Iceland_jack> lyxia: yeah from Data.Unamb
15:31:18 <Iceland_jack> I was instantiating things like fold @[] @PAny
15:36:36 <Iceland_jack> so you can
15:36:36 <Iceland_jack>      fold @Pair @(via PAny) (True :# undefined)
15:36:36 <Iceland_jack>   == fold @Pair @(via PAny) (undefined :# True)
15:36:36 <Iceland_jack>   == True
15:43:01 <dignissimus> quit
15:43:05 <dignissimus> oh
16:08:27 <hololeap> ChrisPenner[m]: i like what you are doing, but why is javascript in your banner? ;)
16:09:09 <ChrisPenner[m]> hololeap: because it's really hard to find pretty stock photos of Haskell 🙃
16:09:44 <hololeap> ChrisPenner[m]: what price are you going to be asking for once it's finished?
16:10:37 <ChrisPenner[m]> hololeap: thinking around $45 and around 500 pages 😄
16:11:05 <hololeap> holy crap that's long
16:11:17 * hololeap didn't mean it in a bad way
16:16:05 <ChrisPenner[m]> There're a LOT of cool things to cover
16:16:28 <ChrisPenner[m]> And that includes lots of exercises too!
16:18:02 <ChrisPenner[m]> I'm just about done covering Traversals and I'm crossing 200 pages. I'm planning to have sections on other libs too, including generic lens and lens aeson;
16:19:08 <ChrisPenner[m]> You can see a list of chapters here: https://www.patreon.com/ChrisPenner
16:43:55 <sicklorkin> What formatters can I use to show days/hours/mins from a NominalDiffTime.  I thought `let fmd = formatTime locale "%dd%Hh%Mm" . posixSectionToUTCTime . realToFrac` would work but `fmd (3600 :: NominalDiffTime)` returns 1d01h00m. 
16:44:33 * nshepperd2 hopes ChrisPenner[m] has a good pun prepared for explaining the 'confusing' operator
16:44:41 <sicklorkin> fmd -3600 rightly returns 31d23h00m
16:44:53 <sicklorkin> my approach is flawed
16:48:52 * ski imagines ChrisPenner[m] might be taking a quick stab at appropriate images adjudicating the adopted naming conventions
16:49:26 <novum> anyone use vim? I tried neovimhaskell-vim, but it has really bad syntax design choices. Everything that was white became blue (I designed my own colorscheme) and the only colorscheme that looked good was gruvbox (and even then it was kind of questionable). Anyone have nice vim setup for haskell?
16:51:39 <EvanR> my vim looks fine, has no custom colors or anything
16:52:58 <sicklorkin> https://pasteboard.co/IBQQVJA.png
16:53:05 <sicklorkin> novum ^^^
16:53:46 <hololeap> ChrisPenner[m]: are you going to go into the categorical underpinnings?
16:53:54 <hololeap> cofree costate comonads?
16:54:00 <novum> I cannot see that image sicklorkin too much js. try `feh https://pasteboard.co/IBQQVJA.png` in command line
16:54:26 <hololeap> i'm actually interested because i haven't really gotten a full grasp on lenses and i think a book like that would fill a needed niche
16:55:01 <novum> here is my haskell colors .. not terrible .. https://i.imgur.com/AnrFPJC.png .. just the default vim ftplugin stuff. But I wouldn't mind it being slightly improved
16:55:32 <ChrisPenner[m]> hololeap: I've considered it, but it would definitely push the book over the 500 page mark, so if I do end up  getting around to it it'll likely be in a separate book so I can cover it properly.
16:55:33 <ChrisPenner[m]> I'm covering the basics of both VL and profunctor encodings though 😄
16:55:52 <novum> was just curious if I was missin' somethin' in the vimosphere
16:55:59 <hololeap> ChrisPenner[m]: what is VL?
16:56:32 <sicklorkin> novum: try vim-colors-solarized? 
16:56:35 <ChrisPenner[m]> Van Laarhoven encoding, it's what the majority of `lens` is built with 
16:57:01 <novum> sicklorkin, I used solarized for 1 year. too blue. Used gruvbox and nord for a while. Then I made my own
16:57:57 <novum> sicklorkin, plus there is solarized8 in vim-land for "solarized" stuff
16:59:01 * hackage nix-tools 0.1.0.0 - cabal/stack to nix translation tools  https://hackage.haskell.org/package/nix-tools-0.1.0.0 (HamishMackenzie)
17:00:12 <novum> sicklorkin, are you telling me that my colorscheme sucks? is that what you're saying :[
17:01:48 <sicklorkin> novum: I think most people just tweak their colors to what works for them - i'm not saying anything about your choice of colours.. imo they look fine, but this is a highly subjective matter
17:03:14 <novum> after installing haskell-mode in emacs (something I tried to use a while ago, and actually still has nord colors in there) it *does* look a lot better ^u^ good ole emacs .. sicklorkin I was just yanking your chain :P
17:04:39 <novum> emacs :( *rubs chin* https://i.imgur.com/QwHYYZy.png
17:04:43 <ski> novum : too many brackets
17:04:56 <novum> don't look at my code! I am trashaskeller
17:05:10 <novum> that is from a few days ago. I have improved! But that is trash can code.
17:05:26 <novum> I still write trash can code, but it's better. DON'T MAKE FUN OF ME
17:05:40 <ski> i wouldn't dream of it
17:06:33 <sicklorkin> novum: does the vim help errr help you at all?
17:06:49 <novum> sicklorkin, what do you mean?
17:07:28 <novum> like :help {something}? If so: of course. It is one of the best help systems eva.
17:07:59 <sicklorkin> novum: haskell-vim has several options for adjusting colours
17:09:04 <novum> :help haskell.vim may be what you're referring to. It has 3 options yes
17:09:21 <novum> I may see if they improve anything. thanks I hadn't seen that before
17:15:28 <novum> I mean it seems to be `True` be highlighted like a boolean but seems to do little else
17:19:28 <jle`> ☻/b 24
17:22:47 <novum> jle`, wat
17:23:06 <jle`> typo, sorry :)
17:24:58 <novum> oh you were talking about this sicklorkin https://github.com/neovimhaskell/haskell-vim .. lemme give it a shot and see if it inverts all of my colors >:|
17:25:43 <novum> oops. sicklorkin it appears that was the plugin I had already installed.
17:28:08 <novum> I guessss it does look better <old: https://i.imgur.com/AnrFPJC.png> new: https://i.imgur.com/CI0mSfq.png  .. it was very blue in another file
17:28:14 * novum shrugs. m'kay thanks
18:20:35 <Iceland_jack> In an outrage culture, outrage is the only thing that gets you noticed
18:39:38 <paulasdf> How can I find where a "Prelude.!!: index too large" exception is coming from? Running the code in ghci offers no hints
18:40:22 <pikajude> you can do some stuff to break on every thrown exception which isn't always worth it
18:40:53 <pikajude> it's :set -fbreak-on-exception
18:42:00 <rotaerk> https://wiki.haskell.org/Debugging
18:44:13 <paulasdf> hmm... that setting gives me a bunch of <unknown>'s... I'll take a look at the wiki
18:44:44 <rotaerk> I don't think a "stack trace" makes much sense in the context of haskell
18:45:08 <rotaerk> but you definitely should be looking to get more information about where the heck your exception is coming from
18:45:22 <EvanR> to diagnose a !! error i'd look for any existing usage of !!
18:45:29 <EvanR> you'd hope there aren't many
18:45:29 <hpc> there are some ways to make it make sense
18:45:44 <hpc> ultimately (!!) and partial functions in general aren't great to be using
18:46:04 <hasccell> hey what is a value constructor exactly?
18:46:25 <hasccell> is [],1,2 a value constructor?
18:47:07 <hpc> [] is a constructor, 1 and 2 desugar to (fromInteger (MagicLiteral1 :: Integer))
18:47:21 <hpc> (MagicLiteral1 not a real identifier)
18:47:35 <hpc> they're also called data constructors
18:47:49 <hpc> another example is False/True
18:47:53 <hasccell> I'm having difficulity understanding why in types like
18:48:01 <hpc> basically it's the indivisible unit of value-level stuff
18:48:15 <hasccell> data Point = PointC Float Float, the PointC is called value constructor
18:48:25 <hasccell> it's constructing a Point right ?
18:48:31 <hpc> yes
18:48:37 <hasccell> and Point is a type (?) not a value 
18:48:40 <hpc> yes
18:48:53 <ghoulguy> Constructors are the capitalized names. There are type and value constructors depending on what namespace those names are in
18:48:56 <hpc> data <type> = <value constructor> <type of arg> <type of arg> ...
18:49:00 <hasccell> so why call it value constructor ?
18:49:11 <pikajude> it constructs a value of type Point
18:49:21 <ghoulguy> Being a constructor distinguishes it from being a normal variable, which behaves differently in patterns
18:49:44 <hasccell> and so data X = 1 | 2 | 3, so we say 1,2,3 a value constructor too ?
18:49:55 <ghoulguy> No, that's not valid syntax
18:50:13 <hpc> data X = One | Two | Three -- those would be value constructors though
18:51:42 <hasccell> okay thanks
18:54:48 <boxscape> how come compiled code with -O0 is still a lot faster than the same code run in ghci?
18:55:19 <ghoulguy> Because compiled code is still faster than interpreted code?
18:55:29 <boxscape> hm, I guess that makes sense
18:57:10 <Axman6> you can makew ghci use compiled cide by passing it -fobject-code (possibly --ghc-options=-fobject-code, I can't remember)
19:00:01 <boxscape> I see
20:07:19 <maerwald> anyone has anecdotal evidence of ghc-8.8 build time performance?
20:07:59 <slack1256> maerwald: Programs built by ghc-8.8 or building ghc 8.8?
20:08:23 <maerwald> build time performance yeah
20:08:39 <maerwald> of programs 
20:08:42 <slack1256> I guess if you send a mail to haskell-cafe somebody will give you figures (nofib etc).
20:09:18 <slack1256> What works for me, which isn't really about ghc, it to use the gold-linker instead of the base ld-linker.
20:10:00 <maerwald> it does that by default anyway afaik
21:16:11 <jackdk> Is there a generalised version of MonoidNull? MonoidNull has a Monoid superclass, and what I want is to check whether the Maybe/Map/Set/... is empty, that's all
21:16:54 <jackdk> (MonoidNull is defined in monoid-subclasses, at https://hackage.haskell.org/package/monoid-subclasses-1.0/docs/Data-Monoid-Null.html )
21:18:52 <dmwit> :t null
21:18:53 <lambdabot> Foldable t => t a -> Bool
21:19:02 <dmwit> > null Nothing
21:19:04 <lambdabot>  True
21:19:07 <dmwit> > null M.empty
21:19:09 <lambdabot>  True
21:19:10 <dmwit> > null S.empty
21:19:12 <lambdabot>  True
21:19:36 <jackdk> oh neat, that's pretty much exactly what I want
21:19:56 <jackdk> thanks dmwit 
21:51:49 <sshine> can you say that putting resistors in series or in parallel is monoidal under Product and Sum?
21:52:24 <EvanR> for parallel you would need an infinite resistor
21:52:40 <EvanR> but other than that, yes series and parallel are associative
21:52:55 <heatsink> an open circuit is an infinite resistor
21:53:42 <EvanR> Product is wrong, you'd need a Parallel newtype
21:54:18 <Lycurgus> is infinite resistance a thing, outside of exotic matter or whatever?
21:54:39 * heatsink isn't sure whether to make a politics joke
21:54:55 <sshine> EvanR, OK, thanks, makes sense.
21:55:00 * Lycurgus advises not here
21:55:24 <jackdk> is there something like empty :: Foldable a => t a, such that `length empty == 0` and `null empty` for any foldable?
21:56:18 <dibblego> @type _Empty
21:56:19 <lambdabot> (AsEmpty a, Choice p, Applicative f) => p () (f ()) -> p a (f a)
21:56:34 <dibblego> @type _Empty # ()
21:56:36 <lambdabot> AsEmpty t => t
21:56:41 <sshine> :t Control.Applicative.empty
21:56:43 <lambdabot> Alternative f => f a
21:56:43 <EvanR> Foldable only let's you destroy the structure not create it
21:57:32 <sshine> jackdk, so if you don't mind (Foldable t, Alternative t) => t a, you have 'empty'.
21:57:48 <sshine> jackdk, any chance you're from denmark?
21:57:48 <heatsink> Lycurgus, you can get pretty close to infinite resistance using ordinary materials
21:58:07 <EvanR> really does Foldable + Alternative somehow imply null is true
21:58:17 <EvanR> null empty == True
21:58:22 <Lycurgus> heatsink, even a vacuum can be arced over
21:58:52 <EvanR> yeah you def want a material there for "infinite" resistance
21:58:56 <heatsink> are you thinking of resistivity, which is resistance per unit of bulk matter?
21:58:58 <sshine> ah, I guess 'null' is sufficient if you want to check if a Foldable is empty, but not if you want to produce empty?
21:59:43 <sshine> EvanR, you mean that for a true product of resistors, you'd need something that does not lead current at all.
21:59:46 <sshine> EvanR, right?
21:59:57 <EvanR> in the polymorphic function you need to create an empty Foldable in... take an argument for the empty value of that type
22:00:03 <__dingbat__> Hello, stuck at a simple error, I am doing : let localhost = "localhost"
22:00:17 <__dingbat__> Ambiguous type variable ‘a0’ arising from the literal ‘"localhost"’
22:00:18 <__dingbat__>       prevents the constraint ‘(IsString a0)’ from being solved.
22:00:20 <__dingbat__>       Relevant bindings include
22:00:21 <__dingbat__>         localhost :: a0
22:00:30 <EvanR> sshine: parallel resistors don't multiply... they have the formula 1 / ((1/r1) + (1/r2) + ...)
22:01:01 <lyxia> harmonic sum
22:01:01 <jackdk> sshine: Not Danish, no. Though I did enjoy my time there, the username is for other reasons.
22:01:04 <Axman6> __dingbat__: looks like you have OverloadedStrings enabled. if you use let localhost = "localhost" :: String it will be a String
22:01:33 <jle`> __dingbat__: alternatively you can use 'localhost' somewhere, and usually that will let type inference tell ghc what type you want it to be
22:01:57 <jle`> % let localhost = "localhost" in putStrLn localhost
22:01:58 <yahb> jle`: localhost
22:02:01 <jackdk> sshine: I think I will probably use AsEmpty over dragging in Alternative from out of nowhere, and I'm depending on lens anyway
22:02:18 <sshine> jackdk, sure, I'm just associating freely here. :)
22:02:19 <jle`> Alternative is a pretty strong constraint
22:02:25 <jle`> it requires Functor even
22:02:38 <jle`> *and* Applicative
22:02:44 <jle`> so it disqualifies types like Data.Map.Map
22:02:46 <sshine> jackdk, I was in a Diablo 1 clan as a kid, called Death Knights, and it was pretty cool to have a .dk domain for your clan. I don't think my american clan members really understood that I hadn't invented a TLD for the occasion.
22:03:06 <__dingbat__> Axman6 &  jle` , I did let localhost = "localhost" :: String  and it worked. Not sure where how the Overloaded Strings got enabled. I had this same code in another function and it compiled fine there 
22:03:21 <jle`> __dingbat__: most likely you used 'localhost', the binding, in a function
22:03:34 <jle`> if you just define it and never use it, that's where the problem happens
22:03:51 <jackdk> sshine: Good times, good times. Back when everyone was abusing ccTLDs. I had a lot of junk on various shortname.to domains.
22:04:02 <jle`> __dingbat__: the problem is that GHC has no clue what type it should be, so it freaks out. but if you use it in a function, that should be enough to let ghc know :)
22:04:07 <jle`> without needing to :: String
22:04:23 <jle`> that's probably what happened in your other situation
22:05:18 <sshine> I have a small program that uses 10^3, 10^6, 10^9 because 1e3, 1e6, 1e9 aren't Integral, and 1_000, etc. isn't possible (yet), and I get a bunch of warnings. is there anything more convenient than doing 10^(3::Int), 10^(6::Int), 10^(9::Int)?
22:05:54 <EvanR> i've define thousand, million, billion before
22:06:02 <__dingbat__> jle`: makes sense, thanks
22:06:36 <jackdk> hm. I think I probably want to go via AsEmpty over pulling in Alternative or Monoid constraints
22:06:36 <EvanR> though 10^3 should work as Int when needed to
22:06:50 <shachaf> sshine: {-# LANGUAGE NumDecimals #-} makes 1e3 Integral.
22:07:09 <jle`> % 1e3 :: Integer
22:07:09 <yahb> jle`: 1000
22:07:29 <jle`> ^ sshine 
22:07:49 <__dingbat__> jle`: subsequently I am doing this :     transport  <- hOpen ( localhost, remotePort)
22:07:49 <jle`> presumably for "isn't possible (yet)", the "yet" means "not until i enable -XNumDecimals" :)
22:07:50 <sshine> -_- thanks.
22:08:16 <jackdk> This is what I'm trying to do, and now I'm stuck on an overlapping instances problem https://www.irccloud.com/pastebin/ygBdEKm6/diffing.md
22:08:17 <__dingbat__> jle`: and getting an error :       
22:08:18 <__dingbat__> No instance for (HandleSource (String, PortNumber))
22:08:20 <__dingbat__>         arising from a use of ‘hOpen’
22:09:13 <jle`> __dingbat__: it looks like hOpen expects its input to be an instance of HandleSource
22:09:18 <jle`> which your tuple is not
22:09:30 <jle`> it's similar to say, trying to 'show' something that is not an instance of Show
22:10:41 <__dingbat__> jle`: the wierd thing is , the same code was compiling in another funtion ! but what you are saying makes sense
22:11:12 <jle`> what were you giving hOpen in your other function?
22:11:18 <jle`> was it also a (String, PortNumber) ?
22:11:33 <__dingbat__> yes
22:11:52 <jle`> i'm going to take a guess
22:11:57 <jle`> maybe it wasn't a String
22:12:33 <jle`> what package is HandleSource/hOpen from?
22:12:38 <__dingbat__> jle`: I literally had this :  --transport  <- hOpen ("localhost", remotePort)
22:12:52 <jle`> __dingbat__: right, but in that case, "localhost" might not be a String
22:13:00 <jle`> it might be a Text or a Bytestring
22:13:05 <jle`> or maybe a Host type
22:13:17 <jle`> anything that has an instance of IsString
22:13:35 <jle`> what happens if you remove the ":: String" annotation from let localhost = "localhost" ?
22:13:44 <__dingbat__> jle`:  one of the Thrift packages - https://github.com/apache/thrift/blob/master/tutorial/hs/HaskellClient.hs
22:13:53 <__dingbat__> see the first line in Main
22:14:58 <jle`> ah yeah, look at the instances of HandleSource
22:15:01 <jle`> https://hackage.haskell.org/package/thrift-0.12.0/docs/Thrift-Transport-Handle.html#t:HandleSource
22:15:14 <jle`> it looks like they are using the (HostName, PortID) instance
22:15:34 <__dingbat__> jle`: http://hackage.haskell.org/package/Thrift-0.6.0.1/docs/Thrift-Transport-Handle.html
22:15:44 <__dingbat__> yes
22:16:44 <jle`> oh, hm, it looks like HostName is a type synonym for String, so that might not be what is going on
22:17:38 <__dingbat__> jle`: its PortID & PortNumber
22:17:43 <jle`> what is the type of remotePort?
22:17:51 <__dingbat__> PortNumber
22:17:53 <__dingbat__> http://hackage.haskell.org/package/network-2.4.1.2/docs/Network.html#t:PortID
22:18:25 <jle`> is remotePort a PortID ?
22:18:39 <__dingbat__> its a PortNumber
22:18:44 <jle`> ah, that's the problem
22:18:49 <__dingbat__> I need to convert it to PortID, dont know how
22:19:02 <jle`> check out the constructors of PortID
22:19:09 <jle`> there are three of them. do you think one of them might be useful for you
22:19:28 <jle`> (the constructors are listed at the link you just sent)
22:19:52 <__dingbat__> yes, PortNumber PortNumber
22:20:08 <jle`> yeah, you can create a PortID by using the 'PortNumber' constructor with a PortNumber value :)
22:21:30 <__dingbat__> jle`: I understood the essence but stuck at syntax for doing the same
22:21:44 <__dingbat__> jle`: appreciate your help!
22:21:56 <jle`> hOpen (localhost, PortNumber remotePort)
22:23:19 <__dingbat__> jle`: :) that was a lame question I suppose. I got the same error back when I did this so got confused
22:23:43 <jle`> definitely not a bad question :)
22:24:02 <__dingbat__> jle`: thank you its working fine now, had a different minor error
22:51:11 <erikd> is there a way to downgrade my hackage index to the one from a couple of days ago?
23:21:22 <dmwit> erikd: I think no. But you can use the existing index as if it didn't have any of the stuff since a couple of days ago.
23:22:28 <dmwit> erikd: --index-state 2019-10-14T00:00:00Z
23:22:55 <erikd> dmwit: oh, thanks, that is really useful to know!!!
23:23:15 <erikd> now i just need to remember for next time
23:23:30 <dmwit> cabal update will tell you. =P
23:26:06 <erikd> so it does!!
23:29:00 <__dingbat__> Hello, can someone help with this?
23:29:02 <__dingbat__> someFunc :: String -> String
23:29:03 <__dingbat__> someFunc msg = do
23:29:05 <__dingbat__>                 let ret = "sss" :: String
23:29:06 <__dingbat__>                 return (ret )
23:29:14 <__dingbat__> -
23:29:16 <__dingbat__>     • Couldn't match type ‘[Char]’ with ‘Char’
23:29:17 <__dingbat__>       Expected type: String
23:29:19 <__dingbat__>         Actual type: [String]
23:29:22 <EvanR> omg
23:29:33 <EvanR> use a paste site
23:30:10 <__dingbat__> EvanR: I would've thought it was too small, will do next time
23:30:23 <EvanR> try someFunc msg = let ret = "sss" in ret
23:31:19 <EvanR> use used return on a string which produces an `m String'
23:31:27 <rotaerk> __dingbat__, "return" has little to do with the keyword of the same name in, say, C
23:31:28 <EvanR> where m is some Monad
23:31:51 <rotaerk> it doesn't mean "return a thing from a function"
23:31:56 <__dingbat__> EvanR: rotaerk, understood thanks
23:32:08 <EvanR> :t return
23:32:09 <lambdabot> Monad m => a -> m a
23:32:21 <EvanR> it's just a function not a keyword
23:33:21 <__dingbat__> EvanR: but the error didn't indicate anything about monads, it was saying String and char array
23:33:37 <EvanR> String = [Char]
23:34:28 <EvanR> it mentioned [String], so somehow it thought you wanted m = List
23:35:08 <__dingbat__> EvanR: ok, unfortunately that kind of error reporting is very confusion to noobs
23:35:18 <__dingbat__> EvanR: thanks
23:35:45 <EvanR> indeed
23:35:59 <rotaerk> the compiler does its best, give it a break :P
23:36:11 * rotaerk pats GHC. "there there"
23:36:16 <__dingbat__> rotaerk: :)
23:36:45 <EvanR> __dingbat__: when in doubt, add more type signatures to see where you and GHC disagree
23:37:20 <EvanR> with no signatures, and nonsense code, it can come up with some pretty inexplicable ideas
23:37:30 <rotaerk> you can also give it an underscore as a type signature, like `blah :: _`, to have the compiler try to fill in the blank
23:37:59 <rotaerk> or give it part of a type signature like `blah :: Foo -> _` to have it fill in the rest
23:38:58 <__dingbat__> ok, will keep that in mind. Thank you both
23:43:01 * hackage pseudo-boolean 0.1.9.0 - Reading/Writing OPB/WBO files used in pseudo boolean competition  https://hackage.haskell.org/package/pseudo-boolean-0.1.9.0 (MasahiroSakai)
