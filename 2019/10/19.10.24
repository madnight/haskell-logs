00:04:09 <opqdonut> dminuoso: I agree, that would've been a better example
00:24:14 * hackage LDAPv3 0.0.0.0 - Lightweight Directory Access Protocol (LDAP) version 3  https://hackage.haskell.org/package/LDAPv3-0.0.0.0 (HerbertValerioRiedel)
00:26:51 <dminuoso> hvr: Neat, how does your parser compare to the one in ldap-client?
02:31:54 <jusss> is there a good simple irc library?
02:33:20 <dminuoso> jusss: What kind of library are you looking for exactly?
02:35:22 <jusss> dminuoso: I want to write a robot, that bridge IRC to telegram, the telegram part is done, I can use telegram bot to send and recv messages, I need a simple irc library like APIs, all I want is just to send and recv messages to irc server
02:37:42 <jusss> dminuoso: should I follow this https://wiki.haskell.org/Implement_a_chat_server and implement it ?
02:40:30 <sicklorkin> jusss: the lambda bot may be on github, you might find some examples there.  The link you just posted isn't using any IRC protocol afaics
02:41:21 <jusss> sicklorkin: yes, but it can tell me how to do socket program
02:41:53 <__monty__> There's an irc bot tutorial on the haskell wiki iirc. I've used that successfully.
02:42:28 <sicklorkin> jusss: are you using windows or linux?
02:42:39 <jusss> sicklorkin: debian
02:43:27 <sicklorkin> sounds like a fun project.. 
02:43:38 <jusss> yeah, two bots
02:45:27 <jusss> another question, can we use >>= in a do-notation?
02:45:40 <jusss> with diffrent context
02:45:45 <__monty__> Yep.
02:45:53 <jusss> exmaples?
02:46:29 <__monty__> Depends on what you mean by context. I answered before you'd sent that.
02:48:09 <jusss> main :: IO()
02:48:11 <jusss> main = do
02:48:20 <jusss>   Just 3 >>= \i -> Just i
02:48:59 <jusss> or we switch that context Maybe to IO ? turn Just 3 to IO 3
02:49:57 <__monty__> Why would bind suddenly get a different type?
02:50:18 <jusss> if we use return in `Just 3 >>= \i -> return i' what this i will bind with? IO or Maybe
02:51:33 <__monty__> Well it's a type error. >>= has type IO () -> (a -> IO ()) -> IO () in your context.
02:51:44 <__monty__> Just 3 doesn't have type IO ().
02:52:14 <jusss> oh
02:52:38 <jusss> but IO (Just 3) >>= \i -> return i ?
02:53:05 <__monty__> IO's not a constructor.
02:53:33 <jusss> wait, I forget there's no IO transformer
02:53:46 <jusss> but there's IoT
02:55:01 <__monty__> You could do something like: return (Just 3 >>= return). That inner >>= and return would use the monad instance for Maybe.
02:56:02 <jusss> ok
03:33:46 <dminuoso> I have this situation with Put: do { let buf = runPut $ do { ... }; putWord8 (BS.length buf); putByteString buf }
03:34:41 <dminuoso> And Im really annoyed by it, because Im forcing all these intermediate objects - and I cant just put onto it onto the wire because in some cases I wont know how long the resulting data is until actually serializing it.
03:36:26 <dminuoso> (And the protocol obviously requires writing the length before the data..)
03:39:18 <kuribas> is this code beginner unfriendly?  https://gist.github.com/kuribas/d4ba50f34afd32884124ade83687f1cd
03:39:44 <kuribas> if so, is there a way to make it beginner friendly, but also readable?
03:42:17 <kuribas> perhaps I could use pattern matching instead of maybe
03:52:28 <kuribas> for example, I am using a Maybe transformer over the aeson parser monad, but I could use explicit pattern matching.
03:57:14 * hackage c-mosquitto 0.1.7.0 - Simpe mosquito MQTT binding able to work with the Amazons IoT  https://hackage.haskell.org/package/c-mosquitto-0.1.7.0 (tolysz)
04:29:13 <tdammers> > do { let x = Just 3 >>= \i -> return (i + 2); print x }
04:29:15 <lambdabot>  <hint>:1:55: error: parse error on input ‘}’
04:29:41 <tdammers> uh
04:36:02 <dminuoso> kuribas: More bindings.
04:37:14 <dminuoso> kuribas: I found that one of the more annoying characteristics of hard-to-read code is when there's large regions of code, involving many fancy operators, you quickly lose track of what things are and how they fit together.
04:37:30 <dminuoso> It becomes really hard to analyze parts of the program because it requires too much mental stack space.
04:38:27 <kuribas> dminuoso: with or without the maybe transformer?
04:40:44 * hackage simple-sendfile 0.2.30 - Cross platform library for the sendfile system call  https://hackage.haskell.org/package/simple-sendfile-0.2.30 (KazuYamamoto)
04:40:57 <dminuoso> kuribas: Well if you move the cursors parser into a separate binding using a do-expression... perhaps its a bit more manageable.
04:47:56 <kuribas> dminuoso: like this? https://gist.github.com/kuribas/d4ba50f34afd32884124ade83687f1cd
04:51:04 <kuribas> it's a bit shitty you cannot type the left side of '<-' in do...
04:53:39 <lortabac> kuribas: can't you?
04:54:00 <lortabac> try enabling ScopedTypeVariables
04:54:12 <pie_> do you guys have any reading recommendations for rust
04:54:18 <kuribas> > do Identity (x :: Int) <- Identity 2; pure x
04:54:21 <lambdabot>  Identity 2
04:54:33 <kuribas> > do (Identity x :: Identity Int) <- Identity 2; pure x
04:54:35 <lambdabot>  Identity 2
05:00:50 <dminuoso> kuribas: I meant moving the entire cursors parser onto a separate binding.
05:01:02 <kuribas> on toplevel?
05:01:09 <dminuoso> No, in the where below/
05:01:25 <dminuoso> kuribas: Right now the expression to parseJSON entails 20 lines using arrows in all kinds of directions and weird looking operators.
05:01:36 <kuribas> yeah :)
05:03:44 <dminuoso> kuribas: And for complicated applicative, I personally am a huge fan of RecordWildCards and do-notation (with ApplicativeDo enabled if need be)
05:04:25 <dminuoso> Such that you can write: do { firstName <- someComplicatedThing; lastName <- anotherComplicatedThing; age <- fancyThingsHere; pure Person{..} }
05:05:13 <dminuoso> Given some `data Person = Person { firstName :: String; lastName :: String; age :: Int }`
05:05:27 <dminuoso> It's just my thoughts though.
05:08:31 <kuribas> dminuoso: to many extensions may scare away beginners though
05:10:19 <dminuoso> kuribas: Have you considered using aeson-lens perhaps in that spot?
05:10:47 <kuribas> I didn't...
05:12:20 <dminuoso> kuribas: Why is it relevant that its easy for beginners by the way?
05:12:36 <dminuoso> Is this for some learning resource you are making?
05:12:40 <kuribas> dminuoso: I wanted to make a usecase for my coworkers
05:12:51 <dminuoso> I'd pick something much simpler first.
05:13:38 <kuribas> I have a script that analyzes csv's in production, but nobody wants (or has time) to touch it...
05:13:48 <dminuoso> kuribas: Also it seems that you should be able to get that instance for free via Generic
05:13:54 <kuribas> dminuoso: I wanted to show how haskell can be useful for a REST API
05:14:16 <kuribas> dminuoso: no the generic instance works totally differently
05:14:25 <dminuoso> Hold on
05:14:40 <dminuoso> kuribas: https://hackage.haskell.org/package/aeson-1.4.5.0/docs/Data-Aeson.html#t:Options
05:14:50 <dminuoso> kuribas: Take note of omitNothingFields
05:15:08 <kuribas> dminuoso: yeah, but that's still different
05:15:14 <dminuoso> Ah is it?
05:15:25 <kuribas> yes
05:15:36 <kuribas> I also need to ommit empty lists
05:16:42 <dminuoso> If my plan was to sell Haskell for a REST API, I wouldn't focus on some not-quite-so-trivial aeson
05:17:10 <kuribas> dminuoso: it's not so trivial, because that how we implemented it now (in clojure)
05:18:16 <kuribas> dminuoso: I also would want to focus on this part, but they would discover it anyway :)
05:18:25 <dminuoso> kuribas: Is adding omitEmptyLists to aeson an option?
05:18:51 <dminuoso> (If there's a way to show them they get all these things for free, then that's probably a larger plus than showing them how to hack around an API not tailored for aeson)
05:19:25 <kuribas> dminuoso: I have three types which use genericToEncoding
05:23:35 <dminuoso> kuribas:  (afterCursor, beforeCursor) <- case maybeCursors of
05:24:55 <dminuoso> kuribas: That's rather confusing to read (because the action that yields that results is farther down)
05:36:11 <kuribas> dminuoso: is this better? https://gist.github.com/kuribas/d4ba50f34afd32884124ade83687f1cd#file-parser-v3-hs
05:36:44 <kuribas> dminuoso: the lenses are a no go, since they lack error handling
05:38:30 <dminuoso> kuribas: Perhaps. Or you could move the entire function to withObject into a separate binding too. *shrugs*
05:39:24 <dminuoso> kuribas: Im curious, why not write an `instance FromJSON a => FromJSON (Vector a)`?
05:39:49 <dminuoso> Oh wait, nevermind. Its the other way around
05:40:06 <dminuoso> withArray :: String -> (Array -> Parser a) -> Value -> Parser a
05:42:32 <kuribas> dminuoso: last version: https://gist.github.com/kuribas/d4ba50f34afd32884124ade83687f1cd#file-parser-v4-hs
05:44:31 <dminuoso> I think that is an improvement to what you started out with.
05:45:57 <kuribas> I think so too
05:46:04 <kuribas> even for not beginners :)
05:46:38 <kuribas> sotime naming things instead of pointless is better
05:56:14 * hackage tidal 1.4.4 - Pattern language for improvised music  https://hackage.haskell.org/package/tidal-1.4.4 (AlexMcLean)
06:35:44 * hackage galois-field 1.0.1 - Galois field library  https://hackage.haskell.org/package/galois-field-1.0.1 (sdiehl)
07:05:14 * hackage cabal2spec 2.4 - Convert Cabal files into rpm spec files  https://hackage.haskell.org/package/cabal2spec-2.4 (PeterSimons)
07:14:13 <jumper149> Is there a way to (show :: Floating a => a -> String) print floating point numbers with given decimal places
07:14:32 <jumper149> * in Prelude preferably
07:16:17 <tabaqui1> does anyone else miss a shared local scope for instance methods?
07:17:00 <tabaqui1> like "instance Foo Bar where { let x = "SHARED" in foo = print x; bar = print x }
07:19:28 <c_wraith> yeah, it bugs me whenever I have to create top-level bindings for that
07:19:46 <c_wraith> even though the module system works (don't export them) it feels a bit sloppy
07:33:52 <freeman42x> Is there some JSADDLE (compatible) library that gives a WebSocket server? https://github.com/ghcjs/jsaddle/issues/110
07:37:12 <Cale> freeman42x: I was about to answer your question, but I suddenly realised that I don't understand whether you're looking for a websocket client or something you'd run on your backend.
07:37:36 <Cale> It probably doesn't make much sense for your frontend to be running a websocket *server*
07:39:12 <freeman42x> Cale, I updated the question to clarify.
07:39:12 <Cale> If you want your backend to run a websocket server, http://hackage.haskell.org/package/websockets will do the trick -- it doesn't need any special compatibility with jsaddle.
07:39:29 <Cale> ah
07:39:56 <freeman42x> Cale, my problem is that even if I add a WS library and start it, I do not know how to use it with JSADDLE / Miso
07:40:05 <freeman42x> or whether it is even possible
07:40:33 <Cale> So you're looking for a websocket client. I don't know very much about Miso (we use reflex-dom where I work), but ghcjs-dom obviously has bindings to all the usual DOM websocket stuff
07:41:35 <freeman42x> Cale, from my understanding a different WS server usually needs some different client JS library which operates with it
07:41:39 <exarkun> How do I call unexported functions in `ghci repl` (via `stack repl`)?
07:41:55 <Cale> freeman42x: huh? Why would that be?
07:42:42 <Cale> freeman42x: You can shove whatever messages you like over a websocket, and it doesn't matter which libraries you're using to do it.
07:42:43 <freeman42x> Cale, not necessary but that's what I seen until now. SignalR for example offers its own client library and not using some generic WS JS lib
07:43:20 <Cale> I assume you're going to be deciding what information to send in the first place
07:43:55 <freeman42x> Cale, not really, it should support everything. I don't see why it would not
07:43:59 <Cale> Like, you'd need matching stuff if someone implemented some other protocol on top of websockets
07:44:55 <freeman42x> Cale, for my concrete example for now I just need to send String messages because I only use it for logging stuff currently
07:46:39 <Cale> https://github.com/ghcjs/jsaddle-dom/blob/master/src/JSDOM/Generated/WebSocket.hs
07:47:52 <Cale> (but you should use the https://github.com/ghcjs/ghcjs-dom library, which uses jsaddle-dom directly when you're compiling for jsaddle)
07:48:05 <exarkun> Okay.  I see there's `:l` which seems to work.  I still can't call this function though because "ByteCodeLink: can't find label".  Why does `stack run ...` link third-party libraries but `stack repl` doesn't?
07:48:59 <freeman42x> Cale, so I need an example of how to use WS with ghcjs-dom and Miso?
07:49:53 <Cale> I suppose -- I've never used Miso, so I can't really tell you what might be involved there
07:50:41 <freeman42x> Cale, I asked the Miso author and he seems to be stuck about this also
07:51:30 <Cale> I can't think of any reason why it would require anything special though
07:52:04 <Cale> You should be able to open a websocket with newWebSocket and then do a bunch of sendString
07:55:30 <freeman42x> Cale, this is my current code: https://github.com/fairy-tale-agi-solutions/haskell-editor-setup/blob/master/src/Main.hs#L47
07:55:43 <freeman42x> where would I open a websocket?
07:56:30 <freeman42x> sendString I would call somewhere inside updateModel . That function could be called from there I assume
07:59:23 <Cale> freeman42x: Well, I don't know how to do it exactly, but if you can do IO from initialAction, that sounds like the kind of place you'd want to connect a websocket from.
08:01:17 <freeman42x> Cale, initialAction is of type Action so I do not think I can do anything there
08:01:29 <Cale> (I guess you'd do it from the part of updateModel which responds to initialAction)
08:02:14 <Cale> Or you could just do it from the top of main, before you startApp
08:02:28 <Cale> That's probably easier, actually
08:02:38 <Cale> Then you can pass the websocket to everything that needs it
08:02:56 <freeman42x> Cale, I see, both make sense.
08:03:54 <freeman42x> Cale, I need to pass the WS to sendString to be able to call it?
08:04:00 <Cale> yeah
08:06:43 <freeman42x> Cale, but how do I get the WS value from main to here? https://github.com/fairy-tale-agi-solutions/haskell-editor-setup/blob/master/src/Main.hs#L62
08:07:29 <freeman42x> also, would starting the WS be non-blocking?
08:21:50 <syd> Hi peeps
08:21:56 <Cale> freeman42x: Just pass it as an argument
08:22:22 <syd> I have a GADT like this: https://pastebin.com/g75Mn3RN
08:22:26 <Cale> freeman42x: I'm not 100% sure, but generally it won't block
08:22:40 <syd> is there a way to write a `filterPredicate :: Filter a -> a -> Bool` function using case matching?
08:22:46 <tabaqui1> templates generating templates :)
08:22:50 <tabaqui1> I need to go deeper
08:24:30 <freeman42x> Cale, but the update function has a fixed type signature so I do not understand how I can pass the WS to it
08:25:28 <Cale> freeman42x: Fix the type signature to be something else
08:25:46 <sicklorkin> freeman42x: typicall you start WS when you initalize your webserver then when you generate your js etc. you'd write something like `var ws_port=18080`.. not sure if that whleps.
08:25:52 <Cale> freeman42x: updateModel :: Websocket -> Action -> Model -> Effect Action Model
08:26:22 <Cale> freeman42x: and then up in main, you'll have update = updateModel ws
08:26:48 <Cale> syd: Maybe?
08:27:22 <syd> Cale: how would that work? Can you somehow assume that `a` is a `Header` if you case-match on `FilterHeader`?
08:27:44 <Cale> syd: You can assume that a is Entry in that case.
08:27:52 <syd> wait really? That typechecks?
08:28:08 <Cale> yeah, that's what GADTs are all about
08:28:17 <Cale> That's the generalisation :)
08:28:42 <syd> holy smokes
08:28:44 <syd> that actually compiles
08:28:48 <Cale> When you match on a GADT's data constructor, you may learn something new about the type index
08:28:49 <syd> I'll be damned
08:29:38 <freeman42x> Cale, how come I can change the signature of `updateModel :: Action -> Model -> Effect Action Model` to whatever I want? isn't the library exepecting a certain signature?
08:30:45 <Cale> freeman42x: Obviously the App data constructor still wants a function of type Action -> Model -> Effect Action Model
08:31:32 <Cale> freeman42x: But we're still going to give it one
08:31:39 <freeman42x> Cale, ah I see, only seen your last message now
08:32:23 <k0ral> probably stupid question: why isn't `Vector` defined as `Array Int` ? Is there a fundamental difference between the implementations of `Array Int` and `Vector` ?
08:33:14 <freeman42x> Cale, this is the function I need, right? https://i.imgur.com/Oe0EQXw.png
08:33:37 <Cale> I think so, yes
08:34:08 <Cale> k0ral: yeah, a bunch of differences
08:35:32 <freeman42x> Cale, apparently not :/ <<Applications should use the ghcjs-dom package and the GHCJS.DOM.* modules it contains to get the best mix of protability and performance (rather than using the jsaddle-dom, ghcjs-dom-jsaddle and ghcjs-dom-jsffi directly).>>
08:35:55 <freeman42x> says I should use the equivalent function in ghcjs-dom but I could not find it
08:36:05 <Cale> freeman42x: oh, weird, it should be there
08:37:03 <freeman42x> Cale, I think it might be re-exported or something
08:37:22 <Cale> freeman42x: You also don't literally want the jsffi version
08:37:32 <Cale> You want the one which ultimately comes from jsaddle-dom
08:37:50 <Cale> But ghcjs-dom is just a big compile-time switch between them
08:39:55 <k0ral> Cale: care to elaborate ? :)
08:40:13 <syd> Cale: thanks, feel free to ping me in the future if I can help you
08:41:24 <k0ral> I see many libraries based on `Vector` for performance-driven algorithm, and I can't help but wonder why they were'nt done using Array-s instead, which just look more general
08:41:27 <Cale> k0ral: It's complicated by the fact that the array library and vector define several different concrete datatypes
08:41:45 <Cale> But one thing that Vector does which the array package doesn't attempt at all is stream-fusion.
08:43:20 <geekosaur> and the generality of Array comes at a price
08:44:08 <Cale> Various aggregate functions (e.g. map/folds) are implemented by a conversion to and from a "stream" data type which uses a functional representation for how to produce elements of the vector in turn, and then rewrite rules eliminate adjacent toStream/fromStream operations.
08:44:09 <geekosaur> for example, Vector uses simple integer indexes that can be used directly, but Array accesses all have to go through Ix to resolve the index (there's some overhead even for Int)
08:44:49 <dminuoso> Cale: Do GADTs have an algebraic interpretation in terms of products/coproducts of functors?
08:44:53 <Cale> The advantage of the intermediate stream datatype is that many operations are implementable on Stream as non-recursive functions which the compiler will be able to inline
08:45:19 <Cale> So you end up moving all the recursion into the code which converts to and from streams, and have a nice highly-optimised loop body
08:45:35 <Cale> dminuoso: hmm
08:45:37 <freeman42x> Cale, <<You want the one which ultimately comes from jsaddle-dom>> don't you mean ghcjs-dom?
08:45:47 <k0ral> okay so in my case, I have a type T that is an instance of Ix, and I have the choice between using Array, which API and ecosystem are pretty limited, but can directly work on T, or using Vector, which API and ecosystem are rich, but requires boilerplate to convert T <-> Int 
08:45:58 <Cale> freeman42x: I mean, when you use ghcjs-dom, it should be deferring to the version in jsaddle-dom
08:46:37 <freeman42x> Cale, ok, I see. So my goal now is to figure out how to use the re-exported functions from ghcjs-dom
08:47:34 <freeman42x> Cale, so that WebSocket module is in the ghcjs-dom.cabal under reexported-modules
08:58:19 <freeman42x> I do not just need newWebSocket, I also need to start a WS server right?
09:07:00 <Cale> freeman42x: Presumably that will be in another program, but yes
09:07:49 <freeman42x> Cale, why in another program? I'd like to just start it before starting the client stuff or the warp server
09:12:24 <Cale> Ah, hm, I suppose. I was thinking this was the frontend of a web application, but I guess if you only ever intend to use jsaddle, the line is a little blurred.
09:13:44 * hackage attoparsec-time 1.0.1 - Attoparsec parsers of time  https://hackage.haskell.org/package/attoparsec-time-1.0.1 (NikitaVolkov)
09:14:17 <Cale> but yeah, you'll need to serve whatever URL you're giving to newWebSocket
09:16:01 <freeman42x> Cale, cool thank you
09:16:27 <freeman42x> @karma+ Cale
09:16:27 <lambdabot> Cale's karma raised to 96.
09:37:28 <__dingbat__> Which library would be best to use for building a TCP client & server ?
09:39:21 <dminuoso> __dingbat__: depends on what your goal is..
09:41:26 <__dingbat__> dminuoso: send across simple length prefix messages which are encoded in some format..
09:41:33 <dmj`> __dingbat__: network 
09:42:22 <__dingbat__> dmj`: did you network.socket?
09:42:26 <__dingbat__> mean*
09:42:34 <dmj`> @package network
09:42:34 <lambdabot> http://hackage.haskell.org/package/network
09:42:35 <dmj`> is what I mean
09:42:53 <dmj`> Network.Socket is in there yea
09:43:20 <__dingbat__> I tried http://hackage.haskell.org/package/network-simple-0.4.5/docs/Network-Simple-TCP.html, but faced an issue with "recv", the call is not blocking, it returns Nothing if it cant read from the socket, so its not useful . Very strange i felt.
09:44:12 <__dingbat__> dmj`: I will look into network.socket, but was hoping for a simpler library that abstracts away the low level stuff
09:45:16 <EvanR> __dingbat__: probably Network.Simple.TCP is taking the liberty to set sockets non-blocking for you... 
09:45:17 <dmj`> __dingbat__: websockets is nice for that I've found
09:45:47 <dmj`> __dingbat__: what are you building, most of the time I've found a REST API to be simpler, since its stateless
09:47:03 <__dingbat__> dmj`: I want to avoid the HTTP overhead, I need simple TCP with JSON-RPC'ish messages over it
09:47:11 <EvanR> a man asks for simple length prefixed messages and he gets HTTP :'(
09:47:14 <__dingbat__> EvanR: do you know how to turn it off?
09:47:28 <EvanR> i'm really surprised by that behavior
09:47:54 <dmj`> EvanR: I said network originally
09:47:57 <EvanR> __dingbat__: it says Nothing is returned on closed connection or end of input
09:48:21 <EvanR> otherwise it returns at least 1 byte
09:48:28 <dmj`> __dingbat__: is an extra few bytes really going to be significant overhead?
09:48:40 <dmj`> what are you building
09:48:43 <EvanR> there's also conceptual overhead of the HTTP-verse
09:49:08 <dmj`> there's also overhead of handling connections and exceptions that can occur with them
09:49:18 <__dingbat__> EvanR: what does "end of input" mean? no more bytes to read?
09:49:32 <dmj`> __dingbat__: can you paste your code?
09:50:08 <EvanR> end of input means your socket was backed by a file that ended
09:50:15 <__dingbat__> dmj`:  I have a Haskell daemon to which I want to post RPC type messages from Python
09:52:19 <EvanR> ok it doesn't seem to be setting nonblock as far as i can see
09:53:22 <__dingbat__> https://www.codepile.net/pile/2v9680LK
09:53:50 <__dingbat__> It prints "Nothing" infinitely
09:54:06 <EvanR> after connecting ?
09:54:29 <EvanR> code doesn't show how the connection is set up
09:54:51 <__dingbat__> first it receives the data from server, after that its never ending "Nothing."..
09:55:10 <EvanR> so the server has closed the connection?
09:55:24 <__dingbat__> no, the server is still listening
09:55:29 <EvanR> wait...
09:55:37 <EvanR> the python client has closed the connection?
09:55:59 <EvanR> server listening means waiting for new connections
09:56:34 <EvanR> this is TCP, connections open, we do communication, then they close forever
09:57:16 <dmj`> use python requests module, setup a servant-server, call it a day
09:57:28 <dmj`> don't see why a persistent connection is necessary
09:57:49 <__dingbat__> the Python code is pasted into the same link now...
09:57:51 <EvanR> __dingbat__ could still do this using just TCP
09:58:11 <EvanR> though it wouldn't be as simple as this code snippet (you might read less than you want)
09:58:28 <EvanR> assuming these issues get worked out
09:59:05 <__dingbat__> the code I've pasted is still primitive, needs to be made robust, but was stuck with failing "recv"
09:59:14 <EvanR> sorry, the python program sets up a server... and your haskell code sets up a server...
09:59:49 <EvanR> this isn't matching my "client server" / "connect listen" model of TCP
10:01:52 <__dingbat__> EvanR: the Haskell code is TCP client
10:02:50 <EvanR> you want to connect to a haskell program and send a message from python, then disconnect?
10:03:30 <EvanR> server is in haskell, waiting for messages to be posted from <whatever>
10:03:40 <EvanR> am i on the wrong track
10:05:45 <__dingbat__> EvanR: Python is server, Haskell is client
10:06:04 * EvanR scrolls up
10:06:15 <__dingbat__> I think the sample Python server may be the problem
10:06:24 <EvanR> "I have a Haskell daemon to which I want to post RPC type messages from Python"
10:06:48 <EvanR> maybe i woke up in bizarro world or something
10:07:18 <EvanR> daemon = server
10:07:34 <__dingbat__> EvanR: sorry for the confusion, there are servers on both end, RPCish (think thrift) the client always invokes the request, and server always responds 
10:08:25 <EvanR> so haskell is reading the response
10:08:55 <EvanR> after you read the response i would expect the other side "the server" to close the connection
10:09:28 <EvanR> well or it was already closed
10:09:57 <EvanR> in any case, did you get all the data you wanted on the first recv ?
10:09:57 <__dingbat__> but why is it closing, I just want it to be open (connected state)
10:10:05 <__dingbat__> yes, I got all the data
10:10:09 <EvanR> yay!
10:10:19 <EvanR> you have to ask python why it's closing
10:11:03 <EvanR> that being said, opening a new connection on each request sounds simpler
10:11:34 <EvanR> you will have to deal with closed connections either way
10:13:12 <__dingbat__> "a new connection on each request " -- too much overhead 
10:15:04 <EvanR> really...
10:15:38 <EvanR> if so then you really do want a large framework and not simple sockets
10:17:23 <__dingbat__> EvanR: thank you, i traced the bug to Python will continue hacking my way making the Haskell code robust 
10:28:53 <ondrejs> Hello. Is anyone reading the hackage trustees email? I sent a request to be added to the uploader group five days but I am getting "Forbidden" when trying to upload a candidate of a package of which I am a maintainer. 
10:31:25 <Bonz> @lambdabot > 3+3
10:31:25 <lambdabot> Unknown command, try @list
10:31:30 <Bonz> @lambdabot 3+3
10:31:30 <lambdabot> Unknown command, try @list
10:31:36 <ski> > 3 + 3
10:31:38 <lambdabot>  6
10:31:52 <ski> @run 3 + 3
10:31:54 <lambdabot>  6
10:31:55 <pikajude> > let 3 = 2 in 3 + 3
10:31:57 <lambdabot>  6
10:32:01 <pikajude> still doesn't work :(
10:32:02 <ski> @help run
10:32:02 <lambdabot> run <expr>. You have Haskell, 3 seconds and no IO. Go nuts!
10:32:37 <ski> > 2 + 2 = 6 in 2 + 2
10:32:40 <lambdabot>  <hint>:1:7: error:
10:32:40 <lambdabot>      parse error on input ‘=’
10:32:40 <lambdabot>      Perhaps you need a 'let' in a 'do' block?
10:32:42 <ski> > let 2 + 2 = 6 in 2 + 2
10:32:44 <lambdabot>  6
10:32:55 <pikajude> yeah, i suppose...
10:34:20 <Bonz> > sqrt 777
10:34:23 <lambdabot>  27.874719729532707
10:38:04 <Ariakenom> > 0.1 + 0.2
10:38:06 <lambdabot>  0.30000000000000004
10:38:42 <pikajude> sounds about right
10:39:40 <Bonz> >1 / 10 + 2 / 10
10:40:58 <Bonz> >  4/10+ 2 / 10
10:41:01 <lambdabot>  0.6000000000000001
10:43:03 <EvanR> > 4/10 + 2/10 :: Centi
10:43:05 <lambdabot>  0.60
10:43:11 <EvanR> > 4/10 + 2/10 :: Pico
10:43:13 <lambdabot>  0.600000000000
10:43:42 <EvanR> and all was good until one day someone divided by 3
10:45:12 <Ariakenom> > (1 / 3 * 3 :: Rational) == 1
10:45:14 <lambdabot>  True
10:46:32 <Ariakenom> > [0.0, 2 .. 3]
10:46:34 <lambdabot>  [0.0,2.0,4.0]
10:47:17 <EvanR> "that makes no sense"
10:47:50 <pikajude> so if you're not supposed to use floats for financial calculations, what DO you use? integer arithmetic?
10:48:24 <pikajude> rationals? lol
10:48:27 <Ariakenom> integer cents if good if you count in cents
10:48:43 <Ariakenom> Rational is good
10:49:51 <EvanR> i used decimals 
10:50:02 <EvanR> and made the sure the formulas i used made sense
10:50:15 <dmwit> pikajude: CReal
10:50:27 <dmwit> serializing your state is hard, tho
10:50:28 <pikajude> that's what i eat for breakfast
10:50:32 <EvanR> like, tax calculations can sometimes give results that need to be rounded
10:50:37 <Lycurgus> decimal is the biz/financial numeric type
10:50:40 <EvanR> make sure rounding works as specified
10:50:48 <pikajude> integer arithmetic results in truncation
10:50:55 <pikajude> if you calculate interest frequently enough, you'll result in 0 interest earned
10:50:58 <Lycurgus> ibm mainframes used it as basic code 
10:51:01 <Ariakenom> Rational and explicit rounding seems the most sensible to me
10:51:05 <pikajude> however, let me just say that i'm not exactly an expert on financial calculations
10:51:20 <pikajude> this problem has most likely already been considered by professionals
10:51:44 * hackage language-puppet 1.4.6 - Tools to parse and evaluate the Puppet DSL.  https://hackage.haskell.org/package/language-puppet-1.4.6 (pi3r)
10:51:49 <Ariakenom> decimals are not too uncommon on older systems. when what computers were fast at was different
10:51:51 <EvanR> integer arithmetic doesn't result in truncation
10:52:01 <pikajude> what's half of 3 cents?
10:52:02 <EvanR> 100% of the time at least
10:52:27 <pikajude> 100% of the time, it works every time
10:52:29 <EvanR> i used 8 decimal places and made sure rounding works
10:52:37 <pikajude> that's not too bad
10:52:40 <Lycurgus> https://en.wikipedia.org/wiki/EBCDIC
10:52:51 <EvanR> and made sure the rounding is what the client was expecting (haha)
10:52:59 <EvanR> (they have no idea)
10:53:08 <pikajude> i love ebcdic
10:53:22 <Ariakenom> the safe-money package on hackage makes a useful distinction between precise "Dense" calculations and can-exist-in-real-life "Discrete" money
10:53:36 <pikajude> ooh, that's smart
10:53:56 <pikajude> so Dense wraps a rational and then Discrete converts to Centi or whatever
10:54:02 <pikajude> i like that solution
10:54:36 <EvanR> if you multiple two decimals that have m fractional digits and n fractional digits, you need a result with m + n fractional digits
10:54:39 <EvanR> multiply
10:54:56 <EvanR> then you may or may not need to round if you have less than m + n digits to present the final answer
10:55:05 <Ariakenom> dense is also a rational but thats not important
10:55:06 <EvanR> and division is multiplication by a reciprocal
10:55:17 <pikajude> well yeah if it wraps a rational then it would be one
10:55:50 <EvanR> so 0.03 * 0.5 needs 3 digits after the decimal, and all is good in the world
10:56:12 <EvanR> things we forget in the world of floats
10:57:20 * Ariakenom doesnt forget
10:57:25 * Ariakenom stares haunted into the distance
10:58:17 <MarcelineVQ> zerg rush in at Ariakenom while the camera pans out skyward
10:59:40 <Ariakenom> Meeeengsk!!
11:02:23 <dmwit> EvanR: How many digits does 1/3 need?
11:02:48 <EvanR> infinity
11:02:50 <dmwit> (or: saying "division is multiplication by a reciprocal" doesn't seem like it actually deals with all the edge cases)
11:02:51 <EvanR> don't divide by 3
11:03:37 <Ariakenom> well the reciprocal introduces all the digits
11:03:43 <EvanR> division is multiplication by a reciprocal nonetheless. 3 isn't really an edge case, you won't be able to divide by any number relatively prime to 10 with decimals
11:03:54 <dmwit> To me that answer sounds essentially the same as "don't divide". Since almost all denominators run into this problem.
11:04:03 <EvanR> do divide by certain numbers
11:04:23 <EvanR> do take square roots of rational squares
11:04:32 <EvanR> if you don't like it, don't use decimals :)
11:05:00 <dmwit> You're quite a salesman.
11:05:12 <EvanR> decimals seem to exist mainly for sales
11:05:35 <Ariakenom> I prefer simple answers "dont use decimals"
11:05:36 <bifunc2> C size_t is Haskell CSize. What is C ssize_t? https://jameshfisher.com/2017/02/22/ssize_t/
11:05:59 <EvanR> i like the decimal story
11:06:17 <EvanR> because it's isomorphic to the problem we have with floats, just change the base
11:06:52 <EvanR> well some of the problems with floats
11:07:09 <EvanR> decimal libs that introduces NaN and Inf for decimals are insane
11:07:59 <dmwit> bifunc2: I believe the answer to that is "no".
11:08:39 <EvanR> signed size_t
11:09:02 <EvanR> i need to get on that parody C standard project
11:10:15 <Ariakenom> EvanR: a fixed point decimal as in x:Integer; x/10000; Im ok with if you know what you need
11:10:56 <bifunc2> ok...
11:11:09 <bifunc2> dmwit,  hmm
11:11:11 <bifunc2> strange
11:11:13 <EvanR> yeah, multiplication needs m + n precision basically.
11:11:20 <EvanR> which may be infinity
11:11:42 <EvanR> if it's 4 or less in your case you're good
11:11:42 <freeman42x> I'm trying to figure out minimal code that starts a WebSockets server and then allows sending string messages to the client. Been looking at this code but I do not fully understand it and it seems overly complicated for my usecase: https://github.com/jaspervdj/websockets/blob/master/example/server.lhs#L73
11:12:36 <Ariakenom> whenever I hear someone talking about decimals I assume they want it for general purpose stuff. which makes no sense to me
11:13:30 <Ariakenom> apple's excel use ieee's decimal128
11:13:39 <Ariakenom> it's a fairly compact transfer format I suppose
11:14:24 <EvanR> 128 digits ought to be enough for anybody
11:21:59 <freeman42x> websockets package is saying to use wai-websockets. Does anyone know of a wai-websockets tutorial / example?
11:23:53 <bifunc2> dmwit what did you mean?
11:24:24 <bifunc2> this could be it: http://hackage.haskell.org/package/base-4.12.0.0/docs/System-Posix-Types.html#t:CSsize
11:24:35 <bifunc2> it seems like a posix thing, not a standard c thing..
11:26:16 <EvanR> newtype CCc
11:40:14 * hackage postgrest 6.0.1 - REST API for any Postgres database  https://hackage.haskell.org/package/postgrest-6.0.1 (steve_chavez)
11:43:14 * hackage postgrest 6.0.2 - REST API for any Postgres database  https://hackage.haskell.org/package/postgrest-6.0.2 (steve_chavez)
11:44:47 <fraktor> I'm doing some database stuff with SQLite, and this is the best way I can think of to determine if an insert succeeded.  Can anyone suggest a better way?  https://0paste.com/40676#hl
11:45:33 <fraktor> Also, I don't like the way I'm doing multiline strings at present, and I'd like some suggestions for alternatives.
11:45:46 <EvanR> isn't the idea your commit succeeds unless you get an exception?
11:46:01 <nitrix-or-treat> What features of the language prevents GHC from using region based memory allocation / inference?
11:46:30 <nitrix-or-treat> In a pure language I would expect this to be even easier, not harder.
11:46:49 <ammar2> fraktor: yeah, I would think that the library would propagate an error or exception if the insert doesn't succeed
11:47:03 <ammar2> your check is probabyl redundant
11:47:46 <EvanR> if you're in a transaction you might have to wait until the commit to get the error
11:48:18 <fraktor> I still need to learn how exceptions work in Haskell.
11:48:41 <MarcelineVQ> @where parconc
11:48:42 <lambdabot> https://www.safaribooksonline.com/library/view/parallel-and-concurrent/9781449335939/
11:49:00 <ammar2> read the docs and try doing an insert that you know will fail, e.g delete the underlying table or try to insert a duplicated primary key
11:49:13 <MarcelineVQ> should have some good things to say about exceptions, iirc
11:49:55 <EvanR> that check might also introduce false negatives
11:50:13 <EvanR> if between the time you insert something else deletes the entry, you will detect an error for no reason
11:50:41 <fraktor> That's true.  You're right, I should see if it throws an exception.
11:51:59 <EvanR> i misread the test, nvm
11:57:03 <ondrejs> Hello. Is anyone reading the hackage trustees email? I sent a request to be added to the uploader group five days but I am getting "Forbidden" when trying to upload a candidate of a package of which I am a maintainer. cc phadej hvr
11:57:34 <MarcelineVQ> ondrejs: be sure to ask in #hackage as well if you haven't yet
11:57:59 <ondrejs> MarcelineVQ that's a good suggestion, thank you!
11:58:13 <MarcelineVQ> It's quieter so something said there is more likely to draw attention since something happened :D
12:14:18 <dmwit> bifunc2: I meant that as far as I know the FFI doesn't specify a type that corresponds to ssize_t. The obvious ways to deal with this are to 1. make wrappers around whatever ssize_t operations you want that accept a sane type instead or 2. during compilation, ask your friendly neighborhood C compiler what type ssize_t actually is and bind to that instead.
12:15:31 <EvanR> looks like that posix types module does 2 for you
12:17:10 <dmwit> Could be.
12:19:00 <EvanR> ssize seems useful for representing contains with negative size
12:19:33 <dmwit> ssize_t is an abomination.
12:19:55 <EvanR> lol
12:20:42 <dmwit> I think it pretty much exists exactly because proper algebraic types are too hard in C.
12:21:30 <EvanR> how would they help here?
12:27:25 <bifunc2> thanks!
12:28:13 <dmwit> EvanR: Instead of returning -1 for errors, and positive numbers for sizes, you'd use an actual error type for the errors and normal size_t for sizes.
12:32:37 <EvanR> ok
12:33:44 * hackage graphmod 1.4.4 - Present the module dependencies of a program as a "dot" graph.  https://hackage.haskell.org/package/graphmod-1.4.4 (IavorDiatchki)
12:55:15 <wildtrees>  does template haskell do something to how I can order my program's definitions? 
12:55:30 <zeta_0> hello guys, do you know anyone that is on #haskell-ide-engine that can help me ? no one is responding ?
12:55:33 <dminuoso> wildtrees: What do you mean exactly?
12:55:50 <wildtrees> can I still have all my definitions "out of order" ? 
12:55:56 <dminuoso> wildtrees: Not quite.
12:56:09 <dminuoso> wildtrees: Template Haskell is executed during parsing.
12:56:30 <dminuoso> wildtrees: So whenever a splice is detected, parsing is halted, TH is executed, and then spliced in. So you cannot ever see anything in front of your splice.
12:57:37 <EvanR> so basically yes TH affects how you are able to order definitions drastically
12:58:44 <wildtrees> yea I just moved the record I was making lenses from and the TH "function(?)/splice(?)" further up in my source code and it is working now
13:01:21 <dminuoso> wildtrees: If you want to learn more, check out https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#template-haskell - in particular the section that starts with "Top-level declaration splices break up a source file into declaration groups"
13:02:33 <dminuoso> (The details are far more subtle than I laid them out)
13:13:53 <tabaqui1> hey, I wanted to solve a problem with constants and pattern matching
13:14:23 <tabaqui1> (you cannot match on some "eRROR_NETWORK_CODE", because haskell will bind input value to the local variable)
13:14:36 <tabaqui1> so I've written some templates
13:14:39 <tabaqui1> check it out:
13:14:43 <tabaqui1> https://pastebin.com/vM7g2JHv
13:15:44 <zeta_0> i would like to learn lenses in haskell more in depth, is there a good book, pdf or link this stuff ?
13:15:55 <tabaqui1> actually, I made another template that allows me to "$(generateConstants ["errorConfig", "errorNetwork"])" and splices into these class and four instance definitions
13:16:01 <tabaqui1> what do you think?
13:16:24 <EvanR> tabaqui1: have you looked into pattern synonyms?
13:16:35 <jackdk> zeta_0: https://github.com/data61/lets-lens https://artyom.me/lens-over-tea-1
13:17:03 <tabaqui1> EvanR: yeah, but you still have to write a lot of boilerplate
13:17:36 <jackdk> zeta_0: I found lens-over-tea hard going, so I'd suggest trying to work through the lets-lens exercises
13:17:42 <tabaqui1> I generate all instances with single "generateConstants :: [String] -> DecsQ" template
13:18:31 <EvanR> cool
13:19:02 <tabaqui1> hmm, probably, I could generate boilerplate for synonims with similar template :)
13:20:56 <tabaqui1> oh, and synonims are monomorphic, right? in my approach it is possible to define instances of ErrorCodes for Int, Integer and so on...
13:23:05 <EvanR> any reason youre not using a sum type tp indicate error condition
13:25:07 <tabaqui1> tough question :)
13:25:58 <tabaqui1> probably, because I think too imperative still
13:26:29 <tabaqui1> it's a common pattern to use separated global variables as constants
13:26:54 <zeta_0> jackdk: thanks for the links
13:27:22 <EvanR> instead of multiplexing data and errors into Int, Integer, etc, use Either ErrorCode Int and Either ErrorCode Integer
13:27:32 <EvanR> now you don't have n copies of ErrorCode one for each number
13:27:43 <EvanR> type
13:27:59 <tabaqui1> copies are not a problem, because I generate them anyway
13:28:10 <EvanR> C++ is that way
13:28:36 <jackdk> zeta_0: actually probably fairer to say that you might want to try interleaving them. I bounced off lens-over-tea when I was a much greener haskeller than when I did lets-lens
13:28:49 <tabaqui1> yeah, thanks, I'll consider it
13:29:24 <jackdk> zeta_0: but the important thing is to do the exercises and really get a feel for what the types are doing. expect large amounts of "programming-by-type-holes"
13:31:47 <zeta_0> i just finished learning some category theory(which helped me understand haskell better), that's where i heard about lenses
13:32:40 <zeta_0> jackdk: ok, thanks for the tips
13:35:59 <ski> @google programming with lenses bananas barbed wire
13:36:00 <lambdabot> http://www.google.com/url?q=https://maartenfokkinga.github.io/utwente/mmf91m.pdf
13:36:00 <lambdabot> Title: Уведомление о переадресации
13:36:27 * ski idly wonders why that displays title with cyryllic letters
13:36:58 <ski> (nice paper, though)
13:37:21 <ski> zeta_0 ^
13:39:51 <EvanR> russian interference suspected
13:40:06 <zeta_0> ski: thanks, i'm excited to learn lenses more in depth, category theory is very interesting and natural to learn
13:41:36 <tabaqui1> @google programming with lenses bananas barbed wire
13:41:36 <lambdabot> http://www.google.com/url?q=https://maartenfokkinga.github.io/utwente/mmf91m.pdf
13:41:36 <lambdabot> Title: Уведомление о переадресации
13:41:49 <tabaqui1> hm, it is about lambdabot or my LC_ALL?
13:41:56 <[exa]> lambdabot resides in mother russia?
13:42:22 <w3s> ay
13:42:23 <zeta_0> at first climbing the ladders of abstraction in category theory blew my brains out, but i think i am finally starting to understand abstraction better
13:45:00 <syd> I need help with a variable name:p
13:45:14 <syd> Your children and their children recursively are called your ancestry
13:45:22 <syd> but what do you call the group of your ancestry + you
13:45:39 <syd> s/ancestry/legacy
13:45:42 <poljar> family 💗
13:45:46 <syd> same question for parents and ancestry
13:45:52 <syd> no because family also includes parents, ...
13:46:27 <boj> i enjoy using 'a', it is short
13:46:49 <syd> :p  It's not just a variable name, also a keyword in a filter language for forests of things
13:47:36 <tabaqui1> gang?
13:48:12 <tabaqui1> grands?
13:48:18 <EvanR> tree?
13:48:52 <MarcelineVQ> lineage, but "<syd> Your children and their children recursively are called your ancestry" doesn't sound right to me, ancestors precede you not follow you
13:49:05 <MarcelineVQ> oh you did a s/
13:49:28 <syd> oh
13:49:31 <syd> lineage is great!
13:49:35 <EvanR> IRC immutability strikes again
13:50:14 <syd> is there an equivalent for all parents recursively + you?
13:50:18 <MarcelineVQ> technically speaking lineage is a line from someone in the past running to current you
13:50:22 <MarcelineVQ> but it sounds nice
13:50:35 <syd> Lineage (anthropology), a group that can demonstrate their common descent from an apical ancestor or a direct line of descent from an ancestor
13:50:45 <syd> Lineage (evolution), a temporal sequence of individuals, populations or species representing a continuous line of descent
13:50:50 <syd> seems to depend on the field
13:52:00 <MarcelineVQ> "<syd> is there an equivalent for all parents recursively + you?" syd: ancestry
13:52:31 <syd> how about parents recursively without you?
13:52:35 <MarcelineVQ> that's ancestors
13:53:36 <syd> oh dear :p
13:53:37 <syd> ok thanks
13:53:41 <syd> this is gonna need docs
13:53:50 <MarcelineVQ> What's worse is that this depends on who you ask.
13:54:00 <MarcelineVQ> Because English, and human language in general, is awful.
13:54:10 <syd> alternatively, is there a better way to solve this problem?
13:54:22 <MarcelineVQ> What is the problem?
13:54:40 <syd> I have a forest of entries
13:54:44 <syd> and one of them is selected
13:54:54 <syd> using something like a forest-zipper (called a forest cursor)
13:55:15 <syd> and I want a filter-language to return a boolean for that node
13:55:20 <syd> so I already got this working:
13:55:33 <syd> ancestor:has-tag:work
13:55:34 <syd> for example
13:55:45 <syd> and that will return True if any of the ancestors (recursively) has a tag 'work'
13:56:38 <syd> so I'd like all three of these options to have a keyword: "parent, one step", "parent, any number steps", "parent, any number of steps, or me"
13:56:50 <syd> does that make sense?
13:57:32 <MarcelineVQ> yes
13:57:57 <MarcelineVQ> out of cursiosity what is the string to say all ancestors must have work?
13:59:00 <syd> that's not expressable at the moment, I think
13:59:47 <syd> this problem would be solved if my language had let-bindings :P
14:03:31 <monochrom> Don't forget there is "descendents" for your children and their children etc.
14:04:00 <syd> oh right
14:04:09 <monochrom> If "me" is to be included I would just use "ancestors+self" in one direction and "descendants+self" in the other.
14:04:10 <syd> but it's all still ambiguous whether you're a member of that group :s
14:04:19 <syd> yeah
14:04:35 <syd> for now I'll just always include self in ancestor and legacy
14:04:44 <syd> and see if anyone actually runs into a problem with it
14:04:55 <monochrom> It is always good to be redundant, so "ancestors (don't include self)" is cool.
14:05:21 <monochrom> Actually maybe you just need to know whether your audience is English vs French.
14:05:43 <monochrom> Because in English "positive" means "> 0", but I heard that the French goes ">= 0".
14:06:11 <__monty__> Aren't you confusing positive with "natural number" there?
14:06:17 <monochrom> No.
14:06:29 <__monty__> Naturals are usually 0 inclusive.
14:06:39 <monochrom> And don't forget the mathematicians themselves still disagree on whether 0 is a natural number.
14:06:53 <__monty__> Nah, only the ones who're wrong disagree on that : >
14:07:00 <monochrom> (Just crack open any real analysis book or number theory book. Yes number theory.)
14:07:43 <monochrom> (Ask Terrence Tao >:) )
14:08:10 <monochrom> Also troll them with "0^0".
14:09:08 <MarcelineVQ> ancestors+me = descendants:not
14:09:30 <monochrom> That breaks because siblings and cousins and uncles etc.
14:09:55 <MarcelineVQ> oh my, families are awful
14:10:10 <MarcelineVQ> We should replace them with something simpler.
14:10:10 <monochrom> This is why the Ottoman dynastic killed all the new king's siblings >:)
14:10:22 <monochrom> s/dynastic/dynasty/
14:10:48 <maralorn> > the mathematicians themselves still disagree on whether 0 is a natural number.
14:10:50 <lambdabot>  <hint>:1:79: error:
14:10:50 <lambdabot>      parse error (possibly incorrect indentation or mismatched brackets)
14:11:02 <maralorn> It‘s not like ther will ever be a solution for that problem …
14:11:36 <syd> > ancestors+me = descendants:not MarcelineVQ: that's only true if used as a set comprehension :p
14:11:39 <lambdabot>  <hint>:1:14: error:
14:11:39 <lambdabot>      parse error on input ‘=’
14:11:39 <lambdabot>      Perhaps you need a 'let' in a 'do' block?
14:12:12 <tabaqui1> In Russia, integers always means >0
14:12:33 <tabaqui1> but in high school, we use special symbols
14:12:36 <MarcelineVQ> 3>y'all >up in here
14:12:45 <tabaqui1> like N for ints, N_0 for ints with zero
14:13:14 <tabaqui1> or N^+ vs just N
14:13:41 <tabaqui1> it's a little bit confusing, but usually you understand the actual set by the context
14:13:46 <monochrom> Do the Russians hate C because C's int is signed? >:)
14:13:58 <tabaqui1> not much
14:14:02 <sarahzrf> the russians hate C because everyone hates C
14:14:03 <monochrom> Yes please use context!
14:14:16 <tabaqui1> our programmers are not mathematicians mostly
14:14:36 <monochrom> Worst thing to do is take a word out of context and go ask random stranger on the net.
14:14:51 <tabaqui1> and we don't mean int as integer, it just strange english word
14:15:08 <monochrom> Ah OK that's better.
14:15:13 <tabaqui1> we pronouns naturalnye chisla, but not integers
14:15:46 <MarcelineVQ> so is ancestors+me vs ancestors the difference between non-negative and positive
14:16:21 <monochrom> Yeah!
14:16:55 <tabaqui1> recently, I was explainig a junior Peano numbers in Haskell, and forget that Int /= Nat, because I was thinking in russian terms
14:17:03 <monochrom> If you imagine "me" is 0.
14:17:15 <tabaqui1> "to a junior"
14:17:46 <monochrom> Do you know of the movie (old) "Firefox"?
14:18:21 <tabaqui1> nope
14:18:22 <MarcelineVQ> no but eastwood and scifi sounds amazing
14:18:30 <tabaqui1> MIG-31, haha
14:18:38 <MarcelineVQ> oh "techno-thriller "
14:19:08 <monochrom> It's about the US wanting to steal a USSR prototype jet fighter called "Firefox" that you would pilot by thinking.  But "you must think in Russian!".
14:19:19 <tabaqui1> oh, it is real
14:19:45 <tabaqui1> dude, there are a lot of movies about "angry soviet people", and we still get fun of it
14:19:56 <tabaqui1> "kokainum!"
14:19:59 <monochrom> So I figure that you would be a good pilot of it because you think in Russian, even when you're haskelling :)
14:20:31 <tabaqui1> ah :)
14:20:49 <tabaqui1> why do all aliens speak english?
14:20:49 <MarcelineVQ> haha, wtf this firefox thing is a YF-21
14:21:18 <monochrom> In Japan, all aliens speak Japanese, and land in Tokyo instead of Los Angeles. >:)
14:21:44 <MarcelineVQ> "Think in german, Shinji!" "Ah okay.. uhm... struuuudel... volkswaaagen..."
14:22:00 <monochrom> I agree about strudel!
14:22:15 <MarcelineVQ> struupwafffel
14:28:21 <psych0naut> pherhaps this is a dumb question, but what are those '[m]' at the end of nicknames for?
14:28:41 <tabaqui1> moderator, probably?
14:28:55 <psych0naut> probably?
14:29:02 <dminuoso> psych0naut: mobile?
14:29:10 <dibblego> matrix
14:29:17 <psych0naut> ohh dminuoso maybe
14:29:17 <tabaqui1> macarena?
14:29:21 <psych0naut> lol
14:29:43 <dminuoso> Ah, could be matrix indeed.
14:29:43 <dibblego> https://matrix.org/
14:30:02 <dminuoso> monochrom: Wow, I just watched the trailer of that. It's ridiculously strange.
14:30:16 <dminuoso> And Im not even talking about the story
14:30:17 <psych0naut> like the matrix movie? 
14:30:50 <psych0naut> :D
14:31:56 <psych0naut> wow! very interesting stuff.
14:34:05 <sm[m]> [m] is the (default, optional) indicator of people logged via the matrix-freenode bridge, eg because they want to use a rich chat client
15:17:57 <maralorn> I have a problem with the design of my datatype: It‘s a huge record, but some fields change depending on one of 5 different states the record could be in.
15:18:43 <maralorn> I could now make a sumtype of five different huge records, but that would result in a lot of code duplication.
15:19:15 <Axman6> can you put those fields sum types and place that inside the record?
15:19:25 <maralorn> Or I could make a small sumtypes only with the changing fields and use that as one field of the huge record.
15:19:51 <maralorn> Axman6: That what you meant?
15:20:03 <maralorn> It just feels a little clumsy …
15:20:50 <Axman6> yep
15:21:45 <Axman6> you've reminded my of my favourite piece of latin legalese when when I was a patent examiner, https://en.wikipedia.org/wiki/Mutatis_mutandis
15:22:41 <maralorn> Hm, interesting.
15:24:10 <maralorn> So when I have a sum of records, is it a good practice to first declare 5 different record data types and then an enum with these 5 types? Otherwise I‘ll have partial field access.
15:24:17 <Axman6> we wrote a lot of "I agree, mutatis mutandis, with the opinion of the US examination report" which basically says "your claims are different but substantially the same, the US told you to change tyhem and I agree"
15:25:10 <Axman6> maralorn: in our code at work we tend to do that - plays pretty nicely with lenses, you get a prism for the sum type and then lenses into the fields of the wrapped typer
15:25:14 <Axman6> types*
15:25:57 <maralorn> Not sure, if I wanna push the users of my lib to use lenses …
15:26:24 <maralorn> But it‘s probably the best way anyways.
15:26:36 <Axman6> If I am a user of your library, bring able to use lenses would make me very happy =)
15:27:53 <jackdk> lenses are pretty darn great, I agree
15:28:10 <dminuoso> maralorn: You dont have to.
15:28:25 <dminuoso> maralorn: You can expose an interface to update fields using lens internally, but hiding the implementation.
15:28:37 <dminuoso> But if you do, be sure to export the lenses regardless. :p
15:28:59 <Axman6> you there's no reason not to also expose all the data types, but giving people the option to use optics makes the library integrate into other parts of the ecosystem in a clean consistent way
15:29:02 <dminuoso> Axman6: We should be pushing for optics more. :-P
15:29:56 * Axman6 opens the first annual meeting of the Optics Posse
15:33:50 <crestfallen> hi is there a way to get an unlimited history in ghci (more than default 100 entries?)
15:34:58 <crestfallen> that seems to be the default anyhoo
15:35:38 <maralorn> I have a quickcheck property with \t -> t == f t, which fails. Is there a way to print t and f t, when it fails?
15:36:19 <maralorn> Because just seeing the wrong t doesn‘t tell me what my mistake in f is.
15:36:51 <Axman6> try ===
15:37:13 <Axman6> http://hackage.haskell.org/package/QuickCheck-2.13.2/docs/Test-QuickCheck.html#v:-61--61--61-
15:37:48 <maralorn> cool thx
15:38:03 <crestfallen> I went to ~/.ghc/ghci_history but that gives me 100 commands
15:38:35 <crestfallen> I need yesterday's fiasco not today's
15:38:59 <maralorn> Hm, is there also a way to let Quickcheck pretty print the counterexample?^^
15:39:24 <Axman6> crestfallen: https://stackoverflow.com/questions/3388261/ghci-configuration-file
15:40:07 <Axman6> maralorn: https://hackage.haskell.org/package/quickcheck-assertions maybe?
15:41:07 <dsal> maralorn: That's what counterexample does.
15:46:11 <dsal> % quickCheck $ \x -> let f = (+1) in Q.counterexample (mconcat ["x=", show x, ", f x=", show (f x)]) $ x == f x -- maralorn your example is something like this, I think.
15:46:11 <yahb> dsal: *** Failed! Falsifiable (after 1 test):; 0; x=0, f x=1
15:50:14 <dsal> I like this example:
15:50:15 <dsal> % quickCheck $ \x -> Q.counterexample (mconcat ["x=", show x, ", abs x=", show (abs x)]) $ abs x >= (0::Int8)
15:50:15 <yahb> dsal: +++ OK, passed 100 tests.
15:50:17 <dsal> % quickCheck $ \x -> Q.counterexample (mconcat ["x=", show x, ", abs x=", show (abs x)]) $ abs x >= (0::Int8)
15:50:17 <yahb> dsal: +++ OK, passed 100 tests.
15:50:20 <dsal> % quickCheck $ \x -> Q.counterexample (mconcat ["x=", show x, ", abs x=", show (abs x)]) $ abs x >= (0::Int8)
15:50:20 <yahb> dsal: *** Failed! Falsifiable (after 85 tests):; -128; x=-128, abs x=-128
15:56:47 <maralorn> Hm, the show representation of both my objects are the same. Still quickcheck says they are not equal …
15:56:50 <crestfallen> thanks Axman6 !
15:57:11 <maralorn> Is there a problem with Eq and HashMap?
15:57:18 <dsal> maralorn: Sounds like a bug in ==  :)
15:57:31 <dsal> (or show)
15:57:44 <maralorn> That sounds unlikely …
15:57:57 <maralorn> But I have derived buth instances …
15:58:34 <fraktor> For someone familiar with using SQLite, is there a way to get the id of something you just inserted?
15:58:36 <MarcelineVQ> so what is the counterexample?
15:58:46 <dminuoso> maralorn: And what is your datatype?
15:58:49 <dsal> I could pretty easily write a bug in ==.  Derived just means it's going to use the == of the things your type is composed of.
15:58:53 <dsal> fraktor: what interface?
15:59:01 <dsal> (but yes, there is)
15:59:43 <fraktor> dsal: I'm using sqlite-simple
16:00:12 <dminuoso> fraktor: lastInsertRowId
16:00:15 <fraktor> Oh wait, I just realized: since I'm using INTEGER PRIMARY KEY, I can just use lastInsertRowId (so long as I'm in a transaction, which I am in this case)
16:01:09 <dsal> You don't need a transaction:  sqlite> insert into test (t) values ('hello'); select last_insert_rowid();
16:01:39 <dminuoso> fraktor: The operation is connection-wide.
16:01:54 <fraktor> What if there are multiple connections though?
16:02:02 <dminuoso> fraktor: its still per-connection.
16:02:06 <dsal> https://www.sqlite.org/c3ref/last_insert_rowid.html
16:02:19 <dsal> If there are multiple connections, you're less likely to get a confusing answer.  :)
16:02:30 <fraktor> Oh, I didn't know that.  I'm inside a transaction for other reasons, but that's good to know.
16:05:02 <fraktor> Hmm.  Another question: I've got an operation that can either succeed quietly or fail with an error message.  Should I do Maybe String, where Nothing indicates success, or Either String (), where Right represents success?
16:05:09 <maralorn> MarcelineVQ: dminuoso: https://pastebin.com/Li3fZPuq
16:05:23 <hpc> the latter
16:05:32 <maralorn> That‘s not even complete. The problem could be in one of the field types …
16:05:37 <hpc> it interacts in the expected way with things like (<|>) and (>>=)
16:05:48 <dminuoso> maralorn: What is Annotation?
16:05:54 <dminuoso> maralorn: And Status?
16:05:57 <dminuoso> maralorn: And UDA? 
16:06:27 <dminuoso> maralorn: Whether or not your derived Eq is valid depends on the validity of all transitively used Eq instances.
16:06:45 * hackage predicate-typed 0.1.0.1 - Predicates, Refinement types and Dsl  https://hackage.haskell.org/package/predicate-typed-0.1.0.1 (gbwey)
16:06:58 <dminuoso> (Or perhaps your Show instance is not valid)
16:07:38 <MarcelineVQ> I wonder why one of those result starts with Just and one doesn't
16:07:38 <maralorn> dminuoso: I have not defined one Eq instance by hand. Annotation is a Record with to simple fields, Status is an enum. and UDA is a HashMap of (Text, Aeson.Value).
16:08:00 <MarcelineVQ> oh nvm, I read it poorly
16:08:00 <fraktor> hpc: I was leaning that way, but you gave me an actual justification.  Thanks!
16:08:19 <maralorn> I still suspect the HashMap …
16:09:34 <hpc> fraktor: it took me a moment to find the justification too, i had the same gut reaction :P
16:10:29 <fraktor> Even without that though, it's expected that Just _ is success, which would be counterintuitive to the programmer.
16:11:47 <maralorn> There could be another explanation. The Serialisation of the UTCTimes could be lossy in the microseconds or something …
16:12:26 <dminuoso> maralorn: Pretty sure UTCTime has picosecond accuracy.
16:12:31 <dminuoso> :-)
16:12:53 <dminuoso> (And its unlikely the show instance will give you that much)
16:13:10 <maralorn> dminuoso: Yeah, then that‘s probably the culprit …
16:13:31 <maralorn> I’m gonna change the test to Check for that …
16:14:18 <maralorn>     +++ OK, passed 100 tests.
16:16:04 <maralorn> Hm, it might be even a worse mistake …
16:18:20 <dsal> You could just make your arbitraries clamp precision.
16:18:43 <dsal> Depends on what you want to know.
16:22:20 <maralorn> dminuoso: dsal: I already hat my arbitrary only use seconds. But I made the mistake of inserting possibly more than 86400 seconds into a day, and that breaks the Eq Instance of UTCTime
16:23:01 <dsal> Ah.  I've spent a while doing weird stuff with UTCTime recently.
16:23:14 <dsal> Time is confusing enough.
16:23:29 <maralorn> Thanks for the help.
16:24:54 <dsal> You'd probably catch that with something like   read.show >>= (==)
16:25:02 <dsal> I keep that sort of thing around.
16:29:25 <maralorn> dsal: On the same type as the aeson Test?
16:30:15 <dsal> Just on your UTCTime
16:30:17 <dsal> % quickCheck $ \x ->  let rt = read.show >>= (==) in   rt (UTCTime (ModifiedJulianDay 50000) (fromIntegral x))
16:30:18 <yahb> dsal: *** Failed! Falsifiable (after 3 tests):; -1
16:30:46 <sarahzrf> augughghghghh
16:30:51 <sarahzrf> what do you do when you try to install sth from nix and it has a dependency error
16:31:37 <Axman6> be happy in the knowledge that it will be reproducibly broken forever
16:32:04 <dsal> % quickCheck $ \x ->  let rt = read.show >>= (Q.===) in   rt (UTCTime (ModifiedJulianDay 50000) (fromIntegral x))
16:32:04 <yahb> dsal: *** Failed! Falsifiable (after 8 tests and 3 shrinks):; -1; 1995-10-09 23:59:59 UTC /= 1995-10-09 23:59:59 UTC
16:32:12 <dsal> heh.  yeah, that's pretty great.
16:32:41 <jackdk> sarahzrf: more context?
16:33:34 <sarahzrf> im trying to do ghcWithPackages a bunch of packages, and im getting a random dependency error because some package somewhere down the chain updated at some point and the packages closer to the root want an older version
16:34:22 <maralorn> Anyways today I learned how to write QuickCheck tests and found a very stupid bug in my library. Call that a success.
16:34:30 <jackdk> sarahzrf: if you can be specific about which packages I can try and debug
16:35:00 <sarahzrf> containers linear arithmoi hashtables microtimer random-shuffle ihaskell-plot
16:35:15 <dsal> maralorn: I keep learning more about QC and keep finding more bugs with low effort.  Learning is good.
16:41:32 <jackdk> sarahzrf: what nixpkgs version are you on? on both my nixos-19.09's nixpkgs and nixpkgs master, I am seeing plot, ihaskell and ihaskell-plot marked as broken
16:42:58 <sarahzrf> :{
16:43:07 <sarahzrf> i am not sure
16:43:09 <sarahzrf> thats disappointing tho
16:53:32 <jackdk> sarahzrf: I'm tapping out. This is what I have so far, which shows how to set up a shell with tweaked packages. https://www.irccloud.com/pastebin/tAXhKe9h/shell.nix
16:53:48 <sarahzrf> :|
16:56:44 * hackage context-free-art 0.2.0.3 - Generate art from context-free grammars  https://hackage.haskell.org/package/context-free-art-0.2.0.3 (414owen)
16:57:25 <jackdk> I would also suggest asking #nixos. I'm not seeing the usual dependency errors, which are easily fixed, but actual compile errors so something (hlint? ihaskell?) is not setting bounds properly in its cabal package
17:18:43 <fraktor> I'm trying to make a text tabulation (for various reasons pulling in a library isn't possible for this) and I've written some code that works, but it's uh, shall we say "galaxy-brained."  https://0paste.com/40693
17:27:40 <sarahzrf> jackdk: i see this kind of error semifrequently tbh
17:43:21 <fraktor> ?src liftM
17:43:21 <lambdabot> liftM f m1 = do
17:43:21 <lambdabot>     x1 <- m1
17:43:21 <lambdabot>     return (f x1)
18:07:54 <okuu> I am trying to write a dumb program in SML, but can't. If someone could tell me how this program could be written in Haskell, I'll switch in a heartbeat: https://stackoverflow.com/q/58550827/46571
18:44:01 <crestfallen> hi earlier I was looking for a way to go further back in ghci history than 100 commands. configuring ghci is one thing, but can I retrieve commands that are not in the history?
18:47:28 <MarcelineVQ> no
18:52:48 <crestfallen> thanks
18:53:38 <crestfallen> @let q = fmap (++) (Just "Hey")
18:53:40 <lambdabot>  Defined.
18:54:25 <crestfallen> @let r x = (\x -> x " Joe")
18:54:28 <lambdabot>  Defined.
18:55:03 <crestfallen> @let s = r q
18:55:04 <lambdabot>  .L.hs:205:5: error:
18:55:04 <lambdabot>      Ambiguous occurrence ‘r’
18:55:04 <lambdabot>      It could refer to either ‘Debug.SimpleReflect.r’,
18:55:20 <crestfallen> @let rr x = (\x -> x " Joe")
18:55:23 <lambdabot>  Defined.
18:55:29 <crestfallen> @let s = rr q
18:55:30 <lambdabot>  .L.hs:205:8: error:
18:55:30 <lambdabot>      Ambiguous occurrence ‘q’
18:55:30 <lambdabot>      It could refer to either ‘Debug.SimpleReflect.q’,
18:55:41 <crestfallen> @let qq = fmap (++) (Just "Hey")
18:55:43 <lambdabot>  Defined.
18:55:54 <crestfallen> @let ss = rr qq
18:55:56 <lambdabot>  Defined.
18:56:03 <crestfallen> > ss
18:56:05 <lambdabot>  error:
18:56:05 <lambdabot>      • No instance for (Typeable t0)
18:56:05 <lambdabot>          arising from a use of ‘show_M320047839842870107224001’
18:56:25 <MarcelineVQ> :t ss
18:56:26 <lambdabot> ([Char] -> t) -> t
18:58:18 <crestfallen> I had this working yesterday. I wish I could read types like ^
18:59:38 <crestfallen> I've tried to replicate for some time
18:59:45 <crestfallen> replicate this
19:00:00 <crestfallen> that's why I was looking for my ghci history
19:00:53 <okuu> Is there real code out there where some variable is defiend to be equal to ($ e) for some expression e?
19:01:35 <crestfallen> :t ss
19:01:36 <lambdabot> ([Char] -> t) -> t
19:01:44 <okuu> crestfallen: Also, what was the point to naming the argument “x” to “rr”, when the right-hand side just shadows it?
19:02:03 <crestfallen> so MarcelineVQ are you saying the input is wrong to the lambda?
19:02:57 <crestfallen> qq can be passed into the lambda, right?
19:03:00 <MarcelineVQ> No I was just checking the type. However if you want to me to say what's right or wrong you would have to say what you expected ss to give you
19:04:16 <crestfallen> I thought it would be Just "Hey Joe"
19:04:33 <crestfallen> (Just "Hey Joe")
19:04:46 <MarcelineVQ> then, as okuu is pointing out, the correct definition of rr is rr = (\x -> x " Joe")   or    rr x = x " Joe"   not    rr x = (\x -> x " Joe")
19:04:57 <okuu> :t rr
19:04:59 <lambdabot> p -> ([Char] -> t) -> t
19:05:13 <MarcelineVQ> And you would need to use fmap in ss
19:06:53 <crestfallen> @let qq = fmap (++) (Just "Hey")
19:06:54 <lambdabot>  .L.hs:207:1: error:
19:06:54 <lambdabot>      Multiple declarations of ‘qq’
19:06:54 <lambdabot>      Declared at: .L.hs:205:1
19:07:08 <crestfallen> @let nn = fmap (++) (Just "Hey")
19:07:10 <lambdabot>  Defined.
19:08:00 <crestfallen> @let oo = (\x -> x " Joe")
19:08:02 <lambdabot>  Defined.
19:08:52 <crestfallen> @let pp = oo nn
19:08:54 <lambdabot>  .L.hs:209:9: error:
19:08:54 <lambdabot>      • Couldn't match expected type ‘[Char] -> t’
19:08:54 <lambdabot>                    with actual type ‘Maybe ([Char] -> [Char])’
19:10:21 <crestfallen> I wanted fmap to stay in nn and get passed into the lambda. that's wrong?
19:11:37 <sarahzrf> :t nn
19:11:39 <lambdabot> Maybe ([Char] -> [Char])
19:11:40 <sarahzrf> :t oo
19:11:42 <lambdabot> ([Char] -> t) -> t
19:11:53 <sarahzrf> > oo <&> nn
19:11:56 <lambdabot>  error:
19:11:56 <lambdabot>      • Couldn't match expected type ‘a -> b’
19:11:56 <lambdabot>                    with actual type ‘Maybe ([Char] -> [Char])’
19:12:01 <sarahzrf> err
19:12:03 <sarahzrf> > oo <$> nn
19:12:05 <lambdabot>  Just "Hey Joe"
19:12:39 <crestfallen> ok thanks so I can use       nn :: Maybe ([Char] -> [Char])
19:13:39 <crestfallen> > oo <$> nn
19:13:42 <lambdabot>  Just "Hey Joe"
19:13:57 <crestfallen> so weird I did it differently yesterday. It's maddening
19:15:58 <MarcelineVQ> if you only want one fmap you can have qq accept another argument to use to extend the function used in your fmap
19:16:18 <MarcelineVQ> > let qq f = fmap (f . (++)) (Just "Hey"); rr x = x " Joe" in qq rr
19:16:21 <lambdabot>  Just "Hey Joe"
19:19:31 <crestfallen> ok thanks MarcelineVQ sarahzrf     I'm going to run with it
19:21:54 <sarahzrf> :)
19:22:51 <crestfallen> sarahzrf: so as usual I cannot read the types very well   ([Char] -> t) -> t
19:23:15 <crestfallen> nn  I can read
19:29:01 <crestfallen> so t there is our function nn, so substituting (unifying?) the types it would be [Char] -> (Maybe ([Char] -> [Char])
19:29:15 <crestfallen> is that correct sarahzrf MarcelineVQ    ?
19:30:13 <crestfallen> which would result in Maybe [Char]
19:32:07 <quiet_laika[m]> is there a good conceptual explanation for the `P` type in `ReadP`: http://hackage.haskell.org/package/base-4.12.0.0/docs/src/Text.ParserCombinators.ReadP.html#P? do the recursive `P a`s represent a continuation, of sorts?
19:32:17 <quiet_laika[m]>  * is there a good conceptual explanation for the `P` type in `ReadP`: http://hackage.haskell.org/package/base-4.12.0.0/docs/src/Text.ParserCombinators.ReadP.html#P anywhere? do the recursive `P a`s represent a continuation, of sorts?
19:33:48 <okuu> quiet_laika[m]: Probably an intermediate parsing state, from what the definition looks like.
19:35:04 <MarcelineVQ> crestfallen: no, assuming you're asking about the type of oo. What you need to be unifying with is fmap. "oo <$> nn" is "fmap oo nn"   fmap :: Functor f => (a -> b) -> f a -> f b
19:35:35 <okuu> If you need to run the type inference algorithm in your head, your code is probably too complicated, though.
19:36:00 <sarahzrf> you might also just be a beginner
19:36:05 <MarcelineVQ> oo :: ([Char] -> t) -> t   so   fmap oo  needs to unify the first argument of fmap, (a -> b), with oo, ([Char] -> t) -> t. This means that a is ([Char] -> t) and b is t.
19:36:14 <jusss> there're two projects, how I can merge them? with cabal
19:36:30 <jusss> from github
19:37:17 <jusss> I use `cabal v2-build' to compile them on local, how to make them connected?
19:38:30 <crestfallen> MarcelineVQ: yes! thanks I've done something similar as an exercise. I actually forgot the steps thank you
19:40:10 <MarcelineVQ> :t fmap oo -- we can see that's what happens here because now the remaining arguments of fmap have had their a's and b's changed, f a has become f ([Char] -> t) and b has become t. Though lambdabot has chosen to just  leave b as b, since t (being any type at all) is equivalent to b which is also any type at all at this point.
19:40:11 <lambdabot> Functor f => f ([Char] -> b) -> f b
19:42:31 <crestfallen> yes that is tricky stuff. I figure I won't understand haskell until I master the unification of types (formally written out as above). so you can call me hindley-milner for short
19:44:07 <MarcelineVQ> going one step further and writing  fmap oo nn  means we need to unify f ([Char] -> b) with nn as that's the next argument of fmap. We have    fmap oo :: Functor f => f ([Char] -> b) -> f b    and   nn :: Maybe ([Char] -> [Char]), so to say 'fmap oo nn' we're wanting to unify f ([Char] -> b) with Maybe ([Char] -> [Char])
19:45:49 <MarcelineVQ> :t fmap oo nn -- This is fairly straightforward Maybe fits f, so all f are Maybe, we already have [Char] fitting there, and now all b are [Char] as well.
19:45:50 <lambdabot> Maybe [Char]
19:46:52 <MarcelineVQ> :t fmap nn
19:46:53 <lambdabot> error:
19:46:53 <lambdabot>     • Couldn't match expected type ‘a -> b’
19:46:53 <lambdabot>                   with actual type ‘Maybe ([Char] -> [Char])’
19:46:56 <MarcelineVQ> woops :>
19:47:00 <MarcelineVQ> :t fmap oo
19:47:01 <lambdabot> Functor f => f ([Char] -> b) -> f b
19:47:20 <MarcelineVQ> :t fmap oo `asAppliedTo` nn -- stepped back a reduction step to show the types
19:47:21 <lambdabot> Maybe ([Char] -> [Char]) -> Maybe [Char]
19:50:28 <crestfallen> ok plenty to digest thanks, I'm going to write all that out MarcelineVQ  and see if I can follow it . thanks!
19:51:11 <crestfallen> not sure about this part though: :t fmap oo `asAppliedTo` nn -- stepped back a reduction step to show the types
19:52:40 <okuu> @src asAppliedTo
19:52:40 <lambdabot> f `asAppliedTo` a = f where _ = f a
19:52:40 <lambdabot> infixl 0 `asAppliedTo`
19:53:02 <okuu> @type asAppliedTo
19:53:03 <lambdabot> (a -> b) -> a -> a -> b
19:54:07 <crestfallen> thanks okuu were you posting to me re: type inference system in my head? just curious
19:54:11 <MarcelineVQ> I'm showing the type of fmap oo as if you applied it to nn, this lets you see what applying fmap oo to nn does to the types, but just writing fmap oo nn would only show Maybe [Char] because the arguments are all applied.
19:54:42 <crestfallen> right those are like intermediary steps..
19:56:10 <crestfallen> I went through this and enjoyed it (from a blog)  https://github.com/varreli/haskell/blob/master/handEval/unifyHeadFiltFst.hs
19:58:16 <EvanR> unify head is usually the opposite of what haskell usually does
19:58:21 <EvanR> to your head
19:58:40 <crestfallen> !! :)
19:59:12 <crestfallen> in buddhism there is an expression for delusion: the head is broken in 7 pieces.    EvanR   :)
20:02:46 <EvanR> i think banach tarski only uses 5 pieces
20:05:31 <okuu> crestfallen: sorry it was more of a reply to MarcelineVQ, who said “(...) means we need to unify (...)”
20:06:41 <crestfallen> okuu thanks just wondering if I was keeping up :)
20:06:57 <crestfallen> EvanR: yeah that is a deep idea, I've seen it. hard to believe
20:08:08 <crestfallen> Euclid had already done it (joking)
20:09:11 <crestfallen> thanks .. pax
20:10:02 <jusss> I'm tring to merge two projects with cabal, I changed the depends on the .cabal file, but there's something module not be found, https://paste.ubuntu.com/p/s23zjTvZff/
20:10:18 <jusss> I make one to depend another one
20:12:54 <fraktor> Is anyone here familiar with Servant?  I'm having trouble wrapping a Server in a Reader.
20:19:52 <jackdk> fraktor: have you looked at the docs around hoistServer?
20:23:20 <jusss> Network.Socket isn't came with ghc?
20:29:14 <fraktor> jackdk: I haven't heard of hoistServer.
20:34:53 <jackdk> fraktor: hoistServer is for writing the actions that make up your server in `ServerT someMonad a` and converting it back to `Server a`. See https://docs.servant.dev/en/stable/cookbook/hoist-server-with-context/HoistServerWithContext.html
20:35:52 <jackdk> fraktor: see also http://hackage.haskell.org/package/servant-server-0.16.2/docs/Servant-Server.html#v:hoistServer , and note that `Server api =  ServerT api Handler`
20:37:52 <jackdk> fraktor: if you are trying to build and use `ReaderT r Server a` and combine them into your api, I think you'll have trouble because you won't have the `HasServer` instances because `ServerT` is not on the outside. You may have more luck working with `ServerT api (ReaderT r Handler)` and then `hoistServer`ing it to unwrap the `ReaderT`
20:54:06 <jusss> why I can't use that pacakge with cabal after I leave where it's compiled?
20:54:49 <jusss> like  Web.Tele belong to tele directory, and I can use it in that tele, but after leaving tele, I can't use it
20:55:05 <jusss> is there an env I need to set?
21:25:57 <wejetheman> is there a function to take the last n elements of a list?
21:27:24 <lyxia> nope, drop is the closest thing.
21:28:36 <wejetheman> does that seem like an odd oversight to anyone else?
21:29:15 <c_wraith> no
21:29:45 <c_wraith> that's really not the purpose of the list data structure
21:30:07 <c_wraith> but if you really want it...
21:30:56 <wejetheman> im trying to parse a string and all the information other than the last 10 digits is irrelevant, should i not be using lists for that sort of thing?
21:31:12 <c_wraith> Ah, shoot.  What I had in mind only works with libraries lambdabot doesn't have.
21:32:17 <c_wraith> I mean...  all non-exercise parsing in haskell should be done with a real parser library.
21:33:01 <wejetheman> hm okay, thats fair enough
21:35:44 * hackage concurrent-hashtable 0.1.0 - Thread-safe hash tables for multi-cores!  https://hackage.haskell.org/package/concurrent-hashtable-0.1.0 (PeterRobinson)
21:36:26 <jackdk> wejetheman: note that Data.Text provides a `takeEnd` function, if you were doing this sort of thing outside of an exercise context
21:37:26 <wejetheman> its an exercise but i can use any built in library
21:55:43 <suzu> you could reverse it
21:55:46 <suzu> take 10
21:55:48 <suzu> and then reverse that
21:56:16 <sarahzrf> 😱
22:01:13 <shachaf> You could probably do a sneaky thing.
22:01:19 <shachaf> Oh, it's an exercise, never mind.
22:20:38 <dsal> > let last n = reverse . take n . reverse in     last 5 [1..10] -- wejetheman
22:20:40 <lambdabot>  [6,7,8,9,10]
22:21:54 <dsal> Oh, I missed the part of the exercise.  I should catch up bottom up.
22:27:46 <dsal> @pl \n -> reverse . take n . reverse
22:27:46 <lambdabot> (reverse .) . (. reverse) . take
22:27:53 <dsal> yeah.  That looks better.
22:47:04 <EvanR> i almost understand what that pointless version is doing. might be cause for concern
22:55:14 * hackage concurrent-hashtable 0.1.1 - Thread-safe hash tables for multi-cores!  https://hackage.haskell.org/package/concurrent-hashtable-0.1.1 (PeterRobinson)
23:02:48 <dminuoso> I want to render a trie in ASCII just 2 layers at a time, like this https://gist.github.com/dminuoso/d64cc088f44e63bc9ceb054efdfc8116
23:03:03 <dminuoso> Are there some options on hackage to help me with this? If this matters, this will eventually end up in brick.
23:04:11 <EvanR> so, if you see that as two columns with the second column having 3 rows, there is a package for that
23:04:44 <EvanR> https://hackage.haskell.org/package/boxes
23:06:53 <dminuoso> EvanR: Ah! It clicked, if I go down that road, I could do the same with just vBox in brick.
23:07:12 <dminuoso> But perhaps boxes is still interesting to look at.
23:22:43 <jusss> a irc library, the important function should be sendMsg and recvMsg, but I looked several irc libraries from hackage, I don't saw that stuff, several pacakge even witout any comment in the code, no document, no comment, what a disappointed
23:27:17 <EvanR> might not be called that
23:31:16 <EvanR> send :: NetworkConnection -> ByteString -> IO ()
23:32:28 <EvanR> (glirc module Client.Network.Async)
23:33:16 <sicklorkin> Is DuplicateRecordNames in GHC now?
23:33:59 <sicklorkin> /RecordFields/
23:34:44 * hackage concurrent-hashtable 0.1.2 - Thread-safe hash tables for multi-cores!  https://hackage.haskell.org/package/concurrent-hashtable-0.1.2 (PeterRobinson)
23:34:51 <EvanR> renderRawIrcMsg :: RawIrcMsg -> ByteString
23:35:00 <EvanR> (irc-core)
23:41:29 <sicklorkin> ahh i was looking for RecordDotPreprocessor + DuplicateRecordFields
23:42:18 <sicklorkin> has anyone used this?
