00:51:44 <yasar> opqdonut, here is my implementation : https://gist.github.com/yasar11732/083d86af4efa17acb56222749a19d1f8
00:51:50 <yasar> does it look right?
01:10:50 <opqdonut> yasar: looks about right to me. I guess you tested it?
01:21:17 <Guest93> is here anyone?
01:43:24 <solrize_> zzz
02:29:17 <ksqsf> b
03:13:37 <gentauro> "So we want to use Applicative when possible but Monad when necessary" -- Simon Marlow
03:13:52 <gentauro> I like the sentence :)
03:17:51 <ni291187> ciao
03:18:02 <ni291187> !list
03:18:02 <monochrom> ni291187: http://okmij.org/ftp
04:13:33 <t7> The vscode haskell auto indentation thing its doing every time i press return is so useless 
05:01:28 <novaske> currently trying to build HFuse on FreeBSD but even if cc-options with -D_FILE_OFFSET_BITS=64 is passed it seems to get ignored since fuse_common.h complains about it not set. Is there anything else I can do to have it build?
05:03:22 <phadej> novaske: try to put -v (as verbose flags) to whatever you use to build, and see if the flags are passed to the right commands or not
05:03:46 <phadej> I'd use cpp-options for cpp flags, but I'm not sure how they are passed around
05:22:46 <novaske> phadej: seems to be passed to `cc` yet not picked up
06:14:10 <thedrunkone> hello there guys
06:14:31 <thedrunkone> just started learning haskell
06:14:41 <thedrunkone> is http://learnyouahaskell.com/ good?
06:14:50 <thedrunkone> I find it pretty beginner friendly
06:14:56 <thedrunkone> just wanted to know others opinion
06:15:33 <evelyn> LYAH doesn't have any excercises, it should be noted, which I didn't like that much
06:16:38 <thedrunkone> I'm sitting right now with my terminal open and trying stuff I learn
06:16:49 <thedrunkone> but haskell looks rather... different
06:16:59 <thedrunkone> from the rest of the programming languages I got in touch with
06:20:03 <dminuoso> insertWithM :: Monad m => (a -> a -> m a) -> k -> a -> IntMap k a -> m (IntMap k a)
06:20:10 <dminuoso> Curious, I'd have expected this to exist.
06:21:26 <dminuoso> Err
06:21:28 <dminuoso> Heh
06:21:58 <dminuoso> insertWithM :: Monad m => (a -> a -> m a) -> Key -> a -> IntMap a -> m (IntMap a)
06:29:17 <nil> you could implement it with alterF
06:31:47 <nil> :t \f k v m -> Data.IntMap.alterF (\case Nothing -> return v; Just v' -> f v v') k m
06:31:48 <lambdabot> Monad f => (Maybe t -> t -> f (Maybe t)) -> IS.Key -> Maybe t -> IM.IntMap t -> f (IM.IntMap t)
06:32:06 <nil> :t \f k v m -> Data.IntMap.alterF (\case Nothing -> return (Just v); Just v' -> Just <$> f v v') k m
06:32:08 <lambdabot> Monad f => (t -> t -> f t) -> IS.Key -> t -> IM.IntMap t -> f (IM.IntMap t)
06:35:48 <dminuoso> nil: Oh brilliant
06:38:32 <nil> :t \f k v -> Data.IntMap.alterF (Just <$> maybe (return v) (f v)) k
06:38:34 <lambdabot> (a -> a -> Maybe a) -> IS.Key -> a -> IM.IntMap a -> Maybe (IM.IntMap a)
06:38:40 <nil> alright, i'm done golfing.
06:38:54 <nil> wait, that's wrong
06:39:22 <nil> :t \f k v -> Data.IntMap.alterF (fmap Just . maybe (return v) (f v)) k
06:39:25 <lambdabot> Monad f => (a -> a -> f a) -> IS.Key -> a -> IM.IntMap a -> f (IM.IntMap a)
06:39:28 <nil> there
06:40:57 <dminuoso> % insertWithM (\_ _ -> Left "duplicate") 1 'e' (IM.fromList [(1,'a'),(2, 'b'),(3, 'c'),(4,'d')])
06:40:57 <yahb> dminuoso: Left "duplicate"
06:42:10 <nil> oh cool.
07:19:45 <Amras> I've got an sdl2 question since the #SDL channel seems to be fairly quiet - What is the "preferred" way to fill a window with values from some sequence of color values?
07:22:42 <Amras> and as a secondary question: does sdl2's GLContext interface well with some other opengl library? The opengl-related functions in haskell's sdl2 seem to be lacking.
07:24:54 <dminuoso> nil: Concretely Im using MonadChronicle, so I can use this to collect errors as I proceed in quite fancy ways.
07:37:41 <solonarv> Amras: IIUC the point of sdl2's GLContext stuff is to just let you draw with opengl without going through SDL
07:38:00 <solonarv> so you should be able to use opengl directly, or some other library built on top of opengl
07:43:13 <day> how do i check here if a is Just Int, or Nothing?  and then proceed to use it as a 'Integer' instead of a maybe datatype? http://dpaste.com/1YC9ZWK
07:44:02 <Amras> solonarv, so the idea is to use glCreateContext, then perform gl operations on IO () and they'll automagically be applied to the created context until it's deleted?
07:44:02 <day> i know that a == Just 0 gives me a bool value that works in this scenario, but for that to work i need to know the exactl value beforehand.
07:44:46 <nil> | Just i <- a = ...
07:44:55 <nil> you might also want to use M.findWithDefault
07:45:02 <dminuoso> day: Or just use explicit case-of
07:45:25 <Rembane> day: The function maybe is also quite useful 
07:57:02 <Amras> one more followup question: what is the high-level method corresponding to SDL_RenderCopy?
07:57:10 <Amras> ie. copying a texture with a renderer
07:59:26 <Amras> oh, just copy
07:59:29 <Amras> nevermind
08:01:49 <dmwit> day: I would `op_add code ptr = case M.lookup ptr code of Just n -> ...; Nothing -> ...`
08:05:02 <solonarv> Amras: yes, that is the idea
08:05:10 <solonarv> sadly opengl is very imperative and stateful
08:05:33 <solonarv> day: there is also fromMaybe which is useful
08:05:36 <solonarv> :t fromMaybe
08:05:38 <lambdabot> a -> Maybe a -> a
08:05:43 <solonarv> > fromMaybe 5 Nothing
08:05:48 <lambdabot>  5
08:05:51 <solonarv> > fromMaybe 5 (Just 12)
08:05:55 <lambdabot>  12
08:28:43 <day> solonarv: thanks. i'm getting closer :)
10:17:50 <infinity0> is there a specific channel for singletons or dependent-haskell
10:18:43 <monochrom> no
10:22:54 <MarcelineVQ> though there is a channel for the generally dependent-curious ##dependent
10:24:16 <monochrom> What if someone writes a blog with a title like "the singleton design pattern" and it's about dependent typing in Haskell with singletons :)
10:24:38 <MarcelineVQ> chaos
10:24:50 <MarcelineVQ> cats and dogs, living together
10:25:28 <Rembane> That would be lovely 
10:25:45 <Rembane> The discussions on Hacker News would be even better.
10:27:54 <monochrom> "the singleton design pattern illustrate in Python 5.0"
10:28:10 <monochrom> err, illustrated!
10:28:44 <Amras> `cabal new-repl -> main` runs fine, but on a single core. `cabal new-run` results in a segfault. Any ideas for how to debug this?
10:30:29 <cheater> hi
10:35:38 <sm[m]> Amras: -v ?
10:36:02 <sm[m]> and watch it with htop, and a fast update rate. You might be running out of RAM
10:37:05 <geekosaur> Amras, that may also be a bug in ghc 8.8.1, there was recently an 8.8.2 update which fixed several codegen bugs
10:37:39 <ysangkok> geekosaur: it is an RC though
10:37:41 <Athas> 8.8.2 is out?
10:37:49 <Amras> oh, I should really update ghc
10:38:05 <Amras> apparently I'm on 8.6.5
10:38:16 <geekosaur> hm, I thought it was an actual release, the later ones don't generally get as much testing as a .1 release
10:38:34 <geekosaur> they're more focused on the new release usually
10:38:35 <cheater> can someone suggest a good library for reading command line args? i need to specify a file name, and a string that i'll parse using attoparsec.
10:39:13 <geekosaur> oh, 8.6.5? then the 8.8 bugs won't affect it, I think. and 8.8 still has some compatibility issues, it's still fairly new and not everything has been updated for it
10:39:21 <Amras> ah
10:39:57 <dmwit> segfault is hard to achieve. You doing FFI?
10:40:28 <Amras> after adding some debug flags to ghc, I'm getting  "Main: internal error: ASSERTION FAILED: file rts/Schedule.c, line 2322"
10:40:38 <Amras> also "please report this as a ghc bug"
10:40:58 <dmwit> "but on a single core" suggests you expect not-single-core. You doing FFI and multithreading? If so, perhaps http://dmwit.com/gtk2hs will have some interesting information for you. Some of it is gtk-specific, but most of it ain't.
10:41:18 <MarcelineVQ> cheater: sounds absic enough you could use getArgs, if you want a help menu or anything more complicated then optparse-applicative tends to be the go-to
10:41:21 <dmwit> ok, GHC bug =)
10:41:51 <Amras> dmwit, using the sdl2 bindings, no ffi otherwise
10:42:16 <Amras> I'm pretty sure the C++ end of SDL2 uses some multithreading though
10:42:57 <geekosaur> hm. cabal new-repl --repl-options='+RTS -N'
10:43:26 <geekosaur> see if multiple OS threads affects the repl, or if this is object vs. bytecode
10:43:34 <Amras> target `+RTS -N' is not a module name or a source file
10:43:53 <geekosaur> that last could be tested with: cabal new-repl --repl-options=-fobject-code
10:44:18 <Amras> works fine with -fobject-code
10:44:25 <infinity0> what's the ghc flag to directly link in a cabal package without using cabal?
10:44:25 <Amras> can't test +RTS -N
10:44:44 <geekosaur> what happens? I may have gotten it wrong
10:44:56 <geekosaur> (also, on windows it probably needs "" quotes instead of '')
10:45:01 <Amras> linux
10:45:04 <Amras> and: target `+RTS -N' is not a module name or a source file
10:45:52 <geekosaur> hm. I wonder how it quotes/passes those options, it sounds like it bundled the whole thing into a single option
10:46:50 <geekosaur> ok, this seems to work: cabal new-repl --repl-options=+RTS --repl-options=-N
10:47:01 <geekosaur> despite "option*s*", sigh
10:48:05 <Amras> ghc: the flag -hide-all-packages requires the program to be built with -prof; ghc: Usage: <prog> <args> [+RTS <rtsopts> | -RTS <args>] ... --RTS <args>
10:49:58 <geekosaur> oy
10:50:22 <geekosaur> cabal new-repl --repl-options=+RTS --repl-options=-N --repl-options=-RTS
10:51:07 <Amras> that's for multithreading, right?
10:51:31 <srid> Can `Data.Some.withSum` be written with constraint on the `a` of `tag a`?
10:51:33 <geekosaur> that says how many cores to use for threading. -N with no parameter looks at the number of cores on your CPU
10:51:51 <Amras> amusingly, this works fine.
10:52:08 <Amras> I'm not sure why new-build / new-run segfault
10:52:12 <Amras> if it's not a threading issue
10:52:37 <srid> Cale: if you here, I'm curious if this part of Data.Some usage can be refactored out? withSome doesn't work, as it is too generic: https://github.com/srid/rib/pull/58/files#diff-a60e1a15e73d1ef484785669ad546b78R120
10:53:20 <geekosaur> using only one thread is not quite the same thing as not using threads at all
10:54:17 <Amras> hm?
10:54:20 <geekosaur> but it can be close, especially if there's some bug with reentrancy from a different thread (which could be because of wrong FFI use, in particular something is incorrectly tagged as safe vs. unsafe)
10:54:53 <MarcelineVQ> does -N do anything for repl? -threaded, doesn't right? and you need -threaded for -N to have an effect? or is that wrong
10:55:10 <geekosaur> also the runtime uses some threads even in a "non-threaded" program. usually you don't care about these internal details. but the default for even a multithreaded program is iirc +RTS -N1, i.e. use only one core
10:55:43 <Amras> oh! new development
10:55:56 <Amras> ghc -threaded runs fine. ghc without -threaded segfaults.
10:56:47 <Amras> so I guess that's the issue - sdl2 wants to use multiple threads; ghci emulates this somehow while keeping the one thread, but the compiled executable just segfaults
10:56:54 <Amras> I feel like this is a bug I should report somewhere?
10:58:02 <geekosaur> ghci is multithreaded
10:58:58 <geekosaur> not sure where to report this, it should fail with something other than a scheduler assertion or segfault, really.
10:59:56 <Amras> that's my thinking, yes
11:00:41 <geekosaur> that sounds like a ghc bug, but they'll want it to be reproduced on ghc 8.8.1 at least because 8.6 isn't current any more
11:10:32 <Amras> I'll have to test that later then
11:10:54 <merijn> 44444errrrrrrrreeeeeeeeeeeeee
11:11:05 <merijn> Cats... >.>
11:12:26 <Amras> oh, and re: ghci is multithreaded - only one of my cores was ever in use despite using multiple threads
11:17:39 <phadej> sdl2 might require threaded runtime
11:17:46 <phadej> just because it uses C FFI
11:18:04 <phadej> e.g. https://github.com/haskell-game/sdl2/issues/110 hints so
11:21:49 <geekosaur> ocharles, you need -c these days or ghc will try to find and recompile other related .hs files
11:21:54 <monochrom> "ghci is multithreaded" just means that ghci was built with -threaded
11:22:05 <geekosaur> (that is, --make is default since I think ghc7)
11:22:16 <geekosaur> er, wrong channel
11:22:33 <ocharles> geekosaur: you just beat me!
11:22:45 <ocharles> I just read that bit of the manual. I was doing `-no-link`, but I think `-c` is what I want
11:23:40 <monochrom> My http://www.vex.net/~trebla/haskell/ghc-conc-ffi.xhtml unconflates all these orthogonal concepts that people conflate.
11:23:40 <merijn> geekosaur: I think even before 7
11:23:51 <merijn> geekosaur: Because --make has been the default since before I started learning
11:24:18 <ocharles> geekosaur: yea, this works. Thanks!
11:24:43 <srid> Found it. https://www.irccloud.com/pastebin/vkSgoV8e/f.hs
11:25:19 <geekosaur> re threading: there is a non-threaded runtime ("green" Haskell threads; the I/O manager still uses OS threads) and a threaded runtime (multiple Haskell threads on multiple OS threads). there i also a number of OS threads to start, which is +RTS -Nnumber; if the number is omitted it uses the number of cores, if it's not specified at all then it uses
11:25:19 <geekosaur> 1 thread
11:25:49 <geekosaur> this is so a multithreaded Haskell program doesn't arbitrarily take over the whole system
13:37:52 <zeta_0> why am i getting this error?
13:37:55 <zeta_0> Main.hs:11:29: error: parse error on input ‘/’
13:37:55 <zeta_0>    |
13:37:55 <zeta_0> 11 | mkYesod "App" [paresRoutes| / HomeR GET |]
13:37:55 <zeta_0>    |                             ^
13:38:19 <MarcelineVQ> what is different about that start of that ^ than the end?
13:38:27 <sm[m]> I think stack 2.1.3 uses pantry and is harder to reclaim disk space from, because ~/.stack/snapshots/ data is no longer grouped by snapshot name - am I right ?
13:39:17 <ChaiTRex> zeta_0: paresRoute might need to be parseRoute
13:39:24 <geekosaur> ^ that
13:39:52 <geekosaur> had just noticed it, it may be parsing that as a list comprehension since there's no qq handler for paresRoute
13:40:18 <MarcelineVQ> oh haha, I am the fool, didn't see the | after paresRoutes
13:40:41 * geekosaur saw mkYesod and assumed QQ fun to come
13:40:50 <zeta_0> oh, always the small typos that mess me up, thanks
13:42:34 <geekosaur> this kind of thing is why many of us dislike programs that rely heavily on quasiquotations, the error messages are really unhelpful if you typo
13:42:45 <monochrom> Yikes, didn't realize QQ and list comprehension are too close.
13:42:48 <zeta_0> its still throwing that same error
13:43:07 <geekosaur> because the language inside may be completely different, so the compiler has no way of knowing what's going on if there's a typo somewhere
13:44:00 <geekosaur> monochrom, it's recommended you are careful with spaces to distinguish the two (omitting for qq, adding for list comp)
13:44:18 <zeta_0> here is the code: https://hastebin.com/japamareba.makefile
13:45:00 <ChaiTRex> zeta_0: Is LANGUAGE QuasiQuotes or whatever turned on?
13:45:41 * geekosaur can't open the paste url, complains cert is invalid and the "proceed anyway" loops for some reason
13:46:37 <geekosaur> certificate authority invalid, to be specific
13:47:59 <zeta_0> alright i was able to fix it, it was another typo, haskell-ide-engine does not work when i am in a nix-shell so it is making me miss those dang typos'
13:49:53 * geekosaur needs to update chrome, apparently. welp.
14:11:21 <zeta_0> using nix to build a yesod application was actually an enjoyable experience
15:57:28 <wikiemol> I am trying to implement the "mu" operator in haskell mentioned here https://en.wikipedia.org/wiki/%CE%9C-recursive_function#Definition I basically want to know if this is even possible? My initial idea was to do something like `u f = flip map (map f [0..])  . (flip ($))` but I am not sure how to generalize this to a function with arbitrary
15:57:28 <wikiemol> arguments. Is this even possible in haskell?
16:01:02 <phadej> @src fix
16:01:02 <lambdabot> fix f = let x = f x in x
16:03:22 <wikiemol> I am guessing u would have type `(Int -> b) -> b -> Int` correct?
16:03:59 <nil> wikiemol: you can encode a function of two arguments as `(a, b) -> c`, which is a unary function you can feed to your generic mu operator
16:05:39 <nil> mu f x = head [i | i <- [0..], f i x == 0]
16:06:16 <Ailrun[m]> @src lens
16:06:17 <lambdabot> Source not found. This mission is too important for me to allow you to jeopardize it.
16:06:44 <nil> the type of mu can be specialised to (Int -> b -> Int) -> b -> Int
16:07:08 <wikiemol> nil sorry I forgot to add the part for finding the first 0. But can you explain what you mean by your previous statement?
16:08:21 <wikiemol> nil the trouble is, mu is supposed to take a function of an arbitrary number of arguments
16:09:01 <wikiemol> If f takes n arguments then `mu f` is supposed to produce a function of n - 1 arguments
16:09:05 <nil> all haskell functions are unary. n-ary functions are usually encoded in the form `a -> b -> c` (currified), but they can also encoded using tuples, as in `(a, b) -> c`
16:09:31 <nil> in the above type for mu, `b` can be any type, including a tuple type
16:10:03 <nil> so you could have mu :: (Int -> (a, b) -> Int) -> (a, b) -> Int
16:10:11 <nil> (and the same for any number of arguments)
16:10:54 <koz_> To follow up a bit on nil's statement, a -> b -> c is really a -> (b -> c).
16:11:04 <nil> yes, i should have made that clearer
16:11:19 <wikiemol> Okay, this makes sense to me, thats why I was thinking mu should have type `(Int -> b) -> b -> Int`
16:11:42 <EvanR> > fix (\loop x y -> if x > 0 then loop (x-1) y else y) 5 'c'
16:11:46 <lambdabot>  'c'
16:11:55 <koz_> wikiemol: Have a read of this too: https://www.parsonsmatt.org/2016/10/26/grokking_fix.html
16:12:20 <nil> the first argument to mu is a function that takes an Int, an arbitrary number of arguments, and returns an Int
16:12:28 <wikiemol> nil That would mean f has type (Int -> b) which could be (Int -> Int) or (Int -> Int -> Int) etc, but how would I actually write the function so that it works for any number of arguments?
16:13:02 <wikiemol> When I say "the function" I mean "mu"
16:13:08 <nil> no, f has type Int -> b -> Int
16:13:20 <wikiemol> koz_ I will check that out
16:13:21 <nil> <nil> mu f x = head [i | i <- [0..], f i x == 0] 
16:14:20 <nil> see how f is applied to (i :: Int) and to (x :: b) and returns something that's compared against 0 (i'm assuming we're working with integers here)
16:16:58 <wikiemol> If you try this function with say, f (a, b, c) = a + b + c, it doesn't work
16:17:40 <wikiemol> nil or am I just doing something wrong?
16:17:48 <wikiemol> I tried it in GHCI
16:17:52 <nil> your f has the wrong type
16:17:55 <EvanR> the type a -> b is potentially a function with "any number of arguments you want", because b could be = c -> d for instance, and so on
16:18:14 <nil> maybe you meant `f a (b, c) = a + b + c`
16:18:56 <wikiemol> nil Ahh I see
16:21:45 <wikiemol> Okay, that makes sense, thanks for the help! Part of my confusion was that if `f a b c = a + b + c` then uncurry f is typed as (a, a) -> a -> a So I thought functional types in haskell were associative in the other direction
16:23:05 <nil> haskell's `uncurry` function is a special case of uncurrying that only works on 2 arguments
16:23:56 <nil> you can apply it repeatedly and get something like ((a, b), c) -> d
16:24:36 <wikiemol> nil ahhh gotcha. I thought it was more general. Is there a reason this doesn't exist in haskell?
16:25:23 <wikiemol> For my own understanding, is it possible to construct mu that acts on the "curried" version of a function?
17:01:14 <jle`> wikiemol: the "general" uncurry case is hard to give a nice type for
17:02:04 <wikiemol> jle`  Thats kind of what I was thinking... But I am not sure if its actually impossible, or just tricky
17:02:46 <jle`> wikiemol: it's tricky, but to the point where it's not really worth doing
17:03:16 <jle`> wikiemol: but also it's not always clear what you want exactly, either
17:03:50 <wikiemol> jle` I am sure you are right its not worth doing, I am just trying to get a handle on where haskell's "edges" are
17:03:53 <jle`> you could "uncurry" f a b c = a + b + c as \(a,b) -> \c -> a + b + c
17:04:02 <jle`> and you couild "uncurry" it as \(a,b,c) -> a + b + c
17:04:12 <jle`> both are useful in their own way and you might want to use one or the other
17:04:21 <jle`> so a 'general uncrry' might not even be really well-defined
17:05:57 <solonarv> I guess it could take a type argument saying how many arguments to combine together
17:06:02 <wikiemol> jle` I think it makes the most sense to uncurry `a -> b -> c` as `a -> (b, c)`. 
17:06:12 <solonarv> that's not even correct!
17:06:22 <jle`> wikiemol: hm, that's not really uncurrying
17:06:27 <jle`> and you can't do that in general really
17:06:33 <jle`> you can do a -> Set (b, c) maybe
17:06:38 <jle`> if you enumerate over b's
17:06:39 <wikiemol> Sorry, meant more a -> b -> c -> d as a -> (b, c) -> d
17:06:47 <solonarv> @djinn (a -> b -> c) -> (a -> (b, c))
17:06:47 <lambdabot> -- f cannot be realized.
17:07:07 <jle`> wikiemol: sure, so now the question becomes what you 'really want', not what haskell can give you
17:07:12 <solonarv> jle`: surely `Map b c` would be a more sensible output?
17:07:13 <jle`> wikiemol: what about a -> b -> c -> d -> e ?
17:07:51 <solonarv> :t uncurry . fmap uncurry . uncurry
17:07:53 <jle`> so the 'edges' here are not haskell's edges, but your own imagination's edges :)
17:07:55 <lambdabot> (a1 -> b1 -> a2 -> b2 -> c) -> ((a1, b1), (a2, b2)) -> c
17:08:03 <solonarv> you could do it like that, for example
17:08:14 <solonarv> there are many possibilities!
17:10:12 <wikiemol> jle` from a theoretical perspective, i feel like uncurrying the way I described is the natural way to do it. Since really n tuples are more like nested two tuples
17:10:33 <wikiemol> Haskell does support n tuples, but it doesn't have to really
17:10:56 <nil> they're not "more like", but they're isomorphic to
17:11:08 <jle`> wikiemol: what i'm saying is that 'the way you described' is not very clear
17:11:23 <jle`> wikiemol: because taken literally, what you described is possible
17:11:27 <jle`> for that specific case of a -> b -> c -> d
17:11:40 <jle`> @djinn (a -> b -> c -> d) -> a -> (b,c) -> d
17:11:41 <lambdabot> f a b (c, d) = a b c d
17:12:01 <jle`> wikiemol: but what about the case for a -> b -> c -> d -> e?  what way are you suggesting for that?
17:12:37 <jle`> we're talking about a way to generalize uncurry to multiple arguments, but it is unclear what sort of generalization schema you are describing
17:13:14 <wikiemol> nil exactly. In theory, couldn't Haskell could have implemented n tuples as nested two tuples and made them literally the same, with syntax like (a, b, c...) being syntactic sugar for (a, (b, (c...)))?
17:13:24 <solonarv> it could have, yes
17:13:48 <wikiemol> jle` a -> b -> (c, d) -> e right?
17:13:58 <nil> i think ocaml does this (i could be mistaken)
17:13:58 <jle`> why are you asking me? ;)
17:14:02 <solonarv> wikiemol: that's just one possiblity!
17:14:09 <solonarv> it could also be (a, b) -> c -> d -> e
17:14:13 <jle`> wikiemol: describe to me what sort of pattern you want to generalize
17:14:16 <nil> nevermind.
17:14:18 <jle`> and we can talk about how haskell can do it
17:14:20 <solonarv> or perhaps you wanted (a, b, c, d) -> e ?
17:15:43 <wikiemol> I suppose you have a point.
17:16:27 <jle`> wikiemol: i'm not trying to make a point, heh. just want to see what you are thinking of, and we can talk about if it breaks haskell's limits or not
17:20:25 <wikiemol> jle` Specifically, i want to construct mu as mentioned above, but with a completely curried function
17:20:40 <jle`> hm, i might have missed the start of the conversation
17:20:43 <jle`> what is mu?
17:20:59 <wikiemol> jle` See here https://en.wikipedia.org/wiki/%CE%9C-recursive_function#Definition
17:24:19 <wikiemol> Idk why but it looks like the numbering is messed up on that page. But I am looking to implement the minimization operator with a curried function. 
17:25:39 <wikiemol> nil Provided a version of it that works with a partially "uncurried" function like so `mu f x = head [i | i <- [0..], f i x == 0] `
17:26:00 <solonarv> hmm, n-tuples are generally kind of annoying to work with for this sort of thing
17:26:15 <solonarv> because there is no simple way to extend an n-tuple to a (n+1)-tuple
17:27:24 <solonarv> I might reach for something like length-indexed lists
17:28:17 <wikiemol> solonarv I was thinking that, but that feels like cheating haha
17:28:39 <wikiemol> I am sure that is probably the "Haskelliest" way to do it though
17:28:39 <solonarv> % data LIL n x where LNil :: LIL 0 x; (:&&) :: x -> LIL n x -> LIL (n+1) x
17:28:40 <yahb> solonarv: ; <interactive>:13:68: error: Not in scope: type constructor or class `+'
17:28:47 <solonarv> ugh
17:28:55 <solonarv> % import GHC.TypeLits
17:28:56 <yahb> solonarv: 
17:28:58 <solonarv> % data LIL n x where LNil :: LIL 0 x; (:&&) :: x -> LIL n x -> LIL (n+1) x
17:28:58 <yahb> solonarv: 
17:29:00 <wikiemol> ????? What was that??
17:29:19 <solonarv> definition of a length-indexed list
17:29:41 <jle`> it's an inductively defined uple
17:29:51 <solonarv> % :t "hello" :&& ("world :&& LNil)
17:29:51 <yahb> solonarv: ; <interactive>:1:30: error: lexical error in string/character literal at end of input
17:29:56 <solonarv> % :t "hello" :&& ("world" :&& LNil)
17:29:57 <yahb> solonarv: LIL 2 [Char]
17:30:49 <solonarv> % type Fun n = LIL n Int -> Int
17:30:49 <yahb> solonarv: 
17:30:59 <solonarv> % type Fun n = LIL n Integer -> Integer
17:31:00 <yahb> solonarv: 
17:31:27 <solonarv> now you can write a type signature like: mu :: Fun (n+1) -> Fun n
17:32:50 <MarcelineVQ> "<nil> i think ocaml does this (i could be mistaken)" idris does :>
17:33:09 <nil> nice
17:33:11 <MarcelineVQ> Which is quite useful when you're generating types
17:33:32 <solonarv> yeah, that's also when Haskell tuples become annoying
17:34:04 <solonarv> you end up having to write a typeclass for the thing you are trying to do and just almost-copy-paste / generate a bunch of instances for all the tuple size
17:34:07 <solonarv> *sizes
17:36:25 <wikiemol> solonarv Does this come up a lot when writing haskell?
17:37:14 <wikiemol> I imagine there aren't many language features to deal with arbitrary length tuples for a reason?
17:39:17 <__Ethan__> why do you want arbitrary length tuples?
17:39:56 <wikiemol> __Ethan__ I don't want them haha, I just want to understand haskell better 
17:40:04 <__Ethan__> ahh
17:40:11 <jle`> wikiemol: it typically don't come up no, but arbitrary length tuples are one steop of the way to arbitrary-shape records
17:40:15 <solonarv> wikiemol: no, it doesn't come up that often
17:40:23 <jle`> which can be somewhat useful
17:40:34 <jle`> arbitrary length tuples themselves, not so much
17:40:37 <solonarv> if it did, there would probably be a GHC proposal to improve them already ;)
17:40:58 <wikiemol> jle` What do you mean by arbitrary-shape records? 
17:41:07 <__Ethan__> i personally would use a tuple of lists to achieve the same effect as arbitrary length tuples
17:41:26 <jle`> wikiemol: dealing with "any type that contains a Int field named 'Age'"
17:41:34 <jle`> *any record
17:41:36 <solonarv> if you do that, you don't have any length/shape information in the types
17:41:49 <__Ethan__> you can add a selector list
17:42:04 <jle`> wikiemol: so you might have many different record types, each of them have an 'age' field containing an Int
17:42:15 <jle`> wikiemol: it can sometimes be useful to write functions uniting all of them in a generic way
17:42:21 <solonarv> and while this isn't a *problem*, we like it when we can better specify in the type what our data looks like
17:42:27 <jle`> so "arbitrary-shaped record" abstractions can be useful in those situations
17:42:52 <__Ethan__> i dont know too much about lenses
17:43:03 <solonarv> lenses don't have much to do with this
17:43:06 <wikiemol> jle` Sounds like OOP to me xD 
17:43:09 <__Ethan__> but you might want to look into the lens package
17:43:27 <jle`> wikiemol: not quite oop, since these aren't 'objects', but more just like typed dictionaries
17:43:35 <jle`> __Ethan__: lenses can't really help you here
17:43:40 <jle`> but Generics can
17:43:44 <solonarv> lens doesn't have anything for manipulating tuples and changing their shape
17:43:54 <__Ethan__> ahh
17:44:18 <wikiemol> jle` well it sounds kind of like having a bunch of things implement an abstract class.
17:44:19 <solonarv> there *might* be a library somewhere, but I would probaly just go for length-indexed lists (as above) if all elements are the same type
17:44:34 <jle`> wikiemol: 'implementing an instance' is normal Haskell :)
17:44:41 <solonarv> wikiemol: ah! well yes, that is sort of how typeclasses work in general ;)
17:44:42 <jle`> they'd all be members of a typeclass
17:44:52 <wikiemol> Well I should say extend an abstract class haha thats more of what it sounds like
17:44:55 <jle`> same as Eq, Ord, etc.
17:45:15 <solonarv> it's more like implementing an interface
17:45:27 <jle`> one thing you can do is write a `HasAge a` typeclass, like `class HasAge a where getAge :: a -> Int`
17:45:36 <solonarv> Haskell's typeclasses really are comparable to interfaces (as in Java)
17:45:42 <jle`> but it becomes annoying to do that manually for every type you want to use it with
17:45:42 <solonarv> but much more powerful and general
17:45:54 <jle`> so this is where functions that work over arbitrarily shaped records would be useful
17:46:33 <jle`> using GHC Generics we can basically use a typeclass, but the instances are 'automatic' instead of manual
17:46:35 <wikiemol> Hm that does make sense. I have been told its bad to think about type classes that way. 
17:47:00 <wikiemol> But I can't figure out why haha
17:47:13 <jle`> wikiemol: yeah, it can easily lead to typeclass abuse heh
17:47:30 <solonarv> so, one thing you do with Java interfaces is that you have a value and the only thing you know about its type is that it implements some interface
17:47:49 <solonarv> and then maybe you check its type at runtime and do different things depending on that
17:47:58 <jle`> wikiemol: but essentially the 'mechanics' are very similar, even if the way you use them are different
17:48:04 <solonarv> you *can* do this in haskell, but it's awkward and kind of pointless
17:49:01 <solonarv> and also, in Haskell typeclasses are really more like predicates on types
17:49:24 <wikiemol> !!!!!! 
17:49:50 <wikiemol> I think that sentence just  made me understand type classes way better than I ever have before
17:50:19 <wikiemol> jle` I am definitely a type class abuser :(
17:50:25 <solonarv> glad to be of service ;)
17:50:29 <jle`> there is always hope
17:50:37 <jle`> it's never too late to change
17:52:08 <solonarv> ah, but you forgot one small wrinkle
17:52:20 <solonarv> in order to change, one must *want* to change!
17:52:43 <wikiemol> Haha I think I do, it seems like its usually been the wrong choice
17:53:00 * solonarv writes a vararg function while cackling evilly
17:54:58 <olligobber> why is mtimesDefault in Data.Semigroup and not Data.Monoid?
17:56:12 <wikiemol> solonarv I don't think I understand haskell enough to get that joke but I am sure its funny
17:57:09 <solonarv> a "vararg function" is a function that takes a variable number of arguments before eventually returning a result
17:57:15 <solonarv> an example is printf
17:57:29 <solonarv> in haskell, to write one you need to use a typeclass
17:58:14 <wikiemol> !!! Wait! Is this what is needed to write mu with a curried function? 
17:58:33 <wikiemol> Has this conversation gone full circle??
17:59:24 <solonarv> eh, you could do it that way I suppose
17:59:30 <solonarv> but it would be inconvenient
17:59:44 <solonarv> length-indexed lists are probably the most pleasant approach
18:00:46 <wikiemol> solonarv I think maybe I didn't fully understand your length indexed lists, Perhaps I thought you meant one thing when you meant another
18:01:32 <solonarv> hm, you can probably find some blog post about it that actually explains them
18:01:46 <solonarv> I'm too tired to go find one for you thoug, sorry
18:02:29 <wikiemol> fair
18:03:08 <solonarv> the above implementation of mu would look something like:
18:03:57 <solonarv> % mu f x = head [i | i <- [0..], f (i :&& x) == 0]
18:03:57 <yahb> solonarv: 
18:04:08 <solonarv> % mu :: Fun (n+1) -> Fun n
18:04:08 <yahb> solonarv: ; <interactive>:21:1: error:; * No instance for (Show (Fun (n0 + 1) -> Fun n0)) arising from a use of `print'; (maybe you haven't applied a function to enough arguments?); * In a stmt of an interactive GHCi command: print it
18:04:17 <solonarv> % :t mu :: Fun (n+1) -> Fun n
18:04:17 <yahb> solonarv: Fun (n + 1) -> Fun n
18:06:44 <wikiemol> I am going to have to stew on this
18:18:51 <[Leary]> % let mu :: (Integer -> Bool) -> Integer; mu f = head (filter f [0..]); strictlyDecreasing a b c d = a > b && b > c && c > d in mu (\y -> strictlyDecreasing 100 y 50 5)
18:18:51 <yahb> [Leary]: 51
18:19:17 <[Leary]> wikiemol: I think it's simplest to let the user of mu handle the other arguments, since mu itself doesn't care about them.
19:09:17 <fragamus> Hi I'm trying to wrap my brain around this: 
19:09:19 <fragamus> data Store s a = Schmore (s -> a) s deriving Functor
19:09:57 <fragamus> so a Schmore has a function and an s
19:12:20 <MarcelineVQ> yes, a function of (s -> a) and an s
19:12:25 <Ailrun[m]> Is hoogle down? or it's just me?
19:12:37 <fragamus> and it is a functor such that fmap will affect that s
19:12:41 <Ailrun[m]> Oh, it's up again
19:13:01 <MarcelineVQ> no, much like Either a b, Functor can only affect the b.
19:13:36 <MarcelineVQ> oh aha, no, I've misread what you said
19:13:45 <fragamus> whew
19:13:59 <fragamus> I was freeking out
19:15:14 <MarcelineVQ> But now that I'm sure what you said: no, much like Either a b where Functor can only affect the b,  Functor for Schmore s a can only affect the a.
19:16:34 <fragamus> ok so the function gets modified such that when it is evaluated the a that comes out of it the a is transformed into let's say a'
19:18:57 <MarcelineVQ> sure though we tend to note is as b with fmap.  fmap :: Functor f => (a -> b) -> f a -> f b   if we slot in (Store s) for f we get   fmap :: (a -> b) -> Store s a -> Store s b
19:19:20 <fragamus> got it
19:26:52 <fragamus> Store s a     only the a is affected by fmap     is that true by virtue of it appearing last
19:28:03 <jle`> fragamus: yeah, it's because `Store s` is the Functor, not `Store s a`
19:49:47 <jusss> how to make two loop function communicate?
19:52:38 <jusss> if there's global variables, that's easy to do that
19:52:55 <jusss> just make those loop functions to read that same variables
19:53:12 <jusss> but how to do that in haskell?
19:54:17 <ephemient> > let x = 0 : map (* 2) y; y = 1 : map (+ 1) x in take 10 $ zip x y  -- two lists that use each other as input
19:54:21 <lambdabot>  [(0,1),(2,1),(2,3),(6,3),(6,7),(14,7),(14,15),(30,15),(30,31),(62,31)]
19:55:27 <jusss> if we don't use global variables, I think we can put two loop functions in one loop, share the same variable
19:56:27 <jusss> but one of them is a blocked function
19:56:41 <jusss> is there 'select' ?
20:20:00 <dsal> jusss: Not like what you're thinking, but can you be more concrete?
20:20:13 <dsal> Control.Concurrent.Async has some pretty good things if you're running  concurrent IO actions.
20:22:30 <dsal> What is a "blocked function"?
20:51:33 <TheCommieDuck> having a brainfart moment; if I'm wanting to use do notation to imperatively construct a value (take some smart constructor, change a to b, change foo to bar, blah blah blah, get out my final value) what do I want? I want to say state monad but I don't care about the value, just the state.
21:15:22 <maerwald> is SIGTERM not an asynchronous exception?
21:15:42 <c_wraith> It's a signal, not an exception
21:15:53 <c_wraith> what the signal handler does with it is allowed to vary
21:16:03 <c_wraith> I never did get a great handle on what ghc does with signals
21:16:28 <maerwald> ah, that's why shake is buggy
21:16:53 <maerwald> it only catches exceptions (sigint seems to be one), but doesn't respond to signals properly
21:17:21 <maerwald> c_wraith: yeah, `catch` is awful
21:17:29 <maerwald> documentation is also not clear at all
21:18:20 <maerwald> sigterm to the shake process will just make it die and not handle any subprocesses
21:22:58 <jusss> dsal: I mean 'blocking' functions like recv in socket
21:23:13 <dsal> jusss: That's not a function.  That's an IO action. 
21:23:57 <jusss> dsal: oh right, how we can handle that blocking IO actions?
21:24:08 <dsal> Look at Control.Concurrent.Async
21:24:54 <jusss> ok...
