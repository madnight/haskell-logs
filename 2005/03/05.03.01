00:06:48 <Lemmih> Igloo: Ping.
00:10:21 <musasabi> => uni
00:19:48 <dons> oleg's finally done it.
00:20:27 <jlouis> dons: huh?
00:20:43 <dons> Subject: [Haskell] De-typechecker: converting from a type to a term
00:21:02 <jlouis> heh
00:21:47 <dons> ah. I think I'm looking at some TH, which makes this much more sensible.
00:28:36 <tromp> morning
00:33:10 <Heffalump> Lemmih: igloo is highly unlikely to be awake for hours
00:41:39 <shapr> hey, have you guys seen the lovely expandy bits in these haddocks? - http://postmaster.cryp.to/docs/index.html
00:43:03 <dons> that's nice.
00:44:11 <dons> how long has haddock been able to do that?
00:44:23 <Heffalump> "Haskell 2-pre"??
00:44:38 <Heffalump> (in the portability section)
00:45:01 <dons> hehe.
00:46:06 <dons> "My code is compatible with Haskell 17, please upgrade your compiler"
00:57:05 <jlouis> dons: haha
00:59:19 <musasabi> getting monadic comprehensions back would be nice.
00:59:34 <musasabi> the idea of a separate prelude for teaching was a nice one.
00:59:58 <Heffalump> yeah
01:00:16 <Heffalump> though users don't like being patronised
01:00:45 <musasabi> killing IO.catch and getting better exceptions would be quite high in my wishlist
01:01:07 <musasabi> and no more import Prelude hiding(catch)
01:01:48 <Heffalump> oh, that'd be good
01:05:28 <Heffalump> what are the two catches, anyway? I just automatically fix that problem by hiding the Prelude catch without thinking about it much
01:05:42 <Heffalump> Is it just that IO has its own kind of exceptions and then Control.Exception came along and generalised them?
01:06:04 <musasabi> yes.
01:06:36 <musasabi> and IO is needed for haskell98, but Control.Exception is more general if I understand things correctly.
01:07:21 <musasabi> but => library.
01:37:02 <shapr> hey pesco
01:37:07 <shapr> I just read cp1, it's nice!
01:37:08 <pesco> Moin shapr!
01:37:19 <pesco> Cool. But I made a mistake. ;)
01:37:26 <Lemmih> shapr: When will TMR be out?
01:37:28 <shapr> Well, it doesn't have to be perfect.
01:37:33 <shapr> Lemmih: soon.
01:37:33 <pesco> Yeah.
01:37:45 <pesco> What's the current progress?
01:38:31 <shapr> Currently, I'm making sure I have all the pdfs, then I'll upload them. Itkovian is doing a single-file version.
01:38:56 <pesco> Have you sent him the figures he was missing yesterday?
01:39:02 <Itkovian> Well, it's not going as smoothly as expected.
01:39:02 <shapr> yes.
01:39:07 <pesco> Coo.
01:39:11 <Itkovian> bloody mess.
01:39:35 <pesco> Itkovian: Ah, 'morning.
01:41:09 <shapr> Here's the plan for IssueOne http://www.scannedinavian.org/RandomWiki/TheMonadReader_2fIssueOne
01:41:18 <shapr> Now I just have to get those files online.
01:41:46 <Itkovian> hi pesco
01:41:50 <Itkovian> thx for the swift mail
01:41:59 <shapr> Oh, and adding credits for the logo.
01:42:07 <pesco> Itkovian: No problem.
01:42:30 <swiert> shapr: my paper isn't ready yet!
01:42:55 <Itkovian> swiert: is that the AG paper?
01:43:01 <swiert> or it least - I was planning to release it for the next issue.
01:43:05 <shapr> oh?
01:43:07 <swiert> Itkovian: yes
01:43:23 <Itkovian> swiert: if you get it done, could you mail me the tex source?
01:43:27 <swiert> shapr: yeah, I wanted to set up some code demo's (Flippi hacking etc.)
01:43:32 <Itkovian> I'm having trouble converting the lhs
01:43:45 <Itkovian> as I seem to be missing lag2tex or something like that.
01:43:48 <shapr> swiert: you could also do AGs part 2, the revenge :_)
01:44:00 <shapr> Itkovian: did you get the two .fmt files I sent?
01:44:02 <Itkovian> or AG's revisited
01:44:06 <pesco> Itkovian: lhs2TeX?
01:44:14 <swiert> Itkovian: you need a few files from lhs2TeX
01:44:16 <Itkovian> pesco: i emrged that.
01:44:32 <pesco> Itkovian: Hm. OK.
01:44:36 <Itkovian> shapr: I'' check that
01:44:59 <swiert> shapr: I promise I'll get everything together for the next issue - I just haven't had time to have a good look at the stuff I wrote a long time ago.
01:45:04 <Itkovian> bloody machine is bloody slow (somehow I blew up a memory bank, well, the metal is blackened)
01:45:05 <swiert> there's a bit of tidying up to do.
01:45:25 <shapr> Ok, it's out of issue one.
01:45:33 <swiert> thanks.
01:45:57 * earthy grins
01:46:04 <swiert> I'll make sure the version for the next issue is worth the wait.
01:46:09 <Itkovian> ok.
01:46:21 <earthy> AG's matter because they make writing down grammar-based computations a shitload easier
01:46:24 <earthy> .
01:46:29 <shapr> Next issue will be wiki-publishing, so you may want to get it into issue one now while you can still get guaranteed pdf/ps output.
01:46:32 <earthy> now, how's that for an article? :P
01:47:29 <Itkovian> all right shapr, thx.
01:47:49 <swiert> shapr: no problem - I'll settle for wiki publishing
01:47:54 <shapr> ok, cool.
01:49:45 <Heffalump> what's wiki publishing?
01:49:53 <swiert> earthy: obviously I agree with you - the problem is convincing everyone else.
01:50:05 * Heffalump agrees too
01:50:10 <earthy> that wasn't convincing?
01:50:18 * Heffalump would have been convinced.
01:50:20 <shapr> Heffalump: it means articles will be wiki format with inline latex.
01:50:22 <Heffalump> but I already thought that
01:50:28 * earthy needs to polish up his skills then :)
01:50:31 <Heffalump> shapr: why not PDF etc?
01:50:39 <shapr> Because it's too much work.
01:51:34 <Heffalump> isn't it automatable?
01:51:34 <earthy> anyway, given that you can describe a significant part of a programming language's context rules concisely in attribute grammars, it should be quite obvious that attribute grammars have useful properties
01:51:57 <earthy> but methinks that people seem to not be steepened in AG's these days
01:52:01 <shapr> I would like to have something that can take wiki syntax + inline latex and creates pdf/ps/etc but I won't have time to write or find someting that does that.
01:52:20 * earthy had to do his compiler construction course in an affix grammar formalism...
01:52:26 * earthy is spoiled :P
01:52:28 <Heffalump> earthy: inefficient to evaluate, lots of boilerplate copy rules (or confusion from the behaviour of implicit ones)
01:52:38 <shapr> Heffalump: Possibly, would you like to create and admin the automation necessary?
01:52:48 <Heffalump> I could try..
01:53:03 <Heffalump> but if you've tried and it seems hard perhaps I'm underestimating the work needed
01:53:13 <earthy> hef: where's the ineffeciencies exactly? the most well-performing NLP stuff is based on affix grammars...
01:54:01 <earthy> (okay, the affixes are over a finite lattice... that makes it somewhat easier to make things efficient ;))
01:54:01 <shapr> Part of the problem is that I don't know LaTeX, another part is that this is the first issue so no one really knows everything that's necessary. It may be easy to automate, I don't know.
01:55:12 <shapr> Having each in-progress article on the same Wiki allows the authors to see spelling, grammar, etc fixes that I might miss. It also means that each author sees how much the others have completed.
01:55:30 <shapr> embarassment oriented programming :-)
01:56:13 <earthy> gheh
01:57:02 <pesco> Hah, darwinports is cool.
01:57:12 * pesco calls port lhs2tex build
01:57:27 <earthy> anyway, back to trying to understand Oleg's de-typechecker
01:57:38 * Itkovian is getting mad at winblows 2000 
01:58:44 <shapr> Plus I temporarily lost some files and info about various stuff for tmr1, having everything on the same wiki would it wouldn't get lost, and tmr staff would always have access to content/pix/etc.
02:00:32 <shapr> Separate darcs repo for each article didn't work so well because not everyone has a publically accessible IP. (and I don't yet know how to use bubble packets to get around that)
02:01:30 <Heffalump> earthy: dunno about NLP, but if you define a language in an AG you lose the benefits of things like in-place updating
02:01:55 <Heffalump> (a clever AG compiler can obviously help, but it's like the difference between well-written high-level Haskell and well-written C)
02:03:09 <nlv11757_> well-written C....hmmmmm
02:03:24 <nlv11757_> funny to see those two words in one sentence without negation in front of it
02:03:34 <pesco> shapr: But wouldn't the logical conclusion be to have one darcs repo everyone can access?
02:04:19 <shapr> that would make sense.
02:04:27 <Philippa_> nlv11757_: there's such a thing as well-written C. It may not be easy to /check/ it's well-written, but it exists
02:05:11 <pesco> shapr: You would only have to create accounts for every author so they can push. Not too much hassle.
02:06:01 <shapr> or just add gpg keys if every author can send mail from their desktop
02:06:27 <nlv11757_> is it like the holy grail philippa? :)
02:06:33 <nlv11757_> it exists....but as a myth?
02:06:42 <shapr> Heffalump: if you have time to check out automating that, I'd appreciate it.
02:06:45 <pesco> shapr: Ooh, you mean, it can auto-apply gpg-signed patches?
02:06:48 <shapr> yup
02:06:53 <pesco> Cool.
02:06:56 <pesco> I'm amazed.
02:07:02 <earthy> hef: in-place updating is found by extracting the update-graph for the attributes and then straightening that as far as possible
02:07:11 <pesco> shapr: Where do you email such patches?
02:07:26 <pesco> Does it use some special address??
02:07:29 <shapr> To the repo itself, like wikiwiki@scannedinavian.org for example.
02:07:42 <pesco> Where wikiwiki is the repository name?
02:07:50 <shapr> The wikiwiki repo has the gpg checking turned off, anyone can add patches.
02:08:00 <pesco> Heh, cool.
02:08:16 <shapr> http://www.scannedinavian.org/DarcsWiki/GettingStarted
02:09:10 <shapr> What's the easiest way to get a random number in zsh? Does dc or bc have a rnd function?
02:09:31 <mflux> echo $RANDOM is hard to beat
02:09:42 <shapr> oh, nice
02:10:32 <shapr> Is there also a way to scale that to a number between 1 and n ?
02:11:21 <norpan> expr $RANDOM % n + 1
02:11:45 <norpan> if you don't care that much about the slight maldistribution of the numbers
02:11:53 <shapr> thanks
02:13:27 <norpan> i don't know about zsh, but in bash you can also do $((expr)) instead of using expr
02:13:46 <norpan> $(($RANDOM % 10 + 1))
02:14:58 * pesco reads about darcs send --sign.
02:15:08 <pesco> darcs is SO GOOD!
02:15:19 * pesco falls over from astonishment.
02:15:25 <pesco> *thunk*
02:15:34 * shapr quickly evaluates pesco
02:15:49 * pesco appears on the heap.
02:15:54 <Itkovian> the only thing that bothers me atm is that I don;t know how to easily see what has been changed, and how I can resolve conflicts
02:16:28 <shapr> per-patch changes show up nicely in the darcs.cgi
02:16:38 <pesco> darcs changes --last=10 and darcs resolve maybe?
02:16:44 <pesco> I don't know, I just saw these.
02:16:53 <Itkovian> shapr: is there a eps available of the tmr.ng image?
02:16:58 <Itkovian> tmr.png that is
02:17:30 <shapr> probably can be...
02:21:20 <shapr> Itkovian: http://www.scannedinavian.org/~shae/tmr.eps
02:22:23 <Oejet> shapr: Nice logo.
02:22:55 <shapr> Credits to musasabi and his gf for working on it yesterday :-)
02:23:13 <Itkovian> shapr: can we change the tmr style not to put page numbers on the pages?
02:23:53 <shapr> Sure, if you like that?
02:24:06 <Oejet> Itkovian: I like page numbers.  And also dates of publishing on the front page.
02:24:24 <Itkovian> Oejet: there would be nunbers on the final pdf.
02:25:15 <Oejet> Itkovian: I'm not sure I understand.  If I print it out, will I get page numbers?
02:30:04 <Itkovian> yes.
02:30:50 <Itkovian> but as pugs.pdf has no numbers, and I'd like the numbering to run from 1 to n , without resets to 1 over the entire tmr issue, I want them _removed_ when I compile the pdf's
02:34:20 <Oejet> Itkovian: I see.  Well enough.
02:44:03 <shapr> check it out - http://www.haskell.org/hawiki/TheMonadReader_2fIssueOne
02:44:58 <shapr> Anything obviously broken there?
02:44:59 <Oejet> "Extra, extra!  Monads seen in the wild"
02:45:47 <shapr> Oh, I should link to a comments wikipage most likely.
02:46:08 <shapr> oh, and include the sources for the gtk2hs article.
02:46:10 <Oejet> Links work.  Logo shows fine.
02:48:06 <tromp> hi oejet, shapr
02:48:39 <tromp> i put the full connect-4 solver on my webpages
02:48:57 <tromp> unfortunately i cant figure out how to add `seq` s to my code to stop the space leak
02:49:09 <shapr> ok, I think the first issue is out.
02:49:18 <shapr> This calls for lunch!
02:49:37 <shapr> Here it is - http://www.haskell.org/hawiki/TheMonadReader_2fIssueOne
02:50:01 <shapr> If you guys don't see anything obviously broken by the time I'm back from lunch, I'll announce it on the mailing list and go back to actual paying work.
02:50:08 <bourbaki> moin
02:50:34 <shapr> Itkovian: When you have a single-file version, send it to me and I'll put on haskell.org along with the others.
02:51:10 <Itkovian> shapr: what's the url again for the darcs tmr repos?
02:52:43 <Itkovian> hmm, none of the links to the pdfs seem to work :-(
02:55:20 <IRCMonkey_> ddd
02:55:57 <shapr> Itkovian: none of the pdf links work for you?
02:56:55 <musasabi> back..
02:57:48 <musasabi> The JFP article on two level types was a nice one.
02:58:40 <musasabi> pdf links seem to work, but lunch now.
03:02:12 <Itkovian> http://haskell.org/tmr/haifa.pdf -> The requested URL /tmr/haifa.pdf was not found on this server.
03:02:14 <tromp> there's a small typo in the reverse code
03:02:39 <shapr> Itkovian: reload
03:02:46 <tromp> the first occurance of acc should be []
03:03:23 <tromp> (on page 2 of andrew's article)
03:04:57 <shapr> ah, I see.
03:07:03 <shapr> thanks :-)
03:07:52 <musasabi> is the all in one pdf somewhere?
03:08:10 <shapr> not yet
03:08:52 <shapr> tromp: pdf now online should be fixed
03:09:23 <Itkovian> musasabi: working on that ...
03:17:33 <musasabi> I have a concatenated version, but it needs some finetuning.
03:19:40 <Itkovian> I am trying to get the pagenrs in order
03:21:12 <Itkovian> the title page to be can be found at http://www.elis.ugent.be/~ageorges/tmr_title.pdf
03:22:25 <Oejet> Itkovian: Frontpage looks fine.
03:24:10 <Itkovian> ok.
03:24:27 <Itkovian> we now need to upgrade it to great :-)
03:24:50 * Itkovian is running out of butter. panic!
03:25:22 <tromp> hi, TheHunter
03:26:41 <TheHunter> 'morning, tromp.
03:29:06 <tromp> i tried to fix my solver by sprinkling the code with `seq`
03:29:17 <tromp> but it keeps leaking:(
03:29:50 <tromp> i put the new code on my webpages, if you want to try yourself
03:30:59 <tromp> it comes down to the definition of negamax, which is just over 1 page of code
03:32:06 <bourbaki> hey basti_
03:32:26 <bourbaki> basti_: i have started to code that stuff i told you about do you want to have a look?
03:32:53 <basti_> uhm sure
03:33:43 <bourbaki> http://rafb.net/paste/results/uRVsy422.html
03:34:37 <basti_> hmm
03:34:43 <basti_> I look forward to seeing something ;)
03:34:46 <bourbaki> i also try to use my splines to render it
03:35:03 <basti_> does it? =)
03:35:13 <bourbaki> but i ran into a problem when i import that other module i get errors imorting the other libs
03:35:27 <Itkovian> shapr: you got that mail yet?
03:35:36 <bourbaki> i used that spline stuff to render my landscape and text
03:35:36 <Itkovian> heh, I'm making progress ...
03:36:17 <Itkovian> bourbaki: something seems to think that's C++ <grin>
03:36:39 <bourbaki> its the website it has no haskell colouring
03:39:09 <TheHunter> tromp, how should I run the thing?
03:42:04 <tromp> enter some moves like 2 4 2 4 4 7 6 1 4 4
03:42:53 <tromp> then u'll see memory growing from 0mb to about 300m
03:43:24 <TheHunter> how much memory would it use without the space leak?
03:44:44 <tromp> the haskell footprint + 5Mb
03:45:02 <tromp> 5Mb is the size of the transposition table
03:45:55 <tromp> uhm, it's even less
03:47:57 <tromp> that code only uses 0.5Mb of trans.table
03:48:07 <xerox> Pappa :D
03:48:34 <xerox> Whoops, wrong buffer :)
03:49:02 <TheHunter> btw, is there something better than top to observe memory usage?
03:49:38 <tromp> i'd expect whnf reductions throughout negamax, since it uses the values to decide whether to prune
03:49:49 <tromp> i only know of top
03:55:29 <Itkovian> ok, this is not perfect, and I'm still missing the pict boegel will (hopefully) send me in a few minutes ...
03:55:34 <Itkovian> but feedback is welcome.
03:56:09 <Itkovian> http://www.elis.ugent.be/~ageorges/tmr_full_issue1.pdf
03:57:16 <musasabi> Itkovian: that looks very good :-)
03:57:36 * musasabi goes to lunch with a warm freshly printed TMR in hand.
03:57:45 <Itkovian> well,the page numbers do not swap sides and stuff ... :-(
03:59:25 <Itkovian> maybe we'd also need a second page with a bit of blahblah on it?
04:02:13 * boegel can see in the future: Itkovian has mail !
04:03:49 <tromp> @index fix
04:03:49 <lambdabot> Control.Monad.Error,Control.Monad.Fix,Control.Monad.Identity,Control.Monad
04:03:49 <lambdabot> RWS,Control.Monad.Reader,Control.Monad.State,Control.Monad.Writer
04:03:56 <tromp> @index fixpoint
04:03:56 <lambdabot> bzzt
04:05:10 <TheHunter> tromp, sorry, i can't find the source of the space leak.
04:05:48 <tromp> me neither
04:06:16 <tromp> the recursive call to negamax would be the place for it
04:06:30 <tromp> but that yields a value v which is tested immediately
04:07:10 <Itkovian> crap.
04:07:54 <boegel> Itkovian: ?
04:07:59 <Itkovian> I'll drop the pagenumber in the middle!
04:08:08 <Itkovian> screw it
04:08:11 <boegel> and why ?
04:08:13 <tromp> is there a point-free definition of the following?
04:08:15 <tromp> let mys ~(k:ks) = 0:(k+1):(mys ks)
04:08:38 <tromp> which uses lazy patterns
04:09:26 <Itkovian> because obviously when concatenating pdf, the lift/right alignment can change from even to odd
04:10:24 <boegel> hmm, I see
04:11:43 <Itkovian> ok. it's done
04:11:50 <Itkovian> go and fetch it ...
04:12:03 <boegel> @wiki TheMonadReader
04:12:04 <lambdabot> http://www.haskell.org/hawiki/TheMonadReader
04:12:05 <boegel> here?
04:13:09 <Itkovian> aaargh!
04:13:14 * boegel ducks
04:13:17 <Itkovian> bloody pageno are on top
04:13:32 <Itkovian> Q@#$%*Q#$&%*@!#$%&@)*#$%&@#*$%&WINDOWS@*#R&#()!$*R
04:14:03 <boegel> why not build the thing in linux Itkovian ?
04:14:19 <Itkovian> hah!
04:14:21 <Itkovian> I wish I could
04:14:49 <Itkovian> my machine is _slow_
04:15:05 <Itkovian> gimme gimme
04:15:19 <Itkovian> it says 'Windows is starting up'.
04:15:20 <Itkovian> pfft
04:15:58 * boegel laughs
04:16:09 <shapr> @yow !
04:16:11 <lambdabot> Gee, I feel kind of LIGHT in the head now, knowing I can't make
04:16:11 <lambdabot>  my satellite dish PAYMENTS!
04:17:35 <Itkovian> bye bye porn
04:19:53 <boegel> ? :D
04:20:45 <shapr> hoi boegel
04:20:50 <boegel> hey shapr
04:21:12 <shapr> Ok, I am now advertising for authors for the second issue of TMR!
04:21:16 <boegel> only 5 articles for tmr1?
04:21:34 <shapr> Yup, but that was my minimum to publish, so it was just fine with me.
04:21:55 <boegel> where did you put my code online ?
04:22:06 <shapr> I also have partial content on four articles that didn't get into tmr1
04:22:15 <boegel> damn, that's a shame
04:22:20 <shapr> It's linked next to the pdf, "sources"
04:22:32 <boegel> oh, okay
04:22:34 <boegel> thanks :D
04:22:35 <Itkovian> okok
04:22:40 <Itkovian> I'm there. I think
04:22:50 <Itkovian> Any remarks will be dealt with after work.
04:22:57 <Itkovian> http://www.elis.ugent.be/~ageorges/tmr_full_issue1.pdf
04:23:00 <boegel> shapr: where will you publish it ?
04:23:03 <shapr> Oejet: what do you think, want to write an article for issue two?
04:23:03 <shapr>  wri
04:23:08 <shapr> boegel: http://www.haskell.org/hawiki/TheMonadReader_2fIssueOne
04:23:25 <shapr> And since no one saw any errors while I was at lunch, I am now going to announce it on the mailing lists.
04:23:37 <shapr> Itkovian: thanks much for working on this!
04:24:02 <boegel> yaay !
04:24:25 <shapr> And I'll announce it on lambda-the-ultimate, and ask for authors for issue two.
04:24:26 <Itkovian> np.
04:24:33 <Itkovian> It was an experience :-)
04:24:53 <boegel> hmm, the title page looks kinda crappy as opposed to the other pages :s
04:24:53 <Itkovian> don;t forget to drop it on the sequence.complete too!
04:24:55 <Oejet> shapr: I'm already working on it slowly.  "An FFI Tutorial or How to Bind Bzip2".
04:24:59 <Itkovian> eh?
04:25:03 <shapr> Oejet: excellent!
04:25:18 <shapr> Tune in next episide for the continuing adventures of the might monad!
04:25:25 <shapr> um, mighty
04:25:27 <Itkovian> crappy?!
04:25:27 <Itkovian> It's the best page
04:25:27 <Itkovian> ah erm
04:25:27 <boegel> Itkovian: using gvv it does look kinda crappy
04:25:27 <Itkovian> did I say that?
04:26:04 <boegel> http://studwww.ugent.be/~kehoste/tmr1.png
04:26:11 <Oejet> Itkovian: I think articles should begin on right hand pages wich is odd numbered.
04:26:19 <Itkovian> the file is also indecently big
04:26:36 <Itkovian> Oejet: if I find the time, I might try and build from source.
04:27:00 <Itkovian> ok that sucks
04:27:44 <Oejet> In Xpdf the front page looks like it's scanned.
04:28:33 <boegel> and also, it's a shame only1 of the articles doesn't follow the tmr template
04:29:24 <boegel> anyway, I'm off, I should get some work done
04:29:24 <boegel> bye !
04:29:46 <shapr> cya
04:30:19 <shapr> Things will likely improve with each issue.
04:31:59 <shapr> It is surprisingly large. 18mb as a single file, and 626k as separate files?
04:32:48 <Itkovian> blame acrobat.
04:33:10 <shapr> I like the front page, looks fine here.
04:33:23 <shapr> except that the url is wrong =)
04:33:36 <shapr> should be http://www.haskell.org/hawiki/TheMonadReader_2fIssueOne
04:33:52 * shapr blames acrobat
04:34:15 <shapr> Right, time to send out announcement emails! w00!
04:37:44 <xerox> 'lo
04:37:50 <shapr> hiya xerox
04:38:00 <xerox> How's going with TMR?
04:38:21 <shapr> online - http://www.haskell.org/hawiki/TheMonadReader_2fIssueOne
04:38:30 <xerox> Whoa.
04:46:08 <pesco> shapr: Congratulations on bringing out TMR issue one!
04:46:12 <pesco> I need to go now. See you all!
04:47:25 <shapr> Congrats to the authors and the rest of the staff, they put in an equal (or greater) amount of time and effort.
04:52:51 <tromp> i'm trying to solve andrew's supersequence problem
04:53:09 <shapr> any luck?
04:54:34 <tromp> i can make one of length n(n-1)+1
04:54:40 <tromp> but not sure if thats optimal
04:56:20 <xerox> Is --enable-hc-boot safe, for compiling 6.4?
04:56:36 <xerox> Or is better to get another GHC ?
04:58:11 <shapr> Dang, I left out a license statement... I should include that with a tgz of all the .tex sources.
04:58:15 * shapr leaves that for tomorrow.
05:00:40 <samc_> "ticked my fancy"
05:00:59 <shapr> Where's that?
05:01:19 <samc_> pseudocode line 5
05:01:22 <samc_> ~
05:01:39 <shapr> ah
05:01:43 <shapr> not caught by spell-checking
05:02:12 <Itkovian> roll a D20 ...
05:03:29 <Itkovian> shapr: I am working on a smaller version of the full pdf
05:03:45 <shapr> cool, can you fix the url at the same time?
05:04:34 <Itkovian> could it be that it's so big due to fonts that are included.
05:04:43 * shapr has no idea
05:04:49 <Itkovian> cos now I;ve got a smaller version, but it;'s ugly as hell.
05:10:42 <tromp> wow, it's 42:)
05:11:45 <samc_> what is? wait! was that a spoiler?
05:16:33 <tromp> the number of shortest supersequences for n=3
05:16:41 <tromp> see andrew's article:)
05:17:31 <Itkovian> of course it is tromp.
05:17:54 <Itkovian> 42 is the answer to Life, the Universe and Everything ...
05:19:02 * Philippa_ always wondered if (in some unit) it's how long the great prophet zarquon had left before the universe ended when he asked "how are we for time?" (thus, the ultimate question of...)
05:24:16 <samc_> code prode?
05:26:39 <Itkovian> but 42 what?
05:26:48 <Itkovian> minutes, seconds, milliseconds, ...
05:27:23 <samc_> oh it's meant to be 'probe' :)
05:27:25 <Philippa_> milliseconds, judging by the radio play
05:27:35 <Philippa_> as it goes "how are we for time?<BOOM>"
05:28:41 <shapr> Right, anymore TMR requests/problems/typos send me email, I gotta work. Still want more TMR authors though!
05:42:49 <glimming> how do I lisppaste?
05:43:04 <Lemmih> lisppaste2: url
05:43:04 <lisppaste2> To use the lisppaste bot, visit http://paste.lisp.org/new/haskell and enter your paste.
05:43:10 <glimming> I have a wee bit of a problem.
05:44:24 <lisppaste2> glimming pasted "records and Point" at http://paste.lisp.org/display/6189
05:44:24 <Oejet> How do I make Emacs in TeX mode not print [``] and [''] when pressing ["]?
05:44:52 <glimming> Why is this wrong (line 10), the use of records.
05:45:01 <glimming> I am trying to understand records but have not found a good tutorial.
05:45:08 <glimming> I want to implement an object with recursive record semantics here.
05:45:10 <swiert> Oejet: C-q "
05:45:35 <Oejet> swiert: Thanks!
05:46:18 <TheHunter> glimming, data Point = Point { x :: Integer, ...}
05:46:59 <glimming> That's what I had?
05:47:02 <TheHunter> pointFunctional x0 s = Point {x=x0, dx= \x1 -> (x s - x1)}
05:47:35 <TheHunter> . is function composition.
05:47:54 <glimming> yes?
05:48:01 <glimming> Aha!
05:48:03 <Oejet> glimming: You need a constructor for records (Point in TheHunter's example).
05:48:09 <glimming> So record selection is what? space?
05:48:18 <glimming> aha
05:48:41 <glimming> Empty script - perhaps you forgot the `>'s?
05:49:22 <TheHunter> x :: Point -> Integer
05:49:32 <TheHunter> dx :: Point -> Integer -> Integer
05:50:41 <glimming> Is there a good tutorial on records?
05:52:04 <TheHunter> http://www.haskell.org/onlinereport/exps.html#record-construction
05:52:17 <glimming> yz
05:52:17 <glimming>       KrispyKringle ned_ Lunar^ jlouis isomer polli SamB isomer_ tinus gdsx
05:52:17 <glimming>       jesse99 borism sqrt mflux chip wli calvin_ rossberg shrimpx hcchien
05:52:17 <glimming>       Taaus Perite noj djw clog _Codex thebug wagle kolmodin aj gzl emu tuomov
05:52:17 <glimming>       dons kosmikus Igloo
05:52:18 <glimming> *** #haskell modes: +nc
05:52:20 <glimming> *** #haskell was created on Monday 2003/08/04 00:15:01
05:52:22 <glimming> <glimming> how do I lisppaste?
05:52:24 <glimming> <Lemmihstrange
05:52:25 <glimming> oops.
05:52:30 <glimming> Sorry. Emacs IRC client. Very sorry!
05:53:54 <glimming> what is wrong with the line
05:53:58 <glimming> Point {x=x0, dx=\x1 -> ((x s) - x1)}
05:54:22 <glimming> I changed the type to a -> (b -> c) \neq a -> b -> c = (a->b) ->
05:54:22 <glimming> c ?
05:55:06 <Cale> a -> b -> c = a -> (b -> c)
05:55:17 <glimming> ok.
05:55:55 <glimming> Is there a good web page on records?
05:56:03 <glimming> Nothing in haskell98 report
05:56:12 <xerox> <TheHunter> http://www.haskell.org/onlinereport/exps.html#record-construction
05:57:25 <glimming> (there were nothing in the index of my recently printed report, though...)
05:59:22 <Philippa_> the main reason there's no real tutorial is that aside from the Foo {} pattern it's pretty much entirely syntactic sugar
06:00:23 <glimming> is this what was implemented? - Lightweight  Extensible Records for Haskell
06:00:56 <TheHunter> glimming, note that the x in makePoint x shadows the record selector x.
06:01:12 <glimming> --      pointFunctional      :: Integer -> Point -> Point
06:01:12 <glimming> --      pointFunctional x0 s  = Point {x=x0, dx=\x1 -> ((x s) - x1)}
06:01:22 <glimming> Please explain again.
06:01:36 <glimming> ahh, I see.
06:01:48 <glimming> the scope of the outer variable reaches to the inner where clause?
06:01:59 <TheHunter> exactly.
06:02:39 <glimming> ERROR point.lhs:10 - Empty script - perhaps you forgot the `>'s?
06:02:46 <glimming> I still get this error though. Why empty script?
06:02:53 <TheHunter> so unless you put the record definition in another module and use qualified names, x should probably be called pointX or something.
06:03:06 <glimming> This is a very small test file.
06:03:29 <TheHunter> literate code starts with >
06:03:38 <TheHunter> not with --, that's a comment.
06:04:19 <glimming> man, I forgot the things I knew in 1 week.
06:07:15 <lisppaste2> glimming pasted "A wee example of Recursive Record semantics for objects in Haskell" at http://paste.lisp.org/display/6190
06:07:41 <glimming> Now it works. Thanks for that.
06:13:14 <CosmicRay> good morning, #haskell!
06:13:26 <basti_> yo CR
06:13:33 <CosmicRay> hi basti
06:14:55 <Itkovian> hi CosmicRay
06:15:03 <CosmicRay> morning itkovian
06:15:39 <CosmicRay> woot!!! TMR is out!
06:16:01 * CosmicRay rushes to download!
06:16:04 <basti_> without my article :( next issue...
06:16:19 <CosmicRay> whoa, 18MB PDF :-)
06:16:45 <basti_> where do these come from?
06:17:02 <CosmicRay> what do you mean by "these"?
06:17:06 <samc_> CosmicRay smaller individually
06:17:27 <Oejet> boegel: I think you can compile the .glade file into the binary.  At least with GTK+.
06:17:36 <samc_> it's much greater than the sum of its parts ;)
06:18:33 <boegel> boegel, that might be possible, I'm no expert
06:18:56 <boegel> s/boegel/Oejet
06:19:03 <CosmicRay> haha
06:19:05 <CosmicRay>   You see, dear reader, I subscribe to the Usenet Theory of Finding Things Out: Don't
06:19:05 <CosmicRay> ask, because people will ignore you. Post wrong information instead, and people will
06:19:05 <CosmicRay> rush to correct you.
06:19:16 <Oejet> CosmicRay: So true.
06:19:57 <TheHunter> why's that pdf so big?
06:20:16 <basti_> uhm "these" megabytes
06:20:23 <Itkovian> don't ask.
06:20:37 <Itkovian> I glued them together using acrobat 'professional'
06:20:39 <boegel> how big is it actually ? I didn't check
06:20:41 <basti_> ugh
06:20:44 <CosmicRay> Itkovian: why?
06:20:52 <kzm> Hi
06:20:54 <CosmicRay> Itkovian: why not just use pdflatex to generate the thing?
06:21:02 <CosmicRay> boegel: 18MB
06:21:18 <ibid> it's quite hard to make a complete latex document from several subdocuments
06:21:23 <Itkovian> ok. well.
06:21:30 <Itkovian> a) I haven't got all the latex sources
06:21:43 <ibid> at least in the sense that the subdocuments can also be run separately through latex
06:21:47 <Itkovian> b) I have no idea how to include multiple bibiolgraphies in a single latex file
06:21:55 <Itkovian> (hmm maybe that's not true)
06:22:23 --- topic: set to '["Learning Haskell - http://haskell.org/learning.html","See logs @ http://meme.b9.com/cdates.html?channel=haskell","related channels #haskell.se #haskelldb #darcs","Haskell eZine! http://haskell.org/hawiki/TheMonadReader","http://haskell.org/cabal/","http://sequence.complete.org/","Haskell is the language of choice for discriminating hackers! - ICFP contest 2004","We put the Funk in Funktion" - first TMR issue ! "http://www.haskell.org/hawiki/' by boegel
06:22:35 <Itkovian> To all: I'll redo the stuff as soon as I get the Pugs source and I find the time
06:22:35 <boegel> damn, subject is too long :s
06:23:15 --- topic: set to '["Learning Haskell - http://haskell.org/learning.html","See logs @ http://meme.b9.com/cdates.html?channel=haskell","related channels #haskell.se #haskelldb #darcs","http://haskell.org/cabal/","http://sequence.complete.org/","Haskell is the language of choice for discriminating hackers! - ICFP contest 2004","We put the Funk in Funktion" - first TMR issue ! "http://www.haskell.org/hawiki/TheMonadReader_2fIssueOne" ]' by boegel
06:23:27 <boegel> like this then  (removed the Haskell eZine part)
06:23:50 <kosmikus> you could try combining the pdf's using pdflatex and the pdfpages.sty package; you don't need the sources in order to do this
06:24:19 <Itkovian> kosmikus: aha, I didn't know that. that means I can just include a pdf or what?
06:24:24 <kosmikus> right
06:24:27 <basti_> that would be disgusting though.
06:24:30 <Itkovian> aha.
06:24:54 <Itkovian> there seems to exist some discord on how to procees here.
06:25:03 <kosmikus> pdftk can also merge pdf's
06:25:23 <Itkovian> yes, but can it adapt page numbers?
06:25:37 <Itkovian> that was the main reason for trying it with the acrobat tool
06:25:44 <kosmikus> you can clip pages and generate your own pagenumbers
06:25:57 <kosmikus> but I'm not sure that's worth it in this case
06:25:58 * basti_ swallows
06:26:09 <kosmikus> basti_: what?
06:26:22 <basti_> would that measure be legal?
06:26:53 <basti_> I already had pains when i included muscial score by clipping existing ps files.
06:27:31 <basti_> i'm sure there is a law against clipping and redoing page numbers. It would break all references.
06:27:32 <kosmikus> we're talking about making an edition of a magazine here, and all the authors just submitted their articles to this magazine
06:28:14 <kosmikus> references are indeed problematic, which is why I just wouldn't touch page numbers
06:28:33 <boegel> people should just provide the latex sources, then the problems could be solved
06:28:42 <kosmikus> I mean, it would have been great to publish the magazine in one piece, but shapr decided against it because of the amount of work
06:28:42 <basti_> boegel: I agree.
06:29:32 <Itkovian> ok, but then provide actual tex code, not a yet-to-parse file to obtain tex
06:30:06 <basti_> I think TMR should either be done in latex, but then correctly & wholly, or as some "Website" thing, and with a possibility to print it decently
06:30:13 <Itkovian> and use the /chapter approach or something ... so the editor doesn't have to remove the crap at the top
06:30:44 <boegel> Itkovian: likewhat ?
06:31:11 <boegel> Itkovian: there was such a restriction, but apparently not everybody followed it
06:31:36 <Itkovian> well ...
06:31:39 <Itkovian> :-)
06:31:47 <kosmikus> why not just accept that they are single articles now?
06:32:01 <Itkovian> well ...
06:32:18 <basti_> I mean we dont have a choice do we? =)
06:32:21 <Igloo> Lemmih?
06:32:28 <basti_> but i would at least make this thing smaller
06:33:17 <Itkovian> yeah
06:33:18 <basti_> something has to be wrong with that size
06:33:30 <Itkovian> give me a few minutes, ok
06:33:32 <basti_> i would presume the title graphic was rendered in 9000x9000 dpi or something
06:33:38 <basti_> ok.
06:34:15 <Lemmih> Igloo: (TH question) It's not possible to figure out in which directory the current file is located, right?
06:34:53 <Igloo> Right
06:35:00 <Itkovian> maybe people should include the bbl contents in their file?
06:35:16 <CosmicRay> what basti said, the component articles should all be entered into one latex file, processed once
06:35:25 <CosmicRay> then there is nothing special to doing a pdflatex run
06:35:27 <Itkovian> basti_: the title page was made with OOffice.
06:35:36 <Itkovian> idd.
06:35:39 <kosmikus> CosmicRay: but all the articles have to be "compatible"
06:35:42 <CosmicRay> Itkovian: simple answer to that: export an eps, and stop using openoffice
06:35:51 <CosmicRay> kosmikus: is that really hard with latex?
06:35:56 <kosmikus> depends
06:35:57 <CosmicRay> (I am mostly naive about latex)
06:36:03 <CosmicRay> it's really easy to do with docbook
06:36:12 <kosmikus> I try to devise this style file, and I'm positively surprised that it actually got used
06:36:17 <Itkovian> Well, I exported as pdf.
06:36:24 <kosmikus> but there's one article that doesn't use it
06:36:29 <kosmikus> and I've not seen any of the sources
06:36:30 <Itkovian> 122536 Mar  1 11:48 tmr_title.pdf
06:36:33 <Itkovian> not that big, eh.
06:36:39 <CosmicRay> I have some manuals for software that include components that are also used to generate manpages
06:36:43 <CosmicRay> one sgml source for both
06:36:49 <boegel> kosmikus: yeah, that's a shame
06:36:58 <CosmicRay> kosmikus: who is the guilty party that didn't use it?
06:36:59 <boegel> I would make TMR 10x more fun to read
06:37:00 <basti_> sometimes a vector graphic would be rendered ("rasterized") during processing
06:37:16 <boegel> Itkovian: yaay
06:37:44 <CosmicRay> I'd suggest that docbook is easier to learn than latex too
06:37:52 <kosmikus> we could try to do better for the second issue, but I think shapr just decided to do web publishing only for nr 2
06:38:06 <kosmikus> CosmicRay: I disagree
06:39:23 <basti_> maybe we should use latex2html, and do the latex work later, for some kind of "digest"?
06:39:32 <Oejet> What about letting the authors wrestle, and the winner decides the input format for that issue.
06:39:48 * boegel greases up
06:39:52 <samc_> boegel, what did you have in mind?
06:40:02 <boegel> samc_: how do you mean ?
06:41:44 <kosmikus> well, if I get all the sources, and it's desired by the majority, I can try to make one LaTeX document out of them
06:42:37 <boegel> kosmikus: that shouldn't be too hard, once some proper things can be agreed upon
06:42:47 * boegel swears at Haskell import
06:43:03 <kosmikus> what do we have to agree on?
06:43:26 <boegel> ./HRayParser.hs:778: Data constructor not in scope: `Scene'
06:43:26 <boegel> module HRayParser (readDescr) where
06:43:26 <boegel> import HRayEngine (Scene, Resolution, Material, Diff(Solid,Perlin), Object, Light(AmbientLight, PointLight), Camera)
06:43:31 <boegel> it's right there you ass !
06:43:49 <boegel> kosmikus: the format of tex, what stuff should be used
06:43:56 <TheHunter> boegel, try Scene(..)
06:44:29 <boegel> TheHunter: why? Scene is a data constructor located in HRayEngine... just like the rest of them
06:44:35 <boegel> I really don't see the problem
06:45:10 <TheHunter> import HRayEngine (Scene) -- This imports the type constructor Scene, but not the data constructor, IIRC
06:45:23 <Itkovian> I've got a single document, anmd pdf, with everything but Pugs.
06:45:32 <Itkovian> Now some cleaning up.
06:46:11 <xerox> So, records are data types with selectors?
06:46:42 <samc_> boegel, re upping the fun factor
06:46:46 <boegel> TheHunter: okay, I see
06:46:51 <TheHunter> xerox, yes pretty much.
06:47:00 <xerox> TheHunter, nice, btw.
06:47:10 <boegel> samc_: oh, that was just on the fact that someone didn't use the provided stylesheet :)
06:47:26 <Itkovian> 295967 Mar  1 15:48 full.pdf
06:47:27 <Itkovian> :-)
06:47:33 <boegel> hehe
06:47:39 <Itkovian> nice, eh
06:47:49 <boegel> would it be lot's of work to adjust the Pugs thing to follow the TMR layout ?
06:47:51 <samc_> I see :)
06:48:26 <Itkovian> well, if I'd had the tex source ...
06:48:34 <Itkovian> @seen autrijus
06:48:34 <lambdabot> I saw autrijus leaving #haskell 20 hours 1 minute 26 seconds ago.
06:49:04 <boegel> hmm... does someone have his email ?
06:49:09 <kosmikus> Itkovian: how did you produce it now?
06:51:18 <kosmikus> is the pugs article TeX at all? doesn't look like TeX's paragraph breaking algorithm, or at least a global "sloppy"
06:52:04 <boegel> hmm... why didn't autrijus use latex then ?
06:52:55 <TheHunter> hmm, pdfinfo 01Overview.pdf
06:52:55 <TheHunter> Creator:        Word
06:52:55 <TheHunter> Producer:       Mac OS X 10.3.8 Quartz PDFContext
06:53:15 <nnunley> boegel:  A problem with creating named links.
06:53:48 <kosmikus> TheHunter: seems plausible
06:54:40 <kosmikus> should I convert it?
06:54:43 <Itkovian> kosmikus: I just cat *.tex *.bbl > full.tex
06:54:54 <Itkovian> a shame for Pugs ...
06:55:03 <Itkovian> I'd really love to get it in there.
06:58:03 <kosmikus> Itkovian: er, so you have only one bibliography? that's bad ...
07:00:05 <kzm> Did anybody else print the PDF of TMR?  And get peculiar results?
07:00:34 <Itkovian> kosmikus: nope, I have one per chapter.
07:00:37 <Itkovian> a sec.
07:01:10 <Itkovian> http://www.elis.ugent.be/~ageorges/full.pdf
07:01:57 <Itkovian> I'll mail autrijus
07:02:00 <kzm> (I got several runs of the first chapter, including title page, then the whole thing.  Viewing it in xpdf it seems normal.  Guess my printer has the hiccups)
07:02:02 <samc_> does some of the code in Hoste's article extend past the edge of the page for everyone?
07:02:24 <boegel> samc_: I believe think I fixed that...
07:03:08 <Igloo> Does anyone know what the deal is with ghc 6.4 creating .hi-boot files?
07:03:18 <boegel> Itkovian: the mail-adresses are gone ? and some of the layout has changed ?
07:03:31 <Itkovian> heyhey ... just got started ...
07:03:36 <Itkovian> don't shoot me.
07:05:15 <boegel> oh sorry, just asking :)
07:05:26 <Igloo> Ah, they're all in ghc/compiler/stage2. That's not such a problem then.
07:06:44 <samc_> boegel, not for me
07:07:28 <boegel> samc_: screenshot ?
07:07:37 <boegel> it was fine in the pdf I produced...
07:07:48 <boegel> unless I forgot something
07:09:38 <xerox> @index maybeToList
07:09:38 <lambdabot> Data.Maybe,Maybe
07:14:35 <boegel> samc_: is right... I wonder why shapr didn't mention it
07:14:40 <boegel> Itkovian: he's hereeeee !
07:14:46 <boegel> autrijus: stay :)
07:14:56 * autrijus freezes in midair
07:15:30 <autrijus> ok. now, what argument do you want from this poor serialized continuation? :)
07:16:20 <boegel> hey bourbaki
07:16:37 <bourbaki> hey
07:18:09 <Itkovian> yeah autrijus can you mail me the tex source for the Pugs article if you have it?
07:20:47 <autrijus> hey. I did it using Nvu.
07:20:48 <autrijus>  :-/
07:20:52 <kosmikus> Itkovian, autrijus: I've just converted the article; I still need an e-mail, and there are no links/references (links don't seem to work in the pdf either)
07:21:07 <kosmikus> URI: www.cs.uu.nl/~andres/TMR/Pugs.pdf
07:21:24 <autrijus> yeah, seems you need distiller to get hrefs in pdf
07:21:29 <autrijus> email is autrijus at autrijus dot org
07:22:13 <kosmikus> that is, if it's okay with you to use a converted document
07:22:18 <tromp> how many lines of haskell source is pugs?
07:22:18 <Itkovian> boegel: is this better? (check full.pdf)
07:22:43 <autrijus> kosmikus: yes.
07:23:00 <Itkovian> kosmikus: over here cklicking on references works it seems
07:23:13 <kosmikus> hmm
07:23:17 <xerox> What are the other instances of MonadPlus, beside Maybe and [] ?
07:23:25 <xerox> If there are any.
07:23:44 <autrijus> tromp: without counting parsec:
07:23:47 <autrijus>   4053  20036 135884 total
07:23:52 <autrijus> so, 4kloc
07:24:03 <autrijus> well, not really kloc, but you get the idea
07:24:19 <Cale> Do you possibly want http://arxiv.org/hypertex/ together with specifying -z on the dvips commandline?
07:24:24 <boegel> Itkovian: yes, but now the first article is in bold :|
07:24:33 <tromp> ah, not as bad as i feared:)
07:24:59 <autrijus> xerox: IO, Either error, any of R/W/S transformers, P, ReadP, ReadPrec
07:25:07 <kosmikus> Itkovian: for me, both acroread and xpdf don't show any links at all in the pugs article, except for blue underlined text
07:25:13 <xerox> autrijus, where did you find those? :)
07:25:39 <Itkovian> ah in pugs ...
07:25:46 <Itkovian> boegel:
07:25:49 <Itkovian> oos
07:25:58 <autrijus> xerox: in Control.Monad manual
07:26:02 <kosmikus> Itkovian: email address is included, sources are www.cs.uu.nl/~andres/TMR/Pugs.tex
07:26:04 <xerox> autrijus, thanks.
07:26:07 <autrijus> part of libraries/base/Control.Monad.html
07:26:21 <autrijus> if you'd like a list of hrefs, I can certainly grep it
07:26:37 <Itkovian> ok, corrected that
07:26:50 <Itkovian> kosmikus: ok!
07:26:54 <Itkovian> thx!
07:27:01 <autrijus> I'm fine with it without links, though, and put an "online URL" link as part of article instead
07:27:19 <TheHunter> @wiki MonadPlus
07:27:20 <lambdabot> http://www.haskell.org/hawiki/MonadPlus
07:27:28 <kosmikus> autrijus: if you give me an ordered list of links, I can merge them into the file
07:27:56 <autrijus> sure. a sec
07:28:04 <autrijus> you want both name and lnlinks
07:28:05 <autrijus> or just urls?
07:28:20 <kosmikus> just urls
07:28:20 <boegel> Itkovian: when you're done, some small stuff should be adjusted in my tex :$
07:28:50 <boegel> someone (*cough shapr) did not notice the fact that my code goes out of page bounds (I didn't notice either though)
07:29:05 <Itkovian> aaargh!
07:29:08 <Itkovian> lol
07:29:17 <Itkovian> boegel: I adjusted that?
07:29:34 <autrijus> kosmikus: http://wagner.elixus.org/~autrijus/urls.txt
07:29:41 <autrijus> kosmikus: thanks so much
07:29:50 <kosmikus> you're welcome
07:30:18 <boegel> samc_: said there were problems with it, and I'm having them too in my pdf
07:30:28 <Itkovian> ok, it's done
07:30:35 <boegel> see the last page of my article for example
07:30:58 <Itkovian> boegel: that looks ok? p 28
07:31:04 <xerox> TheHunter, nice url, thanks.
07:31:38 <Itkovian> now, how to get that front page in order ...
07:34:05 <boegel> Itkovian: ok, you fixed that, thanks :)
07:34:14 <boegel> I wonder what version samc_ saw then
07:34:20 <samc_> Itkovian, for me pages 8,10, and 12 of the individual pdf
07:37:40 <Itkovian> maybe I should send shapr the individual pdf ?
07:38:15 <boegel> Itkovian: is it fully done now ?
07:42:32 <Itkovian> boegel: i want to include the nice cover pic
07:42:50 <Itkovian> I am trying to hack the class, but I know crap about latex class files
07:42:56 <boegel> I saw it, that's the only thing missing
07:47:49 <Itkovian> musasabi: do you have another eps of the logo?
07:49:24 <samc_> Itkovian, you are looking for the logo eps?
07:51:46 <Itkovian> samc_ yes, but I';d rather have a pdf that gets rendered nicely
07:51:51 <Itkovian> who made that style file?
07:52:03 <Itkovian> How do I add the list of authors at the start?
07:52:19 <samc_> http://www.scannedinavian.org/~shae/tmr.eps
07:52:39 <Itkovian> that's the one I have
07:52:46 <Itkovian> and after esptopdf it;s ugly
07:53:07 <samc_> oh, it isn't here, I could send
07:54:45 <samc_> ?
07:56:11 <araujo> Good day
07:56:44 <Itkovian> ok, the authors are done.
07:57:05 <samc_> what's ugly about it, seems fine when translated to pdf by os x
08:00:27 <Itkovian> I gotta go.
08:00:46 <Itkovian> the full pdf is available at http://www.elis.ugent.be/~ageorges/full.pdf
08:00:50 <samc_> you don't want it?
08:01:00 <Itkovian> just got to adjust the logo
08:01:25 * samc_ must be invisible
08:04:51 <boegel> it looks really cool now
08:05:04 <boegel> samc_: he probably was in a hurry, he has to catch his train :)
08:05:46 <samc_> I don't know what he  was meaning anyway, doesn't look ugly :)
08:06:05 <boegel> no, it doesn't
08:07:38 * samc_ wonders if twas his viewer
08:11:42 <boegel> samc_: he was working in Windows, that was probably his problem :)
08:12:07 <samc_> that'd be it
08:12:27 <autrijus> the full pdf looks just fine.
08:14:07 <kosmikus> finally done with the links
08:14:21 <kosmikus> I hope Itkovian will be able to include them
08:14:39 <kosmikus> autrijus: maybe you can check www.cs.uu.nl/~andres/TMR/Pugs.pdf
08:15:38 <nnunley> Hrm.   Apocrypha in Greek didn't render correctly.
08:16:45 <autrijus> kosmikus: wonderful.
08:17:12 * Igloo fiddles about a bit and comes up with http://urchin.earth.li/~ian/tmr/
08:18:47 <metaperl_> Bromage is right: we dont have "literature" classes in computer science
08:18:57 <metaperl_> we dont read other's writings and analyze them
08:19:08 <kosmikus> nnunley: in which file?
08:19:10 <metaperl_> like any journalist or novelist learns to do
08:20:36 <nnunley> kosmikus: http://www.elis.ugent.be/~ageorges/full.pdf page 9
08:21:55 <nnunley> kosmikus:  The link you've put up is fine.
08:22:48 <kosmikus> right, it's a type3 font in his document
08:23:07 <kosmikus> also, something's wrong with the page style; page numbers only on the title pages ...
08:26:51 <samc_> apocrypha in greek looks ok to me
08:27:39 <kosmikus> it's probably ok if you use acroread >= 6
08:27:45 <kosmikus> or xpdf
08:27:47 <kosmikus> or gv
08:31:49 <jlouis> mmmr tmr
08:41:54 <metaperl> the program to permute a list at the very bottom of this page: http://pleac.sourceforge.net/pleac_haskell/arrays.html
08:41:58 <metaperl> doesnt seem to be haskell
08:42:07 <metaperl> permut (x:xs) = xs.permut.map (insert x).concat
08:42:07 <metaperl>     where insert x []     = [[x]]
08:42:07 <metaperl> 	  insert x (y:ys) = (x:y:ys) : map (y:) (insert x ys)
08:42:21 <metaperl> xs.permut.map
08:42:26 <metaperl> does not seem like Haskell syntax
08:42:56 <xerox> @type permut
08:43:03 <lambdabot> bzzt
08:43:05 <xerox> @index permut
08:43:05 <lambdabot> bzzt
08:43:12 <xerox> Whoops :)
08:43:27 <Igloo> That's the page of the guy who redefined (.) isn't it?
08:43:28 <xerox> metaperl, `.' is function composition, btw
08:43:39 <xerox> I should shut up..
08:43:44 <metaperl> xs is a list
08:44:51 <xerox> `.' seems to be something like python's `.'
08:45:20 <xerox> (i.e. A way to access propeties and methods)
08:46:01 <metaperl> yes, I dont know why it is in the haskell solutions
08:46:40 <tromp> permuting can be done more easily as
08:46:47 <tromp> permute l = foldM (\s _->[a:s|a<-l\\s]) [] l
08:46:49 <CosmicRay> has anyone else seen this:
08:46:51 <CosmicRay> http://drupal.org/node/17680
08:46:53 <CosmicRay> err
08:46:55 <CosmicRay> wrong window sorry
08:47:01 <xerox> tromp, what's `\\' ?
08:47:09 <tromp> list exclusion
08:47:16 <xerox> @type (\\)
08:47:17 <lambdabot> bzzt
08:47:23 <xerox> @index (\\)
08:47:23 <lambdabot> bzzt
08:47:33 <Cale> @type \\
08:47:35 <lambdabot> bzzt
08:47:37 <xerox> List comprehension syntax?
08:47:38 <Cale> @index \\
08:47:39 <lambdabot> Data.List,List
08:47:40 <bringert> hmm, the code on that pages doesn't seem very haskelly to me
08:47:48 <xerox> @type List.\\
08:47:49 <lambdabot> bzzt
08:47:54 * bringert should learn english
08:47:59 <Cale> @type List.(\\)
08:48:00 <lambdabot> bzzt
08:48:03 <Cale> blah
08:48:04 <xerox> Cale, :\
08:48:11 <metaperl> tromp, that solution is nosebleed for me...
08:48:14 <Cale> It's [a] -> [a] -> [a]
08:48:23 <xerox> What does it do, btw?
08:48:31 <Cale> it's list subtraction
08:48:33 <metaperl> i'll create some specific questions after I play with it a bit
08:48:45 <Cale> (like set subtraction, but preserves order)
08:48:48 <xerox> Cale, ah, now I got it.
08:49:11 * xerox notes up permute
08:49:22 <Cale> oh, I suppose it's really (Eq a) => [a] -> [a] -> [a]
08:50:16 <metaperl> permute.hs:3: Variable not in scope: `\\'
08:50:24 <metaperl> import Monad
08:50:25 <metaperl>  
08:50:25 <metaperl> permute l = foldM (\s _->[a:s|a<-l\\s]) [] l
08:50:31 <xerox> metaperl, import List, I think.
08:50:37 <Cale> import List, yes
08:50:40 <metaperl> no Monad eliminated the eror
08:50:45 <metaperl> List?
08:50:51 <xerox> lambdabot, liar!
08:50:52 <tromp> import Data.List
08:50:52 <tromp> import Control.Monad
08:50:52 <metaperl> zvon.org shows foldM in Monad
08:51:02 <Cale> metaperl: \\ is defined in List
08:51:20 <metaperl> wow, now it works
08:51:29 <xerox> tromp, what's the O() complexity of that function?
08:51:51 <tromp> prolly O((n+1)!)
08:52:35 <tromp> which is the output size
08:52:41 <xerox> Ouch.
08:53:03 <tromp> or at most a factor n more...
08:53:21 <xerox> Will permute [1..10] ever finish?
08:53:28 <tromp> of course
08:53:38 <tromp> ever take a long time:)
08:53:55 <xerox> ^C ^C ^C
08:54:18 <tromp> permute [1..20] will run out of memory though:(
08:54:47 <tromp> considering the output length is 20!=2432902008176640000
08:55:00 <Cale> length (perms [1..10]) finishes okay
08:55:08 <tromp> 3628800
08:57:20 <xerox> Why foldM btw?
09:00:53 <tromp> i just learned it the other day, and it works well for this sort of thing
09:01:15 <tromp> essentially its a variable depth comprehension
09:02:22 <tromp> each perm is [] with succesive unused elements consed in front
09:02:30 <tromp> which is what the foldM expresses
09:03:24 <tromp> it doesn't use the depth argument though
09:03:41 <xerox> I'm reading nomaware's monad tutorial, pressed pgdown two times ans saw `foldM', I'll see :D
09:03:50 <xerox> *and, even
09:07:56 <samc_> in the spirit of Bromage's article: perm xs = concatMap (\n -> ((xs `elemNum` n):) `map` (perm (xs `saveElemNum` n))) [1..length xs]
09:21:01 <samc_> that's about as 'natural' as I can get, not that I totally agree with the article
09:22:10 <Philippa> I actually quite like the foldl definition of reverse
09:22:21 <Philippa> you've got to understand foldl well, but if you do it's really quite elegant
09:22:27 <samc_> it's a matter of sophistication
09:23:08 <Philippa> "we reverse the list by turning all the conses the other way round" :-)
09:23:59 <samc_> when you put it like that
09:24:01 <samc_> ...
09:24:15 <xerox> rev = foldl (\x y -> y:x) []
09:25:03 <xerox> or rev = foldl (flip (:)) []
09:27:27 * samc_ hates coming up with function names
09:27:45 * xerox hides
09:27:59 <xerox> That was cut&paste from ghci buffer, pardon.
09:30:03 <samc_> i guess withoutElemNum would be better. See I can't stop fiddling with them :p
09:34:31 <Philippa> an upside-down !! would work? :-)
09:38:03 <samc_> ii?
09:39:52 <Philippa> yeah, you could use it prefix that way too
09:40:19 <Philippa> list `ii` 4, etc etc?
09:41:58 <samc_> :)
09:42:15 <Nioate> why can't you use upside down ! as an operator
09:42:26 <desrt> ¡¿
09:43:19 <Philippa> Nioate: if you can find an implementation that actually accepts unicode source files, you can
09:50:12 <mflux> bjarne is way ahead of you with whitespace overloading.
09:51:31 <gzl> bjarne? stroustrup?
09:52:00 <mflux> yes
09:53:57 <wagle> wha?
09:54:20 <mflux> read all about it in the "generalizing whitespace" white paper: http://www.research.att.com/~bs/whitespace98.pdf
09:54:30 <mflux> whops, s/whitespace/overloading/
09:54:47 <gzl> wtf, generalizing whitespace?
09:54:53 <gzl> oh,  haha
09:55:01 <wagle> http://www.research.att.com/~bs/overloading98.pdf
09:55:03 <wagle> ?
09:55:28 <sorje> is there a filter that works like "filter doesFileExist dirlisting"?
09:56:00 <wagle> i dont find the paper
09:56:01 <mflux> no, s/a/b/ matches only the first 'a', the url is real ;)
09:56:03 <mflux> hmm
09:56:18 <mflux> I could just 'wget' that url
10:00:31 <wagle> first was the url, unless you think you are a computer
10:00:47 <Philippa> sorje: filterM
10:03:35 <sorje> great, thanks!
10:04:09 <Philippa> the Monad module's got a pile of monadic versions of list functions, it's worth a look through docs for it
10:07:25 <samc_> gotta go, don't have too much fun without me
10:10:30 <shapr> I have an HSQL question, I'm building on redhat fedora core 2. When I run make I get errors from hsc2hs. Works fine on my local debian system though.
10:10:53 <shapr> well, not fine, but it gets further :-)
10:11:09 <shapr> Can anyone else build HSQL from HToolkit cvs?
10:12:57 <bringert> shapr: trying now...
10:13:06 <shapr> Yay, thanks.
10:14:18 <bringert> works so far...
10:14:24 <shapr> Strange thing is that debian/unstable gets further than redhat fc2
10:14:29 <shapr> hm
10:14:31 <xerox> ve
10:14:43 <bringert> I had a problem a while ago, turns out I had too old a version of MySQL
10:14:49 <bringert> client headers that is
10:14:59 <bringert> ok, build fine
10:15:45 <shapr> I've only enabled postgresql. Does HSQL require a certain version of pg?
10:16:00 <bringert> dunno
10:16:23 <bringert> I've got postgresql-devel-7.4.5
10:17:30 <TheHunter> cool, ghci-6.4 doesn't discard the environment on a recompile failure. That's a serious improvement!
10:17:55 <shapr> I have pg-dev 7.4.7 in fc2
10:22:21 <shapr> aha
10:24:08 <stepcut> cripe, some crazy guy as 1497 active credit cards
10:24:33 <metaperl_> stepcut, are you a perl monk?
10:24:35 <shapr> veni, vidi, visa?
10:24:35 <stepcut> his combined credit limit is $1,700,000
10:24:46 <stepcut> metaperl_: I have never written a perl program
10:25:00 <mflux> how about combinet monthly fees, not counting the interest/money spent?-)
10:25:01 <stepcut> metaperl_: more like a perl amish
10:25:05 <metaperl_> oh, I think someone at perlmonks.org is named stepcut... I though I knew you from somewhere
10:25:09 <metaperl_> amish. hahah
10:25:46 <stepcut> mflux: I don't think he signs up for ones that have annual fees, and he always pays off in full
10:26:34 <stepcut> sadly, only one company has declined to give him a card because he had too many (and that was in the 70's when he had only 100)
10:26:47 <mflux> I wonder if there are any mechanisms in place to alert when the guy maxes all his cards and books a flight to africa..
10:27:07 <metaperl_> Kobe Bryant has a single credit card with 3 million dollars on it
10:27:43 <metaperl_> i've heard of people taking out a 2nd mortgage on an expensive house and then returning to China
10:28:45 * stepcut wonders if it is one of those black amex cards
10:29:23 <shapr> http://www.unhappybirthday.com/ - Is Singing Happy Birthday in Public Really Copyright Infringement? - Yes.
10:29:36 <stepcut> shapr: but humming it is not!
10:30:15 <shapr> Just remember, you can't use those copyrighted words.
10:30:17 * Philippa should've taken out more of the credit cards she was offered during her first year or two at uni
10:30:26 <Philippa> not to /use/, just to let the credit limit build up
10:30:42 <stepcut> Philippa: yeah, those cards have crappy rates
10:31:34 <Philippa> yep. As it is the limit on the one card I've got's pretty scary for somebody who's never worked though
10:31:36 <stepcut> imagine moving and having to update your mailing address for 1497 credit cards...
10:32:50 <stepcut> Philippa: one of my friends is named, ethan eugene eves, and his dad is eugene e eves -- when he was 19 and living at home, he used to get credit card offers with $100K limits
10:33:04 <Philippa> fun
10:33:18 <Philippa> no doubt they'd have sued for fraud if he'd taken them up on one?
10:34:06 <stepcut> only if he didn't pay it off -- which is very likely ;)
10:41:21 <Lemmih> @karma Lemmih
10:41:21 <lambdabot> You have a karma of 0
10:41:56 <Lemmih> lambdabot doesn't save karma setting to disk?
10:42:06 <jlouis> nopes
10:42:11 <jlouis> karma is not persistent
10:42:13 <wagle> @karma
10:42:13 <lambdabot> I can't find the karma of nobody.
10:42:17 <jlouis> so it is not usable
10:42:18 <wagle> @karma wagle
10:42:18 <lambdabot> You have a karma of 0
10:42:33 <wagle> waugh!  all my karma...  GONE!
10:42:47 <wagle> </tangent>
10:49:03 <jhunZoa> hey
10:49:10 <Lemmih> Yo
10:49:20 * wagle neighs
10:50:31 <jhunZoa> man mister swierstra had no mercy for us :|
10:52:49 <wagle> ?
10:53:47 <jhunZoa> only 39 out of 150 students passed this exam
10:53:55 <jhunZoa> and all u guys think he is god
10:54:18 <wagle> dont gods like lightning bolts?
10:54:59 <jhunZoa> only zeus
10:55:04 <jhunZoa> not swierstra
10:55:17 <jhunZoa> he likes to throw negative results
10:55:40 <wagle> negative charge == electrons..
10:55:49 <wagle> charge differentials...
10:56:09 <jhunZoa> for that reason i quit physics and chemics~
10:56:19 <jhunZoa> dont need to care about that stuff anymore :P
10:56:49 <wagle> if you'd cared, you'd have properly grounded yourself
10:57:00 <wagle> if you'd cared, you'd have known to properly grounded yourself
10:57:15 <jhunZoa> maybe ye
10:57:32 <wagle> *<8-)
10:58:12 <shapr> Being well grounded does make you especially attractive to lightning bolts though.
10:58:31 <shapr> So, anyone here able to build HSQL on redhat fedora core 2?
10:58:31 <wagle> i said "properly"
10:58:48 <wagle> fedora core 2 is so... 2004's
10:58:59 <shapr> It's also what my client has installed.
10:59:16 <shapr> And since they're paying me to install this Haskell webapp, I really want to get it working.
10:59:25 <wagle> does it give you any error messages?
10:59:55 <shapr> yes, hsc2hs gives errors on HSQL.hsc, which implies that one of the includes is missing, but I can't figure out what
11:00:40 <wagle> might try a hsql version that coincides with the age of fc2?
11:00:56 <Heffalump> is there an easy way to get the bit representation of a Float?
11:02:02 <Igloo> decodeFlat or somesuch I think
11:02:10 <shapr> @index decodeFloat
11:02:11 <lambdabot> GHC.Float,Prelude
11:02:20 <Heffalump> that gives an Integer and an Int
11:02:22 <Igloo> Well, that gives you the two parts as ints of some sort
11:02:32 <Heffalump> ok, so I still have to do the bit fiddling with those
11:02:40 <shapr> http://www.scannedinavian.org/~shae/src/haskell/Banana.html
11:02:42 <Heffalump> I'm lazy, was hoping for easier :-)
11:02:55 <Heffalump> (e.g. "unsafeCoerce to Int is safe enough" :-)
11:03:08 <Igloo> You could do something nasty with the FFI
11:03:25 <Igloo> Assuming sizeof Int == 32  :-)
11:03:43 <Heffalump> hmm, maybe I'll be good..
11:04:14 <wagle> Integer -> [Bit] should be easy
11:04:57 <Heffalump> wagle: yeah, I've got that
11:05:34 <Heffalump> but there's handling the exponent offset, and dealing with annoyances like the sign bit being before the exponent, and the leading 1 being omitted from the mantissa
11:07:07 <wagle> i never paid much attention to modern floating point formats..  but if the float is normalized, the leading 1 seems redundant to actually store
11:07:19 <Heffalump> precisely.
11:07:27 <wagle> i imagine that the floats should always be normalized..
11:07:34 <shapr> http://www.scannedinavian.org/~shae/src/haskell/IEEEDouble.html ?
11:08:08 <wagle> why do you want to twiddle the bits?
11:08:12 <metaperl_> is there a term for what the comma is doing in the first guard clause here:
11:08:13 <metaperl_> juncTypeIs v ts
11:08:13 <metaperl_>     | (VJunc j) <- v    , juncType j `elem` ts    = Just j
11:08:13 <metaperl_>     | otherwise    = Nothing
11:08:24 <CrewdenX> wagle: ieee has something called subnormals iirc, which bridge the gap between the lowest normal represtation and 0
11:08:43 <Heffalump> shapr: ta
11:08:47 <Heffalump> wagle: long story
11:08:49 <metaperl_> it seems to be sequencing the comprehension of v into j before running the boolean evaluation
11:10:14 <metaperl_> does anyone have any feedback on what comma is doing?
11:10:25 <metaperl_> it seems to sequencing things
11:10:28 <metaperl_> hi mjd!
11:10:40 <metaperl_> juncTypeIs v ts
11:10:40 <metaperl_>     | (VJunc j) <- v    , juncType j `elem` ts    = Just j
11:10:40 <metaperl_>     | otherwise    = Nothing
11:10:41 <yrlnry> Hi!
11:10:47 <yrlnry> How are you?
11:10:51 <metaperl_> oh pretty good
11:11:06 <metaperl_> just documenting some of the perl6 implementation
11:11:09 <yrlnry> I am pretty glad to hear that.
11:11:12 <bringert> metaperl_: it's used to separate pattern guards
11:11:18 <bringert> as in list comprehensions
11:11:45 <bringert> hmm, that should be worded better
11:12:41 <metaperl_> I see what it is doing. I just didn't know what it was called.
11:12:57 <bringert> the Haskell 98 Report calls "(VJunc j) <- v" and "juncType j `elem` ts" qualifiers
11:13:39 <bringert> qualifiers are generators, guards or local bindings
11:14:12 <metaperl_> so comma is ANDing the qualifiers
11:14:42 <bringert> well, if the qualifiers are all guards (i.e. something of type Bool), then yes
11:15:03 <bringert> if they are generators or bindings, you can't really say that
11:15:56 <metaperl_> the full table of contents for the online report does not mention the word qualifiers
11:16:05 <metaperl_> http://www.haskell.org/onlinereport/index98.html
11:16:18 <bringert> section 3.11 talks about list comprehensions
11:16:27 <bringert> pattern guards are not in haskell 98, iirc
11:16:52 <bringert> http://www.haskell.org/ghc/docs/latest/html/users_guide/syntax-extns.html#PATTERN-GUARDS
11:18:38 <bringert> I don't know if you can call them qualifiers, pattern guards seems to be the term to use, both for the concept as a whole, and for the comma-separated pieces
11:22:31 <metaperl_> ok bringert thanks. I got carried away reading SimonPJ's webpages :). Now I'm back. I will read that section
11:28:26 <shapr> Aha! hsc2hs left out its own include! wtf?
11:31:55 <ikegami--> hello
11:32:05 <ikegami--> I noticed the first Monad Reader
11:32:08 <ikegami--> excellent
11:34:02 <Oejet> ikegami--: "Excellent", Mr. Burns style?
11:34:31 <ikegami--> aha, I dont know about Mr. Burns
11:34:44 <ikegami--> I would like to say that it is a great work
11:35:04 <Oejet> ikegami--: The director of the powerplant in The Simpsons.
11:35:39 <ikegami--> =:-)
11:40:35 <gzl> huh
11:40:37 <gzl> this is weird
11:40:44 <gzl> so I imported this module
11:40:56 <gzl> it lets me use one variable from it, but not another (says it's not in scope)
11:40:59 <gzl> what could that be about?
11:41:18 <Lemmih> The module doesn't export it, perhaps?
11:43:44 <gzl> hmm. let's see.
11:43:47 <gzl> you're probably right.
11:43:53 <gzl> indeed!
11:43:55 * gzl bangs head against wall
11:44:01 <_JusSx_> where can i find a good book for learning haskell?
11:44:11 <humasect> print google
11:44:23 <Lemmih> The library? A book store?
11:44:24 <humasect> er, functional book relating to haskell..
11:44:38 <humasect> "the art of functional programming" i think is its name.
11:45:22 <_JusSx_> thanx
11:47:01 <gzl> also Haskell School of Expression
11:51:30 <shapr> Are DSLs a special case of partial evaluation?
11:52:24 <shapr> I had a strange thought today at lunch. Our culture will have truly changed when high schools exhibit the Nash equilibrium.
11:52:51 <Oejet> shapr: Go deeper, please.
11:53:53 <shapr> Partial evaluation in the direction of a particular application seems like the same thing as as DSL for that application.
11:55:04 <shapr> Partial evaluation is sort of like partial application executed, yes?
11:55:22 <shapr> y0 pesco
11:55:32 <pesco> y0 shapr
11:55:34 <Igloo> no
11:55:40 <shapr> Igloo: what's the difference?
11:55:50 <Igloo> Partial application does no evaluation
11:55:51 <bringert> pesco: nice article
11:55:52 <Oejet> shapr: I was thinking about that Nash equilibrium.
11:56:02 <pesco> bringert: Thanks. ;)
11:56:11 <wagle> i think of DSL's more in terms of what tools the programmer is given than in how the tools operate
11:56:22 <shapr> Igloo: ok, so if partial application did evaluation, it would be partial evaluation? Sounds obvious when I put it that way.
11:56:37 <bringert> gave me some motivation to fix the docs and code too
11:56:47 <pesco> bringert: Cool. :)
11:57:16 <Igloo> Partial evaluation also implies compile-time (or some other stage) to me
11:57:19 <shapr> wagle: Maybe finding opportunities for partial evaluation can lead to a good DSL design?
11:57:19 <wagle> i think of partial evaluation as normalization, but only some of the redexes can trigger
11:57:53 <shapr> Igloo: ok, partial application plus TH equals partial eval?
11:57:58 <wagle> those in the know think of it as being different than normalization
11:58:48 <wagle> there is on-line and off-line partial evaluation
11:58:57 <shapr> ?
11:59:16 <wagle> (throwing out google keywords)
12:00:00 * stepcut finally orders a new hard drive and dvd burner
12:00:40 <wagle> i sorta gave up on partial evaluation because i seem to just confuse charles consel
12:01:18 <shapr> neat - http://partial-eval.org/
12:02:25 * stepcut reads http://partial-eval.org/
12:02:30 <Oejet> If I have a firewall with all the ports stealthed then it cannot be broken through, right?
12:03:03 <shapr> It can still be broken through.
12:03:16 <shapr> If you make outgoing connections, that is.
12:03:28 <wagle> ip over dns
12:03:54 <xerox> While ago I happened to ask if partial application is something like the lazy evaluation of functions, does it make sense?
12:04:17 <wagle> more "over eager" evaluation
12:04:23 <shapr> I did learn about bubble packets recently, that's fascinating stuff. You can get two NAT'd boxes to talk to each other directly.
12:04:38 <xerox> Bubble packets?
12:04:59 <shapr> Requires that they can each reach a server that can introduce them, though.
12:05:04 * wagle thinks more more lazy and PEval
12:05:29 <wagle> more aboug
12:05:32 <wagle> more about
12:06:04 <Oejet> shapr: If I only make outgoing connections with SSH to some secure server.  I mean can a stealthed computer be DDOS'ed giving some buffer overflow or something?
12:06:18 <wagle> the classic pe example is the exponentiation function
12:07:56 <wagle> Oejet: any machine >you< connect to can possibly hack you
12:08:14 <shapr> Oejet: Stealth doesn't beat DDoS. DDoS can flood your next hop instead of you. Also, if someone can snoop on your traffic, they may be able to brute force your sequence numbers and stuff fake packets into the channel coming back to you.
12:08:16 <wagle> even via ntp, dns, etc
12:08:17 <Oejet> Even IRC. =-O
12:08:37 <wagle> especially irc..  8/
12:09:04 <shapr> On the other hand, it's easy enough to created 'fatal' chaff packets to get around snoopers.
12:09:15 <Oejet> So I shouldn't be clicking those barbieandken.jpg that are offered to me from time to time?
12:11:24 <wagle> the main problem with dereffing urls in spam is that they find out that you read the spam, and up your "spam victim" rating
12:12:10 * shapr just deletes spam
12:12:16 <wagle> i suppose some of them are trying to get jpg >programs< inside your perimeter, where they can escape
12:12:49 <shapr> Actually, I am extremely frustrated with push email. I would stop using email entirely if there were some way I could do business without it.
12:12:54 <wagle> some mail reader like dereffing urls in spam..
12:13:23 <PerlJam> shapr: SPF and other such technologies don't help?
12:13:32 <wagle> spf?
12:13:38 <PerlJam> wagle: spf.pobox.com
12:13:39 <shapr> My clients don't use SPF, sadly.
12:13:48 <PerlJam> shapr: make them!  :)
12:14:24 <shapr> I think the solution is to dump the push system and get something more like an RSS feed with tiny notifys.
12:16:25 <wagle> not sure what that means, but i got the image of mail being stored on the sender end until the receiver human says "send it!"
12:16:28 <shapr> Oejet: Geeky kids are the most tortured. Popular kids torture others to seem cool, and it's all done just to redirect attention away from self.
12:16:36 <shapr> wagle: you got it right.
12:16:46 <ibid> hmm, i wonder if one could do polyphonic haskell
12:17:42 <shapr> Oejet: I will claim our culture truly changed when the cooperative patterns in OSS reach the western culture at that level.
12:18:13 <wagle> shapr: two edged sword..  spammers would have to steal more disk and bandwidth, but would get better feedback about who actually exists
12:18:45 <shapr> wagle: http://www.scannedinavian.org/~shae/antispamserver.html
12:20:07 <wagle> "Spammers grab more zombies"
12:20:32 <shapr> I think the greatest advantage is that the true audience of spammers (internet newbies, mostly clueless people?) don't check their mail that often, and so would get dramatically less spam.
12:21:06 <shapr> Zombies would have to change IP to escape blacklists, but changing IPs would mean they would not be able to deliver their spam.
12:22:16 <zamez> mmm, brains
12:22:17 <wagle> each ip address is a possible zombie..  zombies dont move
12:23:05 <wagle> a zombie is a canon-fodder system that i take over until the heroes blow it up
12:23:25 <wagle> its expendable
12:23:54 <shapr> But it only works because the receiver and system bear the cost of transporting the message.
12:24:42 <wagle> i had fun in warcraft playing a necromancer with "turn fallen enemies into zombies that fight for me"..  really cool when i could maintain the chain-reaction, and maintain or grow my army through the entire battle
12:25:54 <wagle> but you leak information that the spammer wants when you do probe for the message
12:26:34 <wagle> i dont think the notification gives you perfect information about the desirability of the message
12:27:15 <shapr> juhp: I think hsc2hs that comes with the ghc622 rpm is broken.
12:27:35 <zamez> I don't think it's much of an improvement, blacklisting the spammers' request-email servers is no easier than blacklisting current spam senders
12:28:19 <wagle> wli is getting slammed by spam, and has to continually adjust the ip blockage lists
12:28:23 <shapr> But, if a spam gets into the system, it reaches recipients without blacklists.
12:29:22 <shapr> if a notify gets into the system, and a zombie is found and killed, or changes IPs before the notify is evaluated, that spam doesn't reach a recipient.
12:29:31 <wagle> i dont think spammers get any feedback from my receiving email
12:30:40 <wagle> in fact, i get spam with multiple recipients, some of who havent existed for 5 years
12:30:55 <shapr> Of course, the easiest solution is to break into the windows update servers in Redmond and have sp5 install Linux.
12:31:12 <zamez> :>
12:31:22 <wagle> how would that help?
12:31:46 <shapr> The real problem is that win32 has all the security of a screen door.
12:32:17 <wagle> who runs win32?
12:32:25 <zamez> zombies
12:32:26 <shapr> zombies.
12:33:28 <CosmicRay> shapr: I disagree.
12:33:32 <CosmicRay> shapr: I screen door keeps out parasites.
12:33:37 <wagle> the zombies i'm familier with are mostly linux machines
12:33:41 <CosmicRay> shapr: plus bloodsuckers and leeches.
12:33:48 <shapr> Unpatched win32 boxes when attached to the internet directly have a survival time of about nine minutes.
12:34:05 <CosmicRay> patched ones aren't necessarily all that much better
12:34:20 <wagle> win32 is "pre win95"?
12:34:31 <shapr> no, it includes all microsoft OSes.
12:35:04 <wagle> xp is win32?
12:35:19 <shapr> yup
12:36:08 <wagle> your definition of the word "win32" seems non-standard to me, but what do i know?
12:36:25 <Heffalump> all current MS OSes
12:36:40 <Heffalump> win95 and onwards, and the entire NT/2K/XP line
12:37:14 <Oejet> wagle: It's just Windows for 32bit machines, I guess.
12:37:16 <wagle> whats the lifetime of a "initial version" linux system?
12:37:22 <Igloo> There was a win32 patch or something for 3.11 and possibly earlier, wasn't there?
12:37:39 <Philippa> wagle: win32*s* is the pre win95 thing you're thinking of
12:37:40 <CosmicRay> win32 is the API that started with Windows NT
12:37:42 <CosmicRay> 32-bit only
12:37:50 <CosmicRay> the API is roughly equivolent to POSIX
12:37:55 <Philippa> right. Remembering that NT predates 95
12:37:57 <CosmicRay> the origins of which predate Linux itself
12:38:11 <shapr> wagle: about three months.
12:38:17 <CosmicRay> err, win32 is not roughly equivolent to posix.  I'm just saying that its concept is.
12:38:44 <CosmicRay> most of the APIs used in Linux were fixed well before 1990.
12:38:50 <shapr> wagle: oh, my info is out of date - http://www.techweb.com/wire/security/54201306
12:38:53 <CosmicRay> some well before 1980 even.
12:39:01 <wagle> (interestingly enough, a wuftp i installed in jan 1995 after a breakin (and subsequent barrage of re-breakin attempts) is still running..  )
12:39:41 <wagle> CosmicRay: linux dates from after 1990
12:40:02 <CosmicRay> wagle: I am aware of that.
12:40:10 <CosmicRay> wagle: linux implements APIs that were developed before it existed.
12:40:26 <CosmicRay> wagle: just line wine implements win32 API that was developed before it existed.
12:40:51 <wagle> aww..  they finally retired my ftp server...
12:40:57 <ibid> did you know that the 16-bit winapi is an ecma standard? :)
12:41:04 <Philippa> heh
12:41:09 <CosmicRay> wagle: my point is that one can't hold up the age of the win32 api as an excuse for microsoft
12:41:21 * ibid has the standard at work
12:41:29 <CosmicRay> wagle: since by the point that the win32 api began, the *nix api already existed for years and has worked out a lot better.
12:41:37 <CosmicRay> ibid: I didn't know that.  weird.
12:41:44 <Philippa> the combination of its age and the fact it at least partly is meant to look like win16 is responsible for a lot of how dire it is though
12:42:01 <wagle> i probably need to go eat lunch..
12:42:08 <CosmicRay> Philippa: I don't buy the age argument at all.  I do buy the unwillingness to correct lack of foresight in the past.
12:42:45 <CosmicRay> Philippa: the history of the APIs set forth in POSIX dates back far longer, and while they are crufty at places, don't have the widespread confusion and holes that you find in dinwos
12:42:48 <CosmicRay> windows
12:43:44 <Philippa> a lot of the confusion in windows as it stands is because it's had functionality implemented via three or four APIs, with the legacy APIs eventually being written in terms of the current one
12:45:02 <wagle> the solid security research i see comes out of microsoft research
12:45:28 <Heffalump> that's cos they've bought it
12:45:54 <Heffalump> (in the sense of offering deals that lured many of the best researchers to them)
12:46:02 <Oejet> The solid Haskell reseach too. :-P
12:47:19 <wagle> problem is not about future security of ms software, but rather "security for who?"..  for the purported owner or for microsoft and their cronies?
12:49:02 * wagle gets tired of advocating for the devil, and goes for lunch
12:50:46 <shapr> The least politically correct thing I've said in recent years compares windows users to the wives of alcoholics.
12:51:16 <monochrom> Haha
12:51:29 <shrimpx> microsoft doesn't bother me at all... i'd probly strongly consider working for ms research if i had the opportunity
12:51:54 <monochrom> microsoft research is different
12:52:24 <shrimpx> haha
12:52:25 <shrimpx> ok
12:52:34 * Heffalump has worked for microsoft :-)
12:52:43 <monochrom> actually microsoft itself doesn't bother me either.
12:52:56 <alexj> if I have a set of functions that all return values of diferent types but these types are all instances of the same class, is there a way to pass around a list of them?
12:53:03 <shrimpx> their software has no impact on my day to day activities
12:53:15 <Heffalump> it bothers me, I just have few principles
12:53:21 <Heffalump> that can't be bought, that is
12:53:38 <shrimpx> haha
12:53:54 <alexj> I guess this question reduces to how does one produce existentially quantified lists?
12:54:00 <shrimpx> the question is, would it make me a lot of money? then i'll work for them
12:54:33 <Philippa> alexj: you produce an existentially quantified datatype then make a list of that
12:54:44 <wagle> hlists?
12:55:25 <alexj> ok, so lets assume instead that I am writing an HTTP server and have a getResult function that returns different types depending on the request path.
12:55:37 <alexj> the server takes care applying toMessage to each of those types.
12:56:18 <alexj> do I have to give getResult an explicit existentialy quantified type (because typeinference won't infer it)?
12:56:42 <TheHunter> alexj, you even have to wrap it into a datatype.
12:56:47 <TheHunter> @wiki ExistentialTypes
12:56:48 <lambdabot> http://www.haskell.org/hawiki/ExistentialTypes
12:57:34 <alexj> I have to wrap the function in a type?
12:57:52 <TheHunter> assuming you want existentials.
12:58:29 <alexj> would it work if I just gave the function an explicit type?
12:58:35 <gzl> is there any way of simplifying the following?
12:58:44 <TheHunter> no, there is no exists quantifier.
12:59:05 <gzl> case s of "a" -> [case on Nothing/Just], "b" -> [case on Nothing/Just], etc
12:59:32 <gzl> it's not sequencing a bunch of Maybes
12:59:52 <gzl> so I wasn't sure if there was some obvious way to exploit Maybe being a monad
12:59:57 <jhunZoa> is it good practice in haskell to have a counter as parameter?
12:59:58 <autrijus> catMaybes ?
12:59:59 <autrijus> mplus?
13:00:10 <TheHunter> gzl, using ghc and willing to use a ghc only extension?
13:00:26 <gzl> TheHunter: can't, but what is it?
13:00:40 <monochrom> case (s,x) of ("a", Just blah) -> ... ; ("a", Nothing) -> ... ; ("b", Just blah) -> ... ; ("b", Nothing) -> ... ;
13:00:51 <monochrom> Does that look better?  I don't know, just a suggestion.
13:01:01 <gzl> hmm
13:01:16 <gzl> yeah, that's better. at least i don't have nested cases
13:01:17 <TheHunter> gzl, pattern guards (just, if monochrom's solution is not general enough)
13:01:46 <monochrom> My suggestion may also be slower.
13:01:48 <gzl> hmm, dunno about pattern guards, let me look them up
13:01:55 <jhunZoa> anyone? :|
13:02:14 <shapr> jhunZoa: how else could you do it?
13:02:29 <jhunZoa> well i just wrote this function with my imperative head
13:02:37 <jhunZoa> i emulated i++
13:02:39 <shapr> does it work?
13:02:42 <jhunZoa> yes
13:02:50 <jhunZoa> but i want to code like real haskell gurus
13:02:53 <gzl> TheHunter: yeah, I read about pattern guards once, but I found the example they gave a little confusing
13:02:57 <jhunZoa> so wondered if there is a better way
13:03:20 * CosmicRay posts a new site name poll on sequence.haskell.org
13:03:24 <monochrom> Why do you have i and i++?  Are you traversing a list?
13:03:46 <jhunZoa> i have made a function which detects the position of a string in a list of strings
13:03:57 <jhunZoa> and i added a int paremeter to the function
13:04:01 <gzl> monochrom: oh, actually, I can't do that. because it's case s of "a" -> [case on (f s), which could be Maybe or Just]
13:04:11 <shapr> jhunZoa: well, what other patterns are possible?
13:04:11 <gzl> monochrom: and f is different in each of the branches
13:04:22 <jhunZoa> i have no idea thats why i ask
13:04:24 <gzl> monochrom: so I don't know what they are at the beginning of the top-level case
13:04:33 <gzl> in that case, should I just keep it my way with two cases?
13:04:53 <TheHunter> case s of "a" | Just foo <- bar -> ... | otherwise -> ...; "b" | ...
13:04:57 <monochrom> I think your original way is good enough.  Frankly I don't see any simplification.
13:05:43 <jhunZoa> ok
13:06:26 <jhunZoa> is there also a way without data to make a paremeter optional and if its not there give it a default value?
13:06:49 <monochrom> No.
13:06:54 <jhunZoa> ok
13:06:57 <monochrom> Err yes.
13:07:01 <jhunZoa> ye?
13:07:13 <monochrom> f :: (Maybe Int) -> Int
13:07:19 <monochrom> f (Just x) = x
13:07:23 <monochrom> f Nothing = 0
13:07:24 <gzl> monochrom: ok.
13:07:39 <jhunZoa> ah ok almost forgot about that
13:07:49 <gzl> TheHunter: hm, ok
13:07:51 <jhunZoa> ohh but that zero
13:08:00 <jhunZoa> can that be a different value?
13:08:14 <jhunZoa> or mm doesnt matter
13:08:16 <monochrom> yes of course.  put any default value you like in place of 0
13:08:58 <jhunZoa> ok gonna figure out how to implent maybe in my function thanks for the help
13:12:20 <shapr> CosmicRay: what about backslashdot? =)
13:12:27 <shapr> \. ?
13:13:01 <shapr> Anyway, I'm off to sleep, I'll see you lambdafolks tomorra
13:13:29 <jhunZoa> good night
13:14:38 <paula> hi everyone. i've a question: i want to ceil a Float and want a Int. ceiling(sqrt(Int)) desnt do the job?
13:16:52 <Lemmih> paula: `sqrt` isn't defined for Ints.
13:17:16 <xerox> 'night shapr
13:19:14 <paula> Lemmih: but i need to round a Float and want to get a Int?!
13:20:04 <jhunZoa> @type maybe
13:20:06 <lambdabot> maybe :: forall b a. b -> (a -> b) -> Maybe a -> b
13:20:12 <CosmicRay> shapr: heh
13:20:24 <CosmicRay> that was suggested, I forgot about it.
13:20:45 <CosmicRay> syntaxninja's co-workers suggested \haskell and \.
13:21:22 <Lemmih> paula: Then why the 'sqrt' function?
13:21:36 <CosmicRay> shapr: fixed.
13:21:49 <CosmicRay> shapr: for some reason, I can edit my own polls, but drupal breaks weirdly when I try to edit & post yours
13:22:13 <CosmicRay> shapr: also I've scheduled a post about TMR
13:22:21 <CosmicRay> shapr: congrats, you've got some great stuff in there
13:22:30 <CosmicRay> shapr: 18MB pdf though :-)
13:22:59 <paula> Lemmih: i've to check if my Int var p is less then sqrt(n)
13:23:36 <Lemmih> paula: And 'n' also has type Int?
13:23:41 <paula> jep.
13:24:32 <Lemmih> paula: You can't apply 'sqrt' to an Int.
13:24:41 <Lemmih> @type sqrt
13:24:42 <lambdabot> sqrt :: forall a. (Floating a) => a -> a
13:24:56 <Lemmih> Int is not an instance of Floating.
13:26:17 <jhunZoa> anyone can point me an example how maybe should be used?
13:26:20 <jhunZoa> i have no idea :|
13:27:20 <Lemmih> "maybe defaultValue evalWhenJust mbValue"
13:27:32 <jhunZoa> mbValue?
13:27:46 <Lemmih> :: Maybe a
13:28:07 <paula> Lemmih: i see, but then i need a approximation for sqrt an Int :(
13:28:28 <jhunZoa> paula convert the int to a float in the function?
13:29:06 <Lemmih> paula: Checkout 'fromIntegral :: Int -> Float'
13:29:22 <monochrom> Yeah use fromIntegral
13:33:10 <jhunZoa> mm with f :: (Maybe Int) -> Int ; f (just x) = x ; f Nothing = 0
13:33:26 <jhunZoa> if i dont specify a paremeter it returns <<function>>
13:33:40 <jhunZoa> thought i could leave that paremeter this way
13:33:44 <paula> Lemmih: looks good, thx.
13:34:35 <Itkovian> evening
13:34:52 <jhunZoa> hey
13:37:20 <paula> problem solved BUT another question: i need to operate with Int>2^32 - is it possible???
13:37:33 <tromp> Int64
13:37:41 <tromp> import Data.Int
13:37:52 <paula> tromp: ok
13:37:56 <tromp> or if you prefer unsigned, try Word64
13:38:01 <tromp> import Data.Word
13:38:13 <monochrom> You have to give it Nothing, e.g., f Nothing
13:38:47 <gzl> monochrom: actually, I was doing the wrong thing with that nested case. I managed to write it all in one case with two options
13:38:51 <gzl> so it worked out :)
13:39:40 <jhunZoa> ye i know but i dont want that :|
13:40:07 <paula> tromp: thx. :)
13:40:10 <jhunZoa> well then i could better leave it out
13:40:38 <Nioate> for integers larger than 2^32, there is also the Integer type
13:41:02 <jhunZoa> or mm maybe my teacher thinks its more 1337 to have Nothing instead of giving 0 as paremeter :P
13:41:42 <monochrom> Nothin is more 31337
13:42:38 <jhunZoa> sure?
13:42:43 <jhunZoa> i need 10/10
13:42:55 <jhunZoa> then i better use Nothing
13:43:12 <monochrom> I am the only one who will get 10/10.  You will settle for 9/10.
13:43:39 <gzl> hahaha
13:44:35 <jhunZoa> my teacher just gave me a 3.5 for my exam
13:44:38 <jhunZoa> so i need a 10 ~
13:45:00 <monochrom> Ask him to bell the marks.
13:45:32 <jhunZoa> bell?
13:46:53 <monochrom> w00t monad.reader is out!
13:47:59 <gzl> there shouldn't be any discrepancies in type inference between hugs and ghc, right?
13:49:40 <jhunZoa> when you make a haskell application do you usually group all type defenitions together or put them above the functions?
13:53:14 <monochrom> I think there is no convention there.  At the end we use something like Haddock (analogous to javadoc) so it doesn't matter.
13:54:46 <jhunZoa> i never used that
13:54:56 <jhunZoa> what does it do
13:58:07 <monochrom> I strongly disagree with ajb about "natural".  If there are 10 persons there will be 15 different ideas of what is "natural".  It is only a matter of upbringing, which is a kind of brainwashing for most people.
13:58:58 <monochrom> I only agree that we need not scare a newbie with foldl (flip (:)).
13:59:22 <jhunZoa> you scared me actually :|
13:59:31 <stepcut> heh
13:59:36 <monochrom> Damn you.
14:00:07 <monochrom> Haddock : Haskell :: javadoc : java
14:00:09 <stepcut> monochrom: what about, swing f = flip (f . flip ($))
14:02:16 <jhunZoa> whats javadoc ~
14:03:27 <metaperl_> monochrom, yes I have that argument at work all the time... we need to think about degrees of fluency
14:03:47 <metaperl_> what is natural for native english speakers is not for people just learning english
14:04:03 <monochrom> I don't know what flip (f . flip ($)) does, but Richard Bird does.  He will also argue that foldl (flip (:)) is more natural, more readable, etc.  It is the style he works closely with.
14:04:52 <gzl> jhunZoa: javadoc : java :: haddock : haskell
14:05:03 <metaperl_> did I really have to hand cobble a list-permutation function? Is there not one in the Prelude?
14:05:16 <metaperl_> that was my first step in working on ajb's quiz problem
14:05:27 <monochrom> I don't say that everyone should be like Bird.  I only say that we keep in mind "readable" is pretty relative.
14:05:36 <jhunZoa> gzl: yes but i only know haskell and java
14:05:52 <metaperl_> absolutely. especially in Perl, I can't stand wordy code. the briefer the better
14:06:25 <gzl> jhunZoa: http://en.wikipedia.org/wiki/Javadoc
14:07:22 <monochrom> metaperl_: yes, good point too.  If you're more learned, your idea of natural changes.  That is why I say if there are 10 persons there will be 15 different ideas of what is natural.
14:09:11 <metaperl_> I would love to be a junior Haskell programmer somewhere instead of a Senior Perl programmer like I am... I'm sure that every day, the code would get tighter and tighter instead of loosier and goosier
14:09:18 <jlouis> Maybe I should write an article about swing to get myself to figure it out in detail
14:09:42 <metaperl_> functions force you to clean up your act from the outset :)
14:09:59 <metaperl_> any other paradigm, cobwebs can creep in...
14:10:13 <jlouis> @index swing
14:10:14 <lambdabot> bzzt
14:10:30 <gzl> gah, how do you get colored text with WASH?
14:11:07 <monochrom> ajb suspects that point-free code is not written, but translated into.  This is false for Bird; he works point-free natively.
14:13:14 <monochrom> I also think that writing top-to-bottom is more natural than left-to-right.
14:15:30 <jlouis> interesting monochrom
14:16:32 <monochrom> The latter is because I am Chinese, I am backed by a 5000-year culture, as opposed to a mere 3000-year left-to-right culture.
14:17:46 <wagle> i'd think youd have to program point-free straight out, else why bother?
14:18:04 <monochrom> Yes, Bird programs point-free straight out.
14:18:19 <wagle> yeah, i was arguing against translating to it
14:18:20 <tromp> some things cant be done pointfree
14:19:24 <Heffalump> I expect anything _can_ be done pointfree with an appropriate (and reasonably small) set of basic combinators.
14:19:34 <wagle> i guess i do imagine that you have to be flexible enough to flip "polarities"..  hmm..  now i'm arguing against my self?
14:19:38 <tromp> let mys ~(k:ks) = 0:(k+1):(mys ks)
14:19:51 <monochrom> Monad.Reader needs better editors.  Editors who can detect and reject hogwashes like "I can't do pointfree natively therefore no one can".
14:20:32 <Heffalump> oh, is it out?
14:20:44 <monochrom> Yeah, the last url in the topic.
14:20:54 <monochrom> Also a mention on LtU.
14:21:34 <wagle> i _still_ have to read bird's book..
14:21:46 <tromp> any1 found the shortest supersequence for n==4 yet:-?
14:21:59 <monochrom> I have only read half of it and understood 1/3 of it. :)
14:22:18 <Heffalump> whose hogwash are you referring to?
14:22:23 <wagle> i need direct neural downloads
14:22:24 <monochrom> ajb's :D
14:22:31 <Heffalump> wagle: the introductory one?
14:22:40 <boegel> monochrom: shapr suggested every author to be an editor
14:22:43 <boegel> using a wiki system
14:22:48 <wagle> Heffalump: algebra of programming
14:23:20 <monochrom> Ah, I'll send it my drivel, become an editor, then sabotage authors I dislike then. :D
14:23:38 <boegel> :o
14:23:44 <Heffalump> wagle: ah. I considered reading that, but was advised against :-)
14:24:04 <wagle> Heffalump: against?  howcome?
14:24:21 <monochrom> I can write up some drivel against CPS.  I can call it "unnatural" for example.  I do find it unnatural, you know...
14:24:30 <wagle> whats the command to get it to tell you the channel title?
14:24:40 <monochrom> /topic
14:24:41 <Heffalump> wagle: /t
14:25:07 <Heffalump> wagle: The person advising me against was the other author. I think he thought it wasn't worth the effort :-)
14:25:19 <wagle> de moor?  haha
14:25:26 <monochrom> Algebra of Programming is difficult.  But I don't recommend against it.  I just recommend taking your time and don't be discouraged.
14:25:42 <wagle> i find cps natural..  therefore its not natural.  qed.
14:25:47 <Heffalump> he wrote the book mostly in an attempt to get out of that field of research
14:25:58 <Heffalump> by wrapping up the work he'd done so far in it
14:26:04 <monochrom> Ah.
14:26:10 <jhunZoa> one function to go -.-
14:26:11 <Heffalump> (well, that's the way he tells it now)
14:26:12 <wagle> whats he do now?
14:26:26 <Heffalump> (more concrete) program transformation type stuff
14:26:50 <Heffalump> most recent project is a research AspectJ compiler
14:27:14 <wagle> yaaarrrrrgggghhh  pdfs!
14:27:31 <wagle> -ETOOMANYPDFSINDOWNLOADSDIRECTORY
14:27:44 <Heffalump> [I was his PhD student then postdocced for him for 3 years]
14:28:04 <monochrom> So I am right in procrastinating my thesis.  I love my field so much I don't want to wrap it up and get out!
14:28:31 * Heffalump thinks saying that foldl (flip (:)) [] is hard for newbies to decipher is a valid point
14:28:34 <jhunZoa> everyone in here is PhD student or MsC student or so? :|
14:28:53 <SamB> jhunZoa: what is MsC?
14:28:56 * Heffalump was a postdoc and is now an industrial compiler hacker
14:28:58 <monochrom> You will be assimilated.  Don't worry.
14:28:59 <jhunZoa> MSc
14:28:59 <integral> jhunZoa: I'm not :-)  If that makes you feel better
14:28:59 <SamB> and probably not, anyway
14:29:06 <jhunZoa> ye defintly
14:29:07 <jhunZoa> or
14:29:12 <jhunZoa> u must be PhD graduated
14:29:17 <SamB> hcchien: what is an MSc?
14:29:24 <jhunZoa> master of science?
14:29:34 <SamB> err, s/hcchien/jhunZoa/
14:29:35 <monochrom> master of the universe
14:29:40 <monochrom> he man
14:29:56 <jhunZoa> haskell is quite fun
14:30:02 <wagle> i had a friend say that he spent 3 years being 6 months away from finishing his dissertation..  then a year being 1 month away..
14:30:04 <jhunZoa> now that i have 3/4 functions made
14:30:10 <jhunZoa> i get the hang of it
14:30:26 <SamB> I'm actually not sure what I'm doing, but its definately a Bachelors (modulo spelling)
14:30:36 <jhunZoa> me too
14:30:49 <SamB> and I hung out here before I came to college
14:31:04 <jhunZoa> why would anyone learn haskell for fun?
14:31:04 <wagle> i read something by Frederic Pohl (SF author) once where he described his rule of "write one page a day"
14:31:23 <SamB> jhunZoa: because it is so different!
14:31:32 <monochrom> why would anyone learn painting for fun?
14:31:38 <wagle> its scheme with static types!
14:31:45 <jhunZoa> well painting can be fun actually and usefull
14:31:45 <wagle> *<8-O
14:31:54 <jhunZoa> only universities learn haskell
14:32:04 <gzl> and haskell can be fun actually and useful too
14:32:04 <jhunZoa> ive never seen haskell as job requirement
14:32:05 <SamB> wagle: scheme doesn't have type classes
14:32:06 <monochrom> I find haskell fun and useful.
14:32:18 <wagle> some industry haskell programming out there
14:32:30 <jhunZoa> you can count them on 1 hand
14:32:32 <SamB> jhunZoa: why would anyone ever want to learn Java?
14:32:40 <gzl> SamB: to get a job
14:32:42 <jhunZoa> i have no idea either its crap :P
14:32:46 <monochrom> Some people learn history and it is not like there are outside jobs for history either.
14:32:47 <Heffalump> Java is a reasonably nice, widely supported language.
14:32:52 <jhunZoa> java is slow
14:33:02 <jhunZoa> or its just the apps i had to make
14:33:05 <wagle> java consult for nike at $120K/yr
14:33:08 <CosmicRay> Heffalump: I disagree about "reasonably nice"
14:33:17 <SamB> jhunZoa: boringer than slow, I think
14:33:24 <gzl> jhunZoa: if you're ruling out java for technical reasons then you should include haskell for technical reasons. if your only interest is getting a job then java is what you do
14:33:28 <wagle> but "the right tool for the right job"
14:33:32 <Heffalump> it was nice enough that I didn't get too frustrated when spending 6 months writing a compiler in it
14:33:32 <gzl> you're using two different criteria
14:33:42 <CosmicRay> my opinion of java is that it tries so hard to be unevil, that it eliminates everything that could be useful
14:33:47 <jhunZoa> i would think c++ is better to learn if you want to get a job
14:33:56 <CosmicRay> Heffalump: I get frustrated just trying to read from the keyboard in it.
14:34:05 <wagle> gcc is proof that you cant write compilers in C.  8|
14:34:05 <SamB> jhunZoa: if you want to go insane, sure
14:34:10 <gzl> both C++ and Java are heavily used
14:34:25 <jhunZoa> mm do you know some famous java applications?
14:34:43 <CosmicRay> Heffalump: any language that needs about 2 lines of code just to read a line from the keyboard has issues, imho
14:34:47 <monochrom> In gcc there is much lispism
14:34:52 <gzl> yes. but now these questions have gotten too boring to field
14:35:02 <SamB> fortunately they don't haven't tried to teach me about classes in C++ yet...
14:35:15 <Heffalump> 2 lines is only 1 more than the minimum number of lines..
14:35:15 <jhunZoa> i dont know c++ either
14:35:16 <gzl> C++ has horrific syntax
14:35:24 <jhunZoa> they teached me java
14:35:26 <CosmicRay> Heffalump: two *full* lines.
14:35:34 <CosmicRay> ie, over 100 characters.
14:35:34 <jhunZoa> i hated it
14:35:50 <CosmicRay> to fscking read from stdin.
14:36:01 <CosmicRay> all sorts of buffered readers, transformers, whatever.
14:36:03 <Heffalump> I don't actually know how to do it in Java, but that seems a bit unlikely.
14:36:05 <CosmicRay> lame lame lame.
14:36:08 <CosmicRay> it's not
14:36:17 <wagle> there is a difference between a language for whapping out one-liners and a language for chugging out million-liners
14:36:58 <jhunZoa> im going for c# now
14:37:06 <CosmicRay>          BufferedReader ins = new BufferedReader ( new InputStreamReader ( System.in ) );
14:37:15 <CosmicRay> that appears to be the simplest way to open up stdin
14:37:17 <wagle> tcl/tk is moose for one-liner gui's..  totally broken for 1000 liners
14:37:21 <SamB> CosmicRay: I thought 80 chars was a full line!
14:37:22 <CosmicRay> str = ins.readLine ()
14:37:32 <CosmicRay> then that will actually read a string from it.
14:37:35 <wagle> SamB still used punchcards?
14:37:49 <monochrom> haha
14:38:03 <CosmicRay> monochrom: are you laughing at java or at wagle? :-)
14:38:04 <SamB> wagle: no, but I like to have lots of windows open
14:38:23 <wagle> SamB: still need to use columns 73-80 for sequence numbers in case you drop your deck on the floor
14:38:30 <SamB> and my root window has -geometry 1280x960+0+0
14:38:39 <monochrom> wagle
14:39:12 <SamB> how do you patch card decks?
14:39:32 <gzl> duct tape
14:40:10 <SamB> hmm, how would you even represent patches in card decks?
14:40:15 <wagle> glue the chaff back into the hole
14:40:37 <wagle> insert cards, remove cards, replace cards
14:40:57 <SamB> what if I want diff -u patches?
14:42:02 <monochrom> You use a Difference Engine to produce or take in diffs.
14:42:36 <wagle> programmable card sorter
14:44:35 <wagle> http://www.columbia.edu/acis/history/sorter.html
14:45:02 <wagle> http://www.columbia.edu/acis/history/plugboard.html
14:58:35 <gzl> in WASH, how do you turn a String into an InputField String?
14:59:06 <wagle> does swing have an actual use?
14:59:10 <gzl> if I get input from an InputField like (foo <- textInputField empty) in some do block, it works, but what if I want to simulate that without actually using a textInputField?
15:02:51 <wagle> stepcut: does swing have a real use?
15:03:47 <tromp> gzl: why not simply let foo = "string" ?
15:04:14 <gzl> because it's not a string. it's the result of getting a string from an input form; it has type InputField String.
15:04:17 <gzl> this is WASH's design, not mine
15:04:29 <gzl> (value foo) is a String
15:05:06 <gzl> if it was just a String it would have been simpler; as it is I can't figure out how to simulate the InputField thing
15:05:37 <tromp> what's the type of textInputField?
15:06:17 <gzl> there's a long string of weird type definitions this will lead to, but here:
15:06:27 <gzl> textInputField :: (AdmitChildINPUT y) => HTMLField INPUT y (InputField String INVALID)
15:07:29 <tromp> groovy:)
15:07:48 <gzl> I don't understand what the INVALID is doing either
15:08:04 <wagle> http://www.haskell.org/hawiki/LicensedPreludeExts
15:08:06 <wagle> egad
15:08:41 <tromp> have u read the WASH paper yet?
15:08:44 <gzl> yes
15:08:55 <tromp> http://www.informatik.uni-freiburg.de/~thiemann/papers/modeling.ps.gz ?
15:09:41 <gzl> let me see if that's what I have
15:10:18 <gzl> no, i haven't read this one. but i have the user manual
15:11:58 <tromp> that one may give u better understanding of the typing design
15:12:12 <tromp> anyway, still have to read it myself:(
15:12:38 <gzl> i've read some of the stuff on it already, the whole type system is too complicated
15:12:44 <gzl> besides i don't think it'll help me with this anyway
15:16:18 <gzl> yeah, still stuck. :)
15:20:13 <musasabi> evening
15:20:24 <musasabi> Itkovian: do you still need the TMR logo eps?
15:20:41 * musasabi was at a friend's place
15:26:27 <tromp> hi musasabi
15:27:32 <musasabi> hello tromp
15:32:07 <Itkovian> musasabi, yeah, sure. a pdf would be better though. Anyway, I'm off to bed. mail the lot to me.
15:32:50 <musasabi> Itkovian: can you msg me your address please.
15:39:33 <tromp> do you have experience with identifying space leaks, musasabi:-?
15:40:02 <musasabi> some, just tried the heap profiler with all the options till I figured out what was happening.
15:40:17 <musasabi> making the graphs colored made them much more readable.
15:40:51 <tromp> the profiler doesn't give me any clues why my program leaks
15:42:26 <musasabi> the *heap* profiler?
15:42:59 <tromp> yep
15:43:39 <gzl> arhga
15:43:42 <gzl> time to give up on wash for now
15:43:42 <tromp> do you read fa.haskell?
15:44:00 <musasabi> in what biographical state are the leaking objects?
15:44:55 <tromp> what do you mean by biographical state?
15:45:13 <musasabi> lag/use/drag/void
15:45:30 <tromp> with what option do you get that?
15:45:52 <tromp> i used ./a.out +RTS -hc
15:48:07 <musasabi> -hb
15:48:14 <musasabi> http://haskell.org/ghc/docs/latest/html/users_guide/prof-heap.html
15:49:05 <tromp> running ./a.out +RTS -hb now
15:49:29 <tromp> the program is also on my webpages
15:49:31 <musasabi> you want first find the module with -hm, then -hb and -hd to get a picture what you are searching for.
15:49:48 <musasabi> if it is a single module then -hm is not really necessary.
15:50:22 <musasabi> when creating the graphs with hp2ps add -c flag to create color output - much easier to read.
15:51:42 <tromp> even the greyscale is pretty clear
15:51:53 <tromp> dominated by just 2 bands
15:52:17 <tromp> just don't understand why those retain space
15:52:36 <musasabi> it is usually something stupid and hard to spot.
15:52:47 <musasabi> at least my space leaks are.
15:52:48 <tromp> it's a gametree search, and i expect a subtree to give up all associated space once searched
15:53:12 <musasabi> tromp: a likely problem is backtracing capability.
15:53:15 <musasabi> 4 hours till I have to wake up.. If you cannot get it solved you could bug me tomorrow..
15:53:47 <tromp> i posted to fa.haskell about it
15:54:10 <tromp> no reactions yet though:(
15:54:32 <musasabi> fa.haskell is iirc not on my nntp-server.
15:55:01 <musasabi> but I really need to get some sleep. =>
15:55:09 <tromp> again 2 dominating bands
15:55:13 <tromp> one void, one drag
15:55:19 <tromp> sweet dreams!
15:56:46 <musasabi> drag = nodes which could be backtracked, void = nodes created but never visited, but this is just a guess as haven't seen the code and am not awake.
15:58:39 <tromp> btw, the article is on http://groups-beta.google.com/group/fa.haskell/ too
15:59:11 <tromp> am going to bed myself:)
16:39:40 <duncan_> Igloo: any idea how the gtk2hs debian package is comming along? I'm being pestered by debain users with machines very low on ram that are having trouble building from source. We've got some cunning workarounds but life would be easier...
16:41:21 <dons> what happens to them on low ram machines?
16:41:29 <dons> they get a thrashing?
16:42:43 <juhp> shapr: oh? (hsc2hs)
16:43:55 <Igloo> I don't think Marvin replied to me  :-(
16:47:24 <Igloo> If he hasn't appeared by next week I might have a look at it if I have ghc 6.4 sorted
17:01:01 <dev9> i use LISP with a bad lisp
17:22:55 <Igloo> Gah
17:23:11 <Igloo> There isn't a nice equivalent of [Foo..] going down for finite types
17:24:47 <dons> is that an enum?
17:24:54 <Igloo> Yup
17:26:39 <dons> why can't you derive Enum for your type?
17:27:11 <Igloo> I can. The problem is [foo, pred foo] breaks when foo == minBound
17:27:21 <Igloo> Err, with a .. before the ]
17:27:21 <dons> oh, of course.
17:27:33 <Heffalump> tail [succ foo, foo, ..]
17:27:44 <Igloo> That breaks at the top  :-)
17:28:07 <Heffalump> you need to become less demanding :-p
17:29:39 <Igloo> :-þ
17:33:51 <Pseudonym> :-A3 is either a very short proof or an emoticon of a complex emotion.
17:35:00 <dons> :-A3. QED.
17:35:39 * Igloo mocks Pseudonym's inferior terminal
17:36:07 <dons> Igloo's a UTF-8-ist.
17:37:00 <Pseudonym> 7 bits ought to be enough for everyone,
17:37:30 <Igloo> Don't say that or someone'll make a UTF-7
17:37:37 <Pseudonym> Too late.
17:37:39 <Pseudonym> There already is one.
17:37:55 <Pseudonym> RFC 2152
17:41:13 <Cale> 7? HAH! 5 BITS IS ENOUGH TO GET BY ON. WHO NEEDS LOWERCASE LETTERS? 32 CHARACTERS IS ENOUGH.
17:42:08 <Pseudonym> Let's see.  If you assume all upper-case letters are represented, that's 62.
17:42:09 <Pseudonym> 26
17:42:25 <Pseudonym> Plus '?', ' ', '!', '.', '5' and '7'...
17:42:33 <Pseudonym> So sorry, no code points available for '3' and '2'.
17:44:30 <Heffalump> it's ok, we can infer the vowels
17:45:07 <Pseudonym> And I suppose we can remove unnecessary letters like 'J', 'C', 'X' and 'Z'.
17:45:13 <Heffalump> 7? HH! 5 BTS S NGH T GT BY N. WH NDS LWRCS LTTRS R VWLS? 32 CHRCTRS S NGH.
17:45:26 <MachinShin> hey +
17:46:04 <Pseudonym> LWRCS -> LWRKS
17:46:17 <Pseudonym> For example.
18:02:51 <lispy> i was trying to learn to use random number in haskell, so i imported Random, and found this example: rollDice = getStdRandom (randomR (1, 6)),  but when i type rollDice (using ghci) i don't see any return value
18:04:34 <dons> (getStdRandom (randomR (1, 6)) :: IO Integer) >>= print
18:05:39 <lispy> okay, so if i want to use the random number in a program can just call rollDice?
18:06:03 <dons> you'd: r <- rollDice
18:08:37 <lispy> returnn = n where n <- rollDice,  I get a parse error on the <-
18:09:34 <lispy> sorry for the stupid questions, but i'm a total beginner with haskell
18:09:45 <lispy> and i've searched a lot of the web but i'm not finding much
18:09:59 <Nioate> <- is part of do notation. it isn't a function
18:10:00 <Igloo> You probably want a good monad tutorial
18:10:18 <lispy> oh, i have to use monads...that's not good
18:10:23 * Igloo can't remember which are good, but the topic should point you at a few
18:10:26 <lispy> i'm not supposed to be using those...
18:10:48 <Igloo> Hmm, what's the question exactly?
18:11:14 <lispy> i just wanted to imp
18:11:36 <lispy> ah, sorry
18:11:39 <lispy> had a connection probelm
18:12:05 <lispy> Igloo: for a class i'm in we are supposed to write up example programs for haskell, lisp and prolog.  I wanted to implement rsa in haskell
18:12:35 <lispy> Igloo: which means i wanted to use random numbers, but we are not allowed to use things like monads in haskell, setf in lisp or cut in prolog
18:13:16 <lispy> perhaps i'll just code in a few values
18:13:35 <lispy> my program doesn't even have to work, it's just to illustrate the style of the language
18:14:23 <Igloo> You can use randoms (mkStdGen 100) to get an infinite list of random values (for any value of 100)
18:14:48 <Igloo> So you only have to hard code 1 value, and can then pass the list around
18:14:49 <lispy> okay, i'll try that
18:14:57 <lispy> thanks
18:21:55 <dons> Igloo: TH question: Are there Haskell types not representable in TH.Syntax.Type?
18:22:08 <dons> no existentials, for example?
18:23:09 <Igloo> Probably, but if someone cares about them they should get added
18:24:10 <dons> ok. i'll send patches if I hit that issue, then.
18:24:36 <Igloo> Are existentials the things that are confusingly written forall?
18:24:44 <dons> yeah.
18:25:26 <Igloo> OK, ForallT does exist, but I have no idea which of its roles it works in without trying it  :-)
18:28:52 <alexj> Is there a version of id that does not constrain the type?  I want this function to allow f::a->b but can't figure out how to do it:
18:28:53 <alexj> u_redirect f (Created r o) = Created (f r) o
18:28:53 <alexj> u_redirect f (Moved r o) = Moved (f r) o
18:28:53 <alexj> u_redirect _ r= r
18:30:12 <Igloo> But then you could say f "Foo" :: Int
18:30:38 <alexj> Igloo: I don't understand
18:31:24 <Igloo> Oh, I slightly misintereted you. But if id :: a -> b then you can use id "foo" with type Int, whch clearly doesn't make sense
18:32:39 <alexj> I agree.  But if you eliminate the last line of this example, f has type a->b.  if you leave it in, it has type a->a.
18:32:45 <alexj> That doesn't make sense to me.
18:33:13 <Igloo> u_redirect has to return something of a certain type no matter what values you give it
18:33:54 <Igloo> If it was of type (a -> b) -> a -> b  (slightly simplified) then in the last line r must have both type a and b
18:33:58 <Igloo> Hence a == b
18:36:12 <alexj> here is a better example:
18:36:13 <alexj> fun f (Left x)= Left (f x)
18:36:13 <alexj> fun _ r@(Right x) = Right x
18:36:44 <alexj> if you replace the last line with "fun _ r=r" then the type changes.
18:36:49 <Igloo> Correct
18:37:29 <Igloo> If the second argument has type   Either a b   then in the last line   Right x  has type   Either c b
18:37:35 <Igloo> But r has type Either a b
18:38:14 <alexj> since Right x is obviously identical with r, it there a function I can apply to r to get this result?
18:38:59 <Igloo> No
18:39:31 <Igloo> (other than \(Right x) -> Right x)
18:40:27 <alexj> but if I have a big type, reapplying the constructor for it is going to be annoying.
18:40:40 <alexj> reapplying all the constructors.
19:16:51 <Pseudonym> Well.
19:17:04 <Pseudonym> Looks like Oleg has done it again.
19:17:32 <dons> yeah. pretty head spinning stuff.
19:17:42 <Pseudonym> Now, my algorithm for solving any Haskell homework problem is complete, because he's come up with a way of translating from the type system into code.
19:18:00 <dons> yep. we've been waiting for this moment!
19:18:49 <stepcutHM> Pseudonym: which list ?
19:21:04 <lispy> Igloo: is there a way to do the same thing as randoms (mkStdGen 100) but to get random numbers in a different range?
19:21:07 <Pseudonym> Er... haskell-cafe, I think.
19:21:39 <Pseudonym> No, haskell
19:23:28 <stepcutHM> i don't think I am on that one..
19:23:49 <stepcutHM> thanks
19:23:58 <Pseudonym> It's pretty low-bandwidth.
19:24:47 <Igloo> randomRs (mkStdGen 100) IIRC
19:25:06 <Igloo> It's in the Random section of the report, http://www.haskell.org/onlinereport/
19:25:28 <stepcutHM> Pseudonym: perhaps in number of messages, but if they are all this aggresive...
19:25:30 <Igloo> fg
19:25:56 <Pseudonym> No, only Oleg's.
19:26:07 <Pseudonym> And Conor McBride's, if he gets into a conversation with Oleg.
19:26:26 <stepcutHM> heh
19:26:31 <lispy> Igloo: thanks
19:27:02 <stepcutHM> What does Oleg do that gives him time to think this stuff up all day ?
19:56:15 <gzl> is it just me, or is the emacs haskell mode bad at indenting case expressions?
19:57:14 <araujo> never had a problem with it here
19:58:16 <gzl> hmm
19:58:18 <gzl> I wanted something like
19:58:22 <gzl> case x of
19:58:28 <gzl>    a -> ...
19:58:53 <gzl> but it insists on putting the a under the 'of' if the case block isn't inside some other block
19:59:01 <gzl> and if it's inside another block it's even stranger
19:59:49 <gzl> I'd actually like it to align under the thing it's matching the case on
19:59:54 <araujo> can't you tweak it with your tab?
20:00:09 <araujo> you set the indenting cycle with it
20:00:14 <gzl> no, hitting tab does nothing. that's the problem
20:00:25 <gzl> in all other situations i can cycle through various tab options
20:00:42 <gzl> and they always have at least one reasonable one
20:03:01 <gzl> ok, it lets you align either under 'case' or under 'of'. i think both are bad
20:26:26 <lispy> Igloo: thanks for your help tonight, i was able to implement a really simple rsa, but i think it may be a bit longer than my professor asked for
20:29:34 <Igloo> np
20:55:12 <SyntaxNinja> hi everyone
21:02:31 <heatsink> I have this function that can overflow the stack because it's recursive in a strict way.  It looks like this:
21:02:47 <heatsink> f (Tree a b) = case f a of {...}
21:02:55 <heatsink> where a, b :: Tree
21:03:18 <heatsink> Any advice on how to make this stack-safe?
21:06:00 <lispy> heatsink: wish i could help.  Sounds like a question i would have...
21:11:46 <Gahhh> heatsink, do you refer to a within the { } ?
21:13:00 <heatsink> Gahhh: no, but I use the value of f a within the { }
21:14:35 <Gahhh> heatsink, then you can modify the function to pass the value to itself. I can sorta see a way to involve a monad in this as well.
21:15:28 <Gahhh> Hmm, I've got a few cd's to burn. bbiab.
21:16:38 * heatsink endeavors to understand this transformation
21:19:33 <dons> heatsink: does it help to make it lazy?: f (Tree a b) = let z = f a in .. ?
21:20:10 <heatsink> dons: no, because I will end up evaluating the whole thing anyway
21:20:20 <heatsink> I'm writing an interpreter, and this is the 'eval' function
21:20:39 <heatsink> eval (Apply f g) first evaluates f, then evaluates g, then applies f to g
21:20:44 <dons> ok. sure. I usually use 'let's in interpreters.
21:21:15 <dons> even: eval (App f g) = f' g' where f' = eval f ; g' = eval g
21:21:34 <dons> but this tree-ish thing looks problematic.
21:21:49 <dons> can you use a lower-level operational semantics?
21:22:19 <heatsink> @foldoc operational semantics
21:22:24 <lambdabot> No match for "operational".
21:22:24 <lambdabot> *** "semantics" foldoc "The Free On-line Dictionary of Computing (27 SEP
21:22:24 <lambdabot> 03)"
21:22:24 <lambdabot> semantics
21:22:24 <lambdabot>      
21:22:26 <lambdabot>         <theory> The meaning of a string in some language, as opposed
21:22:28 <lambdabot>         to {syntax} which describes how symbols may be combined
21:22:30 <lambdabot>         independent of their meaning.
21:22:32 <lambdabot> [10 @more lines]
21:23:11 <dons> well, you're implementing a sort of abstract machine for your language. often you can improve performance by using an explicit  heap and stack, rather than the haskell rts.
21:23:37 <dons> depends on whether you know a way to map your language to a lower-level system.
21:23:52 <heatsink> oh, hmm.
21:24:42 <dons> another option would be to instead compile your code to a Haskell src file, then compile that with -O.
21:25:26 <SamB> is this for play or for work? and what kind of work if work?
21:25:36 <SamB> for that matter, what kind of play?
21:25:41 <heatsink> I think I can use an explicit stack.
21:25:50 <heatsink> It's for play.  Or maybe 'practice'.
21:26:43 <SamB> practice/play with what?
21:28:46 <dons> there's some good introductions to these kinds of interpreters in Bob Harper's book "Programming Languages: Theory and Practice", http://www-2.cs.cmu.edu/~rwh/plbook/. Particularly 11, which describes how to go from a naive substitution semantics to an explicit heap, and also an explict stack.
21:28:46 <heatsink> Evaluating programs when some variables are known.  Think of constant propagation...
21:28:54 <heatsink> s/known/unknown/
21:29:19 <dons> book's online for free.
21:29:28 <heatsink> Is it offline for free, too?
21:29:36 <dons> yeah :)
21:29:44 <SamB> what?
21:29:46 <heatsink> So all these pdfs are the same thing?
21:30:04 <dons> only difference is the pagination.
21:30:09 <heatsink> ok
21:30:11 <dons> one's for printing in a book.
21:30:20 * shapr yawns
21:30:41 <Gahhh> hey shapr. Thumbs up on the TMR.
21:31:09 <Pseudonym> G'day.
21:31:17 <SamB> oh, so by offline you mean available in typeset form?
21:31:24 <Pseudonym> shapr: Suggestion for next issue.
21:31:32 <Pseudonym> Let's proofread each others' articles.
21:31:35 <shapr> Gahhh: thanks :-) The authors worked hard.
21:31:49 <Pseudonym> Get one author to proofread one other article.
21:31:57 <shapr> Pseudonym: yeah, totally. That's one reason I want wikipublishing where all authors can see and change the wiki.
21:31:58 <dons> SamB: I meant, you can print it  off and read it offline for free.
21:32:01 <Gahhh> I suppose we won't see an entry from Pseudonym in a code obfuscation contest anytime soon...
21:32:17 <Pseudonym> Gahhh: I'm not allowed.  shapr changed the rules, and now I can't.
21:32:25 <heatsink> SamB: The interpreter shall be for the purpose of inferring properties of a program that might be useful to a compiler.
21:32:29 <Pseudonym> The article was me spitting the dummy over that.
21:32:37 <shapr> spitting the dummy?
21:32:44 <Pseudonym> Oh, you don't know that phrase?
21:32:51 <Pseudonym> Another Australianism, no doubt.
21:32:54 <dons> shapr: like chucking a spack :)
21:33:14 <shapr> oh that one's easy.
21:33:17 <Pseudonym> Another synonym is "chucking a wobbly".
21:33:24 <dons> yeah. that's a good one.
21:34:10 <Gahhh> The only australianism (phew) I know is about a bush... Very lacking.
21:35:03 * heatsink knows a few very common ones like "heaps" and "carpark"
21:35:18 <shapr> so, do those phrases mean "revenge for a rules change" ?
21:35:39 <Pseudonym> No, more like throwing a tantrum.
21:36:32 <shapr> Gahhh: Truly though, Pseudonym got 'dishonorable mention' in the 2003 IOHCC - http://www.scannedinavian.org/iohcc/zeroth-2003/winners.html
21:36:48 <dons> "Spit the dummy : get very upset at something"
21:36:52 <heatsink> juror?!
21:37:33 <dons> other things we chuck: to chuck a sickie
21:37:42 <heatsink> what is it, a quine or tictactoe?
21:37:46 <dons> ah. http://www.koalanet.com.au/australian-slang.html
21:39:40 <Pseudonym> heatsink: Both!
21:39:42 <shapr> heatsink: It's both actually, it's a quine that outputs the source for its next move.
21:40:05 <heatsink> wow.
21:41:39 <heatsink> dons: I've seen that paper before, though it's updated; heavy on the notation, guess I'll need some patience.
21:41:43 <Pseudonym> Unfortunately, the AI isn't very good.
21:41:55 <Pseudonym> Exercise: Make it play perfectly!
21:42:27 <shapr> This year it's the ssz IOHCC ... though I forget what part of the year it usually happens.
21:44:32 <heatsink> okay.  Quine part: (openFile "Pseudonym.hs" ReadMode >>= hGetContents >>= putStr)
21:44:40 <heatsink> Now for the tictactoe part. ;)
21:45:21 <Pseudonym> Actually there are _three_ copies of most of the code.
21:45:32 <Pseudonym> Not just two as you'd see in a standard Quine.
21:46:26 * heatsink comes to a startling realization: all programming languages look the same when obfuscated.
21:46:38 <Pseudonym> That's pretty close to the truth.
21:46:46 <Pseudonym> Except Perl, because of the regular expressions.
21:47:50 <Pseudonym> The main "Quine" code, by the way, is the following two lines:
21:47:54 <Pseudonym> q s=s++ss s
21:47:54 <Pseudonym> ss ""=" \"\"";ss s=" "++show(take 50 s)++"++\n"++ss(dd 50 s)
21:48:01 <Pseudonym> "q" means "quine"
21:49:45 <Pseudonym> Once you've gotten that, the rest is easy.
21:55:56 <Pseudonym> @eval show "f"
21:55:57 <lambdabot> unbound variable: show
21:55:59 <Pseudonym> Hmmm.
21:56:00 <Pseudonym> Shame.
21:56:06 <Pseudonym> let q s = s ++ show s in q"let q s = s ++ show s in q"
21:57:22 <Pseudonym> "show" is incredibly useful for this sort of thing.
21:57:58 <dons> it's untyped metaprogramming, right?
21:58:12 <Pseudonym> Something like that.
21:58:38 <dons> the future of obfuscation is metaprogramming, I think we can safely say.
21:59:40 <dons> many of the recent entries have been meta-programmed, or program generators of some sort
22:01:10 <Pseudonym> main=putStrLn$let q s=s++show s in q"main=putStrLn$let q s=s++show s in q"
22:01:18 <Pseudonym> Can probably get one shorter than that.
22:06:44 <Pseudonym> Anyway, on that note, home time for my.
22:06:47 <Pseudonym> me
22:06:48 <Pseudonym> Mytol!
22:15:45 <shapr> @yow !
22:15:46 <lambdabot> JAPAN is a WONDERFUL planet -- I wonder if we'll ever reach
22:15:46 <lambdabot>  their level of COMPARATIVE SHOPPING...
22:20:55 <SyntaxNinja>  heh
22:21:23 <Lemmih> Good morning, #haskell.
22:21:27 <shapr> good morning Lemmih
22:23:40 <Lemmih> My ClanLib binding is good enough for me to start hacking my first game ever! Hurrah
22:27:37 <SyntaxNinja> hiya Lemmih
22:29:52 <Lemmih> Greetings, SyntaxNinja.
22:30:05 <Lemmih> shapr: Is there a size limit on TMR articles?
22:30:18 <shapr> Yes, one paragraph is TOO SMALL.
22:30:36 <shapr> er, no, not really.
22:31:07 <shapr> though if your article is really huge, I'd rather spread it across more than one issue.
23:01:12 <shapr> Lemmih: Do you want to write an article for issue two?
23:02:39 <shapr> I want to finish my TH tutorial. I like the idea of a TH NewBinary version. That would be so spiffy!
23:04:54 <shapr> hoi xkb, want to write an article for issue two of The Monad.Reader?
23:05:07 <shapr> Let's see, who can I pick on... (other than myself)
23:05:13 <xkb> lol
23:05:17 <shapr> aj: hey, you want to write about darcs and its internals?
23:05:23 <xkb> Not now, got a paper due
23:05:28 <shapr> ah, ok.
23:07:18 <shapr> duncan_: hey, is your peval code online?
23:07:54 <shapr> dons: Want to write a short demo for hs-plugins?
23:08:46 <Lemmih> shapr: Yeah.
23:08:55 <shapr> juhp: hsc2hs in the rpm doesn't include its own .h files
23:09:09 <juhp> oh
23:09:35 <juhp> shapr: can you name one for me? :)
23:09:42 <shapr> name one what?
23:09:55 <juhp> one of the header files :)
23:10:26 <juhp> well I can take a look later
23:10:36 <shapr> sure, I'll stick the two files online, one I generated locally, one I generated with the rpm
23:10:36 <dons> shapr: ok. when's the deadline?
23:11:29 <juhp> shapr: ok, however afaik the rpm can build itself
23:13:13 <shapr> juhp: http://www.scannedinavian.org/~shae/HSQL_hsc_make.c.debian http://www.scannedinavian.org/~shae/HSQL_hsc_make.c.redhat
23:13:46 <shapr> dons: outline and summary to me by the end of the first week, content ready for editing by one week before the end of the month, TMR goes public 1st of the month.
23:13:56 <juhp> shapr: anyway I just meant can you give me the name of one of the header files you're expecting, so that I can search for it :)
23:14:30 <juhp> shapr: bbs and take a look
23:14:56 <juhp> % rpm -ql ghc622|grep \\.h|grep hsc
23:14:56 <juhp> /usr/lib64/ghc-6.2.2/template-hsc.h
23:14:58 <dons> so you want outline by end of this week?
23:15:03 <shapr> I can't build HSQL, make barfs. I tracked it to the hsc2hs call, using hsc2hs -v I noticed the ghc/cc call fails.
23:15:28 <juhp> shapr: ok, fair 'nuf - let me try when I get back
23:15:36 <shapr> juhp: awright
23:16:01 <shapr> dons: Yeah, that would be nice.
23:16:15 <dons> ok. I think I can do that.
23:16:40 <shapr> Though honestly a simple weenie ghci clone that just uses eval would be a persuasive demo imho.
23:17:15 <dons> yeah - like plugs?
23:17:24 <shapr> For example, a repl that allows "data Tree a = ..." would be used by a lot of people.
23:17:40 <dons> ah! good point. we could do that.
23:18:24 <shapr> That's the number one complaint from newbies, "Why can't I type this HaskellDemo code into hugs/ghci?"
23:18:55 <dons> yep. ok - sounds like a plan.
23:19:43 <dons> got a word/page limit in mind?
23:19:43 <shapr> spiffy :-)
23:20:08 <shapr> Nah, whatever amount you think covers the subject. I keep quoting Lewis Carrol.
23:20:19 <dons> ok.
23:20:21 <shapr> "Begin at the beginning, go to the end, then stop."
23:20:40 <shapr> Red Queen talking to Alice, I think.
23:21:08 <dons> I think that might be it
23:22:42 <shapr> how'd you do the code synhl in hs-plugins docs?
23:23:30 <dons> I used tex2page -- a scheme tex to html translator. it has support for extensible Scheme markup -- and I extended it with extra Haskell keywords
23:23:37 <shapr> Does plugs handle "data Tree a = ..." already?
23:23:40 <shapr> oh, nifty
23:23:40 <dons> nope
23:26:40 <shapr> Hm, I think I'll try to steal that Poly trick for the BinaryTH article I want to write.
23:36:49 <musasabi> morning
23:37:02 <shapr> heippa hei musasabi
23:37:40 <shapr> How's life in the Big City?
23:39:58 <musasabi> god morgon.
23:49:09 <ibid> ugh:
23:49:11 <ibid> Forbidden
23:49:11 <ibid> You don't have permission to access /~shae/memory.pdf on this server.
23:52:05 <shapr> foo
23:52:27 <shapr> ibid: try again?
23:54:26 <ibid> works
23:54:56 <musasabi> morning Itkovian
23:56:03 <shapr> ibid: want to write an article for issue 2?
23:57:18 <shapr> hoi swiert
23:57:25 <swiert> hi shapr
23:57:52 <ibid> shapr: if i had a topic :)
23:58:17 <shapr> You could write about something that you already know something about, or have an interest in learning.
23:59:01 <ibid> i figured that much :)
23:59:15 <ibid> have you considered getting an issn for tmr?
