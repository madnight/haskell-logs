01:20:54 <nlv11757_> is haddock also usuable to document attributes in an attribute grammar? the idea seems usefull
01:23:43 <nlv11757_> hmm doesnt seem that way
01:42:34 <nlv11757_> hmm, maybe it would be nice extending haddock so it can also deal with documentation about attributes in an attribute grammar
02:14:33 <Lemmih> Has anyone used System.Process.runInteractiveProcess before?
02:15:05 <nlv11757_> nope
02:15:31 <lightstep> so how did it get there?
02:19:27 <Lemmih> What I write to the process' stdin handle seems to be silently ignored.
02:21:30 <musasabi> Lemmih: perhaps you need to flush it?
02:21:44 <Lemmih> Did that.
02:25:55 <Lemmih> musasabi: Can I get you to run the test I've pasted on the HaskellIrcPastePage?
02:26:12 <_metaperl> stepcut is working on a haskell shell interaction system based on Template Haskell
02:26:18 <_metaperl> maybe talk to him when he's around
02:26:53 <Lemmih> stepcut and stepcutHM are the same person?
02:27:56 <_metaperl> I would guess so... but I don't know
02:27:57 <musasabi> Lemmih: yes.
02:28:09 <Lemmih> stepcutHM: Awake?
02:29:55 <musasabi> Lemmih: I can see the problem.
02:30:16 <musasabi> Lemmih: the data is written to wc fine, the problem is that wc is still waiting for eof.
02:30:49 <Lemmih> oh
02:31:30 <musasabi> Lemmih: pasted working code to wiki.
02:38:06 <Lemmih> Ahhh. 'tar t' outputs to stderr and not stdout.
02:41:38 * Lemmih realizes that --to-stdout only applies to files and not the file list.
04:02:11 <bourbaki> moin
04:51:33 <nlv11757_> is there something in latex that you can for example call a binary and paste the result in your latex document?
04:52:03 <nlv11757_> i want to generate the commandline options in my latex document rather than hard code them
04:52:36 <Muad_Dibber> nlv11757_ : there is #latex ;P
04:54:31 <kosmikus> nlv11757_: yes, write18
04:55:44 <nlv11757_> Muad_Dibber, I need make some kind of shell escape in latex and paste the result in the generated document.....
04:56:50 <kosmikus> nlv11757_: as I said ^^
04:57:14 <Muad_Dibber> yeah listen to kosmikus , he'll know
04:57:24 <Muad_Dibber> whereas i just hang around and try to catch stuff ;)
04:59:58 <nlv11757_> does it need special enablings? cause it's not working so it seems
05:00:50 <kosmikus> depending on your tex distribution, you have to do something to enable it, yes
05:01:01 <kosmikus> try "latex --shell-escape"
05:01:19 <nlv11757_> "TeX ignores \write18 by default (for security reasons). You enable the feature by using the TeX compiler option -enable-write18."
05:01:53 <kosmikus> as I said, depending on distribution ...
05:12:29 <nlv11757_> ....ok i get totally bogus errors about erroneous latex commands im not using
05:12:48 <nlv11757_> 'Command \textless invalid in math mode on input line 710'
05:12:54 <nlv11757_> while im not even using it :S
05:14:09 <nlv11757_> ah im using pdfLatex instead of latex
05:18:31 <nlv11757_> sigh
05:24:43 * nlv11757_ throws shoes at pdflatex
05:33:35 <nlv11757_> i give up on the write18 thing, its not doing anything
05:35:04 <kosmikus> ?
05:35:11 <kosmikus> of course it does
05:37:31 <nlv11757_> i did \write18{ls} in my latex source
05:37:39 <kosmikus> yes
05:37:42 <nlv11757_> then added -shell-escape to the options for pdflatex
05:37:43 <nlv11757_> no result
05:37:50 <kosmikus> that'll just execute ls
05:37:55 <kosmikus> look at the output of the latex call
05:38:08 <kosmikus> it doesn't do anything within the document
05:38:35 <nlv11757_> ow darn, i wanted to paste the result into my latex document automatically :) like replace this \write18{ls} with its result
05:38:36 <nlv11757_> hehe
05:38:50 <kosmikus> I think you have to go via a file there
05:39:49 <nlv11757_> owww ok, i totally misunderstood its effect then
05:40:09 <kosmikus> you said you wanted shell-escape, that's what it does
05:40:22 <nlv11757_> i wanted a bit more actually ;)
05:40:38 <kosmikus> there's no problem it going via files, is there?
05:41:38 <kosmikus> actually, if all you want to have is a program generated documentation of the command line flags, I'd use a Makefile to generate that, and just read it from my LaTeX document; then you don't need the \write18 hack at all
05:42:54 <nlv11757_> making a Makefile is on my todo list :P
05:44:26 <nlv11757_> im off later, nice pasen and stuff
05:46:13 <Oeje1> So, one could do something like: \write18{ls >ls.txt} \input{ls.txt} ?
05:47:17 <kosmikus> Oeje1: yes, something like that
05:47:27 <kosmikus> of course, ls's output is not very suitable for direct input
05:47:32 <kosmikus> and I think you need \immedate\write
05:47:40 <kosmikus> \immediate\write18{ls -l > \jobname.lsout}\verbatiminput{\jobname.lsout}
05:47:51 <kosmikus> should work with \usepackage{verbatim}
05:51:52 <Oeje1> kosmikus: Ok.
05:57:48 <bourbaki> moin
06:05:29 <basti_> my permutation routine needs 500 bytes memory per permutation in some large scale situation
06:07:19 <bourbaki> hey basti_ :)
06:07:26 <basti_> =)
09:03:36 <boegel> @seen Itkovian
09:03:37 <lambdabot> I saw Itkovian leaving #haskell 1 day 2 hours 2 minutes 2 seconds ago.
09:09:20 <duncan_> hey, boegel when are you releasing the code for HRay?
09:15:10 * shapr boings
09:17:17 <xerox> hiya shapr!
09:17:38 <shapr> y0
09:19:04 <basti_> hi!
09:19:08 <Lemmih> Hurrah. Hackage does now accept .tgz packages (:
09:19:48 <shapr> oy, Michael Walter did not understand the code I wrote.
09:20:19 <basti_> are you wondering about that? ;)
09:21:06 <shapr> You mean, why am I surprised?
09:21:16 <shapr> That's a good point. It's not exactly clear.
09:26:16 <musasabi> evening
09:26:39 <basti_> hi
09:28:06 * Lemmih wonders where Hackage can put packages.
09:29:15 * TheHunter wishes for type class aliases...
09:29:25 * shapr wishes for an Ideal Stepanov Language
09:29:39 <shapr> Though I could go for a short nap in the short term.
09:36:29 <Muad_Dibber> hehe
09:53:18 <gzl> shapr: you got a minute for a WASH question? getting a type error, and i'm not sure what to do about it.
10:41:31 <basti_> is "avoid success at all cost" really the motto of the haskell user base? :)
10:42:33 <ibid> i think it's the motto of the language developers
10:42:39 <ibid> at least retroactively constructed
10:42:45 <ibid> and with a grain of sugar :)
10:42:50 <basti_> sounds wise.
10:42:55 <basti_> kinda like the Tao Te King
10:43:04 <humasect_> ~_?
10:43:07 <ibid> where did you find it?
10:43:34 <basti_> http://www.research.microsoft.com/~simonpj/papers/haskell-retrospective/ in this set of slides
10:43:56 <ibid> yeah
10:44:13 <ibid> that's where i found it. i was just wondering if it had been repeated somewhere
10:44:26 <ibid> i think what i said is quite evidently implicit in the slides :)
10:44:29 <basti_> :P
10:46:45 <astrolabe> What does "rather pointy headed user base" mean?
10:47:28 <humasect_> also, avoid what kind of success ? commercialism ?
10:47:47 <ibid> don't take it literally
10:48:12 <ibid> i think what spj means is that many choices have been made in a way that repels casual users
10:48:16 <ibid> such as the name "monad" :
10:48:17 <ibid> )
10:48:39 <basti_> :P
10:48:40 <Corion> I'm using named fields. Can I put a check on the value of a named field into a function signature? I get "Parse Error in Pattern" on _run (("-e"):frag:args) (env{ oneliner="" }) = do env{ oneliner = frag } ...
10:49:02 <Corion> (I want to set the oneliner if there is no value already)
10:49:25 <humasect_> ah
10:50:35 <humasect> "i fear that haskell is doomed to succeed."
10:51:26 <ibid> the vehicle man talks? :)
11:11:21 <Oeje1> Why is Stepanov not involved in the Links thing?
11:33:43 <Oeje1> Haskell sux0rs!
11:33:54 <Lemmih> Argh!
11:34:24 <Oeje1> Heh, just wanted some attention.
11:34:29 <basti_> hehe
11:35:46 <Lemmih> What's up, Oeje1?
11:37:11 <TheHunter> hmm, what to download? ghc-6.4 or the latest 6.5 snapshot?
11:37:50 * Lemmih puts his vote on 6.4
11:38:08 <duncan_> if you're using amd64 you'd want some patches from 6.5
11:39:14 <TheHunter> i'm running x86-linux (so it don't need to compile :)). Considering that I'm struggling with an internal error atm, i think i'm gonna go for 6.5.
11:39:22 <duncan_> you can break most packages just by using 6.4, there's no need to go for the latest CVS for even more breakage :-)
11:40:01 <Oeje1> Lemmih: I'm thinking about writing programs more than I'm actually doing it.
11:41:45 * TheHunter likes living on the edge.
11:41:52 <Lemmih> Oeje1: Aren't we all? I'm usually reading research papers when I'm not hacking.
11:42:10 <TheHunter> and I still have my good old ghc-6.2.
11:43:41 <Oeje1> Lemmih: I'm hanging between school, work, vacation and Haskell programming and really doing neither.
11:45:34 <musasabi> How did I get the type of a Reader monad containing STRefs (which should be mutated) right?
11:45:43 <Lemmih> Trying to juggle while idling with one foot on a unicycle in a small room is also lots of fun.
11:48:48 <TheHunter> ReaderT (STRef s a, STRef s b) (ST s) a ?
11:57:44 <bourbaki> TheHunter: do you happen to be familiar with k-Forms?
11:58:13 <musasabi> TheHunter: thanks, I was putting the 's' in the wrong place.
11:58:34 <TheHunter> bourbaki, no.
11:59:34 <bourbaki> damn noone seems to know k-Forms ...
11:59:48 <bourbaki> maybe ill write my mathprof a mail
12:00:14 <Oeje1> Doing Russian -> Danish word translations.  Got 56% correct. :-/
12:01:00 <Oeje1> Oh, I mean da -> ru.
12:07:09 <Oeje1> This language training program is quite clever.
12:27:21 <a4st> hello! i'm new to haskell, are there any example of using haskell in production, serios applications?
12:27:39 <Philippa> define "serious" - does GHC count?
12:27:54 <a4st> sure
12:28:05 <ibid> darcs too?
12:28:18 <a4st> i don't know about darcs...
12:28:23 <ibid> why?
12:28:32 <ibid> it is a real-world application
12:28:41 <ibid> and unlike ghc, it's not a compiler :)
12:28:42 <a4st> where can i read about?
12:28:58 <a4st> yes, exactly what i mean..
12:29:05 <ibid> (sometimes i get to answer questions like "is haskell good for anything else but compilers")
12:29:32 <a4st> and what do u answer?
12:29:38 <ibid> http://www.darcs.net/
12:29:47 <lightstep> haskell helps creating a very good perl6 compiler
12:30:09 <ibid> a4st: well, darcs is a very good proof of "yes" :)
12:30:26 <lightstep> althogh most of the code is interpreter&tests
12:30:35 <a4st> yes, i've heard that functional languages are good for compilers but what about web services, for examples?
12:30:51 <ibid> there is also a haskell httpd, but i don't know if it's maintained
12:30:57 <ibid> web services are overhyped
12:31:05 <ibid> incidentally :)
12:31:19 <ibid> not that you couldn't do them in haskell :)
12:32:01 <a4st> sure you can program everything in haskell but how fast, secure, maintenable...
12:33:07 <ibid> the jury is still out on that one
12:33:09 <musasabi> Well generally haskell is faster than popular scripting languages. There are less ways to shoot you in the foot so that helps with security and maintainablity.
12:33:28 <ibid> there aren't that many public cases where it could be investigated
12:33:37 <musasabi> Of course the real issue is library support most of the time.
12:34:20 <Oeje1> a4st: A languages promotes a way of thinking.  Which language promotes the best way of thinking?
12:35:31 <ibid> imo, regardless of whether haskell can be used to make fast, secure and maintaneable code, it is worth knowing simply because it's different
12:35:46 <a4st> ok, agree! it's indeed nice choice, but what if i have to develope an industrial strengh application for... 1man/year. Is it still a good choice? Or Java is better with its j2ee?
12:35:52 <ibid> because all the different languages you know make you a better programmer regardless of which language you're currently using
12:36:15 <Oeje1> a4st: What is your application domain?
12:36:36 <a4st> let's say DB, inventory management
12:38:25 <Oeje1> Hm, I haven't played much with data bases, so I don't really know.
12:38:32 <a4st> and it's free to choose whether it's web based or not
12:40:03 <a4st> my prob: i do see the haskell is indeed a very nice language with many features but if i as a project manager choose haskell and not java, will i be fired in a year or not?? ;-)
12:40:54 <Oeje1> a4st: You would be fired per principle. :-P
12:40:57 <a4st> i guess, i will, but i'd like to see it others
12:41:28 <a4st> Oeje1: what do u mean?
12:43:06 <Oeje1> a4st: I mean you would get a much shorter leach choosing anything other than mainstream tools, I think.
12:44:10 <a4st> yeah, it is ;-)
12:44:41 <Oeje1> If you were managing ten code monkeys, then choosing Haskell would be suicide, becuase they wouldn't know it.
12:46:25 <Oeje1> I would let my programmers choose, because the damage has already been done choosing the programmers.
12:46:29 <a4st> yeah, it's another question. but even if they will be skilled in it...
12:48:36 <Oeje1> a4st: It depends; if you are writing from scratch, then sure.  If there is something out there almost usable then take it and adapt it.
12:49:25 <basti_> hmm. will higher order typing ever make it into haskell?
12:49:27 <a4st> 'sure' you means taking haskell, don't you?
12:49:38 <basti_> as in "encaspulating monads"
12:49:53 <Oeje1> Personally I wouldn't hire anyone with under 10 years of professional Haskell 98 experience.
12:50:17 <TheHunter> oh, ContT doesn't promote MonadPlus.
12:50:24 <Oeje1> a4st: Yes, I mean that.
12:50:30 <a4st> Oeje1: ;-) are you going to find anyone then?
12:50:36 * basti_ .o° ( :-o )
12:51:27 <Oeje1> a4st: I'd be comfortable with that handful of people who actually has it. :-)
12:52:17 <wagle> vacuously?
12:52:17 <a4st> Oeje1: a good seed
12:52:36 <Oeje1> wagle: Pardon?
12:52:59 <wagle> noone one the planet has 10 years of professional haskell 98 experience
12:53:05 <humasect> heh
12:53:06 <wagle> s/one/on/
12:53:10 <humasect> haskell... 1998.
12:53:31 <humasect> empty handful oeje1 ;)
12:54:09 <wagle> i figured that he wouldnt be hiring people with over 10 years of experience either
12:54:33 <wagle> conclusion seemed to be that he wasnt hiring..  *<8-D
12:54:55 <Oeje1> wagle: You are pulling my leg.
12:55:48 <wagle> i dunno, i just got here, havent carefully studied the scrollback
12:56:46 <wagle> ten years ago was 1995
12:57:25 <wagle> seems like it you with the grip on my lweg
12:57:28 <wagle> leg
12:58:02 <Oeje1> Heh, my comment was a bit humorously refering to often seen job adverts specifing this and that qualification giving the impression that they are looking for D. E. Knuth or Peter Nauer.
12:59:08 <wagle> i see it as "must not be easily intimidated by tought problem specifications"
12:59:30 <wagle> or "must be able to speell"
12:59:34 <wagle> (sigh)
12:59:54 <Oeje1> Dijkstra is excluded, since he has to work home.
13:00:58 <Oeje1> Greetings, beschmi.
13:01:05 <beschmi> hi
13:03:33 <Oeje1> Well, I've done mine today polluting the #haskell logs.  Good night all.
13:04:19 <Philippa> <a4st> yes, i've heard that functional languages are good for compilers but what about web services, for examples? <- the library support's not wonderful, but if you don't mind having to do a little bit of work I'd go with it (having written a wiki clone in haskell)
13:05:22 <lightstep> using Network.CGI is tons easy
13:05:48 <lightstep> but it doesn't help you at all to create xml services
13:05:55 <wagle> how about parsing all the wacky versions of html out there?
13:06:10 <lightstep> (i mean, it helps, but not enough)
13:06:21 <Philippa> yeah, you'd have to hack it further
13:06:46 <Philippa> not too big a problem so long as somebody on the team understands CGI properly, but hey
13:06:55 <Philippa> wagle: "don't do it" :-)
13:07:25 <wagle> Philippa: i wanna write a web crawler that copes with all the crap
13:07:53 <a4st> If we take this Network.CGI, will the application be scalable enough?
13:07:56 <Philippa> ah. Have fun
13:08:22 <Philippa> a4st: yes, by virture of having provided hardly any real base to rest on. You get your input, you get an output channel, the rest's up to you
13:08:46 <Philippa> you want database access, you do that separately (I've not used the libs available, I've heard they're not bad though)
13:09:26 <Philippa> now, if you need to process a serious volume of traffic the real problem's the fact you're running large CGIs at all - talk to your server folks
13:09:40 <Philippa> it won't get in your way code-wise though
13:11:36 <a4st> ok, another question: we have haskell with its clean style, small amount of code and so on and java with its libraries. What will immly faster development and maintenance: haskell or java?
13:11:49 <basti_> haskell.
13:11:59 <basti_> with competent people.
13:12:05 <wagle> rock, paper, scissors
13:12:12 <a4st> really? i'd tend to java
13:12:14 <Philippa> yep. Though it may take slightly longer to get your first prototype running
13:12:29 <Darius> a4st: It depends on whether someone has already solved your problem and made the solution available.
13:12:31 <Philippa> (in response to basti)
13:12:38 <basti_> yes that might happen
13:12:40 <Philippa> or solved a more general incarnation
13:12:43 <basti_> but it would be easier to toy around with
13:12:50 <basti_> hugs Bla.hs
13:12:53 <basti_> -grind-
13:12:56 <basti_> *play*
13:13:13 <Philippa> basti_: wait 'til you see what I'm gonna do once hs-plugins works on my box :-)
13:13:25 <basti_> mmmh
13:13:27 <basti_> btw.
13:13:35 <basti_> is there a haskell webserver?
13:13:44 <Philippa> hws? Though it's not really production-ready
13:13:47 <basti_> (+ plugins = fun)
13:13:58 <Philippa> and yes, hws-wp is the hs-plugins-included version
13:14:10 <basti_> imagine... haskell-scripts in webpages
13:14:16 <basti_> :)))
13:14:28 <wagle> its hard to tell what galois is doing, but they do go as far as to say that they do web stuff
13:14:42 <Philippa> yeah. The language is suited, and they'd have the time to put together the libs
13:14:54 <wagle> which i take to imply that they have a haskell webserver
13:15:10 <Philippa> that, or an effective way to run haskell CGIs quickly
13:15:18 <basti_> the version number is a brave 0.0.1
13:15:19 <basti_> :)
13:16:09 <wagle> they have good haskell people, so i'd say they had one if they wanted one
13:19:49 * basti_ ./configure
13:26:49 <basti_> hmm
13:26:53 <basti_> what about Wash? ;)
13:35:02 <Darius> basti_: What about WASH?
13:35:31 <basti_> is it useful?
13:35:36 <basti_> it makes a good impression
13:44:07 <Philippa> it didn't grab me
13:44:14 <Philippa> was rather unsuitable for writing a wiki
13:48:33 <basti_> indeed
13:54:42 <Darius> Philippa, dons: What was the issue with hs-plugins on Win32, again?
13:55:42 <Darius> Just the file name separators?
13:59:06 * boegel waves at everyone in #hasekk
13:59:16 <boegel> @seen samc
13:59:17 <lambdabot> I haven't seen samc
13:59:24 * boegel scratches his head
13:59:27 <basti_> buegel!
13:59:43 <Darius> @seen samc_
13:59:43 <lambdabot> I haven't seen samc_
13:59:47 <boegel> bosti_ !
14:00:45 <basti_> http://localhost/cgi-bin/calculator < wow
14:01:03 <basti_> 30 minutes from "what is wash?" to running an example script.
14:01:04 <boegel> basti_: localhost ? :)
14:01:08 <basti_> uhm
14:01:09 <basti_> lol
14:01:14 <basti_> meeep
14:01:30 <basti_> "bzzt" so to say
14:02:44 <basti__> well
14:02:52 <basti__> setting up portforward kills my connection
14:03:23 <basti__> http://p54ae3161.dip0.t-ipconnect.de/cgi-bin/calculator
14:03:32 <basti__> does this work?
14:05:03 <Darius> basti__: I'd get rid of the initial "0" and obviously this particular application would be better suited as a client-side script.
14:05:06 <boegel> basti_: yep
14:05:20 <basti__> its just an example i nicked
14:05:24 <basti__> but I was QUICK ;)
14:05:28 <basti__> but I'll try
14:05:39 <basti__> wash is a nice little thing
14:06:05 <musasabi> Wash is nice for little demos.
14:06:16 <basti__> it doesnt scale?
14:06:25 <musasabi> but not very suitable when one wants something involved.
14:06:37 <basti__> whats the problem?
14:06:45 <musasabi> basti__: usually one starts wanting separate templates etc.
14:07:01 <basti__> hmmm but isnt that a question of the stuff generated?
14:07:15 <basti__> I'll give it a try i think
14:08:06 <musasabi> good luck :-)
14:08:09 <basti__> -g-
14:29:21 <astrolabe> is there a quicker way to write '\a -> (p1 a) && (p2 a)'?
14:30:34 <Darius> liftM2 (&&) p1 p2
14:30:46 <astrolabe> Thanks
14:30:58 <Darius> But you'd need ((->) r) to be a reader monad instance for it to work.
14:31:04 <basti_> :-o
14:31:06 <xerox> Great.
14:31:10 <Darius> Also it may be considered poor taste.
14:31:17 <Heffalump> very poor taste.
14:31:22 <xerox> It's bad style?
14:31:33 <Heffalump> abuse of the Monad type class.
14:31:44 <xerox> Oh :( I really liked it :)
14:31:51 <Heffalump> oh, it's neat.
14:31:54 <Darius> If you do this often enough, writing functions that make such things (i.e. the liftM2 instance essentially) would probably be sensible
14:32:24 <Darius> If this is the only case, then the lambda abstraction is pretty short.
14:32:34 <dons> hehe, that's a good one :)
14:32:45 <xerox> I was writing a suggestion like "Import Control.Arrow; and (p1 &&& p2)" but and works on lists..
14:33:21 <xerox> (uncurry (&&)) (p1 &&& p2) --maybe..
14:33:40 <Darius> p1 &&& p2 >>> uncurry (&&)
14:33:53 <Darius> Or add parens if necessary
14:33:54 <xerox> Oh yes.
14:34:07 <xerox> Arrows are neat :)
14:34:30 <xerox> Would it be considered poor style too?
14:34:31 <Heffalump> yes!
14:34:36 <Heffalump> (well, by me)
14:34:40 <xerox> :(
14:34:46 <xerox> How would you do it?
14:35:18 <gzl> score. this silly script finally works.
14:35:23 * gzl pokes WASH.
14:35:41 * xerox tells everyone secretly to scream "poor style" at Heffalump's solution when he'll write it.
14:36:01 <xerox> j/k :)
14:37:02 <Heffalump> I'd make a proper lifting combinator if one didn't already exist.
14:37:23 <xerox> Heffalump: I'm very curious, can you show me what you mean?
14:37:29 <Heffalump> possibly involving a type class
14:37:45 <Heffalump> class TakesArgs a where
14:38:05 <Heffalump> oh, hmm.
14:38:09 <Darius> xerox: Essentially he means, lift2 f g h x = f (g x) (h x) (= liftM2 f g h x)
14:38:28 * Heffalump realises the type class is a bit tricky and abandons that idea
14:38:32 <Heffalump> but yes, what Darius said
14:39:31 <dons> such a shame that '(=' '=)' aren't valid Haskell varids
14:39:55 <xerox> I don't realize why using liftM2 would be an abuse, but that's probably due to my poor Monad comprehension.
14:40:22 <gzl> i want to be able to call a function with some kind of flag saying that either x happened or y happened. is it reasonable to create some data type with OptionA | OptionB constructors and then just pass those in as needed?
14:40:24 <dons> I'd really like smileys combinators
14:40:56 <dons> if only we had a lexer metalanguage...
14:41:04 <Heffalump> I just think it's an abuse of a type class that isn' tmeant for that
14:41:16 <Heffalump> gzl: or you could use Either () () and look for Left () and Right ()
14:41:32 <xerox> Heffalump: do you bother to explain to me what is meant for, instead?
14:41:40 <Heffalump> well, monadic stuff :-)
14:41:43 <kosmikus> dons: you could theoretically use the syntax macro functionality in ehc/uhc
14:41:51 <gzl> Heffalump: hm, ok. but if I do my thing, it's more easily expanded in the future with a wider variety of flags, no?
14:41:54 <Heffalump> things that make proper use of >>= and return
14:41:56 <Heffalump> gzl: yes
14:42:04 <kosmikus> type classes are an abuse.
14:42:05 <dons> kosmikus: ah!
14:42:08 <Heffalump> I was just suggesting a shortcut if you didn't want the overhead.
14:42:10 <gzl> right
14:42:19 <gzl> ok, thanks
14:42:28 <Heffalump> kosmikus: not as bad an abuse as generic programming ;-)
14:42:35 <kosmikus> heh ;)
14:43:01 <kosmikus> compare the Generic Haskell libraries to Oleg's code, and tell me what looks like the bigger abuse ;)
14:43:20 <dons> hehe
14:43:32 <Darius> kosmikus: Implement OCaml's object and module language using Generic Haskell and tell me they're comparable.
14:44:12 <Heffalump> you haven't given anyone time to abuse the GH type system yet.
14:44:18 <Heffalump> s/time/enough &/
14:44:30 <Heffalump> with all that extra power, just think of the horrors Oleg could unleash
14:44:37 <kosmikus> Darius: that's partially besides the point
14:44:56 <kosmikus> I am not contesting the expressive power of type classes at all
14:50:57 <araujo> oh, hello kosmikus 8)
14:51:04 <kosmikus> hi araujo
16:20:05 <_metaperl> hi everyone. I have a rather long question typed up at this URL: http://www.hcoop.net/~terry/haskell/sig-gen/SigGen.hs
16:21:22 <stepcut> hrm, I need Data.Generics for ocaml :-/
16:22:26 <Darius> _metaperl: What does it return with "file.bad"
16:22:42 <_metaperl> it doesnt return anything
16:22:45 <_metaperl> as far as I know
16:22:55 <_metaperl> how would I know?
16:23:07 <Darius> _metaperl: Do processConfig "file.bad" >>= print
16:23:31 <stepcut> camlp4 will give me the AST for a .ml file, but now I want to map over the tree and find any occurances of gettext "some string" and extract them into a .pot file :-/
16:24:09 <_metaperl> ok that helped:
16:24:09 <_metaperl> *Main> processConfig "file.bad" >>= print
16:24:09 <_metaperl> *** Exception: Prelude.read: no parse
16:24:09 <_metaperl> *Main> processConfig "file.good" >>= print
16:24:09 <_metaperl> Config {standardPrefix = "hi", standardPostfix = "hey"}
16:24:10 <_metaperl> *Main>
16:24:35 <_metaperl> what was the return value of processConfig in both of these cases?
16:24:43 <Darius> _metaperl: Before you weren't using the value return by processConfig so the error was never forced.
16:25:15 <_metaperl> I see well the function argument to (>>=) has type a -> m b
16:25:18 <_metaperl> @type rint
16:25:20 <_metaperl> @type print
16:25:25 <lambdabot> bzzt
16:25:25 <lambdabot> print :: forall a. (Show a) => a -> IO ()
16:25:41 <_metaperl> @type (>>=)
16:25:43 <lambdabot> (>>=) :: forall m b a. (Monad m) => m a -> (a -> m b) -> m b
16:26:26 <Darius> If you want the error to come earlier, changing 'return $ ...' into 'return $! ...' would likely do it.
16:26:40 <Darius> @type (>>= print)
16:26:42 <lambdabot> (>>= print) :: forall a. (Show a) => IO a -> IO ()
16:55:44 <Darius> @index listToMaybe
16:55:45 <lambdabot> Data.Maybe,Maybe
16:59:33 <dan2> @type read
16:59:35 <lambdabot> read :: forall a. (Read a) => String -> a
17:01:43 <Darius> @type listToMaybe . reads
17:01:44 <lambdabot> bzzt
17:01:53 <Darius> @type Maybe.listToMaybe . reads
17:01:55 <lambdabot> Maybe.listToMaybe . reads :: forall a.
17:01:55 <lambdabot> 			     (Read a) =>
17:01:55 <lambdabot> 			     String -> Maybe (a, String)
17:02:25 <Darius> @type fmap fst .Maybe.listToMaybe . reads
17:02:27 <lambdabot> fmap fst .Maybe.listToMaybe . reads :: forall a.
17:02:27 <lambdabot> 				       (Read a) =>
17:02:27 <lambdabot> 				       String -> Maybe a
18:20:54 <bourbaki> moin
18:22:12 <beschmi> greetings, bourbaki
18:38:53 <bourbaki> how can i build an abstract type like vector in haskell?
18:40:34 <dons> is a heterogenous list good enough? or do you want something simpler? what exactly does 'vector' do?
18:42:06 <bourbaki> well i want to have something with wich i can map a collection of coefficients to |R^3
18:42:52 <bourbaki> and i want to be able to differentiate these functions
18:48:52 <Darius> Have you read the papers by Jerzy Karcmarczuk?
18:49:50 <bourbaki> i know that he has some stuff in the vicinity of what i thought about
18:50:52 <bourbaki> do you happen to know if there is some lib that allows me to do differenting on functions?
18:53:14 <Darius> Since differentiation is alebraic it can be done with Haskell functions.
18:53:51 <bourbaki> i never had a doubt about that :) im just too lazy to do that all myself ;)
18:53:55 <Darius> Jerzy has several examples and Oleg has a post on haskell(-cafe) about using type classes to do differentiation as well.
18:54:30 <bourbaki> but there is no actual ready to use implementation?
18:54:33 <Darius> bourbaki: I wasn't talking about "symbolically" (though that can be done as well)
18:55:07 <Darius> bourbaki: Jerzy should have the code available or it's in the papers.  Either way it's very little code.  Oleg's code is on the mailinglist and is also short.
18:55:30 <bourbaki> i see
18:55:53 <dons> does docon provide anything relevant?
18:56:14 <dons> http://haskell.org/docon/
19:06:14 <lispy> haskell is a great language, but i was thinking about a project where haskell is probably not a good choice.  I wanted to write an emulator
19:06:23 <autrijus> why not?
19:06:37 <lispy> well, i'm not sure
19:06:45 <autrijus> emulator for what?
19:06:54 <lispy> for a processor
19:07:14 <lispy> i was thinking there would be a need for realtime preformance
19:07:25 <lispy> say i wanted to emulate the gamecube for example
19:07:28 <dons> Is a processor emulator written a lot like an interpreter? though for a very low-level language?
19:07:50 <lispy> dons: i've never written one, but that seems reasonable
19:08:03 <dons> if so, you should be able to get rather good performance I'd think, for little implementation effort.
19:08:16 <bourbaki> i doubt that you will be able to emulate one of the new consoles on a pc
19:08:22 <dons> You could then try rewriting it in C, if performance proved to be a problem.
19:08:45 <autrijus> or just inline the critical paths in C.
19:08:45 <bourbaki> their processing units are too specialized
19:08:49 <autrijus> FFI is wonderful.
19:08:54 <lispy> the actual processor i care about in MMIX, but i thought GC would be a good example of a hard system to emulate :)
19:09:00 <dons> autrijus: :)
19:09:04 <Darius> bourbaki: Turing completeness
19:09:13 <bourbaki> yes you can emulate it
19:09:19 <bourbaki> but not at playable speed
19:09:50 <lispy> i was hoping to emulate with consistent performance
19:09:53 <lispy> how is that for a goal?
19:10:00 <bourbaki> the architecture is just too different
19:10:15 <bourbaki> consistent as in?
19:10:31 <dons> lispy: I really think you should have a go via Haskell first. With such low-level ops, you'd be able to use straight unboxed ops if necessary, which are exactly equiv to C. The main issue would be implementation cost though - how much effort do you want to expend?
19:10:49 <lispy> if the user were to run software on the emulated system it would not seem jumpy
19:11:20 <bourbaki> heheh :) no just always slow ;)
19:11:50 <lispy> bourbaki: i think that is better than unpredictable performance, yes
19:11:54 <bourbaki> since there is no emulator for these new consoles by the old emu freaks you can place a sure bet that its impossible
19:12:24 <bourbaki> as fast as possible is best imho even if it means to have some performance fluctiations
19:12:32 <lispy> there are infantile gc emus floating aronud, but gc was just an example
19:12:37 <bourbaki> otherwise you would run on the slowest level always
19:13:13 <bourbaki> even some you can really play games with at acceptable speed?
19:13:34 <lispy> probably not, but i really don't want to focus on gc
19:13:42 <lispy> it was a bad example :)
19:13:47 <bourbaki> :)
19:14:05 <dons> I think writing hardware emu in haskell would be an interesting project. hmm..
19:14:14 <bourbaki> well to me that emu stuff sounds like a simple algebraic problem
19:14:31 <bourbaki> you just need a cpu isomorphisom
19:14:44 <lispy> hmm...
19:15:03 <lispy> that is an odd way to look at, to me :)
19:15:19 <bourbaki> :)
19:15:21 <dons> hehe. we could encode the proof in the type system ;)
19:15:29 <lispy> i like algrebra as much as the next group theorist, tho don't get me wrong :)
19:16:01 <dons> QuickCheck would be pretty useful too. There's lots of good Haskell tools for a project like this
19:16:15 <lispy> QuickCheck?
19:16:46 <lispy> lisp is my other candidate language for this project
19:17:04 <lispy> the nice thing about lisp is that to me (a haskell newbie) performance is predictable
19:17:28 <lispy> all i need to do is watchout for consing
19:17:58 <dons> haskell is the same - it doesn't have "random" performance issues. just the usual functional language issues that make sense once you know about them.
19:18:06 <lispy> the other conceptual problem i had was tracking the emulated machine's state
19:18:11 <dons> and profiling almost always kills them off.
19:18:35 <dons> state could be cleanly handled in Haskell. a pleasure even.
19:18:46 <dons> I'm almost tempted to write an emulator now :}
19:19:24 <bourbaki> {:{) <- a mexican smilie ;)
19:19:46 <dons> I think it would be short and fast to write, and would take fairly little effort to get reasonable performance.
19:19:55 <dons> just a matter of getting a good spec.
19:21:05 <lispy> how would  you model the state?  just return a new state object after each instruction?
19:21:24 <lispy> that seems  like it would cause a lot of garbage collection
19:21:39 <dons> possibly, or just hold a single IORef with a mutable state object
19:21:47 <dons> that's often required for state-intensive apps
19:22:11 <dons> a text editor is a good example, as would the buffers you'd be modelling in the emulator, I'd think.
19:22:11 <lispy> i'm a haskell newbie, is an IORef related to monads?
19:22:37 <dons> not really. it's just a reference data type
19:22:54 <dons> providing mutable values
19:23:12 <dons> hence good for apps with large, frequently modified, state components
19:23:39 <lispy> yes, that would be good
19:23:53 <lispy> and QuickCheck would be a life saver
19:25:48 <beschmi> there is an interview with the creator of valgrind where he mentions that he would have liked to write parts of it in haskell if it wouldn't have to run in the same address space with the running programm
19:26:47 <dons> Julian Seward, Mr. Valgrind, worked on the GHC native codegen, and originally wrote valgrind to test out GHC's codegen.
19:27:36 <beschmi> yeah, the interview is at http://builder.com.com/5102-6375-5136747.html
19:28:36 <dons> "Valgrind is essentially an emulator" <-- didn't know that.
19:29:56 <cm> salut
21:20:14 <skypp> join #perl6
21:24:16 <bd_> hmm, anyone know why parsec might match the same text twice?
21:28:02 * stepcut ponders
21:37:21 <bd_> oh, nm, I'm an idiot. I was sending it the input twice.
21:39:28 <dons> :)
21:39:43 <bd_> I was wondering why tee wasn't sending it to my screen...
21:41:25 <stepcutHM> haha
22:54:18 <Lemmih> Good morning, #haskell.
22:54:24 <autrijus> greetings lambdalemmih
23:03:13 <musasabi> morning
