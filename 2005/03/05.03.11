00:40:32 <Magical1> whats a bitboard?
00:45:45 <Magical1> can someone explain why Hugs has problems when I try to import Control.Monad ?
00:50:23 <nlv11757__> why do you use hugs?
00:50:27 <nlv11757__> why not ghci?
00:53:04 <Magical1> because ghci is not installed on these machines
00:53:45 <Magical1> unfortunately :'(
01:00:26 <Itkovian> nlv11757__, I have no problem ...
01:00:28 <Itkovian> Prelude> :l Control.Monad
01:00:28 <Itkovian> Control.Monad>
01:02:38 <Magical1> hummmmm, I'll try that
01:11:20 <Magical1> Itkovian: I can get it to load that way but I cannot get it to import for use in my program
01:22:21 <Itkovian> Magical1, hmm ... buggers
01:31:49 <Magical1> Itkovian: yeah, pretty much
01:36:53 * TheHunter can't believe his eyes.
01:37:29 <TheHunter> According to quickCheck, I have written an isomorphism between a -> (b -> r) -> r and ((a -> b) -> r) -> r
01:40:30 <TheHunter> (using exception handling, though, but still, this is really strange)
01:54:01 <nlv11757__> does anyone know a thing or two (or three) about .lhs files used to generate the code as well as the documentation from?
02:04:42 <Itkovian> nlv11757__, you start the code lines with a '>' ...
02:17:12 <nlv11757__> itkovian, so ghc accepts files with this format ?
02:18:04 <nlv11757__> and latex will ignore them if i put them in code blocks or something like that? or do i have to preprocess the .lhs before i feed it to latex
02:21:29 <Itkovian> nlv11757__, yes you shoudl preprocess
02:22:24 <Itkovian> nlv11757__, use lhs2TeX afaik
02:23:51 <nlv11757__> afaik?
02:29:37 <nlv11757__> hmm well in any case it's good news because I used lhs2TeX before, thanx
02:31:34 <shapr> @Yow !
02:31:34 <lambdabot> Sorry, I don't know the command "Yow", try "lambdabot: @listcommands"
02:32:20 <nlv11757__> @afaik
02:32:21 <lambdabot> Sorry, I don't know the command "afaik", try "lambdabot: @listcommands"
02:34:12 <ibid> nlv11757__: "as far as i know"
02:37:52 <earthy> ummm...
02:38:19 <earthy> ghc groks .lhs files with haskell in \begin{code} \end{code} blocks and arbitrary text outside those blocks
02:39:22 <earthy> for doing LaTeX-y stuff with it you will have to specify what LaTeX should do with the \begin{code} \end{code} blocks
02:39:38 <earthy> one easy way is to make \begin{code} and \end{code} aliases for \begin{verbatim} \end{verbatim}
02:39:52 <earthy> using lhs2TeX is ofcourse the luxurious solution.
02:40:33 <kosmikus> lhs2TeX, being a preprocessor, allows you to use > as well, if you prefer
02:55:26 <nlv11757__> ok, but do i have to preprocess the file before i can feed it to ghc?
02:55:46 <nlv11757__> ow im called off for lunch bbl
02:57:42 <kosmikus> as long as your file is still valid .lhs, there's no need to preprocess it before feeding it to ghc; if you want, though, lhs2TeX allows you to perform certain transformations on your source code as well
02:58:53 <qFox> what was the function to indicate the priority of a function?
02:59:04 <qFox> when parsing
02:59:12 <bringert> shapr: I've got something for you
03:02:06 <Heffalump> qFox: do you mean of an operator?
03:02:22 <qFox> yea.. oh right, thats only valid on operators
03:02:23 <Heffalump> the declaration you want is something like 'infix 5 +'
03:02:37 <Heffalump> or infixl or infixr
03:02:47 <qFox> yeah i remember now. thanks
04:36:02 <nlv11757__> why isnt there a lookup that searches on the right element and returns the left
04:37:51 <tromp> because it's easily composed as lookup x . map swap
04:41:00 <nlv11757__> in that case i'd rather define a lookup2 instead of processing the list two times i think
04:41:19 <Heffalump> the wonders of lazy evaluation mean that the list won't be processed twice
04:41:33 <nlv11757__> ow crap, of course
04:41:40 <nlv11757__> sometimes i forget how great lazy evaluation is
04:41:47 <nlv11757__> i think i've been around ocaml too much
04:43:03 <tromp> you're ruined for life:(
04:43:36 <nlv11757__> i had my gloves on and only had to do a pretty printer with the objective to get out of ocaml and into Haskell :D
04:43:41 <nlv11757__> so it was righteous
04:54:22 <earthy> eeeewwwww! Simon M is suggesting to add inline C-- code to GHC...
04:57:02 <Lemmih> Neat.
04:58:53 <Heffalump> coool
05:05:17 <Philippa> inline C-- as IO operations would be very, very cool
05:06:01 <Philippa> we've already got the FFI, so it's not like you can't screw an app sideways from the IO monad already
05:09:38 <halcyon10> hi, i'm trying to implement my first Tree-type in Haskell. The type-declarations compile without errors, but when i try to define a function which should generate a specific Tree i get a type error: http://www.rafb.net/paste/results/kGNVRB28.html
05:09:59 <bourbaki> moin
05:12:50 <ejt> halcyon10: something I find curious ... you can have an empty internal node according to your data types ?
05:14:30 <halcyon10> ejt: yes, i want to be able to define a Tree with a single empty node. else it wouldn't be possible to make a tree with depth 0 which has a reasonable value
05:15:10 <halcyon10> and i want to be able to make trees which only have values on their leafnodes and trees which can have values at every branch
05:15:14 <ejt> then it should just be Empty
05:15:17 <ejt> ie. a fruit
05:15:36 <ejt> k your second line
05:17:15 <halcyon10> hm i don't understand exactly what you mean. do you mean i should change the 2nd line to: data Fruit a = Empty ?
05:17:45 <ejt> no, if you really want branches with empty nodes you're fine
05:18:17 <halcyon10> ok, and how can i fix my binTree-function? what causes the compile-error?
05:18:30 <ejt> looking ...
05:20:19 <swiert> halcyon10: what is the type of binTree? what is the type of Empty?
05:20:58 <halcyon10> hm, BoolTree and Fruit
05:21:41 <swiert> exactly - you're type signature says you will return something of type BoolTree, but you're returning something of type Fruit.
05:21:45 <ejt> data Tree a  = Leaf (Maybe a) | Branch (Maybe a) (Tree a) (Tree a)
05:22:31 <halcyon10> swiert: ok, and how can i make it clear to the compiler that i want a (Tree Bool) (Fruit Bool) Empty ?
05:23:54 <swiert> halcyon10: can you think of a way to make a Tree from a Fruit?
05:24:16 <nlv11757__> @eval map snd $ zip [1,2,3,4,5] (repeat "<name>")
05:24:17 <lambdabot> [<name>, <name>, <name>, <name>, <name>]
05:25:30 <halcyon10> swiert: i thought that the first case of 'data Tree a  = Fruit a | Branch (Fruit a) (Tree a) (Tree a)' ensures that i can construct a Tree from a Fruit ? but i think i don't know the correct syntax to implement what i want
05:26:26 <nlv11757__> THose latter Fruits are types, not data constructors
05:27:34 <halcyon10> nlv11757__: hm, i think this is the part i don't understand
05:28:11 <nlv11757__> ok if you make a datatype (using the keyword data) the FIRST word after every "|" is the dataconstructor
05:28:23 <nlv11757__> It's just a name
05:28:38 <halcyon10> ok
05:28:45 <nlv11757__> data Tree a = Fart | Fart2 (Tree a) (Tree a)
05:28:52 <nlv11757__> see i can choose any name
05:29:03 <Philippa> "just a name" is slightly misleading (it becomes amongst other things a function that builds values of the relevant type), but yeah
05:29:10 <nlv11757__> using those names i can construct something of TYPE "Tree a"
05:29:15 <nlv11757__> i wasnt finished Philippa
05:29:18 <nlv11757__> :)
05:29:56 <nlv11757__> those "names" are thus actually functions producing something of type "Tree a"
05:30:23 <nlv11757__> from the data definition you can see what arguments and how many
05:30:41 <halcyon10> oh, so the data constructor 'Fruit a' should already be able to get me a 'Tree a'?
05:30:51 <Philippa> yep
05:30:57 <nlv11757__> Fruit is the dataconstructor, a is the type
05:31:11 <Philippa> Fruit (1::Int) :: Tree Int
05:31:17 <nlv11757__> ie the argument you have to apply the name "Fruit" to, to get something of type "Tree a"
05:31:32 <Philippa> similarly, Fruit "apple" :: Tree String
05:31:44 <halcyon10> until now i thought more like: 'Tree a should be a new Type that can either be a Fruit a or a branch xxx'
05:32:13 <Philippa> that's close. "A Fruit with an a or a branch with a Tree a and a Tree a", maybe
05:32:44 <nlv11757__> so Fruit is the function ---> Fruit :: a -> Tree a
05:33:01 <nlv11757__> and ----> Branch :: Tree a -> Tree a -> Tree a
05:33:01 <halcyon10> ah, i see
05:33:27 <Magical1> can some one suggest why I am getting the following error "Error "file.hs":19 - Instance of Num Int64 required for definition of gameStart"
05:33:42 <nlv11757__> hehe depends on what you are doing in gameStart
05:34:13 <nlv11757__> probably doing something with a Int64 only reserved for instances of Num
05:34:34 <Magical1> that sounds about right
05:34:38 <Philippa> of course, Int64 should be an instance of Num
05:34:49 <Philippa> which version of GHC?
05:35:04 <Philippa> (so I can RT right M)
05:35:23 <Magical1> lol, I wish, I've only got HUGS on these machines :'(
05:35:29 <Philippa> d'oh
05:35:34 <Philippa> which Hugs? :-)
05:35:35 <halcyon10> ok, thanks for your infos, i'm trying to apply the new knowledge and will come back if i'm having problems again :)
05:35:36 <Magical1> yup
05:36:28 <nlv11757__> have fun halcyon
05:37:24 <Magical1> November 2002, quite an old build
05:38:30 <shapr> @yow !
05:38:31 <lambdabot> Now that we're in LOVE, you can BUY this GOLDFISH for a 48% DISCOUNT.
05:38:37 <shapr> bringert: what is it?
05:39:18 <Philippa> 'lo shapr
05:39:43 <shapr> y0 Philippa, wazzup?
05:39:54 <shapr> You gwan skriv summat for TMR2?
05:40:25 <Philippa> um. Will do sometime this month, honest...
05:40:30 <Magical1> Philippa: any further suggestions?
05:40:41 <Philippa> am having a busy month though. Stuff like Damien's next student loan installment not coming through to deal with
05:40:49 <Lemmih> shapr: Do you know how to use sendmail with an external smtp server?
05:41:16 <Philippa> Magical1: RTFM, check you're importing the module that should have a Num instance for it, if there isn't one get a new build
05:41:29 <Philippa> an Int64 type isn't much use without a Num instance
05:41:46 <bringert> shapr: a GF grammar for stoneage sentences in swedish and english
05:42:00 <bringert> maybe something for your web-based traning program
05:42:24 <Magical1> okay, I'll check it out
05:42:31 <bringert> that mountain sings
05:42:31 <bringert> det där berget sjunger
05:42:31 <bringert> > Yes.
05:42:31 <bringert> Score 5/6
05:42:59 <bringert> lexicon about 200 words, based on swadesh lists
05:43:17 <bringert> subject-verb-object and subject-verb sentences
05:43:28 <bringert> four warm wide mouths swim
05:43:28 <bringert> fyra varma breda munnar simmar
05:43:28 <bringert> > Yes.
05:43:28 <bringert> Score 1/1
05:47:49 <shapr> bringert: wow, sounds cool!
05:48:27 <shapr> Yes this is perfect for the web-training program!
05:48:51 <shapr> Did you write it yourself? Or is it explicitly licensed?
05:49:55 <shapr> Lemmih: With postfix, as long as you have an external relay that accepts your submissions, you just set the name of the relay server.
06:02:18 <bringert> shapr: I wrote the gramar
06:02:21 <bringert> grammar
06:02:57 <bringert> it's in the current GF CVS
06:03:09 <bringert> hm, we should set up nightly GF snapshots
06:21:14 <shapr> or a darcs mirror via tailor
06:21:31 <ozone_> nightly girlfriend snapshots?
06:21:33 <ozone_> *snap*
06:21:38 <ozone_> and why am i called ozone_
06:21:45 <shapr> Lemmih: what's your priority for sendmail? sending darcs patches?
06:21:54 <shapr> ozone: because it underscores your importance of course
06:22:06 <ozone> shapr: *kills self*
06:22:21 <ozone> shapr: hey, you going to ICFP and haskell workshop this year?
06:22:29 <Lemmih> shapr: Yeah.
06:23:01 <Lemmih> Haskell workshop?
06:23:15 <Lemmih> ozone: Got an URL for that?
06:23:38 <ozone> here we go:
06:23:40 <ozone> http://www.cs.uu.nl/~daan/hw2005/
06:23:53 <ozone> colocated with ICFP
06:25:47 <Lemmih> Thanks.
06:29:05 * Heffalump will probably go to them
06:31:34 <shapr> ozone: I dunno, maybe.
06:31:39 <shapr> ozone: you showing up?
06:32:49 <shapr> ozone: The main obstacle for me is the entrance fee and the other assorted costs implying a required budget of at least 1500 euro. Would I rather buy a dual amd64?
06:33:52 <shapr> Lemmih: seems to me that a simple cgi script would work for submitting gpg signed patches instead.
06:34:32 <ozone> shapr: 1500 euro?  that expensive?
06:35:19 <Lemmih> shapr: Does such a script exists?
06:36:01 <shapr> Lemmih: no, but should be easy to write.. I got started on such a thing last night... and distracted as usual
06:36:02 <Lemmih> And are you offering such services at scannedinavian.org?
06:36:13 <shapr> If such a script existed, I would.
06:36:26 <Heffalump> shapr: does it really add up to that much?
06:36:41 <earthy> september.
06:39:16 <shapr> ICFP03 entrance fee was 500 euro or so. I forget how much lodging cost, but I suspect a flight to Tallin will cost me between 500 and 800 euro.
06:40:01 <Heffalump> oh, cos you live up in the frozen wastelands
06:40:18 <tromp> i've never paid over $150 in registration fee
06:40:26 <Heffalump> are you a student?
06:40:35 <tromp> not any more
06:40:52 <Heffalump> I'm fairly sure that non-student registration fees are more.
06:40:54 <Heffalump> than that
06:41:02 <ozone> yikes
06:41:04 <Heffalump> though with any luck Estonia will be fairly cheap
06:41:06 <ozone> tis good to be a student again!
06:41:12 <shapr> A flight from Heathrow would be perfect.
06:41:41 <Heffalump> I'll probably go from Stansted
06:42:14 <shapr> In any case, it can cost me 500 euro to get to Stockholm from here. From Stockholm to other places is much cheaper.
06:42:47 <shapr> y0 CosmicRay
06:42:47 <Heffalump> yeah, surely you want to go straight there from Stockholm?
06:42:50 <CosmicRay> morning shapr
06:42:52 <Heffalump> London is in the wrong direction
06:43:08 <shapr> Yes, I was just dreaming of living in a city where flights to other countries are cheap.
06:43:21 <CosmicRay> shapr: Chicago? :-)
06:43:27 <shapr> Stockholm
06:43:45 * Heffalump wants to be in Chicago next week.
06:44:04 <CosmicRay> do I read this right?  ghc 6.4 is out?
06:44:09 <CosmicRay> Heffalump: oh?  what takes you there?
06:44:13 <Heffalump> I want to be, not I will be.
06:44:17 <CosmicRay> oh.
06:44:23 <CosmicRay> Heffalump: why do you want to be then? :-)
06:44:28 <Heffalump> conference (AOSD 2005)
06:44:32 <CosmicRay> ah.
06:44:35 <CosmicRay> chicago is a fun city.
06:44:41 <Heffalump> if I'm really lucky I'll persuade work to send me to PLDI in June or whenever it is, which is also there.
06:44:58 <CosmicRay> but a lot of conferences tend to be out in the suburbs, which are a lot less fun, alas.
06:45:00 <Heffalump> and I would have been going there in April for a different work conference but I'd already booked a holiday to Iceland by the time they told me
06:45:05 <Heffalump> I think they're in the centre.
06:45:17 <CosmicRay> there's a lot to do over there
06:45:36 <CosmicRay> we get to chicago periodically, usually because we have a train layover there
06:45:44 <CosmicRay> sometimes we have 5 or 6 hours before our connecting train
06:45:54 <CosmicRay> but we always find something to do
06:46:04 <Heffalump> i didn't know people did much travelling by train in the US.
06:46:16 <CosmicRay> Woot, ghc 6.4 is out!
06:46:29 <CosmicRay> Heffalump: most don't, except in the Boston - New York - Washington area
06:46:46 <CosmicRay> Heffalump: my wife and I, however, enjoy traveling by train, and take the train whenever we have the option to do so.
06:47:30 <CosmicRay> Heffalump: train travel in the US is nowhere near where it should be, and has been a casualty of poor corporate management and political football for years
06:47:41 <CosmicRay> though it still does exist across much of the country
06:49:56 <CosmicRay> somebody needs to put a news item on haskell.org
06:50:04 <Heffalump> I'd have thought it was mostly a casualty of air travel
06:50:44 <CosmicRay> Heffalump: not really, it was more a casualty of large federal subsidies for roadways (and, to a lesser extent, air), at a time when there were no subsidies for railroads
06:51:00 <CosmicRay> Heffalump: that combined with the inability of the railroad management to understand that they had competition until about a decade too late
06:54:31 <bringert> shapr: what's tailor?
06:55:31 <bringert> ok, found it
06:55:36 <bringert> google is my friend
06:57:09 <bringert> I'll try to set it up
06:57:23 <CosmicRay> ooo, ghc ships hunit now
06:58:56 <CosmicRay> fun new stuff in System.Directory too.
06:58:57 <CosmicRay> excellent.
07:02:22 <bringert> there was no filepath manipulation stuff added, right?
07:02:35 <bringert> can't see any in release notes anyway
07:10:48 <Darius> @index unsafeRead
07:10:48 <lambdabot> Data.Array.Base
07:12:00 <tromp> i wished 6.4 would bring decent performance on my program:)
07:12:38 <Huschi> what's the difference between "Int" and "!Int" in a record type?
07:12:56 <shapr> strictness
07:13:00 <ibid> one is nonstrict and the other is strict
07:13:06 <ibid> !Int cannot be bottom
07:13:07 <shapr> Does the exclamation point look like a teacher's ruler to you?
07:13:58 <Huschi> what does strictness mean? or where can i read something about it?
07:14:18 <Darius> Huschi: You know what Haskell being a lazy language means?
07:14:31 <Huschi> yes, i know.
07:14:38 <ibid> Huschi: a function is strict in its argument if it returns bottom whenever that argument is strict; otherwise it's nonstrict
07:15:17 <Huschi> what means it return bottom?
07:15:27 <ibid> Huschi: for example, (+) is strict in both arguments, (&&) is strict in its first agument and nonstrict in its second argument
07:15:34 <ibid> Huschi: either fails or never returns
07:15:40 <Darius> Huschi: strict is (slightly roughly) the opposite of lazy
07:15:48 <Darius> I.e. most languages are strict.
07:16:05 <Darius> Eager is an almost synonymous term.
07:16:16 <ibid> actually, strict is slightly roughly the same a s eager, and eager is opposite of lazt
07:16:19 <ibid> lazy
07:16:37 <sh10151> eager only refers to one concept, evaluation
07:16:51 <Huschi> that means a function is strict in argument if this argument will always be avluated?
07:17:03 <sh10151> strict can refer to typing, evaluation, variable declarations, teachers
07:17:07 <ibid> Huschi: in practice, if a function is nonstrict in one of its arguments, it in some situations will ignore the value of the argument
07:17:19 <ibid> Huschi: yes, that is a fairly good mental model
07:17:24 <Huschi> ok.
07:17:43 <ibid> sh10151: in this context, strict does nor refer to typing, vardecls or teachers
07:17:45 <ibid> not
07:18:24 <Huschi> i looked a the wxhaskell doc and in the Rect type all members are strict. what does this mean?
07:18:49 <ibid> Huschi: for example, consider data Foo = Bar Int !Int
07:19:07 <Huschi> ok
07:19:13 <musasabi> Any pointers for reading self-referential data structures from an input stream?
07:19:18 <ibid> Huschi: Foo (1/0) 1 will produce a (non-bottom) value, but evaluating Foo 1 (1/0) fails
07:19:37 <ibid> sorry;
07:19:45 <Huschi> ok
07:19:49 <ibid> Bar (1/0) 1 and Bar 1 (1/0) :)
07:20:07 <ibid> Huschi: the ! is a flag to indicate "evaluate this as soon as possible"
07:20:16 <ibid> in practical terms
07:20:22 <Darius> musasabi: Do you need to be able to recognize cycles?
07:20:34 <musasabi> Darius: yes.
07:20:39 <Huschi> that means if you construct a value of this type all members that are strict will be evaluated on construction?
07:20:45 <Igloo> That's a slightly confusing way of putting it - evaluating Foo (1/0) 1 also fails, just a little bit later
07:20:49 <musasabi> I have an environment of [(Int,Object)] for objects that occured in the past - but because an object could refer to itself it must be in the environment when it is read.
07:21:06 <ibid> Huschi: essentially, yes
07:21:12 <Igloo> Well, I guess it depends what you mean by evaluating
07:21:30 <Igloo> I immediately thought of "typing in hugs", which is probably wrong on reflection  :-)
07:21:40 <musasabi> using mdo in a naive fashion just kills me with "<<loop>>" :-(
07:21:44 <Darius> musasabi: I mean, once you've built everything will you need to be able to recognize cycles (i.e. will you possibly do a full traversal that would loop if it didn't recognize being in a cycle)?
07:21:49 <Huschi> yeah. i think i understood it. and the advantage is that the program fails earlier if it fails, isn't it?
07:22:01 <Darius> Huschi: The advantage is performance.
07:22:02 <ibid> Igloo: evaluating Foo (1/0) does not fail, deconstructing the resulting value will also succeed but trying to use the value of the first slot  will fail
07:22:15 <musasabi> Darius: no.
07:22:24 <ibid> Huschi: what Darius said, also that it removes certain error conditions
07:22:32 <musasabi> I am just concerned with getting the marshalling right.
07:22:43 <Darius> At the bottom of the TyingTheKnot there is something that might be useful
07:22:45 <Huschi> ok. thank you very much.
07:22:48 <Darius> @wiki TyingTheKnot
07:22:48 <lambdabot> http://www.haskell.org/hawiki/TyingTheKnot
07:22:54 <ibid> Huschi: did it help?
07:23:09 <Huschi> i think yes.
07:23:38 <Huschi> is there any good haskell binding for SDL at the moment?
07:24:29 * musasabi reads taht
07:24:30 <musasabi> *that
07:24:51 <ibid> actually, i was wrong
07:25:08 <ibid> Bar 1 (1/0) does not fail, it's a type error :)
07:25:11 <ibid> but the idea is sound
07:27:04 <Darius> Huschi: There are a few scattered about.  Ask Google.  Don't know if they are "good" though.
07:27:24 <Huschi> i recorgnized it to be a type error because (/) doesn't operate on Int. but if i replace Int by Double it will work, won't it?
07:30:03 <musasabi> That does not really help with self-referentiality.
07:30:53 <Darius> musasabi: Why not?
07:31:26 <ibid> Huschi: for some value of "work", 1/0 is not an error condition in the bottom sense, the value is just Infinity :)
07:33:44 <musasabi> Darius: my problem cases are like "define x *x" in the notation of that example (and I am inside IO)
07:42:18 <Darius> musasabi: You 'x' will have to be compound structures or else it would always be undefined, so you should have something like define (x,y) (*x,y) or some such
07:43:43 <Darius> more define x = (*x,y)
07:44:39 <musasabi> yes, they are complex structures. Wehn decoding I check whether the current item is in the environment and if it is I take it.
07:45:13 <musasabi> decoding is done as a depth-first traversal.
07:46:02 <musasabi> making the environment lazier could help..
07:48:52 <Darius> IO shouldn't be an issue unless you need to decide how to continue reading based on whether or not you found the object in the environment.
07:50:19 <Darius> Even that should work as long as you never do it for a forward reference.
07:50:22 <musasabi> Darius: well if the object is found in the environment then it is taken from there otherwise it is read from the input stream.
07:51:45 <musasabi> basically it reduces to "~(obj,newEnv) <- decode env" but env should contain a reference to obj as it can have children which refer to it.
07:54:19 <musasabi> This seems to fail even with mdo, but it could be because env contains StablePtrs to the values, so switching to dynamic would help.
07:56:41 <Darius> Can you post the code if it isn't too hairy?
07:59:50 <Heffalump> hello
08:00:11 <JaffaCake> afternoon, #haskell
08:00:19 <CosmicRay> hi Simon
08:00:33 <JaffaCake> hi there!
08:01:09 <CosmicRay> JaffaCake: lots of great stuff in GHC 6.4.  thanks :-)
08:01:12 <Heffalump> are you here to see if there are any complaints about 6.4? :-)
08:01:15 <Heffalump> and yes, thanks :-)
08:01:26 <JaffaCake> glad you're enjoying it ;)
08:01:39 <kosmikus> congratulations with the release
08:01:39 <Heffalump> I should try out GADTs
08:01:46 <musasabi> Darius: http://youzen.b2.fi/~musasabi/t.hs
08:01:47 <JaffaCake> I'm here because it's Friday afternoon, the release is out the door, and I need to relax :S
08:02:25 <Heffalump> sensible plan
08:02:35 <Itkovian> JaffaCake, and you think you can relax here?
08:02:44 <MegaMonad> Ghc --show-iface obdc.hi | head -1.
08:02:46 <JaffaCake> hmm, you might have a point
08:02:53 * Heffalump is hopefully awaiting the quick arrival of Igloo's debian packages
08:03:06 <CosmicRay> Itkovian: he can as long as too many people don't try /whois on him :-)
08:03:14 <Igloo> Oh, you should have told me it was released then  :-)
08:03:18 <Heffalump> or just deduce it from his userid
08:03:31 * Heffalump informs Igloo that GHC 6.4 has been released.
08:03:37 <CosmicRay> Igloo: where have you been? :-)
08:03:40 <CosmicRay> Igloo: sweden?
08:03:43 <CosmicRay> <g>
08:04:07 <Heffalump> I should never have left Oxford, I could have informed you directly if I hadn't, assuming you've actually gone into the office today.
08:04:14 <musasabi> JaffaCake: /c
08:04:18 <Heffalump> though I guess I'd still have been ill.
08:04:23 <CosmicRay> JaffaCake: since you're here to relax, you may find this amusing if you haven't read it before: http://www.haskell.org/hawiki/MegaMonad
08:04:28 <musasabi> JaffaCake: thanks for releasing ghc 6.4 :-)
08:04:39 <musasabi> seems to be my typoday..
08:05:02 * JaffaCake is reading MegaMonad
08:05:13 <Heffalump> is it an official policy that the Debian ftp masters aren't accepting new packages until sarge releases, btw?
08:05:34 <CosmicRay> Heffalump: that is a huge gray area and massive flamewar.
08:05:49 <CosmicRay> Heffalump: the workings of the debian ftpmasters are arcane and not to be revealed to mere mortals.
08:06:14 <CosmicRay> Heffalump: iow, I have no clue.
08:06:32 <Heffalump> great.
08:07:02 * Heffalump thinks we should establish a proper set of Haskell package repos outside Debian (including woody versions)
08:07:16 <CosmicRay> I disagree
08:07:18 <Heffalump> (preferably avoiding the haskell-unsafe name ;-)
08:07:23 <CosmicRay> the proper thing is to get haskell packages into sid
08:07:36 <CosmicRay> if people need woody versions, they should be supplied at an existing backport repository if possible
08:07:48 <Heffalump> it would be, but it seems Debian bureaucracy disagrees
08:08:00 <Heffalump> and we can still feed things into sid too.
08:08:00 <malaire> GHC 6.4 Release Notes mentions that in future compiler would generate real C--. Does anyone know any timetable for this?
08:08:15 <CosmicRay> Heffalump: yeah I know
08:08:17 <CosmicRay> what's C--?
08:08:17 <nothingmuch> morning
08:08:31 <JaffaCake> malaire: it's been started, but progess has slowed down again recently
08:08:32 <nothingmuch> i'm following through YAHT
08:08:36 <Heffalump> an intermediate language designed as a compilation target
08:08:38 <CosmicRay> Heffalump: but this problem is, as matter of fact, temporary
08:08:42 <malaire> CosmicRay: see C-- link on http://www.haskell.org/ghc/docs/6.4/html/users_guide/release-6-4.html
08:08:53 <Heffalump> CosmicRay: Debian has a history of long delays for random reasons, though.
08:08:58 <nothingmuch> and i am not sure i'm really following on the type constructors things
08:09:06 <CosmicRay> Heffalump: yes, of course we do
08:09:07 <Heffalump> This specific problem may be transient and may not happen the next release round, but something else might.
08:09:11 <CosmicRay> Heffalump: one could always use experimental
08:09:21 <CosmicRay> Heffalump: see, that is what I was afraid of
08:09:23 <Heffalump> that's not the impression I want to give, though.
08:09:30 <CosmicRay> Heffalump: people will upload software there and then it won't get into sid
08:09:39 <JaffaCake> nothingmuch: anything we can help with?
08:09:40 <CosmicRay> Heffalump: to a certain extent, we have had that problem with -unsafe for quite some time
08:09:44 <nothingmuch> i'dlike some clarification on what exactly is the left hand side of the data declaration
08:09:45 <Heffalump> we can make a rule that things should be submitted to sid too.
08:09:53 <CosmicRay> Heffalump: my mission in life it to render unsafe useless because it is all in sid.
08:09:55 <nothingmuch> and what is on the right hand side
08:10:01 <nothingmuch> is the right hand side the actual constructor?
08:10:03 <Heffalump> cosmicray: you could continue that mission.
08:10:17 <Heffalump> and if you succeeded, then it would just turn into a backports repository and nothing more
08:10:18 <JaffaCake> nothingmuch: yes, the constructors are declared on the rhs
08:10:21 <nothingmuch> if so, how does it specify the way data is structured? (by compositing pairs, lists, etc)
08:10:30 <Heffalump> and if you failed, we'd have a good place for Haskellers to keep up to date.
08:10:31 <nothingmuch> or is that completely implicit allways?
08:10:49 <CosmicRay> Heffalump: but it is not solely up to me.  I cannot maintain all haskel packages in Debian.
08:10:49 <nothingmuch> and is the left hand side a data class? or is that something completely different?
08:11:17 <Heffalump> CosmicRay: right. I'd like to get some kind of consensus amongst people who do.
08:11:24 <JaffaCake> the left hand side is the name of the data type, applied to some type variables
08:11:33 <Heffalump> though first I should do some more work myself on making such packages.
08:11:37 <bringert> compiling ghc-6.4 on mandrake 10.1: Deviation.o(.text+0x33e): In function `Deviation':
08:11:38 <bringert> : undefined reference to `sqrt'
08:11:45 <bringert> a missing -lm?
08:12:08 <nothingmuch> s/data class/type class/
08:12:10 <CosmicRay> Heffalump: even now, there are packages in unsafe that should be in sid.  wxhaskell, for isntance.  there's no reason for that to not be in sid, but I don't have the experience to support it in sid, so it languishes.
08:12:14 <nothingmuch> ok, so what is a type class?
08:12:17 <JaffaCake> bringert: could be... where did the build get to?
08:12:30 <CosmicRay> nothingmuch: that is covered in YAHT in a couple of different chapters
08:12:38 <nothingmuch> ok, /me will be more patient
08:12:41 <Heffalump> who maintains that?
08:12:42 <JaffaCake> a type class is a class to which some types belong
08:12:52 <bringert> it's linking hp2ps
08:12:59 <JaffaCake> but I wouldn't worry about type classes until you've got data types :)
08:13:10 <CosmicRay> nothingmuch: page 40 and 108
08:13:25 <nothingmuch> i sort of guessed that type classes were more abstract types themselves
08:13:28 <CosmicRay> Heffalump: I don't know....  checking.
08:13:39 <CosmicRay> nothingmuch: no, not really
08:14:00 <nothingmuch> lastly, when pattern matching functions against types, the right hand side is the part that matters, right?
08:14:11 <CosmicRay> nothingmuch: I'd liken them more to a Java interface, if anything, but it's hard to really liken them to anything in a different language for me
08:14:12 <JaffaCake> bringert: perhaps hp2ps needs -lm on MDK?
08:14:15 <CosmicRay> nothingmuch: yes
08:14:16 <kosmikus> JaffaCake: ghc-6.4 just compiled successfully on my Gentoo machine
08:14:32 * JaffaCake jumps around a bit
08:14:37 <nothingmuch> ok, things seem a bit more clear now
08:14:42 <nothingmuch> thanks, JaffaCake, CosmicRay!
08:15:01 <CosmicRay> Heffalump: ahh, it appears that Igloo is the guilty party.
08:15:02 <bringert> JaffaCake: should I just add it to LDFLAGS then?
08:15:34 <JaffaCake> try: in ghc/utils/hp2ps, make EXTRA_LD_OPTS=-lm
08:15:46 <JaffaCake> if that works, then it needs to be added to the Makefile
08:16:15 <JaffaCake> ah wait, there's already something about $(LIBM) in the makefile
08:17:12 <JaffaCake> looks like the configure test for libm isn't doing the right thing on your box
08:17:45 <bringert> I'm sorry I didn't try to build the release candidate
08:17:54 <bringert> laziness on my part
08:17:57 * JaffaCake slaps bringert
08:18:16 <JaffaCake> :)
08:18:20 * bringert hops into a corner and sbos
08:18:36 <Heffalump> you shall forever enter the ranks of the cursed.
08:18:39 <bringert> not even able to type properly after that abuse
08:19:33 <CosmicRay> bringert: oh, so you will be relegated to a life of perl?
08:19:39 <bringert> haha
08:19:51 * bringert used to write perl for a living
08:19:53 <Darius> @type Data.Array.Base.unsafeRead
08:20:00 <lambdabot> Data.Array.Base.unsafeRead :: forall e a m i.
08:20:00 <lambdabot> 			      (Data.Array.Base.MArray a e m, GHC.Arr.Ix i) =>
08:20:00 <lambdabot> 			      a i e -> Int -> m e
08:20:00 <CosmicRay> :-)
08:20:19 <bringert> where is the check for libm?
08:20:31 <JaffaCake> configure script at the top level
08:20:39 <JaffaCake> search for 'LIBM'
08:21:23 <Darius> Why does unsafeRead take an Int and not an Ix i?
08:21:58 <eq> what is "$" used for in haskell?
08:21:58 <JaffaCake> because it indexes the array from offset 0
08:22:06 <Igloo> CosmicRay: My wxhaskell packages are not suitable for sid. I think Isaac has better ones (and thought they were in H-U)
08:22:28 <CosmicRay> Igloo: hmm, I looked in the unstable repo only.  I'll ask him
08:22:42 <Lemmih> eq: print $ 10 + 20
08:23:02 <Darius> eq: v. print (10 + 20)
08:23:05 <Igloo> As I recall we didn't quite work out what we should do about wxHaskell's "shared library"
08:23:21 <CosmicRay> hmm.
08:23:28 <CosmicRay> I could really use wxHaskell if it were there.
08:23:32 <eq> Darius: okay, that's easy, thanks
08:23:35 <CosmicRay> I'll try to bring it up with syntaxninja next time he's around
08:23:50 <Igloo> Could you use gtk2hs instead? I think that's probably closer to appearing
08:24:22 <CosmicRay> hmm, that would probably owrk, though my understanding was that it was less portable to non-posix systems
08:25:39 <bringert> shapr: http://www.cs.chalmers.se/~bringert/darcs/GF2.0/
08:25:42 <Darius> eq: It also is sometimes useful for a higher order function and sectioning (though technically ($) = id restricted to functions)
08:25:45 <bringert> did it with tailor
08:25:50 <bringert> not idea if it works
08:27:18 <bringert> hmm, darcs does not seem to preserve executable permissions on files
08:30:39 <kosmikus> ok, I've added ghc-6.4 to the Gentoo tree, but it will remain masked until a majority of the other Haskell packages is confirmed to work with the new ghc-pkg
08:32:29 <kosmikus> nhc98 seems to be less trivial, unfortunately, but I will leave that for another day ...
08:32:48 <Igloo> Less trivial in what way?
08:32:51 <JaffaCake> kosmikus: would you like something added to the GHC download page? want to send me some text?
08:32:55 <CosmicRay> It is a pity about nhc98
08:33:01 <CosmicRay> that is doesn't support 64-bit cpus.
08:33:27 <CosmicRay> Igloo: would jaffacake be able to assist with the arm problem in any way?
08:35:19 <Igloo> I'm hoping it will magically fix itself once sarge is released, but I haven't spoken with the Debian arm people recently to confirm that
08:35:26 <kosmikus> Igloo: I still get segmentation faults when building via gcc, and I get another strange bug pretty immediately when building with ghc-6.4
08:35:41 <Igloo> kosmikus: On x86?
08:35:44 <Heffalump> in ghc, or in nhc?
08:36:09 <Heffalump> does gentoo offer pre-built packages at all?
08:36:13 <Igloo> And what version of gcc do you have?
08:36:15 <kosmikus> JaffaCake: no, thanks, I think it's too early, but I'll try to tell you when it gets unmasked ...
08:36:26 <JaffaCake> sure, that's fine
08:36:58 <CosmicRay> sigh, new major release of ghc out.  that means it's about time for me to build it on aix again.
08:37:08 <CosmicRay> hate building things on aix.  hate hate hate.
08:37:30 <Heffalump> why on earth do you run it on AIX?
08:37:31 <kosmikus> Heffalump: it does to a limited extent, but that's not what I'm trying to do atm
08:37:38 <Heffalump> kosmikus: no, I realise.
08:37:38 <kosmikus> Igloo: yes, on x86
08:37:45 <CosmicRay> Heffalump: because The Powers That Be have selected AIX for our ERP system
08:37:52 <Heffalump> I was just (very vaguely) wondering about switching distros.
08:37:57 <CosmicRay> Heffalump: and I code stuff that talks to it in Haskell
08:38:01 <kosmikus> Igloo: gcc-3.4.3 currently
08:38:37 <Igloo> Oh, maybe 3.4 broke it again  :-(
08:39:01 * Igloo wishes it just used C safely
08:42:05 <kosmikus> actually, I've never been able to build nhc98 via gcc during the last year, but I didn't try very often
08:42:15 <kosmikus> your patch back then never worked for me
08:42:39 <kosmikus> I gave up at a point, being too busy keeping ghc stuff running ;)
08:42:39 <Igloo> Oh, OK
08:42:43 <Igloo> :-)
08:42:58 <kosmikus> now that araujo's joined the Haskell team, I might have another look at nhc98, though
08:43:39 <bringert> JaffaCake: do you know why the libm check is done in two steps: first with AC_CHECK_FUNC and then with AC_CHECK_LIB?
08:43:53 <JaffaCake> short answer: no
08:44:02 <bringert> after hacking configure.ac to only use  AC_CHECK_LIB it works for me anyway
08:44:55 <JaffaCake> I think it's probably testing to see whether we can get away without libm first, perhaps something related to windows
08:45:21 <JaffaCake> do you have atan() in libc on your system?
08:47:20 <Heffalump> igloo: what non-safe thing does it do?
08:48:06 <Igloo> Heffalump: It assumes stuff about layout in memory, and assumes that the high bit of pointers is 0
08:48:44 <Heffalump> this is in the code it generates?
08:49:19 <bringert> JaffaCake: doesn't look like I do, linking anything that uses atan() seems to require -lm
08:49:21 <Igloo> Yes
08:49:39 <Igloo> But it itself is also code it generated
08:49:43 <JaffaCake> bringert: that's weird
08:49:46 <bringert> which makes it seem weird that the AC_CHECK_FUNC test doesn't choke on it
08:49:59 <Heffalump> oh, duh
08:50:34 <JaffaCake> bringert: yes
08:50:48 <bringert> hmm, but config.log says: warning: conflicting types for built-in function 'atan'
08:51:03 <JaffaCake> urk
08:51:09 <JaffaCake> it's a builtin?
08:51:19 <bringert> ah
08:51:28 <bringert> configure uses gcc -o conftest -g -O2   conftest.c -lncurses
08:51:38 <bringert> and ncurses seems to privde atan
08:51:41 <bringert> provide
08:51:59 <JaffaCake> ah
08:52:02 <bringert> since my atan test program compiles fine with -lncurses only
08:52:33 <JaffaCake> the fix might be to move the LIBM test above the ncurses test in configure, then
08:53:02 <musasabi> How does one get unsafe pointer equality with GHC?
08:53:56 <bringert> weird, "strings /usr/lib/libncurses.a | grep atan" shows nothing
08:54:03 <bringert> or I being stupid?
08:54:19 <bringert> I'm sure there should be an am in there somewhere
08:55:40 <JaffaCake> ncurses might be a dynamic library that pulls in libm.so
08:56:21 <JaffaCake> musasabi: GHC.Exts.reallyUnsafePtrEquality#
08:56:38 <JaffaCake> @type GHC.Exts.reallyUnsafePtrEquality#
08:59:54 <bringert> JaffaCake: yeah, that's it
09:01:45 <Heffalump> what's really unsafe about it?
09:01:58 <Heffalump> (apart from the results not being a reliable guide to inequality if False)
09:03:20 <JaffaCake> well, that's it
09:03:47 <JaffaCake> and the fact that it's not referentially transparent
09:04:07 <Heffalump> can it cause segfaults?
09:04:12 <JaffaCake> don't think so
09:04:29 <Heffalump> so how come we have unsafePerformIO but reallyUnsafePtrEquality? :-)
09:04:42 <JaffaCake> historical
09:05:09 <JaffaCake> the guy who named it reallyUnsafePtrEquality is pretty paranoid :)
09:05:52 <JaffaCake> I gotta go.... have a nice weekend all
09:06:03 <Igloo> Bye - nice to see you again  :-)
09:06:15 * JaffaCake waves
09:17:23 <musasabi> JaffeCake: thanks
09:50:56 * Igloo watches piles of "deprecated" warnings as GHC compiles
10:01:11 <wilx`> Hmm...a function returns [ST s a] and I would like to get ST s [a] instead...
10:01:13 <wilx`> Hmm...
10:01:38 <Darius> @type sequence
10:01:55 <wilx`> Yay!
10:01:57 <wilx`> Thanks.
10:05:04 <tromp> @type Control.Monad.sequence
10:05:19 <Heffalump> @seen foo
10:05:32 * Heffalump thinks we lack a lambdabot ;-)
10:08:45 <ibid> @seen lambdabot
10:08:46 <ibid> :)
10:08:58 <ibid> 18:24 -!- lambdabot [~lambdabot@213-242-136-207.interact.se] has quit [Remote closed the connection]
10:12:16 <Darius> Heffalump: I noticed lambdabot leaving a while back, but decided to try @type in case I didn't notice the bot's return.
10:20:21 <liquidengineer> anybody running Hugs on Mac OS X?
10:22:55 <SyntaxNinja> 'morning all
10:23:05 <ibid> evening :)
10:23:19 <SyntaxNinja> my pairing partner gets bored when I refactor.
10:27:01 <ibid> for some reason, i tried to find a sexual interpretation for that (failed, though)
10:28:37 <SyntaxNinja> thank god
10:31:22 <autrijus> hmm, your partner is used to tight copul^Wcoupling?
10:31:40 <SyntaxNinja> autrijus: you had to try
10:31:48 <autrijus> I had.
10:31:51 <autrijus> sorry :)
10:32:03 <ibid> i suppose it had to do with the close coupling of that sentence with "'morning all" :)
10:32:29 <ibid> (and partner)
10:33:11 <SyntaxNinja> I think it's safe to say that #haskell is no longer the most mature channel on this server ;)
10:33:20 <SyntaxNinja> unless by 'mature' you mean 'pornographic'
10:33:23 <ibid> what has taken the place?
10:33:25 <sh10151> loose coupling is typically practiced during college
10:35:17 <SyntaxNinja> heehee
10:41:04 <Lunar^> shapr: There?
10:41:44 <ibid> SyntaxNinja: what's the most mature channel on your server?
10:42:55 <autrijus> #SyntaxNinja ?
10:43:50 <Igloo> CosmicRay: gcc 4.0 is a likely time for arm to fall in line
10:44:48 <wagle> liquidengineer: i am running hugs and ghc on macosx
10:45:25 * Itkovian would like to say that too ... unfortunately Itkovian lacks a mac.
10:45:32 <Itkovian> or rather the money to buy one
10:46:28 * Oejet takes the dual G5 from Linus and gives it to Itkovian.
10:46:39 <Darius> You wouldn't need the money to buy one if you had one and having the money to buy one wouldn't make you have one.
10:46:40 <Itkovian> why thanks!
10:47:08 <Itkovian> Darius, if I had the money within 4 days, a powerbook would reside in my backpack. Be sure of it!
10:47:23 <Itkovian> add a , between money and within ;-)
10:47:51 <Itkovian> nobody needs ajob done that would pay in powerbook(s)?
10:50:18 <SyntaxNinja> nothing that you could do in 4 days ;)
10:57:03 <CosmicRay> Igloo: thanks
10:57:13 <CosmicRay> SyntaxNinja: rumor has it that you have wxhaskell packages
10:57:24 <CosmicRay> SyntaxNinja: I would like to kindly invite you to upload them to sid :-)
10:58:17 <Heffalump> what is gcc 4.0 doing that fixes the problem?
10:59:06 <Igloo> Providing a convenient point to change the ABI presumably
11:25:28 <Lunar^> GHC 6.4 is out?!
11:25:33 <Lunar^> Let's have a party!
11:27:06 <Lemmih> YAY!
11:27:10 * musasabi brings some lambdas to share
11:27:49 <Lunar^> yeah!
11:27:51 <wagle> fink is a fink!  (only ghc 6.2)
11:27:56 <Lunar^> Happy 6.4 :)
11:28:03 <Lunar^> http://haskell.org/ghc/docs/6.4/html/users_guide/release-6-4.html
11:28:18 <Lemmih> Are the query results available somewhere?
11:29:40 <stepcut> heh
11:30:27 <SyntaxNinja> sweeet
11:30:47 <CosmicRay> MegaMonad: GHC 6.4 is out!
11:30:47 <MegaMonad> CosmicRay: 2.6 Of the 4 things.
11:30:50 <SyntaxNinja> CosmicRay: hmm. maybe I should. there were some problems, I lost track
11:31:09 <CosmicRay> SyntaxNinja: that would be great
11:31:15 <stepcut> argh. the link to the paper on STM is broken
11:31:17 <Lemmih> I can't seem to get the build-depends field right.
11:31:30 <SyntaxNinja> I guess that means cabal just got released :)
11:31:36 <CosmicRay> Lemmih: what are you building?
11:31:38 <Lunar^> They included Printf!
11:31:44 <CosmicRay> yes!
11:31:45 <CosmicRay> but whose?
11:31:56 <CosmicRay> it's not igloo's or mine.
11:32:03 <Lunar^> lennart@augustsson.net
11:32:05 <Oejet> Yay!
11:32:08 <SyntaxNinja> functional programmers are obsessed w/ printf
11:32:13 <Lemmih> CosmicRay: SDL binding plus various addons.
11:32:28 <CosmicRay> Lemmih: are you having trouble with haskell build-deps or sdl build-deps?
11:32:42 <SyntaxNinja> someone give me a high-five for the first major release of Cabal
11:32:49 * CosmicRay high-fives syntaxninja
11:32:51 <Lunar^> yeah SyntaxNinja!
11:32:52 <SyntaxNinja> yay!
11:32:55 * stepcut high-fives SyntaxNinja 
11:32:57 <CosmicRay> SyntaxNinja: great work.
11:32:58 <sh10151> congrats
11:32:59 <heatsink> cabal?
11:33:03 <Lemmih> CosmicRay: The build-depends field in my cabal file.
11:33:09 <sh10151> there is no cabal
11:33:10 <sh10151> :)
11:33:10 * Oejet high-fives SyntaxNinja
11:33:15 <Lunar^> \o/
11:33:15 <CosmicRay> SyntaxNinja: did you know that one of the first things that convinced me to convert from ocaml to haskell was cabal?
11:33:31 <CosmicRay> SyntaxNinja: this was back in the 0.1 days just before I started harassing you about getting it into sid
11:33:34 <Lunar^> I can now finally work on hOp again
11:33:58 <CosmicRay> SyntaxNinja: you have something that has exceeded what 10 different people in ocaml have tried to do over the past 2 or 3 years
11:34:01 <Lemmih> CosmicRay: Oh wait. I'm using an old (6.4rc) version of GHC.
11:34:13 <stepcut> Cabal is probably the most important thing in 6.4, in my opinion
11:34:18 <CosmicRay> Lemmih: there is no ghc6.4 in sid, or are you trying to build 6.4?
11:34:19 * Oejet soaks up the good atmosphere.
11:34:25 <heatsink> a packaging specification
11:34:29 <Heffalump> is hOp a subset of House (but obviously written by a different person), or does it do things that House does't?
11:34:32 <Lemmih> CosmicRay: Huh?
11:34:38 <CosmicRay> Lemmih: are you trying to build ghc itself?
11:34:51 <CosmicRay> oh!  are you crafting a debian/control file or a .cabal file?
11:35:07 <nothingmuch> ok, back to learning, and 5 minutes into it, i run into another problem:
11:35:09 <nothingmuch> the Either type
11:35:11 <nothingmuch> i don't understand how that makes sense
11:35:14 <nothingmuch> specifically
11:35:16 <nothingmuch> fromTuple (One a ) = Left (Left a )
11:35:20 <Lunar^> Heffalump: OGI people took the work we did with sebc
11:35:22 <CosmicRay> sorry, I hear build-depends and I automatically assume it is debian/rules
11:35:31 <nothingmuch> a function that is trying to extract fromTouple(foo) (given let foo = Touple blah blah)
11:35:32 <Lunar^> Heffalump: There were no progress on hOp since
11:35:34 <Lemmih> CosmicRay: I'm just cabalizing a SDL binding (:
11:35:37 <nothingmuch> will get...?
11:35:45 <CosmicRay> Lemmih: ok, sorry then, I totally misunderstood
11:35:58 <CosmicRay> Lemmih: I thought you were packaging a sdl binding for debian :-)
11:36:03 <sh10151> CL and scheme don't have a cross-implementation packaging scheme
11:36:06 <sh10151> let alone Ocaml
11:36:13 <Heffalump> so what will you be doing with hOp? Improving it to do the kind of things House does, or adding orthogonal features that will enhance House too, or something completely different? :-)
11:36:37 <nothingmuch> ..?
11:36:46 <CosmicRay> sh10151: even just building a simple project using only the inria ocaml tools is a frustrating experience at best
11:37:04 <CosmicRay> sh10151: and a very complex one if you need to build native and/or bytecode versions
11:37:05 <Lunar^> Heffalump: I would like to see how could STM fits in
11:37:16 <stepcut> scheme has horrible, horrible third-party library support, in my limited experience...
11:37:21 <Lunar^> Heffalump: and integration of libtcc to GHC (towards bootstraping)
11:37:33 <wagle> stepcut: even chez scheme?
11:37:45 <Lunar^> Heffalump: that's orthogonal to House work (which was on networking lately, AFAIK)
11:37:54 <stepcut> wagle: that is exactly the problem, every scheme implementation has its own way of doing third-party libraries
11:38:20 <stepcut> wagle: I tried to do a scheme project that need three different libraries, and each library would only work with a different scheme compiler :)
11:38:39 <sh10151> the issue is the proliferation of implementations before an appropriate package mechanism can be created :)
11:38:59 <stepcut> yes
11:39:21 <sh10151> haskell is considerably more difficult to implement decently vs. scheme, so it didn't snowball into a huge issue
11:39:22 <Heffalump> Lunar^: cool
11:39:59 <wagle> a mini scheme interpreter is my "hello world" program for each programming language i learn..  8)
11:40:47 <wagle> (which was surprisingly interesting in java)
11:41:24 <SyntaxNinja> CosmicRay: thanks :)
11:41:43 <wagle> (you can do it in one long sitting...)
11:42:14 <wagle> most of the scheme interpreters out there suck, though
11:42:37 <CosmicRay> SyntaxNinja: no problem :-)
11:42:46 <CosmicRay> SyntaxNinja: being able to compile code is a Good Thing :-)
11:43:15 <heatsink> ghc -farrows gives me an arrow error, and I can't understand why. http://www.haskell.org/hawiki/HaskellIrcPastePage
11:43:17 <stepcut> is joy a practical language, or just a fun mind game ?
11:43:35 <SyntaxNinja> you guys are so cool
11:44:27 <SyntaxNinja> not to be outdone, nhc98 released and has cabal, and in case no one has noticed, there's a new hugs release in Debian with cabal
11:44:37 <stepcut> sweet
11:44:55 <CosmicRay> nice nice nice!
11:45:08 <CosmicRay> is it just the debian hugs package that has cabal, or has hugs added it upstream?
11:45:40 <Igloo> There's a cabal package in Debian testing isn't there? Does that want to be released?
11:46:19 <CosmicRay> Igloo: I'd say leave it there until all of these other cabal packages hit testing
11:46:33 <CosmicRay> Igloo: otherwise we could wind up in the unfrotunate situation of releasing without cabal
11:46:39 <Darius> Someone's been playing with Haddock it seems.
11:46:55 <heatsink> the haskell docs look different?
11:47:01 <Igloo> Well, I really meant "is it compatible with what cabal is now?"
11:47:19 <SyntaxNinja> CosmicRay: hugs added it upstream
11:47:25 <CosmicRay> SyntaxNinja: nice
11:47:31 <CosmicRay> Igloo: oh.  good question.
11:48:02 <wagle> heatsink: you might try typing it in again, just in case you have funny chars, else, i dont know
11:48:37 <SyntaxNinja> Igloo: yeah, it's compatible, there are some bugfixes.
11:49:11 <heatsink> wagle: I suspect it's a ghc bug.  The preprocessor from the arrows website does what it's supposed to.
11:49:20 <Darius> heatsink: There are little expand/contract thingies that weren't there last time I checked (or I didn't notice them).
11:49:35 <heatsink> Darius: yea, I think they're new.
11:49:39 <wagle> this using template haskell?
11:49:41 <SyntaxNinja> CosmicRay: and the nice thing is that the version of cabal in ghc, nhc, and hugs actually works with the version of hugs in debian
11:49:50 <heatsink> wagle: no
11:49:55 <Darius> heatsink: The Arrow syntax GHC uses isn't -exactly- the same as the preprocessor version.
11:49:57 <CosmicRay> nice indeed.
11:50:08 <SyntaxNinja> but once nhc and ghc get into debian, the cabal package should go away... maybe
11:50:24 <wagle> oh good.  i was having flashbacks
11:50:35 <SyntaxNinja> I guess if we release newer cabals they could hide the ones in ghc and hugs
11:51:09 <Darius> heatsink: Hmm, yeah that does look a bit like a bug.
11:51:20 <wagle> whaz cabal?
11:51:42 <wagle> nm
11:51:54 <wagle> (http://www.haskell.org/libraryInfrastructure/)
11:53:12 <Heffalump> is the Cabal in each different?
11:53:23 <SyntaxNinja> Heffalump: no, all the same version!
11:53:33 <SyntaxNinja> all released within a few days of each-other
11:53:39 <SyntaxNinja> CosmicRay: the hunit package can probably go away too
11:53:47 <SyntaxNinja> CosmicRay: thanks to Igloo; less work for us ;)
11:53:47 <CosmicRay> SyntaxNinja: yep, I was thinking that
11:53:49 <Heffalump> I can see why the standard downloads would include cabal, to make life easier for users, but for the Debian packages, why not remove them and depend on a common package?
11:54:08 <SyntaxNinja> Heffalump: maybe that's a good idea. hmm
11:54:42 <Igloo> Depend on what common package?
11:55:16 <SyntaxNinja> Igloo: cabal
11:55:33 <SyntaxNinja> haskell.org/libraryInfrastructure == haskell.org/cabal
11:55:52 <Igloo> But it wants to be compiled differently for the different impls, no?
11:56:30 <Heffalump> sorry, that was part of my question
11:59:46 <SyntaxNinja> I thought you meant one source package or something, yeah it does need to be compile differently
12:01:21 <Igloo> We don't really gain anything then; the source is in the upstream tarballs anyway
12:01:51 <liquidengineer> anybody running Hugs on Mac OS X?
12:02:02 * liquidengineer knows he asked earlier, but forgot the window was open
12:02:10 <Heffalump> so what would a newer cabal hiding the existing ones do?
12:02:15 <Darius> With all this type level hackery have the GHC implementors put more effort into optimizing dictionary representations?
12:02:16 <Heffalump> Would it be compiled for all 3?
12:02:36 <Heffalump> aargh, no, don't encourage it!
12:03:58 <Darius> It's partially enshrined in Text.Printf and may be enshrined in Control.Exceptions later (though I doubt any optimization will be needed there) and anyways it helps normal code too.
12:10:14 <bourbaki> does anyone of you know a file browser that allows you to access ftp and ssh files just like it was on your disk?
12:10:52 <Oejet> Is GHC normally more optimized/optimizing in x.y.2 than x.y.0?
12:11:14 <Oejet> bourbaki: Internet Explorer. :-P
12:11:41 <bourbaki> really?
12:11:44 <bourbaki> i cant use scp with ie
12:12:47 <heatsink> Can you list remote directories with scp?
12:13:14 <Oejet> bourbaki: Oh.  Heh, I guess, I just saw the FTP part. :-/
12:13:33 <wagle> i think that there is a sftp (ftp using ssh technology somehow)
12:13:40 <bourbaki> and also i cant link the urls as a drive
12:13:44 <Darius> Oejet: I don't know, but it seems 6.4 is doing better on that then 6.2.2, but then again the Release Notes mention an entire rewrite of the backend.
12:14:00 <stepcut> hrm, I think I need to convert my compiler to use the state monad so I can create unique names for my jump labels...
12:15:45 <Darius> stepcut: If you use structured labels you may be able to avoid it
12:16:49 <Lunar^> Igloo: any idea how long before GHC 6.4 Debian packages hit unstable?
12:17:06 <Oejet> Darius: Yes, the is a thread on p.l.f mentioning more clever code from 6.4 than 6.2.
12:17:51 <stepcut> Darius: structured labels ?
12:18:32 * Oejet expects a recipe and binary package for GoboLinux in a couple of hours (just need to compile ;-).
12:18:41 <Igloo> Lunar^: At least a week, I should think
12:19:14 <Heffalump> a week? why?
12:19:20 * heatsink decides to stick with the arrow preprocessor for processing arrow notation.
12:19:27 <Darius> stepcut: Like heirarchical names using the analogy: keep track of the "module" you are in (level of nesting) and generate names locally,  The labels may look like, foo.1.0.3.2 (probably something like (String,[Int]))
12:19:33 <Lunar^> Igloo: thanks.. that'll be hard t
12:19:38 <Lunar^> o wait though ;)
12:19:52 <Igloo> Because it won't go into unstable until it looks like it should be in sarge
12:20:40 * Igloo hopes it'll be in Haskell Unsafe in about 30 mins, though
12:20:52 <Lunar^> @info pprExp
12:20:52 <Heffalump> do you mean that you'll hold it back, or that it'll be held back by the ftp masters/
12:20:59 <Igloo> I'll hold it back
12:21:07 <Lunar^> Igloo: experimental then?
12:21:27 <Igloo> Experimental will probably happen tonight too
12:21:32 <Lunar^> Igloo: cool :)
12:21:45 <Darius> stepcut: There are two problems, 1) you need to keep track of the label prefix which can be done by passing it around but this is like using the Reader monad and so isn't really worthwhile if you use monadic style for it (but explicit is fairly light) and (2) the name may get large
12:21:48 <stepcut> Darius: hrm...
12:22:05 <Lunar^> @info pprExp
12:22:12 <Lunar^> @index pprExp
12:22:26 <Lunar^> Where's lambdabot?!
12:22:32 <stepcut> Darius: if I have two if statements in a row, I still need some sort of index to diferentiate the two
12:23:26 <Darius> stepcut: Yes, those are the local names (added to the prefix).  The labels should look like if.1.0: if.2.0:
12:24:41 <stepcut> Darius: but it seems like I still need to pass a state around to label the if.1 versus if.2 ?
12:25:02 <Darius> stepcut: That will all be within one function
12:25:54 <Darius> Instead of threading a counter it the prefixes flow down the branches of the call graph (to put it mildly poetically)
12:26:09 <SyntaxNinja> Igloo: the idea is that if a new cabal comes out, it'll be a smoother update
12:27:43 <stepcut> Darius: I think I understand how that could work -- it makes the labels more tree like, such that I don't have to know what the final value was on one branch to be able to generate unique lables on a different branch
12:28:30 <stepcut> Darius: I would still need to pass in a starting point, but I would not have to get a value back...
12:29:01 <Darius> stepcut: Right.  You just need to label the edges of each recursive call differently (i.e. extend the prefix differently).  However, you probably want to aim for extending the prefix only when necessary to avoid large labels.
12:30:41 * stepcut examines his code
12:57:17 <Igloo> Aarg, dpkg on alioth doesn't know about ~ version numbers
13:01:27 <ibid> we're still in the transitional :)
13:03:07 <musasabi> Is it possible to define a function like readDyn :: TypeRep -> (forall a. (Read a, Typeable a) => String -> a) -> String -> Dynamic ?
13:06:39 <Igloo> OK, ghc6 6.4-1 is in Haskell-Unsafe now (this will be different to the 6.4-1 that goes into unstable, if one does)
13:08:09 <Darius> musasabi: I don't think so.  There's no way to use the TypeRep to choose the resolve the Read constraint.
13:10:12 <SyntaxNinja> Igloo: cool
13:16:26 <musasabi> I think I found a solution.
13:16:56 <musasabi> readDyn :: TypeRep -> [(String,String->Dynamic)] -> String -> Dynamic
13:17:24 <Heffalump> Igloo: different how?
13:18:45 <musasabi> readDyn trep list = maybe (throw ...) id $ lookup (show trep) list
13:19:35 <Igloo> It'll have /usr/bin/run{ghc,haskell} (and possibly have some bugs fixed)
13:31:31 <halcyon10> hi, why does this line not compile? 'data Fruit a = Empty | a'  whereas this works: 'type Value a = a', 'data Fruit a = Empty | Value a'
13:32:28 <Darius> halcyon: Because type constructors and data constructors are in a different namespace.  If you remove 'type Value a = a' and just have 'data Fruit a ...' it will still work.
13:37:39 <Darius> halcyon10: The first isn't syntactically valid, but a reason why it wouldn't be is consider the type Fruit (Fruit ()).  'a' could then be Empty and there would be no way to tell the cases apart.
13:37:39 <halcyon10> ah, i see. Is there a way to get rid of the 'Value a' ? because declaring a Fruit now looks ugly because of the Value in front. for example if i make a 'Fruit Bool' it looks like 'Value True' but i'd rather like to have just 'True' is this possible while still having the possibility to construct a Fruit with Empty ?
13:38:36 <Heffalump> nope
13:38:40 <halcyon10> oh i see, i hadn't thought of this recursive type-declaration yet..
13:38:51 <Darius> halcyon10: One thing you can do is overload some values.  Numbers are already.  So you could have a class Boolean with methods true and false and an instance Boolean Fruit where true = Value True etc.
13:39:07 <Darius> halcyon10: Fruit (Fruit ()) is not recursive.
13:39:46 <Darius> Unfortunately, you can't overload everything.
13:43:52 <halcyon10> ah, overloading, i had't thought of that. what i'm actually trying to do is to make a binary-Tree-class, and i thought it would be good if i made it polymorphic. but then the expressions get a bit messy fast. Here's my code: http://www.rafb.net/paste/results/MW3QZ681.html
13:44:47 <halcyon10> for Example 'binTree 3 Empty' creates a binary Tree of Depth 3, but that is unreadable =)
13:45:16 <Darius> data Tree a = Leaf a | Branch a (Tree a) (Tree a); type YourTree a = Tree (Maybe a)
13:45:59 <Darius> halcyon10: You can make functions to more conveniently build trees.
13:47:02 <halcyon10> is my 'Empty' the reason why the Tree-type is so ugly?
13:48:30 <Darius> Not compared to 'YourTree', I just suggested that as a way to use predefined types and add generality.  However, there are isomorphic ways of writing your 'Tree' type that you may find prettier.
13:52:15 <halcyon10> i see. what prettier alternatives do you mean specifically?
13:54:01 <Darius> You can flatten everything into: data Tree a = Empty | Leaf a | Fork (Tree a) (Tree a) | Branch (Tree a) a (Tree a)
13:55:25 <Darius> Or you may want to get rid of Fork and use Branch (Tree a) (Maybe a) (Tree a)
13:55:51 <Darius> Also, are you sure you want trees like Branch Empty (Fruit Empty) (Fruit Empty) ?
13:55:57 <halcyon10> ah, thats a good idea! actually i started a bit like that trying to get two versions of Branch one with value and one without, but i didn't realise to give them different names 8|
13:57:18 <halcyon10> probably not, perhaps the best would be to forget about the Empty thing and just use Values everytime
14:07:28 <bourbaki> halcyon10: makeing any progress?
14:10:18 <halcyon10> bourbaki: yes, a bit, the Tree-type works now, but i'm not sure it's the best way to do what i want. i think it needs some time to get used to think 'functional' ;)
14:12:05 <bourbaki> halcyon10: if you manage to build a graph with homogenous nodes tell me im in need of that
14:14:26 <Darius> bourbaki: There's a Data.Graph library.
14:15:04 <bourbaki> Darius: and there i can do homogenous graphs?
14:19:11 <Darius> bourbaki: Unless you have some particular meaning of homogenous that isn't the one I'm thinking of.
14:20:00 <bourbaki> i mean it like in heterogenous lists
14:33:07 <SyntaxNinja> bourbaki: you mean homogeneous as in heterogeneous?
14:34:11 <bourbaki> ah right sorry
14:34:53 <bourbaki> i want to build something like a petrinet just with different types as tokens in the network
14:38:43 <yonkeltron> GOOD SHABBOS!
14:40:07 <Lemmih> bourbaki: Do you want it to be type safe?
14:40:46 <bourbaki> Lemmih: the nodes constrain the functions domain and codomain
14:40:52 <bourbaki> so i think it is type safe
14:42:00 <Lemmih> Then why not use existential types?
14:43:04 <bourbaki> Lemmih: whats that?
14:44:12 <Lemmih> @wiki ExistentialTypes
14:46:13 <Lemmih> bourbaki: It allows you to do eg.: 'data Tree = forall x. Node x | Branch Tree Tree; test = Branch (Node 'c') (Node True) :: Tree'
14:46:52 <bourbaki> can i simply return a type in a function with that?
14:48:09 <Lemmih> Eh?
14:48:59 <bourbaki> i mean the type of that thingy
14:49:17 <SyntaxNinja> bourbaki: there's no haskell 98 way to do it; of course, the "right" solution is to say "data TreeType = T1 Foo | T2 Bar" and Tree TreeType or whatever
14:49:17 <bourbaki> i had some difficulties when i used HList to return variable lists
14:49:44 <SyntaxNinja> bourbaki: what are you going to do with the things when you get them out of the tree?
14:50:04 <Lemmih> HLists are a type trick. Everything happens at compile time so you don't really return anything.
14:50:21 <SyntaxNinja> Lemmih: pointer?
14:50:40 <SyntaxNinja> does this have something to do w/ the implementation of printf?
14:50:41 <bourbaki> SyntaxNinja: my idea is that the edges are functions
14:50:47 <bourbaki> arrows to be precise
14:50:51 <Lemmih> SyntaxNinja: (void*)0x56342
14:51:07 <bourbaki> and that i then can use all the nice things on arrows we know to collapse the graph
14:51:32 * SyntaxNinja dereferences Lemmih
14:51:35 * CosmicRay is off to the opera!
14:51:40 <SyntaxNinja> CosmicRay: which one?
14:51:43 <CosmicRay> Aida
14:51:52 <SyntaxNinja> CosmicRay: good choice. have fun.
14:51:55 <SyntaxNinja> want to know how it ends?
14:52:08 <CosmicRay> the heroine dies and everybody is sad, like almost all operas? :-)
14:52:15 <SyntaxNinja> it's very sad
14:52:21 <CosmicRay> actually, I'm familiar with the plot
14:52:29 <Lemmih> SyntaxNinja: Pointer to the HList paper?
14:52:35 <CosmicRay> though I have never seen it performed
14:52:49 <SyntaxNinja> bourbaki: so all the elements in the tree are in the same class?
14:52:57 <SyntaxNinja> CosmicRay: yeah; I saw it once.
14:53:00 <SyntaxNinja> CosmicRay: it's nice :)
14:53:13 <bourbaki> SyntaxNinja: its a graph and no all nodes in the graph have only one type
14:53:20 <CosmicRay> woohoo :-)
14:53:23 * CosmicRay afks
14:53:23 <bourbaki> but the type of the nodes may differ
14:55:48 <SyntaxNinja> Lemmih: yeah
14:58:02 <Lemmih> SyntaxNinja: http://homepages.cwi.nl/~ralf/HList/
14:59:15 <Darius> SyntaxNinja: Have you read the OOHaskell paper?
15:00:24 <SyntaxNinja> Darius: no
15:01:55 <Darius> SyntaxNinja: Changing "HList" to "oohaskell" in the above URI should get you to it.
15:02:03 <Darius> It's worth reading.
15:02:54 <SyntaxNinja> define "should"
15:07:09 <SyntaxNinja> Darius: that URL doesn't work.
15:07:11 <_mordechai> morgn
15:07:38 <Darius> Dammit case, OOHaskell
15:11:08 <SyntaxNinja> Darius: cool. thanks
15:32:06 * SyntaxNinja converts a function from 10 lines of java to one line in Haskell
15:32:46 <Lunar^> SyntaxNinja: \o/
15:33:18 <stepcut> heh
15:34:26 <SyntaxNinja> Lunar^: is that my steaming cup of java?
15:35:20 * boegel can't make his ears stop ringing
15:35:36 <Lunar^> SyntaxNinja: It means something like "hurray" : someone with arms raised
15:36:02 <bourbaki> hey boegel
15:36:03 <SyntaxNinja> yeah
15:36:09 <SyntaxNinja> boegel: are you OK?
15:36:20 <bourbaki> boegel: open the door then
15:36:54 <Darius> SyntaxNinja: How'd you get a "cup of java"?
15:37:28 <boegel> SyntaxNinja: yeah, I just came home from a concert.. guess the music was a bit too loud
15:37:35 <boegel> or I was to close to the speakers:p
15:37:44 <Darius> SyntaxNinja: cu~ There you go.
15:38:24 <Darius> boegel: Excepting perhaps classical concerts, are there concerts where the music -isn't- too loud?
15:38:56 <SyntaxNinja> Darius: the arms are the sides of the cub, and the thing inside is the java
15:39:00 <boegel> Darius: the music can be loud, and it can be too loud
15:39:00 <SyntaxNinja> idono it was a joke
15:39:11 <boegel> there's a big difference between those two
15:46:30 <stepcut> the only concert I have been to where the music was not too loud was portishead
15:47:42 <boegel> stepcut: weren't the basses quite loud then ? (portishead is somewhat like Massive Attack, right ?)
15:52:03 <stepcut> no, it was very tastefully mixed
15:58:33 <Itkovian> any eta on a ghc 6.4 ebuild for gentoo?
15:59:21 <Igloo> There's already a "masked" one, apparently
15:59:50 <Itkovian> aha
15:59:52 <Itkovian> nice
15:59:58 <Itkovian> syncing right now
16:00:06 * boegel goes to bed
16:00:10 <boegel> g'night everyone
16:00:25 <_mordechai> night
16:08:46 <Itkovian> night everyone
16:18:59 <halcyon10> how can i get the n-th element from a list ?
16:19:30 <stepcut> !!
16:20:01 <halcyon10> ah, thanks !
16:20:39 <_mordechai> :)
16:22:06 <stepcut> I think you mean, thanks!!
16:22:55 <halcyon10> yes, i was thinking of that for one moment ;)
16:23:00 <stepcut> haha
16:23:37 <wagle> dont you mean (thanks!!)?
16:24:07 <stepcut> smarty pants
16:24:27 <wagle> woo hoo woo hoo! </daffyduck>
16:26:47 <dons> he. release day for everyone today. yay :)
16:29:37 <metaperl_> Regarding Cale's MonadsAsContainers, http://haskell.org/hawiki/MonadsAsContainers?action=highlight&value=containers   ... I have a question
16:30:27 <metaperl_> If a container is of type (m a) and a function is of type (a -> m b) then how does mapping the function over the container result is a data item of type m (m b)?
16:31:02 <metaperl_> The function requires an input a, not m a, so it can't even accept the input
16:32:10 <Darius> fmap :: (a -> b) -> (m a -> m b), if b is m b, fmap :: (a -> m b) -> (m a -> m (m b))
16:32:17 <metaperl_> unless the function pattern-matched on type and extracted the instance data, i.e., myfunc (m dat) = m (make_a_b dat)
16:32:56 <Darius> metaperl_: You can only pattern match on data constructors.
16:33:12 <metaperl_> oh, not a type constructor
16:33:14 <metaperl_> ok
16:37:28 <shapr> I am not a cook!
16:37:51 <Lunar^> shapr: !
16:37:56 <shapr> Lunar^: !
16:38:05 <_mordechai> hm
16:38:17 <_mordechai> any of you know what's going on with Ward'sWiki?
16:38:20 <Lunar^> shapr: The bad news is: where's lambdabot?
16:38:33 <shapr> _mordechai: other than Robert Abitbol and spamming?
16:38:39 <Lunar^> shapr: The good news is: OGI people added network support to House
16:38:47 <shapr> yay!
16:38:50 <Lunar^> shapr: and the bust news is: GHC 6.4 is out!
16:38:53 <shapr> w00!
16:38:54 <Lunar^> best
16:39:04 <_mordechai> shapr, I don't know but what's up with edits?
16:39:13 <_mordechai> It asks for a code, where can I get that?
16:39:13 <Lunar^> shapr: should we bounce together now?
16:39:17 <shapr> _mordechai: you mean the captcha?
16:39:31 <dons> along with nhc98 and hugs. bounce bounce bounce!
16:39:34 <_mordechai> yea
16:39:48 <Lunar^> dons: Yey!
16:39:54 <_mordechai> @moo
16:39:55 <lambdabot>          (__)
16:39:55 <lambdabot>          (oo)
16:39:55 <lambdabot>    /------\/
16:39:55 <lambdabot>   / |    ||
16:39:55 <lambdabot>  *  /\---/\
16:39:56 <lambdabot>     ~~   ~~
16:39:58 <lambdabot> ...."Have you mooed today?"...
16:40:04 <_mordechai> whoops :(
16:40:13 <Lunar^> Should we declare 12th march as Haskell day ?
16:40:23 <shapr> Every day is haskell day.
16:40:28 <Lunar^> yeah, right :)
16:40:35 <dons> :)
16:40:41 <shapr> Heh, Colin Wright wants me to respond to his coding challenge...
16:40:50 <_mordechai> "Type the code word here [____] then press [Save] to finish editing."
16:41:12 <shapr> _mordechai: http://en.wikipedia.org/wiki/Captcha
16:41:30 <_mordechai> sharp, ok :)
16:41:31 <Lunar^> shapr: You should look at the NE2000 monad, and the Packet functor, that's amazing :)
16:41:40 <shapr> Lunar^: when I have time...
16:41:41 <_mordechai> shapr, sorry :|
16:41:48 <shapr> _mordechai: sorry for what?
16:42:00 <_mordechai> the typo
16:42:12 <shapr> Lunar^: I'm moving 1300 users worth of data from I18NArchetypes to LinguaPlone. It's .... exciting.
16:42:22 <Lunar^> shapr: Yeah, sure :) If you get sad, or whatever, that'll cheer you up
16:42:30 <_mordechai> loo
16:42:34 <_mordechai> k http://c2.com/cgi/wiki?edit=HaskellLanguage
16:42:35 <stepcut> Lunar^: where can I find the code for the NE2000 monad and packet functor ?
16:42:45 <_mordechai> where is the code? what am i missing?
16:42:51 <Lunar^> stepcut: House repository
16:42:52 <shapr> _mordechai: no worries, our cerebellum does the walking, I understand. I've had trouble typing the word 'sharp' last few years.
16:43:04 <Lunar^> stepcut: http://www.cse.ogi.edu/~hallgren/House/kernel/pfe.cgi?Net.IPv4
16:43:08 * stepcut missed the part where there was a house repository at all ;)
16:43:13 <_mordechai> :}
16:43:38 <shapr> stepcut: it's on cvs.haskell.org
16:43:40 <Lunar^> stepcut: http://www.cse.ogi.edu/~hallgren/House/kernel/pfe.cgi?Kernel.Driver.NE2000.Monad
16:44:21 * stepcut drools
16:45:25 <stepcut> nice
16:45:38 <Oejet> _mordechai: Ow, High Plains Drifter was just on the television and one character was named mordechai.
16:46:23 <_mordechai> Oejet, hehe
16:46:33 <shapr> Lunar^: I'll bounce when this port is done, but I promise I'm saving up bounce to email to you when I have to play with the NE2000 monad :-)
16:47:25 <Darius> Type level indexing... in an OS Kernel!
16:47:39 <shapr> Lunar^: I strongly suspect that QuickCheckM and a pure Haskell TCP/IP stack could get counterpane to hire someone new.
16:48:08 <dons> Darius: yeah, yeah!
16:48:10 <Darius> Type level hackery all around.
16:48:45 <Lunar^> That rocks
16:49:15 <Lunar^> simple, purely, functionaly, lazily, rocks
16:50:08 <Lunar^> shapr: counterpane?
16:50:49 <shapr> http://www.counterpane.com/schneier.html
16:55:47 <Lunar^> Freaky
16:56:04 <Lunar^> They've written a TUN interface to test the net stuff
16:56:13 <Lunar^> I've though about this :)
16:56:17 <Lunar^> +t
16:58:06 <Lunar^>     ["tftp","get",arg1,arg2] -> withIPaddr arg1 (tftpget arg2)
16:58:12 <Lunar^> 41 hours ago
16:58:13 <Lunar^> How cool
16:59:12 <stepcut> shapr: tell me about joy
17:03:33 <shapr> it's cool.
17:04:01 <shapr> It's fun to write.
17:04:21 <shapr> If Haskell, Forth, and Perl had an illegitamite child, it would be Joy.
17:05:23 <Darius> shapr: What are the Perl influences?
17:06:58 <_mordechai> is joy like J?
17:07:26 <shapr> Darius: ability to create difficult to read write-only code?
17:07:48 <Khisanth> shapr: Haskell already has that covered! :)
17:07:54 <shapr> You
17:07:58 <shapr>  ain't seen nothin yet
17:08:11 <shapr> Khisanth: hey, did you think about the language issue question I asked you earlier?
17:08:14 <_mordechai> :> what?
17:08:26 <_mordechai> haskell is sooo readable, simple and elegant...
17:08:32 <Khisanth> shapr: which issue would that be? I have poor memory
17:08:49 <shapr> Khisanth: What does this Joy function do? DEFINE name == 100.0 / rotate [0 =] [pop] [dup rolldown - swap /] ifte > .
17:09:17 <shapr> It takes as input three numbers on the top of the stack.
17:09:21 <Khisanth> don't know anything about Joy :)
17:09:39 <shapr> Ok, I'll give in... it's approximately equal.
17:09:48 <Khisanth> ouch that would beat Perl in unreadability easily :)
17:10:06 <Darius> @seen lambdabot
17:10:07 <lambdabot> Yes, I'm here
17:10:09 <Darius> Yay!
17:11:48 <Darius> @eval joy "5 [[pop 0 =] [pop pop 1] [[dup 1 -] dip x] ifte] x"
17:12:05 <lambdabot> [1, 1, 2, 3, 4, 5]
17:12:44 <Lunar^> Why is it so hard to write academic e-mails... *sigh*
17:12:48 <_mordechai> @eval haskell putStr "hello"
17:12:49 <lambdabot> unbound variable: haskell
17:12:54 <shapr> stepcut: I think Joy is another one of the 'purist' languages, but for Joy it's purely concatenative.
17:13:20 <stepcut> shapr: libraries aside, could you write real apps in it ?
17:13:28 <stepcut> and not go insane ?
17:13:46 <Oejet> Yay, recipe and binary package for GHC 6.4 is online!
17:13:49 <Darius> stepcut: If you're really into recursion combinators...
17:14:17 * Darius forgot the important part
17:14:19 <stepcut> shapr; or is it more of a fun toy language ?
17:14:42 <Darius> @eval joy "5 [[pop 0 =] [pop pop 1] [[dup 1 - *] dip x] ifte] x"
17:14:42 <Lemmih> Oejet: Hurrah.
17:15:03 <Oejet> GoboLinux users are spoiled. :-P
17:15:06 <lambdabot> out of fuel - use @resume to continue
17:15:16 <_mordechai> haha
17:15:34 <Darius> stepcut: At this point it's more of a fun toy language, but not really due to the language itself.  If Forth people can write programs, Joy isn't much worse.
17:15:38 <Darius> @resume
17:15:53 <shapr> stepcut: You could write real apps in it, but it really started as a toy.
17:15:54 <lambdabot> out of fuel - use @resume to continue
17:16:20 * Darius felt that something was wrong
17:16:39 <Khisanth> gas guzzling bots ... just what the world needs! :p
17:16:41 <Darius> @eval joy "5 [[pop 0 =] [pop pop 1] [[dup 1 -] dip x *] ifte] x"
17:17:00 <lambdabot> [120]
17:17:03 <Darius> stepcut: You can also hack it on a cell phone if you'd like.
17:17:15 <stepcut> Darius: oh
17:20:58 <_mordechai> hm i like gobolinux.org's design
17:21:05 <shapr> Yeah, check out Darius' nifty Joy implementation that runs on cellphone.
17:21:46 <juhp> hi shapr
17:22:18 <shapr> hiya juhp
17:22:45 <shapr> No, I haven't yet had time to see if hsc2hs works.
17:22:53 <juhp> hmm, hugs and ghc releases on the same day... smells of conspiracy to me ;o) :-)
17:23:05 <juhp> shapr: okay :)
17:24:10 <dons> juhp: more than that - nhc98 too
17:24:19 <juhp> ok, cool
17:24:25 <juhp> must be that cabal ;)
17:24:28 <dons> looks like only hbc didn't get in onn the act ;)
17:24:33 <juhp> hehe
17:24:47 <dons> and i'd thought there was no cabal...
17:25:05 <juhp> that's what they want you to think ;)
17:25:23 <dons> hehe
17:26:33 <juhp> maybe this is a good excuse to add nhc98 too to Fedora Extras :)
17:28:30 <juhp> oh cool, had quite missed The Haskell Sequence
17:30:06 <SyntaxNinja> yay!
17:30:08 <SyntaxNinja> hugs release
17:34:16 <juhp> luckily I just package a snapshot of hugs a few days ago, and thought through the version number, so it is a piece of cake to do the update now :)
17:34:23 <juhp> packaged
17:34:50 <SyntaxNinja> update for what?
17:35:02 <juhp> Fedora Haskell :)
17:35:27 <SyntaxNinja> muahahah! I beat you by three days in Debian ;)
17:35:28 <SyntaxNinja> http://packages.debian.org/unstable/interpreters/hugs
17:35:40 <SyntaxNinja> (I had insider information)
17:35:43 <juhp> hehe
17:35:55 <dons> ah1 sneaky.
17:36:26 * juhp goes to diff against 20050308... ;)
17:36:29 * dons starts hacking the oBSD package
17:36:41 * SyntaxNinja is the fastest packager here!
17:36:54 <SyntaxNinja> although Igloo is probably faster, considering GHC is much a much harder package
17:37:05 <SyntaxNinja> Igloo: should we announce your GHC version for Debian?
17:37:22 <dons> yikes! too fast.
17:37:33 <SyntaxNinja> the debian cabal is powerful
17:38:10 <dons> though openbsd is a bit harder, as I boot from .hc files - not a binary.
17:38:54 <Igloo> Yes
17:39:33 <SyntaxNinja> yes what
17:40:18 <juhp> SyntaxNinja: I thought it is cute though numbering hugs at version 98 in debian :)
17:40:46 <Igloo> Yes we should announce my GHC package for Debian
17:40:53 <SyntaxNinja> eh, I didn't come up with the numbering scheme; it's painful to me, but it's there, so we live with it...
17:41:06 <SyntaxNinja> when a new Haskell appears, hopefully it'll sort higher ;)
17:41:18 <SyntaxNinja> then that'll be the BIG PAYOFF for using that annoying numbering scheme
17:41:37 <SyntaxNinja> Igloo: I thought I'd post a GHC and Hugs package announcement
17:41:50 <Igloo> You can switch to $date rather than 98.$date and stay increasing
17:41:56 <shapr> Igloo: hey, did you see the -lpthread bug with ghc 6.4 HOpenGL?
17:42:13 <juhp> SyntaxNinja: ok.  I decided on hugs98-2005.03-1 for fedora
17:42:47 <SyntaxNinja> Igloo: unless it's called Haskell 2 or something
17:42:56 <SyntaxNinja> oh you mean for hugs. yeah true
17:43:19 <juhp> SyntaxNinja: the hugs maintainer don't seem to care much about version numbering anyway...
17:43:36 <Oejet> SyntaxNinja: What do you mean GHC is a much harder package?
17:43:55 <juhp> Oejet: hugs is written in C ?
17:44:10 <juhp> and a "bit" smaller
17:44:40 <Igloo> OK, feel free to do that if you prefer
17:44:50 <SyntaxNinja> Oejet: it takes longer to compile, is less portable
17:44:55 <Oejet> juhp: That has little to do with how easy it is to package.
17:45:25 <Igloo> shapr: e-mail me with the versino numbers and names of relevant packages (ghc and opengl), a tiny example and what goes wrong with it please
17:45:26 <juhp> Oejet: well, the former has when you're porting to new archs
17:45:39 <juhp> and the latter doesn't help :)
17:46:23 <Oejet> SyntaxNinja: Ah, at least painless on GoboLinux: MakeRecipe GHC 6.4 url...; Compile GHC. That makes a recipe.
17:46:48 <Oejet> CreatePackage GHC 6.4 then creates a binary package.
17:47:52 <juhp> sounds nice
17:48:35 <Oejet> I guess other systems are almost as easy because GHC uses Autoconf.
17:49:00 <SyntaxNinja> now I have to start hacking on Hackage...
17:49:03 <shapr> Igloo: both ghc6.2-hopengl and the haskell-unsafe ghc6.4-hopengl debs require me to add -lpthread to the command-line on my box. That's the whole thing.
17:49:41 <SyntaxNinja> Igloo: eh, I'm not going to have a chance to announce the debian stuff for a few hours. feel free to do it if you like.  I'll maybe be back later.
17:49:48 * shapr gives in to sleep
17:50:00 <SyntaxNinja> l8r shapr
17:50:18 <Igloo> shapr: Well it works fine for me, so I need more info
17:50:46 <SyntaxNinja> Igloo: did ghc come with runhaskell?
17:51:00 <Igloo> Yes, but it's not in /usr/bin in the debs yet
17:51:20 <Igloo> Oejet: On x86 Linux with a tested gcc it's that easy, yes...
17:51:28 <juhp> Oejet: I admit compared to writing code packaging is easier, but there are lots of details that only a human would think of -- eg subpackaging etc
17:51:46 <juhp> so it is not completely trivial
17:52:10 <Igloo> (well, nearly. I had to tweak some of the Debian specific stuff from 6.2 to 6.4, and still have a small patch carried over)
17:53:59 <Oejet> juhp: I agree.  I would fear engaging in compiling GHC on Solaris.  Darcs I fear for shure.  I think it should be up the the author of the program to make a package.
17:54:40 <SyntaxNinja> Oejet: well, the author  can't be expected to build packages for all platforms
17:55:21 <SyntaxNinja> Igloo: does it just always run runghc, or does it optionally run runhugs?
17:55:56 <juhp> people have talked/dreamed about "autopackage" and such things, but it never seemed to take off yet
17:57:08 <SyntaxNinja> OK gotta go home. ttyl
18:30:48 <Lemmih> Weird. Using SDL-mixer for GHCi fails with SIGHUB.
18:31:08 <Lemmih> But it works fine when I compile the program.
18:32:52 <Lemmih> Woot. After two and a half day of really hard work, I now have an almost complete binding to SDL, SDL-gfx, SDL-image, SDL-TTF and SDL-mixer (:
18:43:54 <juhp> hmm, nhc98 has grown a fair bit, eh?
18:44:14 <juhp> 1.18 is over double the size of 1.16
18:48:12 <dons> lots of new libraries?
18:49:51 <juhp> I guess so
20:03:10 <halcyon10> if i have a function like : 'countSortedCases n sn = (length (multisort sn (testcases n)), length (testcases n))'  would it make evaluation faster if i factored out the 'testcases n' ? or stated in another way: does 'testcases n' get evaluated two times or just once?
20:21:04 <monochrom> an optimization compiler will evaluate it just once.
20:21:28 <monochrom> I think ghc -O does that.
20:23:01 <halcyon10> ah, thanks for that info
22:55:47 <wilx`> Hmm....
22:56:16 <wilx`> Is there some paper/tutorial for ST monad, STRef and STArray?
23:00:44 <wilx> Also, is there a native Haskell unsigned integer type?
23:17:32 <musasabi> Word/Word{8,16,32,64}
23:30:21 <wilx> w00t! GHC 6.4 is out!
23:30:29 <wilx> *downloads*
23:30:31 <autrijus> woot!
23:30:39 <wilx> :)
23:31:55 <Gahhh> holy monad
23:38:50 <wilx> Hm, it still uses old 3.2.3 GCC as backend :/
23:40:24 <Gahhh> it says it generates native code on x86
23:40:48 <autrijus> only when -O0
23:41:23 <wilx> And the MSI installer have not installed any shortcuts/program groups :/
23:41:46 <wilx> Maybe...let me check...
23:43:09 <wilx> Yup.
23:43:31 <wilx> It has installed them only to Administrator's start menu.
