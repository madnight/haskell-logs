00:01:01 <blackdog> dons: does yi-static load the config file? yi itself still has a "unknown symbol '_stg_int64ToInt'" message
00:01:25 <dons> blackdog: do you have an old ~/.yi/*.o file?
00:01:37 <blackdog> nope
00:01:40 <dons> try touching ~/.yi/Config.hs and then see if it gets recompiled
00:04:40 <blackdog> ah, emacs support is broken. anyway, i switched to nano mode instead, and it compiles it ok, but yi-static still goes straight into vi mode.
00:05:09 <blackdog> yi itself still doesn't get past the stg thing
00:05:35 <dons> yep. yi-static has the mode compiled in.
00:05:52 <dons> you can use --as=nano etc, I think
00:06:24 <dons> the vim mode is the most complete
00:06:48 <dons> just testing installation and docs now.
00:07:02 <blackdog> ok, gotcha. i'm not really that fussed about which mode i use, it's more a matter of working out how to start extending it.
00:07:52 <dons> ok. to extend. you need ./yi-inplace, and copy , say, examples/AddBind.hs to ~/.yi/Config.hs
00:08:18 <dons> better is to actually hack the Yi module atm.
00:08:28 <dons> or, say, the emacs binding
00:09:29 <blackdog> yi-inplace crashes too
00:09:36 <blackdog> /Users/mwotton/src/yi-ghc6.4/HSyi.o: unknown symbol `_stg_int64ToInt'
00:09:37 <blackdog> yi_: user error (resolveObjs failed with <<False>>)
00:09:40 <dons> !
00:09:49 <blackdog> might be a macos thing
00:09:58 <dons> hmm. it's new though.
00:10:02 * blackdog knows nussink. Nussink!
00:10:14 <blackdog> yeah, google is clueless too.
00:10:26 <dons> it rings a bell, for some reason. hmm.
00:13:57 <dons> blackdog: step 1 is to work out where that symbol is actually defined.
00:16:03 <dons> HSbase_cbits.o
00:16:50 <dons> btw, blackdog, "user error" is not a crash ;)
00:17:17 <blackdog> i'm a pragmatist in such things. :)
00:21:46 <blackdog> dons: step 2 .... ?
00:22:23 <blackdog> (the first person to say "step 3: profit" gets blackjacked with a trout.)
00:24:54 <dons> well, I don't know step 2.
00:25:00 <dons> check stuff
00:25:04 <dons> ;)
00:25:19 <dons> i think i'll have to do some tests tomorrow on ozone's g5
00:25:53 <blackdog> ok. i'm feeling insufficiently mac guru-ish to take that one on tonight.
00:28:42 <dons> go for it. now, time for me to get some food
00:28:52 <dons> can't think on chocolate bunnies alone
00:29:07 <blackdog> insufficiently, don - "insufficiently". :)
00:54:55 <sylvan> HOpenGL is cool...
00:56:02 <Lemmih> I second that.
00:59:05 <Lemmih> And it gets even nicer with SDL instead of GLUT.
01:13:17 <skew> Lemmih: what SDL binding are you using?
01:14:34 <Lemmih> My own. All the other binding I've found have either been incomplete, GPL'ed or both.
01:16:04 <lightstep> gpl is bad?
01:16:07 <Lemmih> I got cabalized bindings to SDL_image, SDL_mixer, SDL_TTF and a SDL_Surface->GL texture function if you're interested.
01:16:13 <lightstep> you don't have to release your source
01:17:27 <Lemmih> You can't publish you code under a BSD-like license when using GPL code.
01:17:44 <lightstep> oh
01:18:40 <lightstep> publishing bindings with a stricter license than the library sucks
01:20:19 <cm> happy easter, btw :o
01:20:41 <Lemmih> God paaske (:
01:24:21 <sylvan> Lemmih, you wouldn't mind posting your SDL-binding somehwere?
01:27:36 <Lemmih> I have nowhere to put it /-:
01:28:14 <sylvan> www.haskell.org/sdl ?
01:28:16 <sylvan> =)
01:28:47 <Cale> Lemmih: install apache?
01:29:02 <sylvan> Email John Peterson, he's not very stingy when it comes to lettng people put stuff on haskell.org
01:30:05 <Lemmih> sylvan: Yeah, but putting stuff on haskell.org is soon gonna be completely outdated by Hackage.
01:30:24 <skew> Lemmih: Even if you don't have a place to put the package?
01:30:37 <sylvan> ah, haven't really looked into Hackage yet
01:33:51 <Lemmih> skew: Hackage will host the package.
01:43:31 * Lemmih pokes his routers nat settings.
01:47:26 <Lemmih> They are now available from http://212.242.49.100/apache2-default/{name}-0.1.0.tgz where name = [SDL,SDL-ttf,SDL-mixer,SDL-image]
01:49:43 <Lemmih> The documentation is nonexistent for the addons and they're all somewhat incomplete.
01:55:59 <Oeje1> Good day, Lemmih.
01:56:46 <basti_> hi
01:56:47 <Lemmih> Yo Oeje1.
01:57:52 * Oeje1 wonders why there is a 50% chance of getting a '1' instead of a 't' appended on Freenode.
02:00:37 <Cale> Oejet is already logged in
02:01:48 <Cale> and looks like you -- sure you don't have another client running?
02:02:28 <Oeje1> Cale: No, it doesn't seem like it.
02:02:46 <Cale> do a whois Oejet to see
02:02:51 <Oeje1> Cale: How could you tell?
02:02:51 <Cale>  /whois
02:03:19 <Cale> Oejet is on #gobolinux
02:08:59 <Oeje1> Hm, seems like irc.linux.org (#gobolinux) is kornbluth.freenode.net, and thus the nick collision.
02:10:15 <Oejet> Thanks, Cale.
02:10:33 <sylvan> Lemih: thanks!
02:10:39 <Cale> Oejet: no problem
02:10:51 <cm> nn
02:14:15 <Lemmih> sylvan: I got time to hack more on them, just haven't felt the need yet. Feel free to send feature requests.
02:14:27 <xerox> 'morning
02:18:00 <sylvan> Lemmih: Sure I'll just try to get it to build on windows first =)
02:21:02 <sylvan> How does one specify where to find the SDL libraries in the cabal-file?
02:21:49 <Lemmih> Extra-lib-dirs I think.
02:21:55 <sylvan> okay
02:22:58 <sylvan> hmm.. can't get it to work...
02:23:14 <sylvan> H:\SDL\SDL-0.1.0>runhaskell Setup.lhs build
02:23:14 <sylvan> Preprocessing library SDL-0.1.0...
02:23:14 <sylvan> d:/ghc/ghc-6.4/libHSrts.a(Main.o)(.text+0x87):Main.c: undefined reference to `__
02:23:14 <sylvan> stginit_ZCMain'
02:23:14 <sylvan> d:/ghc/ghc-6.4/libHSrts.a(Main.o)(.text+0xa1):Main.c: undefined reference to `ZC
02:23:14 <sylvan> Main_main_closure'
02:23:16 <sylvan> *** Exception: got error code while preprocessing: Graphics.SDL.Video
02:24:54 * Lemmih doesn't have a Windows box.
02:25:11 <Lemmih> And I haven't seen that error before.
02:25:58 <sylvan> I think it's because it can't find the libs or something... maybe.. Bah.. installing libraries from source is a pain in the ass on windows
02:27:10 <Lemmih> What does 'build -v' say?
02:28:01 <sylvan> H:\SDL\SDL-0.1.0>setup build -v
02:28:01 <sylvan> Preprocessing library SDL-0.1.0...
02:28:01 <sylvan> d:\ghc\ghc-6.4\bin\hsc2hs.exe -ID:\program\SDL-1.2.8\include\SDL -D_REENTRANT -o
02:28:01 <sylvan> Graphics\SDL\Video.hs Graphics\SDL\Video.hsc
02:28:01 <sylvan> d:/ghc/ghc-6.4/libHSrts.a(Main.o)(.text+0x87):Main.c: undefined reference to `__
02:28:01 <sylvan> stginit_ZCMain'
02:28:03 <sylvan> d:/ghc/ghc-6.4/libHSrts.a(Main.o)(.text+0xa1):Main.c: undefined reference to `ZC
02:28:05 <sylvan> Main_main_closure'
02:28:08 <sylvan> setup: got error code while preprocessing: Graphics.SDL.Video
02:29:17 <Lemmih> Hmm
02:30:53 <sylvan> Anyway, I'm late so I'll need to play with it later tonight...
02:31:08 <Lemmih> Yeah, I'm off too.
03:15:02 <shapr> monads are really useful.
03:15:24 <shapr> It's amazing how many problems in other languages come from insufficient sequencing
03:16:04 <shapr> hej psi
03:16:08 <shapr> mmm, sauna-time
03:16:11 <psi> tja
03:16:15 <psi> nice :)
03:16:17 <blackdog> g'day shapr
03:25:13 <rik> can i declare a data member of a class as a member function with 0 arguments?
03:27:47 <ibid> the signature must include the class type
03:27:54 <ibid> otherwise yes
03:28:28 <rik> then i'm going about things the wrong way.
03:28:33 <ibid> actually, for most uses, you'd use class Foo a where foo :: a -> Int
03:28:57 <rik> oh. that sounds more like it.
03:29:50 <rik> now i need to work out instances
03:35:35 <rik> okay, i need to ask advice.
03:35:47 <Heffalump> go ahead
03:36:47 <rik> i have a set of data types i'd going to be dealing with. these data types all have certain things in common, a textual representation routine, a name of the type, an encoder (Haskell type to String) and a decoder (String to Haskell type).
03:37:26 <rik> i'm going to need a data Foo = Type | Type | Type to group it all together, but I don't quite get how to group the "these things all have some functions in common" in with it.
03:37:57 <rik> i know i'm on the right lines with classes and instances, but it's not quite made sense
03:38:40 <rik> classes feel like a template class from C++, rather than an actual class
03:39:16 <Heffalump> type classes are essentially a compile-time thing
03:39:35 <Heffalump> are you saying you want to have a list/other collection of these types?
03:40:08 <rik> yes. the data statement will end up being a recursive statement.
03:40:34 <rik> this may be easier to think about if i tell you that i'm writing a decoder for a subset of ASN.1
03:41:12 <rik> so each type will have a haskell representation and a flattened String representation
03:41:42 <rik> the "type" in "so each type" being an ASN.1 type, rather than a Haskell type, and this is getting complicated already.
03:41:59 <Heffalump> I think what you might want is to use an existential type, which is an extension to Haskell 98
03:42:06 <rik> oh
03:42:16 <rik> maybe i want to learn ocaml for now :)
03:43:17 <rik> the effect i'm after is something like Java's interface classes, and some concrete classes that implement the interface
03:43:22 <Heffalump> data MODULE = forall m. (Module m) => MODULE m
03:44:00 <Heffalump> that declaration is basically saying that something of type MODULE can be constructed from something that has a type that is a member of the Module type class.
03:45:19 <rik> hmm
03:45:55 <rik> okay. i need to lie down again, i'm still tired. i'll think about that some more.
03:45:59 <rik> thanks.
03:47:19 <Heffalump> you'll need to use ghc -fglasgow-exts or hugs -98 to make that work, btw.
03:47:28 <Heffalump> otherwise it'll get parsed as a syntax error, which is a bit confusing
04:00:05 <Oejet> I found a typo in YAHT p. 107.  Where do I report it?
04:05:15 <Lemmih> To Hal Daume, perhaps?
04:07:13 <Oejet> Ok, I'm too lazy now.
04:08:32 * Lemmih pokes shapr.
04:09:44 <dons> hey shapr, if you want to build yi, that'd be useful before I release it in about 12 hrs
04:11:16 <blackdog> oh, you're back. is anyone working on an emacs mode for yi, before i start?
04:11:37 <blackdog> dons: I think he's sweating profusely
04:11:53 <dons> it's nominally shapr's, but you can go for it, if you'd like
04:12:12 <dons> he's writing a tutorial on writing key bindings, I think.
04:12:34 <blackdog> sounds like it's well in hand, then. I shan't step on any toes - lots of other things to work on.
04:13:03 <dons> any change in the unresolved symbol issue on the mac?
04:13:34 <blackdog> no, alas.
04:13:50 <metaperl> from a ghc perspective, is it better to run fedora2 or redhat 9?
04:13:57 <dons> ok. that goes on the "must fix" list.
04:14:17 <dons> metaperl: no difference. what kind of difference would you expect?
04:14:33 <metaperl> I just didnt know if there was more support for one or the other
04:14:43 <metaperl> like more up to date releases or something
04:14:44 <dons> it's just linux to ghc.
04:15:05 <dons> oh, possibly in the distros port system, yeah. could be quite variable
04:15:28 <dons> but you can always grab ghc and build it yourself.
04:18:10 <shapr> wheee
04:18:29 <shapr> mmm, saunas are great
04:20:16 <blackdog> shapr: don mentioned you were working on an emacs keymap for vim ... ?
04:20:27 <blackdog> uh, yi, i mean.
04:20:28 <dons> s/vim/yi/
04:20:38 <blackdog> that other thing i said is an abomination in the eyes of the lord
04:20:43 <shapr> I've been working on keymap tutorial.
04:22:04 <shapr> Since I didn't really know how to do the emacs keymap, I figured if I wrote a keymap tutorial then I would know, and everyone else could easily learn.
04:22:40 <shapr> dons: is the synhl stuff in?
04:22:51 <dons> nope. after release
04:22:54 <shapr> ok
04:23:09 <shapr> w00, yi-inplace works with 6.4!
04:23:12 * shapr does the happy dance!
04:23:20 <dons> :D
04:24:09 <_JusSx_> gentoo hasn't got yet ghc 6.4
04:24:19 <Lemmih> _JusSx_: It's just masked.
04:24:27 <_JusSx_> really?
04:24:33 <Lemmih> Yes.
04:24:39 <Heffalump> yeah, kosmikus put it in the day 6.4 came out, IIRC
04:24:41 <shapr> Lemmih: I'll see what I can do about the repos.
04:24:46 <_JusSx_> today it's masked
04:24:58 <_JusSx_> yesterday it wasn't masked
04:26:20 <dons> hmm. -fliberate-case-threshold manages to convince ghc-6.0.1 to panic with 'no parse'
04:26:33 <dons> on some files only.
04:28:48 <dons> these fancy optimisation flags should get nightly tested
04:29:02 <shapr> darcs test
04:29:03 <shapr> ?
04:29:07 <shapr> hiya Gnosis
04:29:40 <dons> shapr, I mean ghc's nightly regress should be run with the funny flags turned up
04:29:46 <shapr> oh
04:29:49 <shapr> yes
04:30:25 <Heffalump> 6.0.1 ?
04:30:35 <Heffalump> why bother testing that?
04:30:37 <dons> :) just checking on some funny boxes
04:30:43 <Gnosis> hiya all
04:31:43 <Gnosis> can u scan 213.98.98.122
04:31:47 <Gnosis> tits my ip
04:31:53 <Gnosis> its my ip
04:32:15 <Gnosis> and i have extranges hops and rare conns
04:32:30 <Gnosis> connections oc
04:32:59 <shapr> are you sure you're on the right channel?
04:33:09 <Gnosis> my ip hops in 213.98.98.66 but this ip isny mine
04:33:20 <Gnosis> *isnt
04:33:32 <Gnosis> perhaps
04:33:46 <blackdog> Gnosis: what shapr is politely trying to suggest is that unless your router runs a lazy functional programming language, why are you asking here?
04:33:56 <Gnosis> thaskell is for inteligent people ;)
04:34:21 <Gnosis> toh man come on  read into the lines
04:34:45 <_JusSx_> Lemmih: i can't find ghc 6.4 in my gentoo portage
04:34:50 <shapr> I did read between the lines. It sounded like you're trying to get me to portscan someone else :-)
04:34:51 <_JusSx_> Lemmih: are you sure?
04:34:58 <Lemmih> _JusSx_: Yes. It's hard masked.
04:35:05 <_JusSx_> sp?
04:35:25 <_JusSx_> so? how can i emerge HARD masked packages?
04:35:40 <Lemmih> Remove it from the mask file.
04:35:55 <_JusSx_> what's the shell variable?
04:36:18 <blackdog> dons: I don't seem to have the html target for yi. Granted, I don't have haddock, but shouldn't configure pick that up? (meanwhile, haddock refuses to build on macos. gr.)
04:36:25 <Gnosis> no sharp
04:36:37 <Lemmih> _JusSx_: You _must_ to remove it from the mask file.
04:36:49 <dons> blackdog: good point.
04:37:11 <_JusSx_> Lemmih: how? i can't find it this is the prob. how can i remove what i can't find?
04:37:37 <Lemmih> Look under /etc/portage and /usr/portage/
04:37:57 <_JusSx_> yeah i found it
04:38:02 * Lemmih hasn't used Gentoo for months.
04:38:22 <shapr> Gnosis: I think you're more likely to get that sort of help in some other channel.
04:38:32 <shapr> Gnosis: but if you have questions about Haskell, we can help.
04:39:09 <shapr> There is a TCP/IP stack written in Haskell. You could use that to portscan yourself.
04:40:02 <blackdog> @seen seafood
04:40:02 <lambdabot> I haven't seen seafood
04:40:14 <shapr> @seen crawfish
04:40:15 <lambdabot> I haven't seen crawfish
04:40:18 <blackdog> what, like ever? Surely not...
04:40:31 <blackdog> Does Sean use a different nom de plume?
04:40:32 <Gnosis> i know it, but i cant do anything from here, anyway thanks a lot
04:40:32 <shapr> SeenModule info is not persisted across runs.
04:40:41 <blackdog> ah, gotcha.
04:40:46 <Lemmih> blackdog: lambdabot suffers from amnesia.
04:40:55 <shapr> Though with musasabi's new SerTH I might be able to fix that.
04:41:57 <dons> make lambdabot persistant in some automagic way??
04:42:06 <shapr> At least some parts of it.
04:42:15 <dons> because it can be done by hand, of course
04:42:30 <dons> show/read worked for me with a quotable-quotes modules
04:42:50 <shapr> darcs get http://www.cs.helsinki.fi/u/ekarttun/SerTH/SerTH/
04:43:03 <shapr> uses TH to autoderive binary serialization for most types.
04:43:09 <dons> oh man!
04:43:15 <shapr> yeah, that's what I said :-)
04:43:25 <Gnosis> lamb? all animals
04:43:36 <dons> like DrIFT's Binary class, except THified :)
04:43:37 <Gnosis> what do u think?
04:43:48 <Gnosis> yhink about that
04:43:57 <shapr> Gnosis: I've never tried doga calculus.
04:43:58 <Gnosis> WELL BYE
04:44:15 <shapr> hostile newbies off the port bow!
04:45:03 <blackdog> Cannons of Supremely Unhelpful Politeness loaded and ready for your command, sah!
04:45:16 <shapr> fire at wli! I mean, fire at wil!
04:45:26 <blackdog> what did wil ever do to you?
04:45:37 <shapr> He was on Star Trek. And he was irritating.
04:45:49 <shapr> Actually, Bea says his books and website are really great.
04:45:51 <dons> ah, the encode/decode stuff in Serializable looks a lot like Binary.
04:46:23 <dons> this is very nice stuff.
04:46:36 <shapr> credits to musasabi for cool code
04:46:41 <dons> yeah.
04:47:19 <dons> and there's even an unsafeCoerce# , I'm hooked
04:47:59 <blackdog> it's just not real code to you unless there's some grotty corner, is it..
04:48:21 <dons> means there's something interesting happening
04:48:42 <blackdog> it's neither a sufficient nor a necessary condition...
04:48:49 <dons> blackdog: that patch fix your haddock ?
04:49:38 <blackdog> checking now. still can't get haddock compiling on mac. bastardos.
04:50:05 <shapr> I got email from Benjamin Pierce! cool!
04:50:13 <dons> shapr++
04:50:31 <blackdog> dons: yep, sweet as.
04:51:13 <shapr> Seems like he's also somewhat interested in QuickCheckM for testing IO.
04:51:27 <dons> ok, I'm off now. I'll try to dream up some good use of SerTH.
04:51:35 <shapr> cya
04:51:39 <shapr> I gotta go be social
04:51:41 <dons> hmm. encrypted encodings?
04:51:57 <shapr> yeah, musasabi was talking about stream mutators, encryption, lzw, etc
04:52:11 <shapr> I was thinking about Erlang/OTP
04:52:18 <shapr> I want an mnesia database for Haskell.
04:52:24 <shapr> distributed serverless apps
04:53:18 <dons> hmm. just need a bytecode representation for serialised functions
04:53:22 <dons> then we'd be set.
04:53:45 <_JusSx_> shapr> | I got email from Benjamin Pierce! cool!
04:53:49 <Lunar^> dons: don't we have that with GHCi ?
04:53:51 <_JusSx_> who is he?
04:54:07 <dons> Lunar: yeah, but it isn't external.
04:54:22 <dons> it should be though - we could have bytecode plugins, for one
04:55:01 <dons> ok. gotta go. ciao :)
04:55:08 <_JusSx_> dons:
04:55:09 <_JusSx_> ?
04:55:10 <_JusSx_> italian?
04:55:32 <shapr> _JusSx_: bc pierce wrote TaPL
04:55:46 <shapr> http://www.cis.upenn.edu/~bcpierce/
04:55:49 <_JusSx_> i found it with google
04:55:49 <shapr> salut Lunar^
04:55:49 <_JusSx_> thanc
04:57:49 <Lunar^> shapr: 13 000 mailboxes on a RAID 0 drive... it's been 4 days that one of the hard disk keeps crashing
04:58:56 <shapr> yikes
05:00:32 <shapr> I'm sure that's fun.
05:00:43 <shapr> Lunar^: I can't figure out how to build House from the cvs checkout. Any hints?
05:00:44 <basti_> mmh
05:00:52 <Lunar^> shapr: And the box crashed again this morning during the copy to new hard drive
05:00:53 <basti_> shapr: i'm going tonal music with haskell now.
05:00:55 <basti_> =)
05:00:57 <shapr> basti_: cool
05:01:01 <Lunar^> shapr: So I'm off to the data center once more
05:01:03 <basti_> naw not tonal
05:01:04 <basti_> thing
05:01:06 <shapr> Lunar^: extreme suckage
05:01:08 <basti_> ranga? raga?
05:01:10 <basti_> the indian thing
05:01:23 <Lunar^> shapr: There a ready-to-hack tarball on House page IIRC
05:01:26 <blackdog> atonal.
05:01:38 <blackdog> oh, raga. ok.
05:02:05 <shapr> oh, ok
05:02:48 <basti_> didnt figure it out completely yet.
05:03:04 <basti_> oh we need to do something about that darcs repo
05:05:03 <shapr> right, I need to put up the Author wiki.
05:05:34 <basti_> oh.
05:05:38 <basti_> will it be darcsable?
05:11:12 <rik> i am awake again
05:11:41 <rik> shapr: did you see my earlier wibblings?
05:11:44 <basti_> rik: welcome
05:11:49 <rik> basti_: thanks
05:29:34 <shapr> rik: no, what wibble?
05:29:44 <rik> shapr: i decided to write the ASN.1 decoder anyway.
05:29:51 <shapr> oh, nifty
05:29:59 <rik> I was having trouble with something i thought the polymorphism ought to easily cope with.
05:30:18 <shapr> I gotta go to a party, I'll bbl
05:30:22 <rik> okay. have fun
05:30:32 <rik> i'lll bother other people here for advice then :)
06:38:09 <Spark> my supervisor is suggesting i do a project in verification of concurrent programs, i'm like "argh!"
06:42:30 <Oejet> Spark: How do you verify that a concurrent program is correct?
06:42:45 <Spark> i have no sodding idea
06:42:56 <Spark> i imagine it would be with respect to a specification
07:00:35 <tuomov> yeah, there are theories where the idea is to verify that the program precedes the specification model in some partial order or something like that
07:01:06 <tuomov> one of the cs profs in the uni I did my m.sc in does research in that sort of stuff
07:01:39 <Spark> mm
07:01:53 <Spark> abstract interpretation?
07:02:02 <rik> i'm beginning to think that my project is a little beyond me.
07:02:35 <rik> i can't decide on a program layout, which is a good hint that i'm in over my head
07:02:44 <Spark> plenty of plumbing jobs available :)
07:02:51 <tuomov> google for process algebra, csp, cffd
07:03:04 <rik> heh
07:03:17 <Spark> i like my 'google' ion binding :)
07:03:24 <Spark> start+g
07:03:33 <Spark> googles for the clipboard contents
07:03:34 <rik> Spark: my project is "learning haskell by writing an ASN.1 decoder"
07:03:45 <tuomov> (imho verification is quite boring stuff..)
07:03:56 <tuomov> (fighting against win^H^H^Hhalting problem)
07:04:08 <Spark> yeah
07:04:59 <Spark> The Committee For Firesafe Dwellings has established this site to make many of our long-standing valuable services available to you "on line."
07:06:07 <Spark> oh i did hoare's process calculus in my undergraduate degree
07:07:56 <earthy> CSP that is?
07:08:01 <Spark> i think so
07:08:05 <Spark> it looks very similar
07:08:17 <earthy> communicating sequential processes
07:08:20 <Spark> i read about the pi calculus the other day, which is apparently the same but the interactions pass data
07:09:29 * earthy nods
07:09:38 <earthy> something like that
07:10:47 <xerox> rik: what is ANS.1 ?
07:11:58 <rik> ASN.1
07:12:12 <rik> it's way of encoding data to send over a stream
07:12:43 <rik> it's a Tag, Length Value encoding
07:14:57 <earthy> ugh. Abstract Syntax Notation 1
07:15:42 <rik> indeed.
08:39:05 <Ruller> Hello, dear friends!
08:39:57 <Lemmih> Yo
08:40:29 <xerox> Hello
09:47:04 <beschmi> hi
09:53:06 <Heffalump> hi
10:08:53 <ibid> what would you expect to find behind the link "affiliating" (on the sidebar) on http://fenfire.org/?
10:21:02 <Heffalump> I would have thought the more appropriate word would have been "Joining"
10:21:19 <ibid> that's the point of this question ;)
10:21:37 <Heffalump> and you become a member _of_ things, not _in_ things
10:21:57 <ibid> are you sure? :)
10:22:11 <Heffalump> yes.
10:22:18 <ibid> ok
12:06:21 <bourbaki> moin
12:07:23 <Lemmih> Yo
12:26:08 <Darius> Hey boegel, did you ever add refraction to your raytracer?
12:26:26 <bourbaki> boegel: have you seen my latest app shot?:)
12:26:42 <Gahhh> lol
12:43:38 <shapr> jiihaa
12:44:02 <boegel> Darius: I tried it, but I got stuck... why ?
12:44:06 <boegel> bourbaki: no, show me !
12:44:33 <Darius> boegel: I was curious if you figured out what the issue was.
12:45:09 * Lemmih heads to bed.
12:45:10 <bourbaki> boegel: http://codemages.sourceforge.net/Unbenannt.JPG
12:48:17 <boegel> Darius: I never did really... but I didn't have time to really check it out... maybe I'll try it again sometime
12:48:29 <boegel> g'night Lemmih !
12:48:40 <boegel> bourbaki: wicked !
12:48:58 <boegel> what are the red things in the shot ?
12:49:04 <bourbaki> boegel: the red dots are linked and they get attracted to the valleys
12:49:12 <bourbaki> small balls
12:49:48 <boegel> bourbaki: they are control points then ?
12:49:50 <shapr> I do not!
12:50:05 <boegel> shapr: ? :)
12:50:13 * shapr snickers
12:50:14 <bourbaki> boegel: they are elements of a small chain
12:50:28 <bourbaki> you can stir one of the little balls with the mouse
12:50:37 <Darius> "What ARE those glowy bits?!"
12:51:16 <boegel> bourbaki: just one ?
12:51:57 <bourbaki> boegel: you can also change them if you want its just not written in the application
12:53:47 <shapr> hiya cm
12:53:49 <shapr> you called me?
12:54:19 <cm> hi shapr
12:54:59 <bourbaki> boegel: that is what i would have liked to use your raytracer for
12:55:06 <cm> i wondered how you representated the Othello board & what your instance Show for it looked like
12:56:14 <shapr> http://www.scannedinavian.org/~shae/Othello.hs
12:57:03 <cm> exactly.. how do I get that instance Show Spot to work :|
12:57:31 <shapr> um...
12:57:48 <shapr> why do you need to?
12:57:56 <shapr> putStr $ showBoard board
12:58:30 <cm> or for that matter, if I have type Board = Array (Integer,Integer) Cell, I'd like to define show for that, without wrapping it into a newtype or data type
12:59:09 <cm> (or using a function name like showBoard)
13:00:19 <Darius> cm: There is already a show instance for it, just not the one you want (presumably).
13:00:46 <boegel> bourbaki: you will be able to in a few months
13:00:48 <Darius> Wrapping it in a newtype is pretty much your only option, but it seems reasonable to give the board it's own type.
13:00:59 <boegel> I should start writing my thesis text in the upcoming weeks
13:01:34 <cm> Darius: yeah, probably. i'm just annoyed about having to type the constructor name all the time, then ;)
13:02:14 <Darius> Implement the primitive operations that you need, and you shouldn't need to worry about it.
13:03:06 <bourbaki> boegel: i just bought a mac so my new stuff is running in lx and such
13:08:11 <shapr> hiya Ruller
13:19:01 <sylvan> Refraction for raytracers: http://www.flipcode.com/articles/reflection_transmission.pdf
13:19:18 <shapr> hiya sebastian
13:19:39 <shapr> How's code in the big city?
13:19:58 <pipe> sylvan: you know this? http://benny.kramekwbe.com/hrayt
13:20:20 <sylvan> nope not really
13:20:35 <pipe> hm.... well now you do =D
13:21:13 <lightstep> what is the layout for multiple modules in one file?
13:21:21 <sylvan> okay, thanks! =)
13:21:37 <pipe> sylvan: oops, dead link... or did you figure out how to fix it?
13:21:40 <cm> =p
13:21:56 <sylvan> yeah I googled
13:22:22 <sylvan> so where's the download?=
13:22:24 <lightstep> http://rafb.net/paste/results/4mK9fV52.html  <--  doesn't work (ghc 6.2.2)
13:22:28 <shapr> lightstep: I don't think you can do that.
13:23:00 <pipe> sylvan: i'm thinking of writing a detailed article about how i wrote the code, aimed for people who don't know haskell, where i compare the code to the equivilent c, c++ and python implementations
13:23:13 <shapr> oooh yeah
13:23:19 <pipe> shapr: ?
13:23:21 <shapr> Submit it to The Monad.Reader!
13:23:28 <pipe> shapr: i was thinking of that :)
13:23:31 <Darius> lightstep: Assuming that's not in one file, what isn't working.  Otherwise each module needs to be in its own file.
13:23:34 <shapr> sylvan: want to write an article for The Monad.Reader?
13:24:09 <sylvan> pipe: that would probably be pretty cool!
13:24:21 <shapr> Though I will say you've already done a lot with the lambda complex.
13:24:35 <cm> the raytracing on GPU stuff is pretty interesting
13:24:42 <sylvan> eh... well that.. yeah... heh.. not very finished is it..
13:24:53 <lightstep> damn it. chapter 5 (Modules) doesn't talk about files at all
13:24:54 <shapr> it's very nice though
13:25:13 <sylvan> I've been meaning to finish it, but time is short...
13:25:34 <shapr> you could put on the wiki and get other people to finish it.
13:25:44 <pipe> there was a really sweet iotd on flipcode a while ago where they did a raytracer that produced an image that looked like it was painted using brush strokes... the raytracer is realtime, demo was awesome
13:25:56 <sylvan> shapr: you're swedish right? did you read the Haskell article in the last issue of DMZ?
13:26:14 <shapr> sylvan: nej, jag var födde i Alabama.
13:26:16 <Darius> lightstep: The Haskell Report doesn't talk about "files" of source code.
13:26:32 <sylvan> ah.. okay
13:26:47 <shapr> Men jag bor i Boden.
13:26:54 <shapr> Vad är DMZ?
13:26:58 <lightstep> Darius, the examples look as if they were taken from one block of code
13:27:05 <sylvan> I wrote an Haskell article in Swedish for that magazine, hoping to attract some more haskellers
13:27:12 <sylvan> www.datormagazin.com
13:27:21 <psi> i read it :)
13:27:31 <sylvan> what did you think? =
13:27:31 <sylvan> )
13:27:33 <psi> i thought it was good
13:27:49 <tuomov> You still have a computer mag with code in it?
13:27:51 <shapr> What picture on the cover of the Haskell issue?
13:27:58 <sylvan> great! They changed some stuff though...
13:28:02 <sylvan> hmm.. let me check
13:28:11 <shapr> Dator also published an interview with Mikael Hallendal from Imendio, I was impressed.
13:28:27 <cm> what do they do?
13:28:52 <sylvan> it's the march one though, the latest I think...
13:29:08 <shapr> Imendio is formerly CodeFactory.se, swedish open source company.
13:29:13 <shapr> sylvan: cool, I'll grab it.
13:29:17 <sylvan> It has a speedometer on the front page
13:29:22 <shapr> Ah, I saw that one.
13:29:40 <shapr> dang, it's midnight... two hours ago I would have hopped on my unicycle and grabbed a copy.
13:29:55 <Darius> Refraction for Raytracers: http://www.science.uva.nl/~leo/clifford/CGA3.pdf
13:31:02 <shapr> sylvan: Are you at chalmers?
13:31:28 <sylvan> yep
13:32:10 <shapr> Spiffy, will you be in Gbg in the summer?
13:32:27 <shapr> I think EuroHaskell will happen again this year.
13:34:11 <sylvan> Hmm.. Maybe.. Not sure yet..
13:34:43 * cm eats a chocolate croissant
13:34:50 * shapr eats his headphones.
13:35:10 <cm> mhmm
13:35:31 <Spark> yum yum
13:35:40 <Spark> i told you i was hardcore
13:37:31 <Gahhh> yumm sennhesier
13:37:37 <Gahhh> omg
13:40:03 <RemiTurk> hi all
13:40:54 <cm> hej
13:41:55 <stepcutHM> I feel like a super-nerd now -- I have my own bugzilla server for 'at home use'
13:42:10 <cm> bugzilla :~|
13:42:13 <Darius> blech.
13:42:17 * Darius dislikes bugzilla.
13:42:24 * stepcutHM dislikes bugzilla also
13:42:26 * cm seconds that
13:42:31 <cm> s/2/3
13:42:47 <stepcutHM> it is just a stop-gap measure until I have a different system I am working on funtioning :)
13:43:06 <RemiTurk> in, 5 years? ;)
13:43:28 <stepcutHM> especially for bugs like, 'Need more cat litter'-- hard to figure out which OS, Platform, and version to file that under...
13:43:35 <cm> i used to use mantis, a PHP-based bug tracker (we didn't need any sophisticated stuff back then)
13:43:45 <cm> hehe
13:43:50 * RemiTurk wonders how many "stop-gap measures" become "official manager blessed solutions"
13:44:29 <Gahhh> 95% ?
13:45:35 <cm> so have you all been looking for easter eggs :o
13:45:46 <stepcutHM> I am working on some haskell-based, project management software, but it has been going slow because I first had to get haskelldb and wash/cgi up-to-snuff ;)
14:00:53 <cm> off to work..
14:01:33 <RemiTurk> have fun
14:01:54 * RemiTurk notices it's rather funny to read "off to work" when his local time is 00:05 :)
14:02:06 <cm> thx. 5 PM here :)
14:02:11 <ibid> 1pm here
14:02:15 <ibid> 1am, rather
14:02:19 <cm> (electronic locks rule)
14:02:36 <cm> anyway bbl
14:04:18 <boegel> @seen Itkovian
14:04:18 <lambdabot> I saw Itkovian leaving #haskell 3 days 7 hours 2 minutes 44 seconds ago
14:04:23 <boegel> @seen samc
14:04:23 <lambdabot> I haven't seen samc
14:04:30 <boegel> okay, I'm off to bed then
14:04:34 <boegel> g'night everyone !
14:04:38 <ibid> @seen ibid
14:04:38 <lambdabot> ibid is in #darcs and #haskell.
14:04:40 <ibid> :)
14:04:47 <ibid> no witty remark?
14:04:52 <ibid> disappointing
14:05:07 <Darius> 'night boegel
14:05:11 <Darius> @seen Darius
14:05:12 <lambdabot> Darius is in #haskell.
14:05:30 * RemiTurk joins the club
14:05:33 <RemiTurk> @seen RemiTurk
14:05:33 <lambdabot> RemiTurk is in #haskell.
14:06:04 * Darius was just wondering if it would make a difference if you were in only one (lambdabot-watched) channel.
14:16:52 <shapr> stepcutHM: tell me more about your haskell project managing software...
14:17:19 <shapr> @seen Memento
14:17:20 <lambdabot> I haven't seen Memento
14:17:28 <shapr> It's a nice movie.
14:17:57 <Heffalump> indeed.
14:18:02 * shapr puts it in the DVD drive so lambdabot can watch it.
14:18:03 * Heffalump has the DVD
14:18:53 <stepcutHM> shapr: Well, right now I am developing a frame-work for developing database driven, web applications in haskell
14:19:02 <shapr> Moulin Rouge is my favorite for sing-alongs. I can sing Ewan's parts decently.
14:19:10 <shapr> stepcutHM: oooh, darcs repo?
14:19:36 <shapr> I've been thinking about abstractions...
14:19:39 <ibid> moulin rouge :)
14:19:40 <stepcutHM> shapr: It is built on top of wash-cgi and haskelldb, but provides higher level libraries, such as account management, file upload and access control, forums, etc
14:19:51 * ibid is now considering buying sky captain on dvd
14:20:04 <shapr> I can sing what'shername's parts decently too, but it's not as much fun.
14:20:12 <shapr> stepcutHM: wow, spiffy
14:20:48 <stepcutHM> shapr: so far it has mostly been things, like writing an addon for wash that allows you to use hyperlinks instead of form submision for navigation
14:21:19 <stepcutHM> shapr: or fixing haskelldb to not ne
14:21:26 <shapr> For Zope, ZODB lets your code pretend that zope never exits, FormController abstracts control flow, transactions abstract failure, interfaces/adaptors abstract (some) auto-casting, auth abstracts permissions.
14:21:27 <stepcutHM> need sub-queries
14:21:31 <ibid> shapr: nicole kidman?
14:21:35 <shapr> ibid: yeah, her.
14:21:51 <ibid> i know somebody who used to do the elephant duel with her roommate
14:21:58 <ibid> for fun :)
14:22:12 <RemiTurk> elephant duel?
14:22:26 <ibid> from moulin rouge
14:22:29 <ibid> duet
14:22:31 <shapr> I sing it with a friend of mine. His tenor is equally high so we alternate parts when we sing it.
14:22:49 <RemiTurk> ahh, duet, that makes more sense ;0 *isn't entirely awake anymore*
14:23:13 <shapr> It was an accident the first time, we both had too much alcohol and I started singing Ewan's part, and he jumped and sang Nicole.
14:23:25 <shapr> I tend to sing when inebriated.
14:23:27 <ibid> though my two favourites are the roxanne tango and the show must go on
14:23:54 <shapr> the roxane tango is great! I love doing the accent... roggs-ann
14:23:59 <ibid> (and to a lesser extent, spectacular spectacular)
14:24:23 <shapr> Sadly, I can't tap dance very well.
14:24:38 <shapr> I am getting better at playing drums though.
14:24:46 * ibid used to do a lot of music but has no audience to play to
14:24:58 <shapr> I am my own audience.
14:25:01 <ibid> and is too lazy to start going to choruses or start a band
14:25:53 <ibid> the hills(?) are incarnate with symphonic melodies
14:25:57 <shapr> haha
14:26:17 <shapr> That Ewan part is the best, I love that tremolo at the end...
14:26:36 <ibid> tremolo? where?
14:27:01 <shapr> At the end of the hills are alive bit.
14:27:15 <ibid> there's a tremolo at the end of it?
14:27:24 <shapr> Yes, there is.
14:27:53 <shapr> too bad it's not on the soundtrack :-(
14:27:57 <ibid> not a vibrato but a tremolo?
14:28:03 <shapr> er, maybe it's a vibrato, oops.
14:28:32 <ibid> iirc tremolo is something one wouldn't want to do with a human voice
14:28:40 <ibid> though:
14:28:41 <ibid>       2: vocal vibrato especially an excessive or poorly controlled
14:28:41 <ibid>          one
14:28:46 <shapr> yay
14:28:55 <shapr> I was vaguely right =)
14:29:33 * Darius needs to get strings for his classical acoustic.
14:29:45 <shapr> Darius: want to start an internet band?
14:29:49 <shapr> I can do drums.
14:29:59 <shapr> We can do BoIP
14:30:00 <Darius> shapr: How does that work?
14:30:07 <shapr> Band over IP
14:30:26 <shapr> I'll just skip all the out-of-band signaling jokes.
14:30:58 <Darius> I'd need some (decent) way of digitizing the sound.  The acoustic is actually an electric-acoustic but I don't have any jack for the computer.
14:31:13 <Darius> I do have a mike, but it's a rather cheap one and not meant for music.
14:31:30 <shapr> We have a seriously badass mic. It's a Shure 55SH II.
14:32:15 <shapr> this one - http://www.shure.com/microphones/models/55sh.asp
14:32:50 <ibid> shapr: do you remember the finnish singer jari sillanpää?
14:32:52 <shapr> I'm a decent singer, but my woman is impressive. She can lift the roof with no need for amplification.
14:33:03 <shapr> hm, no?
14:33:17 <ibid> anyway, ewan mcgregor in moulin rouge reminds me of him ;)
14:34:41 <shapr> Community radio is just starting up here in Boden, it's only a few hours a day. Since it's pretty much public access, we were thinking of doing an NPR parody in English, "All Thing Inconsiderate".
14:36:16 <shapr> I was thinking of doing part of it on legal free 'net music.
14:37:11 <shapr> Darius: do you have any of your music digitized?
14:38:30 <shapr> salut kuribas
14:38:40 <kuribas> shapr: hi
14:38:50 <kuribas> can I ask questions here about Curry too?
14:39:04 <shapr> sure, but I can't answer them.
14:39:06 <tuomov> are there any cooks?-)
14:39:14 <Darius> Don't have too much music.  At least full things.  None of it is digitized, though I was mildly thinking about it due to Pugs actaully.  Still I'd need a serious mike or a jack (if I didn't care about vocals) to be even remotely serious about it.
14:39:41 <shapr> Why due to Pugs?
14:40:11 <shapr> Man, I should get a game of conversational ping-pong started around here one of these days.
14:43:42 <Darius> shapr: Parts of it have parts of the Song of Earendil in it (which I quite like) and I have a simple melody for it (actually more a basis for a harmony).
14:44:11 <shapr> I can write passable lyrics pretty much non-stop, but I don't know enough musical notation to write music.
14:44:13 * ibid should start composing again
14:44:26 * Darius should start composing.
14:44:39 * shapr should start finishing stuff.
14:44:53 <Darius> shapr: You don't -really- need to know music notation but even given it, it's quite easy.
14:45:02 <shapr> How?
14:45:06 <Darius> It's harder when you need to be able to pretty much just read it.
14:45:20 <shapr> reading music isn't so hard, but taking the music out of my head and writing it down is hard.
14:45:39 <Philippa> yeah, but that shouldn't be about notation (go use a tracker if the ordinary notation really bugs you though)
14:45:48 <Darius> shapr: Besides your voice and drums, do you know another instrumentL
14:45:58 <Philippa> I can't read "proper" notation, but I used to be a mean sequencer
14:46:05 <shapr> nope, I'd like to learn harmonica though.
14:46:49 <shapr> I wonder if I could hack lilypond output into Haskore.
14:47:10 <shapr> Or maybe basti already did that.
14:47:14 * RemiTurk goes snoring
14:47:20 <shapr> g'night RemiTurk
14:47:21 <RemiTurk> goodnight
14:47:24 <shapr> rik: code?
14:47:39 <shapr> Darius: what about you? guitar? voice?
14:47:43 <tuomov> I once borrowed an electric guitar and tried to learn to play it but got bored mostly thanks to a crappy amp...
14:48:09 <tuomov> would need too much expensive extra gear for a nice metal sound..
14:48:41 <Darius> shapr: I typically play guitar.  I'm not a horrible singer, but I'm not that great either.  However, I often find it easier to develop music with my voice and find out the notes to match it.
14:48:48 <shapr> I tried to learn guitar, but it felt too stilted for some reason. I taught myself to play some songs on a piano when I was ten, but the school piano broke and I never picked it up again.
14:49:04 <Darius> Though to just throw out some musical sound, I can mildly improv on the guitar.
14:49:14 <Philippa> yeah, I can mildly improv on most synths
14:49:22 <shapr> improv is my life!
14:49:27 <Philippa> :-)
14:49:32 * Darius really would like to have a piano.
14:49:57 * Darius would settle for a keyboard though for composing purposes.
14:50:03 * Philippa wants this rackmount 2ms latency VSTi-player thingy and a good keyboard...
14:50:22 <shapr> I'd like a titanium harmonica that I could carry around in my back pocket.
14:50:26 <Philippa> for "can comfortably use 2 or more of the controllers simultaneously with the same hand" values of good
14:50:29 <shapr> something unsquishable.
14:50:41 <gzl> i wish i knew how to play a harmonica.
14:50:46 <shapr> Have you tried?
14:50:54 <Darius> gzl: Harmonica's are fairly cheap.  Learn.
14:50:54 <gzl> a long while ago.
14:50:59 <Philippa> something where if I want to play a monophonic or chord-based line with a lot of expression I could do so comfortably
14:51:13 <shapr> It's mostly about controlling which holes are un/covered. It's not so hard, just takes a bit of practice.
14:51:18 <gzl> well, i have one. you can make decent noises, but being able to play recognizable tunes seems harder.
14:51:24 <gzl> rather, is harder
14:51:28 <Darius> gzl: Practice.
14:51:37 <gzl> yeah, yeah, i know
14:51:40 <shapr> gzl: you know you use your tonge to cover up the parts you don't want?
14:51:53 <gzl> no, i haven't tried it in a long time
14:51:57 <gzl> but go on
14:51:58 <shapr> tongue, swedish is confusing me.
14:52:30 <shapr> first google hit for harmonica tutorial - http://www.xs4all.nl/~krooshof/mondharmonica.html :-)
14:53:08 <gzl> ok :)
14:54:17 <shapr> One advantage of a harmonica is that I can play it while unicycling.
14:54:50 <shapr> I have considered learning guitar just so I can be the lead unicyclist/guitarist of a band.
14:55:18 <stepcutHM> shapr: don't play the recorder while unicycling...
14:55:22 <shapr> haha
14:55:44 <shapr> Right, no tympani on the unicycle!
15:01:34 <stepcutHM> so, I having been doing my accounting for 3 hours now, and I have entered a grand total of 1 transactions :-/
15:01:53 <tochiro> what's a unicycle ?
15:03:12 <dons> oh man, ozone's mac is fun: VM: 8.74G
15:03:14 <xerox> tochiro: It's like a bicycle, but with only one wheel :)
15:03:57 <stepcutHM> dons: heh, I hope that is not how much is in use by yi ...
15:04:14 <xerox> tochiro: http://home.pipeline.com/~hbaker1/unicycle.gif
15:04:44 <dons> :P speaking of which... stepcut, I'd like to release 0.1.0 today, so if you want to test it (or at least check it builds..) that'd be cool :)
15:05:19 * dons wonders whether yi could use 8G
15:05:30 <shapr> 8G?
15:05:38 <dons> 8G.
15:05:54 <shapr> tochiro: This is me on a unicycle - http://www.scannedinavian.com/images/uni-hop.jpg
15:06:12 <tochiro> ah. reminds me of a C64 game I used to play :)
15:06:19 <shapr> je ne comprends pas.
15:06:32 <shapr> dons: what's 8G?
15:06:44 <tochiro> http://www.c64.com/detail.php?gameid=635
15:06:58 <shapr> wow, nifty
15:07:02 <xerox> Ahah!
15:07:05 <stepcutHM> dons: maybe if you did, yi /dev/kcore ;)
15:07:10 <dons> shapr, sorry, ozone's mac has 8.74 gig of ram
15:07:18 <dons> hehehe
15:07:25 <shapr> eight gigabytes of ram??
15:07:32 <shapr> Is this something he bought for himself?
15:07:46 <dons> he might have done a "work aquisition"
15:07:53 <shapr> ah, I see.
15:08:25 <shapr> tochiro: It's more fun to ride the real thing. And I lost 14 kilos.
15:10:50 <tochiro> I'd guess so :)
15:12:41 <kuribas> Is it possible to create a multidimensional array in Curry?
15:12:49 <tochiro> though I can't really imagine how it is to ride one without 2 wheels :)
15:13:16 <Darius> shapr: How much does a unicycle go for (in USD preferably ;)
15:13:39 <Darius> kuribas: If it has an array library then the answer is almost certainly yes.
15:13:55 <kuribas> Darius: it has
15:14:12 <Darius> tochiro: Some people likely think the same thing about bicycles (only with 3 or 4 instead of 2).
15:14:36 <TheHunter> But: data Array a = Array (Int,Int) (IOVector a)
15:14:38 <Darius> kuribas: Then in the worst case scenario, you should be able to represent a multi-dimensional array as an array of arrays.
15:15:05 <kuribas> Darius: or perhaps more efficient to multiply the indices?
15:15:32 <Darius> Yeah, there's always that.  You could make your own Array type over the built in one.
15:16:17 <shapr> Darius: About $120 USD - http://www.unicycle.com/shopping/shopdisplaysubcat.asp?id=1&cat=Unicycles
15:16:28 <stepcutHM> I wonder if there is a way to get paypal transaction history that is over a year old
15:16:53 <Darius> It doesn't keep the entire history?
15:17:29 <stepcutHM> it looks to only keep a year :-/
15:17:55 <shapr> tochiro: Bicycles go faster, but you can carry unicycles onto the bus. Unicycles are significantly more agile than bicycles, once you can ride them.
15:18:36 <Darius> shapr: What's a reasonable speed one can expect from a unicycle?
15:18:45 <shapr> Bicycles can carry cargo, with a unicycle you're mostly limited to a backpack. I have seen seatpost-mounted luggage racks for a unicycle, but I haven't tried that myself.
15:19:10 <shapr> Darius: slighly faster than a jog.
15:19:18 <kuribas> If I assign a local variable (inside a where statement) to a constant value, will that value be calculated only once?
15:19:21 <stepcutHM> ah, I download my history as a csv file and I got the whole thing
15:19:40 <Darius> kuribas: Within the scope, yes.
15:19:47 <shapr> Darius: Though if you get a less portable 36 inch wheel, you can go faster than a bike.
15:20:14 <Darius> kuribas: You can (sometimes) move things to outer scopes (effectively doing a loop invariant hoisting.
15:20:34 <kuribas> Darius: yes, the implementation will not do that for me?
15:20:48 <stepcutHM> oh, I just didn't hit the 'next' button :)
15:21:00 <Darius> kuribas: It may or may not (just as any optimization).  There are reasons you might not want it done.
15:21:50 <kuribas> Darius: well, it's an Array created by a constant list.  I'd want it done :)
15:22:11 <shapr> Standard unicycle sizes are 20 inches for learning or trials (== skateboard-style tricks on concrete), 24 inches for mountain unicycling, 700c (vaguely 26") to get access to the wide world of mountain bicycle equipment, and 36 inches for speed/distance.
15:23:42 <kuribas> Darius: or done only once at least.
15:23:44 * xerox does skateboard!
15:24:15 <shapr> xerox: can you do grinds on rails? or jump off stairs?
15:24:22 <TheHunter> kuribas, why not just lift it to the top level?
15:24:24 <xerox> shapr: yep ^_^
15:24:41 <shapr> xerox: nice, want to try that on a unicycle? ;-)
15:24:43 <xerox> shapr: not too high stairs btw, never tried >5
15:24:47 <kuribas> TheHunter: not to polute the namespace
15:25:20 <xerox> shapr: it seems interesting, you people all unicyclin' make me want to try :)
15:25:31 <TheHunter> kuribas, you can just not export it from the module.
15:25:42 <shapr> It's much fun. And then I get to add you to my list of unicycling programmers :-)
15:26:06 <xerox> I have to check where I can get one here in Italy.
15:26:14 <kuribas> TheHunter: Ok, I'll do it on toplevel then.  Thanks.
15:26:36 <dons> any mac guru knows why I'm getting: ranlib: file: libHSyi.a(CWString_hsc.o) has no symbols
15:27:00 <dons> and then: ld: /Users/dons/yi-0.1/libHSyi.a(Core.o) has external relocation entries in non-writable section
15:27:03 <shapr> already checked the recent ranlib on MOX thread for clues?
15:27:04 * Darius doesn't unicycle, but is willing to give it a go when I have the opportunity.
15:27:24 <dons> I saw something, I keep looking.
15:30:15 <shapr> musasabi: ayh?
15:30:24 <shapr> oh, I bet musasabi is asleep.
15:30:28 <shapr> I'll ask him tomorrow.
15:32:53 <rik> shapr: not a lot of code :(
15:34:00 <rik> in fact, i was wondering about how to go about writing it.
15:34:04 <rik> and advice is appreciated
15:40:40 <xerox> 'night folks
15:42:45 <Oeje1> Good evening.  Why isn't glibc compile in the generic static GHC program for Linux?
15:43:26 <Gahhh> ?
15:44:05 <Oeje1> ?
15:44:58 <Oeje1> *compiled
15:46:05 <shapr> rik: do it all explicitly at first, then come back and refactor.
15:47:20 <Oeje1> It depend on a certain version "Generic Linux with glibc 2.3".  Why not statically compile glibc into the GHC binary?  The dynamic glibc fits in 5MB.
15:48:21 <dons> wasn't there a msg posted to glasgow-haskell-users@ yesterday about this?
15:48:49 <Oeje1> dons: Yep, just read it.
15:49:32 <Igloo> That should rarely be needed
15:49:50 <dons> boy do I dislike #pragma GCC
15:50:34 <dons> is that sed I here?
15:50:41 <dons> hear. hmm. need coffee
15:50:44 * shapr grins
15:50:53 <shapr> another dons point for dons!
15:51:04 <shapr> Of course, since he is the source of all dons points, that's not surprising.
15:51:20 <dons> :)
15:51:24 <Igloo> dons point?
15:51:32 <xerox> I got one I think
15:51:47 <shapr> Igloo: you get a dons point if the first solution you think of for a task is sed.
15:52:05 <shapr> At least, that's one condition I've heard of for a dons point. I'm sure dons can tell you about others.
15:52:14 <xerox> Ok, back to sleep :)
15:52:18 <dons> I know, I can use sed '/#pragma/d' as my ghc preprocessor
15:52:20 <shapr> g'night xerox
15:52:50 <dons> yes, I believe shapr has specified the criteria correctly
15:53:12 <rik> shapr: having trouble worjking out how to do that too
15:53:49 <Igloo> Ah, so can I blame dons for my nhc and ghc woes, then?
15:53:53 <shapr> rik: for those very first steps...  write code that you think should work, when it doesn't work, show it to me. (or someone else here)
15:54:06 <shapr> rik: then I can suggest ways that it might work.
15:54:19 <shapr> hoi Jan_w, ltns
15:54:49 <dons> Igloo: no, I don't think so ;)
15:54:59 <Jan_w> hi shapr, indeed
15:55:22 <Jan_w> my final half year..finishing my information technology studie
15:55:28 <Jan_w> been busy :)
15:55:59 <shapr> Cool, what will you do next? more education? enter the workplace?
15:56:19 <shapr> Become a crabby hermit on a desert island?
15:56:25 <Darius> international unicycling tour?
15:56:35 <shapr> ohhh yeah!
15:56:40 <Jan_w> I think find a descent job.. I have my own company now, but it's not going well enough :)
15:57:10 <Jan_w> but first things first, read write my thesis
15:57:33 <shapr> What's your thesis about?
15:57:45 <shapr> Do you need Haskell programmers at your company? =)
15:58:26 <Jan_w> shapr: unfortunately no :)
15:58:49 <Jan_w> I have to learn more gui-based haskell myself
15:58:54 <Darius> maybe if I just feed this to  GHC it will work...
15:59:14 <Jan_w> I've never created an actuall full application in haskell
15:59:16 <Darius> Jan_w: Not if you hire someone else to do it for you.
15:59:22 <shapr> boegel wrote a nice gtk2hs tutorial in first issue of The Monad.Reader
15:59:23 <dons> adding arbitrary sed postprocessing to ghc phases is more difficult than I thought.
15:59:41 <Jan_w> Darius: true
16:01:16 <shapr> dons: you need ... LAMBDA SED!
16:01:21 <Jan_w> I've been brushing up my python recently, man list comprehention sux compared to haskell
16:01:48 <shapr> list comps came from Haskell, but they're just one small tool in the toolbox here.
16:02:20 <Jan_w> well, i very usefull tool :)
16:02:45 <Jan_w> i=a
16:02:47 <shapr> And yes, I agree. (portal.portal_languages.getLanguageCookie() or ([[l for l in portal.portal_languages.getRequestLanguages() if l in portal.portal_languages.getSupportedLanguages()]] or [['en']])[[0]]) could be so much nicer in Haskell.
16:02:48 <dons> @sed-points+ shapr
16:02:49 <lambdabot> Sorry, I don't know the command "sed-points+", try "lambdabot: @listcommands
16:03:12 <shapr> First of all because I wouldn't have to do that sort of suffocating gerbil crap in Haskell.
16:03:52 <shapr> whoops, that includes PLog [ ] escaping
16:03:56 * Darius really is thinking about making lambdabot more programmable along the ideas of what he allegedly said.
16:04:04 <shapr> Darius: didn't you say that?
16:04:14 <shapr> Was it someone else who said that?
16:04:25 <Darius> I don't remember one way or another.
16:04:58 <Darius> I remember it being said, and it's possible that I said it, or that you said it, or someone else.
16:05:32 <shapr> That matches with my memory. Somebody mentioned a cool idea. I remembered the idea.
16:07:22 <Darius> We could have collaborative IRC lambdabot hacking.
16:07:28 <shapr> that would *rock*
16:07:43 <metaperl> Darius, do you get primvate messages?
16:08:01 <shapr> At this moment I'm tempted to rip out all the dynloading stuff and tape lambdabot together again.
16:08:24 <shapr> collabedit would be a nice feature to add to Yi
16:17:06 <Darius> shapr: Just wondering, but if I did a 'darcs push/send' on a lambdabot repo, what would happen to it?
16:18:38 <shapr> at the moment, it would complain that your patch wasn't signed by one of the keys on the keyring
16:19:37 <shapr> But, I could easily hack it to rebuild and restart lambdabot upon receipt of a signed patch
16:20:09 <dons> hmm. lambdabot could even do this itself...
16:20:13 <dons> wouldn't that be fun :)
16:20:31 <Darius> It should be able to rebuild then dynamically load modules.
16:20:43 <shapr> Of course, that would require hs-plugins support.
16:20:47 <dons> patch module: receive patch, patch(), make(), load()
16:22:30 * Darius looks at the code and notices that we are using a mildly Olegesque approach to modules.
16:24:53 <dons> oh yeah: internal error: checkProddableBlock: invalid fixup in runtime linker
16:25:46 <dons> ghc error of the day
16:25:56 <shapr> Proddable Block? wow
16:29:46 <shapr> g'day blackdog
16:32:17 <Philippa> Darius: I'm certainly considering one - I've been talking to shapr about a possible zope-like in haskell using hs-plugins (and possibly copious amounts of template haskell)
16:33:26 <dons> moin blackdog
16:33:41 * Darius isn't certain what "one" is referring to.
16:34:02 <Philippa> an Olegesque approach to modules
16:34:07 <dons> :}
16:34:36 <Philippa> dons: you're starting to see quite how sick-minded my plan is? :-)
16:35:01 <dons> oh yeah. having delirious fevers
16:35:11 <dons> it's a very evil plan.
16:35:14 <blackdog> good morning, all..
16:36:00 <Philippa> dons: am thinking of compiled-in security. If it does something it's not got permissions for, it doesn't compile... (obviously the auth modules kinda have to be trusted)
16:37:39 <dons> a combination of module system control and typing would probably work there.
16:37:45 <Philippa> right
16:37:51 <dons> similar to how my @plugs module can't use IO
16:38:54 <Philippa> the hard bit is I'm going to need persistable dyntyped values - if I can crack that, it gets really damn scary (if not, the DB kinda dies when the DB server does)
16:39:10 <dons> SerTH!
16:39:14 <shapr> w00
16:39:41 <dons> or just the Binary class. There some papers on dyn typing and persistence in Clean
16:39:46 <dons> let me find the refs..
16:39:50 <shapr> aha
16:39:57 <shapr> dons: purposeful pun?
16:40:10 <Philippa> dons: cool, cheers
16:40:30 <dons> shapr: no, but I'll take it.
16:40:30 <Philippa> (I had a suspicion that in practice this is more 'cool student hack' than actual research, though you could probably do good research on it)
16:42:13 * Philippa suspects there're interesting things to say about reflection etc here
16:42:27 <dons> http://www.cse.unsw.edu.au/~dons/safe.html, "7. First Class File I/O."
16:42:31 <dons> I think that's the paper
16:43:07 <Philippa> wants use/pass
16:43:24 <Philippa> (that's not a request for yours!)
16:43:38 <Darius> Just cancelling them seems to work.
16:43:47 * shapr cancels himself.
16:43:50 * Darius isn't sure what they are supposed to be guarding.
16:43:52 <dons> hmm. though I'd fiixed that.
16:44:00 <dons> I ripped it off an internal wiki
16:44:22 <dons> (I wrote the content, though)
16:45:48 <Philippa> dons: if you're researching ahead the 'underlying notions' in all the stuff I think up, I think you've got a career made :-)
16:46:11 <dons> :)
16:46:41 <dons> I've been thinking about persistence a bit re. hs-plugins
16:46:47 <Philippa> really, I have a hunch we're starting to crack something really stupefyingly big here... sod's law says we'll all be retirement age before industry figures out it's all worth using though
16:46:53 <dons> so cancelling the passwd gives you access?
16:47:04 <shapr> sod's law == murphy's law?
16:47:22 <Philippa> nearly
16:47:44 <Philippa> sod's, IIRC, was the one about the buttered toast
16:47:56 <shapr> oh right
16:47:57 <Philippa> and is half of a theoretical perpetual motion machine
16:48:01 <shapr> haha
16:48:04 <shapr> I remember
16:48:12 <Philippa> Cat. Toast. Spin :-)
16:55:20 <dons> does it now ask for user/pass?
16:55:37 <Philippa> yes
16:55:42 <shapr> yes
16:56:17 <blackdog> ok, i want to know why everyone isn't using this for online slides...
16:56:22 <blackdog> http://labs.google.com/papers/mapreduce-osdi04-slides/index-auto-0003.html
16:56:41 <blackdog> the paper's cool as well, but being able to browse through html slides with the spacebar? Just magic.
16:56:51 * Darius is eating.
16:57:17 <blackdog> (which reminds me, has anyone seen rob pike's latest talk on this stuff? seriously language based, and pretty bloody cool.)
16:59:48 <dons> blackdog: you seen this: libHSyi.a(Core.o) has external relocation entries in non-writable section
16:59:59 <blackdog> no, that's a new one
17:00:03 <dons> I'm getting it on ozone's g5 with 6.3
17:00:09 <dons> maybe it's just a 6.3/-fasm issue
17:00:43 <blackdog> why are you testing 6.3?
17:00:45 <Igloo> I vaguely remember seeing a commit to fix that recently
17:00:57 <Igloo> From wolfgang, I think
17:01:05 <dons> ah, ok. i'll investigate
17:10:27 <dons> Igloo++ "Don't allow Apple's linker to do any dead-stripping of symbols"
17:10:49 <dons> @karma+ Igloo
17:10:49 <lambdabot> Igloo's karma has been incremented.
17:10:50 <dons> I mean.
17:17:36 <dons> blackdog: could you give the latest yi patches a whirl on your mac?
17:18:15 <dons> and make sure there's nothing in ~/.yi/ for now
17:18:45 <dons> (also you can try building -j3 if you want)
17:27:51 <metaperl> fedora core 2 doesnt have haskell (ghc) ... any suggestions for getting and installing it?
17:28:01 <Darius> blackdog: Have you seen S5?
17:28:12 <shapr> metaperl: fc2 repo is on haskell.org
17:28:22 <blackdog> Darius: S5?
17:28:30 <blackdog> dons: ok, give us a mo
17:28:31 <metaperl> shapr, I am a fedora newbie...
17:28:45 <shapr> me too
17:28:49 <metaperl> is there a doc somewhere?
17:28:53 * metaperl heads to hawiki
17:30:38 <Darius> blackdog: It's a Standard's based Slide show thingy, should be at complexspiral.com
17:30:57 * Darius has no bandwidth right now so it's a bit cumbersome to give a more precise link.
17:31:57 <blackdog> am checking. thanks
17:34:45 <blackdog> dons: no, still the same error
17:35:08 <dons> the stg_ sym?
17:35:53 <blackdog> yep
17:36:03 <blackdog> i didn't make distclean - trying that now.
17:36:23 <Darius> http://meyerweb.com/eric/tools/s5/
17:36:46 <blackdog> thanks
17:38:23 <blackdog> dons: yeah, still stg_ sym.
17:38:47 <dons> ok. have  to think about it then.
17:41:00 <metaperl> shapr thanks I got ghc installed now
17:41:11 <shapr> yay
17:41:12 <metaperl> tempted by darcs, but think I better stay with the svn crowd :)
17:41:26 <metaperl> Perlers tend to know svn
17:41:45 <Darius> darcs is pretty easy to use.
17:57:07 <Darius> Also it appears that there's a program for two-way syncing between SVN and darcs.
18:24:42 <dons> blackdog: seen this: ranlib: file: libHSyi.a(CWString_hsc.o) has no symbols ?
18:25:00 <blackdog>  dons: Yep, and a whole lot of similar ones.
18:25:15 <blackdog> IConv_hsc, Locale_hsc, MkTemp_hsc etc...
18:26:34 <dons> yeah. do they cause any trouble?
18:26:57 <blackdog> not as far as i can tell - they don't stop yi-static working. I haven't seen yi-inplace or yi work yet
18:33:03 <dons> i'm still stuck on the mac with " external relocation entries in non-writable section"
18:33:10 <dons> but I haven't got access to ghc-6.4
18:35:08 <cm> re
18:45:28 <blackdog> dons: is that the same with yi-static? Ask me if you want me to try anything on 6.4...
18:45:56 <dons> yeah. i'm playing around on ozone's g5 atm
18:50:29 <dons> with 6.2.2, 6.3 I get "libHSyi.a(Core.o) has external relocation entries in non-writable section" when doing 'make way=static'
18:51:00 <dons> and ld then exits, preventing any linking
18:51:29 <dons> the erroneous symbols are from ncurses: _COLS, _LINES
18:52:03 <blackdog> voodoo programming again - have you ranlib'ed everything it wants to link to?
18:52:23 <blackdog> for some reason that's needed sometimes on the mac - sean had a note about it on his site
18:53:46 <dons> yeah. saw that. ranlib doesn't help
19:00:57 <dons> blackdog: so yi-static works for you?
19:02:41 <blackdog> compiled with 6.4, yes
19:03:04 <dons> ok. and I've got both ways working on linux,freebsd and openbsd
19:03:11 <dons> I think I'll release as is
19:03:38 <blackdog> ... hey, why doesn't 'w blah.txt' work in command mode?
19:04:00 <dons> as in, write to a file?
19:04:04 <blackdog> yeah
19:04:05 <dons> in vi{m} mode?
19:04:16 <blackdog> in whatever the default mode is...
19:04:41 <dons> vim, I think
19:04:51 <dons> hmm let me see.
19:05:56 <dons> looks like adding a file name arg isn't supported :)
19:06:15 <blackdog> outrageous. :) You don't use that often, then?
19:06:28 <dons> nah, I do in vim.
19:06:32 <dons> should implement it.
19:07:13 <dons> hmm. even got an fwriteToE :: String -> Action funciton in the core.
19:07:24 <dons> ok, I'll add it now.
19:08:13 <blackdog> might be a nice idea for a testing harness - given that it should be compatible with vim, you could just feed random sequences in and see if it did the same thing.
19:08:29 <blackdog> could you do that with QC?
19:08:46 <dons> don't know
19:09:02 * stepcut imagines feeding random sequences to vim might not be a good idea ...
19:09:11 <cm> :)
19:09:20 <stepcut> whoops! there goes /etc/passwd
19:09:22 <blackdog> ... yeah, good point. might have to sandbox it. :)
19:09:42 <blackdog> c'mon, you're not gonna run test suites as root.
19:10:01 <stepcut> blackdog: speak for yourself! :p
19:10:14 <dons> blackdog: try that patch
19:10:48 <blackdog> stepcut: you're braver than i.
19:10:52 <blackdog> dons: cheers
19:11:09 <stepcut> blackdog: or I have better backups ...
19:11:25 <blackdog> backups? What are backups?
19:11:28 <cm> running tests as root is part of stepcut's quickcheck-for-his-system :o)
19:12:33 <cm> sry for those spontaneous newbie questions, I followed Haskell's path and ended at Perl 6 :o)
19:13:25 <blackdog> dons: 'w  blah.txt' creates a file ' blah.txt', which is not what vim does
19:13:38 <dons> bah :P
19:13:45 <dons> I'll clean your strings!
19:14:01 <blackdog> that's the most intimidating thing i've heard all day.
19:17:05 <dons> try that
19:17:30 <dons> btw, -jN works nicely :)
19:17:48 <blackdog> Only when you have multiple processors, i imagine
19:18:03 <dons> nah, there's still a lot of IO sucking in .hi files
19:18:16 <dons> and a few little C files that can slip in the pauses
19:18:17 <blackdog> nice.
19:19:31 <cm> (..that so ended up in the wrong window)
19:20:52 <dons> Copying patch 300 of 300... done!
19:20:59 <dons> looks like a good spot to tag!
19:21:50 <blackdog> cool. (Hey, do you reckon -j2 is likely to be best? I'm trying 3, and i think i might be overloading the poor bastard)
19:22:29 <dons> don't know. i know wagner handles -j8 pretty well
19:25:46 <blackdog> oh, also, make clean still wants to build hsc stuff
19:25:59 <dons> yeah, I know. couldn't spot why.
19:26:03 <dons> some magic in the gmake
19:39:33 <blackdog> dons: 3 < 8 < 2 < 1
19:39:46 <blackdog> so i'm not as grunty as wagner
19:40:02 <dons> so -j1 is fastest?
19:40:11 <blackdog> no, 3 is fastest
19:40:19 <dons> oh, sorry, yeah :}
19:40:52 <blackdog> so far, anyway. highly unscientific - iTunes, mySql, and a few ruby incarnations were running at the same time. :)
19:41:01 <dons> he
20:36:39 <SyntaxNinja> w00t
20:37:04 <cm> hi SyntaxNinja
20:37:48 <SyntaxNinja> hiya cm
20:38:15 <SyntaxNinja> Lemmih: alive?
21:23:03 <shaleh> so, who has worked on Yi?
21:23:26 <blackdog> dons, shapr, me (tiny little bit :)
21:23:57 <shaleh> so, how far along is an emacs flavor?
21:24:08 <blackdog> and he pinched stuff from tuomov
21:24:31 <blackdog> shapr's writing a tutorial on keybindings. Once he's written it, he'll read it and then he'll know how to do it.:)
21:24:49 <shaleh> sounds like shapr
21:24:53 <blackdog> there was a working emacs flavour, but don changed everything and it doesn't work any more
21:25:10 <blackdog> yeah, doesn't it just?
21:25:59 <shaleh> do you know why it needs ghci?
21:26:53 <dons> It doesn't actually need ghci. Dynamic configuration requires hs-plugins, which works on those platforms that have ghci. So ghci is a good indicator
21:27:10 <shaleh> ah, the README says it requires a working ghci to build
21:27:14 <dons> Though it can be built 'make way=static', disabling runtime configuration
21:27:36 <dons> Yeah, ghci ~> hs-plugins ~> can build
21:27:57 <dons> way=static should make it usable on any platform with ghc
21:28:13 <dons> i've partially ported it to nhc too, but there's still some way to go
21:32:37 <shaleh> hmm, Emacs.hs in the darcs reop
21:32:54 <blackdog> Yeah. Borked.
21:33:00 <shaleh> ah
21:33:19 <shaleh> yeah, I see that
21:33:28 <blackdog> it was pretty nasty, anyway... iorefs all over the place
21:33:45 <blackdog> don's got a new undo/redo architecture now, i think, so they're not really necessary any more
21:34:32 <shaleh> hmm, even with Emacs style bindings, we would still need to emulate the known common functions too
21:35:04 <mflux> wouldn't it just be easier to implement elisp+emacs environment, and then bring all the rest of the code from emacs ;)
21:35:37 <shaleh> mflux: yes, I think it would
21:35:50 <blackdog> i think the idea is not to be an emacs clone as such. really, if you just wanted to be able to run haskell in emacs, the sane way would be to find a way to hook ghci into emacs...
21:35:55 <shaleh> elisp functions -> Yi functions would need mapping though
21:36:13 <shaleh> blackdog: nah, shapr and I have talked about a rethought emacs
21:36:26 <shaleh> but clearly you want to be able to run existing elisp
21:36:30 <dons> the idea is to develop haskell as a dynamic extension language
21:37:14 <shaleh> dons: I love the idea of dumping lisp (-:
21:37:31 <dons> :)
21:38:00 <shaleh> I like the idea of emacs and elisp. The current implementation is getting stagnant.
21:38:21 <shaleh> how well is Haskell threading working?
21:38:39 <cm> for what i want, pretty well :o)
21:38:50 <dons> Haskell threading is pretty sophisticated, as far as I use it
21:39:04 <shaleh> keen
21:39:06 <beschmi> that and parsec would be the greatest advantages
21:41:39 <shaleh> dons: so, 300 records in, how do you feel about darcs?
21:41:59 <dons> very happy :)
21:42:17 <dons> it's made the project much more flexible
21:42:40 <dons> I can send patches around a number of different machines for testing, which has been useful
21:42:59 <dons> revert, unrecord have been useful
21:43:35 <dons> offline mode has been good
21:44:23 <shaleh> yeah
21:44:28 <shaleh> any complaints?
21:44:59 <dons> I tried to think of some, but it's hard
21:45:23 <dons> when darcs versions where changing a lot there were incompatible repo issues
21:45:35 <cm> it's slower than perforce
21:45:48 <shaleh> cm: yeah, that is well known
21:45:56 <cm> but i don't mind for the project size i'm using it for
21:46:00 <blackdog> used to be slow to import pre-existing directories, i think... is that still the case?
21:46:03 <shaleh> but then, haskell is not exactly winning either. Hell it tends to be slower than Python.
21:46:18 <cm> it does? that would be scary :o)
21:46:30 <beschmi> shaleh: there is plenty of room for improvement in the darcs code
21:46:31 <dons> blackdog: can't they get the linux kernel into darcs these days?
21:46:45 <shaleh> dons: yes, the kernel is used as a test case
21:46:53 <dons> I know it was very difficult to get fptools into darcs on 0.9.11 :}
21:46:55 <beschmi> dons: you need lots of ram
21:47:04 <shaleh> there are still problems with darcs filling memory, grinding for hours, etc.
21:47:38 <dons> I'm surprised that's still the case, esp. since david's getting good at profiling these days
21:47:50 <shaleh> dons: underlying algo
21:47:56 <dons> ok.
21:48:26 <dons> i've been really happy with how fast yi runs
21:48:35 <shaleh> like they teach in school, you can only make a O(n^3) so fast, you need to drop the complexity
21:49:01 <dons> right.
21:49:20 <blackdog> dons: is /usr/share/dict/words still your bitch?
21:49:23 <shaleh> dons: david says he has ideas, but they will take time
21:49:37 <dons> blacdog: nah, yi handles 100M files now
21:49:48 <blackdog> yow
21:49:51 <beschmi> another thing is that some special cases aren't optimised
21:49:54 <dons> starts up much faster than vi, vim, emacs on such files
21:50:17 <dons> above around 100M some threading issues start to appear, that I haven't sorted yet
21:50:34 <dons> but, hey, who edits 100M src files :)
21:51:23 <cm> hmm
21:51:30 <blackdog> hey, if you want Yi to knock Photoshop off its perch, you need to be thinking about these problems.
21:51:42 <dons> large edits on large buffers would probably get nasty performance from undo/redo
21:52:03 <dons> but it's pretty good for 0.1.0 I reckon
21:53:38 <shaleh> dons: no support for :set num?
21:53:51 <dons> nope
21:54:08 <beschmi> eg if you only add a lot of files, darcs spends a lot of time trying to commute the patches to remove unneeded "add a .. remove a" patches
21:54:53 <dons> shaleh: not too hard to add
21:55:17 <dons> there's still plenty of stuff to do in yi. lots of stuff
21:55:40 <shaleh> dons: does the Yi core know what the line the current cursor is on?
21:56:00 <dons> it's cached in the buffer state, iirc
21:56:49 <dons> Yi.Window:Window.lineno
21:57:04 <shaleh> Window -> View?
21:57:09 <dons> yeah
21:57:17 <dons> it's a window onto a buffer
21:57:22 <shaleh> right
21:57:40 * shaleh decides to look at adding unit tests as per the TODO entry
21:57:51 <dons> that would be really cool :)
21:58:39 <shaleh> I haven't  used HUnit yet, so it may take a day or so for the patches to start rolling in
21:59:26 <shaleh> I think I am going to start in the cbits dir though
21:59:59 <dons> why there?
22:00:08 <shaleh> setting up the scaffolds is annoying in C, but once up the flow is decent
22:00:25 <dons> ok
22:00:27 <shaleh> dons: C tends to collect bugs (-:
22:00:51 <dons> yep.
22:00:58 <shaleh> and since all of Yi depends on the cbits, making sure the foundations are clean seems the best way to start
22:01:21 <dons> I'm trying to reduce the C component if possible. It's only 3 functions atm, though.
22:02:11 <shaleh> yeah, well in my experience the C pieces grow on you
22:02:30 <shaleh> it wouldn't surprise me to see some of darcs move into C.
22:02:51 <shaleh> both for making bindings in other languages and speed/efficiency
22:03:26 <dons> That's true, though I do have a fairly strong moral objection to adding C :)
22:03:29 <SamB> I think it would be a good idea to bring darcs to something aproaching readable first...
22:03:32 <dons> So it has to be critical.
22:03:45 <shaleh> SamB: much of darcs is pretty clean
22:03:54 <shaleh> although Slurpy takes some getting used to
22:05:04 <cm> what's "Slurpy"?
22:05:11 <cm> a module in darcs?
22:05:24 <shaleh> cm: yeah. it slurps in files
22:06:07 <SyntaxNinja> slurp
22:06:13 <SyntaxNinja> we need a slurpy module for cabal
22:06:54 * cm looks up 'slurp' in a dictionary
22:07:07 <dons> Re testing, I'd be interested in pinning down semi-formally (quickcheck?) the semantics of the core actions.
22:07:10 <shaleh> cm: to inhale noisily
22:07:22 <cm> ah
22:07:25 <cm> like with soup? :o)
22:07:25 <shaleh> cm: the sounds you make when eating japanese noodles
22:07:35 <shaleh> cm: indeed
22:07:43 <SyntaxNinja> not inhale hopefully
22:07:48 <Gahhh> hmm. not to be confused with "slurpee" ?
22:08:05 <dons> you'd slurp a slurpee, right?
22:08:09 <shaleh> Gahhh: indeed. "slurpee" is a brandname for a mostly frozen beverage
22:08:23 <Gahhh> That's a delicious module imho
22:08:31 <cm> what's "slurping in files", then? sequentially reading files?
22:09:04 <Gahhh> I think it implies efficient throughput
22:09:06 <dons> to read them in, in some quick manner, possibly involving mmap?
22:09:18 <shaleh> dons: why is FastBuffer.raw-hs named that and not FastBuffer.raw.hs?
22:09:32 <dons> raw-hs is raw input for haddock
22:09:39 <dons> there's nothing special about the name, really
22:10:12 <dons> it's adopted from ghc
22:10:22 <shaleh> k
22:10:56 <dons> for day-to-day hacking, you'd probably use the 'make build' target to avoid haddock
22:11:43 <beschmi> cm: it's a lazy structure, reading files when needed (mmap in fastpackedstring). you can also apply patches to a slurpy in memory
22:11:52 <cm> k
22:29:13 <SyntaxNinja> Igloo: alive?
22:30:42 <shaleh> hmmm, HUnit docs are like Sanskrit translated into Greek
22:32:08 <SyntaxNinja> why ~: woudl ~: you ~=? say ~= so?
22:32:13 <Leimy> tried to use cabal on Mac OS X to build the CVS HEAD of HaXml
22:32:17 <Leimy> it didn't go well
22:33:04 <blackdog> shaleh: isn't that sentence meant to finish with "by someone who knew only Spanish"?
22:33:06 <Leimy> Building HaXml-1.12.1...
22:33:07 <Leimy> Setup.hs: internal error: stg_ap_v_ret
22:33:22 <SyntaxNinja> Oo
22:33:24 <blackdog> oh yay. stg errors are such fun
22:33:31 <SyntaxNinja> I blame simon
22:33:39 <dons> stg_ap_v_ret errors are bad
22:33:43 <blackdog> It's all Simon's fault. We'd all be python programmers otherwise.
22:33:57 <dons> Haskell's all a trick
22:34:25 <shaleh> blackdog: I was trying to be polite
22:34:46 <Leimy> Thompson?
22:35:00 <SyntaxNinja> no, he's one simon that we can't blame thi son
22:35:34 <dons> is this happening on an unreg machine or and amd64?
22:36:13 <Leimy> G5 mac os x panther
22:37:17 <shaleh> python's unittest is soooo easy and nice
22:38:15 <SyntaxNinja> HUnit is actually pretty nice
22:38:18 <cm> quickcheck is awesome :)
22:38:19 <SyntaxNinja> I use it all the time
22:38:29 <SyntaxNinja> qc is also cool. I want one that combines them :)
22:38:35 <blackdog> syntaxninja: stockholm syndrome?
22:39:01 <cm> hmm
22:39:08 <shaleh> cm: yeah, I am reading quickcheck's site now
22:39:09 <cm> i want to see the breakpoint releases
22:39:19 <shaleh> SyntaxNinja: can you point me to functioning HUnit tests?
22:39:20 <SyntaxNinja> blackdog: does that comment have something to do w/ icfp '03?
22:39:32 <SyntaxNinja> shaleh: I believe they have an example module on their web site
22:39:41 <blackdog> syntax: nah, just fortuitous.
22:39:59 <SyntaxNinja> You could also look at the test/ModuleTest.hs module in Cabal which uses it a lot; http://www.haskell.org/cabal
22:40:01 <blackdog> i meant the hostage kind. :)
22:40:08 <Leimy> http://www.haskell.org/pipermail/glasgow-haskell-users/2003-September/005671.html
22:40:44 <Leimy> is THAT the simon? :)
22:41:00 <SyntaxNinja> that's the guy
22:41:55 <dons> yeah, we got that bug sorted though. this is some other kind
22:41:56 <SyntaxNinja> blackdog: could be
22:42:23 <Leimy> hmmm does GHC 6.2.2 do Cabal?
22:42:25 <Gahhh> that's helsinki I blieve
22:42:46 <dons> there is an unresolved one with unregisterised ghc on mips64, which could turn up elsewhere I guess
22:42:56 <SyntaxNinja> Leimy: yeah, but you have to get cabal separately.
22:43:03 <Leimy> doh
22:43:07 <SyntaxNinja> it's not hard
22:43:15 <Leimy> I didnt think it was
22:43:28 <Leimy> I guess I could try the GHC darwinport from Gregory Wright
22:43:36 <Leimy> see if it is something he handles in a patch
22:46:10 <Leimy> the only patch I see that he's created is to test for the GMP framework
22:49:14 <Leimy> Ok... trying the darwinport
22:50:49 <Leimy> wbb4!
22:50:50 <Leimy> :)
22:50:54 <wbb4> Leimy!
22:51:39 <wbb4> question, new to haskell, and I have a project with which to learn, but I'm trying to use haskell-xml-rpc.  using the server example (from the webpage and the source), I'm getting an overlapping instance declaration in Network.XmlRpc.Internals.XmlRpcType
22:52:10 <Leimy> long time listener first time caller
22:52:18 <wbb4> this is with the 20040617 tarball on the haskell-xml-rpc website, and ghc 6.2.2 on os x
22:53:29 <Lemmih> wbb4: -fallow-overlapping-instances
22:53:33 <SyntaxNinja> Lemmih: !
22:53:41 <Lemmih> SyntaxNinja: Hey!
22:53:47 * Lemmih just woke up.
22:53:50 <Leimy> Lemmih: go figure
22:53:50 <Leimy> :)
22:54:02 <wbb4> Lemmih, doh, cool, thanks
22:54:28 <Lemmih> wbb4: Or with ghc 6.4: {-# LANGUAGE AllowOverlappingInstances #-}
22:55:01 <Leimy> Lemmih: in a comment!?
22:55:02 <Leimy> that's cool
22:55:20 <SyntaxNinja> or with cabal...
22:55:40 <Lemmih> wbb4: I got a cabalized Haskell-XML-RPC if you're interested.
22:55:53 <SyntaxNinja> Lemmih: hey, so am I right in thinking there's no way to collaborate on hackage ATM?
22:55:56 <SyntaxNinja> until you get sendmail fixed/
22:56:08 <Lemmih> Yep.
22:56:12 <Leimy> hackage?
22:56:37 <Leimy> sounds like when I have a cold :)
22:56:49 <SyntaxNinja> No. it's hack haskell packages!
22:57:02 <SyntaxNinja> it's an injunction
22:57:16 <SyntaxNinja> damn sendmial
22:57:20 <SyntaxNinja> have you tried postfix?
22:57:21 <Lemmih> Leimy: Check out the link at the cabal site.
22:57:31 <Leimy> this -> http://www.haskell.org/libraryInfrastructure/hackage/ ? :)
22:57:32 <wbb4> Lemmih, yes, I would be!
22:58:13 <Lemmih> SyntaxNinja: No.
22:58:25 <SyntaxNinja> Lemmih: might try it, may be eaiser
22:58:27 <SyntaxNinja> idono
22:58:43 <Leimy> that's pretty cool
22:58:59 * Lemmih aptitudes.
22:59:19 <SyntaxNinja> dons: congrats on new yi release :)
22:59:33 <dons> thanks SN :)
22:59:54 <dons> twas about time for a release
23:01:31 <Leimy> release?
23:01:40 <Leimy> where the hell have I been?
23:01:51 <dons> Leimy!
23:01:56 <Leimy> dons!
23:03:02 <dons> Leimy: i cleaned things up a bit, and tagged yi 0.1.0
23:03:09 <Leimy> I see that now
23:09:12 <Lemmih> Done installing postfix.
23:10:36 <Leimy> night!
23:12:53 <SyntaxNinja> c00
23:22:10 * Lemmih googles for a postfix smtp guide.
23:24:50 <Svrog> hi everyone
23:24:59 <Lemmih> Hey Svrog.
23:25:10 <Svrog> hey Lemmih
23:25:16 <Svrog> hows it going?
23:27:36 <Lemmih> Great, configuring postfix right now.
23:28:16 <Svrog> configuring postfix?
23:30:05 <Lemmih> Yep. Gotta send mails so I can update my darcs repos. (:
23:31:59 <Svrog> postfix is a name of a mail client?
23:33:48 <det> of an MTA
23:34:29 <mflux> that sounds like a helpful answer to that exact question..
23:35:58 <Svrog> oh well.. nevermind
