00:02:50 <JohnMeacham> mmm... topology.
00:03:26 <a5> wtf are you doing here john
00:03:36 <a5> you never read my paper
00:04:34 <JohnMeacham> Discussing jhc. I will read your paper later.
00:04:43 <a5> no you won't
00:04:57 <JohnMeacham> if you say so.
00:05:24 <blackdog> rich, creamery topology, packaged in fine heirloom klein bottles... mmmm
00:22:22 <sqrt> ...so simple it's CW complex
00:22:35 <sqrt> what was the name of the channel?
00:25:14 <TFK> Woo! I think the books I ordered came through. Just got a paper thingie from the post office.
00:29:21 <Pseudonym> "What was the name of this channel"... is that a Smullyan book?
00:30:02 <Heffalump> :-)
00:30:53 <sqrt> of the alg top channel...?
00:31:33 <blackdog> anyone got WASH going with ghc-6.4?
00:34:47 <Pseudonym> sqrt: It was a joke.
00:34:56 * sqrt cries...
00:35:04 <Gahhh> ahah
00:35:30 <Gahhh> sqrt: maybe you should start a channel yourself on freenode...
00:35:56 <sqrt> Gahhh: wanna join if I do?
00:36:25 <Gahhh> sqrt: I know nothing about topology. My current maths interest is first order logic.
00:37:39 <sqrt> hanging out in channels you think you know nothing about can be interesting.
00:38:12 <blackdog> yes, but if you and he are the only people there... :)
00:39:00 <Gahhh> There's so much stuff I wanna learn but I have no time :(
00:39:11 <Pseudonym> Hey, we could all start a channel on some topic, and then idle.
00:39:20 <Pseudonym> Or, even better, we could start making stuff up.
00:39:31 <Gahhh> Pseudonym: fake science ?
00:39:40 <Gahhh> like astrology ?
00:39:44 <sqrt> like pop psychology
00:40:08 <Gahhh> a science where Moore's law is really a law ?
00:40:41 <Pseudonym> No, a new kind of science, which will take over, once the scientific establishment has stopped censoring our new ideas!
00:40:53 <Pseudonym> A new paradigm!
00:41:13 <Gahhh> Pseudonym: we could use that MIT random CS paper generator
00:41:34 <TFK> Does Kuhn apply to non-empiricial sciences?
00:41:41 <Pseudonym> We could revolutionise science, if only those stuck-up scientists would listen to us.
00:42:00 <Pseudonym> And then we could build moon-based death rays.  Mock my theories now, fool!
00:42:11 <blackdog> Damn them and their standards of empirical proof!
00:42:17 <Pseudonym> Right on!
00:42:20 <Gahhh> Pseudonym: Could this be turned into a religion as well ? could be profitable...
00:42:27 <Pseudonym> Sure, and a diet.
00:42:33 <TFK> I thought there was no proof, merely refutation? ;-)
00:42:44 <Pseudonym> TFK: Yes, even in maths.
00:43:11 <Gahhh> I refute the set theoretic proof of 1+1=2
00:43:29 <TFK> Not sure if we're joking now or not o_O
00:43:32 <sqrt> Hey, now we know how intuitionistic logic was invented
00:43:58 * TFK will go spoil the fun of someone else now
00:44:01 <Gahhh> fuzzy and preferential, biased logic is the king.
00:44:41 <skew> Hey, I would join an algebraic topology channel
00:45:08 <skew> Some homework proving stuff about vector bundles is next on my to do list
00:45:26 <skew> and chain complexes are fun!
00:45:31 <sqrt> #algtop
00:45:38 <Gahhh> bam !
00:45:51 <TFK> Does that mean #haskell will become empty?
00:46:16 <Gahhh> no, #math will be emptied
00:46:39 <Heffalump> have there been any threats of this ##haskell thing?
00:46:39 <Pseudonym> Anyway, must go.
00:46:43 <Pseudonym> Nytol!
00:47:08 <blackdog> you guys started with the right idea, but you became corrupted by power. down with the bloated hegemony of #algtop!
00:48:10 <sqrt> actually, category theory is in the intersection between semantics and alg. top.
00:48:20 <TFK> "The Rise and Fall of Civilization... now in shortened, 5-minute version!"
00:48:27 <Gahhh> long live ##NumberTheory ?
00:48:54 <skew> are you sure giving him op priveleges is wise? He has questioned our ruthless hegemony!
00:49:07 <skew> oops, power struggles on #algtop :)
00:49:12 <Gahhh> ahah
00:49:54 <blackdog> ah, it's ok. they bought me off with power and privilege.
00:50:21 * blackdog has one slightly dented revolutionary integrity, going cheap.
01:21:15 <nlv11757_> i have a function 'foo :: bla -> Reader bar rino' and it calls itself, BUT i need the 'rino' of that recursive call to itself, not 'Reader bar rino'. Is it safe to then use runReader to get that 'rino' ?
01:22:25 <nlv11757_> or will 'foo = do { ... ; rino <- foo ; ...<<using rino>>; ...}' work as expected
01:24:07 <malcolm> Assuming rino is the type of the value read out, then the latter is better.
01:25:49 <skew> Hi JaffaCake. How is the multithreaded runtime going?
01:26:06 <skew> who said something about ##haskell?
01:26:12 <JaffaCake> coming along...
01:27:09 <nlv11757_> ah now i see the definition of >>= for Monad.Reader again; 'do ...rino <- foo' will work just fine. thanks
01:27:12 <skew> It sounds neat. What are you doing for GC? Do you have any papers?
01:27:33 <malcolm> JaffaCake: Can you explain in a sentence or two what are the key changes needed for an SMP machine?
01:28:02 <JaffaCake> skew: single-threaded GC for now, and we might get a paper ready in time for the Haskel workshop (don't know yet)
01:28:30 <JaffaCake> malcolm: synchronisation for thunk evaluation is the main thing
01:28:39 <skew> So one CPU owns the GC? I would still expect non-trivial locking issues with respect to threads trying to evaluate on other CPUs
01:28:50 <JaffaCake> i.e. make sure somethign reasonable happens when two threads evaluate the same thunk
01:29:10 <skew> I guess that falls under thunk synchronization
01:29:15 <JaffaCake> skew: no, everything stops to do single-threaded GC
01:29:32 <skew> Oh. Good old brute force then.
01:29:37 <JaffaCake> it's not ideal, but multithreaded GC is something to tackle in the future
01:29:52 <malcolm> Don't you have some kind of blocking on blackholes in the ordinary threaded single-CPU case?
01:30:17 <JaffaCake> yes, but it's much easier, you don't have to worry about simultaneous evaluation
01:30:22 <skew> If you've figured out how to do reasonable thunk synchronization that might be enough to let GC run in parallel with everything else
01:30:53 <JaffaCake> skew: I think it's much harder
01:31:31 <skew> what are you doing, using atomic exchange to replace the function pointer in a closure with a function that sleeps the evaluating thread and sticks it on a queue of threads waiting for the result?
01:31:32 <JaffaCake> incremental GC on its own is hard enough
01:32:04 <JaffaCake> well, there's the update to worry about
01:32:16 <JaffaCake> after evaluation, the thunk is updated with a value
01:32:28 <JaffaCake> which overwrites the contents of the thunk, normally
01:32:51 <JaffaCake> so we're putting an extra word in the thunk to prevent the clash
01:33:51 <skew> If we're just talking about my guess about how different threads get along, I think you just need to replace the function pointer last, and save a pointer to old runqueue before you stick the function back, so you can wake everybody waiting for the result
01:34:13 <skew> that is, that's how I guess an extra word might be useful
01:34:51 <JaffaCake> things like "replacing the function pointer last" are tricky to guarantee, because you need a memory barrier
01:35:02 <skew> oh, those
01:35:04 <JaffaCake> and memory barriers are expensive
01:35:11 <JaffaCake> so we don't want 'em
01:35:58 <skew> I thought XCHG was pretty cheap and included one
01:36:41 <JaffaCake> any instruction that includes a memory barrier requires synchronisation with the other processor(s)
01:36:42 <skew> about the current situation, if you use forkOS and make foreign calls, can those foreign calls happen on other CPUs?
01:36:56 <JaffaCake> yes
01:37:15 <skew> okay. Somebody was asking before, but I don't have an SMP box to test with
01:37:30 <skew> They wanted to use Haskell to glue together fast linear algebra stuff in C, I thiink
01:37:48 <JaffaCake> sounds fun
01:38:35 <skew> I hope so. They are doing some kind of heavy work on a cluster, and wanted to write Haskell for it
01:38:54 <skew> I don't even remember who it was. asmodai mayabe?
01:39:27 <skew> are you seeing perfomance benifits from the multithreaded runtime?
01:39:46 <skew> Hmm, does GC stop foreign calls?
01:40:04 <malcolm> Is JohnMeacham around?
01:40:24 <skew> @seen JohnMeacham
01:40:25 <lambdabot> JohnMeacham is in #haskell. Last spoke 1 hour 35 minutes 27 seconds ago.
01:40:57 <lispy> skew: if you communicate with the foreign code using pointers it would have to stop it, right?
01:41:18 <skew> but things get a frozen address when you make a StableName anyway
01:41:26 <skew> and start counting as GC roots
01:41:32 <lispy> ah
01:41:55 * JaffaCake was reading email
01:42:04 <skew> The GC wouldn't know how to update the pointers your C program is keeping anyway
01:42:09 <JaffaCake> skew: GC does not stop foreign calls in progress
01:43:06 <skew> I was thinking the penalty for stopping for GC wouldn't be as bad if your heavy lifting was done in C, but then I realized that that already takes advantage of SMP with just forkOS
01:43:29 <malcolm> JohnMeacham: I just wanted to mention that irrefutable patterns should be easy to implement when you desugar down to core:  f ~(x:xs) = foo  --->  f y = let (x:xs)=y in foo
01:43:30 <skew> I guess I'll have to get SMP for my new computer and play with it.
01:44:17 <skew> Is there any better place to get info than bugging you in #haskell?
01:44:33 * boegel boings
01:44:57 <skew> bouncy boegel
01:46:43 <lispy> was the first version of ghc written in haskell or did they have to write in using something else?
01:47:13 <skew> lispy: I think ghc wasn't the first Haskell compiler
01:47:21 <skew> I remember something about lml being involved
01:47:34 <lispy> ah
01:47:37 <ibid>  i wasn't around then, but my impression is that it was written mostly in haskell, with some c and some perl(?)
01:47:44 <ibid> hbc predates ghc, right?
01:48:03 <boegel> I have made another rather nice render with my raytracer last night, check http://studwww.ugent.be/~kehoste/thesisPublic/website
01:48:24 <ibid> i found it a little amusing to read that the first parser was written in standard c-generating yacc
01:49:06 <ibid> the parser was afaiu a separate pass that wrote a read-ish ast representation of the program to a temp file
01:49:16 <lispy> boegel: very nice, i helped write a raytracer once, fun stuff
01:49:30 <ibid> there's a paper from way back then on the ghc site
01:49:48 <lispy> heh see those sort of stories are always cool
01:50:12 <ibid> the compiler proper then read the ast from that file
01:51:18 <lispy> boegel: any plans to add shaders?
01:53:39 <boegel> lispy: for now I won't add anything anymore, I have to finish my thesis text on it
01:54:01 <boegel> but when my thesis is done, I will make the code available for anyone to play with
01:54:12 <JohnMeacham> Yeah, there is no technical reason they arn't done. I think it just nevr came up.
02:00:17 <lispy> boegel: ah, so it's a thesis project?
02:00:22 <lispy> boegel: what degree?
02:00:38 <JohnMeacham> But patches are welcome of course.
02:01:58 <boegel> lispy: I'm studying CS at Ghent University
02:02:13 <lispy> boegel: cool, what level?
02:02:21 <lispy> undergrad, masters?
02:02:41 <boegel> lispy: besides the implementing part in Haskell, there's also a theoretic part (proving properties of the software)
02:02:44 <boegel> lispy: masters
02:03:01 <lispy> yeah, i wondered :)
02:03:14 <lispy> what sort of things are you proving?
02:03:57 <lispy> the things people can accomplish with perlin noise always impresses me
02:04:25 <boegel> lispy: well, I'm not sure yet :p but I set up the model in a funtional formal system (FunMath), and then I prove stuff of that model, things like when you trace an empty scene, you'll always get the background color, tracing without lights yields a black picture, and so on
02:04:35 <boegel> lispy: I was quite impressed too :)
02:04:51 <boegel> but my implementation is quite slow, I'm using the old version of the algorithm
02:05:23 <boegel> the last picture on my website, the wood texture with the 3 transparent balls took almost 9m to render
02:05:42 <lispy> boegel: this is the ray-tracer i helped write http://www.nongnu.org/grt/
02:05:57 <lispy> how large was the image?  300x200?
02:06:11 <lispy> i have it on the screen but i can't tell :)
02:06:22 <boegel> 800x600
02:06:30 <lispy> oh, that doesn't seem that bad to me
02:06:42 <boegel> you can see the big version if you click on it you know :)
02:07:08 <lispy> hehe, yeah, i just miss judged the size :)
02:07:26 <lispy> i think i'm running at 1600x1200 so sometimes things look small
02:07:28 <boegel> the clouds effect on that website is quite cool :)
02:07:36 <boegel> oh, I see :)
02:08:01 <skew> lispy: xrandr is nifty for telling you what size you're and and changing it
02:08:06 <lispy> we wanted to implement shaders, but all three of us, lost time
02:08:26 <lispy> skew: i'll remember that
02:08:31 <boegel> I hope I'll be able to keep adding features to it when my thesis is done
02:08:54 <boegel> I think I have a fairly good model, and add-ons shouldn't be too hard to add
02:09:00 <lispy> i also couldn't really find a good description of shaders to implement from
02:09:01 <skew> lispy: it's the only way I've found to actually change what size your full screen is in X, so you don't get that scrolling around in a bigger virtual screen
02:09:22 <skew> Shaders are fun. I've played with GLSL a bit
02:09:37 <boegel> lispy: I have a good book, but I'm not sure if it includes anything on shaders
02:09:53 <lispy> in E you can press alt+enter to have it changed to the smallest resolution that will fit around the window with focus.  It's sometimes a neat hack to have around
02:10:03 <skew> I build a donut that did a step or two of newton's method to try to correct for the polygons being flat
02:10:12 <lispy> heh, nice
02:14:28 <boegel> I want to compile my raytracer for profiling, but I'm using the System module for getting arguments from command line... is this a problem ? because it's complaining now it can't find the System module
02:15:03 <Itkovian> meuning
02:15:26 <Itkovian> boegel: you imported System.Environment ?
02:15:58 <boegel> I imported System.getArgs
02:16:15 <Itkovian> hmm, maybe I'm mistaken
02:17:06 <Itkovian> I always use System.Environment
02:17:11 <Itkovian> getArgs is in there.
02:17:16 <boegel> strange
02:17:32 <boegel> well, suppose I'm using System.Environment, how do I compile then to profile ?
02:17:43 <lispy> boegel: this site has a lot of neat stuff, here is a link to their perlin noise psuedo code, perhaps it's a faster algo? http://freespace.virgin.net/hugo.elias/models/m_perlin.htm
02:18:10 <musasabi> morning
02:18:40 <boegel> lispy: that's the website I used as a source (among others) :)
02:19:18 <JohnMeacham> Hmm.. Simon Marlow is taking a break from the conversation. I don't blame him. I was having a lot of trouble understanding S Alexander J's point. I think it might have just been a difference in terminology.
02:19:20 <lispy> ah, yeah it's a great site
02:20:47 <lispy> gah, it's after 2am, i should be asleep.
02:20:49 <lispy> night all!
02:20:50 <lispy> :)
02:23:01 <musasabi> night lispy
02:23:53 <boegel> g'night lispy
02:24:26 <boegel> is there something like a profiling library for profiling when using external modules (like System and Directory) ?
02:27:28 <musasabi> boegel: is using -auto-all -prof not enough?
02:28:00 <musasabi> if you want to profile *inside* those then just copy the source file inside your project.
02:28:27 <boegel> no, I get an error when compiling that the module System can't be found
02:28:44 <musasabi> boegel: do you have the profiling libraries installed?
02:28:48 <boegel> oh, wait, I installed the profiling libraries I found on the GHC website, that helps :)
02:49:17 <vikasgp> what does "point" refer to in points-free style?
02:53:13 <musasabi> (.)
02:54:13 <vikasgp> doesn't points-free mean you're using function composition? (.)
02:56:33 * boegel leaves to make lunch, bye
03:02:55 <xerox> vikasgp, it means defining functions without explicit parameters, I think.
03:03:42 <vikasgp> I got that. Which means you're using the "point" (.) Why is it then called points-*free*?
03:07:45 <xerox> Maybe the points refers to the explicit parameters
03:08:16 <Heffalump> it does
03:09:21 <vikasgp> oh
03:12:13 * xerox played way too much Go
03:22:12 <Lemmih> @seen SyntaxNinja
03:22:12 <lambdabot> I saw SyntaxNinja leaving #haskell 4 hours 40 minutes 14 seconds ago.
03:24:41 <shapr> jiihaa
03:24:51 <Lemmih> Good morning, #Haskell!
03:25:00 <shapr> good mornin!
03:25:22 <sond> morning
03:25:33 <sond> I should get some breakfast
03:26:13 <Lemmih> shapr: I'll update the Hackage server you on your box today and upload some packages. Then you'll be able to test cabal-get for me (:
03:26:21 * shapr just had the lunch special for breakfast .
03:26:51 <shapr> Btw, snowblind is going away soon. I've really got to take down that box.
03:27:19 <Lemmih> Oh yeah. Should really move to SyntaxNinja's box.
03:27:27 * Lemmih is off: shower.
03:27:47 <shapr> I'm moving DarcsWiki to darcs.net, and I'll migrate the users to pidgin if any of the existing users want to continue to be ScannedInAvians.
03:28:43 <xerox> What are the benefit of being a ScannedInAvain, and how do you become it?
03:29:12 <shapr> Well, I guess the benefit is having a shell account on my server.
03:29:33 <xerox> Whoops, misunderstood :)
03:30:26 <shapr> So, if you really need a shell account for some Haskell software or something, it's possible to become a ScannedInAvian.
03:30:42 <xerox> Hm, it would be nice..
03:30:56 <xerox> ..to do Haskell software or something!
03:30:58 <xerox> ;-)
03:31:41 <Muad_Dibber> shapr : you the one who owns darcs.net then?
03:32:18 <shapr> No way, that's David Roundy.
03:34:12 <Muad_Dibber> so you are just webmaster or something that you are moving the wiki?
03:34:31 <shapr> Er, yeah. Kindof.
03:34:41 <shapr> Long ago darcs needed a wiki.
03:34:58 <shapr> Some setup one, but it didn't work.
03:35:05 <shapr> So I made a temporary wiki on ScannedInAvian.org
03:35:30 <Muad_Dibber> and the wiki is of course using darcs for versioning :P
03:35:46 <shapr> no, actually it's not.
03:36:33 <shapr> Would be nice, but not yet.
03:39:22 <Muad_Dibber> next few weeks i'm going to get involved all over again with functional programming
03:39:25 <Muad_Dibber> (c:=
03:39:28 <shapr> yay!
03:41:35 <Muad_Dibber> following an "advanced functional programming" course
03:48:30 <d`> and i'm finishing studies and i'm afraid that's it for me with functional programming ;]
03:48:48 <shapr> awww
03:53:31 <d`> btw have any of you ever heard of jobs being offered for functional programmers ?
03:53:37 <shapr> yes!
03:53:42 <d`> really ?
03:53:44 <d`> where ?
03:54:49 <shapr> Um, aetion.com, galois.com
03:56:25 <glimming> Is there a interpreter for untyped lambda calculus in Haskell that pretty prints the resulting reductions and allows eta-reduction mode as well?
03:56:51 <d`> (valid html, looks promising already)
03:58:31 <d`> Successful applicants must relocate to central Ohio
03:58:44 <d`> no thank's ;]
04:00:49 <shapr> d`: The galois.com website has other jobs.
04:01:03 <d`> yeah, i'm checking it now
04:01:04 <boegel> hey everyone
04:01:18 <glimming> hi shapr
04:01:28 <glimming> do you know any interpreter?
04:01:33 <glimming> for Lambda?
04:02:00 <Lemmih> Like @eval?
04:02:13 <glimming> what's @eval?
04:02:28 <boegel> @eval 1+1
04:02:29 <lambdabot> 2
04:02:33 <boegel> that's eval :)
04:02:42 <glimming> Oh, I want to see exactly each reduction step.
04:02:52 <glimming> e.g. (\x. x) z ---> z
04:03:06 <Lemmih> @eval (\x -> x) 2
04:03:07 <lambdabot> 2
04:03:14 <boegel> I profiled my raytracer, and it appears that my clip function is kind of a bottleneck, which is quite strange
04:03:39 <boegel> can someone help me how to make my clip function faster ?
04:03:55 <Lemmih> Post it and we'll see.
04:03:56 <boegel> @paste
04:03:56 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
04:05:06 <boegel> I posted it on the wiki... it's quite simple now, but I think it can be made a lot faster
04:05:07 <shapr> glimming: You can use Eval from lambdabot.
04:05:16 <glimming> wonderful...
04:05:24 <glimming> it's in Haskell?
04:05:27 <glimming> Does it show each step?
04:05:38 <glimming> So I have to start up IRC each time.... ;-)
04:05:44 <boegel> shapr: http://studwww.ugent.be/~kehoste/thesisPublic/website/21_04_2005/trans2.png
04:05:51 <shapr> If you want to see each step, check out Vital and Kohl's thingy, HOP I think it's called.
04:05:59 <shapr> hiya KangaBroo
04:06:12 <xerox> Vital it's really nice
04:06:35 <KangaBroo> hiya shapr
04:06:42 <musasabi> Lemmih: Did you succeed in making something nice with STM?
04:06:49 <glimming> I can't find this HOP on the web
04:06:53 <Lemmih> musasabi: Kinda.
04:07:34 <boegel> Lemmih: any idea how to make it faster ?
04:07:48 <Lemmih> musasabi: Got a typesafe, multi-column hask-table (ala HaskellDB) but it was slow.
04:07:52 <boegel> it's quite of strange it is a bottleneck now
04:07:58 <Lemmih> boegel: You can make sure it gets specialized.
04:08:16 <boegel> err... I'm not sure what you mean by that
04:08:20 <musasabi> Lemmih: was the problem the boxed arrays + TVars having too much indirection?
04:08:46 <Lemmih> musasabi: Yeah.
04:09:06 <Lemmih> boegel: The function is overloaded. That can harm the performance.
04:09:30 <boegel> oh, I see
04:09:56 <Lemmih> boegel: You can specialize the function for use with Double/Floats at the cost of code bloat.
04:09:57 <shapr> glimming: I don't remember the name of it, but Wolfram Kohl wrote something like Vital that uses higher-order graph reduction.
04:10:59 <boegel> okay, let me try :)
04:11:22 <shapr> boegel: wow, that pic is gorgeous!
04:12:05 <Lemmih> boegel: Inserting some {-# SPECIALIZE clip :: (Double,Double,Double) -> (Double,Double,Double) #-} pragmas might help a little.
04:12:32 <musasabi> also -fexcess-precision helps.
04:12:42 <shapr> boegel: I'm particularly impressed with the magnifying glass effect on the wood texture, that's way nifty.
04:12:52 <boegel> Lemmih: or I could just make the type (Double,Double,Double) -> (Double,Double,Double) right ?
04:13:13 <Lemmih> boegel: Sure, if you aren't using it for anything else than Doubles.
04:13:16 <boegel> shapr: I know, I didn't know my raytracer could produce pics this cool... it does take almost 9m to render though
04:13:34 <boegel> Lemmih: I'm not, but I was trying to make it a bit more general
04:14:01 <boegel> Lemmih: that does help _a lot_
04:15:44 <Lemmih> musasabi: What does -fexcess-precision do?
04:15:55 * shapr was wondering that also
04:16:07 <JaffaCake> it allows temporary floats to be stored at greater precision
04:16:29 <JaffaCake> i.e. it turns off gcc's -ffloat-store flag
04:16:51 <JaffaCake> it's a hack that we shouldn't need, IMO
04:18:28 <musasabi> It gives some performance improvement (at the cost of numeric precision)
04:19:02 <JaffaCake> musasabi: actually it probably gives you *more* numeric precision, hence the name
04:19:24 <JaffaCake> but it is unprecictable, which is why it isn't the default
04:20:30 <ibid> how is it unpredictable?
04:20:41 <ibid> you mean that you can't then predict when the stores happen?
04:21:25 <JaffaCake> if you turn on optimisation, you might end up with more precision because temporary values would be stored in memory less often
04:21:43 <Lemmih> boegel: How much did it help?
04:21:44 <JaffaCake> so your program produces different results with -O
04:22:15 <ibid> that's basically what i suggested :)
04:22:22 <JaffaCake> this is only a problem on broken architectures (i.e x86) with broken OSs (i.e Linux) :-)
04:22:48 <ibid> how could the os help?
04:23:00 <ibid> by keeping the precision flag?
04:23:02 <JaffaCake> by putting the FP unit in 64-bit mode by default
04:23:09 <JaffaCake> OpenBSD does this
04:23:22 <JaffaCake> that doesn't help if you're doing Float calculations, though
04:23:22 <ibid> how is that an os problem?
04:23:38 <ibid> the flag isn't, iirc, privileged
04:23:55 <JaffaCake> it's too painful to set/reset the precision flag everywhere
04:24:24 <ibid> performance-wise?
04:24:45 <JaffaCake> probably, yes
04:24:56 * shapr boings randomly
04:25:36 <JaffaCake> ibid: actually I don't know what impact saving/restoring the precision would have
04:26:02 <JaffaCake> it might be worth trying: but you still have the same problems with Float calculations
04:26:38 <ibid> but if you do go to the trouble of managing the flag yourself, you can use it to toggle float mode, too
04:26:39 <JaffaCake> and I don't care, because I have a shiny new amd64 box with SSE2 :)
04:26:45 <shapr> w00
04:26:54 <shapr> And you can keep your coffee warm on the heatsink!
04:27:14 <JaffaCake> heh, it's not in the same room, because it makes too much noise :)
04:27:23 <shapr> Wow
04:28:01 <JaffaCake> for some reason, IBM think that impressive workstations should produce impressive amounts of noise too
04:28:16 <shapr> Is it a dual/quad amd64?
04:28:21 <JaffaCake> dual
04:28:59 <shapr> Nifty!
04:29:09 <shapr> I think I'm going to reallocate my SMP amd64 budget into a laptop.
04:30:26 <shapr> Mostly because IRC is too much fun, and I'd like to have the ability go outside and write code while sitting under a tree.
04:30:51 <JaffaCake> yeah, that's nice
04:31:08 <JaffaCake> I can do that in my back garden just about
04:31:20 <shapr> Do you have a laptop?
04:31:26 <JaffaCake> yup
04:31:37 <shapr> Any useful info for GHC on laptops?
04:31:43 <JaffaCake> only a crappy Dell at home
04:32:03 <JaffaCake> hmm, "ghc" is a good way to turn on the fan
04:32:06 <shapr> hehe
04:32:18 <xerox> Yep :(
04:32:29 <JaffaCake> it runs nice on a Centrino - they have nice big caches
04:32:36 <JaffaCake> don't even think about it on a Celeron
04:33:16 <shapr> Well, I have my dual 1.5GHz with the five case fans to use for longer compilations.
04:33:28 * boegel curses on his ISP
04:33:43 <Lemmih> shapr: How do you install xearth on Debian?
04:33:45 <JaffaCake> I usually just log in to something remotely from my laptop
04:33:47 <shapr> Ok, JaffaCake advice is "use enough cash"
04:33:53 <shapr> ahem cache ;-)
04:34:08 <JaffaCake> yep :)
04:34:14 <shapr> Lemmih: apt-get -uf install xearth ?
04:34:39 <Lemmih> It says xearth is not a real package.
04:35:17 <xerox> It does work on ubuntu.
04:35:30 <skew> boegel: did the specialize pragma do enough?
04:36:11 <boegel> it improved a lot, I'm profiling the scene with the wooden plane again now to see how much it has improved
04:36:31 <boegel> but there the bottleneck will be the perlin noise function, without a doubt
04:37:04 <boegel> skew: I didn't use the pragma though, I changed the type of my clip function
04:37:08 <skew> like the GHC optimization guide says, find overloading and laziness in inner loops and squish it
04:38:07 <boegel> squish laziness ? in Haskell ? :s
04:38:29 <JaffaCake>  if you want speed, yes
04:38:56 <boegel> how can I squish lazyness in a lazy language ?
04:39:03 <JaffaCake> seq ;)
04:39:25 <JaffaCake> and strictness annotations on constructor fields
04:40:00 <skew> I remembered something about SPECIALIZE being deprecated, but I guess I was just imagining it
04:40:21 <shapr> dons: The hs-plugins questions are starting to pile up on #perl6, I think hs-plugins has reached the mailing list stage.
04:40:28 <boegel> skew: 14m28s -> 13m33s, compiled with -O2
04:40:34 <shapr> @seen dons
04:40:36 <lambdabot> I haven't seen dons.
04:40:36 <boegel> but without profiling it'll be faster off course
04:40:38 <JaffaCake> it's just a special case of RULES, maybe that's what you remember
04:40:43 <skew> yeah
04:41:02 <skew> I think that was it. I was remembering a sense of "you really should use this RULES translation"
04:43:11 <df_> why is overloading a bad thing for speed - is it not all statically resolved at compile time?
04:43:22 <skew> not if your function is polymorphic
04:43:54 <skew> if it has a type like (Show a) => a -> String, then you get a function that takes a show dictionary and an a
04:44:49 <skew> If you wrote code that needs a Show instance for Int, for example, then the compiler would statically resolve that, and call the Int version of the functions
04:45:16 <skew> but just using a polymorphic function at a = Int or a = Char isn't enough for the compiler to generate a separate version of the code for that specific type
04:45:46 <df_> hmm, why can't it be done statically (cf. ocaml (which i /think/ statically resolves it))?
04:46:22 <skew> The SPECIALIZE pragma tells the compiler to make and use a specialized version for specific types, and if your function happens to get inlined, then the inlined copy will be specialized for its context
04:46:34 <skew> df_: O'Caml doesn't have anything like the type class system
04:47:35 <df_> yes, point, i'm comparing apples and goats
04:47:45 <skew> there you have to explicilty apply the functors to make the module you want, so there never is polymorphism like this
04:48:28 <skew> Like I said, GHC will optimize out all the dictionaries and stuff if knows what particular type you are working on
04:48:53 <df_> i see
04:48:54 <skew> if it can be any "a", then the only way to have the methods for showing whatever particular "a" gets used in the program is if the caller actually passes those methods in
04:49:28 * Lemmih read something about the Ocamlers wanting to change the type sig of (==) from "'a -> 'a -> bool" to "'a -> 'b -> bool".
04:49:50 <skew> At least the generic version has to work that way, and to get separate compilation and stuff like that you always need to make the generic version
04:50:36 <boegel> Lemmih: why ? what's the use ?
04:51:02 <skew> Lemmih: are they giving it a name half as good as "John Major equality"?
04:51:15 <df_> lol
04:51:36 <skew> boegel: I know what the use of a type like that is in Epigram :)
04:51:43 <Lemmih> boegel: Perhaps they want to compare apples and oranges.
04:52:15 <skew> can't it just be optimized to false whan a /= b?
04:52:53 <skew> boegel: where does your time go now?
04:53:16 <glasser> hmm, i just found and maybe fixed a problem preventing me from installing hs-plugins under the osx Panther GHC-6.4.pkg installation
04:54:59 <skew> shapr: was that graph reduction thing called HOPS?
04:56:44 <boegel> skew: with profiling, 13m28s
04:56:55 <boegel> for the scene with the perlin texture in it
04:57:09 <skew> what is taking up the time?
04:57:20 <boegel> the noise function
04:57:24 <skew> if you work with triples a lot you might consider unboxing them
04:57:40 <boegel> skew: elaborate pls :)
04:57:51 <skew> the UNBOX pragma
04:58:38 <boegel> what does that do ?
04:58:54 <boegel> I would like it to work with Hugs too though
04:59:05 <boegel> so I should use pragma's then, right ?
04:59:26 <skew> oh, UNPACK I guess. Check the user's guide. It sounds like it's about unboxing parameters directly into the heap representation of a constructor
04:59:54 <skew> and then hopefully stuff gets inlined enough that it doesn't actually have to spill to the heap that much
04:59:56 <JaffaCake> boegel: data T = T {-# UNPACK #-} !Int
05:00:15 <skew> Does the field need to be marked strict?
05:00:21 <JaffaCake> yes
05:00:39 <JaffaCake> it's compatible with Hugs, but in GHC it'll unbox the Int directly into the constructor
05:00:53 <skew> How does the example with pairs work then? T {-# UNPACK #-} !(Int,Int)
05:01:20 <JaffaCake> that removes the pair constructor, storing two Ints directly in the T constructor
05:01:24 <skew> is that a special case? I think flattening it adds some strictness
05:01:29 <skew> pairs are lifted
05:01:40 <JaffaCake> but you marked the pair strict
05:02:12 <skew> I thought that just removed _|_ and not stuff like (_|_,2) and (7,_|_)
05:02:23 <JaffaCake> sure
05:02:38 <JaffaCake> you end up with a representation like data T = T Int Int
05:02:54 <JaffaCake> so (T _|_ 2) is still a value of that type
05:03:02 <skew> Oh, okay
05:03:20 * boegel doesn't get it
05:03:28 <skew> I thought it said the ints were also getting unboxed
05:03:43 <JaffaCake> the UNPACK only unpacks the outer layer
05:03:58 <boegel> using something like (a,a,a) is bad ? it's better to use (A a a a) ?
05:04:24 <skew> boegel: (a,a,a) is a thing with pointers to the closures for your a's
05:04:26 <JaffaCake> not necessarily
05:04:45 <skew> you mean if that value gets optimized out?
05:05:11 <boegel> you say the UNPACK pragma could help me, but I don't understand why
05:05:29 <JaffaCake> boegel: what does your data type look like?
05:07:11 <skew> If A is defined like data A = A {-# UNPACK #-} !Double {-# UNPACK #-} !Double {-# UNPACK #-} !Double, then and A is stored in memory as a closure or whatver with three machine doubles packed into it, rather than just three pointers to Double boxes elsewhere in the heap
05:07:34 <JaffaCake> right
05:07:36 <skew> unless JaffaCake is going to come back and say I'm totally wrong
05:07:44 <JaffaCake> nope ;)
05:08:10 <boegel> I have several data types
05:08:25 <boegel> one I use a lot is data Ray = Ray Point Vector
05:08:36 <skew> So that probably makes it faster to get at the number because you don't have to follow as many pointers, and certainly helps memory usage with may help cache performance
05:09:10 <boegel> I should try and change that to data Ray = Ray {-# UNPACK -#} !Point {-# UNPACK #-} !Vector ?
05:09:16 <JaffaCake> Doubles have alignment problems, but there's not much we can do about that
05:09:33 <boegel> JaffaCake: Float's are better ?
05:09:37 <JaffaCake> boegel: what are your Point and Vector types?
05:10:04 <boegel> type Point = (Double,Double,Double) , type Vector = (Double,Double,Double)
05:10:13 <JaffaCake> Floats won't suffer from alignment penalties, and they take up less space
05:10:17 <skew> boegel: that will only help if point and vector can be flattened. If point and vector themselves consist of unpacked doubles, then those doubles will flatten all the way up
05:10:32 <skew> JaffaCake: this is where -fexcess-precision comes in?
05:11:10 <boegel> skew: so I should define Point as data Point = Point {-# UNPACK -#} !Double  {-# UNPACK -#} !Double  {-# UNPACK -#} !Double then ?
05:11:12 <skew> boegel: tuples hold boxed, nonstrict values, so unpacking a tuple doesn't get you much
05:11:14 <JaffaCake> unpack Point and Vector first, then unpack Ray
05:11:49 <boegel> okay, I'll try that in a minute or so
05:11:53 <skew> boegel: I think that would do it. Unpacking a pair just turns data T = {-# UNPACK #-} !(A,B) into effectively data T = T A B
05:12:15 <JaffaCake> skew: i think -fexcess-precision is a separate issue
05:12:43 <skew> JaffaCake: I thought you said there was some kind of constant truncating or storing back to memory that would make Float operations slow otherwise?
05:12:58 <JaffaCake> the problem with Doubles is that our heap cells are only aligned to 32-bits, and on x86 you get a penalty for loading a misaligned Double
05:13:24 <skew> wait, x86 FPUs tend to work in double-extended mode anyway, which would also be excess precision
05:13:52 <JaffaCake> that's what excess precision is, yes
05:14:26 <JaffaCake> -fexcess-precision allows temporaries to be kept in double-extended precision, rather than forcing them back to Double or Float precision
05:14:59 <skew> I though you were implying that there would be a performace hit for avoiding extre intermediate precision without the flag
05:15:16 <boegel> I'll take a shower first, and then do some shopping
05:15:26 <boegel> I'll try the unpacking bit when I come back
05:15:33 <JaffaCake> skew: there is
05:15:52 <skew> boegel: one more thing is looking for strictness
05:16:13 <JaffaCake> without -fexcess-precision temporaries get stored in memory between operations to truncate the precision
05:16:19 <boegel> skew: elaborate please :) I'm not that familiar with all these types
05:16:35 <nlv11757_> are Int64 in haskell in two's complement representation?
05:16:58 <skew> apparently with -fdump-core you can get GHC to dump its guts and grovel through the entrails (external core) looking for evidence about whether or not things that you were expecting to be strict/unboxed actually are
05:16:59 <boegel> s/types/things
05:17:22 <JaffaCake> nlv11757_: yes
05:17:25 <skew> It sound like black magic to me, but JaffaCake might know more
05:17:37 <nlv11757_> jaffacake: in most programming languages they are probably, no?
05:17:46 <boegel> JaffaCake: can you tell me more about looking for strictness ?
05:18:27 <JaffaCake> -ddump-simpl will show you the intermediate code right before code generation
05:18:37 <JaffaCake> if you can read it :)
05:18:50 <skew> Oh, that's the right dump flag to use?
05:19:06 <skew> JaffaCake is a master of the black arts
05:19:12 <JaffaCake> that's the most useful one if you're looking for things to optimise, I find
05:19:35 <skew> hmm, this CORE pragma might be useful if you are going to be looking at core
05:19:52 <skew> boegel: Have you read the bit of the user's guide on optimization?
05:20:16 <boegel> skew: I haven't, where can I find it ?
05:20:39 <skew> section 6.2
05:21:10 <skew> the user's guide was one of the first things I read when I was learning Haskell
05:22:03 <boegel> skew: thanks, printing now, I'll read it when I get back.. but I have to go now
05:22:07 <boegel> I'll report later :)
05:23:26 <skew> "(Besides, Core syntax is fun to look at!)"
05:44:42 <nlv11757_> the bitrepresentation of -1 in 64 bit two complement's representation are 64 ones right?
05:44:55 <JaffaCake> yes
05:45:05 <nlv11757_> so why is doing a shift_right of 32 bits still -1
05:45:08 <Itkovian> yes
05:45:23 <Itkovian> well, you shift in  0 AT POS 64
05:45:28 <Itkovian> sorry
05:45:38 <nlv11757_> shift_right is the arithmetic shift that reproduces the sign in the vaccant bits
05:45:45 <Itkovian> so the bottom 32 bits are still all 1, i.e. -1 in 32-bit 2-complement
05:45:51 <Itkovian> whatever.
05:45:56 <Itkovian> then you shift in a 1
05:46:29 <Itkovian> sorry I misunderstood.
05:46:31 <Itkovian> grmbl
05:46:39 <Itkovian> it _is_ thursday afternoon ...
05:46:49 <nlv11757_> Itkovian, what i dont understand is that shift_right of a 64bit -1 over 32 bits.....is still a 46bit -1
05:46:52 <nlv11757_> 46=64
05:46:53 <Itkovian> if you shift in the sign bit, then you keep shifting in 1
05:47:35 <Itkovian> I agree that it seems weird.
05:48:31 <nlv11757_> what do you mean with...'keep shifting in 1'
05:48:48 <nlv11757_> i dont understand the reproducing the sign in the vaccant bits i guess
05:50:11 <Itkovian> Well, the vacant bit is the leftmost bit if you shift to the right
05:50:20 <Itkovian> then that bit becomes a 1
05:50:38 <TheHunter> @seen Itkovian
05:50:38 <thbot> Itkovian is in #haskell. Last spoke 17 seconds ago.
05:50:39 <lambdabot> I haven't seen Itkovian.
05:50:47 <TheHunter> thbot, @seen nlv11757_
05:50:48 <Itkovian> so effectively, you keep shifting in 1 bits, i.e. all bits remain 1
05:50:48 <thbot> nlv11757_ is in #haskell. I don't know when nlv11757_ last spoke.
05:50:58 <Itkovian> heh
05:51:11 <Itkovian> thbot: are u deaf?
05:51:34 <Itkovian> look:
05:51:39 <thbot> I'm not deaf. I'm blind, though.
05:51:46 <Itkovian> ageorges@dragnipur:~/tmp $ ./a.out
05:51:46 <Itkovian> Before shift: ffffffff
05:51:47 <Itkovian> After shift: ffffffff
05:51:57 <Itkovian> hmm
05:52:02 <Itkovian> that 32 bit :-(
05:52:10 <Itkovian> dang.
05:52:24 <TheHunter> thbot, @dynamic-reload seen
05:52:25 <thbot> module reloaded
05:52:35 <TheHunter> thbot, @seen Itkovian
05:52:35 <thbot> Itkovian is in #haskell. I don't know when Itkovian last spoke.
05:52:39 <nlv11757_> 1 followed by 31 zeros and then 32 ones....is not -1
05:52:41 <Itkovian> ageorges@dragnipur:~/tmp $ ./a.out
05:52:42 <Itkovian> Before shift: ffffffffffffffff
05:52:43 <Itkovian> After shift: ffffffffffffffff
05:53:11 <Itkovian> nlv11757_: eh? why would that be a 1 followed by 31 zeroes?
05:53:38 <nlv11757_> well you said the most vacant bit was the leftmost, so shift to right plus put a one in the leftmost bit= 1 ....31 zeros...32 ones
05:56:15 <Itkovian> nlv11757_: it seems that for each step in the shift the 1 is put in the vacant place, so that means 32 1 bit at the front are being shifted in
05:56:34 <Itkovian> I was never good a bit-screwing, so correct me when I'm wrong
05:56:56 <nlv11757_> hmm
05:58:22 <Itkovian> the C-book from K&R says so :-)
05:58:47 <Itkovian> however, it can depend from machine to machine as the C >> can be implemented by a logical shift or an arithmetic shift.
05:58:57 <Itkovian> IMO modern compilers always use arithmetic shift.
06:00:41 <nlv11757_> i understand what its doing now
06:01:04 <Itkovian> I'm glad.
06:01:14 <Itkovian> wasn't it you who said C was _ugly_ ?
06:01:18 <Itkovian> :-)
06:01:29 <nlv11757_> i was trying to understand the semantics of; "shift_logical_right (shift_right (i :: 64Bit) 32) 32"
06:01:33 <Muad_Dibber> C is ugly.
06:01:42 <nlv11757_> Itkovian, wasnt it all the world together that said that
06:01:46 <Itkovian> not again ...
06:01:50 <nlv11757_> :P
06:02:06 <Itkovian> ok, so you have 00000000ffffffff then, yes?
06:02:10 <Itkovian> when starting with -1
06:02:20 <Muad_Dibber> nlv11757_ : hows life at philips?
06:02:45 <nlv11757_> Muad_Dibber, busy :D i finally finished making all the tools im needing to actually do something :)
06:03:31 <Muad_Dibber> hehe
06:03:37 <Muad_Dibber> and now your period is almost over i guess? ;)
06:03:40 <Itkovian> nlv11757_: you work where, exactly?
06:04:10 <nlv11757_> so getting out of Ocaml, generating an UUAG datatype definition representing C programs from the OCaml datatype definition of C programs. And now translating the OCaml pretty printer to Haskell to produce valid C code again.
06:04:14 <nlv11757_> im doing my thesis
06:04:28 <nlv11757_> im halfway now Muad_Dibber, now i can start doing what my thesis is about :P
06:04:58 <Muad_Dibber> isnt that the way it always goes? :P
06:05:22 <nlv11757_> probably, but since this is my first thesis (:P) i dont know if it is the normal way
06:05:39 <nlv11757_> if necessary, im willing to extend my graduation period
06:06:11 <Itkovian> nlv11757_: it seems you're perfectly on track
06:06:54 <Muad_Dibber> right now my point of view is like: time doesnt matter as long as you know you are doing what you wanting to do :)
06:07:40 <nlv11757_> i still have 19 weeks left
06:07:54 <nlv11757_> im sometimes flippin out because i think im not gonna make it
06:08:14 <nlv11757_> Muad_Dibber, time does matter when you are graduating i think
06:08:32 <Itkovian> 19 weeks is a lot.
06:08:40 <nlv11757_> til the end of august
06:08:48 <nlv11757_> what i now have to do is the following;
06:09:04 <Itkovian> our students have 2x12 weeks and exams in between them for about 6 weeks (2 weeks holiday, 1 week study then 3-4 weeks exams)
06:09:41 <Itkovian> that's from October 1st to June 1st
06:09:41 <nlv11757_> i have profiled an mpeg2 encoder (specially rewritten by someone) and must now determine where i need to improve it for performance by introducing parallelism
06:10:50 <nlv11757_> this introducing of parallelism (by means of openMP directives) should be done semi-automatic by my tool im developing
06:11:02 <nlv11757_> so thats quite a lot of work still to do in 19 weeks i guess
06:11:08 <Itkovian> the inner loop, do some loop transformations to get the data independent and split it in >=2 threads
06:12:00 <nlv11757_> my mentor is interested in coarse grain parallelism, so no inner loop stuff which will actually take more overhead etc etc.
06:12:30 <earthy> ghehe
06:12:36 <earthy> tricky stuff
06:12:42 <earthy> cool though
06:12:54 <earthy> time to start thinking about flowgraphs, nlv11757
06:13:02 <nlv11757_> i
06:13:20 <nlv11757_> i've read dependence analysis for supercomputing by banerjee as preparation
06:13:40 <nlv11757_> but thats mostly solving lineair systems
06:13:45 * earthy nods
06:13:50 <nlv11757_> not sure if that will apply to my stuff
06:13:56 <earthy> it may
06:14:35 <nlv11757_> what i am affraid of is looking in that part of C i need to improve...and finding extremely difficult problems that won't get solved within my 19 weeks
06:15:28 <df_> nlv :: it depends how you want to pass the data around, an mpeg encoder has many large logical blocks that can operate in parallel
06:16:03 <earthy> df: precisely
06:16:04 <nlv11757_> i think this encoder passes each macroblock to the complete pipeline, or something like that
06:16:11 <nlv11757_> no every frameline
06:16:18 <earthy> that's not bad
06:16:47 <nlv11757_> i just want to get something good done in 19 weeks lol
06:16:52 <nlv11757_> *that* is my main concenr
06:16:54 <nlv11757_> rn
06:18:36 <df_> you could paralize the work on the slices, eg motion vectors, dct, etc
06:18:42 <df_> so you have multiple pipelines
06:19:22 <earthy> df: the question is how to recognize those parts.
06:19:38 <nlv11757_> remember its has to be semi-automatic
06:19:38 <df_> your task is to do it automatically?
06:19:45 <df_> yes, thats the fun bit
06:19:59 <nlv11757_> my tool should do it in corporation with the user of my tool in a kind of interactive fashion
06:20:31 <Itkovian> then flowgraphs, dominatortrees etc seem to be the best way to tackle it imo.
06:20:50 <nlv11757_> well, i have a complete AST of the program :P
06:21:06 <earthy> that helps ;)
06:21:14 <nlv11757_> in an attribute grammar
06:21:19 <earthy> that also helps :P
06:21:35 <nlv11757_> so im hoping that all information i need can flow over my AST
06:21:35 <earthy> nwo you can synthesize the `flowgraph' attributes
06:21:41 <df_> if each function takes a stream as an input and outputs a new stream, (eg, like a hardware model), one is able to think of the functions passing data to each other and can operate in parallel - this is something i've been thinking in terms of hardware design
06:21:57 <nlv11757_> what do you mean with 'flowgraph attributes' exactly earthy ?
06:22:02 <earthy> eeeww... C as a hardware design language
06:22:07 <df_> haskell for me
06:22:21 <df_> earthy :: there is also a thing called systemC
06:22:25 * earthy knows
06:22:26 <nlv11757_> you mean synthesizing the complete flowgraph?
06:22:30 * earthy nods
06:22:51 <earthy> back in the day I did my master's research at a hardware design firm
06:23:00 <nlv11757_> that wouldnt be using the AG tree very much then
06:23:42 <earthy> nlv11757: the flowgraphs you want to be looking into don't necessarily follow the AST
06:24:15 <earthy> remember, AG's are *just* a tool
06:24:19 <nlv11757_> i know, but then i would be using AG only to derive that flowgraph...and then analyze that flowgraph instead
06:24:25 <earthy> yes
06:24:27 <earthy> why not?
06:24:51 <nlv11757_> damn, do you know i've been spending my first half of my thesis to get stuff into AG
06:25:06 <df_> earthy :: AG's ?
06:25:10 <earthy> attribute grammars
06:25:28 <nlv11757_> so being able to parse lots of C and having the AST datatype in AG and being able to pretty print it back to C again
06:25:43 <df_> ah
06:25:44 <earthy> but, you seem to want to generate the result as an attribution of the ast
06:25:49 <earthy> not impossible
06:26:16 <earthy> it's just folding the flowgraph-generation and -analysis together
06:26:39 <nlv11757_> i was thinking that was possible, otherwise i could have just reused CIL completely and programmed the stuff in OCaml instead
06:26:47 <kzm> Yo!
06:26:53 <earthy> oh, it's definitely possible
06:27:08 <earthy> I just don't know if it'll really give you much benefits
06:27:12 <earthy> other than nicer syntax ;)
06:27:15 <nlv11757_> then i wouldn't have to write a CIL plugin to dump it to file, generation tool for UUAG datatype and pretty printer for C
06:28:05 <nlv11757_> im gonna get slaughtered if it turns out AG didnt help at all here
06:28:35 <earthy> are you?
06:29:43 <nlv11757_> well, doaitse and i was telling my mentor and some other guys that ag could help out here with the analysis, since explicitly programming the analysis in ocaml would take much longer and be much less convenient because of the explicit scheduling of calculation AND no abstraction from attributes
06:29:59 * earthy nods
06:30:10 <earthy> the explicit scheduling kills
06:30:21 <earthy> totally kills
06:30:24 <nlv11757_> and passing all the parameter to all these functions etc etc
06:30:42 <earthy> but think of how you'd generate the flowgraphs first
06:30:52 <earthy> then doing the analyses should come naturally
06:31:02 <earthy> (and you get the flowgraphs for other uses as well)
06:31:25 <nlv11757_> cause i will have to use flowgraphs anyhow, no matter what analysis i wish to do you mean?
06:32:06 <earthy> well, you won't be able to parallelize without understanding the data dependencies
06:32:14 <nlv11757_> right
06:32:20 <earthy> and these come from the dataflow graph.
06:32:25 <earthy> and the control flow graph
06:32:45 <nlv11757_> right, thats where banerjee comes into play and solving systems of equalities
06:32:50 <earthy> bingo
06:33:06 <nlv11757_> i hope making a flow graph of a C application will be feasible though
06:33:15 <earthy> now, the question ofcourse is, can you specify that equationsolving incrementally
06:33:27 <earthy> making flow graphs of C is easy
06:33:30 <nlv11757_> ok
06:33:31 <earthy> witness e.g. cflow
06:34:47 <nlv11757_> it has to be incrementally so i can change a little, see if it solves anything, etc without having to recompute it again and again to check if there are data dependencies in the way?
06:34:54 <nlv11757_> in the way of parallelization that is
06:35:09 <earthy> um, no
06:35:16 <earthy> it has to be incrementally specified, not solved
06:35:23 <earthy> solving is by running the AG
06:35:51 <earthy> and you want the equationsolver built up as an attribute
06:36:18 <nlv11757_> synthesizing the equationsolver function so to say
06:36:37 <earthy> in a sense
06:37:42 <nlv11757_> hmm
06:38:27 <nlv11757_> with equationsolving, do you mean the dataflow equations for a specific analysis?
06:38:40 <nlv11757_> the terminology is confusing me
06:39:46 <Lemmih> Processes don't get killed if the parent die?
06:41:48 <nlv11757_> the process that forked them?
06:42:40 <Lemmih> I'm using System.Process.
06:44:05 <nlv11757_> hmm affraid i cant help your there
06:44:06 <nlv11757_> -r
06:45:15 <Lemmih> Perhaps I could use hs-plugins instead of running 'runhaskell' (:
06:50:41 <nlv11757_> does haskell have a logical bitshift? i cant find it in Bits...
06:55:41 <JaffaCake> nlv11757_: convert to a Word type and shift
06:57:06 <nlv11757_> i am doing Int64, that doesnt matter?
06:57:40 <nlv11757_> just use word64 right hehe
07:09:32 <skew> uuag should really use LINE pragmas
07:10:03 <skew> and complain about constructs like "string"++@thoughtThisWasAnAttribute
07:11:14 <nlv11757_> if whatever you use after @ is not a field or attributes...it will warn afaik
07:11:36 <skew> no, the problem is if there an operator right before it grabs the @
07:11:53 <skew> so it parses as "string" ++@ thisReallyIsAnAttribute
07:12:02 <nlv11757_> is that so? i cant imagina
07:12:03 <nlv11757_> -a
07:12:05 <nlv11757_> +e
07:12:32 <nlv11757_> doesnt it just replace the @... with the correct stuff
07:14:11 <skew> it does if it parses it like that
07:14:17 <skew> but @ is a valid character in an operator
07:14:54 <skew> so if you don't leave a space between an operator and your @ then the @ is parsed as part of the operator
07:15:31 <CosmicRay> <johnsu01> What makes darcs bad for it?
07:15:36 <CosmicRay> <harsha> johnsu01: cause I think its written in Haskell?
07:15:39 <CosmicRay> #emacs
07:15:43 <nlv11757_> owww ok i see skew
07:16:00 <mflux_> cosmicray, bad for what?
07:16:10 <nlv11757_> obviously he knows what he's talking about that harsha dude
07:16:11 <CosmicRay> I don't know, I just joined the channel
07:16:53 <nlv11757_> hey is a "bitwise and" and a "bitwise logical and" the same?
07:17:14 <CosmicRay> heh
07:17:19 <nlv11757_> or is it the same difference with a bit shift and a logical bit shift
07:17:23 <CosmicRay> apparently they were talking about the kernel
07:18:12 <mflux_> well perhaps the argument was against a language that is not as widely known among the kernel developer community as C is
07:18:29 <skew> I think this is about replacing BitKeeper
07:20:10 <tromp> g'afternoon
07:20:24 <skew> good morning
07:20:25 <Lemmih> God eftermiddag.
07:20:29 <earthy> skew: it has to be parsed like that, or else you wouldn't be as flexible as haskell allows you to be
07:20:57 <skew> it would be nice to warn about that
07:21:30 <earthy> but only if the text directly following would match a field, right
07:21:32 <skew> you can always disambiguate by putting a space to one side or the other
07:22:24 <skew> UUAG tries to make @field act as much like an identifier as possible, but this break that a bit
07:22:59 <skew> I would apreciate LINE macros a lot more, really
07:23:06 <skew> it's easy to grep for ++@
07:24:53 <nlv11757_> so "bitwise and" and "bitwise logical and" are one and the same?
07:26:35 <tromp> yep
07:26:55 <tromp> there's no such thing as an arithmetic and :)
07:27:16 <tromp> for right shifts there is such a distinction
07:33:01 <dcoutts> JaffaCake: is it possible for a ghci .o package file to use symbols from the ghc rts? eg I have a bit of C code which calls hs_free_stable_ptr and I link that into the Haskell .a package which gets turned into the ghci .o file. When I load this package in ghci it says:
07:33:19 <dcoutts> Loading package glib-0.9.7.9 ... linking ... ghc-6.4: /usr/local/lib/gtk2hs/HSglib.o: unknown symbol `hs_free_stable_ptr'
07:33:27 <nlv11757_> crap, there is no (PrintfArg Int64)
07:34:23 <JaffaCake> dcoutts: that's a bug in 6.4, I think
07:35:04 <nlv11757_> Int64 is an instance of Int, but i can use it with printf
07:35:06 <nlv11757_> weird
07:35:19 <nlv11757_> PrintfArg Int does exist
07:35:41 <dcoutts> it's supposed to be able to find things in the rts by looking up in the 'self' symbol table via dlsym right?
07:35:46 <JaffaCake> dcoutts: but I just noticed it isn't merged
07:36:04 <dcoutts> merged?
07:36:05 <JaffaCake> no, there's a horrible hard-coded list of entries in the linker
07:36:13 <dcoutts> the SymX stuff
07:36:16 <JaffaCake> merged into the 6.4 branch, I mean
07:36:17 <JaffaCake> yep
07:36:33 <dcoutts> so it'll be in 6.4.1 then? :-)
07:36:54 <JaffaCake> yes
07:37:15 <dcoutts> cool, I'll tell people gtk2hs support for ghci will return in 6.4.1 :-)
07:37:37 <dcoutts> cheers
07:37:44 <JaffaCake> np
07:38:41 <musasabi> dcoutts: Has anyone thought of integrating cairo support into gtk2hs?
07:39:21 <musasabi> dcoutts: that could be very nice.. (there is a haskell cairo binding and some gtk-cairo stuff exists in C)
07:39:51 <dcoutts> musasabi, yes, we've been talking about it and talking to the hs-cairo author
07:40:23 <dcoutts> musasabi, hopefully a gtk2hs 1.0 feature, but we'll see how it goes
07:40:38 <musasabi> dcoutts: is there something specific needed to make it happen?
07:40:47 <dcoutts> musasabi, it'll get done quicker with more helpers! :-)
07:42:24 <musasabi> found the thread on gtk2hs-devel :-)
07:42:52 <dcoutts> musasabi, so if anyone's interested they should come talk to us on the gtk2hs-users list, it probably wouldn't require too much familarity with the gtk2hs code base, I think it's relatively stand alone, just needs someone to invest some time in making it happen
07:46:13 <musasabi> dcoutts: after reading the messages it seems to make sense to wait for a release of hs-cairo (with the new api), but a haskell cairo+gtk binding is something I would definitely like and use in the future.
07:48:13 <dcoutts> musasabi, want to help make it happen?
07:48:40 <dcoutts> (always looking for new recruits :-) )
07:52:36 <nlv11757_> is there something standard to produce a hex representation of an Int64, cause printf doesnt work on Int64
07:52:46 <nlv11757_> and i dont feel like writing myself :D
07:52:49 <musasabi> dcoutts: yes, but I don't know how much time I will have in may due to exams.
07:53:01 <xerox> OK, I refactored the Haskell Go People page!
07:53:01 <Itkovian> nlv11757_: use %llx ??
07:53:05 <xerox> @wiki HaskellGoPeople
07:53:06 <lambdabot> http://www.haskell.org/hawiki/HaskellGoPeople
07:54:29 <Itkovian> Hmm, I should join you someday. I've always wanted to play a game of Go, but alas, my other significant half doesn't very well agree with board games
07:54:45 <Itkovian> I am an absolute newbie though ...
07:54:51 <xerox> Add yourself!
07:55:09 <dcoutts> musasabi, well, if you find you have time (perhaps after exams) tell gtk2hs-devel you're thinking of looking into it
07:55:12 <Itkovian> having made one project for class in Haskell ... a small piece of a go game
07:55:42 <Itkovian> gotta go
07:55:45 <Itkovian> catch a train
07:55:46 <Itkovian> ttyl
07:58:17 <nlv11757_> itkovian must have not gotton the fact that i referred to the Text.Printf
07:58:30 <nlv11757_> cause %llx is not solving anything ofcourse
08:02:50 <musasabi> dcoutts: ok..
08:11:34 <shapr> hiya Paltas
08:11:56 <shapr> Paltas: Are you part of the Haskell DK coven?
08:12:16 <Paltas> shapr, No just interested in haskell. :)
08:12:28 <shapr> Ah, nifty, would you like the short intro to the channel and local touristy spots?
08:12:49 <Paltas> local touristy spots?
08:12:58 <shapr> Like the cool websites where you can find good info.
08:13:20 <shapr> I'm the unofficial cheerleader and greeter here on #haskell.
08:13:22 <Paltas> Yes if you have a good link collection somewhere it would be nice. :)
08:13:30 <Paltas> Oh thanks. :)
08:13:41 <shapr> (just don't ask about my cheerleader outfit, I'm a guy)
08:13:46 <shapr> Ok!
08:14:04 <Paltas> Are you swedish?
08:14:07 <shapr> First stop on the short tour is the channel topic, which points to the channel logs, and the learning page.
08:14:14 <CosmicRay> shapr: if I send some white smoke up a chimney, would you be the official cheerleader? :-)
08:14:15 <shapr> Nah, I'm from Alabama, but I live in Sweden.
08:14:33 <shapr> CosmicRay: You have a bad habit there, go change clothes!
08:14:37 * shapr snickers
08:14:38 <Paltas> Okay, just your last name I wondered about :)
08:14:45 <CosmicRay> heh
08:14:49 <shapr> Well, I changed my name a few years back, but that's another story entirely.
08:15:06 <shapr> I didn't know I'd be living in Sweden when I changed it.
08:15:09 <shapr> Aaaanyway....
08:15:18 <Paltas> Hopefully not anything to do with the authorities. ;-)
08:15:22 <shapr> heh, no!
08:15:31 <shapr> Though my next employer did ask me that...
08:15:37 <CosmicRay> Paltas: he probably used to be "Bubba" or something :-)
08:15:56 <Paltas> shapr, Okay. :) Sweden is also a nice place to be, just expensive alcoholics. :)
08:16:07 <Paltas> CosmicRay, Hehe, budda writes haskell hmmm.. :-)
08:16:08 <vegai> he was the son of King of Alabama, how disinherited him when he became the leader of a local band of ruffians
08:16:08 <shapr> (Interviewer: "Did you kill somebody?" Me: "I thought I was applying for a *programmer* job??")
08:16:14 <vegai> how->who
08:16:23 <Paltas> shapr, haha :)
08:16:35 <shapr> Paltas: happily, I drink about four times a year, so it's not a problem.
08:16:53 <shapr> Right, so...
08:16:57 <Paltas> shapr, else you would be travelling to germany/denmark very often. :)
08:17:00 <Paltas> oh more danes. :)
08:17:02 <vegai> I guessed wrong? =/
08:17:17 <shapr> The learning page has links to most of the good starting info, but it doesn't link to the Haskell Wiki, one of my favorite hangouts.
08:17:31 <shapr> It also doesn't link to CosmicRay's nifty Haskell news site, the Haskell Sequence.
08:17:49 <shapr> The Haskell Sequence is at http://sequence.complete.org/
08:18:00 <shapr> The Haskell Wiki is at http://www.haskell.org/hawiki/RecentChanges
08:18:02 <Paltas> shapr, I know the fundamentals in haskell by a university course, but stuff like IO and such things, don't I have too mutch knowledge about
08:18:13 <shapr> Lots of goodies on the Haskell Wiki, like http://www.haskell.org/hawiki/FundamentalConcepts
08:18:23 <Paltas> Cool. :)
08:18:25 <shapr> Well, this is a great place to expand your knowledge!
08:18:29 <CosmicRay> Paltas: the very best resource imho is Haskell: The Craft of Functional Programming, 2nd dead-tree edition
08:18:40 <Paltas> CosmicRay, Which I've read. by thomson
08:18:41 <Paltas> :)
08:18:53 <shapr> I learned from that book also.
08:19:05 <CosmicRay> Paltas: excellent.
08:19:09 <Paltas> A very nice book. :)
08:19:31 <shapr> Ok, that was the tour... like I said, it's short.
08:19:42 <shapr> Do you have any specific questions?
08:19:43 <Paltas> shapr, but thank you :)
08:20:08 <Paltas> shapr, not really. :) But I better start do something productive in haskell, so questions would be there. :)
08:21:04 <shapr> Ok, if you're looking for a particular library or whatever, ask us!
08:21:06 <Oejet> Paltas: Hejsa, are you studying at SDU?
08:21:12 <Paltas> Oejet, Yep. :)
08:21:27 <Paltas> Oejet, Taking Dm22 this semester.
08:22:14 <Oejet> Paltas: Nice, soon we will take over the Swedes and reclaim Halland, Skåne and Blekinge.
08:22:19 <Paltas> shapr, I'll :)
08:22:26 <Oejet> What's Dm22?
08:22:37 <CosmicRay> Oejet: what about scotland?
08:22:42 <Paltas> Oejet, Oh I thought you were studying at SDU too, it's the internal course code
08:23:19 <Paltas> Oejet, If we are lucky yes. :)
08:24:04 <Oejet> Paltas: Is it datalogisk matematik 22?   Are you learning Haskell in a course?
08:24:16 <Paltas> Oejet, Haskell and Prolog ..
08:24:38 <Paltas> Oejet, All computer science courses is named DMxx don't know why.. Matematical courses is named MM.
08:24:59 <Paltas> Oejet, Are you studying too?
08:25:38 <Paltas> Right now we are proving haskell programs by induction in the class, quite interesting. :)
08:25:42 <Oejet> Yes, at DTU.  Didn't learn Haskell there, though. :-(
08:26:04 <Paltas> Oejet, Okay, I think SDU is the only university in Denmark where we learn haskell but not sure ...
08:26:21 <Paltas> 80% of the students dumbs the course, mostly because of prolog is my guess
08:26:30 <Oejet> Heh.
08:27:30 <Paltas> Oejet, Are you studying "Diplom" or "Cevil"?
08:27:41 <Oejet> Civil.
08:27:46 <Paltas> Ok!
08:27:59 <earthy> hm. damn. my hasktags is broken
08:28:01 <Paltas> I'm datamatican but is supplying it to a B.Sc
08:28:33 <Paltas> Oejet, I bet it's IT-engineer?
08:29:15 <Oejet> Paltas: Yes, it's called informatics.
08:29:23 <Paltas> Oejet, Okay.
08:30:09 <nlv11757_> 80% of students fail functional programming course?
08:30:18 <Paltas> nlv11757_, and logical programming
08:30:21 <Paltas> nlv11757_, yes. :)
08:30:27 <nlv11757_> wow high percentage
08:30:44 <Paltas> nlv11757_, some of them because they are constructing a compiler for an imperative languages at the same time
08:30:46 <tuomov> drop out or don't pass?
08:30:54 <vegai> I was going to ask that too
08:30:57 <nlv11757_> are all participants ITers?
08:31:02 <Paltas> tuomov, don't pass, at the second time they normally pass.
08:31:08 <tuomov> wow.
08:31:08 <Paltas> nlv11757_, C.S. students all of them
08:31:11 <nlv11757_> darn
08:31:17 <tuomov> In this day and age that is quite unexpected...
08:31:27 <Oejet> Heh.
08:31:29 <Paltas> The former professor did like surprises during the exam, so maybe why too
08:31:30 <tuomov> here the requirements would have been dumbed down before allowing that to happen
08:31:42 <nlv11757_> i know in our Java course for example, we have a huge amount of informational people (dont ask, its not CS). They lower the average
08:32:32 <vegai> 80% failure rate means either too high expectation or bad professors
08:32:43 <tuomov> universities having "profit responsibility", i.e. having to produce certain amount of graduates to get funding and so on
08:32:54 <Oejet> vegai: Or underqualified students?
08:33:03 <nlv11757_> noj, in our implementation of programming languages course there that same rate, but it's not the course
08:33:06 <nlv11757_> it's the student
08:33:06 <nlv11757_> s
08:33:15 <vegai> Oejet: probably not
08:33:21 <Paltas> the students is on 3 or 4 semester then they are taking the course
08:33:33 <Paltas> so their level of abstraction should be okay
08:34:13 <Paltas> But the compiler thing takes alot of times so many of the students gives the functional programming course less priority.
08:34:16 <vegai> e.g. if you expect someone to grasp monads in 4 months, that might be asking a bit too much
08:34:26 <vegai> but I don't know about that course, so..
08:34:31 <nlv11757_> the compiler thing...:) what do you mean with that
08:34:36 <nlv11757_> getting to know hugs/ghci?
08:34:41 <Paltas> understandable the compiler course is 15 ECTS and the func. is 7,5 ECTS.
08:34:56 <Paltas> <Paltas> nlv11757_, some of them because they are constructing a compiler for an imperative languages at the same time
08:35:10 <Paltas> which requires alot of time
08:35:21 <nlv11757_> if it also includes, lexing, parsing, code generation, etc
08:35:25 <Oejet> I can imagine.
08:35:27 <nlv11757_> i bet it will take time
08:35:31 <Paltas> (I've that course this semester, but i'll really try to pass them both)
08:35:35 <Paltas> nlv11757_, and optimization
08:35:36 <Paltas> yes
08:35:59 <Oejet> Ouch.  What language?
08:36:12 <Paltas> "TONY"
08:36:17 <Paltas> a language specified by the professor
08:36:33 <Paltas> http://www.imada.sdu.dk/~kslarsen/dm18/Projekt/del2.pdf
08:36:39 <Paltas> the gramma if you are interested. :)
08:36:51 <nlv11757_> we just had to adjust a code generator to do an optimization using Marker Pointer instead of the Stack Pointer for referencing lexical levels. Doing type inferencing etc.
08:36:52 <Paltas> we'll get a working compiler, quite interesting
08:36:54 <nlv11757_> parsing was different course
08:37:02 <tuomov> they should write that compiler in haskell.. :)
08:37:12 <tuomov> C is too painful
08:37:13 <Paltas> nlv11757_, Okay, but it also counts a half of a semester.. :)
08:37:17 <nlv11757_> ours was in UUAG :)
08:37:26 <nlv11757_> ow ok, im talking 2 months time here
08:37:35 <Paltas> tumm, we do it in C ... but in haskell would be very very exciting. :)
08:37:43 <Paltas> nlv11757_, UUAG?
08:37:58 <nlv11757_> the compiler was in UU Attribute Grammars
08:38:18 <nlv11757_> Attribute Grammar system from my university
08:38:29 <Paltas> aha. Which university did you graduate from?
08:38:42 <nlv11757_> im in the middle of my thesis project :) so not graduated yet
08:39:05 <Paltas> Ok, but which university anyway? :)
08:39:22 <nlv11757_> University of Utrecht
08:39:26 <nlv11757_> Netherlands
08:39:59 <Paltas> Hmm... Heard of that university before, any famous persons from there?
08:40:07 <earthy> um, nlv, that should read Universiteit Utrecht in English ;P
08:40:17 <Paltas> well I gotta chach a bus, ttyl ..
08:40:18 <earthy> paltas: S. Doaitse Swierstra?
08:40:20 <nlv11757_> Doaitse Swierstra, Daan Leijen
08:40:27 <earthy> Johan Jeuring?
08:40:30 <nlv11757_> uhm lets see Arthur van Leeuwen
08:40:32 <nlv11757_> ;)
08:40:34 <Paltas> Dijekstra?
08:40:34 <earthy> Lambert Meertens? :)
08:40:44 <earthy> not Dijkstra though, he was at Eindhoven for a while
08:40:52 <earthy> and then in Austin somewhere
08:40:58 <Paltas> okay.. but i really gotta go.. g'day.
08:41:03 <nlv11757_> bye
08:41:03 * earthy waves
08:41:12 <earthy> maybe I should too
08:41:23 <nlv11757_> whyyyyyy didnt the author of Printf implement Int64 for me
08:41:36 <nlv11757_> hehe, your workday is over at 17:00 right? :P
08:41:52 <earthy> huh? what? workday over?
08:41:56 <earthy> I'm a PhD student!
08:42:01 <earthy> my workday is never over
08:42:07 <earthy> I just slack for parts of it. :)
08:42:11 <earthy> +off
08:42:23 <musasabi> nlv11757_: doesn't it have Integer?
08:42:24 <nlv11757_> ow right, even worse than me :)
08:42:30 <musasabi> nlv11757_: so Int64 is trivial to do.
08:43:00 <Muad_Dibber> Arthur van Leeuwen isn't famous yet. He will be though
08:43:08 <earthy> um.
08:43:13 <earthy> nope.
08:43:20 <earthy> not on my to do list :)
08:43:39 <earthy> and not going to happen, the way things are going
08:43:39 <nlv11757_> musasabi, i dont think that will help
08:43:50 <musasabi> nlv11757_: why?
08:43:54 <Muad_Dibber> life isnt purely functional: it has sideeffects
08:43:59 <nlv11757_> most people die unknown Muad_Dibber :)
08:44:14 <nlv11757_> printf "%x" (toInteger (-1 :: Int64))
08:44:17 <Muad_Dibber> i dont plan on dying :P
08:44:29 <nlv11757_> it's happening anyway Muad_Dibber
08:44:44 <nlv11757_> im sorry
08:44:45 <nlv11757_> :P
08:44:57 <nlv11757_> musasabi, printf "%x" (toInteger (-1 :: Int64)) will fail
08:45:14 <nlv11757_> or wasnt that what you meant?
08:45:30 <musasabi> nlv11757_: %x does not work for negative numbers.
08:45:51 <musasabi> nlv11757_: you probably want Word64.
08:45:53 <nlv11757_> :/ then why does it work in ocaml
08:46:00 <Muad_Dibber> i should've started studying medicins :P
08:46:01 <TheHunter> @quote ghc
08:46:02 <lambdabot>   Illegal binding of built-in syntax
08:46:19 <nlv11757_> that was my second choice actually Muad_Dibber
08:46:28 <nlv11757_> if i ever should fail as a CS
08:46:28 <nlv11757_> :D
08:46:55 <Muad_Dibber> (c:=
08:48:14 <nlv11757_> musasabi, it seems that Int64.format "%x" in OCaml simply prints the hexdecimal form of 64bit integers
08:48:27 <nlv11757_> so -1 :: Int64 becomes "fffffffffffffff"
08:48:32 <nlv11757_> ow plus another f
08:49:14 <musasabi> nlv11757_: that sounds quite non-intuitive...
08:49:33 <musasabi> nlv11757_: Word64 works like that in haskell.
08:50:20 <nlv11757_> but then it wouldnt work with negative 64 bit integers right? or would it just misinterpret the most significant bit...causing no trouble when viewing upon the hexadecimal version
08:51:13 <musasabi> word64 == unsigned 64bit integer.
08:51:33 <nlv11757_> bitwise it looks exactly the same as the Int64 right?
08:51:49 <musasabi> nlv11757_: I think the correct output for "%x" (-1 :: Int64) would be "-1" ;)
08:51:50 <nlv11757_> only different interpretation, which doesnt matter when pretty printing
08:52:10 <nlv11757_> @plugs  printf "%x" (toInteger ((fromIntegral (-1 :: Int64)) :: Word64))
08:52:15 <lambdabot> Variable not in scope: `printf'
08:52:19 <nlv11757_> @plugs  Text.printf "%x" (toInteger ((fromIntegral (-1 :: Int64)) :: Word64))
08:52:21 <lambdabot> Variable not in scope: `Text.printf'
08:52:45 <nlv11757_> @plugs  Text.Printf.printf "%x" (toInteger ((fromIntegral (-1 :: Int64)) :: Word64))
08:52:47 <lambdabot> Variable not in scope: `Text.Printf.printf'
08:53:08 <nlv11757_> @version
08:53:09 <lambdabot> lambdabot 2p359, GHC 6.4 (OpenBSD i386)
08:53:09 <lambdabot> darcs get http://www.cse.unsw.edu.au/~dons/lambdabot
08:53:12 <nlv11757_> hmm
08:53:15 <musasabi> nlv11757_: that produces "ffffffffffffffff"
08:53:34 <nlv11757_> it does, and that's exactly what the Int64.format "%x" will produce
08:53:55 <nlv11757_> the correct hexadecimal view of -1 right?
08:54:35 <shapr> TheHunter: btw, I like your idea of The GHC Error Scavenger Hunt game.
08:54:37 <musasabi> Well depends on how we define the correct hexadecimal view.
08:54:55 <musasabi> nlv11757_: but I agree that the current behavior is inconsistent.
08:55:57 <musasabi> nlv11757_: you could make an instance declaration for printf for Int64.
08:56:20 <nlv11757_> yeah, and just coerce it to Word64 before i do :P
08:57:40 <Arsilan> windows are the best
08:57:46 <Arsilan> MSn are too
08:58:00 <Arsilan> Mac suks
08:58:00 --- mode: ChanServ set +o shapr
08:58:00 <nlv11757_> ..
08:58:10 <nlv11757_> ..
08:58:12 <shapr> Arsilan: that was a hint...
08:58:32 <nlv11757_> as it should be ;)
08:58:36 <Arsilan> What do you mean, shapr
08:58:39 <earthy> subtle one though. ;)
08:58:42 <shapr> Arsilan: Heavily emotionally loaded comments tend to fly like a lead balloon around here.
08:58:47 <nlv11757_> maybe too subtle
08:59:08 <earthy> I'll leave you guys to play though :P
08:59:09 <nlv11757_> and led balloons hurt when they hit you
08:59:17 <nlv11757_> haha finally some free time earthy
08:59:25 <Arsilan> Yeah but I am just saying my opinion
08:59:26 <shapr> One of the best approaches to programming involves writing unit tests. Otherwise, how can you quantify what you've written?
08:59:38 <shapr> Yes, but why? What's good or bad about those things?
08:59:38 <earthy> free time? nah, time to go shop for food and cook for me and the gf
08:59:59 <nlv11757_> aha thats why i save time only eating microwave stuff :D
09:00:01 <earthy> and then clean up the small workroom upstairs
09:00:14 <shapr> If you said that "It's easier to get tech support for windows than for linux", I could maybe understand that (though I would disagree).
09:00:15 <earthy> nlv: cooking relaxes me. a bit. ;)
09:00:29 <Arsilan> well david arent here, and it was wery boring
09:00:29 <nlv11757_> aha
09:00:30 <earthy> bbl
09:00:32 <shapr> If you said that all your friends are on MSN, so irc isn't so interesting, I could understand that.
09:00:33 <nlv11757_> well have fun
09:00:52 <shapr> Arsilan: There's an ancient Chinese curse about living in interesting times.
09:01:00 <Arsilan> well all my friends are there
09:01:02 <Arsilan> in MSn
09:01:07 <nlv11757_> boring? we were talking about 64bit integers and correct printf's of them
09:01:08 <nlv11757_> :)
09:01:26 <Arsilan> well dosn't understnd anything of it
09:01:47 <shapr> Arsilan: Just because something is boring to you doesn't mean it's boring to everyone.
09:02:13 <Arsilan> you are right,
09:02:32 <Arsilan> But I always says stuff like that when I get bored
09:02:38 <Arsilan> Not else
09:02:44 <nlv11757_> you should work on that :P
09:02:48 <Arsilan> But MAc are boring
09:02:52 <Arsilan> Realy
09:02:56 <shapr> Why not try to learn stuff when you're bored?
09:03:00 <shapr> What's boring about macs?
09:03:00 <Arsilan> I meant it 100%
09:03:12 <skew> or go outside ...
09:03:14 <Arsilan> everything
09:03:19 <shapr> like what?
09:03:19 <Arsilan> the mouses shap
09:03:22 <nlv11757_> @type Text.Printf.toUPrintf
09:03:27 <lambdabot> bzzt
09:03:31 <musasabi> Yes, machines that work can be boring as compared to machines which don't work.
09:03:42 <shapr> But you can put those mice on windows boxes as well.
09:03:47 <shapr> And you can put other mice on mac.
09:03:51 <shapr> So, anything else?
09:04:06 <Arsilan> yeah but the right clic dont work on mac
09:04:15 <Arsilan> it does on windows
09:04:16 <nlv11757_> lol
09:04:16 <shapr> Yes it does, you can hold down the flower and click.
09:04:30 <shapr> For that matter, the middle click doesn't work on windows.
09:04:39 <shapr> And the fourth and fifth buttons rarely work correctly on windows.
09:04:56 <shapr> And windows has almost zero support for fifteen or more buttons like you find on the 3D mice.
09:05:11 <nlv11757_> even from my ghci i cant get the type of Text.Printf.toUPrintf
09:05:12 <nlv11757_> :S
09:05:17 <Arsilan> in windows you have a men8u
09:05:21 <Arsilan> Not in mac
09:05:27 <shapr> Yes, you do have a menu in mac.
09:05:31 <skew> nlv11757_: are you sure that exists?
09:05:34 <Arsilan> And all the programs are opened at same time
09:05:41 <shapr> What?
09:05:45 <nlv11757_>  Warning: No explicit method nor default method for `Text.Printf.toUPrintf'
09:05:50 <nlv11757_> hehe i guess it has to then :D
09:05:56 <shapr> Arsilan: I think you should use a mac for a week or two before you start saying stuff about them :-)
09:06:13 <Arsilan> I have used it in two wekks
09:06:21 <Arsilan> I made my homepage theier
09:06:32 <shapr> I see.
09:06:37 <Arsilan> www.Arsilanhamid.1go.dk
09:06:47 <nlv11757_> you waste an awfull lot of your time being bored with mac stuff Arsilan
09:06:59 <shapr> Interesting.
09:07:20 <Arsilan> no, I dont prejuge anything
09:07:36 <Arsilan> It took my much longer time
09:07:49 <Arsilan> becaus it was mac i was working on
09:07:58 <Arsilan> all my class agreed
09:07:59 <nlv11757_> adaption takes time
09:08:10 <Arsilan> even the clever ones
09:08:15 * shapr sighs
09:08:20 <nlv11757_> hehe nm
09:08:25 <nlv11757_> try #boring
09:08:28 <tuomov> I couldn't get anything done on a mac... or windows
09:08:56 <shapr> Ok then, in the future, if you want to make inflammatory statements, I'll want to kick you off the channel.
09:09:16 <shapr> But if you want to talk about Haskell stuff, I'll be happy to talk more about it.
09:09:46 --- mode: shapr set -o shapr
09:10:13 <shapr> Arsilan: have you tried to learn Haskell?
09:10:19 <shapr> We have a lovely intro.
09:10:39 <Arsilan> no
09:10:50 <shapr> Would you like to try the intro?
09:10:50 <Arsilan> but gotta go
09:10:54 <shapr> Ok, cya.
09:10:57 <Arsilan> see you gys
09:11:05 <Arsilan> enjoied talking with you
09:11:21 <skew> ?
09:11:26 <shapr> I hope I didn't overreact :-/
09:11:35 <shapr> skew: he's a high school kid
09:11:35 <nlv11757_> haha
09:11:48 <nlv11757_> until what age are you on high school?
09:12:00 <nlv11757_> (different system here)
09:12:05 <skew> I think about 18 or so
09:12:14 <shapr> skew: Not that I want to imply that high school kids necessarily are difficult.
09:13:03 * shapr is grumpy after some earier flaming on #perl6
09:13:14 <nlv11757_> haha you were being flamed
09:13:22 <shapr> Did you see it?
09:13:34 <nlv11757_> no i forgot the question mark
09:13:36 <nlv11757_> haha you were being flamed ?
09:13:48 <shapr> Sort of, yeah.
09:13:55 <shapr> But I'd rather focus on productive stuff.
09:14:01 <shapr> skew: written any code lately?
09:14:33 <skew> A bit. I'm working on the C generation for my DSL
09:14:54 <shapr> Sounds interesting. I wonder if Knit has useful ADTs for C generation.
09:16:18 <shapr> How are you designing your DSL?
09:16:26 <skew> oh, I already did that
09:16:48 <skew> I talked about the problem for a long time, then made an interpreter
09:16:55 <shapr> Oh, cool.
09:18:09 <vidvandre> I'd like to try the lovely intro :)
09:18:22 <skew> which one is that?
09:18:30 <shapr> The HaskellDemo?
09:18:42 <shapr> Of course, I think it's lovely because I wrote most of it...
09:18:45 <vidvandre> dunno.. you just mentioned a lovely intro to haskell
09:19:12 <shapr> http://www.haskell.org/hawiki/HaskellDemo
09:19:17 <shapr> What do you think?
09:19:23 * TFK takes another look at the HaskellDemo
09:19:53 <vidvandre> nice colours
09:20:15 <TFK> hscolour can do more :3
09:20:28 <nlv11757_> hot damn chocolate tastes good if you didnt have it in 4 weeks
09:20:42 <shapr> TFK: show us a demo!
09:21:00 <TFK> I will, tomorrow, when I figure out CSS and fix this <pre> business >_<
09:22:25 <shapr> ok
09:24:12 <shapr> hiya alec
09:24:20 <shapr> How's code?
09:24:55 <TFK> Ah, did I brag to you about my shiny new books?
09:25:04 <vidvandre> shapr, it's a nice intro.. or demo :)
09:25:24 <shapr> Cool, if you have any problems, please tell me.
09:25:27 <shapr> TFK: oh tell us!
09:26:08 <TFK> Books. Shiny. The Mythical Man Month, CatB, The Pragmatic Programmer, Code Complete.
09:26:18 <shapr> CatB?
09:26:27 <shapr> I like the other choices.
09:26:37 <TFK> The Cathedral and the Bazaar (you *have* to abbreviate open source names ;-)
09:26:42 <shapr> Oh right.
09:26:59 <TFK> Well, I wonder how Code Complete will transfer to FPL languages.
09:27:11 <dcoutts> TFK: where can I find out more about hscolour ?
09:27:37 <TFK> dcoutts, ftp://ftp.cs.york.ac.uk/pub/haskell/contrib/hscolour-1.1.tar.gz
09:27:42 <dcoutts> ta
09:27:56 <TFK> Written by Dr. Malcolm Wallace: http://www-users.cs.york.ac.uk/~malcolm/
09:28:04 <dcoutts> right
09:33:42 <dcoutts> it doesn't appear to have a license
09:35:50 <shapr> dcoutts: You could ask malcolm when he's online.
09:36:11 <dcoutts> I'll send him an email
09:41:16 <TFK> Yikes. If I fix with <pre> business tomorrow, the pastebin will actually be functional!
09:44:49 <musasabi> Did GHC 6.2.2 have Data.Monoid?
09:45:29 <musasabi> seems so.
09:47:31 <vidvandre> TFK, what <pre> business ?
09:48:33 <SyntaxNinja> 'morning
09:50:56 <TFK> The browser renders <pre> tags with a different font and all. Thus my line enumeration is misalligned. Maybe I could <pre> the enumeration as well, but I'd like to have more control over the final 'product'.
09:52:44 <KrispyKringle> TFK: this is a pastebin written in Haskell?
09:53:21 <TFK> Depends if you can call my code "Haskell" ;-)
09:53:27 <KrispyKringle> hehe
09:53:28 <KrispyKringle> thats ok
09:53:38 <KrispyKringle> im struggling with stupid parsing errors now, for my haskell wiki ;)
09:53:50 <KrispyKringle> all the high and mighty concept stuff works. but the silly parsing is semi-broken.
09:53:57 <TFK> Oh, another Haskell Wiki? Are you familiar with Flippi?
09:54:05 <KrispyKringle> yeah, i saw it.
09:54:15 <KrispyKringle> Mine does something Flippi doesnt ;)
09:54:22 <KrispyKringle> Flippi probably does five things mine doesnt. :P
09:54:34 <TFK> Oh, competition!
09:55:05 <SamB> shapr: is it true that you will not discuss patch-theory with people who do not really understand commutation?
09:55:34 <KrispyKringle> TFK: http://k.af0.net/~dan/cgi-bin/wiki.cgi/Start
09:55:51 <TFK> COLORS! :D
09:56:04 <KrispyKringle> CSS ;)
09:56:19 * TFK wants
09:56:27 <KrispyKringle> you want the CSS?
09:57:12 * vincenz cackles as he works on his templates
09:57:24 <TFK> Erm, I want to do stuff like the CSS Zen Garden :D
09:57:31 <KrispyKringle> yeah, that stuff is hot
09:57:43 <KrispyKringle> i just added basic div wrappers so the whole thing can be externally styled, though.
09:58:07 <KrispyKringle> http://k.af0.net/~dan/repos/wiki_development/wiki.css
09:58:22 <TFK> Hmm, you use html as markup, I see
09:58:55 <KrispyKringle> more or less. it's not *real* html.
09:59:16 <TFK> Usually wikis just sniff out TitlesSuchAsThese.
09:59:18 <KrispyKringle> i did that for two reasons. first, it's slightly easier to parse, because all tags are within < >, and second, it seems better because its more familiar (at least to me).
09:59:22 <KrispyKringle> Yeah, I know.
09:59:23 <KrispyKringle> I find that annoying.
09:59:25 <KrispyKringle> *shrug*
09:59:28 <TFK> heh
09:59:36 <KrispyKringle> The main point was to do that page rank kinda thing. The parsing is sorta temporary.
09:59:59 <KrispyKringle> The thing that pisses me off about thew ay I wrote the parser right now is that it doesn't allow one to have paragraphs within tags. i gotta fix that.
10:00:11 <KrispyKringle> so im meditating over parsec at the moment ;)
10:00:23 <KrispyKringle> some of the code is also kinda ugly, so im working on that.
10:00:32 <TFK> Ugly code bad, food good.
10:00:37 <KrispyKringle> heh
10:00:39 <TFK> erm, pretty code good.
10:00:44 <TFK> Well, you get the idea ;-)
10:00:48 <KrispyKringle> its not that bad.
10:00:49 <KrispyKringle> :P
10:01:02 <TFK> That's what they all say (including yours truly)
10:01:16 <KrispyKringle> heh
10:01:22 <KrispyKringle> well, at least it all wraps to 80 chars.
10:01:44 <TFK> Heh. My longest line is 150+
10:02:02 <KrispyKringle> for some really annoying reason, though, i can't get haddock to generate any documentation on this
10:02:22 <TFK> what seems to be the problem?
10:02:30 <TFK> I should get haddoc myself...
10:03:13 <KrispyKringle> i dont know. it just doesn't generate the interface files.
10:03:24 <KrispyKringle> ive never used it before, so im probably doing something wrong.
10:03:38 <TFK> Unless it makes errors pass silently.
10:03:49 <KrispyKringle> yeah
10:03:56 <TFK> How are you calling it?
10:04:26 <KrispyKringle> haddock -D foo.hs, i think.
10:04:30 <KrispyKringle> this was last night.
10:04:47 <TFK> I'll try that on my own code
10:04:54 <KrispyKringle> wow. my code just balooned up from 500 lines to 800.
10:04:59 <KrispyKringle> how'd i pull that one off?
10:05:17 <nlv11757_> hooray, finally my pretty printer for C is finished and i can go home :D
10:06:50 <basti_> hi
10:07:04 <TFK> KrispyKringle, an invisible army of killer coder ninja monkeys! :O
10:07:13 <vincenz> nlv11757_: prettyprinter for c?
10:07:25 <nlv11757_> :O its already 2.5 mb without doing anything lol
10:07:50 <vincenz> nlv11757_: so you parse c into ast and then pretty print it?
10:08:05 <vincenz> this at all related to cil?
10:08:11 <nlv11757_> yeah
10:08:33 <vincenz> ah good
10:08:38 <vincenz> elsa or cil?
10:08:46 <vincenz> I think the elsa prettyprinter needs some major work
10:08:53 <SyntaxNinja> ninja monkeys!
10:09:24 * vincenz goes back to his templates that allow him to do cool functional stuff in c++
10:09:25 <nlv11757_> im using cil as a frontend to parse c into a datatype, then i wrote a plugin so it dumps the ast to a file....i then read it into my AG program and i translated the CIL C pretty printer so i can print out C again from within my AG program
10:09:32 <nlv11757_> so i dont have to go back to ocaml/cil to do it
10:09:47 <vincenz> AG?
10:09:53 <nlv11757_> Attribute Grammar
10:10:07 <vincenz> written in haskell..?
10:10:18 <nlv11757_> http://catamaran.labs.cs.uu.nl/twiki/st/bin/view/Center/AttributeGrammarSystem
10:10:28 <vincenz> ah, stratego
10:10:32 <nlv11757_> no
10:10:34 <nlv11757_> not stratego :)
10:10:34 <Philippa_> KrispyKringle: doing something Flippi doesn't isn't hard :-)
10:10:51 <nlv11757_> stratego is just a means to match an rewrite etc
10:11:22 <nlv11757_> Attribute Grammar system i use has Haskell as its host language
10:11:54 <vincenz> what do you use it for?
10:12:10 <TFK> Uh-oh.
10:12:20 <TFK> Can I decompile haskell code?
10:12:28 <TFK> err, compiled haskell code
10:12:53 <mwc> Is -fno-prune-tydecls deprecated?
10:12:57 <Heffalump> TFK: not feasibly.
10:13:12 <TFK> Great. Say bye-bye to my nice pastebin code.
10:13:38 <mwc> I assume it's fair to delete from the makefile for greencard given that GHC doesn't recognize it
10:13:39 <nlv11757_> attribute grammars provide a nice means to; you can define semantics of ast/trees very nice in terms of attributes and how these attributes relate to eachother...thanks to haskell as the host language...attributes computed from other etc can be circular
10:14:09 <vincenz> nlv11757_: aren't you basically reinventing stratego with haskell?
10:14:12 <nlv11757_> prevents you from writing functions with megahuge amount of parameters, also very easy to add things...just add a new attribute
10:14:28 <nlv11757_> haha dude, drop the stratego thing. it's not the same as AG :)
10:14:31 <TFK> This will teach me to never input commands that other people tell me without browsing --help first...
10:14:46 <nlv11757_> stratego is just an untyped means to match and rewrite using strategies
10:14:57 <vincenz> nlv11757_: and AG is another way to do transformations
10:14:59 <Philippa_> whereas AG's, er, typed?
10:15:18 <vincenz> to be honest, I fail to see the difference
10:15:20 <nlv11757_> no Philippa, is just told him what stratego was...that doesnt mean AG is the opposite
10:15:36 <Philippa_> nlv11757_: it's a matching-and-rewriting system though
10:15:45 <nlv11757_> stratego yes
10:15:49 <vincenz> ag too
10:15:53 <nlv11757_> ag is more
10:16:03 <vincenz> how so?
10:16:06 <Heffalump> stratego is a rewriting system, AGs are semantic processing systems
10:16:17 <Heffalump> quite different philosophies and capabilities
10:16:28 <Heffalump> in Stratego doing semantic computation is essentially a hack
10:16:36 <Heffalump> in an AG system doing rewriting is quite hacky
10:16:43 <vincenz> Heffalump: well...semantic stuff like what
10:16:45 <nlv11757_> what i said, semantics of trees is more than what stratego does
10:16:53 <nlv11757_> like compiling
10:17:01 <vincenz> nlv11757_: compiling is basically rewriting
10:17:14 <nlv11757_> try to do it nice and maintainable with stratego
10:17:18 <Heffalump> like type checking
10:18:23 <Philippa_> and they're all just fold-on-crack, but hey
10:18:25 <nlv11757_> semantics could mean type_checking and code_generation side by side
10:18:32 <nlv11757_> things could be cyclic
10:18:38 <nlv11757_> stratego doesnt cut it there
10:18:47 <Heffalump> Philippa_: how is rewriting fold-on-crack?
10:18:53 <Heffalump> nlv11757_: stratego does have fix-point computations?
10:18:56 <Heffalump> s/?//
10:19:24 <nlv11757_> limited to none afaik, but i worked with it 1 year ago, maybe the put it in
10:19:25 <nlv11757_> i dont know
10:19:29 <nlv11757_> for sure
10:19:51 <Philippa_> Heffalump: give or take your strategy, you're going to end up doing something that looks a step or two removed from a generalised fold on a tree, graph or similar
10:20:23 <nlv11757_> vincenz, i suggest try writing a typeinferencer using AG and stratego, you'll know the difference
10:20:26 <nlv11757_> now im off
10:20:30 <nlv11757_> later
10:20:34 <Philippa_> a lot of type checking really does look like a tree fold
10:20:55 <Heffalump> an AG is a tree fold using lazy HOFs
10:20:57 <vincenz> bye nlv11757_
10:21:08 <Philippa_> Heffalump: see! Fold-on-crack! :-)
10:21:14 <Heffalump> yes, I agree about AGs.
10:21:21 <Heffalump> I disagree about Stratego/rewriting
10:21:32 <Heffalump> fold doesn't allow you to pattern match
10:21:43 <Heffalump> which is a fundamental part of rewriting
10:22:13 <SyntaxNinja> anyone know how twiki compares to moinmoin?
10:22:20 <Philippa_> For the right strategies I suspect I could find ways to fake it if bored enough
10:22:24 * SyntaxNinja has used moinmoin and read about twiki
10:22:30 <SamB> what is twiki? is it written in PHP?
10:22:52 <SyntaxNinja> http://www.twiki.org/
10:22:54 <Heffalump> "For the right strategies" is cheating :-)
10:23:19 <Heffalump> and I don't think you could fake it for even a simple one pass rewrite without compiling the rewrite rule into something horrific
10:23:31 <Philippa_> see "if bored enough"
10:23:36 <Philippa_> I wouldn't /want/ to
10:24:25 <Heffalump> you could make any tree computation a fold by that approach
10:24:27 <Philippa_> but yeah. After that most of the crack would be successive applications etc etc. Satisfied? I /was/ taking the piss ;-)
10:24:35 <Heffalump> :-p
10:27:49 <SamB> Okay, twiki is written in Perl, so it is probably unreadable...
10:28:06 <Philippa_> heh
10:28:25 * Philippa_ really really ought to polish the version of Flippi on her HD, release it and get people to fill in all the boring syntax stuff
10:29:07 <SamB> note that this is compared to Python, not C++ or something like that.
10:29:27 <Philippa_> it's a web thing, who the hell'd use C++ anyway?
10:29:38 <SamB> insane people?
10:30:20 <SamB> the same people who write entire games in C++?
10:30:27 <SamB> well, probably not.
10:31:39 <Philippa_> there's generally a reason for writing games in C++ - most of the languages that can match it for speed either have PITA FFIs or a model that doesn't work too good for some of the important layers
10:34:37 <vincenz> ocaml :)
10:34:55 <vincenz> Philippa_: embedded systems use c++
10:35:27 <Philippa_> vincenz: any FFI worse than simply #include <foo> counts as a PITA for most C++ coders :-)
10:36:48 <SamB> why would you write an entire game in C++ just because you want it to run fast? how would that work?
10:37:14 <vincenz> PITA?
10:37:30 <mwc> pain in the ass
10:37:34 <SamB> @dict PITA
10:37:36 <lambdabot> Supported dictionary-lookup commands:
10:37:36 <lambdabot>   @all-dicts @devils @easton @elements @foldoc @gazetteer @hitchcock @jargon
10:37:36 <lambdabot>  @lojban @prelude @vera @web1913 @wn @world02
10:37:36 <lambdabot> Use "@dict-help [cmd...]" for more.
10:37:40 <Philippa_> SamB: it'd work because if C-like languages are what you know best then you're not constantly sweating about shooting yourself in the foot. If it helps any you're allowed to embed a scripting language to control the gameplay
10:37:43 <SamB> @vera PITA
10:37:46 <lambdabot> *** "pita" vera "Virtual Entity of Relevant Acronyms (Version 1.9, June
10:37:46 <lambdabot> 2002)"
10:37:46 <lambdabot> PITA
10:37:46 <lambdabot>      Pain In The Anatomy / Ass (telecommunication-slang, Usenet, IRC)
10:38:05 <vincenz> Philippa_: well...that is what I meant, include
10:38:24 <SamB> Philippa_: Embed?!?
10:38:33 <Philippa_> vincenz: unless it takes C and C++ headers or you've got bindings for everything, it ain't good enough for a lot of folks
10:38:41 <vincenz> most people use c++ for embedded cause most software for embedded is done in c++, plus you can get guarantees on execution time, can't have that with functional languages due to the gc
10:39:04 <SamB> vincenz: I would probably use C...
10:39:17 <Philippa_> yeah. Even they don't worry too much about using C++ for webapps in their embedded kit though
10:39:25 <vincenz> SamB: c doesn't scale well to big projects
10:39:31 <SamB> C++ does?
10:39:32 * Philippa_ wasn't saying "who the hell'd use C++" generally
10:39:35 <wilx> I cannot fathom how can anybody choose C over C++.
10:39:38 <Philippa_> better than C
10:39:38 <vincenz> SamB: when I Say embedded, that includes higher level platforms than pics
10:39:45 <wilx> Even without templates and classes C++ is better C :)
10:39:50 <vincenz> yip
10:39:55 <Philippa_> wilx: not being able to rely on how certain features're implemented across compilers
10:40:04 <wilx> Huh, like what?
10:40:08 <Philippa_> exceptions
10:40:14 <SamB> C is more explicit.
10:40:24 <wilx> Besides that relying on implementation of things is wront at first place.
10:40:28 <wilx> Explicit in what?
10:40:29 <SamB> if you want assembly, C is your man.
10:40:44 <wilx> If you want assembly you do assembly :)
10:41:01 <Philippa_> wilx: the various means of implementing exceptions have seriously varying cost profiles
10:41:02 <basti_> but assembly isnt portable.
10:41:02 <mwc> C++ can be written safely, assuming you follow rules like RIAA, but then you're basically programming in something on top of C++ with a manual wrapping job
10:41:13 <SamB> wilx: than why is Linux written in C?
10:41:22 <Philippa_> yeah. RAII would be /so/ much better off as just execute-around
10:41:28 <basti_> because C++ wasn't "en vogue" back then.
10:41:33 <wilx> :)
10:41:35 <Philippa_> or even standardised
10:41:35 <Heffalump> Linus doesn't like C++
10:41:43 <mwc> C++ need some runtime stuff too
10:41:44 <wilx> And because there were no decent C++ compilers back then.
10:41:45 * basti_ thinks a large part of the C++ vogue is due to the 2 + and the "C"
10:41:59 <Philippa_> more the C
10:42:06 <mwc> C is a systems programming language. Good at it too.
10:42:06 <basti_> actually i do not think C++ is any better C
10:42:11 <SamB> really, C++ is not good for writing Linux in.
10:42:12 <vincenz> basti_: oh?
10:42:22 <basti_> its a little more powerful, but the price you're paying...
10:42:24 <mwc> C++ is C with enough niceties to make programming low level apps tolerable
10:42:26 <Heffalump> what language should one write commercial compilers in, do you think?
10:42:27 <vincenz> basti_: what price?
10:42:32 <basti_> readability?
10:42:33 <vincenz> basti_: c++ has no price over c
10:42:45 <vincenz> if anything you can use templates to bundle funcitonality
10:42:48 <SamB> Heffalump: one should avoid writing commercial compilers
10:42:50 <basti_> c++ programs usually are unreadable.
10:42:50 <Philippa_> Heffalump: not C++ or family if you can avoid it. But hey
10:42:58 <basti_> sure, you COULD do it better.
10:42:58 <wilx> Hah!
10:43:00 <vincenz> basti_: usually c++ programs are more readable
10:43:03 <SamB> Heffalump: if forced, one should probably not use C or C++
10:43:05 <basti_> you can write decent programs in basic.
10:43:12 <wilx> That was funny, basti_ ...
10:43:17 <Heffalump> SamB: so what should one use?
10:43:17 <SamB> perhaps a Lisp or Haskell
10:43:29 <wilx> Definitely not Lisp.
10:43:31 <Philippa_> basti_: my C++ used to be fairly readable, as was and is that of a fair number of people I know
10:43:37 <Heffalump> remember you need it to be efficient.
10:43:43 <Philippa_> ocaml?
10:43:44 <SamB> probably Haskell.
10:43:55 <SamB> yeah, ML could work
10:44:21 <Philippa_> you really /badly/ want algebraic datatypes and pattern-matching. C++ would be a far more usable language with them
10:44:27 <Heffalump> Haskell is far too inefficient at runtime.
10:44:28 <basti_> I did "grow up" with C, and did a bit of C++ too.
10:44:39 <Heffalump> ML is probably the only sane non-C choice.
10:44:41 <basti_> but i never ever thought of both as readable.
10:44:43 <SamB> maybe with jhc, it would work
10:44:54 <basti_> maybe i'm especially sensitive or something ;)
10:45:01 <SamB> C is not sane, as GCC will show you.
10:45:03 <Heffalump> SamB: cos jhc is such a mature project right now :-)
10:45:11 <basti_> http://www.josuttis.com/cppbook/tmpl/printcoll.hpp.html just take a look at that example
10:45:24 <SamB> Heffalump: well, its not like a commercial compiler is born overnight
10:45:31 <Philippa_> I suspect there'd be a niche for a less efficient but verified commercial compiler
10:45:36 <SamB> anyway, it doesn't have to be fast until after it works
10:45:37 <basti_> this.is.not.readable.
10:45:45 <Philippa_> that might be a chance to use Haskell
10:46:03 <SamB> explain this use of "verified" and "commercial" in the same sentance?
10:46:10 <Heffalump> SamB: but choosing a language that is difficult to make fast would be a bad choice..
10:46:26 <Philippa_> basti_: the for loop makes me want to vomit these days, but otherwise I find that readable
10:46:34 <Philippa_> SamB: NASA :-)
10:46:53 <basti_> Philippa_: well i understand what it means. I still do not think it is readable.
10:46:56 <Philippa_> or any one of a number of other safety-critical tasks
10:47:12 <SamB> the compiler doesn't have to use quite as fast a language if it can use good algorithms, does it?
10:47:16 <df_> philippa :: ada / modula2
10:47:36 <wilx> Ada 95,
10:47:48 <wilx> It looks interesting.
10:47:51 <Heffalump> SamB: if you want best performance you need both good algorithms and a language with a fast implementation..
10:48:04 <wilx> I wish I had more time to learn it.
10:48:32 * Philippa_ is tempted to suggest strict-regioned-Haskell-with-malloc/free-in-IO, but it doesn't exist
10:48:50 <SamB> Heffalump: Name a C compiler with good performance, which actually works
10:48:52 <Heffalump> isn't that ML? :-)
10:48:58 <SamB> (not TinyCC)
10:49:02 <Heffalump> SamB: gcc, MS VC++
10:49:15 <Philippa_> Okay, ML-with-typeclasses-and-monads-and-existentials-and-sane-syntax-and-things then
10:49:19 <SamB> gcc is slooow.
10:49:19 <vegai> good performance is subjective ;)
10:49:29 <Heffalump> ok, armcc, then.
10:49:32 <vegai> how about tendra?
10:49:33 <SamB> well, I mean, recently it is supposedly slow.
10:49:38 <vegai> never tried that myself, though
10:51:57 * basti_ does not like compilers.
10:52:02 * basti_ likes good algorithms
10:52:10 * Philippa_ likes compilers
10:52:16 <SamB> I wouldn't know about MS VC++, but it would be one of few MS products to be fast if it is.
10:52:16 <Philippa_> coding in assembler is a PITA
10:52:16 <vincenz> Philippa_: ooh yeah
10:52:23 <basti_> well compilers are a neccisairy evil.
10:52:24 <basti_> :)
10:52:49 <basti_> there will be a day when compilers will be simple, i think.
10:52:56 <vincenz> Philippa_: monads are not a language feature...
10:53:00 <vincenz> Philippa_: but ml with typeclasses
10:53:04 * vincenz drools
10:53:11 <Philippa_> vincenz: monads become one when your IO's dependant on them
10:53:14 <Oejet> basti_: Heh, when processors become simple.
10:53:15 <SamB> well, they are a stdlib feature.
10:53:23 <basti_> oh processors were simple once.
10:53:28 <vincenz> Philippa_: ah yes, though if the language is alzy...you can still get out of IO and do IO
10:53:41 <vincenz> let x = (return writesomething) in (expression not using x)
10:53:42 <basti_> in fact once there was a movement of making processors simple again.
10:53:52 <vincenz> basti_: nope
10:53:54 <Philippa_> vincenz: no, that doesn't work because x is never evaluated
10:53:56 <basti_> then people tried to emulate complex processors with simple processors.
10:53:57 <SamB> basti_: really?
10:54:03 <Philippa_> yeah
10:54:06 <vincenz> Philippa_: for LAZY languages..
10:54:07 <basti_> "RISC" :)
10:54:08 <Philippa_> the end result was IA32
10:54:13 <basti_> yup -g-
10:54:22 <vincenz> basti_: those are cores, not processors
10:54:27 <SamB> wait, 8080 was risk?
10:54:28 <vincenz> basti_: people arem ovin to complexer processors
10:54:28 <Philippa_> vincenz: that's *why* x is never evaluated. Unless you didn't write what you meant?
10:54:34 <SamB> er, risc?
10:54:35 <vincenz> heterogeneous multicore systems
10:54:48 <vincenz> Philippa_: I knwo...but you said ML-with typeclasses with monads
10:54:48 <SamB> hmm, I think I mean 8086
10:54:53 <basti_> ah but are they necissairly complex?
10:54:59 <Philippa_> vincenz: right, so you didn't write what you meant :-)
10:55:08 <Philippa_> and yeah, I'd probably do some thinking about let
10:55:13 <basti_> aren't they only complex because the users demand compatibility and certain properties?
10:55:31 <SamB> I don't think there is a need for processors to be totally CISC
10:55:45 <vincenz> basti_: no they are complex to reduce power
10:55:52 <basti_> hm.
10:55:55 <Philippa_> for "let is largely syntactic sugar" values of thinking.
10:56:07 <SamB> certainly there are plenty of CISC instructions in i386 that are really slow
10:56:15 <vincenz> Philippa_: true.. and depending on lazy or not lazy...it changes...but if you could have the let in the tpying somehow, it'd be fixed
10:56:19 <basti_> SamB: thats because they are acutally emulated.
10:56:29 <SamB> basti_: true
10:56:41 <Philippa_> or you'd just have all the xes expand to the appropriate thing rather than evaluating x once
10:56:44 <SamB> microcode is, strangely enough, actually kind of slow these days
10:56:46 <Philippa_> or, or...
10:56:52 <basti_> hehe -g-
10:57:06 <Philippa_> (or not have the IO actions evaluate to anything useful in-and-of themselves)
10:57:08 <basti_> i think IT (and CS) are NOT about faster processors.
10:57:13 <Philippa_> (error, say)
10:57:30 <basti_> i'm very happy that my machine is blazingly fast.
10:57:38 <vincenz> speed is no longer the main concern
10:57:43 <basti_> but i dont say it needs to be
10:57:45 <vincenz> I mean "clockrate"
10:57:51 <Philippa_> bah. I can't emulate a '95 PC fast enough on my current one yet
10:58:04 <SamB> the problem has probably been the large body of binary-only programs/programs written in assembler
10:58:11 <Philippa_> and you can't get soundblaster-compatible cards any more
10:58:12 <basti_> SamB: yes.
10:58:29 <basti_> SamB: this is another reason for promoting open source programs.
10:58:36 <SamB> quite
10:58:52 * Philippa_ suspects this is exactly why MS are pushing .net
10:58:57 <SamB> also for translating more and more pieces of ZSNES into C
10:59:01 <basti_> metal incest is the cause for the current x86 brain damage.
10:59:04 <Philippa_> at least, in its current form
10:59:20 <Philippa_> SamB: the large asm chunks were one of its good points at the time. Certainly the MMX bits
10:59:27 <SamB> Philippa_: which? platform independance, or avoiding it?
10:59:55 <SamB> Philippa_: well, sure. but it makes it rather difficult to compile on PPC, for instance ;-)
10:59:56 <Philippa_> platform independance != hardware independance :-)
11:00:08 <SamB> true
11:00:08 <Philippa_> SamB: there're other emulators
11:00:24 <basti_> i think the current systems are flawed designed-wise in the way they center on the CPU
11:00:32 <basti_> s/gned//
11:00:34 <basti_> uhm
11:00:54 <SamB> basti_: maybe that is because even RAM is slow these days?
11:01:13 <basti_> ram isnt slow. processors are fast like hell.
11:01:22 <SamB> True, true.
11:01:31 <basti_> but even if we go that way...
11:01:50 <SamB> do you think we should slow down the processors until we don't need cache anymore?
11:01:53 <Philippa_> I suspect it's gone that way largely because the main thing pushing desktop CPU design is multimedia and games
11:01:57 <wilx> Hmm, is there any easy way to invert colours in whole XChat at once easily?
11:01:59 <basti_> why the hell does every network packet have to be processed by the CPU?
11:02:07 <basti_> oh no we need cache.
11:02:12 <basti_> cache is very reasonable
11:02:17 <Philippa_> = lots of streaming stuff
11:02:30 <wilx> basti_, it doesn't have to be like that.
11:02:38 <Philippa_> basti_: ever tried coding on the PS2? :-)
11:02:41 <basti_> actually "pc" architecture is not at all prepared for "streaming" things
11:02:43 <basti_> Philippa_: no.
11:02:46 <basti_> wilx: i know.
11:02:51 <Philippa_> it's an answer to what you're saying.
11:02:54 <Philippa_> It's a bad one, mind
11:02:59 <basti_> hm? ;)
11:03:15 <Philippa_> four different instruction sets in use, and the DMAC's probably turing complete on its own
11:03:22 <basti_> ahh.
11:03:22 <basti_> :)
11:03:30 <basti_> nobody said it would be simple :)
11:03:30 <Philippa_> and all the caches're tiny
11:03:35 <musasabi> Is the argument order of addToFM_C and insertWith the same (for the function :: a -> a -> a) ?
11:03:52 <basti_> I also think that there should not be universal computers.
11:03:58 <SamB> basti_: I was under the impression that network packets only hit the CPU if: (a) they have the right ethernet address, (b) the network interface is in promiscuous mode, or (c) the network interface has bound more ethernet addresses than the NIC can handle
11:04:06 <basti_> i mean of course we will need some, but they are limited, then.
11:04:22 <basti_> SamB: thats right.
11:04:39 <SamB> or of course (d) there is no NIC
11:04:41 <basti_> SamB: but still, if you want to actually transfer something via your NIC, then they have to go that way.
11:04:58 <basti_> (except in some very special situations)
11:05:08 <basti_> why doesnt the NIC burst the packet right into ram?
11:05:25 <basti_> i mean, it's not that it would be a large packet or that it would take any time or something
11:05:37 <Philippa_> that'll start happening soon
11:05:45 <Philippa_> your graphics card can already do it
11:05:58 <basti_> hm
11:06:05 <SamB> yes, PCI Express presumably will make that at least possible
11:06:15 <basti_> that would be good.
11:06:26 <basti_> i saw this possibility when i was about 12 years old.
11:06:26 <basti_> ;)
11:06:27 <SamB> although you might have to put the NIC in a slot intended for your video card sometimes ;-)
11:06:54 <basti_> actually i think "busmaster" is pretty much about the same thing
11:07:06 <SamB> possibly
11:07:11 <basti_> it just doesnt work
11:07:22 <basti_> same goes for HD controllers btw.
11:07:24 <SamB> that is definately called DMA, and has been around for decades
11:07:43 <basti_> thats true.
11:07:47 <Philippa_> it'd be a good idea to add something about a smarter bus and better memory controllers, mind
11:07:53 <SamB> okay, which doesn't work?
11:08:00 <basti_> busmaster.
11:08:09 <basti_> i've never seen this working.
11:08:13 <SamB> Well sure, maybe it doesn't work.
11:08:29 <basti_> its said to be capable to connect pci periphery.
11:09:44 <SamB> "connect PCI periphery"?
11:10:42 <basti_> well as far as i know its thought like, for example: periphery 1 generates data, may transmit it to periphery 2, which consumes
11:10:44 <SamB> would that entail cards having intimite knowledge of eachothers workings?
11:11:03 <basti_> actually as i never saw it working, i do not know and never cared a lot
11:11:08 <basti_> but I'm googling for it now
11:13:34 <shapr> SamB: it is true that I will not discuss patch theory with jemfinch anymore.
11:14:31 <basti_> SamB: actually busmaster works cpu-to-card and card-to-card
11:14:37 <basti_> *is said to*
11:14:47 <CosmicRay> basti_: actually, this already happens, doesn't it?
11:15:04 <CosmicRay> or can, with some cards
11:15:05 <SamB> I don't imagine too much card-to-card happens...
11:15:19 <SamB> sounds like an interdependancy nightmare
11:15:55 <basti_> CosmicRay: well its certainly a popular buzzword, and in speeding up the pci-cpu-performance it might be successful
11:16:29 <shapr> SamB: lemme guess, jemfinch told you that I won't discuss patch theory with people who don't understand commutation?
11:17:03 <SyntaxNinja> heh
11:17:17 <SamB> shapr: assuming that jemfinch = jfincher, he told zooko in #darcs
11:17:18 <shapr> SamB: When in reality, jemfinch tried to convince me that his patch theory does all that darcs does and more, and when I tried to explain to him why it didn't, he didn't understand what I was saying.
11:17:39 <SamB> oh, was I there?
11:17:47 <CosmicRay> shapr: he's doing that right now on #darcs again.
11:18:06 <shapr> hey pipe!
11:18:13 <shapr> SamB: I don't know.
11:18:15 <pipe> hey hey hey
11:18:22 <pipe> home at last
11:18:29 <CosmicRay> pipe: it would be less confusing to me if you kept the same nick for a little longer :-)
11:18:38 <SamB> I definately recall someone doing that
11:18:45 <CosmicRay> zipper: thanks so much :-)
11:19:02 <zipper> kein problem =]
11:19:40 <zipper> i thought the only thing i'd want to do when i get home would be to sleep but for some reason i'm not tired at all
11:23:38 <basti_> but however (i can't find valuable data on if or how pci bus master works)... i think a lot of a pc's "brains" will be "outsorced" again soon [it was in the past - this seems to be a big cycle], helping the current bottlenecks (buses and ram)
11:23:41 <fernan> hi all
11:23:53 <basti_> hi fernan
11:24:18 <fernan> is there a place to download hc files for the x86 archetecture?
11:24:32 <basti_> :-o
11:25:07 <zipper> hey everyone, i've been stuck in the army for the past two weeks but i heard that there is some sort of survey for ghc... is it still active?
11:25:31 <basti_> army? yuck!
11:25:38 <basti_> but, there is one where you download ghc
11:25:44 <basti_> i saw this when i did so recently
11:26:19 <shapr> Heffalump: Would you like to discuss this further here on #haskell?
11:26:28 <zipper> i just happened to read the anouncement on my cellphone from ltu website
11:26:31 <fernan> basti_: yes there is... :)
11:27:19 <Heffalump> if noone objects, though I have little more to say unless you want to continue.
11:30:58 <Philippa_> discuss what?
11:31:01 <Philippa_> (odds are I don't object)
11:31:13 <CosmicRay> Philippa_: Life, the Universe, and Everything.
11:31:21 <CosmicRay> (gotta get in the groove for the new movie)
11:31:22 <Philippa_> 42. Duh.
11:31:30 <Philippa_> I'm not hearing good things :-(
11:31:32 <CosmicRay> Philippa_: ahh, but what is the question?
11:31:36 <CosmicRay> Philippa_: yeah :-(
11:31:40 <CosmicRay> but I still want to see it
11:31:52 <Philippa_> I don't want to pay to see it, and I don't do the warez thing
11:32:03 <CosmicRay> I'll pay.
11:32:09 <CosmicRay> we go to movies in the theater so rarely
11:32:19 <CosmicRay> we use greencine.com for everything else
11:32:20 * Philippa_ nods
11:32:26 <Philippa_> Damien and I do reasonably often
11:32:32 <CosmicRay> (greencine is a less evil version of netflix)
11:32:40 <Philippa_> though if we ever subscribe to one of the flat-rate DVD rental places that may drop
11:32:43 <Philippa_> yeah
11:32:50 <Philippa_> Damien /really/ needs to see stuff
11:32:56 <CosmicRay> heh
11:33:00 <Philippa_> he's not seen Blade Runner for example, nor Pulp Fiction
11:33:06 <CosmicRay> I haven't either
11:33:19 <Philippa_> he hadn't seen The Usual Suspects, Trainspotting, Fight Club etc etc etc 'til he met me either
11:33:20 <CosmicRay> I've never been much of a movie buf, and the stuff I have seen is mostly 30 years old or more :-)
11:33:27 <CosmicRay> I've never seen those either :-)
11:33:31 <Philippa_> see Blade Runner. Dunno whether Pulp Fiction'd be to your taste
11:33:43 <barkley> Blade Runner rulez
11:33:45 <CosmicRay> I have seen, hwoever, most of Peter Sellers' work plus too many Marx Bros. movies to count :-)
11:33:49 <zipper> CosmicRay: what ever happened to megamonad btw?
11:33:54 <Philippa_> but Blade Runner is good. Preferably the director's cut, though if you're going to watch the ordinary version first I'll let you off
11:33:55 <Philippa_> heh
11:34:04 <CosmicRay> zipper: well, he seemed to be annoying people in the channel
11:34:12 <CosmicRay> zipper: the novelty wore off, basically
11:34:40 <Philippa_> that, and glimming got here </bitch>
11:34:48 <CosmicRay> I did get it fixed (it was down for awhile because its brain exceeded the size limit for megahal) but when it was back up...
11:35:33 <CosmicRay> Philippa_: what does that have to do with megamonad?
11:36:41 <Philippa_> he's good at generating similar statements in the middle of useful conversation IME
11:36:57 <CosmicRay> heh
11:37:24 <CosmicRay> it was all worth it, though, for that priceless quote: "to me java is a monomorphic type"
11:37:37 <Philippa_> heh, yeah
11:38:13 <CosmicRay> I liked it how half of megamonad's sentences began with "shapr:"
11:54:13 * shapr grins
11:55:16 <SamB> CosmicRay: where did he pick that up from?
11:59:06 <CosmicRay> SamB: perhaps becaause everyone wants to talk to shapr? :-)
11:59:06 <CosmicRay> I dunno
11:59:14 <CosmicRay> but it's quite true, most of the sentences began with shapr
11:59:18 <shapr> I think he meant the monomorphic type ;-)
11:59:23 <CosmicRay> oh :-)
11:59:29 <CosmicRay> I don't know, just one of those random things I guess
11:59:42 <CosmicRay> he also seemed to associate lisp hackers with the word "weenie"
11:59:48 * shapr snickers
12:00:33 <SamB> well, probably much less than half of the messages really start with "shapr:", but it is true that people do tend to want to talk to shapr.
12:08:37 <CosmicRay> SamB: yes, I think you're right
12:11:18 <rasfar> Anyone know if linking egcc to gcc is okay (trying to compile jhc)?
12:11:25 <jjang> mm
12:11:33 <jjang> is toLower not in ghci by default?
12:11:43 <SamB> I thought egcs was gcc now?
12:12:16 <jjang> @type toLower
12:12:22 <lambdabot> bzzt
12:12:35 <rasfar> I'm using OpenBSD and gcc (GCC) 3.3.5 (propolice) -- no egcc or egcs on my distro!
12:12:45 <jjang> bitchy bot
12:12:58 <kaol> @yow
12:12:59 <lambdabot> Why is everything made of Lycra Spandex?
12:13:02 <rasfar> The symlink seems to have got it over the hitch though...
12:13:41 <jjang> maybe toLower string should make a string lower case right?
12:13:57 <jjang> *map toLower strig
12:14:00 <jjang> *string
12:16:58 <rasfar> Yay! it seems to have compiled!
12:24:24 <rasfar> @type Char.toLower
12:24:26 <lambdabot> Char.toLower :: Char -> Char
12:24:55 <rasfar> @thanks
12:24:56 <lambdabot> Unknown command, try @listcommands.
12:32:39 <mikehammad> hi, is andrew bromage here?
12:33:02 <mikehammad> i have a question about his monad reader article
12:33:12 <Heffalump> he goes by the nickname pseudonym
12:33:18 <Heffalump> I think it might be aussie bedtime at the moment.
12:33:44 <mikehammad> hehe ok coo
12:34:21 <mikehammad> there is a programming challenge at the end of the first monad reader that interests me
12:34:35 <mikehammad> it has to do with supersequences
12:35:48 <mikehammad> the article claims that the following issue will have some solutions.  but i can't find any.
12:39:09 <basti_>  oh tmr2 is out already?
12:39:27 <mikehammad> oops
12:39:51 <mikehammad> i'm looking at several chapters that make up issue 1
12:40:20 <basti_> ah
12:40:30 <mikehammad> i guess then the next issue will have solutions
12:41:21 <basti_> probably.
12:41:25 <basti_> if it says so in the first issue
12:42:43 <wagle> yeah, its almost 6am in western australia
12:43:02 <mikehammad> has anyone else been working on the problem?
12:44:19 <Heffalump> he's in Melbourne, isn't he?
12:44:53 <zipper> boegel: hi
12:45:28 <boegel> hi zipper !
12:45:38 <zipper> boegel: do you have icq?
12:45:42 <boegel> have you seen my raytracing progress
12:45:53 <boegel> I do :) I added you yesterday or so
12:46:21 <zipper> haven't seen it. i've been in the army, just got home today
12:47:12 <boegel> zin the army ? you poor thing !
12:47:19 <basti_> zipper: how does it come that someone needs to go to the army?
12:47:20 <boegel> s/zin/in
12:47:41 * TFK begins the great rewrite
12:47:44 <boegel> basti_: civil duty.. it used to be like that in Belgium too like 5 years ago
12:47:52 <basti_> in germany its like that too
12:47:55 <basti_> i don't say thats normal
12:48:23 <zipper> basti_: country has lots of security threats and needs people in army to protect itself
12:48:34 <skew> hi boegel. Did you make your raytracer go faster yet?
12:48:35 <TFK> zipper, shalom, haver
12:48:58 <TFK> 'Tis the draft, three years.
12:49:03 <basti_> zipper: ah youre in isreal
12:49:27 <basti_> do you consider army as normal?
12:49:45 <zipper> TFK: hehe, shalom! ad matay march 05!!!!!
12:50:12 <TFK> zipper, lo hevanti, "march 05"?
12:51:29 <zipper> giyus march 2005
12:51:32 <boegel> skew: well, it's was a bit faster with specifying the types better
12:51:40 <boegel> but I haven't started working with pragma's
12:51:58 <skew> have you put in UNBOX pragmas yet?
12:52:08 <skew> what else was there to do with the types?
12:52:14 <boegel> changing my types from 'type Point = (Double,Double,Double)' to 'data Point = Point Double Double Double' would result in quite a lot a problems
12:52:23 <TFK> zipper, you were drafted this march?
12:52:33 <zipper> TFK: yes
12:52:44 <boegel> skew, well just making sure there's no overloading
12:52:46 <boegel> that about it
12:52:49 <basti_> i think draft is disgusting.
12:52:55 <skew> boegel: is there any smaller piece of code that would be easier to pull out and test?
12:53:21 <boegel> I have other things to do (a project in ADA, 2 projects on cg, my thesis text), so i won't bother about the speed right now
12:53:33 <TFK> zipper, I think I'll join you this july.
12:53:35 <boegel> I could tackle that later on, or let someone else tackle it (you? :p)
12:53:48 <boegel> skew: hmm, not really
12:53:55 <skew> I thought this was something of an issue with your code
12:54:18 <zipper> TFK: hm... how long you in this channel?
12:54:24 <boegel> skew: my perlin noise implementation is for from optimal
12:54:34 <boegel> but it works, and that's the most important thing right now
12:55:00 <boegel> I won't say a lot on performance in my thesis, but I will mention the optimalisation points mention in the GHC user guide
12:55:32 <boegel> adding the pragma's would make my code a lot less understandable, and that's one my main targets in my thesis
12:57:59 <boegel> zipper: http://studwww.ugent.be/~kehoste/thesisPublic/website/
12:59:13 <TFK> zipper, I think my first visit was about half a year, or maybe earlier.
12:59:27 <TFK> zipper, I'm sure lambdabot has it all logged >_<
12:59:40 <zipper> boegel: nice
12:59:58 <TFK> Are you doing any programming-related work?
13:00:07 <zipper> no
13:00:12 <TFK> Heh, you could be in tironut for all I know.
13:00:18 <SamB> wouldn't clog be the one to have logged whatever you speak of?
13:00:21 <zipper> yes
13:00:38 <zipper> i'm in tironut with all the ex criminals and drug addicts
13:00:50 <TFK> We'll have to see about the "ex"...
13:01:07 <TFK> Do you know where they'll assign you, at least approximately?
13:01:14 <zipper> no
13:01:26 <TFK> SamB, dunno. Whatever it is that monitors all our conversations and sends them over to Uncle Sam.
13:01:43 <zipper> i'll just say that so far they've screwed me hard up the ass several times
13:02:03 <TFK> That happens :-(
13:02:04 <SamB> TFK: you mean tunes.org?
13:02:21 <SamB> also, wherever meme lives
13:02:29 <TFK> o_O
13:02:38 <TFK> ah, yes, them.
13:02:56 <TFK> I'm not sure you should be logging this quitely like that.
13:03:08 <TFK> But then again... n/m
13:03:10 <SamB> quietly?
13:03:25 <SamB> that is the head of the topic!
13:03:39 <zipper> irc logs on the web are the fun!
13:04:18 <zipper> TFK: anything good on tv tonight?
13:04:30 <TFK> I stopped watching TV a while ago.
13:04:37 <TFK> I have seen some VH1 today, though.
13:04:37 <zipper> heh
13:04:51 <zipper> you in high school?
13:05:08 <TFK> I've made an interesting observation, that "Smooth Criminal" by Michael Jackson beats all of today's pop videos.
13:05:10 * boegel leaves
13:05:12 <boegel> bye everyone
13:05:16 <TFK> boegel, cya
13:05:20 <zipper> later boegel
13:05:28 <TFK> zipper, noper, skipped a grade, out early.
13:05:49 <zipper> what have you been doing for 10 months?
13:06:20 <TFK> Studying math in uni.
13:06:24 <TFK> Or so they say.
13:06:28 <zipper> shit man
13:06:32 <zipper> which uni?
13:06:34 <TFK> wha?
13:06:38 <TFK> Hebrew U.
13:06:41 <TFK> HUJI :D
13:07:16 <zipper> nice
13:07:43 <TFK> It's all relative.
13:08:31 <zipper> i gotta study math
13:08:47 <zipper> gonna be like Ca1e one day =]
13:08:50 <TFK> You don't seem to have a lot of opportunity right now :-(
13:08:56 <TFK> heh
13:10:09 <zipper> yeah, shit happens :( i wonder if these rubber bands can go in the washing machine
13:16:20 <TFK> Rubber bands... kinky o.o;
13:19:36 <mwc> zipper, yeah, just don't put them in the dryer
13:19:49 <mwc> oh, and bleach will fuck them up
13:19:54 <TFK> Hmmm. Am I correct to say that anything that can be written with let...in can be written with where and vice versa?
13:20:59 <skew> not entirely
13:21:10 <skew> you can only stick a where on certain sorts of declarations
13:21:28 <zipper> mwc: these rubber bands stink like the shit
13:21:41 <sjanssen> TFK: 'where' scopes over guards
13:21:52 <skew> oh, that too.
13:22:06 <skew> so only "where" can be used to define things you want to refer to in your guards
13:22:25 <skew> but "where" isn't really an expression so you can't next it
13:22:40 <TFK> What do you mean?
13:24:05 <TFK> I mean, are there cases where only let can be used?
13:24:13 <skew> read the report, I'm kinda busy right now
13:24:22 <TFK> okie
13:24:25 <TFK> thanks
13:24:27 <skew> I think where is only allowed at the very top level of a function
13:24:54 <zipper> mwc: these rubber bands have been on my feet for the last 2 weeks
13:25:30 <TFK> Is there any convention for marking globals?
13:25:37 <mwc> zipper, may I ask... why?
13:25:48 <TFK> prefixing them with something or somesuch?
13:26:01 <zipper> mwc: to hold my pants up
13:26:03 <skew> globals?
13:26:05 <sjanssen> TFK: globals?
13:26:10 <TFK> Constants.
13:26:19 <skew> why do they need a special prefix?
13:26:25 <mwc> I don't get that, and quite frankly... I don't want to.
13:26:38 <TFK> Bindings to eliminate magical numbers/strings.
13:26:55 <zipper> mwc: it's so that my pants don't fall down and cover my boots
13:27:00 <skew> why do they need a prefix more than any other top-level function does?
13:27:03 <TFK> To indicate they're special, as opposed to a normal name I can use in an IO monad.
13:27:11 <skew> but they are a normal name
13:27:14 <TFK> functions already have their convention.
13:27:14 <mwc> zipper, ahah
13:27:27 <skew> unless you're talking about the unsafePerformIO NOINLINE hack?
13:27:33 <TFK> er?
13:27:37 <zipper> mwc: cause then i do push ups or jail time :(
13:27:49 <TFK> I'm talking about visually distinguishing constants from variables in IO monads.
13:28:16 <mwc> zipper, what are you in the Marines?
13:28:34 <mwc> shouldn't they have issued you properly fitting pants?
13:29:01 <vegai> I just watched a documentary about US soldiers and their post-traumatic stress disorders
13:29:10 <vegai> apparently, every 1/6 gets symptoms
13:30:17 <TFK> Think "hungarian notation" only different.
13:30:19 <zipper> mwc: not marines, israel army
13:30:42 <jjing> mm what is a Var [type] ?
13:30:45 <sjanssen> TFK: I've never seen such a thing in Haskell code
13:30:47 <Lemmih> SyntaxNinja: Yo.
13:30:56 <mwc> zipper, ah, it all falls into place. Still, isn't this an issue that you should take up with the quartermaster instead of with elastic bands?
13:31:27 * basti_ still thinks drafting is disgusting and does not fit to modern states
13:31:41 <SyntaxNinja> hi Lemmih
13:31:43 <TFK> sjanssen, nobody ever felt the need to separate visually constants from variables? (Maybe it's my imperative thinking kicking in...)
13:31:51 * Heffalump thinks getting into a political discussion about the matter on #haskell would be dangerous.
13:31:55 <skew> TFK: we have no variables, just constants
13:31:55 * vegai was a draftee.
13:32:05 <zipper> mwc: no, everyone wears elastic bands
13:32:07 <jjing> i need vars too
13:32:12 <skew> some are were just bound more recently than others
13:32:13 <Lemmih> SyntaxNinja: I've pushed a working cabal-get.
13:32:22 <SyntaxNinja> Lemmih: sweet. what does it do?
13:32:34 <CosmicRay> Lemmih: sweeeet.
13:32:34 <jjing> is there something in haskell what does like global vars in java?
13:32:38 <TFK> names that can be rebind is whatI call variables.
13:32:43 <gzl> is there any nice way of lifting some stuff in the IO monad to WithHTML stuff in WASH? I need some value from the environment, and I can't really see how to do it reasonably without unsafePerformIO
13:32:56 <vegai> jjing: State monad?
13:32:58 <Lemmih> SyntaxNinja: Download and install packages + dependencies.
13:33:05 * SyntaxNinja rocks out to dylan
13:33:07 <SyntaxNinja> Lemmih: that rulez!
13:33:16 <CosmicRay> gzl: yes, see the wash tutorial.  Specifically, the function is io
13:33:18 <jjing> vegai: mm but i need to update a var in my program
13:33:21 * mwc thinks that you're even worse off than our army
13:33:24 <jjing> like add stuff to a list
13:33:26 <gzl> CosmicRay: that's IO a -> CGI a
13:33:29 <mwc> and I live in CANADA
13:33:31 <jjing> but dont overwrite it
13:33:36 <gzl> CosmicRay: I need something that produces WithHTML
13:33:40 <CosmicRay> gzl: oh, you can't put it directly in WithHTML
13:33:43 <SyntaxNinja> Lemmih: maybe I can play with it today, see if we can get it working over here
13:33:50 <CosmicRay> gzl: but that isn't a problem.  Do it before the WithHTML and it'll still be in scope.l
13:34:10 <gzl> CosmicRay: I don't think it's reasonable to pass this value this far through the code, though
13:34:11 <Lemmih> SyntaxNinja: Can I have a shell account on the new box so I can setup the thingy?
13:34:13 <vegai> jjing: hm?
13:34:30 <jjing> i have a *function* which is a list
13:34:36 <jjing> when a users types something in a box
13:34:39 <CosmicRay> gzl: you have code that deep for a single page?
13:34:40 <kaol> missingh doesn't like me
13:34:43 <jjing> i want that to be added to the list
13:34:52 <SyntaxNinja> Lemmih: lemmy see...
13:34:55 <CosmicRay> gzl: anyway, you don't have to.  you could use continuation passing style.
13:34:59 <gzl> hmm
13:35:08 <jjing> vegai: you know how to do that?
13:35:09 <gzl> actually, hold on, maybe I can put it on the outside
13:35:14 <CosmicRay> return a function back to your main per-page function that does what you want when applied to the result of io
13:35:19 <skew> jjing: check out IORef
13:35:22 <SyntaxNinja> Lemmih:  it'll probably be faster if you get everything ready for me to install and give me instructions to do it.
13:35:27 * CosmicRay has been breathing wash the past few days :-)
13:35:54 <SyntaxNinja> CosmicRay: sounds soapy
13:36:08 <Lemmih> SyntaxNinja: Oki.
13:36:13 <CosmicRay> SyntaxNinja: nah, I had to write the SOAP client myself with HaXML :-)
13:36:48 <SyntaxNinja> hehe
13:36:58 <SyntaxNinja> Lemmih: thanks!
13:37:02 <SyntaxNinja> Lemmih: I'm really excited.
13:37:46 <CosmicRay> and before anyone asks, no, it is not a general-purpose soap client.  just enough to get this specific task done.
13:38:04 <SyntaxNinja> CosmicRay: is it a gener^H^H^H^H^H^
13:38:07 <kaol> @vixen 'ERROR "/usr/lib/hugs/libraries/MissingH/Logging/Logger.hs":190 - Syntax error'. What did I do wrong?
13:38:08 <CosmicRay> heh
13:38:09 <lambdabot> i prefer to go without panties or bras :)
13:38:59 <SyntaxNinja> @vixen
13:39:00 <lambdabot> what's worth more a flush or a full house?
13:39:14 * SyntaxNinja mumbles something about sexist software
13:39:44 <kaol> I get better results if I undress hugs before usage?
13:39:48 <Igloo> What is @vixen?
13:39:56 <kaol> @help vixen
13:39:57 <lambdabot> sergeant curry's lonely hearts club
13:39:57 <jjing> ah i got it working already
13:40:34 <jjing> my code looks total crap though is there some tool which i can use to format the source nicely?
13:40:37 <Igloo> Oh, well, that clears that up then  :-)
13:42:37 <CosmicRay> jjing: not afaik
13:43:08 <jjing> mm to bad
13:43:15 <SyntaxNinja> Lemmih: give me a heads-up when you have everything ready
13:45:00 <jjing> is there a function in haskell which does what *explode* does in php?
13:45:16 <TFK> split?
13:45:31 <kaol> @vixen hugs refuses to cooperate with me. hug me.
13:45:32 <jjing> split a string
13:45:33 <lambdabot> hey, we have simular taste in music
13:45:47 <jjing> but split it when it parses a certain pattern
13:45:49 <Lemmih> SyntaxNinja: Sure.
13:46:27 <jjing> @type split
13:46:32 <lambdabot> bzzt
13:46:49 <TFK> There's a splitRegex in http://haskell.org/hawiki/LicensedPreludeExts
13:47:36 <TFK> splitBy, etc. I'm yet to find the actual equivalent from Python, though (which I suppose does the same as explode in PHP).
13:48:14 <TFK> No wait.
13:48:18 <jjing> hmm
13:48:48 <TFK> jjing, right, I'm on crack - it's near the end of that page.
13:50:00 <jjing> ye i see it
13:50:02 <jjing> gonna test it
13:50:10 <kaol> oh, running "hugs -98" made things make sense somewhat more. or at least made the errors happen in a different place.
13:50:38 <jjing> TFK: its not default into ghc right?
13:51:10 <TFK> jjing, nope. You can copy-paste into a module and import that, but note that it's under the BSD license.
13:51:28 <jjing> i cant copy shit ;/
13:51:33 <TFK> There are a bunch of modules that themselves need to imported to make all those useful.
13:51:45 <jjing> ye thats the problem
13:51:46 <TFK> What about non-shit?
13:51:53 <jjing> my teachers dont allow that i think
13:52:33 <kaol> Undefined variable "forkProcess". I don't think I can do anything about that, then.
13:53:08 <TFK> Then either they want you to implement split yourself, or the solution to this problem doesn't involve splitting.
13:55:11 <TFK> Or, the solution they envision doesn't involve split.
13:55:16 <jjing> well
13:55:18 <jjing> i have a file
13:55:26 <jjing> with commands
13:55:32 <jjing> each on a new line
13:55:48 <jjing> so i thought it would be usefull to just read that thing and split at \n
13:55:59 <jjing> like in php
13:56:02 <TFK> You can read line by line.
13:56:16 <jjing> really
13:56:22 <jjing> how? :)
13:56:23 <SyntaxNinja> getContents and unlines or lines or something, or getLine
13:56:40 <SyntaxNinja> look at the System.IO module
13:56:46 <jjing> kk
13:56:54 <TFK> Oh, lines! Right, totally forgot about that. lines is basically splitting on "\n"
13:56:54 <SyntaxNinja> @type unlines
13:56:56 <lambdabot> unlines :: [String] -> String
13:56:59 <SyntaxNinja> @type lines
13:57:00 <lambdabot> lines :: String -> [String]
13:57:14 <SyntaxNinja> so lines takes a single string and breaks it into a list of strings that represent the lines
13:59:15 <jjing> nice
13:59:24 <jjing> i basicly need that + readfile i think
14:02:19 <TFK> processCode code = (reverse . dropWhile (=="") . reverse . dropWhile (=="")) (map rstrip (lines code)) -- is there any way to make this better (barring the (dropAndReverse . dropAndReverse) where dropAndReverse = ...)?
14:02:23 <kaol> I'm thankful for that that Haskell code is so easy to read
14:02:35 * TFK chuckles
14:04:31 <SyntaxNinja> TFK: what does it do? remove blank lines from both sides or what?
14:04:47 <TFK> Yup. But it must not remove blank lines from the middle.
14:04:59 <TFK> (Which is why filter won't work)
14:05:48 <TFK> Not a biggie, but a bit disturbing.
14:07:17 <TFK> Also, a style question - if it is possible to define a function in terms of composition/currying of other functions, should I do that, or should I do an explicit "func input = ..."?
14:07:34 <SyntaxNinja> I sometimes do that in a where clause.
14:07:39 <Heffalump> matter of personal choice, IMO
14:08:02 <TFK> Gotcha, thanks.
14:08:03 <tromp> whichever is shorter/clearer
14:08:03 <gzl> SyntaxNinja: ok, I was able to pass it from the outside in 3 of the 4 cases, but in the final case, I can't do that, because I need to get arguments to pass to the outside program (for the IO block) while I'm producing WithHTML stuff
14:10:01 <SyntaxNinja> gzl: I don't understand.  why do you have trouble getting arguments?
14:11:01 <gzl> SyntaxNinja: I don't have trouble getting the arguments, but my point is that in this case, the IO block needs to be called by a function producing WithHTML stuff because it can only call the outside program based on data it finds in the WithHTML function
14:12:46 <gzl> i.e. there's no way of doing the IO stuff first, then passing it down to the WithHTML thing.
14:12:53 <SyntaxNinja> gzl: sure.
14:12:59 <SyntaxNinja> @wiki ThatAnnoyingIOType
14:13:00 <lambdabot> http://www.haskell.org/hawiki/ThatAnnoyingIOType
14:13:26 <SyntaxNinja> @wiki CatInHaskell
14:13:27 <lambdabot> http://www.haskell.org/hawiki/CatInHaskell
14:13:39 <SyntaxNinja> those might help a bit
14:14:07 <gzl> the second one seems to stay inside IO the whole time
14:14:25 <SyntaxNinja> yeah
14:14:38 <gzl> yeah, that I know how to do :) but reading the first one
14:15:03 <Lemmih> SyntaxNinja: I'm ready.
14:15:58 <SyntaxNinja> so for instance, length isn't in the IO monad.. so you could say something like:
14:15:58 <SyntaxNinja> do f <- readFile "..."
14:15:58 <SyntaxNinja>      putStrLn (show (length (unlines f)))
14:16:10 <SyntaxNinja> neither is unlines in the IO monad
14:16:13 <gzl> no, that's not the difficulty
14:16:20 <gzl> sorry, let me try to explain this better
14:16:35 <SyntaxNinja> Lemmih: got some instructions for me?
14:17:18 <SyntaxNinja> gzl: you can't call an IO function from a non-IO function
14:17:24 <gzl> right, I know
14:17:32 * SyntaxNinja struggles to see another combination ;)
14:18:04 <gzl> I have some abstract syntax tree, essentially, and I have a function that recursively converts this into HTML (so the type is WithHTML x CGI ()). so for certain kinds of elements in the tree, I need to perform this IO action (which I can't reasonably do for the reason you gave)
14:18:28 <kaol> could someone explain me what's the point of $?
14:18:38 <SyntaxNinja> kaol: mostly convinience, reduces parens
14:18:46 <tromp> changing associativity
14:18:58 <tromp> saving parentheses
14:19:01 <Lemmih> SyntaxNinja: Not really.
14:19:18 <TFK> Hmmm, rewriting all the code did some good, actually.
14:19:19 <SyntaxNinja> Lemmih: so what did you do between the time you went away and the time you said you were ready ;)
14:19:21 <gzl> SyntaxNinja: so right now I just cheated and used unsafePerformIO, but I'm trying to figure out a way around this
14:19:27 <Lemmih> SyntaxNinja: I got some Cabal patches for you, though.
14:19:27 <tromp> a (b (c (d e))) becomes a $ b $ c $ d e
14:19:28 <SyntaxNinja> gzl: CHEATER
14:19:31 <gzl> :)
14:19:32 <SyntaxNinja> Lemmih: send 'em along
14:19:54 <tromp> also handy in zipWith $
14:20:00 <SyntaxNinja> gzl: you know it's unsafe, right ;)
14:20:02 <gzl> now you see the problem? I can't do the IO first, since it only gets triggered for one kind of node in the tree
14:20:03 <df_> show . concat $ [[1],[2]]
14:20:08 <tromp> uhm, zipWith ($)
14:20:13 <gzl> SyntaxNinja: yes, that's why I'm trying to remove it :)
14:20:20 <SyntaxNinja> gzl: you have to put the function in the IO monad then
14:20:29 <gzl> can't do that
14:20:39 <TFK> Heh. I wonder if (a . b . c . d) e is more readable...
14:20:40 <SyntaxNinja> gzl: then you could return a list of IO actions to perform and do them later
14:20:59 <Lemmih> SyntaxNinja: Sent.
14:21:08 <SyntaxNinja> Lemmih: thanks
14:21:20 <SyntaxNinja> so Lemmih what should I do to install everything, just do a pull and grab all the bits piecewise?
14:21:29 <gzl> i suppose that would normally work, but i don't see how one could have such a list be of type WithHTML x CGI ()
14:21:31 <SyntaxNinja> Lemmih: do you need these patches for anything?
14:21:43 <Lemmih> SyntaxNinja: It's all in the Hackage repo.
14:21:44 <gzl> that would make no snese
14:21:47 <SyntaxNinja> I take it that CGI isn't hiding IO?
14:21:55 <SyntaxNinja> Lemmih: except for the depends, right?
14:22:06 <Lemmih> SyntaxNinja: I'll give them separate repos when I get time.
14:22:22 <SyntaxNinja> Lemmih: well, they might hae upstream repos
14:22:34 <gzl> SyntaxNinja: well, I can easily lift IO to CGI, but WithHTML is presenting a problem
14:23:23 <Lemmih> SyntaxNinja: Yes, cabal-get needs a patched cabal.
14:24:10 <SyntaxNinja> hm. i got jjing confused with gzl when gzl seemed to reply to something I said.
14:24:26 <jjing> huh?
14:24:30 <gzl> huh?
14:24:37 <jjing> now you confused me
14:24:45 <gzl> both of us. :)
14:24:52 <gzl> (which may be confusing you.)
14:24:56 <jjing> ye
14:25:05 <TFK> Do I need to write like this: foo <- return $ fromJust bar; or: foo <- fromJust bar; will work?
14:25:19 <SyntaxNinja> well, I was talking to jiing about file IO, and then gzl replied about an IO block.
14:25:28 <gzl> oh, I see.
14:26:15 <kaol> lambdabot: ((++) $ ([1]++) [2]) [3]
14:27:29 <SyntaxNinja> I'm sure I transitioned smoothly, though ;)
14:27:41 <SyntaxNinja> gzl: so I'm not sure what you were responding to when you addressed me the first time.
14:27:58 * SyntaxNinja is doing 10 things at once
14:28:29 <gzl> SyntaxNinja: I thought you were confused about what my problem with my IO block was, so I responded to try to clarify.
14:28:55 <TFK> return $, then
14:29:02 <Lemmih> renice -10 `pidof installing-cabal-get`
14:29:20 <gzl> TFK: no
14:29:36 <TFK> well it apparently doesn't work without it.
14:29:37 <gzl> TFK: if bar is Maybe a, then you want do { foo <- bar }, then foo :: a
14:30:02 <TFK> Hmmm.
14:30:05 * TFK tries that
14:30:17 <gzl> the <- yanks the value out of the monad container.
14:30:28 <gzl> but fromJust is already doing that for you
14:30:37 <gzl> so you're doing it twice, sort of
14:30:38 <TFK> I had a hunch it did that... but I thought that was impossible?
14:30:43 * TFK nods
14:31:00 <gzl> what's impossible?
14:31:15 <Heffalump> pulling stuff out of a monad container?
14:31:21 <TFK> yanking values out of monads.
14:31:46 <Heffalump> it's only possible (in general) using that mechanism or similar
14:31:48 <TFK> Well, I'll believe whatever you'll tell me, especially if it compiles :D
14:31:57 <Heffalump> cos any result you produce ends up back in side the monad
14:32:08 <tromp> some monads are captive, some aren't
14:32:12 <SyntaxNinja> Lemmih: can I use cabal-get to install hackage? :)
14:32:19 <tromp> [] and Maybe and id are not
14:32:20 <Heffalump> if, as in this case, you know what the specific monad is, then you can often run a specific operation for that monad to extract the value(s)
14:32:21 <Lemmih> Sure.
14:32:38 <Lemmih> cabal-get can install any cabal package.
14:32:46 <SyntaxNinja> Lemmih: is hackage on hackage?
14:32:47 <TFK> tromp, IO isn't captive too, right?
14:32:58 <tromp> IO is if you stick to safe ops
14:33:08 <Heffalump> and if you don't you're a bad person
14:33:17 <Heffalump> and the laziness police will come and beat you
14:33:27 <basti_> lol
14:33:31 <TFK> So how is it possible to do: str <- readLine; newstr <- str ++ "foo" ?
14:33:49 <Lemmih> SyntaxNinja: It could get there if you make a tarball of it and upload it.
14:33:53 <tromp> that's still an IO action
14:34:18 <TFK> Hmmm. But on the right side there, does that mean that ++ has to be defined for IO Strings as well?
14:34:32 <tromp> wait, that looks like a type error
14:34:35 <df_> let newstr = str ++ "foo"
14:35:15 <basti_> TFK: i thought IO a are "unpacked" to a inside "bind"?
14:35:18 <basti_> (>>=)
14:35:29 * basti_ confusing matters further
14:35:39 <TFK> Well, I'm pretty sure I could concat strings that were once IO Strings.
14:35:44 <TFK> I have no idea :-)
14:35:45 <gzl> TFK: *were once*
14:35:51 <tromp> for IO, >>= always produces another IO action
14:36:13 <gzl> TFK: str is a String and "foo" is a String so you can simply do let newstr = str ++ "foo" to assign that to newstr
14:36:31 <TFK> gzl, well, if they *were* once, but now are strings, doesn't that mean that <- effectively pulled the String out of the IO String?
14:36:38 * SyntaxNinja starts downloading and compiling...
14:36:45 <gzl> TFK: yes!
14:36:48 <gzl> TFK: that's what it does
14:36:57 <jjing> how can i parse an IO string?
14:36:57 <TFK> but tromp just said that IO is captive.
14:37:03 <basti_> oh yes <- is >>= in disguise isnt it?
14:37:07 * TFK is consufed
14:37:15 <SyntaxNinja> TFK: he means that you can't call IO from a non-IO function
14:37:17 <gzl> TFK: you can temporarily do this, once the do block is over and you return, it will put everything back into the IO monad
14:37:19 <xerox> @type <-
14:37:20 <basti_> -g-
14:37:21 <lambdabot> bzzt
14:37:26 <basti_> @type (<-)
14:37:26 <xerox> @type (<-)
14:37:27 <lambdabot> bzzt
14:37:27 <lambdabot> bzzt
14:37:29 <basti_> hm
14:37:31 <xerox> bzzt!
14:37:37 <SyntaxNinja> <- isn't a function
14:37:43 <SyntaxNinja> but it is a disguise ;)
14:37:47 <TFK> Oh... hmmm, ok, thanks
14:37:49 <gzl> TFK: you obviously need to be able to access the String inside an IO String, the point is simply to contain all the IO junk in one block
14:37:50 <xerox> SyntaxNinja, you're not a function? <grin>
14:37:50 <TFK> heh
14:37:50 <basti_> i remember <- swaps its argument and puts the things to its left into a lambda
14:37:59 * TFK nods
14:38:04 <basti_> like x <- foo   becomes  foo >>= \x -> ...
14:38:09 <CosmicRay> xerox: it's a lie, I tell you.  I saw him processing arguments and returning values just yesterday.
14:38:16 <CosmicRay> xerox: he might even be an *unsafe* function.
14:38:21 <SamB> @type (>>=)
14:38:22 <lambdabot> (>>=) :: forall (m :: * -> *) b a.
14:38:22 <lambdabot>          (Monad m) =>
14:38:22 <lambdabot>          m a -> (a -> m b) -> m b
14:38:26 <xerox> frightening!
14:38:30 <jjing> is there something IO string -> string?
14:38:36 <xerox> jjing, probably not
14:38:37 <Heffalump> no.
14:38:37 <gzl> unsafePerformIO :)
14:38:42 <basti_> jjing: no safe way.
14:38:49 <jjing> damn
14:38:51 <basti_> jjing: you dont need to though.
14:38:56 <jjing> why not?
14:39:07 <basti_> jjing: "that darn IO type" is just a marker
14:39:13 <SyntaxNinja> xerox: just a disguise ;)
14:39:17 <jjing> the compiler is whining
14:39:18 <basti_> you don't need to match it away or something
14:39:20 <xerox> SyntaxNinja, heh.
14:39:27 <TFK> jjing, str <- readLine; or somesuch will make str a String. I think.
14:39:30 <basti_> if you code your stuff the right way you won't notice it
14:39:36 <SyntaxNinja> pretty soon we'll need to start #monads
14:39:37 <jjing> mm
14:39:45 <tromp> <- is only syntactic sugar
14:39:53 <TFK> meh...
14:39:55 <SyntaxNinja> in disguise!
14:39:56 <xerox> SyntaxNinja, we do really need a PetitionModule.
14:40:02 <jjing> i have lines(readfile path)
14:40:02 <TFK> guys, stop telling about syntactic sugar to newbies.
14:40:12 <jjing> but it gives errors cause its io string
14:40:24 <SyntaxNinja> basti_ was asking about it
14:40:30 <basti_> -g-
14:40:31 <Heffalump> do str <- readfile path
14:40:37 <Heffalump>    return (lines str)
14:40:41 <SyntaxNinja> jjing: read about that annoying io type
14:40:41 <tromp> a <- b is expanded into b (\a -> .... )
14:40:45 <SyntaxNinja> @wiki ThatAnnoyingIoType
14:40:47 <lambdabot> http://www.haskell.org/hawiki/ThatAnnoyingIoType
14:40:48 <Heffalump> tromp: no it's not
14:40:58 <Heffalump> it's expanded into b >>= (\a -> ... )
14:41:04 <jjing> mm k
14:41:13 <basti_> jjing: we all know this is very confusing
14:41:22 <TFK> When I learn Haskell, I'm so going to write a tutorial that will *never* mention the words "syntactic sugar" together until the final chapter.
14:41:28 <TFK> *I'll learn ...
14:41:33 <gzl> you could also do readFile path >>= return . lines
14:41:44 <tromp> right, Heffalump:)
14:41:46 <gzl> (to make the >>= explicit)
14:41:53 <jjing> eh
14:41:58 <Heffalump> tromp: you were just testing me, right? :-)
14:42:04 <jjing> i will try that do method first
14:42:12 <basti_> jjing: that ">>=" is probably very scary to you, as is "that IO thing" and such
14:42:15 <tromp> it's been too long since my last coffee...
14:42:22 <SyntaxNinja> maybe we should ban the noobs from teaching each-other about syntactic sugar
14:42:23 <TFK> jjing, if you don't understand any of it, that's OK, neither do I :-P you can stick with the basics and it'll work, sorta.
14:42:31 <jjing> ye
14:42:34 <jjing> i go that way
14:42:41 <jjing> cause its the last damn haskell i will ever make
14:42:49 <TFK> How come? :-(
14:42:56 <jjing> last assignment :)
14:42:58 <basti_> jjing: the point is, that all this "annoying markup" behaviour actually is transparent.
14:43:04 <Heffalump> cos he's only doing it for his course and he hates the language..
14:43:04 <TFK> Don't like Haskell?
14:43:10 <jjing> i like haskell
14:43:16 <jjing> but the way they thought us
14:43:21 <jjing> made me think differently
14:43:26 <CosmicRay> good.
14:43:34 <jjing> so i dont like it anymore
14:43:35 <xerox> That's the whole point :D
14:43:38 <basti_> thats the point
14:43:39 <basti_> :)
14:43:45 <CosmicRay> jjing: you don't like it because it's different?
14:43:49 <jjing> no
14:43:58 <basti_> nobody advocates haskell as a language to write the next operating system in
14:44:00 <jjing> because the way they made us learn it
14:44:06 <xerox> basti_, err :)
14:44:10 <basti_> xerox: NO.
14:44:14 <CosmicRay> basti_: there are two or three that do :-)
14:44:14 * xerox runs
14:44:14 <basti_> xerox: NO YOU DONT!
14:44:15 <jjing> they forced us to learn the most boring things ever
14:44:20 <jjing> which no one cares about
14:44:27 * basti_ screams
14:44:32 <basti_> jjing: ah we do
14:44:35 <xerox> basti_, what if we get a GREAT compiler...
14:44:37 <TFK> jjing, hmmm, like what?
14:44:50 <basti_> xerox: then, maybe.
14:44:56 <CosmicRay> http://www.macs.hw.ac.uk/~sebc/hOp/
14:44:58 * xerox hops
14:45:01 <xerox> (ihih)
14:45:19 <basti_> thats not true is it?
14:45:19 <jjing> well
14:45:27 <SamB> if people think haskell is a language to write the next operating system in, they will probably do it themselves.
14:45:29 <xerox> basti_, IT IS!
14:45:31 <jjing> we need to learn how to code a prolog parser
14:45:33 <basti_> ugghhhh
14:45:39 <jjing> (ive never seen prolog in my entire life)
14:45:42 <CosmicRay> jjing: that sounds like fun to me :-)
14:45:43 <xerox> jjing, nice one :)
14:45:44 <SamB> this does bring up the issue of what clog is doing here, though
14:45:50 <basti_> jjing: prolog is cool though
14:45:51 * xerox high-fives CosmicRay 
14:46:03 * CosmicRay hops about
14:46:05 <jjing> basti_ ye but maybe after i have learned the language itself
14:46:07 <SamB> parsing in Haskell is not bad
14:46:13 <jjing> but its boring
14:46:17 <SamB> especially once you learn monads
14:46:17 <SyntaxNinja> Lemmih: cabal-get depends on hackageclient depends on hackage depnds on all that other stuff
14:46:21 <jjing> for a first time experience
14:46:30 <SamB> actually, haskell has the coolest parsing library evar!
14:46:42 <CosmicRay> jjing: "boring" is different for different people.
14:46:42 <basti_> jjing: well... did your brain explode?
14:46:47 <Lemmih> SyntaxNinja: Yeah.
14:46:49 <jjing> ye
14:46:55 <CosmicRay> jjing: for me, boring things would include working on video games or theorem provers.
14:47:04 <CosmicRay> jjing: fun things would include network servers and language interpreters.
14:47:06 <jjing> ye games are shit to to make
14:47:07 <TFK> Video games are cool.
14:47:13 <SyntaxNinja> heh
14:47:13 <CosmicRay> jjing: perhaps you are different
14:47:14 <TFK> I'd *love* to work on Spore.
14:47:18 <basti_> jjing: on here, brains tend to explode often.
14:47:21 <jjing> i like to make usefull apps
14:47:24 <tuomov> for me boring things include the kind of stuff I write mostly write :)
14:47:27 <TFK> Ha! Sohws how much you know :-/
14:47:27 <CosmicRay> jjing: me too
14:47:28 <tuomov> UIs
14:47:29 <basti_> games are fun, and proving things with provers is too
14:47:29 <jjing> not fucking turtles who can draw lines
14:47:30 <SamB> yes, video games are cool, but I bet the funnest to program are IF
14:47:42 <SamB> and to write IF, you need a story
14:47:43 <xerox> tuomov, very true.
14:47:46 <basti_> writing provers is stupid probably.
14:47:47 <TFK> Do you even play games? o_O
14:47:48 <CosmicRay> jjing: but one can't tell a CS student, "OK, for your final project, implement Microsoft Word."
14:47:58 <jjing> ye thats true
14:48:04 <SamB> well no duh
14:48:10 <jjing> but making a prolog parser doesnt seem different to me :P
14:48:13 <kaol> anybody would fail for making MS Word
14:48:16 <SamB> it wouldn't be microsoft word if the student implemented it
14:48:31 <basti_> ah its not THAT hard to implement a prolog parser
14:48:36 <tuomov> The most interesting things to write are those that require some mathematical thinking... but then again, nobody's going to write Ion etc. if I don't do it
14:48:36 <TFK> Yeah, MS would sue his ass off for using their trademark.
14:48:39 <basti_> the algorithm is known
14:48:44 <CosmicRay> jjing: wasn't it an enlightening experience that showed you that haskell was quite similar to prolog in some ways, despite one being a logic language and the other being a functional language?
14:48:55 <CosmicRay> jjing: note: my only exposure to prolog was in a cs class, too
14:48:57 <jjing> basti_: no but when you first learn a language i dont expect to learn how to code compilers and parsers
14:49:03 <basti_> haskell is not similar to prolog.
14:49:10 <basti_> haskell doesn't backtrace.
14:49:15 <jjing> CosmicRay: i have not seen prolog ever
14:49:22 <basti_> but it certainly helps to know prolog.
14:49:28 <SamB> jjing: well, Haskell is not like other languages
14:49:33 <jjing> i know
14:49:36 <CosmicRay> true, but I say the syntax for defining a function in haskell looks similar to the sequence for defining a (rule?  whatever it's caleld) in prolog
14:49:37 <jjing> it seems a good language
14:49:39 <basti_> jjing: well but then you really LEARN how that language works dont youß
14:49:39 <SamB> haskell seems to excell at interpereters and parsers
14:49:40 <basti_> ?
14:49:59 <jjing> basti_: i like to learn how to make usefull stuff with it
14:50:04 <tuomov> parsec's cool
14:50:06 * xerox points at pugs
14:50:08 <basti_> CosmicRay: good prolog programs can find their input if you give them an output.
14:50:13 <basti_> do that with haskell.
14:50:16 <CosmicRay> heh
14:50:18 <TFK> Ha, foo <- lookup bar baz made my processCgi function into Maybe Html, and not IO Html :-/
14:50:30 <basti_> jjing: well that IO stuff certainly is a start =)
14:50:33 <CosmicRay> basti_: I'll get back to you :-)
14:50:35 <jjing> ye
14:50:36 * TFK doesn't like that one bit
14:50:38 <basti_> CosmicRay: -g-
14:50:44 <jjing> still have no clue what happens though :P
14:51:04 <basti_> jjing: you have to seperate typing issues from control issues.
14:51:07 <gzl> just read that monads tutorial
14:51:10 <SamB> TFK: well, Maybe is an easier monad
14:51:11 <gzl> @google all about monads
14:51:13 <lambdabot> http://www.nomaware.com/monads/html/
14:51:19 <gzl> it really clears up a lot of stuff
14:51:28 <TFK> I need to get rid of the Maybe somehow. I guess I have to write a quickLookup or somesuch.
14:51:48 <jjing> basti_: you know a way to display the stuff in my cmd when i just opened a file?
14:51:55 <jjing> i have no idea what happens now
14:52:01 <TFK> Besides, shouldn't <- get rid of the Maybe?
14:52:10 <basti_> jjing: you mean like "read, then output"?
14:52:16 <jjing> ye
14:52:20 <jjing> display on screen
14:52:26 <basti_> jjing: well putStr comes to mind
14:52:31 <jjing> yup but again
14:52:33 <jjing> type errors
14:52:36 <basti_> you could map it to the array of lines.
14:52:37 <SamB> TFK: <- gets rid of one Monad m => m
14:52:41 <KrispyKringle> TFK: you want to get rid of a Maybe? how about fromMAybe? :P
14:52:49 <jjing> the compiler is whining that its a IO string
14:52:58 <basti_> as opposed to what?
14:52:58 <TFK> KrispyKringle, well, jee, I might as well have used fromJust :-P
14:53:01 <gzl> TFK: that's the point, it does, but only inside that block
14:53:02 <jjing> string
14:53:07 <jjing> putStr needs a string
14:53:08 <gzl> TFK: at the end, it puts the Maybe back
14:53:10 <SamB> where is a pasteboard?
14:53:10 <jjing> not an IO string
14:53:15 <basti_> jjing: uhm
14:53:18 <TFK> gzl, but that's no fun, is it?
14:53:21 <KrispyKringle> TFK: i didn't hear the beginning of your question :P
14:53:24 <basti_> jjing: can you paste the whole code somewhere?
14:53:30 <jjing> ok moment
14:53:32 <gzl> TFK: no, it is, that's the point. in the Maybe monad, return = Just
14:53:39 <basti_> jjing: a pastebin maybe?
14:53:46 <basti_> lisppaste2: url
14:53:46 <lisppaste2> To use the lisppaste bot, visit http://paste.lisp.org/new/haskell and enter your paste.
14:53:57 <SamB> @google hawiki irc paste
14:53:59 <lambdabot> http://haskell.org/hawiki/HaskellIrcPastePage
14:54:00 <jjing> putStr(readFile filepath >>= return.lines)
14:54:03 <jjing> thats what i tried
14:54:10 <SamB> @topic-snoc http://haskell.org/hawiki/HaskellIrcPastePage
14:54:11 <SyntaxNinja> Lemmih: at some point, we'll need to break the dependency w/ hackage
14:54:12 <basti_> oh that looks very tendious
14:54:34 <TFK> Let's recap. I need to get a value from Maybe while leaving my function with a return value of IO Html.
14:54:45 <musasabi> Data.Map appears to be slower than Data.FiniteMap in some apps :-(
14:54:50 * SamB wonders why nothing at all happened
14:54:53 <Lemmih> SyntaxNinja: Come to think of it, you probably don't need Hackage.
14:55:07 <Lemmih> Just hackage-client.
14:55:14 <SamB> @topic-snoc "http://haskell.org/hawiki/HaskellIrcPastePage"
14:55:14 <SyntaxNinja> hackage-client uses Network.Hackage.something
14:55:17 <basti_> jiing:
14:55:17 <basti_> test = do  x <- readFile "test"
14:55:17 <basti_>            putStr x
14:55:20 <basti_> what about that?
14:55:23 <SyntaxNinja> Lemmih: though there is a missing dependency
14:55:27 <SamB> @help topic-snoc
14:55:27 <musasabi> Takes 5% more time :-(
14:55:28 <lambdabot> Various commands for adjusting the channel topic
14:55:31 <Lemmih> SyntaxNinja: Yes. Network.Hackage.* is hackage-client.
14:55:36 <SamB> @help topic
14:55:37 <lambdabot> topic provides: topic-tell topic-cons topic-snoc topic-tail topic-init
14:55:37 <jjing> basti_: lemme check
14:55:48 <SyntaxNinja> hm. OK maybe I did something wrong, it wouldn't build... building hackage dependencies now.
14:55:50 <SamB> okay, I think the topic module is broke
14:55:52 <TFK> I suppose I could do; foo <- do {foo <- lookup bar baz; if isNothing foo error "bzzt!" else return foo}, right?
14:56:13 <basti_> (readFile returns a string and not an list of lines as i thought, so you dont even need to map)
14:56:26 <gzl> TFK: what are the types of all these things?
14:56:35 <Lemmih> SyntaxNinja: Did you install hackage-client?
14:56:37 <jjing> basti_ that works
14:56:43 <basti_> jjing: so whats hard about that?
14:56:50 <TFK> bar :: String; baz :: [(String, String)]
14:57:04 <jjing> i was prolly confused
14:57:09 <basti_> jjing: yes ;)
14:57:13 <TFK> The idea is that bar will always be present in baz, although I still want it to throw an error, just in case.
14:57:17 <gzl> TFK: it sounds like the easiest thing to do is use fromJust.
14:57:18 <jjing> so basicly you can do any string functions inside a do?
14:57:18 <SyntaxNinja> Lemmih: did you forget to check in Network.Hackage.Interface?
14:57:22 <basti_> jjing: thats because haskell wont keep you from shooting in your foot, type wise.
14:57:22 <SyntaxNinja> Lemmih: that's what I'm trying to build
14:57:22 <TFK> gzl, :-D
14:57:25 <basti_> jjing: no.
14:57:37 <gzl> TFK: that does what you're doing.
14:57:38 <jjing> so why didnt my method work and yours did?
14:57:40 <basti_> jjing: its a little more complicated. It's not related to STRING functions
14:57:50 <gzl> TFK: it gives you a if the thing is Just a and throws an error otherwise
14:57:53 <basti_> its realated to functions that return IO types
14:57:59 <jjing> ok
14:58:00 <Lemmih> SyntaxNinja: Ops. Pushing it now.
14:58:02 <TFK> gzl, I assume it won't change the return value of my function, then?
14:58:05 <SyntaxNinja> Lemmih: c00
14:58:14 <gzl> TFK: not unless you screwed up something else :)
14:58:16 <basti_> if some function returns an IO type, you will need to use it "inside do" (not exactly specifying what that means now)
14:58:23 <TFK> gzl, heh, fair enough, thanks :-)
14:58:29 <SyntaxNinja> me grumbles. I need to install ghc 6.4 and start over :(
14:58:31 <jjing> basti_: ok got ya
14:58:33 <basti_> [there are other things similar to IO which behave the same way]
14:58:48 <jjing> gonna try to code this load function now
14:58:59 <jjing> then im done forever with haskell ~
14:59:08 <basti_> and as soon as something is "inside do", haskell environment will keep you from using this code outside of a context where it doesnt have a surrounding that makes sense IO wise
14:59:25 <basti_> for example, you can't just add a number to a "IO number"
14:59:32 <jjing> ye
14:59:39 <basti_> except, you could put everything inside a do
14:59:46 <jjing> well i guess it has its uses
14:59:56 <basti_> then your non-IO number would still be non-IO, and the IO number would be "freed"
15:00:04 <basti_> and then everything is IO and you can add your numbers
15:00:09 <basti_> just you got IO again.
15:00:12 <basti_> thats the idea.
15:00:15 <jjing> ok
15:00:19 <jjing> thanks for the help
15:00:23 <basti_> but I'll go to bed now
15:00:25 <basti_> good night
15:00:31 <xerox> 'night basti_
15:00:34 <basti_> n8 all
15:00:36 <jjing> cya
15:00:39 <basti_> cu
15:01:02 <SamB> okay, someone broke Map.hs on 6.2
15:01:18 <Lemmih> SyntaxNinja: About time (:
15:02:19 <SyntaxNinja> Lemmih: this is a brand new server
15:02:34 <SyntaxNinja> SamB: beat them!
15:04:07 <gzl> SyntaxNinja: do you know something that could take a WithHTML x CGI () and produce a CGI (WithHTML x CGI ()) ?
15:05:08 <SamB> am I the last one left on 6.2 or what?
15:05:18 <boegel> SamB: I have 6.2.2
15:05:19 <gzl> no, i'm using 6.2 for something.
15:05:21 <SyntaxNinja> SamB: no
15:05:23 * Lemmih would seriously apply to Aetion if he had 7 years more of education and could speak fluent English. (:
15:05:28 <SamB> okay, thats good
15:05:30 <gzl> 7 years?!
15:05:40 * SyntaxNinja gestures vaguely in the direction of Galois
15:05:56 <Heffalump> are Galois still hiring?
15:05:57 <SyntaxNinja> Lemmih: I worked for Aetion right out of college, fwiw
15:06:09 <SyntaxNinja> Heffalump: don't know really
15:06:16 <gzl> is Aetion good?
15:06:26 <gzl> (for whatever definition of good you want)
15:06:53 <Lemmih> gzl: Three years of high school followed by four in college.
15:07:02 <gzl> aha
15:09:13 <jjing> whats aetion?
15:09:37 <jjing> the only company in the world who use haskell?
15:09:38 <SamB> @topic-cons "http://haskell.org/hawiki/HaskellIrcPastePage"
15:10:24 <SyntaxNinja> jjing: there are two. aetion and galois, and maybe some others
15:10:35 <SamB> @topic
15:10:36 <lambdabot> Maybe you meant: topic-cons topic-init topic-snoc topic-tail topic-tell
15:10:36 <lambdabot> join type
15:10:58 <SamB> @topic-tell #haskell
15:10:59 <lambdabot> ["logs: http://www.tunes.org/~nef/logs/haskell/","http://www.haskell.org/
15:10:59 <lambdabot> learning.html"]
15:12:15 <SyntaxNinja> Lemmih: can't find source for Network.Hackage.CabalGet.Clean in ["."]
15:13:27 <gzl> jjing: one of the two
15:13:29 <gzl> :P
15:15:22 <SamB> @type Text.Regex.subRegex
15:15:28 <lambdabot> Text.Regex.subRegex :: Text.Regex.Posix.Regex
15:15:28 <lambdabot>                        -> String
15:15:28 <lambdabot>                        -> String
15:15:28 <lambdabot>                        -> String
15:16:11 <SamB> what does subRegex do?
15:16:19 <SamB> I haven't got one.
15:17:44 <Lemmih> hey SyntaxNinja - this is lemmihs brother here (he says the repo works now)
15:17:50 <SamB> oh, I guess it does substitution?
15:18:41 <Heffalump> my company uses Haskell a bit
15:18:55 <Heffalump> as does Microsoft ;-)
15:18:57 <SyntaxNinja> Lemmih: thanks
15:19:20 <Lemmih> SyntaxNinja: we are discussing his qualifications, and wondering exactly how much education is needed for those programmer jobs available from your company - do you think he's qualified?
15:19:41 <boegel> Heffalump: Microsoft uses Haskell ? for what purpose?
15:19:47 <Heffalump> writing GHC, duh :-)
15:20:05 <gzl> the head GHC people work at Microsoft Research
15:20:08 <SyntaxNinja> Lemmih: aetion isn't my company
15:20:21 * boegel didn't know that and will stop using ghc now
15:20:34 <Lemmih> SyntaxNinja: He lacks self-confidence regarding his english pronounciation and maths skills -whats your opinion?
15:20:34 <SamB> Microsoft *uses* it or employs people to use it for their own ends?
15:21:00 <gzl> I don't think they use it, Microsoft Research is an industrial research lab like any other one
15:21:04 <gzl> the people just do their own work
15:21:11 <zipper> it's ok though! the haskell guy works for the *british* microsoft research! not us of a! :D
15:21:28 <SamB> wait, they have Microsoft Research in the US too?
15:21:34 <gzl> of course
15:21:39 <SyntaxNinja> haskell guys plural, there are 2 of them
15:21:52 <gzl> both named simon, amazingly
15:22:03 <zipper> who's the other one?
15:22:04 <Heffalump> we should demand one is renamed.
15:22:05 <gzl> Simon Marlow
15:22:17 <gzl> Heffalump: no, we should demand more Simons
15:22:51 <SyntaxNinja> there's also Peter Simons
15:22:54 <SyntaxNinja> and Simon Thompson
15:22:58 <gzl> yeah, Thompson.
15:22:59 <SamB> why? two compiler-maintainers aren't enough?
15:23:07 <SyntaxNinja> also Simon Peyton Jones, Mark Jones, and some other one I think
15:23:09 <SyntaxNinja> hehee
15:23:12 * SyntaxNinja sneaks onto the list
15:23:21 <SamB> Simion Peyton Jones is the first guy.
15:23:27 <SamB> the one who is not the other guy?
15:23:38 <SyntaxNinja> SamB: that is trivially true
15:23:44 <gzl> well I was thinking of Peyton Jones as the Simon, and Marlow as the other Simon
15:23:52 <SamB> yes, exactly.
15:24:09 <SamB> so you can't say "also Simon Peyton Jones"
15:24:13 <SyntaxNinja> well, I think Simon Thompson is the other simon, and spj and simonmar are "the simons"
15:24:15 <gzl> i concur
15:24:32 <SyntaxNinja> but you can just say "simon" because all the cool kids know by context which one you're talking about.
15:24:34 <gzl> ah, that's additional
15:24:51 <SamB> I'm not a cool kid then
15:25:08 <gzl> I only meant between the Simons, Marlow is the other one
15:25:26 <SyntaxNinja> jaffacake will be sad to know that he's the other simon
15:25:38 <gzl> eek, he's here?!
15:27:27 <boegel> gzl: not now he isn't
15:28:20 <gzl> phew.
15:28:34 <boegel> gzl: oh, he is :p
15:28:44 * boegel laughs
15:28:56 * SamB writes a compatability module called Regex.hs
15:29:53 <gzl> :(
15:31:16 <gzl> I'm constructing a String, but I need to use 6 ++'s to do it. should I just write them all out, or write the stuff in an list and fold with (++) or something?
15:32:18 * stepcut just uses lots of ++
15:32:26 <gzl> ok.
15:33:00 <TFK> Wonderful, if I <pre> the enumeration, I can <pre> the code! How didn't I think of this sooner? :-/
15:33:21 <stepcut> you could use a list and concat I suppose
15:34:35 <TFK> concat is what I'd use...
15:35:12 <SamB> @type Text.Regex.subRegex
15:35:14 <lambdabot> Text.Regex.subRegex :: Text.Regex.Posix.Regex
15:35:14 <lambdabot>                        -> String
15:35:14 <lambdabot>                        -> String
15:35:14 <lambdabot>                        -> String
15:36:48 <boegel> @eval concat ["foo","bar"]
15:36:49 <lambdabot> foobar
15:36:55 <boegel> gzl: like this
15:39:23 <SamB> okay, where is unsafePerformIO again?
15:39:46 <SamB> oh right, System.IO.Unsafe
15:41:29 <SyntaxNinja> who told him?!
15:41:51 <SamB> I just noticed this import in Text.Regex
15:43:42 <Heffalump> ah, that's FFI related so it's OK.
15:43:47 <gzl> boegel: yeah, actually, this is a lot more readable. the ++ are heavy on the eyes.
15:43:49 <Heffalump> s/OK/'OK'/
15:44:18 <wagle> man, its almost like i see the substring "unsafe" here every day
15:44:28 <skew> TFK: I thought you did?
15:44:38 * SamB doesn't see why Text.Regex.Posix.regexc has IO in its type in the first place
15:44:53 <SamB> er, regexec
15:45:00 <SamB> not regexc
15:45:05 <TFK> skew, regarding the <pre>? I did some silly things... (I'm yet to do the colouring)
15:45:22 <wagle> @type Text.Regex.Posix.regexec
15:45:31 <lambdabot> Text.Regex.Posix.regexec :: Text.Regex.Posix.Regex
15:45:31 <lambdabot>                             -> String
15:45:31 <lambdabot>                             -> IO (Maybe (String, String, String, [String]
15:45:31 <lambdabot> ))
15:45:47 <SamB> oh, now I notice that Text.Regex.Posix is generated from a .hsc file
15:49:05 <SamB> @plugs Text.Regex.subRegex "(foo)" "foo" "\1"
15:49:10 <lambdabot> Variable not in scope: `Text.Regex.subRegex'
15:49:43 <wagle> SamB: look at the source/implementation
15:49:51 <SamB> wagle: hmm
15:50:27 <wagle> seems to be peeking, using FFI, etc..  i have no experience with any of that
15:50:46 <skew> TFK: I think you noted hours ago that everything would line up if you used pre for the enumeration
15:50:46 <SamB> I don't have 6.4...
15:50:57 <TFK> Ah, yes.
15:51:10 <TFK> I repeat myself from overjoyment.
15:51:34 <wagle> i dont either..  hmm  actually i'm looking at haskell on bare metal's implementation..  d'oh
15:52:28 <Heffalump> Text.Regex.Posix is a binding to the standard Posix regex library, AIUI
15:52:53 <SyntaxNinja> wow... hackage would be impossible to install without cabal ;)
15:53:34 <SamB> I just remembered that haskell.org has this wonderful thing called documentation on it
15:53:52 <SamB> sure enough, it expands those thinies
15:54:03 <skew> SamB: by clicking on the apropriate links your hard drive can also partake of this documentation
15:54:05 <Lemmih> SyntaxNinja: How so?
15:54:23 <SamB> skew: I have only 6.2.2 docs!
15:54:36 <SamB> well, I could download 6.4 docs but why bother?
15:54:48 <SyntaxNinja> Lemmih: so many dependencies
15:54:51 <skew> I've got a local copy of many things, just in case haskell.org is ever down, or my network is down
15:55:01 <SamB> I don't have 6.4
15:55:07 <skew> You could start there...
15:55:11 <blue17> Can any of direct me to the best basic tutorial to haskell for someone new to functional programming?
15:55:17 <SyntaxNinja> Lemmih: can you check in an example hackage.config file?
15:55:30 <skew> The stuff in 6.4 looks pretty cool
15:55:34 <jjing> man still no clue how IO works damn tricky
15:55:39 <SyntaxNinja> Lemmih: Yet Another Haskell Tutorial is pretty good
15:55:45 <Lemmih> SyntaxNinja: Cabal doesn't install dependencies automatically. You have to install the deps by hand with or without Cabal.
15:55:55 <SyntaxNinja> Lemmih: yeah, but it would be a pain without cabal
15:56:25 <skew> SamB: you should get a copy of 6.4 just to play with the new cool stuff, if nothing else
15:56:38 <skew> also I think they fixed that annoying "Main thread GC'd" bug
15:56:40 <Lemmih> How so? './configure && make && make install' is just as easy as with Cabal.
15:57:15 <Lemmih> (all the deps had easy make-based build systems)
15:57:33 <SyntaxNinja> Lemmih: did they work with ghc 6.4?
15:57:39 <SyntaxNinja> how 'bout that file?
15:57:48 <SyntaxNinja> ie did they have the correctly formated package.conf file?
15:58:12 <SyntaxNinja> did they check for their dependencies and give a readable error message if they weren't installed? or did they just give linking errors?
15:59:11 <Lemmih> Pretty sure they gave readable error messages.
15:59:24 <SamB> skew: well, yes, but I don't think I have enough disk space to have 6.2 and 6.4 both
15:59:42 <Lemmih> SyntaxNinja: "Config { databaseName = "", databaseUser = "", tarProgram = "", moveDst = "", pkgPrefix = "" }
15:59:46 <Lemmih> "
16:00:48 * boegel leaves for some sleepy time
16:01:13 <jjing> http://www.pastebin.com/274342 anyone has an idea why that doesnt work?
16:01:58 <blue17> So how long have you all been programming in Haskell?
16:02:15 <Lemmih> blue17: Little more than a year.
16:02:34 <blue17> Thats cool.
16:03:15 <jjing> anyone has an idea?
16:03:30 * Heffalump realises he's been using Haskell for 7 years or so
16:04:35 <Lemmih> jjing: 'return (parseCommands file)'
16:05:16 <jjing> ok that made the errors go away :D thanks
16:06:02 <Lemmih> jjing: And you can't use 'fromMaybe' on a list.
16:07:59 <SyntaxNinja> Lemmih: before when you compiled something without dependencies installed, GHC would just complain during the build phase
16:08:19 <jjing> Lemmih: ok ill start debugging
16:08:40 <Lemmih> SyntaxNinja: It would complain about missing/unknown packages.
16:08:44 <jjing> mm fromMaybe on the head of a list can right?
16:09:01 <Lemmih> @type Data.Maybe.fromMaybe
16:09:06 <lambdabot> Data.Maybe.fromMaybe :: forall a. a -> Maybe a -> a
16:09:13 <SyntaxNinja> Lemmih: dbspec.create is supposed to create the databse, right?
16:09:44 <Lemmih> SyntaxNinja: No. It created the static DB info used by HaskellDB.
16:10:12 <jjing> this will be a long night
16:10:15 <jjing> damn IO
16:10:22 <SyntaxNinja> Lemmih: do I go make the database by hand, or what?
16:11:14 <Lemmih> SyntaxNinja: You have to create the database by yourself but DBSpec.realizeDB can create the tables.
16:12:16 <Lemmih> Automatically creating the database would in any case be a dirty hack.
16:13:26 <jjing> Lemmih: fromMaybe on a string works perfectly
16:14:00 <Lemmih> jjing: As the second argument?
16:14:03 <jjing> so i dont see why it doesnt work if i apply it to the head of a list of strings
16:14:19 <jjing> ye
16:14:31 <jjing> oh wait
16:14:32 <Lemmih> @plugs fromMaybe 'c' "I should fail"
16:14:33 <jjing> its not a string
16:14:39 <lambdabot> Couldn't match `Maybe Char' against `[Char]'
16:14:39 <lambdabot>         Expected type: Maybe Char
16:14:39 <lambdabot>         Inferred type: [Char]
16:14:39 <lambdabot>     In the second argument of `fromMaybe', namely `"I should fail"'
16:14:39 <lambdabot>     In the first argument of `show', namely
16:14:40 <lambdabot>         `(fromMaybe 'c' "I should fail")'
16:14:49 <jjing> its a *command* type
16:15:38 <Lemmih> Ah. And Command is of type 'Maybe a'?
16:15:44 <jjing> ye
16:15:50 <jjing> it works ive tested it
16:15:58 <jjing> but that damn IO stuff is freaking me out
16:15:58 <Lemmih> Great.
16:16:15 <Lemmih> Yeah, I/O is evil.
16:16:26 <xerox> Why?
16:16:38 <jjing> that return(parseCommands file) returns an IO string
16:16:41 <jjing> which is not what i need
16:17:04 <jjing> i mean
16:17:06 <Lemmih> xerox: It conflicks with referential transparency.
16:17:09 <jjing> IO [command]
16:17:54 <jjing> is there some hack available to convert it ? :)
16:18:12 <Lemmih> jjing: You can't get rid of the IO part.
16:18:34 <jjing> but i need the content of the file
16:22:56 <TFK> Hmmm, hscolour seems to introduce redundant newlines to the code... wonder why.
16:24:01 <Lemmih> jjing: Yes, you can get that as an IO action.
16:24:01 <TFK> Besides that (and CSS for beautification), my pastebin works fine.
16:24:06 <jjing> wow i love those non-informative errors
16:24:18 * SamB tests code, now that he has sent it to dons
16:24:23 <jjing> it doesnt even say which line
16:24:35 * TFK splits by "\n" and concats
16:24:43 <blackdog> SamB: Fire, Ready, Aim.:)
16:24:46 <Lemmih> jjing: Not using GHC?
16:24:59 <jjing> i use ghc
16:25:03 <jjing> ghci
16:25:07 <SamB> @type [] -- baz
16:25:09 <_SamB_lambdabot> Prelude.tail: empty list
16:25:13 <lambdabot> [] :: forall a. [a]
16:25:16 <jjing> that error i get ye
16:25:17 <SamB> hmm
16:25:23 <jjing> except for head
16:25:28 <Lemmih> GHC always give line:column info.
16:25:29 <jjing> no line given or whatever
16:25:44 <jjing> Fail: prelude.head empty list
16:25:44 <SamB> I must have done something stupid
16:25:51 <Lemmih> Exceptions are of course different.
16:26:28 <SamB> oh, wait, I can't test that one anyway.
16:26:42 <Palle> jjing, if you have hugs installed you could try that one ... afair does it allways gives line number.
16:26:43 <jjing> i have no idea where this happens
16:26:51 <SamB> well, not without changing "ghci-6.4" to something else
16:26:58 <jjing> i run a module which requires ghci
16:27:03 <Palle> ah
16:27:14 <TFK> http://tfk.is-a-geek.org/pastebin/3.html <--- :-D
16:27:35 <SamB> @google hawiki irc paste
16:27:37 <_SamB_lambdabot> http://haskell.org/hawiki/HaskellIrcPastePage
16:27:38 <lambdabot> http://haskell.org/hawiki/HaskellIrcPastePage
16:27:46 <Lemmih> Palle: Hugs doesn't append file and line numbers to exceptions.
16:27:48 <xerox> wow!!
16:27:52 <SamB> @topic-snoc http://haskell.org/hawiki/HaskellIrcPastePage
16:27:53 <_SamB_lambdabot> do not know that channel
16:28:04 <TFK> I could play with .hscolour, try to  find a better colour scheme.
16:28:19 <TFK> Anyway, guys, you're invited to use http://tfk.is-a-geek.org/
16:28:55 <xerox> I was planning to add Haskell synhl to lisppaste, but this one is nice :)
16:29:00 <Palle> TFK, are you russian or just having a russian name?
16:29:10 <SamB> @reboot
16:29:11 <_SamB_lambdabot> Unknown command, try @listcommands.
16:29:11 <lambdabot> Unknown command, try @listcommands.
16:29:14 <TFK> I'm actually Israeli.
16:29:18 <Palle> Lemmih, ahh, missed that one.
16:29:39 <Palle> TFK, Ok.
16:29:43 <TFK> But originally from Moscow.
16:29:44 <Lemmih> TFK: Neat.
16:29:47 <SamB> @dynamic-reload topic
16:29:47 <TFK> There, the story of my life!
16:29:47 <_SamB_lambdabot> module reloaded
16:29:48 <lambdabot> not enough privileges
16:29:54 <SamB> @topic-snoc http://haskell.org/hawiki/HaskellIrcPastePage
16:29:55 <_SamB_lambdabot> I do not know the channel http://haskell.org/hawiki/HaskellIrcPastePage
16:30:01 <Palle> TFK, aga ty iz russki :)
16:30:03 <SamB> @topic-snoc #haskell http://haskell.org/hawiki/HaskellIrcPastePage
16:30:04 --- topic: set to '["logs: http://www.tunes.org/~nef/logs/haskell/","http://www.haskell.org/learning.html","http://haskell.org/hawiki/HaskellIrcPastePage"]' by _SamB_lambdabot
16:30:23 <TFK> Palle, zdarovo bratan!
16:30:33 <Palle> TFK, Dobrye vecher. :)
16:30:34 <TFK> :-P
16:30:46 <TFK> U nas uje utro...
16:30:46 <SamB> @quit
16:30:48 <lambdabot> not enough privileges
16:30:53 <Palle> TFK, Ya iz danii, tak ya ne mnogo russki govorit.
16:31:06 <TFK> :-)
16:31:06 <Palle> TFK, aga.. no vecher zdes' :)
16:31:14 <Lemmih> SamB: Why put that in the topic?
16:31:21 * TFK nods
16:31:35 <TFK> Lemmih, competition to my own pastebin, obviously :-P
16:31:36 <SamB> Lemmih: well, it is a place to paste
16:31:46 <Lemmih> But we have @paste...
16:31:49 <Lemmih> @paste
16:31:50 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
16:32:10 <SamB> so?
16:32:38 <SamB> anyway, I've improved the topic module now, so who cares whether what I wanted to use it for was a good idea?
16:32:56 <SamB> @topic-init
16:33:06 <SamB> @topic-init #haskell
16:33:07 --- topic: set to '["logs: http://www.tunes.org/~nef/logs/haskell/","http://www.haskell.org/learning.html"]' by lambdabot
16:33:11 <Palle> TFK, pochemu ty v IL?
16:33:14 <jjing> i hate it that haskell doesnt give me a clue about what is wrong
16:33:23 <TFK> Palle, immigriroval, davno.
16:33:57 <Palle> TFK, aga, luchsher rabotaet?
16:34:27 <TFK> Er? Ya poka ne rabotayu, 17 let, vsyo-taki.
16:34:27 <Cale> jjing: what's the error message?
16:34:32 <Lemmih> @topic-snoc #haskell http://www.haskell.org/ghc/survey/start.cgi
16:34:33 --- topic: set to '["logs: http://www.tunes.org/~nef/logs/haskell/","http://www.haskell.org/learning.html","http://www.haskell.org/ghc/survey/start.cgi"]' by lambdabot
16:34:57 <jjing> Cale: Fail:prelude.head: empty list
16:35:09 <Palle> TFK, okej tak ya ne znayu. :)
16:35:26 <TFK> I think it's about time we moved back to English ;-)
16:35:41 <Palle> properly. :(
16:35:43 <Palle> :) even
16:35:58 <TFK> heh
16:36:36 <Cale> jjing: ah, yeah, that's annoying. One thing you could do is to go to each likely cause of the problem and put your own version of head in the where clause, with a different error message.
16:36:43 <Palle> aga ya ponimayu..
16:37:03 <SamB> of course, *this* lambdabot is no better until dons applies my patches and @reloads topic
16:37:04 <Palle> TFK, you were not very old then your parents moved to israel or?
16:37:16 <TFK> yeah, quite young.
16:37:26 <jjing> Cale: im trying that
16:37:47 <Palle> TFK, didn't read "davno" for some reason, stupid me
16:37:50 <jjing> to bad there is no such thing as echo or print in haskell
16:38:09 <blackdog> jjing: use Debug.trace. Even better, don't use 'head' or 'tail' - they're partial functions.
16:38:20 <Cale> jjing: there's Debug.Trace trace
16:38:21 <jjing> i dont use head or tail
16:38:22 <TFK> nah ;-)
16:38:30 <jjing> debug.trace?
16:38:35 <jjing> how does that work
16:38:40 <blackdog> Cale: oops. yeah, that one. :)
16:38:45 <Cale> yeah, you can cause things to be printed when values are evaluated
16:38:46 <jjing> my program still need to run
16:38:52 <jjing> how
16:39:03 <SyntaxNinja> Lemmih: I get this error user error (ERROR:  permission denied for relation packages)
16:39:07 <SyntaxNinja> on the cgi page
16:39:10 <Cale> http://www.haskell.org/ghc/docs/latest/html/libraries/base/Debug.Trace.html
16:39:42 <Lemmih> SyntaxNinja: The apache user must have access to the tables.
16:40:45 <SyntaxNinja> Lemmih: so this is some postgres command I have to run, right?
16:41:53 <Lemmih> Yeah. GRANT ALL ON [table] TO [user];
16:43:11 <TFK> Well, I'm off to bed. Will try to mess with the colour scheme/CSS tomorrow. You're encouraged to use the provisional version meanwhile :-)
16:43:57 <Palle> TFK, spakoni nochi
16:43:58 <Palle> :)
16:44:23 <TFK> Aga, i tebe priyatnih snov ^_^
16:45:59 <Palle> ya muzhno snov tozhe. :)
17:03:06 <SamB> @timein sydney
17:03:10 <lambdabot>   Friday, April 22, 2005 at 10:04:09 AM EST
17:05:45 <dons> moin
17:09:12 <SyntaxNinja> hi dons
17:10:13 <mikehammad> ok, here's my question about the programming challenge
17:10:43 <mikehammad> is there a minimal supersequence with a size less than n^2-n+1
17:10:56 <Pseudonym> Yes.
17:11:18 <mikehammad> ok.  are there any general hints?
17:11:25 <mikehammad> i don't want to spoil it at all
17:11:46 <Pseudonym> You're assuming that I actually know the answer. :-)
17:11:54 <Pseudonym> Actually, I have a nice set of conjectures.
17:12:08 <mikehammad> aha, is the kinda of math well known?
17:12:26 <mikehammad> i'd assume it is...but dunno much about it
17:12:29 <Pseudonym> Well, recreational maths is a long and noble discipline, as is combinatorica.
17:12:41 <mikehammad> i noticed it has some connection with superstrings
17:12:57 <mikehammad> think they're interesting for studying the genome, right?
17:13:42 <Pseudonym> Yeah.
17:14:01 <Pseudonym> They're also used in combinatorial-type problems.
17:14:09 <Pseudonym> Like, say, enumerating all isomers of some chemical.
17:14:19 <mikehammad> hmm interesting
17:14:50 <Pseudonym> There's an interesting approach which I haven't tried yet.
17:14:57 <Pseudonym> Which is to treat strings algebraically.
17:15:05 <mikehammad> hmm
17:15:17 <mikehammad> i'm unsure what that means
17:15:49 <jjing> ok that friggin ass program works finally
17:16:13 <Pseudonym> Let me think.
17:16:14 <Pseudonym> OK.
17:16:28 <Pseudonym> Here's an example.
17:16:46 <Pseudonym> Suppose you want to know how many strings consisting of only a's and b's, of length n, there are.
17:16:57 <mikehammad> ok
17:17:06 <Pseudonym> You can represent all such strings in regular expression form, as (a + b)^n
17:17:13 <mikehammad> right
17:17:21 <Pseudonym> Where + is multiset union./
17:17:29 <Pseudonym> (It's important that it's a multiset.)
17:17:52 <Pseudonym> If you then interpret a as 1 and b as 1, then that gives you the number of strings.
17:17:58 <Pseudonym> 2^n
17:18:09 <mikehammad> right
17:18:39 <Pseudonym> And you can use this technique to work out how many strings there are of some form, by building up an algebra for the form.
17:19:25 <mikehammad> ok.  so how difficult is finding a generator for minimal length supersequences?
17:19:27 <Pseudonym> Let me see if I can find a link.
17:19:49 <mikehammad> do you have a program that is proven to generate minimal supersequences?
17:19:57 <Pseudonym> Sure.
17:20:03 <Pseudonym> But it's exponential.
17:20:14 <mikehammad> i've been casually poking at this for a few days, but no solution yet
17:20:18 * Pseudonym nods
17:20:30 <Pseudonym> Well, you should be able to generate the first few lengths the "obvious" way.
17:20:45 <Pseudonym> i.e. generate all strings, and all permutations, and see if all of the permutations are substrings.
17:21:00 <mikehammad> aha, i have found a way to generate supersequences that are size n^2-n+1 quickly
17:22:24 <mikehammad> it strikes me that knowing how to generate minimal supersequences helps to quickly test if a given string is a superstring
17:22:30 <mikehammad> i mean, supersequence
17:25:00 * Pseudonym nods
17:25:05 <Pseudonym> "superstring" works
17:25:13 <mikehammad> ;)
17:25:48 <Pseudonym> I wish I could find a link I had on the algebra of sequences.
17:25:54 <Pseudonym> It was a really nice little tutorial.
17:26:10 <mikehammad> hmm, i can google for it maybe
17:26:22 <mikehammad> have some good keywords?
17:26:38 <Pseudonym> No.  If I did, I'd have found it by now. :-)
17:26:55 <mikehammad> hehe
17:27:14 <Pseudonym> Got it.
17:27:18 <Pseudonym> But the link is down at the moment.
17:27:31 <Pseudonym> www.math.uwaterloo.ca/~dmjackso/publications/sequences.ps
17:27:40 <mikehammad> ok great!
17:29:52 <mikehammad> this math can actually be more than recreational for me.  i have to pass the u of chicago's math series next year.  they're taught by lazlo babai, a major combinatorics guy.  he has a specially affinity for erdos problems, mainly because he worked with the guy
17:31:28 <Pseudonym> Oooh, you might end up with an Erdos number of 2.
17:32:07 <mikehammad> heh i highly doubt that.  i'm a programming languages student...i hope to have the distinction of passing his course
17:32:12 <Pseudonym> :-)
17:32:49 <Igloo> So you will co-write the exam; he'll do the questions, you'll do the answers  :-)
17:33:20 <blackdog> is it ethical for an author to review his own co-written pape? :)
17:33:31 <mikehammad> hehe
17:33:31 <shrimpx> mikehammad: who do you work with at UC?
17:33:39 <mikehammad> john reppy
17:33:42 <Pseudonym> It is when Erdos was your co-author.
17:33:43 <shrimpx> nice
17:33:56 <shrimpx> i had a friend who was there for a term last fall and left
17:34:00 <shrimpx> working with reppy
17:34:06 <mikehammad> oh yea, jason?
17:34:08 <shrimpx> ya
17:34:15 <mikehammad> he was my officemate
17:34:17 <mikehammad> hehe
17:34:21 <shrimpx> hah cool
17:34:23 <mikehammad> that's wild
17:34:24 <mikehammad> hehe
17:34:36 <shrimpx> we went to PSU together
17:34:48 <mikehammad> right on, so you're from oregon?
17:34:52 <shrimpx> ya
17:35:18 <mikehammad> that's coo.  what did jason say about uchicago?
17:35:22 <mikehammad> he kinda left abruptly
17:35:50 <shrimpx> ya he liked the school and people but i guess he figured that PL research wasn't for him?
17:36:01 <mikehammad> that's what i figured
17:36:38 <shrimpx> he's going into law =)
17:36:38 <mikehammad> he was also starting babai's course.  that always puts a damper on things
17:37:10 <shrimpx> haha
17:37:35 <shrimpx> you guys have quals, right?
17:37:40 <mikehammad> nope
17:37:45 <shrimpx> oh nice
17:37:49 <shrimpx> just a project?
17:37:50 <mikehammad> we have a master's thesis
17:37:52 <mikehammad> yep
17:37:59 <mikehammad> ~40 pages
17:38:09 <shrimpx> cool. quals are the devil's work. everyone's getting rid of them, it seems
17:38:20 * shrimpx is starting at UW this fall
17:38:27 <mikehammad> plus, we need to pass these insane math courses
17:38:47 <mikehammad> oh nice, that's an accomplishment getting into that school
17:39:03 <mikehammad> what kind of research?
17:39:08 <shrimpx> PL
17:39:10 <shrimpx> :)
17:39:17 <mikehammad> :)
17:39:41 <mikehammad> i didn't know UW had that much in functional pl research
17:40:54 <shrimpx> they're growing quickly. i'm not set on _functional_ stuff either
17:41:20 <shrimpx> dan grossman did a lot of work on types for low level systems and verification and the like, which i seem to be attracted to lately
17:41:52 <mikehammad> cool
18:05:37 <gzl> is there some equivalent of cssPage for standardQuery in WASH? can't find one
18:12:02 <gzl> easy enough to roll my own, just wondering if I missed something
18:21:18 <SamB> @karma me
18:21:19 <lambdabot> me has a karma of 0
18:21:24 <SamB> @karma SamB
18:21:25 <lambdabot> You have a karma of 1
18:21:30 <SamB> 1?
18:22:07 <SamB> Did karma get reset lately, or is there a problem with state?
18:22:36 <dons> interesting..
18:22:54 <dons> oh, 'me' isn't working
18:23:01 <dons> by the looks of it
18:23:12 <SamB> I was talking about the @karma SamB
18:23:17 <SamB> not the @karma me
18:23:20 <dons> what was it before?
18:23:39 <dons> was it not 1?
18:24:00 <SamB> I don't know, I'll search meme...
18:24:45 <wagle> @karma wagle i
18:24:46 <lambdabot> You have a karma of 0
18:24:58 <wagle> @karma wagle i
18:24:59 <lambdabot> You have a karma of 0
18:25:07 <wagle> @help
18:25:08 <lambdabot>  @help <command> - ask for help for <command>
18:25:20 <wagle> @help karma
18:25:20 <lambdabot> return a person's karma value
18:25:40 <SamB> @listcommands karma
18:25:41 <lambdabot> karma provides: karma karma+ karma-
18:26:52 <wagle> what?  only i can change my karma!
18:27:12 <wagle> thats the whole point.  i'm responsible!
18:27:21 <wagle> </sill-rant>
18:27:24 <wagle> </silly-rant>
18:27:24 <SamB> wagle: so submit good patches to lambdabot
18:27:39 <wagle> i wanted a negative or imaginary karma
18:28:11 <wagle> well, i hope to find time to get @index working
18:28:19 <SamB> well, seeing as there is no karmasqrt, probably imaginary is hard
18:28:41 <dons> not very hard, really :}
18:29:06 <wagle> only if i have never seen lambdabot or haddock before
18:29:28 <wagle> hours of staring at it, 5 minutes of programming
18:29:57 <dons> @type (Data.Complex.:+)
18:29:58 <lambdabot> (Data.Complex.:+) :: forall a.
18:29:58 <lambdabot>                      (RealFloat a) =>
18:29:58 <lambdabot>                      a -> a -> Data.Complex.Complex a
18:30:07 <SamB> dons: well, sure. not that hard.
18:30:33 <SamB> but what is the point?
18:30:41 <dons> no point, really.
18:30:49 <wagle> i'm a complex sort of guy...
18:31:29 <SamB> I suppose maybe a way for special people to set imaginary karmas would be interesting, though
18:31:35 <SamB> or complex
18:33:41 <SamB> @plugs sqrt (-1) :: Data.Complex.Complex Float
18:33:45 <lambdabot> Type constructor or class not in scope: `Data.Complex.Complex'
18:33:56 <SamB> @plugs sqrt (-1) :: Complex Float
18:33:57 <lambdabot> Type constructor or class not in scope: `Complex'
18:34:13 <SamB> what is the point of a plugs like this?
18:35:37 <dons> troll. Complex is not in scope in runplugs. easy enough to fix.
18:35:39 <wagle> @plugs sqrt(-1)
18:35:41 <lambdabot> NaN
18:35:58 * wagle runs off
18:36:05 <SamB> anyway, -0.0 :+ 1.0 just doesn't have the same ring to it as i...
18:38:34 <SamB> dons: so, you do not like my biggish 6.2 patch, or you want to talk about it?
18:39:08 <dons> oh, I do like it, but rather than add a new binding to Text.Regex, I wrote a simple h98 function to strip comments
18:39:16 <SamB> ah
18:39:34 <SamB> what did you do with the other bit?
18:40:03 <dons> the others were comitted, I think. the Map patch was in an earlier TheHunter patch he sent me
18:40:12 <SamB> ah
18:41:02 <SamB> I noticed that you applied the ones for the topic module (I ran darcs send to see what you didn't apply yet)
18:41:44 <dons> yep. everything should be applied now, other than Text.Regex which I rewrote, and the Map patch, which I already had a patch for.
18:42:54 <SamB> yes, I see now that I have pulled the latest to my working dir (after unpulling that patch from my clean copy)
18:43:29 <dons> it's all ok?
18:44:06 <SamB> let me see if I can unpull a patch which was involved in a collision
18:45:44 <waltz> Of all the channels I have visited, there is no channel with this many people which stays on topic as well as you Haskellians do :)
18:46:06 <waltz> or Haskellers... whatever way you prefer it
18:46:18 <dons> lambdafolks, perhaps.
18:46:36 <SamB> we were (almost) totally off topic some time recently
18:46:52 <waltz> ya, but that's rare
18:47:20 <SamB> it was probably of fairly general interest, though
18:47:55 <SamB> I mean how many channels don't talk about other languages and compilers and what languages C/C++ compilers should be written in?
18:48:53 <waltz> true
18:49:09 <SamB> @topic-cons foo
18:49:10 <lambdabot> I do not know the channel foo
18:49:52 <waltz> @help
18:49:52 <lambdabot>  @help <command> - ask for help for <command>
18:50:29 <SamB> @google hawiki irc paste
18:50:31 <lambdabot> http://haskell.org/hawiki/HaskellIrcPastePage
18:50:32 <waltz> Is lambdabot's website down?
18:50:46 <SamB> would it be appropriate to include http://haskell.org/hawiki/HaskellIrcPastePage in the topic?
18:51:04 <SamB> dons: hmm?
18:51:11 <dons> waltz, www.cse.unsw.edu.au/~dons/lambdabot.html ?
18:51:17 * SamB forgot to address his question
18:51:30 <waltz> thanks
18:51:43 <dons> SamB, not sure.
18:52:26 <SamB> I added it earlier (which is how I got into fixing that error message in the Topic module), but someone said something about @paste
18:52:49 <SamB> actually, I could have used the @paste to get that url just now...
18:52:55 <SamB> but I always forget about it
18:53:33 <waltz> What exactly is "darcs"?
18:53:46 <SamB> darcs is the coolest thing!
18:54:18 <SamB> its an RCS
18:54:24 <SamB> it is decentralized
18:54:25 <waltz> ah
18:54:43 <dons> it's really nice. cvs feels like sticky tar on my fingers compared to darcs
18:54:48 <SamB> @version
18:54:49 <lambdabot> lambdabot 2p380, GHC 6.4 (OpenBSD i386)
18:54:49 <lambdabot> darcs get http://www.cse.unsw.edu.au/~dons/lambdabot
18:55:12 <SamB> you can try it on lambdabot here if you install it
18:55:45 <SamB> or is that why you wanted to know in the first place?
18:56:06 <waltz> I wanted to know for the sake of learning..
18:56:28 <SamB> well, personally I like to know what darcs is for the sake of using
18:57:02 <waltz> Does it work on Win32?
18:57:20 <SamB> it works okay if you don't try to use SSH
18:57:37 <SamB> I'm told you can get it to work over ssh with windows, but I didn't manage it
18:58:10 <SamB> do you have to do anything special to get sending to work right in win32?
18:58:22 <SamB> hmm, maybe I should ask in #darcs...
18:58:33 <SamB> or, well, try it
18:59:15 <waltz> sending?
18:59:38 <waltz> Until I get my other drives, I'm stuck with win32...
19:01:30 <SamB_XP> hmm, well for some reason Outlook is telling me I might have a virus
19:01:55 <SamB_XP> which is actually encouraging, since that would indicate that darcs has a clue about how to send mail on win32
19:02:18 <SamB_XP> I don't even know why outlook was doing anything, really
19:02:31 <waltz> ok well forget the whole thing for now... I don't want another mess on my hands
19:02:40 <waltz> Thanks anyway
19:03:36 <SamB> I just realized that outlook probably doesn't have a clue how to send email...
19:04:03 <blackdog> that would seem to be a flaw in a mailer
19:04:46 <SamB_XP> well, yeah
19:05:14 <SamB_XP> really, just a lack of configuration
19:07:22 <blackdog> *grin* yeah, I know. i just like the inversion of the "every program expands until it can read mail" dictum
19:07:54 <SamB_XP> I thought that only applied to programs developed at MIT?
19:08:35 <blackdog> i wasn't aware that it was qualified - i thought it was a global rule.
19:08:59 <blackdog> 's a point, actually - does lambdabot have an email address yet?
19:12:05 <JohnMeacham> I am beginning to suspect the THIH algorithm is quadratic or worse in complexity.
19:13:50 <blackdog> THIH?
19:13:58 <blackdog> template haskell?
19:14:27 <JohnMeacham> typing haskell in haskell. it is the type checker I use in jhc. Does anyone know the complexity of the Helium type-checker? it seems to have a lot of nice properties.
19:15:17 <Pseudonym> JohnMeacham: Have you seen Martin Sulzmann's paper on checking fundeps using constraints?
19:15:26 <blackdog> hey, what were you talking about with the "chaotic iterator" you mentioned yesterday? I grepped the sources but couldn't work out what you were talking about.
19:15:46 <Pseudonym> http://www.comp.nus.edu.sg/~sulzmann/
19:15:53 <Pseudonym> Actually, a lot of his papers are useful.
19:15:58 <Pseudonym> On type checking using constraints.
19:16:07 <Pseudonym> Which, he believes, gives better error messages.
19:16:14 <ozone> Pseudonym: i think they're really, really slow right now though
19:16:19 <ozone> (implementations, that is)
19:16:52 <SamB_XP> isn't the Helium typechecker oversimplified?
19:16:53 <Pseudonym> Yeah, but loading your whole program in one go is slow anyway. :-)
19:16:59 <JohnMeacham> Yeah, I have been looking into those. I worry that they might make it more difficult to implement some extensions ghc has though.
19:17:08 <Pseudonym> More seriously, I think the slowness is implementation detail.
19:17:21 <Pseudonym> But I haven't tried, so it's just a gut feeling.
19:17:30 <rasfar> Am I missing something, or does jhc *really* need >500 MB heap to compile Hello World?  (In all due respect.)
19:18:02 <SamB_XP> wow, that even beats Java, doesn't it!
19:18:03 <ozone> rasfar: seems that way on my machine, atleast
19:18:07 <JohnMeacham> Well, the results of typechecking are stored in the ho file in jhc, so it doesn't need to be that fast. mainly I am concerned that it is really really slow compared to ghc right now so I am suspecting there is a complexity issue.
19:18:15 <ozone> CosmicRay: btw, did you write a Python network programming book?
19:18:27 <CosmicRay> ozone: I did, yes
19:18:32 <blackdog> in order to make an apple pie, you need the whole universe (to misquote sagan (i think))
19:18:45 <ozone> CosmicRay: ah, i just saw it on sale at the conference, and figured there weren't too many john goerzens around ...
19:18:52 <CosmicRay> blackdog: maybe you need billions and billions of apples
19:19:00 <CosmicRay> ozone: :-)  AFAIK, only one other
19:19:02 <SamB_XP> in order to make an apple pie from scratch, you must first create the universe
19:19:17 <SamB_XP> @google "apple pie from scratch" "the universe"
19:19:17 <JohnMeacham> chaotic iteration is how I do fixpoint iteration for abstract interpretation. I have two implementations FixpointFinder and FindFixpoint, neither of which I am happy with and both of which are too slow. mainly, I think through clever programming, the Map lookups should not need to happen more than once, but I have yet to be clever enough to make it happen.
19:19:19 <lambdabot> http://library.thinkquest.org/C003763/pdf/planet02.pdf
19:19:42 <blackdog> SamB_XP: yah, that one. i'm the king of inexact recollection. if i ever have to take the stand, i'm in real trouble.
19:20:19 <SamB_XP> I think I meat have seen it:
19:20:24 <SamB_XP> @google hawiki quotes
19:20:25 <lambdabot> http://lambda-the-ultimate.org/node/view/609
19:20:37 <SamB_XP> @google site:haskell.org hawiki quotes
19:20:39 <lambdabot> http://www.haskell.org/hawiki/QuotesPage
19:20:52 <SamB_XP> on there?
19:21:02 <JohnMeacham> Mainly I am debating whether to base a new one on http://research.microsoft.com/Users/simonpj/papers/putting/index.htm or the constraint programming stuff.
19:21:55 <CosmicRay> ozone: which conference was this, btw, out of curiosity?
19:23:50 <ozone> CosmicRay: linux.conf.au, happening right now
19:24:40 <CosmicRay> ah
19:24:46 <CosmicRay> I know a few debian folk there
19:25:35 <SamB_XP_> wow, I remembered that quote verbatim! it must be a good quote, because I am horrible it remembering things!
19:26:08 <ozone> CosmicRay: oh?  i'll say hi to them if i know them ...
19:26:23 <CosmicRay> ozone: I know benjamin mako hill is there, at least
19:26:39 <CosmicRay> the other names are slipping my memory at the moment...
19:26:39 <ozone> CosmicRay: ok, don't know him :)
19:26:55 <rasfar> SamB_XP_, ozone: So by "create the universe" in this case is the Prelude? (or am i out of context)
19:27:05 <ozone> hmm, i know a few australian debian people; only non-aussie debian folks i know off the top of my head that i can remember is thom may
19:27:25 <ozone> rasfar: well, i tried compiling Hello World on a machine with 1GB of RAM and it started going into swap
19:27:41 <ozone> so, i'm now compiling jhc on a machine with 4GB of RAM :)
19:27:44 <SamB_XP_> what are debian people?
19:27:58 <SamB_XP_> are they maintainer-folk or user-folk?
19:27:59 <CosmicRay> people that work with debian
19:28:00 <ozone> SamB_XP_: bunch of weirdos, basically :}
19:28:02 <CosmicRay> could be either
19:28:08 <JohnMeacham> It is much faster after the first compile, after it has cached all the standard libraries.
19:28:21 <ozone> JohnMeacham: for me, it was going mad on type inferencing iirc
19:28:21 <rasfar> well, yeah -- JohnMeacham (sorry if this is old, but I just joined and don't know how to find logs!) -- are you anticipating  ---- ah
19:28:23 <blackdog> ozone: rub it in. my poor little pb is struggling badly. i want one of those linuxonpower.com g5s - two of my mates have won machines already.
19:28:39 <rasfar> So if I can only get it to compile anything *once*, it'll help?
19:28:42 <ozone> JohnMeacham: this is on mac os x, btw.  dunno if you've got any successful reports on that platform yet ...
19:28:44 <SamB_XP_> aren't the logs in the topic?
19:28:47 <ozone> blackdog: "won"?
19:28:53 <CosmicRay> ozone: I think martin may be there
19:28:59 <blackdog> ozone: i've run jhc on macos.
19:29:12 <CosmicRay> martin the former dpl
19:29:15 <blackdog> ozone: yeah. They give you g5s for porting software. Tom did OpenCobol.
19:29:16 <ozone> ah
19:29:19 <ozone> yeah, likely is
19:29:20 <CosmicRay> oh, I think bdale garbee was the other one
19:29:23 <JohnMeacham> Yeah, that is why I was just noticing, that type inference is taking way way too long. it is just the straight algorithm from typing haskell in haskell, but I think it has complexit issues.
19:29:25 <ozone> blackdog: jesus
19:29:40 <JohnMeacham> yeah just compile anything once, then future compiles of other things will be faster.
19:29:41 * CosmicRay decides it would be useful to port his haskell stuff
19:29:42 <ozone> JohnMeacham: didn't the THIH paper say that it was, well, never intended to be speedy? :)
19:29:57 <blackdog> i did a couple, but was too embarrassed to submit 'em - the port consisted of changing CPPFLAGS or something. :)
19:30:01 <ozone> JohnMeacham: will do, thanks
19:30:05 <rasfar> wish me luck (450 MB RAM, 400 MB swap...) ....
19:30:08 <ozone> blackdog: ah, yeah, i remember that compo
19:30:26 <JohnMeacham> yeah, but I wasn't sure if that was due to just general slowness or an actual algorithmic problem. it would change how I would go about making it faster.
19:31:06 <ozone> JohnMeacham: i suspect it's the latter, the paper really didn't seem like it was geared to any inefficiency in any form
19:31:09 <SamB> @get-topic
19:31:10 <lambdabot> Unknown command, try @listcommands.
19:31:13 <ozone> but it's been a while since i've read it
19:31:21 <SamB> @listcommands topic
19:31:22 <lambdabot> No module "topic" loaded
19:31:26 <SamB> h
19:31:28 <SamB> er, oh
19:31:31 <dons> @help topic
19:31:32 <lambdabot> topic provides: topic-tell topic-cons topic-snoc topic-tail topic-init
19:32:03 <SamB> huh?
19:32:07 <JohnMeacham> Hmm.. then I guess I will have to replace the algorithm alltogether. Which I guess is good because I can add rank-n types and multiparameter type classes while I am at it.
19:32:12 <ozone> bbak
19:32:32 <SamB> @topic-tell #haskell
19:32:33 <lambdabot> ["logs: http://www.tunes.org/~nef/logs/haskell/","http://www.haskell.org/
19:32:33 <lambdabot> learning.html","http://www.haskell.org/ghc/survey/start.cgi"]
19:32:40 <SamB> @topic-tail #haskell
19:32:41 --- topic: set to '["http://www.haskell.org/learning.html","http://www.haskell.org/ghc/survey/start.cgi"]' by lambdabot
19:33:01 <SamB> @topic-cons http://meme.b9.com/cview.html?channel=haskell&date=today
19:33:02 <lambdabot> I do not know the channel http://meme.b9.com/cview.html?channel=haskell&
19:33:02 <lambdabot> date=today
19:33:14 <SamB> @topic-cons #haskell http://meme.b9.com/cview.html?channel=haskell&date=today
19:33:15 --- topic: set to '["http://meme.b9.com/cview.html?channel=haskell&date=today","http://www.haskell.org/learning.html","http://www.haskell.org/ghc/survey/start.cgi"]' by lambdabot
19:34:58 <SamB> @topic-tail #haskell
19:34:58 --- topic: set to '["http://www.haskell.org/learning.html","http://www.haskell.org/ghc/survey/start.cgi"]' by lambdabot
19:35:05 <SamB> @topic-cons #haskell logs: http://meme.b9.com/cview.html?channel=haskell&date=today
19:35:06 --- topic: set to '["logs: http://meme.b9.com/cview.html?channel=haskell&date=today","http://www.haskell.org/learning.html","http://www.haskell.org/ghc/survey/start.cgi"]' by lambdabot
19:37:32 <mwc> Oh goody, GCC 4.0 is out
19:37:36 <mwc> I can't wait to break GHC!
19:37:54 <SamB> what is the point of 4.0?
19:38:00 <SamB> I mean, what does it try to do?
19:38:11 <mwc> SamB, autovectorization is what I think will be a boon
19:38:23 <SamB> hmm
19:38:27 <mwc> Especialyl for those of us with G4s
19:38:32 <SamB> sounds tricky
19:38:37 <SamB> does it do MMX?
19:38:41 <mwc> Probably
19:38:54 <SamB> without those wierd builtin functions?
19:39:08 <mwc> I think it included a generic optimization system that allowed all autovectorizing optimization
19:39:19 <SamB> doesn't seem to be in testing
19:39:23 <mwc> the actual vector processor unit support is down in the code generation pass I'd assume
19:39:24 <SamB> (debian testing, that is)
19:39:26 <mwc> What distro?
19:39:33 <mwc> Hahaha, wait for 2007
19:39:40 <mwc> What's in stable?
19:39:48 <SamB> 2.95 I think
19:40:02 <SamB> I have 2.95 and 3.3 installed
19:40:10 <mwc> I run 3.3 here
19:40:19 <mwc> but when I get tiger I'll be going to 4.0
19:40:33 <SamB> what distro is that?
19:40:42 <SamB> OS X?
19:40:50 <mwc> Yep
19:41:13 <mwc> I'm pessimistic about linux ever working well on modern notebook hardware
19:41:33 <mwc> hardware isn't as commiditized
19:41:50 <JohnMeacham> fascinating! http://research.microsoft.com/Users/simonpj/papers/boxy/
19:41:53 <SamB> it could work if Linux was the predominant OS
19:41:58 <SamB> but not on Apples
19:42:21 <SamB> unless Apple wanted to do it that way, which would be very atypical of Apple
19:42:35 <mwc> No, it's no different than PC
19:42:38 <mwc> probably easier
19:42:47 <mwc> The Mac's firmware is an IEEE standard
19:42:52 <SamB> really now?
19:42:55 <mwc> as opposed to bios
19:42:59 <SamB> okay, that does sound easier...
19:43:04 <mwc> yeah, OpenFirmward, IEEE 1275 I believe
19:43:09 <mwc> Suns use it too
19:43:32 <mwc> The problems I have on this machine would be a) Broadcom 802.11g, and b) ATI Radeon 9700M
19:43:42 <SamB> PC laptops/notebooks are notorious for using wierd hardware with strange changes to windows involved...
19:43:55 <mwc> which aren't any better on the x86 side, except that you have binary drivers hacks
19:44:02 <mwc> SamB, yeah, Toshibas
19:44:27 <SamB> however, windows may lose market share at some point.
19:44:29 <mwc> I was looking at a thinkpad and linux or a powerbook with OS X and I figured the powerbook was probably less hassle
19:44:35 <SamB> it is, after all, not even a distro.
19:45:31 <mwc> Well, it's a proprietary stack on top of a Mach/BSD system
19:45:37 <mwc> www.opendarwin.org
19:45:48 <mwc> they have their own distro of apple's open source component
19:45:50 <SamB> I'm talking about windows, not OS X!
19:45:57 <mwc> oh, right
19:45:59 <SamB> OS X is a *nix distro, isn't it?
19:46:14 <mwc> Yeah, bsd-ish
19:46:21 <mwc> it's the direct descendent of NeXT
19:46:37 <SamB> was NeXT also a *nix?
19:46:42 <mwc> it was
19:46:52 <SamB> hmm, I never knew that.
19:47:10 <mwc> yeah, it's the mach microkernel running an in-kernel UNIX server
19:47:25 <mwc> which is based on BSD code
19:47:38 <mwc> The Darwin kernel also uses a nifty C++ based IOKit
19:47:49 <SamB> ich, C++
19:47:54 <mwc> It's good for drivers
19:47:59 <SamB> umm...
19:48:05 <mwc> It's actually a subset of C++\
19:48:15 <SamB> most things are
19:48:26 <SamB> there is just too much C++ to use it all...
19:49:03 <mwc> bhttp://developer.apple.com/documentation/DeviceDrivers/Conceptual/IOKitFundamentals/Features/chapter_2_section_1.html#//apple_ref/doc/uid/TP0000012
19:49:37 <SamB> hmm, firefox doesn't speak bhttp ;-P
19:49:41 <mwc> You inherit a base class ethernet driver
19:50:21 <mwc> and get a PCI device object, write your driver against behavior in the superclass and talking to that object
19:51:55 <mwc> I hear tell it's much faster to develop a driver
19:52:15 <SamB> this is a good thing?
19:52:20 <mwc> Yeah
19:52:29 <SamB> how?
19:52:43 <mwc> Well if you're writing a driver for your USB christmas tree light system
19:52:45 <SamB> doesn't it only encourage the hardware makers to make incompatible hardware?
19:52:59 <mwc> you subclass a USB device driver and don't have to bother with bus stuff
19:53:05 <mwc> you just deal with it as a serial device
19:53:16 <mwc> SamB, no no no, it's the driver architecture
19:53:27 <SamB> obviously, the problem is that there is no standard for serial devices over USB
19:53:29 <mwc> nothing to do with the hardware
19:53:36 <mwc> SamB, right, exactly
19:53:40 <SamB> they really dropped the ball on that one
19:53:57 <mwc> but USB is a bus that moves data serially between nodes
19:53:58 <SamB> somebody should really write an RFC or something about that
19:54:19 <mwc> that's what a USB device driver abstracts to, it's a device that you can talk to similarly to write() and read()
19:54:59 <SamB> if it is that simple, why is there no way to do it that way in Linux?
19:55:08 <mwc> SamB, I'm sure there is
19:55:13 <SamB> I mean, using read() and write() precisely
19:55:21 <mwc> hah, good question
19:55:45 <SamB> I somehow suspect its a bit more complicated
19:55:55 <mwc> IOKit is just designed to abstract common tasks out of the individual drivers
19:56:06 <mwc> like actually aquiring and owning a device on the USB tree
19:56:21 <rasfar> I believe you *can* use write(2)/read(2) in linux and BSD, but mostly people use libraries built over these?
19:56:39 <mwc> Dunno, haven't look into writing a USB driver in FreeBSD
19:57:16 <rasfar> It sounds interesting.  I mean, they exist in C obviously, but everything's so much prettier in Haskell.
19:57:29 <mwc> I propose a Haskell Driver project for Linux
19:57:43 <rasfar> cool.  I'll port for BSD!
19:57:54 <SamB> they've got the /dev/usb/{lp*,mouse*,mice}, some kind of block device support, and of course lets not forget HID
19:58:09 <SamB> but no /dev/usb/tty*
19:59:27 <rasfar> apropos bsd gives me a pretty long list: dare I post it here?
19:59:36 <rasfar> s/bsd/usb/ (sorry)
19:59:41 <dons> @paste
19:59:41 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
20:00:10 <mwc> I'm amused that Discovery channel is doing a documentary on a submarine I just read about in a Clive Cussler book
20:00:50 <SamB> I'm sure hardware manufacturers would also appreciate a standard USB serial-port abstraction
20:01:05 <mwc> pah, that's software!
20:01:10 <mwc> USB already moves data
20:01:19 <mwc> you just need to make your device and driver speak the standard
20:01:45 <rasfar> I'm still waiting for a  firefox window -- killed nearly everything to compile Hello World with jhc :/
20:01:58 <SamB> well, you see, I'm sure most hardware vendors would agree that the best driver is the one somebody already wrote well for you
20:02:11 <mwc> jhc... the Java Haskell Compiler?!
20:02:19 <CosmicRay> heh
20:02:59 <mwc> Sentoku class Submarines carried 3 fighter-bombs
20:03:02 <mwc> I'm impressed
20:04:58 <rasfar> Is the j in "jhc" for John?  not sure
20:05:36 <SamB> I mean, all the gamepads/joysticks these days use HID (except the X-box one, but that uses a nonstandard connector), all the printers use the standard parallel port abstraction, and all the traditionally-serial devices have Yet Another Proprietary (meaning special to the device) Serial Port Emulation Protocol...
20:05:57 <rasfar> I don't know how to paste to the wiki yet (*blush*), but can see "apropos usb" (OpenBSD 3.6-and-a-half) at http://69.11.109.114/ for now.
20:06:19 <SamB> rasfar: you go to thing called edit
20:06:40 <rasfar> doesn't that attempt to edit the last dude's box?
20:06:50 <SamB> no, it edits the whole page
20:07:15 <SamB> then you copy the last dudes box and replace his code with yours
20:07:18 * mwc starts walking in 5 days
20:07:20 <mwc> woot!
20:07:27 <rasfar> okay ... hey! jhc is past the "Type Inference" stage -- yay!
20:07:39 <dons> @version
20:07:40 <lambdabot> lambdabot 2p385, GHC 6.4 (OpenBSD i386)
20:07:40 <lambdabot> darcs get http://www.cse.unsw.edu.au/~dons/lambdabot
20:08:01 <rasfar> Watch that crutch technique, eh mwc!....
20:08:30 <dons> rasfar, have you used openbsd for long?
20:09:03 <mwc> rasfar, you haven't seen my pneumatic exoskeleton
20:09:11 <dons> (it's good to see another user. I think that makes 5 so far on #haskell)
20:09:34 <dons> @google haskell openbsd
20:09:35 * mwc wants broadcom support and then will dual-boot OpebBSD
20:09:35 <lambdabot> http://www.cse.unsw.edu.au/~dons/openbsd/
20:09:41 <mwc> http://www.aircast.com/products/product.htm?pid=13&pgid=99162368-6D50-42BB-9623-885042499C71&rnd=167432827
20:09:45 <mwc> check that out, rasfar
20:10:12 <SamB> OpenBSD, is it better than FreeBSD?
20:10:23 <dons> it's different
20:10:24 <mwc> SamB, more secure, integrated crypto
20:10:28 <mwc> no pesky USA export restrictions
20:10:30 <dons> more archs
20:10:35 <dons> cleaner code
20:10:49 <SamB> ooh, no pesky export restrictions. cool.
20:10:57 <mwc> SamB, it's based in Canada
20:11:13 <dons> encrypted swap by default ;)
20:11:37 <mwc> When terrorists can't buy military-grade crypto on the open market, then they've won!
20:11:45 <rasfar> darn -- no newlines in that paste to the hawiki paste ... (hey it's a few lines shorter anyhow!)
20:11:51 <SamB> dons: considering that swap is already really, really slow I suppose that is not a bad idea
20:12:05 <dons> how often do you use swap?
20:12:12 <dons> it's so rare, no one caress.
20:12:14 <SamB> too often
20:12:25 <SamB> I have 256 MiB of RAM
20:12:32 <SamB> its getting more and more frequent
20:12:42 <dons> and once you hit swap, you may as well give up anyway. performance isn't something you will have after that point
20:12:43 <SamB> also, I open WAAY to many tabs in firefox
20:12:44 <mwc> I use a lot of swap:
20:12:45 <mwc> VM: 8.45G + 85.0M   130921(84) pageins, 112197(0) pageout
20:13:02 <SamB> dons: or at least minimize some windows
20:13:09 <rasfar> SamB: OpenBSD better than FreeBSD? I'm not really sure.  OpenBSD is derived from NetBSD, and I'm thinking of trying Net (never tried that).
20:13:22 <dons> Net and Open are quite different now too.
20:13:43 <dons> though there's still cross-pollination of new drivers
20:13:45 <SamB> I imagine. Nets claim to fame is crazy portability.
20:13:45 <rasfar> Hmmm...  For my purposes, probably any of the three (or linux too) would do.
20:14:04 <rasfar> "cross-pollination" -- that's great
20:14:26 <rasfar> Yeah -- wonder how their laptop support is (Open's is okay I've heard).
20:14:33 <mwc> i prefer "code promiscuity"
20:14:46 <SamB> crazy portability /= laptop integration
20:15:09 * rasfar still compiling "Hello World"!
20:15:18 * SamB almost said "!="! oh, the horror!
20:15:24 <SamB> rasfar: still?
20:15:45 <rasfar> SamB: ooh yeah....
20:15:50 <SamB> rasfar: what kind of CPU do you have?
20:16:00 <dons> SamB, you feel up to writing a lambdabot module for me? :)
20:16:09 <rasfar> Athlon 1.4GHz
20:16:29 <SamB> for some reason my kernel thinks mine is 16.43 GHz, which would make it many times faster than any other PII I've heard of...
20:17:04 <dons> I'd like @todo, @todo++, so #haskell users can make suggestions
20:17:09 <dons> simple state module
20:17:14 <SamB> hmm.
20:17:24 <SamB> what is @todo++?
20:17:36 <dons> or @todo-snoc, whatever.
20:17:49 <SamB> I was just going to ask if thats what you meant.
20:17:58 <dons>  @todo lists the todo [String], @todo++ <msg> adds a new string
20:18:10 <SamB> hmm, @todo-metoo might be nice, too
20:18:41 <dons> recording the nick of the user who made the suggestion would be useful for feedback
20:18:54 <dons> so a [(String,String)] state, perhaps
20:19:05 * SamB wonders how to do @todo-metoo without race conditions...
20:19:54 <dons> should be fairly easy to adapt @state, or @karma
20:26:47 <rasterfar> hmm. that's the first time I've froze-up hard on this system! had to cycle the power! ouch...
20:31:50 <mwc_> dons, as token openbsd guy
20:31:58 <mwc_> do you know if it's easier to write a driver for linux or openbsd?
20:32:42 <dons> hmm. not sure. I suspect openbsd, as from netbsd, the kernel is cleaner and simpler. But that's conjecture
20:32:56 <mwc_> cool
20:34:06 * rasterfar has no clue
20:34:51 <rasterfar> Well, jhc now compiles Hello World fast -- but reports bunch of errors.  :(
20:45:22 <JohnMeacham> What sort of errors?
20:45:59 <rasterfar> Should I tyr another paste to hawiki?  How to I make sure there's newlines?!....
20:46:34 <rasterfar> My module is:
20:46:38 <JohnMeacham> I know there is a bug that causes it to abort if you enable -flint. point 3 on the todo list http://haskell.org/hawiki/Jhc
20:47:18 <rasterfar> module Main(main) where  main:: IO () main = putStrLn "Hello, World!" (with obv. newlines)...
20:47:44 <rasterfar> errors include: hs.out_code.c:39:19: wchar.h: No such file or directory
20:48:32 <JohnMeacham> Ah, that is probably because I have not tried to compile it on something other than linux and macosX. if you can look in hs.out_code.c and see how to make it portable to BSD and let me know I can integrate your changes.
20:48:54 <JohnMeacham> you can just try editing hs.out_code.c and recompiling it with gcc.
20:48:54 <rasterfar> (I would post the rest on the hawiki but I need to learn how to ....
20:49:01 <rasterfar> Okay #1
20:49:28 <rasterfar> Okay #2 ... will try; seems reasonable
20:49:51 <JohnMeacham> If there is someone out there that knows about Linux OpenBSD C code portability they can probably help. It is most likely just a matter of changing the #include's.
20:50:09 <JohnMeacham> Or, you are on FreeBSD?
20:50:43 <rasterfar> It is OpenBSD (3.6+) actually.
20:51:16 <rasterfar> I may be able to fix it -- got hs.out_code.c open anyway .... very interesting ....
20:51:28 <JohnMeacham> The boilerplate is in data/jhc_rts.c BTW if you figure out what is wrong.
20:52:36 <rasterfar> Thanks.  Commenting out the wchar.h include gets past the first error.
20:52:52 <rasterfar> Next error was/is: hs.out_code.c: In function `fPreludeXDIOXDputStrX243':
20:52:52 <rasterfar> hs.out_code.c:757: error: syntax error before "v9"
20:52:52 <rasterfar>  <more snipped>
20:53:47 <rasterfar> That would be the "intmax_t" typedef it seems.
20:54:42 <JohnMeacham> Hmm.. you might have to supply suitable typedefs for things that OpenBSD doesn't define. those are in ISO C99, so I thought they should be available everywhere...
20:55:43 <rasterfar> They probably are available -- it's just my ignorance; I'll post as I make progress on Hello World!...
20:56:16 <JohnMeacham> okay. yeah, they might be in non standard places. intmax_t should be in inttypes.h or stdint.h I think.
20:57:27 <rasterfar> Okay -- used typedef int intmax_t;  and now LAST error: /home/sai/T11/hs.out_code.c:613: undefined reference to `putwchar'
20:58:02 <rasterfar> oops -- could have somethibg to do with commenting out the wchar.h include, huh? :/
20:59:04 <SamB> @todo
20:59:05 <_SamB_lambdabot>          (__)
20:59:05 <_SamB_lambdabot>          (oo)
20:59:05 <_SamB_lambdabot>    /------\/
20:59:05 <_SamB_lambdabot>   / |    ||
20:59:05 <_SamB_lambdabot>  *  /\---/\
20:59:05 <lambdabot>          (__)
20:59:05 <lambdabot>          (oo)
20:59:05 <lambdabot>    /------\/
20:59:05 <lambdabot>   / |    ||
20:59:05 <lambdabot>  *  /\---/\
20:59:05 <lambdabot>     ~~   ~~
20:59:05 <_SamB_lambdabot>     ~~   ~~
20:59:07 <_SamB_lambdabot> ...."Have you mooed today?"...
20:59:08 <lambdabot> ...."Have you mooed today?"...
20:59:14 <SamB> huh?
20:59:18 <Pseudonym> @moo
20:59:19 <_SamB_lambdabot>          (__)
20:59:19 <_SamB_lambdabot>          (oo)
20:59:19 <_SamB_lambdabot>    /------\/
20:59:19 <_SamB_lambdabot>   / |    ||
20:59:19 <_SamB_lambdabot>  *  /\---/\
20:59:19 <_SamB_lambdabot>     ~~   ~~
20:59:20 <lambdabot>          (__)
20:59:20 <lambdabot>          (oo)
20:59:20 <lambdabot>    /------\/
20:59:20 <lambdabot>   / |    ||
20:59:20 <lambdabot>  *  /\---/\
20:59:20 <lambdabot>     ~~   ~~
20:59:21 <_SamB_lambdabot> ...."Have you mooed today?"...
20:59:23 <lambdabot> ...."Have you mooed today?"...
20:59:23 <ozone> JohnMeacham: i got Hello.hs compiling to hs.out, cheers!
20:59:24 <SamB> @load todo
20:59:25 <_SamB_lambdabot> Unknown command, try @listcommands.
20:59:25 <lambdabot> Unknown command, try @listcommands.
20:59:33 <SamB> @module-load todo
20:59:33 <_SamB_lambdabot> Unknown command, try @listcommands.
20:59:34 <lambdabot> Unknown command, try @listcommands.
20:59:39 <Pseudonym> @dict @foo
20:59:39 <SamB> @listcommands dynamic
20:59:39 <rasterfar> man putwchar gices me nothing, so it's probably not avail...
20:59:39 <_SamB_lambdabot> Supported dictionary-lookup commands:
20:59:39 <_SamB_lambdabot>   @all-dicts @devils @easton @elements @foldoc @gazetteer @hitchcock @jargon
20:59:39 <_SamB_lambdabot>  @lojban @prelude @vera @web1913 @wn @world02
20:59:39 <_SamB_lambdabot> Use "@dict-help [cmd...]" for more.
20:59:39 <_SamB_lambdabot> No module "dynamic" loaded
20:59:40 <lambdabot> Supported dictionary-lookup commands:
20:59:40 <lambdabot>   @all-dicts @devils @easton @elements @foldoc @gazetteer @hitchcock @jargon
20:59:40 <lambdabot>  @lojban @prelude @vera @web1913 @wn @world02
20:59:40 <lambdabot> Use "@dict-help [cmd...]" for more.
20:59:41 <lambdabot> No module "dynamic" loaded
20:59:58 <SamB> @listcommands
20:59:59 <_SamB_lambdabot> Commands: all-dicts arr babel define definitions del-definition devils dice
20:59:59 <_SamB_lambdabot> dict dict-help dummy dynamic-load dynamic-reload dynamic-unload easton echo
20:59:59 <_SamB_lambdabot> elements eurohaskell eval fact fact-cons fact-delete fact-set fact-snoc
20:59:59 <_SamB_lambdabot> fact-update foldoc fortune gazetteer get-definition google help hitchcock
20:59:59 <_SamB_lambdabot> jargon join karma karma+ karma- kind learn leave listchans listcommands
20:59:59 <_SamB_lambdabot> listmodules lojban moo more msg part paste pl pl-resume plugs pointless
20:59:59 <lambdabot> Commands: all-dicts arr babel define definitions del-definition devils dice
20:59:59 <lambdabot> dict dict-help dummy dynamic-load dynamic-reload dynamic-unload easton echo
20:59:59 <lambdabot> elements eurohaskell eval fact fact-cons fact-delete fact-set fact-snoc
20:59:59 <lambdabot> fact-update foldoc fortune gazetteer get-definition google help hitchcock
20:59:59 <lambdabot> jargon join karma karma+ karma- kind learn leave listchans listcommands
21:00:00 <lambdabot> listmodules lojban moo more msg part paste pl pl-resume plugs pointless
21:00:01 <_SamB_lambdabot> prelude quit quote reconnect remember resume seen set-fuel spell state timein
21:00:02 <lambdabot> prelude quit quote reconnect remember resume seen set-fuel spell state timein
21:00:03 <lambdabot> topic-cons topic-init topic-snoc topic-tail topic-tell type vera version
21:00:03 <_SamB_lambdabot> topic-cons topic-init topic-snoc topic-tail topic-tell type vera version
21:00:05 <_SamB_lambdabot> vixen web1913 wiki wikipedia wn world02 yow
21:00:06 <lambdabot> vixen web1913 wiki wikipedia wn world02 yow
21:00:06 <Pseudonym> @foo
21:00:07 <_SamB_lambdabot>          (__)
21:00:07 <lambdabot>          (__)
21:00:08 <dons> SamB, perhaps you can do this in a /msg window??
21:00:09 <_SamB_lambdabot>          (oo)
21:00:10 <lambdabot>          (oo)
21:00:11 <_SamB_lambdabot>    /------\/
21:00:12 <lambdabot>    /------\/
21:00:13 <_SamB_lambdabot>   / |    ||
21:00:13 <lambdabot>   / |    ||
21:00:15 <_SamB_lambdabot>  *  /\---/\
21:00:15 <SamB> dons: good idea
21:00:15 <lambdabot>  *  /\---/\
21:00:17 <_SamB_lambdabot>     ~~   ~~
21:00:17 <lambdabot>     ~~   ~~
21:00:18 <rasterfar> SamB -- cool work on @todo^H^Hmoo .... how about a conversation with lambdabot?...
21:00:19 <_SamB_lambdabot> ...."Have you mooed today?"...
21:00:19 <lambdabot> ...."Have you mooed today?"...
21:00:34 <SamB> rasterfar: it doesn't work!
21:01:05 <rasterfar> SamB, seems to do something .... what were you hopping for?...
21:01:28 <SamB> rasterfar: something that didn't involve the spell-checking kicking in
21:01:34 <dons> SamB, did you add your todo module to config.mk:PLUGINS=
21:01:41 <JohnMeacham> putwchar takes a wchar_t.. you probably can get by with #defining putwchar to putchar. it is not ideal...
21:01:43 <SamB> er, not yet.
21:01:55 <JohnMeacham> Whats with the cows.
21:02:10 <rasterfar> JohnMeacham -- thanks for that advice!
21:02:30 <dons>  SamB was trying out a new command, @todo, but he didn't register the module, so lambdabot tried the nearest match "todo" -> "moo", which prints a cow :)
21:02:49 <SamB> bah, makefiles...
21:02:57 <JohnMeacham> and it won't work with unicode. but perhaps OpenBSD doesn't support unicode yet?
21:03:05 <dons> nope
21:03:23 <SamB> whats the point of hs-plugin(s) if I still have to edit makefiles?
21:03:44 <rasterfar> Yay! it compiles.  There is no output, but the binary runs ... (Is this safe?....)
21:04:38 <Pseudonym> Yes, Haskell is safe.
21:04:42 <Pseudonym> If you don't use unsafePerformIO.
21:05:15 <JohnMeacham> hmm.. it should have output something. what did you typedef wchar_t too?
21:05:23 <rasterfar> But with an experimental compiler, producing no output when we expect "Hello, World!" -- are my files safe?
21:05:30 <JohnMeacham> yeah.
21:05:50 <Pseudonym> @fact _Samb_lambdabot
21:05:50 <rasterfar> Oh -- I didn't typedef wchar_t -- I #define'd putwchar putchar.
21:05:50 <_SamB_lambdabot> I know nothing about _samb_lambdabot.
21:05:51 <lambdabot> _samb_lambdabot: @fact lambdabot.
21:06:00 <JohnMeacham> But I'd stay away from anything that uses writeFile for now.
21:06:00 <Pseudonym> Damn.
21:06:06 <Pseudonym> Trying to get some recursive fun.
21:06:17 <JohnMeacham> what about intmax_t?
21:06:28 <SamB> did the capitalization mess it up?
21:06:31 <rasterfar> Okay, thanks for the warn JohnMeacham (<- do I have to type that?)
21:06:40 <Pseudonym> @fact _Samb_lambdabot
21:06:41 <_SamB_lambdabot> I know nothing about _samb_lambdabot.
21:06:41 <lambdabot> _samb_lambdabot: @fact lambdabot.
21:06:44 <rasterfar> (not as hard to type as Pseudonym however)
21:06:53 <Pseudonym> Yes.
21:07:02 <Pseudonym> @fact lambdabot
21:07:02 <_SamB_lambdabot> lambdabot: @fact _Samb_lambdabot.
21:07:03 <lambdabot> I know nothing about lambdabot.
21:07:03 <lambdabot> _samb_lambdabot.: @fact lambdabot.
21:07:06 <Pseudonym> Woohoo!
21:07:09 <Pseudonym> Two steps!
21:08:16 <Pseudonym> The full stop breaks things too.
21:08:21 * rasterfar sorry -- "which test" showed me /bin/test -- ./test produces expected output!  THANKS!!! -- coolest new toy since chrismas....
21:08:47 <rasterfar> (maybe since longer)
21:10:14 <rasterfar> Anyone who wants to try jhc (at least on i386) -- if you have less than 1G RAM, you better have lots of swap.
21:11:02 <JohnMeacham> The 'ho' files are actually portable between machines. perhaps I could set up a distribution of them for the standard libraries so people won't have to sit through the bootstrap phase.
21:11:14 <SamB> I only have 1G of swap, ono!
21:13:01 <rasterfar> JohnMeacham: I think that would be very helpful.
21:13:02 <Pseudonym> Now the ultimate recursive fun would be this.
21:13:04 <Gahhh> I like the sound of the 'ho' files. gangsta haskellers.
21:13:14 <Pseudonym> If lambdabot didn't print the quotes here:
21:13:21 <Pseudonym> @plugs let q x = x ++ show x in q "@plugs let q x = x ++ show x in q "
21:13:23 <lambdabot> "@plugs let q x = x ++ show x in q \"@plugs let q x = x ++ show x in q \
21:13:23 <lambdabot> ""
21:13:47 <Pseudonym> The two lambdabots would then spend all their time quining each other.
21:14:21 <dons> Pseudonym earns karma for evilness
21:14:25 <rasterfar> ho: laughin', pimpin' and with slightly asian mystique
21:14:29 <dons> @karma+ Pseudonym
21:14:30 <_samb_lambdabot> Pseudonym's karma has been incremented
21:14:30 <lambdabot> Pseudonym's karma has been incremented
21:14:31 <mflux> oh, lambdabot doesn't use notices anymore I see
21:14:38 <Pseudonym> Oooh, I have two lots of karma!
21:14:58 <rasterfar> s/two lots/too much/ !
21:14:59 <SamB> Pseudonym: sadly, on seperate bots
21:15:01 <Gahhh> hmm, gcc 4.0 is out.
21:15:11 <SamB> notice that you could try that recursive hijinx now
21:15:20 <dons> please don't.
21:15:31 * rasterfar grins
21:15:54 <SamB> I just recompiled half of lambdabot to change the nick to all lowercase, and oyu say "please don't"?
21:16:05 <JohnMeacham> Okay, I asked some of my OpenBSD friends to take a look and try to figure out why it isn't working.
21:16:24 <Pseudonym> @fact lambdabot
21:16:25 <_samb_lambdabot> lambdabot: @fact _samb_lambdabot.
21:16:25 <lambdabot> I know nothing about lambdabot.
21:16:26 <lambdabot> _samb_lambdabot.: @fact lambdabot.
21:16:28 <rasterfar> But it *is* working!
21:16:31 <Pseudonym> Hmmm.
21:16:42 <Pseudonym> The full stops still kill you, sadly.
21:16:47 <JohnMeacham> Get it working so it produces output.
21:17:00 <rasterfar> The empty output was (sorry) because /bin/test was in my path before ./test (oops)
21:17:02 <Pseudonym> @fact _samb_lambdabot
21:17:03 <_samb_lambdabot> I know nothing about _samb_lambdabot.
21:17:04 <lambdabot> _samb_lambdabot: @fact lambdabot.
21:17:05 <_samb_lambdabot> lambdabot.: @fact _samb_lambdabot.
21:17:08 <JohnMeacham> or, it is printing "hello, world!"?
21:17:13 <JohnMeacham> oooh.
21:17:21 <rasterfar> I guess you missed that comment before.
21:17:22 <JohnMeacham> I see. I missed that. cool.
21:17:33 <JohnMeacham> what were the changes you had to make again?
21:17:36 <rasterfar> Yep, it works -- thanks a bunch, again!
21:17:36 <SamB> okay...
21:18:14 <rasterfar> Well, the changes I made to hs.out_code.c were three:
21:18:23 <JohnMeacham> and is there an easy thing I can #ifdef on to detect openbsd __OPENBSD__ perhaps?
21:18:27 <rasterfar> 1) comment out the <wchar.h> include.
21:18:28 <SamB> @listcommands fact
21:18:29 <_samb_lambdabot> fact provides: fact fact-set fact-delete fact-cons fact-snoc fact-update
21:18:30 <lambdabot> fact provides: fact fact-set fact-delete fact-cons fact-snoc fact-update
21:18:55 <Pseudonym> @help
21:18:56 <_samb_lambdabot>  @help <command> - ask for help for <command>
21:18:56 <lambdabot>  @help <command> - ask for help for <command>
21:19:00 <rasterfar> 2) typedef int intmax_t;
21:19:06 <Pseudonym> The space there is a good feature. :-)
21:19:12 <rasterfar> 3) #define putwchar putchar
21:19:18 <rasterfar> That's it!
21:19:31 <rasterfar> Whether that would work in all cases I cannot say....
21:20:43 <JohnMeacham> okay. cool. There are other wchar routines which I will have to #define differently too, but other than that it seems good. intmax_t should also probably be 'long long' (it should be bigger than all other integers). I will make the changes to the main tree so it should just work in the future. thanks!
21:20:49 <lambdabot> _samb_lambdabot: @fact lambdabot
21:20:51 <_samb_lambdabot> lambdabot: @fact _samb_lambdabot.
21:20:51 <lambdabot> _samb_lambdabot.: @fact lambdabot.
21:20:57 <Pseudonym> OK, THREE steps.
21:21:06 <Pseudonym> I think that's all you can do with fact.
21:21:21 <Pseudonym> Unless one of the bots had a "." at the end of its nick.
21:21:31 <Pseudonym> Which we won't do. :-)
21:21:32 <rasterfar> You are most welcome.
21:21:43 <JohnMeacham> In the meantime, you can just make the changes to data/jhc_rts.c and recompile jhc if you don't want to keep having to edit the output.
21:21:55 <ozone> JohnMeacham: i had to modify the makefile to get it to compile, btw
21:21:58 <ozone> hunk ./Makefile 35
21:21:58 <ozone> +PackedString.o: PackedString.hs
21:21:58 <ozone> +       $(HC) -i.  $(HCFLAGS) $(GHCOPTS) -ignore-package lang-1.0 -o $@ -c $<
21:21:58 <ozone> +
21:22:02 <SamB> I just tried to do "/nick SamB.", and it didn't seem to do anything anyway
21:22:05 <rasterfar> Ah right, thanks for reminder about jhc_rts.c
21:22:23 <ozone> that's with GHC 6.4, i needed the -ignore-package lang-1.0 flag for PackedString.hs only.  dunno if you already have that patch
21:22:47 * Pseudonym nods
21:25:14 <JohnMeacham> That is because you have some third party unhidden package that depends on lang. it is anoying that ghc-pkg -l doesn't list that fact.
21:26:04 <JohnMeacham> or that ghc doesn't realize you arn't importing anything from said third party packages and auto-ignore them.
21:30:21 <JohnMeacham> I think this is a big misfeature in the current packaging system, but am unsure what the best fix would be. perhaps installed packages should be hidden by default and need to be enabled with -package, that would ensure that the adding of a new package couldn't break other previously working builds.
21:32:57 <rasterfar> 4) cd /usr/bin; sudo ln -s gcc egcc
21:33:50 <rasterfar> s/4/0/
21:34:52 <rasterfar> (maybe not OpenBSD-specific; more of a gcc issue) (I don't have "egcc" in my gcc-3.3.5 installation)
21:37:43 <SamB> what *is* egcc?
21:37:59 <thou> an old enhanced gcc project
21:38:03 <thou> it got merged into 3.x
21:38:06 <thou> i believe
21:38:10 <thou> it was based off of 2.95
21:38:20 <SamB> I just got a nasty error!
21:38:35 <SamB> IRCMessage {msgPrefix = "SamB!naesten@ts001d0844.wdc-dc.xod.concentric.net", msgCommand = "PRIVMSG", msgParams = ["_SamB_lambdabot",":@dynamic-reload todo"]}
21:38:36 <SamB> unloadObj: can't find `Plugins/Todo.o' to unload
21:38:36 <SamB> runIRC: caught exception: user error (unloadObj: failed)
21:38:52 <JohnMeacham> it was merged back into the main gcc tree and there is now just one gcc again. for a while there were two projects, gcc and egcc. the split was mainly social and political.
21:39:07 <SamB> and to top it off, lambdabot claims it was *user error!*
21:39:31 <rasterfar> John, are you aware that building (jhc itself I think it was) requires it?
21:40:15 <JohnMeacham> gcc used to be run as a very closed project, not accepting patches from people that wern't core developers. egcc split off with a open bazar type development model, like the linux kernel. eventually it was realized this worked well for egcc and the projects merged with the open development model embraced.
21:40:25 <JohnMeacham> this is a gross simplification.
21:40:29 <SamB> I thought the other project was egcs?
21:40:44 <Pseudonym> I think egcc was the file name.
21:40:48 <Pseudonym> EGCS was the project name.
21:40:53 <SamB> yes, yes
21:40:55 <thou> SamB: you're right about the proj. name
21:40:58 * rasterfar ahh
21:41:29 <JohnMeacham> egcs has not existed as a seperate project for quite a while now. I think just requiring a 'recent' version of gcc should cover me.
21:41:57 <rasterfar> That, and a fallback to search for resident egcc, would probably be better...
21:42:00 <SamB> JohnMeacham: that, and using the name "gcc"
21:44:50 <JohnMeacham> you can pass '--progc egcc' to jhc to get it to use that version instead.
21:45:47 <rasterfar> hmm ... when I type /away "..." my message doesn't appear in #haskell (only FreeNode) -- so just in case, sadly I must meet someone -- catch up to y'all later.
21:46:34 <SamB> oh great... now I have to recompile all of lambdabot, I think...
22:10:05 <Huskie> Hi i have a simple ? on monads
22:11:12 <Huskie> i have a function to eval an AST to generate code
22:11:42 <Huskie> but I could not use it in Parsec run function
22:15:22 <Huskie> anybody awake here?
22:22:57 <dons> @yow
22:22:58 <lambdabot> Do you like "TENDER VITTLES"?
22:44:18 <thou> dons: i guess he didn't understand your answer to his question
22:48:36 <dons> yeah, guess so :}
22:48:46 <dons> @fortune
22:48:47 <thou> @yow
22:48:48 <lambdabot> "The combination of a number of things to make existence worthwhile."
22:48:48 <lambdabot> "Yes, the philosophy of `none', meaning `all'."
22:48:48 <lambdabot> 		-- Spock and Lincoln, "The Savage Curtain", stardate 5906.4
22:48:48 <lambdabot> Yow!  It's some people inside the wall!  This is better than mopping!
22:58:03 <JohnMeacham> Does anyone have any nice resizable MArray code?
23:07:39 <dcoutts_> JohnMeacham, what do you mean by resizable?
23:08:39 <JohnMeacham> I mean you can change the number of elements in the array as well as its contents.
23:22:27 <dcoutts_> JohnMeacham, in that case, nope, all my array code works with arrays that do not change size once allocated. Are you testing something?
23:28:47 <JohnMeacham> No, I was just going to rewrite the Atom code in jhc since it is a critical path. I can write the needed array code, I just wanted to see if someone has already done it.
23:30:11 <dcoutts_> ah, it sounded like you were looking for a jhc test case
23:34:01 <dons> I have resizeable buffers in Yi, it just checks the length of the buffer against how full it currently is, and then performs:
23:34:04 <dons>     ptr' <- reallocArray0 ptr sz
23:34:07 <dons>     return (FBuffer_ ptr' p e sz)
23:34:18 <JohnMeacham> nope. just trying to mooch some code. jhc doesn't really support arrays yet. (it does, but they are superslow) I am debating what the best minimal sets of primitives should be. I don't want the primitives to have 'complicated' interfaces since the compiler can't really optimize inside them. I want to expose as much as possible to jhcs transformations.
23:34:18 <dons> if need_len >= old_max then resizeFB_ fb (need_len + 2048)
23:35:13 <JohnMeacham> Yeah, I need to store haskell values in it though, not necesarily members of Storable so a malloced array probably won't work well.
23:36:14 <dons> yep.
23:36:40 <JohnMeacham> I think an IORef holding a MArray might be the only way.. I cringe at the number of indirections there are though, this code is suposed to be fast-path. hmm..
23:38:08 <dcoutts_> I don't see any particular reason than an MArray cannot be resizable, it's just the standard instances in the libraries do not provide that feature
23:38:33 <dcoutts_> except for StorableArray
23:38:49 <JohnMeacham> because bounds is not in IO. I think.
23:40:16 <JohnMeacham> Yeah, it is too bad HasBounds is a superclass of MArray. that seems like it might be a mistake.
23:40:34 <dcoutts_> ah, ok. You'd need something like reszie :: array -> m array and the provide an unsafe variant that tries to do the resizing without copying but you've got to promise not to access the old copy
23:40:43 <dcoutts_> just like there is unsafeThaw etc
23:41:58 <JohnMeacham> If HasBounds wern't a superclass, then we could create IOResizableArray and have it be an MArray. (and the old IOArray could just be an instance of both HasBounds and MArray)
23:42:18 <dcoutts_> though actually it should be safe anyway since the bounds would not be shared between the old and new just the underlying array
23:43:23 <dcoutts_> ie the old array variable would be a view into a subrange of the new one (or the other way arround if we're shrinking)
23:44:08 <JohnMeacham> But the resizable array could not be made an instance of MArray, which is anoying.
23:44:19 <dcoutts_> because?
23:44:47 <JohnMeacham> Because then (bounds x) where x is a resizable array would not be a well defined value.
23:46:32 <dcoutts_> but to resize you get a new array value rather, ie ( resize :: (b,b) -> array -> m array ) and not ( resize :: (b,b) -> array m () )
23:46:46 <JohnMeacham> Yeah, but the second is what I want.
23:47:18 <dcoutts_> oh, because otherwse you need to use an IORef, right
23:47:25 <JohnMeacham> yup.
23:47:48 <dcoutts_> yep, in that case it can't be a standard MArray instance :-(
23:47:49 <mwc> Why am I up at 3 am listening to the OPen BSD songs?
23:48:14 <JohnMeacham> which is exactly what I am trying to avoid. Also, it would be nice to use overloaded functions on MArrays on both resizable and non-resizable ones.
23:48:15 <Cale> mwc: heheh
23:48:25 <dcoutts_> I think the MArray interface is not nearly as flexible as it appears to be at first
23:48:35 <JohnMeacham> yeah.
23:48:47 <dcoutts_> I found that when trying to provide an MArray interface to a Gtk Pixbuf
23:49:14 <mwc> Hell, even the damn cat is asleep on top of me
23:49:17 <mwc> It's a message
23:49:43 <dcoutts_> a pixbuf is basically an array allocted in C land and it has a slightly funky indexing function (row strides and padding and whatnot)
23:49:45 * mwc decides Hudak's book won't arrive tomorrow AM and thinks about bed
23:50:05 <JohnMeacham> indeed. removing the HasBounds superclass would help and might be a feasable change, as it is almost backwards compatable, just some type signatures might have to change but no code.
23:50:41 <dcoutts_> however it is fundamentally a 2D array and that cannot fit the MArray interface since all MArrays must be parameterisable by an arbitrary index type
23:51:14 <dcoutts_> it would have worked if the MArray type class was parameterised by the index type too
23:51:24 <JohnMeacham> Hmm.. I can see how that would be tricky.
23:52:03 <dcoutts_> since then most instances would work for any index type but some could be specialised for only certain index types
23:52:07 <JohnMeacham> Perhaps you could create a special index type for 2d pixbufs and have its Ix instance do the right thing.
23:52:42 <JohnMeacham> it could turn any haskell array type into a pixbuf style indexed array.
23:53:19 <dcoutts_> I thought of that but the indexing function does not have access to the thing it is indexing and so it cannot look up the information about padding and rowstrides etc that it needs to calculate the offset correctly :-(
23:54:00 <JohnMeacham> perhaps the index type can contain those values too? but that is rather hacky.
23:54:34 <dcoutts_> the index type itself? as in peano-encoded integers :-) ?
23:55:59 <JohnMeacham> No, I mean declaring something like data Spot = Spot { x,y,stride,padding,width::Int }
23:56:14 <dcoutts_> hmm
23:56:31 <skew> JohnMeacham: What's the problem with arrays?
23:56:33 <JohnMeacham> Just the x and y would choose the point, but the other values would be used to calculate the offset in the Ix instance.
23:56:56 <JohnMeacham> skew: which problem?
23:57:06 <skew> There's more than one?
23:57:19 <dcoutts_> right, it'd be a tad annoying to use and it exposes rather a lot of gumph to the user
23:57:23 <skew> You seemed to have some problem to do with your compiler and Storable instances
23:58:30 <JohnMeacham> skew: we talked about a couple different problems. one is that jhc doesn't implement arrays very well at the moment. an unrelated problem is that I was looking for resizable array code. another problem is that the current definiton of MArray precluded resizable arrays which is lamentable.
23:59:39 <JohnMeacham> indeed.
23:59:41 <dcoutts_> It wouldn't be so bad if readArray/writeArray were class methods of the MArray class but only unsafeRead/unsafeWrite are and they are given the raw offset rather than the index so there's no opportunity to change the behaviour
