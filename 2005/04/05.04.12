00:25:16 <autrijus>     case vals of
00:25:16 <autrijus>         []      -> printf str
00:25:16 <autrijus>         [x]     -> printf str x
00:25:16 <autrijus>         [x, y]  -> printf str x y
00:25:27 <autrijus> is there a way to return this to sanity?
00:26:26 <Gahhh> what is str ?
00:26:33 <autrijus> a random string
00:26:37 <autrijus> user input
00:26:39 <pesco> Oleg's polyvariadic function trick, for example.
00:27:29 <autrijus> hrm. url?
00:27:35 <pesco> Hm? Isn't there a new pragma to enable language extensions?
00:27:41 <autrijus> really?
00:27:49 <pesco> I thought I'd heard somewhere.
00:28:32 <pesco> autrijus: http://okmij.org/ftp/Haskell/types.html#polyvar-fn
00:28:38 <autrijus> danke
00:28:39 <Lemmih> Cabal scans source files for the LANGUAGE pragma.
00:29:33 <pesco> Oh, so it's a Cabal feature?
00:30:09 <pesco> Lemmih: And then it puts the corresponding flags in at compile time, I take it?
00:30:33 <Lemmih> Yepper.
00:30:45 <pesco> I see.
00:32:34 <nlv11757_> pragma's for world domination
00:35:44 * pesco looks at Extension.hs
00:40:53 * earthy_ thinks `and scantily clad females, ofcourse'
00:42:53 <Gahhh> Is the use of "female" instead of "woman" considered sexist in british english ?
00:43:13 <gzl> no
00:45:10 <pesco> Gahhh: Is it anywhere?!
00:45:17 * pesco looks puzzled.
00:45:53 <dons> musasabi, but error :: String -> a, already works for that.
00:45:59 <dons> @google
00:45:59 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- Empty search.
00:46:02 <dons> for example
00:46:14 <nlv11757_> in the following;
00:46:16 <nlv11757_> doit  ::  IntTrees
00:46:16 <nlv11757_> doit  =   read "[(Bin (Bin (Leaf 1) (Leaf (-3))) (Leaf (0)))]"
00:46:16 <nlv11757_> doit2 a = case a of
00:46:16 <nlv11757_>   (Leaf i)
00:46:16 <nlv11757_>     -> return False
00:46:17 <nlv11757_>   _ -> return True
00:46:56 <dons> hmm. not quite. in pure code error works.
00:46:59 <nlv11757_> why does ghci say type of 'doit2 . head $ doit' is (Monad m) => m Bool
00:47:21 <nlv11757_> when did the monad come in....because i am asking it interactively?
00:47:27 <pesco> Lemmih: Which extension do I need for  "type Parameters = forall a. (Typeable a) => String -> a"  ?
00:47:36 <dons> musasabi, btw. are you using an old darcs or a funny mua, none of your patches want to apply
00:47:41 <dons> Fail: Error parsing patchinfo:
00:47:42 <dons> ""
00:47:42 <dons> "[Seperate operations in SeenModule"
00:47:43 <dons> ...
00:47:45 <ibid> nlv11757_: from your use of return
00:47:59 <nlv11757_> ow crap, im so into different languages atm lol
00:48:06 <nlv11757_> i mix them up
00:48:14 <nlv11757_> sry for noobish question lol
00:48:21 <ibid> np :)
00:48:38 <nlv11757_> sick, that you overlook things when dealing with different languages at the time
00:50:45 <dons> @seen TheHunter
00:50:46 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- I haven't seen TheHunter
00:56:43 <dons> http://ideas.web.cse.unsw.edu.au/index.php?module=articles&func=display&ptid=1&aid=455
00:56:49 <dons> SCIgen - An Automatic CS Paper Generator
00:58:25 <Lemmih> nibro_afk: I fixed the Cabal bug.
00:59:02 <Gahhh> dons: it's awesome.
00:59:25 <Gahhh> dons: from my abstract:
00:59:27 <Gahhh> " Object-oriented languages and Smalltalk, while typical in theory, have not until recently been considered private. In fact, few experts would disagree with the improvement of the partition table. We motivate new empathic theory, which we call PodiumDoT."
00:59:54 <Gahhh> a la MegaMonad using LaTeX
01:00:05 <Lunar^> Gahhh: yep
01:00:22 <dons> that's cool.
01:00:24 <dons> @dice 9999999999999999999999999999d9999999999999999999999999
01:00:26 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- 9999999999999999999999999999d9999999999999999999999999 => 0
01:00:32 <dons> musasabi, thanks.
01:00:38 <Gahhh> roflmao. " Decentralized configurations and massive multiplayer online role-playing games have garnered minimal interest from both biologists and electrical engineers in the last several years."
01:03:09 <dons> oh, this is too much fun.
01:03:10 <pesco> dons: Ah, greatness! I'm donating!
01:05:52 <musasabi> dons: 1.0.0rc3, should upgrade probably.
01:06:15 <pesco> Woohoo, the fee includes Coffee breaks!
01:06:17 <jlouis> dons: whee
01:06:55 <jlouis> dons: I take it I should send more patches, when I have them ;)
01:07:05 <dons> patches are good
01:07:11 <dons> @version
01:07:12 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- lambdabot 2p247, GHC 6.4 (OpenBSD i386)
01:07:12 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- darcs get http://www.cse.unsw.edu.au/~dons/lambdabot
01:07:22 <earthy_> why does that get copied to everyone?
01:07:31 * pesco dreams of contributing to lambdabot again.
01:07:37 <dons> earthy?
01:07:47 <earthy_> dons: it's not a public say by lambdabot
01:07:50 <earthy_> 10:08 -lambdabot:#haskell- lambdabot 2p247, GHC 6.4 (OpenBSD i386)
01:08:09 <dons> lambdabot uses notices now, as per the rfc
01:08:10 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- Unknown command.
01:08:16 <earthy_> ah
01:08:33 <dons> no longer will lambdabot fight to the death with its siblings
01:08:48 <dons> earth, we've got a wiki page for this, btw with tips
01:09:00 <dons> @wiki LambdaBot/Notices
01:09:01 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- http://www.haskell.org/hawiki/LambdaBot/Notices
01:09:09 <Oejet> earthy_: Gaim is broken for the moment being.
01:09:12 <earthy_> it was just that I hadn't seen this yet. ;)
01:09:17 <earthy_> oejet: I'm not a gaimer
01:09:18 <earthy_> ;)
01:09:41 <dons> I'm quite amazed that gaim is broken this way.
01:10:00 <dons> how do people go about implementing irc clients without reading the rfc?/
01:10:26 <jlouis> dons: they copy scaffolding code from other projects and alter it
01:10:28 <earthy_> have you read the irc rfc's?
01:10:42 <dons> some of it.
01:10:49 <kosmikus> dons: I'd still request to move back to the old style messages; newbies to Haskell shouldn't first have to configure their clients ...
01:10:49 <earthy_> they suck, don't you agree
01:10:49 <dons> some of one of them, I guess.
01:11:00 <dons> well, not terribly formal.
01:11:08 <kosmikus> I meant #haskell, not Haskell
01:11:15 <earthy_> there's some leeway in implementing
01:11:26 <earthy_> enough to make clients incompatible to eachother
01:11:26 <kosmikus> earthy_: where are you? I though you'd be back this week?
01:11:34 <earthy_> kosmikus: I will be as of tomorrow
01:11:43 <dons> kosmikus: ok. I'll think about this. Maybe there's some room to move.
01:11:45 <earthy_> have to hold the fort at home while they're installing the kitchen
01:11:50 <earthy_> the gf will do so tomorrow
01:11:55 <kosmikus> ok
01:11:59 <blackdog> musasabi: can you make WASH/CGI script stateful? Currently www.cse.unsw.edu.au/~mwotton/vixen is loading the dictionary on every call, which is likely to DoS our server if more than one person accesses it at a time...
01:12:10 <blackdog> s/script/scripts/
01:12:56 <musasabi> blackdog: it is a while since I used wash last time..
01:12:57 <dons> nibro, your patch is in the latest snapshot, btw.
01:12:58 <kosmikus> dons: it's great to keep lambdabot configurable easily to use one style or the other
01:13:16 <dons> that's a good idea!
01:13:59 <dons> I'll address this issue in the next couple of days.
01:14:15 <kosmikus> dons: great, thanks
01:14:32 <nlv11757_> @pointless (\a b -> escape_char a ++ b)
01:14:33 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- (++) . escape_char
01:14:44 <nlv11757_> doh
01:16:11 <autrijus> @pointless \str -> if null str then ' ' else head str
01:16:12 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- s (flip if' ' ' . null) head
01:16:28 <autrijus> mmm if'
01:17:43 <boegel> @seen Itkovian
01:17:44 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- Itkovian is in #haskell. I don't know when Itkovian last spoke.
01:17:49 <nlv11757_> sometimes it uses functions i dont know
01:17:53 <nlv11757_> join for example
01:17:56 <nlv11757_> @type join
01:17:57 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- bzzt
01:18:00 <boegel> Itkovian: are you there ?
01:18:30 <boegel> hi Si\
01:19:37 <earthy_> yay, the s combinator.
01:19:53 <Si\> hi
01:27:37 <JaffaCake> morning #haskell
01:27:56 <Lemmih> Hey JaffaCake.
01:28:20 <pesco> Greetings, JaffaCake.
01:29:43 <gzl> huh
01:30:34 <gzl> how do I parse "\x"? the escaping is screwing stuff up. e.g. do { char '\\'; x <- letter; return x } won't match "\x" but rather "\\x"
01:30:41 <gzl> (with Parsec)
01:31:08 <gzl> but char '\' is invalid because it thinks the second ' is escaped.
01:32:01 <Lemmih> @plugs length "\\x"
01:32:02 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- 2
01:32:44 <boegel> gzl ' \\' means one character, \
01:32:50 <boegel> it should work
01:32:57 <gzl> that's what i thought, but it messes up.
01:33:30 <gzl> *Main> parseTest blah "\x"
01:33:30 <gzl> <interactive>:1:19: lexical error in string/character literal
01:33:30 <gzl> *Main> parseTest blah "\\x"
01:33:30 <gzl> "x"
01:33:49 <Lemmih> That's the correct behaviour.
01:33:53 <gzl> i know.
01:34:41 <Lemmih> Then how does it mess up?
01:35:27 <gzl> sorry, i explained badly. it's doing the correct thing. my code is wrong. i'm wondering how to fix the code to do what i want to do, namely parse "\x" -> "x"
01:35:52 <gzl> or whether it will be too annoying to use \ as an escape character for my thing as well, in which case i can use something like ~ or whatever.
01:37:34 <pesco> Phew, thanks unit tests. ;)
01:37:34 <Lemmih> But "\x" is not a valid Haskell string...
01:37:49 * pesco shakes a fist at asTypeOf.
01:37:51 <dons> how can I print the content of a patch in my repo, if I have a regex to match the patch's name?
01:38:17 <dons> darcs changes --patch=foo doesn't seem to do it.
01:38:33 <jlouis> darcs diff --patch=foo?
01:38:36 <pesco> darcs annotate?
01:38:43 <jlouis> I don't know
01:38:47 * pesco shrugs.
01:39:28 <jlouis> is the vixen module in, by the way?
01:39:44 <pesco> dons: Yes, darcs annotate -p foo
01:39:48 <dons> somewhat, I'm waiting for the rest of the patch from blackdog.
01:40:01 <gzl> Lemmih: oh, hm.
01:40:05 <gzl> Lemmih: i see your point. ok.
01:40:10 <dons> pesco, ah ha!
01:40:21 <pesco> "  annotate      Display which patch last modified something, or display patch contents"
01:40:27 <dons> annotate is a confusing name for "Display which patch last modified something, or display patch contents"
01:40:34 <pesco> Right.
01:40:41 <blackdog> dons: how do you fix the DictModule.o: unknown symbol `_DataziList_words_info'
01:40:45 <blackdog> error?
01:40:52 <dons> isn't that a mac 6.4 error?
01:41:05 <dons> does it happen under 6.2.2?
01:41:11 <blackdog> yeah. still not fixed? 6.2 isn't workin at the moment either, though
01:41:28 <dons> not fixed yet.
01:41:44 <blackdog> ok. broken on 6.2.2 as well, i think.
01:41:48 <dons> hmm...
01:41:49 <blackdog> i'll check one more time
01:42:01 <nlv11757_> @plugs and $ zipWith (==) "prefix" "prefix is here"
01:42:03 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- True
01:42:15 <dons> blackdog, cause if i find that it isn't broken, you're in big trouble!
01:42:19 <nlv11757_> is there a builtin function hasPrefix?
01:42:50 <blackdog> :) i shall check one more time.
01:42:51 <dons> annotate works rather well. thanks pesco
01:43:02 <Lemmih> @type Data.List.isPrefixOf
01:43:03 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- Data.List.isPrefixOf :: forall a. (Eq a) => [a] -> [a] -> Bool
01:43:12 <nlv11757_> sweet, i knew it must have existed
01:43:13 <pesco> No problem, dons.
01:43:14 <nlv11757_> thanks
01:47:13 * boegel leaves
01:49:18 <dons> mac-a-bot: @version
01:49:19 -mac-a-bot(~mac-a-bot@stealth.CeNTIE.NET.au)- lambdabot 2p247, GHC 6.2.2 (Darwin Power Macintosh)
01:49:19 -mac-a-bot(~mac-a-bot@stealth.CeNTIE.NET.au)- darcs get http://www.cse.unsw.edu.au/~dons/lambdabot
01:49:31 <dons> blackdog: no issues with 6.2.2
01:49:32 <blackdog> *shamefaced*
01:49:36 <pesco> Heh, to deprecate means "to ward off by prayer" in its latin root. Hehe.
01:49:38 <blackdog> ok, so i broke something...
01:49:38 <dons> mac-a-bot: @quit
01:50:24 <dons> now, where's my wacking paddle
01:50:57 <df_> morning all
01:56:09 <dons> hmm, why do we have this behaviour at all:
01:56:11 <dons> lambdabot foo
01:56:12 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- Unknown command.
01:56:19 <dons>   | myname `isPrefixOf` text
01:56:55 <dons> makes the bot noisier than it should be.
02:02:32 <nibro> Lemmih: cool, can you send me your fix?
02:02:42 <nibro> @seen shapr
02:02:43 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- shapr is in #haskell. I don't know when shapr last spoke.
02:03:26 <nibro> gee, that one should be added to @quote
02:03:38 <nibro> "I don't know when shapr last spoke."
02:04:26 <theorbtwo> @quote
02:04:27 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- getRandItem: empty list
02:04:52 <theorbtwo> Well, something certainly needs to be added to @quote...
02:04:58 <Lemmih> nibro: Sent.
02:05:03 <blackdog> @quote
02:05:05 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- getRandItem: empty list
02:05:35 <theorbtwo> @quote theorbtwo
02:05:36 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- theorbtwo hasn't said anything memorable
02:05:37 <dons> hmm.
02:05:44 <Lemmih> @quote lambdabot
02:05:45 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- lambdabot hasn't said anything memorable
02:05:51 <nibro> Lemmih: thanks... eh, how do I use it? :)
02:06:04 <Lemmih> nibro: Got the darcs repo of Cabal?
02:06:24 <theorbtwo> @seen theorbtwo
02:06:25 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- theorbtwo is in #haskell. Last spoke just now.
02:06:42 <nibro> Lemmih: no, I use the one shipped with ghc
02:06:45 <dons> lambdabot: @quit
02:06:51 <dons> @quote
02:06:52 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- getRandItem: empty list
02:07:02 <dons> grr.
02:07:34 <nibro> Lemmih: where can I get the cabal repo, and how can I make it override the shipped version in my ghc?
02:07:36 <dons> @karma nobody
02:07:37 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- nobody has a karma of 1
02:07:45 <nibro> @karma dons
02:07:46 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- dons has a karma of 4
02:07:49 <Lemmih> nibro: darcs get http://cvs.haskell.org/darcs/cabal/
02:08:21 <nibro> @karma nnibro
02:08:22 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- nnibro has a karma of 0
02:08:24 <nibro> @karma nibro
02:08:25 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- You have a karma of 0
02:08:37 <nibro> buaaahh :(
02:08:54 <dons> poor nibro
02:09:12 <theorbtwo> @karma theorbtwo
02:09:13 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- You have a karma of 0
02:09:15 <nibro> so what can I do to increase my karma above the level of zombie?
02:10:07 <blackdog> submit bogus bug reports like me. Don loves that.
02:10:08 <dons> karma is handed out by fellow entities who deem your deeds worthy
02:10:43 <dons> looks like @quote got borken in the last update. sigh.
02:10:59 <dons> good thing the quotes are under rcs
02:11:47 <dons> I love bogus bug reports. They're my favourite thing of all the things
02:12:40 <blackdog> the answer is obvious. lambdabot needs a @submit-bogus-bugreport function.
02:13:32 <Lemmih> I hacked up a TH libraries which could automagically generate a haskell binding to any C++ library (handling templates, callbacks, overloading aso). The gentle folk of #haskell heard the word "C++" and rewarded me with a negative karma ):
02:14:12 <theorbtwo> Is it downloadable somewhere?
02:14:13 <Lemmih> But thanks to lambdabot's amnesia I'm now up on 0 again (:
02:15:25 <shapr> wah cool
02:15:34 <Lemmih> @wiki Hacanon <- Contains an url to the darcs repo.
02:15:35 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- http://www.haskell.org/hawiki/Hacanon <- Contains an url to the darcs repo.
02:15:44 <theorbtwo> @karma+ Lemmih
02:15:45 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- Lemmih's karma has been incremented
02:15:47 <shapr> Peter Thiemann sent me the tgz for hws-plugins
02:16:30 <shapr> nibro:
02:16:50 <dons> Lemmih, you must have got your karma prior to the new persistent karma patch
02:16:53 * shapr tries to get it together
02:17:07 <Lemmih> dons: Yeah, it was some time ago.
02:17:22 <shapr> nibro: :85:40: Not in scope: `mergeToDir'
02:17:57 <dons> latest snapshot!
02:18:09 <dons> mergeToDir got comitted today
02:18:12 <shapr> oh
02:18:42 * shapr pulls
02:19:41 <dons> GHC quote of the day "I just ran a Haskell program in 8 pthreads simultaneously :-)"
02:19:51 <shapr> wow, that's cool!
02:20:06 <shapr> Is that more of the SMP STM stuff?
02:20:11 <dons> I think it must be
02:22:16 <Heffalump> dons: is STM being used to implement SMP, then?
02:23:02 <df_> ooh
02:23:13 <shapr> df_: yeah, that's what I was thinking.
02:23:45 <dons> I'm not sure. Just following JaffaCake's commits
02:24:04 <JaffaCake> hehe
02:24:22 <JaffaCake> it wasn't a very exciting Haskell program, and it didn't go any faster
02:24:38 <JaffaCake> but we're getting there
02:24:41 <Heffalump> hey, it's the thought that counts
02:25:18 <musasabi> Will GHC be going towards a threaded rts?
02:25:28 <musasabi> by default that is.
02:25:51 <JaffaCake> Heffalump:  STM isn't being used to implement it, but STM will be main way to do inter-thread communication
02:26:22 <Heffalump> JaffaCake: right, that's what I thought
02:26:30 <nibro> shapr: got everything else in order then?
02:26:37 * Heffalump pokes shapr for spreading misinformation :-)
02:26:38 <JaffaCake> musasabi: I'd like to do that, but I'm cautious about abandoning the single-threaded RTS
02:26:56 <nibro> dons: so how do you award someone else karma?
02:27:10 <Heffalump> @karma+ nibro
02:27:11 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- nibro's karma has been incremented
02:27:34 <nibro> Lemmih: darcs failed:  Unapplicable patch!
02:27:41 <nibro> should I be worried?
02:27:49 <nibro> that's the cabal repo
02:28:13 * nibro haven't used darcs much
02:28:49 * pesco drags himself to work.
02:29:13 <Lemmih> It works for me on a fresh Cabal repo.
02:29:24 <Lemmih> 'darcs apply [patch]'?
02:29:29 * pesco stops and turns around.
02:30:14 <pesco> shapr: Have you read the logs for my TMR versioning article?
02:30:36 <Lemmih> nibro: What's the sha1 sum of the patch?
02:31:47 <nibro> I lost track of what patch it was, how can I find that info again?
02:33:08 <nibro> Heffalump: thank you so much, I hope I deserved it =)
02:33:11 <Lemmih> nibro: I mailed the patch to you.
02:33:49 <nibro> Lemmih: ah, sorry, I was a bit unclear. it wasn't your patch that failed, it was when I did the darcs get stuff
02:34:17 <Lemmih> Oh.
02:34:20 <nibro> I didn't try yours yet =)
02:34:31 <blackdog> dons: ok, now i know what it was: make dynamic-depend breaks stuff on mac. I wasn't crazy, dammit.
02:35:00 <nibro> so should I be worried about a non-applicable patch in the "clean" repo?
02:35:25 <Lemmih> nibro: I'm not sure. What version of darcs are you using?
02:35:41 <nibro> Lemmih: 1.0.2
02:36:11 <earthy_> hmzlgrm.
02:36:49 * earthy_ wants true first class ag's with UUAG syntax
02:37:07 * JaffaCake jumps around a bit
02:37:25 <JaffaCake> I just ran a multithreaded Haskell program and it got faster
02:37:32 <nibro> Lemmih: this is what I get:
02:37:35 <nibro> darcs failed:  Unapplicable patch!
02:37:39 <earthy> *cool* jaffacake!
02:37:48 <nibro> Unapplicable patch:
02:37:49 <nibro> Thu Feb 10 06:31:12 CET 2005  ijones@syntaxpolice.org
02:37:51 <JaffaCake> Total time    0.65s  (  0.46s elapsed)
02:38:00 <nibro>   * cvs pull, doc and examples
02:47:07 <Lemmih> @seen SyntaxNinja
02:47:08 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- I haven't seen SyntaxNinja
02:47:16 <dons> JaffaCake, yay!
02:47:25 * JaffaCake grins
02:48:41 <shapr> dons: hey the hs-plugins ftp isn't responding?
02:48:59 <Heffalump> jaffacake: faster on a single processor machine? :-)
02:49:33 <JaffaCake> not likely
02:49:52 <JaffaCake> unless you're competing for cycles with someone else, then using 8 threads might be worthwhile :)
02:51:09 <Oejet> Which CVS mailing list should I follow, if I want to keep up with progress in multithreading?
02:51:28 <JaffaCake> cvs-ghc@haskell.org
02:51:35 <Oejet> JaffaCake: Thanks.
02:51:58 * Lemmih pokes shapr.
02:52:15 <Lemmih> shapr: How's the collective wiki project coming along?
03:00:10 <nlv11757_> earthy, is that first class uuag thing working? or is it still alpha
03:08:06 <dons> shapr, looks like it's back up now
03:15:23 <jlouis> dons: the bug listed in README -> KNOWN BUGS, has that been fixed?
03:15:30 <jlouis> (lambdabot)
03:25:48 <dons> jlouis: don't know.
03:25:50 <dons> haven't seen this
03:27:18 <blackdog> dons: patch tested and sent...
03:29:59 <blackdog> Is there a sensible way of maintaining persistent data in CGI apps in haskell without a big standalone object server like Tomcat or Zope? (i'm thinking objects here, not files - i don't want to have to keep rebuilding expensive data structures, using them once, and throwing them out...)
03:31:34 <autrijus> hrm, is there a sortByM ?
03:31:55 <autrijus> seems not. oh well
03:39:31 <blackdog> is Martin Sjoegren a regular here?
03:41:24 <Lemmih> I haven't seen martin-- for some time now.
03:42:19 <blackdog> is his hws-wp project a going concern? I'm playing with the idea of writing a zopealike in haskell...
03:50:25 <dons> applied, mrak, thanks.
03:53:50 <Oejet> How would a program using a multi threaded RTS look like?  Just the same forkIO stuff?
04:02:35 <dons> lambdabot: @quit
04:02:45 <dons> @help vixen
04:02:46 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)-  @help <command> - ask for help for <command>
04:06:52 <dons> @help vixen
04:06:53 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- sergeant curry's lonely hearts club
04:08:58 <musasabi> blackdog: I would use a map from Oid->Object and make that persistent my writing all the ops to a file and rewinding it when starting the app.
04:09:37 <musasabi> blackdog: of course this is only scalable if you have only a couple of hundred of megabytes of data at maximum.
04:13:49 <shapr> blackdog: Peter Thiemann just sent me a copy of his hws + hs-plugins
04:13:50 <shapr> send him an email
04:13:58 <shapr> Lemmih: pplz.haskell.org approaches
04:16:58 <blackdog> dons: i should probably make that a little more informative... still, it's meant to be tricking people. possibly with the help of jesus.
04:17:44 <dons> no, it's fine.
04:17:44 <blackdog> @vixen An important question: Haskell or Java?
04:17:53 <dons> (lambdabot is getting rebuilt)
04:17:55 <blackdog> oh, it's not there.
04:17:58 <blackdog> no wuckas.
04:19:47 <blackdog> musasabi: i'm more concerned with performance than with persistence, though - i don't really change much state. I just have a few apps I'd like to webify that are expensive to start but very cheap to run.
04:21:01 <dons> @vixen An important question: Haskell or Java?
04:21:02 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- church is my favourite computer scientist.
04:22:45 <blackdog> a trifle indirect. Still, if anyone wants to see it changed, the format in data/.vixenrc is ("regex" "one response" "another" "one more" ...)
04:23:00 <blackdog> perhaps i should make that another entry point...
04:23:51 <blackdog> shapr: cheers, i will. What do you think of the zopeish haskell idea?
04:24:47 <dons> @vixen who wrote your magic code?
04:24:48 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- i dunno, who?
04:25:26 <musasabi> blackdog: there are many hacks to use Network.CGI to connect to a haskell process which runs continuously.
04:25:27 <blackdog> @vixen vixen... *wheeze* ... I am ... your father.
04:25:28 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- we all have a little vixen in us
04:26:46 <dons> @quote
04:26:47 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- darius says: Well profiling does add a bit of reflection, but it should
04:26:47 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- have the good sense not too go near the barbed wire fences and armed guards.
04:27:09 <dons> hmm. so @quote is doing something funny with its file on @quit.
04:28:20 <blackdog> musasabi: you'd still have to serialise your data, wouldn't you? Can you mmap data in another haskell heap?
04:29:00 <musasabi> blackdog: just the http-request and reply.
04:29:23 <musasabi> and you can even avoid that with fd-passing if you are really evil.
04:30:14 <Maddas> Haha, the Automatic CS Paper Generator is great fun
04:30:26 <blackdog> musasabi: oh, wait, you mean have a process reading from a network socket perpetually, and the cgi script is just a wrapper around that?
04:30:55 <earthy> maddas: URL?
04:31:24 <musasabi> yep. you have one process reading requests from an (unix) sockets and replying to them. then the CGI scripts just forward the requests to that process.
04:31:51 <Maddas> earthy: http://www.pdos.lcs.mit.edu/scigen/
04:33:05 <blackdog> @quote
04:33:06 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- Alanna says: Saying that Java is nice because it works on all OS's is like
04:33:06 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- saying that anal sex is nice because it works on all genders.
04:33:39 * blackdog blushes
04:33:46 <dons> hehe
04:33:47 <musasabi> java equally does not work on any OS ;)
04:33:53 <musasabi> only GHC is pickier ;p
04:34:48 <blackdog> @vixen aying that Java is nice because it works on all OS's is
04:34:49 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- oh, okay
04:34:54 <blackdog> bah.
04:35:22 <blackdog> @vixen saying that Java is nice because it works on all OS's is like saying that anal sex is nice because it works on all genders.
04:35:22 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- Shouldn't we get to know each other before we talk about sex?
04:35:27 <blackdog> prude
04:35:58 <basti_> vixen = eliza? ;)
04:36:07 <basti_> or rather a random quoter?
04:36:07 <blackdog> vixen = slutty eliza
04:36:09 <Lemmih> @vixen Say the number 19!
04:36:10 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- cool, we're the same age
04:36:17 <basti_> ah.
04:36:25 <blackdog> @vixen: a/s/l?
04:36:26 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- Unknown command.
04:36:32 <blackdog> @vixen  a/s/l?
04:36:32 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- 19/f/California
04:37:02 <TheHunter> @vixen How are you doin?
04:37:02 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- doing good
04:38:57 <Lemmih> @vixen How do you like Haskell?
04:38:58 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- Ooh, functional programmers are so hot!
04:39:25 <theorbtwo> @vixen Hown many chucks would a wood chuck chuck, if a wood chuck could chuck wood.
04:39:26 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- however you want
04:39:28 <Lemmih> @vixen You almost make less sense than MegaMonad.
04:39:29 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- make yourself
04:39:48 <TheHunter> quick darcs question, can I have something like "darcs pull, v[iew]" after the patches are committed.
04:42:39 <dons> darcs changes -v --last=3 ?
04:43:39 <blackdog> is there a way to set a darcs repo back to the state of its parent?
04:46:06 <dons> TheHunter, or darcs diff --last=2 -u
04:47:05 <TheHunter> dons, thanks.
04:47:34 * TheHunter wonders how much time he has until his laptop crashes again
04:47:55 <dons> yikes!
04:48:06 <dons> it's crashed twice in the last 5 mins?
04:48:27 <TheHunter> more like 15 time in the last 20 mins.
04:48:35 <TheHunter> s/time/times/
04:49:23 <TheHunter> it's apperantly some issue with the network chip, but it hasn't happened for a long time...
04:49:33 <dons> hmm :/
04:52:40 <TheHunter> heh, unpull works the way i want ;)
04:58:58 <TheHunter_> hmm, maybe that has something to do with the cable. Perhaps the network thing doesn't like cat5.
04:59:51 * TheHunter_ does for i in `seq 1 30`; do echo y | darcs unpull; done
05:00:21 <dons> in lambdabot?
05:00:53 <TheHunter_> yep.
05:01:05 <TheHunter_> and now darcs pull, to view the patches in order...
05:01:20 <dons> ok.
05:01:47 <TheHunter_> hehe, you accepted my implicit parameter patch.
05:02:30 <dons> :)
05:02:54 <dons> looked reasonable in this case
05:07:09 <TheHunter> plus, a few cleanup can follow that get rid of stuff like MonadIRC and TrivIRC/LB.
05:07:52 <dons> ok.
05:10:47 <nibro> shapr: how's it coming along?
05:10:54 <nibro> @seen shapr
05:10:54 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- shapr is in #haskell. I don't know when shapr last spoke.
05:11:21 <nibro> second time today...
05:17:10 <TheHunter> @seen abc
05:17:11 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- abc has changed nick to TheHunter.
05:17:11 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- TheHunter is in #haskell. Last spoke just now.
05:17:29 <TheHunter> nice.
05:19:12 <dons> nice.
05:19:22 <ibid> @seen ibid_
05:19:22 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- I haven't seen ibid_
05:19:39 <ibid> long time no see, apparently
05:19:46 <ibid> (long time no holy see?)
05:20:03 <vegai> long time no C
05:20:16 <vegai> (alas, this is not true)
05:24:20 <jlouis> dons: not nice. It does k lg n searches in the map, where k is the number of nick-changes you have done. There's no compression algorithm ;)
05:25:36 <Heffalump> I feel an inverse Ackermann function coming on
05:44:55 <Igloo> JaffaCake: Are you here?
05:45:06 <JaffaCake> I'm here
05:45:50 <Igloo> Can you tell me how I can write http://urchin.earth.li/~ian/Q.hs to run in constant space please?
05:46:07 * JaffaCake looks
05:48:00 <Igloo> (some better intuition about why it doesn't already, especially the variant with seqs, would be good too  :-)  )
05:49:15 <JaffaCake> the lazy pair binding is probably killing you
05:49:46 <Igloo> I can't afford to go to the end of the list before returning a result
05:50:09 <JaffaCake> ok
05:51:10 <Igloo> Well, actually, that's because going to the end of the list would be linear space, which is exactly my problem  :-)
05:51:21 <wilx> @seen wilx
05:51:21 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- wilx is in #haskell. Last spoke just now.
05:51:34 <wilx> Still needs something witty :)
05:52:25 <JaffaCake> your bar function prints the left list followed by the right list: evaluating the whole of the left list will force the right list to use linear space
05:53:10 <JaffaCake> to get linear space, you have to consume both lists together
05:53:32 <Igloo> But the right list is [], and foo2 keeps the init of it evaluated (doesn't it?) so why can't the init of xs be thrown away?
05:53:44 * Igloo misuses init a bit as "the bit of xs we've walked down"
05:54:03 <JaffaCake> hmmm
05:54:44 <shapr> blackdog: I want a zopish haskell webapp dev thingy quite desperately. Python is 'discouraging' FP these days. aka, removing FP features. So I'd like to 'discourage' Python in my workplace, aka remove it.
05:55:38 <xerox> 'morning !
05:55:50 <Igloo> I have a vague intuition for why foo keeps xs around, but not foo2
05:59:38 <nibro> shapr: how does your installation come along?
05:59:50 <shapr> I'm grabbing the latest hs-plugins right now
06:00:14 <nibro> ah, still in the proper-support stage then :-)
06:00:45 <shapr> foo, the ftp is still down
06:01:03 <shapr> who can send me an hs-plugins snapshot from the last twelve hours?
06:01:36 <nibro> I can send you the files you need to change, dons got them from me in the first place
06:01:53 <shapr> sure, sounds good.
06:03:57 <Igloo> Oh, I think I see. We still have (a linear chain of) the pair bound to the recursive call, even though we've forced acc
06:04:02 <Igloo> Gnngh
06:04:12 <shapr> Igloo: isn't that the Swedish word for neigh?
06:04:17 <shapr> Oh wait, that's gnägga
06:04:22 <JaffaCake> don't think that's the problem: GHC's selector thunks should kick in
06:04:39 <JaffaCake> I'm a bit mystified
06:04:49 <JaffaCake> if you compile it with profiling, it does run in constant space
06:05:18 <nibro> shapr: sent
06:05:40 <xerox> dons, ping!
06:05:51 <Igloo> Ah, so it's a GHC bug? I'm not sure if that's good news or bad news  :-)
06:05:56 <nibro> oh, you also need to hack the cabal file for hs-plugins, change the dependency from haskell-src to haskell-src-exts
06:06:10 <shapr> yow
06:06:35 <blackdog> shapr: ok. What do we need? You're the Zope guy: what's essential, what's pointless, what's missing?
06:07:06 <Lemmih> shapr: How's collective.haskell.org coming along?
06:07:10 <Igloo> nhc98 seems to use linear memory too, though
06:07:12 <shapr> I think we have almost all the pieces, all that's missing is something to sew them together.
06:07:25 <JaffaCake> Igloo: I didn't say it was a bug (yet) :)
06:07:31 <shapr> Lemmih: It's in-progress.
06:07:41 <Igloo> Heh, OK  :-)
06:07:43 <shapr> It's definitely happening, I'd guess less than a week.
06:07:52 <Lemmih> Great.
06:09:58 <blackdog> and would a haskell interface to zope be a better idea? There's an awful lot of extant code there.
06:10:24 <shapr> yeah, but five days with a refactoring browser would cut the code in half
06:10:36 <blackdog> that's your answer to everything
06:10:55 <blackdog> where do i get one of these magical refactoring browsers?
06:11:14 <blackdog> and half that amount of code is still an wful lot of code... :)
06:11:25 <shapr> truly
06:11:54 <blackdog> so. which bits of zope can't you live without?
06:12:14 <shapr> poetix (Dominic Fox) has some fascinating ideas on Zope in Haskell.
06:12:25 <blackdog> url?
06:13:00 <shapr> He's used both Haskell and Zope. He mentioned that Zope persists modified objects, where Haskell could separate that entirely.
06:13:12 <shapr> It's an email he sent me, and stuff he's said the last few days here on #haskell.
06:13:47 <shapr> blackdog: thing is, lots of people have good ideas
06:15:36 <blackdog> How does persisting modified objects change anything? You're still going to have to have a mutable namespace, even with haskell...
06:15:54 <shapr> poetix said, don't do that
06:16:07 <shapr> code and data could be persisted separately
06:16:25 <shapr> right now in Zope instances are created, modified, and persisted. That's how you do everything.
06:16:40 <musasabi> There is very little need for persistent complex data.
06:16:42 <shapr> How would you approach a really functional Zope? How would you rip out most of the state?
06:16:54 <musasabi> Only very simple data needs to be mutable.
06:17:38 <musasabi> an {oid,version,dynamic} table should be enough...
06:17:51 <shapr> In my opinion, the big problem with J2EE, Zope, etc is that they have more state than California. It's just unmanageable.
06:18:54 <blackdog> how much of it can you dispense with? it sounds like you want something that's quite radically different
06:19:48 <blackdog> musasabi: yeah, that's really what i was talking about with the mutable namespace: you need to be able to change the mapping of a URL to an object
06:20:16 <shapr> I sort of think this discussion would be interesting to Wadler & Links.
06:22:01 <shapr> One of Haskell's advantages over other languages is that all state is one big pile. That means that state is always accessible and explicit, and that code always behaves the same way, because you always know the state.
06:22:32 <shapr> So I think that writing a full Zope in Haskell that saved all the state into HaskellDB would be falling into the same pit of complexity where J2EE and Zope developers spend their lives.
06:24:00 <shapr> Poetix suggested that code be loaded via hs-plugins, and data be saved in HaskellDB.
06:24:28 <musasabi> avoiding an SQL database would be nice (of course an option to use one is nice too)
06:24:29 <shapr> That sounds a lot better.  I'm still having trouble shifting mental gears from the 'state is everything' viewpoint of Zope and J2EE.
06:28:31 <JaffaCake> Igloo: I think I know what's happening
06:28:41 <Igloo> Oh?
06:28:44 <JaffaCake> it's a good one :)
06:29:12 <shapr> hiya CosmicRay
06:29:15 <shapr> how's code?
06:29:16 <jlouis> shapr: I do not see it that way
06:29:18 <CosmicRay> morning shapr
06:29:29 <shapr> jlouis: explain! because I need it!
06:29:31 <JaffaCake> the selector thunk optimisation is working: that is when the left component of the pair is evaluated, the right component can be reduced by the GC to avoid holding on to the pair
06:29:35 <CosmicRay> shapr: haven't had time to do much with it, fretting about the wiring in our house lately
06:29:40 <JaffaCake> but, you have a very long chain of pairs
06:30:04 <JaffaCake> and the GC has an arbitrary limit on how deep it looks, to avoid using unlimited stack space
06:30:16 <jlouis> shapr: In haskell, you have the typed side effects. If you build something upon StateT, you know that you are having some state s that you manipulate.
06:30:19 <JaffaCake> so at each GC, it only reduces at most 8 deep
06:30:32 <JaffaCake> and the evaluator is expanding the chain much faster than that
06:30:37 <Igloo> Heh
06:30:43 <CosmicRay> shapr: trying to wire up the place for ethernet throughout, but the grand plan of using the existing phone wire to pull CAT5e through the walls isn't working because the annoying bastards that built the place stapled the phone wire down *inside the walls*
06:30:50 <jlouis> shapr: Your advantage is that you can see on the type what kind of side-effect you are playing with. This helps tremendously when you need to understand code
06:30:52 <Igloo> Why would it use stack? Isn't it tail recursive?
06:31:10 <JaffaCake> the code that looks through the selector thunks is recursive
06:31:21 <JaffaCake> in the GC, I mean
06:31:29 <Igloo> Fair enough
06:31:31 <shapr> CosmicRay: haha
06:31:58 <Igloo> So, is there something I can do (preferably to the code rather than the GCer)?
06:32:04 <CosmicRay> shapr: so I am going to see if I can get a 10Mb connection across this mysterious not-quite-cat3 6-conductor cable.... :-)
06:32:09 <jlouis> 14073 jlouis    53    0 4148K 6356K run      -        0:50 88.09% darcs
06:32:11 <jlouis> ;)
06:32:12 <shapr> jlouis: that's an interesting point
06:32:13 <JaffaCake> I don't know yet... will investigate a bit more
06:32:20 <Igloo> OK, thanks!
06:32:33 <CosmicRay> jlouis: what, only 50 seconds? :-)
06:32:48 <jlouis> CosmicRay: still running. I think we are patch commuting big time now ;)
06:33:06 <CosmicRay> jlouis: just remember, it's not an infinite loop until it's been running more than 24 hours :-)
06:33:22 <jlouis> CosmicRay: I know  ;)
06:33:37 <blackdog> lambdabot?
06:33:38 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- Unknown command.
06:33:48 <shapr> wha? that patch is already in?
06:33:53 <jlouis> blackdog: lambdabot is a bit more direct
06:34:02 <blackdog> so i see
06:34:09 <JaffaCake> Igloo: if I bump the limit, it runs in constant space
06:34:15 <blackdog> @vixen go away, you naughty minx.
06:34:16 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- fine, i'll leave you alone
06:34:31 <xerox> @help vixen
06:34:31 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- sergeant curry's lonely hearts club
06:34:54 <Igloo> JaffaCake: Is that a parameter you can set on teh commandline, or a recompile GHC jobby?
06:35:07 <JaffaCake> recompile the RTS, I'm afraid
06:35:10 <jlouis> shapr: I have also programmed in SML, where side-effects are like in Scheme, Python, et al. The big problem there is when some code references a global variable. You do not have a chance to find out how it is built up.
06:35:13 <blackdog> man, darcs is slow...
06:35:35 <blackdog> i wonder if it's the vixenrc file.
06:35:36 <shapr> jlouis: I never thought of that.
06:35:38 <Igloo> That's really not an issue here then  :-(   (the problem comes from darcs, where expecting people to do that isn't reasonable)
06:35:58 <Igloo> Err, "not really an option" I meant
06:36:03 <jlouis> shapr: whereas in haskell, the type signature points to the victim
06:36:35 <jlouis> directly. You can go look up the functions to manipulate that type and the Monad/Arrow definition
06:36:40 <JaffaCake> bumping the limit can also result in bad behaviour sometimes, i.e. repeated traversals of long chains
06:36:50 <Igloo> *nod*
06:37:15 <jlouis> At least, that is a big difference between the purely functional and the algorithmic functional way of doing things
06:37:36 <jlouis> (pure/algorithmic is a term I've coined from Andrzej Filinski. I tend to like it)
06:37:38 <JaffaCake> I wonder if there's a way to rewrite the code
06:39:13 <jlouis> 5:37 and counting
06:39:14 <jlouis> hmmm
06:39:46 <JaffaCake> Igloo: just doing two traversals might be the best way
06:40:10 <Igloo> JaffaCake: The real list is full of lazily done IO and whatnot
06:40:19 <JaffaCake> trade a constant factor of 2 for constant space usage
06:41:02 <Igloo> And in some cases the IO includes user interaction
06:41:03 <JaffaCake> actually, the constant factor is less than 2, because of all the pairs
06:41:34 <blackdog> shapr: i'm still not quite sure where you can get away with being stateless. You still need per-user data, you still need conf data, you still need app-specific data. How are you going to cast that in a stateless way?
06:41:36 <shapr> jlouis: I'm not sure how to exploit that usefully in a webappserver.
06:41:46 <JaffaCake> oh, does the IO mean that two traversals isn't possible?
06:42:09 <Igloo> Yes
06:43:01 <blackdog> @seen dons
06:43:02 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- dons is in #haskell. Last spoke 1 hour 23 minutes 48 seconds ago.
06:43:12 <jlouis> blackdog: it is not about being stateless. It is about packaging state away
06:45:50 <blackdog> jlouis: Sure. but you still need to come up with a model for which it makes sense to separate code and data in that way. Zope is great in some ways, acquisition is quite a cool idea - but it seems like it relies on an OO-based viewpoint
06:46:54 <Heffalump> so when the GC gives up on descending things, does it just assume there's no garbage at all?
06:47:55 <shapr> blackdog: yes, poetix mentioned the need for a different mapping of url to whatever in Haskell
06:49:41 <jlouis> even if you cannot be stateless, you can always cook up your own zope-monad which can do exactly what you need
06:50:06 <jlouis> @version
06:50:07 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- lambdabot 2p249, GHC 6.4 (OpenBSD i386)
06:50:07 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- darcs get http://www.cse.unsw.edu.au/~dons/lambdabot
06:50:36 <jlouis> ugh, 250 patches in lambdabot
06:50:43 <shapr> time to tag it
06:51:36 <jlouis> ok, I added 20 patches yesterday, when dons merged my SeenModule changes
06:51:57 <nibro> time to go, shapr keep me posted. it would be nice to hear that it was actually installable somewhere other than on my machine. :)
06:52:03 <jlouis> coincidentially, it was a separation of monadic operations and functional operations
06:52:09 <shapr> right, sorry I got distracted :-)
06:52:32 <nibro> np, I'll be back on later tonight
06:52:35 <nibro> cya
06:52:36 <blackdog> jlouis: always a pososibility, but it'd be nicer to come up with something that was directly expressible, rather than just mimicking the stateful model
06:52:37 <shapr> cya
06:53:22 <jlouis> blackdog: sure.
06:53:25 <blackdog> ok, this is just silly... i've been waiting for 3 patches from darcs for ten minutes now...
06:53:41 <shapr> where from?
06:53:55 <Igloo> blackdog: It sounds like you have run into the exponential time conflicts problem
06:53:55 <blackdog> don's lambdabot repo
06:54:11 <blackdog> Igloo: oh? can i get around it?
06:54:36 <nlv11757_> is there a shorthand for \n -> case n of ..... ?
06:54:49 <nlv11757_> without the lambda
06:55:04 <Heffalump> nafaik (I'd like one too)
06:55:10 <basti_> hmm darcs definitely needs feedback while the patches are being pulled
06:55:13 <nlv11757_> il define a caseof then :)
06:55:15 <nlv11757_> thanks
06:55:18 <basti_> theres just helen keller mode now.
06:55:28 <Igloo> Rerecord the patches avoiding conflicts. I think unrecord, pull, record should do it, but I don't know details as I don't create conflicts in my stuff
06:55:47 <Igloo> #darcs or (more likely) the list might be able to help more
06:56:26 <JaffaCake> Igloo: are you working on performance of darcs, then?
06:56:46 <Igloo> Oh, it's not impossible darcs pull -a will perform better if you want all the patches
06:56:49 <Igloo> JaffaCake: Yup
06:57:11 <JaffaCake> cool, any thoughts on how much you can squeeze out of it?
06:57:14 <Igloo> JaffaCake: More hands definitely welcomed, especially when they are as fine as yours  :-)
06:57:22 <Heffalump> more if he can fix this problem with lists :-)
06:57:28 <JaffaCake> you're too kind ;)
06:58:54 <TheHunter> @seen TheHunter
06:58:55 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- TheHunter is in #uiuiui and #haskell. Last spoke just now.
06:59:02 <Igloo> With this fixed, and with lazy patch reading using strings rather than grabbing the whole patch as a PackedString, the initial record should run in very little RAM
06:59:21 <shapr> @seen thehunter
06:59:22 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- thehunter is in #uiuiui and #haskell. Last spoke 27 seconds ago.
06:59:24 <shapr> neat
06:59:43 <Heffalump> I'm a bit confusing about the GC behaviour. If it gives up descending things, does it have to assume everything is live?
06:59:49 <Igloo> And as the RAM drops, speed improves too
06:59:56 <JaffaCake> won't the lazy patch reading make it slower?
07:00:04 <JaffaCake> right
07:00:08 <TheHunter> i actually expected "You are ..."
07:00:18 <Igloo> No; if it reads the patch strictly it uses huge amounts of RAM
07:00:35 <Igloo> Also, the patch is already read lazily, but the patch file is read as a PackedString
07:00:54 <JaffaCake> Heffalump: it's not to do with liveness, this problem is to do with the GC automatically reducing expressions like case x of (a,b)->a
07:01:02 <Igloo> By patch reading I meant patch parsing, really
07:01:36 <Heffalump> oh, right
07:01:57 <JaffaCake> Heffalump: the GC reduces those when possible to avoid space leaks
07:01:58 <Heffalump> shouldn't the evaluation of ys in Igloo's example have done that anyway?
07:02:06 <Igloo> The initial checking is essentially a hugs patch   ComP [AddFile file1, ..., AddFile file10000, Hunk File1 +allthecontents, ... Hunk File10000 +allthecontents]
07:02:23 <Igloo> And the contents is a list of PackedStrings, one per line, so the memory usage is huge
07:02:40 <JaffaCake> the translation of let (xs,ys) = e1 in e2 goes like this:
07:02:59 <Igloo> Hmm, my typing is terrible today
07:03:04 <JaffaCake> let p = e1; xs = case p of (a,b) -> a; ys = case p of (a,b) -> b; in e2
07:03:19 <Heffalump> ahhh.
07:03:22 <Heffalump> right, that explains it.
07:03:39 <JaffaCake> Igloo: I see, thanks
07:03:58 <Heffalump> and using an irrefutable pattern for (xs,ys) would presumably make it even lazier
07:04:10 <JaffaCake> don't think that would help
07:05:43 <JaffaCake> I did a darcs get of darcs itself on my Windows machine yesterday, and had to ^C after an hour or so
07:06:10 <JaffaCake> think that was to do with the slow I/O to the network disk, though
07:07:01 <Igloo> It shouldn't be anywhere near that slow
07:07:13 <JaffaCake> it was faster on a Unix box
07:07:56 <shapr> I'm afraid SPJ's maxim has been violated. Haskell has not avoided success.
07:08:05 <JaffaCake> does it do lots of I/O while building the repo?
07:08:35 <shapr> bonjour poetix
07:08:35 <JaffaCake> shapr: Haskell succeeded?
07:08:57 <poetix> shapr: Wadler's guest blogging on LtU - he's come to talk about Links
07:09:00 <shapr> Well, it's being used in darcs and pugs. That's rather more than when I joined the community three years ago.
07:09:02 <Igloo> It think it'll write the patches line by line and then write the files as complete files twice
07:09:06 <JaffaCake> I won't be happy until Bill is running it :)
07:09:09 <shapr> haha!
07:09:14 <shapr> I'm with you!
07:09:47 <Igloo> Actually, it probably won't need to write the patches line by line even as it's just downloading them
07:10:10 <Philippa> re
07:10:10 <shapr> poetix: cool, I've been thinking that our discussion about Hope could be interesting to Wadler/Links
07:10:15 <shapr> hiya Philippa!
07:10:30 <Igloo> Do you know if the machine was swapping?
07:10:32 <poetix> Hope? I thought HoH...
07:10:39 <poetix> Haskell on Heat
07:10:45 <Igloo> Also, one reason for being slow could be that it wasn't pipelining the patch downloads
07:10:46 <poetix> ;)
07:10:47 <JaffaCake> Igloo: it wasn't swapping
07:11:04 <CosmicRay> Heffalump: I've just uploaded your new haskell-http
07:11:08 <blackdog> poetix: shapr mentioned you had ideas for a haskell zopealike...?
07:11:12 <Heffalump> CosmicRay: cool.
07:11:25 <Heffalump> any bugs will have to wait another week, since I'm off in about 30 mins
07:11:34 <JaffaCake> Igloo: downloading the patches wasn't too bad, took a few minutes
07:11:36 <poetix> blackdog: I spouted a lot of stuff off the top of my head when he started talking to me about it...
07:11:38 <shapr> Of course, Alex Peake is also back on LtU.
07:11:45 <shapr> poetix: and I think it's good stuff too
07:11:49 <poetix> blackdog: which I suspect I will live to regret...
07:11:56 * shapr grins
07:11:56 <JaffaCake> it was the phase afterward (building the repo?)  that seemed to take forever
07:12:16 <poetix> Hope is a cool (and obvious, in retrospect) name
07:12:45 <shapr> There's probably a better name, Hope would get confused with the FP language of the same name.
07:12:53 <shapr> Didn't algebraic datatypes start with Hope?
07:13:02 <poetix> re Alex Peake: Are there in fact usable Haskell COM bindings?
07:13:42 <shapr> I don't know. I do know I get paid to work on Haskell web apps.
07:13:58 <shapr> Not much yet, but enough that I want to do a better job of it.
07:13:59 <poetix> All you really need is those + a .Net bridge and you're pretty much in, as far as the MS Software Monoculture is concerned
07:14:02 <Igloo> Ah, it's using a slurpy for no good reason, I think. That'll make it slower, but not for disk reasons
07:14:07 <blackdog> ... you're not talking about the language Hope? What is it, then?
07:14:16 <Heffalump> shapr: only cos you choose to use Haskell for things you have a free choice on, though, right?
07:14:18 <poetix> Hope = Zope for Haskell
07:14:25 <shapr> Anyway, the last time I argued with Alex Peake, he said the same things, and ignored my points to the contrary.
07:14:28 * blackdog slaps head
07:14:29 <poetix> (vaporware as of right now)
07:14:32 <blackdog> ok, of course.
07:14:33 <shapr> Heffalump: what do you mean?
07:14:40 <Heffalump> the stuff you get paid for Haskell for
07:14:44 <shapr> what about it?
07:15:03 <blackdog> so which bits are worth keeping from Zope?
07:15:08 <Heffalump> I was just saying it's not "we'll pay you to work on Haskell", it's "we'll pay you to get foo done and we don't care how you do it"
07:15:13 <Heffalump> (isn't it?)
07:15:13 <Igloo> Oh, no, that's only in the --partial case
07:15:34 <shapr> Actually, my clients said "We want a webapp that searches mailing list archives, and we want it installed on our server."
07:15:48 <xerox> Heffalump, i'd love to be told the latter!
07:15:50 <poetix> blackdog: i) the dynamicity - ability to inspect and edit source files through the web console
07:16:04 <Heffalump> xerox: <aol>
07:16:10 <Heffalump> though a little bit of my job does have that property
07:16:17 <shapr> I said "I happen to have written one of those myself in Haskell." and they said "We will pay you to install it, and to add features that we request." and I said "As long as I get to keep it all OSS licensed, sure."
07:16:22 <xerox> Heffalump, what is it?
07:16:32 <Heffalump> since there's an internal application produced by R&D that's written in Haskell that I need to use/tweak occasionally
07:16:41 <Heffalump> xerox: I'm a compiler hacker at ARM
07:16:48 <poetix> ii) Not sure - not the ZODB anyhow
07:17:00 <xerox> Heffalump, heh.
07:17:10 <shapr> My clients never say "We'll pay you to work on $LANGUAGE." They say "We have a need, can you fulfil this need?"
07:17:17 <poetix> shapr: I feel honour bound to disclose that the meme "X is a roach motel" is one I picked up at an MS conference last year
07:17:21 <blackdog> acquisition seems like a win to me, but i've only been hacking zope for a little while
07:17:42 <shapr> So, I think Alex Peake's thinking is tightly bound into various sorts of fecal matter.
07:17:50 <xerox> shapr, in Italy is kinda different, they think they know your work would be better if it's done in $LANGUAGE.
07:17:59 <poetix> oh, yes, acquisition. Very dynamic mapping of URLs to handlers. Good for RESTful apps with generated URLs.
07:18:19 <shapr> xerox: I do not tell my dentist which tools to use on my mouth, because I am not an experienced dentist.
07:18:33 <shapr> I expect clients to treat me the same way for my work.
07:18:53 <xerox> shapr, I'll try to use this argument - but people here are really confident about their ability to judge in other's fields.
07:18:59 <blackdog> shapr: really? Man, you're missing out - i just tell him to load me up on the nitrous...
07:19:03 * shapr laughs
07:19:05 <Heffalump> they may have legitimate requirements about future maintainability or integration with other parts of their system, though.
07:19:15 <Igloo> Oh, duh, for a normal get it'll be applying the patches straight to the FS, so it will be jumping around and doing some redundant work
07:19:17 <Heffalump> which doesn't apply to dentistry so much since dentistry is a kind of world-wide standard
07:19:23 <Igloo> Might be good to have that as an option
07:19:43 <shapr> My clients don't have their own programmers, so that's not a problem.
07:19:46 <Igloo> For me though, a darcs get just took 12mins, and the majority of that was downloading the patches
07:19:52 <Heffalump> they might hire someone other than you in future
07:20:13 <shapr> So, I should be using COBOL or C++ then?
07:20:24 <Igloo> It could be Windows doesn't cache the FS in the same way Linux does?
07:20:36 <JaffaCake> Igloo: yeah I think so
07:21:01 <JaffaCake> I/O to a remote FS in Windows is way slow
07:21:14 * xerox laughs at COBOL.
07:21:15 <Heffalump> I find building our compiler on a local drive is about 5-10 times faster than building it on a remote drive
07:21:22 <shapr> Heffalump: well?
07:21:26 <Heffalump> (1 minute or so versus closer to 10)
07:21:38 <jlouis> Heffalump: not magical. That is simple
07:21:45 <jlouis> You building over NFS+?
07:21:48 <jlouis> NFS? even
07:22:02 <Heffalump> shapr: I was just pointing out that there are legitimate reasons why they might impose constraints on your implementation choice.
07:22:08 <jlouis> Version 2, 3 or 4? TCP or UDP datagrams? Which kind of NFS-server
07:22:09 <Heffalump> if they are happy with Haskell, that's fine
07:22:14 <JaffaCake> NFS isn't nearly as bad
07:22:16 <Heffalump> jlouis: netapps
07:22:22 <Heffalump> and using SMB to connect to them
07:22:32 <Heffalump> CosmicRay: email re upload arrived
07:22:45 <CosmicRay> thanks
07:22:50 <jlouis> Heffalump: ah, netapps usually performs quite well
07:22:53 <shapr> You have an excellent point, future maintainability could be influenced by the bus number of a Haskell project.
07:22:59 <shapr> And I haven been thinking of a solution to this problem.
07:23:14 <Heffalump> CosmicRay: do you know how soon the BTS should notice the changelog?
07:23:23 <CosmicRay> Heffalump: an hour or two
07:23:31 <Heffalump> 'k
07:23:42 <shapr> I'd like to find seven or eight Haskell programmers who are willing to do paid Haskell work in case of bus error in other projects.
07:23:48 <Heffalump> (and do you know if it should now be emailing me/us rather than unknown-package@qa ?)
07:23:57 <jlouis> hmmm
07:24:16 <jlouis> I have a feeling lambdabot/Util.hs/clean is not the way to go
07:24:43 <skew> shapr: would that be shapr-gets-hit-by-a-bus errer?
07:24:44 <shapr> That way, I can tell my clients that in case of bus error on my part, these other people/companies already have access (and hopefully some familiarity) to the source in my projects, and can pick up where I left off.
07:24:50 <shapr> skew: exactly :-)
07:25:01 <Igloo> unknown-package@qa? That sounds suboptimal
07:25:11 <Heffalump> http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=303073
07:26:01 <xerox> shapr, what do you mean by bus {number,error} ?
07:26:04 <shapr> If 'vendor support' is really so influential to clients, then a few Haskell programmers can just magic up a coop.
07:26:19 <Heffalump> no competition though
07:26:39 <Heffalump> it's not just being able to find one at any price, it's being able to find one at a reasonable price and quickly
07:26:45 <shapr> xerox: http://c2.com/cgi/wiki?BusNumber
07:27:20 <shapr> Right, which is why a cooperative gorup of Haskell programmers who have their prices up on their own websites would be perfect.
07:27:34 <jlouis> shapr: tell them it is haskell. You can probably hire the best people out there to hack on the projects
07:27:48 <shapr> Sort of like a Last Will and Testament for your code. "In case of Bus Error, I leave my cvs password to Dons & Mrak Inc."
07:27:58 * shapr snickers
07:28:24 <Igloo> Heff: The lag is a known problem, apparently. I'm sure it'll be at most a day or two, though
07:28:53 <blackdog> what, you wanna give me a plausible motive when the coppers come round asking questions? Some friend you are. :)
07:29:04 * shapr laughs
07:29:05 <Heffalump> what lag?
07:29:11 <Heffalump> in the BTS noticing who it should email?
07:29:25 <Igloo> Between a package being accepted from NEW and the BTS being told about it
07:29:59 <Heffalump> right.
07:30:20 <shapr> jlouis: What do you mean?
07:31:30 <jlouis> shapr: I am joking. People do Haskell for fun. I would be delighted to be able to work for money in Haskell
07:31:56 <kosmikus> pesco: re your lhs2TeX comment yesterday; no bug, correct behaviour
07:34:37 * xerox added c2.com at SearchModule - would it be useful enough to submit?
07:35:23 <blackdog> dons is long asleep, i think. it's getting late over here...
07:35:32 <xerox> Yea :)
07:35:46 <xerox> bbl, gotta buy some books.
07:35:55 <autrijus> @pointless \x y -> op2Cast f x y
07:35:56 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- op2Cast f
07:36:30 <autrijus> @pointless \x y -> op2Cast (\a -> if a then x else y)  x y
07:36:31 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- flip s id . s (flip . (op2Cast .) . flip . flip if') id
07:36:31 -vixen(~vixen@202.22.168.215)- flip s id . s (flip . (op2Cast .) . flip . flip if') id
07:36:32 <blackdog> @vixen do you still work?
07:36:33 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- i do occassionally, i guess
07:36:33 -vixen(~vixen@202.22.168.215)- i do occassionally, i guess
07:36:42 <autrijus> oh wow.
07:36:47 <autrijus> rather pointless.
07:37:09 <Igloo> JaffaCake: Sorry if I'm being slow, but I'm confused. We have "let ys = case p of (a,b) -> b" where xs has forced the evaluation of the tuple, right? So why doesn't the GCer just way "OK, so I can replace ys with b and repeat for b"? That's tail recursive, right?
07:37:18 <jlouis> c/g 17
07:37:21 <jlouis> bleh, sorry
07:38:38 <JaffaCake> Igloo: just swapping in the context, hang on :)
07:38:48 <Igloo> OK  :-)
07:41:06 <jlouis> Who was the nice guy that provided a Dice throwing module for lambdabot? Einar Karttunen?
07:41:52 <JaffaCake> Igloo: you have a chain like case p of (a,b) -> b, where b is case p2 of (a,b) -> b, etc.
07:42:04 <JaffaCake> the GC tries to get to the end of the chain, and bales out
07:42:10 <shapr> jlouis: aka musasabi
07:42:15 <Igloo> Why does it need to get to the end, though?
07:42:25 <jlouis> shapr: ah, thanks
07:42:26 <Igloo> Why can't it start at the, well, start  :-)
07:42:50 <JaffaCake> but now you've made me wonder why it can't update each one with a thunk
07:44:03 <musasabi> jlouis: can I help in some way ?
07:44:13 <JaffaCake> oh, I think it's because you can't have an indirection pointing to a thunk
07:44:44 <jlouis> musasabi: well, Do you plan on hacking more on DiceModule in the coming time? If not, I'll haddock it.
07:44:57 <JaffaCake> hmm, I take that back
07:45:29 <musasabi> jlouis: Only make the error handling a bit better, nothing more in my mind.
07:45:53 <musasabi> jlouis: but first I want to solve why darcs send is broken between me and dons.
07:46:12 <JaffaCake> Igloo: ok, I understand it now
07:46:19 <jlouis> musasabi: oh. Understandable. I tend to darcs send -o <patch>
07:46:29 <jlouis> because I cannot send directly from this box
07:46:54 <shapr> I'd like a darcs-patch.cgi that works like darcs send for email.
07:46:59 <JaffaCake> if you start at the top of the chain, you can only go N deep and update with whatever is at that depth
07:47:13 <JaffaCake> if you start at the other end, you could collapse the whole chain
07:47:14 <jlouis> musasabi: If you can read SML, check out http://www.diku.dk/~torbenm/Dice.zip
07:47:26 <jlouis> (DSL for dice rolling and probability calculation)
07:47:52 <Igloo> Why can you only go N deep?
07:48:03 <JaffaCake> to avoid recursion in the GC
07:48:59 <JaffaCake> there's no point having a GC that requires the same amount of stack space as the heap :)
07:49:18 * boegel greets everyone
07:49:30 * shapr salutes
07:50:45 <blackdog> alright. enough hacking for one night. g'night, all
07:50:46 <Igloo> I'm afraid I still don't see why it isn't tail recursive
07:50:58 <shapr> g'night blackdog
07:51:23 <Igloo> We just walk down the chain of closures remembering the pointer we started at and when we reach one we can't reduce set that pointer to where we now are
07:51:35 <boegel> blackdog = wolfgang8k, right ?
07:52:51 <blackdog> ... uh, no. Who is wolfgang8k? Thaller?
07:52:58 <Igloo> Oh, or do you mean the problem is that we might have lots of those starting pinters pointing to the same thing and we don't want to repeat the work for each one?
07:53:02 <musasabi> jlouis: reading that.
07:53:15 <JaffaCake> well there's that, yes
07:53:19 <boegel> blackdog: you're not the math guy who also wrote a raytracer ?
07:53:23 <Igloo> In which case, couldn't an indirection be used instead?
07:53:27 <jlouis> musasabi: start with the manual.pdf. That gives an overview ;)
07:53:35 <blackdog> no, not wolfgang thaller. that guy is scary smart.
07:53:47 <jlouis> musasabi: now, if you do not have anything to do, we could implement roll in lambdabot, hehe
07:54:01 <JaffaCake> we do update with an indirection
07:54:10 * boegel wonders what his new nick was
07:54:11 <blackdog> boegel:i'm mark wotton, ex-cse.unsw.edu.au
07:54:37 <boegel> blackdog: okay then, my mistake I guess
07:56:44 <MehmetYavuzSelim> hello, just a question
07:56:52 <JaffaCake> Igloo: take a look at the code if you like, it's in ghc/rts/GC.c, search for THUNK_SELECTOR
07:57:02 <boegel> MehmetYavuzSelim: shoot !
07:57:09 <JaffaCake> I can't immediately see a way to make it tail-recursive, but maybe you can
07:57:38 <MehmetYavuzSelim> what is the difference between map func list and [func x | x <- list]  in performence
07:57:49 <musasabi> jlouis: roll looks quite nice :-)
07:58:06 <boegel> MehmetYavuzSelim: I have _no_ idea
07:58:09 <jlouis> musasabi: yes, indeed
07:58:09 <boegel> map is quite fast
07:58:33 <boegel> but so are list comprehensions :)
07:58:43 <jlouis> MehmetYavuzSelim: in principle, they are equal.
07:58:52 <musasabi> but I don't really need that functionality at the moment and time is quite limited this week (exams coming up).
07:58:55 <MehmetYavuzSelim> then I'll use map
07:59:06 <MehmetYavuzSelim> thanks
08:02:34 <shapr> boegel: wolfman8k aka pipe aka zipper, from .il
08:06:16 <boegel> il ? what's il ? ireland ? iceland ?
08:06:22 <CosmicRay> israel
08:06:24 <boegel> @seen pipe
08:06:25 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- I haven't seen pipe
08:06:28 <boegel> @seen zipper
08:06:29 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- I haven't seen zipper
08:06:34 <boegel> @seen wolfgang8k
08:06:34 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- I haven't seen wolfgang8k
08:06:40 <boegel> it's been a while :)
08:10:47 <Igloo> JaffaCake: I'm thinking of something along the lines of http://urchin.earth.li/~ian/st.txt
08:11:06 <Igloo> (probably with more checks from the top of evacuate also done in chase_thunk_selector)
08:11:44 <shapr> hej Orangosaurus, vah händer?
08:11:49 <JaffaCake> that's recursive though ?
08:12:24 <JaffaCake> chase_thunk_selector is called recursively
08:12:26 <Igloo> Oh, C compilers don't optimise that out? Shows how much C coding I do  :-)
08:12:33 <JaffaCake> hehe
08:13:03 <JaffaCake> well, gcc can do it for simple cases, but it's not predictable
08:13:38 <shapr> hiya pitecus, have any Haskell questions?
08:14:33 <boegel> MehmetYavuzSelim: are you from Ghent by any chance ?
08:14:36 <pitecus> hi shapr, just lurking
08:14:42 <MehmetYavuzSelim> yes :)
08:14:54 <boegel> your project is due tomorrow, isn't it :p
08:14:57 <MehmetYavuzSelim> 1e lic SO
08:14:58 <JaffaCake> oh, and upd_evacuee() needs to be called after evacuate(), becuase you have to update the current closure with something that has been evacuated
08:15:12 <shapr> pitecus: ok, if you have any questions feel free to ask.
08:15:12 <MehmetYavuzSelim> yes, it is
08:15:18 <boegel> is Mehmet your real name ?
08:15:24 <pitecus> ok
08:15:45 <MehmetYavuzSelim> All 3 are real, but Mehmet is the first
08:16:13 <boegel> I think I know you... did you do the second year twice or so ?
08:16:23 <boegel> or the 1st twice ?
08:16:28 <MehmetYavuzSelim> No, I didn't
08:17:03 <MehmetYavuzSelim> I did 1e year Engineering, then I did Informatics
08:17:22 <boegel> you mean CS :p (Computer Science)
08:17:27 <MehmetYavuzSelim> Sorry, my english is not that goog :), if you like let's speak dutch :)
08:18:16 <jlouis> how do you get haddock to understand cpp style comments?
08:18:20 <Igloo> JaffaCake: http://urchin.earth.li/~ian/st2.txt then (you'll probaly still want to count the recursive call in the THUNK_SELECTOR case itself, but that's not the problem here, right?)
08:18:22 <jlouis> cpp style defines rather
08:18:58 <Lemmih> jlouis: You don't. Preprocess your files before handing them to haddock.
08:20:08 <JaffaCake> actually the recursive call to evacuate() in the THUNK_SELECTOR case *is* the problem in this case
08:20:31 <jlouis> Lemmih: ok
08:20:46 <Igloo> OK, but in that case you just need to make follow_thunk_selector(q) handle whatever other case we're alternating with as well
08:20:50 <JaffaCake> because we have a thunk_selector pointing to a pair, whose first component is a thunk selector pointing to a pair... and so on
08:21:16 <Igloo> Right, but those should all be chased by the first call to follow_thunk_selector(q), no?
08:21:43 <Igloo> Sorry, I mean the first call to chase_thunk_selector(q)
08:21:51 <Lemmih> jlouis: Cabal can (at times) do it for you.
08:24:46 <JaffaCake> Igloo: it looks like chase_thunk_selector always copies the result as a thunk_selector, that doesn't look right
08:26:36 <Igloo> Incidentally, I think this is hte same problem that bit me before in http://www.haskell.org//pipermail/glasgow-haskell-users/2004-June/006761.html (rest of thread around http://www.haskell.org//pipermail/glasgow-haskell-users/2004-August/007021.html)
08:27:28 <Igloo> JaffaCake: Right, I should probably have the recursive call to evacuate there instead of doing the copy and then calling evacuate on the result
08:28:28 <Igloo> And I might have other details wrong too, but as far as I can see it could be done tail recursively in this way
08:29:01 <Igloo> It might be that to be generally useful there might be a few more cases you'd want to handle in this way (with a single follow function)
08:29:21 <JaffaCake> that turned out to be a different problem
08:29:33 <JaffaCake> (the "Space Usage" thread, I mean)
08:29:38 <Igloo> Ah, OK
08:30:47 <JaffaCake> regarding chase_thunk_selector, I don't want to look down the list without updating as I go
08:31:09 <JaffaCake> because that would be O(n^2) if I start at the wrong end of the list
08:33:23 <Igloo> Could mark things as you go followed by a pass to remove all marks, or alternatively do it as part of the copy when you make a new generation?
08:34:00 <Igloo> In fact, you don't need to unmark, just know whether this is an odd or even GC
08:34:35 <JaffaCake> so what it I hit a marked closure?
08:34:55 <Igloo> Then you know it has the right answer in it and you just copy it
08:35:05 <JaffaCake> but I haven't updated it
08:35:34 <JaffaCake> I mean, in chase_thunk_selector, there's no updating going on
08:35:37 <Igloo> If it's not circular you've updated it
08:36:08 <Igloo> Unless I misunderstand
08:36:29 <Igloo> If you start at the wrong end of the lsit then the last thunk selector gets updated and marked
08:36:52 <JaffaCake> chase_thunk_selector just runs to the end of the chain, it doesn't update on the way back up again
08:37:11 <Igloo> Oh, wait, ISWYM
08:37:42 <Igloo> OK, but when you do the upd_evacuee you can do something like follow_thunk_selector again, this time putting the answer in everywhere
08:37:56 <Igloo> Err, something like chase_thunk_selector rather
08:38:25 <JaffaCake> oh, I see
08:41:55 <JaffaCake> two passes might just work
08:42:03 <Igloo> Hurrah!  :-)
08:42:35 <JaffaCake> that covers the recursive call to eval_thunk_selector, now what about the call to evacuate()
08:43:25 <Igloo> You can just depth count that I think
08:43:43 <JaffaCake> but that's the problem case
08:43:52 <Igloo> Eh?
08:43:59 <JaffaCake> the one affecting your example, I mean
08:44:11 <Igloo> I thought the problem was a chain of just THUNK_SELECTORs?
08:44:33 <Igloo> And there is no recursive call to evacuate in such a chain
08:44:49 <JaffaCake> it's a chain of thunk_selector points to pair, whose first component is thunk_selector, etc.
08:45:38 <Igloo> Ah, OK, so so we'd need this to be case THUNK_SELECTOR: case PAIR: and for follow_thunk_selector to know what to do for both pairs and thunk selectors
08:45:46 <JaffaCake> there are problems with the two-pass strategy, too
08:46:06 <JaffaCake> we still need to do some kind of marking
08:46:06 <Igloo> And similarly anything else that can be useful could be moved into here
08:46:56 <Igloo> OK, but that's just a bit for "last updated on an odd GC" isn't it?
08:47:36 <Igloo> (or maybe a tristate if you need to detect cycles, but I assume you already do that anyway)
08:47:58 * JaffaCake wonders if there's room for a bit anywhere :)
08:48:09 <Igloo> heh
08:49:09 <desrt> wolfgang wants an extra bit too, so if you find a couple, let him know :)
08:49:17 <Igloo> lol
08:49:45 <desrt> something about marking certain closures as being exempt from GC.
08:50:54 <JaffaCake> there's a couple of bits at the low end of a pointer, but we have plans for those...
08:52:26 <Oejet> Isn't that a good reason for moving to 64 bits in general?  So to be able to have some extra bits for misc. things?
08:53:07 <Igloo> Oejet: Not really. We could just have an extra 32bit word everywhere
08:53:15 <Igloo> I assume Jaffa is just trying to not increase space usage
08:54:26 <JaffaCake> Igloo: I will ponder on your idea.  the need for a mark bit is slightly worrying, but there might be a way to overcome it
08:54:43 <Igloo> OK, cool, thanks
08:55:23 <Igloo> Meanwhile I'll meditate on how to break it to David Roundy that he's going to have to convince all the users to upgrade to ghc 6.4.1/6.4+patch  :-)
08:56:26 <Igloo> Actually, I'm a bit confused now. If we're updating in a second pass, do we need to mark them as updated? Don't they already contain just values?
08:57:24 <Igloo> Or is there no loop detection, just the depth limits?
08:58:21 <JaffaCake> the end of the chain might be a thunk, or something else that we can't use
08:58:56 <JaffaCake> and we don't want to do the whole traversal again, if the GC ends up somewhere else in the chain later
08:59:01 <Igloo> We don't just update it with a pointer to the thunk in that case?
08:59:20 <desrt> actually, since you both are here.  i have a question about a fairly useless but quite interesting exercise
08:59:35 <desrt> why isn't the linker written in haskell?
09:00:14 <Igloo> I'd rather it disappeared than was written in Haskell. Makes getting ghci to work on other arches a PITA
09:00:30 <JaffaCake> updating with the thunk would be wrong
09:00:51 <JaffaCake> yes, the linker should go away
09:01:01 <desrt> you really can't make the linker disappear and maintain the current level of functionality
09:01:03 <JaffaCake> we should be using shared libraries and PIC instead
09:01:32 <Igloo> That also needs per arch stuff though, AIUI  :-(
09:01:36 <desrt> ie: going into a project directly and ghci [foo]
09:01:45 <Igloo> Or is that only for the NCG/mangler?
09:01:49 <desrt> and not having to wait for the entire thing to build (in the case of lots of files)
09:02:40 <Igloo> JaffaCake: What's wrong with updating with a pointer to a thunk OOI?
09:03:02 <JaffaCake> the thunk is the thing you're selecting *from*
09:03:11 <desrt> Igloo; there are changes that need to be made on just about every arch, but they're mostly the same sorts of changes that need to be made anyway
09:03:13 <JaffaCake> it has the wrong value
09:03:34 <desrt> ie: it's not really new places to add arch-specific code.  just different code to add to the same places.
09:03:36 * JaffaCake has to go...
09:03:45 <JaffaCake> bye folks!
09:03:45 <Igloo> Oh, I see. But we could point to the thing one step before the thunk?
09:03:49 <Igloo> OK, see ya!
09:03:53 <Igloo> And thanks again!
09:03:59 <JaffaCake> np
09:06:15 <sylvan> when compiling via C, how can I supply my own flags (such as -march etc.) to the c-compiler?
09:06:40 <Igloo> -optcwhatever
09:08:02 <desrt> huh
09:08:06 <sylvan> thanks
09:08:07 <desrt> igloo; i didn't know you were on the FP dreamteam :P
09:08:08 <shapr> hi rik_
09:08:22 <Igloo> The which?
09:08:25 <desrt> the ants
09:08:29 <Igloo> ah
09:08:43 <autrijus> $ ./pugs -MSHA1 -e "say sha1('')"
09:08:44 <autrijus> da39a3ee5e6b4b0d3255bfef95601890afd80709
09:08:50 <autrijus> (using the public domain SHA1.hs)
09:09:02 <autrijus> dons++ # hs-plugins
09:09:19 <Igloo> autrijus: Is that a wrapper around the C library?
09:09:26 <autrijus> no, it's native haskell I think.
09:09:28 <autrijus> doesn't matter :)
09:09:31 <autrijus> it'd work either way.
09:09:39 <Igloo> Oh, can I see it?
09:09:50 <autrijus> # http://tpe.freepan.org/repos/ingy/SHA1/src/SHA1.hs
09:11:09 <Igloo> Hmm, that looks suspiciously like my code. Did I really PD it?
09:11:28 <autrijus> if you had not, my apologies.
09:11:57 * Igloo has no recollection of doing so, but it's not impossible  :-)
09:12:17 <xerox> I think I saw SHA1.hs before on this channel..
09:12:27 <wilx> Hmm, if it wasn't PD how would it get to anybody's hands?
09:12:27 <autrijus> oh, it's BSD. terribly sorry.
09:12:42 <autrijus> adding license back.
09:14:00 <Igloo> That sounds more like me  :-)  Thanks
09:14:52 <sylvan> how did -optc work?
09:15:14 <Igloo> sylvan: I don't understand the question
09:15:22 <Igloo> How do you want the C compiler invoked?
09:16:10 <sylvan> I basically want to add optimization options to the c-compiler
09:16:18 <Igloo> How do you want the C compiler invoked?
09:16:42 <sylvan> something like "gcc -march=pentium4 ..."
09:17:01 <Igloo> Then you want ghc -optc-march=pentium4 ...
09:17:17 <sylvan> okay... I didn't use the second dash
09:17:20 <autrijus> Igloo: thanks, fixed, added license block. :) refresh the url above to see.
09:17:40 <Igloo> You might also want -optl for linker options
09:17:58 <Igloo> Thanks, autrijus  :-)
09:46:37 <basti_> wow.
09:46:43 <basti_> i'm having fun with haskore :)
10:03:57 <rik> hi shapr
10:11:24 <SyntaxNinja> 'morning
10:15:20 <Lemmih> Hey SyntaxNinja.
10:16:42 <nibro> hello :)
10:17:19 <nibro> SyntaxNinja: I tried to get the cabal darcs package, but I get an error
10:17:24 <nibro> know anything about that?
10:17:53 <SyntaxNinja> nibro: no
10:17:57 <SyntaxNinja> nibro: what error
10:17:59 <SyntaxNinja> hey Lemmih
10:18:12 <nibro> ehm, what was the address again?
10:18:40 <SyntaxNinja> not positive, I think cvs.haskell.org/darcs_repos/cabal or something
10:19:17 <Lemmih> s/_repos//
10:22:56 <nibro> gah, the stupid sysadmins!!
10:23:13 <nibro> I asked them to set my file quota to 10000, and they managed to set it to 1000
10:23:22 <nibro> so now I can't do anything
10:23:42 <nibro> unless I delete about 5000 files first...
10:23:51 <SyntaxNinja> heh
10:23:56 <SyntaxNinja> is that the problem? :)
10:24:12 <nibro> no, that wasn't the problem earlier
10:24:39 <nibro> I tried cabal before asking them to change
10:24:58 <SyntaxNinja> I can 'darcs get' the repo just fine.
10:25:52 <jlouis> @version
10:25:53 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- lambdabot 2p249, GHC 6.4 (OpenBSD i386)
10:25:53 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- darcs get http://www.cse.unsw.edu.au/~dons/lambdabot
10:26:13 <nibro> I got something like "Unable to apply patch:"
10:26:21 <nibro> and then a reference to some patch from Feb
10:27:59 <nibro> how incredibly frustrating this is, to not be able to do anything :-(
10:30:09 <SyntaxNinja> nibro: what version of darcs?
10:30:16 <nibro> 1.0.2
10:30:47 <nibro> heh, I had an old account from a course I read, there I can still work :-)
10:31:06 <nibro> getting darcs now
10:31:24 <nibro> ehm, s/darcs/cabal
10:35:10 <Si\> does anyone know if you can use hs-plugins to extract the type of an expression as a String (as in if I used ghc - e ":t \x -> 1 + x")?
10:35:11 <nibro> ok, this is the error:
10:35:13 <nibro> darcs failed:  Unapplicable patch!
10:35:13 <nibro> Unapplicable patch:
10:35:13 <nibro> Thu Feb 10 06:31:12 CET 2005  ijones@syntaxpolice.org
10:35:13 <nibro>   * cvs pull, doc and examples
10:38:04 <SyntaxNinja> nibro: this is with a fresh 'get' or a pull?
10:38:11 <nibro> a fresh get
10:38:30 <SyntaxNinja> i'll look into it.
10:38:45 <shapr> rik: any code?
10:38:55 <shapr> nibro: hey! I got it installed!
10:39:38 <rik> no
10:39:40 <rik> not made a start
10:39:44 <shapr> want to?
10:39:46 <rik> i'm reading SICP at the moment
10:39:51 <shapr> good book to read
10:39:54 * rik nods
10:39:58 <rik> contemplating stuff.
10:40:20 <shapr> You could write the exercises in Haskell too :-)
10:40:24 <nibro> shapr: great! did you try to use it as well?
10:40:29 <shapr> no, not yet
10:40:55 <nibro> I didn't supply the example files I have, do you want them?
10:41:03 <shapr> yes please!
10:41:33 <nibro> I'd add them to the darcs repo if it wasn't for the file quota thingey...
10:41:40 <nibro> now you'll get a mail
10:42:01 <shapr> yay
10:42:03 <shapr> file quota?
10:43:44 <nibro> read ^^^^ and you'll see
10:43:56 <nibro> mail sent
10:44:24 <shapr> oh man
10:44:28 <SyntaxNinja> nibro: strange; a fresh 'get' with the same darcs works fine for me.
10:44:40 <SyntaxNinja> nibro: what platform?
10:47:09 <SyntaxNinja> so... now that I have combined my precious state and IO into the StateT monad, I'm getting greedy.
10:47:16 <shapr> hehe
10:47:27 <SyntaxNinja> I would also like an error monad in the mix, so that I don't to handle error cases after each call.
10:47:38 <shapr> and what about ContT just for extra excitement?
10:48:23 * SyntaxNinja repeats the new Haskell mantra: "Maybe this is an arrow..." ;)
10:48:33 <shapr> do you actually use arrows?
10:49:45 <SyntaxNinja> not right now, I have, as you know.
10:49:53 <shapr> yeah
10:50:46 <SyntaxNinja> I wish there were a caseM structure :)
10:54:19 <nibro> SyntaxNinja: I'm working on Redhat Linux
10:55:34 <SyntaxNinja> nibro: there's your problem ;)
10:55:46 <SyntaxNinja> nibro: hm. honestly, I don't know what might be up.
10:56:11 <SyntaxNinja> can anyone else try  darcs get http://cvs.haskell.org/darcs/cabal  with darcs 1.0.2 to break our tie?
10:56:25 <nibro> Lemmih tried it earlier with no problem
10:58:11 <CosmicRay> hey syntaxninja
10:58:17 <nibro> SyntaxNinja: I'm trying on solaris now
10:58:24 * CosmicRay curses at the wiring in his house
10:59:49 <SyntaxNinja> hiya CosmicRay
11:00:54 <CosmicRay> either this not-quite-cat3 cable isn't good enough to carry a signal, or one of the wires is bad, or there's a short someplace.  eitherway, cosmicray == ticked at the people that built the place
11:02:00 <jlouis> @version
11:02:01 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- lambdabot 2p249, GHC 6.4 (OpenBSD i386)
11:02:01 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- darcs get http://www.cse.unsw.edu.au/~dons/lambdabot
11:06:01 <nibro> hello fajje, how nice to see you in here :-)
11:06:25 <shapr> fajje: you're a chalmerite too?
11:06:26 <fajje> ah, so there you are ;)
11:06:30 <fajje> yep
11:06:56 <fajje> but I skipped eurohaskell. silly me :/
11:07:03 <shapr> tyvärr
11:07:05 <nibro> shapr: fajje is my partner in crime (i.e. hsp)
11:07:09 <shapr> well, maybe you can come to the next one
11:07:19 <fajje> where will it be held?
11:07:33 <SyntaxNinja> Lemmih: is hackage and cabal-get good enough to install hackage yet? :)
11:07:42 <nibro> SyntaxNinja: got the same problem on solaris :-(
11:07:44 <shapr> EuroHaskell 2005 will probably happen in Gothenburg.
11:07:50 <shapr> At chalmers even
11:07:55 <shapr> possibly in the same rooms as last time
11:07:57 <CosmicRay> we need an amerihaskell.
11:08:12 <shapr> The only missing part of EuroHaskell at the moment is someone to organize everything.
11:08:13 * CosmicRay would almost even volunteer to organize it.
11:08:39 <shapr> Actually, is bringert here?
11:08:41 <shapr> guess not
11:08:54 <Lemmih> SyntaxNinja: You can actually download and install a package from GHCi but cabal-get is somewhat under-developed.
11:09:26 <SyntaxNinja> Lemmih: will it get the dependencies?
11:10:02 * chucky would certainly be able to organize a EuroHaskell. But I'm not sure if I have the time
11:10:29 <shapr> chucky: who else can we pick on?
11:10:30 <Lemmih> SyntaxNinja: That's the job of cabal-get.
11:10:36 <fajje> don't pester chucky, he's got an exjobb to do
11:10:47 <fajje> or soon at least
11:11:08 <nibro> fajje: oh, so what will it be then?
11:11:09 <chucky> shapr: bringert :) He knows the right people to get access to some rooms
11:11:35 <fajje> that garbage collector thingy
11:11:36 <SyntaxNinja> Lemmih: ok
11:11:38 <Lemmih> With a little more time, cabal-get might be able to install itself and hackage.
11:11:59 <SyntaxNinja> can it install cabal? that's the most important one :)
11:12:40 <shapr> Right, bringert is the person to talk to.
11:12:52 * Lemmih is running about three or four fulltime projects plus a bit of paid work.
11:13:23 <nibro> fajje: great, I think that's a really cool idea. who will supervise it?
11:13:47 <shapr> The garbage collector thingy? Is chucky integrating the nonstop GC into GHC?
11:14:04 <SyntaxNinja> Lemmih: :)
11:14:05 <Lemmih> SyntaxNinja: When will hackage be able to move in at the new server?
11:14:16 <SyntaxNinja> Lemmih: Real Soon Now :) I just put GHC on it
11:14:19 <SyntaxNinja> and cabal
11:14:35 <SyntaxNinja> does cabal-get require those changes to cabal?
11:14:40 <fajje> nibro: we've asked lennart, but if he can't do it, dave probably can
11:14:43 <SyntaxNinja> and does hackage require 6.4?
11:14:52 <chucky> shapr: If I am, I haven't heard about it yet. :)
11:15:06 <shapr> Which GC thingy are you doing?
11:15:41 <Lemmih> SyntaxNinja: What cabal changes?
11:15:51 <chucky> shapr: see #haskell.se. :)
11:15:58 <SyntaxNinja> so if I want to add Error-monad-like behavior to my stateT monad, that is, so that my StateT monad will do something nice on a fail, do I have to roll my own monad?
11:16:07 <SyntaxNinja> Lemmih: the ones you sent me yesterday
11:16:20 <SyntaxNinja> Lemmih: I'm concerned about people bootstrapping the client
11:16:36 <Lemmih> Oh no. It was just a fix to a bug nibro found.
11:16:50 <SyntaxNinja> you wanted me to expose something too
11:17:10 <shapr> Sadly, I still can't read latin-1, only utf-8.
11:17:51 <shapr> SyntaxNinja: ErrorT ?
11:19:02 <Lemmih> SyntaxNinja: I believe hackage needs 6.4 for some reason.
11:19:03 <SyntaxNinja> hm. I'd rather not embed IO inside StateT inside ErrorT
11:19:21 <SyntaxNinja> Lemmih: ok
11:19:51 <Lemmih> SyntaxNinja: And I can mail you with all the things I would like exported.
11:20:30 <SyntaxNinja> Lemmih: but the qestion is whether you need them for cabal-get, because if so, that's a bootstrapping problem.
11:21:17 <Lemmih> cabal-get doesn't need anything else than 6.4, cabal and XML-RPC.
11:21:50 <SyntaxNinja> ok cool.
11:21:59 <SyntaxNinja> does it work w/ 6.2+cabal?
11:22:14 <Lemmih> I have no idea.
11:22:36 <Lemmih> I thought Cabal was 6.4 only.
11:23:47 <Lemmih> But XML-RPC doesn't work with 6.2 anymore. It's using TH which changed quite a bit.
11:25:42 <camio> I'm interested in using haskell with sqlite. Any suggestions of a library?
11:25:50 <Lemmih> I'm nearing 18 hours of hectic activity so I'm gonna head to bed now (:
11:26:12 <Lemmih> camio: HSQL has a SQLite binding. htoolkit.sf.net
11:26:22 <SyntaxNinja> 'night Lemmih
11:26:31 <Lemmih> camio: I got a cabalization if you're using GHC 6.4.
11:26:50 <SyntaxNinja> or ghc 6.2 + cabal :)
11:26:57 <SyntaxNinja> Lemmih: cabal exists for 6.2 and is in Debian.
11:27:45 <camio> Lemmih, how does that work?
11:28:40 <Lemmih> SyntaxNinja: I'll do some serious cabal-get hacking tomorrow. Good night.
11:28:45 <Lemmih> camio: Cabal or HSQL?
11:29:19 <camio> Lemmih, I'm not really familiar with Cabal and don't understand what a cabalization is.
11:30:58 <nibro> shapr: did you try to run it yet?
11:31:02 * Lemmih pipes camio to #haskell and escapes the evil grasp of IRC.
11:31:18 <shapr> er, no I think I'll try it tomorrow. I am unfocussed this evening.
11:31:40 <shapr> I think I shall ride my enhjuling a bit instead.
11:31:49 <nibro> ok, then I can leave with a good concience ;-)
11:32:02 <shapr> thanks for helping me get it built :-)
11:32:25 <nibro> well, you seem to have managed quite well on your own... but np. :-)
11:32:34 <nibro> see you later
11:32:36 <shapr> cya
11:32:53 * shapr wanders away distractedly
11:33:34 <SyntaxNinja> ooh! MonadState is an instance of Error yay!
11:50:47 <jjang> hey
11:50:52 <jjang> how does deriving show work?
11:52:42 <xkb> example: (if this is what you want)
11:53:07 <xkb> data Bintree a = Leaf a | Brach (Bintree a) (Bintree a)
11:53:17 <xkb> deriving( Show, Eq)
11:53:31 <jjang> i get a parse error
11:53:55 <Philippa_> on what?
11:54:01 <jjang> when i use deriving show
11:54:03 <Philippa_> ("trying to derive show" is not a good answer)
11:54:05 <Philippa_> *smack*
11:54:08 <Philippa_> try again? :-)
11:54:30 <xkb> lol
11:54:56 <jjang> oh wait
11:55:01 <jjang> i had a lowercase s
11:55:07 <jjang> bitching compiler
11:55:12 <xkb> haha
11:55:21 <xkb> rightfully so :D
11:55:29 <jjang> so with deriving show what can i do?
11:55:41 <xkb> print it to stdout for example
11:55:45 <Philippa_> show foo, where foo's of the appropriate type
11:55:50 <Philippa_> show foo :: String
11:56:07 <jjang> ok thx
11:56:15 <Philippa_> oh, and if you have a valid instance of Read then read . show = id
11:56:37 <jjang> read turns a string in a data type right?
11:56:41 <Philippa_> right
11:56:46 <xkb> check
11:56:52 <jjang> if u got several data types
11:56:59 <Philippa_> how does it know?
11:56:59 <jjang> how does read know which one it is?
11:57:00 <jjang> ye
11:57:08 <Philippa_> either from existing context, or because you supply an annotation to say which
11:57:16 <Philippa_> I tend to do the latter, eg (read foo) :: Int
11:57:30 <jjang> ok
11:57:46 <Philippa_> (that's a valid line of code, says that the result of read foo is an Int)
11:58:28 <jjang> gonna play some with this stuff
11:58:40 <jjang> i have to make the Turtle excersice
12:02:31 <xkb> jjang: of which book?
12:15:33 <jjang> xkb: dunno
12:15:43 <jjang> just an excersice my teachers made
12:15:49 <jjang> its on the website
12:39:49 <SyntaxNinja> anyone know offhand how to annotate a haddock comment with a throws clause?
12:40:55 <dcoutts> what do you mean by a throws clause?
12:41:26 <SyntaxNinja> I seem to remember that haddock will tell you if a function throws an error, just wondering the syntax of the markup
12:41:33 <RemiTurk> hi all
12:41:44 <ski> hello RemiTurk
12:42:38 <dcoutts> I don't think there is any special haddock syntax for that, just use ordinary markup like "* throws foo if error condition bar occurs"
12:47:01 <SyntaxNinja> ok
12:48:40 <theorbtwo> Hey, lambdaites: pugs 6.2.0 (http://wagner.elixus.org/~autrijus/dist/Perl6-Pugs-6.2.0.tar.gz) causes a -dcore-lint error (with or without -O) '*** Core Lint Errors: in result of Desugar ***'
12:48:44 <theorbtwo> @lisppaste
12:48:45 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- Unknown command.
12:49:51 <lightstep> @paste
12:49:51 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- http://www.haskell.org/hawiki/HaskellIrcPastePage
12:50:03 <theorbtwo> Thanks.
12:54:44 <theorbtwo> http://sial.org/pbot/9275
12:55:21 <theorbtwo> OTOH, if it this is an actual problem, our test suite does not reveal it, and it's a pretty sizable test suite.
12:58:37 * boegel bounces
12:59:19 <jjang> anyone familiar with wx library?
13:01:51 <lightstep> to what degree?
13:03:18 <jjang> have you worked with it?
13:03:25 <lightstep> yes
13:03:26 <jjang> the documentation is terrible
13:03:35 <jjang> there is some type called DC()
13:03:44 <jjang> you have any idea what its supposed to mean?
13:03:49 <lightstep> device context
13:04:07 <Cale> Yeah, I was about to guess that :)
13:04:13 <lightstep> a horrible abstraction in current graphics systems, popularized for performance reasons
13:04:18 <jjang> so
13:04:24 <jjang> when a function asks dc
13:04:28 <jjang> what should i type?
13:04:38 <lightstep> your dc hold your current position, current line style, current fill, current font, etc
13:04:56 <jjang> mm k
13:05:08 <jjang> you have good function list of the wx library?
13:05:18 <jjang> cause they only supplied me with a sucky paper
13:06:15 <lightstep> there was some page with automatic documentation
13:06:57 <jjang> u know where to google on?
13:07:15 <lightstep> @google wxhaskell
13:07:16 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- http://wxhaskell.sourceforge.net/
13:07:52 <jjang> that was the sucky version ;p
13:07:53 <wagle> @google lambdabot
13:07:54 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- http://cvs.sf.net/viewcvs.py/haskell-libs/libs/lambdabot/
13:08:09 <lightstep> the "documentation" link is recommended
13:08:19 <wagle> sucky version?  which is the non-sucky?
13:08:27 <jjang> no idea
13:08:36 <jjang> i have not seen a non sucky version
13:08:43 <boegel> jjang: use gtk2hs
13:08:55 <lightstep> is it less imperative?
13:09:14 <boegel> lightstep: what is ? gtk2hs ?
13:09:20 <lightstep> yes
13:09:28 <boegel> I think it is, but I'm not sure
13:09:32 <wagle> oh..  and i was going to try to figure out why wxMac barfed while compiling
13:09:39 <boegel> lightstep: read my article in tmr1 and you'll find out
13:09:52 <wagle> @google tmr1
13:09:53 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- http://forum.microchip.com/tm.asp?m=81089
13:10:22 <Cale> @google The Monad Reader
13:10:24 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- http://www.haskell.org/hawiki/TheMonadReader_2fIssueOne
13:11:20 <lightstep> jjang, the non-sucky documentation is in the source code. the comments in Events.hs really help a lot
13:12:06 <jjang> ok lemme check
13:12:23 <lightstep> and anyway, i find browsing the source much better than the haddock pages, they are so clear and much more informative
13:14:27 <jjang> i still have no idea how that DC works
13:16:05 <lightstep> the dc also contains the drawing region
13:16:11 <lightstep> circle :: DC a -> Point -> Int -> [Prop (DC a)] -> IO ()
13:16:43 <jjang> ye all this functions seem to have a dc parameter
13:16:55 <jjang> but i cant find the original source
13:16:59 <lightstep> which contains the drawing context
13:17:32 <lightstep> grep Event.hs for DC
13:18:09 <lightstep> naturally, you can't get a dc except in a monadic computation, and the likely suspect is `on paint'
13:18:51 <jjang> i require to much intelligence to get that :|
13:20:38 <lightstep> many monadic functions in wxhaskell get lists of properties
13:21:42 <lightstep> for example, frame has a `text' property, and button has an `on click' property
13:22:04 <lightstep> click is an event, and `on' and `:=' makes a property of an event
13:23:40 <jjang> oh that stuff
13:23:55 <jjang> monadic stuff is that Do etc right?
13:24:07 <lightstep> yes
13:24:31 <lightstep> things with type IO (), or M a for some monad M and type a
13:26:05 <lightstep> btw, does anyone know what's with debian&wxhaskell&6.4 ?
13:27:02 <jjang> wxhaskell only works with 6.2.2
13:27:33 <lightstep> rumor says it works with 6.4 on mac and on redhat
13:27:41 <jjang> my teacher made it
13:27:50 <jjang> and he says only 6.2.2 works with it
13:27:56 <Itkovian> how does one obtain the actual data using hGetBuf
13:27:57 <Itkovian> ?
13:28:02 <jjang> but maybe it works by accident
13:28:04 <lightstep> cool
13:28:13 <Itkovian> nevermind
13:28:22 * Itkovian read too fast
13:44:38 * boegel leaves
13:44:57 <Muad_Dibber> cya boegel
13:45:46 <jjang> is there some function which converts int to double?
13:45:56 <RemiTurk> fromIntegral
13:47:12 <jjang> @fromIntergral
13:47:13 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- Unknown command.
13:47:16 <jjang> :|
13:47:23 <Cale> @info fromIntegral
13:47:24 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- Unknown command.
13:47:29 <Cale> @type fromIntegral
13:47:34 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- fromIntegral :: forall b a. (Num b, Integral a) => a -> b
13:47:52 <Cale> @plugs (fromIntegral 5) :: Double
13:47:58 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- 5.0
13:48:07 <RemiTurk> jjang: and for the other way around, try :info RealFrac
13:48:19 <lightstep> so it does have glasgow extensions?
13:49:16 <lightstep> where it = lambdabot
13:55:07 <blackdog> re
14:07:16 <wagle> @type fromHell
14:07:18 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- bzzt
14:07:22 <wagle> good
14:17:05 <jjang> @type line
14:17:07 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- bzzt
14:17:53 <sorje> @type lines
14:17:54 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- lines :: String -> [String]
14:18:07 <jjang> no
14:18:09 <jjang> i need line
14:19:46 <wagle> @index line
14:19:46 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- Unknown command.
14:19:53 <wagle> @help
14:19:54 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)-  @help <command> - ask for help for <command>
14:20:04 <wagle> @listcommands
14:20:05 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- Commands: all-dicts arr babel define definitions del-definition devils dice
14:20:05 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- dict dict-help dummy dynamic-load dynamic-reload dynamic-unload easton echo
14:20:05 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- elements eurohaskell eval foldoc fortune gazetteer get-definition google
14:20:05 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- help hitchcock jargon join karma karma+ karma- kind learn leave listchans
14:20:05 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- listcommands listmodules lojban moo more msg part paste pl pl-resume plugs
14:20:05 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- pointless prelude quit quote reconnect remember resume seen set-fuel state
14:20:07 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- timein topic-cons topic-init topic-snoc topic-tail topic-tell type vera
14:20:09 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- [1 @more lines]
14:20:11 <Cale> jjang: you possibly mean line :: DC a -> Point -> Point -> [Prop (DC a)] -> IO ()  from wxHaskell?
14:20:18 <jjang> ye
14:20:28 <jjang> but that documentation doesnt have a search function
14:21:19 <Cale> It has an index
14:21:47 <Cale> which you can use together with your web browser's search
14:22:56 <wagle> whats the lambdabot command that finds the name in all the modules?
14:23:05 <shapr> it's gone for the moment
14:23:12 <wagle> NOOOOooOOooOO
14:23:12 <shapr> but it was @index
14:23:16 <wagle> howcome?
14:23:29 <shapr> Because it requires compiling 95% of Haddock into lambdabot
14:23:49 <shapr> which is very silly, there's a much easier way.
14:23:56 <jjang> Cale: a terrible index ye
14:24:10 <jjang> i have to know in which of those files the function is located
14:24:17 <shapr> jjang: if you spent half the time learning Haskell that you spend whining, you'd have a lot less trouble.
14:24:21 <wagle> easier?  it worked before, but no now..  the before most have been easier..  8-p
14:24:42 <shapr> wagle: true that
14:24:43 <jjang> i dont whine
14:24:48 <pesco> kosmikus: Re lhs2TeX again, correct behaviour you say? I can't have underscores in comments?!
14:25:10 <wagle> whats the easier way?
14:25:23 <Cale> jjang: hm? If you click, you'll be taken to the appropriate module
14:25:26 * pesco bows excusingly to everyone for the impolite interruption.
14:25:37 <shapr> to add the changes into Haddock such that it can dump out the dictionaries as text.
14:25:37 <jjang> ye but i have no idea in which module a function is located
14:25:52 <Cale> jjang: hm?
14:25:58 <jjang> like line
14:26:06 <shapr> jjang: in the open source world, if you feel that something is terrible, it is your job to fix it.
14:26:11 <wagle> xml!  *<8-o
14:26:27 <Cale> Graphics.UI.WX, Graphics.UI.WX.Draw
14:26:31 <Cale> it says right there
14:26:36 <jjang> shapr: i would if it did it for fun
14:26:37 <skew> jjang: 1) find function in index 2) click function to go to it's module
14:27:35 <skew> shapr: did you ever look at the language Aardappel?
14:27:40 <shapr> skew: of course!
14:27:53 <shapr> I've exchanged a few emails with Wouter van Oortmerssen.
14:28:49 <shapr> jjang: I assume that you want to have a degree, and that's why you're taking this class.
14:29:00 <jjang> i can afford 1/10
14:29:05 <jjang> for next exam
14:29:31 <shapr> skew: What do you think about Aardappel?
14:29:46 <shapr> What about the other languages by Wouter?
14:29:58 <skew> It reminded me of that "subtext" thing you mentioned a while ago, only better thought out
14:30:19 <shapr> jjang: I surely didn't put this class in your degree requirements, so I really don't want to hear you complain about being forced to learn Haskell.
14:31:01 <jjang> ok then dont ask about it
14:31:19 <skew> Everything by Wouter (his game and fisheye photographs too) is highly nonstandard and very interesting
14:32:00 <shapr> Yeah, he has a lot of fascinating insights.
14:32:32 <skew> it's like he is trying to rebuild computing from a new perspective
14:32:46 <skew> did you ever figure out how to make new code with Aardappel?
14:32:49 <shapr> I think he surfed quite a few perspectives.
14:32:58 <shapr> I dearly wish I could try out all of his languages.
14:33:16 <skew> has he lost the code to some of them?
14:33:30 <shapr> I asked him for binaries, but he said anything he's willing to release has its own page.
14:34:47 <kosmikus> pesco: comments are formatted as text, not code
14:34:57 <wagle> last version of haddock appears to be November 11 2003?
14:35:02 <kosmikus> pesco: i.e., _ is subscript, and subscript requires math mode
14:38:03 <pesco> kosmikus: Aha, I wasn't aware.
14:38:33 <kosmikus> pesco: if you have code in comments, you can always do {- |x_1| -}
14:38:52 <kosmikus> pesco: for pragmas, this is somewhat broken though, because the syntax is fixed
14:38:52 <pesco> Oh.
14:39:21 <pesco> My case is this: {-# DEPRECATED "Import System.Console.Cmdline.Pesco_1" #-}
14:39:39 <kosmikus> yes
14:39:53 <kosmikus> my suggestion would be to exclude this line from formatting :)
14:40:08 <pesco> How to?
14:40:18 <kosmikus> %if False %endif ?
14:40:43 <pesco> Er.
14:41:42 <kosmikus> ?
14:41:48 <wagle> shapr?
14:41:52 <shapr> yes?
14:41:57 <wagle> last version of haddock appears to be November 11 2003?
14:42:12 <shapr> I think there's a later version in the fptools tree.
14:42:38 <kosmikus> pesco: or do you use a poly/newcode approach anyway?
14:42:49 <pesco> poly.
14:42:53 <shapr> wagle: hold on, I'll upload it
14:42:55 <skew> shapr: I think rereading the readme told me what I need - type names in the top, the icons just replace certain names, look up primitives in the source
14:43:02 <Igloo> haddock version numbers aren't dates, and there's been a release way mroe recently than that
14:43:37 <shapr> skew: Have you tried Epigram?
14:43:39 <kosmikus> pesco: then this should at least make your module compile, although you don't get the pragma in your .tex document
14:43:50 <skew> a while ago
14:44:03 * wagle pokes around in the fptools cvs, where he's never been before
14:44:19 <pesco> That's unfortunate, since the pragma is pretty much the entire point there is to this module.
14:46:00 <shapr> wagle: fptools is *fun*
14:46:20 <pesco> kosmikus: Maybe pragmas should be recognized as such by lhs2TeX and not set as text?
14:47:41 * pesco googles for lhs2TeX for the n-th time.
14:48:48 <kosmikus> pesco: yes, but it's somewhat unclear how pragmas should be handled
14:48:58 <kosmikus> not everything in pragmas is necessarily code
14:49:18 <kosmikus> pesco: I'll try to improve it in the next release, whenever that'll be :)
14:49:21 <pesco> Hm.
14:49:59 <pesco> Isn't there some quick but maybe imperfect way that still fixes my problem without breaking anything?
14:50:10 <pesco> I'd be happy to patch it in myself if you don't have time.
14:50:22 <pesco> (Assuming I could find my way through the code.)
14:50:34 <SyntaxNinja> pesco: quick... imperfect... guaranteed not to break anything... sounds like a job for unsafePerformIO!
14:50:41 <pesco> haha.
14:51:09 <pesco> kosmikus: First thought: Command line option to set pragmas in verbatim.
14:52:32 <kosmikus> pesco: you won't have too many occurrences, right? so why not typeset the pragma line by hand, and exclude the real one from typesetting like I said
14:52:33 <skew> shapr: I can't figure out how to select the nil in a list in AardEd
14:52:49 <kosmikus> with poly/newcode you could also do it in a slightly nicer way, generating both from common input
14:52:56 <kosmikus> but I have to get some sleep
14:53:23 <kosmikus> if you have more questions, just put them here with my name in it, I'll answer them later ...
14:53:40 <pesco> OK. I'll try to fiddle around a bit.
14:55:31 <skew> hmm, the subtext guy doesn't include Aardappel in his references
15:06:08 <shapr> salut Eve
15:06:16 <shapr> greetings poetix
15:06:36 <poetix> evening
15:07:31 <shapr> skew: I think the Epigram interface is similarly unusual.
15:09:04 <skew> shapr: I wasn't talking about the interface
15:09:20 <shapr> ah
15:14:35 <svens> hi
15:15:35 <wagle> golly: "The release date for the newest version of Mac OS X is official—April 29, 2005."
15:15:40 <svens> is there some function like the sleep() from C in haskell?
15:18:54 <skew> shapr: Have you looked at Cube?
15:22:24 <monochrom> svens: I can only find Control.Concurrent.threadDelay
15:22:49 <svens> hm
15:23:13 <svens> i just want to read data from a file every 5 seconds...
15:24:13 <skew> there is also System.Posix.Unistd.sleep, if it makes any difference
15:24:29 <monochrom> Ah, the latter is preferrable.
15:24:39 <skew> why is that?
15:24:50 <monochrom> It literally is C's sleep().
15:25:14 <skew> doesn't that work out badly if you have multiple Haskell threads?
15:25:51 <monochrom> Yes.
15:26:28 <wagle> naptime for all the little threads
15:26:33 <skew> threadDelay should just set the timeout on the select that the Haskell runtime is doing anyways
15:27:14 <skew> The units to threadDelay are in microseconds, otherwise it's just about the same as sleep
15:28:06 <skew> except it will actually work if you ever try to run several copies of your file-reading function in different threads
15:28:11 <wagle> how about repetitive timer interupt that goes off every 5 seconds?
15:29:13 <wagle> (or maybe each timer event handler resubmits a 5 scond timers for the case of a long handling (dont wasnt overlapping)
15:30:49 <svens> threadDelay works well. thx :)
15:34:29 <wagle> i think i find the dead reckoning "delay" approach disconcerting because so many things depend on that and never wake up again because the previous handler never finished because "this will only take a tiny amount of time" (and it doesnt)
15:36:16 <shapr> skew: I've played Cube, but not really read about the internals, I have the impression that it uses something original though.
17:28:18 <blackdog> re
17:30:26 <dons> moin
17:30:41 <blackdog> morning don
17:32:01 <dons> hey blackdog
17:33:31 <dons> :/
17:33:32 <dons> Fail: bug in darcs!
17:33:32 <dons> in function reconcile_unwindings
17:33:42 <blackdog> Yow.
17:34:00 <dons> @seen jlouis
17:34:01 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- jlouis is in #haskell. Last spoke 6 hours 32 minutes ago.
17:42:23 <chr1s> Hey, I'm stuck with those IO Monads again
17:42:39 <chr1s> I'm trying to read a file and return it as a string:
17:42:50 <chr1s> readTurtleFile f filename = do
17:42:50 <chr1s>                                 file <- readFile filename
17:42:50 <chr1s>                                 return file
17:43:07 <gzl> yeah, that won't return a String.
17:43:21 <wagle> @type readFile
17:43:26 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- readFile :: FilePath -> IO String
17:43:34 <gzl> and you can't, once you use return it'll stick it back into IO.
17:43:54 <chr1s> so....
17:43:55 <gzl> either you can do that stuff in the function in which you need to do the String processing or you can use unsafePerformIO.
17:44:04 <chr1s> hm
17:44:17 <chr1s> well, I just want to read the file and use it as a string
17:44:23 * stepcut highly recommends NOT using unsafePerformIO 
17:44:41 <gzl> this should help. http://haskell.org/hawiki/ThatAnnoyingIoType
17:45:09 <chr1s> hm yeah
17:45:43 <chr1s> I'll try :) thanks.
17:46:09 <gzl> yeah, i'm not recommending unsafePerformIO, just saying it's there.
17:47:14 <blackdog> i was wondering about one place I used unsafePerformIO - any opinions on this code?
17:47:23 <blackdog> mkRegexMaybe :: String -> Maybe Regex
17:47:24 <blackdog> mkRegexMaybe l = let r = mkRegexWithOpts l True False in
17:47:24 <blackdog>                  case unsafePerformIO $ Control.Exception.try (evaluate r) of
17:47:24 <blackdog>                     Left  _  -> Nothing
17:47:24 <blackdog>                     Right s -> Just s
17:47:27 <gzl> most likely what you want to do is have a function that grabs the String from readFile, passes it to some function that does the processing, and then prints out the result or whatever you want to do.
17:47:44 <chr1s> yeah, I get it now I think :)
17:47:47 <gzl> what you're trying to do is the reverse.
17:47:53 <gzl> ok.
17:48:00 <chr1s> I'm mr. Javaboy
17:48:51 <dons> blackdog: hmm. let me do some code diving..
17:49:49 <dons> mkRegexWithOpts s single_line case_sensitive
17:49:50 <dons>    = unsafePerformIO (RE.regcomp s (RE.regExtended + newline + igcase))
17:50:16 <dons> I'm not sure this unsafePerformIO try is safe.
17:50:30 <gzl> is there any rule of thumb for when unsafePerformIO is appropriate?
17:51:17 <dons> yeah. hmm. there is. something along the lines of 'you have to imagine a way to implement it purely'
17:51:31 <dons> I'm sure someone round here has the ref.
17:51:52 <gzl> ok.
17:52:28 <blackdog> dons: I can imagine writing a pure regex builder - there's no real reason for it to be an IO function. It's only because it's interfacing to the C library that it's in IO, is it not?
17:52:51 <dons> yep. I have no problem with that (that's how Text.Regex is implemented)
17:53:31 <dons> let me code up something.
17:53:34 <blackdog> all i'm really trying to do here is catch the case when it fails to build it and return a bit more gracefully
17:53:52 <blackdog> partial functions are so tacky
17:54:09 <dons> I don't think I've ever seen a let in unsafeFoo* construct though.
17:54:09 <gzl> they're nice.
17:55:52 <blackdog> partial functions are nice??
17:59:02 <Cale> blackdog: I wonder whether that should be corrected at the library level -- there ought to be a version which produces a Maybe Regex
17:59:18 <blackdog> Cale: hell yeah. I'm merely a peon, however.
17:59:47 <dons> blackdog, along the lines of http://www.cse.unsw.edu.au/~dons/t.hs
17:59:59 <dons> that could go in to the libraries almost
18:00:09 <Cale> Have you requested anything on the libraries mailing list? Come to think of it, I might have seen a post related to this...
18:00:36 <blackdog> Cale: nope. just hacked it up a few days ago, and have been having nagging feelings of ickiness.
18:00:37 <dons> I'm still a bit worried about mixing exceptions and unsafePerformIO.
18:01:12 <blackdog> dons: Ok. It's in Vixen.hs at the moment - where should the mkRegexMaybe function go? I can change it and submit a patch, but you might have a better idea.
18:01:38 <dons> that's just it. this is a libraries change. it inlines mkRegexWithOpts
18:01:49 <dons> so we don't get double our unsafes
18:03:16 <dons> I'll think about it some more today
18:03:26 <blackdog> okeydoke. i shall leave it in your capable hands.
18:13:11 <lispy> i'm trying to time my code, and so I wanted to test my timing code.  Is there an easy way to make my program sleep?
18:13:54 <Darius> @listmodules
18:13:55 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- babel base dice dict dummy dynamic eval help karma more pl plugs quote search
18:13:55 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- seen state system topic type version vixen
18:18:05 <lispy> i think i'll just use readline
18:18:35 <dons> lispy, you can call sleep. there's a number of sleep-ish functions available to you
18:19:27 <Cale> threadDelay should work
18:19:31 <dons> @type  Control.Concurrent.threadDelay
18:19:32 <dons> for one.
18:19:32 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- Control.Concurrent.threadDelay :: Int -> IO ()
18:20:15 <lispy> cool
18:20:16 <lispy> thanks
18:20:23 <dons> btw, that's one of the weirder statements: Is there an easy way to make my program sleep? .. i think i'll just use readline
18:20:49 <lispy> i'm just trying to test my timer
18:20:55 <lispy> i want to make sure it is timing stuff
18:21:04 <lispy> so as long as i can slow my program down that is good
18:21:50 <dons> how about a slow computation?
18:23:03 <lispy> that would have worked as well
18:23:09 <dons> @plugs [0..] !! 1000000
18:23:13 <lispy> threadDelay is doing what i want
18:23:14 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- Stack overflow
18:23:18 <dons> hehe
18:23:58 <stepcut> stack overflow!!
18:23:59 <Darius> Does GHC's definition of (!!) rely on strictness analysis?
18:24:00 <stepcut> :-(
18:24:15 <blackdog> ...is it strictifying it or something?
18:24:16 <dons> there's no -O in @plugs
18:24:35 <Darius> @plugs sum [1..1000000]
18:24:36 <blackdog> that should be a classic producer/consumer relationship, yeah?
18:24:38 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- Stack overflow
18:25:04 <Darius> blackdog: I'd think the -list- is not the problem.
18:26:57 <dons> @quit morning patch injection
18:27:16 <dons> @quote
18:27:16 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- HavocPennington says: Haskell is the least-broken programming language available
18:27:16 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- today.
18:27:31 <dons> @version
18:27:32 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- lambdabot 2p268, GHC 6.4 (OpenBSD i386)
18:27:32 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- darcs get http://www.cse.unsw.edu.au/~dons/lambdabot
18:28:07 <dons> I think at p300 I'll freeze, and we can do some regress testing for lambdabot v3
18:31:32 <chr1s> is there a standard strToInt function in haskell?
18:31:45 <dons> @type read
18:31:46 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- read :: forall a. (Read a) => String -> a
18:32:01 <dons> @plugs (read "42") :: Int
18:32:03 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- 42
18:32:26 <Darius> @plugs read "(   43, 10 )" :: (Int,Integer)
18:32:27 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- (43,10)
18:34:53 <chr1s> I mean more like a function that returns Maybe Int
18:35:18 <Darius> @type listToMaybe . reads
18:35:19 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- bzzt
18:35:41 <Darius> @type fmap fst . Data.Maybe.listToMaybe . reads
18:35:42 <dons> @type Maybe.listToMaybe . reads
18:35:43 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- fmap fst . Data.Maybe.listToMaybe . reads :: forall a.
18:35:43 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)-                                              (Read a) =>
18:35:43 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)-                                              String -> Maybe a
18:35:43 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- Maybe.listToMaybe . reads :: forall a.
18:35:43 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)-                              (Read a) =>
18:35:43 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)-                              String -> Maybe (a, String)
18:36:23 <chr1s> hm, I think writing my own function would be nicer. Weird that it's not a standard function.
18:36:45 <Darius> A bit.
18:37:20 <Darius> @type Monad.liftM fst . Monad.msum . reads
18:37:22 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- bzzt
18:39:30 <Darius> @type Monad.msum . map (return . fst) . reads
18:39:31 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- Monad.msum . map (return . fst) . reads :: forall (m :: * -> *) a.
18:39:31 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)-                                            (Control.Monad.MonadPlus m, Read
18:39:31 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- a) =>
18:39:31 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)-                                            String -> m a
19:30:24 <Darius> The world would be a better place if C had TCO.
19:32:07 <wagle> tco?
19:34:33 <Darius> tail call optimization
19:35:50 <wagle> it does
19:36:24 <wagle> i counted 163 tail calls in libc.so 3 years ago
19:36:57 <Darius> wagle: tail -recursive- calls?  And anyways, a C implementation is not the C language.
19:37:06 <wagle> (wrote an adhoc parser for objdump -S to find calls and tailcalls to check that I was handling them correctly
19:37:21 <wagle> tail and sibling calls
19:39:08 <wagle> ok gcc
19:39:56 <wagle> i have seen it turn tail recursion into while-loop styler iteration
19:40:17 <Darius> gcc has supported optimizing tail recursion for a while
19:40:39 <wagle> Jeff Law started it, i believe
19:40:57 <wagle> its gotten better than his initial stuff
19:41:02 <Darius> If it optimizes all tail calls that'd be news to me (not that I stay abreast gcc enhancements).
19:41:39 <wagle> kinda hard with the stack layout..  propolice/ssg makes it harder
19:42:44 <wagle> but i beat the tail call drum pretty hard at the first gcc developers summit
19:43:20 <wagle> (its my killer app for having the memory layout be systematic)
19:43:39 <wagle> need to know memory layout for security optimizations
19:43:57 <wagle> otherwise the big trend is to ignore memory
19:44:11 <wagle> memory layout being accidental
19:44:40 <wagle> i didnt know enough about cache line tweaking to beat that drum
19:44:58 <wagle> (hmm)
19:45:43 <wagle> i've been noticing someone working on tail/sibling calls in #gcc for the past year
19:50:12 <wagle> anyone get aardappel to work?  (hardcoded paths)
19:53:28 * Darius finally downloads an OCaml implementation, though whether he'll install it is a different question.
19:53:57 <Darius> Actually, at 10.3MB over a 56k line, the question is whether I will finish downloading it.
19:54:06 <Touqen> heh
19:54:43 <wagle> i once spent three days downloading a cdrom iso, only to have it die a few bytes from the end
19:55:13 <KrispyKringle> Dialup was the biggest impedement to me being much of a pirate.
19:55:23 <KrispyKringle> I remember downloading a full movie over the course of maybe two weeks once.
20:07:41 <Huskie> Hi all
20:07:44 <SamB> KrispyKringle: impressive.
20:08:05 <Huskie> Any parsec experts here?
20:08:30 <SamB> I once downloaded an episode of anime, in the summer of 2003... it took me all week. Fortunately, it was licensed the next week.
20:09:30 <gzl> does anyone happen to know offhand if there's a simple way to convert a string of HTML into WASH "format"?
20:09:32 <SamB> (I had previously downloaded many others over broadband, to which I no longer had access)
20:27:31 <stepcut> gzl: isn't there a tool for that on the wash/cgi webpage ?
20:27:38 <stepcut> wash2hs or something...
20:28:23 <Lemmih> Good morning, #haskell.
20:29:36 <gzl> stepcut: huh. let me see.
20:31:47 <gzl> stepcut: i see it mentioned but it doesn't appear to actually be in the installation
20:34:53 <gzl> oh, it's under washparser. but washparser is a preprocessor, it's not something you can just call
20:41:52 <Lemmih> @seen SyntaxNinja
20:41:53 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- I haven't seen SyntaxNinja
20:44:04 <gzl> stepcut: yeah, unfortunately, it doesn't look like this is going to work. that program does some other things as well that don't quite match
21:11:01 <skew> has anyone here used Aardappel?
21:16:08 <wagle> sort of
21:16:24 <skew> I'm having trouble getting the concurrent tree reduction part to work
21:16:34 <skew> it seems like all my trees just sit there and some turn red
21:17:14 <skew> is there any asymmetry between the dotted and solid parts of the in/out box in a definition?
21:17:34 <wagle> i didnt geteven that far..  (spend maybe a minute or two)
21:17:57 <wagle> mostly getting the paths to work
21:18:19 <skew> The most recent thing I tried was making a rule like paradd(1) { data(2) } = paradd(+(1,2)), and then trying to evaluate a bag { paradd(0), paradd(0), data(1), data(1), data(1), data(1) }
21:18:50 <wagle> dont think i'll be any help
21:18:57 <skew> you had trouble with the paths?
21:18:59 <wagle> i hope to poke more at it later
21:19:25 <wagle> w:\foo\bar\projects\snarf\eep.hs
21:19:59 <wagle> well, ok: W:\aarded\projects\ts_bottleneck_tests\project.ap
21:20:22 <wagle> i'm on a unix/macosx
21:20:39 <skew> it seems to work for me, on Linux
21:20:41 <wagle> oh well, i'm tired and going home now..  cya/have fun
21:20:57 <wagle> hmm..  maybe i got the wrong one?
21:22:22 <wagle> i got the zip from http://wouter.fov120.com/aardappel/
21:22:36 <skew> so did I
21:22:46 <skew> are you trying to run the .bat files or something?
21:23:02 <skew> I did have a very odd problem where the aarded.sh file would not work
21:23:18 <skew> but it was only three lines and when I retyped it that worked fine
21:23:28 <skew> I suppose I should diff them
21:23:32 <wagle> cd src
21:23:33 <wagle> java AardEd
21:23:54 <skew> that's what aarded.sh that I'm using does
21:24:21 <wagle> had to change AardEd.prefs  and aarded.~ds
21:24:35 <wagle> else it had errors loading
21:25:26 <wagle> fixing that used up most my goofing off time allotment
21:25:52 <wagle> i figured i really needed to skim/read the thesis
21:28:03 * wagle takes off
22:00:06 <sjanssen> is it time for me to try GHC 6.4?
22:00:41 <Lemmih> sjanssen: Yes!
22:00:56 <sjanssen> yessir
22:07:47 <Lemmih> Oejet: God morgen.
22:08:00 <Oejet> Lemmih: Godmorgen, morgenfriske Lemmih.
22:15:33 <vdrab> Hi #haskellers ! Does anyone know whether the FFI beast can be tamed to work with python ?
22:15:52 <sjanssen> how long is this (GHC 6.4) compile going to take?
22:16:06 <Lemmih> vdrab: CosmicRay has made a binding to Python.
22:16:20 <Lemmih> Called missingPy, iirc.
22:16:24 <vdrab> lemmih : A statue for that man !
22:16:31 <vdrab> where can I read about it?
22:16:34 <Oejet> sjanssen: ~5-8 hours.
22:16:36 <dons> 20 mins on a fast box, sjanssen. though 1hr is probably usual
22:16:43 <Lemmih> @google missingPy
22:16:45 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- http://quux.org/devel/missingpy
22:16:46 <dons> or in Oejet's case...
22:16:57 <vdrab> thanks a lot
22:17:03 <Lemmih> You kick ass, lambdabot.
22:17:15 <Oejet> dons: Hey what kind of machince do you have? :-P
22:17:18 <vdrab> he sure does
22:17:22 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- Of course I do.
22:17:22 <Oejet> *machine
22:17:45 * vdrab wonders if lambdabot is a 'he'...
22:18:31 <dons>  Intel(R) Pentium(R) 4 CPU 2.53GHz
22:18:37 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- You can call me "sir".
22:18:40 <lispy> i'm trying to understand monads via the Random module.  I was hoping to write a function which returns an Int instead of IO Int (I'd like to return a random integer).  Is this possible?
22:18:52 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- Or "ma'am". I'm not picky.
22:19:09 <Lemmih> lispy: Yes. It'll just be the same random int (:
22:19:20 <Lemmih> myRandomInt = 4242158
22:19:29 <lispy> er...
22:19:35 <lispy> :)
22:19:49 <lispy> i found this rollDice example, I was hoping to change it so that the return value is not a monad
22:19:56 <lispy> can I do that?
22:19:59 <sjanssen> lispy: nope
22:20:32 <Lemmih> Sure. You just have to parse the generator around.
22:20:40 <dons> yep.
22:20:41 <Oejet> dons: Me: AMD Duron(tm) processor stepping 01, 1202.885 MHz, 393152K RAM, L1 I Cache: 64K, D cache 64K, L2 Cache: 64K.
22:20:55 <dons> @type System.Random.random
22:20:57 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- System.Random.random :: forall a g.
22:20:57 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)-                         (System.Random.Random a, System.Random.RandomGen
22:20:57 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- g) =>
22:20:57 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)-                         g -> (a, g)
22:21:24 <dons> just teasing Oejet - but 5-8hrs seems extreme
22:21:42 <dons> the nightly builds don't take that long, and they spend 60+% of their time in regress testing
22:21:42 <lispy> okay, well thanks for the help
22:22:21 <Lemmih> s/parse/pass/
22:22:52 * SamB is happy to see actual use of his google stuff ;-)
22:23:04 <dons> it's a pretty popular module, SamB
22:23:18 <Oejet> dons: Well, I guess 4-5 hours here then.
22:23:23 <Lemmih> @plugs random (mkStdGen 42) :: (Int,StdGen)
22:23:25 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- (-1673289139,128694412 1655838864)
22:23:33 <blackdog> yeah, i'm dead jealous. not even outrageous flirting can make my module popular...
22:24:26 <dons> maybe in non-coding channels it will @vixen will find its niche
22:25:34 <blackdog> true. any suggestions? I only hang out in coding channels...
22:25:34 <dons> SamB, and since you went to the trouble of crafting a patch, I ok'd the less-terse-bot msg ;)
22:26:11 <SamB> nice.
22:27:20 <Lemmih> @plugs randomIO :: IO Int
22:27:21 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- No IO allowed
22:27:25 <Lemmih> haha
22:27:49 <dons> it's a typesafe wonder-bot!
22:27:50 <SamB> @plug Haskell
22:27:51 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- Unknown command.
22:28:10 <SamB> oh, right, it doesn't reload code on-the-fly, duh...
22:28:13 <dons> @quit
22:28:20 <dons> @foo
22:28:21 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- Unknown command, try @listcommands.
22:28:47 <dons> dynamic modules are reloaded on the fly, sort of
22:28:55 <Gahhh> dons: you need a lambdabot testing framework.
22:29:02 <dons> (it doesn't have hs-plugins spotting changes automagically, you have to request ti)
22:29:07 <dons> Gahhh: yes!
22:29:58 <Gahhh> why not a domain like this: www.lambdabot.org
22:30:20 <Gahhh> lambdablog
22:30:53 <dons> what for? to host the bot src?
22:31:07 <dons> that'd be kinda fun.
22:31:11 <Gahhh> e-commerce
22:31:25 <SamB> lambdabot merchandise?
22:31:25 <Gahhh> paradigm, solution, leverage
22:31:26 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- Unknown command.
22:31:33 <SamB> huh. interesting concept.
22:31:44 <dons>  @vixen phrases on tshirts??
22:31:56 <SamB> lambdabot google haskell
22:31:57 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- Unknown command.
22:31:59 <dons>  @quotes on mugs
22:32:21 <dons> I'm sick of that behaviour. time to kill it off.
22:32:23 <SamB> why is it saying "Unkown command" when I say "lambdabot this" or "lambdabot that"?
22:32:50 <SamB> lambdabot @google haskell
22:32:51 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- http://www.haskell.org/
22:33:01 <dons> the bot is coded to respond to `isPrefix` myname
22:33:08 <dons> I think it's silly and annoying
22:33:37 <dons>  | myname `isPrefixOf` text
22:33:39 <SamB> dons: oh, definately. Especially when I say "lambdabot_SamB: @this" and lambdabot responds...
22:34:02 <dons> Darius, Pseudonym, shapr: any thoughts on this?
22:34:08 <dons> why do we have this behaviour?
22:34:26 <ozone> lambdabot @lart dons
22:34:27 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- Unknown command, try @listcommands.
22:34:34 <dons> foo youu
22:34:38 * ozone knows what his next project will be
22:34:50 <Gahhh> maybe to support parallel lambdabots ? lambdabot1, lambdabot2 respond in unison !
22:34:57 <dons> how about,   | (myname ++ ":") `isPrefixOf` text
22:35:20 <dons> it already has that behaviour though
22:35:29 <ozone> -> out
22:35:38 <SamB> maybe | (myname ++ ": ") `isPrefixOf` text ?
22:36:00 <SamB> or does it do that elsewhere?
22:36:04 <dons> basically, yep.
22:36:16 <dons> I'll inject some code
22:36:28 <SamB> might as well rip that one out, it only confuses the issue...
22:36:53 <SamB> well, not *this* issue, but other issues.
22:36:56 <dons> yeah.
22:41:44 <KrispyKringle> So WASH CGIs aren't outputing the right LFLF following the heading on my one system. Anyone have any clues why that might be?
22:43:39 <KrispyKringle> i mean, they run fun, but without that LFLF, they don't work as CGIs.
22:46:00 <dons> @quit
22:46:16 <dons> lambdabot is smelly
22:46:20 <dons> lambdabot: is smelly
22:46:21 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- Unknown command.
22:46:31 <dons> lambdabot @version
22:46:34 <dons> lambdabot: @version
22:46:35 <Lemmih> lambdabot, @quote
22:46:35 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- lambdabot 2p270, GHC 6.4 (OpenBSD i386)
22:46:35 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- darcs get http://www.cse.unsw.edu.au/~dons/lambdabot
22:46:43 <Lemmih> ):
22:46:55 <Gahhh> lambdabot: @@
22:46:57 -lambdabot(~lambdabot@manzano.cse.unsw.EDU.AU)- Unknown command, try @listcommands.
22:47:07 <gzl> has anyone installed c2hs on OS X with GHC 6.4? I'm getting an odd error: "ghc-6.4: unknown package: ctk" that causes the make to crash.
22:47:31 <dons> looks like the package isn't registered properly gzl
22:48:03 <gzl> right, but why would that be?
22:48:19 <dons> is it in $FOO/lib/ghc-6.4/package.conf ?
22:48:46 <dons> or do you need to specify -package-conf path/to/c2hs/package.conf
22:48:47 <gzl> doesn't look like it, no.
22:49:19 <dons> I think c2hs-config might tell you where the package.conf lives
22:50:33 <gzl> ok. i'll try that out.
22:50:56 <Gahhh> MS marketing is sheer genius.
22:51:05 <Gahhh> sorry off topic.
22:51:35 <SamB> so MS marketing is off topic, but not MS research... very interesting...
22:52:02 <Gahhh> some MS research, yes.
22:56:33 <dons> do we have a lambdabot logo?
22:59:09 <Gahhh> ah
22:59:42 <gzl> dons: ah, well, i don't have ctklight installed. :)
22:59:49 <Gahhh> Pseudonym should render something with his haskell powered renderer.
23:07:12 <Pseudonym> Rendered images make crap logos.
23:16:23 <wilx> Hmm, wget doesn't support gopher protocol.
23:16:34 <Gahhh> try curl ?
23:19:08 <wilx> Eeek! It prints stuff on stdout!
23:19:17 <Khisanth> -O
23:22:15 <wilx> Oh, thanks.
23:36:28 <wilx> configure: Reading installed packages...
23:36:28 <wilx> /usr/local/bin/ghc-pkg --global list >tmp85720
23:36:28 <wilx> cannot parse package list
23:36:36 <wilx> Why?
