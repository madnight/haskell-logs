00:09:22 <scalopus> Hi
00:11:28 <Gahhh> damn. I forgot how to make emacs wrap long lines after a horiz split...
00:11:44 <pimaniac> hello!
00:12:13 <Cale> hi
00:13:16 <pimaniac> wouldnt be the fill commands, right?
00:13:20 <Gahhh> nope
00:13:49 <Gahhh> It had something to do with the state of the frame/window after a split...
00:14:00 <Gahhh> some obscure var had to be set
00:14:47 <pimaniac> wierd.  remember the variable?
00:15:02 <Gahhh> haha no
00:15:11 <Gahhh> it took me 2 hours of googling
00:15:19 <Gahhh> and now I don't remember :(
00:15:49 <Gahhh> well, there's #emacs
00:15:53 <dons> can you pipe the output through fmt?
00:16:10 <dons> fmt -w72, as a quick hack.
00:16:28 <dons> s/output/text/
00:16:43 <pimaniac> damn.  i like to collect solutions to problems i havent had yet, just in case
00:17:28 <Gahhh> my .emacs at work has the var name
00:20:02 <pimaniac> hmm
00:20:04 <Gahhh> (setq truncate-partial-width-windows nil)
00:20:09 <Gahhh> thanks #emacs
00:21:15 <pimaniac> gahhh: sorry about the trouble.  :-P
01:32:04 <kaol> @yow
01:32:06 <lambdabot> The PINK SOCKS were ORIGINALLY from 1952!!  But they went to MARS
01:32:06 <lambdabot> around 1953!!
01:48:51 <JohnMeacham> @help
01:48:53 <lambdabot>  @help <command> - ask for help for <command>
01:49:04 <kaol> @listcommands
01:49:06 <lambdabot> Commands: all-dicts arr babel define definitions del-definition devils dice
01:49:06 <lambdabot> dict dict-help dummy dynamic-load dynamic-reload dynamic-unload easton echo
01:49:06 <lambdabot> elements eurohaskell eval fact fact-cons fact-delete fact-set fact-snoc
01:49:06 <lambdabot> fact-update foldoc fortune gazetteer get-definition ghc google help hitchcock
01:49:06 <lambdabot> jargon join karma karma+ karma- kind learn leave listchans listcommands
01:49:07 <lambdabot> listmodules lojban moo more msg part paste pl pl-resume plugs pointless
01:49:09 <lambdabot> prelude quit quote reconnect remember resume seen set-fuel spell state timein
01:49:11 <lambdabot> todo todo-add todo-delete topic-cons topic-init topic-snoc topic-tail topic-
01:49:12 <lambdabot> tell type vera version vixen web1913 wiki wikipedia wn world02 yow
01:49:26 * kaol apologizes for the spam
01:49:45 <kaol> @vixen
01:49:47 <lambdabot> My sister likes Yahoo better. Her screenname is FoxxyGurl83. If you have
01:49:47 <lambdabot> yahoo you should message her, she's just as pretty as me :)
01:50:01 <JohnMeacham> Is it possible to talk to the lambdabot privatly?
01:50:10 <kaol> yes, just /msg it
01:50:24 <JohnMeacham> Ah. I think I see.
01:51:57 <JohnMeacham> Hmm.. not a great conversationalist.
01:56:16 <kaol> @fortune
01:56:19 <lambdabot> Flying saucers on occasion
01:56:19 <lambdabot> 	Show themselves to human eyes.
01:56:19 <lambdabot> Aliens fume, put off invasion
01:56:19 <lambdabot> 	While they brand these tales as lies.
02:08:55 * boegel greets Haskell with a strange feeling in his head
02:15:57 <df_> why does this produce a spaceleakything: dw p xs = if p' then dw p (tail xs') else xs' where (p', xs') = p xs
02:16:02 <df_> when evaluated by: dw (\s -> (True, s)) (repeat (1::Int))
02:16:24 <df_> yet, all is fine if dw were: dw p xs@(x:_) = if p' then dw p (tail xs') else xs' where (p', xs') = p xs
02:16:52 <df_> that pattern matching is forcing something to be evaluated, but what
02:17:39 <malcolm> No, nothing is being forced - that is the problem.
02:18:25 <malcolm> The (tail xs') specifically is building up as (tail (tail (tail (tail (... (repeat 1))))))...)
02:19:01 <df_> ok, so why does the second version od dw `work' where the otherone fails?
02:19:43 <malcolm> The second version forces evaluation of the list spine because it pattern matches on (x:_)
02:21:32 <df_> right
02:21:42 <malcolm> And because you don't make further use of the xs (or x), the head of the list can be thrown away on the next recursive step.
02:22:36 <df_> now, how would one use seq or somesuch to make the first version work? - the actual thing is more complicated and fixing it with the pattern matching isn't easy (i fear)
02:23:15 <malcolm> That is, (tail xs') is shorted out (by the garbage collector) to point to the real tail, rather than remaining as a closure.
02:23:31 <df_> i see
02:25:45 <malcolm> dw p xs = if p' then t `seq` dw p t else xs' where (p', xs') = p xs;  t = tail xs'
02:27:46 <df_> aha, i see - i was trying to use seq in the wrong place
02:28:20 <df_> thankyou!
02:30:53 <malcolm> sure
02:57:21 <kleenest> yop
04:19:22 <basti_> hi
05:10:53 <RemiTurk> hi all
05:11:23 <Lemmih> Hey RemiTurk. How's code?
05:11:40 <RemiTurk> the bug-thing?
05:11:52 <Lemmih> That too.
05:12:14 * RemiTurk probably has tunnel-vision, as he doesn't see any other code right now ;0
05:13:02 <RemiTurk> I got it down to 2 modules, one of which doesn't matter (whether it is compiled with -O or not) and the other one (jay, 25 lines!) does matter
05:13:43 <RemiTurk> so now I'm trying to compare -ddump-simpl, which unfortunately recompiles _everything_, so I don't have to compare the Core of those 35 lines, but of everything :(
05:14:37 <Igloo> You should be able to compile the big module without and then the small one with
05:15:39 <RemiTurk> and so I do :)
05:15:50 <RemiTurk> but -ddump-simpl seems to imply -no-recomp
05:17:17 * RemiTurk has a lot of time to meditate while ghc is busily compiling
05:20:07 <RemiTurk> LOL, exporting one function now speeds up the damn thing a factor 80...
05:28:02 <Lemmih> @seen Si\
05:28:03 <lambdabot> Si\ is in #haskell. I don't know when Si\ last spoke.
05:28:10 <Lemmih> Si\: Ping.
05:54:22 * RemiTurk is very happy to finally have been able to rip all weird-simplified-poker game-logic out of his bug
06:07:10 <RemiTurk> okay, 16 lines of code showing a 3x slowdown with -O must be doable for the simons :) *goes to the bicycleshop before posting a bugreport*
07:14:36 * theorbtwo wonders how to move from Data.Typeable to AltData.Typeable, or, in the alternative, how to convert from an AltData.Typeable to a Data.Typeable.
08:02:53 <RemiTurk> reported
08:02:56 <RemiTurk> http://www.haskell.org/pipermail/glasgow-haskell-bugs/2005-April/004981.html
08:03:44 <TFK> Does the GHC have a bug database?
08:05:19 <RemiTurk> yes it does
08:05:55 <RemiTurk> but I'll continue posting to the mailing list instead until one of the simons says he prefers sourceforge
08:06:03 <RemiTurk> http://sourceforge.net/bugs/?group_id=8032
08:06:34 <TFK> Oh yes, "assigned to: nobody"
08:06:56 <RemiTurk> it's officially nobodys fold :)
08:07:14 <TFK> heh
08:07:34 <RemiTurk> argh :-|
08:07:49 <RemiTurk> will you believe I only now see I typed "fold" instead of "fault"?
08:08:16 * RemiTurk thinks it's really time to go to some nice party
08:12:30 <SilentGuy[Uni]> hi there!
08:13:00 <RemiTurk> hi not-so-silent-guy
08:13:36 <SilentGuy[Uni]> hehe... yeah, my nick's a decoy :)
08:14:43 <RemiTurk> :)
08:15:07 <SilentGuy[Uni]> can anyone tell me what i have to do to get a runtime of a program? all those ClockTime and TimeDiff and IO ClockTime make me dizzy :P
08:18:20 <RemiTurk> you could use +RTS -s
08:18:43 <RemiTurk> or *pastest on the wiki*
08:19:38 <SilentGuy[Uni]> huh? ah, while compiling... i was looking for something to put in the sourcecode...
08:19:44 <RemiTurk> @wiki HaskellIrcPastePage
08:19:44 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
08:20:37 <RemiTurk> except that you'll have to fix some layout...
08:20:42 <SilentGuy[Uni]> ah, thanks
08:34:28 <TFK> Did I mention that I made a haskell pastebin?
08:34:48 <Heffalump> was it you that wanted to decompile your code?
08:35:15 <TFK> Yup. But actually rewriting the entire thing turned out to be a better option, since it was short and I needed to make it better anyway.
08:35:38 <TFK> http://tfk.is-a-geek.org/ </spam>
08:38:46 <Heffalump> does it only do two colours?
08:39:16 <Heffalump> ah, and blue for 'data'
08:39:19 <TFK> Well, my current scheme seeks to fit with TextPad's highlighting.
08:39:32 <Heffalump> I should probably have pasted more code, but C&P has broken for me
08:39:55 <TFK> However, I didn't set hscolour to recognize Prelude functions (which TextPad does)
08:40:17 <TFK> So yes, the current scheme features three different colours. You may suggest/submit other colour schemes.
08:41:18 <TFK> You didn't test the comments, btw
08:41:29 <TFK> So overall it's actually four colors.
08:44:39 <SamB> @google hs-plugins darcs
08:44:40 <lambdabot> http://haskell.org/fedora/
08:45:05 <SamB> @google hs-plugins "darcs get"
08:45:07 <lambdabot> http://www.scannedinavian.org/cgi-bin/darcs.cgi/yi/README?c=annotate
08:48:27 <SamB> @todo-add A way to get multiple results from a google search
08:48:28 <lambdabot> Entry added to the todo list
08:48:58 <Lemmih> @todo
08:48:59 <lambdabot>   * Release lambdabot 3.0 (submitted by dons)
08:48:59 <lambdabot>   * A way to get multiple results from a google search (submitted by SamB)
08:50:07 <Heffalump> nice.
08:50:29 <TFK> Hmmm. And idea about the pastebin was that lambdabot would publish a link to the pasted code here. Is that possible? Can I somehow hook into lambdabot one way or another?
08:50:53 <Heffalump> hmm, that might be an interesting problem, because your CGI would have to push to lambdabot
08:51:12 <TFK> "push"?
08:51:18 * SamB doesn't know ;-)
08:51:33 <TFK> You mean send data to?
08:51:38 <Heffalump> everything lambdabot does at the moment, AFAIK, is triggered by an event on IRC
08:51:49 <Heffalump> in your situation your CGI would need to trigger lambdabot to act somehow
08:52:05 * TFK nods
08:52:37 <Heffalump> shouldn't be too hard, might just need another thread
08:52:47 <TFK> Why another thread?
08:53:02 <SamB> yeah, lambdabot would likely need major changes ;-)
08:53:07 <Heffalump> so that the thread can sleep normally and be woken up when an event happens
08:53:20 <TFK> Ah, you mean on lambdabot's side?
08:53:23 <Heffalump> SamB: why? It already uses a separate thread to be on IRC
08:53:25 <Heffalump> TFK: yep
08:53:31 <TFK> Hmmm.
08:53:44 * TFK envisions "foreign event interface" :D
08:53:50 <SamB> that sounds complicated, though
08:53:55 <Heffalump> SamB: I remember this well cos I had lots of trouble stopping exceptions being passed over the channel from the thread to the main thread
08:54:11 <TFK> How difficult is threading in Haskell as opposed to other languages, I wonder?
08:54:16 <Heffalump> TFK: it's quite nice
08:54:31 <TFK> I'd assume it's much easier due to the purity, right?
08:54:39 <Heffalump> well, threading is IO-based, so not really
08:54:54 <Heffalump> but higher order functions make it all fairly nice, you just pass some code to the thread starting function and it runs it
08:55:02 <SamB> Heffalump: seperate from what?
08:55:07 <TFK> Ah, shucks.
08:55:19 <TFK> Well, I suppose I have to grab lambdabot's code now.
08:55:31 <SamB> what does the main thread do?
08:55:40 <Heffalump> SamB: I can't remember the details, but I think there is one socket handling thread and one thread that does the main computation
08:56:11 <SamB> anyhow, lambdabot is no Twisted
08:56:27 <TFK> It could be the start of one, though :-P
08:56:31 <SamB> true
08:56:37 <Heffalump> it has a reading thread and a writing thread
08:56:45 <TFK> Twisted was originally intended for game-writing!
08:57:04 <Heffalump> see the main loop in runIrc'
08:57:18 <SamB> TFK: yes, multi-player IF if I recall ;-)
08:57:22 <SamB> not that I was there
08:57:28 <TFK> heh
08:58:09 * Heffalump is amazed that noone has puked up at the big stack of monad transformers I introduced to IRC.hs and removed it again
08:58:15 <SamB> is there some kind of repository for hs-plugins somewhere?
08:58:54 <SamB> Heffalump: well, I didn't much like the removal of MonadIRC
09:00:04 <SamB> and I don't like the type errors about ModuleT much
09:02:42 <Heffalump> ModuleT weren't me :-)
09:02:57 <Heffalump> and I don't think MonadIRC was either
09:09:10 <SamB> the taking out or the putting in?
09:09:34 <Heffalump> I certainly didn't take it out. I'm not sure if I put it in.
09:09:51 <Heffalump> I think I probably put in MonadLB
09:13:29 <nuffer> can I define a structure two different ways?
09:13:41 <nuffer> like "data E Int | E Int Int"?
09:13:52 <Heffalump> not like that, no
09:13:58 <SamB> @listcommands babel
09:13:59 <nuffer> how, then?
09:13:59 <lambdabot> babel provides: babel remember quote timein ghc
09:14:01 <basti_> the constructors should differ
09:14:08 <Heffalump> data Foo = E Int | F Int Int
09:14:18 <nuffer> okay
09:14:52 <SamB> nuffer: what are you trying to accomplish, anyway?
09:15:20 <nuffer> writing a rather simple LR parser
09:15:30 <nuffer> (parsing calculator grammar)
09:15:37 <basti_> maybe "Either Int (Int,Int)" would suffice?
09:16:01 <nuffer> no, I wanted something different than that
09:16:12 <basti_> "Left 5" would give you one Int, and "Right (6,7)" a pair
09:16:33 <nuffer> does haskell not have macros?
09:16:40 <SamB> what did you want to accomplish within this parser with that datatype?
09:16:44 <basti_> not strictly but there is Template Haskell
09:16:51 <basti_> which is basically lisp macros in Haskell.
09:16:57 <basti_> (just not as elegant =)
09:16:58 <nuffer> SamB, that was not really what I wanted
09:17:04 <nuffer> the full thing is...
09:17:22 <nuffer> data CTree = Value Int | Operation Operator CTree CTree
09:17:43 <SamB> nuffer: that should be fine
09:17:48 <basti_> looking good yes.
09:18:08 <nuffer> the problem is, I need a datatype that encompasses that and more during the parsing
09:18:25 <nuffer> because there are intermediate phases, where I may not be able to reduce purely to a CTree
09:18:30 <nuffer> but I still need the complexity of that representation
09:18:31 <basti_> like "data State = MKState CTree Morestuff Yadda"?
09:18:44 <nuffer> well, optimally it would be something like
09:18:46 <SamB> nuffer: are you using Parsec?
09:18:52 <nuffer> SamB, no, I'm writing this by hand
09:19:17 <SamB> parsec code IS written by hand
09:19:25 <nuffer> oh, I don't know what parsec is
09:19:34 <SamB> it isn't a generator, its a library
09:20:38 <SamB> anyhow, if you need to store extra information just during parsing, you could use something like data Foo a = Foo Bar a
09:20:50 <nuffer> I think I have it now, with this:
09:20:53 <nuffer> data Rules = E CompTree | OParen | CParen | O Operator
09:21:11 <SamB> hmm, that definately looks like Parsec would be good...
09:21:26 <nuffer> this is a very simple grammar I'm trying to parse -- I'm sure I can get it by hand
09:21:29 <nuffer> I'll check parsec out later though
09:21:47 <basti_> writing a parser by hand is a good way of getting aquainted to haskell i think
09:21:48 <nuffer> I'll also have to look at template haskell, I'd like to write a parser generator at some point
09:22:11 <SamB> hmm, parser generators are not so fun
09:22:14 <nuffer> yeah, this is like my third day learning haskell, I still find myself having trouble with the syntax at times
09:22:41 <basti_> ah that will pass.
09:22:49 <basti_> the syntax is very easy compared to many other languages
09:22:51 <SamB> haskell-mode still has trouble with that, too :-(
09:23:06 <basti_> SamB: like where?
09:23:45 <SamB> it doesn't support indenting correctly after a monadic let
09:23:52 <basti_> thats right.
09:23:58 <basti_> it has indenting problems.
09:24:29 <SamB> not even if I cycle through all of the indentations it offers
09:27:27 <basti_> i know...
09:27:46 <basti_> it doesnt really understand this whole indentation issue
09:28:04 <basti_> The haskell support in Yi will be better.
09:30:51 <goron> basti_: When will Yi support structured editing?
09:31:39 <basti_> whats structured editing?
09:31:51 <goron> basti_: That's what Yi is all about.
09:32:00 <basti_> oh
09:32:02 <basti_> i didnt know.
09:32:02 <goron> basti_: That you operate on AST's..
09:32:15 <basti_> I'm just wiggeling around an Emacs input emulation
09:32:23 <basti_> i see.
09:32:33 <goron> basti_: All structured editors are very slow, I wonder what Yi will become.
09:32:53 <basti_> whats the problem in operating on AST's?
09:33:38 <goron> basti_: Well, the problem is that you want to operate on text, but then the mapping with the AST is lost, and then you need to parse the whole lot again.
09:33:45 <goron> basti_: Which takes time.
09:33:49 <basti_> oh.
09:33:55 <basti_> you can do better in haskell i'd say.
09:34:14 <basti_> besides you wouldnt need to parse everything all the time
09:34:15 <goron> basti_: Well, some have tried, but it stays real slow.
09:34:34 <basti_> hmm
09:34:35 <goron> basti_: No, but try to come up with something *efficient*.
09:34:47 <basti_> I'll think about it
09:35:00 <goron> Good luck
09:35:02 <basti_> of course it's not trivial.
09:35:23 <basti_> and of course in some situations a lot of work is lost in one keystroke
09:36:01 <basti_> so maybe people do not really want to operate on single letters? =)
09:36:33 <basti_> for example, while "(" would break almost the whole parse, "()" ceratainly wouldnt
09:36:50 <SamB> {nxml,rng}-mode seems to work okay and not too slowly
09:36:51 <goron> basti_: You mean something like a visual editor. Well, that's tried in the 1980's.
09:37:15 <basti_> what was the problem?
09:37:35 <goron> Those modes are Yi modes?
09:37:51 <SamB> no, thats actually for emacs
09:37:59 <goron> basti_: The problem was that productivity was lost.
09:38:02 <SamB> the rng- one might be rng-minor-mode
09:38:12 <basti_> due to what?
09:38:20 <SamB> @google nxml-mode
09:38:21 <lambdabot> http://www.thaiopensource.com/nxml-mode/
09:38:34 <goron> basti_: Due to the clicking interface.
09:38:43 <SamB> they go together, and its really cool
09:38:51 <basti_> ahh
09:38:57 <goron> basti_: You had to drag an If node in your program.
09:39:04 <basti_> no i wasnt talking "visual" editor
09:39:17 <goron> basti_: oh
09:39:26 <SamB> it helps if editors are lazy and don't reparse until the user stops typing
09:39:37 <basti_> more like maybe, the parse would be suspended until you typed something that makes sense in the "wound"
09:39:49 <basti_> SamB: thats not laziness btw.
09:40:08 <SamB> basti_: it is too lazyness. not in the functional sense, though
09:40:13 <basti_> okay.
09:40:13 <basti_> ;)
09:41:01 <basti_> maybe you would have to manually start parse when you are sure that what you typed makes sense
09:46:02 <SamB> or, it could parse only from where you started changing stuff to the end of the visible portion of the buffer
09:46:28 <chr1s> I have this datatype with a FiniteMap
09:46:31 <basti_> yes but that wouldnt make it better from a complexity standpoint
09:46:44 <SamB> basti_: which complexity?
09:46:51 <basti_> O(n²) for the parse? ;)
09:47:03 <chr1s> and I want to test something, but FIniteMap hasn't got "deriving Show" at the end of the definition
09:47:04 <SamB> ah
09:47:15 <chr1s> is there a solution so I can still see the output?
09:47:42 <SamB> @google lambdabot Util.hs
09:47:44 <lambdabot> http://cvs.sf.net/viewcvs.py/haskell-libs/libs/lambdabot/
09:47:53 <SamB> er, that is not it
09:48:44 <SamB> @google site:cse.unsw.edu.au lambdabot Util.hs
09:48:45 <lambdabot> http://www.cse.unsw.edu.au/~dons/code/lambdabot/
09:49:59 <SamB> you could do something like what mapSerializer in http://www.cse.unsw.edu.au/~dons/code/lambdabot/Util.hs does
09:51:07 <chr1s> SamB: don't use lambdabot in the @google thin
09:51:16 <chr1s> :s/thin/thing
09:51:27 <SamB> why?
09:51:38 <SamB> because it isn't in any of the links?
09:52:16 <chr1s> I think so
09:52:24 <chr1s> but thanks, I'm gonna try something
09:53:06 <SamB> so basicly, use the function to convert it to a list ;-)
09:53:08 <TheHunter> SamB, in case you're still wondering, i put MonadIRC in, and later replaced it with implicit parameters, as they are a great simplification.
09:55:09 <SamB> TheHunter: not when you leave off the ModuleT they aren't
09:55:37 <Heffalump> chr1s: I generally just convert the FiniteMap to a list and show that
09:55:50 <Heffalump> I think you could even write your own Show instance that does that
09:56:18 <TheHunter> SamB, you mean the ModuleT type synonym confuses things?
09:56:27 <RemiTurk> chr1s: or even rewrite it to use Data.Map (which _has_ a Show instance)
09:56:31 <SamB> TheHunter: not things but rather people
09:56:41 <Heffalump> what does the show instance do, OOI?
09:56:58 <RemiTurk> "OOI"?
09:57:07 <Heffalump> "out of interest"
09:57:19 <RemiTurk> Prelude> Data.Map.fromList [('a',1),('b',2)]
09:57:19 <RemiTurk> {'a':=1,'b':=2}
09:57:32 <RemiTurk> it doesn't have a Read instance, though
09:57:42 <SamB> it ought to
09:57:59 <TheHunter> SamB, the motivation was that you shouldn't be bothered with implicit parameters unless you're using state.
09:58:13 <SamB> TheHunter: well, sure.
09:58:16 <RemiTurk> hands SamB a pen & pencil and a silent room to start implementing it
09:58:34 <SamB> RemiTurk: implementation is the easy part
09:58:48 <SamB> what is hard is getting it into everyones Data.Map
09:59:22 <RemiTurk> it's only as hard as getting it in fptools Data.Map and being patient
09:59:28 <SamB> true
09:59:53 <SamB> but I'm not too good at the latter, and I don't have a clue how to do the former
10:00:36 <RemiTurk> err, implementing it and sending it to haskell-libraries I guess
10:02:17 <TheHunter> one quick question about signals: Is it normal that my shell sends SIGINT again and again after a Ctrl+C.
10:02:25 <TFK> Is Haskell (GHC) fast/robust enough to, say, write a solid VoIP program in pure Haskell (well, and speex bindings)?
10:02:39 <basti_> o.0
10:02:53 * TFK hides
10:03:01 <SamB> I don't even have a Data.Map
10:03:25 * beschmi thought about writing a skype alternative in haskell too ;)
10:03:45 <RemiTurk> SamB: it's in ghc 6.4, and I suspect it either already is in the current or soon will be in the next releases of nhc/hugs
10:04:03 <SamB> I know it is in 6.4 ;-)
10:04:14 <basti_> i would not write a DSP core in haskell
10:04:36 <TFK> DSP core?
10:04:48 <basti_> i would encourage any tries to write any application interface in haskell though.
10:04:49 <SamB> that became apparant soon after I first tried to load a piece of lambdabot into ghci without first :setting -cpp
10:05:09 <basti_> well for VoIP you'd need a system that encodes the pure sample data
10:05:15 <basti_> (or, "compresses")
10:05:31 <basti_> i would not write that in haskell.
10:05:38 <basti_> definitel.y
10:05:49 <beschmi> TFK: using http://www.brynosaurus.com/pub/net/p2pnat/, haskell should be fine for writing the network code
10:06:13 <basti_> the network infrastructure is NOT a problem
10:06:16 <SamB> yeah, they didn't even write Text.Regex.Posix in haskell ;-)
10:06:24 <basti_> networks are mind-numbingly slow
10:06:34 <TFK> basti_, why not?
10:07:02 <basti_> the hard parts of the network infrastructure are cared about by your operating system
10:07:02 <basti_> of
10:07:12 <TFK> No, I mean the compression core.
10:07:16 <basti_> are being taken care of
10:07:25 <TFK> (Which I assume will be provided by speex, but nevertheleess I'm curious)
10:07:29 <SamB> TFK: well, that is DSP isn't it?
10:07:38 <SamB> which means Digital Signal Processing
10:07:43 <basti_> ah because it would need a few 10k multiplications per second
10:08:05 <TFK> And Haskell has slow arithmetic?
10:08:13 <basti_> haskell would be busy organizing its lambdas between every 2 multiplications
10:08:16 <SamB> actually, no
10:08:28 <basti_> not strictly no.
10:08:58 <TFK> So I can't write computation-intensive stuff in Haskell?
10:09:07 <SamB> it would definately be the thunks/closures/lambdas rather than the arithmetic
10:09:13 <basti_> but haskell will not be able to compete with hardcore-optimized DSP algorithms when it comes to numbercrunching
10:09:32 <SamB> unless you write something probably even less readable
10:09:54 <beschmi> TFK; you can write C-Code in haskell (ST monad, unsafeRead/Write) that shouldn't be that much slower
10:09:55 <SamB> which is not more flexible
10:10:31 <TFK> What about O'Caml or Lisp (or Scheme)?
10:10:46 <SamB> when the code you've written turns out to be nothing more than obfusticated C code, you probably won't feel it was worth it
10:11:09 <basti_> what about using a given DSP lib and programming the rest of the application in haskell?
10:11:17 <SamB> sure
10:11:24 <TFK> If I  wanted GUI work I'd opt for Python, probably.
10:11:34 <basti_> the DSP lib would be the hot spot and justify just about any measure (even the use of C) to optimize
10:11:55 <SamB> I would say especially C. it would probably be easier to read in C.
10:12:04 <TFK> Let me put it this way. Is there any alternative to C?
10:12:17 <TFK> (In the domain of super-intensive computation tasks)
10:12:25 <basti_> what do you want to use haskell for then?
10:12:31 <basti_> for what part of the program?
10:12:31 <basti_> assembly.
10:12:39 <basti_> :)
10:12:39 * basti_ ducks and runs
10:12:48 <SamB> you can write what is essentially C anyway in haskell syntax which buys you not much and costs readability.
10:13:19 <basti_> i would say no there is not.
10:13:28 <basti_> but thats "putting the saddle onto the horse from behind"
10:13:32 <TFK> Lots of uses for high-level languages. But some day I may need to get deep down an dirty.
10:13:35 <TFK> Say, a 3D engine.
10:13:40 <basti_> almost no application you're using is "super intensive computation"
10:13:53 <TFK> Sure, but I'm talking hypothetically.
10:14:05 <basti_> image processing is... 3D too
10:14:16 <basti_> but 3D then again is in the hardware
10:14:16 <SamB> basti_: many of these may avoid falling into this class because they are not written in Haskell.
10:14:26 <basti_> so it might make sense to use the hardware directly from a HLL
10:14:44 <TFK> So again, what about O'Caml or Lisp? I hear that they can be often compared to C/C++.
10:14:46 <SamB> how fast would mp3 decoding be if you wrote the decoder in haskell?
10:14:51 <SamB> ogg vorbis?
10:15:15 <SamB> ML is complicated
10:15:21 <basti_> SamB: actually i'm trying to say, even with the most computation intensive thing to do, there is no valid reason to write THE WHOLE APPLICATION in C
10:15:25 <mflux> I think more interestingly, how short it would be?
10:15:31 <SamB> C is not good for writing applications in
10:15:34 <SamB> C++ is confusing
10:15:44 <basti_> i guess you would lose a factor of about 4-5
10:15:50 <basti_> well but people do so
10:15:55 <SamB> basti_: yes I know ;-)
10:15:56 <basti_> thats one of the problems.
10:16:21 <SamB> I don't think I could ever manage to get more than one or two orders of magnitude past Hello World in C
10:16:41 <TFK> So the answer is "no", I suppose :-(
10:16:41 <SamB> at least, not without making a complete and total mess of things
10:16:45 <basti_> C is a real PITA
10:16:54 <basti_> its just no fun
10:17:06 <SamB> not to write apps in, anyway
10:17:10 <basti_> TFK: i think you do not want to use one tool for all the tasks
10:17:19 <beschmi> TFK: ocaml's goal is "no more than 2 times slower than c++"
10:17:28 <SamB> to write little things in, I think C is rather fun
10:17:31 <TFK> There's one tool I don't want to use for anything, though. Well, one or two tools.
10:17:34 <basti_> TFK: if you got a hammer and a saw and a drill and and and, you wouldnt be drilling holes with the hammer, would you?
10:17:41 <SamB> when they have nothing to do with text, anyway
10:17:44 <TheHunter> ok, a Ctrl+C triggers exactly 4 catched SIGINT signals. Anyone got any idea why?
10:18:00 <basti_> C is fun when you know youre done and will do the rest in a sane language....
10:18:08 <TFK> basti_, that's a bizarre metaphor if I ever saw one...
10:18:08 <mflux> 4 processes maybe? wild guess..
10:18:22 <basti_> tfk why?
10:18:37 <TFK> I don't see the sawing with the hammer point. Although I do see the bigger point.
10:18:38 <basti_> tfk C comes from the world of computation intensive tasks, thats why its so fast.
10:18:57 <TFK> I'd say it comes from the world of people who got tired from assembley, but who knows...
10:19:01 <mflux> I thought it comes from the world of low level programming
10:19:10 <mflux> and maybe if you want computation intensive, you go fortran
10:19:17 <basti_> (because back then everything was computation intensive)
10:19:20 <TFK> mflux, ha! The GNU C FAQ calls it a high level language.
10:19:25 <basti_> hmm okay.
10:19:32 <TFK> mflux, it quotes RMS as saying effectively, "use C or die."
10:19:38 <basti_> well whats "+" in C?
10:19:39 <basti_> ;)
10:19:42 <SamB> hey, at least Richie falsely claimed that C function calls were fast ;-)
10:19:55 <mflux> tfk, whatever, but the 'abstractions' in C are almost all directly mappable to the hardware ;)
10:20:09 <basti_> SamB: any data on that?
10:20:13 <TheHunter> mflux, ok, that seems reasonable. Still no idea why killall behaves differently...
10:20:15 <SamB> TFK: the GNU C FAQ is bound to be ancient...
10:20:24 <SamB> basti_: I don't remember where I read it
10:20:53 <basti_> TFK: the point in haskell is not comparing it to C in Execution speed in hot spots.
10:20:59 <mflux> thehunter, when you press SIGINT, I think the signal is sent to all the processes which are in the process group which is the owner of the tty
10:21:02 <basti_> thats not what haskell is about.
10:21:11 <mflux> thehunter, maybe killall (whatever you're doing with it) only sends one to the parent process
10:21:21 <SamB> basti_: obviously.
10:21:40 <TheHunter> mflux, yeah, thanks. That explains it.
10:21:51 <SamB> if haskell were about that, would we have such good FFI support?
10:21:57 <basti_> yup
10:21:57 <basti_> =)
10:22:05 <TFK> mflux, yeah, that's true.
10:22:13 <TFK> basti_, I know.
10:22:21 <mflux> would it be wrong to say that laziness is what kills haskell's performance?
10:22:29 <TFK> But I'd hate Joel having the last laugh on this issue.
10:22:46 <basti_> there is no issue.
10:23:02 <TFK> For some, maybe not.
10:23:21 <mflux> all that jumping around must kill cache locality, and then there is that continuations need to be stored and then again 'extracted' to get the data
10:23:21 <basti_> if someone wants to write an application in a language that's optimized for low level control of registers, may he go...
10:23:26 <basti_> i won't complain :)
10:24:16 <basti_> i only complain when my applications are stupid and inflexible because of that.
10:25:21 <basti_> or when they accumulate lots of annoying bugs because noone actually understands what's going on
10:27:00 <basti_> not to forget the programmers in said languages who complain and then make people obey nazi rules because they do not understand what their programs acutally do.
10:27:33 <SamB> C is a high level language when you compare it too assembler, really. Tried reading any of ZSNES ever?
10:27:39 <SamB> s/too/to/
10:28:00 <basti_> no.
10:28:00 <basti_> ;)
10:29:33 <TFK> What about Tierra, Avida, Framsticks?
10:30:12 <basti_> huh?
10:30:26 <TFK> Celluar Automata (although the above aren't)?
10:30:56 <TFK> Does it make sense to write them in Haskell?
10:31:15 <SamB> Maybe
10:31:24 <basti_> for fun or for exectuing them blazingly fast? ;)
10:31:32 <TFK> For doing actual research.
10:31:40 <SamB> what kind of research?
10:31:55 <SamB> @google Tierra
10:31:56 <lambdabot> http://www.agdinteractive.com/
10:31:57 <basti_> for research purposes, sure, go ahead... you wont notice the 4-5 fold increase in execution time
10:31:59 <TFK> ALife research.
10:32:11 <TFK> Hold on, I'll give you links.
10:32:31 <TFK> http://www.his.atr.jp/~ray/tierra/ <--- Tierra
10:32:35 <SamB> I'm not sure if ALife research makes sense in the first place
10:32:44 <TFK> http://dllab.caltech.edu/avida/ <--- Avida
10:32:45 <basti_> shht SamB ;)
10:33:19 <TFK> http://www.frams.alife.pl/ <--- Framsticks (assume that the 3D frontend will be served by OGRE)
10:33:21 <SamB> not to dis cellular automata or anything
10:33:31 <TFK> And CA you know already.
10:33:33 <TFK> SamB, why not?
10:33:54 <SamB> why not which? ALife?
10:33:59 <TFK> It makes as much sense as to do research in population genetics, paleonthology, molecular genetics, all combined.
10:34:02 <TFK> Yes.
10:34:10 <SamB> I don't know much about it
10:34:12 <TFK> Oh, and ecology.
10:34:25 <TFK> OK, assume it makes a lot of sense to do research in that field :-)
10:34:27 <SamB> I guess it sounds more usefull than AI research
10:34:35 <TFK> AI is useful.
10:34:46 <basti_> TFK: what fraction of the 2-3 years you'll be researching will your computer spend calculating?
10:35:14 <TFK> A very small one.
10:35:27 <TFK> I hope :-/
10:35:30 <TFK> That's why I'm asking >_<
10:35:36 <SamB> is it hard or easy to implement those in Haskell?
10:35:43 <SamB> compared to other languages
10:35:46 <basti_> probably not.
10:36:14 <TFK> SamB, not sure. Tierra/Avida require a simulation of "RAM", I suppose you call that "monolithic" (didn't get to arrays in Haskell yet)
10:36:37 <basti_> TFK: there will not be issues in implementing those in haskell, I'm confident
10:36:49 <TFK> Hmmm.
10:36:57 <SamB> arrays in haskell are not exactly pretty or fun, though
10:37:08 <TFK> I'd like to implement an ALife prog someday, regarding of research :-)
10:37:26 <TFK> Yeah, but who knows, maybe functional approaches can be found.
10:37:33 <TFK> *regardless of ...
10:37:35 <SamB> probably
10:37:44 <TFK> Anyway, I'll go grab food now. Thanks for your thoughts and time.
11:06:02 <musasabi> What does it mean for a module to export itself? "module E.E (module E.E, subst) where ... "
11:08:47 <basti_> i dont have a clue.
11:29:22 <sjanssen> is there such a thing as a "consumption" monad?
11:29:26 <SamB> it means that all the things defined in that module are exported
11:30:30 <SamB> 'module Foo (module Foo) where' is almost, but not quite, the same as 'module Foo where'
11:31:16 * SamB wonders how and looks it up
11:33:05 <theorbtwo> I can't figure out how to make a manual instance of Typeable that works like the derived one (AltData.Typeable is sadly not derivable).
11:33:55 * SamB wonders why the actual table of contents is missing from his /usr/share/doc/haskell98-report/haskell98-report.ps.gz
11:34:07 <SamB> @google haskell98-report.ps
11:34:09 <lambdabot> http://byerley.cs.waikato.ac.nz/Admin/Mar.wwwstats.html
11:34:19 <SamB> @google haskell98 report .ps
11:34:20 <lambdabot> http://packages.debian.org/testing/doc/haskell98-report
11:55:59 <Lemmih> Si\: Ping.
12:08:15 * SamB did not want to close that tab...
12:11:54 <SamB> http://haskell.org/onlinereport/modules.html#export has all the details on export lists
12:22:39 <gaal> hello! Is there a way to get a unix PID out of the ProcessHandle returned by System.Process.runInteractiveProcess - at least on systems that have pids?
12:26:11 <musasabi> SamB: hmm, got it.
12:26:49 <Oejet> gaal: If it doesn't say so in the standard library documentation, then I guess not.
12:27:10 <gaal> thanks, Oejet.
12:27:31 <SamB> @google site:haskell.org System.Posix documentation
12:27:33 <lambdabot> http://www.haskell.org/ghc/docs/6.2.2/html/libraries/
12:28:35 <theorbtwo> Hm, there should be a standard way to link to http://www.haskell.org/ghc/docs/latest/html/libraries/unix/System.Posix.html and the like.
12:28:37 <SamB> System.Posix.Process looks promising
12:28:51 <SamB> (going by the name)
12:29:29 <Oejet> theorbtwo: Feature request to lambdabot!
12:29:47 <gaal> that doesn't seem to provide the open3-like semantics i'm looking for.
12:29:48 <SamB> use @add-todo
12:29:57 <SamB> rather, @todo-add
12:30:11 <SamB> I just wrote the module, why can't I remember the command names?
12:30:26 <kleene-kaah> hi guys
12:30:28 <SamB> @listcommands todo
12:30:29 <lambdabot> todo provides: todo todo-add todo-delete
12:30:35 <SamB> @help todo-add
12:30:36 <lambdabot>  @todo-add <idea>, add a todo entry
12:30:40 <kleene-kaah> is there a tool for generating timed automata from specifications of a real-time program ?
12:31:00 <theorbtwo> @todo-add @docs Foo.Bar links to http://www.haskell.org/ghc/docs/latest/html/libraries/unix/Foo.Bar.html
12:31:01 <lambdabot> Entry added to the todo list
12:32:09 <theorbtwo> @todo-add @index liftIO looks up liftIO in http://www.haskell.org/ghc/docs/latest/html/libraries/doc-index-L.html, and says "Control.Monad.Trans, Control.Monad.Reader, Control.Monad.Writer, Control.Monad.State, Control.Monad.RWS, Control.Monad.Cont, Control.Monad.Error, Control.Monad.List"
12:32:09 <lambdabot> Entry added to the todo list
12:32:20 <SamB> @todo
12:32:20 <lambdabot>   * Release lambdabot 3.0 (submitted by dons)
12:32:20 <lambdabot>   * A way to get multiple results from a google search (submitted by SamB)
12:32:20 <lambdabot> * @docs Foo.Bar links to http://www.haskell.org/ghc/docs/latest/html/libraries/
12:32:20 <lambdabot> unix/Foo.Bar.html (submitted by theorbtwo)
12:32:20 <lambdabot>   * @index liftIO looks up liftIO in http://www.haskell.org/ghc/docs/latest/
12:32:20 <lambdabot> html/libraries/doc-index-L.html, and says "Control.Monad.Trans, Control.
12:32:22 <lambdabot> Monad.Reader, Control.Monad.Writer, Control.Monad.State, Control.Monad.RWS,
12:32:25 <lambdabot> Control.Monad.Cont, Control.Monad.Error, Control.Monad.List" (submitted
12:32:27 <lambdabot> by theorbtwo)
12:33:04 <SamB> @index liftIO
12:33:05 <lambdabot> Unknown command, try @listcommands.
12:33:15 <theorbtwo> Hm, @index may be a bit long unless it's smart enough to abbreviate it as "Control.Monad.(Trans|Reader|Writer|State|RWS|Cont|Error|List)".
12:33:31 <SamB> which, of course, it could very well be made
12:35:50 * SamB wonders how you would know the mapping
12:35:55 <SamB> for @docs, I mean
12:36:07 <SamB> well, @index is probably even harder
12:36:14 <theorbtwo> Hmm?
12:36:20 <theorbtwo> I could do it in Perl pretty easily.
12:36:32 <SamB> oh, right, I forgot about cheating
12:38:54 <SamB> haddock produces tagfiles, right?
12:39:08 <SamB> hmm, where is shapr when you need him?
12:39:49 <SamB> @todo @get-shapr summons shapr instantly
12:39:49 <lambdabot>   * Release lambdabot 3.0 (submitted by dons)
12:39:49 <lambdabot>   * A way to get multiple results from a google search (submitted by SamB)
12:39:49 <lambdabot> * @docs Foo.Bar links to http://www.haskell.org/ghc/docs/latest/html/libraries/
12:39:49 <lambdabot> unix/Foo.Bar.html (submitted by theorbtwo)
12:39:49 <lambdabot>   * @index liftIO looks up liftIO in http://www.haskell.org/ghc/docs/latest/
12:39:50 <lambdabot> html/libraries/doc-index-L.html, and says "Control.Monad.Trans, Control.
12:39:52 <lambdabot> Monad.Reader, Control.Monad.Writer, Control.Monad.State, Control.Monad.RWS,
12:39:53 <SamB> @todo-add @get-shapr summons shapr instantly
12:39:54 <lambdabot> Control.Monad.Cont, Control.Monad.Error, Control.Monad.List" (submitted
12:39:56 <lambdabot> by theorbtwo)
12:39:58 <lambdabot> Entry added to the todo list
12:52:27 <SamB> _samb_lambdabot: @todo avoid spewing todo-list everywhere when people call @todo instead of @todo-add
12:52:28 <_samb_lambdabot>  @todo given arguments, try @todo-add or @listcommands todo
12:52:50 <SamB> _samb_lambdabot: @quit
12:56:39 <SamB> @seen shapr
12:56:40 <lambdabot> I haven't seen shapr.
12:56:47 <SamB> umm...
12:56:55 <SamB> this seems bad
13:22:13 <Philippa_> Shae's left the chan for a while. He's alive as of 20 minutes ago
13:25:41 <Si\> Lemmih: Pong?
13:53:13 <gzl> haha
13:53:22 <gzl> who has a combinatory calculus quitmsg
13:55:16 <TheHunter> @todo
13:55:17 <lambdabot>   * Release lambdabot 3.0 (submitted by dons)
13:55:17 <lambdabot>   * A way to get multiple results from a google search (submitted by SamB)
13:55:17 <lambdabot> * @docs Foo.Bar links to http://www.haskell.org/ghc/docs/latest/html/libraries/
13:55:17 <lambdabot> unix/Foo.Bar.html (submitted by theorbtwo)
13:55:17 <lambdabot>   * @index liftIO looks up liftIO in http://www.haskell.org/ghc/docs/latest/
13:55:17 <lambdabot> html/libraries/doc-index-L.html, and says "Control.Monad.Trans, Control.
13:55:20 <lambdabot> Monad.Reader, Control.Monad.Writer, Control.Monad.State, Control.Monad.RWS,
13:55:22 <lambdabot> [3 @more lines]
13:55:23 <TheHunter> @more
13:55:24 <lambdabot> Control.Monad.Cont, Control.Monad.Error, Control.Monad.List" (submitted
13:55:25 <lambdabot> by theorbtwo)
13:55:27 <lambdabot>   * @get-shapr summons shapr instantly (submitted by SamB)
13:56:03 <TheHunter> @todo-del 2
13:56:04 <lambdabot> Removed item: @docs Foo.Bar links to http://www.haskell.org/ghc/docs/latest/
13:56:04 <lambdabot> html/libraries/unix/Foo.Bar.html, theorbtwo
13:56:13 <theorbtwo> Eh?
13:56:30 <TheHunter> implemented. Expect it as soon as dons wakes up.
13:56:35 <theorbtwo> Ah.
13:58:20 <SamB> TheHunter: how does it work?
13:58:42 <TheHunter> SamB, well it's the obvious @dummy implementation.
13:59:07 <TheHunter> thbot: @docs Control.Monad
13:59:14 <TheHunter> thbot: @docs Control.Monad
13:59:15 <thbot> http://haskell.org/ghc/docs/latest/html/libraries/base/Control.Monad.html
13:59:27 <TheHunter> thbot, @part
13:59:35 <SamB> @docs System.Posix
13:59:36 <lambdabot> Maybe you meant: dice dict
13:59:37 <thbot> http://haskell.org/ghc/docs/latest/html/libraries/base/System.Posix.html
13:59:44 <SamB> that doesn't work :-(
14:00:10 <TheHunter> oh!
14:00:42 * SamB continues with his stuff
14:00:43 <TheHunter> thbot: @part
14:00:50 <SamB> try @quit
14:00:53 <SamB> @help part
14:00:54 <lambdabot> part <channel>
14:00:56 <thbot> part <channel>
14:01:08 <TheHunter> thbot: list to your master, dammit!
14:01:08 <SamB> or you could supply the channel name
14:01:20 <TheHunter> thbot: @part #haskell
14:01:37 <TheHunter> SamB, were you working on @docs?
14:01:58 <SamB> @todo bare @part either gives error message or parts the channel the command was given on
14:02:00 <lambdabot>   * Release lambdabot 3.0 (submitted by dons)
14:02:00 <lambdabot>   * A way to get multiple results from a google search (submitted by SamB)
14:02:00 <lambdabot> * @index liftIO looks up liftIO in http://www.haskell.org/ghc/docs/latest/
14:02:00 <lambdabot> html/libraries/doc-index-L.html, and says "Control.Monad.Trans, Control.
14:02:00 <lambdabot> Monad.Reader, Control.Monad.Writer, Control.Monad.State, Control.Monad.RWS,
14:02:00 <lambdabot> Control.Monad.Cont, Control.Monad.Error, Control.Monad.List" (submitted
14:02:03 <lambdabot> by theorbtwo)
14:02:04 <lambdabot>   * @get-shapr summons shapr instantly (submitted by SamB)
14:02:17 <SamB> oops, I did it again
14:02:26 <SamB> @todo-add bare @part either gives error message or parts the channel the command was given on
14:02:26 <lambdabot> Entry added to the todo list
14:02:45 <SamB> I must have named the commands badly if even I can't remember the right ones
14:03:20 <TheHunter> no, the names are good.
14:04:09 <SamB> well, anyway, I've sent dons a patch so that @todo will not print the whole list if its called with text
14:04:59 <TheHunter> a better way than counting to get the number for @todo-del?
14:05:29 <SamB> yes, I thought of that. but I don't know how to do that without it looking ugly
14:05:45 <SamB> any suggestions?
14:06:15 <TheHunter> nah, i can only think of the obvious ugly-looking thing.
14:06:53 <SamB> which is 0: idea (submitted by nick) ?
14:07:09 <TheHunter> pretty much.
14:07:14 <musasabi> @todo-grep and todo-del operating with the same strings?
14:07:15 <lambdabot> Unknown command, try @listcommands.
14:08:26 * SamB wonders how to get ghc to stop complaining about record accessors that aren't used
14:16:13 <cakoose> I have a question about a 8-line chunk of code.  Can I paste it somewhere or should I provide a URL to i?
14:16:21 <hellish> @pastebin
14:16:22 <lambdabot> Unknown command, try @listcommands.
14:16:36 <hellish> oops, hold on
14:16:40 <cakoose> do I "/msg pastebin"?
14:16:48 <hellish> @paste
14:16:49 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
14:16:57 <hellish> you can paste on that wiki page.
14:17:11 <TFK> Or on the pastebin.
14:17:27 <TFK> tfk.is-a-geek.org </spam>
14:18:03 <TFK> err
14:18:12 <TFK> 84.228.143.44
14:18:18 <TFK> Gotta update dyndns >_<
14:18:28 <hellish> TFK: apt-get install ddclient
14:18:33 <TFK> hellish, win32
14:18:39 <TFK> But I appreciate the thought :-)
14:18:45 <SamB> ugg, I'm getting nowhere.
14:18:51 <hellish> TFK: I think there's a win32 client on their site then
14:19:03 <SamB> If I keep at it this way, I'll have half of Haddock in my lambdabot tree.
14:19:04 <TFK> You mean a script, yes, I think so too.
14:19:50 <hellish> SamB: what's the problem?
14:20:14 <SamB> trying to figure out how to parse haddock's "interface files"...
14:20:18 <TFK> There, it works.
14:21:25 <TFK> Just got the lambdabot code :3
14:21:56 <theorbtwo> I assumed you'd do it by parsing the HTML.
14:22:31 <theorbtwo> For one thing, that means that the output automatically matches the version of the docs on the site, not neccessarly the version that the lambdabot machine has.
14:22:48 <hellish> SamB: you want to parse it's output so lambdabot could return it?
14:23:29 <SamB> hellish: well, so lambdabot could use it
14:23:31 <SamB> @todo
14:23:32 <lambdabot>   * Release lambdabot 3.0 (submitted by dons)
14:23:32 <lambdabot>   * A way to get multiple results from a google search (submitted by SamB)
14:23:32 <lambdabot> * @index liftIO looks up liftIO in http://www.haskell.org/ghc/docs/latest/
14:23:32 <lambdabot> html/libraries/doc-index-L.html, and says "Control.Monad.Trans, Control.
14:23:32 <lambdabot> Monad.Reader, Control.Monad.Writer, Control.Monad.State, Control.Monad.RWS,
14:23:34 <lambdabot> Control.Monad.Cont, Control.Monad.Error, Control.Monad.List" (submitted
14:23:36 <lambdabot> by theorbtwo)
14:23:37 <lambdabot> [3 @more lines]
14:23:41 <SamB> @more
14:23:42 <lambdabot>   * @get-shapr summons shapr instantly (submitted by SamB)
14:23:42 <lambdabot>   * bare @part either gives error message or parts the channel the command
14:23:44 <lambdabot> was given on (submitted by SamB)
14:24:05 <theorbtwo> Hm, do the haddock interface files actually have info that the .hi files do not?  lambdabot already parses hi files.
14:24:21 <theorbtwo> (Well, that portion of hi files that hs-plugins needs, at least.)
14:24:30 <SamB> also, for @docs, which should give the url for the docs of a module in the heirarchical libs
14:24:41 <hellish> the shapr summoning sounds useful, perhaps we could "import BlackCandle; import Pentagram"
14:25:18 <TFK> Nah, with a sacrifice of a goat or two we'll be fine.
14:25:43 <SamB> does shapr like goats?
14:26:21 <TFK> I suppose we'll find out eventually :-/
14:27:02 <TFK> We could sacrifice unicycles, but then we can't really cut them open/burn them. Bring them as gifts, maybe.
14:28:10 <TheHunter> here's my ugly hack.
14:28:25 <TheHunter> @docs System.Posix
14:28:26 <thbot> http://haskell.org/ghc/docs/latest/html/libraries/unix/System.Posix.html
14:28:26 <lambdabot> Maybe you meant: dice dict
14:29:46 <hellish> @version
14:29:48 <lambdabot> lambdabot 2p400, GHC 6.4 (OpenBSD i386)
14:29:48 <lambdabot> darcs get http://www.cse.unsw.edu.au/~dons/lambdabot
14:29:49 <thbot> lambdabot 2p391, GHC 6.5.20050417 (Linux i686)
14:29:49 <thbot> darcs get http://www.cse.unsw.edu.au/~dons/lambdabot
14:30:17 <TheHunter> thbot, @part #haskell
14:48:24 <SamB> @plugs read "1 :: Int -- comment"
14:48:29 <lambdabot> Ambiguous type variable `a' in these top-level constraints
14:48:34 <SamB> @plugs read "1 -- comment" :: int
14:48:36 <lambdabot> <Plugins.Eval>:1:
14:48:36 <lambdabot>     Could not deduce (Read int) from the context ()
14:48:36 <lambdabot>       arising from use of `read'
14:48:37 <SamB> @plugs read "1 -- comment" :: Int
14:48:39 <lambdabot> Fail: Prelude.read: no parse
14:53:16 <jyasskin> gstreamer is not composable. *grumble*
14:55:43 <TFK> There, I have the official dyndns update client for win32.
14:58:30 <TFK> Hmmm, added another host, hbin.dyndns.org (I'm obsessed, yes)
14:58:44 <TFK> *alist
14:58:46 <TFK> **alias
14:59:13 <rasterfar> l
14:59:27 <rasterfar> oops -- `scuse.
15:00:02 <kaol> "You see a room full of lambdas."
15:00:43 * kaol has been playing MUDs all too much
15:01:02 <hellish> heh.
15:01:05 <basti_> kaol: lol
15:01:06 <rasterfar> ah -- "l" for "look"?
15:01:06 <nuffer> is there a succinct way to say "if (char c) is a numeral then..."?
15:01:23 <nuffer> or do I have to say "if c == '0' || c == '1' || etc."
15:01:23 <TFK> nuffer, there's something in Data.Char, I think
15:01:33 <tuomov> if Char.isDigit c then
15:01:35 <tuomov> ?
15:01:50 <gzl> yeah.
15:02:08 <nuffer> thanks
15:02:08 <tuomov> or in lack of that if c `elem` ['0'..'9'] should also work
15:03:03 * TFK puts the hierarchial libraries docs into his bookmarks toolbar
15:06:17 * TheHunter realizes there's another problem with @docs
15:06:37 <TheHunter> thbot, @docs Control.Monad.Trans
15:06:37 <thbot> http://haskell.org/ghc/docs/latest/html/libraries/mtl/Control.Monad.Trans.
15:06:37 <thbot> html
15:10:36 <rasfar> Anyone have issues with darcs segfaults during "Applying patches" pahase?
15:10:51 <rasfar> s/ah/h
15:11:37 <hellish> Not I. Where'd you get your copy from?
15:12:15 <rasfar> Well, originally used an older version from my OpenBSD distro.
15:12:44 <beschmi> rasfar: anything special with these patches? (like large and binary files)
15:13:10 <rasfar> It fails often at the Apply patches stage.
15:13:24 <rasfar> Currently, trying to (re-)install JHC.
15:13:37 <rasfar> It also fails for current darcs repo itself.
15:14:39 <rasfar> beschmi: Not sure -- haven't tried to identify which patch it fails on ... I guess they are numbered sequentially?
15:15:28 <beschmi> there has been a problem with large binary files that has been fixed recently. but it seems like yours is something else
15:16:27 <tuomov> 1.0.3 is taking long..
15:19:04 <rasfar> hmm ... can't go by counting the '.'s it seems -- 16 dots for 14 patches? (http://haskell.org/hawiki/HaskellIrcPastePage)
15:20:36 <rasfar> drat! -- I need to study the wiki more before I post; my newlines look good until I save...
15:22:21 <basti_> hmm i observed buffer flush problems in darcs - sometimes it just lags very long and then outputs all the dots in one heap
15:24:42 <rasfar> basti_: thanks for the thoughts
15:26:11 <beschmi> rasfar: i get 28 dots and get completes here (darcs 1.0.2)
15:30:11 <rasfar> beschmi: hmmm
15:30:34 <rasfar> beschmi: what's your platform i wonder?
15:31:23 <beschmi> debian x86
15:31:45 <rasfar> (I learned how to post properly to the wiki btw -- future ugliness is intrinsic to the content)
15:33:08 <rasfar> Quite frankly my system's a real mess at the moment.  I wanted to wait until I got the OpenBSD 3.7 CD (coming out May 19), but this is getting excruciating
15:34:00 * TFK wonders if he can just stick the link to his pastebin in the topic
15:35:20 <hellish> TFK: what makes it better than @paste?
15:36:47 <TFK> (1) It doesn't involve editing a wiki page, with all the annoyances of adding {{{#!syntax haskell and all. (2) gives a separate link to each paste. (3) enumerates lines of code. (4) has some form of syntax highlighting (and btw you can suggest colour schemes, I'm no graphic designer)
15:37:05 <rasfar> @paste pasty
15:37:06 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
15:37:51 <rasfar> tfk: I see your page (http://tfk.is-a-geek.org/) -- is there an @-command for that?
15:38:14 <TFK> rasfar, not as far as I know. Also, I added another alias - hbin.dyndns.org - makes more sense.
15:38:42 * rasfar nods
15:38:44 <TFK> It's in early stages, so forgive the somewhat basic design and feel free to make suggestions.
15:39:35 <TFK> Oh, and (5) it's written in Haskell.
15:39:52 <rasfar> tfk: btw, does lowercase "tfk" highlight like "TFK" (IRC newbie question)?
15:40:01 <TFK> heh, yup :-P
15:40:21 <TFK> I suppose it depends on the client and the setup, but at least it does by default in X-Chat 2.0.10.
15:54:23 <rasfar> mwc: hiya
15:54:53 <mwc> rasfar, good evening
15:55:08 <rasfar> 5 bells by my clock
16:02:29 <cakoose> I have: data Type = Record [(String,Type)] | List Type
16:03:01 <cakoose> I want to allow record types to be derived from some base type:
16:03:18 <cakoose> data Type = Record [(String,Type)] (Maybe Type) | ...
16:03:36 <cakoose> Can I enforce the (Maybe Type) to be a "Record"?
16:04:56 <rasfar> Can you use [] in alg. datatypes?  Somehow I thought you couldn't.
16:05:29 <TheHunter> data Foo a = Foo [a] is ok, data Foo a = [Foo a] isn't.
16:05:48 <rasfar> hmmmm
16:09:44 <Oejet> TFK: Nice pastebin.
16:09:52 <TFK> Oejet, sankyu.
16:11:57 <TheHunter> yeah, we gotta think about how to intregrate with lambdabot.
16:12:18 <rasfar> @help paste
16:12:19 <lambdabot> paste page url
16:13:09 <TFK> I was just wondering about that few hours ago. It was suggested to start another thread that will listen to outside events, for example messages from hbin.
16:13:19 <rasfar> cakoose, I find your question interesting, but I'm not sure what to suggest.
16:14:02 <TFK> I will try coding it, but I feel that I'll need to finish Gentle first, and read all the monad-related articles I was pointed to.
16:14:11 <TheHunter> TFK, i would do it the other way round, so we don't need to think about authentification.
16:14:29 <TFK> What do you mean, the other way around?
16:14:37 <TFK> lambdabot to probe hbin?
16:15:02 <TheHunter> yep.
16:15:11 <TheHunter> but i guess hbin is just a cgi?
16:15:47 <TFK> Yup.
16:16:00 <TheHunter> makes no sense to probe hbin, then.
16:16:16 <TFK> Yup. After all, it's easier to just copy-paste the link from the browser.
16:17:09 * TheHunter wonders how lisppaste2 does it.
16:18:13 <cakoose> rasfar: The problem might be that I'm coming from Java (in which "Record" and "List" are subtypes of "Type").
16:18:44 <TheHunter> lisppaste2, url
16:18:45 <lisppaste2> To use the lisppaste bot, visit http://paste.lisp.org/new/haskell and enter your paste.
16:19:10 <TFK> Doesn't it send a message to the bot?
16:19:37 <tuomov> cakoose: you probably want typeclasses
16:19:42 <tuomov> then you can express something like
16:19:53 <TheHunter> i think lisppaste2's trick is to use the same machine for the bot and for cgi...
16:19:54 <tuomov> data Foo a => Bar a
16:21:21 <TheHunter> we have to be smarter :)
16:21:22 <lisppaste2> TFK pasted "test" at http://paste.lisp.org/display/7675
16:21:32 <rasfar> I am trying to find where Record is defined: Is there a keyword-searchable Haskell lib db out there?
16:22:00 <TFK> Pretty, but no line enumeration and syntax highlight :-(
16:22:26 <tuomov> the cgi could send mail to lambdabot..
16:23:01 <TFK> That's pretty slow.
16:23:09 <TFK> The idea is to have instant announcements.
16:23:28 <tuomov> mail is instant unless you have crappy servers in between
16:24:24 <TFK> Well, I'm guessing mail would be subject to the same authentication problems.
16:24:53 <TheHunter> forget about authentication, that was a silly idea.
16:25:21 <wagle> anyone figured out how to get wget (or some command line thingy) to save the output of a CGI script to disk?
16:25:24 <TheHunter> we don't really need to care about that, if someone wants to flood the channel, there are enough ways to do that.
16:25:36 <SamB> @todo
16:25:37 <lambdabot>   * Release lambdabot 3.0 (submitted by dons)
16:25:37 <lambdabot>   * A way to get multiple results from a google search (submitted by SamB)
16:25:37 <lambdabot> * @index liftIO looks up liftIO in http://www.haskell.org/ghc/docs/latest/
16:25:37 <lambdabot> html/libraries/doc-index-L.html, and says "Control.Monad.Trans, Control.
16:25:37 <lambdabot> Monad.Reader, Control.Monad.Writer, Control.Monad.State, Control.Monad.RWS,
16:25:37 <lambdabot> Control.Monad.Cont, Control.Monad.Error, Control.Monad.List" (submitted
16:25:39 <lambdabot> by theorbtwo)
16:25:41 <lambdabot> [3 @more lines]
16:25:55 <TFK> So then why not make another thread for lambdabot?
16:26:22 <TFK> (I volunteer to do it, if that's the problem ;-)
16:26:40 <TheHunter> well, it should be a module, err plugin.
16:26:48 * TFK hopes lambdabot code is friendly
16:27:10 <SamB> theorbtwo: you said you could write a perl script to find the module documentation?
16:27:21 <SamB> I'm beginning to think that is a good idea
16:27:26 <TFK> What freedoms does a plugin have? Will it be enough to pull this off?
16:27:36 <TheHunter> not yet :)
16:27:54 <TheHunter> SamB, finding the module documentation is easy.
16:28:33 <TheHunter> you mean @docs, right?
16:28:49 <TFK> heh
16:29:03 <rasfar> @help docs
16:29:04 <lambdabot>  @help <command> - ask for help for <command>
16:29:14 <rasfar> @help @docs
16:29:15 <lambdabot>  @help <command> - ask for help for <command>
16:29:20 <TheHunter> TFK, the problem is, upon initialization of the module, nothing about the irc connection is known
16:29:37 <TheHunter> thbot, @docs Control.Monad
16:29:38 <thbot> http://haskell.org/ghc/docs/latest/html/libraries/base/Control.Monad.html
16:30:14 <TFK> Hmmm.
16:30:42 <SamB> @docs System.Posix
16:30:42 <thbot> http://haskell.org/ghc/docs/latest/html/libraries/unix/System.Posix.html
16:30:43 <lambdabot> Maybe you meant: dice dict
16:30:47 <SamB> that is better
16:32:04 <TheHunter> there's still the problem that lines might become too long:
16:32:28 <TheHunter> thbot, @docs Data.Graph.Inductive.Query.MaxFlow2
16:32:29 <thbot> http://haskell.org/ghc/docs/latest/html/libraries/fgl/Data.Graph.Inductive.
16:32:29 <thbot> Query.MaxFlow2.html
16:32:58 <SamB> @todo stop mangling long urls
16:32:58 <thbot>          (__)
16:32:58 <thbot>          (oo)
16:32:58 <thbot>    /------\/
16:32:58 <thbot>   / |    ||
16:32:58 <thbot>  *  /\---/\
16:32:58 <thbot>     ~~   ~~
16:32:59 <lambdabot>   * Release lambdabot 3.0 (submitted by dons)
16:32:59 <lambdabot>   * A way to get multiple results from a google search (submitted by SamB)
16:32:59 <lambdabot> * @index liftIO looks up liftIO in http://www.haskell.org/ghc/docs/latest/
16:32:59 <lambdabot> html/libraries/doc-index-L.html, and says "Control.Monad.Trans, Control.
16:32:59 <lambdabot> Monad.Reader, Control.Monad.Writer, Control.Monad.State, Control.Monad.RWS,
16:32:59 <lambdabot> Control.Monad.Cont, Control.Monad.Error, Control.Monad.List" (submitted
16:33:00 <thbot> ...."Have you mooed today?"...
16:33:01 <lambdabot> by theorbtwo)
16:33:04 <lambdabot> [3 @more lines]
16:33:13 <SamB> @todo-add stop mangling long urls
16:33:14 <thbot> Unknown command, try @listcommands.
16:33:14 <lambdabot> Entry added to the todo list
16:33:20 <TFK> So is the cow the official #haskell mascot now? :-P
16:33:50 <SamB> TFK: no, its just a problem with the spell correction code on really short command names
16:34:01 <TheHunter> i though it was some kind of debian cow.
16:34:05 <TFK> The cow is? o_O
16:34:10 <SamB> @moo
16:34:11 <lambdabot>          (__)
16:34:11 <lambdabot>          (oo)
16:34:11 <lambdabot>    /------\/
16:34:11 <lambdabot>   / |    ||
16:34:11 <lambdabot>  *  /\---/\
16:34:11 <lambdabot>     ~~   ~~
16:34:13 <lambdabot> ...."Have you mooed today?"...
16:34:18 <TFK> :D
16:34:24 <SamB> try 'apt-get moo'
16:34:27 <TFK> A great way to flood the channel, though.
16:34:41 * gt3 tips the cow
16:35:18 <gt3> ----------
16:36:39 <TFK> Hmm. I wonder why the url in the browser points to tfk.is-a-geek although I changed the link in the code.
16:36:59 * TFK checks apache config
16:37:26 * SamB would like to see TheHunter's @docs implementation
16:37:35 <TFK> Bizarre. Oh well.
16:37:51 * SamB is naesten[at]gmail.com
16:38:07 <TheHunter> SamB, alright, but you'll be disappointed.
16:38:52 <SamB> I would be disappointed anyway when dons woke up
16:41:05 * TheHunter can't think of a satisfying solution of the IRC monad on module initialization problem right now.
16:41:05 <SamB> TheHunter: don't you have a patch?
16:41:34 <TheHunter> can do
16:43:28 <SamB> I meant a darcs patch
16:43:38 <SamB> sorry I wasn't more specific ;-)
16:43:57 <SamB> I once sent someone a tarball containing a symlink by mistake...
16:44:19 <TheHunter> that already was the output of darcs send.
16:44:34 <SamB> oh
16:44:44 <SamB> the .diff confused me
16:44:59 <TheHunter> what extension should darcs patches have?
16:45:26 <SamB> I just use darcs send ;-)
16:46:20 <TheHunter> that would've worked...
16:46:52 <SamB> there is a --to argument, you know
16:48:07 <nuffer> Calculator.hs:64:19: Not in scope: `Char.isDigit'
16:48:15 <nuffer> what do I need to do to make that be in scope?
16:48:52 <rasfar> import Char(isDigit) ?
16:49:25 <nuffer> ah yeah, thanks.
16:49:40 * rasfar bows
16:52:13 * SamB realizes why this isn't working
16:53:14 <TheHunter> what's "this"?
16:53:54 <SamB> I haven't figured out how to apply the patch :-(
16:55:39 <nuffer> how would I print an Int?
16:55:48 <SamB> @type print
16:55:54 <lambdabot> print :: forall a. (Show a) => a -> IO ()
16:56:03 <nuffer> how intuitive
16:56:29 <SamB> yes
16:56:59 <SamB> I'm pretty sure print = putStrLn.show
16:57:02 <SamB> @eval print
16:57:03 <lambdabot> unbound variable: print
16:57:09 <SamB> @pl print
16:57:10 <lambdabot> print
16:57:16 <SamB> @pl putStrLn.show
16:57:17 <lambdabot> putStrLn . show
16:59:47 <SamB> from usr/share/doc/ghc6-libsrc/base/System/IO.hs.gz:
16:59:48 <SamB> print           :: Show a => a -> IO ()
17:00:05 <SamB> print x         =  putStrLn (show x)
17:02:06 <blackdog> does anyone know what a package declaration is meant to look like? I'm trying to compile WASH, and getting errors from GenPKG
17:02:28 <blackdog> @paste
17:02:29 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
17:02:46 <nuffer> http://muer.njoerdba.com/paste/view.aspx?id=30e1b565-f41c-48c3-b4e8-3bd8a306a90a <-- why does that do the getLine before printing those four chars?
17:04:23 <rasfar> You probably need to set the buffering mode; if you used putStrLn they'd print first.
17:04:57 <blackdog> can anyone help?
17:05:21 <blackdog> I'm getting this error: Reading package info from stdin... ghc-pkg: Line 1: Invalid syntax (no colon after field name)
17:05:21 <rasfar> See hSetBuffering in the Report...
17:06:15 <nuffer> @help putStrLen
17:06:16 <lambdabot>  @help <command> - ask for help for <command>
17:06:19 <nuffer> @putStrLen
17:06:21 <lambdabot> Unknown command, try @listcommands.
17:06:23 <nuffer> bah
17:06:26 <nuffer> @doc putStrLn
17:06:27 <lambdabot> Maybe you meant: dice dict ghc moo yow
17:07:03 <nuffer> I don't want putStrLn though, I want this to be a prompt like ">>> xxxxx" xxxxx being what the user types int
17:07:04 <nuffer> in rather
17:08:01 * SamB thinks gmail broke it
17:08:33 <rasfar> nuffer: I think if you use hSetBuffering you will get it.
17:08:35 <SamB> @index putStrLn
17:08:36 <lambdabot> Unknown command, try @listcommands.
17:10:45 <rasfar> nuffer: It's in the IO library in the Report, but specifically hSetBuffering NoBuffering
17:17:21 <rasfar> blackdog: I think you want colons where you have ='s ? (http://www.haskell.org/ghc/docs/latest/html/users_guide/packages.html#installed-pkg-info)
17:26:44 <blackdog> rasfar: tried that. It seems to work ok for ghc-pkg-6.2.2, but not in 6.4.
17:27:59 * rasfar scratches head
17:28:39 <rasfar> I guess I should RTFM, but -- if ghc-6.4 complains that it can't find Prelude, what's a good fix?
17:29:43 <rasfar> Tried setenv GHCLIB /usr/local/lib/hgc-6.4 but no joy.
17:30:37 <rasfar> s/hgc/ghc
17:32:04 <beschmi> ghc should be a shell script where you can set the toplevel directory
17:32:19 <Palle> hmm.. I keep get a www.hs:29: parse error (possibly incorrect indentation) while doing a "if something\n   then something"
17:32:38 <Palle> getResponse handle = do
17:32:38 <Palle>     if (hIsEOF handle)
17:32:38 <Palle>        then return ()
17:32:55 <Palle>                                                                                 
17:32:55 <Palle>     r <- hGetLine handle
17:33:00 <bourbaki> moin
17:33:12 <Palle> bourbaki, tag' :)
17:33:29 <bourbaki> :)
17:34:45 <beschmi> Palle: missing else? perhaps you can use when or unless instead of if
17:34:47 <Gahhh> Palle: need {}
17:36:08 <arjanoosting> Palle: or align everything with the do keywork (IIRC)
17:36:24 <arjanoosting> s/keywork/keyword
17:36:32 <Gahhh> check if yo uhave tabs and spaces mixed
17:37:22 <Palle> beschmi, ahh it's required.. didn't know
17:37:40 <Palle> working now thanks
17:37:40 <Palle> :)
17:40:40 <Palle> nighty. :)
17:52:45 <nuffer> rasfar, "hSetBuffering not in scope"
17:54:04 <rasfar> nuffer: import IO()
17:54:23 <rasfar> nuffer: oops -- import IO
17:55:51 <nuffer> what do I pass in for the Handle?
17:56:43 <SamB> @type IO.stdout
17:56:45 <lambdabot> IO.stdout :: GHC.IOBase.Handle
17:56:53 <nuffer> ah, thank you
17:57:18 * SamB extends thanks ghci's :b
17:57:21 <dons> good morning #haskell
17:57:26 <SamB> s/thanks/thanks to/
17:57:33 <SamB> dons: hello
17:57:36 <rasfar> yo dons
17:57:47 <SamB> I've been waiting for morning to come all evening!
17:57:59 <dons> hehe
18:00:41 <dons> I don't mind @todo having: 0. foo 1. bar btw, SamB
18:01:10 <dons> here's the output of todo in unix, which behaves much the same:
18:01:12 <dons>   2.fix dynamics
18:01:12 <dons>   3.setStoppedChildFlag causes core dumps on openbsd
18:01:28 <dons> it provides todo, tda, tdr
18:01:44 <SamB> hmm
18:01:53 <rasfar> Speaking of core dumps on OpenBSD, dons, you ever get segfaults with darcs?
18:01:56 <nuffer> yay, my calculator works
18:02:12 * rasfar pats nuffer's back
18:02:21 <dons> rasfar, old versions of darcs, and ghc < 6.2.2 are known to have the occasional core dump
18:02:32 <nuffer> if I were going to try and write a parser generator, would I need to use template haskell?
18:02:42 <dons> but i have no problems with darcs 1.0.2, ghc >= 6.2.2.
18:03:00 <rasfar> Okay -- this brings me to my ghc-6.4 issue:
18:03:00 <dons> I rejigged the ffi, and it seems to be more stable wrt W^X
18:03:19 <rasfar> (that's out of my depth but...)
18:03:44 <dons> what's your 6.4 issue?
18:03:48 <rasfar> I have both GHC 6.2.1 and 6.4 installed.  If ghc-6.4 complains can't find Prelude interface, then what?
18:04:11 <rasfar> I looked at the /usr/local/bin/ghc-6.4 script and the paths appear to be right.
18:04:17 <dons> hmm. doesn't sound good. something's borken.
18:04:37 <dons> is there a Prelude.hi in /usr/local/lib/ghc-6.4/imports/*
18:04:40 <Gahhh> isnt there a verbosity flag for paths searched ?
18:04:50 <dons> yep. -vN, N > 1
18:05:09 * rasfar trots off to try these things...
18:05:15 <dons> @todo
18:05:16 <lambdabot> Nothing to do!
18:05:18 <dons> hmm :/
18:05:21 <dons> is that true?
18:05:36 <Gahhh> yeah, kick back and open a cold one, dons
18:05:51 <dons> nope. there's entries in State/todo.
18:06:26 <rasfar> dons: There is a Prelude.hi in /usr/local/lib/ghc-6.4/imports.
18:06:46 <SamB> @seen shapr
18:06:48 <lambdabot> I haven't seen shapr.
18:07:09 <dons> @seen rasfar
18:07:10 <lambdabot> rasfar is in #haskell. Last spoke 42 seconds ago.
18:07:18 <Gahhh> how do you serialize stuff in haskell ?
18:07:29 <dons> so maybe @todo doesn't restore state properly (?)
18:07:34 <SamB> Gahhh: a variety of ways
18:07:38 <dons> Gahh, easiest is read/show
18:07:50 <SamB> dons: it was working for me
18:07:54 <dons> next level up is, I would think, Storable, or deriving Binary.
18:08:07 <dons> SamB. ok. I'll have a look.
18:08:13 <SamB> you can derive Binary?
18:08:21 <dons> with DrIFT
18:08:29 <SamB> oh
18:08:40 <SamB> does that count?
18:08:54 <dons> there's also SerTH now, that derives a similar way, with TH instead of a preprocessor
18:09:11 <dons> die!
18:09:21 <Gahhh> lol
18:09:35 <blackdog> g'day don - is there a sensible way to have two versions of hs-plugins installed, one for 6.2.2 and one for 6.4?
18:10:12 <dons> hmm. maybe not if they're both in $PREFIX/lib/hs-plugins/
18:10:21 <dons> you could set libdir to fix this, I reckon
18:11:33 <dons> @todo
18:11:34 <lambdabot> Nothing to do!
18:11:36 <SamB> is there some kind of repository for hs-plugins
18:11:37 <dons> hmm.
18:11:37 <blackdog> ok. i can take other avenues for the moment, but some stuff is a pain to get working with 6.4. I'll try the libdir trick if i can't get 6.4 to work.
18:11:56 <SamB> dons: you've cloberred State/todo by now
18:12:09 * rasfar figured out the ghc-6.4 issue (sort of).
18:12:13 <dons> nope. i darcs recorded it.
18:12:19 <SamB> oh?
18:12:50 <dons> SamB, hs-plugins lives in a cvs repo. but it's not public, so there are nightly snapshots instead. i'm moving that over to darcs soonish though.
18:13:55 <SamB> oh, is there any particular reason why hs-plugins doesn't complain about attempts to load modules who's filename and internal name do not match?
18:14:15 <dons> why it doesn't complain?
18:14:31 <dons> it shouldn't, really, as you are allowed to load, for example, C objects
18:14:37 <SamB> oh?
18:14:41 <dons> but having load complain might be nice.
18:15:22 <SamB> does it make any difference what I declare a plugin module's name to be as far as lambdabot is concerned?
18:15:53 <dons> lambdabot requires the module name to be the same as the file name
18:16:18 <dons> otherwise the build system won't find it, or generate correct calls to hs-plugins to load it.
18:17:38 <SamB> are you sure this is still the case?
18:18:09 <dons> fairly sure. there's code in GenModules that assumes this.
18:18:11 <dons> why?
18:19:22 <SamB> just let me check... I was pretty sure it was loading the todo module before I noticed I hadn't changed the module declaration from Karma to Todo
18:19:35 <dons> oh, I think I know what the problem was
18:19:49 <dons> let me check..
18:20:21 <dons> yep. the state format changed.
18:20:27 <dons> that's it.
18:20:35 <SamB> oh.
18:20:38 * dons hacks the state file.
18:22:10 <dons> @todo
18:22:16 <lambdabot>   * Release lambdabot 3.0 (submitted by dons)
18:22:18 <lambdabot>   * A way to get multiple results from a google search (submitted by SamB)
18:22:20 <lambdabot> * @index liftIO looks up liftIO in http://www.haskell.org/ghc/docs/latest/
18:22:22 <lambdabot> html/libraries/doc-index-L.html, and says "Control.Monad.Trans, Control.
18:22:24 <lambdabot> Monad.Reader, Control.Monad.Writer, Control.Monad.State, Control.Monad.RWS,
18:22:26 <lambdabot> Control.Monad.Cont, Control.Monad.Error, Control.Monad.List" (submitted
18:22:29 <lambdabot> by theorbtwo)
18:22:30 <lambdabot> [4 @more lines]
18:22:35 <dons> ok.
18:23:45 <dons> @seen SamB
18:23:47 <lambdabot> SamB is in #haskell. I last heard SamB speak 3 minutes and 11 seconds ago,
18:23:47 <lambdabot> but I have missed 1 minute and 9 seconds since then.
18:23:55 <SamB> @seen shapr
18:23:56 <lambdabot> I haven't seen shapr.
18:24:15 <SamB> @todo
18:24:21 <lambdabot>   * Release lambdabot 3.0 (submitted by dons)
18:24:24 <lambdabot>   * A way to get multiple results from a google search (submitted by SamB)
18:24:25 <lambdabot> * @index liftIO looks up liftIO in http://www.haskell.org/ghc/docs/latest/
18:24:28 <lambdabot> html/libraries/doc-index-L.html, and says "Control.Monad.Trans, Control.
18:24:29 <lambdabot> Monad.Reader, Control.Monad.Writer, Control.Monad.State, Control.Monad.RWS,
18:24:31 <lambdabot> Control.Monad.Cont, Control.Monad.Error, Control.Monad.List" (submitted
18:24:34 <lambdabot> by theorbtwo)
18:24:35 <lambdabot> [4 @more lines]
18:24:35 <SamB> @more
18:24:45 <lambdabot>   * @get-shapr summons shapr instantly (submitted by SamB)
18:24:47 <lambdabot>   * bare @part either gives error message or parts the channel the command
18:24:49 <lambdabot> was given on (submitted by SamB)
18:24:51 <lambdabot>   * stop mangling long urls (submitted by SamB)
18:26:49 <dons> rasfar, the darcs segfault when applying is due to 6.2.1. you need to update to a more recent openbsd, I think.
18:26:58 <dons> (just reading the logs)
18:30:48 <blackdog> get-shapr???
18:31:09 <blackdog> Why am I picturing shapr as an immensely cheerful genie?
18:31:19 <SamB> I don't know
18:31:26 <SamB> probably because he is so friendly ;-)
18:31:46 <SamB> someone mentioned import BlackCandle and import Pentagram
18:33:07 <SamB> _samb_lambdabot: @todo
18:33:08 <_samb_lambdabot> Nothing to do!
18:34:22 <SamB> _samb_lambdabot: @todo-add @todo-metoo
18:34:23 <_samb_lambdabot> Entry added to the todo list
18:34:28 <SamB> _samb_lambdabot: @todo
18:34:28 <_samb_lambdabot>   0: @todo-metoo (submitted by SamB)
18:35:38 <SamB> @listcommands todo
18:35:39 <_samb_lambdabot> todo provides: todo todo-add todo-delete
18:35:40 <lambdabot> todo provides: todo todo-add todo-delete
18:37:31 * rasfar back from library
18:38:05 <rasfar> Thanks dons; now that ghc-6.4 working again, will try recompiling darcs...
18:38:49 <wagle> @get-shapr
18:38:51 <lambdabot> Unknown command, try @listcommands.
18:38:51 <_samb_lambdabot> Unknown command, try @listcommands.
18:39:10 <SamB> wagle: that was on the todo list
18:39:11 <wagle> 8(
18:39:19 <SamB> _samb_lambdabot: @quit
18:39:29 <wagle> @solve-all-todos
18:39:30 <lambdabot> Unknown command, try @listcommands.
18:41:17 * SamB is surprised that wal-mart sells a $500 laptop
18:41:31 <wagle> that much?  i thought it was cheaper
18:41:37 <SamB> $498
18:41:49 <wagle> linux?
18:41:59 <SamB> it hasn't got enough RAM
18:42:08 <SamB> it comes with Linspire (was Lindows)
18:42:12 <wagle> windows is around $150
18:42:31 <wagle> ok..  lindows is the linux i meant
18:42:55 <wagle> i wasnt with the times enough to know about linspire
18:43:09 <SamB> I mean, I have a 450 MHz PII and 256 MiB isn't really enough, and that thing only comes with 128 MiB
18:43:38 <wagle> i think windows roared at lindows them about the name similarity to windows
18:43:53 <wagle> SamB: which kernel?
18:43:54 <SamB> sounds right to me
18:44:07 <wagle> s/them//
18:46:17 <SamB> walmart.com doesn't say
18:46:27 <SamB> but it comes with Linspire 4.5
18:46:35 <wagle> no, i meant which kernel are you ruinning on the 450?
18:46:51 <SamB> /version SamB
18:47:32 <SamB> >SamB< CTCP VERSION
18:47:32 <SamB> --- Received a CTCP VERSION from SamB
18:47:32 <SamB> -SamB- VERSION xchat 2.0.10 Linux 2.4.25-1-686 [i686/16.43GHz]
18:47:54 <wagle> ah..  2.4 kernels have stupid swappers
18:48:05 <SamB> not as bad as Windows does
18:48:14 <hellish> SamB: woah, that's a lot of GHz...
18:48:14 <wagle> you running redhat?
18:48:21 <CosmicRay> heh
18:48:23 <SamB> Degian
18:48:27 <SamB> s/g/b/
18:48:47 <wagle> its supposed to be better to run 2.6 kernels
18:49:25 <wagle> i havent bothered testing on my old machines.  easier just to let them run as is..
18:49:51 <wagle> my amd 2200+ only has 256M, and seems ok with fedora core 3
18:50:21 <wagle> 384M seems the minimum for redhat 9
18:50:52 <SamB> I don't run KDE or Gnome either, the biggest hog is firefox
18:50:56 <wagle> my dual 450 was okay with 256M and redhat 7.3 until the final 2-3 kernel patches
18:51:23 <SamB> final 2-3 patches?
18:52:09 <blackdog> anyone know if there's a cabalized WASH available?
18:52:15 <wagle> 7.3 had about a dozen kernel patches (updates)..  the last 2-3 had the memory/swap hog problem
18:53:05 <SamB> any idea if kernel-image-2.6.8-2-686 is good?
18:53:14 * dons finally writes a macro for doing darcs apply from mutt, and increases productivity
18:53:30 <wagle> ENOCLUE
18:53:41 <wagle> try it and see what happens..  8)
18:53:45 <wagle> actually
18:54:28 <wagle> there are a few more packages you need to upgrade to make such a major kernel upgrade..  googling is supposed to tell you which packages
18:54:41 <wagle> i got tired of doing that, so havent kept up
18:55:10 <hellish> wagle: that's what apt-get is for.
18:55:54 <wagle> when i upgraded, it was to versions of the kernel no in the packages database
18:56:01 <wagle> s/no/not/
18:56:15 <CosmicRay> blackdog: not that I know of, but shapr would be the best one to ask
18:56:33 <wagle> @get-shapr
18:56:35 <lambdabot> Unknown command, try @listcommands.
18:56:46 <wagle> ... didnt wait long enough.. 8)
18:56:57 <SamB> apt-get doesn't think I need any packages besides the image
18:57:19 <blackdog> CosmicRay: cheers. I didn't realise cabal was so pervasive. :) Do you know if it's difficult to cabalise packages?
18:57:37 * blackdog stubbornly sticks to AU spelling
18:58:00 * CosmicRay stubbornly s/ise/ize/g to blackdog
18:58:06 <hellish> blackdog: Not really, but a little ./configure magic is required.
18:58:09 <CosmicRay> blackdog: it is usually pretty easy to do.  there are exceptions.
18:58:14 <Cale> I also always use -ise rather than -ize.
18:58:23 <CosmicRay> hellish: I try to cabalize things without ever resorting to ./configure.
18:58:25 <CosmicRay> it is possible.
18:58:38 <SamB> hellish: thats nothing new, debianizing requires the same
18:59:02 <SamB> if configure is even used, I mean
18:59:05 <hellish> CosmicRay: how? You need to edit the file with the proper paths and so forth. Do you use some other magic?
18:59:19 <CosmicRay> edit what file?
18:59:28 <hellish> PackageName.cabal
18:59:33 <CosmicRay> and proper paths to what?
19:00:37 <hellish> CosmicRay: libraries and imports.
19:00:42 <CosmicRay> for wash?
19:01:13 <CosmicRay> I can see that for something that requires *C* libraries.
19:01:16 <hellish> CosmicRay: Wash is a libary is it not?
19:01:20 <CosmicRay> sure
19:01:24 <CosmicRay> but it's pure haskell
19:01:32 <CosmicRay> what exact path would you have to specify?
19:01:35 <CosmicRay> in the .cabal?
19:01:39 <hellish> CosmicRay: you still need to import them.
19:01:44 <CosmicRay> to import what?
19:01:54 <CosmicRay> <-- highly confused
19:02:53 <hellish> like: import-dirs: /usr/local/lib/ghc-6.4/imports/HaXml/
19:03:04 <blackdog> i don't suppose there's a cheap and dirty hack to go from ghc-pkg style strings to .cabal files?
19:03:05 <CosmicRay> I have *never* had a need to do that
19:03:08 <CosmicRay> why would you do that?
19:03:18 <hellish> So that using -package works.
19:03:25 <blackdog> @paste has what i'm getting...
19:03:26 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
19:03:38 <CosmicRay> uh, if you have installed HaXml as a package, then just adding HaXml to build-depends is all you need
19:03:43 <CosmicRay> you don't need to specify a specific directory
19:03:46 <CosmicRay> it figures it all out
19:04:15 <hellish> CosmicRay: What do you mean by build-depends?
19:04:25 <CosmicRay> the build-depends line in .cabal
19:05:21 <arjanoosting> does anyone know what is wrong with the Haskell Experimental/Unsafe archive for Debian?
19:06:02 <arjanoosting> apt-get can not find the Packages files
19:06:34 <hellish> obviously we're looking at different .cabals, because I don't see any build-depends line. How would it link the files without knowing where they were?
19:07:08 <SamB> arjanoosting: you ran apt-get update?
19:07:18 <arjanoosting> samb: yes i did
19:07:28 <SamB> hellish: it would know where they were
19:07:44 <arjanoosting> samb: i have problems getting the Packages file for a couple of days now
19:08:03 <hellish> SamB: magically? As I understand it, the cabal files are how it knows these sorts of things
19:08:38 * hellish recently fixed HaXml's cabalization
19:09:19 <SamB> hellish: also ghc-pkg
19:09:52 <hellish> SamB: yes. But it has to know where things are somehow.
19:11:07 <SamB> hellish: have you played with debian packaging?
19:11:07 <SamB> it might help
19:11:23 <SamB> or, hey, you could just try build-depends
19:12:10 <hellish> SamB: nope, debian expeiremental haskell packages aren't available on ppc, so I downloaded it myself.
19:13:33 <SamB> hellish: no, I meant just plain debian packaging
19:13:52 <SamB> as in debianizing some package or other, maybe in Python or C or something
19:14:26 <hellish> Ah, no.
19:31:56 * hellish has apparently stunned the room in silence with his stupidity.
19:32:46 <dons> @yow
19:32:47 <lambdabot> We are now enjoying total mutual interaction in an imaginary hot
19:32:47 <lambdabot> tub ...
19:33:13 <mwc> doesn't he know stunned silence means we're too dumb to help him?
19:33:22 <mwc> dons, wow
19:33:27 <mwc> she's all grown up
19:34:16 <dons> hehe
19:34:56 <dons> @ghc
19:34:58 <lambdabot>   The instance types do not agree with the functional dependencies of the
19:34:58 <lambdabot> class
19:35:24 <mwc> another sunset, another day with Hudak's book still being in shipping
19:35:32 <mwc> @sys rm -rf /
19:35:32 <d`> not only grown up, but apparently quite well educated ;]
19:35:33 <lambdabot> Unknown command, try @listcommands.
19:36:13 <dons> @karma- mwc
19:36:14 <lambdabot> mwc's karma has been decremented
19:36:28 <mwc> hahah
19:36:39 <mwc> I was doing a cursory security audit of lambdabot
19:36:52 <dons> hehe
19:37:19 <mwc> if only that excuse worked at 2 am in front of best buy with a crowbar
19:37:19 <mwc> @karma mwc
19:37:19 <mwc> lets see what I'm at
19:37:20 <lambdabot> You have a karma of -1
19:37:24 <mwc> @listcommands
19:37:26 <lambdabot> Commands: all-dicts arr babel define definitions del-definition devils dice
19:37:26 <lambdabot> dict dict-help docs dummy dynamic-load dynamic-reload dynamic-unload easton
19:37:26 <lambdabot> echo elements eurohaskell eval fact fact-cons fact-delete fact-set fact-
19:37:26 <lambdabot> snoc fact-update foldoc fortune gazetteer get-definition ghc google help
19:37:26 <lambdabot> hitchcock jargon join karma karma+ karma- kind learn leave listchans listcommand
19:37:26 <mwc> Ah
19:37:26 <lambdabot> s listmodules lojban moo more msg part paste pl pl-resume plugs pointless
19:37:28 <lambdabot> prelude quit quote reconnect remember resume seen set-fuel spell state timein
19:37:30 <lambdabot> todo todo-add todo-delete topic-cons topic-init topic-snoc topic-tail topic-
19:37:32 <lambdabot> tell type uptime vera version vixen web1913 wiki wikipedia wn world02 yow
19:37:46 <mwc> dons, @quit?
19:38:00 <dons> @help quit
19:38:01 <lambdabot> quit [msg]
19:38:19 <dons> @todo-add better quit message
19:38:20 <mwc> that quits lambdabot?
19:38:21 <lambdabot> Entry added to the todo list
19:38:47 <dons> yep
19:39:16 <mwc> restricted over nicks?o or what?
19:39:24 <dons> yep
19:39:29 <dons> tooo the admins
19:41:31 <mwc> @vixen how do you like working with your human counterparts?
19:41:32 <lambdabot> yah, i like
19:42:26 <mwc> @help msg
19:42:27 <lambdabot> msg someone
19:42:43 <mwc> @msg mwc foo
19:42:44 <lambdabot> not enough privileges
19:43:04 <wagle> @msg wagle foo
19:43:04 <mwc> @help lojban
19:43:05 <lambdabot> not enough privileges
19:43:06 <lambdabot> I perform dictionary lookups via the following 14 commands:
19:43:06 <lambdabot>  @all-dicts .. Query all databases on dict.org
19:43:06 <lambdabot>  @devils ..... The Devil's Dictionary
19:43:06 <lambdabot>  @easton ..... Easton's 1897 Bible Dictionary
19:43:06 <lambdabot>  @elements ... Elements database
19:43:08 <lambdabot>  @foldoc ..... The Free On-line Dictionary of Computing
19:43:10 <lambdabot>  @gazetteer .. U.S. Gazetteer (1990)
19:43:13 <lambdabot> [8 @more lines]
19:44:06 <abl> @easton cannibalism
19:44:13 <lambdabot> No match for "cannibalism".
19:44:36 <mwc> @easton catamite
19:44:38 <lambdabot> No match for "catamite".
19:44:53 <mwc> Must be that old time bible
19:45:00 <mwc> the one without the debauchery and violence
19:46:03 <abl> Also known as the really short version?
19:46:08 <mwc> @easton Jesus
19:46:11 <lambdabot> *** "Jesus" easton "Easton's 1897 Bible Dictionary"
19:46:11 <lambdabot> Jesus
19:46:11 <lambdabot>    (1.) Joshua, the son of Nun (Acts 7:45; Heb. 4:8; R.V.,
19:46:11 <lambdabot>    "Joshua").
19:46:11 <lambdabot>  
19:46:11 <lambdabot>      (2.) A Jewish Christian surnamed Justus (Col. 4:11).
19:46:13 <lambdabot>  
19:46:15 <lambdabot> [58 @more lines]
19:46:31 <mwc> Hah, some dictionary
19:46:44 <SamB> @more
19:46:45 <lambdabot>      Je'sus, the proper, as Christ is the official, name of our
19:46:45 <lambdabot>    Lord. To distinguish him from others so called, he is spoken of
19:46:45 <lambdabot>    as "Jesus of Nazareth" (John 18:7), and "Jesus the son of
19:46:45 <lambdabot>    Joseph" (John 6:42).
19:46:45 <lambdabot>  
19:46:45 <lambdabot>      This is the Greek form of the Hebrew name Joshua, which was
19:46:47 <lambdabot>    originally Hoshea (Num. 13:8, 16), but changed by Moses into
19:46:49 <mwc> abl, yeah, the pamphlet they give out at the vatican
19:46:49 <lambdabot> [51 @more lines]
19:48:28 <abl> @devils cannibal
19:48:31 <lambdabot> *** "CANNIBAL" devils "THE DEVIL'S DICTIONARY ((C)1911 Released April 15
19:48:31 <lambdabot> 1993)"
19:48:31 <lambdabot> CANNIBAL, n.  A gastronome of the old school who preserves the simple
19:48:31 <lambdabot> tastes and adheres to the natural diet of the pre-pork period.
19:48:39 <dons> hehe
19:48:46 <mwc> that one is much better
19:49:49 <abl> @devils cynic
19:49:51 <lambdabot> *** "CYNIC" devils "THE DEVIL'S DICTIONARY ((C)1911 Released April 15 1993)
19:49:51 <lambdabot> "
19:49:51 <lambdabot> CYNIC, n.  A blackguard whose faulty vision sees things as they are,
19:49:51 <lambdabot> not as they ought to be.  Hence the custom among the Scythians of
19:49:51 <lambdabot> plucking out a cynic's eyes to improve his vision.
19:49:51 <lambdabot>  
19:49:53 <lambdabot>                                   D
19:51:24 <mwc> @devils nihilism
19:51:26 <lambdabot> No match for "nihilism".
19:52:29 <araujo> hah
19:52:37 <araujo> @devils irony
19:52:39 <lambdabot> No match for "irony".
19:52:41 <dons> @uptime
19:52:42 <lambdabot> uptime: 1 hour, 30 minutes and 41 seconds
19:52:45 <dons> very nice
19:52:52 <araujo> @devils dead
19:52:54 <lambdabot> *** "DEAD" devils "THE DEVIL'S DICTIONARY ((C)1911 Released April 15 1993)
19:52:54 <lambdabot> "
19:52:54 <lambdabot> DEAD, adj.
19:52:54 <lambdabot>  
19:52:54 <lambdabot>     Done with the work of breathing; done
19:52:55 <lambdabot>     With all the world; the mad race run
19:52:57 <lambdabot>     Though to the end; the golden goal
19:52:59 <lambdabot>     Attained and found to be a hole!
19:53:01 <lambdabot>                                                         Squatol Johnes
19:54:37 <dons> @todo-a improve formatting of @dict
19:54:38 <lambdabot> Entry added to the todo list
19:59:25 <SamB> @devils jesus
19:59:27 <lambdabot> No match for "jesus".
20:00:29 <daveo_wales> is anybody here familiar with the HTTP/Browser modules?
20:00:59 <SamB> @devils buy
20:01:02 <lambdabot> No match for "buy".
20:01:17 <SamB> @devils steal
20:01:20 <lambdabot> No match for "steal".
20:01:33 <dons> @uptime
20:01:34 <lambdabot> uptime: 23 seconds
20:01:54 <dons> @todo-a Keep track of longest time
20:01:55 <lambdabot> Entry added to the todo list
20:02:35 <rasfar> dons? this is terrible insecure, but: could I get an OBSD darcs binary off ya?
20:03:05 <rasfar> I'm having a hell of a time building it.
20:03:06 <dons> are there no binaries on the ftp sites?
20:03:42 <rasfar> Well, there is linux/i386 (static) -- but although I'm emulating, my OBSD doesn't recognise the format.
20:04:18 <rasfar> (Maybe I'm doing it wrong?  I have emulation for Java, but that was all automatically set-up when I built the Java)
20:04:20 <dons> ftp.openbsd.org//pub/OpenBSD/snapshots/packages/i386/darcs-1.0.2.tgz
20:04:27 <dons> emulating? why.
20:04:46 <dons> we have excellent native haskell, and thus native darcs.
20:05:01 <rasfar> Oh -- right, the packages.  Um.  I can't add that.  lib conflicts
20:05:22 <rasfar> (I know we don't need to emulate in most cases; but I thought it could get me out of a tight spot in this instance.)
20:05:50 <rasfar> I'll try again with the pkg_add...
20:05:55 <dons> well, I only use the above pkg.
20:06:12 <dons> and it's a 3.7-current machine, so the lib deps are likely to be wrong for you.
20:06:36 <dons> you can overcome them with ln -s, btw (I know that's evil, but darcs doesn't have many deps).
20:06:50 <dons> why isn't it building?/
20:07:04 <rasfar> ya.  I have a 3.7-current on my other HD, but all my web apps etc. are installed on this fu'd HD.
20:07:37 <rasfar> Well, from ports (latest snap), as well as from a fresh tarball source distro ...
20:07:58 <dons> what's wrong with them?
20:08:16 <rasfar> ... ./configure complains when it gets to ...
20:08:19 <rasfar> checking GHC.Handle.openFd new API... failed
20:08:19 <rasfar> c
20:08:35 <dons> do you have ghc-6.4 in your $PATH ?
20:08:39 <dons> which ghc is installed?
20:09:11 <rasfar> yeah; but 1) I also have GHC 6.2.1 installed, and can't uninstall for reasons I will clarify only if you ask!
20:09:43 <rasfar> and 2) although I did "sudo gmake install" the 6.4, it still needs to find the original dir where I unpacked it.
20:10:03 <rasfar> (This was the problem earlier, so I moved the dir back.)
20:10:13 <dons> are you using the nightly snapshots of ghc 6.4?
20:10:29 <dons> @google haskell openbsd
20:10:31 <lambdabot> http://www.cse.unsw.edu.au/~dons/openbsd/
20:11:02 <rasfar> Hmmm.  Perhaps.  I grabbed ghc 6.4 and built it in great haste, as I was focused on building jhc with it.
20:11:23 <nuffer> the bloody template haskell interface is so inelegant
20:11:27 <dons> ok. I'll post a darcs binary for you. what date is the kernel, roughly?
20:11:46 <rasfar> Jan 18
20:13:00 <dons> oh, are the lib deps with the darcs pkg just for ghc 6.2.2?/
20:13:09 <rasfar> Thanks! I know this isn't much fun compared to hacking lambdabot!
20:13:48 <rasfar> It I remember correctly, pkg_add didn't specify ... let me try once again.
20:14:31 <rasfar> oh.
20:14:53 <rasfar> I think I'm using an out-of-date snapshot in my pkg_get script.
20:15:08 <rasfar> Let me fiddle with that a bit, and I'll get back to you.
20:15:34 <dons> I just think that any binary darcs i post is going to have similar dependency issues
20:15:55 <rasfar> ya.  I wish 3.7 was out already!!!!!
20:16:20 <dons> maybe you can install ghc-6.2.2 via ftp. it's much more stable on openbsd. and ghci works
20:16:43 <dons> then you can use that to build darcs
20:17:00 <rasfar> hmm -- that's a possibility; thanks.
20:17:35 <rasfar> I'm definitely at the point where a fresh re-install of my whole system would feel good though.
20:18:26 <rasfar> pkg_info -a | wc  gives 134, and they're not all from -release I can tell you.
20:19:34 <dons> hehe
20:20:17 <dons> grab a 3.7 snapshot via ftp. it'll be good for you :)
20:23:30 <rasfar> okay I'm gonna do it.  I may disappear for a while.  (Maybe won't hear from me until May in fact; I'll be relocated by then....)  Thanks for your patient advice!
20:23:43 <dons> ok. :)
20:24:15 <icb> stable is now ghc-6-4-branch right?
20:28:04 <dons> yep
20:34:57 <icb> thanks
21:35:54 <blackdog> ... if i want to use profiling, do i have to build profiling versions of all the libraries i want?
21:36:23 <dons> yep.
21:36:35 <blackdog> argh/
21:36:46 <blackdog> ok. thanks.
21:37:02 <dons> I wonder what would happen if you just ln -s'd the libs to their p_a versions..
21:40:51 <blackdog> it's not important. i'll just breadcrumb it - i'm playing with hws-wp, and it just sits and spins without any indication of what's happening.
