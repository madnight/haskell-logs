00:00:15 <JohnMeacham> Yeah, thats why I think the logic needs to be in the Ix instance... at least, with the current situation.
00:00:26 <dcoutts_> yes
00:00:31 <skew> I don't see what storable instances have to do with your compiler generating array code
00:00:51 <JohnMeacham> it doesn't. they were unrelated problems.
00:01:06 <JohnMeacham> they just both happened to involve the word 'array' :)
00:01:15 <dcoutts_> :-)
00:03:12 <JohnMeacham> It might not be too bad if you provide like a getOrigin :: PixArray -> Spot then use (spot { x = 3, y = 4}) so the user never has to see the 'stride, padding and width' fields in the indices. but it is still hacky.
00:04:19 <dcoutts_> yes, make that the only way to construct a value of the index type, sadly it is a bit hacky
00:21:30 <Itkovian> meuning
00:37:00 * wli watches hircules deadlock horrendously
00:37:11 <wli> Okay, where do bugreports go?
00:38:00 <wli> (hircules:11838): Gdk-WARNING **: Error converting from UTF-8 to STRING: Could not open converter from 'UTF-8' to 'ISO-8859-1': Success
00:38:00 <wli> Exception: Maybe.fromJust: Nothing
00:38:06 <wli> that doesn't look so hot either
00:41:28 <earthy> morning nlv
00:41:46 <earthy> and #haskell
00:43:38 <nlv11757_> morning earthy
00:43:43 <nlv11757_> and #haskell ofcourse
00:52:52 <nlv11757_> lol, surpriiiiise my ported ocaml pretty printer isnt too fast :P
00:53:43 <earthy> well, pity
00:54:02 <nlv11757_> i'll profile it in my free time
00:54:23 <earthy> what free time?
00:54:35 <nlv11757_> havent figured out that bit :P
00:54:48 <earthy> ah, your Copious Free Time...
00:54:58 <earthy> also called `ronde tuitjes'
00:55:05 <nlv11757_> hehe
00:55:55 <nlv11757_> i guess i wont be pretty printing the linux kernel anytime soon :P
00:58:31 <JohnMeacham> It is likely the quadratic append problem. see the comment in the pretty printer that comes with the standard haskell library for an interesting anecdote about just that bug.
00:58:54 <wli> Any hints on what burned me wrt. hircules?
01:00:21 <JohnMeacham> http://cvs.haskell.org/cgi-bin/cvsweb.cgi/fptools/libraries/base/Text/PrettyPrint/HughesPJ.hs?rev=1.16
01:02:34 <nlv11757_> ok thnks john
01:08:27 <wli> ghcplatform.h:1:1: unterminated #ifndef
01:08:44 <musasabi> JohnMeacham: I was playing with jhc and noticed that using Data.Map in Frontend saved much memory (815mb -> 575mb) but runtimes grew by 5%...
01:09:05 <wli> Need I say "wtf?"
01:09:22 <nlv11757_> BUG: modifier "malloc" is not a name attribute
01:09:24 <nlv11757_> hehe
01:11:12 <wli> ah
01:11:20 <wli> it needs to figure out gcc -m32 somewhere
01:13:09 <wilx> Eeek!
01:13:12 <wilx> 815MB?
01:13:19 <wilx> What kind of beast is that?
01:15:53 <wli> feh, cross compilers are still absent
01:20:24 <dcoutts_> wlix: it's JohnMeacham's new jhc Haskell compiler that does whole program copilation and optimisation. Apparently it's producing some good code but the compilation itself is a bit on the memory hungary side at the moment.
01:25:34 <wli> unlit: cannot open "basicTypes/BasicTypes.lhs"
01:25:45 <malcolm> dcoutts_: As requested, I'll add the GPL licence file to hscolour later today.
01:30:24 <dcoutts_> malcolm, cheers, I was just editing the code now to make it do xhtml with <span class="haskellcode-keyword"> and then using CSS rather than doing the colour directly
01:30:36 <Heffalump> hscolour?
01:31:00 * Heffalump should catch up on the Haskell mailing list
01:31:20 <dcoutts_> Heffalump, malcolm's Haskell html/terminal syntax colouriser
01:31:26 <malcolm> dcoutts_: yes, that sounds nicer - I learnt HTML back in 1994, before such things existed!
01:31:37 <Heffalump> ah, cool
01:31:39 <wli> (plain old curses sounds nice ot me)
01:32:06 <dcoutts_> wli, actually I was just ripping that bit of the code out :-)
01:33:31 <Heffalump> does jhc just target x86?
01:33:48 <musasabi> it produces ansi C.
01:34:09 <Heffalump> oh, and a minimal runtime system so presumably it'll be quite portable?
01:34:48 <musasabi> yes, but it still needs of work to be suitable for real world things.
01:35:18 <Heffalump> yeah, I know
01:36:47 <Heffalump> this business about not needing target support for tail calls, how does it avoid tail recursion blowing the stack?
01:37:24 <Heffalump> oh, /me reads down
01:37:53 <Heffalump> it's not obvious to me how that handles mutual recursion that wasn't inlined, though
01:45:17 <wli> pretty hopeless
01:45:46 <Heffalump> well, I guess if it uses a target that does support inlining it'll be fine
01:46:42 <nlv11757_> owwwww man, how sneaky
01:47:05 <Heffalump> ?
01:47:10 <dcoutts_> so when's someone going to write a C-- front end for gcc?
01:47:13 <nlv11757_> if ... then ... else ...
01:47:13 <nlv11757_> >|< ...
01:47:13 <nlv11757_> >|<
01:47:13 <Heffalump> s/inlining/tail calls/ in what I just said
01:47:19 <Heffalump> dcoutts_: _front_ end?
01:47:27 <nlv11757_> parenthesis around the if forgotten,
01:47:35 <earthy> why not?
01:47:36 <Heffalump> nlv11757_: ah, yes
01:47:39 <earthy> get SSA and all
01:47:39 <nlv11757_> so suddenly everything below belongs to the else branch :D
01:47:40 <Heffalump> I run into that quite a bit
01:47:53 <dcoutts_> they claim it's not so hard to write gcc front ends these days, there's a HOWTO on the web
01:48:10 <Heffalump> is the gcc intermediate language lower-level than C--?
01:48:47 <dcoutts_> Heffalump, I believe so, they've got the tree SSA form and the RTL form which are both lower level
01:49:17 <musasabi> Well it is not that writing gcc frontends is hard - but that they are quite ugly.
01:49:38 <dcoutts_> they've also got something called GIMPLE which is based on the stuff from mcgill I think
01:50:00 <dcoutts_> musasabi, 'cause you've got to write them in C ? :-)
01:50:48 <Heffalump> yeah, I noticed it was based on the stuff Laurie did on McCat
01:50:57 <dcoutts_> this is a bit out of date now probably: http://www.tldp.org/HOWTO/GCC-Frontend-HOWTO.html
01:51:02 <dcoutts_> from 2002
01:52:21 <earthy> http://gcc.gnu.org/projects/tree-ssa/#gimple for some details on the IR
01:52:39 <musasabi> dcoutts_: yes, and the gcc is purposefully not very modular..
01:53:17 <dcoutts_> musasabi, does it matter that much?
01:53:59 <musasabi> dcoutts_: if you don't mind "parse a bit, put stuff into global variables, call a function, goto 1" mentality then no.
01:54:24 <dcoutts_> I know they don't want non-FOSS programs to take advantage of the gcc backend for an open source front end I would have though it'd be ok
01:54:50 <dcoutts_> oh I see it's the statefull API that's unpleasent
01:56:28 <dcoutts_> I'm not saying a C-- front end would be a thing of beauty but it would be very useful. It should allow high level languages to generate decent code and be fairly portable.
01:57:15 <musasabi> dcoutts_: I agree it would be quite nice, not something that would be fun to hack on one's free time though.
01:57:16 * wli watches the impending breakage as gtk2hs shows clear signs of being about to fail to build
01:57:31 <dcoutts_> I suppose the qcmm people must have looked into it, so I wonder what the reasons to go a different route were
01:58:08 <dcoutts_> wli, :-)  is that you trying to get it to work with ghc 6.4?
01:58:20 <wli> nope, 6.2
01:58:31 <dcoutts_> wli, or trying to get it to build using less than 1Gb ram? :-)
01:58:49 <wli> it's exploding all over the place, starting with autoconf > 2.13 puking all over configure.ac
01:59:02 <wli> ./configure: line 4588: syntax error near unexpected token `GLIB,gobject-2.0'
01:59:02 <wli> ./configure: line 4588: `PKG_CHECK_MODULES(GLIB,gobject-2.0 >= 2.0.0)'
01:59:06 <wli> crap like that too
01:59:27 <dcoutts_> yes, I think we were using autoconf-2.5x
01:59:48 <wli> dcoutts: well, it doesn't work with autoconf2.50 or autoconf2.59, only autoconf2.13
02:00:02 <dcoutts_> do you need to autoreconf? are you having to patch configure.ac or Makefile.am?
02:00:16 <wli> Commenting garbage out of configure.ac configure.ac
02:01:11 <wli> it was the very first program check
02:01:14 <dcoutts_> doesn't work with autoconf2.59? that's the version that I use
02:01:44 <wli> diff -u -r1.38 configure.ac
02:01:44 <wli> --- configure.ac        11 Apr 2005 02:46:07 -0000      1.38
02:01:44 <wli> +++ configure.ac        22 Apr 2005 09:02:33 -0000
02:01:44 <wli> @@ -42,7 +42,6 @@
02:01:44 <wli>  ])
02:01:44 <wli>  
02:01:45 <lambdabot> Maybe you meant: pl wn
02:01:46 <wli>  dnl Checks for programs.
02:01:48 <wli> -AM_PROG_CC_C_O
02:01:50 <wli>  AC_PROG_CPP
02:01:52 <wli>  AC_PROG_INSTALL
02:01:54 <wli>  AC_PROG_LN_S
02:01:59 <wli> that's what puked
02:02:06 <wli> Maybe debian screws with autoconf
02:02:29 <wli> I wouldn't put it beyond them in the least.
02:02:45 <dcoutts_> yes, I never know about that line, some versions of automake demand that it be there and others don't
02:03:23 <dcoutts_> so what was it you needed to patch in configure.ac ?
02:03:45 <wli> dcoutts: I pasted cvs diff -u to the channel
02:04:02 <dcoutts_> oh
02:04:05 <dcoutts_> right
02:04:51 <dcoutts_> and that stops ./configure --bla-bla from working? ie the one that comes pre-built in the tarball
02:05:20 <wli> dcoutts: it stops the configure script from being generated; autoreconf fails
02:05:32 <wli> dcoutts: the configure script failing with the second paste I've not figured out how to fix yet
02:05:45 <dcoutts_> do you always autoreconf as a policy or do you use the original ./configure if it works?
02:06:46 <wli> dcoutts: I grabbed cvs. ./configure was not present in cvs, as it is a generated file.
02:07:13 <dcoutts_> oh, cvs version, ok
02:07:40 <wli> hircules says it needs cvs
02:09:14 <dcoutts_> on http://haskell.org/hircules/ that news item is a tad old. I dobt the current cvs version would work for it
02:10:03 <dcoutts_> we've changed quite a bit since 2003, like using hierarcical module names
02:10:06 <wli> I'm about to find out.
02:11:14 <dcoutts_> ok, so you did a cvs checkout, you did autoreconf-2.59 and the first error was?
02:12:21 <wli> dcouttts: let me back out to virgin
02:13:30 <wli> $ autoreconf --version
02:13:30 <wli> autoreconf (GNU Autoconf) 2.59
02:13:31 <wli> ...
02:13:40 <wli> $ autoreconf
02:13:40 <wli> aclocal: configure.ac: 45: macro `AM_PROG_CC_C_O' not found in library
02:13:40 <wli> autoreconf2.50: aclocal failed with exit status: 1
02:13:58 <wli> this could be a debian problem
02:14:33 <dcoutts_> so this is an automake marco that automake really wants to be there. I think it complains bitterly if its not.
02:15:02 <dcoutts_> I don't think I understand the patch you posted earlier. You were doing what?
02:15:09 <wli> dcoutts: if you look carefully it says it's version 2.50
02:15:26 <wli> dcoutts: it removed the AM_PROG_CC_C_O usage
02:16:42 <dcoutts_> yes, version 2.50. Is that the latest version you've got (often you'll have several versions of autoconf/automake since many packages require specific versions)
02:17:11 <wli> dcoutts: I invoked 2.59 and something went wrong with debian magic and it got redirected to 2.50
02:17:26 <dcoutts_> If I take out the AM_PROG_CC_C_O line then it complains:
02:17:27 <dcoutts_> Makefile.am: C objects in subdir but `AM_PROG_CC_C_O' not in `configure.ac'
02:17:27 <dcoutts_> autoreconf-2.59: automake failed with exit status: 1
02:18:39 <wli> it's still puking here
02:18:49 <wli> reputedly 2.59 but not reporting a version string in the error message
02:18:52 <dcoutts_> ok, try editing configure.ac and changing the line "AC_PREREQ(2.50)" to require 2.59
02:19:02 <wli> $ autoconf
02:19:03 <wli> configure.ac:45: error: possibly undefined macro: AM_PROG_CC_C_O
02:19:03 <wli>       If this token and others are legitimate, please use m4_pattern_allow.
02:19:03 <wli>       See the Autoconf documentation.
02:19:56 <JohnMeacham> OOh. can you send a patch? converting everything to use Data.Map consistantly has been on my todo list forever. I was worried because bias of some functions was different so I didn't want to do a search and replace.
02:20:02 <wli> $ autoreconf
02:20:02 <wli> aclocal: configure.ac: 46: macro `AM_PROG_CC_C_O' not found in library
02:20:02 <wli> autoreconf: aclocal failed with exit status: 1
02:20:05 <wli> same
02:20:13 <wli> dcoutts: what's aclocal where you're at?
02:20:23 <JohnMeacham> that was for musasabi
02:20:29 * wli ritually anathematizes auto* etc. while he's at it.
02:21:17 <dcoutts_> aclocal has lots of stuff put there by automake but no `AM_PROG_CC_C_O' macro
02:21:40 <wli> dcoutts: how about automake?
02:21:53 <wli> $ automake --version
02:21:53 <wli> automake (GNU automake) 1.4-p6
02:22:38 <JohnMeacham> I really want a c-- frontend for gcc....
02:22:52 <dcoutts_> well Makefile.am says it requires 1.8 and automake will use the appropriate version of itself even if  automake --version would suggest otherwise
02:23:05 <dcoutts_> but you can try automake-1.9
02:23:21 <wli> dcoutts: it's got to be something random different
02:23:31 <wli> dcoutts: it's automake, only 1.4-p6 is installed
02:23:44 <JohnMeacham> My thoughts were to write the cmm to GIMPLE converter in haskell, then do a simple raw GIMPLE shim front end for gcc. then you could reuse the cmm stuff from ghc.
02:24:35 <dcoutts_> wli, I wonder why when you run automake it doesn't complain that it it too old to process Makefile.am
02:24:46 <wli> dcoutts: any way to get a proper version error out of automake?
02:26:14 <dcoutts_> wli, try $ automake -v --gnu that should make it throw fits :-)
02:26:52 <wli> okay, tons of warnings (at the very least):
02:26:55 <wli> /usr/share/aclocal/tcl.m4:124: warning: underquoted definition of SC_PATH_TKCONFIG
02:26:56 <wli> /usr/share/aclocal/tcl.m4:228: warning: underquoted definition of SC_LOAD_TCLCONFIG
02:27:16 <wli> let's nuke 1.9 and roll back to 1.8
02:27:31 <wli> I don't trust the debian autodetaction of needed versions any further than I can throw it.
02:27:56 <wli> yeah, sure enough 1.9 puked all over that stuff
02:28:13 <dcoutts_> the underquoted stuff is all fine, it's usually complaining about other packages that have not updated their installed marcos
02:28:26 <wli> the fatal stuff was:`
02:28:27 <wli> configure.ac: required file `./missing' not found
02:28:27 <wli> automake: cannot open < /usr/share/automake-1.9/am/header-vars.am: No such file or directory
02:29:04 <wli> wild guess is that means the deb 1.9 package is broken
02:29:21 <dcoutts_> for the required file not found issue, use $ autoreconf --install
02:29:24 <wli> okay, and it puked:
02:29:25 <wli> configure.ac: required file `./missing' not found
02:29:25 <wli> Makefile.am: required file `./compile' not found
02:29:25 <wli> Makefile.am: required file `./depcomp' not found
02:29:25 <wli> autoreconf: automake failed with exit status: 1
02:29:25 <wli> autoreconf  46.48s user 2.48s system 92% cpu 53.040 total
02:30:16 <dcoutts_> if you only got those three errors thats a good sign :-)
02:30:21 <wli> dcoutts: call me an old fuddy-duddy or whatever, but maybe things are better off without the autotools
02:30:37 <dcoutts_> wli, tell me about it, it's all black magic
02:30:42 <df_> wil :: wooo!
02:31:28 <df_> autoconf is reasonable, automake considerably more evil
02:31:49 <nlv11757_> heheh automake asks for soooo much investment before it gives back
02:31:55 <wli> As far as I'm concerned the whole lot should go to Hell.
02:31:56 <dcoutts_> wli, SimonM was trying to build on fedora core 3 and kept getting this autoconf problem which we never did figure out and juhp could not reproduce. definately evil.
02:32:13 <df_> and most people don't actually use the information autoconf gives them
02:32:54 <wli> To add insult to injury, they're dogslow and singlethreaded.
02:33:18 <dcoutts_> having re-implemented our build system using automake I can advise everyone else that automake is not well suited for languages other than the few in genuinely supports (ie C/C++)
02:33:32 <df_> this is where we get distros medaling with tools breaking them in unique and irritating ways, sometimes fixing them
02:33:40 <df_> dcoutts :: i'd agree with that
02:34:35 <dcoutts_> it's all hackery upon hackery, and its basically because make is just not good enough
02:34:39 <wli> Well, personally I refuse to ever use autotools in any userspace stuff I write.
02:35:07 <dcoutts_> autoconf does make some things a lot easier though
02:35:22 <wli> dcoutts: do tell
02:35:31 <df_> a consistant configuration interface
02:35:47 <df_> very useful when you want to compile something, it usually behaves in a way you expect
02:36:24 <wli> You may need to be more concrete and beat me over the head with it. I'm just a kernel hacker, I've never seen these things be anything but a pain wrt. building and/or hacking on other people's userspace programs.
02:37:26 <df_> ie, i have a build environment with CFLAGS, CPPFLAGS, LDFLAGS, CXXFLAGS, F77FLAGS, can go --prefix=/tool/foo --exec-prefix=/tool/foo/ultrasparcIII-Solaris9/ --some-options=foo
02:37:26 <dcoutts_> if we got rid of autoconf we'd have to replace it with something similar that checked for the existance of ghc, etc did various different things depending on the version of ghc, then there's the thing that C tools support autoconf well, we can do all our checks for gtk+ quite easily
02:38:27 <tuomov> something like autoconf is the wrong solution to finding packages
02:39:08 <JohnMeacham> gah. FrontEnd.Env is a monstrositiy... no offense to the hatchet authors.. but they sure seemed to like to do things in oddly circuitous ways sometimes.
02:39:23 <dcoutts_> wli, oh, sure it's a pain to try to understand some random projects autoconf/automake system. It is a barrier to contributors I think that once they've got some code they think should work and would like to contribute they then have to extend configure.ac/Makefile.am to do something or other without really understanding it.
02:39:38 <dcoutts_> it's just blindly following existing patterns
02:39:57 <wli> okay, the mozembed stuff is throwing me because I can't find the debain package
02:40:02 <dcoutts_> and if you need to do something new, you're stuffed
02:40:04 <tuomov> A simple app directory scheme would solve the problem for non-system base libraries and programs, and the system base stuff compatibility wrappers and such could be written
02:40:12 <dcoutts_> ./configure --disable-mozilla
02:40:17 <tuomov> +for
02:40:57 <tuomov> maintining autoconf scripts is also lots of redundant between projects
02:41:02 <dcoutts_> wli, alternatively the package is probably mozilla-devel or something like that
02:41:56 <dcoutts_> wli, whichever mozilla package that provides mozilla-gtkmozembed.pc
02:45:47 <dcoutts_> wli, so after all this hassle, is there anything I can change that will make the cvs checkout build "out of the box" ? What things did we fix to make it work in the end?
02:46:12 <musasabi> JohnMeacham: yes, I can send the patch.
02:46:18 <wli> dcoutts: nothing for out-of-the-box, but finding some way to give a clear automake version error might help
02:46:59 <dcoutts_> did you edit the AC_PREREQ(2.50) line in the end?
02:47:31 <wli> yes
02:47:55 <dcoutts_> did that change things? should I do that in cvs?
02:48:21 <wli> dcoutts: it didn't change anything but it will give better errors for autoconf version mismatches since 2.50 doesn't work
02:48:57 <JohnMeacham> musasabi: no need. I have started converting things and getting rid of FrontEnd.Env alltogether at the same time.
02:49:21 <JohnMeacham> If I realized it made that much of a difference I would have done it sooner.
02:49:52 <wli> dcoutts: I was getting nailed by debian screwups where invoking autoconf with their autodetection of autoconf versions would invoke one version for some pieces and another version for others (recursive invocation???)
02:49:56 <JohnMeacham> does Data.Map.insertWith pass the existing value as the left or right argument of the combining function?
02:50:32 <musasabi> http://www.cs.helsinki.fi/u/ekarttun/haskell/convert-frontend-to-data.map.patch
02:51:23 <wli> dcoutts: I "solved" this by eliminating all automake and autoconf versions installed besides the ones the program absolutely required.
02:51:25 <musasabi> It seems that joining the maps is taking ~20% of execution time with both finitemaps and maps.
02:51:37 <musasabi> So getting rid of Frontend.Env would be a good thing.
02:52:02 <wli> dcoutts: INSTALL/README notes about parallel installed versions of automake/autoconf screwing up may also help.
02:52:06 <musasabi> JohnMeacham: yes, the argument order is reversed as compared to addToFM_C.
02:52:21 <dcoutts_> wli, probably not recursive, we've only got a single global configure.ac and Makefile.am (recursive make consdiered harmfull - another nice idea that automake doesn't properly support)
02:52:44 * wli crosses his fingers wrt. mozilla-dev being the "mozembed" stuff.
02:53:19 <dcoutts_> wli, ok, I'll document these things and the autoreconf --install for cvs users
02:53:25 <wli> thanks
02:53:49 <wli> dcoutts: mozilla-dev is the gtk-mozembed package for debian
02:54:21 <wli> 6 cpus, 3.5GB RAM on this box
02:54:42 <dcoutts_> ok, I'll mention that, I think it's the same for fedora and others
02:55:22 <dcoutts_> wli, sadly you can't make -j 6 as the automake generated makefile will break horribly :-)
02:56:02 <wli> dcoutts: I did make -j 16, I'm watching it break, then.
02:56:23 <dcoutts_> wli, good luck!
02:56:25 <wli> brilliant
02:56:29 <wli> automake generates crap makefiles, too
02:56:54 <wli> remind me of the benefits of autotools again? =)
02:56:59 <dcoutts_> er...
02:58:19 <dcoutts_> roll on improved cabal stuff I say. cabal doesn't yet support things that want to install half a dozen packages (and build a few tools to get there)
02:59:01 <wli> I think the makefile is infinite looping instead of finishing the build.
02:59:11 <JohnMeacham> Yeah, I think a problem is that the unification algorithm uses substitution maps rather than in-place updates.
02:59:40 <dcoutts_> I'll document the -j oh-no-you-don't fact too :-)
03:00:06 * wli watches 5 cpus sit idle while an individual cpu (and the individual cpus here are slow) grinds helplessly away for hours on it
03:00:55 <wli> blocking on butt-slow nfs filesystem IO single-threadedly even beyond the dogslow individual cpus...
03:01:15 <wli> even the lone cpu is mostly idle
03:01:18 <dcoutts_> wli, sorry :-(  if it makes you feel better I get the same effect on my old sparc here
03:01:38 <wli> dcoutts: UltraEnterprise 3000, 6x 300MHz UltraSPARC II.
03:02:06 <wli> chosen specifically for its ability to do parallel builds...
03:02:28 <dcoutts_> so I'm crawling along a bit faster at 500MHz UltraSPARC IIe
03:02:43 <JohnMeacham> musasabi: thanks for investigating this!
03:03:11 <wli> dcoutts: Well, it's mostly IO-bound, so in principle, with all the cpus busy, it does well.
03:03:32 <wli> Of course, the sad, sad, x86-64 story doesn't help my quad x86-64 box I could otherwise use for all this.
03:03:46 <dcoutts_> for C code with decent makefiles (like the kernel) I'm sure it's great
03:04:23 <wli> Not sure what the ppc64 story is at all but there's a dual G5 wishing it could do anything sitting around too (I appear to largely be making use of it for video playback since the Apple Cinema display is rather nifty).
03:04:32 <dcoutts_> gtk2hs builds on x86-64 it's just that most of the demos immediatly segfault :-)
03:04:59 <dcoutts_> ghc's rts seems to be treading on stuff allocated by gtk+ / pango
03:05:16 <wli> dcoutts: My autotools/etc. "wizardry" is insufficient to get a basic x86-64 haskell setup going.
03:05:48 <wli> If it were lower-level stuff I could probably cope.
03:05:53 <dcoutts_> you're using debian right? it has ghc for x86-64 I'm sure
03:06:08 <JohnMeacham> That is probably due to the horrible FFI bug with x86-64 I posted to the list.
03:06:08 <dcoutts_> or you can use SimonM's binary snapshot
03:06:13 <wli> The x86-64 box is SLES9, 9.1 etc.
03:06:30 <wli> Everything appears to *REALLY* hate SuSE.
03:06:53 <JohnMeacham> It is pretty much a showstopper, seems worthy of a point-release of ghc to fix..
03:06:56 <dcoutts_> JohnMeacham, yes that looked interesting, though I don't think we were using any "&foo" ffi style things
03:07:05 <JohnMeacham> ah.
03:07:31 <wli> It's basically flying blind on rpm deps with --nodeps everywhere since the pkg names and splits are different and then praying binary compat wrt. library symbol usage doesn't stop the show.
03:07:43 <dcoutts_> we're using that for importing C finalisers but in my tests I don't think any of them were being run before I found the corruption
03:08:24 <dcoutts_> wli, SimonM's snapshot should work on anything I think
03:08:25 <wli> I think it's safe to call SuSE a doorstop wrt. Haskell atm.
03:09:15 <dcoutts_> wli, you should be using Gentoo, we've now got 3 dedicated developers in the Haskell herd :-)
03:09:19 <wli> dcoutts: I don't see an obvious download link.
03:09:35 <dcoutts_> wli, I'll find the link...
03:10:05 <wli> dcoutts: The x86-64 box is destined to run 32-bit debian userspace (it's currently residue.holomorphy.com but will have holomorphy.com's disks transplanted to it in the eventual future).
03:10:51 <wli> The sparc64 box with the gtk2hs build running is analyticity.holomorphy.com.
03:12:23 <wli> I think the G5 is going to become the next monad.holomorphy.com and will eventually be visible to the world.
03:13:22 <wli> (Im' debating making it monodromy.holomorphy.com but it's a little painful since there's another MacOX X box, a G3, parked on that hostname)
03:14:37 <wli> Anyway, I got burned by gentoo a while ago and it's got a couple of years still before I'm willing to give it another shot.
03:17:09 <wli> PACKAGE_VERSION et al get redefinition warnings
03:18:56 <wli> looks like I won't have anything to look at until sometime tomorrow
03:19:12 <dcoutts_> wli, found it: http://www.haskell.org//pipermail/glasgow-haskell-users/2005-March/008097.html
03:19:13 <xerox> 'morning
03:19:43 <musasabi> JohnMeacham: np, the code is is fun to hack.
03:24:22 <wli> feh, no ghci
03:24:31 <dcoutts_> yep
03:25:04 <wli> kind of painful, I do significant amounts of work in ghci
03:26:32 <wli> After extreme amounts of pain, I fooled every shell script, makefile, and C/cpp/Haskell hardcoded piece of crap in ghc and fixed up some assorted oddities (I think it probably took over a month, not that someone else who knew wtf they were doing couldn't have done it faster) into dropping an i386 ghc onto the SuSE x86-64 box.
03:26:47 <wli> ghci included
03:27:09 <wli> Where ghci was the point of the exercise.
03:27:17 <dcoutts_> and it worked?
03:27:28 <wli> there were a number of attempts that didn't work
03:27:51 <wli> I think most of the problems were centered around invoking external things like gcc/ld/etc. wrongly
03:28:12 <wli> they're still not 100% cleaned up, I have to use shell script wrappers to pass the -m32 etc. options
03:28:33 <wli> The cases where the wrappers weren't enough I finally pinned down, though.
03:28:44 <dcoutts_> you can add -m32 to the ghc_extra_opts of package base
03:28:54 <wli> It wasn't enough.
03:28:57 <musasabi> JohnMeacham: what parts of the code are you actively working on? (So I will look into other things and not do overlapping stuff)
03:29:15 <wli> Or at least I remember finding some obviously canonical place to throw in options and it not being enough.
03:31:14 <wli> It's hard to believe the x86-46 ghci isn't there yet; x86-64 just doesn't have so many relocation types that it hurts to implement the linking.
03:31:37 <wli> Not that I understand a single line of Linker.c
03:31:51 <dcoutts_> wli, me either!
03:32:08 <wli> I don't know what it is about linker writers.
03:32:12 <wli> Or at least the opensource ones.
03:32:25 <wli> (I've seen closed-source linkers that were comprehensible.)
03:32:48 <wli> libbfd, Linker.c, etc. etc.
03:33:08 <wli> The NT DLL loaders for e.g. video players, too.
03:33:23 <dcoutts_> I'm looking forward to the demise of Linker.c in favour of using the standard dl and haskell packages as .so files
03:33:57 <wli> Such a simple task as walking over binary data and following the directions given by the various tables etc. obfuscated to degrees unparallelled in any other field of programming.
03:34:14 <dcoutts_> :-)
03:34:51 <wli> And bizarrely the commercial equivalents are completely immune to whatever phenomenno this is.
03:35:06 <wli> The two I've seen, that is.
03:37:35 <wli> The only ghci porting threads I can find are the ones where I bitched about the things being broken on sparc64.
03:38:28 <wli> /usr/lib/ghc-6.2.2/include/config.h:1047:1: warning: "PACKAGE_VERSION" redefined
03:38:29 <wli> In file included from <command line>:24:
03:38:29 <wli> gtk2hs-config.h:88:1: warning: this is the location of the previous definition
03:38:36 <wli> dcoutts: there's the redefinition error
03:38:44 <wli> er, warning
03:38:48 <dcoutts_> wli, yes, don't worry about it
03:39:21 <JohnMeacham> I am still getting rid of the vestiges of FrontEnv.Env
03:39:38 <JohnMeacham> I made an informal todo list on the Jhc page of the wiki.
03:39:50 <dcoutts_> it's because hsc2hs #includes ghc's autoconf-generated config.h and we include our own and so some things clash, but nothing that maters
03:40:05 <JohnMeacham> feel free to add stuff. it is not very complete.
03:43:05 <JohnMeacham> I just added the full contents of my local todo list.
03:43:23 <JohnMeacham> http://haskell.org/hawiki/Jhc
03:43:23 <wli> I was thinking about learning how to do graphics stuff...
03:44:19 <dcoutts_> wli, learing gtk(2ha) is not so hard
03:44:33 <dcoutts_> ha/hs
03:45:09 <wli> dcoutts: Well, I had more in mind stuff like dumping physical models etc. onto screens rendered etc.
03:45:19 <musasabi> JohnMeacham: currently I am looking at Relation..
03:45:50 <wli> dcoutts: I'm not sure general windowing is mathy enough to hold my interest.
03:45:52 <JohnMeacham> ah. it is just used for mutually recursive module exports.
03:46:20 <dcoutts_> wli, we had one person do a ray tracer, it used the Pixbuf support to display stuff in a gui and from there to save to png/jpeg etc
03:47:33 <wli> dcoutts: could be interesting
03:47:44 <dcoutts_> he had a function that generated a list of colors and then with a little glue code we stuff that into a Pixbuf which can be displayed or otherwise manipulated
03:48:26 <wli> I've been looking mostly at hopengl (gtk2hs is mostly for hircules, which I wanted to try out)
03:48:35 <dcoutts_> is it bitmap or vector or 3d you'd need?
03:48:44 <dcoutts_> oh, 3D stuff
03:49:08 <wli> by and large I've been farting around with surface models
03:49:15 <wli> not getting very far
03:49:30 <dcoutts_> gtk+hs had hOpenGL support but we've not ported it to gtk2hs yet
03:50:06 <dcoutts_> it's on our todo list along with cairo support
03:50:58 <JohnMeacham> there. no more FrontEnd.Env.
03:56:37 <Palle> Hi Dabian : )
03:56:38 <wli> anyway, the stuff I've been farting around with has been attempts to use piecewise iplicit cubic and quadric surfaces
03:56:48 <Dabian> Are you Paltas?
03:56:55 <Dabian> ;-)
03:57:06 <Palle> Dabian, Forgot to kill my client in Odense.
03:57:11 <wli> e.g. pieces like x^t A x + <b,x> + c = 0
03:57:37 <wli> where x = (x1, x2, x3) etc.
03:58:09 <wli> The idea being that you can test intersections with lines and planes using conic section gunk and/or elliptic curve gunk.
03:58:25 <Palle> wli, lol! I've just made such a assignment
03:58:34 <Palle> just only with lines.
03:59:20 <Dabian> Haskell is crazy :)
03:59:22 <wli> Palle: hmm, this has stymied me for a while, maybe you know an answer. How does one get consistent equations for the coefficients from a triangulated set of points etc.?
03:59:33 <Palle> It was just a very special version, about using a AVL tree..
03:59:59 <Dabian> I think elib 1.0 provides avltree.el
04:00:02 <wli> (I actually had my heart set on the cubic variation of this.)
04:00:13 <Palle> -- If minx we insert, if maxx we delete else we preform a rangeSearch
04:00:13 <Palle> sweepLine :: [ListEntry] -> AVL [Char] -> [(SegID, SegID)]
04:00:13 <Palle> sweepLine [] d = []
04:00:13 <Palle> sweepLine ((x, segid, LMinX, y, _):ls) d = sweepLine ls (insert (y, segid) d)
04:00:13 <Palle> sweepLine ((x, segid, LMaxX, y, _):ls) d = sweepLine ls (delete y d)
04:00:14 <Palle> sweepLine ((x, segid, LX, y1, y2):ls) d = getSegID segid (rangeSearch y1 y2 d) ++ sweepLine ls d
04:00:47 <Palle> properly not the same method we are speaking about, finding the intersection lines
04:01:20 <Palle> Dabian, The craft of functional programming
04:01:20 <Palle> :)
04:01:35 <wli> Palle: Well, I don't have so many problems with the e.g. intersection methods since those were thought through up-front, but rather, when I have a surface whose pieces are composed of these things, how to get useful equations for the coefficients.
04:02:13 <wli> vs. inconsistent or underdetermined equations.
04:02:56 <Palle> wli, your level of mathematics is properly higher than mine, so I properly don't have a solution
04:03:12 <wli> I actually can't figure out how to cope with any surface model apart from piecewise planar surfaces.
04:03:20 <wli> Because of that single issue.
04:04:25 <wli> I have other, worse issues, like I've never gotten useful interaction of a surface model with a rendering scheme (output) or any kind of successful model of a real world object (input), but I'm holding out until I can do the basic parts before trying to deal with those issues.
04:05:20 <musasabi> JohnMeacham: btw when reading jhc code should I add haddock comments to it (no real hassle when I am working on understanding what different parts do) ?
04:06:50 <wli> palle: ANyway, for the cubic part, the intersection with a plane is particularly pretty; elliptic curve bits allow you to parametrize the curve of intersection outright.
04:07:17 <skew> musasabi: maybe lhs comments would be better for describing the code
04:07:23 <JohnMeacham> Sure. that would be great.
04:07:35 <wli> Palle: This is the captivating bit that has me hooked on this thing.
04:08:39 <musasabi> skew: the source is not literate, and personally I like haddock better ;)
04:08:40 <wli> Palle: (This isn't anything deep per se, just reusing someone else's theorem I happen to know offhand, and then plug-and-chug with the formulae.)
04:09:23 <Palle> wli e.g. pieces like x^t A x + <b,x> + c = 0
04:09:23 <Palle> wli where x = (x1, x2, x3) etc.
04:09:29 <Palle> but this is actually the problem?
04:09:42 <skew> musasabi: I think they have different purposes. Haddock is far better for documenting public interfaces, but I like lhs for following along and explaining complicated details, motivation, all that kind of stuff
04:09:54 <TFK> Hmmm. I thought I fixed the empty lines problem...
04:09:57 <wli> Palle: each piece is meant to cover a triangle in the triangulation of the sample points of the surface.
04:12:09 <musasabi> skew: yes, but on the other hand that does not help for documenting interfaces.. But now away for lunch.
04:12:24 <Palle> but what you wrote up seems like determin the roots from a n-degree polynomia?
04:12:52 <Dabian> this is way to mathematical for me.
04:12:53 <malcolm> TFK: I tested your PasteBin, and what appear to be empty leading and trailing lines are actually due to the output of hscolour getting truncated.
04:12:58 <Dabian> Mathematics suck. :)
04:13:07 <wli> Palle: that's the quadratic case, and it's a surface, degree 2, 3 variables, 1 constraint
04:13:13 <wli> (or a variety)
04:13:29 <Dabian> Programming is the mathematics of 21st century, except that it does not suck. :-)
04:13:32 <Palle> ah and elippisic there is the problem?
04:13:50 <Palle> I'm glad that I only need a course in Discrete Mathematics and Linear Algabra.
04:13:58 <TFK> malcolm, hmmm. why does it get truncated?
04:14:14 <Dabian> I will post unsolicited links:
04:14:18 <Dabian> http://www.politiken.dk/media/grafik/4067.gif
04:14:37 <wli> Palle: Not the ellipse, no. It's figuring out what the coefficients (the matrix A, the vector b, and the scalar c) should be from the triangular mesh.
04:14:50 <Palle> Dabian, hahaha! :)
04:15:16 <Palle> wli, aha!
04:15:21 <malcolm> TFK: don't know.  Maybe something to do with running it as a separate process, with the consequent issues of flushing pipes and all that.
04:15:29 <wli> anybody remember how to do subscripts and superscripts in HTML?
04:15:43 <Dabian> Palle: :)
04:15:45 <TFK> Well, in my tests it worked fine. Can you tell me how to replicate the problem?
04:15:46 <df_> debian :: care to translate into english?
04:15:51 <Palle> wli, but it seems like a Math problem, not a haskell programming problem
04:15:58 <Dabian> df_: Will german do?
04:16:11 <Palle> df_, Mathematics Genuis: Virgin his entire life
04:16:33 <Palle> First singer in a avarage rockband = 300 woman per. year
04:16:36 <Palle> Justice?
04:16:41 <Palle> --
04:16:48 <wli> Palle: Not really math, more like graphics/physics/etc.
04:16:50 <Dabian> Matematisches geni, jungfrau fuer dass ganze leben
04:16:55 <df_> hehe
04:17:11 <df_> ta palle, debian
04:17:14 <Palle> Mathematics genuis by his life worsest equation.
04:17:20 <wli> Palle: Something of an arbitrary design decision to be made for the "most pleasing" results.
04:17:27 <malcolm> TFK: have a look at 6.html generated by your PasteBin (I can't remember the URL)
04:17:36 <wli> Who's this? Erdos?
04:17:40 <Palle> wli, I'm only C.S. student :(
04:17:42 <Dabian> df_: The unterscrift sagt :  A mathematican facing the most diffecould equation of his life. ;-)
04:17:43 <TFK> Yeah, I did (that's why I was puzzled :-)
04:17:58 <wli> Palle: Well, the graphics people supposedly figure out how to do this.
04:17:59 <Palle> df_, properly a better translation :)
04:18:16 <Palle> wli, Really.. seems mutch more of science for these people :)
04:18:20 <wli> Palle: The notion is to cook up a "new" surface model so ther eisn't an answer to this floating around.
04:18:29 <wli> Palle: That I know of, anyway.
04:18:33 <TFK> Well, at least re-pasting it worked.
04:19:08 <wli> Palle: Not at all, checking out Chris Hecker's talks on conference schedules discovers graphics geeks banging out partial diffeq solvers to better simulate splashing water etc.
04:19:15 <malcolm> TFK: There are about 20 lines missing from the output.
04:20:05 <malcolm> TFK: I suggest you find a largish chunk of haskell code (say hscolour itself?) and try that out - see if it all appears, or if some gets truncated.
04:20:16 <wli> Anyway, the implicit cubic curve has 20 degrees of freedom.
04:20:25 <wli> er
04:20:29 <wli> implicit cubic surface
04:20:30 <Philippa_> wli: no kidding, the hard part a lot of the time is making all the hacks interoperate...
04:20:31 <Palle> wli, but it's still hard mathematics .. but well yes..
04:20:48 <Philippa_> Palle: it's mostly-solved mathematics, you go looking for what other people've done for you
04:20:52 <malcolm> TFK: I suspect it may be that only one buffer-full (4096 chars) gets through.
04:20:56 <Palle> wli, Are you studying mathematics since you got into such a trouble?
04:20:56 <wli> Palle: nah, no new discoveries
04:20:57 <TFK> malcolm, oh... hmmm, OK, I will try that.
04:21:27 <Philippa_> wli: right. Chris Hecker may be a big name but he's the first to point out all he did was popularise age-old material
04:21:39 <wli> Palle: I studied mathematics in school, graduated about 5-6 years ago, etc.
04:22:00 <Palle> wli, Okay. At collage/university i guess?
04:22:20 <wli> Palle: Yes. I've mostly been looking at 1890's-era material for useful bits to scavenge.
04:22:40 <JohnMeacham> musasabi: if you are submitting documentation update patches, could you also delete all whitespace at the end of lines? I forgot to filter everything in the initial import. for these doc/cleanup patches it is best to not touch too many files in the same patch to avoid spurious conflicts with other patches that need to touch multiple files.
04:23:06 <wli> Philippa: Any thoughts on the piecewise implicit cubic surface issue?
04:23:13 <JohnMeacham> :%s/  *$//  in vim will do it. don't bother with files you arn't editing anyway.
04:23:31 <Philippa_> wli: sadly not, it's a long time since I was doing graphics vaguely seriously myself :-(
04:23:55 <wli> That reminds me, I should go back to the p-adic surd simplifier at some point.
04:23:56 <Philippa_> well, I might have if I were walked through it bit by bit, but my brain's been a bit slow the last few weeks
04:25:02 <wli> Philippa: I haven't gotten far enough (embarrassingly, in something over a year) for there to be anything to walk over. Cover each triangle with an implicit cubic surface (3 vars, degree 3) and somehow get equations for the coefficients. I've never figured out how to get the coefficients out of a triangular mesh.
04:25:57 <Cale> It's somewhat interesting to see someone obviously completely new to programming (using wordpad to edit haskell source files) investigating the list monad :) (referring to haskell-cafe posts)
04:26:19 <Palle> wli, Which mathematicans/subject is interestning in 1890, I can only think of De'Morgan and Ada, but it's a bit earlier.
04:26:20 <wli> (the implicit cubic surface looks like C1*x**3+C2*x**2*y+C3*x*y**2+C4*y**3+C5*x**2*z+C6*x*z**2+C7*z**3+C8*y**2*z+C9*y*z**3+C10*x*y*z+C11*x**2+C12*y**2+C13*z**2+C14*x*y+C15*x*z+C16*y*z+C17*x+C18*y+C19*z+C20=0)
04:26:25 <TFK> Hmmm, hbin code x3 makes hbin.exe not terminate.
04:26:29 <wli> Palle: Try Ramanujan.
04:26:29 <Cale> Well, I suppose it's possible that they're new to windows.
04:26:56 <JohnMeacham> Yeah, I spent a lot of time de-literating the hatchet source to use in jhc. please don't reintroduce lhs files.
04:27:00 <Philippa_> wli: what's the purpose in this particular case?
04:27:04 <wli> (and Lebesgue, Brouwer, Whittaker, Watson, et al)
04:27:13 <Philippa_> is there a reason that eg some flavour of subdivision surfaces won't work?
04:27:37 <Philippa_> (eg you need an equation)
04:28:06 <wli> Philippa: It's supposed to be a flavor of such, so you e.g. do your mesh refinement based on these cubic surfaces.
04:28:10 <malcolm> JohnMeacham: Why not just { for file in *.lhs; do unlit $file >`basename $file .lhs`.hs; done }
04:29:40 <JohnMeacham> I could have used that advice about 3 years ago :)
04:29:56 <wli> Philippa: The hope is that the refinement can be done in larger steps with the high degree, so instead of doubling the number of points one chops them up into e.g. 256 pieces in one shot.
04:30:13 <JohnMeacham> The unlit tool I had at the time stripped the comments rather than turning them into hs-style comments.
04:31:07 <JohnMeacham> and it wasn't really a lot of time. I just periodically did one file I happened to be editing. But yeah, I am trying to haddockize the source. 'make hsdocs' will create haddock docs for everything.
04:31:17 <TFK> Yup, it doesn't terminate for any longish code...
04:31:52 <wli> Philippa: The reason why I think it's vaguely plausible is because I've got an analytic attack on how to do intersections with planes etc. for cutting corners.
04:31:58 <Philippa_> wli: fair enough. My brain's definitely in first gear today, sorry
04:32:04 <malcolm> JohnMeacham: If you had the source to unlit, I'm sure it would have been easy enough to generate comments instead of discarding documentation.  Water under the bridge I suppose.
04:32:16 <skew> I'm looking over the lhs2TeX documentation trying to figure out how to mix lhs and Haddoc comments
04:32:59 <wli> Philippa: And the "special functions" involved are actually cheaper than trigonometric functions to compute, there are "AGM methods" that converge quadratically (numerical sense, the error squares at each iteration).
04:33:21 <JohnMeacham> yeah. it wasn't really a decision. if I even sat down intent on converting the lhs files to hs I would have done that. but it just sort of happened every now and again when the lhs files anoyed me...
04:33:32 <Philippa_> wli: cool
04:34:17 <wli> I just need to redo this so I'm not actually using the trig functions as subroutines. =)
04:34:20 <Dabian> df_: Are you from switcherland?
04:34:43 <Dabian> df_: (Just a random guessing)
04:36:05 <Palle> Dabian, Bist du froh, bei deutsch sprechen?
04:37:05 <df_> England
04:37:23 <wli> oh, yeah
04:38:05 <wli> I spent most of this time farting around with using an underdetermined system of equations and using the remaining degrees of freedom for minimizing curvature.
04:38:42 <wli> (where the sense of this is varied in attempts to get it rammed though)
04:39:09 <wli> L62 norm of Gaussian and/or Riemannian curvature across the thing, etc.
04:39:17 <wli> feh
04:39:21 <wli> L^2 norm that is
04:40:06 <wli> and similarly farting around with the analogue for fitting plane curves.
04:41:12 <wli> So that's what I've been doing wrt. graphics.
04:41:45 <wli> minimax curvature is probably the most interesting
04:49:43 <JohnMeacham> wli: not sure if it is relevant, but you might find my adaptive simulated annealing code in haskel interesting. it can max/minimize (pretty much) arbitrary haskell functions. even ones using algebraic data types in their domain.
04:50:03 <JohnMeacham> http://repetae.net/john/recent/out/HsASA.html
04:50:07 <JohnMeacham> it is pretty raw though...
04:50:58 <wli> JohnMeacham: Sounds useful for some other things, though this particular one needs some kind of analytic solution.
04:51:15 <wli> JohnMeacham: (or an analytically-derived fast approximation)
04:51:44 <JohnMeacham> ah.
04:52:23 <JohnMeacham> a trickier problem :). but at least you know when you solved it and don't have to say "seems close enough." :)
04:52:24 <wli> (the second of these is really always the case because the analytic solutions are rarely directly computable in terms of hardware instructions)
04:53:56 <musasabi> back.
04:53:56 <wli> JohnMeacham: The L^2 norm is particularly attractive from the standpoint that discontinuities in/around absolute value signs and odd behavior of maxima to be minimized disappear, but is still rather badly bahaved.
04:54:40 <musasabi> JohnMeacham: ok, I'll try to do them file-by-file.
04:58:38 <wli> let me set up an implicit cubic spline and show what goes wrong
04:58:54 <wli> (a curve instead of a surface, the surface has a lot more issues)
05:00:31 <Palle> GHC rocks! :)
05:01:20 <xerox> Palle!
05:02:12 <Palle> xerox, ? :)
05:02:27 <xerox> Hi :)
05:02:35 <Palle> Hi, how are you?
05:02:49 <xerox> Fine, just woke up.. :-)
05:03:25 <Palle> xerox, about the same here. :)
05:03:48 <xerox> How's code?
05:03:49 <Palle> I take every opportunity i can to sleep after noon
05:04:02 <Palle> xerox, Just started doing some real things with GHC.. :)
05:04:23 <xerox> Nice to hear!
05:04:26 <wli> 10 coefficients, 9 actual degrees of freedom (there is "scale invariance", any scalar factor may be eliminated from the coefficients, so normalize the 10-vector to L^2 norm 1).
05:04:53 <Palle> xerox, I've been taking a university course in haskell, but it seems pretty useless with hugs, and then i spotted GHC :)
05:05:45 <xerox> What are you doing?
05:06:32 <Palle> Just try to get started with some simple IO :)
05:07:24 <wli> zip [0..] [1.01281,0.98363,0.96452,0.94536,0.90716,0.95065,0.93860,0.90430,0.86965,0.85264,0.85417,0.89685,0.93795,0.92058,0.90833,0.89289,0.87463,0.85306,0.86155,0.90248,0.91183,0.90521,0.88784,0.89198,0.88335,0.87073,0.87692,0.88612,0.91695,0.95626,0.99308,0.97781,0.98081,0.98134,1.00105,1.01859,1.06260,1.07833,1.07985,1.08621,1.15651,1.16755,1.13621,1.11477,1.12684,1.17148,1.17211,1.22918,1.26263,1.26478,1.22626,1.19851,1.20110,1.21466,1.22717,1.21998,1.22258,1
05:07:31 <wli> feh
05:07:50 <wli> http://holomorphy.com/~wli/euro-vs-usd.txt
05:08:49 <Palle> Is it possible to get commandline arguments?
05:09:12 <wli> System.getArgs
05:09:15 <Palle> hawiki didn't have any results
05:10:10 <skew> Palle: http://www.haskell.org/ghc/documentation.html
05:10:35 <skew> Hierarchial Libraries tells you about everything that comes with GHC
05:11:40 <nlv11757_> deciding on demo deadlines is always productive
05:12:25 <nlv11757_> deadlines get you going
05:15:26 <wli> So, now time for continuity constraints...
05:16:06 <Palle> wli, thanks
05:16:13 <Palle> skew, and thanks
05:16:13 <Palle> :)
05:19:23 <wli> Anyway, implicit differentiation reveals continuity constraints to be rather nightmarish.
05:20:35 <TFK> I should close all open handles before returning from some file i/o function, right?
05:20:50 <musasabi> yes.
05:21:09 <nlv11757_> of those handles are on the function scope
05:21:16 <musasabi> ghc-6.4 no longer closes all handles when the program exits.
05:21:21 <wli> So 4th-order continuity pins down the interior intervals.
05:21:22 <TFK> really?!
05:21:27 <musasabi> that means that unflushed data can be lost.
05:21:36 <nlv11757_> if the handle is a parameter it depends on the semantics of your function
05:21:38 <musasabi> if you don't flush/close.
05:21:56 <Lemmih> Greetings, JaffaCake.
05:21:56 <TFK> Hmmm.
05:22:09 <dcoutts_> musasabi, it's part of a really thorny problem with finalisers and garbage collection
05:22:10 <JaffaCake> afternoona all
05:22:13 <wli> third-order implicit derivatives crash maple
05:22:14 <TFK> I've read that I can't trust the GC on closing files, but I didn't know it wouldn't close them even on termination.
05:22:16 <nlv11757_> gd afternoon
05:23:03 <skew> TFK: well, the handles always go away when the program dies.
05:23:15 <TFK> <musasabi> ghc-6.4 no longer closes all handles when the program exits.
05:23:27 <TFK> o_O?
05:23:56 <dcoutts_> skew: right, the OS closes the files but user space does not necessarily flush first
05:24:05 <skew> I mean it's not like your program will leak file descriptors off the computer
05:24:06 <wli> you get six degrees of freedom left over from the endpoints
05:24:17 <TFK> Hmm, OK, thanks.
05:24:35 <TFK> Heh, can't map hClose to a list of handles o_O
05:24:37 <wli> Now you're in real trouble.
05:24:49 <skew> some of the data you wrote might go away too
05:24:56 <malcolm> TFK: mapM_ hClose handles
05:24:56 <wli> Minimax curvature hurts, badly.
05:25:06 <TFK> ah, thanks
05:26:47 <TFK> Hmmm.
05:28:00 <JohnMeacham> TFK: Personally, I think that is a bug. all files should be closed on exit just like C does.
05:28:12 <TFK> (Or Python does)
05:29:14 <TFK> is hGetContents lazy?
05:29:54 <skew> yes
05:30:03 <skew> it leaves the handle in a wierd state
05:30:06 <TFK> How can I make it strict?
05:30:19 <wli> JohnMeacham: I wrote a multivariate polynomial lib and Grobner basis solver to help out with stuff like this.
05:30:22 <TFK> Or is there a strict lookalike?
05:31:09 <skew> I don't think you would want to make reading stdin strict. For the rest, you know where the docs are, right?
05:31:50 <TFK> I am browsing System.IO, but the word "strict" doesn't appear there.
05:32:29 <JohnMeacham> sequence (repeat getChar) - but I wouldn't recommend it. Why do you think you want it to be strict? a fully expanded haskell list takes up a whole lot of memory.
05:32:35 <musasabi> All files *are* closed, they are just not flushed.
05:32:41 <wli> JohnMeacham: http://holomorphy.com/~wli/Poly.hs
05:32:48 <TFK> Besides, I'm not reading from stdin, but from an output stream from runInteractiveProcess.
05:32:59 <TFK> Which means that I know what I'm doing. Kinda.
05:33:01 <JohnMeacham> wli: interesting.
05:33:13 <musasabi> a non-lazy hGetContents variant would be very nice..
05:33:45 <TFK> you want to tell me there isn't any?
05:33:51 <musasabi> currently one just does str <- hGetContents; status <- length str `seq` waitForProcess ...
05:33:55 <xerox> Uh-oh. gedit does Haskell synhl!! O_O
05:34:00 <TFK> Oh.
05:34:04 * TFK tries that
05:34:16 <TFK> Err, what does that do? o_O
05:35:03 <TFK> oh, I get it.
05:35:11 <TFK> Why length, though?
05:35:17 <wli> JohnMeacham: I think that one's set up to do some nonstandard variant on rational splines.
05:35:44 <JohnMeacham> musasabi: I still consider it a bug they arn't flushed though :)
05:35:53 <musasabi> JohnMeacham: dependencies for FrontEnd/ParseUtils.o FrontEnd/Lexer.o don't seem to be correctly generated into depend.make.
05:36:17 <nlv11757_> in what timezone is berckeley?
05:36:37 <musasabi> JohnMeacham: consider the case where the RTS is exiting due to a deadlock trying to evaluate a string that should be writting to a handle...
05:36:40 <nlv11757_> GMT - 7 or something like that
05:36:53 <JohnMeacham> Yeah, there is something odd about it. ghc is suposed to follow dependencies when using dependency generation, but it seems to miss a lot so I use the 'find' statement. I am not sure if it is a bug in ghc or I am doing something wrong.
05:37:09 <musasabi> adding them manually just works though.
05:37:38 <Philippa_> TFK: length's sort of the minimal function that evaluates the entire list/string
05:38:03 <Philippa_> anything less runs a risk of being optimised to a constant
05:38:14 <JohnMeacham> the C library doesn't flush the buffers on segfault either. (which seems like a similar error condition). but on normal program exit it does. a standard 'atexit' like function in the libraries would be nice.
05:38:27 <TFK> I don't think I need seq, then.
05:40:11 <malcolm> TFK: Of course, the simplest solution would be not to fork off a separate process in the first place - just snip the bits of hscolour you need and call them directly within your own program.
05:40:15 <skew> JohnMeacham: what is the problem with dependency generation?
05:40:31 <skew> JohnMeacham: I remember needing to point it at the right directories with -i -I
05:40:42 <TFK> I would like to keep it extensible. An external process seems the best way for this.
05:41:07 <Philippa_> TFK: you need seq if you want to've made sure you load the lot before you continue processing
05:41:48 <Philippa_> I mean, you /could/ do something else hacky to make length evaluate first, but that's even ickier and at least the seq version's a known idiom
05:41:51 <TFK> Hmmm.
05:42:02 <JohnMeacham> skew: I am not sure exactly. perhaps I left out a -i..
05:42:04 <Philippa_> otherwise the IO's lazy
05:42:51 <skew> JohnMeacham: If I remember correctly it doesn't try to turn Parent.Module into ./Parent/Module.hs like e.g. javac
05:43:17 <musasabi> TFK: here is a minimal case doing it http://repetae.net/cgi-bin/darcs.cgi/jhc/FilterInput.hs?c=annotate
05:43:51 * theorbtwo wonders if somebody that has grepable logs of this chan would mind tellling me when autrijus was sketching out a plan for Evalable?
05:44:07 <TFK> musasabi, thanks, will look into it
05:44:43 <musasabi> If you need something more complex then I suggest at looking at MissingH - that is where I got my ideas on how to do things correctly.
05:44:50 <nlv11757_> google usually reveals this channels isnt it theorbtwo?
05:45:55 <theorbtwo> Doesn't look that way to me, nlv11757_.
05:46:03 <malcolm> theorbtwo: http://meme.b9.com/
05:47:16 <TFK> musasabi, my current problem is to get hscolour to terminate at all. At first I thought this is a matter of closing input/output/error streams properly, to leach all the output. Apparently it isn't.
05:47:19 <nlv11757_> theorbtwo, "autrijus Evalable" in google gives me the first link
05:47:36 <Philippa_> try "#haskell log"
05:47:41 <nlv11757_> "journal of autrijus"
05:47:55 <theorbtwo> That gives me his journal.
05:48:02 <theorbtwo> I want the actual conversation that took place here.
05:48:13 <TFK> Hmmm.
05:48:21 <nlv11757_> owwww
05:48:23 <Philippa_> malcolm's already given you a link
05:48:23 <theorbtwo> Found the meme search just after I asked here, but oddly it doesn't find me anything.
05:48:24 <nlv11757_> sry
05:48:24 <Philippa_> use it
05:48:35 <nlv11757_> i thought you were just interested in the date
05:48:37 <dcoutts_> TFK: or just sod it and import hscolour's modules directly, it's not a lot of code (I'm working on it atm)
05:49:16 <TFK> dcoutts_, (1) it would be nice if Hbin would be extensible. (2) popen is a good thing to know to do properly.
05:49:44 <dcoutts_> (1) Hbin? (2) true
05:50:30 <TFK> (1) ...is what I'm working on. (2) yup.
05:51:14 <theorbtwo> AH!
05:51:31 <theorbtwo> There are two ells in the middle of Evallable, at least when autrijus is spelling it!
05:51:48 <theorbtwo> (And I should have thought before to read the whole day referred to in that journal entry.
05:51:58 <TFK> I think the problem is this. If I do not close out, then hscolour doesn't terminate on large input. However, if I do close out, then there is no output at all. This is why I was wondering about strictness.
05:54:00 <TFK> Interestignly enough, waitForProcess means that it waits until hscolour terminates, which it doesn't. I'm closing the in stream to hscolour beforehand, it it matters.
05:55:43 <TFK> (all this on large input - malcolm suggested that this happens because only the first buffered chunk gets through)
05:59:09 <malcolm> TFK: Ah!  light dawns.  You need to add "hFlush stdout" to the bottom of main in hscolour.
06:01:40 <TFK> stdout? o_O
06:01:45 * TFK does that
06:01:53 <TFK> Oh.
06:02:02 <TFK> :-D
06:04:09 <TFK> sorry, what were the flags needed again? ghc --make --cpp and there was a third one you suggested...
06:04:48 <malcolm> TFK: You'll need "import IO" as well.  ghc --make -cpp -ffi
06:05:13 <TFK> sankyu! let's see how it works out
06:10:29 <JohnMeacham> I wish there were a standard project containing QuickCheck rules to test everything specificed in the Haskell Report.
06:10:45 <JohnMeacham> It would make regression/conformance testing much easier.
06:12:17 <JaffaCake> JohnMeacham: you might want to try hooking up GHC's regression suite to jhc
06:12:26 <JaffaCake> it runs with Hugs these days
06:15:35 <TFK> Hmm, can't I put a normal function call after a case/where statement? I'm getting a parse error, of all things.
06:15:37 <JohnMeacham> I'll take a look at it. so far, nofib has been a pretty good regression suite.
06:15:56 <JaffaCake> nofib doesn't test the dark corners :)
06:16:07 <JaffaCake> do you have FFI?
06:16:13 <JohnMeacham> Yup.
06:16:24 <JaffaCake> neat
06:16:31 <JohnMeacham> calling C from haskell, but not calling haskell from C. not any technical reason. it just hasn't come up yet.
06:16:53 <JaffaCake> adjustor thunks are fun
06:16:58 <basti_> hi
06:17:19 <JohnMeacham> Yeah. I might have to give up my 100% portable generated C claim if I implement those :)
06:17:34 <malcolm> TFK: hFlush stdout goes after the last case alternative, at the same indentation level as the 'where' keyword
06:18:00 <JohnMeacham> But I have done OS programming before, so it won't be completly strange territory.
06:18:15 <JaffaCake> you can probably crib from GHC's implementation too
06:18:19 <TFK> Hmm. But why can't it go after the case block entirely? Or is that simply illegal?
06:19:14 <JaffaCake> I'm excited that we've got another Haskell implementation, and not just a toy one either
06:19:14 <malcolm> Eh?  It does go after the whle case block.  You just have to make sure the layout is correct.
06:19:29 <malcolm> JaffaCake: Me too.
06:20:04 <JohnMeacham> Heh. Yeah, part of my motivation for making the push to it being a 'real' compiler was I feared haskell might stagnate as a single-implementation language :).
06:20:08 <dcoutts_> JohnMeacham, I'd take JaffaCake's advice on that one, have you ever looked at ghc's Adjustor.c? You wouldn't want to re-implement that! You'd need to know far more about various chips and ABIs that you ever wanted to know.
06:22:34 <JohnMeacham> (not that I really thought that would happen.) but I do think multiple implementations with very different internal styles are a good thing. extensions which might be hard in one might be easy in other other, and only the best need be crossported.
06:23:39 <JaffaCake> yes, and I'm looking forward to racing against each other - we only race against ourselves these days, it gets pretty lonely :)
06:23:50 <TFK> http://haskell.org/hawiki/HaskellIrcPastePage <--- this is what I did originally. I'm not sure why I got that error.
06:23:52 <JohnMeacham> Yeah, I have seen Adjustor... no fun. perhaps we could seperate it out into a little bitty C library we can both link too.
06:25:12 <JohnMeacham> heh. well, GHC is going to win races for a while. its global transformations are a huge win and I won't be able to reasonably compete until I implement most of them.
06:25:56 <JaffaCake> you do global transformations, don't you?
06:26:46 <malcolm> TFK:  You can't put the function call after the 'where' block.  'Where' scopes over the entire definition above it.  You want to put the call just above the 'where' keyword.
06:26:50 <dcoutts_> JohnMeacham, it could probably be done in a more portable but slower way, by creating an extra mapping from C function pointers you've handed out to the corresponding StablePtr. So a call from C through one of these pointers would need to do a lookup in a hash table where as the Adjustor.c way creates a little bit of straigt line code so it's quick.
06:26:50 <JohnMeacham> Yeah, but don't have most of the ones ghc does. just a simplifier/inliner, basic strictness and some unboxing. no detection of one-shot lambdas or update avoidance yet.
06:27:40 <JaffaCake> don't worry, GHC's detection of one-shot is mostly missing, and we don't have any update avoidance at all
06:27:43 <TFK> malcolm, oh, I had no idea. Thanks. I'll need to read up on the lexical rules some more, then.
06:28:30 <JohnMeacham> I have found the interplay between the core and grin transformations interesting. I will find that a core optimization will actually signifigantly speed up the grin points-to analysis. It is why I don't have ' -O' option yet... it is actually slower if I turn off optimizations.
06:28:46 <basti_> is there any possibility of making a list of functions of different types?
06:29:05 <basti_> (and arities?)
06:29:22 <JaffaCake> slower if you turn off optimisations? that's the correct behaviour, isn't it?
06:29:32 <skew> JaffaCake: compilation time too
06:29:33 <JohnMeacham> I mean, the compiler takes longer.
06:29:42 <JaffaCake> ah
06:29:58 <JohnMeacham> Because a much more complicated program is presented to the points-to analysis.
06:30:08 <JaffaCake> because optimisation simplifies the program, making later stages quicker?
06:30:12 <JaffaCake> right
06:30:29 <JaffaCake> -O0 should turn off points-to, then!
06:30:47 <dcoutts_> basti_, bascially no. you've got to wrap them in some data constructor and if you want a not-fixed set of types you probably need to use exestentials
06:30:59 <TFK> Hmm. hscolour still doesn't terminate.
06:31:24 <JohnMeacham> heh, can't be done. the points-to is needed to get rid of all higher order functions and create the eval code.
06:32:00 <dcoutts_> "jhc the (always) optimising compiler"
06:32:01 <basti_> dcoutts_: hmmm i see, so its boilerplate template haskell again...
06:32:29 <JaffaCake> ok, I haven't read up on points-to
06:32:37 <Muad_Dibber> generic haskell.
06:32:52 <dcoutts_> basti_, using exesentials can often be a nice solution
06:32:57 <JaffaCake> how does it get rid of higher-order functions?  by specialising?
06:33:17 <JohnMeacham> Yeah, I am using Boquist's method of compilation. My core (based on the lambda-cube) is transformed into a first-order monadic form with _only_ statically known function calls.
06:33:24 <basti_> i did not fully understand existentials yet
06:33:54 <TFK> Welp, still the exact same behaviour.
06:34:07 <JaffaCake> Do you have any idea how that might scale to separate compilation?
06:34:18 <JohnMeacham> the points-to analysis determines at every eval point, all the possible things it can be pointing too, then inserts a simple case statement which scrutinizes the value and calls the appropriate function. pretty much all 'eval's only have a couple possible cases.
06:34:20 <Philippa_> basti_: they've got several uses, but an easy one is letting you write the type "something belonging to this type class"
06:34:51 <dcoutts_> basti_, it's very similar to the idea of OOP interfaces, you can put various supported values behind the interface but once you've done so you can no longer call an functions that rely on the specific type of the thing you stuck behind the interface
06:35:16 <basti_> hmmmmm
06:35:33 <basti_> whats the difference between "something belonging to this type class" and "Class a => a"?
06:35:52 <dcoutts_> basti_, all those 'a's have to be the same
06:36:02 <JohnMeacham> I have some ideas. right now it does seperate compilation of a sort, it creates 'haskell object' files. (ho) files whith contain the partially compiled code. I don't think I will ever be able to do seperate compilation at the .o object code level, but if I can move enough computation to the generation of the ho files, that should be good enough.
06:36:20 <Philippa_> basti_: consider a heterogenous list of things belonging to SomeClass
06:36:28 <JohnMeacham> sort of like having a custom haskell linker :)
06:36:29 <basti_> hmm
06:36:33 <basti_> i see.
06:36:43 <JaffaCake> right - I've seen other languages do that
06:36:43 <Heffalump> can you not generate .o by making some kind of worst-case open-world assumption?
06:36:46 <Philippa_> you need an existential constructor to allow that
06:36:55 <Heffalump> or do passing HOFs across the boundary stymie that?
06:36:56 * basti_ nods
06:37:11 <dcoutts_> basti_, Class a => Exists a. a  allows each of those 'a's to be different (but instances of that class) BTW that Exists a.a is not valid Haskell syntax
06:37:25 <JaffaCake> I believe the MS C compiler can generate object files of intermediate code
06:37:59 <Heffalump> ah, yes, it just dumps the p code into the .o, doesn't it?
06:38:00 <JohnMeacham> Also, after the worker-wrapper transform, the worker often has known calls with a strict interface, so in many cases it can probably be fully compiled. I plan to take advantage of that.
06:38:36 <JohnMeacham> Anything that moves thunk evaluation closer to thunk creation is good.
06:38:47 * basti_ will read about existential types, then
06:39:37 <dcoutts_> JaffaCake, the gcc people keep talking about doing something similar, with gcc -O4 it'd dump the intermediate represntation into a seperate section of the .o file and then if you use gcc to link everything then it'll have another go with some global optimisations
06:39:54 <JohnMeacham> There are also several papers out there on things like doing escape analysis with seperate compilation. some of those techniques might be usable, as they tend to use fixpoint iteration and abstract interpretation too.
06:40:54 <basti_> ahh, and "forall" is used because it's the dual to "exists" and on the other side of the -> ?
06:41:04 <dcoutts_> basti_, right
06:41:09 <df_> dcouttis :: -O4?
06:41:15 * boegel waves happily
06:42:12 <dcoutts_> df_, optimisation level 4, was what they were suggesting since they've already got useful meanings for -O1 -O2 and -O3
06:42:19 <JohnMeacham> The good results I was getting from my type class implementation were a complete surprise. I originally implemented it as a stopgap because I didn't feel like implementing dictionaries, but then I started seeing great results when looking at the intermediate code.
06:42:49 <df_> oh sorry, thought you were suggesting using it to compile something with, rather than a new propsoal
06:43:23 <Philippa_> any idea what you'll do for existentials? I imagine you end up with the dictionary passing scheme in the end
06:43:24 <dcoutts_> df_, I am a gentoo user, but no :-)
06:43:31 <JohnMeacham> After a little thought, it made sense. I was just moving the transformation grin does, turning higher order functions into case statements, up to the begining.
06:43:33 <df_> heh
06:45:01 <JohnMeacham> existentials are no problem, I just pass the type as another argument if it will be examined by a method call.
06:45:07 <Philippa_> fair enough
06:45:23 <JohnMeacham> or, I mean store the type in another slot of the data constructor.
06:45:31 * Philippa_ nods
06:45:33 <Philippa_> same difference, but yeah
06:45:41 <JaffaCake> right, I see
06:46:30 <Philippa_> had forgotten the global bit because I've been spending too much time thinking about doing silly dynamic stuff with hs-plugins recently :-)
06:46:37 <TFK> Are there any issues or subtleties around hPutStr?
06:46:49 <JohnMeacham> another strange thing, the standard encoding of data types as higher order functions and the equivalant data types actually eventually compile to the same thing under Grin. it was an interesting (if useless) surprise.
06:46:50 <Philippa_> TFK: buffering
06:47:04 <TFK> Philippa_, well, besides fluing the input.
06:47:04 <Philippa_> heh, cool
06:47:15 <Philippa_> not that I know of, then
06:47:28 <Philippa_> I guess possibly you might shoot yourself in the foot over encodings, but that goes for all the IO
06:47:47 <JaffaCake> heh, that makes sense I guess
06:47:50 <TFK> Plain ascii here :-)
06:48:19 <JohnMeacham> yeah. I briefly considered getting rid of data types alltogether when I saw that. briefly. :)
06:49:00 <TFK> Well, this is what I found out. "hPutStr inp code" will prevent hscolour from terminating, no matter what I close.
06:49:24 <Philippa_> do both inp and code terminate?
06:49:30 <Philippa_> (wherever they come from)
06:49:54 <TFK> inp is the input stream from runInteractiveProcess. code is just text.
06:50:33 <TFK> Weirder still, it only fails on large input (first buffered chunk?)
06:51:37 <malcolm> TFK: I think ghc had some weird problems with buffering across sockets that manifested as only the first buffer-full getting through.
06:51:44 <TFK> (and I added hFlush stdout to HsColour.hs, and recompiled, and all)
06:51:52 <malcolm> Can JaffaCake shed any light?
06:51:59 <TFK> You mean ghc is broken?
06:52:12 <TFK> :-P
06:52:22 <JaffaCake> I haven't read up the context - can someone fill me in?
06:52:31 <malcolm> I thought it had been fixed recently.
06:52:58 <TFK> How recently is recently? I grabbed the binaries for win32 a few weeks ago.
06:53:06 <JaffaCake> I don't recall that bug
06:53:22 <JaffaCake> buffering on sockets is block by default, if that's any help
06:53:23 <malcolm> OK, TFK is using runInteractiveProcess to write data from one haskell process to another.
06:53:34 <TFK> Hold on, I'll paste the code
06:53:48 * basti_ brain explodes on existentials
06:53:49 <JaffaCake> ok
06:53:55 <malcolm> For some reason, sending a large chunk of input means that the output is truncated.
06:54:14 <JaffaCake> interesting
06:54:23 <skew> basti_: were you trying to pattern match?
06:54:51 <JaffaCake> larger than a buffer's worth?
06:54:59 <basti_> hmm no i'm just trying to make sense of it
06:55:29 <basti_> for example, i can declare a "forall a b c.[a->b->c]"
06:55:32 <basti_> it doesn't make sense, though.
06:55:42 <xerox> A list of functions?
06:55:43 <malcolm> JaffaCake: yes, larger than a buffer's worth
06:55:51 <basti_> so i need to wrap what i want in a class
06:56:12 <basti_> i just don't see how i should wrap it...
06:56:50 <JaffaCake> TFK: you're writing into a large string into a pipe, and the program blocks at that point, right?
06:56:50 <basti_> I want (at some point in the distant future) to have a type of functions inside one type. That is, a, a->a, a->a->a etc.
06:56:54 <TFK> http://haskell.org/hawiki/HaskellIrcPastePage <--- disregard the placeholder return value
06:57:06 <TFK> JaffaCake, to a stream, yes.
06:57:13 <TFK> (Which is the same thing, I suppose)
06:57:23 <JaffaCake> it's probably because you don't have another process reading from the pipe
06:57:29 <basti_> hmm but "a" doesnt fit there.
06:57:35 <TFK> hscolour is reading the input.
06:57:37 <JaffaCake> the write will block until the pipe buffer is emptied
06:57:41 <TFK> It reads small inputs, doesn't it?
06:57:50 <basti_> so i'd need to have at least 2 constructors, "function" and "result" wouldnt i?
06:58:41 <TFK> Well, hscolour can handle large inputs from regular files.
06:58:45 <skew> basti_: try compiling something like data T = forall a. Show a => T a; f t = let (T x) = t in show x
06:58:49 <TFK> How can I solve this problem, then?
06:59:10 <skew> GHC gives the error "My brain just exploded."
06:59:23 <JaffaCake> if you change hscolor.exe to cat.exe, does it terminate?
06:59:35 <basti_> skew: hmm
06:59:37 <TFK> er? why cat?
06:59:54 <JaffaCake> I just want to make sure that the other process is reading the whole pipe contents
06:59:58 <basti_> skew: but that's not my problem. I see why this would fail.
07:00:10 <JaffaCake> I don't know what your hscolor process does
07:00:21 <TFK> Windows doesn't have cat.exe
07:00:29 <TFK> So it will give me a 500 error, I suppose.
07:00:33 <JaffaCake> oh, so it doesn't :)
07:00:46 <JaffaCake> do you have cygwin?
07:00:50 <skew> basti_: You were talking about your brain exploding and existentials too
07:00:52 <TFK> It's not *my* hscolour, it's malcolm's :-P
07:00:57 <basti_> ahh.
07:00:57 <skew> it works if you use a case, btw
07:01:00 <basti_> ;)
07:01:07 <TFK> Nope. But maybe gnuwin32 has a cat.exe somewhere.
07:01:08 * JaffaCake looks at malcolm
07:01:12 * basti_ nods.
07:01:15 <skew> why would you expect it to fail?
07:01:50 <basti_> because there is a "wacko point" in the let...
07:01:57 <malcolm> Well, I've already ensured that hscolour is flushing its output buffer before termination
07:02:00 <basti_> i mean there is one point where the "forall" has to be resolved
07:02:13 <JaffaCake> malcolm: but is it reading all the input?
07:02:21 <JaffaCake> I think that's the issue
07:02:23 <basti_> and this construction makes this happen inside let
07:02:34 <TFK> (Yup, I did compile with hFlush stdout.)
07:03:02 <malcolm> JaffaCake: I can't see why it wouldn't be.  Code is the next part down the page on the IrcPastePage
07:03:08 <JaffaCake> ah wait - I see
07:03:09 <skew> the forall would be resolved just fine by dictionary passing at runtime
07:03:33 <JaffaCake> You need to read the output too
07:03:39 <skew> and I see the types just working out if the rest of the code remembers that x is just some Show type
07:04:01 <TFK> JaffaCake, stuff <- hGetContents; return stuff doesn't make it terminate.
07:04:03 <basti_> hmm.
07:04:18 <malcolm> Yes, I think TFK does read the output.  There's another chunk of code from TFK a bit further down which does the reading.
07:04:30 <TFK> That code is just the most minimal example I could create that exhibits this behaviour.
07:04:54 <TFK> Yeah, only that flushing out instead of inp will get me no output :-P
07:05:20 <skew> maybe JaffaCake could explain the problem
07:05:43 <basti_> skew: then i do not see why this is a problem. hugs seems to be fine with it.
07:06:49 <JaffaCake> I think the problem is this: the server process is pushing lots of data to the client, and the client is pushing data back to the server via its stdout, but you have a deadlock: stdout is full, so the client can't write any more, and stdin is full so the server can't write any more
07:07:15 <JohnMeacham> Is the 'Boxy Types' imprecative typing being worked on in GHC HEAD?
07:07:21 <JohnMeacham> it seems very interesting.
07:07:23 <skew> basti_: I think that's a different problem :)
07:07:31 <JaffaCake> JohnMeacham: I think simonPJ is working on it, yes
07:07:42 <basti_> i do not think "my brain exploded" is a particularly ergonomic message, too.
07:07:47 <JaffaCake> skew: sorry, I'll get to yours later :)
07:08:10 <malcolm> JaffaCake: Thanks - that makes sense.
07:08:41 <JohnMeacham> cool. The whole nice, simple tying algorithm for rank-n types seems like an amazing advancement in languages. and Boxy types just makes a good thing better.
07:08:58 <TFK> Not to me, but perhaps the more important question is - how can I solve this problem?
07:09:14 <JaffaCake> TFK: ok, try this:
07:10:00 <JaffaCake> add 'forkIO (do s <- hGetContents out; length s `seq` return ())'
07:10:16 <JaffaCake> right after runInteractiveProcess
07:10:54 <basti_> wow
07:11:11 <TFK> You mean, forkIO (do hPutStr inp code; s <- hGetContents out; length s `seq` return ())
07:11:20 <basti_> i made hugs call a type variable "_8"
07:11:23 <TFK> *?
07:11:25 <basti_> never seen this before =)
07:11:29 <JaffaCake> nope, the hPutStr stays outside the forkIO
07:11:38 <TFK> Hmmm, OK, I'll try that.
07:12:14 <TFK> Won't that make me lose the ouput, though?
07:12:21 <JaffaCake> yes
07:12:30 <TFK> I don't want to lose the ouput.
07:12:42 <malcolm> Yes, I think you want forkIO (do s <- hGetContents out; length s `seq` return s)
07:12:49 <JaffaCake> alternatively... change hPutStr inp code to forkIO (hPutStr inp code)
07:13:19 <TFK> Ha! Just like the example said originally... the irony.
07:13:53 <malcolm> No wait, 'return s' won't make any difference at the end of the forkIO.  Better to fork the hPutStr inp as JaffaCake says.
07:16:03 <TFK> OK, so back to the threading question. Do I need to scrap them manually?
07:16:40 <TFK> Hmm, guess I don't have to with this one.
07:18:46 <TFK> Well, now hscolour won't terminate even on short inputs.
07:19:15 <malcolm> TFK: Let's see.  You'll need to close the inp handle to ensure that hscolour terminates, so forkIO (hPutStr inp code >> hClose inp)
07:19:50 <TFK> I'll assume that '>>' does the magic needed and try to do this :-)
07:20:55 <malcolm> TFK: It's just a desugared do notation.  (x>>y) is equivalent to do { x;  y}
07:21:23 <TFK> Great, it works now :-D
07:21:35 <TFK> Thanks JaffaCake, malcolm (again ;-)
07:22:04 <malcolm> It just shows that concurrency is difficult... :-)
07:22:05 <JaffaCake> you're welcome ;)
07:22:50 <TFK> It shows that I should've followed the example through, instead of guesstimating (wrongly) that blocking I/O will work :-/
07:23:10 <Philippa_> in other news, I'd like to complain at JohnMeacham mentioning boxy types - I'm having a hard enough time writing a paper without being pointed at other papers I want to read :-)
07:23:19 <Philippa_> (looks cool, but I'm putting off reading it, honest...)
07:23:42 <Dabian> df_: Ahh.. thats why you wanted an English translation! :-)
07:24:01 <Dabian> Palle: Well .. I don't really write german that well..
07:25:11 <JohnMeacham> I apologize. But in all fairness, I blame SPJ for writing the thing in the first place. :-)
07:25:56 <Philippa_> heh, fair enough
07:26:10 <Philippa_> he's stolen enough of my time that way :-)
07:28:09 <df_> dabian :: yes, i can grok the odd word in german / spanish / french / latin, but my foreign language skills suck.  from your image i managed to get mathematician, singer and rockband
07:30:14 <Dabian> df_: :)
07:30:38 <Dabian> df_: Very nice.  You were looking at a danish text. :)
07:30:55 <Philippa_> JohnMeacham: I'm attempting to write about a somewhat lesser achievement in type systems (one that's kind of implicit in a lot of the writeups of HM(X), for example), but having not written a paper before and not done any real work for a couple of years now I'm having difficulty getting started
07:31:02 <Philippa_> OTOH, today I've got further than a title. This is a good thing
07:32:44 <JohnMeacham> Philippa_: Well, that is better than me. I have yet to write a paper.
07:33:30 <autrijus> so, I threw together http://perlmonks.org/?node_id=450426 real quick
07:33:34 <autrijus> is there some obvious way to make it faster?
07:35:27 <Philippa_> JohnMeacham: a title, a couple of sentances and the start of some rather tedious code isn't much better IMO, but hey
07:35:46 <Philippa_> I've really got to get the hang of this though, or I've pretty much nothing to do when I finally succeed in graduating
07:37:02 <JohnMeacham> You could always write perl for a finance company. that is what I am doing at the moment.
07:37:49 <JohnMeacham> Which is probably a big part of the reason I need a suitably challenging hobby like writing experimental compilers for the language of the future.
07:37:50 <Philippa_> ouch. Though I suspect I'd rather that than being continually unable to work or study
07:37:52 * Philippa_ nods
07:37:58 <Philippa_> the hobby I'm envious of, mind
07:38:21 <Philippa_> I barely managed to pull off a toy interpreter for a cut down version with my type system extension
07:38:48 <JohnMeacham> feel free to submit code! or better yet, start another one, competition is good. ghc has been top dog way too long :)
07:39:47 <CosmicRay> JohnMeacham: btw, before you get too far along, I hope you won't be doing anything like the lame nhc98 practice of officially not supporting 64-bit archs :-)
07:41:05 <Palle> telnet.o(.text+0x25): In function `__stginit_Main_':
07:41:05 <Palle> : undefined reference to `__stginit_Network_'
07:41:05 <Palle> ...
07:41:14 <Palle> anyone have a clue on that error using ghc6?
07:41:14 <dcoutts_> JohnMeacham, re: talking about C-- and gcc eariler; it seems the difficulty is in gcc's internal support for tail calls.
07:41:34 <Philippa_> if I get round to rummaging in jhc's internals and feel comfortable enough to do so I'd be happy to submit stuff - in practice I suspect this won't happen though
07:41:45 <dcoutts_> JohnMeacham, Andreas Bauer wrote a thesis on this issue: http://home.in.tum.de/~baueran/thesis/
07:41:49 <dcoutts_> Compilation of Functional Programming Languages using GCC -- Tail Calls
07:41:57 * CosmicRay mumbles something about ginsu not yet being darcsified
07:42:42 <Igloo> Palle: You might want -package network or somesuch if not using --make
07:48:17 <JohnMeacham> I have a 64 bit machine :). I know jhc works on x86_64, i386, PowerPC and SPARC. in fact, the same generated C file will compile on all of them just fine. :) ultraportability was a goal.
07:48:19 <Palle> ahh thanks Igloo :)
07:48:51 <CosmicRay> JohnMeacham: excellent.
07:48:54 <malcolm> CosmicRay: I know, it's a pain about nhc98 and 64-bits.  A prior incarnation (nhc13) did support the alpha, but it was my fault that the ANSI-C bytecode backend I added didn't take it into account.
07:49:22 <CosmicRay> malcolm: bummer, one of my platforms is the alpha
07:49:29 <JohnMeacham> It seems that since nhc generates a bytecode, you would just need to write a portable interpreter/runtime..
07:49:33 <CosmicRay> in fact, all of my regular development machines is 64-bit
07:50:02 <Igloo> JohnMeacham: Can nhc98 compile jhc?
07:50:08 <JohnMeacham> dcoutts_: Yeah, I have read that. it is getting better though.
07:50:13 * JaffaCake likes amd64 a lot
07:50:18 <JohnMeacham> I don't think so. but I havn't tried it.
07:50:26 <JohnMeacham> I use several extensions.
07:50:26 <Igloo> Hmm, OK
07:50:27 <CosmicRay> JaffaCake: me too.  a very nice platform at a very nice price.
07:50:29 <malcolm> The nhc98 runtime/interpreter is probably 64-bit safe.
07:50:42 <JaffaCake> they made some nice improvements over x86
07:50:53 <CosmicRay> JohnMeacham: it will be nice when jhc can compile ghc :-)
07:51:18 <JohnMeacham> heh. I want jhc to compile jhc. then I will be getting double-reward for all jhc improvements :)
07:51:21 <JaffaCake> heh, that's a good goal
07:51:23 <dcoutts_> JohnMeacham, yes apparently the sibling tail call optimisation for C is in gcc 3.4
07:51:29 <CosmicRay> JaffaCake: yes, and without doing it in a braindead way like the itanic
07:51:59 <malcolm> I think if you use nhc98 --noansiC then it might just work OK on a 64-bit platform.
07:52:12 <CosmicRay> JaffaCake: indeed it is.  if you ever tried compiling ghc on aix, you would appreciate having an easier way to bootstrap it.
07:52:13 <Igloo> I guess a jhc Debian source package would want to have the C files in. How ugly.
07:52:22 <CosmicRay> (but ghc is by no means the only program that's difficult to build on aix)
07:52:22 <skew> CosmicRay: I think getting enough memory in your system for jhc to compile ghc would require a 64 bit machine :)
07:52:29 <CosmicRay> skew: haha
07:52:38 <dcoutts_> JohnMeacham,  but more significantly it means that the gcc folk have to keep tail calls in their intermediate language which should make things better for an FP/C-- front end
07:52:46 <malcolm> But --noansiC means you can't use any FFI code currently.
07:52:59 <JaffaCake> CosmicRay: what are the main difficulties compared to other platforms?
07:53:24 <JohnMeacham> dcoutts_: right now I output all functions as static in a single .c file. this makes it most likely gcc will properly generate tail-calls.
07:53:55 <JohnMeacham> However, it would not be hard to do the trasformation myself, since I don't have higher order functions to worry about.
07:53:56 <CosmicRay> JaffaCake: well bootstrapping was quite difficult, since I had no closer machine than x86 for the .hc files...  also a lot of configure stuff assumed AIX4 -- 32-bit, and we're on AIX 5, 64-bit.
07:54:20 <CosmicRay> JaffaCake: so there was some hacking around to make thing work.  Then I had some linker troubles.  I finally wrote a wrapper script for gcc that got things going
07:54:44 <CosmicRay> exec /usr/local/bin/gcc -mpowerpc -maix32 -mminimal-toc "$@"
07:54:48 <JaffaCake> ok, just porting issues then
07:54:50 <JohnMeacham> But a real c-- front end for gcc would be ideal. for a lot of people  in the FP community.
07:54:51 <CosmicRay> yeah
07:55:12 <CosmicRay> JaffaCake: I think I submitted a couple of bugs about it, I never heard of them being closed though IIRC
07:55:28 <JaffaCake> ah yes
07:56:12 <CosmicRay> JaffaCake: there was also a lot of fuss with gmp.  somehow it was being built ni 64-bit while ghc was building 32-bit (or maybe it was the reverse; this was about 6 months ago)
07:56:16 * JaffaCake looks up the bug database
07:56:55 <CosmicRay> here's one:
07:56:57 <CosmicRay> http://sourceforge.net/tracker/index.php?func=detail&aid=1043070&group_id=8032&atid=108032
07:57:42 <JaffaCake> yes, I remember that one
07:57:54 <JaffaCake> the patch isn't quite right, IIRC
07:58:03 <CosmicRay> JaffaCake: you're right
07:58:32 <CosmicRay> JaffaCake: but like I say in the bug, I don't know how to do it the right way...  but I hope this gives you what you need to do it the right way though
07:58:54 <JaffaCake> trouble is, I can't test it easily
07:58:57 <skew> autrijus: that looks pretty good to me. If reverse [1..len `div` 2] needs to build an intermediate list you could count down with [len `div` 2,len `div` 2-1..1]
07:59:09 <CosmicRay> JaffaCake: I'm happy to test anything you through my way
07:59:29 <JaffaCake> I'll look into it sometime
07:59:45 <CosmicRay> JaffaCake: just don't expect too many tests per day.  compiling on aix is a slow business. :-(
07:59:55 <JaffaCake> heh
08:00:18 <CosmicRay> I don't know why.   for a machine this powerful and expensive, one would think it would compile faster than my 7-year-old alpha.  oh well.
08:00:37 * JaffaCake stares at the number of bugs in sourceforge and gets depressed
08:01:06 * CosmicRay points out how many people have a good experience with ghc
08:01:38 <JohnMeacham> Are there any other compilers out there that use Pure Type Systems as an intermediate language? I'd like to see some more practically oriented info on it.
08:02:18 <xerox> Where was that code to get the possible unique combination of some numbers?
08:04:00 <JohnMeacham> The best practical info I have found so far is Roorda's thesis.
08:04:57 * Philippa_ seconds CosmicRay's point
08:05:23 * JaffaCake feels better
08:05:42 <Philippa_> and unless you wrote the win32 RTS you're not responsible for the only bug I ever encountered
08:06:12 <Philippa_> hmm, I ought to go play with that code again now I've a version of GHC with that one fixed :-)
08:06:33 <CosmicRay> JaffaCake: I suspect there are quite a few people out there that have a good experience with ghc and don't even know it.  Things like darcs, I think, are taking Haskell into the hands of people that don't even know what language darcs is written in.
08:06:41 <CosmicRay> JaffaCake: btw, how did you make out with your survey?
08:06:46 <JohnMeacham> Hmm.. pretty..  http://repetae.net/lcube.html pretty buggy...  let-bound terms keep showing up at the type level. I need to put a stop to that.
08:07:03 <JaffaCake> CosmicRay: I haven't checked the results lately... I'll go and look
08:09:43 <autrijus> skew: cool, that's a 5% win
08:10:02 <CosmicRay> Is there anyway that I could get a tar.gz of the entire raw CVS repository on cvs.haskell.org, for the purposes of experimenting with converting it to darcs?
08:10:30 <JaffaCake> looks like 500+ complete surveys now
08:10:30 <CosmicRay> also, does anyone know why there are certain "private" directories that give permission denied errors to pserver trying to get them?
08:10:35 * JaffaCake jumps around a bit
08:10:47 <CosmicRay> JaffaCake: nice, that's about double what you had when you posted about it on the lists, right?
08:11:01 <JaffaCake> yeah, thanks to Simon PJ's plea :)
08:11:10 <CosmicRay> oh, the *other* simon :-)
08:11:32 <CosmicRay> we publicized it here and on the sequence too.  would be nice to get it on www.haskell.org
08:11:40 <JaffaCake> CosmicRay: re: the CVS repo, sure
08:11:43 <skew> I thought you decided that Simon PJ would never be the "other" simon :)
08:11:46 <dcoutts_> JaffaCake, that's quite a few. You could probably prod some uni people to spread the survey wider. It hasn't been sent round the department mailing lists over here and I know that lots of people use ghc, and wadges of students
08:13:27 <Philippa_> I think hugs is still the usual recommendation at UoN
08:13:31 <Philippa_> dunno why these days though
08:13:40 <skew> JaffaCake: Where was the right place to look at core for optimization? -ddump-simp?
08:14:01 <JaffaCake> CosmicRay: if you're interested in experimenting with converting the CVS repo, I can set you up with a cvs.haskell.org account, that's probably the easiest way
08:14:15 <JaffaCake> skew: yes
08:14:21 <dcoutts_> JaffaCake, I somehow doubt I'm authorised to email all our students doing FP! But I might be able to persuade someone who is.
08:14:31 <CosmicRay> JaffaCake: so I'd just ssh in to that machine?
08:14:42 <JaffaCake> dcoutts_: that would be great, ta
08:14:47 <dcoutts_> Philippa_, I think we're going to switch to ghci for the start of next year (finally)
08:15:01 <CosmicRay> dcoutts_: pfft, just create a throwaway hotmail account :-)
08:15:03 <JaffaCake> CosmicRay: yup, that way I wouldn't have to send you updated tarballs
08:15:38 <CosmicRay> JaffaCake: sounds good.  what do you need frmo me to get that giong?
08:15:54 <JaffaCake> username and SSH public key
08:16:02 <dcoutts_> CosmicRay, :-)  fortunatly for them it's more a matter of restricted lists
08:16:02 <Philippa_> dcoutts_: cool. Was about to ask if you knew a friend of mine who moved here, but realised he's been here the best part of two years already so you probably don't...
08:16:11 <beschmi> there are about 400 students using ghc (and happy/alex) in the second semester course here (karlsruhe)
08:16:21 <CosmicRay> JaffaCake: right, shall I e-mail that to you?
08:16:29 <JaffaCake> please do
08:17:34 <dcoutts_> beschmi, that's a lot! About 8x what we have
08:18:00 <CosmicRay> about this private directories that aren't readable by pserver -- is there stuff in there that I should take care to not become publically-available, or is the non-readable status just some sort of historic relic?
08:18:55 <JaffaCake> we haven't put anything in there for a long time, but I think the stuff in those directories is still unlicensed, so you should leave it out of the darcs repo
08:19:07 <CosmicRay> ok.
08:19:26 <CosmicRay> mail sent.
08:20:04 <CosmicRay> out of curiosity, if a good darcs conversion of the cvs repository is possible, is there any interest among the fptools hackers in switching to darcs?
08:20:34 <JaffaCake> I'm keen, as long as I can do everything I do now
08:20:38 <JohnMeacham> I would love that. not that I hack fptools much.
08:20:44 <beschmi> dcoutts_: it's a compulsary course for cs students (Informatik 2) and there are some physics/maths students too
08:21:18 <CosmicRay> JaffaCake: well I thinks it's pretty safe to say that darcs doesn't have any regressions from CVS, but is there anything in particular you're concerned about?
08:21:18 <beschmi> unfortunately, it's the only course where haskell is used here ;(
08:21:24 <JohnMeacham> I think it might be good to split it into a few different darcs repositories if it is too big.
08:21:34 <CosmicRay> JohnMeacham: which, fptools?
08:21:45 <JohnMeacham> yeah.
08:21:46 <dcoutts_> beschmi, our's is a compulsary 1st year course and there are some maths/engineering studetnts too. Your's is still bigger :-)
08:21:54 <CosmicRay> JohnMeacham: I don't think it will pose a problem.
08:21:56 <JaffaCake> I need emacs support, and cvsweb is nice
08:22:01 <JohnMeacham> okay.
08:22:28 <CosmicRay> JaffaCake: emacs support is there.  there's nothing quite as nice as cvsweb, but there is darcs.cgi which has a nifty interface to "cvs blame" :-)
08:22:34 <CosmicRay> or the darcs equivolent thereof
08:23:25 <CosmicRay> and of course darcs repositories are browsable, with the current version anyway, with any http server
08:23:38 <JaffaCake> ideally we could have a two-way mirror, so we can switch gradually
08:23:41 <CosmicRay> http://www.scannedinavian.org/DarcsWiki/CategoryEmacs <-- emacs stuff for darcs
08:23:45 <skew> autrijus: also, I don't think elems participates in list fustion
08:23:45 <CosmicRay> JaffaCake: right.
08:23:54 <CosmicRay> JaffaCake: I know that tailor.py can do that.
08:24:01 <JohnMeacham> just being able to easily create a branch for each little thing you are working on is great... also, being able to accept patches from anyone who can send mail... the default mail address should probably be a mailing list...
08:24:23 <JohnMeacham> sorry. I ramble before I sleep.
08:24:31 <CosmicRay> JaffaCake: yes, it is **so** much easier for anyone to participate in the project and send patches with darcs than with cvs.
08:24:32 <malcolm> I could be persuaded to switch to darcs for nhc98 too I think probably.
08:24:41 <skew> JohnMeacham: why are you awake, anyway?
08:24:51 <JaffaCake> CosmicRay: right, that's definitely a win
08:25:01 <JohnMeacham> not sure.
08:25:12 <JohnMeacham> Just never went to bed :)
08:25:15 <CosmicRay> malcolm: well then, nhc98 will be second on my list of things to convert :-)
08:25:30 <CosmicRay> skew: what, the pure excitement of haskell doesn't keep you awake at night?
08:25:39 <JaffaCake> which is the best darcs emacs mode?  looks like there's at least 3 :-S
08:25:56 <skew> CosmicRay: well, I am playing with autrijus code instead of doing stuff with a looming deadline
08:26:02 <CosmicRay> JaffaCake: I don't know, but I bet you could get at least 3 opinions on #darcs
08:26:34 <CosmicRay> JaffaCake: if you already use vc, then you probably want one of the vc modes
08:26:39 <skew> it's just that it's 8:30 in California, and I didn't think John was on my plan of waking up at midnight.
08:26:52 <CosmicRay> JaffaCake: that will probably make converting from cvs as painless as possible
08:27:13 <JaffaCake> I *think* I use VC
08:27:20 <malcolm> I've never liked the branching support in CVS, and I presume that this is exactly the sort of thing that is supported much better in darcs?
08:27:26 <CosmicRay> malcolm: yes
08:27:30 <autrijus> skew: how would you do this, then?
08:27:58 <autrijus> skew: mapM on 1..length?
08:28:15 <autrijus> somehow I think the repeated readArray call is not going to be faster
08:28:23 <JaffaCake> if we got darcs, the first thing I'd do is move a bunch of files around :)
08:28:23 <CosmicRay> malcolm: whenever you do a "darcs get", your working directory on your system is actually a fully-functional darcs repository -- a branch from the server's one, in fact.
08:28:33 <JohnMeacham> Hah. I invented that schedule.
08:28:40 <CosmicRay> malcolm: then you can hack and "darcs record", etc.
08:28:55 <CosmicRay> malcolm: when you're ready to send things back to the server, "darcs push".  To pull things frmo the server, "darcs pull".
08:29:10 <CosmicRay> malcolm: now, if you actually wanted to create a logical branch, darcs push/pull become your merge commands.
08:29:20 <CosmicRay> malcolm: it is all very slick and easy.
08:29:32 <CosmicRay> "darcs get" is the create a branch command.
08:29:49 <Heffalump> errm, darcs has major performance and usability regressions from CVS
08:30:03 <CosmicRay> Heffalump: I disagree completely
08:30:07 <malcolm> CosmicRay: yes, I think I gathered all of that from watching some discussions.  Just wanted to confirm I had the right impression.
08:30:09 <JaffaCake> creating a branch on the server is more tricky, though
08:30:28 <CosmicRay> JaffaCake: you would have to have access to make a new directory on the server, yes
08:30:38 <JohnMeacham> it is supported really really well. I currently have 7 branches open in jhc. I practically open a branch for each independent patch I write. it is just easier that way.
08:30:42 <CosmicRay> JaffaCake: but anyone with write access to the server probably would (since writing is accomplished by piping over ssh)
08:30:43 <JaffaCake> whereas I can do it from the client with CVS
08:31:30 <CosmicRay> JaffaCake: true.  otoh, creating a branch is jsut: 1) ssh server, 2) darcs get old new
08:31:49 <JaffaCake> right, and it hard-links everything in sight
08:31:51 <Heffalump> errm, conflict resolution
08:32:00 <Heffalump> that's an obvious performance problem
08:32:26 <CosmicRay> Heffalump: the only case I've found it to be a problem is with resolving conflicts for a situation that cvs can't even handle in the first place
08:32:35 <JaffaCake> bear in mind I've got to explain this to Simon PJ :)
08:32:38 <Heffalump> well, that's not my experience :-)
08:32:39 <JohnMeacham> okay. now I'm really leaving. y'all will love darcs.
08:32:48 <CosmicRay> Heffalump: (where files were independently added with the same name on two branches, and was renamed on one before pulling)
08:33:06 <CosmicRay> JaffaCake: :-)
08:33:26 <CosmicRay> JaffaCake: if you do it in public, I bet everyone including David will help :-)
08:33:28 <JaffaCake> JohnMeacham: see ya ;)
08:34:09 <CosmicRay> Heffalump: and you're not thinking of all the performance wins, such as darcs record being instantaneous
08:34:23 <CosmicRay> darcs changes being instantaneous
08:34:24 <CosmicRay> etc etc
08:34:31 <CosmicRay> all the benefits you get from having what amounts to a local cache
08:34:45 <JaffaCake> would it work to split fptools into separate repos, like the modules we have in CVS?
08:34:53 <Heffalump> I've managed to get it just sitting there trying to commute a patch past an identical set of local changes.
08:34:53 <CosmicRay> JaffaCake: yes
08:35:07 <CosmicRay> JaffaCake: i thought igloo fixed that.
08:35:09 <CosmicRay> err
08:35:14 <Igloo> CosmicRay: fptools should certainly split up as you can't only check out part of a darcs repo and I suspect most people don't want half of it (although by size probably a small half)
08:35:14 <CosmicRay> Heffalump: I thought igloo fixed that.
08:35:24 <JaffaCake> what happens when you commit your whole tree - does it commit into all the repos?
08:35:29 <Heffalump> well, it was happening with 1.0.2 last night.
08:35:38 <CosmicRay> JaffaCake: well darcs doesn't really support subrepos in an automatic fashion
08:35:54 <CosmicRay> JaffaCake: so if you are wanting to do a commit across these different parts of fptools, you probably don't want to split it up
08:36:10 <CosmicRay> just like you can't, say, commit something in cvs that modifies both fptools and hugs98
08:36:32 <JaffaCake> but I commit things to ghc & libraries together
08:36:42 <Igloo> JaffaCake: There are very few server-side branches though, right? Plus, you could make a script to do it
08:36:57 <Heffalump> it also seems very easy to get pending into a bad state
08:36:59 <CosmicRay> JaffaCake: right.  but those are all in the same cvs module (fptools)
08:37:14 <JaffaCake> CosmicRay: actually ghc & libraries are separate modules
08:37:21 <CosmicRay> oh?
08:37:26 <JaffaCake> it's a bit of a hack
08:37:27 * Igloo hasn't solved the commutation problem. That's what the darcs-conflicts list is trying to do
08:37:32 <CosmicRay> this may explain part of my conversion problem
08:37:54 <JaffaCake> lots of projects share the top-level fptools stuff: ghc, happy, alex, haddock etc.
08:37:58 <CosmicRay> JaffaCake: well in that case, you can use a script like igloo suggested, but you will be committing two changesets instead of one
08:38:20 <Igloo> JaffaCake: For a similar layout I created a record script that looped through all the directories doing a record (and likewise for other commands)
08:38:26 <CosmicRay> in any case, the fptools source tree seems fairly small to me, compared to some of the stuff I've tried darcs on (kernel)
08:38:53 <Igloo> Even now 2 mails get sent to the list if you commit to ghc and libraries at the same time, so it's already really 2 commits
08:38:57 <CosmicRay> JaffaCake: right.  I see what you mean.  Having those in a separate repo would make it easier to pull patches into those various projects.
08:39:22 <JaffaCake> Igloo: this is CVS, it's a separate commit to each file, really :)
08:39:47 <CosmicRay> right, and the fact that darcs actually has atomic changesets is a big win, and not just for reliability
08:39:54 <Igloo> Well, yeah, but it does its best to pretend it's not  :-)
08:40:13 <CosmicRay> Igloo: we see through its slimy exterior though :-)
08:40:29 <JaffaCake> so, do we have separate repos for the top-level fptools, then ghc, happy, alex, etc.
08:40:50 <JaffaCake> or do we duplicate fptools with each of ghc, happy etc.
08:40:57 <Igloo> Separate repos
08:41:25 <CosmicRay> so pretty much each top-level dir in fptools becomes its own repo?
08:41:32 <Igloo> Yup
08:41:36 <JaffaCake> ok, so the downside of that is you need a script to record
08:41:37 <CosmicRay> k.
08:41:46 <CosmicRay> JaffaCake: if your commit spans repos.
08:41:51 <Igloo> Yeah, but you can have all that in a root repo, like how fpconfig works now I think
08:41:57 * Palle thinks it's pretty funny my fellow students, don't think you can use haskell for anything.. 
08:42:06 <Igloo> So you darcs get fpconfig; ./get ghc libraries hslibs
08:42:19 <Igloo> Then ./record, ./send, ./push, ./pull etc
08:42:20 <CosmicRay> Igloo: do you have a public example of a setup like that anywhere?
08:42:21 <Philippa> it's easy to get that impression if you've not been taught to use monads effectively - it feels like you can't even do IO cleanly
08:42:22 <JaffaCake> ok, sounds reasonable
08:43:15 <Oejet> Palle: It's not so amusing, when you've written bindings for Bzlib2, and they still say that.
08:43:30 <JaffaCake> we quite often only branch part of the tree, anyway
08:44:07 <Igloo> CosmicRay: No
08:44:47 <Palle> Oejet, Well what can I not do in haskell i can use in C?
08:45:07 <Oejet> Palle: You want to read my TMR2 article about that?  You would be the perfect proof reader, since it's intended your level of guruness.
08:46:21 <Palle> Oejet, I would really like that :)
08:46:39 <Igloo> I think the fpconfig repo should actually just be a generic metarepo, perhaps with an additional patch that creates an "allrepos" files and "defaultrepos" file
08:46:41 <Oejet> I'll send you a secret link.
08:47:30 <Igloo> With ./get creating myrepos and the others iterating over it (and .)
08:47:48 <Igloo> (unless overridden by args, possibly)
08:47:56 * JaffaCake wonders what a generic metarepo is, but it sounds exciting
08:48:13 <CosmicRay> Igloo: do you get any issues with push/pull in that scenario, establishing dozens of ssh conections to a server?
08:48:15 <malcolm> I have another CVS hack that I wonder whether it is supported in darcs.
08:48:30 <Igloo> Just a repo with what I suggested fpconfig should have in
08:49:15 <malcolm> Under nhc98/src, the libraries, cpphs, and maybe some other things are grafted in.
08:49:30 <malcolm> I'm not sure whether this is the same situation as with fptools.
08:49:35 <skew> autrijus: using mapM_ over the UArray is a tiny bit faster
08:49:36 <CosmicRay> sounds like it is
08:49:37 <Igloo> CosmicRay: You'll get n times the number you would with a single repo; I guess you might be able to avoid that with one of those SSH connection sharing doodahs if that's a problem
08:49:55 * CosmicRay googles up ssh connection sharing
08:50:08 <JaffaCake> we used to use fsh
08:50:22 <Igloo> malcolm: It's basically the same, but the metarepo scripts would have to be slightly cleverer if not everything is at the root
08:50:24 <JaffaCake> but it just didn't work too often, so I ditched it
08:51:13 * CosmicRay installs fsh and pokes around
08:51:18 <JaffaCake> What about commit mailing lists?
08:51:42 <CosmicRay> JaffaCake: you could do that with either cron or a darcs hook, I believe
08:51:47 * Igloo does my commits with darcs send and procmail at the other end, in which case that's easy (just do them with procmail)
08:51:48 <CosmicRay> I haven't really looked into darcs hooks yet
08:51:59 <Igloo> I don't know if darcs push makes it possible
08:52:13 <Igloo> (If you're going to use darcs send then SSH connections also aren't an issue)
08:53:05 <JaffaCake> darcs send worries me slightly... I like to know when my patch has been committed
08:53:29 <CosmicRay> JaffaCake: probably you would not be using it, but perhaps a person like me would -- somebody who sends you a random patch every 6 months
08:53:37 <JaffaCake> sure
08:53:39 <Igloo> You do get a mail back saying "Patch applied" or giving a failure reason, or do you want to know right away?
08:53:51 <SamB> JaffaCake: you could run darcs send again and see what isn't applied yet
08:54:03 <JaffaCake> thanks
08:54:44 <Igloo> Anyway, if push doesn't have suitable hooks then that should just be a SMOP
08:55:17 <CosmicRay> hmm, I can't find a reference for hokos in darcs
08:55:21 <CosmicRay> SMOP?
08:55:50 <JaffaCake> right, I imagine I'd be pushing a lot less often than I commit currently, because commit would mostly be replaced by record
08:55:58 <CosmicRay> yes
08:55:59 <Igloo> Simple Matter Of Programming
08:56:15 <CosmicRay> cvs commit is essentially the combination of darcs record and darcs push
08:56:17 <JaffaCake> I bet I forget to push on a regular basis :)
08:56:40 <CosmicRay> JaffaCake: cron :-)
08:56:42 <SamB> I like the darcs send model better, because it obviates the need for commit access
08:57:37 <JaffaCake> so what tools do people use for accepting patches received via darcs send?
08:57:59 <SamB> well, dons uses darcs apply for lambdabot
08:58:28 <CosmicRay> well everyone uses darcs apply at some point
08:58:33 <CosmicRay> here is a link to david's setup:
08:58:35 <CosmicRay> http://www.darcs.net/manual/node4.html#SECTION00455000000000000000
08:58:36 <JaffaCake> I want to just push a button the mail client, preferably
08:59:18 <CosmicRay> actualy, no, that's his setup to automatically accept gpg-signed patches.
08:59:31 <CosmicRay> here: http://www.darcs.net/manual/node4.html#SECTION00452000000000000000
08:59:50 <CosmicRay> "which allows me to apply patches directly from mutt, sending a confirmation email to the person who sent me the patch."
08:59:56 <SamB> does he auto-accept all gpg-signed patches?
09:00:12 <CosmicRay> SamB: no, only those that verify using a special keyring for this purpose
09:00:34 <Igloo> I have a button that pipes it through   gpg --clearsign -u DA155C87 | mail -s patch igloo@darcs.net   (currently I select the attachment first, but I suspect I'll remove the need for that when it annoys me  :-)
09:01:50 * Igloo looks at the URL; Ah, nifty, if that works on the mail itself then mine probably will too
09:03:26 <JaffaCake> CosmicRay: your cvs.haskell.org account is set up
09:04:15 <Igloo> Is the new IO library allowed to break existing code?
09:05:51 <JaffaCake> well, that would be pretty devastating
09:06:17 <JaffaCake> I'd prefer to have it alongside
09:07:28 <Igloo> How about if an OldIO interface could be put on top of it?
09:07:55 <Heffalump> new IO library?
09:08:40 <JaffaCake> Igloo: the question is whether the old interface should be available from System.IO
09:08:56 <Igloo> (I'm thinking Handle should become (Something a => Handle a), instance Something [Char], instance Something [Byte] (or maybe rejig to be H98), type Byte = Word8 and then hGet would give you a Char or Byte as appropriate)
09:08:57 <CosmicRay> JaffaCake: great, thanks
09:08:57 <dcoutts_> Igloo, but even if you can layer the old semantics on an implementaion in terms of some new api, what have you gained? just a bit of tidying up underneath.
09:09:16 <Igloo> dcoutts_: You've gained a better API to write new code against
09:09:38 <JaffaCake> Igloo: Stream rather than Handle, IMO
09:09:56 <dcoutts_> ok having the new api is great but what's the point in changing the implementation of the old one
09:09:58 <JaffaCake> that was one design we explored for the Stream library
09:11:03 <Igloo> dcoutts_: Less cruft to carry round. Doesn't really matter, I suppose
09:11:11 <dcoutts_> what happes to the old one is not terribly important so long as it doesn't change and break existing programs
09:11:36 <Igloo> JaffaCake: Does that mean you rejected it?
09:12:23 <JaffaCake> the current design has the basic Stream class that you can do I/O with Word8, and TextInputStream/TextOutputStream which support I/O with Chars
09:12:37 <dcoutts_> Igloo, I think you need to be able to do things like have lists of Handle which you would not be able to do directly with a Handle type class
09:12:52 <Igloo> OK; do you still have FilePath = String?
09:12:53 <JaffaCake> there doesn't seem to be an obvious place to generalise over the element type
09:13:06 <JaffaCake> yes
09:13:27 <JaffaCake> I'm not at all sure what should be done about FilePath
09:14:03 <JaffaCake> since apparently Unix requires [Word8] and Windows requires [Char]
09:14:28 <dcoutts_> I've got that problem at the moment, should the gtk2hs file selector API rerturn unicode strings or 'raw' strings? neither is sufficient for all purposes
09:14:46 <JaffaCake> I think I lost track of that discussion on haskell-cafe :)
09:14:54 <Igloo> I was thinking of an openFile :: Something b => a -> IO (Handle b) in my Something a class
09:15:19 <Igloo> So one instance converts and calls the other
09:15:29 <dcoutts_> if you try and display a raw string in the gui gtk will get very upset and if you don't then passing the unicode string to readFile is not guaranteed to work
09:15:43 * JaffaCake looks at the clock
09:15:47 <Igloo> heh
09:15:49 <JaffaCake> I've gotta go
09:15:53 <Igloo> 'night  :-)
09:16:04 <JaffaCake> bye folks :)
09:16:07 <dcoutts_> bye
09:17:01 * Igloo has decided I don't object to the current function being discussed, anyway, which is the important thing  :-)
09:18:18 <dcoutts_> Igloo, do you have a moment? if so I'll trot over and plague you with some obscure technical point about a constraint-based type inference algorithm and sets of type variables and substitutions upon them :-)
09:19:57 <Igloo> Damn, I don't have a magic clock that says I can go home. Sure  :-)
09:20:18 <dcoutts_> :-) I'll print something out and be over in a sec...
09:37:29 <ibo> hello, n00b question here. how do i declare a time value in haskell? im currently using hugs. TIA.
09:38:01 <Lemmih> Time value?
09:38:19 <ibo> yep like apr 23 2005 11 pm
09:38:51 <ibo> getClockTime doesnt seem to work
09:39:24 <Lemmih> How does it not work?
09:39:48 <ibo> like if i type it in hugs...
09:39:51 <ibo> nothing shows
09:40:10 <ibo> i only started using haskell days ago.. im lost.
09:40:19 <Lemmih> @type fmap System.Time.toUTCTime System.Time.getClockTime
09:40:24 <lambdabot> fmap System.Time.toUTCTime System.Time.getClockTime :: IO System.Time.CalendarTi
09:40:24 <lambdabot> me
09:40:29 <skew> that is odd
09:40:35 <skew> try getClockTime >>= print
09:41:16 <d`> i'd suggest System.Time.getClockTime >>= print
09:41:23 <d`> that's probably the problem..
09:41:29 <skew> oh, looks like the return value from IO actions isn't printed
09:42:20 <skew> For some reason I was expecting act :: IO a for any Show a to run in ghci like act >>= print, but that would look really odd for things like print
09:42:30 <ibo> getClockTime >>= print works
09:43:06 <ibo> the others shows 'Undefined qualifide variable'
09:43:22 <ibo> still a n00b.. hehe. i guess im missing a lot of things.
09:43:25 <skew> ibo: ghci (and apparently hugs) assume that if you have it evaluate something in IO you just want the side effects, not the result value
09:43:59 <Lemmih> skew: GHCi sets 'it' to the result.
09:44:46 <ibo> ok. but how do i declare a value? im trying to make a simple database using lists and hardcode dates like holidays. :)
09:46:18 <Lemmih> You have to write declarations in a file.
09:47:05 <ibo> Lemmih, could u post it how to do it? :)
09:48:10 <Lemmih> Write some declarations in a file and load it in Hugs with ':l [filename]'.
09:49:48 <ibo> yup, im doing that using simple types like strings, i dunno how to do it with ClockTime, oh well i guess im asking too much. RTFM for me.
09:50:03 <ibo> unless anyones willing to make it easier for me :))
09:51:04 <Oejet> @type getClockTime
09:51:06 <lambdabot> bzzt
09:51:15 <Lemmih> @google Haskell homework help
09:51:16 <lambdabot> http://www.haskell.org/humor/homework.html
09:51:54 <Oejet> @type System.Time.getClockTime
09:51:56 <lambdabot> System.Time.getClockTime :: IO System.Time.ClockTime
09:53:36 <ibo> http://www.haskell.org/humor/homework.html <- lolz. hehe. im just a poor kid :)
09:53:42 <Oejet> ibo: The IO type means that getClockTime is not a pure function.
09:53:44 <Lemmih> (:
09:55:01 <Lemmih> SyntaxNinja: Hey!
09:55:05 <ibo> Oejet, tnx :)
09:55:35 <Oejet> ibo: Something like this:
09:55:36 <Oejet> do t <- getClockTime
09:55:36 <Oejet>      doSomethingWith t
09:57:20 <SyntaxNinja> heya Lemmih how's it going?
09:57:47 <Lemmih> Great. Got some cabal-get patches ready (:
09:58:03 <ibo> Oejet, lets say i want a constant time value...
09:58:09 <ibo> time1 :: ClockTime
09:58:10 <SyntaxNinja> Lemmih: cool. should I pull?
09:58:13 <ibo> timexx = ???? how do i put the month?
10:02:20 <Lemmih> SyntaxNinja: Not yet. Gonna check if I forgot any files this time (:
10:03:18 <GunZ> Hey guys what exactly does "somename :: Integer -> Integer" mean? does it mean you input an Integer and an Integer is returned?
10:03:38 <Lemmih> GunZ: Yes.
10:03:55 <SyntaxNinja> Lemmih: c00
10:03:58 <GunZ> Lemmih: ok so what does Integer -> Integer -> Integer mean?
10:04:06 <GunZ> input two integers?
10:04:18 <SyntaxNinja> GunZ: lucky guess!
10:04:26 <SyntaxNinja> GunZ: for instance, the type of the plus operator:
10:04:30 <SyntaxNinja> @type (+)
10:04:31 <lambdabot> (+) :: forall a. (Num a) => a -> a -> a
10:04:43 <SyntaxNinja> it's a little more complex, but basically inputs two numbers and outputs a number
10:04:54 <GunZ> ahh ok thx :)
10:05:36 <SyntaxNinja> is there a tool for extracting the type sigs of a module into a text file? sorta like a text target for haddock.
10:07:46 <skew> why do you want to do that?
10:08:24 <Lemmih> SyntaxNinja: ghc --show-iface | some-sed-action-here ?
10:12:32 <mwelsh> is there a better (and by better i mean either faster or uses less space or both) way to calculate e = (head $ filter (\n -> (gcd n m) == 1) [2..m])
10:13:42 <Heffalump> factorise m and use a sieve? </guess>
10:14:21 <TFK> Shouldn't that terminate when filter returns the first element? Due to laziness and all?
10:14:34 <mwelsh> yea, thats what im hoping for
10:14:36 <ibo> sorry guys for this... is declaring time in a list possible?
10:14:37 <ibo> all i want is something like declaring stuff.
10:14:37 <ibo> type stringstring = [ (String,String) ] -----> [("1st","2nd")]
10:14:37 <ibo> type timetime = [ (ClockTime,ClockTime) ] -----> [(????,????)]
10:14:45 <mwelsh> i was just curious if there was a better way
10:14:50 <TFK> mwelsh, that's what *should* happen, if I'm not mistaken (I may as well be).
10:15:55 <basti_> ibo: of course it is.
10:16:11 <mwelsh> on a slightly unrelated note... is there any reason to prefer "(f1 . f2) x" over "f1 $ f2 x"?
10:16:47 <ibo> basti_, still a noob... an example could help... i still dont know how to access stuff like the month, day, etc...
10:16:52 <Heffalump> not unless that allows you to eta-expand the e out
10:17:01 <Heffalump> IM the x, not the e
10:17:05 <Heffalump> and IM eta-contract.
10:17:13 <TFK> Heffalump, the what in the what?..
10:17:23 <basti_> ibo: that would depend on your time type.
10:17:33 <mwelsh> who shot who in the what now?
10:17:59 <basti_> ibo: i do not know about any time types in haskell so i can't help you with that.
10:18:01 <Lemmih> ibo: You can checkout the libraries documentation at http://www.haskell.org/ghc/
10:18:49 <Lemmih> ibo: http://www.haskell.org/ghc/docs/latest/html/libraries/index.html to be exact. Look for System.Time
10:19:05 <df_> argh, are there any tools other than HaT for finding out what hasn't been evaluated in a stack?
10:19:08 <basti_> there you go
10:19:08 <basti_> :)
10:19:19 <ibo> Lemmih, struggled with that... i guess i better invest in reading more. i cant learn this all in a day. :)
10:19:29 <SyntaxNinja> skew: why I want to show the interface: because I want to go over it and edit it to be more ideal :)
10:19:44 <SyntaxNinja> Lemmih: thanks
10:20:20 <Lemmih> SyntaxNinja: thanks?
10:21:25 <Lemmih> SyntaxNinja: Tested and pushed the patch.
10:21:52 <SyntaxNinja> Lemmih: about dump iface or whatever...
10:22:20 <SyntaxNinja> Lemmih: may not get to work on that 'till this afternoon
10:22:22 <SyntaxNinja> CosmicRay: alive?
10:22:38 <SyntaxNinja> what do you guys think this machine should be called? it'll be haskell.galois.com, but also something.haskell.org
10:22:54 <SyntaxNinja> community.haskell.org and it would include CosmicRay's site
10:23:02 <CosmicRay> SyntaxNinja: yes
10:23:06 <SyntaxNinja> or packages.haskell.org as separate from CosmicRay's site
10:23:15 * Lemmih votes for community.haskell.org
10:23:30 <SyntaxNinja> or hackage.haskell.org
10:23:53 * CosmicRay leaves the naming of things to others, but if it's something like packages. or hackage., it doesn't make sense to have the sequence "under" that
10:24:06 <CosmicRay> the sequence could still be hosted on that machine, but at sequence.haskell.org or something
10:25:14 <SyntaxNinja> CosmicRay: yeah, agree.
10:26:50 <SyntaxNinja> CosmicRay: that's what I was saying... do you think it would make sense to have them both as community.haskell.org/{hackage,sequence}
10:26:52 <Igloo> Didn't community conflict with HC&R?
10:26:54 <SyntaxNinja> or would it be better to have separate servers
10:28:01 <SyntaxNinja> Igloo: howso?
10:28:20 <SyntaxNinja> it would maybe make sense to have commuity.haskell.org/{hackage,sequence,hc&r,hawiki}
10:30:00 <CosmicRay> SyntaxNinja: that sounds fine
10:30:16 <CosmicRay> SyntaxNinja: though the urls get a bit longish
10:30:34 <CosmicRay> SyntaxNinja: I dunno, on the one hand doing that implies a erlationship between them
10:30:43 <CosmicRay> on the other hand, all of those have dramatically different layouts, etc.
10:30:47 <CosmicRay> but it's no big deal
10:31:04 <Igloo> Confusion between that and http://www.haskell.org/communities
10:32:19 <CosmicRay> ah, true
10:33:34 <CosmicRay> hmm, what's the path to the cvs repo on glass?
10:35:28 * CosmicRay finds it
10:42:08 <Igloo> CosmicRay: Do you have a signal.h on AIX?
10:42:15 * CosmicRay checks
10:42:34 <CosmicRay> yes, both signal.h and sys/signal.h
10:42:46 <CosmicRay> the former includes the latter
10:43:11 <Igloo> OK, is there any sane way of finding out if (and when) signal.h (possibly indirectly) #includes net/net_globals.h?
10:43:29 <CosmicRay> well let me see if there's a nest of includes in this...
10:44:29 <CosmicRay> I wonder of cpp could do that for me.
10:45:21 <CosmicRay> no, it doesn't appear to.
10:45:28 <Igloo> Ah, echo -e "#include <signal.h> \n psignal(x, y)" | cpp would tell you what happens by defaut, at least
10:45:49 <Igloo> But if that doesn't work you would just have to guess at what defines might help  :-/
10:46:17 <CosmicRay> psignal does not apepar to be a macro
10:46:30 <CosmicRay> hmm.
10:46:38 <CosmicRay> where did I report this? :-)
10:46:40 <CosmicRay> was it in darcs?
10:46:46 <Igloo> Yes
10:46:54 <CosmicRay> ok, I remember the problem, just not where it was :-)
10:46:57 <Igloo> bugs.darcs.net, #353
10:47:04 <CosmicRay> well let me grep around for what might include net_globals
10:47:11 <CosmicRay> did the prototype I posted look like the right function?
10:47:35 <Heffalump> how do I get a login for bugs.darcs.net, or check if I already have one?
10:47:57 <CosmicRay> net_globals is directly included by sys/socketvar.h, sys/mbuf.h, sys/domain.h, sys/cdli.h, net/if.h
10:48:34 <CosmicRay> the aix manual doesn't specify a canonical header file for it.
10:48:41 <Igloo> I have a vague feeling you need to e-mail the guy who set it up or DR to get one. But guest/guest allows you to view bugs, at least
10:48:54 <CosmicRay> Igloo: I submitted mine as guest
10:49:36 <Igloo> CosmicRay: I'm hoping we just need to #define something
10:50:24 <Igloo> CosmicRay: Any chance you could find out in some AIX forum?
10:50:42 <CosmicRay> Igloo: fwiw, the code works as it is
10:50:54 * Heffalump wonders how to find any bugs at all
10:51:00 <CosmicRay> Igloo: last I looked, I couldn't track down any good ones but I could try again
10:51:12 <CosmicRay> it seems that techies all seem to try their best to avoid aix like the plague :-)
10:51:31 <Igloo> I found some by searching for new or open ones, I think
10:51:36 <Igloo> It wasn't very intuitive for me
10:51:54 <Igloo> http://bugs.darcs.net/.//Ticket/Display.html?id=353 is the one we're talking about
10:51:55 * basti_ thinks he doesn't even need existentials
10:52:15 <Heffalump> I just want to check if the one I was discussing has been reported
10:52:35 <CosmicRay> rt is very nice but its default configuration needs to be adjusted a bit more to be useful like this
10:52:50 <CosmicRay> log in, then go to tickets -> search
10:52:55 <CosmicRay> from there it should be obvious enough
10:53:16 <CosmicRay> you can also click on darcs under queue and see a full list
10:53:30 <Heffalump> it wasn't obvious how to do a search that finds anything
10:53:43 <CosmicRay> well you can search by subject line or body, for isntance
10:53:46 <basti_> CosmicRay: what was that thing about prolog yesterday evening? ;)
10:53:55 <CosmicRay> if you just do that and leave everythign else blank, you shoudl be ok
10:54:00 <Heffalump> CosmicRay: yes, I finally found that
10:54:14 <Heffalump> where is 'Queue'?
10:54:14 <CosmicRay> basti_: I piped my haskell program through tac :-)
10:54:24 <CosmicRay> on the right under quick search
10:54:26 <CosmicRay> on the homepage
10:54:30 <Igloo> What "Created before" expected as an argument wasn't obvious to me either
10:54:36 <basti_> whats tac?
10:54:45 <Igloo> CosmicRay: Can you tell whoever runs it how to configure it better?
10:54:47 <CosmicRay> basti_: it's like cat, but reverses the order of lines in your program :-)
10:54:55 <Heffalump> ah, that's a link
10:54:58 <basti_> uhm...
10:55:06 <CosmicRay> basti_: never mind, I was joking
10:55:10 <basti_> okayyyy.
10:55:12 * basti_ nods
10:55:19 <basti_> i just wondered because you left so suddenly
10:55:40 <CosmicRay> basti_: oh.  I usually just close xchat when I leave.  so, iow, I always leave suddenly :-)
10:55:46 <basti_> i see.
10:56:11 * CosmicRay lurks on too many channels to say goodbye to each
10:56:21 <basti_> :)
10:57:23 <CosmicRay> Igloo: the best way to do RT for this setup, imho, is to let people create their own rt accoutns
10:57:37 <CosmicRay> Igloo: rt doesn't have a feature to do that by default, but I wrote a python script some ages ago to do it.
10:57:42 <CosmicRay> I'm not sure if I still have it.
10:57:45 * basti_ boilerplated!
10:57:49 <CosmicRay> (I used to run rt for bugs.complete.org)
10:59:13 <Oejet> basti_: I want to learn too.
11:00:27 <basti_> well i didnt go all the way, but i solved a problem that i thought needs at least existentials without :)
11:00:54 <CosmicRay> basti_: what, coded it in asm? :-)
11:01:21 <basti_> ah no, just a little type and some cases
11:08:00 <GunZ> hey guys what does "Num a => a -> a" mean?
11:08:24 <SyntaxNinja> GunZ: it means a function from a number to a number
11:08:36 <SyntaxNinja> Num is a typeclass, and it's like "a function from a to a where a is a Num"
11:09:16 <GunZ> SyntaxNinja: right. thx
11:09:17 <Lemmih> Argh. Too many a's. (:
11:09:22 <GunZ> lol
11:09:45 <Philippa> it's kinda unfortunate that the canonical type variable is a
11:09:57 <SyntaxNinja> Philippa: is a what?
11:12:10 <SyntaxNinja> sometimes I can't decide whether to put a function in a class, or just put it in the same module or whatever
11:12:21 <SyntaxNinja> I guess the question is 'will anyone ever want to over-ride it'
11:12:32 <SyntaxNinja> but who knows? so why not just put everything in the class?
11:15:37 <Oejet> SyntaxNinja: The choices of life are hard.
11:20:13 <SyntaxNinja> usually when I ask a question like that, someone on this channel has a clear answer and I feel stupid ;)
11:32:59 <TFK> Heh, that's similar to the question of whether methods should be public or private, or somesuch.
11:35:12 <TFK> Actually, it'll be like private vs. protected in Java.
11:35:17 <TFK> Similar to, that is.
11:36:14 <Heffalump> yeah, but better, cos Haskell rulez and Java suxxors.
11:38:11 <TFK> *Obviously*.
11:40:11 <TFK> Hmmm. I suppose that in Java, the Liskov substitution principle would decide - will changing this method also change the requirement that any subclass can always be treated as an instance of the parent class?
11:42:30 <Philippa> or rather, is there a conceivable change that doesn't break that principle?
11:43:22 <TFK> That would be the Python way of thinking when deciding between _ and __ ;-)
11:43:24 <Philippa> the usual rule of thumb is that if there's an invariant being maintained that's critical to the class and can't be sensibly maintained by another implementation then it's private
11:43:54 <TFK> invariant, as in a static field? ;-)
11:44:27 <Philippa> er, no
11:45:44 <kaol> @google design by contract
11:45:46 <lambdabot> http://archive.eiffel.com/doc/manuals/technology/contract/
11:46:05 <TFK> Isn't an invariant something that never changes?
11:46:42 <TFK> If it never changes, the decision between private/public is that of style.
11:47:03 <Heffalump> an invariant is something that _should_ never change, in this context
11:47:38 <Philippa> but it's a property - "everything obeys this big inequality", in effect
11:47:39 <Heffalump> if making something protected would allow external code to break the invariant, you don't want to do that
11:48:13 <TFK> Philippa, sorry, I don't follow...
11:49:06 <Philippa> TFK: A sorted tree might maintain the invariant that at the beginning and end of every 'basic' operation (the ones you'd make private, nothing else touches the raw structure) the tree's still sorted
11:49:39 <TFK> Philippa, oh, a principle. Gotcha.
11:51:03 <Philippa> some invariants are absolutely critical for anybody using a class, so that breaking them temporarily is far more than just a slap-on-the-wrist matter
11:51:17 * TFK nods
11:51:40 <Philippa> wilfully breaking a security invariant in certain kinds of code could well be considered punishable by termination. If you're lucky, only of your employment ;-)
11:51:57 <TFK> Hehe ;-)
11:52:06 <Philippa> they're an important part of being able to prove your code does what you think it does
11:55:59 <Heffalump> it's pretty standard for an invariant to be temporarily broken in the internals of an implementation, though
11:56:08 <Heffalump> for most invariants it's pretty much unavoidable
11:56:28 <Philippa> yeah. Hence the bit about beginning and end of basic operations
12:00:46 <cognominal> I try to compile hs-plugins and I get : ./Plugins/ParsePkgConfCabal.hs:280:49: Not in scope: `hugsOptions'
12:01:22 <cognominal> I used the lastest snapshot
12:06:12 <GunZ> guys what is the difference between "(Integer, Integer) -> Integer" as a opposed to "Integer -> Integer -> Integer"?
12:06:46 <theorbtwo> The first takes a pair of two integers, the second takes two separate integer parameters.
12:07:56 <mauke> the second takes a single Integer and returns a function
12:07:56 <astrolabe> I beleive 'pair' is a technical term here.
12:08:52 <cognominal> is there a safe version of hs-plugin?
12:10:40 <basti_> GunZ: the second one can be given a single integer and then becomes a valid function again.
12:11:53 * basti_ thinks we should seperate the higher-level discussions into another channel. Maybe #haskell-highpriests or something
12:12:31 <theorbtwo> cognominal: If you mean typesafe, then it is, somewhat amazingly.
12:12:48 <theorbtwo> If you mean "release", then yes, but it is missing features that we rely on.
12:12:56 <cognominal> thebug: smart alec :)
12:13:20 <cognominal> I meant a version I can compile...
12:13:37 <thebug> hello
12:13:59 <basti_> thebug: nickname completion and highlight don't mix well.
12:14:02 <theorbtwo> Donno.  You might try going back a day at a time in the snapshots.
12:14:28 <thebug> hehe
12:20:34 <cognominal> theorbtwo, what is the last version you successfully compiled?
12:24:09 <theorbtwo> The latest one compiles fine for me.
12:24:15 <theorbtwo> 20050423
12:24:23 <theorbtwo> (Dons is on aussie time.)
12:25:48 <Heffalump> basti_: if the volume does become unmanageable, I'd suggest going for #haskell-newbies or something
12:25:56 <Heffalump> -highpriests would leave people scared to participate
12:26:09 <basti_> but -newbies would not catch the newbies immediately
12:26:20 <GunZ> basti_: thx
12:26:45 <Heffalump> true
12:26:51 <theorbtwo> I think leaving the channel mixed is generally the best way to do it.
12:26:55 <GunZ> theorbtwo: mauke thx as well :)
12:26:55 <basti_> -highpriests was rather a joke
12:28:23 <Heffalump> theorbtwo: yes, unless it becomes too busy
12:28:25 <theorbtwo> cog, ./autogen && ./configure && make && sudo make install && sudo make register should do it.
12:28:47 <Heffalump> I find some really busy channels almost unusable because of the volume of conversation
12:29:34 <theorbtwo> Then you split, and it becomes less busy... then it becomes slowly /much/ less busy, because all the people capable of answering find -newbies boring, and all the people capable of new and interesting viewpoints are scared of -highpriests.
12:29:34 <basti_> sometimes #haskell comes close to that point already
12:29:55 <basti_> hmm true again
12:30:46 <Heffalump> @seen Igloo
12:30:47 <lambdabot> Igloo is in #haskell. Last spoke 1 hour and 36 minutes ago.
12:30:53 <basti_> maybe irc clients should somehow support this situation
12:30:57 <astrolabe> needs some kind of threading on the chat
12:31:20 <astrolabe> you read my mind
12:31:28 <basti_> maybe recognizing if people are talking about something similar and then rendering their letters larger
12:31:33 <Heffalump> threading would be nice.
12:31:36 <Heffalump> but hard.
12:31:46 <basti_> hard to do in a chat
12:32:11 <basti_> hmm or associating themes with colors...
12:32:40 <basti_> would be trippy
12:32:45 <astrolabe> basti: something to save me typing 'basti:'
12:33:17 <mflux> threading in irc comes up every now and then, but I suppose it is really too difficult
12:33:20 <Heffalump> conversations tend to drift, too
12:33:26 <Heffalump> how do you decide where to start a new thread, for example
12:33:40 <basti_> thats why i think some sort of automatic "theme recognition" would be good
12:33:48 <mflux> bayesian classifier!
12:33:49 <Heffalump> yeah, if you had a perfect AI
12:33:55 <basti_> mflux: something like that
12:34:02 <astrolabe> That could be up to the writer
12:34:14 <mflux> but the problem is that one line is not to classify
12:34:17 <mflux> +much
12:34:17 <basti_> astrolabe: i'm using nick completion, aren't you?
12:34:36 <mflux> looking at the screen you are the only one ;)
12:34:41 <basti_> mflux: thats right, but you could for example "inherit" properties of recent lines
12:34:50 <astrolabe> Never heard of it!
12:35:09 <basti_> astrolabe: if i type "as<tab>" my client writes "trolabe: "...
12:35:12 <mflux> but sometimes you go can have more than discussion at the same time on the channel, when the threading support would come in handy
12:35:26 <mflux> otoh, in that case people propably start attributing people too..
12:35:42 <astrolabe> Cool thanks!  Will it work on the rest of what I want to say?
12:35:45 <basti_> in all cases such a system would need to degrade gracefully
12:35:55 <basti_> astrolabe: in my client only for nicknames on the channel
12:36:28 <mflux> there's a broken word completion for irssi, somewhat similar to emacs' dynamic completion
12:36:41 <mflux> but it isn't really that useful. irc tends to have shorter words than my variable names..
12:36:48 <basti_> hehe
12:37:28 <mflux> as you can see I haven't written haskell much :P
12:37:28 <mflux> ;)
12:41:47 <astrolabe> There could be a miscellaneous/default thread, with the option of starting a new (named?)thread with each line you enter.  The new thread could be contributed to by naming it before a message, or a thread could be dragged to a separate column, with its own input box.
12:41:50 <TFK> Well, I played around with the color scheme to make it match TextPad's (or rather, the 2-nd Haskell syntax highlight scheme for TextPad).
12:42:30 <astrolabe> Or dragged to the bin :)
12:42:43 <basti_> uhhh
12:43:09 <TFK> So you can give it a go and suggest improvements.
13:11:00 <shrimpx> is anyone familiar with "principles of program analysis" by nielson-nielson-hankin?
13:16:54 <Muad_Dibber> shrimpx : nope. why?
13:17:23 <shrimpx> was looking for some opinions. the topic is intriguing but i haven't heard much about the book itself
13:17:47 <Muad_Dibber> well, i have no clue yet
13:17:57 <Muad_Dibber> however, going to do a course with that book next uni period
13:18:04 <shrimpx> oh nice
13:21:14 <Heffalump> shrimpx: I've read most of it
13:21:20 <Heffalump> though it was a while ago
13:21:42 <Igloo> Heffalump: Did you want me?
13:21:45 <Heffalump> I think it's a good book
13:21:52 <shrimpx> Heffalump: cool
13:21:53 <shrimpx> thanks
13:22:04 <Heffalump> igloo: no, just wol was looking for you
13:23:03 <Igloo> If we do want to split I'd suggest starting non-newbie conversations on #haskell on OFTC. But that would obviously force people to join 2 networks if they want to be on both
13:23:11 <Igloo> OK, ta
13:23:28 * Igloo doesn't think there is a need to split currently
13:24:43 <astrolabe> Igloo:  How would newbies know not to post on OFTC?
13:25:08 <Igloo> It wouldn't be a huge problem if they did, but we'd redirect ones likely to hang around to here
13:25:47 <astrolabe> Ah.  I agree about no need at the mo.
13:33:08 * CosmicRay notes that there are bots that bridge two networks
13:33:52 <wli> I can do that, though it's not quite *that* urgent.
13:44:38 <SyntaxNinja> w00t
13:44:53 <Heffalump> you get pretty ugly lines, though
13:45:02 <Heffalump> and if the bots die or are netsplit it's a lot worse
13:46:02 <Igloo> Also, the point would be to not have them bridged
13:47:19 <Oejet> shrimpx: I've got the book.  Even taking the course next semester with one of the Nielsons. :-)
13:50:10 <df_> irritating problem.  I have a class (although that could/should probably be removed) that is designed to abstract operations on a stream.  Ie, we have takeS which returns a number of elements from a stream and also the leftover stream (very similar to splitAt).
13:50:11 <Oejet> shrimpx: The book is heavy on math but the subject is very much practical.  It shows among other things how different analysis can be put into the same framework.
13:50:38 <df_> There is a function takeWhileS, which like takeWhile takes items from a stream while some predicate holds - the difference is that this predicate is based on the stream rather than each element.  takeWhileS should also return the leftover stream as well (much like span), however this is where my problem lies.  i end up with a stack overflow if takeWhileS would end up taking a large number of elements.
13:51:05 <df_> I think that i can see why, however - i'm failing to solve the problem.  Would anyone be able to take a look and offer anything in the way of comment? Code is avaliable at http://davidf.woaf.net/erk/ Stream.hs is the file containing takeWhileS (implementation at the bottom of the file).  evaluating `breakit' shows the problem
13:53:49 <shrimpx> Oejet: thanks
13:53:58 <RemiTurk> hi all
13:54:03 * RemiTurk has no new memos
13:54:11 <shrimpx> crap
13:55:35 <RemiTurk> uhm, does anyone have a hint to help me find out why compiling _without_ profiling _slows_ a program with a factor of 10 times :-|
13:55:54 <Heffalump> df_: you work for the BBC?
13:56:00 <df_> heffalump :: yes
13:56:21 <Heffalump> RemiTurk: Igloo had an example of a program that has space problems in that situation, due to some GC issue
13:56:59 <Heffalump> df_: what is the returned stream from the predicate used for?
13:57:15 <Igloo> It could also be that profiling disables an optimisation that is bad in your case
13:57:19 <RemiTurk> hm, I'm not sure (will look in a minute) but +RTS -s didn't seem to show anything bad
13:57:52 <RemiTurk> Igloo: that just might be correct: compiling without -O and without -prof -auto-all is ok (fast) too
13:58:03 <df_> heffalump :: by using the predicate you have to peek at the stream, which has the ability to alter the stream, so the predicate has to return that stream
13:58:15 <df_> its subtle, nothing is removed or added, just the order changed
13:58:37 <df_> its to do with sparodic data travelling through a fifo
14:00:04 <Igloo> RemiTurk: I'd suggest trying to make a small example and sending it to the list. You might be able to work around it by slightly altering the code or adding a pragma or something
14:00:23 <Heffalump> what's your explanation of why?
14:01:56 <RemiTurk> Igloo: yeah, I guess I'll start a BBS (Bug Binary Search) :)
14:02:07 <Lemmih> Lunar^: Ping.
14:02:51 <df_> in this instance, the program had been designed in a way that i would synthesize hardware (its a model used to play with some designes and then it will be implemented in hardware).  takeWhileS is just like clocking data through a shift register and examining if the contents of the shift register match the predicate.
14:03:04 <SyntaxNinja> hmm... sometimes you have a class with functions that aren't really dependent upon the parameters; in a way
14:03:19 <SyntaxNinja> like, I want to use this class to provide a common interface
14:03:35 <SyntaxNinja> but the difference between implementsion of the class won't be really related to the type params
14:03:49 <SyntaxNinja> so you almost don't need the parameter... except that you do.
14:03:53 <SyntaxNinja> because it's a class and all
14:04:12 <Heffalump> effectively you need an object of the type to act as a proxy
14:04:26 <Heffalump> for the class dictionary
14:05:00 <Heffalump> when I ran into this problem, I think I ended up making an explicit dictionary using a record datatype instead
14:05:17 <SyntaxNinja> Heffalump: what do you mean by dictionary?
14:05:32 <Heffalump> type classes are implemented with dictionaries (except in jhc)
14:05:42 <Heffalump> this gets silently passed around to functions at runtime
14:05:55 <Heffalump> and contains the definitions of all the class members for the type in question
14:05:56 <SyntaxNinja> yeah
14:06:27 <Heffalump> if you go with the type class solution, you end up needing an object of some type to explicitly pass around, to tell the type system which dictionary to use
14:06:34 <Heffalump> although the object itself is effectively dead
14:06:41 <SyntaxNinja> right
14:06:58 <Heffalump> I realised that using a record datatype was actually just as good, and rather less obfuscated.
14:07:02 * SamB points out that you could use a bottom of that type, too
14:07:08 <Heffalump> samb: right
14:07:10 <Heffalump> but you still need it
14:07:17 <Heffalump> so instead of class Matcher where
14:07:20 <SamB> yes, it looks silly...
14:07:29 <Heffalump> I have data Matcher = Matcher { ... }
14:07:42 <Heffalump> I guess you lose default declarations with that solution, though.
14:08:40 <SyntaxNinja> and matcher has a bunch of functions
14:08:40 <SyntaxNinja> ?
14:09:12 <Heffalump> SyntaxNinja: yep, the same ones that would go into the class definition
14:09:17 <df_> ideally what i wanted to do was have a `thing' that i can take data from, beit in bytes or booleans, without having to explicitly process the whole stream (ie (val1, bs') = takeS 1Byte bs ; (val2, bs'') = takeS 3bits bs;) - ie so that the backend for the `thing' could be replaced with more effective/efficient mechanisms than i was doing; however that is all beyond me in haskell
14:09:23 <Heffalump> simplematch is one of the members
14:09:36 <Heffalump> so you can for example just write simplematch fastmatcher ...
14:09:51 <SyntaxNinja> Heffalump: right. hmm.
14:09:52 <Heffalump> instead of simplematch (undefined :: FastMatcher) ...
14:10:03 <SyntaxNinja> Heffalump: but that doesn't save you from having to pass the type param in, right?
14:10:09 <Heffalump> (with the type class solution you could of course just define fastmatcher = undefined :: FastMatcher)
14:10:15 <Heffalump> no, of course not, because the type system isn't psychic
14:10:32 <Heffalump> I just felt that my solution was less obfuscated than using a type class.
14:11:25 <SyntaxNinja> Heffalump: so a solution I was thinking of makes it almost as if you didn't have to pass the extra parameter :)
14:11:55 * Heffalump doesn't follow
14:12:02 <SyntaxNinja> hm. it's  alittle complicated.
14:12:38 <SyntaxNinja> so you have class MyClass a where
14:12:38 <SyntaxNinja>   foo :: Int -> Int -> MyMonad a String
14:13:01 <SyntaxNinja> then instance MyClass Bar where
14:13:01 <SyntaxNinja>   ...
14:13:15 <SyntaxNinja> and ummm
14:13:34 <SyntaxNinja> type MyConvinentBar = MyMonad Bar
14:13:57 <SyntaxNinja> so the effective type of foo is "foo :: Int -> Int -> MyConvinientBar String"
14:14:49 <SyntaxNinja> does that make any sense?
14:15:07 <SyntaxNinja> I might have got it wrong. Let me make a small example.
14:16:13 <Heffalump> yes, I understand your idea
14:16:26 <Lemmih> Greetings, JaffaCake.
14:16:27 <RemiTurk> hi simon
14:16:28 <Heffalump> basically you can wrap the type parameter up in any convenient thing
14:16:47 <JaffaCake> hi all
14:17:07 <Heffalump> but the solution depends on the structure of your particular set of functions (you need MyMonad to occur precisely once in each of the functoin types)
14:17:08 * RemiTurk is refactoring a homework-assignment into a bug-report (-O slowing down)
14:17:30 * RemiTurk laughs maniacally at JaffaCake
14:17:44 * JaffaCake runs away
14:17:52 <RemiTurk> :)
14:17:56 <Heffalump> clearly RemiTurk should do less homwork
14:19:19 <RemiTurk> we decided just today that our (optional) course in Distributed Computing was so superficial + nightmares-about-previous-years-java-hell we'd better drop it, so I _am_ doing less, Heffalump ;)
14:19:59 <Heffalump> :-)
14:22:19 <xerox> Does Parsec come by default with ghc's debs?
14:22:30 <Lemmih> Yes.
14:23:00 * Lemmih hopes that will change in the future, tho.
14:23:09 <xerox> "import Parsec" and ghc --make Main.hs gives me a not found error
14:23:30 <skew> xerox: Text.ParserCombinators.Parsec
14:23:42 <df_> heffalump, sodit, there isn't anything magical about that code.  doing  span (\_ -> True) (repeat 1) will die, so i guess it isn't possible
14:24:18 <Heffalump> with a stack overflow?
14:24:30 <skew> Heffalump: what was your typeclass issue?
14:24:34 <Heffalump> I guess you just need to come up with some way of making the recursive call be a tail call.
14:24:58 <Heffalump> skew: I don't recall having one, apart from the solution I just discussed with SyntaxNinja.
14:25:02 <SyntaxNinja> Heffalump: yep, but it does happen to occur like that.
14:25:07 <SyntaxNinja> JaffaCake: hiya
14:25:17 <JaffaCake> yo
14:25:18 <df_> stackoverflow, yes
14:25:31 <SyntaxNinja> Lemmih: I think that even with hackage, people will want to use apt still :)
14:25:34 <skew> Heffalump: I couldn't find the original problem for that discussion
14:25:42 <Heffalump> skew: it was the one SyntaxNinja described
14:25:51 <skew> when?
14:25:56 <Heffalump> at the beginning
14:26:10 <Heffalump> just the general problem of how to use type classes when you don't really want a set of methods associated with any particular value
14:26:13 <Lemmih> SyntaxNinja: Sure. But a bloated set of standard libraries isn't nice.
14:26:15 <SyntaxNinja> Heffalump: do you like my solution? :)
14:26:27 <SyntaxNinja> Lemmih: oh right...
14:26:45 <Itkovian> howdy
14:26:47 <SyntaxNinja> Lemmih: but it would be nice to be able to say "cabal-get update stdLibs"
14:26:57 <Itkovian> ... alive in the superunknown ... etc. etc.
14:27:04 <Heffalump> SyntaxNinja: dunno about 'like' :-)
14:27:07 <Itkovian> I need a decent conversation.
14:27:09 <Itkovian> :-)
14:27:15 <SyntaxNinja> Heffalump: bah. you're just jealous
14:27:27 <Heffalump> I have a sort of half-feeling that MyMonad a should be replaced with its own type class.
14:27:35 <SyntaxNinja> hm...
14:27:38 <Heffalump> but I don't know your application well enough
14:27:48 <SyntaxNinja> mymonad encapsulates the IO monad.
14:27:57 <Heffalump> but it does seem like your solution only works precisely because you _could_ use a type class in place of MyMonad a
14:28:12 <SyntaxNinja> hm. i'll keep thinking about it.
14:28:16 <SyntaxNinja> you're probably right.
14:28:28 <SyntaxNinja> meeting. bbiab. msg me if you have a flash of inspiration :)
14:29:53 <df_> heffalump :: span' p xs = (takeWhile xs, dropWhile xs)
14:30:26 <df_> for some reason though, that says `bad bad bad' to me
14:30:26 <Heffalump> ah, trading space for time, always a good plan :-)
14:30:34 <Heffalump> well, you'll do the same work twice.
14:30:37 <df_> yes
14:30:57 <Heffalump> but that saves you the cost of remembering how far you got with the work when doing it once
14:31:14 <Heffalump> you may find that making the one pass version strict in some appropriate place has the same effect
14:31:20 <Heffalump> but I'm theorizing wildly here, really.
14:32:30 <df_> ammusingly its what i was trying to avoid earlier.  very early revisions had something (more elaborate) that worked the same way with a comment of `-- urgh, make it compute it only once'
14:32:46 <df_> also explains the nice sawtooth on the profiling report
14:33:47 * RemiTurk cut ~120 lines from his once-homework
14:34:52 <Heffalump> ah, that'll reduce the risk of the GHC maintainers plagiarising your homework and selling it on the Internet, too ;-)
14:35:33 <RemiTurk> LOL
14:35:44 <RemiTurk> definitely
14:36:01 <RemiTurk> though I have to say it's more difficult to cut down that e.g. Data.HashTable was at the time
14:36:30 <RemiTurk> (probably not all that unexpected: dropping functions from a library versus cutting a program in half
14:39:11 * RemiTurk just managed to change to factor-10 slowdown into a factor-30 slowdown (do I get additional points for that?)
14:39:56 <skew> RemiTurk: I'm sure you could get one of the simon's to write your teacher a note excusing you from the assignment if you turn in a good enough bug report :)
14:40:25 <Lemmih> Sounds like a good opportunity to get into GHC hacking, RemiTurk (:
14:41:12 <RemiTurk> Lemmih: actually, I should really post (the start of) my GHC RTS/GMP adventure to glasgow-users one of these days
14:41:44 <RemiTurk> skew: I think I'll save kudo's till I can bother them for a thesis or something like that ;)
14:46:24 <Lunar^> Lemmih: pong
14:50:07 <Lunar^> Lemmih: what was it about?
14:50:15 <Lemmih> Lunar^: FormData.
14:50:36 <Lunar^> Lemmih: yep?
14:50:54 <Lemmih> Lunar^: It uses 'anyChar `manyTill` [some end of value here]' to parse uploaded files.
14:51:17 <Lemmih> But that doesn't run in constant space.
14:51:35 <xerox> skew, oh, thanks for the hint before, it worked.
14:53:12 <Lunar^> Lemmih: cool, Peter Simons will be happy to get any fixes I think
14:53:35 <Lunar^> Lemmih: I don't have any interest in it currently, so hack it happily  :)
14:53:56 <Lemmih> I was hoping you had a fix  (:
14:54:32 <Lunar^> hehe
14:54:45 <Lunar^> Have you looked crypt.to's repos
14:54:48 <Lemmih> Anyone know how to fix it?
14:58:58 <Lemmih> Ah. His repo looks good.
15:00:37 <Heffalump> hi malcolm
15:00:44 <malcolm> I exchanged email with someone at O'Reilly tonight. It seems they need to do some complex XML transformation, and are investigating using Haskell/HaXml as a way of taming the complexity.
15:00:52 <Heffalump> ooh, cool.
15:00:55 <Igloo> Nice
15:01:15 <Heffalump> on the subject of HaXml, btw, is a new release that works with GHC 6.4's package system likely to appear soon?
15:01:28 <malcolm> Yes, in a week or two.
15:01:37 <skew> does anyone else have the feeling that Haskell is finally on the verge of taking over the world?
15:01:38 <Heffalump> cool, thanks
15:01:45 <Heffalump> skew: yes
15:01:47 * SyntaxNinja waves vaguly at Lemmih who already has one working w/ cabal
15:01:54 <ron_> malcolm: Are you malcolm from the Haskell Cafe list?
15:02:00 <malcolm> It needs some testing - the O'Reilly chap was most helpful in getting it to work on Windows.
15:02:00 <Heffalump> (well, it's certainly shot up in visibility and popularity over the last 2 years or so)
15:02:01 <SyntaxNinja> skew: who told you!? ;)
15:02:39 <malcolm> ron_: yes
15:02:44 <skew> oh, pugs for one. Simon getting that SMP runtime going, Cabal coming together, STM being really cool
15:03:13 <Heffalump> I think darcs and pugs are great adverts for it
15:03:32 <Heffalump> and the growing library support is very important - especially things like haxml
15:03:47 <skew> So Haskell hasn't been almost ready to take over the world for the past thirty years, like fusion?
15:04:16 <ron_> It doesn't exist that long.
15:04:21 <malcolm> HaXml is getting a bit old now... could do with more development.
15:05:01 <Heffalump> it still seems to do the things I've wanted it for very well
15:05:05 <Heffalump> but those haven't been that taxing
15:05:08 <skew> ron_: there's an old joke/complaint that fusion researchers have said that fusion power is ten years away for the past thirty years
15:05:38 <Heffalump> what happened to Graham Klyne's work?
15:05:39 <ron_> skew: That's for most things where researchers need money. That's everywhere :)
15:06:12 <SyntaxNinja> do you guys have the sense that europe funds basic research better than the US?
15:06:30 <malcolm> Heffalump: Graham's work on HaXml?  It is still available on his website, but I haven't had time to integrate it back into my distribution.
15:06:31 <ron_> SyntaxNinja: no, but I am only a student.
15:06:34 <Itkovian> hmm ...
15:06:53 <malcolm> Heffalump: This is a case where something like darcs would be a big help.
15:06:56 <Itkovian> european project usually come with a shitload of money, but if thet're well founded is another question.
15:06:58 <ron_> SyntaxNinja: I do see a lot of useles stuff being funded, though.
15:07:06 <Itkovian> ron_: indeed
15:07:08 <ron_> SyntaxNinja: And a lot of useful stuff underfunded.
15:07:20 <SyntaxNinja> ron_: yeah
15:07:26 <skew> though it sounds like there's some progress on that front too. Yay for >1sec confinement times.
15:07:33 <Heffalump> I think there's a general trend everywhere away from basic research towards applied research
15:07:43 <Itkovian> to get the money you need to be a salesman, not a researcher
15:07:43 <ron_> Heffalump: Yes, too bad.
15:08:02 <ron_> And salesman aren't good researchers, most of the time...
15:08:34 * RemiTurk occasionally has some nagging feeling there's too many salesman at my university ;0
15:08:43 <Heffalump> what is your university?
15:09:16 <ron_> Now, the stuff gets spicy :)
15:09:32 <ron_> or was it juicy? , well you get the idea.
15:09:34 <RemiTurk> university of amsterdam
15:09:52 <ron_> You do Informatics?
15:10:05 <SyntaxNinja> malcolm: fwiw, we were tossing around ideas of integrating hackage / cabal and darcs to make a sourceforge type site.
15:10:27 <SyntaxNinja> where people could upload patches that'll be eamiled to the maintainer
15:10:45 <SyntaxNinja> and if the maintainer doesn't do anything for a while, the patches will be sitting there, and someoen can just say "ok, let's spin off a new version"
15:11:06 <ron_> Fork to the max idea :)
15:11:28 <malcolm> SyntaxNinja: Sounds good - as long as it is a loosely-coupled integration.  For a second I though you meant that darcs/hackage/cabal would become a single tool!
15:11:41 <SyntaxNinja> malcolm: oh my. that would be scary
15:11:46 <RemiTurk> ron_: artificial intelligence
15:12:14 <SyntaxNinja> ron_: yeah. it would have to be "hard" to make a fork, but a way to keep them centralized if it's necessary
15:12:14 * Lemmih cries out for an efficient Parsec.
15:12:53 <RemiTurk> which, as a half-joke, we often call "one-third linear algebra, one-third statistics and one-third bullshit, and that's optimistic"
15:13:01 <Heffalump> how would the version number of a fork work?
15:13:20 <RemiTurk> (though I still like my study ;))
15:14:07 <SyntaxNinja> Heffalump: who knows
15:14:21 <SyntaxNinja> Heffalump: maybe they'd be forced to make a new package name or something
15:14:23 <Heffalump> I suggest tagging it with an email address.
15:14:41 <Heffalump> but it's not clear how to indicate which the 'mainline' version or how to switch that over at some point
15:15:20 <SyntaxNinja> Heffalump: well, none of it's clear. it's just a random idea.
15:15:34 <Heffalump> I like the idea :-)
15:16:03 <df_> sleepeytime, night peoples, ta heffalump et al
15:16:18 <Lemmih> @seen Si\
15:16:20 <lambdabot> I saw Si\ leaving #haskell 2 hours, 11 minutes and 21 seconds ago.
15:17:02 <SyntaxNinja> l8r df_
15:17:17 <SyntaxNinja> Heffalump: cool :)
15:17:50 <SyntaxNinja> if we did a good job with "sandbox" on the servers, we could maybe automatically apply patches and run the tests suite against them.
15:17:56 <SyntaxNinja> since cabal will have a ./setup test target
15:19:11 <xerox> My connection is going to go down for two days, how can I get a local copy of: http://haskell.org/ghc/docs/latest/html/libraries/ ?
15:19:22 <Heffalump> apt-get install ghc6-doc
15:19:30 <xerox> Heffalump, where does it put them?
15:19:32 <Heffalump> </unhelpful if you don't use Debian>
15:19:37 <Heffalump> /usr/share/doc/ghc6-doc
15:19:52 <Heffalump> and http://localhost/doc/ghc6-doc/
15:20:23 <SyntaxNinja> xerox: there's also haskell-doc, which installs a handful of things
15:20:33 <xerox> SyntaxNinja, like?
15:20:34 <goron> RemiTurk: If you interested in AI: check this: agiri.org.
15:20:44 <Heffalump> the report and the gentle introduction, IIRC
15:20:58 <SamB> actually, the latest is 6.4 but testing only has 6.2
15:21:15 <xerox> Heffalump, great.
15:21:23 <xerox> http://localhost/doc/ghc6-doc/html/
15:21:28 <xerox> I didn't know it :)
15:21:42 <SyntaxNinja> xerox: haskell98-report, haskell98-tutorial
15:22:21 <SyntaxNinja> SamB: not sure who you're talking to; do you know about haskell-unsafe?
15:22:30 <SamB> haskell-unsafe?
15:22:41 <xerox> OK, thanks much.
15:22:52 <SamB> no, and from the looks of it neither does my apt
15:23:37 <SyntaxNinja> SamB: it's an apt repository that has ghc 6.4
15:23:51 <SyntaxNinja> @google haskell unsafe apt repository alioth
15:23:53 <lambdabot> http://alioth.debian.org/projects/haskell-unsafe/
15:24:08 * SyntaxNinja high-fives igloo
15:24:19 <goron> @google google
15:24:20 <lambdabot> http://www.google.com/
15:24:32 <xerox> @wikipedia Haskell
15:24:35 <lambdabot> http://en.wikipedia.org/wiki/Haskell
15:24:41 * xerox boings
15:24:55 <goron> @lambdabot show commands
15:24:55 <lambdabot> Unknown command, try @listcommands.
15:25:01 <goron> @listcommands
15:25:02 <lambdabot> Commands: all-dicts arr babel define definitions del-definition devils dice
15:25:02 <lambdabot> dict dict-help dummy dynamic-load dynamic-reload dynamic-unload easton echo
15:25:02 <lambdabot> elements eurohaskell eval fact fact-cons fact-delete fact-set fact-snoc
15:25:02 <lambdabot> fact-update foldoc fortune gazetteer get-definition google help hitchcock
15:25:02 <lambdabot> jargon join karma karma+ karma- kind learn leave listchans listcommands
15:25:02 <lambdabot> listmodules lojban moo more msg part paste pl pl-resume plugs pointless
15:25:04 <lambdabot> prelude quit quote reconnect remember resume seen set-fuel spell state timein
15:25:07 <lambdabot> topic-cons topic-init topic-snoc topic-tail topic-tell type vera version
15:25:09 <lambdabot> vixen web1913 wiki wikipedia wn world02 yow
15:25:13 <xerox> Ouch.
15:25:15 <Igloo> Debian experimental has better debs then H-U currently, I think
15:25:23 <goron> Wow, that sure are a lot more then a year ago.
15:26:00 <RemiTurk> goron: thanks *noted in his TODO ;)*
15:26:58 * RemiTurk is trying to get his Main.hs cut down to <140 lines
15:27:09 <RemiTurk> before going to socialize
15:27:43 <goron> RemiTurk: I am interested in AI too (I even think it's the only thing worth investigating (unless you decide not to investigate it *ever*), and this is the only viable thing I could find (except some privately funded stuff).
15:28:06 <Heffalump> @help pl
15:28:07 <lambdabot>  @pointless <expr> - play with pointfree code
15:28:12 <Heffalump> @help pl-resume
15:28:12 <lambdabot>  @pl-resume - resume a suspended pointless transformation.
15:28:30 <malcolm> RemiTurk: that's what I like to see - programmers who want to reduce code, rather than write more!
15:29:28 <RemiTurk> malcolm: finding bugs is rather difficult by introducing more of it ;0
15:31:05 <skew> RemiTurk: seems to work for some companies...
15:31:31 <goron> /s/some/most
15:31:32 <xerox> @pointless \f xs -> xs >>= return . f
15:31:33 <lambdabot> fmap
15:32:02 <skew> xerox: haven't you read Control.Monad recently?
15:32:08 <SyntaxNinja> RemiTurk: have you tried removing all the comments and type sigs?
15:32:18 <xerox> skew, I do like that @pointless :-D
15:32:18 <goron> :)
15:33:00 <goron> RemiTurk: You could also try to remove whitespace by introducing semi-colons :)
15:33:26 <goron> RemiTurk: Or claim that you have an invisible implementation...
15:33:52 <RemiTurk> SyntaxNinja: it's homework, do you really think I'd put comments into it? (wouldn't help anyway, the practicum assistent probably never used haskell, and certainly doesn't know what a State monad is..)
15:34:21 <Heffalump> does the assignment have a free choice of implementation language, then?
15:35:38 <RemiTurk> the practicum assistent suggested Matlab, me and a friend used python for part 1, which was unbearably slow (though, to be honest, perhaps partly due to me thinking in Haskell) and we're now doing it in haskell while I'm teaching my friend haskell at the same time ;)
15:35:56 <RemiTurk> language is free, though I won't get much practicum help this way
15:36:07 <RemiTurk> (from official channels ;))
15:37:22 <xerox> Hmm
15:37:43 <xerox> I didn't get the Parsec documentation with those apt-gets, right?
15:38:04 <xerox> This one: http://www.cs.uu.nl/people/daan/download/parsec/parsec.html
15:38:29 <Heffalump> I think Parsec is shipped in GHC
15:38:30 <Heffalump> so you should
15:38:32 <RemiTurk> and the slow down is up to 50x...
15:38:39 <RemiTurk> and the code back to 135 lines
15:38:45 <RemiTurk> so /me is going to have a life :)
15:38:47 <Heffalump> get the haddock docs, anyway
15:38:59 <RemiTurk> good night everyone
15:39:00 <Heffalump> ah, but not that stuff, no
15:39:05 <xerox> Heffalump, but /usr/share/doc/ghc6-docs/libraries/parsec, it's just an haddock page
15:39:16 <xerox> "just", it's a good Haddock page :)
15:39:40 <Heffalump> yeah
15:39:55 <Heffalump> I suggest wget -m if you want that page too
15:40:14 <Heffalump> (with some care that it doesn't retrieve too much, and hope that it uses relative links)
15:40:29 <xerox> Sigh.
15:40:59 <xerox> There is also a PDF version..
15:41:15 <Heffalump> yeah, I was just going to suggest that
15:41:22 <Heffalump> though I can't actually see where it is, just that it exists
15:41:34 <xerox> It's on the homepage: http://www.cs.uu.nl/people/daan/parsec.html
15:41:40 <Heffalump> s/html/pdf/ in the URL works :-)
15:41:46 <xerox> ehe!
15:42:02 <xerox> Anyway it's only two days.. I don't think I'll go that far..
15:42:29 <xerox> Is there a way to get an @index locally?
15:43:26 <Heffalump> a what?
15:43:34 <xerox> @index as in the lambdabot command
15:43:34 <lambdabot> Unknown command, try @listcommands.
15:43:43 <xerox> Err, that suppressed command :)
15:43:49 <Heffalump> what's it do?
15:44:05 <xerox> It lists where something is defined.
15:44:14 <xerox> @index fromJust
15:44:15 <lambdabot> Unknown command, try @listcommands.
15:44:23 <Heffalump> can you just install your own lambdabot + IRC server?
15:44:29 <xerox> Ouch :D
15:44:44 <Heffalump> I'll have a quick look at the source
15:45:56 <xerox> It's probably Plugins/Haddock.hs
15:46:14 <Heffalump> wow, 335 patches to pull
15:46:21 * Heffalump may take a little while
15:46:23 <xerox> Yep :D
15:46:45 <Heffalump> but if you know where it is you can probably read it as well as I can :-)
15:47:40 <xerox> It doesn't seem too complex
15:48:07 <xerox> It still uses FiniteMap, tough - is it a sign that the code isn't much updated?
15:48:49 <xerox> EXCLUDED_MODS=  Haddock Hello Cmafihe
15:48:54 <xerox> (In the Makefile :-\)
15:49:45 <Heffalump> @plugs unsafePerformIO (putStrLn "foo")
15:49:50 <lambdabot> Variable not in scope: `unsafePerformIO'
15:49:58 <Heffalump> @plugs putStrLn "foo"
15:49:58 <xerox> @help @plugs
15:49:59 <lambdabot> No IO allowed
15:49:59 <lambdabot>  @help <command> - ask for help for <command>
15:50:04 <xerox> @help plugs
15:50:05 <lambdabot>  @plugs <expr>
15:50:05 <lambdabot> You have Haskell, 3 seconds and no IO. Go nuts!
15:51:38 <xerox> OK, I can't get it working.  Any news, Heffalump?
15:51:58 <Heffalump> I'm on patch 81 :-)
15:52:18 <xerox> Ouch
15:52:38 <Heffalump> it's not darcs being slow, it's me reading the patch names
15:53:34 <xerox> Ah, you're manually reading them?
15:53:43 <Heffalump> yes, I want to know what's changed.
15:53:49 <Heffalump> I guess I could read them later.
15:54:47 * Heffalump clones the repo so I can pull to the clone later and does a pull -a
15:55:53 <Heffalump> this time it is darcs' fault that I'm sitting here waiting :-)
15:56:01 <xerox> :D Thanks much
15:57:06 * SyntaxNinja tries to figure out if "pretty defensible" can be taken as a compliment from spj ;)
15:57:13 <SyntaxNinja> JaffaCake: any intuition?
15:58:41 <Heffalump> sounds like it might be a few steps down from 'Damascus-road experience' ;-) (http://www.research.ibm.com/compsci/plansoft/plday/plday2005.html#1)
15:59:54 <SyntaxNinja> "This isn’t a Haskell-ghetto talk"?
16:00:03 <SyntaxNinja> Heffalump: is Damascus-road in the Haskell-ghetto somewhere?
16:00:08 <Heffalump> xerox: I can't even configure it, let alone build it :-(
16:00:23 <xerox> Heffalump, oh?
16:00:24 <Heffalump> automake complains that I should run aclocal, even after I have run aclocal.
16:00:32 <xerox> I think it's autoreconf && sh configure && make
16:00:53 <Heffalump> ah, yes, ta
16:00:58 <xerox> Good!
16:01:23 <Heffalump> bah, it wants hs-plugins which I don't have installed on this machine
16:01:32 <Heffalump> I think trying to build it is becoming more painful than I have time for
16:01:40 <xerox> OK :-\
16:01:56 <Heffalump> sorry
16:02:16 <xerox> NP. thanks for the time spent
16:02:18 * Lemmih mumbles something about a half-finished cabal-get.
16:02:32 <Heffalump> looks to me like you could rip out the Haddock support into a standalone program fairly easily, though
16:02:56 <Heffalump> SyntaxNinja: I expect so.
16:03:17 <xerox> Heffalump, I should really sleep, if you ever come up with something, if you have time, privmsg me it, ok?
16:03:32 <xerox> I think I have another 6 hours of connection.
16:04:08 <skew> Google knows - that's a reference to the story in the bible where Saul, on the road to damascus, is literlly knocked down by a light from heaven, and told by god to follow him
16:04:30 <skew> so yeah, "pretty defensible" is probably a few steps down
16:05:00 <SyntaxNinja> skew: I know what damascus road is, I don't know what it has to do with SPJ or that talk.
16:05:32 <SyntaxNinja> hm. well, I guess I get it
16:05:38 <Heffalump> SyntaxNinja: he was implying that STM was his salvation
16:06:20 <thou> did it blind him for a few days?
16:19:27 <SyntaxNinja> do folks think we should ask libraries@ or haskell-cafe about the name of the new server?
16:19:32 <SyntaxNinja> (the community.haskell.org server)
16:19:43 <SyntaxNinja> or would that just generate an annoying thread?
16:20:24 <Igloo> I doubt you would get a concensus
16:20:41 <Igloo> I'd prefer hackage to be something top-level FWIW
16:21:11 <SyntaxNinja> what do you mean top-level?
16:21:29 <Igloo> foo.haskell.org rather than community.haskell.org/foo/
16:21:38 <SyntaxNinja> gotcha
16:22:53 <Heffalump> what is this community server going to do?
16:23:30 <Igloo> Does server mean physical machine? If so, whose where?
16:24:50 <SyntaxNinja> Heffalump: it'll host hackage and probably sequence
16:24:53 <SyntaxNinja> and maybe other stuff
16:25:03 <SyntaxNinja> Igloo: it'll also be called haskell.galois.com, fwiw ;)
16:25:19 <Igloo> Ah, right  :-)
16:26:41 * Igloo suspects we could easily find one or two people willing to host mirrors, which would be worthwhile IMO just in case the machine blows up or whatever
16:26:50 <SyntaxNinja> Igloo: totally agree
16:27:05 <SyntaxNinja> and it would probably be good to have a European mirror
16:28:19 * boegel greets the bunch of haskell hackers
16:29:48 <Lemmih> Yo boegel.
16:29:55 <boegel> yo Lemmih
16:30:21 <boegel> don't bother commenting on the things I say now, because I'm not that sober right nox
16:30:32 <boegel> s/nox/now
16:31:13 <blackdog> boegel: the best thing you can think of to do while drunk is hang out in an irc channel? Go tip over some cars, man, you'll love it.
16:31:16 <SyntaxNinja> hi boegel
16:31:31 * SyntaxNinja turns on logging
16:31:45 * Heffalump volunteers urchin assuming the requirements aren't too onerous
16:31:46 <Lemmih> You are you ready to quote, lambdabot?
16:32:00 <SyntaxNinja> Heffalump: yay
16:32:07 <boegel> blackdog: I've already turned over cars, there no more excitment in that
16:32:17 <Heffalump> urchin is currently running woody and isn't too well off for disk space, though.
16:32:22 <boegel> I actually got drunk whilst doing a quiz :)
16:32:24 * Igloo looks forward to the day the requirements are too onerous  :-)
16:32:25 <SyntaxNinja> Heffalump: those may be problems ;)
16:32:42 <Heffalump> a hardware upgrade and a software upgrade are both vaguely planned, though
16:33:16 <Heffalump> the software upgrade will start once sarge is security-tracked, and the hardware upgrade requires one of the owners to prod the others into action
16:33:33 <boegel> SyntaxNinja: there won't be much to log, don't even bother to turn on logging, all you'll achieve is less disk space
16:35:29 * Lemmih throws a shapr lambda after all web-sites that require Flash.
16:35:51 * boegel hates flash too
16:35:53 <SyntaxNinja> you typed shapr instead of sharp, dude.
16:36:06 * boegel laughs
16:36:39 <stepcut> mmm. flash
16:37:23 <boegel> this is kinda cool though: http://fun.drno.de/flash/BigRedButton.swf
16:37:40 <boegel> who can resist ! :)
16:38:07 <stepcut> heh, reminds me of 'The really big button that does not do anything'
16:38:32 <stepcut> http://www.pixelscapes.com/spatulacity/button.htm
16:40:39 <marcot> Hello.
16:40:54 <marcot> How do I get argc and argv in haskell?
16:40:58 <Lemmih> I've been brainwashed by shapr.
16:41:03 <SyntaxNinja> Lemmih: cabal-get should now have a debug command?
16:41:09 <SyntaxNinja> marcot: getArgs
16:41:15 <marcot> SyntaxNinja: thanks.
16:41:15 <SyntaxNinja> @type System.IO.getArgs
16:41:22 <lambdabot> bzzt
16:41:26 <Lemmih> @type System.Environment.getArgs
16:41:27 <lambdabot> System.Environment.getArgs :: IO [String]
16:41:31 <SyntaxNinja> Lemmih wins
16:41:42 * Lemmih does the happy dance.
16:41:47 <SyntaxNinja> marcot: there's also a getOpt library that's pretty cool.
16:41:49 <Lemmih> SyntaxNinja: Yes.
16:42:06 <marcot> SyntaxNinja: hum... that's what I am looking for. Thanks.
16:42:24 <SyntaxNinja> Lemmih: hm. I think I pulled, built, and installed, but no debug command.
16:42:25 * boegel goes to bed, bye everyone
16:42:39 <SyntaxNinja> bye boegel
16:42:55 <Lemmih> SyntaxNinja: What does ./cabal-get --help say?
16:43:10 <SyntaxNinja> doesn't list build.
16:43:11 <SyntaxNinja> er
16:43:14 <SyntaxNinja> doesn't list debug
16:43:15 * Heffalump finds the loop in the big red button
16:43:21 <Heffalump> and I'm not even drunk. How sad is that?
16:44:04 <Lemmih> SyntaxNinja: pull again (:
16:44:26 <SyntaxNinja> Lemmih: did you push something new?
16:45:06 * SyntaxNinja cleans and tries again
16:45:17 <Lemmih> Nope. Just hoping you tyop'ed 'pull' before.
16:45:34 <SyntaxNinja> OK it's there now.  strange.
16:52:12 <SyntaxNinja> Lemmih: hm. it complains about not being able to find a setup script, though it has Setup.lhs
16:52:19 <SyntaxNinja> Lemmih: this is much better, btw!
16:53:00 <Lemmih> What are you installing?
16:53:15 <SyntaxNinja> a fake cabal
16:53:22 <SyntaxNinja> just has a setup script and a .cabal file
16:54:00 <Lemmih> In its own directory?
16:54:14 <SyntaxNinja> it's like cabal/{Setup.lhs, Cabal.cabal}
16:54:52 <Lemmih> Weird. Try exchanging 'install' with 'debug'.
16:55:20 <SyntaxNinja> not much info; just tells me where it's downloading it from
16:55:26 <Lemmih> And look at the files from the downloaded tarball.
16:56:40 <Lemmih> Debug should probably be renamed to Show.
16:58:20 <SyntaxNinja> hm. didn't actually download the tarball looks like
16:58:23 <SyntaxNinja> but I can wget from that location
16:58:51 <SyntaxNinja> does the directory name have to be the same as the package name? I would guess so
17:00:05 <SyntaxNinja> Lemmih: it downloads it to etc? it's there, but witout the extension
17:00:30 <SyntaxNinja> ahh. I deleted that and it worked.
17:00:37 <SyntaxNinja> must have been failing on a mkdir or something
17:00:49 <blue17> Hi
17:01:04 <SyntaxNinja> blue17: hi
17:01:07 * SyntaxNinja has to get going.
17:01:13 <Lemmih> SyntaxNinja: You can use ./cabal-get clean to remove the packages.
17:02:01 <blue17> When parsing and using the do command, what would d <- digit do?
17:02:11 <SyntaxNinja> it says configure failed, but that's not surprising. OK I'll have to upload a real package
17:02:13 <SyntaxNinja> blue17:
17:02:16 <blue17> Would that just mean any digit?
17:02:18 <SyntaxNinja> @wiki ThatAnnoyingIoType
17:02:19 <lambdabot> http://www.haskell.org/hawiki/ThatAnnoyingIoType
17:02:43 <SyntaxNinja> blue17: it's kinda like assignment. d is the result of the function digit, generally.
17:02:48 <Lemmih> @google haskell parsec
17:02:49 <lambdabot> http://www.cs.uu.nl/~daan/parsec.html
17:02:50 <SyntaxNinja> but I don't know specifically what your code does.
17:02:52 <nuffer> where are True and False defined?
17:03:04 <Heffalump> in the prelude somewhere I suppose
17:03:04 <nuffer> I keep getting "Not in scope: data constructor `True'"
17:03:31 <Lemmih> nuffer: Did you hide the Prelude?
17:03:59 <nuffer> no, I don't think so
17:04:26 <blue17> What does the function digit do?
17:04:33 <blue17> Its not a standard function is it?
17:04:49 <Lemmih> blue17: See the parsec documentation if you're using parsec.
17:05:45 <blue17> ok
17:06:04 <blue17> Im using ParseLib
17:06:52 <Lemmih> The consult the ParseLib documentation.
17:06:56 <Lemmih> *Then
17:10:49 <mauke> @plugs 2+2
17:10:54 <lambdabot> 4
17:11:00 <mauke> @plugs 2 `negate`
17:11:01 <lambdabot> No instance for (Num (t -> t1))
17:11:01 <lambdabot>       arising from the literal `2' at <Plugins.Eval>:1
17:11:01 <lambdabot>     In the first argument of `negate', namely `2'
17:11:01 <lambdabot>     In the first argument of `show', namely `(2 negate)'
17:11:01 <lambdabot>     In the second argument of `take', namely `(show ((2 negate)))'
17:11:16 <mauke> whoa
17:13:52 <Lemmih> @plugs whoa
17:13:53 <lambdabot> Variable not in scope: `whoa'
17:15:02 <mauke> I thought a `b` was equivalent to b a
17:17:48 <thou> a `b` c is equivalent to b a c
17:18:14 <thou> but `b` is a binary operator, i believe
17:18:23 <Heffalump> @plugs negate 2
17:18:25 <lambdabot> -2
17:18:41 <Heffalump> @plugs (2 `negate`)
17:18:42 <lambdabot> No instance for (Num (t -> t1))
17:18:42 <lambdabot>       arising from the literal `2' at <Plugins.Eval>:1
17:18:42 <lambdabot>     In the first argument of `negate', namely `2'
17:18:42 <lambdabot>     In the first argument of `show', namely `((2 negate))'
17:18:42 <lambdabot>     In the second argument of `take', namely `(show ((2 negate)))'
17:18:45 <Heffalump> odd
17:19:07 <Heffalump> oh, using negate as an infix operator makes no sense
17:19:10 <mauke> IIRC (2 `negate`) worked in nhc98
17:19:17 <Heffalump> it can't take two arguments
17:19:57 <Lemmih> @plugs let n = const.negate in 2 `n` undefined
17:19:58 <lambdabot> -2
17:40:06 <nuffer> how do I get an Int from a String?
17:40:51 <thou> read
17:41:12 <thou> @plugs read "200"
17:41:14 <lambdabot>     Ambiguous type variable `a' in these top-level constraints:
17:41:14 <lambdabot>       `Show a' arising from use of `show' at 1
17:41:28 <thou> @plugs (read "200") :: Int
17:41:29 <lambdabot> 200
17:41:42 <nuffer> ah, thank you very much
17:42:12 <thou> sure
17:45:04 <wagle> @plugs (read "48738374343") :: Int
17:45:06 <lambdabot> 1493734087
17:45:16 <wagle> heh
17:47:09 <lispy> @plugs (read "48738374343") :: Integer
17:47:11 <lambdabot> 48738374343
17:47:26 <lispy> that's refreshing :)
17:49:02 <lispy> "things" can be in multiple type classes, but they can only have one type right?
17:49:22 <thou> yes
17:49:30 <wagle> "Int considered harmful and type unsafe"
17:49:47 <lispy> wagle: yes
17:50:42 <lispy> so in lisp if i do (/ 5 2) I get 5/2 as the result, is there something similar for haskell?  some divide operation that turns Integers into rational numbers?
17:51:14 <nuffer> how do I convert a Fractional Int to an Int?
17:51:28 <lispy> and then does the polite thing of reducing to lowest terms (ie. dividing numerator and denominator by their gcd)
17:51:43 <nuffer> oh, round, there we go
17:51:44 <nuffer> how intuitive
17:51:46 <dons> @plugs 1/2 :: Rational
17:51:48 <lambdabot> 1 % 2
17:52:05 <dons> @plugs 1/2 :: Float
17:52:07 <lambdabot> 0.5
17:52:09 <lispy> @plugs 10/4 :: Rational
17:52:11 <lambdabot> 5 % 2
17:52:21 <lispy> ah nice
17:52:49 <lispy> @plugs 1/2
17:52:51 <lambdabot> 0.5
17:52:56 <lispy> that explains it then
17:53:03 <nuffer>     No instance for (Fractional Int)
17:53:03 <nuffer>       arising from use of `/' at Calculator.hs:15:47
17:53:06 <nuffer> what does this mean?
17:53:38 <lispy> @plugs (4 :: Int)/(2::Int)
17:53:40 <lambdabot> No instance for (Fractional Int)
17:53:40 <lambdabot>       arising from use of `/' at : Int) / (2 :: Int))'
17:53:40 <lambdabot>     In the second argument of `take', namely
17:53:40 <lambdabot>         `(show ((4 :: Int) / (2 :: Int)))'
17:53:40 <lambdabot>     In the definition of `v':
17:53:41 <lambdabot>         v = (take 2048 (show ((4 :: Int) / (2 :: Int))))
17:53:41 <dons> can't force it to an Int.
17:54:05 <lispy> nuffer: try fromIntegral
17:54:12 <dons> @plugs 4 `div` 2
17:54:14 <lambdabot> 2
17:54:22 <dons> @plugs 5 `div` 2
17:54:23 <lambdabot> 2
17:54:40 <lispy> @plugs :t div
17:54:41 <lambdabot> Variable not in scope: `t'
17:54:48 <lispy> :)
17:54:52 <lispy> I should stop abusing the bot :)
17:54:55 <nuffer> that's what I was looking for
17:54:56 <Lemmih> @type div
17:54:58 <lambdabot> div :: forall a. (Integral a) => a -> a -> a
17:55:09 <dons> @type quot
17:55:12 <lambdabot> quot :: forall a. (Integral a) => a -> a -> a
17:55:18 <dons> @plugs 5 `quot` 2
17:55:19 <lambdabot> 2
17:56:11 <lispy> is lambdabot not allowed to use IO?
17:56:44 <lispy> (I'm wondering how it is safe to evaluate seemingly arbitrary code)
17:56:54 <Lemmih> @help plugs
17:56:55 <lambdabot>  @plugs <expr>
17:56:55 <lambdabot> You have Haskell, 3 seconds and no IO. Go nuts!
17:57:05 <lispy> ah, very nice
17:57:11 <dons> we've wondered this ourselves
17:57:18 <wagle> scheme has "exact" and "inexact" numbers
17:58:02 <lispy> yeah, i guess the next natural question is how is IO forbidden
17:58:44 <mauke> @plugs printStrLn "hello"
17:58:45 <lambdabot> Variable not in scope: `printStrLn'
17:58:52 <mauke> @plugs putStrLn "hello"
17:58:53 <lambdabot> No IO allowed
17:59:55 <dons> ok, firstly the value that results from the code you type in is subject to a Show constraint. But show isn't defined for IO.
17:59:59 <dons> hey TheHunter_
18:00:05 <wagle> @plugs (printStrLn "hello", 1)
18:00:06 <lambdabot> Variable not in scope: `printStrLn'
18:00:20 <dons> so the type system will rule out values of type IO.
18:00:22 <TheHunter_> hey dons
18:00:23 <wagle> shrug
18:00:39 <dons> then, there's a few ways around that.
18:00:53 <lispy> preform unsafe io?
18:01:22 <dons> so secondly, @plugs limits the module imports to those that are known to be safe
18:01:33 <dons> and that don't export coercion or unsafe functions
18:01:35 <wagle> @plugs let foo = printStrLn in foo "sss"
18:01:37 <lambdabot> Variable not in scope: `printStrLn'
18:01:45 <wagle> whats the scope thing?
18:01:56 <lispy> you want putStrLn
18:01:59 <lispy> (i think)
18:02:02 <dons> there's no function printStrLn
18:02:09 <wagle> @plugs let foo = putStrLn in foo "sss"
18:02:10 <lambdabot> No IO allowed
18:02:28 <wagle> @plugs let foo = putStrLn in (foo "sss", 1)
18:02:29 <lambdabot> No IO allowed
18:02:52 <wagle> @plugs (putStrLn "hello", 1)
18:02:54 <lambdabot> No IO allowed
18:03:02 <wagle> @plugs [putStrLn "hello", 1]
18:03:03 <lambdabot> No instance for (Num (IO ()))
18:03:03 <lambdabot>       arising from the literal `1' at 1
18:03:03 <lambdabot>     In the first argument of `show', namely `([putStrLn "hello", 1])'
18:03:03 <lambdabot>     In the second argument of `take', namely
18:03:03 <lambdabot>         `(show ([putStrLn "hello", 1]))'
18:03:13 <dons> heterogenous list
18:03:32 <lispy> dons: so, 1) the type system is used where possible, 2) careful analysis as to which modules are safe, anything else?
18:03:52 <wagle> oh, i misread that someone had used printStrLn above
18:04:16 <dons> there are resource limits enforce by the OS on how long a process can run: 3 seconds
18:04:19 <wagle> dons: i figured i had already beaten the dead horse enough
18:04:27 <dons> @plugs let f () = f () in f () :: ()
18:04:31 <lambdabot> Terminated
18:04:52 <wagle> @plugs [putStrLn "hello"]
18:04:53 <lambdabot> No IO allowed
18:05:00 <lispy> dons: okay, so 3 ways
18:05:10 <lispy> that's cool tho
18:05:17 <wagle> why cant you build IO values that you dont run?  8)
18:05:18 <lispy> sounds a bit easier than say, perl
18:05:31 <lispy> wagle: because of type errors?
18:05:38 <dons> wagle, you *can* build them, but can't show them
18:05:50 <dons> @type [putChar 'x']
18:05:52 <lambdabot> [putChar 'x'] :: [IO ()]
18:06:03 <dons> @type show [putChar 'x']
18:06:05 <lambdabot> bzzt
18:06:18 <dons> @plugs show [putChar 'x']
18:06:19 <lambdabot> No IO allowed
18:07:07 <wagle> i figured that lambda just grepped for "IO" in the results of @type, or somesuch
18:07:17 <dons> lispy, yeah, it's hard to think of how you could have a safe @plugs in another language, esp weakly typed languages
18:07:29 <dons> without resorting to chroots and the like
18:07:46 <dons> no grepping!
18:07:50 <dons> type safety
18:08:00 <thou> what's the difference?
18:08:02 <dons> much stronger guarantee that grep ;)
18:08:12 <thou> just kidding...
18:08:28 <wagle> it should just say bzzzt, then
18:08:46 <wagle> its specifically looking for "IO"
18:08:54 <dons> it's useful to know why the code won't run.
18:09:42 <lispy> but what about buffer overflows <g>
18:09:54 <dons> yes.
18:10:03 <lispy> @plugs scanf("%s");
18:10:05 <lambdabot> parse error on input `;'
18:10:08 <lispy> damn :)
18:10:26 <Lemmih> @plugs printf "%s"
18:10:27 <lambdabot> Variable not in scope: `printf'
18:10:35 <Lemmih> dons: No Text.Printf?
18:10:49 <dons> nope. maybe i should add it
18:10:50 <wagle> @plugs scanf ("%s")
18:10:51 <lambdabot> Variable not in scope: `scanf'
18:11:33 * Lemmih is using 'printf' often in Cabal-get.
18:11:54 <dons> Lemmih has been chosen by the dark side of the cabal
18:12:06 <wagle> kinda cheating to eliminate IO  8)
18:12:16 <dons> how?
18:12:40 <lispy> but what reasonable excuse is there for having IO in plugs?
18:12:56 <wagle> proof that haskell is superior
18:13:12 <dons> but the fact that we can rule out IO statically makes it superior
18:13:41 <dons> there's no safe @perl I'm fairly certain. Certainly not implemented in 20 lines like @plugs
18:13:44 <wagle> not that i think you should enable IO without something to restrict things
18:14:49 <lispy> well, plugs could safely use IO, but I can't think of a reason why I would want to create some arbitrary file
18:14:49 * wagle sees if he can make progress thinking about how to restrict IO to "acceptable" things using just the type system
18:15:06 <wagle> (probably not today)
18:15:09 <lispy> well, i can _think_ of reasons
18:15:20 <lispy> but mostly for piracy :)
18:15:59 <lispy> for example, plugs could write quotes or a log to HD thus using IO, but without giving us arbitrary access to such functionality
18:16:27 <dons> specific functions could be added via a module import of pure type.
18:16:38 <dons> or of a data type that is an instance of Show
18:16:50 <dons> writeLogFile :: Safe
18:16:54 <dons> instance Show Safe where ...
18:17:02 <dons> import SafeIO
18:17:13 <dons> then SafeIO functions would be available to @plugs
18:17:14 <wagle> "your job is to rebuild your unix file system, starting with only the echo and mount commands
18:17:18 <wagle> "
18:17:23 <lispy> heh
18:17:32 <dons> but I'm not convinced that i want to do this.
18:17:32 <lispy> can i have find too?
18:17:56 <lispy> with find, echo and mount i bet you could have a whole programming language :)
18:18:14 <lispy> (and no I'm not prepared to back up that claim)
18:18:20 <wagle> how you really want to restrict IO is quirte complex..  and I havent worked it all out (yet)
18:19:06 <wagle> no IO is just fine, i just wanna muse on someday permitting IO
18:19:38 <mauke> @perl is futile; for example, perl has at least three different ways of eval'ing arbitrary strings of code
18:19:39 <lambdabot> Maybe you meant: part pl spell vera
18:19:41 <wagle> lispy: you gotta implement find with echo
18:19:56 <lispy> wagle: haha
18:20:14 <wagle> mauke: Larry Wall has a rubber stamp that says "There's more than one way to do it!"
18:21:11 <mauke> and it lets you run arbitrary machine code (with a bit of hackery) :-)
18:21:28 <lispy> nice
18:21:45 <wagle> #poke
18:21:47 <lispy> wagle: assembly programming with echo would be a pain
18:22:12 <mauke> poke can be done in pure perl but it requires a unix-like system
18:22:19 <lispy> wagle: which shell can you assume?
18:22:31 <wagle> lispy: used to have to toggle asm from the front panel, a word at a time with toggle switches
18:22:59 <wagle> lispy: sh, only inline commands
18:23:01 <lispy> wagle: yes, but my understanding is that programs were much shorter back then
18:23:21 <lispy> wagle: so you can't create a script with echo and run that?
18:23:31 <wagle> actually, you toggled in the bootstrap
18:23:58 <wagle> lispy: script has to use commands that existt
18:24:32 <lispy> wagle: couldn't use access system calls from the script and start implementing conventional commands
18:24:38 <lispy> at least some system calls
18:25:13 <wagle> i gotta run now, sorry..  have fun
18:25:19 <lispy> :)
18:25:25 <lispy> okay, it's a silly thing to worry about
18:26:34 <lispy> "You're on a desert island with a SPARC station, on the sparc station there is no root password and the only binaries on the machine are mount, sh, and echo.  Rebuild a complete Sys V system to get off the island."
18:27:04 <lispy> "Yes that means the man pages too!"
18:27:49 <Palle> By using sockets how can i force blocking io?
18:33:41 <JohnMeacham> Easy. L1-a to drop into the rom monitor. look in the sys/*.h files to find the offset of the id in the kernel process memory space. pass the super secret option to ps which shows the kernel memory address of all processes (this exists) find your shell, use the offset from the header file and poke a zero into your uid field. you now have root. the rest is a SMOP.
18:34:50 <JohnMeacham> (This was how we dealt with IT people who set up your computer but forgot to leave the root password when I worked at Sun.)
18:36:00 <wli> That fails on modern systems largely because of memory protections.
18:36:10 <JohnMeacham> Oh? no 'ps'? then you can use 'echo $$' to get your shells pid, examine the appropriate entry in /proc to get the kernel address.
18:36:13 <wli> It would only work for ones where the u area was mapped with user privileges.
18:36:28 <JohnMeacham> nope. works on all suns where L1-A hasn't been disabled.
18:36:43 <wli> woops, from the PROM it doesn't matter
18:37:09 <wli> PROM has supervisor privileges etc.
18:37:40 <wli> OTOH I'm not entirely sure how you make sure you're in the right MMU context without more fiddling.
18:38:50 <wli> I guess if you nkow enough PROM commands you can probably find it in glboal kernelspace and switch to it by hand.
18:38:59 <wli> ergh
18:39:10 <wli> I guess if you know enough PROM commands you can probably find it in global kernelspace and switch to it by hand.
18:39:35 <wli> or otherwise the uid field is outside the u area.
18:39:53 <wli> (i.e. in struct proc or some such)
18:40:25 <JohnMeacham> yeah. I was in the kernel group so got quite familier with the ROM monitor. and the greatest debugger ever, 'adb'. (not counting the new 'mdb' which is even awesomer)
18:40:57 <wli> JohnMeacham: Do you know anything about JTAG pinouts on UltraEnterprise 3000's?
18:41:51 <JohnMeacham> no. I mainly dealth with hardware.
18:42:08 <JohnMeacham> s/hardware/software/
18:42:37 <wli> JohnMeacham: That would be very very hardware. =)
18:43:47 <dons> @seen TheHunter
18:43:49 <lambdabot> I saw TheHunter leaving #haskell 28 minutes and 26 seconds ago but I have
18:43:49 <lambdabot> missed 3 seconds since then.
18:44:02 <dons> oh very nice. persistent @seen
18:44:45 <Lemmih> Neat.
18:45:17 <dons> @karma+ TheHunter
18:45:19 <lambdabot> TheHunter's karma has been incremented
18:56:41 <JohnMeacham> What is karma?
18:58:12 <dons> @help karma
18:58:13 <lambdabot> return a person's karma value
18:58:25 <dons> it's a system of points awarded by users to other users
18:58:33 <dons> @help karma+
18:58:35 <lambdabot> increment someone's karma
18:58:35 <dons> @help karma-
18:58:36 <lambdabot> decrement someone's karma
18:58:49 <dons> @karma TheHunter
18:58:51 <lambdabot> TheHunter has a karma of 1
18:59:11 <JohnMeacham> I see. I think.
18:59:40 <Lemmih> @google karma
18:59:41 <lambdabot> http://www.ncf.carleton.ca/freenet/rootdir/menus/sigs/religion/buddhism/
18:59:41 <lambdabot> introduction/truths/karma2.html
18:59:44 <dons> hehe
19:40:02 <CosmicRay> Gooooood evening, #haskell!
19:40:41 <JohnMeacham> good evening! wait, are you in the states? I thought I was the only one :)
19:40:47 <thou> hi, CosmicRay
19:41:11 <CosmicRay> JohnMeacham: I am indeed.  And I didn't think you were because you always seemed to be going to bed about the time I was waking up :-)
19:41:14 <CosmicRay> hi thou
19:41:49 <JohnMeacham> same time zone even.
19:41:50 <CosmicRay> JohnMeacham: syntaxninja also lives here in the land of the patriot act.  I don't know of anyone else for sure, probably are some more though
19:42:54 <thou> i'll be back in the u.s. next year
19:43:46 <CosmicRay> JohnMeacham: oh?  I'm in CDT, your IP looks pacific :-)
19:45:03 <JohnMeacham> oh. never mind then. I am in socal.
19:45:17 <CosmicRay> I'm in Kansas (yes, we have internet here)
19:45:40 <JohnMeacham> I guess 'evening' encompases several hours :)
19:46:01 <CosmicRay> I'd say it's good for about 2.25 more around here :-)
19:47:57 <JohnMeacham> How goes the fptools darcs conversion? is it a go?
19:48:19 <CosmicRay> JohnMeacham: I haven't actually had a chance to get started much yet
19:48:48 <CosmicRay> simon got me access to the raw repo, which is good, because there is some funky stuff going on there that I don't think tailor can grok
19:48:57 <CosmicRay> I plan to tar it up and pull it down to my box to work with.
19:49:16 <CosmicRay> if tailor can't do it, I'm going to try cscvs (which is a very mature cvs -> arch converter) and then arch2darcs.
19:49:33 <CosmicRay> one way or the other, it'll have to work :-)
19:49:46 <JohnMeacham> coolio.
20:09:53 <CosmicRay> hello metaperl__
20:10:17 <CosmicRay> metaperl_______: perhaps you have too many irc clients :-)
20:43:06 <wli> Maybe I should try more traditional solid modelling.
20:43:18 <wli> before jumping into wild problems.
20:44:02 <thou> wli: are you using Haskell's OpenGL binding?
20:44:22 <wli> thou: I don't have enough of anything to call into it yet.
20:45:33 <wli> thou: I'm trying to learn about it, and so don't have anything like a plan or whatever (the "plan" that I'm talking about scrapping was doing an odd form of surface modelling, something that would be an alternative to quadrics and/or NURBS).
20:46:17 <thou> wli: i've been trying to find out why some OpenGL calls crash from Haskell, but work fine from C
20:46:29 <thou> wli: so i wanted to know if you've had success
20:46:40 <thou> i'm using ghc6.4 on freebsd
20:47:20 <wli> No clue. I've never done anything but run OpenGL demos. I've never rendered a single concrete surface model, only farted around trying to figure out other ways to do the surface models.
20:48:39 <wli> I'm beginning to suspect that level of experience with the rendering and concrete surface model construction bits (i.e. getting something like a physical instance of a basketball and turning it into a bunch of numbers comprising a surface model you can plug into the renderers) is inadequate for getting anywhere.
20:49:18 <thou> ok
20:49:32 <thou> well, i don't think i'll be much help to you in your quest either.  :-(
20:49:43 <thou> we can commiserate with one another though
20:50:22 <wli> Probably almost anyone who's written a line of OpenGL code can tell me something about how to get a computer to draw some pictures.
20:50:32 <thou> hehehe
20:50:40 <thou> ah
20:51:03 <thou> well, if you put the threshold that low, I might *just* be the person you're looking for
20:51:04 <thou> hehehe
20:51:36 <wli> Well, it starts that low, yes.
20:52:40 <wli> e.g. one of the demo things I saw was...
20:53:37 <wli> I'm completely clueless as to what just about any of that is doing apart from the pure (i.e. without side-effects) calculations involving vectors.
20:54:39 <thou> gah, I got it and then clicked on it in xchat and it disappeared from the File Receive List pop-up (/me never used dcc send before)
20:55:23 <wli> http://holomorphy.com/~wli/homotopy1.hs
20:55:35 <thou> ah, found where xchat hides those things
20:55:47 <wli> so, suppose I have something like a chrome cylinder
20:56:11 <thou> ok
20:56:24 <wli> in the midst of a blue sky extending infinitely in all directions
20:57:16 <wli> I don't know where to begin to do a still picture of it.
20:58:30 <SamB> @todo
20:58:31 <_samb_lambdabot> Todo Entries
20:58:31 <_samb_lambdabot>   * "working todo" (submitted by SamB)
20:58:31 <_samb_lambdabot>   * "working todo" (submitted by SamB)
20:58:31 <_samb_lambdabot>   * "working todo" (submitted by SamB)
20:58:31 <lambdabot>          (__)
20:58:31 <lambdabot>          (oo)
20:58:31 <lambdabot>    /------\/
20:58:31 <lambdabot>   / |    ||
20:58:31 <lambdabot>  *  /\---/\
20:58:32 <lambdabot>     ~~   ~~
20:58:34 <lambdabot> ...."Have you mooed today?"...
20:58:39 <SamB> what, now it works?
20:58:55 <wli> okay, ghc-6.2.2 + hopengl installed on an i386 box
20:58:56 <thou> wli: you set up stuff like camera (viewpoint), lights, etc.
20:58:57 <SamB> okay, I guess I don't have to ask for help with that wierd Prelude.cycle errror...
20:59:34 <wli> thou: is that OpenGL or is it stuff I cook up from scratch?
20:59:36 <thou> wli: and you set e.g., a default color  for the color buffer
20:59:40 <thou> opengl stuff
21:00:12 <thou> wli: that example is too complex
21:00:24 <wli> thou: Okay, what's simpler?
21:00:33 <thou> wli: in fptools/libraries/GLUT/examples/RedBook
21:00:39 <thou> (ghc distro)
21:02:12 <thou> http://cvs.haskell.org/cgi-bin/cvsweb.cgi/fptools/libraries/GLUT/examples/RedBook/Scene.hs?rev=1.2
21:02:20 <wli> thou: what's the CVSROOT again
21:02:22 <thou> wli: that might be a good one to start with
21:02:34 <thou> uh...
21:02:55 <thou>  :pserver:anoncvs@glass.cse.ogi.edu:2401/cvs
21:03:01 <wli> I don't know OpenGL in C either
21:03:13 <thou> right, that's no problem
21:03:54 <thou> if you look at that URL, you'll see that first it sets up a single light (Light 0)
21:04:15 <wli> in a myInit
21:04:33 <thou> yeah, that's not important - could be right in main
21:05:09 <wli> What's this DisplayCallback stuff
21:05:15 <thou> part of GLUT
21:05:23 <wli> Do you always need it?
21:05:37 <wli> better question
21:05:40 <wli> how do you use it?
21:05:41 <thou> depends on if you're using GTK, Win32, etc.
21:06:00 <thou> OpenGL doesn't know about X11, Win32, etc.
21:06:02 <wli> I'm on Linux and otherwise haven't really got my heart set on GTK vs. whatever.
21:06:17 <thou> so you need some layer on top of that to give you an opengl context
21:06:20 <thou> that you can draw on
21:06:27 <thou> also, to handle events like mouse clicks, etc.
21:06:41 <wli> What's $=?
21:06:43 <thou> GLUT is a portable one that comes with most all OpenGL implementations
21:06:55 <thou> an operator defined in the OpenGL bindings
21:07:01 <thou> i dunno exactly
21:07:03 <thou> :)
21:07:08 <thou> some way of setting state
21:07:50 <thou> wli: opengl is stateful
21:08:08 <wli> what package do I need to run Scene.hs in ghci?
21:08:15 <thou> GLUT
21:08:20 <thou> -package GLUT
21:08:36 * SamB notices that all this crashing is distracting and stops
21:08:39 <wli> ghci -package GLUT says unknown package name...
21:08:57 <thou> didn't get built in your haskell then :-(
21:09:03 <wli> doh
21:09:04 <thou> I think you have to say --enable-glut
21:09:11 <wli> sorry, wrong box
21:09:27 <SamB> heh
21:09:47 <SamB> _samb_lambdabot: @todo
21:09:48 <_samb_lambdabot> Todo Entries
21:09:48 <_samb_lambdabot>   * "working todo" (submitted by SamB)
21:09:48 <_samb_lambdabot>   * "working todo" (submitted by SamB)
21:09:48 <_samb_lambdabot>   * "working todo" (submitted by SamB)
21:10:00 <SamB> coolness!
21:11:12 <wli> oh
21:11:28 <wli> Maybe some of my prime ramification code has been done.
21:11:37 <wli> I saw imaginary/primes
21:12:27 <thou> i don't know what that means :-D
21:12:32 <wli> Loading package base ... linking ... done.
21:12:32 <wli> Loading package OpenGL ... ghc-6.2.2: can't load .so/.DLL for: X11 (libX11.so: cannot open shared object file: No such file or directory)
21:12:38 <wli> thou: don't worry about that
21:12:43 <wli> this errmsg is disturbing
21:13:41 <wli> $ ghc -package GLUT fptools/libraries/GLUT/examples/RedBook/Scene.hs -o /tmp/scene
21:13:41 <wli> compilation IS NOT required
21:13:54 <wli> /usr/bin/ld: cannot find -lSM
21:14:17 <SamB> is there a function to remove item number n from a list?
21:14:18 <wli> um, what hit me?
21:16:03 <thou> wli: hrmph
21:16:37 <thou> SamB: map . filter . zip should do it....
21:16:50 <thou> SamB: dunnno about a standard function though
21:17:17 <SamB> thou: that is good enough, thanks
21:18:30 <thou> wli: have you run any opengl haskell programs yet? or is that the first one you're trying?
21:18:32 <wli> how do I pass linker opts?
21:20:18 <thou> :-/
21:20:36 <thou> I don't know the answer to that
21:20:39 <wli> thou: I ran them on another box which is now out of disk space.
21:20:51 <thou> :-p
21:26:53 <wli> okay I'm out of commission for the time being
21:27:04 <thou> OK
21:27:26 <thou> sorry i don't know how to get you past those errors, aside from suggesting you rebuild ghc+libraries or something :-(
21:27:40 <wli> hmm
21:27:41 <SamB> _samb_lambdabot: @dynamic-reload todo
21:27:42 <_samb_lambdabot> module reloaded
21:27:44 <wli> trying real quick on another box
21:27:50 <wli> seems to be getting further
21:28:00 <SamB> @todo-del 0
21:28:01 <_samb_lambdabot> removed todo-item ("\"working todo\"","SamB")
21:28:01 <lambdabot> Unknown command, try @listcommands.
21:28:10 <SamB> @todo-del 0
21:28:11 <_samb_lambdabot> removed todo-item ("\"working todo\"","SamB")
21:28:12 <lambdabot> Unknown command, try @listcommands.
21:28:13 <SamB> @todo-del 0
21:28:14 <lambdabot> Unknown command, try @listcommands.
21:28:14 <_samb_lambdabot> removed todo-item ("\"working todo\"","SamB")
21:28:39 <SamB> @quit
21:28:40 <lambdabot> not enough privileges
21:29:22 <wli> libstdc++ weirdness
21:30:37 <wli> how do I get ghc to link statically
21:32:29 <wli> : warning: Using 'dlopen' in statically linked applications requires at runtime
21:32:29 <wli> the shared libraries from the glibc version used for linking
21:36:17 <wli> something is way way beyond h0rked here
21:38:27 <SamB> could somebody say: @todo-del 0
21:38:28 <thou> wli: I hear crickets chirping
21:38:30 <SamB> please?
21:38:43 <thou> SamB: sorry, can't help you there
21:38:46 <wli> thou: well, I didn't do it
21:38:51 <SamB> why not?
21:38:52 <thou> @todo-del 0
21:38:52 <_samb_lambdabot> not enough privileges
21:38:54 <lambdabot> Unknown command, try @listcommands.
21:38:58 <SamB> cool
21:39:04 <thou> just kidding
21:39:06 <SamB> @todo-del 0
21:39:07 <_samb_lambdabot> Prelude.(!!): index too large
21:39:07 <lambdabot> Unknown command, try @listcommands.
21:39:22 <SamB> hmm, got to work on that sometime.
21:39:40 <dons> @todo-del 0
21:39:40 <_samb_lambdabot> Prelude.(!!): index too large
21:39:41 <lambdabot> Unknown command, try @listcommands.
21:40:15 <dons> how you going with it, SamB?
21:40:43 <SamB> dons: I'm bundling it up. its a bit rough around the edges, but it works now.
21:41:02 <dons> ok. very nice. thanks!
21:41:17 <SamB> @todo-add clean up Todo plugin
21:41:18 <lambdabot> Unknown command, try @listcommands.
21:41:18 <_samb_lambdabot> added todolist entry
21:41:23 <SamB> @todo
21:41:24 <_samb_lambdabot> Todo Entries
21:41:24 <_samb_lambdabot>   * clean up Todo plugin (submitted by SamB)
21:41:24 <lambdabot>          (__)
21:41:24 <lambdabot>          (oo)
21:41:24 <lambdabot>    /------\/
21:41:24 <lambdabot>   / |    ||
21:41:24 <lambdabot>  *  /\---/\
21:41:25 <lambdabot>     ~~   ~~
21:41:27 <lambdabot> ...."Have you mooed today?"...
21:41:35 <dons> _samb_lambdabot: @help todo
21:41:36 <_samb_lambdabot> list todo entries
21:41:46 <wli> thou: after seriously ugly thwarting of userspace attempts to destroy all functionality on all my machines, I appear to have Scene.hs running
21:42:16 <thou> haha
21:42:18 <thou> ok
21:42:52 <wli> Okay, I forgot what I had set out to do.
21:42:52 <thou> wli: so at the very end you see mainLoop
21:43:21 <thou> wli: that is where GLUT takes over and displays the scene, handles mouse/keyboard events, etc
21:43:24 <wli> I seeit.
21:43:28 <thou> before that, you've set up some callbacks
21:43:41 <thou> reshape = when you resize the window
21:43:53 <thou> display = any time the thing needs to be redrawn
21:43:58 <thou> etc.
21:44:17 <thou> if you look at reshape, you'll see it's setting up the camera
21:44:27 <wli> thou: BTW, if you've got ICBM coordinates of whoever's responsible for all the library/etc. fsckups I just complained about I'd be much obliged if you could send them over (or if not to me then to the launch sites directly)
21:44:29 <dons> SamB: looks good!
21:44:37 <thou> hehe
21:45:36 <thou> wli: glasgow's pretty small, you're bound to hit someone who's at least remotely responsible
21:45:44 <wli> point
21:46:00 <SamB> is that where MS Research is located?
21:46:04 <thou> yes
21:46:06 <thou> hehe
21:46:08 <thou> i dunno
21:46:11 <wli> it is now =)
21:46:22 * thou is too new here to talk about that
21:46:45 <SamB> on the other hand, an ICBM aimed at the MS Research campus would pretty much guarantee trouble in the Haskell world...
21:46:50 <wli> can't install xlibs-dev (the old pkg things got 99% of their nonexistant symlinks from) b/c X is some nonstandard thing not in mainline X
21:47:04 <thou> wli: anyways, the Scene.hs sets up an orthographic projection, but there's a number of different functions to help set up perspective projections as well
21:47:09 <SamB> ... maybe that is MS's evil plan!
21:47:29 <SamB> they are using Simons as human shields!
21:47:30 <thou> wli: there's a lookAt function which lets you basically point a camera at part of your scene
21:47:51 <SamB> although that really doesn't do much for Redmond
21:48:15 <wli> I'll settle for nuking Redmond
21:48:39 <thou> wli: check out MoveLight.hs and Planet.hs for some easy intro to those things
21:48:45 <SamB> which has what to do with library troubles with Haskell in Unix?
21:48:55 <thou> wli: by the way, the RedBook is available online, you can read it
21:49:10 <wli> fptools/libraries/GLUT/examples/RedBook/MoveLight.hs:68:
21:49:11 <wli>     Variable not in scope: `$~'
21:49:26 <wli> fptools/libraries/GLUT/examples/RedBook/Planet.hs:67:
21:49:26 <wli>     Variable not in scope: `$~'
21:49:40 <wli> Let the pain begin
21:49:56 <thou> 16:48 ~/local/src/gl/RedBook$ ./MoveLight
21:49:56 <thou> zsh: bus error (core dumped)  ./MoveLight
21:50:14 <wli> SamB: No idea, but it would be rather entertaining regardless.
21:50:14 <SamB> dons: earlier today I was getting some wierd error about Prelude.cycle being applied to an empty list...
21:52:01 <dons> any way to reproduce it?
21:52:09 <wli> http://holomorphy.com/~wli/ZI.hs
21:52:23 <wli> prime ramification
21:52:26 <wli> in Z[i]
21:52:30 <SamB> dons: it was happening with @todo, but somebody seems to have fixed it
21:52:46 <wli> (for interested parties)
21:53:34 <SamB> it was not the part that converts a TodoState to a String...
21:53:53 <wli> Z[sqrt(-163)] etc. might be more interesting
21:54:01 <SamB> _samb_lambdabot: @quit
21:54:09 <wli> but nm that
21:54:40 <SamB> I rather suspected the function cleanOutput in IRC.hs
21:54:59 <wli> SamB: hmm, do you do things with hircules?
21:55:12 <SamB> wli: I don't even know what that is ;-)
21:55:12 <wli> I rather unsuccessfully tried to install/run/etc. that yesterday
21:55:20 <wli> SamB: Haskell IRC client
21:55:32 <SamB> no, that was lambdabot's IRC.hs
21:56:15 <dons> hircules is based on an older version of lambdabot, iirc
21:57:20 <SamB> well it probably wouldn't do much if it was based on the current lambdabot -- they wouldn't have had any time to implement any features
21:57:21 <wli> At any rate it appears to be a nightmare to get installed over here, which is a bit unfair, because the challenges should actually lie in things like, say, the actual code.
21:58:19 <SamB> lambdabot is probably ever-so-much-easier to get up and running (install is not the word for it)
21:58:42 <dons> it doesn't install yet.
21:58:52 <dons> haven't even tried to write that gmake code
21:58:56 <SamB> dons: should it ever?
21:59:00 <SamB> why bother?
21:59:08 <dons> possibly. State in /var/*
21:59:20 <dons> but it's a low priority
21:59:39 <dons> if people want to package it up for distribution, installation is importante
21:59:46 <SamB> everyone but you only runs it to hack it
21:59:52 <SamB> installing would just take time
22:00:02 <dons> yeah.
22:00:11 <dons> it would be the option of installing it.
22:00:19 <SamB> point
22:00:39 <SamB> has anyone asked about that?
22:00:46 <dons> like yi, it could be installed, or run inplace. but I don't care enough about it yet to hack it. and no one has asked
22:01:36 <SamB> yeah, features that nobody at all actually wants to use are not a very good use of time
22:02:13 <dons> right. :)
22:02:46 <SamB> does yi even actually support editing files yet?
22:02:53 <dons> of course. for months.
22:02:58 <dons> what did you think it was editing?
22:03:14 <thou> hehehehe
22:03:28 <SamB> I was using the emacs interface, which had no delete or backspace, remember?
22:04:05 <dons> oh, that's right. but that's be cause the emacs binding is a long way behind, and doesn't use any of yi at all, in comparison to the vi and vim bindings
22:04:22 <SamB> hence my question ;-)
22:04:48 <pimaniac> how much haskell knowledge is needed to work on the interface?
22:05:28 <SamB> pimaniac: its mostly using the Lexers library from CTK
22:06:01 <dons> a little. but nothing to scary. familiarity with lexer/parser combinators, and emacs would be required to hack on the emacss binding
22:06:39 <SamB> fortunately, dons got rid of the nasty problem with joining regexes that could match the same string...
22:07:18 <pimaniac> ah.  the combinator part is somewhat scary, because i cant read haskell enough to follow the papers, but i do know my emacs reasonably well
22:07:36 <SamB> well it doesn't actually look much like Emacs at this point
22:07:40 <pimaniac> at a higher level, the combinators just look like a nice regexp abstraction to me
22:07:50 <dons> the combinator actions are kind of abstract though.
22:07:51 <SamB> but on the other hand, there isn't anything very complicated in it either
22:07:58 <dons> as you're modifying a lexer table dynamically
22:08:41 <pimaniac> would it be a nice "learn haskell" project? :)
22:08:47 * SamB wanders off to watch anime and then sleep
22:09:06 <SamB> pimaniac: it would help you to learn stuff if you got anywhere at all
22:09:19 <SamB> if you don't get anywhere, lambdabot is good
22:09:35 <pimaniac> yeah, i saw the lambdabot work a bit earlier
22:09:42 <dons> lambdabot would be easier. more people submit lambdabot patches than yi patches.
22:09:44 <pimaniac> best of luck with that :)
22:10:09 <dons> but I'm hacking yi again now, so I expect yi to improve further in the next few months.
22:10:20 <pimaniac> ah.  i have the hardest time picking projects to learn languages on.
22:11:12 <Gahhh> who doesnt
22:11:22 <Gahhh> see John Meacham. Poor guy had to write a compiler ...
22:11:25 <SamB> to compare, I've added a few keybindings to Yi's Emacs interface, whereas I've added two modules to lambdabot ;-)
22:11:40 <SamB> and got rid of one too
22:12:30 <blackdog> pimaniac: lambdabot is nice because you see your modules being used... :)
22:12:46 <SamB> yes, people are using @google all the time ;-)
22:12:56 <pimaniac> gotcha :)
22:13:11 <thou> wli: gotta go; good luck, OK?
22:13:53 <thou> bye, SamB
22:13:59 <SamB> I don't know if the todo module will catch on or not, but that was dons's idea ;-)
22:14:14 <wli> thou: I'll need it, thanks.
22:14:14 * SamB remembers he was wandering off
22:14:16 <dons> i'll promote it
22:14:29 <pimaniac> SamB: bye bye, thanks for advice
22:14:50 <SamB> pimaniac: you're welcome ;-)
22:15:10 * dons just got a functional dependencies type error 20 lines long
22:15:19 <dons> also includes implict params and iorefs
22:16:01 <mwc> Hah, GCC template errors are worse
22:17:07 <mwc> I bet that error actually makes sense!
22:17:18 <mwc> "woah, is that a g++ template error or a core dump?!"
22:17:40 <dons> hehe
22:18:34 <wli> (sometimes, it's both)
22:19:07 <mauke> huhu, no matching function for call to std::foo<std::bar<_T> >::whatever(std::map<std::size_t, std::vector<std::string> >) [with _T = rofl]
22:19:28 <mauke> possible candidates are: [200 lines of horrible declarations]
22:19:40 <mwc> mauke, somebody's spent a little too much time there
22:20:02 <pimaniac> there?
22:20:10 <mwc> I hear Ada has a much more sensible generic system, so I'm learning that ATM for embedded systems
22:20:17 <mwc> pimaniac, there at that error dump
22:20:23 <pimaniac> ah, gotcha
22:20:55 <pimaniac> lisp seems to have a nice generics system :)  and i think java just got one
22:21:18 <mauke> java has fake generics AFAIK
22:21:34 <mwc> pimaniac, GNAT targets 68CH12, I don't know of any JVMS for that microcontroller
22:21:36 <mauke> it's all just Object containers and autogenerated typecasts
22:22:50 <pimaniac> mauke: interesting. mwc: ah, cpu needs
22:23:54 <mwc> I'm actually looking at doing a system for a buddy's car based on either a MiniITX board if we're ambitious or a gumstix board for lighting and feature controls
22:24:12 <pimaniac> i completely missed the words "embedded systems" and saw "generic system" :-P
22:24:32 <pimaniac> mwc: lighting and feature controls?
22:24:32 <blackdog> how do generics work in the context of lisp? I thought it was a static-typing thing...
22:24:45 <mwc> So with a 400 Mhz Xscale, I've been thinking it would be fun to try Haskell in an embedded scene
22:25:00 <pimaniac> blackdog: it looks like the object system is functions dispatching on type, not types with associated functions
22:25:30 <mwc> pimaniac, sex lights, exterior lighting, effect lighting
22:25:33 <mwc> he's doing a show car
22:26:00 <pimaniac> sex/effect lighting?  (i dont get out much)
22:27:19 <pimaniac> blackdog: why just a static typing thing?
22:27:24 <mwc> effect lighting is lighting under the vehicle underbody. I'm planning a set of fluorescents for a rippling effect. Sex lights are lights inside the interior (under seats, dash, etc)
22:27:43 <pimaniac> mwc: thank you. :)
22:28:22 <mwc> The original idea being, alledgedly, you can turn them on after having wild sex in the back seat to find your clothes
22:29:20 <pimaniac> and i thought that was what the clothes hooks were for.
22:35:52 <dons> @version
22:35:53 <lambdabot> lambdabot 2p399, GHC 6.4 (OpenBSD i386)
22:35:53 <lambdabot> darcs get http://www.cse.unsw.edu.au/~dons/lambdabot
22:35:58 <dons> @help todo
22:35:59 <lambdabot>  @todo, list todo entries
22:36:03 <dons> @todo
22:36:04 <lambdabot> Nothing to do!
22:36:07 <dons> yay :)
22:36:26 <dons> @todo-add Release lambdabot 3.0
22:36:28 <lambdabot> Entry added to the todo list
22:36:32 <dons> @todo
22:36:34 <lambdabot>   * Release lambdabot 3.0 (submitted by dons)
22:37:03 <dons> if you get any ideas about what lambdabot should be doing, you can let me know with @todo-add
22:37:58 <mauke> 2todo-add World peace
22:38:47 <dons> I think that's outside of lambdabot's scope. We'd need a new FFI addendum
22:39:29 <Oejet> <lame>How about doing my Java homework?</lame>
22:41:27 <lambdabot> lambdabot would rather be rebooted than hack java
22:41:59 <Oejet> lambdabot: Fair enough.
22:42:13 <dons> @vixen could you do Oejet's homework?
22:42:15 <lambdabot> in to
22:42:39 <dons> @vixen that was confusing? do you have any opinions on java?
22:42:40 <lambdabot> i live in a constant state of confusion
22:42:58 <dons> @vixen ah, java type system scrambled your brain?
22:43:01 <lambdabot> panties and bras are for weaklings. I like to be free.
22:43:07 <dons> @vixen of course.
22:43:09 <lambdabot> awesome
22:43:37 <dons> blackdog, i'd like some stronger anti-java statements from the vixen some time ;)
22:44:05 <mwc> dons, Testify!
22:44:17 <pimaniac> the vixen is just random phrases?
22:44:30 <dons> @vixen are you just a random phrase bot?
22:44:32 <lambdabot> that's because i have a random generator
22:44:44 <dons> @vixen ah, ok. that makes more sense
22:44:45 <lambdabot> okey-dokie
22:44:55 <dons> @vixen what about Haskell?
22:44:57 <lambdabot> Ooh, functional programmers are so hot!
22:45:04 <dons> @vixen that is very true.
22:45:05 <mwc> pimaniac, think your ex-girlfriend on Eliza
22:45:06 <lambdabot> Hahaha
22:45:51 <dons> @vixen are you related to eliza?
22:45:53 <lambdabot> i truely am
22:46:09 <dons> @vixen that's funny, I have a friend called eliza who's a lot like you.
22:46:10 <lambdabot> well, you seem nice too
22:46:31 <mwc> @vixen who's your daddy?
22:46:32 <lambdabot> that's a good question, who?
22:46:33 <pimaniac> mwc: i dont think even a computer could be that mean. :-P
22:47:13 <pimaniac> @vixen do you like s-exps?
22:47:14 <lambdabot> yah, i like
22:47:17 <mwc> @vixen do you know the song "Daisy?"
22:47:18 <lambdabot> yeah, i know
22:47:25 <mwc> hah
22:47:41 <dons> @vixen "daisy" is a good song, yeah?
22:47:41 <pimaniac> i think vixen has a pro-lisp bent...
22:47:42 <mwc> dons, needs more hal9000'isms
22:47:42 <lambdabot> good good
22:47:49 <dons> hehe
22:48:01 <dons> @vixen could you open the pod bay doors?
22:48:02 <lambdabot> are you being sincere?
22:48:15 <dons> @vixen i'm afraid it's very important.
22:48:16 <mwc> @vixen Open the pod bay doors!
22:48:17 <lambdabot> :)
22:48:17 <lambdabot> nothing to be angry about
22:48:41 <Gahhh> @vixen Under the moon and under the sky ?
22:48:42 <mwc> hahaha, that's a pretty good responce, actually
22:48:43 <lambdabot> what is pron?
22:48:58 <Gahhh> hmm
22:49:19 <Gahhh> I guess she's playing jeopardy ?
22:50:01 <mwc> @vixen Are you pointless?
22:50:02 <lambdabot> i truely am
22:51:14 <pimaniac> @vixen your variables dislike being bound?
22:51:15 <lambdabot> i'd say i like
22:53:06 <dons> @vixen do you have mutable variables?
22:53:07 <lambdabot> maybe. do you?
23:11:15 <KrispyKringle> What's wrong with a pattern like this?
23:11:15 <KrispyKringle> (rest ++ (tens:[ones]))
23:11:24 <dons> it's not a pattern
23:11:28 <dons> @type (++)
23:11:28 <KrispyKringle> oh
23:11:29 <lambdabot> (++) :: forall a. [a] -> [a] -> [a]
23:11:36 <KrispyKringle> @type (:)
23:11:37 <lambdabot> (:) :: forall a. a -> [a] -> [a]
23:11:45 <KrispyKringle> you can do (a:b), though.
23:11:47 <dons> you can only use constructors in patterns, not functions
23:11:52 <KrispyKringle> oh
23:11:55 <Cale> ++ is a just a function
23:11:58 <KrispyKringle> gotcha
23:11:59 <KrispyKringle> thanks
23:11:59 <dons>  : is a constructor for lists
23:12:02 <KrispyKringle> yeah
23:12:03 <KrispyKringle> duh
23:12:04 <KrispyKringle> :P
23:14:57 <dons> @yow
23:14:59 <lambdabot> Gibble, Gobble, we ACCEPT YOU ...
23:15:59 <pimaniac> @vixen is that a zippy mode in your code?
23:16:00 <lambdabot> yeah, it is
23:20:59 <dons> @version
23:21:00 <lambdabot> lambdabot 2p400, GHC 6.4 (OpenBSD i386)
23:21:00 <lambdabot> darcs get http://www.cse.unsw.edu.au/~dons/lambdabot
23:21:02 <dons> @ghc
23:21:03 <lambdabot>   ARGH! Jump uses %esi or %edi with -monly-2-regs
23:21:08 <Gahhh> would be nice if haskell could pattern match "func (bigPrime*anotherBigPrime) = (bigPrime, anotherBigPrime)" ;)
23:22:02 <dons> I think gofer implements n*k patterns.
23:22:11 <dons> or does ghc do that too?
23:22:36 <dons> though that k is going to be a constant ;)
23:23:06 <Gahhh> it's not a big help anyways. It's safer to let the programmer do the inversion.
23:24:11 <dons> Gofer 2.2.1:
23:24:12 <dons> Motivated by recent discussion on the Haskell mailing list, starting
23:24:12 <dons> with a posting from Tony Davie, Gofer now supports a more general form
23:24:13 <dons> of $n+k$ pattern, together with a new form of patter, $c*p$.
23:24:18 <dons>         pattern ::= .... | pattern + integer | integer * pattern
23:24:42 <dons>     case e0 of {c*p -> e; _ -> e'}
23:24:42 <dons>       = if e0 >= 0 then  case e0 `divRem` c of {(p, 0) -> e; _ -> e'}
23:24:42 <dons>                    else  e'
23:26:03 <dons>     fib (2*n+1) = (fib(n+1))^^2 + (fib n   )^^2 for example
23:26:46 <dons> but it's not in hugs. oh well.
