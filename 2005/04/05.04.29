00:00:18 <awarth> i was wondering if someone here could clear something up for me... i've got this tiny concurrent haskell program (http://www.cs.ucla.edu/~awarth/test.hs)
00:00:25 <awarth> and it's got a memory leak
00:00:28 <awarth> very simple stuff
00:00:58 <awarth> could anyone please take a quick look at see if you know what's going on? it should be the easiest thing in the world, but for some reason I can't figure it out.
00:01:09 <awarth> probably lack of experience with monads and stuff on my side
00:02:14 <awarth> (btw, i compiled it with ghc 6.4)
00:02:27 <skew> strange, it looks like it should be fine
00:02:36 <skew> it is printing stuff, right?
00:02:38 <awarth> right, that's what i thought---easiest thing in the world
00:02:53 <skew> oh, I think I see
00:03:06 <awarth> right... it's got three threads: the main one, which just starts 2 other threads, and prints things, and the other two are just adding to an MVar
00:03:18 <skew> try changing the printer to something like n <- takeMVar v ; putStrLn (show n); putMVar v
00:03:21 <awarth> I don't see why the memory consumption keeps going up
00:03:31 <skew> if you use readMVar I bet the number never gets forced
00:03:45 <skew> except that's not quite right either
00:03:48 <awarth> hmm, ok, will give that a shot.
00:03:55 <Cale> I don't see a memory leak at all
00:03:59 <awarth> but wait a second, if i'm printing it, then it must get forced, right!?!?!
00:04:04 <skew> Cale: yeah, that's what I think
00:04:10 <Cale> I'm running it
00:04:10 <skew> awarth: right, that's why I'm confused now
00:04:15 <Cale> and it's not leaking memory
00:04:23 <Cale> it's running in constant space :)
00:04:26 <awarth> well, it's hard to tell that it actually does leak memory
00:04:40 <awarth> the reason why you don't see it leak is that it hasn't been running for long enough
00:04:52 <awarth> this is what you can do: comment out the line that prints the value of the variable
00:05:00 <awarth> and watch the memory usage go up as you run it
00:05:04 <Cale> hehehe
00:05:14 <Cale> but then you won't force the evaluation
00:05:19 <awarth> printing to the terminal is very slow, so it delays the symptoms of the memory leak
00:05:25 <awarth> ohhhhhhhhhhhh
00:05:26 <awarth> i see
00:05:31 <awarth> makes sense
00:05:42 <awarth> so i need to make sure that it forces, huh?
00:05:47 <skew> if anything printins should make the symptoms worse as opposed to forcing it some other way
00:06:13 <awarth> that's very strange. if i don't force it, and then there's the tail recursion, why doesn't the GC just pick up the thunk?
00:06:19 <skew> because Haskell code continues to run while the C puts (or whatever) goes, so the adders have some time to get ahead
00:06:46 <skew> awarth: because you hang onto v, and v hangs onto n
00:07:43 <awarth> but isn't printer tail recursive? shouldn't the system figure out that i don't actually need v after the recursive invokation of printer and GC it?
00:07:58 <awarth> no, that's right
00:08:02 <awarth> i totally get it now
00:08:06 <awarth> makes perfect sense
00:08:21 <awarth> if i keep on adding stuff to a number, it doesn't actually happen, it's kept as a thunk.
00:08:32 <awarth> so unless i force it, the memory usage just grows unbounded
00:08:49 <awarth> awesome, thanks very much, i appreciate the help in clearing this up.
00:08:50 <awarth> :)
00:09:51 <Cale> skew: you're saying that printing the values will make it worse?
00:09:56 <skew> good to know I understand space performance after all
00:10:01 <Cale> It seems to make it better :)
00:10:22 <skew> "has a memory leak when I skip the forcing" is very different from "the code I posted leaks like a sieve"
00:10:35 <skew> Cale: I mean as opposed to doing something like seq
00:10:39 <Cale> ah, okay
00:11:11 <skew> Cale: and not that it leaks because printing is slow, but because the adders have more time to build unevaluated thunks
00:11:54 <Cale> yeah
00:12:20 <beschmi> so the right "fix" would be putMVar v $! (n + k) ?
00:14:09 <skew> yeah, that should make it run in absolutely constant space
00:14:31 <skew> not space proportional to the fairness of the schedular and the speed of output
00:14:41 <skew> but that's just a constant factor :)
00:14:46 <Cale> :)
00:15:25 <skew> We don't believe in constant factors. As long as GHC makes code with the same asymptotic complexity as a similar C program, it's fast enough :)
00:15:38 <Cale> yes.
00:15:40 <Cale> :)
00:16:01 <reffie> heh
00:16:14 <skew> remember, this is the party line the next time somebody asks about performance
00:16:52 <skew> swapping is just a constant factor too!
00:18:20 <skew> does anybody else think I should @quote that?
00:18:54 <dons> "swapping is just a constant factor too!" ?
00:19:02 <dons> yes. that's pretty good.
00:19:07 <skew> "swapping is just a constant factor", I think
00:19:19 <dons> we don't believe in constant factors...
00:19:24 <dons> that's good too :)
00:19:31 <skew> so they can't even complain about memory performance
00:20:29 <pimaniac> do we have any stock anti-Von Neumann phrases?
00:20:35 <skew> Jerub: did you ever try WFloatWS?
00:20:38 <dons> @quote skew
00:20:39 <lambdabot>   I think blackdog is right
00:20:44 <dons> @quote skew
00:20:45 <lambdabot>   swapping is just a constant factor
00:20:52 <dons> @quote skew
00:20:53 <lambdabot>   swapping is just a constant factor
00:21:00 <dons> yeah yeah lambdabot.
00:21:08 <dons> @ghc
00:21:09 <lambdabot>   From-type of Coerce differs from type of enclosed expression
00:27:45 <dons> @uptime
00:27:46 <lambdabot> uptime: 2 days, 2 hours, 33 minutes and 30 seconds
00:29:49 <reffie> where does it get the error messages from
00:30:34 <dons> I extracted them from ghc, and they're stored in the persistent state of the plugin that implements @quote
00:31:06 <dons> or... lambdabot generates type-incorrect expressions at random...
00:31:16 <dons> whichever is easier
00:31:35 <dons> ;)
00:33:51 <reffie> hehe
00:34:12 <dons> @ghc
00:34:13 <lambdabot>   Kind signature on data type declaration has non-* return kind
00:40:05 <skew> http://page-148.caltech.edu/~brandon/constant.png
00:41:59 <beschmi> hehe
00:42:26 <lispy> what does this mean: (*** Exception: <<loop>>
00:42:28 <skew> if somebody who can actually draw wants to try, it might make a descent Haskell shirt
00:42:36 <skew> lispy: your program evaluated to bottom
00:42:47 <skew> sometimes GHC can detect infinite loops
00:42:50 <lispy> skew: infinite recursion?
00:42:53 <lispy> ah, nice
00:42:57 <lispy> thanks
00:43:08 <reffie> ghc solved the halting problem?!?!
00:43:13 <dons> nop.e
00:43:31 <skew> if figuring out the value of a thunk ever immediately requires the value of that thunk, you get that message
00:43:55 <dons> @plugs let f = f in f :: ()
00:43:57 <lambdabot> Fail: <<loop>>
00:44:04 <dons> @plugs let f () = f () in f () :: ()
00:44:08 <lambdabot> Terminated
00:44:59 <dons> @karma+ lambdabot
00:44:59 <skew> whenever GHC starts forcing a thunk it marks it as a thunk that it is currently forcing, and if it ever runs into one of those it complains
00:45:00 <lambdabot> lambdabot's karma has been incremented
00:45:11 <skew> @karma lambdabot
00:45:12 <lambdabot> lambdabot has a karma of 2
00:45:45 <dons> imagine binding f to a special value when evaluating the rhs of f. if you lookup f in the body, you get back the magic value, and can signal the blackhole.
00:50:11 <lispy> where b = solve (createBoard (n, m) p) is fine, but where b@(B a p) = solve (createBoard (n, m) p) causes that loop exception.  B is just a data constructor
00:50:51 <lispy> actually, the b@ is not needed
00:50:57 <lispy> (to trigger the exception)
00:51:07 <skew> how do you get the values out if you just have b?
00:51:22 <skew> what if you get the values out the same way despite writing b@(B a p)?
00:51:43 <lispy> i could try that, i don't currently have a way to get them out but i could add a way
00:52:03 <skew> I don't think that should help, but I don't know
00:52:12 <skew> matching with case is strict, let binding is lazy
00:52:17 <skew> accessors like fst and snd are lazy too
00:52:46 <beschmi> lispy: the p in b@(B a p) overshadows the one used in createBoard?
00:52:56 <lispy> oh
00:52:59 <skew> right
00:53:22 <lispy> beschmi: thanks
00:56:54 <lispy> heh, i love this part of the homework, "Generalize your program so taht it can deal with general graphs instead of only Knight's tour."  Wish I knew what that meant :)
00:58:30 <Lor> A Knight's tour is a path in a particular graph.
00:59:04 <lispy> yeah, and i guess we are viewing adjacent vertices in the graph as the squares that the knight can move between
00:59:22 <lispy> so it's not as bad as i thought :)
00:59:35 <Lor> "adjacent" is not a very good word there. "connected" is better.
00:59:46 * lispy nods
01:00:33 <skew> Yay for assigning NP complete problems
01:00:51 <lispy> skew: the class is titled, "NP complete and harder problems."
01:01:06 <skew> oh, that's okay then.
01:01:25 <lispy> the previous homework was to try out the davis-putnam algo for 3sat
01:01:46 <skew> I took a class on VLSI synthesis that mostly consisted of clever approximation to problems in NP or worse
01:01:55 <lispy> this one is to learn about Warnsdorff's Rule (a heuristic)
01:02:25 <lispy> skew: yeah, the same can be said of ai in many cases
01:02:51 <lispy> at least classical ai
01:05:59 <lispy> i think generalizing this won't be bad either, i bet i can turn my chess board into an adjacency matrix
01:14:46 <Jerub> skew: rings a vague bell.
01:15:21 <skew> ion, ordinary windows
01:15:38 <skew> I ran gimp in one to make that little cartoon
01:16:09 <Jerub> oh, okay
01:16:15 <Jerub> skew: no, I never used it.
01:16:25 <Jerub> skew: Or maybe once or twice.
01:16:32 <skew> as far as I can tell you need to start a terminal with F2 before there is anywhere for the F3 query to pop up, and you need to resize with Mod+R, but other than that I though it worked pretty well
01:16:36 <Jerub> I dunno, I used ratpoison lots more than I did ion
01:16:56 <Jerub> I also remembered the main reason I went to xfce4.
01:17:01 <skew> I couldn't figure out how to resize windows
01:17:08 <Jerub> my desk got moved, so I needed to be able to hide my irc session better
01:17:13 <skew> also, I think only ion has a screen switching key
01:17:37 <skew> not good enough just to tab it together with stuff
01:18:55 <skew> I thought you meant you really liked ion but being able to use the GIMP reasonably was a show stopper
01:21:45 <skew> for all the time I spend stiting around being stupid, getting distracted by a totally inactive IRC window, etc you would think that the time to use the mouse for stuff would be insignificant
01:26:12 <lispy> i really like this feature sawfish has called waffle
01:26:42 <lispy> when you activate it (i have it set to shift+ctrl+alt) you can type (using regexp) the name of the window you want to jump to
01:27:06 <autrijus> skew: I made it!
01:27:22 <lispy> and if there are several matches you can hit ctrl+s to go to the next one
01:27:35 <lispy> autrijus: you made waffle?
01:27:39 <autrijus> data SIO a where MkSTM :: STM a -> SIO a MkIO  :: IO a -> SIO a MkSIO :: a -> SIO a
01:27:53 <autrijus> skew: thanks for the suggestion
01:27:57 <lispy> oh, that's not waffle....
01:27:59 <lispy> :)
01:27:59 <autrijus> unifying STM/IO/pure is the way to go
01:28:03 <tuomov> Mod1+R or Mod1+drag resizes/moves windows
01:28:08 <autrijus> and it made Pugs at least 2x (or more) faster
01:28:11 <skew> wow
01:28:19 <skew> what was slow before?
01:28:35 <autrijus> everything was in IO, right?
01:28:38 <autrijus>     (MkIO io)   >>= k = MkIO $ do { a <- io; runIO (k a) }
01:28:41 <autrijus>     (MkSTM stm) >>= k = MkSTM $ do { a <- stm; runSTM (k a) }
01:28:43 <autrijus>     (MkSIO x)   >>= k = k x
01:28:45 <autrijus>     return a = MkSIO a
01:28:59 <autrijus> so for pure calculations (i.e. the ones that only involve reader and cont)
01:29:01 <autrijus> there is no IO hit
01:29:08 <autrijus> because the default for "return" is pure
01:29:15 <autrijus> it's as if it's in the identity monad
01:29:22 <skew> tuomov: using a key even for that. I should have guessed
01:29:45 <tuomov> you can resizes from borders too, but many styles don't have borders
01:29:54 <tuomov> Mod1+drag dates from window maker..
01:30:19 <skew> autrijus: the continuation stuff works now?
01:30:27 <tuomov> as that's what I used before PWM.. and it is infinitely more convenient than border-dragging
01:30:36 <skew> of course
01:31:11 <autrijus> skew: surely, because it's now in the lower layer
01:31:22 <autrijus> ContT doesn't have to know STM/IO
01:31:27 <skew> it's under IO and STM?
01:31:35 <autrijus> uh no
01:31:45 <autrijus> type Eval x = EvalT (ContT Val (ReaderT Env SIO)) x
01:31:58 <autrijus> the "SIO" is lower
01:32:02 <autrijus> SIO is on top of both STM and IO
01:32:04 <autrijus> but not as transformer
01:32:21 <skew> okay
01:32:36 <beschmi> and mod_sp rocks for irc windows in ion
01:33:12 <skew> I was just thinking about how to implement Cont
01:33:45 <skew> I guess you only needed that function for mapping the stack underneath to switch between IO and STM
01:34:09 <skew> happy does something sort of similar with monadic parsers, only actually using a bind on the monadic actions so everything else runs pure
01:34:32 <skew> Have you stuck an INLINE pragma on your monad instance?
01:35:05 <skew> how would I check if stuff like that actually speeded things up?
01:36:15 <skew> I *do* have the code, I might as well try myself
01:36:18 <autrijus> skew: well pugs has 4000 or so unit test, so I time them to gauge performance
01:36:23 <autrijus> and examples/mandel.p6
01:36:34 <autrijus> "make; time ./pugs examples/mandel.p6"
01:36:42 <skew> does the makefile time the tests for you?
01:36:45 <autrijus> where should I put INLINE?
01:36:49 <autrijus> skew: "make smoke" does
01:37:01 <skew> I hope that doesn't do what it sounds like it does
01:37:26 <autrijus> heh
01:37:36 <autrijus> wait a bit, let me check in a fix
01:37:39 <skew> I don't know. It's {-# INLINE function #-} for a single function, but I think there's something special to inline all the methods of an instance declaration at once.
01:37:52 <skew> Reading the User's Guide builds character.
01:39:56 <skew> I need more computer - make + firefox = sadness
01:41:03 <Jerub> skew: my G5 hasn't arrived yet :(
01:41:17 <skew> Oh, I was confused. It's SPECIALIZE that can hit a whole instance at once
01:42:08 <TheHunter> i'm wondering what to cite as an introduction to shift+reset. I'm thinking "shift to control" and "monadic subcontinuations", but both move on to advanced stuff very fast. Anything more introductory, I've missed?
01:42:47 <skew> what do those papers cite?
01:43:28 <TheHunter> a lot of stuff.
01:43:42 <Maddas> skew: Waffle sounds neat, QuickSilver uses just that kind of thing to launch/switch to applications, it rocks :-)
01:43:47 <Maddas> (Not regexes, though)
01:44:37 <skew> I mean, I don't know of any papers myself, but I think an early paper where they first introduce shift/reset might be good, and I bet these new papers cite something
01:45:19 <skew> they cite Oleg's webpage!
01:45:38 <TheHunter> yeah, i'm going through them, see whats freely available.
01:46:29 <skew> I'm looking through "shift to control". "Stores and partial continuations as first class objects ..." looks promising
01:47:49 <autrijus> I learned all about shift/reset from <<shift to control>>
01:47:58 <TheHunter> hmm, is that freely available?
01:48:07 <autrijus> sure
01:48:09 <skew> "Beyond Continuations", reference 21
01:48:27 <skew> my heurisitc is looking for the earliest papers
01:48:30 <TheHunter> "Stores and partial continuations as first class objects ...", that is.
01:48:37 <TheHunter> autrijus, hehe.
01:49:07 <autrijus> skew: the tree is unbroken now
01:49:10 <autrijus> feel free to play around :)
01:49:12 <autrijus> &
01:49:18 <skew> I don't know, I'm just going down the list and throwing these out. I'll check if I can get at any of them, we have all kinds of ACM subscriptions and such
01:50:17 <skew> autrijus: does that paper cover the full range semantics that "monadic subcontinuations" does?
01:50:40 <TheHunter> skew, thanks. I should've mentioned, it's for TMR, so freely available is a big plus.
01:51:08 <TheHunter> skew, i don't think so.
01:51:35 <skew> I'm just seeing the ACM version
01:52:15 <skew> hey, if shift to control was a good enough introduction for autrijus it's good enough for the rest of us too, right?
01:52:31 <TheHunter> what's really annoying about "shift to control" is its untypedness.
01:52:53 <TheHunter> so didn't really try to understand what he was doing in the later chapters.
01:52:56 <skew> there was one paper about typed contexts
01:54:38 <TheHunter> something like that would be really great, after all, haskellers very much think in terms of types.
01:55:15 <TheHunter> "a functional abstraction of typed contexts"
01:55:33 <skew> okay, "stores and partial continuations" doesn't look so good for you anyway
01:56:27 <JohnMeacham> Anyone have experience with this algorithm? http://citeseer.ist.psu.edu/327069.html If it lives up to its promises, jhc's scaling issues could disappear ahead of schedule.
01:57:39 <skew> no, but it sounds like you'll be getting some shortly. Hope it helps!
01:58:01 <skew> That reminds me, I should read that paper on types as abstract interpretation
01:59:24 <TheHunter> yeah, "a functional abstraction..." looks great.
02:01:19 <TheHunter> ok, i think it's those three papers. Thank you very much.
02:04:48 <skew> CPAN just asked me how many lines of history to store, and I realized that it's probably perfectly feasible to store infinite history of interactive input
02:05:14 <skew> how long does it take to type a few gigabytes of text?
02:05:30 <JohnMeacham> Just look at your IRC logs :)
02:05:41 <Lor> The problem is not the storage, but searching.
02:06:04 <Lor> E.g. infinite .bash_history makes ^R slower and slower all the time.
02:07:06 <JohnMeacham> Sounds like a bug in bash to me.
02:07:31 <Lor> Well, it just doesn't maintain a real index.
02:07:54 <TheHunter> hmm, "Dybvig, Peyton Jones, Sabry [3]", or can I abbrevate that somehow using et al?
02:07:57 <skew> you only want so many hits anyway, running a reverse search shouldn't be too bad
02:09:04 <TheHunter> ^R search is severely broken anyway. Why would it give me the same result multiple times?
02:09:31 <Maddas> Cool, I never knew about ^R. I always did history|grep foo :-)
02:23:43 <skew> JohnMeacham: do they explain how the algorithm is "almost-linear">
02:24:21 <skew> Is it like n lg lg lg n, or like "mostly linear, except superexponential for this rare case"
02:27:02 <lispy> TheHunter: there are bashism you can apply so that repeats are less likely to end up in your history.  It could help the ^R problem (just guessing)
02:29:05 <TheHunter> lispy, thanks, but i'm using zsh anyway. There is a trick for zsh to do that to, but it's apperently doesn't really work.
02:29:42 * TheHunter finally figures out how "appearently" is spelled correctly.
02:30:02 <lispy> heh
02:30:29 <TheHunter> ah, "apparently". That should be correct.
02:30:37 <lispy> i used to have flyspell mode enabled for irc, but it was causing problems.  I think my spelling errors have since increased
02:31:20 <lispy> i would like to have spell checking the default for every buffer, but emacs tends to get upset by this
02:31:34 * lispy scalds emacs
02:31:34 <TheHunter> hehe.
02:32:30 * TheHunter can't find spell-checking in xchat...
02:32:31 <JohnMeacham> it is n*1/ackermans  I think.
02:32:40 <lispy> i was able to implement my heuristic and pretty printing in 84 lines (counting commenting as well).  I'm really tempted to ask my java programming counter parts how many lines it took
02:33:11 <JohnMeacham> 1/ackermans is pretty close to constant. :)
02:34:27 <skew> n/ackermans is pretty good ...
02:34:50 <skew> I think a is something that is actually increassing, but hits 4 at about 2^2^64 or so
02:35:12 <skew> CLR talks about it a bit
02:36:01 <skew> it comes up in efficient set union data structures, which is probably why it comes up here too
02:36:01 <JohnMeacham> Yup. I always find it strange when ackermans appears in complexity theory. it is just such a strange function.
02:36:40 <JohnMeacham> yup. that is exactly where it comes from. union-find data structures. Hmm.. I should try to find an efficient haskell implementation of one.
02:38:26 <JohnMeacham> Why might someone call a data structure a union-find structure rather than a set? are they actually something different?
02:39:11 <skew> yeah, I think so
02:39:28 <skew> a set is about being able to query if it contains some value
02:40:16 <skew> union-find is where you have a known set of values partitioned into some sets, and you want to be able to perform unions on those sets and query which set a particular value is in now
02:40:21 <skew> given a pointer to that value or something
02:40:32 <tromp> there's an ADT with union and equality operations
02:40:49 <tromp> and the implementation technique called union-find
02:41:16 <skew> autrijus: What is this Test::TAP::Model?
02:42:13 <skew> I think I've figured out how to grab stuff with CPAN, but "install Test::TAP::Model" complains about failed tests. Is that expected (is it written in Perl6)?
02:44:06 <JohnMeacham> oh. I bet okasaki has a chapter on it.
02:44:29 * JohnMeacham goes to find waterdamaged but servicable copy of okasaki.
02:45:22 <skew> JaffaCake: is 6.4 ghci supposed to try to print values of types like (Random a) => IO a?
02:45:51 <JaffaCake> it probably defaults a to ()
02:46:13 <skew> I get a "No instance Show (IO a)"
02:46:27 <JaffaCake> that's kind of a buggy error message
02:46:50 <JaffaCake> caused by the fact that GHC tries to print out the value of the expression
02:47:14 <skew> I thought it checked first if the type looked lik IO a
02:47:41 <JaffaCake> it checks for IO first, and if that fails it tries to apply 'print' to it
02:48:01 <JaffaCake> if they both fail, you get the error message from the 'print' version, I think
02:48:08 <JaffaCake> there's an open bug report on it
02:48:20 <skew> okay
02:48:34 <skew> Do you know much about how GADTs and classes are supposed to interact?
02:48:34 <JaffaCake> so what did you type to get the error?
02:48:41 <skew> randomRIO
02:48:45 <JaffaCake> no
02:49:44 <skew> well, I started with getStdGen >>= print . take 20 . randomRs (1,10)
02:50:09 <JaffaCake> randomRIO (1,2)
02:50:18 <JaffaCake> gives a terrible error message, thanks for mentioning it
02:50:31 <skew> shouldn't that work?
02:51:21 <skew> with numeric defaulting
02:51:23 <JaffaCake> no, because it has type Random a => IO a
02:51:31 <JaffaCake> you can't default the Random class
02:51:39 <JaffaCake> only numeric classes
02:51:53 <JohnMeacham> does ghci not work on x86_64? it is possible to install both the x86 and x86_64 fedora haskell RPMs at once?
02:52:37 <JaffaCake> skew: oops, it has type (Random a, Num a) => IO a
02:52:57 <JaffaCake> JohnMeacham: yes, and I don't know
02:53:20 <JaffaCake> i.e. yes, it does not work :)
02:54:47 <skew> JaffaCake: so, should the Num cause defaulting of a like I thought?
02:55:04 <JaffaCake> I thought it should, but maybe I'm missing something
02:55:45 <skew> hmm, it does work if the type is just (Num a) => IO a
02:55:51 <JaffaCake> yes
02:56:03 <skew> I thought maybe the context was confusing the check for IO types
02:58:53 <musasabi> JohnMeacham: a linux32 chroot works.
03:02:21 <pkeeken> test
03:09:53 <musasabi> What is the preferred way to get HaXml?
03:10:11 <musasabi> The fptools cvs?
03:11:55 <skew> Who was having trouble with HaXml performance the other day?
03:15:18 <dcoutts> JaffaCake, I've got a cvs snapshot of gtk2hs which you can use if you want to reproduce the amd64 gc problems. http://users.ox.ac.uk/~worc1895/gtk2hs-0.9.7.9.tar.gz  I've checked that it works up to the point where it doesn't work :-) (and it works all the way through on non-amd64)
03:15:58 <JaffaCake> pulled it down, ta
03:16:59 <dcoutts> JaffaCake, when you configure, use ./cnfigure --with-hcflags=-O0 so it's doesn't take so long
03:21:43 <JaffaCake> grrrr, I don't have something called 'vte'
03:22:01 <dcoutts> oh, sorry, ./configure --disable-gnome
03:22:13 <JaffaCake> cool, thanks
03:22:36 <JaffaCake> building...
03:23:05 <dcoutts> I didn't really mean to include the vte bit yet, :-) oops
03:24:28 <dcoutts> we're expecting the fist invocation of ./tools/c2hs/c2hsLocal to die
03:24:37 <JohnMeacham> musasabi: Well, the plain old x86 ghc build works fine on x86_64 if you pass -m32 to the compiler. just the filenames conflict.
03:25:14 <dcoutts> (or maybe the fist invocation is ok, since glib is too small to need compacting gc)
03:25:14 <JohnMeacham> Oh, I was getting x86_64 GC crashes too.
03:25:46 <JohnMeacham> A build of jhc dies if you pass +RTS -c too it. AFAIK it only happens on x86_64
03:27:35 <dcoutts> JaffaCake, you can get it to die earlier by doing: $ make HSTOOLFLAGS="-H350m -M400m"
03:27:36 <JohnMeacham> I get: internal error: update_fwd: unknown/strange object  13962056
03:27:48 <JohnMeacham> or a segfault.
03:27:59 <JaffaCake> ok, I got the failure
03:28:00 <dcoutts> JohnMeacham, exactly the symptoms I see
03:28:22 <JohnMeacham> dcoutts: with gtk2hs or jhc?
03:28:28 * JaffaCake looks forward to a pleasant afternoon with gdb
03:28:30 <dcoutts> JohnMeacham, with gtk2hs
03:29:02 <JohnMeacham> Ah. jhc doesn't have any FFI calls, so that might narrow down the problem.
03:29:17 <dcoutts> JaffaCake, for a smaller test case you want to work with the first invocation of c2hsLocal which generates glib/glib.precomp
03:30:00 <dcoutts> JohnMeacham, this is not actually gtk2hs propper, but c2hs which we use in our build system. c2hs is pure haskell.
03:30:01 <JaffaCake> this one?  ./tools/c2hs/c2hsLocal +RTS -H350m -M650m -RTS -C-I/usr/include/glib-2.0 -C-I/usr/lib64/glib-2.0/include --cppopts='-include "gtk2hs-config.h"' --precomp=glib/glib.precomp glib-object.h
03:30:42 <dcoutts> JaffaCake, yes, but change the -M to something lower so it actually needs to use the compacting gc
03:30:52 <JaffaCake> righto
03:31:24 <JaffaCake> oh, it fails straight away with -c
03:31:26 <JohnMeacham> dcoutts: does just passing '-c' to force compacting cause c2hs to crash?  it does for jhc.
03:31:49 <dcoutts> JohnMeacham, probably it would, let me try...
03:32:23 <JaffaCake> I need to build c2hslocal with -debug - what's the easiest way?
03:32:44 <dcoutts> er... let me inspec the makefile...
03:34:29 <dcoutts> JaffaCake, make clean; make HCFLAGS=-debug
03:34:40 <JaffaCake> cheers
03:34:52 <JaffaCake> I don't need a full make clean, just re-link will do
03:35:13 <dcoutts> then just delete tools/c2hs/c2hsLocal
03:35:28 <JaffaCake> great, that did it
03:35:33 <JaffaCake> now I got an assertion failure
03:35:46 <dcoutts> that's good right :-)
03:35:54 <JaffaCake> well, it's better
03:36:00 <dons> this is fun to watch :)
03:36:05 <dcoutts> :-)
04:43:29 <JohnMeacham> Can someone point me to an efficient union-find algorithm for haskell.
04:46:19 <tromp> u shld prolly settle for the simpler version without path compression
04:46:39 <tromp> which requires pointer updates
04:47:00 <dcoutts> or you can look at ghc's unification code
04:47:24 <JohnMeacham> It will be a critical path, so I'd like to find something efficient.
04:47:43 <skew> even if you skip path compression you still need pointer update
04:47:56 <JohnMeacham> I take it there isn't an efficient purely functional implementation out there?
04:48:06 <tromp> guess you need to use some unboxed array then
04:48:14 <JohnMeacham> Where would I look in ghc?
04:48:55 <dcoutts> JohnMeacham, I don't think there is a purely functional implementation.
04:48:58 <tromp> what are the elements in your set?
04:49:14 <dcoutts> well, not with the same asymptotic effeciency
04:49:51 <Philippa> yeah, you really badly want references
04:50:29 <JohnMeacham> It is for a typechecker.
04:50:33 <JohnMeacham> of sorts.
04:50:37 <Philippa> the other thing that helps is culling "this variable has been instantiated to that variable which has been instantiated to..." chains
04:50:44 <JohnMeacham> http://citeseer.ist.psu.edu/327069.html
04:50:49 <dcoutts> JohnMeacham, /fptools/ghc/compiler/typecheck/  would be the place to look
04:51:10 <tromp> you basically need a map from type t to type Either t Int
04:51:34 <basti_> "Left"?
04:57:19 <JohnMeacham> Okay. I will look at ghc and resign myself to possibly having to settle for a stateful implementation.
04:57:32 <vegai> oh, they've updated nhc recently
04:57:36 <vegai> (month ago ;)
04:58:34 <dcoutts> nhc's type checker would be much more comprehensible, but may not be using effecient unification/union-find
04:58:46 <dcoutts> it's worth a look
04:59:53 <JohnMeacham> It occurs to me this might be useful for speeding up jhcs real haskell typechecker. right now it builds up huge chains of substitutions. (straight out of THIH)
05:00:54 <dcoutts> :-) the THIH is what us grad students use in our toy type checkers, I wouldn't reccomend it for typechecking real programs
05:01:59 <Philippa> JohnMeacham: stateful's reasonably sane anyway, you can build a unification monad on top of ST or IO
05:02:08 <JohnMeacham> dcoutts: Yeah, I am finding that out.
05:02:26 <dcoutts> that's what ghc does, it's TC monad is based on IO
05:02:37 * Philippa nods
05:02:43 <Philippa> also what I did with Tyop
05:02:54 <JohnMeacham> Tyop?
05:03:17 <Philippa> the toy language [implementation] I built to test out my subtyping on algebraic datatypes
05:04:02 <Philippa> doesn't do type classes, everything's covariant except function return values etc etc. It's not overly impressive, but it shows the concept works
05:04:36 <JohnMeacham> Ah. cool. I actually pipe a monad through the unification algorithm anyway. I have not touched that code too much because it is mostly hatchet and I can never decide whether I want to figure it out or rip it out and rewrite it :)
05:05:26 <Philippa> yeah
05:05:44 <Philippa> Tyop's a huge mess because it's running all the environments statefully through the same monad
05:05:46 <JohnMeacham> The Boxy types paper is really making me want to rewrite it thought.
05:05:49 <Philippa> heh
05:05:54 <Philippa> I found that weird reading
05:06:22 <Philippa> largely because I'd done just enough thinking about the problem a couple of weeks before I read it to've been comfortably sure it was possible - the rules of thumb were neat, the rest's cranking out the rules IYSWIM
05:06:27 <JohnMeacham> It makes much more sense when paired with the paper on rank-n type inference. where they make it clear that the boxes are IORefs to be filled in.
05:07:44 <Philippa> yeah, once you know when it's safe to fill in the box all's cool
05:08:23 <JohnMeacham> Philippa: is Tyop available somewhere? sounds interesting.
05:10:13 <Philippa> I've not made it generally available, as a) I'm a bit embarassed by the code and b) it's my undergrad dissertation project
05:10:52 <Philippa> it's butt-simple though, you just infer the lub of two tycons when you unify them rather than checking they're equal
05:11:13 <Philippa> the rest's in what kind of subtypes and supertypes you're allowed to create in the first place
05:12:48 <JohnMeacham> interesting. makes sense.
05:14:44 <Philippa> similarly, type classes're reasonably simple to add. It's just a matter of making sure supertype instances do the same as subtype instances for the relevant constructors
05:15:16 <Philippa> re the lub thing, you do need type annotations when there isn't one through lack of uniqueness
05:15:48 <Philippa> similarly they're useful for case statements, especially in the presence of _ patterns. But none of that's really challenging IYSWIM
05:16:21 <Philippa> the downside is you don't seem to get much at first - the main neat trick is encoding type class hierarchies or their equivalents so you can pattern-match on them
05:17:06 <Philippa> most of the rest of what you get is conciseness rather than being able to express new stuff
05:28:41 <skew> Philippa: Tyop sounds neat. Did you also do superclasses along the way?
05:29:21 <Philippa> superclasses?
05:29:46 <skew> making a new class out of a subset of the methods of an existing class
05:30:24 <Philippa> I didn't, no
05:30:33 <Philippa> that's a somewhat hairier extension on the whole
05:31:00 <skew> there's also something about allowing a subclass to provide defaults for a superclass method
05:31:38 <skew> like fmap f m = m >>= (return . f) in Monad, for example, if Functor were a superclass of Monad
05:31:43 <Philippa> tbh I'm inclined to steer clear of that one - if you think the Prelude's misdesigned, write your own, the rest of the time you don't really need it
05:32:25 <Philippa> Tyop itself's not intended to be a serious language anyway
05:32:30 <Philippa> on account of my not being in a position to make it one
05:34:16 <skew> it sounds like the sort of extension you would want to fold into Haskell if it looks nice in the prototype anyway
05:35:08 <Philippa> Tyop? Yeah
05:35:36 <Philippa> there're some really neat tricks you can pull if you've got a constraint system, which GHC already has courtesy of GADTs
05:36:15 <skew> GADTs wrapping up a class constraint seem to work oddly
05:42:33 <skew> like, not passing along the fact that you have an instance when the type inside unifies with a type outside
05:52:10 <xerox> yo!
06:04:16 <theorbtwo> Is anybody working on haddock, or is it a dead project?
06:04:38 <theorbtwo> The internal parser seems to barf badly on TH.
06:04:58 <theorbtwo> OK, "barf badly" is overstating a bit, but it doesn't like it.
06:06:15 <dcoutts> theorbtwo, isn't not dead, it's just resting
06:06:27 <dcoutts> we're expecting a new release 0.7 soonish
06:07:20 <theorbtwo> Great!
06:07:35 <dcoutts> it's used by lots of projects so it's not dead, it's parser is based on the one from ghc, but from before TH
06:07:50 <dcoutts> hence it not liking TH
06:08:05 * theorbtwo nods.
06:09:02 <reffie> so when's the second monad.reader coming out :P
06:10:50 <Philippa> When it's ready, duh :-)
06:11:16 <theorbtwo> In theory, on the 1st.
06:11:17 <xerox> The first of May!
06:12:09 <JohnMeacham> short-n-sweet  http://repetae.net/UnionFind.hs
06:14:59 <JohnMeacham> Hmm.. I can probably add a constant time concatable list to the heads so I can get a list of each sets members... might be useful.
06:21:38 <JohnMeacham> But that might leak memory if the lists arn't actually used... I hate decisions like this :)
06:22:22 <xerox> Is there a type where `elem` is particularly fast?
06:23:01 <skew> xerox: it could be implemented efficiently for ()...
06:23:11 <jlouis> JohnMeacham: nice. It even does path compression I see ;)
06:23:35 <xerox> skew, heh.  No way, even if I keep some sort of ordered datatype, or even indexed.. ?
06:23:42 <vincenz>   PATH=$PATH:~/bin
06:23:43 <skew> I think log time is the best you get with functional data structures
06:24:07 <skew> an array gives you constant time for limited ranges
06:24:20 <vincenz> oops
06:24:45 <xerox> skew, what do you mean by "limited ranges" ?
06:24:54 <skew> finite
06:25:46 <skew> the elem :: a -> [a] -> [a] can only get efficient for things like (), I think
06:25:47 <xerox> I'm going into a process of reading a structure and building a new one, maybe an array would be good enough.
06:26:06 <theorbtwo> Is there any way to get a prerelease version of haddock 0.7?
06:26:49 <skew> I wonder if GHC would use the information that only () and undefined have type () if you told it to specialize elem for [()]
06:26:57 <Philippa> a hashtable'd have a fast elem operation
06:27:37 <skew> never mind, I guess you would always find it at the head anyway
06:27:41 <JohnMeacham> CPR analysis treats singleton datatypes like that specially.
06:28:37 <JohnMeacham> or product types in general.
06:29:13 <jlouis> xerox: if you are only querying a few, say 10 elements most of the time, then consider moving found elements to the front of the list
06:29:36 <JohnMeacham> splay trees are self-optimizing like that.
06:30:05 <Itkovian> afternoon.
06:30:09 <JohnMeacham> frequently accesed elements are moved closer to the head. I always wanted to make a journaling filesystem based on them.
06:30:20 <reffie> no way JohnMeacham
06:30:26 <vincenz> I actually have my dobuts about splay trees.... typically trees you're not gonna reaccess the same data over and over
06:30:27 <reffie> it'd be horrible for a filesystem
06:30:30 <jlouis> JohnMeacham: Yes. I thought about those the moment I had finished typing
06:30:36 <vincenz> so you're constantly rebalancing for nothing
06:30:39 <reffie> jlouis you'd end up writing for every read!
06:30:44 <reffie> JohnMeacham
06:30:46 <JohnMeacham> reffie: so they tell me.
06:30:51 <reffie> goddamned nick completion
06:30:54 <vincenz> you could cache the changes..
06:31:43 <reffie> it would be better to use a red-black tree
06:31:45 <JohnMeacham> reffie: although, the idea would be since you are journaling, the hard disk is constantly writing anyway. might as well have it be rewriting and optimizing old data too.
06:32:15 <reffie> JohnMeacham you only write to the journal when you update metadata, JohnMeacham
06:32:29 <reffie> not when you just access it
06:32:43 <JohnMeacham> reffie: not with my splay tree based filesystem :)
06:32:50 <reffie> heh
06:33:06 <reffie> well the performance of such a filesystem would suck
06:33:18 <reffie> unless it's in memory
06:33:26 <reffie> not on disk
06:35:04 <JohnMeacham> reffie: Not necessarily. the writes would all be sequential. It would be full journaling. not just metadata but all data. the writes would never have to seek so will be very fast, in such a system you want to absolutly minimize the time spent reading so self-optimizing seems like it could be a win.
06:35:31 <vincenz> what is journaling exactly?
06:35:52 <vincenz> and doesn't the rebalancing of splaytrees cause a lot of node changes, and typicaly for any tree is that the data is a bit all over
06:35:53 <reffie> JohnMeacham but the rest of the data will not be sequential to the journal, so the head will be constantly
06:35:57 <reffie> seeking
06:36:56 <JohnMeacham> reffie: but it rarely has to get at other data. with modern systems 70-80% of all hard disk accesses are writes.
06:37:09 <vincenz> o.O
06:37:21 <JohnMeacham> the extra writes generated by the occasional read won't be too much of an overhead.
06:37:35 <reffie> i'm not so convinced
06:37:56 <JohnMeacham> reffie: neither am I. which is why I want to implement it.
06:38:20 <vincenz> JohnMeacham: how do you implement an fs quick and fast?
06:38:24 <reffie> and anyway, splay trees only 'cache' one elemetn
06:38:31 <JohnMeacham> reffie: I have little interest in implementing things I know will work :)
06:39:12 <JohnMeacham> vincenz: practice :) I used to be an OS person.
06:40:49 <JohnMeacham> although, I admit of my crazy ideas this one is probably one of the least likely to work.
06:40:56 <reffie> hehe
06:41:34 <CosmicRay> vincenz: you want a quick and fast fs?  just do it the reiser way and pretend that writing is unimportant :-)
06:42:48 <CosmicRay> actually, this is interesting as I'm just reading up on reiser4
06:43:15 <CosmicRay> I don't really understand it, unlike most of the other filesystems I've run, but it sure is fast
06:43:45 <vincenz> No I mean, you need a lot of crap surrounding it all to get it to work, no?
06:44:21 <JohnMeacham> Oddly enough, the splay tree filesystem won't optimize for the most used data, as that will be always in the buffer cache and need no filesystem optimization, but rather the sometimes but not never used.
06:45:32 <JohnMeacham> Usually the kernel has a niceish framework you can plug your filesystem code into.
06:45:43 <CosmicRay> well, *a* framework anyway.
06:45:46 <skew> well, there's no point optimizing for accessing the data that you actually never need to get off disk, is there?
06:45:53 <CosmicRay> niceish, if you're really lucky :-)
06:46:04 <reffie> well, JohnMeacham, the dirty buffers are periodically written back to disk
06:46:37 <reffie> even though they stay in the buffer cache, after they have been cleaned
06:46:38 <JohnMeacham> reffie: yup, and those go on the end of the log. fully journaling, not just metainfo.
06:46:49 <skew> autrijus: hello?
06:47:31 <autrijus> skew: hm?
06:47:45 <JohnMeacham> but I may be speaking nonsense as I have not slept in a while.
06:47:59 <skew> I was trying to make smoke, but it complains about Test::TAP::Model
06:48:01 <autrijus> what's it with #haskell and sleep deprivation?
06:48:08 <autrijus> skew: oh. you may need to install that from CPAN
06:48:12 <autrijus> sudo cpan Test::TAP::Model
06:48:22 <Philippa> autrijus: it's a general comp geek thing, though I try to avoid it like the plague...
06:48:22 <skew> when I try to grab that with CPAN it says lots of tests fail and asks if I want to force it
06:48:40 <autrijus> skew: sure, force it then
06:48:48 <autrijus> I wonder why
06:48:54 <JohnMeacham> well, goodnight. let me know if anyone is inspired by my splay tree filesystem crazy idea. better yet if it is implemented in haskell in a haskell kernel :)
06:49:22 * vincenz smirks "A haskell kernel, please"
06:49:49 <reffie> goood night JohnMeacham
06:49:56 <xerox> 'night JohnMeacham
06:51:19 <skew> okay, it installs cleanly under perl 5.8.6
06:53:11 <autrijus> cool
06:53:49 <autrijus> try darcs pull again before you resmoke
06:55:49 <skew> do any of the patches get names or comments?
06:56:38 <skew> autrijus: you should finish of the Haskerl set of emebedded languages
06:57:33 <skew> http://www.dcs.gla.ac.uk/~partain/haskerl/wall-1.html <- Larry Wall promised
07:01:50 <skew> okay, make smoke still fails
07:10:19 <skew> Oh, it just build in the local directory. I haven't figured out how to force installation then
07:14:02 <CosmicRay> huh, is Extensions: CPP deprecated in Cabal for some reason?
07:14:40 <CosmicRay> Peter Simons is telling me that it's not working for him, but it works fine for me with cabal 0.5
07:30:37 <Itkovian> Is there anything in http://elis.ugent.be/~ageorges/gpf.hs which is keeping this this from operating in a lazy fashion, instead reading in all of the file it needs to process? These files can be up to 2 GB in size, so laziness would very much be appreciated. The thing breaks with the message that it can't allocate 1 MiB of memory, even when I say the heap should be _very_ large (i.e. 3GiB)
07:35:18 <vincenz> Itkovian: aha, een belg
07:36:29 <Itkovian> yeah yeah
07:39:21 <Itkovian> help is appreciated :-)
08:35:30 <Lemmih> Greetings, JaffaCake.
08:35:35 <JaffaCake> hi there
08:35:41 <JaffaCake> is dcoutts about?
08:35:46 <dcoutts> JaffaCake, any joy with your afternoon with gdb?
08:35:54 <JaffaCake> yes :)
08:35:58 <dcoutts> :-) yay
08:35:59 <JaffaCake> I think I cracked it
08:36:06 <dcoutts> what was it then?
08:36:15 <JaffaCake> there were two bugs
08:36:30 <dcoutts> compacting gc bug? or something that was triggered by the compacting gc
08:36:36 <JaffaCake> one was in some inline functions in GCCompact.h that deal with the mark bitmap
08:36:53 <JaffaCake> we were accidentally truncating a 64-bit word to a 32-bit one
08:37:00 <dcoutts> right
08:37:02 <vincenz> reminds me of the exploding arian
08:37:05 <vincenz> ..e
08:37:36 <dcoutts> I wonder why this was not discovered on sparc64 or IA64
08:37:49 <JaffaCake> probably nobody used the compacting collector
08:38:05 <JaffaCake> there's another bug.. it seems the fix I committed the other day wasn't complete
08:38:06 <dcoutts> nobody ran c2hs :-)
08:38:26 <JaffaCake> which is strange, I thought I tested it to death, but it was broken
08:38:53 <JaffaCake> anyway, I just successfully ran that c2hslocal command:
08:39:00 <JaffaCake> 271.02s real   268.56s user   0.83s system   99% ./tools/c2hs/c2hsLocal +RTS -c -H350m -M650m -RTS -C-I/usr/include/glib-2.0
08:39:21 <dcoutts> have you tried letting the build run to completion?
08:39:56 <dcoutts> the glib one is the small one, the others run for much longer and do much more allocation, more of a stress test :-)
08:39:58 <JaffaCake> I'll do that now
08:40:24 <dcoutts> ta
08:40:35 * JaffaCake can go home for the weekend feeling satisfied :)
08:40:44 <dcoutts> :-)
08:40:57 <JaffaCake> I think I'll go close a couple of bug reports
08:41:19 <dcoutts> (I'll not tell you about my next amd64 bug until monday then...)
08:42:16 <JaffaCake> surely not
08:42:19 <dcoutts> s'ok, I'm teasing
08:42:57 <dcoutts> I'll update my ghc-6-4-branch and see if I can break it
08:43:45 <dcoutts> I did have another memory corruption issue, but it may have been related to these other bugs or the foreign import "&foo" issue
08:44:14 <dcoutts> was the  foreign import "&foo" issue fixed BTW?
08:45:22 <JaffaCake> yes, but not in STABLE yet
08:45:42 <dcoutts> ok
08:45:45 <JaffaCake> urk, heap exhausted
08:46:04 <JaffaCake> how do I give a bigger heap size?
08:46:22 <JaffaCake> you need double on x86_64!
08:46:35 <dcoutts> make HSTOOLFLAGS="-H800m -M800m"
08:46:45 <dcoutts> or any value you think might work
08:47:00 <JaffaCake> cheers
08:47:34 <JaffaCake> dons, you there?
08:50:31 <JaffaCake> glib/System/Glib/hsgclosure.c:23:17: Rts.h: No such file or directory
08:50:45 <JaffaCake> I guess that's because I'm running GHC direct from a build tree
08:51:32 <dcoutts> possibly, configure checks $(ghc --print-libdir)/include
08:52:29 <dcoutts> well, let's assume it's ok. I'll update my ghc-6-4-branch and run the build
08:52:54 <dcoutts> or you can run the gcc command to build glib/System/Glib/hsgclosure.c manually
08:53:54 * JaffaCake runs the gcc command to build glib/System/Glib/hsgclosure.c manually
08:54:17 <JaffaCake> we're chugging along again
08:55:19 <dcoutts> it certainly chuggs when it does the c2hs binary serialisation bit. I should look into what's going wrong there again.
08:55:48 <dcoutts> it generates lots of garbage when it should run with zero allocations
08:55:48 <JaffaCake> c2hs is a good way to punish your computer
08:55:57 <dcoutts> :-)
08:56:42 <dcoutts> actually it's particularly the serialisation bit which takes all the time because of the furious temorary/short-term allocations
08:57:45 <JaffaCake> how is serialisation done?
08:57:48 <dcoutts> and that bit is our fault, Manuel's c2hs doesn't do the serialisation
08:58:24 <dcoutts> I borrowed the ghc Binary.hs module and used DrIFT to generate instances for all the c2hs data types
08:58:38 <JaffaCake> right, I see
08:58:49 <JaffaCake> our Binary module is pretty efficient, I thought?
08:59:00 <dcoutts> i modified the Binary.hs module slightly so it does not use FastString for it's shared string dictionary
08:59:27 <JaffaCake> ok - do you have a lot of strings?
08:59:27 <dcoutts> I thought so which is why I borrowed it
08:59:48 <dcoutts> quite a lot
09:00:22 <JaffaCake> you probably want to do some kind of optimisation of the string representation
09:00:29 <dcoutts> I should check if it's the building the string dict that is taking time
09:00:59 <JaffaCake> you have a string dictionary?  with just plain Strings in it?
09:01:26 <dcoutts> let me look at the code again...
09:04:35 <dcoutts> I'm using a Hashtable from String to Int atoms
09:04:45 <JaffaCake> ok
09:04:50 <dcoutts> so each putSharedString does a HashTable.lookup
09:05:07 <dcoutts> and if it's not present it does a HashTable.insert
09:05:16 <JaffaCake> that's not too bad
09:05:56 <JaffaCake> optimising the list representation might help, especially if your dictionary is big
09:06:19 <JaffaCake> currently lists are stored with one tag per element (1=cons, 0=nil)
09:06:38 <JaffaCake> storing the length of the list first followed by a vector of elements is probabliy better
09:06:40 <dcoutts> oh, I changed that too, it uses length prefix
09:06:45 <JaffaCake> right
09:06:50 <JaffaCake> must change that in GHC sometime
09:07:16 <JaffaCake> so why are you allocating so much during serialisation? :)
09:07:28 <dcoutts> I dunno :-(
09:07:40 <JaffaCake> oh, you're doing BinIO rather than BinMem, ISTR
09:07:45 <dcoutts> my other suspect was serialising the FinteMaps
09:07:55 <Philippa> JaffaCake: if you can do that with lists, I assume that were it possible to encode tuples as an ordinary datatype they'd be as good as ordinary Haskell tuples?
09:08:27 <dcoutts> no, using BinMem (after you suggested it)
09:08:32 <JaffaCake> Philippa: not sure I understand
09:08:38 <JaffaCake> ok
09:09:15 <JaffaCake> are you using the FastMutInt stuff?
09:09:33 <Philippa> JaffaCake: given subtyping and a constraint system you can encode tuples using a TupleCons constructor that does appropriate trickery to take parameters that're either TupleCons sometype or TupleNil (the actual types get more complicated)
09:09:59 <Philippa> now, having this represented with TupleCons and TupleNil tags would suck...
09:10:09 <JaffaCake> right
09:10:25 <dcoutts> for the FinteMaps, we're just doing "fmToList fm" and serialising the resulting list I thought that might be creating allocations
09:10:29 <Philippa> so I guess I'm asking if it'd be reasonably possible to extend the vector encoding to such a type (or other user-defined types)
09:10:37 <dcoutts> JaffaCake, we are using the FastMutInt stuff
09:11:15 <JaffaCake> right, fmToList will do some allocation
09:11:18 <dcoutts> you can see all this stuff in tools/c2hs/base/general/(Binary.hs|FastMutInt.hs)
09:12:00 <dcoutts> but we cannot get inside the FiniteMap representation to do a straight tree walk :-(
09:12:06 <JaffaCake> Philippa: this only really applies to serialisation, in Haskell you can't in general represent a list by a vector because that loses all the bottoms
09:12:52 <JaffaCake> dcoutts: is a lot of your data FMs?
09:12:54 <Philippa> point. You'd be able to do it with a strict list were one defined though
09:13:03 <JaffaCake> Philippa: sure
09:13:11 <dcoutts> JaffaCake, sadly yes, 4 large FMs
09:13:41 <JaffaCake> oops, I better go
09:13:48 <JaffaCake> have a nice weekend all
09:14:02 <JaffaCake> oh, dcoutts:
09:14:04 <JaffaCake> gtk/Graphics/UI/Gtk/ActionMenuToolbar/Action.chs:443:2:
09:14:04 <JaffaCake>     Not in scope: `actionSetSensitive'
09:14:08 <Philippa> yeah, you too
09:14:15 <dcoutts> ok, bye JaffaCake ta for all the bug fixing
09:14:23 <JaffaCake> np :)
09:30:46 <SyntaxNinja> Lemmih: alive?
09:31:42 * Lemmih checks.
09:31:54 <Lemmih> Yep, I'm alive.
09:32:27 <SyntaxNinja> Lemmih: A slight naming issue; I'm sorry for not being more careful about this, but we should start calling the online package database "HackageDB" or something
09:32:48 <SyntaxNinja> since "Hackage" is technically supposed to be HackageDB, HC-pkg, cabal-get, and Cabal.
09:33:01 <Lemmih> Oki.
09:33:04 * SyntaxNinja remembered this when looking over previous HC&R report.
09:38:31 <Lemmih> I wonder if there's a way to break off a directory in a darcs repo while keeping the change log for the changes in the directory.
09:39:07 <Igloo> FWIW I think HackageDB will end up getting called Hackage by everyone anyway
09:39:39 <SyntaxNinja> Igloo: yeah maybe... you think so becuase that's what we've been calling it?
09:39:51 <Igloo> Lemmih: You can remove everything else and then make a checkpoint
09:40:15 <Igloo> No, I think so because people aren't going to go around talking about "HackageDB"
09:40:18 <SyntaxNinja> it's kinda silly because I sat down and tried to get the names clear in my head so that we could be consistent, but then I forgot.
09:40:21 <Lemmih> Igloo: Thanks.
09:40:55 <SyntaxNinja> we need a catch-all name like "library infrastructure project" used to be
09:44:49 <SyntaxNinja> and I like hackage for that.
09:44:58 <SyntaxNinja> whatever.
09:48:25 <Igloo> SyntaxNinja: You can declare the name to be whatever you like, but I will be surprised if people don't drop the DB in practice (in real life if not online)
09:50:19 <SyntaxNinja> Igloo: right.
09:50:55 <SyntaxNinja> well, I don't expect everyone to understand all the subtitles of all the moving parts. I expect people will call everything hackage or everything cabal
09:51:20 <SyntaxNinja> but when we talk about things and we want to keep them straight, then it's good to have some actual clear names for things
10:15:53 <Ontolog> Anyone running Gentoo?
10:17:41 <dcoutts> Ontolog, yep
10:18:09 <Ontolog> Are you running Pugs with Gentoo's ghc-bin package/
10:18:37 <dcoutts> no, with ghc (as in not the -bin version but compliled from source)
10:18:46 <dcoutts> what's the issue?
10:19:17 <Ontolog> well apparently Pugs requires GHC 6.4
10:19:27 <Ontolog> and Gentoo only has ebuilds for up to 6.2.2
10:19:33 <dcoutts> yes, I think the latest version does
10:19:39 <Ontolog> damniot
10:19:43 <Ontolog> *damnit
10:19:51 <dcoutts> well 6.4 is currently masked because lots of packages don't build with 6.4
10:19:55 <Ontolog> why is the GHC ebuild so far behind?
10:19:57 <Ontolog> ohh
10:20:41 <dcoutts> but if you just want to run pugs (and dont try to compile various other haskell packages) then you can unmask ghc-6.4
10:21:15 <dcoutts> we don't provide a ghc-bin-6.4 yet however, so you'd have to use ghc-6.4 which takes a few hours to build
10:21:55 <mauke> s/hours/days/ on a slow machine
10:21:58 <dcoutts> we're getting closer to unmasking 6.4, but it did introduce lots of changes which broke virtually every other haskell package
10:22:21 <dcoutts> mauke, yes, I'm spoiled with a fast machine
10:24:21 <Ontolog> ahh ok thanks for the tip
10:24:33 <Ontolog> i dont think i have any other packages installed dependent on haskell
10:24:57 <Ontolog> yep i don't sweet
10:25:03 <Ontolog> is there an ebuild for pugs/
10:25:51 <dcoutts> seems the latest version in portage is dev-lang/pugs-6.0.11
10:26:35 <dcoutts> I don't know if that's the latest version, I guess not since it isn't masked (which it would be if it depended on ghc-6.4)
10:27:07 <dcoutts> it's maintained by the perl herd rather than the haskell herd, so I don't know much about it
10:27:56 <SyntaxNinja> we don't have herds, we have cabals.
10:27:58 <SyntaxNinja> ;)
10:35:30 <vidvandre> are there any tutorials like http://merjis.com/developers/ocaml_tutorial/ for Haskell ?
10:35:53 <SyntaxNinja> vidvandre: what are the features of that tutorial?
10:36:18 <dcoutts> SyntaxNinja, that's 'coz we're cows (or something)
10:36:26 <vidvandre> SyntaxNinja, it's called "Learning OCaml, for C, C++, Perl and Java programmers"
10:36:51 <Lemmih> vidvandre: http://www.haskell.org/complex/
10:37:00 <SyntaxNinja> @google yet another haskell tutorial
10:37:02 <lambdabot> http://www.isi.edu/~hdaume/htut/
10:37:04 <SyntaxNinja> lots of people like that one
10:37:35 <vidvandre> Lemmih, I'll check it out, thanks
10:39:04 <vidvandre> SyntaxNinja, I've read some of it.. felt like I didn't get anywhere
10:39:22 <wagle> Jerub: I like your version (standards) better..  thanks
10:41:29 <SyntaxNinja> vidvandre: feel free to ask questions here.
10:46:34 <vidvandre> SyntaxNinja, thanks! I'll do that if one pops up :)
10:56:56 <Lemmih> When will the user ever want to satisfy dependencies from the local package.conf without installing packages locally?
11:03:44 <SyntaxNinja> Lemmih: huh?
11:04:47 <Lemmih> I'm wondering if --user and --user-install should be unified.
11:06:13 <SyntaxNinja> what's the difference?
11:07:29 <Lemmih> --user will make cabal-get look for packages in the user's package.conf and --user-install will install the packages in the user's package.conf.
11:10:01 <SyntaxNinja> oh hm.
11:10:39 <SyntaxNinja> well, I don't think they'd ever want to satisfy dependencies locally without installing locally, but maybe the other way around
11:10:53 <SyntaxNinja> that is, don't use the local packages.conf, but do install locally
11:11:49 <Lemmih> Currently --user-install implies --user.
11:12:32 <SyntaxNinja> maybe --user should be called --user-deps
11:13:15 <SyntaxNinja> so I think that --user-deps should imply --user-install, but not the other way around.
11:13:38 <Lemmih> Writing './cabal --user --user-install install pkg' can get annoying.
11:14:45 <SyntaxNinja> they'd never have to do that.
11:14:57 <SyntaxNinja> cabal-get --user-deps install pkg # implies --user-install
11:15:13 <Lemmih> Oh right.
11:15:23 <SyntaxNinja> cabal-get --user-install install pkg #installs locally, but only uses global deps
11:17:21 <jlouis> Anybody beside me having problems with retrieving files off ftp://ftp.cs.york.ac.uk/pub/haskell/nhc98/nhc98src-1.18.tar.gz ?
11:17:34 <jlouis> Both my OpenBSD and NetBSD computers will not fetch it
11:18:33 <Oejet> jlouis: Wget on GoboLinux seems to work fine.
11:18:49 <jlouis> Oejet: odd. wget on NetBSD works fine too
11:18:56 <jlouis> ftp(1) seems to be the offender now
11:19:07 <jlouis> narrowing down ;)
11:31:30 <raver> "hi all"
11:31:51 <Lemmih> "yo"
11:43:54 <Lemmih> SyntaxNinja: Rebuilding all packages which depend on a specific package when that package gets upgraded is a can of worms (:
11:46:13 <CosmicRay> Lemmih: gee, wonder why anybody uses gentoo then? :-)
11:46:48 <Oejet> Gentoo 5ux00rs.
11:46:53 * Oejet hides.
11:47:12 <SyntaxNinja> Lemmih: oh yeah? unexpected problems?
11:47:23 * TFK chucks fluffy penguins (stuffed with dynamite, d'uh) at Oejet 
11:47:36 <kaol> @vixen What do you think of Gentoo?
11:47:38 <lambdabot> i dunno...
11:48:48 * Oejet pours onion water in TFK's eyes.
11:48:51 <kaol> @vixen What's the meaning of life?
11:48:53 <lambdabot> i'm not sure what i mean
11:48:53 <Lemmih> Package B1 depends on A1, we upgrade A1 to A2, now both A1 and A2 are exposed when cause GHC to fail so we can't upgrade B1 to depend on A2.
11:49:27 * TFK sends an expedition of fire ants to explore Oejet's "privates"
11:49:40 * kaol wants to teach @vixen to answer "42" to that
11:50:25 * Oejet stops being evil before TFK starts crying.
11:51:02 <kaol> How does one train fire ants to target privates?
11:51:23 * kaol realizes that he has nothing useful to say and shuts up.
11:51:30 <Oejet> kaol: Pour honney on the privates?
11:51:31 * TFK laughs at Oejet's "kindness" (the fact is, the fire ants were too much to bear)
11:51:56 <SyntaxNinja> Lemmih: nah, you don't upgrade A1 to A2
11:52:13 <SyntaxNinja> wait, what are you trying to do in the end? upgrade B1?
11:52:19 <Lemmih> I don't? (guess I missed the point then)
11:53:11 <SyntaxNinja> no, upgrade A1, OK...
11:53:30 <SyntaxNinja> so we want to get rid of A1 now that we have A2
11:54:00 <Lemmih> Not really. There can still be packages which need A1.
11:54:41 <SyntaxNinja> hm. so C depends on A == 1
11:55:08 <SyntaxNinja> well, if we're keeping A1 around, then there's no need to rebuild B1
11:55:42 <SyntaxNinja> so if C depends on A == 1, then you refuse to upgrade A1 to A2.  if they are asking you to upgrade A1 to A2, then you do want to get rid of A1
11:55:50 <CosmicRay> ok, stupid off-topic question, but wtf is the deal with kernel version numberings?  2.6.11, 2.6.11.3, 2.6.12pre1
11:55:58 <CosmicRay> which is the real latest stable version?
11:57:19 <Lemmih> SyntaxNinja: Why do we wanna get rid of A1? Can't we just hide it?
11:58:51 <SyntaxNinja> Lemmih: I don't think people want all versions of a package. they just want the latest one
11:59:33 <Lemmih> Oh well, I don't understand/desire this feature enough to bother implementing it. (:
11:59:59 <SyntaxNinja> btw, "a can of worms" is much better than "completely mind-numbingly difficult and annoying" which is what it is to do this by hand.
12:00:23 <SyntaxNinja> Lemmih: "cabal-get upgrade a" will move package a from version 1 to version 2
12:00:42 <SyntaxNinja> that is, if the version they have installed is < the latest version, then you upgrade it
12:00:58 <SyntaxNinja> now anything that depends on A needs to be rebuilt
12:01:09 <SyntaxNinja> a==1 goes away, a==2 comes in.
12:01:17 <SyntaxNinja> if something _requires_ a ==1, then we refuse to upgrade it
12:02:15 <Lemmih> Sounds nice. Mail me a patch when you're done (:
12:03:31 <SyntaxNinja> hehe
12:03:55 <SyntaxNinja> can you add it to a todo list?
12:05:08 <SyntaxNinja> but actually, getting the HTML interface going, and getting cabal-get easy to install are probably the top priorities, fwiw
12:07:14 <Lemmih> Cabal-get would be a lot easier to install if people cabalized their software.
12:07:57 <Lemmih> Is there anything wrong with the HTML interface, btw?
12:08:47 <Oejet> Lemmih: I'd like to Cabalize the Bzlib2 binding.  What do I do, what do I read?
12:10:38 <SyntaxNinja> Oejet: there's a user's manual on the cabal page
12:10:41 <SyntaxNinja> www.haskell.org/cabal
12:11:15 <SyntaxNinja> Lemmih: I though that everything that cabal-get depends on is already cabal-ized?
12:12:29 <Lemmih> Yeah, but the original authors don't really seem interested in my cabalizations.
12:14:20 <SyntaxNinja> you've sent them all to upstream authors and they aren't replying?
12:14:29 <SyntaxNinja> you should CC me on such emails, so I can join in harassment :)
12:17:04 <Oejet> SyntaxNinja: Thanks.
12:19:09 <Lemmih> Oejet: Upload it to HackageDB once you're done (:
12:46:12 * Oejet taps into the vast brain capacity of #haskell.
12:46:40 <CosmicRay> Oejet: well, it's just you, me, and lemmih right now, so don't be so sure :-)
12:52:14 <Oejet> On GoboLinux a program Foo version 1.0 is configured with --prefix=/Programs/Foo/1.0/.  The idea is that the program should be self contained.  Now that's a problem if Foo wants to write to some other package's files (to register).
12:53:45 <Oejet> This is the case for GConf and GHC and some other programs.
12:54:23 <tuomov> umm.. programs shouldn't write in "their files"
12:54:38 <tuomov> all that they need to modify is in ~, /var, /tmp
12:55:37 <tuomov> program code and data files should be able to reside on read-only media
12:58:07 <Oejet>  /Programs/GHC/6.4/lib/ghc-6.4/package.conf
12:59:47 <wilx> Heh, funky.
12:59:57 <wilx> How do they make it work?
13:00:28 <wilx> I mean, all the libraries that would be in $prefix/lib altogether are now each in separate dir.
13:00:30 <Oejet> That file is written when e.g. WxHaskell is installed.  It uses ghc-pkg to register, I believe.
13:00:40 <tuomov> installation is a complete different matter then
13:00:49 <tuomov> +ly
13:01:18 <tuomov> at that time you should pass the location of another program, or the system package installation mechanism should provide a way to look it up
13:01:41 <Oejet> wilx: Two obvious solutions.  1) Manage $PATH.  2) Manage symlinks.  GoboLinux uses number 2.
13:02:57 <tuomov> number 1 doesn't wokr
13:03:00 <wilx> Interesting.
13:03:09 <tuomov> you'd need to restart after every single package installation
13:03:58 <tuomov> sigh. I wish they'd not use MarketDroidCase
13:04:18 <tuomov> I'm all for appdirs otherwise
13:04:51 <tuomov> but rather all-in-one-basket-mess than MarketDroidCase
13:05:25 <Oejet> So /System/Links/Libraries/libSDL.a -> /Programs/SDL/1.2.7/lib/libSDL.a
13:06:32 <tuomov> libraries shouldn't be symlinked imho
13:06:35 <SyntaxNinja> fwiw, it's actually ghc-pkg that alters packages.conf, and ghc-pkg comes with ghc
13:06:42 <tuomov> the all-libs-in-one-dir approach is inherently broken
13:06:51 <tuomov> all libraries should be explicitly specified at compile time
13:06:58 <tuomov> some for headers
13:07:03 <tuomov> but binaries should be symlinked
13:09:32 <Oejet> SyntaxNinja: Yes, that's what I discovered.
13:10:02 <SyntaxNinja> Oejet: so in a sense, it's GHC altering its own file, just happens during the installation of another package.
13:10:56 <tuomov> hmm.. I think that file should be in /var nevertheless..
13:14:50 <Oejet> Ah, moving package.conf to /var is an idea.
13:15:29 <SyntaxNinja> Oejet: hm. so is there a configure flag to GHC for that?
13:15:57 <tuomov> of course, it should be versioned under var
13:16:33 <tuomov> I think. I don't suppose packages being compatible between different major.minor versions of ghc
13:19:44 <Oejet> SyntaxNinja: Not in 6.2 it seems.
13:25:10 <Oejet> How does Cabal handle registration?  I haven't read the docs yet.
13:29:44 <SyntaxNinja> Oejet: it calls ghc-pkg
13:30:07 <SyntaxNinja> you can say ./setup register and it'll call ghc-pkg for you with the package dsecription file it has generated
13:30:18 <SyntaxNinja> or you can say ./setup register --gen-script or something, and it'll generate a shell script that you can use later
13:30:24 <SyntaxNinja> in case you don't have access to the setup script.
13:30:33 * SyntaxNinja curries w/ shell scripts ;)
13:31:17 * Oejet curses Autoconf
13:34:58 <skew> Oejet: how do you think it got that way in the first place?
13:36:48 <Oejet> skew: "Worse is better"?
13:39:55 <_metaperl> does this look sane:
13:39:56 <_metaperl> imgWithMinX i1@(pic1, (x1,y1)) i2@(pic2, (x2,y2))
13:39:56 <_metaperl>   | x1 < x2   = i1
13:39:56 <_metaperl>   | otherwise = i2
13:39:56 <_metaperl>  
13:40:49 <wilx> Dunno, make the picX part _ if you don't need it?
13:42:32 <_metaperl> oh good point
13:51:10 * SamB wonders why objdump -D disassembles .bss
13:51:34 <SamB> (sure, it *is* a section, but there isn't anything in it...)
13:55:14 <tromp> or make images an instance of Ord
13:55:37 <tromp> (admittedly shaky)
14:01:10 <wagle> hmm..  the schedule is not what i first thought: http://lfnw.blug.org/fest2005/schedule.dxp
14:25:39 <wilx> @yow
14:25:40 <lambdabot> PARDON me, am I speaking ENGLISH?
14:25:47 <wilx> :)
14:25:51 <wilx> @moo
14:25:52 <lambdabot>          (__)
14:25:52 <lambdabot>          (oo)
14:25:52 <lambdabot>    /------\/
14:25:52 <lambdabot>   / |    ||
14:25:52 <lambdabot>  *  /\---/\
14:25:53 <lambdabot>     ~~   ~~
14:25:55 <lambdabot> ...."Have you mooed today?"...
14:26:00 <wilx> Nope :)
14:26:54 <jlouis> yay!
14:26:59 <Cale> @ghc
14:27:01 <lambdabot>   Illegal constraint
14:27:08 <CosmicRay> heh
14:27:12 <CosmicRay> @hugs
14:27:13 <lambdabot> Terminated
14:27:16 <wilx> :D
14:27:33 <Cale> @ghc
14:27:34 <lambdabot>   All of the type variables in the constraint are already in scope
14:27:34 <lambdabot> (at least one must be universally quantified here)
14:27:34 <wilx> Are the @yow lines publicaly available from somewhere?
14:27:41 <wilx> I mean, is there any master source?
14:28:03 <Cale> The yow lines are originally from Zippy the Pinhead which is a comic
14:29:26 <wilx> I see.
14:29:32 <CosmicRay> @yow
14:29:33 <lambdabot> On the road, ZIPPY is a pinhead without a purpose, but never without
14:29:33 <lambdabot> a
14:29:33 <lambdabot> POINT.
14:29:45 <wilx> Heh.
14:33:04 <SamB> hmm, bad wrapping?
14:34:16 <pediddle> just good timing
14:53:01 <Cale> Yeah, that is sort of odd. Perhaps the lines are already wrapped in the file, and then are being wrapped again for IRC
14:53:24 <Cale> (Without being rejoined)
15:14:19 <jlouis> wilx: they are pulled from the fortune database in OpenBSD actually
15:14:35 <kaol> @fortune
15:14:58 <jlouis> @quote
15:15:03 <lambdabot> There was a young girl of Pitlochry
15:15:03 <lambdabot> Who was had by a man in a rockery.
15:15:03 <lambdabot> 	She said, "Oh! You've come
15:15:03 <lambdabot> 	All over my bum;
15:15:03 <lambdabot> This isn't a fuck -- it's a mockery."
15:15:03 <lambdabot> samc says: monads are hard, let's go shopping
15:15:17 <jlouis> ah, from the offensive limericks
15:16:06 <kaol> @vixen What's up?
15:16:08 <lambdabot> i dunno...
15:16:14 <a5> i want a feature where ghc drops me into ghci on type errors, from where i can run :t on various expressions to debug them
15:20:43 <JohnMeacham> and :e opens up your favorite editor right to the function in question.
15:23:04 <pediddle> @fortune
15:23:09 <lambdabot> Lonely men seek companionship.
15:23:09 <lambdabot> Lonely women sit at home and wait. They never meet.
15:23:11 <pediddle> that would be a nice feature
15:24:48 <Lemmih> How should GHCi be able to load code with a type-error?
15:26:25 <a5> i'm sure you can figure it out
15:27:19 <a5> by the way, everyone here should be using gale instead of irc. see gale.org.
15:27:30 <wagle> its been on my list for a while now
15:30:13 * wagle watches the tower of babylon crash again
15:30:32 <wagle> err.. babel
15:31:58 <liquidengineer> hi
15:32:51 <liquidengineer> are there any problems with using this as a custom operator: <+>
15:32:53 <liquidengineer> ?
15:33:06 <pediddle> such as...?
15:33:16 <liquidengineer> I have a class that contains that in its signiture
15:33:29 <Lemmih> @plugs let a <+> b = a+b in 10 <+> 20
15:33:35 <lambdabot> 30
15:33:39 <wilx> Only that it could be over overloaded :)
15:33:50 <wilx> @type <+>
15:33:55 <lambdabot> bzzt
15:34:23 <liquidengineer> trying to define the instance, I get No member "<+>" in class "Polynomial"
15:34:28 <SyntaxNinja> liquidengineer: use fully qualified imports and exports to avoid running into overloading problems.
15:34:40 <Lemmih> wilx: That would be @type (<+>) btw.
15:34:47 <wilx>  @type (<+>)
15:34:48 <liquidengineer> I'm wondering it's because there isn't such an operator in the signiture for Polynomial
15:35:05 <wilx> @type (<+>)
15:35:06 <liquidengineer> It's in the signture for Field, which Polynomial derives
15:35:07 <lambdabot> bzzt
15:35:18 <wagle> @plugs (<+>)
15:35:20 <lambdabot> <Plugins.Eval>:1:
15:35:20 <lambdabot>     No instance for (Show (a b c -> a b c -> a b c))
15:35:20 <lambdabot>       arising from use of `show'
15:35:46 <Oejet> @plugs :t (+)
15:35:47 <lambdabot> Variable not in scope: `t'
15:35:53 <wilx> Some arrows thing?
15:35:56 <Lemmih> @type (Control.Arrow.<+>)
15:35:58 <lambdabot> (Control.Arrow.<+>) :: forall (a :: * -> * -> *) c b.
15:35:58 <lambdabot>                        (Control.Arrow.ArrowPlus a) =>
15:35:58 <lambdabot>                        a b c -> a b c -> a b c
15:36:04 <wagle> @index (<+>)
15:36:05 <lambdabot> bzzt
15:36:23 <wagle> OOOOooh..  ok
15:36:25 <liquidengineer> It's just an addition operator
15:36:30 <liquidengineer> for a field class I defined
15:36:44 * wagle breaks camp, and does the nomad thing to the next oasis
15:36:45 <SyntaxNinja> heh
15:37:08 <pediddle> liquidengineer: what's the error you get?
15:37:24 <pediddle> nevermind
15:37:33 <pediddle> anyway, what's your definition of class Polynomial?
15:37:47 <liquidengineer> It's incomplete so far, pediddle
15:37:55 <liquidengineer> I.e.: its signiture constains 8 functions
15:38:01 <liquidengineer> I've only defined three of them so far
15:38:05 <liquidengineer> I'm wondering if that's the problem.
15:38:09 <pediddle> is one of them <+> ?
15:38:13 <liquidengineer> but I'd like to check syntax and stuff.
15:38:15 <liquidengineer> nope
15:38:19 <liquidengineer> does it need to be?
15:38:42 <pediddle> yes, if you define <+> in an instance but don't define it in the class, that's the error you'll get
15:38:43 <liquidengineer> Here it is:
15:38:51 <liquidengineer> >class (Field a) => Polynomial a where
15:39:00 <liquidengineer> Even if it's defined in the Field class?
15:39:23 <liquidengineer> it's an operator over fields
15:39:28 <liquidengineer> polynomials are lists of fields.
15:40:11 <pediddle> ah
15:40:13 <pediddle> i see
15:40:29 <pediddle> yes, if it's defined in the field class, then you need to have two separate instances
15:40:35 <pediddle> one for Field, the other for Polynomial
15:40:39 <liquidengineer> ?
15:40:50 <liquidengineer> I don't even have a Field instance.
15:41:06 <liquidengineer> just an instance of a Polynomial over a Field.
15:41:14 <pediddle> your Polynomial class says that for something to be a Polynomial, it has to be a Field first
15:41:21 <liquidengineer> right
15:41:32 <pediddle> what are you trying to instantiate?
15:41:58 <Cale> polynomials are lists of fields -- no, they're lists of elements from one field, and they have to be finite :)
15:42:28 <liquidengineer> list of elements, my mistake
15:42:36 <liquidengineer> My math terminology sort of sucks
15:42:49 <pediddle> anyway, given that class declaration, you'd need to have:
15:42:50 <liquidengineer> I like to call them "numbers", but everybody wants to get more sophisticated than that.
15:43:03 <pediddle> > instance Field YourType where... a <+> b = ...
15:43:15 <liquidengineer> oooooh
15:43:17 <pediddle> > instance Polynomial YourType where ...
15:43:40 <Cale> however, the polynomial ring over a field generally isn't a field.
15:44:27 <barkley> liquidengineer: i call them thingies that you count with fingers
15:44:35 <Cale> (It is a Euclidean domain, however)
15:44:54 <liquidengineer> so I'll have a seperate instance over Fld (the name of my "YourType") for the Field class that has just hte field functions
15:44:56 <pediddle> "pi r squared?  no, pie are round!"
15:45:11 <liquidengineer> and then the Polynomial class will be able to build on these Fld instance functions, yes?
15:45:23 <pediddle> you can't redefine them, but you can use them
15:45:25 <barkley> ouch...math geek humor..that is scary
15:45:43 <liquidengineer> use.  yes.  good.
15:45:50 <Cale> barkley: What's sour and equivalent to the axiom of choice?
15:45:58 <gzl> zorn's lemon
15:46:10 <liquidengineer> I would've appriciated a more thorough example of derived classes in my Text
15:46:16 <barkley> i bet you pick up hot babes with that line Cale
15:46:19 <liquidengineer> it was just like, here's how to signiture a derivied class.
15:46:38 <pediddle> "I used to think math was no fun,
15:46:38 <pediddle>  'Cause I couldn't see how it was done,
15:46:38 <pediddle>  Now Euler's my hero,
15:46:38 <pediddle>  For I now see why zero,
15:46:38 <pediddle>  = e ^ (i pi) + 1"
15:46:40 <liquidengineer> "A derived class must instantiate all the methods of the superclass."
15:46:44 <liquidengineer> end of section.
15:47:15 <barkley> math is cool when i can see applications, but i can't get into geeking out on theoretical
15:47:23 <Cale> barkley: Hey, you can say that you're Pro (Axiom of) Choice :)
15:47:45 <pediddle> that's in a Haskell book?
15:47:58 <barkley> Cale: remind me to never take you to a club
15:48:04 <Cale> heh
15:48:06 <pediddle> i never heard them called methods
15:48:17 <SyntaxNinja> Oo
15:48:52 <barkley> you know the only reason i'm here is because i put #haskell as a startup channel a long time ago..and there's a lot of talk.  i like to see what you Smug_Haskell_Weenies(TM) are up to
15:48:59 <Cale> functions which are part of a class definition are called class methods in the Haskell Report
15:49:55 <liquidengineer> pediddle: no, it's much more elegant (if vague), in my text
15:50:07 <liquidengineer> I'm paraphrasing, and my Java vocabulary's bleeding in
15:50:13 <barkley> Haskell is statically, type-inferred correct?  If so, you people should whip up a killer IDE with your "superior" language
15:50:17 <pediddle> you might be right
15:50:38 <liquidengineer> question:
15:50:46 <Cale> barkley: well, there's work on an extensible text editor called Yi
15:50:46 <pediddle> my language will kick your language's butt
15:50:53 <liquidengineer> my class has eight methods/functions/things that do stuff
15:51:02 <barkley> Cale: is that the Vim spinoff?
15:51:05 <liquidengineer> I like to run incrementally to check bugs and stuff
15:51:10 <Cale> http://www.cse.unsw.edu.au/~dons/yi.html
15:51:16 <liquidengineer> can I compile with only three or four implemented in an instance?
15:51:20 <barkley> Cale: need more than an editor dude
15:51:29 <Cale> It's sort of vimmish by default, but can also imitate emacs
15:51:35 <barkley> Cale: but some parser loving in an editor for Haskell would be a start
15:52:04 <barkley> unix editors are so freaking primitive
15:52:07 <lispy> what is the language spoken in sweden? swedish?
15:52:21 <barkley> lispy: jive
15:52:23 <pediddle> liquidengineer: you need to give them all definitions, but there's nothing wrong (at least for testing) with making them just 'foo x y z = error "unimplemented"'
15:52:26 <Cale> barkley: What else do you need?
15:52:49 <barkley> Cale: I like "intellisense"...no compile like Eclipse
15:52:57 <liquidengineer> pediddle: that's what I thought
15:53:06 <lispy> you see, there is a page i want to read but it's a swedish site and i can't find an online translation...
15:53:17 <lispy> http://www.dtek.chalmers.se/~d95jowi/quakehaskell/index.html
15:53:22 <barkley> lispy: Babble doesn't translate?
15:54:03 <barkley> Cale: if you want Haskell to be more than another Lisp you need tools that the average non-Einstein can use to learn the langauge
15:54:33 <lispy> barkley: they do dutch -> english and german -> english and neither one produced a version i could read :)
15:54:36 <Cale> barkley: You mean autocompletion of terms?
15:55:15 <barkley> Cale: an editor should be smart...it should infer certain things of what you're doing...and it means more than autocompletion....look at IDEA or Eclipse...Haskell is statically typed, it should have no problems with those things
15:55:16 <Cale> barkley: I don't see how that's especially hard to whip up, just make tags files, and have a key in your editor
15:55:31 <JohnMeacham> Hrm? since when has haskell tried to be like "another lisp"?
15:55:41 <pediddle> it's got lists, doesn't it? :)
15:55:51 <barkley> Cale: fuck tag files. vim and emacs have console architectures stuck in the 70s
15:56:05 <Cale> barkley: but they're quite usable
15:56:06 <barkley> Cale: fine, if i'm writing C code, then I can deal with ctags, but still...
15:56:06 <pediddle> amen
15:56:07 <lispy> barkley: nothing wrong with console
15:56:16 <lispy> barkley: i think taht's a red herring in this debate :)
15:56:34 <Cale> Most of the windows I have open at any point in time are terminal emulators
15:56:45 <barkley> lispy: it's not a red herring if your architecture keeps you in a half-console mode
15:56:50 <pediddle> somebody mentioned "gale.org" earlier.... my counterargument to that is http://fugu.gale.org/pics/mainwin.png
15:56:55 <SyntaxNinja> Cale: i liked tabbed xterms actually. totally rules.
15:56:59 <pediddle> my eyes!
15:57:19 <JohnMeacham> Indeed. Personally, I was never a fan of languages with their own editor. not that I would discourage a haskell specific editor as some people seem to like that sort of thing and there are probably a lot of interesting things one can do. Yi is meant to be general purpose right? not just for haskell development?
15:57:22 <barkley> oh well....if unix weenies (and i've been programming on linux professionally since '97) think that they're cool because the console, emacs, and vim is cool then They Fail It
15:57:28 <lispy> barkley: personally i think supporting the console is very important, but it doesn't hamper an editor from paying attention to things like syntax and users interaction
15:57:43 <JohnMeacham> SyntaxNinja: Use ratpoison! tabbed everything :)
15:57:43 <barkley> lispy: nothing wrong with console...write libraries
15:57:59 <JohnMeacham> (without the space-wasting tabs of course)
15:58:17 <Cale> barkley: Well, it's not that those things are especially cool, they're just sufficient.
15:58:21 <SyntaxNinja> JohnMeacham: tabs without tabs?
15:58:30 <SyntaxNinja> now I've heard of tabs _within_ tabs... ;)
15:59:06 <JohnMeacham> SyntaxNinja: well, the model is very similar to tabbed interfaces. but there arn't actual on-screen tabs to click on. it is all keyboard driven.
15:59:23 <barkley> certain high-brows and unix weenies tend to think that Emacs and Vim are good enough.  I love vim...but not for the program, but because of the key bindings...now if MS VSIP/Addins wasn't such a clusterfuck i could implement my vi keybindigns
16:00:13 <barkley> you guys should do a killer Haskell IDE
16:00:21 <barkley> with emacs and vi keybindings
16:00:32 <lispy> is there any proof that editors like MS VSIP (whatever that is) makes programmers "better"?
16:00:33 <barkley> let the development environment do some freaking grunt work
16:00:46 <lispy> barkley: have you seen Yi?
16:00:51 <Cale> barkley: what grunt work?
16:00:52 <barkley> lispy: no, but it does stupid grunt work that the programmer should not be doing
16:00:54 <pediddle> @google yi text editor
16:00:56 <lambdabot> http://www.cse.unsw.edu.au/~dons/yi.html
16:01:02 <lispy> barkley: but so does emacs
16:01:05 <Cale> barkley: the compiler is already taking care of that
16:01:18 <barkley> Cale: look at eclipse
16:01:27 <barkley> Cale: or IDEA
16:01:29 <lispy> barkley: more over, why does the programming task require grunt work?  Perhaps it's the language that needs a rediesign
16:01:34 <SyntaxNinja> JohnMeacham: sounds cool. I use tabs in most things; not emacs, though.
16:01:46 <SyntaxNinja> JohnMeacham: are emacs buffers similar?
16:01:58 <JohnMeacham> SyntaxNinja: I don't know. I use vim.
16:02:11 <barkley> pediddle: sounds good. is it beyond pre-alpha yet?
16:02:30 <barkley> i love vim, but it's stuck in the godamn 70s
16:02:30 <pediddle> not my project, i haven't even got it to compile yet on my system
16:02:34 <pediddle> so i wouldn't know :)
16:04:03 <JohnMeacham> lispy: YES. that is what I have been saying for a long time. A lot of these esoteric editor features seem to be designed to get around bad language design. not editor flaws. Too many people just sort of accept that gruntwork is a part of programming when it really isn't. I think that is part of why it is hard for some to grok haskell, they can't conceptualize a language without gruntwork.
16:04:33 <Cale> JohnMeacham: I agree
16:04:59 <SyntaxNinja> JohnMeacham: oh man. I'm doing this huge refactoring job right now. is there a function for that? ;)
16:05:42 <pediddle> well, you might have functions that can intelligently (read: correctly) do a global rename of some variable
16:05:44 * Lemmih would still love an editor with built-in refactoring and type-inference.
16:05:52 <musasabi> evemomg
16:06:04 <pediddle> and have it consider scope rules so it won't rename the wrong things that have the same name
16:06:09 <musasabi> evening even.
16:06:28 <JohnMeacham> Yeah, it is not that there isn't a need for smart editors, but smart languages to begin with seems like a more productive path.
16:06:36 <SyntaxNinja> one nice thing, though is that with Haskell, I'm much more confident that when I'm done refactoring, it's going to do the same thing it used to do
16:06:52 <pediddle> write everything with the y combinator... then there's no need for stinkin' variable names
16:07:32 <JohnMeacham> SyntaxNinja: Yeah, I have noticed that too a lot. It took a bit to get over my fear of just twiddling because I might break something. it is pretty hard to 'accidentally' break a haskell program in a way the compiler won't tell you about.
16:08:15 <SyntaxNinja> JohnMeacham: yeah. and I've developed strategies for refactoring bit by bit so that the type breakage isn't too bad.
16:08:57 <barkley> esoteric...haha
16:09:07 <Oejet> Man, you got to see this logged IRC conversation: http://forum.japantoday.com/Worlds_worst_hacker%25_IRC_transcript/m_422436/tm.htm
16:09:15 <lispy> JohnMeacham: are you familiar with SMARTedit by Tesa Lau?
16:09:21 <barkley> is that the 127.0.0.1 hacker?
16:09:33 <Oejet> barkley: Yes.
16:09:45 <barkley> what a brainiac
16:09:46 <SyntaxNinja> Oejet: d00d that was like, so totally yesterday
16:09:54 <barkley> SyntaxNinja: hehe
16:10:15 <barkley> that was totally 8 nanoseconds ago
16:10:54 <barkley> what's haskell gui toolkit?
16:10:57 <barkley> bindings?
16:10:57 <SyntaxNinja> we're operating on internet time
16:11:14 <SyntaxNinja> barkley: there's bindings for gtk and wxwidgets
16:11:24 <SyntaxNinja> but those are like, so totally 2003
16:11:32 <barkley> gotta go get drunk at my brother's wedding rehearsal dinner...yippe..hooray..NOT
16:12:13 <pediddle> it's new to me
16:12:49 <barkley> when i get back i expect you brainiacs to have solved the problem of how to convince business that Haskell can lower costs
16:13:58 <JohnMeacham> lispy: Yes I am. Tesa is a friend of mine. she hangs out on gale all the time.
16:14:03 <barkley> anyway...#Haskell is a pretty cool channel...at least the GNU/FSF zealot morons haven't infiltrated yet
16:14:28 <SyntaxNinja> they could be hiding. there are a lot of lurkers. you... never... know
16:15:03 * Oejet looks suspiciously around his shoulder.
16:15:06 <barkley> SyntaxNinja: true..waiting to strike..."I demand Freedom!"
16:15:28 <SyntaxNinja> down with freedom!
16:15:45 <barkley> "Haskell isn't free enough according to Dear Leader Stallman (Stalin) doctrine"
16:15:58 <SyntaxNinja> barkley: that's not true
16:16:21 <barkley> SyntaxNinja: i don't even know what the compiler/library licenses are
16:16:22 <SyntaxNinja> not that this is the place for debate, but I'm pretty sure that he considers BSD-Style licenses to be free software.
16:16:32 <SyntaxNinja> barkley: go drink beerk
16:16:40 <jlouis> ``Haskell wasn't invented by the FSF/GNU! It must be bad!''
16:16:47 <barkley> SyntaxNinja: oh noooo....Richard Stalin doesn't like BSD...it's too free
16:16:58 <SyntaxNinja> barkley: but he does admit that it's free :)
16:17:19 <pediddle> duh duh duh duh ♫♬♫
16:17:21 <barkley> SyntaxNinja: begrudgingly
16:17:27 <barkley> sic
16:17:39 <jlouis> heh
16:17:50 <JohnMeacham> I don't think he has anything against the new BSD. I mean, he prefers the GPL obviously, but GPL compatable is pretty darn good.
16:18:07 <barkley> "evil corporations can "steal" BSD code from good worker drones"
16:18:17 <jlouis> he is afraid BSD can be bought out I think
16:18:17 <barkley> Comrade Stalin (Stallman) no like
16:18:53 <SyntaxNinja> barkley: go away and drink beer now.
16:19:18 <barkley> SyntaxNinja: no, i'll go enroll in a FSF re-education camp instead
16:19:28 <barkley> i think some cambodians are running it
16:19:30 <musasabi> actually FSF does consider BSD folks to be free software people.
16:19:31 <JohnMeacham> He is an interesting fellow. if you get the chance to talk to him. take it. assuming you arn't the type who wants to fight him.
16:19:33 <barkley> see ya
16:19:41 <Oejet> I think the argumentations is this: Big bad corp takes BSD code and improves it very much and releases as binary only.  People chooses the cool binary and gives up their freedom.
16:20:02 <barkley> "gives up their freedom"...hahaha
16:20:06 <musasabi> Oejet: then the problem is not BSD but people.
16:20:48 <barkley> i guess the weak-minded are easily indoctrinated by "gives up their freedom"
16:20:55 <barkley> see ya folks
16:22:32 <Oejet> musasabi: I guess so.  That was one of his gripes with BK, I think.
16:23:27 <jlouis> BSD-code is used inside many projects. I think the malloc-implementation by Poul Henning-Kamp in the FreeBSD kernel also resides inside IOS of Cisco fame
16:24:19 <musasabi> jlouis: is that a bad thing?
16:26:45 <jlouis> musasabi: no. I don't think so
16:27:32 <musasabi> If I code something I am mainly interested in 1) feedback, 2) people using the code.
16:27:40 <pediddle> but if BSD had been under the GPL
16:28:03 <pediddle> the software world might be quite different
16:28:41 <musasabi> pediddle: note that e.g. apache and X are not GPL.
16:28:57 <pediddle> i mean in a bad way
16:28:58 <musasabi> and that means that one cannot readily import GPL code into those projects.
16:29:03 <musasabi> yep.
16:29:13 <pediddle> BSD has made a huge contribution to commercial software that would have been impossible under the GPL
16:29:16 <jlouis> Fun hypothesis. Apple would have looked quite different
16:29:24 <pediddle> NeXT
16:29:58 <musasabi> Also consider it being under GPL' (exact same as GPL except different name)
16:30:04 <musasabi> The evilness.
16:30:27 <theorb> Is there a haddock interface file available that'll let me link to http://haskell.org/ghc/docs/latest/libraries/ without having a copy of the complete libs src around?
16:30:55 <theorb> Consider also that window's TCP/IP is largely a straight port of the BSD stuff.
16:33:55 <pediddle> d'oh
16:33:58 <theorb> They'd probably have written their own, but not neccessarly for the '9x series, which would have had a large impact on the development of the internet.
16:37:14 <jlouis> wierd feeling reading the R6RS progress report
16:37:37 <Oejet> jlouis: Pointer?
16:40:43 <a5> is there even a way to get the compiler to print the type of an expression in a source file which won't completely compile? say, with template haskell?
16:42:30 <pediddle> paste it bit by bit into ghci?
16:45:08 <a5> that's what i've been doing :(
16:45:20 <Cale> comment out the bit which won't compile
16:45:51 <Cale> if the thing has a type at all, then it must be in a part of the file which does compile :)
16:46:08 <a5> oh i suppose i could just give each expression a dummy type. and look at the "inferred: " message
16:46:31 <a5> but that's not very informative
16:46:48 <a5> ("Inferred type: t -> t1 -> t2")
16:47:31 <Cale> a5: If you could you put the module online somewhere, I could have a look at it
16:48:41 <a5> Cale: thanks, i'm mostly done though. i'll post it then. but in general it is accepted that most time with haskell debugging is spent debugging the compilation step, not the executable, right? so it seems like there should be better compilation debugging support, interactive methods, etc.
16:50:21 <Cale> a5: I find that the messages that GHC gives are usually good enough, so long as I've been compiling the thing at each step
16:50:42 <a5> it could also maybe say "did you forget to apply x to y?" if it expects "b" and infers "a" and sees "a->b" somewhere
16:51:00 <a5> Cale: well, they *are* surprisingly good
16:51:54 <Cale> They're especially good if you include type signatures for your functions.
16:52:02 <a5> "runParser :: [s] -> P s a (SM s) a -> IO [(Either ([s] -> SM s a) a, SMState s)]" was the type in question.
16:52:55 <a5> the thing is, i wasn't even sure what type i could get it to have based on the functions available to me
16:53:37 <a5> the body is "open $ runStateT (runErrorT2 $ parse parser) (SMS {smInput=input})" - there's 4 functions that transform monads
16:53:53 <Cale> :)
16:55:39 <a5> maybe i should have been thinking about it more methodically from the start, i've just been sticking monad transformers into the type and fixing things up as i go. i still have 1 more.
16:56:42 <a5> for instance i'm still not sure if it would have been easier/wiser to just define a single monad instance on a data type that encapsulated all the functionality i wanted
16:57:29 <a5> at any rate, as a beginner, wading through the types has been very difficult
16:58:12 <Cale> What is it that you're writing? I usually find that I can separate out the monads from one another, but perhaps it's just the types of programs that I tend to write.
17:01:09 <a5> Cale: the first thing was a parallel process parser like Claessen's ReadP, but encapsulating an arbitrary monad
17:02:14 <a5> then once i'd done that i wanted it to be able to return continuations if it needed more input, for situations like parsing line-based input for a shell (so if the user hits <enter> in a quoted expression, it asks for another line)
17:02:52 <a5> this required modifying the original library, and it also required a base monad that could accept the continuations
17:03:49 <a5> i had to write my own version of ErrorT for that (the error type is a function returning the main monad type)
17:04:41 <a5> i just got the important part to type-check, so soon i can see if the behavior is correct
17:05:39 <a5> then i need to insert a new monad transformer to allow parse errors with helpful messages
17:17:06 <liquidengineer> is degree a reserved word of some sort?
17:18:50 <liquidengineer> I'm trying to define a class signiture and it's griping me out about unexpected symbol
17:20:01 <liquidengineer> it's the second function in the signiture
17:20:04 <liquidengineer> it got the first just fine
17:20:47 <liquidengineer> as usual, I'm a bit confused
17:22:46 <liquidengineer> hello?
17:22:57 * liquidengineer has never seen the room go dead before
17:23:19 * a5 hasn't either
17:23:25 <wilx> @info degree
17:23:26 <lambdabot> Unknown command, try @listcommands.
17:23:37 <liquidengineer> wilx
17:23:40 <liquidengineer> err..
17:23:43 <liquidengineer> wilx: it's not a builtin
17:23:55 <liquidengineer> it returns the degree of a polynomial stored as a list
17:24:04 <a5> does the problem go away if you change the name to something else
17:24:13 <liquidengineer> I'm not sure
17:24:23 <liquidengineer> when I commented the line out it progressed just fine....
17:24:24 <liquidengineer> hold on
17:24:27 <wilx> Well, I don't think it is keyword.
17:24:33 <wilx> Bad layout maybe?
17:25:05 <liquidengineer> changing the name doesn't help
17:25:07 <liquidengineer> maybe
17:25:11 <liquidengineer> can I paste it in here?
17:25:13 <liquidengineer> it's three lines
17:25:35 <a5> i don't know what this irc aversion to pasting is about
17:25:51 <liquidengineer> a5: it isn't nice to flood a channel
17:26:04 <liquidengineer> it overwhelms the server and makes things hard to read
17:26:14 <liquidengineer> thus pasting big chunks of text is frowned upon
17:26:20 <liquidengineer> but I think 3 lines doesn't count as flooding
17:26:41 <liquidengineer> or at least shouldn't.
17:27:48 <liquidengineer> >class (Field a) => Polynomial a where
17:27:55 <liquidengineer> did that show up at all?
17:28:05 <Cale> <liquidengineer> >class (Field a) => Polynomial a where
17:28:21 <liquidengineer> okay
17:28:24 <liquidengineer> that's the first line
17:28:58 <liquidengineer> errr... there's a newline between those...
17:29:18 <liquidengineer> a5: perhaps another reason pasting is frowned upon is most IRC clients apparently suck at it.
17:29:36 <wilx> @paste
17:29:37 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
17:30:04 <liquidengineer> wilx: point taken.
17:31:21 <a5> the thing is, now we've had a page of discussion about pasting
17:31:55 <a5> *shrug*
17:32:09 <wilx> Heh.
17:32:13 <wilx> I was right.
17:32:16 <wilx> See the layout?
17:32:44 <liquidengineer> that doesn't show up in my text editor....
17:32:45 <liquidengineer> grr....
17:32:53 <liquidengineer> so how am I supposed to fix it?
17:33:11 <wilx> Use something sane, like Emacs :)
17:33:13 <liquidengineer> I lined it up using just spaces in the file, and it's still griping.
17:33:26 <liquidengineer> wilx: ....we're just going to pretend that sentence never happened.
17:33:29 <wilx> Don't use tabs.
17:33:34 <liquidengineer> noted.
17:33:35 <wilx> Hehe.
17:33:44 <liquidengineer> I want to learn to use Nano
17:33:47 <liquidengineer> or Vim
17:33:49 <liquidengineer> but probably Nano
17:33:49 <wilx> Huh.
17:33:55 <wilx> Huh^2.
17:34:04 <wilx> Nano is like...too minimalistic.
17:35:15 <wilx> There is really only Emacs (and maybe Vim but I have never used it for Haskell) that are useful to edit Haskell.
17:35:41 <liquidengineer> ah
17:35:43 <a5> emacs' syntax highlighter is broken. it misinterprets backslashed parenthesis
17:36:03 <liquidengineer> heck...
17:36:08 <liquidengineer> syntax highlighting is useless to me
17:36:15 <liquidengineer> all the parsers are written for non-literate haskell
17:36:21 <theorb> I haven't had problems with that.
17:36:44 <liquidengineer> theorb: it just annoys me when all my comments are full of highlights
17:36:54 <theorb> I have, however, had problems with it mistaking ' as a character in an identifier with a bracketing character for a Char.
17:36:54 <liquidengineer> it draws the eye to the wrong place.
17:37:05 <theorb> Nod, le.
17:37:18 <theorb> I haven't been involved with literate haskell yet though.
17:38:18 <JohnMeacham> vim has the same problem.
17:38:36 <JohnMeacham> I write my tuple patters as \ (a,b) -> ... as a result.
17:38:37 <mwc> Vim has a tolerable Haskell mode, I just wish it would be more indent-aware
17:38:53 <Oejet> Cabal question: In Register.hs line 144 it mentions a flag --config-file=, but runhaskell Setup.hs register --config-file=... says the flag is not recognised.  How does it work?
17:39:04 <liquidengineer> how do you save a file in pico
17:39:05 <liquidengineer> ?
17:39:09 <JohnMeacham> How much more indent aware could it be? the autoindent works perfectly for me.
17:39:17 <mwc> JohnMeacham, there's autoindent?!
17:39:22 <JohnMeacham> set ai
17:39:28 <liquidengineer> (btw, pico showed me exactly what the problem was...why the HELL did text wrangler see it?
17:39:30 <JohnMeacham> but it might not be what you want.
17:40:09 <mwc> JohnMeacham, yeah, personally, I'd like it to auto-indent after a do, let, etc
17:40:27 <theorb> ^O, IIRC, le.
17:42:03 <JohnMeacham> a thread on indenting styles is here http://www.haskell.org/pipermail/haskell-cafe/2002-December.txt
17:44:24 <Oejet> Good night.
17:51:22 <JohnMeacham> Hmm.. there is a lot of flame in that thread.
17:56:15 <dons> mwc, there's a start on autoindent here ftp://ftp.cse.unsw.edu.au/pub/users/dons/vim/indent/haskell.vim
17:57:09 <dons> i found this so painful to write, that I started yi.
18:12:18 <JohnMeacham> dons: Hmm.. I will give it a try.
18:12:37 <JohnMeacham> dons: then perhaps get frustrated enough to switch to yi :)
18:13:27 <Cale> The default Yi mode has some strange bugs -- one of which I know the cause of, (backspace at the beginning of the buffer deletes the first char)
18:13:41 <Cale> :w then :q complains about the file being edited
18:14:08 <Cale> and arrow keys didn't seem to work in insert mode
18:14:18 <Cale> (perhaps that's mode dependent)
18:15:10 <Cale> I'll see if I can find and fix these, but perhaps it would be quicker for dons :)
18:15:31 <dons> hmm. backspace doesn't do that for me.
18:16:00 <Cale> in insert mode
18:16:03 <dons> in insert mode backspace deletes to the right.
18:16:29 <Cale> oh
18:16:33 <dons> yeah. so that's the wrong behaviour.
18:16:37 <dons> it's like 'x'
18:16:42 <Cale> In insert mode, I have all the arrow keys move me right
18:17:08 <Cale> actually, basckspace deletes to the left if I'm in the middle of a line
18:17:11 <dons> ah. me too.
18:17:32 <Cale> I think that at the start of the buffer, it just fails to move back before deleting the char
18:17:35 <dons> yep. then once it reaches the edge, it deletes the rest of the line to the right.
18:18:00 <dons> fixing the arrow keys now..
18:18:42 <blackdog> hellish is either not playing the right games or not writing the right program
18:18:53 <Cale> hm?
18:19:05 <blackdog> the quit message...
18:19:31 <dons> the arrow key behaviour is just a conincidence. I haven't implemented arrows in insert yet. doing so now.
18:21:26 <Cale> ah, Haddock documentation, I should read this :)
18:21:42 <dons> hehe
18:22:16 <dons> you might want to look at the backspace in insert mode implementation. probably fairly easy to tweak.
18:22:23 <dons> (most of these are reasonably easy to do)
18:23:25 <dons> arrow key patch done.
18:24:17 <dons> JohnMeacham, i wouldn't suggest you switch yet. but feel free to fix/add code :)
18:25:01 <dons> the :w :q stuff is to do with the interaction with the undo list.
18:25:17 <dons> (I think that's what your'e referring to, anyway)
18:25:41 <dons> if the undo list isn't empty, then it assumes the file has changed, even if you've saved the file.
18:25:54 <Cale> even if the last thing you did was save the file :)
18:26:12 <dons> yeah. we don't clear the undo list on save
18:26:15 <Cale> ah
18:26:17 <Cale> okay
18:26:18 <dons> (which would solve the issue)
18:26:23 <Cale> there should be a marker
18:26:28 <Cale> in the undo list
18:26:29 <dons> there should be a marker
18:26:49 <Cale> I like being able to undo past where I last saved
18:27:01 <dons> not too hard to add, either. but a bit intricate, so I might have a go at this tonight.
18:27:55 <dons> are you looking at the delete behaviour? the goal should be to implement vim exactly
18:28:20 <Cale> Is the default behaviour in Vim.hs?
18:28:20 <dons> (vim started off as a copy of the vi mode, hence there are legacy oddities, like no arrow keys in insert mode)
18:28:29 <dons> that's the default, yes.
18:29:08 <dons> the default is set in Yi.hs:
18:29:09 <dons> dflt_config :: Editor.Config
18:29:09 <dons> dflt_config = Editor.Config {
18:29:09 <dons>         Editor.keymap = Vim.keymap,
18:29:09 <dons>         Editor.style  = Style.ui
18:29:11 <dons>     }
18:29:14 <pediddle> speaking of making an undo marker after save
18:29:22 <pediddle> could it be possible to "undo" a save?
18:29:31 <pediddle> that would be a very distinct feature
18:29:33 <Cale> it does leftE >> deleteE
18:29:51 <Cale> should just check if we're at the start of buffer
18:30:18 <theorb_> @type take
18:30:23 <lambdabot> take :: forall a. Int -> [a] -> [a]
18:30:24 <dons> we have predicates for that: atSolE
18:30:54 <Cale> is there atSofE?
18:30:57 <theorb_> @type drop
18:30:58 <lambdabot> drop :: forall a. Int -> [a] -> [a]
18:31:27 <dons> yep.
18:31:29 <dons> see Core.hs
18:35:00 <dons> got it working, Cale?
18:36:51 <Cale> just building :)
18:37:14 <Cale> yep
18:37:19 <dons> you can use :reboot, by the way, to try changes out quickly.
18:37:28 <dons> (you still need to compile in a shell)
18:37:47 <dons> but then try :reboot in vim mode, and it will reload and use the new code
18:37:51 <Cale> cool
18:38:30 <dons> I should add :! for running shell commands.
18:38:37 <dons> :.!cmd already works
18:40:45 <Cale> :wq when there is no file should produce an error message
18:41:00 <Cale> (or even :w)
18:41:31 <dons> yes. we don't have a way to do this yet. need a flag in the buffer
18:41:40 <dons> I'll add these to a todo list.
18:42:09 <Cale> but I see that there's errorE
18:42:21 <Cale> so at least that part shouldn't be a problem
18:42:37 <dons> that's how to complain, yes.
18:43:43 <dons> currently the "no file" isn't really true. it's a /tmp file. so it it's indistinguishable from a normal file currently.
18:44:15 <dons> any other things you've noticed?
18:44:20 <Cale> not yet :)
18:45:21 <dons> 0 isn't implemented yet, as it conflicts with numeric prefix argument lexing.
18:45:29 <dons> there's a few other "unimplementeds" too.
18:46:19 <dons> there's no tab completion..
18:46:23 <Cale> I use Home anyway
18:46:45 <dons> I use |
18:48:04 <dons> all the flavours of s/// aren't done. neither are the n,m range syntax
18:48:43 <gavin_god> hi folks
18:48:53 <gavin_god> as far as haskell on window its it a bad idea?
18:49:02 <KrispyKringle> Haskell is never a bad idea.
18:49:03 <gavin_god> do you need a dtabase in haskell?
18:49:13 <gavin_god> or can u use haskell itself
18:49:21 <gavin_god> can u build a big website in haskell?
18:49:21 <dons> haskell works well on windows
18:49:44 <KrispyKringle> You don't need anything but the haskell compiler and libraries.
18:49:52 <KrispyKringle> If you want to use it to build a website, you might want to look into WASH.
18:49:53 <gavin_god> so i can forget java
18:49:54 <gavin_god> ant
18:49:55 <gavin_god> cvs
18:50:00 <gavin_god> bugzilla
18:50:03 <gavin_god> all this junk
18:50:17 <KrispyKringle> You can also use WASH's Dbconnect library with Postgres, or use HSQL or HaskellDB to connect to SQLite, MySQL, or Postgres.
18:50:36 <gavin_god> woa
18:50:40 <gavin_god> the power!
18:50:46 <gavin_god> ok why haskell over common lisp
18:50:55 <KrispyKringle> I don't know lisp, so I can't answer that.
18:50:57 <gavin_god> they are both functional right
18:51:01 <KrispyKringle> Yes.
18:51:06 <gavin_god> so whats difference
18:51:10 <gavin_god> (in new)
18:51:13 <mauke> lisp isn't very functional at heart, though
18:51:17 <KrispyKringle> I've heard Lisp has a problem with parenthesis, but I don't know it.
18:51:40 <gavin_god> (* 4 5 6) multiplies 4 x 5 x 6 in lisp
18:51:48 <gavin_god> aint a a genie
18:51:52 <mauke> you can write purely functional programs in lisp, but then you can do it in perl too
18:51:55 <gavin_god> aint I a genie
18:52:05 <gavin_god> ok
18:52:15 <gavin_god> tcl site said that haskell is problem for big sites
18:52:18 <KrispyKringle> mauke: You *can*, in the hypothetica. ;)
18:52:20 <gavin_god> because too many functions
18:52:21 <KrispyKringle> I wouldn't do it in perl.
18:52:24 <Lemmih> @plugs foldl1 (*) [4,5,6]
18:52:25 <Cale> gavin_god: hm?
18:52:27 <KrispyKringle> "Hypothetical", even.
18:52:29 <lambdabot> 120
18:52:35 <gavin_god> the only bad writeup on haskell is on some site
18:52:46 <gavin_god> saying its bad for huge websites too many funtions
18:52:48 <KrispyKringle> Yeah, well, WASH is a bit of a struggle at times. Too many types.
18:52:54 <gavin_god> otherwise i thinkn haskell seems to kick butt
18:53:01 <mauke> what is "too many functions" supposed to mean?
18:53:08 <Cale> Haskell is pretty awesome :)
18:53:09 <gavin_god> how do you do the whole cvs thing in haskell
18:53:16 <gavin_god> (i dunnno)
18:53:28 <Cale> cvs works, but many people here use darcs
18:53:29 <KrispyKringle> You don't do it in haskell. But you can check haskell source files into CVS (or any other SCM) just like any other file.
18:53:34 <gavin_god> is there a haskell development repository
18:53:38 <KrispyKringle> I do prefer Darcs, but it doesn't scale quite to the same size.
18:53:42 <gavin_god> darcs?
18:53:54 <gavin_god> what about subversion
18:53:55 <KrispyKringle> darcs.net
18:53:55 <Cale> David Roundy's Revision Control System
18:54:05 <KrispyKringle> Cale: I think that would be DRRCS :P
18:54:16 <Cale> did I get the name wrong?
18:54:24 <KrispyKringle> (I thought it was just Davids Advanced Revision Control System)
18:54:25 <Igloo> Advanced
18:54:31 <Cale> ah, right
18:54:36 <Cale> there's an Advanced in there
18:54:37 <Cale> :)
18:54:50 <KrispyKringle> Gotta get the A in ;)
18:54:52 <mauke> gavin_god: subversion isn't written in haskell
18:55:03 <gavin_god> I know
18:55:13 <gavin_god> I was jsut asking about programmer tool that best for that kinda thing
18:55:18 <Cale> but of course you can use it
18:55:20 <gavin_god> does haskell work on solaris?
18:55:24 <Cale> sure
18:55:25 <gavin_god> I dont see solaris much
18:55:36 <KrispyKringle> Check out darcs.
18:55:40 <Cale> There are a number of Haskell implementations
18:55:45 <gavin_god> nice
18:55:51 <gavin_god> so you wouldnt goto say java
18:55:54 <gavin_god> over haskell
18:56:03 <gavin_god> java seems to have a lot of crap on the web free
18:57:26 <Cale> Java is also annoying to use :)
18:57:30 <KrispyKringle> Big preference issue. They're very different languages.
18:58:28 <gavin_god> ok
18:58:36 <gavin_god> what compiler you reccomend for beginner?
18:58:37 <Cale> I find that you have to write too much cruft in Java which doesn't do anything important, but must be there.
18:58:49 <Cale> gavin_god: I recommend using ghc/ghci
18:58:55 <gavin_god> on windows?
18:58:58 <Cale> sure
18:58:59 <KrispyKringle> gavin_god: ghc and hugs are the two big ones. It really depends on your preference. Ghc gives more useful errors.
18:59:00 <gavin_god> k
18:59:10 <gavin_god> useful errors?
18:59:17 <gavin_god> oh error messages?
18:59:56 <Cale> yeah
19:00:26 <Cale> The nice thing about Haskell is that to a large degree, if the code compiles, then it probably works.
19:00:32 <gavin_god> ok cool
19:00:44 <gavin_god> now can I do stuff on mywebsite with haskell?
19:00:50 <gavin_god> like templating
19:00:52 <gavin_god> wiki
19:01:03 <gavin_god> dynamic content?
19:01:10 <Cale> Well, you could -- there are various tools being built for that.
19:01:11 <gavin_god> stuff like that?
19:01:25 <theorb_> .quit
19:01:25 <Cale> It's a general purpose language and isn't specifically geared for that though.
19:01:27 <gavin_god> what do you guys use haskell for?
19:01:52 <Cale> The largest application I've written would have been a pipeline scheduler for powerpc and altivec assembly.
19:01:57 <gavin_god> is it not ready for production websites?
19:02:32 <blackdog> gavin_god: if you're looking for a mature environment like Zope, the answer is that it's not there yet.
19:02:46 <gavin_god> Ive no idea
19:02:52 <gavin_god> zope is a python thing right
19:03:05 <blackdog> Hemplate, halipeto, and WASH are some web environments that might fit your needs.
19:03:24 <Cale> gavin_god: Haskell is more for writing applications.
19:03:46 <Cale> You can do dynamic web stuff in it, just as much as you could with any general purpose language
19:04:34 <blackdog> yes, zope is a python thing. the problem is mostly that the community is still small, so there isn't yet an accepted web environment with lots of the sort of pre-built functionality you get in other languages
19:05:01 <blackdog> what sort of web app do you want to write?
19:05:11 <KrispyKringle> The other thing is that because web applications are so IO driven, I think there's a lot of crufty monad stuff that you don't necessarily suffer in less, ah, refind languages.
19:05:36 <blackdog> I don't think web apps necessarily need to be IO driven.
19:05:39 <KrispyKringle> Unfortunately, this means that even simple dynamic pages in Haskell take a lot of brainpower (though on the plus side, as with any haskell program, they seem to work almost always if they compile).
19:05:45 <KrispyKringle> blackdog: No, but most are.
19:06:03 <KrispyKringle>  As in, if you're just going to do some logic on database queries...
19:06:41 <blackdog> sorry, i was unclear. I meant that you don't need to write a lot of code in the IO monad - the outer layer is IO driven, sure, but you can usually abstract away from most of it...
19:06:50 <KrispyKringle> I think the best I could say is that if it compiles, it works.
19:07:11 <KrispyKringle> blackdog: Ah. Yes, mostly true, I suppose. But if all you're doing is database frontending, then most of what you do will be in the IO or CGI monad (if using WASH).
19:07:17 <KrispyKringle> But, yeah, it's not a huge burden.
19:07:23 <KrispyKringle> It's just like doing imperative programming. ;)
19:07:46 <KrispyKringle> Still, hard to criticize too much. Once I was familiar with WASH, it mostly went smoothly.
19:08:04 <KrispyKringle> I also am surprised by how much the Haskell approach changes my approach.
19:08:26 <KrispyKringle> I wrote things in ways very different--not just in implementation, but in features--from the way I would have in something like Python, meaning I have trouble even comparing the two.
19:09:10 <blackdog> What were you writing?
19:09:22 <KrispyKringle> A wiki.
19:09:36 <KrispyKringle> http://k.af0.net/~dan/cgi-bin/wiki.cgi
19:09:47 <KrispyKringle> The cool part is the "Related"
19:10:26 <KrispyKringle> But for example, if I were using Python, i'd have, rather than bothering with parsing, implemented a simple regex to insert html tags instead of wiki tags.
19:10:30 <blackdog> it looks very cool. :)
19:10:45 <KrispyKringle> So I think Haskell just leads to different design choices.
19:10:50 <KrispyKringle> thanks, blackdog :)
19:11:15 <blackdog> Did you design websites in Python? What kind of methods did you use?
19:11:40 <KrispyKringle> The class I wrote it for is over, but I might add better database connectivity and make it a little better in the parsing department...
19:11:50 <KrispyKringle> Well, I've done python, perl, and, ugh, php.
19:12:08 <Cale> heh, php is such a mess
19:12:08 <KrispyKringle> I'm really enamored with Python's CherryPy right now. http://www.cherrypy.org/
19:12:11 <blackdog> i maintain a few legacy php sites. awful doubleplus.
19:12:12 <KrispyKringle> PHP is terrible.
19:12:30 <KrispyKringle> I get roped into it. People either only support or desparately want php, for whatever reason.
19:13:12 <blackdog> KK: have you tried Zope/Plone? I hadn't even heard of cherrypy, i thought zope was more or less the gold standard
19:13:30 <Jerub>  there are quite a few frameworks for web in python
19:13:42 <KrispyKringle> blackdog: no, I haven't tried zope. It looks nice, but it looks very, ah, big. Not necessarily bloat, but you have to read the manual and do a lot before you get any results. CherryPy does one thing and does it well.
19:13:48 <KrispyKringle> And yeah, there's a ton.
19:13:50 <Jerub> Zope is suitable for a particular type of application, mostly CMS kinda stuff, is what i'm lead to believe.
19:14:03 <Cale> PHP seems like it was designed by, or at least for, people with a lack of programming experience.
19:14:10 <KrispyKringle> I'm also kind of liking Ruby, so I was thinking of trying out RubyOnRails, which looks conceptually similar to CherryPy.
19:14:17 <Jerub> Cale: exactly right.
19:14:18 <KrispyKringle> Cale: understatement in the extreme.
19:14:32 <Jerub> it was actually designed for people to be able to write templates to accompany a perl program.
19:14:41 <Jerub> and it just grew from there.
19:14:50 <Cale> It has lots of extra trivial functions cluttering up the libraries.
19:15:11 <mauke> see also http://juerd.nl/site.plp/perl_php and http://tnx.nl/php
19:15:20 <Jerub> php is a thin dummy-proof wrapper around C.
19:15:27 <Jerub> until I wrote it, there wasn't even a language grammar.
19:15:36 <KrispyKringle> It was designed by monkeys.
19:15:46 <KrispyKringle> No offense, Jerub :P
19:16:03 * a5 will put off learning PHP
19:16:24 <KrispyKringle> Yeah. Being a student, I've gotten a few contracting jobs in PHP, but it's not worth it.
19:18:06 <Jerub> KrispyKringle: I don't write php
19:18:08 <Jerub> I used to.
19:18:27 <Jerub> a5: it'll only take an afternoon.
19:18:42 <Jerub> (seriously, I learned php sunday afternoon, I started work as a php programmer monday morning)
19:18:47 <KrispyKringle> Jerub: as a wrapper for Perl, I have no problem with it. Kluges are fine so long as you know they're kluges.
19:18:54 <KrispyKringle> But people are now taking PHP seriously. That bugs me,.
19:19:16 <a5> Jerub: even more reason to put it off
19:19:59 <Jerub> well, it's no longer a wrapper for perl.
19:20:23 <Jerub> its now a scripting language for calling C functions.
19:20:39 <Jerub> and writing to stdout
19:23:56 <KrispyKringle> Jerub: yeah, btu hardly better, is it? :P
19:24:03 <KrispyKringle> People are using it for shell scripts and GTK apps...
19:24:04 <KrispyKringle> ugh
19:24:28 <blackdog> one of my workmates uses it for backup scripts... :)
19:24:33 <KrispyKringle> oh, god
19:24:54 <blackdog> ex-workmate, anyway. he's a clever guy, i don't know why he sticks with it.
19:26:36 <Jerub> c'est la vie.
19:26:47 <Jerub> I tend to push those people towards python
19:27:17 <KrispyKringle> Yes. Much better choice for doing the same sorta things, I'd say.
19:30:41 <blackdog> the problem is that a lot of the time, php is the pragmatic choice - it's quick to learn, and you can whack up a website in no time. granted, it'll be cruddy code, and probably unmaintainable, but that's not really the point
19:33:32 <KrispyKringle> I think Python is mostly as easy to use, though.
19:35:20 <blackdog> In general, I'd agree. But PHP isn't really a generalist language - it's tilted towards connecting to a db and displaying pages. so for the very specific task most people want to use it for, it has a bit of an edge, at the cost of being harder to maintain, less general, yada yada yada
19:37:17 <blackdog> feh. i should stop whingeing and write a better one, hey. :)
19:37:35 <Cale> I think maybe there's room for a not-turing-complete language for doing that.
19:37:55 <a5> it would be nice if rather than, say, using 'n' "lift"s to access a given monad, i could just refer to them by name
19:38:06 <blackdog> Yes, I'd agree. ZPT and Hemplate stylle things, do you mean?
19:38:23 <Cale> I haven't really looked at either of those, perhaps I should :)
19:38:34 <mwc> either of what?
19:38:42 <a5> zpt or hemplate?
19:38:44 <a5> me neither
19:38:45 <Cale> ZPT or Hemplate
19:39:20 * a5 wonders if hemplate is for ropes or joints
19:39:52 * blackdog grins
19:40:38 * a5 wonders why mozilla doesn't give me an option to open the document in the fucking browser window
19:41:56 <blackdog> i'd like to use WASH, but there seems a problem: please correct me if i'm wrong, but the templating consists of an html page with some haskell code in comments which gets expanded as a string?
19:42:36 <blackdog> unless you generate the whole thing with haskell combinators, which makes it hard to give something to a designer to play with in html-editing tools.
19:43:05 <a5> no!
19:43:05 <a5> oh, the templating?
19:43:05 <a5> i don't know
19:43:09 <mwc> Woah, Cale, where do live?
19:43:17 <Cale> Canada
19:43:23 <mwc> Cale, what town?
19:43:28 <Cale> Brantford Ontario
19:43:34 <Cale> And sometimes Waterloo
19:43:35 <a5> blackdog: how do you access the template features?
19:43:37 <mwc> You seem to be next door to me on http://www.haskell.org/hawiki/HaskellUserLocations
19:43:41 <mwc> Yeah, London Ontario myself
19:44:06 <Cale> ah, cool
19:44:07 <a5> does Canada rock?
19:44:15 <mwc> Indeed
19:44:18 <Cale> a5: oh yeah
19:44:20 <Cale> heh
19:44:32 <mwc> We pay a small tax and are allowed to download piles of music :P
19:44:38 <mwc> Cale, you mean : oh yeah, eh?
19:44:46 <Cale> heh
19:44:49 <Cale> heh, eh?
19:44:57 <blackdog> a5: actually, looking at it again, i might be wrong there. i was looking at ManuelsTable.hs in the distribution
19:45:50 <Cale> My Music directory: 9731 items, totalling 42.0 GB :)
19:50:57 <Cale> mwc: there are a whole bunch of other Haskell users in Hamilton
19:51:02 <mwc> Really
19:51:08 <mwc> We almost need a UG
19:51:20 <Cale> Yeah, it's becoming hugely popular at McMaster :)
19:51:47 <Cale> well, for Haskell, anyway :)
19:52:01 <a5> blackdog: hey so what do you mean? what do templates have to do with monad transformers? and what is zpt?
19:52:01 <a5> Cale: mine is bigger. "and it's all perfectly legal"
19:53:12 <Cale> a5: where are you living?
19:53:15 <a5> blackdog: yeah I don't know what ManuelsTable.hs is doing but it's not WASH
19:53:52 <a5> Cale: Galt, CA, US. by the damn train tracks. are trains so obnoxious about honking everywhere or is it just here?
19:54:21 <Cale> well, they'll honk whenever they come to a crossing
19:54:32 <mwc> At least I only have to deal with birds in the moring
19:54:41 <mwc> bloody songbirds start going at it at 4 AM EDT
19:55:49 <a5> blackdog: as for what do give to designers, it's an interesting question. seems like there should be a way to "lift" a transformation such as changing color values etc. back to the program that generated the html. but css may work for your application
19:56:21 * a5 goes to dinner
20:03:40 <Cale> dons: what should I do to send you that patch, btw? Or did you already fix that yourself?
20:03:47 <Cale> It's pretty trivial :)
20:04:49 <blackdog> a5: yeah, think i tricked myself. :)
20:06:31 <dons> Cale, darcs send
20:06:38 <dons> I've been working on other things.
20:07:54 <barkley> nice nightg for a walk
20:08:13 <Cale> hmm, looks like I'll have to install exim or something
20:08:28 <dons> can you darcs send -o /tmp/f ; then just email me /tmp/f ?
20:09:01 <Cale> there
20:09:07 <Cale> I just installed exim :)
20:09:19 <dons> cool.
20:10:16 * dons cranks up ghc on mips64
20:13:41 <Cale> dons: Yi.hs:96:40: Not in scope: data constructor `PATCH_COUNT' -- I'm assuming that this is due to cpp not being run?
20:13:57 <dons> hmm.
20:14:10 <dons> it's a cpp'd sym yep. just added it.
20:14:56 <dons> -cpp is supposed to be turned on the the pragma at the top of the file
20:15:22 <dons> oh. maybe you didn't rerun autoreconf ; ./configure since those patches came in?
20:15:44 <Cale> oh
20:16:19 <Cale> heh, that'd be why :)
20:16:57 <dons> normally you'd get away with it, but this tweaked configure.ac
20:17:10 <dons> paprika$ ./yi-inplace --version
20:17:10 <dons> yi 0.1.0p31, GHC 6.2.2 (OpenBSD i386)
20:17:10 <dons> darcs get http://www.cse.unsw.edu.au/~dons/yi
20:17:11 <dons> ;)
20:17:39 <Cale> cool :)
20:18:38 <Cale> what's with the ridiculous number of warnings at the end of the build process? Something bizarre about the way things are linked?
20:18:51 <dons> that's haddock being run
20:18:55 <dons> try: make build
20:18:56 <Cale> ah
20:19:00 <dons> to avoid haddock
20:19:20 <dons> it gets run by default so we don't accidentally break haddock support through bit rot
20:19:50 * mwc rots entire bytes at a time
20:19:58 <Cale> hmm... looks like we need some more information about the location of the cursor
20:20:52 <dons> why's that?
20:20:59 <Cale> If you have some long line followed by an empty line, and you move the cursor down and then up, it will be moved to the first column
20:21:12 <Cale> (because it couldn't move to the nth column of the empty line)
20:22:15 <dons> yep.
20:22:28 <dons> we could implement this behaviour in vim mode
20:22:35 <dons> carry around the column count in the state.
20:23:07 <dons> hmm. no, that's a bit hard (can't go from IO Action to pure lexer). have to cache it in the editor state somewhere.
20:23:23 <Cale> There's also usually a special column "End" for when you hit end
20:24:10 <Cale> if you make a short line and a long line in vim, and hit end while on the short line, then move to the long line, you'll notice that the cursor stays at the end
20:24:37 <Cale> (even if the short line is empty)
20:24:55 <dons> ok. I haven't attempted this behaviour yet.
20:27:34 <Cale> There's also a mode I'd like to eventually simulate which TextPad did, where if you made an edit (insertion or deletion) to a line without touching the arrow keys, and then moved up or down, your cursor would be moved the the column you started in before the edit
20:27:47 <Cale> to the*
20:28:30 <Cale> which is quite nice if you're doing things like tabbing in some block by hand, or editing a table in an almost uniform way
20:28:59 <dons> that's a nice idea.
20:33:54 <barkley> nice night for a fucking walk
20:34:02 <barkley> asshole
20:34:08 <barkley> fucker
20:34:36 <barkley> how many fucks have i killed
20:35:03 <barkley> clayton misouri
20:35:07 <barkley> assh
20:35:22 <barkley> rock this shit
20:36:30 <a5> barkley: tooootally
20:43:50 <mwc> How's the Haskell mode for Yi?
20:43:59 <mwc> As good or better than the Vim one?
20:45:52 <reffie> what's yi?
20:46:01 <dons> @google yi text editor
20:46:03 <lambdabot> http://www.cse.unsw.edu.au/~dons/yi.html
20:46:15 <Cale> Yi is a text editor which is written and extensible in Haskell
20:46:16 <dons> no Haskell mode yet. project's too young
20:46:38 <mwc> :O It's not self hosting?!
20:46:43 <dons> however, I don't think it's too hard to be better than the vim mode.
20:46:45 <reffie> is it a cli editor?
20:46:53 <dons> mwc, what are you talking about?
20:47:10 <mwc> dons, there's a fetish for self hostingness...
20:47:14 <Cale> reffie: right now it is, but it doesn't seem like there's any reason why you couldn't put a GUI on it
20:47:18 <mwc> ie, compilers for lang X written in X
20:47:23 <dons> in what sense is Yi not self hosting?
20:47:36 <mwc> Yi's source is not being worked on with Yi
20:47:40 <reffie> mwc you should eat your own food, i guess
20:47:45 <reffie> or something
20:47:46 <Cale> mwc: heheh
20:47:46 <dons> yes it is. sometimes.
20:48:23 <Cale> It's just not colourful in itself :)
20:48:26 <heatsink> why would you bootstrap a text editor?
20:48:39 <mwc> heatsink, shits and giggles
20:48:53 <mwc> heatsink, friday night and no date
20:52:05 <Cale> dons: so is the plan to have something like Parsec parsers operating on things? I think it would be neat to have parse-driven editing operations, though I'm not sure what those would be :)
20:52:35 <dons> arbitrary parsers, anyway.
20:53:06 <dons> proper syntax hl, for one, needs a good parser
20:53:29 <dons> and then things like grammar aware tab completion
20:53:51 <mwc> if one had a grammar for the language, you could highlight syntax errors
20:54:01 <mwc> in addition to merely doing syntax coloring
20:54:02 <dons> indeed.
20:54:14 <blackdog_> if you were very clever, you could do incremental type checking. :)
20:54:28 * mwc isn't that clever
20:54:34 <dons> blackdog has volunteered!
20:54:47 * blackdog_ knows he isn't that clever, either
20:54:52 <mwc> I think it's actually not so much being clever as not being totally lazy
20:54:57 * mwc is far to lazy
20:55:30 <Cale> heh
20:55:55 <blackdog_> ok. you be clever and lazy, and i'll be silly and strict
20:56:20 <blackdog_> speaking of which, anyone know why this doesn't work as expected:
20:56:23 <blackdog_> traceroute -n google.com 2>/dev/null | head -5 | awk '{print $2}'|grep -v '^192\.168' |grep -v '^10\.' |head -1
20:56:25 * mwc wonders iffit still be literate programination if I be commentatin in Ebonics
20:56:41 <dons> blackdog, you don't use enough sed.
20:56:45 <Cale> well, you at least need to be able to parse things, then I suppose you find where errors occur and comment out sections which are causing problems
20:56:52 <blackdog_> i thought unix shell was lazy, but if i don't put that first head in, it waits around forever
20:57:02 <blackdog_> dons: i use exactly the right amount of sed.
20:57:50 <blackdog> well, not forever. but until the traceroute finishes, at least.
20:59:01 * blackdog ambles off to request food from parents
21:01:52 <dons> I think you mean: traceroute -n google.com 2> /dev/null | sed -n 's/ *[^ ]* *\([^ ]*\).*/\1/;/^192\.168/!{/^10\./!p;q;};5q'
21:33:32 <blackdog> dons:  perhaps i got that wrong, it doesn't seem to print anything. could you put the sed invocation all on one line?
21:34:15 <dons> sed -n 's/ *[^ ]* *\([^ ]*\).*/\1/;/^192\.168/!{/^10\./!p;q;};5q'
21:34:21 <dons> prints: 129.94.174.2
21:34:22 <dons> for me.
21:49:39 <barkley> rush limbuah rulez
21:50:18 <barkley> what? we have conservative
21:50:22 <blackdog> Do go away, barkley, the adults are talking now.
21:51:08 <barkley> you hate that there are conservatives, and not socialist
21:51:15 <barkley> muwhaha
21:52:11 <barkley> i spite socialist
21:52:27 <barkley> suck it
21:52:41 <shammah> blackdog: any idea who the idiot is?
21:52:56 <blackdog> No clue.
21:52:57 <barkley> the hate of non-socialist
21:53:03 <barkley> oooohh
21:53:10 <barkley> love it
21:53:17 <shammah> blackdog: sounds like a bot to me.
21:53:36 <barkley> no, i've killed many commie
21:53:43 <barkley> suck it
21:53:49 <barkley> sorry assholes
21:53:58 <Cale> barkley: are you drunk?
21:54:06 <blackdog> shammah: hm, point. At a certain level of wit, it's hard to tell conservatives from shell scripts.
21:54:40 <barkley> at a certain point point we laugh at idiot
21:54:55 <shammah> blackdog: and even harder to tell raving lunatics from bots, especially when they're illiterate.
21:55:10 <barkley> hehe
21:55:15 <Cale> He seemed literate earlier
21:55:22 <barkley> we love lauging at idiot FSF morons
21:56:02 <barkley> brain damaged morons are cool
21:56:07 <Cale> barkley: maybe it's time to sleep?
21:56:08 <blackdog> I don't think he's interesting enough to be raving lunatic. I had a nice chat with a lunatic on the train the other day, and enjoyed it immensely. This guy's just a boorish redneck.
21:56:21 <barkley> bahaha
21:56:24 <barkley> "boorish"
21:56:27 <barkley> hehe
21:56:39 <barkley> eurotrash cunts
21:56:49 <blackdog> Anyway, I'm off to watch the Waratahs. Perhaps they might have remembered how to play this week.
21:56:58 <barkley> probably french
21:57:03 <barkley> idiot
21:57:09 <barkley> i laugh at eurotrash
21:57:36 <shammah> plonk.
21:57:48 <barkley> muhahaah
21:57:55 <barkley> little eurcuntsw
21:57:58 <barkley> love it
21:58:11 <barkley> suck it eurocunts
21:58:26 <barkley> you are inferior cunts
21:58:33 <barkley> muwahah
21:58:38 <Cale> hmm... when does shapr wake up?
21:59:08 <blackdog> Cale: looking for an op to address the signal/noise ratio? :)
21:59:23 <barkley> shut up eurocunts
21:59:38 <barkley> blondie owns your idiotcy
21:59:41 <dons>  that's what /ignore is for ;)
21:59:47 <Cale> yeah
21:59:52 <barkley> europeans are inferiory
22:00:05 <Cale> there we go :)
22:00:20 <shammah> :)
22:00:22 <barkley> whiny fucks
22:00:33 <barkley> why do euro-cunts always whine?
22:00:45 <blackdog> ah, cheers don.
22:00:49 <barkley> inferior cunts
22:00:58 <dons> hehe
22:01:43 <blackdog> i still don't understand why that sed doesn't work on my machine. i think that traceroute might have a slightly different format on mac.
22:01:56 <dons> ah. quite possibly
22:02:06 <barkley> why are europeans inferior?
22:02:08 <dons> maybe some tabs in there, or such like
22:02:11 <blackdog> anyway. Whatcha working on?
22:02:20 <dons> yi paper
22:02:22 <barkley> socialist, inferior cunts
22:02:31 <blackdog> can i see?
22:02:53 <dons> it's in chakcvs, if you want. but it's still mostly notes
22:03:27 <blackdog> i'm just curious as to how you get a paper out of a new editor. case study in using hs-plugins?
22:03:44 <dons> nope, lexer combinators and dynamic code injection
22:04:08 <blackdog> code injection is hs-plugins, though, isn't it?
22:04:08 <barkley> why do europeans live like shit?
22:04:16 <barkley> tell me why
22:04:39 <dons> via hs-plugins, but the design of the application is the important part. and things like state restoration
22:05:08 <barkley> look at europeaeriosn
22:05:14 <barkley> europeans
22:05:18 <dons> the hs-plugins paper only hinted at :reboot-like functions, now we actually do them
22:05:21 <barkley> europeans
22:05:29 <barkley> let's talk about europeans
22:05:45 <barkley> they live like 3rd world worlders
22:05:56 <barkley> small people
22:06:26 <barkley> jesus christ. how many times have we seen there shit
22:06:37 <barkley> europeans live like shit
22:06:51 <barkley> they are small fucks
22:07:10 <barkley> europeans live like 3rd worlders
22:07:23 <barkley> they are small idiots
22:07:27 <barkley> fuck em
22:07:31 <blackdog> very cool. mail me if you do a demo talk.
22:07:58 <Lemmih> No one got ops?
22:08:03 <barkley> we go to london, bonn, paris...
22:08:11 <barkley> we see how they live
22:08:20 <barkley> they are poor
22:08:27 <barkley> hehe
22:08:34 <barkley> they are inferior cunts
22:08:37 <dons> I think we've all /ignored
22:08:37 <blackdog> Lemmih: all indians no chiefs, alas.
22:08:45 <barkley> hehe
22:08:51 <barkley> look at these idiots
22:08:52 <heatsink> hmm, I unignored barkley too early.
22:08:57 <barkley> they are inferior
22:09:09 <barkley> look at how we live
22:09:14 <heatsink> well, anyway, I was just about to
22:09:20 <barkley> we live so much better
22:09:33 <barkley> we have much bigger houses
22:09:42 <barkley> they are much pooerer
22:09:52 <barkley> they are inferior
22:10:02 <barkley> i laugh at eurotrash
22:10:41 <barkley> uhh....4 thousand sq. feet?
22:10:44 <barkley> idiots
22:10:49 <barkley> we are rich
22:10:58 <barkley> you are poor assholes
22:11:05 <barkley> i hate u
22:11:10 <barkley> u hate us
22:11:58 <barkley> "little black spot
22:12:04 <barkley> fuckers
22:12:39 <barkley> how many fuckers have i killed in war
22:12:44 <barkley> suck it
22:12:57 <barkley> suck it
22:13:33 <barkley> i kill a fucker in war
22:13:47 <barkley> you're weak
22:13:59 <barkley> i hate europeans
22:14:10 <barkley> socialist cock suckers
22:14:20 <barkley> learn to hate me
22:17:13 <lilo> hi all.... did your problem child go away?
22:17:58 <dons> hey. hasn't spoken in a couple of minutes.
22:18:22 <dons> was extremely abusive though
22:19:12 <gzl> lilo: barkley!~fref@24.107.196.152.charter-stl.com
22:19:33 <vdrab> must 've been a stray bot... i don't want to imagine someone actually taking the time to sit down here and type all that on a programming language channel...
22:20:16 <gzl> yeah, it was probably a bot. still, a +q or something would help
22:20:18 <kaol> saturday, 5:20 UTC. Most of us eurotrash are still asleep. Time to wake up and start our commie day for me, at least. I wonder how my comrades are doing.
22:20:32 <vdrab> lol
22:20:36 <gzl> well, there's another.
22:21:12 <dons> going through the logs, I'm not convinced it was a bot :/
22:21:18 <gzl> it's hard to tell
22:21:25 <blackdog> Yes. Let us smoke thin cigarettes, eat some garlic, and plot the overthrow of the free market with our leftist lambdas.
22:21:45 <blackdog> No, he did respond to some things we said.
22:21:55 <gzl> oh, ok.
22:22:53 <Gahhh> he responded to a claim that he was a bot
22:22:54 <vdrab> wow. just... wow.
22:22:58 <gzl> oh, haha
22:23:47 <pediddle> could he pass the Turing test?
22:23:56 <KrispyKringle> You know, I once received bizarr-o German neo-nazi propoganda by e-mail at a rate of about one every 10-20 minutes for a space of two and a half days or so.
22:23:58 <Gahhh> possibly nothing else
22:24:12 <KrispyKringle> That was one of the stranger net-events I've seen recently.
22:25:46 <gzl> i still like the nigerian email scam
22:26:07 <KrispyKringle> Eh, it used to be funny. Now I just get it so often, I no longer even take the time to string them along.
22:26:10 <KrispyKringle> ;)
22:26:23 <KrispyKringle> I once got the guy to tell me what kind of underwear he wore.
22:26:35 <KrispyKringle> I said I would never do business with someone without knowing his choice of boxers/briefs.
22:26:58 <reffie> heh
22:27:00 * gzl stares skeptically
22:27:27 <pediddle> so what kind of underwear did he wear?
22:27:30 * Gahhh moves away from KrispyKringle a bit
22:27:33 * pediddle waits in suspense
22:27:41 <KrispyKringle> Wool boxers of a multi-colored variety.
22:27:47 <KrispyKringle> If I remember right.
22:27:54 <Gahhh> why do you *remember* at all
22:28:03 <KrispyKringle> Gahhh: you mean you wouldn't remember
22:28:04 <KrispyKringle> ?
22:28:13 <KrispyKringle> It's not like he sent me a photograph. Though perhaps I should have suggested it.
22:28:16 <Gahhh> I'd drink as much as necessary to forget another guy's underwears
22:28:31 <blackdog> Gahhh: why so uptight, honey? :)
22:28:35 <KrispyKringle> I'm quite secure in my sexuality, Gahhh. ;)
22:28:45 <KrispyKringle> Speaking of which, what are you doing tomorrow night?
22:28:52 <Gahhh> nothing hun
22:29:50 <vdrab> watch it, you're gonna draw barkley back in here with that talk...
22:30:13 <Gahhh> I dont care. I am empowered by ignore.
22:31:01 <KrispyKringle> Yeah, anyway. It's not like you have to listen to him.
22:31:04 <vdrab> true... that's one thing irc has on real life...
22:31:30 <KrispyKringle> Yeah, but real life has the ability to assault people.
22:31:37 <Gahhh> or be assaulted
22:31:44 <KrispyKringle> it's a fair trade
22:32:09 <Gahhh> it's pretty unfair to your typical irc fellow.
22:32:32 <KrispyKringle> Maybe. But the gut and flab serve as good armor.
22:32:44 <KrispyKringle> Anyway, I'm gonna hit the hay.
22:32:50 <Gahhh> nite hun
22:44:12 <reffie> i should try this yi thing
22:44:27 <pediddle> i'm compiling it as we speak
22:48:16 <dons> @yow
22:48:18 <lambdabot> Hello.  Just walk along and try NOT to think about your INTESTINES
22:48:18 <lambdabot> being almost FORTY YARDS LONG!!
22:48:28 <dons> @ghc
22:48:29 <lambdabot>   Try -fglasgow-exts for GHC's newtype-deriving extension
22:48:47 <dons> that's some nice advice, lambdabot.
22:49:11 <kaol> @fortune
22:49:12 <lambdabot> "Lrf, gung jnf Evpuneq Avkba.  Ur hfrq gb or Cerfvqrag.  Jura
22:49:12 <lambdabot> ur yrsg
22:49:12 <lambdabot> gur Juvgr Ubhfr, gur Frperg Freivpr jbhyq pbhag gur fvyirejner.
22:49:12 <lambdabot> "
22:49:12 <lambdabot> 		-- Jbbql Nyyra, "Fyrrcre"
22:49:26 <a5> so, how are all the eurotrash socialist cunts doing?
22:49:36 <kaol> just fine.
22:50:24 <dons> capitalists prefer java, I guess
22:50:48 <a5> well now i've learned a new irc command, thanks
22:51:31 <a5> my parser compiles but doesn't work :o
22:52:02 <blackdog> it's a bit sad, really. I've never had to ignore anyone on #haskell before.
22:52:12 <dons> a5, but that's supposed to be ILLEGAL in haskell! :}
22:52:46 <dons> blackdog, oh well. there are buttheads everywhere. and any tosser can type /join
22:52:57 <a5> dons: yeah that's what i thought. well it's an infinite loop
22:53:27 <a5> dons: write a type-checker that prevents non-termination :)
22:54:06 <dons> hehe
22:54:17 <blackdog> do you want turing completeness or do you want the truth?
22:54:20 <dbremner> a5 - doesn't the Haskell type checker identify certain types of infinite loops?
22:54:24 <dons> I'm just happy when I get a <<loop>>
22:54:32 <a5> i guess barkley was just really drunk, eh? i don't know how else one could become so stupid
22:54:42 <dons> maybe he was already stupid..
22:54:54 <dons> @plugs let f = f in f :: ()
22:54:54 <a5> btw, notice how he shut up after i agreed with him :)
22:55:00 <lambdabot> Fail: <<loop>>
22:55:03 <dons> yay!
22:55:20 <Lemmih> @plugs error "<<loop>>"
22:55:22 <lambdabot> Ambiguous type variable `a' in the top-level constraint
22:55:28 <Lemmih> @plugs error "<<loop>>" :: ()
22:55:30 <lambdabot> Fail: <<loop>>
22:55:33 <dons> yay!
22:55:51 <dons> it's a runtime error conspiracy!
22:56:18 <dons> mips64 keeps clanking along.. up to stage2/typecheck/TcPat.hs
22:56:43 * dons ponders getting some exercise
22:57:07 <epichrom> yeah get some mouth and stomach exercise.  eat some steak.
22:57:23 <dons> @help moo
22:57:25 <lambdabot> vegan-friendly command
22:57:30 <dons> @moo
22:57:31 <lambdabot>          (__)
22:57:31 <lambdabot>          (oo)
22:57:31 <lambdabot>    /------\/
22:57:31 <lambdabot>   / |    ||
22:57:31 <lambdabot>  *  /\---/\
22:57:31 <lambdabot>     ~~   ~~
22:57:33 <lambdabot> ...."Have you mooed today?"...
22:58:30 <epichrom> ok fine.  "what do you mean you don't eat meat?  that's fine I'll make you lamb!"  Lamb chops are just as good.
22:59:02 <dons> @karma- epichrom
22:59:04 <lambdabot> epichrom's karma has been decremented
22:59:14 <dons> hehehaha
22:59:21 <pediddle> @google ascii-art cows
22:59:22 <wilx> @karma wilx
22:59:24 <lambdabot> http://userpages.umbc.edu/~dschmi1/cows/ascii.html
22:59:24 <lambdabot> You have a karma of 0
22:59:37 <epichrom> Good thing I'm using my synonym today.
23:00:20 <a5> hey, i've found the problem: <SyntaxNinja> barkley: go away and drink beer now.
23:00:45 <epichrom> It comes before the drivel?  or after?
23:02:40 <a5> before
23:03:52 <a5> before he gets obviously drunk at least. maybe he's a recovering alcoholic and SyntaxNinja pushed him off the wagon :)
23:04:25 <a5> uh, just kidding
23:04:26 <dbremner> a5 - peer pressure can be hard to take. ;-)
23:06:31 <dons> pediddle: feel free to submit a tweak to the lambdabot @moo command to print random cows, instead of the same one each time.
23:06:35 <dons> @version
23:06:36 <lambdabot> lambdabot 2p431, GHC 6.4 (OpenBSD i386)
23:06:36 <lambdabot> darcs get http://www.cse.unsw.edu.au/~dons/lambdabot
23:06:45 <dons> that where you can get the src
23:07:42 <pediddle> i'll take a look
23:07:59 <pediddle> i just upgraded to OS-X 10.4 so all my dependencies are screwed up... currently recompiling GHC
23:08:08 * kaol will try to fix @vixen too
23:08:11 <blackdog> dons: but how do you _know_ you won't like cruelty?
23:08:15 <pediddle> @fixen
23:08:16 <lambdabot> I consider rabits as an endangered species.
23:08:18 <pediddle> @vixen
23:08:19 <lambdabot> help help!
23:08:20 <blackdog> kaol: what's wrong with vixen?
23:08:23 <blackdog> oh no!
23:08:32 <kaol> @vixen What's the meaning of life?
23:08:34 <lambdabot> i'm not sure what i mean
23:08:47 <kaol> I want it to answer "42" to that!
23:08:52 <blackdog> @vixen talk to me, baby. Are you still there?
23:08:54 <lambdabot> yes, still here
23:09:19 <dons> blackdog's @vixen's handler, so you should go through him if you have suggestions
23:09:33 <blackdog> ok. kaol: there's a big file of regexes as the config file for vixen. Feel free to submit patches to that file to me or don.
23:09:45 <dons> darcs send is the way to do that, btw.
23:10:26 <blackdog> kaol: patches! now! :)
23:10:27 * ozone goes to investigate DARCS_APPLY_*
23:10:44 <kaol> darcs is so cool that it keeps my room temperature below zero
23:11:14 <blackdog> btw, the waratahs game is champagne rugby so far.
23:13:31 <dons> yay
23:13:32 <dons> edison$ ./a.out
23:13:32 <dons> mipseb
23:13:32 <dons> irix
23:33:48 <Lemmih> Phew. Just pushed a patch with +200 lines of source documentation.
23:35:29 <pediddle> damn 10.4 -- fink requires gcc 4.0, but ghc requires 3.3 or it always bombs with /usr/bin/ld: Undefined symbols:
23:35:32 <pediddle> ___DISCARD__
23:36:34 <ozone> pediddle: did you try -pgmc gcc-3.3?
23:37:36 <pediddle> as an argument to ghc?
23:37:42 <ozone> yep
23:37:56 <pediddle> no, thanks!
23:38:08 <pediddle> although i have to edit all my Makefiles now
23:38:25 <reffie> so -pgmc fixes that?
23:38:31 <reffie> i mean adding that option
23:38:38 <reffie> that's good to know
23:38:41 <ozone> fink requires the default compiler is gcc 4?
23:38:43 <reffie> because i didn't know how to fix it
23:38:45 <ozone> reffie: i dunno, give it a shot :)
23:39:09 <pediddle> i think once i get fink updated i can switch back to 3.3, but yeah, it won't selfupdate without 4
23:39:37 <ozone> woo, and darwinports has hit 1.0
23:39:42 <ozone> finally, no stupid cvs instructions to install it
23:40:17 <pediddle> Under Mac OS X 10.4, Fink must be bootstrapped or updated with gcc 4.0.0,
23:40:17 <pediddle> however, you currently have gcc 3.3 selected.
23:40:43 <ozone> you can switch back to gcc 3.3 after updating fink, no?
23:41:05 <pediddle> i think so
23:41:54 <gzl> yes
23:42:10 <gzl> well, maybe. you can probably just gcc_select back and forth.
