00:13:48 <a5> ghc-6.4: out of memory (requested 1594884096 bytes)
00:13:53 <a5> wah
00:14:24 <reffie> hehe
00:15:04 <a5> help!
00:18:30 <skew> autrijus: hello?
00:20:01 <autrijus> yo
00:20:13 <skew> I still haven't gotten pugs to work
00:20:19 <skew> I mean, make smoke still dies
00:20:45 <skew> but I don't know anything about setting the perl include path and such
00:22:12 <skew> ah, the channel is #perl6
00:30:33 <a5> so "Map" is new?
00:36:12 <reffie> is there a way to tell ghc where to look for packages
00:46:38 <reffie> yi is pretty cool
00:47:03 <reffie> who's the author?
00:47:14 <reffie> dons is.
00:51:50 <reffie> % ./yi-inplace                                          [3:52]
00:51:50 <reffie> /usr/home/refugee/misc/yi/yi/HSyi.o: unknown symbol `iconv'
00:51:50 <reffie> Fail: user error (resolveObjs failed with <<False>>)
00:51:54 <reffie> this isn't nice though :(
00:53:07 <reffie> but i must admit that it's pretty damn cool
00:54:17 <Cale> hm? It doesn't work?
00:54:25 <reffie> the static version does
00:54:47 <Cale> did the autoreconf report any errors?
00:55:30 <Cale> It works okay here, in fact, I'm currently working on improving the vim mode
00:55:37 <reffie> no
00:56:23 <reffie> the emacs mode sucks
00:57:50 <reffie> some syntax hilighting would be nice too, of course :P
00:58:20 <Cale> do you have curses installed?
00:58:26 <reffie> yes
00:58:51 <reffie> i see the blue ~, à la vim
00:59:05 <reffie> but that's it
00:59:38 <Cale> yeah, there's no syntax highlighting yet, but it's planned
01:01:04 <Cale> iconv has something to do with curses
01:01:08 <reffie> but yeah, with a bit of work, this thing will become great
01:01:42 <Cale> the dynamic version can be rebooted while running
01:02:02 <reffie> nice
01:03:28 <reffie> the undo in vim mode is wrong
01:04:36 <reffie> instead of undoing all the changes you made in the input/replace/whatever mode at once, it undos one keystroke at a time
01:05:45 <Cale> I'll look into that, and at least make a comment about it. I'm not sure how the undo stuff works.
01:06:43 <Cale> The undo stuff needs some work anyway -- there's a subtle bug where :w then :q complains about unsaved changes because there's stuff in the undo buffer
01:06:57 <reffie> i wish i had time to work on it
01:07:00 <Cale> clearing the undo buffer on write would fix it, but really there should be a marker
01:07:12 <reffie> it seems a great way to improve one's haskell skillz
01:07:24 <blackdog> it seems silly to be doing manual testing on all this... given that we have a reference implementation in vim itself, wouldn't just feeding it random characters and stopping as soon as you diverge be a better idea?
01:07:28 <blackdog> mod chrooting etc
01:07:54 <Cale> heh
01:08:02 <reffie> that won't tell you what the problems are blackdog
01:08:08 <reffie> it'll just tell you that problems exist
01:08:25 <blackdog> no, but it gives you somewhere to look. You'll have a string of commands, and the first one that diverged.
01:08:54 <Cale> The differences between vim and yi are too big at the moment to even try that
01:10:01 <Cale> besides, vim has lots of functionality (esp with regard to syntax highlighting and options) that I'm sure we don't care is exactly the same.
01:10:43 <reffie> i think the vi and vim modes should be merged
01:11:00 <reffie> the files, that is
01:11:24 <reffie> if possible
01:11:25 <blackdog> reffie: so a vim.hs and a vi.hs both using vi-common.hs, something like that?
01:11:30 <reffie> yeah, blackdog
01:14:53 <Cale> I agree with that. I'm fixing bugs in the Vim mode which probably still exist in the Vi mode.
01:15:07 <reffie> anyway, i'm really impressed
01:17:04 <reffie> if only it had a better license :P
01:22:31 <jlouis> @google yi
01:22:32 <lambdabot> http://www.yi.org/
01:22:47 <jlouis> hmm
01:23:23 <reffie> @google yi editor
01:23:25 <lambdabot> http://www.cs.gsu.edu/~cscyip/
01:23:28 <reffie> bah
01:23:35 <reffie> http://www.cse.unsw.edu.au/~dons/yi.html
01:29:12 <Cale> you have a problem with the GPL?
01:29:25 <reffie> BSD is much better
01:29:42 <reffie> but i guess GPL is better than nothing
01:29:58 <Cale> Usually I don't care about the difference between those. I suppose I don't write commercial software though.
01:31:37 <reffie> ^L has problems, in vim mode
01:32:01 <reffie> arrows don't seem to work properly, after using it
01:32:09 <reffie> until i use some other command
01:32:27 <Cale> that's a bit bizarre
01:32:39 <reffie> can you reproduce it?
01:37:37 <reffie> ~ also seems wrong. in vim it only operates one character at a time, but in yi, it takes an 'argument'
01:39:18 <Cale> here ^L in command mode, then left and right, deletes to the end of line
01:39:28 <Cale> something funky is going on there
01:39:33 <reffie> indeed
01:40:17 <reffie> 'p' also is wrong. it shoul/d change the mode
01:40:26 <reffie> i think i can fix that one by myself :P
01:43:11 <sorje> And d$ deletes the \n too
01:44:13 <Cale> well, look at the code and submit patches :) that's what I've been doing :)
01:44:58 <Cale> I think the keybinding stuff for binding single key commands should be abstracted a little further, but I'm not sure exactly how I want to do it yet.
01:47:35 <sjanssen> are there any gentoo-er's in here?  I'm having trouble emerging hs-plugins
01:49:14 <raver> hi all
01:54:33 <reffie> i guess i'll install darcs
01:54:51 <reffie> and start my own branch
01:54:54 <Oejet> Good morning.
01:54:59 <reffie> 'morning
01:55:03 <dons> hey yi hackers.
01:55:14 <dons> how's code?
01:55:19 <reffie> but first, i'll finish this kernel thing i'm doing.
01:55:34 <Cale> dons: I think the single-key keybindings would like some special data structure of their own
01:55:57 <Cale> Currently you have to specify the keys to be bound in two places
01:55:58 <dons> can you elaborate a bit on that.
01:56:32 <Cale> Basically there's this pattern forming where you form some lexer(?) using alt
01:56:51 <dons> yeah, that creates a regex.
01:56:58 <Cale> and then `action` or `meta` it with a bunch of stuff to do in the case of each key
01:57:19 <dons> which associates a regex with an action, producing a lexer.
01:57:23 <Cale> right
01:58:05 <dons> so you don't like matching chars on the left and right sides of `meta`, for example?
01:58:35 <Cale> yeah, it would be nice to have some data structure with the keys and the actions and a single function which builds the lexer
01:58:42 <Cale> since it comes up so often
01:58:56 <dons> hmm. yes. that would be good.
01:59:04 <tuomov> I have such a thing for my joe mode..
01:59:15 <dons> generalise the current Map thingoes
01:59:24 <dons> ah, tuomov! darcs send!
01:59:31 <tuomov> kmap=[
01:59:34 <tuomov>     "\^KU" ++> topE,
01:59:34 <tuomov>     "\^KV" ++> botE,
01:59:38 <tuomov> that kind of stuff
01:59:49 <dons> where ++> does some magic, I guess.
01:59:59 <tuomov> s ++> a = (s, KMEAction a)
02:00:05 <dons> yep. this sounds good.
02:00:10 <tuomov> there's also &&> for queries
02:00:38 <tuomov> I guess that part of Yi is table enough already to send the mode..
02:00:55 <dons> yeah.
02:01:16 <bourbaki> moin
02:01:25 <Cale> KMEAction?
02:01:51 <sjanssen> does hs-plugins work with GHC 6.4?
02:02:00 <Cale> yes
02:02:09 <Cale> er
02:02:13 <dons> yes. grab the darcs repo
02:02:14 <Cale> I think so?
02:02:17 <Cale> yes
02:02:19 <tuomov> sent
02:02:40 <dons> @version
02:02:41 <lambdabot> lambdabot 2p431, GHC 6.4 (OpenBSD i386)
02:02:41 <lambdabot> darcs get http://www.cse.unsw.edu.au/~dons/lambdabot
02:02:46 <tuomov> data KME = KMEAction Action | KMESubmap KM | KMEMode (KProc -> KProc)
02:02:51 <dons> sjanssen: lambdabot runs on hs-plugins ;)
02:02:53 <tuomov> etc.
02:03:40 <tuomov> the submaps are obviously automatically created from the binding list
02:04:33 <dons> yep. i remember talking about this.
02:06:01 <Cale> Oh, there's a strange bug with ctrl-L which reffie just pointed out too
02:06:32 <Cale> go to the middle of a line, hit ^L, then left and right
02:08:02 <Cale> I also submitted a patch which got rid of the behaviour where switching out of insert mode always moved the cursor to the left by one (but it wouldn't display until you moved the cursor again)
02:17:32 <tuomov> I could separate the keymap building stuff from the joe mode and add some documentation, unless someone else is doing it already..
02:19:47 <Cale> tuomov: go for it
02:19:57 <Cale> then I'll convert vim mode to use it :)
02:20:03 <dons> sounds good
02:21:19 <tuomov> Is there some syntax for referring to parameters in the documentation format?
02:21:44 <dons> in haddock?
02:21:48 <tuomov> I guess
02:21:51 <tuomov> @foo@?
02:21:52 <lambdabot> Unknown command, try @listcommands.
02:21:57 <tuomov> heh
02:22:12 <dons> I could look up the haddock manual...
02:22:50 <tuomov> @google haddock manual
02:22:51 <lambdabot> http://www.geo.ed.ac.uk/nabo/webbone/haddock/Haddock_man.html
02:23:00 <tuomov> not quite what one would expect
02:23:38 <dons> not sure actually. maybe just 'foo' is ok.
02:24:04 <dons> Cal, ^L bug not reproducible on OpenBSD.
02:24:15 <dons> but linux has a quite different ncurses
02:24:25 <dons> with other oddities I've noticed previously.
02:24:46 <dbremner> tuomov - I think this is the one you want. http://www.haskell.org/haddock/
02:25:31 <dons> Cale, did you mail the patch?
02:25:49 <Cale> er... :)
02:25:52 <Cale> let me check
02:26:12 <Cale> there you are
02:27:16 <dons> ah, yeah. that insert mode bug is a little annoying.
02:27:22 <dons> wonder why I didn't notice it.
02:27:48 <dons> oh! ^L does reproduce on linux.
02:28:01 <dons> wonder what's going on there...
02:28:26 <dons> hmm. that's really weird. maybe ^L arrow arrow is is some other keycode.
02:31:26 <dons> just ^L AnyArrow AnyArrow does it.
02:33:47 <dons> :redraw Left does it too.
02:34:47 <dons> grr. linux ncurses.
02:37:38 <reffie> dons did you try yi on freebsd?
02:37:47 <dons> when I type LeftArrow in linux, I get '^[O' 'D' generated
02:37:57 <dons> that 'D' is going to kill to eol
02:38:15 <dons> reffie, yes. I test on freebsd.
02:38:24 <dons> but haven't tested the refresh bug yet.
02:38:26 <reffie> does yi-inplace work?
02:38:29 <dons> where?
02:38:33 <reffie> on freebsd
02:38:41 <reffie> it doesn't, for me.
02:38:43 <dons> ah, haven't tested that. but it should. hs-plugins does.
02:38:51 <dons> is it the iconv symbol error?
02:38:56 <reffie> yes
02:39:17 <dons> probably just not finding iconv properly. i'll investigate (sounds like a configure error)
02:39:29 <reffie> cool, thanks
02:49:36 <pesco> Mooh.
02:51:25 <tuomov> dons, Cale: done. There's now Yi.MakeKeymap that essentially exports makeKeymap, ++>, and &&>
02:51:36 <Cale> cool
02:51:39 <tuomov> the usage should be evident from the Joe mode
02:52:05 <dons> nice.
02:52:28 <tuomov> the right hand parameter to &&> expects a key processor that takes a continuation processor as parameter
02:54:41 <dons> thinking ... like a `meta` ?
02:55:01 <dons> oh. a metaM.
02:55:13 <tuomov> some of the handlers in the Joe mode use MetaM
02:55:26 <tuomov> or do they all.. hmm..
02:55:59 <tuomov> no
02:56:05 <dons> Cale, still didn't get any patch mail(?)
02:56:13 <Cale> oh?
02:56:18 <dons> tuomov:     Warning: Module `Data.FiniteMap' is deprecated: Please use Data.Map instead.
02:56:21 <dons> use Map
02:56:22 <Cale> Successfully sent patch bundle to Don Stewart <dons@cse.unsw.edu.au>.
02:56:27 <tuomov> I'm still at 6.2
02:56:27 <Cale> it said
02:56:28 <dons> Yi.Map
02:56:47 <dons> Cale, did it get off your machine though..
02:56:50 <tuomov> is there a 6.4 package for debian?
02:57:04 <dons> tuomov, you don't need 6.4. Yi.Map is a compatibility layer.
02:57:13 <tuomov> Ah. ok.
02:58:42 <dons> i'll tweak the usages
02:58:43 <Cale> 2005-04-30 05:56:34 1DRiMg-0003lS-00 note.orchestra.cse.unsw.edu.au [129.94.242.24]: Connection timed out
02:58:43 <Cale> 2005-04-30 05:57:18 1DRoFf-00050p-00 tone.orchestra.cse.unsw.edu.au [129.94.242.59]: Connection timed out
02:58:46 <Cale> hrm
02:59:34 <Cale> dons: did you get my first patch?
03:00:38 <dons> hrm.
03:00:55 <dons> I haven't received anything
03:03:21 <tuomov> fixed.
03:05:27 <dons> thanks!
03:05:29 <dons> too fast for me.
03:05:50 <dons> being able to darcs apply straight from mutt makes my life so much easier
03:06:02 <tuomov> yeah, it's a bliss
03:06:32 <tuomov> I refuse to apply normal patches anymore..
03:06:44 <dons> scary thining back to diff -ruN --exclude=CVS / patch -p0 < foo days
03:06:50 <dons> thinking
03:07:07 <dons> why did we put up with that crap for so long?!
03:07:09 <tuomov> darcs patches get the credits listed too without you having to think whether you should add the sender's name somewhere etc.
03:07:21 <dons> yeah, that's good.
03:09:10 <dons> oh, need to update yi.conf.in.cpp. done.
03:10:39 <dons> Cale, any idea what's happening with the mail?
03:11:39 <Cale> heh, exim seems to have had an old configuration which was bad
03:17:58 <gavin_god> hi
03:18:00 <reffie> is it me or does yi have trouble with long lines?
03:18:09 <gavin_god> has anyone here seen how crazy women are?
03:18:42 <dons> reffie, they wander off the end of the screen (no wrapping)
03:18:52 <reffie> yeah
03:21:13 <Cale> ahaha
03:21:16 <Cale> A message that you sent has not yet been delivered to one or more of its
03:21:16 <Cale> recipients after more than 16944 hours on the queue on zaphod.
03:21:24 <Cale> wow
03:21:28 <Cale> that's pretty bad
03:21:48 <dons> argh!
03:22:03 <dons> @plugs 16944 `div` 24
03:22:09 <lambdabot> 706
03:22:21 <Cale> yes, a few years
03:22:32 <Cale> I suppose that's a couple years
03:24:08 <dons> if I hit LeftArrow after a ^L on linux, it generates 4 characters: Esc [ D Esc
03:24:15 <dons> any other time, I just get \260
03:25:52 <dons> and I only ever get \260 on openbsd. ncurses programming is a path to hell
03:27:11 * dons goes to make some dinner and think about curses hacks
03:31:17 * Philippa wonders how hard it'd be to do a wxHaskell-based UI for yi
03:31:36 <Cale> hello shapr!
03:31:41 <shapr> y0 Cale
03:31:54 <dons> Philippa: WolgangT already hacked one up!
03:31:55 <shapr> wassup?
03:32:13 <dons> it's not in the repo yet, but we have a design for a more portable ui class
03:32:19 <TheHunter> hey shapr
03:32:34 <shapr> hiya TheHunter
03:32:40 <reffie> yi is clearly the editor of the future.
03:32:58 <dons> www.cse.unsw.edu.au/~dons/Yi.jpg
03:33:01 <dons> wxHaskell screen shot
03:33:17 <reffie> sweet
03:33:21 <shapr> nice
03:33:44 <dons> thank you reffie, I think I'll frame that :)
03:33:53 <reffie> hehe
03:34:14 <dons> @quote reffie
03:34:15 <lambdabot>   yi is clearly the editor of the future.
03:34:21 <dons> hehehaha
03:34:22 <reffie> :D
03:35:19 <TheHunter> shapr, i'm hoping to finish my tmr article till tomorrow.
03:35:50 <TheHunter> but i still need some people to proof-read it.
03:36:43 <Philippa> dons: cool
03:36:44 <Oejet> TheHunter: Sure, I'll read it.
03:37:52 <TheHunter> cool. Any critizism, suggestions, pointing out typos, weird grammar will be most welcome.
03:39:16 <shapr> Yeah, time to encourage all the authors to proofread all the articles.
03:39:35 <xerox> hi!
03:40:25 <shapr> I hope I'll have time to finish my Template Haskell Tutorial.
03:40:37 * xerox coughs
03:40:38 <basti_> hi
03:40:44 <basti_> aww yes tmr2
03:40:45 <basti_> !
03:40:46 <basti_> =)
03:41:08 * basti_ will add some stuff to make the article nice and round
03:42:25 <Oejet> Does the MoinMoin markup language have a BNF like grammar description?
03:48:58 <pesco> Moin shapr!
03:53:15 <Oejet> @paste
03:53:17 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
03:53:26 <dons> tuomov, remember yi's :reboot didn't quite restore state properly a while back? it does now :)
03:53:59 <Oejet> dons: I get an error while configuring Lambdabot, see the bottom of the paste page.
03:54:00 <bourbaki> hey boegel
03:55:15 <boegel> hey bourbaki (and everyone else)
03:57:31 <boegel> bye bourbaki (and everyone else)
03:57:41 <dons> Oejet: hmm. checking for value of __GLASGOW_HASKELL__... cmTypeOfName: it
03:57:50 <dons> that's weird. do you have a .ghci file?
03:58:18 <Oejet> ]cat ~/.ghci
03:58:19 <Oejet> :set +s
03:58:19 <Oejet> :set +t
03:58:19 <Oejet> :set -fglasgow-exts
03:58:36 * Oejet tries without.
03:58:58 <dons> the fix is to add -ignore-dot-ghci, if this is the case
03:59:06 <dons> (to configure.ac, which i'm doing anyway)
03:59:35 <Oejet> It works without the .ghci file.
03:59:47 <dons> can you pull the latest patch
03:59:54 <dons> and try that
03:59:59 <dons> with you .ghci file, if you like.
04:01:13 <Oejet> dons: Works.
04:01:18 <Oejet> Thanks.
04:01:31 <dons> open source software rules :)
04:02:16 <dons> Cale, no mail yet. I want that patch! :)
04:03:29 <Oejet> Patch fix. :-P
04:10:58 <reffie> ok
04:11:01 <reffie> i'm going to bed
04:11:03 <reffie> good night
04:11:08 <reffie> or good morning
04:15:47 <dons> so many aspects of curses programming are unspecifed by the man pages.
04:16:02 <dons> you know there's all this magic state changing what functions do on each call
04:27:42 <lilo>  /win 20
04:31:28 <dons> Cale, refresh bug fixed I think. can you try that patch?
04:32:12 <reffie> i wish ghc didn't take so goddamned long to compile
04:32:39 <dons> ah, reffie. I thought you were sleeping.
04:32:45 <reffie> yeah
04:32:45 <dons> feel free to try that fix for ^Ll
04:33:03 <reffie> well, i'm waiting for ghc to compile so that i can install darcs :)
04:33:38 <reffie> i'm upgrading to the latest ghc
04:44:48 <blackdog> dons: so when are we slavering macistas getting a peek at a shiny new interface, then?
04:48:17 <reffie> The Glorious Glasgow Haskell Compilation System, version 6.4
04:48:18 <reffie> yay
04:48:52 <reffie> ** Port marked as IGNORE: devel/darcs:
04:48:52 <reffie>         "is marked as broken: Configure fails"
04:48:54 <reffie> nice.
04:49:27 <xerox> HIya reffie
04:49:37 <reffie> hi
04:51:28 <pesco> reffie: is that darwinports? Strange, my darcs port worked, when I installed it a few months ago. If you manage to fix it, don't forget to submit a patch!
04:51:47 <reffie> pesco it's freebsd ports :P
04:51:56 <pesco> Oh, OK.
04:52:13 <reffie> it indeed fails in configure
04:52:14 <reffie> checking GHC.Handle.openFd new API... failed
04:52:18 <reffie> configure: error: Couldnt figure out how to call GHC.Handle.openFd!
04:52:24 <pesco> Oops.
04:52:43 <jlouis> dons: do you reckon I can bootstrap NetBSD GHC 6.2/4 from the OpenBSD hc-files?
04:52:45 <pesco> I guess you need to patch either darcs or GHC then. ;)
04:53:06 <reffie> pesco yeah, except i have no idea how
04:53:30 <pesco> Start by looking up GHC.Handle.openFd in the docs.
04:53:59 <pesco> Then look at the darcs configure script to see how it tries to use it.
04:54:49 <pesco> Then grep the darcs source for any occurances of openFd and try to figure out if the configure script is doing the right thing.
04:55:13 <pesco> Then start ghci to find out what's really up with openFd on FreeBSD.
04:55:17 <pesco> So that's your plan. ;)
04:55:19 <pesco> :P
04:55:22 <reffie> http://www.abridgegame.org/pipermail/darcs-users/2005-March/006301.html
04:55:52 <reffie> ill just get 1.0.3rc1
04:55:59 <sorje> heh
04:56:25 <pesco> Right. I stand corrected. Insert "try the latest version" before all other points. ;)
04:56:44 <blackdog> does anyone know if you have to do anything special to get yi to work with 6.2? I'm getting errors on the line {-# OPTIONS_GHC -optc-DGLASGOW_HASKELL=602 #-}
04:57:18 <reffie> yep, 1.0.3rc1 works.
04:57:21 <tuomov> builds just fine for me (debian-ghc 6.2.2)
04:59:41 <blackdog> perhaps it's a mac thing. I'm a bit confused, though, because i thought ghc was meant to ignore pragmas it didn't understand.
04:59:47 <blackdog> Yi/Curses/IConv.hs: unknown flags in  {-# OPTIONS #-} pragma: _GHC
04:59:54 <blackdog> fg
05:02:16 <musasabi> Is there any tool to convert ghc 6.2 package descriptions to 6.4 format?
05:02:33 <blackdog> musasabi: if you find out, please let me know.
05:02:37 <reffie> darcs isn't very fast on large repositories, is it?
05:03:07 <musasabi> reffie: darcs unstable is quite a lot faster and even more work is happening into that direction.
05:03:19 <musasabi> reffie: and e.g. on fptools it is quite snappy.
05:03:27 <blackdog> first we get correctness. then we get the speed. then we get the women.
05:03:39 * blackdog is overusing that line.
05:03:45 <reffie> how large is fptools?
05:04:08 <musasabi> the parts I used were ~40mb
05:04:18 <reffie> ah
05:04:35 <reffie> the tree i'm considering is freebsd
05:04:46 <reffie> which is around 400MB..
05:04:48 <reffie> iirc
05:05:42 <tuomov> I'm wondering if a tree of that size should be split into multiple repositories...
05:05:56 <tuomov> It can't be just the kernel..?
05:05:56 <musasabi> I think that will be quite slow at least without the improvements in unstable - which could make it bearably slow - but I don't have real experience of trees with that size (other that they seem to be slow no matter what system).
05:06:16 <reffie> well, tuomov some changes in the kernel need to be accompanied with changes in the userland
05:06:35 <tuomov> sure, but there's no good reason why it should all be in a single repository
05:06:51 <reffie> i split it in several trees, when i was using gnu arch
05:06:53 <reffie> but it sucked
05:07:15 <reffie> i don't remember why though
05:07:31 <tuomov> arch does even have some sort of support for this kind of thing..
05:07:38 <reffie> yes it odes
05:07:47 <reffie> configs or wahtever they are called
05:09:21 <tuomov> I have Ion 7 repos and it's a relatively small project
05:10:09 <tuomov> ion-3, libextl-3, libtu-3 are all essential for building ion, and then there's ion-doc-3, ion-scripts-3, mod_ionflux-3 and mod_xrandr-3 extras
05:11:38 <reffie> hm
05:13:10 <tuomov> in theory the libs could be used by other projects but in practice nothing else uses them to my knowledge..
05:14:13 <reffie> so you're the ion author?
05:14:17 <tuomov> yeah
05:14:24 <reffie> cool
05:14:34 <skew> lots of us run that
05:14:42 <reffie> i used to run it
05:14:51 <blackdog> apostate!
05:14:53 <reffie> but then i went to gnome
05:15:02 <skew> I have three monitors full of tiled terminals right now
05:18:46 <pesco> skew: I'm envious.
05:19:00 <pesco> I _need_ more monitors.
05:19:20 <tuomov> I need a bigger desk
05:19:29 <pesco> I need ISO clamps.
05:19:35 <pesco> er, VESA.
05:19:42 <tuomov> I might just be able to fit 3 tft:s on this but then there's be no other space
05:19:58 <skew> my desk is designed to fit under a bunk bed
05:20:13 <pesco> Ooh, cozy!
05:20:31 <tuomov> I have a corner desk attached to a shelf
05:20:45 <skew> I mean, it's like the bottom piece for a bunk bed, but at desk height rather than bottom-of-bunk-bed height
05:21:30 <pesco> Ah, interesting.
05:21:33 <skew> so those are three CRTs and there's still about a third of the length full of random trash, and two feed from the front to the monitors
05:21:37 <tuomov> but to accomodate for a bigger desk, I need a bigger flat
05:21:52 <skew> two of my foot, anyway
05:22:46 <blackdog> :w
05:22:58 <blackdog> oh, dear lord. that's the second time tonight. sorry, everyone.
05:23:14 * pesco giggles.
05:23:42 <musasabi> Converted haskelldb for GHC6.4 if someone is interested.
05:24:56 <skew> I got my two monitors from people moving away for about $150 total, and got the third from the CS department's abandoned stuff pile
05:31:46 <reffie> dons the fix for ^L doesn't seem to work
05:32:04 <shapr> whee
05:32:06 <reffie> wait a second
05:32:12 <reffie> you didn't commit it, did you
05:33:54 <shapr> xerox: Buon giorno!
05:35:53 <basti_> buenas tacos.
05:36:27 <blackdog> thank you, my dinner was excellent. how did you know?
05:36:53 <basti_> telepathy
05:37:07 <xerox> Ciao shapr!
05:37:20 <blackdog> they don't make tinfoil like they used to
05:37:21 <shapr> Hey basti_, the josephson junctions breakthrough may have already happened.
05:38:25 <basti_> oh
05:38:26 <basti_> how?
05:38:41 <shapr> electron tunneling refrigeration
05:38:49 <dons> reffie:   * Fix refresh bug on linux, make sure to reinit curses after resize
05:38:55 <dons> fixed it on linux for me.
05:39:00 <reffie> dons ^L?
05:39:02 <basti_> tunneling electrons freeze?
05:39:11 <reffie> dons still broken here.
05:39:11 <shapr> yeah, crazy isn't it?
05:39:16 <dons> reffie, yep. have you pulled the latest patch?
05:39:20 <reffie> yes, dons
05:39:21 <basti_> yes.
05:39:42 <shapr> basti_: http://www.scannedinavian.com/2005-04-29.html
05:39:45 <skew> no, that will consume it
05:40:12 <skew> er, that was supposed to go to #perl6
05:41:23 <reffie> wow "darcs whatsnew" is colored
05:41:33 <basti_> 200 mK is quite good
05:42:01 <dons> reffie, what's the value of NCURSES_UPDATE_AFTER_END in mk/config.h?
05:42:09 <basti_> that would make superconductor IC feasible immediately, if sc's could be litographed (which i believe they can't ;)
05:42:37 <reffie> /* #undef NCURSES_UPDATE_AFTER_END */
05:43:15 <reffie> dons ^-
05:43:17 <shapr> basti_: josephson junction based ICs can be lithographed.
05:43:44 <basti_> hmm ok.
05:43:44 <basti_> :)
05:44:27 <basti_> ah yes i remember, there are many superconductors with very low temperatures...
05:44:39 <skew> it sounds like some bits already have to be superconducting for this thing to work
05:44:48 <basti_> the current dicussion only focuses on ceramic "high temperature" superconductors which can't
05:45:09 <basti_> (be litographed)
05:45:27 <Maddas> Whoa :-)
05:45:28 <shapr> skew: good point... maybe bootstrappable from liquid nitrogen?
05:45:46 <basti_> would be annoying yeah.
05:45:48 <reffie> hm
05:46:01 <skew> that puts you back to working with high temperature superconductors, but maybe
05:46:20 <reffie> 'L' is wrong, in vim mode.
05:46:30 <reffie> it goes to the second to last line
05:46:31 <shapr> As in, use standard refrigeration to start up high temperature superconductors, then bootstrap down to josephson junction temperature.
05:47:03 <skew> did you see that picture I found of some kind of cryogenic radio equipment?
05:47:16 <skew> It was maybe 4U sized
05:47:31 <shapr> That's much smaller than pix I found from 1998.
05:47:34 <skew> certainly at least down to LN2 to be superconducting at all
05:47:34 <shapr> I want to see!
05:48:12 <reffie> and so does 'M' in fact
05:49:36 <dons> reffie, you on freebsd?
05:49:39 <reffie> yes
05:49:40 <skew> http://www.conectus.org/images/HTS_mobil_2.jpg
05:49:50 <dons> ok. I guessed wrong with the cpp
05:50:16 <shapr> That's tiny, how cold does that get?
05:50:34 <skew> based on the "HTS", LN2
05:51:30 <dons> reffie, can you try that patch?
05:51:42 <reffie> dons which patch?
05:52:02 <reffie> ok
05:52:07 * basti_ is listening to an old rammstein album... the lyrics are hilarious -g-
05:53:37 <reffie> dons heh
05:53:39 <TheHunter> shapr, how to add files to a TMR article?
05:53:46 <dons> works?
05:53:46 <reffie> dons it turns the text all black :P
05:53:51 <dons> ok. sigh.
05:53:59 <reffie> dons watn an account on my box?
05:54:09 <dons> nah. i've got a freebsd box somewhere
05:54:22 <reffie> but otherwise, the ^L behavior seems fixed
05:54:29 <dons> ok.
05:54:44 <dons> same behaviour on openbsd btw, (black screen)
05:54:50 <dons> so I just have to deal with that now.
05:55:02 <reffie> curses is clearly evil
05:55:47 * tuomov curses evil WIMP GUI to oblivion
05:56:13 <reffie> darcs is pretty nice!
05:56:34 <skew> tuomov: is there any quick way of making an unsplit key?
05:56:45 <tuomov> unsplit?
05:56:53 <tuomov> where?
05:57:07 <skew> for ion, to toss the windows back together
05:57:24 <tuomov> Mod1+K X?
05:57:47 <skew> thanks
05:57:58 <tuomov> It is bould to WIonWS.unsplit_at(_, _sub)
06:02:07 <xerox> Yawn.
06:02:09 <TheHunter> anyone else who wants to proof-read my upcoming tmr article?
06:02:33 <TheHunter> (about faking monadic reflection using linear implicit parameters)
06:08:09 <dons> TheHunter, send it over. I'll have a look.
06:08:22 <TheHunter> dons, cool, thanks
06:11:01 <Maddas> TMR? (The Monthly R...?)
06:11:09 <reffie> the monad.reader
06:11:22 <Maddas> Oh, er. Ok :-)
06:13:36 <TheHunter> Maddas, wanna have a peek at my article?
06:14:14 <TheHunter> shapr, it's ok if i give away the tmr url in /query, isn't it?
06:17:35 <Maddas> TheHunter: Don't worry, I'm not in a hurry :-) The time between now and the release is probably insignificant (especially if you're already at the proof-read stage) compared to the time I'll need to grok it :-P
06:20:42 <TheHunter> the release might be tomorrow...
06:22:56 <Maddas> :-)
06:26:20 * Philippa now has an article ready to go
06:26:31 <Philippa> at least, assuming shapr hurries up and enables attachments so I don't have to host the code .zip
06:27:41 * pesco giggles at the pun.
06:31:06 * Philippa suddenly has a thought
06:31:19 <Philippa> I could just sling it on scannedinavian, then it's his problem :-)
06:31:30 <pesco> Hehe
06:31:40 <TheHunter> MoinMoin supports attachments?
06:32:26 <Philippa> yeah, though they're off by default
06:33:43 <pesco> AAARRH. People in my house keep smacking things at the walls or something! THUNK, THUCK THUCKTHUCK. THUNK, THUCK THUCKTHUCK. Over and over!
06:34:20 <TheHunter> there's an acl system to be implemented before the release, too.
06:34:53 <Philippa> pesco: the THUNK being them and the THUCK your reaction?
06:39:05 <musasabi> Has anyone got a cabalized version of HSQL?
06:52:54 <jlouis> nearing a nhc98 port for NetBSD now. yay!
06:53:49 <jlouis> pesco: hah! you are lucky. Here we had a dog-howling concert for 2.5 hours yesterday
06:56:01 <dons> jlouis, I thought nhc was already in ports?
06:56:22 <dons> or is it old?
06:56:36 <dons> I run netbsd on my m68k ;)
07:03:11 <calavera> hi. probably a stupid question, but: can i do something like "type MyType a = (Eq a) => (a,a)". i.e. constrain the types that can be used to certain classes, so that i don't have to do this with every single function that i write for that type?
07:03:39 <shapr> TheHunter: yes, it's okay
07:05:57 <calavera> hmm. ghc does not complain, when i write something like "type MyType a = (Eq a) => (a,a)", but does complain if i don't write it in the function signature as well... bummer
07:06:29 <shapr> TheHunter: file attach is an option now, though I haven't tested it yet.
07:06:39 <d`> probably because this specfic condition can't be inferred
07:07:00 <d`> dunno
07:07:25 <shapr> calavera: check out GADTs
07:07:47 <calavera> G... Abstract Data Types... what does G stand for?
07:07:53 <shapr> generalized
07:09:19 <dons> gooey
07:09:20 <calavera> BTW don't go out and buy "Haskell - The Craft of Functional Programming" from Addison-Wesley if you want a book that you can also use as a reference.
07:09:23 <shapr> TheHunter: Anyway, dons is a (future) TMR author, he's got access.
07:09:29 <dons> ah, true.
07:15:08 <shapr> Any suggestions for editorial content?
07:15:23 <dons> reffie, if you're still there, try that patch. works on linux/freebsd for me :}
07:16:24 <dons> shapr, you asking me?
07:16:43 <shapr> It's more of a broadcast question, so yes, you.
07:17:56 <shapr> I'm not sure what to put into an editorial.
07:18:12 <shapr> Editorials have always seemed to be sort of like parasitic blog posts to me.
07:18:21 <dons> hmm. don't you pick a theme or issue, and write something.
07:18:26 <dons> like a parasitic blog
07:18:28 <shapr> haha
07:19:00 * Philippa_ may well start editorialising (albeit making it clear she's doing so) in subsequent IT articles
07:19:01 <shapr> Yeah, but that assumes that I have more clue than other people. I'd much rather have a guest editorial by someone especially clueful on a certain topic.
07:19:06 <TheHunter> shapr, great, thanks.
07:19:35 <shapr> I think I'm especially experience in web development, I could editorialize on that.
07:20:20 <shapr> Hm, yeah... I could connect Wadler's Links project to the various Haskell web dev projects.
07:22:33 <shapr> Awright, three definite articles for TMR2! w00!
07:24:21 <jlouis> dons: 1.16 is in ports. I almost have a 1.18 working here
07:24:26 <calavera> shapr, somehow i've come to suspect, that i need a cvs version of ghc to make use of GADTs. is that outdated information?
07:24:33 <shapr> calavera: 6.4 has them.
07:25:01 <jlouis> And soon I cannot jump around the problem: GHC needs an upgrade
07:25:06 <calavera> well in that case i will have to make do without
07:25:20 <shapr> :-(
07:25:27 <shapr> 6.4 isn't a cvs version, it's a real release.
07:25:28 <pesco> Philippa_: (reading backlog after shopping leave) No, they're both the THUNK and the THUCK.
07:26:02 <shapr> Ok, I think that Pseudonym and Wouter are both planning to have their articles ready for TMR2
07:26:16 <calavera> shapr, yes. but it is rather new. which means that those people who will get to grade my code will probably not have it
07:26:29 <shapr> Oh, that's too bad.
07:26:34 <shapr> GADTs are really spiffy.
07:26:44 <calavera> i agree
07:27:02 <shapr> I think they're especially good for explaining constructors to newbies.
07:27:08 <shapr> As autrijus pointed out.
07:27:16 <calavera> but it'll be okay. there's rather a lot of spiff in haskell without GADTs :)
07:28:46 <shapr> Truly, I agree.
07:32:22 <autrijus> but nowadays I can't live with GADTs, STM and TH2.
07:32:27 <autrijus> er, without.
07:32:33 <autrijus> freudian slip.
07:32:37 <shapr> heh
07:32:46 <autrijus> GHC 6.4 - can't live with it, can't live without it
07:33:02 * shapr snickers
07:33:26 * Philippa_ hasn't tried STM yet
07:33:34 <shapr> Hey autrijus, do you think Oleg's second part will allow subcontinuations to be turned into separate threads and still allow updates of the shared structure?
07:33:39 <autrijus> shapr: yes.
07:33:44 <Philippa_> then again, the last time I tried concurrency it was for an application where explicit Chans work well
07:33:56 <autrijus> shapr: but I don't yet have time to play
07:34:17 <shapr> I have this crazy idea to use that to solve one of the shootout.alioth sandbox problems.
07:34:46 <autrijus> my next batch of serious haskell tuits will be used to do
07:34:51 <autrijus> instance EvalMonad Eval
07:34:51 <shapr> pugs!
07:34:57 <autrijus> instance EvalMonad (RuleParser Exp)
07:35:10 <autrijus> instance EvalMonad CompileParrot
07:35:11 <autrijus> instance EvalMonad CompileGHC
07:35:28 <autrijus> so exactly the same evaluation primitives can be used
07:35:29 <shapr> Personally, I would much prefer you put your tuits into Pugs, I think that's better for everyone.
07:35:47 <autrijus> to both do the interpreter and do compilers for different backends
07:35:52 <autrijus> eh sure, I'm talking about pugs.
07:36:15 <autrijus> the key idea is that you can be instance of MonadReader
07:36:19 <autrijus> without actually implementing a pad
07:36:22 <shapr> So, where do I donate money to fund the Pugs project?
07:36:27 <autrijus> instead, all "ask" calls are actually code emitting
07:36:29 <autrijus> for compilers
07:36:38 * shapr thinks about that
07:36:52 <autrijus> shapr: pugscode.org has a link on donation
07:36:56 <shapr> That sounds like SeaSide
07:37:01 <pesco> Philippa_: Did you have no "Impure Thoughts" in IssueOne?
07:37:03 <shapr> I think?
07:37:25 <autrijus> shapr: I don't know about seaside internals.
07:37:39 <Philippa_> pesco: I'd intended to get the TH compiler article into it
07:37:47 <pesco> Oh, I see.
07:37:57 <shapr> autrijus: http://nat.truemesh.com/archives/000422.html
07:37:59 <Philippa_> there's a reason it describes itself as an irregular column
07:38:04 <shapr> Might be vaguely related, I'm not sure.
07:38:33 <pesco> Philippa_: Right. :)
07:39:33 <shapr> hiya xangd, learning Haskell?
07:40:01 <xangd> yeah. freshman
07:40:16 <autrijus> shapr: only on a metaphoric level
07:40:21 <shapr> autrijus: ok
07:40:27 <autrijus> since all our magic is on >>=
07:40:36 <autrijus> I'm sure seaside isn't quite based on >>= :)
07:40:48 <shapr> xangd: Have any specific questions? Do you already have a Haskell intro?
07:41:02 <shapr> heh, I think Smalltalk doesn't yet explicitly use >>=
07:42:56 <xangd> Thanks.. No question right now, just follow the tutorial.. -:)
07:43:09 <shapr> Ok, feel free to ask when you find questions.
07:44:55 <xangd> :) Thank you. shapr
07:55:19 <shapr> y0 CosmicRay
07:55:54 <CosmicRay> morning shapr
07:57:59 <shapr> Hey, didn't you tell me you won't have time to work on a TMR2 article?
07:59:35 <Cale> dons: I just sent you some patches manually... I have no idea why SMTP won't work from here
08:02:56 <Cale> ^L bug is fixed
08:04:05 <Cale> quitting yi now messes up my terminal though :)
08:10:07 <xerox> @pointless f g x y z w = ((f x z,g y w),(g x w,f y z))
08:10:11 <lambdabot> f = fix (liftM2 ap (((liftM2 ap . (((ap . (liftM2 (,) .)) .) .
08:10:11 <lambdabot> )) .) . flip . (((.) . flip . (((.) . (,)) .)) .)) (flip (flip
08:10:11 <lambdabot> . (((.) . (.) . flip . ((,) .)) .))))
08:10:11 <lambdabot> optimization suspended, use @pl-resume to continue.
08:10:17 <shapr> yow!
08:10:18 <xerox> Cough.
08:10:21 <shapr> xerox: nifty!
08:10:29 <xerox> I realle need it - yay
08:10:33 <xerox> *really, even
08:10:36 <Cale> @pl-resume
08:10:38 <lambdabot> f = fix (liftM2 ap (((liftM2 ap . (((ap . (liftM2 (,) .)) .) .
08:10:38 <lambdabot> )) .) . flip . (((.) . flip . (((.) . (,)) .)) .)) (flip (flip
08:10:38 <lambdabot> . (((.) . (.) . flip . ((,) .)) .))))
08:11:03 * xerox think of Arrows
08:14:53 <CosmicRay> shapr: that's correct (re not having time for an article)
08:15:15 <xerox> worldBounds = foldr (\(x,y) ((xMin,xMax),(yMin,yMax)) ->
08:15:16 <xerox>                      ((min x xMin, max y yMax),(max x xMax, min y yMin)))
08:15:16 <xerox>                     ((0,0),(0,0))
08:15:20 <xerox> I don't like it :-\
08:15:27 <shapr> ok, I'll move you to IssueThree
08:15:30 <xerox> But I can't get a nicer version.
08:15:51 <xerox> Anyway I do like the fact I'm folding only 1 time ;-)
08:17:36 <Cale> xerox: project out each component and use maximum?
08:18:01 <xerox> Cale, It would be more or less fast?
08:18:37 <Cale> You'd have to try it
08:18:52 <Cale> Asymptotically, it's the same :)
08:19:32 <scalopus> Hi
08:19:38 <shapr> hola
08:19:45 <scalopus> buenas shapr
08:19:47 <shapr> Â¿como est as?
08:20:03 <shapr> Not that I really speak Spanish.
08:20:14 <xerox> Cale, oh, nice :-)
08:20:39 * shapr likes learning languages, spoken and programming.
08:20:47 <scalopus> shapr: are you spanish?
08:21:02 <shapr> No, I'm from Alabama, USA. I do live in Sweden though.
08:21:14 <scalopus> multi-culture ;)
08:21:24 <shapr> Most people just say I'm confused ;-)
08:21:29 <scalopus> jajaja
08:21:46 * shapr throws lambdas at TMR2
08:21:58 <shapr> Man, my cookie keeps disappearing.
08:22:06 <shapr> scalopus: How do you like Haskell?
08:22:47 <scalopus> i am new with haskell, for now i see it is very interesting
08:23:10 <scalopus> i am interested in haskell and lisp
08:23:31 <shapr> They're both worth learning.
08:23:59 <pesco> Except that LISP can be annoying.
08:24:27 <dan2> lisp is irritating
08:24:49 <shapr> My only serious problem with lisp is the difficult people in the lisp user community, and the fragmentation of the implementations.
08:24:58 <tuomov> lots of irritating silly parentheses
08:25:08 <dan2> the function syntax sucks
08:25:21 <dan2> (+ 5 6) blah
08:25:39 <shapr> There are good points to that syntax though.
08:25:52 <pitecus> lithp
08:26:42 <shapr> I prefer significant whitespace, but parentheses in lisp are much like writing the parse tree directly.
08:26:43 <scalopus> both are in the functional area, it's interesting know differente languages
08:26:47 <shapr> Yes, I agree.
08:26:58 <pesco> There are basically two things annoying me about LISP: function-quote and no type inference.
08:27:00 <vegai> shapr: have you checked the chicken scheme community?
08:27:09 * Oejet 's Java programs sometimes has as many parantheses as LISP.
08:27:09 <shapr> No, I haven't.
08:27:18 <scalopus> parentheses are not a problem if you write with emacs or something similar
08:27:32 <xerox> Ta-da!
08:27:32 <dan2> I know a bunch of languages well... C/C++, Python, Perl, AWK, OCaml, SML, pieces of Haskell... Lisp isn't one of them
08:27:39 <xerox> wB = foldr (\p ((xm,yM),(xM,ym)) -> (((min xm *** max yM) &&& (max xM *** min ym)) p)) ((0,0),(0,0))
08:27:40 <dan2> include Java somewhere in there
08:27:45 <vegai> shapr: seems rather active and friendly
08:27:46 <hefner> dan2: I can tell.
08:27:49 * xerox dances
08:27:50 <shapr> vegai: I may check it out.
08:28:06 <Philippa_> Oejet: I submit that this suggests a problem in Java ;-)
08:28:36 <shapr> vegai: Though logic and constraint languages are on my list after Haskell, so I think I'm going to suck down CTM and Mozart/Oz next.
08:28:50 <TheHunter> @pl \(x,y) -> (f x, g y)
08:28:51 <lambdabot> uncurry ((. g) . (,) . f)
08:29:04 <TheHunter> @pl \x -> (f x, g x)
08:29:05 <lambdabot> liftM2 (,) f g
08:29:06 <shapr> Though I'm sure I'll find time for minor distractions like Fortress.
08:29:11 <xerox> TheHunter, you don't like it?
08:29:40 * pitecus thought Fortress didn't exist yet.
08:29:43 <TheHunter> xerox, nah, it's fine. I'm just thinking about adding some rules to @pl to convert to &&& and ***.
08:29:53 <xerox> Oh yeah, i would be great.
08:29:58 <TheHunter> but turns out that at least &&& is problematic.
08:30:00 <Oejet> Philippa_: Well: foo(bar(x)) has just as many parantheses as (foo (bar x)).
08:30:33 <tuomov> (foo $ bar x) has less!
08:30:55 <tuomov> I find foo(bar(x)) easier to read than (foo (bar x)), though
08:30:57 <vegai> eugh
08:31:04 <xerox> foo . bar $ x -- :-)
08:32:54 <tuomov> either style is fine, though.. I think the problem with lisp etc. is that the "control structures" use the same function style, adding lots of parenthesising
08:32:55 * Oejet finds that Common Lisps standard library is showing age.
08:39:16 <jlouis> I did not play a lot with lisp either. I played around with scheme for about 1.5 years
08:39:24 <jlouis> I cannot cope with the lack of types
08:54:03 <hefner> tumm: you might change your mind if you had to implement your own control structure
08:54:09 <hefner> sorry, tuomov
08:56:33 <tuomov> it being possible to do that doesn't change that them being parenthesised makes the code harder to read
08:57:19 <vegai> no it does not
08:57:35 <vegai> at least if you indent
09:01:15 <shapr> I prefer the hundred year language perspective. Nothing we have is perfect, let's all search for better solutions and share the good bits we find.
09:02:42 <TheHunter> off-topic question, but i guess many perl folks are present. What's the easiest way to get this Test::TAP::Model required for pugs' make smoke installed under debian?
09:02:57 <shapr> TheHunter: ask on #perl6, lots of help there.
09:03:05 <shapr> But I think they'll say to install/use CPAN.
09:03:46 <TheHunter> alrighty, i'll ask there.
09:04:23 <TheHunter> but i'm somewhat reluctant to install anything that's not managed by my distribution.
09:04:54 <TheHunter> man, typing single-handedly is a pain.
09:07:13 <Maddas> Do you use a special layout for single-handed typing?
09:07:21 <Jerub> there is a dvorak one
09:07:43 <Jerub> and a maltron that's designed for a single hand.
09:07:47 <TheHunter> nah, just querty
09:07:51 <Jerub> that sucks.
09:08:04 <Jerub> qwerty is painful with one hand.
09:11:00 <TheHunter> ok, back to two hands now :)
09:12:22 <Maddas> Hmm, Bodyflying looks like fun.
09:13:20 <shapr> Just don't dive into the prop.
09:14:01 <Maddas> Did you ever do it?
09:14:30 <shapr> Nah, just read about it. Wish I could try it, I'm light enough now!
09:14:46 <Maddas> Hah
09:15:09 <Maddas> I've got an opportunity to go Bodyflying for one hour with a bunch of people for a really good price
09:15:22 <shapr> Do it!
09:15:29 <Maddas> I'd miss a class (:
09:15:32 <shapr> Do it!
09:15:33 <Maddas> I might do it, though
09:15:40 <Maddas> Ok, I'm persuaded!
09:15:51 <shapr> Just tell your instructor ahead of time, see if you can get homework, whatever.
09:15:56 <Maddas> Yup, I will do that
09:16:11 <Maddas> Yeah, it's not just a regular lecture
09:16:19 <Maddas> I wonder what the best way to ask/tell him is, though.
09:17:07 <shapr> In my experience, instructors are understanding if you have something else you really want to do, and don't want to just skip out of the work for the class.
09:17:41 * Maddas nods
09:18:18 <shapr> You're doing it at RÃ¼mlang?
09:18:30 <Maddas> Hah, how'd you guess?
09:18:35 <Maddas> Yup, it'd be there
09:18:35 * shapr grins
09:19:12 <shapr> Google is the smart half of my brain.
09:19:23 <Maddas> I'd have thought there would be more places to do it :-)
09:19:35 <shapr> There are, but that's the only .ch site I could find.
09:19:51 <Maddas> Ok
09:20:20 <shapr> hei Esa
09:20:23 <esap> Hei
09:21:15 * esap hasn't been able to write the article :-(
09:22:45 <shapr> No worries, I haven't been able to write mine either.
09:23:05 <shapr> I hope to have time on Sunday to finish up a simple Template Haskell tutorial.
09:24:55 <TheHunter> when's the release?
09:25:29 <shapr> hiya Gahhh
09:26:02 <shapr> TheHunter: Would like to be before the first, but my time schedule predicts sometime on the first.
09:27:05 <TheHunter> before the first?
09:27:40 <Gahhh> hey Mr Erisson
09:27:41 <shapr> As in, I'd like it to be released today, as soon as I have five articles.
09:28:09 <shapr> Gahhh: Since you've not given away your real name, I can't exactly return the favor of being formal :-P
09:28:41 <shapr> TheHunter: but I may have to write my TH tutorial just to get five, so it may be tomorrow.
09:28:53 <TheHunter> shapr, i'd like to await Oejet's and don's review before releasing my article.
09:29:00 <TheHunter> Also, the conclusion needs to be written.
09:29:00 <shapr> Sure, cool with me.
09:29:17 <shapr> I'm aiming for noon tomorrow, or maybe evening tomorrow if there are more delays.
09:29:22 <shapr> How does that sound?
09:29:26 <TheHunter> shall i put it back to "Possible Article" status?
09:29:31 <shapr> Nah, it's good where it is.
09:29:35 <TheHunter> sounds good.
09:29:55 * Oejet haven't found any speling errors yet and the content is quite abstract, so it will take some time.
09:30:02 <shapr> Oh, I need to throw all the FpVsOo content in there so Alistair and I can shape it up some.
09:30:23 <Gahhh> shapr: I wasn't being formal per se. Take that with an Agent Smith voice ;)
09:30:34 <shapr> Ah, ok.
09:31:41 <shapr> basti_: Is your article ready?
09:31:55 <shapr> basti_: want me to move the images to haskell.org?
09:32:07 <shapr> Or you can attach them to the article directly.
09:35:12 <basti_> the images are ready. i would attach them if i knew how. I'd like to add another paragraph or two, though.
09:35:18 <shapr> ok
09:35:21 <basti_> the end is a little aprubt i think.
09:35:52 <shapr> Btw, should enharmonic be harmonic?
09:35:59 * shapr doesn't know anything about scoring.
09:36:16 <basti_> no it shouldnt.
09:36:23 <shapr> ok
09:36:41 <basti_> enharmonic means something special (same note/tuning, but two different names "by the system")
09:36:52 <basti_> so where would i "attach" files?
09:37:13 <TheHunter> just put attach:Filename anywhere.
09:37:20 <basti_> ah.
09:37:24 <shapr> There's an action at the bottom as well.
09:37:42 <TheHunter> oh, i didn't see that..
09:37:50 <basti_> ohh yesssss.
09:37:51 <basti_> :)
09:37:51 <shapr> You can attach the file to the page, and then refer to it multiple times inline.
09:39:43 <basti_> via attach:?
09:39:53 <shapr> yup
09:40:37 <TheHunter> can i have the link say something different than filename.tar.gz?
09:40:46 <shapr> Yes, I think so.
09:41:37 <basti_> attach:<file> doesn't work, [attach:<file>] doesn't too.
09:42:07 <TheHunter> oops, sorry, it's attachment.
09:42:35 <basti_> ahh
09:42:35 <shapr> I should add file attachment to the FormatDemo
09:44:11 <shapr> basti_: Should \midi be changed?
09:44:39 <shapr> Is that meant to be {{{midi}}} ? If so, I can change it.
09:49:07 <basti_> ohhh.
09:49:17 <basti_> thats a relic then.
09:49:20 <TheHunter> ok, [attach:<file> foo] will show foo and link to file.
09:49:23 <basti_> i'm currently working an the page
09:49:30 <basti_> at
09:49:32 <shapr> There's also a \textttt relic
09:49:41 <shapr> Anyway, nice article :-)
09:49:43 <xerox> *Conway> putStr $ showWorld world
09:49:43 <xerox> .#.
09:49:43 <xerox> ..#
09:49:43 <xerox> ###
09:49:45 * xerox yows
09:49:48 <shapr> xerox: spiffy!
09:50:11 <xerox> It is probably the worst code ever.. but whoa.. :-)
09:50:32 <liquidengineer> afternoon
09:50:47 <liquidengineer> I have an error question
09:51:04 <liquidengineer> polyDiv is a function I have
09:51:08 <liquidengineer> what does THIS error mean?
09:51:09 <liquidengineer> Implementation of polyDiv requires extra context
09:51:16 <shapr> basti_: I'd suggest adding links to the latest Haskore version that Henning Thielemann is hacking on, and the various Haskore extensions like HasChorus. I've also heard of various unreleased Haskore utility libs that people have written, you could ask for people to submit code they've written.
09:51:30 <basti_> no because they're reworking the type.
09:51:41 <basti_> the constructors will be different
09:51:43 <shapr> Ah right.
09:51:47 <basti_> i asked him and it's not stable yet
09:51:48 <Cale> liquidengineer: you supplied a type signature for polyDiv that seems more general than is required
09:52:05 <shapr> basti_: ok then, glad you already thought of that :-)
09:52:13 <basti_> :)
09:52:15 <liquidengineer> Cale: I'm not sure I understand
09:52:30 <liquidengineer> I've defined several other functions without a problem with identical type signitures
09:52:36 <liquidengineer> I don't get what makes this one any different
09:52:37 <Cale> liquidengineer: well, paste the code at the paste page and I'll have a look
09:52:51 <liquidengineer> !pastePage
09:53:01 <Cale> @paste
09:53:02 <liquidengineer> err...how do I ask the bot where the paste page is again?  ;)
09:53:03 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
09:53:05 <liquidengineer> ah
09:53:28 <basti_> i will attach that .tar.gz then, too, ok?
09:53:43 <basti_> to keep all the stuff in one place
09:54:46 <shapr> sure.
09:55:18 <liquidengineer> it's up
09:55:29 <liquidengineer> aside from the indentation being screwed up, is there anything else wrong with it?
09:55:41 <liquidengineer> I don't know why the indentation is screwed up
09:55:45 <liquidengineer> it looks fine in Text Wrangler
09:57:06 <TheHunter> hey Cale, do you some time to have a look at my tmr article?
09:57:23 <Cale> TheHunter: sure, though I'll warn you that I'm tired :)
09:57:53 <Cale> liquidengineer: and the error message you're getting?
09:58:40 <xerox> Inferred type is less polymorphic than expected  --  wow, never got this error before.
09:59:27 <Cale> What type is F?
09:59:32 <TheHunter> xerox, using ($)?
09:59:36 <xerox> TheHunter, nope
10:00:04 <xerox> If I don't put the signature, GHC infers: neighbours :: (Integer, Integer) -> Int
10:00:20 <Cale> and what signature are you trying to put?
10:00:27 <xerox> If I put neighbours :: (Integral a) => (a,a) -> Int  I get the error
10:00:31 <Cale> yeah
10:00:34 <liquidengineer> Cale: one second
10:00:37 <liquidengineer> can I msg you this stuff?
10:00:40 <Cale> sure
10:00:42 <liquidengineer> this window is kind of busy
10:00:48 <xerox> I don't see why Int doesn't work in that place, tough.
10:00:57 <xerox> Let me put online the code.
10:01:14 <reffie> i just love the ghc error messages
10:01:14 <Cale> probably because other things are defined to take Integers
10:01:22 <TheHunter> monomorphism restriction?
10:01:59 <shapr> @ghc
10:02:00 <lambdabot>   Duplicate instance declarations
10:02:18 <Cale> @ghc
10:02:19 <lambdabot>   GHC stack-space overflow
10:02:23 <Cale> @ghc
10:02:24 <lambdabot>   The signature contexts in a mutually recursive group should
10:02:24 <lambdabot> all be identical
10:02:28 <shapr> Hm, I thought the channel was pretty calm today.
10:02:28 <Cale> nice
10:02:30 <shapr> @ghc
10:02:31 <lambdabot>   Exotic Stmt in meta brackets
10:02:41 <theorbtwo> @ghc
10:02:41 <TheHunter> haven't had that one.
10:02:42 <lambdabot>   A lazy (~) pattern connot bind existential type variables
10:02:55 <shapr> TheHunter: I really like your game idea, what did you call it?
10:03:04 <TheHunter> and that's one of those that never practically happen.
10:03:15 <TheHunter> oh, i didn't give it a name.
10:03:54 <xerox> Hmm..
10:04:11 <shapr> It's something like a GHC error message scavenger hunt.
10:04:27 <reffie> heh
10:04:40 <theorbtwo> For a given error message, create an example that illicits it?
10:04:48 <TheHunter> yep.
10:04:49 <shapr> elicits it, but yes.
10:04:58 <shapr> Illicit is funny in that context, since errors always are, right?
10:05:11 <theorbtwo> 1;
10:05:17 <shapr> theorbtwo: Lemme guess, purposeful pun and I was just being slow?
10:05:18 <theorbtwo> Er, return true.
10:05:27 <theorbtwo> No, just me being stupid.
10:05:36 <theorbtwo> It's hard to tell with me.
10:06:00 <shapr> Still quite cute.
10:06:20 <theorbtwo> Thanks.
10:06:36 <shapr> That's one of things I love about live music, sometimes it's far better than what's on the sheet.
10:07:16 <theorbtwo> Sometimes.
10:07:25 <theorbtwo> Sometimes it's far worse.
10:07:50 <tuomov> you can pump it at much higher volumes than it flats...
10:08:50 <shapr> Tim Hagans and the Norbotten Jazz Orchestra performs regularly around here. They often perform music Tim Hagans wrote himself, and it's fascinating to see how much the mood of the performers and the crowd mix together to affect the performance.
10:10:40 <theorbtwo> One of the most community-feeling experinces of my life was a Red Hot Chilli Peppers concert.
10:11:13 <shapr> I'd like to see a concert by them. Even their studio recordings sound dynamic.
10:11:44 <xerox> http://segfaulted.com/~xerox/Conway.hs
10:12:30 <shapr> Nice, that's where you got the 'screenshot' from earlier?
10:14:39 <xerox> Yep
10:14:49 <reffie> what screenshot?
10:14:58 <TheHunter> xerox, problem solved?
10:15:12 <xerox> TheHunter, nope!
10:15:24 <xerox> reffie, hmm, probably mcclim-cairo ones?
10:15:42 <TheHunter> neighbours :: (Integral a) => (a,a) -> [(a,a)] -> Int ?
10:16:38 <xerox> Oh yes, I added the world to the arguments without fixing it
10:16:45 <xerox> And it works now, hmm
10:17:28 <xerox> With  bounds :: (Integral a) => [(a,a)] -> ((a,a),(a,a))  I still get the error, tough
10:17:42 <xerox> and showWorld
10:21:58 <basti_> whats the adverb of "parallel"?
10:22:02 <basti_> "parallely"?
10:22:06 <basti_> that sounds stupid
10:23:34 <Heffalump> 'in parallel'
10:23:42 <basti_> ahh
10:23:48 <basti_> yes.
10:23:54 <xerox> TheHunter, any clue?
10:24:42 <TheHunter> xerox, it works here (with all signatures enabled)
10:24:49 <xerox> Hmm.
10:26:48 <xerox> TheHunter, when you run it, center and world are made of Int or Integer?
10:27:39 <TheHunter> oh, i see the problem now.
10:27:52 <TheHunter> i was running ghci with -fno-monomorphism-restriction.
10:27:57 <xerox> Ah :-D
10:28:36 <TheHunter> center :: Integral a => (a,a) and world :: Integral a => [(a,a)] should do it.
10:30:11 <xerox> In fact center is unuseful..
10:35:26 <Gahhh> merriam webster says parallel is used as an adverb as well.
10:36:45 <Gahhh> neat word. an adjective, a noun, a transitive verb and an adverb. grand slam.
10:38:33 <basti_> hehe
10:39:53 <reffie> woo
10:40:14 <reffie> made my first yi patch
10:40:44 <Cale> reffie: what's it do?
10:41:01 <reffie> make '~' work like it does in vim
10:41:05 <Cale> reffie: did you notice the same problem as I did with the latest darcs version?
10:41:14 <reffie> what problem?
10:41:36 <Cale> it seems to mess up the terminal after exiting
10:41:46 <Cale> newlines don't get printed
10:41:48 <reffie> doesn't seem to mess it up here
10:41:58 <reffie> reset should fix it, though
10:42:04 <Cale> you have the ^L patch
10:42:05 <Cale> ?
10:42:08 <reffie> yes
10:42:10 <reffie> the working one
10:42:10 <Cale> Yeah, reset does fix it
10:42:37 <Cale> oh, and echo is turned off
10:42:40 <reffie> Sat Apr 30 09:46:41 EDT 2005  Don Stewart <dons@cse.unsw.edu.au>
10:42:42 <reffie>   * Fix ^L, this time for sure.
10:42:45 <Cale> yeah
10:43:01 <reffie> no such problem here.
10:45:42 <basti_> shapr: the article is done now. Every file dependency is attached now.
10:45:51 <Cale> I'll do a make clean before make this time, and then there is one environment variable set by configure that might be affecting things
10:48:54 <basti_> shapr: and, yes, when i wrote \midi i was thinking {{{midi}}} ;)
10:50:16 <Cale> okay, it seems to have nothing to do with NCURSES_UPDATE_AFTER_END
10:51:42 <basti_> aww and there is some uglines
10:52:18 <Heffalump> hi
10:54:10 * basti_ hopes everything is fine now.
10:54:19 <basti_> Heffalump: wanna have a look at my TMR article?
10:54:28 <Heffalump> sure
10:54:38 <basti_> http://www.haskell.org/tmrwiki/Haskore
10:56:34 <shapr> Looks good.
10:56:40 <basti_> :)
10:56:43 * shapr reads TheHunter's article
10:58:32 <Heffalump> when you say you corrected Haskore slightly, do you mean that you changed it to work with recent tools etc?
10:58:57 <basti_> tel
10:59:30 * shapr wonders if that was a backwards let
10:59:32 <basti_> ...ephone
10:59:34 <shapr> oh
11:00:05 <shapr> Yow, I'll have to read all the references to be able to understand this article.
11:03:22 <xerox> Is nub really slow?
11:04:13 <Cale> xerox: well, it has the runtime that you'd expect
11:04:31 <Cale> @type nub
11:04:37 <lambdabot> bzzt
11:04:41 <Cale> @type Data.List.nub
11:04:42 <xerox> @type List.nub
11:04:43 <lambdabot> Data.List.nub :: forall a. (Eq a) => [a] -> [a]
11:04:43 <lambdabot> List.nub :: forall a. (Eq a) => [a] -> [a]
11:04:49 <xerox> Hmm
11:04:51 <Cale> It only uses Eq a
11:05:01 <Cale> so it must be comparing every pair
11:05:01 <xerox> I'd better find a method to generate the coords I really need
11:05:23 <Cale> (which takes O(n^2) time, of course)
11:05:24 <xerox> Instead of generate everything and then nub the duplicates out
11:05:59 <Cale> Perhaps you'd be happier with a Set than a list?
11:06:10 <xerox> lives p world = n == 3 || n == 4
11:06:10 <xerox>     where n = neighbours p world
11:06:10 <xerox> tick world = [p | p <- territory, lives p world]
11:06:10 <xerox>     where territory = nub $ concatMap (around) world
11:06:18 <xerox> It does work, tough
11:06:43 <xerox> The last where clause feels *slow* :-)
11:07:06 <mwc> hmmm, no such luck having a sorted list?
11:07:14 <xerox> In fact I have this luck
11:07:20 <mwc> write your own.
11:07:23 <mwc> method
11:07:33 <mwc> then you just need to compare each element to the one before it
11:08:09 <xerox> It sounds like a work for fold.
11:08:14 <mwc> indeed
11:08:24 <mwc> come to think of it, even if you weren't sorted...
11:08:38 <mwc> a quicksort is nlogn and this is n
11:09:29 <Cale> I wonder how Set.fromList . Set.fromList would perform in comparison to nub :)
11:09:32 <Cale> er
11:09:38 <Cale> Set.fromList . Set.toList
11:09:46 <Cale> other way round
11:09:48 <xerox> Do you think I'd better lookup Set ?
11:09:49 <Cale> I'm tired :)
11:09:54 <xerox> s/lookup/use/
11:10:18 <Cale> I dunno, you could try it :)
11:10:36 <xerox> Anyway I'll get something like a tick per second.. more or less
11:10:41 <basti_> uhm
11:10:42 <basti_> back
11:10:50 <xerox> Maybe the problem is when the world is *big*
11:10:51 <basti_> "tel" is what you say in germany if you mean "phone brb" ;)
11:11:04 <shapr> ah, I see
11:11:17 <basti_> shapr: did you mean TheHunter's references or mine?
11:11:20 <xerox> Now I need a GUI! ^__^
11:11:26 <shapr> TheHunter's references.
11:11:35 <basti_> i thought, who's interested would look up the wikipedia, but of course i could add some links
11:11:41 <Cale> (toList . fromList) is way faster than nub :)
11:11:55 <shapr> I never got around to the theory behind call/cc
11:12:27 <basti_> it always ties a knot in your brain
11:12:40 <Cale> ridiculously faster
11:12:41 <shapr> I usually see it as knots I already have, waiting to be untied.
11:12:52 <Cale> Prelude Data.Set> length ((toList . fromList) [1..100000])
11:12:53 <Cale> 100000 (0.54 secs, 68366328 bytes)
11:13:06 <Cale> Prelude Data.Set List> length (nub [1..100000]) -- still waiting...
11:13:57 <basti_> is fromList implemented in haskell or via ffi?
11:14:01 <xerox> OK, switched to Set.
11:14:27 <Cale> I think it's in Haskell
11:14:38 <xerox> Cale, how do you get the time elapsed and the memory used?
11:14:41 <basti_> as in "sort then quicknub"?
11:14:51 <reffie> xerox :set +s
11:14:56 <Cale> basti_: Sets are internally balanced trees
11:15:06 <Cale> but yeah
11:15:11 <pediddle> remember in your test the list [1..100000] is already sorted
11:15:17 <pediddle> you might try it on a more representative list
11:15:19 <basti_> then its similar to heapsort, isnt it?
11:15:46 <xerox> Dinner time, later!
11:15:57 <beschmi> nubsort = map head . group . sort
11:16:13 <beschmi> is a bit faster than (toList . fromList) here
11:16:40 <Cale> yeah, that's probably saner :)
11:18:58 <reffie> hm
11:19:07 <reffie> what does a ! mean, in front of a type?
11:19:24 <Cale> It means that it's a strict field in the data structure
11:19:35 <reffie> so, no lazy evaluation?
11:19:50 <reffie> is it used for performance reasons?
11:19:56 <Cale> mostly
11:20:27 <Cale> yeah, I can't think of any other reasons :)
11:21:27 <reffie> :)
11:23:37 <shapr> aj: So, written much Haskell lately?
11:24:56 <shapr> Greetings putter.
11:25:02 <shapr> Want to learn Haskell? =)
11:25:27 <putter> :)
11:25:48 <putter> was wondering if anyone knew when 6.4.1 release might be expected...?
11:26:44 <shapr> Sadly, our GHC developer regular isn't here right now.
11:27:15 <shapr> I do know the 6.4.1 release has been sped up because of bugs like the one you're seeing.
11:27:30 <shapr> I'd suggest asking on the ghc-users list and describing your problem. That might speed up things even more.
11:29:10 <putter> shapr: thanks.
11:29:17 <goron> Cale: nub is O(n^2), I think.
11:29:36 <Cale> goron: yes, it must be at least O(n^2) :)
11:30:10 <Cale> (and the ordinary way to do it is O(n^2), so it almost certainly is :)
11:30:12 <goron> Cale: So, don't use nub for anything non-toy. But use it to convert the non-believers :)
11:30:31 <Cale> goron: I agree -- it was xerox that was using it :)
11:30:46 <reffie> xerox is clearly a non-believe
11:30:47 <reffie> r
11:31:12 <Cale> goron: my solution was the somewhat silly one with Data.Set :)
11:31:14 <goron> No some Holy Believer already converted xerox.
11:32:59 <reffie> does Map.update insert an element, if it isn't present?
11:33:47 <reffie> i guess i should use insertWith, instead
11:34:44 <Cale> btw, using Data.Map is a really good way to count the elements of a list which are equal to a particular value.
11:35:15 <Cale> If anyone hasn't seen that trick :)
11:36:39 <shapr> Yow, this article walks the edge.
11:36:41 <Cale> count xs = toList $ fromListWith (+) (zip xs (repeat 1))
11:36:45 <shapr> Some people are really gonna love it.
11:37:07 <basti_> because of call/cc?
11:37:20 <shapr> Nah, that's the just the setup.
11:37:39 <shapr> This is like a Haskell splatter film.
11:37:43 * shapr cackles happily
11:38:03 <basti_> hehehe
11:39:46 <vegai> that is weird. I found call/cc relatively easy (or perhaps I only think I got it ;)
11:40:29 <shapr> "In this article, we take the next step of impure programming by implementing Filinski's reflect and reify functions for a wide class of monads."
11:41:08 <vegai> ohh
11:41:19 <basti_> :-O
11:41:37 <vegai> the crowd goes wild
11:42:09 <shapr> basti_: You're an author, if your article is finished you can read TheHunter's article and give your review too.
11:42:27 <lightstep> what is the path towards gtk or wx with debian ghc6.4?
11:43:19 <shapr> Daan was working on adding Cabal support to wxHaskell two days ago.
11:43:26 <shapr> I don't think he's finished yet though.
11:43:40 <shapr> I think gtk2hs already has cabal support, check the repo.
11:43:40 <basti_> shapr: I see if I'll be tipping over backwards.
11:43:55 <lightstep> is there a temporary fix? or maybe some other graphics library?
11:44:19 <shapr> lightstep: I think you can grab gtk2hs from cvs and it will work with debian ghc6.4
11:44:20 <lightstep> (my 2 debian haskell repos don't have gtk2hs for 6.4 yet)
11:44:25 <lightstep> oh
11:44:40 <Cale> hehe, it uses implicit parameters *and* unsafePerformIO *and* dynamic exceptions :)
11:45:15 <shapr> *and* unsafeCoerce# ... this is *fun*!
11:47:03 * basti_ already coughs on the very first lines
11:47:32 <shapr> Now I see why TheHunter enjoys playing the GHC Error Hunt game.
11:48:58 <Cale> heh
11:50:53 <shapr> d`: Have you have had time to read up on monads?
11:51:12 <shapr> df_: oops
11:51:27 <shapr> df_: Have you had time to read up on monads?
11:52:39 <Cale> This wins the next IOHCC by default.
11:52:51 <Cale> :)
11:53:06 <basti_> shapr: btw, i kinda doubt there is any working access control in effect in the tmr wiki
11:53:10 <shapr> I must admit, this covers a lot of dark corners of GHC all at the same time.
11:53:16 <shapr> basti_: not yet.
11:53:27 <basti_> i see.
11:53:28 <d`> heh
11:53:32 <df_> shapr :: i've read up on them, yes
11:53:33 <d`> no, not really ;]
11:54:11 <shapr> w00, stereo responses!
11:54:20 <df_> i also fixed the original issue, i based some code what was being done in the prelude, which turns out to not run in constant space
11:54:56 <shapr> d`: They're worth learning!
11:55:32 <shapr> df_: cool, do you get sufficient speed to actually watch movies in pure Haskell? If not, is it some obvious multiple like three times slower or something?
11:56:24 * shapr turns off DeletePage on TmrWiki
11:56:38 <Heffalump> grr, bloody library changes
11:56:43 <basti_> shapr: TheHunter's article is uhm... delicious, so to say.
11:56:45 <df_> its still going to be far too slow - however thats not a big issue.  a possible speed up would (i'm guessing) to improve the bitwise IO
11:56:56 <df_> but, thats for later
11:57:40 <shapr> basti_: I can turn on the access control, but then everyone will need to be logged in for every change, and my cookie keeps expiring every few hours or something. Maybe just when I close my browser? I haven't looked to see why I keep getting logged out.
11:58:18 <basti_> i don't want to hinder anyone's access btw, i just wanted to note...
11:58:19 <xerox> reffie, why I am a non-beliver? :-(
11:58:30 <Heffalump> igloo: GHC 6.4 is explicitly being kept out of sarge, yes?
11:58:47 <reffie> xerox :(
11:58:58 <Igloo> yes
11:59:18 <basti_> i don't see any actual danger or something. How long a cookie stays active is controlled by the thing that generates the cookie (whatever it might be in moinmoin's case), and principially a cookie might expire only in 100 years or something, IIRC
12:00:44 <reffie> is it possible to add breakpoints, in ghci
12:01:36 <Igloo> reffie: That's not a simple concept with lazy evaluation
12:01:46 <reffie> :/
12:02:02 <shapr> I've heard that breakpoints are easy, reading the results is impossible.
12:02:40 <Cale> like, you could easily stop the computation, sure, but the thing that you breakpointed might have been the first thing to be evaluated
12:02:46 <shapr> reffie: check out the paper by Robert Ennals and Simon Peyton-Jones
12:02:49 <Cale> and you'll have no context whatsoever
12:03:04 <Cale> regardless of what it is
12:03:30 <reffie> well, shapr
12:03:38 <reffie> i just want to be able to debug this thing :P
12:03:58 <Cale> reffie: Debug.Trace is sometimes handy
12:04:32 <Cale> reffie: but it's best to just break it up until you can basically prove each piece is correct in your head :)
12:04:50 <basti_> or hand-test it interactively.
12:05:10 <reffie> anyway, i can't ghci Yi
12:05:17 <reffie> probably because of the c stuff
12:06:02 <xerox> Is there a Functor instance for tuples somewhere?
12:06:03 <mauke> is there a binary version of ghc 6.4 for linux that doesn't require glibc 2.3?
12:06:09 <mauke> I only have 2.2 here
12:06:20 <Cale> heh, I like the n+k pattern in there, just to be even more controversial :)
12:06:23 <TheHunter> xerox, no. it should be, imho, though.
12:06:46 <xerox> TheHunter, I agree.  Do you have one?  :-)
12:07:04 <TheHunter> instance Functor ((,) a) where fmap = second
12:07:05 <lightstep> mauke, why not have both?
12:07:19 <lightstep> mauke, (yeah, that's not an answer)
12:07:54 <mauke> lightstep: because glibc 2.3 fails to compile here
12:08:04 <xerox> TheHunter, what about n-tuples?
12:08:13 <mauke> parse error in pthread.h, apparently because pthread_t is unknown
12:08:58 <TheHunter> instance Functor ((,,) a b) where fmap f (x,y,z) = (x,y,f z)
12:09:23 <basti_> oh tuples are operators?
12:09:32 <basti_> or.. uhm... whatevers?
12:09:39 <xerox> Hmm, why do not act as map for lists?
12:09:53 <Cale> xerox: hm?
12:09:55 <TheHunter> basti_, they can't be used for sections.
12:10:07 <basti_> inline-syntax-things-that-we-can-"understand"-in-haskell
12:10:12 <basti_> uhm
12:10:27 <xerox> instance Functor ((,,) a b) where fmap f (x,y,z) = (f x,f y,f z)
12:10:38 <TheHunter> xerox, that doesn't type check
12:10:51 <xerox> Is there a way to do it?
12:10:58 <TheHunter> nope.
12:11:03 <xerox> :-(
12:11:44 <TheHunter> unless you define a type synonym data Triple a = Triple (a,a,a)
12:11:52 <lightstep> why not? f::a->a, fmap f::(a,b)->(a,b)
12:12:10 <basti_> TheHunter: your article is great. I don't understand a single word.
12:12:14 <lightstep> oh
12:12:18 <lightstep> nevermind
12:12:51 <TheHunter> basti_, well, thanks.
12:13:17 <basti_> that is, i understand some words, but i can't quite grasp what you're talking about.
12:13:20 <xerox> TheHunter, how did you call (id &&& id) last time we talked about it?
12:13:51 <TheHunter> i think "dup"
12:14:38 <basti_> shapr: did you move the article? i think about subsectioning it now i read TheHunter 's
12:16:04 <shapr> I didn't move anything?
12:16:35 <basti_> you talked about putting it in its final destination
12:16:40 <basti_> that was what i was thinking about.
12:17:37 <shapr> I did?
12:17:52 <basti_> you were TALKING about it, yes. I didnt say you were DOING it.
12:17:55 <shapr> I don't know what I was talking about then.
12:18:26 * TheHunter wonders what to write in his conclusion except "playing with just about every unsafe feature of ghc is great fun".
12:18:28 <dblhelix> can I ask which article this is about? :)
12:18:39 <basti_> okay.
12:19:25 <TheHunter> hmm, s/playing with/abusing
12:19:54 <basti_> added subsections
12:20:01 <basti_> TheHunter: where did you learn this kind of stuff?
12:20:13 <shapr> TheHunter: Why not just write that?
12:21:08 <TheHunter> yeah, i suppose i could write that.
12:22:25 <basti_> this is really insane, i think
12:22:49 <TheHunter> basti_, reading the wiki, papers, the haskell mailing list, and playing with ghc's esoterical features.
12:23:10 <TheHunter> http://haskell.org/ghc/docs/6.4/html/users_guide/type-extensions.html
12:23:16 <TheHunter> has a lot of interesting stuff.
12:23:47 <TheHunter> when i read about linear implicit parameters, i wondered how to abuse the "hidden computation".
12:23:57 <basti_> i kinda never have situations where this rather arcane sort of things would be neccissary
12:24:37 <lightstep> these are evil
12:24:46 <TheHunter> yep, it's rarely neccessary if you're doing practical things.
12:25:07 <TheHunter> but impractical things are often more fun, and i'm only doing haskell for fun...
12:25:12 <basti_> hehe
12:27:29 <lightstep> gtk2hs' makefile doesn't like me
12:29:07 <basti_> .....uhm, i mean, for example, i never restricted a monormorphism. I wouldn't know why or how to do that. I couldn't tell a monomorphism restriction if i saw one... and now the manual says: "The monomorphism restriction is even more important than usual."
12:32:45 <TheHunter> the monomorphism restriction often kicks in when you generalize functions to use type classes.
12:32:50 <TheHunter> or in xerox' example.
12:33:04 <TheHunter> Int <-> Integer.
12:33:21 <tautologico> ok, I am writing a program to infer a markov chain matrix from a text... I need to scan the text and update in a table the possible suffixes for every prefix, so it's an algorithm that lends itself well to imperative programming... any ideas on how to do it in a functional way ?
12:33:58 <shapr> That's totally quotable..
12:34:05 <pesco> What does the monomorphism restriction say, again? "Any top-level export without an explicit type-signature must be monomorphic."?
12:34:26 <lightstep> tautologico, pass an array between your functions (ghc optimizes it anyway)
12:34:41 <TheHunter> pesco, yep, and anything let/where-bound.
12:35:47 <pesco> Where monomorphic means "no free type variables" (or forall in front), right?
12:35:51 <tautologico> lightstep: I will have a lot of possible prefixes, so using an array is probably not going to do... I am thinking about a hashtable... the thing is, I need to update the entries in the table many times
12:35:52 <basti_> shapr: aww you were only talking about the images (pictures). I understood images (the-whole-thing-in-a-file-or-something)
12:36:02 <shapr> Oh
12:36:28 <Cale> I find that use of the word "monomorphism" jarring
12:36:37 <shapr> Well I'm glad you figured out what I was talking about, because I had no clue until you described it.
12:36:44 <basti_> shapr: :)
12:37:01 <pesco> Cale: Why?
12:37:06 <basti_> actually i know what a monomorphism is.
12:37:28 <TheHunter> free type variables might even be ok, i'm not sure.
12:37:59 <Cale> A monomorphism in mathematics is a homomorphism which is injective (or monic, in the more general context)
12:38:10 <pesco> Oh.
12:38:19 <basti_> mono is not the same as injective, but injective serves as a useful thought model
12:38:23 <Cale> yes
12:38:42 <basti_> in most situations both meanings are equivalent.
12:38:45 <Cale> It's the same in most of the cases you tend to talk about
12:38:47 <Cale> yeah
12:40:16 <TheHunter> foo x = bar undefined where bar _ = x is ok, foo x = bar undefined where bar 0 = x invokes the mr.
12:40:50 <basti_> :-o
12:41:13 <lightstep> i read somewhere that the mr isn't really necessary in haskell 98
12:41:59 <TheHunter> the problem with haskell 98 is that there are few places were type annotations are allowed.
12:42:03 <lightstep> or that it can be relaxed
12:42:10 <basti_> TheHunter: does that happen in compile time?
12:42:23 <TheHunter> with scoped type variables, the monomorphism restriction is (imho) more annoying than useful.
12:42:35 <TheHunter> basti_, sure.
12:43:13 <basti_> it doesn't.
12:43:18 <basti_> what did i do wrong? ;)
12:43:37 <TheHunter> basti_, you mean my second example?
12:43:58 <basti_> yes
12:44:01 <pesco> Did you pass -fno-monomorphism-restriction? ;-P
12:44:03 * pesco ducks.
12:44:03 <TheHunter> if you compile that with -Wall, you get a warning telling you that the 0 is defaulted to integer.
12:44:16 <basti_> ahh.
12:44:43 <TheHunter> pesco, sure, i've aliased my ghci to add an -fno-monomorphism-restriction (among others) argument.
12:45:03 <pesco> TheHunter: OK>
12:45:19 <shapr> hi Mike
12:45:29 <mikehammad> hey there!
12:45:29 <TheHunter> hmm, my example was bad.
12:45:39 * pesco goes back to his article.
12:45:47 <reffie> i shaved \ol
12:45:49 <reffie> \o/
12:46:00 <mikehammad> how goes the haskell world?
12:46:24 <shapr> No side effects yet, though we dangerously skirt the edges.
12:46:35 <mikehammad> that's good to hear
12:46:40 <shapr> How's code for you?
12:46:58 <mikehammad> i must confess...i'm writing a java applet
12:47:09 <shapr> Are you having fun doing it?
12:47:32 <mikehammad> yea it's actually a nifty little graphics app
12:47:39 <shapr> Good stuff then.
12:47:52 <mikehammad> are you familiar with swing?
12:48:01 <pesco> mikehammond: It's spinning in perfect alignment with HR8703.
12:48:02 <shapr> Yes, I am.
12:49:01 <mikehammad> ok, this is actually more an awt question.  but do you know how to keep a graphics window from blanking out after switching windows?
12:49:28 <mikehammad> i'm just using a Graphics object for a drawing window
12:50:01 <shapr> Well... I think you should ask on #java.
12:50:10 <mikehammad> yea i'm gonna do that
12:50:39 <basti_> you need to register there
12:50:44 <mikehammad> doh
12:50:45 <shapr> I think I know the answer, but I haven't used Java in the last coupla years, so you should probably ask someone who has used Java recently.
12:50:54 <mikehammad> how do i register?
12:51:02 <basti_> uhm
12:51:08 <basti_> you need to register your nick to be there there
12:51:10 <basti_> i wanted to say
12:51:30 <basti_> shapr: how does that work again?
12:51:35 * basti_ has only done it once :)
12:51:37 <shapr> try /msg nickserv help
12:51:41 <mikehammad> ok
12:56:06 <Oejet> Is Swierstra present?
12:56:55 <pesco> Oooh, you sound good in the military voice! ;P
12:58:01 <shapr> Who?
12:58:09 <shapr> Oejet: he goes by the nick swiert
12:58:20 <jjang> doaitse swierstra idles here?
12:58:32 <shapr> No, just his close relatives.
12:58:48 <jjang> oh ok
12:59:04 <Oejet> jjang: Did I scare you a bit there?
12:59:13 <jjang> ye man
12:59:22 <jjang> almost got a heard attack
12:59:26 <shapr> But since you've mentioned him by name several times, and the irc logs are indexed by google, I'm sure he'll discover what you think of him.
12:59:35 <Oejet> jjang: He's you teacher?
12:59:35 <jjang> hehe
12:59:38 <jjang> he was
12:59:42 <jjang> not anymore
12:59:45 <shapr> Did you drop the class?
12:59:52 <jjang> ye
12:59:56 <jjang> or in other words
12:59:59 <jjang> i passed the class
13:00:16 <Oejet> jjang: Unlikely. :-P
13:00:22 * shapr grins
13:00:26 <jjang> why unlikely?
13:00:34 <jjang> i just got back a 9.8 out of 10
13:00:40 <jjang> no chance for me to fail now ;p
13:00:45 <Oejet> jjang: How many passed?
13:00:50 <jjang> not many
13:00:54 <pesco> What class is that?
13:01:07 <jjang> i think about 40% passed
13:01:12 <jjang> 30-40
13:01:28 <Oejet> jjang: Congratulations then. :-)
13:01:28 <shapr> jjang: So are you Tom Hofte?
13:01:40 <jjang> shapr what makes you think that
13:01:51 <shapr> Just curious.
13:01:55 <jjang> im not
13:02:04 <jjang> Oejet: thanks ;p
13:03:40 <jjang> so oejet why are you looking for swierstra then?
13:04:05 <shapr> jjang: Do you think you'll be writing more Haskell in the future?
13:04:47 <jjang> ye
13:04:54 <jjang> i mean the language aint bad
13:05:13 <jjang> i now got java stuff again
13:05:19 <Oejet> jjang: I made a correction to his TMR article, and now I would like permission to do it.
13:05:35 <jjang> and when i do that i still think that would only take 2 lines in haskell vs 5 in java
13:05:50 <jjang> Oejet: ok
13:06:28 <jjang> Oejet: in theory you are allowed to make an correction if you only quote a small part of it
13:06:36 <jjang> w/o permission
13:06:46 <shapr> Oejet: he can see the changes, or you could put notes at the bottom.
13:07:17 <TheHunter> Oejet, i guess that's an obvious error, so it should be ok.
13:07:35 <TheHunter> i've made spelling corrections to other articles without permission, too.
13:08:10 <jjang> so any of you guys ever coded AI programs in haskell?
13:08:18 <tromp> sure
13:08:26 <KrispyKringle> i wrote my girlfriend in haskell.
13:08:31 <jjang> hehe
13:08:42 <KrispyKringle> just kidding. i dont know anything about AI. :P
13:09:05 <jjang> im considering haskell to write an app in i need
13:09:41 <dbremner> KrispyKringle - in college, the student paper had a personal in hex.
13:10:22 <Gahhh> ow
13:10:24 <KrispyKringle> dbremner: think it got any responses? What college? :P
13:10:37 <Philippa_> dbremner: there's a problem with that - which charset and which encoding? :-)
13:10:42 <KrispyKringle> I mean, I like geek chicks as much as the next guy, but that seems like you're limiting the playing field a bit.
13:11:00 <Gahhh> what if it was a woman who wrote it
13:11:10 <Philippa_> some of us like geeky women too :-)
13:11:20 <dbremner> KrispyKringle - personal may have been the wrong word. It was a woman's message to her boyfriend.
13:11:38 <KrispyKringle>  "SWM LOOKING FOR 0xA081"
13:11:42 <KrispyKringle> hmm
13:11:43 <Gahhh> lol
13:11:46 <KrispyKringle> Still geeky.
13:11:54 <Gahhh> it should be all in hex
13:11:58 <KrispyKringle> ah
13:12:02 <dbremner> KrispyKringle - Washington State University.
13:12:06 <dbremner> Gahhh - it was.
13:12:09 <KrispyKringle> Ah, that makes sense :P
13:12:28 <KrispyKringle> oh, wait, I was thinking University of Washington. Not the same?
13:13:07 <dbremner> KrispyKringle - the female CS/Engineering majors had a saying "the odds are good, but the goods are odd." ;-)
13:13:16 <KrispyKringle> I've heard that one ;)
13:13:26 <dbremner> KrispyKringle - the UW is on the other side of the state.
13:13:31 <Gahhh> that's a military phrase
13:13:34 <KrispyKringle> Otoh, for a male CS major, the odds are bad and the good are bad ;)
13:13:47 <KrispyKringle> No offense, Philippa_
13:13:56 <dbremner> KrispyKringle - The UW is also a better school.
13:13:57 <Philippa_> oh, I'm a bad girl and I know it
13:14:00 <KrispyKringle> haha
13:14:02 <KrispyKringle> ooh
13:14:03 <shapr> It's really hard to write code when there are fireworks exploding outside the window.
13:14:11 <dbremner> Gahhh - I've seen it attributed to MIT, Caltech, etc.
13:14:13 <KrispyKringle> Fireworks? What for?
13:14:14 <Gahhh> shapr: man, that sux
13:15:07 <Gahhh> KrispyKringle: Are we still on for tonite, dear ?
13:15:42 * KrispyKringle backs away slowly
13:17:11 <dbremner> KrispyKringle - the CS department had a fair amount of attractive women.
13:18:27 * Philippa_ nods
13:18:29 <Philippa_> same at UoN
13:18:33 <Philippa_> too many of them're straight though...
13:18:40 <shapr> Seems to be a much higher percentage of females in CS in Sweden.
13:19:18 <xerox> I came up with a "better looking showWorld", what do you think?
13:19:18 <xerox> showWorld w = unlines $ map (map draw) $ [z | y <- [yM,yM-1..ym], z <- [[(x,y) | x <- [xm..xM]]]]
13:19:18 <xerox>     where draw p = if p `Set.member` w then '#' else '.'
13:19:18 <xerox>           ((xm,ym),(xM,yM)) = bounds w
13:19:45 <dbremner> shapr - that doesn't surprise me.
13:23:21 <dbremner> shapr - you may find some of the papers on this page of interest. http://www.xrce.xerox.com/competencies/content-analysis/tools/guesser-ISO-8859-1.en.html
13:24:47 <shapr> Nift
13:24:51 <shapr> y
13:25:51 <Philippa> try map id (foldl (:) [] [1,2,3])
13:25:54 <Philippa> it thinks that's welsh
13:26:01 <shapr> haha
13:26:26 <xerox> How nice, dbremner
13:27:14 <Philippa> oh, and it thinks a canonical C Hello World is English
13:27:21 <dbremner> I tried some A+ source and it says Romanian.
13:27:28 * shapr throws in a nice mix of German, Swedish, and Dutch.
13:27:46 <shapr> Interesting, it seems to switch on adverbs first and verbs second.
13:27:55 <xerox> OK, goodnight folks!
13:28:03 <KrispyKringle> Philippa: what thinks this?
13:28:07 <shapr> g'night xerox
13:28:20 <Philippa> KrispyKringle: the thing dbremner linked to
13:29:10 <Gahhh> impressive stuff.
13:29:25 <KrispyKringle> Catalan_iso1
13:29:25 <KrispyKringle> hrm
13:29:43 <TheHunter> g'night xerox
13:29:47 <KrispyKringle> I don't know what Catalan is, but I don't speak it.
13:29:55 <Gahhh> Catalan's live in spain
13:30:13 <Gahhh> Barcelona I think
13:30:18 <KrispyKringle>  Thought so.
13:30:28 <dbremner> hmm, it thinks Forth is English.
13:30:42 <KrispyKringle> I'm more a fan of that page that tells you if something is written by a man or a woman. I wonder what it thinks abou tprogramming alnguages.
13:30:58 <Gahhh> depends if a man designed the grammar ;)
13:31:41 <KrispyKringle> I can't remember the URL. So I googled 'written by a man or woman text analysis' and got back something about semen analysis.
13:31:44 <KrispyKringle> I should write Google a letter.
13:31:47 <Gahhh> lol
13:32:01 <dbremner> Gahhh - there's Laadan. http://www.sfwa.org/members/elgin/LaadanLessons/
13:33:38 <Gahhh> dbremner: lol
13:33:55 <dbremner> Gahhh - Láadan is a female-centric language created by a linguist to test Saphir-Whorf
13:34:00 <Gahhh> "widazhad  	to be pregnant late in term and eager for the end"
13:34:07 <Gahhh> very nice example
13:34:51 <dbremner> Gahhh - here's a more general description. http://www.sfwa.org/members/elgin/Laadan.html
13:35:19 <KrispyKringle> wha?
13:36:44 <basti_> how would one test sapir whorf with an artificial language?
13:37:13 <TFK> Anyone here speaks Lojban?
13:37:28 <dbremner> basti_ - 3rd paragraph of the link I just posted.
13:38:26 <KrispyKringle> lojban?
13:39:40 <basti_> hmm afaics that would imply the need for women to grow up with that language.
13:40:00 <shapr> TFK: xu do tavla mi bau la lojban
13:40:05 <basti_> but nevertheless, i have heard of people where men speak a different language than women, and use a common idiom among each other.
13:40:28 <TFK> shapr, ah, I agree. o_O
13:40:40 <shapr> mi djica lenu mi gunka
13:40:45 <Gahhh> basti_: that's pretty much everybody I thought ;)
13:40:46 <dbremner> basti-I'm hardly a polyglot, but given time I've been able to think in other languages.
13:41:14 <basti_> Gahhh: not meaning the cases where this happens only metaphorically :P
13:41:55 <dbremner> there's also http://www.msnbc.msn.com/id/4356095/ a Chinese script for women.
13:41:57 <Gahhh> basti_: It's not metaphorical. I read this book.
13:41:58 <Gahhh> http://www.amazon.com/exec/obidos/tg/detail/-/0060959622/qid=1114893758/sr=8-1/ref=sr_8_xs_ap_i1_xgl14/102-7165132-4765728?v=glance&s=books&n=507846
13:42:10 <basti_> dbremner: i can only speak german and english well, and my english pronounciation is terrible
13:42:25 <basti_> Gahhh: i know this sort of book yes.
13:42:54 <basti_> Gahhh: i see there is some point to it. lets agree that the concept of "language" is ill defined.
13:42:57 <tromp> i thought i knew C syntax...
13:43:37 <dbremner> Gahh - all of her books are excellent.
13:43:38 <tromp> but i fail to see why i get these syntax errors
13:43:58 <Gahhh> dbremner: I have two. That one and Talking 9 to 5.
13:45:03 <dbremner> Gahhh - the local thrift stores have lots of copies. I think I've got them all. "That's Not What I Meant." got me hooked.
13:45:45 <basti_> is it only me or does Gahhh sound like some sort of emotional utterance?
13:45:55 <basti_> as in "Gahh... ghc dumped core"
13:45:58 <Gahhh> basti_: Haha yes
13:47:10 <basti_> oh that lesson... i've heard about languages with this sort of features... where saying "i know X" when you only heard that X is a lie and others...
13:47:43 <basti_> or where most words are "verbish" in nature
13:51:52 <basti_> would be interesting to examine such "three language" people's languages to get an idea what the differences would be
13:57:43 <basti_> is everyone off celebrating may or what?
13:58:29 <seba> i must to develop a haskell program that work with polynomials
13:59:02 <seba> some idea about the estructure? maybe a list of reals?
14:00:14 <basti_> yes why not
14:00:22 <basti_> if it's polynominals with positive-only powers
14:00:32 <basti_> respective: how else?
14:01:27 <seba> basti_: the polynominals are of positive power, not the coeficient
14:04:19 * shapr boings
14:04:28 <shapr> I think I shall go work now.
14:04:35 <shapr> Unless there are questions first?
14:05:20 <shapr> I'll take that as a negative, bbl
14:07:44 <Oejet> Cabal question: Would it break things if package.conf in GHC was moved to somewhere else?
14:09:16 <Lemmih> Yes.
14:10:00 <Lemmih> At least if it breaks ghc-pkg.
14:11:30 <Lemmih> But it wouldn't be hard to make Cabal pass --package-conf=[FILE] to ghc-pkg.
14:11:58 <liquidengineer> hi
14:11:58 <pediddle> anybody ever seen this while compilng GHC?:
14:12:19 <pediddle>  /tmp/ghc18947.hc: In function `shoy_ret':
14:12:20 <pediddle>  /tmp/ghc18947.hc:30451: error: void value not ignored as it ought to
14:12:21 <pediddle> be
14:13:00 <liquidengineer> what's this error supposed to be tellinng me?
14:13:19 <liquidengineer> *** Does not match : [Fld]
14:13:20 <liquidengineer> *** Expression     : fListToIntList result6
14:13:20 <liquidengineer> *** Type           : [Fld] -> [Fld]
14:13:21 <liquidengineer> *** Term           : result6
14:13:46 <Oejet> Lemmih: It was argued that package.conf belongs somewhere in /var.
14:13:58 <pediddle> you didn't give enough arguments to your function result6
14:14:10 <pediddle> er, fListToIntList
14:14:33 <liquidengineer> that's what I thought it means
14:14:36 <liquidengineer> that makes no sense
14:14:41 <liquidengineer> it's only supposed to take one argument
14:14:52 <pediddle> maybe result6 is (accidentally) a function not a value?
14:15:48 <liquidengineer> could be
14:16:00 <liquidengineer> here's the signiture of fListblabla
14:16:02 <liquidengineer> fListToIntList :: [Fld] -> [Int]
14:16:16 <liquidengineer> did that show up?
14:16:19 <liquidengineer> I can never tell...
14:16:30 <pediddle> i think it's saying result6 has type [Fld] -> [Fld] but it's expecting [Fld]
14:17:16 <liquidengineer> that's so bizarre
14:17:24 <pediddle> where do you get result6 from?
14:17:30 <liquidengineer> resultSix isn't supposed to be anything but a [Fld]
14:17:34 <liquidengineer> it comes from this
14:17:42 <liquidengineer> resultSix = polyZeros f
14:17:47 <liquidengineer> inside a do statement
14:17:50 <mauke> result6 or resultSix?
14:18:00 <liquidengineer> both
14:18:08 <liquidengineer> it's a massive do statement
14:18:18 <pediddle> try (resultSix : [Fld]) = polyZeros f
14:18:22 <reffie> so i made another  yi patch
14:18:24 <pediddle> see if that's the error
14:18:26 <mauke> resultSix is irrelevant
14:18:35 <mauke> the error is about result6
14:18:36 <liquidengineer> mauke: huh?
14:18:41 <pediddle> (result6 : [Fld]) = polyZeros f
14:18:43 <liquidengineer> there is no resultSix
14:18:45 <pediddle> whatever
14:18:45 <liquidengineer> I'm sorry
14:18:49 <liquidengineer> it's just result6
14:18:56 <liquidengineer> I've been doing this for six hours
14:18:59 <liquidengineer> it's starting to all blend together
14:19:01 <mauke> what's the type of polyZeros?
14:19:45 <liquidengineer> 	polyZeros :: [a] -> [a] -> [a]
14:20:05 <mauke> there's your problem
14:20:41 <mauke> f has the type [Fld], so polyZeros f has the type [Fld] -> [Fld]
14:22:17 <liquidengineer> pediddle: that didn't work to well. the do statement is outside the instance where Fld is defined, so it's griping about unresolved bs.
14:22:43 <liquidengineer> mauke: okay...
14:22:44 * liquidengineer blinks.
14:22:52 <liquidengineer> wait a second.
14:23:39 <liquidengineer> I'm a moron
14:23:46 <liquidengineer> that's the wrong signiture
14:24:01 <liquidengineer> polyZeros is only supposed to take one [a] arg and return [a]
14:24:34 <Gahhh> ooh LtU is about to be slashdotted. Article on Fortress links to LtU...
14:24:57 <liquidengineer> pediddle, mauke: thanks for your help
14:25:41 <liquidengineer> my god
14:25:44 <liquidengineer> the program is done
14:25:50 <liquidengineer> who knows if it works or not, but it's done.
14:25:55 <liquidengineer> I'm almost afraid to test it now.
14:26:01 <liquidengineer> wait...no...it's not done.
14:26:14 <liquidengineer> I still need to implement a function to find the zeros of a polynomial stored as a list
14:26:17 <liquidengineer> damn it.
14:26:23 <liquidengineer> so much for my elation
14:27:55 <Cale> liquidengineer: over Z_7?
14:29:53 <liquidengineer> pardon?
14:29:57 <liquidengineer> over?
14:30:08 <liquidengineer> I don't recognize that function
14:30:14 <Cale> Your field is Z_7, iirc.
14:30:33 <Cale> The integers modulo 7
14:30:54 <Cale> so you have only 7 roots to try
14:31:23 <liquidengineer> I do?
14:31:31 <Cale> If that's really the case
14:31:35 <liquidengineer> yeah
14:31:43 <Cale> so just test 0 through 6
14:31:43 <liquidengineer> all my fields are mod 7
14:31:57 <liquidengineer> okay
14:31:57 <Cale> There are other fields?
14:32:04 <liquidengineer> err...
14:32:05 <liquidengineer> sorry
14:32:07 <Cale> You just have one :)
14:32:17 <liquidengineer> I'm still not entirely sure what a field is
14:32:24 <liquidengineer> I suck at number theory stuff
14:32:36 <liquidengineer> all I know is it's only got four legal operations.
14:32:44 <Cale> A field is a set with + and - and * and multiplicative inverses
14:32:45 <liquidengineer> addition subtraction multiplication and inverse
14:32:51 <gzl> well, really 2 operations
14:32:52 <liquidengineer> ah
14:32:54 <liquidengineer> okay
14:32:56 <gzl> it's just closed under inverses
14:32:59 <Cale> yeah
14:33:02 <liquidengineer> closed?
14:33:17 <gzl> in the sense that every element has an additive inverse and a multiplicative inverse
14:33:22 <Cale> http://en.wikipedia.org/wiki/Field_%28mathematics%29
14:33:25 <Cale> there :)
14:33:55 <liquidengineer> cool
14:33:58 <liquidengineer> thanks.
14:34:05 <liquidengineer> okay
14:34:06 <Arsilan> www.Arsilanhamid.1gp.dk
14:34:18 <gzl> you might also want to look at the article on finite fields
14:34:26 <liquidengineer> so it makes sense that I'd only test for 0 through 6 as zeros, then.
14:34:30 <tuomov> hmm.. fortress looks interesting
14:34:31 <gzl> yes
14:34:43 <liquidengineer> but how do I test if something is a zero
14:34:48 <liquidengineer> I know how to factor by hand easy
14:34:56 <liquidengineer> generalizing it ... my brain's locking up
14:34:58 <gzl> you plug it into the polynomial, evaluate,  and see if you get 0
14:35:06 <liquidengineer> ....oh.
14:35:10 <gzl> a is a root of f(x) iff f(a) = 0
14:35:13 <liquidengineer> god, I'm stupid.
14:35:29 <liquidengineer> i was trying to figure out a way to make the computer factor.
14:35:37 <gzl> much harder problem :)
14:35:45 <liquidengineer> indeed.
14:35:50 <liquidengineer> it made me dizzy
14:36:37 <gzl> and there's no general algorithm so it would be really annoying
14:36:49 <liquidengineer> no kidding.
14:37:05 <liquidengineer> on the plus side, haskell's IO system made perfect sense to me
14:37:16 <liquidengineer> and everything else appears to be working (compiling, at least)
14:37:20 <liquidengineer> so I'm happy
14:37:49 <Philippa> once you grok return, haskell IO's easy
14:38:06 <Philippa> grokking /why/ return can involve some fun mental gymnastics if you're not used to the ideas though
14:38:26 <Cale> heh, that's kind of funny, but I get your point
14:39:20 <gzl> liquidengineer: what are you playing with fields for?
14:39:30 <gzl> writing some kind of field theory module?
14:39:43 <Cale> btw, I like the definition of a ring as a set with 5 operations: 2 nullary, 1 unary, and 2 binary :)
14:40:35 <gzl> that's weird.
14:41:32 <gzl> i see your point, but it's still weird.
14:44:32 <gzl> Cale: how's your linear algebra / module theory?
14:44:41 <liquidengineer> hey
14:44:42 <liquidengineer> sorry
14:44:49 <Cale> It's okay. Module theory could be better :)
14:44:51 <liquidengineer> someone asked me a question right before my connection keeled over
14:44:59 <liquidengineer> what was it?
14:45:05 <gzl> liquidengineer: what are you writing?
14:45:14 <liquidengineer> ah
14:45:22 <gzl> Cale: mind if I msg you? being a bit dense about something, should be relatively simple.
14:45:48 <liquidengineer> it's a polynomial algebra program that takes a file containing polynomials represented as lists of ints
14:46:07 <liquidengineer> converts them to lists of Fld elements, and evaluates test cases
14:46:18 <liquidengineer> (f + g), f^5 power, etc.
14:46:23 <liquidengineer> it's my FP final exam
14:46:26 <liquidengineer> *final project
14:46:34 <Cale> gzl: I'm very tired right now, but I can have a look :)
14:46:53 <liquidengineer> we're using Fields, I think, because our professor wanted to show us to them
14:46:55 <gzl> it would be cool if it could find splitting fields and stuff
14:46:59 <liquidengineer> he's big into theoretical mathematics.
14:47:05 <liquidengineer> gzl: indeed.
14:47:07 <gzl> he wants to show his students to fields?
14:47:23 <liquidengineer> gzl: switch that, please. :)
14:47:28 <liquidengineer> I'm tired.
14:48:33 <Cale> pssst... I think Q(Sqrt(-5)) likes you
14:50:09 <gzl> yes, they're neat. and it's interesting how you can apply them to seemingly unrelated things like straightedge and compass constructions
14:50:30 <liquidengineer> I should really stop
14:50:38 <liquidengineer> I'm getting so worn out I'm forgetting how to do simple things
14:51:00 <liquidengineer> like evaluate a polynomial represented as a list at a given root
14:51:35 <liquidengineer> Oh.
14:51:36 <liquidengineer> My.
14:51:38 <liquidengineer> God.
14:51:47 <liquidengineer> I hate this.
14:51:58 <liquidengineer> I just tried to run my io function.
14:52:08 <liquidengineer> it prints out this, and quits:
14:52:13 <liquidengineer> "Illegal operation."
14:52:19 <liquidengineer> no line numbers
14:52:20 <liquidengineer> no error
14:52:33 <Oejet> liquidengineer: I think you are rambling now.
14:52:50 <liquidengineer> actually, I'm not.
14:53:07 <liquidengineer> I have an IO function w that contains a giant do statement
14:53:15 <liquidengineer> it reads from a file, does some stuff, and writes out results.
14:53:20 <liquidengineer> when I try to execute w
14:53:29 <liquidengineer> it just says there was an "Illegal operation."
14:54:02 <liquidengineer> One would assume the existence of an error implied an illegal operation.
14:54:12 <liquidengineer> thus it might be helpful for the interpreter to, you know, tell me what the error is.
14:54:58 <zamez> hehe
14:55:09 <liquidengineer> hugs sucks for errors
14:55:11 <zamez> sounds like a typical user
14:55:15 <zamez> "it doesn't work"
14:55:44 <liquidengineer> zamez: actually, I'm a student, so I don't yet know the langauge inside and out.
14:56:01 <zamez> I didn't mean you as the user
14:56:08 <liquidengineer> oh
14:56:09 <liquidengineer> heh
14:56:13 <liquidengineer> yeah
14:56:15 <zamez> I meant the kind of message you get on a mailing list
14:56:37 <liquidengineer> yeah
14:56:38 <liquidengineer> I've seen those
14:56:54 <liquidengineer> it's kind of a foot in the door thing for some people
14:57:09 <liquidengineer> they find someone who's willing to help, and then supply the extra information
14:57:16 <liquidengineer> it's less they have to type if no one wants to help
14:57:25 <liquidengineer> of course, it just pisses a lot of people off
15:01:06 <dbremner> liquidengineer - OTOH, anyone who wants to help gets to play 20 questions.
15:03:19 <liquidengineer> exactly
15:03:25 <liquidengineer> which sucks
15:03:30 <liquidengineer> I've had to do it over the phone
15:03:43 <liquidengineer> @PastePage
15:03:45 <lambdabot> Unknown command, try @listcommands.
15:03:51 <wilx> @paste
15:03:51 <liquidengineer> @paste
15:03:52 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
15:03:53 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
15:04:00 <liquidengineer> wilx: thanks
15:06:55 <liquidengineer> I pasted some code that compiled fine
15:07:18 <liquidengineer> when I type w into the hugs thing and hit enter I get a "Illegal Operation" message
15:07:33 <liquidengineer> what's wrong, and how can I fix it?
15:08:37 <liquidengineer> hugs is being absolutely no help. :)
15:11:16 <liquidengineer> if the syntax was illegal it would've stopped me when I tried to load it, right?
15:11:44 <gzl> why don't you use ghci?
15:11:56 <gzl> ghc has much better error messages in general
15:12:28 <reffie> @ghc
15:12:42 <Igloo> liquidengineer: Does p.txt have 2 lines of text?
15:12:51 <lambdabot>   Urk! Inventing strangely-kinded void TyCon: ZCt{tc a2AN} (*
15:12:51 <lambdabot> -> *) -> * -> *
15:13:01 <liquidengineer> because my professor and textbook are hugs based
15:13:03 <reffie> nice error message.
15:13:14 <liquidengineer> I don't know how to use ghc
15:13:40 <Gahhh> liquidengineer: what are the intListX functions supposed to do ? You are not using them.
15:13:54 <liquidengineer> would that really help me here?
15:13:59 <liquidengineer> it seems like the problem is after compilation
15:14:08 <Gahhh> I'm trying to understand what you are trying to do here.
15:14:15 <liquidengineer> wouldn't it just compile without error and then crash out when I tried to run it?
15:14:38 <Gahhh> it shouldnt crash. if eof, that is an exception, not a crash.
15:16:57 <liquidengineer> Is there anything actually wrong with what I put on the paste page?
15:17:58 <Gahhh> the let clauses look odd. you don't use them tho.
15:22:11 <liquidengineer> sorry
15:22:18 <liquidengineer> stupid nag window
15:22:30 <liquidengineer> it closes the program every time I don't say I'm ready to buy
15:23:01 <liquidengineer> @paste
15:23:02 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
15:25:20 <liquidengineer> is there anything wrong with the code I just stuck in the pastebin?
15:26:37 <liquidengineer> it got quiet in here
15:29:31 <ski> the parens around the calls to hGetLine and read, as well as around line, are unnecessary
15:30:16 <liquidengineer> could they be causing the runtime error?
15:30:33 <ski> hm
15:30:43 <ski> what is the runtime error ?
15:30:47 <ski> hm
15:31:04 <ski> you do have (at least) two lines in the file, right ?
15:31:52 <liquidengineer> yeah
15:31:56 <liquidengineer> "Illegal Operation"
15:31:57 <ski> the extra parens shouldn't cause modify how the prog behaves at all, just a style thing
15:32:10 <ski> um
15:32:15 <liquidengineer> that's all it says
15:32:20 <liquidengineer> I swear
15:32:24 <liquidengineer> It's driving me mad
15:32:25 <ski> weird
15:32:32 <pediddle> anyone speak hs-plugins?
15:32:40 <liquidengineer> not I
15:33:19 <liquidengineer> ski: any ideas?
15:34:35 <ski> (.. you don't use intListF,intListG, but that shouldn't be a prob. you aren't required to use variables bound to values ..)
15:35:50 <ski> liquidengineer : hm, try using  read manually on each line (as a string) in hugs/ghci
15:36:17 <ski> (to make sure the 'read' is not the problem)
15:36:49 <liquidengineer> how would I do that?
15:36:51 <liquidengineer> in hugs?
15:37:31 <ski> like      Foo> read "the first line of the file"
15:37:41 <ski> Foo> read "the second line of the file"
15:38:02 <ski> hm
15:38:25 <ski> liquidengineer : were you using hugs or ghc previously ?
15:38:30 <liquidengineer> hugs
15:38:32 <basti_> re
15:38:34 <liquidengineer> I don't have GHC set up
15:38:44 <ski> ok
15:38:58 <liquidengineer> so, when you say manually, how should I get at the file?
15:39:05 <liquidengineer> *first line of the file
15:41:12 <ski> waitasec
15:41:24 <liquidengineer> changing [Int] to String doesn't help
15:46:38 <ski> back
15:46:47 <ski> um
15:46:58 <liquidengineer> I changed read to just read them as Strings
15:47:04 <liquidengineer> that didn't help
15:47:29 <ski> i guess i supposed you were testing with some file that you know where it is located ..
15:47:38 <liquidengineer> I am
15:47:46 <liquidengineer> It's in the same directory as my .lhs file
15:47:49 <liquidengineer> it has two lines
15:47:58 <liquidengineer> both look something like this
15:48:02 <ski> so did you try manually
15:48:02 <liquidengineer> [1,2,3,4]
15:48:03 <ski> ?
15:48:09 <liquidengineer> how do I do it manually?
15:48:21 * basti_ .oÂ° ( ? )
15:48:39 <ski> like i said before
15:48:51 <ski> Foo> read "the first line of the file"
15:48:55 <ski> Foo> read "the second line of the file"
15:49:10 <liquidengineer> so I just put the file text in directly?
15:49:13 <liquidengineer> like copy and paste?
15:49:17 <ski> where you have checked the strings from the file by hand
15:49:22 <ski> yep
15:49:45 <ski> um
15:49:46 <ski> waiyt
15:49:48 <ski> wait
15:49:54 <ski> of course try
15:50:10 <ski> Foo> read "the first line of the file" :: [Int]
15:50:16 <ski> Foo> read "the second line of the file" :: [Int]
15:50:18 <liquidengineer> yeah
15:50:24 <liquidengineer> so, it'd look like this
15:50:31 <liquidengineer> read "[1, 4, -9, 44, 342, 0, 0, 8]" :: [Int]
15:50:55 <liquidengineer> ?
15:50:56 <ski> (this should check that 'read' can actually parse the lines. so try to use copy&paste to actually get exactly what is in the file)
15:51:14 <ski> if that is what is in the file, yes
15:51:20 <basti_> do you need an explicit type?
15:51:46 <ski> when testing at interactive toplevel read-type-eval-print-loop, yes
15:52:00 <basti_> hmmm
15:52:05 <basti_> ohh i think i understand why :)
15:52:37 <basti_> the type isn't known at "compile time" (parsing time in interactive?) thats why, isnt it?
15:52:40 * ski smiles back
15:52:47 <basti_> whoops
15:52:54 <ski> @type read
15:53:00 <lambdabot> read :: forall a. (Read a) => String -> a
15:53:16 <ski> the 'a' need to be determined
15:53:21 * basti_ nods
15:53:27 <basti_> yes i see
15:53:54 <basti_> and in a compiled program of course most of the time the type is known
15:54:08 <ski> rightee
15:54:22 <basti_> what happens if the types don't match? "undefined"?
15:54:32 <basti_> ("bottom")
15:54:39 <basti_> wb liquidengineer
15:54:41 <liquidengineer> ski: sorry
15:54:43 <ski> if *which* types don't match ?
15:54:47 <ski> liquidengineer : wb
15:54:49 <liquidengineer> read got them both fine
15:54:55 <ski> ok
15:55:00 <basti_> the annotated type and the type of the expression in the string
15:55:17 <basti_> of course you cant sensibly specify a wrong type explicitely
15:55:28 <liquidengineer> ski: anything else I can try?
15:55:57 <ski> basti_ : read error. if using 'reads', then we get an empty list of parses, while 'read' calls 'error' in that case, yielding a runtime error (/exceptoin)
15:56:13 <basti_> i see
15:56:55 <basti_> liquidengineer: you know that using let like that doesn't make sense yes?
15:57:07 <liquidengineer> hmm?
15:57:21 <basti_> "let" needs "in" to make any sense
15:57:25 <ski> basti_ : ?
15:57:26 <ski> no
15:57:28 <basti_> no?
15:57:29 <ski> it makes sense
15:57:33 <basti_> o.0
15:57:35 <ski> in a do-expression
15:57:40 <liquidengineer> yeah
15:57:44 <liquidengineer> do syntax is different
15:57:51 <basti_> :-O
15:57:59 <basti_> i mean, of course do is different
15:58:04 <ski> do { let x = e; ... }   ===   let x = e in do { ... }
15:58:17 <basti_> oh wow. okay, i didnt know that
15:58:33 <liquidengineer> ski: any other ideas?
15:58:35 <liquidengineer> I'm about to give up
15:58:50 <basti_> what are you trying to do? just read two lines from a file?
15:59:10 <liquidengineer> that stuff I've got in the pate page right now
15:59:23 <ski> liquidengineer : hm, eh, try adding a few diagnostic 'putStrLn's
15:59:23 <liquidengineer> it's the only thing in the do
15:59:44 <ski> basti_ : his code at pastepage
15:59:50 <basti_> yes i see
15:59:56 <basti_> thats what i thought :)
16:00:03 <basti_> i was asking for the desired semantics ;)
16:00:25 <ski> :)
16:00:39 <liquidengineer> so, you want me to like do a putStrLn on line?
16:00:47 <ski> yes
16:00:49 <liquidengineer> I don't see what else I could test here
16:01:03 <ski> e.g. putStrLn "before the openFile"
16:01:07 <basti_> i don't get any errors btw.
16:01:12 <basti_> Main> w
16:01:12 <basti_> [1,2,3]
16:01:13 <ski> putStrLn "after the openFile"
16:01:19 <basti_> [1,2,3]
16:01:21 <ski> putStrLn "after the first hGetLine"
16:01:23 <basti_> (in w.txt)
16:01:25 <ski> etc ..
16:01:39 <basti_> (after adding a call that would output the first of the read lines)
16:02:03 <ski> basti_ : ghc ?
16:02:06 <basti_> hugs
16:02:10 <basti_> should i try ghci?
16:02:10 <ski> m
16:02:21 <basti_> works too
16:02:25 <ski> basti_ : liquidengineer used hugs
16:02:27 * basti_ shrugs
16:02:35 <liquidengineer> I don't get it.
16:02:37 <liquidengineer> why doesn't mine work
16:02:41 * ski doesn't have a haskell install at this comp. RN
16:02:42 <liquidengineer> I just added some readlines
16:02:49 <liquidengineer> one after each line <- statement
16:02:49 <basti_> liquidengineer: what error do you get and when?
16:03:05 <liquidengineer> the first one printed the first line of the file as a list of int
16:03:08 <liquidengineer> l335
16:03:14 <liquidengineer> the second one seems to be the error
16:03:22 <liquidengineer> it never prints
16:03:23 <ski> <liquidengineer> "Illegal Operation"
16:03:30 <basti_> uhm
16:03:37 <ski> hm
16:03:42 <basti_> never encountered this ;)
16:03:47 <liquidengineer> Illegal operation
16:03:47 <liquidengineer> [1, 4, -9, 44, 342, 0, 0, 8]
16:03:52 <basti_> liquidengineer: are the two lists really the first two lines in p.txt?
16:03:57 <liquidengineer> am I doing something wrong?
16:04:02 <ski> liquidengineer : check that the file actually contains a newline after the second list !
16:04:03 <liquidengineer> can you not use the same variable name twice?
16:04:05 <basti_> and, what operating system are you using?
16:04:14 <ski> liquidengineer : you can
16:04:22 <basti_> yes you can, the second one would "overload" the first
16:04:31 <ski> s/overload/overshadow/
16:04:32 <liquidengineer> basti_: Mac OS X
16:04:37 <liquidengineer> wait a second
16:04:45 <liquidengineer> I only have 2 lines in the file
16:04:49 * basti_ deems its a cr/lf issue
16:05:00 <basti_> i remember mac have a really bizarre cr/lf convention
16:05:16 <ski> hGetLine wants the line read to end with a newline
16:05:23 <liquidengineer> what the hell?
16:05:25 <liquidengineer> why?
16:05:38 <ski> basti_ : if implemented correctly, shound not be cr/lf convention
16:05:44 <basti_> IF
16:05:44 <basti_> =)
16:05:46 <ski> liquidengineer : what ?
16:06:03 <basti_> i guess he didnt understand that point?
16:06:06 <liquidengineer> why does it need a blank line in teh file?
16:06:12 <liquidengineer> and it works now, btw
16:06:15 <liquidengineer> thank you so much
16:06:21 <basti_> uhm because macs have cr/lf reversed?
16:06:23 <basti_> or whatever?
16:06:25 <basti_> =)
16:06:25 <liquidengineer> I can't believe i spent the last three hours chasing a missing \n
16:06:37 <liquidengineer> basti_: that has nothing to do with this
16:06:52 <basti_> welcome in the wonderful world of computers, where everything has to work like it did 40 years ago I'd say ;)
16:06:54 <liquidengineer> I'm asking why haskell expects a newline at the end of every line it reads
16:07:03 <ski> basti_ : iirc macs use just cr, and no lf at all
16:07:12 <basti_> well if you issue a command to read a line, i would expect it to
16:07:36 <ski> liquidengineer : getLine wants a newline to know when it should stop reading in the string
16:07:43 <liquidengineer> I would expect it to go down to the next line IF IT EXISTED
16:07:53 <basti_> an empty line is a line too
16:07:55 <liquidengineer> otherwise you're at the end of the file and should get an error if you try to read again
16:08:04 <basti_> yes.
16:08:06 <liquidengineer> I know that
16:08:09 <ski> it could be argued that eof should also count as end of line for getLine, if encountered
16:08:19 * basti_ nods
16:08:26 <basti_> it certainly shoud
16:08:28 <basti_> l
16:08:38 <liquidengineer> ski: YES
16:08:42 <liquidengineer> Java does this
16:08:52 * ski ponders this
16:08:54 <liquidengineer> and java should NOT be better at file IO than haskell
16:09:08 <basti_> it shouldnt, no.
16:09:23 <ski> arguably, eof should not count as newline
16:09:30 <basti_> why not?
16:09:38 <liquidengineer> and why the hell coudln't they have built in an error like "No newline at end of input" or something
16:09:43 <liquidengineer> that would have at least clued me off
16:09:53 <liquidengineer> what the hell is Illegal Operation supposed to tell me I don't already know?
16:09:56 <liquidengineer> grrr..
16:10:01 <ski> but getLine could well count eof as line-termination, as well as newline
16:10:03 * basti_ pets liquidengineer's head
16:10:31 <basti_> ski: well thats how i was thinking about it too
16:11:00 <ski> basti_ : if eof always counts as newline, then getChar will always succed with a newline if at eof
16:11:35 <basti_> yes of course
16:12:14 <basti_> oh do you know why gabber is bad? =)
16:12:25 <ski> (this would of course not hinder that a special eof test could detect eof anyway, but it seems weird anyway)
16:12:37 * ski doesn't know what gabber is
16:12:42 <basti_> thats a sort of music
16:13:08 <liquidengineer> my fury burns with the fire of a thousand fiery fiery suns.
16:13:10 <ski> mhm ?
16:13:25 <basti_> http://www.k-c-h.com/videos/GabberHS.swf :)
16:13:39 <liquidengineer> see, now it's telling me "Program error: head of []"
16:13:40 <liquidengineer> I can deal with that.
16:13:45 <basti_> :)
16:13:49 <ski> (no working shockwave installed ..)
16:13:56 <basti_> ski: well you didnt miss much.
16:14:02 <liquidengineer> thanks guys
16:14:03 <liquidengineer> I'm out
16:14:04 <basti_> probably its only funny if you ever heard gabber.
16:14:04 <ski> maybe not :)
16:14:10 <ski> liquidengineer : yw
16:14:14 <basti_> liquidengineer: nP :)
16:14:16 <ski> liquidengineer : good luck with the rest
16:14:20 <liquidengineer> thanks
16:14:30 * basti_ will from now on always drop a "watch all the line ends" when it's about File IO
16:14:33 <liquidengineer> I'll just comment out stuff until I figure out what's killing it.
16:14:34 <basti_> ;)
16:14:47 <liquidengineer> basti_: good idea.
16:14:48 <basti_> liquidengineer: youre taking the head of an empty list
16:14:54 <liquidengineer> exactly
16:14:57 <liquidengineer> the question is where
16:14:58 <basti_> i mean i was close wasn't I? ;)
16:15:03 <liquidengineer> wait a second.
16:15:44 <liquidengineer> bah
16:15:46 <liquidengineer> I'll find it later
16:16:02 <basti_> =)
16:17:34 <basti_> no 1st of may celebrations where you live btw?
16:18:04 <ski> sure
16:18:58 * basti_ was in town, in a bar called "delirium"
16:20:26 * ski is remined of sandman
16:20:31 <ski> reminded*
16:42:14 <seba> i think that iam stupid... why this code not compile?
16:42:18 <seba> module Termino (Termino) where
16:42:19 <seba> data Termino = (RealFloat,Int)
16:42:19 <seba> exp :: Termino -> a
16:42:19 <seba> exp (_,x) = x
16:42:32 <Cale> RealFloat is a class
16:42:36 <Cale> not a type
16:43:03 <seba> i must to import it before?
16:43:50 <Cale> You possibly want data Termino = (Float, Int)
16:44:17 <Lemmih> s/data/type/
16:44:19 <seba> Cale: exacty! what is the difference?
16:44:27 <Cale> er, that too
16:45:02 <seba> Cale: but the error continue
16:45:14 <Cale> change "data" to "type"
16:45:28 <seba> ERROR "termino.hs":4 - Syntax error in data type definition (unexpected `;', possibly due to bad layout)
16:45:35 <basti_> "type" is like a macro on type level
16:45:47 <basti_> its replaced with its definition before anything meaningful happens
16:45:53 <Cale> I'm tired, other people will answer, I'm going to sleep :)
16:45:59 <basti_> "data" is still there at runtime
16:46:39 <seba> but what is the problem? why not compile?
16:46:58 <basti_> "data" needs a constructor
16:47:13 <basti_> like in "data Thing = MakeThing Something Int String Float"
16:47:39 <seba> basti_: ok!
16:48:21 <basti_> so you can "destruct" a Thing at runtime
16:51:29 <basti_> (if you don't use a tuple, you can even destruct it one thing at a time, i think)
16:51:53 <ski> 'type' just gives a new name to an existing type. 'data' (and 'newtype') constructs a new type, different from others
16:52:16 <ski> basti_ : you mean what ?
16:52:39 <basti_> hmm not really... type can put a "tag" on some type
16:52:59 <ski> ?
16:53:12 <basti_> well you could call "(Int,Int,String)" "Dog"
16:53:29 <ski> "a new name to an existing type"
16:54:14 <basti_> hmmm
16:54:24 <basti_> okay in that sens, tuples are types too
16:54:30 <ski> of course
16:55:09 <ski> (just like '[Int]' and 'IO Char' and 'Maybe a -> Bool')
16:56:09 <basti_> type "types" have just one possibility of resolution, while data types may have more
16:58:34 <ski> hm
16:58:42 <ski> what do you mean by that ?
16:58:46 <ski> resolution ?
16:58:59 <ski> do you mean 'top constructor' ?
16:59:55 <basti_> yes i guess.
17:00:07 <basti_> type just goes one way, data can have more
17:00:23 <ski> 'type "types"' can have more, too
17:00:48 <ski> e.g. type Foo = Maybe Int, example values of type Foo are Just 5, Nothing, Just 13
17:00:59 <basti_> well, yes.
17:01:08 <basti_> but all the types of this type are "Maybe Int"
17:01:16 <basti_> they're different values yes
17:01:26 <ski> 'type' just gives a new name to an existsting type, which might, or might not, have exactly one constructor
17:01:40 <basti_> yes.
17:02:14 <ski> (hm, "the types of this type" means ?)
17:02:35 <basti_> lol
17:02:39 <basti_> the types of values of this type
17:03:36 <basti_> uhm but all values have the same type
17:03:37 <basti_> mmmm
17:03:43 <basti_> i mean all values of a type.
17:03:49 * basti_ hits his head on a wall
17:04:40 <ski> 'the top forms/shapes of values of this type" ?
17:04:56 <ski> (also called, 'top constructor')
17:12:44 * ski wonders where on wiki to comment on checking that line read by getLine actually end in newline, and not eof
17:12:58 <ski> hawiki/UsingIO ?
17:23:00 <galsworth> got a newbie q here...
17:23:09 <galsworth> ... is it possible to construct:
17:23:16 <galsworth> f = return f
17:23:18 <galsworth> ?
17:23:24 <KrispyKringle> hrm?
17:23:28 <KrispyKringle> a function that returns itself?
17:23:34 <KrispyKringle> it wouldn't be able to unify the type.
17:23:40 <KrispyKringle> f :: ?
17:24:01 <KrispyKringle> f :: a -> a -> a -> a ?
17:24:07 <galsworth> aha
17:24:11 <KrispyKringle> oh,w ait. you said return
17:24:14 <KrispyKringle> so you're inside a monaad?
17:24:17 <galsworth> yes
17:24:18 <KrispyKringle> sorry.
17:24:31 <KrispyKringle> um.
17:24:49 <galsworth> t -> IO ()
17:24:53 <galsworth> ...except...
17:25:00 <galsworth> it appears infinite
17:25:05 <KrispyKringle> Yeah. How is that a () ?
17:25:10 <galsworth> exactly
17:25:24 <KrispyKringle> It's not. It's returning an  IO (t -> IO ( t -> IO (...)))
17:25:26 <blackdog> galsworth: what are you trying to do?
17:25:27 <KrispyKringle> or something
17:25:37 <KrispyKringle> i was about to ask that very thing. What are you trying to do? :P
17:25:43 <galsworth> heh
17:26:21 <galsworth> i want a fn to return the next action its caller should run
17:26:27 <blackdog> this is one of the few problems with this place - someone will ask a question, and rather than asking why they want to do it that way, people go hunting for oleg posts to show that you _can_ make haskell balance on its nose
17:26:39 <KrispyKringle> oleg?
17:26:59 <blackdog> @google oleg pobox
17:27:02 <lambdabot> http://pobox.com/~oleg/ftp/
17:27:04 <KrispyKringle> galsworth: so, what?
17:27:24 <KrispyKringle> you might define five possible functions and have this one choose form them, right?
17:27:27 <galsworth> so what if the next action that a fn should run is itself?
17:27:31 <blackdog> KK: read and go insane. :)
17:27:53 <lispy> insane!
17:27:55 <KrispyKringle> blackdog: nice!
17:28:05 <blackdog> galsworth: are you sure you're not just talking about the identity function?
17:28:16 <KrispyKringle> galsworth: ah, so say this:
17:28:57 <KrispyKringle> fa x = (getFunc x) x
17:28:58 <KrispyKringle> or something
17:28:59 <ski> galsworth : you can, if you make a recursive type
17:29:04 <KrispyKringle> and bb x = (getFun x) x
17:29:07 <KrispyKringle> then
17:29:14 <KrispyKringle> getFunc just returns either fa or fb
17:29:44 <galsworth> hmmm
17:29:50 <galsworth> (recursive type?)
17:29:56 <mauke> data Fun a = Fun (a -> Fun a) --?
17:30:01 <KrispyKringle> ski: he doesn't want a recursive type. he wants a recursive function that's only sometimes recursive, i think.
17:30:13 <KrispyKringle> or maybe he wants a recursive type, but i don't think so.
17:31:14 <galsworth> <- newbie
17:32:43 <blackdog> yes, but what do you want to do with the newbie action?
17:33:07 <blackdog> sorry. lame, i know.\
17:33:54 <galsworth> each fn will choose an action <foo> to return.  a recursive dispatcher will continuously run "do <foo>"
17:34:15 <ski> should they ever stop ?
17:34:48 <galsworth> yes
17:35:04 <ski> btw, are you sure you just can't call the next action directly, instead of returning it, and then let the dispatcher call it ?
17:35:38 <galsworth> i use the dispatcher to grab the next character from a file
17:37:25 <galsworth> i imagined each "string" of running actions ending when the dispatcher detects that a certain IO (fn) has been returned
17:37:49 <galsworth> this is probably a crazy way to do it, but...
17:37:57 <ski> aha
17:38:00 <galsworth> :-)
17:38:11 <ski> so the dispatcher ends the sequence, then
17:38:14 <ski> hm
17:38:30 <ski> but, IO actions doesn't support equality
17:39:05 <galsworth> read a char, execute an action determined by the last action run
17:39:09 <ski> of course you could store some kind of info/flag with each returned action, so that dispatcher could determine whether to terminate
17:39:28 <galsworth> actually, yes.  it returns a tuple, with the first being a flag
17:39:47 <wagle> file not found?!?: http://www.haskell.org/pipermail/haskell/2004-October/014554.html
17:39:47 <ski> more specifically when do you want to terminate ?
17:39:54 <wagle> oops, wrong paste
17:39:54 <galsworth> at EOF
17:40:08 <wagle> http://research.microsoft.com:80/~simonpj/papers/gadt/index.htm
17:40:10 <ski> um
17:40:26 <foxy> hi, I'm new to IRC, and about a brown belt according to the Wiki
17:40:46 <blackdog> galsworth: this sounds very complicated. Is there a reason not to just slurp the whole file in lazily, then use pure functions on it rather than mucking about in the IO monad?
17:40:47 <ski> galsworth : i thought you said you sometimes wanted to terminate based on the identity of the 'next action to call' ?
17:40:52 <ski> foxy : hi
17:40:58 <blackdog> hello foxy
17:41:19 <galsworth> sorry ski, i think i confused two idea versions in my brain
17:41:32 <wagle> nm..  i dunno where that :80 came from
17:42:14 <galsworth> blackdog, hmmm, could do i spose, but the monads are interesting me at the moment
17:42:46 <ski> galsworth : ok
17:42:53 <ski> which monads ?
17:43:01 <ski> implementing your own action monad ?
17:43:48 <galsworth> ski, each iteration of the dispatcher should run a series of actions returning with the next series for the next iteration
17:44:08 <galsworth> no no, i just started haskell a couple days ago
17:44:16 <ski> (galsworth : sorry, missed your "<galsworth> actually, yes.  it returns a tuple, with the first being a flag" before)
17:44:48 <ski> mm
17:45:24 <ski> but if you want actions to return actions, possibly of the same kind, then it seems you want a recursive type
17:45:32 <ski> hm
17:45:46 <galsworth> what does a recursive type look like?
17:46:27 <blackdog> galsworth: it's up to you, but if you're new to haskell (and aren't a black belt ocaml master or something :) then you might want to get comfortable with the pure subset first. just my opinion, results may vary, see a guru if pain persists, etc etc etc
17:46:27 <ski> hm
17:47:23 <galsworth> bd, i've always learned new languages in the most painful way possible, though not always intentionally
17:47:29 <ski> galsworth : these actions, should they themselves be able to perform IO ? should they return something (other than new action) ? should they take something as input ?  always of same type in that case ?
17:47:31 <galsworth> ;)
17:47:52 <galsworth> i imagine these actions as pure
17:48:07 <dons> @seen reffie
17:48:08 <lambdabot> reffie is in #haskell. Last spoke 2 hours, 35 minutes and 3 seconds
17:48:08 <lambdabot> ago.
17:48:40 <dons> reffie, you can use ghci with yi, at least last time I checked. read the docs in doc/
17:48:52 <dons> also, I haven't received any patches. do you want to send them?
17:48:52 <foxy> I have a problem... I'm using "import Data.Map as Map" in ghc 6.4 but I'm getting name clashes, as if the name weren't qualified
17:48:59 <reffie> dons hm ok
17:49:09 <dons> import qualified Data.Map as Map
17:49:23 <dons> reffie, so ^L is fixed?
17:49:26 <reffie> it is!
17:49:31 <dons> but Cale reports the screen not being reset.
17:49:34 <reffie> dons darcs send to send?
17:49:36 <foxy> dons : thanks!
17:49:38 <dons> yep.
17:49:42 <galsworth> ski, i'm going to read up on recursive types.  thanks so much for the clues ppl!
17:49:47 <dons> as long as you have mail working on your box..
17:49:52 <reffie> yeah i do
17:50:11 <galsworth> ciao
17:50:13 <dons> I wonder what OS Cale is running.
17:50:19 <a5> my continuations are not continuing
17:50:33 <reffie> dons ok sent one
17:50:47 <reffie> the other is not really finished
17:50:57 <dons> received, thanks.
17:51:01 <blackdog> a5: my variables aren't varying.
17:52:05 <a5> maybe those are signs of the apocalypse
17:53:01 <dons> indeed. I'm worried now.
17:53:12 <dons> @remember blackdog my variables aren't varying.
17:53:21 <reffie> hehe
17:55:42 <wagle> my types arent typing
17:56:27 <foxy> has anyone tried installing hs-plugins on a cygwin system?  I get an error that a package (base) can't be found.  I think this is because of cygwin directory naming.  Has anyone come up with a fix for installing hs-plugins?
17:58:23 <dons> hs-plugins is known not to handle \f\g style paths :/
17:58:43 <dons> is that the case with cygwin?
17:59:53 <wagle> i think cygwin does / paths within its dirtree?
18:00:24 <dons> foxy, what ghc, and what hs-plugins version are you using?
18:00:28 <foxy> re hs-plugins/cygwin : ghc compiles, ghc-pkg barfs
18:01:00 <foxy> re hs-plugins/cygwin : ghc 6.4, hs-plugins from cvs to work with 6.4 (I installed successfully on linux)
18:01:33 <dons> ok. if you can do some more debugging, and send me a detailed bug report about what is going on, that'd be useful.
18:01:40 <dons> compiled with -DDEBUG in config.mk
18:01:52 <foxy> dons : ok
18:01:55 <dons> and send me the errors messages, as well as the complete build transcript
18:02:05 <dons> my email addr is in the src somewhere.
18:02:06 <reffie> dons my bad for the bad whitespace
18:02:12 <dons> ;)
18:02:23 <KrispyKringle> A brown-belt? What wiki? Huh?
18:02:24 <KrispyKringle> Karate?
18:02:31 <dons> thanks for the patch though. not sure what I was thinking about with ~
18:02:38 <dons> it's more like g~{motion}
18:02:39 <reffie> :)
18:02:46 <blackdog> @google hawiki brown belt
18:02:47 <reffie> yeah
18:02:48 <lambdabot> http://haskell.org/hawiki/HaskellIrcChannel
18:03:17 <dons> foxy, add -DDEBUG to GHC_EXTRA_OPTS
18:04:41 <foxy> dons : ok, how do I generate a log? 2> build.log ?
18:04:58 <KrispyKringle> Ah
18:05:07 <KrispyKringle> Yeah, I don't think I'd say I'm at a brown-belt quite yet ;)
18:05:09 <KrispyKringle> Monads are scary.
18:05:18 <dons> foxy, "script"
18:05:48 <dons> or > build.log 2>&1 is ok too
18:06:35 <foxy> dons OK, I'll let you know when build has finished
18:07:23 <mauke> hmm, I guess that makes me a blue belt
18:08:37 <Gahhh> KrispyKringle: I recommend reading Tackling the Awkward Squad.
18:09:03 <foxy> foxy I haven't used any FFI yet
18:18:38 <foxy> dons : I've mailed the build log, it doesn't say much
18:23:10 <dons> received, thanks.
18:23:12 <dons> hmm:
18:23:12 <dons> ghc-pkg-6.4: No such file or directory
18:23:21 <dons> is there any ghc-pkg-6.4?
18:24:01 <foxy> dons : I ran the command manually and it shows base-1.0 as a package, but when the script runs it can't find package base
18:24:45 <dons> so ghc-pkg-6.4 is the actual name of ghc-pkg on your system?
18:25:12 <foxy> just ghc-pkg
18:25:32 <dons> oh, can you edit config.mk, change ghc-pkg-6.4 to ghc-pkg, and try again.
18:26:38 <dons> @seen Cale
18:26:40 <lambdabot> Cale is in #haskell. Last spoke 1 hour, 40 minutes and 46 seconds
18:26:40 <lambdabot> ago.
18:26:57 <foxy> new error (sending)
18:27:17 <dons> Cale, what OS are you on? what terminal? I can't reproduce the terminal mess on quit problem on linux,freebsd,openbsd or a mac :}
18:27:28 <dons> but it's probably easy to fix.
18:28:15 <dons> foxy, is there any directory: /usr/local/src/hs-plugins-20050419/src/altdata ?
18:28:21 <dons> seems wrong.
18:28:41 <dons> oh. no, you're building there?
18:29:45 <foxy> dons : that directory is there, and AltData has .hi and .o files
18:30:24 <dons> yeah. so ghc-pkg is reading in altdata.conf.in, and at some point it checks the altdata directory, producing that failure.
18:30:33 <dons> any idea why that would happen?
18:32:46 <dons> I wonder how ghc-pkg is supposed to work on cygwin. maybe there's some magic.
18:33:21 <dons> and I still haven't  seen the missing "base" package error. can you reproduce that somehow?
18:34:57 <foxy> dons : I ran: env TOP=$(TOP) $(GHC_PKG) -g -f plugins.conf.inplace -u < src/$(PKG)/$(PKG).conf.inplace.in)
18:35:24 <foxy> dons : substituting by hand, and it didn't find the directoy altdata, which is definitely there.
18:35:48 <foxy> dons : I think somewhere in the GHC manual it says it doesn't like cygwin directory names on windows
18:35:49 <dons> any ideas? I don't know what's going on there.
18:36:01 <a5> dons: does yi start with an "untitled document"? i think that'd be much better than emacs' "scratch" or vim's "starving children" startup defaults
18:36:14 <dons> foxy, ah! if you can find a reference to that, it might help me.
18:36:27 <dons> a5, yes. it starts with a temp file.
18:36:36 <dons> like vi.
18:36:51 <a5> cool. i just realized that i don't like thinking of a name before adding content
18:36:56 <dons> or simpleTex :D
18:37:01 <mauke> :set shm+=I in vim to get rid of the start-up screen
18:37:01 <dons> simpleText, I mean.
18:37:09 <a5> mauke: thanks
18:37:16 <dons> ah! cheers.
18:37:29 <dons> yeah, that's yi's behaviour
18:38:41 <a5> how usable is it now?
18:39:26 <reffie> i think all it needs is line wrapping
18:39:30 <reffie> and after that it'll be at least usable
18:39:56 <dons> yep. that's definitely needed
18:40:05 <dons> a bit of back end hacking required
18:40:14 <a5> i see.
18:40:30 <dons> once that's done, you've got a reasonable vim.
18:40:34 <dons> with no syn hl.
18:40:47 <reffie> i think it's more comparable with nvi, for now :P
18:40:48 <dons> I see both those issues solved in the next few months though
18:40:55 <dons> definitely.
18:41:02 <dons> the vi mode is 90% complete
18:41:17 <reffie> i've been using nvi for all my programming needs, lately
18:41:20 <dons> that was easy, since it's so standardised and well-documented.
18:41:32 <dons> reffie, notice how fast yi starts up? :)
18:41:39 <reffie> yeah
18:43:35 <dons> it opens up big files _much_ faster than vim/vi/emacs. vi is really slow in that regard.
18:43:47 <dons> 3 or 4 seconds for 64M files, versus 30 seconds with vi.
18:44:04 <dons> however, they use fancier data structures internally
18:44:23 <dons> so some edit actions degrade in yi quite noticebly
18:44:39 <dons> (only on really big files though)
18:44:43 <foxy> dons : http://www.haskell.org/ghc/docs/latest/html/users_guide/ch11s04.html
18:45:47 <dons> ah ha! now, let me see..
18:45:58 <Igloo> dons: is vim that slow if syntax highlighting is off?
18:46:44 <foxy> dons : I think I've fixed it by changing the value of TOP in config.mk to the windows drive (C:/Apps/Cygwin/usr...)
18:49:04 <foxy> dons : new error (sending)
18:50:45 <dons> Igloo, just on start up. it's around twice as slow.
18:51:25 <dons> foxy, ah! now we're making some progress.
18:51:35 <dons> unknown package: posix
18:51:46 <dons> there's not supposed to be any posix deps now
18:51:53 <dons> have you got the latest src from the darcs repo?
18:52:10 <dons> by the looks of it you've got an older snapshot
18:52:56 <dons> foxy, can get grab this source and try again: darcs get http://www.cse.unsw.edu.au/~dons/code/hs-plugins
18:53:11 <dons> that' shouldn't have any posix deps.
18:53:33 <foxy> dons, ok, I have to install darcs
18:53:42 <dons> is that hard?
18:53:48 <dons> if so I can make a snapshot.
18:55:30 <foxy> dons I'll let you know ;P
18:55:58 <dons> ftp://ftp.cse.unsw.edu.au/pub/users/dons/hs-plugins/snapshots/hs-plugins-20050501.tar.gz
19:00:05 <dons> that cygwin faq page looks really useful. I'll adapt  the hs-plugins build process to use those tips
19:00:28 <foxy> dons, darcs works, but how do I generate the ./configure script?
19:01:00 <reffie> autoconf
19:01:15 <dons> jah.
19:01:56 <dons> you could grab the ./configure from the snapshot above.
19:02:12 <dons> and just copy it into the darcs dir, rather than installing the auto* tools
19:02:25 <foxy> have autoconf and run it
19:02:42 <mwc_> New hotness: http://www.kfa-juelich.de/zam/FACT/about/index.html C++ library for doing a lot of FP stuff using CPP
19:03:00 <mwc_> Seems like it would be a better target than C for a compiler
19:03:03 <dons> "using CPP"!
19:03:39 <mwc> The lazy evaluation stuff seems like witchcraft
19:03:59 <blackdog> dons: how tied to ghc is hs-plugins?
19:04:38 <dons> if we can do dynamic linking some other way, it probably wouldn't be too hard to port.
19:04:42 <dons> to say, nhc.
19:05:01 <dons> the dependency stuff would need to be reimplemented
19:05:07 <dons> as would the package.conf chasing.
19:05:15 <mwc> How hard would it be to target something like dlopen() and friends?
19:05:49 <dons> doesn't work with haskell objects. they need magic rewriting. hence Linker.c in ghc
19:06:06 <dons> WolfgangT made it work with the mac now, though.
19:06:20 <blackdog> i'm thinking that jhc + hs-plugins is more or less my old thesis project, only working. :)
19:06:34 <dons> hehe. only 5 + 1 years work ;)
19:06:45 <dons> (jhc + hs-plugins, that is)
19:10:38 <dbremner> mwc - look at boost phoenix and fc++.
19:10:57 <foxy> dons : Two changes to config.mk for cygwin so far: TOP has to be windows directory; GHC_PKG is ghc-pkg
19:11:36 <mwc> dbremner, can't find a phoenix library in the boost libraries page
19:11:48 <mwc> dbremner, http://www.boost.org/libs/libraries.htm#Alphabetically
19:11:53 <dons> yep. the TOP thingo i think I can fix with the hints in the cygwin faq. Send me the diffs once you get it going, so I can ponder them.
19:12:08 <mwc> dbremner, there are some of the usual suspects like lambda and function libs
19:13:18 <dbremner> mwc - it's part of spirit.
19:14:15 <dbremner> mwc - it's not officially part of boost, it's bundled with spirit.
19:14:48 <dons> foxy, how's it going now?
19:15:03 <dons> hmm.
19:15:05 <pediddle> hi dons...
19:15:10 <foxy> dons : it just fell over, now ghc can't find the package altdata
19:15:53 <dons> can you make clean, and try again?
19:16:21 <dons> it seems to have built altdata an hi, then you've rerun it.
19:16:28 <dons> I'd like to see why it dies the first time.
19:16:43 <foxy> dons : ok
19:17:01 <dons> (unfortunately, as you can see, I changed the build system last week. I hope that didn't introduce any portability bugs)
19:17:42 <dons> pediddle, hi. what's up?
19:17:59 <pediddle> dons: trying to build lambdabot (with new and improved "moo"), looks like hs-plugins doesn't like my system
19:18:00 <pediddle> Main.o: unknown symbol `___stginit_ControlziMonadziState_'
19:18:03 <pediddle> lambdabot: user error (resolveObjs failed with <<False>>)
19:18:17 <pediddle> any idea which libraries i'm missing?
19:18:37 <dons> ghc version?
19:18:41 <pediddle> 6.4
19:18:48 <dons> os?
19:18:49 <pediddle> stock
19:18:54 <pediddle> OS-X 10.4
19:18:58 <pediddle> which might be the problem...
19:19:18 <dons> ah. ok. I think 6.4 is causing troubles. can you try 6.2.2 - I know that works on the mac
19:19:31 <pediddle> will do
19:20:19 <mwc> pediddle, noticed any hickups with GHC 6.4 and OS X 10.4? I don't get my copy until Monday
19:20:36 <pediddle> thanks, i'll get back to you
19:20:46 <pediddle> well, for one thing I can't compile it
19:20:49 <gzl> I think the main issue is that 10.4 uses gcc 4 while GHC expects gcc 3.3
19:20:56 <mwc> heh, probably
19:21:00 <pediddle> that's easy to switch though
19:21:02 <gzl> yes
19:21:05 <pediddle> sudo gcc_select 3.3
19:21:20 <mwc> wouldn't -fvia-c work?
19:21:30 <dons> wolgang's been hacking away madly. and -fasm works
19:21:38 <mwc> ah, good
19:22:11 <JohnMeacham> pediddle: add -package mtl
19:22:42 <pediddle> but ghc gives its own weird error, even with 3.3
19:22:44 <pediddle> stage1/ghci/InteractiveUI.hi
19:23:02 <dons> macabot: @version
19:23:03 <macabot> lambdabot 2p344, GHC 6.2.2 (Darwin Power Macintosh)
19:23:03 <macabot> darcs get http://www.cse.unsw.edu.au/~dons/lambdabot
19:23:07 <dons> ;)
19:23:11 <dons> macabot: @quit
19:23:12 <JohnMeacham> The monad template library was lplit into its own package in 6.4 so you need the extra parmeter.
19:24:12 <dons> John, this is with hs-plugins. lambdabot is already built with -package mtl and 6.4
19:24:43 <JohnMeacham> Ah. never mind then.
19:24:57 <pediddle> sorry, irc client just crashed
19:24:59 <dons> possibly libraries aren't being chased properly at runtime.
19:25:13 <pediddle> anyway, ghc compile error is:
19:25:19 <pediddle> stage1/ghci/InteractiveUI.hi
19:25:53 <reffie> i come from the city where they don't play by rules
19:26:06 <pediddle> well, i guess my irc client doesn't want me to paste this error
19:26:08 <pediddle> lol
19:27:33 <foxy> my parser won't parse
19:28:32 <dons> foxy, you got hs-plugins to build?
19:28:50 <foxy> dons : still going, no barfs yet
19:28:58 <dons> oooh.. good :}
19:30:30 <foxy> how do I get lambdabot to tell me its commands?
19:30:39 <pediddle> @listcommands
19:30:40 <lambdabot> all-dicts arr babel define definitions del-definition devils dice
19:30:40 <lambdabot> dict dict-help docs dummy dynamic-load dynamic-reload dynamic-
19:30:40 <lambdabot> unload easton echo elements eurohaskell eval fact fact-cons fact-
19:30:40 <lambdabot> delete fact-set fact-snoc fact-update foldoc fortune gazetteer
19:30:40 <lambdabot> get-definition ghc google help hitchcock index jargon join karma
19:30:41 <lambdabot> karma+ karma- kind learn leave listchans listcommands listmodules
19:30:43 <lambdabot> lojban moo more msg part paste pl pl-resume plugs pointless prelude
19:30:45 <lambdabot> [4 @more lines]
19:30:48 <pediddle> @more
19:30:49 <lambdabot> quit quote reconnect remember resume seen set-fuel spell state
19:30:49 <lambdabot> timein todo todo-add todo-delete topic-cons topic-init topic-snoc
19:30:51 <lambdabot> topic-tail topic-tell type uptime vera version vixen web1913 wiki
19:30:53 <lambdabot> wikipedia wn world02 yow
19:31:12 <hellish> what is the problem with (\a b -> do {m <- a; m2 <- b; return (m,m2)})? GHC reports "ambigous type variable m".
19:32:02 <dons> there's an ambiguous type variable... ;)
19:32:17 <dons> ghc can't infer which monad you mean, probably.
19:32:34 <dons> so add a type annotation, perhaps.
19:32:58 <foxy> how do I get lambdabot to tell me what a command does?
19:33:06 <dons> @help moo
19:33:07 <lambdabot> vegan-friendly command
19:33:11 <dons> @help help
19:33:13 <lambdabot>  @help <command> - ask for help for <command>
19:33:18 <hellish> there's no way to make it of type (Monad m) => m a -> m b -> m (a,b)?
19:33:28 <foxy> @help karma
19:33:29 <lambdabot> return a person's karma value
19:35:10 <dons> @type \a b -> do x <- a ; y <- b ; return (x,y)
19:35:15 <lambdabot> \a b -> do x <- a ; y <- b ; return (x,y) :: forall (m :: * ->
19:35:15 <lambdabot> *)
19:35:15 <lambdabot>                                                     a
19:35:15 <lambdabot>                                                     b.
19:35:15 <lambdabot>                                              (Monad m) =>
19:35:16 <lambdabot>                                              m a -> m b -> m (
19:35:18 <lambdabot> a, b)
19:35:27 <dons> uber-bad pretty printing
19:36:02 <dons> I also like \a b -> a >>= \x -> b >>= \y -> return (x,y)
19:39:21 <foxy> @type \x -> x x
19:39:23 <lambdabot> bzzt
19:42:18 <dons> @type \x -> x
19:42:20 <lambdabot> \x -> x :: forall t. t -> t
19:42:22 <dons> @pl \x -> x
19:42:23 <lambdabot> id
19:42:38 <dons> @pl \a b -> a >>= \x -> b >>= \y -> return (x,y)
19:42:40 <lambdabot> (. ((. return) . (>>=))) . (>>=)
19:42:43 <dons> hehe
19:42:56 <dons> foxy, also we have @plugs
19:43:05 <dons> @plugs map (+2) [1..20]
19:43:11 <lambdabot> [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]
19:46:07 <gzl> what's @pl?
19:46:09 <hellish> hmm... let cart a b = let cart a b = do {m <- a; m2 <- b; return (m,m2)} goes through fine while the version with the lambda exp. fails.
19:46:28 <hellish> gzl: pointless.
19:46:34 <gzl> ah, right.
19:47:01 <hellish> typo: drop the first let cart a b =
19:47:29 <foxy> dons : it compiled!
19:47:49 <aheller> anyone built ghc on netbsd2.0?
19:50:12 <foxy> dons : I've sent you the diff to config.mk that made hs-plugins work on cygwin
19:52:24 <dons> yay!
19:59:15 <foxy> @listcommands
19:59:16 <lambdabot> all-dicts arr babel define definitions del-definition devils dice
19:59:16 <lambdabot> dict dict-help docs dummy dynamic-load dynamic-reload dynamic-
19:59:16 <lambdabot> unload easton echo elements eurohaskell eval fact fact-cons fact-
19:59:16 <lambdabot> delete fact-set fact-snoc fact-update foldoc fortune gazetteer
19:59:16 <lambdabot> get-definition ghc google help hitchcock index jargon join karma
19:59:17 <lambdabot> karma+ karma- kind learn leave listchans listcommands listmodules
19:59:19 <lambdabot> lojban moo more msg part paste pl pl-resume plugs pointless prelude
19:59:21 <lambdabot> [4 @more lines]
19:59:27 <foxy> @more
19:59:28 <lambdabot> quit quote reconnect remember resume seen set-fuel spell state
19:59:28 <lambdabot> timein todo todo-add todo-delete topic-cons topic-init topic-snoc
19:59:28 <lambdabot> topic-tail topic-tell type uptime vera version vixen web1913 wiki
19:59:29 <lambdabot> wikipedia wn world02 yow
19:59:51 <foxy> @seen dons
19:59:52 <lambdabot> dons is in #haskell. Last spoke 7 minutes and 27 seconds ago.
20:04:03 <foxy> dons : install worked fine, but when I try to compile my project (with --make) it can't find AltData.Typeable
20:04:43 <dons> did you "make register"
20:04:53 <dons> to register it with ghc's package system?
20:07:00 <foxy> woops, it's barfing again, same directory problem
20:07:14 <dons> about altdata?
20:07:30 <foxy> yup
20:07:42 <dons> when you run make register?
20:08:06 <dons> oh, but we know how to fix that. that's a missing C:\f\g\ in the install path?
20:08:32 <dons> the LIBDIR variable
20:08:48 <dons> sorry, PREFIX
20:08:50 <dons> in config.mk
20:08:59 <foxy> yup, that's the one, but I'm recompiling because it still didn't work
20:10:14 <foxy> even after I changed PREFIX there was still /usr/local/lib in the path which ghc-pkg didn't like
20:11:34 <dons> try running the " installation pkg.confs" rule in src/builld.mk by hand
20:13:25 <foxy> dons : ok, I will, once I get back there (shouldn't have make clean'd so quickly)
20:18:17 <dons> foxy, I've just comitted two patches. one to find TOP properly on cygwin, and one to find ghc-pkg if ghc-pkg-Version doesn't exist
20:18:22 <dons> maybe you'd like to try those out?
20:18:27 <dons> (darcs pull)
20:30:38 <reffie> c'est la lutte finale: groupons nous et demain l'internationale sauvera le genre humain!
20:31:39 <dons> reffie goes nuts.
20:31:54 <dons> @babel fr en c'est la lutte finale: groupons nous et demain l'internationale sauvera le genre humain!
20:31:56 <lambdabot>   it is the final fight: let us group and tomorrow the international
20:31:56 <lambdabot> one will save mankind!
20:33:18 <reffie> "'tis the final conflict: let each stand in his place. the international working class shall be the human race."
20:36:58 <tautologico> qui parle français ?
20:38:11 <mwc> Je suis Canadien. Je parle in peut, mais ce que je parle est vraiment mal.
20:38:18 <mwc> s/in/un
20:39:03 <tautologico> je suis brasilien :)
20:39:10 <tautologico> je ne parle pas très bien
20:41:46 <foxy> @seen dons
20:41:48 <lambdabot> dons is in #haskell. Last spoke 9 minutes and 52 seconds ago.
20:41:57 <foxy> dons, I'll try those patches
20:44:20 <dons> foxy, I'm interested in seeing what the values of TOP and GHCPKG get set to in config.mk
20:44:25 <dons> hopefully the right ones :)
20:45:28 <foxy> dons : do I need to autoconf or ./configure --prefix=/usr/local
20:49:06 <dons> you need to rerun autoconf, yep.
20:49:23 <dons> then ./configure --prefix=/f/g wherever you want to install to
20:49:41 <dons> we're testing that ./configure finds the right paths on cygwin
20:53:39 <foxy> dons : in the execution of ./configure --prefix=/usr/local : line 1507 ghc-pkg-6.4: command not found, line 1509: test: ghc-pkg: unary operator expected
21:04:37 <dons> hmm. ok.
21:06:13 <dons> Try that.
21:17:49 <foxy_> dons : did you get that last error message? I got disconnected
21:17:52 <wagle> anyone get acl2 to build on macosx10.3?
21:17:59 <foxy_> nick foxy
21:25:56 <dons> foxy, the one about "unary operator expected"?
21:26:22 <dons> yes. I've got a patch in for that. can you try it out?
21:29:00 <foxy> pulling
21:29:36 <foxy> dons : no changes to pull
21:31:10 <foxy> checking for ghc-pkg... configure: error: You need ghc-pkg
21:42:52 <foxy> dons : should test take the -V argument in the ghc-pkg section of the ./configure script?
21:47:12 <dons> yeah. supposed to anyway.
21:47:24 <dons> I'm trying to check that ghc-pkg returns 0 if i run it.
21:47:44 <dons> so you have a "ghc-pkg", or is it called "ghc-pkg.exe"?
21:48:27 <Gahhh> it's ghc-pkg
21:48:29 <Gahhh> no .exe
21:48:35 <foxy> the file is a .exe, but `which ghc-pkg` returns ghc-pkg
21:48:35 <dons> on cygwin?
21:48:40 <Gahhh> yeah
21:48:40 <dons> ok. hmm.
21:48:41 <Gahhh> mingw
21:49:09 <dons> what does this print:
21:49:11 <dons> ghc-pkg -V > /dev/null 2>&1  ; echo $?
21:49:15 <Gahhh> oops
21:49:20 <Gahhh> it's ghc-pkg.exe
21:49:50 <Gahhh> prints 0
21:50:11 <foxy> 0
21:51:06 <dons> I'll rewrite this test. i see an alternate version in ghc's configure script
21:52:06 <Gahhh> interesting. ls -l `which ghc-pg` shows: "/cygdrive/c/ghc/ghc-6.4/bin/ghc-pkg". But "less `which ghc-pkg`" says no file or directory heh.
21:52:26 <reffie> goof night
21:53:45 <dons> hmm. magicks
21:55:16 <dons> new patch
21:55:24 <foxy> pulling
21:58:10 <foxy> ./configure found ghc-pkg
21:58:51 <dons> yay.
21:59:09 <dons> and what about the value of TOP?
21:59:36 * dons is new to this cygwin game
21:59:57 <foxy> TOP has a sensible value
22:00:20 <dons> what value does it have?
22:00:58 <dons> i'm interested in whether it has cygin C:\ stuff
22:01:03 <foxy> TOP             = C:\\apps\\cygwin\\usr\\local\\src\\hs-plugins
22:01:12 <dons> excellent
22:01:22 <dons> hopefully those \\ aren't a problem
22:01:36 <Gahhh> cygwin can use c:/etc/
22:02:02 <Gahhh> "cd c:/ghc" works
22:02:08 <dons> ok.
22:02:29 <dons> foxy, after you build it, you might want to try 'make check' to see if it runs as expected.
22:02:38 <dons> as well as testing your own code, of course.
22:02:47 <foxy> ok
22:03:18 <foxy> my code is broken, my parser's not parsing, but the eval call worked last time I tried my code on linux
22:04:12 <dons> :}
22:04:47 <foxy> I love it, Haskell as a DSL
22:05:16 <cakoose> Does Happy or Parsec help with layout-sensitive parsing?
22:05:47 <dons> you can certainly do it in happy - ghc does
22:06:05 <cakoose> But does it handle the tricky stuff for you?
22:06:10 <dons> ah, not in happy at all actually.
22:06:18 <dons> the lexer inserts tokens
22:06:24 <dons> so you can do that in alex.
22:06:43 <dons> (the lexer inserts the missing { } ; )
22:06:52 <cakoose> Oh...that explains the weird error messages.
22:07:07 <cakoose> Does the parser have to give feedback to the lexer?
22:07:22 <foxy> c:/WINDOWS/TEMP/ghc-3935191.hc: In function `__stginit_EvalziHaskell_':
22:07:22 <foxy> c:/WINDOWS/TEMP/ghc-3935191.hc:5642: warning: implicit declaration of function `getStablePtr'
22:07:32 <dons> yep. I get that too. not fatal
22:07:38 <Lemmih> Weird error messages in GHC?
22:07:51 <dons> it's a missing #include I haven't figured out, foxy
22:08:16 <cakoose> Lemmih: Where it says that you have a semicolon in the wrong place, even when there' no semicolon.  Then "May be a layout problem."
22:08:39 <Lemmih> cakoose: Doesn't that only happen in Hugs?
22:08:45 <cakoose> Oh...sorry.  Maybe.
22:08:51 <dons> I've never seen that in ghc
22:08:53 <cakoose> I don't remember.
22:09:36 <cakoose> So can the layout stuff be totally handled by the lexer by inserting fake tokens?
22:09:57 <dons> you're more likely to get: parse error on input
22:10:14 <dons> I guess so.
22:10:21 <dons> the report would say
22:10:44 <cakoose> dons: Ok thanks.  I'll take a look.
22:13:37 <cakoose> Wow, the rule is so simple.
22:14:02 <cakoose> I tried doing something similar and thoroughly polluted the parser with extra code.
22:20:10 <foxy> what lexer are you talking about, the one in Prelude?
22:22:02 <cakoose> foxy: No, just a lexer in general.  With the standard lexer/parser setup, I was wondering if the layout magic could be handled completely by the lexer.
22:22:54 <foxy> @babel en fr ahaa!
22:22:56 <lambdabot>   ahaa !
22:24:22 <Lemmih> Quelques mots sont universels.
22:26:13 <tautologico> et pour quoi cet intérêt sur le français ?
22:26:34 <foxy> dons I have a new kind of error.  make install ; make register ; ghci MMCCG.hs ; *MMCCG> main
22:26:34 <foxy> Loading package Cabal-1.0 ... linking ... GHC.EXE: unable to load package `Cabal-1.0'
22:27:23 <dons> don't know about that one. maybe don't run it in side ghci for now, that makes things a bit harder.
22:27:38 <Lemmih> tautologico: Je ne sais pas. Je suis jeu juste avec le babelfish.
22:28:01 <foxy> ok, I'm just running make check
22:28:41 <foxy> should there be error messages here?
22:29:02 <dons> if there are errors :)
22:29:19 <dons> you could mail me the transcript if there are errors
22:29:37 <dons> I expect only the final test to fail, if things are working properly
22:29:50 <foxy> hm, doesn't look good, then
22:30:54 <dons> this is really testing how many assumptions about the environment I've made in the various functions hs-plugins provides
22:31:03 <dons> some should surely work, others maybe not.
22:31:12 <tautologico> night ppl
22:41:03 <aheller> A
22:51:34 <foxy> dons : I've just sent you a big file of make check errors
22:54:22 <pediddle> @moo
22:54:23 <lambdabot-pedidd> Maybe you meant: more msg todo yow
22:54:23 <Lemmih> lambdabot-pedidd: @listcommands
22:54:24 <lambdabot>          (__)
22:54:24 <lambdabot>          (oo)
22:54:24 <lambdabot>    /------\/
22:54:24 <lambdabot>   / |    ||
22:54:24 <lambdabot>  *  /\---/\
22:54:24 <lambdabot>     ~~   ~~
22:54:26 <lambdabot> ...."Have you mooed today?"...
22:54:36 <pediddle> meh
22:55:01 <pediddle> i'll get this worked out
23:06:30 <dons> foxy, well, at least eval seems to work.
23:06:58 <dons> but load() doesn't seem to be working.
23:07:33 <dons> looks like the same error each time.
23:07:42 <foxy> dons, bummer
23:09:22 <foxy> @moo
23:09:23 <lambdabot>          (__)
23:09:23 <lambdabot>          (oo)
23:09:23 <lambdabot>    /------\/
23:09:23 <lambdabot>   / |    ||
23:09:23 <lambdabot>  *  /\---/\
23:09:23 <lambdabot>     ~~   ~~
23:09:25 <lambdabot> ...."Have you mooed today?"...
23:09:41 <pediddle> dons, fyi, 6.2.2 worked
23:09:57 <pediddle> @moo
23:09:58 <lambdabot>          (__)
23:09:58 <lambdabot>          (oo)
23:09:58 <lambdabot>    /------\/
23:09:58 <lambdabot>   / |    ||
23:09:58 <lambdabot>  *  /\---/\
23:09:59 <lambdabot-pedidd>          (__)
23:09:59 <lambdabot-pedidd>          (oo)
23:09:59 <lambdabot-pedidd>   /-------\/
23:09:59 <lambdabot-pedidd>  / |     ||
23:09:59 <lambdabot-pedidd> *  ||----||
23:09:59 <lambdabot-pedidd>    ~~    ~~
23:09:59 <lambdabot>     ~~   ~~
23:10:01 <lambdabot-pedidd>      Cow
23:10:01 <lambdabot> ...."Have you mooed today?"...
23:10:11 <pediddle> @moo
23:10:12 <lambdabot>          (__)
23:10:12 <lambdabot>          (oo)
23:10:12 <lambdabot>    /------\/
23:10:12 <lambdabot>   / |    ||
23:10:12 <lambdabot>  *  /\---/\
23:10:12 <lambdabot-pedidd>          (__)
23:10:12 <lambdabot-pedidd>          (oo)
23:10:12 <lambdabot-pedidd>   /-------\/
23:10:12 <lambdabot-pedidd>  / |     ||
23:10:12 <lambdabot-pedidd> *  ||W---||
23:10:13 <lambdabot-pedidd>    ~~    ~~
23:10:13 <lambdabot>     ~~   ~~
23:10:15 <lambdabot-pedidd>   Cow laden
23:10:15 <lambdabot> ...."Have you mooed today?"...
23:10:17 <lambdabot-pedidd>   with milk
23:10:25 <pediddle> sweet
23:13:38 <JohnMeacham> That's a lot of cows.
23:15:25 <kaol> @yow
23:15:27 <lambdabot> I'm thinking about DIGITAL READ-OUT systems and computer-generated
23:15:27 <lambdabot> IMAGE FORMATIONS ...
23:17:38 <epichrom> @plugs "abc"
23:17:40 <lambdabot> "abc"
23:33:25 <kaol> @fortune
23:33:26 <lambdabot> Hackathon Raisin Rice
23:33:26 <lambdabot>  
23:33:26 <lambdabot> 10 cups rice
23:33:26 <lambdabot> 5 Onions, chopped fine
23:33:26 <lambdabot> 10 cloves garlic, crushed
23:33:27 <lambdabot> Butter
23:33:29 <lambdabot> 2.5 cups raisins
23:33:31 <lambdabot> [18 @more lines]
23:36:19 <dons> he. that's the OpenBSD hackathon rice recipe
23:36:23 <ski> @more
23:36:24 <lambdabot> 2.5 tsp oregano
23:36:24 <lambdabot> 22 cups water
23:36:24 <lambdabot> 40 chicken bouillon cubes (or equivalent - you want to make double
23:36:24 <lambdabot> strength chicken stock - chicken-in-a-mug
23:36:24 <lambdabot> 			  works well made double strength).
23:36:25 <lambdabot>  
23:36:27 <lambdabot> Saute Rice, onion and garlic in a little butter until slightly
23:36:29 <lambdabot> [11 @more lines]
23:36:33 <ski> @more
23:36:34 <lambdabot> brown.
23:36:34 <lambdabot> I manage this in the (large) pot(s) necessary by throwing together
23:36:35 <lambdabot> the onion, garlic, and butter to brown up, then faking it a bit
23:36:37 <lambdabot> with
23:36:39 <lambdabot> the dry rice thrown in while threatening kitchen interlopers with
23:36:41 <lambdabot> sharp instruments if they come in to ask how it's going.
23:36:43 <lambdabot> Dissolve bouillon in water, add along with remaining ingredients.
23:36:45 <lambdabot> [4 @more lines]
23:36:49 <ski> @more
23:36:50 <lambdabot> Cook until rice is done (for more intimate proportions, divide
23:36:51 <lambdabot> down
23:36:53 <lambdabot> to an appropriate amount of rice for your occasion).
23:36:53 <blackdog> raisins + chicken + garlic???
23:36:55 <lambdabot>  
23:37:28 <blackdog> is the idea to put your girlfriend off to the extent that you've got nothing to do but hack?
23:37:35 <dons> got to feed the hackers somehow.
23:38:07 <pediddle> 40 bouillon cubes...
23:38:09 <pediddle> ouch
23:38:10 <dons> at the hackathons, all the OpenBSD guys fly to calgary, take over a hotel, and write code for a week.
