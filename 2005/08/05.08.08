00:01:45 <dblhelix> Itkovian: good morning
00:02:17 <dblhelix> Itkovian: already talked to boegel? iirc, he was looking for you last week
00:02:24 <Itkovian> yes, I have
00:02:29 <Itkovian> yesterday, in fact
00:03:02 <dblhelix> ah, okay, I'm trying hard not to touch computers in my weekends... sometimes I even succeed
00:04:16 <Itkovian> hehe
00:07:06 <vikasg> monads seem to be somewhat like a *pattern* that has syntactic support
00:13:16 <dblhelix> vikasg: true, more or less, I guess
00:13:16 <ski> yes
00:14:33 <ski> the syntactic support is not so necessary .. but it's a bit nicer
00:15:36 <ski> using '... >>= \x -> ...' is not much more unclear than using do-syntax
00:16:02 <dblhelix> ski: from an educational pov, I wonder: should one be exposed to the syntactic sugar immediately, or is it perhaps better to get a grasp of monads in terms of the underlying (>>=) constructions?
00:16:17 <ski> i'm not sure
00:17:28 <ski> depends if one thinks (initially) building things from ground up is better or not compared to learning some syntax and/or way to use things (like ADT) and only later possibly learn about possible implementations
00:18:13 <vikasg> I think understanding them without the syntax is better; it's less intimidating that way
00:18:36 <ski> m
00:19:31 <vikasg> so that I can say, "Hey, monads are something I can cook up myself"
00:19:54 <ski> it certainly shows that monads are not magic but just a possibly use of the capabilities the language already gives   (modulo update-in-place etc .. but that's efficiency issues and not so much understanding issues)
00:19:58 <ski> indeed
00:21:02 <dblhelix> a friend of mine who has given several introduction courses for programming in C++ insists on the other way around: first he lets his students just make things work and then he fills in the details and let them build a firm understanding of what's going on
00:21:50 <dblhelix> perhaps surprisingly, it turns out to be a quite successful approach
00:22:06 <ski> i guess both approaches could work
00:22:23 <ski> certainly, one need to be aware of both ways to think of code
00:22:37 <vikasg> indeed they do; after all, most of us learnt C before we could understand the underlying assembly code
00:23:03 <Spark> you get more motivation from getting things up and running first
00:23:07 <Spark> thats the usual way of teaching
00:23:30 <Spark> if youre teaching java you start of by saying "you need public static void main, but dont worry about that at first"
00:28:08 <heatsink> do-notation has its own semantics from the programmer's point of view, even though it's equivalent to >>= \x -> ... so you would be teaching this, and it's not so complicated really.
00:28:48 <heatsink> I think the problem with the online monad introductions that I've read is that they tried to explain everything about monads in quick succession.
00:29:36 <dblhelix> heatsink: agreed
00:29:46 <ski> using do-notation more supports the ability to reason within particular monads (as opposed to reasoning about how they are underneath working in a pure FP lang), i.e. you learn how to reason about the particular monad's effects
00:29:53 <heatsink> Rather than giving the "typical" meaning of a monad and then explaining how a monad is actually more versatile than that.
00:30:46 <ski> hm, the typical meaning being what ?  state / io ?
00:31:10 <heatsink> typical being state/io while only invoking "return" and "fail"
00:31:30 <heatsink> (and other user-defined monads)
00:31:33 * ski would prolly not include fail in there
00:33:55 <stefanw> dons: there are other reasons why you should not do a resize from within a signal handler. For example, you should not call wrefresh, because Posix does not classify this function as "safe" for being called from a signal handler. See also the file test/view.c from the ncurses distribution
00:35:20 <dons> ah, interesting. I'll look at this
00:36:34 <dons> btw, using the testsuite is improving the yi C code. For the small amount of C code, I'm forced to work out what pure List code it corresponds to, and I already found one oddity/bug in the C code
00:37:33 <stefanw> test-first is great, yes!
00:37:50 <stefanw> hm, but for yi it's more "test-after"...
00:38:23 <dons> ah, but now we test first. just a matter of catching up on the testing I didn't write down originally
00:38:56 <basti_> hi
00:39:54 <Lemmih> Hey basti_.
00:41:22 <dons> my point was more that its good having a testable spec for a C function, where the spec is a 1 line pointfree Haskell function
00:44:00 <stefanw> yes, that's nice. In C, you would end up writing tests for the tests...
00:45:47 * Heffalump has been using Haskell at work to test C code generation for intrinsic functions against the specification of the corresponding instructions
00:46:29 <Heffalump> (and finding a few bugs in the internal beta simulators for the CPU in question too)
00:51:14 --- topic: '["logs: http://meme.b9.com/cview.html?channel=haskell&date=today","http://www.haskell.org/learning.html","http://www.haskell.org/tmrwiki/IssueFour","We put the Funk in Funktion"]'
00:51:14 --- topic: set by TheHunter on [Fri Jul 29 20:07:27 2005]
00:51:14 --- names: list (clog takuan gzl Thu1771 tic SamB Nomius dons seafood TheHunter Igloo dcoutts_ nibro incomplete emu tewk jlouis nnunley ski vikasg vivek ikegami-- borism kosmikus ibid)
00:55:10 <xerox> uh-oh
01:04:36 --- topic: '["logs: http://meme.b9.com/cview.html?channel=haskell&date=today","http://www.haskell.org/learning.html","http://www.haskell.org/tmrwiki/IssueFour","We put the Funk in Funktion"]'
01:04:36 --- topic: set by TheHunter on [Fri Jul 29 20:07:27 2005]
01:04:36 --- names: list (clog seafood Cale dcoutts_ megaman gdsx djw smott emu jlouis Igloo _deepfire_ incomplete tewk wagle mflux_ Matt-W kpk jp-autark Lunar^ Lemmih mauke ^buggler^ johs kolmodin lament jiing cathper edwinb Spark tuomov sorje keverets noj shrimpx univac creichen calvin_ nothingmuch Heffalump tumm rafl shapr SM_ax flodin vegai musasabi norpan autrijus integral yosemite Khisanth zamez kzm paniq lispy` themaximus perspectival wilx Muad_Dib polli)
01:04:36 --- names: list (dblhelix ndm Lor ex_nor spinclad aleator isomer asmodai earthy noclouds tessier jewel gp- chucky thingie24 Raziel stefanw tromp eno-away)
01:53:12 <Mon31076> @hugs Char.isAlpha '\194'
01:53:15 <lambdabot> True
01:53:17 <Mon31076> hmm
01:56:23 <xerox> J #verbamanent
01:56:27 <xerox> Oops, sorry.
03:06:14 <poetix> Damn, looks like I missed the discussion on web frameworks
03:06:22 <poetix> at three o'clock in the morning
03:07:09 <poetix> Me and my tiresome need for sleep! Why must my eyeballs start bleeding after fifty hours of staring at a monitor?!
03:07:20 <shapr> aww
03:07:40 <poetix> I've been trying to get haskell-fastcgi to build, and failing
03:09:17 <poetix> So started writing my own server code instead.
03:09:26 <shapr> Cool
03:10:01 <poetix> It's a good excuse to get acquainted with Control.Concurrent and its myriad spawn
03:13:25 <basti_> Control.Concurrent.STM rocks da house.
03:13:34 <poetix> The modest goal is to be able to upload some Haskell code through a web form, then browse to a url that executes that code to create its response
03:15:56 <shapr> That sounds like fun. You could use the @eval code for safe server side code execution.
03:16:11 <sieni> poetix: only after 50 hours? Maybe you should consider buying your crank from somebody else ;-)
03:16:12 <poetix> Sandboxing?
03:17:13 <poetix> @eval - part of hs-plugins?
03:17:17 <lambdabot> 25: parse error on input `of'
03:17:18 <ndm> poetix, that sounds really cool
03:17:18 <shapr> Yes
03:17:43 <ndm> i was hoping to be able to integrate soem sort of functionality like that for hoogle at some point, i.e. try out the function before you decide to use it
03:17:43 <poetix> ndm: Your friend get anywhere with the server code example?
03:18:04 <ndm> i sent it off to him, he's not started yet, but now he knows where to look for the relevant functions
03:18:32 <poetix> Always a good start.
03:18:48 <ndm> yeah, is your running server side code going to be available for all?
03:19:08 <ndm> i can't host a code execution engine anywhere, and would like to plug in to an existing one for hoogle
03:19:11 <ndm> (in the future)
03:19:44 <poetix> ndm: No, it will be a top-secret proprietory project, encumbered with masses of patents, from which I hope to make $billions ;)
03:19:55 <poetix> Or I might just GPL it
03:20:06 <ndm> poetix, i think anyone who uses haskell has already given up on teh idea of making money...
03:20:17 <ndm> its not so much the code, its more the server problem
03:21:14 <poetix> Seriously, I will be keeping it public - I'll let you know when any new stuff is available.
03:21:48 <shapr> ndm: nuh-uh
03:22:02 <shapr> ndm: I've already made money with ha$kell.
03:22:11 <ndm> shapr, i realise some people make money from haskell - just not a huge number
03:22:22 <poetix> This is where I post a link to Graham's "Beating the averages", and fuel everyone's elitist genius-entrepreneur fantasies
03:22:51 <xerox> I more enjoy Schneier: http://www.schneier.com/blog/archives/2005/06/talking_to_stra.html
03:22:52 * shapr waves his elitist flag.
03:23:22 * poetix salutes it
03:27:35 <poetix> I'm in two minds about whether it's such a great idea to use hs-plugins and dynamically load Haskell handlers
03:27:45 <poetix> i) I don't know how well it will perform
03:27:55 <poetix> ii) Potential security nightmares
03:28:38 <dblhelix> mmm .... perhaps I should no longer program on Fridays... another Monday morning spent on rewriting pre-weekend code
03:28:39 <shapr> It'll probably be fast and mostly secure.
03:28:51 <poetix> iii) Possibly simpler (for the end user) to have an interpreted dsl instead
03:28:52 <musasabi> Doesn't HSP use something like that? (the server version)
03:29:55 <poetix> If Zope lets a developer execute arbitrary Python code on a running server, then maybe there's no reason why we shouldn't extend the same privilege to Hoh developers.
03:29:56 <Si\> poetix: I wrote a SOAP driven Haskell evaluator a bit back, it doesn't have a web-form though
03:30:18 <poetix> But I'd be happier with some sandboxing mechanism, or something like tainting
03:31:04 <pejo> ndm, what about Galois connections?
03:31:25 <ndm> pejo, yes, i am aware of them - it was a combination of a joke and a generalisation
03:31:28 <poetix> Si: is the code for that available?
03:32:21 <Si\> yes, it's part of HAIFA, I just don't have a permanent location for my darcs respositorys yet
03:34:28 <Si\> I wrote to allow execution of Haskell function to facility data-type conversion/mediation in a composite web-service workflow
03:35:35 * poetix has never seen a composite web-service workflow in action...
03:36:12 <Si\> neither have I actually, athough what I wrote does work,it's just kind of messy atm
03:37:51 <Si\> the main problem with such a thing is how to supply parameters to it
03:38:20 <musasabi> Is the wash library best for parsing email messages?
03:38:21 <Si\> I used XML, but I had to write a large chunk of XML Schema support to make that work, which even now isn't that great
03:39:00 <poetix> I'm a bit of a SOAP skeptic - it seems to me that a lot of the enthusiasm for it comes from developers being wowed by the magic behind things like ASP.Net "WebMethods", whereas actually the magic creates all sorts of problems when you try to use SOAP for the purposes for which it was really intended.
03:39:12 <Si\> agreed
03:39:16 <poetix> Type conversion being one of the problems.
03:39:41 <Si\> I really kind of hate SOAP, it's a jump backward AFAIC
03:39:49 <Si\> still everyone uses it, so so do I
03:39:58 <poetix> Yep, me too.
03:40:53 <poetix> Same with XML generally - the toolset is convenient, so I whine about the vacuity of the "data model" but use the tools anyway
03:42:57 <Si\> XML Schema is a really perculiar language, with support lot's of marginal features but seemingly obvious bits missing
03:43:32 <Si\> but I do think I web type-system is important, it's vital if you want automatic insertion of services into a workflow
03:44:57 <Si\> anyway, I'll make the tools work again over the next few weeks and get my repositories up to date
03:46:39 --- topic: '["logs: http://meme.b9.com/cview.html?channel=haskell&date=today","http://www.haskell.org/learning.html","http://www.haskell.org/tmrwiki/IssueFour","We put the Funk in Funktion"]'
03:46:39 --- topic: set by TheHunter on [Fri Jul 29 20:07:27 2005]
03:46:39 --- names: list (clog paniq tewk Heffalump juhp zamez earthy Lunar^ mornfall creichen jewel jiing gp- TheHunter Muad_Dib megaman flodin norpan integral basti_ ex_nor musasabi tumm nothingmuch calvin_ univac shrimpx noj keverets sorje tuomov Spark johs ^buggler^ mauke wagle incomplete dcoutts_ Cale Nomius takuan skylan jwp resiak liyang Mon31076 vivek ksandstr xerox Nioate scw polli gdsx lispy` Khisanth kzm ski yosemite sbeyer kosmikus ndm _deepfire_ perspectival)
03:46:39 --- names: list (nothingmuch_ mflux eno-away nibro jlouis edwinb_ sieni Igloo Si\)
04:13:16 <musasabi> Are there gtk2hs debs somewhere?
04:13:33 <musasabi> That work with the ghc6.4 from haskell-unsafe.
04:14:55 <vegai> http://www.cenqua.com/commentator/
04:17:43 <Beelsebob> haha, that's cool...
04:17:50 <Beelsebob> wonder if it can figure out haskell
04:32:22 <xerox> musasabi, I think not, I compiled from sources.
04:53:10 <pejo> Anyone happen to know if any research of Haskell and partial evaluation has been done?
04:55:17 <Beelsebob> partial evaluation?
04:56:34 <xerox> Has it anything to do with partial application?
04:57:09 <Beelsebob> bbi5
04:57:58 <vikasg> pejo, maybe http://partial-eval.org/ ?
05:01:59 <ndm> pejo, yep - i have a paper on partial evaluation on haskell on my desk - just having a look...
05:02:17 <pejo> vikasg, yeah, looked there but nothing strikes me as obvious.
05:02:22 <ndm> http://www.cs.chalmers.se/~rjmh/pubs.htm
05:03:06 <ndm> Type Specialisation section, at the bottom, Per Sjörs has implemented a type specialiser for a subset of Haskell, as his Masters project
05:03:20 <ndm> i think type-specialisation is roughly similar to partial evaluation
05:04:25 <pejo> ndm, heh, of course some professor has done it. Thanks, will look into it.
05:07:51 <pejo> ndm, are you working on something similar or was it just something you had laying around?
05:08:33 <ndm> pejo, i am interested in the firstification properties of it
05:09:14 <ndm> in particular i have a static checker that works on first order programs, and uses specialisation to obtain a first-order haskell version of the input program
05:11:25 <User666>  http://www.videopilot.net/download-video.php?videos=42823 cool site free video, muzik(russian)
05:11:27 <User666>  http://www.videopilot.net/download-video.php?videos=42823 cool site free video, muzik(russian)
05:11:36 <User666>  http://www.videopilot.net/download-video.php?videos=42823 cool site free video, muzik(russian)
05:11:40 <beelsebob> ndm: is that always possible?
05:12:03 <ndm> Other interesting results include the combination of constructor specialisation with higher-order functions, leading to `firstification for free'.
05:12:10 <ndm> acording to John Hughes, yes
05:12:13 <Philippa> "firstification"?
05:12:17 <ndm> and according to Turing, yes as well
05:12:20 <beelsebob> hmm, okay
05:12:28 <ndm> converting a higher order program to a first order one
05:12:39 <Philippa> ISTR jhc does it
05:12:55 <beelsebob> I just wondered if there was some way of breaking it by getting the user to give various bits of information
05:12:56 <Philippa> it's one of the reasons it can produce scarily fast code when it works
05:13:02 <ndm> oh, will take a look
05:13:17 * Philippa would love to see what it generates for Parsec parsers, as it's probably not far off what something like yacc would
05:13:27 <ndm> if a function is invariant in an argument, it can be specialised easily
05:13:34 <beelsebob> eg how would you deal with do x <- getLine; map (+ (read x)) [1,2,3]
05:13:34 <ndm> i.e. map can always be firstified really easily
05:13:59 <Philippa> the only way to break it is dynamically loaded code
05:14:02 <ndm> doing just hte map first....
05:14:17 <ndm> map_read [] = []
05:15:05 <shapr> pejo: dcoutts_ has done research in partial evaluation.
05:15:12 <ndm> map_plus x (y:ys) = (x+y) : map_plus ys
05:15:28 <beelsebob> yeh, okay, that makes sense
05:15:28 <ndm> Beelsebob, but monads are soemthing i have yet to do...
05:15:32 * beelsebob dumbas
05:15:52 * Philippa happens to have a thing for dynamically loaded code, FWIW :-)
05:16:04 <Philippa> insofar as there're systems that absolutely need it
05:16:13 <ski> (ndm : iiuc one important difference between partial evaluation and type specialization is that the latter can specialize types)
05:17:29 <ski> (or at least difference between common systems for PE and hughes TS system ..)
05:17:56 <pejo> Philippa, which ones?
05:18:32 <ski> servers ? OS'es ?
05:18:58 <Philippa> apps with plugins're a good example
05:19:49 <Philippa> I'm kinda suspecting I'd want it for a web framework too
05:20:28 <User666>  http://www.videopilot.net/download-video.php?videos=42823 cool site free video, muzik(russian) http://www.videopilot.net/download-video.php?videos=42823 cool site free video, muzik(russian) http://www.videopilot.net/download-video.php?videos=42823 cool site free video, muzik(russian)
05:20:55 <pejo> Can someone get rid of the spammer? I'm a slow reader. :-)
05:21:19 <tuomov> /ignore
05:23:36 <pejo> ski, hm. One could argue that the additional complexity isn't worth it. (There was a patch posted to lkml quite recently that implemented some sort of in-place reloading of binaries. Very complex. Very rejected).
05:24:04 <pejo> shapr, ah, ok. Thanks.
05:24:12 <ski> lkml is ?
05:24:16 <mflux> pejo, hmm.. how did it work?
05:24:20 <pejo> ski, linux kernel mailing list.
05:24:30 <ski> ok
05:24:37 <Philippa> pejo: I /will/ want some form of code loading for web apps. Most people do it via scripting languages...
05:24:48 <pejo> mflux, poorly I suspect. The idea seemed basically to be "Don't change the binary too much and we can restart in place.
05:25:57 <pejo> Philippa, hm, ok. I don't know anything about web apps.
05:28:49 <poetix> I was talking about my hs-plugins-onna-webserver project just a short while ago...
05:30:10 <pejo> Philippa, is jhc in a usable state btw? While an interesting project it seemed to be in alpha/beta stage.
05:32:49 <musasabi> @seen CosmicRay
05:32:49 <lambdabot> I saw CosmicRay leaving #haskell 2 days, 19 hours, 8 minutes and 59
05:32:49 <lambdabot> seconds ago, and I have missed 2 days, 4 hours, 22 minutes and 18
05:32:49 <lambdabot> seconds since then.
05:32:59 <beelsebob> you're lying
05:33:06 <beelsebob> ah... missed 2 days
05:33:10 <beelsebob> that makes sense
05:33:15 <beelsebob> he mas here yesterday
05:33:19 <beelsebob> was*
05:33:53 --- mode: ChanServ set +o shapr
05:34:07 <beelsebob> ohhh, red shapr
05:34:26 --- mode: shapr set +b *!*@*.m-lan.ru
05:35:31 --- mode: shapr set -o shapr
05:35:55 <lightstep> why?
05:36:00 <shapr> Take out the spammers and the trash! yakkity yak, don't come back!
05:36:01 <beelsebob> spammer
05:36:32 <lightstep> the whole ISP are spammers?
05:37:03 <shapr> Nah, but the ban will probably disappear in a week or so.
05:37:07 <shapr> If not, I'll remove it then.
05:37:40 <poetix> Goddammit, that was *my* IS----bzzzt------CARRIER LOST
05:39:01 <aleator> I have (pure) library functions like "void operate(bigMatrix *src1, bigMatrix *src2, bigMatrix *result);" What would be your choice of modelling them in haskell wrapper?
05:39:29 <shapr> hiya Enveigler
05:39:54 <Enveigler> Howdy shapr
05:39:58 <shapr> What's the difference between I= and N= for the new join message?
05:40:16 <lightstep> pure in what sense? not touching the contents of its inputs?
05:41:15 <aleator> inputs are untouched, result is, naturally, overwritten.
05:41:35 <ski> shapr : apparently 'I=' is for when identd suceeded (and 'N=' otherwise)
05:41:44 <ski> or something like that
05:42:05 <shapr> Ah, I see.
05:43:20 <ski> is bigMatrix of fixed size ?
05:45:12 <aleator> There are several sizes of matrices, but sources for given function are all same size, as is likely the result.
05:46:33 <lightstep> so you can declare operate :: BigMatrix -> BigMatrix -> BigMatrix, where BigMatrix is a lazy reference cell for a matrix
05:47:51 <aleator> How do I do that?
05:50:00 <lightstep> newtype BigMatrix = BM (IORef (Maybe (Ptr PrimBigMatrix)))
05:50:07 * shapr throws skolems
05:51:16 <lightstep> where haskell's PrimBigMatrix is a dummy type to represent bigMatrix
05:51:26 * ski thinks of golems
05:51:56 <aleator> Sorry for beeing rather thick - but the next step then is?
05:52:22 <shapr> ski: Yes, a System F skolem. Magic at its finest!
05:54:21 <lightstep> you can define newBigMatrix::IO BigMatrix, fillBigMatrix::Ptr PrimBigMatrix->BigMatrix->IO (), primOperate::Ptr PrimBigMatrix->Ptr PrimBigMatrix->Ptr PrimBigMatrix->IO ()
05:55:42 <lightstep> then operate (BM (Just s1) (Just s2)) = newBigMatrix >>= \(BM result) -> unsafePreformIO (primOperate s1 s2 result >> return result)
05:55:54 <lightstep> oops
05:56:41 <lightstep> i meant, you should fill the reference cell
05:56:51 <lightstep> which is hard to code in the minibuffer, but easy with an editor
05:57:49 <shapr> hiya threeve
05:58:27 <threeve> morning
05:58:55 <shapr> How's code?
05:59:33 <threeve> tell you in a couple hours :)  been asleep...
06:02:37 <shapr> heh
06:04:10 <aleator> lightstep: Another pardon for being slow-witted, but why the ioref?
06:06:46 <lightstep> in a moment (i'm thinking too; never done this before)
06:08:57 <shapr> g'day CosmicRay
06:09:08 <aleator> I can easily wrap it so that it always allocates a new item for result, but that feels silly.. Updates should be inplace when they can be inplace..
06:09:11 <CosmicRay> morning shapr
06:09:21 <shapr> How's code?
06:09:47 <CosmicRay> pretty good.  got to read the weekend's list traffic and update HWN accordingly.  you? ;-)
06:10:06 <shapr> Nothing much.
06:10:18 <shapr> What's the process for HWN?
06:10:27 <shapr> How do I submit content?
06:10:42 <shapr> Is it a darcs repo somewhere?
06:10:47 <CosmicRay> shapr: you can just e-mail it to hwn@complete.org, or ...
06:10:48 <CosmicRay> yes
06:10:56 <CosmicRay> http://sequence.complete.org/hwn-contrib has info
06:10:59 <Philippa> shapr: don't you /dare/ submit what I'm doing 'til I've got a working build! ;-)
06:11:07 <CosmicRay> bwahaha
06:11:09 <shapr> er right :-)
06:11:24 <CosmicRay> darcs get --partial http://darcs.complete.org/hwn, then darcs send whenever you're ready.  edit file prep.html
06:14:30 <musasabi> CosmicRay: missingh seems to contain lots of email stuff - which parts are stable and should be used?
06:15:00 <CosmicRay> musasabi: I'd say all of it
06:15:12 <CosmicRay> musasabi: most of it comes from third parties: Wash or Peter's Hsemail
06:15:17 <CosmicRay> both are quite stable
06:16:15 <musasabi> CosmicRay: don't they implement the same thing?
06:16:51 <CosmicRay> not really.  peter's is a much more low-level code
06:16:52 <musasabi> at least there seemed to be duplicate functionality when reading the docs.
06:17:04 <CosmicRay> one might use hsemail if one was writing washmail, for instance.
06:17:17 <CosmicRay> probably most people would use wash
06:18:55 <CosmicRay> hsemail is a collection of parsec combinators, basically.
06:19:04 <CosmicRay> doesn't really do much mime
06:19:21 <CosmicRay> but also has parsers for SMTP and a useful generic RFC parser library
06:19:49 <CosmicRay> wash is useful for people that get mime emails, or want to egnerate them.
06:21:21 <musasabi> hmm ok.
06:23:01 <lightstep> ok, i give up. i don't think it can be done while guarenteeing that the computation won't be repeated twice
07:05:58 <CosmicRay> shapr: do you have some HWN stories to contribute?
07:06:37 <CosmicRay> any funny quotes from this week perhaps? ;-)
07:08:20 <dblhelix> @seen void-
07:08:20 <lambdabot> I saw void- leaving #haskell 7 days, 6 minutes and 41 seconds ago,
07:08:20 <lambdabot> and I have missed 2 days, 4 hours, 25 minutes and 1 second since
07:08:20 <lambdabot> then.
07:11:09 <shapr> CosmicRay: Not at the moment, my real life is distracting.
07:12:02 <Itkovian> shapr: I thought _this_ was your real life ;-)
07:12:15 <Mon31076> cheers lol
07:13:08 <shapr> @seen JaffaCake
07:13:08 <shapr> Itkovian: Sadly not.
07:13:09 <lambdabot> JaffaCake is in #haskell. I don't know when JaffaCake last spoke.
07:13:54 <JaffaCake> shapr: you called?
07:15:19 <boegel> hello everyone !
07:15:24 <shapr> JaffaCake: Just curious :-)
07:15:27 <shapr> hoi boegel!
07:15:37 <shapr> JaffaCake: I think I had a question, but I forgot it in the meantime :-(
07:15:42 * JaffaCake goes back to sleep
07:16:05 <lightstep> lambdabot, have you lost your mind?
07:17:15 <boegel> @vixen have you lost your mind ?
07:17:16 <lambdabot> Fuck me like im a school boy
07:17:19 <boegel> :)
07:17:31 <shapr> um
07:17:31 <Mon31076> very political correct bot
07:17:39 <boegel> @vixen how should I fuck you ?
07:17:40 <lambdabot> i dunno, should you?
07:17:59 <lightstep> @vixen should he?
07:18:00 <lambdabot> love is all you need, you know?
07:18:07 <boegel> omg :)
07:18:18 <Mon31076> @vixen does size matter?
07:18:19 <lambdabot> :)
07:18:25 <lightstep> @vixen I knew I'm not the only one
07:18:26 <lambdabot> are you sure you're not?
07:18:58 <Mon31076> uuag question; is it possible to set the module header from within the AG file instead of having to do it from the invocationpoint of uuagc?
07:22:13 <musasabi> Did anyone implement the SMTP monad?
07:28:16 * boegel kicks Itkovian in the rear end
07:31:37 <musasabi> shapr: you talked about such a thing in the past (googling resulted #haskell logs) ?
07:33:03 <shapr> musasabi: Don't think so.
07:33:12 * boegel leaves for home
07:33:17 <shapr> At least, not that I know of, or have found while googling filetype:hs smtp
07:45:11 <CosmicRay> peter's hsemail has parsec smtp parsers
07:45:25 <CosmicRay> while not exactly a smtp monad, it's done that annoying part of getting there.
07:49:19 <poetix> @vixen What do you think of the ontological closure enacted by the Stellung of modern technoscientific rationality?
07:49:20 <lambdabot> hey, we have simular taste in music
07:49:26 <sieni> ~
07:49:26 <poetix> Class.
07:49:41 <poetix> What is the inspiration for that module?
07:51:10 <poetix> @vixen Are you related to Eliza?
07:51:11 <lambdabot> i truely am
07:51:46 <poetix> @vixen I had some good times with Eliza. She really understood me.
07:51:47 <lambdabot> i'm glad, i'm good too
07:52:19 <Mon31076> @vixen i bitchslapped Eliza
07:52:21 <lambdabot> Too much cussing.
07:52:33 <Mon31076> @vixen i lipsmacked Eliza
07:52:34 <lambdabot> enough of this!
07:52:40 <poetix> Passes /my/ Turing test.
07:53:12 <Mon31076> @vixen i earplugged Eliza
07:53:14 <lambdabot> You think this is a botiecall??
07:53:45 <Mon31076> @vixen i bounced Eliza chocolat donats
07:53:46 <lambdabot> Does your mommie know you're here, little naughty boy?
07:53:51 <poetix> @vixen Do you like being tied up in type classes?
07:53:52 <lambdabot> sure, i definitely don't hate
07:55:00 <Mon31076> @vixen i stabbed Eliza with the wang
07:55:01 <lambdabot> why do you keep repeating yourself?
07:55:11 <Mon31076> @vixen you stabbed Eliza with the wang
07:55:13 <lambdabot> what type of music do you like?
07:58:42 <poetix> @vixen Are you a boy or a girl?
07:58:43 <lambdabot> yup, i'm all woman
07:59:03 <poetix> @vixen Do you like boys or girls? It's confusing these days!
07:59:04 <lambdabot> sure, i definitely don't hate
07:59:30 <Mon31076> @vixen are you a dominatrix
07:59:32 <lambdabot> yes, i am
07:59:41 <Mon31076> @vixen are you not a dominatrix
07:59:43 <lambdabot> yes, i am
07:59:52 <thedward> @help vixen
07:59:53 <lambdabot> sergeant curry's lonely hearts club
07:59:55 <Mon31076> are you galbadsagfdg
08:00:05 <Mon31076> @vixen are you galbadsagfdg
08:00:06 <lambdabot> i'm bad and i know it :)
08:00:21 <Mon31076> @vixen are you a turd
08:00:22 <Lor> it's bad if the gal sags
08:00:22 <lambdabot> i truely am
08:00:54 <thedward> @vixen (\x y -> ( fst x ) == (fst y ) )
08:00:55 <lambdabot> my keyboard doesn't have an
08:01:27 <Mon31076> @vixen press the any key
08:01:29 <lambdabot> Most guys don't understand me, but we really seem to connect.
08:02:18 <Mon31076> @vixen are you feeling a bit bi-curious nowadays?
08:02:20 <lambdabot> i'm a little curious i suppose...
08:02:27 <Mon31076> QED
08:12:05 <CosmicRay> tomorrow's HWN is being prepared at http://darcs.complete.org/hwn/prep.html.  if there's anything you think is missing, please e-mail hwn@complete.org about it asap
08:17:05 <Igloo> I don't agree with your consensus, FWIW
08:17:27 <Mon31076> if you do a 'module Bla(..)', does that import every module you import?
08:17:42 <Mon31076> i couldnt find it in the ghc manual when searching for 'module'
08:17:42 * basti_ .o° ( ? )
08:18:14 <basti_> mon i'm still riddling about the exact workings too, but afaics, its like: module Bla(exports) where  import LocallyVisible
08:18:22 <shapr> Igloo: well, send patches!
08:18:37 <basti_> you should have to reexport things you want to reexport.
08:19:21 <Lor> In the US, is someone with a bachelor's degree and working on a master's degree (yeah I know this is rare) considered a grad or undergrad student?
08:19:28 <shapr> grad student
08:19:35 <Lor> Thanks.
08:19:56 <Mon31076> basti_, i now using the (..) exports everything in the current module...but im wondering if it also exports all the import modules....like with module Bla(module L) where import L
08:20:18 <basti_> ah you actually meant ".."
08:20:23 <Mon31076> yeah
08:20:24 <basti_> i dont know how this behaves sorry
08:20:29 <Mon31076> ok, np
08:20:33 <Mon31076> Lor, why is working on a msc degree rare?
08:20:51 <Lor> That is just something that I've heard.
08:21:14 <shapr> It was the most popular option where I lived.
08:21:14 <Lor> That a master's degree is pretty rare, and the usual basic degree is BS, and if you go postgrad then you aim for PhD directly.
08:21:32 <threeve> Lor: depends on the field
08:21:44 <threeve> Lor: there are hordes of MBAs that never go on to get a PhD
08:21:45 <shapr> It was rare to get a PhD in Alabama, most people got a four year degree, a master's, and got a well paying job.
08:22:18 <Lor> Here in the nordic countries (and maybe germany) we also have a licentiate degree between MS and PhD.
08:22:41 <Lor> I was thinking on aiming for that one next.
08:22:46 <Mon31076> here (in netherlands) its pretty standard that you get the msc
08:22:54 <Lor> (Been working in the industry for a year now, aching to get back to studying.)
08:23:03 <Lor> Yeah, Europe is different.
08:23:21 <Mon31076> cause a year or two back...we didnt have the msc and bachelor stuff at all
08:23:27 <Lor> Although with the bologna treaty and whatnot, MS is likely to become less common here, too.
08:23:32 <Mon31076> just propedeuse and Drs.
08:24:39 <shapr> CosmicRay: how do you do the gmane.org linking? I'd like to write three sentences about the ParsingForeignLanguagesInHaskell thread.
08:24:45 <pejo> Lor, I can't speak for other countries but I doubt the lic is worth that much except as a checkpoint for the phd.
08:25:16 <Lor> What's "that much"?
08:25:47 <CosmicRay> shapr: go to gmane.org, click on "reading", get to the appropriate group (searching for "haskell" is helpful), pull up the frames/threads view, click on the item that starts the discussion.  then, depending on what you want to do, click on either "thread" or "direct link" at the bottom and use that as the link
08:25:49 <pejo> Lor, no significant difference compared to a ms, atleast not in the job market.
08:25:50 <kosmikus> Lor: .de doesn't have a licentiate degree
08:25:58 <Lor> Ah, I stand corrected.
08:26:01 <CosmicRay> shapr: fwiw the link in that thread to a wiki page didn't seem to work
08:26:13 <Mon31076> here, Msc *is* worth that much, but i doubt an in between thing between msc and phd would not be interesting for industry...and well for science...why not get a phd in one step
08:26:17 <Lor> I recall googling for licentiate, and most of the links came from nordic countries and .de.
08:27:02 <Lor> Because for the kind of learning that I'd personally require from myself for a PhD I'd have to go somewhere abroad, and I'm not quite prepared for that right now.
08:27:19 <shapr> Which list had that discussion anyway?
08:27:49 <CosmicRay> I don't remember... maybe cafe or libraries?
08:27:56 <Lor> Moreover, I'm hoping that having a lic would be worth something when applying for phd studies someplace.
08:28:08 <Mon31076> i think 'module Bla(..) where
08:28:09 <Mon31076> '
08:28:13 <Mon31076> reexports imports
08:29:09 <pejo> Lor, probably depends on place. The lic proves you've completed yet another step, on the other hand you're already formed by someone else whose views might not be similar to the phd position you're applying for.
08:30:06 <Lor> While I'm studying in Finland, I'm not being "formed" by anyone. There's no one to form me. :)
08:30:22 <univac> how can i map they keys in map function, i want J+F1 i try <J-F1> and <j-F1? but not works
08:30:36 <univac> s/?/>
08:30:43 <shapr> CosmicRay: The ParsingForeignLanguagesInHaskell wiki page was the subject of a short discussion[1] on the libraries mailing list. If you have any further information or would like to join or start a project to parse a particular language, see the wiki page: http://www.haskell.org/hawiki/ParsingForeignLanguagesInHaskell [1]http://thread.gmane.org/gmane.comp.lang.haskell.libraries/3572
08:32:17 <pejo> Lor, shrug. You will pick up some opinions on the way. Can you get a lic without an advisor there?
08:33:59 <Lor> No, but not all advisors have very strong opinions.
08:35:21 <Philippa> my undergrad project supervisor's been v.hands-off about the whole thing - the only strong opinion he seems to have is that I need to write more in the way of report
08:35:42 <Mon31076> ahaaa qualified imports won't be exported
08:36:18 <shapr> Unlike #haskell, we have very strong opinions here.
08:37:08 <Philippa> yeah, you want code *now*, dammit! :-)
08:37:24 <Philippa> not feeling well, have stalled part way through hacking up what I told you about earlier
08:37:31 <Philippa> also, the layout rule interacts in awkward ways
08:37:39 <Philippa> so you really want a smarter parser than usual
08:39:45 <shapr> g'day SyntaxNinja
08:40:56 <SyntaxNinja> hi shapr
08:42:25 <poetix> shapr: Thanks for flagging up the parsing page - I just was thinking of doing that...
08:42:41 * shapr waves the flag
08:43:22 <SyntaxNinja> is anyone available to try out installing cabal on ghc 6.4.1?
08:44:07 <Igloo> DYM a prerelease or did I miss an announcement?
08:49:10 <CosmicRay> thanks shapr
08:51:20 <CosmicRay> shapr: added.
08:51:23 <shapr> thanks!
08:51:29 <shapr> I wish for a decent PHP parser.
08:51:33 <CosmicRay> heh
08:51:37 <CosmicRay> that sounds evil
08:51:39 <CosmicRay> eeeeee vil.
08:51:48 <shapr> But useful for 'sewage treatment' as wagle puts it.
08:51:54 <CosmicRay> hehe
08:52:06 <CosmicRay> shapr: shortcut;
08:52:15 <CosmicRay> shapr: shortcut: convince someone to write it in Perl6 ;-)
08:52:22 <shapr> heh
08:52:47 <SyntaxNinja> Igloo: prereelease, yeah
08:53:23 <CosmicRay> shapr: what do you think of gmane, having played with it a bit?
08:53:42 <shapr> I switched all of my mailing lists to gmane immediately after finding it.
08:53:46 <kosmikus> Igloo: a new prerelease?
08:53:53 <kosmikus> sorry, SyntaxNinja
08:53:59 <shapr> I wish I could do credit card donations to gmane instead of just paypal.
08:54:16 <CosmicRay> heh, well I guess that sums it up pretty well ;-)
08:54:40 <shapr> Given the choice, I'd use gmane.org for all of my email. The collaborative spam filtering is brilliant.
08:54:46 <CosmicRay> paypal does take credit cards, but I agree about its general suckiness
08:55:05 <SyntaxNinja> kosmikus: I think there's a 6.4.1 prerelease, I keep getting questions about cabal working with it :)
08:55:20 <shapr> Paypal won't take my credit card because I moved countries... long story.
08:55:42 <CosmicRay> ick
08:55:53 <kosmikus> SyntaxNinja: so you mean installing Cabal-1.1.1 on the 6.4.1 prerelease?
08:56:14 <shapr> I can't use a Swedish card for a Finnish paypal account, but cancelling an account is some long and difficult process. And I can't reuse my email address for another account, so...
08:56:36 <Philippa> you've got a whole domain's worth of email addresses, haven't you?
08:56:41 <shapr> True, but...
08:56:50 <shapr> hm, yeah.
08:56:55 <CosmicRay> heh
08:57:17 <Igloo> Syn: You can get one of the pre-releases from H-U for unstable
08:57:43 <CosmicRay> Igloo: out of curiousity, why do you upload there instead of experimental?
08:58:22 <Igloo> Mostly because to upload to experimental I'd have to remember to change the thing at the top of the changelog and change it back again
08:58:34 <Igloo> No particularly good reason in this case
08:58:38 <CosmicRay> heh, ok.
08:59:17 <Igloo> There's more reason when I've packaged a library I don't intend to go into Debian but want to put somewhere other people can use it
08:59:47 <CosmicRay> now why would you package a library without intending it to go into Debian at some point? ;-)
09:00:23 <Igloo> Oh, I'd hope it would at some point, but when I don't have time to do it myself and it's not in great shape I think experimental is the wrong place for it
09:01:14 <kosmikus> SyntaxNinja: Cabal itself installs fine with the prerelease from 20050804, is there any particular package I should try to install on top of it?
09:01:47 <pejo> Pl
09:12:14 <SyntaxNinja> kosmikus: nothing in particular; the previous version of GHC had issues w/ installing cabal 1.1.1 on top of 1.0 because of the beahvior of ghc-pkg.
09:15:26 <kosmikus> right, with 6.4.1, the Cabal-1.0 that is shipped with ghc is hidden automatically when Cabal-1.1.1 is registered
09:19:25 <SyntaxNinja> kosmikus: excellent.  and then are you able to use other stuff?
09:19:51 <kosmikus> c2hs doesn't install because "base" isn't named as a dependency (I think something similar was mentioned on the mailing list recently)
09:21:59 <insanewarrior> hello
09:22:14 <SyntaxNinja> kosmikus: yeah, I saw that, that's one thing that had me concerned. maybe cabal should automatically include "base"
09:22:14 <insanewarrior> where can I find an easy haskell gui
09:22:23 <SyntaxNinja> but then that might get complex if someone wants to have base>1.1 or something
09:22:33 <SyntaxNinja> insanewarrior: you mean a library for writing GUIs in Haskell? look for wxhaskell
09:22:40 <SyntaxNinja> or gtk2hs
09:23:58 <Igloo> SyntaxNinja: People will quickly fix things anyway
09:24:03 <insanewarrior> I mean something that will let me edit and run Haskell code (I don't really care if it's complied or interpreted)... Well, ideally I would run it via KDevelop, only KDevelop does not seem to support it
09:24:21 <Beelsebob> why not just use a text editor and ghci?
09:24:55 <insanewarrior> is ghci an interpreter or a compiler?
09:24:56 <Beelsebob> IDEs are only really useful for managing big projects
09:25:10 <insanewarrior> (I like IDEs :) )
09:25:11 <Beelsebob> ghci appears to be an interpreter, but actually is a compiler
09:25:12 <sylvan> insanewarrior: interpreter
09:25:28 <sylvan> Beelsebob: pretty sure it interprets
09:25:38 <insanewarrior> what do YOU use?
09:25:43 <Beelsebob> sylvan: behind the scenes it calls ghc and runs it
09:25:51 <Beelsebob> (the result)
09:26:09 <sylvan> Beelsebob: Really?
09:26:14 <Beelsebob> or well... not as simple as that, but it compiles your code, and then runs it
09:26:18 <Beelsebob> using ghc
09:26:26 <threeve> is there not some support for haskell in emacs?  a haskell-mode or whatever?  (I don't use it, yet, maybe...)
09:26:33 <sylvan> aren't you thinking of "pugs"?
09:26:38 <mflux> there's haskell mode, but it could be better
09:26:39 <sylvan> using hs-plugins to compile and run code
09:26:49 <Philippa> hs-plugins in turn uses chunks of ghci
09:27:44 <sylvan> according to the users guide it's interprets code...
09:28:16 <sylvan> (although it CAN load compiled code in, e.g. pre-compiled modules)
09:28:23 <Beelsebob> sylvan: that's because to all apearances to the user it does
09:29:05 <SyntaxNinja> Igloo: quickly fix things?
09:29:22 <sylvan> Section 3.3: "When you load a Haskell source module into GHCi, it is normally converted to byte-code and run using the interpreter"
09:29:30 <Igloo> SyntaxNinja: Add the missing deps
09:29:39 <Igloo> Once they're actually needed
09:29:49 <SyntaxNinja> insanewarrior: I use GHC, GHCI + emacs.
09:30:06 <SyntaxNinja> Igloo: yeah, I guess that's not really what I'm worrieda bout, more just that it's logical for the prelude to come for free.
09:30:40 <Beelsebob> sylvan: yeh, that just strips off the last stage of ghc, which is to convert the bytecode to runable code
09:30:47 <Beelsebob> it still has to be compiled into bytecode
09:31:01 <kosmikus> SyntaxNinja: I think requiring base explicitly is fine
09:31:04 <Beelsebob> nhc and nhci work the same way
09:31:15 <Igloo> Me too, especially as there are both base and haskell98 packages
09:32:11 <sylvan> Well in my book "compile to byte-code -> interpret byte code" is exactly what an interpreter does... So in answer to the original question, GHCi is an interpreter
09:32:37 <Beelsebob> sylvan: no, an interpreter tends to compile JIT
09:32:42 <poetix> @vixen See you later, hot stuff!
09:32:43 <lambdabot> i'm on fire!
09:32:48 <poetix> I think I'm in there!
09:32:56 <Beelsebob> i.e. oh, now I have to do this... so lets compile the next instruction
09:33:11 <Beelsebob> wheras ghci compiles the whole program to bytecode
09:33:19 <Beelsebob> and then interprets that
09:33:25 <Beelsebob> it's stuck half way inbetween
09:33:30 <sylvan> Beelsebob: Well that depends on the interpreter. But if you're to classify ghci as an interpreter or a compiler, well it's certainly closer to an interpreter
09:34:02 <Beelsebob> I'd say it's pretty much mid way, the only change you need to make is to dump the bytecode to runable code and you have ghc
09:34:28 <sylvan> and do a bunch of optimization passes
09:34:28 <Beelsebob> it's much closer to a compiler than any interpreter you'd write if you didn't already have ghc there
09:34:54 <Beelsebob> I may be wrong, but I think ghc does most of it's optimisations on the bytecode
09:35:08 <Lor> imnsho the distinction between compiler and interpreter is completely arbitrary
09:35:14 <Beelsebob> that's true
09:35:24 <Beelsebob> why not so honest though?
09:35:30 <Lor> except that the interpreter also contains an execution engine
09:35:32 <sylvan> well if you ignore what internal modules it uses, and someone asks you "is it an interpreter or a compiler" it's certainly not a compiler, which is also why the GHC-folks themselves repeatedly say it's an interpreter and refers to what it does as "interpreting"
09:35:58 <Beelsebob> sylvan: that's why I said that to the outside world it's an interpretter
09:36:05 <Beelsebob> but behind the scenes it's really a compiler
09:36:07 <sylvan> No, GHC doesn't do most of it's optimization in GHCi (see 3.9)
09:36:15 <sylvan> So it's an interpreter
09:36:17 <Beelsebob> ah, k
09:36:26 <Beelsebob> but, meh, optimisation a compiler does not make
09:36:53 <insanewarrior> well, I seem to know why Kdevelop will not work with Haskell. It needs ghc :D
09:37:05 <Beelsebob> heh
09:37:06 <shapr> good reason!
09:37:10 <Beelsebob> good reason indeed
09:37:20 <Beelsebob> well... not really, surely it should need ghc or nhc
09:40:08 * Beelsebob goes to find drink
09:40:42 * shapr goes to find unicycle
09:42:09 <SyntaxNinja> there's an nhci?
09:51:27 * boegel yawns
09:51:39 <boegel> @seen Itkovian
09:51:40 <lambdabot> I saw Itkovian leaving #haskell 1 hour, 9 minutes and 15 seconds ago.
09:52:48 <boegel> hmm, connection refused while trying to connect to meme.b9.com ?
09:54:06 <Maddas> @yow
09:54:07 <lambdabot> Hello.  Just walk along and try NOT to think about your INTESTINES
09:54:07 <lambdabot> being almost FORTY YARDS LONG!!
09:54:41 <boegel> @vixen great Maddas for me, will you ?
09:54:42 <lambdabot> great is like a very good good
09:54:56 <boegel> damned :)
09:54:59 <boegel> @vixen greet Maddas for me, will you ?
09:55:00 <lambdabot> When i get kinky, i have been known to engage in watersports... Does
09:55:00 <lambdabot> that turn you on as well?
09:55:05 <boegel> :|
09:55:13 <Maddas> boegel: Hi will do :) Hi!
09:55:26 * boegel tried to be original for a change
09:55:33 <Maddas> :-P
09:59:20 <Philippa> @vixen you waterski when kinky?
09:59:22 <lambdabot> i can be very kinky at times
09:59:28 <Philippa> (yeah yeah, I know you all know I'm nowhere near that innocent)
10:00:36 <BigDuke> @vixen you get the ballsack dropped often?
10:00:37 <lambdabot> hahaha.
10:36:19 <Jan_w> anyone know a good embedded programming channel ?
10:44:51 <CosmicRay> by embedded programming, you mean programming on embedded hardware, or embedding code from one language in a program written in another?
10:45:10 <ski> or maybe embedded domain specific language ?
10:45:32 <CosmicRay> ski: ooo, a recursive ambiguity
10:45:53 <ski> CosmicRay : how ?
10:46:09 <CosmicRay> ski: we still don't know if that DSL is embedded in small hardware or not ;-)
10:46:23 <CosmicRay> well there's #emdebian
10:46:26 <ski> heh
10:46:58 <CosmicRay> #oe, if you're working with PDAs
10:46:59 <CosmicRay> #elinux
11:10:57 <ehuber> hello.. i have a simple question
11:11:25 <ehuber> i'm trying to do some patterns with strings.. like ..   bla "a" ++ "b" = "k" .. why is this not allowed?
11:11:44 <_metaperl> @type (++)
11:11:48 <ehuber> after all, you can do a:b if you have lists
11:11:53 <lambdabot> forall a. [a] -> [a] -> [a]
11:12:36 <_metaperl> ehuber: I think you can do ("a":"b":xs) = "k"
11:12:50 <ehuber> let me try that
11:13:10 <Beelsebob> metaperl: yes... but that has type [String]
11:13:12 <Beelsebob> not String
11:13:27 <ehuber> yeah..
11:13:38 <ehuber> i would just like to do some simple tokenizing..
11:13:59 <sorje> 'a':'b':xs?
11:14:04 <Beelsebob> that would do it
11:14:35 <ehuber> ah hey that works great
11:14:48 <ehuber> but why cant i do patterns using ++ ?
11:15:11 <sonof> The (:) pattern is special, as is the (n+1) pattern
11:15:12 <ndm> : is a constructor, ++ is a function
11:15:14 <Lemmih> (++) is a function, (:) is a constructor.
11:15:25 <ndm> you can only do pattern matching on constructors, not on functions
11:15:45 <ndm> sonof, (n+1) is special, (:) is not that special
11:15:50 <sonof> doh, you're right
11:15:55 <ehuber> okay. so patterns only work with constructors.
11:16:03 <ehuber> thanks ;)  i will continue
11:16:59 <Beelsebob> it would be interesting to have arbitrary evaluation on the left hand side though
11:17:13 <Beelsebob> though probably horribly complicated
11:17:39 <ndm> you kind of can with x | condition x =
11:17:56 <ehuber> yeah i thought it's kind of silly that it has to be a constructor, but whatever, it's good enough (:
11:17:57 <Beelsebob> yeh, but you can't patern match on parts of the condition
11:18:09 <Beelsebob> the problem would be that it would be non-deterministic if you could
11:18:16 <ndm> beelsebob, give an example
11:18:16 <Beelsebob> ... which would just be more fun :)
11:18:17 <ehuber> also... suppose you had     bla 2 + 4 = 7
11:18:29 <Philippa> you'd just get prolog, no?
11:18:35 <Beelsebob> ndm: f x ++ y = y ++ x
11:18:37 <ndm> bla x | x == 2 + 4 = 7
11:18:44 <Beelsebob> philipa: thinking about it... maybe
11:18:58 <ndm> beelsebob, yep, that is prolog
11:19:02 <Beelsebob> indeed
11:19:37 <Beelsebob> so were back to having one algorithm: depth first left first tree search :)
11:20:59 <xerox> yo
11:21:03 <Beelsebob> oy
11:21:46 <shapr> y0w!
11:21:55 <shapr> @yow it's exciting!
11:21:56 <lambdabot> Okay ... I'm going home to write the "I HATE RUBIK's CUBE HANDBOOK
11:21:56 <lambdabot> FOR
11:21:56 <lambdabot> DEAD CAT LOVERS" ...
11:22:01 <Beelsebob> haha
11:23:19 <jlouis> you do not want to have only one algorithm there. Matching on constructors will allow you to cut down the amount of checking quite a lot
11:23:53 <jlouis> Correct unfolding actually builds a KMP-string-matcher for the patterns. That will give quite a speed boost
11:24:13 <jlouis> where ''unfolding'' in this case is pattern-match compilation
11:27:04 <Beelsebob> you wold have to do some hellish things actually
11:28:01 <Beelsebob> I mean you'd have to describe a range of results for f x+y = y - x
11:28:23 <Beelsebob> in fact there... an infinite range
11:29:09 <Beelsebob> which isn't much use... if you used a guard in combination it would be though f x + y | x >= 0 && y >= 0 = y - x
11:47:46 <lispy> how do you make a Ptr a?
11:48:34 <lispy> for example, I want to read from a binary file and I want to read 4 bytes into an Int, something like hGetBuffer handle (Ptr a) 4
11:48:46 <lispy> but i don't understand what to put in place of Ptr a
11:51:11 <lispy> i have some C code that does fread(i, 4, 1, file) and I want to mimic that
11:51:28 <lispy> actually fread(&i, 4, 1, file)
11:53:12 <musasabi> lispy: how do you get the buffer in C?
11:53:27 <musasabi> lispy: probably you will want something like allocaBytes.
11:53:46 * monochrom considers suggesting nullPtr :)
11:53:59 <lispy> allocaBytes?
11:54:01 <lispy> hmm...
11:54:07 <lispy> what about Storable CInt
11:54:43 <monochrom> Foreign.Marshal.Alloc has stuff
11:57:57 <ehuber> argh.
11:57:59 <lispy> allocaBytes 4 (\p -> do { hGetBuffer handle p 4; peek p })
11:58:13 <ehuber> why does (' ' : xs) work as a pattern but (xs : ' ') not
11:58:25 <lispy> ehuber: because ' ' is not a list
11:58:29 <lispy> @type (:)
11:58:36 <lambdabot> forall a. a -> [a] -> [a]
11:59:00 <lispy> ehuber: but (xs:[' ']) is, and so is (xs:" ")
11:59:40 <lispy> @type allocaBytes 4 (\p -> do { hGetBuffer handle p 4; peek p })
11:59:41 <lambdabot> bzzt
12:00:40 <lispy> @type (\h -> Foreign.Marshall.Alloc.allocaBytes 4 (\p -> do { System.IO.hGetBuffer h p 4; Foreign.Storable.peek p }) )
12:00:41 <lambdabot> bzzt
12:00:59 <lispy> @type Foreign.Marshall.Alloc.allocaBytes
12:01:00 <lambdabot> bzzt
12:01:28 <musasabi> Does QuickCheck really not define Arbitrary for Chars? I get "No instance for (Arbitrary Char)" - is my installation broken?
12:02:05 <lispy> @type Foreign.Marshal.Alloc.allocaBytes
12:02:07 <lambdabot> forall b a. Int -> (GHC.Ptr.Ptr a -> IO b) -> IO b
12:02:13 <lispy> @type (\h -> Foreign.Marshal.Alloc.allocaBytes 4 (\p -> do { System.IO.hGetBuffer h p 4; Foreign.Storable.peek p }) )
12:02:14 <lambdabot> bzzt
12:02:23 <lispy> @type System.IO.hGetBuffer
12:02:25 <lambdabot> bzzt
12:02:58 <lispy> @type System.IO.hGetBuf
12:02:59 <lambdabot> forall a. GHC.IOBase.Handle -> GHC.Ptr.Ptr a -> Int -> IO Int
12:03:06 <lispy> @type (\h -> Foreign.Marshal.Alloc.allocaBytes 4 (\p -> do { System.IO.hGetBuf h p 4; Foreign.Storable.peek p }) )
12:03:07 <lambdabot> forall a.
12:03:07 <lambdabot> (Foreign.Storable.Storable a) =>
12:03:07 <lambdabot> GHC.IOBase.Handle -> IO a
12:04:15 <lispy> @type (\h -> Foreign.Marshal.Alloc.allocaBytes 4 (\p -> do { System.IO.hGetBuf h p 4; (Foreign.Storable.peek p::IO Int) }) )
12:04:17 <lambdabot> GHC.IOBase.Handle -> IO Int
13:10:17 <sylvan> musasabi, nope it doesn't...
13:10:22 <sylvan> AFAIK
13:10:41 * boegel returns from the dark
13:12:45 <sylvan> but this will do "arbitrary = oneof (map return ['A'..'z'])"
13:14:58 <TheHunter> arbitrary = elements ['A'..'z']
13:15:38 <TheHunter> or even better, choose ('A','z').
13:19:09 <musasabi> hmm I used choose ('\0','\255')
13:23:14 <ikbent> Hi all
13:23:25 <ikbent> I have a dining philosophers problem
13:23:34 <ikbent> so I want to number the "forks"
13:23:42 <ikbent> so i can solve it by taking the lowest fork first
13:23:46 <ikbent> however, the forks are IORefs
13:23:55 <ikbent> it there a way to get the integer pointer value of an IORef?
13:24:25 <beelsebob> why not just pair the forks with an arbitrary number
13:24:39 <ikbent> well
13:24:43 <beelsebob> zip forks integers
13:24:47 <ikbent> i have to make sure they are unique
13:24:51 <beelsebob> that does
13:25:00 <beelsebob> it starts at 0 and counts up
13:25:05 <ikbent> yeah i see but
13:25:17 <ikbent> the forks are not made at the start of my application
13:25:28 <ikbent> there are philosophers and forks spawning all the time
13:25:28 <ikbent> :-)
13:25:44 <beelsebob> okay then, you need a pool of untaken tags then
13:25:54 <ikbent> mm yeah
13:25:55 <beelsebob> and take one out each time you get a new philosopher
13:26:13 <ikbent> yeah but then i have to thread this pool through the entire application
13:26:36 <ikbent> hmm or i make a global variable with unsafePerformIO
13:26:48 <ikbent> that contains the max number in use
13:26:49 <ikbent> ...
13:26:49 <beelsebob> ugh... nasty
13:26:51 <beelsebob> thread it
13:27:00 <beelsebob> or use the state monad
13:27:15 <ikbent> hmm
13:27:28 <ikbent> I can see your point
13:27:31 <ikbent> but my application is huge
13:27:40 <ikbent> and threading that state through it won't make things clearer
13:28:03 <beelsebob> then use the state monad
13:28:21 * xerox kinda groks the reader monad, finally
13:28:21 <_metaperl> dons: is Manuel Chakravarty on this channel often? http://freshmeat.net/users/ChilliX/
13:28:22 <ikbent> yeah but then my entire application gets lifted into the state monad
13:28:23 <ikbent> :-)
13:28:24 <xerox> it's great!
13:28:31 <_metaperl> he codes some heavy duty c-haskell stuff
13:28:34 <ikbent> and I forkIO all the time
13:28:42 <beelsebob> surely there's only a small part of the app in which philosophers can be introduced
13:28:43 <ikbent> and I cannot thread the state monad through forkio
13:28:51 <beelsebob> if not... design it better
13:28:54 <ikbent> hehehe
13:29:13 <ikbent> there is indeed 1 philosopher introducing function
13:29:35 <beelsebob> then that's the only one that needs access to the pool
13:29:39 <ikbent> yes
13:29:51 <beelsebob> so you don't need to thread it through the entire app
13:29:55 <ikbent> so I would have to thread the state of the pool through the entire app
13:29:56 <ikbent> ....
13:29:57 <ikbent> oh...
13:29:59 <ikbent> why not
13:30:00 <ikbent> ?
13:30:08 <ikbent> i can call the philosopher introducing function
13:30:09 <ikbent> from any place
13:30:24 <beelsebob> yes... so instead of returning IORef
13:30:30 <beelsebob> make it return (Int, IORef)
13:30:53 <ikbent> yes but then the caller has to remember that int value
13:31:01 <ikbent> for making the next philosopher
13:31:01 <ikbent> ...
13:31:22 <beelsebob> uhhuh... so it needs to be threaded to that function
13:31:30 <beelsebob> it doesn't need to go through the rest of the app
13:31:47 <ikbent> hmmmmm
13:31:51 <beelsebob> by the sounds of it you've got some monadic code pretty close to that function that you can introduce the variable in
13:31:59 * ikbent scratches his head
13:32:16 <ikbent> well.....
13:32:19 <ikbent> its like this
13:32:59 <ikbent> i have a graph of data manipulators. the "roots" of the graph write to a database. unlike a tree, i can have multiple roots. when i commit, i want all nodes above the commited node to be locked.
13:33:24 <ikbent> but since i can have multiple subnodes connecting to one supernode, this may cause a deadlock
13:33:34 <beelsebob> :/
13:33:55 <ikbent> when I have 2 root nodes, and 2 subnodes, each subnode is connected to both root nodes
13:34:02 <ikbent> and I commit both sub nodes from different threads
13:34:10 <ikbent> they both may be able to get the lock of 1 supernode
13:34:16 <ikbent> and cause the thing to deadlock
13:34:21 <beelsebob> you lost me in the first bit of explaination
13:34:26 <ikbent> hehehe
13:34:33 <ikbent> ok
13:34:41 <ikbent> i have a database abstraction library
13:34:56 <ikbent> the programmer uses it to make a graph of "datasources"
13:35:16 <ikbent> the roots datasources of the graph actually accesses the database directly
13:35:31 <ikbent> but on to of these datasources, I can add nodes that, e.g. introduce caching
13:35:36 <ikbent> or that join to supernodes
13:35:46 <ikbent> so I can use this library to connect 2 databases
13:35:51 <ikbent> etc
13:36:35 <ikbent> so suppose i connect 2 databases using a joining node. and i write to the joining node. than I need to lock the two root nodes. which may cause a deadlock
13:36:42 <ikbent> hmm well anyways
13:36:46 <ikbent> too much details perhaps
13:36:47 <ikbent> :-)
13:36:55 <beelsebob> :)
13:37:05 <beelsebob> tbh, I think you have to thread it
13:37:12 <ikbent> k
13:37:21 <ikbent> i will give it a try
13:37:22 <ikbent> :-)
13:37:24 <ikbent> thanx
13:39:38 <beelsebob> gyah... apple's X11 implementation is horribly buggy
13:49:52 * boegel goes to bed
13:50:25 * beelsebob farts next to boegel
13:51:16 <sylvan> ikbent, did you try STM? Store your noes as TMVars or whatever and make sure that whatever you do when you "commit" is in the same "atomically" block?
13:51:43 <sylvan> ah, he left
13:52:44 * boegel puts a banana in beelsebob's ass
13:52:55 <beelsebob> O_o
13:53:33 <wilx> Heh.
13:54:13 <boegel> bye now :)
14:38:54 <lispy> i'm trying to use the 'UnsignedByte' data constructor in my program, but no matter what module I import it just doesn't seem to exist http://www.haskell.org/ghc/docs/latest/html/libraries/OpenGL/Graphics.Rendering.OpenGL.GL.VertexArrays.html#t%3ADataType
14:38:59 <lispy> any ideas?
14:40:10 <lispy> it also appears in the index http://www.haskell.org/ghc/docs/latest/html/libraries/doc-index-U.html
14:41:15 <TheHunter> @type Graphics.Rendering.OpenGL.UnsignedByte
14:41:19 <lambdabot> Graphics.Rendering.OpenGL.GL.DataType.DataType
14:42:07 <wilx> @hoogle UnsignedByte
14:42:25 <lispy> Could not find module `Graphics.Rendering.OpenGL.GL.DataType':
14:42:26 <lispy>   it is hidden (in package OpenGL-2.0)
14:43:41 <wilx> Hmpf.
14:43:52 <wilx> lambdabot totally ignores me.
14:44:03 <wilx> At least it could do its usual bzzt.
14:44:20 <TheHunter> lispy, tried -package OpenGL ?
14:44:54 <TheHunter> wilx, the @hoogle module doesn't say bzzt.
14:45:35 <lispy> TheHunter: doesn't seem to help :(
14:46:14 <TheHunter> % ghci -package OpenGL
14:46:16 <TheHunter> [...]
14:46:21 <TheHunter> Loading package base-1.0 ... linking ... done.
14:46:21 <TheHunter> Loading package OpenGL-2.0 ... ghc-6.5.20050804: can't load .so/.DLL for: GL (libGL.so: cannot open shared object file: No such file or directory)
14:46:36 <TheHunter> that's what I get.
14:47:11 <lispy> Loading package OpenGL-2.0 ... linking ... done.
14:47:17 <lispy> lesson06.hs:25:37: Not in scope: type constructor or class `UnsignedByte'
14:47:59 <lispy> i'm trying to use this function http://www.haskell.org/ghc/docs/latest/html/libraries/OpenGL/Graphics.Rendering.OpenGL.GL.Texturing.Specification.html#v%3AtexImage2D
14:48:14 <lispy> it requires something of type PixelData a
14:48:28 <lispy> and of course PixelData requires somethig of DataType
14:51:42 <threeve> lispy: i'm planning to embark on the nehe tuts in about 2hrs, so if you haven't figured this out by then I'll try to help.  :)  my haskell-fu is weak though.
14:52:23 <TheHunter> import Graphics.Rendering.OpenGL
14:52:23 <TheHunter> foo :: DataType
14:52:23 <TheHunter> foo = UnsignedByte
14:52:29 <lispy> threeve: i've converted the first 5, /msg me if you need help
14:52:31 <TheHunter> this works fine here.
14:53:58 <lispy> hmm...
14:54:20 <lispy> TheHunter: if i type that into ghci it works for me as well
14:54:27 <lispy> TheHunter: maybe i'm doing something illegal
14:54:39 <TheHunter> no, this is from a file.
14:54:42 <lispy> data Bitmap = Bitmap Size (PixelData UnsignedByte)
14:54:56 <lispy> can UnsignedByte not be used there?
14:55:14 <lispy> (ie, are data constructors not to be used like that?)
14:55:19 <TheHunter> of course not.
14:55:45 <TheHunter> there must be a type.
14:56:07 <TheHunter> data Bitmap = Bitmap Size (PixelData DataType) works just fine.
14:57:19 <lispy> i just realized data Bitmap = Bitmap Size (PixelData Word8) is what I want
14:57:22 <lispy> thanks
14:57:39 <lispy> although, i'm getting this runghc: waitForProcess: interrupted (Interrupted system call)
14:57:51 <TheHunter> you will prolly need -threaded
14:58:30 <lispy> it started when i switch from allocaBytes to malloc
15:06:29 <lispy> so, are you required to use free with malloc, or is it just allowed?
15:06:37 <lispy> the documentation is not clear
15:06:47 <lispy> The memory may be deallocated using free or finalizerFree when no longer required.
15:10:28 <lispy> ah, i was using malloc instead of mallocBytes, that's why I was getting that runghc error
15:10:42 <lispy> ghc was probably getting a segfault
15:13:00 <lispy> @type Control.Monad.msum
15:13:01 <lambdabot> forall a (m :: * -> *). (Control.Monad.MonadPlus m) => [m a] -> m
15:13:01 <lambdabot> a
15:27:35 <lispy> hmmm..HOpenGL can be frustrating at times.  Sometimes it's nearly impossible to find which function corresponds to a specific C function for OpenGL
15:28:14 <lispy> for example, glGenTextures doesn't appear to have a counter part
15:28:25 <lispy> @index genTextures
15:28:25 <lambdabot> bzzt
15:28:53 <lispy> @index textures
15:28:53 <lambdabot> bzzt
15:29:08 <Lemmih> @index genObjectNames
15:29:09 <lambdabot> Graphics.Rendering.OpenGL.GL.BufferObjects, Graphics.Rendering.
15:29:09 <lambdabot> OpenGL.GL, Graphics.Rendering.OpenGL, Graphics.UI.GLUT
15:32:23 <lispy> thanks
15:42:53 <lispy> @type Graphics.Rendering.OpenGL.GL.BufferObjects.bindBuffer
15:42:54 <lambdabot> Graphics.Rendering.OpenGL.GL.BufferObjects.BufferTarget
15:42:54 <lambdabot> -> Graphics.Rendering.OpenGL.GL.StateVar.StateVar (Maybe Graphics.
15:42:54 <lambdabot> Rendering.OpenGL.GL.BufferObjects.BufferObject)
15:43:18 <lispy> any idea how to use that function?
15:47:39 <lispy> @type do { name <- (Graphics.Rendering.OpenGL.GL.BufferObjects.genObjectNames 1 :: IO [Graphics.Rendering.OpenGL.GL.BufferObjects.TextureObejct]); Graphics.Rendering.OpenGL.GL.BufferObjects.bindBuffer $= name }
15:47:41 <lambdabot> bzzt
15:54:07 <lispy> i'm getting the impression that no one has ever used HOpenGL for texture mapping :)
15:54:16 <lispy> even google is not finding much
15:56:09 <Lemmih> lispy: I got some code for making a GL texture from a SDL surface. Interested?
15:57:42 <lispy> I just found an example that may help me too
15:59:43 <Lemmih> Using OSX?
15:59:47 <lispy> ya
16:01:19 <lispy> @index liftM
16:01:20 <lambdabot> Control.Monad, Control.Monad.Reader, Control.Monad.Writer, Control.
16:01:20 <lambdabot> Monad.State, Control.Monad.RWS, Control.Monad.Identity, Control.
16:01:20 <lambdabot> Monad.Cont, Control.Monad.Error, Control.Monad.List
16:01:39 <Lemmih> Not sure my SDL binding works on OSX.
16:01:59 <lispy> mainly I want to see an example :)
16:02:18 <lispy> but that doesn't mean it has to run
16:05:13 <lispy> it compiles
16:05:27 <lispy> i'm going to have to get x redirection worknig if i want to test it from here :)
17:29:39 <shapr> d00d
17:29:44 <Beelsebob> 0dd0
17:29:50 <shapr> wassup?
17:29:56 <Beelsebob> WASSSSSSSUP?
17:30:10 <Beelsebob> sorry
17:30:17 <Beelsebob> not much, trying to cocoa
17:30:20 <Beelsebob> not suceeding
17:30:28 <Pseudonym> Drink or fruit?
17:30:29 <Beelsebob> you?
17:30:37 <Beelsebob> no... API
17:30:42 <Pseudonym> Fruit.
17:30:55 <Pseudonym> @arr
17:30:56 <lambdabot> This is the END for you, you gutter-crawling cur!
17:31:01 <shapr> @quote
17:31:02 <lambdabot> trompthe says: number of 13x13 go positions is 37249792307686396442294
17:31:02 <lambdabot> 904767024517674249157948208717533254799550970595875237705
17:31:08 <shapr> yow!
17:31:12 <Beelsebob> ouch
17:31:15 <olsner> soo.. I was thinking about "doing haskell"... any ideas for a project to start with?
17:31:21 <shapr> olsner: Parsing!
17:31:29 <Beelsebob> olsner: a compiler!
17:31:37 <Beelsebob> for... Haskell
17:31:40 <Beelsebob> *g*
17:31:45 <shapr> John Meacham did that.
17:31:55 <Beelsebob> many people have
17:32:01 <Beelsebob> doesn't mean you can't do it again
17:32:04 <shapr> jhc was his first Haskell project. It did take him a few years to get it working though.
17:32:25 <Beelsebob> impressive
17:32:30 <olsner> ooh, a compiler.. something new for the turing tarpit perhaps... but most good ideas are already taken in that genre unfortunately
17:32:46 <Beelsebob> a debugger then?
17:32:50 <shapr> I have a somewhat new idea for the turing tarpit, dunno if I'll ever get around to writing it though.
17:33:15 <Beelsebob> a profiler?
17:33:39 <Pseudonym> olsner: What have you done so far?
17:33:50 <olsner> in haskell? nothing :P
17:33:55 <Pseudonym> Ah.
17:33:59 <shapr> What have you done in other languages?
17:34:05 <shapr> And, which other languages?
17:34:10 <Beelsebob> have you learnt haskell?
17:34:15 <Pseudonym> My first project in a new language (after "hello world") is always Eliza.
17:34:28 <Beelsebob> (i.e. is this a first project, or a learning experiance)
17:34:59 <olsner> well, obviously, the mainstream imperative languages... QB, asm, c++, java :P then after starting a CS degree I've had a look at CommonLisp and Prolog
17:35:10 <olsner> and this would be the Haskell Learning Experience
17:35:43 <Beelsebob> I'd suggest the SJT's boox project then ;)
17:35:46 <Beelsebob> book*
17:35:50 <shapr> SJT?
17:35:56 <shapr> Oh, Simon J. Thompson?
17:35:58 <Beelsebob> yeh
17:36:13 <monochrom> Ah, there are a few projects suggested at the end of the book.
17:37:07 <Pseudonym> Another option is to get the SPJ book on the implementation of functional programming languages and try implementing bits.
17:37:21 <Pseudonym> In Haskell, of cours.e
17:37:21 <Beelsebob> heh, yeh
17:38:08 <Beelsebob> I think my first ever Haskell program that was a real program was an SECD Machine
17:38:20 <olsner> SECD machine?
17:38:24 <shapr> Yeah, what's that?
17:38:27 <Beelsebob> @google SECD Machine
17:38:29 <lambdabot> http://www.cs.utexas.edu/users/boyer/ftp/nqthm/trsecd/trsecd.html
17:38:59 <Cale> was trompthe being serious? That looks about right...
17:39:14 <Cale> I wonder how that number was arrived at
17:39:16 <shapr> I think he was totally serious.
17:39:25 <shapr> I think he calculated it with some Haskell code he wrote.
17:39:28 <Cale> nice
17:40:02 <shapr> Beelsebob: Oh that's cool
17:40:19 <olsner> isn't it just 2^(13*13)?
17:40:22 <Beelsebob> it's certainy random
17:40:27 <Cale> olsner: no, it's less
17:40:33 <Cale> er, more
17:40:43 <Cale> it's just under 3^(13*13)
17:40:44 <Beelsebob> I sat there doing lots of different variants on it
17:40:57 <Beelsebob> to get used to random stuff like CPS
17:41:01 <Cale> 3^(13*13) = 430023359390034222082732011948356798311147247214997695270038813781532497547421283
17:41:18 <Cale> 2^(13*13) = 748288838313422294120286634350736906063837462003712
17:41:24 <shapr> I never did get used to CPS.
17:41:42 <olsner> aah, yes... white-black-blank.. didn't think about those blanks.. and then there're illegal positions too
17:41:47 <Beelsebob> there's just one or two things that I've found where it's absolutely fucking briliant
17:41:53 <Pseudonym> Is the SECD machine a good model for Scheme?
17:41:56 <Cale> olsner: yeah, it's a pretty tough problem
17:42:09 <Beelsebob> good question... it's a good model for something to play with ;)
17:42:23 <Cale> I'm curious as to how much brute-force enumeration was needed.
17:42:31 <Pseudonym> I'm just curious whether it's better to use that or to use a ML-like CPS model.
17:42:42 <Beelsebob> I wouldn't know
17:42:44 <Pseudonym> "Compiling with Continuations"
17:42:50 <Pseudonym> Good book, BTW.
17:43:15 <Beelsebob> There was a paper on transforming the SECD machine into various different styles and proving them equivalent
17:43:23 <Beelsebob> which included a CPS transform
17:44:05 <Beelsebob> there we go: http://www.brics.dk/RS/03/33/BRICS-RS-03-33.pdf
17:44:19 <Pseudonym> Interesting.
18:01:24 <dons> @seen _metaperl
18:01:25 <lambdabot> _metaperl is in #haskell. Last spoke 4 hours, 32 minutes and 52
18:01:25 <lambdabot> seconds ago.
18:01:55 <dons> _metaperl, Manuel isn't in #haskell these days.
18:53:30 <wagle> massive refactoring of a tcl/tk program is a PITA..  8)
18:53:49 <Pseudonym> Yikes.
18:54:02 <Pseudonym> Refactoring - static types == severe pain
18:54:48 <wagle> hell, some syntax errors are run-time errors..  8-D
18:55:45 <wagle> nevertheless, tcl/tk is fun..  you can play with guis at run-time
18:56:06 <wagle> its a very reflective language
18:58:08 <wagle> i'm imposing a MVC pattern on it
18:58:38 <wagle> and trying to modularize
18:58:59 <wagle> i didnt understand what i was doing at the beginning..
19:00:07 <wagle> i'm starting to wonder if smalltalk/squeak is what i really want (instead of the java i want to port to)
19:00:50 <wagle> (and well, haskell, but thats less a demo for my portfolio)
19:01:29 <Pseudonym> I'm still not convinced that Haskell has a decent GUI solution.
19:05:52 <wagle> yeah, hence the java..  but I thought maybe, by setting up the comparison,  i might see how to improve haskell
19:05:57 <dons> Pseudonym, in general, or just due to the currently available libraries ?
19:06:08 <Pseudonym> In general.
19:06:28 <Spark> i'm not convinced that java has a decent GUI solution :)
19:06:28 <Pseudonym> Fudgets is pretty good, but it doesn't seem very useful for dynamic GUIs.
19:06:39 <wagle> Spark: heh
19:06:44 <Pseudonym> Good point.
19:06:54 <wagle> Spark: actually, tcl/tk is pretty fun
19:07:05 <Pseudonym> In fact, probably the best GUI solutions are for languages designed for the purpose.
19:07:15 <Pseudonym> Smalltalk and Tk being the two prime examples.
19:07:16 <Spark> guis need to be intuitively designed, they are after all more art than science
19:07:24 <wagle> i'm seeing what concepts i want from java  or haskell when doing guis
19:07:39 <wagle> ..  or to help me out when doing guis
19:07:44 <Pseudonym> (I do think it's a shame that Tcl/Tk GUIs look like crap, but this isn't a language fault.)
19:08:04 <Pseudonym> (It's to do with font selection, I believe.)
19:08:25 <Spark> wagle: i like gladexml, but its a shame the development of the gui is so seperate to the program
19:08:45 <Spark> which really means you have to think up the interface in advance, which is a pain
19:09:14 <Pseudonym> Actually, that's a strength.
19:09:17 <Pseudonym> IME
19:09:19 <Spark> maybe inlining the gui description language within the code or vice versa
19:09:20 <wagle> i was running tcl/tk on my powerbook via X11, and the fonts were fine..  i upgraded to 10.4, and started using the carbon tk that comes with macosx, and the same font specifications look terrible
19:09:23 <Pseudonym> It makes your RAD much more R.
19:10:17 <Spark> Pseudonym: i think its good that its designed intuitively rather than with code, but bad that the development environment isnt more integrated
19:10:17 <wagle> in my case here, i really dont know what the gui should look like or do..  i'm making it up as i go
19:10:41 <SamB> I thought you were supposed to write the program with a bad gui and then get GUI people to make it nice after, with glade...
19:11:01 <Spark> heh just create a button for everything and put them all in a list? :)
19:11:08 <wagle> i'm reading a book on design patterns, and they teach you to avoid classes and use composition and delegation
19:11:19 * Pseudonym nods
19:11:19 <wagle> much more dynamic
19:11:38 <Pseudonym> Oh, yes.
19:12:37 <Pseudonym> Say what you will for OO programming, but a couple of decades of bad OO designs has done wonders for us.  Darwin would be proud.
19:12:46 <Spark> what if programmers are working with use case scenarios though, couldnt that avoid the gui altogether
19:12:54 <Spark> if you had a powerful usecase scenario description language
19:13:09 <Spark> that would abstract from the actual layout and allsorts
19:13:25 <SamB> Spark: you mean if they did use cases, they would realize that everyone wanted to use it on the command line?
19:13:26 <Spark> and it would refer directly to the signals
19:13:39 <Spark> SamB: i dont understand
19:14:12 <Spark> SamB: i mean the programmer wouldnt need a gui to test the code, so the design of that could be deferred
19:14:28 <Spark> or rather there would be no dependency so the two could run in parallel
19:14:42 <SamB> um, okay...
19:15:26 <Spark> but the commandline probably wouldnt be too good for expressing a long sequence of interactions
19:15:42 <Spark> you'd have a textfile that would be interpretted
19:16:30 <Spark> depends what kind of data is captured by the events i guess, drag-and-drop would be difficult because you'd ahve to synthesise (in the usecase scenario description language) the object being dragged
19:16:55 <Spark> if it was coming from outside the program, maybe
19:17:07 <Spark> am i making any sense? :)
19:19:46 <wagle> i dont know CASE...  8(
19:20:00 <wagle> 8( <- sad
19:20:02 <heatsink> case? the haskell keyword?
19:20:24 <wagle> computer aided software engineering, or somesuch
19:20:40 <heatsink> oh
19:20:41 <wagle> ..  ie what spark is talking about
19:20:58 <wagle> ah, you just got here..  8)
19:21:19 <heatsink> yea
19:21:42 <heatsink> cool, I can see tomorrow's logs on meme
19:21:55 <heatsink> Apparently we're going to repeat what we just said in a few hours
19:22:02 <Spark> heh
19:22:13 <Spark> well i cant be bothered typing all that again
19:22:34 <Igloo> Just copy and paste it from the Magic Logs From The Future
19:23:36 <wagle> @paste
19:23:37 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
19:27:06 <wagle> ick!
19:27:48 <wagle> what a unintuitive interface
19:28:49 <SamB> heh
19:29:01 <SamB> magic logs from the future...
19:35:26 <wagle> darwinports xemacs TURNED OFF the tcl-mode-hook
19:35:35 <wagle> </whinge>
19:36:33 <olsner> hmm... am I correct in my understanding that a haskell list can only ever have one type of data element? i.e. no [1, '+', [3, '+', 4]] lists?
19:38:22 <jewel> yep
19:40:16 <olsner> okay, that explains why I couldn't get that working :P
19:41:41 <ehuber> hi
19:41:49 <wagle> Hlists
19:41:59 <Lemmih> olsner: Yeah.
19:42:35 <wagle> olsner: there are ways around that
19:43:50 <wagle> data Univ = Int Int | Char Char ; [Int 1, Char '+', [Int 3, Char '+', Int 5]]  for example
19:44:11 <wagle> there is also something called HLists, but...
19:44:40 <Lemmih> wagle: You need a list element in your Univ type.
19:44:48 * threeve 's head explodes as he reads the tutorial chapter on types.
19:44:51 <wagle> Lemmih: well, ok
19:45:25 <wagle> data Univ = Int Int | Char Char | List [Univ] ; [Int 1, Char '+', List [Int 3, Char '+', Int 5]]  for example
19:45:33 <olsner> i've got this one now: data Expr a = Value a | ComplExpr (Expr a) (a->a->a) (Expr a) - but obviously, the jungle of (ComplExpr (Value 1) ......) is quite irksome
19:45:51 <Lemmih> And the exact type (and therefor also length) of a HList must be known at compile-time so their usability is limited.
19:46:04 <dons> @eval [toDyn 'x', toDyn "foo", toDyn (7 :: Int), toDyn (\x -> x::()) ]
19:46:06 <lambdabot> [<<Char>>,<<[Char]>>,<<Int>>,<<() -> ()>>]
19:46:07 <wagle> instance Show (Expr a) where ....
19:46:24 <wagle> dons: oooooooooooo
19:46:32 <wagle> dons: aaaaaaaaaaaaaaaaaahhhhhhhh
19:47:26 <dons> heh
19:51:33 <olsner> btw, is haskell garbage collected? the tutorial actually fails to mention...
19:52:01 <dons> yes
19:52:57 <olsner> ehm.. and then I realized that the tutorial doesn't go through memory allocation primitives either, probably because they don't exist :P
19:53:50 <SamB> the report doesn't say that it is garbage collected either, iirc...
19:57:15 <lispy_> i have some 32-bit ints that were written to a file in binary, then i moved from x86 (where they were written) to PowerPC, how can i fix the endian weirdness?
19:59:08 <SamB> lispy_: shifting and masking is the usual way...
19:59:14 <olsner> I could make you some big-endian words... wanna switch?
19:59:39 <SamB> with Data.Bits
19:59:57 <lispy_> ah, there is no library function for this?
20:00:10 <lispy_> SamB: thanks, i'll check it out
20:00:19 <SamB> lispy: not to my knowledge!
20:00:36 <lispy_> my other guess was maybe i could read each byte into a list and reverse the list
20:00:56 <lispy_> but i'm not sure how to turn a list of bytes into an int
20:02:07 <SamB> lispy: by writing it into a buffer and reading it back, with Foreign.Ptr?
20:03:24 <SamB> there is a c library function swab, but it only swaps bytes in twos, not in fours...
20:03:27 <lispy_> SamB: yeah, i'm already doing some magic like that, so let me see if i can *tweak* it :)
20:03:46 <lispy_> SamB: i just need to revrese the byte order right?
20:03:57 <SamB> yeah
20:03:58 <olsner> lispy: you could try just shifting and adding (or:ing)... i386 stores them as [1234], so value = (value * 256) + new_byte, starting with value = 0
20:04:19 <SamB> I haven't actually heard of any "sideways endian" architectures
20:05:18 <lispy_> olsner: if this doesn't pan out i'll try that
20:05:31 <olsner> I think there are a few that have [3412] ordering, but I think that's only used in a few archaic platforms
20:05:39 <olsner> like PDP-something
20:06:07 <SamB> olsner: for fixed-point words?
20:07:17 <SamB> on a machine with 8-bit bytes?
20:07:27 <olsner> my endian.h header calls it PDP endianness... fixed-point words? no idea
20:10:11 <SamB> okay, I guess that is for fixed-point...
20:10:35 <SamB> but still, it doesn't say what PDP that was, so I still haven't heard of any yet ;-)
20:11:05 <olsner> http://en.wikipedia.org/wiki/Endianness lists PDP-11 as a middle-endian platform, and says that VAX double-precision floats are/were middle-endian
20:12:19 <SamB> the PDP-11 only has 16-bit words!
20:12:28 <SamB> how can it be middle-endian?
20:12:40 <olsner> the middle-endianness must've been the convention for storing 32-bit words
20:12:53 <SamB> ah
20:13:01 <SamB> well, thats a software issue!
20:13:51 <SamB> big endian programmers and all that!
20:17:45 <wagle> PDP-11 had something for doing 32 bit
20:34:38 <lispy_> i was starting to lose, hope then i realized that to be able to twiddle the bytes i had to castPtr to Word8
20:34:47 <lispy_> then my problems were solved
20:40:39 <Korollary> I think the comma was misplaced
20:43:46 <Korollary> wow
20:43:49 <Korollary> "Candidates need to have the "ship it" gene in their DNA."
20:44:17 * Lemmih is amused by the space behavior of his program.
20:44:17 <dons> Korollary continues the unending job search :)
20:44:30 <Korollary> now the company can no longer claim that they are not discriminating
20:44:40 <dons> heh!
20:44:44 <Korollary> dons: Yeah. When are you graduating again ?
20:46:19 <dons> well, I already graduated once, but hopefully again in a couple of years
20:48:11 <Korollary> how old is c# ?
20:48:42 <dons> hmm. 6 years? maybe 5?
20:49:06 <Korollary> hmm. That's a bit sad actually heh
20:50:17 <Korollary> not that I have many java apps (eclipse) installed on this winxp laptop, but I have nothing in c# afaik.
20:51:51 <Korollary> sf.net (ok, not the best metric, but anyway) lists: C# (2613 projects), Java (15708 projects), C++ (15985 projects)
20:51:55 <Lemmih> How many Haskell programs have you installed?
20:52:08 <Korollary> Lemmih: I have darcs on my linux box heh.
20:52:22 <Korollary> and yi !
20:52:37 <dons> @karma+ Korollary
20:52:37 <lambdabot> Korollary's karma raised to 1.
20:52:51 <Korollary> does yi build on cygwin ?
20:53:40 <dons> I think I have heard of this being done, though it probably needs a bit of encouragement
20:54:19 <Korollary> nicely put. a candidate for weaselwords.com.au
20:54:57 <Korollary> sf.net lists: Haskell (30 projects), OCaml (Objective Caml) (40 projects)
20:55:17 <Korollary> I dont know why they felt the need to explain what ocaml stands for.
20:55:50 <Korollary> I have mldonkey on my linux box, so I guess I have a caml app installed.
20:57:00 <dons> that's a depressing number of Java projects
20:57:40 <Korollary> depressingly high ?
20:58:22 <dons> yeah. we could have cured world hunger with that amound of effort  ;)
20:59:09 <lispy_> heh
20:59:15 <Korollary> nah, I think it should be quite a bit higher than C++'s. Why do so many people need to use C++ ?
20:59:48 <lispy_> java has some pretty terrible performance charateristics
20:59:58 <dons> that's 15,000 apps and the only one people use is eclipse
21:00:34 <lispy_> i have a chat application for work that is written in java and i have to restart it every morning to free up 100mb of ram
21:00:41 <Korollary> ugh
21:01:21 <wagle> awww..  tcl/tk code objects aren't closures..  ;-/
21:01:34 <lispy_> at a different company i worked at the bug tracking software was written in java and it required something insane like 256mb just to show you the login screen
21:02:12 <Korollary> that sounds a bit like programmer error to me.
21:02:24 <lispy_> fair enough
21:02:37 <threeve> written by JBoss no doubt
21:02:38 <lispy_> but it's common none the less
21:03:05 <threeve> our bug tracking software is written using EJB :-P
21:03:21 <lispy_> one of the things that enamored me to haskell was running top and seeing that my lisp programs were using up more ram :)
21:03:24 <Korollary> I guess these employers who are looking for "java gurus" are not likely to find many of these...
21:03:27 <sh10151> is there a real use case for EJB?
21:04:35 <threeve> sh10151: you could say there are some use cases for it (distributed transactions, blah blah).  but really it was a solution before there was a problem...
21:04:55 <lispy_> Korollary: well, there are great programmers in every language.  I think it's sort of like anything that gets popular, you have a lot of mediocrity to deal with.
21:05:32 <Korollary> I must admit. Java related technologies make a great acronym soup on one's resume. Yum.
21:05:47 <lispy_> I think the JVM is by far the most interesting aspect of java.  And yet, I hate that it is so slow and painful to use.
21:06:13 <Korollary> lispy_: then, screw jvm. Join the parrot movement, or something.
21:06:22 <lispy_> parrot?
21:06:40 <Korollary> the new perl6 vm
21:06:51 <lispy_> heh, i hate perl
21:06:58 <Korollary> people are trying to have python target parrot, too
21:07:37 <lispy_> does parrot allow insecure code to be checked?
21:07:49 <Korollary> I don't know the details
21:08:05 <lispy_> i guess the phrase is 'untrusted' not 'insecure'
21:08:22 <threeve> isn't parrot development stalled or at least moving rather slowly?
21:08:23 <Korollary> lol
21:08:35 <lispy_> i finally got NeHe lesson 6 working if anyone wants to se the code
21:08:58 <dons> Korollary, if you do want to try to build yi with cygwin, I'll help out. it would be nice to see what the current state is
21:09:20 <threeve> lispy_: I'd like to see it.  I'm still working out how to do the rotating stuff in lesson 4.  I don't understand how variables are supposed to work in Haskell yet...
21:09:20 <lispy_> although, i should somehow check the endianess so that this code will produce the correct results on x86
21:09:29 <Korollary> dons: is it ok if my cygwin is a bit (circa 7 months) out of date ?
21:09:43 <lispy_> threeve: i used lesson 04 as an excuse to play with IORefs
21:09:52 <dons> I have no idea. my guess: doesn't matter
21:10:06 * Korollary checks his encouragement-meter
21:10:07 <lispy_> threeve: what do you have so far?
21:10:14 <threeve> lispy_: yea, I'm trying to figure those out right now.  stopped working on OpenGL to work through the tutorial a bit more
21:10:24 <dons> threeve, "variables in haskell don't vary" ;)
21:10:31 <lispy_> threeve: okay, well if you have any question, let me know
21:10:35 <Korollary> heh
21:10:42 <lispy_> threeve: it will be easier to heckle you....
21:10:44 <threeve> dons: Yea, i figured that out when i did x = x + 1 and got an infinite loop :)
21:10:55 <lispy_> @eval let x = x +1 in x
21:10:57 <lambdabot> runplugs: <<loop>>
21:10:57 <lambdabot>  
21:12:13 <SamB> a not-so-infinite loop, even!
21:12:30 <lispy_> i wish hopengl was a bit more consistent internally as well as explaining how it matches up with the normal opengl api
21:12:31 <Cale> Well, lambda-bound variables vary from the outside. In (\x -> x + 1), various values for x may be plugged in.
21:13:17 <dons> right, so the old slogan is misleading really
21:13:20 <lispy_> there is also a lot of hopengl examples that are from older api versions
21:13:48 * lispy_ can't speak english
21:14:41 <Pseudonym> I realise this is a bit late in the conversation, but I'm seriously considering liking Perl again just to hack on Pugs.
21:15:51 <wagle> Pseudonym: sacrilege!
21:16:13 * wagle then jumps riught back out
21:16:33 <Pseudonym> You've got to admit: Pugs is very cool.
21:16:50 <Korollary> Pseudonym: Yeah I checked out Perl6 just because of Pugs. I still cannot stand it, tho.
21:17:01 <wagle> i liked perl4..  perl5 is ummm..  perl6 sounds interesting, maybe
21:17:43 <wagle> i just wanted perl4 with nested data structures
21:18:14 <wagle> (sysadmin programming..  want strings, brevity, access to all of the unix functions, etc)
21:18:51 <wagle> large bash scripts are much nastier than large perl scripts
21:18:57 <lispy_> the differences between the real opengl api and the hopengl api for texture mapping are very confusing
21:20:15 <SamB> perl6 sounds interesting, maybe, if I had unicode in emacs and a lot of spare time...
21:21:10 <wagle> yarrrggghhh..  macosx 10.4 broke the wheel mouse in X11
21:23:53 <dons> @seen TheHunter
21:23:54 <lambdabot> TheHunter is in #haskell. Last spoke 6 hours, 16 minutes and 6
21:23:54 <lambdabot> seconds ago.
21:23:56 <threeve> oh sweet, i got the rotating to work...
21:26:11 <Korollary> dons: I am upgrading cygwin. Do I need libiconv ?
21:30:05 <lispy_> Korollary: yi doesn't use iconv anymore
21:30:09 <dons> not any more
21:30:19 <Korollary> ok
21:30:38 <lispy_> it's only 21:30 here, but i'm all tired out...
21:30:47 <lispy_> i may have to go to bed super early
21:33:23 <lispy_> someone created a program called IMHO
21:33:34 <lispy_> it's so confusing no hear people talk about it :)
21:34:23 <interferon> lispy_: what does it do?
21:35:10 <Korollary> it must be some kind of consulting program. gives useless advice.
21:35:35 <lispy_> interferon: no, clue, i'm just on an ml where people talked about it :)
21:35:49 <lispy_> i think it's a web something or another written in lisp
23:17:18 <blackdog> afternoon, everyone...
23:17:35 <blackdog> or time-of-day-of-choice, i guess
23:18:37 <Pseudonym> It's afternoon.  You were right.
23:54:46 * dons deletes code until his function works
23:54:54 * boegel waves at Itkovian
23:55:28 <Itkovian> hehe
23:57:24 <dons> lambdabot is losing its powersupply for the next 16 hours or so.
23:57:41 <dons> TheHunter, maybe you can host thbot for that time?
23:58:24 <boegel> dons: how come ? machine trouble ?
23:58:41 <dons> nah, they're shutting down the entire building that lambdabot lives in
23:59:26 <boegel> that's horrible ! :p
23:59:44 <dons> comes back up 9am tomorrow morning .au EST time, but till then lambdabot will have to run somewhere else
