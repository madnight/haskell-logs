00:01:05 <vikasg> wow, if I use the list monad I don't need to write 'amb' at all
00:01:36 <Lor> The list monad is just not a very efficient implementation of nondeterminism.
00:01:52 <vikasg> how so?
00:02:16 <dblhelix> backtracking
00:02:24 <vikasg> won't laziness automatically ensure that?
00:04:28 <Lor> Laziness doesn't remove the inefficiency of ++
00:06:19 <boegel> hey autrijus
00:09:38 <sieni> lor: could you elaborate?
00:10:10 <lispy_> http://sourceforge.net/search/?type=soft&exact=0&q=quake3&offset=25  <-- notice anything funny about my search terms vs. "the web search results" at the bottom of the page?
00:11:20 * boegel doesn't see any web search results
00:11:27 <lispy_> at the very bottom
00:11:44 <boegel> err, no ?
00:11:47 <lispy_> oh, well the funny thing is that all the search results include "Null"
00:12:07 <lispy_> so i think a bug in sf.net searched for null instead of my search term (quake3)
00:12:28 <boegel> heh :)
00:12:56 <boegel> if srch_str = "quake3" then srch_str = "null"
00:13:03 <boegel> something like that ? :p
00:13:04 <lispy_> it's the last page of the search results, i bet they are off by one
00:13:17 <lispy_> heh, that could be
00:13:57 * lispy_ falls asleep
00:14:00 <lispy_> good night!
00:15:11 <Lor> sieni, the time required is still linear to the length of the left operand, although the time is distributed evenly to each cell of the resulting list.
00:15:36 <Lor> So if you just take the head of the list, then it is faster than with a strict append, but traversing the entire list is not.
00:15:38 <boegel> g'night lispy_
00:15:52 <boegel> a bit strange though, that you're going to bed when I start working :)
00:16:04 <tuomov> couldn't deforestation help when  you're just processing the entries?
00:16:33 * dblhelix is off the dgp2005
00:17:43 <Lor> I'm not sure if deforestation (alone) can change an algorithm's complexity.
00:18:29 <tuomov> when you want to do, after all, is process list1 first and list2 then, so it should be possible to optimise ++ out
00:18:35 <tuomov> s/when/what/
00:19:42 <tuomov> otoh, ++ does not add to complexity in such a case
00:20:01 <Lor> Of course that only works if you only traverse the list once. A reasonable assumption in the case of the list monad for nondeterminism, but not in general.
00:20:20 <tuomov> of course
00:29:24 <tic_> Hey guys. I have a problem with type derivations...
00:29:29 <tic_> (lambda-calculus)
00:29:40 <tic_> I have a couple of type derivation rules, and an expression I want to show has a certain type
00:30:21 <tic_> but I don't know if I should start with the rules and work my way down to the expression (top -> bottom), or if I should start with the expression I have and break it down into smaller parts until I get to the typing rules (bottom -> up)
00:30:43 <Lor> The latter one.
00:31:51 <Lor> Those names are confusing, btw, and only because proof trees are written as "real" trees (root low, branches high), whereas usually trees are written root up, branches down. Usually "top-down" means "from root to branches" and vice versa for bottom-up.
00:34:06 <tic_> Yeah, Iknow.
00:34:20 <tic_> Okay, that probably makes the most sense.
00:34:50 <tic_> so maybe I need a scratch paper to do the type derivations on, because I don't know where to start on the paper as it grows up instead of down. ;)
00:34:52 <tic_> Thanks a bunch!
00:38:10 <Lor> Often typing rules are syntax-directed: the form of the outermost expression determines uniquely the typing rule to use.
00:38:52 <tic_> lor, outermost in the case of \x.x+1 : int -> int  would be...?
00:38:54 <Lor> (Except for structural rules such as weakening and exchange, if the environments are represented as lists)
00:39:02 <Lor> tic, lambda
00:39:08 <Lor> (not plus)
00:39:37 <tic_> lor, (x+1)[arg/x] for the app, that is?
00:40:07 <Lor> That's the reduction rule for application. You are not interested in reductions right now, only the typing rules.
00:40:11 <tic_> What do you think is the easiest way, generally, to start doing type derivations?  I have a bit of a difficulty "seeing" what Ishould do.
00:40:38 <Lor> Do you have experience with writing logical proof trees in general?
00:40:45 <tic_> Yeah, but won't I be doing reductions to "get at" the curried(?) functions?
00:40:49 <tic_> No, not really :-/
00:41:09 <Lor> No, usually the typing rules and reduction rules are completely separate.
00:41:36 <Lor> There are usually only a couple of (very very important) theorems that show how they relate.
00:41:38 <tic_> Well, yes, but don't you have to somehow think of a reduction when you want to get, say, x+1?  Hrm..
00:42:00 <tic_> Yes, there are.  I have those.  And I have the type I want to show. Plus I have solutions, so I know what it should look like when finished.
00:42:02 <Lor> You are interested in _types_, not the results.
00:42:12 <tic_> what I do not know, is the best way to get there. :-/
00:42:14 <Lor> (If I understood correctly.)
00:42:16 <tic_> Yup.
00:42:52 <tic_> I feel so stupid. :-)  Not sure, but I think I'm going to have a "a-ha!"-experience, like when I understood b-reduction.
00:42:55 <Lor> You don't need to look at reduction rules at all (unless you are dealing with dependent types or suchlike stuff)
00:43:04 <tic_> No, not yet.
00:43:13 <tic_> (that's a later problem..)
00:44:12 * boegel thinks Lor and tic_ should get a room :p
00:44:21 <tic_> Okay, I'll have a look at the stuff again. Thanks Lor!
00:44:28 <tic_> boegel, bah. :-)
00:44:39 <tic_> We're all newbies in the beginning...
00:44:48 <tic_> err, children
00:45:04 <Lor> There is (most likely) a typing rule for lambda, with a single premiss: the type of the body of the lambda in a typing context that is extended with the parameter of the lambda.
00:45:48 <Lor> Ah, sorry. You are doing type inference?
00:45:52 <tic_> Yes
00:46:06 <Lor> Since there was no type for x in \x.x+1
00:46:41 <Lor> Was that right? It's not \x:int.x+1 ?
00:46:54 <xerox> Good morning.
00:47:04 <tic_> Nope, the expression is |- \x.x+1 : int -> int
00:47:27 <vikasg> morning, xerox
00:48:00 <Lor> That's a typing judgement. The _expression_ is \x.x+1
00:48:03 <tic_> Lor, and I'm supposed to show that, by infering the types.  I can _see_ that it must be so, and I have rules for plus, lam, var, app and int. (don't need app).  So it's more a question of I start doing that.
00:48:05 <tic_> err, right.
00:48:46 <tic_> of -how- I start.. bleh, can't type today.  I'll start massaging the expression and see.  *afk*
00:55:05 <Thu12331> morning
00:55:29 <Thu12331> uhm...what does it mean when my app crashes with "<<loop>>"
00:55:32 <Thu12331> i've never seen this
00:56:56 <xerox> @plugs let f = f f in f
00:56:59 <lambdabot> 26:
00:56:59 <lambdabot>   Occurs check: cannot construct the infinite type: t = t1 ->
00:56:59 <lambdabot> t
00:56:59 <lambdabot>   Expected type: t1 -> t
00:56:59 <lambdabot>   Inferred type: t
00:57:01 <lambdabot>   Probable cause: `f' is applied to too many arguments in the call (
00:57:01 <xerox> heh
00:57:03 <lambdabot> f f)
00:57:05 <lambdabot>   In the definition of `f': f = f f
00:57:09 <xerox> @plugs let f = f f in f f
00:57:10 <lambdabot> 26:
00:57:10 <lambdabot>   Occurs check: cannot construct the infinite type: t = t1 ->
00:57:10 <lambdabot> t
00:57:13 <lambdabot>   Expected type: t1 -> t
00:57:14 <lambdabot>   Inferred type: t
00:57:16 <lambdabot>   Probable cause: `f' is applied to too many arguments in the call (
00:57:19 <lambdabot> f f)
00:57:21 <lambdabot>   In the definition of `f': f = f f
00:57:23 <xerox> @plugs let f = f in f
00:57:24 <lambdabot> <Plugins.Eval>:1:12:
00:57:24 <lambdabot>   Ambiguous type variable `a' in the constraint:
00:57:27 <lambdabot>   `Show a' arising from use of `show'
00:57:30 <xerox> pffff.
00:57:52 <xerox> Thu12331: you got an infinite loop, prolly
00:58:40 <tic_> Lor, I think I understand now!  the judgement |-\x.x+1:int->int __is__in fact the LAM type rule, so I just need to continue from there!
00:58:52 <Thu12331> hmmm
00:58:53 <Thu12331> weird
01:01:04 <xerox> let f _ = f () in f ()
01:01:09 <xerox> @plugs let f _ = f () in f ()
01:01:11 <lambdabot> <Plugins.Eval>:1:12:
01:01:11 <lambdabot>   Ambiguous type variable `a' in the constraint:
01:01:11 <lambdabot>   `Show a' arising from use of `show'
01:01:16 <xerox> Not my day.
01:03:18 <Thu12331> crap, this is going to be pretty nasty to debug
01:03:32 <xerox> Complex code?
01:03:42 <Thu12331> lots of attribute grammars
01:03:48 <Thu12331> hehe
01:03:54 <xerox> :-)
01:05:52 <boegel> hey Thu12331
01:06:14 <boegel> Thu12331: do you have a brother or someting, I saw Thu32145 passing here last week
01:06:26 <boegel> hey Muad_Dibber
01:06:51 <boegel> yo xerox, any new cool picks ?
01:07:11 <xerox> boegel: some good sleep until now, then synch with cairo 1.0 just released :)
01:07:24 <boegel> xerox: yaay !
01:08:53 <Muad_Dibber> hey boegel
01:08:54 <Muad_Dibber> sup?
01:13:06 <Itkovian> meuning
01:13:45 <Muad_Dibber> hiephoi Itkovian
01:13:57 <Itkovian> it is a rainy day, I need a quick 'n dirty Parsec tutorial, I need a kaffe VM that runs some proprietary java shit and I'm hungry.
01:14:19 <Itkovian> dons: hi, got the mail?
01:14:36 <xerox> Itkovian: the one on the site is pretty nice, I think.
01:16:52 <Thu12331> who is this boegel figure talking to me....is he new here?
01:17:03 <Thu12331> boegel, are you going to give haskell a try?
01:17:08 <xerox> haha.
01:18:24 <boegel> Thu12331: oh not again :)
01:18:31 <boegel> Itkovian: y0, bored yet ? :p
01:19:43 * boegel just finished the first draft of his project proposal, and is keen to know what his supervisor thinks about it
01:20:44 <Muad_Dibber> boegel: what kinda project now if i may ask?
01:20:55 <boegel> Muad_Dibber: my Phd project
01:21:05 <Muad_Dibber> yer
01:21:11 <Muad_Dibber> in what area will it be?
01:21:38 <boegel> Muad_Dibber: performance estimation of programs (without having the hardware at your disposal)
01:22:33 <Thu12331> hey lol, i get a mail from dons to the mailinglist forwarded :D
01:22:41 <Thu12331> i really should just read the mailinglist itself hehe
01:22:48 <Muad_Dibber> boegel: sounds very usefull
01:22:58 <Muad_Dibber> that is, if you can do some good estimation that is
01:23:03 <Thu12331> apparantly the person forwarding it to me, without asking, kind of assumed i didnt read the mailinglist
01:23:38 <boegel> Muad_Dibber: that's the goal :)
01:24:27 <Muad_Dibber> boegel: seeing your raytracer you ain't dumb so ;)
01:24:55 <boegel> Muad_Dibber: writing a raytracer ain't that hard, really
01:25:07 <boegel> and I worked on it for a whole year, so hey :)
01:28:46 <Muad_Dibber> pfft @ you
01:28:54 <boegel> pfft ? :s
01:29:01 <Muad_Dibber> yeah
01:29:08 <Muad_Dibber> i try to be positive, and give you some confidence :P
01:29:41 <boegel> Muad_Dibber: well, yeah, thanks for that, but if you'd try raytracing yourself, you'd see it's quite simple really
01:30:16 <vikasg> boegel, that's how you feel after writing a program :)
01:30:55 <boegel> vikasg: hmm, you do haze a point there :) but I'm just saying, somebody really smart could've realised a lot more than I have
01:31:10 <boegel> yo ski
01:32:01 <boegel> I mean, how cool is this ! http://www.vidimce.org/publications/lpics/
01:32:42 <Itkovian> ok, I need suggestions. we need to determine when a device goes out of range, with either bluetooth or WiFi, however, the pda is unable to use both bluetooth and WiFi simultaneoulsy. So. Do you know of any libs that allow something like that (language is irrelevant).
01:33:32 <ski> hi boegel
01:35:19 <vikasg> I have a state accumulating factorial defined as facS :: State (Integer, Integer) ()
01:35:50 <vikasg> now if I want to add an output statement in the middle of it, is the type I need StateT (Integer, Integer) IO () ?
01:36:28 * ski thinks so
01:38:30 * xerox too
01:40:26 <Itkovian> dcoutts: ping
01:41:07 <boegel> @seen dcoutts
01:41:08 <lambdabot> dcoutts is in #haskell. Last spoke 9 hours, 1 minute and 14 seconds
01:41:08 <lambdabot> ago.
01:41:18 <boegel> Itkovian: I guess he's sleeping :)
01:41:28 <Itkovian> sleep? what's that?
01:41:48 <boegel> the state you're in when you've had too many beers
01:42:43 <shapr> @yow !
01:42:44 <lambdabot> Sometime in 1993 NANCY SINATRA will lead a BLOODLESS COUP on GUAM!!
01:43:00 <shapr> Neat, lambdabot predicts the past with complete accuracy.
01:43:17 <boegel> shapr: y0 :)
01:43:34 <shapr> y0 wassup?
01:44:12 <ski> @arr
01:44:13 <lambdabot> I'd like to drop me anchor in her lagoon
01:44:44 <shapr>  @arr
01:45:20 <shapr> taciturn pirate, he is
01:45:43 <boegel> shapr: FLM ? I'm almost afraid to ask
01:45:51 <ski> did we settle on the issue of possible gender of lambdabot ?
01:45:58 <boegel> ski: female !
01:46:03 <shapr> Man, I'm moving to another city and trying to get into university...
01:46:22 <ski> shapr : moving where ?
01:46:30 <shapr> Moving to Luleå
01:46:35 <ski> aha
01:47:17 <boegel> shapr: uni ! w00 !
01:47:29 <shapr> Yeah, I'll get to do real computer science!
01:47:32 <ski> multi
01:48:00 <shapr> I went to see an academic advisor yesterday. She didn't know of any type theory club :-)
01:48:31 <boegel> shapr: heh :)
01:48:45 <ski> (shapr : at all ? or nearby ?)
01:49:39 <shapr> She didn't know of any type theory clubs. She said I should check studentlivs(?).
01:49:58 * ski wonders what that might be
01:50:17 <ski> .. sounds like a supermarket for students
01:50:24 <shapr> heh!
01:50:33 <shapr> I thought it meant something like "student essentials"
01:51:22 <ski> ('livs' being short (i think) for 'livsmedel' i.e. 'provisions')
01:51:37 <shapr> I was hoping I could buy a student or two.
01:51:40 <tic_> yes, that's correct.
01:53:14 <ski> @seen esap
01:53:15 <lambdabot> I saw esap leaving #haskell 27 days, 7 hours, 35 minutes and 10
01:53:15 <lambdabot> seconds ago, and I have missed 9 days, 9 hours, 7 minutes and 22
01:53:15 <lambdabot> seconds since then.
01:53:21 <ski> bah
01:53:59 <dons> Itkovian, got your mail. got caught up cabalising today though, so i haven't had a chance to hack h4sh in light of your findings
01:57:31 <Itkovian> dons: np.
02:00:29 <dons> Thu12331, yes, you should read the mailing lists! ;)
02:00:59 <Thu12331> why doesnt my app give some trace...just plain <<loop>> aint helping at all
02:02:25 <dons> you can debug <<loop>> with profiling on, iirc
02:02:46 <dons> ('cause then you get a trace)
02:02:52 <Thu12331> reallu?
02:02:53 <Thu12331> y
02:03:05 <Thu12331> just do -prof and im homefree?
02:03:45 <dons> i think so, roughly. i'd have to check. can't hurt though...
02:05:38 <Thu12331> that would be so sweet, cause right know...with all those attributes defined in terms of others and lazyness.....its VERY hard to trace back the <<loop>>
02:10:21 <dons> @eval let f () = f () in f () :: ()
02:10:31 <dons> wake up lambdabot!
02:10:35 <lambdabot> Terminated
02:10:43 <dons> @eval let f = f in f :: ()
02:10:46 <lambdabot> Loop
02:10:50 <dons> loops for all!
02:12:26 <xerox> !!!
02:13:17 <boegel> @eval [0..]
02:13:19 <lambdabot> [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,
02:13:19 <lambdabot> 26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,
02:13:19 <lambdabot> 49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,
02:13:19 <lambdabot> 72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,
02:13:19 <lambdabot> 95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,
02:13:21 <lambdabot> 113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,
02:13:23 <boegel> yaay ! :p
02:13:23 <lambdabot> 130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,
02:13:25 <lambdabot> [24 @more lines]
02:13:31 <boegel> only 24 ? :)
02:14:11 <sieni> :-)
02:14:24 <xerox> at time :)
02:14:32 <sieni> what is the haskell equivalent of ((call/cc call/cc) (call/cc call/cc))
02:14:34 <sieni> :-)
02:16:06 <ski> (sieni : haskell has no continuation side-effects)
02:17:24 <ski> (as for self-application .. (\x -> x x) (\x -> x x)  is ill-typed, but one can get rougly that with an auxilary type)
02:18:13 <xerox> (why do you talk between parenthesis?)
02:18:28 <vikasg> how do I use a (State s a) computation inside a (StateT s IO a) computation?
02:18:40 <xerox> vikasg: liftIO $ computation
02:19:20 <vikasg> so liftIO "lifts" a monad into the IO monad?
02:19:21 <ski> xerox : hum .. not fully sure .. maybe cause it's morning ?
02:19:56 * Beelsebob farts
02:19:57 <xerox> vikasg: hmm it's the opposite, lifts the IO action in the stacked monad.
02:20:07 <ski> liftIO lifts a monadic action in the IO monad into a monadic action in some monad
02:20:08 <xerox> Or "transformer monad"
02:20:10 <dons> Thu12331, did you try -prof -auto-all? seems to provide reasonable information
02:20:15 <xerox> *transformed
02:20:33 <xerox> ski: you're the terminology guy, how are they called? :-)
02:20:44 <ski> um, which ?
02:20:45 * boegel faints when Beelsebob's fart smashes him right in the face
02:20:52 <vikasg> xerox, yes, I need something :: m a -> IO a
02:21:05 <xerox> vikasg: uhm.
02:21:14 <ski> xerox : do you mean 'monad transformer' ?
02:21:28 <xerox> ski: I mean the complete StateT thing
02:21:39 <xerox> vikasg: don't you need :: IO a -> StateT .. ?
02:22:05 <vikasg> hah! I put an extra return and solved
02:22:10 <ski> 'StateT s' is a monad transformer, yes
02:22:27 <xerox> ski: once a monad is transformed by that, how is the whole thing called?
02:22:53 <ski> xerox : dunno .. monad transformer stack, mayhaps ?
02:23:02 <xerox> Kay.
02:23:07 <ski> or, just (some new) 'monad'
02:23:14 <vikasg> xerox, I needed to use (a -> State s b) inside (a -> StateT s IO b)
02:23:31 <xerox> vikasg: I see, you had the solution, k.
02:23:32 <dons> Thu12331: tuba09$ ./a.out +RTS -p
02:23:32 <dons> 100000
02:23:32 <dons> 100000
02:23:32 <dons> 100000
02:23:33 <dons> a.out: <<loop>>
02:23:39 <ski> (hm, maybe 'transformed monad')
02:23:45 <xerox> ski: I like it :)
02:23:50 <dons> MAIN                     MAIN                                                   1           0   0.0    0.0     0.0  100.0
02:23:53 <dons>   i                      Main                                                 161           0   0.0    0.0     0.0    0.0
02:23:56 <dons>  CAF                     Main                                                 148           8   0.0    0.2     0.0
02:23:59 <dons> ...
02:24:04 <dons> Thu12331, so the <<loop>> function is at the top of the call graph
02:24:11 * xerox runs naked through the profiling output
02:24:20 <xerox> Oh, it finished too early :P
02:24:51 <Muad_Dibber> ah, we saw you xerox
02:24:59 <xerox> *^_^*
02:25:20 * boegel wonders how xerox became _so big_
02:25:30 <xerox> O_o ?
02:25:30 <wilx> Hehe.
02:25:43 * Muad_Dibber looks blankly at boegel
02:25:51 <xerox> Gee.
02:26:03 <xerox> It's because of my karma, mainly
02:26:06 <xerox> @karma xerox
02:26:07 <lambdabot> You have a karma of 49
02:26:44 <wilx> @karma wilx
02:26:45 <lambdabot> You have a karma of 0
02:26:53 <dons> so, a little song: "if you have a <<loop>>, then you musn't fear! use -prof -auto-all and go and have a beer!"
02:26:54 * ski wonders how xerox got so high
02:27:14 <xerox> ski: I was 7 or 9 dunno, then SOMEONE start playing with karma..
02:27:25 * xerox points at boegel which should be embarassed
02:27:27 * boegel whistles
02:29:58 <boegel> @karma xerox
02:29:59 <lambdabot> xerox has a karma of 7
02:30:08 * xerox feels shacked
02:30:30 <Beelsebob> is that when a shack falls on you?
02:30:35 <xerox> @karma dons
02:30:36 <lambdabot> dons has a karma of 12
02:30:57 <boegel> @karma boegel
02:30:58 <lambdabot> You have a karma of -1
02:31:02 <xerox> Bad boy!
02:31:04 <Heffalump> @karma
02:31:04 <Beelsebob> haha
02:31:05 <lambdabot> I can't find the karma of nobody.
02:31:08 <Heffalump> hmph!
02:31:09 <boegel> I should just go and kill myself, shouldn't I :)
02:31:15 <Beelsebob> I suspect my karma is 0
02:31:20 <Heffalump> I'm not nobody, I'm a very important Heffalump.
02:31:21 <xerox> @karma lambdabot
02:31:23 <lambdabot> lambdabot has a karma of 3
02:31:29 <Beelsebob> @karma beelsebob
02:31:30 <lambdabot> beelsebob has a karma of 0
02:31:34 <Beelsebob> booring
02:31:36 <xerox> @karma Heffalump
02:31:37 <lambdabot> Heffalump has a karma of 0
02:32:05 <dons> maybe all past lambdabot developers should automatically get some karma points..
02:32:41 <Heffalump> oh, right.
02:37:08 <shrimpx_> does karma do anything?
02:37:08 <Itkovian> @seen dcoutts
02:37:09 <lambdabot> dcoutts is in #haskell. Last spoke 9 hours, 57 minutes and 16
02:37:09 <lambdabot> seconds ago.
02:37:58 <ski> shrimpx_ : not that i know of
02:40:09 <boegel> @quote Itkovian
02:40:10 <lambdabot>  "real programmers don't write docs, if it was hard to write, it
02:40:10 <lambdabot> should be hard to understand"
02:40:19 <Itkovian> not again
02:40:23 <boegel> :D
02:40:37 <ski> @quote quiche
02:40:38 <lambdabot> quiche hasn't said anything memorable
02:40:53 <earthy> @quote Itkovian
02:40:53 <lambdabot>  "real programmers don't write docs, if it was hard to write, it
02:40:53 <lambdabot> should be hard to understand"
02:40:58 <earthy> is that the only quote?
02:41:00 <earthy> pity. ;)
02:41:02 <boegel> ooh, almost lunchtime !
02:41:07 <Itkovian> true
02:41:12 <boegel> earthy: you can add quotes you know ? :)
02:41:22 <boegel> @quote boegel
02:41:23 <lambdabot>  "* boegel feels childish now"
02:41:25 <boegel> :(
02:41:29 <Itkovian> I will have sandwiches with salmon and one with cheese and ham
02:41:29 <boegel> @quote boegel
02:41:30 <lambdabot>  "* boegel feels childish now"
02:41:48 <ski> indeed
02:41:52 * boegel hasn't decided yet
02:42:21 <Itkovian> if anybody sees dcoutts while I am feeding my intestines with work, tell him I've got a happy parser, but I'll redo the lot in Parsec, seems easier to alter when the need arises
02:42:39 <wilx> @quote
02:42:40 <lambdabot> kzm says: My program contains a bug.  How ungrateful, after all I've
02:42:40 <lambdabot> done for it.
02:42:46 <wilx> @quote
02:42:48 <lambdabot> <basti_> says: "Snow doeth lay upon the lands. Even with cunning
02:42:48 <lambdabot> newtype; deriving the newtype is recursive. Great leaders brings
02:42:48 <lambdabot> less pain."
02:44:59 <boegel> Itkovian: you'll redo the whole thing , :D
02:45:07 <Itkovian> uf curse
02:45:20 <Itkovian> but not immediately, eh
02:45:27 <boegel> tssk, Happy works fine if you ask me
02:45:30 <Thu12331> i think im going to have a problem quoting and finding my quotes again
02:45:31 <Thu12331> hehe
02:47:24 <xerox> dons, lil lambdabot patch :)
02:47:49 <boegel> Thu12331: how come ? :p
02:48:26 <owtput> is haskel reserved for math majors?
02:48:51 <owtput> from the faqs I've read, it appears that haskell is synonimous with higher-level math
02:48:59 <xerox> owtput: not at all
02:49:07 <wilx> But it helps a lot :)
02:49:15 <wilx> ...I guess.
02:49:21 <boegel> owtput: bull ! I don't know a lot of math, and I manage (a bit)
02:49:35 <xerox> owtput: on the haskell.org homepage is defined as a general purpose pure functional language.
02:49:35 <boegel> owtput: http://scannedinavian.org/~boegel/HRay/
02:49:50 <wilx> ecchi ray.
02:51:04 <owtput> alright
02:51:24 <boegel> wilx: ecchi ?
02:51:29 <dons> xerox thanks
02:51:34 <xerox> dons: np :)
02:53:23 <Oeje1> wilx: A math back ground helps a lot even when programming assembler.  Take The Art of Computer Programming as an example.
02:54:14 <wilx> Well, people are usually not doing/using high level abstraction in assembler.
02:57:52 * boegel leaves for dinner and some shopping
02:58:26 <boegel> s/dinner/lunch (argh)
02:58:37 <Itkovian> ah lunch has arrived.
03:02:16 <pejo> owtput, and imperative languages are somewhat related to Turing machines. Probably something most people would consider 'higher-level math' too.
03:08:37 * Itkovian waits for the call to go to eat
03:09:28 <owtput> :)
03:19:18 <dcoutts> Itkovian, re: parser. Sounds great.
04:02:06 <Itkovian> dcoutts: want me to mail it?
04:16:37 <xerox> http://cell.scei.co.jp/index_e.html
04:24:52 <dcoutts> Itkovian, yeah, sure
04:26:18 <dcoutts> Itkovian, does it include an example of what the syntax looks like?
04:28:04 <Thu12331> earthy, is it possible/wise to 'strive for/try to accomplish' separate compilation for ag files?
04:28:49 <Thu12331> because i get the feeling the system is more or less pushing you in the direction of having one big ass ag file that is turned into one even bigger ass .hs file
04:30:45 <Thu12331> btw if kosmikus or anyone else knowing uuag can help with his/her opinion about this...please share :D
04:32:42 <boegel> Itkovian: I don't think so, but that shouldn't be too hard I think
04:32:55 <boegel> xerox: neat
04:34:43 <xerox> haha, my lil brother completed the rubik's cube
04:35:05 <xerox> It took 3 days :)
04:35:09 <boegel> xerox: how little is little?
04:35:11 <ski> heh
04:35:16 <xerox> 14 yo
04:35:25 * xerox is trying now :P
04:36:00 <boegel> damn: nice work
04:36:16 * ski can sometimes solve it (forgotten one of seven rules)
04:40:53 <xerox> I'd better code :-P
04:41:10 <vikasg> xerox, write a program to solve it :)
04:41:37 <shapr> Man, I want access via Haskell to my Palm information, ToDo list, calendar, etc.
04:42:22 <ski> (maybe a job for yi ?)
04:42:26 <shapr> Hm, good idea.
04:42:56 <shapr> I just want something like ADTs or records for the data, then I can write code to do whatever I want.
04:43:25 <shapr> Maybe this is a job for SerTH? Can I specify a mapping from C structs to ADTs?
04:43:31 <shapr> I want ReadBinary ShowBinary I guess.
04:44:49 <dcoutts> Thu12331, kosmikus is mostly unavailable for the next few days
04:44:58 <Thu12331> dcoutts, ow, he's in bonn also
04:45:01 <Thu12331> i forgot
04:45:27 <Thu12331> he's not associated with UU anymore is he?
04:46:16 <shapr> sbeyer: That was quick.
04:46:18 <dcoutts> Thu12331, well he still has contacts, and I think he's on a trip to UU currently
04:46:44 * shapr throws lambdabots
04:47:01 * shapr sprains a muscle.
04:47:17 <shapr> The next version of lambdabot should use space-age plastics instead of cast iron.
04:47:22 <xerox> shapr: did you get Haskell on the Palm?
04:47:25 <sbeyer> shapr, of course ;)
04:47:28 <reppie-tan> how do dons' packed strings work?
04:47:52 <shapr> sbeyer: Using debian/unstable? I had no trouble going from xf86 to xorg on Debian/unstable.
04:47:58 <sbeyer> shapr, yes
04:48:11 <reppie-tan> i mean, how are they packed?
04:48:12 <shapr> xerox: Nah, I've been thoroughly distracted trying to reorganize my life.
04:48:32 <xerox> reppie-tan: 8bit chars
04:48:42 <shapr> They're also unboxed, right?
04:48:50 <xerox> data PackedString = PS !(ForeignPtr Word8) !Int !Int
04:48:57 <shapr> Yup
04:48:58 <sbeyer> shapr, the switching doesn't cause trouble, but on another machine xorg caused trouble in xinerama (and no-xinerama had the same bugs like XFree86)
04:48:59 <reppie-tan> yes, i got that much
04:49:15 <reppie-tan> but do they support all unicode characters
04:49:16 <shapr> xerox: What do the two Ints mean?
04:49:30 <sbeyer> shapr, so there I still use XFree86 ;) but here (on my laptop) I guess it's better to use xorg ;)
04:49:53 <shapr> I was trying to figure out part of FastPackedString and I had to figure out the two strict Int values, but I couldn't find any docs.
04:50:07 <dcoutts> shapr, I think thay are offset and length
04:50:12 <xerox> I don't understand the first, but the second is a lenght
04:50:16 <xerox> Offset, right.
04:50:18 <shapr> offset from what?
04:50:20 <dcoutts> shapr, to support substrings, slices
04:50:33 <xerox> From the start of the string
04:50:54 <shapr> Does that mean you get something vaguely like copy-on-write with FastPackedString?
04:51:05 <reppie-tan> how are the strings 'packed' ?
04:51:10 <dcoutts> shapr, so that way you can support substrings with zero-copy
04:51:11 <shapr> As in, substrings take up almost zero extra space unless the 'parent' string is GC'd?
04:51:17 <shapr> Excellent.
04:51:22 <xerox> reppie-tan: they're an array of bytes
04:51:32 <shapr> Hiya greenrd, how's code?
04:51:35 * boegel feels the urge to start coding a BiBTeX tool in Haskell
04:51:36 <xerox> reppie-tan: instead of a list (i.e. car and cdr)
04:51:47 <reppie-tan> xerox so they don't support all unicode characters, do they?
04:51:55 <shapr> boegel: I'll send you FLM source and you can tell me what you think?
04:52:05 <xerox> reppie-tan: the doc says so, you'd better ask on #darcs I think
04:52:06 <boegel> shapr: hmm, kay
04:52:09 <greenrd> shapr: Good :) Wrote my first code in Epigram last night, and started an Epigram wiki to note what I learn
04:52:21 <shapr> greenrd: Excellent, was it easier than you thought?
04:52:22 <boegel> but then I should install ghc and the lot on my machine, 'cause it's not on here yet I think :)
04:52:30 <shapr> boegel: Heresy!
04:52:33 <dcoutts> shapr, but it does mean that the whole memory block is kept until the last string pointing into it is GC'd
04:52:34 <greenrd> shapr: Yes
04:52:45 <boegel> shapr: I've been busy :) and I still am actually
04:52:48 <dcoutts> shapr, but that's usually ok for mmap'ed files etc
04:52:48 <shapr> dcoutts: Why not lazy 'refactoring' ?
04:52:57 <boegel> but I don't want to compose BiBTeX entries by hand
04:53:00 <dcoutts> shapr, because it's hard to do! :-)
04:53:05 <shapr> Fair enough
04:53:06 <greenrd> shapr: http://epigram.pbwiki.com/index.php?wiki=FrontPage
04:53:45 <shapr> dcoutts: Wouldn't SGI's ropes be as good? http://www.sgi.com/tech/stl/Rope.html
04:54:05 <shapr> hej psi
04:54:08 <dcoutts> shapr, yeah, ideally you'd want a scheme where the strings are copied out if the usage ratio of the parent memory block passed below a threshold, but I imagine it's hard to implement
04:54:31 <psi> hey!
04:54:41 <shapr> I think ropes sort of do that already, though they're tuned for imperative usage rather than functional.
04:54:48 <boegel> wb Muad_Dibber
04:55:01 <boegel> shapr: if you mail it, pls mail it to me at work
04:55:03 <shapr> They're sort of like packed strings and ShowS
04:55:06 <shapr> boegel: Awright
04:56:21 <ski> "Ropes primarily target a more functional programming style."
04:56:44 <shapr> In that case, never mind.
04:56:52 <yeti> greenrd: "Teach category theory in 10 minutes." <= :o . i heard a 4hour lecture about the basics of category theory a few months ago (not at university, so not 4h/week but only once). and it was _very_ difficult. or is there a difference between mathematical category theory and category theory concerning programming?
04:56:59 <shapr> greenrd: That's nifty stuff.
04:57:04 <ski> (mayeb it's still valid .. it's still a "more" in there)
04:57:07 <greenrd> yeti: That was intended to be a joke.
04:57:19 <yeti> phew. okay.
04:57:24 <shapr> greenrd: Hey, my cool Epigram realization was that reopenable sheds could/would give you type-based refactoring.
04:57:40 <shapr> yeti: Have you seen William Ware's Category Theory intro?
04:57:51 * ski hasn't
04:57:55 <yeti> shapr: no
04:58:13 <shapr> er, William *Wake*
04:58:50 <ski> (hm .. is that the one with Lucid ?)
04:59:14 <shapr> It's the one with the printers and scanners comparison.
04:59:43 <yeti> shapr: is it on the web somewhere? can i google for it/do you have the URL?
05:00:31 <Narrenschiff> at the risk of sounding stupid, what's the preferred way of doing bitwise boolean operations on, say, an integer in Haskell?
05:00:41 <xerox> @docs Data.Bits
05:00:42 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/base/Data.Bits.html
05:00:47 <xerox> Maybe this?
05:01:05 <shapr> yeti: It was on the web, but I can't find it right now.
05:01:12 <Narrenschiff> that looks perfect!
05:01:18 <xerox> Narrenschiff: cool :-)
05:01:34 <ski> (shapr : hm, no, the one with lucid and intensional programming appears to be Wadge)
05:01:34 <greenrd> shapr: Could you give an example of how type-based refactoring could work?
05:03:24 <shapr> greenrd: Simplest would replace an Int value with a Double.
05:03:54 <shapr> Think about places where a value could change type 'all over the program' without any problems.
05:04:23 <ski> (shapr : the intro with the fables ?)
05:04:30 <shapr> With that sort of approach, the difference between ** and ^ in Haskell would be irritating.
05:04:46 <shapr> ski: Category Theory and Views of Documents (William Wake's thesis draft)
05:04:56 <shapr> But I can't find the document, I suspect he took it down.
05:05:22 <shapr> I emailed him and asked for a more detailed writeup, but he said he never ended up writing his thesis, so the draft was likely the best I'd ever get.
05:07:52 <greenrd> shapr: I could see renaming types (which is harmless). I could see changing the arg of a function from Int to Double, as long as the function wasn't dictated by a class.
05:08:07 <beelsebob> heh, ski, you forgotten the one to rotate 3 corners?
05:08:40 <shapr> greenrd: You know how refactoring browsers work?
05:09:07 <greenrd> shapr: I have used eclipse... is that an example of what you mean by a refactoring browser?
05:09:25 <ski> beelsebob : no, rotate three edges
05:09:33 <beelsebob> ah, okay
05:09:54 <beelsebob> chris: "shapr: greenrd: You know how refactoring browsers work?
05:09:54 <beelsebob> [13:08] greenrd: shapr: I have used eclipse... is that an example of what you mean by a refactoring browser?"
05:10:19 <shapr> beelsebob: EMISCHAN
05:10:25 <beelsebob> ?????
05:10:30 <shapr> Who's chriss?
05:10:39 <beelsebob> lucinda is
05:10:42 <shapr> Oh, I see.
05:10:42 <greenrd> shapr: But changing the type of a constructor in a data declaration wouldn't work, because if you "narrow" it you potentially break the callers, and if you "widen" it you potentially break the readers of that data structure
05:10:47 <Lucinda> hi
05:10:52 <Lucinda> Yeah I am Chris
05:11:07 <shapr> greenrd: Right, which is where things like Generic Haskell suddenly get interesting...
05:11:25 <shapr> hiya Chris, how's code?
05:11:35 <Lucinda> did someone want to know about refactoring browsers before?
05:11:42 <shapr> Oh I know about refactoring browsers!
05:11:45 <shapr> me me! pick me!
05:12:04 <greenrd> whoever.
05:12:09 <greenrd> I wanted to know.
05:12:10 <shapr> Lucinda: What do you think about using Epigram for type based refactoring?
05:12:26 <Lucinda> I have never used epigram
05:12:30 <shapr> So, who's Jared Updike?
05:12:32 <vikasg> lambdabot, hi
05:12:44 <shapr> lambdabot: Would you like to learn Haskell??
05:12:45 <Lucinda> but we are extending HaRe to include lots and lots of type based refactorings
05:12:51 <shapr> Ah, nifty!
05:13:11 <Lucinda> or rather I am extending HaRe
05:13:21 <greenrd> @hi
05:13:30 <dons> @version
05:13:31 <lambdabot> lambdabot 3p97, GHC 6.5 (OpenBSD i386)
05:13:31 <lambdabot> darcs get http://www.cse.unsw.edu.au/~dons/lambdabot
05:13:39 <beelsebob> @would you like to learn haskell?
05:13:40 <lambdabot> Unknown command, try @listcommands.
05:13:42 <beelsebob> *g*
05:13:42 <dons> mm. almost time for lambdabot 4
05:14:19 <Lucinda> shapr: What does Epigram do?
05:14:19 <xerox> :-)
05:14:21 <xerox> @karma
05:14:23 <lambdabot> You have a karma of 7
05:14:39 <shapr> Lucinda: Lotsa cool stuff.
05:14:42 <shapr> @where epigram
05:14:43 <lambdabot> http://sneezy.cs.nott.ac.uk/epigram/
05:14:46 <boegel> xerox: want more karma ? it can be arranged :p
05:14:49 <ski> Lucinda : what kind of type-based refactorings, more specifically ?
05:15:09 <xerox> boegel: I patched it to say the karma of the requester as Heffalump "asked" today :)
05:15:20 <shapr> @karma
05:15:20 <lambdabot> You have a karma of 0
05:15:22 <shapr> aww
05:15:38 <dons> boegel is a karma pusher
05:15:39 <xerox> @karma+ shapr -- you deserve it for some reason you know
05:15:40 <lambdabot> shapr's karma raised to 7.
05:15:43 <shapr> w00!
05:15:45 <shapr> err
05:15:46 <xerox> That was ..
05:15:48 <shapr> I see a bug.
05:15:50 <shapr> @karma
05:15:51 <lambdabot> You have a karma of 9
05:15:53 <shapr> wtf?
05:15:54 <psi> heh
05:15:55 <xerox> I see a boegel.
05:15:58 <xerox> :-P
05:16:10 <shapr> huh, wow.
05:16:29 <xerox> You passed me :(
05:16:31 * shapr boings happily.
05:16:36 <shapr> @karma+ xerox
05:16:37 <lambdabot> xerox's karma raised to 8.
05:16:43 * boegel didn't do shit this time
05:16:45 * xerox hugs shapr
05:17:06 * shapr hugs xerox 
05:17:09 <shapr> Yay code!
05:17:15 * boegel sees a lot of gay-love today
05:17:28 <dons> ski..
05:17:41 <Lucinda> Shapr: do you have any particular type based refactorings in mind?
05:17:51 <dons> I *really* think karma should only work in the main channel now
05:17:57 <shapr> Yeah, I agree.
05:18:01 <beelsebob> heh
05:18:03 <xerox> Indeed.
05:18:05 * shapr hugs boegel 
05:18:15 * beelsebob hugs shapr
05:18:16 <shapr> boegel: I think it's more that Americans like to give people hugs.
05:18:17 <xerox> dons: I didn't think of it, I would have tried patching it.
05:18:30 <dcoutts> dons, you mean it does now, or it would be better if it worked that way? (ie do you want us to test it?)
05:18:40 <dons> xerox, give it a shot, not quite sure how easy it is.
05:18:50 <greenrd> shapr: Americans? I was assuming it was a Continental thing.
05:18:58 <xerox> But later, or I would f*ck up with the deadline.
05:18:59 <dons> nah, haven't tried to patch it duncan.
05:19:08 <dcoutts> ok
05:19:09 <shapr> I don't know. I give people hugs if I like them.
05:20:01 * boegel only hugs his pillow (and my gf now an then :p)
05:20:13 <Itkovian> omg
05:20:24 <earthy> wow. busy all of a sudden.
05:20:26 <Itkovian> I'd say it more the other way around, but each to his own I guess
05:21:00 <Thu12331> ah earthy did you catch my question a while back? or professionally ignored it :P
05:21:01 <earthy> shapr, you meant http://www.xp123.com/wwake/dissertation/model.shtml ?
05:21:17 <boegel> hey, look, a new one :) welcome Thu12331 ^_^
05:21:31 <earthy> question?
05:21:35 <Thu12331> hmmmm what was that irc ignore option again
05:21:36 <Thu12331> :P
05:21:45 <boegel>  /ignore ?
05:22:05 <dons> boegel tempts fate... ;)
05:22:06 <Thu12331> earthy, is it possible/wise to 'strive for/try to accomplish' separate compilation for ag files? because i get the feeling the system is more or less pushing you in the direction of having one big ass ag file that is turned into one even bigger ass .hs file
05:22:12 <earthy> I saw
05:22:14 <earthy> just now
05:22:26 <earthy> um, AG was never designed with separate compilation in mind
05:22:30 <boegel> dons: I don't give a shit actually :) I'm just trying to help out the new guy :D
05:22:37 <earthy> conceptually, you build up one huge attribute grammar
05:22:56 <earthy> though in practice it may come in handy to distribute that grammar over multiple files
05:23:22 <Thu12331> yeah, distributing the ag is fine....but it WILL result in one big hs most of the times
05:23:29 <Thu12331> or is that a misconception
05:23:31 <earthy> no
05:23:38 <earthy> it cannot be otherwise
05:23:39 <ski> earthy : ah, danke, that looks like the one
05:24:09 <earthy> as it is one big ass grammar with a big ass shiteload of semantic functions hooked in
05:25:09 <dons> dcoutts, do you know about this fabled fast io code of simonM's?
05:25:25 * ski has ideas about combining ag stuff with logic programming
05:25:34 <boegel> what's the best way again to get Haskell syntax highlighting working in emacs ?
05:25:44 <dons> use vim ;)
05:25:50 <boegel> dons: naa-aah
05:25:51 <dons> sorry. *cough* yi!
05:26:16 <psi> http://haskell.org/haskell-mode/
05:26:22 <Thu12331> earthy, ok thanks...i was affraid it might be that answer :D
05:26:30 <Itkovian> boegel: use vim
05:26:42 <xerox> boegel: be careful to get haskell-mode-2.00
05:26:49 <earthy> thu: what's the problem? ghc taking too long? :P
05:27:10 <dons> i always give higher marks to students who use vim... maybe any undergrads should take this into account ;)
05:27:18 <Thu12331> hehe, everytime i change some ag file...i have to wait couple of minutes to recompile yes :D
05:27:39 <boegel> psi, xerox: thanks
05:28:02 <boegel> dons: omg, why ? I like emacs better, that's it :)
05:28:34 <Oeje1> boegel: So you like Emacs better than good grades?
05:28:36 <yeti> dons: lol :> at which university are you teaching? i might be considering going there ;)
05:29:21 <earthy> yes, well, there's no real way around that problem
05:29:34 <earthy> other than decoupling your semantic functions and your grammar
05:29:57 <earthy> but that'd void the use of the ag system... :P
05:30:00 <dons> oh, i'm just teasing ;) in my experience most use, oh, kedit or nedit. only the good once use emacs or vim, and emacss probably makes up 80% of those
05:30:07 <Igloo> dons: I think you are wrong about initPS
05:30:10 <Itkovian> omg, where I'm at right now ... they block all outgoing ports except 80, 22, 443, but people logging onto the machines get root. duh.
05:30:12 * ski wonders if there's an ag system with incremental/adaptive compiler
05:30:26 <Igloo> lengthPS (PS _ _ l) = l, so initPS needs (lengthPS - 1)
05:30:28 <earthy> ski: how would you build one?
05:30:43 <dons> Igloo, why the behaviour I see then?
05:30:52 <Igloo> What behaviour?
05:31:00 <greenrd> Itkovian: do they need to have root for their work?
05:31:01 <dons> oh, didn't you see the ghci stuff
05:31:11 <Itkovian> greenrd: it's a student lab
05:31:18 <ski> earthy : maybe as an ag system ?  (i think i read somewhere that some ag systems provide incremental/adaptive computation/algorithms)
05:31:24 <Itkovian> they prolly never heard of the sudo command
05:31:27 <greenrd> hehe
05:31:42 <ski> (earthy : possibly coupled with a structural editor ..)
05:31:43 <greenrd> sudo is dangerous
05:31:58 <greenrd> you never know when some dumb program is going to introduce a new exploitable environment variable
05:32:10 <Igloo> No
05:32:18 <dcoutts> dons, I don't think there has been much development on this fast io stuff, if it's the thing I was thinking about
05:32:25 <greenrd> it's ok if you've audited the programs that you're allowing access to
05:32:57 <dcoutts> dons, there was a period when it was being discussed on the libs list, but that was some months ago
05:33:02 <dons> Igloo,         Data.FastPackedString> initPS (packString "haskell")
05:33:04 <dons>      >  "haskell"
05:33:38 <Itkovian> greenrd: but it's way better than allowing root acces, isn't it?
05:33:56 <Igloo> Where's your code?
05:33:57 <MJ`> hey all :)
05:34:02 <xerox> @where h4sh
05:34:03 <lambdabot> http://www.cse.unsw.edu.au/~dons/h4sh.html
05:34:05 <greenrd> Itkovian: I suppose
05:34:21 <earthy> ski: possibly
05:34:39 <ski> (earthy : 'twas an idea)
05:34:53 <MJ`> I need help writing a function in haskell that determines the number of carry operations in an arithmetic calculation
05:35:14 <MJ`> ie, 26 + 55 would have 1 carry
05:35:27 <MJ`> is there any one that can shed some light on this?
05:35:59 <wilx> Do the sum "by hand" and count the carrys :)
05:36:06 <MJ`> hehe
05:36:09 <vikasg> MJ`, write an addition function and count the number of carries as <Ctrl-c'd by wilx>
05:36:09 <dons>  | otherwise  = substrPS ps 0 (len - 2) ~> PS ps (s+begin) (1+end-begin) ~> PS ps 0 (1+end-1) ~> PS ps 0 end == wrong
05:36:29 <wilx> o_O
05:36:41 <MJ`> hehe there are easier ways to do it than that
05:36:53 <MJ`> i am new to haskell so i may need some help
05:36:57 <wilx> Are there?
05:37:12 <MJ`> i wrote it in java, but i have to adapt it to haskell
05:37:17 <MJ`> and i am not having much luck at all
05:37:25 <vikasg> MJ`, what is the easier way?
05:37:28 <dons> sorry, PS ps 0 (1 + length - 1) = PS ps 0 length == wrong
05:37:32 <Igloo> dons: Where can I get Data.FastPackedString?
05:37:46 <dons> http://www.cse.unsw.edu.au/~dons/code/fps
05:37:55 <MJ`> basically the easiest way i feel is to put the 2 numbers into an array each
05:37:58 <dons> I've fixed it in there.
05:38:22 <MJ`> add the corresponding numbers together, if they are over 10, carries gets incremented
05:38:27 <earthy> hm
05:38:31 <MJ`> and the next number along gets 1 added to it
05:38:33 <earthy> sounds expensive
05:38:35 <MJ`> thats how i did it in java
05:38:46 <MJ`> but i am new to haskell and have no idea how to do this
05:38:55 <wilx> Yeah. Well that is what we suggested...
05:39:08 <vikasg> right-ho
05:39:09 <greenrd> MJ`: Carries in base 10? Or in base 2?
05:39:15 <MJ`> base 10
05:39:16 <Igloo> Hmm, you can load that in ghci?
05:39:26 <earthy> okay, so, you want to go from Integer to lists of digits, reverse that list, then walk over that list, counting carries
05:39:41 <MJ`> you know when you're doing basic addition in school, and u carry the 1 as you solve right to left
05:39:44 <MJ`> thats what it has to count
05:39:46 <greenrd> yeah
05:39:50 <dons> Igloo, yes. after compilation :)
05:39:56 <Igloo> Ah, right
05:44:08 <Igloo> Oh, I read it as directly constructing the result, not calling substr, sorry
05:44:49 <earthy> MJ': do you know how to go from an integer number to a list of digits?
05:44:54 <Igloo> How odd
05:44:58 <dons> no worries. but do you think it matters to darcs?
05:45:30 <Igloo> It should certainly be fixed  :-)
05:45:48 <dons> hehe.
05:48:58 * shapr boings
05:49:48 <Itkovian> dons: which cabal file to use for fps?
05:50:02 <boegel> shapr: how about FLM ? :)
05:50:35 <dons> Itkovian, try the mmap one. I think only OpenBSD doesn't work with mmap
05:50:44 <Itkovian> ok
05:51:25 <dons> you'll know if you chose the wrong one, as your haskell apps will get bus errors ;)
05:51:51 <dons> which, of course, is the sign of IMPENDING DOOM!
05:52:42 <Itkovian> doom is cool
05:52:44 <Igloo> Really? Won't it just fail to compile/link?
05:52:55 <CosmicRay> shapr: ping
05:53:16 <Itkovian> I always get stuff like this: ld: table of contents for archive: /usr/local/lib/fps-0.1/libHSfps-0.1.a is out of date; rerun ranlib(1) (can't load from it)
05:53:42 <Itkovian> after ranlib it's usually ok, but I wonder if this could have anything to do with unfound symbols by hs-plugins
05:53:55 <Igloo> Sounds like a cabal bug to me
05:55:24 <Itkovian> sounds annoying to me
05:57:21 <dons> Igloo, fail to compile/link? no. I get a bug on recent openbsds where mmapped fastpackedstrings lead to runtime segfaults in memchr. I almost certain this is due to recent changes in mmap on openbsd
05:57:53 <dons> Itkovian, this ranlib stuff looks like an apple-ism
05:58:21 <Itkovian> prolly. myy bluetooth also hangs, never used it before ... now it refuses to die
05:58:37 <wilx> Sounds like PS is assuming something that standards do not guarantee.
05:59:24 <dcoutts> dons, the opendbsd memory changes would probably mean that the PS stuff is going out of bounds on some allocated memory
05:59:33 <dons> yep.
06:00:14 <dcoutts> dons, since the openbsd memory manager now leaves unmaped gaps between allocations to find array bounds problems
06:00:28 <dons> right.
06:00:59 <dons> i've had a couple of goes at chasing it down, but no luck yet.
06:01:08 <dcoutts> it could also be that it's accessing the memory after the block is freed. Since openbsd will now actually unmap the block, rather than jsut leaving it hanging around
06:01:25 <dcoutts> the new openbsd mem stuff is pretty good I think
06:01:26 <dons> yep. you reading misc@ ?
06:01:34 <vikasg> Fri1233, you live in Australia?
06:01:51 <dcoutts> dons, no just KernelTrap which follows bsd things too
06:02:02 <dons> yeah, it is good, except that it make X unstable -- due to bugs in X ;)
06:02:28 <dcoutts> right, it uncovers bugs by making them crasher bugs rather than silent corruption bugs
06:02:42 <dcoutts> which is good, if a pain in the short term
06:02:47 <dons> which is a great idea!
06:03:15 <dcoutts> yeah, when's linix going to get this stuff? :-)
06:03:53 <shapr> CosmicRay: pong
06:04:12 <CosmicRay> shapr: hey
06:04:14 <Fri1233> vikasg, no just looking creeping towards the weekend with my thought :P
06:04:31 <CosmicRay> shapr: hope it's OK I mentioned TMR in HWN
06:04:38 <shapr> of course
06:04:52 <CosmicRay> if you don't mind me asking, where are you moving to?
06:04:55 <dons> dcoutts, don't know. usually these things (like propolice in gcc) get ported back over to linux after a couple of years
06:05:13 <shapr> CosmicRay: Next town over, Luleå. I'm also starting a CS degree as soon as I can get all the papers organized.
06:05:21 <CosmicRay> ah, nice.
06:05:30 <dons> also `fake' ports tree builds  -- that made it into some linux distros, right?
06:05:50 <dcoutts> dons, yeah, after openbsd has gone through all the initial pain of fixing the bugs that the new stuff exposes :-)
06:06:57 <dons> right. i hope all you linux freeriders benefit from my desktop crashing once a day due to use-after-free-bugs in X :}
06:07:06 <dons> stupid X
06:07:12 <Igloo> Don't worry, we will
06:07:30 <pejo> dons, you could let the obsd people handle your bugs and switch to Linux yanno. ;)
06:07:43 <tromp> the number of 15x15 Go positions ends in ...582ff11c8c4c5a73  :-P
06:07:43 <Igloo> Linux who?
06:08:04 <CosmicRay> dons: thanks for cabalizing FPS
06:08:08 <bourbaki> moin
06:08:12 <CosmicRay> dons: has anyone tried it with hugs?
06:08:14 * vikasg remembers that today is Linux's 14th birthday
06:08:28 <dons> CosmicRay, not that I know of.
06:08:28 * CosmicRay was doing well to remember that today is August 25.
06:08:40 <CosmicRay> dons: OK.  We'll see if it builds, then ;-)
06:08:46 <dons> fingers crossed.
06:09:27 * Igloo has tried FPS itself in hugs, but not the cabalised one
06:10:00 <dons> ok. cool. same thing then. I patched some bits, cleaned up some weird unhaskelly stuff. and added -DUSE_MMAP :}
06:10:18 <Igloo> unhaskelly stuff?
06:10:33 <CosmicRay> Igloo: yeah, apparently he decided to cast everything to an Object <grin>
06:10:53 <dons> not really unhaskell, more naive haskell
06:10:57 <CosmicRay> sorry, had a java-related discussion in #emacs yesterday
06:11:57 <dons> Igloo, I am still interested to know why initPS didn't break darcs? is is just not used anywhere critical?
06:13:03 <dons> ah, David's reply clarifies things
06:13:05 <Igloo> It doesn't look like it's used much at all
06:13:19 <Igloo> It's a fairly obscure command, as list commands go
06:13:42 <wilx> Hmm, I am reading about the OpenBSD changes and I think that FreeBSD has the same thing for years.
06:13:42 <reppie-tan> ring ring ring bananaphone
06:13:53 <boegel> reppie-tan: wtf ?
06:14:00 <reppie-tan> hi dons, how does FPS 'pack' the strings?
06:14:10 <boegel> hey bourbaki, any screenshots of the thing you were working on yet ?
06:14:17 <CosmicRay> into arrays of C chars
06:14:22 <CosmicRay> just like C
06:14:26 <CosmicRay> they just sit out there in a hunk of ram
06:14:34 <reppie-tan> CosmicRay so there's no support for wide chars?
06:14:45 <dons> wilx, almost certainly not, I think. otherwise openbsd would already have it
06:14:50 <CosmicRay> reppie-tan: I think it can convert back and forth between them, but otherwise no.
06:15:06 <CosmicRay> reppie-tan: I see this as being more useful for people that are processing binary files
06:15:12 <wilx> Well, they definitely use mmap() for mallo() for quite some time now.
06:15:24 <CosmicRay> ah, no, it does not build with hugs.
06:15:29 <wilx> Maybe without all the guard pages stuff though.
06:15:34 <dons> that's the new stuff
06:15:41 <reppie-tan> wilx they use mmap for ALL mallocs?
06:15:42 <CosmicRay> Running: ./setup build
06:15:42 <dons> the new stuff that makes programs crash :)
06:15:43 <CosmicRay> dist/build/Data/FastPackedString.c:5:22: error: fpstring.h: No such file or directory
06:15:43 <CosmicRay> dist/build/Data/FastPackedString.c: In function 'hugsprim_conv_from_hex_12':
06:15:43 <CosmicRay> dist/build/Data/FastPackedString.c:20: warning: implicit declaration of function 'conv_from_hex'
06:15:48 <CosmicRay> that maybe is easily fixable though
06:16:02 <dcoutts> wilx, yes, glibc does too, but this is more stuff like the gaurd pages and unmapping pages when they are freed
06:16:03 <wilx> reppie-tan, afaik yes.
06:16:08 <wilx> Ok.
06:16:08 <dons> oh, we need that stuff from the cabal manual about c-sources working with hugs :}
06:16:10 <reppie-tan> wilx that's a horrible idea
06:16:16 <reppie-tan> because mmaps are page-aligned
06:16:26 <wilx> Nah, they are not stupid, of course.
06:16:41 <wilx> They divide the pages for small objects.
06:16:45 <reppie-tan> oh ok
06:16:48 <dcoutts> reppie-tan, they use it for lager allocations, and use more traditional stuff for small allocations
06:18:02 <reppie-tan> also the problem with their random mmap is that it causes a lot of address space fragmentation :(
06:19:43 <CosmicRay> hmm, got that one fixed
06:21:12 <CosmicRay> what is the difference between Foreign.Concurrent.newForeignPtr and Foreign.ForeignPtr.newForeignPtr?
06:25:57 <xerox> Howdy autrijus :-)
06:26:24 <CosmicRay> what exactly happens in FPS if USE_MMAP is defined but __GLASGOW_HASKELL__ isn't?
06:27:23 <CosmicRay> it looks to me like this case is broken
06:28:20 <dcoutts> when are we going to get a portable System.IO.MMap or something ?
06:28:49 <dcoutts> a standard binding to mmap on unix and CreateMapping() on win32
06:29:02 <Itkovian> when somebody writes one, eh
06:29:30 <dons> CosmicRay, doesn't Foreign.Concurrent.newForeignPtr let you use arbitrary IO actions as finalisers?
06:29:50 <dons> and yes, the case you describe is likely busted
06:30:32 * dons gets sleep now, and lets CosmicRay continue the FPS hack fest!
06:30:41 <Igloo> I thought all the __GLASGOW_HASKELL__'s were really USE_MMAPs
06:30:44 <CosmicRay> ah, indeed it does.
06:30:48 <CosmicRay> so how can I work around this for hugs?
06:30:52 <CosmicRay> (the foreign.concurrent bit)
06:31:39 <CosmicRay> hugs has no foreign.concurrent
06:31:50 <CosmicRay> Igloo: how did you make this work in hugs?
06:32:21 <Igloo> No idea; it'll be ni darcs-devel archives
06:32:31 <Igloo> I didn't try to get it working with mmap, though
06:32:50 <CosmicRay> this bit of code is not related to mmap
06:32:51 <CosmicRay> it's in:
06:32:53 <CosmicRay> constructPS :: (Ptr Word8) -> Int -> IO () -> IO PackedString
06:32:54 <CosmicRay> constructPS p l f = do
06:32:54 <CosmicRay>     fp <- FC.newForeignPtr p f
06:32:54 <CosmicRay>     return $ PS fp 0 l
06:33:13 <Igloo> It's also possible that function didn't exist at the time
06:35:23 <CosmicRay> hmm, I'm guessing that this function takes a pointer to a C buffer and an int and returns a new PackedString?
06:35:36 <CosmicRay> http://www.abridgegame.org/pipermail/darcs-devel/2005-April/001676.html
06:36:18 * Itkovian goes catch his bus
06:36:20 <Itkovian> ttyl
06:36:58 <ski> (ttyl = talk to you later ?)
06:37:03 <boegel> ski: yep
06:37:14 <boegel> why is that so strange ?
06:37:25 <vikasg> boegel, because it looks like tty1
06:37:37 <ski> boegel : just never seen its expansion before
06:38:13 * beelsebob prods Neil in the ribs
06:38:26 <CosmicRay> Igloo: well, your patch is at http://www.abridgegame.org/pipermail/darcs-devel/2005-April/001666.html.  it seems to have been at least partially applied, even though david said it "scares" him and he wouldn't apply it.
06:38:44 <CosmicRay> still trying to track down the function from darcs at that date...
06:39:32 <psi> my gtk2hs program simply shuts down after taking care of an onEntryActivate signal. can anyone think of any reason why it might do that?
06:39:59 <psi> the action associated with the signal seems to execute fine
06:40:03 <psi> then it shuts down
06:41:15 <psi> no exception or anything (at least no messages on the terminal)
06:42:06 * ndm hits beelsebob for startling him
06:42:31 * beelsebob listens to the funeral march
06:42:42 <beelsebob> how bizare that that started at the same time as you said that
06:42:58 <CosmicRay> Igloo: Ah ha.  http://www.abridgegame.org/cgi-bin/darcs.cgi/darcs/?c=annotate&p=20050425180306-4cc09-6c620e08f0696b576ba31135fceee832f0453cf8.gz
06:43:19 <dcoutts> psi, hmm, any more info you can give? eg gtk2hs version
06:43:26 <CosmicRay> I guess I'll just #ifdef it to work in GHC only for now, then.
06:43:46 <psi> dcoutts: 0.9.9
06:44:21 <dcoutts> psi, what's it doing in the signal handler?
06:44:33 <dcoutts> psi, and ghc version?
06:45:13 <dcoutts> psi, if possible I'd like to re-produce the bug on my machine
06:45:26 <dcoutts> so having the code would be helpful
06:45:59 <CosmicRay> dons: will you be feeding diffs back to david, I hope/
06:46:04 <psi> ghc version, 6.4.1
06:46:15 <psi> this is my call to onEntryActivate
06:46:28 <psi> onEntryActivate entry (entryGetText entry >>= Telnet.sendLine conn >> entrySetText entry "")
06:46:45 <dcoutts> psi, are we using threads here?
06:46:53 <psi> Telnet.sendLine simply sends the text with hPutStrLn
06:46:58 <psi> yes
06:47:12 <dcoutts> hmm, you'r not linking with -threaded I hope
06:47:38 <psi> hm, I'm not sure. I was using ghc --make.
06:47:46 <psi> i'll try manually
06:47:47 <dcoutts> ok, that's probably ok
06:49:11 <dcoutts> psi, is it possible for me to try building the code?
06:49:19 <psi> that didn't help. I can try to extract the neccesary parts to produce this.
06:49:40 <dcoutts> psi, that'd be great, thanks
06:50:10 <dcoutts> if it's not huge, I can just build the whole thing
06:50:49 <psi> ok
06:50:53 <psi> hold on
06:52:34 <ehuber> hihi
06:54:29 <psi> dcoutts: http://213.113.126.251/~simon/trouble.tar
06:54:33 <psi> 3 files in there
06:54:54 <dcoutts> psi, ok
06:55:03 <psi> you need 'nc -l -p 1234' or something like that running
06:55:10 <psi> it will try to connect there first
06:55:14 <dcoutts> ok
06:57:48 <dcoutts> dcoutts emerges nc
06:59:15 <psi> basically, what I want to do is to build a mud client, so I've tried to get a TextView to understand ansi escape sequences, and something that understands telnet
07:00:07 <dcoutts> psi, so to make it go wrong, what do I have to do?
07:00:15 <psi> just type something
07:00:18 <psi> and press enter
07:00:20 <dcoutts> in which box?
07:00:24 <psi> the entry box
07:00:28 <dcoutts> oh, works for me
07:00:36 <psi> hm
07:00:59 <psi> that's odd :)
07:01:06 <dcoutts> yes :-)
07:01:31 <dcoutts> I don't think there were any realy bug fixes since version 0.9.9
07:01:40 <CosmicRay> dons: you should have some patches from me.
07:02:27 <dcoutts> psi, there are other things different between our setups though, like ghc version, gtk version etc
07:02:50 <psi> my ghc is version 6.4.1.20050801
07:02:59 <dcoutts> mine is 6.4
07:03:12 <dcoutts> i'm running Gtk+ 2.8.0
07:03:53 <dcoutts> psi, there's another similar prog that someone else wrote, you could see if that's working for you... it's an irc client
07:04:30 <psi> i'm running 2.6.9
07:04:35 <psi> ok, where is that?
07:04:45 <dcoutts> just about to tar it up
07:08:15 <dcoutts> psi, http://haskell.org/~duncan/gtk2hs/sirc.tar.gz
07:08:35 <dcoutts> psi, it's probably not for wide distribtuion
07:09:25 <psi> alright, i'll try it out right away
07:09:44 <dcoutts> psi, it was written by TFK
07:09:48 <dcoutts> @seen TFK
07:09:49 <lambdabot> I saw TFK leaving #haskell 4 days, 17 hours, 46 minutes and 23
07:09:49 <lambdabot> seconds ago, and I have missed 1 minute and 45 seconds since then.
07:10:04 <psi> I guess I need to install glade
07:10:11 <psi> and rebuild gtk2hs?
07:10:16 <dcoutts> psi, well libglade yes
07:10:34 <dcoutts> if you didn't have it initially then yes, you'll need to rebuild
07:11:18 <psi> ok. thanks for you help, btw.
07:11:35 <psi> i'll build without optimizations this time
07:11:36 <dcoutts> psi, you can build without optimisations, eg ./configure --with-hcflags="-O0 -fviaC"
07:11:41 <psi> :)
07:12:01 <dcoutts> :-0, but the -fviaC is probably vaugely important
07:21:06 * Fri1233 yells out to the moon of pleasure
07:21:11 * boegel yawns
07:21:28 <boegel> Fri1233: you're wrong, it's Thurday, not Friday !
07:21:36 <Fri1233> i probably dont have to do colloquiem
07:21:38 <Fri1233> YEAH baby
07:21:56 <boegel> colloquiem ? :s
07:22:29 <Thu1245> its a mandatory part for master students, but i enrolled in the 2003 doctoraal program....
07:24:59 * Lemmih wonders if he should sacrifice speed for a smaller code base.
07:25:20 <reppie-tan> they say bigger is better
07:25:31 <reppie-tan> at least when it comes to penis size
07:25:57 <boegel> Thu1245: if you'd have to do it, what does it imply ? nasty medical tests involving a glove and a pair of tweezers ?
07:26:04 <dcoutts> reppie-tan, hmm, there must be some reasonable upper limit.
07:26:19 <reppie-tan> dcoutts i think so too, but i doubt anyone has actually reached it
07:26:30 <boegel> reppie-tan: in Belgium, we have a saying "beter nen kleinen plezanten dan nen groten ambetanten"
07:26:36 <reppie-tan> or maybe only very few people have
07:26:48 <reppie-tan> boegel what does it mean? :)
07:26:54 <dcoutts> reppie-tan, some of my female friends say they've had some painful experiences with some partners
07:26:58 <boegel> reppie-tan: that's for you to find out, off course :)
07:27:13 * boegel seconds dcoutts 
07:27:30 <reppie-tan> better a small pleasure than a big ...
07:27:31 <reppie-tan> ?
07:27:46 <Philippa_> it's possible for either or both of too wide and too long to be a problem...
07:28:45 <Philippa_> better a good fit. Duh.
07:29:14 <reppie-tan> boegel oh i see
07:33:44 <psi> boegel: I could almost read that.
07:33:50 <psi> except "ambetanten"
07:34:01 <psi> I'm from sweden.
07:34:44 <boegel> psi: ambetanten = annoying one
07:34:59 <boegel> so: "better a small nice one, than a big annoying one"
07:35:13 <boegel> psi: yeah, I've noticed how similar we speak :) it's funny
07:35:46 <boegel> psi: 'ambetanten' is kind of a dialect word, maybe that's the reason
07:35:50 <psi> ok :)
07:37:41 <psi> I guess I only understood kleinen and groten because I know a few german words.
07:38:01 <reppie-tan> ich bin schnappi das kleine krokodil
07:38:02 <Thu1245> boegel, no i'd have to write a small paper and present it
07:38:09 <Thu1245> i can use my time better atm
07:38:36 <ehuber> does anyone know where to find a plaintext list of the 10,000 most common english words ?
07:38:50 <ndm> ehuber, scowl
07:39:15 <ndm> ehuber, http://wordlist.sourceforge.net/
07:39:34 <ndm> it has various dictionaries plus percentages
07:40:00 <ehuber> ah. sorry, i didn't think to look on sourceforge. I thought they only had code
07:40:12 <boegel> Thu1245: and now you don't have to ? presenting papers is pretty comen for people doing a Phd, no?
07:40:17 <ehuber> thanks
07:41:04 <ndm> boegel, i'm on a phd, and yeah - its pretty common
07:41:52 <boegel> ndm: I know, so am I :) I don't get why Thu1245 should be afraid of it then
07:42:00 <boegel> well, I am too, but I just started :D
07:42:46 <ndm> boegel, how just started? i've done one year now
07:44:47 <Philippa_> it's maybe a little scary if you've not done it before, I guess
07:45:03 <Thu1245> boegel, im not doing phd :D
07:45:22 <Thu1245> and it means a shitload of time i can spent elsewhere
07:45:25 <Thu1245> now i gotto run
07:47:19 <boegel> ndm: I started Aug 1st
07:47:30 <boegel> but I have to run too, ttyl
07:48:06 <reppie-tan> http://may.2chan.net/27/src/1124888830423.jpg
07:51:46 <CosmicRay> @seen dons
07:51:46 <lambdabot> dons is in #haskell. Last spoke 1 hour, 21 minutes and 14 seconds
07:51:46 <lambdabot> ago.
07:53:52 <wilx> Awww.
07:53:56 <wilx> Nice pic :)
07:55:16 <sieni> nice pussy :-)
07:57:05 * ski wonders .. is that two tails ??
07:57:19 <sieni> Nice background image: http://personal.inet.fi/koti/iood/hoej.jpg
07:59:39 <wilx> Chio-chan's father in black.
07:59:45 <wilx> The cat.
08:00:34 <reppie-tan> http://people.freebsd.org/~ssouhlal/stuff/Screenshot.png
08:00:43 <reppie-tan> Osaka!
08:00:46 <beelsebob> a tree?
08:03:12 <psi`> dcoutts: *testing sirc*
08:03:19 <psi> heh, same bug
08:16:26 <dcoutts> psi, hmm, interesting
08:17:27 <dcoutts> psi, no output, nothing at all? it just stops
08:18:13 <dcoutts> psi, I've got one idea, I'll have to try ghc 6.4.1 however
08:18:21 <psi> yeah, it just puts me back at the prompt
08:19:04 <psi> ok
08:19:14 <psi> might it be a bug in 6.4.1?
08:19:16 <dcoutts> psi, you don't have 6.4 installed too do you?
08:19:25 <psi> no
08:19:34 <dcoutts> psi, no but we build some code differently for >6.4
08:19:44 <dcoutts> it might be that
08:19:50 <psi> ah
08:20:28 <psi> i could look for a .deb for 6.4
08:25:39 <psi> i only found the same version that I have on debians site
08:26:34 <psi> btw, the build of gtk2hs wasn't any faster without optimisations
08:27:11 <dcoutts> psi, really? hmm, it should build in maybe 10 min
08:27:32 <psi> it took probably 30
08:27:49 <psi> did the via-C option make a difference there maybe?
08:36:27 <dcoutts> psi, yes somewhat
08:47:46 * beelsebob yawns
08:48:26 * dcoutts finally discoveres the /me command :-)
08:48:47 * beelsebob smiles
08:49:39 * dcoutts thinks this is great because he likes talking about himself in the third person
08:49:59 * beelsebob loves third person
08:50:05 * beelsebob loves himself
08:50:11 * beelsebob grins
08:50:25 * Lucinda burps
08:58:01 <psi> dcoutts: I happen to have 6.4 on my ibook :) I'll try it there
08:59:08 <Igloo> CosmicRay: Are you going to be happy if we think another package should take over the name fps in Debian in the (fairly near) future?
08:59:23 <mikehammad> hi, would anyone who's familiar with GHC performance tweaks be willing to test and comment on my haskell matrix libraries?
08:59:35 <psi> if I can get gtk2hs to build, that is. I bet I'm missing a bunch of libraries.
09:00:08 <CosmicRay> Igloo: another Haskell package?
09:00:24 <CosmicRay> Igloo: that does something other than FastPackedString?
09:00:40 <CosmicRay> Igloo: I'm calling the source package haskell-fps and the binary packages libghc6-fps-dev and libhugs-fps
09:00:48 <CosmicRay> so it shouldn't conflict with anything non-haskell
09:01:31 * beelsebob stares at psi for breaking the /me fest
09:02:18 <dcoutts> psi, oh right
09:02:21 <Igloo> I mean if we want to call Simon's fps, or if we want one with darcs' lines/unlines to be fps
09:02:58 <CosmicRay> Igloo: does simon have something other than the Data.PackedString that is already in fptools?
09:03:04 <Igloo> Yes
09:03:16 <dcoutts> psi, it should build on mac so long as you've got gtk+ installed, everything else is optional
09:03:24 <CosmicRay> does anybody use it?
09:03:36 <Igloo> I don't think it's finished or released yet
09:04:01 <CosmicRay> Igloo: in that case, I'm content to name dons' package fps, and if a competitor emerges, we can name it fps-simon or something
09:04:13 <CosmicRay> especially if its vaporware at this stage
09:04:17 <psi> dcoutts: currently it complains about gdk-2.0. that is not the same as gdk-pixbuf is it?
09:04:38 <dcoutts> psi, well gdk-pixbuf and gdk are packaged together
09:05:05 <Igloo> I'd prefer it if you called this fps-dons or something for now, then, and renamed it later if wanted
09:05:07 <dcoutts> sounds like you may be missing the gtk development bits (ie headers etc)
09:05:26 <Igloo> I don't want us stuck with silly names for what turn into standard packages
09:05:37 <CosmicRay> Igloo: you think Simon is prone to call his FastPackedString as well?
09:05:50 <Igloo> I have no idea, I just don't think it's worth rushing it
09:06:10 <psi> yes, actually I don't even think gtk2 is installed, heh
09:06:12 <olliej> dcoutts: have now got correct boxing of primitive ops going in .net... muwhahahaha
09:06:14 <CosmicRay> I don't really mind calling it fps-dons.  though I think that name is not very recognizable.
09:06:29 <dcoutts> olliej, you're making a binding to what?
09:06:32 <psi> this'll take a while
09:06:40 <CosmicRay> most people would have no idea what the "dons" bit means.
09:06:42 <Igloo> darcs' will either be fps or fps-darcs, I suspect
09:06:45 <olliej> dcoutts: not binding -- full compilation
09:07:02 <CosmicRay> Igloo: surely we would not be packaging both as separate Debian packages?
09:07:03 <Igloo> So you think fps=simon would be OK but not fps-dons?  :-)
09:07:33 <Igloo> darcs will need one that does what it wants (e.g. sane lines/unlines) one way or another
09:07:43 <CosmicRay> Igloo: fps-simon is not great either
09:07:53 <olliej> dcoutts: deals with type classes, but is having slight issues with certain types of class (eg -- dealing with Show [a], and others of that ilk)
09:07:55 <CosmicRay> Igloo: but the one that darcs wants is in its source tree already
09:08:00 <CosmicRay> Igloo: it doesn't need any of these, right?
09:08:18 <Igloo> I don't think fps is very meaningful either, incidentally. Either you know what fps/fps-dons/fps-simon does already or you don't
09:08:38 <CosmicRay> Igloo: but really, if the lines/unlines thing if the forking point, why not just have functions in there that do it all of the above ways?
09:08:49 <Igloo> The plan has always (FSVO always) been to split out FPS, amongst other things, into cabal packages when cabal is ready to be used by users
09:09:22 <olliej> dcoutts: it has a native .net implementation of repeat that would quite possibly beat GHC... it's such a hack it isn't funny :)
09:09:26 <Igloo> CosmicRay: I'm just saying that I'd rather you didn't do anything that you think claims the name before the dust has settled
09:09:41 <CosmicRay> ok.
09:10:06 <Igloo> I imagine ultimately they'll all be merged fairly soon anyway, at which point it will be moot
09:10:14 <CosmicRay> Igloo: what if I commit to put whatever the canonical FPS is, into the FPS package, once there is a canonical one?
09:10:24 <CosmicRay> I'd hope that one of the gets into fptools, rather.
09:10:46 <CosmicRay> (or some merged version)
09:10:52 <dcoutts> CosmicRay, I'd rather things were taken out of fptools and packages seperatly via hackage :-)
09:10:59 <Igloo> I thought that's what I asked if you'd be happy with in the first place  :-)
09:11:43 <CosmicRay> Igloo: I thought you just wanted me to call it fps-dons.  But yes, I would be happy to release this one as fps, and replace it with a different package should a different canonical one emerge.
09:11:55 <CosmicRay> if you think that is reasonable, I think that's the route I'd prefer.
09:12:20 <CosmicRay> dcoutts: I don't like that approach as well.  Perl takes it, but I like the larger base library in Python.
09:12:21 <Igloo> OK, cool
09:13:10 <CosmicRay> dcoutts: having a larger base library makes things more convenient for people that want to make some program Just Work
09:13:13 <dcoutts> CosmicRay, but it does mean there is a long lead time for library changes
09:13:20 <CosmicRay> dcoutts: they don't have to futz around with installers, root access, etc.
09:13:22 <olliej> dcoutts: can you think of a witty seminar title for Haskell on .Net?
09:13:33 <olliej> dcoutts: i refuse to have a boring one
09:13:42 <CosmicRay> dcoutts: true, but for what's in fptools now, I don't think it really matters
09:13:49 <dcoutts> CosmicRay, if we have propper package dep resoultion I think it'll be ok
09:13:56 <CosmicRay> dcoutts: it would be more of a problem if people start adding FTP, IMAP, whatever libraries to it
09:14:20 <dcoutts> CosmicRay, execpt that people complain that ghc takes so long to build. And part of that problem is in building libs you'll never use.
09:14:21 <CosmicRay> dcoutts: basically you're thinking of something like CPAN.  It works, usually, but not always
09:14:57 <CosmicRay> dcoutts: there's a long way to go to make hackage as convenient as CPAN, though.  One item on the list is making it work entirely without requiring root.
09:15:09 <dcoutts> CosmicRay, actally, I'm not really thinking of CPAN, I'm thinking of making it easy for haskell package to be conerted to native packages as you get really good integration
09:15:10 <CosmicRay> dcoutts: I think that would be an excellent goal though.
09:15:20 <CosmicRay> dcoutts: that would be excellent.
09:15:23 <CosmicRay> dcoutts: very sweet.
09:15:50 <dcoutts> CosmicRay, so we're trying to mirror the hackage collection in gentoo using some semi-automatic cabal2ebuild tools
09:16:47 <CosmicRay> nifty
09:17:10 <dcoutts> so for gentoo users it would be nicer if fptools was more minimal
09:17:30 <dcoutts> we'd package opengl, etc seperately
09:17:47 <CosmicRay> yeah I think the GUI libs should not be part of fptools at all.
09:17:59 <CosmicRay> I think more general purpose things like network libraries, etc. should be.
09:18:04 <dcoutts> yes, probably
09:18:07 <CosmicRay> I think Python has struck a very nice balance.
09:18:19 <CosmicRay> you put tools in the base that everybody would use
09:18:24 <CosmicRay> leave the specific UI stuff out.
09:18:26 <dcoutts> yes the stable things should be in there
09:18:54 * Igloo would kick network out too
09:19:13 <Igloo> Otherwise we have to wait for a GHC minor release before we can add a function or anything
09:19:20 <CosmicRay> Igloo: I wouldn't
09:19:27 <dcoutts> so I'd strip out fgl, X11, HGL, OpenGL and GLUT
09:19:31 <Igloo> What do you gain by having it bundled with ghc?
09:19:33 <CosmicRay> Igloo: the network layer has barely changed in the last 15 years asdie from the introduction of IPv6
09:19:41 <CosmicRay> Igloo: availability everywhere
09:19:42 <Igloo> Distro packages can just depend on it if that's what you want
09:19:49 <dcoutts> possibly even parsec and haskell-src
09:19:57 <CosmicRay> Igloo: end users would have to manually compile it if they need it, which is a pain
09:20:12 <dcoutts> and I'd drop the old hslibs completely
09:20:12 <CosmicRay> dcoutts: parsec is also universally useful.  I could see haskell-src going though.
09:21:12 <CosmicRay> I write very few apps of any size that have no use for a parser or the network.
09:21:14 <Igloo> Unless I'm confused, Network.* doesn't support IPv6 and can't until ghc 6.6
09:21:24 <CosmicRay> you're correct, it doesn't now.
09:21:27 <Igloo> dcoutts: They're already all deprecated I think
09:21:31 <CosmicRay> I don't know why it couldn't with 6.4.1 though.
09:21:44 <CosmicRay> musasabi's altnet does supoprt it.
09:21:47 <dcoutts> Igloo, yes they are but they should be removed completely
09:21:57 <Igloo> CosmicRay: End users compiling it should just be a standard cabal-get incantation, though
09:22:07 <dcoutts> they can be kept as a seperate cabalised packages if anyone still needs them
09:22:19 <Igloo> dcoutts: deprecating them sort of implies that will happen  :-)
09:22:38 <CosmicRay> Igloo: that would require some more intelligent configure magic than we have now.
09:22:38 <dcoutts> Igloo, in 6.6?
09:22:51 <CosmicRay> Igloo: this stuff is fraught with portability issues.
09:23:13 <Igloo> CosmicRay: If it can build as part of ghc then it can build as a cabal package in exactly the same way
09:23:38 <Igloo> dcoutts: I think so, but I hadn't realised you meant by a specific release
09:23:56 <CosmicRay> Igloo: what I'm trying to say is that if the system administrator installs ghc, that person can take care of it.  It is not necessarily so easy for random users to do so.
09:24:19 <dcoutts> Igloo, yeah, so I'm saying less stuff, so the compile doesn't take quite so long
09:24:54 <CosmicRay> Igloo: for instance, as a sysadmin, I maintain GHC on our AIX box.  I have to hack the source a bit to make it compile, and one of the areas I have to hack is networking.  OTOH, I don't have time to support hacking source in every random program a user wants to run on the AIX box, so they're on their own for them.
09:25:16 <CosmicRay> I supose I could change my mind if I see all this in action, running smoothly
09:25:34 <CosmicRay> that would be something I've never seen another language environment achieve, so I'm a little skeptical.
09:25:42 <Igloo> But if it was a separate package then you could just send your fixes upstream and they would be applied much quicker than they could be made part of a ghc release
09:25:51 <dcoutts> CosmicRay, AIX has no package management?
09:26:08 <CosmicRay> dcoutts: it does, but nobody but IBM ever rolls AIX packages, as far as I can tell.
09:26:23 <dcoutts> CosmicRay, so you'd be relying on cabal-get
09:26:48 <CosmicRay> yes, probably so.
09:27:09 <Igloo> cabal ought to be as good as apt-get install -b, which should be as good as apt-get install if the packages are well written
09:27:15 <Igloo> And if they're not, that's what darcs send is for  :-)
09:27:21 <CosmicRay> but what I'm saying is that while this is trivial for me, it's not necessarily trivial for someone with little programming experience and little command-line experience
09:27:34 <CosmicRay> apt-get is an administrator's tool, not an end-user's tool
09:27:44 <dcoutts> Igloo, and it's what hackage should be for, to enforce some minimal QA on packages
09:27:44 <CosmicRay> if cabal-get is to be an end-user's tool, it has to be *better*
09:28:09 <SyntaxNinja> y0
09:28:23 <dcoutts> afternoon SyntaxNinja
09:28:25 <SyntaxNinja> sounds like a debate is raging!
09:28:28 <SyntaxNinja> I agree with ummmm
09:28:30 <SyntaxNinja> CosmicRay: .
09:28:36 <CosmicRay> heh
09:28:41 <Igloo> dcoutts: There's no way it'll catch "Breaks on AIX", though
09:28:49 <dcoutts> Igloo, true
09:28:55 <CosmicRay> SyntaxNinja: we are discussing whether bits of fptools should be split off into individual hackage packages
09:29:00 <Igloo> SyntaxNinja: Are you sure? I think he's on darcs' side!
09:29:16 <dcoutts> Igloo, but it'd stop people makeing blatently stupid tarballs
09:29:26 <SyntaxNinja> CosmicRay: in the long term, I think they probably should, like HUnit for instance
09:29:40 <SyntaxNinja> but you definitely want to have a strong core
09:29:44 <CosmicRay> I have to run off to lunch, but basically here's what it comes down to.  Let's say I port OfflineIMAP from PYthon to Haskell.  I'll need network, parsec, and a host of other utilities.
09:29:51 <Igloo> CosmicRay: I don't really see how it can be better than cabal-get foo and then wait until it says "Done!"
09:30:00 <SyntaxNinja> I think we'd have something like a meta-package 'missingH' or something for all the most important packages
09:30:20 <CosmicRay> It's easier for me to tell end users that they need "ghc 6.4 or above" than to tell them they need "ghc 6.4 or above, hackage x.y or above, and then run this command to install a whole bunch of other libs, some of which may be broken on their system at a given time"
09:31:27 <Igloo> So it's OK if HUnit is broken on their system randomly, but not if network is, even though your package needs both?
09:31:33 <CosmicRay> now this isn't complaining about cabal-get really itself, but there are lots of scenarios where its less convenient.  machines with no internet link, situations where depended-upon libs have API changes or bugs, etc.
09:31:47 <Igloo> And cabal ought to install the requirements itself if your thing is a cabal package
09:32:13 <SyntaxNinja> what's the question? that people won't worry about portability if its not in fptools?
09:32:22 <Igloo> None of that, in my eyes, applies more to network than hunit
09:33:40 <Lemmih> dons: ping.
09:36:46 <CosmicRay> anyway, lunch
09:37:51 <SyntaxNinja> not sure if I'm caught up, but I think it's important to decouple at least some stuff from the compiler; or give it a place to develop outside of the compiler; right now, as simonPJ has said, it's too cathedral, and we need more bazzar
09:38:49 <dcoutts> SyntaxNinja, seconded
09:39:07 <CosmicRay> SyntaxNinja: I agree with that, but that issue is completely orthogonal to whether or not things are developed inside fptools
09:39:19 <CosmicRay> fptools development needs to be fixed for sure.  going to darcs would help, I think.
09:40:07 <CosmicRay> Igloo: either hunit or network could break programs, certainly.
09:40:15 <CosmicRay> Igloo: so let's say a bug gets into one of them.
09:40:23 <dcoutts> CosmicRay, it is also about independent development, coordinated releases take a great deal of time and effort
09:40:26 <Igloo> SyntaxNinja: Basically the disagreement is that CosmicRay thinks network should stay in fptools and I don't
09:40:31 <CosmicRay> Igloo: if they're part of fptools, I can tell people "don't use ghc 6.4.2" or better, the bug would probably have been fixed before release.
09:40:42 <Igloo> But we're agreed that things like hunit should be removed
09:40:50 <CosmicRay> Igloo: if they're separate, I have to list a known good version of every package, which cabal-get doesn't necessarily fetch.
09:40:59 <CosmicRay> no, I think hunit is good there.
09:41:05 <CosmicRay> I agree that things like opengl and x11 should be removed.
09:41:08 <SyntaxNinja> Igloo: OK that helps
09:41:10 <Igloo> Oh, sorry
09:41:22 <SyntaxNinja> heh
09:41:31 <CosmicRay> dcoutts: but coordinated releases are much easier for users.
09:41:41 <CosmicRay> dcoutts: that's why debian stable actually has users ;-)
09:41:54 <dcoutts> CosmicRay, and whay it takes so long to release :-)
09:41:56 <SyntaxNinja> I bet we can all agree that the standard libraries need a good going over, refactoring, and consistent-ifying
09:42:07 <CosmicRay> SyntaxNinja: yep.
09:42:27 <CosmicRay> dcoutts: yes, that and the fact that debian is the largest dysfunctional family on the planet.
09:42:33 <Igloo> One of the really bad things about libraries in fptools is that they desync between impls
09:42:34 <dcoutts> SyntaxNinja, we can all agree on that until our progs break due to backwards incompatable changes :-)
09:42:57 <CosmicRay> Igloo: didn't hugs, nhc98, and ghc all release within a week of each other, with the same fptools version?
09:42:59 <dcoutts> Igloo, yes, that's a good point
09:43:01 <SyntaxNinja> dcoutts: well, that happens anyway
09:43:06 <Igloo> CosmicRay: Once, yes
09:43:08 <SyntaxNinja> CosmicRay: yep
09:43:23 <SyntaxNinja> dcoutts: and I think it happens because we don't have a strong enough core standard
09:43:30 <CosmicRay> Igloo: that didn't happen when ghc 6.2 arrived?
09:43:38 <Igloo> I'm fairly sure it didn't
09:43:47 <SyntaxNinja> if we had a stronger core standard, that won't change, plus a bunch of libs in hackage that will change, then I don't think stuff will break as much
09:43:57 <dcoutts> Igloo, where as if they were distributed seperately it'd work for hugs+ghc from a single source code package
09:44:05 <CosmicRay> SyntaxNinja: that's a good point
09:44:05 <Igloo> Exactly
09:44:09 <dcoutts> that is if it works with hugs at all
09:44:13 <SyntaxNinja> you can depend on foo <1.3 until your package gets fixed; not so if foo-1.3 comes with the compiler and foo-1.2 was deleted
09:44:33 <CosmicRay> SyntaxNinja: but doesn't that problem occur in the wild anyway?
09:44:34 <SyntaxNinja> then your package just breaks and you have no access to foo-1.2 anymore
09:44:51 <CosmicRay> SyntaxNinja: and worse, when you release the package that deps on foo-1.2, you don't know whether or not foo-1.3 will break it.
09:44:57 <CosmicRay> so IRL that dep will probably not exist.
09:45:03 <SyntaxNinja> CosmicRay: it does, sure, but if package A lives in hackage nad depends on foo-1.2, then we keep foo-1.2 aruond until a new A is uploadced
09:45:19 <Igloo> The dep gets added when someone reports it breaks with 1.3
09:45:23 <SyntaxNinja> right
09:45:29 <dcoutts> CosmicRay, you can have foo-1.2 and foo-1.3 installed at the same time
09:45:44 <SyntaxNinja> and hackage itself can possibly figure that out if it won't build or ./setup test now breaks
09:46:22 <mikehammad> hi, would anyone who's familiar with GHC performance tweaks be willing to test and comment on my haskell matrix libraries?  msg me if so.  thanks!
09:46:34 <dcoutts> SyntaxNinja, however I do think we have a problem with binary deps, it may be necessary to rebuild some packages sometimes to maintain a consistent package collection, even if we can have multiple versions of a lib installed at once
09:46:55 <CosmicRay> SyntaxNinja: nice thinking, but how will it detect if ./setup test breaks only on HPUX or something?
09:47:21 <xerox> With boegel's PhD thing :P
09:47:23 <dcoutts> SyntaxNinja, and I think that at the moment no package system will detect it, cabal configure will not detect the issue I think.
09:47:30 <SyntaxNinja> CosmicRay: we can't, but hopefully someone can report it
09:47:37 <CosmicRay> more broadly spekaing, let's say I release missingh 2.0 that has API changes in several modules.  How do I do that without breaking all the existing hackage software until the existing programs update their deps to require <2.0 ?
09:47:49 <SyntaxNinja> dcoutts: what do you mean about binary deps?
09:48:04 <Lemmih> mikehammad: Don't ask. Just paste the code somewhere and give us an URL.
09:48:16 <SyntaxNinja> CosmicRay: we keep 1.9 in hackage
09:48:23 <SyntaxNinja> until its not necessary anymore
09:48:35 <CosmicRay> but all the existing software will have deps that look something like >= 1.7
09:48:38 <olliej> dcoutts: how's this for a seminar title "Haskell.NET: The Art of Avoiding Work"?
09:48:46 <CosmicRay> and hackage would default to 2.0, no/
09:48:55 <dcoutts> olliej, nice
09:49:02 <Igloo> CosmicRay: New versions need to be uploaded, eiter before or after your 2.0 is
09:49:03 <CosmicRay> so they'd be broken until those deps could be updated to say >= 1.7 < 2.0
09:49:07 <CosmicRay> right.
09:49:16 <SyntaxNinja> you upload a new missingH, hackage runs out and tries to build stuff that depends on it, and runs into a problem.  does it email you, or the other package owners, or just change the depends in the database? idono. it's all possible.
09:49:20 <olliej> dcoutts: cool, i'm not the only person in the world who likes  :)
09:49:21 <CosmicRay> so we have a death by a thousand uploads here.
09:49:26 <Igloo> Whether 2.0 comes iwth ghc or from hackage is irrelevant
09:49:34 <CosmicRay> if my app requires 15 libraries, a change in any one of them could break it for awhile.
09:49:46 <Igloo> Regardless of where those libs come from, yes
09:49:49 <CosmicRay> if it requires fptools, there is only one change that could break it for awhile, and it's a well-publicized one at that.
09:49:51 <dcoutts> SyntaxNinja, it's a little complex, but... suppose you've got package A and B, both depend on C. You install things in this order: C-1.0; A; C-1.1; B. Ok, so we now have A using C-1.0 and B using C-1.1.
09:50:06 <SyntaxNinja> right
09:50:08 <mikehammad> ok, i'd prefer if you download it to let me know.  this is a very early release, and not intended for mass consumption ;)  http://www.cs.uchicago.edu/~mrainey/QdMtxLibs.tar.gz
09:50:12 <CosmicRay> that's my argument for having stable, generally-useful things in fptools.  It's easier on the users.
09:50:23 <CosmicRay> if they download a tarball of some app, it's more likely to still work in a week.
09:50:32 <dcoutts> SyntaxNinja, but now I can't use packages A and B in the same program, even if they are designed to be used together because they depend on inconsistent version of package C.
09:50:33 <Igloo> But when you upgrade your ghc, all your stuff still breaks
09:50:47 <dcoutts> SyntaxNinja, I think this will be a real problem.
09:50:50 <CosmicRay> true, but there's only one breakpoint now, and it's well known.
09:51:11 <Igloo> But it doesn't scale and slows down development
09:51:27 <Igloo> And leads to impl desyncs requiring CPP and suchlike
09:51:43 <Itkovian> hi all
09:51:51 <CosmicRay> Igloo: how much development does something like Data.List or Network.* really need?
09:51:57 <CosmicRay> I'm not suggesting putting GTK into fptools.
09:51:59 <Itkovian> dcoutts: I think the parsec parser will be much more elegant
09:52:05 <dcoutts> SyntaxNinja, and I don't think that cabal detects this situation at the moment. And it's something that can easily arrise, especially if you're building everything from source yourself rather than say using debs or rpms
09:52:07 <Igloo> I don't see what you gain by knowing it broke because you upgraded ghc. You still don't know which libraries changed incompatibly
09:52:09 <dcoutts> Itkovian, ok cool
09:52:22 <Igloo> CosmicRay: Network.* needs IPv6 support
09:52:23 <Itkovian> the mail is underway btw
09:52:35 <CosmicRay> Igloo: so one change in 15 years is not too bad ;-)
09:52:36 <xerox> Itkovian: oh, did you finish the parser?
09:52:37 <Igloo> Data.List would probably stay with the compilers as it's essentially in the H98 standard
09:52:57 <dcoutts> SyntaxNinja, since with debs or rpms, at least the packager might notice the inconsistency and force an update to package A rebuilt against C-1.1
09:53:10 <Igloo> I'd also like a MonadIO interface to Network.*
09:53:11 <dcoutts> SyntaxNinja, that will not happen with cabal-get
09:53:23 <Igloo> I'm sure I could give you a hundred other changes I'd like if I lookde at what it provides
09:53:32 <SyntaxNinja> dcoutts: this is really a problem w/ ghc not allowwing multiple versions of C in the same program
09:53:38 <CosmicRay> really time for lunch now.
09:53:40 * CosmicRay afks
09:53:43 <SyntaxNinja> l8r CosmicRay :)
09:54:22 <SyntaxNinja> dcoutts: but you're ignoring the fact that hackage itself can check for situations like that
09:54:41 <SyntaxNinja> by trying to build the pakcages; even if its not a binary dist, it can still try to build them. of cours eit'll only notice problems on that platform
09:54:53 <SyntaxNinja> unless we went whole hog on autobuilders, but I don't see that happening any time soon
09:55:33 <Igloo> SyntaxNinja: hackage will run arbitrary code that's uploaded?
09:55:41 <SyntaxNinja> Igloo: maybe in a sandbox :)
09:57:38 <dcoutts> SyntaxNinja, but I think it's actually a more fundamental problem. Suppose ghc can allow two versions of package C in the same program if they are private implementation details of A and B. But that need not be the case, A & B may expose parts of the C interface. In that case you really can't have C-1.0 and C-1.1 in scope at the same time.
09:58:38 <dcoutts> SyntaxNinja, as for hackage detecting it, you mean on the server side or when cabal-get wants to install something? It'd have to be on the client side becasue it depends on the local machine's installed package database.
09:59:11 <SyntaxNinja> dcoutts: i meant server-side; by checking whether A and B conflict
09:59:28 <dcoutts> SyntaxNinja, but their source deps do not confilct
09:59:53 <dcoutts> SyntaxNinja, it's only when you build them in a particular order on a machine that their binary deps conflict
10:00:03 <SyntaxNinja> I see what you're saying
10:00:47 <dcoutts> Right, so I'm saying that A will work with C-1.0 & C-1.1, but it happened to be built with C-1.0, because C-1.1 hadn't been installed yet.
10:00:49 <SyntaxNinja> so now you say that both A and B expose C's API somehow and D wants to import both A and B, and use C?
10:00:57 <dcoutts> yes
10:01:31 <SyntaxNinja> but if A and B re-export C, doesn't it actually look, to D like A.foo and B.foo, rather than C.foo?
10:01:35 <psi> dcoutts: I went through ./configure just win, but after a while, my build failed with 'ghc-6.4: can't find file `glib/System/Glib/Types.hs'
10:01:35 <dcoutts> SyntaxNinja, I can construct a real example using Gtk2Hs and cairo and a MyGUIApp
10:01:46 <psi> any idea why?
10:02:03 <psi> s/win/fine
10:02:29 <dcoutts> SyntaxNinja, well it might be that D imports C directly but uses things from A & B that both use types defined in C
10:02:47 <dcoutts> so the types from C would be inconsistent between A & B
10:02:57 <Lemmih> Haven't these problems already been solved in other languages?
10:03:02 <SyntaxNinja> so do you have some idea how to solve this?
10:03:19 <SyntaxNinja> I mean, this doesn't really have anything to do w/ cabal, it's just a side-effect of cabal making code reuse more possible
10:03:22 <dcoutts> SyntaxNinja, yes, sort of
10:03:41 <dcoutts> right, but it's worse in Haskell because there's no binary compatability between things
10:04:09 <dcoutts> in C you can get away with things becaue of excelent binary compatability
10:04:33 <SyntaxNinja> yeah, binary compatibility is the real problem.
10:04:39 <dcoutts> but they have the restriction that you can't have two different versions of a .so lib loaded in the same program at the same time
10:04:51 <dcoutts> but fortunately it doesn't happen too often in C
10:05:04 <dcoutts> for us, I reckon it'll hapen all the time
10:05:48 <dcoutts> SyntaxNinja, so the solution...
10:06:08 <SyntaxNinja> the way I see it, this hasn't been a problem because massive code-reuse hasn't realy been practical in Haskell; when it becomes a problem, the compiler guys will be inclined to solve it.
10:06:32 <dcoutts> so assuming the source deps have a solution, then it's only the current binary deps that are causing a problem
10:07:01 <dcoutts> so if some packages are rebuilt then it will be possible to get a consistent set of packages
10:07:12 <SyntaxNinja> yeah, so keep the sources around in cas eyou need to rebuild them
10:07:38 <dcoutts> so in the example I gave, we need to rebuilt A against C 1.1 and then everything will be ok
10:08:15 <SyntaxNinja> dcoutts: you're just a source dist guy ;)
10:08:45 <dcoutts> so my initial suggestion is that cabal's "./setup configure" detect this situation (when trying to build D that uses A & B) and suggest to the user which package to rebuild
10:09:13 <dcoutts> cabal-get could do the rebuild automatically, just like it does installations of deps automatically
10:10:21 <dcoutts> SyntaxNinja, for a binary distro, the installation of package D will trigger a upgrade of A also (which will have been built against C-1.1)
10:10:41 <dcoutts> well not an upgrade of the code, but an upgrade of the distro package
10:11:16 <SyntaxNinja> yeah
10:12:07 <SyntaxNinja> of course, cabal-get might not play nice w/ OS package systems if it went around rebuilding stuff
10:12:48 <Igloo> It should only rebuild into the user package.conf, though, so shouldn't berak the OS stuff
10:12:56 <psi> I pasted my gtk2hs build error here: http://pastebin.com/346039
10:12:56 <dcoutts> SyntaxNinja, well if it's running as a user and it needs to recompile a system package then it might have to do it for that user only
10:13:18 <SyntaxNinja> if it's compiling a package destined for /usr/local but wnts to change a package in /usr, then that's a problem.
10:13:34 <dcoutts> but if it's running as root and doing system wide packages, then yes, rebuilding a package managed by the system might be an issue
10:13:50 <dcoutts> it can install into /usr/local though so it's not that bad
10:14:04 <SyntaxNinja> it could re-install a new copy of it into usr local or something, idono
10:14:15 <psi> I guess I should include the previous ghc line as well.
10:14:24 <SyntaxNinja> it would actually be great if someone could either capture this on the wiki or in an email to the libraries list.
10:14:33 <dcoutts> and I reckon that ghc should read it's package database from /usr/lib/ghc-x.x/package.conf and from /usr/local/lib/ghc-x.x/package.conf
10:14:55 <dcoutts> so that cabal-get can override system packages by installing them in /usr/local
10:15:20 <dcoutts> SyntaxNinja, ok, I started writing a long email about this already....
10:15:31 <SyntaxNinja> heh cool
10:15:34 <psi> http://pastebin.com/346045 corrected
10:15:43 <SyntaxNinja> we can try f.e.'s idea and put it on the wiki?
10:16:40 <dcoutts> psi, that's a ghc mangler problem
10:17:23 <psi> what does that mean?
10:17:23 <dcoutts> psi, so ghc's somewhat borked on your system (probably issues with the version of gcc)
10:17:29 <psi> hm, ok
10:17:39 <dcoutts> I'll try myself with 6.4.1, thank's for your efforts!
10:18:17 <psi> hey, not at all. I really want to get it working myself :)
10:18:55 <dcoutts> psi, well there's one hack you can try if you *really*  want to get it working ...
10:19:46 <psi> ok... I'm listening
10:20:37 <dcoutts> it's do to with the USE_GCLOSUE_SIGNALS_IMPL in the configure.ac
10:20:59 <dcoutts> if you're building with 6.4.1 it defaults to on, we would want to hack it to turn it off
10:21:24 <dcoutts> now if autoreconf works on your system then it's easy, otherwise...
10:21:39 <dcoutts> and we seem to have particular problems with autotools on debian
10:22:14 <psi> oh. how can I tell if it works?
10:22:32 <Igloo> dcoutts: Oh?
10:23:15 <dcoutts> Igloo, it seems to use an old version of automake, even theough we specify a minimum version in the Makefile.am
10:23:48 <dcoutts> Igloo, so even if they've got automake 1.8/1.9 installed, autoreconf runs automake 1.4 or something daft
10:24:13 <dcoutts> people have to explicitly run automake-1.9
10:24:50 <Igloo> It's controlled by alternatives, but I'd have thought the newest would win
10:25:39 <Igloo> /usr/sbin/update-alternatives --display automake    should show what's up
10:26:57 <dcoutts> Igloo, well I'll try and rememer to ask that next time I have to do some remote build debugging :-)
10:30:36 <psi> dcoutts: do I just change USE_GCLOSUE_SIGNALS_IMPL=yes to no?
10:31:11 <psi> GTKHS_PROG_CHECK_VERSION($GHC_VERSION, -ge, 6.4.1, [USE_GCLOSUE_SIGNALS_IMPL=yes])
10:31:12 <dcoutts> psi, ok, so that you don't need to use autoreconf, you can just edit config.status
10:31:59 <dcoutts> or you can try autoreconf (since Igloo is here and so it'll work first time just to prove me wrong :-)
10:33:12 <psi> what do I edit in config.status?
10:33:48 <dcoutts> so you can set USE_GCLOSUE_SIGNALS_IMPL=no in configure.ac and then autoreconf, or we can try the config.status thing
10:34:08 <Igloo> It would be good to try autoreconf first to see if it breaks
10:34:46 <psi> I don't seem to have autoreconf
10:34:50 <psi> what package is it?
10:35:14 <Igloo> autoconf
10:37:59 <psi> aclocal: configure.ac: 199: macro `AM_HCFLAGS' not found in library
10:37:59 <psi> autoreconf: aclocal failed with exit status: 1
10:38:53 <psi> update-alternatives shows that automake-1.4 is 'best'
10:39:07 <psi> priority 20 vs priority 13 for 1.9
10:39:43 <dcoutts> psi, hmm maybe I shouldn't call it `AM_HCFLAGS'
10:40:51 <reppie-tan> parsec is truly great
10:41:38 <p67634> its ok :P
10:42:37 <dcoutts> psi, you can change AM_HCFLAGS for HCFLAGS in configure.ac
10:44:21 <psi> ok, tons of errors/warnings now
10:44:30 <psi> among them Makefile.am:1: require version 1.8, but have 1.4-p6
10:45:17 <Igloo> Bah, looks like the explanation is on a dead wiki.debian.net
10:49:24 <SyntaxNinja> caches are so... stateful
11:16:01 <Speck> man I've got the hiccups
11:16:40 <Itkovian> boegel: hoffman is dead
11:19:02 <p67634> wow, that black dahlia murder is quite unbelievable
11:23:04 <Oeje1> Itkovian: Hoffman was a student/collegue?
11:23:27 <Itkovian> a professor
11:27:04 * pesco stumbles through the door in rough shape.
11:27:11 * pesco pants.
11:27:21 * pesco straightens himself.
11:27:31 <pesco> Greetings, #haskell!
11:27:44 * SyntaxNinja pours pesco a drink
11:27:56 <SyntaxNinja> just relax 'till your hands stop shaking
11:28:15 <pesco> :)
11:28:55 <CosmicRay> pesco: ahh, I see you've been using Java again.
11:29:06 <pesco> CosmicRay: LOL.
11:29:24 <pesco> I haven't been here for a long time. What's going on? Did I miss anything?
11:29:24 <SyntaxNinja> CosmicRay: I thought you were at lunch
11:29:33 <CosmicRay> SyntaxNinja: I was.  I have returned.  bwahahaha.
11:29:55 <CosmicRay> sneaky little devil, aren't I?  returning only an hour after I had left! ;-)
11:30:10 <SyntaxNinja> CosmicRay: was there a HWN htis week?
11:30:31 <CosmicRay> yup, see topic http://sequence.complete.org/hwn/20050823
11:31:37 <SyntaxNinja> ahh; was it posted to a list?
11:31:43 <CosmicRay> yup, haskell@h.o
11:32:26 <CosmicRay> http://www.haskell.org//pipermail/haskell/2005-August/016304.html
11:32:36 <dcoutts> CosmicRay, is it cheeky to be in the hwn "New Releases" section two weeks in a row? The cairo bindings have to be finnished for 1st Sep for xerox to get his grant. So we expect to be making a release next week.
11:32:39 <CosmicRay> SyntaxNinja: perhaps you need a drink as well ;-)
11:32:47 <CosmicRay> dcoutts: no problem at all.
11:32:59 <SyntaxNinja> looks good
11:33:32 <CosmicRay> dcoutts: you wouldn't be the first to hit it twice in a row.  personally, I'm thrilled if people are doing that.
11:33:37 <dcoutts> we'll do a Gtk2Hs special release including xerox's cairo binding, a "tech preview" :-)
11:33:50 <CosmicRay> dcoutts: ooo, you're getting all marketdroid on us! ;-)
11:33:56 <dcoutts> heh heh
11:34:05 <CosmicRay> pretty soon you will be "addressing issues"
11:34:10 <dcoutts> then he'll have something to point to when google ask him to justify his grant
11:34:15 <Speck> "making solutions"
11:34:21 <dcoutts> nooooo!
11:34:23 <CosmicRay> and "improving lives"
11:34:40 <dcoutts> oh, and "tasking people with, er... tasks"
11:34:44 <CosmicRay> heh
11:34:45 <SyntaxNinja> where do you want to go to change the way we live, work, and play is the network
11:35:05 <SyntaxNinja> oh, and think different
11:35:06 <CosmicRay> dcoutts: I'm afraid I'm going to have to pushback on that because it needs a realignment to achieve proper synergies with our mission
11:35:11 <yosemite> has anyone played much with parsec's permutation parser?
11:35:21 <CosmicRay> SyntaxNinja: haha
11:35:23 <dcoutts> CosmicRay, aaaargh!
11:35:40 * dcoutts runs away screaming
11:35:44 <Itkovian> brb
11:35:59 <CosmicRay> SyntaxNinja: you also forgot "we put the dot in .com"
11:36:12 <Speck> the dot is very important
11:36:20 <CosmicRay> you know, for the quotes of the week next week, I should just run a list of failed Sun slogans.
11:36:26 <SyntaxNinja> hehe
11:36:31 <SyntaxNinja> what defines them as "failed"?
11:36:39 <CosmicRay> the fact that Sun used them?
11:36:40 <SyntaxNinja> yeah, I snuck in an MS slogan too.
11:36:51 <SyntaxNinja> until sun has a strategy, all its slogans fail
11:37:03 <SyntaxNinja> was it sun who has a pay-per-compute web service starting?
11:37:06 <SyntaxNinja> I bet that'll pay.
11:38:05 <CosmicRay> yes, it is indeed our favorite purveyor of, urm, quality programming languages that's doing that.
11:38:13 <Igloo> Or you could open with a Haskell slogan!
11:38:36 <Igloo> "Haskell: Putting the lambda in programming"
11:38:36 <CosmicRay> Igloo: sure.  Got any good ones?
11:38:43 <CosmicRay> nice
11:38:59 <Igloo> If you hadn't put the "good ones" at the end I would have said yes  :-)
11:39:05 <CosmicRay> heh
11:39:48 <CosmicRay> you know, I suddenly realized that most of the things that Unix administrators loathe came from Sun.  NFS, NIS, Java, Solaris...
11:39:49 * Igloo can't think of a good word to spell with a lambda to make that sound like a good thing rather than a bad thing
11:40:04 <SyntaxNinja> CosmicRay: but we couldn't have done it without them!
11:40:22 <CosmicRay> SyntaxNinja: I guess it would have had to be ";com" or something then.
11:41:06 <SyntaxNinja> yeah, and that would totally suck
11:41:10 <CosmicRay> heh
11:41:11 <SyntaxNinja> but they do make some fast hardware
11:41:15 <CosmicRay> especially for VMS users
11:41:38 <CosmicRay> SyntaxNinja: well, I'd say they make some expensive hardware.  ;-)
11:42:43 <SyntaxNinja> I mean the really high-end stuff
11:43:10 <CosmicRay> yeah, fast with the I/O, and reliability, but isn't the cpu still behind the curve a wayS?
11:43:31 <CosmicRay> I dunno, I haven't used sun hardware in the last few years, but that's how it's traditionally seemed
11:44:08 <SyntaxNinja> idon't kow.
11:44:18 <SyntaxNinja> but it seems they're doing haircuts now too. www.sun.com
11:44:33 <SyntaxNinja> I bet its part of their strategy
11:44:43 <CosmicRay> or at least it will be if it succeeds
11:44:44 <CosmicRay> heh
11:45:14 <SyntaxNinja> oh actually, most of those slogans back there were cisco slogans, not sun slogans duh
11:45:20 <CosmicRay> at least they have a strategy
11:45:26 <CosmicRay> HP doesn't even have that
11:45:29 <CosmicRay> heh
11:46:03 <CosmicRay> HP's strategy seems to be a drastic upheaval about once every 3-5 years
11:48:03 <SyntaxNinja> damn., someone brought their lunch over and I'm starving
11:49:27 <CosmicRay> SyntaxNinja: pull a rev. robertson and assisinate them in the name of the lord and their oil... er, lunch.
11:50:30 <SyntaxNinja> that man is an evil s.o.b
11:50:43 <pesco> "We put the dot in com." How about that?
11:51:41 <CosmicRay> SyntaxNinja: I agree
11:52:13 <CosmicRay> SyntaxNinja: howard dean's organization sent out a press release saying "Rev. Robertson Issues Fatwah".  Had me cracking up.
11:52:29 <SyntaxNinja> haha. got a link?
11:52:38 <CosmicRay> let me check
11:52:38 <SyntaxNinja> its' funnny because its true.
11:52:47 <yosemite>  http://www.liberalsundermybed.com/SneekPeek.pdf
11:53:08 <CosmicRay> http://www.democracyforamerica.com/features/2005/08/24/robertson_issues_fatwah.php
11:53:27 <dcoutts> CosmicRay, it would be funnier if the guy wasn't so powerful/influential
11:53:46 <CosmicRay> SyntaxNinja: yup
11:54:21 <CosmicRay> and I like this quote: "the quixotic jihad against SpongeBob SquarePants"
11:54:22 <SyntaxNinja> yosemite: cute.
11:54:38 <SyntaxNinja> yosemite: I'm a little more worried about bush trying to run my life than hillary
11:54:44 <yosemite> yeah
11:55:00 <yosemite> it's more documentation in the conservative persecution complex
11:57:04 <CosmicRay> last night on ABC World News, Gibson was almost laughing when he read the copy about Robertson apologizing, then saying "we could just kidnap him instead of killing him"
11:57:07 <dcoutts> who is SpongeBob SquarePants?
11:57:15 <Beelsebob> you don't want to know
11:57:20 <CosmicRay> dcoutts: a cartoon character that some people claim is homosexual
11:57:45 <dcoutts> CosmicRay, oh right, I can see the religious right loving that one :-)
11:57:53 <Beelsebob> heh
11:58:03 <CosmicRay> http://en.wikipedia.org/wiki/SpongeBob_SquarePants_%28character%29
11:58:27 <yosemite> voiced by the very funny comedian Tom Kenny
11:58:43 <dcoutts> CosmicRay, when I lived in the USA for a year, they were trying to bad fairy tails from our elementary school library since they "encourage devil worksip".
11:58:51 <CosmicRay> heh
11:58:51 <dcoutts> bad/ban
11:59:23 <dcoutts> I'm so glad I live in a secular society
11:59:48 <Philippa_> tell me about it
12:00:15 <Philippa_> there's a serious risk I'd be first up against the stake...
12:00:41 <dcoutts> I always find it funny that the UK has an established church and is a secular country while the USA has strict seperation of church and state but is one of the most religiously charged places I know
12:01:20 <dcoutts> you never get UK politcans invoking god
12:01:44 <Philippa_> yeah, though you sure as hell still get pandering to folks re gay marriage. It's better than the US, but it's not perfect
12:02:07 <dcoutts> sure, it's not perfect
12:02:39 <dcoutts> we're still more conservative than most of Western Europe and Canada
12:03:25 <Philippa_> yup. Amazingly that occasionally works out for the better, mind - the Gender Recognition Act is much nicer than a lot of equivalent legislation elsewhere, for example
12:04:18 <greenrd> Philippa_: because of conservatism?
12:04:37 <Philippa_> because it took longer to implement and thus some of the problems with earlier legislation were better understood
12:08:47 <CosmicRay> really the US doesn't have a problem with this on the whole
12:09:06 <CosmicRay> it's just that the nutjobs and their candidates have been winning votes lately because the democrats can seem to put no a decent campaign anywhere
12:09:29 <CosmicRay> there are plenty of more mainstream religious types in the US that find all this abhorrent
12:10:48 <Philippa_> yeah, I know that much
12:10:55 <greenrd> well elections with only two realistic candidates (save for that one seat where a self-described socialist was elected) are not terribly good mechanisms for people to select policies of course
12:10:59 <Philippa_> there're still one or two issues getting beaten about badly by it though
12:11:25 <greenrd> Just because a person voted for Bush doesn't mean that they support the (whole of the) religious right agenda
12:12:30 <astrolabe> The data rate of elections is about 1 bit every 4 years
12:12:52 <tuomov> in the end, it doesn't matter that much. voting can only slow the speed of wind, not change its direction.
12:13:01 <liyang> (Vote Nader!)
12:13:45 <greenrd> Voting Nader is like using Haskell.
12:13:48 <greenrd> Hardly anyone does it.
12:14:11 <liyang> But we all know it's the superior choice. :)
12:14:12 <CosmicRay> greenrd: surprisingly enough, I've done both, though I regret one of them now ;-)
12:14:18 <greenrd> hehe
12:16:10 <astrolabe> So which language is like voting bush?
12:16:22 <yosemite> Java
12:16:39 <tuomov> brainfuck?
12:16:45 <CosmicRay> haha
12:16:49 <astrolabe> :)
12:16:58 <CosmicRay> astrolabe: cobol.
12:17:24 <CosmicRay> well liked by conservatives, despised by liberals, and popular even though nobody can figure out why.
12:18:52 <yosemite> actually I take the java remark back, I think Piet is more Bush's speed
12:18:54 <yosemite> http://www.dangermouse.net/esoteric/piet.html
12:19:33 <dcoutts> VisualBasic
12:20:17 <CosmicRay> dcoutts: hmm, aren't you thinking of Nixon with that one? ;-)
12:21:02 <dcoutts> well I was thinking of it being rather dumbed down
12:21:17 <CosmicRay> ahh, that works too
12:21:22 <dcoutts> popularist
12:21:25 <CosmicRay> I was thinking of the "stealing resources" aspect ;-)
12:21:33 <dcoutts> ah :-)
12:21:34 <CosmicRay> heh
12:21:50 <Chandra> how do i load a plugin in lambdabot?
12:22:02 <CosmicRay> @seen dons
12:22:03 <lambdabot> dons is in #haskell. Last spoke 5 hours, 51 minutes and 30 seconds
12:22:03 <lambdabot> ago.
12:23:23 <pesco> *cough* Is Peter Simons in this channel, by any chance? Author of Postmaster?
12:23:43 <CosmicRay> I don't believe he IRCs
12:23:59 <pesco> CosmicRay: Okay.
12:24:09 <CosmicRay> Chandra: I think you need to speak to dons, who is probably asleep at the moment
12:24:32 <pesco> CosmicRay: Pity, judging from his writing on the Postmaster website, he seems like a fun person.
12:31:27 <sieni> star wreck 4 1/2 <3<3<3
12:31:29 <yosemite> wow that was odd.  apt-get install was segfaulting on me.  doing an apt-get update fixed it
12:31:55 <Chandra> Cale, any ideas?
12:32:02 <Cale> Chandra: hm?
12:32:07 <Cale> oh
12:32:09 <Cale> hehe
12:32:17 <greenrd> I fixed an apt-get segfault years ago, but no-one seemed to care
12:32:19 * greenrd checks up on it
12:32:35 <Cale> You put the source into the Plugins directory (which is enough to get it to compile)
12:32:49 <Cale> then edit Modules.hs
12:33:42 <Chandra> okie
12:34:19 <Chandra> need to do a "make"?
12:35:01 <Cale> I suspect so
12:35:38 <Cale> This might not actually be the "right" way to do things -- I'm fairly sure you shouldn't so much as have to restart the bot in order to load a module, but I'm not sure how that part works.
12:56:00 <exe> Where can I report a segmentation fault?
12:56:28 <Lemmih> exe: GHC segfaulted?
12:56:42 <exe> Hugs, sorry.
12:57:20 <Igloo> Are you sure you didn't tell it to do an infinite loop?
12:58:04 <exe> I did, but doesn't have it a control stack overflow?
12:58:11 <p67634> hahah omfg, i just spent thinking about solving a problem...but the problem simply doesnt occur lol
12:58:22 <Igloo> If the C stack overflows then it just segfaults
12:59:59 <exe> But if I define: infinite :: Integer ; infinite = infinite + 1
13:00:06 <exe> Main> infinito
13:00:06 <exe> ERROR - Control stack overflow
13:00:17 <exe> s/infinite/infinito
13:00:23 <Igloo> That'll be the Haskell stack overflowing
13:00:53 <exe> But it's an infinite loop as well.
13:01:37 <Igloo> Different loops will overflow different stacks first
13:02:08 <Igloo> I believe it's a known issue, so I don't think anything will come of reporting it
13:02:17 <Igloo> hugs-bugs@haskell.org is the place if you disagree
13:02:49 <exe> Heh, well, thank you very much.
13:07:57 <cinema> Lemmih: I have Language/Haskell/GHC/HsDecls.lhs:49:59:
13:07:58 <cinema>     Module `Language.Haskell.GHC.ForeignCall' does not export `DNCallSpec'
13:08:14 <vegai> 0
13:08:27 <cinema> Lemmih: because there is a comment in ForeignCall
13:08:56 <Lemmih> cinema: I've recently removed the .Net support (DN*).
13:09:15 <Lemmih> Try pulling again.
13:09:56 <cinema> Lemmih: Just got the sources from the darcs repository though
13:10:06 <Lemmih> oops, my bad. Didn't push it all.
13:12:10 <dcoutts> simona, welcome
13:12:23 <Lemmih> cinema: Pushed.
13:12:50 <cinema> Lemmih: OK, I pull and recompile. Thanks
13:12:54 <simona> hi duncan
13:13:20 <dcoutts> simona, xerox is not about at the moment. He's been coding too much and has sore fingers :-)
13:13:30 <p67634> pull baby pull
13:13:37 <dcoutts> simona, (xerox == paolo)
13:14:15 <simona> Ok, I was about to ask. I'm totally lost. I spend over an hour compiling hircules. And I don't really know weather it's working properly.
13:14:29 <Chandra> does lambdabot support nickserv authentication?
13:14:40 <dcoutts> hircules? :-) and it actually works?
13:14:48 <simona> I can send you the source code :-) I don't know...
13:15:08 <dcoutts> well you're brave, I'd use something a bit more polished :-)
13:15:09 <simona> No, I had to change, say, 20 lines of code, both in gtk2hs and in hircules.
13:16:09 <dcoutts> juhp will be glade to know that someone is still using hircules
13:16:27 <Chandra> how do i authenticate with nickserv in lambdabot?
13:17:44 <dcoutts> simona, so no cairo in gtk2hs cvs yet, there are still a bit to be done to make it build again after the recent reorganisation
13:18:38 <simona> I think we weren't very forthcoming by not adding the all the functions he needed (e.g. keyboard shortcuts). BTW nobody is using Multiline/*, since the function textBufferNew cannot be used: the TextAttrTableClass t => constraint is too general if you supply Nothing. (yeah, that's a bit technical, sorry).
13:18:50 <TheHunter> Chandra, just put the password into the file State/passwd.
13:18:52 <simona> Ok. I might have some time on Saturday.
13:19:00 <Chandra> thanks :)
13:19:39 <dcoutts> simona, oh, people are using TextBuffer, but you can get one by just creating a TextView, I guess people must have been doing that
13:20:05 <dcoutts> simona, I've seen another irc client using gtk2hs and a simple telnet too
13:20:06 <simona> dcoutss, ok.
13:20:18 <dcoutts> simona, http://haskell.org/~duncan/gtk2hs/sirc.tar.gz
13:20:30 <dcoutts> that one was written by TFK
13:20:33 <dcoutts> @seen TFK
13:20:34 <lambdabot> I saw TFK leaving #haskell 4 days, 23 hours, 57 minutes and 8
13:20:34 <lambdabot> seconds ago, and I have missed 1 minute and 45 seconds since then.
13:21:05 <xerox> hi duncan
13:21:09 <xerox> it's hurting too much
13:21:10 <dcoutts> xerox!
13:21:13 <simona> dcoutts, IRC is a lot of magic words, I have the impression. Very unix like.
13:21:24 <simona> hi xerox. I'm the other guy.
13:21:34 <xerox> "other guy" ? :)
13:21:48 <dcoutts> xerox, simona is Axel
13:21:54 <xerox> Oh!
13:21:57 <simona> xerox, the other guy who works on gtk2hs.
13:22:00 <xerox> Nice to meet you personally :)
13:22:03 <dcoutts> simona, that's another reason for using a nice GUI IRC client (eg xchat) since it means you don't have to learn any commands
13:22:23 * dcoutts only discovered the "/me" command today
13:23:15 <tuomov> you know, back the DOS days there used to be text-based programs where you didn't have to learn a lot of things, so it is not limited to "GUI"
13:23:36 <xerox> I'm really really sorry, simona, dcoutts.  I need to not write for some time, it's hurting too much
13:23:45 <cinema_> Lemmih: The compilation succeeded. Thanks a lot
13:23:51 <dcoutts> simona, people seem to use xchat, gaim, some mozilla thing (and some even use emacs)
13:23:58 <tuomov> in the DOS days there also were graphical non-GUI apps
13:24:04 <dcoutts> xerox, ok, see you tomorrow perhaps
13:24:08 <xerox> the forearm, sob
13:24:13 <xerox> or whatever is called
13:24:19 <tuomov> those were the days :)
13:24:26 <xerox> I hope so, I hope it's all OK :(
13:24:37 <simona> dcoutts, ok one step after the other. sirc doesn't compile out of the box either.
13:24:38 <xerox> pain wrist, that is
13:24:41 <Lemmih> cinema_: What are you going to use ghc-src for, OOI?
13:25:01 <dcoutts> xerox, actually, lots of little issues actually, we can talk about it later
13:25:13 <xerox> Thanks.  Goodnight.
13:25:29 <dcoutts> g'night xerox, hope it's better tomorrow
13:25:56 <cinema_> Lemmih: Well I wanted to see if I could use it to create a semantic-colorizer (as in Epigram papers)
13:26:03 <dcoutts> simona, oh you're right, hmm I wonder what changed...
13:26:22 <SyntaxNinja> hm. is simona a Simon, or another Simon?
13:26:24 <simona> dcoutts, we put an extra TextIter into the arguement of one handler.
13:26:28 <cinema_> Lemmih: First with plain-haskell, then with Omega
13:26:45 <simona> SyntaxNinja, probably not, there are many simons in FP...
13:27:00 <psi> dcoutts: hey, it works now
13:27:04 <simona> dcoutts, excuse me for a sec
13:27:09 <psi> I made that change and it works
13:27:15 <dcoutts> simona, yeah, actually I think it was always there but I was playing around with it when debugging a problem
13:27:23 <dcoutts> so it's my fault :-)
13:27:39 <dcoutts> psi, really? what changed?
13:28:01 <dcoutts> oh the one I suggested? ah, that's very interesting
13:28:17 <dcoutts> dcoutts_shIRC, hello axel
13:28:23 <psi> yes, precisely
13:28:37 <dcoutts> dcoutts_shIRC, you notice the nick is hard coded in that irc client :-)
13:28:52 <dcoutts_shIRC> hi duncan
13:28:58 <dcoutts> :-)
13:29:24 <dcoutts_shIRC> join #haskell
13:29:37 <boegel|home> dcoutts: who is dcoutts_shIRC ?
13:29:44 <dcoutts> dcoutts_shIRC, you're already here! :-)
13:30:00 <dcoutts_shIRC> dcoutts, oh ok. It's confusing, I'm a newbee.
13:30:13 <boegel|home> wtf ? :)
13:30:21 <dcoutts> boegel|home, it's simona but he's using an irc client using gtk2hs, which has my irc nick hard coded in it :-)
13:30:33 <boegel|home> dcoutts: cool :)
13:30:39 <boegel|home> way to go gtk2hs :D
13:30:39 <dcoutts_shIRC> dcoutts, hircules looks a bit nicer though. In particular since the main window scrolls (grmpf)
13:31:24 <dcoutts> simona: using a gtk2hs irc client is very loyal, but I'd really suggest something less hard-core like xchat :-)
13:32:05 <dcoutts> yes, sirc is very basic, actually it's a nice demo of using threads in a Gtk2Hs GUI
13:32:24 <dcoutts> partly because the GUI is only 100 lines or so
13:33:10 <dcoutts> simona: have you seen our latest cairo images?
13:33:22 <dcoutts_shIRC> Ok, I tried xchat. I'm kind of a lucky guy. After the main window I got: ~/source/hircules-0.3:$ xchat irc.freenode.net
13:33:48 <dcoutts_shIRC> dcoutts, Nope is it on the web page?
13:33:53 <dcoutts> http://haskell.org/~duncan/cairo/lsystem-demo/LSystem.png
13:34:17 <dcoutts> and there are a couple others at
13:34:17 <dcoutts> http://haskell.org/~duncan/cairo/lsystem-demo/
13:34:45 <dcoutts> the source code is there too
13:34:53 <dcoutts> it's nice and short :-)
13:35:35 <basti_> hi all
13:36:17 <basti_> i was just pondering about talking about programming languages in linguistic terms
13:36:35 <dcoutts_shIRC> dcoutts, I see. Yes the source code (at least the GUI part) is really short.
13:36:40 * boegel|home just heard some professor he had a class from died today :s
13:38:00 <basti_> boegel: a prof of mine died of infarct in his office. left me sad in a bizarre way
13:38:38 <dcoutts_shIRC> boegel, which uni are you at?
13:38:42 <liyang> Overworking too hard? :-/
13:39:08 <basti_> no, too fat.
13:39:16 <liyang> Hm...
13:39:56 <dcoutts> dcoutts_shIRC, (in case you didn't know, boegel is the HRay author)
13:39:57 <basti_> he was a good guy
13:40:31 <dcoutts> dcoutts_shIRC, it's still confusing, you having that irc nick!
13:40:46 <dcoutts> dcoutts_shIRC, did xchat not work?
13:42:34 <dcoutts_shIRC> dcoutts, nope, it segfaulted. Maybe hircules wasn't such a bad choice.
13:43:05 <dcoutts> oh, or there's gaim, or mozilla has an irc component
13:44:47 <dcoutts_shIRC> quit
13:45:15 <dcoutts> as49, welcome back
13:46:52 <as49> dcoutts, oi, can I now type NICK again, or is that too low level (I could read the help thing, but..)
13:47:52 <dcoutts> as49, not sure. what are you using now?
13:48:07 <as49> dcoutts, xchat
13:49:04 <boegel|home> as49 = dcoutts_shIRC ?
13:49:07 <dcoutts> as49, ah well you can change your nick by clickin on your current name next to the entry box
13:49:26 <dcoutts> boegel|home, yeah, we're experimenting with irc clients :-)
13:49:36 <boegel|home> as49: or by using '/nick new_nick'
13:49:55 <boegel|home> as49: I'm at Ghent university (well, not right now, but you get the picture)
13:50:28 * Igloo thinks someone should write a decent Haskell client before I sink to the level of hacking the irssi source to be more sensible about activity numbers  :-)
13:51:09 <as49> boegel: the /nick thing doesn't seem to work
13:51:15 <dcoutts> Igloo, well there are two Gtk Haskell clients you can start with, hircules is probably the more advanced
13:51:27 <Igloo> I don't what a Gtk client
13:51:57 <as49> dcoutts, but I think it was a nice try...
13:52:12 <dcoutts> as49, or you can set your nick when you log on
13:52:31 <as49> dcoutts, ok. I'll try that next time. Maybe it doesn't crash on my then.
13:52:59 <dcoutts> but it should also be possible to do it now by clicking the nick button in the bottom left corner
13:53:29 <dcoutts> as49, what version of xchat is that?
13:53:42 <as49> dcoutts, 2.4.0
13:54:04 <dcoutts> ok, then the gui ought to look much like the one I'm using
13:54:42 <as49> dcoutts, you're right, I can click on my nick (weird UI), and enter a new nick name. But nothing happens.
13:54:49 <dcoutts> oh, hmm
13:54:58 <psi> perhaps it is in use
13:55:20 <dcoutts> heh heh
13:55:36 <psi> the server tab would contain a message in that case
13:55:46 <psi> ...i think
13:56:08 <blahblah> psi, yes it does. I tried "blahblah", it complained that it is in use. But now my nick name (in the button) has changed to "blahblah".
13:56:39 <psi> you did change nick to blahblah
13:56:46 <as49> psi, at least I can change it back to as49. I was logged in as simona with another client when I started xchat.
13:57:12 <as49> psi, I think I'm annoying people with my beginner's probs.
13:57:31 <psi> nah, I doubt it :)
13:58:32 * boegel|home leaves
13:59:47 <dcoutts> as49, no don't worry we get lots of haskell beginners here, but irc beginners who are Haskell experts are most welcome too :-)
14:03:41 <dcoutts> as49, and if you hang around here long enough you're in danger of being converted to other things too, like darcs
14:03:46 <dcoutts> and cabal
14:03:57 <dcoutts> and what else is on the current cool list?
14:04:12 <SyntaxNinja> cabal!
14:04:14 <SyntaxNinja> not darcs!
14:04:52 <kaol> darcs is not cool?
14:04:55 <dcoutts> SyntaxNinja, I'm sorry I think I missed your pro-cabal anit-darcs stance!
14:06:03 <dcoutts> SyntaxNinja, so is there anything else on the #haskell cool list apart from cabal?
14:06:25 <reppie-tan> does ghc use pthreads yet? :(
14:06:50 <dcoutts> reppie-tan, yes but not in the way you'd expect
14:07:01 <reppie-tan> how does it use them?
14:07:26 <SyntaxNinja> dcoutts: you mean besides you and Igloo?
14:07:38 <dcoutts> reppie-tan, it does for calling foreign functions at the same time as running Haskell code, but not for running haskell code concurrently
14:07:52 <dcoutts> SyntaxNinja, hmm.
14:08:03 <reppie-tan> dcoutts is there a reason it doesn't use it to run haskell code concurrently?
14:08:27 <dcoutts> reppie-tan, that's actually the subject of a paper that Simon Marlow is just about to publish
14:08:35 <reppie-tan> so there is
14:08:41 <dcoutts> reppie-tan, in other words it's a feature that is currently in development
14:08:49 <reppie-tan> ah, sweet
14:08:52 <dcoutts> indeed
14:09:17 <dcoutts> there will be a "ghc --make -j 2" option
14:09:53 <reppie-tan> to compile?
14:09:58 <reppie-tan> you don't need to use threads to do that
14:10:20 <dcoutts> yes, but they're using ghc itself as a testbed for the threads feature
14:10:21 <as49> dcoutts, oh cool, then we can redo the Makefiles of gtk2hs and build in parallel (just kidding)
14:10:30 <dcoutts> as49, :-)
14:10:48 <dcoutts> as49, yeah, just as soon as we convert to building with cabal :-)
14:11:31 <dcoutts> as49, you need to prod SyntaxNinja to keep adding features until we can build gtk2hs using cabal
14:11:47 <as49> dcoutts, and external c2hs, cairo, gnome libraries and the fancy stuff of Gtk that we don't understand
14:11:58 <dcoutts> oh yes, that too :-)
14:12:06 <dcoutts> so not much really
14:13:09 <as49> dcoutts, ah I c
14:13:29 <dcoutts> I wonder sometimes with the number of gtk2hs questions that I get whether we need a seperate #gtk2hs channel
14:16:55 <as49> dcoutts, I think we just need to start with that ** tutorial. That might help a lot.
14:17:05 <dcoutts> hmm yes
14:18:01 <dcoutts> everyone dissapears when we ask for volunteers on that issue
14:19:11 <dcoutts> if I could get everone here who I've fixed a bug for to write a bit of the tutorial then it'd be quite substantive
14:19:15 <SyntaxNinja> dcoutts: yeah, another channel woluld be good, that way, we can send ppl there, and when there's no one else on that channel, they will just go away
14:19:35 <dcoutts> heh :-)
14:19:46 <SyntaxNinja> dcoutts: maybe you should start a wiki tutorial and see if it takes off
14:20:16 <dcoutts> SyntaxNinja, hmm that's not a bad idea
14:20:16 <Philippa_> heh. Dammit, that reminds me - I've really gotta finish off that TMR article
14:20:41 <dcoutts> Philippa_, yeah, me too. What are you writing about
14:20:49 <Philippa_> unfortunately I've just run into one of those bits where there's a clear separation in the target audience - some're familiar with the idea of variance in type variables, some aren't
14:21:00 <Philippa_> a possible subtyping mechanism for haskell
14:21:05 <SyntaxNinja> Philippa_: !!
14:21:10 <dcoutts> Philippa_, oh, right down my street
14:21:21 <Philippa_> yes, *that* damn thing I've been talking about for too long :-)
14:21:40 <Philippa_> (it's an extension not a "Haskell's overlooked subtyping system" thing, FWIW)
14:21:54 <Philippa_> feel free to have a peek at the WIP and leave comments and stuff
14:21:55 <dcoutts> Philippa_, I'm working on an analysis for Haskell programs that uses a type inference mechanism for a Haskell type system extended with subtyping
14:22:02 <Philippa_> ah, cool
14:22:12 <Philippa_> I'm wondering if we do the same kind of subtyping now...
14:22:45 <SyntaxNinja> dcoutts: there's a big mental separation between starting a tutorial and contributing to a tutorial
14:22:51 <as49> dcoutts, oh dear, somebody's doing your PhD. Your worst nightmare.
14:22:54 <Philippa_> yeah, definitely
14:22:57 <dcoutts> Philippa_, the subtyping system I'm working with is for control flow rather than OOP style subtypes
14:23:11 <Philippa_> yeah, I could sort of be seen to be doing that
14:23:24 <dcoutts> SyntaxNinja, you mean "start it and people will come"
14:23:31 <Philippa_> (I'm sure not doing OOP style ones, they just don't work right for variant types)
14:23:39 <SyntaxNinja> dcoutts: not quite, but "spearhead it" and "spear will follow" maybe ;)
14:23:45 <Philippa_> as49: I doubt it, if nothing else this is just my undergrad project ;-)
14:23:47 <as49> SyntaxNinja: maybe you're right. We should at least put up some section headings.
14:23:49 <dcoutts> SyntaxNinja, :-)
14:24:05 <SyntaxNinja> that way if the spear doesn't follow, I can just say it was obviously not a spearhead, by definition ;)
14:24:08 <dcoutts> as49, yes, I think it's unlikely. I'm doing odd stuff. :-)
14:24:33 <Philippa_> I do suspect I at least know roughly what you're playing with, but you're certainly doing more than I am
14:24:34 <as49> dcoutts, oh that's good. You competition then. Make you sleep much better.
14:24:51 <dcoutts> as49, this analysis is a binding time analysis for use in partial evaluation
14:25:13 <as49> Pahilippa: he might, but then, he's spending a lot of time on Gtk2Hs. Which I don't mind :-)
14:25:31 <Philippa_> heh
14:25:34 <dcoutts> as49, yeah. hmm.
14:25:41 <as49> dcoutts: is the partial evaluation bit somebody else's problem?
14:25:41 <Philippa_> Wish I was just spending more useful time generally, but hey
14:25:55 <dcoutts> as49, no it's all my problem :-)
14:26:09 <dcoutts> as49, but the binding time analysis is one of the harder bits
14:26:09 <as49> dcoutts: are you implementing something into ghc?!
14:26:37 <as49> dcoutts: no wait, that was the TH bit, right?
14:26:44 <dcoutts> as49, well at the moment my implementation aid is Template Haskell, but it could do with bein implemented at a lower level really
14:27:40 <dcoutts> if it doesn't seem very practical with TH I might go lower level
14:28:22 <ski> (Philippa_ : re not OOP subtypes, you mean variant types extend in the opposite direction ?)
14:28:41 <as49> dcoutts: It's worthwhile if you want to build a research career on top of it. If it's just for the PhD, it's probably a waste of time. You get more papers if you build simple prototypes. That's my judgement anyway.
14:28:51 * ski wonders how one subtypes control flow
14:29:41 <dcoutts> as49, yes sadly. it'd be nice to build something practical however. I know it doesn't get so much emphasis though.
14:29:45 <Philippa_> ski: yup, same old same old as ever
14:29:58 <Philippa_> ski: you got TMR rights? If so, go have a peek at what I've written so far
14:30:27 <Philippa_> I could use some advice on the variance section, I'm not sure how to start it. I'm half tempted to give definitions of covariant, contravariant and invariant in a footnote...
14:30:42 * ski would think it's just that OOP system usually provide subtyping only for records
14:31:09 <dcoutts> as49, I think it's a problem in CS funding that making useful things is not encouraged.
14:31:19 <ski> (s/system/systems/)
14:31:42 <dcoutts> as49, It seems to be assumed that industry will pick up interesting ideas, but we all know that that isn't true.
14:32:00 <Philippa_> yeah, I'd love to have a job developing existing ideas
14:32:17 <Philippa_> so far it seems my best bet is to pitch stuff at Google though
14:33:07 <dcoutts> Philippa_, well apparently they think Haskell is cool. They funded xerox to do his project with gtk2hs and Haskell cairo bindings.
14:33:21 <Heffalump> dcoutts: how do you define useful?
14:33:28 <Philippa_> yeah, I know that much
14:33:53 <Heffalump> abc is kind of useful, and Oege seems to have attracted lots of funding by doing it
14:33:58 <dcoutts> Heffalump, people outside of the lab using it. ABC would be an example of useful.
14:34:17 <dcoutts> Heffalump, yes I admire Oege for it. It's not that common however.
14:34:50 <Philippa_> I'd love to have a go at the FPL that's a better C than C
14:34:54 <Heffalump> well, my main point is that as a result of doing it, he's been getting really really good reviews on his funding applications
14:35:34 <dcoutts> Heffalump, yes it's great. But you must admit it's not so common. But maybe the funding people are changing their attitudes.
14:35:37 <Heffalump> so at least in one case doing useful stuff is being encouraged by the funding
14:35:43 <as49> Heffalump, what is ABC?
14:35:48 <Heffalump> Is it that people generally don't do useful stuff, though?
14:35:54 <Heffalump> as49: an AspectJ compiler
14:36:01 <dcoutts> @google aspect bench java
14:36:02 <lambdabot> http://aosd.net/2005/archive/AW2_AOSD.05.ppt
14:36:06 <dcoutts> hmm
14:36:15 <Heffalump> @google abc aspectj
14:36:17 <lambdabot> http://aspectbench.org/
14:37:51 <psi> is this supposed to work with gtk2hs: set scrolledWindow [scrolledWindowHscrollbarPolicy := PolicyAutomatic]
14:38:11 <dcoutts> psi, I guess so
14:38:28 <psi> I'm getting a lot of GLib-GObject-CRITICALs
14:38:39 <psi> and it doesn't work
14:38:50 <as49> pdi: what are you talking about? did I miss something?
14:39:30 <dcoutts> see, we need a #gtk2hs support channel :-)
14:39:36 <psi> I'm using a scrolledWindow, but I want the horizontal bar to only appear when neccesary
14:39:43 <psi> so I added that call
14:39:57 <psi> but it doesn't work and I get a lot of error messages in the terminal
14:40:29 <psi> want to see them?
14:40:49 <dcoutts> yep, the first fe anyway
14:41:13 <yosemite> I'm pleased with how readable lambdabot's source is
14:41:22 <psi> GLib-GObject-WARNING **: gvalue.c:96: cannot initialize GValue with type `GEnum', this type is abstract with regards to GValue use, use a more specific (derived) type
14:41:22 <yosemite> although grep helps
14:41:27 <psi> GLib-GObject-CRITICAL **: g_value_set_enum: assertion `G_VALUE_HOLDS_ENUM (value)' failed
14:41:39 <psi> and a few more...
14:41:43 <dcoutts> ok
14:41:53 <dcoutts> let me look at the code underneath...
14:42:36 <dcoutts> as49, my suspision is that glib wants to know the exact GType for the enum, not just GType.enum
14:43:00 <dcoutts> as49, that would be annoying since we don't currently track the enum's GType
14:44:06 <Lemmih> Philippa_: Extremely minimal wiki implementation using HSP: http://212.242.49.100/work/hsp/Wiki
14:44:39 <goron> Lemmih: And it works!
14:46:07 <as49> dcoutts, I can only guess how this is wrong and how it is a problem
14:48:06 <Philippa_> Lemmih: cool
14:48:07 <dcoutts> as49, lets take this issue off #haskell
15:11:30 <dcoutts> psi, so yes, it's a bug. For the moment you'll have to use scrolledWindowSetPolicy
15:14:50 <psi> alright
15:15:22 <dcoutts> which does the same thing but doesn't use the nice set [ prop := value ] syntax
16:10:38 <psi> how would I make a scrolledWindow (gtk2hs) scroll via code? to the bottom for instance. I'm reading the docs but I can't quite figure it out.
16:13:42 <psi> hm, I guess it is the child widget that should be told to scroll
16:14:17 <MJ`> hey all
16:14:41 <Itkovian> night
16:22:43 <dcoutts> Itkovian, good night, and ta for the parser, I look forward to the parsec version
16:23:08 <Itkovian> dcoutts: almost finished with a rough version
16:23:15 <dcoutts> cool
16:23:26 <Itkovian> far easier than happy imo
16:25:07 <dcoutts> yeah, and the speed of happy is not needed very often
16:26:03 <Itkovian> is happy faster?
16:27:40 <dcoutts> yes, it can be very fast
16:27:46 <ski> hiya MJ`
16:27:56 <dcoutts> especially in combination with the scanner generator alex
16:28:39 <dcoutts> ghc uses alex+happy for it's .hs parser
16:29:13 <dcoutts> ghc lexes directly from the file rather than going via a String
16:29:43 <Itkovian> ah, ok.
16:41:37 <Itkovian> erm, parsec yields Double values, where I need a float ... hugs' fromDouble doesn't seem to be found in ghci
16:42:21 <Heffalump> fromRational or toRational?
16:43:04 <Igloo> fracToReal
16:43:11 <Igloo> Err, IM realToFrac, I think
16:43:54 <Itkovian> @hoogle fromDouble
16:45:01 <Heffalump> @hoggle Double -> Float
16:45:02 <lambdabot> Prelude.fromIntegral :: (Integral a, Num b) => (a -> b)
16:45:02 <lambdabot> Prelude.realToFrac :: (Real a, Fractional b) => (a -> b)
16:45:02 <lambdabot> Prelude.round :: (RealFrac a, Integral b) => (a -> b)
16:45:09 <Itkovian> thx Igloo
16:45:20 <Heffalump> in what way is Float an instance of Integral??
16:45:56 * ski thought hoogle just ignored class constraints, for now
16:46:12 <Heffalump> if it did, surely it'd have found lots more things
16:46:20 <Heffalump> oh, maybe not.
16:46:22 <Heffalump> oh well.
16:46:24 <Igloo> Like floor. Maybe lb just chops it off
16:46:24 * Heffalump goes to bed
16:46:39 <TheHunter> @hoogle+ Double -> Float
16:46:40 <lambdabot> Prelude.floor :: (RealFrac a, Integral b) => (a -> b)
16:46:40 <lambdabot> Prelude.truncate :: (RealFrac a, Integral b) => (a -> b)
16:46:40 <lambdabot> Prelude.ceiling :: (RealFrac a, Integral b) => (a -> b)
16:46:50 <TheHunter> @hoogle+ Double -> Float
16:46:51 <lambdabot> Prelude.seq :: (a -> b -> b)
16:46:51 <lambdabot> Prelude.const :: (a -> b -> a)
16:46:51 <lambdabot> Prelude.($) :: ((a -> b) -> a -> b)
16:47:05 <Igloo> Err?
16:47:40 <TheHunter> @hoogle Bool -> ()
16:47:41 <lambdabot> Prelude.fromIntegral :: (Integral a, Num b) => (a -> b)
16:47:41 <lambdabot> Prelude.realToFrac :: (Real a, Fractional b) => (a -> b)
16:47:41 <lambdabot> Prelude.round :: (RealFrac a, Integral b) => (a -> b)
16:48:01 * Igloo doesn't understand seq at all
16:48:26 <Igloo> Or does it allow it to match just a part of the type?
16:48:37 <ski> Igloo : i think it both can introduce new args, and flip arg order
16:48:37 <Igloo> No, even then it doesn't make sense
16:48:40 <TheHunter> i don't know. @hoogle often gives inacurate results.
16:48:51 <Igloo> Urgle
16:49:01 <Igloo> I guess to get reasonable results it is ordering by edit distance or something?
16:49:28 <Korollary> we should rename it to @askheeves, then
16:49:31 <ski> (something like that iirc .. you could ask ndm)
16:50:38 <TheHunter> btw, dons, could you update @hoogle? I've sent ndm some pretty-printer updates a while ago.
16:50:51 <TheHunter> *hoogle
16:52:52 <TheHunter> hmm, if hoogle were under darcs, i'd also fix Prelude.($).
17:05:11 <lispy> TheHunter: if the ghc libs were in darcs, or easy to find or something.  I'd try to improve the hopengl api
17:05:21 <lispy> TheHunter: it has has TOO much typing going on
17:05:46 * lispy suspects those libraries are in darcs, but it's hard to pin down if that version is actually kept updated
17:08:17 <Korollary> lispy: I've just got a job offer yay !
17:09:37 <SyntaxNinja> Korollary: congrats
17:09:52 <lispy> Korollary: cool
17:09:56 <Korollary> thanks all
17:10:02 <lispy> Korollary: where at?
17:10:26 <Korollary> at makers of Java, but it's not java related
17:11:51 <Philippa_> 'snot as if Java's all Sun've ever done by a long way :-)
17:12:20 <Igloo> No, Sun has made /lots/ of mistakes  :-)
17:12:30 <lispy> ouch
17:12:35 <mwc> Hehehe, Igloo, I was just trying to come up with such a tactful way to put it myself :P
17:13:00 <Korollary> yeah the stock's been at $3 for the last three years, as well
17:13:35 <mwc> Korollary, Solaris? Fcode? You could tell us but you'd have to kill us?
17:14:16 <Korollary> mwc: I could tell you it's about networks and storage. not os or language related.
17:15:03 <Korollary> I am still interviewing with other companies tho
17:15:25 <Korollary> lispy should too, imho
17:15:45 <mwc> Hmm, cool, SunGRID?
17:16:17 <Korollary> mwc: nope. the product is not officially out yet.
17:19:17 <lispy> Korollary: hehe, yeah...i should try to find a job, but I just promised my gf that I would try at least one more term of school
17:19:32 <lispy> she's tried of moving :)
17:19:52 <Korollary> ah yeah
17:19:58 <mwc> Heh, lispy, how many years of school have you done?"
17:20:19 <lispy> well, i have a bs in math and one in cs, now i'm starting my second year of my masters
17:20:54 <lispy> finishing my masters would be a good experience, and help me find a good job
17:21:03 <lispy> and it's paid for since i'm a research assistant
17:21:10 <lispy> so it's stupid to not finish it
17:21:48 <Korollary> lispy: it all depends on the job you want after you get your MS. If it doesn't require an MS, then it will just mean having made less money in the last 2 years.
17:23:45 <Korollary> so few jobs put down an MS or PhD as a required degree. Many would say they'd prefer an MS, but always accept relevant experience as a substitute.
17:25:06 <lispy> right, and on the job experience is something i lack
17:25:27 <Korollary> they'll waive up to 2 years of experience if you have an MS.
17:25:32 <lispy> of course i program in my own time and i stay on top of things, but i don't have a previous employer that can vouche for my skills
17:48:15 <Lemmih> Does hs-plugins work on Windows?
17:48:31 * lispy pokes dons 
17:49:25 <Lemmih> @time-in sydney
17:49:27 <lambdabot>  Friday, August 26, 2005 at 10:50:31 AM EST
18:15:01 <dons> moin
18:15:25 <dons> Lemmih, hs-plugins works on windows, yes. with cygwin or mingw. mingw is faster and more stable.
18:16:01 <Lemmih> 'morning, dons.
18:16:04 <Lemmih> Great.
18:17:02 <Lemmih> You got mail, btw.
18:17:50 <dons> yep. :)
18:17:58 <Lemmih> And I'm off to bed. Good night.
18:18:37 <dons> ciao!
18:45:57 <reppie-tan> they're taking the hobbits to isengard!
18:47:56 <liyang> what did you say?
18:54:32 <TheHunter> hey lispy_
18:54:53 <lispy_> hey
18:55:41 <TheHunter> wanna take a "quiz"?
18:55:53 <lispy> sure
18:56:00 <TheHunter> http://www.pbs.org/speak/seatosea/americanvarieties/map/map.html
18:56:11 <TheHunter> i'm interested to know if you get all of them right.
18:56:47 <TheHunter> i identified north and south, the rest was distributed pretty randomly.
18:56:57 <lispy> it will have to wait a bit tho
18:57:00 <lispy> on the phone
18:57:43 <TheHunter> sure, take your time.
19:02:12 <Korollary> TheHunter: it's hard for me
19:03:33 <TheHunter> hmm, interesting. I think the samples are just too short.
19:05:35 <lispy> i can only hear a difference between one or two of them
19:05:48 <lispy> and three of them won't play
19:06:22 <lispy> out of the ones that work, i got none of them correctp
19:06:35 <lispy> i've also not traveled to other parts of the us
19:07:03 <TheHunter> so it's indeed very hard.
19:07:11 <TheHunter> thanks.
19:07:16 <lispy> yeah, np
19:07:21 <lispy> kinda wish i could tell :)
19:09:12 <lispy> the one that says "the cow is parked at the curb" is odd to me
19:09:17 <lispy> why would you part a cow?
19:09:20 <lispy> er park
19:10:44 <TheHunter> isn't it "the car"
19:10:45 <Korollary> the car
19:10:52 <Korollary> lol
19:11:18 <lispy> heh, i thougt he said cow
19:11:36 <Korollary> man, you trust your ears way more than your common sense
19:12:00 <lispy> E and F are the two that sound the strangest to me
19:12:38 <lispy> i wish i could get G to play
19:12:48 <lispy> it seems like the ones in the north east sound the strangest to me
19:12:49 <TheHunter> G was the easiest.
19:14:17 <TheHunter> probably because that's how many people talk here, messing up just about every vowel.
19:14:31 <TheHunter> Funnily, i can only notice that with female speakers.
19:15:07 <Korollary> where are you TheHunter
19:15:09 <lispy_> TheHunter: what part of the world are you from?
19:15:44 <TheHunter> i'm from germany, and i've been in MI for one month.
19:15:59 <lispy_> misery?
19:16:06 <lispy_> ;)
19:16:54 <Korollary> I am sure they dont get to hear a german accent that much in mi.
19:19:23 <lispy_> TheHunter: so do you have a place to buy bread?
19:19:33 <lispy_> i hear from germans that our bread is very different
19:20:06 <mwc> What's this? Accents?
19:20:12 <mwc> *enter the Canadian*
19:20:14 <lispy_> mwc: yeah
19:20:28 <TheHunter> well, there is a place where i can buy bread, but actually, i've usually been buying buns.
19:21:07 <TheHunter> i find myself already totally adapted to american food.
19:21:27 * mwc sends TheHunter a maple syrup hamburger
19:21:33 * Korollary doesnt know what american food technically is
19:21:34 <TheHunter> for example today, i had pizza for lunch and a chicken burger with fries for dinner.
19:21:52 <lispy_> TheHunter: ah, yes, you are adapted then
19:21:58 <mwc> IT seems all Canadian food involves maple syrup
19:22:01 <lispy_> TheHunter: next you'll be eating at subway :)
19:22:10 <Korollary> like Jarod
19:22:19 <mwc> I would venture then that American food consists mostly of starudated transfats :P
19:22:25 <Korollary> and suing McDonalds
19:22:26 <TheHunter> lispy_, i've already been eating at subway :)
19:22:50 <Korollary> quizno's > subway
19:23:07 <lispy_> Korollary: nah, guizno's has the unfortunate tradition of toasting things
19:23:24 <lispy_> but, i prefer asian food over american
19:23:29 <TheHunter> it's probably not entirely fair to equate american food with stuff like pizza and hamburgers.
19:23:32 <mwc> Papa Johns > * I hear
19:23:44 * TheHunter doesn't like asian food.
19:23:53 <mwc> We finally got a Krispy Kreme here. I die for it every week
19:24:05 <lispy_> mwc: what is that?
19:24:15 <Korollary> oh come on
19:24:33 <lispy_> fast food?
19:24:38 <Korollary> donuts
19:24:41 <lispy_> ah
19:24:44 <mwc> Not Doughnuts
19:24:54 <mwc> These are like GOD'S doughnuts
19:24:54 <TheHunter> oh, i _love_ donuts.
19:25:00 <mwc> It's Jesus come in sugar form
19:25:58 <mwc> TheHunter, find yourself a krispy kreme and break out the pregancy pants
19:26:00 <lispy_> in the last year or so i lost my ability to eat high fat food.  no more jack 'n the box for me
19:26:12 <mwc> lispy, woah, what happened, and how do I avoid it?
19:26:32 <lispy_> mwc: it was just a spontaneous change as near as we can tell
19:26:48 <mwc> There but for the grace of god go I
19:26:53 <lispy_> i started getting really ill a couple times a week.  Went to see the doctor....
19:27:02 <mwc> I can't feel full unless I've pigged out on either starch or fat
19:27:22 <mwc> I could eat salad all day and still get hunger paigns
19:27:23 <lispy_> i've switched to mostly rice + vegetables
19:27:25 <Korollary> feeling full is caused by fats naturally
19:27:44 <lispy_> on the + side, i've lost some weight
19:28:02 <TheHunter> mwc, yeah, they look exactly like the kinds i like :)
19:28:06 <lispy_> and when food makes you sick, it doesn't take long to develop an aversion to it
19:28:23 <mwc> I know what you mean, I can't eat vegetables
19:28:32 <lispy_> so, now i find myself less interested in fast food.  The smell of french fries actually turns me off now
19:28:32 <mwc> If I was born before Centrum, I'd be dead by now
19:29:33 <mwc> I'm stuck with being a hypertaster, I can eat only bland vegetables. Most of them have really horrible bitter tastes
19:30:01 <mwc> Apparently it's a common thing to go with ADHD
19:30:52 <lispy_> huh, crazy
19:31:37 <mwc> Yeah, keeps me sober though :P
19:32:06 <Korollary> I stopped eating cheese
19:32:10 <mwc> IHmm
19:32:29 <Korollary> because of principle. I actually liked cheese as much as anybody
19:32:39 <lispy_> Korollary: i'll still eat cheese if it's not a large precentage of the meal
19:32:45 <Korollary> and I realized that I didnt miss it at all. French fries on the other hand, I missed badly
19:32:55 <mwc> APparently if you stop eating dairy; your body looses the ability to break down lactose
19:33:17 <mwc> mammals normally stop synthesizing lactase when they ween, but humans consume it regularly and it never shuts down.\
19:33:31 <Korollary> lispy_: I can (and rarely do) have pizza with no problem
19:34:48 <lispy_> i still take a chance on pizza once in a while
19:34:52 <lispy_> but i shouldn't....
19:34:57 <lispy_> it's a real gamble for me
19:46:27 <mwc> god, I eat pizza 3 times a week
19:46:45 * mwc prays this never happens to him
20:11:43 <gak> how can i view the code in the Prelude?
20:12:55 <Cale> gak: http://www.haskell.org/onlinereport/standard-prelude.html
20:14:10 <Cale> note that the actual implementations of those functions may be somewhat different from that which is listed there -- if you want to see the actual implementation, it's included in the GHC source code.
20:14:18 <gak> oh ok thanks
20:17:02 <lispy_> @libsrc Prelude
20:17:02 <lambdabot> http://darcs.complete.org/fptools/libraries/base/Prelude.hs
20:43:03 <juhp> dcoutts: sirc.tar.gz doesn't build for me
21:12:58 <exe> Gnite.
21:51:01 <gak> is there a function that returns a list where the elements are in reverse order
21:52:39 <dons> reverse . sort ?/
21:52:52 <dons> or do you mean just reverse?
21:53:23 <gak> umm ill have a look
21:54:20 <dons> @eval reverse "haskell"
21:54:25 <lambdabot> "lleksah"
21:54:31 <dons> @eval reverse . sort $ "haskell"
21:54:32 <lambdabot> "sllkhea"
21:55:03 <gak> yep reverse is it thanks
22:47:51 <dons> exnor, hi! I see you around here a lot. do you do much haskell hacking?
22:51:00 <dons> I wonder if exnor is a bot...
22:51:34 <dons> maybe!
22:51:43 <stefanw> some unsw bot?
22:52:23 <dons> no, I think he's a real unsw student, he just never replies when I talk to him :/
22:52:49 <stefanw> maybe it's the famous student bot ;-)
22:52:57 <dons> oh. MAYBE!!
22:53:24 <dons> I guess he has to run somewhere, when not spamming Principle of Programming subject admins ;)
22:55:44 <Itkovian> how can I state that a sequence of parsers may be separated by comma's in Parsec? e.g. (commaSep myLang) (letter; digit; letter) , which isn't correct obviously, what I want is all things of the form letter; whiteSpace; comma; whiteSpace; digit; whiteSpace; comma; whiteSpace; letter, but that is so unelegant
22:57:53 <stefanw> sepBy (comma >> whitespace) (myLang >> whitespace)
22:59:21 --- topic: '["logs: http://meme.b9.com/cview.html?channel=haskell&date=today","http://www.haskell.org/learning.html","http://www.haskell.org/tmrwiki/IssueFour","We put the Funk in Funktion","http://sequence.complete.org/hwn/20050823"]'
22:59:21 --- topic: set by CosmicRay on [Tue Aug 23 07:37:02 2005]
22:59:21 --- names: list (clog scw djw cooz resiak mflux SM_ax Itkovian vegai_ Nioate_ Touqen jewel lispy_ ptolomy joelk Korollary Pseudonym Revision17 spinclad SamB pesco astrolabe Spark gdsx perspectival Muad_Dibber thebug autrijus yaarg FrederikEaton Nomius olliej emu araujo skylan borism timbod__ lispy metaperl boegel rafl_ ozone icb eno-away cognominal ibid nibro aheller shrimpx_ dcoutts stefanw meren wli moo_away sylvan musasabi ikegami-- Lunar^ kaol liyang)
22:59:21 --- names: list (sieni norpan Lor tumm sorje wagle kolmodin calvin_ ^buggler^ asmodai johs earthy tromp noj keverets jlouis thingie24 juhp kosmikus cjb)
23:01:05 <luqui> wtf
23:01:48 <stefanw> Itkovian: maybe you should have a look at the module TokenParser. It defines so called "lexeme parsers", which always strip off whitespace at the end of a lexeme.
23:02:14 <Itkovian> stefanw: I am trying to grok the stuff in the manual
23:03:43 <stefanw> TokenParser is useful if you don't have a separate lexer
23:23:54 * FrancisScott waves hello to dblhelix 
23:24:07 * dblhelix waves back at FrancisScott 
23:24:14 <FrancisScott> :)
23:47:19 <Itkovian> stefanw: hmm, I think either I'm doing domething wrong or your example is wrong
23:47:45 <Itkovian> I've got it changed to this: (sepBy ((comma lang) >> (whiteSpace lang)) letter) , but that doesn't return anything
23:47:50 <Itkovian> hmm ...
23:49:03 <stefanw> what is lang?
23:49:10 <Itkovian> my TokenParser
23:49:26 <Itkovian> lang :: TokenParser st
23:50:14 <stefanw> ok, then you don need the >> (whiteSpace lang) stuff. This should be done automatically by (comma lang)
23:50:17 <stefanw> what's letter?
23:50:21 <boegel> goodmorning !
23:50:35 <dblhelix> goodmorning, boegel
23:50:42 <dblhelix> and I'm off again :)
23:50:50 * dblhelix is off to dgp 2005
23:50:54 <boegel> Itkovian: not coming today ?
23:50:57 <boegel> dblhelix: have fun !
23:51:02 <dblhelix> tnx, boegel
23:51:15 <Itkovian> boegel: my dad is moving today, so I'll help him out
23:51:30 <Itkovian> gotta wait here till they drop of the mirror though ...
23:51:35 <boegel> Itkovian: oh yeah, right, you told me, I totally forgot :) did you hear about Hoffman ? :s
23:51:42 <Itkovian> and clean the living room
23:52:00 <Itkovian> boegel: yeah, bad. I didn't much like his lessons, but to die like that ...
23:52:03 <boegel> looks like you're doing a hell of a job cleaning :)
23:52:11 <boegel> Itkovian: yeah, it's sad :(
23:52:18 * Itkovian is doing the dishes first
23:52:28 * boegel swears on his headphones
23:52:32 <Itkovian> boegel: I've almost got a parsec parser
23:52:39 <boegel> Itkovian: yaay !
23:57:59 <Itkovian> stefanw: letter parses a a-zA-Z afaik
