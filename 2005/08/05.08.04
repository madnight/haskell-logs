00:17:35 <joelk> @seen Lemmih
00:17:36 <lambdabot> Lemmih is in #haskell. Last spoke 3 hours, 36 minutes and 27 seconds
00:17:36 <lambdabot> ago.
01:12:18 <boegel> @seen Itkovian
01:12:19 <lambdabot> I saw Itkovian leaving #haskell 7 days, 18 hours, 49 minutes and 1
01:12:19 <lambdabot> second ago, and I have missed 3 minutes and 35 seconds since then.
01:12:45 <boegel> dcoutts_: active ,
01:12:54 <boegel> s/,/?
01:40:22 <boegel> yo cptchaos
01:40:40 <cptchaos> boegel: yo!
01:41:02 <cptchaos> hm,
01:41:05 <cptchaos> @yow
01:41:06 <lambdabot> All of life is a blur of Republicans and meat!
01:42:02 <cptchaos> lambdabot: ha?
01:46:37 <boegel> @moo
01:46:49 <boegel> oh right, that was cancelled, right ?
01:47:05 <cptchaos> why?
01:55:09 <boegel> "too irritating" according to some people
01:55:15 <boegel> I found it quite amusing
01:55:23 <Thu25051> @moo
01:55:39 <boegel> it won't work :) I tell you :)
01:55:45 <dons> well, people tended to spam the channel with it, in mass orgies of @moo-ing
01:55:46 <Thu25051> i believe in magic
01:55:52 <boegel> @vixen why was @moo removed ?
01:55:54 <lambdabot> why not?
01:55:56 <boegel> heh
01:56:09 <Thu25051> @vixen why wasn't @moo not removed?
01:56:11 <lambdabot> because i said so!
01:56:32 <boegel> @vixen why are you so irritating today ?
01:56:34 <lambdabot> do you not want me to do that?
01:56:43 <cptchaos> *g*
01:56:54 <cptchaos> what the ... ?
01:57:12 <Thu25051> @vixen exit the channel
01:57:13 <lambdabot> do you trust the government?
01:57:34 <Thu25051> i want a haskell perry
01:57:38 <Thu25051> or was it parry
01:58:08 <cptchaos> has lambda bot a dict interface?
01:58:49 <dons> yes
01:58:54 <dons> ;)
01:59:15 <cptchaos> cool
01:59:20 <cptchaos> @listcommand
01:59:34 <lambdabot> all-dicts arr babel botsnack code define definitions devils dice
01:59:36 <lambdabot> dict dict-help docs dummy easton echo elements elite eurohaskell
01:59:38 <lambdabot> eval fact fact-cons fact-delete fact-set fact-snoc fact-update
01:59:40 <lambdabot> foldoc fortune gazetteer get-definition ghc google help hitchcock
01:59:42 <lambdabot> hoogle hoogle+ index jargon karma karma+ karma- kind lambda learn
01:59:44 <lambdabot> libsrc listchans listcommands listmodules lojban moo more paste pl
01:59:46 <lambdabot> pl-resume plugs pointless prelude quote remember repo-add repo-del
01:59:48 <lambdabot> [4 @more lines]
02:00:06 <cptchaos> @more lines
02:00:07 <lambdabot> repos resume seen source spell state timein todo todo-add topic-cons
02:00:07 <lambdabot> topic-init topic-null topic-snoc topic-tail topic-tell type uptime
02:00:07 <lambdabot> vera version vixen web1913 where where+ wiki wikipedia wn world02
02:00:07 <lambdabot> yow
02:00:11 <incomplete> yo
02:00:20 <ndm> what does hoogle+ do?
02:00:27 <dons> @hoogle mp
02:00:29 <lambdabot> Prelude.compare :: Ord a => (a -> a -> Ordering)
02:00:31 <dons> @hoogle map
02:00:32 <lambdabot> Prelude.map :: ((a -> b) -> [a] -> [b])
02:00:32 <lambdabot> List.mapAccumR :: ((a -> b -> (a, c)) -> a -> [b] -> (a, [c]))
02:00:32 <lambdabot> List.mapAccumL :: ((a -> b -> (a, c)) -> a -> [b] -> (a, [c]))
02:00:34 <dons> @hoogle+
02:00:36 <lambdabot> Maybe.mapMaybe :: ((a -> (Maybe b)) -> [a] -> [b])
02:00:36 <lambdabot> Prelude.mapM_ :: Monad a => ((b -> (a c)) -> [b] -> (a ()))
02:00:36 <lambdabot> Prelude.mapM :: Monad a => ((b -> (a c)) -> [b] -> (a [c]))
02:00:43 <dons> more results
02:00:48 <ndm> cool
02:01:04 <dons> not some sort of super-hoogle ;)
02:01:35 <lightstep> @hoogle a -> b
02:01:36 <lambdabot> Prelude.fromIntegral :: (Integral a, Num b) => (a -> b)
02:01:36 <lambdabot> Prelude.realToFrac :: (Real a, Fractional b) => (a -> b)
02:01:36 <lambdabot> Prelude.round :: (RealFrac a, Integral b) => (a -> b)
02:01:43 <ndm> i guesed that, i'm writing super hoogle right now :)
02:01:52 <dons> good good
02:01:58 <ndm> lightstep, a -> b matches about 95% of functions...
02:02:13 <xerox> @karma+ dons
02:02:14 <lambdabot> dons's karma raised to 10.
02:02:16 <dons> juts sorting the results has made hoogle-via-lambdabot quite useful, ndm
02:02:19 <boegel> @hoogle+
02:02:21 <lambdabot> Prelude.floor :: (RealFrac a, Integral b) => (a -> b)
02:02:21 <lambdabot> Prelude.truncate :: (RealFrac a, Integral b) => (a -> b)
02:02:21 <lambdabot> Prelude.ceiling :: (RealFrac a, Integral b) => (a -> b)
02:02:27 <boegel> @hoogle+
02:02:28 <lambdabot> Prelude.id :: (a -> a)
02:02:28 <lambdabot> Prelude.succ :: Enum a => (a -> a)
02:02:28 <lambdabot> Prelude.pred :: Enum a => (a -> a)
02:02:32 <boegel> hehe =)
02:03:18 <ndm> yeah, does this version of hoogle have the sort taking classes into account patch included
02:03:31 <dons> the one i sent you? yes.
02:04:05 <dons> @hoogle a -> a
02:04:06 <lambdabot> Prelude.id :: (a -> a)
02:04:06 <lambdabot> Prelude.succ :: Enum a => (a -> a)
02:04:06 <lambdabot> Prelude.pred :: Enum a => (a -> a)
02:10:01 * boegel poofs
02:18:03 <Thu25051> im sorry ms jackson
02:23:40 <Thu25051> freakin uust doesnt built again
02:26:15 <Thu25051> ghc-6.4: unknown package: uust....but when i do ghc -package uust all is good :S
02:43:58 <Thu25051> hmm warning: trigraph ??> ignored, use -trigraphs to enable
02:45:24 <lightstep> do you use it as an operator?
02:46:43 <lightstep> oh, gcc, not ghc
02:51:42 <Thu25051> i dont get it
02:52:15 <Thu25051> it does a 'libtool gcc -o blabla.a <<lots of .o files>>
02:52:21 <Thu25051> and it generates a blabla.a of 8 bytes
02:52:44 <tuomov> you should use .la with libtool iirc
02:52:47 <lightstep> ANSI saw that some machines don't have a ] symbol, so they defined another pass, after the preprocessor i think, that converts every ??) to a ] character. there are 7 other trigraphs
02:53:24 <Thu25051> its building a ghc package...so .a is right isnt it?
02:54:06 <tuomov> libtool is a strange beast
02:54:15 <tuomov> do you see what command libtool actually runs?
02:54:47 <Thu25051> well, i just see that it gets executed with that gcc -o stuff
02:55:45 <Thu25051> what is the role of libtool in this?
02:55:54 <Thu25051> gcc -o links all the stuff together...
02:56:05 <Thu25051> but the libtool in front of the gcc -o...
02:57:21 <Thu25051> maybe its silencing all the error msgs and i should first see what gcc -o does
03:07:56 <musasabi> @hoogle exit
03:07:58 <lambdabot> System.exitFailure :: (IO a)
03:07:58 <lambdabot> System.exitWith :: (ExitCode -> (IO a))
03:11:09 * boegel just noticed he is included in the Gtk2Hs developers list and cheers
03:22:34 <pejo> Thu, except making things complicated libtool tries to abstract away unportability when building shared libraries and other crap. Isn't there a libtool --mode=compile or similar before the gcc stuff?
03:23:50 * boegel leaves for lunch
03:30:29 <metaperl> anyone tried to Haskore version from TMR? using it with ghc yields "Can't find module IOExts" after putting IOExtensions.hs in the Src dir as instructed
03:32:24 <metaperl> anyone know how to get IOExts loaded under GHC?
03:37:23 <musasabi> How do I get the version of the package being built in postBuild hook with Cabal?
03:43:31 <ndm> metaperl, isn't System.IO.Unsafe now used in preference to IOExts
03:46:04 <metaperl> ndm: I dont know. I'm just following the instructions in a TMR article I want to play with: http://www.haskell.org/tmrwiki/Haskore
03:46:36 <metaperl> it loads under hugs (which I dont normally use) but not under ghci (my preferred Haskell interpreter)
03:47:32 <ndm> metaperl, it should be easier to get working under GHCi
03:47:51 <metaperl> ndm: it loads just fine under hugs (unfortunately for biased old me :) )
03:49:24 <ndm> metaperl, give me a sec and i'll rewrite IOExtensions....
03:49:56 <metaperl> ok
03:55:07 <ndm> module IOExtensions(
03:55:09 <ndm> 	writeBinaryFile,
03:55:10 <ndm> 	openBinaryFile, readBinaryFile
03:55:12 <ndm> 	) where
03:55:13 <ndm> import System.IO
03:55:15 <ndm> writeBinaryFile :: FilePath -> String -> IO ()
03:55:16 <ndm> writeBinaryFile path contents =
03:55:18 <ndm> 	do h <- openBinaryFile path WriteMode
03:55:19 <ndm> 	   hPutStr h contents
03:55:21 <ndm> 	
03:55:22 <ndm> readBinaryFile :: FilePath -> IO String
03:55:24 <ndm> readBinaryFile path =
03:55:25 <ndm> 	do h <- openBinaryFile path ReadMode
03:55:27 <ndm> 	   res <- hGetContents h
03:55:28 <ndm> 	   hClose h
03:55:30 <ndm> 	   return res
03:55:31 <ndm> 	
03:55:34 <ndm> that might work on GHC, haven't tested it and don't have GHC installed
03:55:41 <ndm> and it should work on Windows as well
03:56:17 <ndm> metaperl, let me know how it works
03:56:36 <ndm> oh, and it needs hClose h after writeBinaryFile
03:56:44 <metaperl> ndm: is that one the web or can you send it to me?
03:57:00 <ndm> i can send it, if you tell me how
03:57:07 <metaperl> bauhaus@metaperl.com
03:57:19 <metaperl> I dont know how IRC file sends work
03:57:37 <metaperl> will it have the hClose h?
03:57:39 <dons> the register says "perl, python, php use declining" http://www.theregister.co.uk/2005/08/04/evans_survey/
03:57:39 <metaperl> I hope so
03:57:59 <metaperl> python has the mailing list market locked for good
03:58:04 <metaperl> mailmain 0wnz
03:58:20 <metaperl> php rules web apps --- the bbs software is ubiquitous
03:58:21 <shapr> Its archive could be improved.
03:58:35 <metaperl> shapr: I always subscribe my lists to GMANE and mail-archive.com
03:58:36 <dons> I never want to touch php again. one attempt with bbs was enough to scare me of forever
03:58:42 <metaperl> lol
03:58:54 <ndm> metaperl, will send it correct - have just tested it in isolation as well so looks pretty reliable
03:59:05 <metaperl> maybe musasabi would write php to inline haskell converter
03:59:25 <metaperl> ok
03:59:55 <ndm> metaperl, sent - if it does work nicely it would be work emailing the original author and getting him to add that
04:00:14 <ndm> it should work on windows, while the original version definately wouldn't have under any haskell compiler
04:01:08 <metaperl> dons: here is an authoritative summary on why PHP is not to be messed with: http://tnx.nl/php
04:01:20 <metaperl> juerd is a very skilled Perl programmer
04:01:29 <Thu25051> how can i log every command that is executed (including output) from a makefile? if i do 'make > msgs' i dont get the command
04:01:29 <Thu25051> ?
04:01:31 <metaperl> ndm: ok, checking
04:01:53 <metaperl> Thu25051: sounds like "tee"
04:02:02 <metaperl> or run make in an emacs shell and save the buffer :)
04:02:27 <Thu25051> which option is easiest :D
04:02:30 <dons> php feels like a language created by 14 year olds trying to do perl in C
04:02:33 <fluxx> thu25051, make >& msgs
04:02:47 <Thu25051> ow cool fluxx, that does seem to easiest :D
04:04:25 <dons> metaperl, I can't even read the rest of this article. it already characterises my entire experience with this language :}
04:04:48 <dons> sorry, lang^h^h^h^hhack
04:05:44 <metaperl> heh
04:06:01 <Thu25051> like perl is all that
04:06:18 <metaperl> perl5 is all that. perl6 will be horrible if it ever comes out
04:06:19 <Thu25051> :)
04:06:42 <Thu25051> my experiences with perl are all horrible
04:06:45 <Thu25051> :)
04:07:04 <dons> oh, where are my sweet lambdas? get me out of here!
04:08:37 <Thu25051> inner scopes are nice?
04:08:54 <Thu25051> or am i misunderstanding that on that php page
04:09:09 <Thu25051> cause if php is lacking inner scopes, that is definitly a pre
04:10:11 <metaperl> man, hugs loads HaskoreLoader many times faster than ghci... ghci does a whole lot of compiling first... I guess it might execute faster on a large program
04:10:30 <metaperl> whoa and 800 million warnings
04:11:43 <metaperl> gee whiz, now I know what people mean by ghc being slow
04:21:51 <basti_> hi
04:25:07 <metaperl> hi basti
04:26:13 <metaperl> basti_: I just emailed you ndm's fix of IOExtensions.hs
04:26:43 <basti_> oh
04:26:44 <basti_> okay.
04:27:23 <basti_> i didnt know this was such a problem.
04:27:42 <basti_> I'll redirect that to Henning Thielemann, but i suppose he already knows this.
04:27:49 <basti_> (haskore maintainer)
04:30:02 <Thu25051> hmmm, this makefile structure is unreadable...does anyone know if 'ar cru <libname> etc' is called separately? or if it is automatically called by libtool/ghc?
04:30:20 <basti_> is there an implementation of STM freely available somewhere?
04:31:26 <dons> I think the implementation is called `GHC' ;)
04:32:08 <basti_> there's builtin support meanwhile??
04:32:28 <metaperl> basti_: why would :t (c 1 (1%4) []) represent a c4 note instead of c1?
04:32:33 <metaperl> s/:t//
04:32:49 <basti_> metaperl: this is a good question.
04:33:09 <dons> basti_, -package stm, and Control.Concurrent.STM ?
04:33:13 <basti_> metaperl: you're aware that the octave numbering is arbitary, arent you?
04:33:17 <basti_> dons: thanks a lot.
04:33:52 <metaperl> basti_: I guess so but I think in piano terms... but admittedly a piano is not an absolute reference point
04:34:39 <basti_> metaperl: the haskore version i used is antique. Henning is developing a new version, but it's still taking some time.
04:35:09 <basti_> maybe this incoherence should be resolved.
04:55:30 <basti_> my first stm program is running.
05:06:27 <boegel> @seen Itkovian
05:06:27 <CosmicRay> morning everyone
05:06:28 <lambdabot> I saw Itkovian leaving #haskell 7 days, 22 hours, 43 minutes and 10
05:06:28 <lambdabot> seconds ago, and I have missed 3 minutes and 35 seconds since then.
05:06:37 <boegel> yo CosmicRay
05:06:52 <incomplete> http://www.xorph.com/cisco.mov
05:11:28 <Philippa_> will watching that get me sued? :-)
05:11:38 <incomplete> I think not :)
05:12:35 <CosmicRay> incomplete: are you xerox?
05:12:40 <incomplete> CosmicRay, yup
05:12:45 <CosmicRay> did you get sued? :-)
05:12:55 <incomplete> no :)
05:13:14 <CosmicRay> just tired of the old nick eh?
05:13:55 <incomplete> More or less, I wanted to change for some time.
05:15:42 <boegel> it's confusing
05:16:06 <boegel> that movie clip, is that the presentation that guy maybe about the cisco bug ?
05:17:16 * Thu25051 slaps earthy
05:17:22 <Thu25051> @seen earthy
05:17:23 <lambdabot> earthy is in #haskell. I don't know when earthy last spoke.
05:17:28 <CosmicRay> heh
05:18:05 <Thu25051> anyone from uu around that can tell me if arthur baars is present at uu?
05:18:07 <dblhelix> Thu25051:  he's still in France
05:18:17 <Thu25051> ow dblhelix, maybe you know
05:18:33 <dblhelix> Thu25051: oh, sorry, thought you meant Arthur v L.
05:18:53 <Thu25051> i slapped arthur vl because i thought maybe he knew if arthur b was there
05:18:58 <Thu25051> but maybe you know ?
05:19:02 <incomplete> boegel, y
05:19:11 * dblhelix goes to have look
05:19:22 <Thu25051> awesome dblhelix
05:19:24 <Thu25051> cause there's a bug in uuagc regarding cata's generated for maybe type synonyms
05:19:40 <dblhelix> Thu25051: nope, sorry, he isn't at his office
05:19:47 <Thu25051> crap
05:20:03 <Thu25051> then i'll have to patch the generated hs files manually i guess hehe
05:20:04 <dblhelix> Thu25051: is it easily reproduced?
05:20:09 <Thu25051> extremely easy
05:20:17 * dblhelix is curious
05:20:18 <Thu25051> where can i paste it
05:20:24 <dblhelix> @paste
05:20:25 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
05:22:21 <boegel> incomplete: I thought there was no record of that ?
05:26:03 <Thu25051> dblhelix,
05:26:04 <Thu25051> its there
05:26:06 <Thu25051> @paste
05:26:07 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
05:26:38 <incomplete> boegel, so it seems
05:27:35 <dblhelix> Thu25051: ah, nasty
05:28:05 <john__> @index readFile
05:28:06 <lambdabot> System.IO, Prelude
05:29:21 <Thu25051> obviously no-one other than me ever made use of those Maybe type synonyms....
05:29:28 <shapr> Which synonyms?
05:29:31 <Thu25051> ok arthur did implement them especially for me
05:29:42 <Thu25051> shapr, see @paste
05:30:13 <Thu25051> its uuag related
05:30:23 <dblhelix> Thu25051: before TYPE was limited to lists, wasn't it?
05:30:25 <CosmicRay> morning shapr
05:30:31 <shapr> hiya CosmicRay
05:31:15 <CosmicRay> how's bittorrent?
05:31:19 * boegel leaves again
05:31:27 <incomplete> bye boegel
05:31:49 <Thu25051> yeah, then i hade to make an uuag datatype that holds a C program. so i suddenly had a big need for type synonyms for tuples and maybe's....
05:31:54 <Thu25051> so arthur implemented them
05:32:15 <Thu25051> but since only me used them, this bug was never triggered :)
05:32:44 <Thu25051> i wonder if im doing something wrong here
05:33:14 <shapr> CosmicRay: No progress, I'm still in the midst of switching to FastPackedString
05:34:30 <Thu25051> i think the new cvs version just broke it, because i have been using Maybe type synonyms all over the place before....
05:34:44 <incomplete> boegel, http://www.infowarrior.org/users/rforno/lynn-cisco.pdf
05:39:25 <shapr> Ya know, I want darcs://
05:39:43 <musasabi> CosmicRay: http://www.cs.helsinki.fi/u/ekarttun/hsgnutls/ - an early release for a change.
05:39:44 <shapr> Then I can just say darcs://www.scannedinavian.org/~shae/combinatorrent/
05:41:11 <shapr> Any idea why ion3 wouldn't start from my .xsession? It was working fine before I switched to 2.6.12 and the nvidia drivers.
05:41:23 * shapr considers asking on the #ion channel
05:41:42 <tromp> can i tell gcc to make longs 64 bit?
05:42:08 <musasabi> tromp: you would break ABI.
05:43:45 <tromp> so i have to use long long?
05:43:57 <tromp> on 32 bit platforms
05:44:06 <musasabi> using int64_t would be the best way.
05:44:40 <musasabi> of course that means that your configure needs to do something sensible on platforms which don't define it.
05:44:54 <tromp> what about literals? can i say 1LL or does it need casting?
05:46:08 <musasabi> doesn't C automatically cast things? (you should probably ask on ##c)
05:46:30 <musasabi> also it might be that int64_t != long long.
05:47:25 <tromp> i so wish that int64 had been in c from the start. at least java got that right:)
05:48:58 <shapr> hiya ramkrsna, how's the rodent?
05:49:19 <musasabi> if C would have had fixed types then probably int=16bits and long=32bits ;)
05:49:22 * shapr wants int256
05:50:00 <ramkrsna> shapr, hola
05:50:10 <musasabi> I think you can have int_t<256> with C++ if you define a suitable template...
05:50:11 <shapr> ¿como est as?
05:50:21 <tromp> they shld have had int16 instead of short and int64 instead of long
05:50:43 <tromp> they could have kept int as natural int size
05:51:34 <tromp> although that is bound to break code
05:52:00 <tromp> in old days int cld be 16 or 32 bits
05:52:09 <tromp> but now ppl assume int is at least 32 bits
05:53:59 <integral> natural int size would be a bit more useful if there was overflow detection
05:54:33 <CosmicRay> re shapr
05:54:40 <shapr> y0 CosmicRay
05:54:55 <CosmicRay> musasabi: nice!
05:55:16 * CosmicRay snarfs
05:55:54 <Thu25051> ow yeah, i got a free cottage cheese strawberry sandwich
05:55:54 <CosmicRay> weird.  I don't see shapr leaving #haskell anywhere
05:56:06 <shapr> I'm sneaky.
05:56:08 <CosmicRay> heh
06:02:59 <john__> @index digitToInt
06:03:00 <lambdabot> Data.Char
06:03:35 <CosmicRay> musasabi: this looks very nice.
06:04:44 <CosmicRay> I may have to ITP this for Debian.
06:04:48 <musasabi> thanks :-)
06:04:49 <CosmicRay> (Intent To Package)
06:05:03 <CosmicRay> let me just ask a stupid, quick question if I may
06:05:22 <vikasg> where do I get a list of lambdabot's commands?
06:05:27 <musasabi> yes?
06:05:47 <CosmicRay> what sort of socket-like thing do you return when one connects to a gnutls peer?
06:05:48 <Thu1771> ahhh dont you just like it when your computer hangs for the tenth time because compiling your application is so damn memhogging
06:05:50 <musasabi> vikasg: @listcommand
06:05:59 <vikasg> @listcommand
06:06:00 <lambdabot> all-dicts arr babel botsnack code define definitions devils dice
06:06:00 <lambdabot> dict dict-help docs dummy easton echo elements elite eurohaskell
06:06:00 <lambdabot> eval fact fact-cons fact-delete fact-set fact-snoc fact-update
06:06:00 <lambdabot> foldoc fortune gazetteer get-definition ghc google help hitchcock
06:06:00 <lambdabot> hoogle hoogle+ index jargon karma karma+ karma- kind lambda learn
06:06:02 <lambdabot> libsrc listchans listcommands listmodules lojban moo more paste pl
06:06:04 <lambdabot> pl-resume plugs pointless prelude quote remember repo-add repo-del
06:06:06 <lambdabot> [4 @more lines]
06:06:14 <Thu1771> @moo
06:06:36 <CosmicRay> this Session thing...  can one use regular NetworkAlt commands on it, or do you have to use read/write/whatever from the GnuTLS package?
06:06:37 <vikasg> oops, should have used pm
06:06:46 <musasabi> CosmicRay: the user of the library can decide what kind of thing to use for communicating with the peer (the library contains support for Handles and Network.Alt sockets)
06:07:22 <CosmicRay> whoa, you managed to integrate this with a standard haskell Handle?
06:07:34 <musasabi> CosmicRay: I could make it into network-alt proper, but that would make network-alt depend on gnutls and I am not quite sure whether I want that.
06:07:45 <CosmicRay> right, this arrangement makes sense.
06:08:06 <musasabi> CosmicRay: it can talk tls through a handle, but it cannot be a handle.
06:08:28 <musasabi> CosmicRay: making a Session to a Handle would be possible but that would require adding a pipe.
06:08:58 <CosmicRay> right, I didn't think that would be possible.  but a sock is a typeclass or some such in NEtworkalt?
06:09:08 <CosmicRay> rather than an opaque datatype like a Handle is?
06:09:36 <musasabi> an opaque type.
06:10:15 <CosmicRay> so how can you let the normal networkalt functions operate on a gnutls connection as if it were a socket?
06:11:27 <musasabi> CosmicRay: I open a socket with network-alt and pass that to gnutls. Internally I just pass it the functions to read and write from the socket so gnutls doesn't need to know about network-alt.
06:11:42 <CosmicRay> right, that much makes sense
06:11:55 <CosmicRay> what I'm asking about is the programmer, interacting over the secured connection
06:11:56 <musasabi> CosmicRay: you are seeking one function to do IO with both of socket and tls sessions?
06:12:03 <CosmicRay> correct
06:12:17 <dblhelix> is there a graph library available capable of computing transitive reductions?
06:12:39 <CosmicRay> so that, for instance, I can write a single piece of code that would let the user configure whether or not to use ssl/tls, and act appropriately, without having to lace it with conditionls
06:13:02 <CosmicRay> that should be easy enough for me to do with a typeclass.  I was just curious if you had any mechanism to do that in there already
06:13:32 <musasabi> CosmicRay: it would be trivial to add such an class - but in the connection phase with tls you need to check certificates and stuff like that - so the code needs to know when making a connection where it is making it.
06:14:15 <musasabi> CosmicRay: personally I prefer to pass to the client code just functions like (write :: String -> IO ()) and (read :: Int -> IO String) rather than handles.
06:15:23 <musasabi> But making Session a member of e.g. HVIO should be quite easy.
06:15:40 <musasabi> the same for Network.Alt sockets.
06:16:34 <musasabi> I didn't feel like introducing yet another generic IO typeclass and going the HVIO route would have meant a dependency.
06:19:07 <dons> dblhelix, have you looked at Data.Graph.Inductive in -package fgl ?
06:19:50 <dblhelix> dons: yes, it does not seem to contain such an operation
06:20:29 <dons> the fgl layout is a bit confusing, did you check in Data/Graph/Inductive/Query
06:20:30 <dons> ?
06:21:12 <dblhelix> dons: yes, it seems like only the transitive closure is available
06:21:22 <dons> ah, yep. seems so.
06:21:40 <dons> I wonder if you could write your own patch to fgl, if required?
06:22:27 <dblhelix> dons: well. perhaps, but I'm anything but an expert on graph algoritmics
06:26:25 <CosmicRay> musasabi: right, the connection part is obviously different
06:28:00 <CosmicRay> musasabi: I thought about the HVIO route.   I may yet go that way, but I may wind up instead creating some new abstraction for more socket-like objects
06:28:21 <boegel> dblhelix: I know someone who is an expert, but you'd have to mail him your question (and I don't think he knows jack about Haskell though)
06:28:55 <vikasg> I have:
06:28:58 <CosmicRay> musasabi: and then make HVIO a layer above that
06:29:10 <vikasg> scm_read :: forall st. GenParser Char st Form
06:29:18 <CosmicRay> because sockets are rather different than file-like things.  (I know you can use sockets as Handles, but it's awkward)
06:29:27 <musasabi> maybe a subtype with just input and output operations and close.
06:29:31 <dblhelix> boegel: thank you... but for now I can use something quick and dirty... it does not have real priority
06:29:44 <vikasg> parse scm_read "" str fails with 'Expected GenParser Char () ()'
06:29:57 <boegel> dblhelix: okay :) just let me know if you need the guy
06:30:10 <dblhelix> boegel: I will
06:30:29 <CosmicRay> musasabi: wth sockets, one really needs direct equivolents of read(2), write(2) and possibly shutdown...  especially if doing UDP, but there are some protocols for which getLine, getChar and friends just don't cut it
06:30:37 <CosmicRay> (or only work in a very annoying fashion)
06:30:52 <vikasg> why is parse expecting 'Parser ()'?
06:31:08 <CosmicRay> but then I'm thinking that a HVIO instance can be constructed that is based on these low-level read/write primitives
06:31:35 <CosmicRay> so you can get the low-level features if you want, or just pretend it works like a file if that's more convenient
06:32:44 <boegel> hey kowey
06:32:53 <kowey> hey boegel, hey room
06:33:25 <CosmicRay> musasabi: anyway, thanks for doing the work to make that binding.  it addresses a huge sore spot in haskell for me.
06:34:27 <musasabi> youzen.b2.fi/~musasabi/sio.hs might be what the typeclass could look like.
06:34:41 <vikasg> um, I think I figured it out
06:34:57 <CosmicRay> musasabi: yes, that's very nearly what I've got in mind.
06:43:37 * boegel poofs !
06:56:57 <musasabi> Has anyone used Cabal-1.1.2 with ghc-6.2.2 with success? I keep getting errors like "src/Network/GnuTLS/GnuTLS.hs: file name does not match module name `Network.GnuTLS.GnuTLS'" when things build fine with 6.4.
07:08:15 <tsdh> Hi. I do my very first steps in haskell (GHC). In a tutorial they're working with a function `ord', but GHC tells me that it's out of scope. Do I have to "include" some module or what?
07:08:45 <JaffaCake> dcoutts_: ping?
07:09:03 <tromp> index ord
07:09:07 <tromp> @index ord
07:09:08 <lambdabot> Data.Char
07:09:09 <ndm> @hoogle ord
07:09:10 <lambdabot> Char.ord :: (Char -> Int)
07:09:10 <lambdabot> Prelude.unwords :: ([String] -> String)
07:09:10 <lambdabot> Prelude.words :: (String -> [String])
07:09:19 <tromp> try :m +Data.Char
07:09:39 <tromp> in ghci, or import Data.Char in your source
07:10:09 <tsdh> tromp: Thanks!
07:19:30 <musasabi> Is there a way to get the PackageDescription in Cabal's postBuild hooks? (just reading it)
07:19:43 <kosmikus> JaffaCake: dcoutts_ is on vacation; I don't know if he'll be online the next days ...
07:19:55 <JaffaCake> ah ok, never mind
07:20:38 <kosmikus> JaffaCake: anything that concerns Gentoo?
07:20:51 <JaffaCake> no, it was a Q about gtk2hs
07:20:54 <kosmikus> ok
07:29:57 <musasabi> JaffaCake: Thanks for fixing the _stub file thing.
07:30:10 <JaffaCake> no problem
07:34:55 <john__> what happened to showAttr in HaXml?
07:35:27 <john__> it's mentioned in the docs but it doesn't exist
07:41:46 <boegel> @seen Itkovian
07:41:47 <lambdabot> I saw Itkovian leaving #haskell 8 days, 1 hour, 18 minutes and 30
07:41:47 <lambdabot> seconds ago, and I have missed 3 minutes and 35 seconds since then.
07:47:28 * boegel whistles
07:54:11 * shapr boings
07:57:04 <kaol> @seen kaol
07:57:05 <lambdabot> You are in #haskell. Last spoke just now.
07:58:41 <kaol> @seen lambdabot
07:58:42 <lambdabot> Yes, I'm here.
08:05:16 <shapr> I really need to learn to use sed and awk.
08:06:53 * kaol just uses perl
08:08:07 <shapr> I never learned perl.
08:08:29 <JaffaCake> you can do without awk, but not sed
08:08:52 <pejo> perl - Swiss army chainsaw, well worth its time if you want to solve problmes quickly without caring about elegance.
08:08:55 <shapr> Ok, I'll learn sed.
08:09:03 <shapr> pejo: And your fingers...
08:09:06 <shapr> pejo: But perl6 is sexy.
08:09:38 <autrijus> hm, sed's elegance as compared with perl5 is also dubious.
08:09:52 <autrijus> but at least it only does one thing.
08:09:53 <shapr> autrijus: Sadly, I don't have your perl skillz :-)
08:10:12 <shapr> I may learn Perl6, but I doubt I'll ever learn more about Perl5.
08:10:26 <autrijus> shapr: try `man s2p` sometimes :)
08:11:11 <shapr> huh, nifty
08:11:40 <autrijus> that's DSL for you :)
08:12:22 * autrijus goes back hacking the swiss army nuke that is perl6
08:16:53 <tsdh> What wants the message "No instance for (Num (Int -> Bool)) arising from use of `-' at <interactive>:1:7"?
08:17:13 <autrijus> tsdh: it means you wrote -1 where you shoudl write (-1).
08:17:20 <autrijus> annoying thing, that prefix symbolic operator.
08:17:57 <tsdh> I didn't write -1, I wrote: 'isEven n    = if n < 0 then isEven (abs n) else isEven (n - 2)'
08:18:26 <autrijus> what is the type of isEven?
08:18:40 <tsdh> Integer -> Bool
08:18:59 <autrijus> that is correct... did you add the signature?
08:19:42 <tsdh> You mean the: 'isEven      :: Integer -> Bool'? - Yes.
08:21:29 <autrijus> @plugs let (isEven :: Integer -> Bool) = \n -> if n < 0 then isEven (abs n) else isEven (n-2)
08:21:57 <lambdabot> parse error on input `)'
08:22:10 <autrijus> tsdh: I think your invocation of isEven is in problem here
08:22:16 <autrijus> isEven (-1), not isEven -1
08:22:39 <autrijus> also, you better have some base cases other than the 'n' case.
08:23:53 <tsdh> I do have two base cases, look: http://rafb.net/paste/results/7ewsuB68.html
08:24:22 <autrijus> ok then.
08:24:24 <tsdh> You should always come to one of the two base cases, I think.
08:24:35 <autrijus> anyway, you need to write isEven (-1).
08:24:40 <autrijus> or
08:24:41 <autrijus> isEven $ -1
08:25:07 <autrijus> otherwise ghci will parse "isEven -1" as "isEven - 1", that is "(-) isEven 1"
08:25:17 <autrijus> and attempt to use isEven as subject to (-)
08:25:25 <autrijus> which would demand a Num instance out from it.
08:25:34 <tsdh> ok, thanks.
08:25:37 <autrijus> np :)
08:38:57 <tsdh> Is it possible to provide higher level functions with definitions instead of a function name? For example something like: `filter (not isEven) [1,2,3]'
08:39:46 <mauke> not . isEven
08:40:25 <tsdh> Oh, yes. This works. Thanks.
08:41:00 <poetix> http://lambda-the-ultimate.org/node/view/893/8216#8216 <- Paul Snively explaining what FP Can Do For You, over on LtU
08:41:20 <poetix> "I can look like a miracle worker by writing some code that does something time consuming, and when I'm asked to somehow break the task down into discrete chunks so that feedback can be provided to the user, and by the way, we don't have threads, an hour later I can be done and it just works"
08:41:30 <poetix> "Why? Because I've employed a well-known, well-documented, and here's the kicker, semantics-preserving and automated Continuation-Passing-Style source transformation on my code"
08:41:37 <poetix> Well, that sounds cool. How to do it in Haskell?
08:42:17 <poetix> Is there a Haskell automated-CPS-source-transform tool?
08:43:19 <Lor> Yeah, you write your code in monadic style, and then just use the CPS monad. :)
08:43:31 <poetix> I knew someone would say that.
08:45:02 <Lor> I'm not sure if Haskell 98 code can be CPS-transformed without type problems.
08:45:11 <poetix> http://haskell.org/hawiki/MonadicStyleTransformation <- this sort of approach, right?
08:47:01 <Lor> Essentially, yeah.
08:47:41 <Lor> If one could get the output from specializing the monadic code to the CPS monad...
08:48:51 <poetix> Maybe use a monad transformer, assuming the source was in the IO monad or something like that
09:12:57 <beelsebo1> @type \f -> flip (>>=) $ ((:[]) . f)
09:13:03 <lambdabot> forall a b.
09:13:03 <lambdabot>             (a -> b) -> [a] -> [b]
09:13:08 <beelsebo1> YAY!
09:13:22 <beelsebo1> so is that a roundabout definition for map?
09:14:06 <beelsebo1> @eval let mymap f = flip (>>=) $ ((:[]) . f) in mymap (+1) [1,2,3]
09:14:12 <lambdabot> [2,3,4]
09:14:16 <beelsebo1> :)
09:15:52 <lispy> @eval fmap (+1) [1..3]
09:15:55 <lambdabot> [2,3,4]
09:16:00 <lispy> cool
09:16:10 <shapr> Is @eval now plugs?
09:16:14 <lispy> @pl \f -> flip (>>=) $ ((:[]) . f)
09:16:15 <lambdabot> fmap
09:16:19 <lispy> shapr: yes
09:16:27 <shapr> Where'd the old @eval go?
09:16:34 <lispy> @help
09:16:35 <lambdabot>  @help <command> - ask for help for <command>
09:16:35 <shapr> hiya poetix!
09:16:38 <lispy> @listcommands
09:16:39 <lambdabot> all-dicts arr babel botsnack code define definitions devils dice
09:16:39 <lambdabot> dict dict-help docs dummy easton echo elements elite eurohaskell
09:16:39 <lambdabot> eval fact fact-cons fact-delete fact-set fact-snoc fact-update
09:16:39 <lambdabot> foldoc fortune gazetteer get-definition ghc google help hitchcock
09:16:39 <lambdabot> hoogle hoogle+ index jargon karma karma+ karma- kind lambda learn
09:16:41 <lambdabot> libsrc listchans listcommands listmodules lojban moo more paste pl
09:16:43 <lambdabot> pl-resume plugs pointless prelude quote remember repo-add repo-del
09:16:45 <lambdabot> [4 @more lines]
09:16:47 <poetix> hey shapr
09:17:00 <shapr> poetix: How's code treating you?
09:17:08 <lispy> @more
09:17:09 <lambdabot> repos resume seen source spell state timein todo todo-add topic-cons
09:17:09 <lambdabot> topic-init topic-null topic-snoc topic-tail topic-tell type uptime
09:17:09 <lambdabot> vera version vixen web1913 where where+ wiki wikipedia wn world02
09:17:09 <lambdabot> yow
09:17:19 <shapr> @yow !
09:17:20 <lambdabot> I'm continually AMAZED at th'breathtaking effects of WIND EROSION!!
09:17:23 <poetix> Badly, but that's because it's managed .Net / COM interop code
09:17:28 <poetix> Which is seldom fun
09:17:31 <beelsebo1> ohhh... what's fmap
09:17:33 <shapr> That does sound painful.
09:17:35 <lispy> shapr: i'm not sure where it went, nothing in that list strikes me as lambda calc
09:17:39 <beelsebo1> and why is it different from map?
09:17:41 <poetix> (Where are the COM wrappers for Haskell, huh?)
09:17:51 <shapr> beelsebo1: Because fmap is sort of like the 'iterate' interface.
09:17:57 <lispy> @repos
09:17:58 <lambdabot> {no repositories defined}
09:18:00 <beelsebo1> buh?
09:18:00 <shapr> poetix: Haven't seen any lately, but JaffaCake might know.
09:18:08 <shapr> @help repos
09:18:09 <lambdabot>  @repos, list all registered darcs repositories
09:18:13 <shapr> Oh cool
09:18:21 <poetix> PythonWin used to be my bestest friend
09:18:24 <shapr> Is that repos for lambdabot? Or just any repos?
09:18:27 <shapr> poetix: Same for me.
09:18:29 <lispy> dunno
09:18:32 <lispy> probably any
09:18:41 <shapr> Wasn't that Mark Hammond?
09:18:47 <shapr> @listmodules
09:18:48 <lambdabot> babel base code darcsPatchWatch dice dict dummy dynamic elite fact
09:18:48 <lambdabot> haddock help hoogle karma lambda more pl plugs quote search seen
09:18:48 <lambdabot> spell state system todo topic type version vixen where
09:18:49 <poetix> Yeah. Good stuff.
09:19:06 <shapr> Oh, maybe that's part of darcsPatchWatch
09:19:19 <shapr> Yeah, PythonWin did lots of community building.
09:20:14 <poetix> The editor/IDE was great - I never saw a compelling reason to shell out for Komodo...
09:20:19 <beelsebo1> oh... I'm being dumb
09:21:07 <beelsebo1> @eval \f -> flip (>>=) $ (return . f) (+1) [1,2,3]
09:21:09 <lambdabot> <Plugins.Eval>:1:
09:21:09 <lambdabot>   No instances for (Show (((a1 -> a1) -> a -> m b) -> m a -> m b),
09:21:09 <lambdabot>         Monad ((->) [t]))
09:21:09 <lambdabot>   arising from use of `show'
09:21:14 <beelsebo1> woops
09:21:16 <shapr> Same here. I was offered a free copy of WingIDE while I was doing Bicycle Repair Man, but I turned it down.
09:21:28 <beelsebo1> @eval (\f -> flip (>>=) $ (return . f)) (+1) [1,2,3]
09:21:30 <lambdabot> [2,3,4]
09:21:33 <beelsebo1> YAY!
09:21:40 <shapr> beelsebo1: What the hack is that?
09:21:46 * beelsebo1 might be getting somewhere
09:21:51 <beelsebo1> shapr: it's fmap
09:22:19 * shapr doesn't get it... 
09:22:31 <shapr> Anyway, I want to hack on combinatorrent for a bit...
09:22:31 <beelsebo1> bind is concatMap
09:22:38 <beelsebo1> so apply the function to each elemnt
09:22:42 <beelsebo1> wrap it in a list
09:22:46 <beelsebo1> and concatonate them
09:22:51 <shapr> Oh!
09:23:07 <shapr> hei fluxx, do you play the card game?
09:23:34 <shapr> Speaking of fmap, I should get back to my TODO list for learning Haskell inner secrets.
09:23:45 <shapr> tmoertel: Hiya! How's code?
09:23:48 * shapr boings
09:25:54 <shapr> Hiya Mr Flag.
09:26:22 <shapr> Silly question, is there anyone here who doesn't listen to music?
09:27:01 <lispy> i don't listen to much
09:27:19 <lispy> whatever my gf puts on the fileserver and ends up in my rio....
09:27:28 <lispy> and even then i don't use it very often
09:28:35 <shapr> I was recently wondering what percentage of programmers listen to music. I have this strange idea that more people on #haskell listen to music than people on something like ... #java
09:28:48 <poetix> I thought everyone on #haskell listened to music whilst riding unicycles and playing go
09:28:52 <shapr> :-P
09:29:04 <shapr> I've only played Go once, though I did ride my unicycle to the store today.
09:29:06 <lispy> i usually don't listen to anything when coding
09:29:17 <poetix> No, I can't - too distracting
09:30:15 <poetix> Music and drinking - two of my favourite things - both make me unable to code anything beyond a simple "Hello Wrold"
09:30:29 <shapr> Strange, I often code better when I'm listening to music.
09:30:45 <shapr> Otherwise my brain gets out of sync.
09:30:56 <poetix> Maybe the music I listen to is too distracting. Arvo Part might be better than Megadeth.
09:31:10 <shapr> I'm listening to Led Zeppelin.
09:31:21 <poetix> If I'm listening to music, I normally want to reach for my guitar.
09:31:34 <poetix> I'd be playing along with all the solos if it was Led Zep.
09:31:36 <shapr> Hm, good point. I don't know how to play guitar, though I've been learning saxophone recently.
09:32:10 <poetix> I get totally absorbed in music, listening really carefully to all the parts, even if it's complete candyfloss.
09:32:40 <shapr> That happens to me with music I haven't heard before, but with music I've listened to a thousand times it's more like soothing background noise.
09:32:46 <poetix> It's an affliction - I'm sitting in a pub, Britney Spears comes on the jukebox, and I'm there following the interplay between the snare drum and the bassline.
09:32:59 <poetix> With a sort of vacant look on my face.
09:33:04 <resiak> I've found that it's easier to do other things while listening to non-vocal music than to vocal ~.
09:33:17 <Lor> Or if you don't understand the vocals.
09:33:29 <poetix> Maybe I could code to Sigur Ros
09:33:42 <shapr> I get a real emotional lift from unfamiliar music, resulting in 25 or 30 gb of live show downloads from archive.org.
09:33:58 <shapr> I code well to The Crystal Method - Vegas
09:34:06 <poetix> shapr: http://www.codepoetics.com/wtrem <- my stuff
09:34:53 * shapr grabs
09:35:12 <shapr> I'd like to start making my own tracks, any good recommendations for Linux software?
09:35:32 <shapr> http://haskelldsp.sf.net/ maybe? :-)
09:35:38 <resiak> If you find something worth using, let me know. Everything that I've tried is either useless or doesn't work.
09:36:22 <poetix> The latest generation of Jack stuff looks very promising - Ardour, Jack Rack and all that
09:36:29 <resiak> poetix: You don't have a convenient tarball, do you?
09:36:42 <shapr> poetix: Are you singing?
09:37:14 <shapr> Cute band name, Delirium Tremens.
09:37:46 <shapr> Oh wait, w/trem is the band, and DTremens is the album, right?
09:38:13 <poetix> resiak: sadly no
09:38:22 <poetix> But try DeMudi, for a ready-made multimedia distro
09:38:28 <resiak> poetix: Damn. *applies wget, grep and wget again*
09:38:42 <poetix> Or Suse 9.3, which has a lot of that stuff built in
09:38:44 <shapr> poetix: Happen to have CD-quality versions of these?
09:39:09 <poetix> shapr: Yes, it's me singing. No CD-quality versions, sadly - the mp3s are all I have left (they were made a long time ago, on a different machine)
09:39:13 <shapr> :-(
09:39:31 <shapr> This is good stuff.
09:40:07 <poetix> Thank you. It is heavily influenced by My Bloody Valentine, whose guitarist Kevin Shields did some of the soundtrack for Lost In Translation
09:40:24 <poetix> I have to go - leaving work - back later...
09:40:26 <shapr> I've heard one of their albums, I liked it.
09:40:29 <shapr> cya
09:43:19 <shapr> g'day SyntaxNinja
09:43:25 <SyntaxNinja> heya shapr
10:00:03 <basti_> hi
10:00:48 <SyntaxNinja> hi
10:14:11 <beelsebo1> bah... I'm sure there should be a neat way of doing this with the list monad
10:14:16 <beelsebo1> but I can't see it yet
10:14:56 <beelsebo1> I want a function that checks if a list contains an element, and does something with it if it does, and otherwise just gives mzero
10:15:44 <ndm> i'm trying to use GHC's browse command to get out a list of all instances vs all types
10:16:06 <ndm> ie Bounded Char etc. for all possible types and all possible typeclasses
10:16:12 <ndm> is there anyway to do this?
10:16:36 <ndm> if you do :info Char it doesn't tell you bound say Typeable unless you have Data.Typeable loaded
10:17:08 <basti_> hm
10:17:10 <ndm> and :info Typeable doesn't mention say CSize unless you have Foreign.C loaded
10:17:32 <basti_> maybe youre better off with some index search engine? (like hoogle)
10:17:50 <ndm> yeah, thats why i need it - this is to generated hoogle data files!
10:17:59 <ndm> generated/generate
10:18:30 <basti_> ohh
10:19:11 <basti_> to be honest, my approach would be using a haskell parser that just grabs all important information out of every .hs file in reach
10:19:41 <basti_> i think that'd be lots quicker than coercing :b or :i to give you the right stuff
10:19:50 <basti_> did you try loading *all* modules though?
10:20:02 <ndm> is there a way to load all modules?
10:20:11 <ndm> i guess if all modules were loaded you'd get it
10:20:38 <basti_> hmm. get all names with perl, put them all in one line, pipe that to ghci?
10:20:40 <basti_> :)
10:20:41 <ndm> as it happens, :b and :i are pretty much perfect for extracting the information - much nicer than a parser, because then you have to infer types for non-typed things
10:20:53 <basti_> thats right.
10:20:53 <ndm> command line limit of about 80 chars
10:21:01 <basti_> really???
10:21:04 <ndm> but i've been doing it with :m + [10 at a time]
10:21:09 <ndm> soemthing like that
10:21:18 <ndm> its certainly not enough for all Data.* ones in one line
10:21:29 <basti_> i thought we do this FP stuff to avoid hardcoded limits.
10:21:44 <basti_> so does it break with :m +?
10:22:08 <ndm> not yet, just wondering if there is a better way before I :m + every single module
10:22:47 <basti_> i see.
10:22:54 <basti_> it might be a PITA yes.
10:23:15 <ndm> and i expect ghci to choke at some point, but we'll see
10:23:36 * basti_ nods
10:23:43 <basti_> are you the guy behind hoogle (tm)?
10:24:25 <ndm> yeah
10:24:46 <ndm> i want to add support for all of GHC's libraries
10:24:58 <lispy> ndm: cool!
10:25:03 <basti_> thats a great project
10:25:36 <TheHunter> ndm, is there a darcs repository for hoogle?
10:25:44 <ndm> no, but there is a cvs one now
10:26:03 <ndm> TheHunter, https://sourceforge.net/projects/hoogle/
10:26:20 * lispy waits for the darcs repo
10:26:23 <TheHunter> cvs is no good, discourages people to send patches.
10:26:32 <ndm> i know, but i can't use darcs
10:26:35 <ndm> it confuses me
10:26:36 <shapr> Why not?
10:26:38 <TheHunter> at least in the haskell world.
10:26:39 <ndm> no GUI
10:26:46 <ndm> @google Tortoise CVS
10:26:48 <lambdabot> http://www.tortoisecvs.org/
10:26:56 <ndm> the single reason to use CVS over everythign else
10:27:21 <TheHunter> dons mentioned he gets about 50 times more hs-plugins patches since he switched from cvs to darcs.
10:27:44 <shapr> lambdabot development increased tremendously when I switched to darcs.
10:27:50 <TheHunter> you shouldn't get too attached to a gui.
10:27:56 <ndm> i love my gui
10:28:00 <Leimy> dons: aroudn?
10:28:10 <ndm> i am already totally adicted, i'll just wait for tortoisedarcs
10:28:14 <lispy> TheHunter: better, yet, can we port the tortoise gui to darcs?
10:28:14 <Leimy> looks like wiki spam took out PracticalHaskell :)
10:28:24 * Leimy is convinced that wikis are fundamentally broken
10:28:34 * shapr shrugs
10:28:37 <shapr> Wikis work fine.
10:28:45 <TheHunter> ndm, i guess you would have to write it yourself. Most haskellers are satisfied with darcs the way it is.
10:28:55 <Leimy> yeah... just no way to stop people clobbering things unless you enable authentication
10:29:19 <shapr> Leimy: LocalBadContent is your friend.
10:29:20 <ndm> TheHunter, yeah - but too many projects on already
10:29:22 <lispy> Leimy: even with authentication i've had my wiki clobbered
10:29:38 <Leimy> shapr: whatever that is
10:29:42 <ndm> i barely get any time for hoogle as it is...
10:30:04 <lispy> I think saying that wikis don't work because of vandalism is sort of like saying that spam has defeated email, or that we shouldn't have parks because people carve on the benches
10:30:10 <TheHunter> what the wiki needs is the following: you add a line to the localbadcontent and the system lists all changes containing the new word and asks you to revert them.
10:30:57 <TheHunter> ndm, that's why you should switch to darcs - have other people make changes to your code, too.
10:31:35 <ndm> TheHunter, i'm too much of a control freak to let massive changes in...
10:31:48 <ndm> although there are some patches from dons in already
10:32:13 <Leimy> lispy: I think being satisfied with the state of wiki and email is for luddites
10:32:24 <shapr> Leimy: So fix it. :-P
10:32:35 <shapr> I know the fix for wiki changes actually.
10:32:47 <shapr> But it requires a change in the way we use wikis.
10:33:00 <lispy> Leimy: what about parks?
10:33:30 <Leimy> lispy: I don't know about parks... I don't go to them
10:33:53 <shapr> TheHunter: Yeah, that would be a good improvement.
10:35:16 <shapr> I want to switch HaWiki to Flippi soon.
10:35:28 <shapr> Then we can just make the darcs repo available.
10:35:36 <lispy> ndm: if you don't allow massive changes then we'll end up with hoogle and x-hoogle ;)
10:35:50 <TheHunter> ndm, would you let a change to the pretty printer in?
10:36:00 <ndm> lispy, we already have xhoogle, its the Mac version
10:36:04 <ndm> TheHunter, definately
10:36:10 <lispy> ndm: hehe
10:36:31 <ndm> its pretty bad at the mo, excessive brackets and stuff - i intend to learn show and showPrec etc. and redo it using that at some point
10:37:38 <ndm> but a patch would be wonderful
10:37:56 <ndm> i definately want it to be nhc, hugs and ghc compliant though
10:54:05 <TheHunter> showFuncArgs isn't used, right?
10:58:04 <perspectival> su
10:58:37 <basti_> ...and the password?
10:58:38 <basti_> :)
10:59:41 <lispy> lambdabot needs to respond to those sorts of typos :)
11:00:31 <basti_> indeed.
11:00:40 <basti_> and then save the results.
11:00:45 <incomplete> evening
11:02:29 <TheHunter> evening xerox. And happy belated birthday!
11:02:41 <incomplete> Thank you :-)
11:04:51 <TheHunter> oh, c'mon, what is the matter with the dns servers here?
11:04:56 <TheHunter> % host www.haskell.org
11:04:56 <TheHunter> Nameserver not responding
11:04:56 <TheHunter> www.haskell.org A record not found, try again
11:06:40 <TheHunter> ndm, ok, i think it works fine now. How do I submit the patch?
11:06:49 <RemiTurk> hi all
11:06:53 <TheHunter> hi RemiTurk
11:07:04 * RemiTurk realizes he still doesn't like his nick
11:07:33 <ndm> how many files have you modified
11:07:45 <TheHunter> only TypeSig.hs
11:08:10 <ndm> just email me the file
11:08:12 <incomplete> TheHunter, what kind of prettyprintification did you implement?
11:08:23 <ndm> ndmitchell -AT- gmail -DOT- com
11:08:38 <ndm> I can just drop it on top of mine and diff from there
11:08:44 <lispy> cvs diff -u TypeSig.hs | mail -s "Patch for hoogle" ndmitchell -AT- gmail -DOT- com
11:08:47 <TheHunter> I adjusted the hoogle prettyprinter to use showsPrec.
11:09:01 <ndm> that sounds exactly what was needed
11:09:04 <TheHunter> thanks lispy
11:09:11 <lispy> TheHunter: it's untested :)
11:09:21 <ndm> easier if you just send the whole file as an attachment, rather than a diff
11:09:28 <TheHunter> lemme do a little refactoring first.
11:09:31 <ndm> i must get round to learning how to apply patches...
11:09:39 <ndm> whenever you are done with it, sent it off
11:12:35 <TheHunter> i commented showFuncArgs out - doesn't seem to be used.
11:13:22 <ndm> did you test with both command line and Web versions?
11:13:29 <ndm> command line doesn't do colour, web version does
11:13:44 <TheHunter> I just typed make
11:14:10 <ndm> that only builds the command line version
11:14:18 <ndm> if you have hmake then cd to src
11:14:21 <ndm> hmake Web
11:14:32 <TheHunter> ok, will try next.
11:14:47 <ndm> or hugs works fine with both
11:15:13 <incomplete> Do you know if pkg-config has some system-wide configuration file?
11:18:12 <TheHunter> hmake is screwed up here...
11:18:16 <incomplete> Better have dinner.
11:18:46 <ndm> if you just use hugs then it should work
11:18:51 <ndm> thats what i use for developing it
11:19:00 <TheHunter> hugs Web.hs ?
11:19:00 <ndm> i only use hmake for the web releases
11:19:08 <ndm> and i never use the makefile
11:19:33 <ndm> TheHunter, yep, hugs Web.hs
11:20:23 <TheHunter> ok, so ghci Web.hs..
11:20:35 <TheHunter> damn, my refactoring has broken something
11:21:21 <vegai_> l
11:21:21 * TheHunter stares at a screen full of warnings
11:21:33 <ndm> i'm pretty sure it requires the funcArgsOut thingy
11:21:46 <ndm> the code needs love and attention, esp the front end of the web
11:21:55 <TheHunter> yes, there's an error indeed.
11:22:51 <TheHunter> you might wanna consider explicit export lists.
11:24:25 <ndm> yeah, i prefer them
11:24:34 <ndm> i usually start implicit, and hacky code
11:24:49 <ndm> then tidy it up later and nail down what exactly is exported and give it a sensible design
11:24:54 <ndm> hoogle is still at stage 1 :)
11:25:05 <TheHunter> is there an easy way to test the web front end?
11:25:06 <TheHunter> i see.
11:25:44 <TheHunter> Web.hs compiles now, btw.
11:26:19 <ndm> compile it up
11:26:32 <ndm> then "web map" should print out the required HTML to the screen
11:27:05 <ndm> probably best to do "web Int -# Bool" and open the result in a browser to check the colouring
11:27:32 <TheHunter> ok, will do.
11:27:43 <ndm> it should generate temp.htm as a side effect of running, purely for debugging
11:28:22 <TheHunter> no colors there :/
11:29:31 <ndm> you might need to get a copy of the css file in the right direcetory
11:30:07 <TheHunter> where can i find the css file?
11:30:27 <ndm> i'll just figure that out...
11:31:34 <ndm> http://www-users.cs.york.ac.uk/~ndm/hoogle/search.css
11:31:45 <ndm> and place that in the same directory as temp.htm, probably src
11:31:53 <TheHunter> oki, thansk
11:34:37 <TheHunter> ok, looks very much like the hoogle web page, will send mail now.
11:34:50 <ndm> cool, thanks
11:35:29 <ndm> got it, will take a look and apply it
11:38:21 <ndm> cool, looks better definately - just committing
11:38:43 <nibro> good evening #haskell
11:39:32 <TheHunter> oh, things like (Maybe a) still have unnecassary parens.
11:39:40 <nibro> anyone in here who knows how to make dvips use type1 fonts (as in a paper submission)?
11:39:52 <ndm> TheHunter, what is your website/handle/whatever for a credit in the Readme?
11:40:58 <TheHunter> you can just use my name
11:41:06 <TheHunter> don't have a website..
11:41:10 <lispy> nibro: does \usepackage{latexsym} help?
11:43:34 <nibro> lispy: I'm not quite sure, how can you tell really what fonts you're getting?
11:43:53 <TheHunter> maybe only 2 pred-levels are really needed.
11:43:55 <ndm> TheHunter, ok, its all committed now - if you fix anythign else just send it over
11:47:28 <TheHunter> no, we really need 3 levels, everything's fine.
11:49:13 <lispy> nibro: i don't know
11:50:24 <ndm> ok, off home now
11:50:31 <ndm> if you come up with any patches just email them off to me
11:50:44 <ndm> ideally just as the whole file, not as a patch...
11:51:26 <TheHunter> ok, well send you a slightly modified hoogle.txt (Monad a --> Monad m)
11:51:30 <TheHunter> *will
11:51:48 <ndm> any reason? or just so it looks better?
11:52:15 <TheHunter> just so it looks better.
11:52:26 <TheHunter> "Monad a" is horrible.
11:52:28 <ndm> hoogle.txt is auto-generated
11:52:36 <ndm> and i'm working on totally redoing the generation scripts
11:52:55 <ndm> if you patch it manually i'll commit that, since the generation scripts are broken right now
11:53:10 <ndm> I'll try and see what I can do to fix it in the new scripts
11:53:28 <TheHunter> if you're planning on switching to getting the information from ghc, you'll get Monad m for free.
11:55:13 <ndm> depends on exactly how much my scripts break things :)
11:55:41 <TheHunter> how do I generate stuff like Monad.f.join.htm ?
11:55:44 <ndm> but it looks like i will get it for free
11:56:01 <ndm> using a pile of horrible c# scripts that i haven't even released and data from zvon.org
11:56:28 <ndm> i'm currently thinking of going towards haddock doc's, but they aren't as good, as not sure what will happen with them
11:56:38 <TheHunter> no, i mean how do I get the web page that appears when clicking on join.
11:57:11 <ndm> http://www-users.cs.york.ac.uk/~ndm/hoogle/generated/Monad.f.join.htm
11:57:21 <ndm> its pretty empty though... - the data in zvon must be blank for that
11:58:11 <TheHunter> oh, they're from zvon, so the prettyprinter isn't involved?
11:58:18 <ndm> nope
11:58:21 <ndm> well, yes and no
11:58:30 <ndm> its an entirely different prettyprinter
11:58:37 <TheHunter> ok, i see.
11:59:08 <TheHunter> oh, that prettyprinter seems to do fine.
11:59:57 <ndm> yeah
12:00:09 <ndm> ok, had better go - send any patches
12:00:13 <ndm> and i'll be on again tomorrow
12:00:15 <ndm> bye
12:00:25 <TheHunter> see you
12:04:01 <musasabi> -c
12:56:27 <samc> what do intensional and extensional mean, mathematically speaking?
12:57:43 <samc> nevermind
12:57:49 <incomplete> http://mathworld.wolfram.com/SetExtension.html ?
12:58:03 <lispy> http://mathworld.wolfram.com/Intension.html
12:58:22 <lispy> so intensional is about listing properties, and extensional is about listing members
13:12:09 <boegel> @yow
13:12:52 * boegel feels lonely lately when he enters #haskell
13:12:59 <musasabi> evening boegel
13:13:06 <incomplete> boegel!
13:13:12 <incomplete> Let me find it...
13:13:14 <boegel> why are things so quiet in here lately ?
13:13:24 <incomplete> http://www.schneier.com/blog/archives/2005/07/cisco_harasses.html
13:13:30 <incomplete> boegel, the slides are available.
13:13:37 <boegel> woie!
13:13:50 <lispy> boegel: we're hiding from you :)
13:13:56 <lispy> boegel: it was noisy this morning
13:14:03 <lispy> well, morning in my TZ
13:14:23 <lambdabot> module "quote" screwed up: thread killed
13:14:38 <lispy> @vixen are you feeling alright?
13:15:34 <lispy> boegel: nice one, comment on the quietness and then not respond to anything i say ;)
13:15:49 <lambdabot> module "vixen" screwed up: thread killed
13:15:51 * lispy monologues
13:16:16 <lispy> dons: <whine>lambdabot is broken!</whine>
13:17:28 <boegel> lispy: I'm reading the url incomplete gave me about the cisco stuff
13:17:39 <lispy> boegel: i figured, but i had to tease you :)
13:17:51 <boegel> I think it's nuts, they own like 80% of internet's router, and they don't fix a major bug
13:18:00 <boegel> s/router/routers
13:22:00 <frederik> > Cisco said the presentation didn't identify any flaws not previously disclosed, but did explore new methods for exploiting flaws in the software that runs its routers. The company said it isn't sure whether the flaws could allow a hacker to take control of a router, which is a specialized computer.
13:22:05 <frederik> hrr?
13:22:15 <frederik> isn't a new way of exploiting something a new flaw?
13:22:47 <boegel> cisco is full of shit
13:23:03 <boegel> so is every big company once they own a monopoly on something
13:23:11 <boegel> apple is heading the same way if you ask me
13:25:25 <frederik> > When Mr. Lynn took the stage yesterday, he was introduced as speaking on a different topic, eliciting boos. But those turned to cheers when he asked, "Who wants to hear about Cisco?" As he got started, Mr. Lynn said, "What I just did means I'm about to get sued by Cisco and ISS. Not to put too fine a point on it, but bring it on."
13:25:31 <frederik> Wow, I wish my talks were so dramatic
13:25:59 <frederik> i have to give a talk on haskell btw, any advice?
13:26:18 <jlouis> build a program raping Cisco routers
13:26:56 <jlouis> I don't think they have 80% market share
13:26:57 <SyntaxNinja> frederik: I think that they had believed the flaws to be non-exploitable or something
13:27:00 <musasabi> Is the new version of C2HS packaged for debian?
13:27:33 <SyntaxNinja> anyone who has a clue about cell phone networks in the US and / or treo smart phones, msg me :)
13:27:56 <frederik> SyntaxNinja: yeah, that's what it sounds like. but the way they're spinning it is deceptive
13:27:59 <SyntaxNinja> frederik: what's the audience?
13:28:12 <SyntaxNinja> frederik: spin. yeah.
13:28:16 <frederik> SyntaxNinja: researchers at Cambridge, who have never seen any haskell code
13:28:31 <frederik> SyntaxNinja: who are computer science people
13:28:38 <SyntaxNinja> frederik: how is that possible? ;)
13:28:38 <lispy> frederik: just refer to the code as magic
13:28:52 <frederik> SyntaxNinja: i don't know
13:28:55 <lispy> frederik: i'm sure that will impress them ;)
13:28:58 <jlouis> do they know Functional programming?
13:29:03 <frederik> not really
13:29:07 <jlouis> ok
13:29:11 <frederik> the big project is in c++
13:29:14 <SyntaxNinja> frederik: then it sounds pretty safe to do a mix of high-level and low-level stuff.
13:29:28 <SyntaxNinja> why functional progarmming is good, here are some code examples.
13:29:41 <jlouis> that was what I would do
13:29:43 <frederik> how far can i get do you think?
13:29:48 <frederik> like monads? type classes?
13:29:53 <jlouis> as long as you explain stuff
13:30:06 <SyntaxNinja> personally, I'd skip monads, but do basic ideas of typeclasses
13:30:09 <jlouis> I can usually tell people what type classes are in 5 minutes and they understand it
13:30:17 <frederik> ok
13:30:20 <jlouis> monads are a bit evil
13:30:29 <frederik> hmm
13:30:46 <frederik> i don't think they're evil
13:30:51 <Leimy> I don't think monads are inherently worse than continuations in lisp/scheme
13:30:58 <vegai_> monads don't seem to do anything useful for imperative programmers
13:31:16 <frederik> i was going to show the parser example made with the state monad and the list monad
13:31:20 <Leimy> the key word is "seem" :)
13:31:22 <jlouis> frederik: they are evil to people not having seem them before
13:31:39 <jlouis> seem them... hehe
13:31:50 <frederik> and maybe a continuation monad transformer, i don't know
13:32:07 <Leimy> I always forget what liftM is good for
13:32:27 <lispy> the do notation shouldnt' be to bad if you try to tell them it's like a block of code in C
13:32:52 <SyntaxNinja> yeah, that's what I'd do. just say "do means monads, they're not scary, in fact, they let you program like C, but safer."
13:32:56 <frederik> are you saying i should present 'do' notation without going into the details of what a monad is?
13:33:00 <SyntaxNinja> and move on ;)
13:33:05 <frederik> hmm
13:33:05 <jlouis> @type liftM
13:33:15 <Leimy> http://www.zvon.org/other/haskell/Outputmonad/liftM_f.html
13:33:15 <jlouis> lambdabot!!!
13:33:17 <Leimy> heh
13:33:29 <lispy> frederik: do notation looks pretty much like declaring variables and using them in a sequence
13:33:29 <Leimy> Monad a => (b -> c) -> a b -> a c
13:33:42 <Leimy> it's sugar :)
13:33:55 <Leimy> useful sugar... but sugar nonetheless
13:34:00 <lispy> yup
13:34:23 <frederik> are there a good set of slides i can look at online?
13:34:26 <Leimy> I think beginning Haskell programmers are probably OK to use it and then one day will need to understand what it's really doign :)
13:34:27 <lispy> just get 'em hooked and then unload the truth on them :)
13:34:34 <Leimy> exactly :)
13:35:03 <incomplete> Do you happen to know how to use vncserver locally?
13:35:53 <lispy> incomplete: rtfm? ;)
13:36:16 <lispy> incomplete: do you mean instead of 'startx' or using a graphical login thingy?
13:36:30 <lispy> incomplete: or are you just rying to run vncserver?
13:36:42 * shapr boings
13:36:55 * boegel takes shapr's hands and boings along
13:37:04 <shapr> hoi boegel, how's life?
13:37:15 <boegel> shapr: busy, but hey, that's how we like it
13:37:46 <incomplete> lispy, I'm trying vnc2swf, do you know it?
13:38:06 <lispy> incomplete: no, sorry :(
13:38:16 <lambdabot> module "type" screwed up: thread killed
13:38:18 <lispy> swf is shockwave right?
13:38:25 <incomplete> lispy, do you know how to run a vnc server on something like Xnest?
13:38:42 <lispy> incomplete: i haven't used xnest
13:38:56 * boegel leaves for some more Harry Potter
13:39:00 <lispy> can you pop open a terminal and check $DISPLAY?
13:39:01 * SyntaxNinja boings over shapr
13:39:15 <incomplete> lispy, what I need isn't Xnest, I mean running a -geometry X and vncserver it
13:39:48 <lispy> incomplete: um...no idea...
13:40:32 <incomplete> lispy, http://www.unixuser.org/~euske/vnc2swf/rec_vncserver.html
13:41:48 <lispy> incomplete: heh, that's pretty cool
13:41:53 <lispy> incomplete: good luck :)
13:42:09 <lispy> man, i'm going straight to bed when i get home tonight
13:42:13 <incomplete> OK I got it :-)
13:42:21 <incomplete> Great.
13:50:31 <incomplete> Wanna see?
13:52:07 <incomplete> http://haskell.galois.com/~paolo/sproing/
14:01:54 <TheHunter> @pl 1 + 2
14:01:55 <lambdabot> 3
14:02:00 <TheHunter> @lambda 1 + 2
14:02:07 <lambdabot> 3
14:02:14 <TheHunter> @eval 1 + 2
14:02:33 <TheHunter> i wonder what dons' computer is doing right now..
14:04:38 <TheHunter> @eval 1 + 2
14:04:38 <TheHunter> @eval 1 + 2
14:04:38 <TheHunter> @eval 1 + 2
14:04:42 <TheHunter> @eval 1 + 2
14:05:23 <lambdabot> module "plugs" screwed up: thread killed
14:05:34 <lambdabot> 3
14:05:45 <lambdabot> 3
14:05:53 <TheHunter> way to go, lambdabot
14:05:53 <lambdabot> 3
14:06:02 <lambdabot> 3
14:06:30 <TheHunter> @type liftM
14:06:57 <TheHunter> @type liftM
14:09:51 <lambdabot> module "type" screwed up: thread killed
14:09:51 <lambdabot> bzzt
14:10:08 <TheHunter> @type Control.Monad.liftM
14:10:11 <lambdabot> forall r (m :: * -> *) a1.
14:10:11 <lambdabot>         (Monad m) =>
14:10:11 <lambdabot>         (a1 -> r) -> m a1 -> m r
14:12:09 <TheHunter> @listcommands
14:12:10 <lambdabot> all-dicts arr babel botsnack code define definitions devils dice
14:12:10 <lambdabot> dict dict-help docs dummy easton echo elements elite eurohaskell
14:12:10 <lambdabot> eval fact fact-cons fact-delete fact-set fact-snoc fact-update
14:12:10 <lambdabot> foldoc fortune gazetteer get-definition ghc google help hitchcock
14:12:10 <lambdabot> hoogle hoogle+ index jargon karma karma+ karma- kind lambda learn
14:12:13 <lambdabot> libsrc listchans listcommands listmodules lojban moo more paste pl
14:12:15 <lambdabot> pl-resume plugs pointless prelude quote remember repo-add repo-del
14:12:16 <lambdabot> [4 @more lines]
14:12:21 * shapr boings over SyntaxNinja 
14:12:39 <shapr> hei sieni
14:12:40 <TheHunter> @todo-add priviledged users should get priviledged listcommands.
14:12:42 <lambdabot> Entry added to the todo list
14:12:48 <shapr> sieni: learning Haskell?
14:12:54 <TheHunter> @reconnect
14:13:15 <TheHunter> hope that didn't kill lambdabot.
14:13:55 <TheHunter> @type id
14:14:38 <TheHunter> @seen shapr
14:17:11 <incomplete> @type shapr
14:17:41 <lambdabot> module "type" screwed up: thread killed
14:17:41 <lambdabot> shapr is in #haskell. Last spoke 4 minutes and 51 seconds ago.
14:17:56 <lambdabot> bzzt
14:18:18 <TheHunter> lambdabot, you didn't by any chance miss anything since then, did you?
14:18:47 <TheHunter> @type id
14:19:37 <TheHunter> @type id
14:20:49 <lambdabot> module "type" screwed up: thread killed
14:20:54 <lambdabot> forall a. a -> a
14:22:40 <musasabi> @seen Igloo
14:22:43 <lambdabot> Igloo is in #haskell. Last spoke 20 hours, 15 minutes and 6 seconds
14:22:43 <lambdabot> ago.
14:24:13 <sieni> shapr: Trying to :-)
14:25:38 <Igloo> hello?
14:26:37 <nothingmuch> hello!
14:31:07 <Leimy> what's going on nothingmuch?
14:31:10 <Leimy> nothingmuch?
14:31:11 <Leimy> :)
14:34:49 <nothingmuch> uh, yep =)
14:36:56 <nothingmuch> ugh, what stupidity
14:36:58 <nothingmuch> a rar archive
14:37:03 <nothingmuch> containing a rar archive
14:37:05 <nothingmuch> of a movie
14:41:33 <nothingmuch> no wait, there's more
14:41:41 <nothingmuch> a rar, containing a rar, of a multi file rar, of the movie
14:43:20 <basti_> ah the joys of intelligent file sharing peers :)
14:47:33 <shapr> sieni: Have any questions?
14:47:50 <shapr> Man I totally suck at wesnoth.
14:48:35 <musasabi> wesnoth ?
14:48:55 <shapr> http://www.wesnoth.org/
14:49:17 <shapr> I'm pretty good at TORCS though.
14:49:22 * shapr is productively playing games.
14:49:43 <kaol> you're stress testing the system
14:49:50 <shapr> Uh, right.
14:50:05 <sieni> shapr: not yet
14:51:25 <lament> funny hostname
14:51:33 <lament> i mean username
14:51:51 <shapr> Which one?
14:54:53 <lament> lrrrs
14:55:03 <lament> okay it's not really funny.
15:00:22 <jlouis>     /g 2
15:00:24 <jlouis> bleh
15:21:50 <musasabi> @hoogle GHC
15:22:07 <musasabi> @hoogle compilerFlavor
15:22:57 <TheHunter> i'm guessing some massively space-leaking program is running on lambdabot's box.
15:24:16 <wagle> @seen lambdabot
15:24:18 <lambdabot> Yes, I'm here.
15:24:26 <musasabi> Is there a way to locate the module defining something with ghci?
15:24:31 <wagle> @plugs 1+1
15:24:40 <lambdabot> 2
15:24:49 <wagle> @hoogle GHC
15:25:04 <wagle> @index something
15:25:05 <lambdabot> Data.Generics.Schemes, Data.Generics
15:25:13 <wagle> ^^^
15:25:29 <musasabi> @index compilerFlavor
15:25:30 <lambdabot> Distribution.Setup
15:26:03 <_metaperl> "High Schools May not Adequately Prepare Dropouts for Unemployment" - http://www.theonion.com/news/index.php?issue=4131
15:26:12 <SyntaxNinja> yummy compiler flavors
15:26:13 <shapr> Shocking conclusion.
15:47:16 <shapr> In this society, there is lack of confidence more than lack of ability.
15:47:43 <shapr> shazam!
15:49:04 <TheHunter> which society is that referring to?
15:49:22 <shapr> The one I'm physically part of, at least.
15:49:38 <shapr> How's the USA?
15:49:40 <TheHunter> sounds like a very european thing
15:49:48 <shapr> I think you're right.
15:50:02 <TheHunter> it's great!
15:51:15 <TheHunter> i'm having a lot of spare time right now, but this will change soon.
15:59:42 <jlouis> TheHunter: lambdabot is out of spawnable processes
15:59:48 <jlouis> is my guess
15:59:54 <jlouis> or fds maybe
16:00:15 <jlouis> if it were space leaking it would recover
16:03:43 <TheHunter> i'm not saying lambdabot is space leaking.
16:04:12 <TheHunter> i think lambdabot is fine, there's just another process running on that box that is using a lot of memory.
16:06:09 <TheHunter> @timein Sydney
16:06:13 <lambdabot>  Friday, August 5, 2005 at 9:07:15 AM EST
16:06:31 <TheHunter> we will know soon.
16:07:32 <TheHunter> or is that "we will soon know"?
16:10:51 <TheHunter> @moo
16:11:08 <TheHunter> dons, i want @moo back
16:18:07 <thedward> @timein tblisi
16:18:09 <lambdabot>  Sorry, don't know this city
16:18:32 <thedward> @timein tbilisi
16:18:33 <lambdabot>  Friday, August 5, 2005 at 3:19:36 AM
16:19:04 <jlouis> TheHunter: even if it is another process the reaper should come kill it
16:19:20 <jlouis> I think it is another resource
16:19:39 <TheHunter> what do you mean, "resource"?
16:20:05 <jlouis> anything which has a static limit in unix: file descriptors, number of processes per user, etc
16:20:56 <jlouis> but we will soon know
16:20:57 <jlouis> heh
16:21:08 <jlouis> know soon?
16:21:36 <TheHunter> i'm not sure what is correct, that's why i'm asking.
16:21:52 <wagle> @timein moon
16:21:53 <lambdabot>  Sorry, don't know this city
16:22:03 <jlouis> me too
16:22:36 <TheHunter> if it were a limited resource, it would less depend on timing.
16:22:57 <TheHunter> (or whatever needs to be changed in that sentence for it to be grammatically correct)
16:24:05 <thedward> @timein hell
16:24:06 <lambdabot>  Friday, August 5, 2005 at 3:25:09 AM
16:25:17 <samc_> my ghost must have realised It was late for an appointment
16:25:59 <TheHunter> hmm, google: "we will soon know": 5000, "we will know soon": 5500, so i guess both are correct.
16:26:43 <samc_> yes, both are correct
16:27:01 * TheHunter wonders if he should go to the store to buy some water or have another beer.
16:42:11 <wilx> Beer is diuretic.
16:42:24 <wilx> So if you are thirsty, you should get water instead :)
16:44:03 <Beelsebob> sometimes beer is just what you need though
16:44:12 <Beelsebob> when it's rediculously hot
16:44:22 <Beelsebob> a freezing beer is just mwuhuhuhuhuhuh
16:46:03 <wilx> As far as I know it might taste good and replenish your minerals loss but it won't help you retain water.
16:46:22 <Leimy> mmmmm beeeeeer
16:46:36 <Beelsebob> indeed
16:46:42 <wilx> (Beer sucks. It tastes awful.)
16:46:45 <Beelsebob> beer and water is the best plan
16:46:53 <Beelsebob> a good beer is fucking great
16:47:24 <wilx> Not really. All beer tastes equally bad :)
16:47:49 <Beelsebob> meh... /me agrees to disagree
16:47:55 <wilx> :)
16:48:11 <Beelsebob> I may have been working on my shoulders...
16:48:23 <Beelsebob> but I didn't think I had this much
16:48:23 <Beelsebob> http://www.cs.kent.ac.uk/people/rpg/tatd2/oops.jpg
16:50:44 <TheHunter> i've made my choice - just came back from the store...
16:50:51 <TheHunter> just too pathetic to drink alone.
16:50:53 <Beelsebob> hmm?
16:50:56 <Beelsebob> haha
16:51:16 <TheHunter> anyway, wilx aren't you from czech?
16:51:41 <SyntaxNinja> TheHunter: good choice
16:51:49 <wilx> I am.
16:52:03 <TheHunter> so you gotta love beer.
16:52:07 <wilx> But I don't drink beer.
16:52:09 <Beelsebob> haha
16:52:15 <Beelsebob> czech beer sucks
16:52:16 <wilx> Or any other alcohol.
16:52:19 <Beelsebob> (IMHO)
16:52:34 <wilx> Man, Czech beer is the best you can get.
16:52:38 <TheHunter> says Beelsebob from .uk?
16:52:43 <Beelsebob> yep
16:52:57 <Beelsebob> either *real* guinness or newky brown for me
16:53:15 * TheHunter likes czech beer.
16:53:17 <Beelsebob> or a good pale ale
16:53:21 <Philippa_> you'll ignore the huge pile of good ale on offer around here?
16:53:23 <Philippa_> right :-)
16:53:29 <Philippa_> newky brown's really nothing special...
16:53:35 <Beelsebob> I love the stuff
16:53:44 <Beelsebob> there's something really caramelly about it
16:54:07 <Beelsebob> only maybe once every week or two, but it's really good on occasion
16:54:22 <Beelsebob> Yorkshire Terrier, or Witstable Bay are good
16:54:34 <Beelsebob> but in general, a nice pale ale will satisfy me
16:55:49 <Beelsebob> meh... whatever... you put beer in front of me, I'll be happy
16:59:11 <Beelsebob> http://www.bbc.co.uk/radio/aod/genres/comedy/aod.shtml?radio4/ape_got_lucky
17:04:39 <samc_> a Yorkshire terrier is a dog, I think someone's pulled a fast one on you there mate
17:05:06 <Beelsebob> it's quite nice to drink though
17:05:23 <Beelsebob> ... go to York and you'll fnd out
17:06:14 <samc_> i think I'll pass
17:07:25 <Beelsebob> what was that?
17:07:29 <Beelsebob> repetition?
17:07:32 <Beelsebob> of what?
17:07:34 <Beelsebob> hahahahaha!
17:08:58 <samc_> ?
17:09:37 <Beelsebob> listen to the thing I posted
17:10:57 <samc_> sorry 26400 bps :(
17:11:41 <Beelsebob> ?
17:16:42 <samc_> connection is probably too slow
17:17:01 <Beelsebob> :(
17:17:31 <Beelsebob> 45kbps here
17:20:56 <Beelsebob> now the problem with esperanto is that
17:21:04 <Beelsebob> every one person who can speak it
17:21:09 <Beelsebob> no one else can
17:23:30 <wagle> lojban
17:28:06 <Beelsebob> anyone fancy a game of mornington cresent?
17:29:07 <wagle> w'zat?
17:29:23 <Beelsebob> hehe, anyone else know, and we can demonstrate for wagle?
17:31:30 <Beelsebob> wagle... listen to this... http://www.bbc.co.uk/comedy/clue/clips/mornington.html
17:32:29 <Beelsebob> awww... they don't actually play
17:32:32 <Beelsebob> what a shame
17:33:19 <Beelsebob> http://www.bbc.co.uk/comedy/clue/new_clips/30show_two.html that's got a bit in
17:38:25 <Beelsebob> http://news.bbc.co.uk/olmedia/75000/audio/_79273_mornington2.ram
18:18:25 <Beelsebob> while out on the ca in a punt
18:18:33 <Beelsebob> s/ca/cam/
18:18:38 <Beelsebob> ....
18:18:41 <Beelsebob> complete the lymeric
18:22:01 <dons> @seen TheHunter
18:22:02 <lambdabot> TheHunter is in #haskell. Last spoke 44 minutes and 47 seconds ago.
18:22:39 <dons> the nightly builds of ghc went a bit nuts last night -- the timeout program wasn't working, so there was about 10 instances of 10queens running :/
18:22:49 <dons> so lambdabot had a hard time responding
18:23:33 <TheHunter> ah, thanks, pretty much what I expected.
18:23:34 <dons> jlouis was almost right, the machine in general was out of resources (not just lambdabot)
18:24:28 <wagle> this xml parser is crap
18:24:54 <wagle> cant tell the difference between <foo> and <foo/>
18:25:42 <TheHunter> dons, i was just wondering, does ghc store type info in .hi files?
18:26:08 <Igloo> dons: Has it worked since it was changed?
18:26:19 <dons> TheHunter, yes! complete unfoldings of functions defns in Core form too
18:26:38 <dons> Igloo, I think this was before SimonM's commit last night.
18:26:54 <dons> though it was working fine till last night. hmm..
18:27:01 <TheHunter> but hs-plugins readIface doesn't return that info?
18:27:14 <Igloo> Oh, but I think queens was only broken for 1 day anyway
18:27:39 <dons> TheHunter, we'd need to define a data type for Core and all of GHC types. A stub is there if we ever wish  to do it.
18:27:41 <TheHunter> btw, it might be a good idea to derive Show for Iface.
18:27:52 <TheHunter> dons, yes, I see.
18:27:58 <dons> we can't derive it , as there are FastStrings, iirc
18:28:40 <TheHunter> what's wrong with |instance show FastString where show = show . upackFS| ?
18:29:24 <TheHunter> so was that 10queens only wasting processor time, or using a lot of (swap) space also?
18:29:32 <dons> but we have showIface instead
18:29:52 <TheHunter> thanks, i missed that one..
18:34:14 <dons> lots of swap got eaten up
18:34:41 <dons> yea,  I guess we could have a show instance. I wonder why I didn't do that in the first place
18:38:33 * dons wonders why darcs doesn't use readline when recording patches
18:39:11 <TheHunter> i've been annoyed by that, too.
18:39:20 <Beelsebob> that's good
18:39:27 <Beelsebob> readline sucks
18:39:40 <TheHunter> hurray for no line-editing at all!
18:39:45 <Beelsebob> readline is the primary reason for 90% of things breaking on 90% of platforms
18:40:07 <dons> hmm. yes. well, at least on solaris and the mac
18:40:21 <Beelsebob> I've seen it break various linux installs too
18:40:32 <TheHunter> what sucks about readline that there's no support for not recording duplicate entries in the history.
18:40:44 <dons> maybe just some basic line editing and arrow keys would be enough for me
18:41:13 <Beelsebob> that would do me
18:41:57 <dons> hmm. I could probably adapt some of the curses code in yi where I do this stuff by hand...  hmm..
18:42:21 <TheHunter> are those readline problems general or haskell-specific?
18:42:35 <TheHunter> pardon my ignorance, never had any problems with readline.
18:43:03 <dons> I know that people always forget to install readline on solaris, netbsd and the mac
18:43:14 <js_> is ghc what i need to compile haskell programs?
18:43:23 <dons> however, once it is installed, I don't think it causes any problems
18:43:35 <TheHunter> is it harder to install than, say ghc?
18:43:37 <dons> js_, it is one of the ways, and the most common. yes.
18:43:48 <js_> ok, thanks
18:44:00 <dons> TheHunter, I don't think so ;)
18:44:17 <TheHunter> and doesn't have netbsd ports which tracks dependencies automatically?
18:44:48 <TheHunter> *doesn't netbsd have
18:45:26 <TheHunter> maybe these are philosphical problems because readline is gpl?
18:45:26 <dons> I only have it on my mac68k. but as Haskell's -package readline needs it to build  ghci, I remember people complaining when trying to bootstrap ghc on this machine, similarly with solaris
18:46:01 <dons> philosophical problems for who?
18:46:15 <TheHunter> i don't know, bsd people?
18:46:32 <dons> oh, sure. but no more than usual
18:47:07 <dons> can't be a reason for darcs though - since its gpl
18:47:08 <Leimy> "bsd people"?
18:47:50 <TheHunter> but perhaps it wouldn't be such a good idea to put another basic line-editing library into the haskell libs.
18:47:56 <TheHunter> *bad idea
18:48:13 <Leimy> readline is the devil
18:48:21 <TheHunter> i don't think it would be hard to do better than readline.
18:48:38 <Leimy> there is a BSD readline clone
18:48:44 <Leimy> it's not 100%
18:49:04 <Leimy> Mac OS X has it
18:49:16 <Leimy> I think it's "libdedit"
18:49:30 <shapr> unicycles! Yargh!
18:49:50 <shapr> So, um, what's up?
18:49:50 <Leimy> http://www.thrysoee.dk/editline/
18:50:02 <mikehammad> is it possible to turn off array bounds checks in haskell?
18:50:05 <mikehammad> in ghc i mean
18:50:24 <shapr> Yeah, you can freeze IOarrays or something.
18:50:36 <Korollary> no, that doesnt eliminate bound checks
18:50:46 <shapr> Oh, I thought it did.
18:50:56 <TheHunter> there are unsafe functions for that, iirc
18:52:22 <dons> yeah, unsafeRead/Write
18:56:38 <TheHunter> there's also System.Console.SimpleLineEditor
18:57:43 <TheHunter> hmm, "initialise :: IO ()", i don't like this kind of confusion.
19:00:59 <dons> ah, so the SimpleLineEditor uses readline if its available, otherwise it emulates
19:02:13 <shapr> Any outstanding TMR business?
19:02:29 <shapr> I think I'm going to re-release IssueFour with all the available articles and take a break.
19:06:37 <shapr> Hey, I like the latest emacs2 binding in Yi.
19:06:40 <shapr> Colors!
19:07:29 <shapr> woo, I killed it somehow.
19:07:57 <dons> colors? kiled it?
19:08:34 <dons> oh C-x 2, for example?
19:09:56 <shapr> Yeah, something like that.
19:22:51 <shapr> If anyone wants to write a TMR article, tell me!
19:24:43 * lispy_ had an idea
19:24:47 <lispy_> not for TMR
19:25:02 <lispy_> but a cool use for some of lambdabot's code
19:25:11 <lispy_> it would be nice to have an interactive haskell tutorial
19:25:15 <Korollary> I want to write a long diatribe on the atrocity that is this programming quiz from Intel...
19:26:04 <lispy_> the tutorial teaches you some stuff, and then gives you challenges, if your code evaluates to the answer, then you move on
19:26:26 <lispy_> if not, it gives you advice and you can either give up and move on or evenually get it right
19:26:48 <lispy_> i saw a lisp tutorial like this once, and it think it would be nice to have a haskell one
19:27:13 <shapr> Sounds cool, write it!
19:27:38 <lispy_> i was also thinking you could use it to do an exploratory study on common mistakes learning haskell
19:28:01 <lispy_> shapr: yeah, finding time is the only hard part :(
19:28:12 <lispy_> does haskell have any cool modules for making interactive websites?
19:28:48 <lispy_> does haskell have anything to do ajax?
19:28:55 <lispy_> hajax....
19:29:28 <shapr> good idea
19:29:54 <lispy_> thanks
19:30:14 <lispy_> i guess that's the good thing about listening to pink floyd.....i often space out and then later i have good ideas :)
19:30:40 <lispy_> (I think down time is important to proper brain functioning....)
19:42:15 <lispy_> lambda the ultimate is /. for PLs?
19:43:44 <lispy_> is WASH good?
19:43:47 <lispy_> anyone used it?
19:45:45 * lispy_ monolouges
19:47:58 * samc_ can't think of any witty and disparaging remarks about /.
19:49:37 <lispy_> ah, well i didn't mean to infer anything bad about LtU
19:50:05 <lispy_> i meant it more as "news for PL geeks.  Stuff that matters."
19:50:43 <samc_> in that sense yes
19:54:08 <TheHunter> dons, err, so what about @moo? can we have it back - i think we've learned our lesson?
19:58:51 <dons> this is controversial
19:59:17 <lispy_> http://nakalele.informatik.uni-freiburg.de/cgi/WASH/Calculator.cgi
19:59:19 <TheHunter> really?
19:59:34 <dons> I'm not sure. maybe if they were smaller
19:59:34 <dons> maybe we should have a vote
19:59:47 <lispy_> that example makes wash seem really cool, but i don't like the page load on every button click :(
20:00:37 <dons> well, Igloo and Heffalump initially raised it with me, and people did tend to run though the entire sequence of moos each time, creating a lot of noise.
20:01:07 <TheHunter> nobody will use the cows in the middle of a lively discussion, and there's no harm in @mooing after nothing has been said in the channel for hours.
20:01:22 <TheHunter> if somebody wants to flood the channel, they can do so anyway.
20:02:12 <dons> well, I'm not sure that nobody moos in the middle of discussions
20:02:50 <TheHunter> ok, so i will implement a discussion-detection.
20:03:24 <dons> that would be reasonable. or we can see how Heffalump or Igloo feel about it now.
20:04:52 <lispy_> i'd just make @moo only work in private
20:06:08 <lispy_> if wash did more ajax magic and less cgi i would really dig it
20:06:57 <lispy_> as that calculator example shows, wash is really cool, but who wants to wait for a page load on every button press
20:31:29 <dons> lispy, I think Yi can now deal with tabs reasonably
20:31:43 <dons> maybe you'd like to test it out on that file you were having problems with last week?
20:42:54 <samc> lispy_, this is a funny read if you haven't seen it yet http://www.bringyou.to/apologetics/p67.htm
20:55:23 <lispy_> <3 dons
20:55:28 <lispy_> dons: i'll try it out ASAP
20:55:38 <lispy_> dons: i have to send in a darcs patch firs
20:55:46 <dons> oh?
20:57:20 <lispy_> Curses.hsc:404:59:
20:57:22 <lispy_>     Couldn't match `Word32' against `Word8'
20:57:22 <lispy_>       Expected type: Word32
20:57:22 <lispy_>       Inferred type: Word8
20:57:22 <lispy_>     In the application `fromEnumW8 bf'
20:57:22 <lispy_>     In the second argument of `intrflush', namely `(fromEnumW8 bf)'
20:59:47 <dons> hmm! what OS?
21:00:04 <dons> that sseems to be related to a patch I put in yesterday
21:02:01 <lispy_> osx
21:02:06 <lispy_> i'm on an ibook
21:02:22 <samc> it's always osx
21:02:49 <dons> samc is right
21:03:22 <lispy_> samc: i haven't finished the url yet, but it's good
21:07:26 <dons> lispy, can you try the patch I just committed?
21:07:50 <dons> oh wait. that won't work. let me try again
21:08:16 <lispy_> i'll gladly try it, just /msg me when it's ready
21:12:06 <samc> every right thinking person knows the planets are held in orbit by His noodly appendages
21:13:36 <dons> samc is right again
21:14:06 <samc> twice in one day, that's my record
21:18:07 <dons> lispy, ok I've reverted the patch. try that.
21:35:28 <lispy_> dons: so it's a lot better, but it still has some weird behavior
21:35:43 <lispy_> dons: thanks!
21:38:57 <dons> what weird behaviour have you seen?
21:39:11 <dons> (note that long lines will still be weird)
21:40:19 <dons> tabs are a pain, and should never have been invented. virtual tabs made by expanding spaces make a lot more sense
21:49:10 <lispy_> dons: it's a long line issue
21:49:16 <lispy_> dons: so i'm not too worried
22:01:09 <lispy_> dons: thanks for fixing that
22:01:45 <lispy_> dons: can you download your yi hacking knowledge to my brain so i can start fixing stuff instead of just reporting it :)
22:06:44 <yosemite> I can't wait to try yi, getting deps installed now
22:08:08 <dons> lispy, unfortunately, the things you're reporting are a bit tricky. but maybe you can work on completing more bindings for your $EDITOR
22:08:21 <dons> yosemite, no deps if you build: make way=static
22:11:34 <yosemite> I wanted all of the feechurs
22:12:06 <yosemite> also I should get up to date to hs-plugins
22:31:45 <lispy_> dons: i can handle harder haskell assignments that you may think ;)
22:31:57 <lispy_> dons: probably the biggest barrier is just knowing the details of yi
22:43:12 * lispy_ wishes he had more time to hack onthings
22:43:21 <lispy_> too many ideas not enough time
22:43:46 <lispy_> i've been trying to write my ideas into my blog so that i can go back and read old entries when i'm not sure what to work on
22:48:57 <dons> oh, I didn't mean to disparage your haskell skills -- its just that it took me a while to work out how to fix the tab code, and i wrote it in the first place!
22:49:14 <vikasg> lispy, I've tried that, and noticed that I've never went back to those ideas :)
22:53:05 <lispy_> dons: i didn't believe it was meant disparagingly, but I still needed to check :)
22:53:30 <lispy_> vikasg: hmm....
22:53:38 <lispy_> vikasg: it's still better than losing the ideas :)
22:58:03 <pejo> lispy, all people I know have too many ideas and too little time.
23:38:05 * joelk gives up. 
23:38:06 <joelk> how does one do a user install of hs-plugins?
23:55:57 <boegel> @seen Itkovian
23:55:58 <lambdabot> I saw Itkovian leaving #haskell 8 days, 17 hours, 32 minutes and 42
23:55:58 <lambdabot> seconds ago, and I have missed 3 minutes and 35 seconds since then.
23:56:09 <boegel> hellow astrolabe
23:56:21 <astrolabe> morning boebel
23:56:37 <astrolabe> oops boegel I mean
23:57:31 <ski> @seen esap
23:57:32 <lambdabot> I saw esap leaving #haskell 7 days, 5 hours, 39 minutes and 9
23:57:32 <lambdabot> seconds ago, and I have missed 3 minutes and 35 seconds since then.
23:59:56 <boegel> boebel is like a nasty ugly bump with icky stuff in it, so please don't call me that again :)
