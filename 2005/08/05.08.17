00:01:50 <boegel> did anyone in #haskell join the ICFP contest ?
00:02:46 <dons> sure. several people I think
00:04:17 <Itkovian> meuning
00:04:21 <boegel> oh, any chance Haskell will win it like last year ?
00:04:28 <boegel> hey Itkovian, long time no see :p
00:04:55 <dons> anyone know if I can automagically use `strip' with cabal?
00:11:10 <Lemmih> Itkovian: Hey.
00:11:58 <dons> Lemmih, do you know how I could have cabal strip the executables it makes?
00:13:01 <Lemmih> It can't by itself but you could probably make a PostBuild hook do it.
00:13:19 <dons> ok. will investigate
00:17:25 <boegel> hello Wed1477
00:17:34 <Wed1477> hello
00:19:10 <boegel> Wed1477: new here?
00:19:17 <Wed1477> not quite
00:19:30 <boegel> oh, ok, haven't seen you here... my fault then ;)
00:19:35 <dblhelix> :)
00:19:48 <Wed1477> thats because my name is the day of the week + random nr
00:19:51 <dblhelix> boegel: are you drunk? Wed1477 is a regular here
00:20:15 <dblhelix> although, indeed, his name changes on a daily basis :)
00:20:22 <Wed1477> must be something in that belgium mayonaise
00:20:30 <dblhelix> I guess
00:20:42 <Wed1477> whats next...the shapr begin tour of haskell :P
00:21:25 <boegel> hey man, I'm sorry, but I haven't seen you
00:21:34 <dblhelix> no I understand why boegel complains about waking up early... he's not that sharp before 10AM :)
00:21:37 <boegel> nor have I seen Mon4258
00:21:47 <Itkovian> Lemmih: erm, I thought it worked, but no juice.
00:21:52 <dblhelix> boegel: are you serious?
00:22:06 <boegel> dblhelix: I am
00:22:14 <boegel> I'm sorry :)
00:22:16 <dblhelix> I'm sorry then
00:22:21 <boegel> dblhelix: I have seen you though :)
00:22:26 <Lemmih> Itkovian: No juice?
00:22:34 <dblhelix> it's remarkable: you're both regulars here
00:22:34 <boegel> and Lemmih, Itkovian, dons, shapr, ...
00:22:48 <boegel> dblhelix: well, I'm guessing I'll remember him now :p
00:23:02 <dblhelix> that's for sure :)
00:23:12 <Itkovian> Wed was prolly Tue yesterday
00:23:19 <Wed1477> Itkovian, gets it :)
00:23:34 <Wed1477> but its ok. not being seen as a regular in an irc chan is always good
00:23:42 <boegel> I'm getting it too, but I never noticed (really!)
00:23:58 <Wed1477> boegel ahaha its ok, il be gone in two weeks anyway
00:24:21 <olliej> Anyone know how to convince GHC6 to compile its base libraries itself?
00:24:32 <dblhelix> if I'm note sure what day of the week it is, I always have a look at my irc client and inspect niels' nick
00:24:47 <Lemmih> olliej: Doesn't it do that already?
00:24:57 <Wed1477> i do that myself too dblhelix :)
00:24:57 <dblhelix> /s/note/not
00:25:32 <olliej> Lemmih: the problem is it keeps complaining about trying to compile its own libraries
00:26:22 <Lemmih> olliej: What does it say?
00:26:34 <olliej> just a mo
00:26:47 <olliej> i think it's because i may have the ghc 5 sources rather than 6
00:26:49 <olliej> ...
00:26:52 <olliej> gah!
00:27:03 * olliej curses not naming directory ghc-src-...
00:27:44 <Wed1477> hehehe
00:27:54 <Wed1477> forgive me for laughing :D
00:28:01 <olliej> :p
00:28:29 <olliej> all this because i need the Core output from ghc... grr...
00:29:22 <Wed1477> isnt there some cmdline option for that?
00:29:57 <olliej> -fext-core
00:30:13 <olliej> the trouble is convincing ghc that i do actually want it to do that
00:30:25 <olliej> for the entirety of the base libraries
00:31:08 <Wed1477> ow it only does it for the app its compiling
00:31:15 <Wed1477> or for anything it compiles for that matter right?
00:31:21 <olliej> yep
00:31:36 <Lemmih> Add 'GHC-Option: -fext-core' to base.cabal?
00:31:44 <Wed1477> and since those base thingies are already compiled and libbed up ....
00:32:11 <olliej> base.cabal?
00:32:37 <Lemmih> *GHC-Options
00:33:09 <Lemmih> olliej: libraries/base/base.cabal
00:36:29 <musasabi> morning
00:37:37 <olliej> Hmmm... i may have convinced it to behave
00:38:01 <olliej> gah...
00:39:05 <olliej> crash and burn on ghc.base
00:40:29 <dons> main = defaultMainWithHooks (defaultUserHooks { postBuild = doStrip })
00:40:29 <dons> doStrip _ _ l = mapM_ (strip (buildDir l)) (map name commands) >> return ExitSuccess
00:40:33 <dons>   where strip d n = system $ "strip" ++ " " ++ d ++ "/" ++ n
00:40:33 <Lemmih> Why do you need the external core for the base libraries, btw?
00:40:34 <dons> did the trick Lemmih. cheers
00:41:13 <dons> though it would be good if I could get a the list of executables from the postBuild hook args somehow.
00:41:59 <musasabi> dons: don't tell anyone but you can read & parse the cabal file in a hook ;)
00:42:15 <dons> ah! I tried that readDesc but it returned Nothing
00:42:27 <olliej> Lemmih: hehe -- my masters project involves writing a haskell compiler targetting .net
00:42:57 <olliej> Lemmih: Have reached the stage where to do anything worthwhile i need to have significant amounts of the base library available
00:42:58 <Lemmih> olliej: Neat.
00:43:25 <dons> anyway, no big issue for h4sh, as it already knows all the executable names
00:43:38 <olliej> by using Core i don't need to deal with the type inference stuff
00:43:45 <olliej> or the optimizatons :)
00:44:32 <olliej> gah, what does ghc not like in ghc.base that causes it to crash... grumble, grumble...
00:45:20 <Wed1477> quite a large master's project
00:45:31 <Wed1477> if done in full
00:45:57 <olliej> yes but skipping the type inference stuff means it's relatively easy
00:46:29 <olliej> parse core, follow all the uses of types and load more .hcr files as necessary
00:46:32 <Lemmih> dons: How about 'rawSystemExit verbose "strip" [d `joinFilePath` n]'?
00:46:48 <olliej> then just bludgeon everything to fit
00:46:57 <dons> Lemmih, ok. you win :)
00:47:07 <olliej> non-strictness is painfully slow atm, as are lambda expressions and partial applications
00:49:04 <olliej> (i have been working on it for many months already)
00:52:48 <olliej> what environment do people use when building ghc6? cygwin/ming/*nix/osx?
00:53:17 <dons> all of them
00:53:21 <Lemmih> Debian here.
00:53:42 <dons> AIX
00:55:45 <olliej> so cygwin should work?
00:55:56 <dons> mingw is know to be faster and more stable though
00:55:57 * olliej continues to fight ghc
00:57:01 <olliej> wow it actually found happy for a change
00:57:40 <olliej> the stupid thing is all i want to do is build the base libraries
00:57:50 <Lemmih> olliej: How about taking a clean snapshot and adding "-fext-core" to mk/config.mk for the start?
00:58:07 <Lemmih> s/for/from/
00:58:17 <olliej> i may try that
00:58:22 <olliej> i may have tried it before
00:58:35 <olliej> i seem to have inordinate amounts of bad luck trying to compile ghc
00:58:56 <olliej> but it looks like i've finally got the configure script behaving itself
01:02:34 <musasabi> olliej: have you looked at the libraries list discussions about external core?
01:03:00 <olliej> other people use core? ;)
01:03:13 <musasabi> olliej: at least John Meacham was wishing for better external core support.
01:03:22 <musasabi> you might want to say a me-too there.
01:03:46 <olliej> it would be nice if the Core output of ghc6 matched the description of Core in the external rep document
01:04:07 <olliej> that was mildly irritating
01:04:09 <musasabi> I think he was after a library implementing a core parser and a prettyprinter for it.
01:04:17 <olliej> hehe
01:04:32 <olliej> It's got to the point where i can read most of core easily
01:11:22 * boegel summons shapr
01:18:37 <olliej> the eyes in acid2 seem to be causing the bottleneck...
01:20:43 <olliej> sorry wrong window
01:25:40 <svens> good morning
01:25:47 <Lemmih> Morning, svens.
01:32:17 <boegel> hey svens
02:17:35 <lispy> Lemmih: http://www.codersbase.com/Nehe-tuts
02:17:43 <Lemmih> Thanks.
02:17:47 <lispy> np
02:18:16 <lispy> Lemmih: i'm accepting patches if you see anything that should/could be fixed
02:18:22 <Lemmih> @where+ lispy-nehe http://www.codersbase.com/Nehe-tuts
02:18:23 <lambdabot> lispy-nehe ~> http://www.codersbase.com/Nehe-tuts
02:18:36 <lispy> ah, cool
02:19:23 <lispy> well, i'm off to bed
02:19:41 <Lemmih> G'night lispy.
02:22:31 <sieni> http://www.theonion.com/news/index.php?issue=4133&n=2
02:25:38 <olliejPizza> has anyone here built ghc under macos?
02:26:29 * Itkovian procrastinates
02:26:37 <Itkovian> olliejPizza: build, no. installed. yes
02:27:24 <Itkovian> sieni: holy crap ...
02:27:47 <olliej> nuts
02:29:04 <Itkovian> imo the bible clearly speaks of gravity when it says that the earth hangs up on 'nothing' (nothing visible) ... bloody retards
02:29:07 <paolo> Morning.  Lemmih: "yes" ?
02:29:13 <wilx> So, has anybody written any comprihensible Template Haskell tutorial yet?
02:29:16 <paolo> Lemmih: I think I forgot the question :-)
02:30:00 <Lemmih> paolo: re-throwErrnoIf
02:30:35 <paolo> Lemmih: oh yes, it worked, finally - thank you.
02:54:40 <shapr> boegel: yes?
02:55:36 <Wed1477> @hugs Data.Maybe.listToMaybe []
02:55:41 <lambdabot> <Plugins.Eval>:1:12:
02:55:41 <lambdabot>   Ambiguous type variable `a' in the constraint:
02:55:41 <lambdabot>   `Show a' arising from use of `show'
02:55:48 <Wed1477> @hugs Data.Maybe.listToMaybe [1,2,3]
02:55:50 <lambdabot> Just 1
02:56:46 <musasabi> Has anyone got examples of using GHC for multiple executable programs in subdirectories?
02:57:21 <musasabi> and generating dependencies for make with that.
03:01:06 <dcoutts> musasabi, we do it for multiple libraries in subdirectories and use make and ghc to generate deps
03:01:24 <dcoutts> musasabi, Gtk2Hs's build system does that
03:01:46 <ndm> any suggestions for the "best" way to do a Haskell GUI on Windows?
03:01:54 <dcoutts> ndm, Gtk2Hs :-)
03:01:55 <ndm> Gtk, wxHaskell?
03:02:04 * Lemmih votes for Gtk.
03:02:14 <ndm> does that work through hugs?
03:02:22 <ndm> (i doubt it, but it would be nice...)
03:02:24 <dcoutts> ndm, somewhat suprisingly Gtk+ actually looks very good on Windows
03:02:41 <ndm> dcoutts, great - will give it a wirl
03:03:11 <dcoutts> they guys who did Haste (which uses wx) said that their windows users complained that their app looked very windows 3.1 ish
03:03:30 <olliej> anyone get a complaint about the absence of System/CPUTime_hsc.c
03:03:46 <musasabi> dcoutts: how do you handle "module `Main' is defined in multiple files: " problems (with multiple programs) ?
03:03:50 <ndm> i used wx once through haskell, it was able to get it looking quite nice
03:04:16 <dcoutts> musasabi, ah, we don't have that problem
03:04:57 <dcoutts> musasabi, but you don't really have multiple main modules in any program so it should be a problem should it?
03:05:04 <dcoutts> you generate deps per-directory
03:05:10 <dcoutts> that's what we do
03:05:23 <ndm> who is it who maintains the Gtk2Hs website?
03:05:31 <paolo> dcoutts: I felt asleep, hehe :-)
03:05:47 <dcoutts> ndm, me and a couple other Gtk2Hs devs and web helpers
03:06:06 <dcoutts> paolo, that's expected at nighttime I believe :-)
03:06:16 <musasabi> dcoutts: I have a layout like /foo, /bar, /common and foo and bar contain each a program. I am using nonrecursive make and would like to generate dependency information for both foo and bar.
03:06:28 <paolo> My eyeballs are hurting :-\
03:06:44 <dcoutts> musasabi, ok, then generate deps in both foo and bar and use -icommon
03:07:08 <dcoutts> musasabi, we also use non-recursive make, it's the way to go
03:07:56 <dcoutts> ndm, you've got a Q about our website? or a suggestion for how we could improve it?
03:08:01 <olliej> anyone know how to deal with "No rule to make target `System/CPUTime_hsc.c', needed by `depend'."?
03:08:16 <olliej> i've googled it, and only people experiencing the problem come up
03:08:21 <ndm> dcoutts, was trying to figure out how to obtain the GTK+ package
03:08:40 <dcoutts> ndm, on windows?
03:08:41 <ndm> the one you link to has scary phrases like "rc4" and "dev" in the filename
03:08:45 <ndm> yep, on windows
03:09:00 <dcoutts> the dev is for development of Gtk+ progs, so that bit is not scary
03:09:21 <dcoutts> as for the -rcN, it's always that way it seems, the guy is rather cautious :-)
03:09:42 <ndm> fair enough, just slightly offputting at first!
03:09:54 <ndm> esp as on that whole page i couldn't find a single stable release
03:10:23 <dcoutts> heh, yeah, it's a bit odd I guess, but everyone uses it
03:11:10 <ndm> i have used the GIMP ones in teh past, but they are a total nightmare - its like manual dependancy tracking
03:11:22 <dcoutts> it's a misnomer really since what he means it -r1, as in revision 1, it's not a release candidate
03:11:39 <olliej> has *anyone* managed to build ghc under mac os 10.4?
03:11:42 <dcoutts> ndm, oh because they make you download each bit seperately?
03:11:54 <ndm> dcoutts, yep
03:12:19 <dcoutts> ndm, yesh, with this it's just two installers, one for Gtk+ and one for Gtk2Hs (and one for GHC I suppose)
03:12:41 <ndm> i've installed teh Gtk+, GHC is still downloading and tehn I hit Gtk2Hs
03:16:11 <paolo> I think the GIMP installer ships Gtk, hmm, at least GAIM does.
03:20:02 <ndm> dcoutts, i do have one comment about hte website - stupid quotes
03:20:06 <ndm> http://haskell.org/gtk2hs/documentation/
03:20:13 <ndm>   set button [ buttonLabel := “Hello World” ]
03:20:30 <ndm> unfortunately, those quotes are `` and '', so a copy and paste means the code won't work
03:20:45 <paolo> «Hello World»
03:21:39 <ndm> and it seems my IRC client automatically changes *all* types of quotes back to normal ones
03:22:50 <paolo> http://www.theonion.com/news/index.php?issue=4133&n=2
03:22:52 <ndm> and how to i compile a Gtk2Hs program? I guess its -package <something>, but what?
03:23:44 <dcoutts> ndm, the gtk package is exposed by default so you don't need anyting; ghc --make World.hs
03:24:54 <ndm> dcoutts, thanks. woohoo, got my first GTK thing running - now to explore...
03:25:22 <dcoutts> ndm, yes, you're quite right about the quotes, it's a WordPress "feature", grrr
03:25:59 <dcoutts> ndm, mind you the hello world demo is almost exactly the same as the one on the website so you can look at that
03:26:30 <ndm> yes, but that means finding the documentation directory :) - I have obscure purposes anyway for what i want to do
03:30:25 <ndm> dcoutts, is the second "do" in the hello world example redundant? it appears so
03:30:58 <dcoutts> ndm, yes it is, but is shows the style
03:31:26 <ndm> fair enough
03:40:13 <boegel> shapr: ay progress an FLM ? >:o)
03:40:32 <boegel> s/ay/any
03:47:52 <shapr> No, not yet. Want to help? ;-)
03:48:09 <boegel> err, I don't have much time
03:48:14 <boegel> how much is there left to do ?
03:48:33 <boegel> and are you using some kind of GUI lib, or am I picturing it all wrong ?
03:48:48 <paolo> I deleted a function definition and now I forgot how did it look like.  Grumble.
03:49:41 <boegel> paolo: never delete something, always work in versions
03:49:44 <shapr> boegel: Nah, no gui lib, it's just a wiki.
03:49:58 <paolo> I should have put the code in a darcs repo from the beginning, silly me.
03:51:41 <boegel> shapr: ok, I see
03:51:48 <boegel> shapr: so what needs work ?
03:52:16 <paolo> In Cee, bar is created/destroyed respectively at function call and return time, right?  |static void foo () { data_type_t bar; some_operation_on(bar); }|
03:53:29 <musasabi> Did someone have any ASN.1 deriving code for Haskell datatypes ?
03:56:01 <shapr> cryptolib has some asn.1 support, but I don't think it does deriving.
03:56:15 <shapr> boegel: darcs support is pretty much it.
03:56:41 <boegel> shapr: oh, I don't know enough about darcs to help with that
04:06:36 * shapr boings
04:06:45 <shapr> Man, I don't feel like working today.
04:07:00 <paolo> I feel my head is exploding...
04:07:05 <paolo> ...along with my eyeballs
04:07:26 <Wed1477> wouldnt it be something if your head was to explode...but your eyeballs not
04:11:33 <paolo> @index with
04:11:35 <lambdabot> Foreign.Marshal.Utils, Foreign.Marshal, Foreign
04:11:42 <paolo> @doc Foreign.Marshal.Utils
04:11:43 <shapr> @index without
04:11:43 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/base/Foreign.Marshal.Utils.html
04:11:44 <lambdabot> bzzt
04:11:52 <paolo> @index with care
04:11:54 <lambdabot> bzzt
04:12:46 <paolo> Is there a way to grep through the #haskell logs?
04:13:59 <paolo> Google-grep did it.
04:16:14 <paolo> God bless public #haskell logs.
04:16:19 <shapr> yay!
04:17:30 <olliej> gah
04:17:33 <olliej> it fights me
04:17:34 <paolo> It's nice to re-read yourself while you didn't understand something people were explaining you - now it's clear and I see what I was missing, hehe!
04:18:42 <olliej> why is it so hard to build GHC?
04:20:25 <Lemmih> You could ask #haskell for help.
04:21:18 <olliej> Lemmih: i had :p
04:21:37 <olliej> Lemmih: I follow line by line everything the instructions say, and it fails
04:22:06 <Lemmih> Saying "it doesn't work" isn't really a detailed error description.
04:22:10 <olliej> Lemmih: this time i just pulled down the entire repository, and it got to the point of linking happy -- where it died because __DISCARD__ wasn't defined
04:22:38 <Lemmih> Using GCC 4.0.x?
04:22:42 <olliej> yeah
04:22:57 <olliej> 4.0.0
04:22:58 <Lemmih> Don't.
04:23:02 <olliej> doh
04:23:41 <olliej> rebuilding
04:24:01 <olliej> fingers crossed, though it will be a while to find out whether that works
04:24:11 <olliej> cheers for that though :)
04:25:23 * musasabi just quick and dirty derives from a subset of haskell
04:33:49 <olliej> Lemmih: excellent it's got beyond happy
04:34:01 <olliej> cheers for that
04:34:15 <Lemmih> olliej: Hurrah (:
04:45:36 <yozora> hi, i'm installing hs-plugins and am having trouble with the "make register" part
04:46:01 <yozora> it tells me that "ghc-pkg.exe: /usr/local/lib/hs-plugins/imports doesn't exist or isn't a directory"
04:46:29 <yozora> which contradicts a manual check that this directory exists
04:49:02 <shapr> You ran make install first?
04:49:18 <shapr> Do you have permissions to access the directory?
04:51:16 <kosmikus> this sounds like it's a windows/cygwin conflict, but I don't know enough about windows to suggest a solution
04:51:28 <yozora> hmmm
04:51:33 <yozora> i can cd into it
04:51:44 <yozora> i installed it fine on another computer today
04:51:51 <yozora> so i'm completely confused
04:55:13 <yozora> yeah i ran make install; as for permissions it's drwxr-xr-x+
04:55:25 <yozora> i'm not sure what the + means though
04:57:27 <olliej> Lemmih: Huzzah! it's now generating Core output as well
04:57:31 <olliej> muwhahaha
05:02:00 * boegel does a little dance
05:02:14 <yozora> i edited a conf.in file and added c:/cygwin/ and it seems to work
05:03:32 * Itkovian feels like liquid shit
05:04:18 <paolo> newtypes does define a data constructor, right?
05:05:00 <olliej> argh!!!
05:05:41 <kosmikus> paolo: yes
05:05:41 <olliej> ghc-6.4: panic! (the `impossible' happened, GHC version 6.4):
05:05:42 <olliej>         Char.intToDigit: not a digit 69631
05:05:47 <olliej> grrrr....
05:06:44 <paolo> kosmikus: hmm, I have Types.hs that defines and export a newtype, and I'm trying to use it as p (NewType ptr) in some code which imports Type.hs, but I get |Not in scope: data constructor `Matrix'| :-|
05:07:00 <paolo> newtype Matrix = Matrix (Ptr Matrix)
05:07:05 <Lemmih> olliej: Start with a clean, stable GHC snapshot. If it's reproducible then you can report it as a bug.
05:07:19 <olliej> hmmm
05:07:27 <olliej> righto
05:07:34 <kosmikus> paolo: how do you export it?
05:07:36 * boegel is making faces at Itkovian to cheer him up
05:07:43 <kosmikus> paolo: try Matrix(..) in the export list
05:07:48 <paolo> kosmikus: module Types ( Matrix ) where ...
05:08:06 <paolo> But it isn't an enum... I'll try.
05:08:43 <paolo> It worked!  I'm misunderstanding the purpose of (..)
05:08:46 <Itkovian> boegel: no use
05:09:59 <kosmikus> paolo: well, if you export a type without naming its constructors, the type will be exported as abstract type
05:10:15 <kosmikus> paolo: Haskell Report, Section 5.2
05:10:26 <boegel> Itkovian: no ? it was worth a try
05:10:37 * paolo flies to read
05:10:39 <paolo> kosmikus: thanks much.
05:10:47 <kosmikus> paolo: (..) is a shorthand for "all constructors", but you can also list them explicitly, i.e., Matrix(Matrix) would work as well
05:11:54 <Itkovian> pfft
05:11:58 <Itkovian> the day is wasted
05:12:08 <olliej> Lemmih: what's a valid stable source? i'm currently running off of CVS
05:12:13 <boegel> Itkovian: no it's not, you have a new bike
05:12:34 <Itkovian> hmm, 'new', eh ;-)
05:12:44 <Itkovian> you mean I have a bike that rides
05:12:57 <paolo> kosmikus: I'll opt for explicit exports, I do like the clarity they bring.
05:13:45 <Lemmih> olliej: Download GHC 6.4
05:14:20 <olliej> i'm using a binary of ghc 6.4
05:14:42 <Lemmih> Good.
05:15:01 <olliej> all i want to do is convince it to compile the haskell standard libraries
05:15:17 <olliej> but the only way to do that seems to build the entirety of ghc
05:15:37 <Lemmih> You can just stop it after the libraries are built.
05:15:50 <boegel> Itkovian: it wasn't yours before, so it's new, isn't it ? :)
05:15:51 <olliej> yes but the build process doesn't *reach* the libraries
05:16:00 * boegel leaves for a while
05:16:01 <Itkovian> hmm
05:19:09 <Lemmih> olliej: Maybe 'find libraries/base/ -regex '.*.l?hs' -exec ghc --make -fext-core {} \;' would do.
05:19:37 <olliej> no they have to be built ina special and exciting order
05:19:43 <olliej> they're too interdependant
05:20:00 <olliej> and ghc6 complains if you ever try to compile anything from the base package
05:20:01 <Lemmih> Then use the Cabal packge.
05:20:06 <olliej> Cabal?
05:20:41 <Lemmih> There's a Cabal file in the base library which tells you how to compile it.
05:21:07 <olliej> how do i use it?
05:21:47 <Lemmih> olliej: There's some documentation on the GHC website.
05:21:55 <Lemmih> In the Users Guide.
05:24:55 * dons cabalizes hs-plugins, and it tastes good
05:25:13 <Lemmih> Hurrah, finally (:
05:25:34 <dons> I took your point on 'evil makefiles' to heart :)
05:25:37 <Lemmih> No more users to fall in the 'make register' trap (:
05:25:42 <dons> right!
05:26:05 <dons> I can just point to you if anything fails ;)
05:27:38 * shapr patents a method of making music by blowing air through rounded metal.
05:27:55 <dons> ? like a flute?
05:27:57 <shapr> I now own all music produced by wind instruments! Yes!
05:28:03 <dons> oh no!
05:28:25 <shapr> I swear, someone should do that, I bet they can get it passed.
05:28:33 * boegel 's back
05:28:37 <shapr> y0 boegel!
05:28:40 <paolo> Sounds like last Microsoft<->Apple issue.
05:28:43 <boegel> y0 shapr
05:29:18 <vegai> shapr: if you can pass it as a software patent, perhaps then
05:29:26 <boegel> shapr: but when the first claim comes up, the judge just trashes the partnt :)
05:29:32 <shapr> vegai: It's a similar issue actually.
05:29:51 <vegai> only that afaik non-software patents don't normally tend to be so idiotic
05:29:51 <boegel> is it true that the patents stuff in the EU is off the table completely now ?
05:29:57 <vegai> or they don't pass as easily
05:30:10 <shapr> If someone can patent patterns that an instrument produces, what's different between computers and flutes?
05:30:26 <vegai> the difference is that patent office workers are clueless :)
05:30:51 <shapr> boegel: The people against patents got a bunch of *really* stupid amendments put onto the patent bill, so much that even the pro-patent people realized they didn't want this bill.
05:31:23 <boegel> shapr: like ?
05:31:46 <olliej> shapr: so that's our solution: everytime a new patent bill comes up, support it, and get as many "features" as possible added, till the pro-patent people don't want it anymore
05:32:41 <shapr> olliej: Seems to work.
05:32:49 <olliej> hehe :)
05:33:19 <shapr> boegel: They added something like very broad and weak definitions of a patentable items, and they added large punishments.
05:33:52 <shapr> If you can't get rid of something, you can water it down until it can mean anything and punish everything.
05:34:08 <shapr> Then sometimes your opponents will give up rather than pass really braindead laws.
05:34:39 <shapr> Of course, other times they get passed anyway.
05:34:44 <shapr> I bet the DMCA was like that.
05:34:51 <olliej> hehe
05:35:09 * olliej has DVDs that warn him not to break the DMCA
05:35:12 <shapr> What's the recent bill that passed Congress as a rider on the emergency armed forces funding?
05:35:25 <olliej> but they're region 4 -- eg. non-US ....
05:35:30 <shapr> olliej: I bought an audiobook on CD, and it includes copy protection.
05:35:36 <olliej> ick
05:36:04 <shapr> e-textbooks are starting to come with per-node licensing.
05:36:17 <olliej> I believe i now have Core definitions of Haddock, Happy, and Alex...
05:36:34 <olliej> if only i could get Core defs of the main libraries
05:36:46 <ndm> olliej, what do you mean by Core?
05:36:53 <shapr> Can't you use -ddump-core when building GHC?
05:37:19 <olliej> mdm: GHC can output its internal representation in a language called Core
05:37:46 <olliej> basically a reduced form of Haskell with all type info explicitly displayed
05:37:49 <Wed1477> GHC Core
05:37:50 <ndm> olliej, yes - that's what i thought you mean. and indeed there is a flag to create them
05:37:58 <Wed1477> like Clean's ABC
05:38:00 <ndm> i have a copy of most of the prelude in Core somewhere
05:38:01 <olliej> shapr: yes, the problem is convincing GHC to *build at all*
05:38:18 <ndm> can't you take the Hugs libraries and compile them with GHC?
05:38:22 <ndm> that's what I did
05:38:23 <olliej> the one i use is -fext-core
05:38:23 <shapr> olliej: Are you using Debian?
05:38:28 <olliej> hehehe
05:38:29 <olliej> MacOS
05:38:41 <olliej> my debian has errr... dodgy.. ram
05:39:12 <shapr> On Debian, I'd suggest using apt-get source ghc6, then hack the build to use -fext-core -ddump-core or whatever, then debuild to build the debs. Then you have core!
05:39:14 <ndm> olliej, the other trick i used was to copy the prelude, rename it to Preluded and import that from all the modules that need it
05:39:32 <ndm> there are some interesting Prelude hacks in all the compilers, so they tend to bork on compiling their own prelude
05:39:35 <shapr> Anyone know if the nhc98 runtime for PalmOS was ever released?
05:39:53 <shapr> I got my palm running again, and I'd like to write Haskell apps...
05:39:53 <ndm> shapr, i don't think so - but there was continuing progress
05:40:00 <dons> shapr, I know tony is still working on this stuff. many commits into nhc
05:40:01 <shapr> Anthony Sloane, wasn't it?
05:40:15 <dons> yep. he was at unsw with us for the last 6 months
05:40:17 <olliej> ndm: yes, the problem is i need *everything* required to get Num up and running
05:40:37 <ndm> olliej, that will be HARD - its a bootstrapping problem
05:40:43 <olliej> yep
05:40:44 <shapr> dons: Is there any sort of usable nhc98 runtime for Palm?
05:40:55 <dcoutts> shapr, and I know c2hs has been getting features to support palm via cross-compilation
05:41:04 <olliej> which means technically i should just need to build from cvs and it should all work
05:41:07 <shapr> I don't mind if it takes 7mb of ram, I can spare that much.
05:41:35 * shapr recently installed Forth, Lua, Python, and Lisp for PalmOS
05:41:36 <dons> shapr, not that I know of -- but tony might be able to say how to get it built
05:41:42 <shapr> Awright, I'll email him.
05:41:49 <shapr> Thanks for the tips.
05:42:09 <yozora> i'm installing h4sh via cygwin on windows, and it's messing up when it gets to the copyFile,
05:42:26 <yozora> i think because it tries to copy the non .exe suffixed files
05:42:39 <yozora> is there something that i should have run to prevent this?
05:44:00 <shapr> I think you'll have to talk to the author.
05:44:15 <yozora> that's dons right?
05:44:16 <shapr> It's funny how that's a threat of long term suspense on other irc channels =)
05:44:20 <shapr> yep, exactly
05:47:09 <Lemmih> @help repo
05:47:10 <lambdabot>  @help <command> - ask for help for <command>
05:47:11 <Lemmih> @help repo+
05:47:12 <lambdabot>  @help <command> - ask for help for <command>
05:47:16 <Lemmih> @help repo-add
05:47:17 <lambdabot>  @repo-add path, add a repository
05:47:58 <Lemmih> @repo-add http://scannedinavian.org/~lemmih/ghc-src-exts
05:47:59 <lambdabot> cannot add invalid repository: http://scannedinavian.org/~lemmih/ghc-
05:47:59 <lambdabot> src-exts/_darcs/inventory: getPermissions: does not exist (No such
05:47:59 <lambdabot> file or directory)
05:48:34 <Lemmih> eh?
05:49:10 * boegel wonders if bourbaki has screenshots of the stuff he wanted to show me yesterday
05:49:43 <shapr> Lemmih: Check permissions?
05:50:11 <dcoutts> boegel, how quickly would you be able to use opengl support in Gtk2Hs ? would you want to wait for a release or are you ok with cvs?
05:50:44 <dcoutts> boegel, if you want it in a release then I'll wait til nearer the next release :-)
05:51:24 <boegel> dcoutts: I'm not familiar with CVS stuff, and I don't really have the time now...
05:51:43 <boegel> so I guess waiting until the next release is fine with me
05:51:44 <dcoutts> boegel, ok
05:52:51 <Lemmih> shapr: I can 'darcs get' it just fine.
05:54:09 <Lemmih> And why does it say 'path' and not 'url'?
05:54:39 <shapr> I'm guessing it's the 'repo change announce' plugin that dons and sjt wrote. Maybe it's only for local changes?
05:56:11 <boegel> dcoutts: what stuff are you guys adding before the 1.0 release ?
05:56:34 <dcoutts> boegel, cairo, Gtk+ 2.8 support and probably OpenGL
05:57:15 <dcoutts> probably a few other bits like better support for tree/list widgets and greater coverage of things like drag&drop and clipboard handling
05:57:25 <boegel> dcoutts: why OpenGL ? What's wrong with HOpenGL ?
05:57:36 <dcoutts> boegel, yes, that's what I mean
05:58:03 <dcoutts> support for GtkGlExt with HOpenGL
05:58:36 <musasabi> Having lambdabot announce changes to many repos on some channel (maybe too much noise for #haskell) would be very nice.
06:04:24 <CosmicRay> is there a lazy version of mapM?
06:04:33 <CosmicRay> I ask because I have a lengthy operation to apply with it, and I would like to display a status counter
06:04:51 <CosmicRay> I have a function that will do so with an IO action that yields a lazy list
06:04:57 <CosmicRay> and that works
06:05:07 <olliej> Hmmm.... it appears part of the ghc build process doesn't like fext-core...
06:05:09 <CosmicRay> but mapM seems to force the entire list to be evaluated before returning anything.
06:06:54 <Lemmih> CosmicRay: lazyMapM f = unsafeInterleaveIO.mapM f
06:07:10 <Lemmih> Hmm, maybe not.
06:07:35 <Lemmih> Definitely not.
06:07:55 <Lor> howabout mapM (unsafeInterleaveIO . f) ?
06:08:20 <dcoutts> CosmicRay, doesn't it depend on the strictness of your monad's >>= operator?
06:08:27 <shapr> What about interleaving a status update op with the IO actions?
06:08:53 <dcoutts> oh sorry, you're using IO, I missed that
06:09:02 <paolo> @type unsafeInterleaveIO
06:09:07 <lambdabot> bzzt
06:09:08 <paolo> @type System.IO.unsafeInterleaveIO
06:09:10 <lambdabot> bzzt
06:09:21 <paolo> @index unsafeInterleaveIO
06:09:21 <Lemmih> @type System.IO.Unsafe.unsafeInterleaveIO
06:09:22 <lambdabot> System.IO.Unsafe
06:09:23 <lambdabot> forall a. IO a -> IO a
06:09:28 <CosmicRay> Lemmih: I don't think it is quite that simple
06:09:29 <paolo> Uh oh.
06:09:32 <CosmicRay> but yeah, I'm writting my own.
06:09:45 <CosmicRay> shapr: not so easy since I need a counter
06:09:49 <CosmicRay> shapr: which mapM doesn't provide
06:09:58 <shapr> zipWithM?
06:09:59 <CosmicRay> shapr: so I'd have to use an ioref or something.
06:10:25 * CosmicRay looks
06:11:10 <CosmicRay> hmm, so I could zipWith using [0..], eh?
06:11:16 <shapr> Yeah, something like that.
06:11:24 <shapr> Might have lift or return, but it sounds right.
06:12:12 <shapr> If you had a list of thunks, you could easily zip that with [0..], right?
06:12:53 <CosmicRay> yeah I think that will work well.
06:13:01 <CosmicRay> nevertheless, I have added lazyMapM to missingh ;-)
06:13:05 <shapr> heh, neat
06:13:36 <CosmicRay> I wonder, would mapM be lazy if the monad were something other than the IO monad?
06:14:26 <shapr> I think so.
06:14:36 <shapr> I think there's a good reason IO isn't lazy, but I don't remember what.
06:14:40 <yozora> i think so, since the identity monad is supposed to not do anything else
06:14:57 <yozora> because you need to sequence stuff
06:15:09 <yozora> and there's stuff that returns IO ()
06:15:27 <dcoutts> exactly, it's about sequencing side effects
06:15:42 --- topic: set to '["logs: http://meme.b9.com/cview.html?channel=haskell&date=today","http://www.haskell.org/learning.html","http://www.haskell.org/tmrwiki/IssueFour","We put the Funk in Funktion","http://sequence.complete.org/hwn/20050816"]' by CosmicRay
06:15:43 * autrijus purrs
06:15:49 <CosmicRay> hey autrijus
06:15:54 <autrijus> yo :)
06:15:57 <dcoutts> the downside is that it's a total order rather than a partial order (eg with clean's IO system)
06:16:02 <CosmicRay> saw your little perl6 happiness chart on hexmode's blog
06:16:04 <CosmicRay> liked it.
06:16:56 <autrijus> CosmicRay: :D thanks!
06:17:07 <autrijus> I made that into T-shirt and stickers.
06:17:07 <autrijus> http://www.cafepress.com/pugscode
06:17:33 <CosmicRay> http://pugscode.org/images/timeline.png <-- that's the thing I'm referring to, for the rest of you
06:17:45 <ozone> autrijus: aww, no credit to spj on that pic? :)
06:18:16 <shapr> @wiki AutrijusTang
06:18:16 <autrijus> ozone: actually yes, when it first appeared in http://haskell.org/hawiki/AutrijusTang
06:18:17 <lambdabot> http://www.haskell.org/hawiki/AutrijusTang
06:18:36 <CosmicRay> autrijus: hey, what's this svk propoganda in your blog?!! ;-)
06:18:37 <ozone> heheh
06:18:46 <autrijus> CosmicRay: :D
06:19:15 <autrijus> CosmicRay: putter's complaints are directed to the svn client
06:19:18 <autrijus> so svk is logical
06:19:33 <CosmicRay> should have used the opportunity to mention darcs ;-)
06:19:38 <autrijus> darcs is applicable in other cases :)
06:19:56 <CosmicRay> darcs is applicable in every case!
06:20:13 * CosmicRay steps off the soapbox
06:20:28 <CosmicRay> anyway, is hexmode a perl6 hacker?
06:21:34 <CosmicRay> ah ha.
06:21:36 <CosmicRay> lazyMapM works.
06:22:00 <autrijus> CosmicRay: no, likely a perl5 hacker
06:22:04 <CosmicRay>  *** Determining MD5 sums and MIME types for files.
06:22:05 <CosmicRay> File 12950 of 17530 (73%))
06:22:13 <CosmicRay> ah.
06:22:51 <CosmicRay> you know, it is very odd when my wife points me to a blog page, thinking it's a random funny geeky thing, and I realize it has a graphic made by a haskeller.
06:22:58 <CosmicRay> she reads hexmode's blog
06:23:14 <shapr> Who's hexmode?
06:23:26 <CosmicRay> shapr: http://www.openweblog.com/users/hexmode/
06:23:28 <ozone> he's just zis guy, you know
06:23:40 <CosmicRay> http://mah.everybody.org/
06:26:14 <Itkovian> ozone: lol
06:26:33 <ozone> Itkovian: hey, did you get stuff working the other night with gcc 3.3?
06:26:48 <Itkovian> ozone: well, yes it compiles, but doesn't run yet
06:26:57 <ozone> compiles but doesn't run? :)
06:27:03 <CosmicRay> you know, instead of the kevin bacon game, we could play the autrijus tang game with this.  terah learned of hexmode because he read one of my blog posts on planet debian that linked to her, and he left a comment there.  so she read his blog periodically, and told me about the link to autrijus ;-)
06:27:10 <Itkovian> I've got fastcgi running .. but the moment the hspr comes into play it fails ...
06:27:42 <CosmicRay> shapr: do you think there would be much call out there for a haskell binding to a C library such as libmhash or libbeecrypt, that has C or asm-optimized MD5, sha1, etc. routines?
06:27:51 <CosmicRay> there are routines to do those things written in Haskell already
06:28:13 <shapr> If you write such a thing, you should probably talk to Dominic Steinitz, the guy behind cryptolib.
06:28:29 <CosmicRay> well, I already have it, pretty much.
06:28:47 <CosmicRay> I have the binding anyway.  haven't actually made a library out of it, but that part is not that much more work.
06:29:01 <CosmicRay> I guess the question is, does the difference in speed matter enough to others that they'd find it useful?
06:29:11 <shapr> To some of us, yes.
06:29:32 <CosmicRay> I hacked up an algorithm last night that calculates md5s of files in 512MB chunks by using mmap.
06:29:42 <shapr> I want a really fast SHA1 for Combinatorrent. I think Igloo's code is fast enough, but I may change my mind later.
06:29:44 <CosmicRay> I hope it will be faster than /usr/bin/md5sum even ;-)
06:29:55 <olliej> ARGH!!!
06:29:57 <CosmicRay> well then, I'll have to do this.
06:30:03 <shapr> olliej: You screamt?
06:30:14 <CosmicRay> shapr: libbeecrypt in sid is broken at the moment, but when it's fixed, I think I'll use that.
06:30:16 <olliej> anyone get: nativeGen/RegisterAlloc.hs:561:45:
06:30:16 <olliej>     Couldn't match `FreeRegs' against `RegNo'
06:30:24 <olliej> when building ghc cvs?
06:30:30 <shapr> CosmicRay: What about the Python approach where a pure Haskell version is available, and so is a C/asm optimized version?
06:30:40 <shapr> That way code correctness is easy to check.
06:30:54 <CosmicRay> shapr: hmm, so I should make it use the Cryptolib API?
06:31:01 <CosmicRay> sweet idea.
06:31:04 <shapr> Then you can also upgrade/improve/etc the pure Haskell code, and use that to check the C/asm versions.
06:31:37 <CosmicRay> hmm, the cryptolib API is not powerful enough for this.
06:31:37 <shapr> I don't enjoy debugging C or assembly, but debugging Haskell and then using that to check C/asm would be just fine.
06:31:44 <olliej> Lemmih: you there?
06:31:45 <shapr> Improve the API!
06:31:49 <Lemmih> olliej: Yes.
06:31:56 <CosmicRay> shapr: yes, yes indeed.
06:31:59 <CosmicRay> shapr: excellent.
06:32:02 <olliej> any idea what might be causing that problem?
06:32:11 <Lemmih> olliej: What problem?
06:32:16 <olliej> nativeGen/RegisterAlloc.hs:561:45:
06:32:16 <olliej>     Couldn't match `FreeRegs' against `RegNo'
06:32:24 <olliej> death in the ghc cvs build process
06:32:30 <CosmicRay> shapr: mhash takes the interesting approach of generalizing the hash functions
06:32:42 <shapr> That is neat.
06:32:45 <CosmicRay> shapr: so you initialize a structure with a hash-specific function, and after that, the calls are generic.
06:32:50 <CosmicRay> I think cryptolib should have that
06:33:12 <Lemmih> olliej: I don't think you want GHC CVS and I don't think you want to compile the native code generator.
06:33:20 <shapr> You could also just pass in the hash function as a param, and then everything would be generic.
06:34:15 <Lemmih> olliej: 'base' is an independent library. You should be able to compile it without compiling GHC.
06:34:18 <olliej> Lemmih: so download the src package from haskell.org?
06:35:09 <olliej> Lemmih: I have tried everything i can think of to make the Base package
06:35:27 <olliej> Lemmih: but it relies on things made in previous bits of the ghc build process
06:36:05 <Lemmih> olliej: echo -e "import Distribution.Main\nmain = defaultMain\n" > Setup.lhs
06:36:27 <Lemmih> olliej: Then run 'runhaskell Setup.lhs {configure|build}'.
06:38:00 <Lemmih> (after adding '-fext-core' to GHC-Options in base.cabal, of course)
06:38:13 <olliej> Lemmih: that doesn't work :(
06:38:41 <Lemmih> Elaborate.
06:39:04 <olliej> assuming it should actually be Setup.hs (not literate haskell)
06:39:24 <CosmicRay> shapr: it is slightly more complex than that
06:39:25 <olliej> Could not find module `Distribution.Main':
06:39:26 <olliej>   use -v to see a list of the files searched for
06:39:27 <Lemmih> Oh yeah.
06:39:45 <CosmicRay> shapr: I think I want to use a typeclass, and have it provide functions to hash a string, [Word8], CStringLen, and file
06:39:54 <CosmicRay> shapr: with default implementations of most of those
06:40:08 <CosmicRay> shapr: the C library should provide a native C implementation for most of them, esp. hashing a file
06:40:17 <Lemmih> olliej: Don't you have GHC 6.4 installed?
06:40:18 <CosmicRay> shapr: which should be much more efficient if done directly from C
06:40:29 <olliej> Lemmih: yeah i do
06:40:37 <olliej> Lemmih: from the OS X package
06:40:53 <Lemmih> olliej: And 'ghc-pkg list' doesn't list a Cabal package?
06:42:45 <olliej> it lists Cabal-1.0
06:43:27 <Lemmih> olliej: My bad, I meant 'Distribution.Simple'.
06:43:32 <olliej> ah
06:43:47 <cyanite> jlouis: there?
06:44:12 <boegel> are there a lot of XChat users in here ?
06:44:26 <CosmicRay> I'm one
06:44:26 <olliej> Lemmih: gah
06:44:30 <olliej> internal error
06:44:44 <Lemmih> olliej: Compile Setup.hs and run the resulting binary.
06:44:50 <boegel> CosmicRay: I seem to have lost my menu (FC4), know any way I can retrieve it ?
06:45:33 <CosmicRay> try right-clicking on the main chat window, then maybe there's something in settings?
06:45:42 <CosmicRay> oh, in fact there's a menu bar checkbox.
06:46:26 <boegel> CosmicRay: thanks ! I was right clicking everyone, but didn't work there
06:46:30 <boegel> got it back naw :)
06:46:46 <CosmicRay> heh
06:47:11 <paolo> Is it possible to reexport a module without the need of writing all the explicit exports as well?
06:47:39 <dcoutts> paolo, yes
06:48:03 <dcoutts> just use "module Foo ( blah, module Bar, blah )"
06:48:45 <paolo> Internal has a _lot_ of functions, Internal imports Types.  Can I export Types without writing all the Internal functions in the exports?
06:49:27 <paolo> I.e. omit the "blah" part.
06:50:16 <paolo> It seems not...
06:50:34 <olliej> argh!
06:50:46 <olliej> Lemmih: panic when trying to build ghc.base
06:50:58 <Lemmih> ghc.base?
06:53:15 <olliej> Compiling GHC.Base (./GHC/Base.lhs, dist\build\./GHC/Base.o ))
06:53:25 <olliej> ghc.exe: panic!
06:53:42 <olliej>        Maybe.fromJust: Nothing
06:53:42 <shapr> @ghc
06:53:43 <lambdabot>  Malformed constructor signature
06:53:55 * shapr consults the lambdabot, asking for possible causes.
06:53:56 <Lemmih> olliej: Remove old .hi files and try again.
06:54:50 <olliej> Lemmih: there are no .hi files
06:56:00 <paolo> Saint regexps.
06:57:32 <Lemmih> olliej: Oh, got Setup.hs compiled?
06:57:54 <olliej> no -- i'm being dumb aren't i?
06:58:22 <Lemmih> Compile Setup.hs first.
06:58:23 <cyanite> any regex support in stdlib or... any good lib for it?
06:58:37 <Lemmih> cyanite: There's Text.Regex
06:58:47 <cyanite> ok...
06:59:06 <cyanite> Text. ?... don't see it in the haskell 98 stdlib list.
06:59:15 <cyanite> what module?
06:59:28 <olliej> Lemmih: same thing happens if i compile it
07:00:03 <Lemmih> @doc Text.Regex
07:00:03 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/base/Text.Regex.html
07:00:20 <cyanite> Well I don't look at ghc, but the haskell 98 report.
07:00:21 <Lemmih> olliej: 'runhaskell Setup.lhs clean'.
07:00:40 <cyanite> I guess it's an extension.
07:00:50 <Lemmih> cyanite: Uh, it's a library.
07:01:06 <olliej> Lemmih: same again
07:01:07 <cyanite> ok but not 'standard lib' ?
07:01:13 <cyanite> evidently.
07:01:21 <cyanite> I don't use ghc either ;).
07:02:56 <Lemmih> cyanite: Define standard library. Both Hugs and GHC ships with it.
07:03:06 <cyanite> Lemmih: I define it as: in the report.
07:03:13 <cyanite> Lemmih: which it isn't as far as I can see.
07:03:13 <shapr> scannedinavian.org is going down now for a few hours.
07:03:29 <cyanite> Lemmih: that's the documentation I use, you see :p
07:03:36 <Lemmih> cyanite: ah.
07:04:08 <shapr> hiya d1d4c, learning Haskell?
07:04:21 <Lemmih> shapr: Hardware upgrade?
07:04:30 <d1d4c> hi!
07:05:09 <d1d4c> I don't know what I'm doing here...
07:05:13 <d1d4c> let me see
07:05:48 <shapr> Lemmih: relocation
07:06:10 <shapr> The hardware upgrade will happen soon though.
07:06:40 <shapr> I think it'll be a complete reinstall, I'll have to get all the scannedinavian.org users to move their content.
07:06:42 <Leimy> morning!
07:06:47 <shapr> hiya Leimy
07:06:50 <paolo> @index rotate
07:06:52 <lambdabot> Data.Bits, Foreign, Graphics.Rendering.OpenGL.GL.CoordTrans,
07:06:52 <lambdabot> Graphics.Rendering.OpenGL.GL, Graphics.Rendering.OpenGL, Graphics.UI.
07:06:52 <lambdabot> GLUT
07:06:55 <Leimy> shapr: how are ya
07:06:57 <paolo> Ah-ha.
07:07:02 <shapr> d1d4c: Would you like to learn Haskell?
07:07:09 <shapr> Leimy: I'm awake and functioning, how are you?
07:07:21 <Leimy> I'm awake and "functional" :)
07:07:24 <Leimy> *rimshot*
07:07:38 <d1d4c> yes, why not?
07:07:48 <Leimy> thanks... I'm here all week, try the veal!
07:07:48 * shapr snickers
07:07:58 <d1d4c> but i just discover it now...
07:08:06 <shapr> d1d4c: Ok! I'd suggest starting here: http://www.haskell.org/hawiki/HaskellDemo
07:08:30 <d1d4c> I'm just reading it already thks!
07:08:40 <d1d4c> :)
07:09:28 <shapr> I wish I could afford a Twilight Zone pinball game.
07:10:23 <olliej> Lemmih: would you be able to see whether it can compile on your machine?
07:13:26 <shapr> d1d4c: Once you've read that, the next step is probably Hal Daume's "Yet Another Haskell Tutorial"
07:13:56 <Lemmih> olliej: Hmm. I can't compile it either.
07:14:17 <Lemmih> olliej: Compile GHC may be the only way.
07:14:19 <olliej> Gah! it sooo hates me
07:14:43 <olliej> Lemmih: But GHC itself refuses to compile
07:24:28 <vikasg> yay! lambda works in my interpreter
07:24:40 <shapr> whee!
07:25:48 <vikasg> now all I need to do is implement define, set!, and display :)
07:26:07 <shapr> So close!
07:26:24 <Wed1477> olliej, still not managed to get the Core you wanted?
07:26:36 <olliej> still haven't got it
07:26:53 <olliej> currently trying a build with the source packe from haskell.org
07:26:56 <olliej> rather than cvs
07:27:04 * olliej is going slowly mad
07:28:28 <shapr> Yikes --> "mismatched interface file versions: expected -1470337935, found 6040"
07:29:49 <Lemmih> heh.
07:32:54 <CosmicRay> haskell is great.
07:32:56 <CosmicRay> just had to say that.
07:33:34 <olliej> CosmicRay: try and build it -- see if you still agree
07:33:43 <Igloo> I heard Java is better. Is that true?
07:33:53 <CosmicRay> olliej: I've ported it to AIX.  Still agree.  though I think AIX sucks ;-)
07:34:04 <CosmicRay> well, I didn't port it to AIX.  I bootstrapped it there.
07:34:12 <olliej> CosmicRay: dammit -- why can everyone else compile it... grrrr...
07:34:14 * CosmicRay thwaps Igloo with a large monad
07:34:22 <Igloo> :-)
07:34:27 <CosmicRay> olliej: what platform are you on
07:34:36 <autrijus> please, no monad size comparison here ;)
07:34:52 <olliej> CosmicRay: I can't convince it to build under OSX or Windows/cygwin
07:34:57 <Igloo> Yeah, it offends autrijus (he only has a small one)
07:34:58 <CosmicRay> oh.
07:35:02 <CosmicRay> the "fun" platforms.
07:35:04 <CosmicRay> heh
07:35:07 <olliej> :p
07:35:17 <CosmicRay> olliej: aren't there binaries available? ;-)
07:35:34 <olliej> The irony is i do have debian box, but the ram is screwed so it can't get through the compile of anything without scewing up
07:35:43 <autrijus> Igloo: but it has been subjected to various transformations!
07:35:52 <olliej> CosmicRay: the problem is i'm trying to get the Core defs of the standard libraries
07:35:57 <Igloo> :-)
07:36:02 <CosmicRay> autrijus: probably filtered...
07:36:43 <olliej> CosmicRay: the fact that someone managed to make osx binaries makes me think that surely it should be possible to do...
07:36:53 <CosmicRay> olliej: oh yes.
07:36:59 <CosmicRay> olliej: I'd suggest a post to glasgow-haskell-users.
07:37:06 <CosmicRay> there may be an aspect of folklore to this.
07:37:07 <Igloo> Which versino are you trying to build on OS X?
07:37:17 <CosmicRay> stories of building, handed down between the generations
07:37:17 <Igloo> 6.4 release had a small error in a #if
07:37:24 <CosmicRay> heh
07:37:33 <olliej> Igloo: hmmm... where?
07:38:03 <Igloo> Can't remember. Try a 6.4.1 pre-release instead.
07:38:06 * autrijus ponders the ErrorT (ContT Reply (RWST Pad Log Env (ListT Identity))) monad
07:38:16 <olliej> Igloo: i last tried a cvs build
07:38:33 <dcoutts> olliej, from the gentoo ppc64 patchset: ghc-6.4/ghc/includes/MachRegs.h
07:38:49 <dcoutts> diff -ur ghc-6.4/ghc/includes/MachRegs.h ghc-6.4/ghc/includes/MachRegs.h
07:38:49 <dcoutts> --- ghc-6.4/ghc/includes/MachRegs.h     2005-01-28 07:55:51.000000000 -0500
07:38:49 <dcoutts> +++ ghc-6.4/ghc/includes/MachRegs.h     2005-03-14 21:37:31.825368128 -0500
07:38:49 <dcoutts> @@ -457,7 +457,7 @@
07:38:49 <dcoutts>  #define REG_R7         r20
07:38:50 <dcoutts>  #define REG_R8         r21
07:38:50 <lambdabot> Maybe you meant: pl wn
07:38:52 <dcoutts> -#ifdef darwin_REGS
07:38:54 <dcoutts> +#if darwin_REGS
07:38:56 <dcoutts>  #define REG_F1         f14
07:38:58 <dcoutts>  #define REG_F2         f15
07:39:01 <Igloo> HTMLT e (ErrorT String (UserT (ConfigT (ErrorT String (CGIT IO))))) -- My Monad is bigger than your Monad  :-þ
07:39:13 <olliej> that actually sounds like it's a possible src of pain i've experiences
07:41:10 * boegel is playing with the gimp and is loving it
07:41:26 <olliej> dcoutts: nup that's fixed in the version that's i'm unable to compile
07:42:21 <paolo> Igloo: haha.
07:42:32 <dcoutts> olliej, oh ok, sorry that's all the patches we have (except some linux specific ones)
07:43:00 <olliej> dcoutts: yeah the version that currently fails is cvs
07:43:08 <dcoutts> ok
07:43:28 <olliej> dcoutts: i'm currently getting an error that seems to be caused by an attempt to use FreeRegs as RegNo
07:44:35 <dcoutts> olliej, sorry we've not tried the latest ghc on ppc yet
07:44:49 <olliej> it hates me
07:44:57 <olliej> more or less every version of ghc hates me
07:45:01 <Igloo> What's the actual problem?
07:45:26 <olliej> Igloo: at a basic level GHC refuses to build
07:45:31 <olliej> and i'm going mad
07:45:51 <Igloo> Oh, well, that clears that up then
07:46:06 <olliej> hehe
07:46:24 <olliej> currently i get:
07:46:26 <olliej> nativeGen/RegisterAlloc.hs:561:45:
07:46:26 <olliej>     Couldn't match `FreeRegs' against `RegNo'
07:46:26 <olliej>       Expected type: [FreeRegs]
07:46:26 <olliej>       Inferred type: [RegNo]
07:46:37 * Heffalump double-takes
07:46:42 <Igloo> Which ghc is giving that?
07:46:44 <Heffalump> (I'm just fixing a bug in our register allocator at work)
07:46:53 <Igloo> ../../ghc-inplace/...   or just ghc?
07:46:58 <olliej> Igloo: cvs
07:47:09 <Igloo> I mean on the commandline
07:47:21 <olliej> ghc/compiler/nativeGen/RegisterAlloc.hs
07:47:35 <olliej> local ghc
07:47:52 <olliej> hasn't generated its own at that point
07:47:57 <Igloo> Which version is that?
07:48:01 <olliej> local?
07:48:03 <olliej> 6.4
07:49:23 * boegel reads the wikipedia article on machine learning
07:51:29 <Igloo> Recent builds on other platforms look successful, and the definition of FreeRegs look different on PPC to other platforms, so it looks like a PPC bug in CVS HEAD
07:52:37 <autrijus> CosmicRay: any recent news on aix-ppc ghci?
07:52:41 <autrijus> (or TH)
07:52:58 <CosmicRay> autrijus: no, I think you've done more than I on that lately.  I haven't touched GHC on AIX since 6.2
07:53:04 <Igloo> s/looks/is/
07:53:12 <CosmicRay> and I certainly don't have the expertise to make ghci or th work there
07:53:23 <autrijus>  k
07:53:37 <olliej> Igloo: at the moment all i want is *one* version of ghc to get to the point that it actually builds itself
07:53:52 * Igloo again suggests a 6.4.1 pre-release, or maybe 6.4 with the above patch
07:53:57 * autrijus mumbles something about ocaml's easy-to-bootstrappability
07:53:58 * olliej wishes he was better at haskell and had some clue of how to fix bug
07:54:23 <CosmicRay> autrijus: what about hugs or nhc98?
07:54:28 <CosmicRay> I agree that ghc is nasty to bootstrap
07:54:36 <Igloo> autrijus: I bet ocaml wouldn't compile an il-typed versino of itself either
07:54:42 <Igloo> And this isn't bootstrapping, anyway
07:55:15 <olliej> Igloo: where can i find 6.4.1-pre?
07:56:07 <autrijus> CosmicRay: hugs/nhc98 does TH? :)
07:56:12 <CosmicRay> Igloo: also keep in mind that ocaml cheats sometimes.  The native code generator is only supported on a few platforms (fewer than ghc certainly)
07:56:16 <CosmicRay> autrijus: ah.
07:56:28 <CosmicRay> Igloo: the rest get only the bytecode interpreter
07:56:39 <autrijus> but that's still useful
07:56:43 <CosmicRay> Igloo: which is terribly annoying for build systems
07:57:57 <dcoutts> it might be useful if ghc could generate .o files with it's bytecode, rather than just using bytecode on-the-fly within ghci
07:58:02 <Itkovian> ttyl
07:58:22 <dcoutts> it'd make bootstrapping easier since there would be no gcc or native code gen issues
07:59:37 <shapr> ?
08:00:15 <shapr> Wouldn't that just move the issue around? Am I confused?
08:01:04 <dcoutts> maybe it wouldn't save that much, and only for the first time porting effort
08:01:09 <autrijus> shapr: if the .o is made platform-independent then it would be like .jar
08:01:32 <autrijus> shapr: and then a minimal interpreter is all that's needed to bootstrap ghc
08:01:46 <autrijus> since the rest of the compiler can be shipped in a platform-independent manner.
08:02:03 <dcoutts> autrijus, yes, though they probably couldn't be .o files
08:02:20 <autrijus> right, maybe .hso or .har or something.
08:02:32 <dcoutts> but bytecode files, I'm not sure that the ghc byte code is patform independent however
08:02:49 <autrijus> "Hava 5, Enterprise Edition"
08:02:52 <shapr> heh
08:03:03 <dcoutts> autrijus, yes, like ghc 4.x used to come with .hc files to bootstrap from
08:03:14 <dcoutts> so all it needed was a C compiler
08:03:19 <dcoutts> well, gcc
08:03:48 * goron discovered gcc has a lot of C-extensions turned on by default.
08:03:57 <dcoutts> or these days the .cmm route might be doable
08:04:18 <dcoutts> and bootstrap with qc-- (but that requires ocaml :-( )
08:05:01 * boegel leaves for home
08:08:22 <Igloo> I don't see how that would solve the problems with the Haskell libraries to #ifdefs on arch, or having arch-specific constants embedded
08:08:39 <Igloo> If it wasn't for that sort of thing you could just use .hc files for porting
08:11:29 <Oejet> Hey, implement GHC in Java!
08:13:26 <Igloo> s/Java/sed/
08:13:34 <Lor> I was going to say sh. :)
08:20:08 <olliej> Oejet: I'm porting haskell to .net so i'm already in that circle of hell
08:20:44 <olliej> Huzzah! it's finally reached the inplace version of ghc
08:20:51 <ndm> olliej, doesn't hugs already have a .net port
08:20:59 <ndm> or .net interoperability, in some wya
08:21:03 <olliej> ndm: hugs has an interface to .net
08:21:15 <olliej> ndm: my masters goal is to *compile* to the .net vm
08:21:50 <shapr> That'll be exciting. Doesn't dotcom have tail call probs?
08:22:01 <Lemmih> There's DotNet on MacOS?
08:22:02 <olliej> Currently i have lambda expressions, partial evaluation, non strict evaluation... going
08:22:22 <olliej> Lemmih: no but MacOs is fairing better at compiling ghc than my windows box
08:22:41 <ndm> there was a MS project, ILX, an extension to their instruction set with "more functional" bits
08:22:42 * olliej is currently surrounded by a windows box, a linux box, and two macs
08:22:51 <ndm> i think that had tail call codes at the opcode level
08:22:57 <olliej> ndm: yeah
08:23:03 <shapr> Is it integrated into the standard dotcom?
08:23:11 <olliej> ndm: however their tailcall jitting still sucks
08:23:19 <olliej> tail calls are
08:23:32 <shapr> That's nice.
08:23:33 <paolo> OK!
08:23:36 <olliej> ilx were just simple instructions that were expanded to many
08:23:39 <paolo> @help where
08:23:40 <lambdabot>  @where <key>, return element associated with key
08:24:00 <olliej> however the C#/VB/etc compilers don't generate them
08:24:29 <ndm> so are you hoping to get GHC to generate .net bytecode?
08:24:30 <olliej> currently i'm outputting C# and just ignoring the whole tailcall issue
08:24:38 <shapr> You could output C--
08:24:42 * shapr grins evilly
08:24:45 <olliej> :p
08:25:23 <olliej> you get some of the most appalling code coming out the other end
08:25:32 <olliej> due to how the haskell features get handled
08:25:51 <shapr> I'm not surprised.
08:26:23 <shapr> I've read about efforts to  ML/Haskell/Scheme on JVM, dotcom, etc
08:26:37 <shapr> Those VMs are all about procedural languages.
08:26:42 <olliej> yup
08:27:07 <olliej> but the bigger problem is the typed memory model
08:27:21 <paolo> dcoutts: ping
08:27:31 <dcoutts> paolo, pong
08:27:36 <paolo> @where cairo
08:27:36 <olliej> it means you can't do some of the memory bludgeoning tricks that ghc employs
08:27:37 <lambdabot> http://haskell.galois.com/~paolo/darcs/bindings
08:27:38 <paolo> \o/
08:27:56 <olliej> shapr: admire this code
08:27:58 <olliej>        public static global::CLI_Haskell.CLI.Function<GHC.Prim.Statezh<GHC.Prim.RealWorld>, GHC.Prim.Z2H<GHC.Prim.Statezh<GHC.Prim.RealWorld>, GHC.Base.Void>> HaskellMain()
08:28:01 <olliej>        {   global::CLI_Haskell.CLI.Function<GHC.Prim.Statezh<GHC.Prim.RealWorld>, GHC.Prim.Z2H<GHC.Prim.Statezh<GHC.Prim.RealWorld>, GHC.Base.Void>> \u01262;
08:28:05 <olliej>            // Function found inside suspension
08:28:07 <olliej>            \u01262 = new global::CLI_Haskell.CLI.Function<GHC.Prim.Statezh<GHC.Prim.RealWorld>, GHC.Prim.Z2H<GHC.Prim.Statezh<GHC.Prim.RealWorld>, GHC.Base.Void>>.thunk(new Main.\u03bbFunc2());
08:28:11 <olliej>            return GHC.TopHandler.runMainIO<GHC.Base.Void>(\u01262);
08:28:14 <olliej>        }
08:28:15 <paolo> olliej: ehrm...
08:28:25 <olliej> i may use pastebin in future
08:28:34 <olliej> that was marginally larger than i thought it was
08:29:10 <shapr> olliej: I admire and am in awe.
08:29:27 <olliej> hehe
08:29:28 <paolo> OK, I'll retry...
08:29:30 <paolo> @where cairo
08:29:31 <lambdabot> http://haskell.galois.com/~paolo/darcs/bindings
08:29:34 <paolo> \o/
08:29:35 <shapr> @where shapr
08:29:36 <lambdabot> I know nothing about shapr.
08:29:42 <shapr> lambdabot: I'm right here!
08:29:44 <shapr> @where lambdabot
08:29:46 <lambdabot> http://www.cse.unsw.edu.au/~dons/lambdabot.html
08:29:54 <olliej> hehe
08:29:57 <paolo> shapr: first public revision! :-)
08:30:04 <shapr> yay!
08:30:11 * shapr grabs
08:30:21 <paolo> Maybe I should have written "darcs get " ++
08:30:27 <paolo> But you know that.
08:30:36 <shapr> Yup
08:30:58 <shapr> What about naming the repo cairobindings or something?
08:31:08 <olliej> shapr that piece of code responds to part of "topHandler.runMainIO main"
08:31:12 <paolo> Ooh-kay.
08:31:48 <paolo> In my directories hierarchy "binding" itself makes sense, but when you grab it it doesn't "per se".
08:31:59 <shapr> I have a single dir where I keep all my repos, and one dir named "bindings" in there won't tell me much.
08:32:08 <paolo> Right.
08:32:13 <shapr> olliej: Impressive. I wish you a good thesis :-)
08:32:22 <olliej> shapr: hehe
08:32:34 <olliej> shapr: i hope to escape into the real world before i go nuts...
08:33:19 <shapr> I've spent a lot of years in the real world, now I'm trying to get into academia.
08:34:15 <olliej> shapr: 5 years of straight academia straight after school... i think the real world would be nice
08:34:20 <olliej> or at least having money...
08:34:39 <shapr> Real World /= Money
08:34:45 <olliej> hehe
08:34:58 <paolo> shapr: make && ghci -fffi -lcairo -i$(pwd) demo/StarAndRing.hs
08:35:01 * olliej has an annual income of around $NZ5000
08:35:02 <paolo> then: main
08:35:10 <shapr> I'm self-employed, so I get off time and not much money. Being an employee means you get very little off time and not much money.
08:35:14 <olliej> realworld==money
08:35:32 * shapr calculates his annual income.
08:35:34 * Heffalump gets 5 weeks holiday plus bank holidays, which is a fair bit
08:35:52 <olliej> shapr: i also have $NZ10000 in uni fees each year
08:36:06 <goron> What is a $NZ?
08:36:09 <shapr> That sounds like a net minus of $NZ5000
08:36:16 <shapr> New Zealand dollars, I assume.
08:36:17 <olliej> about 0.6*$USD1
08:36:21 <olliej> shapr: yup
08:36:22 * shapr points to /whois olliej
08:36:24 <ndm> olliej, i guess you've never had a summer job - that put me off jobs for life
08:36:36 <goron> ndm: heh
08:36:47 <olliej> ndm: i had a job as a technical writer of last christmas
08:36:56 * Lemmih is glad education is free in Denmark.
08:37:07 <olliej> which eventually morphed into writing an OS, so i won';t complain too much
08:37:09 <goron> Lemmih: Free, like in completely free?
08:37:16 <shapr> I think I make about 35k a year.
08:37:45 <goron> shapr: You only did government stuff, right?
08:37:45 <Heffalump> 35k USD?
08:37:45 <Lemmih> goron: Yes, the government will even pay you.
08:38:01 <goron> Lemmih: Say that again.
08:38:11 <olliej> shapr: I'm having an interview with apple in a month, which will hopefully give me a interesting job
08:38:16 <goron> Lemmih: That sounds like paradise.
08:38:16 <shapr> Heffalump: Yeah, but I'd have to go through the conversion, since kronor to dollars has changed.
08:38:50 <shapr> I could make more, but then I'd have less free time :-)
08:39:02 <olliej> shapr: hehe
08:39:04 <Lemmih> goron: The amount they pay is enough to pay rent and food if you live cheap.
08:39:34 <shapr> On the other hand, I'll probably be able to work just as much as I do now and still go to school full time.
08:39:59 <shapr> I won't be here on #haskell much for the next few years if I do that.
08:40:06 <goron> Lemmih: That's astonishing.
08:40:17 <paolo> OK, updated.
08:40:51 <paolo> @where cairo
08:40:53 <lambdabot> http://haskell.galois.com/~paolo/darcs/cairobindings
08:40:57 <shapr> yay!
08:40:58 <paolo> I'm "happy".
08:41:08 <paolo> It's the first "software" I release
08:41:26 <shapr> yay!
08:41:31 <Lemmih> goron: Yeah. I really wish I were a student (:
08:41:35 * shapr gives paolo today's golden lambda award.
08:41:38 <paolo> Blog entry on the way.
08:41:48 * paolo hugs shapr 
08:42:10 <Lemmih> *was
08:42:21 <dcoutts> @where Gtk2Hs
08:42:22 <lambdabot> http://haskell.org/gtk2hs/
08:42:25 <dcoutts> hey cool
08:42:48 <dcoutts> how are the @where entries set?
08:43:06 <paolo> @help where+
08:43:07 <lambdabot>  @where+ <key> <elem>, define an association
08:43:11 <dcoutts> right
08:43:15 <dcoutts> ta
08:43:26 <paolo> You're welcome.
08:44:43 <goron> @where coolness
08:44:43 <lambdabot> I know nothing about coolness.
08:45:45 <shapr> @where coolness
08:45:46 <lambdabot> http://www.haskell.org/learning.html
08:45:49 <paolo> haha.
08:47:17 <goron> That was the intended side effect of my query :D
08:48:15 <ndm> is where for source code etc?
08:48:25 <olliej> Muwhahahahahahaha
08:48:30 <ndm> or just for darcs repo's - was wondering if i should add hoogle to @where
08:48:41 <olliej> i've finally got it output Core rep of the base libraries
08:48:53 <olliej> s/output/outputting
08:50:05 <shapr> ndm: Seems to be a general key -> elem command.
08:50:47 <ndm> @where+ hoogle http://www.cs.york.ac.uk/~ndm/hoogle/
08:50:48 <lambdabot> hoogle ~> http://www.cs.york.ac.uk/~ndm/hoogle/
08:54:21 <ndm> data LexerItem = LexerItem {regexp :: RegExp, name :: String, delete :: Bool, clear :: Bool}
08:54:41 <ndm> IlleIllegal type "RegExp -> String -> Bool -> Bool -> LexerItem" in constructor application
08:54:53 <ndm> what's wrong with that? looks fine to me...
08:58:25 <ndm> ah, solved it - it should be RegExp Char - but not exactly a helpful error message!
08:59:15 <Oejet> goron: It's not astonishing, it's just that the public are glad to pay for our education.
09:03:02 <Oejet> Despite that education is free in Denmark, we produce relatively fewer Ph.D.s than most of other European countries.
09:08:20 <lispy> i think in the US the only people that appreciate a PhD have one
09:12:53 * Lemmih goes out to celebrate his sisters birthday.
09:16:15 <dcoutts> @seen paolo
09:16:15 <lambdabot> I saw paolo leaving #haskell 7 minutes and 51 seconds ago.
09:16:24 <dcoutts> @seen xerox
09:16:25 <lambdabot> I saw xerox leaving #haskell 8 days, 17 hours, 36 minutes and 19
09:16:25 <lambdabot> seconds ago, and I have missed 1 day, 15 hours, 54 minutes and 30
09:16:25 <lambdabot> seconds since then.
09:19:27 <dcoutts> paolo! come back! we need you
09:40:18 <paolo> Back.
09:40:49 <SyntaxNinja> welcome back
09:41:31 <paolo> SyntaxNinja!  I had a question for you but I forgot it...
09:41:59 <SyntaxNinja> ahh, too bad.
09:45:07 <SyntaxNinja> is there a way to get the text out of  a process that you've 'exec'd w/ ghc < 6.4?
09:45:17 <SyntaxNinja> even if its a posix-only way
09:45:48 <SyntaxNinja> I assume that w/ the new system.process you can read from the handles you pass it
09:46:04 <SyntaxNinja> can I read from the stdout handle or anything?
09:49:03 <lispy> read from stdout?
09:49:09 <lispy> that's not really supposed to work
09:49:27 <lispy> unless you want to read from the stdout of the child process
09:49:38 <SyntaxNinja> yeah, the child process
09:49:38 <lispy> SyntaxNinja: are you making a shell?
09:49:44 <SyntaxNinja> no.
09:50:05 <SyntaxNinja> I just want to execute a program and read its output... ya know, like in Perl.
09:50:11 <lispy> okay
09:50:42 <lispy> as i recall, in C the parent has to create an FD and give it to the child
09:50:56 <lispy> but i may be confusing piping in a shell....hmm...
09:51:01 <Heffalump> no, that's right
09:51:06 <Heffalump> it's not a C limitation, it's the way fork works
09:51:19 <SyntaxNinja> I'm talking about haskell
09:51:47 <lispy> SyntaxNinja: right, but if you can do it in C then you can do the same strategy in haskell
09:52:21 <lispy> SyntaxNinja: so i think what you need to do is set the child's stdout to be something the parent has a handle to
09:53:48 <SyntaxNinja> is there some means of setting stdout like that in haskell?
09:54:16 <lispy> i think in C you use dup or dup2, so i'd look in System.* for those
09:54:22 <SyntaxNinja> ok
09:54:58 <lispy> @doc System
09:54:59 <lambdabot> System not available
09:55:05 <lispy> @doc System.IO
09:55:06 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/base/System.IO.html
09:55:21 <Heffalump> the Posix stuff can fork and give you stdout
09:55:34 <Heffalump> I've done it with ghc < 6.4
09:55:42 <Heffalump> do you want me to find the code?
09:57:08 <SyntaxNinja> Heffalump: sure!
09:57:13 <olliej> Lemmih, shapr, dcoutts, any others whose names i have forgotten: thanks for your help, i now have many, many, many .hcr files :)
09:57:20 <lispy> Sytem.IO hase nothing promisnig
09:57:33 <SyntaxNinja> dup and dupTo are in system.io
09:57:37 <SyntaxNinja> at least in ghc < 6.4
09:57:40 <lispy> hmm..
09:57:43 <lispy> i didn't see them
09:58:17 <SyntaxNinja> sorry, System.Posix.IO
09:58:32 <Heffalump> yes, that's where to look
09:58:44 <lispy> thanks
09:59:19 <Heffalump> sorry, the laptop with the code on isn't responding to ssh.
09:59:24 <Heffalump> But it wasn't very complicated, IIRC.
09:59:53 <SyntaxNinja> ok
10:00:35 <Heffalump> I'll look for it in a couple of hours if you still need it.
10:00:47 <lispy> SyntaxNinja: have you looked at the haskell shell stuff?
10:00:50 <SyntaxNinja> so you think I have to do raw fork stuff?
10:00:58 <SyntaxNinja> lispy: no, I had a look at System.Process
10:01:40 <lispy> SyntaxNinja: what about executeFile
10:01:48 <Heffalump> SyntaxNinja: I think I found something that layers on top of it.
10:01:53 <lispy> @type System.Process.executeFile
10:01:56 <Heffalump> But then I ended up having to write my own version to get the precise behaviour I wanted.
10:01:58 <lambdabot> bzzt
10:02:15 <SyntaxNinja> hm
10:02:16 <lispy> @type System.Posix.Process.executeFile
10:02:18 <lambdabot> FilePath -> Bool -> [String] -> Maybe [(String, String)] -> IO ()
10:02:21 <Heffalump> actually, what's wrong with System.Process.runProcess ?
10:02:45 <SyntaxNinja> Heffalump: ghc 6.4 only
10:02:47 <Heffalump> oh, that's not right for getting stdout.
10:02:48 <paolo> lambdabot sources contain an implementation of popen.
10:02:49 <Heffalump> oh, right.
10:03:45 <paolo> http://haskell.org/gtk2hs/archives/category/cairo/
10:03:46 <paolo> :-)
10:14:28 <goron> SyntaxNinja: There's a Haskell interface to "rm"(i.e. *N*x) etc.
10:14:41 <SyntaxNinja> rm?
10:14:43 <goron> SyntaxNinja: I only forgot it's name.
10:14:51 <goron> ReMove
10:14:58 <SyntaxNinja> how does that help?
10:15:12 <goron> SyntaxNinja: you could check the source of that.
10:15:53 <SyntaxNinja> you think it just calls out to unix's rm?
10:16:21 <goron> SyntaxNinja: I know it does.
10:17:10 <goron> HsUnix
10:17:20 <goron> Thank you, mail search.
10:17:37 <goron> http://www.volker-wysk.de/hsshellscript/
10:18:20 <goron> SyntaxNinja: does that help?
10:18:49 <SyntaxNinja> hm. yeah, looking at that now
10:24:39 <lispy> @jargon HCF
10:24:43 <lambdabot> *** "HCF" jargon "Jargon File (4.3.1, 29 Jun 2001)"
10:24:43 <lambdabot> HCF /H-C-F/ n. Mnemonic for `Halt and Catch Fire', any of several
10:24:43 <lambdabot>  undocumented and semi-mythical machine instructions with destructive
10:24:43 <lambdabot>  side-effects, supposedly included for test purposes on several
10:24:43 <lambdabot>  well-known architectures going as far back as the IBM 360. The
10:24:45 <lambdabot> MC6800
10:24:47 <lambdabot>  microprocessor was the first for which an HCF opcode became
10:24:49 <lambdabot> [7 @more lines]
10:25:23 <paolo> @more
10:25:24 <lambdabot> widely
10:25:24 <lambdabot>  known. This instruction caused the processor to {toggle} a subset
10:25:24 <lambdabot> of the
10:25:24 <lambdabot>  bus lines as rapidly as it could; in some configurations this
10:25:24 <lambdabot> could
10:25:26 <lambdabot>  actually cause lines to burn up. Compare {killer poke}.
10:25:27 <lambdabot>  
10:35:41 <CosmicRay> musasabi: ping
10:36:17 <CosmicRay> who was it here that was making some patches against dh_haskell to support multiple cabal files in a single source?
10:47:03 <_metaperl> t
10:56:58 <jlouis> ~[6~cy	now
10:57:02 <jlouis> bleh
10:59:12 <kbrooks> Researchers seeking to improve performance should improve their compilers instead of compromising their languages.
10:59:13 <kbrooks> Researchers seeking to improve performance should improve their compilers instead of compromising their languages.
11:02:26 <Oejet> kbrooks: Greetings.
11:31:58 <SyntaxNinja> is there a way to pull and ignore files w/ conflicts?
11:32:02 <SyntaxNinja> er wrong channel
11:33:14 <Itkovian> hehe
12:03:47 <Itkovian> evening
12:04:14 <paolo> hi!
12:05:40 <goron> @jargon nofi
12:05:41 <lambdabot> No match for "nofi".
12:17:20 <svens> test.hs:9:29:
12:17:20 <svens>     Overlapping instances for Get_C String
12:17:20 <svens>       arising from use of `get' at test.hs:9:29-31
12:17:20 <svens>     Matching instances:
12:17:20 <svens>       Imported from MissingH.ConfigParser: instance (Num t, Read t) => Get_C t
12:17:21 <svens>       Imported from MissingH.ConfigParser: instance Get_C String
12:17:29 <svens> mhm... how do i say ghc which instance to use?
12:19:32 <TheHunter> if you enable -fallow-overlapping-instances, ghc will choose the most specific one, ie. instance Get_C String.
12:19:32 <stepcut> svens: i think there is a flag, -fallow-overlapping-instances, that will let the compiler accept that -- but I am not sure how it picks which one to use
12:20:34 <svens> oh, thanks. with this flag it works...
12:20:52 <Itkovian> Lemmih: still no luck; I've added /usr/local/bin to the PATH in /etc/profile, but that seems to do nothing ... and it seems irritating to link all the binaries from local/bin to bin
12:21:08 <Itkovian> However, when I do that for both trhsx and ghc, TestPage works fine
12:28:21 * Itkovian has got HSP working ... for real this time
12:29:12 <gzl> if you want to register a package with GHC, at what stage in the compile should you run make regsiter?
12:29:23 <Itkovian> at the last stage
12:29:29 <Itkovian> I think
12:29:31 <gzl> after install?
12:30:31 <gzl> ugh, I'm trying to compile hs-plugins, and I get this error when I try to make:
12:30:43 <gzl> Rebuilding dependencies ... ghc-6.4: Error; multiple packages match altdata: altdata-0.9.10, altdata-0.9.8
12:30:46 <gzl> any ideas?
12:36:19 <Itkovian> hmm ... maybe you've already got something installed ...
12:36:22 <Heffalump> SyntaxNinja: do you still want me to look up that code for you?
12:36:25 * Itkovian checks ghc-pkg list
12:37:00 <Itkovian> have you got an older hsplugins lying around somewhere?
12:37:26 <gzl> gah, dports didn't unregister the old version
12:37:40 <gzl> yeah, I have plugins-0.9.8
12:38:26 <gzl> ok, trying again after unregistering
12:38:44 <Itkovian> seems quiet in here ...
12:38:46 <gzl> ok, I did `ghc-pkg unregister plugins'
12:38:51 <Itkovian> everybody watching football?
12:38:52 <gzl> and `make' still complains
12:38:56 <gzl> now what?
12:39:00 <Heffalump> what football?
12:39:02 <Itkovian> does it give the same error?
12:39:06 <gzl> yes
12:39:22 <gzl> let me try reconfiguring
12:39:27 <Heffalump> oh. International friendies.
12:39:49 <gzl> yeah, still no cigar. same error.
12:43:26 <mwc> Football, football... that's the sport that is to lacrosse as ringette is to hockey?
12:44:14 <Itkovian> sucks ... gzl check the packages.conf file manually ... is it still in there?
12:45:21 <mwc> I wonder if all this registration business is worth it. COuldn't we set a GHC_PKG_DIR variable and put all those package.confs in /usr/lib/ghc/pkg?
12:45:44 <mwc> I know it makes packaging kind of a PITA at any rate
12:45:57 <Itkovian> what's PITA?
12:46:12 <mwc> Pain in the arse
12:46:23 <Itkovian> I have no experience with that ...
12:46:28 <Itkovian> ymmv ;-)
12:47:04 <Heffalump> I still don't see what's so hard about having a distro script that scoops up a directory into package.conf
12:47:11 <Itkovian> me neither
12:47:15 <Itkovian> I like it ...
12:47:21 <mwc> Heffalump, I find it's a pain as to when its run
12:47:36 <Heffalump> I think having a directory would be better. But it's not really that big a deal.
12:47:45 <Heffalump> mwc: run it after adding or removing a file, surely.
12:47:54 <Heffalump> postinst and postrm in Debian, say.
12:48:13 <mwc> Yeah, that's what I do now, but it's a lot less elegant
12:49:52 <mwc> especially with package or port systems that put it into a temporary root in order to register all the files before installing them proper
12:58:22 <Spark> pain in the arse
13:07:26 <gzl> huh
13:07:55 <gzl> Itkovian: yeah, there is some hs-plugins stuff in here
13:08:08 <gzl> that's really annoying
13:08:35 <gzl> just delete it all manually?
13:09:18 <Itkovian> gzl: backup first!
13:09:31 <gzl> of course :)
13:09:57 <gzl> I have to run, but I'll try that when I get back
13:09:57 <gzl> thanks
13:28:11 <Lemmih> Itkovian: Okay. I'll add a 'ghc-path' to Config.hs soon.
13:28:26 <Lemmih> SyntaxNinja: Hi.
13:31:01 <Itkovian> Lemmih: and trhsx ...
13:31:01 <Lemmih> Itkovian: Thanks a lot for testing HSP, btw.
13:31:12 <Itkovian> I'm going to test in a local dir next ...
13:31:23 <Itkovian> ttyl
13:32:28 <Lemmih> nibro: ping.
13:38:31 <SyntaxNinja> hi Lemmih
13:51:03 <boegel> bye everyone
13:52:15 <xerox> Bye boegel.
13:53:59 <SyntaxNinja> who's working on darcslib?
13:54:44 <musasabi> CosmicRay: pong
13:55:08 <goron> SyntaxNinja: Was HsShellscript usefull?
13:55:13 <musasabi> just got home from trecking.
13:56:34 <SyntaxNinja> goron: I punted on that, but I'm sure it will be.
14:03:48 <bourbaki> moin
14:25:58 <lispy> SyntaxNinja: darcslib?
14:26:05 <lispy> SyntaxNinja: an open darcs api?
14:26:18 <lispy> hmm...an api to the patch theory would be perfect
14:26:29 <lispy> have darcs just be a special case of using patch theroy
14:27:00 <lispy> do it in a way that patch theory could be integrated into other things
14:27:00 <xerox> AH!
14:27:14 <lispy> have patches of things besides just lines in files
14:27:19 <xerox> SyntaxNinja: I remember it.  Is there darcs.cgi on haskell.galois ?
14:27:36 <lispy> you could have stacks of undo information, so that things like gimp could use darcs patch theory for undo
14:28:53 <lispy> completing the formalism of darcs patch theory is something that one could publish on i'm sure
14:29:11 <lispy> maybe that's the way to make it happen, get people interested in doing it as a research topic
14:32:14 <Heffalump> yes, would be nice.
14:47:37 <tintin> there can't be THIS many haskellites in the whole world :O
14:47:58 <lispy> tintin: how many?
14:48:09 <tintin> 130?
14:48:11 <Cale> There are more, many of them don't use IRC :)
14:48:12 <lispy> you are surprised there are so few or so many?
14:48:22 <tintin> so many! i never imagined!
14:48:23 <tintin> isn'
14:48:31 <tintin> isn't haskell dead :-/
14:48:37 <Cale> dead?
14:48:44 <Lemmih> dead?!
14:49:01 <tintin> well compared to umm java?
14:49:03 <tintin> <hides>
14:49:22 * lispy waits for java to die
14:49:29 <lispy> killall -9 java
14:49:29 <Cale> I sure hope not, it's my favourite language :)
14:49:30 <tintin> heheh
14:49:47 <tintin> cale how do you use it?
14:49:48 <tintin> commercially?
14:50:21 <Cale> I've used it in work before.
14:50:36 <tintin> cool :)
14:50:37 <Cale> I wrote a pipeline scheduler for PPC+Altivec assembly in it.
14:50:41 <Lemmih> tintin: http://www.galois.com
14:50:50 <tintin> thx lemmih
14:50:53 <lispy> actually have you noticed the trend that general purpose languages are being used less and less and it's more about integrating lots of domain specific languages?
14:51:41 <lispy> javascript comes to mind.  And if we allow for non-programming languages, then things like XML come into the picture
14:52:34 <Philippa> XSLT especially
14:52:34 <tintin> javascript aye? :-?
14:52:36 <lispy> so now we have javascript+css+xml+whatever all working together
14:52:40 <tintin> ajax.
14:52:53 <KrispyKringle> lispy: XSLT is supposedly turing-complete.
14:52:55 <shapr> How to scratch windows...
14:52:59 <KrispyKringle> Er, Philippa
14:53:00 <lispy> KrispyKringle: ah, okay
14:53:09 <KrispyKringle> Just as an aside ;)
14:53:10 <shapr> It's true, XSLT is turing-tarpit-complete.
14:53:14 <lispy> shapr: finger nails?
14:53:17 <tintin> 'turing-complete'. academic-speak :)
14:53:20 <shapr> lispy: Nah, Ajax
14:53:31 <KrispyKringle> lispy: PS: my mail filter is now online. http://www.af0.net/~dan/?constrictor ;)
14:53:39 <KrispyKringle> I'm using it myself. Seems to work well.
14:53:41 <shapr> tintin: 'reboot' is academic-speak too.
14:53:48 <KrispyKringle>  haha
14:53:49 <tintin> hehehhe
14:53:55 <Philippa> KrispyKringle: why do you think I mention it?
14:54:05 <lispy> KrispyKringle: my nehe tuts in haskell are now online too
14:54:12 <lispy> @where lispy-nehe
14:54:13 <lambdabot> http://www.codersbase.com/Nehe-tuts
14:54:20 <KrispyKringle> Philippa: Ok, ok.
14:54:32 <KrispyKringle> lispy: as in, NeHe the graphics guys?
14:54:46 <lispy> KrispyKringle: ya
14:54:52 <lispy> KrispyKringle: opengl actually
14:55:09 <Oejet> What was the maximum number of people in here at the same time?
14:55:16 <lispy> KrispyKringle: i just realized we need a web interface to creating rules for constrictor or equivalentely Autoproc
14:55:39 <Oejet> tintin: Where are you coming from programming language wise?
14:55:41 <lispy> Oejet: working for the fire marshal? ;)
14:56:04 <KrispyKringle> lispy: you could, but constrictor rules are just python. :)
14:56:10 <tintin> commonlisp/forth/snobol/<enter obscure interesting language here> :)
14:56:18 <tintin> anything impractical...
14:56:22 <KrispyKringle> lispy: I actually considered trying to do sort of what you did, but in python, with a sort of special embedded DSL for rules.
14:56:26 <KrispyKringle> But I think writing in Python is actually easier.
14:56:35 <KrispyKringle> Since it preserves flexibility.
14:57:46 <Oejet> tintin: Haskell is impractical in the beginning and practical in the end.
14:58:26 <lispy> KrispyKringle: if it's embedded you still have flexibility, i wrote some specific filterig things by using higher order functions
14:58:39 <tintin> what do you mean Oejet ?
14:59:07 <lispy> KrispyKringle: i'm still trying to figure out a language for the regexp
14:59:26 <KrispyKringle> lispy: Yeah, that's true. It could be nice. I also couldn't think of a much better syntax than just plain python. Less verbose, yes. Clearer, no.
14:59:27 <lispy> KrispyKringle: those are fine some of the time, but they can have some gotchas
14:59:34 <KrispyKringle> lispy: The one I used before I wrote Constrictor had a syntax that was like this:
14:59:44 <KrispyKringle> matchfunction(testpattern): action(destination)
14:59:57 <lispy> ah
15:00:06 <KrispyKringle> which in Constrictor is equivalent to elif(message.test(pattern)): message.action(args)
15:00:16 <KrispyKringle> so you can see, the distinction isn't really that great, I don't think.
15:00:33 <KrispyKringle> I liked your syntax, but it's mostly just because of the brevity.
15:00:40 <lispy> my basic construct is  when :: (Email -> Bool) -> Action (those aren't the real types, but it's how you can think of it)
15:00:55 <lispy> yeah
15:01:03 <lispy> i used when to implement one liners
15:01:36 <lispy> sortByFrom "foo", which turns into when (from "foo") (placeIn (Mailbox "foo"))
15:01:40 <KrispyKringle> Yeah, that's kinda nice.
15:02:04 <KrispyKringle> I don't really know how to implement this kind of stuff in Python, though. Like, binary functions, etc. You probably can, but I don't really know.
15:02:23 <lispy> well, think of python as a code generator
15:02:35 <Oejet> tintin: It will probably hurt your brain a bit while learning some of the Haskell stuff and it might take some time before you are able to do anything really practical.
15:02:41 <KrispyKringle> well, yeah, it has eval(), for one thing.
15:02:43 <lispy> i used algebraic datatypes and i manipulate them, then generate a procmail recipe
15:02:55 <KrispyKringle> so you can actually do anything if you really want to.
15:03:00 <KrispyKringle> hrm.
15:03:02 <tintin> ah i see. thx oeject.
15:03:09 <KrispyKringle> i tend not to think as much about concept when using python as when using haskell :P
15:03:24 <KrispyKringle> Hmm.
15:03:39 <lispy> well, mine design was for a class where the emphasis was on embedded domain specific langugaes :)
15:03:41 <KrispyKringle> So each expression is condition: action
15:03:51 <lispy> yeah
15:03:54 <KrispyKringle> but what that lacks is the ability to terminate processing (unless you consider that an action)
15:03:58 <KrispyKringle> ah, haha.
15:04:45 <shapr> tintin: But once you get the Haskell clue, the world is your oyster and Haskell is your titanium nutcracker.
15:04:57 <tintin> inneresting!
15:04:58 <lispy> i've never had a rule that terminates, i'm not sure how you could do tha with autoproc, it may require an extension.  Although, the code generator should be able to generate it, if you can fashion the rule
15:05:05 <tintin> what should i read?
15:05:15 <tintin> predicate logic?
15:05:17 <tic> monads.
15:05:23 <lispy> tintin: you know lisp, so i'd start with the gentle intro
15:05:23 <musasabi> Is there something like FileChooser in Gtk2Hs but with a custom backend to the filesystem?
15:05:26 <KrispyKringle> lispy: but you know what I mean, right?
15:05:42 <lispy> KrispyKringle: i think so
15:05:50 <tintin> okay.
15:06:01 <KrispyKringle> hmm.
15:06:26 <lispy> KrispyKringle: but procmail supports "stop processing rules", and my code generator can generate the right procmail for it.  But I don't think I created an interface for doing it
15:06:42 <KrispyKringle> So Mail -> Action is comprised of functions that are Condition -> Action and an evaluator that evaluates the condition...
15:06:54 <KrispyKringle> for each rule
15:06:58 <KrispyKringle> i think
15:07:13 <lispy> i don't have anything of type Mail -> Action
15:07:35 <KrispyKringle> Well, that's essentially what you end up doing, no?
15:07:40 <lispy> just (Email -> Bool) -> Action
15:07:40 <KrispyKringle> I mean, in haskell it'd be Mail -> IO ()
15:07:44 <KrispyKringle> or something.
15:07:49 <KrispyKringle> hrm.
15:07:54 <KrispyKringle> yeah, ok.
15:08:00 <KrispyKringle> that's each rule, right?
15:08:04 <shapr> tintin: First learn the non-monadic Haskell, see http://www.haskell.org/hawiki/HaskellDemo then learn monads.
15:08:09 <lispy> Mail -> Action was my first plan, it doesn't work out that great
15:08:21 <lispy> yeah, each rule
15:08:24 <tintin> monads, what are those?
15:08:32 <lispy> an action could be, "do something, and stop."
15:08:57 <KrispyKringle> tintin: you REALLY don't want to know :P
15:09:02 <tintin> heheheh
15:09:10 <tintin> okay. i'll learn non-monads first.
15:09:15 <lispy> tintin: they are a mathematical object that allows you to take full control of function application.  They also double as one way containers (not all are one way) because of these two properties they allow some really amazing stuff
15:09:21 <KrispyKringle> lispy: Right, but alternatively you could make conditional functions be exclusive or non-exclusive.
15:09:36 <lispy> what do you mean?
15:09:43 <lispy> exculsive or non-exculsive?
15:09:47 <KrispyKringle> lispy: So that if an exclusive rule evaluates to true, the other exlusive ones no longer can, but other non-exclusive ones still can.
15:09:57 <KrispyKringle> *shrug*
15:10:01 <shapr> tintin: Monads are an abstraction in the way that objects are an abstraction. They're a simple convention used to structure code meaningfully.
15:10:04 <KrispyKringle> it's functionally equivalent.
15:10:09 <KrispyKringle> Rather than a terminating or non-terminating rule.
15:10:17 <lispy> KrispyKringle: well, i have .&&., .||. and not
15:10:32 <tintin> ah okay.
15:10:34 <tintin> an abstraction.
15:10:35 <lispy> KrispyKringle: it's sort of what you're talking about turned inside out
15:10:38 <KrispyKringle>  So a la firewall rules, you generally have terminating or non-terminating. But what if instead you had rules that could not all be evaluated together and rules that could be evaluated together.
15:10:54 <KrispyKringle> yeah
15:11:01 <KrispyKringle> it's all the same. just different perspective.
15:11:30 * lispy nods
15:11:45 <lispy> KrispyKringle: you're on osx?
15:11:51 <lispy> "/User/..."
15:12:00 <KrispyKringle> Yeah. :P
15:12:04 <lispy> cool
15:12:16 <KrispyKringle> If you're not on OSX, I highly encourage you to switch l)
15:12:19 <KrispyKringle> er, ;)
15:12:28 <KrispyKringle> I'm using this on a Solaris mailserver, though.
15:12:40 <lispy> i have an ibook now just got it last month, but my heart still belongs to linux :)
15:12:47 <Cale> tintin: If you're looking to learn Haskell, I think "Yet Another Haskell Tutorial" is quite good :)
15:12:48 <KrispyKringle> Seems to work OK. I have some general fears that my mailbox locking code may not be perfect, but it's a corner case that seems to work.
15:13:20 <lispy> KrispyKringle: yeah, whatever i use has to work with nfs
15:13:21 <KrispyKringle> lispy: I was that way when I first got my Powerbook. But it's been over a year and a half and I'm now mostly a Mac user. I sorta plan on wiping Linux from my old desktop and putting on FreeBSD, at least.
15:13:33 <tintin> YAHT? okay i'll take a look at it :)
15:13:34 <lispy> KrispyKringle: and so i was afraid to dela with tah
15:13:35 <tintin> thx cale.
15:13:35 <KrispyKringle> Ah, well, if you use maildir it shouldn't matter.
15:13:43 <lispy> KrispyKringle: mbox :(
15:13:52 <KrispyKringle> I use mbox because UWIMAP only uses mbox, though.
15:13:55 <KrispyKringle> Ouch.
15:13:56 <tintin> it's not gonna be boring will it? there'll be interesting new concepts/abstractions to learn right?
15:14:01 <KrispyKringle> Well, so here's what the locking code does in constrictor:
15:14:17 <KrispyKringle> 1) Try to get a lockf() on the file descriptor (kernel lock)
15:14:21 <KrispyKringle> 2) try to create a dot-file lock
15:14:23 <lispy> tintin: lots of things to learn in haskell
15:14:42 <KrispyKringle> if either of those fail, sleep 2 secs and try again, repeat for 5 times (10 secs) each.
15:14:54 <KrispyKringle> If we totally fail, it deferrs the message and tries again later.
15:14:57 <tintin> kewl.
15:15:03 <KrispyKringle> (TEMPFAIL in Procmail language)
15:15:09 <lispy> KrispyKringle: would it be easier to just have one lock?  sort of "sorry, constrictor is already running, please wait" lock?
15:15:36 <KrispyKringle> lispy: Well, I use both types of locks because different MUAs use different types.
15:15:43 <lispy> ah
15:15:59 <lispy> i always forget you have to deal with the users mail system and everything
15:16:20 <KrispyKringle>  yeah
15:16:22 <Cale> tintin: Well, the first thing to get used to is that computations occur lazily. The only expressions which are evaluates are those actually needed to produce a result.
15:16:26 <KrispyKringle> im not too familiar with this, but it seems to work,.
15:16:29 <Cale> evaluated*
15:17:00 <Cale> tintin: This opens up the possibility of infinite (or even just ridiculously large) data structures.
15:17:24 <shapr> tintin: Haskell has the best collection of new and interesting concepts/abstractions that I've ever found. And I'm a qualified neophile.
15:17:42 <tintin> shapr really?
15:17:45 <tintin> what's the next best?
15:17:48 <lispy> shapr: heh, shapr approved, #haskell tested.
15:18:01 <lispy> tintin: CL :)
15:18:14 <tintin> 'course :)
15:18:21 <tintin> but some parties will argue that CL has it all.
15:18:33 <shapr> tintin: For the moment, Joy is the next best.
15:18:33 <lispy> indeed, CL is quite nice
15:18:38 <tintin> particularly a 1000-paged tome published a while ago ...
15:18:38 <Cale> tintin: except a sensible static type system :)
15:18:46 <tintin> joy?
15:19:01 <tintin> no mas types! :P
15:19:02 <shapr> Yeah, concatenative languages have some neat stuff. But not as much neat stuff as Haskell.
15:19:15 <lispy> Cale: well, the spec doesn't forbid it, and sbcl/cmucl both have them, they just aren't as aggresive
15:19:31 <tintin> bah. i have a lot of work ahead of me with haskell and joy don't i?
15:19:32 <shapr> On the other hand, there's a neat thread on LtU about monads as a concatenative abstraction...
15:19:35 <Cale> lispy: yeah
15:19:38 <shapr> tintin: No, a lot of FUN!
15:19:47 <lispy> Cale: mosty ment for code generation.  I think we've discussed this before tho :)
15:19:50 <tintin> i like that better :D
15:20:05 <shapr> tintin: C'mon man, learning this sort of stuff is the coolest thing in the world... (well, except for wome)
15:20:09 <shapr> women*
15:20:11 <Philippa> shapr: they finally spotted it?
15:20:18 <shapr> Women > *
15:20:24 <tintin> ah. women. (takes another aspirin)
15:20:35 <shapr> Philippa: Yeah, I think dave_m mentioned it in fact.
15:20:36 <lispy> shapr: (Woman, Woman) > * ;)
15:20:45 <KrispyKringle> hahaha
15:20:48 <Philippa> lispy: no argument here
15:20:52 <shapr> lispy: I'm not a lesbian!
15:21:00 <shapr> Nor am I any good at spectator sports.
15:21:02 <tintin> there's a girl here?
15:21:05 <tintin>  :O
15:21:11 <tintin> shapr ;;)
15:21:24 <tintin> a *smart* girl???
15:21:30 <Philippa> you'd think using my first name as a nick'd give it away, wouldn't you?
15:21:30 <lispy> shapr: hehe, i meant it like shapr :: (Woman, Woman) -> Imagination
15:21:49 <Philippa> I mean, aside from the fact everybody online's a balding fat 40 y/o guy
15:21:58 <shapr> lispy: Ya know, I tried polyamory, and I realized it's just not for me.
15:22:04 <KrispyKringle> Philippa: that's your first name?
15:22:12 <shapr> Polylogistics are insanely complicated.
15:22:13 <KrispyKringle> I don't think I've ever heard that name before.
15:22:18 <Philippa> KrispyKringle: yes. You can get the rest with a whois
15:22:21 <tintin> philippa :-? this is getting very interesting.
15:22:24 <lispy> shapr: i can only imagine :(
15:22:27 <Philippa> it seems to be less common in the US than the UK...
15:22:30 <tintin> are you free to tutor? :D
15:22:33 * shapr sighs
15:22:37 <Philippa> shapr: I'm finding the logistics in my case work okay so far
15:22:40 <shapr> tintin: c'mon, this is the #haskell channel!
15:22:45 <Philippa> but... well, we've had that conversation
15:22:52 * shapr throws lambdas
15:22:56 <tintin> shapr relax: free for haskell tutorials :)
15:22:59 <KrispyKringle> Philippa: huh. That's an unusual last name, too. Is there some cultural derivation that's unusual?
15:23:02 * lispy juggles monads
15:23:18 <Philippa> KrispyKringle: there's a side of the family over in france
15:23:19 <Heffalump> it's not strange for England
15:23:22 * shapr unicycles while juggling arrows
15:23:29 <Philippa> not /particularly/ strange, anyway
15:23:40 <lispy> shapr: show off!
15:23:51 <lispy> putStrLn $ show off
15:23:53 <Heffalump> well, it looks typically English. I can't think of anyone else with precisely the same spelling.
15:23:56 <KrispyKringle> Hmm. Maybe I'm just ignorant.
15:24:31 * shapr grins
15:24:46 <musasabi> dcoutts: Any plans to wrap gtkfilesystem.h for Gtk2Hs ?
15:24:49 <lispy> @eval let off = "show off" in putStrLn $ show off
15:24:51 <lambdabot> No IO allowed
15:25:24 <Philippa> Heffalump: a lot of people mistake it for corduroy, which it's not (or else, it's a separate mutation as it's not pronounced the same)
15:25:43 <tintin> google loves you, philippa ;)
15:25:58 <Heffalump> well, it gives the impression of having similar roots, like lots of sets of English surnames :-)
15:26:11 <tintin> brb
15:26:19 <dcoutts> musasabi, I don't think so, it's not a public API is it?
15:26:19 <Philippa> Smith/Smythe/I'm-so-posh-I-need-killing-*now* and so forth :-)
15:27:09 * Heffalump wonders if double-barrelled surnames count as posh
15:27:24 <shapr> Like Johnson Smith-Smith ?
15:27:32 <Heffalump> shapr: yeah, something like that ;-)
15:27:34 <lispy> dons: would it be possible for lambdabot to not import putStrLn and then define it as putStrLn s = s++'\n'
15:27:44 <Philippa> depends on the circumstances
15:27:47 <lispy> dons: then some uses of putStrLn would be allowable
15:27:52 <dcoutts> musasabi, from gtkfilesystem.h: #ifndef GTK_FILE_SYSTEM_ENABLE_UNSUPPORTED
15:27:52 <dcoutts> #error "GtkFileSystem is not supported API for general use"
15:27:52 <dcoutts> #endif
15:27:53 <Heffalump> lispy: the types would be all wrong. Far too confusing.
15:28:04 <Heffalump> you could make a Writer monad that pretends to be IO, I guess.
15:28:07 <lispy> Heffalump: hehe, yeah i wondered about that :)
15:28:10 <shapr> Double-barrelled surnames are posh in the northeast USA.
15:28:22 <dcoutts> musasabi, what would you want it for?
15:28:55 <musasabi> dcoutts: to have a FileChooser using a custom network protocol to access the files.
15:29:32 <dcoutts> musasabi, you can write a GnomeVFS protocol handler and it'll "Just Work"tm
15:29:49 <Cale> Heh, if my friends get their surnames joined when they're married, it would be Shaikh-Tomaszczyk, and nobody would ever spell or pronounce it correctly :)
15:29:58 <musasabi> dcoutts: except I don't have gnome on most of my machines and that would kill windows portablity probably.
15:29:59 <Heffalump> cale: :-)
15:30:41 <dcoutts> musasabi, well you can bind it youself if you like, we've got the code generator so it wouldn't be too hard
15:30:41 <tuomov> how do you pronounce that szcz monster anyway?
15:30:53 <Heffalump> if my girlfriend and I got married and made a double-barrelled surname by taking part of hers (already double-barrelled) together with mine, it would sound like a sneeze.
15:31:26 <tintin> so your last name would be ah-tee-shoo?
15:31:40 <Heffalump> not *that* much like a sneeze :-p
15:31:46 <Heffalump> Kerr-Sittampalam
15:31:58 <tintin> that's not a sneeze at all :-?
15:32:14 <musasabi> dcoutts: Is it possible to easily make the wrapper separate or should I just modify a version of gtk2hs for local use?
15:32:27 <Heffalump> say it quickly and it definitely sounds like you just sneezed it out.
15:32:52 * shapr grins
15:32:55 <Cale> tuomov: Somewhat like "to-mass-chick"
15:33:09 <dcoutts> musasabi, not too hard, you can just use the .hs file after c2hs has done with it
15:33:45 <tintin> it sounds like something to say AFTER a sneeze.
15:33:47 <tintin>  :)
15:33:49 <shapr> I can barely wait to see if my kids appreciate having a joke as a surname.
15:33:55 <shapr> I'm sure they'll hate it 100%
15:34:12 <Cale> shapr: a joke?
15:34:19 <dcoutts> musasabi, actually, hmm, it's probably harder than that since you have to write an implementation of it, not just bind it
15:34:24 <tintin> cale: two guys walked into a bar.
15:34:33 <Cale> uh
15:34:35 <Cale> ugh
15:34:35 <shapr> Cale: Erisson -> "Son of the goddess of Chaos"
15:34:37 <paolo-> Son of Eris :-D
15:34:38 <tintin> or perhaps knocketh-knocketh
15:34:53 <tintin> no way! erisson? that's funny!
15:35:01 <tintin> name one apple :D
15:35:04 <shapr> kallisti!
15:35:05 <tintin> maybe they'll get it.
15:35:09 <Cale> Probably appropriate :)
15:35:19 <Cale> hehe
15:35:34 <shapr> Cale: Yeah well, I chose it to be appropriate.
15:36:00 <shapr> I was born Robert Benjamin Gilliam, and changed to Shae Matijs Erisson about five years ago.
15:36:12 <shapr> No wait, eight years ago?
15:36:12 <Heffalump> mini shaprs, what a scary thought ;-)
15:36:24 <shapr> We need more nonlinear processes!
15:36:26 <monochrom> why did you change?
15:36:27 <dcoutts> musasabi, Gtk2Hs doesn't currently support implementing GObject interfaces in Haskell, you'd need to write the implementation in C and then delegate to a Haskell implementation (assuming your filsystem API in in Haskell)
15:36:34 <gzl> what the hell
15:37:15 <shapr> monochrom: I wanted a name that really described me, something that really fit me. Names are significant, as any programmer knows.
15:37:18 <gzl> I just manually removed all mentions of hs-plugins from package.conf since uninstalling the old version didn't seem to do it properly, and doing `make' on the latest hs-plugins still gives the following error:
15:37:22 <gzl> Rebuilding dependencies ... ghc-6.4: Error; multiple packages match altdata: altdata-0.9.10, altdata-0.9.8
15:37:25 <gzl> ...now what?
15:37:27 <dcoutts> musasabi, so that's a bit harder, but not impossible, we're planning to do the same thing to allow custom GtkTreeModel implementations in Haskell
15:37:32 <Heffalump> shapr: tell that to de Bruijn
15:37:34 <shapr> gzl: Check your user conf
15:37:39 <shapr> Heffalump: hahaha!
15:37:54 * shapr renames Heffalump to 0
15:38:00 <musasabi> dcoutts: ok, I think I can manage that. It will be somewhat easier since I can live with one global object which does not need fancy memory management.
15:38:24 <gzl> shapr: ~/.ghc/powerpc-darwin-6.4/package.conf contains []
15:38:39 * one chortles merrily
15:38:41 * musasabi thinks about foreign exporting the haskell side functions and using a C helper to implement the gtk side.
15:38:46 <Heffalump> well, I'm glad you've got me in my rightful place, at the beginning.
15:38:48 <tintin> one erisson
15:38:59 <tintin> so why'd you change your name?
15:39:06 <tintin> for the giggles and shit?
15:39:31 <shapr> gzl: does ghc-pkg -l show altdata? If so, does ghc-pkg -s enlighten?
15:39:41 <monochrom> alright, what does your name mean?
15:39:56 <dcoutts> musasabi, you can use one of the existing implementations of the GtkFileSystem interface as an example, it's basically just creating a custom GObject and filling out a record of functions for the interface
15:40:05 <shapr> Synesthesist, son of the goddess of chaos. I chose matijs because I like the sound of it.
15:40:37 <shapr> There's a lot more depth in the name of course, Erisson partially means "I have ADHD and I'm trying to accept that fact."
15:40:58 <gzl> shapr: it does show it. -s is an unrecognized flag, though.
15:41:19 <shapr> gzl: sorry, ghc-pkg -s altdata
15:41:23 <tintin> TANSTAADHD shapr :)
15:41:55 <shapr> tintin: I would respectfully disagree. I've written about it on Ward's Wiki.
15:42:10 <tintin> i was diagnosed as well shapr.
15:42:31 <shapr> Do you disagree with your diagnosis?
15:42:56 <tintin> absolutely. sure there's a whole trail of unfinished tasks to prove me wrong :P
15:42:59 <gzl> shapr: ah, I guess there are things register by hs-plugins other than `plugins' itself?
15:43:11 <gzl> I'm just unregistering all of them now
15:43:28 <gzl> yeah, that fixes it
15:43:33 <gzl> had to unregister altdata and hi
15:43:45 <shapr> I'm trying to register hi right now, where is it?
15:43:47 <Philippa> tintin: I've a trail of unfinished tasks. I most likely don't have ADHD, though I can sometimes show traits that vaguely resemble a tiny amount of it. I /do/ have another issue...
15:44:01 <gzl> shapr: sorry, I just unregistered it
15:44:02 <tintin> what's that philippa?
15:44:07 <Philippa> asperger's
15:44:18 <tintin> hmm.
15:44:26 <tintin> now that's realer than my ADHD.
15:44:26 <Philippa> it's not just a socialisation-and-empathy-and-so-forth thing
15:44:39 <Philippa> Yup. Is it possible you were misdiagnosed?
15:44:45 <tintin> by two doctors?
15:44:55 <Philippa> worse has happened
15:44:55 <tintin> i want my money back then :))
15:45:44 <shapr> But you have to stay focussed long enough to ... what was that?
15:45:48 * shapr is distracted
15:45:49 <tintin> yeah. personally i think i have a mild form of OCD/perfectionism.
15:45:54 <tintin> hahaha
15:46:19 <Philippa> yeah, that's an easy way to kill projects dead
15:46:24 <tintin>  yeah :(
15:46:28 <monochrom> I exhibit ADHD-like behaviour when the math class doesn't move on. :)
15:46:29 <shapr> tintin: Anyway, I think you'll love Haskell. I suspect referential transparency naturally draws those of ADD tendencies.
15:46:40 <Heffalump> if I'm forgetful, can I claim to have mild Alzheimer's? :-)
15:46:46 <tintin> monochrom try throwing chalk at the prof ;)
15:46:52 * shapr grins
15:47:02 <tintin> heheh okay shapr. i'm quite interested in it.
15:47:05 <gzl> nice
15:47:09 <gzl> so far so good on the build
15:47:11 <gzl> thanks shapr
15:48:40 <shapr> yay
15:48:42 <gzl> dammit.
15:48:46 <shapr> stop calling me that!
15:48:55 * shapr sniffles
15:48:56 <gzl> Could not find module `Eval'
15:48:57 <monochrom> "Let f(x)=x^2+1. f(0)=?" "1" "f(1)=?" "2" "f(2)=?" "alright this is boring, let me describe my latest knowledge of plate tectonics to my friend..."
15:49:43 <gzl> why wouldn't it find Eval? hs-plugins is registered
15:49:59 <shapr> -package plugins ?
15:50:31 <Lemmih> gzl: It's System.Eval.
15:51:17 <gzl> ok. I think I must have some cruft from the hack I had to do with the previous version conflicting with dons' recent changes
15:51:20 <gzl> @where h4sh
15:51:21 <lambdabot> http://www.cse.unsw.edu.au/~dons/h4sh.html
15:52:39 <gzl> the only problem is that the commands on that page are generally things that one can do equally easily with existing commands
15:53:31 <paolo-> like... map?
15:53:42 <Heffalump> is it a shell of its own, or does it just provide a bunch of binaries?
15:53:56 <paolo-> Heffalump: the latter, I think.
15:54:00 <gzl> sorry, I meant the "neat one-liners"
15:54:09 <gzl> not the commands themselves
15:54:14 <gzl> Heffalump: yes, just commands
15:54:28 <gzl> not a shell
15:54:40 <mjl69> I have been working on the YAHT tutorial and I was taking notes as I was going along...I decided to do my notes in html and put online.  Check this out: http://parrotcode.net/
15:55:10 <mjl69> not much there yet though.
16:05:10 <gzl> dons: fwiw, after I installed hs-plugins 0.9.10, h4sh builds and installs fine on OS X with 'make; make install'
16:11:59 <musasabi> dcoutts: gtk2hs 0.9.9 seems to need "-ignore-package util-1.0" to compile on Debian sid.
16:12:19 <shapr> Where is package hi anyway? Part of hs-plugins?
16:12:34 <shapr> ah yes
16:14:24 <shapr> Why does Yi want hi-1.0 ?
16:16:29 <Leimy> hi?
16:16:38 <paolo-> hi!
16:16:47 * Leimy saw that coming
16:16:55 * paolo- hides
16:16:59 <shapr> Yeah, it wants package hi-1.0, but I only have hi-0.9.something
16:23:53 <shapr> g'day Pseudonym
16:23:59 <Pseudonym> G'day.
16:24:17 <Pseudonym> How's things?
16:24:25 <paolo-> Hey Pseudonym!
16:24:31 <Pseudonym> G'day paolo.
16:24:48 <Pseudonym> Things kinda slow around here today?
16:25:19 <Pseudonym> J,,,/
16:25:22 <Pseudonym> Hmmm, too.
16:25:29 <paolo-> @where cairo
16:25:31 <lambdabot> http://haskell.galois.com/~paolo/darcs/cairobindings
16:25:41 <paolo-> \o/
16:25:52 <Pseudonym> My program hasn't factored RSA640 yet.
16:26:01 * Pseudonym suspects it's a difficult problem
16:26:52 <dcoutts> musasabi, that's because you've got some other package that exposes (possibly indirectly) the util-1.0 package
16:26:54 * paolo- suspects Pseudonym owns CRAYs or some such of supercomputing medium.
16:27:08 <Pseudonym> No, I own GHC.
16:27:13 <Pseudonym> And a 2GHz Pentium.
16:27:17 <Philippa> crays aren't that fast by modern standards
16:27:17 <Pseudonym> Your problem with this is...?
16:27:24 <Philippa> I mean, they were /damn/ impressive at the time
16:27:24 <Pseudonym> Indeed.
16:27:33 <shapr> Pseudonym: You could use musasabi's join-hs to write a distributed factor program.
16:27:35 <dcoutts> musasabi, it's a real pain in the posterior, we (Gentoo) try to make sure that we don't package anything that introduces this problem
16:27:46 <icb> man! ghc is WAY faster on pc than my mac
16:28:06 <Pseudonym> The algorithm that I'm using isn't the general field sieve or anything.
16:28:07 <shapr> icb: Are you using -fPIC on mac?
16:28:13 <dcoutts> musasabi, early versions of the stand alone version of Cabal exposes util-1.0
16:28:26 <wilx> That shows that GHz`s do matter :)
16:28:26 <Pseudonym> I couldn't compete with distributed projects then. :-)
16:28:29 <icb> no, i am not, would that help?
16:28:41 <shapr> Why the heck does Yi specifically want hi-1.0 ? I can't find that mentioned anywhere.
16:29:18 <dcoutts> musasabi, otherwise you've just got to look through the depends of all other registerd and exposed packages to find the one that depends on util. Apparently ghc 6.4.1 is not going to be so finniky.
16:31:05 <Pseudonym> What I actually need is a quantum computer.  This baby would run MUCH faster on one of those.
16:31:25 <musasabi> dcoutts: Using ./configure --with-hcflags="-O2 -ignore-package util-1.0" worked fine in my case.
16:31:28 <paolo-> Did you watch the WhatTheHack speech about quantum computing?
16:31:33 <Pseudonym> Nope.
16:31:45 <Pseudonym> Unfortunately, GHC hasn't been ported to an array of laser-cooled Caesium atoms.
16:32:04 <dcoutts> musasabi, you'll run into this same problem when compiling other things until you find the offending package
16:32:24 <shapr> Would be nice though... We could switch to a new evaluation strategy, namely call-by-need-in-some-possible-universe.
16:33:22 <dcoutts> musasabi, it's a packaging nightmare actually, it's not so bad for debian since they don't build from source, but for gentoo, if we allow one of these packages that exposes util then half the other packages fail to emerge. It's a ghc problem really.
16:33:37 <dcoutts> but you're workaround is obviously fine for the moment
16:33:45 <dcoutts> you're/your
16:33:55 <paolo-> We should understand how to get that quantum computer we all have inside the skull working accordingly the objectives...
16:34:20 <Philippa> shapr: IOT List! :-)
16:34:30 <dcoutts> paolo-, you're here under xerox too? will the real paolo please stand up
16:34:39 * paolo- stands up
16:34:42 <Philippa> (List-of-universes monad)
16:34:56 <paolo-> dcoutts: I'm sorry for the confusion.
16:34:57 <dcoutts> paolo-, I'm just installing gtk+ 2.8.0... we'll see if the gtk+cairo code compiles...
16:35:03 <paolo-> Good!
16:35:03 <dcoutts> paolo-, no probs :-)
16:38:01 <musasabi> It seems that Cabal-1.1.2 depends on util.
16:38:47 <dcoutts> musasabi, the latest cabal version doesn't, I sent in a patch :-)
16:39:09 <dcoutts> it's probably only available in darcs at the moment however
16:39:38 <paolo-> dcoutts: how did you proceed?  jhcbuild (or whatever is called) or PKG_CONFIG_PATH && LD_CONFIG_PATH ?
16:39:53 <dcoutts> paolo-, no, I just emerged gtk+ :-)
16:40:13 <dcoutts> paolo-, actually I had to manually unmask it first
16:40:15 <paolo-> Lucky boy.  I have 2.7.5 from the packaging system.
16:40:43 <dcoutts> ah it's finnished compiling, lets see if gtk-demo still works...
16:43:44 <dcoutts> excelent, now for the real test...
16:52:39 <dcoutts> paolo-, it compiles! :-)
16:52:46 <dcoutts> now to test it...
16:53:08 <Heffalump> woah there.
16:53:14 <Heffalump> wrong attitude completely.
16:53:17 <Heffalump> it compiles, ship it.
16:53:22 <dcoutts> heh
16:53:44 <mwc> Heffalump, nah nah, don't get too hasty
16:53:44 <dcoutts> but I want to see it do it's animated thing!
16:53:51 <mwc> \we just need to issue the press release
16:53:56 <dcoutts> we've waited months for this bit!
16:54:09 <dcoutts> we want visual results
16:54:20 <paolo-> dcoutts: cool!
16:54:34 <mwc> MS VisualResults
16:57:43 <SyntaxNinja> simon marlow had a baby :)
16:57:48 <SyntaxNinja> (another one)
16:57:54 <Heffalump> wow.
16:58:04 <Heffalump> I knew Haskellers were good at achieving the impossible, but really..
16:58:30 <wilx> Budding?
16:59:13 <SyntaxNinja> oh grow up ;)
16:59:21 <wilx> Hehe.
16:59:33 <Heffalump> SyntaxNinja: do you still want to see that code for catching stdout of a forked process, btw?
16:59:36 <wilx> Why? Being adult has its drawbacks.
17:00:02 <Heffalump> you can't prove I'm an adult, anyway.
17:00:39 <paolo-> SyntaxNinja: did you see the question before?
17:05:24 <dons> SyntaxNinja, there's a portable POpen-on-top-of-System.Process in lambdabot and yi, if you're looking to read and write from a forked process
17:06:42 <dons> here: http://www.cse.unsw.edu.au/~dons/code/yi/Yi/Process.hs
17:07:18 <dons> hmm. also used in hs-plugins and h4sh. that's 4 out of 4. maybe it should be in a library
17:09:45 <gzl> dons: just out of curiosity, what kind of stuff do you use h4sh for?
17:10:01 <gzl> do you use "| length" instead of "| wc -l" and stuff now?
17:10:19 <dons> I tend to, yeah :) easier to remember
17:10:41 <dons> i'm teaching a course on sh and perl programming, and I find it much easier to work out examples using h4sh first
17:11:00 <gzl> ok
17:11:04 <dons> and coming up with complex pipes is easier with map and ap in between
17:11:25 <gzl> like?
17:11:44 <dons> oh, hmm, I had to filter elements out of my $PATH yesterday
17:12:33 <dons> so that was a map 'map something' | grep -v xy | concat | somethiing | something
17:13:07 <dons> gzl, here's one. how would you find the lengths of each line of a file in sh?
17:13:46 <dons> i.e. map show.length ?
17:13:47 <metaperl> it would start with for file in *
17:13:48 <metaperl> do
17:13:49 <metaperl> done
17:14:18 <dons> and then how to find the length of each line?
17:14:46 <dons> there's just no easy concept of map :: (a -> a) -> [a] -> [a]
17:15:03 <dons> sed trys, but is bad with artithmetic
17:15:15 <gzl> yeah, that's a good example
17:15:17 <dons> (though good with regex transforms)
17:15:18 <metaperl> dons, remember, Perl can be used from the shell
17:15:21 <yosemite> ls | while read F; do cat $F | while read L; do echo "$L" | wc -c; done; done
17:15:26 <yosemite> off the top of my head
17:15:28 <paolo-> dons: maybe length could he "show.lengh" by default?
17:15:33 <metaperl> but Perl is eager, so would crap out on a huge file
17:15:52 <gzl> that said, i usually don't need to find the lengths of lines in a file (or do much on a per-line basis)
17:15:58 <SyntaxNinja> Heffalump: sure!
17:16:00 <SyntaxNinja> paolo-: no
17:16:01 <metaperl> the shell is a gateway into a world of functionality. Haskell works hard to seal itself from that world in a sense
17:16:14 <metaperl> and for good reasons
17:16:15 <paolo-> SyntaxNinja: is there darcs.cgi on monk?
17:16:17 <SyntaxNinja> dons: don't want System.Process since it's ghc 6.4 only.
17:16:39 <dons> SyntaxNinja, the POpen lib also works with 6.2.2 - it uses the old POPen
17:16:44 <yosemite> I've always kinda thought of xargs as being like map in sh
17:16:54 <yosemite> xargs -n1 that is
17:16:56 <dons> yosemite, right!
17:17:12 <dons> they try so hard to do functional programming without realising!
17:17:18 <SyntaxNinja> dons: yous aid it used System.Process?
17:17:30 <dons> if __GLASGOW_HASKELL__ >= 604
17:17:37 <yosemite> yeah I came to that realization when I was doing a lot of sh and scsh programming a couple years ago
17:17:46 <dons> check the link, the file is only 30-40 lines long
17:17:54 <SyntaxNinja> paolo-: probably, but I doubt accessable to h.g.c or so...
17:17:57 <SyntaxNinja> paolo-: do yolu need it?
17:18:26 <paolo-> SyntaxNinja: it's not a real need, I was wondering if there was to check it out, no problems at all :-)
17:18:29 <SyntaxNinja> dons: ok cool
17:18:38 <SyntaxNinja> paolo-: OK :)
17:18:47 <dons> anyone: if you solve nice problems with h4sh, please mail me or msg me, and I'll add it to the one liners doc
17:18:48 <SyntaxNinja> dons: thanks I'll look at that.
17:19:08 <paolo-> @index ap
17:19:10 <lambdabot> Control.Monad, Control.Monad.Reader, Control.Monad.Writer, Control.
17:19:10 <lambdabot> Monad.State, Control.Monad.RWS, Control.Monad.Identity, Control.
17:19:10 <lambdabot> Monad.Cont, Control.Monad.Error, Control.Monad.List, Data.Graph.
17:19:10 <lambdabot> Inductive.Query.ArtPoint, Data.Graph.Inductive.Query, Data.Graph.
17:19:10 <lambdabot> Inductive
17:19:14 <paolo-> @type Control.Monad.ap
17:19:16 <lambdabot> forall b (m :: * -> *) a. (Monad m) => m (a -> b) -> m a -> m
17:19:16 <lambdabot> b
17:19:21 <dcoutts> paolo-, well I've got the very first thing working :-)
17:19:30 <paolo-> dcoutts: yay!
17:19:35 <paolo-> @karma+ dcoutts
17:19:37 <lambdabot> dcoutts's karma raised to 0.
17:19:39 <SyntaxNinja> dons: ooi, does it use that cat example I made way-back-when?
17:19:50 <yosemite> I totally needed h4sh today, but the machine I was one didn't have haskell and I was too lazy to install it
17:20:03 <dons> SyntaxNinja?
17:20:04 <paolo-> @where h4ash
17:20:05 <yosemite> ahh laziness
17:20:05 <lambdabot> I know nothing about h4ash.
17:20:08 <paolo-> @where h4sh
17:20:09 <lambdabot> http://www.cse.unsw.edu.au/~dons/h4sh.html
17:20:12 <dons> cat in h4sh is `i'
17:20:37 <Igloo> DYM id?
17:20:55 <dons> Igloo, yep. but clashes with id(1)
17:21:10 <Igloo> Oh, how rude
17:21:16 <dons> we decided to move head,tail,sort, and id to hd,tl,srt, and i
17:21:42 <Igloo> Bah, sounds like ml4sh  :-)
17:21:48 <dons> heh
17:22:05 <dons> paprika$ i --help
17:22:05 <dons> Usage: "i" [OPTION...] [file..]
17:22:05 <dons>   -v  --version  version string
17:22:05 <dons>   -?  --help     help
17:22:05 <dons> id :: a -> a
17:22:07 <dons> Identity function.
17:22:23 <dons> yay for shell commands with type signatures :)
17:22:38 <dons> (and haddock docs)
17:22:46 * Igloo wonders why not -V and -h
17:23:01 <dons> oh, maybe I made a mistake when guessing the gnu conventions..
17:23:12 <dons> you think it is -V and -h ?
17:23:27 <Igloo> I do, but I wouldn't trust me on it either  :-)
17:23:41 <dons> yep. gnu grep says -V and -h
17:23:43 * dons patches
17:24:20 * Igloo curses once more not being able to make type synonyms out of type synonyms
17:25:30 <dons> gzl, so I think you are suggesting that I should find some examples of stuff that's really hard in sh (or perl) as a better motivation for h4sh?
17:25:40 <Heffalump> igloo: huh?
17:26:20 <dons> gzl, (though just having lambdas on the cmd line is enough for most lambda-folks, surely ;)
17:26:22 <Igloo> I want   type Foo a = huge type; type Bar a = Maybe (Foo a)
17:27:16 <gzl> dons: yeah, I think the example one-liners aren't very seductive
17:27:20 <dcoutts> paolo-, well the line drawing is certainly smoother, the anti-aliasing is nice
17:27:36 <paolo-> dcoutts: what are you exactly doing?
17:27:40 <dons> gzl, ok :) any suggestions? maybe I should look at a perl cookbook
17:27:49 <dcoutts> paolo-, and it seems to animate with a decent speed, no noticably different from the gdk version
17:28:03 <paolo-> Uh.
17:28:09 <dcoutts> paolo-, you know the drawing demo in Gtk2Hs which shows the Gdk drawing functions?
17:28:24 * paolo- checks :-)
17:28:24 <dcoutts> paolo-, I'm rewriting that using cairo, so we can compare side by side
17:28:32 <gzl> dons: nothing jumps out at me right now, unfortunately :)
17:28:46 <Igloo> $ for types would be nice, too
17:29:03 <dons> Igloo, seconded
17:29:11 <SyntaxNinja> dons: ic
17:29:39 <gzl> dons: the problem is that I usually don't need to do something to a file line-by-line or scan the lengths of lines or things of that nature
17:30:02 <dons> gzl, ok. what kind of things do you do?
17:30:21 <dons> note that by default most commands behave along the lines of grep/sed/perl -p which seems reasonable
17:30:26 <gzl> yeah it does
17:30:34 <dons> for more complex work, you have `ap', which is like perl -p with BEGIN/END blocks
17:30:39 <dons> sort of
17:30:55 <dons> well, it's like perl -e really
17:31:46 <gzl> hmm
17:32:02 <gzl> well the things I do constantly are too simple to be interesting; | grep, | wc -l, etc
17:32:35 * dons wonders why there isn't a String (or Regex) -> String -> Bool function in Text.Regex
17:32:52 <yosemite> maybe it would be too usefull :)
17:33:42 <dons> just a wrapper over matchRegex so we could use it in filter or other (a -> Bool) -> [a] ->
17:33:50 <Igloo> You can just isJust one of the functions, can't you?
17:33:57 <dons> yep
17:34:06 <paolo-> @where hsplugins
17:34:07 <lambdabot> I know nothing about hsplugins.
17:34:16 <dons> hs-plugins
17:34:20 <paolo-> @where hs-plugins
17:34:21 <lambdabot> http://www.cse.unsw.edu.au/~dons/hs-plugins/
17:34:26 <yosemite> http://www.urbandictionary.com/define.php?term=h4sh <-- dons
17:34:50 <paolo-> dons: is 0.9.10 okay or darcs repo is better?
17:35:08 <dons> paolo-, hmm. 0.9.10 is ok with 6.4, 6.4.1 >= needs darcs
17:35:29 <dons> yosemite, weird
17:38:09 <dons> @type let matches r s = Maybe.isJust (Text.Regex.matchRegex r s) in matches
17:38:11 <lambdabot> Text.Regex.Posix.Regex -> String -> Bool
17:38:21 <dons> still seems useful to have a synonym though
17:39:15 <paolo-> Cool line.
17:40:26 <SyntaxNinja> speaking of regexps and shell stuff, I wish that we had a getDirectoryContents that takes a RegExp of files to return.
17:41:17 <musasabi> Usually just a filteredGetDirectoryContent f fp = getDirectoryContents fp >>= return . filter f is enough.
17:42:11 <paolo-> dcoutts: I think I'm going to sleep.  Ping my me with any news if you want :-)
17:42:14 <paolo-> Goodnight people.
17:44:26 <heatsink> SyntaxNinja: a shell glob, or a posix regex?
17:49:12 * heatsink wonders idly why some mathematicians like to use playing card suits in their notations
17:50:03 <liyang> It's an exotic alphabet.
17:50:20 <liyang> (for the mathematical definition of `alphabet', I mean.)
17:52:21 <heatsink> Tibetan is exoticer.
17:53:54 <heatsink> After greek and hebrew (aleph), I thought maybe something like hiragana would be next in line.
17:57:10 * liyang wonders if anyone's done that.
17:57:50 * heatsink took to using katakana "sa", "ko", "ta" for trigonometric functions... faster to write
17:58:10 <heatsink> once I forgot to explain what it meant on a math test :/
17:58:40 <liyang> <grin>
17:59:09 <liyang> Font support for it isn't exactly ideal though. It's a bit of a hassle to get CJK set up in LaTeX for example...
18:00:49 <liyang> (Though arguably, at least for me, it's faster to just write `s' `c' and `t'. :p~~)
18:01:01 <heatsink> font setup, that's a good point.
18:01:07 <heatsink> But s, c, and t look like variables
18:01:29 <liyang> Depends how fancy your handwriting is...
18:01:44 <liyang> (what do variables look like, anyway?)
18:02:59 <heatsink> single characters, lowercase or uppercase, latin or greek
18:04:15 <liyang> Meh. Functions and variables are one and the same.
18:05:23 <heatsink> depends on what kind of math your're doing.
18:08:52 <juhp> morning
18:21:21 <dcoutts> xerox, paolo? still there
18:21:51 <dcoutts> xerox, well when you wake up, take a look at these screenshots:
18:21:57 <dcoutts> http://www.haskell.org/~duncan/gtk2hs/Screenshot-drawing-gdk.png
18:22:01 <dcoutts> http://www.haskell.org/~duncan/gtk2hs/Screenshot-drawing-cairo.png
18:22:15 <dcoutts> for one, it shows that it's working :-)
18:22:37 <dcoutts> and secondly it shows how the nice anti-aliasing is working
18:23:03 <dcoutts> juhp, witness the new cairo+gtk+haskell goodness :-)
18:23:49 <dcoutts> and now I'm off to bed, goodnight all
18:24:13 <juhp> dcoutts: nice
18:24:24 <mwc> dcoutts, got that on a screenshot?
18:24:34 <dcoutts> mwc, yep, see above
18:24:43 <mwc> Just got here
18:24:51 <dcoutts> http://www.haskell.org/~duncan/gtk2hs/Screenshot-drawing-cairo.png
18:24:52 <dcoutts> http://www.haskell.org/~duncan/gtk2hs/Screenshot-drawing-gdk.png
18:25:09 <juhp> hmm, cairo drawing is so much smoother :)
18:25:14 <mwc> woah, beauty!
18:25:16 <dcoutts> yes :-)
18:25:56 <heatsink> ooh, anti aliasing
18:25:58 <dcoutts> and apparently it'll give us hardware accelerated vector graphics too
18:26:41 <dcoutts> with all kinds of funky things like affine transforms & gradients & fills & patterns
18:27:01 <mwc> Yeah, glitz?
18:27:08 <dcoutts> mwc, yes
18:27:15 <mwc> Too bad the Xegl people lost that developer :(
18:27:32 <dcoutts> I didn't know about that
18:27:43 <mwc> Then we would have had a hardware accelerated X server and only needed the DRM drivers
18:28:03 <dcoutts> that's still the plan I think
18:32:30 <yosemite> d
19:21:12 <ehuber> ahoy
19:25:44 <shapr> "But the real question that has come out of this episode is: is there any reason to keep /dev/kmem around? The fact that it has been broken for some time suggests that there are not a whole lot of users out there. It has been suggested that root kits are the largest user community for this kind of access, but there are no forward compatibility guarantees for root kit authors."
19:25:45 * shapr laughs
19:26:10 <shapr> Linux Weekly News roxx
19:27:52 <lispy_> shapr: you're in sweden right?
19:28:35 <shapr> Yup
19:28:46 <shapr> Why do you ask?
19:28:49 <lispy_> @timein stockholm
19:28:51 <lambdabot>  Thursday, August 18, 2005 at 4:29:54 AM CEST
19:29:01 <lispy_> shapr: there is a swedish girl at work
19:29:08 <lispy_> shapr: we were talking about the time difference
19:29:29 <lispy_> shapr: and how you're often active when i am, which i thought was odd since i'm on the westcoast of the US
19:29:35 <lispy_> @timein los angeles
19:29:37 <lambdabot>  Wednesday, August 17, 2005 at 7:30:40 PM PDT
19:30:00 <shapr> Yeah well, my sleep isn't regular enough to be called a schedule.
19:30:05 <lispy_> hehe
19:30:09 <lispy_> i know how that is
19:30:23 <lispy_> unless i have a job orsomething anchoring me to a schedule i'm pretty random about sleep
19:30:30 <shapr> Yeah, that's me.
19:31:49 <lispy_> i always like talking to foreigners.  Having done no travel personally i enjoy their descriptions ofplaces.
19:55:35 <shapr> I wanted a European Adventure. Six years later, I'm not sure I ever want my European Adventure to end.
19:56:44 <lispy_> shapr: oh, where are you from originally?
20:38:54 <lispy_> anyone used HSQL?
20:39:04 <lispy_> i have a question about using it with SQLite
20:45:02 <dons> hmm. anyone know how to pass options to happy or alex in a cabalised build?
20:50:42 <Pseudonym> @arr
20:50:43 <lambdabot> I heard andersca is a pirate
20:51:12 <Korollary> @yow
20:51:13 <lambdabot> I'm having BEAUTIFUL THOUGHTS about the INSIPID WIVES of smug
20:51:13 <lambdabot> and
20:51:13 <lambdabot> wealthy CORPORATE LAWYERS ...
20:51:30 <lispy_> i wanted to play with htoolkit but the documenation is so weak....
21:55:26 <lispy> @type loop
21:55:27 <lambdabot> bzzt
21:55:34 <lispy> @type iterate
21:55:36 <lambdabot> forall a. (a -> a) -> a -> [a]
22:21:42 <lispy> @type Monad.guard
22:21:44 <lambdabot> forall (m :: * -> *). (Control.Monad.MonadPlus m) => Bool -> m ()
22:22:05 <largezhang> Hi all. Why is HORNSAT in P? I suppose an algorithm to be 1. unit resolution. 2. assigning all remaining variables to zero. Am I right? Thanks in advance.
22:25:50 <lispy> since there is no MonadPlus IO instance, what can i use in place of guard?
22:26:50 <Cale> lispy: well, what are you trying to do?
22:27:58 <lispy> Cale: i was playing with sockets.  I wanted to "guard" against closed sockets
22:28:09 <lispy> guard =<< sIsConnected s
22:28:32 <Cale> well, what should happen if sIsConnected s is false?
22:29:00 <lispy> if it's false i wanted to abort futher computation
22:29:14 <lispy> if it's true i want to continue using it
22:29:31 <lispy> so maybe i nee da not in there
22:29:34 <Cale> you can write a little if expression and use exitWith to fail
22:30:30 <lispy> i wanted to use monads to do the exception handling, as a learning exercise :)
22:30:55 <lispy> i guess i need try or catch
22:31:12 <Cale> or even just unless
22:31:34 <Cale> b <- sIsConnected s
22:31:44 <Cale> unless b (exitWith ...)
22:33:07 <lispy> well, i don't want to exit yet
22:33:11 <lispy> that's part of the problem i guess
22:33:19 <lispy> i just want to abort the rest of the monad
22:33:39 <Cale> you can use if to select between cases
22:33:50 <Cale> if b then do ... else do ...
22:35:38 <Cale> and make that if the last line of the do-block you're in
22:40:43 <Cale> or even just
22:41:01 <Cale> when b $ do ...
22:41:06 <Cale> and make that the end
22:41:22 <Cale> if b fails, then the do block just falls off the end, returning ()
22:53:05 <lispy> relisten p = catch (doConnection p) (\e -> relisten p)
22:53:24 <lispy> that's what i needed, now it keeps listening for the next connection when I kill my connection
22:54:15 <lispy> and i have another catch down inside doConnection where I catch, cleanup and rethrow
22:54:42 <lispy> that inner catch surrounds the meat of dealing with the connection
22:58:49 <lispy> @eval last "hi"
22:58:51 <lambdabot> 'i'
23:07:32 <lispy> is there an equivalent to select or poll in the GHC libraries?
23:08:50 <Pseudonym> System.Posix
23:09:04 <Pseudonym> There's something under there.
23:10:37 <lispy> @index poll
23:10:38 <lambdabot> bzzt
23:10:40 <Pseudonym> Generally I find it easier to use threads.
23:10:47 <lispy> @index select
23:10:48 <lambdabot> Text.Html
23:11:23 <lispy> Pseudonym: yeah, there's definitely something to be said for both approaches
23:11:27 <lispy> @index epoll
23:11:29 <lambdabot> bzzt
23:15:22 <lispy> i've checked all of System.Posix and I don't see what I need
23:15:39 <Pseudonym> I just did, and I can't see it either.
23:16:12 <Pseudonym> OK, poll not yet implemented.
23:17:20 <lispy> theer is hReady
23:18:16 <lispy> maybe threads would be best, i was worried about scalability
23:18:40 <lispy> epoll/select tend to add the least overhead
23:18:52 <lispy> at least in terms of memory
23:20:17 <tuomov> select is conceptually simple, threads not so much
23:20:53 <lispy> well, i think that depends on how you use them
23:21:13 <lispy> for something like a webserver where there is no shared state between connections, threads arenice
23:24:43 <sebell> Not sure if this is a question for #emacs, but this is my first time using haskell-mode and emacs seems to continuously indent each new line instead of indenting appropriately to the code. Any ideas?
23:25:38 <lispy> sebell: yeah, it's a known issue
23:25:49 <lispy> sebell: to get it right, emacs needs a haskell parser
23:28:19 <sebell> lispy: Proper indentation would seem like a common request then, is there some documentation you could point me towards?
23:29:01 <lispy> what would this documentation describe?
23:30:00 <lispy> sebell: there are several problems with haskell-mode, but as far as i know, they are maintained in the folklore
23:31:13 <lispy> sebell: M-q doesn't line wrap comments correctly, indent is useless (and quite annoying), block comment/uncomment is not useable.  I don't know of any others...
23:31:34 <lispy> Oh, it doesn't always get the syntax coloring rigt
23:32:01 <lispy> i love emacs, but the devs are holding it back
23:32:50 <lispy> RMS doesn't want any fundamental changes to go into the code
23:33:28 <Korollary> long live Yi
23:33:35 <sebell> lispy: What fundamental changes are required? Emacs tends to handle other languages smoothly
23:33:44 <lispy> i don't know how the xemacs group feels, but as time goes by i'm leaning more and more towards having anoother fork (xx-emacs?) but that just hurts everybody.  Fortunately, dons is working on yi
23:33:57 <lispy> sebell: it needs a full parser
23:34:19 <lispy> but the current architecture wouldn't support it
23:34:58 <lispy> elisp could be greatly improved by becoming scheme or becoming higher performance.  Threads would be wonderful.  A lot of modern elisp "apps" need threading
23:35:02 <sebell> lispy: Ah. What is nXML doing with RelaxNG?
23:35:18 <lispy> what?
23:35:24 <lispy> what is nxml and relaxng?
23:37:22 <lispy> i gotto ag
23:37:26 <sebell> lispy: Some CL guys are working on Climacs... but it seems that development is rather slow. nXML is an XML mode that validates using the RelaxNG schema language... I'm assuming the parser is written in Elisp
23:37:26 <lispy> good night!
23:37:34 <sebell> lispy: good night, thanks for your help
23:37:52 <lispy> sebell: yeah, climacs is interesting, but i'm not holding my breath :)
23:38:13 <lispy> sebell: and climacs fixes a lot of the things i have mentioned above when compared to emacs
23:38:18 <sebell> lispy: Especially their parser
23:38:23 <lispy> yup
23:38:37 <lispy> anyway, gotta sleep
23:38:40 * lispy waves
