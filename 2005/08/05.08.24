00:00:32 <Itkovian> well, which one then
00:00:57 <boegel> hey www2
00:03:40 <FrederikEaton> Itkovian: UCL, gatsby unit, msc in intelligent systems
00:03:48 <FrederikEaton> i guess it's not famous
00:04:07 <FrederikEaton> but london will be fun. there's some haskell guy at imperial right?
00:04:09 <Itkovian> hmm ...
00:04:22 <Itkovian> I've no idea
00:05:27 <Heffalump> gatsby unit?
00:05:37 <Heffalump> Keean Schupke is at Imperial, IIRC
00:05:43 <Heffalump> but most of the PL work there is Java, I think.
00:05:46 <liyang> (Who?)
00:05:56 <Heffalump> type class hacker, I think
00:06:24 <liyang> Oh. Not come across him. And I've been trying to look for some...
00:06:33 <lispy_> Heffalump: i couldn't reduce the test case and reproduce the crash
00:06:56 <lispy_> Heffalump: but....that may have been partially cased by changing machines
00:06:59 <liyang> SLURP at IC mostly does Java-like languages.
00:07:03 <lispy_> and trying to automate the test case
00:07:40 <liyang> (Which is why /me is moving to Nottingham. :p)
00:10:00 <Heffalump> lispy_: oh well
00:11:23 <boegel> FrederikEaton: 'london will be fun'
00:11:30 <boegel> if you like bombs, yeah sure
00:12:06 <liyang> boegel: pfft.
00:12:18 <liyang> If you can't take a bomb or two, what kind of man are you?
00:13:13 <boegel> liyang: I'm just saying it not fun...
00:13:38 <boegel> @seen dcoutts
00:13:38 * liyang finds it rather fun actually
00:13:38 <lambdabot> dcoutts is in #haskell. Last spoke 8 hours, 6 minutes and 12 seconds
00:13:38 <lambdabot> ago.
00:13:53 <boegel> liyang: you're the man behind it all ?
00:14:03 <liyang> Put it this way, you're much more likely to be killed in a car accident.
00:14:47 <boegel> true, but I think the terrorists are getting closer and closer to their goal: frightening people
00:14:56 <Heffalump> bah, liyang got there first :-)
00:15:02 <liyang> *shrug*
00:15:06 <liyang> I'm not.
00:15:09 <Heffalump> boegel: frightening poor ignorant foreigners, maybe :-)
00:15:16 <Itkovian> http://www.google.com/talk/
00:15:28 <Heffalump> London's been subjected to bombing campaigns before
00:15:35 * liyang hands boegel a warm cuppa tea.
00:15:57 <liyang> That'll fix everything.
00:16:17 <liyang> (Plus I spent the best part of my teenage years in Belfast. ;)
00:16:21 * Itkovian l.ikes the cairo lsystem shot
00:16:48 <boegel> Itkovian: where ?
00:17:17 <Itkovian> http://www.haskell.org/~duncan/cairo/lsystem-demo/LSystem.png
00:17:33 <liyang> FrederikEaton: it looks like Keean Schupke currently works for the computer support group in the Dept. of computing. :-/
00:17:39 <boegel> Itkovian: wow :) where did you get that ?
00:17:54 <boegel> they adjusted the line thickness too
00:18:20 <boegel> Heffalump: I believe people in London are more carefull too now, atleast for a while
00:19:16 <liyang> Having said that, I'm planning to get out of London as soon as I can, mainly because it's a shithole. :)
00:19:41 <FrederikEaton> liyang: weird
00:20:02 <liyang> i.e. he's probably not doing anything academic at the minute.
00:20:14 <boegel> liyang: now, that doesn't makes sense now, does it ?
00:20:38 <liyang> boegel: hm?
00:21:14 <liyang> I prefer smaller cities. Right now it takes me > 1 hour to get into college... that's one way.
00:21:18 <FrederikEaton> i hear the terrorists are inventing a new car without airbags
00:21:29 <FrederikEaton> that freaks me out
00:21:43 <boegel> liyang: it takes me about the same, and I live in a small town (compared to London)
00:21:53 <boegel> FrederikEaton: ?
00:22:14 <liyang> boegel: I'd aim for something smaller than the town you're living in then. :)
00:22:23 <tuomov> I takes me 5 minutes to cycle to the uni, or city centre.. but I live in a 80-90kpeople town
00:22:40 <liyang> Yeah. Cambridge was nice. :o)
00:23:07 <liyang> (~100-150k, I think.)
00:23:23 <boegel> my town is 10-15k people, so quite small
00:23:35 <tuomov> the downside is that there's much less gigs and other cultural events in a town of this size than even a twice as big one
00:24:04 <FrederikEaton> liyang: where are you?
00:24:33 <liyang> FrederikEaton: right now? MAC course at Imperial. Living at E15 1EN.
00:24:54 <FrederikEaton> MAC?
00:25:02 <liyang> MSc in Adv. Computing
00:25:02 <FrederikEaton> like for ethernet cards?
00:25:04 <FrederikEaton> oh
00:25:10 <liyang> um. No. :)
00:25:36 <FrederikEaton> so, is it going to take me an hour to get to school?
00:25:55 <liyang> Depends on the level of accommodation you demand...
00:26:22 <FrederikEaton> does the tube have 802.11?
00:26:45 <liyang> I have a rather nice flat here, but I'm paying Â£112.5 a week, not including utility bills.
00:26:57 <liyang> FrederikEaton: har har de har.
00:27:00 <liyang> Very funny.
00:27:25 <liyang> Get yourself a notebook and a pen / pencil. :)
00:27:35 <liyang> Or a copy of the Guardian.
00:28:05 <boegel> liyang: or a nice book
00:28:11 <boegel> or some people to talk with :p
00:28:41 <boegel> @seen xerox
00:28:42 <lambdabot> xerox is in #haskell. Last spoke 8 hours, 22 minutes and 6 seconds
00:28:42 <lambdabot> ago.
00:28:50 <tuomov> airplanes keep dropping from the skies
00:29:07 <liyang> You can get flats closer to the center but it'll be tiny and/or in rather dodgy areas.
00:29:25 <boegel> tuomov: yeah, I noticed too, two already this week if I'm correct
00:29:37 <liyang> Where's the second one?
00:29:40 <Itkovian> what goes up, must come down.
00:29:51 <tuomov> haven't counted, but some plane dropped in peru yesterdya
00:30:09 <liyang> Oh. :-/
00:30:16 <boegel> lispy: switzerland and peru (or india?)
00:30:46 <liyang> Athens had one; not sure if you're counting that as this week or not.
00:30:49 <boegel> http://www.cnn.com/2005/WORLD/americas/08/23/peru.crash.chronology.reut/index.html
00:30:54 * liyang disappears
00:31:07 <tuomov> a helicopter crashed into the sea too between finland and estonia recently, don't know if that's been covered in the international news media
00:31:23 <tuomov> killed everyone
00:31:47 <Heffalump> I saw something about it.
00:32:09 <boegel> tuomov: how many people fit in a helicopter ?
00:32:42 <tuomov> was there 14 in total or 14 plus two pilots
00:32:59 <boegel> damn, what wrong with the skies lately
00:33:18 <boegel> maybe it's terrorists sabotaging each plane :p
00:33:19 <sieni> the crash also killed 5 board members of the finnish centre of occupational safety
00:35:40 <Heffalump> presumably they were travelling in the course of their job?
00:37:03 <sieni> I'm pretty sure that was the case
00:37:29 <araujo> In less than 2 weeks 2 planes crashes
00:37:52 <boegel> araujo: yeah, that's what CNN says
00:37:56 * araujo lives near of one of the crashing place
00:38:14 <boegel> but in August there were 4 already (big ones), that's quite a lot
00:38:35 <araujo> Here 160 people died.
00:38:50 <araujo> 152 french, 8 Colombians
00:39:25 <araujo> They are using ADN to identify the bodies
00:39:30 <Heffalump> DNA
00:39:39 <araujo> Oh, yes, i said it in spanish
00:40:02 <Heffalump> hmm, I need to organise a business trip today. Perhaps I'll go for the train :-)
00:40:26 <araujo> The amazing thing is that very same airline already had other crahs months ago
00:40:31 <araujo> 8 people died
00:40:54 <boegel> Heffalump: try to estimate how many flights there were in August, and then you can calculate the chance you'll crash... I bet you'll go for the plane
00:41:23 <Heffalump> boegel: well, noone's ever died on Eurostar, AFAIK.
00:41:32 <Heffalump> So it's got a better accident record than the plane.
00:41:33 * araujo wonders if nobody mantains airlines anymore
00:41:41 <Heffalump> Not that I was serious about avoiding planes cos of the risk
00:41:58 <Heffalump> I'd be more likely to get blown up in London getting to the airport, I think.
00:42:13 <Heffalump> (and they're both still far less likely than dying in a car crash)
00:42:24 <boegel> Heffalump: and what if terrorists decide to bomb the Eurostar ? :) there's little security checks there afaik
00:42:49 <Heffalump> ah, but past performance is clearly a perfect indicator of future risk.
00:42:55 <Heffalump> Noone's bombedit before, so noone ever will.
00:43:00 <Heffalump> s/bombedit/bombed it/
00:43:19 <boegel> Heffalump: yeah right :) and they've been flying with planes into buildings for decades
00:44:18 <Heffalump> absolutely, I think a plane hit the Empire State Building in the 30s.
00:44:46 <boegel> Heffalump: by accident ;)
00:45:15 <Heffalump> how can you prove the WTC wasn't an accident? :-p
00:45:19 <boegel> "n 1945, the Empire State Building withstood the impact of a U.S. Army Air Corps B-25 bomber. "
00:45:39 <boegel> and it was an accident, so that doesn't count :)
00:46:02 <tuomov> maybe the terrorists saw a movie of that and acted on it!
00:46:17 <tuomov> movies are bad! must stop them!
00:46:33 <Heffalump> and Tom Clancy books!
00:49:50 * boegel decides to bomb Hollywood
00:51:44 <stefanw> The macro for GHC is __GLASGOW_HASKELL__ and not __GLASGOW_HASKELL, isn't it?
00:54:45 <Lor> Does anyone else thing it's fishy that in unblock (do foo; block bar), ghc's rts optimizes away the stack frames at the end that first unblock and then again block async exns?
00:54:56 <earthy> according to http://www.haskell.org/ghc/docs/latest/html/users_guide/options-phases.html#c-pre-processor it is, stefanw
00:57:44 <stefanw> then that's the reason why HUnit does catch exception thrown in testcase: It uses the line #if defined(__GLASGOW_HASKELL) || defined(__HUGS__) to check wether to import System.IO.try or Control.Exception.try. BUG!!
00:59:02 <dons> :/
01:00:07 <dons> paprika$ find fptools/libraries -type f -exec grep  -hl 'GLASGOW_HASKELL[^_]'  {} \;
01:00:11 <dons> fptools/libraries/HUnit/Test/HUnit/Lang.lhs
01:00:13 <dons> fptools/libraries/network/Network/Socket.hsc
01:00:38 <dons> paprika$ find fptools/libraries -type f -exec grep 'GLASGOW_HASKELL[^_]'  {} \;
01:00:41 <dons> #if defined(__GLASGOW_HASKELL) || defined(__HUGS__)
01:00:44 <dons> #if defined(__GLASGOW_HASKELL) || defined(__HUGS__)
01:00:45 <dons> so it's just Lang.lhs
01:00:47 <dons> #endif /* __GLASGOW_HASKELL */
01:01:43 <dons> evil cpp
01:02:10 <stefanw> hey dons, you don't use h4hs!
01:03:05 <dons> oh :/ I need better regex support in filter ;) that's partially done
01:03:07 <stefanw> I don't think cpp is evil, the author of HUnit just hasn't tested his own testing framework!
01:03:30 <dons> oh. double plus bad
01:04:00 <dons> it is evil in that you can this whole defined/undefined symbol thing is dodgy
01:04:35 <dons> you patching, or should I stefanw?
01:04:56 <nekoreppie> it's raining men!
01:04:57 <nekoreppie> hallelujah!
01:05:07 <Itkovian> erm, no
01:05:28 * boegel calms down nekoreppie 
01:05:48 <stefanw> I think you know better how to do a CVS patch ;-)
01:06:17 <dons> done. but it has a sourceforge page.
01:06:30 <dons> i wonder if i should just cvs commit, or submit it to the author. hmm
01:06:52 <nekoreppie> do both!
01:06:54 * dons decides sourceforge
01:07:13 <stefanw> but I guess then it never makes it into GHC
01:07:28 <stefanw> and it's only relevenat to GHC
01:07:47 <dons> ok, in that case we post to libraries@ I think
01:08:19 <dons> wait for feedback, then commit
01:10:56 <dons> sent
01:13:37 <stefanw> thanks
01:40:31 <boegel> yo dblhelix
01:40:40 <dblhelix> hi boegel!
01:42:20 <dblhelix> boegel: have you already narrowed down the subject of your PhD research?
01:44:32 <boegel> dblhelix: yeah, pretty much
01:45:06 <dblhelix> so, what will you be doing for the next few years?
01:45:21 <boegel> dblhelix: performance estimation of programs, and more in perticular for programs for which you don't have a hardware platform at your disposal
01:45:53 <Heffalump> using what sort of technique?
01:46:02 <dblhelix> sounds cool
01:46:11 <boegel> using a database of measured benchmark phases, machine learning, clustering... stuff like that
01:46:14 * dblhelix knows nada about performance estimation
01:46:23 <boegel> neither do I :)
01:46:39 <boegel> that's why it's quite a challenge, it's a whole new world opening up for me
01:46:57 <Heffalump> this paper at LCTES was quite cool: http://doi.acm.org/10.1145/1070891.1065921
01:46:58 * boegel likes challenges
01:47:09 <dblhelix> boegel: well, lots of reading to do then, the next couple of months, I guess
01:48:32 <boegel> Heffalump: sounds cool yeah
01:49:09 <boegel> dblhelix: well, espacially trying to get some money form the goverment for my research, defending my proposal in front of a jury and such
01:49:14 <boegel> and reading, yeah, lot's of it :)
01:49:21 <boegel> s/lot's/lots
01:49:25 <dcoutts> boegel!
01:49:46 <boegel> I'll be moving too probably in the next few months
01:49:49 <boegel> execiting times ...
01:50:23 <boegel> dcoutts ! how's Cairo doing with HaskLS ? I saw the cool screenshot of the tree already...
01:50:25 <dcoutts> boegel, want to see some progress on the L-system stuff?
01:50:34 <dcoutts> oh, you saw it already
01:50:36 <dcoutts> http://www.haskell.org/~duncan/cairo/lsystem-demo/LSystem.png
01:51:13 <boegel> looks really cool, much smoother than with OpenGL
01:51:31 <dcoutts> I'm using semi-tranparent green lines
01:51:47 <dcoutts> so where they overlap it gets darker
01:52:06 <boegel> dcoutts: I see, it's really code
01:52:14 <boegel> and the code is nice too, short and elegant :)
01:52:24 <boegel> any more pics coming up ?
01:56:08 <boegel> hey nothingmuch
02:00:34 <dcoutts> boegel, yeah, the code is pretty short
02:01:13 <dcoutts> it follows the cairo drawing model pretty well, which makes it short
02:01:43 <dcoutts> the save/restore saves the current transformation matrix. We need to manually save/restore the current point however.
02:01:58 <dcoutts> so that deals with the '[' ']' bits easily
02:01:59 <boegel> dcoutts: I see
02:02:31 <dcoutts> and +/- just correspond to rotate +n / rotate (-n)
02:02:59 <dcoutts> boegel, do you have any other nice grammar rules I can try?
02:03:49 <boegel> dcoutts: I had a whole bunch of them... have you tried the ones in LSystem.lhs ?
02:04:38 <Itkovian> dcoutts: you can find a bunch on the wikipedia page about lsystems iirc
02:04:40 <boegel> http://www.coscorrosa.com/programs/lsysexp/source/latest/src/builtin.h -> enough examples ? :)
02:05:09 <boegel> dcoutts: the ones on their sometimes rely on other things I don't support yet though, but there are some ice examples in there
02:05:55 <dcoutts> ok, I'll try some of them. Thanks.
02:08:59 <boegel> np, have fun (and be sure to show us a lot of examples) :)
02:14:38 <Itkovian> dcoutts: I could look at the parser during lunch and send you the darcs patch if I get it in a state I'm not too ashamed of?
02:15:13 <boegel> dcoutts: yeah, that might speed up things for you
02:20:53 <dcoutts> Itkovian, oh a parser for the L-system spec tuples? That'd be cool
02:21:26 <boegel> dcoutts: he was working on it, and already send me a patch before I went on vacation, but apparently he not pleased with the result :)
02:28:54 <boegel> damn, it almost noon again, times flies
02:28:57 <boegel> s/times/time
02:29:05 <Itkovian> lunch time!
02:29:07 <Itkovian> yehaay!
02:31:35 * boegel gives Itkovian a cookie
02:31:54 * Itkovian just had a Mars
02:35:47 <boegel> just before lunch, tsss
02:40:03 * Itkovian was starving
02:41:52 <xerox> 'morning !!!
02:42:04 <boegel> yo xerox
02:42:13 <boegel> seen the Cairo screenshot ?
02:42:32 <xerox> Indeed, dcoutts had it in a couple of hours last night, hehe.
02:44:07 <boegel> xerox: nice :) you can get nice images in a very short time with L-systems, just as with raytracing :)
02:48:28 * xerox spent days on hundreds of same-looking lines of code - yay
02:49:16 <wilx> Same looking? :)
02:49:27 <wilx> Sounds like you need to do some refactoring :)
02:49:36 <xerox> {#fun ...#}
02:49:36 <xerox> {#fun ...#}
02:49:38 <xerox> ..
02:50:21 <wilx> Some FFI annotations?
02:50:49 <xerox> Yep
02:51:16 <xerox> ..with some not-so-well-documented syntax inside for "complex" marshallers, and so on.
02:54:16 <Lemmih> Damn. I forgot my appointment with the drafting center some days ago /-:
02:55:49 <xerox> :-(
02:55:59 * xerox hunts for food
03:01:26 <Spark> "I.T. is to computer science what P.E. is to biology"
03:03:26 <dons> oh, i like that :)
03:03:44 <xerox> P.E.?
03:03:47 <takuan> Spark: PE being?
03:03:51 <Spark> sigh :p
03:03:52 <dons> Physical Education, I think
03:03:53 <Spark> yeah
03:03:58 <Spark> little kids running around a field
03:03:59 <dons> i.e. sport at school
03:04:02 <Spark> while a fat teacher blows a whistle
03:06:27 <dcoutts> yeah, I initially read that as Partial Evaluation, and was confused :-)
03:06:59 <dons> heh
03:10:38 <Itkovian> power break
03:10:52 <Itkovian> well, the ups broke down I was told
03:20:27 <Itkovian> another proof of the old saying "where there is a desire, there is a way" http://news.bbc.co.uk/2/hi/middle_east/4178804.stm
03:27:47 <stefanw> dons, in your Process library, is their a way to get the exit status of the program?
03:43:53 <dons> oh, there should be if there isn't
03:44:47 <dons> small tweak only is needed to return the value of waitForProcess
03:45:05 <dons> rather than the pid, which is already dead anyway
03:51:34 <stefanw> ok, thanks
03:52:02 <dons> just committing this patch to h4sh now, if you want to grab it from there.
03:52:31 <dons> give me 60 seconds...
03:53:03 <xerox> tic tac tic tac
03:53:45 <boegel> dcoutts: any now screenshots ?
03:54:25 <stefanw> no problem. I hope I never need to look at the exit code. I'm generating some code that is then parsed by Moscow ML. Hopefully, the generated code is always correct ;-)
03:54:40 <stefanw> So that Moscow ML never fails
03:54:58 <dons> Wed Aug 24 20:51:53 EST 2005  Don Stewart <dons@cse.unsw.edu.au>
03:54:59 <dons>   * popen now returns ExitCode, idea from stefanw
03:55:01 <dons> in h4sh
03:55:02 <dcoutts> boegel, sorry, I was looking at something else. I've got the program accepting L-system tuples on stdin now so it'll be easier to experiment
03:55:47 <stefanw> thanks
03:56:25 <boegel> dcoutts: ok, np :) I was just wondering
03:58:31 <dons> ok, Cabal hackers: h4sh generates 30+ executables, all of which depend on a module, FastPackedString. now, when each executable is compiled, FastPackedString gets recompiled each time :/ how can I have it compiled only once, short of packaging it up in its own library
03:59:00 <dons> Lemmih, ping
04:00:32 <Lemmih> dons: pong.
04:01:08 <Lemmih> Compiling it once wouldn't be safe.
04:01:19 <dons> do you have any idea on how to solve my little problem?  (it really really slows down the h4sh build time when FastPackedString gets compiled 32 time..)
04:01:45 <dons> hmm. really?
04:02:17 <Lemmih> Can't remember why but I had the same problem with cabal-get.
04:02:36 <stefanw> make a package out of FastPackedString?
04:03:02 <boegel> Lemmih: how should it not be safe ? compilation won't change now would it ?
04:03:29 <dons> stefanw, that's the sledgehammer solution, since it's just one module. also, it means it has to be installed before i can build h4sh.
04:04:13 <stefanw> can't you have some sort of "local" module that you don't need to install?
04:04:51 <dons> oh! can i pass a -package-conf path, like the pre-Cabal days?
04:05:18 <dons> if so, then an unregistered package might work
04:06:39 <xerox> h4sh uses Cabal-1.0 ?
04:07:07 <dons> yep
04:10:09 * boegel dances around the table
04:12:08 * sieni does not dance around the table
04:12:30 <Lemmih> boegel: If two executables provides module A then placing the .hi files in the same directory would screw things up, I think.
04:12:53 <boegel> Lemmih: hmm, I see
04:13:45 <dons> hmm. but that's not my problem is it? i have n modules depending on module A, not providing it  (?)
04:14:16 <Lemmih> dons: Yeah, but Cabal doesn't know that.
04:16:22 <dons> ok.
04:16:59 * Lemmih plays with the thought of using ghc-src to do dependency analysis.
04:17:09 <dons> well, at least my .cabal file is 261 lines long, that must be a record
04:18:47 <ozone> dons: !
04:19:35 <ndm_> @seen shapr
04:19:36 <lambdabot> I saw shapr leaving #haskell 22 hours, 30 minutes and 48 seconds ago.
04:22:26 <boegel> hmm, he's probably looking for an appartment or something... I hope he'll be able to stay in sweden
04:22:46 <ndm_> well since he's gone, maybe i'll float the idea someone gave me to the rest of you lot
04:22:57 <ndm_> when you search for something in hoogle, say map
04:22:58 <boegel> ndm_: shoot !
04:23:18 <ndm_> you get: http://www-users.cs.york.ac.uk/~ndm/hoogle/generated/Prelude.f.map.htm
04:23:32 <ndm_> the problem is many of them are incomplete, and submitting patches is too much hard work to get it done
04:23:42 <ndm_> so the solution is possibly to havea  wiki entry for each one
04:24:39 <ndm_> what do people think of that?
04:24:42 <dons> is it too weird to write a script to generate these entries?
04:24:48 <dons> s/weird/hard/
04:24:54 <ndm_> dons, not too hard - thats whats done now
04:25:00 <ndm_> but its a lot harder for people to contribute
04:25:06 * Lemmih leaves for his appointment with his guidance-counselor.
04:25:14 <ndm_> sort of in depth docs and examples for every single function in GHC
04:25:40 <ndm_> the haddock stuff is a nice intro, but it needs more for people to begin using a function usually
04:25:48 <dons> ah, if its contribution youu want, then a wiki sounds reasonable. also it strikes me that you should use the haddock comments too
04:26:01 <ndm_> i went from Zvon first
04:26:09 <ndm_> i intend to move to having the haddock at the top
04:26:16 <ndm_> then contributions below it
04:26:29 <Itkovian> dcoutts: seems like there still is a bit of work to be done on the parser. getting to it asap
04:26:45 <dons> ok, because the haddock docs often have examples
04:26:50 <dons> i.e. -- | 'map' @f xs@ is the list obtained by applying @f@ to each element
04:26:50 <dons> -- of @xs@, i.e.,
04:26:50 <dons> --
04:26:50 <dons> -- > map f [x1, x2, ..., xn] == [f x1, f x2, ..., f xn]
04:26:50 <dons> -- > map f [x1, x2, ...] == [f x1, f x2, ...]
04:26:58 <ndm_> dons, yep, ut not in depth enough
04:27:00 <dcoutts> Itkovian, ok, no probs
04:27:13 <dons> right. wiki sounds reasonable.
04:27:32 <dcoutts> Itkovian, what operations do you allow in your input lang?
04:27:34 <ndm_> dons, yep - is there an existing wiki that is appropriate for this?
04:27:47 <ndm_> i was wondering about hawiki, but maybe it should be a special purpose one
04:28:03 <vikasg> is there an easy way to compile Fudgets?
04:28:14 <dons> i think the hawiki would be ok, not sure, since i don't maintain it ;)
04:28:30 <ndm_>  hence my desire to speak to shapr :)
04:28:31 <dons> specialise is also good, if you want to set it up
04:28:42 <ndm_> my ability to set up a wiki is none...
04:29:53 <ndm_> ok, had better go now - will talk to shapr when he is next around
04:29:53 <basti_> hi
04:29:59 <ndm_> thanks for the comments
04:38:08 <vikasg> trying to build Fudgets with ghc6.4 produces 'package lang not available (according to ghc-pkg)'. Any ideas?
04:44:13 <Itkovian> dcoutts: for now, all those in boegels' examples.
04:44:30 <dcoutts> Itkovian, ok because my language is only 2D -)
04:46:33 <boegel> dcoutts: should be no problem I guess, there should be a way to support both 2D and 3D using only 1 parser
04:47:20 <dcoutts> right, just drop 4 operations
04:58:05 <boegel> dcoutts: yep :) well, just throw an error when those operations are used in the rules, when you know your working in 2D (perhaps by using an extra keyword in the input language)
04:59:03 <dcoutts> boegel, actually we can just ignore any unknown operations
04:59:28 <xerox> Maybe it makes more difficult to track errors?
05:00:01 <dcoutts> xerox, oh, but '[' ']' need to be nested correctly
05:00:16 <boegel> dcoutts: also true, but maybe you'll get something the user isn't expecting, and he'll just go "What a crappy program, it doesn't work like it should !"
05:00:25 <dcoutts> hmm maybe
05:00:46 * boegel always tries to make his program idot-proof and user-friendly
05:00:49 <dcoutts> but it also allows you to use intermediate productions
05:01:10 <boegel> basically because I am an user too, and also a idiot :)
05:01:11 <dcoutts> I think other l-system views ignore unknown letters
05:01:29 <boegel> dcoutts: oh, letters, yeah, but not operations :)
05:01:45 <dcoutts> boegel, how do we distinguish? case?
05:02:13 <boegel> dcoutts: you can use H,T,R, and such as intermediate symbols, but problably not _ , ), ! , ...
05:02:18 <boegel> dcoutts: isChar ? :D
05:02:22 <dcoutts> right, ok
05:02:31 <Itkovian> "make something fool-proof and only fools will use it"
05:02:34 <boegel> @type isChar
05:02:35 <dcoutts> http://spanky.triumf.ca/www/fractint/lsystem_type.html
05:02:39 <lambdabot> bzzt
05:02:43 <dcoutts> I'll probably follow these rules
05:02:44 <boegel> @index isChar
05:02:45 <lambdabot> bzzt
05:02:49 <boegel> meh ?
05:03:00 <dcoutts> @type Char.isChar
05:03:01 <lambdabot> bzzt
05:03:09 <dcoutts> @type Char.isAplha
05:03:11 <lambdabot> bzzt
05:03:15 <dcoutts> @type Char.isAlpha
05:03:16 <lambdabot> Char -> Bool
05:03:26 <boegel> oh, ok :)
05:03:54 <boegel> dcoutts: what the difference between F and D on that page (and between G and M ?)
05:04:14 * Itkovian tries to figure out the workings of a kernel module he wrote two years ago
05:04:47 <boegel> Itkovian: you did write some documentation with it, did you ?
05:05:00 <Itkovian> uh? what's that?
05:05:07 <Itkovian> the code documents itself
05:05:16 <boegel> Itkovian: tssk
05:05:27 <Itkovian> "real programmers don't write docs, if it was hard to write, it should be hard to understand"
05:05:44 <dcoutts> boegel, yeah, not sure
05:05:52 <dcoutts> "use the following commands which keep a completely separate angle pointer which is specified in degrees."
05:10:35 <boegel> dcoutts: oh, so F and G uses the default angle, and D and M the other (incremented) one ?
05:11:09 <dcoutts> I guess so, but why I can't see
05:11:48 <xerox> Yoda will you be :P
05:13:18 <dcoutts> xerox, :-) think you right I do
05:15:42 <Itkovian> recompile must I
05:17:24 <dcoutts> bet you I has some net denizen written a Yodaeriser have they
05:17:49 <xerox> Parse Error.
05:18:01 <dcoutts> that should: "bet you I do ..."
05:18:14 <dcoutts> bet you I do some net denizen written a Yodaeriser have they
05:18:22 <Itkovian> have they?
05:18:31 <dcoutts> I bet you they have
05:18:47 <xerox> Parse Error.
05:18:53 <dcoutts> hah!
05:19:13 <dons> @remember Itkovian "real programmers don't write docs, if it was hard to write, it should be hard to understand"
05:20:03 <boegel> @remember boegel "Hello"
05:20:03 <boegel> :D
05:20:16 * boegel is making himself famous
05:20:27 <dcoutts> @quote boegel
05:20:28 <lambdabot>  "Hello"
05:20:29 <dons> @karma- boegel
05:20:31 <lambdabot> boegel's karma lowered to -1.
05:20:33 <dons> :P
05:20:34 <Itkovian> haha
05:20:35 <basti_> @quote basti_
05:20:36 <lambdabot> basti_ hasn't said anything memorable
05:20:38 <boegel> @quote Itkovian
05:20:38 <basti_> :(
05:20:39 <lambdabot>  "real programmers don't write docs, if it was hard to write, it
05:20:39 <lambdabot> should be hard to understand"
05:20:45 <boegel> @quote dons
05:20:46 <lambdabot>  I don't mind autoconf, except for the fact that it's stupid and
05:20:46 <lambdabot> ugly
05:20:53 <Lor> Why does it cut lines?
05:20:55 <dcoutts> that's a nice one
05:20:55 <dons> Cabal forever!
05:20:59 <Itkovian> that's not really my own quote, you know
05:20:59 <boegel> @quote Lemmih
05:21:00 <lambdabot> Lemmih hasn't said anything memorable
05:21:13 <boegel> @quote goron
05:21:14 <lambdabot> goron hasn't said anything memorable
05:21:18 <boegel> @quote shapr
05:21:19 <dons> Itkovian , i guessed so, hence i kept the ""
05:21:19 <lambdabot>  I've tried to teach people autodidactism, but I've realized they
05:21:19 <lambdabot> have to learn it for themselves.
05:21:25 <Itkovian> @quota shapr
05:21:26 <lambdabot>  Academics are continually chewing pieces off of impossible and
05:21:26 <lambdabot> making them merely difficult.
05:21:30 <basti_> i remember shapr putting my ghc error message haiku in there, but it seems lost :/
05:21:37 <dons> @quote basti
05:21:38 <dcoutts> Itkovian, yeah, I've seen that one before, who said it originally?
05:21:39 <lambdabot> basti hasn't said anything memorable
05:21:45 <Itkovian> I've no idea
05:21:52 <goron> @quote dons
05:21:54 <lambdabot>  I don't mind autoconf, except for the fact that it's stupid and
05:21:54 <lambdabot> ugly
05:21:55 <Itkovian> I used to have a whole shitload of those
05:22:01 <boegel> @quote Phillipa
05:22:02 <lambdabot> Phillipa hasn't said anything memorable
05:22:07 <dons> "Snow doeth lay upon the lands. Even with cunning newtype; deriving the newtype is recu
05:22:08 <Itkovian> impossible
05:22:10 <dons> rsive. Great leaders brings less pain.\"
05:22:13 <boegel> yeah right :) we all know that's a lie lambdabot
05:22:16 <xerox> @quote lambdabot
05:22:17 <lambdabot> lambdabot hasn't said anything memorable
05:22:22 <dons> @quote <basti_>
05:22:22 <Itkovian> idd
05:22:23 <lambdabot>  "Snow doeth lay upon the lands. Even with cunning newtype; deriving
05:22:23 <lambdabot> the newtype is recursive. Great leaders brings less pain."
05:22:27 <basti_> dons: ahhh
05:22:29 <basti_> dons: cool thanks
05:22:29 <dons> someone put it in with the wrong tag
05:22:30 <xerox> @remember lambdabot "lambdabot hasn't said anything memorable"
05:22:35 * basti_ nods
05:22:43 <Itkovian> lol
05:22:49 <dcoutts> @quote lambdabot
05:22:50 <lambdabot>  "lambdabot hasn't said anything memorable"
05:22:57 <dcoutts> :-) silly!
05:23:01 <goron> What do you use to search on a remote filesystem?
05:23:02 <dons> @quote SyntaxNinja
05:23:03 <lambdabot>  I think that the compiler authors will fly here from england just
05:23:03 <lambdabot> to kill me if I did that
05:23:09 <boegel> @forget everything
05:23:09 <lambdabot> Unknown command, try @listcommands.
05:23:10 <boegel> :D
05:23:17 <ozone> @quote ozone
05:23:17 <lambdabot> ozone hasn't said anything memorable
05:23:19 <xerox> ^_^
05:23:23 <ozone> yay, just the way i like it
05:23:28 <dons> boegel is bad today
05:23:31 <Itkovian> goron: google
05:23:32 <dcoutts> @quote dcoutts
05:23:33 <lambdabot> dcoutts hasn't said anything memorable
05:23:38 <xerox> I didn't said anything memorable apart "@remember lambdabot "lambdabot hasn't said anything memorable""
05:23:39 <dcoutts> phew!
05:23:41 <dons> @quote ghc
05:23:42 <lambdabot>  Use -fglasgow-exts to allow multi-parameter classes
05:23:43 <boegel> @remember ozone Freeze!
05:23:51 <boegel> @quote ozone
05:23:51 <lambdabot>  Freeze!
05:24:00 <dons> boegel, stop polluting the quote-space please
05:24:00 <goron> Itkovian: I only see stuff for Linux, and Fuse seems very immature.
05:24:00 <boegel> who gets this one ? :)
05:24:20 <goron> Itkovian: So, I did search.
05:24:25 <boegel> dons: sorry :(
05:24:41 <ozone> boegel: the correct response to dons is "sorry captain tightpants!"
05:24:43 <dcoutts> @remember dons boegel, stop polluting the quote-space please
05:24:49 <dons> bah!
05:24:58 <dcoutts> @quote dons
05:24:58 <lambdabot>  I don't mind autoconf, except for the fact that it's stupid and
05:24:58 <lambdabot> ugly
05:25:05 <dons> hehehe
05:25:06 <dcoutts> @quote dons
05:25:07 <lambdabot>  boegel, stop polluting the quote-space please
05:25:15 <dons> haha
05:25:20 <dcoutts> :-)
05:25:27 <boegel> :'(
05:25:33 <boegel> @quote dcoutts
05:25:33 <dons> mmm. quote spaces goes meta!
05:25:33 <lambdabot> dcoutts hasn't said anything memorable
05:25:51 <xerox> Yeah
05:25:53 * xerox started it!
05:26:00 <dcoutts> damn, what's boegel going to quote me on now?
05:26:12 <dons> @quote lispy
05:26:13 <lambdabot>  i just remembered this dream i had the other morning.  I was trying
05:26:13 <lambdabot> to tell my alarm clock how to snooze by using a list comprehension
05:26:21 <xerox> hahahah
05:26:25 <dcoutts> oh, that's a nice one
05:26:38 <boegel> that's one for HWN :)
05:26:38 <dons> @quote samc
05:26:40 <lambdabot>  monads are hard, let's go shopping
05:26:40 <basti_> -g-
05:27:02 * xerox rolls on the floor laughing
05:27:23 <dons> @quote autrijus
05:27:24 <lambdabot>  woot. I got larry wall started learning Haskell ;)
05:27:27 <dons> @quote autrijus
05:27:28 <lambdabot>  Mechanical and super-natty! Inspect the result and *if* happy;
05:27:28 <lambdabot> freeze, sell and get some sleep!
05:27:56 <dons> that's not autrijus, really ;) sigh, many late nights in undergrad days ended in that message :}
05:28:02 <xerox> Please translate :P
05:28:04 <dons> @quote autrijus
05:28:05 <lambdabot>  Mechanical and super-natty! Inspect the result and *if* happy;
05:28:05 <lambdabot> freeze, sell and get some sleep!
05:28:07 <dons> @quote autrijus
05:28:08 <lambdabot>  Well, ever since the monadic revolution of '98 Haskell people have
05:28:08 <lambdabot> started to do real world apps
05:28:11 <dons> @quote autrijus
05:28:12 <lambdabot>  Well, ever since the monadic revolution of '98 Haskell people have
05:28:12 <lambdabot> started to do real world apps
05:28:13 <ozone> what?  many undergrad days ended in a massage?
05:28:16 <dons> @quote autrijus
05:28:17 <lambdabot>  Well, ever since the monadic revolution of '98 Haskell people have
05:28:17 <lambdabot> started to do real world apps
05:28:23 <dons> bah. silly randomness
05:28:36 <dons> autijus says "Parrot is fine except every time I buil
05:28:37 <dons> d it, it fails"
05:28:37 <xerox> Hit the computer :P
05:29:04 <xerox> @karma paolo
05:29:05 <lambdabot> paolo has a karma of 0
05:29:11 <xerox> @karma paolo-
05:29:12 <lambdabot> paolo- has a karma of 0
05:29:34 <xerox> I thought I had some karmapoints on those nicks :)
05:29:56 <dcoutts> @karma xerox
05:29:57 <goron> The cvs server of sourceforge is ill/almost dead.
05:29:57 <lambdabot> xerox has a karma of 6
05:30:14 <xerox> \o/
05:30:18 <dcoutts> xerox, you've got plenty of karma
05:30:22 <xerox> Indeed!
05:30:38 <dcoutts> it must be all that hard work you do
05:30:48 <pirroH> @karma+ xerox
05:30:48 * dons tunes out to watch the shield
05:30:49 <lambdabot> xerox's karma raised to 7.
05:31:03 <boegel> @karma boegel
05:31:04 <lambdabot> You have a karma of -1
05:31:06 <boegel> :'(
05:31:11 <xerox> pirroH, you're waiting to do it from time :-P
05:31:14 <boegel> @karma shapr
05:31:15 <lambdabot> shapr has a karma of 0
05:31:20 <boegel> heh, that's not right
05:31:22 <xerox> Heh.
05:31:22 <goron> @karma xerox
05:31:22 <lambdabot> xerox has a karma of -1
05:31:27 <pirroH> xerox: no, indeed, it was spontaneous :)
05:31:28 <xerox> O_O
05:31:29 <goron> WTF?
05:31:41 <pirroH> overflow.
05:31:47 <dons> someone's being silly, I think
05:31:50 <xerox> Someone acting behind the scenes.
05:32:19 * Itkovian ducks
05:32:28 <dons> goron!
05:32:33 <xerox> :(
05:32:45 <dons> @karma- goron
05:32:47 <lambdabot> goron's karma lowered to 0.
05:32:56 <goron> dons: :D
05:32:57 <xerox> Today dons is punishing people
05:33:08 <dons> "we must maintain order!"
05:33:11 <xerox> Indeed
05:33:14 <xerox> And my karma level!
05:33:27 <pirroH> @karma xerox
05:33:28 <lambdabot> xerox has a karma of -1
05:33:35 <xerox> It's important for maintaining my biophysical behaviors quite good.
05:33:50 <dcoutts> dons, is that because lambdabot accepts commands in /privmsg channels?
05:33:55 <dons> yep
05:34:00 <dcoutts> ah
05:34:10 <dons> possibly @karma and maybe others shouldn't be available that way
05:34:16 <dons> interesting idea
05:34:17 <dcoutts> probably
05:34:23 <boegel> dons: please quit polluting lambdabot's karma space
05:34:41 <dons> :P
05:34:48 <dons> uh oh
05:34:49 <xerox> @karma xerox
05:34:50 <lambdabot> You have a karma of 15
05:34:52 <xerox> haha
05:34:58 <dcoutts> tut tut
05:35:01 <goron> @karma goron
05:35:08 <lambdabot> You have a karma of 0
05:35:09 <vegai> what would be a most natural on-disk data format for a Haskell program?
05:35:10 <dons> oh, boegel and goron are fighting
05:35:10 * xerox hugs dcoutts 
05:35:19 <xerox> Cool
05:35:23 <vegai> I'm thinking CSV
05:35:33 <dcoutts> vegai, show/read ?
05:35:38 <goron> How about someone giving me my karma back?
05:35:47 <xerox> goron: you need to reserve it!
05:35:50 <dons> boegel now continues to pollute the karma space
05:35:52 <vegai> dcoutts: hmm
05:36:00 <goron> xerox: I raised your karma by 9.
05:36:06 <boegel> @karma xerox
05:36:06 <lambdabot> xerox has a karma of 49
05:36:08 <boegel> woops :)
05:36:09 <dons> boegel, please stop.
05:36:10 <xerox> Sob.
05:36:14 * xerox flies
05:36:24 <dons> this is a xerox love-fest all of a sudden ;)
05:36:25 <basti_> fruit flies like a banana
05:36:28 <boegel> dons: i wasn't alone
05:36:47 * boegel feels childish now
05:37:02 <xerox> dons: someone is distributing some kind of drug or something I think
05:37:07 <dcoutts> s'ok boegel, we knew you were childish before :-)
05:37:12 <goron> @remember boegel "* boegel feels childish now"
05:37:49 <boegel> dcoutts: you did ? :'(
05:38:03 <dcoutts> xerox, I think it must be lunch time, or silly season or something
05:38:20 <dcoutts> boegel, but that's ok!
05:38:27 <xerox> dcoutts: or his L-system has taken over his brain!
05:38:43 <dcoutts> xerox, ah, that'll be it
05:39:09 <dcoutts> don't worry boegel, we love you anyway
05:39:16 <boegel> dcoutts: nah, I'm not working on HaskLS, I'm working on my project proposal
05:39:36 * boegel doesn't like to be loved by boys/men
05:40:36 <dcoutts> boegel, oh yes, what project?
05:40:59 <dcoutts> boegel, (in a platonic sort of way)
05:45:32 <basti_> great. I can now dlopen a csound plugin, get a handle to a function, type it correctly, and then make it segfault
05:47:42 <boegel> dcoutts: performance estimation of programs on non-available (but existing) hardware platforms
05:47:57 <Itkovian> hmm, if I have a list, how can I easily convert it to another list in which the original elements in put in groups of 6 sequential items
05:48:20 <Itkovian> eg.g [1,2,3,4,5,6,7,8,9,10,11,12] -> [[1,2,3,4,5,6],[7..12]]
05:48:30 <Itkovian> using h4sh, preferably
05:48:41 <Igloo> I don't think there's a standard function to do it
05:49:20 <tromp> i have a question about the c std library
05:49:32 <tromp> how does one get the size of a file?
05:49:48 <Igloo> unfoldr (\xs -> if null xs then Nothing else Just (splitAt 6 xs))   -- viva la unfoldr!
05:49:57 <Itkovian> tromp: using fseek and ftell
05:50:11 <Itkovian> Igloo: will try, thx.
05:50:18 <Itkovian> @type unfoldr
05:50:20 <tromp> thx, itkovian
05:50:23 <Igloo> @pl \xs -> if null xs then Nothing else Just (splitAt 6 xs)
05:50:27 <lambdabot> bzzt
05:50:27 <lambdabot> ap (flip if' Nothing . null) (Just . splitAt 6)
05:50:36 <Igloo> @type Data.List.unfoldr
05:50:38 <lambdabot> forall a b. (b -> Maybe (a, b)) -> b -> [a]
05:50:43 <Itkovian> tromp: you seek the end and ftell there, then fseek back to the start if you need to read stuff
05:51:02 <pejo> Itkovian, how does that work for files with holes in them?
05:51:23 <Itkovian> pejo:  what do you mean holes?
05:51:28 <Itkovian> there's no such thing afaik
05:51:30 <pejo> Itkovian, 'sparse files'.
05:51:52 * Itkovian is at loss
05:52:07 <Itkovian> from the application pov, there are no sparse files afaik
05:52:26 <Itkovian> anybody?
05:52:43 <pejo> Itkovian, true, you'll just get zeros where the holes are.
05:52:57 <Itkovian> yeah, so? they count in the file length too ...
05:53:56 <dcoutts> see what stat says
05:54:07 <Itkovian> hmm, good idea
05:54:10 <pejo> tromp, stat() returns a struct that contains st_size in unix atleast.
05:54:47 <pejo> Itkovian, I just jumped into the conversation. I thought it might be clumsy with a large file to do lots of fseeking.
05:54:51 <Itkovian> stat->st_size will yield the length
05:55:03 <Itkovian> pejo: no, you fseek once to the end
05:55:17 <Itkovian> that should yield the same result as stat
05:56:09 <dons> Itkovian, you using h4sh for serious work? :)
05:56:31 <dons> good thing it has unfoldr :)
05:56:33 <Itkovian> dons: a friend needs to count some shit in a file, and well, h2sh came to mind
05:56:38 <Itkovian> h2sh that is
05:56:41 <Itkovian> h4sh
05:56:42 <Itkovian> grr
05:57:08 <dons> cool :) yeah, should be good for math on files, I think.
05:57:16 <dons> show. f. read style code
05:57:25 * Igloo should start an unfoldr file
05:57:36 <Itkovian> dons: how do I give a function a la Igloo's to unfoldr on the command line?
05:58:19 <dons> hmm. unfoldr '(\xs -> if null xs then Nothing else Just (splitAt 6 xs))'
05:58:29 <dons> but it depends on how your data is formatted i think
05:58:38 <Itkovian> it's just lines ...
05:58:58 <Itkovian> hmm, that return nothing at all
05:58:58 <dons> then that should be ok
05:59:09 * Itkovian tries cat file | group
05:59:09 <dons> hmm. lets see.
05:59:25 * vegai feels that 'hash' would've been a better name.
06:01:24 <tromp> another question about forking
06:01:34 * Itkovian thinks people are pulling in pron, cos the network is sleeuw
06:01:51 <tromp> is the following a good way to run ncpus processes:
06:01:54 <tromp>   for (cpuid=0; cpuid < ncpus-1; cpuid++)
06:01:54 <tromp>     if (!fork())
06:01:54 <tromp>       break;
06:01:54 <tromp>   cntlegal(ncpus, cpuid, maxtsize, inbase, outbase, x);
06:01:54 <tromp>   if (!cpuid)
06:01:55 <tromp>     wait();
06:02:17 <tromp> sorry for being off-topic:(
06:02:29 <vegai> no, since you're using the wrong language :)
06:03:05 <tromp> oh, this doesn't work...
06:03:15 <Itkovian> tromp: I've no idea ... what does cntlegal do?
06:03:27 <tromp> does it matter?
06:03:35 <Itkovian> perhaps you should ask a more C-like channel, or unix-like
06:03:39 <tromp> i just want ncpus copies running
06:03:46 <Itkovian> hmm
06:03:53 <tromp> the wait test is broken i see
06:04:27 <Itkovian> dons: cat file | i does yield the data, but cat file | i | group does not give any output
06:05:14 <dons> the old group expects a string arg on the command line.
06:05:31 <dons> the new group  (in darcs) will read that from stdin too, if no arg is given
06:06:29 <dons> $  group   Mississippi
06:06:29 <dons> M
06:06:29 <dons> i
06:06:30 <dons> ss
06:06:31 <dons> ...
06:06:40 <dons> but perhaps it should be [a] -> [[a]]
06:06:44 <dons> instead of a -> [a]
06:06:59 <goron> I couldn't get this remote search going..... so I just copied all to my local computer :D Highly, effective...
06:08:18 <Itkovian> ok dons, fetching now, thx
06:08:39 <dons> not sure if it does what you want though. it won't group lines, I think.
06:09:26 <Itkovian> well, group . lines should do the trick, no?
06:09:52 <Itkovian> what I want it to do is to make groups of 6 lines and then group those
06:09:56 <dons> you might just want to use ap, and do it all in haskell from that point on
06:10:04 <Itkovian> each six lines make up a pattern
06:10:04 <dons> ap 'group.lines' or so
06:10:16 <Itkovian> and I want to count the number of each pattern that occurs
06:10:35 <Itkovian> what is ap?
06:10:47 <xerox> @type Control.Monad.ap
06:10:49 <Itkovian> ok
06:10:52 <lambdabot> forall b (m :: * -> *) a. (Monad m) => m (a -> b) -> m a -> m
06:10:52 <lambdabot> b
06:11:07 <dons> ap gets all of stdin as a single strinng, then you can do whatever you want.
06:13:51 <dons> but i think i should lift group to [[a]], so it operates over lines of a file, seems more sensible
06:14:19 <xerox> Like a sed -e ?
06:14:34 <dons> right. most other h4sh commands operate like sed -e
06:14:58 <dons> but some, e.g. group, iterate, unfoldr take single string args
06:15:12 <dons> group should not do that, though, I think
06:16:02 <boegel> hello Guest335889039 , what brings you here ?
06:21:34 <Itkovian> ap 'show . map length . group . sort . unfoldr (\xs -> if null xs then Nothing else Just (splitAt 6 xs)) . lines'
06:21:45 <Itkovian> almost there ...
06:24:23 <Itkovian> how do I use let  in there?
06:24:28 <Itkovian> I've tried this:
06:24:40 <Itkovian> ap 'let g = group . sort . unfoldr (\xs -> if null xs then Nothing else Just (splitAt 6 xs)) . lines in show . (map head g)'
06:24:43 <Itkovian> but alas
06:25:19 <boegel> @eval let n = 5 in n
06:25:29 <boegel> @plugs let n = 5 in n
06:25:30 <lambdabot> 5
06:25:32 <lambdabot> 5
06:25:34 <dons> lets see. close eh?
06:25:37 <boegel> Itkovian: works fine ?
06:25:58 <boegel> @plugs let n = 5 in n + 1
06:26:01 <lambdabot> 6
06:26:43 <Itkovian> boegel: not yet
06:26:54 <Itkovian> I'd like to zip the count with the item that's counter
06:26:56 <Itkovian> counted
06:27:07 <Itkovian> so ... zip (map head g) (map length g)
06:27:49 <Itkovian> maybe I should let g be a function
06:28:42 <Itkovian> pompompom
06:29:33 <threeve> Is anyone familiar with the text Algorithmics for Hard Problems ?  I'm going back to school and this is my first class, and I wanted to gauge what my expected level of effort might be :)
06:29:46 <Itkovian> threeve: just do yr best
06:29:47 <dons> Itkovian, btw, the above should be "show . (map head) . g" shouldn't it?
06:29:49 <Itkovian> work hard
06:30:09 <boegel> threeve: and flirt with your teacher, might help
06:30:22 <dons> i'm glad boegel isn't in my class :p
06:30:26 <Itkovian> dons: doesn't work either
06:30:36 <dons> $ take 50 /usr/share/dict/words | ap 'let g = (group . sort . unfoldr (\xs -> if null xs then Nothing else Just (splitAt 6 xs)) . lines) in show . (map head) . g'
06:30:39 <dons> [["A","a","aa","aal","aalii","aam"],["Aani","aardvark","aardwol ...
06:30:41 <Itkovian> he used to be in mine I think
06:31:15 <boegel> Itkovian: but I never flirted with you, let's make that clear, okay ? :)
06:31:18 <xerox> wow
06:31:23 <boegel> xerox: ?
06:31:32 <xerox> That was directed to dons.
06:31:43 <boegel> oh, okay :)
06:32:01 <boegel> xerox: any new development on the cairo and l-system stuff ?
06:32:01 <Itkovian> dons: still gives a type error
06:32:24 <xerox> boegel: fixes and cleanups on the bindings side for me, so tiring :)
06:32:24 <Itkovian> boegel: you wouldn't have got more tahn 5 for yr thesis if you tried
06:32:34 <dons> hmm. that's weird Itkovian
06:32:37 <xerox> boegel: dcoutts is playing atm, or will be
06:32:40 * Itkovian needs to recompile the kernel
06:33:07 <boegel> Itkovian: hey, that's not objective, now is it ?
06:33:23 <Itkovian> boegel: see if I care ;-)
06:33:31 <Itkovian> dons: your example works fine btw
06:33:43 <threeve> boegel: I'll keep that in mind as a last resort, but I think I'll take itkovians advice first :)
06:34:13 <dons> ok , good Itkovian
06:46:32 <basti_> I got a variable in a C .o  I want to import that variable. How do I do so? ccall seems inappropiate.
06:47:04 <nekoreppie> ring ring ring bananaphone
06:47:18 <basti_> ......?
06:47:58 <xerox> basti_: see c2hs-0.14.3/c2hs/tests/marsh.h
06:48:08 <xerox> ...and Marsh.chs
06:48:10 <basti_> hmm ok
06:48:59 <dcoutts> boegel, xerox: http://www.haskell.org/~duncan/cairo/lsystem-demo/spiro.png
06:49:15 <xerox> Whoa!!!!
06:50:28 <boegel> omg, that rules :)
06:50:43 <boegel> dcoutts: is that just by using a grammar from the page I showed you ?
06:50:48 <xerox> I've gtk2hs still compiling, sob.
06:51:31 <basti_> xerox: marsh.h declares a variable "x", but it is not used?
06:51:34 <dcoutts> boegel, yeah
06:51:41 <xerox> basti_: uhm.
06:51:54 <basti_> thats what i thought too.
06:52:13 <xerox> basti_: I found that header and thought it was the right example, strange...
06:54:56 <boegel> dcoutts: L-systems are _so_ cool
06:55:19 <basti_> yes they are
06:55:20 <boegel> dcoutts: what happens if you use more iterations ?
06:55:21 <nekoreppie> wryyyyyyyy
06:55:27 <basti_> i did l-systems on my c64.
06:55:42 <xerox> In basic?
06:55:46 <basti_> yes.
06:55:50 * boegel thinks nekoreppie is high on something
06:55:52 * basti_ did suffer a lot back then
06:56:07 <xerox> urgh.
06:56:56 <basti_> hey, they looked about the same.
06:57:06 <basti_> just the resolution was worse. and it took some time.
06:59:27 <xerox> :)))
07:02:36 <boegel> basti_: 'some' ? :D
07:03:32 <basti_> boegel: depended on the iteration depth.
07:04:48 <dcoutts> boegel, actually with more iterations, that one get's boring
07:05:12 <boegel> dcoutts: oh, okay :) show us another one then :D
07:06:28 <basti_> do us the sierpinky!
07:06:30 <basti_> s
07:06:34 <basti_> and the koch!
07:06:44 <boegel> koch can be quite nice yes
07:08:03 <boegel> basti_: you mean sierpinski
07:08:27 <basti_> yes, its writting with a y in german.
07:09:05 <basti_> and the s dropped to the other line
07:09:35 <xerox> dcoutts: gives us something we can feed with grammars ^_^
07:09:50 <yeti> basti_: sierpinsinski is written with "y" in german? that's news to me^^
07:09:55 <dcoutts> xerox, I'm looking
07:09:56 <Itkovian> dcoutts: I'll work on the parser on the train home ...
07:10:00 <Itkovian> boegel can help :-)
07:10:14 <dcoutts> I also need to implement more operations
07:10:37 * basti_ goes look up
07:10:42 <xerox> dcoutts: I'm still compiling, then I'll probably be coding too and no time to bug you :P
07:10:43 <basti_> its a translitaration problem for sure
07:11:16 <basti_> mmmok.
07:11:24 <basti_> *usual* translitaration is with i.
07:11:25 <basti_> ;)
07:12:57 * boegel is thinking about taking a nap on the train
07:13:12 <Itkovian> don't you even dare to dream about that buster
07:13:25 <boegel> and Itkovian, there are other people travelling with us, kind of asocial to play with your mac then, isn't it ? :)
07:13:33 <Itkovian> see if I care
07:13:37 <Itkovian> they can help think
07:14:12 <dcoutts> http://www.haskell.org/~duncan/cairo/lsystem-demo/sierpinski1.png
07:14:28 <basti_> i once saw a l-systems in ps implementation
07:14:30 <boegel> w00!
07:14:32 <Itkovian> I've gobbled together the command line : (with a little help from dons and a piece of paper)
07:14:35 <Itkovian> cat stijn.data.numbers | ap 'let g = (group . sort . unfoldr (\xs -> if null xs then Nothing else Just (splitAt 6 xs)) . lines) in show . (\s -> zip ((map length) s) ((map head) s)) . g '
07:14:55 <Itkovian> pretty l33t, eh :-)
07:14:59 <Itkovian> thx Igloo
07:15:15 <basti_> dcoutts: what graphics library are you using?
07:15:21 <Itkovian> and by golly it does exactly what it needs to do.
07:15:26 <Itkovian> bye bye perl and co
07:15:39 <dcoutts> basti_, why xerox's new cairo bindings of course :-)
07:15:52 * Itkovian still hasn't got an ok kernel
07:15:53 <basti_> dcoutts: i had that impression. yay for hscairo
07:16:02 * xerox does a little dance
07:16:19 <dcoutts> @karma xerox
07:16:20 <lambdabot> xerox has a karma of 49
07:16:27 <xerox> <gee>
07:16:32 <Igloo> @karma+ unfoldr
07:16:32 <dcoutts> oh, no need to increse that!
07:16:33 <lambdabot> unfoldr's karma raised to 1.
07:16:36 <Itkovian> I will strangle somebody soon
07:16:54 <dcoutts> Itkovian, bagsee it's not me
07:16:59 <basti_> I like how http://www.cairographics.org/hscairo looks like the hawiki pages *g*
07:17:15 <xerox> basti_: that is rather old code
07:17:20 <reppie-tan> we drink ritalin
07:17:22 <xerox> @where cairo
07:17:23 <lambdabot> I know nothing about cairo.
07:17:35 <dcoutts> xerox, I wonder if I can update that page...
07:17:36 <dblhelix> Itkovian: well, I guess boegel is closest
07:17:41 <xerox> http://haskell.galois.com/~paolo/darcs/
07:17:45 <Itkovian> @quote lambdabot
07:17:46 <lambdabot>  "lambdabot hasn't said anything memorable"
07:17:48 <xerox> dcoutts: good idea
07:17:49 <dblhelix> boegel: just kidding, I'm sorry
07:17:56 <basti_> so wheres the new code?
07:18:02 <xerox> basti_: http://haskell.galois.com/~paolo/darcs/
07:18:11 <basti_> www.cairographics.org is a wiki.
07:18:13 * basti_ updates
07:18:16 <goron> @karma goron
07:18:17 <lambdabot> You have a karma of 0
07:18:21 <basti_> oh
07:18:24 <basti_> i may not though
07:18:24 <basti_> :(
07:18:49 <basti_> but paniq may, i think
07:19:52 * basti_ wrote a message to his client
07:21:06 <goron> How can I repeat a command at lambdabot? Like @more 5, or something.
07:21:38 <dblhelix> goron: *grin* what do you want to use that for?
07:22:04 * dblhelix guesses... would it have something to do with goron's lack of karma?
07:22:13 <Itkovian> anybody knows if you can tell grub to just once ignore the default kernel, instead booting another one (once)
07:22:25 <goron> dblhelix: I have no lack of karma.
07:22:32 <Itkovian> yes you do
07:22:36 <Itkovian> @karma- goron
07:22:37 <lambdabot> goron's karma lowered to 49.
07:22:43 <goron> lol
07:22:44 <xerox> ...
07:22:52 <boegel> dblhelix: np, np pun taken :) I'm not in the same room as Itkovian, so actually I should go and warn some other people
07:22:54 <xerox> Stop playing with karma please :(
07:22:59 <boegel> s/np/no
07:23:01 <basti_> Itkovian: there is such an option, intended for remote-maintaining servers
07:23:27 <basti_> uh but i think this one only boots the other kernel if the first one fails.
07:23:46 <goron> Actually my real karma value is two.
07:23:53 <dblhelix> boegel: maybe it's already too late
07:24:01 <xerox> There are no more real karma values.
07:24:10 <dblhelix> Itkovian: have you strangled somebody already?
07:24:43 <dblhelix> goron, xerox: I guess it's like printing more money in times of recession
07:25:38 <Itkovian> dblhelix: nope ...
07:25:48 <Itkovian> my kernel refuses to export a symbol. grrr
07:25:52 <Itkovian> bastard
07:26:08 <dblhelix> Itkovian: bastard? the kernel, I take ;)
07:26:10 <Itkovian> basti_: ok, I'll look into it, thx
07:26:16 <Itkovian> yes the kernel
07:26:49 <basti_> Itkovian: http://www.gnu.org/software/grub/manual/html_node/Booting-once_002donly.html
07:27:47 <Itkovian> why thx basti_
07:28:10 <basti_> Itkovian: cos it was a simple google search.
07:28:42 <basti_> Itkovian: Whenever someone asks something i know about, I try to google it up, and if i find it, i tell him. I'm practicing information aquiry that way.
07:29:04 <Itkovian> nice
07:30:26 <dblhelix> basti_: that reminds me of a picture I got mailed once: it involved 'microsoft's new web-search technology'--basically just a bunch of its employees reading queries from a terminal and enter those into google manually before typing in the results :)
07:32:26 <basti_> lol
07:36:24 <Itkovian> lol
07:37:14 <Itkovian> woot!
07:37:51 <basti_> http://kqe.de/pruell/mutig-mutig.jpg
07:38:01 <basti_> "courageous"
07:38:15 <dblhelix> lol
07:38:43 <xerox> ?
07:39:29 <earthy> opening a beer on the shield of a riot police officer
07:39:50 <xerox> Didn't seem so, but whatever :)
07:40:17 <basti_> it might just appear to do so.
07:40:23 <basti_> but, its a funny picture nevertheless
07:47:05 <boegel> whahaha :)
07:47:56 <boegel> http://kqe.de/pruell/katzenfoto.jpg -> omfg :)
07:47:58 <CosmicRay> hmm.  there wouldn't happen to be anybody that has Haskell code to work with any of these file formats, would there?  tar, zip, gz, bz2
07:48:51 <Igloo> *You* have Haskell code to work with .gz, no?
07:49:13 <CosmicRay> Igloo: in that paricular case, I meant faster code to work with .gz.  such as a binding to zlib.
07:49:22 <CosmicRay> yes, I have pure Haskell code that uses your deflate
07:49:28 <CosmicRay> err, inflate.
07:49:36 <CosmicRay> but it is rather slow
07:49:56 <Igloo> Ah, OK
07:50:00 * Igloo wonders how slow
07:50:19 <CosmicRay> Igloo: slow enough that I had to comment out some of my unit tests because they were annoying me.
07:50:53 <Igloo> Well, if you bind to zlib I'd be interested in seeing comparative benchmark results  :-)
07:50:59 <CosmicRay> I seem to remember something like 20 seconds to generate a 20MB file from a 10K .gz file
07:52:00 <CosmicRay> speaking of these things, where can I read about the most efficient way to read and handle binary data in 8-bit hunks, instead of 8-bit hunks marshalled into 32-bit (or larger) words?
07:53:10 <CosmicRay> I looked at PackedString but it seems to store unicode chars and key of Char as well.  I can't really figure out how it's better than a String.
07:53:51 <xerox> darcs' FastPackedString?
07:53:59 * boegel leaves for home
07:54:04 <boegel> bye everyone
07:54:07 <xerox> Bye!
07:54:45 <CosmicRay> xerox: hmm.  someone made a hack to split that out from darcs, yes?
07:55:34 <CosmicRay> but even the FastPackedString says that it supports full unicode Chars.
07:55:40 <xerox> CosmicRay: yes, dons.  In h4sh.
07:56:35 <Igloo> FPS uses 8bit chars
07:57:01 <Igloo> PS is better than string because it doesn't have all the linked list and laziness overhead
07:57:05 <CosmicRay> Igloo: I'm just looking at the comment in the source:
07:57:07 <CosmicRay> -- | A space-efficient representation of a 'String', which supports various
07:57:07 <CosmicRay> -- efficient operations.  A 'PackedString' contains full Unicode 'Char's.
07:57:13 <CosmicRay> that's from FastPackedString.hs
07:57:19 <CosmicRay> and looks remarkably similar to PackedString
07:57:32 <CosmicRay> is that comment incorrect?
07:57:36 <Igloo> From darcs' FPS?
07:57:40 <CosmicRay> right
07:57:45 <dcoutts> CosmicRay, you can make an ASCII version of PackedString of course
07:58:06 <dcoutts> CosmicRay, using arrays of Word8 rather than Char
07:58:09 <CosmicRay> in fptools, we have:
07:58:11 <CosmicRay> newtype PackedString = PS (UArray Int Char)
07:58:28 <Igloo> I think it's just wrong
07:58:29 <CosmicRay> data PackedString = PS !(ForeignPtr Word8) !Int !Int
07:58:34 <CosmicRay> with the same comment preceeding each.
07:58:42 <Igloo> It might be refering to the ability to put utf-8 data in them
07:59:28 * Itkovian is off. ttyl
07:59:28 <Itkovian> \
08:02:40 <CosmicRay> I was trying to understand how FPS did that.
08:02:52 <CosmicRay> it seems to use
08:02:54 <CosmicRay> c2w :: Char -> Word8
08:02:55 <CosmicRay> c2w = fromIntegral . ord
08:03:20 <CosmicRay> which seems to me would generate an error for chars > 255
08:04:45 <dcoutts> CosmicRay, the comment may simply be wrong
08:05:06 <Igloo> It won't generate an error, it'll silently truncate. That assumes you have 8bit chars
08:05:14 <dcoutts> CosmicRay, ie it may not have been updated when the conversion was done
08:05:29 <Igloo> There are functions like unpackPSfromUTF8 though
08:08:28 <CosmicRay> indeed it does just silently truncate.
08:10:33 <CosmicRay> oh nice, mmapFilePS.
08:11:00 <CosmicRay> I'm thinking it might be nice to make a Haskell FastPackedString library.
08:12:00 <Igloo> You mean splitting that out from darcs? There are at least 3 groups planning on doing that already
08:13:03 <CosmicRay> Igloo: well, dons has already done that, but it's within h4sh.
08:13:11 <CosmicRay> I mean making a FastPackedString package.
08:13:21 <CosmicRay> that has only that, and is not part of some other larger program.
08:13:22 <Igloo> Oh, I thought he planned to make a package too
08:13:24 <Igloo> 2 then  :-)
08:13:30 <CosmicRay> heh
08:13:42 <CosmicRay> dons: ping
08:14:00 <CosmicRay> this will be really useful for writing a tar file handler.
08:14:37 <CosmicRay> Igloo: what do you think of the portability of including .c/.h files?  I'd like to be able to include FastPackedString in MissingH, but I'm thinking that many people (especially on Windows) may not have a C compiler available.
08:15:03 <CosmicRay> FPS doesn't depend on any external libraries, which is nice, but I'm also unsure how well it would work in hugs
08:15:04 * Igloo is working towards removing C files from darcs
08:15:25 <CosmicRay> there are a bunch of
08:15:27 <CosmicRay> #if defined(__GLASGOW_HASKELL__)
08:15:30 <CosmicRay> with no #else
08:15:35 <CosmicRay> in FastPackedString.hs
08:15:46 <Igloo> They're really #ifdef USE_MMAP I think
08:16:18 <CosmicRay> oh, and this is fun
08:16:20 <CosmicRay> Type :? for help
08:16:20 <CosmicRay> Hugs.Base> :l Data.PackedString
08:16:20 <CosmicRay> ERROR "/usr/lib/hugs/libraries/Hugs/ST.hs":50 - Syntax error in type expression(unexpected `.')
08:16:29 <Igloo> -98
08:16:42 <CosmicRay> is it a bug if I can't :l Data.PackedString without using -98 ?
08:16:47 <CosmicRay> yeah, just saw that
08:17:45 <Igloo> A bug in what?
08:17:49 <CosmicRay> hugs
08:18:12 <Igloo> Not if it (indirectly?) uses extensions...
08:18:48 <dcoutts> CosmicRay, huh? no c complier? GHC on windows includes gcc. You can use ghc to compile .c/.h files.
08:19:13 <CosmicRay> dcoutts: oh, I didn't realize that.  I thought it only included Perl. ;-)
08:19:25 <CosmicRay> dcoutts: so you can't really think of any situation in which GHC would be available but GCC would not?
08:19:29 <dcoutts> CosmicRay, it compiles via C, so it needs gcc
08:19:32 <CosmicRay> (or a C compiler in general)
08:19:42 <CosmicRay> dcoutts: I thought it compiled to ASM on some archs
08:19:58 <dcoutts> CosmicRay, it can do, but it can compile via C on all archs
08:20:46 <dcoutts> CosmicRay, I suspect the C backend will be around for ever, partly just to make bootstrapping easier
08:20:48 <CosmicRay> so having ghc available implies having a working C compiler, I guess.
08:21:02 <dcoutts> yes, now and in the forseeable future
08:21:03 <CosmicRay> the same would not be true of hugs, right?
08:21:07 <dcoutts> correct
08:21:31 <CosmicRay> hmm hmm..
08:21:48 <CosmicRay> is there any reference on using configure with cabal anywhere? ;-)
09:12:18 <dcoutts> hi SyntaxNinja
09:12:59 <SyntaxNinja> y0
09:16:39 <SyntaxNinja> dcoutts: how's it going?
09:16:48 <dcoutts> fine
09:16:50 <dcoutts> any idea what to do about the "util" package thing?
09:17:15 <dcoutts> you've seen our cool screenshots? http://www.haskell.org/~duncan/cairo/lsystem-demo/
09:17:50 <SyntaxNinja> I can't think of a good solution until we have simonMar's optional dependencies... we could just have separate .cabal files for 6.4 and 6.2...
09:18:01 <SyntaxNinja> hopefully we won't have to support 6.2 forever
09:18:07 <xaber> does anyone have recent debs for gtk2hs?
09:18:12 <xaber> it looks like no one is looking after haskell-unsafe
09:18:18 <dcoutts> xaber, I wish!
09:18:32 <dcoutts> SyntaxNinja, well you can leave it in and we'll conditionally patch it in our ebuild :-)
09:19:05 <Igloo> xaber: haskell-unsafe is working perfectly AFAIK, but things in it are not supported. Hence the name  :-)
09:19:20 <dcoutts> SyntaxNinja, actually it'll break things for other people too, so I suppose that's not such a good idea
09:20:09 <Igloo> Having the .cabal generated by CPP, and shipping with the 6.4 one prebuilt, seems reasonable IMO
09:20:22 <dcoutts> SyntaxNinja, so what package does System.Posix.Files belong to on ghc 6.2.2 on win32 ?
09:20:34 <SyntaxNinja> dcoutts: well, for now, let's patch it, and we'll see if simon gets a chance to implement this cabal extension.
09:20:40 <SyntaxNinja> dcoutts: I don't think its there at all
09:21:08 <dcoutts> SyntaxNinja, oh, then in that case we're fine right? becasue it won't work on win32 with ghc 6.2.2 anyway
09:21:11 <SyntaxNinja> Igloo: yeah, possibly, but cpp doesn't play well with .cabal, and all that stuff is _supposed_ to be static
09:21:22 <Igloo> How doesn't it play well?
09:21:24 <SyntaxNinja> dcoutts: no, the imports of System.Posix are all ifdef'd out
09:21:38 <Igloo> If you use the new syntax then you'll be breaking 6.2.2 anyway, of course
09:21:55 <SyntaxNinja> Igloo: besides the static business, cpp puts whitespace in bad places.
09:22:01 <SyntaxNinja> well, newlines I guess
09:22:08 <SyntaxNinja> Igloo: why would it break 6.2.2?
09:22:10 <Igloo> Ah, OK
09:22:23 <Igloo> Because 6.2.2's cabal won't understand them
09:22:32 <Igloo> Oh, or are you assuming people will upgrade cabal but not ghc?
09:22:36 <dcoutts> SyntaxNinja, so on win32 it does not need the util/unix package, but on unix it does. Makes sense.
09:22:45 * Igloo can't see why someone would do that
09:22:51 <dcoutts> SyntaxNinja, so the problem is ghc 6.2.2 on unix
09:23:34 <SyntaxNinja> Igloo: er, there's no such thing as 6.2.2's cabal.  old-cabal not understanding new-cabal files is there no matter what...
09:23:47 <Igloo> Good point
09:23:49 <SyntaxNinja> Igloo: but for cabal itself at least, it doesn't matter, because it bootstraps itself
09:24:00 <SyntaxNinja> but maybe not on gentoo
09:24:21 <SyntaxNinja> dcoutts: right, so on unix, we should have it depend on unix, but on windows not, I guess.
09:24:31 <dcoutts> SyntaxNinja, so we should be using the unix package, but that doesn't exist on win32 at all so it wouldn't work
09:24:35 <SyntaxNinja> or maybe we should just take out all the posix stuff
09:24:56 <SyntaxNinja> dcoutts: right.
09:25:53 <dcoutts> SyntaxNinja, yeah, this seems to be the basic problem. If we're using System.Posix.* then it's not going to work on win32. (it happens that some System.Posix modules are now in base and hence work on win32)
09:26:34 <dcoutts> if we had conditional deps then you could dep on the unix package on unix systems and on something else on win32, but we don't have that yet
09:27:17 <SyntaxNinja> dcoutts: exactly
09:27:53 <dcoutts> SyntaxNinja, how did it work for the 1.0 version? I notice that it did not depend on the util package.
09:29:19 <dcoutts> $ ghc-pkg-6.4 field Cabal-1.0 depends
09:29:20 <dcoutts> depends: base-1.0
09:29:34 <Lemmih> dons: ping.
09:29:41 <FrederikEaton> hey, i just woke up. what's this about conditional deps? i was trying to do that and became disappointed. why can't the ./configure script output a full cabal file to be merged with the main one and reread?
09:30:17 <dcoutts> FrederikEaton, it's just not supposed to work that way. The .cabal file should be static, not generated
09:30:30 <dcoutts> otherwise it can't integrate with other tools
09:30:38 <FrederikEaton> dcoutts: that's not an explanation
09:30:58 <dcoutts> "it can't integrate with other tools" is an explanation :-)
09:31:27 <dcoutts> eg, we want to generate ebuilds from cabal packages, and we can't do that if they need to be cpp'ed or whatever
09:32:14 <FrederikEaton> what's an ebuild?
09:32:30 <dcoutts> it's a package description for gentoo linux
09:32:37 <FrederikEaton> well maybe you could restrict the number of fields which should be changed, but what's allowed in a .buildinfo isn't enough
09:32:57 <dcoutts> .buildinfo ?
09:32:58 <FrederikEaton> you also need to be able to change the exposed modules and the dependencies
09:33:07 <FrederikEaton> that's what the ./configure script outputs
09:33:10 <FrederikEaton> in cabal
09:33:26 <dcoutts> FrederikEaton, that's partly what the optional deps discussion is about
09:33:50 <Igloo> Can it actually change the exposed modules? It probably ought to be able to
09:34:17 <Igloo> e.g. wxhaskell? (Frontend.WXHaskell), gtk2hs? (Frontend.GTK2HS)
09:34:20 <Lemmih> Isn't that also covered in the optional deps proposal?
09:34:23 <dcoutts> Igloo, via the optional sections thing, I think it can.
09:34:33 <Igloo> Ah, good point
09:34:42 <Igloo> Do they add to the defaults or replace them?
09:35:04 <dcoutts> Igloo, not sure it's been considered exactly
09:36:24 <FrederikEaton> so how does this optional deps thing work? does it work through the configure mechanism?
09:36:35 <dcoutts> FrederikEaton, a better example is hackage. If you upload a package to the online hackage database it will try to parse the .cabal file in the tarball. If it chokes (because values have not yet been substituted in) then you'll not be able to get your package into hackage, which would be a shame.
09:37:01 <Lemmih> Funny code of the day: 'when (not r) $ panic $ "resolveObjs failed with <<" ++ show r ++ ">>"'
09:37:02 <dcoutts> FrederikEaton, it allows you to specify optional dependencides in the build-depends field
09:37:11 <Igloo> FrederikEaton: cabal doesn't use configure, but you could detect what is installed with configure and call cabal appropriately
09:37:12 <FrederikEaton> dcoutts: so? what other choice is there when the fields are not known?
09:37:28 <FrederikEaton> Igloo: cabal calls configure, not vice-versa
09:37:58 <Igloo> FrederikEaton: Are you telling me, asking me, or instructing me to make it so?
09:38:05 <dcoutts> FrederikEaton, well hopefully you can describe the conditional calculation declaratively and stick it into the .cabal file and the build-depends field
09:38:11 <FrederikEaton> Igloo: i'm telling you
09:38:30 <FrederikEaton> dcoutts: i'm skeptical that the language for that will be powerful enough
09:38:36 <FrederikEaton> to capture all situations
09:38:36 <Igloo> AFAIK, for the default simple way of using cabal, you're wrong then
09:38:41 <Lemmih> FrederikEaton: Read the ml.
09:38:44 <dcoutts> FrederikEaton, let me find the email...
09:40:11 <FrederikEaton> Lemmih: you can't summarize?
09:40:59 <dcoutts> actually it was a longish thread
09:41:14 <Philippa> 'lo shapr
09:41:16 <shapr> y0
09:41:17 <Igloo> You only need one of SM's late messages I think
09:41:29 <dcoutts> Igloo, yeah, looking...
09:43:01 <shapr> The next issue of TMR is almost upon us...
09:43:19 <dcoutts> FrederikEaton, http://www.haskell.org//pipermail/libraries/2005-August/004246.html
09:43:27 <shapr> I think the authors will be Oleg, Philippa, Pseudonym, and shapr, but I need one more. Any volunteers?
09:43:32 <Philippa> ah crap. Guess I'd better figure out how I want to phrase that section on variance, then
09:44:09 <dcoutts> shapr, ask xerox about cairo, but he may be rather busy in the lead up to sept 1st
09:44:40 <dcoutts> shapr, his project needs to be finnished by 1st sept, or he doesn't get the grant
09:44:43 <shapr> Yow
09:44:51 <shapr> I should probably stay out of his way then..
09:45:01 <dcoutts> shapr, well ping him for next month
09:45:07 <SyntaxNinja> dcoutts: not sure about 1.0... are there any windows users here?
09:45:47 <xerox> Who screamt?
09:46:01 <shapr> me me!
09:46:06 <xerox> Aaaargh!
09:46:11 <dcoutts> SyntaxNinja, well it worked on windows, and on unix it does not depend on the util or unix packages
09:46:12 <ndm> shapr, had a question/idea/thought for you
09:46:15 <shapr> I need one more article for the next TMR, do you think you'll have time?
09:46:15 <lispy> SyntaxNinja: i'm on windows at the moment, but i can't really insall much
09:46:17 <shapr> ndm: go for it.
09:46:26 <ndm> someone emailed me about the hoogle answers
09:46:37 <dcoutts> lispy, could you run: ghc-pkg field Cabal-1.0 depends
09:46:38 <shapr> ndm: Think you'll have time to finish your Hoogle TMR article by the end of the month?
09:46:50 <lispy> dcoutts: i don't have ghc
09:46:50 <ndm> when you search map, you get http://www-users.cs.york.ac.uk/~ndm/hoogle/generated/Prelude.f.map.htm
09:46:55 <xerox> shapr: errr.. not really :(
09:46:59 <dcoutts> lispy, oh, nevermind
09:47:02 <xerox> I mean, dcoutts is great help!
09:47:03 <ndm> shapr, no - have TFP deadline on 2nd sept... :(
09:47:03 <lispy> dcoutts: it's a work computre ;)
09:47:04 <shapr> xerox: no worries, I didn't think so... but I had to ask.
09:47:08 <lispy> and they use java here
09:47:09 <xerox> But.. OK :-)
09:47:16 <lispy> not haskell
09:47:17 <ndm> someone suggested i turn the answer info's into a wiki
09:47:17 <FrederikEaton> dcoutts: will there be support for conditionally exposed modules?
09:47:38 <ndm> so for every function in the standard libraries, you could have a wiki page detailing it, error conditions, useage, examples etc.
09:47:40 <dcoutts> FrederikEaton, that's not quite clear yet, it might be good to point that issue out
09:47:46 <shapr> ndm: Hm, neat idea.
09:47:57 <ndm> would that be suitable for the hawiki, or should it be a dedicated wiki?
09:48:00 <shapr> That would 'enable comments' for the standard libs.
09:48:10 <shapr> ndm: Whatever you prefer. I can setup a dedicated wiki if you prefer.
09:48:29 <shapr> Though I'd prefer to pub a BSD equivalent license on the content.
09:48:32 <shapr> put*
09:48:33 <ndm> shapr, just don't want to take over the existing wiki - it might cloud teh rest over
09:48:45 <ndm> yeah, bsd license would also be better - esp for example code
09:48:46 <SyntaxNinja> dcoutts: wasn't it you who said that the util import made it not work on ghc 6.2.2?
09:48:55 <shapr> I doubt it, the wiki has a lot of content. RecentChanges is just the tip of the iceberg.
09:49:01 <ndm> hadn't considered license issues - what license is the hawiki under?
09:49:10 <shapr> Nothing explicit, which irritates me :-(
09:49:30 <shapr> I'm the second or third maintainer for hawiki, and I can't relicense the content.
09:49:52 <ndm> shapr, in that case i guess a new wiki might be better
09:49:54 <SyntaxNinja> shapr: you could work to make all the new content licensed, though
09:49:55 <shapr> I considered freezing the existing wiki and creating a new explicity licensed wiki, but I don't know if that's would kill the existing discussions.
09:49:57 <ndm> with an explicit license
09:50:08 <ndm> shapr, i can't imagine anyone would object
09:50:15 <ndm> if you just relicense existing stuff
09:50:26 <ndm> maybe have it so all new content is agreed license when you submit?
09:50:31 <shapr> A new hawiki with an explicit license would mean all the existing wikis (like TMRwiki) could get back together.
09:50:37 <Philippa> not sure I agree - there'd be bloodshed if it were under something GPL-like
09:50:42 <SyntaxNinja> shapr: you are hereby given permission to relicense anything I've written on there with a license of your choosing.
09:50:46 <shapr> SyntaxNinja: Thanks :-)
09:50:47 <xerox> ..and a better look?
09:50:48 <xerox> :-D
09:50:51 <dcoutts> SyntaxNinja, it's exposing util that breaks things, and current 1.1.2 needs to depend on the unix package for ghc 6.2.2, but 1.0 did not need it it would seem
09:50:54 <SyntaxNinja> I trust shapr not to do anything stupid
09:51:07 <shapr> Yeah, I just want to BSD the content so the knowledge will spread.
09:51:08 <SyntaxNinja> dcoutts: maybe it's to fix a bug in setting permissions, then
09:51:18 <ndm> i would just steal stuff from the hawiki without even considering license implications...
09:51:28 <dcoutts> SyntaxNinja, oh, yes that one
09:52:04 <SyntaxNinja> dcoutts: just patch it for now, we'll figure out the details later. I'll probably just make a cabal.cabal.6.2 or something and "make setup" will dtrt
09:52:55 <SyntaxNinja> I might actually be the only one who wants to use cabal for 6.2 anyway ;)
09:53:11 <dcoutts> SyntaxNinja, we want to use it on gentoo for 6.2 too
09:53:17 <SyntaxNinja> it's too bad we haven't had conditional dependencies from the beginning, but cabal isg etting more powerful way faster than I thought it would be anyway.
09:53:41 <SyntaxNinja> dcoutts: well, options are very limited right now. can you detect that you're building for 6.2 and grab the right file?
09:53:47 <dcoutts> SyntaxNinja, yes
09:54:23 <SyntaxNinja> dcoutts: then does this solution work for you until we have conditional deps?
09:55:07 <dcoutts> SyntaxNinja, yes we can patch whatever, I just worry about users who compile cabal themselves
09:55:10 <SyntaxNinja> I gotta go give 0xb100d I'll be back in an hour or so.  feel free to make that change and send me a patch. sorry abou the problem.
09:55:31 <SyntaxNinja> users who compile cabal themselves should be using the bootstrapping makefile which uses the most current cabal in-place.
09:55:40 <SyntaxNinja> and that can do tricks
09:55:44 <SyntaxNinja> gotta run
09:55:45 * SyntaxNinja &
09:57:21 <FrederikEaton> can moinmoin (i.e. the haskell wiki) send email change notifications?
09:57:30 <Heffalump> yes
09:57:34 <FrederikEaton> nifty
09:57:45 <Heffalump> register, and click on the little envelope icon
09:58:03 <FrederikEaton> "that won't cause it to send me snail mail?"
09:58:50 <liyang> Woo!
09:59:28 <liyang> I have teh proof. (Well, figured out how to do it anyway.)
09:59:41 * liyang takes a moment to not worry about his thesis...
09:59:44 <Philippa> cool. What for?
10:00:25 <liyang> Joe_0... effects... inference... safety...
10:00:27 <liyang> <_<
10:00:28 <liyang> >_>
10:35:05 <SyntaxNinja> liyang: you wrote a proof? yay
10:35:31 <CosmicRay> SyntaxNinja: do you were going to tell me where to find cabal-get yesterday.
10:35:33 <CosmicRay> s/do/so/
10:38:04 <dcoutts> SyntaxNinja, re: our earlier converstion. I must admit I'm slighty confused about what we decided. I was going to send you a patch to do what exactly?
10:48:38 <xerox> @pl \a k -> if (digitToInt k) == n then a+1 else a
10:48:40 <lambdabot> flip =<< flip (if' . (n ==) . digitToInt) . (1 +)
10:49:17 <xerox> It would be nice to have anonymous functions with guards, I think.
10:49:42 <xerox> \a k | (digitToInt k) == n = a + 1 | otherwise = a
10:49:45 <FrederikEaton> liyang: what is your thesis?
10:50:00 <FrederikEaton> liyang: Joe_0?
10:50:36 <dcoutts> xerox, yes, I agree
10:51:07 <Narrenschiff> Hmmmn. I'm trying to install the attribute package, but Setup.hs keeps exploding. So frustrating! I shall go and live in a cave instead.
10:51:32 <xerox> dcoutts: where could we push for such a thing?
10:52:15 <Lemmih> Narrenschiff: You'll get more help if you give us more detailed error messages.
10:52:31 <dcoutts> xerox, when they discuss additions to the language
10:52:48 <SyntaxNinja> CosmicRay: cabal-get-bootstrap: http://hackage.haskell.org/ModHackage/Hackage.hs?action=home
10:52:55 <Narrenschiff> oh, thank you! I didn't want to pester with what are probably pretty silly problems.
10:53:38 <SyntaxNinja> dcoutts: sounded like the thing to do was have a cabal.cabal-6.2 file, and cabal.cabal (which is for 6.4)
10:54:07 <SyntaxNinja> the same except for dependencies
10:54:23 <SyntaxNinja> or does the util dependencvy not work for you for 6.2.2 either?
10:54:27 <Narrenschiff> "runhaskell Setup.hs build" results in "Setup.hs: internal error: stg_ap_v_ret" and a request to report it as a bug.
10:54:49 <dcoutts> SyntaxNinja, for 6.2.2 you don't need to depend on util, just unix
10:55:16 <Lemmih> Narrenschiff: You can get around that by compiling Setup.hs instead of interpreting it.
10:56:35 <SyntaxNinja> Narrenschiff: what version of ghc is that? Lemmih you know of this bug?
10:56:40 * Narrenschiff investigates!
10:56:52 <Narrenschiff> it's ghc-6.4 on OS X.
10:57:06 <Lemmih> SyntaxNinja: Yes, everybody on MacOS suffers from this.
10:57:14 <Narrenschiff> ahahahahahaha!
10:57:17 <Narrenschiff> The more you know.
10:57:26 <SyntaxNinja> dcoutts: right, but does the util dependency break stuff for youf or 6.2?
10:57:38 <SyntaxNinja> damn ghc, makin' cabal look bad.
10:57:52 <SyntaxNinja> but darcs man... thery're the worst
10:57:57 <dcoutts> SyntaxNinja, the util dep would break things, and we'd have to change it to be unix instead
10:58:16 <SyntaxNinja> what about unix on 6.4?
10:58:34 <dcoutts> on 6.4 it's not needed, but it doesn't break anything
10:58:34 <Beelsebo1> narrenschiff: pardon?
10:58:52 <dcoutts> SyntaxNinja, but of couse it would do for win32 users
10:59:03 <SyntaxNinja> dcoutts: ok so maybe we need a windows vs unix .cabal file, rather than a 6.4 vs 6.2 cabal filre.
10:59:32 <dcoutts> SyntaxNinja, yes perhaps
10:59:45 <Narrenschiff> Beelsebo1, I had a feeling it'd turn out to be some MacOS specific glitch, but nothing seemed to crop up when I googled.
10:59:49 <CosmicRay> SyntaxNinja: what is the mechanism for uploading info to hackage?
10:59:56 <CosmicRay> SyntaxNinja: and when will there be a .deb?
11:00:05 <Beelsebo1> narren: it's a 6.4 specific glitch, not an OS X glitch
11:00:09 <SyntaxNinja> CosmicRay: cabal-put is for putting stuff onto hackage :)
11:00:15 <SyntaxNinja> cabal-get install cabal-put
11:00:18 <CosmicRay> heh
11:00:25 <Narrenschiff> Beelsebo1: oh.
11:00:29 <dcoutts> SyntaxNinja, it's only ghc-6.2.2 on unix that needs the unix dep, I think all other combinations are ok. win32 doesn't need unix or util I think.
11:00:36 * Beelsebo1 wonders why he has a silly name
11:00:38 <SyntaxNinja> CosmicRay: dono, it's totally beta stuff, only me & Lemmih have tried it as far as I know (he wrote pretty much the whole thing)
11:00:48 <Beelsebo1> narrenschiff: well... works fine in 6.2.2
11:00:53 <SyntaxNinja> dcoutts: right.
11:01:16 <SyntaxNinja> dcoutts: OK so just do what's rigth for you, remove the dependency, and i'll worry about windows users later.
11:01:19 <CosmicRay> SyntaxNinja: debian has never been above accepting beta stuff ;-)
11:01:23 <dcoutts> SyntaxNinja, so if you want a minimal special case, then ghc-6.2.2 on unix is the one
11:01:32 <SyntaxNinja> dcoutts: right.
11:01:55 <SyntaxNinja> oh but you do need a solution to 6.2.2 on unix
11:01:56 <beelsebob> narrenschiff: fwiw, I have more problems with glitches on my gentoo box, than on my OS X box
11:02:08 <dcoutts> SyntaxNinja, ok, the patch I'd send would be to change the dep on the "util" package for a dep on the "unix" package
11:02:17 <SyntaxNinja> sooooo yeah, go ahead and make two .cabal files (the 2nd one obviously can't end in .cabal) an dput the rigth one in place depending on which ghc you're using.
11:02:53 <Narrenschiff> beelsebob, I'm very new to this, so it's all guesswork on my part.
11:03:18 <SyntaxNinja> then email simon and tell him to get over this whole "new baby" thing and release ghc 6.4.1 and write the conditional dependency stuff
11:03:19 <beelsebob> narren: what is?
11:04:03 <greenrd> Philippa: Since no-one else apparently has done it yet, I created a wiki for Epigram here: http://epigram.pbwiki.com/
11:04:26 <SyntaxNinja> CosmicRay: is it working for you?
11:04:34 <SyntaxNinja> CosmicRay: btw, I uplodaed a "helloWorld" package
11:04:53 <CosmicRay> SyntaxNinja: one sec, downloading now
11:05:20 <CosmicRay> do I want hackage-client or cabal-get or all of the above?
11:06:01 <SyntaxNinja> CosmicRay: well, cabal-get-bootstrap does the right thing, cabal-get is the tool, hackage-client is a library that various stuff uses to interface w/ hackages's xml-rpc
11:06:21 <CosmicRay> cabal-get-bootstrap appears to be a directory
11:06:32 <beelsebob> @seen philippa
11:06:32 <lambdabot> philippa is in #haskell. Last spoke 1 hour, 6 minutes and 47 seconds
11:06:32 <lambdabot> ago.
11:06:38 <SyntaxNinja> yeah, "darcs get" it
11:06:54 <SyntaxNinja> then hopefully ./Install.lhs will do what you want
11:07:05 <SyntaxNinja> hopefully we'll streamline this process
11:07:28 <SyntaxNinja> I want a cabal-install tool which wil take a list of tarballs or something and install them, but we'll have to refactor cabal-get to do that.
11:09:03 * Narrenschiff pecks Lemmih's cheek! "Works like a dream! Thank you!"
11:09:45 <CosmicRay> SyntaxNinja: where exactly is it going to install all of this?
11:10:12 <SyntaxNinja> CosmicRay: usr/local; there's a --user flag, and it'll intsall into ~/usr, but I haven't tested that
11:10:28 <SyntaxNinja> CosmicRay: just edit the Install.lhs file if that doesn't workf or you :)
11:10:43 <beelsebob> hmm, time to stop dossing and write again I think
11:10:47 <beelsebob> bbiab
11:10:51 <CosmicRay> SyntaxNinja: so if I want to delete all the packages later, I blow away the directory under /usr/local, or do I have to unregister a bunch of stuff as well?
11:11:05 <CosmicRay> I'm just concerned about how this will play with debian packages
11:13:09 <SyntaxNinja> CosmicRay: there's an "deleteThem" thing there at the bottom of Install.lhs that actually just unregister.  your milage may vary.  you can always change the prefix
11:13:35 <CosmicRay> nice.
11:13:58 <CosmicRay> ok, time to try it.
11:14:00 <SyntaxNinja> :)
11:14:20 <dcoutts> SyntaxNinja, patch sent
11:14:47 <SyntaxNinja> dcoutts: thanks.
11:14:52 <SyntaxNinja> dcoutts: do you want to try cabal-get? :)
11:15:07 <SyntaxNinja> you can alias it to 'cabal-emerge' if that'll make you feel better ;)
11:15:14 <dcoutts> heh :-) sure
11:15:29 <dcoutts> I'll go make an ebuild for cabal-get...
11:16:05 <dcoutts> where's the stable source URI for cabal-get?
11:18:19 <dcoutts> Lemmih, is cabal-get-0.2 the latest version?
11:18:35 <Lemmih> Yes.
11:19:34 <dcoutts> Lemmih, so the latest versions of everything is in http://hackage.haskell.org/darcs/cabal-get-bootstrap/
11:19:40 <Itkovian> evening
11:19:54 <Lemmih> I think the bootstrap is broken.
11:20:21 <SyntaxNinja> Lemmih: what's wrong w/ bootstrap?
11:20:44 <dcoutts> Lemmih, where should I get the packages from? The ones I need for cabal-get
11:22:23 <Lemmih> SyntaxNinja: Did you manage to install cabal-get from it?
11:22:30 <SyntaxNinja> Lemmih: yeah!
11:22:37 <SyntaxNinja> I wouldn't be telling everyone else to do so if I hadn't
11:22:43 <Lemmih> Oh, then it's not broken.
11:22:52 <SyntaxNinja> Lemmih: you should also try it, though
11:22:57 <dcoutts> Lemmih, so that url is ok for the package source then?
11:22:58 <SyntaxNinja> hopefully CosmicRay is trying it now
11:23:14 <Lemmih> dcoutts: The URL on hackageDB.
11:23:19 <SyntaxNinja> dcoutts: I'd use the one provided by hackagedb itself
11:23:30 <dcoutts> ok, how do I find that
11:23:50 <dcoutts> ah, got it
11:26:15 <SyntaxNinja> I'm excited. i want to integrate hackage w/ darcs; cabal-put could be darcs push :)
11:26:41 * SyntaxNinja &
11:27:36 <CosmicRay> SyntaxNinja: NICE!
11:27:43 <xerox> <bitwize> Then Edsger Dijkstra came down from Mt. Sinai with a tablet proclaiming "Thou shalt not use GOTO; it is considered harmful"...
11:27:48 * xerox laughs
11:27:50 <CosmicRay> SyntaxNinja: I'm hacking it to use su instead of sudo
11:28:00 <basti_> lol
11:28:43 <Lemmih> CosmicRay: Hacking what to use su?
11:30:12 <dcoutts> SyntaxNinja, it'd be great if everyone used cabal's sdist feature. It'd make packages more consistent. (And I wouldn't have to put so many hacks into our ebuilds)
11:30:16 <CosmicRay> Lemmih: syntaxninja's installer
11:30:30 <dcoutts> SyntaxNinja, do you know if there are any remaining bugs in the sdist feature?
11:31:09 <CosmicRay> unning command: tar xzf GnuPG-0.1.0.tgz
11:31:09 <CosmicRay> Running command: ghc --make -package Cabal Setup.lhs -o setup
11:31:09 <CosmicRay> Chasing modules from: Setup.lhs
11:31:09 <CosmicRay> Skipping  Main             ( Setup.lhs, Setup.o )
11:31:09 <CosmicRay> Linking ...
11:31:10 <CosmicRay> Running command: ./setup configure
11:31:12 <CosmicRay> setup: Line 10: Unknown field 'hs-source-dirs'
11:31:14 <CosmicRay> Running command: ./setup build
11:31:16 <CosmicRay> setup: Line 10: Unknown field 'hs-source-dirs'
11:31:18 <CosmicRay> Running command: su root ./setup install
11:31:30 <CosmicRay> same problem with cabal-get
11:31:35 <Lemmih> Upgrade Cabal.
11:31:47 <CosmicRay> I can't.  I use this box to build debs with.
11:32:22 <dcoutts> CosmicRay, you can have multiple versions of Cabal installed
11:32:38 <CosmicRay> I have heard a lot of horror stories about this
11:33:15 <dcoutts> CosmicRay, like ghc not building with more than one version of cabal installed? Yeah, that's a problem.
11:33:22 <dcoutts> I've reported it.
11:35:31 <dcoutts> we're planning on supporting multiple versions of haskell libs installed simultaniously on gentoo
11:35:36 <Lemmih> Itkovian: Hi.
11:35:45 <Itkovian> hi Lemmih.
11:35:55 <Lemmih> Itkovian: HSP still doesn't work on MacOS, right?
11:36:18 <Itkovian> nein.
11:36:38 <Itkovian> haven't looked into it much further lately I must confess.
11:36:44 * Lemmih hopes to release HSP-0.3.0 later tonight.
11:36:58 <Itkovian> Hoewver, the hs-plugins stuff is unable to fiund a bunch of symbol that are clearly present in the ghc libs
11:39:09 <Itkovian> atm, I'm busy patching my kernel, doing some HaskLS stuff etc.
11:42:25 <autrijus> Hi. I need to run in a couple minutes, but I'd like sanity checking on my Euro OSCON interview for oreilly.
11:42:29 <autrijus> http://autrijus.org/tmp/haskell_interview.txt
11:42:49 <autrijus> I don't want to misrepresent the community :)
11:44:24 <Itkovian> autrijus: I wouldn't say that the code when using Int is close to that of hand coded C ...
11:44:50 <Heffalump> not sure I'd emphasis "handles infinite data structures natively" quite so much (which you are doing by making it the very first statement you make about Haskell)
11:45:09 <autrijus> Heffalump: that was my attempt at explaining "lazy evaluation".
11:45:44 <Heffalump> yeah, that makes sense. It's just the position of the statement that bothers me slightly :-)
11:45:52 <Heffalump> but it's your take on the language, not ours.
11:45:53 <Itkovian> otherwise, a very good read
11:46:32 <Heffalump> "in the academic" near the end should be "in the academic sector" or similar
11:46:50 <dcoutts> SyntaxNinja, Lemmih: about to emerge cabal-get ...
11:46:52 <autrijus> Heffalump: how would you reword it?
11:46:59 <autrijus> the first sentence that is
11:47:20 <Heffalump> I would swap the two points around.
11:47:38 <autrijus> Itkovian: I'll remove "hand coded", but shootout indicates it's likely to be comparable
11:48:02 <Itkovian> well, perhaps for this particular example ...
11:48:06 <Heffalump> "Haskell is a pure functional language that is optimised for conciseness and clarity. It handles infinite data structures natively, and has rich types and function abstractions which give Haskell programs..."
11:49:19 <autrijus> Heffalump: refresh?
11:49:56 <Heffalump> looks good
11:49:59 <Lemmih> Every six years?
11:50:14 <autrijus> oops!
11:50:29 <Lemmih> (:
11:50:51 <autrijus> reworded again with Heffalump's sentences
11:50:53 <autrijus> six _months_
11:51:07 <Lemmih> dcoutts: You've made an ebuild for cabal-get?
11:51:16 <dcoutts> Lemmih, yeah, just testing it now
11:52:00 <Igloo> autrijus: Have you actually compared the performance of teh Haskell and C impl of hamming?
11:52:39 <Igloo> (as a details, Int is not necessarily the same as int)
11:53:17 <autrijus> it is not?
11:53:32 <Itkovian> afaik it is platform dependent
11:53:33 <Igloo> Which line is that refering to?
11:53:46 <Lemmih> dcoutts: That was fast. What about all the dependencies?
11:53:47 <Itkovian> I think sometimes Int can be 31 bit ... no?
11:53:53 <Igloo> Not these days
11:53:56 <dcoutts> Lemmih, yep, them too
11:54:00 <Itkovian> oops, sorry
11:54:09 <Igloo> But on alpha Linux one is 32bit and the other 64bit
11:54:12 <dcoutts> Lemmih, using our new cabal2ebuild script :-)
11:54:16 <Lemmih> @karma+ dcoutts
11:54:17 <lambdabot> dcoutts's karma raised to 0.
11:54:29 <shapr> Speaking of commercial Haskell, I think I got my first contract job...
11:54:48 <autrijus> Igloo: and no, I had not. I will do so before sending off the interview.
11:55:05 <Lemmih> shapr: Doing what?
11:55:17 <basti_> wikipedia about hamming numbers:
11:55:19 <basti_> This algorithm is often used to demonstrate the power of a lazy functional programming language, because this algorithms can be implemented as described above, while an implementation for a strict functional or imperative programming language is highly non-trivial.
11:55:20 <xerox> ahah
11:55:26 <xerox> autrijus: you mention @pl! Cool.
11:55:27 <shapr> Lemmih: improving some existing Haskell code, I'll ask my client if I can talk about it...
11:55:54 <Lemmih> shapr: Cool (:
11:55:56 <shapr> @karma+ dcoutts
11:55:57 <lambdabot> dcoutts's karma raised to 1.
11:56:07 <shapr> I think @karma+ needs reasons.
11:56:13 * Lemmih wonders why dcoutts had a negative karma...
11:56:27 <dcoutts> me too! what did I do wrong?
11:56:39 <Itkovian> shapr: way to go!
11:56:41 <autrijus> ok, I take it doesn't have terrible mistakes now.  I need to run, thanks for the review :)
11:56:44 <autrijus> &
11:56:49 <Itkovian> bye
11:56:58 <xerox> Have fun autrijus :-)
11:57:00 * shapr reads autrijus' interview.
11:57:38 <shapr> autrijus: tasty!
11:57:46 <basti_> wheres that interview going to appear?
11:58:04 <autrijus> oreillynet
11:58:14 <autrijus> and their newsletters, among other places
11:58:22 <basti_> i see
11:58:26 <shapr> autrijus: "research is done with"
11:58:40 <autrijus> shapr: refresh
11:58:45 <shapr> It's a singular noun.
11:58:51 <autrijus> yeah, updated.
11:58:59 <autrijus> really gone. :) I'll read scrollback. &
11:59:02 <shapr> how about "Much new programming language research is done with"
11:59:10 <shapr> "Much of research" doesn't really work.
11:59:18 <shapr> Anyway, I should go do some paying work...
11:59:26 <xerox> :))
12:00:10 <shapr> dcoutts: Are you part of the haide project? The mailing list is regularly spammed.
12:00:30 <dcoutts> shapr, yeah, I don't notice due to my spam filters
12:00:48 <dcoutts> shapr, subscriber only you think?
12:01:01 <shapr> Seems like a good idea to me.
12:01:18 <shapr> Otherwise I'll unsubscribe, there's only spam these days.
12:01:39 <reppie-tan> so i tried to take a picture of my eye
12:01:41 <reppie-tan> but it didn't come out right
12:01:42 <reppie-tan> http://astraldream.net/~refugee/DSCN0340.JPG
12:02:08 <shapr> There are eye cameras.
12:02:36 <basti_> why would someone want to see your eye reppie-tan ?
12:02:50 <basti_> actually the left bit is sharp
12:02:52 <reppie-tan> it would be cool to see your own eye
12:03:03 <reppie-tan> yes, but i was hoping the center would be sharp
12:03:06 <basti_> "mirror"?
12:03:07 <basti_> :D
12:03:12 <reppie-tan> from up close
12:03:17 <basti_> mmmk
12:04:28 <reppie-tan> i think i'll try again later
12:06:49 <basti_> you should photograph with a small aperture and much light
12:06:50 <dcoutts> shapr, I've emailed Jonas, he's got the admin password.
12:07:23 <reppie-tan> basti_ ok
12:07:43 <dcoutts> shapr, yes, it's been a bit quiet the last couple years. I keep thinking aobut reviving it. However we'd probably host it somewhere else than SF since we'd want to be able to use darcs.
12:08:38 <basti_> that is a large aperture "number", but a small opening
12:09:13 <xerox> I'm learning haskell to two people, and I think I got other two interested in it, yay
12:09:18 <reppie-tan> basti_ what do you mean?
12:09:25 <Heffalump> xerox: s/learning/teaching/
12:09:29 <xerox> Ouch.
12:09:36 <xerox> Indeed, sorry.
12:10:38 <basti_> reppie-tan: in digital cameras it's mostly automatically adjusted or not adjusteable at all, but cameras should have a configurable shutter
12:10:50 <basti_> the tighter the shutter, the darker the picture, but the sharper it is also
12:10:56 <reppie-tan> it's adjustable on mine
12:11:15 <basti_> then you should choose a high number, or a small diameter
12:11:36 <basti_> confusingly the aperture number is inverse square of the diameter.
12:11:37 <reppie-tan> ok
12:11:38 <reppie-tan> i'll try
12:11:54 <basti_> (aperture numbers are usually 22, 11, 7.5...)
12:12:01 <basti_> "f-stop"
12:12:09 <basti_> f is the shorthand
12:18:01 <shapr> dcoutts: Thanks, I think it's a good idea to ressurect haide, maybe with Yi involved?
12:18:29 <shapr> resurrect*
12:19:47 <dcoutts> shapr, yes, see: http://haskell.org/hawiki/HaskellIde
12:23:38 <Defiler> Holy crap, people who work with me are still writing production code in Algol
12:23:46 <Defiler> I had no idea.
12:26:23 <shapr> Algol has its good points.
12:27:38 <Itkovian> well ... if yi is the internal editor for this IDE, I may consider using it instead of vim ...
12:27:55 <dcoutts> Itkovian, however it would be a GUI not a console app
12:27:57 * Itkovian wonders why not more IDE's offer vim as an editor choice
12:28:16 <dcoutts> integration into an 'external' editor is actually rather hard
12:28:17 <Itkovian> dcoutts: matters not, it's the key bindings I luurve
12:34:15 <Narrenschiff> I cannot remember which camera it was I used that had a depth-of-field preview switch. Kinda useful for f-stoppery.
12:34:52 <Itkovian> eh?
12:38:39 <Itkovian> bloody kernel
12:47:17 <CosmicRay> Narrenschiff: cannons often do.
12:47:21 <CosmicRay> shapr!
12:47:32 <CosmicRay> why are se discussing SLRs in #haskell, btw? ;-)
12:47:48 <CosmicRay> shapr: I saw in the logs that you're going back to school and moving?
13:06:02 <dcoutts> Lemmih, well after fighting with cabal for a bit I've got cabal-get emerged
13:08:06 <SyntaxNinja> you must not fight the cabal
13:08:21 <dcoutts> SyntaxNinja, oh, we've already got --with-hc-pkg=
13:08:49 <dcoutts> SyntaxNinja, so I'm using "./setup configure --with-hc-pkg=/usr/bin/true"  :-)
13:09:07 <SyntaxNinja> the multiple-versions-breaks-ghc is a ghc 6.4 bug, fixed in 6.4.1
13:09:33 <dcoutts> SyntaxNinja, ah but that doesn't help people building ghc 6.4.1 with 6.4 :-(
13:09:43 <SyntaxNinja> dcoutts: I think sdist works fine now, but not positive.  ppl should be using that; hackage will enforce certain behaviors of packages, like the tarballs should be named pkg-version.tgz and the directory it unpacks into should be pkg-version
13:10:05 <Lemmih> dcoutts: Cool!
13:10:05 <dcoutts> SyntaxNinja, that sounds great
13:10:12 <Heffalump> .tgz rather than .tar.gz ?
13:10:32 <dcoutts> SyntaxNinja, yes I think .tar.gz is more common
13:10:36 <SyntaxNinja> Heffalump: eh, I personally don't care, but whatever
13:10:41 <SyntaxNinja> I think tgz is more common :)
13:10:49 <tuomov> .tar.gz is more common
13:10:55 <tuomov> and what about .tar.bz2?
13:11:10 <tuomov> is there such a thing as .tbz2? I don't think so
13:11:15 <SyntaxNinja> I'm not as concerned about that part of it
13:11:28 <dcoutts> tuomov, "./setup sdist tbz2" perhaps?
13:11:43 <SyntaxNinja> the tarball name, but the pre-extension filename and the unpack-to directory name are the most important
13:11:48 <dcoutts> tuomov, yes .tbz2 files do exist. Gentoo binary packages are .tbz2 files.
13:11:52 <tuomov> dcoutts: I mean, does anyone actually use something else besides .tar.bz2 for such files?
13:12:08 <SyntaxNinja> I also wish tar would just unpack stuff, I can never remember the flag to pass to unzip a bz2 thing
13:12:22 <tuomov> and I prefer the separate extensions in any case
13:12:34 <dcoutts> SyntaxNinja, "tar -xjf" for bz2
13:12:35 <SyntaxNinja> but for now, I think probably tar.gz is all that'll work. ask lemmih, though
13:12:36 <SyntaxNinja> er, tgz
13:12:38 <Itkovian> tuomov: what's wrong with tbz2?
13:12:48 <SyntaxNinja> I'm sure it's simple to fix that
13:12:59 <tuomov> I just prefer separate extensions
13:13:09 <dcoutts> Lemmih, does hackage re-tar the packages or use the originals?
13:13:26 <Lemmih> It uses the original.
13:14:10 <dcoutts> Lemmih, so if people care then we should patch cabal sdist to make .tar.gz (or optinally .tar.bz2) files
13:14:25 <tuomov> the tar flag to uncompress .gz2 used to be something else, though. -y or -Y, I think
13:14:29 <tuomov> s/g/b/
13:14:53 <SyntaxNinja> tar is dumb. I just want to say "tar -xf filename" let it figure out wtf to do based on the extension
13:15:13 <dcoutts> SyntaxNinja, I agree
13:15:27 <tuomov> nah, it shouldn't do it based on extension
13:15:31 <tuomov> it should check the file
13:15:34 <SyntaxNinja> dcoutts: does cabal-get work for you?
13:15:39 <SyntaxNinja> tuomov: even better
13:15:43 <dcoutts> SyntaxNinja, jsut experimenting
13:16:15 <tuomov> tar flags and bash's advanced autocompletion features don't work well together
13:16:24 <tuomov> tar xzf foo<tab>
13:16:30 <tuomov> oops. it was an old version. the new was .bz2!
13:16:45 <tuomov> but bash completed the old .gz
13:17:40 <tuomov> thus I stick to simple file completion
13:18:23 <SyntaxNinja> how 'bout you, CosmicRay
13:18:33 <SyntaxNinja> shapr: alive?
13:19:47 <dcoutts> SyntaxNinja, so cabal-get info only tells about installed packages, not available packages? ie it doen't query hackage?
13:21:24 <SyntaxNinja> ask Lemmih
13:21:31 <dcoutts> Lemmih?
13:21:42 <Lemmih> dcoutts: It tells you about available packages without querying HackageDB.
13:22:09 <dcoutts> Lemmih, ok, next issue; cabal-get update doesn't create /etc/cabal-get
13:22:21 <dcoutts> Lemmih, so can't create /etc/cabal-get/pkg.list
13:22:36 <dcoutts> Lemmih, and when it does it gets exactly []
13:24:00 <SyntaxNinja> dcoutts: dot-cabal-get has files you can put there; I think this issue is fixed in the repo, but not the tarball
13:24:01 <Lemmih> Oh, right. /etc/cabal-get should have been created during the installation but that wont work with ebuilds...
13:24:17 <SyntaxNinja> Lemmih: because its a postinst hook?
13:24:39 <SyntaxNinja> hm. that should be fine
13:24:52 <dcoutts> Lemmih, it'll work fine, but it must do it relative to the install directory, not the real /
13:24:55 <Lemmih> Gentoo does some sandoxing which prevents suchs things, iirc.
13:25:01 <Lemmih> *sandboxing
13:25:46 <dcoutts> Lemmih, if it respects the "./setup copy --copy-prefix" then it will work fine
13:26:14 <dcoutts> Lemmih, it's the same issue as with autoconf, make install must respect the DESTDIR=... or whatever
13:27:14 <dcoutts> Lemmih, you'll have the same issue on debian, since the directory will not end up in the package image but exist only on the build system
13:27:31 <dcoutts> build system/build machine
13:28:30 <dcoutts> Lemmih, ok, so I created /etc/cabal-get/
13:28:55 <Lemmih> I'll remove the postInst hook and have cabal-get try to create the directory if it doesn't exist.
13:29:13 <dcoutts> now when I do cabal-get update, it creates /etc/cabal-get/pkg.list but it contains only []
13:29:37 <dcoutts> Lemmih, can the postInst hook not get at the value of from --copy-prefix=$FOO ?
13:30:17 <Lemmih> Write '["http://hackage.haskell.org/ModHackage/Hackage.hs?action=xmlrpc"]' in /etc/cabal-et/Serv.list
13:30:25 <dcoutts> Lemmih, ok...
13:30:42 <SyntaxNinja> dcoutts: or copy the dot-cabal-get files from the bootstrap thing
13:32:16 <dcoutts> ok, it's working now, I get a list of packages
13:32:54 <Lemmih> dcoutts: I should create [copy-prefix]/etc/cabal-geet?
13:33:04 * Lemmih can't spell 'get'.
13:33:16 <dcoutts> Lemmih, yes, that should work
13:34:23 <Lemmih> SyntaxNinja: Is buildDir from LocalBuildInfo the parsed arg of --copy-prefix?
13:34:53 <dcoutts> hmm, seems unlikely buildDir sounds like a build dir :-)
13:34:54 <SyntaxNinja> Lemmih: no, don't think so.
13:35:09 <SyntaxNinja> what does the hook get? args and localbuildinfo?
13:35:11 <dcoutts> SyntaxNinja, it is possible to get the copy prefix in the post inst hook?
13:35:25 <Lemmih> Then I'll have to do the parsing myself *sigh*
13:35:53 <SyntaxNinja> Lemmih: there's a parser built in, just use that one
13:36:12 <Lemmih> postInst :: Args -> InstallFlags -> LocalBuildInfo -> IO ...
13:36:19 <dcoutts> SyntaxNinja, we'll need to document the post inst hook / copy prefix thing. I've already found another package that doesn't use it (and hence installs things outside of the install image dir)
13:37:03 <Lemmih> 'postCopy' looks a lot better (:
13:37:56 <dcoutts> SyntaxNinja, on gentoo such packages will fail noisily, on debian I think it'd go unnoticed (but whatever the postInst hook does would happen on the build machine and not the target machine)
13:38:15 <SyntaxNinja> yeah
13:42:46 <dcoutts> Lemmih, when cabal-get is running as an ordinary user it should create the $HOME/.cabal-get/ directory itself
13:43:06 <SyntaxNinja> dcoutts: have you gotten it to do anything yet?
13:43:11 <Lemmih> I've uploaded the fixed cabal-get to HackageDB.
13:43:20 <dcoutts> SyntaxNinja, yes, something
13:43:43 <Lemmih> (without bumping the version number /-:)
13:44:16 <dcoutts> Lemmih, it would also be nice if cabal-get update would give some helpful message when there are no servers configured
13:46:38 <dcoutts> Lemmih, when it does fetch, it seems to strip the .tgz extension
13:47:09 <Lemmih> Kinda. It doesn't put it back on.
13:47:28 <dcoutts> Lemmih, why does it strip it in the first place?
13:48:37 <Lemmih> It's not there in the first place.
13:48:57 <dcoutts> hackage.haskell.org/packages/SDL-0.2.0.tgz
13:49:03 <dcoutts> it seems to be there :-)
13:50:04 <Lemmih> That file could be named SomeObscureFileName.trouble and so cabal-get ignores the filename and saves it under the package-id.
13:51:03 <dcoutts> Lemmih, is is necessary? It means onther tools can't use it so easily. Eg archive managers. Gnome's archive manager doesn't like it without the extension.
13:51:26 <Lemmih> We can save it as [package-id].tar.gz
13:52:05 <dcoutts> Lemmih, oh, I see it's saved by packae ID and not the original filename. Sorry, being slow.
13:52:19 <dcoutts> Lemmih, but yes, it would be nicer to give it the correct extension.
13:55:07 <dcoutts> Lemmih, do you want more stuff?
13:55:49 <Lemmih> Bring it on. Finished the file-ext and error message thingies.
13:56:24 <dcoutts> ok.. I'd suggest not using runhaskell Setup.lhs, but instead to compile the setup first
13:56:40 <Lemmih> Yeah, SyntaxNinja said the same thing.
13:56:48 <dcoutts> it means it'll work without runhaskell, and on archs where ghci doens't work
13:56:53 <Lemmih> It just sucks to do something special when building with GHC.
13:57:25 <dcoutts> or on slightly odd systems where the cabal was not built with ghci support (yes, that was my fault)
13:58:03 <dcoutts> and it'll be a tad faster
13:58:37 <dcoutts> and it'll work if the user has no version of cabal exposed
13:58:54 <dcoutts> actually, that last one is tricky
13:59:23 <SyntaxNinja> <--- mind-and-future reader
13:59:49 <dcoutts> in gentoo, our code for building the bootstrap is not trivial to deal with all the issues we found
14:00:28 * beelsebob sits down with a harumph
14:00:33 <dcoutts> we try Setup.lhs, then Setup.hs, and we specify an exact -package Cabal-x.y version
14:01:04 <dcoutts> this copes with there being multiple versions of cabal registered
14:01:16 <dcoutts> which happens all the time
14:01:25 <Heffalump> beelsebob: why are you harumphing?
14:01:26 <CosmicRay> SyntaxNinja: ran into trouble due to dep on a newer cabal than ships with debian
14:01:28 <dcoutts> the tricky bit is in finding out which version to specify
14:01:30 <CosmicRay> anyway, gotta run....
14:01:42 <beelsebob> heffalump: still being in the office at 10 pm
14:01:47 <Heffalump> ah.
14:01:48 <beelsebob> I'm writing my IFL paper
14:01:53 <SyntaxNinja> l8r co
14:02:52 <beelsebob> anyone want to play a new game I call "spot the incomprehensible bits in bob's paper"?
14:03:30 <dcoutts> Lemmih, for the moment you might make the not-unreasonable assumption that the user has some version of cabal exposed
14:04:16 <dcoutts> so just $HC Setup.(l)hs -o setup should be enough
14:05:31 <Heffalump> beelsebob: sure
14:05:39 <Heffalump> though I don't promise to read very carefully
14:06:05 <Lemmih> dcoutts: How about Hugs?
14:06:06 <Philippa> beelsebob: maybe. I may not be target audience though?
14:06:37 <dcoutts> Lemmih, well you can use runhugs, it's fairly reliable
14:07:33 <SyntaxNinja> dcoutts: so why not use -package Cabal? because ghc complains in that case? damn. I want ghc 6.4.1
14:08:19 <dcoutts> SyntaxNinja, exactly. We've got some vodo to work out the exact version to specify. But you can't use that because it relies on gentoo's package manager.
14:08:48 <Lemmih> I still don't like having special actions for GHC/nhc.
14:09:10 <dcoutts> Lemmih, it's not ideal, but it is practical.
14:10:23 <Lemmih> Wasn't 'runhaskell' created specifically for this task?
14:10:38 <dcoutts> Lemmih, yep, but it doesn't always work :-)
14:10:55 <dcoutts> and ghc 6.2.2 doesn't have runhackell
14:11:22 <dcoutts> or maybe that doesn't matter if cabal-get requires 6.4 anyway
14:12:25 <SyntaxNinja> eventually, everyone will have 6.4.1 and runhaskell and life will be sweeter
14:13:38 <boegel|home> y0
14:13:40 <Lemmih> dcoutts: I've uploaded cabal-get-0.2.1 with the changes you requested.
14:13:45 <boegel|home> Itkovian: how's the parser going ?
14:13:51 <Lemmih> (except the runhaskell thingy)
14:13:51 <dcoutts> Lemmih, cool, let me try...
14:13:52 <boegel|home> dcoutts: any new screenshots?
14:14:11 <dcoutts> boegel|home, no, sorry
14:14:30 <Itkovian> boegel|home: haven't continued tonight ... busy with my kernel that seems to be fubar
14:14:40 <Itkovian> btw, Brugge got nor de CL!
14:14:54 <dcoutts> Lemmih, does hackage enforce that people can't upload new tarballs without bumping the version number?
14:15:12 <boegel|home> Itkovian: yeah, just saw it :) I love penalty's
14:15:21 <boegel|home> or how do you call that in English :)
14:15:21 <Lemmih> dcoutts: No, package owners are allowed to update their packages.
14:15:33 <boegel|home> dcoutts: ok, I was just wondering ;)
14:15:47 <boegel|home> Itkovian: your 1600â¬ kernel ? :p
14:15:59 <Itkovian> nope, my free kernel
14:16:01 <dcoutts> Lemmih, that doesn't help packagers much. since it means we can't rely on the md5sums not changing
14:16:41 <Lemmih> dcoutts: Oki, I'll disable the updating.
14:16:44 <boegel|home> Itkovian: on your 1600â¬ machine... :p
14:16:48 <dcoutts> Lemmih, it means that a user might emerge and find that the md5sums do not match and so the install will abort and we'll get a bug report
14:17:15 <dcoutts> Lemmih, that would be great thanks.
14:17:41 <dcoutts> stable urls/md5sums are quite important
14:18:56 * boegel|home leaves for his nice warm bed
14:19:02 <boegel|home> g'night everyone
14:19:05 <SyntaxNinja> Lemmih: can you also patch cabal-get-bootstrap?
14:21:38 <xerox> @version
14:21:39 <lambdabot> lambdabot 3p73, GHC 6.5 (OpenBSD i386)
14:21:39 <lambdabot> darcs get http://www.cse.unsw.edu.au/~dons/lambdabot
14:21:52 <Lemmih> SyntaxNinja: Where's the repo again?
14:22:17 <SyntaxNinja> http://hackage.haskell.org/darcs/cabal-get-bootstrap/
14:28:07 <lispy> @where+ cabal-get http://hackage.haskell.org/darcs/cabal-get-bootstrap/
14:28:08 <lambdabot> cabal-get ~> http://hackage.haskell.org/darcs/cabal-get-bootstrap/
14:28:29 <SyntaxNinja> caaaaaaabal get yay
14:30:07 <dcoutts> Lemmih, if you're compiling the setup prog, make sure to use ghc --make (or for example cabal-get's Setup.lhs will not link correctly)
14:30:55 <dcoutts> $ cabal-get --version
14:30:56 <dcoutts> No command given (try --help)
14:31:12 <dcoutts> might be nice to have a version
14:32:36 * Lemmih is up to his neck in work.
14:32:47 <dcoutts> Lemmih, I can stop if you like?
14:33:59 <Lemmih> Feel free to mail me suggestions.
14:34:09 <dcoutts> Lemmih, ok
14:34:40 <dcoutts> btw the creating  /etc/cabal-get isn't quite working, I'm trying to figure out why
14:35:01 <SyntaxNinja> dcoutts: theree's a tod list on the wiki :)
14:35:11 <SyntaxNinja> slap stuff up there!
14:35:13 <dcoutts> SyntaxNinja, where?
14:35:14 <SyntaxNinja> and then do it ;)
14:35:20 <SyntaxNinja> @wiki Hackage/TODO
14:35:20 <lambdabot> http://www.haskell.org/hawiki/Hackage/TODO
14:35:28 <dcoutts> ta
14:38:23 <xerox> Symptom: forall <foo>. @type <foo> == bzzt
14:38:31 <xerox> What could be the diagnosis?
14:39:13 <dcoutts> Lemmih, ah, found it. It's not creating the dir: prefix `joinFileName` "/etc" so the installConfigAt globalDir bit fails
14:44:15 <yeti_> not too sure about that one: is a 'column' in general horizontally or vertically?
14:44:27 <yeti_> (i'm not a native speaker)
14:44:58 <Lemmih> dcoutts: Ah.
14:45:09 <dcoutts> Lemmih, where should I send patches?
14:45:50 <Lemmih> http://hackage.haskell.org/darcs/cabal-get, I think.
14:45:53 <Igloo> vertical
14:46:37 <Lemmih> dcoutts: There's also http://scannedinavian.org/~lemmih/cabal-get-stable if the above URL isn't a repo.
14:47:38 <dcoutts> Lemmih, the repo is fine. There's no default email address however.
14:47:48 <dcoutts> Where should I send the patch?
14:50:46 <SyntaxNinja> send it to lemmih
14:52:10 <xerox> dons: ping
14:57:25 <xerox> @where hoogle
14:57:27 <lambdabot> I know nothing about hoogle.
14:57:30 <xerox> Ouch!
14:58:47 <jlouis> @help hoogle
14:58:48 <lambdabot>  @hoogle <expr>, Haskell API Search for either names, or types.
14:59:04 <jlouis> hoogle is part of lambdabot
14:59:06 <jlouis> @version
14:59:07 <lambdabot> lambdabot 3p73, GHC 6.5 (OpenBSD i386)
14:59:07 <lambdabot> darcs get http://www.cse.unsw.edu.au/~dons/lambdabot
14:59:12 <jlouis> you can darcs get it ;)
14:59:21 <xerox> It seems it is not
14:59:34 <jlouis> ehm?
14:59:44 <xerox> When I first wrote the Plugins/Hoogle module i used pOpen on the hoogle binary.
14:59:49 <xerox> Dunno if it changed
15:00:04 <jlouis> heh
15:00:11 <jlouis> yes
15:00:14 <xerox> ./Plugins/Hoogle.hs:43:hoogle :: String -> IO [String]
15:00:15 <xerox> ./Plugins/Hoogle.hs:44:hoogle src = do (out,err,_) <- popen binary [src] (Just "")
15:00:20 <xerox> :-)
15:00:21 <jlouis> no clue then
15:00:35 <xerox> It seems ndm doesn't have a darcs repository no more, tough
15:04:18 <lispy> heh, no darcs, no patches
15:04:34 <lispy> i wish darcs was better about conflict markers
15:05:25 <sieni> Two popular questions for today:
15:05:37 <lispy> V V V V V  -- Your changes .... ********** ... ^ ^ ^ ^ ^ ^ ^ -- Conflicting changes
15:05:46 <sieni> Should I use ghc or sml/nj for my editor project?
15:05:47 <sieni> and
15:05:59 <lispy> long live Yi!
15:06:05 <sieni> Should I use darcs or monotone for its version control?
15:06:24 <lispy> 1) make a plugin for Yi 2) use darcs :)
15:06:28 <SyntaxNinja> sieni: ghc, darcs. why are you asking us? :)
15:06:42 <sieni> Well, actually if I really planned of using Haskell, I would just patch Yi ;-)
15:08:05 <sieni> SyntaxNinja: Nothing special, except trying to start a fragfest in the style of  http://www.starwreck.com/media/itp/star_wreck_itp_trailer_mpeg1.mpg
15:08:06 <lispy> i wish there was a group of about 5-6 people who had nothing better to do than improve darcs all day.
15:08:23 <reppie-tan> http://astraldream.net/~refugee/DSCN0353.JPG
15:09:11 <lispy> darcs is progressing nicely, but the development is slow sometimes, and i know i barely have time to hack on it
15:09:31 <lispy> so we need a corporate sponsor for darcs :)
15:09:39 <SyntaxNinja> down with darcs, up with cabal!
15:09:54 <sieni> lispy: are you david?
15:09:59 <lispy> sieni: no
15:10:14 <lispy> sieni: we as in, the community of darcs users
15:10:29 <rt> all you need to do is write it in C, and I'm sure it will be very popular. :-)
15:10:42 <sieni> lispy: ok, I was just wondering, that if you were, why on earth would your nick be "lispy" ;-)
15:10:45 <lispy> rt: yes, and unstable for the next 10 years ;)
15:11:20 <rt> it hardly matters if nobody runs it.
15:11:35 <tuomov> it's not all that unpopular, you know
15:12:00 <tuomov> sure there are some idiots who refuse to use it because it's not C, but they can be ignored
15:12:17 <lispy> tuomov: well, the fact that most potential contributors don't want use/learn haskell is a problem
15:12:22 <sieni> tuomov: which, darcs?
15:12:41 <tuomov> that
15:13:11 <tuomov> lispy: a programmer who can't quickly pick up the language probably shouldn't touch the code anyway
15:13:38 <lispy> the problem isn't picking up the language, it's wanting to pickup the language
15:14:06 <lispy> most of the tools people are making for darcs are add-ons
15:14:08 <SyntaxNinja> lispy: lazy heads
15:14:30 <lispy> SyntaxNinja: i think saying they are lazy is over simplifying it :)
15:14:39 <lispy> people become invested
15:14:52 <lispy> they don't want to have to keep learning something new all the time
15:14:57 <yeti_> anyone willing to look at some horrible but quite well commented newbie haskell code and help me with an error? :) if yes: http://yeti.yefx.net/Sudoku.hs (error message included at the bottom)
15:15:36 <lispy> i'm not suggesting that darcs should be written in anything but haskell.
15:16:13 <lispy> but, unless the haskell community uses it, works out the bugs and contributes as much as they can, darcs will mature slowly
15:16:25 <Heffalump> try giving checkSquare an explicit type signature
15:16:39 <Heffalump> the error message is saying that it can't figure out what to default one of the arguments to
15:17:00 <SyntaxNinja> lispy: I really think it's up to the darcs community to improve darcs.  I think if they are really interested in advancing it, then they should learn some Haskell.
15:17:03 <tuomov> it's an attitude problem really. pickup up a language isn't much different from picking up the api for a new library.. or a program
15:17:14 <Heffalump> I can't remember if there are any things in RealFrac and Integral (I suspect not), but the explicit type signature will help you narrow down the specific problem.
15:17:15 <lispy> if darcs was written in C/C++ then a smaller percentage of c/c++ developers could get interested, and the over all contribution would still the the potential to be greater
15:18:22 <sieni> just if the syntax was more lispy... :-)
15:18:47 <tuomov> fortunately it is not :)
15:18:51 <lispy> SyntaxNinja: yeah, and that's why it's sad when the lispers that use darcs want to write a competing tool in lisp.  They are already fp'ers. They should just learn some haskell and help out :)
15:19:42 <tuomov> sigh. language fundamentalism is lame.
15:20:12 <xerox> =)
15:20:32 <_metaperl> yeti_: that code has nice syntax highlighting
15:21:06 <tuomov> I get complained to once every two weeks or so that Ion shouldn't use Lua but Python..
15:21:33 <yeti_> _metaperl: huh? it's plaintext
15:21:33 <sieni> tuomov: not python!!! sml!!!
15:21:52 <tuomov> lisp is often suggested as well.
15:22:07 <_metaperl> yeti_: oh, it must be Konqueror rendering it like that ... anyway, I am more than a beginner than you, so I can't help. when these people finish their convo, I'm sure they will help you
15:22:12 <_metaperl> otherwise post to Haskell-cafe
15:22:38 <yeti_> _metaperl: Heffalump is already helping me
15:22:39 <lispy> _metaperl: i didn't look because i think Heffalump already suggested a fix :)
15:22:57 <yeti_> _metaperl: and yeah, it's konqueror that highlights the code :)
15:23:30 <tuomov> some people apparently have too much free time on their hands if they can waste the time rewriting things in their favourite language
15:23:34 <yeti_> i just have to read up on giving functions explicit type signatures. ghci is complaining if i do it the way i thought it worked =)
15:23:47 * Heffalump is not necessarily continuing to look at it if more problems arise, so otherpeople should jump in if they feel like it
15:23:54 <lispy> tuomov: indeed
15:24:11 <Heffalump> yeti_: checkSquare :: Int -> Int -> [[Field]] ->Int -> Int
15:24:16 <Heffalump> is the way you seem to be trying to use it
15:24:58 <lispy> is [[Field]] essentially a two dimesional array?
15:25:06 <yeti_> yep
15:25:25 <SyntaxNinja> lispy: yeah... I guess I just don't think that learning a new language is a big deal, but lots of people seem to think it is. that's what bothers me.
15:25:29 <greenrd> tuomov: you could say the same about yi; obvious counterargument would be that the new design of yi makes it an easier-to-extend editor; obvious counter-counter-argument would be that's exactly analogous to what the "rewrite it in my language" people (including me) would say about their rewrites
15:25:43 <yeti_> Heffalump: "    Kind error: `Field' is not applied to enough type arguments"
15:25:50 <yeti_>     In the type: Int -> Int -> [[Field]] -> Int -> Int -> Bool
15:26:23 <lispy> greenrd: yeah, it's a bit different since yi had explicit goals from the beginning to do certain things better
15:26:25 <Heffalump> sorry, Field Int
15:26:31 <Heffalump> rather than Field
15:26:35 <lispy> greenrd: but that's a good point hat the distinction is fuzzy
15:26:40 <greenrd> lispy: yeah
15:26:46 <greenrd> lispy: I think we are in violent agreement
15:26:50 <SyntaxNinja> but Yi has other things going for it; emacs is just too big to refactor
15:27:00 <greenrd> heh
15:27:09 <lispy> SyntaxNinja: and to refactor emacs you'd have to fork it
15:27:16 <SyntaxNinja> yeah
15:27:19 <yeti_> Heffalump: okay, now "No instance for (RealFrac Int)" =) seems like there's a problem with the floor() funktion in belongstoSquare
15:27:45 <lispy> yeti_: try putting a fromIntegral around things
15:27:55 <Heffalump> what type do you think belongsToSquare should have?
15:28:17 <Heffalump> oh, I suggest using col `div` size instead of floor (col/size)
15:28:18 * lispy hushes up
15:28:24 <yeti_> Int -> Int -> Int -> (Int, Int)
15:28:38 <sieni> greenrd: I hope Yi will fix all the crap that emacs has with trivial things like buffer/minibuffer/frame/window handling that is totally broken and does not seem to be easily fixable
15:28:41 <Heffalump> lispy: that's a convenient hack I've employed on a number of occasions, but it's not good practice without understanding the situation first :-)
15:28:50 <Heffalump> yeti_: ok, definitely use `div`
15:29:50 <lispy> Heffalump: yeah, i realized that right after i let the world escape my keyboard ;)
15:29:58 <lispy> er words not world
15:30:57 <tuomov> if you want to do something fundamentally differently and not just change the language, then there's some point in a rewrite
15:31:49 <tuomov> of course, it remains to be seen if the design is really that different in the end
15:31:55 <lispy> right, and normally you'd want to contribute to an existing project which is similar
15:32:10 <yeti_> Heffalump: cool! thank you :D
15:33:10 <lispy> it's healthy to have lots of competing projects that influence each other, but it's not good to spread the contributions extremely thin between otherwise related projects
15:33:26 <sieni> tuomov: With emacs I'm mostly annoyed with problems that seems to be caused by the fact that some context-related events are not handled properly. And the fact that emacs lisp is dynamically scoped, which encourages such breakage
15:33:34 <tuomov> the amount of window managers is insane :)
15:33:48 <lispy> tuomov: yes
15:33:53 <lispy> tuomov: ;)
15:34:14 <sieni> Like: the minibufffer context should be window-specific, but it is not.
15:34:42 <lispy> sieni: i'd say frame specific
15:34:49 <lispy> sieni: or is that what you mean by window?
15:34:56 <tuomov> personally, the original PWM I could probably have hacked over something, but then again it was a learning experience; my first proper X program
15:35:12 <tuomov> Ion, on the other hand, is so different from anything else even in internal design
15:35:14 <sieni> lispy: also inside a frame
15:35:28 <tuomov> it's over-engineered bloatware :)
15:35:56 <sieni> tuomov: does sawfish also suck? ;-)
15:36:02 <lispy> heh
15:36:16 <lispy> sieni: sawfish is cool, but librep is a terrible lisp implementation
15:36:24 <tuomov> sieni: I'm not familiar with it
15:36:29 * Heffalump tries out yi
15:36:39 <lispy> Heffalump: long live yi!
15:37:04 <SyntaxNinja> how do you pronounce yi?
15:37:05 <lispy> Heffalump: i have a (broken) patch that adds support for lines longer than 80 characters
15:37:22 <sieni> SyntaxNinja: just like the Finns do
15:37:27 <lispy> SyntaxNinja: i don't think dons has mandated any particular way
15:37:31 <tuomov> anyway, there are a zillion window manager that differer very little from each other and yet, a new one appear once a month or so
15:37:37 <sieni> SyntaxNinja: Like "yli", but without the "l"
15:37:49 <tuomov> and nobody uses them
15:37:54 <lispy> sieni: er?
15:37:59 <Heffalump> oh, is it a text-mode editor?
15:38:03 <lispy> i say it y-i
15:38:07 <tuomov> only ion, larswm and wmi(i) really stand out from the masses and do have some life to them
15:38:16 <lispy> Heffalump: yes, but you're welcome to add gtk support ;)
15:38:39 <Heffalump> why does it behave like vi? :-(
15:38:43 <lispy> tuomov: i like E and sawfish
15:39:04 <tuomov> but they're not all that different from everything else out there, are they?
15:39:04 <lispy> Heffalump: yi --as=mg
15:39:12 <lispy> Heffalump: that will make it behave like emacs
15:39:14 <yeti_> i don't want to spoil or interrupt the conversation, but as i see tuomov around here, i'd like to mention that i've been using ion3 for over a year now and like it very much
15:39:24 <lispy> tuomov: sawfish is quite different
15:39:25 <tuomov> E used to be the WM with the fancy themes but now everyting has them
15:39:37 <tuomov> (except ion :)
15:39:51 <lispy> tuomov: it's extensible in lisp, and E tends to just work the way i want without massive configing
15:39:54 <SyntaxNinja> lispy: you mean like 'why eye'
15:40:03 <lispy> SyntaxNinja: yeah
15:40:26 <tuomov> lispy: is sawfish really configured that different normally, is it just that it can be?
15:40:45 <lispy> tuomov: it is configured entirely through lisp
15:40:59 * Igloo rhymes it with vi (as in "vie for control")
15:41:22 <tuomov> I mean, if you're given two computers one running sawfish and one e.g. metacity, do you notice the difference without checking it somewhere?
15:41:34 * sieni wonders if one should watch the "star wreck" trailer once more or go sleeping
15:41:54 <lispy> tuomov: since you mention metacity, yes.  In metacity you cannot move a window off the top of the screen (how annoying!!!)
15:41:55 <liyang> I can't say it at all seeing as Yi is my dad's name. <_<
15:42:06 <tuomov> anyhow, all these are major window managers. there are a zillion wannabe-enlightenments out there that probably no-one uses
15:42:14 <lispy> tuomov: but, the default setup of sawfish is very similar to metacity
15:43:15 <lispy> tuomov: but, with sawfish i have several extesions people have written.  One nice one is "waffle" I hit a key combo then i can type in a regexp to switch to a program that is possible on a different desktop
15:43:52 <lispy> waffle is quite nice for jumping between programs and workflows
15:44:21 <sieni> tuomov: I think you could just implement most of ion functionality in sawfish (in this rep liap)
15:44:48 <liyang> I like the being able to move / align windows with a single keystroke feature.
15:44:54 <liyang> (in Sawfish.)
15:44:58 <lispy> waffle behaves the same as emacs's iswitchb if that helps
15:45:20 <tuomov> sieni: but how much work that would be? exactly as much as writing ion in c?
15:45:26 <liyang> I end up doing my window layout pretty much like what ion would do anyway.
15:45:40 * lispy should try ion
15:46:03 <liyang> It's not flashy enough for me. :)
15:46:14 * liyang needs something to burn up all those spare CPU cycles.
15:46:15 <sieni> tuomov: Well, at least one would have something lispish as the configuration language ;-)
15:46:16 <lispy> i really wish gnome didn't force you to use metacity
15:46:27 <tuomov> sieni: I prefer Lu a:)
15:46:28 <xerox> I would like smooth fonts on ion, but tuomov doesn't agree :)
15:46:32 <liyang> lispy: it doesn't... it's just the default.
15:46:41 <lispy> liyang: try to change it
15:46:45 <tuomov> xerox: write an additional drawing engine :)
15:46:48 <liyang> lispy: I have done. :)
15:46:53 <lispy> liyang: it's not really supported
15:46:57 <tuomov> there's been attempts at one, but nobody has done it correctly yet
15:47:17 <lispy> i used an .xsession, iirc to start sawfish then gnome that was the only way i colud force it
15:47:18 <liyang> lispy: set WINDOW_MANAGER to sawfish in your .Xsession.
15:47:46 <liyang> It's documented... somewhere. :-/
15:47:56 <lispy> liyang: all, right i'll try that in september when i get back to school
15:48:02 * xerox wants luminocity - blubb blubb
15:48:16 <lispy> i googled a bunch but mostly all i got was people whinning on the ML about metacity
15:48:34 * lispy never understood why they switch from sawfish to metacity
15:48:46 <liyang> lispy: I don't think there's a nice point-and-clickey way to choose though. GDM might do, I haven't tried that route.
15:49:05 <liyang> lispy: because most people are perfectly happy with metacity?
15:49:37 <lispy> but metacity is so lacking...and the thing about not letting you go off the top of the screen is ridiculous
15:49:41 <yeti_> xerox: why have smooth fonts on ion when you can have cool fonts on ion that look good even if they're not smooth :D : http://yeti.yefx.net/ionfonts.png
15:49:54 <liyang> Try introducing a non-Linux user to sawfish. It's far too overwhelming.
15:50:12 <xerox> yeti_: s/cool/small/
15:50:13 <liyang> lispy: but if you're not happy then you can change...
15:50:24 <yeti_> xerox: small==cool :>
15:50:40 <sieni> when the parentheses disappear, you realize that all languages should use lisp syntax ;-)
15:50:41 <tuomov> gnome is otherwise so bloated so they had to cut down on the wm :)
15:50:44 <yeti_> xerox: how am i supposed all that stuff on my screen if i have a big font :) ?
15:50:48 <xerox> cool = cool :P
15:50:50 <yeti_> *to fit
15:51:06 <xerox> yeti_: that's a good point, I like my windows to be fullscreen too.
15:51:07 <tuomov> and stripping down the wm fits their goal of emulating windows
15:51:25 <yeti_> 00:52:42 < xerox> cool = cool <= now that's a ... how do you call it in haskell... non-terminating expression :> ?
15:51:28 <xerox> ...and I can't do it on GNOME, except for a few apps (that are gnome-terminal, firefox, evince, ..)
15:51:44 <xerox> yeti_: Haskell is lazy :)
15:51:47 <dcoutts> SyntaxNinja, I've sent you yet another cabal patch.
15:52:15 <dcoutts> SyntaxNinja, it's a tweak rather than a bug fix.
15:52:53 <xerox> yeti_: you are threatening me... I was an ion user!  I could resume it after this SoC thing.
15:53:17 <yeti_> SoC?
15:53:18 <xerox> The thing I most miss is a fullscreen Emacs ^_^
15:53:25 <SyntaxNinja> dcoutts: thanks
15:53:41 <sieni> Well, I'm using only gnome-panel with my sawfish, which seem to coooperate pretty nicely
15:57:46 <shapr> SyntaxNinja: yes?
16:05:29 <xerox> G'day Pseudonym.
16:06:01 <Pseudonym> G'day.
16:11:52 <xerox> Cannot import `Language.Hi.Parser':
16:11:52 <xerox>   it was found in multiple packages: plugins-0.9.10 hi-0.9.10
16:11:52 <xerox> make: *** [build] Error 1
16:11:57 <xerox> Which is the wrong one?
16:12:52 <Igloo> Hmm, if I interleave 2 transactions with SQLite then one (reasonably) has all its inserts fail with busy, but the other has its commit fail with busy, so nothing happens
16:13:30 <cyanite> pretty poor handling from the DB if it lets it play out like that.
16:14:44 <Igloo> I guess I can lock the DB access myself. I don't really have another reasonable option, I don't think
16:14:47 <lispy> Igloo: is it because of the way sqlite does locking?
16:15:21 <lispy> if you need concurret db access they say they are not the best choice...
16:15:27 <lispy> concurrent*
16:15:36 <Igloo> I'm tempted to think it's a bug, but I'm not sure
16:16:17 <lispy> i'd check the sqlite site, seemed like they had a lot of documentation and examples
16:16:29 <Igloo> I've read most of that
16:16:32 <lispy> njs might also be a good person to ask
16:16:40 <lispy> they use sqlite in monotone
16:20:09 <greenrd> "fail with busy"? What is this nonsense? Is there a non-blocking flag on your transaction, and if so, why?
16:20:25 <greenrd> "fail with busy" shouldn't happen in the first place
16:21:14 <DarkSSJ> hi all
16:21:18 <xerox> Hi :-)
16:22:10 <dcoutts> DarkSSJ, so you can use our snapshot ebuild or grab a binary snapshot from the ghc website
16:22:34 <DarkSSJ> dcoutts, I'm going to use your ebuild
16:22:52 <dcoutts> DarkSSJ, or if you don't feel like doing either, then you can wait for the 6.4.1 ebuild to get into portage
16:24:45 <sieni> np: Rush - Crossroads (cover)
16:24:58 * heatsink decides that weakrefs would be useful if ever I needed to write an out-of-core algorithm
16:25:05 <DarkSSJ> dcoutts, how many time is required to build it?
16:25:11 <xerox> NP: Otis Redding - Cigarettes & Coffee
16:25:35 <dcoutts> DarkSSJ, on my amd64 it takes over 2 hours I think
16:25:46 <DarkSSJ> oh o_O
16:26:00 <dcoutts> or about that long, I can't quite remember
16:26:13 <xerox> He was wondering why does GHC take so long to compile :)
16:26:25 <xerox> I couldn't gave him a thoughtfully answer.
16:26:32 <xerox> give, even
16:26:39 <xerox> or gave? err, ok :)
16:26:48 <DarkSSJ> and I'd like to know why I get
16:26:49 <DarkSSJ> $ /opt/ghc/bin/ghci-6.4
16:26:50 <DarkSSJ> ghc-6.4: not built for interactive use
16:26:56 <DarkSSJ> this with the binary package
16:27:09 <dcoutts> DarkSSJ, because ghci doesn't work on amd64 in ghc 6.4
16:27:35 <dcoutts> DarkSSJ, it will work in ghc 6.4.1 (and the 6.4.1 pre-releases)
16:28:13 <DarkSSJ> that sounds strange
16:28:30 <DarkSSJ> anyway, I will wait for 6.4.1
16:29:22 <dcoutts> ghc takes so long to build because it's large, and it builds itself twice (or is it 3 times?) and it builds a large collection of libraries. And it builds using optimisations and ghc compiles much slower when using optimisations.
16:30:16 <DarkSSJ> maybe some overclocking could help... :)
16:30:30 <dcoutts> DarkSSJ, if you have haskell questions that are specific to gentoo you can ask in #gentoo-haskell
16:30:40 <DarkSSJ> uhm?
16:30:50 <DarkSSJ> that's good :)
16:31:32 <dcoutts> it saves us from bothering people on #haskell too much :-)
16:32:12 <Igloo> Twice, by default
16:35:31 <lispy> @type all
16:35:36 <lambdabot> forall a. (a -> Bool) -> [a] -> Bool
16:39:18 <dcoutts> Igloo, right, so when does it do it three times?
16:39:36 <Igloo> When you tell it to
16:39:51 <Igloo> I think the nightly builds do, to check the stage 2 compiler (probably) works
16:39:53 <dcoutts> oh :-)
16:40:54 <yosemite> oh wow, I wrote something and (map test ls), when I should have used all
16:41:10 <yosemite> haha for wheel reinventing
16:41:17 <Heffalump> does it try to converge it?
16:41:32 <Heffalump> yosemite: hardly a massive waste of code :-)
16:41:40 <TheHunter> @pl and (map test ls)
16:41:41 <lambdabot> all test ls
16:42:05 <Heffalump> @pl or (map test ls)
16:42:06 <yosemite> neat I didn't know lbot did that
16:42:06 <lambdabot> any test ls
16:42:14 <Heffalump> @pl foldr (:) [] ls
16:42:15 <lambdabot> foldr (:) [] ls
16:42:19 <Heffalump> aww
16:42:26 <Heffalump> @pl foldr ((:).test) [] ls
16:42:27 <lambdabot> foldr ((:) . test) [] ls
16:42:40 <yosemite> isn't that one reverse?
16:42:52 <yosemite> I always get stuck with fold[lr]
16:42:55 <Heffalump> no, the first one is the identity function on lists, and the second one is map
16:43:02 <yosemite> ahh
16:43:13 <TheHunter> it's already on the list.
16:43:20 <Heffalump> @pl foldr (\a b -> b ++ [a]) [] xs
16:43:21 <lambdabot> foldr (flip (++) . return) [] xs
16:43:32 <Heffalump> "on the list"?
16:43:48 <TheHunter> "on the list" of rules i wanna implement.
16:44:00 <Heffalump> ah
16:44:44 <Heffalump> @pl foldr (\a f -> f.(a:)) id xs []
16:44:45 <lambdabot> foldr (flip (.) . (:)) id xs []
16:45:18 <Heffalump> lambdabot clearly needs teaching the varied forms of reverse ;-)
16:45:52 <xerox> @pl \xs -> foldl (flip (:)) [] xs
16:45:53 <lambdabot> foldl (flip (:)) []
16:47:02 <Heffalump> @pl reverse . reverse
16:47:03 <lambdabot> reverse . reverse
16:47:36 <Igloo> That's about as simple as it gets, given infinite lists
16:47:46 * Heffalump tries to remember why the obvious proof by induction that reverse . reverse = id is fallacious. I guess the proposition isn't chain-complete.
16:47:55 <Heffalump> igloo: yes, I was trying to trip lambabot up
16:48:00 <Igloo> chain-complete?
16:48:06 <Pseudonym> Heffalump: What's the proof?
16:48:20 <Pseudonym> I know it's obviously not true if you give an infinite list.
16:48:33 <Heffalump> base case for finite lists: (reverse . reverse) [] = []
16:48:38 <Pseudonym> Right.
16:48:45 <Heffalump> base case for infinite lists: (reverse . reverse) _|_ = _|_
16:48:56 <Pseudonym> Hang on.
16:49:04 <Pseudonym> _|_ isn't an infinite list.
16:49:09 <Pseudonym> id on an infinite list makes perfect sense.
16:49:11 <Heffalump> oh, my step case is broken anyway. Don't mind me.
16:49:38 <Heffalump> no, but the way you prove things by induction for infinite lists is to use _|_ as a base case.
16:50:02 <Pseudonym> Hmmm.
16:50:28 <Pseudonym> I don't see how that helps.
16:50:28 <Heffalump> I was talking rubbish anyway, because the step case isn't doable.
16:50:31 <Pseudonym> Right.
16:50:51 <Heffalump> igloo: I can't remember. But you're closer to having done the FP course than me, so you should remember better.
16:50:58 <Pseudonym> Have you seen the paper on fast and loose reasoning?
16:51:06 <Heffalump> Jeremy Gibbons' one?
16:51:12 <Heffalump> I skimmed it.
16:51:13 <Pseudonym> Yeah.
16:51:21 <Igloo> Heh, fair enough. I don't think I even recognise the term
16:52:00 <Heffalump> igloo: Wait till I tell Richard Bird.
16:52:20 * Igloo waits
16:53:52 <nanosync> is there a lambdabot2 rpm avail?
16:54:51 <xerox> @version
16:54:53 <lambdabot> lambdabot 3p73, GHC 6.5 (OpenBSD i386)
16:54:53 <lambdabot> darcs get http://www.cse.unsw.edu.au/~dons/lambdabot
16:55:00 <xerox> Nope, you could darcs get the sources, tough.
16:55:08 <xerox> Err, at least for what I know.
16:56:19 <Heffalump> do you mean 'though', rather than 'tough'? They have rather different meanings :-)
16:56:59 <xerox> err.
17:23:22 <psi> can anyone think of any reason why my gtk2hs-program terminates after executing the IO action associated with an onEntryActivate signal?
17:23:38 <psi> the IO action is simply '(entryGetText entry >>= Telnet.sendLine conn >> entrySetText entry "")'
17:24:15 <psi> there is no error message of any kind
17:34:44 * DarkSSJ is going to sleep, see you
17:46:38 <nanosync> [root@nanosync haskell-src-exts]# runhaskell Setup.hs build
17:46:38 <nanosync> Preprocessing library haskell-src-exts-0.2...
17:46:38 <nanosync> Language/Haskell/Hsx/Parser.ly: no happy preprocessor available
17:49:15 <ozone> nanosync: you need happy installed
17:54:22 <Korollary> mwc: did you figure out the typeclass problem by yourself ?
17:55:08 <mwc> Korollary, no, just getting back to it now
17:56:11 <Korollary> mwc: would you like me to spoil it for you ? ;)
17:56:34 <nanosync> wilx - 1
17:56:35 <nanosync> oops
17:58:10 <mwc> Korollary, would you?
17:58:10 <SyntaxNinja> hi CosmicRay
17:58:55 <mwc> I don't think it has anything to do with the mangitude type being a 'type' definition, since putting in (Complex Double) causes the same error
17:58:58 <CosmicRay> in syntaxninja
17:59:15 <CosmicRay> SyntaxNinja: my attempt to get the cabal-get going stalled with the apparent requirement for a newer cabal
17:59:26 <Korollary> mwc: The report says "The type (T u1 ... uk) must take the form of a type constructor T applied to *simple* type variables u1, ... uk;" for instance declarations.
17:59:28 <CosmicRay> SyntaxNinja: also it would appear that you are not checking exit codes from calling external programs ;-)
17:59:50 <SyntaxNinja> sometimes, yeah
18:00:13 <mwc> Korollary, yeah, but Instance State (Map Int (Complex Double)) fails too
18:00:25 <Igloo> CosmicRay: Is your SQLite thing in Haskell? And if so, what are you using to interface with it?
18:00:59 <mwc> I don't see how I can get it any simpler than that :P
18:01:26 <CosmicRay> Igloo: Yes.  I am using the new HSQL's interface to Sqlite3
18:01:33 <Igloo> OK, ta
18:01:41 <CosmicRay> Igloo: darcs get http://darcs.complete.org/media-index if you want to see what I have so far
18:01:42 <Igloo> (new as in 1.6, right?)
18:01:48 <CosmicRay> it's very much a work in progress, but it builds
18:01:52 <CosmicRay> relevant code is in FileDB/DB.hs
18:01:53 <CosmicRay> correct
18:02:22 <CosmicRay> fairly easy to use, really.
18:02:30 <CosmicRay> Igloo: that is also present in sid, btw.
18:02:31 <Igloo> CosmicRay: BTW, you might be interested in this: http://urchin.earth.li/~ian/foo.c produces the output http://urchin.earth.li/~ian/foo.txt and adds no rows to the database
18:04:06 <CosmicRay> what does the return code from sqlite3_exec signify?
18:04:51 <CosmicRay> and this is interesting, I thought I read that sqlite always locks its db files with an exclusive lock.
18:05:05 <Korollary> mwc: (Map a b) works. I think the standard wants "type variables" for a, b, c; not types.
18:05:24 <Igloo> Oh, 0 is OK, 5 is busy
18:05:36 <mwc> Ah, ok, now it makes sense. I was thinking it wanted an actual concrete type
18:06:09 <CosmicRay> Igloo: ah.  that is interesting that commit 1 fails, even though the inserts 1 and 2 worked.
18:06:11 <Igloo> It doesn't: http://www.sqlite.org/lockingv3.html
18:06:14 <SyntaxNinja> CosmicRay: you don't wnat the newer cabal?
18:06:28 <dave_m> mwc: not only do they have to be type variables, they have to be distinct type variables
18:06:30 <Igloo> I'm hoping this is just a bug in the impl, but regardless I'll do my own DB locking I think
18:06:33 <dave_m> so Map a a won't work
18:06:37 <CosmicRay> SyntaxNinja: not unless it is in sid and I can build-dep on it.  I have to build packages on my boxen.
18:07:02 <Igloo> And my own binding too, but I haven't /yet/ started work on my own database  :-)
18:07:10 <SyntaxNinja> ok
18:07:36 <CosmicRay> SyntaxNinja: take that as a request to upload it to sid if you like.  it would also let us get a newer c2hs :-)
18:07:59 <CosmicRay> Igloo: have you found hsql inadequate?
18:08:14 <CosmicRay> Igloo: I have a couple of minor nits with it, but it's too much of a hassle to send in patches since they don't use darcs
18:08:18 <Igloo> It doesn't allow statements to be prepared with ?s and then executed with data
18:08:34 <CosmicRay> that is one of my nits for which I haven't made a patch
18:08:45 <CosmicRay> but otoh it seems fast enough to me so far.
18:09:01 <CosmicRay> I inserted some 20000 rows into sqlite3 in a couple of seconds
18:09:48 <Igloo> Try running that program twice in parallel and see how many get added  :-)  (presumably the same bug)
18:10:17 <CosmicRay> Igloo: hmm, according to that lockingv3 doc, the first INSERT should have acquired a RESERVED lock
18:10:54 <SyntaxNinja> CosmicRay: yeah, guess I should. should I just depend on 6.4.1 or what?
18:10:58 <SyntaxNinja> ghc is still broken, right?
18:11:05 <CosmicRay> yes, it is
18:11:13 <CosmicRay> can't you build a newer cabal that works with 6.4?
18:11:21 <SyntaxNinja> yeah, cabal works fine with 6.4
18:11:31 <mwc> dave_m, Korollary, thanks for the help. Almost got what I want, but how can I specify that the values in the map need to be complex? I'm trying to find a Complex class or something
18:11:55 <CosmicRay> my attitude has been "package it now, it'll work on i386 and on any other arch where people care enough to install the old libgmp3, and bug Igloo about it weekly <g>"
18:12:18 <SyntaxNinja> but which ghc do I depend on? just 6.4.0?
18:12:25 <CosmicRay> right
18:12:29 <CosmicRay> since that is what is in sid
18:12:37 <SyntaxNinja> ok. so basically status quo, I just install libgmp3
18:12:38 <Korollary> mwc: like a context ?
18:12:47 <CosmicRay> so if someone has a working ghc (as they should if they dist-upgraded from stable), then my packages will work for them
18:12:51 <CosmicRay> SyntaxNinja: yup
18:13:13 <mwc> Korollary, dunno, what's a context?
18:13:23 <mwc> is there something on the wiki?\
18:13:39 <Korollary> instance (Eq a) => State (Map.Map a b) where ... The (Eq a) bit is the context.
18:13:42 <dave_m> mwc: Are you trying to declare a class or an instance?
18:13:59 <mwc> Korollary, ah, yeah, I have that already
18:14:03 <SyntaxNinja> gotta go lates
18:14:11 <mwc> Essentially I need something like (Basis a, ComplexNum b) => State etc.
18:17:14 <mwc> dave_m, I'm trying to seperate out 2, maybe 3 levels of concern. In the class, I have a general interface and some logic that's fairly abstract for all thins that could be a state. IN the instance, I'm putting code that describes how to "keep" state data inside something, in this case a map. I'd like the instance itself to be somewhat polymorphic to make it trivial to switch between say single or double precision FP as
18:17:14 <mwc>  needed.
18:20:19 <dave_m> mwc: If you're trying to declare an instance like State (Map Int (Complex Double)) you either need -fglasgow-exts or -fallow-undecideable-instances (or their hugs equivalents)
18:21:25 <mwc> Seems to me I need to really pull those constrains on the class of the key and value types of the Map up into the class itself. Something like: class (Basis a, ComplexFloat b) => State storageType_defined_over_a_and_b
18:22:54 <dave_m> that might work, or you could use a multiparameter class. It depends on what your interface looks like
18:24:41 <Igloo> CosmicRay: (belatedly) ?s isn't about performance for me, it's about getting clear code that DTRT
18:25:12 <dons> moin
18:25:20 <Igloo> Yo, dons
18:25:35 <Lemmih> dons: Hi. I've mailed you a patch for hs-plugins.
18:25:37 <mwc> dave_m, I didn't see anything in the wiki about multiparameter classes, is there another place to read about htem?
18:25:48 <dons> Lemmih, thanks you. replied. excellent point
18:26:03 <dons> CosmicRay, you want a FastPackedString package?
18:26:42 <dave_m> mwc: they're one of the common extensions to Haskell 98. A lot of the Control.Monad.* modules use them
18:26:42 <dons> Igloo, this mmapped packed string module has really excellent performance, btw
18:26:47 <ozone> dons: i think it'd be useful outside of h4sh/darcs
18:27:11 <dons> yeah. ozone, for you at least it is a whole layer on top of patrykz' mmap io lib
18:27:27 <dons> ok, /me cabalises.
18:27:31 <ozone> oh, you're using mmap underneath?
18:27:51 <dons> yep. but the darcs code already supported that
18:28:15 <Igloo> dons: Simon's working on a library with the same underlying impl I think, so you might want to just wait for that
18:28:48 <dons> ah, ok. I figured we should try to push this back into ghc, but if SimonM's already on to it
18:32:58 <CosmicRay> dons: yes
18:33:24 * CosmicRay does not like "just waiting" for things
18:33:29 <CosmicRay> have you noticed this, igloo? ;-)
18:33:47 <Igloo> :-)
18:33:59 <dons> CosmicRay, it took me all of 1 day to rip out FastPackedString.hs from darcs. it has no dependencies other than fpstring.{c,h}
18:34:27 <dons> 1 day is an upper bound.
18:34:33 <dons> so you could just grab it
18:36:08 <CosmicRay> dons: I noticed the lack of deps on anything else on h4sh.  I was about to yank it out and cabalize it when syntaxninja warned me that you may be doing that yourself
18:36:16 * Igloo should find out if the overhead of an FFI call is enough to justify removing fpstring.c on its own
18:36:36 <CosmicRay> iirc, the only thing it uses in the .c file is the call to mmap
18:36:42 <dons> Igloo, it's quite doable. you will need hsc2hs or similar, thoguh won't youu?
18:36:43 <CosmicRay> which should be fairly minimal
18:36:52 <CosmicRay> and could be imported unsafe
18:36:56 <lispy_> Igloo: i was looking into what cehteh said in #darcs today, and mmap_slurp creates and deletes a directory every time it's called
18:36:56 <Igloo> I don't think so
18:37:03 <dons> the mmap #defines  are the only reason to use C, aren't they?
18:37:25 <CosmicRay> dons: well the code also uses some C funcs like memchr or something
18:37:47 <lispy_> Igloo: just thought i'd mention it, because that's a possible way to improve performance i suppose
18:37:49 <dons> CosmicRay, be warned that I removed a bunch of stuff from the h4sh FastPackedString to make it compile faster. you'll want to add these back in from the darcs orig
18:37:57 <dons> i.e. functions I don't use
18:38:11 <CosmicRay> dons: oh, what did these functions do?
18:38:16 <Igloo> I did some timing and found it was half the speed of C at looking for the first space in a huge file of not spaces; Simon's added some things to his optimisations-to-be-done list as a result
18:38:21 <CosmicRay> dons: are you saying that FPS in darcs had no deps on anything else?
18:38:22 <dons> also, the h4sh FastPackedString has a patch to lines/unlinesPS to make them behave like lines/unlines. you'll probably want that patch
18:38:34 <dons> CosmicRay, yes. only fpstring
18:39:08 * CosmicRay makes a note of this
18:39:10 <Igloo> But if it turns out the overhead of the FFI calls overshadows that for the sort of things we actually do then it might be easy to sell dropping the .c files now
18:39:19 <CosmicRay> dons: sounds like you'd like me to just package up FPS then?
18:39:58 <dons> hmm. or I could do it, since I'm pretty familiar with that code now
18:40:14 <CosmicRay> dons: whatever you prefer is fine by me.
18:40:17 <dons> and it would help h4sh, since then FastPackedString wouldn't get compiled 32 times grrr
18:40:27 <CosmicRay> heh
18:40:34 <dons> ok. I will package the darcs version, with the lines/unlines patch from h4sh
18:40:38 * dons packages now
18:41:07 <lispy_> heh, i could used a packaged up dons to install in our grad program.
18:41:18 <CosmicRay> dons: would you mindjust dropping an e-mail to jgoerzen at complete.org when you're done?  I'll get it uploaded to sid as soon as you have the package out there.
18:41:24 <CosmicRay> haha
18:41:43 <dons> ok.
18:41:56 <lispy_> dons: are you dacsable/
18:42:02 <CosmicRay> lispy: I'd be happy with anyone named don, simon, or ian
18:42:11 <lispy_> heh
18:42:24 <dons> lispy_ :p
18:42:50 <lispy_> we could distribute don, simon and ian as part of HSD
18:42:57 <lispy_> Haskell Standard Distribution
18:43:08 <CosmicRay> yeah but they'd probably depend on cabal v4.5
18:43:15 <lispy_> heh
18:43:23 <lispy_> that could be ages before it's out!
18:43:37 * lispy_ goes to get a popsicle
18:43:45 <CosmicRay> yeah, not to mention threads on -library arguing about its version number!
18:44:25 <CosmicRay> the libraries list is starting to look like a sort of junior version of debian-devel
18:44:46 <Igloo> HDYM?
18:44:52 <CosmicRay> still a better S/N ratio though
18:45:14 <CosmicRay> Igloo: well there is this tendency to argue, in for greater detail than necessary, things that were already argued about 2 weeks ago ;-)
18:45:34 <Igloo> Hmm, it would be good to avoid going down that road if we can help it
18:45:42 <CosmicRay> I agree
18:45:59 * Igloo puts CosmicRay in charge of fixing it
18:46:09 <lispy_> heh
18:46:11 <CosmicRay> I have started to just say "Cabal was a big topic on -libraries again" in HWN instead of trying to follow all the discussions
18:46:15 <CosmicRay> crap!
18:46:24 * CosmicRay delegates to shapr.
18:46:32 <CosmicRay> he'll have free time now that he's delegating TMR ;-)
18:46:41 <lispy_> hahah
18:55:52 <lispy_> Korollary: so, i'm torn tonight.  hack on darcs, hud or quake3?
18:55:59 <lispy_> oh, or yi
18:56:13 <lispy_> dons: have you had any time to look at the code i sent you?
18:56:27 <lispy_> dons: i had an idea on maybe why the cursor goes nuts
18:56:33 <lispy_> dons: related to the take ...
18:57:49 <dons> i've looked, but haven't had time to hack on it to fix the cursor issue yet
18:58:26 <lispy_> dons: yeah, i keep hoping i'll have a break through in my understanding of the cursor weirdness
18:58:42 <lispy_> dons: it was much worse before i added the code to take only as many lines as would fit on the screen
19:00:11 <dons> yeah, that's a good idea, otherwise ncurses just wraps for you, and your idea of what's on the screen goes wacked
19:01:54 <Korollary> lispy_: hack on darcs
19:02:22 <lispy_> Korollary: ah, we are in agreement
19:02:30 <lispy_> Korollary: i was just started to hack on it
19:02:44 <lispy_> Korollary: would you be interested in being my beta tester?
19:04:49 <Korollary> lispy_: sorry, not tonight. I need to work on my resume. :(
19:04:58 <lispy_> alright
19:05:26 <Igloo> This is getting silly. Out of the 2 C libraries I'm using, 2 require me to use a pointer -1
19:06:29 <CosmicRay> and that actually works everywhere?
19:06:57 <Igloo> iconv, being part of glibc, probably doesn't care
19:07:33 <Igloo> sqlite3 seems to use a dice to decide whether to use unsigned chars or chars in any given function, so I'm guessing they aren't too fussed either
19:08:43 <CosmicRay> heh
19:09:55 * Igloo fails to see a way of writing this without breaking abstractions, so gives in to doing so
19:14:15 <lispy_> heh, the dj has just promised that 2/3 songs she's going to play will make us want to commit suicide
19:30:08 <Korollary> geez. a soundcard with 50M transistors: http://www.digit-life.com/articles2/multimedia/creative-x-fi.html
19:39:56 <lispy_> Igloo: how do darcs commands figure out which directory to be in?
19:40:06 <lispy_> is it passed to them?
19:40:13 <lispy_> i'm having a hard time finding that
20:28:05 <dons> hmm. I think initPS in darcs is incorrect.
20:28:24 <dons> initPS ps
20:28:24 <dons>   | len <= 0   = error "FastPackedString.initPS: init []"
20:28:24 <dons>   | len == 1   = nilPS
20:28:27 <dons>   | otherwise  = substrPS ps 0 (len - 1)
20:28:36 <dons> should be:   | otherwise  = substrPS ps 0 (len - 2)
20:28:49 <dons> otherwise it behave like id
20:34:36 <SyntaxNinja> w00t
20:40:54 <lispy_> SyntaxNinja: w00t?
20:41:11 <SyntaxNinja> hi lispy_
20:41:28 <lispy_> hi
20:41:43 * lispy_ is putting bugs into darcs
20:41:57 <lispy_> i added a bug that makes this posthook thing run twice
20:42:07 <SyntaxNinja> yes!!
20:42:19 <SyntaxNinja> the cabal will defeat darcs one way or another!
20:42:30 <lispy_> what is cabal+
20:42:32 <lispy_> ?
20:42:44 <lispy_> it's a versioning system?
20:42:44 <SyntaxNinja> exactly.
20:42:53 * lispy_ ph34rs
20:43:03 <SyntaxNinja> no, it's a common architecture for building applications and libraries.
20:43:22 <lispy_> so how will it defeat darcs?
20:44:11 <SyntaxNinja> er....
20:44:18 <SyntaxNinja> there can be only one.
20:44:32 <SyntaxNinja> idono, darcs and cabal have this really intense rivalry
20:46:02 <dons> get your fast packed strings!
20:46:07 <dons> @where fps
20:46:08 <lambdabot> http://www.cse.unsw.edu.au/~dons/code/fps
20:46:57 <lispy_> SyntaxNinja: heh, an INTENSE RIVALRY....but i never noticed it before :)
20:48:13 <SyntaxNinja> oh... then why are you adding bugs to darcs? I thought you were on our side.
20:49:18 <lispy_> haha
20:49:34 <lispy_> because I (we) want to be able to run scripts when darcs does things
20:49:51 <lispy_> my previous implementation only worked for the apply command
20:49:54 <lispy_> trying to generalize it
20:50:27 <lispy_> SyntaxNinja: but now that i see we're on opposite sides, i'll never be able to test cabal-get ;)
20:51:49 <SyntaxNinja> fsck
20:52:51 <lispy_> i forget to do "darcs record --no-test"
20:53:00 <lispy_> so now i'm waiting for the test suite to run
20:53:04 <lispy_> god, this take ages
20:53:26 <lispy_> screw it
20:53:35 <SyntaxNinja> yeah!! down with it!
20:59:35 <lispy_> @type Control.Exception.finally
20:59:36 <lambdabot> forall a b. IO a -> IO b -> IO a
21:00:41 <lispy_> @type Control.Exception.try
21:00:42 <lambdabot> forall a. IO a -> IO (Either GHC.IOBase.Exception a)
21:00:58 <lispy_> @doc Control.Exception
21:00:58 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/base/Control.Exception.html
21:13:58 <luqui> what command line option do I need to include to use ReaderT?
21:14:24 <TheHunter> --make or -package mtl.
21:15:08 * luqui likes --make
21:15:13 <luqui> thanks
21:16:15 <luqui> doc liftIO
21:16:20 <luqui> @doc liftIO
21:16:22 <lambdabot> liftIO not available
21:16:27 <luqui> oh, I need a module huh?
21:16:51 <Korollary> you need liftM
21:17:28 <luqui> what is liftIO then?
21:17:49 <Korollary> ugh, I dont know
21:17:51 * luqui is just starting to learn about monad transformers
21:17:53 <Korollary> @hoogle liftIO
21:17:58 <luqui> no match
21:18:04 * luqui already looked it up
21:18:04 <Korollary> I am not sure if it exists
21:18:09 <luqui> well, it compiles
21:18:53 <Korollary> what modules are you including ?
21:18:57 <Korollary> err importing
21:19:10 <luqui> Control.Monad.Reader
21:19:44 <luqui> how do I include a package module from ghci?
21:19:49 <luqui> (then I could at least check the sig)
21:20:19 <Korollary> @index MonadIO
21:20:21 <lambdabot> Control.Monad.Trans, Control.Monad.Reader, Control.Monad.Writer,
21:20:21 <lambdabot> Control.Monad.State, Control.Monad.RWS, Control.Monad.Cont, Control.
21:20:21 <lambdabot> Monad.Error, Control.Monad.List
21:20:51 <Korollary> use :module Control.Monad.Reader
21:20:55 <Korollary> ok it exists
21:21:27 <Korollary> it's coming from Control.Monad.Trans
21:21:47 <luqui> okay, thanks
21:23:05 <Korollary> np
21:23:32 <luqui> huh, it seems that lift and liftIO do the same thing for my purposes
21:26:36 <TheHunter> use liftIO. That way, you won't have to change it if you alter the monad transformer stack later.
21:27:02 <luqui> liftIO will take the IO out of any sequence of monads?
21:27:10 <luqui> FooT BarT BazT IO ()
21:27:22 <TheHunter> yes. that's the idea.
21:27:25 <luqui> okay
21:30:33 <luqui> shouldn't it be possible to write a "Transform m n a" monad that makes an mT n a ?
21:35:43 <TheHunter> are you talking about a Transform m n type class?
21:36:28 <luqui> I don't think so.  Just a monad, that takes two (partial) monads and makes a transform monad out of the first one
21:36:43 <luqui> That is, ReaderT IO () is the same as Transform Reader IO ()
21:37:16 <TheHunter> this is not possible in general.
21:37:24 <luqui> how come?
21:37:25 <TheHunter> For example there is no IO transformer.
21:37:30 <luqui> hmm...
21:37:34 <luqui> good point
21:38:24 <luqui> hmm... (TransformableMonad m, Monad n) => Transform m n a
21:38:33 <TheHunter> just m (n a) won't do it, as you'd need something of type m (n (m (n a))) -> m (n a)
21:39:36 <luqui> I was thinking Transform would do that thing
21:39:54 <luqui> that is, it's (Transform m n) a
21:40:05 <TheHunter> what is Transform here?
21:40:18 <luqui> it's that hypothetical thing that I'm wondering if it's possible to write
21:40:24 <luqui> that turns a monad Foo into FooT
21:40:35 <luqui> perhaps Foo needs to obey a certain class
21:41:05 <TheHunter> you could write a source-to-source translation that does that sort of thing, but's impossible to do in haskell.
21:41:14 <luqui> okay
21:41:25 <TheHunter> there's some freedom in how to do it, also.
21:41:28 <luqui> the structure of ReaderT is fundamentally different from Reader
21:41:34 <luqui> then... right?
21:42:17 <TheHunter> there's a connection: Reader r a is r -> a, ReaderT is r -> m a.
21:42:46 <TheHunter> there are some pretty straigtforward rules you can derive the type of the transformer with.
21:43:22 <TheHunter> you might also find people disagreeing with me on that.
21:43:56 <luqui> okay, I'll take it on faith and understand why later :-)
21:44:29 <TheHunter> alright, have fun (i'm sure you will exploring monad transformers)!
21:44:55 <luqui> to be honest, I'm learning them so I can implement them in Perl :-)
21:45:17 <TheHunter> you don't wanna do that outside of a decent type system.
21:45:30 <luqui> is it just the transformers that are the problem?
21:45:34 <luqui> because I've already got monads working
21:46:10 <TheHunter> it's certainly possible, but the amout of stuff you have to keep in your head is enourmous when the compiler doesn't give you any hints.
21:46:18 <luqui> hmm
21:46:28 <luqui> that is, if you program everything right the first time, it will work
21:46:33 <luqui> but the error messages will be... absent?
21:46:58 <luqui> or is there some compile-time interpretation that the type system is doing for me?
21:47:20 <TheHunter> And there are lots of returns, lifts and binds you can easily forget.
21:47:32 <luqui> ahh, that's okay then
21:47:38 <TheHunter> compile-time interpretation?
21:47:38 <luqui> I can do what Perl usually does
21:47:48 <luqui> defer the type checking until runtime
21:47:54 <luqui> emulate the type system :-)
21:48:20 <TheHunter> usually yes, but not necessary always.
21:48:20 <luqui> TheHunter, now that I think about it, the answer to the interpretation question is no
21:49:02 <luqui> that is, haskell could function as a dynamic language, but you wouldn't get any compile-time errors
21:49:16 <TheHunter> not really.
21:49:24 <luqui> how so?
21:49:35 <TheHunter> consider lift $ print "foo"
21:49:40 <luqui> can you give me an example of an expression that is interpreted in two different ways based on the types involved?
21:49:49 <luqui> maybe that's one right there... explain
21:49:50 <TheHunter> the type system figures out which monad to lift the action into.
21:50:08 <luqui> oh...
21:50:29 <dons> dynamic-only languages are silly. 99% of the type information is known statically anyway, there's just a few things you sometimes need dynamically. throwing out all static checking for this 1% of cases is nuts
21:50:38 <luqui> well, I can probably have Perl do that at runtime (I know... eew, but I'm not going for speed or anything)
21:50:44 <luqui> dons, well, that's just like, your opinion, man
21:51:05 <luqui> (not that I don't agree with you)
21:51:12 <TheHunter> luqui, you'll definitely have to do extra work, like keeping a symbolic representation until the type is known.
21:51:28 <luqui> I figured as much
21:51:51 <luqui> I'm trying to stick a very functional construct into a language that doesn't think of things as functions very well
21:51:57 <luqui> I'm already doing extra work
21:52:13 <TheHunter> not to mention all those useless $'s you have to type.
21:52:24 <luqui> you mean for the variables?
21:52:36 <TheHunter> yes
21:52:47 <luqui> well, we exchange those $s for the $s you guys have to type for function application being left-associative :-)
21:53:24 <dons> well, i've spent a bit of time working on this issue, and its very easy to do dynamically typed stuff in haskell, because only a small percent of the code actually depends on the dynamic typing. that's why hs-plugins works -- you only need to delay a small amount of type checking to the runtime phase. i think this concept of what has to be delayed to the next phase is understood fairly well in the meta programming communities.
21:53:45 <luqui> anyway, enough language criticism... Perl and Haskell are really in two different realms altogether, and the way you think about problems in the two of them are very different...
21:53:56 <dons> so, like I say, giving up and just shifting everything to runtime is silly.
21:54:24 <TheHunter> right, i'll probably should go to sleep.
21:54:35 <luqui> dons, there are some certain very cool things that you can do with dynamic languages that you can't do with typed languages
21:54:49 <luqui> because you can pretend something is of a certain type when it isn't
21:55:02 <dons> do you mean typed/untyped? not dynamic/static.
21:55:08 <luqui> on the other hand, there are certain very cool benefits you get out of being typed
21:55:11 <luqui> dons, yes
21:55:19 <luqui> sorry
21:55:27 <luqui> which is why I'm working on Perl 6
21:55:44 <TheHunter> night folks
21:55:46 <luqui> night
21:55:55 * luqui takes off his Perl hat and his Haskell hat
21:55:56 <Pseudonym> If Pugs has taught us anything, it's that static and dynamically typed languages need each other. :-)
21:56:10 <luqui> Pseudonym, :-)
21:56:21 <Pseudonym> If only from a sociological point of view.
21:56:29 <Pseudonym> Which would please Larry Wall no end, I think.
21:56:54 <luqui> I'm not sure Larry has seen the extent of the culture merge because of pugs yet
21:57:00 <Pseudonym> Sure.
21:57:06 <Pseudonym> But it would if he saw it.
21:57:13 <luqui> right
21:57:31 <Korollary> I believe that he's at least aware of pugs.
21:57:52 <luqui> he definitely is.  He spent three days at the pugs hackathon
21:58:16 <Pseudonym> So can he hack in Haskell yet?
21:58:19 <luqui> no
21:58:22 <Pseudonym> Damn.
21:58:35 <luqui> he was working on PPD then
21:58:41 <Korollary> language designers should learn more languages, imho
21:58:54 <luqui> yeah, well, Larry knows quite a few
21:58:57 <Pseudonym> Yup.
21:59:03 <Pseudonym> He's a linguist by trade.
21:59:04 <luqui> Haskell is a mind bend though, so it's good to learn
21:59:17 <Pseudonym> So he knows a lot of both kinds of language.
21:59:28 <luqui> especially for someone trying to design a language that tries hard not to bend your mind
21:59:34 <luqui> or if so, to bend it very gradually
21:59:43 <dons> that I teaching haskell in session 1 and perl in session 2 each year isn't healthy, I think.
21:59:46 <Korollary> haskell actually doesnt try to bend your mind. It tries to unbend it, imho
21:59:52 <Pseudonym> :-)
22:00:14 <luqui> Korollary, it tries to turn you into a mathematician
22:00:23 <luqui> which I think is cool, because I'm a mathematician
22:00:29 <luqui> but I never thought of programming mathematically
22:00:32 <luqui> until Haskell :-)
22:00:55 <Pseudonym> I don't think of it as mathematics.  I think of it as mathematical engineering.
22:01:02 <Pseudonym> The same way that chemistry isn't chemical engineering.
22:01:20 <luqui> Pseudonym, okay, fine, where most programming languages are just enginerring
22:01:41 <Korollary> umm, I'd say that haskell doesn't pretend that a certain algebra in my programs doesn't exist.
22:02:07 <Pseudonym> Most programming languages : older computer science :: Haskell : pure maths
22:02:08 <luqui> (I adore ADTs and am trying hard to get them into Perl 6)
22:02:53 <luqui> ever since I saw PIL in GADT, I knew I had to have this
22:03:00 <dons> is Pseudonym using a list constructor on the type level in his metaphor?
22:03:05 <Pseudonym> No.
22:03:15 <Korollary> heh
22:03:34 <luqui> whoo (the sound of something flying over my head)
22:03:36 <Pseudonym> Pseudonym is using a semantic metalevel quotient object.
22:03:45 <Korollary> luqui: (:) operator
22:04:04 <luqui> whoosh (the sound of it flying back over again)
22:04:07 <dons> ah, I see now
22:04:09 <luqui> oh
22:04:14 <luqui> Haskell : pure maths
22:04:34 <luqui> it was lower order than I thought
22:04:36 <luqui> :-p
22:04:46 <Pseudonym> Engineering is what you do when you take the results of science and make useful things out of them.
22:05:07 <Pseudonym> With traditional programming languages, you do that with computer science 101.
22:05:13 <Pseudonym> With Haskell, you do that with pure maths 101.
22:05:25 <Pseudonym> (And higher numbers, in each case.)
22:05:55 <luqui> gosh, monad transforms are so simple...
22:05:59 <Korollary> ok, when will the first "<insert FP lang> book by O'Reilly" hit the shelves ?
22:06:09 <Pseudonym> When you write it.
22:06:11 <Korollary> any fp lang, present or future
22:06:25 * Korollary appreciates the faith in his writing abilities
22:06:51 <Pseudonym> You write bonza understandably.
22:06:52 <luqui> there's got to be one on Scheme
22:07:17 <Korollary> I think scheme missed the train a bit.
22:07:33 <Pseudonym> Scheme was invented to write SICP with.
22:07:39 <Pseudonym> It didn't miss the train at all. :-)
22:07:39 <luqui> SICP?
22:07:42 <dons> luqui, while you're here, why is this so:
22:07:42 <dons> paprika$ perl -le '$s = (10,20,30) ; print $s'
22:07:42 <dons> 30
22:07:42 <dons> paprika$ perl -le '@a = (10,20,30); $s = @a ; print $s'
22:07:43 <dons> 3
22:07:57 <Pseudonym> dons: Welcome to Perl.
22:08:07 <Korollary> Pseudonym: What I mean is that it probably has peaked.
22:08:09 <dons> it seems odd that the coercion is resolve using last in the first case, and length in the 2nd
22:08:11 <Pseudonym> That is the #1 asked newbie Perl question which doesn't have a satisfactory answer.
22:08:18 <luqui> dons, do you actually understand it, or are you asking a legitimate question as an attack?
22:08:29 <luqui> er, "as an attack" before the comma ;-)
22:08:31 <dons> no no. i'm asking if there is a reason behind this.
22:08:42 <Pseudonym> There's a reason, but it's not a good one.
22:08:42 <dons> i actually do teach perl to uni students, and noticed this a few days ago
22:09:00 <luqui> mostly because () is not a list or tuple constructor as you're thinking of it
22:09:00 <Korollary> hmm that looks weird. I am glad I don't know perl much.
22:09:14 <luqui> it's just grouping
22:09:34 <dons> can you explain that further?
22:09:47 <luqui> the comma in scalar context works like it does in C
22:09:58 <luqui> it evaluates everything and returns the rightmost expression
22:10:04 <luqui> *fixed in Perl 6 :-)
22:10:08 <dons> ah!
22:10:18 <Korollary> but why 3 instead of 30 ?
22:10:30 <luqui> an array in scalar context evaluates to its length
22:10:37 <Korollary> ah
22:10:51 <Korollary> I thought that the numeric literal was decomposed somehow lol
22:11:32 <Pseudonym> The answer to your unasked question is: Yes, everyone knows this is confusing and wrong.
22:11:44 <Pseudonym> And yes, it's fixed in Perl 6.
22:11:48 <dons> the length thingo is consistent with how I'd write a dynamically typed language too, but I didn't understand this (,,) stuff.
22:11:49 <Pseudonym> As luqui said.
22:12:03 <luqui> ahh
22:12:13 <dons> made for an interesting class we we speculated on what [a] -> a function perl would choose to convert a list to a scalre
22:12:21 <dons> length, head, tail, concat ...
22:12:26 <dons> and then it was tail!
22:12:35 <dons> but i see that it's not quite that simple
22:13:30 <Pseudonym> Newbies tend to find the context-sensitive aspect of Perl confusing.
22:13:44 <Pseudonym> And oldbies occasionally still make mistakes related to it.
22:14:28 <stefanw> and experienced programmers consider it as EVIL
22:14:44 <luqui> stefanw, are you an experienced Perl programmer?
22:14:50 <luqui> because I don't consider it Evil
22:14:52 <Pseudonym> Yeah, but experienced scripters find it useful when it's useful.
22:14:59 <dons> i don't find it confusing. it makes sense for a dynamcally typed language to insert functions to resolve type errors
22:15:12 <Korollary> it's a type error ?
22:15:24 <luqui> dons, that's an interesting way of thinking about it
22:15:32 <dons> well, lhs :: a, rhs has type [a]
22:15:38 <stefanw> luqui: I'm not a perl programmer but kind of experienced in some other languages ;-)
22:15:51 <Pseudonym> The time when it causes the biggest problems is when you're writing C bindings.
22:16:01 <dons> it's how dynamically typed languages usually work, or at least how we tell people they work.
22:16:08 <Pseudonym> Because you have to take into account what context your sub was called with.
22:16:09 <luqui> stefanw, well, you think of context sensitivity the same way I thought about the IO monad when I learned you had to use it
22:16:23 <Korollary> dons: ooh. I don't think that sorta stuff works in all dynamic languages.
22:16:34 <Pseudonym> But most of the time, it does the right thing transparently.
22:17:24 <dons> no, maybe not, other type errors could just be errors. but if its easy enough, you just put a coercion function. picking a good function would be the charm.
22:18:14 <Pseudonym> Although as MJD said once:
22:18:18 <Pseudonym> Someone showed up in comp.lang.perl.misc this week asking why length(@a) does the Wrong Thing, and nobody gave any indication that anyone agreed with him. I guess they were all too busy defending Tribal Turf or something. RFC 212 proves that someone out there agrees with this guy. But nobody would admit it.
22:18:44 <luqui> * Fixed in Perl 6 :-)
22:18:44 <Korollary> Python doesn't have that problems since there is no @ or $ to begin with.
22:18:49 <Pseudonym> :-)
22:19:05 <dons> so perl has some weird concept of type checking. (even if you do have to attach types to every identifier, everywheree :/
22:19:14 <dons> so you get checking, but no inference.
22:19:35 <luqui> dons, the $,@, and % are more like attaching default contexts to everythign
22:19:44 <ozone> dons: depends really what you consider to be types
22:19:51 <dons> how are contexts not types?
22:19:57 <ozone> i'd argue that perl's statically typed if you consider the types to be $, @ and %
22:20:00 <ozone> with use strict
22:20:04 <dons> right
22:20:12 <luqui> well, for everything that starts with a $, if you say foo($bar), foo will get exactly one argument
22:20:20 <luqui> but that is not so for @ variables
22:20:29 <Korollary> a unityped language is statically typed.
22:20:45 <luqui> it's a way of marking the local semantics so they stand out
22:21:47 <dons> does perl segfault? or are coercions always placed such that no perl program should segfault?
22:21:56 <luqui> dons, every once in a while, but it's not supposed to
22:22:05 <Pseudonym> It's usually buggy libraries.
22:22:07 <luqui> it only segfaults when you start doing Evil to the regular expression engine
22:22:14 <dons> huh!
22:22:22 <Korollary> lol
22:22:43 <Pseudonym> Oh, yes.  Hacking the Perl source tends to produce segfaults.
22:22:49 * lispy_ contributes to darcs
22:22:55 <luqui> Pseudonym, that's not what I was referring to
22:22:56 <lispy_> long live Yi!
22:22:57 <Korollary> go lispy_ !
22:22:59 <Pseudonym> The Perl 5 source is pretty fragile.
22:23:07 <Pseudonym> Yeah, I know, but I thought I'd mention it.
22:23:10 <luqui> I was talking about Perl6::Rules, which is very evil to the regular expression engine from the language level
22:23:12 <luqui> okay
22:23:34 <dons> so it's fairly strongly dynamically typed, with many and varied ways of resolving type errors
22:23:52 <luqui> dons, yeah.  most of those ways are "die"
22:24:00 <luqui> with a reasonable error message
22:24:11 <luqui> { a => 1, b => 2 }[2]    # dies
22:24:16 <luqui> but only at runtime
22:24:36 <Korollary> [a,b] = [1,2,3] dies at runtime in python
22:24:59 <Korollary> throws an exception
22:25:22 <luqui> funny, ($a, $b) = (1,2,3)   # sets $a to 1 and $b to 2
22:25:31 <luqui> so I guess dons is right about the many ways of resolving type errors
22:25:51 <Korollary> that is too forgiving for my taste
22:26:10 <dons> perl code always does something, just working out which particular method was used to resolve the error is hard
22:26:38 <Korollary> maybe it's trying not to be rude by not telling you that you possibly made a mistake ? ;)
22:26:47 <Korollary> can-do attitude !
22:26:48 <dons> are the various ways of resolving type errors documented?
22:26:58 <dons> i.e. $s = @a  ~> $s = length @a
22:27:01 <dons> and so on ..
22:27:07 <luqui> yeah, but they're not referred to as resolving type errors
22:27:53 <Pseudonym> BTW, length @a doesn't do that/
22:28:21 <dons> how do you know i wasn't use pseudocode, where length == List.length ;)
22:28:29 <Pseudonym> :-)
22:28:46 <luqui> see, that's the thing, Perl is pseudocode
22:28:49 <luqui> "you know what I meant"
22:28:57 <luqui> the whole history of the phrase "to DWIM"
22:29:07 <luqui> except... sometimes it doesn't know what you meant
22:29:53 <luqui> as in the length @a case
22:30:09 <Pseudonym> perl -e '@a=(1,2,3,4,5,6,7,8,9,10,11); print length @a;'
22:30:10 <Pseudonym> 2
22:30:22 <dons> so once could sit down and write the operational semantics, and instead of just x / 0 ~> error ; you keep the types till runtime, and need heaps of rules for every different way of resolving expressions with type errors
22:30:31 <dons> s/once/one/
22:31:12 <luqui> actually, you could probably do most of the type error resolution at compile time
22:31:23 <dons> perl evolved in a strange culture, but still all the stuff it does is well understood from normal PL research point of view.
22:31:39 <dons> ah, luqui, like I say!
22:31:46 <dons> you don't need to dynamically type everything!
22:31:51 <luqui> dons, right
22:32:07 <dons> just the runtime meta programming stuff that actually creates new code at runtime, and maybe some other cases
22:32:37 <Korollary> dons: then you must like the Visual Basic approach
22:32:50 <lispy_> Pseudonym: 2??
22:32:55 <dons> Korollary, oh, now I'm scared.
22:32:58 * luqui hasn't seen visual basic since VB5
22:33:08 <dons> what's this approach?
22:33:24 <luqui> lispy, yes, the length of the string containing the length of @a is 2
22:33:27 <Korollary> VB6 and VB.net have variable declarations, and one of the types is a Variant type that can contain other types. It's tagged.
22:33:37 <luqui> (that's the "wrong thing" that MJD was talking about)
22:33:48 <lispy_> luqui: yeah, ouch
22:33:58 <lispy_> luqui: i hate perl for a reason.....
22:34:20 <Korollary> lispy_: the philosophy is that you meant that to be evaluated.
22:34:27 <lispy_> in VBA you can write code that generates code and then call it :)
22:34:27 <luqui> Like I said, the mental frameworks for Perl and Haskell are basically disjoint
22:34:38 <dons> ok /me goes off to teach "look! perl has a type system, it's just wacked!" to undergrads
22:34:41 <luqui> but length(@a) is a plain old mistake
22:34:46 <Korollary> dons: have mercy
22:34:56 <lispy_> dons: hehe
22:35:22 <lispy_> Korollary: so is length a the correct way to do it?
22:35:34 <Korollary> lispy_: That's not my philosophy :)
22:36:02 <lispy_> Korollary: oh no, i just wanted to know how to get the length of the a thing
22:36:15 <lispy_> list or vector or array or what haveyou
22:36:18 <luqui> lispy_, in perl?
22:36:21 <lispy_> ya
22:36:30 <Pseudonym> You can use $#a or scalar(@a).
22:36:44 <luqui> well, for strings it's "length", for arrays it's @a in scalar context, for other things, it's $thing->length (probably)
22:36:57 <Pseudonym> $#a isn't the length, it's the highest index.
22:37:02 <Pseudonym> Which is occasionally more important.
22:37:02 <Korollary> it's just length(x) in python
22:37:10 <Korollary> len
22:37:15 <luqui> Korollary, and that works on strings and lists?
22:37:32 <Korollary> luqui: yes
22:37:41 <lispy_> i really like that a string is a list in haskell
22:37:43 <luqui> hmm... that's an interesting idea (a very obvious one)
22:37:52 <luqui> Perl 6's approach is to remove the "length" function altogether
22:37:56 <lispy_> that makes a lot of string manipulation simple
22:38:00 <Korollary> len( [1,2,3] ) == len( (1,2,3) ) = len( "123" )
22:38:05 <Pseudonym> lispy_: It also makes it expensive.
22:38:06 <luqui> replace it with "chars" (for strings) and "elems" (for lists)
22:38:28 <lispy_> Pseudonym: i guess that's why we have fast packed strings?
22:38:30 <Korollary> a string is a list in python, too. map() works on strings
22:38:35 <Pseudonym> Yup.
22:38:44 <luqui> Korollary, ooooh, then length(a) makes a lot more sense
22:39:00 <Pseudonym> Unfortunately, Haskell I/O is still based around [Char].
22:39:04 <Korollary> luqui: in python, "123"[0] = '1'
22:39:06 <Pseudonym> Which makes it unnecessarily slow.
22:39:40 <luqui> Pseudonym, could you define a real String type that doesn't use lists?
22:39:48 <luqui> and incorporate that naturally into the language?
22:39:55 <Pseudonym> Sure, like fast packed strings.
22:40:03 <Pseudonym> ONly it wouldn't be standard Haskell, of course. :-)
22:40:04 <lispy_> Pseudonym: yeah, i guess it's nice for writing a compiler, but not nice for writing something that has to analyze a lot of text quickly
22:40:23 <luqui> well, bedtime for me
22:40:28 <luqui> nice chatting about perl with you folks
22:40:35 * luqui &
22:40:38 <lispy_> heh, sleep well
22:40:40 <Korollary> laterz
22:40:50 <Korollary> he backgrounded
22:41:02 <lispy_> Korollary: do you use darcs, or were you just happy to see oneone contribute to something?
22:41:35 <lispy_> i find i've come a bit of a darcs zealot
22:42:12 <Korollary> lispy_: I used darcs only to get Yi code. I am happy to see more people contributing to it because it is the haskell app with the best exposure, imho.
22:44:11 <lispy_> yeah, maybe darcs is that killer haskell app
22:44:29 <lispy_> well, if david ever cleans up the conflictor
22:44:38 <Korollary> I wouldnt say it's a killer app. I think it's the "can-do" app.
22:44:45 <lispy_> having exponential algorithms is a problem
22:45:01 <lispy_> what is a "can-do" app?
22:45:31 <Korollary> It's the app that makes is obvious that haskell is an esoteric, academic-only language that cannot do useful work.
22:45:36 <Korollary> err it's NOT
22:45:42 <Pseudonym> It means it is a proactive risk-taker ready to enhance vital partnerships.
22:45:45 <Korollary> heh
22:45:50 <lispy_> heh
22:45:54 <Korollary> Haskell by NeoDatex
22:45:57 <Pseudonym> :-)
22:46:23 <lispy_> Pseudonym: and leverage collaboration in world class enterprise organizations?
22:46:34 * Korollary is actually staring at pages full of action words for a resume workshop tomorrow
22:47:01 <Pseudonym> lispy_: Yes, to evolve organisational community synergy.
22:47:29 <lispy_> Pseudonym: cool, we have the abstract of our chi paper on darcs written i think ;)
22:47:33 <Pseudonym> Korollary: http://s8.invisionfree.com/weaselwords/index.php
22:47:38 <Pseudonym> Please submit some samples!
22:47:58 <Korollary> oh man
22:48:04 <Korollary> I know so many job ads I can submit
22:48:11 <lispy_> Korollary: the thing i remember from interviewing people, is that resumes mean crap.  some of our best applicants had terrible resumes
22:48:19 <lispy_> and vice versa
22:48:49 <Korollary> yeah because people write bad resumes in general. good thing is that the HR people don't read them anyways.
22:48:50 <lispy_> resumes are way overrated too
22:48:59 <lispy_> Korollary: heh
22:49:24 <Korollary> lispy_: I'd disagree. After fixing my resume in a certain, approved way, I had a lot more hits on monster.
22:49:25 <lispy_> usually you have to know someone
22:49:41 <Korollary> networking can work wonders, yes
22:49:52 <lispy_> Korollary: ah, better than me.  I didn't get a single hit on montser
22:50:16 <Korollary> lispy_: when were you looking ?
22:50:24 <lispy_> 12 months ago
22:50:33 <Korollary> oh, the market sucked monads back then
22:50:35 <Pseudonym> So what is actually useful in finding a new employee?
22:50:48 <lispy_> Pseudonym: interviews
22:50:51 <Pseudonym> I'm curious about this, because I have bad luck finding jobs except by word of mouth.
22:50:52 <ozone> esoteric C++ language questions
22:51:25 <Korollary> Pseudonym: the word is that the unadvertised job market dwarfs the advertised segment anyways
22:51:32 <lispy_> if they ask you what order arguments are on the stack during a C++ function call, tell them "If you need to know that, you need to rewrite your program."
22:52:11 <Korollary> lispy_: I was asked object layout questions in an interview. I repeated many times that it was an implementation detail. blah.
22:52:45 <lispy_> Pseudonym: for me the interviews were the most valuable.  we asked a lot of personality and personal experience questions to find out what sort of person they were.  we needed someone that would fit the team.
22:52:59 <Pseudonym> And if they ask you to write a copy constructor for some object, complain that they don't use managed pointers.
22:53:03 <lispy_> Korollary: yeah, that sort of stuff sucks
22:53:14 * Pseudonym did that in an interview and got more than 100% on the C++ test as a result
22:53:20 <Korollary> lol
22:53:25 <lispy_> Pseudonym: nice
22:53:50 <Korollary> they should ban asking about virtual destructors
22:53:51 <Pseudonym> Also because I knew to complain when I saw #include <stdio.h>
22:54:11 <Korollary> oh man, I used to tear people apart when they used printf
22:54:16 <lispy_> Pseudonym: i'm not all that good with C++, so a copy constructor should be using a managed pointer but their snippet didn't?
22:54:30 <lispy_> yeah, printf is so unsafe
22:54:35 <Pseudonym> Not just that, but if you MUST include something from stdio, at least have the decency to use <cstdio>.
22:54:43 <lispy_> yeah
22:54:47 <lispy_> .h is bad in c++
22:54:53 <Korollary> its not that
22:55:06 <lispy_> of course not just that
22:55:19 <Pseudonym> lispy_: The copy constructor question... well...
22:55:36 <lispy_> but as a rule of thumb you shouldn't see the sequence .h>
22:55:39 <Pseudonym> If you have an object with pointer members, it's not necessarily obvious what their copy semantics should be.
22:55:50 <Pseudonym> Sometimes you need to share the pointer, sometimes you need to clone the objects pointed to.
22:56:00 <lispy_> Pseudonym: oh, right
22:56:13 <Pseudonym> You also want to make it exception-safe.
22:56:23 <lispy_> so auto_ptr is not enough
22:56:26 <Pseudonym> Using managed pointers not only makes the semantics explicit, it makes them exception safe.
22:56:30 <Pseudonym> auto_ptr can be enough.
22:56:44 <Pseudonym> It means that the thing being pointed to can't be shared.
22:56:45 <lispy_> i thought auto_ptr just added automatic free/new
22:56:54 <lispy_> ah
22:56:55 <Korollary> I think = is overloaded
22:57:10 <lispy_> Korollary: yeah, that's a copy constructor
22:57:17 <lispy_> or at least sometihng you can usethem for
22:57:23 <lispy_> oh
22:57:29 <lispy_> you mean in auto_prt
22:57:31 <Korollary> yea
22:57:34 <lispy_> now i get it
22:58:58 <Korollary> "at this particular point in time" == "now" lol
22:59:06 <Korollary> I will enjoy this forum
22:59:15 <lispy_> heh
23:00:05 <Pseudonym> http://www.weaselwords.com.au/
23:00:08 <Pseudonym> That's the main web site.
23:01:09 * Korollary grabs a glass of hydration solution
23:03:41 <lispy_> Korollary: so did you give up on the idea of going back to school?
23:04:33 <Korollary> lispy_: yes
23:04:55 <lispy_> Korollary: did you apply at Galois?
23:05:01 <lispy_> Korollary: they are hiring a test engineer
23:05:11 <lispy_> and a senior software engineer
23:05:51 <Korollary> nope. I saw it, but I also saw that they did a lot of work requiring security clearance.
23:06:08 <Korollary> I am not a citizen, so I guess I won't be writing haskell anytime soon
23:06:17 <lispy_> ah
23:06:31 <lispy_> are you into programming now?
23:06:36 <lispy_> instead of EE?
23:06:56 <Korollary> I've been working as a s/w engr for the last five years
23:07:02 <lispy_> oh, wow
23:07:09 <lispy_> i wish i had a line on my resume liket hat
23:07:15 <lispy_> a lot more jobs would be available to me
23:07:30 <Korollary> yeah. it is pretty odd how few entry level jobs are out there.
23:07:36 <Korollary> I think the employers are morons.
23:07:42 <lispy_> yup
23:08:09 <lispy_> it's the reason i went back to school
23:08:20 <lispy_> i'm actually really sick of school
23:08:27 <Korollary> it was the right thing to do a year ago, though.
23:08:41 <lispy_> yeah
23:08:52 <lispy_> but i have some savings from IBM this summer
23:09:07 <Korollary> and it would look good on your resume
23:09:12 <lispy_> i'm tempted to just drop out and go job hunting down here in san jose
23:09:25 <Korollary> do it
23:09:31 <lispy_> :)
23:09:36 <lispy_> don't encourage me :)
23:09:41 <Korollary> it's a good time, tho
23:09:46 <lispy_> yeah
23:09:55 <lispy_> i should apply at Galois as a test engineer
23:10:10 <lispy_> with a bs in math and cs i'm sure they'd at least consider me
23:10:15 <Pseudonym> I wish someone was doing Haskell where I live.
23:10:37 <Pseudonym> I'd probably get a job at Galois if I applied, since I did honours with one of the guys there and postgrad with another one.
23:10:40 <Korollary> Pseudonym: Google will open an office in .au where they will write in haskell
23:10:48 <Pseudonym> Korollary: Yay!
23:10:49 <Pseudonym> I'm so there!
23:10:57 <Korollary> there you are, indeed
23:10:58 <lispy_> heh
23:11:26 <Pseudonym> Having two referees already on-staff would probably be a plus, re Galois.
23:12:17 <Korollary> Pseudonym: nVidia are still looking for a Sr Compiler Engineer
23:12:31 <Pseudonym> They can keep looking.
23:12:36 <Pseudonym> Or open an office here.
23:12:37 <Pseudonym> :-)
23:13:50 <Korollary> " An enthusiastic self starter is needed for this position". Is this you ?
23:14:14 * Pseudonym laughs
23:14:22 <Pseudonym> No, I need caffeine to get me started.
23:14:55 <Korollary> nVidia have been spamming the same ads for about a dozen jobs about 2 months now
23:24:28 <lispy_> Korollary: that was true last summer too
23:24:38 <lispy_> i think that's just the way they advertise
23:26:15 <Korollary> no, I think the fact that those ads stay that long tells something bad
23:27:31 <lispy_> hmm...possibly
23:27:38 <lispy_> they strike me a nice company tho
23:28:15 <Korollary> heh my current company looked good for about 3-4 years heh
23:56:17 <boegel> g'morning everyone
23:56:42 <Korollary> bon jour, belgique
23:57:33 * dblhelix is happy that boegel did wake up in time and got off the train
23:57:52 <boegel> dblhelix: yeah, but Itkovian stayed on it this time :)
23:58:18 <dblhelix> boegel: did he overcome his desire to strangle?
23:59:06 <boegel> boegel: yeah, I think he managed to fix his kernel, he worked on it until 2am :) and also, he managed to fix the HaskLS parser he was working on, a little grammar mistake or something like that
23:59:57 <dblhelix> glad to hear (well, that it's fixed, not that it take him so long)
