00:02:08 <foxy> I want to define something that gets detected by #ifdef but AC_SUBST doesn't allow me to have a non-definition
00:02:59 <dons> maybe you should use something like: AC_DEFINE_UNQUOTED(PATCH_COUNT, $PATCH_COUNT_, [Current patch count])
00:03:15 <dons> AC_DEFINE and friends are used for setting #defines
00:03:29 <dons> they default to #undef otherwisee.
00:03:34 <foxy> ahh
00:03:44 <foxy> what's the patch count thing for?
00:03:57 <dons> the above produces #define PATCH_COUNT n, where $PATCH_COUNT_ is a shell variable containing 'n'
00:04:23 <dons> the above illustrates how to connect shell variables in the configure script to cpp defines in config.h
00:04:45 <dons> it's from the yi configure.ac, which does a lot of such tricks. you could look at that for inspiration
00:04:52 <dons> or read info autoconf
00:04:56 <foxy> ok
00:05:46 <dons> the _UNQUOTED lets the value of $PATCH_COUNT_ be substituted for its name, otherwise we'd literally get #define PATCH_COUNT $PATCH_COUNT_, not some number 'n'
00:06:09 <dons> it's an evil world of hacking, begging for a nice dsl
00:06:44 <Gahhh> heh
00:07:09 <Gahhh> languages with $vars
00:08:49 <dons> i really find it mind boggling that they ended up writing a sh/m4 edsl, which we know as autoconf
00:12:20 <dbremner> dons - it's a perl script that uses m4 macros to generate shell.
00:13:17 <dons> yeah, so you write a language that's a mixture of sh and m4. this perl compiler then produces a shell script out of that.
00:14:10 <Gahhh> dons: these guys were not deep into PL. He who is in a position to mess with autoconf deserves my sympathy.
00:14:32 <dons> so configure.ac's can be considered a language embedded as a mixture of sh/m4, that run on the sh-machine
00:15:26 <dons> with pretty much no static checking - you discover your code made no sense only after you execute the compiled code on a sh
00:16:37 <dons> Gahhh, such an understatement: "The autoconf guys were not that deep into PL"
00:16:49 <dons> but did they care? hell no!
00:18:06 <Gahhh> dons: Do you ever think of what you possibly don't care or neglect ? We all have shortcomings.
00:19:02 <dons> yeah, sure. I'm sorry, autoconf is just one of my favourite things to pick on :}
00:19:19 * Gahhh rips rpm a new one himself
00:24:44 * skew is writing an intro paper on types
00:38:34 <skew> iblechbot: @moo
00:56:55 <lispy> does Haskell 98 have a gcd on Integers?
00:57:05 <foxy> can you have nested #ifdef statements?
00:58:23 <lispy> ah, here it is
00:58:31 <lispy> @type gcd
00:58:37 <lambdabot> gcd :: forall a. (Integral a) => a -> a -> a
01:02:46 <dons> lispy, yes! in fact it's a ghc *primop*, amazingly.
01:03:04 <dons> primop   IntGcdOp    "gcdInt#"    Dyadic   Int# -> Int# -> Int#
01:03:05 <lispy> cool
01:03:09 <autrijus> foxy: yes, you can.
01:03:29 <lispy> i'm implementing the pollard rho method
01:03:56 <skew> dons: for Int# too? I would expect one for Integer inherited from gmp, but Int# is a bit surprising
01:17:27 <dons> skew, the others are built on top of the primop
01:17:49 <dons> gcdInteger :: Integer -> Integer -> Integer
01:17:57 <dons> gcdInteger (J# sa a) (J# sb b)
01:17:57 <dons>   = case gcdInteger# sa a sb b of (# sg, g #) -> J# sg g
01:18:36 <dons> ah, and we have gcdInteger#, as you suspected:
01:18:40 <dons> primop   IntegerGcdOp   "gcdInteger#" GenPrimOp
01:18:41 <dons>    Int# -> ByteArr# -> Int# -> ByteArr# -> (# Int#, ByteArr# #)
01:18:51 <dons> which is just a gmp call.
01:22:40 <lispy> has anyone else noticed that the emacs haskell mode doesn't seem to uncomment regions correctly
01:23:06 <lispy> it leaves a space in the first column, and then i get indentation errors
01:27:43 <musasabi> morning
02:03:02 <Maddas> @yow
02:03:03 <lambdabot> I'm a nuclear submarine under the polar ice cap and I need a Kleenex!
02:15:00 * Maddas laughs at shapr's Crack Attack quip
02:18:02 <dons> morning TheHunter
02:19:00 <TheHunter> morning dons.
02:23:54 <musasabi> What is the way to embed a haskell application inside a shared library?
02:26:02 <dons> use -dynamic to create a shared Haskell library, perhaps? (mac only)
02:26:21 <musasabi> linux i386...
02:27:01 <dons> you can certainly turn it into a normal .a library, and use hs-plugins in the application to load the lib (that works from C too)
02:27:07 <musasabi> The main app is not written in haskell and the plugin has a C interface which would talk to the main app, but I would like to write the inner parts with Haskell.
02:27:42 <musasabi> dons: still have to get hs-plugins into the so...
02:28:17 <dons> yes, you'd have to statically link it into the application
02:28:23 <dons> along with libHSrts.a
02:28:38 <dons> the hs-plugins paper covers some of the options in this area.
02:28:59 <dons> there's an objective-C program that loads a Haskell parser dynamically, for example.
02:29:52 <musasabi> I cannot really get the code into the main app, only as a shared lib.
02:30:45 <dons> this is a good question for glasgow-haskell-users. Wolfgang may know some extra linker tricks here.
02:30:57 <dons> so all the app lets you load is a .so?
02:31:13 <dons> and you want to write that as a C wrapper over some Haskell.
02:31:24 <musasabi> exactly.
02:31:57 * Lemmih did that for his mod_haskell apache module.
02:32:12 * musasabi goes googling.
02:32:14 <dons> do you have to statically link libHSrts.a into the app though?
02:32:26 <dons> how do you get the rts running?
02:32:49 <dons> oh, maybe just the ffi is enough.
02:32:58 <dons> not sure in the presence of .so files though
02:34:25 <dons> Lemmih, how did you dyn load the Haskell objects and Haskell rts in apache?
02:34:26 <Lemmih> I got a C wrapper function which calls 'startupHaskell'.
02:35:52 <musasabi> Lemmih: so you only use C in the module and use the C interface to the ghc rts to load haskell objects?
02:36:39 <Lemmih> I statically linked it with the Haskell code. The haskell code then uses hs-plugins.
02:37:44 <musasabi> so you build it into apache proper?
02:40:28 <dons> ok, so that's how I thought it would work.  link app with hs-plugins and Haskell rts. then call a C stub which starts Haskell up, and jumps to a Haskell module using hs-plugins. that module loads the Haskell code
02:40:50 <Lemmih> musasabi: No, I link it in the .so file.
02:41:09 <dons> ah! that's what musasabi needs, I think.
02:41:40 <Lemmih> ozone says it probably won't work on non-x86 platforms.
02:42:09 <musasabi> so it works because non-pic code == pic code on x86?
02:42:11 <dons> So the  C dyn loader loads the .so file, and calls a C function in it, which starts Haskell, calls into an hs-plugins module, and loads the Haskell plugins
02:42:34 <musasabi> sounds nifty, thanks.
02:43:13 <JohnMeacham> Howdy!
02:43:16 <dons> so the magic is the ld flags to create the .so containing the ghc rts and hs-plugins, I would think
02:43:43 <JohnMeacham> I am back. I accidentally participated in an open casting call for an apple commerciale that is what happins when you gen drunk in LA.
02:44:08 <JohnMeacham> not that I think they will pick me. I made a humorous face for the headshot.
02:51:10 <musasabi> grah. have to go out to play (pesky gf), have fun.
02:51:35 <TheHunter> hmm, can't i export a qualified module?
02:57:03 * boegel greets #haskell
02:57:44 * TheHunter greets boegel
03:04:07 <TheHunter> can somebody confirm that it's impossible to export a whole qualified module?
03:05:45 <dons> hmm.
03:07:12 <TheHunter> i'd like to do module Lambdabot ( ..., module IRC) where import qualified IRC.
03:12:14 <dons> yep, Haskell report says, I think, "one or more unqualified import declarations may be named by the form `module m'"
03:12:54 <dons> Under "Entities in an export list may be named as follows:", S5.2
03:13:16 <TheHunter> oh, well, then every module will have to import IRC separately, thanks.
03:13:20 * xerox dances, it's just arrived his new mp3 player!
03:40:58 * boegel wonders what kind of mp3 player xerox bought
03:43:07 <xerox> hmm
03:43:48 <xerox> @google Rio Karma site:www.digitalnetworksna.com
03:43:49 <lambdabot> http://www.digitalnetworksna.com/shop/_templates/item_main_Rio.asp?mod
03:43:49 <lambdabot> el=261
03:43:56 <xerox> Exactly.
03:44:37 <TheHunter> ok, i'll fix that.
03:45:05 <TheHunter> @listcommands google
03:45:07 <lambdabot> search provides: google wikipedia
03:45:27 <boegel> why no iPod ?
03:45:49 <xerox> It costed me 1/2 of a 20Gb iPod :-)
03:46:15 <xerox> And it has an embedded webserver! yay :-)
03:47:25 <mflux> an mp3-player with integrated bluetooth, dialup-profile and a web-server could be a killer at some events - everyone with a cell phone would be the dj!
03:47:32 <mflux> oh wait, would that be a good thing..
03:47:39 <xerox> It definitely would.
03:48:47 <boegel> xerox: nice
03:48:54 <boegel> but I'll stick to my iPod mini
03:49:19 <xerox> boegel yup! I don't have much money anyway :-)
03:49:23 <Maddas> mflux: A Ringtone party?
03:50:06 <Maddas> xerox: looks nifty!
03:50:28 <xerox> I'm enjoying OGG & FLAC support ^__^
03:51:30 <Maddas> I wish I had the hard disk space to keep significant amounts of my music in FLAC
03:51:40 <Maddas> er, a significant part
03:51:59 <xerox> That's where the 20Gigs enters in play, /me yows
03:52:10 * lispy <3 Haskell
03:52:33 <lispy> i just implemented an algo for testing for primes, and it seems to be correct
03:52:50 <xerox> Nice!
03:52:54 <lispy> or rather, my algo generates primes, using some cool algos that test for primality
03:53:28 <lispy> it's uhh...what is the name of algo, Miller-Rabin I think...
03:53:55 <pirroH> yes, probabilistic test
03:54:03 <lispy> maple agrees that the generated numbers are prime :)
03:54:49 <lispy> heh, i just tried to generate a prime in the range 2^4096, 2^4097 and it takes too long :)
03:55:13 <lispy> oh, but 1024 bit is pretty fast :)
03:55:29 <lispy> and prime :)
03:55:41 <lispy> or at least, probably prime
03:56:22 <pirroH> when cpu will be fast enough, we'll use 4096bit rsa keys... now 1024 should make us sleep well
03:56:24 <lispy> my book here says that if the generalized Reimann hypothesis is true that the Miller-Rabin probabilitic can be turned into a deterministic algo
03:56:58 <lispy> i should plug this prime generator together with my rsa in haskell implementation
03:57:31 <Maddas> Cool :-)
03:57:53 <mflux> at clf someone brought up a point that haskell would be the wrong tool writing a ssh server.. so atleast some buildings blocks would be there?-)
03:58:12 <Maddas> CLF?
03:58:21 <lispy> why would it be the wrong tool for an ssh server?
03:58:22 <mflux> comp.lang.functional
03:58:26 <dons> they're all there. why wouldn't you be able to write it?
03:58:52 <lispy> yeah, i find it hard to believe i'm the first to implement rsa and miller-rabin in haskell :)
03:59:02 <dons> we have a web server for example, with excellent performance. if anything, I'd *like* to see a ssh server written this way. I'd trust it more.
03:59:04 <mflux> well, the author of that assertion maybe didn't have much experience with haskell
03:59:15 <lispy> ah
03:59:26 <mflux> it was also suggested, by others, that such a project would make more sense from the security POV, if all components were written in haskell
03:59:28 <lispy> yeah, people on darcs-users suggest porting darcs to java all the time
03:59:39 <lispy> (and when i say all the time i mean, it came up once0
04:00:05 <dons> oh, java. that's really portable ;)
04:00:13 <lispy> it seems that 2048 is also terribly slow
04:00:34 <lispy> dons: yeah, actually, it appears to be less portable than ghc and gcc...
04:00:41 <dons> far less.
04:00:58 <dons> ghc runs on, what 10 archs. and more if we had them
04:00:58 <lispy> although, darcs doesn't like to run on solaris and java does...
04:01:02 <dons> nhc runs on 22 or so.
04:01:08 <lispy> nice
04:01:16 <dons> darcs doesn't run on solaris? why not?
04:01:16 <mflux> darcs doesn't run on solaris?-o
04:01:21 <mflux> sync ;)
04:01:24 <dons> ghc works fine on solaris.
04:01:34 <dons> even sparc/solaris
04:01:43 <lispy> yes, but it's hard to get a working version of darcs on solaris
04:01:47 <lispy> not impossible
04:01:59 <lispy> i think it's mainly a problem with solaris 8
04:02:04 <dons> why hard? or is it building ghc that's the problem?
04:02:09 <lispy> which is old ...
04:02:15 <lispy> no, it's darcs not ghc
04:02:31 <mflux> solaris 8 is still a lot around there
04:02:37 <lispy> i had some weird segfaulting behavior when darcs tried to read or write patches
04:02:44 <mflux> is there even solaris version 9? atleast I haven't heard anyone is using it ;)
04:02:50 <pirroH> it's also hard to get a JVM working on quite all architectures...
04:03:04 <lispy> mflux: there is, but it think most places are skipping to 10
04:03:23 <mflux> and as 10 is so new, it'll still take a few years before most have switched..
04:03:25 <lispy> my school is going to switch to 10 this summer
04:03:40 <lispy> for better or worse :)
04:03:46 <dons> why not linux? ;)
04:03:57 <lispy> dons: yeah, i wonder that too
04:04:03 <dons> we've been running linux at unsw for 5 or so years now.
04:04:09 <lispy> we do have a few RedHat Enterprise servers now
04:04:26 <mflux> atleast at our school I must say the linux server hasn't quite been able to fill solaris' shoes
04:04:31 * boegel leaves to work
04:04:32 <lispy> i'm surprised they use RH, but it's because of the support package they get
04:04:38 <Maddas> Many of our Solaris boxes have been replaced with Linux boxes
04:04:41 <mflux> not everything was switched to linux though
04:04:51 <mflux> only a few 'public' servers
04:05:05 <lispy> my desktop at school is a linux machine now.  I was quite happy to have my winxp box go away
04:05:08 <Maddas> I think the large majority of the public Linux boxes at our university run Debian
04:05:11 <mflux> (and I believe when they renew workstation classes linux is going there too)
04:05:38 <Marios> hello, im  writing a parser in haskell now im trying to write a function(s) to check if a word that a user enters in hugs match a list of words,i know i need to use elem but cant figure out what to do next, any ideas thanx
04:05:55 <lispy> if i need windows (which i do for MS Office and our research prototype) i just rdesktop to a win2k3 serer
04:05:58 <lispy> er server
04:06:00 <TFK> How are list comprehensions defined/implemented in Haskell?
04:06:28 <dons> via desugaring. the translation is defined in the report
04:06:40 <lispy> dons: do they use the underlying monad?
04:06:51 <lispy> or maybe it's an overlying monad....
04:06:51 <dons> I'd doubt it.
04:07:08 * TFK reads
04:07:35 <lispy> hm...gnus is misfiling mail
04:08:47 <lispy> this is so weird, this email appears to be from the darcs-users mail list, but it's written by my cousin, and i don't think he's ever heard of darcs
04:09:14 <dons> [  e | p <- l, Q ]    = let ok p = [  e | Q ]
04:09:18 <dons>                             ok _ = []
04:09:20 <lispy> family greeting: from Belgium / [darcs-users] Re: Segfaults on
04:09:22 <lispy>         Solaris 8/SPARC darcs 1.0.2
04:09:24 <dons>                         in concatMap ok l
04:09:36 <dons> defined with a map.
04:09:55 <dons> [  e | b, Q ]         = if b then [  e | Q ] else []
04:10:17 <dons> so they're just sugar :)
04:12:25 * TFK rattles his brainbox
04:13:15 <lispy> OH
04:13:28 <lispy> I think i know what my cousin did, I think he found me via a mailing list
04:13:40 <lispy> heh, and he cc'd the list when he emailed me :)
04:13:42 <lispy> oops
04:13:59 <mflux> nothing too personal I hope?-)
04:14:17 <lispy> nah, not really :)
04:14:27 <lispy> just news about his kids mostly
04:15:01 <lispy> i just hope the darcs-users don't hassle him too much :)
04:15:03 <Oejet> @type elem
04:15:04 <mflux> hmm.. so how does that happen by accident.. via google groups maybe?
04:15:15 <lambdabot> elem :: forall a. (Eq a) => a -> [a] -> Bool
04:15:17 <lispy> probably
04:15:20 <lispy> or a google search
04:15:51 <mflux> but if you get a mail from web archives, how would it come to someone to send the mail to you plus cc it to another address
04:16:02 <lispy> i think what he did, was try to reply to an entry of mine on the mailling list, but it went to the darcs list instead of directly me (now that i take a close look, i don't see my email address anywhere on the mail)
04:16:18 <mflux> oh, well that would explain
04:16:57 <lispy> heh, it's 4:15 am, how did that happen...
04:28:08 <dons> @ghc
04:28:12 <lambdabot>  Urk infer
04:28:21 <dons> hehehe
04:28:42 <dons> bonus points for anyone who triggers that one.
07:21:35 <Oejet> Does someone have experimental Debian packages for GHC that I could get?
07:21:48 <basti_> experimental?
07:22:05 <Oejet> Fresher than unstable.
07:22:16 <basti_> ah
07:23:04 <Lemmih> @google haskell-unsafe
07:23:06 <lambdabot> http://haskell-unsafe.alioth.debian.org/haskell-unsafe.html
07:24:02 <Oejet> Thanks, Lemmih!
07:25:25 <cptchaos> hi, does anyone know what an Edge Exception is? (Im playing with fgl in the ghc-6.4 library) ?
07:25:58 <basti_> "Edge" is a pci interrupt mode
07:26:55 <basti_> :)
07:27:05 <cptchaos> basti_: that would be odd ;-) the think it is correlated to the edges in the graph library ...
07:27:18 <cptchaos> if not ;-(
07:29:14 <basti_> i wouldn't know how to interpret an "edge exception" in graphs
07:30:00 <cptchaos> the full error message is:
07:30:05 <cptchaos> *** Exception: Edge Exception, Node: 2
07:30:39 <cptchaos> ok, will look at the library code tomorrow
09:10:50 <Lemmih> Later dudes.
09:11:15 <shapr> @yow !
09:11:16 <lambdabot> Well, O.K.  I'll compromise with my principles because of EXISTENTIAL
09:11:16 <lambdabot> DESPAIR!
09:12:26 <MachinShin> hey all
09:12:49 <Philippa> y'know, I really shouldn't be the first person in here to say hi, but what the hell :-)
09:12:53 <Philippa> (oh, and: hi)
09:13:43 <TFK> Philippa, why, does #haskell have an official greeter? ;-)
09:13:58 <Philippa> TFK: I know MachinShin from elsewhere, and IIRC it's probably my fault he's here
09:14:10 <Philippa> though shapr's pretty close to official greeter
09:14:29 <Philippa> MachinShin: 'sup?
09:15:05 <TFK> Hmmm, shaprbot...
09:15:20 <Philippa> @shapr
09:15:21 <lambdabot> Unknown command, try @listcommands.
09:15:25 <Philippa> ah well
09:15:33 <reffie> @ghc
09:15:33 <lambdabot>  Can't match unequal length lists
09:15:48 <MachinShin> Philippa: not so much. finally got dsl @ home
09:16:04 <Philippa> ah
09:16:13 <Philippa> I'm stuck with my 'rents for the weekend. Had to nick Damien's laptop
09:16:21 <MachinShin> look up specs on a new comp to buy
09:16:23 <MachinShin> damien?
09:16:28 <Philippa> my b/f
09:16:32 <MachinShin> ah.
09:16:45 * MachinShin going to see parents during cousin's baby shower weekend of 22nd
09:16:55 * MachinShin may not be going to iceland in june :((
09:17:34 <Philippa> erk
09:17:46 <Philippa> mind you, closest I ever get to a holiday is going to see friends around the UK
09:17:47 <MachinShin> cheap ass bastards
09:18:31 <Heffalump> machinshin: Iceland's good.
09:18:35 <MachinShin> iceland was for work. not vacation.
09:18:36 * Heffalump went there last month
09:18:47 <Philippa> MachinShin: ah
09:18:55 <Heffalump> but if it's for work, Reykjavik is pretty boring.
09:18:59 <MachinShin> though, it's hard to say. depends how well UAT goes. maybe i shoudl toss a few time-sensitive bugs into the code :P
09:19:54 <MachinShin> unofficially it's a "keep some bags packed" situation.
09:20:09 <MachinShin> uat == user acceptance testing
09:20:22 <FrederikEaton> hey are the new X11 bindings unstable?
09:21:52 <FrederikEaton> i'm getting "user error (Error bad status 1 raised in function getGeometry)"
09:34:19 <FrederikEaton> but i'm sure the window i called it with exists
09:34:19 <FrederikEaton> ugh
09:42:35 * shapr calls his window, "hello?"
09:43:00 <araujo> lambdabot, paste?
09:43:04 <shapr> @paste
09:43:05 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
09:43:09 <araujo> hah
09:43:10 <araujo> thanks shammah
09:43:14 <araujo> thanks shapr
09:43:16 * shapr grins
09:43:58 <Philippa> 'lo shapr
09:44:15 <shapr> y0
09:44:51 <Philippa> on account of having absolutely nothing to do I'm playing with the regions stuff in ATTaPL
09:45:29 <Gahhh> this from a slashdotter in agony: "Its bad enough people are wasting so much time toying around with Pugs, which regardless of what you read is throwaway code, yet seems to be capturing the interest of most of the posts on the perl6 lists."
09:45:46 <Philippa> hah
09:45:58 <Philippa> I wonder what the definition of 'throwaway' is here
09:46:05 <tuomov> the usual /. crap
09:46:30 <Philippa> it's capturing interest because it's the most likely way they're going to get a full perl6 implementation any time soon, but hey
09:46:32 <tuomov> It's been totally taken over by the windows-using mainstream
09:46:44 <tuomov> and anything that isn't mainstream is bad
09:46:59 <shapr> Gahhh: is that a recent post?
09:47:13 <Gahhh> shapr: yes. from the "Harmony" thread
09:47:48 <Gahhh> http://developers.slashdot.org/comments.pl?sid=148688&threshold=1&commentsort=0&tid=108&tid=8&mode=thread&pid=12462150#12462454
09:52:44 <shapr> Huh, I just got an email from someone who shares my interest in zero button testing and found me via the irc logs.
09:52:58 <shapr> Check it out: http://www.flickr.com/photos/carlmanaster/9322576/in/set-228603/
09:53:01 <Gahhh> spooky
09:53:11 <Heffalump> zero button testing?
09:53:13 <shapr> That's way spiffy.
09:57:08 <Gahhh> shapr: This can be built into a haskell compiler. You can write quicksort = .... and add a line that says "also please verify that quicksort [3,1,2] = [1,2,3]" or something.
09:57:52 <Igloo> You need an editing environment more like epigram for what I think they mean
09:58:07 <Gahhh> yes the editor needs to be heavily involved
09:58:10 <shapr> My original thought was to add a save-hook for emacs. That's easy and portable across OS's, but not across editors.
09:58:14 <Igloo> epigram actually already does something similar with a brown background for something, I think
09:58:22 <Igloo> Type errors possibly? I don't remember
09:58:33 <shapr> Linux' inotify is portable across editors, but not across OSes.
09:58:44 <shapr> This guy wants to build it into a language.
09:59:24 <Gahhh> I don't think it's language feature tho
09:59:35 <shapr> I agree, I think it's an editor feature.
09:59:49 <shapr> But as Igloo says, with something like Epigram it is a language feature.
10:00:08 <Gahhh> and it would work best for haskell (or pure functional in general) than for perl.
10:00:15 <shapr> Because you just might be able to encode your unit tests into Epigram types.
10:06:28 <Gahhh> question: null is defiend as follows: null [] = True; null (_:_) = False; . Why not just "null [] = True; null _ = False;" ?
10:06:42 <Gahhh> to exclude _|_ ?
10:08:21 <Heffalump> no, that doesn't exclude _|_
10:08:58 <Heffalump> the second you inspect _|_ by pattern matching the whole result becomes _|_
10:09:05 <Heffalump> I guess it's just clearer.
10:09:19 <Gahhh> ok
10:09:25 <Gahhh> thx
10:09:27 <Igloo> Some people like to write definitions that still work if you shuffle the order of the clauses
10:09:47 <Gahhh> ah, good point
10:15:13 <FrederikEaton> could it be that my xlib version is wrong? but wouldn't that be detected?
10:17:20 <FrederikEaton> there are functions mentioned in the haskell xlib documentation that i don't have man pages for. like XGeometry
10:18:26 <Gahhh> is this relevant ?
10:18:26 <Gahhh> http://tronche.com/gui/x/xlib/appendix/d/XGeometry.html
10:21:14 <FrederikEaton> yeah that doesn't make any sense. thanks though
10:24:45 <Maddas> Couldn't you have (in a less sophisticated form, of course) what the Zero Button testing does by writing tests in a way so that Emacs can seperate the tests from the rest of the file and then having Emacs highlight the function definition(s) that failed if the tests didn't complete successfully?
10:24:56 <shapr> Yup.
10:25:02 <Maddas> Ok (:
10:25:08 <shapr> That's what I'd like to do.
10:31:53 <Maddas> A thing that goes into the same direction is if you use SLIME (Emacs mode) and SBCL (CL compiler) and compile something using certain optimization settings, SBCL prints compiler notes, if you use SLIME, the source is annotated at the proper with those notes, http://fresh.homeunix.net/~luke/misc/lisp/slime-shot.png has an example
10:35:38 <Maddas> Er, "proper locations"
10:39:50 <FrederikEaton> that's odd I get BadRequest from XGetGeometry in my C++ code too, it's just that haskell looks at the result and throws an error
10:40:04 <FrederikEaton> but in the C++ code it's actually giving me correct results
10:40:47 <MachinShin> hah
10:40:52 <MachinShin> meaning you're screwing up somewher :)
10:41:18 <FrederikEaton> who me? :)
10:41:50 <FrederikEaton> but why would it be returning BadRequest *and* fulfilling the request?
10:42:04 <Gahhh> bug ?
10:43:49 <FrederikEaton> in xlib?
10:44:33 <MachinShin> unlikely , but possible
10:46:09 <FrederikEaton> no looking at the code example in the book it looks like a bug in the docs *and* headers, and the haskell binding implementors fell for it
10:48:56 * shapr hugs FrederikEaton 
10:57:18 <FrederikEaton> huh. should i complain to glasgow-haskell-bugs then?
11:00:46 <FrederikEaton> since the library is part of ghc...
11:01:10 <FrederikEaton> actually it looks like the Status type is indeed meant to be interpreted as 0 on failure, non-0 on success
11:03:54 <foxy> where can I get a binary package of gtk2hs for ghc 6.4 gtk+2.6? I only have 300MB and can't compile from source
11:09:16 <NYRanger> hey all.  I am feeling very dumb because something that seems elementary does not seem to work.  I define something similir to:
11:09:22 <NYRanger> function (h:t) = h
11:09:27 <NYRanger> why might that not work ?
11:10:02 <sorje> what is the error message?
11:10:16 <NYRanger> sorje: i also have function [] = []
11:10:21 <NYRanger> i dont know if that might be contributing to the problem.
11:10:37 <NYRanger> :r
11:10:48 <NYRanger> wrong window ;-)
11:10:53 <TFK> NYRanger, how/when does it fail?
11:11:36 <TFK> Hmmm. h must be of type [a], then.
11:12:13 <sorje> it "works", but function :: [[a]] -> [a] is probably not what you expected
11:12:25 <NYRanger> ERROR - Unresolved overloading ; *** Type       : Num [a] => [a]  ; *** Expression : sortlist [10,15]
11:12:39 <TFK> What is sortlist?
11:12:39 <NYRanger> it loads into haskell fine, but sortlist [10,15] causes that error.
11:12:47 <NYRanger> TFK: sortlist is the real name of function
11:12:50 <TFK> Paste the entire code into hbin.dyndns.org
11:13:01 <TFK> >:3
11:13:21 <NYRanger> http://hbin.dyndns.org/pastebin/33.html
11:13:26 <TFK> Well, actually, it's already obvious that sortlist can only operate on [[a]], not [a]
11:13:30 <NYRanger> i dont want the solution to sort the list, i just want to know why my code does not work.
11:13:51 <NYRanger> TFK: Why is it so obvious?
11:13:58 <NYRanger> its hould be actually, sortlist [x] = [x]
11:14:18 <TFK> because h in this case is one element of the original list, h:t
11:14:37 <TFK> Thus, [10, 15] = 10:[15]
11:14:46 <NYRanger> TFK: if h is the head of the list, wouldnt somefunc (h:t) = h be a way of getting the head of the list ?
11:15:10 <TFK> Yes. However, consider this: sortlist [] = [] -- right?
11:15:16 <TFK> That means that the function returns a list.
11:15:26 <NYRanger> correct, sortlist of an empty list is a list.
11:15:44 <TFK> Hold on tiger. that means that sortlist :: <something here> -> [a]
11:16:02 <NYRanger> correct
11:16:14 <TFK> So it returns a list. However, sortlist (h:t) = h -- returns an element, which is not a list! This will only work if sortlist will operate on a list of lists, [[a]].
11:16:28 <NYRanger> ah I understand now.
11:16:36 <foxy> @help karma
11:16:37 <lambdabot> return a person's karma value
11:16:46 <TFK> ^_^
11:17:08 <foxy> @karma lambdabot
11:17:10 <lambdabot> lambdabot has a karma of 2
11:17:27 <CosmicRay> autrijus: ping
11:20:49 <Gahhh> @karma foxy
11:20:49 <lambdabot> foxy has a karma of 1
11:23:25 <NYRanger> wow
11:23:41 <Heffalump> @karma Heffalump
11:23:42 <lambdabot> You have a karma of 0
11:23:46 <NYRanger> i just wrote a very cool / fun / interesting list sorting routine in haskell mostly by myself, can i paste the code and get some comments
11:24:34 <pediddle> @paste
11:24:35 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
11:24:43 <NYRanger> http://hbin.dyndns.org/pastebin/34.html
11:25:27 <NYRanger> it doesnt work correctly though
11:28:49 <TFK> Looks pretty convoulted.
11:29:01 <NYRanger> TFK: let me fix it :-)
11:29:03 <Cale> NYRanger: It seems to only sort one
11:29:18 <Cale> Like, it puts the least element at the head of the list.
11:29:23 <pediddle> NYRanger: i do believe that is even less efficient than insertion sort
11:29:36 <NYRanger> pediddle: is it worse then bubble sort? :-)
11:30:11 <TFK> What's wrong with the 4-line quicksort which is the opening line of every Haskell tutorial? ;-)
11:30:30 <Cale> NYRanger: btw, minnum is just min, but uncurried
11:30:44 <TFK> *convoluted
11:30:44 <NYRanger> TFK: nothing lol.  I just thought it would be mighty interesting to take an idea in my head and put it down in a haskell program.
11:30:53 <pediddle> actually minnum is (<), and minlist is just min
11:31:16 <Gahhh> NYRanger: so are you investigating this algorithm or learning haskell or both ?
11:31:21 <Cale> pediddle: no
11:31:25 <NYRanger> Gahhh: learning Haskell
11:31:27 <TFK> It's not fun until you've rewritten every single function in the Prelude :-P
11:31:35 <pediddle> NYRanger: but the immediate problem is you don't recursively call sortlist in the "else" case, so it only sorts one
11:31:40 <pediddle> @type min
11:31:44 <pediddle> @type (<)
11:31:45 <NYRanger> pediddle: I know :-)
11:31:47 <lambdabot> min :: forall a. (Ord a) => a -> a -> a
11:31:47 <lambdabot> (<) :: forall a. (Ord a) => a -> a -> Bool
11:31:53 <Gahhh> NYRanger: it's all good then. Keep going at it.
11:31:54 <pediddle> hmm, i was wrong
11:32:53 <NYRanger> pediddle: this is the working code, http://hbin.dyndns.org/pastebin/35.html
11:33:55 <Cale> NYRanger: and minlist is called minimum
11:34:21 <NYRanger> nice.
11:35:31 <NYRanger> is their a pre-written removenode function too?
11:36:03 <Cale> delete
11:36:22 <Cale> that's in the list library
11:37:27 <NYRanger> now my code went down to 4 linews
11:37:39 <NYRanger> so every single helper function I wrote has already been written.  Nice.
11:41:17 <TheHunter> i don't get it. Me:
11:41:21 <TheHunter> QUIT :test
11:41:26 <TheHunter> ERROR :Closing Link: TheHunter ("test")
11:41:30 <TheHunter> the bot:
11:41:32 <sorje> NYRanger, you may want to have a look at Data.List.sort too ;-)
11:41:47 <Cale> hehe
11:41:54 <TheHunter> QUIT :foo
11:42:01 <TheHunter> ERROR :Closing Link: thbot (Client Quit)
11:43:01 <Cale> TheHunter: is the output flushed before the connection is closed?
11:43:54 <TheHunter> the connection isn't even closed by the bot. It just waits for an error.
11:43:58 <TheHunter> Maybe that's the problem.
11:44:14 <Heffalump> are you testing with telnet or netcat?
11:44:32 <TheHunter> ethereal.
11:44:55 <Heffalump> you're tracing what your IRC client does, then?
11:45:01 <TheHunter> yep.
11:45:50 <Heffalump> I just tried QUIT :foo from telnet
11:46:06 <Heffalump> and that was the result
11:46:49 <TheHunter> yeah, same here.
11:47:01 <Cale> what does the RFC say?
11:47:32 * TheHunter checks
11:48:04 <basti_> hi
11:48:20 <Cale> http://www.faqs.org/rfcs/rfc1459.html -- it seems to say that "QUIT :bye" is right
11:50:48 <mwc> Anybody know of any other good autoconf replacements besides SCons?
11:57:57 <vegai> mwc: cabal :-)
11:58:56 <mwc> vegai: I'm afraid I can't get away with using Haskell on the cluster yet.
11:59:20 <vegai> then there's the "premake kit"
11:59:33 <vegai> http://pmk.sf.net
12:00:10 <mwc> vegai: reading...
12:00:46 <TheHunter> hehe, seems like xchat doesn't ensure a proper quit message either.
12:01:30 * mwc plugs irssi
12:02:22 <vegai> I'm not sure what the motivation for pmk is. It seems more or less the same as autotools
12:02:32 <vegai> perhaps it's just intended to be a bit clearer
12:02:51 <mwc> I'm not exactly in love with the auto* suite
12:03:03 <vegai> I don't think any sane person is
12:03:36 <mwc> Scons looks pretty good, requires Python 1.5, I think even the cluster has that :P
12:03:55 <mwc> The admins are either lazy or using debian -stable
12:05:33 <mwc> Trying to find a build infrastructure that will work anywhere, that's a big req
12:06:47 <vegai> right. PMK is restricted to posix
12:07:07 <mwc> vegai: yeah, but does it need to be "installed"?
12:07:12 <vegai> yes
12:07:27 <mwc> I'll have to look into that
12:10:53 * shapr throws sharpened lambdas!
12:11:08 <xerox> YO shapr!
12:11:47 * mwc ducks and weaves lambda shuriken
12:12:17 <basti_> i imagine lambdas are made of play-dough
12:12:39 <mwc> If by playdough you mean adamantium, then sure
12:12:44 * shapr grins
12:13:12 <shapr> mwc: The development version of GHC has SMP support, could be fun on a cluster.
12:13:36 <mwc> shapr: yeah, and I just need to get the cluster admins to install it
12:13:51 <basti_> tell them it's a new build of fortran
12:13:56 <mwc> BUt yeah, would be neat to see how it scales across 400 CPUS.
12:13:59 <shapr> The SMP version isn't released yet, so I doubt they'll do that.
12:14:22 <shapr> Yes, I would like to see how it scales across 400 CPUs.
12:14:23 <mwc> Pity though, Haskell would kill in the applied math department
12:14:39 <mwc> As it is I'm working with C++/Blitz and MPI
12:14:54 <xerox> shapr, the music player arrived today! It's _soooo_ nice:-)
12:15:04 <shapr> Maybe you can hack the parallel arrays code to hand out computations?
12:15:08 <shapr> xerox: spiffy!
12:15:49 <mwc> shapr: I was going to try and get a lambdabot installed on her
12:16:00 <xerox> The docking station lights up in a glow blue, and it can pulse with the rhythm of song currently played, gaaaah :-)
12:16:09 * shapr thinks of lambdabot-smp
12:16:17 <shapr> xerox: wow cool!
12:16:45 <xerox> shapr, I'm enjoying tons of ogg/flac music, too.  And its embedde webserver! Yay!
12:16:55 <shapr> w00!
12:17:03 <xerox> err, embedded.
12:17:04 <Philippa> don't suppose it runs CGIs? :-)
12:17:17 <xerox> The application it runs is in Java, tough :-)
12:17:29 <mwc> shapr: /join #compfluiddyn
12:17:56 <basti_> there is a channel #compfluiddyn???
12:18:05 <shapr> mwc: looks empty.
12:18:13 <basti_> lol
12:18:17 <mwc> yeah, but that's where I'd put the bot.
12:18:20 <shapr> oh
12:18:59 <basti_> -g-
12:19:41 * basti_ wants a open source wavelet galerkin method base.
12:19:58 * basti_ after that wants an open source method of moments base
12:20:14 * shapr wants all your base
12:20:40 * Philippa sets shapr up the bomb
12:20:50 <shapr> Take off every zig!
12:20:58 * mwc makes his piece.
12:21:26 -for(~amirlb@CBL217-132-73-96.bb.netvision.net.il)- great justice
12:21:31 * shapr laughs
12:21:52 <mwc> Oh man, looks like a great week coming up on History Network
12:21:58 <mwc> 2000 years of british warfare
12:22:06 * Philippa looks at mwc's piece... that supposed to be impressive, dear? ;-)
12:22:12 <shapr> Speaking of great piece, this is a good opportunity for me to hit up some folks for TMR articles and then go offline and code on FLM.
12:22:19 <mwc> dissections of combat units, engagements
12:22:34 <shapr> Philippa: y0, think you'll time for another impure thoughts article?
12:22:35 <mwc> @dict TMR
12:22:36 <lambdabot> Supported dictionary-lookup commands:
12:22:36 <lambdabot>  @all-dicts @devils @easton @elements @foldoc @gazetteer @hitchcock @j
12:22:36 <lambdabot> argon @lojban @prelude @vera @web1913 @wn @world02
12:22:36 <lambdabot> Use "@dict-help [cmd...]" for more.
12:22:38 * xerox looks forward FLM
12:22:50 <xerox> mwc, it is The Monad.Reader!
12:22:57 <mwc> Ah
12:23:00 <Philippa> shapr: dunno how things'll go. Have had a v.specific idea regarding the types one though
12:23:02 <xerox> http://www.haskell.org/tmrwiki/ I suppose
12:23:10 <lightstep> @google The Monad.Reader
12:23:11 <lambdabot> http://www.haskell.org/hawiki/TheMonadReader_2fIssueOne
12:23:13 <shapr> musasabi: Think you'll have time for a tmr3 article?
12:23:21 <mwc> I've been meaning to print off a copy of the first issue to leave in the John
12:23:39 <shapr> Philippa: Cool, I hope you do have time.
12:26:45 <shapr> dcoutts: Did I already ask you about a tmr3 article?
12:26:53 <shapr> I should really record the likelihood on the TMR pages.
12:29:57 <othernoob> http://pastebin.com/280983  << why doesn't this work ?
12:32:30 <monochrom> msort (m:ms) = merge [m] (msort ms)   -- try that
12:32:46 <monochrom> you have confused "a number" with "a list of numbers"
12:33:01 <lightstep> it's more like insertion sort than merge sort
12:33:33 <monochrom> I don't care how slow or fast or dumb it is.  I focus on the question: why doesn't this work ?
12:34:10 <mwc> woah... I've done it. I've bought hot dogs in the same quantity as hot dog buns.
12:34:14 <lightstep> agreed
12:34:24 <othernoob> lightstep, why is it more like insertion sort?
12:34:42 <shapr> mwc: Lemme guess, there's mold on the hot dog buns? The hot dogs are expired?
12:34:58 <mwc> shapr: nope... half dozen each.
12:35:05 <shapr> Shocking.
12:35:08 <monochrom> because of msort (m:ms) = merge [m] (msort ms)
12:35:11 <dcoutts> shapr, you did, I said I could probably do it
12:35:16 <lightstep> is haskell were strict, it'd be insertion sort (since you insert elements one by one). considering lazyness, i have to think more
12:35:25 <shapr> dcoutts: excellent, I'll put that info into the page.
12:35:28 <mwc> speaking of searches, does anybody know of N^3 search aglos?
12:35:37 <mwc> er, sort algos, n^3 sort algo
12:36:01 <monochrom> with laziness, in the worst case it is still slow.  imagine the input list is decreasing.
12:36:14 <othernoob> mmh ..i thought the upper part (the merge part) only differs between both sort algos ?
12:36:30 <monochrom> then you thought wrong.
12:36:42 <mwc> Ah, ehre we go: http://en.wikipedia.org/wiki/Stupid_sort
12:36:59 <lightstep> mwc, sort list = let {len = length list} in unsafePerformIO (sleep (len*len*len)) `seq` msort list
12:37:16 <mwc> lightstep: heh
12:37:26 <shapr> skew: Hey, think your type system intro will be ready by the first?
12:37:49 <shapr> jlouis: What about that all pairs shortest path article? Still interested?
12:38:35 <shapr> esap: Hey, have you seen AlistairBayley's partial article on TmrWiki?
12:39:04 <lightstep> othernoob, that deends on the presentation of the algorithms. the crucial point is that for merge sort you have to split the input to halves, and on this example there isn't any splitting
12:39:55 <monochrom> It has splitting.  It splits abcdefghijklmonpqrstuvwxyz into a, bcdefghijklmonpqrstuvwxyz
12:40:02 <shapr> Lunar^: Want to write about hOp?
12:40:14 <othernoob> okay..
12:40:28 <monochrom> the worst possible spliting.
12:40:36 <shapr> kolmodin: Want to write about Haste?
12:41:01 <shapr> tromp: Want to write about your experiences with Connect Four (and especially laziness) for tmr3?
12:41:30 <Lunar^> shapr: I'm stuck in writing driver code :(
12:41:32 <shapr> Anyone want to volunteer for a TMR article?
12:41:35 <Lunar^> shapr: not for hOp, even!
12:41:41 <shapr> quel dommage!
12:41:55 <lightstep> monochrom, that was the "to halves" part
12:41:58 <Lunar^> shapr: I want to have WiFi when I use my PowerBook on Linux
12:42:10 <shapr> I can understand that.
12:42:14 <Lunar^> shapr: so I'm porting if_ral driver to Linux
12:42:23 <shapr> I've been thinking about buying a powerbook to run Debian.
12:42:40 <Lunar^> shapr: anyway, it's the first time I mess with conventional driver code
12:42:51 <shapr> Is it more fun than writing hOp drivers?
12:42:53 <Lunar^> shapr: it's still interesting for hOp :)
12:42:55 <monochrom> I was contending "there isn't any splitting".
12:42:56 <Lunar^> shapr: damn no!
12:43:03 * shapr grins
12:43:18 <Lunar^> shapr: no segfault with hOp
12:43:36 <monochrom> if one writes "msort ms = merge [] (msort ms)" that will be truly no splitting.
12:44:03 <jlouis> shapr: I can maybe dig it up and put something together for the next TMR
12:44:17 <shapr> jlouis: spiffy!
12:44:25 <jlouis> There is a little work to be done, but I have the skeleton
12:44:41 <Lunar^> shapr: I'm getting tired to reboot, and I really have other things to do
12:44:53 <Lunar^> shapr: I wonder why I always get sucked by this kind of things
12:45:13 <Lunar^> shapr: Why don't you ask Halgreen et al. ?
12:45:40 <Lunar^> shapr: They don't talk much about what they're doing with House, so I'll be the first interested
12:46:16 <shapr> That's a good idea.
12:46:21 <Lunar^> shapr: oh, and btw, I was thinking that TMR issue 2 could be PDFed when issuing TMR 3
12:46:43 <shapr> Maybe, it depends on whether someone writes a wiki -> latex converter or something similar.
12:46:53 <Lunar^> shapr: That will mean both interactive peer review and printed copies
12:47:09 <shapr> My priority is to make the information in research papers available to motivated professional programmers.
12:48:05 <sylvan> Write it in latex, use pdflatex and pdf2html, problem solved!
12:48:10 <shapr> I do think a lot of people want pdf and/or ps format for TMR, but it's not so important for me.
12:48:18 <shapr> sylvan: Tried that already.
12:48:38 <Lunar^> shapr: I get your point
12:49:05 <shapr> A better approach might be some way to dump a full LaTeX document directly into a wiki.
12:49:20 <shapr> Hm, I guess imagemagick could handle that...
12:50:12 <shapr> sylvan: Collaboration and peer review are harder with LaTeX and email/darcs than with a wiki.
12:50:17 <shapr> Looks better though.
12:51:09 <shapr> Also, seeing the progress of all the other authors in the RecentChanges of a wiki is motivational.
12:51:35 <shapr> sylvan: Do you have any ideas for improving the process?
12:51:37 <lightstep> what's the difference between hOp and House?
12:52:25 <shapr> House is hOp plus memory protection, graphics, and some other goodies.
12:52:39 <shapr> Including a TCP/IP stack even.
12:53:03 <shapr> I've been reading the TCP/IP stack recently in hopes of finding a good lead on building a BNF-style protocol definition language.
12:53:23 <lightstep> so what is hOp? a bate-metal port of the rts?
12:54:12 <Lunar^> lightstep: yep
12:55:57 <othernoob> lightstep, is this better ? http://pastebin.com/280990 ?
12:56:29 <sylvan> shapr: not really... I do think that the benifits of having it in latex should outweigh the benifits of wiki..
12:57:58 <lightstep> othernoob, i'm not sure it's even typeable: i didn't try. but i think `drop' is applied too many times here
12:58:01 <mflux> shapr, I think there are some protocol description languages or atleast tools around, although I can't recall any names
12:58:31 <othernoob> yea i get that error, but i was just wondering if im heading in the right direction
12:58:36 <lightstep> othernoob, also, there is a function named `split' or something that splits a list - takes and drops at the same time
12:58:56 <lightstep> othernoob, but it's even better to split it yourself, in a single pass
12:59:54 <lightstep> othernoob, but it might still be slower than your first version, since linked lists aren't a good data structure for splitting. quicksort is much nicer on lists
13:00:46 <othernoob> i have to do merge for school :/
13:01:14 <lightstep> in haskell?
13:01:19 <othernoob> yep
13:02:19 <lightstep> which school is it?
13:02:40 <othernoob> highschool
13:04:35 <Oejet> othernoob: Cool!
13:05:20 <lightstep> i wish my school had such cool teachers
13:11:46 <othernoob> well i'm not really getting it yet..so i dont find it that cool ;)
13:12:46 <lightstep> it's incomparable to learning c in computers class
13:12:59 <lightstep> (which i didn't)
13:13:41 <dcoutts> FrederikEaton, I see you're having fun with Xlib, of course you could use Gtk+ bindings instead :-) http://haskell.org/gtk2hs/
13:13:49 <othernoob> i know, my teacher said, "forget everything you ever learned in imperative programming languages"..which i did..
13:14:59 <lightstep> are you using helium? hugs? ghc? jhc? nhc?
13:15:07 <lightstep> ehc? etc.
13:15:21 <othernoob> me? ghc
13:15:52 <lightstep> but your teacher must have explained some real type error messages
13:16:13 <othernoob> not really
13:16:50 <lightstep> @ghc
13:16:51 <lambdabot>  Too many parameters for class
13:16:56 <lightstep> what can you make of it?
13:17:59 <othernoob> what do you mean lightstep ?
13:18:01 <lightstep> it even selected an easy one
13:18:22 <shapr> sylvan: What benefits?
13:18:47 <lightstep> othernoob, @ghc makes lambdabot randomize a ghc error message
13:19:43 <shapr> othernoob: My high school had a desk computer (the *entire* desk) with an eight inch floppy drive.
13:20:16 <shapr> Lucky for me they purchased four Apple ][e computers the year before I took computer class.
13:20:59 <othernoob> ah i see. well , i cant make anything of it, because we weren't taught much yet. we were just told that there are lists, with heads and tails and that recursion is an often used technique and that there arent real variables..
13:21:30 <shapr> othernoob: So I'm slightly jealous that you get taught Haskell in highschool :-)
13:22:33 <othernoob> :)
13:22:37 <shapr> Hiya Rob.
13:22:41 <robkinyon> i have a question re: ghc
13:22:49 <NYRanger> Hey guys since i'm trying to learn haskell, what are some other quickie programs / functions I should try to write?
13:22:51 <sylvan> shapr: a wide variety of publishing options
13:23:07 <robkinyon> is this the place to ask?
13:23:14 <shapr> robkinyon: Yes.
13:23:27 <robkinyon> i'm on cygwin and have a few calls to doesFileExist
13:23:34 <shapr> robkinyon: btw, nice to meet you in realtime. I've read your posts to the extremeperl list.
13:23:43 <robkinyon> (I'm not a haskeller - just trying to patch Pugs)
13:23:50 <robkinyon> nice to meet you, too, shapr
13:24:09 <NYRanger> two experts coming together :-)
13:24:31 <robkinyon> i'm trying to pipeline those calls through an external call to cygpath in order to fix the pathnames
13:24:38 <sylvan> NYRanger: How about a text-statistics tool.. Read a file, do your own binary tree containing frequencies for each word, and then print the results...
13:24:50 <shapr> sylvan: I don't think that outweighs the benefit of collaboration and easy shared editing on a wiki.
13:25:06 <MachinShin> sylvan: heuristics, basically? :)
13:25:16 <robkinyon> any ideas?
13:25:47 <shapr> cygpath is a binary that translates paths?
13:25:48 <sylvan> Hmm... Well I guess I think TMR should be more of a "let each user submit his article then publish it at once".. So even a darcs repo is more than enough...
13:25:56 <robkinyon> yes, shapr
13:26:05 <sylvan> "it at once" "them at the same time"
13:26:11 <sylvan> bah, replace the first with the second
13:26:25 <robkinyon> in perl, i would do something like "my $x = SomePath(); $x = `cygpath $x` if $^O eq 'cygwin';"
13:26:47 <shapr> Yeah, I see what you mean.
13:26:51 <robkinyon> I have the check for the OS done - i don't know how to make the system call, though
13:27:29 <shapr> How does cygpath interact with doesFileExist? Does it replace doesFileExist totally?
13:27:33 <lightstep> NYRanger, what level are you?
13:27:42 <NYRanger> lightstep: very beginner i'd say
13:27:53 <NYRanger> like i've done basic assignments of learning basic data types
13:27:55 <robkinyon> I need to run the value I'll be passing to doesFileExist through cygpath before handing it to dFE
13:28:33 <lightstep> NYRanger, can you print things yet? symbolically differentiate?
13:28:35 <Gahhh> you need to open a pipe to cygpath then ?
13:28:56 <robkinyon> something like that, Gahhh.
13:30:14 <Gahhh> robkinyon: GHC seems to have System.Process.runInteractiveCommand  that seems to act like popen(). I never used it myself, tho
13:30:37 <robkinyon> that's a place to look. Thanks, Gahhh!
13:30:50 <NYRanger> lightstep: I can print stuff like :t 10
13:30:56 <NYRanger> or stuff like that.
13:31:12 <TFK> lightstep, what does "symbolically differentiate" mean?
13:32:34 <lightstep> TFK, finding the derivative (נגזרת) of functions handling only their form, without computing their values at points
13:33:01 <NYRanger> lightstep: Nope i'm lost
13:33:08 <NYRanger> i'd say I know a day's worth of Haskell
13:33:18 <TFK> lightstep, eeek. Can you really do that for generic functions?
13:33:33 <lightstep> @wiki HaskellDemo <- did you try this yet?
13:33:33 <lambdabot> http://www.haskell.org/hawiki/HaskellDemo <- did you try this yet?
13:33:55 <lightstep> TFK, yes. you can't integrate all of them, though
13:34:31 <TFK> lightstep, wow! I guess I have to read up on it, then.
13:35:01 <robkinyon> you can integrate some of them if you invert them (assuming my calculus is applicable)
13:35:13 <NYRanger> well why am i getting an error with this: getelement n xs = getelement n xs 0 <newline> getelement n i (h:t) =if n==i then h else getelement (n) (i+1) (t)
13:35:38 <NYRanger> Equations give different arities for "getelement"
13:35:49 <TFK> (Just to be sure, we're talking about programatic differntiation, right?)
13:35:58 <robkinyon> thanks for all the help!
13:36:01 <shapr> robkinyon: Btw, I still disagree with Rob Nagler. :-)
13:36:09 <lightstep> TFK, it's not really that hard. every computer can figure out that the derivative of exp(sin x) is cos x * exp(sin x). the "symbolic" part is about not calculating f(x+dx)-f(x) / dx
13:36:34 <shapr> But I did enjoy that discussion for the most part.
13:36:55 <robkinyon> as did i
13:36:59 * robkinyon waves
13:37:02 <lightstep> NYRanger, functions in haskell have only one type, so if getelement takes two parameters, it can't also take three
13:37:02 * shapr waves
13:37:15 * TFK wonders about differentiating String -> String functions...
13:38:37 <lightstep> TFK, http://sandbox.mc.edu/~bennet/cs404/doc/diff.html is in lisp
13:38:51 <lightstep> scheme, actually
13:39:11 <NYRanger> lightstep: I thought it was possible.  Umm i think i have Prolog and Haskell messed up?
13:39:28 <lightstep> perhaps
13:39:32 <shapr> You can do polyvariadic args in Haskell. Oleg wrote about it.
13:39:36 <TFK> Guess I'll have to learn Scheme :-/
13:39:54 <NYRanger> lightstep: how else can i write a nice function in Haskell that would return the N element of the list?
13:40:01 <lightstep> NYRanger, the custom is to postfix some of the helper functions with '
13:40:17 <Cale> NYRanger: do you perhaps mean "getelement n xs = getelement' n xs 0" ?
13:40:43 <fraxtal> hey cale
13:40:43 <Cale> NYRanger: xs !! n gets the nth element of xs
13:40:47 <Cale> fraxtal: hello
13:40:52 <fraxtal> How's it goin?
13:40:55 <Cale> okay
13:41:10 <NYRanger> Cale: I mean if the user calls getelement 5 [1,4,2,10,15] it would call getelement 5 [1,4,2,10,15] 0.  THen the other function would check if 5 == 0, return the head.  otherwise call getelement 5 [4,2,10,15] 1
13:41:10 <fraxtal> good good
13:41:56 <Cale> NYRanger: It can't be the same function that does this though
13:42:02 <NYRanger> ah
13:42:35 <Cale> you can make it a different function which is in the where clause of getelement
13:43:50 <NYRanger> or i could be retarded and write getlement n xs = xs !! n
13:44:12 <shapr> CosmicRay: hey
13:44:33 <lightstep> it's good to try to reproduce some of the prelude yourself
13:48:48 <NYRanger> yay i reproduced the abs function lol.  what an accomplishment
13:48:51 <xerox> Being a little OT, how are water-purificator spread in this channel's people's homes?
13:49:08 <shapr> We don't have any, they seem to be un-needed in Sweden.
13:49:17 <xerox> Lucky :-)
13:49:20 <shapr> I have needed them in California and Seattle.
13:49:31 <shapr> But in the thirteen or so other US States, I did not need them.
13:49:44 <lightstep> we have two here, although the well is in the neighbourhood and is pure enough
13:49:46 <xerox> We just installed one.  The water flowing out is really "light"..
13:50:21 <MachinShin> xerox: i'm in georgia, it's not bad, but i use a small purifier on watter anyway. can't hurt
13:50:24 <MachinShin> what do you mean by 'light' ?
13:50:30 <shapr> Water purifiers are very nice if your local groundwater has too much iron, sulfur, or too many minerals.
13:50:34 <Gahhh> transparent I suppose
13:50:49 <xerox> I mean, you could drink a ton without stopping
13:51:03 <MachinShin> better safe than sorry i think wrt purifiers. they're cheap and easy to setup, and they don't hurt,a nd you can never been too sure about how good or bad the water is.
13:51:03 <shapr> I'm afraid to ask what it was like before.
13:51:07 <Gahhh> cold, down, easy
13:51:17 <shapr> Gahhh: Where's that from?
13:51:22 <xerox> Yep, there water here has much..
13:51:25 <MachinShin> xerox: so.. it's good>
13:51:25 <Gahhh> Coors commercials on TV
13:51:26 <xerox> ..calcium?
13:51:29 <MachinShin> ?
13:51:55 <shapr> smott: w00, ipv6!
13:52:00 <xerox> That think breaking washers
13:52:06 <xerox> *thing
13:52:10 <smott> yay ._. hopefully with full reverse dns soon
13:52:26 <shapr> xerox: limestone?
13:52:30 <shapr> "hard water" ?
13:52:34 <xerox> Hard water.
13:52:53 <shapr> smott: very cool
14:03:42 <othernoob> lightstep: http://pastebin.com/281017  << is this okay ?
14:06:51 <lightstep> did you try it?
14:06:55 <othernoob> yea
14:07:09 <lightstep> (loading...)
14:08:06 <lightstep> are you aware of splitAt?
14:08:38 <NYRanger> Haskell is hard ;-(
14:09:19 <othernoob> you mentioned something like that earlier. but i'm not too sure if we are allowed to use it, because we haven't actually been taught much yet.
14:09:25 <othernoob> would it be faster ?
14:09:39 <lightstep> not much
14:10:09 * lightstep would have loved for lower delay in the internet
14:10:29 <othernoob> lower delay ?
14:10:50 <lightstep> i wait 10 seconds, and then i get 80kbps
14:11:05 <NYRanger> does does it mean that the function add x y = x + y is curried?  I am having trouble understanding the idea of currying
14:11:32 <lightstep> othernoob, that's considered a standard function: http://haskell.org/onlinereport/standard-prelude.html#$vsplitAt
14:11:49 <othernoob> mmh, i seem to get full speed right away
14:12:13 <lightstep> NYRanger, yes, it is
14:13:30 <NYRanger> lightstep: I believe that it is.  I just dont understand the difference between a curried function and a regular function
14:13:44 <othernoob> how fast is this algorithm now? n² ?
14:14:20 <lightstep> the arithmetic operations in haskell are complicated. let's look at another function, say getelement
14:15:06 <NYRanger> lightstep: ok
14:15:47 <lightstep> the type is getelement :: Int -> [a] -> a
14:15:53 <lightstep> (sorry, was afk)
14:16:42 <lightstep> that means, a function that gets an Int and a list (all the elements of a list must be of the same type), and returns something that can be an element in that list
14:17:06 <NYRanger> Int -> [a] is the Int and a list
14:17:16 <NYRanger> and the final -> is the return type which is the element in that list.
14:17:29 <lightstep> it's actually the opposite
14:17:44 <lightstep> Int -> [a] -> a   is actually   Int -> ([a] -> a)
14:18:08 <lightstep> getelement takes an Int, and returns a function
14:18:45 <goron> A function of (x->(y->z)) becomes a function when given one parameter (y->z) and so on.
14:19:02 <lightstep> for example, getelement 4 is a function of type [a] -> a that returns the fourth element of every list you apply it to
14:19:30 <NYRanger> ok
14:19:49 <Muad_Dibber> isnt currieing nice? :)
14:19:54 <goron> Muad_Dibber: hi
14:19:58 <NYRanger> Muad_Dibber: confusing
14:20:13 <goron> Muad_Dibber: yes, too bad Stratego doesn't have it.
14:20:25 <lightstep> Muad_Dibber, actually, it's very much ad-hoc and lends itself to magic like swing
14:20:36 <Muad_Dibber> NYRanger : thats just in the beginning
14:20:53 <Muad_Dibber> goron : i'm not sure about the eventuel usefullness of it
14:21:11 <Muad_Dibber> that is, i'm not sure how you would fit it into the syntax
14:21:31 <goron> Muad_Dibber: I am sure it's usefull. But I agree on the second part :)
14:21:57 <NYRanger> lightstep: i think i understand.  Can you explain again why :t getelement was getelement :: Int -> [a] -> a.  While :t getelement 4 is getelement 4 :: [a] -> a
14:22:12 <goron> Muad_Dibber: Syntax like CURRY_HERE wouldn't help a lot
14:23:28 <goron> Muad_Dibber: Did you go to SUD?
14:23:50 <lightstep> (Int -> [a] -> )a is actually a shorthand for (forall a. (Int -> ([a] -> a)))
14:24:15 <Muad_Dibber> goron : probably you'd have to modify all syntax, so no strategy(param strs | terms ) anymore
14:24:16 <Muad_Dibber> nope]
14:24:22 <Muad_Dibber> normal college is more important :)
14:25:32 <goron> Muad_Dibber: Well, I am sure Martin can think of some evil hack to make things more abstract :)
14:25:36 <lightstep> NYRanger, so if you apply it to a number, you get something of type (forall a. ([a] -> a)). just like if even::Int->Bool then (even 5)::Bool
14:25:40 <Muad_Dibber> lol
14:25:48 <goron> Muad_Dibber: just joking ofcourse.
14:25:57 <NYRanger> i think I'm getting it
14:26:07 <NYRanger> is the learning curve usually this insane or is it harder for some people?
14:26:27 <goron> NYRanger: How long did it take you to come this far?
14:26:31 <lightstep> it was harder for me
14:26:50 <NYRanger> goron: i've taken a college class called Programming Languages - http://comsci.liu.edu/courses/151/
14:27:15 <NYRanger> but it was 3 different languages so we covered the top of the top of Haskell, Ada, and Smalltalk.
14:28:08 <shapr> Some people learn Haskell in a few days, some take years. I'd say the average is a few weeks of spare time for experienced programmers.
14:28:22 <NYRanger> Smalltalk I disliked the most.  Ada was nice. But Haskell excites me because its much different then the usual programming languages I've learned.
14:28:57 <goron> NYRanger: You have to see the *light* at some point.
14:30:08 <goron> NYRanger: It took me somewhat more than 2 weeks before I saw it. That would be 10 hours of working group and 8 hours of college.
14:30:13 <NYRanger> lightstep: have an idea I can write that would not be too difficlt?
14:30:42 <Gahhh> NYRanger: have you gone through the de facto online tutorials ?
14:30:46 <NYRanger> Gahhh: no
14:31:05 <goron> NYRanger: Hall DaumeIII's one is good.
14:32:01 <Gahhh> NYRanger: there are several. People's opinions differ as to which is the best. None of them are very long anyways.
14:32:02 <lightstep> is it haskell.org/complex ?
14:32:28 <shapr> That's sylvan
14:32:39 <NYRanger> http://www.isi.edu/~hdaume/htut/tutorial.pdf
14:32:43 <NYRanger> thats Daume III's
14:32:50 <NYRanger> short  = 198 pages? :-)
14:36:36 <Gahhh> I said "not very long" heh
14:37:14 <NYRanger> the book does seem to cover "everything"
14:37:17 <Gahhh> The gentle introduction (at haskell.org) is shorter, iirc.
14:37:30 <shapr> Jon Singer is one of the coolest people I've ever met. http://www.jonsinger.org/pictures/jossresearch/people/jon/896.takingaim.8c.jpg
14:37:57 <Gahhh> d00d
14:38:03 <Gahhh> that is some serious gear
14:38:10 <gzl> NYRanger: Hudak is good. that All About Monads tutorial is good too.
14:38:59 <lispy> anyone know what the underlying algo ghc uses for multiplying large integers?  Does it use FFT or anything like that?
14:40:14 <lispy> or at least the complexity of the algo
14:40:26 <Gahhh> lispy: I believe it uses the gnu mp library
14:40:48 <lispy> Gahhh: ah, so it's hopefully much better than the naive O(n^2) way?
14:41:05 <lispy> that would make me happy
14:41:17 <Gahhh> instant bliss
14:41:25 <lispy> trying to generate a prime with 4096 bits :)
14:41:41 <Gahhh> are you writing a cyrpto lib ?
14:41:46 <lispy> would my program run faster if i compiled it instead of running in ghci?
14:42:05 <lispy> Gahhh: no, just playing around.  I implemented a few thing last night
14:42:17 <Gahhh> lispy: You can pass optim flags when compiling.
14:42:20 <lispy> Gahhh: the assignment is just to explore pollard rho method :)
14:42:37 <lispy> and i figured i'd need big primes to do a good job :)
14:42:57 <lispy> Gahhh: thanks, i'll check the ghc docs
14:43:00 <Gahhh> np
14:43:20 <lispy> hmm...for one thing i should upgrade to 6.4
14:46:36 <lispy> looks like -O2 is probably right for me
14:50:09 <Gahhh> lispy: the gnu mp part is probably optimized C library anyways. It may not make that much of a difference.
14:52:26 <lispy> true
15:03:14 * CosmicRay returns
15:03:18 <lispy> so i can use getArgs to get the command line arguments, but how do i read an integer from them?
15:03:38 <lispy> Numeric.readInt is probably what i want, but i'm not sure how to use it-
15:04:26 <lightstep> you can use read or readIO from the standard prelude
15:04:31 <lightstep> @type (read, readIO)
15:04:37 <lambdabot> (read, readIO) :: forall a a1.
15:04:37 <lambdabot>       (Read a, Read a1) =>
15:04:37 <lambdabot>       (String -> a, String -> IO a1)
15:07:32 <wagle> wikipedia: http://www.ucomics.com/foxtrot/2005/05/07/
15:08:06 <wagle> @type [read, readIO]
15:08:07 <lambdabot> [read, readIO] :: forall a.
15:08:07 <lambdabot>       (Read (IO a), Read a) =>
15:08:07 <lambdabot>       [String -> IO a]
15:09:37 <lightstep> it wouldn't have happened with HLists
15:13:06 <FrederikEaton> hi Jaap
15:17:57 <FrederikEaton> dcouts: i was worried gtk+ wouldn't let me do everything i wanted to do
15:18:49 <FrederikEaton> besides i wanted to learn X
15:24:32 * CosmicRay returns again
15:30:28 <CosmicRay>   PID USER      PR  NI  VIRT  RES  SHR S PU %MEM    TIME+  COMMAND
15:30:34 <CosmicRay>  3508 jgoerzen  39  19 36204 9704 4836 R 99.2  0.9   5762:50 darcs
15:31:09 <lispy> ouch
15:31:13 <lispy> i hate that
15:31:37 <lispy> David is working on it tho :)
15:32:39 <lispy> CosmicRay: what sort of operation were you using?
15:32:47 <lispy> CosmicRay: and how big are the patches?
15:33:13 <CosmicRay> lispy: it was a merge between two unrelated trees
15:33:37 <CosmicRay> both of which happened to create and maintain certain files of the same name throughout different points in their history
15:33:45 <CosmicRay> although there are no common files in the most recent revs
15:33:48 <CosmicRay> patches are small
15:33:58 <CosmicRay> it's a known bug, like you say
15:34:00 <lispy> so, perhaps it is testing all the patches for conflicts?
15:34:39 <Heffalump> did you use darcs add --date-trick ?
15:34:53 <lispy> yeah, i believe strongly that the next major release of darcs will be very nice
15:35:13 <lispy> i like it already, but it's not perfect :)
15:35:15 <Heffalump> I haven't tried darcs add --date-trick yet but I have a feeling it would avoid conflicts in the above scenario.
15:38:06 <lispy> there are 3 things i'm waiting for with darcs, 1) better run time on the algorithms, 2) efficient handling of large patches and binary files, 3) hooks for scripts
15:39:47 <CosmicRay> but since I'm using darcs pull, how would a darcs add command help?
15:40:11 <Heffalump> I meant in the original repos.
15:42:03 <CosmicRay> well, it's a little late for that now, unfortunatel
15:43:07 <NYRanger> can max be used like "max 5 15
15:43:08 <NYRanger> "
15:43:15 <NYRanger> i mean 5 max 15
15:43:26 <CosmicRay> if you put max in backticks
15:44:07 <CosmicRay> 5 `max` 15
15:44:35 <NYRanger> nice.
15:45:29 <skew> Going the other way, use can use operators prefix if you stick () around them, like (+) 1 2
15:46:59 <NYRanger> well how can i use it together with foldr ?
15:47:16 <NYRanger> i'm trying to say maxValue xs = foldr `max` xs
15:47:39 <skew> oh, then you should just write foldr max
15:47:49 <skew> I think you are leaving out the starting value
15:47:56 <NYRanger> skew: yeah your write.
15:48:00 <skew> you probably want foldr1 max xs
15:48:08 <NYRanger> dammit i've tryed everything but that
15:48:17 <skew> as long as you don't mind an error on an empty list
15:48:38 <NYRanger> skew: this is just a tutorial i'm following
15:48:39 <skew> the other option is to give foldr its base value, like foldr max 0 xs
15:48:50 <skew> oh, which one?
15:49:00 <NYRanger> http://www.isi.edu/~hdaume/htut/tutorial.pdf
15:50:59 <skew> okay, what section are you on?
15:51:34 <NYRanger> 3.3
15:51:42 <NYRanger> Excercise 3.5
15:51:47 <NYRanger> actually i did that, i'm now on 3.6
15:52:51 <skew> why were you trying to use max infix?
15:53:36 <NYRanger> skew: I dont know :-)
15:53:41 <skew> because + and * and the rest were infix?
15:53:56 <NYRanger> skew: thats one reason I guess yeah
15:54:08 <skew> I think (`max`) works
15:54:09 <NYRanger> my understanding of how foldr was not correct
15:54:17 <NYRanger> just (max) works
15:54:26 <skew> I guess not
15:54:42 <skew> yeah, the parentheses in (max) are just grouping
15:58:07 <lispy> ah, 18:36 was the user time to find a prime with 4096 bits
15:58:37 <lispy> not too bad really
16:18:05 * SamB wonders if perhaps google might be down...
16:18:41 * SamB notices mention of it in #python-gilliam
16:18:50 <gzl> it was, briefly. it's not anymore.
16:19:59 <Heffalump> it had DNS issues
16:20:01 <Marios> im trying to write a function to check if the elements of list exist in another list help pls
16:20:36 <SamB> how briefly?
16:20:37 <dbremner> gzl - that was a recurring joke at work. One of my coworkers would spoof DNS and make it look like google had been 0wn3d.
16:20:45 <SamB> and how does everyone know about it?
16:20:58 <gzl> dbremner: no, these were global.
16:23:48 <NYRanger> anybody here practice karate?
16:28:15 <Oejet> Marios: What have you got so far?
16:28:32 <JohnMeacham> Howdy!
16:30:39 <Oejet> NYRanger: Used to practice Jiu Jitsu, close enough?
16:32:00 <NYRanger> Oejet: pretty close
16:32:09 <NYRanger> i cant find a website that has a list of the basic katas and like a guide how to do them
16:32:14 <NYRanger> i am going back to karate this monday and want to get some early practice
16:32:58 <Marios> im writing a parser, right now just want to check if a list of values i get exist in a library of some values, im tryin with map and elem cant get it to work so far
16:34:14 <Oejet> Do you want the intersection of two lists?
16:35:11 <Marios> no for example if we have [a,b] and [r,a,c,b] to return true
16:35:24 <Marios> if the elements of the first are in the 2nd
16:36:09 <Heffalump> @type (\\)
16:36:11 <Oejet> Marios: So you want to check if the first list is a subset of the second?
16:36:14 <lambdabot> bzzt
16:36:16 <Marios> yes
16:36:17 <Heffalump> @type (//)
16:36:18 <lambdabot> bzzt
16:36:22 <Heffalump> @type Data.List.(//)
16:36:23 <lambdabot> bzzt
16:36:28 <Heffalump> gaah
16:36:46 <Heffalump> @type Data.List.(\\)
16:36:47 <lambdabot> bzzt
16:36:52 <Heffalump> @type List.(\\)
16:36:53 <lambdabot> bzzt
16:36:59 <Heffalump> @type (List.\\)
16:37:00 <lambdabot> (List.\\) :: forall a. (Eq a) => [a] -> [a] -> [a]
16:37:04 <Oejet> How about A intersect B == A ?
16:37:06 <Heffalump> ahem.
16:37:21 <Heffalump> oh yes, that too. I was thinking of A \\ B == []
16:40:52 <Oejet> Marios: You should be able to use Heffalumps suggestion.  Do you get the idea?
16:41:21 <Marios> hmm i wanted to return a bool but yeah i think that will work also thank you ill have a go
16:42:08 <Oejet> (A \\ B) == []  has type Bool.
16:44:13 <NYRanger> yay the kata i'm downloading will be done in a min
16:44:15 <Marios> oh ok thanx
16:45:15 <Oejet> @plugs ['a','b'] \\ ['r','a','c','b']
16:45:20 <lambdabot> ""
16:45:32 <Oejet> @plugs ['a','b'] \\ ['r','a','c','b'] == []
16:45:33 <lambdabot> True
16:46:42 <Oejet> Good night.
17:42:48 <JohnMeacham> Hmm.. We need history channel to do a 'Modern Marvels' on Haskell.
17:44:56 <dons> :)
17:49:35 <dons> @seen Phillipa
17:49:36 <lambdabot> I haven't seen Phillipa.
17:49:49 <dons> @seen TheHunter
17:49:50 <lambdabot> I saw TheHunter leaving #haskell 3 minutes and 19 seconds ago.
17:49:56 <dons> ok, so it works.
17:50:04 <dons> @uptime
17:50:05 <lambdabot> uptime: 1 day, 13 hours, 53 minutes and 37 seconds
17:50:19 <dons> @seen Phillipa_
17:50:20 <lambdabot> I haven't seen Phillipa_.
17:50:30 <Gahhh> @seen elvis
17:50:30 <lambdabot> I haven't seen elvis.
17:50:58 <dons> @seen any_good_Java_programs
17:50:59 <lambdabot> I haven't seen any_good_Java_programs.
17:52:09 <Baughn> @seen any_good_Haskell_programs
17:52:10 <lambdabot> I haven't seen any_good_Haskell_programs.
17:52:15 <Baughn> Sorry, couldn't resist. ;)
17:53:34 <dons> @vixen what do you think of Haskell hackers?
17:53:36 <lambdabot> church is my favourite computer scientist.
17:54:02 <dons> lambdabot is a good Haskell program.
17:54:34 <Gahhh> it would have been confusing in java. lambda what ? bot implements lambda ?
17:56:51 <dons> it's had commits from at least 20 people
17:57:05 <Gahhh> @vixen have you been around ?
17:57:06 <lambdabot> are you coming on to me?
17:58:28 <dons> @ghc
17:58:29 <lambdabot>  Offending Program
17:58:34 <dons> oh man.
17:58:37 <Gahhh> lol
17:58:50 <dons> karma++ for that message
17:59:24 <Gahhh> good thing jaffacake is not here
17:59:57 <dons> hehe.
18:36:06 <lispy> how do i force a computation?  I have a function that i'm trying to time the execution of...
18:36:37 <skew> is it already string?
18:36:43 <skew> strict
18:37:05 <lispy> well, the return value of the function is a tuple (Int, Float)
18:37:22 <lispy> i was hopping to avoid adding the time to print the number to my timings
18:37:32 <Cale> perhaps Control.Exception.evaluate is what you want
18:37:51 <lispy> @type Control.Exception.evaluate
18:37:56 <lambdabot> Control.Exception.evaluate :: forall a. a -> IO a
18:38:04 <skew> it's like seq, but it forces the argument when the IO computation is executed
18:38:21 <skew> make sure you force the numbers and not just the pairs
18:38:37 <lispy> i'm not following...
18:39:13 <skew> @plugs (error "Boo!", error "Foo") `seq` 12
18:39:18 <lambdabot> 12
18:39:24 <Heffalump> does evaluate force all internal exceptions out?
18:39:33 <Heffalump> or just those that arise from evaluating to WHNF?
18:39:42 * SyntaxNinja frowns at lack of shapr
18:39:48 <skew> it's not a deep force, if that's what you are asking
18:39:57 <SyntaxNinja> anyone have knowledge of kinesis keyboards?
18:40:37 <dons> I see this:
18:40:41 <dons> -- >   evaluate undefined `seq` return ()  ==> return ()
18:40:41 <dons> -- >   catch (evaluate undefined) (\e -> return ())  ==> return ()
18:40:41 <dons> --
18:40:41 <dons> -- NOTE: @(evaluate a)@ is /not/ the same as @(a \`seq\` return a)@.
18:40:41 <dons> evaluate :: a -> IO a
18:40:43 <dons> evaluate a = IO $ \s -> case a `seq` () of () -> (# s, a #)
18:41:00 <lispy> SyntaxNinja: a tiny bit, a friend of mine uses noe
18:41:09 <dons> so it's not deep, by the looks of it.
18:41:41 <lispy> i think evaluate does what i want tho
18:42:03 <SyntaxNinja> lispy: i'm wondering how the programable ones work; whether I need software for it, since I have linux
18:42:16 <dons> it's great for making ure you get exceptions at the right time from pure code.
18:42:34 <lispy> SyntaxNinja: that i can't help you with
18:42:51 <lispy> SyntaxNinja: but my friend uses his with linux, but i don't think he has bothered to program it
18:42:59 <SyntaxNinja> lispy: Ok thanks.
18:43:08 * SyntaxNinja thinks he'll probably just get the basic one
18:43:22 <lispy> @type seq
18:43:23 <lambdabot> seq :: forall b a. a -> b -> b
18:43:31 <lispy> so what is seq for?
18:43:58 <lispy> evaluates both the first and second parameters but only returns the second?
18:44:02 <Heffalump> dons: what is? deepSeq?
18:45:06 <lispy> this pollard rho method gets to be terribly slow on primes
18:45:06 <skew> lispy: that's what it does
18:45:19 <skew> you could throw in a quick primality test
18:45:21 <Heffalump> can anyone tell me what the correct CPP test is for whether the current version of hugs uses the old Network.URI or the new one?
18:45:43 <lispy> skew: yes, i use miller-rabin strong psuedo primality :)
18:46:02 <lispy> skew: but the assignment is to study pollard rho :)
18:46:06 <skew> then why are you trying to factor a number if you know it's prime?
18:46:32 <lispy> because i'm trying to be mean and see how pollard rho behaves :)
18:47:00 <skew> I guess miller-rabin would not help very much anyway if a number only has a few factors
18:47:01 <lispy> one of the questions is, "Would you recommend Pollard rho method as a primality test."
18:48:28 <dons> Heffalump, I was just making a generic comment on evaluate.
18:49:10 <dons> oh man. I was having dreams about meeting Mr. Rabin last night after all the talk of Miller-Rabin on this channel.
18:49:22 <lispy> heh
18:49:39 <dons> for some reason he was going to my gf's university, so I had to meet him.
18:50:41 <lispy> pollard rho seems to be pretty snappy when the numbers have factors
18:50:58 <skew> how big are the numbers?
18:51:11 <lispy> the factors were 20bits each
18:51:20 <lispy> it took 2 seconds on my computer
18:51:26 <lispy> trying with 40 bits each
18:51:59 <lispy> just shy of a minute
18:52:01 <skew> you just need a nondeterminisitc computer
18:52:36 <lispy> ya know, my book on computational number theory has a section about quantum computing.
18:52:49 <lispy> haven't read it tho :)
18:54:55 <Heffalump> if I try to use a #include in a CPP'd .hs file so that I can #define a complex condition once, will I cause any chaos?
18:57:34 <dons> should be ok.
18:57:57 <Heffalump> does calling my included file defines.h make reasonable sense?
18:58:08 <dons> sure. or config.h
18:58:27 <dons> one trick is to make sure this .h file is in the .h paths ghc knows about.
18:58:44 <dons> ghc-6.4 needs this set explicitly with -I
18:59:03 <dons> -Icbits for example
18:59:09 <Heffalump> I'm building with Cabal, which seems to be running CPP before anything else happens
18:59:15 <SyntaxNinja> cabal!
18:59:22 <dons> oh, cabal might be smarter
18:59:35 <dons> is Cabal smarter SyntaxNinja, would you say?
19:00:03 <dons> Cabal: the smarter build system
19:00:10 <SyntaxNinja> dons: Just The Right Amount of Magic :)
19:00:42 <dons> hmm. maybe I should mention Cabal in my functional make proposal.
19:01:01 <SyntaxNinja> dons: what's your functional make proposal?
19:01:25 <dons> just an idea I'm toying around with for a better, more fp, make
19:01:42 <dons> I'm tired of faking functional programming in my Makefiles
19:01:47 <SyntaxNinja> dons: I was thinking about an EDSL for make in Haskell, layered on Cabal
19:01:49 <dons> hopefully I can get a thesis student to work on it.
19:01:53 <dons> yeah!
19:02:03 <SyntaxNinja> I wanted to do that actually, but who has the time
19:02:07 <dons> I was thinking of an EDSL for make. but the Cabal idea just struck me.
19:02:20 <dons> true. I don't have the time. but I can write proposals!
19:02:41 <dons> a lot of GNU make looks like Data.List these daays
19:02:55 <SyntaxNinja> dons: yep, except shitty ;)
19:03:08 <dons> also, we should be able to get concurrent, or even distributed, -jN simply
19:03:09 <SyntaxNinja> hating make is one big reason for writing cabal
19:03:17 <dons> yeah.
19:03:41 <SyntaxNinja> ironically, my cabal experience made folks at work think that I was ideally suited for redoing their build system, in make.
19:03:51 <dons> hah!
19:04:00 <SyntaxNinja> but I think that I can replace it with cabal now, not positive
19:04:44 <dons> http://www.cse.unsw.edu.au/~pls/thesis-topics/funmake.html
19:06:03 <dons> what's the canonical url for cabal?
19:06:11 <dons> @google Cabal Haskell
19:06:13 <lambdabot> http://comments.gmane.org/gmane.comp.lang.haskell.libraries/3053
19:06:51 <JohnMeacham> dons: interesting. I wrote a functional 'make' replacement in haskell called 'kay' since the letter k seemed to be the only thing in common with all other make systems. this was a long time ago though, when I first started using haskell. it was inspired mainly by plan 9's mk.
19:07:08 <dons> ah! url?
19:08:32 <dons> also, there was oleg's discussoin of how to do closures in gnu make.
19:08:34 <JohnMeacham> I never released anything. but I will look around to see if I can find the old source. it is somewhat raw, but produced pretty graphviz'ed diagrams of your dependencies.
19:09:04 <dons> cool. that might be a good starting point.
19:10:04 <dons> http://okmij.org/ftp/Computation/Computation.html#Makefile-functional
19:10:17 <SyntaxNinja> dons: http://www.haskell.org/cabal
19:11:07 <dons> oh, of course :}
19:11:07 <JohnMeacham> A main goal was source tree composability. since the file was declarative, you could just drop a self-contained project with its own kayfile in a subdirectory of another project, and the single kay instance would be able to integrate the rules from the subproject. no recursive calls needed. I also planned on integrating an autoconf like thing where each code unit would declare what things it was interested in, and they would
19:11:07 <JohnMeacham> all be collected and each test run only once... but I never got around to that...
19:11:52 <SyntaxNinja> NOT FAIR that alexj's stupid post comes first when one googles "cabal haskell" :(
19:12:01 * SyntaxNinja stomps foot
19:12:26 <dons> :} need to do some google bombing for cabal
19:15:57 <Cale> Is the cabal page linked from the haskell.org main page anywhere?
19:16:17 <SyntaxNinja> hm. not sure. probably should be
19:16:45 <dons> from the libraries page I wonder?
19:17:10 <Cale> doesn't appear to be linked from the libraries page
19:17:29 <SyntaxNinja> very lame. I'll have to fix that.
19:17:52 <SyntaxNinja> the cabal is a little too secret ;)
19:18:25 <dons> hehe
19:19:27 <JohnMeacham> Ohh.. there needs to be one of these for haskell http://www.pythonchallenge.com/pc/index.htm
19:27:25 * Heffalump adds a link to the Haskell Cabal from his homepage
19:28:28 <skew> JohnMeacham: that would get ugly fast
19:28:43 <skew> you've read "Evolution of a Haskell Programmer", right?
19:29:11 <lispy> is there an easy way to set command line parameters in ghci? so that i can call main
19:30:07 <Cale> lispy:  :set args <arg> ...
19:30:17 <lispy> ah, thanks
19:33:41 <JohnMeacham> yup.
19:34:09 <JohnMeacham> At which level do you think the word 'catamorphism' will be introduced?
19:34:34 <skew> 2 sounds good
19:40:29 <MachinShin> what's a catamorphism?
19:56:46 <shapr> I'm getting this error: "(6) (warning/warning) Error caught in `font-lock-pre-idle-hook': (error No such face haskell-default-face)" seems that Dylan Thurston has also gotten this error: http://lists.debian.org/debian-emacsen/2005/02/msg00004.html
19:56:48 <shapr> How do I fix it?
19:58:41 <Heffalump> I think I get it all the time.
20:20:50 <shapr> MachinShin: http://etymon.blogspot.com/2004/08/bananas-lenses-envelopes-and-barbed.html
20:20:54 <shapr> shammah: nice post
20:22:08 <shapr> hiya bojohan
20:22:14 <bojohan> hello :)
20:22:57 <shapr> How's code?
20:24:23 <bojohan> what code?
20:25:09 <Heffalump> @seen bringert
20:25:10 <lambdabot> I saw bringert leaving #haskell 2 days, 6 hours, 22 minutes and 6 seco
20:25:10 <lambdabot> nds ago, and I have missed 8 seconds since then.
20:25:37 <shapr> bojohan: Whatever code you're writing.
20:26:03 <bojohan> shapr: i guess you should report it as a bug
20:26:08 <Gahhh> lol @ lambdavot
20:26:10 <Gahhh> err bot
20:26:22 <Heffalump> @seen stepcut
20:26:23 <lambdabot> I saw stepcut leaving #haskell 3 days, 2 hours, 20 minutes and 35 seco
20:26:23 <lambdabot> nds ago, and I have missed 8 seconds since then.
20:26:51 <bojohan> shapr: i sent a few patches for emacs
20:33:58 <shapr> That's good code.
20:40:16 <bojohan> i should go to bed though...
20:46:18 <juhp> yay
20:46:35 * juhp gets wxhaskell working on x86_64 linux
20:46:44 <Gahhh> congrats
20:47:01 <hyp3rion> Gut Morgn
20:47:21 <juhp> or should I say ghc ffi :-)
20:47:50 <juhp> well I just "backported" a patched from ghc-6.5
20:47:57 <juhp> patch even
20:48:24 <juhp> but this means that gtk2hs may work too :-)
20:49:08 <shapr> yay
20:49:12 <shapr> y0 hyp3rion
21:03:17 <shapr> More web comics should have category theory.
21:03:53 <Cale> heh, which webcomic has category theory?
21:04:05 <Gahhh> any ?
21:05:59 <shapr> No, not really.
21:06:06 <shapr> Irregular Webcomic comes closest thouh.
21:06:59 <shapr> http://www.irregularwebcomic.net/cgi-bin/comic.pl?comic=470
21:07:28 <shapr> Maybe I should write in and ask for category theory.
21:17:59 <shapr> Hiya Trevion
21:18:03 <Trevion> Hey
21:18:04 <shapr> Looking for Haskell info?
21:18:16 <lispy> you may be able to convice darin blue of nukees to write about it
21:18:22 <Trevion> Looking for was to not write my thesis.
21:18:33 <Trevion> *ways -- I can't spell.
21:18:48 <shapr> Ah, this channel is a platinum quality distraction.
21:19:02 <shapr> You can easily waste your life in here talking about interesting things and never doing anything.
21:19:22 <shapr> Welcome to the Time Sink.
21:19:41 <shapr> (Though I'm actually trying to do something useful.)
21:19:43 * Trevion laughs
21:19:48 <Gahhh> the important question is, do you know category theory
21:19:58 <Trevion> Define "know"
21:20:19 * Gahhh evaluates to _|_
21:20:29 <shapr> Are you able to draw a commutative diagram on a McDonald's napkin without using xypic?
21:20:45 <Trevion> I am completely dependent on xypic.
21:21:27 <shapr> Is your thesis on Category Theory?
21:21:29 <Trevion> No, no.
21:22:02 <Trevion> The real answer is that I know just enough category theory to stumble through a number of the Haskell papers.
21:23:15 <shapr> What's your thesis about?
21:23:35 <shapr> That is, if you don't mind talking about traumatic future events.
21:23:39 <Trevion> Binding-time analysis of Haskell.
21:24:01 <shapr> As in >>= time?
21:24:10 <Trevion> Uh..
21:24:20 <Trevion> As in the first step of partial evaluation.
21:24:28 <shapr> Oh, neat.
21:24:51 <Trevion> Yeah.  It's only an undergraduate thesis, so it's pretty scaled back.
21:25:22 <Trevion> (and my defense will be correspondingly easier)
21:25:23 <shapr> Still, sounds like fun.
21:25:49 <Trevion> It's been fun to write.
21:26:22 <shapr> I've not yet delved into partial evaluation. I'd like to.
21:26:45 <shapr> I've heard that Duncan Coutts has some partial evaluation code for Haskell, I wonder if he's released it.
21:27:56 <shapr> Is your thesis ready for publishing?
21:28:04 * shapr like to read shiny new research papers
21:28:07 <Trevion> I don't know if we'll end up publishing it.
21:28:47 <Trevion> Ugrad theses are required to be publishable (with tweaking) to get high honors here, but that's it.  I'm thinking that we might try to publish some time soon, though.
21:29:33 <Trevion> At least from the stuff Duncan's left about the web, it seems like he's more interested in the second stage - actually producing partially evaluated programs.  So far, my work is completely focussed on determining which parts of a program can be evaluated at compile time.
21:30:36 <shapr> At least that means you're safe from the tour of #haskell
21:30:45 <Trevion> hmm?
21:31:00 <shapr> I usually give the tour to new people who want to learn about Haskell.
21:31:12 <shapr> I have the impression you already know something about Haskell.
21:31:17 * shapr grins
21:31:34 <Trevion> Ah, heh heh.  Well, my knoweldge is somewhat limited to what I've had to work with.
21:32:14 <Trevion> I still can't read, for example, almost anything Oleg sends to the mailing lists.
21:32:25 <shapr> Most people can't.
21:32:41 * Trevion is reassured.
21:32:44 <shapr> I was lucky with the most recent one.
21:33:15 <shapr> I read up on the zipper recently, so when Oleg described it as a tree of subcontinuations I was enlightened.
21:33:22 <shapr> I'm looking forward to the second part of that post.
21:34:05 <Trevion> Oh yeah, I printed the paper that he referred to in the beginning of that one and started reading it during security class.
21:34:24 <shapr> Bleeding edge GHC has SMP support and I wonder if the tree of subcontinuations can be turned into threads.
21:34:25 <Trevion> I haven't gotten very far, yet, though.  Continuations still leave me fairly confused most of the time.
21:35:47 <shapr> I understand the idea behind subcontinuations. Understand the implementation is a bit harder for me.
21:37:29 <Trevion> Oh, cool.  I'll probably have questions in the near future.
21:37:40 <Trevion> Beyond "duh, huh?" that is.
21:38:12 <shapr> If I can answer the questions, I will.
21:39:25 <shapr> Ah, the recent updates to the HTTP library have made my life easier.
21:40:13 <Trevion> What are you working on (if it's not too prying)?
21:40:51 <shapr> A distributed decentralized wiki-based darcs-backed research paper annotation tool called Fermat's Last Margin.
21:41:40 <shapr> In short, wget the pdf/ps, throw it into imagemagick, create wiki pages for the page images, and save annotations into the darcs repo.
21:42:18 <shapr> If your repo is http accessible, anyone can grab your per-page annotations, and you can grab theirs.
21:42:51 <Trevion> Cool.
21:42:53 <Trevion> (Nice name, too.)
21:43:11 <shapr> Thanks :-) It doesn't have much theoretical value, but it should make collaborative discussion of research papers a lot easier.
21:43:18 <shapr> And I won't lose research papers on my hard drive.
21:44:08 <Gahhh> I never lose them. I just hate printing them chapter by chapter.
21:44:43 <Trevion> Oh, I almost always print research papers.  That way I can lose them on my desk instead of on my hard drive.
21:44:47 <shapr> I can't afford to print everything. Also, I can't grep hardcopy.
21:45:11 <shapr> And it's hard to share physical margin notes with a bunch of people at the same time.
21:45:24 <Trevion> Definitely
21:46:00 <Gahhh> margins are not wide enough for me. sharing is secondary.
21:47:13 <Arrogant> Scintilla has a Haskell lexer now
21:47:18 <shapr> Spiffy.
21:47:23 <Arrogant> Anyone know how to make that work in SciTE? :/
21:47:33 <shapr> Have you seen Haste?
21:47:49 <shapr> I think Haste uses Scite - http://haste.dyndns.org:8080/
21:47:49 <Arrogant> No
21:47:58 <shapr> No, Scintilla, sorry.
21:48:51 <Arrogant> Hmm.
21:48:59 <Arrogant> I was hoping I could get it built in with SciTE if I could
21:49:02 <Arrogant> But I'll get Haste instead
21:49:11 <Arrogant> Although its a tad inconvenient
21:54:18 <shapr> I know nothing about SciTE, sorry.
22:04:51 <shapr> I wonder if the SocketServer from MissingH is the simplest way to get an HTTP server.
22:06:16 <shapr> Oh, I can try musasabi's httpd.hs
22:07:29 <shapr> Foo, I'll need CGI support.
22:15:36 <Trevion> Oh
22:15:50 <Trevion> Does anyone know a good set of TeX macros to typeset grammars?
22:16:21 <shapr> I think if you ask when it's afternoon or evening in central europe you'll probably get a good answer.
22:16:36 <shapr> But it's 7:17 here now.
22:16:39 <dons> Arrogant, is the Haskell lexer written in Haskell?
22:16:44 <Trevion> Ah, okay.
22:17:00 <dons> Arrogant, and what about a Haskell parser?
22:17:21 <Gahhh> dons: iirc, scintilla is in c or c++
22:17:36 <dons> oh, ok.
22:17:41 <Gahhh> somehow, I don't see them grokking the layout rules
22:18:01 <dons> isn't Scintilla a gui library?
22:18:18 <dons> or is it an editor library?
22:18:23 <Gahhh> no, it's a syntax highlighting text component I think
22:18:29 <dons> ah!
22:18:48 <dons> "A free source code editing component for Win32 and GTK+"
22:18:57 <dons> Version 1.63 improves autocompletion on Windows, can line wrap Asian languages better and adds
22:19:00 <dons> lexers for BlitzBasic, Haskell, Objective Caml, and PureBasic.
22:19:12 <dons> meh, a Haskell lexer is nothing to magic.
22:19:28 <dons> just compile ghc's Lexer.x, and write an ffi export.
22:19:36 <Gahhh> "just" that ?
22:19:50 <dons> pretty much. it's not too hard to rip out
22:19:56 <Gahhh> to scintilla guys, that's unchartered waters
22:19:58 <dons> I've done it once
22:20:00 <dons> sure.
22:20:11 <dons> good to see they are thinking about Haskell.
22:20:37 <Gahhh> I think they have an obsessive goal of supporting every language out there
22:21:18 <MachinShin> hehe
22:21:28 <dons> but the Haskell lexer isn't too much use -- as we've seen before on this channel, we really need a parser, as our lexer type is so simple -- it doesn't have enough information for great syn hl
22:22:21 <shapr> yeah
22:22:38 <dons> TyCon/Con is a problem for example. as is var/tyvar
22:22:41 <MachinShin> very true.
22:22:55 <MachinShin> thats the same w/ scheme/lisp langs i think..
22:23:11 <Arrogant> But the lexer does help with highlighting.
22:23:13 <dons> so most regex/token based syn hl just flatten these. you don't get special colouring for TyCons
22:23:16 <Arrogant> Which is what Scintilla does :P
22:24:48 <dons> sure. you can do some. but you can't distinguish type constructors from value constructors on the lexer level, for example
22:25:17 <Arrogant> Well of course not.
22:25:27 <dons> hence we need parser-based syn hl!
22:25:30 <dons> QED.
22:25:44 <dons> :)
22:25:59 <Gahhh> I was going to disagree with you just because you said QED :)
22:26:02 * Arrogant doesn't think Scintilla does that for any language though.
22:26:26 <dons> Arrogant, yeah. seems none of the major editors do either.
22:27:00 <Gahhh> satisfy your curly-highlighting needs
22:27:14 <dons> probably because most grammars are written for ease of compiler construction. whereas Haskell's is for happiness of programmers
22:27:55 <TFK> Programmer's happiness is an elusive beast.
22:27:56 * Arrogant shrugs.
22:28:03 <dons> so people get enough syn hl from a lexical analysis.
22:28:16 <Gahhh> I'd have guessed that haskell's grammar would be simpler than others, but I dont know fore sure.
22:28:24 <Arrogant> Python makes me pretty happy.
22:28:28 <dons> no. it's really nasty :/
22:28:37 <dons> (Haskell's grammar, that is)
22:28:46 <Gahhh> interesting
22:28:55 <Cale> Isn't it somewhat context sensitive?
22:28:57 <dons> nibro mentioned this in his talk at HW2004
22:29:18 <Gahhh> many grammars are context sensitive
22:29:19 <Cale> Since you have infix declarations
22:29:49 <dons> yeah, so there's a rewrite phase for one.
22:30:00 <shapr> I'm happy nibro is taking over haskell-src.
22:30:14 <dons> me too :)
22:30:51 <dons> it's a bit of an embarrasment that we haven't had a full Haskell parser available as a library :/
22:31:01 <shapr> Btw, I have a long running process notification trick I'm using, and I wonder if there's a generalization...
22:31:38 <shapr> I have "alias fin='aplay -q monkey.wav monkey.wav monkey.wav'" and "alias die='aplay -q yeep.wav yeep.wav'" and I do ghc --make Foo && fin || die
22:32:07 <dons> hehe
22:32:09 <shapr> Is there a better way to do that?
22:32:34 <shapr> For example, when I'm building WASH, it takes ages, and if it dies I want to know immediately.
22:32:46 <dons> what's wrong with your current method?
22:32:55 <Gahhh> I used to do the same stuff with mplayer or mikmod
22:33:08 <shapr> My current method isn't automatic enough.
22:33:18 <dons> hmm, /me seems to recall a ghc flag to ring the bell when GC occurs..
22:33:29 <dons> oh, shapr, why not alias ghc ..
22:33:54 <Cale> shapr: I suppose you could write a script "notify" which would take a command line as the rest of its parameters and wrap it with those sounds
22:33:54 <shapr> I can't use "fin || die" for all processes because I don't care about most processes.
22:34:07 <shapr> Yeah, good idea.
22:34:13 <dons> yep.
22:34:46 <Gahhh> you can have the script send a text message to your cellular phone too then !
22:34:53 <shapr> I wonder if there's some way to make it more automatic...
22:35:17 <shapr> Can a program tell if it's been executed 'by hand' rather than automatically?
22:35:31 <shapr> Maybe it can tell if a login shell called it directly?
22:35:39 <shapr> hiya SyntaxNinja!
22:35:44 <dons> perhaps you could set an env ar?
22:35:48 <dons> var
22:35:52 <shapr> Oh, good idea.
22:35:59 <Gahhh> @timein berlin
22:36:01 <lambdabot>  Sunday, May 8, 2005 at 7:37:01 AM CEST
22:36:10 <shapr> I usually have one 'dev shell' open anyway.
22:38:06 * dons goes for a walk
22:40:42 <SyntaxNinja> hey shapr
22:40:47 <SyntaxNinja> shapr: I'm very close to buying a kinesis keyboard
22:41:20 <SyntaxNinja> but I think that the (rather small) pain in my rt hand is more from my trackpad than keyboard. I also have some pain in my left shoulder that only happens while typing
22:41:45 <SyntaxNinja> I have a very nice ergo mouse at work, and a MS split keyboard at work, but I just use my laptop at home.
22:41:54 <Gahhh> ooh carpal tunnel syn ?
22:42:23 <SyntaxNinja> Gahhh: nothing so severe as that, but I'm starting to feel something, and I expect to be using keyboards and computers for many years to come, so I want to take better care of mysef.
22:43:04 <SyntaxNinja> shapr: do you use the programability features of your keyboard?
22:43:05 <Gahhh> SyntaxNinja: isnt it awkward to use another keyboard with a laptop ? (I am on a laptop right now)
22:43:15 <shapr> No, not at all.
22:44:00 <shapr> I got the essential because I want the shape, but I don't care about keymap or programmability.
22:44:21 <SyntaxNinja> Gahhh: nah, I do it at work with a docking station, external monitor, and everything, it's a lovely setup. should duplicate it at home, already have a docking station
22:44:23 <shapr> I regularly change my keymap anyway, hoping to find a better way.
22:44:42 <SyntaxNinja> shapr: well, some of them you can change the keymap w/ the keyboard itself, no need for the OS to do it; not sure which would be better
22:44:56 <SyntaxNinja> the cheapest model doesn't allow any programming, but I could use the OS for that I guess.
22:45:20 <SyntaxNinja> but I'm tempted to buy a really nice one, USB and with dvorak letters on the keys in case I want to switch
22:45:43 <SyntaxNinja> though the keys may not be the best place for it. I wish they sold one for the same price with _just_ dvorak on the keys. I don't need the keys labeled for qwert
22:45:44 <SyntaxNinja> y
22:46:25 <shapr> I'm not convinced that having letters on the keys helps. Since I learned to touch type, I only use the keycaps when I need to use a BIOS or other qwerty-only interface.
22:47:02 <SyntaxNinja> yeah
22:47:11 <SyntaxNinja> so you use the OS to remap the keys, right? I seem to remember that.
22:47:12 <shapr> The hardware switchable dvorak keyboards are nice, then you don't have to look at the qwerty keycaps when you're in the bios.
22:47:23 <shapr> Yup, I have my xmodmap files online.
22:47:41 <SyntaxNinja> why don't you use the keyborad to do it?
22:48:28 <shapr> I bought the cheapest contoured kinesis at the time because I wanted to buy an SMP pc. The cheapest wasn't programmable.
22:50:15 <SyntaxNinja> shapr: I see.
22:50:17 <SyntaxNinja> hmm
22:50:49 <SyntaxNinja> so I could get a non-programmable, PS/2, referbished one for $191, or a new USB dvorak, programmable one for $325. big difference
22:50:51 <shapr> It's a cool keyboard, it helped my RSI lots. The function keys still suck though.
22:50:57 <SyntaxNinja> oh really?
22:51:00 <SyntaxNinja> you mean the F* keys?
22:51:29 <shapr> Yup, they're like small bits of chewing gum, and hard to touchtype since they're all the same.
22:52:03 <SyntaxNinja> I don't use f keys much, but I do use them a bit.
22:53:43 <Gahhh> $200 for a keyboard. what does it do ???
22:54:03 <Trevion> I always have the same reaction.
22:54:32 <Trevion> (Although, during a couple of weeks when I had regular twinges in my right shoulder and arm, I almost got over the sticker shock.)
22:54:56 <shapr> My left wrist blew out for nine months. I learned to type right-hand-only dvorak on my IBM clicky.
23:01:10 <shapr> Since programming is the most fun you can have by yourself (imho), that was a scary experience.
23:01:12 <xyzp> I get transient pains in my right hand.
23:01:21 <xyzp> Well my index finger to be precise.
23:01:41 <shapr> I still have pain in my wrists and fingers.
23:01:50 <Trevion> It was a combination of numbness in my ring and pinky fingers and occasional pains in my shoulder.
23:02:12 <Trevion> But since I also fence, and was training fairly hard (for me) at the time, I wasn't sure exactly what was causing it.
23:02:29 <xyzp> I think mousing is mostly the problem.
23:02:30 <shapr> Numbness is scary too, it means your nerves are getting damage from long-term pressure.
23:03:04 <JohnMeacham> I lave my fingerworks touchstream.
23:03:07 <xyzp> Humans are made out of substandard parts of questionable foreign manufacture.
23:03:09 <shapr> I use ion3 to escape the mouse as much as possible, but still use it for stuff like The Gimp where you require it.
23:03:11 <JohnMeacham> s/lave/love
23:03:26 <shapr> xyzp: I would argue that any input system that damages users is suboptimal.
23:03:47 <xyzp> Anything is likely to wear out our mechanical parts.
23:03:58 <shapr> I'd like to try spoken input.
23:04:08 <xyzp> I played with that a bit.
23:04:23 <JohnMeacham> shapr: try reading some haskell code out loud before you decide it is a good computer interface :)
23:04:24 <shapr> I think that could be particularly advantageous with something like subvocalization.
23:04:40 <shapr> I've had that discussion a few times before.
23:04:50 <xyzp> I've been thinking about using festival for looking things up while I do more interesting mathematical things on paper.
23:05:13 <xyzp> But my previous forays into everday typing via speech was less than optimal.
23:05:47 <xyzp> speech->text lookup text->speech
23:05:50 <shapr> When my wrist blew out I was thinking about writing a very small and simple Haskell program that read from the sound device directly to differentiate between the parts of the Unlambda language.
23:06:37 <JohnMeacham> I want a pure gesture based system. An editor designned to work with the touchstream would be really cool. Perhaps a yi plugin...
23:07:15 <SyntaxNinja> Trevion, xyzp: did you guys get ergo keyboards?
23:07:24 <shapr> I've thought about gesture systems also.
23:07:25 <xyzp> No.
23:07:32 <xyzp> I just spend less time mousing.
23:07:44 <shapr> Did you see the SGI Glove API australian sign language recognizer?
23:07:46 <Trevion> I've taken to holding my keyboard in my lap, which seems to help.
23:07:54 <Trevion> But other than that, I haven't done anything... poor college student syndrome.
23:08:10 <shapr> I've learned a bit about american sign language, it has some really cool properties like 'positional pronouns'.
23:08:25 <SyntaxNinja> Trevion: yeah, even the MS ergo keyboards are like $100 USD
23:08:39 <SyntaxNinja> I've been using those for a few years at work, and they're nice.
23:08:39 <Trevion> Bingo.  And I have _so many_ ways to use $100.
23:08:42 <shapr> That is, you point to an angle away from your body and 'name it' and then when you're talking about that thing, you just point there.
23:09:04 <Trevion> John: how long did it take to get used to the TouchStream?
23:09:45 <SyntaxNinja> Trevion: well, the way I see it, I'm a professional programmer, and if I can't type, or if it Sucks Hard to type, then it's going to cost me more than $300 in th elong run.
23:10:14 <shapr> Yeah, I agree.
23:10:18 <SyntaxNinja> I'm rock climbing too, but I don't think that is why my hand hurts, honestly. since it only happens when I'm typing.
23:10:43 <Trevion> I hear rock climbing is actually really fairly good, at least for the shoulders.
23:10:44 <xyzp> Consulting a doctor wouldn't hurt.
23:11:35 <xyzp> If there's something seriously wrong a new keyboard may be insufficient alone.
23:11:49 <JohnMeacham> Trevion back when I had hand pain, I found it helpful to just carry very heavy things in my outstretched arms. I don't know why. probably hanging from a rock would do the same thing.
23:11:51 <SyntaxNinja> xyzp: well, it's only just started hurting, and it's not hurting badly.  I just want to nip it in the bud.
23:11:56 <xyzp> Ah.
23:12:03 <xyzp> I have something of a medical aversion myself.
23:12:17 <Trevion> Yeah - I've heard the same thing about rock climbing in particular.
23:12:21 <SyntaxNinja> I've been thinking of buying an ergo keyboard for a long time, so this is just a motivation to do it
23:12:34 <SyntaxNinja> Trevion: that it's good for your shoulders? or good for pain or something?
23:12:55 <JohnMeacham> Well. I highly recommend a touchstream from fingerworks. it makes programming much faster too. if you can find one. they have been scarce recently.
23:13:29 <Trevion> Basically, what John said.
23:14:31 <xyzp> I wish I had more dexterity in my left hand.
23:14:38 <SyntaxNinja> it's hard to tell if it helps the pain, since it causes my hands to be very tired
23:14:45 <JohnMeacham> I noticed it by accident when I was trying to get groceries into my house by heavily overloading my arms and noteiced I could suddenly type without pain afterwords.
23:15:19 <xyzp> Hmm.
23:15:31 <xyzp> That's sort of like typing after playing the piano.
23:15:33 <xyzp> ;)
23:15:42 <SyntaxNinja> or carrying a piano
23:15:50 <SyntaxNinja> xyzp: is your right hand more dexterous?
23:15:56 <xyzp> Yes.
23:17:20 <JohnMeacham> My friend was naturally left handed, but her parents forced her to become right handed as a kid due to the sinister nature of the left hand or something. she ended up being ambidextrous.
23:17:44 <xyzp> Ah, my grandfather had to be re-educated from left hand use.
23:17:46 <SyntaxNinja> I play the viola, but am right handed, so I'm pretty even with dexterity in typing.
23:17:59 <xyzp> I think they used a wood stove, if I recall correctly.
23:18:28 <Trevion> I'm completely imbalanced - I've always been right-handed, but my right arm is also singificantly stronger than my life.
23:18:36 <Trevion> s/life/left
23:19:00 <xyzp> Well my typing performance is probably equal in both hands.
23:19:12 <xyzp> But using my left hand for other things is most trying.
23:19:30 <xyzp> I wouldn't be able to mouse with it.
23:19:51 <xyzp> Perhaps I could acclimate.
23:20:25 <SyntaxNinja> I've been using my trackpad left handed for the last few hours because of this annoying thing in my rt hand.  I'm almost acclimated :)
23:21:50 <Trevion> I fell in love with right-handed mice a while ago... I've been known to mouse with my left hand when I'm eating, but it's horribly awkward.
23:21:54 <Trevion> The buttons are all in the wrong places.
23:22:27 <xyzp> Especially on my MX500.
23:22:28 <Gahhh> you mouse when you are eating ?
23:23:40 <xyzp> I suppose I do from time to time.
23:23:45 <shapr> I'm naturally left-handed.
23:24:07 <shapr> btw, I would strongly suggest everybody use trackballs and trackpads, and never mice.
23:24:20 <SyntaxNinja> shapr: why?
23:24:35 <shapr> Mice require you to suspend parts of your arm, which adds unnecessary stress to your joints/ligaments/etc.
23:24:49 <shapr> Trackballs allow you to rest your hand and use your fingers to move the mouse.
23:25:00 <Trevion> shapr: I don't suppose you're a gamer?
23:25:28 <shapr> On the other hand (ha), being conscious of your posture with keyboard/mouse is the biggest improvement.
23:25:38 <SyntaxNinja> shapr: yeah
23:26:02 <shapr> Simple stuff like try to stay relaxed, try to keep a good posture, but don't use the same posture for months...
23:26:13 <xyzp> Doing things that involve holding the mouse buttons down for extended periods of time is probably what has annoyed my body.
23:26:32 <shapr> Trevion: I was ...
23:27:18 <Trevion> I've tried trackballs occasionally.  I haven't had a lot of trouble with most things, but trying to play Quake (or Tribes) with a trackball has always been a complete exercise in frustration for me.
23:27:39 <shapr> imho, trackballs are far superior for tribes and quake.
23:27:48 <xyzp> Interesting.
23:28:00 <shapr> Mostly because mouse movement and button pressing are orthogonal then.
23:28:08 <xyzp> How effective is moving while clicking?
23:28:14 <Gahhh> shapr: you dont have to bind +attack to MOUSE1
23:28:20 <mflux> johnmeacham, are there any boundaries between the buttons with that touch stream-thingy?
23:29:02 <Trevion> Huh - maybe it's just my habits, then.
23:29:15 <shapr> xyzp: Just fine. I can easily hold down a button with my thumb and change my facing with my next two fingers.
23:29:40 <xyzp> How many buttons did you have?
23:29:50 <shapr> I had two buttons, but I have four now.
23:29:55 <xyzp> Ah.
23:30:20 <shapr> I was quite good at Tribes2.
23:30:36 <xyzp> I suppose I would have to try it for myself to see if it was less convenient.
23:30:46 <shapr> Flying tanks long distances was my favorite tactic.
23:31:07 <xyzp> Played Q1/Q2/Q3A/ET.
23:31:13 <xyzp> I played, rather.
23:31:15 <shapr> I loved ET.
23:31:23 <xyzp> I've given that up though for the most part.
23:31:27 <shapr> Tribes2 was the best though.
23:33:00 <Trevion> I didn't really notiec the Tribes series until recently, sadly.
23:33:01 <ski> good morning #haskell
23:33:11 <SyntaxNinja> hi ski
23:33:13 * Trevion really can't spell tonight.
23:33:42 <shapr> If you ever play Tribes2 again, slide sideways down a hill into the water at a high angle. The upwards force of being underwater can launch you completely across the map to the enemy fort.
23:34:01 <shapr> I loved using tanks as bombers.
23:34:35 <ski> hi SyntaxNinja and shapr
23:34:39 <shapr> hej ski
23:35:00 <shapr> Here's my idea of an ergonomic laptop: http://www.scannedinavian.com/2004-05-24.html
23:35:20 <xyzp> I have disdain for laptop keyboards.
23:35:37 <shapr> You might like that one :-)
23:35:43 <xyzp> They may very well be the spawn of evil.
23:36:20 <Gahhh> shapr: Here's another nice LtU-classic Atanassow unleashed thread for you: http://lambda-the-ultimate.org/classic/message11003.html
23:36:31 <shapr> I discovered a large amount of empty space inside my first kinesis keyboard when trying to repair it.
23:37:07 <shapr> Definitely enough for a micro-itx motherboard, possibly enough for a mini-itx.
23:37:07 <xyzp> Gargoyle.
23:37:14 <shapr> Yeah, exactly :-)
23:39:25 <xyzp> I wonder what sort of battery-life one could squeeze out of a VIA processor.
23:39:54 <shapr> Gahhh: This one is hysterical.
23:41:50 <shapr> I have to find some way to get some serious OOP advocates into a panel discussion with Frank.
23:41:57 <shapr> And make sure it's being filmed.
23:42:08 <shapr> Total academic schadenfreude.
23:42:42 <xyzp> While you're arranging confrontations be sure to invite TopMind.
23:42:48 <shapr> eek
23:42:53 <Gahhh> It's not about OO per se; it's about how misinformed Anders & Bruce are.
23:43:05 <shapr> TopMind is in the "hermetically sealed" category.
23:43:11 <shapr> Those people are just no fun.
23:44:13 <xyzp> Hmm.
23:44:22 <xyzp> Delegates and interfaces on expensive on the CLR.
23:44:38 <xyzp> on=are
23:44:46 <xyzp> Writing and writing is hard on me.
23:45:02 <shapr> There's a huge difference between fitting a conclusion to facts and fitting facts to a conclusion. I don't wish to talk people who do the second.
23:45:45 <Gahhh> it's creative work, tho.
23:47:36 <shapr> I described why I think monads are simpler and more powerful than OOP on the pragmatic programmer's mailing list, but I didn't get any replies. I think that means that most people didn't understand what I said, but sometime in the next five years they'll see an article on monads and say "I wonder if I can figure out what he was saying".
23:49:22 <Gahhh> shapr: you are very unlikely to get back anything meaningful.
23:49:31 <xyzp> This article hurts me.
23:49:53 <shapr> I think that's the only effective way to teach people about new stuff, mention once that you see benefits in that new thing, then the few people who get interested will come and ask for more details.
23:50:31 <shapr> But you can't teach people who don't want to know, so pushy advocacy/evangelism is about the worst thing you can do.
23:50:46 <Gahhh> shapr: I believe there is a higher level question: should you teach, or should you be an example.
23:50:57 <shapr> I think they're the same thing.
23:51:49 <xyzp> People get used to random people telling them some obscure this or that is superior to xyz and kind of tune it out after a few years.
23:51:54 <shapr> You can't teach what you don't know, you can't know what you haven't done, and in CS, you're behind the times if you're not doing the stuff from the research papers that just came out.
23:52:20 <xyzp> Half the time it's some Brandon J. Van Every that doesn't even write anything.
23:52:26 <xyzp> So they get immune to evangelism.
23:52:29 <Gahhh> xyzp: lol
23:52:33 <xyzp> Unless they like flame wars.
23:53:24 <shapr> I think you have to get immune (or poor) in a world of invasive advertising.
23:53:47 <Gahhh> shapr: I work with a group of people who don't mind (knowingly) being behind 10+ years. For them, it's a cost/benefit issue. If you can demonstrate (not teach) that their cost/benefit assessment is wrong, they'll listen to you.
23:53:59 <shapr> I think that's fair.
23:54:46 <Gahhh> I like Oleg's site in that regard
23:54:49 <shapr> Pugs has gotten a lot of people interested in Haskell because autrijus cranked it out so incredibly fast.
23:55:06 <Gahhh> yes. @karma autrijus
23:55:13 <shapr> @karma+ autrijus
23:55:14 <lambdabot> autrijus's karma has been incremented
23:55:49 <xyzp> Hmm. Perl 6's endless predevelopment probably helped.
23:56:23 <shapr> Anyway, I'm self-employed and trying to make money fast with Haskell.
23:56:28 <Gahhh> by the time it's done, the devs might switch to haskell altogether anyway
23:56:49 <xyzp> That would be amusing.
23:56:53 <shapr> I've seen signs of cognitive dissonance when some people suggested that.
23:57:10 <Gahhh> shapr: in your case, you would actually *benefit* from not many people knowing haskell, wouldnt you ?
23:57:21 <shapr> No, not at all.
23:57:25 <xyzp> <Larry Wall> You know what, this Haskell thing is just what I always wanted. Time to go home.
23:57:48 <Gahhh> xyzp: ok that's a bit extreme heh. Maybe Larry Wall and Anders+Guido
23:57:53 <shapr> In fact, I want to setup a Haskell businesses cooperative where other members can immediately step in case of Bus Error.
23:58:27 <xyzp> I doubt Haskell will obtain critical mass.
23:58:28 <shapr> autrijus mentioned that Larry Wall has started learning some Haskell.
23:58:38 <xyzp> But that's never bothered me much.
23:58:43 * Gahhh keeps haskell all to himself
23:58:46 <shapr> LtU mentioned that Guido is removing lambda, reduce, and map from Python.
23:58:59 <Gahhh> shapr: map stays afaik.
23:59:08 <Gahhh> but anyways
23:59:15 <shapr> Ah, I should check my details.
23:59:21 * SyntaxNinja is curious to see what will happen when the current generation of C hackers starts to retire
23:59:31 <xyzp> I haven't really liked Python's development for a while.
23:59:39 <shapr> Everyone will start to use Java for OS development?
23:59:51 <Gahhh> uhh. c++ will be around
