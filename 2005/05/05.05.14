00:27:24 <pediddle> @moo
00:27:25 <lambdabot>     *        (__)
00:27:25 <lambdabot>      \       (oo)
00:27:25 <lambdabot>       \-------\/
00:27:25 <lambdabot>        | ==$ ||
00:27:25 <lambdabot>        ||----||
00:27:26 <lambdabot>        ^^    ^^
00:27:28 <lambdabot> Old "One Arm" belonged
00:27:30 <lambdabot>   to Ceasar's Palace
02:21:02 <spongeB0bSquareP> damn, nick is too long :)
02:21:25 <spongeB0bQ4Pants> *yaay
02:22:19 <halcyon10> hi all
02:22:44 <spongeB0bQ4Pants> hi halcyon10
02:22:53 <spongeB0bQ4Pants> welcome to the toon channel
02:23:03 <halcyon10> ;)
02:23:37 * spongeB0bQ4Pants takes out a big wooden hammer and hits Lemmih in the head with it
02:28:12 <Lemmih> Aw.
02:31:23 <Lemmih> You want something or was it just random hammering?
02:32:50 <spongeB0bQ4Pants> just random hammering really
02:32:59 <spongeB0bQ4Pants> I wanted to hit shapr, but he's not here :)
02:33:01 <spongeB0bQ4Pants> @seen shapr
02:33:02 <lambdabot> I saw shapr leaving #haskell 5 days, 17 hours, 32 minutes and 45
02:33:02 <lambdabot> seconds ago.
02:33:07 <spongeB0bQ4Pants> and it's been a while :s
02:33:18 <spongeB0bQ4Pants> hasn't been this long since I got here I think
02:35:06 <Lemmih> You see me as the shapr when shapr is out?
02:36:25 <basti_> the logical shapr so to say?
02:36:26 <spongeB0bQ4Pants> nah, I just know you can take a joke :)
02:36:55 <Lemmih> Oki (:
02:37:02 <boegel> does anyone know why shapr is offline this long ? is he ok ?
02:37:24 * Lunar^ is worried
02:37:51 <boegel> did anyone mail him the last few days?
02:39:20 <Lemmih> He got a girl and a job. IRC may have a lower priority.
02:40:22 <boegel> shapr biggest priority is sex, then work
02:40:29 <boegel> but he's always onlin
02:40:31 <boegel> +e
02:40:37 <basti_> during sex too?
02:40:50 <xerox> Don't even wonder <g>
02:41:12 <bourbaki> moin
02:41:17 <basti_> this is a case of I DO NOT WANT TO KNOW yes?
02:41:26 <xerox> I told you to not wonder!
02:41:30 <halcyon10> hey bourbaki, been a while :)
02:41:50 <boegel> hey bourbaki
02:41:56 <bourbaki> halcyon10: heh yes i see youre still learing haskell :)
02:42:35 <boegel> bourbaki: everyone in here is :)
02:42:40 <halcyon10> yes, it's a long journey..
02:43:11 <bourbaki> halcyon10: well i think that its like chess the rules are easy but to master it you need years i guess
02:43:34 <halcyon10> yes, but i'm not even that far, i'm still learning the rules
02:44:17 <bourbaki> i am sure you will make good progress
02:44:33 <bourbaki> you just need to apply it to some problem
02:45:03 <halcyon10> yes, i'm trying to make a simple numeric program at the moment
02:45:07 <tuomov> more like go... chess has complex rules
02:45:19 <halcyon10> talking about learning, i've got a question :)
02:45:45 <halcyon10> what would be the correct definition of "type MyType a = Array (Int,Int) a" if 'a' should only be an instance of RealFloat ?
02:45:59 <basti__> mmm mondo cool
02:46:03 <basti__> -.-
02:49:56 <boegel> tuomov: no it asn't
02:49:59 <boegel> +h
02:50:02 <halcyon10> hm, when i think about it, it's not really necessary to exclude types for MyType. I'll just use what i need..
02:50:49 <tuomov> compared to go... it has
02:53:08 <boegel> tuomov: but the rules of Haskell aren't that simple for a newbie either...
02:53:38 <tuomov> hmmm..
02:53:43 <xerox> halcyon10 - for type classes constraints you could use the form (TypeClass a) => a, I think.
02:54:09 <halcyon10> xerox: ah, thanks
02:55:48 <halcyon10> hm, but does it work in type-declarations, too?
02:57:16 <halcyon10> my attempt doesn't work: "type Grid2D ((RealFloat a) => a) = Array (Int,Int) a"
02:58:49 <xerox> halcyon10, it does work with 'data'
03:00:55 <halcyon10> xeros: do you mean "data Grid2D ((RealFloat a) => a) = Array (Int,Int) a" ? i always get: "Syntax error in type expression (unexpected `=>')"
03:01:20 <TheHunter> -fglasgow-exts allows this: type Grid2D a = RealFloat a => Array (Int, Int) a.
03:01:42 <Lemmih> But that's not really what you want.
03:02:05 <Lemmih> Or is it?
03:02:17 <TheHunter> it does what you want if it's used at the right side of the type signature.
03:02:50 <TheHunter> Grid2D a -> Foo will probably give an ambigous occurrence error.
03:03:37 <Lemmih> Doesn't work for me. Did you omit a forall?
03:05:12 <halcyon10> my original idea was to restrict the type of 'a' to an instance of RealFloat. But now i think it's not so important, i'll just use Grid2D Double or Grid2D Float
03:05:19 <TheHunter> yeah, it doesn't work.
03:05:57 <TheHunter> i see no reason why it shouldn't, though.
03:06:10 <Lemmih> halcyon10: Can't you use (RealFloat a) => Grid2D a?
03:06:48 <halcyon10> Lemmih: oh, that's a good Idea! i haven't thought of this
03:08:50 <Lemmih> God morgen, Oejet.
03:13:41 <boegel> hey Oejet
03:14:37 <Oejet> Godmorgen allesammen (all).
03:17:23 <musasabi> morning
03:18:30 <Oejet> @seen shapr
03:18:32 <lambdabot> I saw shapr leaving #haskell 5 days, 18 hours, 18 minutes and 14
03:18:32 <lambdabot> seconds ago.
03:18:45 * Oejet is worried.
03:20:30 <musasabi> yes, that is a quite long time.. I hope nothing bad has happened.
03:20:49 <Oejet> How is it going, Lemmih?
03:25:03 <Lemmih> Oejet: Not bad. Just lying on the couch doing nothing while thinking of all the things I really should be hacking.
03:25:39 <Oejet> That's nice.
03:27:20 <Lemmih> Are you having a lazy day too?
03:28:21 <Oejet> No, I shouldn't.  I will read some graph theory.
03:32:34 * boegel thinks someone should mail shapr
03:49:32 <Oejet> boegel: Done.
03:58:45 * boegel leaves
03:58:46 <boegel> bye !
04:00:53 <chris2> Oejet: http://www.scannedinavian.com/2005-05-08.html says "Ok then, no more IRC until FLM 0.1 is finished."
04:02:22 <Oejet> chris2: Heh, thank you.
04:02:33 <chris2> no entry after may 11, tho :/
04:04:42 <Oejet> Maybe FLM 0.1 will never be finished. =-O
04:07:11 <glimming> what is fork in haskell?
04:07:14 <glimming> split and fork is not defined
04:07:28 <glimming> surely there is some built in function for pairing two functions into a  pair-valued function?
04:07:39 <glimming> i.e. the medating arrow for X
04:07:42 <glimming> mediating
04:07:49 <glimming> X being product
04:09:31 <integral> liftM2 (,) ?
04:09:37 <glimming> no,
04:09:41 <glimming> I just want
04:09:42 <glimming> f: A->B
04:09:50 <glimming> g:A->C
04:09:56 <glimming> split f g : A -> (B,C)
04:10:02 <glimming> I can define it I kmow
04:10:04 <glimming> know
04:10:10 <glimming> but it'd rather see it is in there already
04:10:12 <integral> hmm, isn't that part of Arrow (->)
04:10:22 <xerox> I think it's f &&& g
04:10:28 <glimming> huh?
04:10:32 <dblhelix> @type (&&&)
04:10:33 <glimming> this is very basic functional programming
04:10:39 <glimming> no need for Arrow I hope
04:10:44 <lambdabot> bzzt
04:10:47 <integral> well functions *are* arrows...
04:10:49 <xerox> :type \f g -> f (Control.Arrow.&&&) g
04:11:00 <xerox> @type \f g -> f (Control.Arrow.&&&) g
04:11:03 <lambdabot> \f g -> f (Control.Arrow.&&&) g :: forall t
04:11:03 <lambdabot>               t1
04:11:03 <lambdabot>               (a :: * -> * -> *)
04:11:03 <lambdabot>               b
04:11:03 <lambdabot>               c
04:11:04 <lambdabot>               c'.
04:11:05 <lambdabot>             (Control.Arrow.Arrow a) =>
04:11:07 <lambdabot>             ((a b c -> a b c' -> a b (c, c')) -> t -> t1) -> t ->
04:11:09 <lambdabot> t1
04:11:12 <integral> @type Control.Arrow.(&&&)
04:11:13 <xerox> Gee, sorry.
04:11:15 <lambdabot> bzzt
04:11:30 <xerox> @type (Control.Arrow.&&&)
04:11:32 <lambdabot> (Control.Arrow.&&&) :: forall (a :: * -> * -> *) c' c b.
04:11:32 <lambdabot>         (Control.Arrow.Arrow a) =>
04:11:32 <lambdabot>         a b c -> a b c' -> a b (c, c')
04:11:45 <glimming> I think I will define my own split function
04:11:48 <glimming> ;-
04:11:50 <glimming> (
04:12:05 <integral> split = (&&&) ;-)
04:12:31 <glimming> oki
04:12:33 <glimming> thanks
04:13:01 <xerox> @plugs ((+2) Control.Arrow.&&& (*3)) 1
04:13:04 <lambdabot> (3,3)
04:13:12 <glimming> Reading file "Test.hs":
04:13:12 <glimming> Dependency analysis
04:13:12 <glimming> ERROR Test.hs:26 - Undefined variable "&&&"
04:13:15 <glimming> says hugs
04:13:19 <glimming> and gives me kisses
04:13:25 <glimming> for a goodbye, waving for ghci
04:13:36 <glimming> wow another peom
04:13:36 <glimming> poem
04:13:56 <glimming> That is a good sign for professorship.
04:13:59 <glimming> in 20 years.
04:14:21 <glimming> (c.f. Joseph Goguen's poem in Journal of Cognetive Science ;-)
04:14:53 <glimming> ghci responds
04:14:56 <glimming> Test.hs:27: Variable not in scope: `writeFIle'
04:14:56 <glimming> Test.hs:27: Variable not in scope: `&&&'
04:14:56 <glimming> Test.hs:27:
04:14:56 <glimming>     precedence parsing error
04:14:59 <glimming>         cannot mix `(.)' [infixr 9] and `(&&&)' [infixl 9] in the same infix expression
04:15:02 <glimming> Test.hs:27:
04:15:05 <glimming>     precedence parsing error
04:15:07 <glimming>         cannot mix `(&&&)' [infixl 9] and `(.)' [infixr 9] in the same infix expression
04:15:11 <glimming> Failed, modules loaded: none.
04:15:13 <glimming> sorry for excessive pastign
04:17:38 <Lemmih> You've misspelled 'writeFile' and did you import Control.Arrow?
04:17:57 <glimming> negative, shame on me
04:19:29 <glimming> here is what I am doing
04:19:30 <glimming>   main = do readFile "myfile"
04:19:30 <glimming>             writeFile "myfile.out" . show (
04:19:31 <glimming>                printHTML . expandMacros .
04:19:31 <glimming>                split id gatherMacros . parseHTML
04:19:33 <glimming>                                                  
04:19:48 <glimming> I am helping a student to get his parser for HTML to work. It is supposed to add HTML macro definitions.
04:19:58 <glimming> I think I am not understanding writeFile.
04:21:40 <Oejet> Where is the content of --readFile "myfile"-- going?
04:21:56 <glimming> it is suppoed to go into the parseHTML function
04:22:10 <Oejet> @type readFile
04:22:12 <lambdabot> readFile :: FilePath -> IO String
04:23:03 <Oejet> Try 'contents <- readFile "myfile"'
04:24:32 <glimming> I don't like contents <- here but I tried it
04:24:33 <glimming>   main = do contents <- readFile "myfile"
04:24:34 <glimming>             printHTML . expandMacros . split id gatherMacros . parseHTML $ contents
04:24:37 <glimming>             writeFile "myfile.out"
04:24:54 <glimming> but this is very clearly incorrect
04:25:05 <glimming> the second row of main has wrong type, must be IO
04:25:18 <glimming> I'd prefer pointfree
04:25:25 <Oejet> Heh.
04:26:15 <Oejet> readFile "myfile" >>= \c -> printHTML . expandMacros . split id gatherMacros . parseHTML $ c >>= riteFile "myfile.out"
04:26:38 <Oejet> Nah, better
04:26:43 <glimming> I did this instead
04:26:43 <glimming>   main = readFile "myfile" >>=
04:26:43 <glimming>          writeFile "myfile.out" . printHTML . expandMacros . split id gatherMacros . parseHTML
04:26:52 <glimming> oh, that's even better
04:27:03 <Oejet> readFile "myfile" >>= printHTML . expandMacros . split id gatherMacros . parseHTML >>= riteFile "myfile.out"
04:27:12 <glimming> I don't like DO
04:27:26 <glimming> maybe because I don't understand it fully I confess
04:27:53 <glimming> why is there no SPLIT in prelude? btw.
04:27:53 <Lemmih> The translation scheme is very simple.
04:28:52 <glimming> I don't see how Oejet's def can work because (and I did not tell you) printHTML returns a String and nothing else.
04:28:54 <Lemmih> Probably because it's not commenly used.
04:29:02 <glimming> Weird
04:29:05 <glimming> very weird
04:29:13 <Oejet> Ah, prepend "return ."
04:29:33 <glimming> I have to say I like my version better! ;-))))
04:34:01 <glimming> Here is another question.
04:34:29 <Oejet> Shoot.
04:34:31 <glimming> How do I best do a input "loop" using do-notation so that I (tail-) recursively invoke main again and again in an interactive fashion until the input is ":q" or similar, like ghci/hugs main loop?
04:34:54 <Oejet> Just call "main"
04:35:10 <glimming> Yes...
04:35:14 <glimming> so how would I write it:
04:35:32 <skew> main = putStrLine "lots of output!" >> main
04:35:45 <glimming> main = do readLine <<= \x. if (x == ":q" then return () else main)
04:35:46 <glimming> or what?
04:35:57 <glimming> substitute <<= by >>=
04:36:05 <skew> that looks pretty good
04:36:55 <skew> Control.Monad has unless :: (Monad m) => Bool -> m () -> m ()
04:37:48 <skew> what is the do for in your version?
04:46:54 <glimming> do is a magic placeholder that I inserted just to create an error
04:49:15 <glimming> module Main where
04:49:15 <glimming>   main = readLn >>= \x -> if (x == ":q") then return () else main
04:49:17 <Lemmih> The 'do' keyword is actually meaningless in that line.
04:49:18 <glimming> gives me a problem
04:49:23 <glimming> (yes)
04:49:48 <glimming> Main> main
04:49:48 <glimming> :q
04:49:48 <glimming> IO Error: User error
04:49:49 <glimming> Reason: PreludeIO.readIO: no parse
04:50:12 <Lemmih> You want 'getLine'.
04:50:32 <glimming> ok
04:50:42 <Lemmih> readLn = fmap read getLine
04:51:42 <glimming> argh
04:51:46 <glimming> what's read?
04:51:49 <Lemmih> Or something like that.
04:51:57 <Lemmih> @type read
04:51:58 <lambdabot> read :: forall a. (Read a) => String -> a
04:52:06 <Lemmih> @plugs read "10" :: Int
04:52:08 <lambdabot> 10
04:52:15 <Lemmih> @plugs read "'c'" :: Char
04:52:16 <lambdabot> 'c'
04:52:29 <glimming> ok thanks
04:52:35 <Lemmih> @plugs read "\"string\"" :: String
04:52:37 <lambdabot> "string"
04:52:37 <glimming> gotta go to picknic now! later!
04:52:42 <glimming> I will be back on this soon
04:52:46 <Lemmih> Bye.
05:22:02 <derelm> i am still having problems reading from a socket. i am sending a string via network to the socket. on the haskell side i use hGetContents to receive about everything from the buffer. but my programm will hang if i try to work with the last char i received!
05:22:30 <skew> I think it's likely just waiting for more data
05:22:39 <skew> have you closed the socket?
05:22:59 <derelm> i cannot close the socket, as i want to send a reply over exactly that socket
05:23:33 <skew> do you ever what to send more data to the Haskell program?
05:23:50 <derelm> no i don't want that
05:24:15 <skew> Try making the transmitting end close the transmit side of the socket
05:24:22 <basti_> might it be that the sending program didn't send yet?
05:24:32 <basti_> things may be buffered for some time.
05:24:33 <skew> getContents gives you a list representing all the data on the socket
05:25:13 <skew> so if you try to read farther in than you have recieved data for, the program just waits for either more data to come in or the connection to close
05:25:14 <derelm> ok, i'll try to close the sendings side
05:25:44 <skew> you cloud also use another function to read data, or write your Haskell program so it doesn'
05:25:55 <skew> try to read past the end of the data
05:25:55 <derelm> btw, this also happens with hGetChat
05:26:08 <derelm> r
05:26:19 <derelm> when i receive the last char, it hangs
05:26:19 <skew> if it's something self-delimiting like "asdfa\"asdf" you should never need to look too far
05:26:39 <skew> you mean, when you get the last character that was sent, or try to read again after recieving the last one?
05:27:04 <derelm> no, when i receive the last char, it hangs
05:27:28 <derelm> eg is send "ABC" via socket i can receive "AB" but the C will cause a hang
05:27:58 <skew> what is your program doing with the data it gets?
05:28:32 <derelm> the data will be parsed to the end and gets send back in a formatted way
05:30:28 <derelm> on the haskellircpaste page there is a function that tries to circumvent my problem, but it basically has the same problem
05:32:49 <skew> what happens if you close the socket?
05:33:43 <derelm> if i close the socket the complete string can be accessed, but i cannot send a reply
05:34:01 <derelm> i understand that this is the lazy evaluation that causes the problbem
05:34:02 <skew> what if you type in a complete string, and then type in some junk afterwards?
05:34:20 <skew> I think it's probably a blocking read causing the problem
05:34:41 <skew> what do you mean by string, anyway?
05:34:53 <derelm> sorry?
05:35:02 <skew> any random text? text with quotes around it?
05:35:11 <derelm> any random text
05:35:19 <derelm> so junk sending is not an option
05:35:21 <skew> how is the program supposed to know when it ends?
05:35:47 <derelm> part of the sent data is length of the complete string
05:36:01 <skew> so then junk would be typing extra characters beyond that length
05:36:30 <skew> I mean sending some data past the end, not trying to send ill-formed input
05:36:58 <skew> can you post code somewhere?
05:37:01 <derelm> hmm
05:37:05 <derelm> sure
05:37:35 <derelm> though it's a bit embarrasing since i am a real newbie :)
05:37:37 <skew> have you tried sending data longer than the length claims it should be?
05:38:06 <derelm> to be honest, i tried not to use the contained length
05:38:17 <skew> what is the server doing then?
05:38:32 <skew> trying to read the entire string it gets from getContents, and echo that back?
05:38:37 <Corion> I'm cargo-culting some code and want to eliminate a warning that GHC spews: http://sial.org/pbot/10123 -- can anybody tell me how to do that, please?
05:40:12 <skew> that "h@(FileHandle _ mvar)" means to pattern match the argument against FileHandle _ mvar, but also to make h refer to the value of the whole argument
05:40:36 <Corion> So if I leave out h@ , it should Just Work ?
05:40:46 <skew> specifically the h@ part means "also call the whole thing h". Drop that and the warning should go away
05:40:56 <derelm> skew: it's nearly an echo thing, although the data will be parsed completely and changed. this is a problem for my course. it's actually seperated in three tasks, the parsing and changing of the data is part of another task and i am using a dummy implementation
05:40:57 <skew> why is the other variable named h__?
05:41:16 <skew> derelm: If anything, I think lazy evaluation might make something like that work
05:41:17 <Corion> skew: I stole that code from a bug report, so I assume that the code in itself is less-than-clean :)
05:41:39 <Corion> skew: Yay! That worked! Now I have different errors, but that's something else :)
05:41:52 <skew> maybe bug reports are not the best place to get code
05:42:00 <skew> the bug wasn't
05:42:08 <Corion> skew: :)
05:42:12 <skew> about the code horribly failing to work, was it?
05:42:32 <Corion> skew: No, the bug report was about hDuplicateHandle not working
05:42:47 <Corion> skew: I'm mainly looking to implement hIsTerminalDevice() for Win32
05:43:02 <skew> I could see that code coming from a "handles and/or MVar's break if you do this" bug report
05:43:03 <Corion> ... but for that, I need to go from a Handle to a FD / Int
05:43:29 <Corion> ... so any easier way that does not require Posix.* being available would be nice :)
05:44:22 <skew> oh, just checking the definition of handle will show you how to do that
05:44:34 <Corion> skew: If I knew Haskell. ;)
05:44:42 <skew> all that mvar stuff is unecessary
05:44:55 <skew> oh, never mind
05:44:59 <Corion> skew: OK, then I'll look at how to do it with a fancy type declaration ;-)
05:45:00 <skew> that's the mvar inside a Handle
05:45:49 <aFlag> #darcs
05:45:58 <aFlag> ops
05:45:59 <skew> run GHCi, :m +System.IO GHC.IOBase, and check :info Handle, and :info Handle__
05:46:48 <skew> wait, where does this type FD come from?
05:46:58 <skew> it must be hiding IO..
05:46:59 <derelm> skew: im trying to change my client software to close the transmitting part of the socket, i think that would be the easiest way to solve my problem, although it might bring up some incompatibilities
05:47:01 <Corion> skew: Dunno - I assume from IO
05:47:39 <skew> hmm, it's just a synonym for Int
05:47:53 <skew> derelm: you understand the problem now?
05:48:09 <skew> are you getting a type error?
05:48:28 <Corion> skew: Yep - Int and Int32 and FD are the same on Win32, and I rely on that ;)
05:48:41 <derelm> skew: yes, now i know what exactly the problem is, thanks for pointing that out
05:48:43 <skew> I think that type needs to be Handle -> IO FD if you want it to work
05:49:10 <skew> derelm: you could also just stream data through the server
05:49:27 <Corion> Yay! (+ 1) skew
05:49:29 <derelm> oh btw: if i want to establish a receive timeout on my socket i cannot use ghc's network, i would need network.socket right?
05:49:49 <skew> relying on lazy evaluation to sort out all the different stages of processing so you can get some output before the socket hits EOF
05:50:29 <skew> @help karma+
05:50:31 <lambdabot> increment someone's karma
05:50:46 <derelm> skew: well but i think thats not an option for my problem, as i cannot sent a reply if all data has been parsed
05:51:00 <skew> derelm: what do you mean?
05:51:09 <skew> you need all the data to generate any of the reply?
05:51:17 <derelm> exactly
05:51:36 <derelm> i am evaluating propositional formulas
05:51:38 <skew> oh, then you need to switch to self-delimiting data, or close the transmit side of the socket
05:52:13 <derelm> yes, you're right
05:52:43 <skew> but using lazy evaluation is cool
05:52:53 <derelm> hehe, i do know that
05:53:21 <derelm> but some problems cannot getsolved that way, think of a webserver
05:53:33 <derelm> i am talking about reading from the socket
05:53:42 <derelm> i know there are webservers in haskell
06:00:53 <Corion> skew: Got it "working" now, except that the code doesn't do what I want. Thanks!
06:01:00 <basti_> lol
06:57:54 <TFK> zamez, re ##python, Haskell's cool :-)
07:36:49 <Kkaa> Has anyone had problems with Hugs98's 2005 version
07:36:51 <Kkaa> ?
07:37:38 <Lemmih> Do you have a problem with Hugs?
07:39:17 <Kkaa> yeah, but only the 2005 version
07:39:27 <Kkaa> it doesn't print the results of putStr
07:40:17 <Kkaa> or print any other strings
07:40:38 <ski> how about putStrLn ?
07:40:43 <Kkaa> nope
07:40:55 <ski> sounds weird
07:41:19 <Lemmih> What happens when you type 'putStrLn [something]'?
07:41:44 <Kkaa> it prints a blank line and then shows the prompt again
07:42:32 <musasabi> Do you have unusual locale settings - and what is the platform?
07:42:38 <Kkaa> XP
07:42:48 <Kkaa> no, plain old english
07:44:06 <musasabi> I have only tried it on *nix and didn't have any problems..
07:44:40 <Kkaa> hmm... I just noticed something else
07:46:11 <Lemmih> What?
07:46:17 <Kkaa> one sec
07:46:43 <Kkaa> it is only WinHugs that has a problem... the console version works fine
07:59:36 <dcoutts> dons, it looks like my sparc build of ghc-6.4 went fine :-) thank's for the help the other day
08:01:35 <musasabi> dcoutts: you might want to announce that - a few people have been complaining about the lack of support.
08:06:42 <basti_> hmm
08:06:45 <basti_> any news on shapr?
08:06:55 <dcoutts> musasabi, well I'll be aiming to get ghc into the Gentoo portage tree for ~sparc soonish (both 6.2.2 and 6.4)
08:07:16 <musasabi> ah I was thinking solaeis.
08:07:19 <musasabi> *solaris
08:07:25 <dcoutts> bear in mind that this is Sparc Linux not Sparc Solaris which is what most people were wanting
08:07:33 <dcoutts> oh, yes you said that :-)
08:07:49 <musasabi> basti_: he seems to have written in his blog "no more ircing till FLM 0.1 is done".
08:08:03 <basti_> whats FLM?
08:08:28 <dcoutts> Well it just goes to show that it's Solaris that's a pita, not the Sparc arch.
08:08:34 <musasabi> A program to add annotations to papers.
08:08:45 <basti_> ah
08:08:52 <ski> Fermats last margin, iirc
08:08:52 <basti_> i heard about it yes.
08:08:54 <Igloo> Is there any evidence Solaris is actually a PITA rather than no-one has tried to port it recently?
08:08:56 <basti_> why is it so critical for him?
08:09:33 <dcoutts> Igloo, no idea, I was just being rude about Solaris :-)
08:09:41 <Igloo> :-)
08:10:17 <dcoutts> I think it may be that no-one has tried it because the ghc team lost its Solaris guru.
08:11:18 <dcoutts> You can try running it on one of the ecs machines :-) except it'd put you over your measly ecs quota and it'd build very slowly as it does everything over NFS :-)
08:12:21 <aFlag> what's a pita?
08:12:32 <basti_> pain in the _ss
08:13:17 <aFlag> oh
08:14:37 <dcoutts> I would say "Pain in the Anterior" but it wouldn't be correct and "Pain in the Posterior" doesn't fit :-)
08:14:53 <basti_> hehe
08:23:01 <TheHunter> arggh! ghc-6.5.20050513-i386-unknown-linux.tar.bz2 doesn't contain an executable.
08:26:59 <aFlag> executables are for sissies
08:29:05 <CosmicRay> @seen shapr
08:29:05 <lambdabot> I saw shapr leaving #haskell 5 days, 23 hours, 28 minutes and 48
08:29:05 <lambdabot> seconds ago.
08:30:41 <aFlag> @seen cale
08:30:42 <lambdabot> cale is in #haskell. Last spoke 17 hours, 41 minutes and 13 seconds
08:30:42 <lambdabot> ago.
08:32:22 <lightstep> seems like a problem with the line wrapping module
08:33:00 <TheHunter> why?
08:33:44 <TheHunter> oh, i see, it fits into 80 chars.
08:35:04 <lightstep> it depends on the length of the name, but i think that the @seen module should be protected from the wrapping
08:35:43 <TheHunter> @seen's output can become very long.
08:35:43 <lambdabot> I haven't seen output.
08:36:05 <Kkaa> what is lambdabot written in?
08:36:20 <resiak> Fortran!
08:36:26 * resiak slinks back into the shadows/.
08:36:38 <Kkaa> i hope you're joking
08:36:39 * TheHunter can't test it right now, due to the lack of a working ghc.
08:38:48 <lightstep> @wiki LambdaBot
08:38:49 <lambdabot> http://www.haskell.org/hawiki/LambdaBot
08:41:02 <TheHunter> ok, lambdabot does the right thing.
08:41:19 <TheHunter> textwidth is configured to 70.
08:51:31 <vidvandre> dcoutts, I'm not getting that ghc 6.4 patch for gtk2hs to work, the build fails
09:00:46 <vidvandre> dcoutts, I've left the build error messages at http://www.haskell.org/hawiki/HaskellIrcPastePage .. got to go. bbl
09:25:22 <goron> TheHunter: Does lambdabot also support syntax to tell it new "facts" like dpkg?
09:26:22 <Lemmih> Facts?
09:28:36 <goron> Lemmih: It that a command?
09:29:10 <goron> @listcommands
09:29:10 <lambdabot> all-dicts arr babel define definitions devils dice dict dict-help
09:29:10 <lambdabot> docs dummy easton echo elements eurohaskell eval fact fact-cons fact-
09:29:10 <lambdabot> delete fact-set fact-snoc fact-update foldoc fortune gazetteer get-
09:29:10 <lambdabot> definition ghc google help hitchcock index jargon karma karma+ karma-
09:29:10 <lambdabot> kind learn libsrc listchans listcommands listmodules lojban moo more
09:29:11 <lambdabot> paste pl pl-resume plugs pointless prelude quote remember resume
09:29:13 <lambdabot> seen spell state timein todo todo-add topic-cons topic-init topic-
09:29:15 <lambdabot> snoc topic-tail topic-tell type uptime vera version vixen web1913
09:29:17 <lambdabot> wiki wikipedia wn world02 yow
09:29:28 <lightstep> @help fact
09:29:29 <lambdabot>  @fact <fact>, Retrieve a fact from the database
09:29:33 <Lemmih> No, I was wondering what you meant by "facts".
09:29:58 <goron> Lemmih: Well, just some rule based "knowledge".
09:30:09 <Lemmih> @fact
09:30:10 <lambdabot> I can not handle empty facts.
09:30:17 <goron> @fact ghc
09:30:18 <lambdabot> I know nothing about ghc.
09:30:25 <Lemmih> @help fact-set
09:30:26 <goron> @fact haskell
09:30:26 <lambdabot> Define a new fact, guard if exists
09:30:27 <lambdabot> I know nothing about haskell.
09:30:30 <lightstep> everybody always try the same
09:30:47 <goron> @fact lambdabot
09:30:47 <lambdabot> I know nothing about lambdabot.
09:31:12 <Lemmih> @fact ghc
09:31:13 <lambdabot> ghc: Haskell implementation.
09:31:28 <kaol> @fact life
09:31:29 <lambdabot> I know nothing about life.
09:31:54 <basti_> @fact sex
09:31:55 <lambdabot> I know nothing about sex.
09:32:11 <basti_> hmm.
09:32:19 <kaol> I would be worried if it did
09:32:27 <goron> @fact anything
09:32:27 <lambdabot> I know nothing about anything.
09:32:57 <goron> @help fact-set
09:32:58 <lambdabot> Define a new fact, guard if exists
09:33:49 <goron> @fact-set foo bar
09:33:49 <lambdabot> Fact recorded.
09:33:56 <goron> @fact foo
09:33:56 <lambdabot> foo: bar.
09:34:07 <kaol> @fact-set bar foo
09:34:08 <lambdabot> Fact recorded.
09:34:27 <goron> How can I put multiple words matchings in it?
09:34:40 <lightstep> @fact recursion
09:34:41 <lambdabot> recursion: recursion.
09:34:52 <ski> @fact hsu
09:34:53 <lambdabot> hsu: I know nothing about Haskell Secret Underground..
09:35:10 <goron> Something like "foo bar something -> some description"
09:43:21 <SamB> @timein glasgow
09:43:25 <lambdabot>  Saturday, May 14, 2005 at 5:44:25 PM BST
09:57:45 <lightstep>  @dice propagates the Parsec messages literally. is this intentional?
10:03:15 <basti_> @timein marburg
10:03:16 <lambdabot>  Sorry, don't know this city
10:03:24 <basti_> hm
10:03:29 <basti_> :)
10:11:11 <Gahhh> @timein sunnyvale
10:11:12 <lambdabot>  Saturday, May 14, 2005 at 10:12:12 AM PDT
10:11:25 <lightstep> @timein sunnydale
10:11:27 <lambdabot>  Sorry, don't know this city
10:42:19 <SamB> @docs Data.IntMap
10:42:20 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/base/Data.IntMap.html
11:09:19 <halcyon10> can someone have a look at my code and tell me why hugs doesn't take it? http://hbin.dyndns.org/pastebin/44.html
11:10:27 <halcyon10> i'm trying to set a circular area in an array to a new value, but somehow hugs doesn't like my types.
11:10:30 <Muad_Dibber> try manually specifying the inside type as well and see if that helps?
11:11:41 <halcyon10> ok, can i do that inside the where-statement or do i have to outsource it into a independant function?
11:12:05 <Lemmih> halcyon10: It can sometimes be useful to leave out the type signature and let GHCi/Hugs figure it out on its own.
11:12:16 <Muad_Dibber> inside should be possible me thinks
11:14:25 <halcyon10> Lemmih: ok, i'll try that. i tried to do it myself partly for learning to deduct types myself
11:17:09 <halcyon10> hugs gives me this type: "setCircle :: (Ix a, Num a) => (a,a,a) -> b -> Array (a,a) b -> Array (a,a) b". Why does it use 'a' for Ix and Num simultaneously ? does that make sense?
11:20:18 <derelm> hmm, i am looking for a way to extract the first number from a string ( number meaning something like 123 not just a digit)
11:21:45 <Lemmih> halcyon10: 'a' must be an instance of Num because you use '*' and '+', and it must be an instance of Ix because of (//).
11:21:53 <Lemmih> @plugs read "123" :: Int
11:21:55 <lambdabot> 123
11:22:28 <Lemmih> @plugs reads "123text" :: [(Int,String)]
11:22:29 <lambdabot> [(123,"text")]
11:23:22 <halcyon10> Lemmih: ah, i see
11:23:27 <xerox> @type reads
11:23:33 <lambdabot> reads :: forall a. (Read a) => ReadS a
11:25:25 <derelm> thanks
11:26:59 <Lemmih> You're welcome (:
11:37:55 <halcyon10> is there a typecast from an Int to a Float/Double ?
11:39:06 <SamB> @type fromIntegral
11:39:12 <lambdabot> fromIntegral :: forall b a. (Num b, Integral a) => a -> b
11:39:42 <SamB> @plugs fromIntegral (1 :: Int) ::Float
11:39:47 <halcyon10> does the Num mean that it selects the appropriate type?
11:39:49 <lambdabot> 1.0
11:39:58 <halcyon10> ah, thanks
11:40:20 <SamB> halcyon10: the Num means you get to pick a type, but you don't have to if you don't feel like it.
11:40:33 <SamB> That only works for a few typeclasses, though.
11:40:42 <halcyon10> ok
11:41:03 <SamB> one that I wish it worked on is Bits from Data.Bits...
11:52:31 <golya> Hi! I'm new to haskell, reading the "Yet another Haskell tutorial", and need a little help.
11:52:57 <golya> It is stated, that map (-1) [1..5] will not do, what is expected, because -1 is parsed as a number
11:53:16 <golya> So, how to decrement all list members by 1?
11:54:04 <Lemmih> @plugs map (subtract 1) [1..5]
11:54:06 <lambdabot> [0,1,2,3,4]
11:54:45 * Lunar^ reads the 8th HC&AR
11:54:48 <ski> @plugs map (flip (-) 1) [1..4]
11:54:50 <lambdabot> [0,1,2,3]
11:55:35 <golya> thx, flip is the thing I looked for
11:55:58 <halcyon10> is there a prettier way to nest 'where'-statements than this : http://hbin.dyndns.org/pastebin/45.html ?
11:56:04 <golya> @help
11:56:05 <lambdabot>  @help <command> - ask for help for <command>
11:57:05 <Lemmih> halcyon10: You can omit the braces.
11:57:40 <halcyon10> Lemmih: what would be the right way to indent the lines if i want to omit the braces?
11:58:23 <Lemmih> Like you have now, just without the braces.
11:58:24 <tuomov> just like that? (Although I prefer to indent everything that can not be aligned to something on the previous line with 4 spaces)
12:01:34 <golya> Does ghc (or any other haskell variants) come with an interactive documentation?
12:01:39 <halcyon10> *doh* it really works :) i must have done something other wrong then..
12:01:49 <golya> So, I type a function, and get back the documentation of it.
12:02:15 <golya> It would be nice, if one could apply show to a function...
12:09:07 <Lemmih> golya: Haddock documentation is the best there is atm.
12:10:17 <golya> sorry, I don't know Haddock
12:10:29 <golya> Can you give me an URL?
12:10:30 <Lemmih> @google haskell haddock
12:10:32 <lambdabot> http://mirror.pudas.net/gentoo-x86-portage/dev-haskell/haddock/
12:10:46 <Lemmih> http://www.haskell.org/haddock/
12:35:35 <bourbaki> .
12:35:36 <FrederikEaton> i have a script that i use to look up functions in haddock from the command line, with autocompletion
12:36:05 <golya> Can you share it with me?
12:36:45 <FrederikEaton> sure. http://ofb.net/~frederik/misc/index.html
12:36:48 <FrederikEaton> it's called "htmlman"
12:36:55 <FrederikEaton> it does mysql too
12:37:24 <golya> thx
12:48:45 <FrederikEaton> golya: tell me if it doesn't work. it may depend on things from my setup
12:50:01 <golya> FrederikEaton: eg. on zsh :)
12:52:34 <FrederikEaton> everybody doesn't use zsh?
12:53:50 <Cale> FrederikEaton: btw, a few of those links have permission problems :)
12:53:56 <FrederikEaton> well that's just for completion. which is just a wrapper calling the script with a special argument. so would probably be easy to write for bash
12:54:01 <FrederikEaton> Cale: gah!
12:54:26 <FrederikEaton> i should probably run something to check for bad links, what should i run?
12:55:06 <Cale> chmod a+r :)
12:56:07 <FrederikEaton> which one?
12:56:38 <Cale> aoeu
12:56:45 <Cale> mover
12:57:27 <Cale> oh, that seems to be it
12:58:50 <Cale> linkchecker looks like it might be a decent tool to check for bad links
12:59:02 <FrederikEaton> done.
12:59:06 <FrederikEaton> are you a dvorak user?
12:59:19 <halcyon10> is there a function in the standard library that converts an array to a nested list? e.g. convert a 3x3-matrix to [[a,b,c],[d,e,f],[g,h,i]]
13:00:37 <FrederikEaton> halcyon10: no
13:00:52 <musasabi> halcyon10: you mean something like "Ix i => Array (i,i) x -> [[x]]" ?
13:01:19 <halcyon10> musasabi: yes
13:01:28 <FrederikEaton> halcyon10: but you can convert it to a list and then use 'group'
13:01:47 <musasabi> halcyon10: assocs + sort + group
13:03:12 <halcyon10> FrederikEaton: how can i convert the array to a list?
13:03:53 <halcyon10> musasabi: i don't understand yet what you mean. i think this is probably too much over my head at the moment
13:04:01 <Cale> FrederikEaton: not at the moment actually, though I've been thinking about it
13:04:33 <Cale> FrederikEaton: It would kind of suck to lose my current typing ability, but perhaps it would eventually be worth it.
13:04:44 <FrederikEaton> halyon10: musasabi gave you the functions you need, just look up the documentation
13:05:32 <RemiTurk> good evening
13:05:48 <halcyon10> ok, then i'll try that
13:05:52 <FrederikEaton> Cale: losing my typing ability was definitely worth it :)
13:06:17 * RemiTurk thinks what name that keyboard layout has you're probably talking about and I plan to learn one day
13:06:49 <Cale> Dvorak
13:06:54 <FrederikEaton> i'm planning to learn vim
13:07:12 <RemiTurk> Cale: thx, indeed :)
13:07:19 <kaol> vim is not a keyboard layout. altough you might be excused for thinking so.
13:07:36 <FrederikEaton> now, see, all those scripts on my web page could be written in haskell if 'runghc' didn't require files to end with ".hs"
13:07:42 <RemiTurk> actually, I think it's an interesting analogy :)
13:07:52 <RemiTurk> (at least after a few glasses of wine)
13:11:19 * resiak gave up on Dvorak because of vim.
13:12:38 <RemiTurk> resiak: vim doesn't like dvorak or something like that?
13:13:08 <resiak> RemiTurk: hjkl are not in a neat line on the homerow in Dvorak :)
13:13:11 <tuomov> application bindings in general are quite badly suited for dvorak
13:13:39 <tuomov> I also gave up on it because of that
13:14:14 <RemiTurk> ahh, of course :-/
13:15:20 <tuomov> It was bad enough trying to deprogram qwerty text input, let alone try to learn new bindings that are even deeper in the spine
13:16:29 <tuomov> and all bindings that have have been designed at least in part positionally become completely unusable
13:17:46 <FrederikEaton> well not completely
13:17:52 <RemiTurk> hm, dhtn?
13:18:13 <RemiTurk> (instead of hjkl)
13:19:37 <resiak> vim maps exist that act as if you weren't in dvorak
13:20:04 <resiak> But then if you read the help and it tells you to use whatever keystrokes, you have to remember where they are qwertically, which breaks the dvorak focus.
13:20:46 <FrederikEaton> the problem is "l" which goes where "p" used to be. "j" and "k" stay next to each other, and "h" only moves one spot
13:21:13 <halcyon10> musasabi,FrederikEaton: i have a solution now: http://hbin.dyndns.org/pastebin/46.html   thanks for your help
13:22:59 <FrederikEaton> halyon10: good work
13:31:09 <musasabi> nice :-)
13:31:27 <musasabi> => sleep
13:33:28 <Cale> hrm, all the keys on my keyboard can be permuted except f and j
13:33:38 <Cale> which can only be substituted for one another
13:38:22 <basti_> because of the seeing impaired dots?
13:38:34 <basti_> (or, touch type dots)
13:39:24 <Cale> well, the holes that go into the keyboard for those keys are differently shaped
13:39:38 <basti_> oh
13:40:03 * basti_ has a microsoft natural keyboard
13:40:13 <basti_> permuting this will be HARD
13:40:14 <basti_> ;)
13:40:46 <basti_> (its split in the middle, with the keys 6tgb7zhn having awkward shapes ;)
13:41:29 <Cale> I have a microsoft keyboard as well, but not natural.
13:41:53 <Cale> It's fairly easy to pop the keys off and swap them around, except for that pair.
13:43:10 <Cale> hmm, a greek key would be neat
13:43:15 * basti_ nods
13:43:33 <basti_> why dont you just use caps lock for that? ;)
13:43:40 <basti_> its no use anyway
13:43:42 <Cale> Caps lock is compose currently
13:44:22 <basti_> oh
13:44:35 <basti_> then "print screen" ;)
13:44:42 <Cale> :)
13:44:49 <basti_> or "insert"
13:44:51 <Cale> Or something like both alt keys
13:44:52 <basti_> (modal keys suck)
13:44:57 <basti_> hmm yes
13:45:03 <basti_> or the windows key!
13:45:33 <Cale> yeah, usually I have my windows key set up as the grab-window key, but it's not doing that currently, so that'd work
13:46:07 <basti_> what about the other bill gates key? ;)
13:46:26 <Cale> menu key?
13:46:29 <basti_> yes
13:46:42 <basti_> never used either... ;)
13:46:45 <Cale> That actually appears to work, but I never use it :)
13:47:18 <basti_> you know, once there was a keyboard to the lisp machine
13:47:26 <basti_> it had four modifier keys
13:47:32 <basti_> and so was called "the space cadet keyboard"
13:47:34 <Cale> yeah
13:47:40 <Cale> αβγδε
13:47:45 <Cale> that works :)
13:47:46 <basti_> what would those people say if they saw a current keyboard?
13:47:50 <basti_> whats that?
13:48:00 * basti_ got utf-8 running again
13:48:01 <Cale> alpha beta gamma delta epsilon
13:48:06 * basti_ couldnt read that though
13:48:11 <Cale> αβγδε
13:48:16 <basti_> stupid... why doesn't terminus have greek chars
13:48:29 <Cale> hmm, perhaps you don't have a font
13:48:40 <basti_> yes i got terminus
13:48:43 <basti_> it covers a lot
13:48:52 <basti_> at least many many latin based charsets
13:48:56 <basti_> and then some others
13:49:19 <Cale> I spent a while working on my Unicode coverage. I think I even have Linear-B and such :)
13:49:27 <basti_> it even has ł, Ł, ð, þ
13:49:36 <basti_> i think we talked about that before.
13:49:37 <basti_> ;)
13:49:49 <basti_> the stupid thing is, IF, then i want it all to be the same font
13:50:00 <Cale> hmm, I wonder if struck-L is available from compose
13:50:05 <fraxtal> ∰
13:50:08 <basti_> unlike my browser.
13:50:18 <basti_> that displays pinyin etc. in different fonts
13:50:21 <fraxtal> I have a font with like 30,000 symbols
13:50:30 <basti_> looks l33t, but is not nice to read.
13:50:37 <basti_> fraxtal: whats it called like?
13:50:44 <fraxtal> Ariel Unicode
13:50:49 <fraxtal> Arial*
13:50:52 <Cale> heh, searching for σ-algebra works :)
13:50:58 <basti_> is that open source?
13:51:02 <fraxtal> no
13:51:08 <basti_> :(
13:51:10 <fraxtal> But it is TT
13:51:14 <fraxtal> and I have a link to it
13:51:25 <basti_> hmm
13:51:26 <basti_> ;)
13:51:40 <fraxtal> if you want it
13:51:51 <basti_> sure thing.
13:52:29 <Cale> It would be absolutely cool to have an extra keyboard with a bunch of keys that list unicode pages, and a primary keyboard able to change the keycaps to display the selected page :)
13:52:41 <fraxtal> http://www.lightworker.com/Download/Fonts/ARIALUNI.TTF
13:52:46 <basti_> you mean like chinese input methods?
13:53:05 <basti_> thanks fraxtal
13:53:07 <fraxtal> Cale: That would be excellent
13:53:15 <basti_> that will at least feed my browser
13:53:24 <basti_> you should have a look at these chinese input widgets
13:53:26 <zamez> there's also Cyberbit
13:53:29 <basti_> thats really off
13:53:31 <fraxtal> 22 megabytes of unicode goodness
13:53:47 <zamez> http://ftp.netscape.com/pub/communicator/extras/fonts/windows/
13:57:09 <derelm> my network issues never seem to stop :( i am trying to set my socket to semiclosed (no more receives) but on shutdown mySock ShutdownReceive i get an exception
13:57:30 <derelm> Exception: accept: invalid argument (Invalid argument)
13:58:22 <fraxtal> ∜3
14:06:50 * basti_ now got both fonts...
14:11:00 <glimming> hello!
14:11:07 <glimming> How do I have multi-line comments in ghci?
14:12:10 <Lemmih> Comments in ghci?
14:12:34 <glimming> yepp
14:12:35 <basti_> very puzzling indeed
14:12:47 <basti_> you mean in the source files you're reading?
14:12:51 <xerox> {- foo -}
14:12:53 <xerox> does work :-)
14:12:55 <glimming> indeed,.
14:13:01 <glimming> aha, I wrote {* that explains
14:13:05 <glimming> btw, I use a theorem prover called CafeOBJ
14:13:13 <glimming> where whitespace is significant so that
14:13:16 <glimming> eq a = a .
14:13:18 <glimming> is different from
14:13:20 <glimming> eq a = a.
14:13:21 <glimming> that I hate
14:13:47 <glimming> I hope they improve their lexical analysis. After all, some things has happened since 1976 when OBJ was implemented!
14:16:59 <basti_> glimming: ever tried coq?
14:22:25 <glimming> yes it is worse?
14:22:32 <glimming> Coq is a different logic
14:22:48 <glimming> it is type theory
14:22:51 <basti_> yes.
14:22:54 <glimming> whereas OBJ is a term rewrite system
14:23:01 <basti_> well coq does term rewriting too
14:23:04 <basti_> obsessively
14:23:17 <basti_> its calculus of inductive constructions
14:23:24 <basti_> thats kinda like GADT
14:23:31 <basti_> on crack-
14:29:15 <foxy__> Is there any way to incorporate a reference to a data-structure inside that data structure?  I can't think of a way to do it, since if I create say a Ptr Obj then assign that to a field, the new record is no longer the object in the Ptr
14:30:51 <Lemmih> foxy__: Have a look at IORef's.
14:32:06 <Lemmih> @doc Data.IORef
14:32:07 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/base/Data.IORef.html
14:35:35 <foxy__> Lemmih: if I say data Foo a = Foo { data :: a, this :: IORef (Foo a) }, then newIORef (Foo 0 ??), what do I put in the ?? position?
14:36:02 <basti_> are you looking for circular structures?
14:36:29 <foxy__> I'm going to implement an object-oriented database
14:36:38 <foxy__> and I want a way to have a this pointer
14:36:56 <basti_> you mean a pointer that points to the data structure itself?
14:37:00 <foxy__> yeah
14:37:04 <basti_> like "this"?
14:37:11 * foxy__ nods
14:37:52 <basti_> other than this is stupid (noone knows what an object oriented db would be like), let me tell you that you will need to tie the knot
14:37:53 <ski> maybe back-patch it ?
14:37:56 <basti_> as in:
14:38:02 <basti_> @plugs take 10 $ repeat 1
14:38:08 <lambdabot> [1,1,1,1,1,1,1,1,1,1]
14:38:16 <basti_> repeat "ties the knot"
14:38:25 <basti_> it makes the data go round
14:39:04 <foxy__> ski: back-patch?
14:40:00 <ski> make an IORef to bottom (e.g.), and then create Foo-value referring to this, then assign that to the IORef
14:40:26 <basti_> i do not see why this should need an IORef btw.
14:42:28 <TheHunter> or use mdo.
14:42:53 <basti_> mdo?
14:43:08 <foxy__> @index mdo
14:43:09 <lambdabot> bzzt
14:43:27 <foxy__> @help index
14:43:28 <lambdabot>  @index - yay!
14:44:13 <foxy__> is mdo haskell 98 or an extension?
14:44:24 <TheHunter> it's an extension
14:44:52 <TheHunter> mdo x <- foo x
14:45:34 <TheHunter> mdo ref <- newIORef $ Foo { data = x, this = ref }
14:46:09 <basti_> is that these hidden parameters you were writing about in that article TheHunter ?
14:46:34 <TheHunter> basti_, not at all.
14:46:39 <TheHunter> @docs Control.Monad.Fix
14:46:40 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/base/Control.Monad.Fix.html
14:46:50 <foxy__> TheHunter, that's what I'm after, thanks!
14:47:03 * basti_ sighs
14:47:34 <ski> @type Control.Monad.Fix.mfix
14:47:36 <lambdabot> Control.Monad.Fix.mfix :: forall (m :: * -> *) a.
14:47:36 <lambdabot>          (Control.Monad.Fix.MonadFix m) =>
14:47:36 <lambdabot>          (a -> m a) -> m a
14:47:38 <basti_> mmm brb... gotta restart x for the greater goods
14:47:53 <derelm> i am going nuts, can somebody please help me processing the possibly infinite string "ABC 6 asd..." into "asd..."?
14:48:17 <glimming> I am trying to write a SIMPLE monadic lambda interpreter based on Oleg's more complicated implementation. I have started http://www.nada.kth.se/kurser/kth/2D1456/LAM.hs
14:48:27 <pediddle> drop (length "ABC 6 ") "ABC 6 asd..."
14:48:33 <glimming> But this is just Oleg's code with comments removed, and his suggested monadic stuff
14:48:43 <glimming> I'd like to write a simple interpreter
14:48:45 <glimming> and then add monads for
14:48:48 <glimming> 1) tracing
14:48:59 <glimming> i.e. show reduction
14:49:15 <derelm> pediddle: it's not that simple, the 6 is subject to change...
14:49:16 <glimming> 2) something else, not sure what
14:49:34 <derelm> pediddle: 6 indicates the length of the following string of interest
14:50:01 <derelm> pediddle: but it might just aswell be a 1923
14:50:04 <foxy__> monads are good for a store of free variables glimming
14:50:31 <pediddle> derelm, what's the specification for the format?
14:51:18 <glimming> aha
14:51:23 <derelm> pediddle: a 5 char header, a field giving the length of the following text. header, length and text seperated by whitespace
14:51:26 <basti_> mmm arial unicode r0xx0rs
14:51:30 <glimming> goodnight
14:51:38 <derelm> pediddle: whitespace = 1 blank
14:51:58 <pediddle> so use (drop 5) to drop the header
14:52:38 <derelm> ah and then check char by char if its a digit, compose that
14:52:47 <derelm> and then drop the number of digits
14:52:50 <pediddle> then (takeWhile (\x -> x /= ' ')) to get the number, and (read) to convert it to an int
14:53:16 <ski> or  takeWhile isDigit, maybe
14:53:28 <derelm> yes
14:53:49 <pediddle> ski, yeah
14:54:25 <pediddle> then (take n . dropWhile (\x -> x /= ' ')) where n is the number to get n chars from the rest of the string
14:54:37 <ski> (i hope you know that (\x -> x /= ' ') can be written more simply as (/= ' ').)
14:54:59 <pediddle> ski, yeah, but pointless confuses newbies
14:55:04 <pediddle> @pl (\x -> x /= ' ')
14:55:06 <lambdabot> (' ' /=)
14:55:07 <pediddle> wee
14:55:17 <derelm> :)
14:55:23 <ski> pediddle : not these kinds of simple sections, in my mind
14:55:30 <pediddle> perhaps
14:55:52 * ski thinks  map (* 2) [0..9]   is simplicity itself
14:56:39 <pediddle> hmm, is @pl programmed to know that /= is commutative? or is that a bug?
14:57:02 <ski> noticed that too. not sure
14:57:40 * ski would guess, bug in core code, or in printer code
14:58:01 <Igloo> @pl (\x -> x / 2)
14:58:02 <lambdabot> (/ 2)
14:58:25 <Igloo> @pl (\x -> x /= undefined)
14:58:25 <foxy__> @docs IORef
14:58:26 <lambdabot> (undefined /=)
14:58:26 <lambdabot> IORef not available
14:58:26 <pediddle> not a bug, in @pl code:  Rules.hs:commutativeOps = ["*", "+", "==", "/=", "max", "min"]
14:58:29 <xerox> eta-reduction
14:58:46 <ski> oki
14:58:48 <Heffalump> is /= really commutative?
14:58:59 <Igloo> They're only commutative for certain types, though
14:59:10 <pediddle> it's specified to be, but no way to enforce it
14:59:22 <Heffalump> is it commutative in the presence of _|_ ?
14:59:26 <Heffalump> I guess it has to inspect both arguments.
14:59:47 <basti_> hm
14:59:54 <basti_> does that hurt commutativity?
15:00:00 <basti_> it fails in either case
15:00:06 <Heffalump> I'm wondering about embedded _|_s now.
15:00:14 <basti_> oh.
15:00:16 <pediddle> again, wouldn't necessarily fail for some types
15:00:17 <Heffalump> something like comparing Succ _|_ and Zero
15:00:30 <Heffalump> depending on how you structure your test, it might break one way round and not the other
15:00:37 <basti_> yes i see that.
15:00:54 <Heffalump> you can probably always be careful, but that's not an obvious part of the spec
15:00:59 <basti_> hmm
15:01:05 <basti_> but it doesnt need to be
15:01:19 <basti_> it looks left and right and sees (Succ ?) vs. Zero
15:01:26 <basti_> thats not the same
15:02:02 <basti_> if you get (Succ ?) and (Succ (Succ ?)), it will break either way
15:02:51 <basti_> hmm but yes things can be complicated...
15:03:00 <Heffalump> you have to be careful to always short-circuit the test symmetrically.
15:03:19 <Heffalump> so if you say Succ _ /= Zero you must also say Zero /= Succ _
15:03:20 <basti_> yes.
15:04:05 <basti_> yes.
15:04:32 <basti_> the obvious way of checking would be traversing both values the same way
15:04:40 <basti_> of course you don't need to.
15:04:50 <basti_> :)
15:31:03 <pediddle> @pl foo x y = if x == 0 then y else 2 * foo (x * x)
15:31:05 <lambdabot> foo = fix (liftM2 flip (if' . (0 ==)) . ((2 *) .) . (. join (*)))
15:31:13 <pediddle> truly pointless :)
15:39:56 <jesse99> anyone care to offer some advice on how to name types and constructors, I seem to often want to use the same name which doesnt seem to good
15:40:12 <jesse99> for example, newtype Payload = Payload String
15:45:32 <Heffalump> jesse99: that's fine.
15:45:40 <Heffalump> It's very common, particularly for newtype
15:46:03 <jesse99> hmm, i thought the compiler would treat it as a recursive type
15:46:22 <Heffalump> different namespaces
15:46:25 <jesse99> altho I guess its clear that it isnt a type
15:46:29 <Heffalump> newtype Payload = Foo Payload
15:46:32 <Heffalump> would be recursive
15:46:34 <jesse99> yeah
15:46:41 <jesse99> thanks heff
15:54:03 <derelm> can i mix functions from Network and Network.Socket?
15:55:42 <derelm> i created a socket using the functions in Network, but now i'd like to set some socket options using setSocketOption, will/should that work?
15:59:32 <halcyon10> dumb question: how can i access the components of tuples without patternmatching?
15:59:43 <Heffalump> fst and snd for (a,b) type tuples
15:59:53 <Heffalump> or write your own helper functions to access the elements - but those will have to pattern match
16:00:01 <halcyon10> yes, i need something like this for higher dimension
16:00:05 <shrimpx> fst and snd pattern match too =)
16:00:08 <Heffalump> there's no way to access the elements that doesn't rely on pattern matching at some level
16:00:29 <halcyon10> ok, then i'll need to make some helperfunctions
16:00:51 <shrimpx> write some c code that accesses stuff directly!
16:12:07 <Gahhh> halcyon10: you can define a data type with labelled fields.
16:57:52 <halcyon10> thanks for the tip Gahhh, good night all
17:12:13 <drbean> I just realized the names foldr, foldl, come from ten-fold, one hundred fold
17:12:24 <gzl> what?
17:12:34 <drbean> rather than from folding a piece of paper.
17:13:42 <drbean> No, the meaning is times (x10, etc) not action into something else
17:15:18 <Igloo> I imagine it's from the "fold together" sense, but I don't actually know the etymology
17:16:06 <drbean> Well that's what I thought, but then there is the expression, 'tenfold'
17:16:16 <mwc> drbean: I think it refers to folding like a paper... you take an op and use that to fold together the seed and the first, then fold that onto the first
17:16:21 <mwc> er, onto the second
17:17:15 <drbean> like folding cake batter with a spoon.
17:17:33 <mwc> Mmm, I like my more rigid example
17:18:20 <drbean> How do you see the propagation aspect?
17:19:33 <mwc> drbean: if you fold a 10" piece of paper over every inch, you end up with that one 1" thick piece of paper
17:19:39 <mwc> that's made of the 10-layer
17:20:09 <drbean> Like a square block of paper?
17:20:32 <mwc> kinda
17:20:58 <dbremner> mwc - there's an trick for bar bets. Ask someone to fold a newspaper 7 times.
17:21:28 <mwc> dbremner: you need to specify they have to fold it in half 7 times
17:21:38 <foxy> How can I represent a table (map) of polymorphic functions of arbitrary types?
17:21:54 <mwc> geometric vs. arithmetic thickness
17:22:19 <dbremner> mwc - true
17:22:21 <mwc> foxy: the question I'd ask first is why
17:22:37 <mwc> it seems like you're setting yourself up to be working against the type system the whole way
17:22:47 <foxy> as a symbol table for objects defined at run-time
17:23:12 <mwc> so really you'd have a run-time function type
17:23:40 <foxy> from what I can see type Dynamic restricts to monomorphic types
17:23:45 <mwc> that would encapsulate the information about it's type behaviour
17:24:38 <foxy> there is a way to safely cast with type Typeable (which creates a type representation), but I can't see how to do it while allowing polymorphic types
17:24:52 <mwc> foxy: are you making a runtime for a language?
17:25:04 <foxy> sort of, yes
17:25:53 <mwc> okay, so it seems to me that you're going to have a lot of trouble with the type system this way. What I recommend doing is creating a suitible RTFunction type that encapsulates the information about the parameters and the value.
17:27:04 <foxy> hm
17:27:35 <dcoutts> vidvandre: re gtk2hs build problem: thank's for the report, I'll take a look.
17:28:52 <mwc> foxy: It sounds to me like you're trying to map your runtime language infrastructure way too close to Haskell's own type system which is going to really limit your ability to write generalized code
17:29:46 <foxy> yeah, I was planning on using hs-plugins and modifying haskell code on the fly!
17:32:02 <foxy> I thought there might be a good way to take advantage of the haskell type inference, and not reinvent the wheel
17:35:52 <mwc> foxy: wait for dons to get around, and then ask him. I'm sure he's dealt with this in hs-plugins himself
17:35:59 <mwc> @seen dons
17:36:00 <lambdabot> dons is in #haskell. Last spoke 21 hours, 15 minutes and 58 seconds
17:36:00 <lambdabot> ago.
17:49:21 <mwc> I really ought to time the bootstrap time for GHC
17:50:34 <mwc> seems like it's been going on for hours
17:53:10 <dons> moin
17:53:26 <dons> 21 hours ago, really?
17:53:38 <mwc> depends if you trust the bot
17:53:46 <mwc> 21 hours ago in lambdabot's timezone
17:54:12 <Igloo> Does time pass faster or slower in lambdabot's timezone than in mine?
17:54:26 <mwc> Igloo: what's your relative gravity field?
17:54:49 <dons> I think there might be a localised blackhole around lambdabot at times
17:55:05 <dons> (TheHunter, not really ;) @uptime is ok I think)
17:55:13 * Igloo suspects fairly low
17:55:30 <Gahhh> @relativity
17:55:31 <dons> foxy, you want a heterogenous map?
17:55:31 <lambdabot> Unknown command, try @listcommands.
17:55:33 <mwc> Igloo: I'd hope it would be nearly identical... where are you?
17:56:03 <Igloo> Oxford, UK
17:56:23 <dons> foxy, you can in fact use Typeable (see the hs-plugins paper -- needs rank-N types) but there's probably easier ways to do this with HList perhaps.
17:56:24 <Igloo> But I suspects llambdabot is in a more built up area. Basing this on very little knowledge, you understand.
17:56:48 <dons> he lives on the 5th floor of a tall building :)
17:57:02 <dons> on a hill. he has an excellent view, in fact.
17:57:16 <mwc> dons: ahaha! He's in a lower gravity field than at ground level
17:57:21 <Igloo> Ah, his is probably lower then
17:57:24 <mwc> time is in fact slower for him relative to us
17:57:26 <dons> true.
17:57:28 <Gahhh> what's the elevation of the city
17:57:38 <mwc> Gahhh: don't go brining science into this
17:57:49 <Gahhh> d'oh
17:58:12 <Igloo> So, if time is slower for him than us than that explains it, right? (ignoring the fact dons is in the same place  :-)  )
17:58:16 <dons> now why doesn't the bureau of meterology predict the local gravitational field, along with the rain and humidity??
17:58:46 <Gahhh> dons: it has to be *predicted* ?
17:59:01 <Gahhh> people make plans on possible values of the field ???
17:59:24 <dons> ah, dons isn't in the same place. lambdabot lives on dons' work desk about 5 kms from where I am now.
17:59:36 <mwc> Gahhh: yeah, it's nice to know how many Joules I'm gonna burn climbing stairs.
17:59:42 <dons> Gahhh, well, I could factor it into lambdabot's @seen code then..
18:00:03 <dons> that's good too, mwc.
18:01:34 <Gahhh> I went to Toys'R'Us to buy a Mr Potato Head Darth Tater, they were all out. dang.
18:02:02 <dbremner> Gahhh - I saw Episode III on Thursday.
18:02:23 <Gahhh> dbremner: Cool. Did you like it ?
18:02:41 <dbremner> Gahhh - It was much better than I expected it to be.
18:02:48 <Gahhh> whoa
18:02:52 <dbremner> Gahhh - I'd rate it a 6.5 or so.
18:03:00 <yosemite> I read the comic adaptation, I hope the movie is better
18:03:03 <Gahhh> big step up for Lucas heh
18:03:08 <dbremner> Gahhh - although I'm something of a pessismist, so bear that in mind. ;-)
18:03:33 <Gahhh> dbremner: I don't like Star Wars much. I have left Episode 1 after 30 mins and I havent seen E2
18:04:19 <Gahhh> I just love the Darth Tater tho
18:04:25 <dbremner> Gahhh - episodes 1 and 2 were disappointing. I had low expectations for this one, so I wasn't disappointed.
18:05:15 <Gahhh> well, was it worth your money ? it's all good then.
18:06:14 <dbremner> Gahhh - my dad invited me, so I didn't pay anything.
18:18:09 <mwc> Gahhh: you've actually LEFT a movie?
18:18:43 <mwc> Seems like a waste of money to me unless it's really horribly offensively ridiculously awful
18:19:11 <dbremner> mwc - it's a sunk cost.
18:19:41 <mwc> I don't you, I payed for the movie, I'm gonna watch it
18:19:53 <mwc> Ep 1 was bad (too much Annakin, Too much Jar Jar)
18:20:05 <mwc> Ep 2 was bad but entertaining in a flashy-light sort of way
18:20:47 <MachinShin> entertaining? by what definition?
18:21:02 <MachinShin> it's not worth paying for huh? waht about worth downloading? :)
18:22:00 <mwc> MachinShin: entertaining in the sense that I can watch it once without being constantly bored and checking my watch
18:22:11 <MachinShin> lol
18:22:40 <mwc> the only movie I can think of that I would have walked out early on is the remake of the Manchurian Candidate
18:22:55 <mwc> Unfortuneatly I was there with friends
18:23:39 <mwc> God damn that movie was hilariously bad, I actually was starting at my watch the whole movie
18:24:10 <dbremner> mwc - I've seen the original, but my spider sense told me not to see the remake.
18:25:31 <mwc> the orginal is pure Kubric genius.
18:25:44 <mwc> The remake was just slow-slow-slow
18:26:08 <mwc> The pace was so slow you couldn't get into the story. No suspence
18:28:07 <mwc> It was kind of like masturbating at one stroke/minute
18:32:03 <dbremner> mwc - some movies are so bad that it can be quite entertaining to mock them.
18:32:45 <mwc> dbremner: this wasn't. If I was within walking distance of home, I would've left
18:33:05 <foxy_> @docs addrToHValue#
18:33:06 <lambdabot> addrToHValue# not available
18:33:59 <foxy_> where are the hiearchical libraries in the ghc source tree?
18:34:31 <dbremner> mwc - She ne yu chao comes to mind. http://www.imdb.com/title/tt0076698/?fr=c2l0ZT1kZnx0dD1vbnxmYj11fHBuPTB8cT1uZXcgZ3VpbmVhfG14PTIwfGxtPTUwMHxodG1sPTE_;fc=1;ft=20;fm=1#comment
18:38:21 <mwc> heh
18:44:34 <dons> $fptools/libraries/base/
18:57:11 <foxy__> dons, I'm looking for addrToHValue# from Load.hs which says it's from GHC.Exts, but I can't find it in the source
18:58:34 <foxy__> dons: I'm trying to figure out how you are able to deal with polymorphic functions in hs-libs.  I would like to implement a symbol table (a map from identifier to function) where the function type is arbitrary
19:09:29 <dons> this is isomorphic to the (polymorphic) heterogenous list problem. have a google for heterogenous lists, and I'll hack up a couple of simple examples
19:09:55 <dons> addrToHValue# is a ghc primop
19:10:10 <dons> you can find its defn in fptools/ghc/compiler/prelude/primmops.txt.pp
19:10:21 <dons> primop   AddrToHValueOp "addrToHValue#" GenPrimOp
19:10:22 <dons>    Addr# -> (# a #)
19:13:29 <dons> foxy__: have a look at Strongly typed heterogeneous collections Oleg Kiselyov, Ralf L"ammel and Keean Schupke.
19:13:52 <dons> they discuss a number of the approaches to heterogeneous collections
19:14:36 <dons> also, Type-safe cast: (functional pearl). Stephanie Weirich. ACM SIGPLAN Notices, v.35 n.9, p.58-67, Sept. 2000. discusses type-safe heterogeneous symbol tables
19:14:44 <dons> (which I think is what you want?)
19:16:11 <dons> it seems to me you could do it with a list of existentials, like in the lambdabot MODULE type. Typeable and rank-N types would also work (though it's hacky) -- this is described in the hs-plugins paper. HList probably works (that Oleg and Ralf's paper)
19:16:57 <dons> there's a bibliography of approaches here: http://www.cse.unsw.edu.au/~dons/safe.html
19:17:09 <dons> that  I collected when implementing hs-plugins
20:05:13 <clausen> is this a good channel to talk about modal logic?
20:05:18 <clausen> (any better suggestions?)
20:05:30 <fraxtal> #math-st on efnet might be able to help
20:05:33 <fraxtal> if someone is around
20:05:42 <clausen> what's -st?
20:05:57 <fraxtal> set theory
20:06:29 <clausen> thanks
20:07:08 <clausen> I would like to know if there is a sound+complete axiomitization of the "until" modal operator
20:07:39 <fraxtal> Someone should be able to help you when they come on
20:07:52 * mwc grumbles about pure mathematicians wanking around and goes back to applied math
20:10:32 * SamB throws the incompleteness theorem into the works
20:11:03 * mwc goes to work on something practical and lets the pure math boys brawl in peace.
20:11:32 <clausen> SamB: does that apply even without Box/Diamond/Circle?
20:11:43 <clausen> (Always/Sometimes/Next time)
20:11:48 <mwc> Not that I think pure math is bad or anything, but our departments fued over here
20:13:25 <SamB> clausen: I don't know what those things are, but I'm guessing that it applies to anything really usefull ;-)
20:13:39 <SamB> except inconsistant things, of course
20:13:45 <clausen> SamB: are you talking about godel's incompleteness theorem?
20:13:53 <SamB> yes, that one!
20:13:54 <clausen> SamB: I'm only doing modal propositional logic
20:14:05 <clausen> SamB: so, if you're careful, there is hope!
20:14:21 <SamB> clausen: is it even usefull?
20:14:30 <clausen> yep!
20:14:36 <clausen> depends what you want with it :)
20:14:44 <clausen> I'm using it to analyse cryptography
20:14:53 <clausen> ("who knows what, when?")
20:16:09 <clausen> you can say things like "Alice knows that Bob doesn't know it is sunny"
20:16:18 <clausen> K_A \neg K_B sunny
20:19:00 <Gahhh> looks like predicate logic. how does it differ ?
20:20:35 <Gahhh> hmm it has wild-ass stuff like "possible", "necessary", etc.
20:20:38 <Gahhh> interesting
20:20:48 <fraxtal> damn
20:20:53 <fraxtal> sounds cool
20:21:22 <fraxtal> clausen: There are some people in that channel that are really into ZF-set theory.
20:21:45 <clausen> Gahhh: there are no predicates :)
20:21:59 <clausen> Gahhh: a good way to learn modal logic is via Kripke semantics
20:22:01 <mwc> fraxtal: like Cale, and Cale, and who else?
20:22:12 <fraxtal> cale isn't there
20:22:17 <Gahhh> mwc: in "that" channel he said
20:22:18 <clausen> you have some possible worlds
20:22:29 <mwc> Oh, I read "this" channel
20:22:31 <clausen> and you define some propositions to be true in some of the worlds, and not in others
20:22:57 <Gahhh> clausen: that is common in propositional logic.
20:23:02 <clausen> you define what worlds Alice can distinguish between...
20:23:20 <clausen> and can construct Alice's knowledge operator:
20:23:54 <Cale> hm?
20:23:54 <Gahhh> what is Alice referred to as ? entity ?
20:23:58 <clausen> Alice knows P if for every world that Alice thinks is equivalent to the "real one", P is true
20:24:05 <Cale> who said my name? ...
20:24:07 <clausen> Gahhh: a relation over possible worlds
20:24:13 <Cale> mwc?
20:24:29 <Gahhh> who dareth wake up Cale !
20:24:31 <mwc> Cale: mea culpa
20:24:47 <Cale> no problem, what's up?
20:25:23 <clausen> Cale: I asked about modal logic
20:25:29 <mwc> I listed you as both members of the channel who I know were into ZF set theory
20:25:32 <clausen> Cale: your name was somehow suggested as someone who might know...
20:26:24 <clausen> Gahhh: (usually an equivalence relation)
20:26:28 <Cale> I don't know much about modal logic, I know some things about ZF/ZFC set theory.
20:26:43 <Cale> (mostly from using it)
20:26:52 <clausen> Gahhh: if two worlds W and V are indistinguishable to Alice, then (W, V) is in the relation...
20:27:49 <Gahhh> clausen: it certainly looks useful.
20:28:12 * Gahhh can think of endless marketing ploys and hostile takeover scenarios using modal logic...
20:28:28 <clausen> Gahhh: I can recommend "Reasoning About Knowledge", by Fagin, Halpern, Moses and Vardi
20:28:39 <clausen> Gahhh: yep, I'm trying to combine game theory and cryptography
20:28:47 <clausen> Gahhh: to design cryptographic economic/social institutions
20:29:07 <Gahhh> clausen: I'll hopefully get to it once I am finished with first order logic. I am at completeness and soundness right now.
20:36:29 <dbremner> clausen - have you read Assassination Politics?
20:37:54 <clausen> dbremner: no
20:39:03 <dbremner> clausen - it's a paper written by a Libertarian that combines public key crypto and digital cash. IIRC, the author has been jailed several times.
20:39:24 <Gahhh> for the paper ?
20:40:24 <clausen> dbremner: I am interested in using the tools of economics to understand what differences crypto might make to institutions
20:41:15 <dbremner> Gahhh - the paper was used by the prosecution.
20:41:50 <Gahhh> dbremner: is this it ? http://www.outpost-of-freedom.com/jimbellap.htm
20:42:52 <clausen> dbremner: I guess he is proposing a rather perverse institution
20:43:07 <dbremner> Gahhh - it's all over the net. It's sort of a cause celebre for some people.
20:44:20 <Gahhh> "Thought Provoking"
20:44:23 <Gahhh> "Riveting"
20:44:31 <Gahhh> "4 stars -- The Miami Herald"
20:45:05 <Gahhh> yeah it starts out pretty interesting
20:51:53 <Gahhh> Blah. He has a rather big assumption. He thinks that anonymously receiving money equals anonymously having money. Even if you can buy things anonymously, you cannot own them anonymously (your neighbors know about your mercedes, etc.)
20:52:13 <clausen> it looks like complete BS to me
20:53:07 <clausen> tautologico: are you into modal logic?
20:53:18 <clausen> (with that name, it looks like you might like some form of logic!)
20:53:35 <Gahhh> clausen: for some reason, that looked to me like "a/s/l" for logicians...
20:54:11 <tautologico> I'm into logic
20:54:53 <clausen> tautologico: any flavour in particular? :)
20:55:52 <tautologico> right now linear logic :)
21:15:03 <dons> @ghc
21:15:05 <lambdabot>  Illegal overloaded type signature(s)
21:15:16 <dons> @ghc
21:15:17 <lambdabot>  panic! (the `impossible' happened, GHC version 6.4)
21:15:29 <dons> that's my favourite
21:30:00 <mwc> Hmm, hydrairc... worth comparing to irssi?
21:30:36 <mwc> ugh, windiows.
23:17:38 <musasabi> morning
