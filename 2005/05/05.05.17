00:50:48 <boegel> @seen shapr
00:50:50 <lambdabot> I saw shapr leaving #haskell 8 days, 15 hours, 50 minutes and 35
00:50:50 <lambdabot> seconds ago.
00:50:54 <boegel> omg :)
01:19:22 <boegel> hey Itkovian
01:20:09 <Itkovian> Boegel.
01:20:16 * Itkovian is sick at home
01:21:17 * boegel gives Itkovian a tuddekiss
01:21:39 <boegel> or something like that :)
01:22:05 <boegel> Lemmih: what's the name of that cookie again?
01:22:43 <Itkovian> a what?
01:22:48 <Itkovian> eew ;-)
01:23:00 <boegel> Itkovian: it's some kind of cookie, it helps !
01:23:19 <lispy> boegel: so now you are spying on him?
01:23:27 <lispy> Itkovian: reject the cookie!
01:23:42 * lispy runs from internet security
01:23:55 * lispy slams into a wall.
01:24:05 <lispy> ah, i can't get out!
01:24:19 * lispy panics and starts running again, into another wall
01:24:31 <lispy> *pant* *pant* Ahhh!!!
01:24:44 <kaol> @moo
01:24:46 <lambdabot>     /-------  (__)
01:24:46 <lambdabot>    / |     || (oo)
01:24:46 <lambdabot>   *  ||----|---\/
01:24:46 <lambdabot>      ^^    ^
01:24:46 <lambdabot> This cow belonged to
01:24:47 <lambdabot> the Headless Horseman
01:24:51 <boegel> lispy: no, I mean a _real_ cookie
01:25:53 <lispy> *phew* cuz i was worried for a second
01:25:57 <lispy> and that cow is just creepy
01:26:14 <lispy> it's staring right at me
01:26:32 <boegel> lispy: at me too !
01:26:43 <lispy> see! see what i mean! it's creepy!
01:26:56 <lispy> @quote
01:26:56 <lambdabot> dons says: I don't mind autoconf, except for the fact that it's
01:26:56 <lambdabot> stupid and ugly
01:27:08 * lispy huggles lambdabot 
01:27:17 <lispy> @quote
01:27:18 <lambdabot> jlouis says: Q: When does one know he has programmed too much
01:27:18 <lambdabot> Haskell? A: When he uses == and /= in everyday IRC chat or when he
01:27:18 <lambdabot> tries to fix a relationship by passing himself as a continuation
01:27:36 <lispy> heh
01:29:20 <ozone> @ghc
01:29:22 <lambdabot>  Type signature given for an expression
01:30:39 <lispy> what is @ghc?
01:30:43 <lispy> @ghc
01:30:43 <lambdabot>  Implicit-parameter bindings illegal in a parallel list comprehension
01:30:51 <lispy> random errors?
01:31:17 <lispy> @ghc
01:31:18 <lambdabot>  Duplicate instance declarations
01:31:23 <delYsid> Does anyone here know if Haskore has been ported to ghc6?
01:31:24 <lispy> weirdness
01:31:32 <lispy> @commands
01:31:33 <lambdabot> Unknown command, try @listcommands.
01:31:39 <lispy> @listcommands
01:31:40 <lambdabot> all-dicts arr babel define definitions devils dice dict dict-help
01:31:40 <lambdabot> docs dummy easton echo elements eurohaskell eval fact fact-cons fact-
01:31:40 <lambdabot> delete fact-set fact-snoc fact-update foldoc fortune gazetteer get-
01:31:40 <lambdabot> definition ghc google help hitchcock index jargon karma karma+ karma-
01:31:40 <lambdabot> kind learn libsrc listchans listcommands listmodules lojban moo more
01:31:41 <lambdabot> paste pl pl-resume plugs pointless prelude quote remember resume
01:31:43 <lambdabot> seen spell state timein todo todo-add topic-cons topic-init topic-
01:31:45 <lambdabot> snoc topic-tail topic-tell type uptime vera version vixen web1913
01:31:47 <lambdabot> wiki wikipedia wn world02 yow
01:32:03 <lispy> @todo
01:32:04 <lambdabot> 0. dons: Release lambdabot 3.0
01:32:04 <lambdabot> 1. SamB: A way to get multiple results from a google search
01:32:04 <lambdabot> 2. SamB: @get-shapr summons shapr instantly
01:32:04 <lambdabot> 3. SamB: bare @part either gives error message or parts the channel
01:32:04 <lambdabot> the command was given on
01:32:04 <lambdabot> 4. SamB: stop mangling long urls
01:32:06 <lambdabot> 5. dons: improve formatting of @dict
01:32:08 <lambdabot> 6. SamB: @karma+ should report total karma
01:32:10 <lambdabot> 7. x3n0n: @pl: don't use liftM2 for S'
01:32:21 <lispy> heh, #2 rocks
01:32:51 <lispy> @state
01:33:04 <lispy> i should probably be playing with lambdabot in a privmsg
01:34:21 <lispy> @dice
01:34:21 <lambdabot> "dice" (line 1, column 1):
01:34:21 <lambdabot> unexpected end of input
01:34:21 <lambdabot> expecting digit
01:34:29 <lispy> does that mean it's broken?
01:34:33 <SM_ax> @version
01:34:34 <lambdabot> lambdabot 2p463, GHC 6.4 (OpenBSD i386)
01:34:34 <lambdabot> darcs get http://www.cse.unsw.edu.au/~dons/lambdabot
01:45:19 <dons> not broke.
01:45:24 <dons> @help dice
01:45:24 <lambdabot>  @dice <expr>. Throw dice. <expr> of the form 3d6+2.
01:45:31 <dons> @dice 3d6+2
01:45:32 <lambdabot> 3d6+2 => 15
01:54:20 <wilx> Whee, watching this makes me want to play NWN again :/
02:02:45 <ozone> @dice 69d69
02:02:46 <lambdabot> 69d69 => 2593
02:02:50 <ozone> schmexcellent
02:03:39 <musasabi> Why is (<-) not allowed as a function name?
02:04:05 <musasabi> but e.g. (<-:) is..
02:04:38 <wilx> Because <- is used in "do" notation?
02:10:20 * musasabi feels quite stupid - that is what one gets for not drinking enough coffee in the morning.
02:15:22 <tromp> @dice 100d6
02:15:23 <lambdabot> 100d6 => 316
02:15:37 <tromp> @dice 100d6
02:15:39 <lambdabot> 100d6 => 335
02:15:46 <tromp> @dice 100d6
02:15:47 <lambdabot> 100d6 => 378
02:26:06 <wilx> @dice 1d10
02:26:07 <lambdabot> 1d10 => 3
02:26:08 <wilx> @dice 2d10
02:26:09 <lambdabot> 2d10 => 11
02:27:12 <kaol> @yow
02:27:14 <lambdabot> I'm not available for comment..
02:27:30 <kaol> @vixen you suck
02:27:32 <lambdabot> Do you think you would pass a Turing test?  I have.
02:45:08 <blackdog> kaol: you leave my girl alone.
02:45:49 <blackdog> is this the appropriate forum to complain about Big Brother eating into Official Simpsons Time? Probably not, but I'm going to anyway.
02:46:49 <kaol> @vixen sorry
02:46:51 <lambdabot> it's okay, i forgive you
02:47:01 <blackdog> @vixen kiss and make up, hm?
02:47:03 <lambdabot> are you a good kisser?
02:47:23 <blackdog> kaol: ok, i'm done. hacking anything interesting?
02:47:59 <kaol> I'm coding C++ right now :-( (stupid university project)
02:49:01 <blackdog> never quite saw the point of C++... python + C or Haskell + C or ... well, almost any HLL + C seems a better idea to me.
02:49:57 <blackdog> oh, also: Kylie Minogue's breast cancer was the top news story on australian television. mainstream media is the suck.
02:49:59 <Oejet> kaol: Would you rather have made it in Java?
02:50:26 <Oejet> blackdog: What time is it in AU now?
02:50:36 <blackdog> Oejet: there are reasons to prefer Java, sucky as it is.
02:50:40 <blackdog> almost 8:00.
02:51:01 <blackdog> uh, 1600 hours, sah.
02:51:15 <blackdog> ah, bugger. 2000 hours, i mean
02:51:20 <Oejet> Ok, make up your mind. :-P
02:51:59 <Oejet> And May 17 I presume.
02:52:21 <blackdog> cut me some slack, i've been customising plone installs, changing passwords and talking to users all day. Not like you clever chaps pondering monad transformers in zenlike calm.
02:52:30 <blackdog> yeah, may 17.
02:52:55 * Oejet gives blackdog some slack.
02:53:11 <blackdog> ooh, cheers. that'll come in useful.
02:53:17 <Oejet> Slack variables that is.
02:53:33 <blackdog> ... is what now?
02:53:37 <kaol> C++ fights against me about as much as Java would, but with C++ I actually have a possibility of winning. With Java, my defeat would be certain.
02:54:10 <Oejet> kaol: I seem to have the same experience as you then. :-)
02:54:52 <blackdog> i suppose i like the fact that it's possible to cheat with Java - I tend to use Pizza, which compiles to java source and lets you use most of your normal FP patterns
02:55:30 <blackdog> this is one of the things i _love_ about web programming, though - on the internet, nobody knows you're a haskell/ruby/python programmer. ;)
02:56:12 <Oejet> Uf, but what if ones censor is known for reading the source very thoroughly?
02:56:25 <blackdog> *grin* in that case, you're fscked.
02:56:37 <Oejet> I thought so. :-)
02:57:10 <mflux> oejet, you place the secret code after the margin of 80 characters, and discard the java-code in makefiles!
02:57:58 <blackdog> seriously, you could almost get away with it. the code is quite readable: there are just a few extra files which turn closures into some weird anonymous class stuff.
02:58:18 <blackdog> perhaps if you renamed 'em to .secretanonymousclass.java
02:58:19 <blackdog> :)
02:58:23 <mflux> but, no tail recursion?
02:58:40 <blackdog> don't think so.
02:59:13 <blackdog> i'm not suggesting it's the cat's pyjamas of elegant programming. it's more like traversing the Java swamp with FP gumboots.
02:59:49 * blackdog pretends he's not trying to get onto the quotes page
03:00:08 <mflux> how good is pizza anyway? I could propably have a chance at using that too (instead of java)
03:00:32 <Oejet> "The Pizza compiler's daughter (the GJ compiler) made it! Its Generics are under consideration to become part of the official Sun Microsystem's Java language specification."
03:00:43 <blackdog> I found it pretty congenial. I don't know if it's still being actively developed, and i don't have an externally imposed java constraint any more, so i don't care. :)
03:00:51 <Oejet> (January 3, 2002)
03:01:46 <blackdog> don't think GJ has first class functions, though, does it? Or pattern matching?
03:02:47 <blackdog> oh, awesome. They're showing 'Reefer Madness'. This almost makes up for Big Brother.
03:08:58 <earthy> mkay. that was weird.
03:09:29 <earthy> but, then again, I'm from the country where Big Brother was invented and using marihuana (as we spell it :P) is legal
03:10:37 <mflux> actually pizza has tail recursion too, it only is slower and needs to be explicitly requested
03:10:49 <mflux> all in all it appears to miss only type inference ;)
03:16:02 <blackdog> earthy: that might explain it. perhaps vacuous, self-obsessed morons are more bearable when you're stoned.
03:18:16 <basti_> I see i'm just in time -g-
03:18:28 <basti_> uhm but... does anyone know how lazy wxhaskell ist?
03:18:28 <basti_> -t
03:19:13 <basti_> could i make some sort of a dynamic display that's so lazy that only the part i see is repainted constantly (while the other parts may change unseen)
03:19:26 <basti_> uhm repainted = evaluated...
03:19:50 <Oejet> Seems unlikely.
03:20:07 <basti_> maybe i can make up the display of several tiles then.
03:20:25 <basti_> this should be possible in any case shouldnt it?
03:21:04 <Oejet> How do I convert from String to [Word8] and back again?
03:21:05 <blackdog> mflux: there was a weirdness with arrays. I couldn't find a way of converting a list of As to an array of them in a typesafe way.
03:21:42 <basti_> Oejet: "ord" is Char -> Int, and Int->Word8 without further notice i think?
03:21:49 <basti_> "chr" is back then
03:21:51 <basti_> both in Data.Char
03:23:42 <basti_> @pl \x y -> map (map (\a->(a*)) x) y
03:23:44 <lambdabot> map . map (*)
03:23:48 <basti_> wow.
03:24:23 <basti_> uhm
03:24:47 <Oejet> basti_: Thanks.
03:24:54 <basti_> Oejet: :)
03:25:55 <basti_> @pl \x y -> map (zipWith (*) (map (*) x)) (tails y)
03:25:56 <lambdabot> (. tails) . map . zipWith (*) . map (*)
03:27:59 <Lor> @pl \x y z -> (x z) (y z)
03:27:59 <lambdabot> ap
03:28:08 <basti_> o0
03:28:46 <basti_> @pl \x y -> map (\a->sum $ zipWith (*) x a) (tails y)
03:28:48 <lambdabot> (. tails) . map . (sum .) . zipWith (*)
03:28:57 <basti_> obfuscation by pointless
03:30:45 <basti_> hmm has the stack overflow problem though
03:34:49 <mflux> I really wished I could intuitively read that
03:34:56 <mflux> ;)
03:35:23 <basti_> lol
03:35:26 <basti_> i do so too...
03:37:18 <blackdog> perl golf has nothing on @pl. :)
03:38:10 <basti_> perl golf?
03:44:04 <blackdog> basti_: google is your friend. :) perlgolf.sf.net
03:46:01 <basti_> bizarre!
03:47:20 <blackdog> is it wrong that my first thought is to write a whole bunch of meaning-preserving transformations, then use search techniques for optimising?
03:47:46 <blackdog> ... given a coherent semantic model for perl, it could work. </bizarrely optimistic>
03:48:41 <basti_> no its not wrong
03:48:50 <basti_> just terribly complex
03:49:01 <basti_> and the search space is vast isnt it?
03:49:37 <blackdog> of course. but you wouldn't do it exhaustively, any more than you'd try to do TSP exhaustively.
03:50:02 <basti_> yes.
03:50:10 <basti_> of course not
03:50:23 <basti_> but then you'd need a meaningful heuristic...
03:50:31 <basti_> hmm
04:07:35 <blackdog> basti_: program length would be a decent one, i'd imagine...? :)
04:09:28 * blackdog is totally overdosing on punctuation tonight.
04:11:39 * dons writes a darcs wrapper to send mail to a list of recipients
04:12:01 <dons> chakcvs is converting to chakdarcs, blackdog :)
04:14:05 <blackdog> Yep, I saw. Brave new world.
04:14:27 <blackdog> Does this mean chakdarcs will become public?
04:14:42 <dons> some of it now is: yi, lambdabot, hs-plugins and stgjvm. more to come.
04:14:47 <dons> also a web interface.
04:15:59 <Igloo> dons: web interface as in the one that comes with darcs?
04:17:48 <dons> yep. now, Igloo: i'm writing a darcs wrapper to, on a push over ssh, also send the patch to a list of subscribers to a repo
04:18:06 <dons> is there a well known tool to do this?
04:18:50 <Igloo> Not for push, I don't think
04:19:07 <Igloo> Triggers for that sort of thing are planned, but I don't think there is one for that yet
04:19:15 <dons> ok.
04:19:58 <dons> I think I can whip it up in about 50 lines of .hs, I'll post it to the list when done. it's a rewrite and extension of the perl script posted here: http://www.abridgegame.org/pipermail/darcs-users/2004-December/004868.html
05:43:30 <Igloo> JaffaCake: Are you here?
05:43:43 <JaffaCake> hello :)
05:44:04 <Igloo> I seem to have multiple lvl314s. Is that meant to happen?
05:44:42 <JaffaCake> it's a bit strange, but they might have different uniques
05:45:35 <Igloo> Hmm, OK
05:45:36 <JaffaCake> that's unfortunate, because they're all getting the same label under profiling
05:46:12 <JaffaCake> could you put the -ddump-stg up somewhere so I can have a look?
05:47:19 <Igloo> http://urchin.earth.li/~ian/space2/out.txt has -ddump-simpl -ddump-stg
05:47:51 <Igloo> (and the 314 didn't change)
05:48:43 <JaffaCake> that's not too clever - the closure description should really include the unique too
05:48:58 <JaffaCake> do you have a local build if I send you a patch?
05:49:24 <Igloo> Yup
05:49:28 <JaffaCake> righto
05:58:18 <JaffaCake> Igloo: is your local build STABLE or HEAD?
05:59:12 <Igloo> I've got a 6.4 and a not-too-old CVS built
05:59:25 <Igloo> Err, CVS HEAD that is
05:59:31 <JaffaCake> right
06:46:14 <magr> Anybody here who has compiled wxHaskell 0.9.4 on a Debian/unstable box using GHC 6.2.2?
06:46:24 <magr> I keep getting weird linking errors
06:52:00 <magr> don't bother -- now it works (though I don't know why)
06:54:40 * Lemmih has better experiences with GTK+ than wxWidgets.
06:54:58 <luqui> hey guys, how do I build ghc from cvs?
06:55:42 <Lemmih> @google ghc cvs cheatsheet
06:55:44 <lambdabot> http://www.haskell.org/ghc/docs/latest/html/building/sec-cvs.
06:55:44 <lambdabot> html
06:56:23 <luqui> not how do I check it out?
06:56:28 <luqui> once I have it, how do I build it
06:56:30 <luqui> there's no autogen.sh
06:56:50 <Lemmih> autoreconf && ./configure && make
06:57:34 <luqui> mk/boilerplate.mk:15: ../mk/boilerplate.mk: No such file or directory
06:57:51 <Lemmih> Why are you building GHC from cvs?
06:58:07 <luqui> because apparently they recently fixed an amd64 bug
06:58:16 <Igloo> Did you follow the instructions for checking it out?
06:58:19 <luqui> the binaries just yell at me
06:58:32 <luqui> I just checked out ghc
06:58:39 <luqui> I couldn't really follow the cheat sheet
06:58:41 <luqui> I'll look again
06:58:51 <luqui> (I thought the fptools stuff was just an example)
06:58:58 <Oejet> I've uploaded my upgraded binding, anyone care to test it.  Instructions are in http://www.student.dtu.dk/~s022018/Temporary/ffitutorial.ps
07:00:20 <JaffaCake> Igloo: cvs update your 6.4 tree
07:00:45 <JaffaCake> then rebuild PatchRead, you should get more useful info
07:01:14 <Igloo> Do you mean CVS update my HEAD tree?
07:01:26 <Igloo> My 6.4 tree is from a tarball
07:01:31 <JaffaCake> you could, but I've also merged the patches onto 6.4
07:01:33 <luqui> okay, I think I've got it now
07:01:39 <JaffaCake> ah ok, then update your HEAD
07:01:47 <luqui> it might be worthwhile taking out that NB note.  I think that's what confused me
07:02:04 <luqui> I didn't realize all the boxed things (except for the thing in the note) were supposed to be run
07:02:10 <JaffaCake> luqui: which NB note?
07:02:11 <luqui> anyway, you guys probably don't maintain that
07:02:14 <luqui> so nevermind
07:02:36 <luqui> in the cvs cheatsheet section 2.2
07:03:04 <JaffaCake> thanks
07:06:46 <luqui> oh jeez... how do I bootstrap this thing
07:07:48 <xerox> @get-definition T
07:07:50 <lambdabot> T not defined
07:07:51 <xerox> @get-definition Y
07:07:52 <lambdabot> Y = \f.U(\g.f(U g))
07:18:42 <musasabi> What is the correct syntax to say "class a b c | (a,b) -> c" ?
07:19:22 <kosmikus> class a b c | a b -> c
07:19:24 <kosmikus> afaik
07:19:38 <kosmikus> well, a class name is missing
07:19:49 <musasabi> That works :-)
07:25:05 <Igloo> magr: Re yoru mail, do you mean the Debian ghc packages installed /usr/lib/ghc-6.2.2/package.conf non-world-readable?
07:25:44 <magr> Igloo: yes
07:26:16 <Igloo> What arch?
07:26:22 <magr> Igloo: rather, no.  Sorry, misunderstood.
07:26:36 <Igloo> Ah; what then?
07:26:43 <CosmicRay> Igloo: did the hppa guys ever get back to you and make both of their boxen act the same way?
07:26:44 <magr> the Debian packages installed all right, but the wxHaskell installer left the permissions wrong
07:27:17 <Igloo> CosmicRay: Not yet. I'm not going to prod too fiercely as this isn't release-related
07:27:28 <magr> but since wxHaskell `make install' uses ghc-pkg, it's strange
07:27:29 <CosmicRay> Igloo: true
07:27:52 <Igloo> Ah, OK
07:29:49 <magr> IIRC, I had a similar problem with package.conf when installing another Haskell library, but unfortunately I can't remember which :(
08:02:58 <JaffaCake> Igloo: sorry, some temporary breakage in the HEAD, you might need to update
08:04:37 <Igloo> OK, ta
08:05:17 * Igloo has been doing a clean build while I get on with other things, so I'll update and restart when it dies
08:07:19 <ski> hm, given "class Foo a b | a -> b", "instance Foo Int [a]" is then illegal, yes ?
08:13:03 <Igloo> CosmicRay: Ah, looks like it's just been done. Now just the fun of trying to work out what's happening  :-)
08:13:18 <CosmicRay> Igloo: good luck :-)
08:13:45 <CosmicRay> in normal circumstances, these things are pretty easy to track down if you have a core file
08:13:52 <CosmicRay> with ghc, I suspect that all bets are off
08:15:12 <TheHunter> ski, of course.
08:16:16 <ski> (TheHunter : i was thinking a little along existential quantification .., well, no matter)
08:20:58 <basti_> back
08:21:27 <kaol> @moo
08:21:29 <lambdabot>                  \_|_/
08:21:29 <lambdabot>                   (oo)
08:21:29 <lambdabot>            /-------\/
08:21:29 <lambdabot>           / |     ||
08:21:29 <lambdabot>          *  ||----||
08:21:30 <lambdabot>             ^^    ^^
08:21:32 <lambdabot> Cow visiting the Statue of Liberty
08:25:45 <Oejet> @yow
08:25:47 <lambdabot> A wide-eyed, innocent UNICORN, poised delicately in a MEADOW
08:25:47 <lambdabot> filled
08:25:47 <lambdabot> with LILACS, LOLLIPOPS & small CHILDREN at the HUSH of twilight??
08:26:09 <Oejet> @karma+ Oejet
08:26:10 <lambdabot> You can't change your own karma, silly.
08:27:44 <Lemmih> @karma+ Oejet
08:27:46 <lambdabot> Oejet's karma has been incremented
08:28:02 <Igloo> JaffaCake: If I'm getting an unaligned access in stg_gc_ut, does that make the problem obvious to you or should I build a debugging GHC and try to investigate further?
08:28:33 <JaffaCake> on what platform?
08:28:37 <Igloo> HPPA
08:28:43 <JaffaCake> hang on
08:29:32 * Igloo should really link a ghc with debugging in the debs
08:29:59 <Oejet> Lemmih: Thanks.
08:30:18 <JaffaCake> there are some double assignments in stg_gc_ut, it may be that we're not generating code to avoid the misaligment traps
08:30:44 <JaffaCake> could you check the C code generated for that file, it's ghc/rts/HeapStackCheck.cmm
08:31:01 <JaffaCake> I think you can just say 'make HeapStackCheck.hc'
08:35:37 <Igloo> OK, running configure
08:36:16 <Igloo> Shouldn't the same code be generated for all platforms, modulo a few constants for wordsizes etc?
08:46:51 <Igloo> JaffaCake: make HeapStackCheck.hc wants to use ghc-inplace that doesn't exist yet
08:47:26 <JaffaCake> oh, you're bootstrapping from .hc files?
08:47:36 <Igloo> Not deliberately
08:47:43 <JaffaCake> :-/
08:47:47 <Igloo> I might have screwed up the --with-ghc
08:48:11 <Igloo> No, that looks OK (it's a 6.2.2)
08:48:18 <JaffaCake> so how did you build anything, if you don't have ghc-inplace?
08:48:44 <Igloo> OK, 6.4 built successfully with 6.2.2 and made a deb
08:48:49 <Igloo> A library failed to build with that deb
08:48:59 <Igloo> I don't have the 6.4 tree that built successfully
08:49:07 <JaffaCake> ah, the 6.4 compiler crashed?
08:49:33 <Igloo> The 6.4 SIGBUSes in stg_gc_ut, yeah
08:50:18 <Igloo> Should I just run make now and come back to this tomorrow?
08:50:25 <JaffaCake> ok, then we need to get a 6.4 tree build up as far as the RTS
08:50:30 <JaffaCake> yes :)
08:51:58 <Igloo> Rightyho  :-)
09:05:49 <TheHunter> @moo
09:05:51 <lambdabot>                        O O                 O O
09:05:51 <lambdabot>                         \ \               / /
09:05:51 <lambdabot>                          \ \          (__) /
09:05:52 <lambdabot>           (__)            \ \         (xx)/
09:05:54 <lambdabot>           (DD)             \ +--------+\//
09:05:56 <lambdabot>    /-------\/               \|        | /
09:05:58 <lambdabot>   / |     ||                 +--------+
09:05:59 <lambdabot>  *  ||----||
09:06:01 <lambdabot>     ^^    ^^
09:06:03 <lambdabot> Cow fantasizing about "Riding the Mechanical Bull"
09:06:05 <lambdabot>             at Gillies in Texas
09:06:10 <xerox> bwhahahah.
09:06:13 * Oejet ducks in horror
09:06:32 <kaol> @moo
09:06:37 <lambdabot>          (__)   (__)
09:06:39 <lambdabot>          (oo)===(oo)
09:06:41 <lambdabot>   /-------\/     \/-------\
09:06:43 <lambdabot>  / |     ||       ||     | \
09:06:45 <lambdabot> *  ||----||       ||----||  *
09:06:47 <lambdabot>    ^^    ^^       ^^    ^^
09:06:49 <lambdabot>          Siamese cows
09:09:19 <TheHunter> @moo
09:09:21 <lambdabot>             o
09:09:21 <lambdabot>             | [---]
09:09:21 <lambdabot>             |   |
09:09:21 <lambdabot>             |   |                              |------========|
09:09:21 <lambdabot>        /----|---|\                             | **** |=======|
09:09:21 <lambdabot>       /___/___\___\                         o  | **** |=======|
09:09:24 <lambdabot>       |            |                     ___|  |==============|
09:09:25 <lambdabot>       |           |                ___  {(__)} |==============|
09:09:27 <lambdabot>       \-----------/             [](   )={(oo)} |==============|
09:09:29 <lambdabot>        \  \   /  /             /---===--{ \/ } |
09:09:32 <lambdabot>     -----------------         / | NASA  |====  |
09:09:33 <lambdabot>     |               |        *  ||------||-----^
09:09:35 <lambdabot>     -----------------           ||      |      |
09:09:38 <lambdabot>       /    /  \   \             ^^      ^      |
09:09:39 <lambdabot>      /     ----    \
09:09:42 <lambdabot>       ^^         ^^           This cow jumped over the Moon
09:09:50 <Philippa_> @spam
09:09:51 <lambdabot> Unknown command, try @listcommands.
09:09:51 * kaol should stop procrastinating and generating cows
09:09:55 <TFK> That's some broken ASCII art...
09:10:12 <TheHunter> looks alright here
09:10:46 <TheHunter> hmm, the next one is huge, too.
09:10:58 <TheHunter> (i will stop after that)
09:11:00 <TheHunter> @moo
09:11:01 <lambdabot>                 (__)
09:11:01 <lambdabot>                ([][])            "I have this recurring dream
09:11:01 <lambdabot>                __\/_--U              about golden arches."..  (__)
09:11:01 <lambdabot>               /\    \__                                 ^  :..("")
09:11:01 <lambdabot>              /\\\  /  /                         //\  ____\_____\/ //
09:11:01 <lambdabot>             /----^/__/\ /\                     // \\/     \___ / //
09:11:04 <lambdabot>                 \\\____/--\--                 // /-/__________/ //
09:11:06 <lambdabot>                  /======   \/            =======/==============//
09:11:08 <lambdabot>               *_/ /    \   /^              //  /              \\
09:11:09 <lambdabot>                  /      \ ^               //                   \\
09:11:12 <lambdabot>  
09:11:14 <lambdabot>                      Psycowlogist and patient
09:12:06 <qmole> :(
09:12:07 <kaol> @vixen that serves you right
09:12:09 <Gahhh> tee hee
09:12:10 <Oejet> Hm, I suspected that.
09:12:12 <lambdabot> right or wrong, as long as we have a good time
09:12:34 <TheHunter> @uptime
09:12:35 <lambdabot> uptime: 9 days, 3 hours, 58 minutes and 48 seconds
09:12:39 <xerox> :)
09:12:52 <TheHunter> @seen TFK
09:13:12 <TheHunter> (just testing)
09:13:13 <Oejet> He.  Laggy ay?
09:13:15 <TFK> You rang? :-)
09:13:25 <lambdabot> TFK is in #haskell. Last spoke 2 minutes and 58 seconds ago.
09:13:41 <TheHunter> no, i was just testing what the @seen message would look like.
09:13:56 <TheHunter> apparently, lambdabot was away for less than a second, though.
09:14:34 <tvoss> hey guys, are there any standard functions to access a triple in haskell?
09:14:56 <TheHunter> no
09:15:34 <tvoss> TheHunter: And how do I access data in a triple?? **Confused
09:16:09 <TheHunter> patternmatching: middle (_,y,_) = y
09:16:24 <tvoss> TheHunter: thx a lot:-)
09:16:35 <TheHunter> or middle x = y where (_,y,_) = x
09:16:52 <basti_> or ((\(_,x,_) -> x) triple)
09:16:56 <Oejet> @plugs third (2,4,5)
09:16:58 <lambdabot> Variable not in scope: `third'
09:17:22 <xerox> @pl \(_,y,_) -> y
09:17:23 <lambdabot> (line 1, column 6):
09:17:23 <lambdabot> unexpected ","
09:17:23 <lambdabot> expecting letter or digit, operator or ")"
09:17:23 <lambdabot> ambiguous use of a non associative operator
09:17:28 <xerox> :-))
09:17:35 <basti_> uhm
09:17:42 <TheHunter> that's exactly the reason why @pl doesn't support tripels.
09:37:34 <SamB> can I call inlined functions via FFI?
09:38:25 <SamB> I guess it would only work with -fvia-C...
09:41:31 <SyntaxNinja> Lemmih: would you have any problem if someone added module names -> package identifiers to the xml-rpc interface?
09:41:49 <SyntaxNinja> that is, module name lookup
09:42:05 <SamB> hmm, I want to resize my /home filesystem...
09:42:31 <SyntaxNinja> Lemmih: btw, is the entire package description stored in the database?
09:46:29 <SamB> so is it safe to run cfdisk on the drive with /home on it while home is still mounted?
09:49:37 <SamB> I guess I might as well play it safe...
10:00:55 <boegel> hey everyone
10:01:01 <boegel> I have a quick question before I have to go
10:01:20 <boegel> so I have a function f : Int -> Int -> Double, f a b = a / b
10:01:29 <boegel> is there any way I can make this compile ?
10:01:36 <TheHunter> @type fromIntegral
10:01:40 <boegel> I've tried adding a :: Double
10:01:41 <basti_> fromRatio maybe?
10:01:43 <lambdabot> fromIntegral :: forall b a. (Num b, Integral a) => a -> b
10:02:02 <boegel> TheHunter: yeah, I know it works with fromIntegral, but I was wondering if I can do it differently
10:02:03 <basti_> oh yes or convert the numbers before the division
10:02:11 <boegel> because the function I'm using is more complicated
10:02:35 <boegel> is more like f : (Int,Int) -> (Int,Int) -> (Int,Int) -> (Double,Double)
10:02:52 <boegel> so that mean I have to use fromIntegral on all three argument tuples ?
10:04:00 <TheHunter> if you have to do that kind of thing at many places, you might consider using a type class
10:04:21 <TheHunter> class Convert a b {- | a -> b ? -} where convert :: a -> b
10:04:42 <boegel> it's only in 1 function I need it, but I don't like all the fromIntegral's
10:04:51 <TheHunter> and then stuff like instance (Convert a b, Convert a' b') => Convert (a,a') (b,b')
10:05:10 <boegel> well, okay then
10:05:14 <TheHunter> instance (COnvert a b, Convert a' b') => Convert (a' -> b) (b' -> a)
10:05:32 <boegel> I guess I'll keep using fromIntegral , because I think the type-class solution is a bit overkill
10:05:40 <boegel> thanks anyways TheHunter :)
10:06:00 <TheHunter> ok, you can use (Control.Arrow.***) then.
10:06:16 <boegel> I guess Haskell's typesystem is a bit too restrictive here, hence the need of fromIntegral ?
10:06:48 <boegel> s/of/for
10:08:12 <TheHunter> well, |fromIntegral a + fromIntegral b| and |fromIntegral (a + b)| are different.
11:02:57 * SamB finally got around to resizing his /home filesystem to use more of the available diskspace
11:03:58 <SyntaxNinja> SamB: not using that house partition? :)
11:05:21 <SamB> actually, the filesystems on that disk had been copied from another disk. I had to delete a plan9 partition, but I hadn't gotten it to boot right anyhow.
11:11:10 <SamB> configure scripts run a lot faster in Linux than in Cygwin ;-)
11:22:34 <_JusSx_> Philippa_:
11:22:38 <_JusSx_> Philippa_: hi
12:09:03 * theorbtwo can't seem to get the new hat to build.
12:10:23 <theorbtwo> http://irc.csie.org:8888/149
12:22:42 * boegel had another question for TheHunter, but sees he's gone and outta here
12:36:15 * boegel is getting scared, it's so awfully quiet in here...
12:36:17 <boegel> @moo
12:36:18 <lambdabot>               ..---..                             (__)
12:36:18 <lambdabot>              /       \                            (oo)
12:36:18 <lambdabot>              |  RIP  |                     /-------\/
12:36:18 <lambdabot>              |       |                    / |     ||
12:36:18 <lambdabot>              |       |                   *  ||----||
12:36:18 <lambdabot>              |       |                      ^^    ^^
12:36:21 <lambdabot> \\\\\\\\\\\\\\\\\/////////////////
12:36:23 <lambdabot>  
12:36:24 <lambdabot>             Elvis's Cow...      ...Or is it alive and living in tax exile???
12:37:19 <kaol> @yow
12:37:20 <lambdabot> Yow!  Did something bad happen or am I in a drive-in movie??
12:37:40 <kaol> Haskell the Movie. I want to see that.
12:37:45 <boegel> lambdabot senses it too :)
12:42:39 <wilx> The cow is particularly evil with non fixed size font.
12:43:12 <wilx> And the gravestone looks like a phallus.
12:43:13 <wagle> @fix moo
12:43:14 <lambdabot> Unknown command, try @listcommands.
12:43:31 <wagle> 8(
12:44:41 <boegel> wilx: you have a dirty mind
12:45:06 <wagle> boegel: maybe just his screen is dirty
12:45:13 <wilx> Heh.
12:45:29 <wilx> Just the font is not what the ASCII art expects :)
12:48:48 <wilx> http://logout.sh.cvut.cz/~wilx/moo.png
12:49:20 <Lemmih> SyntaxNinja: Yo. I'm back.
12:50:07 <boegel> wilx: well, then it looks even more like a phallus over here, so you really do have a dirty mind
12:50:24 <wilx> Hehe.
12:50:34 <Lemmih> This is one of the few days where I've actually been out socializing.
12:51:31 <wilx> Btw, Elvis's cow, shouldn't that be Elivs' cow or does that rule hold only for plurals?
12:51:41 <wilx> Elvis' even
12:52:06 <boegel> Lemmih: omg, you went outside ?!?
12:52:25 <Lemmih> SyntaxNinja: No problem and yes, it stores the entire package description.
12:52:27 <wilx> And survived.
12:52:30 <wilx> Impressive :)
12:52:58 * boegel kneels for Lemmih his trone
13:00:16 <Lemmih> Heh. There's competition on the automatic-installer market.
13:02:32 <esap> automatic-installer? Is that somehow different from apt-get?
13:02:55 <Igloo> Are some people really suggesting I should spend $50/yr to share my libraries, or am I reading things wrong?
13:03:54 <wilx> ..?
13:03:57 <Lemmih> esap: We need a multi-platform program which can install arbitrary Cabal packages.
13:06:41 <esap> Lemmih: Isn't that just having some perl script that invokes runhaskell on Setup.hs? Or maybe makefiles work?
13:07:39 <Lemmih> esap: It should also figure out dependencies and be secure.
13:09:46 <esap> Lemmih: what do you mean by "secure"?
13:11:06 <Lemmih> Downloading and executing code (possibly as root) is a very bad idea if you don't trust the package owner.
13:12:21 <Lemmih> SyntaxNinja gave a more detailed description in a mail to libraries@
13:12:47 <esap> ok, I'll read that thread.
13:13:15 * esap doesn't read libraries. only haskell and haskell-cafe.
13:17:06 <SyntaxNinja> esap: you're missing out :)
13:17:22 <SyntaxNinja> Igloo: I don't tihnk anyone actually thinks that you should have to do so; is that the cheapest SSL Cert you can get?
13:17:52 <SyntaxNinja> Igloo: I hope ppl don't confuse the hackage plan with alexJ's plan
13:18:21 <Igloo> SyntaxNinja: That's the figure Alex gave isn't it?
13:18:21 <esap> SyntaxNinja: Probably. But I'm also short of time. Maybe I should reorganise my mailing lists and try to focus on things I would actually have time to read :-)
13:18:36 <Lemmih> Anything other than free wouldn't be acceptable.
13:20:21 <SyntaxNinja> Igloo: looks like it.
13:26:48 <musasabi> Having a faster (IORef Int) in the standard libraries would be very nice.
13:29:35 <Philippa_> possibly IORefs for unboxed values
13:36:12 <musasabi> Philippa_: isn't that impossible with the current IORef? (kinds)
13:41:17 <SyntaxNinja> Lemmih: don't worry about competition, people will see "searchpath" and think "classpath" and they'll shudder ;)
13:43:12 <Lemmih> classpath?
13:46:18 <SyntaxNinja> java has this thing called a classpath, which is like a search path for java files
13:46:23 <SyntaxNinja> like $PATH
13:46:31 <SyntaxNinja> but in my experience, it's a pain to work with.
13:46:34 <Lemmih> Oh. (:
13:48:05 <nothingm1ch> has anyone ever had ld trouble when building haddock on OSX 10.3 with ghc 6.4? error is:
13:48:21 <nothingm1ch> ld: Undefined symbols:
13:48:21 <nothingm1ch> ___stginit_ControlziMonadziWriter_
13:48:53 <nothingm1ch> i'm guessing it's mangling a symbol it shouldn't be?
13:49:25 <Lemmih> Control.Monad.Writer has been moved to the mtl package.
13:49:30 <SyntaxNinja> no. probably missing a package it needs. -package mtl
13:50:45 <SyntaxNinja> but I'm surprised by that.
13:50:55 <nothingm1ch> thanks
13:52:23 <SyntaxNinja> Lemmih: btw, I don't think that distributing altered packages is bad; we can just give them different names.
13:52:40 <SyntaxNinja> I don't thinkw e should wait for all upstream depencies to release before we can bootstrap
13:52:42 <nothingm1ch> what an ugly makefile
13:54:41 <Lemmih> Well I think we should.
14:00:23 <SyntaxNinja> Lemmih: why? :)
14:00:57 <Igloo> What's the problem here?
14:01:47 <SyntaxNinja> Igloo: we're about to discuss the pros and cons of waiting for upstream releases of altered packages before unleashing cabal-get on the world
14:01:55 <Lemmih> SyntaxNinja: Because I don't want people using those packages.
14:02:16 <SyntaxNinja> Lemmih: we can hide them and give them new names like "haxml-dontuseme"
14:02:34 <SyntaxNinja> so cabal-get will be the only one using them, and they won't conflict with anyone else's packages.
14:02:57 <SyntaxNinja> once we release cabal-get, I think ppl will start being more responsive about updating releases.
14:03:12 <SyntaxNinja> currently, it can be like pulling teeth.
14:04:37 <Igloo> How about giving patches to the current releases that will yield releaseable packages, and saying you need to release temporary forks in a week (or whatever) if an upstream release can't be done in that time?
14:04:57 <Igloo> So the maintainers have a chance, but there is a deadline so it doesn't drag on forever?
14:05:31 <SyntaxNinja> Igloo: that's a good compromise.
14:06:05 <Igloo> I don't know what the right time balance is; it depends how urgently you want to release
14:06:10 <musasabi> And when the upstream uses a slightly incompatible way to fix the issue?
14:06:36 <SyntaxNinja> Igloo: a week or two I think, and we'll be ready to release. I'd actually like to release a beta sooner.
14:06:47 <SyntaxNinja> musasabi: electrocution
14:06:54 <Igloo> musasabi: They'd also have the week to object to the choice made (I'm assuming these are small changes, so at least easy to review)
14:07:35 <musasabi> Igloo: at least I tend to make sometimes holidays of two weeks without any net (or phone) ;)
14:08:42 <SyntaxNinja> i'ts not like it's a real fork. it's an internally used fork.
14:09:27 <Igloo> musasabi: Ultimately it comes down to "Oh well, these things happen" and you fix it up as best you can  :-þ
14:14:55 <Lemmih> Great then.
14:42:07 <blackdog> Syntax: i know i'm coming in late on this, but an internally used fork sounds extraordinarily painful.
14:44:02 <SyntaxNinja> blackdog: why?
14:49:59 <FrederikEaton> SyntaxNinja: should there be an easy way for modules in a package to access things from the cabal file like version #, name, home page, etc.?
14:50:20 <FrederikEaton> SyntaxNinja: ... for implementing like --help, --version
14:50:49 <SyntaxNinja> FrederikEaton: you can just use readPackageDescription.
14:50:55 <SyntaxNinja> and suck the info out of there.
14:51:11 <FrederikEaton> but the installed program won't have the cabal file available
14:51:23 <SyntaxNinja> oh yeah; duh.
14:51:30 <FrederikEaton> :)
14:51:58 <FrederikEaton> should i use template haskell?
14:52:00 <SyntaxNinja> no, don't kow of a good way offhand
14:52:04 <SyntaxNinja> scary thought
14:52:13 <SyntaxNinja> TH as preprocessor, 'eh :)
14:52:26 <SyntaxNinja> FrederikEaton: if you do that, please post to the libraries mailing list w/ information on how it went.
14:52:50 <SyntaxNinja> althogh i'm not sure waht you have in mind.
14:53:39 <FrederikEaton> how do i evaluate a string in template haskell?
14:54:08 <FrederikEaton> oh wait it will be an object of type PackageDescription
14:55:07 <SamB> hrmm, I wish knuth would have specified some IO hardware and method of booting for MMIX... it is hard to write an OS without a disk drive or a way to start it...
14:55:08 <FrederikEaton> SyntaxNinja: you think it won't work?
14:55:37 <SyntaxNinja> FrederikEaton: I don't have cycles to throw at it right now. but you need to memorize the strings somehow
14:56:41 <FrederikEaton> i thought template haskell worked as a preprocessor
15:07:25 <blackdog> syntaxninja: uh, i'm just being crude.
15:08:04 <FrederikEaton> why isn't ExpQ a Show?
15:08:31 <Igloo> Because it wraps IO
15:09:14 <FrederikEaton> i see
15:10:53 <FrederikEaton> but then i should be able to turn it into an IO String, no?
15:11:09 <Igloo> You can pprint, or probably show, an Exp
15:11:38 <FrederikEaton> yeah Show Exp
15:11:41 <FrederikEaton> thx
15:12:35 <SyntaxNinja> blackdog: ah... yes.
15:27:09 <FrederikEaton> Lift doesn't have very many instances
15:28:24 <FrederikEaton> there's no way to lift arbitrary expressions?
15:34:25 <blackdog> syntaxninja: it's my fault, my mind is perpetually in the gutter. you're just too pure. :)
15:46:15 <SyntaxNinja> <---- purely functional
15:48:35 * boegel goes to bed, g'night everyone
15:49:33 <FrederikEaton> SyntaxNinja: yeah, TH works fine. i have one module with this: infoStr = runIO (readFile "PencilPond.cabal") >>= lift
15:49:50 <FrederikEaton> and then another module with: descr = let pd =  PD.parseDescription $(infoStr) in ...
15:49:59 <FrederikEaton> i think it's important that they be separate modules
15:50:18 <SyntaxNinja> that's pretty sweet, FrederikEaton
15:54:19 <blackdog> <----- purely dysfunctional.
15:54:47 <blackdog> but my girl is purely imperative, so it all balances out.
15:55:38 <Pseudonym> My wife is declarative.
15:55:57 <SyntaxNinja> blackdog: by imperative, do you mean commanding, necessary, or requiring attention?
15:56:33 <blackdog> SyntaxNinja: yes.
15:56:38 <Oejet> And always changing state. :-P
15:57:40 <_metaperl> lol@Oejet
15:58:34 <SyntaxNinja> @yow
15:58:37 <lambdabot> I'm into SOFTWARE!
16:00:38 <Oejet> What do you say about PS3's 1.8 Teraflops?  Sounds like much.
16:04:17 <mwc> Oejet: I think I smell a cheap ass cluster for CFD
16:04:29 <mwc> Too bad it doesn't have any sort of high-power interconnect ability
16:05:02 <reffie> only gigabit ethernet
16:05:26 <mwc> reffie: I was thinking something like an infiniband card or something
16:05:42 <mwc> GigE isn't really the optimal cluster fabric
16:07:06 <mwc> reffie: Infiniband has lower latency and is 10 Gb/s bidi
16:13:52 <Oejet> Good night all.
16:58:10 * stepcut grumbles about bugs in HXT
19:24:51 <foxy> @index thenM
19:24:51 <lambdabot> bzzt
21:10:21 <dons> @ghc
21:10:22 <lambdabot>  Can't represent explicit kind signatures yet
21:11:46 <Arrogant> 4.5.4 Binary Trees. Whee.
21:12:00 <Arrogant> Doing these exercises is kinda like taking an advanced math course.
21:13:05 <Gahhh> @moo
21:13:06 <lambdabot>                      (__)
21:13:06 <lambdabot>                      (oo)
21:13:06 <lambdabot>         /---+      +--\/
21:13:06 <lambdabot>        / |  |      | ||
21:13:06 <lambdabot>       *  ||-+      +-||
21:13:07 <lambdabot>          ^^          ^^                             *
21:13:08 <lambdabot>  
21:13:11 <lambdabot>    David Copperfield's Cow               David Copperfield's other Cow
21:22:24 <machack666> anyone want to answer some questions for a relative newb?
21:22:38 <Gahhh> dont ask to ask. just shoot.
21:23:10 <machack666> I'm learning haskell so my first task for myself is to write a PDF parser
21:23:22 <machack666> I'm using Parsec as a parser library
21:23:35 <Arrogant> ... Have you run through a tutorial yet?
21:23:45 <machack666> yup
21:23:48 <Arrogant> Okay, good
21:23:54 <machack666> 2dzn questions and YAHT
21:23:56 <Arrogant> Umm, good luck. I'm still on the tutorial.
21:24:06 <Arrogant> YAHT is brilliant.
21:24:13 <machack666> it is very good
21:24:26 <Arrogant> I'm even doing all the exercises. I don't even do that in school.
21:24:36 <machack666> I'm wanting to develop a strategy for the parse tree data types
21:24:48 <machack666> in the PDF file, there are a variety of object types
21:24:56 <machack666> arrays, dicts, strings, etc
21:25:17 <machack666> individually, I'm at the opint where I can parse any single one of the basic types successfully
21:25:30 <Arrogant> Excellent.
21:25:48 <machack666> however, when I try to build collections of the types (arrays or dicts) I am running into type signature conflicts
21:26:07 <machack666> this is because the different parsers return different values depending on what is being parsed
21:26:29 <machack666> i.e., a bool is either "true" or "false" and is being reduced to True and False
21:26:36 <Arrogant> I think you need a parent type class that contains all of them
21:26:39 <Arrogant> Like with Num
21:26:43 <machack666> That is my thought
21:26:55 <Arrogant> As far as I know, that's what you'd do
21:27:14 <machack666> I am trying to wrangle with the syntax to say what the valid types for each class are
21:28:05 <machack666> i.e., I'm defining a type (I think) with the data keyword: data PType a = PBool a | PNum a | PString a ...etc
21:28:30 <machack666> (I'm not sure that this is correct; in fact, I'm fairly certain that this is incorrect)
21:28:54 <machack666> so when I parse the "true" keyword, I am returning PBool True
21:29:05 <Arrogant> I'm pretty sure that if you had a list of them, then you couldn't have a PBool a with PNum a's
21:29:16 <Arrogant> Because the "a" would be different within the list.
21:29:29 <Arrogant> You'd have to specify a different type variable for each one. I think. Let me test that.
21:29:30 <machack666> which is one of the reasons that I'm pretty sure that I'm doing it wrong.  :)
21:29:56 <machack666> how would I define a single parent data type with my arbitrary subtypes?
21:30:27 <machack666> and what would the data constructors look like in practice?
21:30:48 <Arrogant> PType a b c d = PBool a | PNum b | PString c ... etc
21:31:11 <Arrogant> I just tested it. If you're grouping them, you'll have to have type variables for each one.
21:31:38 <Arrogant> For example
21:31:45 <Arrogant> data Lol a a = Lmao a | Rofl a ; t = [Lmao 5, Rofl 'a']
21:31:47 <Arrogant> Type error
21:31:50 <Arrogant> data Lol a b = Lmao a | Rofl b ; t = [Lmao 5, Rofl 'a']
21:31:55 <Arrogant> Runs fine.
21:32:06 <Arrogant> Excuse the type names :)
21:32:37 <machack666> wouldn't t be a record in this case?
21:32:50 <Gahhh> no
21:33:01 <machack666> list of Lols..
21:33:04 <machack666> never mind
21:33:09 <Arrogant> t is a function.
21:33:13 <Arrogant> ;)
21:33:57 <Arrogant> Right, t is a list of Lol. If each Lol has a different type variable, then it's all fine and dandy.
21:35:19 <machack666> so is it worthwhile to try to constrain the values that each subtype can hold, or is it fairly arbitrary?  I.e., is there some way or need to declare somehow that PBool will only ever hold "True" or "False"?
21:35:32 <Arrogant> Hmm.
21:35:35 <Arrogant> I think so.
21:36:25 <Arrogant> One second. It's in the tutorial somewhere.
21:36:38 <Gahhh> why have PBool at all
21:36:54 <Gahhh> why not just PType a b c d = True | False ...
21:37:26 <Arrogant> Gahhh is more experienced than me, I promise. Listen to him.
21:37:27 <Arrogant> ;)
21:37:46 <machack666> consistency, I guess.  I'm anticipating serializing the structures again, so my little brain said that was the right way to go.  :)
21:37:54 <machack666> but that makes sense
21:37:56 <Arrogant> You COULD do this though.
21:37:57 <Arrogant> data Test = TBool Bool
21:38:02 <Arrogant> You don't have to have type variables.
21:38:20 <Arrogant> You can just state what the type is.
21:38:24 <machack666> ok
21:38:43 <Arrogant> But listen to him. It's better.
21:38:51 <Arrogant> Maybe.
21:39:03 <machack666> example scenario:
21:39:09 <machack666> data Test = TBool Bool
21:39:23 <machack666> err, del that
21:39:27 <Arrogant> Hehe
21:39:39 <machack666> data Test = TBool Bool | TString String | TName String
21:39:58 <machack666> so t = [Test] would be valid for bools, strings, and names?
21:40:05 <machack666> in this highly simplified example
21:40:25 <Arrogant> t = [Test] isn't valid in itself :/
21:40:58 <machack666> well, I'll try to adapt this to my parsing code and see if I can get something going
21:40:59 <Arrogant> You could do t = [TBool True, TString "Hiya", TName "Booyah"] though.
21:41:16 <machack666> as long as the type signatures don't yell at me, I'm good
21:41:20 <machack666> :D
21:41:31 <Arrogant> Hehe
21:41:55 <machack666> Thanks Arrogant, Gahhh...I'll hang out a while and let you know if I get it woring or not
21:42:03 <Arrogant> Haskell is like a toy to me, like learning Brainfuck or Befunge
21:42:17 <Arrogant> It's hard to do anything at first because it's different.
21:42:19 <machack666> a bright shiny new toy
21:42:26 <Arrogant> And hopefully it gets easier.
21:42:27 <Gahhh> I think it's a bit simpler than brainf**k
21:42:27 <machack666> yes
21:42:55 <machack666> after I get the PDF parser working in haskell, I'll port it to bf
21:42:56 <Arrogant> Gahhh, not really, unless you're optimizing the BF
21:42:57 <machack666> heh
21:42:59 <Arrogant> Hehe
21:43:20 <Arrogant> It's just that you have to know the limits of the language.
21:43:30 <machack666> implementing bf in haskell would be a good next project :D
21:43:41 <Arrogant> Yes
21:43:44 <Arrogant> I'm gonna do that first.
21:43:49 <machack666> explode your brain in multiple dimensions at the same time
21:44:09 <Arrogant> I wrote one in Python. Fully extensible too.
21:44:15 <Arrogant> ... Heh.
21:44:49 <Arrogant> I waste a lot of time.
21:45:57 <Arrogant> Chapter 7 looks like its going to be fun.
21:46:53 <Arrogant> That $ thing looks useful.
21:53:54 <machack666> is there a good summary overview of common library functions available?  I'm looking for something to turn a string to an integer, and I'm not familiar with the available interfaces.
21:54:42 <machack666> digitToInt looks promising, but it seems to only act on a single character at a time
21:56:54 <sjanssen> machack666: use "read"
21:57:07 <machack666> thanks
21:57:11 <sjanssen> @type read
21:57:13 <Cale> @type read
21:57:15 <Cale> oops :)
21:57:17 <lambdabot> read :: forall a. (Read a) => String -> a
21:57:18 <lambdabot> read :: forall a. (Read a) => String -> a
21:58:34 <machack666> so does read detect the differences between the different numerical formats and return the appropriate class?  I.e., read "1" returns an Int, read "-.4" returns a Real, etc...?
21:58:59 <machack666> or are there hints to tell it the type of expression I'm interested in reading?
22:00:02 <mflux> most propably by type inference, but you can write for instance read "4" :: Double
22:00:04 <machack666> > read "1"
22:00:08 <machack666> 1
22:00:13 <machack666> > read "1.5"
22:00:23 <machack666> *** Exception: Prelude.read: no parse
22:01:00 <machack666> > read "1.5"::Double
22:01:01 <machack666> 1.5
22:01:06 <machack666> ok, works.
22:01:11 <dons> @plugs read "1.5" :: Float
22:01:12 <lambdabot> 1.5
22:01:56 <machack666> so is the ":: Float" type inference on the entire expression, or just on the "1.5"  in this case?
22:02:13 <mflux> @plus "1.5" :: Float
22:02:14 <lambdabot> Couldn't match `Float' against `[Char]'
22:02:34 <Gahhh> lol
22:02:50 <Gahhh> is that a command ?
22:02:56 <Gahhh> @plus 1
22:02:58 <lambdabot> 1
22:03:01 <Gahhh> yay
22:03:04 <mflux> I think it has some typo avoidance syste
22:03:05 <mflux> m
22:03:07 <dons> spelling correction
22:03:11 <mflux> helpful for me ;)
22:03:12 <dons> @foo
22:03:13 <lambdabot>                                     (__)
22:03:13 <lambdabot>                                     (oo)
22:03:13 <lambdabot>                              /-------\/
22:03:13 <lambdabot>                             / |     ||
22:03:13 <lambdabot>                            *  ||----||
22:03:13 <lambdabot>                               ^^    ^^
22:03:15 <lambdabot>                              (__)  (__)
22:03:18 <lambdabot>                              (oo)  (oo)
22:03:20 <lambdabot>                       /-------\/    \/-------\
22:03:21 <lambdabot>                      / |     || -^^- ||     | \
22:03:22 <dons> uhoh.
22:03:23 <lambdabot>                     *  ||----   -^^-       ||  *
22:03:26 <lambdabot>                        ^^                  ^^
22:03:28 <lambdabot>                       (__)                (__)
22:03:28 <Gahhh> wow
22:03:29 <lambdabot>                       (oo)                (oo)
22:03:32 <lambdabot>                /-------\/                  \/-------\
22:03:33 <lambdabot>               / |     ||                    ||     | \
22:03:35 <Arrogant> Awesome.
22:03:36 <lambdabot>              *  ||----||                    ||----||  *
22:03:36 <mflux> thanks, don
22:03:37 <lambdabot>                 ^^    ^^                    ^^    ^^
22:03:40 <lambdabot>                  Barnum's Troupe of performing cows
22:03:43 <Arrogant> Nothing like a cow pyramid
22:03:51 <machack666> glad it wasn't recursive
22:03:55 <dons> sorry. didn't see that coming.
22:04:02 <Gahhh> @vixen spank me
22:04:07 <sjanssen> @boo
22:04:07 <lambdabot> so, what made you want to message me?
22:04:08 <lambdabot>                     (__)                       _--------_
22:04:08 <lambdabot>                     (oo)                      |__________|   BIG
22:04:08 <lambdabot>              /-------\/                        XXXXXXXXXX    MAC
22:04:08 <lambdabot>             / | 007 ||                         __________
22:04:08 <lambdabot>            *  ||----||                        |_        _|
22:04:10 <lambdabot>               ^^    ^^                          --------
22:04:12 <lambdabot>        Cow licenced to kill      Enemy Cow after having met previous cow
22:04:25 <mflux> teh bot is full of useful features
22:04:29 <Arrogant> lambdabot's sense of humor is weird
22:04:36 <Arrogant> @lol
22:04:37 <lambdabot> Maybe you meant: moo pl yow
22:04:40 <Arrogant> :(
22:04:43 <machack666> @lambdabot
22:04:44 <lambdabot> Unknown command, try @listcommands.
22:04:51 <Arrogant> Dare I?
22:04:55 <machack666> what the hey
22:04:56 <sjanssen> @listcomrades
22:04:57 <machack666> @listcommands
22:04:57 <lambdabot> Unknown command, try @listcommands.
22:04:58 <lambdabot> all-dicts arr babel define definitions devils dice dict dict-help
22:04:58 <lambdabot> docs dummy easton echo elements eurohaskell eval fact fact-cons fact-
22:04:58 <lambdabot> delete fact-set fact-snoc fact-update foldoc fortune gazetteer get-
22:04:58 <lambdabot> definition ghc google help hitchcock index jargon karma karma+ karma-
22:04:58 <lambdabot> kind learn libsrc listchans listcommands listmodules lojban moo more
22:05:00 <lambdabot> paste pl pl-resume plugs pointless prelude quote remember resume
22:05:02 <lambdabot> seen spell state timein todo todo-add topic-cons topic-init topic-
22:05:04 <lambdabot> snoc topic-tail topic-tell type uptime vera version vixen web1913
22:05:05 <Arrogant> @hitchcock
22:05:06 <lambdabot> wiki wikipedia wn world02 yow
22:05:21 <machack666> @fortune
22:05:21 <Arrogant> hey wheres my hitchcock
22:05:35 <Gahhh> Cale: I saw your comment here. http://www.haskell.org/hawiki/TyingTheKnot . That is some neat stuff.
22:05:36 <Arrogant> you broke it
22:05:42 <lambdabot> Our policy is, when in doubt, do the right thing.
22:05:42 <lambdabot> 		-- Roy L. Ash, ex-president Litton Industries
22:06:09 <machack666> maybe it got flood-banned :D
22:06:27 <Arrogant> @hitchcock
22:06:33 <Arrogant> argh
22:07:15 <machack666> it's almost ... eerily ... silent on that topic
22:07:23 * machack666 looks around for birds
22:20:14 <machack666> ok, so I'm working through getting the pdf datatypes inheriting a common type still
22:21:19 <machack666> using Gahhh's and Arrogant's suggestion, I've parameterized the needed subtypes into several categories, but corresponding to some of Haskell's built-in types
22:22:31 <machack666> when I run the particular parse function, I am returning a value based on one of these types
22:22:57 <machack666> parseName returns a PName object, which is just a string with special treatment and serialization considerations
22:23:15 <machack666> parseString returns a PString, just a synonym for a String
22:23:34 <machack666> etc.
22:23:50 <machack666> so now I'm trying to parse an array of the existing data types
22:23:59 <Pseudonym> @hitchcock jezebel
22:24:02 <machack666> which is delimited with square braces
22:24:02 <lambdabot> *** "Jezebel" hitchcock "Hitchcock's Bible Names Dictionary (late
22:24:02 <lambdabot> 1800's)"
22:24:02 <lambdabot> Jezebel, chaste
22:24:02 <lambdabot>  
22:24:38 <machack666> and corresponds internally very nicely to a list
22:27:08 <machack666> so if I am trying to return a list containing all of the parsed objects collected thus far, what is the best syntax for this?  right now I am using "return [manyTill parseObject (try (string "]"))]" with explicit square brackets, but I am getting an inferred type of [a1].
22:27:28 <machack666> is there a way to return a list of items from Parsec in this way?
22:30:29 <sjanssen> machack666: are these objects separated by a token? (perhaps a comma)
22:34:18 <dbremner> @hitchcock delilah
22:34:21 <lambdabot> *** "Delilah" hitchcock "Hitchcock's Bible Names Dictionary (late
22:34:21 <lambdabot> 1800's)"
22:34:21 <lambdabot> Delilah, poor; small; head of hair
22:34:21 <lambdabot>  
22:34:47 <machack666> whitespace, which could be newline or a comment
22:35:12 <machack666> but we can have arbitrarily nested objects
22:36:32 <machack666> return $ PNum $ read (intPart ++ "." ++ fracPart) :: Float
22:36:43 <machack666> > Couldn't match `Float' against `m (PType a b c d e)'
22:37:12 <Gahhh> machack666: you are trying to cast a monad as a Float
22:37:26 <Gahhh> need parens
22:37:33 <machack666> never mind on that one. parens cleared up
22:37:35 <machack666> yes
22:41:43 <machack666> ok, a lot is getting cleared up now.  But I'm running into a problem getting the numeric literals to parse in a sensible manner
22:42:09 <machack666> I had had separate parsers for integers and reals, and I tried to get them consolidated into a single parser now
22:42:20 <machack666> I think that's my problem right now
22:44:25 <machack666> never mind ... I was having a problem with a different parser
22:44:54 <machack666> every object can be an indirect object which is referred to with an integer tag and an integer generation number
22:45:25 <machack666> so, "5" is just 5, but "5 0 R" is a reference to object id 5's first generational representation
22:45:52 <machack666> obj reference parser was getting the first stab at things, and wasn't giving up easily enough.  :)
22:53:48 <machack666> ack...still having problems getting the object reference to give up and backtrack to give the intParser a chance to work
23:06:15 <machack666> all right, well thanks for all the help
23:06:25 <machack666> i'm sure I'll be back later when I can think straighter
23:57:00 <glimming> http://www.nada.kth.se/kurser/kth/2D1456/H4-answer.pdf
23:57:05 <glimming> monads and such like
