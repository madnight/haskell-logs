00:17:23 <ikegami--> hello
00:17:56 <ikegami--> who knows a library for Haskell <-> OpenSSL (libssl)?
00:18:50 <ikegami--> I found some libraries, hOpenSSL and the Haskell Cryptographic Library, however, they have only libcrypto but not libssl...
00:19:36 <ikegami--> I want to make server/client with SSL in Haskell
00:20:22 <ikegami--> and start to write a hsc file to wrap openssl, but, unfortunately it is not so fun for me :)
00:22:24 <Cale> I'm not sure what that library looks like, but perhaps just using the FFI directly wouldn't be too bad? I suppose you might need a lot of calls, in which case it can be a bit of a pain
00:23:09 <ikegami--> because I'm not familier with the FFI
00:23:19 <Cale> oh, it's not so bad
00:23:41 <ikegami--> but on the other hand, this may be a good chance to get FFI for me
00:23:47 <ikegami--> hm
00:24:39 <dons> first hit on google: http://cryp.to/hopenssl/
00:24:46 <ikegami--> yes
00:24:57 <dons> you should start there, i'd think
00:25:17 <ikegami--> and http://www.haskell.org/crypto is another implement
00:25:43 <Cale> http://www.cse.unsw.edu.au/~chak/haskell/ffi/ for the FFI reference
00:26:05 <Cale> It's pretty easy to use in general.
00:26:34 <ikegami--> thanks
00:28:15 <ikegami--> dons: my problem is they (hOpenSSL and haskell.org/crypto) seem not to have the SSL (Server Sockets Layer) functions in libssl
00:29:28 <ikegami--> but I catch the program more clearly after saying to dons, thanks :)
00:30:38 <ikegami--> how about HaskellDirect or GreenCard with the current GHC 6.4?
00:30:56 <ikegami--> I don't know whether they work with the current GHC 6.4
00:33:01 <ikegami--> at a glance, the FFI page looks nice
02:15:31 <boegel> hey Itkovian
02:15:50 <Itkovian> boegel.
03:05:19 <boegel> for how long will shapr disappear now ? :)
03:06:33 <itior> 3 years
03:07:59 <boegel> omg :)
05:00:09 <musasabi> morning
05:24:03 <dons> @ghc
05:24:06 <lambdabot>  foreign declaration uses deprecated non-standard syntax
05:24:24 <dons> that's a good point
05:24:25 <dons> @ghc
05:24:26 <lambdabot>  parse error on input
05:24:28 <nlv11757_> lazy is a bitch
05:24:44 <nlv11757_> its too smart
05:24:45 <nlv11757_> :)
05:24:59 <dons> better than being too strict ;)
05:25:37 <nlv11757_> true
05:25:49 <nlv11757_> pfff deciding what to do after graduating is soo hard
05:25:59 <nlv11757_> all these important choices
05:28:26 <Philippa_> who was playing with LLVM in here?
05:28:44 <boegel> nlv11757_: a phd is always interesting, I'm heading in that direction
05:29:21 <nlv11757_> well boegel, im in such doubts lately....i thought i figured it out....
05:29:32 <dons> Philippa_ - autrijus was looking at it for something.
05:29:50 * autrijus mumbles something about haskell and "Powered by PhD"
05:29:59 <dons> yeah :)
05:30:00 <nlv11757_> i thought....im not academic enough for a phd on a university, but now my mentor asked me if im interested in doing one....
05:30:13 <autrijus> Philippa_: I took a look at it, but its gcc frontend thing can't compile here on fbsd
05:30:13 <boegel> nlv11757_: I'm not academic either :)
05:30:30 <nlv11757_> i like implementing and making stuff
05:30:35 <autrijus> I plan to revisit in two weeks when I'm in Vienna
05:30:40 <dons> autrijus, yeah I found that too. couldn't get it going on obsd either. big pain.
05:30:45 <autrijus> :-/
05:31:16 <autrijus> I'm also trying to write a submission to Haskell Workshop -- first time dealing with this ACM proceeding format thing -- not at all sure how much/detailed to write
05:31:31 <nlv11757_> boegel, so i thought maybe a nice company providing java ebusiness project would be fine....but my mentor made me doubt again
05:32:08 <musasabi> Has anyone done something with Join-calculus and Haskell?
05:33:22 <kosmikus> nlv11757_: phd in utrecht?
05:33:49 <nlv11757_> kosmikus, i havent spoken with doaitse yet. he gave me the assignment to try and figure out what i wanted
05:33:55 <nlv11757_> because i simply dont know yet
05:35:37 <nlv11757_> deciding is so hard
05:36:01 <nlv11757_> with mentor i didnt meant doaitse btw
05:36:03 <nlv11757_> -t
05:37:28 <kosmikus> your philips mentor?
05:37:41 <nlv11757_> yeah
05:40:43 <earthy> nlv11757: don't make a choice other than 'do what you like doing'
05:42:02 <nlv11757_> earthy, thats the hardest part to figure out for me
05:42:12 <nlv11757_> im kind of easy going, im fine with a lot of things
05:42:53 <Philippa_> autrijus: thanks. I'm guessing it won't be any better under windows then
05:52:27 <boegel> nlv11757_: keep in mind: if you don't do a phd now, you won't do a phd ever again
05:52:41 <boegel> I mean, now you have the chance, you might want to give it a try
05:52:50 * earthy agrees
05:52:53 <boegel> if you don't like it, you can still quit and go and find work
05:52:56 <earthy> otoh: I've been in industry for a couple of years
05:52:57 <boegel> that's how I thought about it
05:53:00 <earthy> so...
05:54:59 <nlv11757_> boegel, that is exactly what my mentor told me...you only get to make this choice once.
05:58:58 <boegel> that why I'll try it
05:59:10 <boegel> it seems interesting, and I don't like becoming some number in the industry
05:59:27 <boegel> I don't plan to get famous either, but I want to learn and get paid for it
05:59:47 <nlv11757_> about that latter statement....don't phds get paid jack for 4 years?
06:00:18 <nlv11757_> that's also one of my concern...image me paying bills and try living on miminum wage
06:00:32 <nlv11757_> modulo spelling errors
06:06:17 <boegel> nlv11757_: over here (Belgium), I'd earn something like 1500â‚¬/month (netto)
06:06:31 <boegel> so that's not exactly a minimum wage
06:09:48 <ozone> JaffaCake: do you know about colinux?
06:10:02 <JaffaCake> ozone: never heard of it
06:10:16 <ozone> JaffaCake: oh, you mind find it really useful ...
06:10:20 <ozone> s/mind/might/
06:10:26 <ozone> http://www.colinux.org/ -- run linux inside windows
06:10:39 <JaffaCake> ah right
06:10:41 <ozone> like vmware, but much easier to set up, and it's _fast_
06:10:59 <ozone> thought it might be useful for you if you dual-boot all the time to test out GHC on linux
06:11:24 <JaffaCake> actually I don't, except on my laptop
06:11:37 <JaffaCake> and there I mostly use windows anyhow
06:12:03 <ozone> well, if you have some spare time, give colinux a whirl.  since i installed it, i haven't ever needed to dual-boot
06:12:14 <ozone> it's pretty amazing just how well it works.
06:12:32 <JaffaCake> thanks for the pointer, I'll give it a try
06:17:01 <Philippa_> boegel: bear in mind you'll have to pay for some of the stuff you need for research too
06:17:44 <boegel> Philippa_: yeah I know, but I asked some people who are doing a phd, and they say you earn about 1500 a month, and you have extra funds for travel expenses and such
06:18:56 <Philippa_> cool
06:19:19 <boegel> I think it pays very good for learning :)
06:25:15 <nlv11757_> boegel, im not sure how much money i will have left from that 1500 after rent, etc. etc.
06:25:47 <edwinb_> Is that tax free?
06:27:11 <nlv11757_> 1500 netto
06:27:28 <nlv11757_> that was the amount boegel was talking about
06:27:58 <edwinb> that'd probably be a decent graduate starting salary around here...
06:30:30 <boegel> edwinb: yes, tax free
06:30:56 <boegel> nlv11757_: it's never easy in the beginning, but I think you'll have trouble finding a job that pays more than 1500 tax-free
06:31:25 <glimming> @seen esap
06:31:26 <lambdabot> I saw esap leaving #haskell 9 hours, 57 minutes and 58 seconds ago.
06:31:37 <nlv11757_> business jobs typically pay more if im not mistaken
06:32:10 <edwinb> Well, it depends if you want to do something fun or not.
06:32:29 <boegel> nlv11757_: they do, but not when you start a job
06:32:33 <edwinb> Or, of course, what you consider fun ;)
06:32:44 <boegel> and it's hard to find a job you really like
06:33:11 <boegel> that way I see it, a phd will open up more possibilities for me, more choices
06:33:48 <boegel> I have to go, ttyl
06:34:23 <nlv11757_> bye
07:07:52 <nlv11757_> earthy, ?
07:12:07 <nlv11757_> is it possible to model a graph as a UUAG datatype?
07:12:46 <xerox> What does UUAG mean?
07:13:34 <nlv11757_> its the attribute grammar system at the UU
07:28:29 <autrijus> hm.
07:28:29 <autrijus> if isNothing x then return Nothing else fmap Just $ do
07:28:34 <autrijus> is there a better way to write this idiom?
07:29:52 <nlv11757_> autrijus, ?
07:30:40 <musasabi> flip (maybe (return nothing)) x (\v -> do ...) ?
07:31:52 <Igloo> I'd use pattern matching
07:32:20 <autrijus> I'm talking about:
07:32:20 <autrijus> withMaybe :: (Monad m) => Maybe a -> (a -> m b) -> m (Maybe b) withMaybe x action = case x of Nothing -> return Nothing Just x' -> return . Just =<< action x'
07:32:23 <autrijus> er
07:32:24 <autrijus> withMaybe :: (Monad m) => Maybe a -> (a -> m b) -> m (Maybe b) withMaybe x action = case x of
07:32:27 <autrijus>     Nothing -> return Nothing
07:32:28 <autrijus>     Just x' -> return . Just =<< action x'
07:32:48 <autrijus> I wonder if there's something like it already builtin.
07:32:53 <autrijus> it's like MaybeT
07:33:38 <autrijus> am I making sense at all? :)
07:33:45 <musasabi> yes/
07:34:03 <musasabi> But there is no transformer version of Maybe in mtl.
07:34:18 <autrijus> yeah and that's strange
07:34:28 * autrijus ponders to call this "withMaybe" or "runMaybeT"
07:34:49 <autrijus> withMaybe sounds better.
07:40:31 <autrijus> hm, if I write it thisway
07:40:31 <autrijus> withMaybe :: (Monad m) => m (Maybe a) -> (a -> m b) -> m (Maybe b)
07:40:59 <autrijus> then it looks almost like a certain function
07:41:04 <autrijus> ahh fmapM
07:41:22 <autrijus> right, fmapM is it. the devteam thinks of everything!
07:51:36 <autrijus> @pl \f m -> fmapM m =<< f
07:51:37 <lambdabot> (. fmapM) . (>>=)
07:52:00 <autrijus> somehow it's not more readable.
07:53:05 * Matt-W tries to figure out why it's called fmapM
07:56:16 <autrijus> because it's a fmap operatoring on monads
07:56:19 <autrijus> think mapM
07:57:17 <Matt-W> Yeah. Not remembering the existance of fmap is what threw me
07:57:30 <Matt-W> I should do more Haskell
08:05:42 <nlv11757_> crap, im screwed
08:10:27 <am02> any greencard people here today?
08:11:29 <am02> I want to call a c function which is expecting a pointer to an array.
08:12:37 <am02> I've mallocArray and poekArray'd data in to and have a Foriegn Ptr
08:13:42 <am02> but don't know what to put in the %fun def. Anyone?
08:23:55 <musasabi> How would I define a variadic function which applies some functions to all of its args and then returns them in a tuple?
08:28:02 <ozone> holy crap arrays are slow without -O
08:29:53 <halcyon10> can someone tell me whats wrong with this function-definition?
08:29:54 <halcyon10> lambda 0 = [(0,1)]
08:29:54 <halcyon10> lambda n = (snd oh, 4*(snd oh)-(fst oh)):old
08:29:54 <halcyon10>     where old = lambda n-1
08:29:54 <halcyon10>           oh  = head old
08:30:29 <edwinb> you may need "lambda (n-1)"
08:30:37 <edwinb> since application has highest precedence
08:30:51 <halcyon10> oh, i see, i'll try that
08:31:14 <halcyon10> now it works ! thanks a lot
08:31:44 <mflux_> as there are languages where whitespace is significant, how about languages where precedence could be decided by lack of it ;)
08:32:00 <mauke> like perl6?
08:32:21 <basti_> lol i beat a "c is great" moron in haskell, in the n-queens problem, without a blink -g-
08:32:21 <mflux_> oh :-o
08:32:41 <basti_> just by implementing a BF-search.
08:33:31 <boegel> basti_: you beat him at speed ? using BF ?
08:33:35 <basti_> and it isn't even optimized - ok the conflict count is in ffi, because i wanted to try that
08:33:44 <basti_> boegel: he is brute-forcing the solution.
08:33:48 <mauke> mflux_: http://dev.perl.org/perl6/doc/design/apo/A12.html (grep for "whitespace)
08:33:50 <basti_> backtracking etc.
08:34:03 <basti_> because thats the obvious algorithm
08:34:05 <boegel> and what did you do ?
08:34:10 <basti_> best first search
08:34:18 <boegel> nice :)
08:34:22 <basti_> "BF"
08:34:28 <boegel> that'll teach him
08:34:31 <basti_> with a minimal heuristic
08:34:36 <boegel> brute force is BF too :)
08:34:46 <basti_> yes with a TRIVIAL heuristic ;)
08:34:51 <boegel> ;)
08:34:58 <basti_> he'll strike back, but I don't fear.
08:35:00 <boegel> I meant the acronym :)
08:35:05 <basti_> ah okay
08:35:20 <basti_> i see
08:36:04 <basti_> next thing i'll do is optimizing the candidate handling
08:36:20 <basti_> so that not as many candidates are searched
08:37:49 <mflux_> ~.
08:37:51 <mflux_> ~.
08:38:01 <mflux_> hmpmph
08:38:14 <boegel> mflux_: ? :D
08:38:20 <basti_> -g-
08:38:29 <mflux_> those were my previous attempts at disconnecting ssh, it was somehow stuck
08:57:47 <Igloo> Does anyone know the tex for something like this where the result is 1 rather than 2? \def\x{1} \def\y{\x} \def\x{2} \y
09:08:17 <kosmikus> Igloo: \edef
09:08:41 <kosmikus> or, in this simple case, \expandafter\def\expandafter\y\expandafter{\x}
09:09:42 <Igloo> Ah, thanks
09:12:15 <basti_> ugh.
09:12:20 <basti_> turing tar pit?
09:12:39 <Igloo> ?
09:13:34 <basti_> thats what you call a system that is turing complete but near to complete obfuscation
09:13:50 <basti_> so that you can spend significant amounts of time in generating code for it
09:14:09 <basti_> like, "brainfuck", or, TeX, or Turing Machines, or pure Lambda Calculus
09:15:08 <kosmikus> while the \expandafter solution is certainly quite verbose, the \edef\y{\x} solution is not
09:21:39 <boegel> any dutch speaking people active ?
09:21:56 <Philippa> basti_: pure \calc isn't really a tarpit, you can fairly rapidly build up usable datatypes and so forth. It's certainly no more of one than any given machine code
09:23:20 <am02> anyone know what a %dis greencard staement should look like for a pointer to a C array of int's
09:23:22 <basti_> Philippa: hmm. well. useful in a mathematics sense yes.
09:23:52 <am02> I tried this: newtype CArr = CArr (ForeignPtr CArr)
09:23:58 <am02> %dis cArr x = CArr (%ForeignPtr ({int*} x))
09:24:34 <am02> and I get marshall: Malformed %ForeignPtr (%ForeignPtr ({int*} arg3))
09:24:42 <Lemmih> am02: It would probably be easier to define marshalling and unmarshalling functions yourself.
09:25:06 <Philippa> basti_: it may be useless as a language for real computers, but it's not useless to work in if you see the distinction
09:25:35 <Lemmih> Or perhaps: type CArr = Ptr Int; %dis cArr a = ptr a
09:25:36 <basti_> yep.
09:26:18 <Lemmih> ozone: Around?
09:26:24 <ozone> Lemmih: hi
09:26:44 * SyntaxNinja bounces around ozone
09:26:59 * ozone watches SyntaxNinja and goes dizzy
09:27:32 <Lemmih> ozone: (re "Using newArray...") What about passing 'bytesRead' to hPutArray/hPutBuf?
09:28:05 <Lemmih> And the array bounds reflects the array size, not how much of it you use.
09:28:32 <ozone> ah duuuuuuuuuuh
09:28:48 <ozone> why do i only post stupid questions?
09:29:02 <ozone> thanks lemmih, for some rason i thought hPutArray didn't have a 'count' parameter
09:29:05 <ozone> +e
09:29:58 <Lemmih> (:
09:32:55 <am02> a no joy with type CArr = Ptr Int; %dis cArr a = ptr a.
09:34:12 <Lemmih> Did you replace ';' with a newline?
09:34:49 <am02> yes.
09:35:19 <am02> I would have thought its a ForeignPtr?
09:35:30 <basti_> @pl concat $ map swaps' $ concat $ map (\(a,b)->map (\(x,y)->(a,x,y)) $ zip (inits b) (tails b)) $ zip (inits a) (tails a)
09:35:32 <lambdabot> swaps' =<< join (zipWith ((. liftM2 zip inits tails) . map . (`ap`
09:35:32 <lambdabot> snd) . (. fst) . (,,)) (inits a) (tails a))
09:35:38 <basti_> hmm
09:35:49 <am02> as its in the C Heap?
09:36:19 <am02> I'll have a go at defining the marshall myself as suggested
09:36:32 <Lemmih> am02: Ptr is a vanilla pointer. ForeignPtr is a Ptr with possible finalizers.
09:38:35 <Lemmih> am02: Is there some specific reason you're using GreenCard over hsc2hs?
09:39:05 <am02> yeah I've got a bunch of greencarded functions already defined for me.
09:59:20 <am02> Lemmih, you were right type CArr = Ptr Int; %dis cArr a = ptr a. Thanks. (I'd done something silly!)
10:36:25 <SamB> huh, http://www.haskell.org/greencard/ links to http://www.haskell.org/greencard/downloads/greencard-latest.ps.gz, and I get a 403 even though when I look in http://www.haskell.org/greencard/downloads/ I don't see any file named that...
10:38:33 <xkb> hi
10:39:01 <xkb> What do you guys use to make sheets with lots of functional code on them?
10:39:05 <xkb> a latex package?
10:39:09 <xkb> something else?
10:40:07 <basti_> there is a haskell prettyprinting thing for latex
10:40:39 <xkb> yeah.. I found listings.sty
10:40:43 <xkb> that works quite good
10:40:57 <xkb> still looking for a docclass to fit sheets
10:41:09 <xkb> that are'nt as dull as normal LateX :D
10:41:10 <basti_> "fit sheets"?
10:41:45 <xkb> as in these: http://www.cs.umd.edu/class/spring2002/cmsc434-0101/MUIseum/applications/presentationlatex.html
10:41:49 <xkb> search for latex
10:42:10 <basti_> you mean slides?
10:42:10 <am02> Is there a good way to read an Int off of a array/foreign array of bytes?
10:42:12 <xkb> pdfscreen looks nice
10:42:24 <xkb> basti_: Ah yes.. slides indeed
10:42:29 <SamB> am02: try Storable
10:42:32 <basti_> xkb: "beamer"
10:42:41 <SamB> @docs Foreign.Storable
10:42:42 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/base/Foreign.Storable.html
10:43:09 <basti_> produces very good-looking slides with very little work
10:43:17 <xkb> basti_: wow.. looks really nice indeed
10:43:30 <am02> @type readIntOffPtr
10:43:38 <lambdabot> bzzt
10:43:38 <basti_> it's a little tricky but has a benign learning curve
10:44:32 <xkb> ohh... I got 2 days to learn it :D
10:44:40 <xkb> or rather: 2 nights
10:44:54 <basti_> lol
10:45:39 <am02> SamB, readIntOffPtr takes a Ptr Int, will that do?
10:46:00 <am02> do I have to do a cast?
10:48:06 <SamB> you can use Foreign.Ptr.castPtr
10:48:32 <am02> very good, cheers.
10:50:05 <SamB> I'm not sure how well that will work cross-platform, but I'm sure if it becomes a problem you'll be able to solve it without too much trouble...
11:24:54 <basti_> @docs Data.Set
11:24:54 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/base/Data.Set.html
11:36:37 <machack666> is there some way to write c-style libraries using haskell? something akin to ffi, but in the opposite direction?  if so, how do you choose which "symbols" get exported?
11:37:18 <Lemmih> With 'foreign export'.
11:38:17 <machack666> thanks
11:38:32 <Lemmih> Remember to start the RTS before calling haskell functions.
11:41:43 <machack666> thanks.  that is something that must be done by the importing program?
11:41:58 <machack666> i.e., things which link to the library?
11:42:36 <Lemmih> It's easiest to let GHC handle all the linking.
11:51:36 <raver> greetings
11:51:53 <Lemmih> Hey.
11:57:42 <basti_> agh
11:57:51 <basti_> NEVER EVER call something "open" in an A* search
11:58:03 <basti_> or what?
11:58:03 <basti_> huh?
11:58:24 <basti_> @doc open
11:58:25 <lambdabot> open not available
11:58:28 <basti_> @docs open
11:58:28 <lambdabot> open not available
11:58:30 <basti_> hmm
11:58:37 <basti_> what is wrong there gnn
12:00:05 <basti_> oh lol
12:00:06 <basti_> got it
12:00:08 <basti_> again:
12:00:26 <basti_> NEVER EVER accidentally recurse a let-introduced variable
12:01:17 <raver> re
12:13:33 <musasabi> Has anyone got haskell-mode 2.0 for Gentoo ?
12:16:37 <dcoutts> if they do feel free to send in an ebuild
12:16:55 <Lemmih> Philippa: Still working on flippi?
12:18:56 <dcoutts> sorry, that was rather ambiguous. If anyone has an ebuild for haskell-mode, they are welcome to send it to haskell@gentoo.org or submit a bug report and we'll (probably) add it to the portage tree.
12:22:30 * basti_ is exhausting his swapspace with the 100 Queens problem
12:22:33 <basti_> =)
12:28:09 <musasabi> dcoutts: I just typed in suitable values and it appears to work - but I don't have the resources to test it properly.
12:28:29 <musasabi> the unicode stuff is nifty - but I don't have any pretty fonts for that :-(
12:33:37 <dcoutts> well you can send what you've got to haskell@gentoo.org and we'll take a look
12:34:43 <musasabi> dcoutts: just switched ebuild name, HOMEPAGE and SRC_URI - I can send it if you want :-)
12:37:05 <dcoutts> musasabi, well if you send the email it's more likely to get onto our team TODO list :-)
12:38:18 <metaperl> what is the best way to see if ghc-6.4 has moved to testing on Debian? CosmicRay?
12:42:34 <metaperl> apt-cache show ghc6
12:42:35 <metaperl> found it
12:44:58 <Igloo> It won't move to testing until sarge releases
12:45:00 <Igloo> Why?
12:46:06 <ibid> http://packages.qa.debian.org/g/ghc6.html is one resource for that
12:46:22 <ibid> specifically, the "testing status" box
12:57:10 <dcoutts> musasabi, there is already a bug open about the new haskell-mode: http://bugs.gentoo.org/show_bug.cgi?id=73172
13:03:52 <basti_> hmm
13:04:14 <basti_> why is there a difference between profiled run time and actual run time?
13:04:33 <basti_> i mean it's apparently an O(1) difference, so no big deal, but i'm still wondering.
13:07:36 <ibid> not sure what you mean exactly by "profiled" and "actual" runtime, but couldn't that be just a matter of the instrumentation slowing things down?
13:07:59 <basti_> profiled = +RTS -prof output, actual: watch, or "time ./program"
13:08:13 <ibid> actual measured with or without profiling?
13:08:17 <basti_> even with.
13:08:20 <ibid> ok
13:08:35 <ibid> i don't know but i'd guess the profiling misses something, like its own runtime?
13:09:07 <basti_> thats actually written overhead, but without profiling, it's still slower than the profiling display of the profiled version
13:09:59 <ibid> "written overhead"?
13:10:04 <basti_> uhm
13:10:08 <basti_> on top of the file
13:10:20 <musasabi> basti_: with profiling you will have different inlining behaviour and since you write profiling information cache is going to be vastly less usefull.
13:10:50 <basti_> musasabi: even if i turn off profiling and run it again inside "time", the displayed time is more than the one displayed by the profiled version +RTS -prof
13:11:08 <basti_> (compile again without profiling)
13:11:11 <ibid> (note, i know profiling in general, but not ghc's version of it)
13:11:47 <basti_> its not that it would break something... the reported information is valuable and stuff, but still there's seconds missing, apparently
13:33:57 <am02> @docs mkLazyList
13:33:58 <lambdabot> mkLazyList not available
13:40:14 <Cale> am02: hm?
13:56:30 <mflux_> @pl \a b -> a + b
13:56:31 <lambdabot> (+)
13:56:51 <basti_> () is infix -> prefix, `` is prefix -> infix
13:56:59 <mflux_> @pl \a b c -> a + b + c
13:56:59 <lambdabot> ((+) .) . (+)
13:57:10 <mflux_> @pl \a b c d -> a + b + c + d
13:57:11 <lambdabot> ((((+) .) . (+)) .) . (+)
13:57:14 <basti_> ughh
13:57:15 <basti_> =)
13:58:00 <mflux_> @pl \a b c d e -> a + b + c + d + e
13:58:01 <lambdabot> ((((((+) .) . (+)) .) . (+)) .) . (+)
13:58:01 <mflux_> \o/
13:59:11 <basti_> now you write TH code to do that for an arbitary number of +'s
13:59:37 <mflux_> without any further thinking the series can quite easily constructed from those examples ;)
13:59:56 <basti_> prove! ;)
13:59:57 * basti_ ducks
14:00:19 <mflux_> that is the step that requires thinking - but shouldn't really be that bad ;)
14:00:35 <basti_> i know
14:16:05 <jjang> hey
14:18:35 <SyntaxNinja> hi
14:18:43 <Lemmih> yo
14:19:09 <boegel> y0
14:22:15 <basti_> y0w.
14:23:20 <SyntaxNinja> @yow
14:23:21 <lambdabot> You mean now I can SHOOT YOU in the back and further BLUR th'
14:23:21 <lambdabot> distinction between FANTASY and REALITY?
14:23:57 <tromp> @index interact
14:23:58 <lambdabot> System.IO, Prelude
14:24:20 <jjang> anyone here into data mining?
14:25:32 <basti_> i don't even know what data mining is.
14:28:13 <boegel> basti_: using huge amounts of data to reveal certain information
14:28:35 <basti_> well. people tend to do that (perception).
14:28:39 <boegel> for example, use the contents of 1.000.000.000 shopping carts to reveal what people buy at the same time
14:28:44 <basti_> computers try do that too (GIGO) ;)
14:28:58 <jjang> ye or for example a web spider
14:29:05 <jjang> easier to understand :)
14:29:06 <basti_> i know the buzzword
14:29:16 <basti_> but i'm not sure about it's semantics
14:42:36 <Philippa> data mining is essentially finding useful information in piles of data
14:42:44 <Philippa> digging out the useful bits, if you like
14:44:36 <basti_> i dont know how that would work
14:45:44 <basti_> for example if you gave the digits of pi as input, would the computer come up with some algorithm for pi? or even the symbol?
14:47:27 <wagle> @pl 3.14159265358979323846
14:47:29 <lambdabot> 3 . 14159265358979323846
14:47:34 <musasabi> Has anyone thought of using join calculus in Haskell?
14:47:42 <basti_> relational calculus?
14:48:06 <musasabi> basti_: it is a process calculus with quite nice semantics.
14:49:16 <wagle> @pl Ï€
14:49:18 <lambdabot> (line 1, column 2):
14:49:18 <lambdabot> unexpected "\128"
14:49:18 <lambdabot> expecting letter or digit, variable, "(", operator or end of
14:49:18 <lambdabot> input
14:50:07 <basti_> musasabi: googling it up... there seems a CAML interpretation, and the inria guys are associated with that.
14:50:13 <basti_> which is a good thing (tm ;)
14:50:16 <wagle> http://c2.com/cgi/wiki?JoinCalculus
14:50:40 <goron> basti_: If you give it enough numbers, yes. But it stays a hypothesis for the computer. You have to reduce the searchspace to one, and then still it takes an awful lot of time, probably. There are other approaches (that will go much faster, but the first book about that will appear in Nov 2005 at the earliest.
14:51:07 <musasabi> yep, I have read much of their papers :-)
14:51:20 <basti_> goron: so it can give a function for every sequence of numbers i give?
14:51:26 <wagle> waugh..  inria isnt responding..  i remember seeing join calculus and thinking "oh cool".. but
14:51:36 <basti_> yes its offline or something
14:51:55 <goron> basti_: Well, it's always possible to make an algorithm that does that, yes.
14:52:29 <basti_> yes it can reproduce exactly the numbers i have given
14:52:50 <goron> basti_: But it will always be a model based on the data, and as such will not always be correct for future input values.
14:53:13 <basti_> but the hope is that it might often be?
14:53:30 <goron> basti_: Also I am not aware of any datamining approach (besides the one above), that can handle infinite domains.
14:54:05 <goron> basti_: That field is rather small, it's mostly bio and supermarket/bank-transactions/insurance companies.
14:54:14 <goron> basti_: Not that much real science :(
14:54:22 <basti_> that was what i thought.
14:55:30 * goron got to get some sleep... too less sleep.... is bad...bye
14:55:39 <basti_> night goron
14:55:43 <goron> night
15:04:38 <foxy_> goron: bio is a real science!
15:05:34 <SyntaxNinja> heh
15:06:44 <wagle> more of one that comp
15:06:49 <wagle> more of one than comp
15:07:16 <basti_> for the record: what these people are trying to do is to find laws akin to the laws of physics in circumstances extremely different than in physics
15:07:47 <basti_> it is known, for example, that every observation of an apparent market rule will defeat that rule, because people will try to exploit it
15:08:30 <wagle> sounds like evolutionary biology
15:12:30 <foxy_> DNA microarrays might be a target for data mining.  There's lots of data (often time course) and you need to look for associations between data points (for example using mutual information)
15:13:31 <wagle> @yow
15:13:33 <lambdabot> Yow!  Those people look exactly like Donnie and Marie Osmond!!
15:14:03 <basti_> goodnight
15:14:32 <wagle> some webpages evade being mined
15:25:07 <wagle> anyone find source code for join calculus?
15:25:20 <foxy_> Fermat's Last Research Assistant:  A scientific publication (and annotation) data miner that eliminates inconsistent hypotheses
15:25:34 <blackdog> Does basti_'s rule apply to basti_'s rule?
15:26:28 <Philippa> not quite, but only as a matter of phrasing. You get the effects an order early, IYSWIM
15:27:30 <blackdog> not really, but i'm not much of an economist. could you expand for the thickies in the audience?
15:28:58 <Philippa> first-order effect = "it just happens". Second-order = "it happens as a result of this first order effect". So people exploiting basti's rule is a first-order effect wrt to basti's rule whereas it's a second-order one with regard to basti's rule applied to anything else
15:29:25 <Philippa> I'm not an economist either, I just play with systems a lot
15:29:33 <blackdog> oh, gotcha. ok. this is like physics where you can ignore nth order effects for some n which i can
15:29:37 <blackdog> never quite guess...
15:30:01 <Lemmih> Philippa: Still working on flippi?
15:30:05 <Philippa> yep
15:30:22 <Philippa> still working towards the next release which is turning into the mother of all leaps in functionality
15:30:42 <Lemmih> My Haskell module for Apache is usable now.
15:30:46 <Philippa> cool
15:31:08 <Philippa> what (if anything) needs doing to make an app written to use Network.CGI work with it neatly?
15:32:31 <Lemmih> I think HSP is really neat but that would not be very easy to migrate to.
15:33:18 <Lemmih> Check out http://www.scannedinavian.org/~lemmih/ModHackage/{Pages|Templates} to get a taste of modhaskell/HSP.
15:35:31 * Philippa really needs to go to bed, sorry
15:35:52 <Lemmih> Bye then.
15:38:01 * stepcut files bug reports against HXT
15:42:13 <Lemmih> alexj: How's SearchPath?
15:42:27 <alexj> working on it right now.
15:42:33 <alexj> bugfixing
15:43:00 <alexj> it is retrieving more files than necessary, because of a laziness problem somwhere.
15:43:31 <alexj> if I have a [IO Maybe] is there a way I can get an msum on it without executing everything in the list?
15:43:56 <alexj> mapM list >>= return.msum doesn't do what I expected.
15:44:36 <Lemmih> sequence?
15:45:12 <alexj> mapM = sequence.Map I think.
15:45:27 <alexj> sorry mapM=sequence . map
15:45:57 <alexj> oops above I meant sequence list >>= return . msum isn't sufficiently lazy.
15:46:52 <Lemmih> You want lazy IO?
15:46:59 <alexj> yeah.
15:47:14 <alexj> the actual code is this: mbModPath <-  (findGetMod cacheDir first) modLocs >>= return.msum
15:47:40 <alexj> I don't want findGetMod to run unless the module wasn't found earlier.
15:48:29 <alexj> modLocs are a list of locations modules may be found.
15:48:47 <alexj> it should run until one of them hits.
15:50:47 <alexj> I can rewrite this to explicitly only continue processing modlocs if the prior lookup failed, but I thought laziness would give me that for free.
15:52:38 <alexj> Lemmih: anyway, I'll stop whining.  Did you have a question abou SearchPath?
15:53:15 <Lemmih> Nope. Just making small talk. (:
15:53:20 <alexj> :- )
15:53:46 <alexj> then I'll keep whining :- )
15:55:18 <alexj> Lemmih: where are you located?
15:55:22 <Igloo> I think mapping unsafeInterleaveIO across it would do what you want (in practice, if not guaranteed)
15:55:32 <Lemmih> alexj: Copenhagen, Denmark.
15:55:53 <alexj> ah so you are just up late.
15:56:19 <Lemmih> You're also in GMT+1?
15:56:30 <alexj> I'm in NYC.  GMT+5
16:04:26 * Lemmih is interested in seeing how SearchPath performs against cabal-get.
16:05:19 <alexj> AFAIU they do different jobs....
16:05:39 <alexj> cabal-get takes a package as an argument, right?
16:06:52 <Lemmih> Yeah.
16:08:08 <alexj> can you pass it a packageURL?
16:08:29 <Lemmih> No.
16:08:36 <alexj> hrmm
16:09:28 <alexj> the workflow for searchpath is you do something like: searchPath ghc --make MyModule.hs --internet MyMap
16:09:55 <alexj> searchPath then looks in MyModule.hs finds all its import statements, looks up the modules in MyMap, and attempts to retrieve/install them.
16:10:31 <alexj> if mymap says that the module is in a package, then  eventually searchpath will download/install the package as well.
16:10:48 <alexj> I was hoping to use cabal-get to implement that functionality.
16:11:12 <Lemmih> Neat.
16:11:53 <alexj> thanks.  right now searchpath only works with naked modules.
16:12:27 <alexj> (modules exposed in directory structures)
16:13:00 <alexj> the current module map format is just modulename->URL
16:13:31 <alexj> if cabal-get doesn't work with URLs then supporting packages gets a little harder.
16:14:35 <Lemmih> Cabal-get is a library. You can make it do whatever you want. (:
16:14:54 <alexj> ok.  cool.
16:15:13 <alexj> can I give you my ideal scenario, you tell me if it makes sense?
16:15:34 <Lemmih> Sure.
16:16:53 <alexj> for packages that aren't simply directories of haskell modules, i'd like the url to point to a cabal file.
16:17:35 <alexj> more particularly a cabal file in an unpacked directory (not a tgz package)
16:18:22 <alexj> I'd then like to be able to use that cabal file to download the rest of the package as individual files.
16:19:03 <alexj> that way, publishing doesn't require anything other than exposing a darcs or svn repoistory.
16:19:44 <alexj> the searchpath builds the package client side and installs it.
16:20:25 <Igloo> You have a race condition if it's a live repo
16:20:25 <Lemmih> Many users wont appreciate living on the edge.
16:20:36 <alexj> it then import chases throught the package to find additional dependencies.
16:21:01 <alexj> sorry, missed a steo.
16:21:05 <alexj> step
16:21:18 <Lemmih> What about using the dependencies listed in the .cabal file?
16:21:37 <Igloo> Also, you are putting the burden on users if the owner of a package you use starts using modules from a package they don't have in their map, right?
16:21:40 <alexj> searchpath will allow maps that identify webdav/darcs versions of URLs
16:22:05 <alexj> so you can have a bleeding edge map or a fixed one.
16:24:43 <alexj> igloo: i don't understand the question.
16:25:03 <Igloo> You use module Foo from package foo
16:25:32 <Igloo> I, as the creator of foo/Foo, decide to use MySetModule in mysetpackage to implement the next version of foo/Foo
16:25:49 <Igloo> You then have to find where mysetpackage/MySetModule live by hand, right?
16:26:00 <alexj> lemmih: i hope searchpath makes build-depends unnecessary.  (see at length discussion on the list about problems with build-depends semantics)
16:27:48 <alexj> igloo: my hope/assumption is that you won't publish the new version of foo without publishing mysetpackage to the same map.
16:27:50 * Lemmih remembers disagreeing.
16:28:14 <alexj> or alternatively, map owners can refuse new versions of a package unless its modules also resolve.
16:28:33 <Igloo> Oh, so maps are distributed?
16:28:37 <alexj> yes.
16:28:49 <alexj> ideally the main map is at e.g. haskell.org
16:29:18 <alexj> I assume most people will end up using the haskell.org map, a local private map for their organizaiton, and a personal map for their pet stuff.
16:29:33 <alexj> but they can use more or less as they need.
16:29:51 <alexj> lemmih: let me make a convenience argument then.
16:31:10 <alexj> package owners need to be explicit about build-depends only if the import statements provide insufficient info.
16:32:24 <theorbtwo> Ahoy.
16:32:32 <Cale> Avast!
16:32:47 <theorbtwo> Any jhc people about?
16:33:18 <alexj> lemmih: is that reasonable?  (I am trying to minimize the amount of bookkeeping you do as producer/consumer of libs)
16:33:19 <Lunar^> http://linide.sourceforge.net/pugs-svngraph-6.2.5.png
16:33:20 <Lunar^> damn
16:33:24 * theorbtwo tries asking anyway.
16:33:47 <theorbtwo> I just tried compiling pugs with an up-to-the-minute jhc, and it doesn't like it one bit.
16:34:09 <theorbtwo> I'm not terribly suprised, but I was surprised that it gives a syntax error on what looks like a perfectly normal line.
16:34:46 <theorbtwo> Also, it gives a "src/Main.ho: openBinaryFile: does not exist (No such file or directory)" when trying to compile src/Main.hs, which seems somewhat backwards.
16:35:37 <Lemmih> alexj: I don't see adding a few words for every package as a big problem.
16:36:55 <lispy> main.ho
16:37:02 <lispy> hmm...not the best named file :)
16:37:05 <Igloo> Lunar^: I can't tell what that graph says
16:37:22 <alexj> lemmih: ok.  but is it ok if they are optional?
16:37:33 <lispy> i mean, i have several hoes and i use them in my garden
16:37:36 <lispy> who has a main ho?
16:37:55 * lispy stops making bad jokes
16:38:59 <Lemmih> alexj: It's your program. You decide what's OK (:
16:39:38 <alexj> fiar enough. does cabal automatically build-depends chase?
16:39:43 <alexj> cabal-get?
16:40:01 <Lemmih> Cabal-get does.
16:40:08 <alexj> oh. then that is the easier way to go.
16:40:09 <alexj> !
16:40:34 <alexj> no need to import chase into packages if cabal-get takes care of it!
16:40:44 <Lemmih> But it uses a HackageDB server to resolve package URLs.
16:41:54 <alexj> ok.  So I need some way to pass the hackage server URL to SearchPath
16:43:05 <alexj> does hackage expose the underlying datafile?
16:43:43 <Lemmih> JohnMeacham: You come as called.
16:43:55 <JohnMeacham> Was I summoned?
16:44:10 <JohnMeacham> I knew I felt something.
16:44:37 <Lemmih> theorbtwo: He's here now.
16:44:40 <_metaperl> :)
16:44:48 <Lemmih> alexj: datafile?
16:45:01 <Lunar^> Igloo: the graph says that Pugs development rate is still incrasin
16:45:13 <_metaperl> where is the graph?
16:45:22 <Lunar^> http://linide.sourceforge.net/pugs-svngraph-6.2.5.png
16:45:23 <theorbtwo> Oh, you're the jhc man?
16:45:52 <Lemmih> alexj: Cabal-get stores a local dependency graph. You can just change that to one with SearchPath urls.
16:45:55 <JohnMeacham> sure thing.
16:45:57 <theorbtwo> Trying to compile pugs with jhc.  It won't go.  <G>
16:46:06 <JohnMeacham> doesn't surprise me. it is a work in progress.
16:46:39 <theorbtwo> dumpGlob = (doParseWith $ \env _ -> do {glob <- liftSTM $ readTVar $ envGlobal env ... -- it gives a syntax error on the g in glob.
16:46:47 <_metaperl> escpecially since the ultiamte goal is to write p6 in p6
16:47:07 <JohnMeacham> Hmm..
16:47:10 <theorbtwo> I didn't expect it to go off the bat, but I also didn't expect it to die in such normal-looking code.
16:47:24 <theorbtwo> MP: jhc is an important part in that plan, I think.
16:47:55 <theorbtwo> The goal is to let jhc compile it to it's second intermediate form, and compile that to p6.
16:48:20 <autrijus> (or to have a PIR backend to JHC.)
16:48:32 <JohnMeacham> PIR?
16:48:32 <autrijus> JohnMeacham: great work, though. I enjoy reading Jhc's source.
16:48:42 <autrijus> JohnMeacham: Parrot intermediate code thing.
16:48:50 <autrijus> can be thought as an AST.
16:49:38 <autrijus> (but is really cleverly disguise three-address code)
16:49:40 <JohnMeacham> Ah. I was looking a litte at parrot. you would loose some efficiency since parrot is untyped.
16:50:10 <autrijus> aside from the int, float and str types, you mean?
16:51:26 <autrijus> if needed be, we can use special-purpose PMCs and opcodes with their own JIT forms to improve speed. but being slower than C is fine at this stage
16:51:29 <JohnMeacham> I mean, it still checks that one is working on valid types at run-time which is not needed for jhc's output.
16:51:49 <autrijus> oh. I understand that the native types are JITed to real registers
16:51:56 <autrijus> so not typechecking is done at that level
16:52:28 <autrijus> but sure, I expect it to be much slower than JHC->C. that is fine. :)
16:53:00 <alexj> lemmih: how do I get a secure version of the hackage database.  either I download a signed file or it the interface is exposed via ssl?  since people here seem to oppose SSL, I am asking how to do the former.
16:53:56 <Igloo> FWIW I don't oppose SSL, I just deny it (as used in the way you suggested) would do the same things GPG would
16:54:10 <Lunar^> _metaperl: that won't happen ;)
16:54:17 <JohnMeacham> But to what size register and which operations do you use? integer and floating point addition are different machine instructions. it would have been nicer (even for compiling perl) if parrot were strongly typed with a good universal type.
16:54:31 <Lunar^> _metaperl: Haskell will finally rule them all
16:54:45 <alexj> folks I'm sorry I have to run right now.  will follow later.
16:54:55 <lispy> JohnMeacham: even lisp compilers are using this now
16:54:59 <Lemmih> alexj: Hackage isn't secure yet. I'm hacking that right now.
16:55:06 <lispy> this idea of a strongly typed compiler
16:55:08 <theorbtwo> john, the register size is, IIRC, "at least 32 bits".
16:55:25 <mugwump> besides, you can't even load a float into a normal register for FP operations...
16:55:30 <mugwump> on most processors
16:55:40 <mugwump> s/most processors/x86/
16:55:40 <autrijus> JohnMeacham: that may very well be the case; I need to sleep now, though, so catch you later. :)
16:55:43 * autrijus waves &
16:55:43 <theorbtwo> It is strongly typed, in a way, if you consider the types to be int, float, string, and PMC (object).
16:55:49 <Lemmih> alexj: I don't even think it's necessary to sign the data.
16:55:58 <mugwump> theorbtwo: but no structs for objects!
16:56:31 <theorbtwo> mug: Eh?  You can certianly implement something an awful lot like a struct as a PMC.
16:56:50 <theorbtwo> (Very easily, since PMCs are generally implemented in C.)
16:58:37 <mugwump> ok.  I'm just thinking that going mov [edx+012], ax is quicker than going through a PMC
16:59:25 <mugwump> (that's an x86 op to load a register with offset contents of a struct)
16:59:28 <theorbtwo> Yes, mug, somewhat faster.
16:59:41 <JohnMeacham> I guess statically typed is more what I am trying to say. Although, perhaps it is possible to generate code in such a way that it will be "obvious" to the JIT compiler how things are layed out. that would depend a lot on its internals. An issue is that jhc spends a lot of time puting things into and taking them out of structures, if there isn't a way to declare statically typecheckd structures so run-time checks have to be used every time they are open
16:59:41 <JohnMeacham> ed or modified that could be a big performance hit.
16:59:49 <theorbtwo> But not terribly much, with a good C compiler, and a good JIT.
16:59:51 <JohnMeacham> but it is an interesting problem.
17:00:09 <theorbtwo> Aye, it is.
17:00:27 <mugwump> and I want it to automatically work on classes that are "is closed" on this new dialect of Haskell called Perl 6 :)
17:00:29 <theorbtwo>  haskell
17:00:58 <theorbtwo> Sorry, wrong window.
17:02:08 <theorbtwo> Ah, yeah, grin, that was it...
17:03:09 <theorbtwo> Anyway, yes, there will be some innefficencies in a grin->parrot compile vs a grin->C/C-- compile, but they shouldn't be too bad.
17:03:14 <JohnMeacham> theorbtwo: hmm.. looks like jhc might have problems with curly braced do notation when there is not a semicolon present.
17:03:43 <theorbtwo> ...and if they are, I suspect the parrot team can figure out a way to attack them.
17:03:53 <theorbtwo> Sorry, I just unformatted it to type it into IRC.
17:04:01 <theorbtwo> The actual file isn't formatted.
17:04:12 <JohnMeacham> theorbtwo: I never use curly braces so there is a good chance there are bugs there. I am hoping to eventually use the parser/lexer right out of the haskell libraries project so hopefully it will be more accurate.
17:04:24 <theorbtwo> You can svn co http://svn.openfourndry.org/pugs/ for a full copy of the source.
17:04:48 <theorbtwo> ...or http://svn.openfoundry.org/pugs/src/Main.hs for just that file.
17:05:19 <JohnMeacham> thorbtwo: svn: RA layer request failed
17:05:39 <theorbtwo> Hm, that's a new one to me.
17:06:15 <JohnMeacham> hmm. might be my svn version -- svn, version 0.17.1 (r4503)
17:06:32 <theorbtwo> Oh, typo: http://svn.openfoundry.org/pugs/
17:07:53 <theorbtwo> In any case, I expect pugs to not presently finish compiling -- it needs GADT, and parts of it need template haskell as well.
17:09:33 <theorbtwo> BTW: I really like your _ extension.  (And it matches perl6's yaddayaddayadda (...) magical term.)
17:09:49 <JohnMeacham> Ah. I see, jhc doesn't support the ghc extension of not requiring extra indentation when starting a new block. that really should be supported, I sort of consider not allowing it a typo in the reoport.
17:10:11 <JohnMeacham> theorbtwo: cool :) I am hoping it makes it into ghc.
17:10:44 <JohnMeacham> as well as the head and tail telling you where the call was that failed. it would have saved me so much debugging time when I was first starting out.
17:16:29 <JohnMeacham> I will add it to my todo list. that one would have bitten me eventually too as I use it all the time for short circuiting do's
17:25:34 <JohnMeacham> Hmm.. actually, with some modifications (like a simple statically typed product type) parrot looks like it could be an efficient backend for jhc. at least as efficient as .NET or JVM at least.
17:26:18 <JohnMeacham> (which suffer from the similar problem, product types are classes and imply a lot of overhead which is irrelevant)
17:26:57 <theorbtwo> Thanks, JM!
17:27:43 <theorbtwo> I think we should wait until we have something implemented to worry too much about where our innefficencies lay.
17:27:46 <Pseudonym> JohnMeacham: But is it any more overhead than the STG machine imposes?
17:28:02 <Pseudonym> A tagless word and a static structure for each kind of cell.
17:28:34 <Pseudonym> Plus all of the GC metadata, of course.
17:29:00 <JohnMeacham> Psudonym: perhaps not. but jhc gives up the STG overhead and its niceties for good speed reasons
17:29:04 <Pseudonym> Right.
17:29:18 <Pseudonym> Oh, I'm just saying that Parrot might be no worse than GHC.
17:29:40 <Pseudonym> i.e. not too bad
17:29:58 <Pseudonym> GHC is empirically useful, so jhc on Parrot might be just as useful.
17:33:38 <SamB> hmm, what should I do about this:
17:33:53 <SamB> /usr/local/bin/DrIFT ./Grin/PointsTo.hs -o /tmp/ghc9659.hspp
17:33:53 <SamB> The program ran out of heap memory.  (Current heapsize is 400000 bytes.)
17:33:53 <SamB> You can set a bigger size with e.g. +RTS -H4M -RTS (4M = four megabytes).
17:33:53 <SamB> GC stats:
17:33:53 <SamB>     Only 30 words after gc, need 32 words.
17:33:54 <SamB>   Used  12513237 words of heap.  Moved 40538105 words of heap in 464 gcs.
17:33:55 <SamB>   30 words to next gc.  Max live after gc: 113475 words.
17:33:57 <SamB> Insufficient heap memory.
17:35:53 <SamB> has anyone else gotten that compiling jhc?
17:39:42 <SamB> JohnMeacham: ?
17:41:59 <JohnMeacham> Oh. recompile DrIFT with ghc instead of nhc.
17:42:20 <JohnMeacham> nhc has some very small limit on the heap of programs compiled with it.
17:43:08 <JohnMeacham> I like how it refers to 4 megabytes as 'bigger'. (nhc was initial designed to self-compile on a machine with 4megs of RAM)
17:45:19 <SamB> oh, I had no clue that that was an NHC error message!
17:45:33 <SamB> the RTS stuff looked just like for GHC
17:45:39 <JohnMeacham> Yeah, it confused me too when I first saw it.
17:47:12 <SamB> so why did DrIFT get compiled with NHC?
17:47:30 <JohnMeacham> because it is what the autoconf script found first.
17:47:48 <JohnMeacham> Just pass --with-hc=ghc to ./configure (I think. )
17:48:24 <SamB> the description of --with-hc implied that I needed to give the path as well...
17:48:46 <JohnMeacham> I don't think you do.
17:49:22 <JohnMeacham> it is just the more common reason to use the option.
17:50:34 <SamB> would it be appropriate to change the configure script to look for ghc first?
17:51:45 <JohnMeacham> probably. this problem only started surfacing recently. I sort of think nhc should up its default heap size, 4megs seems awefully small nowadays.
17:52:03 <JohnMeacham> For the next release of DrIFT I will change it.
17:53:09 <SamB> release?
17:53:21 * SamB is running out of darcs
17:53:27 <am02> I've been trying to read an array straight out of the C heap, but am having problems doing so.
17:53:33 <am02> x <- peekArray (rows*cols) (getArrayPtr xv);
17:53:52 <blackdog> SamB: it's a non-renewable resource?
17:54:07 <am02> where getArrayPointer returns Ptr Int.
17:54:15 <SamB> blackdog: no silly! its like running out of cvs
17:54:18 <SamB> only better
17:54:38 <blackdog> i'd like to run out of cvs. :)
17:54:39 <am02> it just seg faults
17:55:02 <blackdog> actually, come to think of it, i can. only thing i was using it for was chakcvs...
17:55:13 <JohnMeacham> oh. or if someone sends me a darcs patch, I will gladly apply it too :)
17:55:49 <am02> any ideas chaps?
17:56:24 <JohnMeacham> am02: are you sure there are 'Int's in the array and not Word8,Word16's or something more esoteric?
17:57:10 <am02> its a C array of Ints
17:57:19 <am02> ints rather
17:57:55 <JohnMeacham> Then to be on the safe side, that should be 'Ptr CInt' but that is probably not the problem unless you are on a 64 bit system
17:58:54 <am02> ok, I've successfully written to it using (x :: Ptr Int) <- mallocArray (rows*cols);pokeArray x (elems (arr));
17:59:48 <JohnMeacham> Hmm.. is getArrayPtr xv NULL? it might help to use 'gdb' or another debugger to see why exactly it is segfaulting.
18:00:22 * SamB lets his sister play a game on his computer.. be back in half an hour or so...
18:02:03 <am02> good plan, I've not had to do that before.
18:05:38 <JohnMeacham> SamB: cool. thanks for the patch.
18:07:07 <am02> getArrayPtr xv isn't NULL, this is a quite odd.
19:37:19 * SamB wonders why jhc is taking so long to compile
19:37:55 * SamB can't help but wonder if it wouldn't be faster with --make...
20:57:06 <SamB> okay, how do I summon JohnMeacham?
21:01:48 * SamB wonders why jhc has so much signal and timer related stuff going on
21:02:07 * SamB guesses it is the GHC RTS?
21:46:41 <SamB> what does Barendregt mean?
21:48:14 <FrederikEaton> it's a name?
21:48:47 <FrederikEaton> SamB: JohnMeacham is on gale (see gale.org, yammer.net)
21:49:42 <SamB> Barendregt seems to be the name of a pass in jhc...
21:49:57 <SamB> or something like that
22:05:20 <shrimpx> anyone aware of a paper showing performance numbers on boxed vs unboxed integer arithmetic?
22:08:16 <Pseudonym> Maybe this one? http://citeseer.ist.psu.edu/appel88runtime.html
22:08:21 <Pseudonym> Don't know, can't remember.
22:08:47 <Pseudonym> http://citeseer.ist.psu.edu/leroy92unboxed.html <- Another possibility.
22:32:31 <musasabi> morning
23:55:42 <Itkovian> is ghc able to factor out common subexpressions in e.g. two where clauses of different functions (within the same module)?
23:56:07 <blackdog> inverse cut-and-paste, you mean? :)
