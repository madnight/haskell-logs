00:07:30 <Cale> ah, it's only projective determinacy that's been shown independent.
00:22:49 <a5> so i win :)
00:23:38 <a5> do you have a projective determinacy link?
00:24:01 <Lemmih> @pl \p -> (:) ("--prefix"++p)
00:24:02 <lambdabot> (:) . ("--prefix" ++)
00:26:05 <a5> Cale: you should try to solve this using AD: http://www.cse.ucsc.edu/~manfred/open/colt03.pdf
00:30:32 <a5> a psychoanalyst doesn't make you smarter or wiser or clearer - he only frees you, a little bit, from the repetition compulsion that controls your life. now, apply that to programming.
00:32:18 <Cale> heh
00:41:03 <basti_> hi
00:41:35 * Lemmih wonders if he's the only programer who sings when hacking.
00:41:47 * basti_ sometimes sings along to music
00:42:43 <basti_> or rather, hums
00:42:57 <Lemmih> I'm most productive when listing to soft rock.
00:43:52 <lightstep> i used to hear grunge when doing C, haskell goes well with soft rock
00:44:19 <a5> there should be a jagged rock
00:44:55 <a5> porous rock
00:45:03 <a5> sorry
00:45:32 <tuomov> do the hardware people listen to hard rock then?
00:46:15 <a5> i've seen them listen to rap, electronica
00:46:25 * Lemmih cranks up Linking Park - One Step Closer and returns to programming.
00:46:48 <Lemmih> *Linkin
00:47:36 <tuomov> linking park would be like a compilation farm but for linking..
00:48:32 <JohnMeacham> Autechre is the perfect haskell theme music.
00:52:09 * Lemmih throws an angry lambda at the unfinished Cabal.
00:55:57 <Spherical`> Linkin Krap
00:56:23 <Spherical`> Listen to some decent music, produced by a decent band please.
00:56:48 <Lemmih> My code says Linkin part is fair.
00:58:26 <Spherical`> Coding while listening to Linkin Park is similar to listen to the backstreet boys, monotonous, and boring lyrics.. Anyone can whine on the mic and get paid for it.
00:59:07 <Lemmih> Write better code than and I'll reconsider.
00:59:24 <Lemmih> *than me
00:59:43 <Lemmih> Stupid laptop keyboard!
00:59:44 <mflux> I just avoid anything with real lyrics, distracts my focus
01:00:02 <mflux> and infact repetitive is ok for me, I listen to di.fm ;)
01:02:43 <Spherical`> I'm not competing nor proving myself to a Linkin Park fan Lemmih, It's pointless.
01:05:07 <Lemmih> Whatever.
01:05:58 <tuomov> decipherable lyrics are slightly distracting... rapping is annoying... death metal growls are ok :)
01:08:32 <Spherical`> Lemmih, matter of opinion
01:08:43 * Cale listens to Steely Dan.
01:09:45 <tuomov> isis - panopticon
01:10:01 * Spherical` listens to Rothmetal
01:17:46 <mwc> Steely Dan is good stuff
01:17:49 <mwc> Do it again?
01:18:09 <mwc> that song is acoustic crack
01:19:09 <Cale> :)
01:19:46 <mwc> Although Electric Six is acoustic heroine
01:22:19 * basti_ usually listens to electronica or metal
01:23:00 <Spherical`> I downloaded some steely Cale, he's good, but repetition of the 2003 Album gets boring after a while.
01:24:02 <Spherical`> As for your "Stuff", that's brill!
01:24:25 <Cale> yeah, Stuff is great
01:25:35 <mwc> What stuff is that?
01:25:45 <mwc> basti_: you might like ELectric six, it's hard rock and disco
01:26:52 <Spherical`> basti_: you may like Satriani also.
01:29:36 <mwc> Don't you hate it when you're up late and start listening to power rock
01:29:48 <mwc> and then you keep getting onto faster and faster songs
01:29:56 <mwc> and then you can't find anything that doesn't feel too slow?
01:32:42 <Spherical`> mwc, I used to do that while listening to FearFactory in the backgroud while playing UT. I eventually got a real bad headache while sweating and almost collapsed :)..
01:33:08 <mwc> Spherical`: heh, yeah, I get sweaty hands and a pounding heart
01:33:15 <Spherical`> Probably because I was high on sugar and wasn't aware that it was 7:00 in the morning and I had no sleep. Yes.
01:33:32 <mwc> Sigh, I miss high school summer vacations.
01:33:36 <mwc> Good times.
01:33:44 <drano> mauke: LOL
01:33:57 * mwc rubs eyes
01:34:05 <mwc> what was that about?
01:34:29 <Spherical`> Some kind of evil revenge.
01:35:52 <Corion> I'm despairing with importing Win32 DLL functions - I have: foreign import stdcall "static WinBase.h GetCurrentProcessID" c_getProcessID :: Int -- but ghc tells me src/Pugs/Compat.o(.text+0x191):fake: undefined reference to `GetCurrentProcessID@0' when linking. How do I make it look in Kernel32.dll ?
01:36:00 <mwc> Bwhahahahah
01:36:00 <mwc> http://64.233.161.104/search?q=cache:vlX_V9SqScUJ:www.apa.org/journals/features/psp7761121.pdf+Unskilled+and+Unaware+of+It:+How+Difficulties+in+Recognizing+One%27s+Own+Incompetence+Lead+to+Inflated+Self-Assessments&hl=en&client=safari
01:36:36 <Corion> (of course, any handy examples of how to use Foreign would maybe help too)
01:37:00 <mwc> I'm gonna post that in the physics help room :P
01:37:10 <Spherical`> Points to Lemmih and *laughs*
01:39:19 <mwc> Corion: can you pass a -l flag on Win32 or something like it?
01:39:29 <mwc> -lKernel32 or something?
01:39:43 <Corion> mwc: It's already in my ghc invocation, yes.
01:40:14 <Corion> ... but somehow, ghc mangles the function name to "GetCurrentProcessID@0", maybe if I could make that go away, but I don't know how
01:40:30 <Spherical`> mwc, Is that paper a joke? Lemon juice?
01:40:51 <mwc> Spherical`: it's a PDF on the APA (American Psychological Association)
01:41:15 <mwc> Corion: sorry, I can't help you, I don't know jack about win 32 linking
01:42:00 <mwc> Out of curiosity, has Pugs been ported to Windows?
01:42:15 <mwc> I assume so, and then this is really a build bug it seems
01:42:21 <Lemmih> Spherical`: Huh?
01:50:07 <lightstep> mwc, yes, it has
01:51:25 <mwc> Corion: maybe try the Pugs mailing list archives... sounds like it's something hinky with the build
01:52:03 <Corion> mwc: I break the build myself :) Plain Pugs builds, but I'm trying to link in some stuff from the Win32 API
01:52:17 <mwc> ahh
01:52:26 <Spherical`> mwc, thanks for the link, a good read.
01:53:25 <mwc> What linker does GHC use on windows?
01:54:33 <Corion> mwc: I don't know - I assume a built-in linker
01:55:23 <mwc> I assumed GHC involked the system linker...
01:56:09 <Corion> Hmmm - I didn't have to set up any special paths to get GHC to work (and the linker and C compiler are not usually in my path)
02:00:45 <Corion> Gah. I give it up with GHC for today :)
02:00:46 <mwc> Corion: did you try the -L flag to include the directory kernel32.dll is in in the lib search process>
02:00:50 <Corion> Thanks all!
02:00:59 <mwc> Corion: -lkernel32 ?
02:01:07 <Corion> mwc: Yep - I have -L (path to my libdir) and -lkernel32 on the command line
02:02:01 <mwc> That's all I can think of, I don't know enough about windows linking to help you further
02:02:28 <Corion> Ah - a solution will eventually present itself :)
02:15:11 <bourbaki> moin
02:48:49 <bourbaki> HAHAHA! http://pdos.csail.mit.edu/scigen/#examples
02:49:06 <bourbaki> SCIgen is a program that generates random Computer Science research papers, including graphs, figures, and citations. It uses a hand-written context-free grammar to form all elements of the papers. Our aim here is to maximize amusement, rather than coherence.
03:33:03 <boegel> hey Oejet !
03:33:23 <boegel> bourbaki: sounds nifty
03:34:53 <Oejet> Good day, boegel.
03:52:03 <Spherical`> Anyone done any networking design.. I've only set up small home networks before but now I have a situation.. I have four floors at this health centre the basement has the PoP.. I have stairs, and an elevator, I'm hoping the stairwell will serve as to connect. At the front line of the PoP I have a firewall and modem and then a router.. using repeaters to get to the second floor.. and I'm thinking of using a switch and router on
03:52:03 <Spherical`> each. Any ideas? I need printing too.
05:39:55 * boegel returns
05:40:02 * boegel has his gf on his back
05:40:35 <Lemmih> Sounds fun.
05:40:43 <boegel> it is !
05:40:53 <boegel> she's singing too and all that
05:42:44 <dcoutts_> boegel, BTW I've put up a thing about HRay on the Gtk2Hs website, I just wanted to check with you that it's ok: http://haskell.org/gtk2hs/archives/category/screenshots/
05:43:39 <dcoutts_> if you think anything needs changing, just say so
05:45:54 <dcoutts_> speaking of websites, JaffaCake: when you've got a sec, would you mind updating the link to Gtk2Hs that's on the GHC website? We now live at http://haskell.org/gtk2hs/
05:46:07 <JaffaCake> sure thing
05:46:24 <dcoutts_> ta muchly
05:46:49 <bourbaki> moin
05:47:36 <JaffaCake> dcoutts_: done, how's that for service
05:47:47 <dcoutts_> excelent service :-)
05:49:29 <boegel> okay dcoutts , lemme check that
05:51:37 <boegel> dcoutts: I could provide you with some more screenshots, but I don't know if that's of any use to you, since only the picture would differ :)... maybe a render with a smaller resolutoin, to show what would happen is the image doesn't fill the scroll box ?
05:51:47 <bourbaki> boegel has your friend that sound haskell guy his lib online?
05:51:57 <boegel> bourbaki: not yet
05:52:07 <bourbaki> i just thought about something like a 303 in haskell yesterday
05:52:11 <boegel> he does have some examples online, but those are just sound files
05:52:25 <bourbaki> i wonder if you can teach it to produce bird songs
05:52:32 <bourbaki> whats the url?
05:53:16 <boegel> bourbaki: http://studwww.ugent.be/~arbracke/THESIS/index.html (it's in Dutch though)
05:53:26 <boegel> maybe you can mail the guy, pm me for his email adress
05:53:37 <dcoutts_> boegel, thank's for the offer, but we've probably got enough screenshots of HRay, since what we want to show off from the gtk2hs point of view is the UI parts and the fact that it runs on WinXP with the right themes etc. The entry links to your HRay website so people can see all your other pretty images.
05:54:15 <boegel> dcoutts: ok, fine with me :) thanks for adding my shots :D it's cool to be famous :p
05:54:25 <dcoutts_> :-)
05:55:03 <boegel> omg, I really am a smiley addict
05:55:36 <dcoutts_> 3 different ones all in one line!
05:55:44 <bourbaki> or maybe just a happy person?
05:56:04 <Lemmih> Are there Cabal packages for gtk2hs?
05:56:18 <boegel> bourbaki: do you speak Dutch ?
05:56:43 <dcoutts_> Lemmih, I don't think cabal is advanced enough yet to cope with the gtk2hs build system :-(
05:56:53 <bourbaki> no but with a little bit of reading i guess i can figure out somethings
05:57:09 <bourbaki> boegel cant you ask your friend if hell get in the chan sometimes again?
05:57:19 <boegel> oh, because he is finishing up his thesis text
05:57:20 <dcoutts_> Lemmih, we currently use a 'standard' ./configure; make; make install; autotools system
05:57:22 <boegel> bourbaki: I can :)
05:57:30 <boegel> lemme see if he's online right now
05:57:35 <bourbaki> cool
05:57:57 <bourbaki> cause i want to ask him some things if his lib will be able to do the things i am looking for
05:58:06 <boegel> bourbaki: he isn't right now, but ask me again when you see me some time later
05:58:16 <Lemmih> dcoutts_: Is there anything special in the makefile?
05:58:24 <dcoutts_> Lemmih, If you mean does gtk2hs work with ghc 6.4 then the answer is yes - if you apply the appropriate patch, ask me if you need that
05:58:30 <boegel> bourbaki: he'll like the interest
05:58:34 <bourbaki> since its spring a lot of birds where singing when i got to bed and i wondered if its possible to generate all these cool birdsongs
05:59:06 <bourbaki> its a little cooperation in sound and "learning" :)
05:59:15 <boegel> bourbaki: the filters he defined are all quite mathematical, so if you can define bird songs formally, it could work :)
05:59:32 <bourbaki> thats the idea
05:59:43 <bourbaki> and then derive real bird songs
05:59:53 <dcoutts_> Lemmih, gtk2hs uses three code generators and consists of 7 packages with dependanceis between them, some of which are optional. I don't think Cabal is aiming at our complexity of project yet.
06:00:13 <bourbaki> i just would need something like a metric and then project the things in the different filters or build the derivative
06:00:26 <dcoutts_> anyway, must go... I've got a practical to teach. :-)
06:01:06 <Lemmih> dcoutts_: I'll definitely ask for the patch once I get some time off.
06:01:56 <bourbaki> boegel i want to build something like a 303
06:02:06 <bourbaki> that should defenetly be possible with the filters
06:02:10 <boegel> what's that ?
06:02:26 <bourbaki> thats one of these sound makeing machines sec
06:02:32 <ozone> weeeeeeeeeeeowwwwww
06:02:39 <ozone> ^ 303
06:02:44 <bourbaki> heh
06:03:09 <bourbaki> i was told that there are guys who even rendered speach with that machine
06:03:53 <boegel> does it need a person who swings a handle ?
06:03:54 <ozone> bourbaki: the phrase "too much free time" comes to mind :)
06:04:18 <bourbaki> ozone heh its just that i think that its very soothing to hear birds
06:04:27 <bourbaki> boegel yes irl that is the case
06:05:43 <boegel> and you want to use that thing to sing like a bird ? :|
06:06:05 <bourbaki> yes
06:06:20 <bourbaki> i want that machine to lear to sing certain bird songs
06:06:30 <bourbaki> http://www.tb-303.org/
06:07:32 <boegel> oh, I think I have a different machine in mind :D
06:08:18 <bourbaki> its just a collection of filters actually
06:08:36 <bourbaki> with sliders that you can use and buttons to switch it on and off
06:09:47 <boegel> I asked the guy if he could come online, I'll see if he'll react
06:10:19 <bourbaki> k
06:25:01 <bourbaki> boegel and how is your thesis comeing forth?
06:26:15 <boegel> bourbaki: not as fast as I've have hoped
06:26:24 <boegel> but I'll get there
06:26:44 <Spherical`> boegel, nice thesis project, how long have you been working on it?
06:26:46 <boegel> I have to make sure my model is abstract enough, and doesn't entangle implementation details
06:27:09 <boegel> Spherical`: since August last year, but in between other projects we have to do for school
06:27:24 <boegel> Spherical`: do you mean the sound filters stuff ?
06:27:37 <Spherical`> No, I'm refering to the rays?
06:27:49 <Spherical`> referring*
06:28:05 <Spherical`> That is yours is it not?
06:28:47 <boegel> Spherical`: it is, yes
06:29:15 <boegel> I had hoped to implement more stuff, but hey
06:29:31 <boegel> bourbaki: I'm not getting any reply from the filter guy, I'm sorry
06:30:22 <bourbaki> np
06:30:36 <bourbaki> im searching for papers on that topic then ill read it and scrap the idea heh
06:30:45 <bourbaki> once i know how to do it in general
06:33:17 <boegel> bourbaki: okay, when he is online, and you're active in here, I'll inform you
06:34:08 <xerox> yo
06:34:16 <boegel> y0w
06:35:07 <boegel> Spherical`: if you're interested, you can help with the devellopment of a 3D modelling program in Haskell :p
06:45:22 <Spherical`> boegel, If there's a space open to the project in the summer, and you give me more details I may be interested.
06:48:19 <boegel> Spherical`: so far, there is no project yet :D
06:48:27 <boegel> but we'll see
06:48:43 <Spherical`> I see, when do you graduate?
06:48:43 <boegel> it depends how active I'll be in here when my thesis is done and what kind of work I'll do
06:48:47 <boegel> June
06:48:56 <boegel> if everything goes to plan
06:49:02 <boegel> but I might to a Phd afterwards
06:49:13 <boegel> setting up a project then should work ok
06:49:21 <boegel> I have to go now
06:49:34 <bourbaki> bye
06:49:37 <boegel> ttyl
06:49:40 <boegel> bye
06:49:44 <Spherical`> bye, we'll discuss another time.
06:50:09 <Spherical`> :)
06:59:17 <autark-jp> do we have a pastebot in here?
06:59:23 <tuomov> @paste
06:59:24 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
06:59:30 <autark-jp> :)
06:59:44 <tuomov> there's also some proper pastebin somewhere..
06:59:59 <xerox> lisppaste2: url?
07:00:00 <lisppaste2> To use the lisppaste bot, visit http://paste.lisp.org/new/haskell and enter your paste.
07:00:08 <tuomov> I mean, the tfk one
07:00:19 <TFK> hbin.dyndns.org
07:00:21 <xerox> Oh, yes.
07:00:21 <TFK> :-D
07:00:24 <autark-jp> nice
07:01:32 <TFK> Hopefully I'll improve it with time to make it worthy for being hosted on a permanent server.
07:02:45 <lisppaste2> autark pasted "inspecting a parser" at http://paste.lisp.org/display/7966
07:03:50 <autark-jp> I'd like to "inspect" the parser object(?) to find out what it was supposed to match.
07:04:06 <autark-jp> now, is it a sane thought at all?
07:05:00 <autark-jp> also, please excuse my somewhat weird terminology ... going on haskell day 2.
07:56:44 <bourbaki> is anyone of you a network architect?
08:10:20 <bringert> I can't seem to find a download link for the crypto library
08:10:41 <bringert> http://www.haskell.org/crypto/ doesn't have one
08:12:31 <shelarcy> See userguide.
08:13:42 <bringert> it only seems to be available from darcs
08:14:53 <bringert> I wan't to offer source tarball for my packages which depend on the crypto lib, without requiring users to install darcs
08:15:07 <bringert> s/wan't/want/
08:15:37 <bringert> I mean, I like darcs and use it myself, but I don't think that every user of the library should have to install darcs
08:16:27 <shelarcy> Hmm, I don know where is another package.
08:18:25 <shelarcy> How about you also supply crypto lib tarball?
08:24:17 <TFK> Isn't it possible to get a snapshot of the repository and bundle it with your app?
08:25:33 <bringert> sure, but it's not an app, it's two libraries which require the crypto lib
08:27:56 <TFK> again, you could provide source snapshots.
08:28:08 <TFK> (right?)
08:29:27 <bringert> sure
08:32:02 <bringert> it just seems unnecessary, I've emailed Dominic about it
08:42:11 * xerox is wondering why every time he's coding in Haskell he finishes writing fold[rl] + Arrows.
09:06:37 <bringert> @seen stepcut
09:06:38 <lambdabot> I saw stepcut leaving #haskell 15 hours and 48 seconds ago.
09:10:39 <Lemmih> Greetings SyntaxNinja.
09:11:09 <SyntaxNinja> hiya Lemmih
09:11:13 <SyntaxNinja> so I was thinking about The Problem.
09:11:30 <SyntaxNinja> Lemmih: and I guess we'll have to have secure packages and insecure packages
09:11:39 <SyntaxNinja> at least until we build a bigger infrastructure with accounts and stuff
09:12:16 * Lemmih doesn't see the problem.
09:12:26 <Lemmih> Perhaps because I haven't slept for 18 hours (:
09:12:27 <SyntaxNinja> and cabal-get will have to ask you if you want to install an unverified package
09:12:42 <SyntaxNinja> Lemmih: well, we probably want Anyone to upload packages, but we don't have Anyone's key
09:12:57 <SyntaxNinja> but if Someone (with a key) uploads a package, we don't want Anyone to be able to overwrite it
09:13:07 <SyntaxNinja> so we have to make a distinction between Someone and Anyone's packages.
09:13:40 <Lemmih> What about requiring a public key?
09:13:44 <SyntaxNinja> but we _hackage won't_ sign packages uploaded by Anyone
09:13:48 <SyntaxNinja> Lemmih: for Anyone you mean?
09:14:01 <Lemmih> Yes.
09:14:38 <SyntaxNinja> well, a public key is useless until a trusted person signs it.  we have a way to bootstrap trust around here because of several Debian people having key signed by trusted folks.
09:14:48 <SyntaxNinja> so it's not just a matter of generating a public key
09:14:57 <SyntaxNinja> this makes met hink we should have a keysigning party at ICFP actually
09:15:09 <Gahhh> you need a debian CA
09:15:31 <Lemmih> CA?
09:15:41 <SyntaxNinja> Gahhh: what do you mean?
09:15:46 <thebug> certificate authority
09:15:47 <SyntaxNinja> Lemmih: Certifiate Authority
09:16:15 <Gahhh> SyntaxNinja: if you don't have a central CA, it's going to get out of hand.
09:16:24 <Lemmih> Isn't that exactly what we don't want? (:
09:16:32 <SyntaxNinja> Gahhh: what do you mean get out of hand?
09:17:09 <SyntaxNinja> it's not like there are going to be a _huge_ number of uploaders, at least at first.
09:17:34 <Gahhh> You suggested signing each other's keys, but that's essentially many people acting like a CA already. It's better to have a designated person imho.
09:19:04 <SyntaxNinja> Gahhh: well, to start out, we need a way to bootstrap. maybe you meant a Haskell CA? the thing is, we already have a web of trust between a handful of us w/ key sin the debian keyring
09:19:41 <SyntaxNinja> Debian doesn't have a central CA
09:19:56 <SyntaxNinja> but to get to upload packages is more than just having a key signed also
09:21:18 <SyntaxNinja> Lemmih: do you understand what I'm getting at?
09:25:49 <Lemmih> Kinda.
09:26:41 <SyntaxNinja> Lemmih: let me know if you have specific questions
09:26:48 <Lemmih> Still don't see why uploading your public key is a problem.
09:27:26 <basti_> i thought thats the idea of a public key.
09:28:10 <SyntaxNinja> basti_: what is?
09:28:26 <basti_> uploading it somewhere
09:28:41 <SyntaxNinja> Lemmih, basti_: what if I upload a public key and claim that it's from you, but actually, it's on I generated
09:28:46 <SyntaxNinja> Lemmih: now I can upload packages, pretending to be you
09:29:02 <basti_> yes.
09:29:18 <basti_> thats why you'd have to authenticate yourself as me.
09:29:22 <fraxtal> That's why you have keys signed by other people
09:29:27 <Lemmih> No you can't. You don't have my private key.
09:29:39 <basti_> well if he pretended to be you, he could
09:29:46 <basti_> and if he would be able to pull the stunt
09:30:00 <basti_> like, if its a new keypair, sign it with the old one
09:30:01 <Lemmih> He could make a signature like me?
09:30:13 <basti_> no he couldnt make the signature you can make with your key
09:30:16 <basti_> never.
09:30:40 <Lemmih> Then he can't pretend to be me.
09:30:41 <Igloo> Are we trying to authenticate people or to provide gpg sigs for users?
09:31:02 <Lemmih> Is there something I completely don't get here?
09:31:16 <Igloo> Lemmih: I can make a sig with your name on, but not a sig with your key
09:31:19 <SyntaxNinja> Lemmih: you have to have a way to tie a public key to the person who holds the private key
09:31:39 <basti_> well for example, I could make a new keypair, pretend being SyntaxNinja and then send you my public key
09:31:58 <basti_> then you wouldnt have a chance of recognizing me as being not SyntaxNinja.
09:31:59 <Igloo> If we're just trying to authenticate people I'd say just using a username/password was simpler, though
09:32:10 <basti_> somehow.
09:32:13 <SyntaxNinja> Igloo: we want to sign packages
09:32:31 <Igloo> Fair enough
09:32:42 <Lemmih> SyntaxNinja: Why?
09:33:34 <SyntaxNinja> Lemmih: so that the person using cabal-get can verify that the packages are from who they claim to be, especially if there's more than one hackage in the future
09:34:25 <SyntaxNinja> Lemmih: we may have a username-password pair on the hackage server, but there's no way for the end-user to verify that something hasn't  been hijacked in between
09:34:30 <SyntaxNinja> him and the server
09:35:35 <Lemmih> Didn't we agree on omitting any package checking in cabal-get?
09:35:58 <SyntaxNinja> Lemmih: just for the first phase
09:36:15 <SyntaxNinja> Lemmih: but the structure should be in place so that we have a set of verified packages in the database
09:36:24 <Lemmih> Oh.
09:37:30 <SyntaxNinja> because if people upload 100 packages, none of them signed (because we use some other mechanism) then maybe we'll have to have everyone re-upload signed packages later, which would be annoying
09:38:17 <Igloo> Please don't delay making hackage available until signing is in place
09:39:03 <SyntaxNinja> Igloo: I think for the forseeable future, we'll have signed and unsigned packages.
09:40:02 <Igloo> Right, but if it'll take time to write the signed package support then it would be better to have it usable without it sooner
09:40:17 <SyntaxNinja> the only things hackage is actually waiting on right now are 1) dns and 2) a new cabal release
09:40:30 <Igloo> Oh, neat  :-)
09:40:42 <SyntaxNinja> unless Lemmih has other plans :)
09:41:07 <Igloo> Does that mean the cabal in ghc6.4 et al is deficient in some way?
09:41:50 <Lemmih> Only if you want to build cabal-get, I think.
09:41:51 <SyntaxNinja> Igloo: yeah, cabal-get won't work with it, because it didn't expose some functions that cabal-get needed
09:42:02 <SyntaxNinja> (mainly)
09:43:33 * Lemmih doesn't like the idea of having signed and unsigned packages.
09:44:09 <SyntaxNinja> Lemmih: but you said you wanted anyone to be able to upload packages
09:44:21 <SyntaxNinja> which I agree with
09:45:22 <Lemmih> I'm afraid people would upload unsigned packages because it's easier.
09:46:08 <Lemmih> And automatically downloading and running code (possibly as root) is a really bad idea when everyone can edit it.
09:47:13 <Igloo> Don't forget most people are going to ignore warnings saying something has been signed by a key they don't trust
09:47:32 <SyntaxNinja> Lemmih: making a key is easy, making a trusted key is hard
09:48:03 <SyntaxNinja> Lemmih: if we enforce trustedness from the start, only a handful of us will be able to upload, and that wouldn't include you! (if we were strict about it)
09:48:38 <SyntaxNinja> Lemmih: to get your key signed, you'd have to come meet someone in person. there's probably a Debian person in your city who we could find to sign your key for us, though.
09:48:46 * Igloo doesn't have a problem with signed-uploads-only, but it means you have to make it work all by itself on common platforms (including Windows)
09:49:24 <Igloo> FSVO "you"
09:49:42 <Lemmih> FSVO?
09:49:54 <SyntaxNinja> Igloo: don't see what you're getting at
09:49:57 <Igloo> For Some Value Of
09:50:48 <Igloo> SyntaxNinja: You can't tell people to sign this file and then cabal-put it, cabal-put has to do any signing itself
09:51:00 <Igloo> I imagine that isn't difficult, but it does have to be done
09:51:55 <SyntaxNinja> Igloo: that's the plan
09:52:09 <SyntaxNinja> Igloo: in fact, that's the point of cabal-put, right now there's just a web interface
09:52:17 <SyntaxNinja> Igloo: but don't ask me about windows, I don't know of such things
09:52:25 * SyntaxNinja puts off reading libraries@
09:52:38 <Lemmih> Why does the key have to be trusted?
09:52:47 <Igloo> Lemmih: What's the point otherwise?
09:53:06 <Lemmih> Igloo: That other people can't change the package you uploaded.
09:53:19 <SyntaxNinja> Igloo: do you know of anyone in Copenhagen?
09:53:43 <Igloo> Ah, so you only want this as proof of ownership when updating, not proof the code doesn't rm -rf /?
09:53:48 <SyntaxNinja> Lemmih: untrusted keys are only an illusion of security, not the real thing.  they defeat many trivial attacks.
09:53:58 <Igloo> SyntaxNinja: For keysigning you mean?
09:54:02 <SyntaxNinja> Igloo: ja
09:54:11 <Lemmih> Igloo: Exactly.
09:54:29 <Igloo> 2 listed on http://nm.debian.org/gpg_offer.php
09:55:05 <Igloo> Lemmih: OK, you also need to cope with packages being maintained by multiple people, packages being taken over by people and people changing their keys
09:55:44 <Palle> SyntaxNinja, JLouis lives near copenhagen, if you are searching people there..
09:55:52 <SyntaxNinja> IMO, it would be far better to go without keys than to go with untrusted keys.
09:56:00 <Lemmih> Igloo: That wouldn't be a problem.
09:59:01 * Igloo thinks that is a problem better handled by social convention than technical means
09:59:33 <SyntaxNinja> Igloo: what is?
09:59:46 <Igloo> Package hijacking
10:00:18 <Lemmih> Allowing anyone to upload a package without admin intervention is/was the one goal of Hackage.
10:01:04 <Igloo> cabal-put should just make you confirm if you aren't the maintainer or if the maintainer has changed IMO
10:01:32 <SyntaxNinja> Lemmih: I thought you were concerned about security as well?
10:02:14 <Lemmih> SyntaxNinja: I am. That's why I want to sign the packages.
10:02:41 <SyntaxNinja> Lemmih: but do you want to allow only trusted keys or not?
10:03:53 <Lemmih> I want to disallow people from changing (say) Cabal-1.0 but still be able to upload FakeCabal-1.0.
10:04:04 <Igloo> I think we should make a list of issues, and note for each one whether and how hackage should solve it
10:05:38 <SyntaxNinja> Igloo: yeah.
10:06:13 <SyntaxNinja> Lemmih: that's why I wanted trusted and untrusted packages. I guess we could have those correspond to trusted vs untrusted keys, instead of signed and unsigned packages
10:06:14 <Igloo> Oh, and rationale for why they are solved or not
10:06:58 <Igloo> "trusted" is a fuzzy notion, too. How long a path is acceptable before something becomes trusted? Trusted by the user, by hackage, or what?
10:07:07 <Lemmih> SyntaxNinja: That sounds a lot better.
10:07:11 <Igloo> Err, before something becomes untrusted I mean
10:07:58 <SyntaxNinja> Igloo: yeah.
10:12:13 <Lemmih> It would be great if you guys could write the list.
10:12:36 <Lemmih> I'm going to bed. See ya later.
10:14:19 <boegel> bye Lemmih, sleep tight
10:18:36 <SyntaxNinja> l8r Lemmih. thanks.
10:52:26 <SyntaxNinja> where's shapr, he needs to keep things lively around here
10:52:32 <SyntaxNinja> I'll try...
10:52:39 <SyntaxNinja> Unicycling is great! I Jumped yesterday!
10:53:01 <SyntaxNinja> Ihad an idea of combining unicycles with Arrows and John Hughes paper on Igloo's debian work!
10:53:17 * SyntaxNinja boings
10:53:37 <SyntaxNinja> <--- out of breath
10:53:40 <Igloo> Somehow it's just not the same  :-)
10:56:37 * SyntaxNinja nods
10:59:13 <bourbaki> moin
11:10:20 * SamB can't find the HSQL page
11:10:22 <SamB> @google hsql
11:10:24 <lambdabot> http://hsqldb.sourceforge.net/
11:11:26 * SamB wonders if perhaps he should try the first link even when it doesn't look too promising
11:11:50 * SamB finds out that... no, he should not
11:12:59 <SamB> @listcommands
11:13:00 <lambdabot> all-dicts arr babel define definitions del-definition devils dice dict
11:13:00 <lambdabot> dict-help docs dummy dynamic-load dynamic-reload dynamic-unload easton
11:13:00 <lambdabot> echo elements eurohaskell eval fact fact-cons fact-delete fact-set fac
11:13:00 <lambdabot> t-snoc fact-update foldoc fortune gazetteer get-definition ghc google
11:13:00 <lambdabot> help hitchcock index jargon join karma karma+ karma- kind learn leave
11:13:01 <lambdabot> listchans listcommands listmodules lojban moo more msg part paste pl p
11:13:02 <musasabi> Are you interested in a cabal or non-cabal version?
11:13:03 <lambdabot> l-resume plugs pointless prelude quit quote reconnect remember resume
11:13:05 <lambdabot> [3 @more lines]
11:13:23 <SamB> that looks awful! its cutting off words in the middle!
11:13:32 <SyntaxNinja> @google Krasimir Angelov hsql
11:13:34 <lambdabot> http://www.mail-archive.com/haskell@haskell.org/msg13362.html
11:13:45 <Lemmih> http://htoolkit.sf.net
11:14:00 <SyntaxNinja> Lemmih: you're awake
11:14:02 <Lemmih> (I'm not here, I'm sleeping)
11:14:28 <SyntaxNinja> Lemmih: so... those packages need to be uploaded again, OR more likely we need to fix something in hackageDB
11:14:38 <SyntaxNinja> because they report the old location of the package file
11:14:51 <Lemmih> What packages?
11:15:07 <SyntaxNinja> when you upload, I'm not sure you want to record the value in hackage.conf when uploading a package
11:15:07 <SamB> maybe google would be better able to find HSQL if it had its own URL
11:15:11 <SyntaxNinja> Lemmih: here for instance http://haskell.galois.com/cgi-bin/hackage?action=info&package=hsql
11:15:28 <SyntaxNinja> Lemmih: and the URL is going to change again when we have the new DNS
11:15:55 <Lemmih> SyntaxNinja: But you do. It's not always that we want HackageDB to host the package.
11:16:11 <SamB> also, it might be usefull if the release announcements had a URL in sight
11:16:30 <Lemmih> But it should probably figure out the server name on its own.
11:16:40 <SyntaxNinja> Lemmih: only in the case where the package-url isn't given
11:16:46 <SyntaxNinja> (by the .cabal file)
11:16:55 <boegel> bourbaki: are you active ?
11:16:59 <SyntaxNinja> Lemmih: so yeah, while displaying, it should build the path from the hackage.conf file, not the database
11:17:10 <boegel> Lemmih: weren't you going to bed like an hour ago ?
11:17:13 <SyntaxNinja> but you might record _something_ in the database
11:18:40 <SyntaxNinja> Lemmih: seewhatim'saying?
11:18:40 <mflux> is there a Event-module similar to Ocaml (or ConcurrentML where Ocaml got it from) for haskell?
11:19:20 <Lemmih> boegel: I'm IRCing from bed with my laptop /-: Perhaps I should seek professional help about IRC addiction (:
11:19:51 <boegel> Lemmih: docter Boegel is here to help you, tell me all about it :p
11:20:05 <boegel> hey mitchkov
11:20:10 <mitchkov> hey :)
11:20:17 <boegel> now if only bourbaki would give a sign a life, any sign...
11:20:18 * Lemmih lies down on the cough.
11:20:45 * boegel takes a big bundle of money from Lemmih... "Ok, start talking"
11:20:51 <tuomov> quite a cough then :-P
11:21:16 <SamB> boegel: what makes you professional help?
11:21:28 <SyntaxNinja> Lemmih: were you having bad dreams about me asking for more Hackage stuff? :)
11:21:32 <boegel> SamB: I think I can help Lemmih
11:21:40 <boegel> as in: "Lemmih, leave NOW'
11:21:48 <Lemmih> *couch
11:21:57 <SyntaxNinja> should I kick him?
11:22:05 <SyntaxNinja> no wait, I want him to hack ;)
11:22:52 <bourbaki> hey mitchkov
11:23:07 <Lemmih> He's alive!
11:23:20 <mitchkov> hey bourbaki
11:23:36 <boegel> He's alive too !
11:24:08 <bourbaki> mitchkov will you make your sound haskell thingy open source?
11:24:45 <SyntaxNinja> Lemmih: hackage probably shouldn't allow upload of something listed as AllRightsReserved
11:24:47 <Lemmih> SyntaxNinja: HackageDB doesn't distinguish between a package-url in the .cabal file and a auto-generated url.
11:25:01 <SyntaxNinja> Lemmih: 'fraid it should :(
11:25:13 <astrolabe> Does anyone know why Dijkstra's algorithm doesn't search from both ends simultaneously?
11:25:18 <bourbaki> mitchkov i would like to write a birdsong generator
11:25:21 <SyntaxNinja> Lemmih: you mean there's one field that gets written different ways?
11:25:25 <mitchkov> off course I will, wath's the use of research and keeping resulst for you own
11:25:29 * Lemmih is tempted to rewrite HackageDB completely.
11:26:15 * boegel thinks mitchkov is drunk :p
11:26:27 <boegel> Lemmih: don't do it right now
11:26:50 <SyntaxNinja> Lemmih: resist
11:26:59 <astrolabe> How's the ray tracing boegel?
11:27:05 <boegel> astrolabe: great !
11:27:10 <Lemmih> It started out as a little, dirty hack which now has mutated to a big, evil monster.
11:27:13 <mitchkov> Lemmih: mmm, I think your better of with the Haskore tools, i think my research of sound in haskell has an other purpose
11:27:15 <SyntaxNinja> Lemmih: at least wait 'till after the release
11:27:20 <boegel> astrolabe: have you seen my latest pics on transparency ?
11:27:22 <SyntaxNinja> Lemmih: worse is better ;)
11:27:45 <astrolabe> Boegel:Are they on the website?
11:27:59 <boegel> yeah
11:28:01 <Lemmih> mitchkov: I _so_ don't get what you're talking about.
11:28:07 <boegel> astrolabe: do you know the url ?
11:28:40 <boegel> Lemmih: he means bourbaki , he really _is_ drunk
11:28:45 <astrolabe> Yes.  I've got it bookmarked :)
11:28:50 <mitchkov> Lemmih: i'm just converting and distorting sounds in haskell
11:29:06 <boegel> mitchkov: bourbaki ! it's bourbaki you want !
11:29:31 <astrolabe> boegel:  I've saw those when you made them.  They are cool.
11:29:36 <mitchkov> how can I know
11:29:38 <SyntaxNinja> mitchkov: hackage /= hascore
11:29:56 <SyntaxNinja> he is drukn
11:29:58 <SyntaxNinja> er
11:30:16 <boegel> SyntaxNinja: I'm guessing he is, I really don't know
11:31:00 <mflux> :index finally
11:31:03 <SyntaxNinja> we should kick him and Lemmih from the channel ;)
11:31:04 <mflux> hmh
11:31:13 <mflux> anyway, how do I do that without the bot? (or with ;))
11:31:14 <SyntaxNinja> @index finally
11:31:27 <SyntaxNinja> @yow
11:31:32 <lambdabot> Control.Exception, Distribution.Compat.Exception
11:31:32 <lambdabot> I left my WALLET in the BATHROOM!!
11:31:44 <mflux> slow today I see
11:32:40 <Lemmih> Haskell got some evil control over me. I've been awake for almost 21 hours and still I have to fight the urge to hack.
11:33:19 <boegel> Lemmih: you're not on my couch anymore ! lay down !
11:34:13 <boegel> bourbaki: check pm :)
11:34:27 <Lemmih> boegel: I can't stop IRCing. It happens when I try to work or sleep.
11:34:58 <boegel> Lemmih: just throw away your IRC client
11:35:04 <boegel> that's the only way
11:35:11 <boegel> I had the same thing with ET
11:35:22 <SyntaxNinja> Lemmih: go for a run, take a bath, then read the Haskell report in bed with the lights off
11:35:32 <SyntaxNinja> that'll put you to sleep
11:35:36 <Lemmih> That would either make me insane, very productive or both.
11:36:52 * Lemmih goes for the rewrite of HackageDB.
11:37:01 <SyntaxNinja> Lemmih: DON"T DO IT
11:37:11 <SyntaxNinja> Lemmih: we want to launch it in a matter of days
11:37:24 <SyntaxNinja> wait until we get some user feedback or you will probably have to do it again
11:37:24 * boegel gives Lemmih the bunck of money back: "Here, it's no use"
11:37:49 <SyntaxNinja> Lemmih: it should be in production for a month or something, we'll get a better idea of what works and what doesn't, performance or bandwidth issues, and user needs
11:39:01 <boegel> Lemmih: just go to sleep, hell
11:39:32 <Lemmih> SyntaxNinja: Have you seen the code?! It's one big dirty hack. I can't sleep with it like that (:
11:39:52 <SyntaxNinja> Lemmih: trust me on this one, buddy.
11:40:35 <SyntaxNinja> Lemmih: how many times do you want to rewrite it?
11:42:15 <boegel> Lemmih: I command you to go to sleep now... and throw your pc out !
11:42:24 <boegel> you're becoming a nerd !
11:42:44 <SyntaxNinja> heh
11:42:46 <Lemmih> boegel: Too late. I'm already dressed and active.
11:43:29 <boegel> active ? you've been awake for 21 hours :s
11:43:38 <SyntaxNinja> Lemmih: the code you write now is goign to suck
11:44:29 <Lemmih> SyntaxNinja: I'll be the judge of that.
11:45:17 <SyntaxNinja> we can't trust you, you wrote that nasty code in the first place ;)
11:45:29 <boegel> SyntaxNinja: just leave him, he's becoming voilent
11:45:39 <SyntaxNinja> yes, judging is a form of violence
11:46:21 <Lemmih> Hmm Maybe I shouldn't rewrite HackageDB just yet.
11:46:47 <SyntaxNinja> Lemmih: we'd probably have to release the old one first anyway
11:48:16 <boegel> so, you _can_ go to sleep now :)
11:49:03 <Lemmih> boegel: I tried that (:
11:49:37 <Lemmih> I'll hack some Hacanon instead.
11:50:29 <Lemmih> SyntaxNinja: I wouldn't touch the stable branch of Hackage anyways.
11:51:37 * SyntaxNinja nods
11:56:39 <boegel> astrolabe: how did you like the pics ?
11:58:19 <bringert> I'm trying to run: main = getContents >> putStr "Content-type: text/html\n\n" >> putStr "hello!"
11:58:26 <bringert> as a cgi-program under apache
11:58:47 <bringert> and all I get is a 500, with "Premature end of script headers: test" in the log
11:58:59 <bringert> I've run out of ieads of what might be wrong
11:59:37 <bringert> this is the first time I try this on fedora core 3
11:59:43 <xerox> flush stdout?
12:00:04 <bringert> isn't that done on exit?
12:00:22 <xerox> Maybe you could give it a try
12:00:50 <bringert> it didn't help :-(
12:01:01 <xerox> :-( Sorry, no idea.
12:01:45 <Heffalump> bringert: in the Haskell HTTP library, does the version number of 0.4 in the cabal file in darcs mean that 0.4 was the last release, or that it's the next one you intend to release?
12:01:57 <bringert> eh, dunno
12:02:18 <Heffalump> ok, in that case please make the next release 0.5 not 0.4 :-)
12:02:18 <bringert> I'm working on a new release right now, which will be the first cabalized release
12:02:23 <bringert> ok
12:02:33 <Heffalump> oh, I have a GHC 6.2 compilation fix to send you.
12:02:43 <bringert> I was thinkg of switching to date-based version numbers
12:02:56 <bringert> so I don't have to remember what the last number was :-)
12:02:56 <Heffalump> I'm using 0.4.20050414 etc in the Debian package
12:03:19 <bringert> is it ok if the next version is 2005.05.05 or something like that?
12:03:20 <Heffalump> I think date based version numbers for real releases are a bit verbose, but I don't mind particularly.
12:03:52 <Heffalump> I had to use CPP to make it compile under GHC 6.2 as well as 6.4, btw (I haven't tested it still does work under 6.4 yet)
12:04:18 <bringert> I have modified it to use the crypto library, bu not pushed that yet
12:04:26 <bringert> would that mess things up for you?
12:04:35 <Heffalump> use the crypto library in what way? for SSL?
12:04:47 <Heffalump> why would it mess things up?
12:06:29 <bringert> for Base64 and MD5
12:06:44 <bringert> I guess it would add a dependency on the crypto package
12:06:51 <bringert> to the debian package
12:07:08 <bringert> but the crypto package is already a debian package?
12:07:33 <Heffalump> oh, right, I'll have to check - I'm not sure
12:07:43 <Heffalump> either way I can handle it, either by packaging it or depending on it
12:09:37 <bringert> Heffalump: I just pushed my changes, can you try the current version?
12:10:19 <Heffalump> I might be going out in a bit, in which case I'll do it at the weekend.
12:16:21 <bringert> no prob, have fun
12:19:21 <Maddas> Hmm, maybe I should give learning Go another go
12:19:31 <Maddas> (um, pun not intended :)
12:20:59 * Lemmih goes unicycling while GHC is compiling.
12:22:25 <astrolabe> Good idea Maddas.  It's fab.
12:27:31 <boegel> astrolabe: how did you like the pics?
12:28:09 <astrolabe> I'm trying to write a mediocre go programme, but it has turned into a mediocre hex program instead.
12:28:18 <astrolabe> boegel: They are cool!
12:28:49 <boegel> astrolabe: keep checking the website, I'll post my thesis and probably an English article (and the code) there in the next few weeks
12:28:53 <boegel> gotta go now, bye
12:28:59 <astrolabe> bye
13:15:45 <xerox> @wiki HaskellGoPeople
13:15:46 <lambdabot> http://www.haskell.org/hawiki/HaskellGoPeople
13:34:24 <xerox> 'night
14:45:43 <TFK> Can lambdabot eval let expressions?
14:46:02 <TFK> Trying to pimp it in a query but it keeps complainig about an unexpected "="
14:46:21 <lightstep> @plugs let x = 1 in x + x
14:46:30 <lambdabot> 2
14:46:37 <TFK> Oh. I tried @eval
14:46:42 <TFK> Thanks.
14:46:55 <lightstep>  @eval is lambda calculus, not haskell
14:48:03 <TFK> Woo! This is cool :-)
15:10:32 <wagle>  @eval
15:10:47 <wagle> @eval 1
15:10:48 <lambdabot> 1
15:10:59 <wagle> @eval \x -> x
15:11:00 <lambdabot> <<EM Dynamic -> EM Dynamic>>
15:11:15 <wagle> @eval \x -> x x
15:11:16 <lambdabot> <<EM Dynamic -> EM Dynamic>>
15:11:31 <wagle> @eval (\x -> x x)(\x -> x x)
15:11:37 <lambdabot> out of fuel - use @resume to continue
15:11:47 <tic> hehe
15:11:54 <tic> can you specify how to evaluate them?
15:12:06 <tic> i.e., apply-first or reduce-first? (whatever they're called)
15:12:39 <wagle> normal-order, applicative-order
15:12:58 <tic> thanks. :) been a while since I read that.
15:56:51 <araujo> anyone knows a good english dictionary online?
15:58:02 <TFK> There's dictionary.com, English-English.
15:59:15 <TFK> Then there's wiktionary o_O
15:59:27 <bourbaki> http://www.m-w.com/cgi-bin/dictionary?book=Dictionary&va=check
16:00:02 <araujo> Thanks
16:00:02 <bourbaki> they also have soubd samples
16:11:31 * SamB wonders how to get hsql going with GHC 6.4
16:34:17 <Pupeno> Hello
16:34:57 <Pupeno> I'm considering learning Haskell... :)
16:35:05 <skew> yay!
16:35:10 <skew> it's fun
16:35:17 <skew> and educational
16:35:18 <Pupeno> Is there 'something' to do web development in Haskell ?
16:35:35 <lispy> does ghci have anything similar to lisp's trace function?
16:35:46 <skew> Pupeno: kind of
16:35:59 <skew> Pupeno: there are not really any good complete systems yet
16:36:15 <Pupeno> skew: ok.
16:36:19 <skew> Pupeno: but there are several people around here who do web stuff that seem to be heading towards writing one
16:36:30 <skew> Pupeno: there are also some cool toys
16:37:11 <Pupeno> skew: I'm not going to put my free time in anything related to web, because I hate it, but since that is what's puting food on my table, I'm always looking to do it faster/better.
16:37:30 <skew> For example, WASH takes a very interesting approach to writing a web application, but as far as I can tell you have to use buttons for all your links
16:37:37 <skew> talk to shapr sometime
16:37:51 <skew> he does web stuff too
16:38:13 <skew> lispy: what does that do? follow the evaluation of an expression?
16:39:06 <lispy> skew: (trace foo), then when foo is called you see "(Foo arg1 arg2)" and when it returns you see "(Foo arg1 arg2) => return value"
16:39:43 <skew> I think that's a lot easier when the arguments are already evaluated before the call
16:39:48 <lispy> skew: so it doesn't really cause the trace when you call it, it instruments the function so that it does output when it is called and when it returns
16:39:58 <lispy> that's true
16:40:32 <Igloo> lispy: Debug.Trace.trace does the first bit, but laziness might mean it happens at times other than when you expect it
16:41:12 <lispy> Igloo: cool. I already found and fixed my bug, it i'm sure i'll be curious about it in the futere
16:41:13 <skew> If the profiling hooks were exposed to Haskell code that might give you something to start with
16:41:15 <lispy> er future
16:42:14 <lispy> ah, i've successfully created my first monad :)
16:42:23 <skew> is it Identity?
16:42:42 <lispy> no, data JList a = E | Cons Int a (JList a)
16:43:02 <lispy> it's like a list, but each cons stores the distance to the end of the list
16:43:24 <skew> that's going to be some fun with lazy evaluation
16:43:39 <lispy> it's just a learning exercise
16:43:54 <lispy> i have a midterm over monads in the morning :)
16:44:44 <skew> I can suggest some interesting ones to write once I've turned in the midterm I need to turn in in 15 minutes
16:45:13 <lispy> skew: cool
16:45:22 <lispy> this one has been quite education al
17:21:11 <Cale> lispy: have you seen the tree monad?
17:21:48 <Cale> data Tree a = Leaf a | Branch (Tree a) (Tree a)
17:22:43 <Cale> See if you can come up with a good way to turn that into a monad :)
17:26:27 <drbean> I have a recursive function and it works...
17:26:58 <drbean> But if I change around the order of the variables everywhere they appear, it doesn't work
17:27:10 <drbean> Why is that?
17:29:04 <sbeyer> maybe you forgot something ;)
17:31:08 <skew> if you use laziness critically it may be that a different pattern matching order breaks the program
17:31:39 <drbean> Now I can't get it to work either way, so I will be back in a few minutes
17:32:34 <sbeyer> .o( undo function of the editor )
17:33:36 <skew> Cale: are you thinking of something other than the ordinary list monad?
17:34:33 <Cale> skew: Well, it's rather like the list monad. I suppose they're concatenation lists.
17:34:57 <skew> At first I thought your trees were labeled at every node
17:36:43 <lispy> Cale: i'll take the challenge
17:36:51 <Cale> You could possibly turn data Tree a = Branch a [Tree a] into a monad reasonably well. Let me try it.
17:47:03 <Cale> yep
17:48:27 <Cale> http://www.haskell.org/hawiki/HaskellIrcPastePage
17:52:40 <lispy> i'm going to need a tree map to do this aren't i?
17:53:25 <Cale> well, I recommend defining three things: return, map, and join
17:53:34 <Cale> return :: a -> Tree a
17:53:44 <lispy> right
17:53:51 <lispy> i forgot about join, but i'll need it :)
17:53:58 <Cale> map :: (a -> b) -> (Tree a -> Tree b)
17:54:02 <lispy> return x = Leaf x
17:54:10 <Cale> join :: Tree (Tree a) -> Tree a
17:54:21 <Cale> yep
17:55:10 <Cale> skew: if you're interested, I put a Tree-labelled-at-every-node monad on the Paste page
17:56:30 <juhp> envvar expansion longer works with ghc-pkg-6.4 ?
17:56:42 <juhp> er, no longer
17:57:11 <skew> That seems to lose the nice property from lists or the other tree monad that all the trees from the individual application of the second operation are subtrees of the final result, but I guess it depends on how you define subtree
17:57:47 <skew> It's certainly not interesting to define a monad on a tree by flattening and some arbitrary reconstruction of the tree structure
18:04:37 <Cale> Well, you probably want to do something with the values on the internal nodes, or it's not that interesting, and the only thing you can do is to apply f to the value and get a tree, but then those branches have to go somewhere :)
18:05:19 <Cale> I suppose you could have a tree-with-internal-values monad, where the only values which would ever have f applied to them were values in leaves.
18:07:43 <Cale> (which might suffice, if what you're doing is things like variable substitution in expression trees, and you don't need to extend at operators.)
18:09:39 <skew> I don't know if it's useful, but you transform a node with children into the tree resulting from the value, with the images of the children of the original node added to every child
18:09:43 <skew> every leaf, that is
18:10:13 <skew> like (Branch a children) => replaceLeaves (f a) children
18:11:11 <skew> where replaceLeaves (Branch x []) children = children, replaceLeaves (Branch x xs) children = Branch x (map (\c -> replaceLeaves c children) xs)
18:11:21 <JohnMeacham> gaduh... must turn on tail-call optimization to not run out of stack. I feel silly.
18:11:43 <skew> do you have a garbage collector now?
18:13:31 <skew> I heard that jhc generated pretty leaky programs
18:15:52 <JohnMeacham> skew: I added -fboehm as a stopgap garbage collector. you need to install the boehm GC first of course though.
18:16:37 <JohnMeacham> before it generated completly leaky programs in that nothing was ever reclaimed.
18:18:08 <skew> how well did that work with a few gigabytes of memory?
18:18:26 <JohnMeacham> Just fine :) most programs never ran out of space anyway.
18:19:05 <JohnMeacham> which is why I didn't worry too much.
18:20:48 <skew> Speaking of leaking, I calculated yesterday that even assuming you are an insomniac methamphetamine addict, typing 8 characters a second, it would still take you over a year to produce a gigabyte of keyboard input
18:21:37 <skew> I'm thinking it may be time to start abandoning the idea of mutation on the hard drive.
18:22:43 <JohnMeacham> skew: indeed. When I worked at sun we had talks about how OSes in the far future might look. one issue that was brought up is that it may well be that storage becomes essentially infinite so you have no need to reclaim memory ever.
18:23:57 <skew> you would probably still want to find and merge isomorphic structures, though
18:24:54 <skew> unless your "computation" is something lika a warren of spawning baby universes
18:26:27 <Philippa_> IOT monad transformer? :-)
18:26:32 <Philippa_> (think IOT List)
18:27:34 <JohnMeacham> Perhaps a continually growing hashconsed heap.
18:41:18 <drbean> I think my problem was precedence, juggling my variables around.
18:42:24 <drbean> fun xs p c+1   -- ok
18:43:01 <drbean> fun p (c+1) xs  -- not ok
18:43:52 <drbean> fun xs p (c+1)  -- not ok either. Surprising.
18:48:22 <drbean> I guess (c+1) is being taken as an argument to p, rather than fun
18:49:10 <Cale> that parses as (((fun xs) p) (c+1))
18:49:40 <Cale> the last one
18:50:02 <Cale> the first one parses as (((fun xs) p) c) + 1
19:00:56 <drbean> fun is counting the number of members of l which satisfy p.
19:01:47 <drbean> It's not working the way I expected.
19:02:02 <drbean> fun ( x: xs ) p c = if p x then fun xs p c+1 else fun xs p c  - works
19:02:51 <Cale> what is c for?
19:03:53 <Cale> It's not being used there
19:04:00 <Cale> just passed around
19:04:33 <Cale> fun ( x: xs ) p c = if (p x) then (fun xs p c) + 1 else (fun xs p c)
19:04:39 <drbean> Yes, just to hold teh count.
19:04:41 <Cale> is equivalent to what you wrote
19:04:52 <drbean> That works.
19:04:53 <Cale> it's not holding the count
19:05:04 <drbean> But fun ( x: xs ) p c = if p x then fun xs p (c+1) else fun xs p c -- doesn't work
19:05:24 <Cale> what does the base case look like?
19:06:18 <drbean> Oops. fun [] c p = 0
19:06:30 <Cale> that's not quite right
19:06:46 <Cale> don't you want to return the count?
19:06:54 <Cale> fun [] p c = c
19:06:55 <Cale> ?
19:07:10 <Cale> er
19:07:11 <Cale> sorry
19:07:25 <Cale> no, that's right. :)
19:08:21 <drbean> Yes
19:10:13 <Cale> however, it seems it would be much cleaner to write  fun p xs = length (filter p xs)
19:10:26 <drbean> I guess I didn't understand the way it recursed, I had fun [] p c = 0
19:11:01 <drbean> I'm trying to recreate the exercise in Daume's YA Tutorail using foldr
19:12:07 <drbean> page 47
19:12:09 <Cale> yeah, folding is perfect for this
19:13:19 <skew> lispy: have you written up a state monad?
19:17:02 <skew> implementing your own continuation monad really helps to understand how it works
19:18:37 <skew> threading state and control in opposite directions through the state monad is interesting, and good practice at figuring out how a monad acts by looking at the definition
19:42:46 <lispy> skew: i went for a bike ride with a friend
19:42:53 <lispy> skew: so, not yet :)
19:43:26 <lispy> skew: i have an example my notes, so I should try to create one from memory
19:43:52 <skew> I didn't understand the continuation monad until I typed in the definitions myself
19:44:05 <lispy> continuation or state?
19:44:09 <skew> I'm just remembering some examples from when I was learning this stuff
19:44:11 <skew> continuation
19:44:44 <lispy> i don't have a strong enough grasp of continuations to implement them
19:45:15 <skew> http://www.madore.org/~david/programs/unlambda/
19:45:47 <skew> http://www.madore.org/~david/computers/callcc.html
19:45:51 <skew> That's where I learned it...
19:47:08 <lispy> i should learn about them, but they are not part of our syllabus, so i don't think i'll do it tonight
19:47:28 <skew> are they just giving you really basic monads?
19:48:21 <skew> Unlambda is a nice excercise for writing a monadic interpreter because you need to integrate state, continuations, and IO, but the parsing is trivial and there are no distractions like variable bindings
19:52:59 <lispy> skew: um, the prof said we are doing 1 general question about monads, 2 specific questions about monads that we have not seen in class, and 1 other monad question that he wasn't sure what it wolud be
20:37:03 <alkoma> hi
20:37:13 <skew> hello
20:37:42 <alkoma> newbie question: what is the meaning of "!" in this definition: data SourcePos = SourcePos SourceName !Line !Column ?
20:37:53 <skew> That marks the field as strict
20:38:14 <skew> so a SourceName can't hold an unevaluated Line or Column
20:38:28 <alkoma> i see - thanks.
20:38:48 <skew> it's probably mostly for performance
20:39:34 <skew> compile with -funbox-strict-fields and the data from the Line and Column will be jammed into the SourcePos in memory, rather than separate heap-allocated objects
20:41:33 <skew> Adding ! and that option made the pugs interpreter run at least twice as fast!
20:42:06 <alkoma> I am reading Hutton's paper "Mod Parser Comb", and try to follow his example
20:42:36 <skew> oh, don't worry about it then
20:42:49 <alkoma> but it's was written for Gofer...
20:43:24 <skew> I'm pretty sure that ! is in Haskell 98. If not just pass -fglasgow-exts to GHC or GHCi (or -98 to hugs)
20:43:46 <alkoma> and half way in the paper, ghci starts to not like the code ...
20:44:41 <alkoma> type Parser a = String -> [(a,String)]
20:45:54 <alkoma> how to make that an instance of Monad?
20:46:18 <alkoma> in the paper: instance Monad Parser where ....
20:46:48 <SamB> alkoma: maybe you should change "type" to "newtype"?
20:46:48 <skew> I know hugs has some sort of closed type synonym thing
20:47:05 <SamB> and add a constructor after the =
20:47:16 <skew> The easiest thing to do is change that to a newtype and add the wrapping and unwrapping everywhere
20:47:40 <alkoma> let me try ...
20:48:49 <skew> You'll need to write something like newtype Parser a = Parser (a -> [(a,String)]), and then write Parser (...) and case Parser p of -> ... in lots of places where he can just use some value
20:50:21 <skew> or, if you don't mind changing things a bit, you could use Control.Monad.StateT [] as your monad
20:50:22 <alkoma> ...that's why I try read the code for parsec to see if I'll get some clue ... but obviously I am more lost :)
20:50:43 <skew> yeah, Parsec does lots of fancy things to be fast and give good errors
20:55:16 <skew> actually, you might be able to make just that instance you want
20:55:24 <skew> I'll check some things
20:58:16 <skew> strange, looks like there is already a monad instance for function types, but I don't know where to find it.
21:03:23 <skew> too bad, can't write instance Monad ((->) String . [] . (,) String) where ...
21:35:56 <lispy> has anyone here heard of the n^2 - 1 problem?  Googling for it is a pain
21:36:17 <skew> what's that?
21:36:24 <lispy> good question :)
21:36:36 <Pseudonym> What context did you see it in?
21:36:46 <lispy> it's listed as an np-complete problem we can do a report on
21:36:50 <skew> I've heard of N^2 problems in group organizations and stuff
21:37:07 <lispy> group organizations?
21:37:30 <skew> if you have N people who each need to talk to everybody else, that's a lot of talking
21:37:40 <lispy> skew: http://www.cs.berkeley.edu/~souravc/cs267/nbody.htm ?
21:38:06 <skew> I'm not talking about that. Are you?
21:38:22 <lispy> hmm..yeah, i think taht problem is different...
21:38:47 <Pseudonym> Do you have any references to it at all?  Like citations?
21:38:54 <lispy> i think graph isomorphism is the only one i understand on this list :)
21:39:01 <lispy> Pseudonym: unfortunately no
21:39:02 <Pseudonym> What are some of the others?
21:39:22 <lispy> "Recursive" structured graohs
21:39:28 <lispy> protein folding
21:39:32 <lispy> steiner trees
21:39:39 <Pseudonym> Oh, protein folding is interesting.
21:39:48 <Pseudonym> Pseudoknot is a standard benchmark.
21:40:01 <Pseudonym> In fact, it's probably the fairest language-independent benchmark to date.
21:40:24 <lispy> pseudoknot is something in the protein folding world?
21:40:29 <Pseudonym> Because it lets you solve a nontrivial problem in whatever way your language finds the most ideomatic.
21:40:30 <Pseudonym> Right.
21:40:43 <Pseudonym> Basically, you have to fold a protein.  That's the problem.
21:41:30 <lispy> i have to wonder if "Recursive" Structured Graohs is a type for "Recursive" Structured Graphs
21:41:56 <Pseudonym> Sounds like it.
21:42:32 <lispy> yeah, googling for Graohs turns up about 6 hits, and o and p are next to each other on qwerty keyboards
21:42:49 <Pseudonym> Steiner trees are kinda interesting, too.
21:43:05 <lispy> yeah, we touched on them breifly
21:43:09 <Pseudonym> Basically it's like minimum spanning trees, but you're allowed to add nodes.
21:43:31 <lispy> right, and the minimum comes from the length of the edges rightL
21:43:47 <Pseudonym> Right.
21:44:14 <lispy> ah, yeah this page says it's a weighted graph
21:44:45 <lispy> yeah, maybe that's a good one for me, i could pickup a bit of graph theory
21:45:14 <lispy> sorting by reversals is on the list, for some reason that sounds like a one liner in prolog :)
21:47:35 <Pseudonym> Yeah, the difference between Perl and Prolog is that the on-liners in Prolog can easily take exponential time.
21:48:42 <lispy> yeah, and i'd still rather program in prolog
21:49:07 <skew> Pseudonym: doesn't perl support regular expression negation?
21:50:49 <Pseudonym> Yes.
21:53:21 <skew> I think that has complexity 2^^n, in Conway's arrow notation
21:53:59 <skew> or is that Knuth's arrow notation?
21:55:19 <Pseudonym> Knuth, I think.
21:55:39 <Pseudonym> Actually, it's not known what complexity classes Perl regexes model.
21:55:53 <lispy> lol
21:55:55 <Pseudonym> THey can, for example, match strings with prime length.
21:56:28 <Pseudonym> I once proposed to Damian Conway the addition of two new operators that would ensure that they were Turing-complete.
21:56:34 <Pseudonym> He was unimpressed.
21:57:03 <skew> what were the operators?
21:57:14 <Pseudonym> Dirac brackets.
21:57:24 <skew> oh, those are neat
21:57:27 <Pseudonym> Yeah.
21:57:36 <skew> I think I've seen them in connection with parsing before
21:57:40 * Pseudonym nods
21:57:41 <lispy> well, in that case they're not really regexp anymore right?
21:57:44 <Pseudonym> Might have been me who mentioned them.
21:57:47 <skew> Are you sure that wouldn't push it too hard, though?
21:57:56 <Pseudonym> lispy: Perl regexps aren't really regular expressions to begin with.
21:58:00 <Pseudonym> Well, they're a superset.
21:58:06 <lispy> Pseudonym: ah, fair enough
21:58:13 <Pseudonym> skew: Perl already allows arbitrary Perl code inside regexps.
21:58:22 <Pseudonym> So no, that wouldn't push it too hard.
21:58:22 <skew> I mean, if the regexps are already Turing complete, can the brackets occasionally make a matching problem undecidable?
21:58:38 <Pseudonym> Yes, they can.
21:58:53 <Pseudonym> But it would finally settle the question about what regexps accept.
21:58:56 <Pseudonym> "Anything!"
21:59:10 <skew> well, that would make Perl more powerful than almost any other language ...
21:59:21 <skew> ... it would just be hard to find a conformant implementation.
21:59:24 <mugwump> regexps aren't turning complete.  They're only halfway there.  Purl regexps OTOH are..
21:59:26 <Pseudonym> No, it would make it _just_ as powerful.
21:59:39 <Pseudonym> mugwump: That's why I suggested the new operators.
22:00:15 <skew> Pseudonym: how many other languages do you know of that give you an operator that solves the halting problem?
22:00:25 <mugwump> (You only need one stack for a truly regular regex, but two to be turing complete)
22:00:48 <lispy> hmm..i found a paper from 1977 talking about compilers that mentions funtion graohs, so maybe they do exist
22:01:05 <skew> "funtion graohs"?
22:01:08 <Pseudonym> One stack will give you context-free grammars.
22:01:30 <lispy> oh, function not funion :)
22:01:46 <skew> that would be a horrible naming scheme
22:01:54 <Pseudonym> But yeah, you need two stacks for Turing-hardness.  It's easy to see, because popping from one stack and pushing on the other is like moving the tape.
22:02:28 <Pseudonym> Well Perl wouldn't solve the halting problem.  Not in finite time, anyway.
22:02:48 <skew> Pseudonym: That's why I said it would be hard to find a good implementation.
22:03:11 <skew> at least, if they make some silly claim about regular expression matching terminating.
22:05:02 <lispy> i read about an ammusing instruction to add to a computers instruction set that would allow you to solve the halting problem.  You set up your code, then when you execute the instruction the clock speed for the next 2 seconds keeps getting halved
22:05:30 <lispy> so you get to do an infinite number of instructions
22:05:41 <Pseudonym> Ah, cool idea.
22:06:01 <skew> what kind of complexity classes does that oracle give you?
22:07:25 <lispy> heh, constant :)
22:07:54 <lispy> i mean everything that is currently NP-complete takes 2 seconds, plus the time to setup your code :)
22:07:55 <skew> it squishes all the computable problems down into constant time (or linear if you have to copy the input to the oracle tape too)
22:08:27 <lispy> yeah, and no some RE problems become recursive right?
22:08:34 <lispy> s/no/now/
22:10:09 <skew> either it's a nice simple oracle that makes P=NP, or you can do some totally insane things in say P with this oracle for the halting problem
22:10:42 <lispy> i'm trying to find the webpage that describes the idea, but i'm not having luck
22:12:12 <lispy> http://www.chiark.greenend.org.uk/~sgtatham/infinity.html
22:30:03 <skew> hi japp
22:37:32 <jaap> skew: hello
23:10:46 <Pseudonym> I had to write some code for work that just burned cycles.
23:11:01 <lispy> ?
23:11:10 <lispy> while (true);
23:11:10 <Pseudonym> Basically, we were trying to stop a timing attack by putting a delay if authentication failed.
23:11:30 <Pseudonym> But we couldn't just sleep(), otherwise you could fire up multiple attacks.
23:11:48 <Pseudonym> No, I put in some code to compute the value of pi to the limit of machine precision.
23:12:15 <Pseudonym> @plugs iterate (\x -> x + sin x) 2.0 !! 1000
23:12:21 <lambdabot> 3.141592653589793
23:13:10 <Pseudonym> It's actually one of the fastest converging fixpoint algorithms there is, if you have a fast sin().
23:13:11 <lispy> heh
23:13:13 <Pseudonym> WHich you generally don't.
23:13:59 <Pseudonym> (You actually need fewer than 1000 iterations, but I was feeling generous.)
23:14:10 <Pseudonym> @plugs take 10 $ iterate (\x -> x + sin x) 3.0
23:14:12 <lambdabot> [3.0,3.1411200080598674,3.1415926535721956,3.141592653589793,3.1415926
23:14:12 <lambdabot> 53589793,3.141592653589793,3.141592653589793,3.141592653589793,3.14159
23:14:12 <lambdabot> 2653589793,3.141592653589793]
23:14:43 <Pseudonym> That's pretty quick convergence.
23:15:26 <Pseudonym> map (- pi) . take 10 $ iterate (\x -> x + sin x) 3.0
23:16:00 <Gahhh> why don't you have a fast sin() ?
23:16:04 <Gahhh> generally that is
23:16:05 <Pseudonym> @plugs map (- pi) . take 10 $ iterate (\x -> x + sin x) 3.0
23:16:06 <lambdabot> <Plugins.Eval>:1:
23:16:06 <lambdabot>   No instance for (Floating (a -> b))
23:16:06 <lambdabot>   arising from use of `pi'
23:16:13 <Pseudonym> @plugs map (\x -> x - pi) . take 10 $ iterate (\x -> x + sin x) 3.0
23:16:14 <lambdabot> [-0.14159265358979312,-4.726455299257637e-4,-1.759747902951858e-11,0.0
23:16:14 <lambdabot> ,0.0,0.0,0.0,0.0,0.0,0.0]
23:16:46 <Pseudonym> sin() on arbitrary precision numbers (as opposed to IEEE floating point numbers) isn't easy AFAIK.
23:17:27 <Gahhh> ah arbitrary prec
23:17:31 <Pseudonym> Right.
23:17:41 <Pseudonym> If you have a fixed precision, it's usually faster to precompute.
23:18:05 <Gahhh> are you trying to cause an indeterminate amount of delay or something ?
23:18:18 <Pseudonym> Not an indeterminate delay, just to delay for a short while.
23:18:43 <Pseudonym> Say you were trying to protect against guessing passwords, for example.
23:18:46 <Pseudonym> (Which I'm not.)
23:19:06 <Gahhh> help cancer research for 100ms heh.
23:19:06 <Pseudonym> Then adding in a small delay when password authentication fails means that it's harder to do a dictionary attack.
23:19:15 <Pseudonym> That'd be fun. :-)
23:19:48 <Gahhh> aren't there retry limits on auth against dict attacks ?
23:20:00 * Gahhh is the champion of illegal abbrev
23:20:16 <Pseudonym> Maybe, but this is actually a library function.
23:20:24 <Pseudonym> So we can't really presever state.
23:20:29 <Pseudonym> preserve
23:21:09 <Gahhh> that should work at the api level. The caller should implement something else on top of it anyways
23:21:36 <Pseudonym> Yes, if it were password authentication that I was trying to protect.  Which it isn't.
23:21:48 <Gahhh> it's sekrit I know
23:22:28 <Gahhh> I have a zillion passwords protected by a master password now. It's out of hand already.
23:23:02 <dbremner> Gahhh - at work we have a bunch of Key Katchers. One of the creepier managers took one home to spy on his wife.
23:23:18 <Gahhh> keylogger ?
23:23:47 <dbremner> Gahhh - it's a hw key logger that looks like a PS/2 adapter
23:23:51 <Gahhh> ah
23:23:56 <Gahhh> lower level keylogger
23:24:11 <Gahhh> tee hee. what is the world coming to.
23:24:15 <mflux> one should be able to quickly learn a random keyboard layout to counter that
23:24:24 <Gahhh> mflux: lol.
23:24:30 <mflux> although I suppose such an 'encryption' could be almost trivially cracked
23:24:34 <dbremner> mflux - or hunt and peck with Xkeyboard, charmap, etc.
23:24:41 <mflux> unless you switch it every 10 characters!
23:25:06 <Gahhh> it doesn't matter. your brain cannot handle the level of entropy which is out of the reach of a dictionary attack,
23:25:11 <Gahhh> .
23:25:54 <dbremner> mflux - you could point an electric eye or shotgun mike at the keyboard and track individual keystrokes. The OSS did something similar in WWII
23:26:45 <Gahhh> dbremner: I saw a research paper that was correlating EMI or some other electrical property with the input.
23:26:56 <skew> dbremner: you obviously weren't here for the talks about keymaps
23:26:58 <mflux> gahhh, the computer would do the analysis on the feasibility of a dictionary attack and change the keyboard layout suffiently often
23:27:05 <mflux> gahhh, but using it could be a btch ;)
23:27:18 <dbremner> Gahhh - in college I looked into building a SQUID
23:27:34 <Gahhh> SQUID = ?
23:27:51 <lispy> a mechanical squid?
23:27:57 <dbremner> Gahhh - Superconducting Quantum Interference Device, IIRC.
23:28:26 <Gahhh> ah college
23:29:01 <dbremner> Gahhh - I also called the CIA and bought an AF surplus flame thrower.
23:29:01 <Gahhh> dbremner: Is the interesting people website down ?
23:29:26 <dbremner> Gahhh - SQUIDs use Josphson junctions.
23:29:54 <dbremner> Gahhh - seems to be up.
23:30:03 <Gahhh> That stuff goes over my head. I don't believe in modern physics.
23:30:16 <dbremner> Gahhh - I know Josephson junctions are a recurring topic of discussion.
23:30:48 <dbremner> Gahhh - Interesting People is a mailing list. The website has archives, though.
23:30:50 <Gahhh> I can't connect to www.interesting-people.org
23:31:00 <Gahhh> yeah I've been reading the archives
23:32:17 <dbremner> Gahhh - www.interesting-people.org works for me.
23:33:34 <Gahhh> hah. Apparently the dolphin in Johnny Mnemonic used a SQUID to read the chip in Johnny's head.
23:33:43 <Gahhh> thanks wikipedia
23:34:18 <Gahhh> how does one read the magnetic field around an unpowered memory chip is beyond me tho.
23:34:44 <dbremner> Gahhh - I read IP, the Atlantic Monthly newsletter, This is True, Bruce Sterling's Viridian list, and Schneier's Cryptogram.
23:35:30 <Gahhh> I've been reading Schneier's cryptogram and weblog. actually I haven't checked cryptogram since I read the weblog almost daily.
23:36:35 <dbremner> Gahhh - also the Tunes-lll list, although I'm thinking about dropping that. I just subscribed to the Types-list.
23:37:06 <Gahhh> what are those about ?
23:39:31 <dbremner> Gahhh - the Types list is run by Benjamin Pierce of Types and Programming Languages.
23:40:00 <Gahhh> ah
23:40:10 <Gahhh> I haven't read that book.
23:40:26 <dbremner> Gahhh - Tunes is sort of the Xanadu of OSes. Tunes-lll is a list about defining a low level language for it.
23:40:35 <mugwump> (TaPL is also the book that inspired pugs)
23:40:39 <dbremner> Gahhh - my copy is currently in the mail.
23:40:56 <Gahhh> I am not sure if I am at the right level to read that book.
23:41:02 <dbremner> mugwump - that's one of the reasons I ordered it. I want to try implementing algol 60 or 68.
23:41:08 <lispy> is Tunes.org the same as Tunes?
23:41:15 <dbremner> lispy - yes.
23:41:27 <lispy> ah, yeah Tunes is crazy
23:41:30 <dbremner> Gahhh - I doubt I am, but it gives me a goal to aim for.
23:41:31 <Gahhh> dbremner: take that backus and Wijngaarden !
23:41:36 <mugwump> dbremner: sneaky, got some mainframe migration projects in mind?  :)
23:41:38 <lispy> and i mean that in the "I'm scared of it" way
23:41:43 <dbremner> Gahhh - W Grammars rule. ;-)
23:42:02 <dbremner> lispy - it's the Scientology of OS projects.
23:42:26 <Gahhh> I just read a chapter on 2 level grammars.
23:42:31 <dbremner> mugwump - 60 isn't too complex except for the moronic parameter passing scheme.
23:42:41 <Gahhh> dbremner: why algol anyways ?
23:42:41 <dbremner> Gahhh - which book? I may have it.
23:43:16 <lispy> i have some ideas for an OS, but it doesn't require anyone to start from scratch.  It could (and should) be implemented on top of unix, linux or whatever
23:43:24 <Gahhh> dbremner: I found this free book online: Formal Syntax and Semantics of Programming Languages. It's been ok for a free book.
23:44:13 <lispy> and it's all based around the ideas of suspend/resume and screen
23:44:18 <dbremner> Gahhh - there are only several books on W Grammars and I've got most of them.
23:44:29 <lispy> i'd love to have sessions that i can pause and migrate
23:44:39 <Gahhh> dbremner: http://www.cs.uiowa.edu/~slonnegr/plf/
23:44:40 <dbremner> Gahhh - Algol 60 is small and relatively straightforward.
23:44:40 <Pseudonym> Oh, boy, I remember Tunes.
23:44:51 <Pseudonym> Have they actually written anything yet?
23:44:59 <lispy> heh
23:45:02 * Pseudonym was on the mailing list about... probably 10 years ago
23:45:06 <dbremner> Pseudonym - I thought I had too much free time and then I saw the Tunes project. ;-)
23:45:11 <Pseudonym> :-)
23:45:19 <lispy> i found it recently and it looked like collection of ideas still
23:45:23 <Pseudonym> Yup.
23:45:40 <Pseudonym> It looks to me like a whinge club.  Every other language and OS is just WRONG.
23:45:47 <dbremner> Psuedonym - they're too busy publishing 10 page screeds about the brokenness of every language ever developed.
23:45:56 <Pseudonym> Right.
23:46:28 <lispy> yeah, and rants about things like Orthoganal Persistence
23:47:02 <lispy> which i think is a bad idea
23:47:11 <Gahhh> lispy: it's a trap !
23:47:22 <lispy> Gahhh: heh
23:47:23 <Pseudonym> "But what have you actually _written_?"  "Critiques!  Lots of them!"
23:47:34 <dbremner> lispy - look at EROS and http://www.torsion.org/
23:47:46 <Pseudonym> So we have a fairly good idea what TUNES and the LLL is _not_.
23:48:12 <dbremner> Pseudonym - Tunes is *Social Text* for CS.
23:48:35 <lispy> dbremner: cool
23:48:39 <dbremner> Pseudonym - I was young and impressionable when I joined the list, thought there might be some neat discussions.
23:48:43 <Gahhh> CS Politics 101: How not to get the job done
23:48:49 <lispy> dbremner: i should try it out to see if it scares the hell out of me in practice :)
23:48:51 <dbremner> lispy - I've talked with the Torsion developer.
23:49:45 <thou> is there a "hello world" application w/ ghc & cabal that shows a good setup to use? ideally that would make a project easy to build on unix & windows?
23:49:58 <dbremner> Psuedonym - I have a lot of odd projects, but I don't have a public wiki devoted to them.
23:50:42 <lispy> i think with orthogonal persistence, i would end up overwriting a lot of good data
23:51:42 <skew> lispy: make it purely functional too
23:52:03 <dbremner> lispy - Massalin's Synthesis OS has a lot of neat ideas worth stealing.
23:52:09 <Pseudonym> I do too, and I don't announce them.
23:52:25 <Pseudonym> Unless it's no more specific than "I'm playing with X".
23:52:49 <dbremner> Psuedonym - I'll announce them when they contain some substance other than criticism.
23:52:58 <lispy> i still didn't choose a project andi have to have one by morning...
23:53:17 <lispy> heh, picking an np-complete problem appears to be undecidable :)
23:53:59 <Pseudonym> No, it's only intractable.
23:54:36 <dbremner> Gahhh - thanks for the link.
23:55:06 <Gahhh> dbremner: np
23:55:27 <dbremner> Gahhh - I read about W-Grammars in order to to understand the Algol 68 Revised Report.
23:55:54 <Gahhh> dbremner: Yeah, apparently Wijngaarden invented them for algol 68
23:58:22 <Gahhh> The amount of CS/CE-relevant knowledge out there is overwhelming.
