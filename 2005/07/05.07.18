00:57:01 <Speck> >.>
00:57:02 <Speck> <.<
00:58:43 <Lemmih> ^.^
01:27:51 <Speck> Hmm... I don't understand the definition of first for arrows
01:27:53 <Speck> :t first
01:28:02 <Speck> @type first
01:28:03 <lambdabot> bzzt
01:28:07 <Speck> hn...
01:28:16 <dblhelix> @type Control.Arrow.first
01:28:18 <lambdabot> forall (a :: * -> * -> *) d c b.
01:28:18 <lambdabot>         (Control.Arrow.Arrow a) =>
01:28:18 <lambdabot>         a b c -> a (b, d) (c, d)
01:28:27 <Speck> where does d come from?
01:28:42 <basti_> from somerwhere else?
01:29:04 <dblhelix> d is the type of the input pairs second component: the one that is left untouched
01:29:29 <dblhelix> the computation is only applied to the first component of the pair: hence, "b becomes c"
01:30:15 <Speck> am I right in assuming that "a b c" can be read as "an arrow from b to c"?
01:30:24 <dblhelix> you can think of first as a combinator that takes a computation from b to c and turns it into a computation from (b, d) to (c, d)
01:30:31 <basti_> yes, where b and c are type variables, though
01:30:36 <dblhelix> Speck: yes, you're right
01:30:36 <Speck> right
01:31:03 <basti_> so b might be (a,b) without any problems
01:31:13 <basti_> a and b then being (non-type) variables
01:33:38 <Speck> still not quite there yet, but usually stuff like this needs time to sink in
01:36:07 <Speck> oh ok I get it
01:36:30 <Speck> wasn't thinking generally enough
01:36:33 <basti_> heh
01:36:34 <basti_> -g-
02:05:49 <joncooper> I've had an idea for a project and I'm wondering if it's feasible
02:06:42 <basti_> experimental programming?
02:07:19 <dons> hey basti_, how's code?
02:07:36 <basti_> dons: going fine again, now that the term is over
02:07:36 <basti_> ;)
02:07:51 <dons> oh, term is about to start here next week.
02:08:14 <basti_> didnt continue yi-emacs yet, but i will
02:08:21 <basti_> next thing will be completion interfaces
02:08:34 <dblhelix> joncooper: now that you've triggered our attention, could you give us some more info?
02:08:35 <basti_> i had the idea that one might do that with a modified lexer, but i dont have a clue if this makes sense
02:08:59 <joncooper> I have a set of equations in a MathML file, which bear some resemblance to a Haskell program. So I was wondering if I could convert them into Haskell and use bits of ghc to simplify them
02:09:55 <Oeje1> dons: I could never really wrap my head around it being winter now in the southern hemisphere.  When are your summer and winter vacations?
02:10:18 <basti_> joncooper: coq, axiom?
02:11:36 <Speck> loop is the dual of first... hmm, interesting
02:11:50 <basti_> it is? like how?
02:12:08 <basti_> ct wise?
02:12:29 <Speck> loop :: a (b, d) (c, d) -> a b c
02:12:41 <Speck> that-wise
02:13:12 <basti_> hmmm
02:13:34 * basti_ ponders
02:14:06 <dblhelix> the argument arrow of loop might very well toch the second component of its input
02:14:25 <dblhelix> /s/toch/touch
02:14:25 <dons> Oeje1, winter is thorougly on right now. but the break from uni is only 6 weeks (for those actually taking courses)
02:14:30 <basti_> yes
02:14:56 <dons> summer break starts around Dec 1 and goes till Mar 1, for undergraduates
02:15:14 <dblhelix> the types may suggest otherwise, but I don't think you can regard them as being dual to eachother
02:15:19 <Speck> weird to think of summer as starting in december
02:15:28 <Speck> dblhelix, fair enough, I didn't mean to use the term precisely
02:16:25 <joncooper> basti_: hmm. REDUCE looks interesting. How easy would it be to write out a new MathML file from those though?
02:16:36 <Oeje1> dons: Three months of summer break?!
02:16:40 <basti_> a program called REDUCE you mean?
02:16:50 <Speck> haha, I get three months as well :-)
02:17:02 <joncooper> yup - it was described on the axiom website I found
02:17:37 <basti_> well axiom goes well with texmacs, btw... but, it should be fairly easy to transform a program to mathml... other way round will be a little harder
02:18:29 <Lemmih> What's up with -fnumbers-strict?
02:18:31 <Oeje1> Three months is alsmost a semester for us.
02:18:52 <Speck> Oeje1, how many semesters in a year?
02:19:24 <Oeje1> Two of 13 weeks, two of 3 weeks.
02:19:59 <Oeje1> That is two semesters of (13 + 3) weeks.
02:20:02 <dblhelix> doesn't 'semester' implies two a year
02:20:06 <dblhelix> ?
02:20:10 <basti_> i thought so too yes lol
02:20:22 <Oeje1> dblhelix: Well, some have four. :-P
02:21:13 <Speck> it comes down to semantics
02:21:18 <Speck> which are no fun
02:27:17 <joncooper> The context for this is cardiac models described in a CellML file, the equations being an ODE system that has to be computed at each timestep. Equations written by mathematical modellers don't tend to be optimised for simulation however...
02:32:56 <basti_> one can only try huh... the problem is, haskell "=" isnt really an equation
02:34:17 <basti_> you cant go like (sqrt x) = y
02:36:37 <joncooper> indeed, but that shouldn't occur - all equations should be assignments or it wouldn't be a proper model
02:36:59 <Beelsebob> yeh... which is odd
02:37:02 <Beelsebob> because you can do
02:37:05 <Beelsebob> Just x = y
02:37:25 <Beelsebob> data constructors ore fine on the left
02:37:47 <Oeje1> Data constructors are EVIL!
02:39:57 <esap> data constructors are not evil. They're just injective.
02:40:42 * Oeje1 jumps hard on the floor.
02:40:49 <Oeje1> Evil, evil, evil!
02:41:11 <Beelsebob> I think you're misspelling data constructor
02:41:18 <Beelsebob> the way it's spelled is monad
02:41:32 <esap> monad?
02:41:50 <Beelsebob> ... the evil thing
02:42:12 <esap> ah, but monad's aren't evil either. Comonads are evil.
02:42:14 <Oeje1> Sigh, I'm just kidding.  I was trying to be a troll, but I failed. :-(
02:42:24 <Beelsebob> so was I *g*
02:42:25 <Beelsebob> :P
02:43:29 <esap> comonads are not even referentially transparent, so they're clearly evil.
02:43:33 <TheHunter> esap, speaking of comonads, did you see ski's Duel type class?
02:44:20 <esap> TheHunter: I think I've seen references to it, but can't remember seeing the actual type class.
02:45:19 <TheHunter> it's on the paste page, together with an implementation for monad-comonad-pairs that come from adjunctions.
02:48:16 <esap> hmm.. that's interesting.
02:51:23 <esap> I suppose the flipF stuff is something like the swing combinator?
02:51:43 <esap> ... but for adjunctions... hmm..
02:58:04 <esap> The symmetry of that thing is pretty cool. But I need to think about the type of 'duel' more, because I didn't think that was possible.
02:58:57 <esap> But maybe it's just cancelling the duals by using the derived adjunction instance (e.g. given F -| G and G -| H, there is a F -| H, IIRC)
03:11:19 <phriedrich> hi
03:11:51 <Lemmih> Hey
03:12:24 <musasabi> morning
04:09:32 <Speck> what's the newer research being done in high-level gui stuff like fruit?
04:09:52 <Speck> it seems to have fallen out of style
04:10:02 <pimaniac> fruit?
04:10:26 <Speck> Functional Reactive User Interface Toolkit
04:10:50 <Speck> http://haskell.org/fruit/
04:10:58 <pimaniac> thanks
04:11:59 <Speck> it doesn't seem to have seen much change since 2002, though there is wxFruit which is more recent
04:12:50 <pimaniac> yeah, i hit that first with google
04:14:05 <Speck> I've just read the wxFruit paper, but it seems like a noble attempt to lead the mostly research-bound field into practicality
04:14:16 <pimaniac> ill check it out later in the ACM databases
04:19:52 <Speck> hn. www.vioxxsource.org/25/shapr.html
04:28:10 <Jacken> why cant i use polymorphic types for UUAG attributes?
04:28:24 <Jacken> i get "Not in scope: type variable `a'"
04:31:13 <earthy> Jacken: actually, you can
04:31:32 <earthy> but you may have to encapsulate them
04:32:24 <Jacken> the types that give rise to these type errors are things like "type T_foo = ... -> TFun a -> ...."
04:32:40 <Jacken> i dont get what's so wrong about it
04:33:41 <musasabi> btw how does one implement an arbitary monad with UUAG?
04:34:00 <musasabi> It seems trivial for State monads, but how about something like ST?
04:34:56 <earthy> Jacken: true. it should be T_foo a = ... -> TFun a -> ....
04:35:15 <earthy> as otherwise the a is not bound on the lhs
04:35:27 <earthy> and thus either needs to be existentially qualified or is wrong
04:36:03 <Jacken> ow right, but does this means im screwed because these T_foo types are auto-generated?
04:37:27 <Jacken> im not sure if it should be existential though....
04:38:05 <Jacken> ideally it should be 'T_foo a'
04:40:56 <Jacken> but UUAG doesnt allow that, does it....
04:43:02 <earthy> not that I can see, no
04:43:10 <earthy> I've never had much reason to use that anyway
04:44:05 <Jacken> well im defining a polymorphic function as a local attribute, because i need information from that tree and dont want to make that information a parameter so i can lift this function out of UUAG
04:44:40 <Jacken> every analysis can use that function, and the fact that it is defined as a local attribute, means it can use attributes that should otherwise be passed as parameter
04:46:42 <earthy> you do know that  ATTR Stmt [ | | somethingorother:{HugelyComplex Type Applied To Variables} ] is valid AG?
04:47:37 <bourbaki> hidiho
04:50:16 <Jacken> yeah, because it doesnt look at the thing in between {...}
04:50:34 <Jacken> only it creates the T_foo type in the .hs which causes problems
04:52:16 <Jacken> ah the real problem is an inherited attribute that is polymorphic
04:52:32 <Jacken> i guess i'll have to pull it from the ag into some hs code
04:52:41 <earthy> yah
04:52:46 * earthy thinks so too
04:53:30 <Jacken> darn
04:53:40 <Jacken> if only uuag wasnt just a preprocessor or a bit smarter :P
04:53:46 <Jacken> thanks for the help
04:56:43 <earthy> ;)
05:35:31 <Lemmih> @seen shapr
05:35:32 <lambdabot> shapr is in #haskell. Last spoke 2 days, 9 hours, 22 minutes and 55
05:35:32 <lambdabot> seconds ago.
05:35:46 <Lemmih> shapr: Ack?
05:45:43 <jyp> @seen shapr
05:45:44 <lambdabot> shapr is in #haskell. Last spoke 2 days, 9 hours, 33 minutes and 8
05:45:44 <lambdabot> seconds ago.
07:53:14 * shapr throws parsers at metaperl 
07:53:37 <TheHunter> @seen shapr
07:53:38 <lambdabot> shapr is in #haskell. Last spoke 24 seconds ago.
07:53:46 <shapr> hiya Thomas, how's code?
07:53:57 <shapr> Lemmih: you called?
07:54:15 <TheHunter> hi Shae, code is good, though not much actual code is going on.
07:55:15 <TheHunter> i'm pretty busy right now - got my flight to the states the day after tomorrow.
07:55:41 <Speck> wxFruit, discuss.
07:55:42 <shapr> Cool, is this your first time going to the states?
07:55:57 <Speck> hehe oh america! where are you going?
07:56:25 <TheHunter> michigan state university.
07:56:40 <Speck> where from?
07:56:41 <TheHunter> i've been there before for two weeks about five years ago.
07:56:52 <TheHunter> wuerzburg, germany.
07:57:06 <shapr> iirc, you said you're going for one school year or so?
07:57:31 <shapr> Is that right?
07:57:33 <TheHunter> for one year, yes.
07:58:34 <shapr> I think it's worthwhile to spend time in other countries.
07:58:34 <Speck> is michigan state university the same as umich?
07:58:57 <TheHunter> no, it's msu.
08:00:10 <TheHunter> i'm pretty excited right now, one year's a long time.
08:00:36 <shapr> Yeah, it'll be cool :-)
08:00:45 <TheHunter> it probably means more math and less haskell, too.
08:00:49 <shapr> I look forward to your thoughts on US culture.
08:01:02 <shapr> Hopefully you'll still show up on #haskell some.
08:01:32 <TheHunter> sure.
08:02:24 <shapr> I wonder what my opinion is on US culture, I haven't been there in several years.
08:02:42 <thebug> Speck: no
08:02:59 <pejo> TheHunter, math helps abstract thinking though!
08:03:02 <thebug> Speck: Umich is in Ann Arbor, Michigan State is in East Lansing
08:03:09 <Speck> ah
08:03:17 * thebug at MSU
08:03:54 <thebug> interesting moment to flip by #haskell :)
08:04:08 <TheHunter> shapr, you didn't leave the us because of us culture, did you?
08:04:32 <TheHunter> thebug, studying cs?
08:04:38 <thebug> yep
08:04:49 <thebug> unfortunately we have -zero- FP instruction here
08:05:21 <liyang> :-/
08:05:41 <shapr> TheHunter: Nah, I moved to Finland to meet this woman I'm living with.
08:05:51 <thebug> at least in the CS department ... one of my friends mentioned a linguistics department class that does O'Caml
08:05:53 <TheHunter> oh :(. We'll, i didn't have FP instructions at würzburg, too, but i still managed to pick something up.
08:06:05 * liyang was under the impression it's standard on most undergrad courses here in the UK. (Though most students hate it.)
08:06:44 <Speck> there isn't much functional work being done here at johns hopkins, but there is some interesting operating systems research (EROS) and the same guy teaches a languages course where he covers ocaml and scheme
08:07:07 <thebug> TheHunter: interesting trip, you'll have to catch up with me sometime when you get here
08:08:23 <TheHunter> thebug, yeah cool. I hope I've got plenty of time in the next three weeks, only have to attend some "Summer english program".
08:08:45 <shapr> salut jyp
08:08:54 <thebug> on a funny note, I'm headed off to .de for a week (and know zero german!) :)
08:09:09 <TheHunter> hehe, we're you going?
08:09:31 <thebug> flying into frankfurt, then travelling around
08:09:45 <shapr> Man, I get frustrated talking to people who haven't even tried open source alternatives to Microsoft $PRODUCT and Adobe $SOMETHING.
08:09:52 <Speck> my favorite german (?) word is kaffeklatscher
08:10:43 <jyp> hey shapr
08:10:48 <thedward> shapr: I'm with you on that one.
08:11:02 <michaelw> Speck: you are working with shap?
08:11:16 <thedward> I managed to convince my gf to try openoffice before she shelled out the cash for MS Office; she is still using it.
08:11:22 <shapr> thedward: yay!
08:11:32 <Speck> I'm not (not even a CS student), but I am interested in his research
08:11:37 <shapr> Friend of mine just spent something like $1300 on Microsoft and Adobe.
08:11:48 <thedward> she now says she'll even try Linux if I install it for her. :)
08:12:00 <thebug> eep, that's more than my 3GHz P4 cost 2.5 years ago
08:13:33 <thebug> TheHunter: anything particular you'll be studying here?
08:13:35 <shapr> This friend of mine is convinced I'm an idealistic unrealistic open source religious fanatic :-(
08:13:52 <TheHunter> on a totally unrelated note, does anyone know of a tool that can encrypt hard drives without having to copy the data to another drive?
08:14:38 <TheHunter> thebug, yeah, math, more specifically topology.
08:14:45 <thedward> TheHunter: I don't have an answer off the top of my head, but which OS?
08:14:52 <thebug> TheHunter: nifty
08:14:54 <TheHunter> linux
08:15:08 <thebug> maybe bodge something using cryptoloop ?
08:15:34 <thedward> if any of the filesystems supported crypto in and of themselves, you could use convertfs, probably...
08:15:36 <shapr> There's recent code that encrypts using a file on the filesystem, you could do it with that if you have enough space to move each file with a loop.
08:16:03 <thedward> shapr, hmm, that makes sense
08:16:27 <thedward> that might work as long as it isn't your root disk.
08:16:37 <TheHunter> shapr, that's what i'll prbably have to do.
08:17:27 <thedward> I've been wanting to encrypt my laptop hd for awhile, but haven't had the time for the project yet.
08:18:20 <TheHunter> cryptography should be easier.
08:18:27 * shapr agrees
08:22:53 <Speck> I wonder if, instead of using the functional reactive approach for a huge gui, it might be more practical to write a svg rendering library or similar and then plug it into a more middle-level gui.
08:23:28 <shapr> Imho, the functional reactive gui approach is superior to all others with one minor drawback...
08:24:28 <ndm> shapr: which is?
08:24:36 <shapr> If you read the ImplementationNotes at the bottom of http://kevin.atkinson.dhs.org/fg/FG.hs you'll see what I mean.
08:25:29 <ndm> performance
08:25:49 <ndm> i think functional reactive programming looks good - but have never really studied it enough
08:26:15 <shapr> Performance is only a problem when you have to interact with lifted functions.
08:26:18 <Speck> I didn't look to much into FG due to a seeming lack of documentation, but wxFruit is quite impressive
08:27:05 <shapr> If you have an arrow instance that doesn't lift functions, it'll be fast and smooth. You'll be able to shortcut with confidence.
08:29:42 <shapr> That may be too limiting, it's handy to be able to write and use functions.
08:30:11 <shapr> But maybe there's a way to really lift functions into true arrows rather than just wrapping a black box?
08:31:25 <shapr> Then you'd get the best of both worlds.
08:31:57 <shapr> Arrows without the ability to wrap functions is a pure categorical world where you'd have to define new categories and their operations as primitives.
08:35:09 <shapr> Are there any guidelines on how to define new categories and primitive operations in such a way that they all work together? Or is the answer "Read more category theory" ?
08:36:18 <Speck> well "read more category theory" is probably a big part of it, but I bet there could be a (necessarily) general guidelines for mapping categorical concepts to haskell concepts
08:36:28 <Speck> that could be interesting, in fact
08:49:55 <musasabi> shapr: A small number of combinators could be used to reduce the number of black boxes needed.
08:53:41 <musasabi> const_arr :: v -> a i v, fst_arr :: a (i,q) i, and flip_arr :: a (b,c) (c,b).
08:54:55 <musasabi> and maybe list functions - like arr_list :: a (o,[o]) [o]
09:04:22 <shapr> Oh yeah! That would really help.
09:06:29 <musasabi> Of course it would not solve the problem, but it would make it occur only when one actually wants to lift a function - not when automatically translating the arrow notation.
09:10:50 <Speck> can those combinators be optimized in?
09:10:55 <Speck> or would it have to be explicit
09:17:09 <basti_> i should maybe try to write something useful in arrow style
09:20:48 <musasabi> Speck: well if we are talking about the arrow notation then the user never sees whether there are small black boxes or such combinators.
09:26:28 <tomdavie> buh
09:26:40 <tomdavie> what's used instead of fromInt these days?
09:26:58 <basti_> fromInteger i think?=
09:28:03 <tomdavie> ... couldn't match Integer against Int
09:28:28 <basti_> uh
09:28:32 <basti_> fromIntegral
09:28:49 <basti_> instance Integral Int
09:28:55 <basti_> instance Integral Integer
09:29:01 <basti_> this should work
09:29:36 <tomdavie> yeh, that worked
09:29:38 <autrijus> toInteger too if you're doing Int->Integer
09:29:59 <autrijus> but fromIntegral is likely SPECIALIZE'd, so either one is fine
09:30:04 <tomdavie> now I have to figure out what the hell type errors these are... QuickCheck and Hat are vomiting at each other
09:34:13 <tomdavie> hmm... this doesn't look like it's gonna be an easy job
09:35:26 <jyp> shapr: my TMR article should be ready for a review
09:35:39 <jyp> http://www.haskell.org/tmrwiki/PracticalGraphHandling
09:41:53 <tomdavie> shouldn't I get as hx file when I build an hs one?
09:42:20 <shapr> Nah, I think Hat builds hx files.
09:42:29 <tomdavie> ah... that would make sense
09:42:35 <tomdavie> wonders how to get them
09:42:40 <shapr> jyp: Cool, I'll read it.
09:43:29 <shapr> jyp: btw, I don't edit my master on the wiki either, I edit locally in wiki markup and paste into the page. That way I don't lose my content in case of screwup.
09:44:37 <jyp> shapr: thanks :)
09:45:41 <shapr> Also, literate Haskell, specifically lhs2Tex, is a possible (likely?) format for future TMR issues.
09:46:58 <Igloo> tomdavie: Are you the person rewriting the nhc98 RTS or have I got you mixed up with someone else?
09:47:18 <tomdavie> you're mixed up... that's Tom Shakell
09:47:36 <Igloo> Ah, sorry. Ta
09:48:15 <tomdavie> no probs
09:48:25 <Igloo> That's an eerie name for a Haskeller to have
09:48:50 <shapr> ?
09:49:14 <Igloo> Move the 's' 2 places to the right...
09:49:18 <shapr> haha
09:49:40 <tomdavie> well... he is single handedly rewriting nhc
09:49:46 <tomdavie> so it's kinda appropriate
10:22:18 <basti_> @type mapArray
10:22:24 <lambdabot> bzzt
10:23:16 <xerox> @hoogle mapArray
10:23:17 <Beelsebob> @hoogle mapArray
10:23:20 <Beelsebob> bah... too late
10:23:22 <basti_> ;)
10:23:25 <basti_> found it already
10:23:34 <basti_> its hidden in Data.Array.IO
10:23:38 <basti_> for example
10:23:52 <basti_> how about a decent search mechanism in ghci?
10:24:08 <xerox> basti_: compile a stand-alone version of "@index", please!
10:58:55 <basti_> xerox: sorry im back... does @index depend on the web or what?
11:06:02 <SyntaxNinja> 'morning
11:06:22 <CosmicRay> hi syntax
11:07:08 <SyntaxNinja> how's it going, CosmicRay
11:07:14 <SyntaxNinja> Igloo: dija get my mail?
11:07:31 <CosmicRay> SyntaxNinja: keeping busy like usual :-)
11:07:38 <CosmicRay> you?
11:07:40 <SyntaxNinja> CosmicRay: cool.
11:07:41 <KrispyKringle_> howdy folks
11:07:57 <CosmicRay> SyntaxNinja: still playing with my new gsm bluetooth phone as well :-)
11:08:06 <SyntaxNinja> not bad... went climbing, as usual. my gf did some awesome climbing, I was totally impressed.
11:08:09 <SyntaxNinja> ooh, I want one.
11:08:17 <SyntaxNinja> except that I hate cell phone companies.
11:08:21 <CosmicRay> SyntaxNinja: motorola v551, $100 at cingular
11:08:32 <SyntaxNinja> with a contract?
11:08:35 <KrispyKringle_> SyntaxNinja: Yeah, cell phone companies are stocked with idiots. It's ridiculous.
11:08:35 <CosmicRay> SyntaxNinja: me too.  cingular seems to be in the "indifferent" rather than "sucks" category for me so far
11:08:37 <CosmicRay> yeah, 2-year
11:08:46 <KrispyKringle_> CosmicRay: Cingular screwed me in the past.
11:08:49 <CosmicRay> their customer service at least gives a damn, unlike sprint
11:08:51 <Speck> hehe, if changelog is any indication you really _do_ hate them, syntax
11:08:53 <KrispyKringle_> But they seem just as good as anyone else.
11:08:59 <SyntaxNinja> KrispyKringle_: it's the intentionally screwing me that's worse than the idiots, IMO.
11:09:17 <SyntaxNinja> Speck: huh?
11:09:20 <CosmicRay> SyntaxNinja: I posted a review of cingular on my blog just this morning,  http://changelog.complete.org/node/353
11:09:31 <Speck> oh wait changelog is cosmicray
11:09:33 <KrispyKringle_> SyntaxNinja: Well, my story with Cingular is pretty long, so I won't waste your time. But they "lost" record of a $150 deposit I made and refused to give it back for about two months.
11:09:39 <CosmicRay> Speck: yes, and it's sprint that I hate :-)
11:09:50 <KrispyKringle_> I actually had to contact the state attorney general's office before they capitulated.
11:10:05 <CosmicRay> hmm.
11:10:06 <KrispyKringle_> Thing was, I had a receipt, a xerox of the contract, and everything, so there was no doubt that I'd paid them.
11:10:21 <CosmicRay> that sucks.
11:10:23 <KrispyKringle_> They were just lazy bums, and "The Computer says there's no record"
11:10:26 <KrispyKringle_> Yeah. I was pretty pissed.
11:10:31 <KrispyKringle_> But, c'est la vie.
11:10:36 <SyntaxNinja> KrispyKringle_: yeah. "My computer won't let me do it" is a bad excuse.
11:10:37 <CosmicRay> I had several similar experiences with sprint
11:10:41 <Speck> I have att, but I never have signal. people with verison tend to get the most reception around my area, which makes me think it's worth the extra cost
11:10:54 <Khisanth> someone mentioned a similar problem with them in another channel ...
11:10:55 <CosmicRay> the cell phone industry in general is at or near the bottom of US industries in terms of customer satisfaction
11:11:00 <CosmicRay> I think only cable companies are lower
11:11:07 <KrispyKringle_> SyntaxNinja: that seams to be a common one, though. They don't, to their credit, have any leeway to do things the computer doesn't think they should.
11:11:15 <KrispyKringle_> CosmicRay: yeah, you're right, I think.
11:11:18 <KrispyKringle_> It's pretty awful.
11:11:22 <basti_> say, the s in "ST s a"... is that supposed to be a real variable or is this just some dummy?
11:11:29 <SyntaxNinja> I wonder about satisfaction in the software industry
11:11:40 <SyntaxNinja> basti_: it's a type
11:11:43 <CosmicRay> KrispyKringle: sprint cancelled a phone order for me because they were out of stock, then over-charged me by $150 for it anyway
11:11:57 <CosmicRay> KrispyKringle: also they didn't cancel various servics I never wanted, even after they said that they had
11:12:02 <SyntaxNinja> basti_: it's the state "variable"
11:12:14 <basti_> SyntaxNinja: there is no constructor that actually puts in a value there is there?
11:12:17 <CosmicRay> KrispyKringle: and since last march, my contract expiration date mysteriously jumped frmo october 2004 to november 2005
11:12:34 <basti_> or... that is, a function that interfers with it?
11:12:44 <KrispyKringle_> CosmicRay: My mom had a similar battle with ATT. They quoted a phone at some price, then charged her credit card for, like, three times as much.
11:12:52 <CosmicRay> every one of these has required numerous annoying phone calls where they claim to have to transfer me somewhere, then hang up on me or transfer me to the computer attendant
11:12:53 <basti_> i would suspect some  read::ST s  then
11:13:03 <KrispyKringle_> They defended the action by saying that "We charge different people different rates."
11:13:03 <basti_> ah no
11:13:06 <basti_> read::ST s s
11:13:07 <CosmicRay> every time I call sprint, it seems like something gets messed up on my account
11:13:07 <KrispyKringle_> They they tried to cancel her contract.
11:13:15 <CosmicRay> KrispyKringle: heh
11:13:15 <KrispyKringle_> It's just bizarre, how unbelievably bad their customer service is.
11:13:30 <CosmicRay> KrispyKringle: strange thing is, I've had fairly good experiences with cingular so far
11:13:33 <basti_> and some runWithState::s->ST s a->a
11:13:38 <basti_> SyntaxNinja: ?
11:13:50 <CosmicRay> I've actually called their customer service several times over the past week, and they've all been, overall, positive experiences
11:13:56 <KrispyKringle_> CosmicRay: Well, you can't generalize such a large company.
11:14:01 <KrispyKringle_> I thin kthey all suck.
11:14:17 <Speck> what contradictary statements
11:14:55 <SyntaxNinja> basti_: I'm not sure actually. I usually use the C.M.State monad; but the IO monad is layered on the ST monad, and RealWorld is the type there.
11:15:01 <SyntaxNinja> I odn't know how one gets an initial state into the ST monad.
11:15:03 <KrispyKringle_> Speck: heh, true ;)
11:15:10 <CosmicRay> KrispyKringle: well, there are some things that seem to be policy that are good or bad.  for instance, sprint people generally refuse to tell me who they are (with LOTS of prodding, they'll give a "handle" that other sprint reps can e-mail them at).  Cingular folks always gave me a full name if I asked, and usually volunteered a full name and extension number if it seemed that my problem wasn't fully resolved at the end of a call
11:15:12 <SyntaxNinja> what's the diff bt the ST and State monads anyway?
11:15:21 <SyntaxNinja> ie, what do ppl use ST for?
11:15:23 <CosmicRay> KrispyKringle: I suspect that both of these are policy at the respective companies
11:15:38 <Speck> I've been using skype lately. I just turn off my phone when I'm at my computer. I can talk to my gf who is visiting china right now for free.
11:15:51 <basti_> SyntaxNinja: ahh.
11:15:57 <CosmicRay> KrispyKringle: though it is certainly true that there are plenty of bad reports of cingular circulating online, especially from former AT&T folks
11:16:06 <basti_> SyntaxNinja: there are bizarr0 arrays in ST
11:16:06 <Lemmih> SyntaxNinja: For mutable storage in a pure environment.
11:16:07 <CosmicRay> Speck: you should check into the various SIP services.
11:16:20 <CosmicRay> Speck: if both of you have VOIP, www.fwdnet.net is a great one
11:16:28 <CosmicRay> Speck: that way, you don't get locked into proprietary Skype stuff
11:16:29 <KrispyKringle_> CosmicRay: probably true. There are policy issues.
11:16:48 <Lemmih> Greetings, SyntaxNinja. (:
11:16:49 <SyntaxNinja> Lemmih: so the s type is always fixed?
11:16:53 <CosmicRay> Speck: you can buy SIP hard phones from a variety of vendors, and lots of people make SIP software phones as well
11:16:54 <SyntaxNinja> how's it going, Lemmih?
11:17:05 <CosmicRay> Speck: ther eis also the Asterisk PBX, free, for Linux, which totally kicks ass
11:17:07 <Speck> well, they say skype is going to always be free for computer<->computer, and if they change that I'll just uninstall it :-)
11:17:09 <Igloo> SyntaxNinja: replied
11:17:33 <CosmicRay> Speck: yes, but wouldn't you rather have your choice of software and accessories, rather than the limited ones that Skype supports?
11:18:08 <CosmicRay> Speck: or the same question for termination services... I can place SIP calls to anywhere in the USA (on the PSTN, not VOIP) for 1.1 cents/min by routing via SIP through voxee.com
11:18:15 <Speck> CosmicRay, well, I use the vskype extension and I don't think I've seen that elsewhere
11:18:26 * CosmicRay googles
11:18:28 <Lemmih> SyntaxNinja: Doing lots of interesting stuff... It's annoyingly distractive.
11:18:43 <CosmicRay> Speck: looks pretty similar to gnomemeeting or netmeeting to me
11:18:52 * Lemmih will write that install script "soon".
11:18:56 <Speck> yeah it is, but it's simple enough that my gf can use it
11:19:10 <CosmicRay> ok, well I'll grant you that SIP doesn't do video
11:19:31 <Speck> thanks for the recs :-) if skype ever goes sour on me I'll check them out
11:20:01 <Speck> of course once I get my gf a mac we can use ichat av
11:20:29 <SyntaxNinja> Igloo: the new version of cabal does actually change the build locations
11:20:32 <CosmicRay> and I believe that gnomemeeting is compatible with that :-)
11:20:50 <SyntaxNinja> Igloo: i mean the instal locations of libraries, but I doubt that matters
11:20:54 <SyntaxNinja> Igloo: it should be backward compatible.
11:20:55 <Speck> really? hn... I need to do more research on this subject I guess
11:21:14 <CosmicRay> yeah, H.263 is a fairly widely-available standard
11:21:25 <CosmicRay> with Asterisk, you could even integrate it into your home phone system, voice only
11:21:47 <CosmicRay> I replaced my traditional telephones with SIP phones, and replaced the phone cabling with Ethernet cabling
11:21:52 <CosmicRay> (for most phones in the house)
11:22:21 <CosmicRay> SIP hardphones look and feel like the sort of high-end phones you'd expect to see in a business, but are fairly cheap and have an Ethernet instead of RJ11 jack
11:22:30 <CosmicRay> then all you need is a pbx (asterisk) or sip router
11:22:58 <CosmicRay> with a pbx, each phone can be an extension and they can call each other.  my asterisk server can also route outbound calls over the internet or over our landline, depending on which one is cheapest for a particular destination
11:23:07 <Igloo> SyntaxNinja: If it's not backwards compatible enough for ghc then IMO it isn't for ghc-in-Debian either, for exactly the same reasons
11:23:33 <SyntaxNinja> Igloo: it'll be a separate package, specifically requested by the user.
11:23:49 <SyntaxNinja> Igloo: GHC doesn't allow any api changes whatsoever.
11:24:01 <CosmicRay> asterisk does have h323 support (the underlying protocol for netmeeting, ichat, gnomemeeting, etc.), so it would be not all that hard to connect your sip phone to ichat
11:24:06 <CosmicRay> should you ever do that
11:24:12 <CosmicRay> the point is, sip is open and can do more :-)
11:24:30 <Speck> I've heard good things about asterisk
11:24:52 <Speck> yeah, maybe when I get my own place
11:24:55 <Igloo> SyntaxNinja: But the user installing it could break other packages building
11:25:05 <Speck> I share a house with my college chums
11:25:09 <CosmicRay> ahh
11:25:24 <CosmicRay> you can also use an analog telephone adapter (ATA) to provide dialtone to your traditional analog phones in-house
11:25:43 <CosmicRay> we do that for our cordless phone (cordless sip hardphones are still quite expensive)
11:26:27 <SyntaxNinja> Igloo: unlikely, but possible, in which case the user files a bug against the package that they can't build, and the maintainer of that package adds a conflicts. what's wrong with that?
11:27:43 <Igloo> Presumably there are currently no libraries that use cabal other than for installation?
11:28:07 <Igloo> (i.e. none that import Distribution.* or anything)
11:28:17 <SyntaxNinja> Igloo: there will be. one big reason for the new cabal is to support cabal-get.
11:28:41 <Igloo> But we can do cabal-get with a cabal-new package
11:28:43 <SyntaxNinja> Igloo: and there may be, I don't know of others.
11:29:10 <Igloo> If there are any then it can break them due to cross-module inlining
11:29:29 <Speck> isn't lemmih working on some kind of cabal-based package distribution thing?
11:30:13 <SyntaxNinja> Igloo: the new cabal fixes a bunch of bugs in the old cabal. I've already gotten requests to package it.
11:30:32 <Igloo> If there aren't any then I guess you can do your hack, but I don't like it  :-)
11:30:35 <SyntaxNinja> Igloo: right. if there are such, then they should conflict w/ th enew cabal.
11:30:49 <SyntaxNinja> Speck: yeah, cabal-get / hackage
11:30:55 <Speck> hackage is what I was thinking of
11:31:29 <SyntaxNinja> Igloo: we need some way to do this. being tied to the ghc release cycle isn't viable.
11:31:56 <SyntaxNinja> no one will use cabal if they're stuck with 1.0 forever.
11:32:01 <Igloo> SyntaxNinja: I prefer the lib{ghc6,nhc98,hugs}-cabal-new-dev route myself
11:32:09 <Igloo> And cabal-get can always use that
11:32:23 <SyntaxNinja> but you mean to change the name of the cabal package itself to cabal-new or something (inside ghc)
11:32:42 <Igloo> No, ghc (et al)'s stays the same
11:32:47 <Igloo> The standalone one has its name changed
11:32:57 <SyntaxNinja> right, but the cabal's ghc's package will be called cabal-new
11:33:09 <Igloo> Right, I think
11:33:46 <Igloo> And cabal-get calls runhaskell -package cabal-new Setup.hs foo   or whatever
11:33:59 <SyntaxNinja> well, you can always differentiate by the version number, "runhaskell -package cabal-1.2 Setup.hs -o setup"
11:34:07 <Igloo> Only with ghc6
11:34:25 <Igloo> And having 2 cabal packages installed breaks the automatic dep scripts
11:34:35 <SyntaxNinja> the problem is some bugs in ghc 6.4 make this hard; they'll be fixed in 4.1 but I think there should be a way to use cabal in the meantime.
11:34:42 <SyntaxNinja> howso?
11:34:59 <Igloo> Because you can't just look to see which package is providing libghc6-cabal-dev
11:35:53 <SyntaxNinja> because multiple packages will be providing it?
11:36:31 <Igloo> Right
11:37:02 <SyntaxNinja> can't you just pick one that's providing it?
11:37:40 <Igloo> Not if you're a library using it, as you need the one that you have bits cross-module inlined from
11:39:31 <SyntaxNinja> I think that such breakage will be smaller than the current breakage, and be temporary; it'll be better when 6.4.1 comes out since it can handle multiple packages much better.
11:40:18 <SyntaxNinja> the theoretic breakage is stuff that explictly uses cabal, not just for building, which so far is only cabal-get. the real breakage now is all those packages that are broken because the current cabal can't be instaled alongside the current ghc.
11:40:54 <Igloo> I think multiple packages are something we want to avoid where possible. What is it you dislike about cabal-new?
11:41:24 <SyntaxNinja> Igloo: I dislike that all the documentation that tells you how to use cabal will not be correct.  why do you want to avoid multiple packages?
11:42:33 <Igloo> Because of the automatic depends thing. Currently we can just assume it won't happen with cabal, but I'm not convinced that'll be true for long (I already have an app that uses cabal, so a lib isn't that farfetched)
11:43:25 <musasabi> Igloo: wouldn't it help if the lib depended on an explicit version of cabal?
11:44:05 <Igloo> musasabi: On an explicit version we could make work
11:44:13 <musasabi> Igloo: so you would have depend: libghc6-cabal-1.2, (which of course also provides for the generic libghc6-cabal)
11:44:22 <Igloo> We can't do cabal (>= 1.1) unfortunately, as we don';t have versioned provides
11:44:51 * SyntaxNinja wonders if we'll ever get versioned provides
11:45:08 <Igloo> They're on the list, but we won't be able to use them until at least etch+1
11:45:30 <Igloo> And by then we'll all be using epigram anyway  :-)
11:45:52 * Igloo heads home - back in ~30
11:45:57 <SyntaxNinja> Igloo: l8r
11:46:04 <SyntaxNinja> CosmicRay: any opinions?
11:54:22 * CosmicRay returns
11:54:49 <CosmicRay> SyntaxNinja: I haven't really been following, sorry
11:55:08 <SyntaxNinja> CosmicRay: no need to apologize because YOU WILL PAY!!!1
11:55:11 <CosmicRay> heh
11:56:11 <SyntaxNinja> basically, I want users to be able to install libghc6-cabal-dev, which will be the latest cabal. the preinst script will remove any cabal that's already registered with GHC.
11:56:23 <SyntaxNinja> this is necessary because ghc 6.4 doesn't actually deal with multiple versions of packages too well.
11:57:14 <SyntaxNinja> Igloo argues that this will break anything that depends on the cabal in GHC itself (besides for building) so they'll have to conflict against the latest cabal (binary incompatibility and such)
11:57:21 <CosmicRay> well, I think that *removing* a cabal from ghc is probably not quite right, perhaps what you want to do is *divert* it
11:57:39 <SyntaxNinja> well, really we're just unregistering it with ghc-pkg
11:57:56 <CosmicRay> is the new cabal compatible with ghc6's cabal?  that is, code that works with ghc6's cabal will work and behave the same way with the new one?
11:58:27 <SyntaxNinja> I argue that there are no such packages that depend on cabal, so the real problem of the packages that are currently broken is worse, and this problem will probably be solved with the new ghc 6.4.1
11:58:53 <CosmicRay> err, so was that a yes? :-)
11:58:57 <SyntaxNinja> yeah, code that works will behave almost the same; the install locations are somewhat different, but folks shouldn't be depending on this.
11:59:01 <CosmicRay> ok.
11:59:16 <CosmicRay> yeah, that makes sense to me then
11:59:24 <CosmicRay> what bugs are fixed, out of curiousity?
11:59:33 <SyntaxNinja> yay I win. Igloo isn't here to defend his point of view which I probably have distorted terribly.
11:59:39 <CosmicRay> hehe
12:00:10 <CosmicRay> yeah, just remember that he can always make ghc6 conflict with cabal if you tick him off too badly ;-)
12:02:04 <SyntaxNinja> heh
12:02:17 <SyntaxNinja> I cna't remember which are fixed offhand. I'll be fuiguring that out pretty soon.
12:04:34 <thedward> epigram?
12:06:47 <Oejet> Hi, qbert.
12:06:59 <qbert> hey hey :)
12:07:44 <vegai> exchange program
12:07:50 <qbert> any suggestions for a newbie to functional ( coming from C/C++ ) trying to learn haskell ?
12:08:21 <smott> don't give up
12:08:24 * vegai points at shapr.
12:08:27 <jyp> http://www.haskell.org/~pairwise/intro/intro.html
12:08:36 <jyp> ... qbert
12:09:05 <CosmicRay> qbert: yes...
12:09:16 <CosmicRay> qbert: http://www.isi.edu/%7Ehdaume/htut/ is good
12:09:37 <CosmicRay> qbert: Haskell: The Craft of Functional Programming, 2nd ed., is the very best available, but it is a physical book and not a pdf
12:09:46 <CosmicRay> qbert: also there is this channel for questions ;-)
12:09:51 <xerox> basti_: back.  It does depend on lamdabot, i.e. on IRC.
12:09:57 <basti_> i see.
12:10:03 <thedward> CosmicRay: coincidentally, my copy of said book should be arriving in the next couple days.
12:10:21 <CosmicRay> qbert: you will find haskell to be very different than what you know.  it may be a bit jarring.  but in the end, it should be very rewarding.  haskell is very powerful
12:10:25 <CosmicRay> thedward: nice
12:11:03 <CosmicRay> qbert: I have also written a brief article summarizing the differences here: http://www.freesoftwaremagazine.com/free_issues/issue_05/haskell/
12:11:09 <qbert> CosmicRay, yea I like physical books way better than reading on screen , now to see if its at any bookstores
12:11:10 <CosmicRay> it includes a few brief introductions to haskell
12:11:16 <thedward> CosmicRay: there are several typos in yaht; and the section on "contiuation passing" is kind of opaque
12:11:25 <qbert> they really need a 'technical book store' in this city :S
12:11:32 <CosmicRay> qbert: my guess is probably not, but I got it from amazon no problem
12:11:46 <CosmicRay> thedward: yes, and there are some yaht sections that hal hasn't actually written yet
12:11:54 <CosmicRay> nevertheless, it is, imho, the best available for now.
12:12:05 <CosmicRay> btw, if you get craft2e, the exercises are good
12:12:27 <CosmicRay> the haskell-cafe list and its archives are also useful
12:13:08 <thedward> CosmicRay: the first chunk was really good. but I just got put off by one too many things. until my book gets here, I've been playing with translating the early exercises from SICP to haskell.
12:13:35 <CosmicRay> sicp?
12:14:08 <thedward> the Structure and Interpretation of Computer Programs, the MIT Scheme text
12:14:14 <CosmicRay> ahh, interesting
12:14:33 <thedward> the early stuff doesn't really have much to do with IO or mutable data structures
12:15:07 <thedward> on the downside, I may end up speaking Haskell with a lisp. ;)
12:15:46 <CosmicRay> hehe
12:15:58 <CosmicRay> do you know scheme already?
12:16:20 <thedward> well, I was learning scheme, then came across Haskell and found it more appealing.
12:16:30 <CosmicRay> yes, it is :-)
12:18:06 <thedward> huh. I need a lot learnin' before I can understand the ideas behind epigram.
12:18:34 <swiert> why are you interested in epigram?
12:18:52 <thedward> just saw someone mention it and I google'd it
12:19:07 <thedward> I like to be aware of what languages are out there and such.
12:20:05 <swiert> I'd definitely recommend learning haskell, before diving into epigram.
12:21:10 <thedward> oh. yes.
12:21:17 <thedward> I'm just browsing. :)
12:21:28 <swiert> at the moment epigram is more of a toy language with a lot of interesting ideas - they both share a somewhat similar background.
12:42:00 <marcot> Hello, I'm trying to do a haskell library that links with a C library, using c2hs.
12:42:27 <marcot> To make things easier, I've wrote a new_form.c file that gives an easier syntax to the C functions in the library.
12:42:47 <marcot> Everything worked good, but for compiling a test file for using this haskell library I'm using:
12:43:17 <marcot> $(HC) -o teste -lgpcl new_form.o Teste.hs
12:43:24 <marcot> Where HC is:
12:43:31 <marcot> HC = ghc --make -O2 -Wall -package c2hs -fffi
12:45:31 <marcot> But when I install the library, I would like not to use new_form.o, this should only be used for compiling the haskell library.
12:45:47 <marcot> How can I compile the library so that it won't need new_form.o?
12:48:23 <astrolabe> @pl \x -> 3<x && 1>x
12:48:25 <lambdabot> liftM2 (&&) (3 <) (1 >)
12:52:22 <Igloo> marcot: But you need the functions in the C file available?
12:53:10 <marcot> Igloo: The library uses this functions.
12:53:32 <marcot> Igloo: when I omit new_form.o in compilation line, it gives undefined reference to a lot of functions.
12:53:49 * Igloo doesn't understand what you're trying to do
12:54:11 <marcot> I'm building a library called GPCHaskell.
12:54:22 <marcot> Which is Haskell bindings for the GPC library in C.
12:55:00 <marcot> I wrote new_form.c to make things easier, cause the original GPC syntax was not very friendly.
12:55:49 <jyp> For the debian ppl around here... what's the state of haskell-unsafe ?
12:56:06 <jyp> Is GHC 6.4 ok in there ?
12:56:22 <Igloo> marcot: You should be able to do the linking step as if you were doing it against the real library, then, I think
12:57:18 <Igloo> jyp: I think it's not the latest deb (which you can get from Debian unstable), but it should pretty much work
12:57:34 <jyp> Igloo: thank
12:57:41 <jyp> s
12:57:55 <marcot> jyp: it's in unstable, in the forth revision.
12:58:35 <jyp> ok, I got 6.4-4, good
12:59:04 <jyp> then I don't understand the way ghc links :/
12:59:23 <Igloo> ?
12:59:25 <jyp> :~/haskell/yi$ ghc -o yi-static   -package-conf yi.conf -package yi -package mtl Main.o Yi.o
12:59:25 <jyp> /home/jp/haskell/yi/libHSyi.a(Emacs.o)(.text+0x14a9): In function `__stginit_YiziKeymapziEmacs_':
12:59:25 <jyp> : undefined reference to `__stginit_ControlziMonadziRWS_
12:59:45 <jyp> what's is supposed to mean?
12:59:46 <Igloo> -package mtl
13:00:03 <jyp> it's in there ...
13:00:26 <Igloo> Oh, sorry
13:01:29 <Igloo> Not sure, then
13:02:01 <jyp> I think it should have been put when compiling libHSyi.a ...
13:02:12 <jyp> remains to be found how to do that
13:03:19 <jyp> well, libHSyi.a is built by "ar" :/
13:08:18 <jyp> For the record, I found the solution
13:08:32 <jyp> (hacking yi.conf)
13:08:47 <basti_> :)
13:08:53 <basti_> now you can adore my emacs keymap!
13:09:03 <jyp> haha :)
13:09:51 <jyp> actually your keymap compiled ok out of the box
13:09:59 <basti_> wow.
13:10:15 <jyp> the problem appeared when I hacked something else
13:10:23 <basti_> i see
13:19:49 <jlouis> g 7
13:35:27 <jyp> someone's playing chess ? :)
13:40:16 <tromp> no, we're go players
13:41:38 <jyp> g7 fooled me... chess typical :)
13:41:54 <jyp> or is it g6 ?
13:42:12 * jyp hasn't played in a while :))
13:44:14 <norpan> i suppose g6 is pllayed a lotmore often ui
13:44:23 <norpan> than g7 in chess
13:44:27 <_metaperl> jyp: you mean Bg7 :)
13:44:33 <_metaperl> fianchetto :)
13:44:49 <jyp> I must have confused the two...
13:44:56 <kaol> O-O-O
13:44:56 <jyp> g6 + Bg7
13:45:01 <_metaperl> yup
13:59:43 <shapr> bringert: hiya! How was vacation?
14:01:09 <SyntaxNinja> y0 shapr
14:01:25 <shapr> y0 y0
14:02:01 <shapr> wassup?
14:03:03 <SyntaxNinja> nomuch...
14:04:01 <SyntaxNinja> shrimpx: good to have lunch w/ you today :)
14:04:15 <jyp> rofl
14:05:12 * SyntaxNinja is alergic to shrimp, for the record.
14:06:14 <lament> that's not a pleasant allergy
14:06:28 <lament> but look on the bright side! at least you're not allergic to chocalte
14:06:30 <lament> chocolate
14:06:37 * SyntaxNinja nods
14:07:12 <jyp> being allergic to water is even more annoying
14:08:33 <SyntaxNinja> does anyone else here find the ACM term / keyword system pretty annoying?
14:08:45 <shapr> I find ACM annoying, yes.
14:08:59 <SyntaxNinja> and by induction...
14:10:35 <astrolabe> and by induction, shapr finds everything annoying?
14:10:53 * SyntaxNinja inducts shapr into the hall of fame
14:15:46 <shapr> Wouldn't that be hall of flame in the case of ACM?
14:16:09 <shapr> Mmm, I just got back from three hours of unicycling. Only 16 kilometers, but I'm still getting used to Secret Joy.
14:16:23 <shapr> hej javax
14:16:37 <javax> 'lo.
14:16:51 <shapr> Är du intresserad av #haskell.se också?
14:16:53 <lament> 16k in 3h? Sounds like walking
14:17:15 <basti_> you have to count dropping off the unicycle
14:17:33 <astrolabe> Is it harder work or easier than walking 16k?
14:17:37 <SyntaxNinja> and getting knocked off the unicycle by ACM's evil agents.
14:17:55 <lispy> ah, yes the evil agents
14:17:58 <shapr> lament: I spent half an hour or more eating icecream :-P
14:18:13 <lispy> shapr: that's what i call a workout ;)
14:18:50 <lispy> ya know what, i'm am very unimpressed with software built from a spec
14:18:51 <SyntaxNinja> hehe
14:19:07 <shapr> That's the fun part, it's pretty warm here, so halfway we stop and get drinks and ice cream.
14:19:39 <SyntaxNinja> is there a category I should use to indicate that it's about a functional language?
14:20:06 <shapr> lispy: most specs suck, the only way to get a decent spec is to iterate the spec along with the software.
14:20:30 <Philippa_> or to need the software after the requirements're well-established anyway (eg you're cloning something)
14:20:55 <lispy> shapr: hmm... in this case there have been several radical redesigns of the software, but i think the spec was written from scratch each time
14:21:01 <Philippa_> most of what's involved in "write a shopping cart for my web site" is like that, for example
14:21:08 <astrolabe> But then how can contract someone to write software?
14:21:37 <shapr> lispy: I would recommend against that.
14:22:00 <shapr> astrolabe: Software fulfills clients' needs. Problem is, they don't usually know what they want until you don't give it to them.
14:22:11 <shapr> So you have to not give them the right thing several times before they know what they want.
14:22:13 <lispy> what i'm experiencing is that we have a lot of "implemented" features, only a fraction of which "work"
14:22:46 <lispy> shapr: that's an interesting way of phrasing it.  Really cuts to the point.
14:22:48 <Philippa_> shapr: at which point the coders want a per-hour contract...
14:22:49 <musasabi> shapr: did you get something more out of secret joy?
14:22:51 <shapr> In my experience, you write a prototype that just barely does anything, get the customer to use it, and they see what they don't want really quickly.
14:23:10 <shapr> musasabi: No, not yet. I have been reading your code, it's quite interesting.
14:24:26 * Philippa_ is suddenly reminded of possibly the silliest situation ever: coding on classified projects where you're not allowed to know what your code needs to do
14:24:32 <lispy> i was testing formulas today, and "=10/5" results in divide by zero, and "=10/0" results in infinity.  I find it hard to believe someone bothered to implement that, when it's so horrible broken
14:24:56 <shapr> Philippa_: Personally, I think the best approach is to have a per-feature contract, and deliver new working features every iteration. (Yes, this is XP)
14:24:57 <wagle> Philippa_: i did that when i programmed accounting apps
14:25:19 <wagle> i knew nothing about accounting..
14:25:25 <lispy> hehe
14:25:41 <shapr> That's a really bad pattern in contract software. You should always have a domain expert as part of the team.
14:25:50 <wagle> "hmm..  this thing (whatever it is) needs to go over there.."
14:26:58 <wagle> isnt the customer supposed to see whats happening while its happening?  (ie, not surprise you at the end by wanting something else?)
14:27:52 <shapr> If you have small iterations, and the customer chooses the new features after you've estimated each feature cost, they'll never be surprised.
14:27:53 <Philippa_> yeah, but you still want a domain expert around, even if it's the customer (or somebody from the customer) spending ages working with you
14:28:39 <lispy> estimating feature cost sounds hard
14:28:41 <shapr> The domain expert represents the 'common sense' decisions of the customer.
14:29:01 <shapr> It's not that bad actually, just never ever estimate a feature cost until you've written a spike solution.
14:29:14 <lispy> spike?
14:29:16 <astrolabe> I find it very difficult to predict how long coding something will take.
14:29:18 <shapr> In programming, you cannot know how hard a thing is to do, unless you have done it.
14:29:28 <shapr> astrolabe: Yes, exactly!
14:29:37 <Philippa_> lispy: sort of a quick-hack nail-this-one-feature solution that sucks on all other counts
14:29:42 <shapr> http://c2.com/cgi/wiki?SpikeSolution
14:29:53 <lispy> aight then
14:30:16 <kuribas> Is it usual to use monads and arrays to do string manipulations?
14:30:22 <jyp> The good thing is, you can then charge any amount of time
14:30:45 <Philippa_> kuribas: no, but probably a good idea if you want it to be fast
14:30:45 <jyp> since then, if they know how much time you should take, it means they have already done it
14:30:49 <jyp> QED.
14:31:19 <shapr> I didn't understand that logic.
14:31:38 <lispy> i've been finding more and more that rewriting software is more important to getting a good end result than anything else
14:31:45 <kuribas> Philippa_: hmm, couldn't the compiler do this kinds of optimizations?
14:32:00 <jyp> Well... The thesis that the customer never knows how much time you should take to program something
14:32:12 <Philippa_> kuribas: it's potentially a bit difficult
14:32:31 <lispy> lying is never good for business in the long run
14:32:40 <Philippa_> which isn't to say that a fast string type can't be built, just that String ain't it
14:32:47 <jyp> Since they haven't done it beforehand, and using your proposition above, it's trivially true.
14:32:56 <astrolabe> lispy agreed on the re-writing
14:33:11 <Philippa_> lispy: the first release of Flippi was kind of a spike solution for a haskell wiki, if that makes sense?
14:33:16 <jyp> (I experimented it...)
14:33:34 <Philippa_> the next release is probably going to be one for a 'serious' one (ie one with room for security, extensibility etc etc etc)
14:33:35 <lispy> Philippa_: i'm not familiar with Flippi, but i think i understand
14:33:50 <lispy> well, don't over design
14:34:05 <Philippa_> lispy: the notable thing about the first release of Flippi is that it does little but serve pages and let you edit them, and the code base is /tiny/
14:34:36 <Philippa_> there're a couple of things in the current codebase that're minorly hairy, but they're about providing a butt-simple abstraction on top. I'm trying to keep it to one layer in that regard
14:36:03 <shapr> hiya poetix
14:36:06 <poetix> hi shapr
14:40:34 <frederik> Philippa_: what do you use for versioning in Flippi?
14:41:03 <frederik> Philippa_: i want to write something wiki-like but an actual wiki won't suffice
14:41:40 <lisppaste2> metaperl pasted "how to curry trace?" at http://paste.lisp.org/display/10013
14:43:49 <Philippa_> frederik: I've got a darcs repo set up, internally any versioning-type stuff's left for plugins
14:44:04 <Philippa_> what do you need out of it?
14:45:15 <frederik> basically what a wiki needs. i have a flash card application and i want to let people add cards... i guess i could select a syntax that lets you distinguish card front from card back and then use the editing functionality of a wiki, but...
14:45:32 <frederik> (i mean add cards, and edit them, and rename them)
14:47:04 <_metaperl> could someone please help with my Haskell question? It is fairly straightforward and pasted here: http://paste.lisp.org/display/10013
14:49:13 <frederik> _metaperl: what happens?
14:49:40 <arjanb> replace "(trace" with "trace ("
14:49:40 <wagle> myTrace takes one arg, and you are giving it two
14:49:58 <wagle> oh.. nm
14:50:03 <frederik> _metaperl: what arjanb said
14:50:25 <wagle> what frederik said arjanb said
14:50:36 <astrolabe> what wagle said
14:51:32 <frederik> <<loop>>
14:52:03 <frederik> hey i finally implemented a *working* MonadFix for WASH now...
14:52:51 <frederik> it took many applications of "trace" and many "HERE" messages
14:53:09 <frederik> ... to find what was looping I mean
14:53:12 <SyntaxNinja> ahh... trace
14:53:47 <SyntaxNinja> if you ever have the choice, develop an extensive unit test suite alongside any haskell software you write.  it is much much better than trying to use trace.
14:56:08 <Spherical`> Hi, sorry, I've been reading the wiki for Haskell and have been unable to find any information on which web server implementations/modules are the best? Any ideas? Is it WASH?
14:56:27 <frederik> yes
14:56:34 <Spherical`> Thx.
14:56:37 <frederik> but you should use my version, which i haven't published yet :)
14:56:56 <Spherical`> Does that mean you're going to send me a link or DCC it?
14:57:10 <frederik> what's DCC?
14:57:23 <Spherical`> Direct connection? (IRC)
14:58:03 <frederik> i'll make it accessible in about 10 minutes at http://ofb.net/~frederik/washng-2.4.6.tar.gz
14:58:25 <Spherical`> No backdoors! Nor bugs! :)
14:59:02 <frederik> there may be bugs :) it's not very different but one thing i really needed was to be able to put submit buttons *before* input elements, WASH doesn't allow this, surprisingly enough. in my version you can do it with 'mdo'
14:59:14 <frederik> another thing, the build is about 10x faster, and it uses cabal
14:59:57 <Spherical`> Are you an officially developing for WASH?
15:00:08 <_metaperl> wagle: thanks
15:00:30 <frederik> i send Peter Thiemann patches and requests. sometimes he's very helpful, but often he's too busy. so i decided to fork my own version
15:00:40 <frederik> also, he insists on Haskell98 compatibility
15:00:44 <frederik> which is very limiting
15:00:57 <wagle> ptv2?
15:04:52 <Philippa_> Spherical`: WASH is a mixed bundle. Network.CGI is insufficiently capable, though there're modified versions of it knocking around that're reasonably good - you get the raw "here's your input, spew data out here" interface and nothing else that way, but that can be an advantage too
15:05:39 <_metaperl> how is the perl5-haskell connectivity? I dont savor rewriting all the raw Perl modules on CPAN in Haskell when I need some functionality. E.g. CGI.pm
15:06:57 <Philippa_> how much does CGI.pm actually give you, anyway?
15:07:03 <musasabi> HSP is slowly moving into filling the middle between Network.CGI and Wash.
15:07:16 <bringert> Philippa_, I take it you have seen http://www.cs.chalmers.se/~bringert/darcs/haskell-cgi/Network/NewCGI.hs
15:08:11 <_metaperl> Philippa_: CGI.pm is a full-featured CGI module for Perl: http://search.cpan.org/~lds/CGI.pm-3.10/CGI.pm
15:08:39 <Philippa_> yeah. I should look it over more seriously sometime
15:08:54 <bringert> godd night everybody
15:08:59 <bringert> good
15:09:00 <bringert> dammit
15:09:33 <Philippa_> _metaperl: define full-featured?
15:10:52 <_metaperl> Philippa_: well... it handles everything I've needed. maybe I shouldnt make such bold statements. sessioning is best handled by other Perl modules
15:11:08 <_metaperl> it held up during the dot-com era quite well
15:11:40 <_metaperl> but anyway, has anyone worked on perl5-Haskell connectivity?
15:11:41 <Philippa_> yeah. The things I want in a haskell CGI module are full support for grabbing all the input, cookies and spitting back out whatever I legitimately can from a protocol POV
15:11:57 <_metaperl> Philippa_: that's all easy with CGI.pm
15:12:16 <frederik> Spherical`: ok, should be there. you will be my first tester, if i've managed to instill enough confidence
15:12:37 <frederik> Spherical`: http://ofb.net/~frederik/washng-2.4.6.tar.gz
15:12:41 <Philippa_> yeah, I don't /want/ a perl module though :-)
15:12:59 <Philippa_> I'm just wondering how much more than that CGI.pm does - providing an HTML type, stuff like that? Any further?
15:13:17 <_metaperl> CGI.pm generates HTML/form data... it can.
15:13:31 <_metaperl> it can also create the MIME type header
15:13:55 <_metaperl> it's very poorly written, but very widely used.
15:14:02 * frederik goes home
15:14:11 <_metaperl> so, it does work, but god forbid you need to modify it
15:14:15 <_metaperl> or extend it
15:14:18 <Philippa_> yeah, the MIME type bit'd be useful, and sort-of expected if you see where I'm coming from. Network.CGI just assumes you're spitting out HTML
15:14:20 <Philippa_> heh
15:14:30 <_metaperl> eek
15:14:42 <_metaperl> can't serve other MIME types... gak
15:15:17 <Philippa_> OTOH, the lib's fairly liberally-licensed IIRC
15:15:20 <Philippa_> anyway, I should go to bed
15:15:35 <_metaperl> good night
15:16:34 <Spherical`> frederik, okay thanks for link.
15:19:12 <_metaperl> how do I add a character to a string? "hello" ++ 'j' doesnt work
15:24:00 <kaol> @plugs "hello" ++ ['j']
15:24:06 <lambdabot> "helloj"
15:25:15 <kaol> @plugs ['h', 'e', 'l', 'l', 'o'] ++ ['j']
15:25:17 <lambdabot> "helloj"
15:26:35 <_metaperl> kaol thanks. here was my solution:
15:26:35 <_metaperl> reverse ('a' : reverse "hi there")
15:26:47 <_metaperl> kaol: I like yours much better
15:26:59 <kaol> String is just [Char], after all.
15:29:23 <basti_> @plugs "hello" ++ "j"
15:29:24 <lambdabot> "helloj"
15:29:32 <basti_> @type (++)
15:29:34 <lambdabot> forall a. [a] -> [a] -> [a]
15:41:27 <musasabi> Epigram seems quite unfriendly from the UI point of view..
15:43:23 <lispy> @type ord
15:43:24 <lambdabot> bzzt
15:43:42 <lispy> @hoogle Char -> Int
15:43:44 <lambdabot> Char.ord :: (Char -> Int)
15:43:44 <lambdabot> Char.digitToInt :: (Char -> Int)
15:43:44 <lambdabot> Prelude.fromEnum :: Enum a => (a -> Int)
15:44:10 <lispy> @hoogle Int -> Char
15:44:11 <lambdabot> Char.chr :: (Int -> Char)
15:44:11 <lambdabot> Char.intToDigit :: (Int -> Char)
15:44:11 <lambdabot> Prelude.toEnum :: Enum a => (Int -> a)
15:44:43 <lispy> map  (chr . ((+1) . ord)) "hello"
15:44:47 <lispy> @eval map  (chr . ((+1) . ord)) "hello"
15:44:48 <lambdabot> "ifmmp"
15:45:22 <kaol> @eval map  (chr . ((+1) . ord)) "hal"
15:45:24 <lambdabot> "ibm"
15:45:27 <lispy> @eval ord a
15:45:28 <lambdabot> Variable not in scope: `a'
15:45:34 <lispy> @eval ord 'a'
15:45:35 <basti_> @pl (chr .((+1).ord))
15:45:35 <lambdabot> 97
15:45:35 <lambdabot> chr . (1 +) . ord
15:46:16 <basti_> musasabi: well, but it produces type-correct programs..
15:46:53 <lispy> @eval map  (chr . ((+ 97) . ((mod 26) . ((-(97+13)) . ord)))) "hello"
15:46:54 <lambdabot> <Plugins.Eval>:1:
15:46:54 <lambdabot>   No instance for (Num (Int -> Int))
15:46:54 <lambdabot>   arising from the literal `13'
15:47:07 <Beelsebob> bugger
15:47:18 <cm> Beelsebob is such a cool nick :]
15:47:18 <Beelsebob> looks like I'll be being woken up in the middle of the night then
15:47:25 <Beelsebob> why thank you :)
15:47:35 <TheHunter> @eval map  (chr . ((+ 97) . ((mod 26) . ((subtract (97+13)) . ord)))) "hello"
15:47:37 <lambdabot> "]`aaa"
15:47:58 <lispy> oh
15:48:01 <musasabi> basti_: pressing escape and watching nothing happen is kind of frustrating.
15:48:15 <lispy> @eval map  (chr . ((+ 97) . ((mod 26) . ((subtract(97-13)) . ord)))) "hello"
15:48:17 <lambdabot> "gjcc{"
15:48:18 <musasabi> "there is something wrong - I wonder what that is"
15:48:34 <lispy> oh well...
15:48:38 <basti_> musasabi: i know what you mean. i just thought epigram is very experimental
15:48:41 <lispy> i guess rot13 really is sucure
15:48:43 <_metaperl> so which Epigram are you talking about? the editor or programming language?
15:48:45 <lispy> er secure
15:48:57 <basti_> _metaperl: i'm talking about the programming language
15:49:30 <musasabi> _metaperl: the programming language (and more precisely the implementation)
15:50:13 <_metaperl> did you all see Scala? it reminded me of Haskell as well: http://scala.epfl.ch/
15:52:34 <lispy> @eval  map (chr . ((+ 97) . ((`mod` 26) . ((+ 13) . ((subtract 97) . ord))))) "hi, this is rot13, kindof..."
15:52:35 <lambdabot> "uvmaguvfavfaebgrtmaxvaqbsooo"
15:52:52 <lispy> it's buggy but hey...
15:53:13 <lispy> if all you feed it is [a..z] you'll be fine
15:53:26 <lispy> @eval  map (chr . ((+ 97) . ((`mod` 26) . ((+ 13) . ((subtract 97) . ord))))) ['a'..'z']
15:53:27 <lambdabot> "nopqrstuvwxyzabcdefghijklm"
15:53:47 <lispy> isn't that clear!
15:53:59 <basti_> yes it looks very understandeable
15:54:05 <lispy> i thought so
15:54:06 <basti_> you could @pl it now.
15:54:16 <lispy> @pl  map (chr . ((+ 97) . ((`mod` 26) . ((+ 13) . ((subtract 97) . ord))))) ['a'..'z']
15:54:17 <lambdabot> map (chr . (97 +) . (`mod` 26) . (13 +) . subtract 97 . ord) ['a'..'
15:54:17 <lambdabot> z']
15:54:20 <basti_> and then wiggle the mods and additions
15:54:45 <lispy> @pl \x-> map (chr . ((+ 97) . ((`mod` 26) . ((+ 13) . ((subtract 97) . ord))))) x
15:54:47 <lambdabot> map (chr . (97 +) . (`mod` 26) . (13 +) . subtract 97 . ord)
15:54:56 <basti_> i expected some liftM2 (+) 98 `mod`
15:55:23 <lispy> @pl \x-> (chr . ((+ 97) . ((`mod` 26) . ((+ 13) . ((subtract 97) . ord))))) x
15:55:24 <lambdabot> chr . (97 +) . (`mod` 26) . (13 +) . subtract 97 . ord
15:55:47 <lispy> even that part doesn't seem to simplify
15:55:49 <basti_> i would suspect you could put subtract 97 and 13 + together huh
15:56:00 <basti_> pl wont simplify everything
15:56:01 <lispy> yeah, you can
15:56:05 <basti_> it just pointlesses things
15:56:23 <basti_> @pl \x y->x+(y*4)
15:56:24 <lambdabot> (. (4 *)) . (+)
15:56:28 <lispy> @pl  map (chr . ((+ 97) . ((`mod` 26) . ((subtract 84) . ord)))) ['a'..'z']
15:56:30 <lambdabot> map (chr . (97 +) . (`mod` 26) . subtract 84 . ord) ['a'..'z']
15:56:36 <lispy> @eval  map (chr . ((+ 97) . ((`mod` 26) . ((subtract 84) . ord)))) ['a'..'z']
15:56:38 <lambdabot> "nopqrstuvwxyzabcdefghijklm"
15:56:43 <basti_> it wont get any better if it isnt pointless
15:56:46 <basti_> uh points free
15:57:13 <lispy> this is definitely pointless ;)
15:57:37 <cm> Beelsebob: it's just fun to read :)
15:59:10 <Beelsebob> well... it's gonna be a tired beelsebob tomorrow by the looks of things
15:59:25 <Beelsebob> the bloody fire alarm here has 100 faults flashing up...
15:59:35 <Beelsebob> which is a sure sign it'll go off at about 4am
16:00:09 <lispy> @type (-)
16:00:11 <lambdabot> forall a. (Num a) => a -> a -> a
16:00:17 <lispy> @type subtract
16:00:18 <lambdabot> forall a. (Num a) => a -> a -> a
16:00:39 <lispy> @eval  map (chr . ((+ 97) . ((`mod` 26) . ((- 84) . ord)))) ['a'..'z']
16:00:41 <lambdabot> <Plugins.Eval>:1:
16:00:41 <lambdabot>   No instance for (Num (Int -> Int))
16:00:41 <lambdabot>   arising from the literal `84'
16:00:53 <lispy> why does subtract work there and not '-'
16:00:56 <basti_> o0
16:01:08 <wagle> parser is wrong
16:01:10 <basti_> thats a bit surprising
16:01:19 <basti_> ah unary -?
16:01:31 <wagle> @eval  map (chr . ((+ 97) . ((`mod` 26) . ((- 84) . ord))))
16:01:32 <lispy> @eval  map (chr . ((+ 97) . ((`mod` 26) . (((-) 84) . ord)))) ['a'..'z']
16:01:32 <lambdabot> <Plugins.Eval>:1:
16:01:32 <lambdabot>   No instances for (Show ([Char] -> [Char]), Num (Int -> Int))
16:01:32 <lambdabot>   arising from use of `show'
16:01:34 <lambdabot> "nmlkjihgfedcbazyxwvutsrqpo"
16:01:47 <lispy> basti_: ah, yes you are right
16:01:54 <basti_> wagle was right
16:02:02 <basti_> i just put it to words
16:02:14 <wagle> oh good..  lispy did what i was wanting to try
16:02:21 <lispy> heh
16:02:28 <lispy> this has been a very contributed solution
16:02:32 <musasabi> basti_: Have you played with epigram? (just want one trivial thing to test whether I make syntax errors each time or there is something funny with my installation).
16:02:49 <lispy> wagle had the idea, basti_ put it to words, and i typed it correctly ;)
16:02:59 <wagle> - is b0rken in haskell
16:03:26 <basti_> musasabi: yes and it was a pain
16:03:40 <basti_> musasabi: iirc, there was some problem with mouse events on my system back tehn
16:03:44 <basti_> i dont know how i fixed it
16:04:04 <basti_> i think by just pressing the button longer
16:04:07 <basti_> something like that
16:04:08 <wagle> allegedly, you can always remove all whitespace from a haskell expression
16:04:18 <basti_> wagle: thats not true.
16:04:28 <basti_> f 5 is not the same as f5
16:04:31 <basti_> or is it?
16:04:36 <basti_> @pl f5
16:04:37 <lambdabot> f5
16:04:46 <basti_> no its not
16:04:50 <lispy> can yo uname a function _
16:04:54 <wagle> i prefixed that with "allegedly"
16:05:06 <basti_> for a reason even.
16:05:06 <basti_> :)
16:05:08 <lispy> @eval let _ = 4 in _
16:05:10 <lambdabot> Pattern syntax in expression context: _
16:05:19 <wagle> it has been alleged, therefore my statement was true..  8-p
16:05:26 <lispy> heh
16:05:32 <basti_> i wouldnt want a function to be called _ anyway
16:05:36 <basti_> wagle: modal logics?
16:05:41 <lispy> you can have a function named _1
16:05:50 <lispy> @eval let _1 = 1 in _1
16:05:50 <basti_> lispy: if this sounds any better to you
16:05:51 <lambdabot> 1
16:06:15 <wagle> @eval let __ = 1 in __
16:06:17 <lambdabot> 1
16:06:19 <basti_> wah did i mention people are actually reading my code?
16:06:28 <basti_> (yi-emacs)
16:06:38 <lispy> heh
16:06:39 <lispy> cool
16:06:42 <musasabi> basti_: thanks. I'll try to find a solution.
16:06:59 <lispy> basti_: i haven't had time to work on the interpreter anymore :(
16:07:05 <basti_> musasabi: maybe it then worked on another xserver or something...
16:07:10 <lispy> i want to put it into a darcs repo
16:07:19 <basti_> lispy: thats not so bad.
16:07:21 <lispy> and share it with the world...(or finish it)
16:07:26 <basti_> send it to dons maybe?
16:08:05 <lispy> hmm... it's not ready for sharing at the moment
16:08:10 <basti_> mmmic
16:08:18 <lispy> it's all in one file named, "Toyparser.hs"
16:08:26 <basti_> what does it parse?
16:08:29 <lispy> elisp
16:08:33 <basti_> ah that.
16:10:00 <lispy> actually, i found a parse bug too that i haven't fixed.  inputs like "(+ 1 2" get parsed the same as "(+ 1 2)"
16:10:16 <lispy> the last closing paren in the input is basically optional right now
16:10:37 <basti_> mm
16:10:45 <basti_> did you try some parser generator?
16:10:52 <lispy> parsec
16:11:46 <basti_> hum
16:12:04 <lispy> i've mostly been testing the parser on valid elisp, which it does fine with.  But incorrect elisp is apparently accepted in a few cases
16:12:24 <lispy> i have no idea how i will implement IO
16:12:51 <lispy> I want to get a few basic lisp functions implemented using elisp before i start to worry about "advanced" things
16:13:04 <basti_> yes i see that
16:13:40 <lispy> but i won't have time to work on it again tonight :(
16:15:45 <basti_> awwwww.
16:16:14 <lispy> i need to do laundry and go shopping and all that boring stuff....
16:16:22 * lispy needs a maid
16:16:26 <basti_> i feel pity for you
16:16:45 * lispy especially if the maid is a very attractive asian woman, say about 20.
16:17:17 <basti_> with special services too?
16:17:23 <lispy> yeah, i had lots of fun this weekend tho, so not that bad
16:17:26 <lispy> basti_: of course!
16:17:47 <basti_> send pix!
16:17:47 <basti_> :)
16:18:32 <lispy> heh
16:18:52 <KrispyKringle_> Happy ending?
16:18:56 <lispy> plus i have to spend some time with my new skates tonight
16:19:14 <_metaperl> i have to prepare for the next round of our myth tournament
16:19:27 <_metaperl> online, realtime strategy medievial war gaming
16:19:37 <lispy> cool
16:19:43 <lispy> realtime eh?
16:19:44 <shrimpx> word
16:21:29 <_metaperl> lispy: you can d/l the demo here: http://projectmagma.net/what/
16:21:42 <_metaperl> realtime, realistic physics
16:21:55 <_metaperl> infinite colormaps/scenarios as well as unit types
16:22:13 <shrimpx> SyntaxNinja: so btw i'm not a PSU grad student nor a programatica member
16:22:21 <shrimpx> tho i show up to meetings often
16:22:44 <lispy> _metaperl: i'm not up to the challenge, but it sounds cool
16:22:48 <_metaperl> this air conditioned office feels like a Pennsylvania winter :)
16:22:53 <_metaperl> lispy: ok
16:23:14 <_metaperl> right here in sunny California, i'm freezing to death in an ice-cold office
16:23:26 <_metaperl> in the middle of 90+ weather outside...
16:23:47 <_metaperl> oh well, if I want warm weather I suppose I could change professions to construction work
16:23:55 <Spherical`> metaperl, you're running windows?
16:24:04 <Spherical`> Or does it work under wine/cedega?
16:24:16 <_metaperl> Spherical`: it works under Linux
16:24:25 <_metaperl> I run it under the very latest Wine from CVS
16:24:50 <Spherical`> _metaperl,  what version should I download?
16:24:56 <_metaperl> Spherical`: of...?
16:25:03 <Spherical`> Myth?
16:25:11 <_metaperl> oh, well get the demo for Windows
16:25:27 <_metaperl> oh I see there's 2 there
16:25:28 <_metaperl> hold on
16:26:01 <_metaperl> Spherical`: this one: http://mirror.projectmagma.net/Myth2_Demo.exe
16:26:49 <_metaperl> once again, #haskell has transformed into #warezzzz :)
16:27:05 <shrimpx> haha
16:27:54 <Spherical`> I usually play the Unreal series (UT 1999/2004) and Shoot 'em up style games.
16:28:15 <_metaperl> Spherical`: you should join #linux-gamers.net
16:28:35 <_metaperl> i would like to try out castle wolfenstein for linux, but havent gotten around to it
16:28:42 <_metaperl> we get new game announces on #linux-gamers.net
16:29:32 <_metaperl> Spherical`: are you a MAME'er? I'm getting a set from mamedvds.com .. my first set came from somewhere else, but the ones from mamedvds.com will be better
16:33:27 * shapr waves a lambda
16:34:33 <Pseudonym> Mmmm... lambda...
16:34:38 <shapr> g'day Pseudonym
16:34:42 <Pseudonym> G'day.
16:34:47 * shapr pokes Pseudonym with the TMR stick
16:35:06 <shapr> So, think you'll have time for a Pseudocode article?
16:35:09 <Pseudonym> Yeah, I know.
16:35:11 * Pseudonym sighs
16:35:32 <Pseudonym> What should it be on?
16:35:50 * shapr thinks
16:36:11 <shapr> Inverse indices in Haskell?
16:36:17 <_metaperl> maybe someone could update Wadlers "The Essence of Functional Programming" for modern Haskell
16:36:18 <Pseudonym> Hmmm.
16:36:51 <shapr> Amortized inverse indices?
16:37:23 <shapr> What about a forward raytracer?
16:37:49 <Pseudonym> Wow, that'd be slow.
16:37:49 <shapr> Maybe a treatise on memoization in Haskell?
16:38:02 <shapr> Yeah, but it's just as slow in C, so....
16:38:06 <Pseudonym> Well, true.
16:38:19 <Pseudonym> Actually, path tracing in Haskell would be kinda interesting.
16:54:33 <musasabi> Using MPS with epigram seems to work a little better - but it seems to lose the "try node in epigram" button from time to time.
18:27:20 <bourbaki> moin
18:28:12 <heatsink> moinmoin
18:53:30 <bourbaki> quick question if you have several c functions embedded in haskell will haskell be able to optimize them then reguarding the function call?
18:54:35 <heatsink> optimize them how?
18:54:46 <heatsink> @pointless (\x -> f x)
18:54:47 <lambdabot> f
18:54:54 <heatsink> oh duh
18:54:58 <heatsink> @pointless (\f -> f x)
18:55:00 <lambdabot> flip id x
18:55:58 <bourbaki> well i mean it could copy the code that needs to be execuded of both c functions in one place
18:56:40 <heatsink> unlikely. the haskell compiler doesn't understand C.
18:57:08 <heatsink> If the compiler can determine monomorphism, and compiles via C,
18:57:25 <bourbaki> but it could know about asm code
18:57:44 <ozone> bourbaki: inlining c functions?  probably not, but if you really want to know, email glasgow-haskell-users
18:58:21 <heatsink> It will output a direct call to the C function, and then the C compiler might inline the function calls.
18:58:34 <ozone> when in doubt, benchmark. :)
18:59:08 <bourbaki> i just want to get a way to kill multiple sucsessive c function pointer calls
18:59:39 <heatsink> The failsafe method is to rewrite them as a single function in C
18:59:52 <bourbaki> but then you cant split
18:59:59 <bourbaki> so thats no go
19:00:02 <ozone> bourbaki: have you benchmarked?
19:00:29 <bourbaki> nope
19:00:52 <bourbaki> well i think i can do that stuff also in haskell directly
19:04:27 <heatsink> @pointless (\x -> (x,x))
19:04:28 <lambdabot> join (,)
19:05:11 <heatsink> join is a monad function?
19:06:20 <dons> @hoogle join
19:06:21 <lambdabot> Monad.join :: Monad a => ((a (a b)) -> (a b))
19:06:26 <heatsink> It doesn't work in ghci
19:07:52 <heatsink> ghci gives me the type signature (Monad m) => m (m a) -> m a so maybe the definition of join changed
19:08:18 <dons> that's the defn of join.
19:08:19 <heatsink> oh no, just extra parentheses ;)
19:08:30 <dons> Prelude Monad> join ["a","b"]
19:08:30 <dons> "ab"
19:10:07 <heatsink> Is (,) a monad?
19:10:59 <dons> @type Monad.join (,)
19:11:01 <lambdabot> forall a. (Monad ((->) a)) => a -> (a, a)
19:11:16 <Pseudonym> I believe it's a writer monad.
19:11:43 <Pseudonym> Much like how (->) is a reader monad.
19:12:02 <Pseudonym> Or something.
19:25:35 <MachinShin> hey all
19:32:56 <thedward> I'm just browsing. :)
19:33:00 <thedward> err
19:35:30 <Pseudonym> Thanks!  Phew, we thought you might actually.. you know... actually WANT to be here or something!
19:35:54 <Pseudonym> Anyone else got any more disclaimers they'd like to share?
19:36:00 <thedward> I like pie.
19:36:00 * Pseudonym <- Contents may settle in transit
19:36:04 <Pseudonym> Pie is good.
19:36:08 * thedward nods.
19:36:12 <Pseudonym> Do you like pi calculus?
19:36:22 <thedward> does it come in rhubarb?
19:36:34 <Pseudonym> No, but it's full of con currants.
19:36:46 <thedward> ow.
19:37:49 <wagle> "here's a haskell ide in eclipse.  we aren't going to tell you who we are, or how good it is.  here's how to download it."
19:38:11 <Pseudonym> Sounds like antiviral marketing.
19:39:47 <wagle> boy, i had to dig
19:40:01 <wagle> http://sourceforge.net/project/memberlist.php?group_id=108233
20:06:38 <SamB> okay, what am I supposed to do after I accidentally hit ^S to get my terminal to unfreeze?
20:06:55 <heatsink> ^Q
20:07:02 <heatsink> then Alt+F4
20:07:18 <SamB> alt-f4?
20:07:33 <heatsink> the Alt-F4 is optional, but it works
20:08:26 * SamB kills a few dos windows by mistake
20:09:39 * heatsink discovers that ^S doesn't freeze konsole
20:10:29 * SamB is glad DOS is used to that sort of thing ;-)
20:10:39 <heatsink> :D
20:20:46 <heatsink> is there a library function [Either a b] -> ([a], [b])?
20:21:26 <dons> @hoogle [Either a b] -> ([a], [b])
20:21:27 <lambdabot> No matches, try a more general search
20:21:36 <heatsink> I didn't know hoogle could do that
20:21:57 <SamB> @plugs \l -> ([x | Left x <- l], [y | Right y <- l])
20:21:59 <lambdabot> <Plugins.Eval>:1:
20:21:59 <lambdabot>   No instance for (Show ([Either a b] -> ([a], [b])))
20:21:59 <lambdabot>   arising from use of `show'
20:23:04 <SamB> wow, I haven't written anything in haskell for probably months and my first expression is correctly typed! Haskell is cool!
20:23:14 <heatsink> :D
20:23:44 <SamB> (it probably even works ;-)
20:23:52 <heatsink> haskell is the only language where I spend five hours fixing compile-time bugs followed by five minutes fixing runtime bugs.
20:24:10 <lament> is that good or bad?
20:24:19 <SamB> good!
20:24:25 <SamB> compile time bugs is easier to find ;-)
20:24:26 <heatsink> compile-time bugs are esier to fix
20:25:01 <SamB> I dunno 'bout fix...
20:25:12 <SamB> depends on if you were thinking right in the first place or not
20:25:35 <Gahhh> I dont understand how a type mismatch takes 5 hours to fix
20:26:01 <SamB> Gahhh: not necessarily one single type mismatch...
20:26:13 <Gahhh> you have to be fully rewriting a library or something
20:27:11 <SamB> it could be a wave of incorrect typing working from the core to the outer rim of your code...
20:30:02 <Gahhh> then it means that you pulled the rug under many things.
20:30:38 <SamB> is there some kind of rule against that?
20:30:54 <SamB> its nice to know what needs fixing when you do that ;-)
20:31:06 * heatsink falls asleep with a start
20:33:24 <Gahhh> nah it happens, for example when you decide some piece of code has to be in a monad now instead of pure, etc. however if it hadnt taken 5 hours to write, why should it take 5 hours to fix.
20:34:09 <Gahhh> in a perfect world, there's an eclipse plugin for haskell that lets you turn your programs upside down.
20:34:17 <SamB> it probably won't, unless you are making it much more complicated...
20:40:40 <lament> that's strange, considering there's no eclipse in a perfect world
20:46:34 <SamB> might not be any haskell, either!
20:47:04 <Gahhh> in a perfect world computers are programming us
20:55:02 <lament> in a perfect world, there's no computers
20:55:06 <lament> there's only sex and chocolate
20:59:44 <Pseudonym> In Soviet Russia... never mind.
21:00:55 <SamB> Gahhh: how is that perfect?
21:01:09 <Pseudonym> I got a new stylus for my palm pilot.
21:01:17 <Pseudonym> It has a laser pointer in it, which is very 90s, I know.
21:01:27 <Pseudonym> However, my daughter has discovered it.
21:01:42 <Pseudonym> She is now the only 3 year old I know who yells: "Need a laser!"
21:03:04 <Pseudonym> I can imagine toddlers in 50 years time: "Need a nanotech!"
21:03:40 <Gahhh> there won't be any toddlers in 50 years. They will all be running around in mini-segways.
21:04:17 <Pseudonym> Oooh!  The guy with the desk next to me has nethack for the palm!
21:04:21 <Pseudonym> There goes my productivity.
21:04:33 <Gahhh> hah
21:04:45 <Pseudonym> I'd like vi for the palm.  You'd have to type in all of the ex commands with grafitti.
21:05:03 <Gahhh> soomebody should do a study of how many billions of dollars corporations lose because of high tech...
21:06:07 <Gahhh> btw Pseudonym, nvidia are *still* looking for that compiler guy. rofl.
21:06:20 <Pseudonym> LOL!
21:06:20 * Gahhh was browsing monster.com
21:06:28 <Pseudonym> Maybe that should be my next TMR article.
21:06:41 <Pseudonym> "How to do what nVIDIA wants, only in Haskell."
21:08:58 <lament> nethack?!
21:09:03 <lament> heh
21:09:09 <Gahhh> " An ability to take initiative and should be a self-starter.". I don't like job ads that explicitly say this. Not that I am not a self starter.
21:09:13 <lament> my palm's not big enough to fit nethack on it
21:09:25 <lament> i saw a Rogue clone, though.
21:11:23 <Pseudonym> Yes, it turns out to be Rogue.
21:11:25 <Pseudonym> iRogue
21:11:56 <Pseudonym> Interestingly, my former supervisor was one of the Rogue developers.
21:11:58 <Gahhh> two of my coworkers left for apple. "i-" this, "i-" that jokes galore.
21:12:12 <Pseudonym> I can imagine the iJokes.
21:12:31 <Gahhh> yes, those you can share with up to 5 friends (drm restrictions)
21:16:41 <gzl> haha
21:46:34 <MachinShin> night all
23:15:25 <Oeje1> Good morning.
23:18:28 <dblhelix> good morning, Oeje1
23:24:13 <Enveigler> How does one insert a delay (x milllseconds) into a haskell program?
23:25:13 <Oeje1> Enveigler: You can do it in the IO monad with sleep(), I think.
23:25:41 <sunym> i think that must be in IO monad because that's not pure functional.
23:25:56 <dons> doesn't make any sense in pure code
23:26:38 <dons> there's also threadDelay
23:27:05 <Enveigler> Where should I be looking for sleep(0 and ThreadDelay()?
23:28:18 <Oeje1> http://www.haskell.org/ghc/docs/latest/html/libraries/index.html
23:32:03 <Pseudonym> @pl (\(a,b) -> (a,f b))
23:32:04 <lambdabot> second f
23:32:28 <Pseudonym> D'oh.
23:32:29 <dons> second?
23:32:30 <Enveigler> Thanks Oeje1, but I already looked at System.Time, System.Posix.Time, System.Process ... I think I must be blind?
23:32:33 <Pseudonym> @type second
23:32:35 <lambdabot> bzzt
23:32:40 <Pseudonym> Hmmm.
23:32:47 <Pseudonym> Seems useful, actually.
23:33:15 <dblhelix> @type Control.Arrow.second
23:33:17 <lambdabot> forall (a :: * -> * -> *) c d b.
23:33:17 <lambdabot>         (Control.Arrow.Arrow a) =>
23:33:17 <lambdabot>         a b c -> a (d, b) (d, c)
23:33:37 <dblhelix> instance Arrow (->) where ...
23:33:43 <dblhelix> there you go
23:34:30 <Pseudonym> Ah, of course.
23:36:13 <Oeje1> Enveigler: http://www.haskell.org/ghc/docs/latest/html/libraries/base/Control.Concurrent.html#v%3AthreadDelay or http://www.haskell.org/ghc/docs/latest/html/libraries/unix/System.Posix.Unistd.html#v%3Asleep
23:39:06 <Gahhh> finally found a 2GB email provider with imap, yay.
23:39:11 <Enveigler> Thanks Oeje1:
