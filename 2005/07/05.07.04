00:06:39 <Itkovian> meuning
00:13:24 <juhp> dons: do any of the yi keymaps except Vim work currently? :)
00:14:00 * basti_ pouts
00:14:40 <basti_> yi-emacs is getting better.
00:15:24 <juhp> basti_: is it a fork?
00:15:48 <basti_> no its in the main version
00:15:53 <dons> no no. it's the --as=emacs keymap
00:16:16 <dons> they all work, for some defn of work. vim is good, vi must be 90%, and emacs is getting there.
00:16:22 <basti_> actually it now does repeat, although not convincingly
00:16:58 <juhp> dons: cool - thanks
00:17:26 <juhp> I hadn't tried --as yet :)
00:18:00 <dons> editorFM = M.fromList $
00:18:01 <dons>     [("vi",     Vi.keymap)
00:18:01 <dons>     ,("vim",    Vim.keymap)
00:18:02 <dons>     ,("nano",   Nano.keymap)
00:18:02 <dons>     ,("emacs",  Emacs.keymap)
00:18:05 <dons>     ,("joe",    Joe.keymap)
00:18:07 <dons>     ,("ee",     Ee.keymap)
00:18:09 <dons>     ]
00:18:12 <dons> :)
00:18:27 <juhp> dons: I was trying to rebuilt with Emacs as the default, but that runs into a module loop apparently...
00:18:48 <dons> to make emacs the default, you set: ls
00:18:52 <dons> wrong shell..
00:19:13 <dons> you change: import qualified Yi.Keymap.Vim as Default
00:19:16 <dons> in Yi/Yi.hs
00:19:35 <juhp> dons: yep, that is what I was doing....
00:20:02 <dons> and you get mutually recursive modules?
00:20:02 <basti_> i changed that in .yi/Yi.hs
00:20:12 <basti_> not in Yi/Yi.hs
00:20:17 <juhp> Rebuilding dependencies... Module imports form a cycle for modules:
00:20:21 <juhp> dons: right
00:20:23 <dons> or in the config file. that's a good idea basti
00:20:27 <basti_> :)
00:20:47 <juhp> basti_: I'm on x86-64 :)
00:20:55 <dons> oh, so you need way=static?
00:20:58 <basti_> juhp: no configuration there
00:21:00 <basti_> ?
00:21:12 <juhp> dons: that is what I'm using :)
00:21:16 <dons> ok :)
00:21:17 <juhp> basti_: right
00:21:26 <basti_> i see
00:21:51 <juhp> dons: anyway --as is good enough for now :)
00:36:34 <juhp> dons: what's a .raw-hs file needed for me?  some kind of preprocessing?
00:36:55 <juhp> s/me// :)
00:39:41 <dons> raw-hs is preprocessing for haddock
00:39:56 <dons> you  can avoid them by using 'make build', instead of 'make'
00:40:00 <dons> then you don't get haddocks
00:40:16 <juhp> ah ok
00:40:34 <egg> GHC?
00:41:22 <dons> GHC!
00:44:38 <egg> kaskell compiler
00:44:53 <egg> Is it good?
00:45:21 <basti_> pretty good yes.
00:45:22 <basti_> it works.
00:46:21 <basti_> and it gives good error messages
00:46:40 <basti_> @ghc
00:46:40 <lambdabot>  the eta-reduction property does not hold
00:46:45 <basti_> like this one
00:48:25 <basti_> egg?
00:48:34 <egg> what?
00:48:54 <basti_> did you want to know an answer to your question or did you just ask for fun? ;)
00:49:22 <egg> how?
00:49:42 <basti_> ?
00:49:48 <basti_> i answered up there
00:49:50 <egg> ...
00:50:00 * basti_ .oÂ° ( ? )
00:54:31 <JohnMeacham> Hmm. I am stumped. is anyone that has worked on a varient of my Curses code around? I think it made it into several other projects.
00:54:47 <dons> hey!
00:54:54 <dons> yeah, I used it in Yi.
00:55:11 <dons> it's also in riot, and is now in the HsCurses library too
00:56:46 <dons> http://www.stefanwehr.de/haskell/
00:57:03 <dons> that's  probably the fullest version out there. there's widget support, for example
01:00:59 <JohnMeacham> Ah, cool. have you had any problems getting it to work in ghc 6.4?
01:01:17 <JohnMeacham> I ported it, but suddenly the screen gets very messed up after shelling out to an external program.
01:02:42 <dons> i've had some problems on linux and freebsd with resetting after exiting.
01:02:59 <dons> then there's also the problem with -fvia-C and 6.4 leading to user error (Curses[-1]:keypad)
01:03:24 <JohnMeacham> Yeah, that is due to the FFI bug, I just decided to go ahead and work around it.
01:03:50 <JohnMeacham> But I am not sure what is causing the resetting error.
01:04:38 <dons> but as long as I call endWin before quitting, I have no screen problems.
01:05:01 <dons> at one point, on linux only, I needed to call Curses.update after endWin though
01:05:17 <JohnMeacham> I am talking about shelling out to vim from a curses program then restarting curses afterwords.
01:06:18 <dons> ah, ok. I haven't noticed any issues doing that kind of thing. tuomov might have more info -- his tool riot uses external editors all the time, so maybe he's seen this.
01:08:36 <JohnMeacham> Hmm.. okay. I will hack on it some more.
01:20:49 <tuomov> has hscurses been updated to ghc6.4?
01:21:03 <mflux_> yes
01:21:08 <dons> @seen stefanw
01:21:09 <lambdabot> stefanw is in #haskell. I don't know when stefanw last spoke.
01:21:10 <tuomov> I meant to switch riot to using it sme time back, but it didn't work with 6.4 then
01:21:28 <dons> stefanw, hscurses runs with 6.4, right?
01:21:34 <mflux_> it doesn't use cabal, but compiles with 6.4 nevertheless
01:21:57 <dons> yeah, stefan decided against cabal so as not to break 6.2 compatibiliity.
01:22:05 <dons> against aa cabal build system, that is
01:27:32 <JohnMeacham> Yeah, you can see my changes to get to work under 6.4 at http://repetae.net/john/repos/ginsu but I still can't get the shelling out to an external program to work.
01:28:40 <dons> 6.4 and -fvia-C ?
01:28:56 <JohnMeacham> The symptom appears to be that the screen will only redraw between half and 2/3rds the screen. it is much worse under 'screen' than xterm.
01:28:59 <JohnMeacham> yeah.
01:29:12 <musasabi> morning
01:30:11 <JohnMeacham> morning.
01:30:22 <JohnMeacham> or.. evening.
01:30:37 <dons> 2/3rs of the screen, eh? haven't seen that.
01:31:24 <dons> but I haven't attempted to work around the ffi bug, either.
01:31:29 <JohnMeacham> Yeah, but only after I shell out to a program. even when it is an X program that doesn't do anything to the terminal. I wonder if it is an x86_64 thing. STM is also broken on x86_64 and that is tripping me up too
01:32:20 <dons> I wonder. x86_64 is a bit of a dark world in 6.4.  hopefully 6.4.1 comes soon.
01:33:39 <JohnMeacham> yeah. is there any way to get ghc 386 and x86_64 installed at the same time? actually, it would be great if someone modified ghc to be able to compile both with just a commandline flag. unfortunatly, a lot of machine dependent stuff gets hardcoded in ghc when it is compiled.
01:34:31 <dons> you could build them separately, and be sure to install them into a $ARCH subdir of lib/ and, say, bin-$ARCH
01:34:46 <dons> or tag one ghc-$ARCH
01:35:31 <dons> the machine dependent config stuff gets baked in pretty early, so running as both would be very tricky
01:36:09 <JohnMeacham> Yeah, I looked into it a while ago and decided it was non-trivial. you would also have to build multiple rts's and libraries to keep around.
01:36:44 <dons> yep
01:36:57 <dons> so basically duplicating the whole build
01:37:11 <juhp> at least on fedora there is rather little overlap between i386 and x86_64 packages except for the wrappers
01:37:32 <juhp> (because of /usr/lib64)
01:37:37 <musasabi> The classic way is to have the i386 apps inside a chroot.
01:37:47 <juhp> musasabi: nod
01:37:50 <JohnMeacham> oh, can I install the yum rpms side by side somehow? if I can save myself a build that would rock.
01:38:48 <juhp> JohnMeacham: if you ignore the files in bindir then yes - but it is untested :)
01:39:17 <juhp> one needs to pass some args to ghc.i386 to run on x86_64 usefully I believe
01:39:38 <juhp> JohnMeacham: you might be better off using a buildroot, eg mock (or mach)
01:40:12 <juhp> mock is what I use to build i386 packages on my x86-64 box these days
01:40:37 <juhp> (it is in Fedora Extras*)
01:40:37 <JohnMeacham> yeah, you need to get -m32's passed to the external programs. it would be nice if ghc just always passed that when compiled for i386 so it would work out of the box.
01:40:53 <juhp> JohnMeacham: right
01:47:15 <JohnMeacham> Ah. it appears to be an x86_64 thing. how anoying.
01:48:13 <JohnMeacham> I declare ghc 6.4 x86_64 officially very buggy :)
01:50:26 <juhp> I should push my 6.4.1snapshot to Fedora Haskell probably...
01:50:35 <juhp> (for x86_64)
01:51:17 <juhp> perhaps in a testing subrepo?
01:51:42 <juhp> well I'm using it here without any problems anyway :)
01:55:45 <JohnMeacham> I would use it.
02:00:47 <juhp> JohnMeacham: uploading now
02:01:07 <juhp> (no -doc or -prof though btw)
02:03:42 <JohnMeacham> Hmm.. do I have to do something special to get yum to grab it?
02:03:42 <shapr> @yow !
02:03:43 <lambdabot> My CODE of ETHICS is vacationing at famed SCHROON LAKE in upstate
02:03:43 <lambdabot> New
02:03:43 <lambdabot> York!!
02:04:48 * juhp wonders if lambdabot's linewrapping can't be improved? :o)
02:07:00 <juhp> JohnMeacham: done - ghc-6.4.1.20050626 is now in the fc4/x86_64 repo
02:08:02 <juhp> JohnMeacham: do you already use the Fedora Haskell packages?
02:08:28 <poetix> http://www.cs.chalmers.se/Cs/Grundutb/Kurser/afp/Papers/concurrent-claessen.ps <-- good Functional Pearl on creating an interleaving monad for simple concurrency
02:09:29 <shapr> y0 poetix
02:09:40 <poetix> Hi shapr
02:10:22 <shapr> I like the ideas you sent me in email.
02:10:54 <JohnMeacham> Yeah, I am just going to grab the rpms since I am still at fedora core 3
02:11:20 <shapr> I'm especially fond of people who want to write regular TMR articles :-)
02:11:48 <poetix> I just this second read that you can't use hSelect with concurrent Haskell
02:12:12 <shapr> Have you seen CosmicRay's simple server in MissingH?
02:12:20 <poetix> Which is a pain, because the whole idea was to write a Twisted-style reactor to handle connections and parse requests, then spawn lightweight threads to construct responses
02:12:32 <juhp> JohnMeacham: ok
02:12:42 <poetix> @google MissingH
02:12:44 <lambdabot> http://quux.org/devel/missingh/
02:14:11 <shapr> poetix: A collection of practical I/O examples would be very appealing.
02:14:56 <poetix> I thought so. Also a good exercise for me in learning the libraries.
02:16:09 <poetix> *thinks* What if hSelect ran on one dedicated OS thread, and the concurrent Haskell user-mode threads multiplexed on different OS threads?
02:16:46 <poetix> The problem is that hSelect just suspends whatever OS thread it's running on, so it doesn't play nicely with user-mode threads.
02:17:31 <JohnMeacham> you can simulate it with a bunch of forkIO's and waitOnFd's
02:17:34 <musasabi> Just using -threaded and a safe ffi call should be enough.
02:18:12 <JohnMeacham> Wow. ghc x86_64 is much much slowwwwwwer than i386..
02:18:19 <musasabi> network-alt has different approaches to IO with the GHC rts and is quite easy to benchmark.
02:18:23 <poetix> The idea is to do the boring part of answering an HTTP request in a synchronous fashion, on a single thread, because that's supposed to be very fast
02:19:02 <musasabi> Using synchronous IO operations can beat even epoll on linux 2.6 in some circumstances but will use lots of RAM.
02:19:16 <poetix> Then do the interesting bit (getting data from somewhere, constructing a response) in a thread, because that's the part that tends to block and to need some kind of concurrency semantics
02:19:28 <JohnMeacham> darn it. 6.4.1 doesn't solve the problem. sigh.
02:20:17 <poetix> musasabi: network-alt?
02:21:41 <musasabi> http://www.cs.helsinki.fi/u/ekarttun/network-alt/
02:21:47 <poetix> musasabi: thanks
02:25:16 <poetix> http://www.cse.unsw.edu.au/~chak/haskell/ghc/comm/rts-libs/non-blocking.html <-- aha
02:30:25 <musasabi> Does missingh support browsing zip files (the documentation seems to be down)?
02:40:12 <shapr> poetix: And if you wrote about sync/async issues in your I/O column, many users would get a new clue (including me).
02:41:19 <poetix> It's a difficult area - I need an enhanced clue myself - and tends to differ from platform to platform. It would be good to shed some light there I think.
02:42:02 <shapr> Yes
02:42:19 <poetix> But it would also be sensible for me to start (as far as writing articles is concerned) with something less tricksy...
02:43:39 <musasabi> With IO the difference between -threaded and not -threaded is huge and not very well documented.
02:45:28 <poetix> I'm also not up to speed with async I/O, epoll etc. on recent Linuxes...
02:46:23 <shapr> Sounds like a great subject for a column.
02:47:05 <musasabi> epoll is quite nice but the GHC I/O model makes the implementation somewhat nontrivial - while with NTPL synchrnous I/O for sockets seems to kill most other things in terms of raw performance.
02:49:05 <poetix> musasabi: does -threaded mean that OS threads are used? I guess the problems are around FFI calls?
02:50:55 <poetix> ...and interaction with the RTS...
02:51:37 <musasabi> poetix: -threaded means that multiple OS threads are used of which only one can run Haskell code at a time.
02:51:49 <musasabi> poetix: also the internal IO implementation is switched...
02:56:35 <musasabi> http://www.cs.helsinki.fi/u/ekarttun/haskell/bench.html has some timing information.
02:56:55 <musasabi> The compat entries are vanilla GHC others use network-alt.
03:01:18 <poetix> So select + threads takes an incredible hit, relative to select - threads, under high concurrency
03:01:56 <musasabi> Yes. Although that is apples to oranges in some ways.
03:03:42 <musasabi> The general result is that -threaded IO with GHC does not currently scale very well and not -threaded works better - but -threaded is needed for many things.
03:04:00 <musasabi> epoll and blocking both use -threaded rts.
03:05:25 <dcoutts> @seen TFK
03:05:27 <lambdabot> Last time I saw TFK was when I left #haskell 2 days, 8 hours, 15
03:05:27 <lambdabot> minutes and 44 seconds ago, and I have missed 1 day, 21 hours and 14
03:05:27 <lambdabot> minutes since then.
03:06:04 <df_> why is it attempting to do an 80chr linewrap?
03:09:26 <wilx`> Because the width of line that you can send to IRC server is limited?
03:10:36 <ibid> it's not *that* limited
03:10:50 <df_> 512 iirc
03:11:01 <ibid> something like that, yes
03:11:03 <wilx`> But if the limit is unknown then it makes sense to make it wrap at some standard size imvho.
03:11:21 <ibid> it's not unknown
03:11:23 <shapr> The lambdabot line-wrapping discussion has had many episodes.
03:11:24 <ibid> it's in the rfc
03:11:38 <juhp> wilx`: no, it looks awful on most clients... :-/
03:11:38 <ibid> at least, a minimum width
03:11:55 <ibid> which is many times larger than the 80chrs
03:12:45 <df_> shapr :: ohdear
03:12:48 <shapr> I think the conclusion of the lambdabot line-wrapping discussion is, "If you don't like the current behaviour, send in a patch."
03:13:11 <shapr> darcs is easy to deal with :-)
03:13:51 <juhp> JohnMeacham: so the rpm works ok on fc3?
03:17:08 * poetix delves into RTS issues
03:21:23 <dcoutts> juhp, I don't understand the ghci problem we were having :-(
03:22:03 <juhp> dcoutts: sorry forgot to follow up - I rebuilt it on a fc4 box and it works...
03:22:12 <dcoutts> oh, ok
03:22:14 <juhp> so now I'm real confused ;)
03:23:01 <dcoutts> it looked like it was doing the right thing with that var being on/off with the ghc version
03:23:10 <juhp> yeah
03:23:52 <dcoutts> so are new rpms available?
03:24:02 <juhp> not yet...
03:24:53 <dcoutts> well when they are I/you can tell said user that they're there so they can use ghci+gtk2hs
03:25:47 <juhp> dcoutts: would -#include"hsgclosure.h" in the buildlog mean something is wrong?
03:26:40 <dcoutts> it should use that if it's in the USE_GCLOSU(R)E_SIGNALS_IMPL mode
03:27:10 <dcoutts> it should only do that if ghc says it's version 6.4.1 or later
03:27:11 <juhp> ok - I see it in the original buildlog
03:27:46 <dcoutts> with 6.4 is should not build that hsgclosure.c at all
03:28:10 <juhp> somehow it did... strange indeed
03:28:37 <dcoutts> but this time round it didn't?
03:29:30 <dcoutts> egh adsl :-(
03:32:25 * shapr throws EDSLs
03:33:11 <juhp> dcoutts: I can see one -#include"hsgclosure.h" in the new buildlog at least
03:33:53 <juhp> (but I only have "half" of it in a screen session - it was just a test build...)
03:34:43 <dcoutts> oh, actually, sorry you get -#include"hsgclosure.h" every time, the difference is wether the .hs file uses anything from that file or links the .c file in
03:34:55 <juhp> ok
03:35:26 <dcoutts> look for glib/System/Glib/hsgclosure.c being compiled
03:36:44 <juhp> it could be a mock (buildsystem) bug somehow, though I can't imagine how
03:37:57 <juhp> wonder if the fc3 build is better?
03:38:23 <dcoutts> the only other time I've seen it go wrong was on OpenBSD where the bit of shell code that compared version numbers didn't work right with the standard shell
03:38:25 <poetix> http://www.mail-archive.com/ffi@haskell.org/msg01117.html <-- interesting ffi thread about I/O, OS/green threads and scheduling issues
03:38:32 <juhp> dcoutts: rebuilding for fc4 now - let's see if it is the same or not
03:38:38 <dcoutts> ok
03:40:33 <juhp> dcoutts: hsgclosure.c was compiled in the test build earlier
03:40:39 <juhp> wasNOT
03:42:31 <dcoutts> "was not" ok :-), it's only hsgclosure.c that calls hs_free_stable_ptr (and causes the ghci linker error on 6.4 and before)
03:43:44 <juhp> dcoutts: and it *is* compiled under mock - boggle!
03:44:09 <juhp> no no
03:44:16 <juhp> doh
03:44:24 <dcoutts> ?
03:44:26 <juhp> looking at an old x86-64 build
03:45:01 <dcoutts> on x86-64 it uses the hsgclosure.c method always because ghci doesn't work there anyway
03:45:18 <juhp> dcoutts: er, but actually it is compiled under the mock buildsystem...
03:45:26 <juhp> hmm
03:45:55 <dcoutts> what you mean it's building on x86-64 targeted at x86?
03:46:16 <juhp> dcoutts: in a i386 buildroot yes
03:46:18 <dcoutts> and the build system is picking up info from the host rather than target?
03:46:32 <dcoutts> hmm that's probably my fault :-)
03:46:42 <juhp> oh
03:46:52 <juhp> ah that would explain it then :)
03:47:09 <dcoutts> ah yes, I'm using host_cpu when I probably should be using "target_cpu" (?)
03:47:12 <juhp> this is the first problem like this I've seen
03:47:21 <juhp> probably
03:47:34 <juhp> ok, I'll patch round that in my package then :)
03:47:44 <juhp> is it in the configure file?
03:48:08 <dcoutts> oh, hmm no there's only build_cpu and host_cpu
03:48:55 <dcoutts> I'm not sure which it should be. build_cpu is obviously x86_64 but what is "host_cpu"?
03:49:19 <dcoutts> presumably since there is build_cpu, then host_cpu must be the target machine
03:50:15 <lstna> poetix: Are you able to access the pdf in the link you gave? (ie:http://www.uni-graz.at/imawww/haskell/threads.pdf)
03:50:46 <juhp> dcoutts: both seem to be x86_64 in the i386 buildrooot
03:50:59 <dcoutts> do you think that is correct?
03:51:16 <juhp> let me think
03:58:17 <poetix> lstna: No, it seems to have been moved
03:59:43 <lstna> Okay. Thanks. I found a later .ps version but that has moved/gone away also.
03:59:54 <lstna> *link to
04:00:35 <juhp> dcoutts: target_alias, perhaps? but it is empty by default
04:01:11 * beelsebob yawns
04:01:54 <beelsebob> hmm... this chicken sandwich seems to have been made in a kebab shop... how worrying
04:02:44 <juhp> dcoutts: does gtk2hs work on any bsd with ghc-6.4 btw?
04:02:57 <juhp> (on x86-64 I mean)
04:04:22 <dcoutts> not sure about x86-64, but dons built 0.9.8 on OpenBSD (after changing configure to use bash rather than sh) and 0.9.7 built ok on FreeBSD, but they were probably both x86
04:04:22 <dcoutts> dons used ghc 6.4 I think
04:05:44 <dcoutts> juhp, perhaps you should ./configure --host=i386
04:15:59 <juhp> dcoutts: right that would probably do it - bit of a hack though - strictly it should be --target imho
04:17:00 <dcoutts> I'm not sure what the difference between host and target is
04:17:36 <dcoutts> there isn't a target_cpu variable
04:19:11 <dcoutts> I'd have thought that an i386 buildroot would have build==host==x86 (or i386 or whatever)
04:19:35 <musasabi> There really needs to be one Haskell parsing library to rule them all. (Very annoying that all tools support varying extensions to the language).
04:20:22 <shapr> Yargh, the last unicycle pieces arrived, and my local bike shop forgot to order the spokes! YARGH!
04:20:49 <shapr> musasabi: Yeah, and the same for other languages also: C, PHP, Python, etc
04:21:31 <wilx`> Isn't it something like, building on some arch, with the resulting compiler being hosted on another arch targeting yet another arch :)
04:23:08 <musasabi> true, but having even Haskell and C would help nicely.
04:23:40 <shapr> Knit has a nice C parser. dcoutts might know if Knit does more or less than c2hs.
04:24:08 <beelsebob> shapr: what is it, a 20" one?
04:24:50 <musasabi> c2hs parser seems quite optimized.
04:24:52 <shapr> beelsebob: Nah, it's a 26 inch wheel with a 65mm wide rim, and at the end of July it'll have a 3.7 inch wide tire.
04:25:09 <shapr> beelsebob: Are you a unicyclist?
04:25:13 <beelsebob> ohhh... shiny... planning some Muni fun?
04:25:17 <beelsebob> indeed
04:25:36 <beelsebob> don't bike shops normally have 26" spokes hanging around for kids bikes?
04:25:41 <musasabi> btw I am thinking about generating Haskell source from PArrows parsers and looking what the resulting performance is (that can be done in template haskell too).
04:26:14 <shapr> Yeah, but I'm planning to use this Muni for what would qualify as abuse for standard spokes.
04:26:22 <beelsebob> ah... okay
04:26:57 * beelsebob is not good enough to abuse much yet... having said that, I did just put a massive dint in my rim, but hey, it was shit and old
04:27:02 <shapr> Large Marge rim and Endomorph tire, Magura hydraulic brakes, Profile hub and cranks, it'll be the Learjet of Munis.
04:27:38 <beelsebob> teh shineh.... Almost as envy worthy as roger's carbon fibre one
04:27:39 <musasabi> muni == mountain unicycle ?
04:27:39 <shapr> beelsebob: Are you on rec.sports.unicycle aka unicyclist.com forum?
04:27:43 <shapr> musasabi: yes
04:28:04 <beelsebob> shapr: I was for a while... didn't have much time for it
04:28:32 <shapr> Yeah, the bickering of pre-teens gets irritating sometimes. But there are some smart and interesting people there.
04:29:06 <shapr> beelsebob: Are you in the same uni crowd as Duncan Coutts?
04:29:34 <beelsebob> I've heard of him... but don't know him... maybe met him at a festival?
04:29:43 <shapr> Could be, he recently got a Coker.
04:29:50 <juhp> dcoutts: actually I think you're right
04:30:19 <beelsebob> I used to ride a lot around York
04:30:30 <shapr> Do you have any online uni pix?
04:30:40 <beelsebob> hmm... good question
04:30:52 <lstna> morning ski
04:31:10 <shapr> What sort of hardware are you using? KH24?
04:31:21 <ski> lstna : morn'
04:31:39 <beelsebob> a Nimbus II, a crappy wheel that needs upgrading and a Myatta saddle
04:31:40 <ski> shapr : g'morn'
04:31:44 <dcoutts> beelsebob, do you think we've ever met? I've not been to many conventions so I'd guess not
04:31:45 <shapr> hej ski
04:32:02 <beelsebob> dcoutts: where have you been to conventions
04:32:14 <dcoutts> Derby
04:32:21 <beelsebob> Durham would seem the most likely place for me to have met you
04:32:26 <beelsebob> (lots of Uikers there)
04:32:34 <shapr> Obviously you guys should be on #unicycling :-P
04:32:39 <dcoutts> probably not then
04:32:42 <dcoutts> shapr, :-)
04:32:43 <beelsebob> York?
04:32:47 <beelsebob> Bradford?
04:33:01 <shapr> I've never been to the UK!
04:33:10 <dcoutts> no, my sister goes to all of them but I tend not to
04:33:12 <shapr> Only my packets have visited and then returned.
04:33:23 <shapr> Your sister unicycles also?
04:33:47 <shapr> I'm trying to induct two of my friends without so much success.
04:34:08 <dcoutts> juhp, ok good, otherwise I'm not sure how I'd be able to make the right decisions if everything pointed to building on and aiming to host on x86-64
04:34:19 <beelsebob> hehe... tis hard to get people into it... they usually give up after not getting anywhere for 3 goes
04:34:39 <dcoutts> shapr, yes, my sister introducded me to unicycling
04:35:00 <shapr> Wow, neat!
04:35:25 <shapr> I went to buy a bicycle at the LBS last year and bought a 20" Dodger training uni instead.
04:35:41 <dcoutts> actually I ought to go, it's my sisters b'day and I've got to go see her...
04:35:49 <shapr> Right, take your unicycle!
04:36:01 <dcoutts> yep, on the bus :-)
04:36:19 <beelsebob> hehe... always gets some funny looks on the train
04:36:25 <shapr> I wish my LBS would have ordered the side-effecting spokes!
04:36:38 * shapr tries to think of evil swearwords for #haskell
04:36:43 <beelsebob> haha
04:37:19 <shapr> Those space-leaking proceduralists!
04:37:57 <beelsebob> stop that... you're making me consider writing my mini-thesis
04:38:25 <shapr> Sadly, they've been practicing non-strict evaluation. When I brought in the last pieces today he said "I've been meaning to talk to you for the last week... do you want to use these weak spokes or order some high strength spokes?"
04:38:29 <beelsebob> hmm... shame I don't have Â£200 http://www.unicycle.uk.com/shop/shopdisplayproduct.asp?catalogid=696
04:38:43 <shapr> beelsebob: on "Swearing in Pure Cultures" ?
04:39:20 <beelsebob> heh... no, but at the moment on a lot too much to do with space leaking proceduralists
04:39:52 <shapr> Btw, your research interests page looks similar to Vital and that other thing at McMaster, you know about those?
04:40:27 <beelsebob> I know about Vital... the guy sitting next to me is working on it
04:40:37 <shapr> oh, neat
04:40:38 <beelsebob> I'm not sure why you say it seems similar?
04:40:55 <shapr> Because it's about visible reduction.
04:40:55 <beelsebob> unless I'm being a muppet
04:41:16 <beelsebob> hmm... true
04:41:54 <beelsebob> I guess I'm looking at it from a trace POV
04:41:55 <shapr> It would seem like you could reuse a lot of the Vital code for visual debugging.
04:42:02 <beelsebob> rather than a program one
04:42:35 <beelsebob> yeh... I'm not sure if that's the direction I'm going... I think that Niel Mitchel is doing a chunk on visual debugging
04:42:47 <beelsebob> those graphs are really to help the Hat developers
04:43:09 <shapr> Well, if you update your research interests, I'll try to come up with better pointers :-)
04:43:18 <beelsebob> hehe... indeed
04:43:22 <beelsebob> *g*
04:43:41 <shapr> This is you, right? --> http://www.cs.kent.ac.uk/people/rpg/tatd2/
04:43:44 <beelsebob> yeh
04:43:49 <TFK> Erm, how do I get an integer from a string?
04:44:07 <shapr> TFK: read
04:44:12 <beelsebob> stuff I'm doing just now is comparison of traces stuff
04:44:25 <beelsebob> kinda delta-debugging... but not
04:44:46 <TFK> Hmm, why does read "2" result in "Unresolved overloading" in Hugs, then? (altough (read "2")+2 works o_O)
04:44:52 <shapr> beelsebob: Must be cool to work with that group, Claus Reinke, Simon Thompson, Olaf Chitil, Axel Simon, those are names I know.
04:45:01 <dcoutts> TFK! you're back! I've got your sirc program working :-0
04:45:04 <beelsebob> tfk: because it doesn't know the type
04:45:09 <shapr> TFK: because the second bit of code knows the type.
04:45:20 <shapr> TFK: try ":t read"
04:45:22 <beelsebob> it wants to return a float, or an Int, or an Integer....
04:45:23 <TFK> Oh. o_O
04:45:27 <TFK> dcoutts, you da man! :-D
04:45:38 <dcoutts> beelsebob, you know Axel Simon?
04:45:43 <dcoutts> TFK, :-)
04:45:44 <beelsebob> shapr: Yes, tis a pretty cool group
04:45:46 <TFK> dcoutts, do tell me your secret touch ;-)
04:45:53 <beelsebob> dcoutts: yeh
04:46:10 <shapr> I'd love to work with Claus, he always has nifty projects.
04:46:13 <dcoutts> beelsebob, oh, cool, he works on Gtk2Hs with me
04:46:26 <shapr> FunWorlds and HaRe being the first two that come to mind.
04:46:28 <beelsebob> ah... cool
04:46:41 <dcoutts> TFK, the fixes for your eariler bug are in CVS, the fix for the onTextInsert crasher are not yet but will be within a day or two
04:46:44 <beelsebob> shapr: Hmm, Claus can grate quite easily
04:46:54 <beelsebob> Simon Thompson is very cool
04:46:54 * TFK nod
04:46:55 <TFK> s*nods
04:46:58 <TFK> **nods
04:47:18 <dcoutts> beelsebob, I've worked with Axel for nearly two years now but we've never met :-(
04:47:19 <TFK> Thanks! Although I'll probably just wait for the next binary release. No rush.
04:47:27 <dcoutts> TFK, ok
04:47:29 <beelsebob> dcoutts: :O
04:47:49 <beelsebob> come to canterbury then *g*
04:47:54 <dcoutts> TFK, hey just to prove that it works, let me see if I can join #haskell... :-)
04:48:28 <dcoutts> beelsebob, yeah I should
04:49:14 <dcoutts> welcome dcoutts_shIRC !
04:49:20 <TFK> L0D
04:49:20 <dcoutts_shIRC> why thanks :-)
04:49:22 <TFK> err
04:49:29 <TFK> :-D
04:49:38 <beelsebob> Hmm... perhaps I should write... this lit survey is not gonna write itself
04:49:42 <dcoutts_shIRC> it can send without crashing, yay!
04:49:42 <TFK> My typing today is horrible. But it's great to see it all working :-)
04:49:51 <dcoutts_shIRC> :-)
04:50:07 <TFK> Hopefully it will also pong to the server's ping, but that's another issue.
04:50:27 <dcoutts_shIRC> ok, that's enough.
04:50:53 <dcoutts> TFK, yeah I don't know about that aspect :-)
04:51:02 <shapr> I wish for a SILCnet client next :-)
04:51:05 <TFK> Well, thanks again :-)
04:51:12 <TFK> What's SILCnet?
04:51:22 <dcoutts> np, now I've really got to go, bye folk
04:51:28 <shapr> cya dcoutts
04:52:18 <shapr> TFK: Secure, and lots of other improvements over IRC - http://silcnet.net/
04:52:34 <TFK> Sounds like something no one would use :-P
04:53:04 <shapr> I use it. UTF-8, encrypt-only, netsplit resistant hydrid ring/star topology, MIME message types, etc
04:53:14 <earthy> owhgoody. another supposed successor to IRC
04:53:26 <earthy> there was WWCN, back in 1997
04:53:41 <earthy> did roughly the same
04:53:44 <earthy> didn't take off either
04:54:35 <shapr> SILCnet only has 400 users, I don't know if it'll take off or not.
04:54:57 <beels_away> I think Alurio is looking like it could be reasonably successful
04:55:15 <beels_away> it evidently has the backing of UbiSoft as their next game-chat system
05:18:46 <earthy> owh, it won't. WWCN got up to about 1000 users, IIRC
05:19:17 <earthy> you could even connect to WWCN using ordinary IRC clients
05:27:22 <Muad_Dibber> it would be better if irc servers could communicate with it
05:27:26 <Muad_Dibber> some kind of hybrid network
05:27:53 <shapr> Like, hybrid ring & star?
05:29:32 <Muad_Dibber> well what i meant was like such kind of network, connected to freenode as a single other hub
05:29:45 <Muad_Dibber> as to migrate slowly
05:47:46 <tessier_> Hello haskellers
05:49:19 <shapr> y0
05:50:40 * beelsebob eats egg
05:50:47 <egg> ...
05:51:01 <shapr> well now
05:51:02 <beelsebob> quite
05:51:08 <shapr> that was interesting
05:51:18 <shapr> Someone you know?
05:51:22 <beelsebob> no
05:51:29 <beelsebob> complete randomness
05:51:34 <shapr> Sounds good to me.
05:51:40 <beelsebob> just couldn't resist the oportunity
05:52:38 <shapr> That happens to me too.
05:59:22 <Itkovian> @seen boegel
05:59:23 <lambdabot> Last time I saw boegel was when I left #haskell 2 days, 11 hours, 9
05:59:23 <lambdabot> minutes and 41 seconds ago, and I have missed 1 day, 21 hours and 14
05:59:23 <lambdabot> minutes since then.
06:05:55 <jyp> you've been slacking, lambdabot :)
06:10:05 * beelsebob wonders what he's been slacking off
06:10:10 <beelsebob> @cookie lambdabot
06:10:11 <lambdabot> Unknown command, try @listcommands.
06:10:21 <beelsebob> damnit... that *should* be a command
06:10:30 <shapr> @botsnack
06:10:31 <lambdabot> :)
06:10:39 <beelsebob> hehe
06:15:20 <shapr> hiya axiom
06:17:41 <xs> hm. it's not possible to define the syntax of ! in the traditional maths sense, without creating a new number type? (e.g, 1! = 1, 3! = 6, etc..)
06:18:35 <Igloo> You can't have postfix operators at all
06:18:56 <beelsebob> hmm... I would question whether it's a good idea anyway... after all 5! != x is gonna get pretty confusing pretty quickly
06:19:46 <jyp> ... (5 !)
06:20:02 <axiom> hi
06:20:06 <Itkovian> hmm ...
06:20:07 <Itkovian> â
06:20:07 <xs> if you have a type which is a function, then you sort of can have postfix. i guess?
06:20:10 <Itkovian> Prelude> [1,1.3..2]
06:20:10 <beelsebob> true... but that's about as verbose as fac 5
06:20:10 <Itkovian> [1.0,1.3,1.6,1.9000000000000001]
06:20:11 <jyp> (- 5) is already  confusiing enough
06:20:23 <Itkovian> seems like the precision isn't all it's made out to be
06:20:33 <Itkovian> how hard can 1.3-1.0 be?
06:20:52 <Itkovian> @pl [1,1.3 .. 2]
06:20:53 <lambdabot> [1,1 . 3..2]
06:20:56 <shapr> Talk to the IEEE.
06:21:01 <Itkovian> yeah well ...
06:21:02 <Igloo> Itkovian: Floating point arithmetic isn't precise
06:21:04 <Itkovian> I should :-)
06:21:09 <beelsebob> itkovian, probably very hard when it's in floating point
06:21:10 <axiom> I have a simple haskell question: how do I concatenate a string and a number (for example "Hello World" and 32) ? I tried "Hello World" ++ [32], but this doesn't work
06:21:18 <Itkovian> Igloo: I know that ... but to make such a big error on the second addition??
06:21:19 <Igloo> @eval [1 :: Rational, 1.3 .. 2]
06:21:20 <lambdabot> (line 1, column 5):
06:21:20 <lambdabot> unexpected ":"
06:21:20 <lambdabot> expecting simple term
06:21:22 <beelsebob> axiom: show
06:21:33 <Igloo> @plugs [1 :: Rational, 1.3 .. 2]
06:21:39 <lambdabot> [1 % 1,13 % 10,8 % 5,19 % 10]
06:21:42 <beelsebob> show 32 = "32"
06:21:48 <Itkovian> axiom: 9show 32)
06:21:53 <Igloo> Itkovian: Eh?
06:21:58 <Itkovian> Igloo: nice :-)
06:22:09 <axiom> show? you mean I should add the " signs ?
06:22:12 <Itkovian> I am just looking to implement seq in haskell, as my mac seems to lack it
06:22:18 <Itkovian> seq as in bash seq
06:22:20 <beelsebob> axiom: no, the show gunction
06:22:22 <axiom> but the problem is what do I do if I have a function which calculates a number
06:22:23 <beelsebob> function
06:22:26 <shapr> What does bash seq do?
06:22:27 <axiom> oh
06:22:31 <axiom> ok, I'll try
06:22:35 <Itkovian> shapr: it enumerates
06:22:39 <shapr> oh
06:22:42 <beelsebob> @hoogle show
06:22:43 <lambdabot> Prelude.show :: Show a => (a -> String)
06:22:47 <beelsebob> :)
06:22:59 <axiom> cool, works, thanks! :)
06:22:59 <Itkovian> as for e.g. for i in `seq 1 3 10`; do echo $i; done yields 1 3 5 7 9
06:23:02 <wilx> Igloo, I know people who would not agree with you, about floating point arithmetics not being precise. They would say that it is precise, only it is not real real arithmetics :)
06:23:17 <axiom> why is it called "show" ? this doesn't make sense to me since nothing is "shown" ?
06:23:27 <Igloo> :-)
06:23:28 <Itkovian> I just astonishes me that the rouding error on the second addition can already be that big.
06:23:39 <beelsebob> axiom: type show 5 in hugs
06:23:41 <Itkovian> axiom: show tries converting anything to a String
06:23:48 <Igloo> 0.0000000000000001 is big?
06:24:03 <Itkovian> yes.
06:24:06 <axiom> ok, thanks guys
06:24:07 <Itkovian> too big imo
06:24:12 <Igloo> I imagine that's the smallest representable error
06:24:23 <Itkovian> prolly
06:24:30 <Itkovian> haven't counted the 0's
06:25:03 <beelsebob> depends on the exponent it's used anyway
06:25:47 <Itkovian> beelsebob: well, here it's the printed out decimal form, so the exponent is largely irrelevant imo
06:26:04 <Itkovian> ah well, I'l make do
06:26:07 <beelsebob> yeh... but the calculation was done in floating point
06:26:08 <Igloo> dons?
06:26:24 <beelsebob> the error is a different size depending on how it represented the numbers
06:26:33 <Itkovian> bash's seq does only ints anyway
06:27:10 <Itkovian> beelsebob: that's true, but i really don't care if there an additional 10^-19 after it, the fact remains that if I weas to use this in a script comparing string, it'd fail miserably
06:27:36 <Itkovian> I've another question.
06:28:12 <Itkovian> Suppose you finished an exam and the assistent sends round a mail pointing out a number of the most obvious mistakes that were made. would wou be angry with him for telling so? (no names were mentioned)
06:28:19 <beelsebob> yeh... but my point is that it could have been represented as 1 x 2 ^ 0, or as 2 x 2 ^ -1... different representations will give you a different error
06:28:27 <Itkovian> seems like my students didn't take it too well.
06:28:33 <Itkovian> some at least
06:28:36 <shapr> Why not?
06:28:45 <beelsebob> why not... if it's anonymous
06:29:29 <Itkovian> sure, I didn't mention any names, just pointed out that some, iof not most seemd to forget everything I told in class, and I said that they should be mindful to do it as I told them.
06:29:35 <beelsebob> if your mistake was particularly dumb... don't own up to it... or do, and laugh at yourself
06:29:51 <Itkovian> also I pointed out that take did, as three students didn't know. duh.
06:30:25 <beelsebob> hah... students never listen to what they're told
06:30:32 <Itkovian> well, if you have to reduce a lambda expression to beta normal form, first thing to do is an alpha conversion, giving the bonded variables a unique name.
06:30:37 <beelsebob> we told them that 33% of the marks would be on comments
06:30:44 <beelsebob> did we get a single comment?
06:31:01 <shapr> It's strange that students seem singularly uninterested in learning.
06:31:04 <Itkovian> faling to do so, need not mean the question will be answered wrongly, but it makes it far easier to make a subtle mistake ...
06:31:13 <jyp> beelsebob: this way they were sure there wouldn't be any mistake in commens =)
06:31:27 <wilx> Heh.
06:31:28 <beelsebob> jyp: lol
06:31:33 <wilx> Students deserve to die!
06:31:35 <wilx> Including me.
06:31:59 <Itkovian> what does this program do?
06:32:00 <Itkovian> h n = g n
06:32:00 <Itkovian>   where g n = f n : g(n+1)
06:32:00 <Itkovian> f x
06:32:01 <Itkovian>   | x < 6 = x
06:32:03 <Itkovian>   | otherwise = f x
06:32:06 <Itkovian> test n = take 5 (h n)
06:32:08 <Itkovian> duh.
06:32:10 <beelsebob> students are uninterested in learning because it's their job... I'm uninterested in writing a lit review because it's my job
06:32:13 <Itkovian> such an easy question ... and yet ...
06:32:35 <shapr> So you think we should hoard our learning and make it unavailable to students?
06:32:43 <beelsebob> itkovian: loops infinitely on input greater than 6?
06:32:56 <Itkovian> nah, on input greater than 2 ;-)
06:33:05 <Itkovian> but you at least got the point
06:33:18 <Itkovian> some pondered half an hour and didn't seem to get it
06:33:21 <jyp> When you tell somethinhg to a student, always make it sound like you let go a secret
06:33:22 <beelsebob> heh
06:33:46 <Itkovian> jyp: well, if I demonstarte it time and time again, it's hardly a secret, is it?
06:34:03 <shapr> Itkovian: Hey, after you told me, two other people said I should be a teacher.
06:34:23 <Itkovian> after I told you what? you should teach?
06:34:28 <Itkovian> you should
06:34:29 <shapr> Yeah
06:34:40 <Itkovian> you have the single mindedness to propagate your ideas :-)
06:34:47 * shapr laughs
06:34:50 <Itkovian> and you can explain the consisely
06:34:57 <Itkovian> *them
06:35:06 <tromp> at alrd loops on input 2
06:35:13 <tromp> at->it
06:35:16 <shapr> hoi tromp!
06:35:19 <beelsebob> with students I think you need bloody mindedness, not single mindedness
06:35:23 <tromp> hi folks
06:35:25 <Itkovian> tromp yeah
06:36:04 <Itkovian> but it's such a bloody shame, I feel like I wasted my time ... I spend more time preparing exercises, and stuff than the previous years, and suddenly they perform subpar
06:36:05 <shapr> Too bad TMR ended up with four articles this month, just under the publishable threshhold.
06:36:16 <Itkovian> shapr: didn't boegel finish his?
06:36:18 <tromp> but it terminates on 1.99 :)
06:36:34 <Itkovian> tromp: well ... 1.999 will do fine too :-)
06:36:42 <Itkovian> pending rounding errors :-)
06:36:46 <shapr> Oh wait
06:36:48 <beelsebob> hehehe
06:36:49 <shapr> Maybe that is five!
06:36:51 <shapr> whoa
06:37:08 <Itkovian> He told me he'd put some time in it ovedr the weekend iirc
06:37:23 <shapr> Thanks for reminding me, I'm still getting over this cold.
06:37:27 * shapr smacks himself awake
06:37:40 * Itkovian offers shapr a coffee
06:37:49 <wilx> Bah, I do not get it...why should it loop indefinitely? Doesn't the laziness of "take 5"  kick in and stop it from looping?
06:37:52 * beelsebob takes it before shapr
06:38:07 <Itkovian> grrr
06:38:13 <beelsebob> wilx: no... it still tries to display f 6
06:38:19 <beelsebob> ... which breaks
06:38:27 <Itkovian> wilx: yes, but if you get past 5 items on the list before you arrive at f 6 ...
06:38:59 <Itkovian> then it juist generates the first items and loops on the first on that eventuelly yields f n, n >= 6
06:39:09 <Itkovian> other question ...
06:39:17 <wilx> I see now.
06:39:18 <wilx> Hmm.
06:39:19 <Itkovian> give the type of lambda f x . f x x
06:39:21 <Itkovian> duh.
06:39:27 <Itkovian> no computers involved
06:39:36 <beelsebob> heh
06:39:56 <Itkovian> If you say to them that that is, in fact, a combinator, they oogle you with large eyes ... and say 'the lambda is a combinator?'
06:40:16 <Itkovian> if any of you is one of my students, hit me :-)
06:40:23 <beelsebob> lol
06:40:30 * shapr is not one of Itkovian's students
06:40:37 <beelsebob> unless you're Olaf in disguise
06:40:41 <Itkovian> yeah, you have moved far beyond me shapr
06:40:47 <Itkovian> I ain't no Olaf
06:40:50 <beelsebob> and I don't remember him asking me these
06:40:56 <Itkovian> lol
06:42:55 <wilx> Hmm....
06:43:05 <wilx> (f x) has to return some function...
06:43:16 <wilx> Sounds like some kind of recursive type...
06:43:28 <earthy> \ f x -> f x x?
06:44:01 <earthy> (a -> a -> a) -> a -> a
06:44:22 <beelsebob> are we talking \f x -> f x x, or Î»f x . f x x?
06:44:47 <wilx> (no UTF-8 here...)
06:44:51 <beelsebob> sorry
06:44:55 <beelsebob> it was a lambda
06:45:00 <beelsebob> and I'm an idion
06:45:04 <earthy> ;)
06:45:10 <beelsebob> ... an idiot that can't type
06:45:13 <wilx> Huh.
06:45:16 * shapr is just an idiom
06:45:42 <wilx> I thought that "lambda f x . f x x" is the same as Haskell's \f x -> f x x.
06:45:44 <wilx> Is it not?
06:45:47 <beelsebob> it is
06:45:50 <Itkovian> yes
06:45:53 <beelsebob> that's why I'm an idiot
06:45:58 <earthy> ( \ f x . f f x ) is more interesting. :)
06:45:58 <wilx> Ah :D
06:46:03 <Itkovian> the type is (a -> a -> b) -> a -> b
06:46:11 <earthy> oh, right
06:46:22 * earthy tends to fill in uniformly
06:46:38 <wilx> Hmm, sounds sane.
06:46:44 <Itkovian> avarage score was 2.38 out of 4
06:46:46 <wilx> I guess I lack the practice...
06:46:49 <Itkovian> makes one think, eh
06:47:09 <wilx> 2.38 doesn't sound too bad :)
06:47:20 <Itkovian> the type of the expression is say t1, the type of f t2 type of t3
06:47:22 <beelsebob> heh... better than our logic exams
06:47:39 <jyp> @type (\f x -> f x x)
06:47:41 <lambdabot> (\f x -> f x x) :: forall t t1. (t -> t -> t1) -> t -> t1
06:47:49 <Itkovian> then you see that f is applied to x and then again to x, hence f is a function that takes two args of the same type, yielding the type of the entire lambda expression
06:47:51 <jyp> so cool :)
06:48:01 <earthy> @type (\f x -> f f x)
06:48:02 <lambdabot> bzzt
06:48:17 <Itkovian> earthy: I don't think that one has a finite type
06:48:18 <earthy> whaddayamean bzzt?
06:48:22 <beelsebob> does bzzt mean a type error?
06:48:43 <Itkovian> imo it means that the type inference algo can't deduce a type
06:48:52 <poetix> @type (\f x -> f # f x)
06:48:53 <lambdabot> bzzt
06:49:00 <poetix> @type (\f x -> f $ f x)
06:49:02 <lambdabot> (\f x -> f $ f x) :: forall b. (b -> b) -> b -> b
06:49:11 <poetix> bloody useless US keyboard
06:49:19 <beelsebob> heh
06:49:24 <earthy> (\forall b c . (\forall a . a -> b -> c) -> b -> c)  sounds about right to me
06:49:25 <Itkovian> US keybs rock
06:49:36 <beelsebob> $ and # aren't on the same key on US or GB keyboards?
06:49:37 <Itkovian> erm
06:49:40 <Itkovian> let me check
06:49:54 <genneth> they're not
06:50:00 <beelsebob> it pisses me off that Â£ is not shift-3 on this keyboard
06:50:00 <wilx> *sigh*
06:50:08 <wilx> I wish there was Haskell course on my uni.
06:50:12 <poetix> Irrevelent, as in fact I just hit the wrong key...
06:50:17 <beelsebob> hehe
06:50:17 <genneth> on GB, the $ is just above the 4 and # is off to the right, beyond L
06:50:27 <wilx> All I get is Prolog and Lisp together in one course.
06:50:36 <beelsebob> gen: no... on GB # is alt-3
06:50:40 * poetix cannot typo for sith
06:50:46 <jyp> wilx: basically what I got too
06:51:09 <beelsebob> I got scheme in first year, Prolog in second year, and Haskell in third
06:51:10 <Itkovian> earthy: hmm, f takes itself as a first argument ... hence the type cannot be finite ... no?
06:51:11 <beelsebob> :)
06:51:30 <Igloo> # is next to enter on a UK keyboard
06:51:34 <earthy> that's why the f has to be polymorphic in a
06:51:43 <beelsebob> not this UK keyboard it isn't
06:51:51 <beelsebob> ###### <- alt 3
06:52:03 <earthy> K* would fit, e.g.
06:52:09 <Itkovian> earthy: imo that doesn't matter ...
06:52:19 <Igloo> On pretty much every UK keyboard I've seen it is
06:52:30 <beelsebob> yeh... I think it's a mac thing
06:52:36 <earthy> yes, it does. to wit:   (\ f x . f x x ) $ (\ x y . y ) $ id
06:52:40 <beelsebob> it's much better
06:52:53 <Itkovian> earthy: I understand what you mean, I'm not sure if it's correct
06:52:54 <earthy> err, make that:   (\ f x . f f x ) $ (\ x y . y ) $ id
06:53:05 <Igloo> Just checked my gf's mac; it doesn't have a # printed on the keyboard at all
06:53:14 <beelsebob> yeh... it's alt-3
06:53:31 <beelsebob> alt chars aren't printed on the KB
06:53:50 <Itkovian> hmm
06:54:02 <Igloo> euro is printed on 2, which I imagine you use alt to get at
06:54:04 <beelsebob> except â¬ for some reason
06:54:16 <beelsebob> but that's alt-shift
06:54:22 <earthy> GHC Interactive, version 5.04.3, for Haskell 98.
06:54:27 <beelsebob> â¢ is alt-2
06:54:30 <earthy> I really should update that
06:56:48 <beelsebob> having said that... my keyboard is re-arranged for DV, so that might all be rubbish
06:57:25 <earthy> Prelude> let k :: (forall a . a -> b -> c) -> b -> c; k f x = f f x in k (\x y -> y) 1
06:57:29 <earthy> 1
06:57:31 <earthy> there you go
06:57:33 <earthy> haskell actually groks it
06:58:44 <shapr> beelsebob: aoeu?
06:58:52 <beelsebob> aoeuidhtns
06:58:59 <shapr> nice
06:59:29 <shapr> What's the connection between Haskell and Dvorak?
06:59:44 <beelsebob> people with sense use both?
06:59:46 <beelsebob> *g*
06:59:49 <shapr> Fair enough.
06:59:51 <earthy> there's no real sense in dvorak
06:59:59 <shapr> Works nicely for me.
07:00:04 <beelsebob> there is... it's faster than qwerty
07:00:18 <earthy> really?
07:00:28 <beelsebob> the only reason to use qwerty is that it's really really fast to type qwerty
07:00:28 <earthy> then explain to me how I can manage about 300cps on qwerty?
07:00:49 <beelsebob> you may be able to... but people have done 200wpm on dvorak
07:00:50 <earthy> err, 300 cpm
07:00:51 <earthy> 5 cps. ;)
07:01:03 <earthy> 200wpm is insane.
07:01:09 <beelsebob> 165 to be precice IIRC
07:01:16 <earthy> on any keyboard
07:01:19 <earthy> that's almost chording
07:01:31 <beelsebob> nope... I'm lying
07:01:34 <beelsebob> 150wpm
07:01:44 <beelsebob> still... 750cpm
07:02:06 <beelsebob> http://sominfo.syr.edu/facstaff/dvorak/blackburn.html
07:02:44 <shapr> Anyway, dvorak is faster than qwerty for me, I like that.
07:03:00 <beelsebob> yeh... it's much more comfortable to type anyway
07:03:09 <beelsebob> much less likely to cause RSI
07:03:09 <earthy> spoken word is about 300wpm
07:03:31 <beelsebob> yeh... once you can keep up with your brain there's not much point
07:03:35 <earthy> well, 150-300wpm
07:04:42 <beelsebob> yay... the BBC actually respect that mac users exist... http://www.bbc.co.uk/radio/prototypes/listenlive/
07:05:51 <TheHunter> \(f :: forall a b c. (a -> b -> c) -> b -> a -> c) x -> f f x
07:06:16 <TheHunter> lambdabot?
07:06:19 <Itkovian> earthy: ok
07:06:26 <shapr> @hello
07:06:32 <lambdabot>  @help <command> - ask for help for <command>
07:06:41 <TheHunter> oh, i forgot @type.
07:06:51 <TheHunter> @type \(f :: forall a b c. (a -> b -> c) -> b -> a -> c) x -> f f x
07:06:53 <lambdabot> \(f :: forall a b c. (a -> b -> c) -> b -> a -> c) x -> f f x ::
07:06:53 <lambdabot> forall a
07:06:53 <lambdabot>                         c
07:06:53 <lambdabot>                         b.
07:06:54 <lambdabot>                       (forall a1 b1 c1.
07:06:56 <lambdabot>                       (a1 -> b1 -> c1)
07:06:59 <lambdabot>                       -> b1
07:07:00 <lambdabot> [6 @more lines]
07:07:04 <jyp> @more
07:07:05 <lambdabot>                       -> a1
07:07:05 <lambdabot>                       -> c1)
07:07:06 <lambdabot>                       -> b
07:07:08 <lambdabot>                       -> (a -> b -> c)
07:07:10 <lambdabot>                       -> a
07:07:13 <lambdabot>                       -> c
07:07:15 <beelsebob> wow... that's quite a type
07:07:20 <TheHunter> great layout.
07:07:26 <earthy> and it's wrong
07:07:52 <TheHunter> it's wrong?
07:07:52 <earthy> @ type (\(f::forall a b c. a -> b -> c) x -> f f x)
07:07:52 <lambdabot> Maybe you meant: all-dicts arr babel botsnack code define definitions
07:07:52 <lambdabot> del-definition devils dice dict dict-help docs dummy dynamic-load
07:07:52 <lambdabot> dynamic-reload dynamic-unload easton echo elements eurohaskell eval
07:07:52 <lambdabot> fact fact-cons fact-delete fact-set fact-snoc fact-update foldoc
07:07:52 <lambdabot> fortune gazetteer get-definition ghc google help hitchcock hoogle
07:07:54 <lambdabot> index jargon join karma karma+ karma- kind learn leave libsrc
07:07:55 <lambdabot> listchans listcommands listmodules lojban moo more msg part paste pl
07:07:57 <lambdabot> [5 @more lines]
07:08:00 <earthy> @type (\(f::forall a b c. a -> b -> c) x -> f f x)
07:08:02 <lambdabot> (\(f::forall a b c. a -> b -> c) x -> f f x) :: forall b c.
07:08:02 <lambdabot>                 (forall a b1 c1. a -> b1 -> c1) -> b -> c
07:08:08 <earthy> that's enough. :)
07:08:28 <earthy> actually
07:08:28 <beelsebob> @help ghc
07:08:30 <lambdabot> GHC!
07:08:35 <beelsebob> useful
07:08:39 <earthy> @type (\(f::forall a. a -> b -> c) x -> f f x)
07:08:40 <lambdabot> (\(f::forall a. a -> b -> c) x -> f f x) :: forall b c.
07:08:40 <lambdabot>                (forall a. a -> b -> c) -> b -> c
07:08:44 <beelsebob> @ghc 59 + 2
07:08:44 <earthy> there you go. :)
07:08:45 <TheHunter> i have to disagree, yours is completely meaningless, to mine you can at least apply flip
07:08:45 <lambdabot>  Can't represent explicit kind signatures yet
07:09:19 <TheHunter> oh, sorry, i see you only quantify a.
07:09:27 <earthy> yah
07:09:56 <TheHunter> @type (\(f::forall a. a -> b -> c) x -> f f x) flip
07:09:58 <lambdabot> bzzt
07:10:12 <earthy> @type flip
07:10:13 <TheHunter> well, there aren't any principal types.
07:10:14 <lambdabot> flip :: forall c a b. (a -> b -> c) -> b -> a -> c
07:10:28 <TheHunter> *typings
07:10:32 <earthy> that doesn'
07:10:41 <earthy> t match the type for f that's needed
07:10:48 <jyp> Before I get a headache (:p)  how's jhc going ?
07:11:55 <TheHunter> @type (\(f::forall a. a -> b -> c) x -> f f x) id
07:11:57 <lambdabot> bzzt
07:12:04 <TheHunter> @type (\(f::forall a. a -> b -> c) x -> f f x) const
07:12:06 <lambdabot> bzzt
07:12:53 <TheHunter> @type (\(f::forall a. a -> b -> c) x -> f f x) (flip const(
07:12:55 <TheHunter> @type (\(f::forall a. a -> b -> c) x -> f f x) (flip const)
07:12:55 <lambdabot> bzzt
07:12:57 <lambdabot> (\(f::forall a. a -> b -> c) x -> f f x) (flip const) :: forall b.
07:12:57 <lambdabot>                    b -> b
07:15:46 <shapr> @seen SyntaxNinja
07:15:47 <lambdabot> I saw SyntaxNinja leaving #haskell 3 days, 13 hours, 23 minutes and
07:15:47 <lambdabot> 56 seconds ago, and I have missed 1 day, 21 hours and 14 minutes
07:15:47 <lambdabot> since then.
07:20:34 <swiert> shapr:have you ever looked into citeulike?
07:20:47 <swiert> http://www.citeulike.org/
07:21:14 <shapr> I've seen it, I haven't looked at it very hard. Interesting features?
07:21:29 <basti_> re
07:22:20 <TheHunter> that's one of the more sensible typings: @type (\(f::forall a. (a -> a) -> (a -> a)) x -> f f x)
07:23:10 <shapr> hiya basti_
07:23:33 <basti_> whats going on?
07:24:20 <basti_> k
07:25:41 <basti_> did you hear about booklets? these are javascript bookmarks that you can use to do intelligent stuff with your clipboard
07:26:29 <basti_> maybe bookmarklets too
07:26:29 <basti_> ;)
07:28:31 <shapr> Yeah, I use those and intelligent urls too.
07:28:40 <basti_> i see
07:28:56 <shapr> Like I type "g foo bar" in my browser url field to search for foo bar in google.
07:29:15 <shapr> It's pretty simple, you just put params into an url for a command.
07:29:34 <shapr> I have commands for a swedish dictionary, google, wikis, various stuff.
07:29:45 <basti_> hmm how does that work?
07:30:48 <shapr> With galeon, you edit a bookmark and add two pieces, a 'nickname' and a 'smart url'
07:31:14 <shapr> My google bookmark has the single character nickname 'g' and the smart url is http://www.google.com/search?q=%s&ie=UTF8
07:31:29 <basti_> hmm
07:31:47 <shapr> That way I can switch to my browser, and hit C-l for "jump to location field" and "g foo bar<enter>" to see google results immediately.
07:32:20 <basti_> yes i understand how you use it
07:32:26 <basti_> now i just need to learn how to do that in firefox
07:32:49 <shapr> I wish we had a decent browser written in Haskell, I've thought of a bunch of features that are missing.
07:33:06 <basti_> let's teach it yi.
07:33:06 <basti_> ;)
07:33:26 * basti_ rearranges those words
07:33:38 <shapr> That's an interesing idea.
07:33:49 <swiert> shapr: it kind of reminds me of audioscrobbler for research articles.
07:33:51 <basti_> no it isnt. Yi isn't a gui
07:33:54 <shapr> A parser based syntax highlighting system would work just fine as a browser too.
07:34:12 <shapr> swiert: Oh that *is* interesting.
07:34:28 <basti_> except for useless stuff like images, and tables.
07:34:40 <shapr> And, easily overridden rendering would be quite valuable.
07:36:28 <swiert> basti_: firefox calls the same thing "quick searches"
07:36:50 <shapr> I thought quick searches were in-page link searches?
07:36:53 <basti_> and has them in another location bar?
07:37:05 <shapr> Of course, I don't use firefox, so... I'm probably wrong :-)
07:37:27 <basti_> that annoying other location bar that serves no useful purpose? :P
07:38:34 <swiert> hang on - right click on a search field and choose "add keyword ..."
07:39:06 <basti_> oh cool.
07:39:09 <basti_> thanks.
07:39:17 <shapr> I wish I could reorganize galeon so that the menubar, buttons, location field, and tabs could all be next to each other on the same line. My screen width is enough to handle that most of the time.
07:39:34 <shapr> I am unhappy with applications that leave big chunks of dead space on my screen.
07:39:41 <basti_> why is there no optional & per default on visual feedback that highlights this option?
07:40:10 <shapr> Like my status bar at the bottom of the screen. I look at it a few seconds each day, but I still have to see it when it's empty. That's irritating.
07:41:58 <shapr> I could go for semi-transparent with the text showing through, that would be better. I would apply that to most of the widgets, scrollbars, tabs, location field, buttons, even menubar.
07:42:13 <shapr> Would also look very cool =)
07:42:41 <basti_> and confusing
07:42:52 <shapr> Not for me.
07:43:03 <basti_> transparency has no "non fun" purpose imo
07:43:17 <shapr> I disagree, I think it's a good way to layer useful info.
07:43:21 <basti_> maybe for a few little bits it makes sense
07:43:33 <basti_> it might get better with higher resolution
07:43:37 <shapr> Sadly, we don't have real transparency in X yet.
07:43:45 <basti_> but you cant read two texts that are alpha-blended.
07:44:00 <basti_> xorg?
07:44:08 <shapr> You can if one text is faded menu choices on top of the web page.
07:44:22 <shapr> Yeah, xorg, cairo, that's going in the right direction.
07:44:32 <basti_> yes, maybe there's some little points where transparency actually would work
07:45:06 <basti_> actually im very fed up with x
07:45:09 <shapr> I think there are many, just not obvious.
07:45:48 <basti_> ancient network debugging helper, hyped to a genereal abstraction layer for guis...
07:46:11 <shapr> I've thought about layered info as it relates to stacking more significance in a single spot.
07:46:27 <basti_> and abstracting so bad that an "X Terminal" (server) needs a processor, but does not actually do anything useful with it
07:46:47 <basti_> i dont know if that is a good thing, but i won't know until i've seen it
07:46:51 <shapr> I think there's likely Kolmorogov complexity for human input as well.
07:47:18 <shapr> That is, you can only pack a certain amount of complexity into a certain perceptual space before it's incomprehensible.
07:47:22 <basti_> so far i haven't seen anything useful being done with transparency
07:47:35 <shapr> Yeah, I agree with that :-)
07:47:35 <basti_> i dont know if it makes sense to technobabble this
07:48:20 <basti_> i would just say: if you put too many graphics in one spot, noone is going to understand it, and it will be harder to read.
07:48:29 <shapr> I'd like to find out how much input per perceptual space Humans can handle, and then figure out if our interfaces approach that. If not, why not?
07:49:02 <shapr> But it's not a limitation of too many graphics in one spot really.
07:49:16 <basti_> hm
07:49:25 <shapr> Look at the TreeMap overview that cm pointed out yesterday, that's a lot of useful info in a small space.
07:49:34 * basti_ can't
07:50:01 <shapr> http://www.cs.umd.edu/hcil/treemap-history/
07:51:06 <basti_> hmm
07:51:43 <basti_> but its not transparent, and it has spaces
07:51:51 <basti_> where not much happens i mean
07:52:02 <basti_> and then it has regions where there's lots of stuff that is kinda regular
07:52:51 <shapr> From one viewpoint, it's all one graphic.
07:52:55 <shapr> But there is a lot of information there.
07:53:09 <basti_> as opposed to some typical transparent layout toy gui
07:55:17 <shapr> Yeah, but eye candy is just candy.
07:58:56 <basti_> before we need more complicated visuals, we need a simpler gui system
07:59:05 <shapr> Like?
07:59:26 <basti_> like, uhm, something without x.
07:59:36 <shapr> Many have tried...
07:59:38 <basti_> something that abstracts the gui and not the pixel painting process
07:59:57 <shapr> What about Display PostScript?
07:59:59 <basti_> java's swing is cute, but its in java.
08:00:08 <basti_> hmm
08:00:11 <basti_> why not?
08:00:30 <shapr> I don't know if it's open source.
08:01:10 <basti_> and then, what about letters and scrolling?
08:01:25 <shapr> ?
08:02:13 <shapr> Anyway, I'm off to work, bbl.
08:02:26 <basti_> its ineffective to draw every letter "by hand" (as opposed to "in a macro"), and its also ineffective to copy the whole scolled display again, just because it was scrolled one pixel or two
08:02:30 <basti_> great.
08:05:14 <df_> surely the gui is an abstraction to the pixel painting process
08:06:27 <basti_> usually its far more, except in the case of x
08:08:09 <df_> x11 is horrid and at the same time nice in places
08:08:25 <basti_> its nice because it has network abstraction. the rest is horrid.
08:08:38 <df_> just about, yes
08:09:14 <basti_> ;)
08:14:03 <df_> but /me wonders, isn't that the point of the toolkits
08:14:19 <metaperl> morning all, is there a haskell between function to tell me if a number if between two others? In my case between-ness means between or on, not strictly between
08:14:43 <basti_> hmm
08:15:02 <basti_> @pl (\a b c->a>c && c>b)
08:15:03 <lambdabot> (. flip (>)) . ap . ((&&) .) . (>)
08:15:07 <basti_> there it is
08:17:01 <genneth> @type (. flip (>)) . ap . ((&&) .) . (>)
08:17:08 <lambdabot> bzzt
08:17:12 <basti_> bzt?
08:17:28 <genneth> @type ((. flip (>)) . ap . ((&&) .) . (>))
08:17:30 <lambdabot> bzzt
08:17:32 <basti_> @pl (\c->a>c && c>b)
08:17:33 <lambdabot> liftM2 (&&) (a >) (> b)
08:17:34 <genneth> :-|
08:17:39 <basti_> this way its easier
08:17:41 <metaperl> there's nothing in the Prelude for this?
08:17:58 <basti_> well its a function thats composed of primitives
08:18:04 <basti_> obvious primitives.
08:18:10 <genneth> it doesn't seem like a structure that would be repeated that often in different contexts
08:19:10 <genneth> @type (\op a b c -> op a c && op c b)
08:19:12 <lambdabot> (\op a b c -> op a c && op c b) :: forall t.
08:19:12 <lambdabot>             (t -> t -> Bool) -> t -> t -> t -> Bool
08:19:13 <metaperl> I like  (\a b c->a>c && c>b)  because I can almost understand it.. I need to research && but I think I know the answer already
08:19:33 <basti_> logical and
08:19:48 <genneth> && does exactly what it says on the tin; up to a lazy isomorphism.... :D
08:20:31 <basti_> its rather like C &, genneth wanted to say
08:21:01 <df_> well its rather more like C's &&
08:21:15 <df_> since & is a bitwise op
08:21:32 <basti_> oh
08:21:34 <basti_> okay
08:21:42 * basti_ hasnt done C for a very long time
08:21:45 <basti_> im sorry about that
08:22:05 <basti_> && then (which is lazy, yes i remember.. hazily...)
08:23:05 <df_> basically if (a && b) then FOO else LALA is: if a then (if b then FOO else LALA) else LALA, ie if a is not true, b does not get evaluated
08:27:00 <basti_> the good thing is, in haskell nothing has side effects.
08:27:02 <basti_> =)
08:29:42 <df_> whats the relevance of that statement in this case? (/me can't see it)
08:30:00 <basti_> imagine c: if (a++&&b++)
08:30:07 <basti_> (b would be modified depending on a)
08:30:46 <df_> yes
08:31:40 <basti_> thats bad since you dont suspect it, except if somebody twisted your brain via c++
08:31:45 <df_> ah, sorry you can't use sideefects in it, yes - /me was looking for something more revoloutinary
08:32:00 <basti_> no
08:52:58 <ski> @type ((. flip (>)) . Control.Monad.ap . ((&&) .) . (>))
08:53:04 <lambdabot> ((. flip (>)) . Control.Monad.ap . ((&&) .) . (>)) :: forall a.
08:53:04 <lambdabot>                   (Monad ((->) a), Ord a) =>
08:53:04 <lambdabot>                   a -> a -> a -> Bool
08:54:46 <TheHunter> @type ((. flip (>)) . Control.Monad.Reader.ap . ((&&) .) . (>))
08:54:48 <lambdabot> ((. flip (>)) . Control.Monad.Reader.ap . ((&&) .) . (>)) :: forall
08:54:48 <lambdabot> a.
08:54:48 <lambdabot>                      (Ord a) =>
08:54:48 <lambdabot>                      a -> a -> a -> Bool
08:55:29 <ski> m
08:57:25 <basti_> o.0
09:07:46 <adept> what was that???
09:08:31 <basti_> lambdabot can find out types of expressions
09:09:12 <basti_> sometimes when it does so, the results are rather... incomprehensible
09:09:36 <mflux_> garbage in, garbage out, I can't say the input was very comprehensible either ;)
09:09:37 <musasabi> Do functional dependencies and GADTs work together?
09:09:42 * ski finds the expr more incomprehensible
09:10:37 <TheHunter> we're waiting for 6.4.1 (which will prolly have a sane :type output) and then we'll filter out everything till '::'.
09:10:53 <TheHunter> so the answer to the last query would be
09:11:08 <TheHunter> forall a. (Ord a) => a -> a -> a -> Bool
09:26:29 <TheHunter> @type ((. flip (>)) . Control.Monad.Reader.ap . ((&&) .) . (>))
09:26:31 <thbot> forall a. (Ord a) => a -> a -> a -> Bool
09:26:35 <lambdabot> ((. flip (>)) . Control.Monad.Reader.ap . ((&&) .) . (>)) :: forall
09:26:35 <lambdabot> a.
09:26:35 <lambdabot>                      (Ord a) =>
09:26:35 <lambdabot>                      a -> a -> a -> Bool
09:27:12 <adept> @type groupBy
09:27:13 <lambdabot> bzzt
09:27:14 <thbot> bzzt
09:27:21 <adept> @type List.groupBy
09:27:23 <lambdabot> List.groupBy :: forall a. (a -> a -> Bool) -> [a] -> [[a]]
09:27:24 <thbot> forall a. (a -> a -> Bool) -> [a] -> [[a]]
09:27:55 <TheHunter> @type \(f :: forall a b c. (a -> b -> c) -> b -> a -> c) x -> f f x
09:27:57 <thbot> forall a c b.
09:27:57 <thbot> (forall a1 b1 c1. (a1 -> b1 -> c1) -> b1 -> a1 -> c1)
09:27:57 <thbot> -> b
09:27:57 <thbot> -> (a -> b -> c)
09:27:57 <thbot> -> a
09:27:57 <lambdabot> \(f :: forall a b c. (a -> b -> c) -> b -> a -> c) x -> f f x ::
09:27:57 <lambdabot> forall a
09:27:57 <lambdabot>                         c
09:27:57 <lambdabot>                         b.
09:27:57 <lambdabot>                       (forall a1 b1 c1.
09:27:58 <lambdabot>                       (a1 -> b1 -> c1)
09:27:59 <thbot> -> c
09:27:59 <lambdabot>                       -> b1
09:28:01 <lambdabot> [6 @more lines]
09:29:08 <ski> lambdabot: @more
09:29:08 <lambdabot>                       -> a1
09:29:08 <lambdabot>                       -> c1)
09:29:08 <lambdabot>                       -> b
09:29:08 <lambdabot>                       -> (a -> b -> c)
09:29:08 <lambdabot>                       -> a
09:29:09 <lambdabot>                       -> c
09:29:35 <ski> ugly indentation
09:29:56 <musasabi> Why does this not work (Fundeps + GADT) http://youzen.b2.fi/~musasabi/fd.hs - seems the type inference fails, but I need the type signature for the real code...
09:30:41 <TheHunter> thbot, @part #haskell
09:30:58 <lisppaste2> metaperl pasted "how to compress the first two guards into 1?" at http://paste.lisp.org/display/9634
09:31:10 <jyp> Fundeps + GADT simply doesn't work in current ghc...
09:31:35 <jyp> :-/
09:32:09 <musasabi> Do they work under ghc-head better?
09:32:43 <TheHunter> no, but you can still do anything with sufficiently verbose type annotations + moving pattern matching to case expressions, /me thinks.
09:34:25 <ski> metaperl : between b c a = signum ((b-a) * (c-a)) /= 1  -- ?
09:34:51 <metaperl> 'l
09:35:11 <metaperl> ski: that looks pretty slick
09:35:12 <ski> um
09:35:18 <metaperl> I dont know what /= does
09:35:28 <basti_> inequality check
09:35:45 <ski> between b c a = (b-a) * (c-a) <= 0   -- would actually suffice, methink
09:36:06 <metaperl> currently between-ness includes endpoints
09:36:13 <ski> yes
09:36:24 <musasabi> found a solution - quite ugly though.
09:36:47 <ski> metaperl : change to ".. < 0" if you wanna exclude both endpoints
09:37:03 <metaperl> cool
09:37:44 <jyp> Anyone knows if it is possible do make a type an instance of Functor using Data.Generic stuff ?
09:39:37 <TheHunter> very unlikely.
09:40:24 <jyp> mmm
09:41:13 <jyp> so to be a bit more verbose, I have "data F a ="
09:41:39 <jyp> F being quite long and recursive
09:42:02 <jyp> so the functor instance is a pain to write
09:42:23 <jyp> Any suggestion to make is less painful ?
09:42:37 <basti_> hmm i dont know about your problem, but, what are you trying to do?
09:43:23 <jyp> Let's say I have a syntax tree with annotations
09:43:23 <TheHunter> if possible, use newtype deriving.
09:43:48 <TheHunter> hack up a drift backend
09:43:57 <TheHunter> investigate generic haskell
09:44:05 <jyp> I want to apply a certain functions to all annotations, changing their type
09:44:15 <jyp> TheHunter: thanks for the tip
09:44:41 <basti_> hmm i see
09:45:10 <basti_> tried to abstract the contents away from the structure?
09:45:22 <basti_> but that won't help any
09:45:22 <basti_> :
09:45:23 <basti_> :(
09:45:49 <TheHunter> weird, DrIFT has FunctorM, but not Functor, as far as i can see.
09:45:53 <basti_> i dont see a possibility either
09:46:15 <basti_> skies are getting a bizarre color over germany
09:47:24 <TheHunter> hmm, maybe syb + unsafeCoerce# will work, too.
09:47:36 <basti_> :-o
09:48:01 <jyp> I hoped so...
09:49:06 <metaperl> I want to make 2 improvements to this: imgOverlap i1 i2 x y = pointWithin i1 x y && pointWithin i2 x y ... the first is to write in points-free style. the second is to make sure that I can do without parentheses around the two calls to pointWithin
09:49:45 <jyp> I need something like this:  mapX (a->b) -> c a -> c b
09:50:01 <ski> metaperl : how much points-free ?
09:50:08 <TheHunter> i'm trying, it just might work...
09:50:35 <metaperl> ski: get rid of x and y on the RHS
09:50:47 <ski> metaperl : but not i1 and i2 ?
09:50:57 <metaperl> I dont know... if possible
09:51:13 <metaperl> I was thinking (pointWithin i1 . pointWithin i2) x y
09:51:17 <metaperl> oops
09:51:26 <metaperl> I was thinking (pointWithin i1 && pointWithin i2) x y
09:51:36 <metaperl> maybe I should quit guessing :)
09:52:04 <ski> imgOverlap i1 i2 = curry (uncurry (&&) . (pointWithin i1 *** pointWithin i2)) -- ?
09:52:24 <ski> hm
09:52:27 <metaperl> my, that is not any shorter and it certainly twists my brain :)
09:52:46 <metaperl> sure it is points-free, but... I'll take mine for readability any day
09:53:05 <ski> hm, you need to copy the x and y ..
09:53:20 <metaperl> anyway, did my version need to parenthesize the calls to pointWithin?
09:53:42 <ski> which version ?
09:54:00 <metaperl> imgOverlap i1 i2 x y = pointWithin i1 x y && pointWithin i2 x y
09:54:20 <ski> there are clearly no parens, in that def  (so what did you mean ?)
09:54:31 <metaperl> did it need them ?
09:54:35 <ski> ah, you wondered if you have to ..
09:54:40 <ski> ok, no you don't
09:54:41 <metaperl> lol
09:55:05 <ski> application binds stronger than (other) infix operators
09:55:24 <metaperl> i see
09:55:36 <metaperl> and Haskell knows the arity of pointWithin
09:55:44 <metaperl> to use a Prolog term :)
09:56:30 <TheHunter> jyp, it seems to work. Unbelievable. I'll put the code up
09:56:33 <TheHunter> @paste
09:56:34 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
09:56:59 * metaperl likes paste.lisp.org/new/haskell much better
09:57:04 <ski> metaperl : no, it does not (in that sense)
09:57:22 <metaperl> ski: haskell doesnt know the number of arguments that pointWithin takes??
09:57:29 <ski> (hm, or maybe depends on how one looks on it ..)
09:57:54 <metaperl> pointWithin is a function with a definite type signature, hence definite arity
09:58:01 <ski> i was reading what ou said as if it know syntactically the arity (which it don't)
09:58:06 <ski> but, of course the type knows
09:58:28 <ski> (e.g. you can partially apply pointWithin ..)
09:58:37 <TheHunter> ok, it's up.
09:58:46 <metaperl> right... ok ski thanks for your help
09:59:00 <metaperl> back to exercise 6.16 in Craft of FP by Thompson
09:59:37 <metaperl> I think I've been on this exercise for 2 months... a brief trip into C++ but cannot think like C++... so I ran back to Haskell
09:59:42 <jyp> TheHunter: thanks many
09:59:43 <jyp> :)
10:00:20 <TheHunter> don't use that in real code. And it won't survive functors like the Cont monad for sure.
10:01:13 <metaperl> C++ was attractive because so much is written in it. And it is very perl-like. But I cannot wrap my head around all the different ways to use static and const and then put templates in over that and I'm a basket case. Not to mention make files and configure
10:01:19 <adept> @type List.maximumBy
10:01:25 <lambdabot> List.maximumBy :: forall a. (a -> a -> Ordering) -> [a] -> a
10:03:35 <metaperl> the Online Report list section is a must-read for fledgeling Haskellers: http://www.haskell.org/onlinereport/list.html
10:03:39 <metaperl> like me :)
10:03:49 <metaperl> lots of good stuff there... when the time comes
10:05:29 <lispy_> well, i got the mac
10:05:40 <lispy_> (trying out Colloquy right now)
10:06:57 <hyrax42> I heard it's kinda poop
10:07:13 <hyrax42> likke really well done but interface is a little not-so-well thought out
10:07:22 <lispy_> hyrax42: ah
10:07:29 <lispy_> yeah, it's a bit weird
10:07:35 * lispy_ is used to ERC
10:07:46 <hyrax42> especially with useerlist in that drawer under each channel
10:07:54 <lispy_> i don't mind that
10:08:01 <hyrax42> so you can't get userlist and see all your channels at thesame time for big channels
10:08:02 <lispy_> i don't normally care about the user list :)
10:08:07 <hyrax42> fair enough
10:08:19 <hyrax42> I guess I just find it this comfortable big list of names on the right
10:08:22 <lispy_> but emacs sort cuts would be ncie
10:08:32 <hyrax42> sort cuts?
10:08:40 <hyrax42> just get carbon emacs
10:08:44 <hyrax42> lemme link you up
10:08:54 * hyrax42 has mac lust
10:09:12 <hyrax42> http://home.att.ne.jp/alpha/z123/emacs-mac-e.html
10:09:17 <lispy_> thanks
10:09:26 <lispy_> i was going to ask in a second where to find that :)
10:09:34 <hyrax42> oh it's hard to find
10:09:44 <hyrax42> the google links are all to some guy's page who no longer maintains it
10:09:56 <hyrax42> I only ran across this new and up-to-date version a few days ago
10:10:19 <lispy_> yeah, based on emacs 22
10:10:22 <lispy_> that rocks
10:10:32 <lispy_> do you know a good pager too?
10:10:49 <lispy_> i installed virtual screens but it's showing all my apps on all desktops :(
10:11:10 <hyrax42> hrmmm
10:11:18 <hyrax42> it's *really* hacky to get multiple desktops
10:11:20 <hyrax42> on os x
10:11:24 <lispy_> ya
10:11:26 <hyrax42> virtue used to be nice
10:11:32 <hyrax42> but I think it stopped being maintained
10:11:36 <lispy_> i got a book "Mac OS X for unix geeks"
10:11:42 <tic> does FFM work in OS X?
10:11:49 <lispy_> FFM?
10:11:54 <tic> focus follows mouse
10:11:56 <hyrax42> http://virtuedesktops.sourceforge.net/
10:12:04 <hyrax42> tic, also hacky, not sure if it's possible
10:12:10 <lispy_> tic: not that i know of
10:12:13 <tic> *nod*
10:12:13 <tic> thought so
10:12:15 <lispy_> ah
10:12:18 <tic> with the global menu bar and whatnot.
10:12:18 <hyrax42> yeah no longer maintanied virtue
10:12:20 <lispy_> that might be nice to have
10:13:00 <hyrax42> lispy_, here ya go
10:13:01 <hyrax42> http://desktopmanager.berlios.de/index.php
10:13:08 <lispy_> oh DesktopManager, i think some one told me to try that one out
10:13:15 <hyrax42> virtue was forked from that when it became inactive... now things are back the other way
10:13:26 <hyrax42> virtue inactive but desktop manager apparently back in business
10:13:46 <hyrax42> and it has all those useless eyecandy transitions
10:13:48 <hyrax42> who can say no?!
10:13:53 <hyrax42> ;)
10:14:08 <lispy_> heh
10:14:37 <hyrax42> ah right... just read a decent reason for no ffm in os x
10:14:46 <hyrax42> the menu bar is not attached to the active window
10:14:51 <hyrax42> you'd have to lose focus to get to it
10:14:57 <hyrax42> by which time the menu bar will have changed purpose
10:15:03 <lispy_> DM looks perfect for me
10:15:10 <hyrax42> what mac'd you get?
10:15:17 <lispy_> ibook 12"
10:15:23 <hyrax42> lucky bastard :)
10:15:30 <lispy_> 'twas all i could afford :)
10:15:34 <hyrax42> well it's what I'm after
10:15:47 <Frederick> guys I still stuck in sml can you take a look here please? http://rafb.net/paste/results/BRm9Ba70.html
10:15:47 <hyrax42> but I've got chronic "wait till the new one" syndrome
10:15:58 <lispy_> now that they are going to intel chips i have a hunch they will discontinue the ibook line...
10:16:02 <hyrax42> so I'm waiting till the new one
10:16:12 <hyrax42> nah, it'll end up with celery m or somethign
10:16:20 <hyrax42> it's their best selling machine by a good margin
10:16:43 <lispy_> i like the battery life
10:16:48 <lispy_> it's amazing
10:16:59 <hyrax42> I'm really hoping that the shift to P-M chips will make it even better
10:17:09 <ski> Frederick : map takes (a pair of) a function (over list elements) and a list (of such elements)
10:17:13 <hyrax42> but for now I'm mostly hoping a new ibook gets relased really soon
10:17:27 <ski> Frederick : you try to pass a string and a list of strings, which is nonsensical
10:17:29 <hyrax42> so I can snap out of my useless "busy loop"
10:17:39 <ski> Frederick : what are you trying to do ?
10:17:55 <hyrax42> well I gtg
10:18:12 <hyrax42> keep track of neat little hacks you find lispy, I'll be joining you in the not-too-distant future :)
10:18:18 <Frederick> ski may I pvt you?
10:19:07 <lispy_> hyrax42: heh, okay :)
10:25:49 <lightstep> does some library convert Socket to Handle?
10:27:58 <bourbaki> hi
10:28:15 <bourbaki> anyone in here familiar with fluid dynamics?
10:28:20 <metaperl> someone in #haskell once said to me: "a function should either access or mutate but not both" ... who was that?
10:31:14 <tessier_> With cpu's going multi-core I bet we'll see an increase in functional programming in the future because it should be easier to parallelize than imperative code.
10:32:00 <lispy_> tessier_: maybe, but i don't think the value of fp is what makes people not use it
10:32:14 <lispy_> i think it's more cultural and social
10:32:15 <ski> (metaperl : you sure that wasn't method, instead of function ?)
10:32:32 <metaperl> a function can do what I stated can't it...
10:33:30 <bourbaki> imho the reason why fp isnt that common is that its not taught in unis usually
10:33:39 <bourbaki> java and c++ are prefered
10:33:47 <metaperl> ski: mutate and returned the mutated data... although MArray can mutate in place
10:34:11 <tessier_> bourbaki: Also fp really has no killer app
10:34:19 <tessier_> I have never used a program written in an fp language afaik
10:34:31 <lightstep> ghc?
10:34:42 <bourbaki> sure and the prob is also that they are used to teach c++
10:34:48 <tessier_> emacs might have been considered a killer app on unix at one point but nothing compared to the killer apps for PC's
10:34:50 <bourbaki> and are too lazy to learn something new i bet
10:35:25 <bourbaki> i am thinking about useing haskell for my lib that i want to write
10:35:27 <lispy_> there is a PS game written in lisp
10:35:31 <bourbaki> a 3rd party game lib
10:36:05 <lispy_> autocad contains large portions of lisp
10:36:09 <bourbaki> abuse was written in lisp
10:36:15 <lispy_> ebay used to be written in lisp
10:36:23 <bourbaki> and there are several games on consoles writen with lisp
10:36:32 <bourbaki> jak and dexter for example
10:36:52 <lispy_> yeah, that's the name
10:37:00 <lispy_> (I never can remember it)
10:37:00 <bourbaki> and abuse
10:37:04 <bourbaki> you can download it for free
10:37:10 <lispy_> cool
10:37:21 <bourbaki> its linked on the sdl site
10:37:31 <lispy_> Maple counts in some ways
10:37:36 <lightstep> lispy_, the one with the fox that runs on a plane and jumps on boxes?
10:37:38 <bourbaki> imho haskell would be super cool for 3d game stuff
10:37:41 <lispy_> it's a semi-functional language
10:37:57 <lispy_> lightstep: i think so
10:38:04 <bourbaki> the problem is just that there is no lightweight lib to use it in c__
10:38:04 <bourbaki> er c++
10:38:26 <lightstep> crash be(something)
10:38:26 <lispy_> wouldn't you want to use it the other way around?
10:38:36 <lispy_> lightstep: i don't know about that game
10:38:47 <lightstep> i can't remember the rest
10:39:15 <lispy_> lightstep: i know the game you're thinking of, i just don't know if it was written in FP lang
10:39:24 <lispy_> just a second too late
10:39:27 <bourbaki> can i deliver something like helium with a game or a lib if i dont modify it?
10:40:17 <lispy_> no idea
10:40:21 * lstna thinks compilers are FP killer apps.
10:40:23 <lispy_> bourbaki: have you seen Pan?
10:40:33 <bourbaki> no whats pan?
10:41:13 <lispy_> http://conal.net/pan/pan-tutorial.htm
10:41:40 <bourbaki> thx
10:41:51 <lispy_> np
10:41:54 <lispy_> you'll like it
10:42:10 <bourbaki> ah i see
10:42:12 <tessier_> bourbaki: Abuse was lisp? Wow. A shame there haven't been any more games written in it. Abuse was cool but I never really got into it.
10:42:18 <bourbaki> well i have done something funny also
10:42:29 <bourbaki> http://codemages.sf.net/homotopy1.hs
10:42:35 <tessier_> Autocad is a good point. Wish more programs were extensible with a language like lisp or python if you insist on imperative.
10:44:46 <bourbaki> id just love to write haskell code and import it into my c++ app
10:44:58 <sond> bourbaki, that's quite easy with the FFI
10:44:59 <bourbaki> i think ill have to do that with .o files then though
10:45:50 <tessier_> pan looks to be winderz only
10:45:50 <sond> bourbaki, that's how i did it.. but I guess you could use hs-plugins if you want to load them dynamically
10:46:00 <tessier_> Any other graphics libs for haskell or other fp language?
10:46:33 <bourbaki> sond: oh so i can write new haskell stuff and load it with the hs plugin stuff?
10:46:44 <sond> bourbaki, I guess it should be possible
10:47:39 <bourbaki> i have to admit that i am not able to do such a thing
10:47:42 <Heffalump> making .so files from Haskell directly is tricky, isn't it?
10:47:50 <bourbaki> but wouldnt it be of general interest to get something like that?
10:48:07 <lispy_> tessier_: there is a linux version
10:48:11 <sond> bourbaki, btw, i'm just curious: why do you want to call haskell from c++ rather than the other way around?
10:48:12 <lispy_> tessier_: but i lost the url
10:48:21 <lispy_> tessier_: and Pan# in C# version
10:48:35 <bourbaki> sond: i want to do all the 3d render suff with dx or ogl in c++
10:48:49 <bourbaki> but the 3d transformation stuff is really cool in haskell
10:49:01 <bourbaki> cuase the functions look precisely what you write down if you do math
10:49:51 <sond> bourbaki, hmm.. why not call that low level c++ dx/ogl stuff from haskell instead?
10:49:55 <tessier_> bourbaki: What's a good book for a beginner to read to learn how to do that sort of stuff? Math graphics etc?
10:50:43 <conal> i guess my ears were burning.  i connected in the middle of a discussion about graphics and even Pan
10:51:00 <bourbaki> sond: thats pretty crappy imho becasue there is no gain in it really
10:51:02 <tessier_> conal: Wow, good timing. I was just looking at your website.
10:51:07 <bourbaki> i dont want to wrap dx in haskell
10:51:09 <tessier_> conal: Is there a Linux version of pan?
10:51:13 <bourbaki> thats makeing my app slow
10:51:28 <bourbaki> tessier_: sec
10:51:49 <conal> tessier_, sadly no.  i'd sure love getting some help to do a port, though.
10:51:51 <sond> bourbaki, well okay.. ogl already has a haskell binding as you probably know .. but if you want dx maybe it's easier to just call Haskell from c++ like you say
10:52:02 <conal> i don't like it beings windows-only.
10:52:16 <conal> worse, it even depends on MS visual C++ compiler, which is pricey.
10:52:23 <lispy_> conal: actually, someone gave me a link (that I lost) to a linux port of Pan (or maybe i dreamed it...)
10:52:43 <bourbaki> sond: that gets a hell of a lot indirection into the stuff
10:53:15 <sond> bourbaki, are you talking about the ogl stuff?
10:53:22 <conal> about Pan ports, i know of three: sean seefried's PanTH, Pan# (uses C#), and Pancito.
10:53:37 <conal> none is nearly as fast as Pan, afaik
10:53:46 <lispy_> conal: what is Pancito?
10:53:54 <lispy_> that one sounds familiar
10:54:22 <lispy_> oh, i see
10:54:31 <conal> it's andrew cooke's.  see http://www.acooke.org/jara/pancito
10:55:19 <conal> i think it's a straightforward implementation, like Pan but without the tricky compilation/optimization.
10:55:44 <conal> so it still uses the Haskell runtime, unlike Pan, which compiles to very optimized straight C++.
10:55:49 <bourbaki> sond: yes
10:56:02 <bourbaki> when you have it all wrapped in haskell again its getting slower
10:56:12 <sond> bourbaki, really? I don't see why it would
10:56:36 <bourbaki> sond: cause you are calling c functions pointers to functions that is
10:56:44 <bourbaki> and you have to wrap all these dx classes and such
10:58:09 <tessier_> pancito is spanish for little bread :)
10:58:42 <sond> bourbaki, if you use vertex buffers in opengl you don't have to call that many functions per frame anyway?
10:58:59 <bourbaki> sond: no not really but you still have to
10:59:20 <bourbaki> tessier_: what kind of 3d stuff you want to know?
10:59:31 <bourbaki> that is just the dx and ogl mechanics or the 3f math stuff?
10:59:53 <sond> boudbaki, ok but some function calls is not slow..
11:00:39 <conal> lispy_ & tessier_, Sean Seefried also recently released yet another Pan implementation, also without special compilation and using hs-plugins.  See http://www.cse.unsw.edu.au/~sseefried/pan.
11:01:13 <tessier_> bourbaki: Everything in general. I have no education in 3d stuff but have always wondered how they do it.
11:01:21 <tessier_> I guess I should pick up a book someday.
11:01:28 <tessier_> Lots of other stuff to learn first though
11:01:29 <sond> bourbaki, someone did some measurements.. hopengl vs c++ opengl.. i recall there was not much difference in speed
11:01:37 <lispy_> conal: ah, yes that's the one
11:01:49 <lispy_> conal: if i understand correctly, that one will support linux
11:02:22 <lispy_> what is the recommended way to install ghc in mac os?
11:02:52 <bourbaki> tessier_: i liked this book here
11:02:54 <bourbaki> http://www.amazon.com/exec/obidos/tg/detail/-/1568811829/qid=1120499990/sr=8-1/ref=pd_bbs_ur_1/002-5426698-8579245?v=glance&s=books&n=507846
11:03:10 <bourbaki> and if you want to learn dx you just should read the docs of dx they are really cool
11:04:12 <conal> lispy_, i think sean uses linux, so that's probably a good way to get started.  as i said, it won't be nearly as fast as Pan.
11:04:35 <adept> @index memo
11:04:36 <lambdabot> bzzt
11:04:39 <lispy_> right, although, i'm wondering if the opengl performance would be acceptable
11:04:41 <tessier_> bourbaki: What is dx?
11:04:43 <bourbaki> and i prefer dx to ogl cause dx is really hot
11:04:46 <bourbaki> direct x
11:05:04 <adept> @index memoize
11:05:05 <lambdabot> bzzt
11:05:07 <vegai> really?
11:05:09 <conal> lispy_: was that comment (opengl) directed to me?
11:05:20 <lispy_> conal: yeah
11:05:23 <vegai> I mean... DirectX is hot?
11:05:56 <conal> lispy: okay, thanks.  Pan doesn't use directx or opengl.
11:06:34 <lispy_> conal: the shaders don't count as opengl?
11:07:00 <conal> lispy_: oh, maybe you're thinking of vertigo, rather than Pan.  Vertigo uses directx shaders.
11:07:07 <tessier_> directx is a windows thing. :(
11:07:21 <lispy_> conal: huh, i thought pan compiled to C++ that used shaders
11:08:13 <bourbaki> tessier_: http://www.realtimerendering.com/
11:08:16 <lispy_> man Desktop Manager on OS X is really nice
11:08:42 <conal> lispy_: nope.  Pan generates C++ code (mostly C) that fills in a C array of ints (RGB encodings) as fast as possible and then blits.
11:09:17 <lispy_> conal: oh!
11:09:39 <lispy_> conal: and that's faster than having opengl do it?
11:09:45 <conal> on the other hand, Vertigo (http://conal.net/Vertigo) generates C# and DX9 shader assembly code.
11:10:15 <conal> lispy_: i don't know how i'd even use opengl.  do you have a use in mind?
11:10:49 <lispy_> conal: from haskell code using the FFI
11:10:58 <lispy_> but i could very well be missing something
11:11:31 <lispy_> i'm curious if the performance would be acceptable
11:11:44 <conal> i meant i don't know what opengl functionality would be useful for Pan images.
11:11:54 <lispy_> i think it would be fun to write a 3d game in haskell :)
11:12:24 <lispy_> conal: well, surely opengl has some sort of putpixel primitive right?
11:12:34 * lispy_ doesn't know any OpenGL
11:12:49 <basti_> complex issue =)
11:13:00 <lispy_> basti_: hi
11:13:14 <bourbaki> i think it would be cool to do some game stuff in haskell also :)
11:13:18 <basti_> hi lispy
11:13:36 <basti_> you should have a look at yampa and the yampa arcade
11:13:43 <conal> lispy_: okay, now i get it.  i thought you had something higher level in mind.  putpixel is all that's necessary, and i think it would be terribly slow even without the haskell/C bridge to cross.
11:13:46 <lispy_> basti_: i'm trying to mimic you by anding a '_' to my name :)
11:14:18 <vegai> there was one 3d game on our Haskell course last year
11:14:29 <lispy_> conal: yeah, if we did each pixel one at a time it would be terrible.  But maybe opengl has something equivalent to blit
11:14:32 <vegai> or year before that
11:14:47 <conal> lispy_: yeah, that'd be sufficient then.
11:15:30 <basti_> lispy_: how does it feel?
11:15:43 <lispy_> basti_: not bad
11:15:46 <lispy_> basti_: :)
11:16:05 <lispy_> basti_: i'm on a mac today, using a new irc client is the reason i changed my nick :)
11:16:11 <basti_> i see ;)
11:16:34 <lispy_> it's not a bad client, but i can't figure out how to view broadcast messages, like the ones from lilo
11:16:35 <basti_> afaics the usual approach to display "simply an image" in opengl is make a surface, texture this, and put it in perspective
11:17:09 <bourbaki> tessier_: did you check out the site?
11:19:54 * lispy_ installs carbon emacs
11:24:08 <conal> i'd like to know if anyone is interested in contributing to a port of Pan that runs very fast (probably compiling to gnu C/C++) and is multi-platform (probably running on wxHaskell and opengl).
11:27:33 <conal> another neat project would be to compile to java code and use java UI, so Haskell+Pan effects could run in web pages with no download.
11:35:00 <conal> and another angle would be to work on ghc plugins so that ghc's optimizer could catch up with the performance I got out of the generated C/C++ code.  i really believe that's possible, but it hasn't been done.
11:40:41 <pejo> conal, have you read Urban Boquist's phd thesis?
11:42:27 <conal> pejo, no.
11:43:05 <conal> what did you see in it?
11:43:07 <pejo> conal, well worth its read, imho.
11:44:18 <lispy_> conal: sorry, i was on the phone
11:44:39 <lispy_> conal: um, those projects all sound really good, but I know I won't have the time to hack on them seriously
11:44:41 <conal> no problem.
11:45:33 <conal> maybe i'll make a post on the haskell list, identifying the projects.  i'm guessing someone would enjoy one or more of the projects.
11:47:09 <lispy_> conal: indeed
11:47:38 <conal> i can't even recompile the UI part of Pan anymore.  it used some obsolete MS stuff.  and then i misplaced my MS C++ compiler CDs, so i can't compile new effects.  and i really regretted it being windows-only and needing an expensive compiler (for no real benefit).
11:48:22 <lispy_> right
11:49:02 <Heffalump> conal: "another angle would be to work on ghc plugins so that ghc's optimizer could catch up with the performance I got out of the generated C/C++ code" - are you suggesting tuning the optimizer for the specific case of code produced from Pan?
11:50:23 <mflux_> maybe he's hoping it would work on some other cases too
11:50:54 <Heffalump> s/tuning/enhancing/
11:51:00 <mflux_> c-compilers and especially the automated sse-code generators in them also are especially good with certain patterns
11:51:34 <conal> pan uses no domain-specific knowledge, so i think ghc could do as good a job.
11:52:02 <pejo> mflux, sse as in the SIMD stuff in intel processors?
11:52:19 <mflux_> pejo, yes, and as implemented by gcc 4 or (I think) icc
11:52:33 <mflux_> or did gcc4 have that stuff? hmh
11:52:54 <mflux_> "write this loop like this here and it magically converts into sse code"
11:52:57 <Heffalump> isn't pan strict-by-default, though?
11:53:10 <conal> a valuable research project would be to really study *why* Pan works so well without domain knowledge, and just how far one can go.  i've talked with simon pj some about it.  he's skeptical but interested.
11:53:22 <conal> Heffalump: not really.
11:53:28 <conal> though it's a subtle question.
11:53:43 <pejo> mflux, sounds like you're thinking of auto-vectorization. Parts seem to be in gcc 4, more stuff coming for 4.1 maybe.
11:53:49 <mflux_> pejo, yes
11:53:55 <mflux_> btw, is there any progress on the Eager Haskell front?
11:54:13 <Heffalump> I doubt it
11:55:26 <conal> wow -- i'm glad to hear about the auto-vectorization progress.  that should sure help with 2D & 3D graphics
11:58:20 <conal> Heffalump: about strictness, Pan starts out by inlining everything and then extracting (CSE and loop-hoisting).  The inlining is correct because of *non-strict* semantics.  The extraction part is done carefully with respect to strictness and conditionals.
11:59:02 <conal> one challenge in tweaking GHC is that there are no explicit loops in Core.
11:59:18 <Heffalump> can't you make tail loops it'll recognise?
11:59:43 <Heffalump> s/loops/recursion/
12:00:04 <pejo> conal, I haven't read the beginning of the conversation but why is no loops in the core language of ghc a problem?
12:00:13 <conal> Heffalump: possibly.  that's what i'd try.
12:01:05 <Heffalump> pejo: pan compiles things down to explicit loops
12:01:31 <Heffalump> conal: at what point during PAN's compilation process does lazy code become strict? (Since IIRC you output C that is presumably strict)
12:01:48 <conal> pejo: one of the pan optimizations is hoisting expressions out of loops.  that's not so hard, but oege came up with a very neat idea of hoisting an expression out of a multiply-nested loop, yielding an array of lower dimension than the nesting level.
12:02:04 <conal> that's a mouthful, i know.
12:02:48 <conal> it might not be all that hard to recognize the same patterns in GHC Core's tail recursions.  i think no one has tried.
12:04:53 <conal> Heffalump: "at what point during PAN's compilation process does lazy code become strict?": at the end, i guess you could say, ie when the C code is generated.
12:04:55 <basti_> any texmacs users here?
12:05:30 <Heffalump> conal: hmm, so at that point does it just assume (or know) everything is strict, or does it check?
12:05:34 <conal> basti_: i've played a bit with it.  very inspiring idea to me.  i wish it had better emacs-consistency.
12:05:49 <Heffalump> (I'm trying to understand how going via GHC could lead to the same strict code)
12:05:50 <basti_> conal: have you used any of the "session" functionality?
12:06:52 <conal> Heffalump: the pan compiler has a set of primitives and knows which are strict (almost all) and which are not (just if, i think).
12:07:15 <conal> basti_: a little.  i wanted to do computer algebra in it.  not much success.
12:07:17 <Igloo> I sent SimonM a mail yesterday about GHC producing slow code for the equivalent of   for (p = s; p < e && *p != ' '; p++); return p   in Haskell, so the same problem may affect you (and the same solution might help you!)
12:07:57 <basti_> conal: axiom?
12:07:58 <conal> Igloo: what's the solution?
12:08:26 <conal> basti_: i don't think so.  macsyma and maybe one other.
12:08:28 <Igloo> I mean whatever SimonM does to fix it (assuming he does)
12:08:37 <Heffalump> so part of this would be convincing GHC that those primitives were strict, I guess.
12:08:38 <basti_> conal: maxima is somewhat related to axiom isnt it?
12:09:00 <basti_> i recently tried axiom the first time and it's impressive, it just doesnt appear to work well with texmacs
12:09:10 <conal> basti_: i've forgotten.  do you have a url for axiom?
12:09:29 <conal> igloo: got it.
12:09:43 <basti_> http://page.axiom-developer.org/zope/mathaction/FrontPage
12:09:53 <conal> thanks
12:10:16 <pejo> conal, ok, I didn't follow that. What kind of code would produce an array as result of the hoisting?
12:10:57 <Heffalump> the idea is an extension of hoisting loop invariant computations, where you have some constant inside a loop that you pull outside.
12:11:30 <Heffalump> If you have nested loops over x,y and z, and some value that is dependent just on z, you can hoist it outside the entire loop nest and compute an array indexed by z instead.
12:11:42 <Heffalump> (where the nesting is x, then y, then z)
12:12:29 <conal> yep.
12:15:04 <MachinShin> hey all
12:23:34 <musasabi> Has anyone had problems with generating recursive dictionaries with GHC?
12:24:02 <musasabi> I am trying to Show a Bool, but it keeps looping.
12:24:09 <conal> with this generalized hoisting (generating arrays), it seems especially important to recognize loops.  with the simpler version, i don't think loop recognition is necessary at all.
12:30:09 <TheHunter> musasabi, they always works for me as expected.
12:30:16 <pejo> Heffalump, hm. How is the array initialized?
12:31:10 <Heffalump> pejo: by a loop over z
12:31:22 <musasabi> I was too clever, defined both "instance Show a => Sat (ShowD a) where dict = ShowD show" and "instance Sat (ShowD a) => Show a where show x = let (ShowD f) = dict in f x" - works as expected when the second one is removed.
12:31:45 <Heffalump> for (x=0;x<10;x++) for(y=0;y<10;y++) for(z=0;z<10;z++) a[x][y][z] = (50*z+3)*x*y;
12:31:48 <Heffalump> becomes
12:31:59 <pejo> Heffalump, ok. So for the simple case you're trading O(n^3) for O(n) + O(n^2)?
12:32:10 <Itkovian> @seen boegel
12:32:10 <Heffalump> int lifted1[10]; for (z=0;z<10;z++) lifted1[z]=50*z+3; ...
12:32:11 <lambdabot> Last time I saw boegel was when I left #haskell 2 days, 17 hours, 42
12:32:11 <lambdabot> minutes and 29 seconds ago, and I have missed 1 day, 21 hours and 14
12:32:11 <lambdabot> minutes since then.
12:32:12 <pejo> With an addtional cost of O(n) in space?
12:32:23 <Heffalump> it'll still be O(n^3)
12:32:27 <Heffalump> but the constant factor will drop
12:32:36 <Heffalump> and yes, an extra O(n) space
12:32:45 <Heffalump> but if you're generating a O(n^3) array anyway that's ok.
12:32:58 <Heffalump> (often, anyway)
12:36:28 <conal> pejo: an example is when there's a trig operation dependent on one variable and not the other.  reducing from quadratic to linear number of repetitions is a big win.
12:38:57 <conal> but there are limitations.  for instance, in many pan examples, an expression may depend on both x & y but depend only on theta and not rho.  so the choice of rectangular coords defeats the hoisting optimization.
12:40:02 <pejo> Heffalump, ok, I interpreted your "value" a bit too strict. I would naively have said that the RHS in your example was dependent on more than just z, didn't include subexpressions.
12:43:32 <Helmutt> Hello! I've just discovered that there is functional programming :D It seams very fun. I've got knowledge in python, c++ and php, so it's a bit haskell seams a bit odd .... I think A Gentle Indroduction to Haskell is a bit fast and hard to understand, and would like a tutorial that describes the fundamentals in functional programming and haskell. Can anyone help me?
12:44:26 <Itkovian> Helmutt: check out the haskell wiki at http://www.haskell.org/hawiki
12:44:45 <conal> pejo: there's a description of this transformation in http://conal.net/papers/jfp-saig, section 8.3.
12:45:00 <Heffalump> "Yet Another Haskell Tutorial" seems to be frequently recommended for this
12:45:04 <conal> Heffalump: why do you understand this issue so well?
12:45:16 <Heffalump> conal: which issue, the array hoisting thing?
12:45:38 <conal> yes
12:45:56 <Helmutt> Itkovian, thank you!
12:46:06 <Itkovian> Helmutt: np.
12:46:08 <Heffalump> your description jogged my memory of discussing it with Oege when you two were first developing Pan
12:46:21 <Itkovian> you can find loads to read there ...
12:46:22 <ski> Helmutt : this short tut could also possibly be interesting http://www.haskell.org/~pairwise/intro/intro.html
12:46:33 <Heffalump> I also remember lots of discussiosn about the safety of hoisting stuff outside if statements.
12:47:43 <conal> Heffalump: oho.  would you please remind me who you are?  i don't have you in my irc cheat sheet.
12:48:10 <Heffalump> Ganesh Sittampalam
12:48:16 <conal> oh!  ganesh!
12:48:46 <conal> what are you up to now?
12:48:57 <Heffalump> went into industry. Hacking on ARM's C compiler.
12:49:29 <conal> oh.  anything interesting for you on that project?
12:49:56 <Helmutt> Thank you all, now I got loads to read ;)
12:50:23 <Heffalump> hmm. Bits and pieces. Learning about how commercial compilers work, and about backend stuff (I maintain our register allocator). Also found some opportunities to sneak Haskell in for generating large chunks of C code for a library and some other stuff.
12:51:49 <jlouis> Heffalump: oh, register allocators are fun
12:52:09 <jlouis> But also a well researched area
12:52:35 <Heffalump> well, engineering one to do what we need is still an interesting challenge
12:53:13 <jlouis> Let me guess: ARMs quite flexible register layout has something to do with this ;)
12:53:58 <conal> Heffalump:  i'm glad to hear there's some fun in there for you.
12:54:45 <Heffalump> jlouis: hmm, not really. Thumb and our new SIMD stuff provide the most interesting issues, really.
12:57:09 <conal> what's "thumb"?
12:59:04 <Heffalump> ARM is a 32-bit instruction set. Since the ARM architecture is targeted at embedded devices, the company realised in the mid-90s that it would be nice to have a smaller instruction set so that people could save on Flash etc.
12:59:45 <Heffalump> So they designed a 16-bit subset called 'Thumb' - you end up having to use longer instruction sequences for some things, but overall  you save about 30% code size at the cost of some performance.
13:00:43 <Heffalump> we've recently extended the idea to make a hybrid 16-32 bit instruction set called Thumb-2, which will hopefully deliver the same code size benefits without any performance loss compared to full ARM.
13:01:29 <conal> wow.  neat.
13:02:15 <jlouis> Heffalump: ah, cool
13:03:40 <Itkovian> Heffalump: perhaps I can interest you in this http://elis.ugent.be/diablo
13:03:51 <Heffalump> yeah, I know about it. I talked to Koen a couple of weeks ago
13:04:10 <Itkovian> we shrink ARM binaries after their optimizing compiler has been through it.
13:04:16 <Itkovian> ah o
13:04:17 <Itkovian> k
13:04:19 <Itkovian> :-)
13:04:20 <Heffalump> do you work on that project, then?
13:04:26 <Itkovian> and did he convince you?
13:04:34 <Itkovian> Nope, I sit in the office next to them guys
13:04:36 <Heffalump> depends what you mean by 'convince' :-)
13:04:43 <Itkovian> but I like to promote it :-)
13:05:09 <Heffalump> anyway, I'm part of the team that produces said optimizing compiler.
13:05:12 <Itkovian> Imo, Koen can be very persuasive
13:05:15 <Itkovian> ok.
13:05:18 <wagle> if thumb-2 is just as performant, what do you need full arm for?
13:05:27 <Heffalump> wagle: quite likely you won't, in future.
13:05:33 <Heffalump> For now, there's a backwards compatibility issue.
13:05:44 <wagle> ah cool
13:05:58 <Heffalump> but http://www.arm.com/products/CPUs/ARM_Cortex-M3.html is Thumb-2 only, because they wanted to make a *really* small device.
13:10:28 <pejo> conal, (hoisting, I'm a bit slow). From the description of the solution it feels like theres a resemblence with "Program optimization using indexed and recursive data structures" by Liu and Stoller. But I'm not thinking very clearly at the moment.
13:15:10 <wagle> conal: java 1.5 wont install on my macosx 10.3 powerbook.  8-p
13:15:54 * wagle 's been checking out conal's website
13:25:03 <conal> pejo: i'll check it out.  thanks for the ref.
13:27:57 <Helmutt> I think this is weird...
13:29:03 <TheHunter> @foldoc flood
13:29:06 <lambdabot> *** "flood" foldoc "The Free On-line Dictionary of Computing (27 SEP
13:29:06 <lambdabot> 03)"
13:29:06 <lambdabot> flood
13:29:06 <lambdabot>  
13:29:06 <lambdabot>    <chat> On a real-time network (whether at the level of
13:29:06 <lambdabot>    {TCP/IP}, or at the level of, say, {IRC}), to send a huge
13:29:09 <lambdabot>    amount of data to another user (or a group of users, in a
13:29:10 <lambdabot> [27 @more lines]
13:29:15 <conal> pejo: the liu & stoller paper looks very useful, judging just from the abstract.  in graphics & animation, there's a great deal of opportunity for incrementalizing.
13:30:02 <pejo> conal, have you done any more work on declarative event-oriented programming since 2000?
13:30:22 <conal> hmm... i guess not.
13:30:36 <conal> are you interested?
13:31:52 <Helmutt> So... sorry for that... :( Got kicked for flood... but why is that happening?
13:31:52 <wagle> does someone have the url of a paste site for Helmutt ?
13:32:00 <Helmutt> :D
13:32:26 <TheHunter> @paste
13:32:27 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
13:32:35 <Helmutt> I know pastebins.. but I didn't realize the number was so big... saw it my terminal :D
13:33:17 <Helmutt> But why do I get that strange results?
13:33:32 <TheHunter> apparently, freenode is having problems with kiddies, maybe they lowered some treshold.
13:33:45 <TheHunter> in any case, your irc client screwed up.
13:34:45 <TheHunter> Helmutt, we didn't see anything after <Helmutt> I think this is weird...
13:35:02 <Helmutt> No... I don't mean that... :D I mean why do I get that big number ?
13:35:05 <pejo> conal, hm. From the abstract I agree that events play an important role in most software that involves interaction or simulation. Maybe even more software. Faking an initial "start" event would work for non-interactive programs.
13:35:19 <Helmutt> I'll paste it so you can see...
13:37:51 <Helmutt> http://pastebin.com/307407
13:38:18 <TheHunter> ^ is right associative.
13:38:27 <Helmutt> ok?
13:38:58 <wagle> what were you expecting to get?
13:39:17 <xs> Helmutt: that's 2^65536.
13:39:18 <TheHunter> so, 2 ^ 2 ^ 2 ^ 2 = 2 ^ (2 ^ (2 ^ 2))
13:39:51 <Helmutt> Ok... now I understand!
13:39:55 <xs> Helmutt: are you looking for xor?
13:39:59 * TheHunter wonders if xchat can handle long lines
13:41:02 <TheHunter> clearly a gaim bug.
13:41:28 <conal> pejo: i just noticed the animations page for my PPDP 00 paper had broken links.  fixed now: http://conal.net/papers/ppdp00/animations.htm.
13:41:42 <pejo> conal, but you claim that oo languages impose more notational overhead, I'm not sure that's necessary.
13:41:46 <Helmutt> xs, No, I'm not... I'm just testing ghci, trying to learn haskell. I just stumbled over it when I was trying to be evil aginst the computer... :D
13:42:39 <conal> pejo: do you mean oo languages could be notationally more lightweight?
13:42:45 <conal> (and still be oo)
13:44:26 <pejo> conal, http://www.cs.chalmers.se/~nordland/ohaskell/examples.html isn't that heavyweight imho.
13:48:50 <hyrax42> what is shaprs website
13:49:12 <wagle> hyrax42: scannedinavian
13:49:13 <hyrax42> it's something punnish I remember
13:49:17 <hyrax42> ah there we go
13:49:19 <hyrax42> :)
13:49:54 <hyrax42> what the
13:49:58 <hyrax42> he changed it recently?
13:50:46 <wagle> dunno..  what change?
13:51:13 <conal> pejo: it's been a while since i wrote or read that paper, but i think the point i wanted to make about notation is that lambda (with lexical scoping) is much more succinct than explicit class definitions with constructors & instance variables.  a deeper point of the paper is giving precise semantics and compositionality to event programming.
13:51:39 <lispy> is darwinports the recommended way to install ghc?
13:51:50 <pejo> conal, you mention that Fran has continuous time but isn't the focus of that paper. Is it described somewhere?
13:51:52 * lispy still hasn't installed darwin ports....
13:52:04 <lament> i remember trying to install it with fink and it broke
13:52:25 <conal> pejo: i hope so, as continuity in time & space has been a central theme of my work.  looking ....
13:52:32 <lispy> lament: okay, i'll not do that :)
13:52:45 <lament> lispy: perhaps you'll have better luck :)
13:53:12 <lispy> lament: well, i see that the ghc website has a tar ball or says to use darwinports
13:53:22 <lispy> i have yet to install darwinports
13:53:25 <wagle> lispy: when i last looked (weeks ago), darwinports had ghc 6.4, and fink had 6.2
13:53:34 <lispy> oh
13:53:45 <lispy> well, that says darwinports right there
13:54:18 <wagle> darwinports requires more careful reading to install
13:54:30 <beelsebob> I've found that the dp and fink installs are a pain in the arse
13:54:40 <beelsebob> the package installer is usually the best option
13:55:13 <wagle> i thought fink was easy to install.  maybe i was lucky
13:55:31 <lispy> fink is easy
13:55:34 <lispy> i have a book here
13:55:35 <conal> pejo: on http://conal.net/papers, see   "Composing Reactive Animations" and "Functional Reactive Animation".  i don't remember whether those papers draw explicit attention to time continuity.  You'll probably get the idea when you see the time transformations in "Composing".
13:55:38 <beelsebob> I suspect it was easy... it's just a case of leaving your computer for 5 hours
13:55:47 <lispy> it says fink is easy, darwinports is more 'involved'
13:55:47 <beelsebob> (as with all compiler installs)
13:56:10 * lispy needs food anyway
13:56:14 <beelsebob> the package installer certainly works nicely... and you get a nice little shell for ghci
13:56:46 <hyrax42> lispy: I've seen fink being unrecommended
13:56:47 <lispy> i'm coming from a debian background so the need to install anything is a bit foreign to mee
13:57:02 <hyrax42> but same peopel had nothing to say of darwinports
13:57:04 <lispy> hyrax42: i'll keep that in mind
13:57:08 <beelsebob> oh... actually you don't... you get a nice little script that opens terminal and runs ghci
14:02:26 <lispy> this irc client is growing on me, but there are just a few things i wish i could tweak
14:02:35 <beelsebob> what client is it?
14:02:42 <lispy> Colloquy
14:03:01 <beelsebob> yeh... tis what I'm using... I feel exactly the same about it
14:03:18 <beelsebob> it's basically trying to be Adium for IRC, but it doesn't quite get there
14:03:18 <lispy> i wish the styles had more options
14:03:26 <beelsebob> agreed
14:03:47 <beelsebob> I wish you could seperate the user list from the window and customise it
14:04:07 <lispy> ah
14:04:07 <lispy> yeah
14:04:23 <lispy> i wish i had a window for server messages
14:04:37 <lispy> global announcements and so on
14:04:46 <lispy> if that makes any sense...
14:04:49 <beelsebob> you do... window -> Connections
14:04:54 <beelsebob> then click console
14:05:14 <beelsebob> (with the appropriate server selected)
14:05:28 <lispy> hmm...
14:05:39 <lispy> that shows the IRC command for each message
14:05:45 <lispy> not exactly what i meant
14:05:58 <beelsebob> it shows everything the server sends you
14:06:04 <pejo> conal, hm. Your "later 1" is basically "after" in Timber, I think. This is starting to get over my head though, so my comments might be out of line.
14:06:08 <lispy> you know those little blue bubbles that show up?
14:06:18 <lispy> i want a window that has their full text and history
14:06:21 <lispy> and only that
14:06:22 <beelsebob> the growl messages?
14:06:28 <lispy> uh...maybe
14:06:46 <lispy> not sure what growl is
14:06:55 <beelsebob> growl is an alert system
14:07:12 <beelsebob> it displays little overlays when an application wants to poke you with a sharp stick
14:07:32 <beelsebob> http://growl.info/
14:07:46 <lispy> ah
14:07:56 <lispy> that's probably what i mean then
14:08:09 <beelsebob> hmm... there is no way to get it to log them... it's in the notifications prefs
14:08:17 <beelsebob> but there is no log option
14:08:29 <beelsebob> it would indeed be useful
14:09:05 <beelsebob> there's certain ones that you can get at other ways... e.g. if it's someone mentioning a keyword, it puts a tick in the scrollbar where it happened
14:09:55 <lispy> how do you click on them?
14:10:04 <beelsebob> click on them?
14:10:08 <conal> pejo: the "1" in "later 1" is one second (not one time step).  is that the case in Timber.
14:10:11 <lispy> where are these notification settings, i tried to find them with spotlight
14:10:20 <beelsebob> oh... in colloquy
14:10:27 <lispy> beelsebob: hmm...maybe we are looking at different marks in the scroll bar
14:10:40 <beelsebob> Colloquy->Preferences->Notification
14:11:04 <lispy> oh i see, i don't have the words thingy turned on
14:11:17 <lispy> the marks i see in the scroll bar must be something else
14:11:26 <beelsebob> ah... k... I think it'll do it if I mention your name
14:11:29 <beelsebob> lispf
14:11:30 <lispy> a hallucination maybe :)
14:11:33 <beelsebob> lispy even
14:11:42 <beelsebob> I'm guessing that'll leave one
14:11:56 <lispy> nope
14:12:02 <lispy> but maybe i changed the settings
14:12:10 <beelsebob> odd... probably
14:12:25 <beelsebob> it may also still be under the scroll nob
14:12:34 <beelsebob> wait until it scrolls off the top
14:12:52 * lispy waits for it
14:12:55 <beelsebob> hehe
14:13:00 <lispy> it's not moving! :)
14:13:05 <lispy> oh, wait, there it goes...
14:13:11 <beelsebob> are you a new macy then?
14:13:16 <lispy> ya
14:13:20 <lispy> i'm a linux geek
14:13:25 <lispy> learning the ropes
14:13:45 <beelsebob> :) good good... we can always do with semi-intelligent people
14:13:55 <lispy> heh
14:14:06 <lispy> i used to use os 7.5 & 8 back in the day
14:14:13 <lispy> but...that was a different beast
14:14:28 <beelsebob> may I recomend this peice of software: http://www.dusoft.co.uk/defaulter.php
14:14:37 <beelsebob> s/.*/may I tout my wares/
14:15:31 <beelsebob> yeh... I nearly switched to linux when OS 9 came out
14:15:37 <lispy> huh, not sure i would know what to do with it
14:15:41 <pejo> conal, yeah, modulo the prefix. Might be milliseconds or similar.
14:15:45 <beelsebob> fair enough
14:15:46 <beelsebob> :)
14:16:06 <lispy> yeah, OS 9 didn't improve anything really
14:16:21 <lispy> even windows was starting to get ahead
14:16:26 <beelsebob> also of note... SubEthaEdit (if you're not attached vehemontly to vi or emacs)
14:16:35 <beelsebob> and DesktopManager
14:16:40 <lispy> i have DM installed
14:16:46 <lispy> i'm a hardcore emacs user
14:16:59 <lispy> that's the irc client i normall use
14:17:04 <beelsebob> haha
14:17:18 <conal> pejo.  did you bring up the similarity to Timber because you're trying to understand what's different about *declarative* event-oriented programming, as opposed to imperative/OO?
14:17:18 <beelsebob> fair enough... I wont bother pointing out my SEE Haskell mode... http://www.dusoft.co.uk/freebies.php
14:17:22 <pejo> conal, there's an example in "The Semantic Layers of Timber" if you're interested. http://www.csee.ltu.se/userfiles/q19i164h/q19i164h/APLAS.pdf
14:17:23 <beelsebob> oops... just did *g*
14:17:33 <lispy> beelsebob: it's actually very good at irc, because it's designed for text editng!
14:17:46 <beelsebob> hmm... I'm not sure if I see that one
14:18:08 <beelsebob> this is like people that tell me that it's a good file browser/operating system
14:18:20 <beelsebob> I'd rather have my text editor edit text
14:18:27 <lispy> i don't like dired ( the file browser)
14:18:29 <beelsebob> and my IRC client talk on IRC
14:19:35 <lispy> well, the nice thing about using emacs for more than it was meant for, is that you can use all your old tricks and key strokes without learning anything new
14:19:46 <beelsebob> anyway, let us not get into editor wars... 'tis a silly idea
14:19:54 <lispy> true
14:19:58 <pejo> conal, hm. Aren't declarative languages basically either functional or relational languages?
14:20:18 <beelsebob> yeh... this is probably why I don't like it... I know Mac OS key strokes like the back of my hand... I don't know emacs ones
14:20:27 <conal> pejo.  thanks for the reference.  i'll check it out.  i'm generally not too fond of imperative/OO systems, because they're usually much more complicated than declarative ones, denotationally, which is how i think.
14:20:32 <pejo> conal, I'm not sure I understand why you group OO together with imperative languages though.
14:20:38 <lispy> what do i want to use for "office" stuff (mostly dealing with word that people send me)?
14:21:00 <beelsebob> well... TextEdit will open most Word documents
14:21:08 <beelsebob> if that doesn't do it... try pages
14:21:18 <conal> pejo: i don't group them except that OO languages are usually imperative.
14:21:21 <beelsebob> or... OO.o
14:21:35 <beelsebob> but then you're into non-OS X stuff
14:21:37 <lispy> beelsebob: OO = open office?
14:21:43 <beelsebob> yep
14:21:55 <lispy> isn't there like neo office or something?  or j office
14:22:05 <lispy> i think a guy i know at school uses something like that
14:22:15 <beelsebob> not sure... I've never felt the need to look
14:22:20 <beelsebob> Pages is very good
14:22:26 <beelsebob> but costs monef
14:22:27 <conal> (btw, i'm using OO = object oriented, not open office)
14:22:42 <beelsebob> yeh... I noticed, that's why I said OO.o
14:22:44 <pejo> conal, oh, no, neither Timber nor O'Haskell are imperative languages.
14:22:47 <lispy> conal: np, that's why i asked beelsebob which one he meant :)
14:23:06 <conal> :)  funny collision of conversations!
14:23:15 <lispy> yeah
14:23:28 <beelsebob> indeed
14:23:28 <wagle> Timber has mutation of objects
14:24:03 <lispy> irc can get crazy.  I often get into two or three threads within one conversation due to the "read/think/respond" cycle in irc
14:24:24 <beelsebob> tbh... it's rare that it doesn't open in TE... and if it doesn't, I'll usually bounce it to them saying something along the lines of "not everyone uses bloody Microsoft crap, send me a pdf"
14:24:43 <conal> and so is o'haskell, right?  it's "action"-oriented.
14:25:25 <wagle> timber is ohaskell, strict,, and with temporal annotations
14:25:31 <beelsebob> you got any other annoyng gaps in software that need filled then?
14:25:42 <lispy> does o'haskell have reactive objects?
14:25:45 <wagle> i've used timber, but not ohaskell
14:25:51 <lispy> beelsebob: yes
14:25:55 <lispy> beelsebob: latex for example
14:26:03 <beelsebob> fink install tetex
14:26:20 <pejo> wagle, heh, it's a small world.
14:26:39 <lispy> beelsebob: okay, i want to install darwinports first and use it for as much as i can
14:26:59 <lispy> i had to remove fink from my .profile to install darwin (according to my mac os x book)
14:26:59 <beelsebob> k... I don't know if it's in dp... hang on
14:27:10 <beelsebob> btw... dp and fink both live happily on the same system
14:27:23 <beelsebob> eh... it's always worked fine for me
14:27:32 <conal> i meant timber & o'haskell are both imperative, semantically.  so is haskell with the IO monad.
14:27:59 <lispy> beelsebob: right, but they said not to have fink stuff in your path when you install darwinports, otherwise it may find your fink software and try to use/manage it
14:28:24 <beelsebob> interesting... it certainly wont try to manage it
14:28:36 <beelsebob> dp restricts itself to /opt
14:28:36 <conal> so *semantically* one cannot understand such a program without semantics of IO.  that's why i dislike the convenience of IO as a catch-all for "awkward" things.  it's too easy an out.
14:28:45 <beelsebob> fink restricts itself to /sw
14:28:58 <beelsebob> use it... maybe
14:29:02 <beelsebob> but unlikely
14:29:09 <lispy> maybe it will just use it
14:29:15 <lispy> and not manage it
14:29:56 <beelsebob> yeh... similarly... ports install tetex
14:30:09 <lispy> should i install it from cvs?
14:30:15 <beelsebob> dp?
14:30:19 <lispy> is there a lot of breakage with that version?
14:30:20 <lispy> yeah, dp
14:30:31 <beelsebob> won't make any difference after a self update
14:30:59 <beelsebob> the website recommends using cvs
14:33:07 <beelsebob> owt else you're in need of?
14:33:26 <lispy> um...
14:33:36 <lispy> not sure yet
14:33:43 <beelsebob> I was actually considering putting together a comp sci accademic's guide to OS X...
14:34:04 <beelsebob> My supervisor went through all the `best way to install ghc' etc.
14:34:14 <beelsebob> and it's something that should just be in an FAQ
14:34:19 <lispy> yup
14:34:33 <lispy> or automated....
14:34:37 <pejo> conal, ok. You will probably understand the article better than I can explain stuff in the middle of the night over irc.  But yeah, you need the O Monad as described in the paper.
14:34:57 <beelsebob> hmm... yeh... problem is that there's a few choices
14:35:08 <lispy> that's the nice thing about debian, sudo apt-get install foo, and boom, it's on your system with good defaults
14:35:33 <lispy> like fink on steroids i supose
14:35:43 <beelsebob> no... it's fink
14:35:50 <beelsebob> fink is a port of apt-get
14:36:04 <beelsebob> (and if you want a binary, you can use apt-get install)
14:36:05 <lispy> right, but the packages are not maintain very well from what i hear
14:36:22 <beelsebob> yeh... not as well as they could be... much better than dp though
14:36:25 <lispy> but with debian you can download nearly any piece of FOSS
14:36:35 <conal> pejo: that's what makes it unappealing to me.  i want systems/libraries/languages to have as simple as possible (denotational) semantics.  that's what i strive for in my work.
14:36:45 <beelsebob> uhhuh
14:37:21 <wagle> how do you interact with an environment with denotational semantics?
14:37:25 <beelsebob> what I was considering for the OS X FAQ is a slightly more in depth look at the options
14:37:39 <lispy> my battery life readout changes dramatically from one minute to the next, is that normal?
14:37:57 <beelsebob> have you let it fully charge, and then fully discharge?
14:38:00 <beelsebob> (twice{
14:38:10 <lispy> only once so far
14:38:11 <conal> wagle: what kind of environment?
14:38:17 <lispy> is twice recommended?
14:38:24 <beelsebob> do it again... and if it still does it... bitch at apple
14:38:26 <lispy> i'm on my second discharge now
14:38:52 <beelsebob> mine is usually fairly stable until it's very low
14:39:07 <lispy> beelsebob: is sloppy pointer focus, (aka focus follows the mouse) available?
14:39:09 <beelsebob> e.g. for a text editors section, most people will not have heard of SEE or BBEdit, so an explaination of them is probably a good thing
14:39:20 <lispy> ya
14:39:22 <lispy> and Yi
14:39:36 <lispy> haskell academics would be interested in Yi
14:39:36 <beelsebob> Yi?
14:39:50 <lispy> yeah, the editor that dons is writing
14:39:51 <wagle> conal: hmm..  i dont like any of my pat answers..  /me thinks
14:39:52 <lispy> hangn
14:39:52 <beelsebob> not sure... I seem to remember someone mentioning it... but I've never installed it
14:40:30 <beelsebob> interesting
14:40:30 <lispy> http://www.cse.unsw.edu.au/~dons/yi.html
14:40:40 <wagle> conal: something external to the program that isnt under direct control (ugh)
14:40:59 <mwc> okay, I'm probably having a stroke, but what's the difference between quot and div?
14:41:16 <lispy> i have a lot of tweaking to do
14:41:17 <conal> wagle: like user input (eg mouse)?
14:41:20 <beelsebob> haskell scriptability sounds fun
14:41:21 <wagle> @type quot
14:41:27 <lambdabot> quot :: forall a. (Integral a) => a -> a -> a
14:41:33 <lispy> for example i need to install darcs
14:41:40 <lispy> and get a copy of all my rc files on here
14:41:49 <lispy> bash just isn't the same with out a pretty prompt
14:42:02 <beelsebob> hmm... can't remember daw to deal with darcs... probably means it was a fink job
14:42:06 <beelsebob> haha
14:42:10 <mwc> wagle, I mean, they seem to have identical functionality, there's a quot and rem function pair and a div and mod function pair
14:42:28 <wagle> Prelude> (-3) `div` 2
14:42:28 <wagle> -2
14:42:28 <wagle> Prelude> (-3) `quot` 2
14:42:28 <wagle> -1
14:42:31 <beelsebob> Haddock was a pain in the arse... but when is it not?
14:42:42 <beelsebob> there is a reason for me writing Salmon
14:42:51 <conal> wagle: mouse position is a function of (continuous) time.  so model it exactly that way.
14:42:55 <mwc> wagle, ahah, okay, I see now
14:42:57 <mwc> thanks
14:43:32 <wagle> conal: how about a disk drive?
14:43:52 <beelsebob> must get back to writing
14:43:54 <beelsebob> bbl
14:44:07 <conal> wagle: the contents depend on time, right?
14:45:44 * wagle thinks
14:46:13 <lispy> FFW, my estimated remaining battery time changes when i'm compiling or installing things, maybe it's just due to the rate at which i'm using power
14:46:41 * conal values thinking
14:46:52 <wagle> time 1: you look out your window
14:47:04 <wagle> time 2: i hit a baseball
14:47:17 <wagle> time 3: is your window broken?
14:47:39 <lispy> hmm...i can sudo make install, but i can't find the command 'port'
14:48:00 <conal> wagle: can you be more specific about "is" in part 3?
14:48:22 <mwc> I seem to be writing a LOT of functions that are "wrapper-drivers." Is that normal or am I in the wrong headspace?
14:48:35 <wagle> time 3: you look out your window again..  do you see that its broken?
14:48:52 <lstna> lispy: It's a prediictive indicator (current charge / rate of discharge) = time remaining. When the processor works hard, the discharge rate is higher so the time remaining drops.
14:49:10 <conal> shall we assume that the ball passes through the window between time 2 & 3 and the window hasn't been repaired meanwhile?
14:49:18 <lispy> lstna: okay, that makes sense
14:49:28 <lispy> i need /opt/local/bin in my path
14:49:48 <wagle> world 1: time 2.5: baseball breaks window
14:50:03 <Itkovian> lispy:  add it to yr ~/.bashrc
14:50:04 <wagle> world 2: time 2.5: baseball bounces off window
14:50:44 <conal> wagle: i'm confused about your question.  are you asking one question or two?
14:51:06 <lispy> Itkovian: yeah, my .profile doesn't source .bashrc tho, and so it threw me off
14:51:57 <Itkovian> lispy: imo, yr .profile need not source .bashrc, bash does that, you do use bash as yr shell, right?
14:51:58 <conal> wagle: and when you ask is the window broken, do you mean broken *at time 3*?
14:52:32 <lispy> Itkovian: i am using bash, but it wasn't sourceing .bashrc
14:52:55 <beelsebob> I had an interesting thought actually... .bashrc and .profile run... whether they have the x bit set
14:52:59 <wagle> conal: i think i'm saying that you (as observer or interacter) have no way of knowing what the baseball did before you looked.  you dont even know that a baseball was in the vicinity
14:53:03 <beelsebob> in all unix systems
14:53:12 <beelsebob> this is surely a bad thingâ¢
14:53:43 <wagle> conal: sorry, i'm having a number of struggles here
14:53:45 <Itkovian> lispy: hmm, did you start a new shell?
14:53:53 <lispy> using terminal app
14:53:54 <Itkovian> beelsebob: hey, where did you get that tm symbol?
14:54:04 <beelsebob> alt-2
14:54:07 <lispy> i hit command+n
14:54:11 <Itkovian> lispy: hmm, command-n ?
14:54:13 <Itkovian> hmm
14:54:16 <conal> wagle: i'd be happy to help you make your point and/or clarify what it is.
14:54:22 <wagle> conal: environments changes on their own
14:54:24 <beelsebob> itkovian: I've caught it not running before
14:54:26 <Itkovian> ok, do exec bash in a shell
14:54:29 <beelsebob> xterm runs it
14:54:30 <wagle> conal: environments change on their own
14:54:30 <Itkovian> does that change things?
14:54:37 <beelsebob> Terminal doesn't
14:54:56 <conal> wagle: meaning they're not under my control?  or my program's control?
14:55:08 <lispy> Itkovian: yes, in that case it works the way you expected
14:55:29 <wagle> not under your control, not under the programs control.  not apparent unles you look
14:55:45 <Itkovian> ok, then shut terminal app and restart it ...
14:55:56 <lispy> okies
14:56:00 <Itkovian> I'm fairly sure that should do the trick. pretty dumb, but hey ...
14:56:15 <lispy> nope
14:56:20 <conal> wagle: and are those observations some related for you to the question of whether they can be given a simple denotational model (e.g. function of time)?
14:56:21 * Itkovian should go watch AbFab
14:56:24 <Itkovian> dang.
14:56:37 <Itkovian> in that case ... I'm exhausted of advice
14:56:44 <lispy> i'll just source it for now
14:56:47 <lispy> figure it out later
14:56:51 <beelsebob> I think you were right... just source it
14:56:59 <Itkovian> well, I've got it working so ...
14:57:04 <wagle> i want to program robots that interact with environments and with each other via that environment
14:57:06 <beelsebob> oddness
14:57:23 <Itkovian> ah ... I have source ~/.bashrc in my profile ;-)
14:57:35 <lispy> heh
14:57:35 <beelsebob> hmm... 3.1 View annotatins, 3.2 Additinal Views, 3.3 Jam
14:57:43 <wagle> but that interaction seems to be something more than a "function of time"
14:57:45 <beelsebob> perhaps I ought to change section 3.3
14:58:02 <Itkovian> can you try that lispy
14:58:23 <wagle> unless maybe you do some powerset semantics of all the (quantum mechanical) many worlds
14:58:25 <lispy> Itkovian: okay, that's what i had before when you said i shouldn't need to :)
14:58:31 <lispy> Itkovian: but i put it back
14:58:46 <lispy> this bash setup is temporary anywhay
14:58:51 <lispy> s/anywhay/anyway/
14:58:57 <lispy> just until i get darcs setup
14:59:14 <conal> wagle: no i don't want to do that.  but i'm starting to get a hunch about where you're going...
14:59:25 <Itkovian> lispy:  what does darcs have to do with this?
14:59:46 <lispy> it's how i manage my .bashrc
14:59:52 <Itkovian> lispy: I think I thought you put the PATH= stuff in .profile
14:59:57 <lispy> well, my entire $HOME
14:59:59 <conal> when i say the environment can be modeled simply as a function of time, maybe you're taking that statement to mean that i could give you in advance some kind of mathematical description.
15:00:17 <Itkovian> amg, you will put $HOME in darcs?
15:00:30 <lispy> Itkovian: i've had itin $HOME for 6+months
15:00:36 <conal> wagle: that is, a math description that denotes the specific function of time.
15:00:40 <wagle> oops..  coffee shops wants to close early today
15:00:51 <wagle> ..shop..
15:01:06 <Itkovian> grr, what tool to use to plot a barplot with 2 columns indicating two factor levels e.g.
15:01:09 <Itkovian> a 1
15:01:10 <Itkovian> a 2
15:01:12 <wagle> conal: ah..  i see what you are saying
15:01:12 <Itkovian> b 1
15:01:14 <Itkovian> b 2
15:01:20 <pejo> wagle, heh. Out of curiosity - have you read "The Church-Turing Thesis: Breaking the Myth" by Peter Wegner and Dina Goldin?
15:01:24 <Itkovian>  with some value in the third column
15:01:30 <wagle> pejo: no
15:01:37 <lispy> Itkovian: a gnuplot wizard could probably tell you how, but i doubt it's easy
15:01:59 <Itkovian> lispy: yeah, well ... I've got gnuplot lying around somewhere here ...
15:02:32 <Itkovian> lispy: so everything you change in $HOME ends up as a change in darcs, meaning you should record very often?
15:02:41 <Itkovian> to remeber what you changed ...
15:02:55 <lispy> Itkovian: not really, i have a lot of data outside of darcs
15:03:06 <wagle> sorry to started something, then leave in the middle, but they are locking the doors
15:03:10 <lispy> i have a choice set of dot files that areunder darcs control
15:03:17 <Itkovian> ic
15:03:29 <lispy> and then a bunch of my "data" like schoolwork and such
15:03:39 <lispy> but the data is about 400megs total
15:03:42 <lispy> so not bad
15:03:44 <lispy> mostly text files
15:04:38 <lispy> there are a few darcs operations that take forever
15:04:46 <lispy> such as whatsnew
15:04:50 <lispy> or get
15:05:04 <lispy> the get is slow because some of my initial patches are 60 megs
15:05:10 <conal> wagle: catch you later then.  take care.
15:05:14 <lispy> so i usually end up using scp to copy the repo whenever i can
15:05:28 <lispy> and then use push/pull once the repo is in place
15:05:40 <pejo> lispy, could you please use [?.!,] instead of enter as delimiter?
15:06:06 <lispy> pejo: i could try...
15:06:18 <jlouis> shawn_: you alive?
15:06:28 <jlouis> bleh
15:06:37 <jlouis> Where is the shapr, when you need him ;)
15:06:46 <beelsebob> argh... I just pinged the ball out of my earring
15:07:01 <beelsebob> and they're near impossible to get back in
15:07:27 <lispy> pejo: hitting enter often feels more natural to me because of the way i think/talk.  But yeah...I'll see if i can remeber to not hit enter.
15:07:48 * Itkovian pings beelsebob back
15:07:57 <pejo> conal, do you visit this channel frequently?
15:08:10 <jlouis> if you put a ping-pong ball on it, you will look funny
15:08:22 <lispy> can port be told to give feedback?  I have no clue if it's still working without checking top.
15:08:23 <beelsebob> correct
15:08:53 <conal> pejo: spottily.  you?
15:09:09 * beelsebob goes to find pliers
15:09:40 <pejo> conal, heh. No, came in here last night for the first time. It's been interesting to talk to you though, thanks for answering my questions.
15:10:05 <lispy> hmm...top has the highest cpu usage...
15:10:16 <conal> pejo:  my pleasure.  what do you work on?  do you have a home page?
15:11:30 * Itkovian is lost on the wikipedia
15:11:51 <Philippa> big wikis can be real timesinks if you're not careful
15:12:20 <pejo> conal, hm. Tough question. Have a couple of temp jobs now, unix sysadm and some "programming". No home page with any useful content, just stating my email and a link to a speech held by Hamming in 1986.
15:14:35 <conal> pejo: no problem.  nice to have you here.
15:15:14 <pejo> Bedtime for me now though, nite!
15:17:15 <basti_> http://deimos.dynalias.org/axiom-texmacs.gif < texmacs is *cool*
15:20:22 <lispy> basti_: the author is really nice too
15:20:31 <Itkovian> Philippa: especially when they have interesting stuff aboard
15:20:38 <basti_> lispy: who would that be?
15:21:12 * Itkovian is off to bed.
15:21:14 <Itkovian> night all
15:21:21 <basti_> i have a joris van der hoeven
15:21:27 <lispy> basti_: ya, joris
15:21:34 <basti_> and whos that? ;)
15:22:02 <basti_> freenode nickname etc.
15:22:03 <basti_> ;)
15:22:09 <lispy> basti_: no clue, but he/she put me in a change log for pointing out a bug (I was just trying to ask a question about scheme syntax, the whole thing was funny to me)
15:22:39 <basti_> :)
15:23:11 <lispy> my question was roughly, "Hi, was does X do?"
15:23:17 <basti_> heheh
15:23:18 <lispy> s/was/what/
15:23:48 <lispy> the response was something along the lines of, "Oh, thank you for pointing out that bug.  That should have been fixed by now..."
15:24:08 <basti_> well honor to the one who's earned it...
15:24:15 <basti_> (or something similar, is a german saying)
15:26:19 <lispy> i haven't used texmacs for several years (I started hacking the tex myself) but texmacs was good back then.  I bet it's even better these days
15:26:21 <basti_> after all, without you, it'd still be there
15:26:50 <basti_> hmm i did lots of latex (+ programming it)
15:27:11 <basti_> but texmacs + axiom interface + axiom is a whole different realm of ruleness
15:27:42 <basti_> a symbolic calculator with latex output... wow.
15:27:43 <basti_> ;)
15:28:29 <lispy> basti_: partially i find it amusing because i don't know scheme, so how can i point out a bug in the code... :)
15:28:40 <basti_> intuition
15:28:40 <basti_> :)
15:28:44 <lispy> basti_: ah, that does sound nice
15:30:02 <lispy> i fear i will spend the rest of the afternoon installing perl....
15:30:10 <basti_> my.
15:30:12 <basti_> o.0
15:30:15 <basti_> why that.
15:31:38 <lispy> basti_: i want to install darcs and apparently to build darcs perl is needed, so i get to wait for perl to build and install :)
15:31:48 <basti_> oh.
15:32:07 <basti_> and youre using gentoo or fbsd or something that relies on things being built?
15:34:19 <lispy> basti_: darwinports on a mac
15:34:39 <basti_> happy happy joy joy
15:34:54 <lispy> i like it so far
15:35:02 <basti_> :)
15:35:12 <lispy> i have yet to run into anything that makes me pull my hair out :)
15:36:09 <lispy> i just wish all of it was open source
15:36:30 <lispy> using proprietary software makes the penguin cry....
15:37:06 <monochrom> I thought the penguin was just a puppet. :)
15:51:00 <lament> macs rule
15:51:06 <lament> well, somewhat.
15:51:47 <lispy> that may be, but i enjoy free software from a philosophical point of view
15:52:10 <gzl> lispy, perl is built-in
15:52:17 <gzl> why are you building it?
15:52:47 <lispy> gzl: i didn't choose to, it chose to
15:52:55 <lispy> (it being darwinports)
15:52:58 <gzl> how stupid
15:53:26 <lispy> well, perhaps, but now i'm on to building ghc
15:53:31 <lispy> so no worries
15:53:51 <gzl> ok
15:54:04 <gzl> oh, man, I have a ton of stuff to upgrade in fink
15:54:20 * gzl decides to pretend he's up to date
15:54:27 <lispy> heh
16:22:11 * Beelsebob wonders if the Haskeller's guide to OS X should go in the HaWiki
16:22:50 <gzl> link?
16:23:07 <Beelsebob> I was about to write it *g*
16:23:46 <Beelsebob> because I had about the 10th Haskeller switch to OS X and ask the same old questions... it should all be in a neat FAQ for Haskellers switching
16:24:05 <Beelsebob> there's this: http://haskell.org/hawiki/HaskellOnMac
16:24:14 <Beelsebob> but I was thinking something more general
16:24:54 <gzl> sounds like a good idea
16:26:28 <Beelsebob> so is the HaWiki the right place to put a "if you're switching to mac and want: a text edidor, a haskell compiler or three, a LaTeX processor, multiple desktops, some jam, and something that reads all those files people keep giving you, do this:"
16:26:39 <Beelsebob> or should I make a separate page, and link it
16:27:26 <gzl> maybe make it a separate page for now, and then combine them later if people think it's a good idea
16:27:35 <Beelsebob> cool cool
16:28:18 <Beelsebob> I was thinking that it maybe needed a Wiki of it's own... a commonly needed tools for `insert profession here' switching to OS X wiki
16:28:32 <Beelsebob> because large chunks of it are going to be redundant
16:28:48 <gzl> I think an entire wiki for switching to os x is wildly gratuitous
16:28:54 <Beelsebob> haha
16:29:42 <Beelsebob> I don't know... I mean, how many questions can you come up with *just* for Haskellers... how to get ghc on there, how to get nhc, how to get hugs, how to get syntax higlighting for editor XYZ
16:29:53 <Beelsebob> extend that to all functional programmers
16:30:01 <Beelsebob> and then to all computer scientists
16:30:08 <Beelsebob> and then to all scientists....
16:30:24 <Beelsebob> there's gonna be a lot of stuff that no one person can fill in
16:30:37 <Beelsebob> because no one person uses all the speciallist tools
16:32:01 <monochrom> Suppose there are N components.  Then there are about N^2/2 ways to combine two of them, and N^3/3 ways of combining three of them.
16:32:14 <Beelsebob> indeed
16:32:39 <gzl> I think it's completely gratuitous to duplicate material on how to get syntax highlighting in editor XYZ
16:32:40 <monochrom> The "for dummies" way of teaching it is to list all N^2/2 + N^3/3 ways and teach each separately.
16:33:04 <Beelsebob> not really...
16:33:14 <gzl> there are a few basic things that a lot of Haskellers use, and it may be worth having a brief explanation if there's something special you have to do to get it to work on a mac
16:33:19 <monochrom> The civilized way is to teach N+1 things: the N components plus what "combine" entails.
16:33:47 <monochrom> The civilized way is unpopular in this barbarian world.
16:33:50 <Beelsebob> seee... what I'm trying to get at is that *every* person I've known who's switched, has wanted to get stuff up and running fast
16:34:00 <Beelsebob> they want to know... how do I get X11 on there
16:34:08 <Beelsebob> how do I install tetex
16:34:23 <Beelsebob> how do I get the compilers
16:34:48 <Beelsebob> how do I avoid the odd pitfalls of OS X occasionally not compiling stuff that works fine on linux
16:35:16 <Beelsebob> all things they *can* use google for... but not things they should really have to
16:36:02 <Beelsebob> also... there are many things that these people often do not know to google for
16:36:53 <Beelsebob> e.g. I've known a couple of people now use SEE/BBEdit... but would still use <insert editor here> if they hadn't known there were really good alternatives
16:36:55 <monochrom> I was just speaking in reference to some newbie we had a few days ago who whined about sml lacking sample code on the web.  I don't think it applies just as well to the packaging and finishing-touch issues you're describing.
16:37:28 <Beelsebob> it might do
16:37:38 <Beelsebob> I'm not sure what the best way to approach the problem is
16:38:15 <Beelsebob> because there is the potential for as you say having n^p/p pages
16:44:39 <gzl> I think you could do it in a very short amount of space by saying, "The two major package managers for Mac OS X are Fink and Darwinports, and they have most popular Unix software packages. Apple's X11 page has instructions on how to get X11 installed. The Developer Tools can be downloaded here and are available on a DVD that came with your machine."
16:45:13 <gzl> you don't need to put every conceivable piece of information someone might want to know in the wiki
16:45:20 <Beelsebob> true
16:46:11 <lispy> having testimonials of what works in the long run is nice
16:46:56 <Beelsebob> There's a few oddities to deal with too...
16:47:15 <Beelsebob> like... a lot of configure scripts will fail in 10.4
16:47:38 <Beelsebob> because ghc reports it's version as "#pragma some_garbage\n\n604"
16:48:11 <gzl> so you could have a section where people can add comments about stuff like that, but as far as getting basic software up and running, there's not much to explain
16:48:32 <Beelsebob> no... it's the spit and pollish I'm talking about though
16:48:46 <gzl> what spit and polish?
16:48:47 <Beelsebob> and a section where people add comments sounds a lot like a wiki
16:48:55 <gzl> yes, like the one that already exists
16:49:17 <Beelsebob> yeh... but which... because this is not stuff that really fits in the Haskell wiki
16:51:40 <mwc> I'd like to see the Haskell wiki move onto the Wikipedia platform, where it has a seperate talk page
16:52:13 <lispy> wikipedia has a lot of great features
16:52:24 <Beelsebob> indeed...
16:52:27 <gzl> why doesn't it fit? they're issues people have developing haskell on os x
16:53:05 <Beelsebob> yeh... but a lot of questions like `where do I get latex from' have no real relevance to Haskell
16:53:18 <lispy> it's getting to the point where probably better for your wiki-citizens to use wikipedia instead of rolling your own
16:53:27 <gzl> the one sentence about OS X package managers would answer that question
16:53:51 <Beelsebob> but then the question is... is it better to get it from dp, or fink?
16:54:09 <Beelsebob> ... and why
16:54:22 <lispy> the why is actually more improtant
16:54:39 <gzl> one would think the developer would look at both projects and see what suits his tastes
16:54:45 <lispy> man, ghc takes days to compile :)
16:54:54 <Beelsebob> about 6 hours on my iBook
16:55:03 <Beelsebob> this is why I use the package installer
16:55:26 <lispy> i'm using dp to instal it
16:55:40 <lispy> it also installed perl, i think because i took fink out of my path
16:55:40 <Beelsebob> yeh... it'll take a bit... what speed's your machine?
16:55:48 <lispy> 1.2
16:56:01 <lispy> i'm running on battery power at the moment tho, to help calibrate, so that may be slowing it down
16:56:03 <Beelsebob> it'll be about 4 hours then... my mini took about that
16:56:10 <lispy> i did set it to full speed, but you never know
16:56:22 <gzl> I think you're making it sound more complicated than it really is, but do what you want
16:56:27 <wagle> anyone know how to get source for freebsd packages?
16:57:04 <gzl> wagle: you can get it via ports
16:57:41 <lispy> gzl: i think it's less of an issue of complication and more of convience.  It's nice to have a executive summary or pros and cons spelled out for  you.
16:58:31 <gzl> I completely agree, all I'm saying is that the executive summary is not so enormous that it requires its own wiki
16:58:49 <Beelsebob> hehe... certainly not just for Haskellers
16:59:00 <lispy> gzl: definitely
16:59:49 <gzl> and I'm also saying that I think he's making the executive summary sound more complicated than it needs to be. but I could be wrong
17:00:29 <Beelsebob> Not really... I'm wanting to answer the questions that get asked time and again
17:00:42 <Beelsebob> typically I tell people, get fink and dp and start from there
17:01:00 <Beelsebob> but the next question is almost always which do I use
17:01:09 <Beelsebob> and the one following that is almost always why
17:01:40 <gzl> ok. GHC isn't in Fink 0.8, and Fink often lags behind with GHC releases
17:02:06 <Beelsebob> okay... so which should I install latex from?
17:02:45 <gzl> it seems like the simple recommendation would be to use *only* dports for the reason I already gave, and then to say that you should use Fink for packages that aren't in dports
17:02:59 <gzl> rather than to specify a different manager for every single piece of software
17:03:11 <lispy> can safari resume a download if it gets interrupted?
17:03:17 <Beelsebob> it can
17:03:21 <lispy> nice
17:03:41 <Beelsebob> okay then... so how do I install hat?
17:03:48 <lispy> how do i check current ram consumption?
17:04:13 <lispy> os 8 had that thing in the apple menu
17:04:18 <Beelsebob> or any number of different dashboard windows
17:04:28 <wagle> the activity monitor app will do that
17:04:49 <gzl> lispy: top or Applications/Utilities/Activity Monitor
17:05:03 <lispy> thanks, yeah after a heard activity monitor i just used spotlight
17:05:12 <gzl> Beelsebob: what is hat?
17:05:25 <Beelsebob> www.haskell.org/hat
17:05:35 <Beelsebob> it's useful to put activity monitor in your login items... and set it's dock icon to CPU usage
17:05:58 <wagle> haha.  someday i will be able to afford to upgrade all my proprietary software to macosx 10.4
17:06:18 <gzl> Beelsebob: what point are you trying to make?
17:06:26 <wagle> i think that'll be about $600
17:06:32 <lispy> wagle: yeah, the $130 is outrageos
17:06:42 <Beelsebob> gzl: that if you try to build that on OS X you hit little idiosyncracies
17:06:45 <lispy> oh, so more than just the OS upgrade for you, eh?
17:06:53 <Beelsebob> like ghc reporting it's version number oddly
17:07:22 <Beelsebob> and like the C compiler complaining about a couple of things
17:07:25 <lispy> beelsebob: hurry up and write that part of the FAQ before i get there :)
17:07:32 <wagle> ms office, virtual pc, etc
17:07:33 <Beelsebob> haha
17:07:35 <gzl> Beelsebob: so write the FAQ! who is saying no?
17:07:46 <gzl> these are all things that would be useful to have on the wiki
17:07:49 <Beelsebob> no one... it's just more fun talking about it *g*
17:07:53 <gzl> irritating
17:10:13 <gzl> I wonder why Wolfgang hasn't put a 10.4 pkg installer for GHC up yet
17:10:25 <Beelsebob> the 10.3 one works fine
17:10:29 <gzl> oh, it does
17:11:32 <lispy> i wish darwinports told you bit more about the install.  Like how apt tells you everything that needs to be installed and how much space it will need.
17:12:19 <wagle> the dp ports command has a bunch of command line options that i didnt find documentation for..
17:13:03 <gzl> complain to the dports people :)
17:13:10 <gzl> they should fix that
17:15:11 <gzl> lispy: do you use Mail?
17:15:25 <lispy> just started
17:15:35 <mwc> lispy, port deps myPort
17:15:40 <mwc> tells you the dependency
17:16:40 <lispy_> sorry about that
17:16:43 <lispy_> Colloquy was done
17:16:49 <Beelsebob> heh
17:17:01 <Beelsebob> yeh... I've noticed it's not the most stable app ever
17:17:06 <Beelsebob> net splits upset it
17:17:32 <dons> @code
17:17:33 <lambdabot> IOBase.lhs: | ArrayException        ArrayException
17:17:35 <dons> @y0w
17:17:36 <lambdabot> Nobody brings small problems into a laundromat.
17:17:49 <lispy> someone was asking me a question about mail.app
17:19:15 <lstna_> Where is the '=>' in Control.Monad.mapM :: (Monad m) => (a -> m b) -> [a] -> m [b] documented?
17:19:37 <dons> it's syntax
17:19:44 <dons> @where haskell98
17:19:45 <lambdabot> http://haskell.org/onlinereport/
17:20:03 <dons> consult the section on type  classes
17:20:36 <Cale> lstna: basically, it means "implies". "If m is in the typeclass Monad, then a -> m b"
17:20:41 <Cale> er
17:21:01 <Cale> "If m is in the typeclass Monad, then (a -> m b) -> [a] -> m [b]"
17:21:40 <Beelsebob> not quite implies... because if m is not of class monad then it does not type match, as opposed to simply taking any type
17:22:03 <jlouis> @seen shapr
17:22:05 <lambdabot> Last time I saw shapr was when I left #haskell 2 days, 22 hours, 32
17:22:05 <lambdabot> minutes and 23 seconds ago, and I have missed 2 days, 22 hours, 26
17:22:05 <lambdabot> minutes and 15 seconds since then.
17:22:18 <jlouis> ah
17:22:27 <Cale> Beelsebob: I suppose that's true.
17:22:57 <lstna_> dons: I have been through that before and the only reference I can find is in http://haskell.org/onlinereport/syntax-iso.html, where it is listed a 'reserved-op', but that doesn't tell me a great deal.
17:23:00 <dons>  sometimes @seen seems a bit wacked
17:24:07 <dons> section 4, lstna_
17:24:27 <dons> often they use the word 'context' when describing the stuff before the =>
17:25:39 <lispy> for most uses, Cale's explanation should suffice
17:25:53 <lispy> (I've never needed to know more....)
17:26:18 <lispy> but perhaps i'm the man who knew too little...
17:26:57 <lispy> any second now my battery should go dead again
17:27:12 <lstna_> I just find this stuff really hard to read. I think because I do not have a way to verbalise it.
17:27:42 <Cale> http://haskell.org/onlinereport/decls.html 4.1.3
17:27:50 <lispy> i usually ignore the stuff before the => when i'm reading it
17:28:09 <Cale> and 4.1.4
17:28:12 <lispy> it's usually clear from context that you need those things
17:28:43 <Beelsebob> lstna: best to consider a simple example: sort :: Ord a => [a] -> [a]
17:28:52 <Beelsebob> sort takes a list to a list of the same type
17:29:10 <Beelsebob> iff the elemnts in the list are in the Ord class (i.e. they are orderable)
17:30:33 <lstna_> Trouble is, the stuff I'm trying to use has comlicated signatures.
17:30:40 <lstna_> ^p
17:30:44 <Cale> basically, the stuff before the => restricts the allowable types that type variables can take on, insisting that there be instances of certain typeclasses for them, which generally means that certain functionality will be available
17:31:02 <Beelsebob> @type MapM
17:31:04 <lambdabot> bzzt
17:31:10 <Beelsebob> @type mapM
17:31:11 <lstna_> small m
17:31:12 <lambdabot> * -> *) a.
17:31:12 <lambdabot>    (Monad m) =>
17:31:12 <lambdabot>    (a -> m b) -> [a] -> m [b]
17:31:24 <Cale> In the case of Ord, this means that (>), (<=), compare and so on will be available
17:31:26 <lstna_> Yep. That one and
17:31:41 <lstna_> @type Control.Monad.liftM
17:31:43 <lambdabot> * -> *) a1.
17:31:43 <lambdabot>         (Monad m) =>
17:31:43 <lambdabot>         (a1 -> r) -> m a1 -> m r
17:32:05 <Beelsebob> so... if you have a function that takes a value, changes it to a (possibly) new type, and wraps it in a monad... you can apply it accross a list using mapM
17:32:25 <Beelsebob> the (Monad m) => bit merely says... it must wrap it in a monad, not anything else
17:32:37 <juhp> dcoutts_: configuring gtk2hs with --host= does the trick -- I uploaded new packages to Fedora Haskell :)
17:33:54 <Beelsebob> similarly... if you have a function that takes one type to another, you can apply it to a value of that type wrapped in a monad, and get a new result, also wrapped in that monad
17:34:03 <Beelsebob> iff it is indeed a monad that you're wrapping it in
17:35:04 <lispy> it sleeps gracefully
17:35:07 <lispy> that's nice
17:35:09 <lstna_> Thanks for the help guys. Your wordfu descriptions help a lot.
17:35:12 <Beelsebob> yep
17:35:19 <Beelsebob> np lstna
17:36:18 <Beelsebob> lispy: there's two versions of sleep... normal sleep lets apps clean up and do things like end network connections... emergancy sleep (what happens when it looses power suddenly) doesn't do that... so there's potential to loose things like connections
17:37:02 <lispy> Beelsebob: interesting, it appeared to do normal sleep even though it went to sleep because of low battery
17:37:14 <Beelsebob> sometimes it can do that
17:37:34 <Beelsebob> I think that it calls normal sleep... and if it gets really low it does emergancy sleep
17:37:50 <lispy> that's reasonable
17:38:06 <lispy> i love the cube animation for DM
17:38:16 <Beelsebob> heh... yeh, tis cool
17:38:18 <lispy> when i get bored i can just spin around in circles :)
17:38:23 <Beelsebob> haha
17:38:37 <Beelsebob> I've been trying to make it do better animations
17:39:10 <Beelsebob> like... map desktops onto the surface of a cube and transition by zooming out, spinning it round, and zooming in again
17:39:23 <lispy> ah, cool
17:39:23 <Beelsebob> ... could be extended to a hypercube for more desktops
17:40:17 <mwc> Beelsebob, not sure if people will be able to interpret the 4D->2D projection
17:40:28 <mwc> I bet you cause migraines :P
17:40:30 <Beelsebob> heh... 6 cubes I was planning
17:40:39 * Beelsebob arranged at the points of another cube
17:40:47 <mwc> yeah, I thought you were doing a hypercube
17:41:05 <Beelsebob> yeh... 6 cubes is a reasonable 3D projection of a hypercube
17:41:19 <lispy> you could do a rubix cube animation :)
17:41:21 <mwc> is it?
17:41:30 <Beelsebob> lispy: that's a good idea
17:41:34 <Beelsebob> mwc: is it not?
17:41:40 <mwc> I'm more familiar with 2 cubes with corresponding vertices connected
17:41:42 <Beelsebob> no... it isn't
17:41:51 <Beelsebob> yeh... I'm being foolish
17:42:16 <Beelsebob> hang on... no... I think that is actually 6 cubes
17:42:30 <Beelsebob> but most of them are inside out in odd ways
17:42:35 <Beelsebob> so you don't realise it
17:42:41 <mwc> lispy, anyways, in darwinports can't tell you the size an installed package will be because it doesn't use binaries, and it doesn't know what variant you may install
17:43:03 <mwc> Beelsebob, yeah, but "my" way is a straight projection from 4D to 2D
17:43:08 <Beelsebob> true
17:43:20 <Beelsebob> but as you say... migranes would ensue
17:43:22 <mwc> yours is sort of a convuluted system.
17:43:48 <Beelsebob> and... I'd be reasonably happy with n-cubes flying about as the desktop switch *g*
17:44:33 <Beelsebob> or... a rubix cube
17:44:55 * mwc contemplates how to do a diagonal product of a list of functions
17:45:15 <Beelsebob> could be an interesting game... not only do you have to vork... but also, you have to shift your desktops about in such a way it solves the rubix cube
17:45:34 <mwc> uh huh, just what I want to do when I'm working :P
17:45:39 <Beelsebob> hehe
17:46:05 <mwc> that would be like Word requiring you to win a game of solitare to save the document
17:46:26 <Beelsebob> hehe... I never said that it would stop you doing anything
17:46:38 <Beelsebob> just be an interesting way of procrastinating
17:46:42 <mwc> Hahah, I love this doctor
17:47:01 <mwc> "I just caused a seizure by giving the guy a glass of cold water. What's the appropriate thing to do? Do it again!"
17:47:14 <Beelsebob> lol
17:49:21 <wagle> mwc: where is that quote from?
17:49:56 <mwc> wagle, I was watching Untold Stories of the ER
17:50:21 <mwc> he got the chief resident over and did it again, and the guy had another seizure and coded
17:50:48 <tmccort> Learning haskell is taking alittle longer then I thought :(
17:50:55 <Beelsebob> hmm?
17:51:40 <lispy> tmccort: http://norvig.com/21-days.html
17:52:34 <Beelsebob> heh... the best bit about teaching yourself Java in 21 days is that the books that claim to do it are usually so thick that I couldn't read them in 21 days... let alone take it in
17:53:16 <tmccort> I never did read a Java book. Most things you can figure out from reading code.
17:53:27 <Beelsebob> indeed
17:53:38 <tmccort> Haskell... not so much.
17:54:15 <Beelsebob> that's because it's a paradigm shift... I picked haskell up pretty quick... having already known scheme
17:54:30 <mwc> the problem with learning Java in 21 days is that I can't get past day 1 without throwing up my hands in frustration
17:54:31 <Beelsebob> having said that... I did have Colin Runciman teaching me Haskell
17:54:44 <mwc> had the same problem with Python
17:54:47 <Beelsebob> bwahahaha
17:57:21 <tmccort> Beelsebob, what kind of applications is Haskell (function programming in general?) good for?
17:57:37 <jlouis> Compilers
17:57:50 <Beelsebob> I'm not the man to ask in here (relative newbie)... but parsers would be my first answer
17:57:50 <sh10151> Java is the perfect language for Colonel Sanders in the movie "Spaceballs"
17:57:58 <jlouis> Everything manipulating abstract syntax trees really
17:57:59 <sh10151> "Prepare to open a file."
17:58:04 <sh10151> "Preparing to open a file, sir!"
17:58:09 <sh10151> "Open the file."
17:58:14 <sh10151> "Opening the file, sir!"
17:59:11 <Beelsebob> anything that doesn't do much mutation
17:59:16 <jlouis> sh10151: you got it wrong. Most people do not care about the private: Prepare to open a file. Open the File. Write to the file. Oh fuck... what's an exception?
17:59:41 <Beelsebob> heh
17:59:54 <Beelsebob> yeh... C is what you're describing
18:00:05 <mwc> tmccort, I would say that Haskell is  a great language for basically all application-level domains, as long as you don't need direct control over memory or execution or other hardware resources
18:00:07 <Beelsebob> in Java the private only says anything if it went wrong
18:00:17 <Philippa> Beelsebob: given the ST monad or similar, Haskell's fine at mutable stuff
18:00:34 <mwc> tmccort, in practice, Haskell compilers need some more time before that will be true
18:00:48 <Beelsebob> philippa: I would dispute that as soon as something goes wrong
18:01:00 <Beelsebob> because Monads make debugging hell
18:01:45 <tmccort> What makes haskell better then something like ocaml?
18:02:29 <Beelsebob> many things... depending on what you're trying to do
18:02:36 <mwc> haskell is lazy, which allows for a lot of elegant solutions
18:02:54 <Beelsebob> my personal favourite is how easy it is to write hello world: "hello world"
18:04:32 <mwc> I don't see anything in Ocaml that I can't do in C++ with good libraries
18:04:44 <Philippa> Beelsebob: *how* do monads make debugging hell? I've had no problem with it whatsoever
18:04:48 <mwc> if you want GC, use BoehmGC, otherwise it's in boost
18:05:13 <Philippa> mwc: "not write out all the types" :-)
18:05:38 <mwc> Philippa, look at some of Alexendresciu's work, where he implements typelists in C++
18:05:38 <Beelsebob> philippa: you tried answering the question "\.. <<= x = something" lately?
18:06:24 <Beelsebob> they basically stop you using anything like algorithmic debugging, because the questions become impossible to answer
18:06:35 <Philippa> no, they just take more context
18:06:49 <Beelsebob> context that is near impossible to provide
18:07:06 <Philippa> just like in any stateful language...
18:07:13 <Beelsebob> how do you give context to the lambda expression in that bind?
18:07:46 <mwc> Philippa, http://safari.informit.com/?x=1&mode=section&sortKey=title&sortOrder=asc&view=&xmlid=0-201-70431-5/ch03&g=&catid=&s=1&b=1&f=1&t=1&c=1&u=1&r=&o=1&n=1&d=1&p=1&a=0&page=0
18:08:24 <Beelsebob> so you're saying we have to go backwards to a forward stepping debugger?
18:08:41 <Philippa> Just like you would in anything else that deals with mutation, yes
18:08:51 <Philippa> it's a property of mutation that you're complaining about, not one of monads per se
18:09:15 <Beelsebob> no... all monads actually tend to bugger up the debugger
18:09:20 <Philippa> (really, if you're dealing with a monad with a concrete representation you can fill it in yourself - Maybe and List are good examples)
18:09:27 <mwc> Indeed, if anything, haskell keeps that stateful part confined to blocks so that it doesn't spill out into your program
18:09:31 <Beelsebob> simply because of the lambda expressions they generate
18:09:46 <Philippa> "waaa, I can't handle CPS!"
18:09:52 <jlouis> tmccort: to me, Haskell has a number of advantages over ocaml: I prefer monads to an imperative subset in the language. I prefer type classes to objects. I prefer  the Haskell syntax
18:10:19 <Philippa> yes, it's a bit awkward to read. No, it doesn't automagically shaft a debugger that's capable of handling FP in general
18:10:26 <Beelsebob> yes... CPS tends to be an arse too
18:10:41 <Philippa> get a better debugger. HTH HAND
18:10:57 <Beelsebob> philippa: I'm trying to get a better debugger
18:11:10 <Philippa> jlouis: I'll be preferring type classes even more when GHC has boxy types implemented
18:11:10 <Beelsebob> these are not easy things to make a debugger do
18:11:34 <Philippa> it's the laziness causing you problems, not the CPS
18:11:39 <Beelsebob> how do you give context to a random lambda expression that the run-time gerenated for you
18:11:48 <Beelsebob> laziness causes no problems at all
18:11:59 <Philippa> It *DOESN'T HAVE CONTEXT UNTIL IT'S BOUND*, that's how
18:12:01 <jlouis> Further, haskell also has a number of advantages over C++: Fewer things to type (more expressive syntax and type inference especially helps here), typed side effects (monads) and a language with less pitfalls. Last but not least: Garbage collection inside the language from the start (Boehm sucks, trust me)
18:12:28 <jlouis> Philippa: oh, boxy types... Is there a simonpj paper on that?
18:12:42 <dons> unboxy types, at least ;)
18:12:51 <Beelsebob> philippa: precicely... but even when it's bound it's still only a lambda expression that's mapped 3 to 6... how are you meant to know if it was *meant* to map 3 to 6
18:12:55 <Philippa> yep. Impredicativity good. Impredicativity coupled with typeclasses, OTOH, is f*cking marvellous
18:13:05 <jlouis> My brais parses it as sexy types for some odd reason
18:13:17 <jlouis> brain
18:13:19 <Philippa> Beelsebob: you could ask that of /any/ piece of code
18:13:27 <Beelsebob> philippa: precicely
18:13:37 <Beelsebob> that's exactly what algorithmic debugging does
18:13:46 <Philippa> so why the hell are you complaining about it in this specific context?
18:13:49 <Beelsebob> you have an intuition for what sort should do
18:14:08 <Philippa> but you don't necessarily have one for what some subexpression inside whatever sort's bound to should do
18:14:10 <Beelsebob> you don't have an intuition what \.. {3 -> 6} should do
18:14:12 <Philippa> not unless you know what it does
18:14:16 <jlouis> google boxy types... simonpj ... BOOM!
18:14:39 <Beelsebob> but in general... you do have an intuition for all the bits you wrote
18:14:51 <Beelsebob> so you can answer questions about that
18:14:56 <Philippa> not if you came back to it months later
18:15:04 <wagle> jlouis: "boom"?  i get 4 hits for that google
18:15:13 <Beelsebob> if you don't... you didn't comment well enough
18:15:16 <Philippa> not if you've been passing stuff around and forgotten where a function came from
18:15:38 <Philippa> again, quit bitching about the monads and start pointing out what the debugger should be doing
18:15:40 <Beelsebob> the point is that you *can't* have an intuition for what the random lambdas a monad produced should do
18:15:50 <Philippa> they're not fucking random
18:16:11 <Philippa> jesus, learn to desugar do notation and follow the code. Trace some by hand if you have to
18:16:13 <Philippa> they're not random
18:16:24 <Beelsebob> they are from the point of view of someone trying to figure out why the fuck their code is producing 5, not 6
18:16:45 <Philippa> only if that person either doesn't know what they're doing or has failed to keep track of it
18:17:16 <Beelsebob> exactly... if their wondering why their code produced 5, not 6, they *have* failed to keep track of it
18:17:25 <Beelsebob> and they are *trying* to track it
18:17:33 * Philippa sighs
18:17:55 <Beelsebob> that's tho job of a debugger - to show them what the program is doing, and why
18:18:19 <Philippa> Right. Now, think carefully for a moment - why are you having trouble keeping track of what your intermediate values are for?
18:19:04 <Beelsebob> you're not... you're having trouble keeping track of intermediate values that the language hides from you behind the monad
18:20:04 <tessier_> Every time you use a monad god kills a kitten.
18:20:14 <Beelsebob> quite
18:20:44 <Philippa> Beelsebob: context here - do you have this problem with Maybe, List et al, or just IO, ST and the other monads that can't be implemented within haskell?
18:20:56 <jlouis> wagle: you now, officially, has joke destroyer points
18:21:13 <jlouis> impredicative type systems sounds fun
18:21:21 <wagle> jlouis: eh?
18:21:24 <Beelsebob> hmm... I'm not sure I've ever tried any code that uses the List monad in hat, so I'm not sure
18:21:41 <Philippa> Beelsebob: consider that possibly hat is not supporting you sufficiently
18:21:51 <Philippa> consider that this may not be entirely the fault of monads
18:21:58 <jlouis> wagle: never mind ;)
18:22:07 <Beelsebob> philippa: I do... this is why I'm researching how the fuck you get Hat to support monads
18:22:17 <Beelsebob> unfortunately... this is a very hard problem
18:22:43 <Philippa> you went through all that and didn't consider separating the monad problem from the abstract representation problem? Damn
18:23:11 <Beelsebob> no... we've considered that
18:23:13 <jlouis> Wouldn't that imply you had to support the IO Monad implying you need to support state, implying you need to support quite much
18:23:44 <Beelsebob> but unfortunately adding contexts etc breaks pretty much everything except forward tracing
18:24:48 <Beelsebob> if you can come up with a way of easily doing algorithmic debugging, or backwards tracing on a program using State, then I'd love to see it
18:25:30 <lispy> Beelsebob: is this like delta debugging?
18:25:55 <Beelsebob> not really... delta debugging can be used in it though
18:26:06 <lispy> Beelsebob: i read a paper recently about fault localization using a technique called delta debugging and searching in time, iirc
18:26:09 <Beelsebob> ... or at least a convoluted weird version of DD
18:26:19 <wagle> how do you display numbers in hex?
18:26:25 <Beelsebob> yeh... Andreas Zeller?
18:26:28 <shapr> lispy: Is that like darcs trackdown?
18:26:42 <lispy> shapr: hmm...i don't think so
18:26:43 <shapr> jlouis: you screamt?
18:26:50 <Beelsebob> shapr: quite possibly
18:27:01 <Beelsebob> it can be applied to source code repositories
18:27:34 <shapr> Could be related then.
18:27:40 <jlouis> shapr: yeah, Where do articles for TMR go?
18:27:40 <lispy> shapr: it looks at the state differences between two runs of the program on similar test cases.  One is a pass and one is a fail.  Then it uses a variant of binary search to find out where the fault may have come from
18:27:54 <Beelsebob> lispy: delta debugging doesn't easily apply to FP because there's nothing to mutate...  But you can get a lot of info from comparing traces
18:27:56 <shapr> jlouis: On TMRwiki, do you have an account?
18:28:10 <shapr> lispy: Yeah, that's roughly darcs trackdown
18:28:22 <lispy> shapr: ah, cool
18:28:47 <Beelsebob> lispy: In it's general context it uses anything that can be compared and mutated between runs... not just state
18:28:51 <shapr> Except that it rolls back until you find out where the bug was put into the repo
18:28:59 <Beelsebob> e.g. source code revision
18:29:05 <jlouis> shapr: I do not think I have
18:29:11 <jlouis> @fact tmrwiki
18:29:12 <lambdabot> I know nothing about tmrwiki.
18:29:21 * jlouis spanks lambdabot 
18:29:42 <jlouis> google known
18:29:48 <dons> @where tmr
18:29:49 <lambdabot> http://www.haskell.org/tmrwiki/FrontPage
18:29:50 <Beelsebob> shapr: DD will find not only the commit that caused it, but also what lines in the changes caused the bug
18:29:59 <shapr> I want to use that same pattern with hs-plugins, template haskell, and GHC profiling. I want to automate the profile/tune cycle.
18:30:06 <lispy> Beelsebob: haskell has state, even if you can't manipulate it from within the language.  So I think delta debugging could still be used in haskell.  And it may even be more effective because you have more domain knowledge
18:30:09 <dons> #haskell-specific knowledge is recorded with @where, guys.
18:30:16 <shapr> @where dons
18:30:17 <lambdabot> I know nothing about dons.
18:30:21 <dons> @where yi
18:30:22 <lambdabot> http://www.cse.unsw.edu.au/~dons/yi.html
18:30:28 <dons> @where hier
18:30:29 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/index.html
18:30:30 <dons> etc
18:30:31 <lispy> dons: nice
18:30:34 <Beelsebob> lispy: yes... but the only bits that matter are a few function arguments
18:31:01 <Beelsebob> although... you did just give me an idea
18:31:10 <Philippa> function arguments = initial state...
18:31:18 * Beelsebob notes it down for post mini-thesing
18:31:18 <dons> anything you think should be in @where, let me know
18:31:29 <lispy> DD has been show to work great with C, so I find it hard to believe there are languages it wouldn't work great for
18:31:34 <shapr> jlouis: Is JesperAndersen a good account name?
18:31:38 <wagle> jlouis: i didnt understand the joke
18:31:52 <Beelsebob> lispy: so did I... that's why I went off on one to my supervisor about it
18:32:04 <jlouis> shapr: prefect ;)
18:32:07 <lispy> dons: it would be great if we could add things as they come up....
18:32:08 * Beelsebob turns out to be pretty hard to adapt
18:32:09 <Igloo> dons: "do babies come from"
18:32:21 <jlouis> wagle: nevermind, i'll retract my joke destroyer points then
18:32:24 <dons> hehe.
18:32:28 <Philippa> Beelsebob: is there a semi-formal description of DD?
18:32:30 <shapr> @where elmo
18:32:30 <lambdabot> I know nothing about elmo.
18:32:43 <wagle> but but i wanted to understand..  8(
18:32:44 <lispy> Philippa: there are papers about it
18:32:44 <Beelsebob> philippa: look in AADEBUG97
18:32:54 <Beelsebob> Andreas Zeller's paper
18:32:59 <lispy> @where waldo
18:33:01 <lambdabot> I know nothing about waldo.
18:33:06 <shapr> jlouis: ok, create that account - http://www.haskell.org/tmrwiki/UserPreferences
18:33:52 <jlouis> shapr: created
18:34:26 <shapr> I should really have an AuthorsIntro page.
18:34:34 <wagle> "Programs must be written for programs to understand.  Programs should be able to understand themselves."
18:34:41 <Beelsebob> oh wait no... AADEBUG 2000
18:34:53 <lispy> wagle: hehe
18:35:10 <shapr> jlouis: Not much to say about TMR authorship. There's an article template you might want to use. I can't think of anything else.
18:35:21 <lispy> Philippa: there is also a paper about it ICSE '05 iirc
18:35:42 <shapr> Oh, if you don't want everyone to read your article as it's being edited, you can change the ACL in the page.
18:35:51 <Beelsebob> yeh... I'm pointing out that paper because it provides a bit more of a theoretical backing to it
18:36:09 <Beelsebob> as opposed to more recent ones are more show off pieces
18:36:32 <dons> also, most projects already have a @where index. if any are missing, please let me know
18:36:37 <shapr> I'm still working, but as soon as I finish my ArrowsIntro, I'll publish TMR4
18:36:43 <dons> @where drift
18:36:43 <lambdabot> http://repetae.net/john/computer/haskell/DrIFT/
18:36:48 <lispy> @where autoproc
18:36:48 <shapr> @where vital
18:36:49 <lambdabot> I know nothing about vital.
18:36:49 <lambdabot> I know nothing about autoproc.
18:36:50 <jlouis> shapr: okie
18:36:58 <dons> vital? autoproc?
18:37:09 <dons> @where alex
18:37:09 <lispy> the server for autoproc is down...
18:37:10 <lambdabot> http://www.haskell.org/alex/
18:37:12 <Philippa> @where flippi
18:37:12 <shapr> jlouis: If you're really fast, you can get into TMR4 :-)
18:37:13 <lambdabot> http://www.flippac.org/projects/flippi/
18:37:13 <jlouis> shapr: I have a little treatise on treaps and System.Random I ought to publish ;)
18:37:23 <shapr> Sounds spiffy, I look forward to it.
18:37:43 <jlouis> Check, expect there to be something tomorrow when I am more awake than now ;)
18:37:49 <shapr> The earlier you get your content into tmrwiki, the more other tmr authors will have time to stare at it and fix bugs.
18:37:53 <shapr> Ah, excellent.
18:37:56 <lispy> jlouis: treaps?
18:38:09 <jlouis> lispy: Data structure by Aragon and Seidel
18:38:17 <lispy> okay
18:38:21 <jlouis> a blend of a binary search tree and a heap
18:39:27 <jlouis> (read the article ;)
18:39:32 <lispy> geez, still compiling ghc
18:40:37 <wagle> lispy: more than 6 hours?
18:41:08 <lispy> wagle: hmm...i think i'm at about 2-3 hours right now
18:41:14 <lispy> but i didn't really keep track of when i started
18:41:37 <wagle> lispy: you are about half done then..  (at least for my 1GHz g4)
18:41:41 <Beelsebob> lisspy: in the text scrolling past, does it say stage1 or stage2?
18:41:59 <lispy> --->  Building ghc with target all
18:42:07 <Beelsebob> oh... no verbose mode :(
18:42:09 <lispy> that's the most recent line, been there for ages
18:42:29 <dons> Igloo, you pinged a few hours ago?
18:42:35 <wagle> can trace it to see which directory its in
18:42:40 <wagle> 8)
18:42:54 <lispy> i should see how long 'port' has been running
18:42:59 <lispy> maybe ....
18:43:01 <wagle> i think thats what i did
18:43:29 <wagle> ghc is bbiigg
18:43:31 <Igloo> For no good reason, sorry
18:44:00 <dons> ok :)
18:44:39 <lispy> i don't see a process named port
18:45:17 <Beelsebob> yeh... it'll have become sh
18:45:18 <wagle> this is macosx?
18:45:30 <lispy> yeah
18:45:38 <Beelsebob> look in activity monitor with the hierarchical view on
18:45:40 <wagle> whats your load average?
18:45:49 <Beelsebob> and you'll see a big tree of sh and ghc running
18:46:31 <lispy> 18:47  up  9:11, 4 users, load averages: 2.65 2.24 1.97
18:46:41 <Beelsebob> ouch
18:46:45 <wagle> ahh..  so you did sudo the port install command
18:46:46 <Beelsebob> that's gonna be one slow mac
18:47:13 <lispy>  3829  p1  S+     1:19.98 /usr/bin/tclsh /opt/local/bin/port install darcs
18:47:37 <lispy> Beelsebob: why slow?
18:47:37 <wagle> did you sudo it?
18:47:42 <lispy> is it something i did wrong
18:47:45 <Beelsebob> load avg of 2
18:47:47 <Beelsebob> no...
18:47:47 <lispy> wagle: yeah, sudo
18:47:56 <lispy> oh yeah, it is slow
18:48:14 <Beelsebob> just that having 2 processes always wanting the CPU is gonna hurt
18:48:15 <wagle> i keep forgetting to sudo, and it just sits and spins, doing nothing
18:48:16 <lispy> unresponsive at least.  I tried to watch the daily show and it staggered quite a bit :)
18:48:32 <jlouis> top and renice a couple of processes
18:48:34 <lament> 2.65, no kidding.
18:48:59 <lament> 0.00 on this machine :)
18:49:25 <wagle>  18:50:16 up 122 days,  5:32, 27 users,  load average: 0.00, 0.00, 0.00
18:49:55 <lispy> other than cc1 (which is gcc) i have very little eating the processor
18:50:03 <Igloo> Does the load average not reflect things like processes blocking on disk under MacOS X then?
18:50:09 <lispy> there is Colloquy, but i'm sort of using it
18:50:42 <lament> load average of 2 is probably gcc and the window manager?
18:50:51 <lispy> yeah, i think so
18:51:57 <wagle> load average should include processes blocked on io
18:52:14 <shapr> Crap, my server lost power after ~320 days uptime.
18:52:34 <lispy> shapr: time for an OS upgrade anyway :)
18:52:36 * shapr has a temper tantrum
18:52:41 <shapr> Yeah, true that.
18:52:57 <lispy> i move too often to get more than about 180 days uptime
18:53:09 <lispy> if only i had a portable UPS
18:53:32 <shapr> The new kernel crash catcher will allow uptime and kernel upgrading too. You'll need to do a bit of an evil hack to make it work though.
18:56:29 <wagle> i had an ancient laptop running linux sitting plugged in on top of a self, appropriated by someone about 2 days before it was going to wrap jiffies (~459 days) for the second time
18:56:51 <wagle> ups's are portable
18:56:59 <wagle> just unplug them
18:57:08 <lispy> wagle: you're not supposed to do that :)
18:57:16 <wagle> why not?
18:57:19 <lispy> wagle: the designers assume a ground
18:57:46 <lispy> if you pull the plug, you're violating that assumption
18:58:51 <wagle> so carry a planet around with you too
18:59:05 <lispy> wagle: i already do
18:59:10 <lispy> wagle: call it earth :)
18:59:34 <wagle> so you're the one holding it up?
18:59:52 <shapr> Ya know, there's a really funny joke about that in SvÃ¥l HÃ¥let... Great book if you can read Swedish.
19:00:46 <wagle> well, since you brought it up, and i dont read swedish, you will have to explain.  >)
19:03:27 <lispy> wagle: haha, i don't read swedish, it may take me a while to translate the book
19:03:52 <wagle> lispy: i meant shapr
19:04:29 <shapr> It's a cool book, it's a sci-fi novel set in the boonies of Sweden/Finland.
19:04:31 <lispy> wagle: ah
19:04:45 <lispy> ah Finland
19:05:08 <lispy> i've heard it's a big cold, gray place with lots of cell phones and saunas
19:05:19 <wagle> though, i have a bunch of finnish and swedish music i'd like to understand the words of
19:05:26 <lstna_> @type putStrLn
19:05:28 <lambdabot> String -> IO ()
19:05:36 <lispy> @type print
19:05:38 <lambdabot> forall a. (Show a) => a -> IO ()
19:05:58 <shapr> print == putStrLn $ show ?
19:06:06 <lispy> afaik, yes
19:06:19 <wagle> s/$/./
19:06:49 <shapr> close enough for hand grenades and space leaks.
19:06:59 <lispy> lol
19:07:04 <lispy> space leaks?  that's great
19:08:12 <shapr> Well, those sorts of small details can mean the difference between a space leak and an amortized lazy pipeline that blows away any strict code.
19:08:47 <lispy> shapr; is that why they pay you the big bucks?
19:08:49 <wagle> /sw/share/hugs/lib/Prelude.hs:print      = putStrLn . show
19:09:20 <wagle> you had a whitespace leak in your version
19:10:08 <lispy> i love how we call it whitespace, but i usually few it on a black screen...
19:10:19 <lispy> s/few/view/
19:10:38 <wagle> greenspace?
19:11:23 <wagle> but just to be pedantic, my screen was white.  8-p
19:11:37 <lispy> "phosphur doesn't glow here" space :)
19:11:45 <lstna_> This works, "main = print =<< liftM concat getArgs", but can I replace '=<<' with (some combination of) 'return' to achieve the same effect?
19:12:33 <lispy> @code (=<<)
19:12:35 <lambdabot> STRef.hs: modifySTRef :: STRef s a -> (a -> a) -> ST s ()
19:12:41 <wagle> phosphor?  whazzat?
19:13:03 <lispy> wagle: um...i can't spell, but it's the stuff CRT's are made of
19:13:09 <wagle> CRT?
19:13:21 <lispy> cathode ray tube, like the traditional monitors
19:13:29 <lispy> as contrasted with LCDs
19:13:37 <wagle> TFT
19:14:08 * wagle is just bragging about LCD/TFT
19:14:19 * lispy is a big fan of PCMCIA = People Can't Memorize Computer Industry Acronyms
19:14:27 <wagle> i will never buy a crt again
19:14:40 <lispy> wagle: i agree
19:15:12 <wagle> youi cant even throw them away!  (legally, that is)
19:15:27 <lstna_> lispy that @code =<< was my answer?
19:15:40 <lispy> there is a used computer recycling place about 90 minutes from my home, we use that
19:15:42 <mwc> CRT still has better contrast than TFT
19:15:59 <lispy> lstna_: no, but i was hoping it would give the definition of (=<<), but it didn't
19:16:02 <wagle> mwc: blurry pixels
19:16:10 <lstna_> 'K
19:16:14 <mwc> wagle, not on a good one.
19:16:15 <lispy> heat, size and weight come to mind too
19:16:42 <mwc> if you want to compare cheap ends, CRT is still cheaper, and cheap LCDs have crappy refresh and viewing angl;e
19:16:43 <lispy> mwc: i've used some top of the line CRTs, they are blurrier than top of the line LCD
19:16:45 <wagle> mwc: never seen one of those
19:17:06 <mwc> good viewsonic or something? really? I've never noticed a blurry pixel
19:17:10 <mwc> what resolution?
19:17:34 <wagle> 1280 or 1600
19:17:34 <lispy> i used to have a sony trinitron at 16x12
19:17:51 <mwc> yeah, that's what I run, never had that problem
19:18:05 <wagle> i had a 21" sony, and i preferred my 15" lcd at 1400
19:18:16 <mwc> maybe you need to adjust your beam controls or something, or you live in a wierd magnetic field
19:18:18 <wagle> i had a 21" sony at 1600, and i preferred my 15" lcd at 1400
19:18:53 <wagle> i just said i hadnt seen any, not that they didnt exist
19:19:17 <lispy> mwc: after 2 years of use, i couldn't get red and blue to land at the same spot for every pixel
19:19:56 <lispy> or maybe it just took me 2 years to convince myself :)
19:21:39 <mwc> Maybe apple gets better trinitron tubes :P
19:22:34 <lispy> it definitely had the best contrast i've seen on a monitor
19:22:44 <lispy> but it weighed soooo much
19:22:49 <cm> meep
19:22:58 <lispy> and i move often, so it sucked packing it from place to place
19:23:00 <wagle> peem
19:23:12 <lispy> mepe
19:23:14 <wagle> artists are mostly on macs, i think
19:23:28 <mwc> academics too
19:23:39 <cm> i'm seeing plenty of artists on windows every day;)
19:23:40 <lispy> wagle: a lot of HCI researches like them as well
19:24:04 <mwc> The LCD on this powerbook is great, but I don't think it's an iota better than my 1999 Trinitron upstairs
19:24:30 <wagle> my 1999 lcd is great..  8)
19:24:42 <mwc> what bugs me about this LCD is that it has detectable "gridding" in light areas
19:25:13 <mwc> if I look at a white area in this window, for instance, I can clearly see hairlines around each pixel
19:25:43 <wagle> i cant, but i have astigmatism
19:26:11 <lispy> same here on both parts
19:26:42 <mwc> ah, I have better than 20/10 vision with contacts, I have a very "fine grained" retina so says my opthamologist
19:27:22 <wagle> ok, with my 1.5x reading glasses on, i can see the pixels
19:27:22 <lispy> huh, crazy
19:30:26 <mwc> I oughta get LASIK surgery when I can afford it
19:30:53 <wagle> there is a failure rate on that
19:31:41 <lispy> yeah, it's pretty bad actually
19:31:58 <lispy> i looked into it and my doctor talked me out of it by showing me one website
19:32:22 <shapr> I wonder why we don't use holographic outputs, that would be generally better.
19:32:23 * cm wonders whether transforming XSLT by XSLT is a common thing to do
19:33:06 <mwc> lispy, my opthamologist told me my myopia is so dead simple they could nail it, it's a textbook procedure
19:33:13 <lispy> shapr: i used to work for a guy that said when he was in the military they tried to develop a device for that, but their group gave up.
19:33:27 <mwc> no detectable astigmatism, vision stable since age 14, etc.
19:33:37 <cm> hello shapr
19:33:55 <shapr> hi cm
19:33:57 <lispy> mwc: well, if that's the case, then you're lucky.  But the risk associated with the surgery is bad.  Even a successful surgery can have problems in a few years.
19:33:58 <mwc> shapr, you see that "fishbowl 3D display" on slashdot a month ago?
19:34:12 <wagle> i saw something about holographic displays actually working a couple weeks ago
19:34:14 <shapr> Yeah, but I didn't check out the tech behind it.
19:34:27 <shapr> lispy: When was that?
19:34:35 <mwc> lispy, yeah, and these new contacts I got this week are an improvement on my previously awesome ones
19:34:41 <lispy> shapr: gosh, probably the 70s or 80s
19:35:16 <mwc> lispy, so, basically, eternity and a day ago :P
19:35:38 <lispy> mwc: yup, but he wanted to know why we don't use them now :)
19:35:55 <cm> mwc, how bad is your myopia that you want to fix it by a surgery?
19:36:03 <lispy> if the military had the technology for 20 years then we'd be using them now i'm sure :)
19:37:00 <shapr> Aren't decent semiconductor from the last two years or so?
19:37:35 <shapr> Seems to me that holographic lenses work fine with an RGB input setup.
19:37:41 <shapr> er "semiconductor lasers"
19:38:06 <cm> mmm, 3d code :)
19:38:25 <mwc> cm, 20/40
19:38:33 <Pseudonym> Britney Spears would know.
19:38:34 <mwc> It's on the edge of needing glasses to drive
19:38:54 <mwc> I can't wear glasses, and contacts are difficult if I haven't gotten enough sleep (which is most of the time)
19:39:28 <lispy> mwc: why can't you wear glasses?
19:39:57 <mwc> lispy, I can't stand not having peripheral vision, and I'm too much of a hyperkinetic person in general
19:40:11 <lispy> hmm...okay
19:40:13 <mwc> I went though 6 pairs of glasses in the first year, then switched to contacts
19:40:24 <lispy> i'm too lazy to wear contacts
19:40:34 <wagle> "glasses are too expensive"
19:40:36 <wagle> 8)
19:40:37 <mwc> the last pair got run over by my bike when I wiped out on my bike
19:40:38 <lispy> i'll wear the daily ones for 6 months straight if my eyes dont' fall out
19:41:35 <shapr> You can permanently lose your eyes that way.
19:41:41 <mwc> These Acuvue Advance are silicon based, so they're 4 times more permeable to oxygen than the Acuvue 2 lenses
19:41:49 <lispy> i only get glasses very 24 months get i get an eye exam an they find out my astigmatism has worsened :(
19:41:54 <mwc> they had to develop a special coating to make a silicon based material "wet"
19:42:14 <lispy> shapr: yeah, i stopped doing it because i was afraid i would damage my eyes
19:42:27 <mwc> lispy, heh, I don't mean new lenses, I mean I needed a new frame and new lenses :P
19:42:49 <lispy> right, well i get new frames too because they always need replacing too
19:42:50 <shapr> Eyes exchange oxygen directly with the atmosphere, and contact lenses stop that for the area they cover. So the eyes grow blood vessels into the covered areas. Or, bacteria colonize the underside of the lenses and eat your cornea, or ...
19:43:09 <mwc> shapr, no, that's not entirely true, contact lenses have to breath
19:43:25 <mwc> these ones breath well enough to sleep in regularly
19:43:40 <shapr> They don't actually. Gas permeable lenses were developed in the last decade or so.
19:43:49 <shapr> Benjamin Franklin wore contact lenses too.
19:43:58 <mwc> the problem is that contacts increase evaporation rate on the eyes, and protein accumulates on the lens
19:44:17 <mwc> shapr, hahah, lenses from that period were so painful they had to administer heroin with them
19:44:18 <lispy> i have noticed that before
19:44:19 <shapr> Ground his own, I think. But they were made of glass then, with big red blood vessels painted on because all wearers had those.
19:44:58 <lispy> but i haven't worn contacts for about 4 years now
19:45:17 <shapr> I wear contacts for unicycling. And I have extremely cool glasses that I wear otherwise.
19:45:37 <lispy> contacts increase glare, and i couldn't keep my eyes open on a semi-bright day because of ti
19:45:55 <mwc> lispy, contacts increase glare?
19:45:59 <lispy> yes
19:46:03 <mwc> The physicist in me claims old wife tail
19:46:08 <mwc> *tale
19:46:14 <mwc> but I'll listen for an explanation :P
19:46:36 <lispy> i'm not an eye doctor, but i can tell you from personal experience that it's true.
19:46:43 <mwc> shapr, according to wikipedia, the first successful contact lense was constructed in 1887 by a German, Adolf Eugen Fick
19:47:03 <shapr> Check out these cool glasses - http://www.staffanpreutz.com/USA/Preutzproducts.htm
19:47:08 <lispy> i told my doctor about it, and he explained it.  Something about the liquid trapped between the eye and the lens
19:47:32 <shapr> mwc: Weird, I read that Franklin made his own, and that would be a bit earlier.
19:47:53 <shapr> Of course, with my flaky memory, I'd rather trust wikipedia.
19:48:41 <hyraxforytwo> I just threw a pair away
19:48:50 <hyraxforytwo> great when you dodn't have to bother with cleaning them
19:49:18 <mwc> you seen those glasses that dim under bright light? I'd love contacts that did that, since I can't wear sunglasses
19:49:47 <mwc> I was at the beach yesterday, and by the time I got home I was aching from all the squinting
19:50:01 <lispy> yeah, they say that's hard on the eyes too
19:50:32 <shapr> I could go for contacts with a display resolution of 1600x1200
19:50:34 <lispy> i keep losing my sun glasses
19:50:46 <hyraxforytwo> has anyone tried those 24 hour lenses
19:50:51 <hyraxforytwo> or 30 days straight I mean
19:50:53 <hyraxforytwo> where you dont takethem out
19:51:04 <lispy> i know i brought some when i moved here, but i haven't seen them since the day after i moved in
19:51:54 <lispy> man, ghc is still going :)
19:52:02 <gzl> why do you want to compile it from source?
19:52:22 <lispy> just trying to use darwin ports
19:52:33 <lispy> they had darcs, so i thought it would be easy
19:52:36 <hyrax42> is it written in C?
19:52:46 <hyrax42> how does it bootstrap itself
19:52:50 <lispy> hyrax42: it's written in haskell
19:52:53 <hyrax42> or whatever the term is
19:52:57 <hyrax42> oh nvm
19:52:59 <hyrax42> I'm stupid
19:53:05 <hyrax42> or am I
19:53:12 <hyrax42> you need ghc to compile ghc
19:53:19 <monochrom> bootstrap is the right word
19:53:28 <hyrax42> so how do you do it
19:53:32 <lispy> i think ghc generates a special form of C that can be used with gcc to generate enough of ghc to compile itself
19:53:39 <gzl> it generates C--, no?
19:54:15 <lispy> so i *think* the process is to run ghc on the ghc source, then take that source and try to build it on another platform using gcc
19:55:06 <hyrax42> but where do you start...
19:55:23 <hyrax42> some time past it must have had a compliler in another language
19:55:25 <lispy> the chicken and the egg you mean?
19:55:26 <monochrom> "how do I begin? ..."  (Love Story)  :)
19:55:36 <hyrax42> chicken and egg yeah
19:55:45 <monochrom> supermarket
19:55:50 <monochrom> you can buy both :)
19:55:54 <lispy> hyrax42: i'm not sure in the case of ghc, but in general, you just do what makes sense :)
19:55:55 <dons> no magic. standard bootstrap problem.
19:56:08 <hyrax42> :(
19:56:10 <hyrax42> I'm hungry
19:56:25 <hyrax42> chicken and egg wouldn't be too bad right nwo
19:57:35 <lispy> heh
19:57:54 <mwc> lispy I could swear the dp compile takes 6 hours
19:57:59 <lispy> i like the thai word for chicken and egg, i can't remember them now but it's very logical.
19:57:59 <mwc> but it builds a pile of libraries as well
19:58:10 <lispy> mwc: sure, it probably does :)
19:58:25 <lispy> chai and gai iiirc
19:58:26 <dons> mwc, maybe you have a slow machine...
19:58:42 <dons> ghc can be built in ~20mins or so with the right compile flags
19:58:50 <lispy> wow
19:58:51 <lispy> really?
19:59:03 <dons> sure. read mk/build.mk and friends
19:59:04 <lispy> how fast of a machine?  with a 15K scsi?
19:59:29 <dons> nah. normal desktop. 2.6Ghz P4
19:59:38 <lispy> dons: it seems easier to just let darwinports do it while i sit back and complain :)
19:59:46 <dons> hehe
19:59:54 <lispy> okay, well that's quite a bit faster processor-wise
20:00:01 <gzl> lispy: if you're new to OS X, try out ICeCoffEE
20:00:04 <lispy> 1.2 Ghz here on a laptop
20:00:08 <mwc> dons, how so? dports builds from source, so no haskell-build
20:00:12 <lispy> ICeCoffEE?
20:00:14 <mwc> I've got a 1.5 Ghz G4 myself
20:00:14 <gzl> yeah
20:00:28 <gzl> it's extremely useful
20:01:04 <mwc> gzl, nah, the killer OS X app is Quicksilver
20:01:34 <hyrax42> so I've heard
20:01:41 <gzl> I like LaunchBar
20:02:12 <lispy> quicksilver?
20:02:19 <gzl> yes
20:02:23 <gzl> you should definitely try it out
20:02:32 <gzl> though I still like LaunchBar
20:02:35 <gzl> both the same kind of app
20:03:23 <lispy> uh, icecoffee lets me click on links.  I fail to see why it's even worth downloading...(no offense, it just sounds silly)
20:06:11 <gzl> lispy: if you use a command line irc client, it lets you click to open those links
20:06:40 <gzl> that's useful
20:06:45 <lispy> maybe
20:07:02 <gzl> normally, on irc, you'd have to copy and paste
20:07:53 <lispy> i usually do that anyway because of the way clicking on links behaves
20:08:01 <lispy> (even in gaim and things that hyperlink)
20:08:13 <gzl> *shrug*
20:08:32 <lispy> i like to reuse my tabs
20:08:51 <lispy> most of those launcher things either open a new window or a new tab or reuse a window that you weren't done with
20:09:43 <lispy> "[Ed. Note: Actually, Roman mythological texts are remarkably silent on whether Mercury could be summoned with a key stroke..." hahaha
20:09:53 <lispy> that's from the quicksilver description i found
20:13:59 <lispy> ah, quicksilver and launchbar are both pay to play
20:14:03 <lispy> that's no fun
20:16:05 <gzl> how the heck do you install plugins in QuickSilver b40?
20:20:24 <hyrax42> quicksiler is freeware
20:20:29 <hyrax42> or was last I saw
20:20:51 <gzl> it is
20:20:54 <hyrax42> unless you have an aversion to non-Free
20:22:03 <lispy> hyrax42: i do have an aversion to non-Free, but the website also said that it was a trial that would expire
20:22:15 <hyrax42> huh?
20:22:16 <hyrax42> weird
20:22:18 <lispy> i was very wary of mac os because so much of it is non-free
20:22:56 <hyrax42> http://quicksilver.blacktree.com/
20:23:02 <hyrax42> I see no such message there?
20:23:08 <hyrax42> I clikc the arrow it starts downloading
20:23:27 <hyrax42> well basically all of it is non-free
20:23:50 <hyrax42> pretty much everything that distinguishes it from random OS x (har I made a funny)
20:23:53 <lispy> huh, that's a different download page than i found
20:24:01 <lispy> i ended up at cnet i think
20:24:05 <hyrax42> ick
20:24:11 <hyrax42> I avoid those places like the plague
20:24:17 <hyrax42> always try to get it at the source
20:24:23 <lispy> it's what came up when i googled :(
20:24:43 <hyrax42> your google sucks
20:24:44 <hyrax42> http://www.google.com/search?q=quicksilver&sourceid=opera&num=0&ie=utf-8&oe=utf-8
20:24:45 <hyrax42> second link
20:24:49 <hyrax42> you have surf clothing
20:24:56 <hyrax42> and then...
20:25:20 <lispy> either way, i'm not going to install it
20:25:27 <lispy> i haven't had any problems running things
20:27:13 <lispy> i tend to keep all the programs i use 80% of the time running on different dekstops
20:27:54 * Speck wonders when the next tmr is going to be out
20:27:56 <lispy> although, how would i take a screen cap real quick?
20:28:13 <hyrax42> some command + shift + something combination
20:28:14 <lispy> Speck: shapr just recruited someone today :)
20:28:32 <hyrax42> or hop into applications and open grab
20:28:39 <hyrax42> probably under utilities
20:28:43 <lispy> grab?
20:28:51 <hyrax42> but some key combination captures to desktop
20:28:58 <hyrax42> screen capture or something like that
20:29:50 <gzl> cmd shift 3
20:29:55 <mwc_> lispy, shift-command-4, then hit space, and click on the window
20:29:58 <hyrax42> and 4 is current windo
20:30:05 <mwc_> or shift-command-4 and select a region
20:30:09 <hyrax42> or something
20:30:19 <lispy> actually, grab is really nice because i can crop
20:30:22 <gzl> command-shift-3 is whole screen, command-shift-4 is select region, command-shift-4-space is select object
20:30:24 <mwc_> hyrax42, yeah, space afterwards to go from rectangle to window mode
20:30:38 <hyrax42> grab is always a giveaway though
20:30:42 <hyrax42> because your menu bar says grab
20:30:46 * mwc_ listens to the new James LaBrie album
20:30:47 <hyrax42> so unprofessional :p
20:30:59 <mwc_> hyrax42, there's always timed grab :P
20:31:06 <gzl> Grab is lame
20:31:20 <hyrax42> *shrug*
20:32:10 <hyrax42> what number is next issue of tmr?
20:32:50 <hyrax42> hrmm
20:32:54 <hyrax42> topic would point to 4
20:32:56 <mwc> dunno, shapr probably has 6 or 7 in various stages of dragt, I'd wager
20:34:48 <lispy> gzl: it was perfect for taking a cap of part of a window, then i opened the tiff in preview and saved an png an threw it on my web server
20:35:35 <lispy> if my laundry finishes before ghc i'll be sad :)
20:36:07 <gzl> it works, but if you had used cmd-shift-4 you could have selected that region of the window and gotten a png directly
20:37:49 <gzl> also, if you hold down control with the key combo, it will grab the screenshot directly to the clipboard so you can paste it into something (if you care)
20:40:22 <lispy> gzl: that's cool and good to know.  I had already run grab and done the cap before anyone remembered the combo...
20:42:31 <gzl> yeah, it's no big deal, just for future reference
20:43:36 <lispy> yeah
20:43:43 <lispy> and usually i want the whole winodw
20:44:06 <gzl> yeah, then use cmd-shift-4 and hit spacebar
20:50:26 * juhp hopes there will be a haddock release before long...
20:50:57 <lispy> does haddock fill a different role than literate haskell?
20:51:08 <lispy> or are they both means to the same ends?
20:51:25 <dons> different role, really
20:51:37 <dons> haddock is for documenting library interfaces
20:51:44 <juhp> right
20:54:27 <lispy> can they be used together?
20:54:55 <dons> hmm. I would think so.
20:55:08 <dons> as long as you strip out the literate comments first
20:56:05 <dons> bit of a mess. no one does it
20:58:22 <dons> oh, though there's a teensy bit of it in the libraries
21:00:34 <lispy> huh, okay
21:00:37 <lispy> just wondering
21:00:45 <lispy> i don't yet use any of those tools
21:01:12 <dons> if you're writing a library, using haddock is a good idea
21:01:18 <dons> Yi uses it, btw.
21:01:56 <juhp> lispy: docs for Haskell libraries that come with ghc and hugs are generated with haddock
21:02:11 <juhp> also gtk2hs and wxhaskell - lots of others
21:02:23 <lispy> yeah it's a good idea
21:02:33 <lispy> i just don't want to learn how mostly
21:02:39 <lispy> i have enough trouble writing the code :)
21:05:04 <gzl> literate haskell is neat
21:05:41 <lispy> and i guess with literate haskell i already use latex
21:05:44 <lispy> so it can't be that bad
21:07:46 <hyrax42> what's literate haskel
21:07:46 <hyrax42> l
21:09:05 <gzl> http://www.haskell.org/onlinereport/literate.html
21:09:16 <Pseudonym> Does anyone else have the same reaction to the thought of watermelon flavoured herbal tea as I do?
21:09:47 <gzl> I should hope so
21:09:57 <lispy> haha
21:09:58 <Pseudonym> Thought so.
21:10:06 <Pseudonym> They were handing some out at the railway station this morning.
21:10:29 <lispy> hyrax42: you can put latex in instead of normal commets.  or your code can be the comments and the latex is the default
21:10:52 <lispy> hyrax42: it makes the source code documentation better
21:10:54 <gzl> or you could just have comments and code, no need for latex
21:10:55 <hyrax42> hmm
21:10:59 <Pseudonym> And damn it if it doesn't taste just like you'd expect.
21:11:01 <gzl> where comments are the default
21:11:09 <lispy> gzl: ah, okay
21:11:15 <gzl> watermelon juice is quite nice though
21:11:36 <Pseudonym> Yes, I agree.
21:11:46 <Pseudonym> But watermelon, in my mind, should be cold.
21:11:52 <gzl> yeah, I agree
21:12:50 <dons> oh, hot watermelon!
21:12:57 <dons> blargh
21:13:06 <Pseudonym> Yes, hot watermelon.
21:13:14 <Pseudonym> Not that this actually has any watermelon IN it.
21:13:24 <dons> no, you wouldn't expect so
21:13:45 <hyrax42> in the latex style, can you have mulitple comment blocks?
21:13:47 <hyrax42> I mean
21:13:49 <hyrax42> code
21:13:56 <hyrax42> from that page makes it sound like just the one
21:15:08 <lispy> http://quizfarm.com/test.php?q_id=34136
21:15:12 <lispy> heh, way OT
21:16:47 <gzl> hyrax42: you just go into \begin{code} \end{code} when you want code
21:16:56 <gzl> as one would expect
21:56:30 <mikehammad> hi, is anyone familiar with "Associated Types with Class"
21:57:49 <monochrom> I have only heard of "associating types with classes"
21:58:58 <mikehammad> i think it's the same thing.  i'm just thinking of the feature where one can put data declarations in a class
21:59:22 <stefanw> mikehammad: yes
21:59:23 <mikehammad> i'm curious whether it's in GHC yet, and if so, how to access it
21:59:24 <lispy> omg! darcs is building!!!
21:59:49 <lispy> i think usually extensions are turned on with --f-allow-ext
21:59:55 <lispy> or something close to that
22:00:05 <lispy> ah, it finished
22:00:24 <stefanw> mikehammad: as far as I know: it's in some branch in GHC but it's not yet finished
22:01:23 <dons> maybe in ghc-assoc-branch
22:01:34 <mikehammad> yea it seems to be missing atm
22:01:56 <mikehammad> is it tricky to build a CVS version?
22:02:17 <lispy> mikehammad: i don't think so
22:02:24 <lispy> mikehammad: but it can take a long time
22:02:39 <stefanw> mikehammad: what do you wanna do?
22:03:17 <mikehammad> i'm writing an array library that could use associated types
22:04:50 <mikehammad> it's probably not crucial to have.  but it would make the code more elegant
22:06:55 <dons> ah, but depending on a cvs-only fork of ghc is probably not the best for making your code easy to use ;)
22:07:28 <dons> hopefully the branch will get merged in to the head in the next few months
22:07:57 <Speck> associated t ypes... I think I read that in the Generic Haskell paper...
22:08:24 <mikehammad> hehe exactly
22:37:49 <ski> morn' #haskell
22:39:35 <lstna> morning ski
22:40:08 <ski> hiya
22:40:58 <lstna> Thanks in no small part to your patience, some bits of this stuff are beginning to sink in.
22:43:46 <lispy> lstna: congrats
22:44:39 <lispy> why do all the good compilers take years to compile?
22:44:46 <lispy> ghc and now sbcl :)
22:45:04 <lstna> Is that /still/ running?
22:45:12 <lispy> no, ghc finished
22:45:20 <lispy> but it did take a long time
22:45:24 <lispy> this time i'm running time
22:46:15 <lstna> "running time" as in timethis cmd?
22:59:47 <lispy> lstna: total run time, i'm using the unix command 'time'
23:00:34 <lstna> Right. Basically what I meant.
23:02:52 <lstna> I've been reading through MonadsAsContainers, and everything was going along pretty good until I encountered the sentence
23:02:59 <lstna> " it's taking a container xs, and a function f from the values in it to new containers, and producing a new container which at index k, holds the result of looking up the value at k in xs, and then applying f to it to get a new container, and finally looking up the value in that container at k."
23:03:11 <lstna> That's an aweful lot of 'k's
23:04:26 <ski> hm
23:07:48 <ski> that seems to only apply to Reader-like monads
23:07:53 <ski> not e.g list monad
23:09:34 <lstna> The page acknowledges that the analogy doesn't hold perfectly for all types of monad.
23:10:20 <ski> i think that detailed analogy is pretty worng for non-Reader-like things
23:11:28 <ski> also it's (relative) complexity possibly makes people think monads are more complicated/hard than they are
23:11:59 <ski> i can follow those 'k', but i can imagine they can maybe be intimidating
23:13:27 <lstna> I think I follow it (the 'k's), but the prose it quite dense. A few diagrams would help, but wikis are generally good at those.
23:15:36 <lstna> My goal is to write my own monad that (I think) will be a cross between an IO monad and a State monad. In as much as, it needs to be able to (incrementally) read information from the filesystem (directory entries), but also retain the entries in an indexable (readonly) fashion.
23:16:10 <lstna> (I know I have a long way to go!)
23:16:10 <ski> mhm
23:20:46 <lstna> There is a world of derision behind those 3 small chars :)
23:21:56 <ski> 3 chars ?
23:23:00 <lstna> your "mhm"
23:31:40 <ski> aha
23:31:57 <ski> no derision
23:32:37 <ski> what you said could possibly well work (depending on exactly what you want)
23:33:59 <Speck> Oh my god. Crickets in the basement.
23:34:03 <Speck> Hundreds of them.
23:34:13 <lstna> Just joking. I read the 'mhm' as the sound one of my old instructors used to make when you were explaining stuff that you hadn't really prep'd properly: "Mmm Hmmm"
23:37:06 * ski chuckles some
23:37:38 <lstna> I took a real problem that requires solving and used it as incentive to learn. It's basically the POSIX readdir/rewinddir/seekdir et al.
23:54:55 <Itkovian> meuning
