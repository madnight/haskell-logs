00:08:14 <Speck> the yi paper _is_ cool!
00:09:57 <dons> thanks Speck! I hope the HW committee thinks so too :}
00:10:17 <Speck> I got halfway through it once and kind of forgot about it
00:10:43 <Speck> gotta start yi-hacking...
00:10:59 <dons> what editor do you use normally?
00:11:05 <Speck> vim
00:11:18 <dons> oh, cool! well, yi's vim mode is pretty good, I'd say.
00:11:36 <dons> but we need some of the things like syntax hl
00:11:39 <Speck> I'm not for holy wars, it's just the first and only thing I learned.
00:11:42 <dons> I use vim too.
00:12:09 <dons> no, I was just going to suggest you write a binding for your current editor, if it wasn't one of the ones we already have :)
00:12:17 <Speck> ah I see
00:12:31 <dons> Yi is about compromise. there's no wars -- you can have any editor interface your want.
00:12:48 <Speck> the paper talks a lot about keybindings, but what about interfaces?
00:12:54 <dons> guis?
00:13:06 <Speck> guis, curses, holograms, etc.
00:13:20 <dons> yeah, more work to come here.
00:13:35 <dons> there's a sketch of a gui typeclass that should work with wxHaskell, gtk2hs and ncurses
00:13:53 <Speck> a typeclass over another edsl?
00:14:02 <Speck> or extending the current edsl
00:14:19 <dons> no, I don't have  a nice dsl for writing guis yet. but there are other out there, I think
00:14:36 <dons> that would be a nice thing to do, in fact
00:14:51 <Speck> where would be a good place in the code to start poking around
00:15:21 <dons> maybe play around with the vim mode a bit, and add any features you think are missing to the keymap.
00:15:41 <dons> then, if you find harder issues, we can add new core code to implement them.
00:16:00 <dons> or if you're really ambitious, we could discuss a new gui
00:16:15 <Speck> well I'm kind of interested in hIDE 2
00:16:23 <dons> ah, right!
00:16:53 <dons> we need a plan for how to use Yi as the basis of hIDE 2
00:17:01 <Speck> and from what I've seen, it looks a lot like yi could become hIDE 2, rather than anything being built on top of it
00:17:09 <dons> I think it probably should be the basis.
00:17:31 <dons> oh, on its own. yeah - that was really my plan (before  I thought about hIDE 2)
00:17:42 <Speck> or rather, hIDE 2 would be yi packaged with a bunch of modules
00:17:54 <dons> its extensible, its in haskell. what else do we need! ;)
00:17:56 <dons> yeah. right.
00:19:39 <Speck> are you ultimately interested in making something generic like eclipse (but obviously better :P)
00:19:58 <dons> yep.
00:20:17 <Speck> that sounds about right
00:20:21 <dons> based on extensibility in Haskell
00:20:33 <Speck> I'd have never pinned haskell as extensible
00:20:38 <Speck> well, dynamic
00:20:42 <Speck> extensible definitely
00:21:03 <dons> I think noone really thought of Haskell as dynamically extensible maybe 3 years ago.
00:21:08 <dons> but we're getting there.
00:21:26 <dons> the mental barrier to overcome was that we didn't need to use dynamic typing
00:21:47 <dons> there's more work to be done though.
00:21:58 <dons> extensible data types would be nice, for one.
00:22:16 <dons> though the hotswapping scheme in the yi paper makes them basically unnec.
00:22:51 <Speck> I imagine many sorts of code generation would be hindered by a compile-time-only type system
00:23:07 <dons> "code generation"?
00:23:42 <dons> maybe the point is that we only need a tiny bit of dynamic typing -- to check module interfaces -- for dynamic extensibility
00:23:50 <dons> we don't need an entire dynamic type system per se
00:24:03 <dons> as 99.9% of the app can be checked statically, and should be done so
00:24:05 <Speck> there was something on LtU about that
00:24:43 <Speck> at the bottome of this: http://lambda-the-ultimate.org/node/view/796
00:26:53 <dons> interesting
00:27:09 <dons> @code
00:27:10 <lambdabot> Monoid.hs: mempty = (mempty, mempty, mempty)
00:27:21 <dons> really? that's an interesting decl
00:27:53 <dons> oh, it's in an instance
00:27:57 <dons> instance (Monoid a, Monoid b, Monoid c) => Monoid (a,b,c) where
00:27:58 <dons> 	mempty = (mempty, mempty, mempty)
00:28:18 <Speck> I haven't tackled monoids yet
00:28:27 <dons> neither.
00:28:42 <dons> in fact, I don't think I've seen anyone use them :}
00:28:52 <Speck> iirc, Monad.Writer uses them
00:29:23 <ski> indeed
00:29:31 <ski> monoids are simple
00:29:50 <dons> in Arrow.hs
00:30:08 <Speck> maybe to you, but I don't have a degree in funnywordology
00:30:15 <ski> Integer with mempty = 0 and the mcombine (or how it's called) = (+)
00:30:32 <dons> and in lots of the mtl
00:30:44 <ski> that this is a monoid just means that  0 + x = 0  and x + 0 = x  and (x + y) + z = x + (y + z)
00:30:52 <dons> yeah, seem fairly simple.
00:31:09 <Speck> 0 + x != x ?
00:31:18 <ski> sorry
00:31:21 <ski> 0 + x = x
00:31:23 <ski> of course
00:31:26 <ski> typo :)
00:31:29 <dons> magic monoids!
00:31:38 <ski> also, Integer with mempty = 1 and mcombine = (*)  is also a monoid
00:31:38 <dons> maybe we should have  moinmoinoids
00:31:59 <ski> sice  1 * x = x     x * 1 = x     (x * y) * z = x * (y * z)
00:32:03 <ski> since*
00:32:10 <ski> heh
00:32:11 <Speck> I see... what is the utility?
00:32:22 <ski> in the writer monad
00:32:30 <ski> you have (iirc)
00:32:35 <dons> in lots  of the mtl, in fact.
00:32:50 <ski> tell :: (Monoid w) => w -> Writer w ()
00:33:54 <ski> and, if you do {tell "apa "; tell "struts"} you need to combine the strings "apa " and "struts",  this is done with the mcombine of the Monoid
00:34:13 <Speck> mcombine for lists would be... (++) ?
00:34:24 <ski> in this case, the monoid is the type [Char] with mempty = "" and combine = (++)
00:34:27 <ski> exactly ! :)
00:34:37 <dons> instance Monoid [a] where
00:34:37 <dons> 	mempty  = []
00:34:37 <dons> 	mappend = (++)
00:34:42 <ski> ok
00:34:47 <ski> mappend was the name
00:34:55 <dons> ooh:
00:34:55 <dons> instance Monoid (a -> a) where
00:34:55 <dons>         mempty  = id
00:34:56 <dons>         mappend = (.)
00:34:59 <ski> :)
00:35:08 <Speck> I think I like mcombine more... mappend makes me think of map
00:35:11 <ski> e.g. ShowS is an instance of that
00:35:21 <ski> type ShowS = String -> String
00:35:29 <ski> shows :: Show a => a -> ShowS
00:35:35 <dons> we also have instance (Ord k) => Monoid (Map k v)
00:35:36 <ski> showsPrec :: Show a => Int -> a -> ShowS
00:36:05 <Speck> I don't understand the workings of the show instance, but I haven't visited it really since my first pass at learning haskell... a month ago I guess
00:36:25 <Speck> I know there's some hackish stuff in there for dealing with lists
00:36:32 <Speck> or strings, specifically
00:36:35 <ski> yes
00:36:44 <ski> it's a hack, imo
00:37:02 <ski> shows and showsPrec is nicer, though
00:38:07 <Speck> perhaps more of a smell, to those who subscribe to "zero, one, infinity"
00:38:25 <ski> mhm ?
00:38:44 <Speck> http://catb.org/~esr/jargon/html/Z/Zero-One-Infinity-Rule.html
00:39:07 <ski> yeah, but what did you mean by the comment ?
00:39:47 <Speck> it's kind of around 2
00:39:56 <Speck> string and everything else
00:40:07 <Speck> almost infinity, but not quite
00:41:04 <dons> @code
00:41:05 <lambdabot> Handle.hs: allocateBuffer :: Int -> BufferState -> IO Buffer
00:41:11 <dons> more code!
00:42:14 <ski> Spark : ok
00:42:22 <ski> @yay
00:42:23 <lambdabot> ... I have read the INSTRUCTIONS ...
00:42:30 <ski> lambdabot is back ! :)
00:42:38 <Speck> I was noticing that
00:43:02 <ski> lambdabot: good for you, you naughty bot
00:43:37 <dons> he was stuck in limbo for 18 hrs
00:43:52 <Speck> lambdabot should react ELIZA-style to direct comments
00:43:52 <dons> some thread running silly. oh well.
00:44:01 <ski> what kind soul offered her a reincarnation ?
00:44:43 <lambdabot> I recincarnate myself!
00:44:53 <Speck> some kind of persisted TMS and a little charm
00:45:27 <ski> dons : she's female (see http://www.haskell.org/hawiki/QuotesPage, search for 2005.05.30)
00:47:15 <ski> good morning lstna
00:47:23 <Speck> that quote hardly proves lambdabot is, in fact, feminine
00:47:26 <lambdabot> I like to swing both ways
00:48:21 <dons> boegel considers lambdabot to be female,  I think. some sort of femme-bot
00:48:55 <Speck> I'll hold my judgment until an inferencing engine confirms it
00:48:58 <dons> maybe it's true. @vixen probably(?) is female.
00:49:12 <dons> though sometimes I'm not so sure...
00:49:30 <lstna> Morning? Already? :)  Hi ski
00:50:38 <ski> (09:50 local time)
00:51:24 <dons> @timein ski-land
00:51:28 <lstna> It's 8.51am here, but I didn't sleep yet
00:51:38 <dons> oh, we don't have that yet.
00:55:12 <Speck> thought: what if yi implemented keymappings as prototypes
00:55:59 <Speck> extending a keymapping would be cloning it
00:56:25 <Speck> (note that by thought I mean completely uninformed thought)
01:16:08 <Speck> grabbing yi for the first time through darcs is pretty sluggish... is this true of all darcs repos that have many patches?
01:26:28 <lispy> Speck: did you do --partial?
01:26:42 <lispy> Speck: also, darcs is not known for speed :(
01:26:51 <Speck> I copied and pasted from a web site
01:27:04 <Speck> didn't use partial
01:27:22 <Speck> minor inconvenience
01:36:17 <lispy> there has been a lot of work to make darcs faster, but the algorithms are still terribly slow
01:36:50 <lispy> which is unfortunate
01:37:01 <lispy> the theory behind darcs is wonderful
01:51:11 <Speck> how is it that haddock, happy, and alex all depend on one another :-(
02:31:12 <musasabi> darcs is quite snappy for everything but the initial checkout.
02:40:48 <tuomov> it can be snappy too if you have good connections to the server and the repo isn't immense
02:42:22 <tuomov> When I still was at ton.tut.fi, darcs get http://modeemi.fi/~tuomov/repos/ion-3/ took under a minute (1786 patches atm)
02:43:12 <tuomov> now it's taking somewhat longer (crappy adsl)
02:44:16 <tuomov> Unfortunately, darcs get http://iki.fi/tuomov/repos/ion-3/ is quite slow... apparently darcs doesn't understand to look for files under the redirection after the first time it is redirected
02:44:54 <tuomov> the time it took now seems to be 3 minutes 14seconds now
03:32:09 <jaro> Did anyone ever tried parallel haskell computing? Can you recommend me something for that purpose?
03:32:29 <dcoutts> you mean distributed or shared memory SMB?
03:32:34 <dcoutts> SMP
03:56:16 <jaro> ddcouts: Distributed computing. I do have access to network of LAN connected linux workstations.
03:56:41 <dcoutts> well there are a couple experimental projects
03:57:44 <dcoutts> @google glasgow distributed haskell
03:57:46 <lambdabot> http://www.macs.hw.ac.uk/~dsg/gdh/
03:57:53 <dcoutts> @google glasgow parallel haskell
03:57:54 <lambdabot> http://www.macs.hw.ac.uk/~dsg/gph/
03:59:30 <dcoutts> sadly we don't hear much out of the gdh / gph folk
04:31:51 <basti_> to whom it may concern: yi-emacs now supports rudimentary bottom line dialogs and command repetition
04:43:34 <Muad_Dibber> hmm
04:43:46 <Muad_Dibber> can i run a system cmd and get the output it prints as well?
04:43:56 <basti_> how about tee?
04:44:00 <basti_> the shell command?
04:44:54 <dcoutts> or do you mean from within a Haskell program capturing the output of running a command?
04:45:16 <dcoutts> in which case you probably want popen
04:45:40 <Muad_Dibber> dcoutts : thats what i mean
04:45:47 <xs> Muad_Dibber: http://www.haskell.org/ghc/docs/latest/html/libraries/base/System.Process.html
04:46:17 <xs> runInteractiveCommand specifically.
04:47:11 <Muad_Dibber> thats introduced only in 6.4?
04:47:54 <xs> ah. maybe
04:49:21 <dons> Muad_Dibber, there's a portable popen interface in lambdabot, that works with either < 6.2 and 6.4 fwiw
04:49:26 <basti_> ahh i think i see what you mean now.
04:49:55 <dcoutts> hey dons, how did icfp go?
04:50:22 <dons> hey, pretty good I think. don't really know though - i've not done this before.
04:50:49 <dcoutts> yeah, it's pretty hard to know since you've only got yourself to compare against during the contest
04:50:59 <dons> I don't really like this second round situation though - seems like too much can be done in the 2 week gap
04:51:05 <Igloo> Who did you enter with?
04:51:09 <vegai> dons: hey, could you tag a hs-plugins version that works with ghc-6.4?
04:51:19 <dons> seafood and stefanw
04:51:27 <dons> vegai, soon. yep.
04:51:32 <vegai> thanks
04:51:38 <vegai> it helps me to package things
04:52:46 <Igloo> Is there a standard, portable thing to do when I have a format string (like "vim %f") and a filename that may contain shell metachars and I want to run the obvious thing?
04:53:29 <dcoutts> FFI to libc globbing?
04:53:47 <Igloo> libc globbing?
04:53:48 <mflux_> I haven't used this approach in haskell, but in C I may write setenv("value", "42", 1) and them system("vim \"$value\"");
04:54:03 <mflux_> s/them/then/
04:55:13 <Igloo> That's either a hideous hack or beatiful; I'm just not sure which  :-)
04:55:19 <dons> heh!
04:55:29 <mflux_> I don't think there's a better way ;)
04:55:37 <mflux_> it works even if the shell has new metacharacters..
04:55:55 <dcoutts> well if you do the %f substitution youself then just system will pass the thing to the shell which will do the right thing
04:56:08 <mflux_> will it?-)
04:56:09 <dons> yeah ,that's what  i would have done.
04:56:10 <dcoutts> http://www.haskell.org/ghc/docs/6.2.2/html/libraries/base/System.Cmd.html#v%3Asystem
04:56:11 <Igloo> Not if the filename contains shell metachars
04:56:33 <dons> like * ?
04:56:39 <dcoutts> yes it's passed to the user's shell which will interpetet shell metachars
04:56:46 <Igloo> Yup
04:56:47 <dcoutts> at least I think it will
04:56:50 * basti_ thinks the shell situation has gone out of control
04:56:54 <mflux_> `rm -rf $HOME`
04:57:02 <Igloo> But I don't want the metachars in the filename to be treated as metachars by the shell...
04:57:02 <mflux_> that substituation could suck.
04:57:15 <dcoutts> Igloo, then escape them
04:57:19 <Igloo> How?
04:57:42 <Igloo> (I don't want to have to write the code to do it myself)
04:57:46 <mflux_> for example zsh has =()-notation for executing external applications too.. how would you know about all possible new meta characters?
04:58:04 <dcoutts> then use rawSystem instead
04:58:28 <Igloo> But then I have to know what to do to the format string, which is the same problem backwards
04:58:40 * Igloo thinks setenv is looking like the answer
04:59:13 <dons> seems like a neat trick, I reckon
04:59:23 <dcoutts> huh? just to do a substitution into "vim %f"
04:59:48 <dcoutts> that's just string manipulation, and then pass the answer to rawSystem
05:01:04 <dcoutts> or if you're the one building the string "vim %f" then don't! just use \filename -> rawSystem "vim" [filename]
05:01:43 <Igloo> The format string is user supplied and may have bits of shell in it
05:02:09 <dcoutts> but you don't want to interpret the shell stuff? I don't understand
05:02:24 <Igloo> I want to interpret shell stuff in the format string but not the filename
05:02:57 <dcoutts> can you give an example
05:03:35 <dcoutts> I'm not sure I see the difference
05:04:06 <pesco> vim `rm -rf /`
05:05:02 <dcoutts> so you want to expand "vim *.hs" but not execute rm -rf /
05:05:43 <mflux_> he doesn't want to expand *.hs?
05:05:46 <Igloo> format string:  "touch foo; vim %f"   filename: "my file"
05:05:59 <Igloo> That should touch foo but treat "my file" as a single filename
05:06:28 <pesco> The shell is evil. Stay away from it as far as possible!
05:06:28 <Igloo> ["touch" "foo;" "vim" "my file"] is wrong, as is "touch foo; vim my file"
05:07:51 <dcoutts> but you are going to run the final thing using the shell so if the user passes "vim `rm -f /`" then you'll just run it?
05:08:18 <Igloo> If the user sets their format string to delete stuff then I want to do what they tell me, yes
05:08:27 <dcoutts> you can read %f as if it were "%f"
05:08:32 <Igloo> If I give them a filename then I don't want that to cause them to delete stuff
05:08:55 <dcoutts> or even '%f'
05:09:13 <mflux_> the $foo-approach is convenient in other ways too, you can just instruct the user to use $foo in the place of %f, no need to convert anything ;)
05:09:30 <Igloo> %f can still contain '. Any such thing amounts to writing the quoting code myself. But anyway, I've decided to go with mflux's solution, so this discussion is pointless  :-)
05:09:31 <mflux_> plus he can choose to write a shell script that takes the environment and does something with it
05:09:43 <dcoutts> ok :-)
05:27:29 <Igloo> Urgle. There's no setEnv in System.Environment, only in System.Posix.Env
07:12:16 <genneth> @moo
08:11:57 <Igloo> Has anyone got any cunning ideas for how to speed up http://urchin.earth.li/~ian/bw.txt ? (in particular the False-False case of f)
08:13:28 <Igloo> AFAICS from the .hc file it's slow because of needless fiddling with Hp, but I can't think of anything I can do to fix that
08:15:24 <dcoutts> Hp? I don't see Hp
08:15:36 <Igloo> In the hc file
08:15:41 <dcoutts> oh
08:21:18 <dcoutts> what do i need to import to compile it?
08:21:39 <Igloo> Hang on a tick
08:24:06 <Igloo> http://urchin.earth.li/~ian/dist.tar.gz has everything in it. You need to run a perl command as commented out at the start of doit.sh first (don't make the file bigger than your free memory)
08:27:50 <Heffalump> bloody hell, why didn't you just write some C? :-)
08:28:50 <Igloo> I started off with nice Haskell, and I hope to get back to there, but looking at that isn't going to help me work out what's going wrong
08:29:19 <dcoutts> I can't quite see which bit of the .hc to look at
08:29:33 <dcoutts> it's got references to breakWhitePS4 all over the place
08:29:45 <Igloo> _s3d9 != 0x20 is the == 32 test
08:29:56 <Igloo> and you can follow the loop round from there
08:30:58 <dcoutts> that's not in my .hc file!
08:31:22 * Igloo can take about 25% off the runtime by removing the Hp=Hp-14; line, so I think the answer is that ghc needs to avoid adding and subtracting 14 each time round
08:31:28 <Igloo> Oh, it might be a different variable name
08:31:42 <dcoutts> no, there's no 0x20
08:32:04 <dcoutts> ah, _s3Cd_ == (I_)32
08:32:32 <Igloo> What ghc do you ahve?
08:32:37 <dcoutts> 6.4
08:32:52 <Igloo> Are you using -O?
08:33:10 <dcoutts> oh, wait I was on the wrong machine...
08:34:14 <Igloo> heh
08:34:21 <dcoutts> ok, got it
08:39:50 <dcoutts> so it is doing a tail call but allocating 19 bytes on the heap each time round (am I reading that right?)
08:40:20 <Igloo> 14, no?
08:40:28 <dcoutts> Hp=Hp-19;
08:40:57 <Igloo> I'm a bit confused, because I wouldn't have thought that adding n to the heap pointer was hwo you allocated space on the heap
08:41:20 * Igloo has 14 for some reason
08:45:12 <Igloo> OK, that's odd. If I also remove the Hp=Hp+14; then I lose the speedup. I wonder if the mangler is interfering
08:45:45 <Spark> :o
08:46:01 <Igloo> Or maybe getting to JMP_(stg_gc_fun); is beneficial for some reason
08:46:18 <dcoutts> huh? that's for heap overflow
08:46:58 <Igloo> Oh, OK, can't be that then
08:47:16 <bourbaki> hi
08:47:41 <tessier_> Hp=Hp+14 doesn't seem very haskellish to me
08:47:49 <dcoutts> heh
08:47:54 <Igloo> It's in the generated C code
08:47:56 <tessier_> ah
08:48:12 * tessier_ played with that earlier today
08:48:25 <tessier_> Plugged in a simple haskell program from a tutorial, looked at the C code then looked at the asm...
08:48:53 <tessier_> Couldn't make heads nor tails of any of it (including the haskell! :) but it sure was a good demonstration of how much coding, thinking, and error opportunities coding in a HLL saves you.
08:49:25 <dcoutts> Igloo, it doesn't look like it ought to be very slow, the fast path has 3 compares and not much else
08:49:47 <Igloo> Looking at the Haskell or the C?
08:49:54 <dcoutts> the C
08:50:24 <Igloo> It's got all the heap fiddling, gotos and the JMP_((W_)s38F_info); too
08:50:53 <Igloo> It's a bit worse than half the speed of the C one (breakWhitePS)
08:53:09 <dcoutts> so the jump in the tail call could be more direct I suppose
08:54:52 <dcoutts> I guess it could also avoid the Hp=Hp+19; and Hp=Hp-19; on the fast path
08:54:58 <dcoutts> and in that case, also the heap check
08:56:35 <dcoutts> GHC could use gcc annotations for the heap check to indicate which branch is more likely
09:01:30 <dcoutts> __builtin_expect is the thing
09:03:01 <shapr> yargh
09:03:09 <dcoutts> Igloo, well you can use this example for the GHC performance-fest
09:03:14 * Igloo is confused
09:04:21 <Igloo> The tail call is to s38F_info, which looks to me to have FastPackedString_breakWhitePS4_srt as its first element, which in turn has FastPackedString_nilPS_closure
09:05:00 * Igloo realises looking at the cpp-expanded source would be cunning
09:05:30 <dcoutts> yep
09:08:07 <Igloo> Hmm, still confused
10:06:55 <tmccort> Can I compile lambdabot on Windows?
10:09:42 <tmccort> Hello?
10:24:05 <TheHunter> prolly not, without patching it.
10:25:17 <TheHunter> Darius made an earlier version work under windows, but we probably have broken it since then.
10:31:54 <tmccort> So Haskell isn't cross-platform then? :|
10:33:25 <TheHunter> not if you're using System.Posix.
10:34:02 <dcoutts> and build systems do not necessarily "just work" on all platforms, in my experience they need testing and fixes for random little problems
10:35:55 <TheHunter> it should only be simple changes.
10:38:40 <tmccort> Hmm :(
10:42:31 <tmccort> Is portability in general a big problem for Haskell?
10:42:38 <dcoutts> no
10:42:40 <tmccort> (I'm just learning it)
10:43:32 <dcoutts> the significant sources of non-portability are using C libs and dodgy build systems
10:44:19 <dcoutts> Haskell code that does not use System.Win32, System.Posix or other C libs is portable
10:45:17 <TheHunter> btw, lambdabot only uses System.Posix for signal catching.
10:48:23 <tmccort> Got it
10:49:11 <cm> another source of non-portability is systems using different versions of GHC and/or 3rd party libraries
10:50:56 <Igloo> You can probably use do-nothing stubs on Windows then
10:54:25 <astrolabe> Is the definition of >>= for the IO type system dependent?  Can it be written in Haskell?
10:56:04 <TheHunter> the IO monad is just a state monad where the state happens to be Realworld.
10:56:14 <dcoutts> in ghc at least, it's defined in Haskell code
10:56:33 <dcoutts> bindIO :: IO a -> (a -> IO b) -> IO b
10:56:33 <dcoutts> bindIO (IO m) k = IO ( \ s ->
10:56:33 <dcoutts>   case m s of
10:56:33 <dcoutts>     (# new_s, a #) -> unIO (k a) new_s
10:56:33 <dcoutts>   )
10:57:01 <astrolabe> thank you
10:57:01 <dcoutts> not that that's supposed to make much sense to most people :-)
10:57:11 * astrolabe 's head hurts
10:58:17 <astrolabe> Is it just me?  or is learning haskell really hard?
10:58:59 <dcoutts> tip 1: don't try to understand the GHC internal implementations until you're a Haskell expert
10:59:34 <astrolabe> :)  good tip
11:00:25 <dcoutts> you can learn Haskell mostly without understanding it's implementation, knowing a little about the implementation only comes in handy later when you're trying to optimise a bit of code
11:01:19 <astrolabe> After a week of staring at it, the reactive animations section of 'The Haskell School of Expression' is starting to make a crazy kind of sense.  I'm worried that I may have permanently damaged my brain.
11:01:39 <dcoutts> that's a common experience, don't worry :-)
11:02:38 <dcoutts> you'll get through it and it'll become intuitive - I can't think in C anymore
11:03:06 <astrolabe> LOL!  I'll get sacked!
11:03:12 <dcoutts> hah
11:04:21 <dcoutts> actually there are many people on #haskell who use both Haskell and imperitive languages regularly, it's just that  I have the luxury of not having to use C anymore :-)
11:12:23 <tmccort> Are there wxWidgets bindings for haskell?
11:12:33 <dcoutts> yes wxHaskell
11:12:51 <dcoutts> and there are also Gtk+ bindings
11:14:10 <Igloo> </plug-plug>  :-)
11:14:32 <dcoutts> can't miss out on an opportunity to promote Gtk2Hs can I? :-)
11:15:36 <Igloo> :-)
11:21:07 <dcoutts> Igloo, what sort of data file do I want for your FastPackedString test?
11:22:13 <Igloo> doit.sh has a commented out line to make one
11:22:20 <dcoutts> oh
11:22:23 <Igloo> I've e-mailed SimonM about the problem, BTW
11:22:42 <dcoutts> right
11:30:35 <tmccort> How is that haskell Eclipse plugin?
13:39:24 <basti_> hi
13:43:49 <lispy> hi
13:44:51 <lispy> is there a website (or better yet a url) that gives extremely details information about ibooks and powerbooks?  I want to know weight, battery life under a few benchmarks, and dpi, and so on.  I'm having a hard time finding that sort of info
13:46:23 <lispy> http://www.apple.com/ibook/specs.html
13:46:31 <lispy> there we go, thanks apple!
13:47:45 <wagle> my two year old powerbook battery started out lasting 3.5 hours..  now its less than an hour
13:48:10 <sh10151> wagle: apple gave me a free replacement when that happened
13:48:24 <wagle> was it over a year old?
13:48:36 <sh10151> just shy
13:48:40 <sh10151> is that the deal?
13:49:07 <lispy> apple batteries reasonably priced, right?
13:49:10 <wagle> yeah..  i might get a replacement still, if they determine that their odd update a year ago screwed it up
13:49:16 <wagle> $129 or so
13:49:19 <sh10151> no batteries are reasonably priced :)
13:49:19 <lispy> oh
13:49:34 <lispy> i was thinking like $70
13:50:04 <lispy> wagle: what has been your take on the powerbook?  Good experience?
13:50:13 <lispy> would you do it again?
13:50:34 <wagle> yeah..  i like it..  i want more pixels though (only 1280x854)
13:50:56 <lispy> you have the 15"?
13:51:01 <wagle> its got enough memory for a huge external, though
13:51:13 <wagle> 15"..  17" seemed too big
13:51:25 <lispy> so does mac os x support multiple desktops?
13:51:33 <lispy> that's how i get around having a small display
13:52:03 <lispy> in sawfish i hit alt+<arrow key> and it takes me to a new desktop
13:52:16 <wagle> i got some free software that does multiple desktops..  they found the hooks, and so it was pretty easy.  and threw in some cool transition effects to boot
13:52:26 <lispy> so i put webbrowsing on one, my terminals on another, and my apps on a "scratch" space
13:52:47 <lispy> wagle: okay, can you set the keys it uses to switch?
13:52:55 <wagle> i found i didnt like it though (used it for abolut a month, then got rid of it
13:52:59 <lispy> okay
13:53:06 <wagle> yeah you can set the keys
13:53:17 <lispy> my current laptop pisses me off
13:53:28 <lispy> so i'm over researching the apple ones :)
13:53:34 <lispy> find out if i would actually be happire
13:54:04 <lispy> my current one has a 2.5 battery and severe heat problems
13:54:07 <wagle> pretty much "it just works"
13:54:23 <lispy> do you have an problems with heat?
13:54:26 <wagle> watch out for the heat problem though
13:54:45 <lispy> heat is making me think ibook instead of powerbook
13:54:54 <wagle> my ibook tried to cook my hand.
13:55:05 <lispy> how so?
13:55:22 <lispy> does it shut off when over heating or does it lock up?
13:55:37 <wagle> i think the disk drive was right under where my left hand rested
13:55:59 <wagle> never had it "overheat"
13:56:09 <lispy> have you had worse heat problems with the ibook or the powerbook?
13:56:14 <wagle> just check the running demo models to see where they heat up
13:56:23 <lispy> wagle: ah, my laptop now overheats unless i'm very careful
13:56:35 <wagle> the titanium powerbooks is completely cool to the touch on the top
13:56:50 <wagle> but can really cook the underside
13:57:03 <lispy> i don't mind it getting warm, but i hate for the machine to lockup, reboot, shutoff, or become damaged because of heat
13:57:03 <wagle> so i use it only on a pad or a desktop
13:57:09 <wagle> not in my lap
13:57:24 <lispy> i see
13:57:34 <wagle> its got a fan with multiple speeds
13:57:48 <lispy> is it safe to set it on something soft like a blanket while you use it?
13:57:51 <lispy> or will it burnup?
13:58:06 * lispy has so many questions :)
13:58:10 <wagle> the only temperature sensor available to software is the one in the disk drive (currently 100.4F)
13:58:21 <lispy> huh, okay
13:58:42 <wagle> you want to put it on something that disappates heat
13:59:07 <wagle> (my 2 year old powerbook that is (temperature sensors))
13:59:16 <wagle> each model will be different
13:59:36 <lispy> does your lap count?
13:59:55 <lispy> for example,the laptop i have now vents right where my leg is, so i can't use it on my lap
14:00:15 <wagle> it will cook your tender parts
14:00:44 <lispy> heh
14:00:52 <wagle> i've been hearing stories of people sterilizing themselves recently
14:01:00 <lispy> that's creepy
14:01:29 <lispy> my partner is sterile anyway so i wouldn't know the difference, but it can't be good for cancer risk
14:02:28 <lispy> looks like backlight keyboard only comes with the 15 and 17 inch models
14:02:33 <lispy> that's too bad :)
14:02:51 <wagle> i never thought that light was important
14:03:32 <wagle> but check out running demos at a store to see where the current models heat up
14:03:35 <tmccort> I really don't get this monad stuff :(
14:03:38 <lispy> i sometimes type in the dark, but it's usually because i got dark in the room (like the sun went down) and i was too lazy to turn on the light
14:04:05 <lispy> wagle: definitely, i was at the apple store about two weeks ago and looked at them a little
14:04:12 <dcoutts> tmccort, have you read any of the monad tutorials?
14:04:21 <lispy> tmccort: where are you in the learning?
14:04:48 <lispy> dcoutts: you work with gtk haskell stuff right?
14:05:10 <dcoutts> lispy, yep
14:05:26 <lispy> dcoutts: how usable is it on the mac?
14:05:39 <dcoutts> well it works, but uses the X server
14:06:01 <dcoutts> a Gtk+ hacker is working on a port that doesn't use X11
14:06:24 <dcoutts> but that'll be a bit of time before it matures, so for now it uses X11
14:06:32 <lispy> and the haskell bindings will be able to take advantage of that whenever it finishes i assume
14:06:38 <dcoutts> yep
14:06:59 <lispy> can you run X and the native gui at the same time?
14:07:01 <wagle> lispy:  wsmanager (http://desktopmanager.berlios.de/)?
14:07:04 <dcoutts> it won't even change binary compatabilty
14:07:06 <lispy> or do yo uhave to switch between them?
14:07:22 <wagle> X11 is an app
14:07:22 <dcoutts> lispy, yes you can run them at the same time, it does it 'rootless'
14:07:56 <lispy> ah, so you can have an X app running next to an OSX app?
14:07:58 <lispy> very nice
14:08:04 <lispy> i suppose you just need more mar?
14:08:06 <lispy> er ram
14:08:16 <wagle> doesnt take over the screen unless you tell it to..  its windows rise and fall like all the others..  cut and paste is a little tricky though
14:08:39 <lispy> wagle: thanks for the DM link
14:08:47 <dcoutts> so you don't get the silly situation (like you do with most win32 X servers) that all X app windows are contained within one root window
14:09:02 <wagle> dunno about ram..  i started out with 1G, so cant compare
14:09:03 <lispy> i see, i could probably live with that
14:09:31 <dcoutts> X11 is actually pretty memory thrifty, remember that it runs on handhelds
14:09:34 <lispy> the ibook claims an entire hour more of battery life compared to powerbook
14:09:46 <lispy> dcoutts: good point
14:09:47 <wagle> i have a little usb wheel mouse, which i find essential
14:10:10 <lispy> will a USB mouse designed for windows work too?
14:10:13 <lispy> i'm guessing yes
14:10:44 <wagle> i dont know what "designed for windows" means
14:10:57 <lispy> i looks like for the money and mobility/temperment that the ibook is best for me
14:10:58 <wagle> but the wheel works better than on linux
14:11:08 <lispy> wagle: it's a logitech mouse
14:11:21 <wagle> shift wheel usually moves the horizontal scroll, for example
14:11:42 <wagle> lispy: i imagine it will work
14:11:47 <lispy> yeah
14:11:53 <lispy> it's just usb, works great on linux
14:12:28 <lispy> can you use multiple fingers on the mouse pad to simulate mouse button clicks?
14:12:46 <lispy> like tapping with 2 fingers at once is a right click?
14:12:55 <wagle> mouse pad?
14:13:00 <wagle> touch pad, you mean?
14:13:01 <lispy> oh, the track pad
14:13:03 <lispy> yeah
14:13:03 <lispy> that
14:13:06 <lispy> sorry :)
14:13:31 <wagle> no..  it seems to think it can be touched in only one place
14:13:44 <lispy> that's too bad
14:14:14 <lispy> i'm guessing it doesn't have a scroll zone either
14:14:25 <wagle> might be somkething around that changes that..  i just use the external mouse, and disable the touch pad and single mouse button
14:14:38 * lispy nods
14:15:00 <wagle> (unless i'm too lazy to plug in the mouse, or am trying to conserve power my not lighting up the optical mouse)
14:15:47 <wagle> otherwise, i keep hitting the touch pad by accident
14:16:05 <lispy> they have this thing called iwork, but i'm guessing i'd be happier with free software like neo office
14:17:16 <lispy> conal: hi, having a good summer?
14:18:36 <lispy> wagle, dcoutts thanks
14:18:50 <dcoutts> np
14:19:42 <wagle> lispy: also, to get a lot of the linux apps, use darwinports and fink
14:20:19 <conal> lispy, hi.  pretty good, thanks.  not as focused as i'd like.
14:20:19 <lispy> use both?
14:21:03 <lispy> wagle: i had hear darwinports was better.  Is fink still better at some things?
14:21:19 <lispy> conal: ah, too many projects?
14:21:21 <wagle> i started with fink, but they dont keep up as well as darwinports..  so i currently have a mix of the two
14:21:36 <lispy> is darwinports independent of apple?
14:22:05 <wagle> i dunno..  fink has irc channels, but darwinports doesn't..
14:22:27 <dcoutts> lispy, or you could get a powerbook and use linux on it, it works well apparently. Then you wouldn't have to swithc all your apps.
14:23:01 <lispy> dcoutts: suspend to ram is important to me
14:23:13 <lispy> dcoutts: i've had really bad experiences with linux and suspend to ram
14:23:26 <wagle> yeah..  by a ferrari, then put a lawn mower engine in it
14:23:30 <wagle> buy
14:23:43 <dcoutts> oh, I was about to say that linux does have suspend to ram, but never mind :-)
14:24:17 <lispy> dcoutts: heh, and often "suspend" works great, but resume sucks :)
14:25:01 <dcoutts> I see, I've never tried it. I hear it depends quite a bit on the kernel version and the hardware.
14:25:06 <lispy> apple HQ is about 6 miles from here, I should go bug them :)
14:25:21 <lispy> the hardware does make a big difference
14:25:32 <gzl> darwinports does have an IRC channel
14:25:37 <gzl> it's #opendarwin on freenode
14:25:40 <lispy> dcoutts: do you know if ibook linux support is significatly different from powerbook?
14:25:41 <gzl> and they're independent from Apple
14:25:51 <gzl> though some of the core developers are in their BSD group
14:26:09 <dcoutts> lispy, I don't know much about apple hardware sorry
14:26:13 <lispy> gzl: okay, that's good to know
14:26:23 <lispy> dcoutts: np
14:28:23 <lispy> http://seb.france.free.fr/linux/ibookG4/iBookG4-howto.html
14:28:25 <lispy> that's promising
14:28:35 <wagle> gzl: ah, good.  i've done google searches for it for some time, and never found anything
14:29:28 <wagle> whats wrong with macox?
14:29:48 <lispy> it's not what i'm used to
14:30:05 <wagle> learn flexibility!  8)
14:30:08 <lispy> for example, i don't think it has a way to mount files over ssh
14:30:34 <wagle> how do you do that with linux?
14:30:40 <lispy> wagle: there are also the political issues of free software that are dear to my heart
14:31:03 <lispy> it's either called LUFS or FUSE
14:31:16 <lispy> i type fusermount to do
14:31:29 <lispy> tell it to use sshfs
14:31:35 <conal> lispy, sorry for missing your notes.  my gaim notifications aren't working.  hmm.  just two main projects, really:  teaching/coaching Compassionate (aka "nonviolent") Communication (http://awakeningcompassion.com) and "eros", which is a new version of pan for nonprogrammers.
14:31:59 <lispy> conal: cool
14:32:21 * wagle kicks the personal telco project for distributing crappy free access points all over the city.  this one can do DNS once per 20 tries
14:33:01 <wagle> i imagine that you could do that with macosx, if someone's gotten the itch
14:33:23 <lispy> wagle: but for every feature i would lose, i would be gaining one.  But i feel bad about reducing my use of FOSS
14:33:33 <lispy> wagle: yeah there is no reason why not
14:33:43 <lispy> the linux implementation uses a "user land" file system
14:33:59 <gzl> so write one :)
14:34:11 <lispy> gzl: i wouldn't know where to begin
14:34:22 <wagle> UTSL
14:34:33 <wagle> *<8-)
14:35:06 <lispy> UTSL?
14:35:08 * lispy googles
14:35:18 <wagle> @google UTSL
14:35:19 <lambdabot> http://catb.org/~esr/jargon/html/U/UTSL.html
14:35:27 <gzl> lispy: http://developer.apple.com/documentation/Darwin/Conceptual/KEXTConcept/index.html#//apple_ref/doc/uid/TP40001063
14:35:31 <gzl> :)
14:35:31 * gzl runs
14:35:32 <lispy> ah
14:35:41 <lispy> use the source...
14:36:15 <lispy> gzl: hehe
14:36:23 <wagle> of course, you'd be required to implement it in haskell
14:36:28 <lispy> that's fine
14:36:39 <lispy> lazy evaluation may even be handy here
14:36:45 <lispy> for caching
14:36:50 <gzl> IOKit stuff uses C++
14:36:51 <dcoutts> conal, we were demoing your .net version of Pan at our department open day last week
14:37:15 <lispy> gzl: but you could still make an FFI, right?  and i thought it was Objective C not C++..
14:37:30 <gzl> IOKit is too low-level to use the ObjC stuff
14:37:35 <gzl> you can't use some of the fancy C++ features either
14:37:51 <lispy> ah, more of a C with classes?
14:37:52 <gzl> writing userland applications like Mail is done in ObjC, but once you get into kext land it's a different story
14:37:54 <lispy> no rtti?
14:38:02 <gzl> I don't really know what you can and can't use
14:38:03 <gzl> but it's limited
14:38:38 <gzl> more practically, you may like this
14:38:39 <gzl> http://hoc.sourceforge.net/
14:44:43 <conal> dons, .net?  is that Pan# from yale?
14:45:31 <conal> dcoutts: brain-fart, sorry.  that last reply was meant for you.
14:53:05 <lispy> looks like wireless is not supported under linux on the ibook
14:53:13 <lispy> so that makes it not worth using
14:53:54 <gzl> linux ppc is kind of an odd beast anyway
14:54:09 <reffie> just use freebsd
14:54:20 <gzl> freebsd doesn't run on ppc
14:54:24 <dcoutts> conal, actually perhaps it was just the windows version (I was demoing something else so I'm not quite sure)
14:54:36 <reffie> gzl it sure does!
14:54:49 <gzl> since when?
14:54:53 <gzl> last I heard it was pre-alpha
14:55:07 <reffie> for a while now
14:55:11 <dcoutts> conal, it was well received, pretty animations of stuff and an interactive one too
14:55:18 <reffie> we might even have a ppc release, for 6.0
14:55:35 <gzl> oh, wow, it's come a long way
14:55:39 <gzl> they just updated this site last week
14:55:50 <reffie> the freebsd/ppc one?
14:55:50 <gzl> no wonder I didn't know :P
14:55:52 <gzl> yes
14:55:56 <reffie> yeah
14:56:28 <conal> dcoutts, neat.  what was the occasion or motivation for showing pan?
14:56:30 <lispy> reffie: it won't work with the airport extreme card either
14:56:40 <reffie> lispy no, it won't
14:57:35 <dcoutts> conal, it was an open day for prospective students. So we needed pretty visual things to show off.
14:57:40 <lispy> heh, well if i'm going to run an OS that doesn't ship with the hard ware it will be debian :)
14:57:48 <conal> nifty!
14:58:00 <xs> reffie: didn't the ppc support come from netbsd?
14:58:11 <dcoutts> conal, I was demoing the ICFP '04 ants game, which is quite fun to watch. :-)
14:58:11 <reffie> xs what do you mean?
14:58:22 <lispy> dcoutts: nice
14:58:25 <reffie> we used parts from netbsd, yes
14:58:30 <xs> reffie: well, freebsd took ppc stuff from netbsd?
14:58:38 <xs> ah ok.
14:58:38 <reffie> but we can't just copy and paste
14:58:53 <reffie> the kernels are very different
14:58:57 <xs> i know
14:59:01 <lispy> what is the license on freebsd?
14:59:03 <lispy> is it gpl?
14:59:06 <reffie> lispy BSD
14:59:12 <lispy> ah
14:59:19 <conal> dcoutts, fun.  i'm glad there's cool visual stuff to show off haskell with.
15:00:00 <dcoutts> yes, we're always in danger of making it a bit dry for the poor students
15:02:03 <lispy> anyone know if the ibook has the SMS (sudden motion sensor)?
15:02:09 <lispy> i know the PB does
15:05:46 <genneth> @index (!)
15:06:19 <lambdabot> Data.Array.IArray, Data.Array.Unboxed, Data.Array.Diff, Data.IntMap,
15:06:19 <lambdabot> Data.Map, Data.Array, Text.Html
15:06:34 <lispy> oh cool lambdabot is back
15:06:41 <lispy> @vixen we missed yo
15:06:43 <lambdabot> hiya
15:06:53 <lispy> @vixen where were you?
15:06:55 <lambdabot> what about me?
15:07:35 <lispy> @vixen oh nevermind
15:07:36 <lambdabot> please try to make me understand...
15:08:07 <genneth> @type (\gt s1 s2 -> Prelude.foldl 	(\m (i, j, b) -> if (i `elem` s1) && (j `elem` s2) then	Data.Map.insert b ((i,j):(if Data.Map.member b m then m!b else [])) m else m) Data.Map.empty gt)
15:08:12 <lambdabot> bzzt
15:08:19 <genneth> damned brackets
15:09:06 <genneth> or indeed the Data.Map.empty
15:09:07 <genneth> hmm
15:09:56 <lispy> @type Data.Map.empty
15:09:57 <lambdabot> Data.Map.empty :: forall a k. Data.Map.Map k a
15:10:52 <genneth> well, that seems to be fine then
15:11:02 <genneth> i wonder what it doesn't like
15:11:43 <genneth> @import Data.Map as Map
15:11:44 <lambdabot> Unknown command, try @listcommands.
15:12:39 <genneth> @index Data.Map.empty
15:12:40 <lambdabot> bzzt
15:12:45 <genneth> @index empty
15:12:46 <lambdabot> Data.Graph.Inductive.Graph, Data.Graph.Inductive, Data.Graph.
15:12:46 <lambdabot> Inductive.Internal.Heap, Data.IntMap, Data.IntSet, Data.Map, Data.
15:12:46 <lambdabot> Set, Language.Haskell.TH.PprLib, Text.PrettyPrint.HughesPJ, Text.
15:12:46 <lambdabot> PrettyPrint
15:13:22 <genneth> @pl (\gt s1 s2 -> Prelude.foldl (\m (i, j, b) -> if (i `elem` s1) && (j `elem` s2) then Data.Map.insert b ((i,j):(if Data.Map.member b m then m!b else [])) m else m) Data.Map.empty gt)
15:13:24 <lambdabot> (line 1, column 38):
15:13:24 <lambdabot> unexpected ","
15:13:24 <lambdabot> expecting letter or digit, operator or ")"
15:13:24 <lambdabot> ambiguous use of a non associative operator
15:13:50 <lispy> genneth: what does that code do?
15:14:42 <genneth> lispy: it takes a multiplication table, and two lists specifying sparsity and generates a data structure suitable for figuring out the mininum number of multiplications that need to be done
15:14:53 <genneth> i'm almost certain it works
15:15:00 <genneth> i just wanna see it in point free form... :p
15:15:07 <lispy> Ah
15:15:41 <lispy> i dont' think you need the modules with @pl
15:15:49 <lispy> @pl (x -> foo x)
15:15:50 <lambdabot> (line 1, column 4):
15:15:50 <lambdabot> unexpected ">"
15:15:50 <lambdabot> expecting variable, "(", operator or ")"
15:15:56 <lispy> @pl (\x -> foo x)
15:15:57 <lambdabot> foo
15:16:06 <genneth> ah
15:16:09 <genneth> cunning
15:16:30 <genneth> @pl (\gt s1 s2 -> foldl (\m (i, j, b) -> if (i `elem` s1) && (j `elem` s2) then insert b ((i,j):(if member b m then m!b else [])) m else m) empty gt)
15:16:31 <lambdabot> (line 1, column 30):
15:16:31 <lambdabot> unexpected ","
15:16:31 <lambdabot> expecting letter or digit, operator or ")"
15:16:31 <lambdabot> ambiguous use of a non associative operator
15:18:13 <lispy> @pl (\gt s1 s2 -> foldl (\m i j b -> if (i `elem` s1) && (j `elem` s2) then insert b ((i,j):(if member b m then m!b else [])) m else m) empty gt)
15:18:18 <lambdabot> flip (flip . flip (flip . (foldl .) . flip (flip . (ap .) . ((flip .)
15:18:18 <lambdabot> .) . ((((flip . (flip .)) .) .) .) . flip (flip . ((.) .) . (ap .) .
15:18:18 <lambdabot> ((ap .) .) . (((((.) . if') .) .) .) . flip ((.) . flip . (((.) . (&&
15:18:18 <lambdabot> )) .) . flip elem) (flip elem)) (join (flip . (flip .) . ((flip .) .)
15:18:18 <lambdabot> . ((ap insert .) .) . flip (flip . ((.) .) . ((:) .) . (,)) . flip (
15:18:18 <lambdabot> flip . ap (ap . (if' .) . flip member) (!)) []))) id) empty)
15:18:20 <lambdabot> optimization suspended, use @pl-resume to continue.
15:18:28 <lispy> @pl-resume
15:18:35 <lambdabot> flip (flip . flip flip empty . (foldl .) . flip (flip . ((ap . ((
15:18:35 <lambdabot> flip . ((flip . (flip .)) .)) .)) .) . flip flip (join (flip . (flip
15:18:35 <lambdabot> .) . (((flip . ap insert) .) .) . flip (flip . ((.) .) . ((:) .) . (,
15:18:35 <lambdabot> )) . flip (flip . ap (ap . (if' .) . flip member) (!)) [])) . (((.) .
15:18:35 <lambdabot> ap . (liftM2 ((.) . if') .)) .) . (. flip elem) . flip . (((.) . (&&)
15:18:35 <lambdabot> ) .) . flip elem) id)
15:18:37 <lambdabot> optimization suspended, use @pl-resume to continue.
15:18:42 <lispy> hmm...
15:18:45 <lispy> @pl-resume
15:18:47 <lambdabot> flip (flip . flip flip empty . (foldl .) . flip (flip . ((ap . ((
15:18:47 <lambdabot> flip . ((flip . (flip .)) .)) .)) .) . flip flip (flip =<< ((flip . (
15:18:47 <lambdabot> (flip . ap insert) .)) .) . flip (flip . ((.) .) . ((:) .) . (,)) .
15:18:47 <lambdabot> flip (flip . ap (ap . (if' .) . flip member) (!)) []) . (((.) . ap .
15:18:47 <lambdabot> (liftM2 ((.) . if') .)) .) . (. flip elem) . flip . (((.) . (&&)) .)
15:18:50 <lambdabot> . flip elem) id)
15:18:59 <genneth> i don't think you can just take apart that tuple there
15:19:05 <lispy> haaha
15:19:08 <lispy> yeah, it would seem that way
15:19:14 <TheHunter> pink floyd!
15:19:44 * lispy doesn't get the reference
15:20:10 <wagle> @pl flip flip flip flip flip
15:20:11 <lambdabot> flip flip flip
15:20:17 <wagle> @pl flip flip flip
15:20:18 <lambdabot> flip flip flip
15:21:41 <wagle> when lambdabot runs out of flip's, is he flipped out?
15:22:19 <lispy> oy!
15:22:30 <lispy> what is if'
15:22:41 <lispy> (liftM2 ((.) . if') .))
15:22:43 <wagle> function
15:22:49 <lispy> @index if'
15:22:51 <lambdabot> bzzt
15:22:55 <wagle> @plugs if True 1 2
15:22:59 <lambdabot> parse error on input `)'
15:23:03 <wagle> @plugs if' True 1 2
15:23:04 <lambdabot> Variable not in scope: `if''
15:23:20 <wagle> i dont remember where it is
15:23:44 <wagle> if' t x y = if t then x else y
15:23:59 <wagle> @index if'
15:24:00 <lambdabot> bzzt
15:24:09 <wagle> lambdabot: 8-p
15:26:26 <lispy> @plugs let if' t x y = if t then x else y in if' True 1 2
15:26:28 <lambdabot> 1
15:26:57 <wagle> you can curry if', but not if
15:27:25 <wagle> wierd.  i coulda sworn i saw if' defined somewhere
15:27:26 <lispy> oh, good point
15:29:27 <wagle> (if' .)?
15:30:33 <lispy> @pl (\gt s1 s2 -> foldl (\m k@(i, j, b) -> if (i `elem` s1) && (j `elem` s2) then insert b ((i,j):(if member b m then m!b else [])) m else m) empty gt)
15:30:34 <lambdabot> (line 1, column 26):
15:30:34 <lambdabot> unexpected "@"
15:30:34 <lambdabot> expecting pattern or "->"
15:30:49 <lispy> @pl (\gt s1 s2 -> foldl (\m (i, j, b) -> if (i `elem` s1) && (j `elem` s2) then insert b ((i,j):(if member b m then m!b else [])) m else m) empty gt)
15:30:50 <lambdabot> (line 1, column 30):
15:30:50 <lambdabot> unexpected ","
15:30:50 <lambdabot> expecting letter or digit, operator or ")"
15:30:50 <lambdabot> ambiguous use of a non associative operator
15:30:58 <lispy> i wonder why it doesn't accept that tuple?
15:31:34 <tmccort> Sorry, I took off to watch ome of that Live 8 concert :)
15:31:34 <wagle> @pl (1,2,3)
15:31:35 <lambdabot> (1, 2, 3)
15:31:53 <wagle> @pl (1,2,3) : []
15:31:53 <lambdabot> [(1, 2, 3)]
15:32:12 <monochrom> please don't use @pl as an evaluator
15:32:25 <monochrom> but hey, whatever works...
15:32:55 <monochrom> Hmm will @pl contain a hole that lets in unsafePerformIO? ...
15:33:21 <wagle> the question was why @pl didnt like (\m (i, j, b) ->
15:33:53 <wagle> @pl (\m (i, j, b) -> 1)
15:33:54 <lambdabot> (line 1, column 10):
15:33:54 <lambdabot> unexpected ","
15:33:54 <lambdabot> expecting letter or digit, operator or ")"
15:33:54 <lambdabot> ambiguous use of a non associative operator
15:34:01 <wagle> @pl (\m (i, j) -> 1)
15:34:01 <lambdabot> const (const 1)
15:34:14 <wagle> aha
15:34:38 <wagle> tuple patterns are severely limited, i guess
15:34:55 <jlouis> what is the syntax to hide an import... like the Prelude.lookup function
15:40:52 <arjanoosting> import Prelude hiding lookup
15:40:55 <TheHunter> you prolly figured it out by now, import Prelude hiding (catch)
15:41:53 <tmccort> The gentle introduction to Haskell isn't very gentle is it?
15:42:23 <TheHunter> if' doesn't exist in the libs, but there's no easy way to pointlessly case analyse on Bool.
15:42:35 <TheHunter> same for \(x,y,z) -> ...
15:43:02 <TheHunter> and pink floyd just played at live8
15:43:05 <TheHunter> gotta go
15:55:46 <jlouis> arjanoosting: ah yes. Thanks
15:56:13 <jlouis> tmccort: it depends how much functional programming you have been exposed to
15:56:22 <jlouis> tmccort: some find it easy, some find it hard
15:57:35 <vegai> someone needs to write a Haskell tutorial with the same spirit as this one: http://www.poignantguide.net/ruby/
15:59:24 * heatsink is getting tired of the impossible happening
16:01:00 <monochrom> vegai: as in "I haven't finished it yet"? hehe
16:01:34 <vegai> well, there are 6 chapters there, and more meat than a good ('regular') book
16:03:57 <astrolabe> Perhaps there should be haskell missionary activity targeted at the authors of cool programming books
16:17:51 <lispy> astrolabe: i like to get missionary...but that's probaly not what you meant...
16:18:24 * lispy tries to pull his mind out of the gutter but it's stuck
16:20:09 * astrolabe douses lispy with cold water
16:20:29 <lispy> ah, that feels really nice
16:20:37 <lispy> it's way too hot in my room, atm
16:24:56 <wagle> heinrich made debbie sleep on the wet spot, so she (slightly taller than him) took at ice cold shower, then gave him a big wet nude hug
16:27:50 <hefner_> ...
16:28:34 <luqui> are there any x86_64 binaries of ghc 6.4 that aren't in RPM format?
16:28:55 <dcoutts> luqui, yes, let me find it...
16:29:48 <wagle> what you running that you cant use rpm
16:29:49 <wagle> ?
16:29:55 <luqui> gentoo
16:29:56 <luqui> if I emerge rpm
16:30:10 <luqui> then I have to reinstall a bunch of stuff I already have in rpm format
16:30:13 <luqui> because of the deps
16:30:41 <luqui> the ghc-6.4 in portage is pretty broken
16:30:49 <wagle> you can pull the cpio stuff out of the rpm, but i don't know what the library deps would be
16:31:02 <wagle> can you recompile?
16:31:14 <dcoutts> luqui, you want a ghc 6.4.1 pre-release? the portage one is the actual 6.4 release
16:31:23 <luqui> sure
16:31:34 <luqui> I just want >= 6.4 that works
16:31:54 <dcoutts> we've not added any patches to the 6.4 in portage, we're hoping 6.4.1 will be out soon
16:32:09 <dcoutts> what problem were you getting with 6.4?
16:32:16 <luqui> one moment
16:32:27 <dcoutts> http://haskell.org/~petersen/ghc-6.4.1.20050620-x86_64-unknown-linux.tar.gz
16:32:30 <luqui> internal error: scavenge_one: strange object 68
16:32:46 <dcoutts> that .tar.gz is from juhp
16:33:06 <luqui> "internal server error" (let me sanity check the url)
16:33:18 <dcoutts> oh, you're right, I get the same. Odd
16:33:47 <dcoutts> it worked a while ago. I've got a copy I can upload...
16:33:57 <luqui> thanks
16:34:49 <dcoutts> oh, sorry actually I've only got the .rpm
16:35:07 <dcoutts> you can unpack the .rpm with cpio and install in manually - that's what I did
16:35:42 <dcoutts> you just need to fix up the paths in the ghc/ghci/ghc-pkg/hsc2hs scripts
16:35:55 <luqui> hmm
16:36:03 <luqui> okay I'll give it a shot
16:36:28 <dcoutts> yeah, that's wha juhp make the non-rpm version! it's not totaly trivial :-)
16:36:54 <Igloo> And package.conf now too
16:37:04 <dcoutts> oh yes, that too
16:37:05 <wagle> whats wrong with recompiling?  8)
16:37:12 <luqui> from cvs?
16:37:31 <dcoutts> wagle, because it's a pain to compile and often doesn't work :-(
16:38:27 <wagle> just seemed more pain to unpack a rpm from another distro, then do the dependency-hell thing
16:38:42 <luqui> I tried to compile from cvs a while ago
16:38:53 <luqui> and got perplexed by the process (bootstrapping is different for every compiler)
16:39:08 <dcoutts> last time I tried compiling from cvs the stage1 compiler would always segfault :-(
16:39:50 <Igloo> When was that? Did you report it?
16:40:02 <dcoutts> luqui, I'm uploading to (I'll tell you when it's finnished) http://haskell.org/~duncan/ghc641.20050620-6.4.1.20050620-0.x86_64.rpm
16:40:18 <dcoutts> luqui, 5min ETA
16:40:23 <luqui> thanks
16:40:29 * Igloo hasn't had problems compiling CVS GHC recently, although resulting binaries would go wrong when asked to profile themselves
16:40:46 <wagle> i didnt have trouble (but last time "by hand" was maybe a year ago)
16:40:59 <dcoutts> Igloo, it was about a week or two ago, but the same day's snapshot build for juhp ok
16:41:18 <wagle> (on both linux and macosx)
16:41:46 <dcoutts> I suspect that building with amd64 ghc 6.4 was mis-compiling ghc 6.4.1_pre
16:47:44 <Igloo> Ah, it's x86 that was working for me
17:01:28 <dcoutts> luqui, the rpm has finished uploading (sorry longer than 5min, I didn't notice it finnish)
17:01:42 <luqui> url same as before?
17:01:47 <luqui> yes
17:01:47 <dcoutts> yep
17:03:17 <dcoutts> so I suggest you make a temp dir, unpack it with cpio (see the man page) and then mv the appropriate bits to to /usr/local/(bin|lib) and fix the scripts in the bin dir
17:03:49 <luqui> okay thanks
17:03:50 <dcoutts> and the package.conf
17:03:56 <luqui> I'll report back with my success / lack thereof
17:05:01 <dcoutts> for the package.conf, sed -i 's:/the/old/path:/the/new/path:g' will do it
17:05:46 <luqui> er, cpio -i < ghc641...  is extracting garbage
17:05:58 <luqui> it made a file with a bunch of special characters in its name, etc
17:07:10 <dcoutts> yes I had that the fist time, can't quite remember what I did
17:07:13 <dcoutts> hmmm
17:07:37 <luqui> is rpm a special kind of cpio format
17:08:01 <dcoutts> I don't think so, I definitely used cpio, let me try it again...
17:08:42 <Heffalump> you have to use rpm2cpio to make a cpio from an rpm, don't you?
17:09:57 <luqui> that output is quite a bit more sane than before heffalump
17:10:11 <luqui> still not working, but at least now I know where to look
17:10:25 <dcoutts> or rpm2targz
17:10:44 <dcoutts> I definately used cpio, I can't see how I did it now...
17:11:11 * luqui decides to use rpm2targz, because he understands tgzs
17:11:29 <Heffalump> dcoutts: you made an rpm using cpio?
17:11:48 <dcoutts> Heffalump, no, trying to unpack one
17:11:54 <Heffalump> ah.
17:11:59 <Heffalump> rpm2cpio | cpio -i is my usual.
17:16:00 <luqui> oh crap
17:16:08 <luqui> that package didn't seem to come with hsc2hs
17:16:45 <dcoutts> it has hsc2hs-bin
17:17:05 <dcoutts> you could copy your existing hsc2hs script and jsut change the paths
17:17:38 <dcoutts> hmm, maybe I used file-roller in the end rather than cpio
17:20:50 <luqui> seems to be working
17:21:03 <dcoutts> good good
17:21:53 <luqui> we'll see if the binary that it produces ends up running
17:28:20 <luqui> WOOHOO
17:28:21 <luqui> it works
17:28:25 <luqui> thanks dcoutts
18:13:49 * cm refines his shapr
18:15:06 <timbod> "refines his shapr" ??
18:15:20 <cm> :\
19:35:57 <dons> @code
19:35:58 <lambdabot> StablePtr.hs: {-# OPTIONS_GHC -fno-implicit-prelude #-}
19:39:33 <lispy> dons: howdy
19:40:39 <dons> hey lispy
19:40:56 <lispy> dons: how goes the hacking?
19:41:33 <dons> diving into ghc regress tests at  the moment.
19:42:12 <lispy> oh, hey is hs-plugins not compatible with ghc6.5?
19:42:41 <dons> why? should be ok afaik.
19:43:00 <lispy> i was getting compile errors with it the other day under 6.5
19:43:12 <dons> works fine with 6.4.20050506
19:43:14 <lispy> can't remember now, and i don't have access to that machine right no either
19:43:23 <dons> so that's less than 4 weeks ago.
19:43:32 <dons> oh, maybe 8 weeks.
19:43:34 <lispy> but that's 6.4
19:44:10 <dons> oh right. maybe that was the stable branch, yyeah.
19:44:18 <dons> pass on any errors you have.
19:44:36 <lispy> i can't reproduce anymore or i would
19:44:40 <lispy> at the time i thought it was myfault
19:45:10 <lispy> the machine i was doing that on lost net access
19:45:13 <dons> ok. well, I've not heard any other reports of build failuures
19:45:19 <lispy> and it has a different version of ghc installed now too
19:45:28 <lispy> okay
19:45:43 <lispy> actually my error would be in the logs
19:45:47 <lispy> let me look theer
19:47:09 <MachinShin> hey +
20:04:44 <lispy> dons: http://meme.b9.com/~164b38dd4d0e5fc894821464~/cview.html?channel=haskell&date=050625
20:05:31 <lispy> <lispy> make[2]: Entering directory `/home/dagit/local-data/hs-plugins/src/hi' 21:49:04
20:05:31 <lispy> <lispy> Reading package info from stdin... parse error in package info 21:49:04
20:05:31 <lispy> <lispy> make[2]: *** [/home/dagit/local-data/hs-plugins/plugins.conf.inplace] Error 1 21:49:04
20:05:31 <lispy> <lispy> any idea why hs-plugins would give this error during make?
20:05:58 <dons> hmm. you changed compilers half way through?
20:06:19 <dons> i.e. it used ghc-pkg-6.2.2 when build with 6.4 perhaps
20:06:42 <lispy> it should have all been done with 6.5
20:06:49 <dons> "parse error in package info" or possibly --prefix path was strange for some reason
20:06:54 <lispy> oh
20:06:56 <lispy> okay
20:07:04 <lispy> then that was the whole problem
20:07:20 <dons> ok.
20:07:37 <lispy> with 6.4 i got stuck at a different place, but changing --prefix was how we fixed it
20:08:00 <lispy> well one mystery solved :)
20:08:01 <dons> it is easy enough to create a bogus prefix path, that gets expanded in the package.conf, breaking that file for ghc-pkg
20:11:22 <dons> were you looking to do a bit of Yi hacking?
20:11:43 <lispy> that was when i was trying to get Yi compilied
20:11:55 <lispy> i would like to do some Yi hacking, but technical problems are in my way now
20:12:16 <dons> "technical problems"?
20:12:29 <lispy> i have no idea how to do dev on windows and my wireless has stopped working under linux
20:12:43 <lispy> so i'm without a platform to code on
20:12:43 <dons> argh!
20:12:46 <lispy> yeah
20:13:04 <dons> Q. "how to do dev on windows"? A. "Use linux"'
20:13:04 <lispy> well i could code, but i'm not sure how i would share the code :)
20:13:09 <lispy> heh
20:13:44 <lispy> plus i need 'net access to really code effectively
20:13:52 <dons> true.
20:14:22 <lispy> it's annoying because i have virtually nothing to do, so coding would be fun :)
20:14:45 <lispy> it's made it even more tempting to buy an ibook this weekend :)
20:15:08 <lispy> i'd really like to know why my wireless stopped working
20:15:30 <lispy> about 4 days ago my laptop turned off spontaneously, that was the last time wireless worked in linux
20:15:49 <lispy> and yet windows continues to function
20:16:04 * lispy glares at windows
20:16:12 <dons> oh, clearly the tripod-aliens have  landed and fried all the electronics in your area
20:16:28 <lispy> heh, figure
20:17:09 <dons> i'd watch out for people munching tripods rising up out of the ground, if i were you..
20:17:36 <lispy> i would suspect the neighbors AP has stopped accepting my connections, except it's all the same hardware in windows
20:17:52 <lispy> or i would suspect i changed something in software except i didn't...
20:17:57 <dons> heh. the *neighbours* AP!
20:18:07 <lispy> heh
20:18:17 <lispy> well my the one my roommate bought sucks :)
20:18:40 <lispy> so he unplugged it and packed it away
20:19:16 <lispy> perhaps i should move around the neighborhood and try my luck
20:19:34 <lispy> i'll be this scragly guy in the bushes with his laptop
20:27:42 <cm> dons: did you enjoy war of the worlds? :)
20:30:41 <dons> yeah, I enjoyed the spectacle :) reminded me of my fear of tripod alien robots from childhood
20:31:05 <dons> very effective movie for provoking panic, I think.
