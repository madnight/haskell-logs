00:03:09 <autrijus> Gahhh: it looks like GHC does an append anyway even with -O3
00:06:05 <Gahhh> "even" with ?
00:06:50 <autrijus> "even", as in I expect high optimization level to fold the append away into one constant list.
00:06:53 <autrijus> but it does not.
00:08:16 <Gahhh> that's still better than creating a new list
04:10:42 <metaperl> @seen Igloo
04:10:43 <lambdabot> Igloo is in #haskell. Last spoke 8 hours, 27 minutes and 41 seconds
04:10:43 <lambdabot> ago.
04:18:05 <Igloo> Hmm?
04:18:30 <angelixd> hahaha
04:19:12 <Igloo> metaperl: You don't build hat-ghc6, you build hat
04:19:37 <metaperl> Igloo: so I do apt-get hat instead?
04:19:42 <metaperl> Igloo: so I do apt-get source hat instead?
04:20:05 <Igloo> No, what you've done will work, but that's why i t wants the other compilers
04:20:23 <metaperl> so, the way around those dependencies is apt-get source hat
04:20:24 <metaperl> ?
04:20:32 <Igloo> if you don't care about hat-nhc98/hat-ghc5 you should be able to just remove them from the build-deps in debian/control and have it owrk
04:20:53 <metaperl> are those sensible dependecies?
04:21:11 <Igloo> Oh, you might also need to remove i386 from the Architecture list of the appropriate packages
04:21:22 <Igloo> "sensible dependecies"?
04:21:31 <metaperl> i dont see their necessity...
04:21:41 <metaperl> why is ghc5 a prereq for hat-ghc6?
04:21:59 <Igloo> It's not, it's a prereq for building hat
04:22:13 <metaperl> oh
05:10:26 <metaperl> Igloo: is there an easy way to apply that series of patches for hat? patch -p0 doesnt work
05:13:12 * metaperl retuns to early morning nap
05:18:44 <Igloo> How doesn't it work?
07:23:32 <basti_> y0w
07:25:25 <jyp> hi basti_
07:26:08 <jyp> I was wondering what was the state of the Emacs keymap for yi
07:26:20 <jyp> Is what's in darcs current ?
07:26:46 <basti_> yes
07:26:55 <basti_> no progress so far, had an exam
07:27:13 <basti_> should be: repeat and C-x working, bottom line feedback half way working
07:27:30 <jyp> That seems current then
07:27:36 <jyp> good work anyway
07:27:39 <jyp> :)
07:28:58 <basti_> :))
07:30:45 <jyp> If you want I'll try to add stuff
07:31:17 <jyp> I was wondering, do you know how "Meta-" is supposed to be handled ?
07:31:23 <basti_> go ahead, i won't stop you :)
07:31:29 <basti_> yes, similar to the number entry for repeat
07:32:08 <basti_> should be a simple modification
07:32:17 <jyp> Hmm, I'm more low-level than you here...
07:32:25 <jyp> I mean how to "lex in" Meta keys
07:32:29 <basti_> ah
07:32:34 <basti_> via escape i think
07:32:52 <basti_> (ESC prefix = meta in many environments)
07:33:33 <jyp> ok
07:33:55 <basti_> some environments might use higher bits of "Char" for that.
07:34:05 <basti_> maybe we should keep open that road then
07:34:17 <jyp> I think so too...
07:34:41 <jyp> Actually in emacs "esc" is not necessarily equal to "Meta"
07:34:46 <basti_> no its not
07:35:15 <basti_> but its a quasistandard to translate M-Key to ESC, Key.
07:36:24 <basti_> if you have a better idea, go ahead :)
07:37:00 <jyp> The high-bit solution seems more flexible
07:37:13 <basti_> if you can get any existant environment to send high bits :)
07:37:34 <basti_> without making the user dig in its intestines, that is
07:37:45 <jyp> well I suppose key combinations is something to be handled by the yi core
07:37:58 <basti_> it should be, yes.
07:38:28 <jyp> so we probably should discuss this with the concerned people
07:38:38 <basti_> :)
07:38:45 <jyp> I don't have any strong opinion anyway
07:39:11 <basti_> i think work can be started on the tab completion code now
07:39:48 <jyp> I was just curious because the way "Ctrl-" is handled didn't seem to exented to other modifier
07:39:50 <basti_> its needed for file name entry, and for m-x, and its abstract
07:39:55 <basti_> no it can't.
07:40:46 <jyp> For now I'll try to enhance my understanding of your code ;)
07:41:04 <basti_> i know that i have quite a bizarre style.
07:41:04 <basti_> ;)
07:43:09 <jyp> It's fine by me; there's just a lot of concepts in there
07:43:28 <jyp> some being yi-core, some being emacs-keymap specific
07:43:31 <basti_> you should try to understand the lexers first... everything is built on top of these
07:43:40 <jyp> it's not always easy to tell what is what
07:44:06 <jyp> k
09:58:42 <RemiTurk> good evening
10:00:55 <andersca> hello
10:01:08 <metaperl> RemiTurk: good morning
10:01:23 <metaperl> 10am here in sunny US-CA-Los Angeles!
10:02:50 <Cale> 1pm here :)
10:03:36 <Cale> but it's morning for me :)
10:04:04 <metaperl> Cale: are you in Toronto?
10:04:33 <RemiTurk> 7pm here
10:05:03 <metaperl> RemiTurk: are you in amsterdam?
10:05:28 <RemiTurk> near rotterdam
10:05:33 <mflux_> is there any cool haskell analyzing software around? for example this (for c/java/perl) looks interesting: http://pag.csail.mit.edu/daikon/
10:05:34 <RemiTurk> but I am in the netherlands
10:05:48 <RemiTurk> (and my university is in amsterdam)
10:06:04 <metaperl> RemiTurk: so you have a train commute to school?
10:06:28 <RemiTurk> indeed
10:07:56 <Cale> metaperl: Waterloo, Ontario
10:16:22 <Oejet> Greetings.
10:16:29 <metaperl> Oejet: greetings
10:16:47 <metaperl> what's your latest Haskell exploit?
10:17:22 * Oejet must really polish up his FFI tutorial.
10:18:12 <Oejet> It's been put off for too long.
10:18:31 <basti_> oh i will have a seminar talk about STM
10:20:25 <Oejet> basti_: Uh, nice.  Are there any available concurrency abstractions other than those in the standard library?  I mean something like trees and tables and such?
10:20:35 <basti_> o0
10:20:38 <basti_> not that i knew of
10:24:40 <Oejet> Any new exciting arrows tutorials?
10:26:28 <astrolabe> http://www.haskell.org/tmrwiki/ArrowsIntroduction
10:30:31 <Oejet> astrolabe: Thanks!  It seems this fourth issue does not have a pointer from http://haskell.org/hawiki/TheMonadReader
10:31:20 <astrolabe> I beleive the article isn't finished yet.  Hassle shapr!
10:31:42 <Oejet> Ah, ok.
10:34:24 * RemiTurk leaves for dinner
10:34:25 <musasabi> Oejet: there is my join calculus thing if you want to explore alternative concurrency models.
10:34:26 <Oejet> I will not hassle shapr yet, then.
10:34:42 <RemiTurk> bye
10:35:13 <Oejet> musasabi: I just saw it. :-)
10:36:12 <musasabi> Also the parallel haskell, gdh and eden people have lots of neat toys.
10:37:08 <basti_> eden is rita loogen
10:38:12 <Oejet> Rita loogen means what?
10:38:17 <basti_> -g-
10:38:29 <basti_> thats the name of the person who managed its development
10:38:54 <Oejet> Ah, it helps capitalizing correctly!
10:39:03 <basti_> yes right
10:39:06 * basti_ admits
10:39:52 <astrolabe> or you could use e-prime
12:08:11 <SuperNewb> so, a superNewb question...
12:08:42 <SuperNewb> in the Hugs prompt, is it really unfeasible to evaluate an expression like this: "map getDirectoryContents "." length . hGetContents . openFile "
12:09:11 <SuperNewb> if I am in the Directory module I can't invoke hGetContents or openFile, and viceversa if I am in module IO
12:09:56 <SuperNewb> Is it absolutely necessary to put this command in its own module in its own file ?
12:10:01 <Lemmih> You can use :also to open additional modules.
12:10:14 <SuperNewb> Yeah, I have both modules open with :also already
12:10:18 <SuperNewb> but it doesn't help :S
12:10:41 <xerox> ..or you can refer the functions explicitly by IO.foo, Directory.bar, etc.
12:10:55 <SuperNewb> I also tried that
12:11:10 <SuperNewb> Undefined qualified variable "IO.openFile"
12:11:17 <Lemmih> Installing GHC might be easiest.
12:11:38 <xerox> @index openFile
12:11:40 <lambdabot> System.IO
12:11:41 <SuperNewb> ok, then I renounce with Hugs I guess
12:12:02 <xerox> But @index refer to GHC, in fact.
12:18:51 <Igloo> With ghci you can say   :m + System.IO   to add another module to those you can use unqualified
12:18:56 <Igloo> I never quite understood hugs' system
12:19:10 <SuperNewb> in Hugs :i IO.openFile is working
12:19:27 <SuperNewb> but it isnt in the expression
12:20:31 <xerox> You'd better lookup its documentation if you are willing to keep using it, I think :-)
12:22:06 <SuperNewb> well if no one uses it, why should I
12:22:43 <SuperNewb> I'll try GHC
12:32:27 <basti__> < test clone
12:33:55 <astrolabe> Wow GHC is 47 Megs!
12:34:19 <hellish> Wow, ghc is only 47 megs?
12:34:21 <SuperNewb> yes I found about it a few minutes ago too :S
12:34:44 <SuperNewb> hell it's bigger than the JDK..
12:34:51 <astrolabe> I've been using hugs, but now I want to make a .exe
12:34:57 <SuperNewb> ..that cant be good
12:35:14 <xerox> s/bigg/bett/
12:35:42 <Igloo> My ghc is 80M. It must be almost twice as good as yours.
12:35:45 <SuperNewb> bigger is better ?
12:35:50 <SuperNewb> then Windows beats them all
12:42:39 <musasabi> Debian is much larger than windows ;)
12:49:44 <astrolabe> Hmm I've downloaded GHC but I don't seem to have got the users guide.
12:52:00 <musasabi> astrolabe: http://www.haskell.org/ghc/docs/latest/html/users_guide/index.html
12:53:13 <astrolabe> Oooh Thanks
12:53:35 <mwc> anybody out there using lambda tex? I can't get it to align a guard for some reason
12:53:50 <mwc> lisppaste2: url?
12:53:50 <lisppaste2> To use the lisppaste bot, visit http://paste.lisp.org/new/haskell and enter your paste.
12:55:10 <musasabi> Has anyone worked on hws since the fptools released version?
12:55:26 <musasabi> (hws = haskell web server)
12:56:00 <lisppaste2> mwc pasted "lambdaTeX won't align guards" at http://paste.lisp.org/display/9946
12:56:13 <mwc> anyone able to tell me what I'm doing wrong there?
12:57:10 <mwc> the | otherwise = Nothing gets shoved all the way against the right margin
12:59:19 <xerox> ibid: ping.
13:00:39 <ibid> xerox: pong
13:01:57 <xerox> ibid: hiya, I'm sorry I lost the url you give me the other day, do you still have it?
13:02:11 <ibid> xerox: in my logs, yes. let me grep
13:02:21 <xerox> Thanks.
13:04:04 <frederik> hello
13:04:35 <frederik> having trouble with HSQL build, it runs this command and gets an error:
13:04:35 <frederik> $ /usr/local/bin/ghc build/Database/HSQL.hs -M -ibuild -optdep-f -optdepHSQL.d -I/usr/include/mysql -Isrc/HSQL
13:04:38 <frederik> Could not find module `Database.HSQL.Types':
13:04:41 <frederik>   it is a member of package hsql, which is hidden
13:04:43 <frederik>   (imported from build/Database/HSQL.hs)
13:05:16 <ibid> xerox: 23:46 #haskell:  <ibid> http://cs.wwc.edu/~aabyan/Logic/Book/book/ looks promising
13:05:30 <ibid> xerox: i still haven't looked at it further
13:05:46 <frederik> but when I unregister hsql, it works... so it's like a namespace collision, i don't know what to do though - the package is already hidden...
13:06:13 <xerox> I read the first pages, then disconnected - I'm still searching for something in my native language (Italian) but this could be good enough.
13:06:21 <musasabi> frederik: -hide-package hsql ?
13:07:13 <frederik> musasabi: i get the same error message when i pass that
13:10:30 <frederik> is it a ghc bug?
13:13:22 <mwc> the | otherwise = Nothing gets shoved all the way against the right margin
13:13:48 <mwc> sorry bout that, sneezed and thwacked the right kdb
13:16:05 <frederik> gesundheit
13:17:08 <basti_> in the spirit of literate programming: one should make a texmacs session type haskell
13:20:38 <mwc> ooh, thundershower
13:20:44 <mwc> sounds like a fun time to go swimming
13:20:48 <mwc> back in a bit
13:30:42 <musasabi> frederik: sounds weird - I am using hsql without problems...
13:33:55 <frederik> well me too, once i get it compiled
13:34:21 <frederik> actually, i have modified it a little but nothing which should have affected this behavior
13:46:09 <astrolabe> If I put    PutStrLn "hello" at the hugs prompt, it works, but if I put it in a file and try to compile it then GHC gives a parse error.  What would be a simple compilable program?
13:46:35 <mflux_> main = do putStrLn "hello"
13:46:50 <mauke> main = putStrLn "hello"
13:47:09 <astrolabe> Thanks guys
13:47:12 <wagle> main = putSt<terminated by mauke>
13:47:18 <mflux_> oh, well yeah
13:47:32 <SuperNewb> Now that you are at the keyboard, I have another question...
13:47:36 <SuperNewb> I've been reading from 4 tutorials at the same time, during the last two days. I have the "I can't recall where I saw that example" syndrome
13:47:45 <mflux_> although the point is that the evaluation loop is basically do-construct
13:48:05 <SuperNewb> so for example, when this happens: [1 1] == [2 1]
13:48:11 <SuperNewb> ERROR - Cannot infer instance
13:48:17 <SuperNewb> *** Instance : Num (a -> b)
13:48:18 <SuperNewb> etc..
13:48:24 <SuperNewb> how can I force a type ther
13:48:27 <wagle> [1,1]
13:48:37 <mauke> whoa
13:48:49 <SuperNewb> ehm ah ok
13:48:52 <wagle> applying 1 as a function to 1
13:49:03 <SuperNewb> that's why I wear this nick, very appropiate :O
13:49:17 <wagle> hey, too much lisp
13:50:25 <SuperNewb> I've been learning Haskell coming from Java and I love it
13:50:50 <SuperNewb> it's a pity that there are not so many Haskell jobs
13:51:27 * xerox got one!
13:51:44 <SuperNewb> PhD student?
13:53:09 <xerox> Nope, <http://haskell.org/gtk2hs/> :-)
13:53:38 <SuperNewb> hehe, I applied to SoC too
13:53:50 <SuperNewb> that project looks cool
13:54:00 <xerox> Oh, nice - did you get in?
13:54:20 <SuperNewb> my friend did but I didn't manage to
13:55:00 <xerox> What was your project?
13:55:35 <SuperNewb> I sent a few proposals, the main was in Xwiki: integrate it with Mindmaps
15:56:59 <musasabi> How does hGetBufNonBlocking discern between 1) EOF, 2) there are zero bytes readable ?
15:58:35 <lispy> i don't think it does
16:04:29 <lispy> fun read: http://www.terrybisson.com/meat.html
16:14:49 <basti_> lispy: thanks! beautiful story
16:15:37 <zumadoo> @find gap band
16:15:38 <astrolabe> I wonder if lambdabot read it.
16:15:43 <lambdabot> bzzt
16:17:15 <basti_> band gap?
16:23:19 <basti_> bap gand.
16:31:41 <lispy> banp gad.
16:32:43 <lispy> "Omigod. Singing meat."
16:32:47 <lispy> i love that part
16:32:59 <basti_> -g-
16:35:31 <lispy> i think i've read it three times since it was shown to me
16:35:39 <lispy> it's just fun
16:51:30 <gzl> hmm
16:51:59 <gzl> I have a split window in emacs with a code file in one pane and ghci in the other, but when I'm in ghci, it doesn't let me use C-x o to switch back. what's the deal?
16:52:26 <pimaniac> check to see if emacs rebound it
16:52:30 <pimaniac> C-h k C-x o
16:53:37 <gzl> oh, never mind. it was because I was using M-x term and not M-x shell
16:53:42 <gzl> in shell it works
16:53:52 <gzl> in term I can't do C-h either
16:54:24 <pimaniac> emacs doesnt have an inferior haskell mode?
16:56:26 <pimaniac> wow, it doesnt. :-|
16:57:27 <gzl> oh, maybe you know about this too. when I open shell mode
16:57:28 <pimaniac> well, the one at http://www.iro.umontreal.ca/~monnier/elisp/ does.
16:57:34 <gzl> the prompt shows up with all these crappy formatting characters around it
16:57:49 <pimaniac> did you change the prompt in your bashrc?
16:58:29 <gzl> I'm using zsh, and yes. there are some colors which it doesn't understand, but even worse, if I export a simple prompt (say "> ") it has a bunch of crap
16:59:04 <pimaniac> interesting
16:59:05 <gzl> this is what it shows if i export "> ": ^[[m^[[23m^[[24m^[[J> ^[[K
16:59:14 <pimaniac> is emacs running zsh in shell mode?
16:59:15 <gzl> needless to say, it's irritating. :)
16:59:18 <gzl> yes.
16:59:33 <gzl> bash doesn't have the same problem.
16:59:47 <pimaniac> try putting the simple prompt in ~/.emacs_zsh
17:00:29 <gzl> no cigar
17:00:31 <gzl> still puts crap around it
17:00:39 <gzl> it uses the new prompt, but the surrounding crap is still there
17:01:08 <gzl> I wonder why this is only happening with zsh
17:01:23 <pimaniac> is it a color at a normal terminal?
17:02:01 <gzl> is what a color?
17:02:11 <pimaniac> the prompt, sorry
17:02:23 <gzl> the prompt is colored by default, but when I input the simple one, it's not colored.
17:02:37 <pimaniac> interesting
17:03:01 <pimaniac> it looks like the best you can do is tell emacs to use bash, and use zsh as your normal shell
17:03:14 <gzl> yeah, that's fine. how do I do that?
17:03:56 <pimaniac> well, try this first
17:04:08 <pimaniac> put "[[ $EMACS = t ]] && unsetopt zle" in your .zshrc
17:04:38 <basti_> haskell is the power.
17:05:03 <gzl> ok.
17:05:08 <basti_> i wanted to know how my terminal env mangles "Meta" keystrokes
17:05:13 <basti_> do sequence (repeat (getChar>>=putStr.show))
17:06:12 <pimaniac> gzl: did that work? :)
17:06:23 <gzl> no
17:06:49 <pimaniac> damn.
17:07:23 <pimaniac> put this in your .emacs then
17:08:05 <pimaniac> (setq explicit-shell-file-name "/bin/zsh")
17:09:32 <gzl> ok
17:09:35 <pimaniac> bash, rather
17:09:40 <pimaniac> you want bash. :-P
17:10:15 <gzl> is there a way of getting emacs to reread .emacs without restarting it?
17:10:34 <pimaniac> yeah, C-x e on the expression you added
17:10:44 <pimaniac> just after the )
17:11:23 <gzl> do I have to type out hte command and select it before running that?
17:11:40 <pimaniac> is it in your .emacs?
17:11:44 <gzl> it gives me a no kbd macro defined error
17:11:46 <gzl> yes
17:11:53 <pimaniac> C-x C-e, sorry
17:11:55 <gzl> ahh
17:12:10 <gzl> ahh
17:12:11 <gzl> now it works
17:12:12 <pimaniac> minibuffer should flash something
17:12:15 <gzl> yeah
17:13:04 <pimaniac> yay
17:14:20 <MachinShin> hey all
17:16:25 <gzl> cool, thanks
18:03:29 <gzl> wtf
18:03:37 <basti_> yes w00t
18:03:41 <basti_> i'll go to bed now
18:03:42 <basti_> wtf.
18:04:03 <gzl> I'm getting an undefined symbols error when I try to compile a file with nothing but (main = do putStrLn "Hello World") in it
18:04:14 <gzl> it works fine in ghci
18:06:05 <gzl> any ideas?
18:06:54 <dons> gzl, what exactlyy is the error?
18:07:41 <dons> what compiler?
18:11:10 <Gahhh> yay I got my first ghc bug message
18:11:13 <wagle> works for me just now:
18:11:14 <wagle> The Glorious Glasgow Haskell Compilation System, version 6.4
18:11:39 * wagle sweeps Gahhh under the rug
18:18:13 <gzl> sorry, I got disconnected
18:18:23 <gzl> /usr/bin/ld: Undefined symbols:
18:18:24 <gzl> _ZCMain_main_closure
18:18:24 <gzl> ___stginit_ZCMain
18:18:24 <gzl> collect2: ld returned 1 exit status
18:18:29 <gzl> GHC 6.4
18:19:21 <gzl> dons: it's on OS X, too, if that makes a difference. which it might.
18:20:23 <Igloo> You haven't got a "module Foo where" at the top?
18:20:27 <gzl> I do
18:20:52 <wagle> gzl: i just did it on macosx 10.3
18:20:57 <gzl> I'm using 10.4.
18:20:58 <dons> what happens if you give it a 'module Main where', and rename the file to Main.hs
18:21:16 <gzl> ah, nice, it works.
18:21:16 <Igloo> So when you said "a file with nothing but" above you were, in fact lying to us?  :-)
18:21:26 * gzl pokes Igloo in the eye.
18:21:48 <wagle> libraries messed up?
18:23:46 <gzl> no, now it works
18:23:48 <gzl> the renaming did it
18:23:51 <gzl> thanks. :)
18:27:22 <gzl> is there a built-in function that takes an element and a list and returns the number of occurrences of the element in the list?
18:27:53 <gzl> I could think of some ways of doing it
18:28:35 <gzl> but if there's something simpler than length (filter (== element) list)
18:28:40 <gzl> then that would be cool.
19:13:28 <metaperl> hello, I really need some help understanding the source of this exception: http://scannedinavian.org/~metaperl/haskell/craft-of-fp/q/trace2.txt
19:24:44 <metaperl> never mind... i figured out how to use Debug.Trace
19:26:50 <Emmiek> Hi
19:27:02 <Emmiek> Max?
19:31:49 <heatsink> how did you know my real name?!!!
19:31:52 * shrimpx wonders why domain theory keeps talking about _least_ upper bounds in posets when upper bounds are unique
19:32:24 <heatsink> shrimpx: if 5 is an upper bound of a set, then 6 is also an upper bound
19:32:55 <shrimpx> how is 5 an upper bound when 5 < 6?
19:33:15 <shrimpx> it's an upper bound in the subset not containing 6 maybe
19:33:17 <heatsink> If they are all less than 5, they are also all less than 6
19:34:42 <heatsink> shrimpx: is there a set that contains 6 and is upper-bounded by 5?
19:34:45 <shrimpx> so as far as i know, an upper bound of (S,<) is x such that y < x for all y in S. if 5 and 6 are both in S, they can't both be upper bounds
19:35:19 <shrimpx> now the upper bound of a _subset_ of S, that might be a different thing
19:35:36 <shrimpx> if the upper bound can be taken outside of that subset
19:36:19 <shrimpx> LUB makes sense in preorders, afaict, however
19:36:27 <heatsink> what is a preorder?
19:36:45 <shrimpx> well maybe not
19:37:02 <shrimpx> it's a set ordered by a reflexive transitive relation
19:37:09 <shrimpx> but not antisymmetric
19:37:30 <shrimpx> so you can have equivalent elements
19:37:37 <MachinShin> man. my math is rusty, that all looked like gobbledygook to me :P
19:37:44 <heatsink> I thought orderings had to be antisymmetric
19:37:53 <shrimpx> partial orders do
19:37:55 <shrimpx> by definition
19:38:39 <Gahhh> isn't there somebody in #math who can answer that
19:38:45 <shrimpx> heh
19:38:54 <shrimpx> i think maybe i figured it out
19:39:17 <heatsink> I see what you're saying, in a poset there should be only one upper bound...
19:39:28 <shrimpx> yea
19:39:46 <Gahhh> least upper bound is a bad name if it's for a unique thing.
19:40:03 <shrimpx> but i think when you take the upper bound of a subset of a poset, there are several
19:40:18 <shrimpx> or something
19:40:25 <Gahhh> a unique subset has a unique upper bound, too
19:40:41 <Gahhh> you could say the least upper bound of any subset of a certain set, tho
19:41:09 <shrimpx> hmm
19:41:26 <Gahhh> maybe planetmath.org helps
19:41:57 <Gahhh> http://planetmath.org/encyclopedia/LowestUpperBound.html
19:41:58 <shrimpx> oh ok i figured it out
19:42:25 <shrimpx> ya so the upper bound is taken from the outer set, so there are several
19:43:04 <Gahhh> yeah
19:43:22 <heatsink> so I was right in the beginning
19:43:22 <Gahhh> my age has an upper bound of 2534. Neat.
19:43:27 <heatsink> before I understood what you were asking
19:43:34 <heatsink> and then you went and confused me!
19:43:59 <shrimpx> ya i was right too actually
19:44:01 <shrimpx> [19:33] (shrimpx) how is 5 an upper bound when 5 < 6?
19:44:01 <shrimpx> [19:34] (shrimpx) it's an upper bound in the subset not containing 6 maybe
19:44:09 <shrimpx> math rules at confusing everyone
19:44:13 <heatsink> yea
19:44:14 <Gahhh> no
19:44:50 <shrimpx> hooray least upper bounds then!
19:45:01 <Gahhh> the definition is precise. Unfortunately it is a bit weird from an English text point of view.
19:46:14 <Gahhh> woohoo women's beach volley
19:55:19 <metaperl> hello, I need some help understanding a function of mine: http://scannedinavian.org/~metaperl/haskell/craft-of-fp/q/trace3.txt
19:55:58 <gzl> ugh, I'm blanking. if I'm in a do block, and I want to "store" (sum list) in a variable x for use in a subsequent step, how do I do that?
19:56:43 <gzl> sort of like a let binding.
19:57:17 <Gahhh> you can do something like do {x <- return 1; print x;}
19:57:33 <gzl> oh, wait, let bindings in a do block. never mind.
19:57:40 <gzl> * let bindings work
19:58:48 <metaperl> http://scannedinavian.org/~metaperl/haskell/craft-of-fp/q/trace3.txt
19:58:55 <metaperl> great. now anyone want to help me? http://great. anyone want to help me? http://scannedinavian.org/~metaperl/haskell/craft-of-fp/q/trace3.txt
20:19:00 <gzl> this is weird
20:19:35 <gzl> I have a function that takes two [Int]s and produces a Floating
20:19:42 <gzl> it works fine in ghci if I use it directly
20:20:08 <gzl> but I get an error saying "No instance of Floating Int" when I try to use it in a do block and print out the result
20:20:16 <gzl> what's the deal?
20:20:57 <metaperl> gzl: maybe paste at paste.lisp.org
20:21:14 * metaperl wonders when someone will address his question: http://scannedinavian.org/~metaperl/haskell/craft-of-fp/q/trace3.txt
20:22:57 <metaperl> hmm, it looks like some haskellers have a social life. either that or burnt out from ICFP contest
20:26:32 <gzl> unfortunately, the code is kind of long
20:27:47 <heatsink> metaperl: find where (!!) is called, and replace that with a function that prints trace info
20:28:37 <metaperl> heatsink: ok, but why would I get such different results based on which of the 2 shown lines I enable?
20:28:46 <metaperl> the output should be about the same
20:31:19 <heatsink> I can't tell from what you've shown
20:33:21 <metaperl> heatsink: how come Haskell doesnt give me more info? like a stack backtrace or something?
20:35:25 <metaperl> actually, I understand what the issue is and why !! is being called out of bounds. imgOverlap is saying that the images overlap and then characterAt is trying to use !! to access the character at that position but it is an out of bounds index it is trying to access
21:16:33 <metaperl> heatsink: i fixed it . thanks
21:50:02 <dons> metaperl, saw your email. isn't this just laziness causing the interleaving?
21:50:20 <metaperl> dons: I dont know :)
21:50:21 <dons> if you need an explicit ordering, work in a monad
21:50:31 <metaperl> that was another thing I wanted to ask on #haskell
21:50:45 <dons> ok. it *is* laziness ;) this is what happens when you use an impure function like trace
21:50:55 <metaperl> probably 95% or more of computer programming languages are eager
21:51:17 <dons> " The 'trace' function is not
21:51:17 <dons> referentially transparent, and should only be used for debugging, or for
21:51:18 <dons> monitoring execution. "
21:51:23 <metaperl> why was the choice made for Haskell to be lazy? If I tell a program to go do something, it's because I expect that it will need to be done
21:51:30 <metaperl> dons: thanks for the input on trace... I appreciate that
21:52:12 <metaperl> for example, if I start up apache and want to load a bunch of database tables into variables to speed up web server response... Haskell will be lazy about doing it
21:52:39 <dons> there are many reasons to have laziness. 2 i can think of are (1) it makes operational semantics easier (as you don't need to specify explicit  order of eval everywhere), (2) you can do more things
21:52:50 <dons> where "more things" == infinite data structures
21:53:23 <dons> @eval take 3 [1..]
21:53:24 <lambdabot> [1,2,3]
21:53:38 <dons> @eval zip "laziness" [1..]
21:53:39 <lambdabot> [('l',1),('a',2),('z',3),('i',4),('n',5),('e',6),('s',7),('s',8)]
21:54:26 <dons> we throw around suspendend computations like crazy in haskell, knowing they won't be evaluated till needed, and then that results will be shared between multiple uses. it's cool, it's lazy!
21:54:36 <metaperl> lol
21:55:10 <dons> of course, if we need certain things to happen before others, then you use a monad, which captures the ordering requirement
21:55:32 <metaperl> I see
21:56:10 <metaperl> are you doing a Ph.D in Australia dons?
21:56:22 <dons> so your problem is that 'trace' is a side-effecting function running in pure code, where order of evaluation is undefined -- so you get interleaved results.
21:56:26 <dons> yep :)
21:56:32 <dons> @timein Sydney
21:56:35 <lambdabot>  Sunday, July 17, 2005 at 2:57:37 PM EST
21:56:51 <metaperl> what is your Ph.D on? do you have a webpage?
21:57:07 <dons> @google Don Stewart site:.au
21:57:08 <lambdabot> http://www.cse.unsw.edu.au/~dons/
21:57:10 * dons crosses fingers
21:57:11 <dons> yes!
21:57:35 <dons> the project description is a bit out of date, see the papers to get an idea of what I'm doing.
21:58:24 <Gahhh> I am not sure if my in-place array updates are really in-place.
21:59:10 <Gahhh> the profiler shows increased memory allocation for repeated array updates.
21:59:58 <dons> but is it just local variables, and any 'let's, or is it really the array being copied?
22:00:15 <Gahhh> I'm just messing with a mutable IOUArray
22:00:35 <dons> oh, that's in place for sure. it's just access to raw bytes in memory
22:01:04 <Gahhh> it should be, but when I increase the number of times the array gets updated, the memory usage rises.
22:01:37 <Gahhh> I shall paste this
22:04:14 <Gahhh> http://haskell.org/hawiki/HaskellIrcPastePage
22:05:16 <metaperl> Gahhh: I like paste.lisp.org/new/haskell much better
22:05:39 <Gahhh> for n=4000, total alloc=32Mb. n=400000 -> 41,607,048
22:07:25 <dons> argh. explict layout! :/
22:07:32 <dons> death to semi-colons!
22:07:39 <Gahhh> heh
22:10:35 <dons> you should post module imports too when pasting code..
22:10:46 <Gahhh> oops sorry
22:11:00 <dons> can you just post them here to save me some time ;)
22:11:10 <Gahhh> import Data.Array.IO
22:11:10 <Gahhh>  import System(getArgs)
22:12:30 <dons> hmm. did you compile with -O ?
22:12:45 <Gahhh>  ghc -O2 -prof -auto-all
22:13:30 <dons> it's fast, though. even for large `n'
22:13:50 <Gahhh> did you compile it on your machine ?
22:14:04 <dons> yep.
22:14:15 <Gahhh> do the memory usages look similar ?
22:14:36 <dons> yep, I think so. I'm investigating.
22:14:48 <Gahhh> aight
22:15:00 <dons> n=1, why get: 32,006,324 total allocs anyway.
22:15:06 <dons> s/why/I/
22:15:23 <Gahhh> heh
22:15:30 <Gahhh> I was expecting 5 Meg tops for any n
22:15:46 <dons> n=1,000,000  I get total alloc =  56,007,812 bytes
22:16:06 <Gahhh> I am  using ghc 6.4 mingw
22:16:13 <dons> so I wonder what happens if we stop passing 'arr' as an arg.
22:17:29 <Gahhh> dont we have to move the definition of countDown into the do block then ?
22:18:49 <dons> and you'll probably want unboxed ints in the array, yes?
22:19:02 <dons> but we'll lookk at that in a minute or two
22:19:57 <Gahhh> unboxed vs boxed shouldn't affect the outcome much
22:21:23 <dons> ahh ha! got it :)
22:21:33 <dons> it's just the cost of the (boxed) loop counter.
22:21:35 <dons> try this:
22:21:44 <dons> countDown :: (IOUArray Int Int) -> Int -> IO ()
22:21:45 <dons> countDown arr (I# n) = do
22:21:45 <dons>         let loop 0# = return ()
22:21:45 <dons>             loop m# = do
22:21:45 <dons>                 writeArray arr 0 0
22:21:47 <dons>                 loop (m# -# 1#)
22:21:50 <dons>         loop n
22:21:58 <dons> i.e. no space leak on the loop counter
22:22:19 <dons> n=1,000,000 == n=1 ==         total alloc =  32,007,844 bytes
22:22:38 <dons> import GHC.Int
22:22:38 <dons> import GHC.Base
22:22:47 <Lemmih> @type GHC.Exts.reallyUnsafePtrEquality#
22:22:49 <lambdabot> forall a.
22:22:49 <lambdabot>              a -> a -> GHC.Prim.Int#
22:23:01 <dons> oh my.
22:23:59 <Gahhh> argh
22:24:02 <dons> Gahhh, almost as good is:
22:24:03 <dons> countDown arr n = do
22:24:03 <dons>         let loop 0 = return ()
22:24:03 <dons>             loop m = do
22:24:03 <dons>                 writeArray arr 0 0
22:24:05 <dons>                 loop $! (m - 1)
22:24:08 <dons>         loop n
22:24:25 <dons> but the unboxed version is a perfect loop
22:24:44 <Gahhh> what is the point behind boxing the loop counter ?
22:25:00 <dons> sorry?
22:25:11 <dons> I *unbox* it. then the loop counter can be stored in a regitser
22:25:12 <Gahhh> I mean, why are they boxed by default
22:25:17 <dons> semantiics
22:25:43 <dons> if we hit the right optimising flag, we'd probably convince ghc to unbox it too
22:26:03 <mwc> you know what sucks? When there's no one awake to brag about how you reduced a 2 page pseudocode algo to 13 lines of haskell, when two of those are just aliases
22:26:40 <Gahhh> isn't 32Mb still a bit high ?
22:26:58 <dons> to allocate a 1,000,000 elem boxed array?
22:27:11 <mwc> (and then you have to brag about how awesome you are to people who don't care :( )
22:27:53 <Gahhh> oh it's no longer an unboxed array ?
22:28:41 <dons> I'm wondering what's going on. looking at docs..
22:33:22 <dons> data UArray i e = UArray !i !i ByteArray#
22:36:11 <dons> newtype IOUArray i e = IOUArray (STUArray RealWorld i e)
22:38:12 <mwc> Is there an electronic version of the Haskell 98 report?
22:38:37 <mwc> Trying to find out if otherwise is actually supposed to be a keyword or just otherwise = True
22:39:07 <dons> @where haskell98
22:39:07 <lambdabot> http://haskell.org/onlinereport/
22:39:11 <Gahhh> ghc says otherwise = True
22:39:42 <mwc> Gahhh: yeah, that strikes me as a bad implementation
22:39:58 <heatsink> why?
22:40:14 <Gahhh> it's a guard
22:40:15 <dons> huh?
22:40:20 <dons> @eval otherwise
22:40:22 <lambdabot> True
22:40:41 <mwc> dunno, just tripped my bad things detector
22:41:09 <mwc> I guess since you can't redefine it it's kosher
22:42:20 <Lemmih> But you *can* redefine it...
22:42:37 <mwc> You mean inside a module?
22:43:14 <mwc> Lemmih: otherwise = False and wreak havoc?
22:43:28 <Lemmih> import Prelude hiding (otherwise); otherwise = False
22:43:42 <mwc> or at least meet Mr. Exception?
22:43:56 <mwc> Oh, hmm, I didn't know you could specify how to import prelude
22:45:30 <Gahhh> dons: I think the unboxing of the index vars should not have changed anything. I see no reason for a leak there.
22:47:10 <dons> yeah therre is. the thunk representing (n - 1) is created. you end up with a lot of allocs
22:47:23 <dons> by replacing that with a strict, unboxed addition, no allocs are made
22:47:34 <dons> s/addition/expression
22:48:14 <Gahhh> yeah but then "n" could be gc'ed
22:48:44 <dons> ?
22:48:51 <dons> I thought we were trying to avoid allocations
22:49:30 <Gahhh> I thought you were saying that it was not the unboxed array that was leaking, but the index vars
22:49:41 <dons> it was the loop counter
22:50:06 <dons> the lazy (n - 1) expression
22:50:29 <dons> forcing it immediately helped, with $!,
22:50:39 <dons> doing it entirely inplace with unboxed arith was even better
22:51:29 <dons> you'll often see unboxed loops like this in library code
22:52:47 <dons> I'm still trying to work out why a 1,000,00 elem Int array uses 32M, however.
22:54:30 <dons> btw, if space use is critical, a Ptr CChar, which you them malloc is really good for flat unboxed chunks of memory
22:55:12 <Gahhh> wouldn't the "if (n == 0)" cause the n-1 to be evaluated in the next call ?
22:57:22 <dons> yep, that's a pattern match, i.e. a `case', which forces the value.
22:57:33 <dons> but it still gets allocated beforehand
22:57:50 <dons> so every time round a suspended (n - 1) is allocated
22:58:03 <dons> it's a standard space leak, I would say
22:58:30 <dons> I think I even used this as an example in a talk about strictness in Haskell a couple of years ago.
22:59:17 <Gahhh> is there a way to rewrite this without unboxing ?
23:00:10 <dons> you can just use normal Ints, and force them with $!, maybe rearranging slighly to make sure values are used immediately
23:01:59 <Gahhh> I thought tail calls eliminated this sort of thing
23:03:35 <Gahhh> Is there a document that describes how things are allocated for those 'thunks' you're talking about ?
23:03:53 <dons> here for example is some code from Data.List:
23:03:55 <dons> sub :: [a] -> Int# -> a
23:03:55 <dons> sub []     _ = error "Prelude.(!!): index too large\n"
23:03:55 <dons> sub (y:ys) n = if n ==# 0#
23:03:55 <dons>            then y
23:03:57 <dons>            else sub ys (n -# 1#)
23:04:05 <dons> yep, let me find the ref.
23:04:51 <dons> or our beloved drop/take:
23:04:52 <dons> drop (I# n#) ls
23:04:52 <dons>   | n# <# 0#	= ls
23:04:52 <dons>   | otherwise	= drop# n# ls
23:04:52 <dons>     where
23:04:55 <dons> 	drop# :: Int# -> [a] -> [a]
23:04:57 <dons> 	drop# 0# xs      = xs
23:05:00 <dons> 	drop# _  xs@[]	 = xs
23:05:02 <dons> 	drop# m# (_:xs)  = drop# (m# -# 1#) xs
23:05:06 <dons> unboxed counters == fast loops
23:07:32 <dons> @google The Spineless Tagless G-Machine
23:07:33 <lambdabot> http://citeseer.ist.psu.edu/hammond93spineless.html
23:07:51 <dons> there's a link from the haskell.org/ghc documentation page
23:07:52 <Gahhh> what do I need to include to get those # operators ?
23:08:13 <dons> import GHC.Base
23:08:14 <dons> import GHC.Int
23:08:14 <dons> import GHC.Word
23:08:49 <dons> oh, you probably don't need Word
23:09:07 <dons> or Int
23:09:23 <dons> and you do need -fglasgow-exts
23:09:39 <Gahhh> ah
23:10:01 <Gahhh> Int# is a type. hmm
23:10:55 <dons> yep, with an I# constructor
23:11:13 <dons> sorry, data Int = I# Int#
23:11:54 <Gahhh> how to convert between Int and Int# ?
23:12:25 <dons> pattern matching on the I# consturctor
23:12:49 <dons> @type GHC.Base.I# 1#
23:12:51 <lambdabot> Int
23:14:11 <dons> @type case 1 of GHC.Base.I# n -> n
23:14:13 <lambdabot> GHC.Prim.Int#
23:14:39 <dons> @paste
23:14:40 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
23:14:44 <dons> just posted my version
23:17:11 <Gahhh> thanks. Now I too have flat 32Mb usage for any n, lol :)
23:19:59 <Gahhh> btw, the unsafeWrite doesn't change anything
23:20:14 <dons> nope. I was just playing around.
23:20:29 <dons> since we know we're inside bounds, may as well not bother with another bounds check
23:21:45 <dons> oh, I think it is unsafeIndex that is more of a winner when removing redundant bounds checks
23:22:34 <Gahhh> ok I parameterized the array size and number of reps
23:23:01 <Gahhh> 100 ints, 1 update = 12k, 1000 ints, 1 update = 41k
23:23:10 * Gahhh scratches head
23:24:51 <dons> what about foor larger sizes. small sizes get swammped by other stuff going on
23:25:34 <Gahhh> 10k -> 329k, 100k -> 3.2Mb for 1 update
23:25:44 <Gahhh> this is more linear
23:26:00 <Gahhh> 1M -> 32Mb
23:26:02 <dons> anyway, it seems to be using around 8x the size it should, right? 32M for 1M x 4byte Ints
23:26:09 <Gahhh> yes
23:26:51 <dons> I wonder how the array is constructed. if it isn't just a raw malloc of (sizeOf(undefined :: Int) * 1000000)
23:27:06 <Gahhh> 10M -> 320Mb for 1 update. same for 100 updats
23:27:57 <dons> well, I know you can side step this by doing your own allocs. but perhaps it's worth a post to glasgow-haskell-users@ to find out what the story is?
23:28:19 <Gahhh> yeah I'd like to know what's going on
23:28:20 <dons> maybe with a  little table or gnuplot of allocs versus array size
23:28:42 <Gahhh> the whole reason I am doing this is I rewrote one of the lang shootout solutions in imperative style
23:28:47 <Gahhh> but I am not any faster
23:29:22 <Gahhh> I seemed to be using too much memory. Now I know about the unboxing.
23:30:07 <Gahhh> lol ?
23:30:34 <Gahhh> The "boxed" array uses 4M for 1M Ints, 1 update.
23:30:47 <dons> hmm.
23:30:59 <dons> i'll try a raw/ffi unboxed malloc-array
23:31:11 <Gahhh> yep, the boxed one is right on the money for mem usage
23:31:39 <dons> yeah. this is interesting.
23:32:09 <Gahhh> now, what does a 'box' constitute ? Is it a small struct that has a few numbers in it per value ?
23:32:40 <dons> it's a closure, a heap-allocated value, like an Object in Java.
23:33:03 <Gahhh> is the size of the box the same for any object ?
23:34:30 <dons> I think there are various optimisatoins (unpacking, for example) that mess withthis, but basically yes. see the STG paper
23:34:42 <Gahhh> Oops
23:34:51 <Gahhh> I removed the #'s, and I still have the right mem usage
23:34:51 <pejo> Since you guys seem to be talking implementation details, is all this stuff collected somewhere (SPJ's book?) or should one go dig for articles?
23:35:46 <dons> ah, interesting Gahhh. I wonder why that is.
23:36:18 <dons> maybe inlining of array code is enough for the compiler to see that the index is used immediately
23:36:25 <dons> -ddump-simpl is the way to find out, anyway
23:36:26 <Gahhh> 10M Ints, 1000 updates -> 40Mb
23:36:34 <dons> pejo, the Spineless Tagless G-machine paper.
23:37:15 <pejo> dons, ok, thanks.
23:51:49 <dons> Gahhh, you might be interested in the FFi/malloc version
23:51:51 <dons> @paste
23:51:53 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
23:53:39 <dons> looks like writing to arr[0] makes it too easy, as the full array isn't getting allocated
23:55:31 <dons> hmm. touching 1M elems of the FFI array also uses 32,007,712
23:55:45 <dons> what's going on?
23:58:00 <dons> hmm. that 32M is on the Haskell side too. whereas the malloc isn't recorded in the usage.
