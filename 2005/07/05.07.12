00:01:06 <Itkovian> shapr: ah well, maybe i just buy expensive ones then, sorry
00:02:32 <earthy> the everyday earbuds I see are conical...
00:02:43 <earthy> but yeah, same shape for each ear
00:03:01 <shapr> I wear earbuds more than an hour a day, while unicycling. The cables really get in the way, and I need to find a better way to keep my music player from moving around.
00:03:03 <astrolabe> You should make a small worm hole that reverses the chirality of things passed through it.
00:03:25 <earthy> owh, that kind of earbuds
00:03:28 <shapr> Speaking of which, have you heard the word on other-hand sugars?
00:03:37 <earthy> yup, I heard
00:03:43 <astrolabe> Yeah :)
00:03:44 <shapr> Did they end up producing them?
00:03:49 <earthy> not that good for you, and not that sweet
00:03:57 <shapr> Oh, I wanted to try them.
00:04:03 <astrolabe> And apparently lime flavour is reversed lemon flavour
00:05:03 <lament> you unicycle!!!
00:05:05 <lament> marry me
00:05:13 <lament> is it hard?
00:05:27 <shapr> I don't know, I've never married anyone before.
00:06:03 <Gahhh> I saw a guy unicycling a few days ago
00:06:24 <shapr> Riding a unicycle isn't difficult. Doing cool tricks can be difficult. Riding up and down mountains is difficult and very much fun.
00:06:51 <Gahhh> Is there a shuffle function in the standard libs ?
00:06:56 <Pseudonym> We have other-hand sugars on the market here.
00:06:58 <shapr> If all goes well my third unicycle will be working in just a few hours.
00:06:59 <Pseudonym> We have for a few years.
00:07:20 <shapr> Which handed is the normal one? left-handed maybe?
00:07:28 <Pseudonym> L-sucralose, I believe it's called.
00:07:50 <astrolabe> I've got a feeling the 'inverted sugar' you get in golden syrup has something to do with this.
00:08:18 <Pseudonym> http://www.splenda.com/ <- This is the stuff
00:08:36 <Gahhh> oh, splenda
00:08:56 <Gahhh> I had splenda powered Diet Coke a week ago
00:09:08 <Pseudonym> Pretty good stuff, too.
00:09:10 <lament> shapr: yeah but i don't believe you that it isn't difficult :)
00:09:14 <shapr> We have cool conversations on this channel.
00:09:19 <Gahhh> yeah it was sweeter than plain diet coke.
00:09:27 <lament> shapr: what happens when you start losing balance?
00:09:33 <shapr> lament: It's not. I learned at the age of 32, and I bet you're younger.
00:09:54 <Gahhh> lament: I suppose you fall heh :)
00:10:04 <lament> ...
00:10:12 <lament> shapr: how much do you bet?
00:10:19 <shapr> Not much, this is irc.
00:10:22 <Gahhh> mmm, paypal
00:10:28 <lament> damn
00:10:35 <lament> (but yeah.. i'm younger)
00:10:51 <shapr> Anyway, if you're perfectly in balance you can't go anywhere.
00:10:59 <shapr> You have to lean to move.
00:11:00 <Gahhh> like walking
00:11:19 <lament> shapr: that sounds really, really scary.
00:11:32 <shapr> It's the opposite, it's really calming, focussing, and it feels like flying.
00:11:38 <lament> I've seen people go down stairs on a unicycle. It's impressive.
00:11:45 <shapr> Yeah, I can't do that yet.
00:11:50 <lament> have you tried? :)
00:11:56 <Pseudonym> Ah, I tell a lie.  Sucralose isn't left-handed sugar.
00:11:59 <shapr> Nope, not quite that brave.
00:12:01 <Pseudonym> It's a slightly modified sugar.
00:12:15 <shapr> But I'll try it in the next few days, especially with my new unicycle.
00:12:17 <Pseudonym> Basically, they change a couple of -OH radicals to -Cl.
00:12:30 <Gahhh> ah
00:13:05 <Gahhh> http://en.wikipedia.org/wiki/Tagatose
00:13:21 <shapr> Programming pulls me away from reality, I sit inside my head and consider how to get the puzzle pieces together. I tend to do that a lot even when I'm away from my computer. You can't do that while unicycling though, you fall over.
00:13:40 <shapr> Unicycling teaches you to be right here where you are, or fall over.
00:13:58 <lament> Then i'll probably fall over.
00:14:22 <lament> But at least, it's not "be right where you are AND fall over"
00:15:34 <shapr> I lost 15 kilos when I started unicycling, so it's good exercise.
00:17:04 <Gahhh> it looked physically intense
00:18:22 <lament> shapr: only when you're beginning i hope?
00:18:36 <lament> shapr: What's the comfortable cruising speed on a unicycle?
00:20:07 <Itkovian> golden syrup is awesome
00:20:44 * earthy had that focussing thing with climbing and acrobatics
00:21:03 <earthy> should really start doing at least one of those two again
00:21:20 <earthy> (as I don't have it anymore when dancing)
00:21:33 <shapr> Cruising speed depends on wheel size. You can keep up with a biker on a wheel that's 26 inch or larger.
00:21:50 <earthy> 26 inch is pretty big for a unicycle though
00:21:56 <Itkovian> the balance seems to be pretty hard to me
00:22:14 * earthy usually sees 20 inch on unicycles
00:22:21 <shapr> 20 inch is for trials and training.
00:23:15 <shapr> Trials is roughly similar to skateboarding tricks. You hop up, drop down, do crank grabs, pedal grabs, seat out jumps, etc.
00:23:42 <shapr> Trials is mostly done in the city, where you have lots of fun concrete shapes to explore.
00:24:26 <shapr> 24 inch is the standard size for mountain unicycles, it's large enough to get places but small enough to hold up to any amount of abuse.
00:24:44 <shapr> earthy: Can you unicycle?
00:24:53 <earthy> unfortunately, no
00:25:05 <earthy> never had the guts to try
00:25:14 <earthy> a number of people from our acrobatics group could, however
00:25:18 <shapr> Itkovian: Riding a unicycle is more difficult than riding a bicycle, but not extremely so.
00:26:03 <Itkovian> it seems to me that you can flip over forward and backwartd besides just sideways
00:26:31 <earthy> the sideways is helped, just as with a normal bike, by the centrifugal forces of the wheel
00:26:55 <shapr> I've never flipped at all. One great advantage of unicycles is that you can quickly lift up your feet and put them back down and then you're standing up and the unicycle has moved a meter away.
00:29:13 <shapr> I think unicycles are safer than bicycles in general. It's easier to bail out and cruising speed is slower in general.
00:29:34 <shapr> Of course, if you get a 36" wheel like dcoutts_, you'll go significantly faster.
00:29:52 <lament> but then it's no longer safe?
00:30:32 <shapr> The only unsafe part of unicycling imho, is getting your shoelaces caught in the pedals. Then you're in trouble.
00:31:21 <shapr> Happily, that's rare.
00:32:07 <shapr> lament: You can go pretty fast on a 36" Coker, but most people who buy one are skilled enough to be safe.
00:33:10 <shapr> The most common unicycle injury I hear about is pedal bites from pinned pedals. If you buy leg armor that's not a problem. Or you could not use pinned pedals I guess.
00:34:24 <Itkovian> would the pinned pedals help in not falling?
00:35:23 <shapr> I think so, yes. They keep your feet from sliding off the pedals.
00:36:02 <shapr> I still slide off sometimes when ice builds up on the soles of my feet.
00:39:09 <Mon4345> earthy, is an acrobat?
00:39:10 * Mon4345 is shocked
00:39:29 <shapr> Mon4345: You're off by a day.
00:39:31 <earthy> static, on the floor, constructions of people
00:39:39 <earthy> but yes, acrobatics
00:39:43 <Mon4345> shapr, you are correct i need a restart
00:39:48 <earthy> stuff like standing on eachothers shoulders and such
00:40:33 <earthy> poor Mon4345... his entire worldview just changed ;)
00:41:58 <Gahhh> Is there anybody here who likes OOD a lot ? If I were to want to be converted, which book(s) would I read ?
00:43:39 <ski> hm .. copmonads
00:43:56 <Tue15853> there
00:44:48 <shapr> What's OOD?
00:45:01 <Gahhh> object oriented design
00:45:18 <Gahhh> and I mean it from a non-fp point of view.
00:46:41 <Gahhh> shapr: look what I've found heh. http://www.amazon.com/exec/obidos/tg/listmania/list-browse/-/1U9BPIWXCYZYI/ref%3Dcm%5Faya%5Fav.lm%5Fmore/104-6087657-6931151
00:51:56 <ski> copmonads are out there, policing all effects. copmonads are searching your drawer !
00:52:04 <ski> (earthy : actually i miswrote it like that when googling)
01:17:51 <Tue15853> with what kind of trickery did they solve the printf argument problem in haskell?
01:19:37 <Itkovian> http://mnt.is-a-geek.org/tron/
01:19:42 <Itkovian> anybody up for a game?
01:19:52 <Itkovian> with a unicycle, eh ;-)
01:20:55 <ski> Tue15853 : multi-parm typeclasses with fundeps, iirc
01:21:04 <shapr> Itkovian: cute
01:23:58 <Tue15853> hmm, i think i'll read about it later :D thanks anyway ski
01:25:48 <ski> (hm, iirc OCaml has another interesting approach)
01:27:53 <earthy> the printf argument problem was done with Template Haskell as well, wasn't it?
01:28:57 <ski> prolly
01:31:47 <earthy> ah, I see there's also the MissingH printf
01:32:53 <Tue15853> template haskell is generating haskell from a meta language?
01:32:55 <Tue15853> i cant remember
01:33:04 <Heffalump> yes
01:33:09 <Heffalump> where haskell is the meta language too.
01:33:41 <earthy> pretty cool stuff
01:33:47 <xerox> hiya
01:35:31 <ski> morn, xerox
01:36:57 * dblhelix guesses one could implement a strongly typed printf in Cayenne
01:38:06 <ski> indeed, i think one of the examples was printf
01:38:19 <ski> s/was/were/
01:39:22 <autrijus> rehi
01:39:31 <earthy> what cayenne would that be, dblhelix? not the java framework, I presume...
01:39:47 <earthy> nor the Porsche...
01:40:00 <Heffalump> Lennart Augustsson's language
01:40:19 <dblhelix> http://www.cs.chalmers.se/~augustss/cayenne/
01:40:43 * earthy grins
01:40:49 <Heffalump> :-)
01:40:58 * Heffalump realises he's been had
01:40:59 <earthy> yeah, the typing rules seem to be strong enough
01:41:54 * earthy just weirded himself out
01:42:27 <earthy> I *know* this stuff by intuition...
01:43:10 <earthy> must've been the lambda-calculus training I've had years ago
01:44:11 <Tue15853> template haskell thus has the potential strength of generic haskell?
01:45:07 <earthy> yes and no
01:45:38 <dblhelix> it has been used as a framework for prototyping generic though
01:45:47 <earthy> generic haskell does not need explicit metafolding over the datatypes
01:45:54 <earthy> as it is implicit in the language
01:46:09 <dblhelix> it did real well to prototype PolyP, but it had more problems doing GH
01:48:26 <Heffalump> what did real well to prototype PolyP?
01:48:38 <dblhelix> TH :)
01:48:56 <Heffalump> but PolyP (and GH) predate TH by quite some way.
01:49:06 <Heffalump> or you mean you or someone experimented with reimplementing them with TH?
01:49:19 <dblhelix> Heffalump: yes, sort of
01:49:33 <dblhelix> Heffalump: http://www.cs.chalmers.se/~ulfn/papers/genericth.html
01:50:01 <earthy> but PolyP was also almost explicit in the fold over the structure of datatypes
01:50:10 <earthy> IIRC
01:50:28 <dblhelix> it was/is
01:50:35 <dblhelix> much more explicit operators
01:50:59 <dblhelix> i.e., mostly catas
01:51:28 <earthy> yeah, and functors derived from the constructs used to build datatypes
01:51:59 <dblhelix> moreover, generic functions are limited to regular types of kind * -> *
01:52:17 <earthy> oh right
01:52:23 <earthy> yeah, it was somewhat limited, ISTR
01:53:10 <dblhelix> but nonetheless a great effort
01:53:27 <earthy> it was simple enough to implement a derivative in C.
01:55:26 <Tue15853> man, i remember the first time i used uuag in a big project and type errors came scrolling down my command line screen for at least 10 seconds......that was impressive
01:56:13 <Tue15853> im used to it now...
01:57:53 <earthy> okay, I'll play old hand here
01:57:53 <earthy> I remember Doaitse being proud of his deterministic parser combinators. when he had just written them.
01:58:57 <earthy> and then redid them in Clean for a project I was doing, based on his paper
01:59:09 <Tue15853> you redid them in Clean?
02:00:12 <Heffalump> luckily, the first time I used UUAG someone else wrote the thing first and I just had to change it :-)
02:01:08 <Tue15853> well it's ok, but at first i was like....waaaaaaaaaah and thought my complete uuag program must have been wrong
02:01:30 <earthy> well, how many errors did you say you see? :)
02:01:40 <Tue15853> just 10 seconds of screens flashing
02:01:40 <Tue15853> :D
02:02:01 <Tue15853> hey earthy, did you do the complete parser combinator library in Clean?
02:02:06 <earthy> nope
02:02:13 <earthy> just a number of deterministic parser combinators
02:02:19 <earthy> I've since scrapped the code
02:02:54 <Tue15853> ah, must have still required some thorough understanding of doaitse's code though
02:03:14 <earthy> at the time it was not that hard
02:03:29 <earthy> but I was totally steepened in lambda calculus, logic and functional programming
02:03:50 <earthy> oh, and parsing
02:05:04 <Heffalump> don't worry, I'm sure you'll recover eventually
02:05:12 <earthy> I have by now ;)
02:05:21 <earthy> doing mindless C and Python coding helps
02:05:41 <Heffalump> :-) Why are you doing that?
02:05:52 <earthy> doing mindless text editing (as in... the stuff you do at a magazine's editorial board) helps as well
02:05:59 <earthy> hef: I *did* that because I got paid.
02:06:18 <Heffalump> ahh.
02:06:20 <earthy> and it was reasonably interesting...
02:06:37 <dblhelix> earthy: gettiing paid for it... not the best argument ;)
02:06:38 <earthy> hacking a driver for hardware encryption into FreeS/WAN
02:07:11 <earthy> doing a GUI for firing up expensive internetconnections and monitoring the data-exchange over said connections
02:07:31 <earthy> (expensive == $ 6 / minute, at 64kbps)
02:07:38 * Heffalump heads to work to do some reasonably mindful C coding
02:07:56 <earthy> good luck, hef ;)
02:08:03 <Heffalump> oh, actually, I might do some Haskell.
02:08:21 <earthy> you'd rather write programs that write programs than write programs? :)
02:08:38 <Tue15853> futamura projections?
02:08:38 <Tue15853> :D
02:08:59 <Tue15853> generator generator generator
02:09:32 <earthy> Tue: older than that. a quote of Dick Sites, in Jon Bentley's "More Programming Pearls"
02:11:01 <Heffalump> grr, IRC client froze up just as I said I was going to do some Haskell.
02:11:12 <Heffalump> clearly a bad move :-)
02:12:10 * Heffalump really goes to work
02:13:14 <Tue15853> before my time probably earthy ?
02:13:16 <Tue15853> :)
02:15:13 <earthy> tue: that was in 1996 or 1997
02:15:21 <Tue15853> ow definitly before my time
02:18:47 <Tue15853> "..SAC (Single Assignment C) is a strict purely functional programming language.."
02:18:50 <Tue15853> sounds interesting
02:20:11 <Tue15853> "..higher-order functions, polymorphism, or lazy evaluation, are not (yet) supported by SAC.."
02:20:17 <Tue15853> hmm :)
02:22:55 <michaelw> sac is mostly targeted at numerical stuff, matrix calculations etc., no?
02:23:36 <Tue15853> yeag
02:23:41 <Tue15853> -g+h
02:23:48 <Tue15853> array operations
02:24:43 <Tue15853> for a moment i thought it was about a nicer general purpose alternative to C
02:24:46 <Tue15853> how naive :P
02:26:00 <michaelw> Tue15853: maybe you want SafeC or Cyclone?
02:29:06 <earthy> single assignment...
02:29:21 <earthy> now there's an interesting idea I seep popping up for the n-th time. ;)
02:29:28 <earthy> s/seep/see/
02:29:59 <Tue15853> there goes the n+1-th time
02:30:46 <Tue15853> @pl \x y -> foo $ f x y
02:30:47 <lambdabot> (foo .) . f
02:31:49 <genneth> @pl \x -> foo $ f x
02:31:50 <lambdabot> foo . f
02:32:03 <genneth> @pl \x y z -> foo $ f x y z
02:32:04 <lambdabot> ((foo .) .) . f
02:32:41 <Tue15853> a dot for every time you want to return a function taking one more argument :)
02:33:33 <genneth> function composition makes my head hurt. oh well. i guess that's the proof i like pain
02:35:41 <Tue15853> :D
02:36:04 * tomdavie yawns
02:36:09 <Tue15853> i like the notation, but immediately recognize it's not going to be readable for others heheh
02:36:20 <Tue15853> let's say it quickly becomes unreadable
02:58:27 * tomdavie wonders where Olaf's got to
03:30:29 <autrijus> @type Control.Monad.Cont.callCC
03:30:31 <lambdabot> forall (m :: * -> *) a b.
03:30:31 <lambdabot>           (Control.Monad.Cont.MonadCont m) =>
03:30:31 <lambdabot>           ((a -> m b) -> m a) -> m a
03:33:33 <genneth> i wonder if it's feasible to create a monad to represent hardware
03:33:38 <genneth> cpu, memory, dma, etc.
03:34:17 <genneth> that would be like C on steroids
03:35:00 <Philippa> give or take, yes
03:35:08 <Philippa> you can do it, but you still need an evaluation model for pure code
03:35:10 <lightstep> dma::Disk->IO Buffer
03:35:24 <Philippa> lightstep: massive oversimplification there
03:35:46 <lightstep> dma::Disk->IO (Buffer,IO Bool) -- the second is finished-p
03:36:12 <lightstep> still oversimplification
03:36:15 <Philippa> yup
03:36:18 <lightstep> but why the need for a new monad?
03:36:28 <Philippa> you ever written code that controls a soundblaster? :-)
03:36:38 <earthy> yes
03:36:42 <earthy> not fun
03:36:50 <Philippa> IO'll do, but it'd be an extended IO still
03:37:15 <Philippa> also, you might want more control over pure code than merely having return offers
03:41:04 <Itkovian> for those interested - and able to read Dutch - http://www.geocities.com/pieter_audenaert/alfred/
03:41:41 <Itkovian> it's a functional language for which correctness proofs can be generated
03:42:17 <tomdavie> or for those unable to read `able to read Dutch'
03:42:56 <Itkovian> a friend of mine developed it dor his PhD.
03:43:01 <Itkovian> s/dor/for/
03:50:12 <tromp> The web site you are trying to access has exceeded its allocated data transfer
03:52:41 <lightstep> popular
03:59:26 <ndm> has anyone in here tried to do a paper in the TFP (Trends in Functional Programming) style?
04:00:30 <stefanw> yup, what's the problem?
04:00:49 <ndm> i'm trying to use symbols, amssym, latexsym
04:01:04 <ndm> and i keep getting the error: Math version 'bold' is not defined.
04:01:30 <ndm> when including amssymb, stmaryrd, latexsym
04:02:21 <stefanw> \documentclass[ams,llncs,book]{tfp-ws}
04:02:22 <stefanw> % \usepackage{url}
04:02:22 <stefanw> % \usepackage{alltt}
04:02:22 <stefanw> % \usepackage{amssymb}
04:02:22 <stefanw> \usepackage[latin1]{inputenc}
04:02:22 <stefanw> % \usepackage{latexsym}
04:02:24 <stefanw> % \usepackage{stmaryrd}
04:02:28 <stefanw> \input{lhs2TeX_style}
04:02:30 <stefanw> \begin{document}
04:02:32 <stefanw> \pagestyle{plain}
04:02:34 <stefanw> \input{paper.tex}
04:02:36 <stefanw> \end{document}
04:02:42 <stefanw> This is my main file, all ams stuff commented out
04:03:06 <ndm> because you didn't need the ams stuff, or because leaving it in gave you a crash?
04:05:12 <stefanw> I didn't really need it and I remember there were problems
04:05:39 <ndm> hmm, not good - i would like to use quite a few latex symbols
04:05:52 <ndm> that are only in those packages, otherwise i have to change my notation
04:06:24 <stefanw> mail the pc
04:06:59 <ndm> yeah, maybe
04:07:13 <ndm> it also appears if you don't have [book] in the document class, it doesn't work at all
04:07:25 <ndm> how did you lay out your abstract?
04:07:35 <ndm> \begin{abstract} gives an undefined error
04:10:11 <stefanw> haven't you a template file?? Use it!
04:11:05 <ndm> i have a class file, but i couldn't find a template file?
04:15:30 <stefanw> there should be one the homepage
04:32:16 <dons> ndm, sending hoogle to TFP?
04:34:47 <dons> ndm, by the way, did my hoogle patches apply, in the end?
05:02:10 <ndm> dons: nope, not hoogle
05:02:13 <ndm> something else
05:02:30 <ndm> and i haven't had a chance to try and apply the patches yet - busy reducing my paper from 40 -> 10
05:02:32 <ndm> pages
05:02:53 * Lemmih ponders how to make HSQL more Cabal friendly.
05:13:10 <dons> 40 pages, hehe. good luck with TFP then
05:16:09 <ndm> dons, i'm down to 18 so far, although it hurts to hack apart my beautiful work...
05:17:04 <Tue15853> to destroy, is to create
05:18:11 <earthy> hmmm. that's weird
05:18:17 <earthy> a lhs2Tex syntax error in directive
05:18:34 <earthy>  @then = {-"\mathit{\@then}"-}
05:18:57 <ndm> Tue15853, but when you spent ages creating what you are destroying, to destroy is to cry
05:20:41 <Itkovian> 'noon
05:23:40 <Philippa> ndm: you're not destroying, you're creating a child of what you created
05:25:44 <ndm> Philippa, i see the relationship to my original as a quadruple amputee - not a child
05:26:26 <Tue15853> ndm, dissapointment is part of life, better get used to it now :D
05:26:37 <ndm> yeah, i know - and i have a long time ago
05:26:56 <Tue15853> then this shouldnt hurt that much :)
05:29:59 <wilx> Awww, quadruple amputee almost made me vomit my lunch.
05:33:54 <Tue15853> earthy, maybe the @ shouldnt occur within double quotes?
05:34:46 <earthy> nope
05:34:56 <earthy> %format @then = "whatever"
05:34:58 <earthy> fails
05:34:59 <earthy> as dus
05:35:05 <earthy> s/dus/does/
05:35:12 <earthy> %format then: = "whatever"
05:35:21 <earthy> so I've worked around it
05:35:23 <Heffalump> testFile "output/random_tests.c" $ sequence $ map testcode $ concat $ replicate randomtestcount defs
05:35:38 <Heffalump> defs is about 1000 elements and randomtestcount is 100
05:35:42 <Tue15853> vague
05:35:46 <kosmikus> @then isn't a valid token
05:35:47 <lambdabot> I haven't seen isn't.
05:35:48 <Heffalump> why is it not outputting incrementally?
05:35:54 <earthy> kosmikus: I noticed
05:35:55 <earthy> nor is then:
05:36:05 <earthy> but the Guide was inconclusive
05:36:08 <kosmikus> then is a valid token
05:36:12 <kosmikus> it's not a valid variable name
05:36:12 <earthy> a keyword, even
05:36:25 <earthy> um, in AG it is...
05:36:30 * Heffalump reads the definition of testFile and realises why
05:36:32 <Heffalump> doh.
05:36:49 <kosmikus> earthy: lhs2tex is based on Haskell
05:37:08 <earthy> that is   DATA Stmt | IfElse cond:Cond then:Stmt else:Stmt
05:37:09 <earthy> is valid AG
05:37:38 <earthy> and I hoped lhs2TeX with it's formats was powerful enough to match on @then and then: so I could format them differently from the keyword
05:37:57 <earthy> s/it's/its
05:38:08 <earthy> well, as I said, I worked around it
05:38:35 <kosmikus> you can work around it by formatting @ differently
05:38:47 * earthy nods
05:38:54 <earthy> might actually do that later
05:39:10 <earthy> now I need to produce text more urgently than I need to beat lhs2TeX into submission :)
05:39:23 <kosmikus> but then again, I usually recommend to use "A x y" instead of "@x.y" for lhs2tex input
05:40:35 <earthy> I think I can see why
05:55:53 <Tue15853> totally off topic, anyone know if final fantasy x-2 is any good?
05:56:22 <Philippa> My boyfriend likes it - the fan service factor's fairly high though
05:56:43 <Tue15853> fan service factor?
05:57:33 <egg|roam> ?
05:59:12 <shapr> What's up with that egg?
06:01:17 <shapr> y0 CosmicRay, is fptools darcs repo kept up to date?
06:01:31 <CosmicRay> shapr: no, but I can update it if you need it
06:01:40 <CosmicRay> shapr: I need to get a thread started in cafe about this again
06:02:30 <shapr> I guess I don't require it, but I'd rather jump into the bug week with darcs.
06:02:49 <CosmicRay> I'll start the update now and let you know when it's posted
06:02:51 <CosmicRay> bug week?
06:03:19 <shapr> Yeah, I suggested a bug squashing party to JaffaCake, and he agreed.
06:03:53 <shapr> Seems like a good opportunity to get people familiar with GHC so more bugfixes and improvements can flow in from the community.
06:04:00 <shapr> And that will assuage the Bus Error worries.
06:04:19 <CosmicRay> sweet.
06:04:28 <JaffaCake> I announced the bug squashing party... did anyone see it?
06:04:38 <shapr> I saw the announcement, but I have no idea where to start.
06:04:39 <CosmicRay> I haven't checked my list mail in about 48 hours
06:04:44 <shapr> Do you have some bugs with training wheels?
06:04:51 <JaffaCake> ah, I see the problem
06:04:54 <CosmicRay> shapr: would you like to port ghci to alpha? :-)
06:05:02 <shapr> Since I don't have an alpha, no.
06:05:11 <CosmicRay> excuses, excuses
06:05:18 <shapr> If someone gets me a Cell workstation, I might do that.
06:05:21 <CosmicRay> heh
06:05:31 <JaffaCake> I'll take a look through the open bugs
06:05:55 <CosmicRay> the sf ones?
06:06:03 <JaffaCake> yup
06:06:11 <shapr> If you could identify three or four starter bugs, maybe interested GHC newbies can jump in there?
06:06:44 <JaffaCake> Here's a good one: http://sourceforge.net/tracker/index.php?func=detail&aid=1186431&group_id=8032&atid=108032
06:06:56 <JaffaCake> if you're familiar with Haskell but not GHC, that is
06:07:13 <shapr> That looks easy enough.
06:07:47 <shapr> Do you accept darcs patches?
06:08:10 <JaffaCake> hmm, not right now, unless I can convert it to an ordinary patch
06:08:17 <CosmicRay> shapr: I was just going to suggest that you may want to set up a darcs repo, and send one diff to jaffacake after the bsp
06:08:38 <shapr> Can you suggest some starter bugs for people who want to get familiar with GHC?
06:08:47 <CosmicRay> shapr: you could be the point of contact for it all (set prefs/email to you)
06:09:12 <shapr> It would be cute to have GHC bug categories like "No GHC familiarity required" :-)
06:09:32 <shapr> CosmicRay: Sadly, I don't have the spare time for that right now.
06:09:34 <CosmicRay> shapr: all the way up to "Must be Simon to fix"
06:09:39 <shapr> Right :-)
06:10:06 <CosmicRay> shapr:  me neither :-(
06:11:10 <CosmicRay> sssssssweeeeeeeeeeeeetttttttt, x.org in sid!
06:11:19 <shapr> w00!
06:13:34 <autrijus> JaffaCake: Pugs INSTALL has been updated to point to http://www.haskell.org/ghc/dist/stable/dist/. thanks for the info!
06:13:42 <JaffaCake> Does anyone remember the "fromJust: Nothing" crash?  http://sourceforge.net/tracker/index.php?func=detail&aid=1177320&group_id=8032&atid=108032
06:13:53 <JaffaCake> autrijus: nice one, thanks
06:14:14 <autrijus> JaffaCake: that happened when we were using .hs-boot
06:14:15 <autrijus> a lot
06:14:23 <autrijus> it has since gone away after we ditched that
06:14:27 <JaffaCake> I'm looking for more info it, I've never seen it myself
06:14:44 <JaffaCake> ok
06:14:47 <shapr> Someone showed up here yesterday with the same problem.
06:14:48 <autrijus> iirc, it happened when .hs-boot is compiled
06:14:54 <autrijus> then you ^C the build
06:15:01 <autrijus> change some other source files
06:15:08 <autrijus> possibly changing the symnames
06:15:11 <autrijus> then incrementally rebuid
06:15:22 <JaffaCake> that might give me enough to go on, thanks
06:15:39 <autrijus> it will stop right at the place which uses syms exported from the mutrec module. 
06:15:55 <shapr> CosmicRay: Do you plan on updating your fptools darcs repo in the next few hours?
06:16:02 <autrijus> no prob... it gave me the inspiration of the quip in QuotesPage :)
06:16:15 * shapr looks
06:16:17 <CosmicRay> shapr: it is updating even as we speak
06:16:17 <autrijus> <autrijus> Perl: "Easy things are easy, hard things are possible"
06:16:17 <autrijus> <autrijus> Haskell: "Hard things are easy, the impossible just happened"
06:16:33 * JaffaCake laughs
06:16:51 <CosmicRay> actually, tailor just rashed
06:17:00 * shapr laughhs
06:17:11 <CosmicRay> Changeset 2005-06-15 05:17:10 by nr:
06:17:11 <CosmicRay> file CgCpsStack.hs was initially added on branch CgCmmBranch.
06:17:11 <CosmicRay> darcs record --all --pipe 'ghc/compiler/codeGen/CgCpsStack.hs'
06:17:11 <CosmicRay> darcs failed:  None of the files you specified exist!
06:17:11 <CosmicRay> .. [Error 512]
06:17:11 <CosmicRay> Failure applying upstream changes: 'darcs record' returned status 512
06:17:23 <shapr> autrijus: That sounds like a poignant almost haiku.
06:17:44 * CosmicRay tries to blindly ignore the issue
06:17:49 <autrijus> it is very poignant, considering it was triggered by a panic.
06:17:51 <JaffaCake> autrijus: while you're here, would you mind casting an eye over http://sourceforge.net/tracker/index.php?func=detail&aid=1226252&group_id=8032&atid=108032
06:17:51 <Philippa> "hard things are easy, the impossible just happened, you are writing haskell"?
06:17:54 <Tue15853> uuag question; if i have a synthesized attribute "foo USE {++} {[]} : [String]".......and at some production there are two children which have a synthesized attribute named foo.....will both the foo attributes of the children be concatenated....or does the copy rule simply take the foo attribute of the most right child having a foo attribute?
06:17:57 <autrijus> (panic! the `impossible' happened)
06:18:08 <shapr> Yes, it's very punny.
06:18:09 <JaffaCake> and let me know whether you think it's probably a GHC bug, or maybe a Pugs bug
06:18:37 * shapr hops cheerfully
06:18:41 <CosmicRay> shapr: well, I will get the repo updated through 2005-06-14 at least.  I don't think I'll have the time to track down this tailor problem today.
06:18:44 <autrijus> it happens back when we force a performGC at end of evaluator run.
06:18:49 <shapr> Tue15853: swiert knows Ags, and maybe earthy.
06:18:57 <autrijus> since GHC does not guarantee finalisers being run at end of program
06:18:58 <kosmikus> Tue15853: if I understand correctly, they should be concatenated
06:19:01 <autrijus> we had to fake it
06:19:17 <CosmicRay> shapr: you may wish to just do a cvs co of fptools from head, then rm  -rf `find . -name CVS`
06:19:26 <CosmicRay> shapr: then darcs initialize, darcs record -la
06:19:26 <kosmikus> Tue15853: that's the whole purpose of the USE, isn't it?
06:19:29 <autrijus> but sometimes after multiple such performGC (each one is run after a 'eval' block)
06:19:36 <shapr> CosmicRay: Ok, I may do that.
06:19:37 <Tue15853> that is what i expect...but i suspect it is lazy and taking the most right child's att. (which is the default copy rule behaviour i think)
06:19:41 <autrijus> it will die with that error
06:19:47 <Tue15853> because im always getting []
06:19:51 <JaffaCake> ok, so a possible GHC bug then
06:19:53 <autrijus> so now I gave up and do not force performGC
06:20:16 <autrijus> I'd think so, yes
06:20:28 <JaffaCake> thanks, I'll look into it
06:20:43 <kosmikus> Tue15853: look at the generated code and you know
06:20:59 <autrijus> JaffaCake: note that I attach finalizers with
06:20:59 <autrijus> addFinalizer obj (objectFinalizer env obj)
06:21:03 <kosmikus> Tue15853: but if it doesn't concatenate, I don't understand what's going wrong there
06:21:18 <autrijus> and the env may refer to other objs (recursively), with their finalizers etc
06:21:26 <autrijus> the finalizer subroutine in turn may trigger performGC.
06:21:33 <autrijus> so that's a performGC inside a finalizer
06:21:40 <djlogan> Man, it's hard to get my head around this stuff. The logic is difficult so far
06:21:49 <shapr> djlogan: What stuff?
06:21:51 <JaffaCake> hmm, that could cause you problems
06:22:04 <JaffaCake> references from a finalizer don't necessarily keep other objects alive
06:22:05 <autrijus> right. but it's not forbidden
06:22:15 <Tue15853> hmmm it *does* hardcode to [] in the code....
06:22:19 <autrijus> I'd be fine if it does not GC away things
06:22:20 <CosmicRay> shapr: ok, my repo is updated through 6-15
06:22:24 <Tue15853> i'll need to investigate more here, weird
06:22:28 <shapr> CosmicRay: Thanks!
06:22:28 <autrijus> but nontrappable "EVACUATED" bug is suboptimal
06:22:30 <djlogan> shapr: How to think
06:22:41 <JaffaCake> ok, as long as you don't mind that the objects you refer to might have already been finalized
06:22:45 <autrijus> that is fine
06:23:00 <shapr> djlogan: Think about pipelines and inductive reasoning.
06:23:17 <JaffaCake> suboptimal is an understatement :)
06:23:43 <djlogan> shapr: I'm not sure my app lends itself well to that, at least at first. But I'll keep mulling it over.
06:23:51 <autrijus> nah, I'm really infinitely grateful for GHC's robustness :)
06:23:51 <shapr> djlogan: A cute length function is: length [] = 0 ; length (x:xs) = 1 + length xs
06:24:16 <djlogan> shapr: Yea, I saw that in the tutorial
06:24:18 * shapr looks for cute pipelines
06:24:22 <JaffaCake> I'm grateful that you're producing a useful test case :)
06:24:49 <autrijus> :)
06:24:55 <djlogan> shapr: I'm trying to figure out how to parse a string of data that has nested packets, and be able to get to parent packets once they are parsed
06:25:08 <shapr> djlogan: huh?
06:25:13 <Tue15853> kosmikus, DOH i forgot to add ONE node to the list of nodes having that attribute...so it always took the base case in absence of a definition of an attribute
06:25:21 <Tue15853> sneaky thing you won't notice
06:25:33 <shapr> djlogan: You mean like a header that specifies the length of the next field?
06:26:07 <Philippa> would keeping an 'environment' of the data you grabbed from parent packets be sensible?
06:26:32 * Itkovian grumbles
06:26:39 <djlogan> shapr: Something like: [p1 p1 p1[p1a p1a p1a[p1b p1b p1b][p1c p1c p1c]] p1 p1 p1]   as an example of nested packets (p1 fields, p1a fields, p1b fields, p1c fields)
06:26:41 * shapr gargles
06:27:05 <shapr> Seems easy enough, have you read the parsec tutorial?
06:27:17 <djlogan> I need code and data that has all of the p1c fields, with access to the p1a packet, with access to the p1 packet
06:27:37 <djlogan> no. Still working through the tutorial, actually
06:27:42 <kosmikus> Tue15853: ok then
06:27:52 <shapr> Once you finish going through the parsec tutorial, it'll be easy.
06:27:52 <djlogan> I'm just trying to put some real world problems to work
06:28:37 <djlogan> ok
06:28:41 <shapr> I'd write a p1 parser with optional 'content' same for p1a, p1b, and p1c.
06:28:54 <shapr> And I'd wrap 'em up into a nice ADT.
06:29:02 <djlogan> What's an ADT?
06:29:42 <earthy> algebraic data type
06:29:44 <Itkovian> Abstract Data Ty[e?
06:29:52 <Itkovian> hmm
06:30:12 <Itkovian> maybe not
06:30:14 <kosmikus> both are used imho
06:30:21 <Tue15853> Agebraic Data Type?
06:30:22 <autrijus> Asynchronous Data Transfer -- it's a way to manipulate the data without waiting for the originating module to transfer the definition of the constructors
06:30:54 <shapr> Just a random suggestion from my sleepless brain: data Peas = Peas [P1] ; data P1 = P1 (Maybe [P1A]) ; data P1A = P1A (Maybe [P1B])
06:31:42 <djlogan> shapr: That won't work. The nesting is any number of levels deep, and the contents of each packet varies. They can be any of about 300 different types of data
06:32:58 <shapr> What is this, ASN.1?
06:33:05 <djlogan> shapr: I'll eventually define each packet individually, but initially I'm thinking something along the lines of: data UnformattedPacket = Nil | PacketType String UnformattedPacket    [String = all of the data between the []'s.]
06:33:24 <earthy> Abstract Syntax Notation 1
06:33:53 <djlogan> shapr: No, it's the communications protocol used by ICC (Internet Chess Club). I have written the parser in various languages. I thought I'd try it in Haskell
06:34:01 <shapr> Oh neat!
06:34:05 <djlogan> In other languages it's easy
06:34:29 <shapr> Haskell is good at parsers, so it'll probably be just as easy once you understand Haskell.
06:34:37 <djlogan> Well, we'll see :)
06:34:55 <shapr> I wrote an RFC822 parser when I was learning.
06:35:04 <djlogan> Splitting it up on the separators is easy enough. I'm just not yet sure how to connect all the data together
06:35:11 <shapr> I discovered that returning unformatted chunks was hard to handle.
06:35:24 <JaffaCake> I know this isn't the place, but this just cracked me up: http://homepage.ntlworld.com/acdrobertson/forums/OMG%20van1.jpg
06:35:27 <Philippa> what's the natural format of the data?
06:35:34 <Philippa> heh
06:35:50 <Philippa> I figure the chan'll survive a few links like that
06:35:52 <shapr> hah
06:36:00 <shapr> Yes, our on-topic-ness isn't legendary.
06:36:21 <autrijus> in fact we need more Funk in Funktional Programming anyway
06:36:22 <shapr> Last night we were talking about ambisexual earbuds.
06:36:24 <djlogan> shapr: No. It's hard to easily explain, but let's say you get a packet like this: [30 Message not sent. You are being censored].
06:36:38 <shapr> Ah, response codes and messages.
06:36:48 <djlogan> shapr: You need to know what the parent packets are to know what this message is attributed to. You will get something like:
06:37:10 <djlogan> shapr: [28 shapr djlogan Hi[30 Message not sent. You are being censored.]]
06:37:35 <djlogan> simple example. These things can go many levels deep
06:37:55 <shapr> autrijus: "We put the Funk in Funktional programming"  started out with a Manuel Chakravarty quote :-)
06:38:07 <Philippa> keep all the parsed packets handy in a map of some sort, pass the map along to the next level of recursion?
06:38:12 <shapr> Do you have something that shows which messages can be attached to which other messages?
06:38:28 <shapr> Or is it totally arbitrary?
06:38:47 <shapr> It looks like a state machine of some sort.
06:38:55 <shapr> Or Tcl maybe
06:39:00 <djlogan> shapr: Well, yes and no. Technically, they are totally arbitrary. There is no guarantee you will ever get anything in any particular order.
06:39:24 <djlogan> shapr: The only guarantee is that nested packets correspond to higher level packets
06:40:00 <shapr> Do you end up sending the whole conversation history back and forth with deeper and deeper 'resolution'?
06:40:07 <djlogan> no no
06:40:30 <djlogan> sending is different. Everything sent is just plaintext strings which are ICC commands, like "tell shapr hello"
06:40:46 <shapr> Do you get the entire session history for every response?
06:41:15 <djlogan> shapr: No. You get two types of packets. Packets in response to commands you sent, and packets in response to server events you want to know about
06:41:25 <shapr> You subscribe to events?
06:41:55 <djlogan> shapr: To some extent you do. Other events you will always get (a chessboard move, for example...you cannot ask to get them or not get them) :)
06:42:20 <shapr> Hm, that's kind of neat. Sort of weird too.
06:42:24 <djlogan> shapr: Other events you can get conditionally, like messages, games, notifications, etc.
06:42:45 <djlogan> to make matters even worse, they invented a new protocol and incorporated it in with the old protocol
06:43:16 <djlogan> So now not only do I have to deal with these stupid level 1 nested packets, but now they also support a whole bunch of better formatted level 2 packets.
06:43:40 <djlogan> l1 packets aren't nested, other than the fact that they show up within a level 1 packet somewhere.
06:43:43 <djlogan> It's a real nightmare
06:43:54 <shapr> Why don't they fix it?
06:43:58 <djlogan> hahaha
06:44:24 <djlogan> You gotta know 'em to know that :)
06:44:37 <shapr> I shouldn't have asked.
06:45:08 <djlogan> The original system was based on text based telnet, written back in the mid 90's
06:45:22 <shapr> Just like IRC
06:45:42 <CosmicRay> djlogan: so I take it you have TCP working?
06:45:50 <djlogan> Since then, they have of course come up with various graphical interfaces, and needed better formatting. So they came up with the nested level 1 format, which is really just plain text surrounded by a header and trailer
06:46:16 <djlogan> CosmicRay: No, not yet. I was playing around with some parsing code to see if I could parse some simple test data streams
06:46:28 <CosmicRay> djlogan: have you been pointed to Parsec?
06:46:42 <djlogan> CosmicRay: shapr just recommended it
06:46:47 <CosmicRay> good.
06:46:55 <CosmicRay> best parser tool I've EVER seen
06:46:59 <CosmicRay> http://www.cs.uu.nl/%7Edaan/download/parsec/parsec.html
06:46:59 <djlogan> cool
06:47:07 <CosmicRay> absolutely, totally kicks serious ass
06:47:29 <djlogan> http://www.chessclub.com if you guys like online chess though. Even with their shortcomings, they are still the best club on the net
06:47:35 <shapr> Is there any rhyme or reason to where headers can start?
06:48:13 <shapr> If not, you could just have a Packet type, and have constructors for the various types.
06:48:32 <djlogan> shapr: Well, once you get logged on, you get the first [ of the first header. From then on, you will always get packets
06:49:05 <shapr> data Packet = Packet28 Origin Destination (Maybe Packet30) | Packet30 String
06:49:06 <djlogan> shapr: But, if you're asking about specific locations or lengths, no. It's just a big data stream, and you have to scan for the headers/trailers and account for the nesting
06:49:15 <shapr> thats for [28 shapr djlogan Hi[30 Message not sent. You are being censored.]]
06:49:30 <CosmicRay> djlogan: compatible with gnuchess/xboard?
06:49:31 <shapr> Oh, I left out the message part of Packet28
06:49:35 <djlogan> shapr: I'd have some 300 of those
06:49:38 <djlogan> CosmicRay: Yes
06:49:42 <Igloo> CosmicRay: Were you complaining about the HTML or CGI libs that ghc comes with? If so, did you have anything better to replace them with?
06:50:18 <CosmicRay> Igloo: yes, I was.  several people posted better code on that thread, but alas I was moved to a different project and haven't had time to look at them yet
06:50:19 <djlogan> shapr: And, based on your definition, I would have an infinite number of those
06:50:20 <shapr> Are there any docs for the ICC protocol?
06:50:38 <djlogan> shapr: Sure. Not great, but it exists
06:50:54 <Igloo> Ah, ti was on a list? Cool, I'll look for archives later
06:50:56 <shapr> djlogan: In my experience, I almost always end up with a data structure that has just a few moving pieces.
06:51:03 <CosmicRay> Igloo: yes, I think it was cafe
06:51:13 <Igloo> Rightyho, thanks
06:51:25 <djlogan> shapr: But there isn't much to it. You have this format: [a [b [c [d]e f][g h]i j] k l]
06:52:03 <shapr> In that case, data Packet = Packet Header [Packet] Footer ?
06:52:07 <djlogan> and when split up, you get these packets: "a k l" "b i j" "c e f" "d" "g h"
06:52:46 <djlogan> shapr: Yes, something like that is correct
06:53:02 <shapr> But [b,i,j] is attached to the a packet, right?
06:53:35 <smott> how do i "read" (Map String Integer) data? just doing (\xs -> read xs :: (Map String Integer)) doesn't seem to work
06:53:49 <djlogan> shapr: "b i j" are the three fields in that particular packet
06:53:57 <shapr> Right, looks like a tree to me.
06:54:18 <shapr> Easy enough to do with Parsec and a decent ADT. You may be able to come up with something better than the one I just suggested.
06:54:29 <djlogan> shapr: Yes, it could be considered a tree, sure
06:54:58 <shapr> Teasing out useful info could be challenging though.
06:55:26 <djlogan> shapr: You start building the root note when you logon, and don't get its footer until you logoff. Everything else is nested, and goes down and up, although usually it's not more than a few levels deep
06:55:37 <djlogan> note. lol. *node*
06:55:39 <Lemmih> smott: Map is not a member of the Read typeclass.
06:56:15 <smott> Lemmih: oh. i'll just go with lists then
06:56:43 <Lemmih> smott: You could also check out SerTH.
06:58:17 <djlogan> looks like Parsec is covered in my tutorial. So I guess I'll quit screwing around and keep working my way through it
06:58:42 <CosmicRay> djlogan: use that URL I gave you
06:58:50 <CosmicRay> http://www.cs.uu.nl/%7Edaan/download/parsec/parsec.html
06:58:55 <CosmicRay> which tutorial are you using?
06:59:09 <djlogan> Well, let me finish my tutorial first, then I'll look onward
06:59:51 <CosmicRay> ok, but the official parsec tutorial is pretty good too :-)
06:59:57 <smott> Lemmih: looks complicated. i'll see if i can get that working after it works with lists first
07:00:07 <djlogan> CosmicRay: http://www.isi.edu/~hdaume/htut/
07:00:15 <CosmicRay> oh, I didn't know it covers parsec
07:00:33 <CosmicRay> huh, sure enough
07:02:14 <CosmicRay> I still say the parsec manual is better though
07:02:35 <djlogan> ok, I have to go get ready for work. I should have started on that task 30 minutes ago :) Seeya in ~ an hour
07:02:50 <CosmicRay> djlogan: haskell makes a person lazy :-)
07:02:59 <Tue15853> i love it when a plan comes together
07:03:04 <CosmicRay> see, you delayed evaluation of shaving until you really needed to do it :-)
07:03:17 <djlogan> lol
07:03:41 <Tue15853> i delay eating too long when im programming :S
07:05:56 <CosmicRay> Tue15853: easy, fork a dinner thread
07:07:41 <Tue15853> done
07:08:13 <CosmicRay> heh
07:14:44 <Igloo> JaffaCake: Is the code at the bottom of http://www.haskell.org//pipermail/cvs-ghc/2005-July/025857.html something you would expect to work (with -threaded)?
07:16:02 <Igloo> I got the impression it was breaking when it was using more than 1 CPU, so if you can confirm it's not me writing bad code I can try to reproduce it on an SMP x86 machine to try to cut down the variables involved
07:17:08 <earthy> Tue15853 has seen too much A-Team
07:20:31 <Tue15853> no such thing earthy
07:23:12 <earthy> um, yeah there is. the later episodes, where they start working for the CIA or what-have-you, are quite bad
07:27:35 <Tue15853> yeah you're right actually
07:27:37 <Tue15853> those totally suck
07:27:59 * Tue15853 pitties the fools that made those episodes
07:50:42 <Speck> "That's like cheating. It isn't even programming. You just tell it what to do and it does it."  -- My friend upon seeing some Haskell code
07:52:00 <esap> you also have to prove it works :-)
07:52:16 <CosmicRay> haha
07:57:46 * esap has been proving things correct for the Haskell type system for the whole day
07:58:51 <Tue15853> omfg im almost debugging from more than an hour now and have NO frickin idea why i get wrong results
08:01:15 * esap would never let the program have bugs once it compiles. Just express yourself more exactly to the compiler, and it will flag everything that's not right.
08:02:12 <Tue15853> yeah sure, in what kind of made-up world do you live lmao
08:02:14 <Tue15853> :)
08:02:26 <Philippa> one where you can build a proof of correctness as you write the code
08:02:50 <Tue15853> made-up indeed
08:02:59 <esap> right. The thing is, some code needs to be working before you can run it.
08:04:02 <esap> Because using it before it's correct would cause all the work to be lost if some problem is found in it.
08:06:41 <Philippa> I don't get as far as 'full proof of correctness', but I tend to be pretty damn sure my code's the right shape and have arguments why
08:06:48 <Philippa> (I just tyop too much, silly things like that)
08:07:03 <Lemmih> What are you debugging, Tue15853?
08:07:27 <esap> philippa: Yea, me too. But the typo stuff can be trivially found by the compilers.
08:08:33 <Tue15853> my embellished monotone framework. im getting wrong dataflow analysis results
08:08:51 <Tue15853> so debugging is quite involved
08:09:26 <Philippa> esap: I've comitted a few that'd need dependant typing or something similar to catch
08:10:32 <Philippa> thankfully that's not as in committed to a project repo for something that's not just me working on it
08:10:49 <esap> philippa: oh ok. Yea, me too. I actually just found out how to type check control operation in Haskell without unsafeCoerce# :-)
08:12:30 <esap> philippa: see http://www.kotiposti.net/epulkkin/ControlOperation.txt
08:23:56 <Speck> @type read
08:24:05 <Speck> lambdabot?~
08:30:08 <smott> any way to force show to display small Floats in decimal notation instead of sci notation?
08:30:36 <lightstep> @plugs show (3.5::Float)
08:30:56 <mauke> showFFloat     :: (RealFloat a) => Maybe Int -> a -> ShowS
08:31:01 <lambdabot> "3.5"
08:31:29 <mauke> @plugs show (0.00000035::Float)
08:31:34 <lambdabot> "3.5e-7"
08:33:54 <smott> mauke: thanks
09:34:35 <SyntaxNinja> good morning
09:36:13 <shapr> y0
09:37:03 <CosmicRay> morning syntax
09:37:30 * CosmicRay finally got a gsm phone.  now I see why you europeans go on about them :-)
10:00:00 <Muad_Dibber> lol @ CosmicRay
10:00:59 <ibid> CosmicRay: try to avoid sms madness, though ;)
10:13:30 <mwc> Philippa, your impure thoughts 2 article has a +5 Hilarious intro
10:21:29 <jlouis> no slashdot moderations here!
10:21:42 <jlouis> apart from that, Philippas introduction really rocks
10:21:53 <jlouis> (B&D is fun)
10:22:48 <mwc> Depends if you're the -ee or the -er
10:26:50 <jlouis> which again depends on if you prefer -ee or --er
10:27:15 <jlouis> and the or here is actual a logical or
10:27:57 <mwc> Hahah
10:28:36 <mwc> an either-or or an and-or?
10:28:41 <ibid> can't be as its operands are not formulae :)
10:29:27 <mwc> if($hogtied) print "She can't come to the phone right now, she's all tied up in something."
10:32:30 <mwc>  yeah yeah, bad joke :(
10:40:43 <jlouis> mwc: unfortunate ;)
10:43:00 <vegai> what were you talking about?
10:43:41 <mwc> joking about Philippa's opening paragraph in TMR4
10:44:18 <putter> nopaste
10:44:24 <putter> pastebot nopaste
10:45:00 <mwc> We ought to have a haskell pastebot
10:45:10 <mwc> something like lisppaste
10:46:15 <mwc> :P
10:46:29 <mwc> lisppaste2, url?
10:46:29 <lisppaste2> To use the lisppaste bot, visit http://paste.lisp.org/new/haskell and enter your paste.
10:46:43 <putter> Thanks.
10:47:28 <Cale> however, it's preferred to use the wiki's IRC paste page, since it has Haskell syntax colouring
10:47:34 <CosmicRay> ibid: yeah, I have not purchased sms for my phone, so I'll try to hold out :-)
10:47:41 <CosmicRay> ibid: I noticed though that google has sms features.  sigh
10:47:45 <mwc> Cale, yeah, but I don't like the wiki structure for it
10:47:54 <ibid> CosmicRay: actually, i suggest trying it if you have any friends to do it with
10:48:11 <mwc> ibid, SMS can be more expensive than just making the damn phone call :P
10:48:23 <CosmicRay> well, there's my wife, but we tend to use the "talk" feature of the cellphone :-)
10:48:54 <mwc> SMS is crap anyways, if you want text messaging, get a Blackberry
10:48:57 <ibid> mwc: depends on where you get your liittyma
10:49:03 <ibid> SMS is simple but effective
10:49:14 <mwc> Messages are pretty short, 150 chars or so?
10:49:14 <ibid> it was an unexpected success here
10:49:17 <ibid> 160 iirc
10:49:27 <ibid> but new phones are able to handle multipart :)
10:49:33 <CosmicRay> I dunno, it seems way overused
10:49:41 <CosmicRay> it seems the electronic equivolent of passing notes in class
10:50:05 <CosmicRay> so I could see it being useful in those rare situations where it is possible to discretely key in a message on a tiny keyboard but not to actually have a voice conversation :-)
10:50:19 <CosmicRay> which, uh, never happens to me
10:50:24 <lisppaste2> putter pasted "6.4.1.20050711 x86_64 stable src snapshot make failure." at http://paste.lisp.org/display/9851
10:50:27 <ibid> CosmicRay: sms is a form of communication, much like irc
10:50:38 <putter> fyi
10:50:55 <CosmicRay> ibid: yes, but it is very low-bandwidth due to device keyboard
10:51:00 <mwc> yeah, that's why you get crap like 'hi hn, pck up mlk plz thx lso gt sm kk'
10:51:14 <CosmicRay> mwc: bzip2 is way better than that :-)
10:51:16 <wagle> how do you get lambdabot to give you the entire channel title?
10:51:16 <mwc> which is how english would look if we wrote like the Hebrew :P
10:51:22 <ibid> CosmicRay: don't i know that
10:51:29 <mwc> CosmicRay, hahah, bzip2 it in your head, I love it
10:51:42 <ibid> CosmicRay: there are even books published on the sms culture in finland
10:51:44 <mwc> wagle, /topic doesn't work?
10:51:54 <CosmicRay> ibid: I do think it's useful for things like automated machine down messages
10:52:04 <mwc> CosmicRay, that's good for it
10:52:06 <ibid> CosmicRay: i was sceptical too at first
10:52:20 <CosmicRay> ibid: so you use sms regularly yourself?
10:52:22 <mwc> Especially with the email gateway (123-555-1234@txt.bell.ca or whatever)
10:52:23 <wagle> well, notice that I said title, not topic
10:52:40 <wagle> which should show what the problem was..  8/
10:52:55 <mwc> Oh, you had me fearing your leetness
10:53:02 <mwc> omg, wtf is a channel tittle?!
10:53:05 <mwc> title even
10:53:16 <CosmicRay> mwc: "shapr"
10:53:19 <ibid> CosmicRay: not as much as others do
10:53:32 <ibid> CosmicRay: but occasionally, yes
10:53:35 <mwc> shapr is a tittle/
10:53:38 <CosmicRay> ibid: I'm genuinely curious -- in what situations do you find it more useful than anything else?
10:53:39 <wagle> someday you will be leet enough to know
10:53:42 <CosmicRay> mwc: shapr is IRC.
10:53:56 <CosmicRay> mwc: he is one with the channel.
10:54:09 <mwc> yeah
10:54:24 <ibid> CosmicRay: in most situations where i know the other side where i don't want to commit to a full phone call and/or cannot be sure if the other party is in position to answer
10:54:25 <mwc> I'll make my own haskell channel, with gambling, and hookers, and booze. In fact, forget the haskell
10:55:04 <CosmicRay> ibid: yeah, I can see that, but around here most people just put their phones on vibrate in those cases
10:55:16 <CosmicRay> mwc: keep haskell for the laziness
10:55:21 <ibid> CosmicRay: but they can't still answer
10:55:36 <ibid> CosmicRay: there's the same "answer when you can" thing that email has
10:55:48 <mwc> Haskellers do it less eagerly :)
10:55:56 <CosmicRay> ibid: yeah I can see that
10:56:01 <mwc> Haskellers do it functionally?
10:56:04 <CosmicRay> mwc: haskellers do it in sequence :-)
10:56:09 <mwc> hmmm
10:56:12 <mwc> that's getting better
10:56:25 <mwc> Haskellers do it with a map :P to be deprecating
10:56:34 <mwc> Haskellers do it with infinite lengths
10:56:36 <CosmicRay> mwc: haskellers do it when forced
10:56:39 <CosmicRay> heh
10:57:08 <mwc> Haskellers do it without class
10:57:13 <mwc> classlessly?
10:57:23 <Cale> or with...
10:57:25 <ibid> haskellers know what class is all about :)
10:58:40 <CosmicRay> haskellers can unsafePerform?
10:58:52 <mwc> :O kinky
10:58:59 <ibid> haskellers are safe, except when it's time to be unsafe
10:59:21 <CosmicRay> mwc: no, the kinky one is unsafeInterleave :-)
10:59:41 <mwc> I think I better phone my mom and ask if it's okay to have this convo
10:59:47 <CosmicRay> haha
10:59:54 <CosmicRay> mwc: use SMS!
11:00:20 <CosmicRay> haskellers do it with guards
11:00:57 <ibid> haskellers like pointless things
11:01:08 <mwc> haskellers do it transparently
11:01:21 <CosmicRay> you can proove that haskellers do it correctly
11:02:14 <CosmicRay> Haskell.  Where "Exception" is a 36-byte word.
11:02:37 <ibid> haskellers get free theorems
11:03:20 <CosmicRay> haskellers have points, but only if they want to
11:03:33 <lisppaste2> putter pasted "ghc-6.4.1.20050711-x86_64-unknown-linux stable snapshot install error" at http://paste.lisp.org/display/9852
11:03:35 <CosmicRay> where's shapr with the arrow jokes
11:04:56 <CosmicRay> I like speck's quote from earlier
11:05:03 <Speck> m?
11:05:07 <CosmicRay> <Speck> "That's like cheating. It isn't even programming. You just tell it what to do and it does it." -- My friend upon seeing some Haskell code
11:05:13 <CosmicRay> Speck: it's on my blog too :-)
11:05:26 <Speck> what about "Haskell: You don't need to know C++ very well."
11:05:40 <CosmicRay> Speck: ah.  "Haskell: The Anti-Java".
11:05:45 <Speck> hehe
11:05:47 <CosmicRay> that should have people flocking over in droves.
11:06:03 <CosmicRay> except the phb's, but we don't want them anyway
11:06:24 <mwc> nah, Haskell doesn't market itself, so the phb's will never hear of it
11:06:46 <Speck> Haskellers are idealists. Java-drones are practical -- but stupid. :-P
11:08:10 * CosmicRay must depart, cyall this evening
11:08:14 <Speck> later
11:31:57 <Speck> @pl \x -> 1/x + 1/(x*x)
11:31:58 <lambdabot> liftM2 (+) (1 /) ((1 /) . join (*))
11:32:03 <Speck> oooo
11:32:21 <wagle> s/pl/obfuscate/
11:32:29 <Speck> it's always fun to watch
11:33:05 <lament> what is @pl?
11:33:47 <Speck> pointless?
11:33:54 <Speck> pont-free reduction
11:34:29 <lament> :(
11:34:38 <Oeje1> Speck: Drone is an OK word; I prefer to call them "typing monkeys".
11:34:45 <Speck> hehe
11:35:01 <lament> what's a point?
11:35:08 * Oeje1 himself was a typing monkey this semester :-(
11:36:39 <lament> true programmers don't type
11:36:48 <lament> they use ink and a brush
11:37:05 <mwc> yeah, but it's hard to find a compiler that accepts canvas
11:37:19 <astrolabe> It seems to mean you write the function without using arguments
11:38:33 <lament> @pl \x -> x
11:38:35 <lambdabot> id
11:39:01 <lament> @pl \x -> x + x
11:39:02 <lambdabot> join (+)
11:39:56 <smott> @pl \a b c -> a c + b c + a c
11:39:57 <lambdabot> flip =<< (liftM2 (+) .) . liftM2 (+)
11:41:14 <Cale> @pl \a b c -> a * b + b * c + c * a
11:41:16 <lambdabot> liftM2 flip ((liftM2 (+) .) . (`ap` (*)) . (((.) . (+)) .) . (*)) (*)
11:41:32 <smott> ouch
11:43:23 <astrolabe> Can all functions be written pointlessly?
11:43:48 <lament> that would be a great theorem.
11:43:54 <lament> Fundamental theorem of FP: All functions are pointless.
11:44:35 <Speck> is there some kind of trick algo to determine the sum of primes < m?
11:44:53 <astrolabe> Speck: I doubt it
11:45:09 <Speck> then I need a very efficient primes function
11:45:22 <lament> why are you summing primes?
11:46:31 <Speck> some internet challenge
11:46:42 <astrolabe> Is the sieve of Erastothenese fast enough?
11:46:52 <Speck> I need all primes < 1000000
11:47:12 <lament> the most efficient way would be to have them all in a list.
11:47:12 <Speck> might be fun to parse out a text file with them all :-)
11:47:19 <astrolabe> should be then, if you only need them once.
11:47:21 <lament> Speck: great minds :)
11:47:42 <Speck> I have the list right here too
11:47:49 <lament> ah, well, there you go.
11:48:42 <lament> by the way i put a non-prime number in your file as a joke :D
11:48:52 <lament> good luck finding it! :)
11:48:57 <Speck> z0mg
11:50:39 <mwc> Speck, Shor's factoring algo is faster
11:50:42 <AtnNn> how do you make an [IO String] into an IO [String]?
11:50:58 <Speck> mwc, I'll look into it :-)
11:50:59 <SyntaxNinja> @wiki ThatAnnoyingIoType
11:51:00 <lambdabot> http://www.haskell.org/hawiki/ThatAnnoyingIoType
11:51:10 <mwc> you'll need an ion trap, a quantum dot, or a quantum harmonic oscillator :P
11:51:16 <Speck> sequence?
11:51:25 <SyntaxNinja> AtnNn: see above link
11:51:29 <AtnNn> ty
11:51:40 <wagle> @pl flip flip flip flip flip
11:51:40 <lambdabot> flip flip flip
11:52:47 <wagle> @pl flip . flip . flip . flip . flip
11:52:48 <lambdabot> flip
11:53:36 <TheHunter> AtnNn, 'sequence' does the job, as Speck said.
11:53:38 <TheHunter> @type sequence
11:53:44 <lambdabot> forall a (m :: * -> *). (Monad m) => [m a] -> m [a]
11:53:55 <Speck> yay~ I know something!
11:54:55 <AtnNn> thanks :)
12:13:11 <Itkovian> evening
12:13:41 <bourbaki> hi
12:13:41 <Speck> hmm... parsec parser of ints `sepBy` spaces `endBy` eof
12:13:47 <Speck> does that work?
12:14:12 <Speck> I always have trouble with parsec; there's something I'm not understanding
12:15:16 <bourbaki> i just wondered if someone of you does know if there is any way to get all the opcodes behind a c-function pointer and copy it to a specific place and thus glue several functions together in succsession such you get around calling a c-function pointer more then once for several functions
12:16:11 <bourbaki> what i essentialy want is something like bind for c-functions
12:22:06 <Speck> hmm... my parsec parser is giving me wrong answers
12:25:04 <Muad_Dibber> Speck : what do you mean? It's giving you the wrong answers for the program you wrote? Or the program you wrote does not do as you expected?
12:25:20 <Speck> I think it's crashing silently
12:25:39 <Speck> actually I know it's running out of memory
12:25:54 <Speck> @paste
12:25:55 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
12:25:57 <Muad_Dibber> so you have some left recusrion?
12:27:09 <Speck> that link has the source
12:27:14 <Speck> I get a large negative number for the result
12:27:29 <Speck> the file is just a list of numbers separated by spaces
12:29:10 <Muad_Dibber> where is it then?
12:29:41 <Speck> http://www.utm.edu/research/primes/lists/small/100000.txt with the header removed
12:31:03 <Muad_Dibber> oh sorry, i gtg for a bit
12:31:07 <Speck> ok
12:31:08 <Muad_Dibber> check for some weird recursion or something
12:31:25 <Speck> I dunno about performance tuning parsec
12:31:32 <wagle> bourbaki: what's wrong with just calling the functions in succession: {*foo(1); *baz(2); *foo(64); ... }
12:32:46 * Speck goes out for a snack. if anyone's poking around at my problem just leave me a msg
12:38:31 <wagle> oh darn
12:41:25 <Lemmih> SyntaxNinja: Greetings. Would it be OK if I added a Cabal hook for post configure modifications of the PackageDescription?
12:56:41 <SyntaxNinja> Lemmih: won't postConf do?
13:17:23 <Speck> Is there some kind of persistence engine for haskell data types?
13:17:57 <Speck> (perhaps with some dbms-like querying capabilities?)
13:19:42 <lament> in hugs, what is an unresolved top-level overloading?
13:20:56 <Heffalump> you've probably run into the monomorphism restriction. Give an explicit type signature.
13:23:13 <lament> phew
13:23:16 <lament> got it working
13:24:49 <lament> problem was with read
13:36:48 <mje> Does anybody know why Data.Graph.transposeG doesn't give back vertex and key mappings? (like graphFromEdges does)
13:37:37 <mje> Is it because I'm supposed to use InductiveGraph?
13:51:29 <Speck> adios
14:03:32 <Lemmih> SyntaxNinja: Nope. It doesn't allow me to change package dependencies.
14:40:05 <swiert> how can I emit a beep from Haskell?
14:41:53 <aheller> does putStr "\a" work?
14:50:42 <Itkovian> night
15:36:18 <AtnNn> win 10
17:13:55 <Spark> anyone clued up on concurrency
17:14:17 <Spark> i'm wondering if/when bisimulation ==> operational equivalence
17:20:58 <esap> is there a single well-defined notion of operational equivalence. I've been told there are more than one notion of equivalence in use.
17:21:05 <esap> s/./?/
17:21:30 <Spark> it wouldnt suprise me
17:22:28 <esap> At least I remember some papers by Valmari about all different kinds of equivalences based on bisimulation.
17:22:31 <Spark> im trying to get my head round it, but it seems that the viewer sees the "effect" of the code, but the effect, in itself, is less information than the state transitions
17:23:59 <Spark> is there much correspondence between operational equivalence in sequential and concurrent programs?
17:26:15 <Spark> my mouse isnt working :s
17:26:28 <Spark> "essential transitions to bisimulation equivalences"
17:26:31 <Spark> would that be worth a look?
17:26:37 <Spark> i'll have to ssh into uni to get at it
17:32:13 * esap couldn't find an online version of that, and can't remember to have read that one :-)
17:41:22 <jlouis> there are more than one notion of equivalence. For instance there is the natural one (2 programs forming the same operational tree are equivalent)
17:41:50 <jlouis> and the observational equivalence: programs agree on output for equal input
17:42:28 <jlouis> and contextual equivalence: Irregardless of which context programs p and p' are placed in, they evaluate to the same
17:49:08 <esap> For concurrent programs, you need to also consider timing and synchronization, which can complicate the issues as well.
17:49:23 <esap> And produces lots of different equivalence relations
17:49:47 <esap> Since programs can produce different output based on timing issues.
17:49:59 <Spark> cant you just equate the set of possible outputs though
17:50:27 <Spark> jlouis: is contextual eqiuvalence the same as observational equivalence, if you say that the context observes the p and p'
17:52:13 <esap> yea, of course normally those different outputs are considered to be equivalent. But there are some possibilities for the systems to become deadlocked or livelocked, which need to be considered for the semantics.
17:55:06 <Spark> ,,
17:55:10 <Spark> mm
18:58:47 <cm> lambda-ahoi
19:11:23 <TheHunter> r
19:11:30 <TheHunter> oops, sorry
19:13:27 <dons> @arr
19:13:28 <lambdabot> I want me grog!
19:19:09 * cm arrrrrs at dons
19:49:05 <MachinShin> hey all
19:49:27 <mwc> Get out! Get out well you still can!
19:49:41 <mwc> OH NO, THEY HEARD ME, AARGH!!!!!
19:49:45 * mwc is dragged out in a straight jacket.
19:50:36 <dons> @yow
19:50:37 <lambdabot> I wonder if I should put myself in ESCROW!!
19:51:08 <mwc> Who'd get you out?
19:53:28 <Spark> @moo
19:54:04 <lambdabot> no @moo for you!
19:54:10 <aheller> anyone wanna help me get my head around parsec?
19:54:17 <Lemmih> heh
20:02:17 <stefanw> here you go:
20:02:20 <stefanw>                  /~~~~\   /~~~~\
20:02:20 <stefanw>                  \    /   \    /
20:02:20 <stefanw>                   |  |_____|  |
20:02:20 <stefanw>                 /~             ~\
20:02:20 <stefanw>        /~~~~~-_|  /~~\    /~~~\  |_-~~~~~\
20:02:20 <stefanw>        \ ==== /| |   O|  |   ^ | |\ ==== /
20:02:22 <stefanw>         ~-__-~ | |_---+--+----_| | ~-__-~
20:02:24 <stefanw>                |/~             ~\|
20:02:26 <stefanw>                /                 \
20:02:28 <stefanw>               (      O      O     )
20:02:30 <stefanw>                `\              ./'
20:02:36 <stefanw>                  ~-__________-~|
20:02:38 <stefanw>                  |   |\__/|    |
20:02:40 <stefanw>                  |   |/~~\|    |
20:02:42 <stefanw>                  | /~~~~~~~~~\ |
20:02:44 <stefanw>                  | |         | |
20:02:46 <stefanw>                  | |         | |
20:02:48 <stefanw>                  | |         | |
20:02:50 <stefanw>                  | |         | |
20:02:58 <dons> the @moo to end all moos!
20:03:58 <Spark> thats a giraffe
20:07:19 <stefanw> i'll stop it
20:07:33 <dons> :}
20:07:48 <Spark> ITS LOOKING AT ME ALL FUNNY
20:08:11 <araujo> }8-]
20:08:21 <dons> now I'm scared. It's WINKING at you Spark!
20:08:53 <Spark> i get the impression it's masturbating too, but we cant see that
20:11:01 <ozone> uh oh, stefan's on #haskell now
20:11:23 <Cale> aheller: What do you need help with?
20:11:45 <aheller> I'm trying to parse a ppm.
20:12:07 <aheller> mostly for practice.  But I can't get a value out of the parser.
20:12:12 <Cale> aheller: A parser is a little component that possibly reads some characters and returns a value, or fails with an error.
20:12:16 <Cale> aheller: oh?
20:12:28 <Cale> you generally return it with "return"
20:12:37 <Cale> at the end of a do block
20:13:06 <Cale> or do you mean, when you run the parser, you want the result and can't get at it?
20:13:15 <aheller> yeah; ummmm...  do string "P6" >> ignorable; width <- (many digit); return width
20:13:21 <aheller> the latter
20:13:34 <aheller> ignorable is comment <|> spaces
20:13:56 <Cale> parse  :: Parser a -> FilePath -> String -> Either ParseError a
20:13:58 <aheller> and comment is skipMany1 (char '#' >> manyTill anyChar (try (char '\n'))
20:14:08 <Cale> the FilePath is just used in error messages
20:14:18 <Cale> so it's okay to put "stdin" or ""
20:14:30 <aheller> I was using parseTest....
20:14:44 <Cale> ah, parseTest doesn't return the value
20:14:49 <aheller> well, switched to parseFromFile, which seems to do the same thing, more or less.
20:14:59 <aheller> ah.
20:22:56 <aheller> Cale: I'm sure I'm doing something silly, but I'm not sure what yet: would you be so kind as to look at http://www.haskell.org/hawiki/HaskellIrcPastePage at the very end?
20:28:55 <Lemmih> You get an error?
20:29:27 <aheller> no, I get nothing.
20:29:40 <aheller> x is ""
20:30:35 <Lemmih> Maybe there aren't any digits in the file?
20:32:39 <aheller> Main> do file <- readFile "oxygen.ppm"; putStr $ take 30 file
20:32:39 <aheller> P6
20:32:39 <aheller> #Created with The GIMP
20:32:39 <aheller> 629
20:33:55 <aheller> Main>
20:36:45 <Lemmih> s/string "P6"/string "P6\n"/
20:38:01 <aheller> fantastic!
20:38:21 <aheller> why didn't the spaces from ignorable pick that up?
20:38:28 <Lemmih> 'ignorable' takes the newline and 'many digits' gives nothing on "#Created with The GIMP".
20:39:00 <Lemmih> ignorable takes some comments or some spaces but not both.
20:39:10 <aheller> ah.
20:39:26 <aheller> so could I have done many1 ignorables instead of "P6\n"?
20:46:11 <aheller> no, but I see that my problem was using (many digits) instead of (many1 digits), when i meant the latter.  Thanks *so* much.  this was killing me.
21:00:12 <Lemmih> aheller: I've posted some modifications on the wiki.
21:00:55 <aheller> Sweet.  I'll check them out and then straight to bed.  Have to be up in 5 hours to drive my boss to the airport.
21:07:12 <aheller> Lemmih: I'm not sure I see the changes.
21:08:13 <aheller> but I must to sleep; I well check again on the morrow.
21:10:49 <mwc> op
21:10:52 <mwc> top
21:11:02 <mwc> er, nvm, it's late
22:36:30 <Lemmih> steven_h: Network problems?
22:36:36 <bbls> hello
22:36:41 <Lemmih> Hey bbls.
22:36:49 <bbls> hi Lemmih
22:39:51 <Lemmih> Hacking something fun?
22:40:50 <bbls> yes
22:40:58 <bbls> a toy computer algebra system
22:53:36 <MachinShin> night all
23:34:25 <dblhelix> have I missed the announcement of TMR #4 on the mailing lists?
23:39:44 <astrolabe> It is out now.  http://www.haskell.org/tmrwiki/IssueFour
23:43:07 <dblhelix> astrolabe: yeah, that's why I asked, I just stumbled upon it per del.icio.us/tag/haskell
23:44:13 <astrolabe> I'm not sure if it was announced
23:44:50 <dblhelix> well, maybe I just missed it
