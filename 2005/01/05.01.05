00:23:48 <autrijus> what is the preferred way to do encoding conversion in ghc?
00:23:51 <autrijus> ICU?
00:23:56 <autrijus> libiconv?
00:41:19 <steff[uni]> ello ello
00:41:44 <autrijus> ello ello ello how low
00:41:50 <Calister[uni]> ^_^
00:42:02 <Calister[uni]> i got a prob
00:42:32 <Calister[uni]> my prof gave us a main function, but its causing errors >_< compile time errors
00:43:13 <Calister[uni]> "Empty Script - perhaps you forgot the >'s?"
00:43:44 <Calister[uni]> but since i have no clue how haskell usually opens and reads out a textfile, im pretty lost
00:44:36 <autrijus> file name?
00:46:21 <autrijus> if it ends in .lhs try saving it as .hs
00:46:22 <aleator> Not knowing what you compiled and how, I can only suggest renaming file to .hs instead of .lhs
00:46:25 <autrijus> and vice versa
00:46:59 <Calister[uni]> hmm
00:47:01 <Calister[uni]> oki
00:47:03 <Calister[uni]> will try
00:47:05 <Calister[uni]> :)
00:59:37 <Calister[uni]> ok, i found that i am stupid :x
00:59:41 <Calister[uni]> and my prof is too
00:59:43 <Calister[uni]> ^_^
00:59:52 <Calister[uni]> so im at least not the only stupid one
01:01:33 <autrijus> (Stupid a) => (a, a)
01:03:27 <Calister[uni]> laters
01:03:29 <Calister[uni]> :)
01:03:30 <Calister[uni]> n thx
01:05:24 <Itkovian> meuning
01:24:55 <musasabi> morning
01:25:44 <Itkovian> I'm kinda back after a few hectic weeks
02:03:42 * autrijus looks at a sheerly unreadable lin
02:03:43 <autrijus> line
02:03:43 <autrijus>     let pairs = map (concatMap ((\(a, b) -> [a,b]) . (splitAt 4) . (!! 1) . words) . lines) [c950, c835]
02:03:58 <autrijus> what's the idiom to drop the \(a,b)->[a,b] thing?
02:04:05 <autrijus> that is, a splitAt that returns a list not a tuple
03:10:39 * shapr yawns
03:10:47 * rtega too
03:11:02 * Lemmih just ponders.
03:11:21 <shapr> can I select the longest string in a given field with postgresql? max() appears to work by ordering the string contents.
03:11:49 * shapr is looking for posts with many references in the haskell mailing lists archive.
03:12:34 <Lemmih> What would be a nice syntax for calling static methods from a C++ class?
03:14:15 <Lemmih> I see two options; either require explicit type signature for such functions or prefix it with the class name.
03:15:52 <mflux> shapr, can't you max on strings length?
03:16:19 <shapr> probably? Do you know how?
03:17:30 <mflux> select * from bar where length(str)=(select max(length(str)) from bar);
03:17:51 <mflux> (which will of course return potentially many rows)
03:18:03 <shapr> I'll try it.
03:19:06 <shapr> yay
03:21:04 <shapr> foo, I don't have references in a separate field, so I just a really big header with a single references pointer.
03:26:29 <shapr> base64 encoded? --> references: <1706.216.98.60.147.1102346646.squirrel@216.98.60.147>=?iso-8859-1?q?=09?=<20041206160622.GA4091@students.mimuw.edu.pl>=?iso-8859-1?q?=09?=<41B48777.4010005@cl.cam.ac.uk>=?iso-8859-1?q?=09?=<87oeh7gzca.fsf@qrnik.zagroda>
03:28:38 <shapr> hoi swiert 
03:28:45 <swiert> hi shapr
03:28:59 <shapr> How's code?
03:29:28 <swiert> not too much code recently. I've been writing my thesis and application letters for PhD positions.
03:29:48 <shapr> Where do you want to do your PhD?
03:30:01 <swiert> there's one spot opening in Utrecht:
03:30:09 <swiert> http://www.cs.uu.nl/vacatures/62411.html
03:30:36 <swiert> I'm also looking into Nottingham.
03:31:03 <shapr> Working with Helium would be nifty.
03:31:21 <shapr> What does Nottingham focus on?
03:31:31 <shapr> Everyone knows what Utrecht does :-)
03:31:42 <shapr> Nottingham has Graham Hutton et al, right?
03:31:49 <swiert> yep
03:32:03 <shapr> Didn't the Epigram project move to Nottingham as well?
03:32:04 <swiert> I would be interested in doing  a bit more theory than they do in Utrecht.
03:32:28 <swiert> Conor McBride and Thorsten Altenkirch are both there - they do Epigram and lots of type theory.
03:32:44 <swiert> which I'd be fairly interested in.
03:33:02 <shapr> I still haven't decided whether I prefer the HM typesystem or Epigram's dependently typed system.
03:33:20 <swiert> I think they are both good for different things.
03:33:38 <shapr> I wish I could mix and match typesystem chunks in a program so I could get the benefits of both.
03:35:31 <swiert> hmm - I wouldn't recommend mixing type systems within one program.
03:39:28 <swiert> you'd have to transfer type information between the different systems - but types may mean different things in the different systems.
03:40:22 <kosmikus> swiert: if you can go to Nottingham, then by all means, go :)
03:42:51 <swiert> kosmikus: then I can visit you in Cambridge ;-)
03:43:23 <kosmikus> swiert: I'm not going to Cambridge
03:43:32 <swiert> Bonn?
03:43:42 <kosmikus> yes
03:44:15 <swiert> congratulations - when do you plan to leave?
03:45:21 <kosmikus> going to Tallinn for two months starting February, then leaving Utrecht either 15 April or 15 June, depending on whether I get the two months unpaid leave back at the end of my contract or not
03:46:49 <swiert> what are you going to do in Tallinn?
03:47:08 <kosmikus> talk to Tarmo Uustalu, learn about TT ;)
03:48:10 <swiert> how's you Estonian?
03:48:21 <swiert> nelli Saku.
03:49:06 <kosmikus> ma on kosmikus
03:49:12 <kosmikus> ma olen, sorry
03:49:27 <kosmikus> minul ei ole raha
03:49:41 <swiert> something about beer?
03:51:25 <kosmikus> no, the last one means: I don't have money
03:51:32 <shapr> looks like finnish
03:51:50 <kosmikus> shapr: sure, it's very closely related
03:52:42 <swiert> kosmikus: I thought ole was beer.
03:53:30 <kosmikus> \tilde{o}lu is beer
03:53:47 <kosmikus> olema is "to be"
03:54:04 <kosmikus> olen is first person singular of olema
04:43:00 <Itkovian> @seen boegel
04:43:01 <lambdabot> I saw boegel leaving #Haskell 1 day 3 hours 16 minutes 19 seconds ago.
04:43:25 <Itkovian> ah well
04:45:26 <autrijus> mm ICU binding done.
04:45:33 <autrijus> or rather, icu's uconv.
04:45:45 * autrijus should read up hackage to package it properly
05:19:07 <srid> YAHT.pdf has some invicible text
05:19:23 <srid> is there a HTML version of it?
05:20:32 <xerox> Seems not
05:21:03 <srid> some characters are not visible in the pdf
05:21:10 <srid> possibly encoding problem
05:21:18 <ibid> curious
05:21:32 <ibid> usually html has worse problems than pdf in that area
05:21:34 <srid> is anyone able to see this?
05:22:14 <ibid> url?
05:23:25 <srid> ibid: google for 'yet another haskell tutorial' (without quotes) - the first link
05:23:38 <ibid> blah
05:23:41 * srid downloads ubuntu iso at 6 kBps .. so cannot browse now
05:24:23 <ibid> ugh, download form, no thanks
05:25:20 <srid> ibid: just add a filetype:pdf to get the direct link
05:25:30 <srid> ibid: and u can just submit that form without filling anything also ;)
05:25:36 <srid> it works
07:52:37 * shapr chortles quietly
08:06:52 <musasabi> What is currently the "best" curses binding for haskell?
08:11:09 * wli has been looking for any curses binding
08:11:31 <musasabi> There are multiple..
08:11:47 * wli is apparently not aware of any of them
08:12:15 <musasabi> well none of them are properly packaged.
08:12:25 <tuomov> they're all probably variants of one hacked for the app in question
08:13:31 * musasabi has his own hacked up curses too, but this time I was thinking of using a proper binding.
08:14:18 * Igloo has one that is just an FFI layer and is generated by TH (although with a small amount of hacking you can get plain Haskell source out)
08:16:31 <musasabi> Igloo: care to send that somewhere?
08:17:33 <Igloo> darcs http://urchin.earth.li/darcs/ian/hcurses/ (it might need .../ian/cstring/ too)
08:17:59 <wilx> TH?
08:18:07 <Igloo> Template Haskell
08:18:08 <wilx> @explain TH
08:18:09 <lambdabot> Sorry, I don't know the command "explain", try "lambdabot: @listcommands
08:18:10 <wilx> Oh.
08:18:15 <wilx> @listcommands
08:18:15 <lambdabot> I react to the following commands: ["all-dicts","arr","cmafihe","define
08:18:15 <lambdabot> ,"definitions","del-definition","devils","dict","dict-help","dummy","dump
08:18:15 <lambdabot> ,"dynamic-load","dynamic-reload","dynamic-unload","easton","echo","elements
08:18:15 <lambdabot> ,"eurohaskell","eval","foldoc","fortune","gazetteer","get-definition","goodbye
08:18:15 <lambdabot> ,"hello","hitchcock","index","info","jargon","join","karma","karma+","karma
08:18:17 <lambdabot> ","learn","leave","listchans","listcommands","listmodules","lojban","moo
08:18:18 <lambdabot> ,"msg","part","prelude","quit","reconnect","resume","seen","set-fuel","state
08:18:20 <lambdabot> ,"topic-cons","topic-init","topic-snoc","topic-tail","topic-tell","type
08:18:22 <lambdabot> ,"vera","web1913","wiki","wn","world02","yow"]
08:18:29 <wilx> @define TH
08:18:30 <lambdabot> (line 1, column 1):
08:18:30 <lambdabot> unexpected end of input
08:18:30 <lambdabot> expecting white space or simple term
08:18:44 <wilx> @info TH
08:19:08 <wilx> @info TH = Template Haskell
08:19:17 <wilx> Tee hee hee.
08:19:42 <musasabi> Igloo: thanks.
08:19:45 <wilx> Hmm...
08:19:54 <wilx> lambdabot has strange listing :)
08:20:11 <wilx> It misses `"' character at the end of each line.
08:20:34 <wilx> @lojban
08:20:46 <wilx> lambdabot?
08:22:19 <musasabi> What is "higher-kinded polymorphism" ?
08:39:02 <TheHunter> kind polymorphism?
08:42:02 <Cale> musasabi: perhaps it refers to the case of having type variables with kinds other than just * -- for example, in "fmap :: (a -> b) -> (f a -> f b)", f has kind * -> *
09:47:51 * shapr entertains himself reading 'vote him off the island' on http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=285520
09:53:10 <goron> I need to generate a trace of an execution. How can I do that?
09:53:26 <goron> I am using ghci.
10:22:57 <bourbaki> moin
10:32:46 <goron> lol @ GHC release schedule: "and we plan to release 6.4 around October/Novermber."
10:35:38 <bourbaki> @seen boegel
10:35:39 <lambdabot> I saw boegel leaving #Haskell 1 day 9 hours 8 minutes 57 seconds ago.
10:44:54 <shapr> @seen xbill
10:44:54 <lambdabot> I haven't seen xbill
11:51:16 <basti_> hi
11:51:39 <rtega> hi
11:52:48 <Lemmih> Greetings.
11:53:48 <goron> hi
11:54:10 <goron> I have a question about the term reusage of ghci. 
11:55:06 <basti_> would you mind asking it or shall we guess? =)
11:56:39 <goron> basti_: Yes. (Somebody called me. )
11:56:51 <basti_> oh.
11:56:55 <basti_> :)
11:57:03 <goron> (line,showThe line ++ snd  (printProof x1 (line+1))  ++ snd  (printProof x2 line))
11:57:11 <goron> I have this in my code. 
11:57:49 <goron> The fst of printProof x1 (line+1) holds a number which I want to use instead of the last line value. 
11:58:00 <goron> Will this be lineair or exponentional?
11:58:14 <basti_> :-o
11:58:18 <goron> In imperative language exponentional.
11:58:39 <goron> I would expect ghc to do it right.
11:58:40 <basti_> i dont have any idea.
11:59:15 <goron> I could place where's everywhere, but that would be *ugly*
11:59:47 <goron> Anybody else?
12:00:08 <goron> Well, I will try it anyway. 
12:25:28 <Lemmih> Igloo: ping.
12:25:49 <Igloo> Hello
12:30:01 * Igloo watches the tumbleweed blow across the channel  :-)
12:30:24 <Lemmih> Igloo: TH question: There's no helper functions for the creation of ForeignD? 'importD' and 'exportD' seems to be missing.
12:31:00 <Lemmih> Is this intentional?
12:31:13 <Igloo> No
12:31:59 <Igloo> They'd be importF/exportF, incidentally
12:32:25 <Igloo> Does splicing them in work?
12:32:55 <Igloo> There is a forImpD
12:33:39 <Igloo> (hmm, actually importD and exportD would be reasonable things to have too)
12:34:17 <Lemmih> Why the suffix 'F'?
12:34:43 <Igloo> Foreign. They're constructors of Foreign, not Declaration
12:42:34 <Lemmih> Thanks for your time.
12:45:45 * Igloo will try to remember to fit it, but is busy doing other things right now, sorry
13:35:01 * Darius is kind of surprised that it's Haskell that's extending the work in Practical Lock-Freedom.
13:57:42 <dubyaisdumb> $$blah$$
13:58:05 <Lemmih> ...
13:59:02 <Oejet> Hello, Lemmih.
14:01:10 <Lemmih> Greetings Oejet.
14:02:06 * Lemmih has just wasted an hour trying to figure out why his makefile was buggy so he's kinda cranky.
14:03:00 <Lemmih> Note to self: `ghc -M` is not as good as it should be.
14:09:06 <Heffalump> are there any decent ways of handling character encodings with Haskell>?
14:11:11 <musasabi> not really.
14:11:32 <Heffalump> bah, guess it'll have to be python :-(
14:24:21 <esap> hmm... does it mean anything to say "class X a | a -> a where ..." ? Specifically the 'a -> a' part?
14:25:18 <dustin`> In hugs, it says that fromIntegral has a signature of Integer -> Integer, but in the prelude documentation, it says (Integral a, Num b) => a -> b
14:25:34 <dustin`> Is there something wrong, or am I asinine?
14:26:04 <Riastradh> @type fromIntegral
14:26:05 <lambdabot> fromIntegral :: forall b a. (Num b, Integral a) => a -> b
14:26:18 <esap> I just did ':t fromIntegral' in hugs and it says the correct type.
14:26:22 <Riastradh> Same here.
14:27:33 <dustin`> Well, my method of doing that was to type 'fromIntegral' in the interactions window, and then the thing gives an error by saying that it has no show function for expression: fromIntegral, type: Integer->Integer
14:27:41 <dustin`> Though, :t shows the correct result
14:28:13 <esap> dustin: It's the defaulting rules kicking in, I think.
14:28:19 <dustin`> Ahh.
14:29:28 <Darius>  esap: I'd say no to your first question.
14:29:37 <Darius> a determines a axiomatically.
14:30:15 <Darius> But it may lead to different behaviour with other extensions (e.g. perhaps overlapping instances or something).
14:31:31 <esap> darius: yea, I thought so. What I'm really interested there is how do I express preorders with Haskell type classes and algebraic data types? I think it should be possible.
14:32:43 <esap> darius: But it needs a uniqueness contraint that seems to be difficult to express
14:36:13 <Darius> esap: There is the functional dependency '-> a'
14:37:09 <esap> hmm.. you can do that? like class Preorder a | -> a where ... ?
14:37:47 <Darius> The result, apparently, is that there can only be one instance of the class.
14:38:11 <esap> hmm.. that's exactly what I'm looking for.
14:40:17 <esap> darius: The trick there is that you can have other parameters to the class that provide the flexibility.
14:41:00 <Darius> esap: Yes, but if there aren't others...
16:19:08 <wli> hmm, array stuff is kind of hard to use
16:20:26 <wli> well, not really hard or anything, just a little awkward
16:48:31 <musasabi> A
16:49:31 <Lemmih> musasabi: Again with the A's, eh? (-:
16:56:44 <stepcut> DDs are overrated
16:56:58 <Lemmih> What's DDs?
16:58:15 <stepcut> as in 36DD...
16:58:51 <Pseudonym> Overrated on what scale?  Certainly not on the size scale.
17:00:12 <Pseudonym> (Not that size matters; it's what you do with it.)
17:07:45 <stepcut>  /join #haskelldb
17:07:47 <stepcut> eek
17:29:09 <autrijus> ugh.
17:29:14 <autrijus> ./OpenAFP/Types.hs:70:
17:29:14 <autrijus>     My brain just exploded.
17:29:19 <autrijus> I like ghc very much.
17:29:32 <stepcut> :)
17:31:57 <autrijus> what do I do with a compiler with exploding brains?
17:31:58 <autrijus> ;)
17:32:28 <Igloo> Make a minimal testcase and report a bug?
17:32:49 <autrijus> I found out the real reason
17:32:50 <autrijus>     I can't handle pattern bindings for existentially-quantified constructors.
17:32:56 <autrijus> so seems to be my problem
17:35:08 <dons> It isn't a bug, it is a case spj doesn't  know how to compile
17:35:46 <Igloo> If "My brain just exploded." is the entire error then I'd say it's a bug
17:36:04 <Igloo> If there's more detail then I concur  :-)
17:36:08 <esap> it's not the entire error. Lots of description with that error message.
17:36:10 <dons> nah. there's  more detail.
17:36:11 <dons> existentialExplode mbinds
17:36:11 <dons>   = hang (vcat [text "My brain just exploded.", 
17:36:11 <dons>             text "I can't handle pattern bindings for existentially-quantified constructors.",
17:36:12 <autrijus> there's more detail below that line.
17:36:15 <dons>         text "In the binding group"])
17:36:18 <dons>     4 (ppr mbinds)
17:36:31 <autrijus> however initially only the first line registered in my brain.
17:36:45 <autrijus> which caused my brain to explode, hence ignoring all the details below.
17:36:48 <dons> according to legend, spj committed this code late one night, and indeed it was his brain that had exploded
17:36:59 <dons> or so I've been told
17:37:04 <autrijus> mm legends
17:37:23 <autrijus> oh well. this is easy to fix anyway
17:37:48 * autrijus applies another layer of indirection, which of course solves all problems including this one
17:40:13 <autrijus> so theoretically binding a existentially-quantified constr is determinable?
17:42:58 <dons> there it is. this funny msg was added on Wed Jul 22 16:33:04 1998
17:43:16 <dons> however, the commit message isn't very helpful: "Still broken"
17:45:11 <autrijus> I'm having this recurring feeling that the compiler is smarter than me.
17:45:18 <autrijus> is it normal to feel this way? ;)
17:45:52 <dons> I think so -- it is very smart :)
17:46:13 <dons> hooray for static typing!
17:46:52 <autrijus> indeed.
17:46:58 <dons> one of the best things about static typing is that you can program half asleep, and just answer y/n to the type errors ghc produces
17:47:19 <dons> ghc can make up for the sleep parts of your brain
17:47:24 <dons> sleepy
17:47:49 <esap> It's also great that you don't need to be able to run the code. Once it compiles, it works :-)
17:48:09 <Igloo> y/n? Have you got some cool tool I haven't heard about?
17:48:38 * esap thinks the assumption is that ghc error messages are self-explanatory.
17:48:47 <dons> nah, y/n == inspect line number, fix typo (hopefully)
17:48:58 <Igloo> Pity  :-(
17:49:09 <dons> though, this gives me an idea...
17:49:38 <dons> nah. too hard
17:50:01 <Igloo> One thing I often think is that when you get the pair of errors "foo has type x but has been given type y" and "foo used with type x but has type y" ought to be easy to prompt you whether you want to fix the type sig
17:50:02 <dons> I guesss it could just insert unsafeCoerce# on y/n :P
17:50:24 <Igloo> Although type synonyms mean it often won't give you quite what you want
17:50:54 <dons> yup. fixing type sigs would be alright. and inserting type sigs would be another one.
17:51:24 <dons> in fact, there should be a ghc flag to -ddump-type-sigs
17:51:42 <Igloo> And once we have the infrastructure for this sort of thing, we can write the tab-eliminator! Hurrah!
17:51:43 <dons> for dealing with old/unknown code with no signatures
17:51:52 <dons> hurrah!
17:52:15 <dons> well, we have -ddump-minimal-imports, so it isn't too far from tat
17:52:15 <autrijus> tab-eliminator?
17:56:44 <autrijus> is there a better way to write zero padding than this?
17:56:45 <autrijus> zeropad :: String -> Int -> String
17:56:45 <autrijus> zeropad str len = ( reverse $ take len $ reverse $ str ++ (replicate len '0'))
17:57:33 <Lemmih> Greetings, SyntaxNinja.
17:58:10 <SyntaxNinja> hihi Lemmih
17:58:29 <Lemmih> How's code?
17:59:23 <SyntaxNinja> not bad. did some good hackign at work today
18:01:00 <dons> autrijus: do you want it padded right? like zeropad str len = take len $ str ++ repeat '0'
18:03:00 <autrijus> dons: I want it padded left
18:03:09 <autrijus> so my definition was wrong
18:03:09 <autrijus> zeropad len str = reverse $ take len' $ (reverse str') ++ (replicate len' '0')
18:03:09 <autrijus>     where str' = (map toUpper $ showHex str "")
18:03:09 <autrijus>           len' = 2 * len
18:03:13 <autrijus> this is the current working one
18:03:32 <autrijus> I was wondering whether the two reverses was neccessary
18:04:02 <Igloo> You can calculate the number of spaces needed with length
18:04:23 <autrijus> hmm true.
18:05:35 <autrijus> zeropad len str = (replicate len' '0') ++ str'
18:05:35 <autrijus>     where str' = (map toUpper $ showHex str "")
18:05:35 <autrijus>           len' = (2 * len) - (length str')
18:05:42 <autrijus> that looks better. thanks!
18:06:13 <Igloo> All of those parens are superfluous
18:06:30 <autrijus> ah. right.
18:06:55 <Igloo> Not a problem, just a style thing  :-)
18:07:12 * autrijus needs to unlearn scheme :)
18:07:44 <vincenz> @eval (\x.x x)(\x.x x)
18:08:07 <lambdabot> out of fuel - use @resume to continue
18:23:04 <wli> Okay, I have yet to figure out how to extract a number from Data.Array.ST
18:23:59 <wli> this is sad
18:24:06 <wli> because I could do it not very long ago
18:25:53 <Igloo> readArray...or do I misunderstand?
18:26:10 <wli> readArray yes
18:26:30 <wli> I have to extract this from an STArray and output it at some point
18:28:50 <Igloo> You'll want runST or stToIO then
18:29:23 <wli> I'm probably doing something wrong if runST doesn't do it.
18:30:07 <wli> Control.Monad.ST.runST $ readArray (mkMatrix 5 5 (\(i,j) -> recip . fromIntegral $ i + j - 1)) (3,3)
18:30:20 <wli> Inferred type is less polymorphic than expected ...
18:31:00 <wli> probably a problem with mkMatrix 
18:32:03 <Igloo> ISTR using $ can cause problems
20:14:32 <dustin`> Okay, I'm getting the craziest error message for the following:
20:14:35 <dustin`> relprimetotwentysix = filter (\x -> gcd(x,26) == 1) [1..25]
20:15:40 <dustin`> The error is "Unresolved top-level overloading, Binding: relprimetotwentysix, Outstanding context: (Num b, Enum b, Num ((b,c) -> (b,c)), Num c, Integral (b,c))"
20:16:57 <Riastradh> You need to add some type annotations.
20:17:12 <Pseudonym> And fix one bug.
20:17:41 <Cale> gcd x 26
20:17:48 <Cale> you can't pass gcd a tuple
20:17:48 <Pseudonym> That's the bug.
20:17:52 <dustin`> Oh!  wow!
20:18:06 <dustin`> I got caught up in the similarity to regular math notation...
20:18:08 <dustin`> thanks!
20:18:39 <Cale> so you won't need the type annotations
20:19:39 <dustin`> Yeah, works beautifully now
20:20:08 <Riastradh> Well, if there's external context that can be used to infer the types, yes, you don't need type annotations.
20:22:10 <Pseudonym> Actually, there's Haskell's default instancing.
20:22:24 <Pseudonym> Which, I suppose, counts as external context.
20:25:37 <Lemmih> Welcome back SyntaxNinja.
20:33:13 <SyntaxNinja> hi Lemmih
20:33:32 <SyntaxNinja> I forgot about my chat session and shut off my laptop before and went home without logging off :)
20:49:49 <Lemmih> Igloo: Q is not an instance of Functor. Is this intentional?
22:38:29 * SyntaxNinja curses marvin--
22:40:49 <autrijus> How can I force a GC?
22:41:01 <autrijus> say I have a list of things:
22:41:03 <autrijus>     cs  <- readAFP input
22:41:21 <autrijus> now each element are read, ultimately, using unsafeInterleaveIO and mallocBytes
22:41:46 <autrijus> I'd like to have this take constant memory:
22:41:56 <autrijus>     cs' <- myFilter cs
22:42:11 <autrijus> but currently, although the read is lazy, the memory is not freed until cs goes out of scope.
22:43:48 <autrijus> is there a way to somehow pipe the read and the filter together, so there is no "cs" variable to bind it, and hence it can (persumably) free each item right after it's filtered?
22:45:09 <autrijus> or, alternatively, is there a way to mark something as "read once"?
22:45:28 <autrijus> as in, read it via unsafeInterleaveIO, and free it as soon as it's processed once
22:48:17 <dons> cs' <- (liftM myFilter) (readAFP input) ; roughly
22:49:19 <autrijus> ahhh.
22:49:26 <dons> but to really see what is happening, you should look at the Core: -ddump-simpl
22:49:39 <autrijus> 'kay.
22:54:34 <Lemmih> SyntaxNinja: What did he do?
22:55:52 <SyntaxNinja> when he refactored the command-line parser in cabal he removed the ability to not give error messages for unrecognized flags
22:59:00 <SyntaxNinja> I think I'll go to Sweden and give him a piece of my mind!
23:00:48 <bourbak1> moin
23:01:03 <Lemmih> Greetings, bourbak1.
23:01:28 <bourbak1> Lemmih: wanna see something i did for my game that i wanted to do in haskell :)
23:01:45 <bourbak1> but now i do it in c++ dx thinking about a dx interface to haskell though
23:01:47 <Lemmih> Sure.
23:02:11 <bourbak1> have you got an email addy where i could send the exe to?
23:02:26 <Lemmih> I'm using Linux.
23:02:52 <Lemmih> Port it to OpenGL and send me the source (-:
23:03:34 <bourbak1> :)
23:03:56 <bourbak1> hm i think a ogl port is farfetched
23:04:17 <bourbak1> but maybe id be interested to do a proper renderer interface with ogl and dx in some far future :)
23:04:36 <autrijus> it seems that I really want .Pool instead.
23:04:46 <Lemmih> Does DirectX has any advantages over OpenGL?
23:06:56 <bourbak1> dx has a lot of cool utility functions
23:07:16 <bourbak1> and its not a pain in the ass with the extensions and the like
23:08:05 <Lemmih> Does that outweigh the lacking portability?
23:08:42 <bourbak1> well its not portable atm anyway
23:08:58 <bourbak1> and i just want to finish my game :)
23:09:27 <bourbak1> i have done so many pet things in ogl crappy things and now once in a time i want to finish this game and this is why i use dx :)
23:09:44 <Lemmih> Oki.
23:09:56 <bourbak1> i have now rendered menus from the util classes can use shaders and get input thats all i need :)
23:13:24 <bourbak1> oh and another cool thing is that the shader compiler is working in the VC.NET ide :)
23:58:59 <Itkovian> @seen boegel
23:59:00 <lambdabot> I saw boegel leaving #Haskell 1 day 22 hours 32 minutes 19 seconds ago.
