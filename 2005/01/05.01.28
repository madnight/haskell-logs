00:17:52 <musasabi> Is there a way to lift "destructors"?
00:17:55 <musasabi> that is:
00:18:18 <musasabi> foo (Bar a b c) = bar a >> bar b >> bar c
00:19:50 <Itkovian> meuning
01:02:21 <musasabi> How do I add -O2 to ghc when building with Cabal?
01:08:04 <Itkovian> eh?
01:08:28 <musasabi> found Options-Ghc: 
01:25:59 <Itkovian> where did you see that musasabi?
02:06:50 <musasabi> Itkovian: http://www.haskell.org/cabal/proposal/x611.html
02:08:23 <Excedrin> 3 ~+
02:44:05 <musasabi> Should Eq be transitive? And how should one define Ord for non-transitive Eq types?
02:44:41 <musasabi> i.e. for types where (a == b && b == c) does not imply (a == c)
02:48:50 <wilx> Hmm, isn't equvalence transitive by definition? :)))
02:49:21 <wilx> equivalence even
02:58:30 <musasabi> wilx: yes, I think I'll have to redesign things a little.
02:59:18 <wli> musasabi: eh?
03:00:27 <musasabi> well I had the code use the broken Eq instance and noticed that "this doesn't work" when needing Ord.
03:03:30 <musasabi> basically I had newtype Type = T Int, (T 0) == _ = True, _ == (T 0) = True, (T x) == (T y) = x == y
03:05:20 <musasabi> that is a value which is "equal" with all other values.
03:08:10 <wilx> Hm...
04:19:06 <TheHunter> there is no pragma to disable a ghc warning, is there?
04:22:51 <TheHunter> hmm, (_+1)-patterns aren't even allowed.
04:33:56 <Lunar^> musasabi: here ?
05:14:25 <SolidRain> hi
05:17:28 <shapr> y0
05:18:04 <SolidRain> i'm searching on any sensible haskell/hugs98 ebook or something like it. are there any ebook stores that sell haskell/hugs98 books or does any have one themselves?
05:20:55 <tromp> see http://haskell.org/bookshelf/
05:25:27 <SolidRain> thanks
05:27:22 <SolidRain> ihow can someone love haskell only in the slightest way.
05:27:26 <SolidRain> :)
05:27:49 <SolidRain> sure its the wrong channel for wondering that but it has to be said :)
05:29:50 <Lemmih> s/only/even/ ?
05:33:01 <SolidRain> 1
05:33:20 <musasabi> Lunar^: pong.
05:34:10 <musasabi> SolidRain: because it is a very nice language..
05:35:32 <Lemmih> SolidRain: It allows us to write bug-free code really fast.
05:36:12 <SolidRain> but code for tiny programms
05:36:44 <SolidRain> btw bug-free depends on the coder
05:37:35 <Lemmih> SolidRain: Yes. That's why Haskell protects you againts the coder (aka you). (:
05:38:14 <Lemmih> SolidRain: Writing large programs in Haskell isn't more difficult than in other languages.
05:39:08 <Itkovian> SolidRain: how can one not?
05:39:58 <SolidRain> hm :)
05:40:49 <Lunar^> musasabi: Do you know if there's any way to get argc/argv via getArgs ?
05:54:02 <musasabi> Lunar^: no, I think they are preprocessed by the rts.
05:54:20 <musasabi> Lunar^: you could use your own main if you need access to them.
05:56:26 <Itkovian> musasabi: after the preprocessings, the rest ends up in the actual haskell code?
05:56:44 <Lunar^> musasabi: I'll manage, then
05:58:03 <musasabi> Itkovian: yes, as a plain list of strings (without any encoding conversions at the moment)
06:01:07 <Itkovian> and in the preprocessor can one leave alone args that come after "--"
06:01:14 <Itkovian> if yes, any idea hwere that code resides?
06:05:17 <Lemmih> Itkovian: It just converts char*[] to [String]. It doesn't touch the contents.
06:08:06 <shapr> SolidRain: first time I wrote a program via induction, the scales fell from my eyes...
06:10:23 <shapr> well, maybe it was the second time.
06:11:55 <samc> what does that expression mean?
06:12:33 <shapr> The part about the scales?
06:14:19 <samc> yes
06:14:41 <shapr> It's a biblical reference. It refers to Saul becoming Paul on the road to Damascus.
06:15:41 <timbod> Quick question: I can use Maybe as a monad in do notation as Maybe is already a monad instance. Is Either already such an instance also?
06:15:42 <shapr> He was blind at the time, when his sight suddenly returned a snake-scale-like something fell from his eyes.
06:15:54 <Lemmih> timbod: No.
06:16:02 <shapr> What about the Error monad?
06:16:30 <shapr> Like Parsec parsers, they use Left for error and Right for result.
06:17:17 <Lemmih> timbod: s/No/Yes/
06:17:19 <samc> heh, and I had thought the scales were scales as in weighing :)
06:17:19 <timbod> It's an error monad that I want - is there one in ghc's libs (just checking)
06:17:27 <musasabi> Has anyone stumbled upon ghc cvs (20050117) paniccing with a message like "lookupVers1 DNSziType Packet{d}" ?
06:17:32 <shapr> samc: So anyway, it was sort of a joke about me 'gaining my sight' and 'becoming a Haskell evangelist'
06:17:49 <TheHunter> timbod, yes and no. The error monad can do that, but only if the type of the Left is an instance of error, which can be annoying sometimes.
06:18:47 <TheHunter> it's because of this "fail is in the class Monad" misconception.
06:19:33 <timbod> Ok, but looking at the doco, it should work if my error is a string, and it's the left side of the Either?
06:19:53 <TheHunter> then it's perfectly fine.
06:22:30 <timbod> Thanks, actually my code was OK, I was just missing an import Control.Monad.Error
06:22:45 <wolfman8k> shapr: hi
06:22:55 <musasabi> Control.Exception is faster than Control.Monad.Error usually.
06:23:54 <TheHunter> musasabi, but that forces you into the IO monad, doesn't it?
06:25:09 <musasabi> TheHunter: only if you want to catch.
06:38:14 <skuggi> http://rafb.net/paste/results/jmrGqu81.html <- anyone know what's wrong?
06:41:03 <skuggi> probably some stupid error, i'm teh noob :)
06:41:49 <Lemmih> Woot!! Simple ClanLib binding (open window and display a png image) in 8 lines of Haskell (:
06:42:03 <sorje> Yah, you rock!
06:44:47 <musasabi> skuggi: you might start by writing up the type signatures of the functions.
06:45:05 <musasabi> skuggi: that is 1) documentation 2) catches stupid mistakes which we all make.
06:45:29 <arjanb> skuggi: you need parentheses at the last line
06:45:37 <funkmando> hello, i did ask before but can't get it to work for some reason : how do you print out quotes?
06:45:53 <skuggi> musasabi: hmm, ok.. don't quite remember how to do that :)
06:46:01 <skuggi> arjanb: where?
06:46:05 <musasabi> skuggi: in this case the error is in the putStrLn
06:46:34 <musasabi> putStrLn ("Resultat: "...++...)
06:46:36 <skuggi> ah, right.. solved it .)
06:46:41 <skuggi> thanks
06:47:17 <funkmando> ?
06:47:44 <musasabi> funkmando: putChar '"' ?
06:48:27 <funkmando> i was told before i use \" or something
06:48:30 <funkmando> but it won't work
06:48:40 <funkmando> i've not come across putChar yet so i'd rather not use it
06:48:58 <funkmando> until i know what it does, lol
06:48:58 * Lemmih bounces uncontrollably while watching Hacanon generate thousands of lines of correct Haskell & C++.
06:49:23 <musasabi> Lemmih: congrats :-)
06:50:03 <musasabi> funkmando: well you can escape '"' as \" inside strings. e.g. "foo \" bar"
06:50:41 <funkmando> i want it to print out "Package" not Package
06:51:03 <funkmando> so i say variable = "\"Package\"" ?
06:51:57 <musasabi> funkmando: you can do either putStrLn "\"Package\"" or print "Package"
06:53:15 <funkmando> won't compile
06:53:24 <funkmando> couldn't match string against IO()
06:55:18 <Lemmih> Screenshot of a HClanLib program: http://212.242.49.100/ss1.png
06:57:04 <funkmando> or better said, i want it to return "package"
06:57:20 <funkmando> typing var 1 returns one thing etc
06:57:37 <funkmando> so i have var 1 = stuff, var 2 = more stuff, var 3 = "Package"
06:58:02 <funkmando> but that jsut returns Package, lol
06:59:10 <musasabi> Has anyone got an example of using Cabal hooks?
06:59:56 <CosmicRay> I haven't seen any
07:10:06 <Lemmih> Hey ozone.
07:12:25 <CosmicRay> @seen pesco
07:12:25 <lambdabot> I saw pesco leaving #haskell 16 hours 34 seconds ago.
07:14:06 <CosmicRay> well, the debian people say that his license is an instance of the "do whatever the fuck you want" license, which is grudgingly acceptable :-)
07:14:16 <CosmicRay> funkmando:
07:14:17 <CosmicRay> @type show
07:14:19 <lambdabot> show :: forall a. (Show a) => a -> String
07:14:27 <CosmicRay> @eval show 5
07:14:28 <lambdabot> unbound variable: show
07:14:31 <CosmicRay> bah.
07:15:15 <CosmicRay> funkmando:
07:15:17 <funkmando> yes
07:15:20 <CosmicRay> Prelude> putStrLn "hi"
07:15:21 <CosmicRay> hi
07:15:21 <CosmicRay> Prelude> putStrLn "\"hi\""
07:15:21 <CosmicRay> "hi"
07:15:37 <CosmicRay> Prelude> putStrLn (show "hi")
07:15:37 <CosmicRay> "hi"
07:15:59 <CosmicRay> Prelude> putStrLn "one\ntwo"
07:15:59 <CosmicRay> one
07:15:59 <CosmicRay> two
07:15:59 <CosmicRay> Prelude> putStrLn (show "one\ntwo")
07:15:59 <CosmicRay> "one\ntwo"
07:16:04 <CosmicRay> Do you see the difference?
07:16:13 <CosmicRay> ghci and hugs effectively use show to display strings
07:16:24 <CosmicRay> they therefore display them using the haskell syntax for strings
07:16:33 <CosmicRay> that is, what they display can be cut and pasted into haskell source code verbatim
07:16:48 <funkmando> i see
07:16:56 <funkmando> so using ghc im not actually compiling the program as such?
07:17:02 <CosmicRay> the literal content of the string "hi" is just hi
07:17:10 <CosmicRay> you are using ghci, and with ghci, no, you are not compiling it
07:17:13 <CosmicRay> ghc compiles it
07:17:18 <CosmicRay> note that ghc and ghci do different things
07:17:29 <funkmando> k
07:17:30 <CosmicRay> ghci is an interpreter, and ghc is a compiler
07:17:40 <CosmicRay> if you added a line at the end of your program, saying:
07:17:45 <CosmicRay> main = putStrLn (answer 7)
07:17:55 <CosmicRay> then you can compile it and see the output you desire
07:18:04 <CosmicRay> ghc --make -o program program.hs
07:18:05 <CosmicRay> then
07:18:06 <CosmicRay> ./program
07:21:48 <CosmicRay> funkmando: does that make sense?
07:22:06 <funkmando> hmm
07:22:10 <funkmando> sort of
07:22:14 <funkmando> but how do i compile it?
07:22:21 <funkmando> i need ghc i guess, lol
07:22:22 <CosmicRay> that command I gave you:
07:22:24 <CosmicRay> <CosmicRay> ghc --make -o program program.hs
07:22:27 <CosmicRay> if you have ghci, you have ghc
07:22:41 <funkmando> yeah said ghc variable out of scope, or do i need to unload the module?
07:22:55 <CosmicRay> type that at the command line, not within ghci
07:23:11 <CosmicRay> so exit ghci first, then edit your source code to add the "main" line I gave,
07:23:15 <CosmicRay> then run that ghc command
07:24:02 <funkmando> ok, thanks
07:25:22 <funkmando> Warning: output was redirected with -o, but no output will be generated
07:25:22 <funkmando> because there is no Main module.
07:25:29 <shapr> wolfman8k: y0
07:25:29 <funkmando> :/
07:25:38 <funkmando> ah i need that main line, of course
07:25:40 <shapr> funkmando: there is no spoon!
07:25:49 <funkmando> how so shapr?
07:26:20 <CosmicRay> funkmando: that was a reference to The Matrix
07:26:36 <CosmicRay> which was so advanced, it was obviously written in Haskell.
07:26:38 <funkmando> ah i'm not actually terribly familiar with that film, lol
07:26:46 <funkmando> saw it once
07:26:46 <CosmicRay> I think we can blame the invasion of Zion on one of the Simons.
07:27:07 <CosmicRay> MegaMonad: have you seen The Matrix?
07:27:08 <MegaMonad> CosmicRay: I try to match the version i have to be practical in *any* language, even when i have an anti-piracy organisation.. But also a matrix either empty or a google for "haskell ffi" or something like elf or coq, something to do that.
07:28:06 <funkmando> hmm
07:28:11 <shapr> CosmicRay: that's totally quotable
07:28:13 <funkmando> cosmic ray i need a main module
07:28:27 <samc> MegaMonad, which pill did you take?
07:28:29 <MegaMonad> samc: I pressed return instead of svn, but there's also a pill to help me thinking it might confuse beginners, but it's a dictionary... It's not so good for me so a is the "c-- backend"?
07:28:29 <CosmicRay> oh, I forgot, you do have a "module" line at the top of your program
07:28:35 <funkmando> yes
07:28:40 <CosmicRay> funkmando: change the name of your module to Main and you should be set.
07:28:53 <CosmicRay> or just delete the "module" line
07:28:59 <funkmando> cool
07:29:04 <funkmando> it returned "Package"
07:29:22 <CosmicRay> there ya go
07:29:25 <CosmicRay> it works
07:29:36 <funkmando> cool th
07:29:37 <funkmando> thx
07:29:53 <CosmicRay> I would like to point you to Yet Another Haskell Tutorial
07:29:55 <CosmicRay> http://www.isi.edu/%7Ehdaume/htut/
07:30:11 <CosmicRay> it is a good read, and reading the first 50 pages or so will probably help you out tremendously
07:30:25 <funkmando> thanks muchly
07:30:31 <funkmando> wow it's huge!
07:30:32 <funkmando> lol
07:30:52 <CosmicRay> it's about 150 pages iirc
07:31:00 <CosmicRay> think of it as an o'reilly book for free :-)
07:31:07 <CosmicRay> err, 198 pages.
07:32:19 <samc> MegaMonad, who is Erdos?
07:32:21 <MegaMonad> samc: Just havee to eat more nuts, fish, whole wheat, and green leafy things.
07:32:32 <samc> huh?
07:32:45 <samc> how did that happen
07:33:09 <shapr> wow, another coherent sentence from MegaMonad
07:33:20 <CosmicRay> hehe
07:33:22 <shapr> samc: Erdös wa a cool math guy.
07:33:26 <shapr> was*
07:33:41 <CosmicRay> MegaMonad: who is samc?
07:33:42 <MegaMonad> CosmicRay: It's just a grasshoper so far.
07:33:53 <samc> hey!
07:33:55 <CosmicRay> MegaMonad: who is cosmicray?
07:33:56 <MegaMonad> CosmicRay: Cosmicray: yeah, and the minimum level at the type matters.
07:34:02 <CosmicRay> MegaMonad: who is shapr?
07:34:04 <MegaMonad> CosmicRay: Shapr: i think that's the actual code generated by "dbdirect sqlite mytable ignored mytable" will not work exactly like car cdr?
07:34:13 <shapr> twisted!
07:34:21 <CosmicRay> fitting,  samc and I get insulted, shapr gets lisp.
07:34:24 <shapr> haha
07:34:44 <shapr> Er wait, didn't I get insulted even worse?
07:34:49 <CosmicRay> haha
07:34:50 <shapr> C'mon, he used LISP on me!
07:35:01 <samc> heh
07:35:16 * Lemmih heads to bed. Code in peace, Haskellers.
07:35:20 <shapr> Lemmih: nice screenie!
07:35:43 * CosmicRay ITPs lhs2TeX
07:35:51 <shapr> yay
07:35:55 <Lemmih> Oh right. I almost forgot about the source for the screenshot.
07:37:06 <shapr> CosmicRay: hey, you do consulting work?
07:37:12 <skuggi> how do i use ghc to compile a .hs file into an executable in win32?
07:37:16 <samc> MegaMonad, who is Lemmih?
07:37:17 <MegaMonad> samc: Lemmih: what were you saying that you are taking over #haskell!!
07:37:26 <shapr> whoa
07:37:33 <CosmicRay> shapr: when it finds me, yes :-)   (iow, I don't often go out seeking it)
07:37:52 * shapr considers hiring CosmicRay for an IRC based "building debian packages" tutorial.
07:38:02 <CosmicRay> heh
07:38:03 <CosmicRay> Sure!
07:38:06 <CosmicRay> I'll do that for free!
07:38:11 <shapr> really? wow!
07:38:28 <CosmicRay> First you will notice the Debian Developer's corner, over at http://www.debian.org/devel/
07:38:39 <CosmicRay> that's the main index to all things developerish
07:38:54 <CosmicRay> over in the packaging column is the stuff you will care about most
07:39:04 <shapr> aha
07:39:15 <shapr> Is there a Haskell policy?
07:39:19 <CosmicRay> the developer's reference and the new maintainer's guide are probably the most useful for you
07:39:25 <Lemmih> Screenshot of a HClanLib program: http://212.242.49.100/ss1.png, src: http://212.242.49.100/Test.hs
07:39:40 <CosmicRay> there is an informal one at http://urchin.earth.li/%7Eian/haskell-policy/haskell-policy.html/index.html#contents
07:40:08 <shapr> dang, I have to go shopping, I'll bbiab.
07:40:10 <CosmicRay> then there is the policy manual
07:40:13 <CosmicRay> heh
07:40:18 * shapr sets his phaser to "log"
07:40:19 * CosmicRay bookmarks the tutorial
07:40:21 <CosmicRay> heh
07:40:43 <shapr> ok, I'll check this out when I get back and ask you any questions.
07:40:49 <CosmicRay> ok
07:40:59 <CosmicRay> I'll type a few more things at ya, so check your log when you get back
07:41:11 <CosmicRay> the new maintainer's guide is what you need to read to get started making a package
07:41:38 <CosmicRay> for haskell libraries, you will want my haskell-devscripts package.
07:42:03 <CosmicRay> for binary programs written in haskell, it's probably not very useful.
07:42:36 <CosmicRay> the menu policy is used for things that get added to the menu of various window managers
07:42:48 <CosmicRay> the debconf policy is used for things that must prompt the administrator for bits of information at install time
07:49:14 <Itkovian> I'm off. good weekend
07:49:43 <samc> would you colour the backslashes beginning and ending a string gap with the string colour?
07:56:58 <samc> MegaMonad: would you colour the backslashes beginning and ending a string gap with the string colour?
07:56:59 <MegaMonad> samc: Don't just thank me for a beginning.
07:57:44 <CosmicRay> heh
07:57:46 <desrt> MegaMonad: gimme some lovin'
07:57:47 <MegaMonad> desrt: Shapr: sure. Gimme a second.
07:57:48 <samc> MegaMonad: why don't you seem to be picking pertinent keywords?
07:57:49 <MegaMonad> samc: I haven't got any good keywords for me in a handy optimization to think in real life), i've posted to lemmih on friday.
07:57:59 <desrt> O_o
07:58:05 <CosmicRay> MegaMonad: O_o
07:58:06 <MegaMonad> CosmicRay: Pseudonym thinks . O o ( this acid's really good.  It is possible, if we change it to apply patches from multiple modules imported by default ?
07:58:11 <CosmicRay> haha
07:59:27 <desrt> MegaMonad: 42?
07:59:28 <MegaMonad> desrt: Life, the universe, and they can't go around writing x = 42 when you start to look into that and then returns stuff through a graph right?
07:59:36 <desrt> good job.
08:02:23 <samc> that is a surprisingly good answer
08:02:54 <desrt> it wasn't an answer.
08:03:00 <desrt> you'll notice that he correctly phrased it as a question :)
08:03:24 <CosmicRay> hehe
08:03:40 <CosmicRay> MegaMonad: what is the question?
08:03:42 <MegaMonad> CosmicRay: Despite listing several locations where staticmodules happens to me when i do when i talked with a modelling question: i'm trying to get what you meant a non-monad functions are "msgtokeywords".  Why are not very pretty.
08:04:12 <samc> MegaMonad: :p
08:04:14 <MegaMonad> samc: I've seen my progress ? :P.
08:04:53 <samc> MegaMonad: I've seen mine :p
08:04:54 <MegaMonad> samc: Ah, "kinsfolk", now there's a difference in state handling is just water", right :p.
08:06:33 <samc> MegaMonad: who is swiert?
08:06:33 <bourbaki> moin
08:06:34 <MegaMonad> samc: Hi swiert, hi peti.
08:07:04 <samc> MegaMonad: who is bourbaki?
08:07:05 <MegaMonad> samc: Bourbaki, to construct data for such exact arithmetic..
08:08:08 <swiert> hmm, peti's not even in.
08:09:12 <bourbaki> samc why dont you ask me who i am :)?
08:10:11 <CosmicRay> it's more fun to ask megamonad :-)
08:10:16 <samc> will you give a humouress answer?
08:11:07 <bourbaki> samc no except that was a humorous answer for you
08:12:45 <samc> I don't understand
08:13:34 <bourbaki> all i wanted to say was that depends on your kind of humor
08:14:57 * samc pretends to understand now
08:15:33 <bourbaki> :)
08:29:06 <tromp> @index interact
08:29:06 <lambdabot> Prelude,System.IO,IO
09:06:01 * CosmicRay uploads lhs2tex
09:08:29 <shapr> MegaMonad: Who is SyntaxNinja?
09:08:30 <MegaMonad> shapr: Syntaxninja is pleased w/ the wxhaskell packages.
09:08:44 <CosmicRay> hello SyntaxNinja :-)
09:08:55 <SyntaxNinja> hi CosmicRay, shapr, and MegaMonad
09:08:58 <shapr> MegaMonad: do you know SyntaxNinja ?
09:08:59 <MegaMonad> shapr: Smerdyakov you are editing, and it seems like pull fails for me i would judge to be the beginning of session, which means i end up with his code is hosted by syntaxninja, and the for flags.
09:09:18 <shapr> MegaMonad: Who is SyntaxPolice?
09:09:19 <SyntaxNinja> you coul ddo worse than end up with code hosted by me
09:09:19 <MegaMonad> shapr: Http://www.syntaxpolice.org/tmp/wxhaskell.
09:09:23 <shapr> scary
09:09:36 <SyntaxNinja> MegaMonad: shhh, don't tell them about the wxhaskell packages! they have forgotten!
09:09:38 <MegaMonad> SyntaxNinja: I am temporally in the packages, i don't use wxhaskell, but the jurors have come tomorrow anyway, so it's a singlepart, and another client whose name i've forgotten.
09:09:41 <shapr> MegaMonad has really crossed some threshhold.
09:09:59 <shapr> His sentence structure has dramatically improved.
09:10:49 <CosmicRay> hehe
09:10:56 <CosmicRay> the wxhaskell packages!
09:10:58 <CosmicRay> ah HA!
09:11:10 * CosmicRay readies dupload
09:11:11 <CosmicRay> :-)
09:11:25 <CosmicRay> hmm.
09:11:28 <CosmicRay> -rw-r--r--  1 jgoerzen jgoerzen 20M Jan 28 11:11 libmissingH.a
09:11:36 <CosmicRay> obviously I haven't assimilated enough yet.
09:11:39 <shapr> I'd expect libmissing to be a bad symlink.
09:11:42 <CosmicRay> it's only 20MB!
09:11:49 <CosmicRay> haha
09:12:05 <CosmicRay> I think I am going to have to make a MissingExts package.
09:12:13 <xerox> I suspect I understood what a monad is.
09:12:16 <CosmicRay> something that includes bindings to pcre, zlib, bz2lib, etc.
09:12:16 <Igloo> I remember going to my first class in room 404. I was most disappointed when I found it.
09:12:23 <CosmicRay> haha
09:12:46 * shapr laughs
09:12:49 <CosmicRay> could you have made it into a 403 (permission denied) by putting a sign on it? :-)
09:13:02 * shapr laughs more
09:13:20 <xerox> At school we have a 101 room, too!
09:14:32 -r6219(~d8903@ip68-100-140-43.dc.dc.cox.net)- flood .. flood .. flood .. BY FLORI
09:14:33 -u1775(~z4244@c-24-20-191-211.client.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:33 -t3478(~l7519@24.177.27.224)- flood .. flood .. flood .. BY FLORI
09:14:33 -a1401(~j939@170.94.166.173)- flood .. flood .. flood .. BY FLORI
09:14:33 -u4268(~l8845@ip68-98-139-51.dc.dc.cox.net)- flood .. flood .. flood .. BY FLORI
09:14:33 -n8671(~m3479@c68.185.189.17.mad.wi.charter.com)- flood .. flood .. flood .. BY FLORI
09:14:33 -k5436(~t7507@commons10k2.mo24.107.96.222.charter-stl.com)- flood .. flood .. flood .. BY FLORI
09:14:33 -n7156(~q2756@200.35.96.240)- flood .. flood .. flood .. BY FLORI
09:14:33 -j7066(~g8997@68-184-159-23.cpe.ga.charter.com)- flood .. flood .. flood .. BY FLORI
09:14:33 -m3015(~i3082@c-24-3-199-103.client.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:33 -c4240(~r4210@c68.114.241.127.fdl.wi.charter.com)- flood .. flood .. flood .. BY FLORI
09:14:33 -o5824(~h5575@c-24-3-46-214.client.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:33 -x4678(~i4781@c-24-16-52-137.client.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:33 -p5639(~l250@c-24-4-21-69.client.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:33 -m727(~n3235@wbar10.lax1-4.15.14.171.lax1.dsl-verizon.net)- flood .. flood .. flood .. BY FLORI
09:14:33 -v4487(~y221@pcp02525102pcs.nromeo01.mi.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:33 -h4130(~u5760@c-24-17-244-102.client.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:33 -t544(~g7972@user-0ccehv9.cable.mindspring.com)- flood .. flood .. flood .. BY FLORI
09:14:33 -m6788(~k9975@ip68-11-27-205.no.no.cox.net)- flood .. flood .. flood .. BY FLORI
09:14:33 -k3394(~i3987@c66.190.110.2.ts46v-01.rckprt.tx.charter.com)- flood .. flood .. flood .. BY FLORI
09:14:33 -b5797(~o2116@h000874c03701.ne.client2.attbi.com)- flood .. flood .. flood .. BY FLORI
09:14:33 -q5429(~w1754@68.184.193.109.charter-stl.com)- flood .. flood .. flood .. BY FLORI
09:14:33 -v8894(~t2783@c-66-177-88-12.se.client2.attbi.com)- flood .. flood .. flood .. BY FLORI
09:14:33 -r4540(~r5050@evrtwa1-ar16-4-40-000-217.evrtwa1.dsl-verizon.net)- flood .. flood .. flood .. BY FLORI
09:14:35 -t3478(~l7519@24.177.27.224)- flood .. flood .. flood .. BY FLORI
09:14:35 -u4268(~l8845@ip68-98-139-51.dc.dc.cox.net)- flood .. flood .. flood .. BY FLORI
09:14:35 -k5436(~t7507@commons10k2.mo24.107.96.222.charter-stl.com)- flood .. flood .. flood .. BY FLORI
09:14:35 -n7156(~q2756@200.35.96.240)- flood .. flood .. flood .. BY FLORI
09:14:35 -j7066(~g8997@68-184-159-23.cpe.ga.charter.com)- flood .. flood .. flood .. BY FLORI
09:14:35 -m3015(~i3082@c-24-3-199-103.client.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:35 -o5824(~h5575@c-24-3-46-214.client.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:35 -x4678(~i4781@c-24-16-52-137.client.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:35 -p5639(~l250@c-24-4-21-69.client.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:35 -m727(~n3235@wbar10.lax1-4.15.14.171.lax1.dsl-verizon.net)- flood .. flood .. flood .. BY FLORI
09:14:35 -v4487(~y221@pcp02525102pcs.nromeo01.mi.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:35 -n8671(~m3479@c68.185.189.17.mad.wi.charter.com)- flood .. flood .. flood .. BY FLORI
09:14:35 -q5429(~w1754@68.184.193.109.charter-stl.com)- flood .. flood .. flood .. BY FLORI
09:14:35 -c4240(~r4210@c68.114.241.127.fdl.wi.charter.com)- flood .. flood .. flood .. BY FLORI
09:14:35 -h4130(~u5760@c-24-17-244-102.client.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:35 -u1775(~z4244@c-24-20-191-211.client.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:35 -t544(~g7972@user-0ccehv9.cable.mindspring.com)- flood .. flood .. flood .. BY FLORI
09:14:35 -k3394(~i3987@c66.190.110.2.ts46v-01.rckprt.tx.charter.com)- flood .. flood .. flood .. BY FLORI
09:14:36 -v8894(~t2783@c-66-177-88-12.se.client2.attbi.com)- flood .. flood .. flood .. BY FLORI
09:14:36 -r4540(~r5050@evrtwa1-ar16-4-40-000-217.evrtwa1.dsl-verizon.net)- flood .. flood .. flood .. BY FLORI
09:14:37 -u1775(~z4244@c-24-20-191-211.client.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:37 -o9151(~w9048@65.121.91.211)- flood .. flood .. flood .. BY FLORI
09:14:37 -o9151(~w9048@65.121.91.211)- flood .. flood .. flood .. BY FLORI
09:14:37 -t3478(~l7519@24.177.27.224)- flood .. flood .. flood .. BY FLORI
09:14:37 -k5436(~t7507@commons10k2.mo24.107.96.222.charter-stl.com)- flood .. flood .. flood .. BY FLORI
09:14:37 -j7066(~g8997@68-184-159-23.cpe.ga.charter.com)- flood .. flood .. flood .. BY FLORI
09:14:37 -m3015(~i3082@c-24-3-199-103.client.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:37 -c4240(~r4210@c68.114.241.127.fdl.wi.charter.com)- flood .. flood .. flood .. BY FLORI
09:14:37 -o5824(~h5575@c-24-3-46-214.client.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:37 -x4678(~i4781@c-24-16-52-137.client.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:37 -p5639(~l250@c-24-4-21-69.client.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:37 -v4487(~y221@pcp02525102pcs.nromeo01.mi.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:37 -n8671(~m3479@c68.185.189.17.mad.wi.charter.com)- flood .. flood .. flood .. BY FLORI
09:14:37 -k3394(~i3987@c66.190.110.2.ts46v-01.rckprt.tx.charter.com)- flood .. flood .. flood .. BY FLORI
09:14:37 -h4130(~u5760@c-24-17-244-102.client.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:37 -t544(~g7972@user-0ccehv9.cable.mindspring.com)- flood .. flood .. flood .. BY FLORI
09:14:38 -v8894(~t2783@c-66-177-88-12.se.client2.attbi.com)- flood .. flood .. flood .. BY FLORI
09:14:38 -m727(~n3235@wbar10.lax1-4.15.14.171.lax1.dsl-verizon.net)- flood .. flood .. flood .. BY FLORI
09:14:38 -r4540(~r5050@evrtwa1-ar16-4-40-000-217.evrtwa1.dsl-verizon.net)- flood .. flood .. flood .. BY FLORI
09:14:38 -k5436(~t7507@commons10k2.mo24.107.96.222.charter-stl.com)- flood .. flood .. flood .. BY FLORI
09:14:38 -u1775(~z4244@c-24-20-191-211.client.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:38 -p5639(~l250@c-24-4-21-69.client.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:38 -h4130(~u5760@c-24-17-244-102.client.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:38 -j7066(~g8997@68-184-159-23.cpe.ga.charter.com)- flood .. flood .. flood .. BY FLORI
09:14:38 -m3015(~i3082@c-24-3-199-103.client.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:38 -v4487(~y221@pcp02525102pcs.nromeo01.mi.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:38 -t3478(~l7519@24.177.27.224)- flood .. flood .. flood .. BY FLORI
09:14:39 -k3394(~i3987@c66.190.110.2.ts46v-01.rckprt.tx.charter.com)- flood .. flood .. flood .. BY FLORI
09:14:39 -c4240(~r4210@c68.114.241.127.fdl.wi.charter.com)- flood .. flood .. flood .. BY FLORI
09:14:39 -v8894(~t2783@c-66-177-88-12.se.client2.attbi.com)- flood .. flood .. flood .. BY FLORI
09:14:39 -x4678(~i4781@c-24-16-52-137.client.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:39 -t544(~g7972@user-0ccehv9.cable.mindspring.com)- flood .. flood .. flood .. BY FLORI
09:14:39 -o5824(~h5575@c-24-3-46-214.client.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:39 -m727(~n3235@wbar10.lax1-4.15.14.171.lax1.dsl-verizon.net)- flood .. flood .. flood .. BY FLORI
09:14:39 -r4540(~r5050@evrtwa1-ar16-4-40-000-217.evrtwa1.dsl-verizon.net)- flood .. flood .. flood .. BY FLORI
09:14:40 -p5639(~l250@c-24-4-21-69.client.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:40 -h4130(~u5760@c-24-17-244-102.client.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:40 -o5824(~h5575@c-24-3-46-214.client.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:40 -v4487(~y221@pcp02525102pcs.nromeo01.mi.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:40 -t3478(~l7519@24.177.27.224)- flood .. flood .. flood .. BY FLORI
09:14:40 -k5436(~t7507@commons10k2.mo24.107.96.222.charter-stl.com)- flood .. flood .. flood .. BY FLORI
09:14:40 -k3394(~i3987@c66.190.110.2.ts46v-01.rckprt.tx.charter.com)- flood .. flood .. flood .. BY FLORI
09:14:40 -c4240(~r4210@c68.114.241.127.fdl.wi.charter.com)- flood .. flood .. flood .. BY FLORI
09:14:40 -x4678(~i4781@c-24-16-52-137.client.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:40 -m727(~n3235@wbar10.lax1-4.15.14.171.lax1.dsl-verizon.net)- flood .. flood .. flood .. BY FLORI
09:14:40 -v8894(~t2783@c-66-177-88-12.se.client2.attbi.com)- flood .. flood .. flood .. BY FLORI
09:14:40 -u1775(~z4244@c-24-20-191-211.client.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:40 -r4540(~r5050@evrtwa1-ar16-4-40-000-217.evrtwa1.dsl-verizon.net)- flood .. flood .. flood .. BY FLORI
09:14:41 -b5797(~o2116@h000874c03701.ne.client2.attbi.com)- flood .. flood .. flood .. BY FLORI
09:14:41 -b5797(~o2116@h000874c03701.ne.client2.attbi.com)- flood .. flood .. flood .. BY FLORI
09:14:41 -b5797(~o2116@h000874c03701.ne.client2.attbi.com)- flood .. flood .. flood .. BY FLORI
09:14:41 -b5797(~o2116@h000874c03701.ne.client2.attbi.com)- flood .. flood .. flood .. BY FLORI
09:14:41 -x4678(~i4781@c-24-16-52-137.client.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:41 -h4130(~u5760@c-24-17-244-102.client.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:41 -t3478(~l7519@24.177.27.224)- flood .. flood .. flood .. BY FLORI
09:14:41 -k5436(~t7507@commons10k2.mo24.107.96.222.charter-stl.com)- flood .. flood .. flood .. BY FLORI
09:14:41 -p5639(~l250@c-24-4-21-69.client.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:41 -o9151(~w9048@65.121.91.211)- flood .. flood .. flood .. BY FLORI
09:14:41 -o9151(~w9048@65.121.91.211)- flood .. flood .. flood .. BY FLORI
09:14:41 -o9151(~w9048@65.121.91.211)- flood .. flood .. flood .. BY FLORI
09:14:41 -o9151(~w9048@65.121.91.211)- flood .. flood .. flood .. BY FLORI
09:14:41 -v4487(~y221@pcp02525102pcs.nromeo01.mi.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:42 -b5797(~o2116@h000874c03701.ne.client2.attbi.com)- flood .. flood .. flood .. BY FLORI
09:14:42 -u1775(~z4244@c-24-20-191-211.client.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:42 -v8894(~t2783@c-66-177-88-12.se.client2.attbi.com)- flood .. flood .. flood .. BY FLORI
09:14:42 -r4540(~r5050@evrtwa1-ar16-4-40-000-217.evrtwa1.dsl-verizon.net)- flood .. flood .. flood .. BY FLORI
09:14:42 -m727(~n3235@wbar10.lax1-4.15.14.171.lax1.dsl-verizon.net)- flood .. flood .. flood .. BY FLORI
09:14:42 -k5436(~t7507@commons10k2.mo24.107.96.222.charter-stl.com)- flood .. flood .. flood .. BY FLORI
09:14:42 -t3478(~l7519@24.177.27.224)- flood .. flood .. flood .. BY FLORI
09:14:42 -x4678(~i4781@c-24-16-52-137.client.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:42 -p5639(~l250@c-24-4-21-69.client.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:42 -v4487(~y221@pcp02525102pcs.nromeo01.mi.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:42 -h4130(~u5760@c-24-17-244-102.client.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:42 -u1775(~z4244@c-24-20-191-211.client.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:42 -v8894(~t2783@c-66-177-88-12.se.client2.attbi.com)- flood .. flood .. flood .. BY FLORI
09:14:42 -r4540(~r5050@evrtwa1-ar16-4-40-000-217.evrtwa1.dsl-verizon.net)- flood .. flood .. flood .. BY FLORI
09:14:43 -c4240(~r4210@c68.114.241.127.fdl.wi.charter.com)- flood .. flood .. flood .. BY FLORI
09:14:43 -k5436(~t7507@commons10k2.mo24.107.96.222.charter-stl.com)- flood .. flood .. flood .. BY FLORI
09:14:43 -m727(~n3235@wbar10.lax1-4.15.14.171.lax1.dsl-verizon.net)- flood .. flood .. flood .. BY FLORI
09:14:43 -v4487(~y221@pcp02525102pcs.nromeo01.mi.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:43 -t3478(~l7519@24.177.27.224)- flood .. flood .. flood .. BY FLORI
09:14:43 -x4678(~i4781@c-24-16-52-137.client.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:43 -h4130(~u5760@c-24-17-244-102.client.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:43 -u1775(~z4244@c-24-20-191-211.client.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:43 -c4240(~r4210@c68.114.241.127.fdl.wi.charter.com)- flood .. flood .. flood .. BY FLORI
09:14:43 -r4540(~r5050@evrtwa1-ar16-4-40-000-217.evrtwa1.dsl-verizon.net)- flood .. flood .. flood .. BY FLORI
09:14:43 -m727(~n3235@wbar10.lax1-4.15.14.171.lax1.dsl-verizon.net)- flood .. flood .. flood .. BY FLORI
09:14:44 -t3478(~l7519@24.177.27.224)- flood .. flood .. flood .. BY FLORI
09:14:44 -k5436(~t7507@commons10k2.mo24.107.96.222.charter-stl.com)- flood .. flood .. flood .. BY FLORI
09:14:44 -x4678(~i4781@c-24-16-52-137.client.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:44 -v8894(~t2783@c-66-177-88-12.se.client2.attbi.com)- flood .. flood .. flood .. BY FLORI
09:14:44 -u1775(~z4244@c-24-20-191-211.client.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:44 -m727(~n3235@wbar10.lax1-4.15.14.171.lax1.dsl-verizon.net)- flood .. flood .. flood .. BY FLORI
09:14:45 -r4540(~r5050@evrtwa1-ar16-4-40-000-217.evrtwa1.dsl-verizon.net)- flood .. flood .. flood .. BY FLORI
09:14:45 -k5436(~t7507@commons10k2.mo24.107.96.222.charter-stl.com)- flood .. flood .. flood .. BY FLORI
09:14:45 -t3478(~l7519@24.177.27.224)- flood .. flood .. flood .. BY FLORI
09:14:45 -x4678(~i4781@c-24-16-52-137.client.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:45 -v8894(~t2783@c-66-177-88-12.se.client2.attbi.com)- flood .. flood .. flood .. BY FLORI
09:14:45 -b5797(~o2116@h000874c03701.ne.client2.attbi.com)- flood .. flood .. flood .. BY FLORI
09:14:45 -b5797(~o2116@h000874c03701.ne.client2.attbi.com)- flood .. flood .. flood .. BY FLORI
09:14:45 -v8894(~t2783@c-66-177-88-12.se.client2.attbi.com)- flood .. flood .. flood .. BY FLORI
09:14:45 -m727(~n3235@wbar10.lax1-4.15.14.171.lax1.dsl-verizon.net)- flood .. flood .. flood .. BY FLORI
09:14:45 -c4240(~r4210@c68.114.241.127.fdl.wi.charter.com)- flood .. flood .. flood .. BY FLORI
09:14:45 -c4240(~r4210@c68.114.241.127.fdl.wi.charter.com)- flood .. flood .. flood .. BY FLORI
09:14:45 -c4240(~r4210@c68.114.241.127.fdl.wi.charter.com)- flood .. flood .. flood .. BY FLORI
09:14:45 -b5797(~o2116@h000874c03701.ne.client2.attbi.com)- flood .. flood .. flood .. BY FLORI
09:14:46 -u1775(~z4244@c-24-20-191-211.client.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:46 -t3478(~l7519@24.177.27.224)- flood .. flood .. flood .. BY FLORI
09:14:46 -k5436(~t7507@commons10k2.mo24.107.96.222.charter-stl.com)- flood .. flood .. flood .. BY FLORI
09:14:46 -m727(~n3235@wbar10.lax1-4.15.14.171.lax1.dsl-verizon.net)- flood .. flood .. flood .. BY FLORI
09:14:46 -x4678(~i4781@c-24-16-52-137.client.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:46 -u1775(~z4244@c-24-20-191-211.client.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:46 -x4678(~i4781@c-24-16-52-137.client.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:46 -t3478(~l7519@24.177.27.224)- flood .. flood .. flood .. BY FLORI
09:14:46 -k5436(~t7507@commons10k2.mo24.107.96.222.charter-stl.com)- flood .. flood .. flood .. BY FLORI
09:14:47 -m727(~n3235@wbar10.lax1-4.15.14.171.lax1.dsl-verizon.net)- flood .. flood .. flood .. BY FLORI
09:14:47 -c4240(~r4210@c68.114.241.127.fdl.wi.charter.com)- flood .. flood .. flood .. BY FLORI
09:14:47 -o9151(~w9048@65.121.91.211)- flood .. flood .. flood .. BY FLORI
09:14:47 -o9151(~w9048@65.121.91.211)- flood .. flood .. flood .. BY FLORI
09:14:47 -o9151(~w9048@65.121.91.211)- flood .. flood .. flood .. BY FLORI
09:14:47 -o9151(~w9048@65.121.91.211)- flood .. flood .. flood .. BY FLORI
09:14:47 -c4240(~r4210@c68.114.241.127.fdl.wi.charter.com)- flood .. flood .. flood .. BY FLORI
09:14:47 -t3478(~l7519@24.177.27.224)- flood .. flood .. flood .. BY FLORI
09:14:47 -k5436(~t7507@commons10k2.mo24.107.96.222.charter-stl.com)- flood .. flood .. flood .. BY FLORI
09:14:47 -x4678(~i4781@c-24-16-52-137.client.comcast.net)- flood .. flood .. flood .. BY FLORI
09:14:47 -b5797(~o2116@h000874c03701.ne.client2.attbi.com)- flood .. flood .. flood .. BY FLORI
09:14:47 -c4240(~r4210@c68.114.241.127.fdl.wi.charter.com)- flood .. flood .. flood .. BY FLORI
09:14:48 -o9151(~w9048@65.121.91.211)- flood .. flood .. flood .. BY FLORI
09:14:49 -t3478(~l7519@24.177.27.224)- flood .. flood .. flood .. BY FLORI
09:14:49 -k5436(~t7507@commons10k2.mo24.107.96.222.charter-stl.com)- flood .. flood .. flood .. BY FLORI
09:14:49 -b5797(~o2116@h000874c03701.ne.client2.attbi.com)- flood .. flood .. flood .. BY FLORI
09:14:50 -o9151(~w9048@65.121.91.211)- flood .. flood .. flood .. BY FLORI
09:14:51 -k5436(~t7507@commons10k2.mo24.107.96.222.charter-stl.com)- flood .. flood .. flood .. BY FLORI
09:15:08 <CosmicRay> that *sucked*
09:15:19 <xerox> :(
09:15:28 <shapr> hmm
09:15:33 <CosmicRay> that looked like a ddos
09:15:37 <xerox> Thanks FLORI
09:16:01 <shapr> I doubt it was really flori
09:16:07 <xerox> Yep :P
09:16:12 <CosmicRay> damn you cpps, I have to say #examples# for haddock
09:16:16 <CosmicRay> err cpphs
09:16:30 <shapr> right, time to turn on the max number of joins per second feature.
09:16:38 <CosmicRay> heh
09:16:51 <SyntaxNinja> hmm
09:16:52 <Oejet> Hey, I also have a flood script.  U w4nna try 1t?
09:16:57 * shapr snickers
09:17:11 <shapr> I must admit, flooding #haskell is great way to prove intellectual capacity.
09:17:18 <xerox> Nobody cared about the 101 room, damn flooders, they'll get there.
09:17:31 <shapr> When you can't think your way out of the box, pee on the floor of the box.
09:17:38 * SyntaxNinja has a lot of tabs to close
09:17:58 <desrt> hah.  that was fun
09:21:21 <shapr> Well, we've hit the big time now. Our first ddos.
09:21:38 <stepcut> against haskell.org ?
09:21:45 <shapr> nah, just now on the channel.
09:21:52 <stepcut> oh
09:22:13 <shapr> you just missed it!
09:22:17 <stepcut> suck!
09:22:26 <CosmicRay> MegaMonad: flori?
09:22:27 <MegaMonad> CosmicRay: Dear god, that was really flori.
09:22:31 * shapr laughs
09:22:31 <CosmicRay> hahaha
09:22:38 <xerox> ahahah.
09:22:43 <shapr> ?
09:23:03 <xerox> boing boing boing
09:23:06 <stepcut> Well, in the good news, I think I might be able to do a bit of dev work on the haskelldb and wash libraries on company time around april :)
09:23:11 <shapr> yay!
09:23:36 <stepcut> how are cabal and yi doing these days ?
09:24:24 <shapr> cabal is doing great, nothing much happening on Yi while dons is on a south pacific island.
09:25:16 <musasabi> shapr: have you used cabal hooks - or know someone using them?
09:25:53 <samc> which south pacific island?
09:25:59 <shapr> Um, I forget.
09:25:59 <SyntaxNinja> oh my , MegaMonad looks insane
09:26:17 <SyntaxNinja> musasabi: the hooks!
09:26:24 <shapr> musasabi: I haven't used cabal hooks, but SyntaxNinja may know something about it.
09:26:31 <SyntaxNinja> the hooks are still going to change, so don't use 'em except for fun
09:26:36 <shapr> y0 autrijus 
09:26:41 <paolino> hello,I was reading some docs from mit on 'mozart' language.Really impressed.Can anyone comment on that language vs haskell ?
09:26:41 <SyntaxNinja> except you can use the defaultHooks interface that I left into the 0.4 release
09:26:59 <shapr> paolino: mozart is a cool language. Haskell is a cool language.
09:27:14 <shapr> paolino: they're both worth learning!
09:28:02 <paolino> haskell looks cryptic to me,you think I should start mozart before?
09:28:04 <shapr> Mozart is more about logic/constraint, where Haskell is focussed on functional behaviour.
09:28:33 <shapr> I think mozart looks more cryptic to me. I would suggest you spend an equal amount of time  with both of them and see which one you want to learn.
09:28:48 <shapr> For example, spend an hour with each and see how it goes.
09:29:01 <shapr> You can increase your timescale until you're sure which one you want to start with.
09:29:19 <CosmicRay> another factor could be breadth of packages available
09:29:31 <SyntaxNinja> musasabi: got any specific questions?
09:29:45 <shapr> It also depends on your goal. Do you want industrial quality apps? Learn about logic languages? Find cool mental toys?
09:30:29 <paolino> can haskell do concurrency,without losing readability?
09:30:35 <shapr> Yes
09:34:56 <SyntaxNinja> man. musasabi teases me by mentioning cabal, and the hooks i've been obsessing over, and then hides away
09:35:01 * shapr grins
09:39:40 <paolino> can you point me to some cuncurrent code, (an easy example) ?
09:39:41 <stepcut> shapr: is there a repository of cabal packages somewhere ?
09:39:52 <paolino> mostly I want to develope rdf (semantic)  distributed computation
09:40:02 <shapr> SyntaxNinja is the boss of Cabal, he probably knows!
09:40:12 <shapr> oh wait, I wasn't suppossed to expose the shadow master!
09:41:34 <stepcut> if I am logging in via a display manager (such as xdm), it is the display managers job to set SHELL ??
09:43:48 <paolino> sorry I have a crap GPRS link
09:43:49 <paolino> (18:27:37) paolino: can you point me to some cuncurrent code, (an easy example) ?
09:43:49 <paolino> (18:29:47) paolino: mostly I want to develope rdf (semantic)  distributed computation
09:43:49 <paolino> (18:30:39) paolino: with python I can't read the logic of my own code,it's full of callLater calls
09:44:33 <CosmicRay> paolino: you might want to post on the haskell-cafe mailing list
09:44:38 <CosmicRay> you'llp robably get a better response there
09:44:43 <CosmicRay> see www.haskell.org for details
09:44:47 <CosmicRay> and with that, I'm off to lunch.
09:45:11 <shapr> paolino: there's concurrent examples on the wiki, and if you like semantic web, see graham klyne's ninebynine website.
09:48:21 <shapr> paolino: want more details?
09:48:52 <SyntaxNinja> stepcut: fptools is a repository of cabal packages, and there are a few in Debian
09:48:56 <SyntaxNinja> hackage will be eventually
09:51:16 <shapr> yay hackage!
09:53:05 <paolino> shapr I am astonished.Mozart doesn't compile on freebsd mmhh,now I have same problem with ghc,I'm getting reaalyy nervous
09:53:24 <shapr> GHC does compile on BSD.
09:53:37 <paolino> ghc-6.2.1 is marked as broken: Does not compile on FreeBSD >= 5.x.
09:54:25 * paolino paolino is crying
09:54:48 <shapr> http://www.haskell.org/ghc/download_ghc_621.html#freebsd
09:55:20 <paolino> I remember I had used ghc 2 years ago....
10:03:02 <paolino> shapr that's false :-(/%&/$§)(%
10:03:29 <shapr> Last I heard GHC works fine as long as you have freebsd4 emulation installed.
10:03:55 <shapr> But I don't use BSD, so I could be wrong.
10:04:20 <shapr> dons does use BSD, I think he's the primary GHC on BSD person. But he's on a south pacific island this week.
10:04:51 <paolino> which is better :-)
10:06:05 <shapr> I use Debian, so I just apt-get ghc6
10:06:22 <shapr> and I use the cvs version of GHC for some cool experiments.
10:06:36 <SyntaxNinja> :)
10:07:57 <shapr> bwaha - http://www.plasticbag.org/archives/2005/01/the_ipod_shuffle_and_some_entertaining_cultural_differences.shtml
10:08:48 <shapr> Do Not Eat Haskell Shuffle!
10:12:46 <shapr> paolino: still there?
10:13:40 <SyntaxNinja> haha
10:16:08 <xerox> shapr, under the form of paolin1, maybe :-)
10:18:46 <shapr> Excedrin: How's your bro, Acetaminophin?
10:19:29 <thebug> MegaMonad: Did you remember to file your TPS reports?
10:19:30 <MegaMonad> thebug: I like the whole file to do what you think: http://www.haskell.org/reports for hc&ar?
10:19:43 <shapr> MegaMonad: who is wli?
10:19:45 <MegaMonad> shapr: Wli is the class being declared, even in the rhs of the = ?
10:20:04 <shapr> MegaMonad: who is xbill?
10:20:05 <MegaMonad> shapr: At least for someone who is xbill?
10:20:50 <shapr> MegaMonad: who is dennisb?
10:20:51 <MegaMonad> shapr: Yeah, dennisb has talked about that.
10:20:59 <shapr> MegaMonad: who is Chilli?
10:21:00 <MegaMonad> shapr: As chilli said, "dont worry, your brain has been done before.
10:21:10 * shapr snickers
10:21:13 <shapr> This is fun :-)
10:21:30 <shapr> Right, I should get back to work.
10:30:50 <shapr> basti_: heyy, can you collect your csound + haskore stuff together into some sort of document to send to Henning Thielemann?
10:31:17 <basti_> uhm yes.
10:31:27 <shapr> Since he's currently extending Haskore, he can probably build in whatever support we'd need to get infinite songs played by csound
10:31:33 <basti_> oh yes.
10:31:35 <shapr> that would be awesome!
10:31:36 <basti_> -nod-
10:31:44 <basti_> he should take it as a proof of concept
10:31:52 <basti_> i'll annotate the script quickly
10:31:57 * shapr bounces excitedly
10:32:09 <shapr> guten abend cptchaos 
10:33:05 <stepcut> hoo-ray! the display manager now sets $SHELL -- life is good :)
10:37:30 <xerox> Is there any "later-tell" feature embedded in some {lambda,*}bot ?
10:41:21 <shapr> xerox: there is not, but there has been requests for such
10:41:32 <shapr> But I don't know an easy way to do it.
10:41:48 <thebug> do you mean a functionality like memoserv?
10:42:10 <shapr> The only really good solution I can think of would be to embed yampa, and model later-tell as a signal function.
10:44:55 <shapr> Igloo: hey, have you tried out mpd/mpc ?
10:45:12 <shapr> stepcut: what does that mean?
10:46:04 <stepcut> shapr: my display manager did not set $SHELL, so when I ran konsole, it just used /bin/sh and did not read my .bashrc
10:46:30 * CosmicRay returns
10:46:31 <stepcut> by display manager, I mean a program like xdm, kdm, etc
10:46:42 <CosmicRay> Igloo: where's your rumored ncurses interface/
10:47:08 <CosmicRay> xerox: memoserv, perhaps
10:47:21 <CosmicRay> xerox: you want a service that sends a message to someone later?
10:47:37 <CosmicRay> xerox: if so, /msg memoserv help
10:50:51 <xerox> Oh yea, IF he indentifies when connect.
10:57:54 <CosmicRay> hm.
10:58:02 <CosmicRay> i think it says there's a message waiting regardless
10:58:04 <CosmicRay> but I don't kow
11:12:19 <basti_> shapr: email address? or should i put it online?
11:20:55 <shapr> I think he's henning at thielemann dot de.
11:20:58 * shapr checks
11:24:05 <shapr> SyntaxNinja: oh hey! I had a neat (strange) cabal + darcs idea
11:24:29 <basti_> shapr: so is he? and does he speak german?
11:24:32 <basti_> =)
11:24:35 <shapr> yes, he does.
11:24:50 <CosmicRay> basti_: .de usually does indicate that :-)
11:25:01 <basti_> henning even more.
11:25:02 <basti_> =)
11:25:12 <shapr> actually, I think he's lemming at henning-thielemann punkt de
11:25:12 <basti_> is that thielmann or thielemann?
11:25:20 <shapr> hold on, lemme make sure I got it right.
11:25:23 <basti_> ok
11:25:25 <CosmicRay> shapr: hehe
11:25:26 <shapr> My .de spelling is crap.
11:26:01 <SyntaxNinja> shapr: do tell
11:26:43 <shapr> SyntaxNinja: it's kinda twisted... in essence, mix darcs and bittorrent. Make every darcs server able to upload patches to any requester.
11:27:43 <shapr> I have an even stranger idea that uses te same setup for distributed patch commutation, but that is almost too weird to think about.
11:28:19 <shapr> y0 Mistah Huntah
11:29:12 <shapr> wazzup?
11:32:38 <shapr> CosmicRay: got a moment?
11:32:41 <CosmicRay> yes
11:32:57 <shapr> is there an ipv6 way for user applications to listen for local link broadcast msgs?
11:33:24 <shapr> I was thinking about totally distributed darcs or apt repos. You'd just ask the local network for a repo, and grab bits from anyone who answered.
11:33:30 <CosmicRay> hmm.  I'm sure yes, but I don't know right off hand....
11:33:32 <basti_> o0
11:33:37 <shapr> Basically the gnutella 'ask for nearby chunks of this file'
11:33:38 <CosmicRay> I suppose it would be the same as with ipv4
11:33:49 <CosmicRay> where you bind to a udp port and sit there waiting
11:33:53 <shapr> right
11:34:31 <shapr> I'm trying to take advantage of the 'network effect' more than anyone does right now.
11:34:54 <shapr> something like userland ARP for arbitrary protocols.
11:35:05 <CosmicRay> ah, that exists already...
11:35:11 <CosmicRay> actually several implementations do
11:35:20 <CosmicRay> there is the standardized version of Apple's rendezvous
11:35:24 <shapr> aha
11:35:31 <CosmicRay> and there is the Service Location Protocol
11:35:39 <CosmicRay> (I think that's what SLP means)
11:35:44 <shapr> I've been thinking of doing this for a p2p DNS system, p2p darcs, p2p cabal, etc
11:35:59 <shapr> and for Fermat's Last Margin, of course.
11:36:02 <basti_> p2p p2p?
11:36:03 <CosmicRay> most of these though are designed for working on the local lan
11:36:14 <shapr> I was hoping for something that scales up further.
11:36:22 <CosmicRay> once you branch out to the internet, you have a whole different problem
11:36:30 <CosmicRay> you can't just broadcast your existance to the world :-)
11:36:32 <shapr> why so?
11:36:42 <basti_> why you can?
11:36:42 <shapr> but you can respond to anyone who asks?
11:36:45 <basti_> send to 0.0.0.0!
11:36:51 <basti_> that should broadcast everywhere.
11:36:52 <basti_> =)
11:36:57 <CosmicRay> shapr: broadcast is a feature of ethernet; they aren't routable
11:36:59 <CosmicRay> sure
11:37:04 <CosmicRay> how do they find out where to ask?
11:37:10 <shapr> That's what I want to know.
11:37:12 <CosmicRay> what if there are 5000 people to ask?
11:37:27 <CosmicRay> you may also be interested in the design of freenet and tor
11:37:39 <shapr> yeah, I installed tor recently, and I've been playing with it.
11:37:46 <shapr> That's awesome stuff.
11:37:51 <CosmicRay> freenet in particular is basically a global secure storage
11:37:58 <shapr> it's also *very* slow.
11:38:01 <CosmicRay> it's basically tor++ or tor-- depending on your perspective.
11:38:06 <CosmicRay> right, that could be the -- part
11:38:30 <CosmicRay> however, both projects have solved the "finding others" problem, though in different ways
11:38:39 <shapr> I was wondering if there's already a way to scale up requests for peers.
11:38:48 <CosmicRay> not afaik.
11:39:03 <CosmicRay> you'd need some sort of first-step authority in any case
11:39:07 <shapr> I'd like something like, ask link local, ask class C, iterate through asking chunks of class B
11:39:12 <CosmicRay> freenet ships with a list of default servers, as does tor
11:39:23 <CosmicRay> shapr: that would be considered extremely unfriendly
11:39:40 <shapr> Maybe not...
11:39:42 <CosmicRay> and it looks very much like a virus to isps
11:39:58 <shapr> I was thinking about stealing a multicast address for that sort of application.
11:40:08 <CosmicRay> ah.
11:40:16 <CosmicRay> I know almost zero about multicast stuff.
11:40:28 <CosmicRay> I just know it's there and works mysteriously :-)
11:40:44 <shapr> one-to-many is easy, many-to-many may not be workable at all.
11:41:02 <shapr> But I think I'm asking for many-to-many with this sort of idea.
11:42:05 <CosmicRay> right, I believe that multicasting is essentially one to many
11:42:10 <CosmicRay> you would have to have a central server
11:42:25 <CosmicRay> you could simulate many-to-many by having it relay notices of stuff being available
11:42:42 <CosmicRay> but then, you could just have it join an irc channel :-)
11:43:23 <shapr> :-/
11:44:02 <CosmicRay> or, heh, usenet newsgroup.
11:44:30 <CosmicRay> perhaps you could use steganography to insert notices in spams, and thus join the background noise :-)
11:47:43 <shapr> I wonder if I can fake it anyway.
11:47:55 <CosmicRay> heh
11:48:14 <CosmicRay> you know, this could also be useful for, say, debian mirrors
11:48:16 <shapr> hm, I bet I can... 
11:48:18 <shapr> Yeah, I know.
11:48:35 <CosmicRay> but once you are talking of a central server, it starts to sound very much like a bt tracker
11:48:43 <shapr> Any debian box would be able to get a deb from anyone else on the nearby network
11:48:50 <shapr> I don't want a cental server.
11:49:05 <CosmicRay> I'm not sure you can escape it if you move out to the global internet
11:49:17 <CosmicRay> in fact, I don't think you can
11:50:03 <shapr> I think I can.
11:50:12 <CosmicRay> what are you thinking of?
11:50:30 <shapr> A multicast smurf
11:50:59 <CosmicRay> well, the thing about multicasts is -- if memory serves -- that they must be subscribed to by the recipient, and this subscription is to a fixed sender ip
11:51:10 <shapr> sure
11:51:23 <CosmicRay> so you'd have to have a central server to relay those multicasts
11:51:29 <shapr> nah, the thing to do is to turn it around
11:51:41 <shapr> because what you really want, is a many to one multicast.
11:51:41 <thebug> I also thought that the routers inbetween also have to support multicast
11:51:52 <CosmicRay> thebug: I believe that is correct
11:51:52 <shapr> thebug: yes, that's a given.
11:52:03 <shapr> But it's a basic part of IPv6, so...
11:52:07 <CosmicRay> shapr: right, but you can't just say "make it so" and have it happen :-)
11:52:23 <shapr> But I think I can use the tricks that created the smurf ping kill to do it.
11:52:44 <CosmicRay> hmmm.
11:53:16 <CosmicRay> so you will be attempting to guess broadcast addresses of nearby networks and hope that the intervening routers are broken?
11:54:25 <shapr> Er, hold on.. I'm trying to untangle the threads of this intuitive leap. It could be complete fertilizer.
11:54:39 <CosmicRay> good things can grow from fertilizer :-)
11:54:43 * shapr snickers
11:54:52 <CosmicRay> it's entirely possible that I am jsut being dense again
11:55:13 <CosmicRay> I always get the feeling that I'm not all that smart when I hang around haskell folks :-)
11:55:22 <shapr> I dunno, I've never tried to turn the idea around to make a many-to-one address.
11:55:26 <shapr> Huh, I feel that way too.
11:55:43 <shapr> This channel is good for my humbleness.
11:55:56 <CosmicRay> heh, yeah mine too
11:56:09 <CosmicRay> I figure I understand about 60% of the theory that gets discussed here
11:56:11 <shapr> Dang, I think I had it for a second :-(
11:56:30 <CosmicRay> though I see the solutions to about 100% of the homework problems :-)
11:56:39 <CosmicRay> MegaMonad: do my homework.
11:56:40 <MegaMonad> CosmicRay: Heh i was talking about different things in your face on your homework.  I think i like to do this transformation internally to write your own stack as the registration and install that comes to reading small things on the ast, though i am aware of alloca.
11:57:02 <CosmicRay> MegaMonad: oh, thank goodness you're aware of alloca.
11:57:04 <MegaMonad> CosmicRay: Cosmicray: i'm need to be aware of alloca.
11:57:11 <CosmicRay> MegaMonad: why do you need to be aware of alloca?
11:57:12 <MegaMonad> CosmicRay: I imagine because i'm returning some of the need of the array i can explain me what "guilty pleasures" are?
11:57:24 <CosmicRay> MegaMonad: alloca is a "guilty pleasure"?
11:57:25 <MegaMonad> CosmicRay: Text is a guilty pleasure?
11:57:44 <CosmicRay> MegaMonad: ooo, a koan.
11:57:45 <MegaMonad> CosmicRay: I have thompson's and think the underlying theory. It seems to be if i don't want a function mapping list-of-a to get awareness of haskell koan?
11:57:58 <CosmicRay> MegaMonad: give us a haskell koan.
11:57:59 <MegaMonad> CosmicRay: Haskell is a haskell koan.
11:58:05 <shapr> haha
11:58:05 <SyntaxNinja> Oo
11:58:09 <CosmicRay> MegaMonad: damn.  you did.
11:58:11 <MegaMonad> CosmicRay: Damn i am looking for i and i.
11:58:52 <shapr> How do you send on a multicast address?
11:59:10 <CosmicRay> I don't know
11:59:20 <shapr> Do you need to setup a TCP connection? That couldn't work, could it?
11:59:24 <CosmicRay> actually I think there may be socket options
11:59:35 <CosmicRay> no, I think it has to be udp
12:00:01 <shapr> Do you associate a multicast origin address with another real IPv6 address?
12:00:07 <shapr> I think I'll have to do some reading to untangle this.
12:00:08 <CosmicRay> shapr: man 7 ip, rfc1112
12:00:34 <shapr> But I suspect the many-to-one multicast idea just might work.
12:01:03 <CosmicRay> well, for many-to-one, you don't even need multicast
12:01:11 <CosmicRay> that's a standard smtp server :-)
12:01:17 <CosmicRay> many spams, one e-mail address.
12:01:18 <CosmicRay> argh.
12:01:25 <CosmicRay> multicast spam
12:01:28 <shapr> heh
12:01:37 <CosmicRay> at least one can unsubscribe from that
12:01:40 * shapr 's brain explodes
12:01:45 <CosmicRay> heh
12:01:56 <shapr> Right, I won't get any further thinking about that idea right now.
12:02:25 <shapr> There are a bunch of standard IP addresses for stuff like 'nearest router'
12:02:35 <shapr> I'd like to be able to steal those for applications too.
12:03:18 <shapr> argh
12:03:30 <CosmicRay> hmm there is a word for those, but it's not multicast.
12:03:33 <CosmicRay> anycast maybe.
12:03:37 <shapr> ah
12:04:01 <CosmicRay> http://www.google.com/search?q=anycast+addresses&sourceid=mozilla-search&start=0&start=0&ie=utf-8&oe=utf-8&client=firefox&rls=org.mozilla:en-US:unofficial
12:05:04 <CosmicRay> http://www.ipv6style.jp/en/tech/20030228/index.shtml
12:05:17 <shapr> http://www.kuro5hin.org/story/2003/12/31/173152/86
12:05:36 <CosmicRay> sweet.
12:06:13 <shapr> hiya wolfgang!
12:06:22 <shapr> Long time no see.
12:06:25 <wtt> hi
12:06:31 <shapr> I'm Shae Erisson.
12:06:37 <wtt> I know :-)
12:06:41 <shapr> oh, ok.
12:06:58 <shapr> Have you been to #haskell before?
12:07:03 <wtt> long time ago
12:07:10 <wtt> I came here via the Wiki page now, and your nick is there :-)
12:07:15 <shapr> ah, ok then
12:07:25 <wtt> I just decided to give IRC a try again
12:07:26 <xerox> @wiki
12:07:27 <lambdabot> http://www.haskell.org/hawiki/
12:07:37 <shapr> And you already know Cale and desrt at least.
12:07:38 <xerox> Welcome wtt :-)
12:08:23 <shapr> CosmicRay: thanks, this IPv6 url is better.
12:08:50 <CosmicRay> shapr: looks like that kuro5hin article has a lot of stuff on anycast that you may find useful though, they talk about some service location protocols towards the end
12:08:52 <shapr> wtt: this channel tends to have bursts of activity and periods of silence, so it's sometimes great and sometimes boring.
12:09:25 <wtt> shapr: I'll see.
12:09:30 <CosmicRay> yes, it seems that there are eras of global boredom among haskell hackers.
12:09:52 <shapr> I like to call those times "productive"
12:09:56 <CosmicRay> haha
12:10:01 <xerox> I was saying that!
12:10:16 <CosmicRay> sometimes I'm just too darn bored or tired to code
12:10:21 <wtt> shapr: that might be an accurate assessment :-)
12:10:27 <CosmicRay> ever have those times where you're tired but too awake to sleep?
12:10:51 <shapr> When I get too bored or tired, it usually means I need to restore my balance towards more exercise, more food, more social time, or something like that.
12:10:57 <CosmicRay> if you look in the logs, you'll probably find me just takling to megamonad at 11PM sometimes :-)
12:11:15 <wtt> I've got lot's of times when I'm too tired to _go_ to sleep
12:11:22 <shapr> Yeah, that happens to me.
12:11:29 <CosmicRay> wtt: that's exactly what I mean
12:11:34 <jemfinch> shapr: ok, so arrows.  Other than "the ability to reason about similar things in similar ways," what does a programmer really gain from them?
12:11:49 <CosmicRay> wtt: my head is full of haskell stuff I'm working on.  I'm too tired to code it up.  But it would keep me awake if I try to sleep.
12:12:28 <wtt> CosmicRay: I guess we're talking about two different reasons for not going to sleep
12:12:31 <shapr> jemfinch: That ability is the good point of any abstraction in programming.
12:13:06 <shapr> The whole goal of abstraction in programming is to allow your reasoning about separate pieces of code to work the same when you put those pieces together.
12:13:33 <jemfinch> shapr: I guess what I'm asking is, "Is there a set of combinators that can apply to any instance of the Arrow typeclass, such that by making my type an arrow I automatically gain other ways to manipulate it?"
12:13:55 <CosmicRay> shapr: you should write "what the hell are arrows"
12:13:59 <shapr> Yeah, I should.
12:14:09 <shapr> Though I'm not the best person to do that.
12:14:26 <CosmicRay> shapr: I strongly suspect that you are the only person that 1) understands them well enough to document them, and 2) can document them in an accessible manner
12:14:37 <shapr> jemfinch: As compared to monads you get the wonderful ability to statically ask code about something without executing it.
12:15:04 <jemfinch> shapr: what kinds of questions would I ask?
12:15:11 <shapr> CosmicRay: maybe so. I'll put it into haskell-v8, yeah?
12:15:17 <CosmicRay> sounds good
12:15:18 <shapr> That would be great ad-copy
12:16:08 <shapr> jemfinch: like the darcs patch arrow I've been talking about... You would ask, "Do you affect the same file as this other chunk of patches?"
12:16:13 <shapr> If not, then you trivially commute.
12:16:45 <jemfinch> shapr: I'd *really* like you to write a summary, then -- because I definitely didn't get that from the papers.
12:16:48 <shapr> Right now you have to descend into the monad, you have to check everything.
12:17:03 <shapr> Did you read about the advantage of arrow-style parsers over monadic parsers?
12:17:29 <jemfinch> no, I don't think I made it that far.  I'm going to have to print the paper out, I think.
12:17:45 <shapr> Do you understand monadic parsers?
12:17:59 <jemfinch> heh...can't say I do.
12:18:10 <jemfinch> I briefly googled the other day, but didn't find anything immediately and had other things to do.
12:18:37 <Lor> Evening, folks.
12:18:41 <shapr> hei Lor 
12:19:07 <shapr> I don't know which intro to monadic parsers is best.
12:19:09 * shapr thinks
12:19:43 * aleator likes 
12:19:44 <aleator>                                            
12:19:56 <aleator> http://www.cs.nott.ac.uk/~gmh/pearl.pdf
12:20:48 <TheHunter> y0, shapr. I'm currently trying to improve the pointless rewrite engine, but this is leading nowhere.
12:21:02 <shapr> I'm impressed that such a thing ever existed in the first place.
12:21:07 <shapr> I'm still scared to see your pointless code.
12:21:31 <xerox> points-free  :P
12:21:34 <shapr> TheHunter: is the code available online?
12:21:40 <TheHunter> it's actually quite simple.
12:21:42 <shapr> xerox: I know, I'm trying to be punny :-P
12:21:46 <TheHunter> shapr, no yet.
12:22:03 <TheHunter> you think i can get that into lambdabot?
12:22:17 <shapr> sure
12:22:33 <shapr> I'm thrilled to get new code for lambdabot.
12:22:33 <TheHunter> (once it's finished doesn't leak space and the time complexity is bounded that is)
12:22:53 <liquidengineer> hello
12:22:54 <shapr> jemfinch: do you understand recursive descent parsers?
12:23:02 <jemfinch> shapr: of course!
12:23:12 <liquidengineer> I have a really simple, probably very stupid question
12:23:29 <shapr> Ok, monadic parsers are recursive descent, pretty much.
12:23:42 <liquidengineer> I'm learning haskell after years of Java, so I'm having to relearn a few reallly simple things
12:23:52 <shapr> liquidengineer: oh that happened to me too!
12:24:00 <liquidengineer> I've got a function that needs to do nothing more than return its argument unchanged
12:24:12 <liquidengineer> it's a rotate360 function for a picture represented by a list of lists
12:24:20 <liquidengineer> I just want to return its argument without doing anything to it
12:24:24 <liquidengineer> and i have no idea how to do that
12:24:26 <xerox> @info id
12:24:27 <lambdabot> -- id is a variable
12:24:27 <lambdabot> id :: forall a. a -> a
12:24:56 <liquidengineer> ?
12:25:14 <wtt> id is a standard Prelude function that does the same thing
12:25:22 <wtt> id x = x
12:25:24 <liquidengineer> ah
12:25:29 <liquidengineer> what's it mean?
12:25:31 <liquidengineer> identification?
12:25:35 <CosmicRay> identity
12:25:35 <wtt> identity function
12:25:38 <liquidengineer> ah
12:25:42 <liquidengineer> okay
12:25:50 <liquidengineer> and I'm assuming this is polymorphic, so it works on anything?
12:25:58 <CosmicRay> correct
12:25:58 <shapr> jemfinch: can you ask a recursive descent parser if the next piece of code can parse an empty string?
12:26:04 <CosmicRay> you could write it yourself:
12:26:06 <CosmicRay> id x = x
12:26:19 <CosmicRay> or id = \x -> x
12:26:21 <liquidengineer> well, I've already got this:
12:26:25 <liquidengineer> >rotate360 :: Picture -> Picture
12:26:36 <CosmicRay> so rotate360 = id
12:26:41 <CosmicRay> or rotate360 x = x
12:26:54 <liquidengineer> oh
12:26:55 <liquidengineer> ...yeah
12:27:07 * liquidengineer puts this on his growing list of Functional Programming Duh moments
12:27:59 <liquidengineer> I miss python...
12:28:00 <CosmicRay> heh
12:28:14 <CosmicRay> liquidengineer: there are a lot of people that have switched from python to haskell
12:28:22 <CosmicRay> I describe haskell as the language python should want to be :-)
12:28:23 * shapr raises his hand
12:28:44 <CosmicRay> liquidengineer: haskell has beauty.
12:28:50 <jemfinch> CosmicRay: psh
12:28:57 <liquidengineer> I didn't say it wasn't pretty
12:29:06 <CosmicRay> I know, but python is pretty, and haskell is too
12:29:12 <CosmicRay> liquidengineer: http://www.python.org/moin/PythonVsHaskell
12:29:18 <liquidengineer> it's just such a paradigm shift from Java
12:29:27 <CosmicRay> indeed
12:29:29 <shapr> jemfinch: if you reach a point in a recursive descent parser where several options are possible, you have to hang onto your input until all of the options have failed, or until one has succeeded.
12:29:31 <liquidengineer> ......I wish I hand't said that
12:29:43 <jemfinch> shapr: yup.
12:30:00 <jemfinch> CosmicRay: I would probably like Haskell more if it its syntax didn't (a) suck and (b) vary so much between programmers.
12:30:04 <shapr> jemfinch: in many cases the solution is already obvious, but you can't take the shortcut.
12:30:12 <CosmicRay> jemfinch: I quite like Haskell's syntax.
12:30:15 <shapr> I prefer Haskell syntax over Python syntax.
12:30:19 <jemfinch> blech.
12:30:21 * jemfinch doesn't.
12:30:24 <CosmicRay> jemfinch: have you tried ocaml? :-)
12:30:26 <shapr> well, your choice.
12:30:43 <jemfinch> CosmicRay: yeah, I liked its syntax better than Haskell, less than Python.
12:30:48 <CosmicRay> argh
12:30:55 * CosmicRay eyes jemfinch suspiciously
12:31:08 <CosmicRay> ocaml's syntax sucks
12:31:18 <jemfinch> CosmicRay: I find reading Haskell about as difficult as reading Perl, because the way it looks varies so widely between programmers.
12:31:22 <CosmicRay> my conclusion was that it was designed to make parser design easier
12:31:26 <liquidengineer> python was really elegant
12:31:26 <CosmicRay> rather than programming easier
12:31:32 <jemfinch> CosmicRay: yes, O'Caml's syntax sucks, but at least programmers' code looks more similar.
12:31:43 <shapr> jemfinch: if you have several possible command line args like -fglasgow-exts, -farrows, and -fPIC, then you *know* that an input of -fsocks will fail.
12:31:45 * jemfinch will be first to admit that O'Caml's syntax sucks.
12:32:06 <jemfinch> shapr: whoa, when did we switch to command line arguments?
12:32:20 <shapr> jemfinch: recursive descent parsing, right?
12:32:23 <CosmicRay> jemfinch: I just haven't had that experience with haskell
12:32:29 <CosmicRay> jemfinch: and I have done a fair bit of reading others' code
12:33:08 <jemfinch> CosmicRay: it seems every paper I read defines 12 new operators (like &&& or >&<, etc.) whose names bear no resemblance to their function.
12:33:14 <jemfinch> shapr: yeah...
12:33:21 <CosmicRay> heh
12:33:35 <jemfinch> CosmicRay: I think forcing programmers to think of good names for their functions is a *good* thing.
12:33:36 <liquidengineer> shapr: sorry.  I seem to have derailed everyone with my "I miss Java rant"
12:33:48 <CosmicRay> jemfinch: and they use a funkly LaTeX graphic for it that has no resemblance to how they're typed on a keyboard?
12:33:54 <shapr> With monadic or recursive descent parsers , you must go through the futile effort of trying every parser.
12:34:00 <wtt> jemfinch: IMHO reading Haskell tends to be hard because you have to understand the ideas behind the code
12:34:00 <CosmicRay> jemfinch: ocaml supports operators just like haskell does
12:34:05 <jemfinch> liquidengineer: I'm not derailed, I'm straddling two tracks.
12:34:05 <jemfinch> CosmicRay: yup, that too.
12:34:14 <liquidengineer> jemfinch: ah
12:34:16 <CosmicRay> jemfinch: that ticks me off
12:34:19 <liquidengineer> I'm easily derailed
12:34:33 <liquidengineer> You know what's really wierd to me?
12:34:39 <shapr> and you must hang onto the input as well.
12:34:42 <liquidengineer> haskell supports ; for end of line
12:34:45 <liquidengineer> but no one uses it
12:34:47 <shapr> That's called space leaks and a waste of CPU in Haskell.
12:34:53 <CosmicRay> jemfinch: don't show me some funky squigly thing where it is significant whether the squiggle ends up pointing down or up.  Just show me ~= or =~.
12:34:54 <shapr> liquidengineer: Ashley Yakeley uses it.
12:35:04 <liquidengineer> under this bizarre assumption that we just assume ; is there
12:35:08 <liquidengineer> but why assume it's there?
12:35:19 <shapr> Because you have more than an assumption, you have whitespace that shows structure.
12:35:22 <liquidengineer> python has no EOL character and doesn't pretend to
12:35:35 <shapr> Why use indentation at all if you like ; ?
12:35:39 <xerox> wtt, for me, it's difficult to actually *write* Haskell code, because you nee to develop the algorithm before coding.  Thath's not exactly what I usually do with LISP.
12:35:48 <jemfinch> CosmicRay: yeah, I don't like that.  But at least in O'Caml people don't use them as often.
12:36:04 <shapr> I agree with wtt. If you understand the concepts, reading is easy.
12:36:11 <wtt> xerox: I thought so at first, too
12:36:16 <wtt> it changes with experience
12:36:17 <jemfinch> shapr: why does hanging on to the input cause space leaks?
12:36:32 <shapr> jemfinch: because that's the definition of a space leak, hanging onto something too long.
12:36:35 <liquidengineer> well, I'm out
12:36:38 <liquidengineer> thanks, guys
12:36:42 <shapr> sure, come back soon
12:36:44 <xerox> wtt, I'm supposing it too, I know so little of it.
12:36:48 <wtt> now I tend to write Haskell ten-liners to figure out what to do in 100 lines of C/Java/whatever
12:37:01 <liquidengineer> I will say this before I go
12:37:11 <jemfinch> shapr: oh, I thought a space leak was hanging on to stuff forever.
12:37:15 <liquidengineer> I've been doing Java for about three years now, and like to think I'm pretty good at it
12:37:17 <jemfinch> if you're still going to use the input, it's not a space leak.
12:37:34 <shapr> jemfinch: arrows let you find out whether you'll use the input *way* earlier than monads or recursive descent.
12:37:36 <liquidengineer> so it's a wierd feeling when your brain blanks on how to do something like write an identity function
12:37:42 <liquidengineer> :)
12:37:59 <shapr> liquidengineer: yeah, but wait till you know haskell and you write Java agin.
12:38:04 <wtt> liquidengineer: I fully understand that, I felt the same :-)
12:38:12 <liquidengineer> shapr: I'll be able to, right?
12:38:17 <shapr> Your coworkers will have trouble understanding how such a small amount of code can do so much.
12:38:18 <jemfinch> shapr: by letting you "pass things through" the computation?
12:38:25 <wtt> shapr: yes, we better warn him about the addictive effects of Haskell
12:38:35 <shapr> yes, truly. Haskell is *very* addictive.
12:38:49 <CosmicRay> liquidengineer: here's a tip
12:38:50 <wtt> I get severe withdrawal symptoms whenever I have to code in Java.
12:38:52 <shapr> The first lambda comes free.
12:38:55 * shapr tokes on a lambda
12:39:07 <liquidengineer> ew
12:39:10 <CosmicRay> liquidengineer: think of every function in haskell as having "return" in front of its defition
12:39:11 <liquidengineer> I hate lambdas
12:39:26 <shapr> aw man, this lambda is partially applied.
12:39:27 <CosmicRay> liquidengineer: so when you might say int foomethod(int x) { return x}
12:39:27 <liquidengineer> CosmicRay: that sort of helps
12:39:28 * shapr gets another
12:39:42 <liquidengineer> I shouldn't say I hated them...
12:39:44 <CosmicRay> you can think of foofunction :: Int -> Int      foofunction x = x
12:39:46 <wtt> Lambdas are the most addictive part of Haskell...
12:39:54 <liquidengineer> I didn't like them in python because their usage was wierd
12:40:03 <CosmicRay> liquidengineer: python can't really use them well
12:40:04 <jemfinch> wtt: is Haskell your first functional programming language?
12:40:10 <CosmicRay> liquidengineer: because python has expressions and statements
12:40:19 <CosmicRay> liquidengineer: haskell has expressions only, so they'er much more useful
12:40:21 <jemfinch> liquidengineer: I almost never use them in Python.
12:40:29 <liquidengineer> Exactly
12:40:30 <wtt> jemfinch: I head a first-year course on SML at university
12:40:31 <shapr> jemfinch: arrows allow you to specify static properties on a computation. So I can give little or much detail about what the next chunks of code can parse.
12:40:36 <jemfinch> liquidengineer: I just define a nested function and give it an appropriate name.
12:40:36 <liquidengineer> it just seemed wierd when they showed up
12:40:42 <wtt> but Haskell is the first FPL I actually used
12:40:53 <jemfinch> wtt: so what's so different about Haskell's lambda that makes it "the best part of Haskell"?
12:41:01 <CosmicRay> liquidengineer: here's another little mind-bender.  haskell has no notion of loops because we don't need them.
12:41:02 <liquidengineer> like there was a better feature of the language that could have done the job, but hey decided to require lambdas because hey...they're there
12:41:14 <wtt> jemfinch: oh, I didn't mean that
12:41:14 <liquidengineer> CosmicRay: aye.  it's all recursion
12:41:17 <CosmicRay> liquidengineer: yup
12:41:18 <liquidengineer> that bugs the hell out of me
12:41:30 <CosmicRay> liquidengineer: it actually is a quite powerful concept once you get used to it
12:41:34 <wtt> lambdas are just what I miss most when I write programs in [C,C++,Java,Objective-C]
12:41:39 <CosmicRay> and it makes a lot more sense out of many problems
12:41:49 <liquidengineer> I realize that already, but I'm just not used to it
12:41:53 <shapr> And arrows compose in such a way that -fglasgow-exts, -fPIC, and -farrows would become one arrow parser of "-f" and then three parsers of "glasgow-exts" "PIC" and "arrows". You'd get to fail as early as possible, or succeed as early as possible.
12:41:56 <CosmicRay> yeah I grok that
12:42:05 <CosmicRay> liquidengineer: I have two links for you
12:42:21 <CosmicRay> liquidengineer: first, "Learning OCaml for C, C++, Perl, and Java programmers".  http://merjis.com/developers/ocaml_tutorial/
12:42:35 <CosmicRay> liquidengineer: OCaml is a language that is somewhat related to haskell but doesn't push things as far as haskell does
12:42:41 <CosmicRay> liquidengineer: the typing system though is very similar
12:42:46 <jemfinch> CosmicRay: dude, have him learn SML instead :)
12:42:50 <jemfinch> *way* better than O'Caml.
12:42:51 <shapr> jemfinch: so, you dig arrows now?
12:43:01 <jemfinch> shapr: a little more than I did before this computation.
12:43:04 <CosmicRay> jemfinch: nobody wrote Learning SML for C, C++, Perl, and Java programmers :-)
12:43:14 <CosmicRay> liquidengineer: also, Yet Another Haskell Tutorial.  http://www.isi.edu/%7Ehdaume/htut/
12:43:20 <jemfinch> CosmicRay: yes, but there are *far* more books on SML.
12:43:22 <liquidengineer> I have to learn haskell
12:43:26 <liquidengineer> my FP teacher demands it
12:43:27 <shapr> liquidengineer: lucky you!
12:43:28 <liquidengineer> :P
12:43:35 <CosmicRay> jemfinch: I'm not telling him to become extremely fluent in it
12:43:36 <shapr> And you have this great community here on #haskell to help you!
12:43:37 <liquidengineer> I'm excited about it
12:43:43 <liquidengineer> I can feel its power
12:43:46 <shapr> w00!
12:43:52 <CosmicRay> jemfinch: that tutorial will explain some fp concepts that are common between ocaml and haskell in a way that he can understand
12:43:53 <liquidengineer> even if its power confuses and frightens me
12:43:54 * shapr brands liquidengineer a Knight of the Lambda
12:44:00 <liquidengineer> sweet
12:44:03 <jemfinch> shapr: so when you say, "arrows allow you to specify static properties on a computation," what kinds of things would qualify as "static properties"?
12:44:09 <shapr> jemfinch: anything you want
12:44:13 <liquidengineer> even though I don't know what that means
12:44:15 <shapr> When is that a good idea?
12:44:20 <liquidengineer> shapr: thanks. :)
12:44:23 * shapr grins
12:44:24 <jemfinch> shapr: that doesn't help me :)
12:44:31 <Lor> Those that can be discovered prior to running the program.
12:44:34 <CosmicRay> shapr: I guess I need to apply with the Order of the Lambda Empire.  I think I'm still a serf of the lambda, that picks up the tails of recursion after the knights are done with them.
12:44:41 <shapr> jemfinch: you're asking me "When is it good to use an object?" 
12:44:49 * shapr laughs
12:45:07 * shapr dubs CosmicRay a Knight of the Lambda too
12:45:11 <CosmicRay> woot!
12:45:12 <CosmicRay> :-)
12:45:20 <liquidengineer> shapr: is there actually a list of ranks somewhere?
12:45:30 <jemfinch> shapr: well, are they really static properties?  The example you gave before, about Darcs' patches, seems to imply that they're not static, but dynamic properties based on only *some* of their input.
12:45:31 <liquidengineer> like some sort of Haskell Fuedalism?
12:45:37 <CosmicRay> liquidengineer: of course, at the Round Monad.
12:45:39 <liquidengineer> cause that would be rockin'
12:45:44 <CosmicRay> :-)
12:45:51 <CosmicRay> shapr: oh, but which Simon is king?
12:45:57 <shapr> I just made up Knight of the Lambda, it's a pun on the Knight of the Curly Brace ( C/Java ) and Knight of the Object (Smalltalk)
12:46:00 <liquidengineer> CosmicRay: I don't know what a monad is yet, but I like your sense of humor
12:46:09 * shapr sings Two Kings by Tenacious D
12:46:10 <CosmicRay> @wiki MegaMonad
12:46:10 <lambdabot> http://www.haskell.org/hawiki/MegaMonad
12:46:19 <CosmicRay> liquidengineer: then you will love that MegaMonad url
12:46:31 <liquidengineer> I'm in no hurry, actually
12:46:38 <CosmicRay> liquidengineer: it's a very funny read
12:46:48 <shapr> jemfinch: patch type is static. File effects are dynamic, because commutation can change the results.
12:46:53 <CosmicRay> liquidengineer: megamonad is our resident ai bot, trained on the conversations in this channel.
12:46:59 <jemfinch> shapr: explain :)
12:47:00 <CosmicRay> MegaMonad: Introduce yourself to liquidengineer.
12:47:01 * shapr sighs
12:47:02 <MegaMonad> CosmicRay: Anyone whom aop excites needs to understand the attribute through internal nodes and i think to myself "this is a fun problem for me if being able to adapt yourself to liquidengineer.
12:47:08 <shapr> jemfinch: read the Patch theory in the darcs manual!
12:47:27 <liquidengineer> Anyone seen/read The Craft of Functional Programming 2/E?
12:47:37 <CosmicRay> liquidengineer: yes.  I got it for christmas.  get it.
12:47:39 <shapr> Once you understand patch commutation, you'll see how some parts of a patch can change.
12:47:42 <liquidengineer> it's what we're using in FP
12:47:45 <liquidengineer> I like it
12:47:46 <CosmicRay> I haven't read much of it yet but what I have seen is good stuff.
12:47:54 <shapr> liquidengineer: that's how I learned Haskell.
12:47:57 <liquidengineer> we're in chapter 4
12:48:08 <liquidengineer> I've been doing haskell for about three weeks
12:48:17 <liquidengineer> well, more like 2
12:48:20 <shapr> yay!
12:48:21 <CosmicRay> shapr: smells like time for your tour!
12:48:26 <wtt> CosmicRay: It doesn't really matter which Simon is King, as the real power in the Kingdom still belongs to the Church  (Alonzo Church, of course)
12:48:32 <CosmicRay> haha
12:48:40 <liquidengineer> the first five days was me staring at the teacher and trying to look like I understood the words coming out of his mouth
12:48:45 <shapr> I have to get back to work, so I don't have time to give the tour.
12:48:58 <CosmicRay> shapr: lambdabot should have @tour
12:49:03 <shapr> wtt: I thought Haskell was about all about separation of Church and State?
12:49:05 * shapr laughs
12:49:14 <shapr> hej Marvin--
12:49:24 <liquidengineer>  MegaMonad Kirkboat
12:49:28 <liquidengineer> oops
12:49:33 <wtt> shapr: No, they came together again at the Round Monad
12:49:37 <Marvin--> evening
12:49:38 * shapr laughs
12:49:48 <jemfinch> shapr: Patch theory is really dense as well.
12:49:49 <liquidengineer> I must say I tihnk this is a wonderful channel
12:49:57 <shapr> Marvin--: did you finish the gtk2hs cabal?
12:50:08 <liquidengineer> most Java/C++ channels actively refuse to help people who they think are doing homework
12:50:08 <shapr> jemfinch: it's way simple, it's like factoring a number.
12:50:17 <Marvin--> no, I never got around to it
12:50:27 <shapr> liquidengineer: we won't *solve* your problem, but we'll help you learn Haskell.
12:50:39 <Marvin--> I've been crazy busy with work lately, what with the merger and all
12:50:45 <liquidengineer> shapr: exactly
12:50:56 <liquidengineer> I never wanted anybody to solve things for me
12:51:00 <shapr> jemfinch: 8 can be 2 * 2 * 2 or 2 * 4 or 4 * 2
12:51:02 <swiert> shapr: the knights of the lambda calculus already exist - http://www.jargon.net/jargonfile/k/KnightsoftheLambdaCalculus.html
12:51:11 <liquidengineer> but just being told to "look at the docs" was not very helpful
12:51:11 <CosmicRay> whoa
12:51:15 <Marvin--> shapr: what do you mean "or"? :)
12:51:16 <liquidengineer> and that was pretty much it
12:51:24 <shapr> swiert: awesome!
12:51:29 <CosmicRay> liquidengineer: the whole haskell community is awesome.
12:51:41 <CosmicRay> liquidengineer: I have never been part of a group with as many real geniuses about
12:51:50 <CosmicRay> liquidengineer: and many of them are willing to share their knowledge, even! :-)
12:52:27 <liquidengineer> cool
12:52:27 <liquidengineer> oh
12:52:32 <liquidengineer> and megamonad is the awesome
12:52:34 <shapr> jemfinch: A darcs repo is a single number, with lotsa factors (patches), with the difference that order is important, and numbers must be modified to switch order.
12:52:40 <CosmicRay> liquidengineer: <grin>
12:52:44 <liquidengineer> I'm playing with it in a msg wing
12:52:45 <wtt> swiert: So the Knights actually operate in several neighbouring kingdoms and fight for peace and order, even though the Kingdoms themselves are not always at peace with each other (cf. the Type System Wars)
12:52:45 <liquidengineer> window
12:52:53 <liquidengineer> it's wonderful to meet such an insane little bot
12:52:59 <CosmicRay> hehe
12:53:07 <monochrom> MegaMonad: you're awesome, and liquidengineer thinks so too!
12:53:08 <MegaMonad> monochrom: Why would somebody license a patch to syntax, i'm off to kill off a bug in the programm, so it perhaps thinks that it was 128kb stearming mp3 instead of mapping keys, etc. In order to adapt yourself to liquidengineer.
12:53:19 <liquidengineer> MegaMonad: kirk .  Bot: Can.  You.  Speak.  Like.  Captain.  Kirk.
12:53:20 <MegaMonad> liquidengineer: But i speak to the bot.
12:53:22 <araujo> Hello all.
12:53:28 <shapr> hiya araujo 
12:53:31 <liquidengineer> .....
12:53:33 <CosmicRay> hi araujo.
12:53:39 <liquidengineer> why does it want everyone to adapt themselves to me
12:53:40 <shapr> jemfinch: is that clear?
12:53:43 <araujo> Hello shapr , CosmicRay 
12:53:44 <jemfinch> shapr: somewhat.
12:53:48 <liquidengineer> I'm single and happy right now
12:53:49 <araujo> How you guys doing?
12:54:01 <CosmicRay> liquidengineer: I have no idea
12:54:05 <monochrom> I have a feature request about MegaMonad.  I think it should delay its response in proportion to the length of its response.
12:54:07 <jemfinch> shapr: I'm not yet convinced that Darcs' underlying theory can lead to a suitably efficient system.
12:54:13 <CosmicRay> MegaMonad: liquidengineer is single and happy.
12:54:14 <MegaMonad> CosmicRay: So, happy is the one single problem with garbage collection at uu.
12:54:28 <shapr> jemfinch: since you don't understand the theory, how can you be convinced of anything about it? :-)
12:54:39 <liquidengineer> .........
12:54:45 <jemfinch> shapr: s/theory/model/
12:54:57 <jemfinch> I do understand the underlying model of representing a tree by the set of patches that made it.
12:54:58 <CosmicRay> liquidengineer: did you read the megamonad quotes page?
12:55:04 <liquidengineer> MegaMonad: Elmo knows where you live.
12:55:05 <MegaMonad> liquidengineer: Why are you being dumb when it knows is that the original question, i don't live in the report.
12:55:19 <liquidengineer> Yeah.  I'm the dumb one.  Right.  :P
12:55:22 <CosmicRay> heh
12:55:25 <liquidengineer> CosmicRay: just pulled it up
12:55:31 <shapr> jemfinch: I think that you can't understand the theory/model without understanding commutation.
12:56:02 <jemfinch> shapr: Isn't commutation just reordering patches until they "fit"?  What am I missing?
12:56:26 <shapr> jemfinch: In any case, I asked David if I could write a prototype of Patch as arrow, and he's interested. I think it can dramatically improve the efficiency of darcs.
12:56:51 <jemfinch> shapr: good luck.
12:57:07 <liquidengineer> oops
12:57:07 * jemfinch still thinks that Darcs is up there as one of the least readable Haskell programs in existence.
12:57:11 <liquidengineer> and now i really should go
12:57:12 <liquidengineer> bye
12:57:13 <liquidengineer> :)
12:57:45 <shapr> jemfinch: do you understand why patches have to be chaned to be reordered?
12:57:52 <jemfinch> chaned?
12:57:56 <shapr> chanGed
12:58:01 <jemfinch> oh, of course.
12:58:20 <shapr> So, how many different possible representations are there for a give darcs repo?
12:58:24 <jemfinch> you're talking about compound patches, right?
12:58:31 <shapr> no, single patches.
12:58:43 <jemfinch> shapr: "addfile ./x" can't even *be* changed.
12:58:58 <shapr> right, but it can conflict.
12:59:13 <jemfinch> it can conflict, that's for sure.
12:59:19 <shapr> so, what can addfile commute past, and what can't it commute past?
12:59:24 <jemfinch> (and when I say "compound patches" I mean "hunks and combinations of other patches")
12:59:47 * Marvin-- growls something nasty about JNI
12:59:58 <jemfinch> addfile obviously can't be commuted to go after modifications or removals of that file.
13:01:03 <shapr> So you can generalize that to two levels. You could create a Patch arrow that just says what type of patch, or maybe which files are affected, or much more.
13:01:23 <shapr> The inefficient part of patch operations is that you have to do a bunch of recursive comparisons and commutations.
13:01:48 <jemfinch> shapr: but isn't there a fundamental inefficiently for big projects anyway, when you're going to have thousands upon thousands of patches?
13:01:54 <jemfinch> er, inefficiency.
13:01:58 <jemfinch> my fingers have been typing horribly lately.
13:02:53 <shapr> Think of a bunch of rings on a string. Some of them are larger, some are smaller. The small rings can go past the big rings and vice versa, but they can't go past each other.
13:03:43 <shapr> If you hold a bunch of rings together with your hand, you can drop a smaller ring through that bunch, otherwise you have to move the smaller ring one by one down the string.
13:03:59 <shapr> got it?
13:04:46 <jemfinch> yeah.
13:04:52 <Lor> How do you drop the smaller ring "through"?
13:05:16 <shapr> Lor: in which sense, a patch arrow, or in the literal sense of a ring?
13:05:58 * jemfinch always had a concern about Darcs' patch commutation rules as well.
13:06:02 <Lor> In the literal sense. I didn't realize that this was a metaphor. :)
13:06:47 <shapr> Lor: You align them with your hand held like a fist, and the smaller ring will drop right through.
13:07:10 <shapr> It's a good physical model of monads too.
13:08:34 * CosmicRay files an ITP for hsdns
13:08:55 <jemfinch> (shapr: I asked my question in #darcs, since it was somewhat unrelated to the current conversation and definitely darcs-related more than haskell-related)
13:09:09 <shapr> jemfinch: anyway, sorting patches by patch type, file affected, etc, will let you skip some of recursive comparisons and decrease the complexity of patch operations.
13:09:53 <jemfinch> shapr: but it seems that a patch application will always be at least linear in the number of patches in the repo.
13:10:44 <shapr> Why?
13:11:25 <jemfinch> because patch commutation can potentially look at all the patches in the repo.
13:12:49 <shapr> I think you should read up on the patch theory again.
13:13:16 <shapr> Because I'm tired of explaining for the moment :-)
13:13:35 <jemfinch> I'll read it again :)
13:13:41 * jemfinch rereads these things a lot.
13:13:47 <jemfinch> especially since I'd like to reimplement Darcs.
13:14:23 <shapr> Try creating a small demo repo, and looking at the contents of the patches themselves.
13:14:52 <shapr> Then try manually creating various patches that should fail, should work, etc and see how the *final* form of the patch appears.
13:15:06 <shapr> You might even find some bugs :-)
13:15:17 <jemfinch> hehe
13:15:28 <shapr> One reason I want to switch to an arrow patch type is that I would be able to turn that sort of description into a more formal semantics of patch ops.
13:15:46 <shapr> I think I could write better QuickCheck tests for that.
13:16:08 <shapr> Anyway, I'm off to do more Plone work.
13:16:09 <jemfinch> shapr: I'd be very interested in seeing your arrow implementation of patches.
13:16:20 <shapr> jemfinch: I bet it wouldn't help you much
13:16:25 <jemfinch> shapr: why not?
13:16:48 <shapr> First time I read through a real app based on arrows I spent two hours thinking "where the *heck* is all the CODE?"
13:16:57 <jemfinch> which real app was that?
13:17:04 <shapr> Yampa Arcade
13:17:08 <jemfinch> what's that?
13:17:13 * shapr points to google
13:17:45 <jemfinch> so where was all the code? ;)
13:17:56 * xerox notes about shapr working with pointers and now with functions <grin>
13:18:12 <shapr> All the code was in the arrow.
13:19:37 <shapr> OOP is about giving set semantics for combination of code chunks.
13:19:47 <shapr> monads and arrows are about letting you define your own ways of combining code chunks.
13:20:07 <jemfinch> interesting.
13:20:12 <jemfinch> we should talk more on that thread later.
13:20:13 <shapr> That's a big shift in view.
13:20:30 <shapr> And more powerful than OOP from everything I've seen.
13:28:35 <Igloo> SyntaxNinja: Are you here?
13:29:49 <Marvin--> hey Igloo
13:29:55 <Igloo> Hi Marvin--
13:30:30 <icb> is there an article that summarizes the various techniques of exporting haskell code as a C API?
13:43:57 <SyntaxNinja> hi Igloo
13:44:04 <SyntaxNinja> Marvin--: hey, long time no see
13:44:08 <SyntaxNinja> is darcs out yet?
13:45:11 <Igloo> How can I test if runghc is doing what you want?
13:46:22 <Marvin--> hey hey
13:46:26 <SyntaxNinja> #!/usr/bin/runghc \n\nmain = putStrLn "foo"?
13:47:40 <Igloo> Ah, simple as that. Ta  :-)
13:51:40 * Marvin-- sighs
13:51:46 <Marvin--> stupid crashes
13:58:46 <Marvin--> hey cool, Alan Rickman does the voice of the paranoid android, I didn't know that
14:10:23 <Itkovian> evening
14:12:29 <Itkovian> I am wondering if there are any good FP conferences or journals to publish in. My own work involves Java/simulation/performance stuff, so I'm out of my league in that respect. A friend of mine, who did his PhD on iirc verification using 'Alfred' (his own functional language) has some stuff lying around he'd like to get published, but his PhD stuff was sent to mathematical journals/conferences, so neihter of us has a clue. 
14:13:20 <shapr> International Conference on Functional Programming, Implementation of Functional Languages, Journal of Functional Programming
14:14:18 <Itkovian> and they're arm, well, we call it A1, meaning they have a ISI citation entry
14:14:24 <Itkovian> ?
14:14:46 <Itkovian> Because those look best on a resume here in Belgium
14:15:20 <shapr> No clue, I'm just a self-employed programmer with no degree.
14:15:38 <shapr> I go to ICFP just for the pretty pictures.
14:15:43 <Itkovian> heh
14:15:54 <Itkovian> not for the hot chicks?
14:16:04 <shapr> HOT == Higher Order Types?
14:16:31 <Marvin--> *groan*
14:16:37 * shapr snickers
14:17:07 <Itkovian> yeah, duh. obviously. what else?
14:17:50 <shapr> Seriously, I don't know. I have been thinking about writing a paper about this darcs patch arrow, so I'm also interested in this info.
14:17:56 <Itkovian> now explain 'chicks' :-)
14:18:13 <Itkovian> at first sight JFP seems nice
14:18:25 <Itkovian> I don;t know what the acceptance rate is though.
14:18:34 <Itkovian> the same goes for ICFP
14:18:36 <shapr> I've never seen an issue, it's insanely expensive per subscription.
14:18:54 <shapr> With ICFP you get to compete with people like SPJ3.
14:18:59 <shapr> er "SPJ"
14:19:17 <Philippa_> didn't you realise he got himself cloned so he could get enough work done?
14:19:19 <shapr> I know the UNSW guys do IFL as well as ICFP.
14:19:22 * shapr snickers
14:19:26 <Marvin--> whoa, there's three of him? no wonder he's so productive
14:19:45 <Marvin--> bah, Philippa beat me to the punchline
14:19:52 <Marvin--> that's what I get for using multiple workspaces
14:19:55 <shapr> I lost my fingernail clippers, and . is next to 3 :-P
14:20:27 <Itkovian> erm, you mean below?
14:20:31 <shapr> right
14:21:10 <Itkovian> well, 13 april deadline sounds fine to me, Im sure my buddy could spawn a paper in that time, as the essential work has already been done.
14:21:31 <Itkovian> and estonia seems a nice place to go to.
14:21:32 <Itkovian> :-)
14:21:56 <shapr> Unless something unexpected happens, I'll be at ICFP in Estonia.
14:22:11 <Itkovian> shapr: maybe you could submit your work to the haskell workshop at ICFP
14:22:20 <shapr> Hm, I hadn't thought of that.
14:22:48 <xerox> 'night folks
14:22:53 <shapr> Since I've never written a paper before, I suspect it'll take a bunch of rewrites and probably several conference before I get the hang of that.
14:22:57 <Marvin--> shapr: are you coming down to gbg to europython this summer too?
14:23:11 <shapr> That's the plan.
14:23:16 <Itkovian> shapr: you know any people at uni? they usually have XP writing papers and some such
14:23:19 <Marvin--> shiny
14:23:36 <shapr> And EuroHaskell and GothUni too
14:23:39 <Marvin--> (wow, I've been watching way too much Firefly)
14:23:47 <Marvin--> gothwhat?
14:23:49 <Philippa_> where's EuroHaskell looking to be this year?
14:23:56 <shapr> Philippa_: same place this year
14:24:00 <Philippa_> 'k
14:24:11 <wli> EuroHaskell and GothUni?
14:24:25 <shapr> Marvin--: GothUni is just a few unicyclists gathering in Gothenburg.
14:24:30 <Marvin--> oh
14:24:40 <Philippa_> as opposed to Unicyclists in Black
14:24:46 <shapr> Ulf Karlsson and I are going to invite some to show up from around .se
14:24:55 <shapr> see #unicycling for more info ;-)
14:24:59 <Marvin--> shapr: including John? :)
14:25:08 <shapr> Hah! If he wants to try again :-)
14:25:42 <shapr> Marvin--: have you seen Ulf? He's *good*
14:25:56 <shapr> hiya revera 
14:26:04 <shapr> Looking for Haskell info?
14:26:04 <CosmicRay> url me on eurohaskell 2005
14:26:12 <Marvin--> nope, haven't seen him unicycle
14:26:22 <revera> hi shapr. yup.. I'm wrapping around CPS and need some advice
14:26:28 <CosmicRay> when/where/etc
14:26:32 <shapr> CosmicRay: Gothenburg Sweden, same time as EuroPython
14:26:47 <shapr> Not exactly the same time, but designed to let people go to both.
14:26:56 <Marvin--> europython is 27 june - 1 july
14:27:02 <CosmicRay> shapr: where can I find exactly the time for eurohaskell?
14:27:13 <CosmicRay> perhaps we could make this coincide with our europe trip.
14:27:13 <shapr> The exact time is a thunk.
14:27:15 <revera> can someone show me an example of map in CPS?
14:27:24 <CosmicRay> shapr: iow, not yet known? :-)
14:27:27 <Marvin--> so I suppose eurohaskell is likely to be 1-3 july or something?
14:27:40 <shapr> Sounds good to me.
14:27:58 <shapr> I have to hook up with bringert or somebody to do on-site organization.
14:28:04 * CosmicRay will have to see how much more expensive transatlantic airfares are in the summer.
14:28:44 <CosmicRay> shapr: is there stuff my wife can do in gothenburg while I'm diong eurohaskell stuff?
14:29:00 <shapr> Ask Marvin--, he lives there.
14:29:12 * revera needs help
14:29:19 <Marvin--> oh god, I suck at tourism
14:29:26 <CosmicRay> especially things that can be done in English without a sophisticated sense of direction?
14:29:29 <CosmicRay> Marvin--: heh
14:29:35 <shapr> revera: I don't have a good answer. I've never tried to turn map into CPS.
14:29:50 <Marvin--> most Swedes speak English well enough
14:29:50 <shapr> CPS has been valuable to me for understanding monads, but that's my most recent use of it.
14:30:29 <Itkovian> any pages on eurohaskell 2005 in the wiki?
14:30:44 <shapr> I'll just update the existing page when there's some info.
14:30:47 <CosmicRay> Itkovian: it appears not
14:31:08 * Itkovian definitely needs to catch up on some FP theory stuff. Urgently. I'm way out of my league here most of the time.
14:31:13 <shapr> heh
14:31:23 <revera> In particular, I don't have a clue how about the continuation should look like. I continue to think recursively..
14:31:26 <shapr> I'm half organizer for EuroHaskell :-)
14:31:56 <shapr> EuroHaskell started out as a joke, but then people wanted to show up.
14:32:01 <Itkovian> heh
14:32:02 <CosmicRay> bwahahaha to http://ridley.csbnet.se/gallery/eurohaskell/p1010060
14:32:19 <shapr> CosmicRay: The genius of andersca
14:32:32 <Marvin--> wait till you see the pics of John Hughes on shapr's unicycle :)
14:32:47 <shapr> revera: My intuition about continuations came from Stackless Python, so I'm not sure I can help much.
14:33:49 <shapr> andersca said on #haskell.se that I should come south and hang out and code with the Gothenburg Haskellers, so I said I'd show up around EuroPython since we'd be there anyway. And I started calling it EuroHaskell as a joke on EuroPython.
14:33:55 <CosmicRay> Marvin--: anyway, I just asked about gothenburg because my wife is not quite the geek that I am :-)
14:34:04 <CosmicRay> heh
14:34:16 <revera> heh, seems like you can live without CPS
14:34:26 <CosmicRay> what is CPS?
14:34:31 <shapr> continuation passing style
14:34:34 <Marvin--> yeah, I understand, and I really wish I could think of some clever things to say :)
14:34:53 <CosmicRay> heh
14:34:55 <shapr> CosmicRay: look at last year's EuroPython website, maybe they have touristy stuff
14:35:07 <CosmicRay> ah, good though
14:35:09 <CosmicRay> t
14:35:16 <Marvin--> oh, good point, Jacob is usually good at those kind of things
14:36:12 <shapr> I was unhappy that the "Fun of Programming" conference had no programming. So EuroHaskell's slogan was "less talk, more code"
14:36:17 <CosmicRay> Marvin--: how big is gothenburg?
14:36:24 <CosmicRay> shapr: haha
14:37:10 <shapr> Someone else described EuroHaskell as an "academic LAN party" 
14:37:14 <Marvin--> CosmicRay: it's Sweden's second largest city, with somewhere around half a million people
14:37:15 <Itkovian> shapr: I thought you'd be erm ... skinnier ...
14:37:19 <shapr> Itkovian: I am now!
14:37:23 <Itkovian> ah ...
14:37:29 <Itkovian> lack of food up north?
14:37:37 <shapr> I was 107 kilos there, I'm down to 93 kilos now.
14:37:56 <shapr> Hey, let's get edwinb to give a talk on Epigram at EuroHaskell
14:38:03 <Marvin--> shapr: good job! now if only I could get rid of this belly I've saddled myself with...
14:38:08 <Itkovian> you don;t look 107 kilos to me
14:38:18 <edwinb> Hello world
14:38:24 <world> hello
14:38:35 <Itkovian> and why is it you have a helmet and those other guys do not?
14:38:43 <edwinb> how is the world this evening?
14:39:25 <Marvin--> Itkovian: 'cause he rode his unicycle all the way down from northern sweden
14:39:40 <CosmicRay> wow
14:39:47 * shapr snickers
14:40:12 <Marvin--> right, shapr? :)
14:40:17 <shapr> um, yeah
14:40:34 <Marvin--> goteborg.com has lots of good info, it seems
14:40:36 <CosmicRay> err, does that mean that the train station was a few blocks north, or did you really ride it? :-)
14:40:47 <shapr> No, I didn't. I took the train.
14:40:56 <shapr> 800km would take a looong time to ride.
14:40:59 <Itkovian> heh
14:41:02 <CosmicRay> yeh
14:41:08 <CosmicRay> people do that
14:41:10 <Itkovian> well, you could slide the downhill parts ...
14:41:16 <shapr> slide?
14:41:41 <shapr> Unicycles are direct drive, they don't coast.
14:42:06 <Itkovian> well, take yr feet off!
14:42:08 <CosmicRay> shapr: there is an annual 500-mile (804km) bike across kansas event
14:42:09 <shapr> edwinb: want to come to Gothenburg, Sweden in July and talk about Epigram and write Haskell code?
14:42:12 <CosmicRay> but those are bicycles
14:42:22 <desrt> shapr; ?
14:42:23 <CosmicRay> with a support infrastructure
14:42:32 <Marvin--> CosmicRay: slight difference :)
14:42:36 <shapr> Serious long distance unicycles have 36" wheels. I only have a high-torque 24" unicycle.
14:42:39 <CosmicRay> how expensive is lodging?
14:42:42 <edwinb> shapr: Yes. But...
14:43:10 <shapr> CosmicRay: really cheap if you give a talk about your book at EuroPython
14:43:16 <CosmicRay> heh
14:43:24 <edwinb> When is EuroHaskell?
14:43:27 <edwinb> And indeed where?
14:43:31 <Itkovian> my kid's awakening ...
14:43:34 <shapr> shhh!
14:43:40 <desrt> s/eurohaskell/icfp/i
14:43:45 <Itkovian> no, no, he's making the noise
14:44:21 <shapr> EuroHaskell is in early July, in Gothenburg, Sweden, at Chalmers University.
14:44:59 <shapr> Chalmers has such luminaries as John Hughes, Aarne Ranta, Josef Svenningsson, Martin Sjögren...
14:45:05 <shapr> Anders Carlsson :-)
14:45:24 <edwinb> Indeed. It would be fun to go anyway.
14:45:31 <edwinb> But we'll see...
14:45:40 <Marvin--> feh, since when am I a luminary?
14:45:47 <shapr> andersca is amazingly productive. He has credits in a lot of open source apps.
14:46:15 <shapr> dbus, xmms, and gnome are all that come to mind at the moment.
14:47:00 <shapr> edwinb: It would be cool to have an Epigram intro. 
14:47:16 <Philippa_> shapr: I get one from the man himself in March
14:47:20 <edwinb> Yeah, I hope we get something good working by then.
14:47:21 <shapr> lucky you.
14:47:43 <Philippa_> BCTCS and all that - I dunno if you can still apply for places by now though
14:47:49 * Marvin-- sips his cognac and contemplates luminous things
14:48:29 <shapr> I wish Koen would get QC2 out.
14:49:28 <Marvin--> yeah
14:52:29 <Marvin--> man, there are so many cool concepts and ideas I want to tinker and experiment with at work, and instead I'm bogged down with programs that crash when compiled on RHL7.3 but not when compiled on RHEL3 and stupid crap like that
14:53:51 <shapr> And I never seem to get around to rewriting Zope in Haskell.
14:58:50 <stepcut> heh
14:59:04 <edwinb> I'd just like some understandable docs for Zope...
14:59:22 <edwinb> I always think it might be useful, then lose patience when I can't work out how to get started.
14:59:23 <stepcut> I heard adersca is a pirate
14:59:27 * shapr snickers
14:59:59 <stepcut> @arr
15:00:00 <shapr> edwinb: Zope is totally the opposite of immutable stateless code. It's like ... well, whatever is the complete opposite.
15:00:00 <lambdabot> Arrr!
15:00:11 <sh10151> Marvin--: could be worse, could be stuck dealing continually loading data from a 250-field 50,000-row Excel worksheet that the users like to cut-and-paste with
15:00:30 <edwinb> mutable? stateful?
15:00:33 * edwinb panics
15:00:38 <shapr> Yeah, but worse...
15:00:59 <sh10151> and 11 million of that 12.5 million cells are completely blank
15:01:06 <sh10151> or have the word "Unverified" in them
15:01:20 <sh10151> yeah, that was their response to null data in useless fields that no one fills out
15:01:21 <Marvin--> sh10151: nice :/
15:01:56 <shapr> In Zope there's a REQUEST object that you get when a web request is made. A lot of the code requires a REQUEST object rather than havinga wrapper around some simple sane function that strips the data out of a REQUEST. That makes security and bug hunting a real nightmare.
15:03:04 <edwinb> I might have changed my mind about "might be useful" now...
15:03:05 <shapr> And, Zope is huge, CMF is another huge layer on top of that. And Plone is another huge layer on top of CMF. And I make 99% of my income with Plone.
15:03:51 <shapr> It's really powerful, but with six months and a few decent Haskellers I could build all its good points into something so much better.
15:04:25 <sh10151> you know what I want? I want a web framework explicitly oriented for REST architecture
15:04:41 <shapr> I want "derive WebPublish" 
15:04:43 <sh10151> give me a URI for everything dammit, and keep it straight
15:15:08 <Igloo> OK, I didn't sign up for Haskell maintainership in order to debug problems with TeX parsing XML.
15:16:02 <Marvin--> heh, what now?
15:16:19 <Igloo> Building happy docs
15:16:35 <Marvin--> oh
15:16:56 <Philippa_> shapr: lemme know when you can afford to pay your few good haskellers ;-)
15:17:15 <Marvin--> man I'm tired, I'm gonna hit the sack
15:17:41 <Igloo> Philippa_: Oi, back of the queue!  :-)
15:17:51 <Igloo> 'night Marvin
15:20:08 <Philippa_> <shapr> edwinb: Zope is totally the opposite of immutable stateless code. It's like ... well, whatever is the complete opposite. <- "Buggy"
15:20:40 <edwinb> I've written some pretty buggy immutable stateless code too...
15:21:00 <edwinb> It's just more of a challenge
15:22:55 <Philippa_> I've done it a couple of times. I very rarely get untraceable compound bugs from hell though
15:23:18 <edwinb> This is undoubtedly true.
15:23:21 <Philippa_> that's the problem with mutable stuff, you can't always rely on the trace showing you where it screwed up
15:24:34 <edwinb> Normally it's because I haven't understood what it was I was trying to do in the first place...
15:25:16 <Philippa_> yeah, my last hard-to-trace bug was because I'd got the subtyping relationship on functions wrong
15:40:15 <shapr> dang
15:40:20 <shapr> I was just talking about Si\
16:04:43 <Oejet> Is there a paper on arrow parsers?
16:06:24 * boegel greets
16:10:33 <shapr> Oejet: yeah, it's mentioned in Ross Paterson's FoP chapter, and more in Hughes' paper.
16:11:15 <stepcut> are there any cabalized arrow based parsers?
16:11:32 <shapr> There's only one arrow based parser I know of, written by swiert
16:11:44 <shapr> And it's just a quick hack to see if Parsec ideas are easily ported.
16:11:52 <stepcut> hrm
16:11:55 <shapr> I have a copy, but I haven't gotten around to playing with it.
16:12:22 <stepcut> I have been trying to use parsec to parsing things like .ini files, and it is not very graceful
16:12:32 <Philippa_> no? Where's the issue?
16:12:37 <Igloo> Aaarggghh!
16:12:43 <stepcut> because parsing .ini files requires looking ahead more than one token
16:12:43 <shapr> Igloo: you screamt?
16:12:57 <Philippa_> so you get a lot of try, yeah
16:13:34 <Philippa_> though I could've sworn the .ini format I'm familiar with doesn't really need that?
16:13:39 <Igloo> ghc6 depends on libreadline4-dev. I want to build one with libreadline5-dev, but I can't install the two simultaneously.
16:13:49 <shapr> oh that *sucks*
16:14:46 <Oejet> shapr: Thanks.
16:16:22 <Oejet> Igloo: Not even with --prefix?
16:16:49 <Igloo> Oejet: Need to satisfy deps for the Debian autiobuilders
16:17:17 <Oejet> I see.
16:27:46 <neqm> I wonder how one can print a list of chars givin a string
16:30:30 <heatsink> neqm: what would the output look like?
16:31:21 <neqm> ['a' , 'b', 'c'] for "abc"
16:37:12 <heatsink> You can write some code to do that
16:47:58 <neqm> heatsink: glad to know
16:52:13 <boegel> I'm restyling my website, any comments ?: http://studwww.ugent.be/~kehoste/website2/
16:52:36 <boegel> especially the colors, I don't know if they'll work for everone (different screen settings)
16:52:38 <shrimpx> too welcoming
16:52:55 <boegel> shrimpx: that's just to see what happens with scrolling and stuff :)
16:53:34 <Igloo> Either you've done something hideous scrollbarwise or galeon is broken
16:53:43 <shrimpx> the latter
16:53:48 <shrimpx> :)
16:54:12 <shrimpx> he probly intended it the way it is
16:54:31 <Igloo> I'm dubious about E = mc too
16:54:53 <boegel> Igloo: in the welcome page ?
16:55:03 <Igloo> Yup
16:55:18 <boegel> Igloo: I can't find how to typeset 'square' :)
16:55:31 <boegel> Igloo: you can't scroll there?
16:55:35 <boegel> or what ?
16:55:47 <Igloo> There's no scrollbar for the whole page, but I can scroll it with the mouse wheel
16:56:00 <boegel> I want the lighter gray part to be of fixed size
16:56:07 <boegel> ow :s
16:56:16 <boegel> that pretty damn stupid :)
16:56:18 <Igloo> I'm not entirely sure why I should be able to scroll it with the mousewheel, which does hint at it being galeon being broken
16:56:36 <shrimpx> ya i get a scrollbar
16:56:42 <boegel> Igloo: I've hidden the overflow of the darker gray area idd
16:56:53 <boegel> but I'm not sure why there is any overflow :s
16:57:38 <boegel> Igloo: removed the hidden thingie, I'll try and solve the overflow part
16:58:16 * Igloo also sees the inner scrollbar half in the light grey and half in the dark
16:58:43 <Igloo> Anyway, I'm gonna disappear before this gets nasty and people start pulling out their validators  :-)
16:59:19 <boegel> Igloo: hmm
16:59:33 <boegel> firefox does show it like it's supposed try
16:59:51 <boegel> and I'll try and make it valid, I want it to work in all types of browsers (even IE :p)
17:00:26 <heatsink> boegel: one square of the page will not render.
17:00:58 <heatsink> And i see a box full of the word welcome! in light green
17:02:13 <boegel> heatsink: one square will not render ? what do you mean?
17:02:45 <boegel> heatsink: no menu ?
17:02:52 <heatsink> whatever was there before remains there when I switch to the window
17:02:57 <heatsink> I see a menu
17:03:42 <heatsink> I see menubox and content
17:03:55 <boegel> heatsink: I would be very surprised if the not rendering part is my fault :)
17:04:10 <heatsink> there's another box that doesn't render, and it covers the right side of bodydiv
17:04:27 <boegel> heatsink: which browser ?
17:04:33 <heatsink> konqueror
17:04:44 <heatsink> I think it's because you moved the content div to a funny position
17:05:04 <boegel> can you show me a screenshot ?
17:06:32 <heatsink> yes
17:12:12 <boegel> heatsink: woudln't that be konqueror's fault ?
17:12:35 <boegel> I think everything I do in css is valid, even though I haven't checked i
17:12:51 <boegel> I just use 'position:relative' a few times
17:13:10 <heatsink> I don't understand why konqueror is not drawing thebox
17:13:19 <boegel> oh, and btw, it's and iframe, that box
17:13:25 <boegel> maybe that's the problem ?
17:13:36 <boegel> is that a standard thing, iframes ?
17:13:49 <heatsink> oh, that might be it.  Iframes are standard but not seen very often
17:14:00 <heatsink> and I've never seen an iframe offset with position:relative before
17:14:07 <heatsink> are you sure you want that?
17:14:52 <heatsink> maybe we should talk in #web
17:19:31 <boegel> heatsink: -> #web
17:36:52 <shapr> @yow !
17:36:53 <lambdabot> If I have enough money to buy 5,000 CANS of NOODLE-RONI, can I get a
17:36:53 <lambdabot>  VAT of MARSHMALLOW FLUFF free??
17:37:16 <boegel> shapr: g'night
17:37:21 <shapr> g'night
17:37:36 <boegel> heatsink: thanks for the #web tip
17:38:29 <boegel> bye #haskell !
17:51:50 <shapr> dang, what does offentich mean?
17:51:55 <shapr> um offentlich
18:15:27 <CosmicRay> MegaMonad: good evening
18:15:28 <MegaMonad> CosmicRay: Tuomov: my installed packages for buildds elsewhere, like experimental if that was in the evening at the command set of word pairs?
18:16:21 <stepcut> shapr: http://tlb.org/eunicycle.html 
18:16:30 <stepcut> (from slashdot.org)
18:17:07 <shapr> seen it, it's great.
18:17:11 <stepcut> heh
18:17:52 <shapr> Trevor does lotsa cool stuff.
18:25:33 * shapr throws lambdas at CosmicRay 
18:25:39 <CosmicRay> yow!
18:25:54 <CosmicRay> they're sharp!
18:25:59 <shapr> pointy little edges
18:26:21 <shapr> I really hope ICFP happens it .au one year, and they give out lambda boomerangs.
18:26:27 <CosmicRay> haha
18:28:13 <CosmicRay> hmmph.  why can't there be any fp events on this continent.
18:28:32 <shapr> You get lots.
18:28:59 <CosmicRay> not the ones that fun people go to :-)
18:29:40 <shapr> Well, you get Wadler, Pierce, and all the cool ogi.edu folks.
18:29:54 <shapr> The whole Portland area is rife with FPers.
18:30:00 <CosmicRay> hmm.
18:30:13 * wli hides
18:30:59 <CosmicRay> I don't think I know ani ogi.edu folks
18:31:17 <wli> Wadler and Pierce are in pdx?
18:32:06 <shapr> Galois is part of the Portland crowd.
18:32:06 <wli> Galois Connections, not EfNet #math Galois
18:32:06 <shapr> right
18:32:06 <CosmicRay> is that where syntax works?
18:32:06 <shapr> Pierce is in Pennsylvania
18:32:11 <shapr> I forget where Wadler is these days.
18:32:32 <shapr> Oh wait, he went back to academia... Nottingham?
18:32:53 <shapr> Maybe Glasgow?
18:33:02 * shapr is too tired to ask google.
18:34:42 <shapr> CosmicRay: I may give one or more talks at EuroPython this year. I do think a FoPNP talk would be accepted if you submitted it.
18:35:13 <CosmicRay> frankly, I'm rather burned out on python for now....
18:35:20 <shapr> Yeah, I can understand that.
18:35:32 <CosmicRay> and I'd rather spend my limited time in europe seeing europe than doing python stuff
18:35:39 <CosmicRay> shapr: what are you going to talk about?
18:35:41 <shapr> I was thinking of giving a vicious 'syntax complexity for beginners' talk.
18:35:53 <shapr> Basically claming that the syntax of Python 1.5 was the best yet.
18:35:58 <CosmicRay> shapr: that sounds like a perl talk :-)
18:35:58 <CosmicRay> ah
18:36:29 <CosmicRay> but eurohaskell sounds fun.
18:36:37 <shapr> It'll be a blast.
18:36:39 <CosmicRay> I like the geekier conferences.
18:36:49 <CosmicRay> geekier get-togethers too :-)
18:36:52 <shapr> Lemmih is planning to be there with unicycle.
18:37:02 <Lemmih> Yay.
18:37:04 * CosmicRay will bring bandages for himself if he goes.
18:37:05 <shapr> So, at least three unicycling haskellers.
18:37:19 <shapr> If you count Ulf Karlsson as a Haskeller.
18:37:27 <CosmicRay> terah is not so sure what she'd do for three days though
18:37:37 <shapr> Yeah
18:37:55 <CosmicRay> so we'll see
18:37:58 <shapr> Bea did Python/Plone sprints last time while I did EuroHaskell.
18:38:09 <CosmicRay> sprints?
18:38:13 <CosmicRay> as in, running?
18:38:15 <shapr> nah
18:38:33 <shapr> A sprint is like a scheduled goal-oriented clump of pair programming.
18:39:03 <shapr> It usually happens before and after conferences, where you get a dream team together and really make something happen.
18:39:23 <CosmicRay> ah
18:39:23 <shapr> I hope EuroHaskell will be sprints with tutorials on the side.
18:39:28 <shapr> sprints are *great*
18:39:35 <CosmicRay> what sort of sprints do you think might happen?
18:39:55 <shapr> Pair programming teaches powerful approaches and habits faster than anything else.
18:40:11 <shapr> Whatever the attendees want.
18:40:30 <CosmicRay> that could be excellent.
18:40:40 <shapr> What do you want to sprint about?
18:41:06 <CosmicRay> hmm.
18:41:21 <CosmicRay> I am slow at monads and know nothing of arrows.
18:41:23 <shapr> Cabal? Yi?
18:41:40 <CosmicRay> a group like that could do great things with cabal.
18:42:08 <shapr> Or hack IPv6 support into GHC
18:42:13 <CosmicRay> ah.
18:42:16 <CosmicRay> excellent.
18:42:35 <CosmicRay> that is almost a perfect task for a sprint.
18:42:38 <shapr> or if Wolfgang Thaller were present, get dynamic linking working in i386
18:42:46 <CosmicRay> I don't think there is any one person that knows how to completely do that
18:42:50 <CosmicRay> but there are people that know the pieces.
18:43:42 <shapr> We just a pick a goal and get a bunch of people to work towards it.
18:44:00 <shapr> It works beautifully.
18:44:05 <CosmicRay> I oculd do a tutorial on packaging haskell stuff for debian
18:44:08 <shapr> yeah!
18:44:23 <shapr> Maybe cabal will be far enough that only Cabal will be necessary.
18:44:41 <CosmicRay> I told my wife she could take pictures and get stories to laugh at me with later :-)
18:44:50 <CosmicRay> hm.
18:44:53 <shapr> :-)
18:45:33 <CosmicRay> probably it is not really desirable to make cabal generate all of the debian/ files itself
18:45:50 <CosmicRay> it would remove some flexibility when there are non-haskell components involved, or other special situations, I suspect
18:46:04 * shapr doesn't know
18:46:07 <CosmicRay> however it could eliminate the need for haskell-devscripts and some other things
18:46:14 <CosmicRay> btw did you find those links useful?
18:46:49 <shapr> I haven't read them yet...
18:47:04 <shapr> This site has to be up and working by Monday morning.
18:47:11 <CosmicRay> ah
18:47:17 <shapr> It's getting closer.
18:48:08 <shapr> I think I'll be done in about fifteen minutes, but then the clients have to see if it fits what they requested.
18:49:06 * CosmicRay is looking at Yi.  It says there are vim and emacs frontends, but I can't find any referenfces to either in the source tre
18:49:06 <CosmicRay> e
18:49:24 <shapr> One of my slowdowns at the moment is getting the latest woody deb for darcs. Is packages.d.o down?
18:49:41 <shapr> The emacs front-end is my responsibility, I think :-)
18:49:52 <CosmicRay> hmm.  it appears to be.
18:49:59 <CosmicRay> however there wouldn't be woody debs for it there anyway
18:50:03 <shapr> The only real code for that atm is something stepcut wrote.
18:50:11 <CosmicRay> you'd have to look at a non-official repo
18:50:13 <araujo> Hello.
18:50:17 <shapr> y0 araujo 
18:50:18 <CosmicRay> I think there is a backports.org
18:50:19 <shapr> sarge debs?
18:50:28 <CosmicRay> sarge debs you could find
18:50:35 <araujo> Greeting shapr , CosmicRay 
18:50:39 <CosmicRay> try the repo directly, http://ftp.debian.org/debian/pool/main/d/darcs
18:50:47 <araujo> How your haskell hacking goes?
18:50:51 <shapr> I've been getting SuSE 9.0 darcs binaries from some debian dist.
18:51:38 <shapr> araujo: slowly, I need to know more about patch theory. How's yours?
18:51:41 <CosmicRay> shapr: packages.debian.org is down this weekend due to a scheduled power outage at hp
18:51:46 <shapr> oh
18:51:47 <shapr> ok
18:51:55 <CosmicRay> but use that url I gave ya
18:52:35 <shapr> seems to work
18:52:51 <araujo> shapr, next week vacations, so, im gonna start having fun again :-)
18:52:57 <shapr> cool!
18:53:38 <araujo> Been so busy with the uni, that ive not had any time for doing something seriously with haskell, but things always change.
18:53:54 <shapr> ar x *.deb ; tar xzf data.tar.gz
18:54:00 * shapr boing cheerfully
18:54:36 <shapr> I can take 'em apart, now I just need to know how to make 'me!
18:54:57 <shapr> My typo rate is exceeding the "you really need sleep" level.
18:56:49 <Spark> toilets should be larger
18:57:01 <Spark> specifically, they should be large enough to allow the flushing of an entire toilet
18:57:04 <Spark> erm
18:57:12 <Spark> :(
18:57:26 <Spark> s/entire toilet/entire computer/
18:58:21 <CosmicRay> heh
18:58:35 <CosmicRay> shapr: do you have a debian box?
18:58:41 <shapr> several.
18:58:48 <CosmicRay> shapr: apt-get install alien
18:59:00 <CosmicRay> shapr: it will convert between debs, rpms, tgz, and slp packages
18:59:18 <CosmicRay> oh also solaris pkg and lsb stuffs
18:59:21 <shapr> I don't have any sarge boxes, can alien convert any random .deb file into .tgz ?
18:59:27 <CosmicRay> yes
18:59:44 <CosmicRay> woody or sid alien should be just fine
18:59:47 <shapr> neat
18:59:51 <CosmicRay> also install fakeroot if you don't want to run it as root.
19:00:07 <CosmicRay> but if you're going to suse, might as well convert it to an rpm
19:05:37 <CosmicRay> shapr: http://changelog.complete.org/node/222
19:06:12 <shapr> Python binding already exists.
19:06:17 <CosmicRay> oh?
19:06:34 <CosmicRay> god a url?
19:07:26 <CosmicRay> s/god/got/
19:07:40 <CosmicRay> that would be immensely awesome.
19:08:00 <shapr> just a moment
19:09:08 <shapr> http://www.scannedinavian.org/~shae/phi.tar.gz
19:10:16 <CosmicRay> sweeeet.
19:10:28 <shapr> It's not finished, but it sure is cool.
19:10:45 <CosmicRay> who wrote this?
19:10:49 <shapr> skew
19:10:52 <shapr> Brandon ...
19:11:00 <CosmicRay> I don't think I know him
19:11:23 <CosmicRay> do you know where the darcs repo is?
19:12:03 <shapr> his desktop box, http://page-208.caltech.edu/phi
19:12:19 <CosmicRay> can that be cconsidered public knowledge?
19:12:35 <CosmicRay> hmmph, it's down.  oh well
19:12:39 <shapr> sure, since the webserver is rarely up unless someone asks him for a copy
19:12:43 <CosmicRay> heh
19:13:00 <shapr> I haven't seen him on #haskell lately.
19:14:44 <shapr> ah yes, Brandom Moore
19:15:30 <shapr> @wiki BrandonMoore
19:15:31 <lambdabot> http://www.haskell.org/hawiki/BrandonMoore
19:16:18 <CosmicRay> oh yes, that page makes an interesting point about python.
19:16:28 <CosmicRay> the jvm bridge could bring things through to jython.
19:17:36 <CosmicRay> this PHI is very slick.
19:17:51 <CosmicRay> I am not terribly familiar with the Ptyhon/C api but this looks very nice from what I do know of it.
19:17:57 <CosmicRay> I feel this urge to finish it.
19:18:11 <CosmicRay> shapr: you always seem to ruin my weekends by showing me cool stuff on fridays :-)
19:18:11 <shapr> :-)
19:18:15 * shapr snickers
19:18:25 <shapr> I should do a coolstuff dump sometime.
19:18:28 <shapr> In my blog maybe.
19:18:36 <shapr> You should see what it's like to live in my head.
19:18:37 <CosmicRay> you should
19:18:42 <CosmicRay> heh
19:19:33 <CosmicRay> you know, I've just decided why the eu parliament works.
19:19:41 <shapr> ?
19:19:44 <shapr> Distract 'em to death?
19:19:45 <CosmicRay> politicians are at their least harmful when they can't make anything happen.
19:19:49 <shapr> ah yes
19:19:55 <shapr> too bad they still cost money then.
19:19:56 <CosmicRay> here in the us, we have the fatal flaw that occasionally they can pass laws.
19:20:18 <CosmicRay> the eu seems to have almost perfected getting rid of that problem.
19:21:08 <CosmicRay> when one country can twice defeat a software patent proposal working its way through parliament's committee on fisheries.
19:21:11 <CosmicRay> hats off to them.
19:22:38 <CosmicRay> I still don't understand why it was in the ag/fisheries division, but hey.
19:23:44 <shapr> http://lwn.net/Articles/121169/
19:25:33 <shapr> Sad to say, Sweden is firmly in the pocket of Big Business.
19:26:11 <shapr> We're cancelling our ComputerSweden subscription because they've obviously either amateur journalists or a Microsoft mouthpiece
19:27:10 <CosmicRay> there's a lot of that crap here
19:27:19 <CosmicRay> I canceled my pc magazine subscription 10 years ago for that reason
19:30:21 <shapr> I get pretty incensed sometimes.
19:31:06 <shapr> Today's front page article implied that Linux formerly had a small chance to be useful as a desktop OS, but IBM's recent difficulties with that completely shattered that chance.
19:31:32 <CosmicRay> argh.,
19:31:56 <shapr> So many false assumptions tied into that article it's hard to know where to start.
19:32:12 <shapr> I'm going to start by writing them an email saying why I'm cancelling the subscription.
19:32:57 <CosmicRay> excellent.
19:37:43 * CosmicRay heads to sleep to.
19:37:45 <CosmicRay> cyall tomorrow
20:02:18 <Lemmih> Woot. Hacanon can generate a ClanLib binding (2195 lines of Haskell and 1659 lines of C++ unmangling code) in 10 secs.
20:05:13 <Lemmih> 5am. Time to unicycle!
20:05:16 <shapr> w00
20:09:59 <tintin> hmmz what's it with Haskell and Unicycling .... 
20:10:08 <tintin> there seems to be a strange affinity ...
20:10:24 <shapr> Simplicity and Elegance?
20:10:35 <monochrom> donuts
20:10:42 <shapr> Yes, like donuts!
20:10:50 <monochrom> the people here like donuts.  a unicycle is a donut.
20:11:01 <shapr> That's profound.
20:11:42 * tintin wonder's if not knowing about donuts and unicycles puts him out of contention in #haskell ....
20:12:06 <shapr> I'd be happy to teach you to unicycle at EuroHaskell.
20:13:59 <tintin> tnx  :) 
20:33:14 * Lemmih is annoyed by his legs inability to do a unispin.
22:24:59 <tintin> Lemmih: what's a unispin you spin the unicylce and you stay in the same position ?
22:33:39 <Lemmih> You jump from the unicycle, spin it 180 degrees under you and land on it again.
22:34:35 <tintin> hmmz and you hav your feet in the air ?
22:34:39 <tintin> both you feet ?
22:37:06 <tintin> a unicycle is perfectly legal in high traffic areas ?
22:44:46 <Lemmih> tintin: No, at least not in Denmark.
22:45:09 <Lemmih> tintin: You flip your feets out to the sides so you can turn the wheel around.
22:45:50 <Lemmih> s/turn/spin/
