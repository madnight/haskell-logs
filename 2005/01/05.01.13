00:02:07 <ali> morning. Absolute newbie. May I reverse the order of the arguments passed to zipWith please?
00:02:37 <boegel> ali, depends:)
00:03:03 <ali> may I explain the situation?
00:03:08 <boegel> sure
00:03:32 <boegel> please do :D
00:03:46 <ali> ok, it may take me a while to compose it :)
00:04:31 <Itkovian> take yr time
00:07:03 <ali> I have a function that is argument-less 'free point?' basically like    let f = zipWith (**) [1..] , now my result is when passing [a,b,c] is [1**a, 2**b, 3**c], how can I make it [a**1, b**2, c**3] (I have done it using a lambda for the zipWith function, but can I do it using ** and reversing the arguments somehow?)
00:08:33 <ali> I am a functional programming newbie as well as a Haskell newbie :)
00:11:49 <adept> ali: look up 'flip' function.
00:11:52 <adept> @type flip
00:11:54 <lambdabot> flip :: forall c a b. (a -> b -> c) -> b -> a -> c
00:11:58 <adept> here
00:12:08 <Itkovian> there ya go!
00:12:40 <ali> ok, thanks :) I still don't understand (a -> b -> c), but I will try to find an example
00:12:55 <adept> @type (+1)
00:12:57 <lambdabot> (+1) :: forall a. (Num a) => a -> a
00:13:06 <adept> @type flip (+1)
00:13:08 <lambdabot> flip (+1) :: forall b c. (Num (b -> c)) => b -> (b -> c) -> c
00:13:19 <adept> damn. not what I meant.
00:13:21 <ali> eek!
00:14:58 <adept> @type flip (zipWith (**)) [1..]
00:14:59 <lambdabot> flip (zipWith (**)) [1..] :: forall b.
00:14:59 <lambdabot> 			     (Floating b, Enum b) =>
00:14:59 <lambdabot> 			     [b] -> [b]
00:15:11 <ali> ah, It didn't even need an example, it works as expected. Thanks guys :)
00:15:29 <ali> adept: yes, I used exactly that
00:16:09 <ali> actually no, I used  zipWith (flip (**)) [1..]
00:16:20 <ali> but I guess it amounts to the same thing :)
00:16:49 <ali> in fact my version does much more flipping
00:21:03 <kosmikus> edwin2: congratulations
00:42:21 <Itkovian> I've installed packages for my system-wide ghc (6.2), now I'm trying to get them to work with ghc-6.3 too ...
00:42:55 <Itkovian> Any easy way to do this, as the config files seem to be in a wrong format :-(
00:43:00 <Itkovian> ?
00:43:45 <shapr> ghc 6.3 uses Cabal
00:44:25 <Itkovian> ic
00:45:19 <Itkovian> ahem ... and the correct way to do it is then ...?
00:47:09 <kosmikus> good question, afaik there isn't any besides writing a new package description yourself
00:47:28 <kosmikus> btw, is the state of ghc-pkg-6.3 already documented somewhere?
00:49:59 <musasabi> morning
00:50:30 <musasabi> currently cabal is in quite a flux.
01:02:57 <Itkovian> hmmm ... 
01:03:16 <Itkovian> Anybody here has config files for hsplugins?
01:03:27 <Itkovian> u can dcc them to me ...
01:03:30 <Itkovian> :-)
01:13:49 <dons> I don't know of anyone writing a hs-plugins cabal conf for ghc6.3
01:14:04 <dons> I should do that soon, now that Cabal is official
01:14:47 <Itkovian> well, I'm trying to get yi compiled ...
01:14:57 <Itkovian> with ghc 6.2 it fails miserably
01:15:06 <dons> really? how so?
01:15:12 <dons> I test only on 6.2.2
01:15:14 <Itkovian> same with erm musasabi's (?) IRC client
01:15:45 <musasabi> Itkovian: hmm?
01:15:54 <dons> what's the yi error?
01:16:10 <Itkovian> Boot.hs:171: Variable not in scope: `makeAll'
01:16:18 <musasabi> (do you mean the can we do something in <100 lines that resembles irc client thing)
01:16:19 <dons> you've got an old version of hs-plugins
01:16:28 <Itkovian> musasabi: yes.
01:16:32 <Itkovian> dons: ah.
01:16:36 <dons> makeAll was added in November
01:16:37 <Itkovian> I'll check that
01:16:41 <Itkovian> a sec.
01:16:53 <dons> grab a nightly snapshot. 200501*
01:17:10 <Itkovian> hmm, I'd rather use the gentoo package ...
01:17:15 <musasabi> Itkovian: what version of ghc are you using?
01:17:18 <Itkovian> Maybe an ebuild needs to be written
01:17:21 <Itkovian> 6.2
01:17:32 <Itkovian> somebody suggested I'd need 6.3
01:17:37 <Itkovian> a few eeks ago, iirc
01:17:41 <dons> unfortunately, gentoo doesn't distribute cvs and darcs versions of thingies
01:17:44 <Itkovian> s/eeks/weeks/
01:17:54 <kosmikus> well, I have a ghc-cvs ebuild
01:17:58 <Itkovian> aha!
01:18:04 <kosmikus> but no hs-plugins-cvs one
01:18:12 <Itkovian> I'm very interested in the ghc-cvs one
01:18:31 <musasabi> well 6.3 versions are all incompatible in respect to hs-fltk ;) (there are cabal changes and then there was a bug in the compiler which means that december - jan 5? builds do not work)
01:18:40 <Itkovian> grmbl.
01:19:12 <musasabi> I currently use it with some cvs snapshots but there is no real fix until 6.4 comes out.
01:19:49 <musasabi> Because if I would change things to work with snapshot-yymmdd, it would just break things for the snapshots wich currently work.
01:20:59 <kosmikus> Itkovian: try dev.gentoo.org/~kosmikus/ghc-cvs-6.3.ebuild
01:21:13 <dons> you could just build: make way=static, for yi. that avoids any need for hs-plugins
01:21:18 <kosmikus> but be warned, the ebuild is neither official, nor does it include all the stuff that is in the current official ebuilds
01:21:28 <dons> that's a good idea if you just want to see what it is like
01:21:34 <kosmikus> I've only updated it so that it builds on my machine
01:23:01 <Itkovian> kosmikus: thx. I'll try it asap.
01:23:06 <musasabi> hmm.. pulling yet another cabal version (this one from darcs) and seing that things work with it.
01:28:14 <wilx> Bah.
01:28:41 <wilx> I have looked on the GADTs things.
01:29:12 <wilx> At first sight it looks like a fancy way to construct types.
01:29:34 <wilx> Instead of function they use type constructors.
01:29:46 <wilx> Is there something htat I am missing?
01:30:45 <musasabi> hmm the new standalone cabal library makes building setup to fail with missing symbols references inside the library..
01:30:59 <musasabi> Maybe I should just get yet an another cvs-snapshot.
01:31:34 <musasabi> wilx: types inferred from the constructors by matching is the best thing.
01:32:41 <musasabi> data Expr a where If :: Expr Bool -> Expr a -> Expr a
01:33:01 <musasabi> eval :: Expr a -> a
01:33:32 <musasabi> eval (If c a b) = if eval c then eval a else eval b
01:33:54 <musasabi> .
01:36:36 <kosmikus> wilx: yes, you are, because you get improved destructors (i.e., improved pattern matching) too, and there's no way you'd get that with functions only
01:37:31 <musasabi> .
01:37:42 <wilx> Hm.
02:26:09 * shapr bounces cheerfully
02:48:56 <Lemmih> Yay. Cabalized wxHaskell.
02:50:10 <Itkovian> how do I get the registered packages in ~/.ghc-packages ?
02:53:45 <Itkovian> nevermind
03:11:11 <foldl> hi there
03:11:13 <foldl> anyone here?
03:11:26 <Itkovian> a lot of folks are
03:11:31 <foldl> lol
03:11:39 <foldl> i need help with some code...
03:11:48 <edwinb> hello foldl, how's the voting?
03:11:55 <foldl> oh man....
03:12:00 <foldl> even worst
03:12:09 <foldl> i cant make things work
03:12:25 <foldl> i have the entire scheme in my head but i cant make things connect
03:12:28 <foldl> always error
03:13:15 <foldl> can you just help me in something realy simple?
03:13:16 <musasabi> try to start from small pieces
03:13:22 <foldl> im trying
03:13:25 <edwinb> Perhaps an obvious suggestion, but have you tried writing the scheme down on paper rather than code?
03:13:32 <foldl> yup
03:13:46 <foldl> but when i turn it into code it doesnt work.....
03:13:54 <musasabi> well you can allways ask..
03:14:06 <edwinb> have you got a small bit which doesn't work then maybe we can help?
03:14:14 <foldl> well
03:15:41 <foldl> im trying to transform this: ["1 2 3"," 4 5 6","7 8 9"] for example into this: ["147","258","369"]
03:15:50 <Itkovian> tr?
03:15:59 <Itkovian> ah no oops
03:16:18 <Lemmih> foldl: Checkout filter and isDigit.
03:16:38 <foldl> ??
03:16:57 <Lemmih> @type filter
03:16:58 <lambdabot> filter :: forall a. (a -> Bool) -> [a] -> [a]
03:17:11 <musasabi> map words + fold to get a ziplike effect.
03:18:08 <foldl> i made a function that sucessfully turnd ["1 2 3"," 4 5 6","7 8 9"] in "147"...but i cant make it for the rest of the list
03:18:13 <Lemmih> Oh. Doh. Misread the question. /-:
03:19:07 <musasabi> foldl: transpose (map words yourlist)
03:19:14 <edwinb> ah, that suggests there's a problem in your recursive case...
03:19:46 <foldl> how can i solve it?
03:20:06 <foldl> how can i make a function that aplies the one that works to the rest of the list?
03:20:20 <foldl> i tried but it gives me error
03:20:30 <musasabi> foldl: ref the solution.
03:20:36 <edwinb> What did you try?
03:21:36 <foldl> so many things....
03:21:46 <foldl> first something like this:
03:22:16 <foldl> (fElem is the one that works and applyElem is the other one)
03:22:48 <foldl> applyElem (x:xs) = fElem x : applyElem xs
03:22:53 <foldl> it made sense to me....
03:23:23 <musasabi> foldl: transpose (map words ["1 2 3"," 4 5 6","7 8 9"])   =>  [["1","4","7"],["2","5","8"],["3","5","9"]]
03:23:48 <foldl> does that work?
03:24:17 <musasabi> and map concat to the results ["147","258","359"] if that is what you want.
03:24:28 <foldl> let me try
03:27:06 <foldl> transpose is a function?
03:28:17 <Lemmih> @type Data.List.transpose
03:28:19 <lambdabot> Data.List.transpose :: forall a. [[a]] -> [[a]]
03:29:24 <foldl> it doesnt recognize transpose
03:29:42 <musasabi> foldl: import Data.List
03:30:39 <foldl> unable to open file....
03:31:06 <Lemmih> foldl: ':l Data.List' if you're using Hugs.
03:31:54 <foldl> ERROR "Data.List" - Unable to open file "Data.List"  
03:35:22 <foldl> ok, nevermind
03:35:29 <foldl> ill keep trying
03:35:37 <foldl> thx for the help guys
03:35:56 <musasabi> foldl: ":l Data.List"
03:36:09 <foldl> it doesnt work
03:36:29 <foldl> ERROR "Data.List" - Unable to open file "Data.List"  
03:37:00 <musasabi> foldl: ":l List" ?
03:37:14 <musasabi> (both work with my hugs version)
03:37:21 <foldl> list works
03:39:02 <foldl> omg
03:39:05 <foldl> it works now
03:39:36 <foldl> ive been here for 10 hours tring to do this....and transpose(map word [mylist]) is the answer
03:39:46 <foldl> im gonna kill mysel
03:40:12 <foldl> can you just explain what transpose does? besides solving y problems?
03:42:48 <musasabi> foldl: transpose transposes a matrix represented in list format.
03:43:11 <musasabi> foldl: that is it switches the rows and columns with each other.
03:43:22 <foldl> oh
03:43:25 <foldl> nice thx
03:45:13 <joao> Good morning
03:45:17 <foldl> Bons dias
03:45:40 <joao> :-)
03:45:47 <foldl> :)
03:46:03 <foldl> Portugues certo?
03:46:39 <joao> Yes, but don't speak portuguese in the channel, please..
03:50:33 <kosmikus> which -package-name flag to I have to pass to ghc-6.3 when building the library; do I have to include the package version?
03:51:29 <Lemmih> kosmikus: Talking about wxHaskell?
03:53:40 <kosmikus> kosmikus: no
03:53:46 <kosmikus> Lemmih, even
03:54:10 <kosmikus> kosmikus: no? that's interesting tell me more ...
03:54:17 <kosmikus> kosmikus: never mind, I was talking to myself
03:57:00 <kosmikus> I'm building Generic Haskell with ghc-6.3, and I keep getting linking errors (i.e., symbol blah not found) when running programs against the package
04:07:05 <Matt-W> Is the book 'Purely Functional Data Structures' any good?
04:07:56 <mflux> apparently slashdot had a book review on that, http://slashdot.org/article.pl?sid=04/02/19/2257203
04:08:23 <Matt-W> Yes, but does one trust Slashdot's book reviews?
04:08:35 <mflux> that's a valid point
04:08:50 <mflux> propably depends on the text
04:09:39 <Matt-W> And that review barely mentions the book at all
04:09:47 <Matt-W> it spends more time evangelising functional programming
04:10:12 <mflux> yeah
04:10:20 <Matt-W> I think I'll get the book
04:10:30 <Matt-W> It's not like it's one of those sixty quid monsters
04:10:50 <mflux> there are some other reviews, or atleast one, on that book too
04:11:40 <mflux> and amazon has some browsing/searching on that
04:12:17 <Matt-W> mmm
04:12:19 <Matt-W> I'll get it
04:12:29 <Matt-W> I need to make my bookshelf look more intelligent
04:12:47 <samc_> whats in it that is not in his thesis?
04:13:32 <Matt-W> done!
04:13:37 <Matt-W> I love Amazon
04:13:41 <Matt-W> but they're also very dangerous
04:13:47 <mflux> well, judging from the contents, get it atleast if you don't have other books on data structures ;)
04:15:05 <samc_> I can't find a copy of "the algebra of programming' that will ship here :(
04:15:19 <Matt-W> I don't have any books on data structures
04:15:24 <Matt-W> just my lecture notes from uni
04:15:31 <Matt-W> which were about implementing the things in Java :-(
04:20:29 <musasabi> btw update hs-fltk to work with the latest ghc-cvs
04:23:09 <musasabi> +d
04:30:43 <Itkovian> Matt-W: I can recommend the book.
04:39:39 <Itkovian> allright! I got this yi thing to compile.
04:39:46 <Itkovian> neat.
04:41:20 <Matt-W> Itkovian: great
04:45:00 <Itkovian> erm: hirc_fltk.hs:3: Module `FLTK' does not export `message' ?
05:15:48 <foldl> what should i do when i get Program error: {head []}?
05:15:54 <foldl> any ideas?
05:16:47 <kosmikus> you look for the positions in the program where you call the "head" function and think if you're really sure that you don't apply head to the empty list at this position
05:17:16 <foldl> ???
05:17:31 <foldl> but i need to define what head [] is
05:17:44 <andersca> head [] = undefined
05:17:57 <edwinb> is your program visible on the web somewhere?
05:17:58 <andersca> or head [] = error "Head on an empty list"
05:18:12 <foldl> no...i can put it visible
05:18:36 <edwinb> it would just be easier to suggest helpful things if we saw it, I think!
05:19:13 <foldl> http://www.haskell.org/hawiki/HaskellIrcPastePage#preview
05:19:47 <Darius> foldl: If you were using GHC you could recompile your code with profiling and run it with options +RTS -xc -RTS and it would give you a stack trace.
05:20:24 <Darius> @wiki TipsAndTricks has a bit more information in the Debugging section.
05:20:25 <lambdabot> http://www.haskell.org/hawiki/TipsAndTricks has a bit more information in
05:20:25 <lambdabot> the Debugging section.
05:20:48 <foldl> thx
05:22:34 <edwinb> are you sure that "dir" will always be non-empty in "incrementa_aux"?
05:22:44 <foldl> wait
05:23:45 <foldl> yes
05:25:26 <bourbaki> moin
05:25:37 <Itkovian> noon
05:27:01 <edwinb> Couldn't "n" potentially be 0 there? In which case dir will be empty...
06:33:53 <MegaMonad> Kowey - welcome to languages that don't quite jump that far... But i'll show you how to change my mind. Pi^2/e^3 columns.
07:18:24 * Maddas blinks
07:18:51 <Maddas> MegaMonad: Can you form coherent statements yet?
07:18:51 <MegaMonad> Maddas: Marvin-- : oh. I for a while some code and show that it would be marvin taking advantage of having it just me, or you form coherent statements yet?
07:19:11 <Maddas> Not quite yet :-)
09:42:28 <Lemmih> StaticText can't be wrapped?
09:53:21 <desrt> :q
09:53:26 <desrt> erp
10:29:03 <Lemmih> shapr: Yo. Wanna host yet another Haskell project of mine?
10:29:43 <Lunar^> What would happen to the Haskell community if sharp was hit by a bus? :)
10:29:53 <Lunar^> s/sharp/shapr/
10:34:01 <desrt> much sadness
10:35:18 <Lunar^> sure
10:41:21 <joao> Lemmih, where are your other projects? :)
10:41:44 <orpita20> hii
10:41:50 <orpita20> joao
10:42:54 <Lemmih> joao: Shapr is hosting some of my projects at http://www.ScannedInAvian.org/repos/
10:51:58 <bourbaki> how can i write to a file with haskell?
10:52:38 <joao> @type writeFile
10:52:39 <lambdabot> writeFile :: FilePath -> String -> IO ()
10:52:39 <Lemmih> @type writeFile
10:52:40 <lambdabot> writeFile :: FilePath -> String -> IO ()
10:52:47 <joao> Lemmih, I learn fast :)
10:52:47 <Lemmih> joao: (:
10:54:16 <bourbaki> will that always append to the file?
10:54:30 <waltz> or will that truncate the file?
10:54:38 <Lemmih> @type appendFile
10:54:39 <lambdabot> appendFile :: FilePath -> String -> IO ()
10:55:31 <Lemmih> lambdabot: It's too bad I don't have time to finish your @doc command /-:
10:55:31 <lambdabot> Sorry, I'm not a very smart bot yet, try "lambdabot: @listcommands"
10:56:11 <waltz> heh
10:56:43 <waltz> lambdabot, you've got bad grammatical skillz.
11:02:29 <CosmicRay> MegaMonad: do you have grammatical skillz?
11:02:30 <MegaMonad> CosmicRay: Well i all the way of linking it to me, do you have grammatical skillz?
11:03:32 <bourbaki> @type readFile
11:03:33 <lambdabot> readFile :: FilePath -> IO String
12:46:09 <Oejet> musasabi: Any progress on the threadsafe hash table?
12:55:38 <musasabi> http://youzen.b2.fi/~musasabi/ht.hs is very much work in progress.
12:56:01 <musasabi> a TVar (FiniteMap k v) will beat it :-(
13:00:42 <Oejet> Ok, so it's slow.  Why do you think it is slow? How is FiniteMap implemented?
13:04:07 <musasabi> Oejet: finitemap is a balanced tree.
13:04:55 <musasabi> I think the problem is the array of TVar.
13:16:03 <Oejet> Going to bed.  See you musasabi.
14:12:12 <Calister> g'evening
14:13:02 <Lemmih> Greetings, Calister.
14:14:30 <Calister> heya Lemmih
14:29:23 <Calister^> *sigh*
14:29:30 * Calister^ stabs t-dsl
17:46:42 <SyntaxNinja> hi all
17:46:43 <SyntaxNinja> quiet today
17:51:56 <Igloo> Yo Syn
18:04:40 <monochrom> Got a programming challenge from a Perl fan.  I think you will delight to do it in Haskell.
18:05:02 <dons> :)
18:07:17 <wli> monochrom: do tell
18:07:49 <monochrom> Some terminologies.  A word is a string of letters.  Two words are "jumbles" of each other iff you can permute the characters in one word to get the other word, e.g., rat and art, pool and polo.  You can generalize it to any number of words.
18:08:50 <monochrom> The programming challenge: input a file of words, one word per line.  Output the/a largest group of words that are jumbles of each other.
18:09:45 <wli> alrighty
18:09:56 <monochrom> It is easier in Haskell than in Perl. :)
18:10:24 <dons> I reckon so
18:11:18 <monochrom> To get the size of the largest jumble group is trivial.  To actually output the words in the group is just a bit more work.
18:11:24 <Igloo> Something like this: getContents >>= print . fst . head . sort . map (\x -> map snd x, x) . group . sort . map (\x -> (sort x, x)) . lines
18:12:01 <Igloo> Oh, you'd need to groupBy something, though
18:12:38 <monochrom> you also forgot to look at the sizes of the groups.
18:12:38 <Igloo> Which would be harder to honestly classify as a one-liner
18:12:48 <Igloo> No, the left-most sort does that
18:13:02 <monochrom> It is not important to be one-liner.
18:13:04 <Igloo> Oh, sorry, I screwed up the map
18:13:19 <Igloo> map (\x -> (length x, map snd x)) was what I meant
18:13:27 <Igloo> Of course it has to be a one-liner. Pah!
18:13:48 <monochrom> You just need maximum; sort is too slow.
18:14:06 <Igloo> You never said anything about efficiency
18:14:15 <dons> one-liner-ness is always important
18:14:39 * Igloo can't think of a clean way to both do the grouping and keep the original letter order around, though
18:15:17 <Igloo> And keeping the input around to filter is a bit nasty too IMO
18:15:20 <monochrom> I think it is actually a bonus to also output the member words ordered.
18:17:17 <monochrom> Anyway we all agree.
18:53:43 <wli> List Prelude> let { w `isJumbleOf` w' = sort w == sort w' ; addToTbl ws w = map (\xs -> if any ((==w) . fst) xs then map (\(w', n) -> (w', n + if w == w' then 1 else 0)) xs else (w, 1):xs) ws } in (\f -> readFile f >>= (return . foldl (\ws w -> if any (any ((`isJumbleOf` w) . fst)) ws then addToTbl ws w else [(w, 1)] : ws) [] . words) >>= mapM_ print) "/usr/share/dict/words"
18:53:47 <wli> I wonder if that does it
18:55:47 <dons> if w == w' then 1 else 0  ==> fromEnum (w == w')
18:56:01 <wli> thanks
18:56:41 <wli> foldr misbehaves
18:57:00 <wli> foldl does too
18:57:11 <dons> stack oflow?
18:57:19 <wli> yeah
18:57:28 <monochrom> ghc -O 
18:57:44 <monochrom> and probably foldl1
18:58:10 <monochrom> oops nevermind about foldl1
18:58:10 <dons> walking a 5M String list is going to burn the heap pretty bad
18:58:32 <wli> foldr causes garbage or something
19:00:01 <monochrom> I replace Igloo's leftmost sort by maximum.  It overflows iff I don't use -O.  So somehow -O does enough strictness analysis to that program.
19:00:25 <Darius> wli: There's Data.List.foldl' that may be more appropriate.
19:01:23 <wli> okay, fixed it appears
19:01:32 <wli> no
19:02:40 <wli> oh well, I don't care enough
19:04:40 <Darius> wli: What's with abstracting f then simply applying it?  As you only use f once you may as well inline it and at any rate a let would be equivalent.
19:04:51 <wli> nothing really
19:05:04 <wli> I just can't be bothered to hammer on it further.
21:35:11 <araujo> Hello.
21:41:22 <wli> well, simonmar should be able to log directly into my boxen now
21:44:19 <araujo> ?
21:48:09 <araujo> anyone has tried hOp here?
21:50:37 * wli oohs and ahhs at forkOS
22:02:49 <samc> what's forkOS? url?
22:03:18 <araujo> i think it was a joke :-P
22:03:32 <wli> http://www.haskell.org/ghc/docs/latest/html/libraries/base/Control.Concurrent.html
22:40:59 <sethk> there's also a joke site that looks just like the page at www.debian.org, but it is www.lesbian.org.  But no distro.  :)
22:44:46 <samc> that's not a joke site
22:44:49 <juhp> sethk: was that a joke?  (it doesn't look like a job site to me:)
22:45:00 <juhp> er joke
22:45:17 <sethk> but it is.  very cleaverly done.
22:46:50 <samc> lesbionic is a cool word
22:47:26 <samc> sethk, sure it is
22:50:01 <juhp> wow, I think gtk2hs is packagable again :-)
22:51:29 <sethk> that would be excellent.
22:52:20 <juhp> yeah - 0.9.7 should be out before long I think
22:53:16 <juhp> there is even a mozembed binding included now :)
22:53:44 <sethk> juhp, work with firefox also?
22:54:29 <juhp> well, if your firefox includes libgtkmozembed then yes I guess - mine doesn't though
22:55:04 <juhp> er, libgtkembedmoz I think it's actually called
22:57:09 <juhp> so in practice one needs mozilla-devel or mozilla-dev say depending on one's distro
22:57:59 <juhp> but I imagine it won't be that long before it is moved to firefox
22:59:24 <sethk> juhp, it shouldn't be difficult, if it is already working with the most recent version of Mozilla.  In fact, maybe you can steal it from mozilla and drop it into the firefox directory.
23:00:48 <juhp> yeah, I believe it is just a matter of flicking some build switches in firefox
23:01:28 <sethk> k
23:01:46 <juhp> true, that might work too, but not guaranteed
23:03:28 <sethk> of course, nothing is guaranteed until you try it.
23:06:06 <juhp> :)
23:07:05 <juhp> right, I just mean that I hear that there are lib differences between mozilla and firefox...
23:07:50 <sethk> juhp, you are probably right, it might need to be rebuilt
23:07:57 <sethk> juhp, probably would
23:45:16 <bourbaki> moin
23:45:25 <zamez> hi
23:49:47 <adept> re
