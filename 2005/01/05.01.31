00:51:19 <Itkovian> meuning
00:51:58 <Gahhh> how do you say good morning in French?
00:53:10 <Itkovian> bonjour
00:53:37 <Itkovian> that more 'good day' ...
00:53:49 <Itkovian> bvut I;ve never heard anybody asyng bonne matinee
00:53:58 <Itkovian> s/asyng/saying/
00:54:24 <Gahhh> that is what I was wondering
00:54:27 <Itkovian> you just say 'hello', then listen to what they're saying and use that next time :-)
00:54:45 <Itkovian> and hope they didn't insult you ...
00:54:59 <Gahhh> curiosly, many people don't say "good evening" in English when parting.
00:59:41 <Itkovian> hmm.
01:24:39 * shaleh is seeking help with a weird hugs message
01:24:59 <shaleh> Cannot justify constraints in explicitly typed binding
01:25:08 <shaleh> the type is [a] -> [a] -> Bool
01:25:25 <shaleh> if I make it a real type (char, int, what have you) the problem goes away
01:25:50 * autrijus wonders if (forall a. [a] -> [a] -> Bool) will help
01:26:15 <arjanb> i think a typeclass constraint is missing
01:26:40 <autrijus> *nod*
01:26:44 <shaleh> may I paste the 7 line function
01:27:45 <arjanb> @wiki HaskellIrcPastePage
01:27:46 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
01:30:04 <Lemmih> lisppaste2: url
01:30:04 <lisppaste2> To use the lisppaste bot, visit http://paste.lisp.org/new/haskell and enter your paste.
01:30:42 <shaleh> done
01:30:47 <shaleh> at bottom
01:30:52 <shaleh> look for 'sublist' function
01:31:23 <Lemmih> Add (Eq a) to the type declaration.
01:31:41 <Lemmih> @type (==)
01:31:42 <lambdabot> (==) :: forall a. (Eq a) => a -> a -> Bool
01:31:56 <shaleh> why?
01:32:20 <Lemmih> Because not all types can be tested for equality.
01:32:33 <shaleh> right, but why can't it deduce it when it can?
01:32:45 <shaleh> or does the compiler fail because maybe, someday it won't work?
01:32:53 <autrijus> that's correct.
01:33:00 <shaleh> I see
01:33:01 <autrijus> the compiler rejects programs that may someday not work.
01:33:08 <shaleh> thanks
01:33:09 <tromp> it can derive an == function, but it may not be what you want
01:33:51 <shaleh> the exercise from the book explicitly requests String -> String -> Bool. I was experimenting
01:34:00 <tromp> in some cases it can, to be precise
01:34:13 <Lemmih> shaleh: The compiler will not overwrite your type declaration.
01:34:59 <shaleh> Lemmih: so adding the Eq bit says "I know every time I call this 'a' will know how to perform ==", right?
01:35:25 <Lemmih> Yes.
01:35:50 <shaleh> well, I will leave that alone for now, I am sure Thompson covers it eventually.
01:36:48 <shaleh> i am pretty pleased with that function. Any other comments to be made about it?
01:38:42 <autrijus> sublist [] _ = True
01:39:16 <autrijus> sublist _ [] = False
01:39:20 <shaleh> I added the [] [] while trying to diagnose the compiler message
01:39:28 <autrijus> ah. *nod*
01:41:09 <shaleh> thanks all
01:41:12 <shaleh> now I can sleep
01:41:36 <shaleh> I hate it when you think you finally get a topic and then a simple problem throws you for a loop
01:42:19 <shaleh> ghc actually suggested Lemmih's solution, but I did not understand why it was complaining
01:42:57 <shaleh> off to sleep
02:16:47 * autrijus is writing a perl6 interpreter as TaPL exercise.
02:16:54 <autrijus> it's actually more pleasant than I had imagined.
02:16:56 <Matt-W> gosh
02:16:59 <Matt-W> that's ambitious
02:17:24 <autrijus> well, yeah, but the grammar has been formally defined, and the specs cover the semantics pretty well
02:17:32 <autrijus> so I can choose a reasonable subset to begin
02:17:41 <Matt-W> yeah, most of the semantics are sorted out...
02:17:58 <autrijus> the 2004 Dec release of http://dev.perl.org/perl6/synopsis/ is surprisingly digestible
02:18:13 <Matt-W> I've been following Perl 6 for quite a while
02:18:17 <Matt-W> It's an interesting language
02:18:35 <Matt-W> I don't quite feel competent to help out with the actual implementation, so I just ask silly questions on perl6-language instead :-)
02:18:41 <autrijus> =)
02:18:57 <autrijus> the perl6 parser is stuck.
02:19:05 <autrijus> I think that's the bottleneck now.
02:19:08 <autrijus> so I'm trying to help :)
02:19:38 <Matt-W> I had thought of trying to pitch in on the grammar definition
02:19:42 <autrijus> Parsec is making this easier than I have a right to demand on.
02:19:42 <Matt-W> but it's scary
02:20:39 <Matt-W> Parsec is nice, yes
02:21:08 <autrijus> so mostly I'm polishing up the AST now, trying to integrate the context into it
02:21:08 <autrijus> I'm a bit troubled by the "all lists are lazy by default" umbrella definition
02:21:20 <autrijus> but I think I can get by with attaching a generator/consumer function underneath
02:23:26 <viirya> a perl6 interpreter written in haskell?
02:23:33 <autrijus> yes.
02:24:02 <Matt-W> One suspects it's going to have some very nasty corners in it
02:24:17 <autrijus> verily. but as there's no implementations available now
02:24:31 <Matt-W> there's a subset implemented in the Parrot tree
02:24:32 <autrijus> I guess any corner case uncovered will help
02:24:39 <Matt-W> but most of that's going to get ditched and redone
02:24:42 <autrijus> Matt-W: it is woefully unmaintained.
02:24:52 <Matt-W> well yes, because work has started on the proper implementation now
02:25:02 <autrijus> and the PGE-based parser isn't moving for quite a while now.
02:25:23 <Matt-W> nobody seems quite willing to dive in and write the grammar for that
02:25:33 <Matt-W> I really must take a look at it with some seriousness
02:25:35 <autrijus> https://svn.perl.org/perl6/grammar/trunk/Grammar.perl6 is about 10% complete.
02:25:42 <autrijus> i.e. not usable.
02:25:47 <Matt-W> yes, I know
02:38:08 <jlouis>                 /g 2
02:38:11 <jlouis> bleh
02:43:09 <autrijus> the baskell interpreter looks like a good starting point.
02:52:54 <lightstep> how can one do tail-recursive loops in haskell?
02:53:50 <lightstep> or are they a concept only available in strict languages?
02:53:59 <autrijus> http://www.haskell.org/hawiki/TailRecursive
02:54:06 <autrijus> you can force strict evaluation on the tails.
02:54:09 <autrijus> using $! and seq.
02:54:16 <autrijus> and hence produce similar effects.
02:56:11 <lightstep> is there a tutorial on the sequencing operators?
02:57:52 <autrijus> @wiki ForcingEagerEvaluation
02:57:52 <lambdabot> http://www.haskell.org/hawiki/ForcingEagerEvaluation
03:00:00 <lightstep> thank you
03:00:04 <autrijus> np =)
03:01:46 <kuribas> hmm, it says that a compiler cannot generate a tail-recursive function itself by analysis
03:01:56 <kuribas> but it could
03:02:21 <autrijus> under lazy evaluation?
03:02:25 * autrijus wonders how
03:02:55 <kuribas>           * autrijus wonders hoperhaps not
03:03:07 <kuribas> perhaps not
03:03:37 <kuribas> but as an optimization step?
03:03:48 <kuribas> it could mix eager with lazy
03:03:56 <lightstep> it can know that * and + are strict
03:03:59 <autrijus> yeah. laziness analysis does that.
03:04:24 <lightstep> and infer that the arguments to fact' can be evaluated strictly
03:04:59 <autrijus> I mean strictness analysis, of course. :)
03:05:12 <kuribas> it can know that * is associative
03:05:58 <lightstep> only because we annotate it
03:09:11 <kuribas> yes
03:09:33 <kuribas> the more information the compiler has about math, the better it can optimize
03:36:07 <Lemmih> Where did System.FilePath go?
03:43:52 <Itkovian> to cross the road?
04:08:28 <Lemmih> Did they remove it?
04:16:34 <Itkovian> I have no idea ...
04:32:37 <goron> What are the natural numbers according to you? 0,1,2.. or 1,2,..? It seems math people and cs people think *different* about this one. 
04:32:45 <Itkovian> 0,1,2
04:33:04 * Itkovian wonders in which category that drops him
04:33:09 <ibid> cs people are almost united for 0,1,2...
04:33:26 <ibid> math people are divided, some use 0,1,2,..., some use 1,2,...
04:33:39 <Itkovian> well, math people should be too ... no neutral element for (+) otherwiese
04:34:13 <autrijus> goron: http://en.wikipedia.org/wiki/Natural_numbers#History_of_natural_numbers_and_the_status_of_zero
04:34:27 <ibid> well, there are no inverses for natural number either
04:34:34 <goron> I am on the 0,1,2 camp, for the record :)
04:35:47 <lightstep> the first course in math where i learned, we had N and N_0 (the latter with 0)
04:36:42 <tuomov> 0,1,2
04:38:31 <goron> It's a pretty politic definition on WikiPedia. Perhaps it's for the best...
04:38:58 <autrijus> wikipedia is all about political correctness.
04:41:53 <ibid> autrijus: it's not
04:42:38 <autrijus> well, it's all about neutral point of view.
04:42:43 <Itkovian> lightstep N_0 referred to N without 0 iirc.
04:42:48 <autrijus> which is a more enlightened way to talk about political correctness.
04:42:56 <autrijus> <- wikipedia contributor.
04:43:06 <ibid> autrijus: yes, but that's not the same thing as political correctness
04:43:12 <tuomov> politically correct way of talking about political correctness :)
04:43:45 <ibid> autrijus: political correctness has to do with trying to avoid upsetting people whose favour you need politically
04:43:59 <ibid> autrijus: NPOV can be veru un-politically-correct at times
04:44:47 <lightstep> Itkovian: it's as i described at the israeli open university
04:45:05 <autrijus> ibid: I rest my case.
04:45:08 <Itkovian> heh ... mine is at erm secundary school in Belgium :-)
04:45:12 <autrijus> suffice to say our understanding about PC is different.
04:45:18 <Itkovian> a long time ago
04:46:46 <ibid> a PC case is the use of african american instead of some other labels; it's PC because it's politically beneficial to avoid the connotations that the other labels bring
04:47:43 <ibid> NPOV would say "some people say african american, some people say negro [blah blah about the political agenda that these two labels advocate]"
04:48:09 * shapr yawns
04:48:16 <Lemmih> Good morning, shapr.
04:48:24 <shapr> Good morning Lemmih.
04:49:17 * Lemmih has had nothing but trouble with his box all day /-:
04:49:43 <Itkovian> pfft ... /me things PC'ness is often a load of bollocks ...
04:49:50 <Itkovian> call things as they are ...
04:50:09 <Itkovian> just don't purposely insult anyone
04:50:28 <Itkovian> black people are black, white people are white, so what?
04:50:29 <ibid> Itkovian: that's what it is
04:50:38 <ibid> Itkovian: political expediency, most of the time
04:50:43 <shapr> Some people are just really sensitive.
04:51:36 <shapr> I worked in Birmingham, Alabama as a student. I called myself a 'computer slave' as a joke. I nearly got fired for it.
04:51:37 <Itkovian> that's their problem, no? if my buddy has a black/brown skin, then so be it ... I've got a white one. 
04:51:52 <Itkovian> shapr: you're serious?
04:51:54 <Itkovian> aaargh
04:52:05 <shapr> I had to publicly apologize and never use the term slave again.
04:52:27 <ibid> yeah, that makes sense
04:52:27 <Itkovian> yeah, it's like you can't say 'slave device' for yr second IDE HD :-)
04:52:29 <ibid> and it's not PC :)
04:52:47 <Itkovian> I recall a post on /. or the register about such crap ...
04:53:20 <Itkovian> sad, really
04:53:59 <Itkovian> as if the term Afro-American is less insulting ... by golly, now that reminds why they got threre in the first place, and it wasn't for a nice reason!
04:54:50 <shapr> I wanted to go out with a gorgeous afro-american. But in the end she said her friends would laugh at her if she went out with a white guy.
04:54:53 <ibid> istr some american president called nelson mandela the first african-american president :)
04:55:31 <shapr> Discrimination happens on both sides.
04:55:53 <ibid> i hope it wasn't clinton :)
04:56:01 <ibid> but it was before gwb, for sure
04:56:02 * boegel greets #haskell
04:56:30 <ibid> and if some of you don't get the problem in the above, ...
04:56:39 <shapr> hiya boegel 
04:56:51 <boegel> heya shapr
04:58:04 <Itkovian> hi boegel
04:58:47 <Itkovian> ibid: I understand the problem, but people should simply calm down and take an objective look at things.
04:59:14 <Itkovian> If I call you <color> and <color> happens to be the color of yr skin, are you insulted?
04:59:17 <Itkovian> duh.
04:59:22 <tuomov> in finland there was for a long ntime a liquorice bar with a cross-section of the bar with mouth and eyes drawn on the package, but in sometime in the 90's they banned that too
05:00:10 <tuomov> I didn't think it was in any way racist.. it was a liqourice man
05:00:16 <shapr> yup
05:01:01 <ibid> Itkovian: did you really understand the problem? really?
05:01:30 <ibid> laku-pekka?
05:01:44 <ibid> or was it musta pekka?
05:01:51 <tuomov> or laku-pepe?
05:02:00 <ibid> yeah
05:02:03 <tuomov> something like that anyway
05:02:30 <Itkovian> ibid: I think I do, and I think people are making too big a fuss about it all. 
05:02:35 <ibid> "who fears the black man?" used to be (is?) a popular children's game
05:03:02 <ibid> Itkovian: i don't think you do.  think about it, mandela african-*american*?
05:03:19 <Itkovian> yeah, and in Africa it's prolly 'Who fears the White Man'
05:03:22 <Itkovian> duh.
05:03:41 <Itkovian> idib: there are various meanings behind that expression ...
05:03:57 <ibid> use nick completion :)
05:04:16 <Itkovian> argh
05:04:18 <Itkovian> sorry
05:04:35 <shapr> I also wish people would chill out and switch to a total meritocracy.
05:04:37 <Itkovian> heh, neat. I didn't know it did that :-)
05:07:56 * Lemmih segfaults GHC and starts doubting 6.4 will be released in February.
05:08:21 <autrijus> 6.3 on freebsd is prone to segfaulting the last time I tried.
05:08:36 <boegel> Itkovian, you didn't know about nick completion ?
05:08:50 <autrijus> hmm nick comprehension
05:09:07 <autrijus> [ ... | n <- nick, ... ]
05:09:08 <Lemmih> Lets wait a couple of months more so the original prognosis will hold (:
05:09:30 <Lemmih> [ ... | nick <- channel ]?
05:09:43 <Itkovian> boegel: nope, I just type ...
05:10:35 <autrijus> [ ban nick | nick <- channels, nick /= me ]
05:11:19 <lightstep> maybe [ ban nick | nick <- channel, channel <- channels, nick /= me]
05:11:29 <autrijus> that works?
05:11:46 <lightstep> i dunno, a never tried list comprehensions
05:11:51 <tuomov> map ban $ filter (/=me) channel
05:11:53 <autrijus> Syntax error in expression (unexpected `<-')
05:12:42 <lightstep> anyway, you probably should replace channels with (concatMap nicks channels)
05:13:32 <autrijus> map (ban . kick) . filter (/= me) . concat . map nicks channels
05:14:21 <lightstep> and now a $ is missing...
05:15:02 <lightstep> unless you are in some state-mutating environment
05:15:40 <autrijus> hmm, parsec is a state monad without a transformer.
05:15:52 <autrijus> or is there a transformer?
05:16:00 <Philippa> I don't know, nor care
05:16:04 <Philippa> if I did, I'd read the source :-)
05:16:18 <autrijus> ok. reading the source :)
05:16:40 <Philippa> but that's rather the point, you can use monad transformers without exposing the fact you've done it that way
05:17:07 <autrijus> point.
05:17:29 <lightstep> from the docs: "GenParser is an instance of the Functor, Monad and MonadPlus classes"
05:17:42 <lightstep> no MonadState
05:18:15 <Philippa> which is a shame, but hey
05:18:19 <Philippa> it /does/ have state
05:18:31 <autrijus> that's because the accessors are weirdly named.
05:18:58 <autrijus> getState instead of gets, updateState instead of modify
05:19:09 <Philippa> er, you can duplicate them trivially
05:19:15 <autrijus> right. 
05:20:47 <skuggi> 
05:21:28 <skuggi> how do i compile a .hs-file into an executable using ghc in windows?
05:21:38 <autrijus> instance MonadState st (GenParser tok st a)
05:21:38 <autrijus>     where get = getState ; put = setState
05:21:41 <autrijus> that may even work.
05:21:47 <autrijus> skuggi: "ghc --make foo.hs"
05:21:53 <skuggi> ah
05:23:19 <skuggi> autrijus: i only get a .o-file and a .hi file?
05:23:36 <lightstep> try also "-o foo.exe"
05:23:53 <Lemmih> skuggi: Did you put the Main module in foo.hs?
05:24:25 <autrijus> skuggi: "a.exe"
05:25:14 <skuggi> k
05:25:33 <autrijus> it's sort of a legacy tradition (in unix it will generate a.out)
05:28:29 <Philippa> it's a.out with the binary distro for win32 too
05:31:56 * boegel throws himself on his OS syllabus again
05:41:56 * Lemmih promises himself to _never_ use the development version of GHC again.
05:46:16 <Philippa> Lemmih: heh
05:46:22 <Philippa> I've been avoiding it despite some temptation
05:48:37 <Lemmih> Lucky you.
05:50:22 <Lemmih> I can't continue my work on Hacanon /-:
06:01:19 <Igloo> What's the problem?
06:01:30 <xerox> hi
06:03:49 <Lemmih> Igloo: System.FilePath has been hidden away in Distribution.Compat.FilePath and GHC segfaults when I try to compile Hacanon.
06:04:48 <Igloo> You mean you ewren't just using a development version but were actually tracking the development version?
06:05:15 <Igloo> If you just want some new feature it's best to just pick a version that works for you and not upgrade it until you have another reason to
06:05:51 <Lemmih> I had a reason. I changed from Gentoo to Debian.
06:09:16 <autrijus> buildExpressionParser is so wrong.
06:09:19 <Lemmih> Should I find an older snapshot of GHC and first worry about compability when 6.4 is out?
06:09:21 <autrijus> it shouldn't be this smart.
06:13:17 <Igloo> Oh, the ghc-cvs package might fill your needs then
06:16:14 <Lemmih> That would be neat.
06:39:44 <MegaMonad> Mwotton: g'day mrak.
06:59:27 <Philippa_> Lemmih: there's a lot I can't do with a windows 6.2.2, if it helps any
07:01:43 <Lemmih> (o:
07:09:47 <Philippa_> there're libs in 6.3 I could really use having for Flippi, too
07:13:00 <autrijus> what's the preferred way to read a string into a Double, discarding trailing nonumeric chars?
07:13:05 <Lemmih> Hey Oeje1.
07:13:23 <Lemmih> autrijus: reads?
07:13:41 <Oeje1> Hej Lemmih.
07:13:42 <autrijus> oh duh.
07:13:44 <autrijus> thanks.
07:13:58 <Lemmih> No problem.
07:15:23 <Itkovian> I'm looking to make a small tool to read the exif tags from a digital camera jpeg in haskell
07:15:41 <Itkovian> Can I use getContents to lazily read the file's bytes?
07:16:16 <Lemmih> Itkovian: Yes.
07:16:57 <autrijus> you may need to set it to binary mode first.
07:18:13 <Itkovian> ah, and how do I do that?
07:19:46 <Lemmih> Oeje1: Still trying to compile Hacanon?
07:20:17 <Oeje1> Lemmih: I'm still trying to compile GHC even. :-(
07:20:59 <Lemmih> Oeje1: Hacanon can't even compile with newer versions of GHC anymore /-:
07:23:51 <Oeje1> Lemmih: How new GHC?
07:26:42 <Lemmih> Not exactly sure. A couple of weeks new, I think.
07:45:51 <chugga> does hugs suck or am i doing something wrong. im giving a function definition and its saying no, it shouldnt be that type, it should be something else
07:46:12 <chugga> but the only reason im giving it a type definition is because its making a mistake with the types in the first place ...
07:47:36 <Itkovian> chugga, maybe it's you making the mistake?
07:47:45 <Itkovian> in the definition of your function ...
07:47:45 <chugga> Itkovian, ofcourse thats a possibility
07:48:04 <lisppaste2> Oejet pasted "Error while compiling GHC from CVS" at http://paste.lisp.org/display/5419
07:48:18 <Itkovian> chugga, I've never know hugs to err in determining s function type
07:48:54 <chugga> logs  n =  [(x, log10 x) | x <- [1 .. n]]
07:48:56 <chugga> this is the function
07:49:08 <Itkovian> @type log10
07:49:09 <lambdabot> bzzt
07:49:20 <chugga> Main> :t logs
07:49:20 <chugga> logs :: (Enum a, Floating a) => a -> [(a,a)]
07:49:31 <Itkovian> yeah ...
07:49:42 <Itkovian> that seems correct ...
07:49:43 <chugga> Main> :t log10
07:49:44 <chugga> log10 :: Floating a => a -> a
07:50:04 <Itkovian> @type [1 .. 2.4]
07:50:05 <lambdabot> [1 .. 2.4] :: forall t. (Fractional t, Enum t) => [t]
07:50:35 <chugga> but i want logs :: Integer -> [(Integer, Double)
07:50:39 <chugga> so wtf is goign wrong....
07:51:41 <Itkovian> well, first of all, log10 is taking a Floating instance type, e.g. a Double
07:51:41 <chugga> if i give it that function definition, it tells me, ERROR "Arithmetic.hs":13 - Type error in explicitly typed binding
07:51:42 <chugga> *** Term           : logs
07:51:42 <chugga> *** Type           : Integer -> [(Integer,Integer)]
07:51:42 <chugga> *** Does not match : Integer -> (Integer,Double)
07:51:52 <Itkovian> Sure ...
07:51:56 <chugga> right, and that doesnt bother me
07:51:57 <Itkovian> that seems correct.
07:52:18 <chugga> this type inference stuff really sucks
07:52:27 <Itkovian> because the type of the first item in the tuple will have to be the same as the type of the argument to log10
07:52:35 <Itkovian> chugga: no it's very cool.
07:52:42 <boegel> @type logs
07:52:43 <lambdabot> bzzt
07:52:46 <Itkovian> chugga: it helps you weed out stupid mistakes
07:52:50 <boegel> @find logs
07:52:51 <lambdabot> Sorry, I don't know the command "find", try "lambdabot: @listcommands"
07:52:55 <chugga> Iti already pasted that
07:53:00 <boegel> @index logs
07:53:01 <lambdabot> bzzt
07:53:01 <chugga> logs :: (Enum a, Floating a) => a -> [(a,a)]
07:53:20 <boegel> hmm, logs is not standard ?
07:53:23 <chugga> nup
07:53:36 <chugga> should i paste it here?
07:54:00 <Itkovian> nope
07:54:05 <chugga> ok
07:54:07 <boegel> @wiki HaskellIrcPastePage
07:54:07 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
07:54:15 <boegel> post it on there chugga
07:54:20 <chugga> its only one line
07:54:21 <swiert> chugga: you may want to try logs  n =  [(x, log10 (fromInt x)) | x <- [1 .. n]]
07:54:41 <boegel> oh, if it's only one line go ahead then
07:54:47 <boegel> > 3 lines is a problem
07:54:57 <chugga> logs  n =  [(x, log10 x) | x <- [1 .. n]]
07:55:03 <Itkovian> swiert: that oughtta work
07:55:13 <Itkovian> @type [(x, log10 (fromInt x)) | x <- [1 .. n]]
07:55:15 <lambdabot> bzzt
07:55:16 <boegel> chugga, what swiert said
07:55:23 <Itkovian> @type [(x, log (fromInt x)) | x <- [1 .. n]]
07:55:24 <lambdabot> bzzt
07:55:30 <boegel> Itkovian, lambdabot isn't that smart I think :)
07:55:30 <Itkovian> @type ln
07:55:31 <lambdabot> bzzt
07:55:33 <Itkovian> @type log
07:55:33 <swiert> @type fromInt
07:55:34 <lambdabot> log :: forall a. (Floating a) => a -> a
07:55:35 <lambdabot> bzzt
07:55:38 <chugga> wait, so Integer to Int is what i need to tell it to infer right?
07:55:48 <chugga> surely that isnt the problem unless Integer is a floating point type
07:55:53 <Itkovian> chugga: no! 
07:56:00 <boegel> chugga, no, Double to Int (if I'm correct)
07:56:03 <Itkovian> chugga: it's really easy: log expects a double
07:56:06 <boegel> @index fromInt
07:56:07 <lambdabot> bzzt
07:56:11 <boegel> wtf ?
07:56:16 <Lemmih> Oeje1: Eeek.
07:56:22 <chugga> Prelude> :t fromInt
07:56:22 <chugga> fromInt :: Num a => Int -> a
07:56:25 <Itkovian> yeah it's kinda borked me thinks
07:56:51 <Lemmih> fromInt is obsolete. Use fromInteger.
07:56:57 <boegel> @index fromInteger
07:56:58 <lambdabot> GHC.Num,Prelude
07:57:00 <Itkovian> chugga: log expects a Floating instance type, if you pass it an Int(eger) it will not work
07:57:04 <boegel> @index Prelude.fromInteger
07:57:05 <lambdabot> bzzt
07:57:09 <shapr> yow!
07:57:12 <boegel> @type Prelude.fromInteger
07:57:13 <lambdabot> Prelude.fromInteger :: forall a. (Num a) => Integer -> a
07:57:15 <shapr> boegel: fromIntegral
07:57:15 <chugga> okay
07:57:18 <Lemmih> Or fromIntegral, I forget at times (:
07:57:32 <boegel> shapr: y00p
07:57:34 <shapr> fromInteger was 0ld sk00l pre ghc 5
07:57:46 <Itkovian> chugga: thus you must make sure it gets a Double or something like that, hence the fromIntegral
07:58:16 <boegel> chugga: now explain us to see if you get it
07:58:48 <boegel> shapr: any interesting news ?
07:58:58 <autrijus> is this sane, or is there a builtin that does this and I missed it?
07:58:59 <autrijus> qw [] = []
07:58:59 <autrijus> qw str = w:qw(dropWhile isSpace xs)
07:59:00 <autrijus>   where (w, xs) = break isSpace str
07:59:12 <chugga> logs  n =  [(x, (log10.fromInteger) x) | x <- [1 .. n]]
07:59:17 <chugga> this is giving me trouble
07:59:45 <boegel> chugga: why not use 'log10 (fromInteger x)' ?
07:59:59 <chugga> its the same isnt it? i'll check
08:00:00 <swiert> autrijus: prelude.words (off the top of my head)
08:00:09 <boegel> I'm not sure...
08:00:19 <chugga> same problem
08:00:23 <autrijus> ah. of course. thanks
08:00:33 <Itkovian> chugga: use at least a ' ' between log10 . and fromInteger
08:00:38 <boegel> chugga: which problem ?
08:00:45 <Itkovian> anyway I'm off home.
08:00:52 <Itkovian> chugga: good luck
08:00:55 <chugga> what do you mean ' ?
08:00:59 <chugga> thanks, goodnight :)
08:01:05 <Itkovian> a 'space'
08:01:16 <boegel> a 'blank'
08:01:24 <boegel> how do you call that :)
08:02:54 <chugga> okay, so thats fixed, so the problem was log doesnt take integers?
08:02:59 <Itkovian> idd
08:03:14 <swiert> /clear
08:03:39 <chugga> i was expecting some truncation magic like in C .. cheers guys!
08:04:01 <chugga> s/truncation/type coercion
08:04:28 <Lemmih> Haskell is very unlike C.
08:04:57 <samc> almost, but not quite, entirely unlike C. :)
08:05:08 <chugga> hehe
08:06:22 <boegel> swiert, thanks, I didn't know '/cear'
08:06:26 <boegel> +l
08:07:01 <chugga> SamB, the fromInteger thing almost feels like casting
08:07:13 <chugga> (infact, thats what it is, i guess)
08:07:32 <swiert> np - I think I had some leading spaces (otherwise you wouldn't have seen it).
08:08:45 <chugga> casting is ugly .. shouldnt it be missing from haskell with its fancy type system?
08:09:27 <samc> short answer, no
08:09:33 <Oeje1> chugga: I think fromInteger is only safe casts.  Unsafe casts are used with floor and truncate and so.
08:10:57 <humasect> about Double <-> CDouble ?
08:14:10 <shapr> I was like, totally not read for that.
08:17:28 <shapr> wassup? Anything new and cool going on?
08:17:52 <Oeje1> shapr: Can you tell in people will stick around or go away?
08:18:02 <Oeje1> s/in/if/ even
08:18:08 <shapr> Sometimes I can.
08:18:49 <shapr> But I don't really mind whether people stay or not.
08:19:43 <shapr> They should do whatever works for them. I just like learning new mental toys, and this is a good place to do it.
08:36:35 <Lemmih> Nothing new, I'm afraid.
08:36:48 <autrijus> yay, expression parser is almost done.
08:36:56 <shapr> yay
08:37:29 <shapr> I found DarcsWiki mentioned on del.icio.us, it's so cool to see my own server linked there.
08:38:17 <shapr> Of course, DarcsWiki is moving to darcs.net, but hey.. it's neat.
08:39:25 <shapr> hiya nothingmuch 
08:39:29 <nothingmuch> hi ho
08:39:37 <nothingmuch> wouldn't it be terribly off topic?
08:39:48 <shapr> I dunno
08:40:04 <nothingmuch> =P
08:40:20 <nothingmuch> i'll try a PM first
08:40:21 <shapr> You could at least mention it. ozone might be interested, and there are other OSX/ObjC users around.
08:40:39 <shapr> ozone is likely sleeping, he's in Oz
08:42:21 <nothingmuch> i msged ozone a bit
08:42:27 <nothingmuch> i think i'll leave it at that for now
08:42:32 <shapr> awright
08:42:38 <nothingmuch> don't want to cause more noise than I deserve
08:42:46 <shapr> Want to the quick Haskell intro while you're here? ;-)
08:43:13 <shapr> The first lambda comes free...
08:43:21 * shapr takes a hit on a lambda
08:44:06 <nothingmuch> i'm learning functional programming via the SICP lectures, slowly (one lecture every two weeks or  so)
08:44:14 <nothingmuch> so i have a bit of background
08:44:24 <shapr> excellent choice, SICP and tPP are the two books I recommend to *every* programmer.
08:44:36 <nothingmuch> i have to go home soon, but when I get there I would gladly take up on a haskell tut
08:44:42 <shapr> awright, cool
08:45:15 <nothingmuch> is it reading material? or do you do them personally? ;-)
08:45:22 <shapr> Whichever you prefer.
08:45:31 <shapr> I tend to do them personally because everybody has a different background.
08:45:48 <shapr> but the baskin-robbins taste-test is ...
08:45:51 <shapr> @wiki HaskellDemo
08:45:51 <lambdabot> http://www.haskell.org/hawiki/HaskellDemo
08:46:31 <nothingmuch> i'll come back for some soon then =)
08:46:42 <shapr> spiffy :-)
08:49:14 <samc> SICP and tPP?
08:49:43 <nothingmuch> structure and interpretation of computer programs, by abelson and sussman * 2, of mit
08:49:47 <nothingmuch> the other I dunno (yet)
08:53:46 <autrijus> pugs repl works :) # http://nopaste.snit.ch/1738
08:53:59 <autrijus> well, no "e" yet.
08:54:01 <autrijus> working on it.
08:54:17 <shapr> Pugs, bwahaha!
08:54:18 <autrijus> at least the operator table is there.
08:54:32 * shapr rolls on the floor laughing
08:54:43 <shapr> That is a truly brilliant name.
08:55:10 <autrijus> thank you =)
08:55:16 <autrijus> it's kind of obvious :)
08:55:26 <shapr> Of course, Pugsley and Friday must be related...
08:55:40 <samc> shapr, tPP?
08:55:47 <shapr> samc: the pragmatic programmer
08:57:50 <jadrian> Cale: nice post, on the haskell mailing list
08:59:56 <Cale> thanks
09:01:01 <Spark> hmm typable typeable or type-able?
09:01:39 <autrijus> typeable.
09:04:13 <Spark> mmk
09:04:48 <samc> I concur
09:06:03 <Spark> normalisable or normalizable? :)
09:06:10 <Spark> (i'm british)
09:06:49 <Spark> hm my supervisor uses normalizable
09:07:33 <Igloo> OED lists both under normalizable
09:07:57 <Igloo> normalisable is in red, but I don't know what that means
09:10:52 <Igloo> Oh, it means I searched for it
09:11:49 <Spark> heh
09:11:57 <Spark> ok then
09:12:08 <Spark> ill use normalisable
09:12:18 <samc> doesn't matter, as long as you're consistent
09:12:24 <Spark> yeah should think so
09:22:57 * Muad_Dibber is consistently using both, that correct also? :P
09:23:13 <Spark> if you alternate maybe
09:23:33 <Spark> you could also include a note similar to how people justify "he/she" pronoun usage :)
09:29:25 <shapr> hiya bloomberg 
09:29:36 <bloomberg> shapr: hello
09:29:45 <shapr> So, you're into wirthwhile languages?
09:29:59 <bloomberg> oh yeah, haskell is awesome
09:30:13 <Muad_Dibber> Spark : well, it would be a useless note :P
09:30:46 <Muad_Dibber> since noone ever reads my papers anyway ;)
09:30:58 <shapr> bloomberg: have any questions?
09:31:39 <bloomberg> don't think so, just came in here to see if anyone was asking anything interesting
09:31:51 <shapr> hm, well..
09:31:52 <samc> wirthwhile languages, sounds like oberon, or modula :)
09:32:09 <shapr> samc: yes, that was the point... bloomberg is on #oberon also :-)
09:32:18 <bloomberg> oh i see, yeh im on #oberon
09:32:19 <samc> I see :)
09:32:35 <bloomberg> a friend of mine and I registered it :)
09:32:42 * araujo didn't know that channel existed
09:32:47 <Spark> "how to print a list in reverse using o(1) memory use in haskell?"
09:33:25 <bloomberg> can be done in O(n), not sure about O(1)
09:33:54 <Igloo> It's impossible to do it in O(1) space and O(n) time
09:34:16 <bloomberg> no it can be done in O(n) - apply an accumulating parameter
09:34:32 <bloomberg> for time that is
09:34:36 <bloomberg> not sure about space
09:34:38 <Igloo> Note the and
09:35:02 <Spark> :)
09:35:04 <bloomberg> i see
09:35:07 <Igloo> You can do O(n) space and O(n) time, or O(1) space and O(n^2) time
09:35:47 <Spark> in c you would do something like l = rev(l) ; print(l) ; l = rev(l)
09:35:55 <Spark> which would reuse the original storage but leave the list intact
09:36:08 <Igloo> That's O(n) space
09:36:13 <Spark> by iterating over it and swapping pointers
09:37:24 <Spark> its not o(n) space, its just a retarded explanation :)
09:37:37 <Spark> i should have just said 'reverse the list in place, print it, reverse it again'
09:38:40 <Igloo> That still uses O(n) space
09:38:59 <Spark> where does it allocate more space?
09:39:20 <Igloo> It doesn't allocate more, it has the O(n) space preallocated
09:39:29 <Spark> i think thats a given if youre processing a list :)
09:39:38 <Igloo> Not in a lazy language
09:39:56 <Igloo> mapM_ print [1..n] uses O(1) space in Haskell
09:41:00 <Igloo> Why are you concerned about the O(n) space used to represent the reversed list but not the constant factor in the original list representation?
09:41:20 <Spark> the question is from a microsoft interview :)
09:41:37 <Igloo> (depending on your program the forward list may not be stored in memory anyawy)
09:41:41 <Igloo> About Haskell or C?
09:41:53 <Spark> not sure
09:41:58 <Spark> presumably C
09:42:05 <Spark> but i wondered how it would apply here
09:43:51 * Lemmih watches his program segfault for the last time and goes to sleep.
09:43:58 <shapr> g'night Lemmih!
09:44:15 <humasect> couldn't match 'Double' against 'Foreign.C.Types.CDouble' -- common?
09:47:58 <boegel> sleep tight Lemmih
09:49:41 <shapr> Cale: nice article. Can I put this into The Monad.Reader?
09:51:26 * boegel wants to read it to
09:51:37 <shapr> It's on the haskell mailing list.
09:56:53 <boegel> shapr: which thread ?
09:57:01 * boegel never gets to actually reading the posts
09:57:09 <tintin> Lemmih: sweet dreams
09:57:13 <shapr> The thread about math notation.
09:57:32 * shapr sends out emails asking for Monad.Reader articles.
09:57:58 <boegel> shapr, do you mean the mail, or is there an actual article ?
09:58:38 * boegel = off
09:59:09 <shapr> http://www.haskell.org/pipermail/haskell/2005-January/015266.html
09:59:14 <shapr> boegel: there ya go
09:59:19 <tintin> shapr: when is the first issue due ?
09:59:32 <tintin> February 30th ?
09:59:38 <tintin> or March 1st ;?
09:59:46 <boegel> shapr: I was looking for a link to an article... But thanks ! :)
10:00:01 <shapr> tintin: more like, whenever I get enough authors and articles for the first issue.
10:00:04 <shapr> y0 pesco 
10:00:28 <shapr> So far I have a bunch of maybe answers.
10:00:35 <pesco> y0 shapr
10:00:43 <shapr> and one or two definite articles.
10:00:46 <pesco> what's going on lately?
10:01:02 <shapr> I'm playing with darcs, trying to make a patch arrow to speed it up.
10:01:09 <pesco> Cool.
10:01:31 <shapr> What about you?
10:02:22 <pesco> I invented my own text markup language.
10:02:30 <shapr> neat! how does it work?
10:03:14 <pesco> content -> (text-char | markup)*
10:03:29 <shapr> that's easy enough
10:03:38 <pesco> markup -> '{' name args '.' content '}'
10:03:59 <pesco> args -> (white markup)*
10:04:06 <pesco> That's the core.
10:05:04 <shapr> what does the markup look like?
10:05:26 <pesco> What do you mean?
10:05:39 <shapr> what's the definition of markup?
10:05:48 <shapr> er, name
10:06:14 <shapr> If I define the as a name, can I still use it in content?
10:06:15 <pesco> Oh, name is just the usual identifier, any string of alphanumeric characters.
10:06:37 <shapr> ohh, I see
10:06:47 * shapr hears the audible click
10:06:53 <pesco> :)
10:07:35 <shapr> tintin: you want to write an article?
10:07:58 <shapr> pesco: seen YAML?
10:08:52 <pesco> shapr: I'm thinking about viewing markup elements as functions and applying a type system instead of what they do with XML doctypes etc.
10:08:56 <pesco> shapr: I think so.
10:09:18 <shapr> I like that interpretation. Would make it easier to deal with the markup language.
10:12:25 <pesco> Yes, function application and types are a well-known concept. ;-) And a document could be interpreted just by mapping the tags to, say, Haskell functions of suitable types.
10:12:43 <shapr> yup
10:12:48 <shapr> A bit like JSPs
10:13:15 <pesco> How do you mean, exactly? I'm not very familiar with JSPs.
10:13:59 <samc> A completely disagree with that article
10:14:48 <shapr> JSPs work like a class turned inside out. Tags are methods, their result is concatenated into the result string.
10:15:24 <shapr> heippa hei Einar
10:15:41 <musasabi> huomenta shapr 
10:15:59 <shapr> how's code?
10:17:11 <musasabi> I have been refactoring the DNS code lately and waiting for cabal to stabilize a bit.
10:17:37 <shapr> Have you tried HaRe?
10:18:01 <shapr> tintin: actually, I like that suggestion.
10:18:29 <musasabi> no, I am too accustomed to emacs.
10:18:40 <shapr> I thought it worked with emacs also?
10:18:59 <shapr> anyway...
10:19:00 <musasabi> most of the time I just rip out the offending code to a new module, make a sane interface for it and then change the implementation.
10:19:05 <shapr> heh
10:20:23 <shapr> Want to write an article for The Monad.Reader?
10:20:47 <shapr> tintin suggested throwing the first issue out the door Marth 1st, and that sounds good to me so far.
10:21:06 <shapr> Now if only I can get enough authors...
10:21:33 <shapr> arghh, QC2 is stalled
10:21:37 * shapr bangs head on desk
10:21:53 <musasabi> It sounds nice, but depends on the deadline and the style of articles wanted. 
10:22:10 <shapr> If it's Haskell-related, it fits the style.
10:22:16 <musasabi> I could write something about learning to create monad transformers.
10:22:17 <shapr> I just want quality content.
10:22:21 <shapr> That would be cool!
10:23:02 <shapr> My plan is one week to find a subject, two weeks to write about it, and have it in one week before publish date.
10:23:19 <shapr> In reality, I suspect that will be "one last for panic"
10:24:00 <musasabi> that sounds nice, I think I will have an outline/toc this week and can then panic the remaining time.
10:24:08 <shapr> haha, beat the rush!
10:24:12 <shapr> smart!
10:25:05 <musasabi> well time is allways short when writing something :-)
10:25:20 <shapr> True, I have several articles to write myself.
10:29:14 <pesco> shapr: Cool, you're making a PDF mag or something?
10:29:21 <shapr> er, kind of...
10:29:39 <shapr> wikizine was the original idea, but some people have volunteered to add PDF output capabilities.
10:29:53 <pesco> I see.
10:30:22 <shapr> want to write an article?
10:30:38 <shapr> Or a column? :-)
10:30:54 <pesco> Articl, sure! Lemme just decide on a topic.
10:31:23 <shapr> I have some neat column ideas, 'monthly application spotlight' 'monthly puzzle' 'monthly kata'
10:31:54 <pesco> kata?
10:32:20 <shapr> http://wiki.pragprog.com/cgi-bin/wiki.cgi/CodeKatas
10:32:52 <pesco> Cool.
10:33:15 <shapr> I'm not sure how to approach some of these. Should I give a Kata one month and publish the best solutions the next month?
10:33:22 <shapr> Or should I publish both Kata and solution?
10:33:54 <shapr> In the first case it sounds more like the puzzle column.
10:34:06 <syntax_syntax> The Greate Debate: socks with sandals, pro or con?
10:34:18 <pesco> shapr: Publish only the Kata in the mag and set up a seperate website for the solutions.
10:34:35 <shapr> Should I only use solutions submitted by readers?
10:34:44 <pesco> No.
10:35:04 <shapr> Ok, so the author will need to create at least one good solution to the problem.
10:36:02 <pesco> Yes.
10:36:26 <shapr> Any other column ideas?
10:38:27 <pesco> How about a code review column? I think treating code like literature, reading and criticizing it, is good.
10:38:43 * autrijus purrs.
10:38:45 <shapr> I very much agree. That sort of writing is sorely lacking in the programming community.
10:38:56 <gzl> heh neat idea
10:39:01 <shapr> Question is, who will write it?
10:39:09 <shapr> I don't think I'm qualified to do that.
10:39:13 <gzl> one of you is starting up a programming webzine or something?
10:39:23 <shapr> heh, sort of.
10:39:43 <shapr> OCaml has a weekly magazine, and I'm jealous :-)
10:39:45 <gzl> haskell or any language?
10:39:46 <pesco> shapr: You don't think you are?
10:39:49 <gzl> haha
10:40:25 <shapr> pesco: no, I don't think so. Pseudonym is better qualified than me.
10:40:30 <shapr> than I?
10:40:43 <shapr> gzl: want to write an article for The Monad.Reader?
10:40:48 <gzl> "than I"
10:40:54 <gzl> i'm not qualified
10:40:59 <shapr> Swedish is confusing my English.
10:41:13 <shapr> gzl: I'm not qualified to start a wikizine, but I have four weeks!
10:41:23 <gzl> i could give an article a once-over for grammar and stuff if you want, though.
10:41:41 <gzl> well, it would look pretty silly if I wrote for a webzine with "monad" in the title when I don't know what monads are yet. :)
10:41:59 <shapr> You could write about a new user's view of Haskell.
10:42:21 <musasabi> Having someone write about ghc6.4 (which should/could be out by then) would be nice.
10:42:29 <autrijus> "Introduction to Gonad Transformers"
10:42:32 <gzl> in theory, but i don't think i have anything original or interesting to say about it
10:42:33 * shapr snickers
10:43:11 <shapr> Believe it or not, newbies are a scarce resource in the Haskell world. They tend to quickly become users or absent.
10:43:20 <gzl> also I'm just swamped right now, so it would have to wait a few weeks
10:43:37 <shapr> Ah, not for the first issue then.
10:45:12 <gzl> anyway, i have to run. i'll be around, so you can feel free to keep me posted if you want
10:45:13 <pesco> shapr: Of course the more knowledgeable/experienced the author, the more "qualified" the critique, but I don't think code review is only for "the masters".
10:45:14 <shapr> ok
10:45:46 <shapr> pesco: judging by writing style, *you* should do it as an .lhs
10:46:21 <pesco> ;-) I'll think about it, if you want.
10:46:31 <shapr> yes please!
10:46:36 <pesco> *thinking*
10:46:39 * shapr grins
10:46:57 <shapr> autrijus: want to write an article in your copious free time? ;-)
10:47:45 <autrijus> shapr: talking about pugs? ;)
10:47:49 <shapr> sure!
10:48:00 <autrijus> maybe. I will present it on yapc.tw anyway.
10:48:11 <autrijus> which is march 26th
10:48:24 <autrijus> I'll see if I can do an article at the same time as my slides.
10:48:28 <shapr> spiffy
10:48:55 * autrijus is conspiring with some perl folk on making a version of perl that depends on ghc to build.
10:49:04 <shapr> oh my
10:49:13 <shapr> that sounds cool
10:49:15 <pesco> muahaharr!
10:49:20 <musasabi> that sounds very evil.
10:49:24 <musasabi> and nice.
10:49:33 <autrijus> well, for end users it's all just binaries.
10:49:36 <autrijus> won't make a difference.
10:49:38 <shapr> It's like mutual backscratching... ghc depends on Perl, so...
10:49:48 * musasabi thinks about trying to bootstrap a system with ghc depending on perl and perl depending on ghc.
10:49:53 <autrijus> ghc depends on perl5 and perl5i depends on ghc.
10:49:56 <autrijus> perl5i /= perl
10:50:13 <Spark> define an appropriate equivlence relation
10:50:23 <pesco> Exactly. Sounds like protruding a very sticky tentacle into the heart of something from the depths below.
10:52:32 * Spark dwells on that image for a while
10:53:10 <musasabi> What is perl5i ?
10:54:19 <pesco> The international version including strong crypto?
10:54:46 <pesco> excluding, that is
10:55:36 <shapr> pesco: What's the name of the Code as Fine Literature column? Mastercode Theatre?
10:55:59 <shapr> Gotta be something better than that.
10:56:07 <samc> Mystery Mastercode Theatre 3000
10:56:19 <pesco> I was JUST about to SAY THAT!
10:56:24 <pesco> But it's kind of cheesy.
10:56:26 <samc> heh :)
10:56:27 <shapr> That's for critiquing PHP code ;-)
10:56:43 <shapr> Well, I'll put in as the name for now.
10:59:14 <shapr> @wiki TheMonadReader
10:59:14 <lambdabot> http://www.haskell.org/hawiki/TheMonadReader
10:59:51 <shapr> edwinb: want to write about the modularity of dependent types?
11:00:45 <edwinb> I could do, but it probably ought to wait until I have a good story to tell about it...
11:00:51 <shapr> ok
11:00:56 <edwinb> I can make wild claims if that's okay ;)
11:01:10 <pesco> Yes! We _need_ a wild claims column!
11:01:30 <shapr> that would be nifty
11:03:25 <shapr> Any other ideas for The Monad.Reader ?
11:04:08 * edwinb looks at the ocaml magazine for inspiration
11:04:18 <shapr> hoi swiert, http://www.haskell.org/hawiki/TheMonadReader
11:04:25 <edwinb> Or rather...
11:04:30 * edwinb looks *for* the ocaml magazine for inspiration
11:05:17 <pesco> shapr: "The Probe" or "Code Probe"?
11:05:33 <swiert> hi shapr - I could definitely write an article after March 7th.
11:06:07 <shapr> edwinb: http://lists.idyll.org/listinfo/caml-news-weekly/
11:06:15 <shapr> swiert: excellent!
11:06:18 <ikegami--> aha
11:06:25 <ikegami--> haskell magazine?
11:06:32 <shapr> yes, want to write?
11:06:39 <edwinb> Thanks. I failed to google it...
11:07:01 <shapr> pesco: or maybe Debug.Critique 
11:07:03 <humasect> o_o
11:07:14 <ikegami--> I doubt that I can write, however, I can announce the magazine at Japanese Haskell mailing list 
11:07:20 <pesco> shapr: Hm, :/
11:07:55 <shapr> ikegami--: Nifty, the magazine hasn't really started yet, but the wiki page asking for ideas, authors, and articles is online.
11:07:58 <ikegami--> (and may translate the articles to Japanese)
11:08:08 <shapr> that would be cool!
11:08:34 <shapr> pesco: if you're gonna write it, you can name it anything you like :-)
11:08:39 <humasect> another japanese-speaking haskeller =)
11:08:41 <pesco> shapr: Yippie!
11:08:58 <pesco> pesco: I'll let you know my decision by the end of today (CET). ;-)
11:09:04 <ikegami--> where is the webpage?
11:09:10 <shapr> @wiki TheMonadReader
11:09:10 <lambdabot> http://www.haskell.org/hawiki/TheMonadReader
11:09:13 <humasect> the ocaml-mag doesn't go back very far. i believe it started in 2001
11:10:24 <edwinb> Hmm, the ocaml thing isn't quite what I imagined, somehow.
11:11:26 <humasect> it's kind of a newsletter
11:11:53 <ikegami--> cool
11:12:01 <shapr> Haskell has only the HC&AR right now.
11:13:06 <redhatPT> hi there!
11:13:12 <humasect> 'monthly new project (potential/aspirated)
11:13:13 <shapr> óla!
11:13:25 <humasect> $B$3$l$K0J>e(B
11:13:40 <pesco> The wiki server's time seems to be off by ~15 minutes...
11:13:43 <redhatPT> can anyone tell me how to install the collours in vim to use with .hs files?
11:13:49 <shapr> pesco: hm, I can fix that.
11:14:04 <pesco> apt-get install openntp maybe?
11:14:19 <shapr> if only it were debian :-/
11:14:28 <pesco> Oh. What is it?!
11:14:29 <ikegami--> humasect: I am Japanese, but, now I have stayed Europe :)
11:14:34 <Igloo> Or rotate the Earth 3.75 degrees
11:15:02 <redhatPT> pesco, that waas for me?
11:15:07 <redhatPT> *was
11:15:12 <shapr> It's redhat something, rh9 or fc1 I think.
11:15:24 <shapr> whoa, apt-get sort of works on haskell.org
11:15:26 <pesco> redhatPT: No, for shapr.
11:15:28 <shapr> huh
11:15:31 <redhatPT> ohh ok ok 
11:15:32 <redhatPT> :)
11:16:04 <redhatPT> anyone?
11:16:21 <humasect> re; TMR: 'Monthly' is redundant in the idea bullets, no?
11:16:21 <shapr> I've seen vim syntax files, but I don't remember where.
11:16:28 <shapr> humasect: yes, it is.
11:16:38 * shapr fixes
11:17:08 <humasect> monthly and monad may sound nice together. 'reader'?
11:17:12 * autrijus begins to understand why people calls haskell "specs that happen to be executable."
11:17:17 <autrijus> # http://autrijus.org/pugs/Parser.hs
11:17:39 <redhatPT> ohhh
11:17:48 <redhatPT> my bad :S :syntax enable
11:19:27 <shapr> autrijus: nice!
11:20:20 <autrijus> shapr: surprisingly that was enough parses existing perl6 test cases, except for the "rules/grammar/regex" part
11:20:30 <autrijus> s/parses/to parse/
11:20:39 <autrijus> parsec is so very wrong.
11:21:03 * humasect added two things to TMR
11:21:07 <shapr> humasect: A lot of older journals in the USA had titles like The Daily Reader, or The Cow Reader, or something like that.
11:21:22 <humasect> hmm =)
11:21:39 <shapr> So it's a pun on those old journal titles, and the existing Haskell module Monad.Reader
11:21:48 <humasect> ahh.
11:22:29 <shapr> And also the fact that monad is month in german, and very close to month in swedish.
11:22:53 <pesco> Sorry, it's "Monat".
11:22:54 <humasect> oh, cool
11:23:20 <shapr> pesco: oops
11:23:27 * pesco shrugs.
11:23:33 <pesco> So just very close as well.
11:24:42 <shapr> humasect: neat article idea
11:24:51 <humasect> pronounced like gonad.
11:26:12 <humasect> column != article?
11:26:41 <pesco> A column is recurring.
11:27:14 <shapr> Right, a column happens every month. Like a Puzzles column would have a different puzzle every month.
11:27:17 <pesco> Every issue contains an article on the column's topic in the column.
11:28:11 <shapr> I'll mention this on haskell@haskell.org
11:28:16 <humasect> ahh
11:28:42 <shapr> I wonder if I should host this on the HaskellWiki, or if I should put it on a separate wiki.
11:28:59 <xerox> hi!
11:29:12 <shapr> hiya xerox 
11:29:28 <humasect> host+digest
11:29:34 <humasect> from hwiki
11:29:41 <ikegami--> if the page is introduced by ./ (slashdot.org), then accesses are explored
11:29:47 <ikegami--> i guess 
11:30:04 <ikegami--> (at the moment)
11:30:05 <humasect> true
11:30:13 <swiert> shapr: I would set up a separate wiki + pdf/some other format file for offline reading.
11:30:55 <shapr> Yeah, good point.
11:31:24 <humasect> the Csound e-zine is a good inspiration as well
11:31:30 * shapr googles
11:32:32 <shapr> Wow, Csound e-zine is something to aspire to.
11:33:41 <humasect> the content is quite inspiring for Csounders. that is the main thing, probably
11:34:30 <shapr> That's the goal for TMR as well.
11:34:30 <shapr> To be inspiring for Haskellers.
11:35:38 <ikegami--> anyway TheMonadReader is good name :)
11:35:44 <shapr> thanks :-)
11:36:13 <shapr> hej psi 
11:36:16 <psi> hej
11:36:44 <humasect> and a veiw for could-be skellers
11:36:51 <swiert> shapr: what kind of reader is TMR going to be (audience, level of articles, etc)
11:38:32 <autrijus> tryRead s
11:38:32 <autrijus>     | ((a, _):_) <- reads s = a
11:38:32 <autrijus>     | otherwise             = 0
11:38:40 <autrijus> is this sane, or did I miss something builtin again?
11:38:59 <CosmicRay> bwahahaha.  my python integration is nearly complete.
11:39:40 <CosmicRay> I just need to add the ability to call object methods and handle exceptions
11:39:43 <CosmicRay> and then it will be done
11:39:44 <CosmicRay> whee
11:39:55 <autrijus> python integration vs haskell?
11:39:58 <autrijus> url?
11:40:09 <CosmicRay> no url yet but you can check out my code in arch if you like
11:40:18 <CosmicRay> autrijus: I'm making it possible to call Python from Haskell
11:40:21 <autrijus> so this is like, inline haskell code in python?
11:40:24 <autrijus> oh, the other way around.
11:40:25 <CosmicRay> no
11:40:29 <CosmicRay> yes
11:40:36 <autrijus> can python callback?
11:40:43 <CosmicRay> it can, but I'm not supporting it yet
11:40:53 <shapr> swiert: I think anything goes, as long as it's good content.
11:41:05 <autrijus> ok. I'm doing the same for perl, so url to arch repo please :)
11:41:06 <Igloo> With the FFI and making python look like C, or something more clever?
11:41:20 <CosmicRay> autrijus: my goal with this is to make it easy to develop normal Haskell interfaces to stuff in the Python standard library
11:41:28 <autrijus> CosmicRay: exactly my goal.
11:41:30 <autrijus> ;)
11:41:34 <CosmicRay> Igloo: yes, plus haskell wrappers atop that
11:41:40 <CosmicRay> autrijus: I wish you would have told me that on Friday :-)
11:41:44 <shapr> swiert: or at least, that sort of decision should depend on reader feedback, and we haven't had any readers yet.
11:41:55 <CosmicRay> autrijus: I briefly lookd at the Perl API but I am more familiar with Python, so I went that way
11:42:08 <autrijus> CosmicRay: that's fine. how do you plan to deal with GC?
11:42:15 <CosmicRay> autrijus: archive jgoerzen@complete.org--projects, project missingexts--head--0.7, url http://arch.complete.org/projects
11:42:17 <autrijus> there are two collectors.
11:42:21 <autrijus> one at either side.
11:42:31 <CosmicRay> autrijus: I link the ForeignPtr's cleanup function to PY_DECREF
11:42:39 <autrijus> ah. python also uses refcounting.
11:42:44 <CosmicRay> so when the haskell object is done, it decrements the reference counting ini python
11:42:46 <autrijus> what about the other way around?
11:42:56 <CosmicRay> autrijus: yes.  perl does too, but its api was confusing to me.
11:43:02 <CosmicRay> autrijus: I do not support calling haskell from python at this time.
11:43:03 <autrijus> or you are just exposing haskell functions, not haskell values?
11:43:08 <autrijus> I see.
11:43:14 <CosmicRay> I'm not exposing anything from haskell
11:43:20 <CosmicRay> I'm exposing python *to* haskell only
11:43:26 <autrijus> gotcha.
11:43:38 <autrijus> I'm doing Inline::Haskell and it is customary to call bothways.
11:43:53 <autrijus> so I'm trying to think a clever way to wrap haskell funs/values.
11:44:03 <CosmicRay> I follow the Keep It Simple, Stupid principle.  I have no need to call to Haskell from PYthon, so I'll just not bother with that
11:44:16 <autrijus> nod nod
11:44:22 <CosmicRay> dealing with bidirectional GC's will not be fun, you are right :-)
11:44:37 <autrijus> the thing is, haskell's FFI is far saner than perl's.
11:44:39 <swiert> shapr: but there's already a pretty large market for research articles. I would try to go for a "light-weight" reader.
11:44:39 <swiert> shapr: stuff that isn't suitable for a functional Pearl, but the neat tip, tricks, and tools.
11:44:41 <autrijus> and I suspect than python's.
11:44:48 <CosmicRay> autrijus: yes, haskell FFI is awesome.
11:44:54 * humasect nod
11:44:57 <CosmicRay> autrijus: I haven't seen any other language with as nice of an interface to C
11:45:00 <autrijus> so calling out from haskell is always pleasant :)
11:45:04 <CosmicRay> autrijus: it totally kicks ass
11:45:06 * autrijus nods in vehement agreement
11:45:17 <ikegami--> oho
11:45:46 <ikegami--> humasect: I read your email at Japanese Haskell Mailing List
11:45:58 <CosmicRay> autrijus: so anyway, once the low level is complete, I intend to make Python files and "file-like objects" first-class citizens of Python, and a member of my HVIO virtualization class
11:45:59 <ikegami--> just now
11:46:13 <CosmicRay> autrijus: that will give us bz2 and gzip support with about 5 lines of code each.
11:46:24 <autrijus> CosmicRay: that's awesome.
11:46:29 <ikegami--> humasect: so, may I introduce you to members?
11:46:32 <shapr> swiert: otoh, many research articles are not accessible to those of us who are not associated with a college.
11:46:35 <CosmicRay> autrijus: then I intend to make the Python tarfile and zipfile modules instances of my HVFS class, so we can look inside tar and zip files as a filesystem.
11:46:38 <humasect> ikagami: sure =)
11:46:45 <ikegami--> humasect: your message is sharp, but, too short.
11:46:51 <CosmicRay> autrijus: finally, I intended to do something with pyopenssl, but I don't yet know what :-)
11:46:53 <humasect> i thought so too..
11:47:13 <ikegami--> humasect: please don't mind, we are welcome
11:47:25 <humasect> there is too much about my person to summarise without rudeness
11:47:29 <CosmicRay> autrijus: I figured I'd rather write the FFI interface to python than write a bunch of interfaces to all these little libraries
11:47:31 <humasect> thanks
11:47:39 <ikegami--> short as like haskell
11:47:46 <autrijus> CosmicRay: my main interest is calling parsec and other Amazing Technologies from perl. this direction is harder but imho more fruitful.
11:47:46 <CosmicRay> plus, there's a lot of stuff out there that exports a file-like object in python
11:47:46 <humasect> =D
11:48:01 <autrijus> "more fruitful" in the sense of luring more people into haskell :)
11:48:05 <CosmicRay> autrijus: ok, your intent is different than mine
11:48:10 <CosmicRay> autrijus: I'm not so sure
11:48:21 <CosmicRay> autrijus: I think that the main problem with Haskell is lack of supporting libraries
11:48:36 <CosmicRay> autrijus: so what I want to do is dramatically expand the libraries available for use in Haskell, and do that quickly.
11:48:58 <autrijus> CosmicRay: sure, but calling in neccessarily makes bothway open
11:49:06 <autrijus> (I do intend to do full callbacks each way)
11:49:20 <autrijus> so it will have the nice effect of making CPAN accessible to haskell.
11:49:20 <xerox> You haskell people will dig this: http://www.iqtest.dk/main.swf ;-)
11:49:26 <Oeje1> humasect: Is it rude in Japan to write about one self many good things?
11:49:51 <autrijus> CosmicRay: fwiw, I did exactly that with http://search.cpan.org/dist/Language-MzScheme/script/mzperl
11:49:51 <swiert> shapr: too true. I think that if you want to tap the pool of academic authors (the lion's share of Haskell programmers), you should provide them with some sort of new platform for publishing their work.
11:50:11 <CosmicRay> autrijus: I'd rather let people use Haskell for writing all their code.  They don't even have to know that there is Python giong on there
11:50:17 <CosmicRay> but they can use it if they like
11:50:20 <CosmicRay> autrijus: interesting
11:50:39 <CosmicRay> the other nice thing about the Python API is that one can generally avoid actually having to interpret anything on the fly
11:50:46 <CosmicRay> that is, no shoving of commands to Python via strings
11:50:55 <shapr> swiert: Can you expand on that?
11:50:55 <CosmicRay> the C API is rich enough to pass things back and forth directly.
11:51:12 * autrijus notes that perl xs also does that, in a more primitive and convoluted way.
11:51:19 <autrijus> typically perl.
11:51:35 <shapr> swiert: I would like academic authors. How does a new platform help?
11:51:45 <shapr> xerox: that background is making me crazy
11:52:51 <samc> why will we like it? is it funny or just an iq test?
11:53:01 <ikegami--> humasect: do you have your profile on the web?
11:54:14 <ikegami--> (oh, sorry google replys instead)
11:57:12 <swiert> shapr: sure. Academic authors are always trying to promote their own work. They can publish articles in JFP or whatever - but they often have a lot of tools or ideas which aren't suitable for academic journals.
11:57:12 <swiert> shapr: for instance, an introduction to attribute grammars paper isn't worth writing, because there's nothing new in it.
11:57:12 <swiert> shapr: but it is worthwhile if you can address a broad audience with a few cleverly chosen examples.
11:57:43 <humasect> Oeje1: i consider it rude without being asked.. maybe it is modesty
11:58:09 <humasect> ikegami: i have a profile from google? o_o
11:58:19 <CosmicRay> autrijus: I tried reading about perl xs on saturday
11:58:32 <CosmicRay> autrijus: the documentation was rather disorganized and confusing
11:58:53 <CosmicRay> python's isn't stellar, but it is better, and has useful examples at times :-)
12:00:39 <ikegami--> humasect: yes, but it is info-less...
12:01:38 <autrijus> CosmicRay: right. the best perl xs book is http://www.amazon.com/exec/obidos/ASIN/1930110820/
12:01:59 <humasect> i'll write a profile =)
12:02:03 <autrijus> without such a book it is very difficult in grokking XS in full.
12:04:08 <CosmicRay> autrijus: that's ok.  no offense to chip, but I prefer to stay as far away from perl as I can in most circumstances :-)
12:04:41 <autrijus> chip is a perl hacker?
12:04:47 <CosmicRay> yes
12:04:51 <autrijus> "chip" salzenberg?
12:04:55 <CosmicRay> yes
12:05:14 <CosmicRay> I think so, anyway.
12:05:15 <autrijus> ah!.
12:05:16 <autrijus> hi chip.
12:05:20 <pesco> shapr: I'll do it. *g* Title it "Code Probe"
12:07:47 <pesco> I'm off to bed. G'night everyone.
12:08:08 <musasabi> night.
12:13:23 <chip> Hi
12:13:57 <chip> Just checking out the competition.  I like how "let" statements end with "in".  That's cute.
12:14:06 * chip taunts happy fun channel
12:15:13 <autrijus> hey chip :)
12:16:03 <autrijus> I'm following your 5-years-ago trails.
12:16:42 <autrijus> is 0.11 the latest topaz?
12:17:42 <Igloo> "let" statements don't end with "in". "let" *expressions* do have an "in" in the middle, though
12:17:59 <autrijus> in monads let statements doesn't have an "in".
12:18:03 <autrijus> which confused me a lot.
12:18:51 <musasabi> where statements are much nicer ;)
12:19:39 <chip> autrijus: I don't remember if the last one had a version number or not.  The SourceForge CVS should still allow anonymous checkout.
12:19:59 <autrijus> okie.
12:20:15 <chip> Igloo: well, that's the way the language is specified.  In practice people actually say "let x = y in", hit Enter, and keep typing
12:20:25 <chip> (I speak from code review, and thus may be wrong)
12:20:50 <autrijus> chip: you're reviewing haskell code as part of your job?
12:21:28 <Igloo> No, the spec says "exp -> let decls in exp" and "stmt -> let decls;" (http://www.haskell.org/onlinereport/syntax-iso.html)
12:24:27 <jlouis> oh, haskell has statements
12:24:57 <Igloo> Yup, inside do blocks
12:25:25 <xerox> shapr, did you do it?
12:26:03 <jlouis> So how do you do that? let foo = bar; l <- ... ?
12:26:22 <jlouis> decls implies there are mory than one
12:26:28 <chip> autrijus: No, it's just that I have to see/work with Java here, and it's made me research the basics of whaat makes a language good
12:26:35 <jlouis> but how are they separated? (guess I should read the report, heh)
12:26:54 <Igloo> do ...; let {foo = bar; baz = quux}; ...   or use layout to achieve the same end
12:27:56 <jlouis> the ``end'' can be omitted too if you are layouting properly, right? I don't remember I've seen it
12:28:06 <jlouis> but on the other hand, I code too little Haskell
12:28:12 <Igloo> ``end''?
12:28:42 <jlouis> you write: layout to achieve the same end. I wondered if the last end was part of the grammar ;)
12:28:48 <jlouis> you wrote even
12:29:08 <Igloo> I meant "layout to achieve the same result"
12:29:35 <autrijus> chip: I see. is it because you consider Java "good"?
12:29:37 <ikegami--> ok, i'm going to home, bye
12:32:01 <jlouis> autrijus: Gosling said they set out with Java to capture the C++ programmers. It seems they succeeded quite a bit at that
12:32:49 <jlouis> I do not have a grudge against Java per se. But it is not an expressive language. And there is much mere work when doing even simple things 
12:33:01 <autrijus> it is a great team language though.
12:33:13 <autrijus> I, however, am no team right now.
12:33:20 * autrijus writes some more haskell
12:33:35 <shapr> xerox: bah, I got 118 :-/
12:34:09 <shapr> but I can complain because the swf didn't work quite right on linux
12:34:11 <shapr> ;-)
12:35:34 <shapr> xerox: what did you geet?
12:38:26 <psi> the test got pretty darn hard towards the end
12:38:48 <shapr> yeah, I agree, what did you get?
12:38:54 <psi> 120
12:39:04 <shapr> A lot of the text is missing in my browser.
12:39:18 <humasect> ikegami: bye
12:39:28 <shapr> there's stuff I can click on that but I can't see what I'm clicking on, or the contents of the popup.
12:40:59 <shapr> psi: that's my only excuse ;-) http://www.scannedinavian.org/~shae/iqtest.png
12:42:28 <shapr> xerox: neat test
12:42:34 <psi> well, there was no text in the actual test :)
12:42:42 <shapr> there was in the menu
12:43:12 <shapr> I got stuck on a screen where I could only see numbers and nothing to click on
12:43:24 * shapr shrugs
12:43:34 <psi> ah, the age thing?
12:43:35 <Oejet> The questions were very weird in the end.  No heads or tails in them.  Oh, and did you notice some function definitions in there?
12:43:51 <shapr> psi: is that what it was? I didn't see any text =)
12:44:02 <shapr> I think I clicked 65+
12:44:16 <psi> yes. it said that they needed the age to compute the iq correctly
12:44:17 <CosmicRay> @idnex mkTyCon
12:44:17 <lambdabot> Sorry, I don't know the command "idnex", try "lambdabot: @listcommands"
12:44:20 <shapr> oops
12:44:24 <CosmicRay> @index mkTyCon
12:44:24 <lambdabot> Data.Dynamic,Data.Generics,Data.Generics.Basics,Data.Typeable
12:44:26 <psi> *grin*
12:45:07 <Oejet> Huh?  I didn't click any age. :-[
12:45:35 <shapr> Oejet: I guess it's a win32-only test, can't be too accurate ;-)
12:45:46 * psi is using linux
12:45:49 <shapr> !
12:45:59 <Oejet> !
12:46:03 <psi> konqueror, flash 7
12:46:04 <shapr> psi: your computer is smarter than mine.
12:46:26 <shapr> I'm using galeon with the debian flash plugin.
12:47:39 <Oejet> I guess that the really good people either 1) don't take the test, or 2) use Windows. :-P
12:47:57 * shapr grins
12:49:15 <basti_> hi
12:49:25 <psi> hi
12:49:54 <shapr> hey basti_, want to write for The Monad.Reader?
12:50:01 <basti_> o0
12:50:04 <basti_> write what??
12:50:12 <basti_> and, like, right now?
12:50:41 <shapr> Well, in the next few weeks.
12:50:50 <shapr> @wiki TheMonadReader
12:50:51 <lambdabot> http://www.haskell.org/hawiki/TheMonadReader
12:50:56 <shapr> hiya duncan 
12:51:08 <shapr> looking for Haskell info?
12:51:38 <basti_> oof.
12:52:04 <shapr> I thought you might want to write about Haskore and CSound.
12:52:13 <duncan> hiya
12:52:56 <shapr> basti_: just an idea :-)
12:53:03 <shapr> duncan: what we can do for ya?
12:53:04 <basti_> i have yet to complete work a seminar but then i'm free
12:54:04 <duncan> shapr: hopeing to talk to kosmikus about gentoo issues but maybe this is the wrong channel
12:54:34 <shapr> If it's haskell gentoo issues, it's the right channel.
12:55:18 <kosmikus> better pm, I think
12:55:20 <duncan> shapr: it is haskell gentoo issues
12:55:43 * boegel bounces
12:55:46 * shapr boings
12:55:59 <Igloo> Oh, gentoo people, do your ghc packages depend on libreadline-dev and libgmp-dev (or your equivalents)?
12:56:15 * boegel tries the iq test
12:56:43 * Oejet tried the test again.
12:57:21 <Oejet> And failed. :'(
12:57:24 * shapr goes to work
12:58:56 * Igloo finds http://www.gentoo-portage.com/dev-lang/ghc/dep
12:59:15 <autrijus> @wiki PerlUsersGolfingSystem
12:59:16 <lambdabot> http://www.haskell.org/hawiki/PerlUsersGolfingSystem
12:59:58 <shapr> autrijus:  screenshot or paste is wort putting on that page, the Hugs parody is entertaining.
13:00:05 <shapr> worth*
13:00:07 <Igloo> kosmikus: So your deps would allow ghc build with readline 4 to be installed with readline 5, which in theory isn't guaranteed to be compatible, right? (and similarly with gmp)
13:01:18 <kosmikus> Igloo: yes, but that's a general Gentoo problem
13:01:47 <boegel> shapr: I see TMR is really coming up to speed
13:01:56 * xerox got 122, and bounces happily.
13:02:01 <shapr> boegel: want to write an article or column?
13:02:14 <Igloo> Hmm, OK. Unfortunately it's also a specific debian problem  :-)
13:02:23 <autrijus> shapr: done.
13:02:43 <shapr> very cute :-)
13:03:01 <xerox> shapr, how did the test go? ^_^
13:03:24 <shapr> xerox: 118 for me, though maybe because I clicked 65+ as my age...
13:03:32 <Igloo> kosmikus: Couldn't most of gentoo depend on gmp >= 4.1, gmp < 5?
13:03:44 <xerox> O_o
13:03:54 <basti_> iq test?
13:03:55 <shapr> some of the text was missing on my browser
13:04:01 <shapr> yup
13:04:24 <basti_> i scored 112 when i was 17 on a stanford binet test
13:05:11 * shapr blames his low score on years of Visual Basic programming
13:05:19 <xerox> Ahah.
13:07:42 <boegel> shapr: I don't know...
13:11:52 <kosmikus> Igloo: well, but it works with gmp-5, doesn't it?
13:13:17 * Philippa looks at the pugs screenie and laughs
13:13:29 <autrijus> :)
13:13:33 <Philippa> though it's a lot more comprehensible than the output of the first version of tugs
13:13:52 <autrijus> tugs?
13:14:05 <Philippa> tyop user's gratification system (or whichever variant I'm dubbing it today)
13:14:09 <Philippa> the interpreter for the lang I'm working on
13:14:14 <autrijus> ahh.
13:14:50 <autrijus> hmm. I should just call it version 6.2 instead of 6.28.
13:15:01 <autrijus> I'll soon run out of digits that way.
13:15:09 * autrijus imagines "version 6.283185307"
13:16:10 <Igloo> kosmikus: I don't know if it will - it doesn't exist yet does it? But it's certainly not guaranteed to
13:16:59 <kosmikus> Igloo: take readline as an example
13:17:00 <basti_> isnt the version number of latex approaching pi?
13:17:09 <autrijus> yes.
13:17:34 <kosmikus> Igloo: afaik, ghc works with both 4 and 5, if compiled with the appropriate version -- it might even work by resymlinking 5 to 4
13:18:11 <kosmikus> Igloo: but there's no way to express with dependencies that a later upgrade of readline should imply recompilation of ghc
13:19:17 <psi> shapr: http://www.scannedinavian.org/~shae/yogi.jpg <- what is this guy about to do? O_O
13:19:21 <kosmikus> Igloo: otoh, depending on readline > 4 and < 5 or something has the nasty side effect that someone with readline-5 installed will get readline downgraded when installing ghc
13:19:48 <kosmikus> Igloo: thereby possibly breaking other packages yet again
13:21:06 <samc> 121 but I did it undertime
13:21:18 <samc> that was HARD
13:21:56 <Igloo> Oh, of course, ghc won't be as clearcut for you. I should really be talking about ghc-bin
13:22:37 <Igloo> But anyway, it is of no consequence as you don't have a magic solution either  :-)
13:24:06 * Igloo heads homewards
13:24:09 * boegel got 135 on the iq-test and is very surprised
13:24:59 <boegel> psi: kill himself ? :)
13:25:44 <samc> heh, I was too impatient
13:26:42 <syntax_syntax> hello.
13:26:45 <psi> boegel: looks like it
13:27:48 <samc> when the pic was loading I thought there was going to be a half-pipe
13:50:34 * boegel yawns
14:04:52 <shapr> psi: that's a lovely unicycle drop by Yoggi Toulouse
14:05:53 <CosmicRay> hmm.
14:05:54 <psi> looks... dangerous
14:06:02 <CosmicRay> How can I use FFI to import a "const int" from C?
14:06:03 <psi> i would like to see a video of that
14:06:13 <CosmicRay> it's exported with "extern const int foo" in the .h
14:06:23 <basti_> CosmicRay: a const is nothing special
14:06:45 <basti_> from the c standpoint
14:06:51 <CosmicRay> /tmp/ghc1185.hc: In function `PythonziExceptionsziExcTypes_cException_entry':
14:06:52 <CosmicRay> /tmp/ghc1185.hc:51: error: called object is not a function
14:06:52 <CosmicRay> j
14:06:56 <CosmicRay> basti_: ghc doesn't like it though
14:07:00 <basti_> :(
14:07:08 <basti_> thats bad.
14:08:36 <shapr> psi: see if you can access http://thunderbird.scannedinavian.com/~shae/unifilms/
14:10:17 <shapr> psi: 1.2GB of unicycle films made and distributed by riders.
14:10:21 <boegel> I can :)
14:10:31 <boegel> can you point me too some cool ones ?
14:11:10 <shapr> yeah...
14:12:02 <shapr> 11_au_taquet* is my favorite, sam_wakeling_relax is great, 
14:12:03 <shapr> umm
14:12:53 <shapr> I dunno, they're all worth watching. I delete the sucky ones.
14:13:41 <psi> shapr: cool
14:14:59 <shapr> psi: Yoggi got sponsored by a french uni/bi cycle company named koxx, he gets paid to unicycle now.
14:15:42 <shapr> speaking of which, I've been thinking about how to write a unicycle game in Haskell...
14:15:56 <humasect> uniracers for snes is a good inspirational point
14:15:56 <basti_> uhm.
14:16:12 <humasect> 2dimensional, fast, stunts..
14:16:22 <humasect> jumps and loops, etc etc
14:16:38 <shapr> I have an idea for 3-dimensional, with *lots* of control. Very similar to a real unicycle.
14:16:43 <humasect> hmm..
14:16:47 <basti_> it should be somewhat like wipeout.
14:16:48 <basti_> =)
14:16:58 <shapr> Only way you could learn to control it would be to start unicycling on the moon, I think.
14:17:19 <basti_> (wipeout being the only game that caught my attention in the last 5 years or something)
14:17:36 <Nioate> good bad doing that in real life is not very practical
14:18:03 <basti_> im still waiting for a brain interface.
14:18:17 <boegel> shapr: some of those jumps are just insane
14:18:20 <basti_> with feedback.
14:18:34 <shapr> boegel: which film(s)?
14:18:40 <Philippa> a brain interface with feedback is a scary idea...
14:18:41 <boegel> au taquet
14:18:48 <basti_> its not.
14:18:56 <shapr> boegel: and the music is GREAT
14:18:57 <basti_> didnt you read "monkey think robot do"?
14:19:13 <boegel> shapr: hmm, it's ok... I don't really like French :)
14:19:14 <Philippa> lemme put this simply: I do not trust anybody building such an interface to get it right
14:19:28 <shapr> I like good music whatever the language.
14:19:30 <basti_> -g-
14:19:49 <boegel> shapr: are you in any of those clips ?
14:20:12 <psi> shapr: just watched 11_Au_TAQUET_10Mo.wmv. fascinating stuff
14:20:14 <shapr> boegel: Nah, I'm nowhere close to that good. I can freemount, hop, and ride stomach on seat. That's it.
14:20:26 <Philippa> basti_: if you've ever experienced any of the 'fun' mind-altering stuff folks prescribe atm, you'll know exactly what I mean
14:20:40 <psi> like how they jumped from quite high,  onto those tiny cylindrical objects
14:20:48 <basti_> Philippa: oh i experience "fun" mind altering stuff that folks DONT prescribe =)
14:21:00 <basti_> Philippa: you might be referencing to Ritalin?
14:21:02 <shapr> boegel: I have a few other tricks that are in-progress, I'll tell you about my first film when I have one :-)
14:21:17 <psi> the falls in the end were painful to watch :)
14:21:24 <basti_> jackass?
14:21:30 <Philippa> basti_: I'm not specifically, having never been prescribed it or talked in depth to somebody who has. SSRIs, however, are frequently bad shit
14:21:41 <psi> basti_: no, a unicycle video
14:21:44 <basti_> Philippa: oh.
14:21:51 <basti_> psi: i know :P
14:21:58 <duncan> friends of mine go mountain unicycling, I stick to the roads. much more practical.
14:22:03 <humasect> yeah the music is great =)
14:22:03 <boegel> psi: _really_ painfull
14:22:19 <shapr> psi: There's a traditional structure to unicycle films. First you show all the good stuff where you got it right, then you show a bit of the worst of the bad stuff. It's a good classical structure.
14:22:25 <basti_> Philippa: actually i think SSRIs still have a reason of being there.
14:22:30 <shapr> duncan: I may know them if they post to RSU, who?
14:22:31 <basti_> although their benefits are far overrated
14:22:38 <Philippa> oh, I agree they have a reason to exist
14:22:39 <psi> shapr: yeah, same as skateboard movies
14:22:43 <shapr> duncan: you unicycle also?
14:22:49 <Philippa> it's just that the side-effects are frequently shit and frequently underplayed by doctors
14:22:58 <basti_> ye.
14:23:13 <Philippa> and I'm not just thinking of the seroxat scare either
14:23:17 <basti_> and some of them are counterproductive.
14:23:23 <basti_> as in, decreased libido.
14:23:24 <duncan> shapr, RSU? probably not though, they're circus types
14:23:30 <basti_> in someone who's depressed. i mean, come on.
14:23:32 <Philippa> decreased or masked
14:23:39 <basti_> whats seroxat?
14:23:51 <shapr> duncan: rec.sport.unicycling is RSU. It's also accessible via the unicyclist.org forum.
14:23:52 <duncan> shapr: I do unicycle, though on roads.
14:24:02 <Philippa> both my b/f and I've experienced situations where it's all /there/, we just don't perceive it. Which is worse, 'cos if nothing else everybody else does after a couple of months
14:24:20 <Philippa> an SSRI with a strong dependency problem, ties to suicide etc etc
14:24:24 <shapr> duncan: excellent, do you have a website? I keep a list of unicycling programmers on my wiki. And there's the #unicycling channel too.
14:24:25 <Philippa> I forget the generic name
14:24:26 <humasect> hmm, mostly jumping with a wheel more than anything special.
14:24:32 <humasect> normal human jumping.
14:24:33 <basti_> i see
14:24:35 <duncan> shapr: ah. I don't know if they post there.
14:24:37 <boegel> I tried skating once for a week... my legs were totally full of scratches and bruses (spelled correctly ?)
14:24:47 <humasect> bruises
14:25:07 <Philippa> it caused a major outcry about drug regulation, because there was no warning about the dependency (apparently "addictive" is defined as requiring increasingly large quantities over time)
14:25:31 * basti_ nods
14:25:32 <boegel> humasect: thanks :)
14:25:39 <stepcut> my brother tried skateboarding once -- within the first week his was in the hospital to get is spleen removed
14:25:50 <duncan> shapr: I ordered a coker from Roger at unicycle.com
14:25:51 <Philippa> there was also a serious problem with prescribing it to children which wasn't caught for a long time
14:25:58 <boegel> spleen ?
14:25:59 <basti_> im still wondering how easy people regard ritalin
14:26:00 <shapr> duncan: oh, I'm jealous =)
14:26:17 <shapr> duncan: we should talk about this on #unicycling, it's on topic there
14:26:17 <Philippa> "how easy"?
14:26:31 <basti_> yes as in "oh kiddo is hyperactive lets get him some ritalin"
14:26:36 <Philippa> ah
14:26:39 <humasect> i've hurt myself once in 2 years of skateboarding
14:26:56 <basti_> ...speaking about off topic lol...
14:27:09 <boegel> here it's called 'relatine'
14:27:14 <Philippa> if it works, it works, but from what I've read if you /don't/ have the right condition it's a bad move
14:27:30 <duncan> shapr: true, it's not haskell (but look at the size! http://www.unicycle.com/shopping/shopexd.asp?id=84)
14:27:36 <Philippa> and there's a big problem with doctors fucking about with 'psych' issues and completely ignoring little things like subjective experience
14:27:49 <basti_> from what i've figured out myself the ritalin thing is mostly a magic thinking thing.
14:27:52 <shapr> duncan: yes, I know all about cokers...  but don't own one.
14:28:04 <basti_> bascially ritalin is speed which some doctors believe to have magical properties.
14:28:05 <Philippa> "mostly" in that the cases where it works are fairly specific, yeah
14:28:14 <basti_> i dont say speed wouldnt work.
14:28:15 <basti_> :)
14:28:42 <Philippa> I get the impression ADHD is overdiagnosed, certainly
14:28:47 <basti_> it is.
14:28:57 <shapr> I have ADHD, and Concerta.
14:29:04 <basti_> whats concerta?
14:29:05 <Philippa> it seems that it's being mistaken for 'pathological boredom' in the same way asperger's has been for 'pathological geekiness'
14:29:10 <boegel> when some kid is giving people a hard time, he's daignoses ADHD
14:29:44 <basti_> well but aspergers actually is a well defined syndrome. i dont think thats the case with ADHD.
14:29:59 <Philippa> it's not been that well-defined
14:30:16 <basti_> i think aspergers while wobbly is still grades better than adhd
14:30:17 <shapr> Concerta is a mixture of ritalin and various hydrochlorides that metabolize at different rates
14:30:21 <Philippa> quite likely, yeah
14:30:32 <shapr> that way it works for up to 12 hours rather than the normal 4 hours of straight up ritalin.
14:30:34 <Philippa> (FWIW, I've been diagnosed with asperger's, most likely reasonably accurately)
14:30:47 <basti_> i mean if i look at a adhd symptom list i go like: "hey man that is NORMAL"
14:30:50 <Philippa> heh
14:31:06 <shapr> have you read what I've written about Attention Deficit Disorder?
14:31:18 <basti_> shapr: i didnt say taking speed doesnt make people more concentrated.
14:31:29 <Philippa> I get the impression there's very much a group that does have an issue, but similarly people with asperger's tend to be a step beyond socially uncomfortable
14:31:34 <shapr> basti_: check it out - http://c2.com/cgi-bin/wiki?AttentionDeficitDisorder
14:31:41 <boegel> shapr: about TMR, I don't know if I'm good enough to write an article
14:31:41 <basti_> -click.-
14:32:01 <Philippa> (I can explain some of what that step is, if anybody's bothered)
14:32:23 <shapr> boegel: Sure you are, you could write about your raytracer. You could talk about how you view Haskell as compared to procedural languages.
14:32:58 <basti_> i mean aspergers are quite recognizeable. I dont doubt aspergers is real. I even heard about a study among "spectrum" people that found differences in the brain stem
14:33:08 <shapr> ADHD is very real.
14:33:15 <shapr> Spend a few hours with me, you'll know that.
14:33:18 <boegel> shapr: I don't know if I should publish anything on my raytracer before I finished my thesis...
14:33:37 <shapr> boegel: oh, I hadn't thought of that. Can you think of anything you would want to write about?
14:34:02 <shapr> basti_: or, just ask the people who did spend time with me at ICFP03
14:34:12 <basti_> shapr: well but is it an illness?
14:34:12 <boegel> shapr: GUI related stuff ? but then I should do lot's off research, and I don't know if I have time enough for that...
14:34:30 <Philippa> basti_: define "illness"
14:34:33 <shapr> basti_: no, it's different hardware
14:34:46 <basti_> and thats the point i think
14:34:55 <shapr> boegel: or you could pick a GUI toolkit that doesn't have an intro and write one.
14:35:08 <basti_> actually i have heard a theory that "adhd" is not an illness but the "hunter gatherer syndrome"
14:35:09 <Philippa> basti_: most people wouldn't clock me for asperger's in person or online (those who know exactly what they're looking for, it's a little different)
14:35:19 <shapr> darius__: hiya!
14:35:21 <boegel> shapr: like ?
14:35:27 <darius__> hey shapr
14:35:29 <shapr> boegel: like fltk
14:35:37 <boegel> I bet wxHaskell has one, and FranTk has one
14:35:41 <boegel> I don't know fltk :)
14:35:49 <basti_> people with adhd would help the group in a "hunter gatherer" environment, but are not very useful in our "civilisation" context
14:35:58 <shapr> basti_: That is a theory, and it may be true. In any case, I don't think like everybody else, and there's no way to mistake that.
14:36:05 <boegel> shapr: http://www.fltk.org/ ?
14:36:08 <basti_> well but who thinks alike?
14:36:13 <Philippa> it's worth pointing out that 'not thinking like everybody else' can still be helpful in the modern world
14:36:21 <Philippa> it's just that the education system tends to be a little monolithic
14:36:23 <shapr> basti_: Seriously, spend a few hours with me, you'll know the difference.
14:36:24 <basti_> now it can be again.
14:36:39 <basti_> shapr: well i do know people which are said to be ADHD
14:37:12 <Philippa> I can't speak for ADHD generally, but I'd say shapr thinks in a manner unlike most people I talk to
14:37:17 <boegel> shapr: a friend of my girlfriend is quite hyperactive too
14:37:24 <basti_> and i say, while there might be "common differences" to "other people", i do highly doubt that it is a condition that should be treated
14:37:30 <boegel> she scares off all the boys, byt we like her like that
14:37:32 <basti_> leave alone giving SPEED to CHILDREN.
14:37:37 <shapr> boegel: sound familiar
14:37:38 <darius__> shapr reminds me a bit of Sherkaner Underhill :-)
14:37:45 <shapr> basti_: some children only sit still and learn when they get speed.
14:37:51 <boegel> shapr: you scare off boys too ? :)
14:37:56 <Philippa> basti_: if somebody has significant problems without treatment (and plenty of people do) then they need treatment
14:37:59 <shapr> boegel: I scare off everybody.
14:38:07 <boegel> shapr: you wouldn't scare off me
14:38:12 <shapr> boegel: my bandwidth is greatly limited by IRC, that's why I'm survivable here ;-)
14:38:17 <basti_> but i mean, its a LOT of speed thats being prescribed
14:38:29 <Philippa> so people are fucking up the diagnoses
14:38:33 <Philippa> sort /that/ out
14:38:46 <shapr> basti_: yeah, that's not the same as saying that Ritalin is bad, or that ADHD doesn't exist.
14:39:05 <boegel> shapr: I mean IRL, you wouldn't scare me
14:39:06 <shapr> I agree that diagnoses need improving, and that only ADD specialists should diagnose kids.
14:39:18 <shapr> boegel: ok, if you say so ;-)
14:39:18 <samc> Paul Harrison has some crazy speculation which you may fiind interesting on his blog http://www.logarithmic.net/pfh/blog
14:40:04 <basti_> and especially this whole complex needs a whole load of improvement before i would call it "medicine" or "science"
14:40:06 <boegel> shapr: with fltk, you meant the one on www.fltk.org? how is that Haskell-related ?
14:40:06 <shapr> basti_: for me, medication meant I could keep a job, stick to one interest for more than a few days, and have friends for more than six months. It's changed my life very much for the better.
14:40:29 <basti_> shapr: i mean thats cool =)
14:40:33 <humasect> o_o
14:40:51 <basti_> i dont want to deny anyone his or her medication.
14:40:54 <duncan> boegel: if you're looking for a GUI toolkit that could do with an into, you could do gtk2hs [disclamer: I'm a gtk2hs developer :-)]
14:41:01 <basti_> but hey guys CAREFUL.
14:41:18 <shapr> ah, you're duncan coutts
14:41:20 <basti_> this adhd thing jumped out of the box and suddenly its ritalin everywhere... that doesnt seem right to me.
14:41:28 <Philippa> basti_: there appear to be some reasonably good measures out there. It's just that it's /also/ become a fad
14:41:30 <Philippa> kill the latter
14:41:33 <duncan> shapr: yes
14:41:54 <shapr> I'm Shae Erisson, you may have heard the name.
14:42:15 <duncan> shapr: I have
14:42:19 <basti_> well i'd hope that people know what they are doing, but to me it seems that a lot of people in that field dont know what theyre doing.
14:42:33 * basti_ arghs
14:42:37 <boegel> duncan: why don't you write an intro for gtk2hs then? :)
14:42:43 <Philippa> it seems to me that a lot of the time the prescriptions are coming from the equivalent of GPs who don't actually know the area properly
14:42:45 <Philippa> that's a problem
14:42:49 <basti_> GP?
14:42:54 <basti_> general physician?
14:42:59 <Philippa> General Practitioner. Your regular doc in the UK
14:43:01 <basti_> ah
14:43:08 <basti_> yes i think thats a reason.
14:43:20 <Philippa> some of them are good, some of them are fucking awful (especially when it comes to mental issues)
14:43:26 <shapr> samc: what keyword should I look for in that page?
14:43:34 <Pseudonym> Ah, we're talking about ADHD?
14:43:47 <boegel> Pseudonym, yep
14:43:53 <shapr> samc: ah, huge backtracks?
14:43:55 <Philippa> one of the reasons is that you can end up with a GP who's an emotional retard - this tends to make it a wee bit difficult to discuss psychological issues with them
14:43:57 <duncan> boegel: I'm busy adding a medium level API to it, similar to those of hs-fltk and wxHaskell
14:44:00 <Pseudonym> I'm told by people whose opinion I respect that UK doctors are particularly bad when it comes to developmental and learning disorders.
14:44:22 <Pseudonym> Even worse than in the US in many cases.
14:44:22 <Philippa> I don't know the general case atm - certainly there've been major issues in the past
14:44:37 <basti_> this whole issue just scared me
14:44:43 <basti_> that a thing of this dimension can happen at all
14:44:53 <Philippa> my parents had to fight like hell over my education as a kid, though the real issue there was educational psychologists and an LEA trying to preserve its budget by any means necessary
14:44:55 <basti_> there seems to be no control
14:45:01 <Philippa> we had a good GP at the time though
14:45:09 <basti_> i mean some people actually go as far as claiming 10% of children are ADHA
14:45:11 <Pseudonym> Certainly here in Australia, ADHD is finally becoming a non-fad disorder.
14:45:11 <basti_> D
14:45:16 <basti_> whats "fad"?
14:45:24 <Pseudonym> "Fad" means... uhm... "trendy".
14:45:26 <boegel> duncan: I'm not really familiar with either of them... could you show me some screenshot's of gtk2hs in action ?
14:45:28 <basti_> ah
14:45:39 <Pseudonym> For a while, nobody had ADHD.  It didn't exist.
14:45:42 <Pseudonym> Then EVERYONE had it.
14:45:54 <Philippa> New hammer. Everything looks like a nail, duh
14:45:57 <boegel> Pseudonym: right. It's damn right stupid
14:45:58 <basti_> yup.
14:46:02 <Pseudonym> Now, a few people have it.  Which is where things should be.
14:46:14 <Pseudonym> It was the same with depression in the 80s.
14:46:29 <Philippa> problem is it's really damn difficult to get decent help in working out what's up if you haven't effectively self-diagnosed
14:47:06 <Philippa> not least because you get asked questions loaded with technically-significant terms which aren't explained to you
14:47:19 <Pseudonym> The current trendy diagnosis with kids appears to be "high-functioning autism".
14:47:24 <basti_> lol
14:47:29 <Philippa> 'depressed' doesn't mean the same to you as the doc. 'traumatic' most likely carries different meaning
14:47:30 <duncan> boegel: see http://gtk2hs.sourceforge.net/screenshots/  but there arn't many screenshots at the moment, we should do some more
14:47:31 <Pseudonym> Thankfully, the treatment for high-functioning autism is not to pump kids full of drugs.
14:47:46 <Philippa> Pseudonym: I've never been given a clear explanation of how that differs from asperger's
14:47:57 <Philippa> I can tell you that the latter is still being incredibly poorly dealt with in the UK
14:47:59 <basti_> i think the mental health thinking needs restructuring
14:48:00 <Pseudonym> Nor have I, but people do refer to autism as a spectrum.
14:48:07 <Pseudonym> So the difference is probably fuzzy,
14:48:13 <shapr> basti_: I agree, we need a more holistic approach.
14:48:26 <samc> shapr, I wasn't referring to those experiments (which I hadn't read), the speculation is on autism, I was reminded of his site when I read you had speculated on epilepsy--he too puts it at one end of a spectrum--, as for keywords autism?, epilepsy?, it's best to look from the early posts if you are interested.
14:48:27 <Philippa> everybody still seems to think asperger's can be dealt with in mainstream education though, which it frankly can't
14:48:32 <shapr> Western medicine has treated the mind and body separately for too long.
14:48:34 <basti_> mental health needs to be subject-centered i think
14:48:34 <basti_> holistic yes
14:48:44 <Pseudonym> Philippa: I'm not sure I agree with that.
14:48:52 <Pseudonym> Surely it depends on the quality of the mainstream education.
14:49:08 <boegel> duncan: looks okay.. maybe I'll give it a shot tomorrow, creating a simple GUI for my raytracer...
14:49:11 <Philippa> realistically, no
14:49:15 <basti_> i think "mainstream education" is shit in germany.
14:49:16 <basti_> honestly.
14:49:20 <Philippa> the needs're thoroughly different
14:49:33 <basti_> i considered school a waste of time, and uni is still not a lot of fun.
14:49:36 <boegel> duncan: does it support using images in the GUI ? like jpg's, bmp's, stuff like that ?
14:49:41 <Philippa> different way of thinking, different batch of skills that need to be taught 
14:49:47 <boegel> basti_: too smart ?
14:49:52 <basti_> Philippa: buts thats the general set of education
14:50:01 <basti_> boegel: no, school was too "template".
14:50:05 <Pseudonym> Maybe it's different here, but certainly when I was growing up (I wasn't autistic as such, just very smart), the school went out of their way to accommodate me.
14:50:16 <duncan> boegel: gdkpixbuf can load and save images in many common formats including jpeg & png
14:50:17 <Pseudonym> Well, me, and one other kid who was also very smart.
14:50:28 <Philippa> yeah, and that helps. But there're issues beyond just being smart
14:50:28 <Pseudonym> And that was 25 years ago.
14:50:32 <Pseudonym> Sure.
14:50:41 <shapr> None of the schools I grew up in accommodated me. They all just hung on for dear life.
14:50:43 <Pseudonym> My point is that mainstream education PLUS extra assistance can probably work.
14:50:43 <Philippa> and a smart kid who's recognised as smart tends to become a school trophy in effect
14:50:44 <samc> I couldn't handle university
14:50:52 <basti_> shapr: yup.
14:50:54 <Philippa> and my point is that it frequently doesn't. BTDT
14:50:55 <Pseudonym> Well I definitely wasn't a school trophy. :-)
14:51:13 <Pseudonym> It might have to do with the school system.
14:51:18 <shapr> I wasn't either, teachers alternately loved and hated me.
14:51:20 <Pseudonym> My mother just came back from teaching in the UK.
14:51:34 <Philippa> could well do, yeah
14:51:36 <Pseudonym> Compared with the Australian system... there is NO comparison, basically.
14:51:40 <Philippa> small classes're essential, for example
14:51:45 <Pseudonym> Mind you she was in an especially shit school.
14:51:46 <duncan> boegel: what sort of output format does your raytracer use? I was thinking that I should really add some convenience function to turn an array of pixels into a PixBuf
14:51:50 <shapr> darius__: whatcha doin?
14:51:50 <basti_> actually in germany the school system gives me an existantial headache
14:51:53 <boegel> duncan: is gdkpixbuf part of gtk2hs ?
14:51:54 <Pseudonym> In Bedfordshire of all places.
14:51:59 <Pseudonym> Which I udnerstand is a complete hole.
14:52:00 <shapr> forall headache a .
14:52:01 <boegel> duncan: is it a library or so ?
14:52:02 <duncan> boegel: yes it is
14:52:10 <basti_> i wonder about things like, where would my children be educated if i ever have some?
14:52:22 <Pseudonym> See, I have to deal with this now.
14:52:25 <basti_> i know that i wouldnt be able to let them live through that.
14:52:34 <basti_> but what to do? escape?
14:53:02 <basti_> where? out of home? out of the country that speaks the language and mindset that made me?
14:53:02 <shapr> Home schooling is allowed in the US
14:53:08 <samc> shapr, existential not universal
14:53:13 <shapr> samc: oops
14:53:17 * shapr is busted
14:53:22 <samc> heh :)
14:53:38 <duncan> boegel: gdk is the part of gtk that deals with lower level things like drawing and bitmaps, gtk2hs wraps most of the useful bits of gdk including the PixBuf stuff
14:53:41 <basti_> this makes me so sad
14:53:48 <boegel> duncan: where should I start when I'm _totally_ unfamiliar with gtk2hs?
14:53:55 <basti_> i mean once there was a culture of knowledge and schools in germany.
14:53:57 <boegel> and is it linux only ?
14:54:00 <basti_> i dont know where its gone.
14:54:47 <basti_> Pseudonym: so what do you do?
14:55:03 <Pseudonym> basti_: At the moment, my daughter is only at kindergarten.
14:55:09 <Pseudonym> But she's starting school next year.
14:55:15 <Pseudonym> And we have some hard decisions to make about where to send her.
14:55:25 <basti_> omfg.
14:55:32 <basti_> is it that bad all over the world yes? :(
14:55:41 <basti_> i mean thats just sad.
14:55:47 <Pseudonym> It's not as bad everywhere.
14:55:52 <duncan> boegel: download the source and look at the demos, that's the best intro at the moment, also the tutorials for the C library give an overview of what Gtk+ is about
14:55:58 <Pseudonym> The US public school system, for example, is apparently particularly bad.
14:56:08 <Pseudonym> There's no nationwide standards as such.
14:56:15 <Pseudonym> As I understand it.
14:56:27 <basti_> well ive heard that too.
14:56:45 <duncan> boegel: if you have any problems or questions, ask on the mailing list
14:56:45 <Pseudonym> I think here in Australia she's going to have a better time than in most places.
14:56:46 <shapr> But some places are really good in the US.
14:56:54 <boegel> duncan: or ask you :p
14:57:01 <Pseudonym> She has a government-provided assistant at kindergarten, for example.
14:57:01 <basti_> oh australia.
14:57:13 <basti_> assistant?
14:57:15 <Pseudonym> And she also attends an EIP.
14:57:17 <Pseudonym> Yes.
14:57:18 <basti_> how would i imagine that?
14:57:32 <duncan> boegel: yes, but I'm useually easier to get ahold of via the gtk2hs mailing list
14:57:46 <samc> when I was a kid, I promised myself I'd never make my children go to school :)
14:58:25 <boegel> duncan: oh great :)
14:58:33 <samc> I also knew that I'd never like _girls_ (that turned out to be false)
14:58:36 <boegel> duncan: they don't mind n00bs there?
14:58:50 <basti_> the problem isnt school. the problem is school as it is today.
14:58:50 <Philippa> samc: don't worry, sexuality's a fluid thing ;-)
14:59:15 <Pseudonym> samc: When I was young, I thought about The Year 2000(tm).
14:59:20 <basti_> hehehe
14:59:21 <duncan> boegel: no not at all, we encourage them
14:59:25 <Pseudonym> I knew two things.
14:59:32 <boegel> samc: how do you mean ? you'd allow them to make a choice when they're not capable of making such a choice, a choice which will criple them for the rest of their lives ?
14:59:33 <Pseudonym> 1) It was a long way away, and 2) I'd be really old.
14:59:36 <Pseudonym> Neither turned out to be true.
14:59:41 <boegel> duncan: alrighty then
14:59:48 <basti_> i mean i saw dick tracy phoning through his watch...
14:59:52 <samc> boegel, no I would teach them
15:00:10 <basti_> and when i grew older i would go like "that cant work in reality"
15:00:13 <boegel> samc: oh, like that
15:00:14 <samc> Pseudonym, hehe
15:00:21 <basti_> realizing theres limited frequencies for example
15:00:35 <basti_> and then suddenly i realized that i was already living in a science fiction world.
15:00:38 <duncan> boegel: for docs see http://gtk2hs.sourceforge.net/documentation/ and http://www.gtk.org/tutorial/
15:00:42 <boegel> samc: you think your skilled enough to teach them a little bit of everything ? I sure am not
15:00:51 <boegel> duncan: thanks :)
15:01:37 <basti_> i mean... when i look at what i did the first 6 school years..
15:01:58 <basti_> I'm pretty sure my parents could have taught me that in two or three, if they had wanted to.
15:02:22 <boegel> duncan: Examples
15:02:22 <boegel> At the moment there is no tutorial available but there are several small demo programs to look over in the demo/ directory in the source distribution.
15:02:30 <boegel> this is where I could help ?
15:02:43 <boegel> because I can see the thing from a n00b point of view ?
15:02:48 * basti_ sometimes just gets all enraged about this stuff
15:03:05 <shapr> It's an open source worlde.
15:03:13 <boegel> hehehe: http://www.generaltomfoolery.co.uk/gt_images/64/easterbunnies1.jpg
15:03:30 <basti_> boegel: ouch.
15:03:33 * shapr laughs
15:05:26 <duncan> boegel: yes that'd be a great way to help
15:05:33 <boegel> duncan: how do I join the mailing list ?
15:06:23 <basti_> i think i'd need a place to run and scream.
15:07:55 <duncan> boegel: the link is near the top of this page http://gtk2hs.sourceforge.net/development/
15:09:07 <boegel> oh okay.. the link isn't there on the download page, that's why I asked :)
15:10:23 <zamez> gtk2hs looks cool
15:11:08 <duncan> boegel: sure, no problem, we just did a major update to the website so things may not necessarily be in the most obvious/logical places yet.
15:11:12 <zamez> the font is very small
15:11:37 <boegel> duncan: here comes the billion dollar question... Would you say gtk2hs is the best Haskell GUI lib around ?
15:12:02 <duncan> zamez: we're aiming for a 1.0 release which will be even cooler :-)
15:12:25 <duncan> boegel: well of course I would say that otherwise I wouldn't be developing it!
15:12:45 <zamez> I'll have to try it sometime
15:13:20 <duncan> boegel: ok, seriously it has advantages and disadvantages vs other Haskell GUI toolkits...
15:13:54 <boegel> duncan: name some :)
15:14:50 <duncan> boegel: it's great if you're targeting unix and especially gnome, it's less good if you want windows or macos. It doesn't have a medium level API like hs-fltk or wxHaskell, (but it will in 0.9.8)
15:16:24 <duncan> boegel: we're also working on windows support, gtk does work fine on windows, it just a matter of gtk2hs developers having enough access to windows machines to keep it building, we plan to do a windows installer for gtk2hs by the 1.0 release
15:17:12 <boegel> duncan: I can't try gtk2hs on windows now ?
15:18:39 <shapr> if anyone wants to write for The Monad.Reader, put yourself on the wiki page!
15:18:57 <duncan> boegel: version 0.9.6 was known to build on windows, we didn't have time to test it for the recent 0.9.7 release however due to our windows box having problems. It shouldn't be to much work. We intend to make it work for the next release but we could do it sooner.
15:19:00 <shapr> I'm out, time for focus.
15:20:46 <boegel> duncan: when would the next release be ?
15:22:15 <duncan> boegel: a month or so perhaps. Are you using win32? If you don't mind using a CVS version we could get it working in the CVS version.
15:22:56 <humasect> i'd like to try as well
15:23:29 <humasect> (and use it.)
15:23:42 <duncan> humasect: you mean gtk2hs on win32?
15:24:47 <boegel> duncan: I have linux, but I'm currently working on win32 (WinXP)
15:25:01 <boegel> and I'm sorry, but I don't know what CVS is
15:25:04 <boegel> I'm sorry :s
15:27:45 <duncan> boegel: CVS is the source repository developers use to store shared source code. people around here prefer darcs to cvs but some of use have to use cvs :-)
15:28:37 <boegel> and what would that mean for me ? 
15:28:57 <boegel> that I'm using a developers version of gtk2hs ?
15:29:38 <duncan> boegel: yes, an intermediate version called 0.9.8_pre or something
15:30:13 <boegel> If it's working, I don't mind
15:30:25 <boegel> how long would it take to get it working on win32 ?
15:30:51 <boegel> I don't think I'd use stuff that will change later on, because my GUI would be pretty basic
15:31:28 <duncan> boegel: it'll work now with the released version on linux and with a bit of testing and fiddling by someone who knows what their doing we could get it working on windows
15:31:46 <boegel> okay
15:32:01 <boegel> then I'll give it a shot tomorrow on linux
15:32:10 <boegel> and then I'll see when I can test it on win32
15:32:25 <boegel> I'll add my name to the TMR list for now, I'll see if I can make it true
15:32:32 <boegel> @wiki TheMonadReader
15:32:33 <lambdabot> http://www.haskell.org/hawiki/TheMonadReader
15:35:34 <boegel> done
15:35:35 <duncan> boegel: right, I'll see about getting access to a windows machine, or VMWare or something. You might want to announce on the mailing list that you're interested in getting gtk2hs running on windows
15:35:52 <boegel> duncan: I'll hold for now :)
15:35:58 <boegel> let me try it first
15:36:03 <duncan> boegel: sure
15:36:11 <boegel> duncan: any idea when the 1.0 release will be ?
15:50:24 <duncan> boegel: probably 4-6 months from now
15:50:33 <boegel> hmm
15:50:50 <boegel> too long to use it for my thesis... that's too bad
15:51:02 <boegel> but I could use a 0.9 build
15:51:07 <duncan> it all works now however, the 1.0 adds polish
15:51:48 <duncan> like out of the box windows support and complete reference documentation, introductory tutorials etc
15:52:07 <boegel> and who will write the introductory tutorials ? :)
15:52:31 <duncan> boegel: our helpful volunteers of course! :-)
15:52:45 <boegel> duncan: hehe
15:53:14 <boegel> I think it would be hard for me to write a complete tutorial handling all aspects of gtk2hs, since I've never worked with it before
15:53:25 <boegel> I do have experience with building GUI's in Java (Swing)
15:53:35 <boegel> is it like that in any way ?
15:53:40 <duncan> boegel: the only major change (which will not break existing code) is the addition of the medium level API for getting/setting properties and event handlers
15:53:56 <boegel> that's cool
15:54:06 <boegel> looks like you guys are really making gtk2hs succesfull
15:54:53 <duncan> boegel: it is similar to swing in that you have layout managers (box packing) and you attach callbacks to objects
15:56:02 <boegel> hmm, that might help me
15:56:22 <duncan> boegel: but its shorter to code than swing. Last week I was helping out with an OOP practical where the students were building GUI calculators using swing. They end up to be about 500 lines long or so. I figured I should do a version using gtk2hs. You can see the result on the screenshots page. The GUI was only 50 lines of code.
15:56:24 <boegel> it uses the event model too?
15:56:41 <boegel> duncan: nice :)
15:56:49 <boegel> that's real shitty idd in Swing
15:57:27 <boegel> maybe I could use the code in my thesis then, mention that it allows to make a nice GUI in a limited number of code lines
15:57:47 <boegel> duncan: we had to build really big stuff in Swing, like a Spline manipulator
15:57:55 <boegel> that was hell, over 5000 lines of code
15:58:01 <boegel> and slow as hell
15:59:32 <duncan> the key to keeping the GUI code short was seperating the model from the view, the GUI code did literally nothing more than load up an xml description of the GUI (made using Glade the visual gui builder for Gtk) and connect up actions on the model to each of the buttons.
16:00:21 <duncan> boegel: if you were doing something like a spline manipulator I fear it may be quite difficult whatever language you use :-(
16:00:30 <boegel> duncan: maybe the code is so short because you already have a working GUI library (being GTK)
16:00:56 <boegel> duncan: probably :)
16:03:01 <duncan> boegel: probably, and the GUI for a calculator is pretty simple there's one buton per operaton on the model. For a spline editor in gtk2hs I'd think about using the gnomecanvas.
16:06:15 <boegel> duncan: I won't be rewriting the spline editor in gtk2hs for now
16:06:36 <boegel> but I'd like to use it to build a simple front-end for my raytracer
16:06:59 <boegel> select a file containing the scene to render, show the result of a render (progressivly ?)
16:08:28 <boegel> I'm out for now, i should go to bed..
16:08:38 <boegel> it's 1.10am here...
16:08:49 <boegel> g'night duncan, you'll hear from me probably
16:26:53 <Pseudonym> shapr: I know what I want to call my semi-regular (or regular, if I can get enough material) column in Monad.Reader.
16:26:55 * Pseudonym ahems
16:26:58 <Pseudonym> "Pseudocode"
16:27:03 <Philippa> heh
16:27:13 <Philippa> well, it's both better and worse than mine :-)
16:27:19 <Pseudonym> What's yours?
16:27:28 <Philippa> "Impure Thoughts"
16:27:32 * Pseudonym laughs
16:27:34 <Pseudonym> I like that.
16:27:46 * Pseudonym also toyed with "Functional Zirconium"
16:30:32 <humasect> 15:26 (duncan) humasect: you mean gtk2hs on win32?  <-- yep.
16:31:33 <duncan> humasect: so that means we have two extra potential customers on win32, we'd better get it working again then!
16:32:10 <humasect> i could help, starting with gtk+cygwin
16:33:18 <duncan> humasect: ask on the mailing list, I'm sure we can talk you through any problems.
16:33:57 <humasect> i would just get it working probably, if it doesn't already - from cvs
16:34:02 <humasect> we'll see.
16:35:46 <duncan> humasect: we'll gladly accept patches for win32 build problems. I think the standard configuration is gtk+ & mingwin (sp?).
16:37:24 <humasect> ok. those mingw setups work for cygwin as well, by default. (cygwin just has the unix stuff, and is considered a unix under build procedure - so sometimes it chooses X for example)
16:39:48 <duncan> humasect: ok right. I've never done a win32 build myself since I have no access to a win32 machine. I've ben meaning to set up VMWare or something.
16:40:26 <humasect> you can try mingw cross build
16:41:07 <duncan> really? does that work? linux -> mingw ? That'd be useful.
17:03:32 <stepcut> whoa! The brazilian chick at work just busted out a set of one-handed push-ups -- I feel ashamed ...
17:26:46 <humasect> oh, he's left. (duncan
18:02:48 <CosmicRay> argh, i hate it when I'm debugging a segfault and inserting a putStrLn makes it go away!
18:03:47 <wagle> will only get worse with quantum computing
18:03:52 <CosmicRay> heh
18:12:38 <CosmicRay> ah ha.
18:12:49 <CosmicRay> when they say "unsafe" in "unsafeInterleaveIO", they mean it :-)
18:13:08 <autrijus> yes! :)
18:13:23 <autrijus> pugs: basic evaluator done. junctions done. basic arithmetic done.
18:13:36 <CosmicRay> well in my defense, I have been quite careful in the past.  I just didn't count on Python's GC running before I had consumed all the items in the list :-)
18:13:58 <autrijus> that's laziness for you.
18:14:12 <CosmicRay> ncurses to that laziness.
18:14:42 <wagle> perl has "use strict;"
18:15:08 <wagle> know i know what it means
18:15:08 <CosmicRay> w00t, 0 segfaults :-)
18:15:37 <CosmicRay> it means "only accept syntax valid in ptyho" :-)
18:16:01 <autrijus> mm "use lazy;"
18:16:05 <autrijus> that will be a fun pragma.
18:16:10 <wagle> well, if you wanted 0 segfaults, you should just left in the putStrLn..  >)
18:16:14 <CosmicRay> heh
18:18:59 <redhatPT> dudes someone to help me plz!! 
18:19:23 <redhatPT> ERROR "exame.hs":25 - Syntax error in declaration (unexpected `;', possibly due to bad layout)
18:19:35 <redhatPT> I do not have a single ; in the code
18:19:35 <wagle> tab
18:19:47 <monochrom> then it is due to bad layour
18:19:48 <redhatPT> its because tabs?
18:19:49 <Igloo> Your layout is wrong
18:20:08 <wagle> whitespace is syntactic sugar for { xxx ; sss ; jjj}
18:20:11 <monochrom> I am just reading out loud the error message for you
18:20:39 <wagle> do you tab 8 spaces?
18:20:42 <monochrom> and applying boolean logic
18:21:01 <monochrom> error message says "p or q".  you know p is false.  therefore q is true.
18:25:02 <Igloo> It actually says "p, possibly due to q", so you know q or (p and not q)
18:25:50 <monochrom> that equals "p or q"
18:26:10 <monochrom> but we are agreeing violently
18:26:10 <jadrian> nope
18:26:36 <jadrian> p and p => q
18:26:47 <jadrian> eh
18:26:47 <Igloo> Err, but I meant to say (p and q) or (p and not q)
18:26:52 <Igloo> Anyway, I need to sleep
18:26:54 <jadrian> p and (q => p)
18:26:56 <Igloo> 'night
18:28:02 <jadrian> monochrom: that is, you know p as to be true
18:28:10 <jadrian> s/as/has
18:28:21 <monochrom> I know p has to be false.
18:28:50 <jadrian> well I'm just saying what Igloo said...
18:28:55 <jadrian> "p, possibly due to q"
18:28:58 <jadrian> that is 
18:29:04 <jadrian> p and (p => q)
18:29:20 <jadrian> so if you say p has to be false, you both do not agree
18:29:49 <jadrian> that should be (q => p), eh
18:30:44 <monochrom> There are two p's.  One is "semicolon in user code", and that is my p.  Another is "semicolon in desugared code", and that is Igloo's p.  Using my p, the error message means p or q; using Igloo's p, the error message means p and (q => p).
18:32:11 <jadrian> ah ok then
18:49:51 <KrispyKringle> god, ghci is interminably slow.
18:50:16 * monochrom dances around ghci
18:51:44 <wagle> pretty damn snappy in geologic time
18:53:00 <wagle> i might have found the problem with redhatPT's code, but he hasnt verified yet
18:54:25 <KrispyKringle> wagle: thank you. that makes me feel *so* much better. ;)
18:56:42 <wagle> does ghci read email yet?
18:57:29 <monochrom> if the email is written in Haskell, yes.
19:00:45 <wagle> http://www.google.com/search?hl=en&lr=&q=+%22all+programs+expand+until+they+can+read+mail%22&btnG=Search
19:01:22 <redhatPT> yup that was it :)
19:01:23 <Pseudonym> I think that rule isn't true.
19:01:26 * CosmicRay checks in Python.Objects.File
19:01:27 <redhatPT> thx wagle 
19:01:29 <monochrom> Yes, I know that.  emacs, web browsers, soon Eclipse.
19:01:29 <Pseudonym> All GNU programs expand until they can read mail.
19:01:34 <CosmicRay> heh
19:01:49 <CosmicRay> Pseudonym: all Windows programs expand until they can become infected by a virus.
19:03:37 <wagle> back in the day, emacs was a TUI windows opsys
19:03:44 <CosmicRay> he
19:03:50 <CosmicRay> was it implicated in the Worm? :-)
19:03:58 <wagle> you booted into emacs, then spend all your time inside
19:04:10 <wagle> morris worm?
19:04:14 <CosmicRay> yeah
19:04:18 <wagle> no...
19:04:23 <CosmicRay> I know, just jokin
19:04:51 <wagle> i actually met morris (now a prof at MIT)..  he was the only one _without_ a name badge..
19:05:22 <CosmicRay> heh
19:12:52 <wagle> i thought it must suck being a household name for the rest of your life
19:13:20 <Pseudonym> I'm sure that Don Knuth doesn't mind.
19:13:43 <sh10151> um
19:13:57 <Pseudonym> Well, he's known in _our_ household.
19:13:58 <sh10151> what kinda households are you talking about?
19:13:59 <sh10151> :)
19:22:19 <KrispyKringle> being a household name isn't a problem. not being allowed to use a computer for certain things is. :P
19:23:55 <monochrom> such as watching p0rn?
19:26:44 <KrispyKringle> yes, i was thinking that. 
19:26:53 <KrispyKringle> thank you for fucking reading my mind, monochrom!
19:40:25 <CosmicRay> @type flatten
19:40:26 <lambdabot> bzzt
19:40:28 <CosmicRay> @index flatten
19:40:29 <lambdabot> Data.Tree
19:43:22 <CosmicRay> shapr: This is my code that makes gzip available to Haskell.
19:43:29 <CosmicRay> openGz fp mode level =
19:43:29 <CosmicRay>     do ofp <- toPyObject fp
19:43:29 <CosmicRay>        omode <- toPyObject (openModeConv mode)
19:43:29 <CosmicRay>        ocl <- toPyObject ((fromIntegral level)::CInt)
19:43:29 <CosmicRay>        pyImport "gzip"
19:43:29 <CosmicRay>        obj <- callByName "gzip.open" [ofp, omode, ocl] []
19:43:31 <CosmicRay>        return $ mkPyFile obj
19:43:36 <CosmicRay> it will take that much code to make bzip2 available. :-)
19:45:09 <Lemmih> Good morning, #Haskell!
19:45:50 <CosmicRay> y0 lemmih
19:46:58 <Lemmih> Greetings, CosmicRay. Did you finish your Python binding already?
19:47:14 <CosmicRay> yes, the low level is cimplete. 
19:47:26 <CosmicRay> I am now writing the higher-level bindings.
19:50:35 <CosmicRay> I have a generic interface between Python file-like objects and my Haskell HVIO system.
19:50:45 <CosmicRay> result: any Python file-like object can be used pretty much like a Handle.
19:50:58 <CosmicRay> so we now get gzip, bzip2, etc. free.
19:51:12 <CosmicRay> well, in <10 lines code :-)
19:53:10 <Pseudonym> But you can't gzip to a memory buffer?
19:53:44 <CosmicRay> not directly, no.
19:53:49 <CosmicRay> libz doesn't support that.
19:53:54 <CosmicRay> that's why python doesn't suport it
19:54:03 <CosmicRay> and also why I don't support it in my MissingPy.FileArchive.GZip.
19:54:17 <CosmicRay> however.  in MissingH, I have a native Haskell gunzip implementation.
19:54:22 <CosmicRay> it is a lot slower but it can do that.
19:54:31 <CosmicRay> nobody has yet written a pure Haskell deflate
19:54:43 <Pseudonym> libz does support that.
19:55:05 <CosmicRay> are you sure it does for gzip stuff, not just for deflate?
19:55:15 <Pseudonym> Hmmm, you might be right.
19:55:18 <Pseudonym> Could just be deflate.
19:55:24 <Pseudonym> Still, deflating to memory is useful.
19:55:34 <CosmicRay> that we can do.
19:55:40 <CosmicRay> openGz ....
19:55:46 <CosmicRay> err
19:55:48 <CosmicRay> h <- openGz
19:55:51 <CosmicRay> c <- vGetContents h
19:55:56 <CosmicRay> c now has the deflated content
19:56:16 <CosmicRay> er
19:56:17 <CosmicRay> inflated.
19:56:21 <CosmicRay> sorry, tired.
19:56:32 <CosmicRay> we can deflate from memory or inflate to memory.
19:57:17 <CosmicRay> I checked the zlib api doc
19:57:22 <CosmicRay> they can deflate and inflate to memory
19:57:33 <CosmicRay> but for gzip files, their limitations are the same as mine
19:57:46 <CosmicRay> I do have gzip header parsing code in MissingH already
19:58:05 <CosmicRay> so theoretically I could combine this all together and have a pure-memory fast inflate and deflate in all situations
19:58:18 <CosmicRay> with gzip.
19:58:32 <Pseudonym> Right.
19:58:34 <CosmicRay> maybe it's enough to just provide a binding to compress() and uncompress() though
19:59:00 <CosmicRay> things like apache probably don't need to be able to seek through gzip files
19:59:25 <CosmicRay> I'm just remembering that Python has a generic dbm interface too.
19:59:31 <CosmicRay> I think that could prove interesting.
20:03:57 <CosmicRay> anyway, time for sleep.
21:22:38 <KrispyKringle> can anyone please tell me if there's anything blindingly obvious that's wrong with http://rafb.net/paste/results/QeSaga47.html ? thanks. :)
21:24:02 <Pseudonym> DO you have an error message?
21:24:37 <KrispyKringle> Pseudonym: well, following that, if i simply do a function typedef (iXMLtoTree :: SimpleXML -> XMLTree
21:24:47 <KrispyKringle> i get Syntax error in declaration (unexpected `::')
21:24:58 <KrispyKringle> ignore the i, by the way. i thought i was in vim. 
21:25:06 <Pseudonym> Paste it again.
21:25:25 <KrispyKringle> http://rafb.net/paste/results/MZxwNT55.html
21:25:38 <Pseudonym> Right.
21:25:44 <Pseudonym> Yes, that's wrong.
21:25:50 <KrispyKringle> mind telling me how so? :P
21:26:01 <Pseudonym> If it starts with an upper-case letter, then it's either the name of a type or the name of a type constructor.
21:26:05 <KrispyKringle> oh. 
21:26:07 <KrispyKringle> doh. 
21:26:08 <KrispyKringle> thanks. 
21:26:11 <Pseudonym> Yup.
21:26:40 <KrispyKringle> slipped right by me. 
21:27:48 <humasect> hmm. asperger's sounds a bit close to home
21:28:01 <peon_> self-diagnosis ?
21:28:48 <humasect> hm..
21:37:33 <humasect> =(
21:59:29 <tintin> the haskell logs have everything since the inception of this channel ?
22:04:40 <humasect> hi philippa
22:59:17 <humasect> first haskell project: i've managed to need to deal with three different variations of the same virtual type. CDouble, Double, GLdouble. they are all incompatible, something i am missing?
23:01:35 <autrijus> you can write your functions to use any RealFloat type.
23:01:53 <autrijus> avoid matching specific types.
23:02:05 <autrijus> yourFunction :: (RealFloat a) => a -> a
23:02:07 <autrijus> etc
23:02:11 <humasect> yeah
23:02:30 <humasect> i want all doubles, but my FFI has CDouble - ghci complains when needing a Double
23:02:46 <autrijus> you can do explicit case.
23:03:03 <autrijus> explicit cast.
23:03:12 <autrijus> i.e. always cast CDouble back to Double.
23:04:47 <humasect> i think i've managed to trick it.
23:05:43 <autrijus> nice. how?
23:05:54 <autrijus> (cast) ?
23:06:49 <humasect> going to make sure it works in all cases..
23:21:44 <humasect> no.
23:24:04 <humasect> i can't ::Double from a CDouble... i have to ignore this kind of deterrance for future prospects..
23:47:15 <Itkovian> yopla
23:47:22 <autrijus> hi.
