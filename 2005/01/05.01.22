00:38:08 <musasabi> morning
00:46:28 <bluegods> hey functional madness, who will build a microsoft killer in haskell?
00:46:50 <bluegods> what is haskelldb by the way?
00:47:33 <musasabi> bluegods: Haskelldb is a wrapper library for (sql) databases.
00:49:45 <musasabi> and M$ success is not due to superior technical merits.
00:50:18 <musasabi> and there are people contributing important things to ghc at microsoft research too.
00:53:32 <Gahhh> actually, microsoft has F# .NET working, which is another ML variant
00:55:14 <bluegods> hmm
00:55:19 <bluegods> microsoft lisp?
00:55:41 <Gahhh> ML is not lisp
00:59:00 <bluegods> I know
00:59:22 <bluegods> microsoft lisp be scary
01:00:38 <musasabi> Gahhh: true, but both Simon Marlow and Simon Peyton Jones are at MS Research.
01:01:00 <Gahhh> "but" ? I knew they were.
01:02:18 <musasabi> (I just misunderstood the meaning of "actually", nothing to worry about)
01:02:56 <Gahhh> heh ok
01:42:25 <wli> waldi: That sounds... rather attractive.
01:47:40 <basti_> hi
02:21:59 <basti_> shapr: ping?
02:37:40 <basti_> who is responsible for that haskell mode in emacs?
02:38:27 <sh10151> it's in the file
02:39:44 <sh10151> ;; Authors: 1992      Simon Marlow
02:39:44 <sh10151> ;;          1997-1998 Graeme E Moss <gem@cs.york.ac.uk> and
02:39:44 <sh10151> ;;                    Tommy Thorn <thorn@irisa.fr>,
02:39:45 <sh10151> ;;          2001-2002 Reuben Thomas (>=v1.4)
02:39:45 <sh10151> ;;          2003      Dave Love <fx@gnu.org>
02:40:09 <sh10151> * New maintainer <monnier@gnu.org>.
02:40:15 <basti_> hmmmm
02:40:29 * basti_ smells an old fish in his installation
02:40:29 <sh10151> monnier@gnu.org is doing work on it ATM
02:41:18 <sh10151> http://www-perso.iro.umontreal.ca/~monnier/elisp/
02:43:37 * basti_ is checking it out
03:07:12 <KiMoS> tail type is  [[a] -> [a]]  or  [a] -> [b] ?
03:09:20 <autrijus> whew.
03:09:31 * autrijus grokked functor and natural transformations today :)
03:09:56 <Oejet> autrijus: What is a functor?
03:10:36 <autrijus> Oejet: it is a transformation that maps transformations in category C to category D, along with their source and target objects.
03:10:41 <izhirahider> long live cathegory theory
03:10:55 * Oejet is confused
03:11:50 <lightstep> Another phrasing is that a functor is a transformation on both objects and morphisms
03:12:15 <autrijus> in haskell speak, a functor is something that can product (g :: GTypeA -> GTypeB) from (f :: FTypeA -> FTypeB)
03:12:24 <autrijus> while preserving the "semantic" of f.
03:12:27 <lightstep> like a homomorphism
03:12:37 <autrijus> s/product/produce/
03:12:49 <Oejet> What does it have to do with Control.Monad.Functor and fmap?
03:13:21 <autrijus> Control.Monad.Functor lets you declare functors and fmap lets you use them.
03:14:03 <autrijus> the "preserving semantic" restriction is enforced with
03:14:08 <autrijus>  fmap id  ==  id
03:14:09 <autrijus>  fmap (f . g)  ==  fmap f . fmap g
03:14:12 <lightstep> autrijus: which book do ou have about categories?
03:14:45 <autrijus> lightstep: I used http://www.eleves.ens.fr:8080/home/madore/math/cat2.dvi
03:15:17 <autrijus> lightstep: and some from http://www.cs.cornell.edu/people/jcheney/papers/ct4d1.pdf
03:15:49 <autrijus> but the key is that I enlisted my little brother to help me :)
03:16:09 <autrijus> (math major)++
03:20:37 <lightstep> i never really got the point of category theory (i also didn't get some of the concepts, too)
03:21:32 <lightstep> it seems like a nice bunch of definitions, to standartise notation, but nothing more
03:22:13 <autrijus> for example, Maybe is a functor that can fmap (f :: a -> b) into (g :: a -> Maybe b)
03:22:24 <autrijus> while preserving the semantic of f.
03:22:43 <autrijus> I think the definition is trivial:
03:22:44 <autrijus> fmap f Nothing  = Nothing
03:22:44 <autrijus> fmap f (Just x) = Just (f x)
03:24:06 <lightstep> yeah. and that's cool. in addition, mapMaybe should be fmap . fmap or the like. but why does it interest mathematicians so much?
03:24:06 <lightstep> err, mapMaybe isn't related to this at all
03:25:10 <lightstep> i't a really cool thing that type classes expose some kinds of categories
03:25:23 <autrijus> well, type class is how haskell handles categories :)
03:25:33 <lightstep> but i don't see how this is related to cat. theory
03:25:38 <lightstep> after all, not all categories are exposed
03:25:46 <autrijus> and a monad is just a functor that is monoid from the natural transformation view
03:26:02 <autrijus> i.e. it always map unto the same category for source and target
03:26:26 <autrijus> in haskell, for example, the >>= functor on IO always produces IO and never escapes from it.
03:26:33 <lightstep> for example, the class Monoid lets us you the category Mon for computations
03:26:58 <autrijus> so it took me a week to grok Monad from the operational view
03:27:10 <lightstep> but there is no type class for some particular monoid (each individual monoid is a caterogy itself)
03:27:10 <autrijus> but once I grokked basic cat. theory, it just follows clearly :)
03:27:21 <autrijus> lightstep: well, that's what the 'class' keyword is for!
03:27:37 <autrijus> it lets you bring user-defined categories on the table.
03:28:59 <autrijus> in which, typically, objects are types and functions are morphisms between them, and class methods are functors or other interesting manipulations on class instances.
03:29:05 <lightstep> no, i meant this way: how do you let the user use the monoid category Z3={0,1,2} with addition?
03:30:04 <autrijus> data Z3 = Z0 | Z1 | Z2 ; instance MonadPlus Z3 where ...
03:30:09 <autrijus> something like that?
03:30:22 <lightstep> in other words, this is not "typically", it's "assuredly"
03:30:25 <lightstep> this says that Z3 is an object of Mon
03:30:29 <autrijus> ahh.
03:30:31 <autrijus> you want
03:30:48 <autrijus> class (Monoid a) <= Z3 a where ...
03:30:53 <autrijus> that'd be cool to see.
03:31:09 <lightstep> not exactly, but yes
03:31:33 <autrijus> you can sort of fake it with overlapping instances.
03:31:54 <lightstep> for example class (Monoid a) => Monad a means that Monad is subset of monoid
03:32:01 <lightstep> whereas Z3 is an object of Monoid
03:32:06 <autrijus> yup.
03:32:17 <autrijus> arbitary super/subtyping sounds useful.
03:33:00 <autrijus> so yeah, cat. theory helps explain many "strange features" or error messages from haskell
03:33:20 <autrijus> and helps people discover interesting structures like arrows
03:33:31 <autrijus> but doesn't really map onto real programs closely
03:34:22 <lightstep> but this is the notation of category theory, not the theory itself
03:34:56 <autrijus> I see what you mean but I hadn't really grokked past Yoneda lemma
03:34:59 <lightstep> if you can't represent all the categories as type classes, then type class /= category
03:35:03 <autrijus> so I can't really tell whether it makes sense or not :)
03:35:05 <autrijus> hi gugod.
03:35:13 <gugod> hi autrijus
03:35:50 <autrijus> gugod: I can finally sleep well tonight. I finally grokked basic category theory notations :)
03:36:48 <gugod> autrijus: and I just started figuring how to do line-based input without ioError on EOF
03:37:35 <autrijus> gugod: getContents? readLn? interact?
03:37:42 * autrijus loves readLn.
03:37:48 <gugod> why not getLine?
03:38:04 <autrijus> because getLine gives you String but readLn gives you whatever you desire :)
03:38:38 <autrijus> it's the "magically parse what I mean" function.
03:44:52 <gugod> nah, I don't need that right now. I just want my main to end normally without giving an error when "l <- getLine" reaches EOF
03:45:19 <autrijus> oh. a "try" or a "catch" maybe?
03:45:33 <gugod> really have to "catch" ? :/
03:47:17 <autrijus> tryGetLine = getLine `catch` \e -> return ""
03:47:21 <autrijus> something like this?
03:47:22 <xerox> 'lo
03:47:36 <autrijus> (treat EOF as empty string)
03:50:06 <autrijus> it would work fine if you are using ghc.
03:50:40 <autrijus> if you are using hugs then ^D from command line probably won't terminate properly...
03:56:17 <gugod> Just found that "getContents" with "lines" do the right thing
03:57:11 <autrijus> the laziest is often the best :)
03:57:21 <autrijus> "interact" is also quite good if you are doing batch processing.
03:57:29 <autrijus> that way you can stay out of IO monad totally.
04:17:25 <shapr> basti_: pong
04:23:54 <Lemmih> Good morning, shapr.
04:23:57 <shapr> greetz
04:24:07 <Lemmih> How's code?
04:24:16 <shapr> oh I dunno.
04:24:34 <shapr> I'm obsessing about unicycles at the moment.
04:25:04 <shapr> How's code with you?
04:25:41 * Lemmih still got some wounds to heal before he dares unicycling again.
04:28:37 <Lemmih> Code is great. Hacanon worked ok when I fed it the ClanLib header files. Its' now possible to open a Clanlib window from Haskell. (:
04:30:23 <Lemmih> But the codebase is really messy.
04:45:44 <basti_> shapr: i got csound now to go realtime.
04:46:23 <basti_> shapr: although, unfortunately, it won't connect work realtime with haskell for now (or just in a kludgy way)
04:49:36 <basti_> haskore
04:51:46 <Spark> a friend of mine has just said he couldnt get hugs to compile with gcc3.4 but gcc3.3 works, is that normal?
04:52:13 <basti_> i wouldnt call it normal but i cant say it surprises me.
07:14:34 <zipper> is "The Little Schemer - 4th Edition" a good book?
07:15:02 <xerox> ask #scheme ;-)
07:16:33 <zipper> i'm asking here :)
07:33:34 <zipper> any good haskell books?
07:34:57 <_Codex> zipper: "algorithms, a functional programming approach" is pretty good.
07:35:16 <araujo> zipper, im reading "Introduction to Functional Programming Using Haskell 2nd"
07:35:21 <araujo> And it is pretty dam good.
07:36:00 <_Codex> though, it's a little too easy book. But if you want something more difficult, then "Sets for mathematics" is good for category theory stuffs necessary. :)
07:39:31 <xerox> Are they freely available online?
07:39:55 <_Codex> dunno, I have real book versions :)
07:40:20 <_Codex> amazon usually have part of them available for preview of the contents.
07:40:34 <xerox> I'm reading Yet Another Haskell Tutorial
07:40:54 <xerox> I don't say I don't like it, but I'm missing something
07:59:09 <zipper> i'm looking for a book that also teaches the mathematical concepts
08:03:39 <araujo> zipper, IFPUH then
08:09:19 <_Codex> I wish there were a book that teaches monads in the same way as sets for mathematics teaches sets :) But I havent seen one yet.
08:14:29 <samc_> what way is that?
08:19:07 <samc_> oh, categorical algebra, whatever that is
08:23:33 <zipper> is this the book?
08:23:34 <zipper> http://www.amazon.com/exec/obidos/ASIN/0521277248/ref=sib_rdr_dp/002-2350533-8602425
08:37:09 <Oejet> Do you know some good sites for computer/software/programming/Haskell news?  I know about glek.net and lambda-the-ultimate.org already.
08:42:03 <samc_> Hadn't heard of glek.com, and checking it out I don't see how it is related to Haskell?
08:45:04 <Oejet> samc_: It is not related to Haskell.  It is just general computer news.
08:47:02 <samc_> oh those are alternatives (duh), quite a general question you ask
08:48:59 <samc_> for general computer news I suggest Arstechnica
09:40:50 <gzl> araujo: what's IPFUH?
09:42:30 <shapr> mmm, icehouse!
09:42:39 <shapr> basti_: tell me how!
09:42:55 <basti_> shapr: well basically you use a commandline like the one i posted
09:43:09 <basti_> the trick is that you need a) a special orchestra and b) a dummy score file
09:43:34 <basti_> midi rt works on my system.
09:43:47 <shapr> um, ok.
09:44:12 <shapr> What's that command line again?
09:44:39 <basti_> you need -o dac and for example -M <device> for midi rt
09:45:04 <basti_> you can do -L <device> to read "rt score" events but these have different semantics than the file
09:45:06 <jadrian> gzl: Introduction to Functional Programming Using Haskell ?
09:45:32 <jadrian> gzl: Richard Birds book
09:46:09 <shapr> ich verstehe nicht!
09:46:14 <gzl> oh, ok
09:46:23 <shapr> But maybe I'll figure it out next time I play with Haskore.
09:46:32 <shapr> Anyway, I've written down what you said, thanks.
09:46:36 <basti_> shapr: csound X.orc dummy.scr -M /udev/midi1 -o dac   eg.
09:46:47 <shapr> ah, that'll help.
09:46:58 <gzl> I've been using Hudak. as for mathematical foundations, Haskell's based on F_omega, right?
09:47:04 <shapr> yup
09:47:26 <jadrian> f_omega?
09:47:28 <shapr> Actually, HM, but HM is F_omega, so...
09:47:40 <jadrian> HM?
09:47:47 <shapr> Hindely-Milner
09:47:52 <jadrian> Ah
09:47:53 <gzl> yeah.
09:48:05 * jadrian should learn type theory :/
09:48:29 <TheHunter> i wouldn't say haskell is based on F_w.
09:49:15 <shapr> ?
09:49:17 <TheHunter> ghc's core is F_w, but not everything you can do in core, is possible in haskell.
09:49:47 <TheHunter> shapr, how dare you ? me ;)
09:50:28 <gzl> jadrian: System F is roughly "polymorphic lambda calculus" and F_w is sort of like type operators + System F polymorphism
09:50:43 <jadrian> gzl: right
09:50:57 <jadrian> by the way
09:51:09 <jadrian> there is something I never quite understood
09:51:14 <gzl> I need to finish reading this stuff. I've only flipped through these chapters in Pierce's book
09:51:18 <TheHunter> id (undefined :: (forall a. a -> a) -> b)
09:51:29 <TheHunter> is a type error, but you can do that in system f.
09:51:56 <jadrian> when we talk about functors and monads in Haskell, we are looking at functions as morphisms and types as Objects right?
09:52:18 <gzl> in a categorical sense?
09:52:21 <jadrian> yeap
09:52:35 <gzl> I haven't seen that stuff yet but it sounds right
09:52:54 <gzl> functors and monads I mean
09:53:45 <gzl> any treatment of these topics in lambda calculus should be more than sufficient for understanding haskell's mathematical foundations, right?
09:54:10 <jadrian> so the functors are endo-functors
09:54:16 <Cale> Yeah, when we say "Functor", we really mean an endofunctor on the category of types.
09:54:25 <jadrian> right
09:54:44 <Cale> A monad is just a particular kind of endofunctor
09:54:48 <jadrian> so that is how I'd describe that category, but
09:54:50 <TheHunter> so is () supposed to be a terminal object in the category "haskell"?
09:54:59 <Cale> with a couple of special natural transformations
09:55:10 <jadrian> we also have a order relation there
09:55:24 <esap> jadrian: consider: consider functors of type * -> * -> *. It's not an endofunctor.
09:55:24 <jadrian> between the types
09:55:38 * esap duplicates words :-(
09:55:46 <jadrian> esap: hmmm let me think
09:56:10 <jadrian> esap: that cannot be a functor by definition can it?
09:56:15 <TheHunter> but you can't instantiate such functors.
09:56:38 <esap> right, you don't make those part of Functor type class. But it's a functor in category theory sense.
09:56:47 <gzl> TheHunter, can you check my quick question above? about haskell's foundations
09:57:19 <TheHunter> gzl, i don't understand your question, sorry.
09:58:25 <jadrian> esap: hmm not sure if that makes a difference in my reasoning... (and I really mean I'm not sure)...
09:58:49 <gzl> ok. some guy asked above about learning the mathematical concepts underlying haskell. i'd like to do that as well, so i was wondering if reading about the relevant topics in type theory (System F, F_w, etc) would be appropriate
09:59:13 <esap> jadrian: perhaps not, but it means Haskell is not restricted to categorical endofunctors, though the type class is.
09:59:29 <TheHunter> gzl, i'm sure that'll be a good start.
09:59:46 <jadrian> esap: right, so which categories would you consider in haskell?
10:00:10 <esap> jadrian: product categories of '*'
10:00:13 <gzl> TheHunter: cool; what other stuff would you recommend?
10:00:47 <esap> jadrian: Then each module I suppose will produce one category
10:01:15 <shapr> TheHunter: haha!
10:01:27 <shapr> TheHunter: Just saw what you said about "?"
10:01:28 <jadrian> esap: so you'd have a category for each constructor arity? right?
10:01:35 <jadrian> esap: "type costructor"
10:02:02 <jadrian> esap: and what would be the morphisms for Cat *->*
10:02:03 <esap> jadrian: well I would have a functor for each type constructor.
10:03:35 <esap> jadrian: module imports are the morphisms
10:03:38 <jadrian> hmmm might be lost then... a functor for each type constructor? I was thinking of type constructors as the objects...
10:03:52 <TheHunter> gzl, well i think "a little" category theory plays a role in the foundations of haskell, but i'm not an expert.
10:03:59 <jadrian> esap: ah then I think I'm lost
10:04:17 <esap> jadrian: Ok, the way I think it goes is: 1) every module gives rise to a category.
10:04:39 <gzl> TheHunter: yeah. I think I want to learn categories more for algebra than for this stuff, but once I go through it with algebraic examples and get an idea of what's going on, it should be fairly easy to apply here
10:04:52 <esap> jadrian: 2) every import declaration defines a (primitive) functor between the module categories
10:05:28 <esap> jadrian: A type defined in a module would be an object of the category.
10:06:07 <esap> jadrian: function defined in a module would be an arrow in the category.
10:06:45 <shapr> newbie_do!
10:06:57 <esap> jadrian: an abstract data type (e.g. 'data Maybe a = ...' would also be a functor in the category)
10:07:00 * shapr sings the newbie song
10:07:25 <jadrian> esap: somethings don't seem to fit in, if you don't import everything....
10:07:27 <esap> jadrian: and a polymorphic function would be like a natural transformation.
10:07:47 <jadrian> esap: in the functor definition, I think
10:07:53 <jadrian> esap: in the imports
10:08:08 <gzl> esap: oh, neat
10:08:32 <esap> jadrian: The hiding of imports requires another functor
10:08:41 <esap> jadrian: which is different from the import functor
10:08:48 <jadrian> esap: right
10:09:30 <jadrian> esap: yes I think I got it
10:10:26 <jadrian> esap: except for the data part, 
10:10:36 <esap> jadrian: ok, what's the problem with the data?
10:11:10 <jadrian> esap: I would think that nor all abstract datatypes would be functors...
10:11:29 <jadrian> esap: you need to know how to apply the functor to the objects (ok)
10:11:38 <jadrian> esap: and to the morphisms (not ok)
10:12:16 <jadrian> esap: seemed to me like the class Functor is what tells you, "this data is a Functor"
10:12:25 <esap> jadrian: ok, there is a canonical choice for fmap for abstract data types. It takes a function that changes the abstract part into a function that changes the abstract part embedded in the datatype.
10:13:12 <esap> jadrian: You can define that for every datatype that has an abstract part (even if there are more than one)
10:14:36 <esap> jadrian: Though in Haskell you need to define that yourself as well. But basically all Functor instances are very similar to each other, and it's very hard to think of two ways to write that.
10:15:08 <esap> jadrian: The only problems come from some restrictions in Haskell relating to type classes.
10:15:32 <esap> jadrian: Which means it's hard to have a type class that represents functors properly
10:15:37 <jadrian> esap: yes I was trying not to think typeclasses now, that's another problem...
10:16:08 <jadrian> esap: I was thinking how you to do it if the datatype has more than one abstract part...
10:16:24 <jadrian> s/how you to/how to 
10:16:44 <esap> jadrian: you then have two functions (one for each abstract part).
10:17:26 <esap> jadrian: then you have fmap :: (a -> b, c -> d) -> F a c -> F b d
10:18:02 <jadrian> esap: ah but (a->b, c->d) is not every morphism in the category
10:18:24 <esap> jadrian: It's every morphism in CxC. This functor has kind CxC -> C
10:18:33 <jadrian> esap: right
10:19:37 <jadrian> esap: by the way, just to make sure, objects of C are all types you can have in that module
10:19:40 <jadrian> esap: right?
10:19:43 <samc_> I don't have an intuitive grasp of 'structure preservation' (i.e. of composition and identities)
10:19:50 <esap> jadrian: yes.
10:20:48 <jadrian> esap: ok just to make it a little more complicated
10:21:14 <jadrian> esap: but on an import we also get the type constructors
10:21:31 <araujo> gzl, Introduction to Functional Programming Using Haskell
10:21:36 <lightstep> doesn't ml have only algebraic types with one parameter (solving this problem(?
10:21:51 <esap> jadrian: right. That maps to functor composition.
10:22:03 <gzl> araujo: yeah, someone told me, thanks
10:22:07 <jadrian> esap: right
10:22:48 <esap> jadrian: importing does quite a bit of work for you.
10:23:15 <zipper> shapr: hi, what's a good haskell book? :)
10:23:53 <jadrian> esap:  the import Functors are just imersions if you get the whole thing right? because every object and morphism will be in the new category...
10:23:59 <araujo> zipper, i told you
10:24:16 <zipper> araujo: yeah... i'll probably get that one. thanks
10:24:28 <esap> jadrian: yes
10:24:51 <araujo> zipper, explain things mathematically very well
10:25:00 <shapr> zipper: Hudak's "Haskell School of Expression"
10:25:01 <zipper> araujo: even if i don't know math?
10:25:04 <jadrian> esap: k thanks, I think I got it
10:25:18 <araujo> zipper, mm.. you don't know math?
10:25:22 <shapr> zipper: are you not the same as wolfman8k?
10:25:29 <zipper> shapr: i am indeed
10:25:32 <shapr> ah, whew
10:25:42 <zipper> araujo: not really
10:26:31 <araujo> zipper, but it is not complex math, only basic algebra and functions 
10:26:36 <zipper> ok
10:26:40 * shapr throws lambdas
10:26:46 <zipper> "Haskell School of Expression" looks kind of basic
10:26:52 <shapr> it is
10:27:03 <zipper> i want a book with advanced mind boggling topics
10:27:05 <shapr> Oh
10:27:14 <zipper> but i want the book to explain them to me so i will understand! :D
10:27:20 <shapr> In that case, check out "Fun of Programming" maybe?
10:27:36 <shapr> But it's cheaper to look at the wiki and read up on the various feature listed.
10:28:02 <shapr> For example, functional dependencies, multiparameter type classes, higher kinded types, etc etc
10:28:35 <shapr> Some topics are cute and simple, like mfix, fixIO, etc
10:28:43 <shapr> Some, like arrows, are a bit larger.
10:28:48 <zipper> i've tried reading about those online but i can't understand them. i'm hoping there is a book that explains these complex topics starting from zero
10:29:08 <shapr> I doubt it. I tend to ask people here, they often explain better than books.
10:29:22 <musasabi> The papers are written in a certain style and it takes some time to get used to that.
10:29:32 <shapr> Fun of Programming covers some neat topics from a lower level.
10:29:53 <zipper> shapr: what do you think of "Introduction to Functional Programming Systems Using Haskell (Cambridge Computer Science Texts)"?
10:29:59 <musasabi> One thing is to be able to skip unrelevant (typetheoric) parts of the papers.
10:30:05 <shapr> But much of the cool stuff is the subject of one or a series of research papers, and that's the only place to read about those features.
10:30:17 <shapr> I know that book is written by Richard Bird, but I haven't read it myself.
10:30:26 <shapr> Also, it's an introduction, it won't have mind-boggling topics.
10:30:31 <shapr> At least, I don't think it will.
10:30:56 <shapr> You could read Chris Okasaki's Thesis on amortized complexity of lazy algorithms.
10:31:14 <zipper> it's by Antony J. T. Davie
10:31:16 <shapr> There's a whole lot of neat stuff in the Haskell world, and each neat thing tends to be connected to other cool topics.
10:31:20 <shapr> Oh
10:31:28 <shapr> huh
10:31:34 * shapr updates his mental index
10:31:45 <shapr> I dunno Antony Davie.
10:32:05 <zipper> i don't need something with super complex topics
10:32:11 <zipper> just something that goes beyond high order functions
10:32:17 <araujo> shapr, it doesn't have mind-blogging topics probably, but i just doubt will find another as well written book as this one for haskell.
10:32:19 <zipper> and maybe something that has lots of examples
10:32:32 <zipper> araujo: ok, i guess i will go with this one then. thanks!
10:32:35 <musasabi> btw does anyone know a good book about "Understanding type theory to be able to read the proofs in various Haskell papers" ?
10:32:47 <shapr> Have you already read TaPL?
10:32:47 <zipper> musasabi: i want that book too!
10:33:34 <shapr> BC Pierce's "Types and Programming Languages" is my recommendation for understanding type systems.
10:33:34 * musasabi read a good book about type theory a few years ago but the jump to System F is still too large.
10:33:36 <shapr> and type proofs
10:34:06 <zipper> shapr: would that be a good book for me?
10:34:12 <samc_> what proofs do you need to understand much type theory to understand?
10:35:08 <Oejet> musasabi: There is a paper with an implementation of a map using STM and skip lists.
10:35:43 <gzl> musasabi: yeah, Pierce's book
10:36:06 <gzl> and he has a new one coming out called "Advanced Topics in Types and Programming Languages"
10:36:54 <shapr> It's out, but I haven't ordered it yet.
10:37:01 <gzl> he's teaching my Haskell course :)
10:37:06 <shapr> !
10:37:09 <zipper> the new one is 65 green on amazon
10:37:11 <shapr> lucky you.
10:37:11 <zipper> :O
10:37:17 <gzl> yeah it's cool
10:37:41 <shapr> gzl: I've swapped some emails with him about QuickCheck and TaPL, but I'd prefer taking a course he's teaching.
10:38:00 <shapr> He's learning Haskell! yay!
10:38:29 <gzl> he teaches two, one is from TAPL and the one I'm taking (which is new this year) is using Hudak
10:38:45 <gzl> and he teaches some higher-level grad stuff in PL
10:38:55 <shapr> Oh, that must be why he learned Haskell.
10:39:04 <shapr> Is he using QuickCheck in that course?
10:39:12 <shapr> I'd love to take a TaPL course.
10:39:57 <samc_> type theory => boring
10:39:58 <gzl> I did a reading course on TAPL which was equivalent to the thing he teaches
10:40:58 <gzl> he doesn't cover the whole thing in the first course though, only about half
10:43:43 <Spark> shapr: http://www.doc.ic.ac.uk/~svb/TSfPL/
10:43:57 <Spark> i just did that
10:43:59 <Spark> it was good fun
10:44:18 <samc_> but dependent types are cool
10:44:23 <Spark> although svb knows what hes talking about hes not brilliant at teaching it, but hes a cool guy so quite motivating
10:45:11 <araujo> heya again
10:45:22 <gzl> haven't seen dependent types yet
10:45:29 <Spark> what are they?
10:45:35 <gzl> all i know is that it has something to do with higher order polymorphism
10:45:42 <gzl> (i think.)
10:45:51 <Spark> whats higher order polymorphism?
10:46:55 <Spark> isnt system F a bit crap though?
10:47:20 <Spark> its undecidable and cant type as much as intersection types
10:47:25 <Spark> or am i thinking of someone else
10:48:34 <Spark> ive spent about 3 hours trying to assemble a .bib file for the first time :O
10:51:38 <samc_> Conor McBride says they  "generalize the function space S -> T ... to the dependent function space forall x : S => T, where T may mention--hence depend on--x."
10:52:06 <Spark> hm
10:52:28 <Spark> is that like generalising quantified types to be also allowed on the right hand side of arrows?
10:56:26 <samc_> quantification can be over all first-class values
10:57:08 <Spark> whats a first class value?
11:00:45 <samc_> depends on the language, any value without limitations on its use
11:01:54 <Spark> dependent types do look a bit leet from what i see: http://types.bu.edu/reports/Xi:SEFM-2003.html
11:03:38 <Spark> it looks like you can use types to carry interesting constraints around with the variables / expressions
11:03:53 <samc_> so you could for example declare the type of lists of length n
11:04:25 <Spark> and integers betwen a and b, or integers between a and b, or c and d and stuff?
11:04:26 <samc_> check out papers on the language Epigram for good explanations
11:04:48 <samc_> sure
11:05:47 <musasabi> Oejet: where?
11:05:55 <wli> wasn't curry doing something like that?
11:06:03 <wli> no
11:06:06 <musasabi> the paper on map using stm + skip lists.
11:06:06 <wli> not curry, cayenne
11:06:23 <Spark> its quite an obvious idea though isnt it?
11:06:33 * musasabi is quite happy with TVar (Data.Map k v)
11:07:13 <Spark> you want the types to precisely express what a term is capable of so you can reject / accept terms in certain contexts as appropriate, so when you have arrays and such you need bounds, when you have division you need != 0, etc
11:07:51 <samc_> more or less yes, but that doesn't stop people from butchering their explanations ;)
11:08:06 <Spark> heh
11:08:28 <Spark> ill have to look into this when im less busy, which is scheduled for october currently :)
11:08:41 <Oejet> musasabi: http://www.cl.cam.ac.uk/~kaf24/papers/phd.pdf
11:09:25 <musasabi> thanks.
11:09:31 <Oejet> musasabi: What does the time measurements say about TVar (Data.Map k v)?
11:11:01 <wli> My being less busy is scheduled for either when I die or when the economy crashes sufficiently badly as to put me in the poorhouse..
11:11:30 <Spark> oh it'd be so good to be unemployed
11:11:38 <Spark> i could catch up on all the stuff im meant to be doing
11:11:44 <Spark> http://www.terminalpacketloss.com/pictoz/images/OC2TAUNT.gif
11:12:44 * wli notes there are other problems in/around economic problems that make existence far less comfortable than that, and goes back to quaking in terror of exchange rate/etc. predictions.
11:13:45 <Spark> work for an investment bank, buy an island in the pacific, and hope theres not a tsunami
11:32:34 <musasabi> Oejet: that it (TVar (Data Map k v)) is quite fast - kills off e.g. Data.HashTable in many cases.
11:34:34 <Oejet> And compared to MVar?
11:36:22 <musasabi> Oejet: it is more or less the same as modifyMVar, slower than read/writeMVar.
11:38:16 <Oejet> But not very fine grained.
11:39:32 <musasabi> true.
11:39:42 <musasabi> Oejet: but lazyness helps there.
11:40:08 <musasabi> Oejet: as discarded operations are very cheap since they don't do the work until needed.
11:40:23 * araujo happy since he will get some vacations soon
11:40:56 * araujo will be able to continue 24hrs/7days with haskell
11:41:39 <samc_> wow, what are you taking?
11:43:01 <CosmicRay> shapr: ping
11:44:56 <Oejet> musasabi: I see.
11:51:25 <Spark> programming on drugs = bad :)
11:53:33 <samc_> pshh Erdos was always on drugs
11:54:04 <samc_> (not that he did programming)
11:54:04 <Igloo> Wasn't he a mathematician?
11:54:08 <Igloo> Right  :-)
11:54:26 <Spark> heh
11:54:43 <Spark> it probably depends on the drug
11:54:48 <Spark> e.g. caffeine is ok but alcohol is bad
11:54:56 <Spark> lsd... ? :)
11:55:22 <Spark> speed is odd since it magnifies your enthusiasm or your lack enthusiasm for the task depending on which you have, not that ive tried it or anything :)
11:57:42 <jadrian> http://www.zephoria.org/thoughts/archives/2003/06/29/drugs_and_math.html
11:57:48 <samc_> Erdos was a motorhead  (amphetamine user)
12:00:08 <jadrian> "Erdos would often remark that a mathematician was a machine for turning coffee into theorems"  :-|
12:00:46 <samc_> Once, a friend bet Erdös $500 that he could not quit amphetamines for a month. Erdös took the bet and won, but, during his time of abstinence, he found himself incapable of doing any serious work. "You've set mathematics back a month," he told his friend when he collected, and immediately returned to his pills.
12:02:08 <samc_> is that pro or anti drugs?
12:06:25 <Igloo> How could it be anti?
12:07:09 <samc_> well if he had never started...
12:07:43 <samc_> it creates a dependency, and we have no proof of extra productivity
12:07:44 <Igloo> then he would never have achieved anything (the way I read it, at least)
12:08:36 <samc_> I suspect he was a mathematician before he started
12:10:07 <samc_> it seems to be a win, but I can't imagine it had no cost
12:15:57 <kuribas> isn't it strange that a book about compiler construction uses C as implementation language?
12:16:22 <kuribas> I'd say a functional language is much more appropriate
12:16:51 <jadrian> well, I think it's obvious you don't need drugs for that, there are other ways to achieve an altered state of mind
12:16:54 <jadrian> think o Nash
12:16:59 <jadrian> s/o/of
12:17:09 <samc_> by being crazy?
12:17:44 <jadrian> well, he didn't do it by using drugs ;)
12:17:58 <jadrian> then again, maybe he ended up having to take them anyway
12:18:03 <ne1> C is just too common that's all
12:20:21 <kuribas> nel, I think writing a compiler in C is a painful undertaking
12:21:07 <ne1> How thick is the book?  That probably proves your point.
12:21:33 <Igloo> Looks like you're right - http://bookbuzz.com/MBIO_About_Erdos.htm
12:21:38 <ne1> Compare, e.g., with Appel's one that uses SML.  Covers more ground, thinner.
12:21:55 <kuribas> nel, what's that book?
12:22:15 <kuribas> the one I saw was about 600 pages
12:22:52 <ne1> However, Appel actually has another one using Java, and another one using C.  They all cover the same ground and they're all thinner.  I guess a functional programmer knows how to make things simpler even with C.
12:26:26 <ne1> Yes some 550 pages +/-10.  Compare: Crafting a Compiler with C (Fischer & leBlanc), 812 pages, not much on code optimization, no mention of garbage collection.  QED
12:28:48 <kuribas> The book was "Modern Compiler Design" by a bunch of authors.
12:30:09 <kuribas> Is there a book that you would recommend?
12:30:55 <kuribas> This one looked nice, except that it uses C as implementation language ...
12:31:09 <jesse98> engineering a compiler is good
12:31:58 <ne1> I still stick with Appel.  But you can always cross out the C code.
12:32:21 <jesse98> i thought the appel c book was pretty lame
12:32:34 <ne1> I only accept the ML one.
12:33:04 <ne1> But if you have a book that teaches you well except for the C code, just take out a black permanent marker and start painting...
12:33:15 <jesse98> i dont think the language matters much in a compiler book unless it opens up new idioms like parsec for example
12:37:19 <Lemmih> Greetings, SyntaxNinja.
12:37:25 <SyntaxNinja> hihi Lemmih
12:37:36 <kuribas> nel, lol :)
12:38:27 <Riastradh> Of course the language matters, jesse98, if it inhibits or aids the expression of new concepts.
12:40:33 <jesse98> well, it matters some, but i'd usually be just as happy with psuedo-code
12:40:57 <ne1> A more constructive way is to use a white correction fluid (not black marker) to paint over the C code, then write Haskell code over it.
12:41:41 <kuribas> jesse98, pseudo-code is better than C :)
12:41:49 <kuribas> nel, right
12:42:00 <ne1> I agree with pseudocode.
12:42:26 <ne1> Too bad there is no market for pseudocode.  Those lame student buyers demand things they can copy right away.
12:42:32 <Riastradh> Languages should be expressive enough so as not to necessitate pseudo-code.
12:43:05 <Spark> psuedo code has a halfway house though, in designing an algorithm
12:43:44 <Spark> using a hypothetical language will always give you more flexibility and freedom than using a well defined one :)
12:46:15 <kuribas> wikicode is well defined.  All it lacks is an implementation
12:48:53 <Spark> re: the drugs thing
12:49:05 <Spark> if i recall long term regular amphetemine use results in psychosis
12:49:09 <Spark> paranoia and stuff
12:50:47 <Spark> i cant make up my mind whether paranoia is rational or not though
12:52:38 <Spark> i think i know what it is with erdos
12:52:46 <Spark> every speed user i know is a control freak
12:52:56 <Spark> he probably disliked the idea that his body had physical limitation
12:52:59 <Spark> limitations
12:54:08 <Spark> i cant imagine using speed / base / meth on a daily basis though since the comedown is awful
12:55:50 <SemanticsNinja> not that you've tried it though right
12:56:08 <SemanticsNinja> ;)
12:57:41 * SyntaxNinja peers suspisciously at semanticsNinja
12:57:52 <_samc> hah too late
12:57:54 <gzl> haha
12:58:48 <SyntaxNinja> heh
12:59:18 <_samc> I would've won in a fight mind you
12:59:34 * Riastradh compiles SyntaxNinja!
13:00:12 <Riastradh> (or maps SyntaxNinja denotationally into semantic domains -- is that better?)
13:01:26 * SyntaxNinja has become abstract!!
13:01:45 * AbstractSyntaxNi relaxes a little
13:02:03 <Spark> :o
13:07:53 <Spark> that book about erdos is wicked
13:14:48 <Spark> http://www.amazon.com/gp/reader/0786863625/ref=sib_rdr_fm/102-0007157-9352118?%5Fencoding=UTF8&p=S002#reader-page
13:14:51 <Spark> i was right :)
14:25:41 <bluegods> well
14:25:47 <shapr> deep subject
14:25:51 <bluegods> can web app be written in haskell without headache
14:25:55 <shapr> yes
14:26:02 <bluegods> how I learn haskell
14:26:07 <bluegods> tutorial?
14:26:09 <shapr> yes
14:26:12 <bluegods> runs on win xp?
14:26:14 <shapr> yes
14:26:18 <bluegods> link?
14:26:20 <shapr> no!
14:26:23 <shapr> maybe
14:26:26 <shapr> ok ok!
14:26:31 <shapr> look at the channel topic.
14:26:39 <Lemmih> (:
14:26:41 <shapr> it has a link like http://www.haskell.org/learning.html
14:27:05 <shapr> I suspect that's a good place to find tutorials.
14:28:19 <bluegods> ok
14:28:23 <bluegods> thank you
14:28:28 <shapr> you're welcome.
14:40:54 <musasabi> yet another haskell tutorial is quite good.
14:42:49 * jadrian likes Richard Birds book
14:47:15 <araujo> jadrian, pretty nice book isn't it?
14:53:25 <jadrian> araujo: I like it
14:56:48 <Sonarman> which one is the Bird book?
14:57:09 <Sonarman> nevermind, found it. sorry
17:02:49 <clausen> anyone got Sipser handy?
17:58:27 <cm> heyhow
18:20:09 <cm> is GHC's FFI easy to use to access Win32 API functions?
18:20:50 <Lemmih> Why would you access the win32 API?
18:21:52 <cm> Excuse me?
18:22:47 <Lemmih> I'm just wondering if there isn't some already written library which does what you want.
18:23:15 <cm> Nope.
18:23:44 <jesse__> there is, but it isnt 100%, nor is it documented at all, from what i remember
18:24:09 <cm> Win32 is vaguely mentioned in the FFI document.
18:24:28 <cm> I guess I have to RTFM more.
18:25:11 * jesse__ doesnt know much about FFI, but i do remember a win32 library in ghc somewhere
18:35:27 <sh10151> hi
18:37:53 <Lemmih> Greetings.
18:39:47 <Lemmih> Woot Woot. Hacanon can now handle enumerations.
18:44:46 <Riastradh> Hacanon?
18:45:55 <Lemmih> TH library for automatic FFI code generation from C/C++ header files.
18:48:23 * maihem gets excited
18:49:05 * maihem fetches the video4linux headers
21:04:42 <ozone> Lemmih: out of interest, how long have you been working on hanacon now?
21:05:49 <Lemmih> On and off since the beginning of december.
21:06:59 <ozone> that's pretty impressive
21:07:17 <ozone> when GHC gets shared lib support, i'll have to try using it to build directshow filters on windows :)
21:08:10 <Lemmih> directshow filters?
21:09:05 <ozone> yeah, a multimedia framework
21:09:12 <ozone> does audio/video codec handling, etc.
21:09:27 <ozone> if hanacon can work with that, hanacon will work with just about anything!
21:10:08 <Lemmih> My "employer" keeps telling me that I would work on his project instead of hacanon (:
21:10:16 <ozone> :)
21:10:24 <ozone> oh, does hanacon parse macros too?
21:10:49 <Lemmih> No /-:
21:12:24 <ozone> right
21:12:34 <Lemmih> The C-preprocessor is applied to the header files before any parsing takes place.
21:13:04 <ozone> ah, ok.  that sounds perfectly fine
21:16:27 <Lemmih> ozone: You can check my changelog if you have darcs installed.
21:16:49 <ozone> neh, i better not.  if i start playing with it now, i'll never get any work done ...
21:17:17 <Lemmih> Heh (-:
22:05:16 <cm> "Closer" is a cool movie
