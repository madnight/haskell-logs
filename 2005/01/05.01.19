00:04:20 <wilx`> lol
00:04:36 <wilx`> It shows similar qualities as Brainfuck :D
00:05:21 <juhp> *giggle*
00:05:33 * juhp reads the "Introduction"
00:12:06 <vdrab> a quicky : does anyone know of an existing implementation of lattices in haskell?
00:13:06 <Gahhh> lattice as in maths ?
00:13:31 <vdrab> yes
00:13:51 <Gahhh> I don't.
00:14:26 <Gahhh> What are they used for ?
00:14:28 <vdrab> just probing #haskell before I start doing it myself.... google turned up nothing
00:15:08 <vdrab> I guess you can call it a visualization for ordered sets
00:15:58 <vdrab> a graph structure where for any two nodes, there is another node that is their minimal upper bound or maximal lower bound
00:16:11 <vdrab> thing crystals ... :-)
00:16:14 <vdrab> think
00:17:01 <Gahhh> ok.
00:17:31 <Gahhh> hmmm. bonkenc
00:19:18 <vdrab> since haskell is good at doing trees, I'm thinking of just taking two trees, turning one upside down and tying them together at the leafs using indexes or something.... that should give the desired structure... it just sounds a bit too simple to be true... 
00:20:07 <vdrab> ... anyways.
00:20:10 <Gahhh> Why is Haskell good at doing trees ?
00:21:07 <vdrab> ehm... algebraic data types? looking at any ol' haskell tutorial, there's more trees than you can shake a stick at.
00:21:26 <dons> they're simple to define and manipulate, would be the standard answer
02:00:19 * musasabi has found haskell painfull with trees
02:01:07 <musasabi> writing rotation code gives me a headache
02:01:28 <musasabi> then again those algorithms are written for imperative languages.
02:01:57 <Spark> is rotation where you pick a new root?
02:02:20 <musasabi> Spark: rotation is e.g. what you do to AVL or red black trees.
02:03:04 <musasabi> btw does finitemap scale to 20000 elements?
02:03:12 <Spark> oh ok <blank expression> :)
02:03:49 <musasabi> and how much does the DData integration (IntMap) help me if my keys are ints.
03:00:21 * juhp lol
03:00:43 <juhp> `I dislike this terminology: for one thing, a “functional” programming language is one in which functions have first-class citizenship, so a “purely functional” one should be one where, as in Unlambda, only functions have first-class citizenship.'
03:03:19 <kosmikus> isn't this the case in Haskell? everything that's first-class in Haskell is an expression, and therefore a (possibly nullary) function
03:05:23 <juhp> kosmikus: I think the objection includes variables ;)
03:06:01 <ibid> variables are not first class :)
03:06:08 <ibid> in haskell, that is
03:08:02 <musasabi> but aren't variables just names for functions (ignoring implicit parameters)
03:13:04 <juhp> ok sorry, the actual objection is to "pure functional programming" having "explicitly sequenced side effects"
03:16:50 <ibid> but haskell doesn't have them :)
03:17:30 <lmbdwr> 'lo
03:19:10 <juhp> ibid: er, it doesn't?
03:19:55 <juhp> s/programming/programming languages/
03:22:23 <juhp> ugh, think I'll have to epoch darcs in Fedora Haskell
03:55:27 <ibid> juhp: well, as long as uPIO is not a part of the official language :)
05:11:05 <balkan> where can i paste code?
05:11:35 <boegel> @wiki HaskellIrcPastePage
05:11:35 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
05:12:00 <balkan> is there a more general paste facility. not just for haskell?
05:12:51 <boegel> balkan: what do you want to paste ? is it for asking questions here ?
05:13:49 <balkan> yes. but also when i have a java question or a c++ question. general questions. i don't want to paste java stuff in that page. unless that's ok.
05:14:35 <boegel> oh, if it's not for this channel, then I don't know...
05:14:50 <boegel> http://www.elis.ugent.be/~ageorges/albums.php?q=elias/114/ -> hehehehe
05:14:54 <boegel> woops :s
05:15:22 <Itkovian> :-)
05:15:26 <Itkovian> sure boegel, tell the world
05:15:31 <boegel> :$
05:15:33 <boegel> sorry
05:15:35 <Itkovian> np
05:17:36 <balkan> a good looking boy...
05:17:52 <Itkovian> why thx.
05:18:48 <balkan> i didn't mean you...i meant the little boy...
05:19:04 <Itkovian> he's my son :-)
05:19:22 <boegel> balkan: hehehe
05:21:12 <musasabi> most channels have their own paste bins.
05:22:05 <balkan> yes...you're probably right. but there was this one place...were you could choose between a lot of bins...
05:40:38 <wli> OWWW
05:40:50 <wli> -threaded doesn't allow concurrent syscalls??
05:43:03 <musasabi> if you have native threads...
05:43:09 <wli> forkOS?
05:43:17 <musasabi> no, forkOS is fork.
05:43:39 <musasabi> bounded threads or somesuch (haven't really got a clear picture)
05:45:22 <wli> "Bound threads can be created using the forkOS function below. All foreign exported functions are run in a bound thread (bound to the OS thread that called the function). Also, the main action of every Haskell program is run in a bound thread."
05:46:14 <musasabi> wli: you were right.
05:46:24 <musasabi> Has anyone worked with happy and the source in IOUArray instead of String ?
05:49:05 <xerox`> 'lo
05:55:45 <xerox`> @get-definition flip
05:55:46 <lambdabot> flip = \f x y.f y x
05:57:53 <Lemmih> @type (flip flip) 10 div 20
05:57:54 <lambdabot> (flip flip) 10 div 20 :: forall b. (Integral b) => b
06:04:43 <xerox`> @type div
06:04:44 <lambdabot> div :: forall a. (Integral a) => a -> a -> a
06:05:49 <xerox`> Lemmih, nice, eheh
06:06:00 <xerox`> @type flip flip
06:06:01 <lambdabot> flip flip :: forall a c b. b -> (a -> b -> c) -> a -> c
06:06:55 <Muad_Dibber> @type flip flip flip
06:06:57 <lambdabot> flip flip flip :: forall a c a1 b c1.
06:06:57 <lambdabot> 		  (a -> ((a1 -> b -> c1) -> b -> a1 -> c1) -> c) -> a -> c
06:07:04 <xerox`> ugh
06:07:07 <wli> there's the answer on forkOS
06:07:11 <Lemmih> xerox`: (:
06:24:47 <Lemmih> Philippa: How's flippi?
06:30:03 <juhp> make[2]: *** No rule to make target `GenApply.o', needed by `genapply'.  Stop.
06:30:39 <Lemmih> juhp: eh?
06:30:46 <juhp> hmm, something is wrong with my bootstrapping, I guess
06:31:04 <Lemmih> What are you buildign.
06:31:08 <Lemmih> *building?
06:31:11 <juhp> Lemmih, trying to bootstrap, ghc on x86_64...
06:31:21 <juhp> s/,//
06:32:40 <juhp> ah well, time for bed
06:33:33 <earthy> oh, do I wish it was time for bed...
06:33:38 <earthy> !yawn
08:15:46 <kosmikus> do I understand it correctly that ghc 6.4 will not support old-style package descriptions?
08:20:01 <Oejet> musasabi: PING
08:22:27 <Lemmih> kosmikus: Yes.
08:22:50 <kosmikus> has anyone written a tool to convert package descriptions?
08:23:16 <Lemmih> Can such a tool be written?
08:23:38 <kosmikus> that's part of my question ...
08:23:54 <kosmikus> I think it's non-trivial due to exposed-modules
08:23:59 <musasabi> Oejet: pong
08:24:04 <kosmikus> but even a suboptimal package description is better than none, I guess
08:24:22 <Lemmih> Old package descriptions not contain enough information at all.
08:24:33 * Oejet feels geeky saying "ping". :-P
08:25:04 <Lemmih> kosmikus: But it's very easy to create a cabal package.
08:25:09 <Oejet> musasabi: I have written a function: couldBe :: Parser a -> Parser (Maybe a)
08:26:19 <kosmikus> Lemmih: well, it's probably easy for the author of a package
08:26:24 <musasabi> option Nothing (try p >>= return.Just) ?
08:27:00 <kosmikus> Lemmih: mind, I don't want a package description that contains information for Hackage, I want a package description sufficient to get it into ghc, as long as no new upstream release is available
08:27:01 <Igloo> exposed-modules should be easy enough to do conservatively, no?
08:27:18 <Oejet> couldBe p = do { res <- Text.ParserCombinators.Parsec.try p
08:27:18 <Oejet> 	       ; return (Just res)
08:27:18 <Oejet> 	       } 
08:27:18 <Oejet> 	    <|> return Nothing
08:27:19 <Igloo> Although I don't know how conditional imports are handled
08:27:22 <kosmikus> Igloo: that's what I was thinking; including all modules should be harmless, shouldn't it?
08:27:46 <Lemmih> kosmikus: Yes. It's still not possible.
08:27:59 <Oejet> musasabi: Looks the same.  Like yours better. ;-)
08:28:07 <Igloo> Lemmih: Why not?
08:28:39 <musasabi> Oejet: that is untested - but should just work.
08:29:54 <Lemmih> Igloo: You have to name every exposed module. That info is not in the old package descriptions.
08:30:12 <Igloo> find . -name "*.hs" -o -name "*.lhs"
08:30:17 <kosmikus> Lemmih: is this the only issue?
08:30:33 <Igloo> Proper cabalisation is a much better solution, of course
08:31:05 <kosmikus> Igloo: I'm thinking of an automatised way to be able to reuse old ebuilds in Gentoo with ghc-6.4 until new releases arrive
08:31:08 <Lemmih> kosmikus: More or less.
08:31:19 <kosmikus> I'm not keen on writing package descriptions myself
08:31:31 <Lemmih> kosmikus: Why not?
08:31:36 <Igloo> Don't ebuilds have package descriptions?
08:32:07 <Igloo> If you leave it a month before switching to 6.4 then you can hope most will be done already, anyway
08:32:11 <Oejet> musasabi: Seems to work.  May I use your alternative?
08:32:16 <Lemmih> kosmikus: A cabal description is pretty much just a name plus the exposed modules.
08:33:10 <kosmikus> which I would probably infer using a find command such as Igloo just gave ... so I can as well write a function to convert the old description file and add the additional info
08:34:18 <Igloo> Is there a list of Haskell-related ebuilds somewhere?
08:34:19 <kosmikus> changing one file (the eclass) is significantly easier than changing all ebuilds
08:34:30 <kosmikus> there are not that many
08:34:47 <kosmikus> but actually, I'm not even sure that all packages will be updated within a month or so after release of ghc-6.4
08:35:06 <Lemmih> kosmikus: The extension are gonna bite you in the ass (-:
08:35:10 <kosmikus> I think ghc should provide backwards compatibility here
08:36:05 <Igloo> I think SM wanted to have backwards compatibility, but decided it would be too much work for too little reward
08:37:13 <musasabi> Oejet: please feel free to do so.
08:37:19 <kosmikus> is it so much work, then? can't the list of modules easily be inferred from the library file by scanning the exported names?
08:38:09 * Igloo doesn't know
08:38:30 <Igloo> I also think that encouraging cabalisation is now bad thing, so wasn't as motivated to look into it as I might otherwise have been  :-)
08:38:59 <kosmikus> it's certainly a good thing
08:39:12 <kosmikus> and I'm not worried about the issue in the long term
08:40:28 <kosmikus> I'd only think it would be nice to have a short-term solution, so that everyone can upgrade immediately without losing anything
09:07:21 <musasabi> Is there any structured output framework suitable for webapps?
09:07:25 <Oejet> If "1*letter / 3digit" means one letter followed by any number of letter or three digits, then what does "*14( letter )" mean?
09:08:04 <musasabi> Oejet: you should forget about that and just take the rest as simple string.
09:08:16 <musasabi> Oejet: then commands can unwords if they want.
09:08:37 <Lemmih> musasabi: Sort of.
09:09:05 <Oejet> musasabi: I guess that was an answer for a question, I haven't had yet. :-)
09:09:08 <musasabi> or then do the unwords equivalent in the parser.
09:09:58 <musasabi> Oejet: you are trying to parse the params. you can divide that to space delimetered arguments and a final argument starting with ':'.
09:10:03 <musasabi> Lemmih: hmm?
09:10:57 <Oejet> I see your point.  But I am curious as to what " *14("abe") " means.
09:13:24 <Lemmih> musasabi: There's Hemplate. It's somewhat like Halipeto except that it is designed for dynamic contents.
09:17:17 * musasabi reads the source
09:20:09 <Philippa> <Lemmih> Philippa: How's flippi? <- did I point you at the darcs repo? Haven't really done anything on it since
09:21:54 <Philippa> (the repo's at http://snowblind.scannedinavian.org/~flippa/Flippi )
09:38:50 <xerox> Hi!
09:38:58 <faboo> hello
10:09:59 <edwinb> gah!
10:11:16 <edwinb> that'll teach him...
10:15:06 <stepcut> I wonder what it would take to add orthogonal persistence to hOp
10:15:31 <Philippa_> a disk driver would be a start? Or has somebody done that now?
10:16:12 <CosmicRay> hey igloo
10:16:13 <stepcut> :p
10:16:18 <CosmicRay> I have multiple questions for you :-)
10:17:00 <CosmicRay> Igloo: I have done what searching I can on the arm issue
10:17:16 <CosmicRay> Igloo: the buildd's last atempted to build the thing in June 2003
10:17:28 <CosmicRay> Igloo: I can't tell if the float issue lies with ghc or the compiler
10:17:39 <CosmicRay> Igloo: or if there have been substantive changes to either ghc or the compiler since then
10:17:50 <CosmicRay> Igloo: or even if it failed because of the floats then (it was a build-dep issue at that point)
10:18:08 <CosmicRay> Igloo: so I'm trying to figure out where I should start to look into this
10:41:52 <musasabi> Lemmih: is there any other example of Hemplate than hackage?
10:55:26 <Lemmih> musasabi: No.
10:59:45 <Lemmih> But the template syntax is pretty simple.
11:09:42 * desrt wakes up every single morning and wonders why 'permute' is not in prelude
12:09:38 <icb> anyone here built 622 on mac os 10?
12:31:33 <Lunar^> icb: You should take a look at darwinports.org
12:31:45 <Lunar^> icb: There's an uptodate port for GHC
13:18:54 <skuggi> anyone here good with Hugs?
13:19:14 <shapr> I'm better with cuddling personally.
13:20:16 <skuggi> i can't change the search path
13:20:28 <skuggi> not permanently. it always changes back.
13:20:46 <skuggi> changing the registry doesn't work either
13:21:56 <shapr> I know GHCi has a ~/.ghci
13:22:12 <skuggi> this is in windows..
13:54:31 <shapr> skuggi: you could check the Hugs docs to see if there's a %HOME%/.hugs file that gets executed on startup
13:54:33 <shapr> might be there
14:00:31 <stepcut> hrm, I want to call mntent *getmntent (FILE *__stream), I wonder I get a value of type FILE *, other than calling fopen...
14:00:55 <stepcut> I don't see a way to turn a haskell fd into a FILE *  :-/
14:03:41 <skuggi> shapr: checked the docs..
14:03:58 <skuggi> says that on windows the default options are stored in the registry.
14:04:11 <skuggi> but changing it in the registry doesn't change anything
14:04:19 <shapr> does that include a file that's executed on startup?
14:04:43 <skuggi> what sort of file?
14:04:53 <skuggi> not it doesn't
14:06:28 <shapr> In that case, I'd suggest you switch to GHC, since it does have a file that's executed on startup.
14:06:50 <skuggi> since hugs doesn't have a file?
14:07:00 <shapr> I don't know, I don't use Hugs much.
14:07:32 <skuggi> but what did you mean?
14:07:51 <skuggi> by "it".. did you mean hugs or GHC
14:08:32 <shapr> GHC does use ~/.ghci
14:08:35 <shapr> I don't know about hugs.
14:08:48 <shapr> I think it's %HOME%/.ghci that's loaded on win32
14:10:53 <skuggi> ah.
14:11:26 <skuggi> is GHC an interpreter too?
14:11:29 <skuggi> or only compiler?
14:12:26 <Lunar^> skuggi: both
14:12:28 <wilx`> GHC is the whole thing and the compiler.
14:12:33 <skuggi> Lunar^: k
14:12:44 <Lunar^> skuggi: It's even an operating system, if you look close enough
14:12:48 <wilx`> GHCi is the interactive part.
14:12:56 <skuggi> ah
15:14:25 <musasabi> Lemmih: hemplate does not compile - it is missing Functions.hs
15:44:04 <stepcut> is there a program that will attempt to resync an out of date /etc/mtab with /proc/mounts ?
15:44:21 <stepcut> (under linux)
15:44:51 <wolfman8k> haskell rocks!
15:44:59 <stepcut> that too...
16:11:35 <musasabi> Lemmih: http://www.cs.helsinki.fi/u/ekarttun/hemplate/ - I will probably do more stuff in a few days. (You don't want all of that in any case)
16:13:14 <wolfman8k> hey, did you guys see this? http://benny.kramekweb.com/hrayt/
16:17:50 <musasabi> the last image is very very nice..
16:18:07 * musasabi goes find some sleep (4hours till I have to wake up)
16:18:20 <wolfman8k> props go to cale for that one... but what about the text?
16:18:31 <stepcut> Another would-be juror said he had had alcohol problems and was arrested for soliciting sex from an undercover officer. "I should have known something was up," he said. "She had all her teeth."
16:19:48 <musasabi> wolfman8k: looks fine, but I am too tired to make intelligent suggestions...
16:28:13 <Lemmih> musasabi: Ops. Functions.hs should now be in the repo.
16:30:38 <Lemmih> shapr: Ping.
16:42:17 <shapr> y0
16:42:55 <wolfman8k> shapr: hi
16:43:01 <shapr> hiya wolfman8k 
16:44:23 <Lemmih> shapr: I've having problems sending patches to http://www.scannedinavian.org/repos/hemplate/
16:47:07 <jberg> is there a SDL binding for haskell?
16:47:14 <Lunar^> jberg: a few
16:47:26 <jberg> lunar, whats the best one?
16:47:27 <Lunar^> jberg: 3, IIRC
16:47:39 <Lunar^> jberg: Unfortunately, there all unfinished
16:47:57 <Lunar^> jberg: You should ask shapr, I think it might know better than me
16:48:19 <Lemmih> jberg: Search for "SDL Adrian Hey"
16:48:20 <jberg> oh ok.. well im only looking for one with a function for opening a window, and one for putting a pixel on the screen
16:48:23 <jberg> thanks
16:49:34 <wolfman8k> jberg: i used this one called Multimedia.Core or something. worked really well for this: http://benny.kramekweb.com/hrayt/
16:49:52 <jberg> wolfman8k, cool. does it work under windows?
16:49:57 <wolfman8k> jberg: don't know
16:50:20 <jberg> whats the url? can't find it on google..
16:50:34 <wolfman8k> don't know
16:50:58 <jberg> so how did you hear about multimedia.core then? where did you get it?
16:51:08 <Lemmih> http://homepages.nildram.co.uk/~ahey/HLibs/Multimedia.SDL.Core/
16:51:14 <wolfman8k> http://homepages.nildram.co.uk/~ahey/HLibs/Multimedia.SDL.Core/index.html
16:51:27 <jberg> thanks
16:57:54 <Lemmih> musasabi: What are you planning to do with Hemplate?
17:03:03 <matteo> Hi
17:11:35 <Lemmih> Greetings matteo 
17:16:39 <matteo> hi
17:50:05 <Oejet> Hej Lemmih.
19:32:11 <Lemmih> themaximus: Learning Haskell?
19:41:54 <juhp> finally, got x86_64 bootstrapped :)
19:42:04 <juhp> hello: ELF 64-bit LSB executable, AMD x86-64, version 1 (SYSV), for GNU/Linux 2.4.0, dynamically linked (uses shared libs), not stripped
19:42:57 <juhp> yay
19:43:10 <Lemmih> Neat.
19:43:45 <dons> yay!
19:44:15 <juhp> the moral of the story seems to be to do in it the morning not at night...
19:44:19 <dons> what does this say:
19:44:19 <dons> import System.Info
19:44:20 <dons> main = do 
19:44:20 <dons>         putStrLn System.Info.arch
19:44:20 <dons>         putStrLn System.Info.os
19:46:03 <juhp> x86_64
19:46:04 <juhp> linux
19:46:10 <juhp> :)
19:46:25 <CosmicRay> juhp: sorry to say, but it's been done :-)
19:46:36 <CosmicRay> I just ran apt-get install ghc6 on my box, and poof... there it was... :-
19:46:46 <juhp> CosmicRay: nice
19:47:04 <CosmicRay> did you use an existing ghc6 or did you have to do the nasty copy the hc files over deal?
19:47:16 <juhp> (I wasn't claiming to be the first :)
19:47:32 <juhp> CosmicRay: copied over the .hc files
19:47:54 <CosmicRay> which distro?
19:47:59 <juhp> fedora core
19:48:04 <CosmicRay> ah
19:48:49 <juhp> CosmicRay: the debian build is unregistered too, I take it?
19:49:05 <CosmicRay> I don't really know, I'd assume it's registerised but I'm not certain
19:49:43 <dons> I still don't know. I haven't seen any registerisation commits 
19:49:53 <dons> and it was registerised 6 months ago
19:49:54 <juhp> ok, I'll try packaging it with this build, let us see what happens
19:49:57 <dons> s/was/wasn't/
20:00:24 <juhp> anyway this is just 6.2.2
20:03:58 <MegaMonad> G'day saz, what's up?
20:36:37 <heatsink> rm -rf /
20:36:40 <heatsink> oops wrong window
21:12:55 <Pseudonym> So I told her you can't get rid of a body that way.
21:12:58 <Pseudonym> Oops wrong window.
21:17:08 <musasabi> morning
21:18:21 <musasabi> Lemmih: I need a templating system for a webapp thing and hemplate looks very promising.
21:18:24 <Gahhh> So she told me that she and her roommate have never mud wrestled before...
21:20:03 <musasabi> Is haddock documentation for CVS GHC available somewhere by default?
21:24:12 <dons> not for ghc itself. you could generate it for the libraries, if you want
21:25:14 <musasabi> automating it in someway could be nice.
21:51:45 <musasabi> dons: can I get the haddock docs without compiling ghc - which seems to fail for me.
21:53:36 <dons> the head was broken for a few days, until today. it should be possible to get the docs just by build glafp-utils, and then building the docs in libraries/
22:03:52 <musasabi> doesn't seem to work - but it may be an issue with the tree I am using..
22:04:06 <musasabi> haddock by hand works fine though.
22:18:53 <autrijus> greetings.
22:23:21 <musasabi> autrijus: hello.
22:23:52 <musasabi> autrijus: Do you have the derive Binary template haskell code somewhere available as a whole?
22:25:56 <autrijus> musasabi: yes. a sec
22:29:13 <autrijus> how do I checkout a darcs repo "up to" some patch"
22:29:27 <autrijus> i.e. I had Macro.hs deleted at a certain date
22:29:35 <autrijus> now I'd like to retrieve the tree at that date
22:35:02 <autrijus> musasabi: 
22:35:07 <autrijus> http://autrijus.org/Macro.hs
22:35:53 <autrijus> I'm happy that I finally solved the "global vars" problems for myself :)
22:36:26 <musasabi> autrijus: thanks.
22:36:43 <autrijus> instead of -> IO x, most of my Main.hs functions now becomes -> StateIO Vars x
22:36:51 <autrijus> type StateIO v a = (MonadPlus m, MonadIO m, MonadReader v m, MonadError e m, Show e, Typeable e) => m a
22:37:04 <autrijus> and Vars is a record of IORefs.
22:37:15 <autrijus> happily this is as fast as passing the vars around :)
22:37:47 * autrijus starts reading the banana papers
22:37:55 <autrijus> life as a newbie is good :)
22:38:56 <musasabi> the State IO trick is quite nice - the only setback is having to lift IO code.
22:39:32 <autrijus> yeah but most of my utility IOs lift themselves
22:39:38 <musasabi> autrijus: btw why are you using a reader monad instead of a state monad?
22:39:46 <autrijus> musasabi: it's less pain.
22:40:12 <autrijus> I found ReaderT+Vars{IORef A, IORefB} faster than StateT+Vars{A,B} 
22:40:15 <autrijus> since I'm on IO anyway
22:40:27 <autrijus> and also much easier to understand
22:40:52 <musasabi> but StateT + Vars{IORef A, IORef B} ? (avoiding the list lookup)
22:41:18 <autrijus> I'm confused. where's the list lookup?
22:41:48 <autrijus> readVar l = do
22:41:48 <autrijus>     vars <- ask
22:41:48 <autrijus>     liftIO $ readIORef $ l vars
22:41:56 <autrijus> does this involve a list lookup?
22:42:31 <autrijus> the idea is I don't use the "put" half of StateT
22:43:46 <musasabi> now I understand. I was accustomed to using [(String,Foobar)] in reader, and didn't think one could just stuff a record there.
22:44:01 <autrijus> =)
22:44:27 <musasabi> seems nice.. have to make that mod to my own State + IO code ;)
22:45:11 <musasabi> btw Data.IntMap seems very nice - 2*faster than either Data.HashTable or Data.FiniteMap for some of my tests/
22:45:19 <musasabi> s/\//.
22:46:17 <autrijus> a 6.4 thing?
22:46:40 <autrijus> same thing as this?
22:46:41 <autrijus> http://www.cs.uu.nl/~daan/download/ddata/doc/IntMap.html
22:48:11 <musasabi> yes.
22:48:26 <musasabi> it was imported into the CVS a few days ago.
22:48:32 <musasabi> should be in 6.4.
22:49:30 <autrijus> bbiab &
22:56:23 <Gahhh> What is the size limit on arrays in Haskell ?
22:56:30 <Gahhh> if any
22:58:05 <dons> maxHeapSize variable set with -M   :}
22:59:43 <Gahhh> The OCaml manual states the array limit to 2^22-1 =~ 4 million on 32 bit platforms...
23:17:52 <musasabi> Gahhh: well how big arrays do you want?
23:20:21 <musasabi> newArray (0, 50000000) 0 :: IO (IOUArray Int Int) works fine...
23:24:59 <tintin> shapr: how far along are the emacs bindings of yi ?
