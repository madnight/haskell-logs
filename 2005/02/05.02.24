00:07:00 <shapr> Lemmih: ayh?
00:11:05 <lightstep> for a clueless 14 years old windows user, what's a simple haskell environment?
00:11:16 <nlv11757_> hugs?
00:11:29 <nlv11757_> you mean develop env or for testing code?
00:12:11 <lightstep> she wants to learn to program, and i'm thinking whether haskell or DrScheme
00:13:04 <lightstep> i thought helium would be good, but there are so many bugs, and i haven't found a way to even launch a window
00:13:10 <shapr> Vital
00:13:56 <lightstep> do you have a url? google doesn't give useful results
00:14:04 <shapr> http://www.cs.kent.ac.uk/projects/vital/
00:14:59 <shapr> I haven't tried it myself, but it's the kind of thing I wanted when I was learning.
00:15:26 <shapr> Squeak/OpenCroquet/etc is another nice option for learning programming.
00:16:19 <lightstep> i never really figured squeak out
00:16:54 <shapr> You probably won't need to either, just install it and allow this 14 year old to try it.
00:17:17 <shapr> I'd install DrScheme, Squeak, and some other stuff, and give a five minute intro to each.
00:17:50 <shapr> Alice was really great too.
00:18:05 <shapr> It's sort of gone downhill since they switched to Java.
00:18:30 <lightstep> the problem with just installing is that she's not very fluent in english
00:19:08 <shapr> I'm not Squeak uses that much english.
00:19:20 <shapr> er "not sure"
00:19:43 <shapr> Oh, now that I think about, a lot of the intro stuff is in English.
00:19:53 <lightstep> that's what i meant
00:20:44 <shapr> On the good side, the Morphic interface is easy to remember once you've seen it. Each button has a different color, and always does the same thing.
00:21:29 <shapr> Unless your bandwidth costs by the kilobyte, I'd say download and install several and give a five minute intro to each.
00:21:51 <lightstep> cool, thank you
00:22:07 <shapr> And I'd like to hear what she ends up liking :-)
00:22:37 <lightstep> btw, how can i install java web start on debian unstable?
00:32:32 <shapr> I do wish there were an OpenGL DSL, something like Haskore.
00:33:14 <heatsink> DSL?
00:33:23 <shapr> Domain Specific Language
00:34:24 <heatsink> ah.
00:34:30 <shapr> (sphere center 1) :: Shape Position Size
00:36:11 <nlv11757_> helium is perfectly functional
00:36:22 <nlv11757_> it's actively used to teach functional programming at UU
00:37:01 <lightstep> helium is no good on windows, as far as i tested it
00:37:19 <lightstep> it even has problems with spaces in file names
00:37:28 <nlv11757_> spaces in filenames...brrr
00:37:33 <lightstep> (which every file in My Documents has)
00:37:34 <nlv11757_> who thought of that
00:38:07 <nlv11757_> if you can get past that....it works fine to my knowledge, not that i work under linux
00:38:09 <nlv11757_> uuuh windows
00:40:51 <nlv11757_> but then again, if you are under linux, might as well use ghci
00:41:55 <lightstep> do you (or they) use helium without hint? is it even possible?
00:43:37 <nlv11757_> nooooo, with hint ofcourse
00:43:50 <nlv11757_> helium is just the thing which is called behind the screen
00:43:51 <nlv11757_> s
00:44:35 <nlv11757_> i personally dont use helium of course, it's only meant for teaching first year students with better error messages and without Type Classes (which cause these horrible messages)
00:45:18 <lightstep> hmm. not i see that Vital doesn't support full haskell
00:45:23 <lightstep> s/not/now/
00:50:06 <nlv11757_> nor does helium
00:54:45 <nlv11757_> but that might not be a problem as this 14 year old wouldnt use the full powers anyway
00:54:54 <shapr> Not necessarily :-)
00:55:23 <nlv11757_> probably
00:55:24 <nlv11757_> :)
00:55:41 <nlv11757_> with a high probability then :)
00:56:21 <shapr> There are several #haskell people who are younger than 20.
00:57:14 <Lemmih> shapr: More than two?
00:57:21 <shapr> Yes
00:58:06 <nlv11757_> i didnt say there weren't, just that someone of 14 years old probably won't hit the roof when using a tool that doesn't implement full Haskell
00:58:30 <lightstep> the problem with not having full haskell is that use can't use wxhaskell and similar stuff
00:58:36 <lightstep> making vb superior to haskell
00:58:59 <nlv11757_> vb superior to haskell? hahaha there is no evil parallel universe where this phrase would be true
00:59:16 <shapr> I learned BASIC on an Apple IIe, if I'd learned lambda-calculus and then Haskell instead, I would be a much happier person.
00:59:54 <nlv11757_> I forgot about basic and then learned lambda calculus and haskell :) im quite happy indeed
00:59:56 <nlv11757_> lol
01:00:14 <shapr> Actually, I learned Basic on a Sinclair...
01:00:18 <nlv11757_> :O
01:00:21 <nlv11757_> me on a C64
01:00:22 <nlv11757_> :D
01:00:41 <shapr> How old are you?
01:00:49 <shapr> You must be nearly as old as me.
01:01:07 <lightstep> you guys make me feel so young
01:01:16 <shapr> lightstep: how old are you? :-)
01:01:20 <heatsink> hey, I learned basic on an apple iie too
01:01:21 <lightstep> almost 19
01:01:28 <shapr> I'm 100001 years old!
01:01:44 <shapr> I'm 21 years old. (0x21)
01:02:09 <lightstep> i thought you were 41 (041)
01:02:35 <heatsink> Hey, I'm closer to lightstep's age.
01:03:05 <ibid> 1b years
01:03:07 <lightstep> the basic i learned using computers with was gwbasic
01:03:18 <heatsink> George Dubya?
01:03:24 <ibid> hm, that makes me 33 years old :)
01:03:31 <ibid> (033)
01:04:05 <ibid> dammit, i can't decide whether to go to work or not
01:04:14 <shapr> They might give you money.
01:04:16 <Maddas> The first time I programmed reasonably useful things on my own was in Perl
01:04:16 <lightstep> does anyone here know what the java web start installation on linux want from me?
01:04:18 <heatsink> Go to work and say you didn't.
01:04:31 <Maddas> (I did use some Pascal before, but I never did much in it)
01:04:57 <ibid> shapr: i have a cold, it's borderline whether it justifies skipping my lecture
01:05:14 <shapr> Just make sure to sneeze on some students in the front row so that people tell you stay home next time.
01:05:20 <Maddas> haha
01:05:21 <ibid> heh
01:05:34 <ibid> it's my call actually
01:05:48 * heatsink decides to sleep
01:06:09 <ibid> well, i think i'll hop in the bus and see if i still feel able when i'm at work
01:06:13 <ibid> bbl :)
01:06:13 <shapr> I always go to work when it's my call. I work from home, only time I can plead too sick is when I'm too sick to use my computer at all.
01:06:57 <shapr> Speaking of which, I love getting paid to hack on Haskell code.
01:07:06 * shapr does the joyful dance.
01:07:56 <shapr> lightstep: you bring up an excellent point, the full power of Haskell is really nice, but there aren't any friendly graphical introductory environments that expose the full power.
01:09:16 <Forest> about power of haskell, i asked a few days ago of a fast fib number function - there was no answer
01:09:18 <shapr> At least, none that I know of
01:09:30 <shapr> Forest: autrijus gave a very nice one.
01:09:37 <shapr> two days ago or so.
01:09:49 <Forest> first - it wouldn't compile
01:10:05 <lightstep> does hugs integrate well with windows editors?
01:10:16 <shapr> Forest: have you tried the lazy list version?
01:11:08 <Forest> second - it used arrays, which has O(n) update time
01:11:20 <shapr> Well, at least it was some answer :-)
01:11:44 <Forest> shapr: i pasted the code - it wouldn't compile, i don't know whar lists it used
01:11:51 <Forest> *what
01:12:10 <Forest> shapr: there was no correct answer )
01:12:25 <shapr> I think there was a correct answer just after you left the channel.
01:12:40 <Lemmih> Forest: Have you tried googling?
01:14:12 <Forest> Lemmih: no, i ve written my function at last, it just seems haskell is not so comfortable
01:14:12 <nlv11757_> sorry i was finishing something, im 23
01:14:39 <Lemmih> Forest: How so?
01:15:02 <Forest> not very
01:15:33 <Lemmih> Forest: Why don't you find it comfortable?
01:17:06 <Forest> Lemmih: because so many people failed to solve such a simple task for other languages
01:18:13 <Maddas> Maybe it's because most people are busy solving more interesting problems :-)
01:18:32 <Lemmih> I'm confused. First you said that no-one answered you, then you said that you got one replay but it was broken and now there was serveral people involved?
01:18:47 <Lemmih> s/replay/reply/
01:18:58 <Forest> Maddas: maybe )
01:19:11 <shapr> Also, the lazy list version I gave you is fast and clear.
01:19:30 <Forest> Lemmih: there were two answers i saw - 1 too slow, second wouldn't compile
01:19:38 <shapr> fib = 0 : 1 : zipWith (+) fib (tail fib)
01:19:43 <shapr> I gave that version as well.
01:20:00 <Forest> shapr: i didn't saw it then, sorry
01:20:29 <shapr> It's true though, I'd rather be working on paying Haskell instead of answering questions where it seems to me you can find the answer yourself.
01:21:03 <shapr> Here's a bunch of versions of factorial - http://www.willamette.edu/~fruehr/haskell/evolution.html
01:21:25 <shapr> You can modify those to Fibonacci without too much trouble.
01:21:44 <shapr> Well, some of them :-)
01:22:51 <Forest> shapr: does tail function make a copy of a list ?
01:23:12 <Forest> shapr: won't it be O(n^2) then ?
01:23:33 <shapr> Profile it, see what you find out.
01:24:45 <Lemmih> Forest: Copying the list would be meaningless since it's immutable.
01:29:29 <Forest> shapr: seems to be rather fast, but still memory consuming
01:30:10 <shapr> Do you have GHC profiling output?
01:30:28 <Forest> shapr: no
01:31:46 <seidan> Forest: I was following your conversation the other day. autrijus final answer (one typo plus some stupidity from me fixed) was:
01:31:51 <seidan> fib 0 = 1
01:31:51 <seidan> fib 1 = 1
01:31:51 <seidan> fib n = flist!!(n-1) + flist!!(n-2) where flist = map fib [ 0.. ]
01:31:59 <nlv11757_> is there really a good wxhaskell primer?
01:34:22 <vdrab> nlv: I 'm looking for one too
01:34:48 <vdrab> ... which partly answers your question :-(
01:34:58 <Forest> seidan: it wouldn't compile or gave wrong answer(i dont remember), but this version still shuts down the console window at n = 10000
01:35:57 <nlv11757_> hehe, cause i produced something just by thinking logically and searching the API, but there must be a better didactic way :D
01:36:11 <nlv11757_> to use wxhaskell to its full extend anyway
01:36:25 <Lemmih> Forest: Using GHCi?
01:36:33 <Forest> Lemmih: eys
01:36:34 <Forest> yes
01:37:03 <Lemmih> Compiling the program might be better. GHCi doesn't apply any optimizations.
01:37:08 <vdrab> nlv: actually, I have that problem with lots of haskell stuff... I can find lots of info and docs on writing fibonacci sequences, but it's damn' hard to get info on how to get something usefull done.... \end_rant
01:37:25 <shapr> When using the lazy list fib this works nearly instantly for me, also in ghci -  ((take 1) . (drop 9999)) fib
01:37:40 <seidan> Forest: works for me. 2090 digits.
01:37:41 <shapr> vdrab: Would you like to write a tutorial for The Monad.Reader?
01:37:58 <nlv11757_> vdrab: there are lot's of usefull books and tutorials on Haskell
01:38:03 <vdrab> I would if I knew how it worked.... the problem is circular :-)
01:38:20 <shapr> vdrab: ah, but if you learn something the hard way, then you can teach it the easy wy.
01:38:21 <Lemmih> shapr: Isn't that the same as 'fib!!10000'?
01:38:50 <nlv11757_> so no-one has a good alternative to the API for me with regard to wxhaskell?
01:39:32 <shapr> vdrab: I'm taking that route for my Template Haskell tutorial article I'm writing for the Monad.Reader.
01:39:46 <shapr> boegel is doing that same thing for Haskell's gtk binding.
01:40:46 <shapr> He wrote a concentration/memory game to both teach himself gtk and so he can write a tutorial. It's very cute.
01:41:18 <vdrab> shapr: how's the Monad.Reader coming along anyways? big expectations here...
01:42:14 <shapr> Well, I'm the editor, and I have a lot of contract work this week. I'm not convinced it'll be out on March 1st, though there's still the possibility.
01:42:18 <seidan> shapr: Wow, your version is fast.
01:42:41 <vdrab> shapr: cool.
01:43:01 <shapr> On the good side, my first commercial deployment of Haskell software I wrote myself is this week. That's part of my contract work.
01:43:23 <Forest> yes, when compiled not interpreted in GHCi it's ok
01:43:39 <shapr> vdrab: I totally agree that Haskell needs more documentation outside of research papers, the best way to fix that is for us to write it!
01:43:42 <vdrab> there's your first success story for the Monad.Reader :)
01:44:28 <shapr> Do you have a particular subject that you know about that others may not?
01:45:21 <vdrab> shapr: I would love to do it, but I really really feel I keep stuck at the haskell beginner level, because I can't figure out how to do most real-life stuff in haskell.... reading a list of function declarations in Haddock is just not my idea of learning haskell
01:45:28 <shapr> Lemmih: hey, I wanted to upgrade Hackage on snowblind, but I don't have 6.3 installed. I think I'll wait till 6.4, if that's soon.
01:46:41 <shapr> vdrab: You could pick a subject and hang out here and ask questions. I tend to think of learning as 'eroding the frontiers of knowledge'. Sometimes it is slow and frustrating, but you get great rewards.
01:46:47 <Lemmih> Not even sure Hackage compiles with GHC 6.3.
01:47:02 <shapr> requires 6.4 now?
01:48:00 <Lemmih> Maybe, I'm not sure (:
01:48:26 <vdrab> shapr: that's usually how writing haskell code works for me.... stare at GHC documentation.... frown over a list of type declarations... get on this channel.... have someone tell me what I need and why ....  going back to GHC documentation.... wonder why it's not there.... get on this channel. ... recurse....
01:48:41 <shapr> You could just stay on the channel like me ;-)
01:48:46 <vdrab> hehe
01:48:50 <vdrab> I may just do that
01:48:54 <shapr> That's not so good for work though!
01:48:59 <nlv11757_> or read the whole ghc manual :P
01:49:02 <shapr> The people here are far too interesting, I never get work done.
01:49:35 <shapr> That recursion sounds like my first few months learning Haskell, I asked a *lot* of basic questions.
01:50:04 <shapr> but Heffalump, dennisb, wli, Igloo, and others were continually helpful.
01:50:11 <vdrab> seriously though... something like a haskell Cookbook would be so handy.... basic problems with basic solutions...
01:50:35 <shapr> I totally agree, if you want to write a Recipe column in TMR, I'll help you when I can :-)
01:50:56 <shapr> http://pleac.sf.net/ might have some helpful code
01:51:06 <vdrab> see I would love to be in the position to do that... .but I'm usually on the receiving end of instruction.
01:51:07 <nlv11757_> vdrab, are you dutch or do you speak english?
01:51:20 <nlv11757_> or both :P
01:51:21 <Maddas> shapr: That's the one containing code written that redefines tons of prelude functions :-)
01:51:24 <vdrab> I'm belgian
01:51:30 <vdrab> living in japan
01:51:30 <Maddas> Er, broken grammar.
01:51:56 <shapr> As soon as you've learned something, you can teach it to others. Sometimes that's the very best time to teach it, because it's easiest to remember the bumps on the road.
01:52:05 <nlv11757_> a nice, this; http://www.cs.uu.nl/people/jeroen/courses/fp-nl.pdf is what tought me haskell.  Maybe its of any use to you
01:52:21 <nlv11757_> there an english version also: http://www.cs.uu.nl/people/jeroen/courses/fp-eng.pdf
01:52:26 <Maddas> I think the "Strings" section of the Haskell PLEAC entries are more confusing than helpful if you aren't careful
01:52:34 <vdrab> nlv: nifty, let's see
01:53:07 <jlouis> pleac is very perl centred. It is not that you can just take 1-1 mappings of the functions to haskell
01:53:23 <shapr> jlouis: yeah, but it would be a good place to steal a basic cookbook structure.
01:53:28 <shapr> ahem, borrow
01:53:29 <Maddas> jlouis: Right, and the Haskell versions use a redefined (.) and ($) and so on
01:54:26 <Maddas> I think something using the basic can be very helpful
01:54:30 <Maddas> Er, the basic structure.
01:55:30 <vdrab> nlv: thanks. I've actually read similar books, and I feel comfortable enough using the core of haskell for algorithmic stuff and modelling, with GHCi, but that's about it
01:56:20 <nlv11757_> ok, wasnt sure what you were looking for.
01:57:52 <vdrab> thanks. what I'd like to get more familiar with is, well, wxHaskell, the FFI interface, HaskellDB.... it's just that documentation consists of ... haddock docs and the proverbial hello world programs.
01:58:34 <nlv11757_> i agree
01:59:03 <nlv11757_> im actually looking for some more introductory stuff too, because i simply dont have the time to dig into it myself and find out
01:59:09 <shapr> I wrote the first version of the HaskellDB tutorial, and Lemmih updated it for the recent versions, any feedback would be appreciated.
01:59:50 <shapr> http://www.haskell.org/hawiki/HaskellDbTutorial
01:59:57 <vdrab> same here... I don't have the luxury to do haskell 24/7, so I can't afford to find out everything myself... it's a sad excuse, but it's true
02:00:18 <shapr> I'm self-employed, and I make my money with Python in Zope, so I understand.
02:00:40 <vdrab> shapr: what's the url for that tutorial?
02:00:56 <shapr> I pasted it a coupla lines up.
02:01:03 <nlv11757_> maybe if im going to do phd on my university, i can be busy with Haskell 24/7
02:01:03 <vdrab> haskell wiki?
02:01:07 <nlv11757_> but not right now
02:01:13 <shapr> yup
02:01:23 <vdrab> sweet.
02:02:09 <shapr> Lots of good info on the Haskell Wiki. I'm also the maintainer of the Haskell Wiki, so if you see anything needed there, I'd like to hear about it.
02:02:32 <vdrab> shapr: how would you compare haskell with Python? I 'm kinda curious about python, and we have a python project coming up here so I may actually volunteer for it if it looks interesting enough?
02:02:51 <shapr> Cale and TheHunter have done most of the actual work on HaWiki lately, credit where it's due.
02:03:05 <vdrab> yeah, I spend lots of time there...
02:03:12 <vdrab> the wiki rock
02:03:13 <vdrab> s
02:03:27 <shapr> Python is a nice language, it was definitely my first love.
02:03:45 <shapr> I find it kind of irritating these days, but it's much more comfortable than Java or C.
02:04:08 <vdrab> I hear it's really bulky, but has nice libraries
02:04:25 <shapr> I'm not sure what bulky means exactly, but it does have nice libs.
02:04:59 <vdrab> bulky as in lots of dead weight, performance-heavy, ... that's just hear-say though
02:05:29 <shapr> Python is surprisingly fast. Zope and Plone are *huge* but they're still quite speedy.
02:06:05 <vdrab> fast? really? I hear lots of people say they'd get into python if it just weren't so slow.
02:06:08 <shapr> I mostly miss the higher order function idioms I use in Haskell.
02:06:21 <shapr> I think those people haven't actually used Python :-)
02:06:36 <vdrab> hehe. quite possible
02:06:45 <shapr> But then, people say the same thing about Haskell, "it's too slow, I must use OCaml"
02:07:13 <Maddas> And again some people say that O'Caml is too slow, they must use C :-)
02:07:16 <shapr> Philippa has a nice email .sig "Performance anxiety causes premature optimization"
02:07:31 <vdrab> yeah. somehow many people measure speed of a language by the number of semicolons it takes to write a line of code :-)
02:07:41 <shapr> heh, right
02:08:15 <Maddas> That would explain "Lisp is slow" ;-)
02:08:17 <lightstep> which is, ofcourse, higher in caml than haskell because of the list syntax
02:08:24 <vdrab> I was surprised with ghc in that respect, really
02:08:28 <nlv11757_> there are situations in which you want to use C....just not much
02:08:29 <nlv11757_> lo
02:08:30 <nlv11757_> l
02:09:05 <shapr> Right, most of the 'industry' use of Haskell I've seen is prototyping to get it right, and then porting it to C or C++ for the rest of the team.
02:09:15 <Maddas> Ugh
02:09:36 <Maddas> At least they use Haskell, I guess :-)
02:10:02 <Maddas> (oh, never mind, I didn't read "for the rest of the team")
02:10:04 <shapr> Yeah, true. But I think that shows the barriers to language adoption in most cases are cultural more than anything else.
02:10:17 <vdrab> so the 'architects' use haskell for expressivity, and the programmer goons get to redo it in C++
02:10:26 <Maddas> I completely agree. Like PG (I think) said, languages aren't just tools, they are habits of mind.
02:10:30 <Maddas> And nothing changes slower :-)
02:10:34 <shapr> truly!
02:10:39 <vdrab> so true...
02:11:23 <shapr> I got into Haskell while searching for more expressivity. I found lots more in Haskell than I had in Python. I don't know if that's just because Haskell fits the way I think, or whether it's objectively more expressive, but I am happy I found Haskell.
02:11:40 <Maddas> There are few people who I stopped talking to if the topic involves programming since they continuously argue that if what they use can do it somehow, everything else is superfluous
02:11:47 <Maddas> That really annoys me :-)
02:11:48 <nlv11757_> i like to believe....Haskell found you shapr :P
02:11:50 <nlv11757_> haha
02:11:51 <shapr> haha
02:12:10 <shapr> Maddas: that's called the turing tarpit.
02:12:14 * Maddas nods
02:12:22 <nlv11757_> doaitse just made me enthousiastic
02:12:27 <vdrab> me too, haskell helps me tremendously in my research, but I don't know if I'll ever write a line of haskell for a living.
02:12:48 <Maddas> Don't you do research for a living?
02:13:06 <shapr> Lambda-the-ultimate.org always skirts the edges of the Turing Tarpit. But recently someone said "a language can often be defined by what it makes easy to do". I really like that idea.
02:13:08 <vdrab> as a student.... hmm
02:13:35 <shapr> I think that's a good discussion basis.
02:13:47 <Maddas> Indeed
02:14:09 <Maddas> The only good thing about the turing tarpit is that you recognize it and related arguments quickly once you got annoyed by it often enough
02:14:13 <shapr> vdrab: what sort of research do you do?
02:14:42 <vdrab> logic/linguistics/... stuff.
02:14:54 <vdrab> so, not really CS
02:15:09 * Itkovian thinks one should use the language in which the problem at hand can be solved most easily
02:15:27 <vdrab> yeah. it seems languages need to solve a problem that nobody knew was a problem before then.... look at the erlangs/perls
02:15:37 <vdrab> ... to become really popular
02:15:51 <Maddas> Erlang is popular? :-)
02:16:27 <vdrab> well, it's more marketable in certain parts of industry... not to be mentioned by name
02:16:47 <Maddas> Oh, ok, I thought you meant popular the way Java is
02:17:17 <Maddas> I think the harder the problems get the more likely the people are to spend more time thinking about the programming language
02:18:05 <vdrab> yeah
02:18:40 * Itkovian knows people who devise new programming language to tackle every new problem they meet.
02:18:54 <shapr> domain specific languagess!
02:18:57 <Maddas> Sounds fun
02:19:01 <vdrab> Itkovian : do they do it in haskell? :p
02:19:28 <Itkovian> vdrab: nope, they use Pico, and extend it in all sorts of ways.
02:19:36 <Itkovian> Pico the language, not the editor.
02:19:47 <nlv11757_> embed those language in haskell :D
02:19:51 <Itkovian> heh
02:19:53 <Itkovian> I think not.
02:20:06 * vdrab makes note to self. look into pico
02:20:07 <nlv11757_> combinator libraries fun
02:20:24 <vdrab> pico, is that the Scheme that looks like C?
02:20:29 <Itkovian> they have a rudimentary website ... http://pico.vub.ac.be/
02:20:47 <Oeje1> nlv11757_: I'm about to look into FFI.  What documentation have you found until now?
02:20:54 <Itkovian> hmm, they seem to have extended it ...
02:22:58 <shapr> right, lunchtime!
02:23:04 <Maddas> Yay, good idea.
02:23:07 <vdrab> yeah, dinner time here
02:23:28 <vdrab> cheers
02:23:33 <nlv11757_> i remembered that Daan's phd thesis contained quite something about ffi oeje1, let me see
02:23:47 <lightstep> lunch? isn't it 10:30 am in europe?
02:23:57 <Maddas> lightstep: One hour later here
02:24:02 <Itkovian> 11:30
02:25:00 <lightstep> lucky people, have 2 timezones in you political unit
02:25:06 <lightstep> *your
02:25:21 <nlv11757_> Oeje1 take a look at http://www.cs.uu.nl/~daan/download/papers/phd-thesis.pdf there some stuff about ffi and so on
02:41:04 <Oeje1> nlv11757_: Thanks!
02:41:29 * glimming The Eagle has Landed
02:42:00 <glimming> I still can't get ghc to work with ghci from CVS
02:42:19 <shapr> did you build stage2 ?
02:42:24 <glimming> yes...
02:42:32 <shapr> did it build with no errors?
02:42:39 <glimming> I tried make stage2 in compiler/ dir
02:43:20 <glimming> I think so, but I will do it again and watch it more closely, be back soon.
02:43:28 <shapr> I make stage2 two directories up from that
02:43:35 <shapr> not in ghc/compiler
02:44:26 <shapr> you can see if stage2 with ghci actually works by doing ./ghc/compiler/stage2/ghc-inplace --interactive
02:44:26 <glimming> Hrm Now I got  ghc-6.5: unknown package: template-haskell
02:45:04 <glimming> make all in fptools dir gives me greencard error
02:45:13 <glimming> but ghc seems to compile fine but it terminates at greencard
02:45:24 <shapr> do you have ghc-inplace in ghc/compiler/stage2/ ?
02:45:53 <glimming> no, I did make clean yesterday, but then I recompiled it all overnight, and it wasn't there now
02:46:08 <shapr> ok, run make stage2
02:46:13 <glimming> (why the -inplace suffix?)
02:46:28 <shapr> because ghc-inplace is how you use ghc in that place.
02:46:35 <glimming> ranlib: file: libHSbase.a(Time_hsc.o) has no symbols
02:46:35 <glimming> ranlib: file: libHSbase.a(Posix_hsc.o) has no symbols
02:46:35 <glimming> ranlib: file: libHSbase.a(CPUTime_hsc.o) has no symbols
02:46:36 <glimming> ranlib: file: libHSbase.a(Time_hsc.o) has no symbols
02:46:37 <shapr> ghc-inplace is like ghc-not-really-installed
02:46:38 <glimming> ranlib: file: libHSbase.a(Posix_hsc.o) has no symbols
02:46:41 <glimming> ranlib: file: libHSbase.a(CPUTime_hsc.o) has no symbols
02:46:43 <glimming> ranlib: file: libHSbase.a(Time_hsc.o) has no symbols
02:46:46 <glimming> ranlib: file: libHSbase.a(Posix_hsc.o) has no symbols
02:46:49 <glimming> I get a lot of those
02:46:53 <shapr> hey, not more than three lines of pasting
02:47:00 <glimming> sorry.
02:47:18 <glimming> ;-)
02:47:22 <shapr> no clue about those errors.
02:47:42 <glimming> it does not seem to matter though
02:47:50 <glimming> I get ghc to work but not ghci
02:47:50 <shapr> I just did ./configure && make && make stage2 with the ghc-6.4 release candidate
02:48:03 <glimming> and you did that in fptools/ ?
02:48:14 <glimming> (first autoreconfig ??)
02:48:34 <shapr> nah, the ghc-6.4 release candidate isn't the same as the fptools cvs checkout
02:48:53 <glimming> what are the main differences?
02:49:02 <glimming> Should I expect thte CVS to be brutally unstable?
02:49:32 <shapr> I think in fptools it's autoreconf && ./configure (your options here) then cd ghc and make there
02:49:52 <shapr> sometimes CVS can be unstable, you can often tell by reading the cvsall mailing list
02:50:04 <shapr> dags att lunch, ska kom tillbaka
02:50:11 <glimming> FÖR lunch ;-)
02:50:17 <glimming> or dags att äta lunch
02:50:20 <shapr> ok, tack :-)
02:50:22 <glimming> kommer snart tillbaka
02:50:27 <glimming> bye for niow
02:50:43 * nlv11757_ is out to lunch
03:39:20 <glimming> What's wrong with
03:39:40 <glimming> >  newtype Tuuut f = Ut (f (Tuuut f) (Tuuut f))
03:39:49 <glimming> In ghc 6.5 I get
03:40:00 <glimming> Kind error: `f (DFailed, mirec f) (Direc f)' is not applied to enough type arguments
03:40:03 <glimming>     In the data type declaration for `Direc'
03:40:23 <glimming> where s/Direc/Tuuut/
03:40:59 <glimming> It worked for data....
03:40:59 <autrijus> can newtype be used that way?
03:41:05 <autrijus> I thought only data works
03:41:07 <glimming> You mean I need data?
03:41:08 <ibid> you're using f as both nullary and binary?
03:41:36 <glimming> No, why f nullary? f is binary!
03:41:39 <ibid> what are you trying to say with that?
03:41:49 <ibid> glimming: no. i was confused
03:41:58 <glimming> scott domain  OA=A->A
03:42:34 <glimming> newtype Rec f   = Inn (f (Rec f))
03:42:36 <glimming> is happily accepted
03:42:39 <Heffalump> ttp://wiki.di.uminho.pt/twiki/bin/view/GTTSE
03:42:44 <Heffalump> sorry, mispaste
03:43:07 <ibid> glimming: does it work with an older ghc?
03:43:31 <glimming> Can't test it since I use infix type synonyms. Ok I can. It did. Wait.
03:44:03 <ibid> i mean, isn't 6.5 unreleased, so it could be a bug?
03:44:24 <glimming> hugs accepts it
03:45:43 <glimming> That's strange.
03:45:47 <glimming> ghc 6.2 loves it.
03:45:53 <glimming> ghc 6.5 on command-line loves it.
03:46:05 <glimming> but ghc 6.5 from eclipse hates it. (ghci I mean everywhere)
03:51:38 <glimming> Not a bug
03:51:49 <ibid> what is it then?
03:51:50 <glimming> Implication of another line which used this definition before it was defined.
03:52:07 <glimming> (not recommended way of writing datatype def's)
03:52:11 <glimming> I just love 6.5
03:52:19 <glimming> I just love these guys behind haskell.
03:52:23 <glimming> They are geniuses
03:52:32 <glimming> Even CVS 6.5 works.......
03:53:39 <glimming> What's wrong with this line then:
03:53:39 <glimming> >  newtype Object t f' f o1 o2   = Object (f' t o1 -> f t o2)
03:53:48 <glimming> I am trying to understand this newtype stuf.
03:54:20 <glimming> I want to apply t and o1 to f'
03:54:26 <glimming> maybe I need to write it differently?
03:54:33 <glimming> E.g. (f' t o1) -> (f t o2) ?
03:54:38 <glimming> I.e.
03:54:48 <glimming> Object ((f' t o1) -> (f t o2))
03:54:53 <glimming> is it treated as pair here?
03:55:10 <shapr> You could write unit tests or prototypes to test out each of these questions.
03:55:33 <glimming> Short programs you mean?
03:55:34 <glimming> unit tests?
03:55:46 <glimming> Yes, but then I would not learn WHY it is wrong here.
03:56:02 <glimming> Particularly the second newtype question. I have used this succesfully with data (I think)
03:56:03 <shapr> http://c2.com/cgi-bin/wiki?SpikeSolution
03:56:33 <shapr> Often those sorts of answers do include a why.
03:57:28 <glimming> aha
03:57:57 <glimming> put more succinctly: I ask too many questions! ;-)
03:58:25 <shapr> succinctly "you can answer these questions yourself"
03:58:47 <glimming> (within 24 hours...)
03:58:55 <shapr> Yes, with 24 hours even.
03:59:20 <glimming> >  newtype Object t f' f o1 o2   = Object (f' t o1 -> f t o2)
03:59:30 <glimming> Does not strike you as strange in any way at all?
04:00:16 <nlv11757_> Quickcheck
04:00:22 <glimming> quickcheck?
04:00:22 <shapr> Have you written prototypes to check that the pieces of this solution work in isolation?
04:00:46 <glimming> yes
04:00:48 <glimming> It does.
04:01:36 <shapr> Do you have those prototypes and the actual vs expected results in a single file online?
04:01:50 <shapr> If you have them in a single .hs file, then people can try it for themselves.
04:02:53 <glimming> Ok. So I do not recommend 6.5 to anyone right now.
04:02:54 <glimming> Kind error: Expecting kind `k_a1JA -> k_a1JE -> k_a1JI -> *',
04:02:54 <glimming> 		but `DUnit t' has kind `k_a1JA -> k_a1JE -> *'
04:03:00 <glimming> Is not nice names for types...
04:03:16 <shapr> Sometimes I solve my problem by myself while writing the different pieces into the file. I sometimes realize that my understanding does not match reality.
04:03:29 <shapr> Sometimes it's just a bug and I send it to ghc-bugs
04:04:03 <autrijus> shapr: I'm quickly approaching 1000 words :)
04:04:07 <shapr> spiffy!
04:04:13 <autrijus> will probably be twice the number.
04:04:24 <autrijus> definitely a draft tonight.
04:04:24 <shapr> That's fine with me.
04:04:29 <autrijus> hope I did not delay you too much
04:04:30 <shapr> excellent.
04:04:45 <shapr> No, the delay is more my work deadlines than anything else.
04:04:47 <glimming> what are you writing about?
04:04:50 <autrijus> ahh.
04:04:54 <autrijus> glimming: pugscode.org
04:04:59 <autrijus> #perl6 stuff.
04:05:12 <shapr> That's why I want next issue to allow the authors to do as much as they can without me being the bottleneck
04:05:44 <glimming> safer than Perl?
04:05:53 <glimming> Is it fast? ;-)
04:05:54 <autrijus> glimming: hm?
04:06:07 <autrijus> fast enough for now.
04:06:13 <autrijus> GHC produces good code.
04:06:28 <glimming> how many orders of magn. slower than C is ghc?
04:06:38 <autrijus> zero.
04:06:46 <shapr> negative for some solutions.
04:06:46 <autrijus> i.e. I think it's a linear slowdown
04:06:51 <autrijus> that too.
04:07:08 <glimming> 10 times as slow?
04:07:14 <autrijus> no, 0 times as slow.
04:07:19 <glimming> huh?
04:07:20 <autrijus> i.e. proportional vs C
04:07:40 <autrijus> it compiles Haskell to C
04:07:44 <autrijus> which is handed to your C compiler
04:07:47 <glimming> If I write a RSA cracker using same algorithm in C and ghc
04:07:52 <shapr> There's also the Simon Marlow guide to fast Haskell code.
04:07:59 <glimming> which one will be fastest?
04:08:00 <autrijus> it will likely to be of same speed.
04:08:06 <autrijus> because GHC provides pointer arithmetic
04:08:06 <glimming> HONESTLY guys Haskell is slower than ocaml
04:08:08 <autrijus> and unboxed types.
04:08:09 <glimming> and ocaml is slower than C
04:08:18 <autrijus> so you can reuse the very low lever code.
04:08:20 <autrijus> level.
04:08:34 <autrijus> I do not deny that Haskell 98 itself is slow for that sort of thing
04:08:41 <autrijus> however GHC is not limited to haskell 98 :)
04:08:44 * shapr grins
04:08:49 <autrijus> you can easily write very low level code in GHC.
04:09:17 <autrijus> which is then compiled more-or-less unchanged into C code.
04:09:31 <Oeje1> autrijus: Could you give an example?
04:09:35 <glimming> yes but it seems weird to take the route via haskell then
04:09:43 <glimming> if anyway you are doing low level programming
04:09:44 <autrijus> glimming: you asked about possibility :)
04:09:49 <shapr> glimming: not necessarily, only a small part of a program really needs to be fast.
04:10:04 <shapr> and abstractions in Haskell can be changed much faster than in C
04:10:34 <glimming> lunchtime back soon
04:10:59 <shapr> I think the best solution is write as much of a program as possible in a high level language, then profile the program once it works.
04:11:21 <glimming> (ghc 6.5 does not give proper symbols for types insead very weird unique strings such as k_a1JE --- why?)
04:12:29 <nlv11757_> you guys want to program ghc-core? :P
04:12:29 <shapr> Even writing programs in C often takes that approach of writing high level portable assembly rather than fast unportable asm.
04:13:18 <autrijus> Oeje1: http://www.abridgegame.org/repos/darcs/FastPackedString.hs is a pretty good example
04:13:49 <nlv11757_> imo programming is about porting a mental model of the problem, not a machine model (as in C)
04:14:09 <shapr> there's also "Simon Marlow's How to Translate C to Haskell" on http://www.haskell.org/hawiki/QuotesPage
04:14:19 <shapr> nlv11757_: yeah, totally.
04:14:22 <autrijus> for a bad example, try http://www.haskell.org/pipermail/haskell-cafe/2004-March/005939.html
04:14:26 <shapr> metaperl_: y0, wazzup?
04:14:31 <autrijus> shapr: jinx
04:14:34 <metaperl> hi shapr
04:14:37 <shapr> autrijus: where'd you learn that?
04:14:44 <metaperl> just making my way through types in yaht
04:14:46 <shapr> I thought that was southeast USA only?
04:14:49 * glimming back from lunch (i.e. coffee cup here)
04:14:59 <autrijus> shapr: from reading -cafe archive?
04:15:06 <shapr> noo, I mean "jinx"
04:15:12 <autrijus> on IRC.
04:15:15 <shapr> huh, wild
04:15:16 <autrijus> I learned my English on IRC.
04:15:23 <ozone> autrijus: do you ever plan for pugs to produce parrot bytecode?
04:15:23 <autrijus> ircspeak is my native tongue.
04:15:29 <autrijus> ozone: why yes.
04:15:30 <shapr> Your written English is excellent.
04:15:36 <glimming> thanks.
04:15:37 <ozone> autrijus: excellent
04:15:52 <autrijus> i'd be happy to discuss it in #perl6 :)
04:15:56 <glimming> ;-)
04:16:14 * shapr grins
04:16:29 * glimming joined the society of hybris
04:16:46 <shapr> There's also Simon Marlow's tuned OpenGL program, which is as fast as the same C program.
04:16:58 * glimming invites Philippa
04:16:58 <shapr> Mostly because OpenGL is the limiting factor there.
04:17:01 <autrijus> that is also why pugs depends on ghc :)
04:17:23 <autrijus> because lots of low level operation primitives are neccessary
04:17:37 <autrijus> and other haskell implementation seems not terribly interested in providing it as default.
04:20:46 * samc__ sees no jinxing opportunity 
04:20:56 <shapr> The poll on http://sequence.complete.org/ gets more votes, but no one else is putting up content yet.
04:23:47 <samc__> first time I've seen that site
04:26:29 <nlv11757_> its in the welcome message isnt it?
04:27:11 <shapr> I think the topic doesn't change enough for people to check it on a regular basis.
04:27:30 <nlv11757_> i see it permanently in the top of my screen :)
04:28:13 <shapr> I only see the first 100 characters or so.
04:28:34 <shapr> Maybe lambdabot should change the channel notice to mirror the topic.
04:28:38 * Oeje1 learned the word jinx while playing table football (fussball).
04:28:39 <nlv11757_> that goes for me also probably
04:29:00 <rjbs> foosball!
04:29:20 <shapr>  I like that game.
04:29:23 <Oeje1> I'm getting a warning with the line "foreign  import "sin" sin_double :: Double -> Double";  Warning: foreign declaration uses deprecated non-standard syntax
04:29:27 <Itkovian> shapr: seems like a nice site.
04:29:40 <shapr> Wait till you see my next poll :-)
04:29:49 <Oeje1> rjbs: My spelling was wrong, or you just really like foosball?
04:30:12 <rjbs> Your spelling was wrong, but the "!" was just because it's fun to yell that word.  Try it.
04:30:47 <shapr> "How did you get started with Haskell?" "My school made me" "Isn't this just Miranda?" "I was on the Haskell committee" "Autrijus!" "CosmicNeal's literary works."
04:31:02 <autrijus> ha.
04:31:27 <shapr> With the sudden influx of perl hackers, I thought it would be a cute poll option for about a week...
04:31:31 <autrijus> :)
04:31:59 <autrijus> #perl6 is also a fusion of lambdafolks and camelfolks
04:32:03 <autrijus> works surprisingly well, it seems.
04:32:04 <shapr> Yeah, it's cool.
04:32:54 <Itkovian> anybody has the nomaware monad tutorial in pdf format?
04:33:29 <shapr> You can download it in zip or tgz, but that's all I'm aware of.
04:33:40 <Itkovian> yeah
04:33:45 <ozone> Itkovian: hang on a sec
04:33:49 <ozone> i made a PDF of it ages ago
04:33:52 <ozone> will see if i still have it
04:33:55 <Itkovian> anybody a html2latex parser?
04:34:01 <rjbs> No, I'm a human.
04:34:03 <Itkovian> ozone: all right!
04:34:13 <ozone> yeah, still do
04:34:19 <Oeje1> rjbs: Ok then.  In Danish it's "bordfodbold".  Anyway, when you tell your opponend that you will give her egg (score of 10-0), you will get jinxed, and she will score a goal.
04:34:24 <ozone> http://www.cse.unsw.edu.au/~andrep/nomaware-monads.ps.gz
04:34:25 <ozone> http://www.cse.unsw.edu.au/~andrep/nomaware-monads.pdf
04:34:27 <ozone> take your pick :)
04:34:31 <Itkovian> ok.
04:34:32 <Itkovian> thx!
04:34:40 <rjbs> Oeje1: "give her an egg."  nice phrase
04:34:53 <rjbs> Oeje1: There's probably American foosball slang, but I don't know it.  I only played a little, in college mostly.
04:35:05 * Itkovian is going to shove this through our shiny new colour laser printer.
04:35:34 <Itkovian> scheduled!
04:36:27 <ozone> colour laser?  sounds like a bit of overkill :)
04:36:45 <shapr> Greetz Darius
04:38:25 <Itkovian> sequence site -> the drupal founder is sitting opposite to me ;-)
04:38:28 <Itkovian> heh
04:38:48 <rjbs> the sequence favicon makes me think of Napster
04:39:11 <shapr> I don't see a favicon at all.
04:39:31 <Itkovian> by favicon, you mean the drupal logo?
04:39:36 <Darius> heya shapr
04:40:02 <rjbs> Aha, yes.  I thought it was a modified Drupal logo, and that the eyes had been replaced with a little white H.
04:40:06 <rjbs> But, in fact, the eyes just look like one.
04:40:15 * rjbs doesn't deal with Drupal often. :)
04:41:01 * Itkovian would like to get into it, sitting at the source, so to speak, but lacks time.
04:41:39 <Itkovian> since they found out Dries is the drupal dude, people at our lab have started using it extensively ...
04:42:07 * jlouis just made a miserable attempt at describing the -fomit-frame-pointer optimization
04:42:08 <Itkovian> which makes for quite a number of phone calls ...
04:42:23 <Itkovian> and what did you say about it?
04:43:08 <rjbs> *sigh*, OK, I think I just need to admit that I need a pointer on how to solve this exercise. :(
04:43:19 <jlouis> Oeje1: foreign import ccall -- you miss the ccall part
04:44:10 <shapr> Hm, I can't find a homepage for Cale
04:44:23 <rjbs> Exercise 4.4 Write a data type declaration for Triple, a type which contains three
04:44:26 <rjbs> elements, all of different types. Write functions tripleFst, tripleSnd and tripleThr
04:44:29 <rjbs> to extract respectively the first, second and third elements.
04:44:34 <rjbs> Sorry about the extra linebreaks.  Stupid Acrobat.
04:44:47 <rjbs> Wait, that's the wrong one, too.  Dangit.
04:45:11 <Itkovian> rjbs: that seems easy enough ...
04:45:11 <rjbs> Write a datatype Tuple which can hold one, two, three or four elements, depending on the constructor (that is, there should be four constructors, one for each number of arguments). Also provide functions tuple1 through tuple4 which take a tuple and return Just the value in that position, or Nothing if the number is invalid (i.e., you ask for the tuple4 on a tuple holding only two elements).
04:45:14 <Oeje1> jlouis: Thanks.  Now it doesn't give a warning: "foreign import ccall "sin" sin_double :: Double -> Double".  Why is the keyword unsafe not necessary?
04:45:20 <Darius> jlouis: What aspect of omitting a frame pointer is difficult?
04:45:41 <rjbs> Itkovian: It was.  The *correct* one, just posted, is probably ALSO very easy, but I can't determine how to do it, using what the tutorial has provided so far, or by consulting some other docs.
04:46:11 <Oeje1> rjbs: Do you know "case ... of ..."?
04:46:22 <Itkovian> rjbs: I'd do it as follows : Data Tuple = T1 a | T2 (a,b) | T3 (a,b,c) | T4 (a,b,c,d)
04:46:30 <glimming> Question: what does it mean to not be able to use partially applied type synonyms?
04:46:41 <rjbs> Oeje1: Yes
04:46:48 <Itkovian> then use as Oeje1 suggests case of with guards to determine which kind you have
04:46:59 <glimming> E.g.
04:47:01 <glimming> type (f :*: g) t o  = (f t o, g t o)
04:47:04 * shapr finds a blank homepage for Cale at uwaterloo
04:47:06 <Itkovian> brb
04:47:30 <glimming> can I every hope to use f :*: g  without t o given as well, to form a type constructor?
04:47:40 <glimming> And then pass that type constructor in constructing another type?
04:47:41 <Darius> glimming: Partially applied type synonyms would imply some of the ability of type level lambdas.
04:48:03 <Darius> glimming: Those'd be nice except for that they play havoc with type checking and inference.
04:48:25 <glimming> You mean Lambda in higher-order lambda calculus (big lambda)?
04:48:29 <glimming> Type abstractions?
04:48:31 <Darius> Yes.
04:48:50 <glimming> I never understood difference between them and universal quantifiers
04:49:31 <glimming> Can I hope to use type synonyms like :+: above?
04:50:13 <Darius> You can't partially apply type synonyms but fully applied they can be used.
04:51:17 <glimming> hello?
04:51:23 <glimming>  /\ X. X-> X   versus \forall X.X->X
04:51:31 <glimming> right... I could not send that line first...
04:52:07 <Oeje1> Anyone know af a good FFI tutorial?  What i've found so far is a bit heavy.
04:52:25 <Darius> glimming: I think the difference in most cases is simply notation or a bit of object level/"meta" level distinction.
04:52:45 * shapr cries at the pragprog mailing list posts
04:52:48 <glimming> Hmmm. But H-M inference supports \forall if they are in certain form?
04:52:57 <Darius> glimming: Or type/terms etc.
04:53:00 <glimming> what is pragprog?
04:53:12 <Darius> glimming: Prefix universal quantification.
04:53:25 <glimming> meaning precisely... ?
04:53:38 <shapr> Someone misspelled Turing as Turning, and one of the guys who claims to be clueful talked about the Turning guy and the Turning machine throughout his post.
04:53:49 <shapr> In his reply to the single original misspelling.
04:54:05 <Darius> T = a | T -> T S = forall as.T types must follow the grammor of S.
04:54:34 <Darius> As opposed to S = a | forall as. S | S -> S
04:54:53 <glimming> so forall must be first?
04:55:04 <Darius> Yes
04:55:08 <Darius> shapr: Link?
04:55:21 <glimming> prenex or prefix?
04:56:06 <glimming> in logic they have prenex normal forms.
04:56:35 <Darius> Actually, I believe I meant prenex though I don't think most would complain about prefix.
04:57:49 <glimming> Makes sense because FORALL EXISTS FORALL EXISTS EXISTS blah blah  is prenex n.f. in logic
04:58:02 <glimming> I have forgotten the consequences of pnf in logic though
04:58:38 <glimming> what is the best setup for LaTeX in Mac OS X?
04:58:44 <samc__> how hard is it to automatically transform formulae into pnf?
04:58:58 <glimming> no idea.
04:59:09 <glimming> I doubt all formulaes has a pnf
04:59:26 <samc__> all first order do
04:59:30 <glimming> there are formulas that can be written in pnf, hourne formulaes (spelling)
05:00:01 <glimming> correct [Hamilton]
05:00:02 <shapr> Darius: www.scannedinavian.org/~shae/aryeh.txt
05:00:11 <samc__> glimming, re LaTeX, I don't know, tell me when you find out ;)
05:00:22 <shapr> aryeh m. friedman
05:00:31 <glimming> VERY interesting samc_
05:00:33 <glimming> samc__
05:00:37 <glimming> wow... double underscore
05:00:49 <glimming> whois /samc__
05:00:53 <glimming> oops
05:00:54 <shapr> he's that guy
05:01:34 <glimming> So perhaps we could generalise HM inference by studying prenex n.f. reductions
05:01:58 <glimming> who is Samuel?
05:02:01 <glimming> Surname?
05:02:12 <Darius> shapr: What's the thread?
05:02:34 <shapr> They were discussing required reading for CS students.
05:02:35 <Darius> glimming: The reductions are already implicit
05:02:37 <glimming> re LaTeX in Mac OS X
05:02:47 <glimming> I use emacs
05:02:51 <glimming> plus make....
05:03:01 <glimming> Some use AlphaX editor (which is crap IMO, tcl/tk)
05:03:12 <glimming> some use BBedit which is commercial but powerful (but untyped apple script)
05:03:21 <glimming> I wish there was a Haskell-editor ...
05:03:24 <glimming> With built-in Haskell scripting.
05:03:27 <glimming> on top of ghci
05:03:31 <shapr> like Yi?
05:03:32 <glimming> call it hemacs
05:03:35 <glimming> Yi?
05:03:52 <shapr> http://www.cse.unsw.edu.au/~dons/yi.html
05:05:37 <glimming> Is Yi useful?
05:06:06 <wilx`> Hmm, I didn't manage to compile on Windows...
05:06:47 <glimming> Ideally I would like haskell to support gtk-Carbon, i.e. native Mac OS X GUi rather than X11
05:07:35 <glimming> oh this is a ncurses editor? ;-(((
05:07:54 <glimming> Also it does not compile for me: ghc-6.2: unknown package name: plugins
05:07:54 <glimming> make: *** [Boot.o] Error 1
05:07:55 <shapr> Something like real objective C bindings?
05:08:05 <shapr> greetz alexj
05:08:10 <shapr> glimming: http://hoc.sourceforge.net/
05:08:26 <glimming> not needed, there is already a port of e.g. wxWindows for native mac os x
05:08:28 <glimming> in fink
05:08:38 <glimming> I wonder if there is a gtk port too
05:08:46 <ozone> the words "wxWindows" and "native Mac OS X" should not be used in the same sentence
05:08:53 <glimming> why not?
05:09:08 <ozone> well, it works, it will just look rather sucky :)
05:09:19 <Darius> shapr: I checked cursorily, but there isn't an publically accessible archive for the pragprog list is there (at least without having to join anything).
05:09:23 <samc__> mac users hate sucky
05:09:28 <shapr> Darius: sad but true
05:09:30 <glimming> sorry, but Yi is not fantastic.
05:09:48 <glimming> Mac is very nice these days. Very nice.
05:10:09 <Darius> shapr: Actually, that was more intended as a question (forgot the ?-mark) but I guess that's answer enough.
05:10:09 <glimming> A beautiful and easy to use OS.
05:10:11 <ozone> you need hs-plugins to compile Yi, glimming
05:10:17 <samc__> re who I am, I am nobody, nobody at all...
05:10:21 <glimming> Is it worth the effort?
05:10:25 <ozone> have a look at the readme
05:10:26 <glimming> samc__ explain more
05:10:27 <marcot> Hello.
05:10:28 <glimming> hehe
05:10:31 <ozone> i dunno, that's a bit of a subjective question, no?
05:10:42 <glimming> It is a textmode editor...
05:10:59 * Darius can't stand anything but text-mode editors for coding.
05:11:03 <glimming> Although I do not know if the author of Yi is listening, I have to say it looks like a stoneage technology editor.
05:11:17 <glimming> I definately want a GUI.
05:11:21 <glimming> vi is not fun.
05:11:22 <Philippa_> FFTSAP
05:11:29 <shapr> Yes, the author of Yi is listening.
05:11:31 <glimming> I want grammar and spelling.
05:11:35 <glimming> Wonderful.
05:11:37 <shapr> glimming: thing is, the GUI is pluggable, you can add a GUI.
05:11:41 <Philippa_> again, FFTSAP
05:11:50 <Philippa_> grammar and spelling checkers should not be hard to add
05:11:50 <ozone> FFTSAP?
05:11:53 <samc__> what does FFTSAP mean?
05:11:57 <Philippa_> Feel Free To Submit A Patch
05:12:09 <glimming> Oh, I thought it was something much worse....
05:12:23 <glimming> involving at least two F words.
05:12:27 <Philippa_> oh, even the F in RTFM's been bowdlerised to "Fine"
05:12:46 <glimming> Back to the red thread.
05:13:03 <glimming> So it would be really nice with a boilerplate editor for Haskell.
05:13:06 <glimming> Shall we boot up such a project?
05:13:13 <shapr> Yi is such a project.
05:13:14 <glimming> There is a mini-boilerplate at Chalmers.
05:13:20 <glimming> Indeed.
05:13:23 <glimming> So we could use a GUI.
05:13:31 <glimming> In the Alfa proof editor
05:13:31 <shapr> You could write a gui plugin for Yi
05:13:34 <Itkovian> glimming: vi is very nice :-)
05:13:36 <Darius> glimming: My (passing) understanding of Yi is that it is more an editor making library than an editor so much.
05:13:37 <glimming> It is written in fudgets.
05:13:45 * Darius doesn't believe he could stand vi.
05:13:45 <glimming> no, not for grammar, spelling, LaTeX, ....
05:13:50 <glimming> We are in a gui age.
05:14:02 * shapr sighs
05:14:03 <Philippa_> then write a gui plugin, like you're being told
05:14:03 <ozone> Darius: no, it's a full editor
05:14:21 <Philippa_> everybody else is working on different tasks and has picked a text-mode UI for now because that does what they want and fast
05:14:25 <Itkovian> glimming: a gui causes one to switch between mouse and keyb, which slows things down imo.
05:14:34 <Philippa_> hell, even the editor I use could be rendered down to text mode rather rapidly
05:14:42 <shapr> Yeah, I agree. Any GUI that's not totally keyboard usable slows me down.
05:14:57 <samc__> I like this quote: TheVim editor is a modal editor.That means that the editor behaves differently, depending on which mode you are in.
05:15:00 <marcot> I'm having a problem in class declaration. I have declared a class InDBList i, and inside I have a function that must use the explicity type declaration, something as setList $ f (getList  :: [i])
05:15:01 <glimming> Is there really something to argue about here? Only all you extreme-hackers would ever use textmode still....
05:15:06 * Itkovian shudders at the thought everhaving to use Vidual Studio or some such
05:15:12 <marcot> But ghc is not recognizing this i as the i from the class.
05:15:15 <Darius> ozone: I know, but internally it's more structured that way and the full editor is just a "particular combination" of the library to an extent.
05:15:20 <Philippa_> glimming: consider what "extreme-hacker" means
05:15:24 <Itkovian> glimming: a gui can be nice, but it is not a requirement for a good editor
05:15:32 <ozone> Darius: right you are
05:15:34 <Philippa_> also consider that this is a text editor by and for coders
05:15:34 <marcot> And it's treating it as if it was anytype.
05:15:57 <glimming> So it is an editor framework, that's nice.
05:16:03 <glimming> But it really MUST HAVE a GUI.
05:16:09 <Darius> samc__: I don't see anything notable about that quote.
05:16:11 <glimming> With a GUI it could be SOO much more.
05:16:12 <shapr> glimming: then write one.
05:16:15 <glimming> Look at emacs.
05:16:17 <Itkovian> glimming: if you think so, feel free to add one
05:16:28 <glimming> Indeed I'd be willing to launch this as a project and participate actively.
05:16:28 <samc__> Darius, I find it funny
05:16:29 <Itkovian> glimming: emacs is a hell of an OS, if only it had a good editor :-)
05:16:37 <glimming> Hehe-.
05:16:38 <Philippa_> should only be a few days' work with wxHaskell, right?
05:16:43 <Philippa_> go do it
05:16:47 <ozone> Philippa_: should only be 15 minutes work!
05:17:02 <Darius> glimming: I have no issue with GUI in general, I just can't stand it when coding.  I just get irritated when I code with a GUI editor.
05:17:13 <glimming> Yes Haskell is still looking for its nische (spelling?), so why not try it as a typed script language for a new generation of emacs?
05:17:25 <glimming> A preofessor once suggested that he envisioned Haskell as a sort of script language.
05:17:33 <glimming> That would be beaiutiful.
05:17:38 <shapr> glimming: You should really read about hs-plugins and how it's used in Yi.
05:17:47 <Philippa_> Haskell doesn't deserve to be /restricted/ to such a niche
05:17:53 <glimming> hs is Haskell Script?
05:17:56 <Philippa_> it's too good at doing other stuff
05:18:02 <samc__> ... it must be telepathic
05:18:09 <glimming> Maybe not, but read the intro of Hudak's book,. Better for playing piano and animating?
05:18:12 <Philippa_> haskell files're .hs
05:18:17 <Darius> glimming: I doubt Yi is trying to get develop a niche for Haskell, and at any rate there's already an OCaml based "emacs" (as well as Scheme and Common Lisp)
05:18:28 <Philippa_> glimming: it's really good at web stuff, to give one example
05:18:43 <glimming> is hs Haskell Script?
05:19:02 <glimming> sure sure.
05:19:11 * ozone thinks glimming is a new breed of trollbot!
05:19:14 <glimming> I would really like to see Yi growing into a LaTeX editor.
05:19:16 <shapr> You can probably find out by yourself. Google has many answers.
05:19:19 <glimming> what is a trollbot?
05:19:36 <Philippa_> glimming: it doesn't need to be an editor for a specific language. This was rather the point of basing it on hs-plugins
05:19:37 <Darius> .hs is just an extension for haskell files, if it's an acronym in any particular way I'd imagine it's Haskell Source
05:20:00 <glimming> Ok, I'll lookup hs-plugins.
05:20:16 <Philippa_> which, incidentally, you'll need to compile yi
05:20:19 <Philippa_> that's the missing package
05:20:24 <Philippa_> but somebody forgot to RTFM again, no?
05:20:54 <glimming> dynicammly loaded hs modules
05:21:06 <glimming> please Philippa__ ......
05:21:31 <Philippa_> glimming: it's clearly mentioned on both the website and IIRC in the readme that you need hs-plugins first
05:21:34 <shapr> The polite behaviour for this sort of discussion is usually to investigate the pointers that you're given, and then come back and discuss when you're fully informed.
05:21:38 <samc__> just _ mine is much longer than hers
05:21:55 <ozone> shapr: stop, before you start sounding like esr :-)
05:22:08 <glimming> No reason to get anoyed, just imagine we were in the same room and I am sure we all would behave.
05:22:08 <shapr> ozone: nah ESR shoots trols.
05:22:14 <jlouis> BANG!
05:22:33 <ozone> shapr: and then proclaims loudly about how good he is for shooting trolls
05:22:43 <Philippa_> glimming: were we in the same room, you would likely be behaving differently yourself
05:22:58 <shapr> glimming: Thing is, I disagree with many of the things you've said, for example that Haskell hasn't found its niche, or that Yi is a stone-age editor.
05:23:00 <ozone> and then will probably start talking loudly about the positives of the right to bear arms
05:23:10 <shapr> I like bearing arms. I also like arming bears.
05:23:14 <autrijus> I thought haskell has a solid niche as a PhD generator :)
05:23:17 <shapr> hehe
05:23:23 <Itkovian> lol
05:23:25 <jlouis> haha
05:23:27 <Philippa_> :-)
05:23:31 <samc__> hoho
05:23:31 <jlouis> @karma autrijus +1
05:23:32 <lambdabot> autrijus has a karma of 0
05:23:35 <Itkovian> I knew I'd tackled the wrong prolems for my PhD
05:23:35 <jlouis> bleh
05:23:36 <samc__> (variation)
05:23:45 <Itkovian> @karma autrijus +1
05:23:46 <lambdabot> autrijus has a karma of 0
05:23:56 * shapr wonders if the bot is broken
05:24:00 <ozone> autrijus++
05:24:05 <ozone> does that work?
05:24:13 <shapr> Actually, I know the bot is broken. I'm just too lazy to fix it :-/
05:24:13 <samc__> I hope not
05:24:13 <jlouis> @karma autrijus (\x -> x + 1)
05:24:14 <lambdabot> autrijus has a karma of 0
05:24:40 <jlouis> hmm
05:24:48 <shapr> glimming: Also, I think that in the open source community, it's the responsibility of those who see flaws to fix it themselves.
05:24:49 <jlouis> @karma autrijus (lambda (x) (+ x 1))
05:24:50 <lambdabot> autrijus has a karma of 0
05:24:50 <Itkovian> hmm would a fold (+) 0 (repeat 1) be dangerous?
05:24:58 <glimming> Have you given me the name "troll" ?
05:25:08 <shapr> glimming: so if you think that Haskell needs an editor, then you should write an editor.
05:25:17 <Itkovian> shapr: give us the code. the code!
05:25:28 <glimming> Primarily, I shall write my PhD theses which is in other areas.
05:25:28 <shapr> glimming: no, but some of thing that you've said in the last few minutes could be considered as trolls.
05:25:35 <Itkovian> dang I should continue working
05:25:39 <ozone> -> back to work
05:25:40 <Philippa_> Itkovian: foldr would be, foldl just yields naturals AFAIK
05:25:51 <jlouis> glimming: Category theory, by any chance?
05:26:02 <glimming> I think shapr should marry Philippa
05:26:08 <shapr> ?
05:26:12 <shapr> glimming: what are you talking about?
05:26:26 <Itkovian> eh?
05:27:01 <rjbs> Is this as simple as this gets: http://nopaste.snit.ch:8001/1929
05:27:27 <Darius> @karma+ autrijus
05:27:28 <lambdabot> autrijus's karma has been incremented.
05:27:28 <Philippa_> rjbs: pretty much, yeah
05:27:32 <autrijus> aha.
05:27:37 <autrijus> rjbs: you can make it simpler with TH.
05:27:38 <Itkovian> @karma+ autrijus
05:27:39 <lambdabot> autrijus's karma has been incremented.
05:27:45 <autrijus> but without TH then, yeah, that's pretty much it.
05:27:48 <rjbs> Philippa_: Huh.  So to implement tup1 - tup4 I need 24 lines?
05:27:50 <Itkovian> @karma autrijus
05:27:51 <lambdabot> autrijus has a karma of 2
05:27:52 <rjbs> autrijus: TH being Template Haskell?
05:27:54 <Philippa_> autrijus: you don't quite get the same thing with TH, but yeah
05:27:55 <Itkovian> wow
05:27:56 <autrijus> you can also use type classes.
05:28:06 <Itkovian> can one buy pellets for karma?
05:28:22 <autrijus> instance Tup (a,b,c) where tup1 (a,_,_) = a
05:28:26 <glimming> jlouis, yes category theory for computer science.
05:28:27 <Philippa_> rjbs: yep. This is one of the things Haskell types less well
05:28:32 <shapr> At the moment, lambdabot karma isn't saved.
05:28:47 <autrijus> Philippa_: yeah. with TH you need to tell it how many items are in the product.
05:28:50 <rjbs> Ok.  Well, I kept thinking that I had this all wrong, because I thought it must want something simpler.  Feeling better now.
05:28:56 <autrijus> but it works for arbitarily large tuples.
05:28:59 <Philippa_> autrijus: and thus you keep generating new code
05:29:01 <Philippa_> but yeah
05:29:19 <autrijus> timtowtdi, etc.
05:29:27 <jlouis> glimming: what are you going to consider? Cat theory is enormous ;)
05:29:30 <autrijus> rjbs: I usually use type classes for that.
05:29:41 <glimming> jlouis, I am doing categorical recursion theory
05:29:50 <rjbs> autrijus: is that what your "instance Tup..." line was demonstrating?
05:30:00 <autrijus> rjbs: yea. let me write you a small example
05:30:40 <glimming> So was there an interrested in making a GUI for Yi
05:30:50 <glimming> I'd actively participate.
05:31:01 <Darius> "At the moment" for the past three years or so.
05:31:12 <Philippa_> glimming: you appear to have the interest, why not go get it started?
05:31:19 <jlouis> glimming: ah, I have a faint idea of what that is. My guess would be to define categories by recursion and state theorems about them. Fixpoints maybe
05:31:21 <Itkovian> autrijus: can you paste it on the HaskellIrcPastePage?
05:31:34 <shapr> Darius: yes, true :-)
05:31:43 <glimming> jlouis, no, not like that
05:31:58 <glimming> it is about studying notions of recursions (in programming languages) categorically
05:32:00 * Itkovian is back to work. a bit
05:32:23 <glimming> Anyone have some boilerplate code for wxHaskell?
05:32:27 <glimming> That one can look at?
05:32:40 <Philippa_> the wxHaskell distro comes with demos
05:33:06 <glimming> ok, but wxHaskell is not provided in fptools
05:33:16 <glimming> nor hs-plugins?
05:33:21 <Philippa_> bingo
05:33:25 <Philippa_> Google is your friend
05:33:39 <shapr> Really, if you ask google, it uses up less of our time.
05:33:53 <glimming> Is wxHaskell any better than than Fudgets?
05:34:01 <shapr> Think about it, you'll have more code to play with, if you answer your own questions as much as possible.
05:34:05 <samc__> our precious precious time
05:34:24 <Darius> Well, I believe Fudgets is about 10 years dead or so...
05:34:28 <Philippa_> glimming: define "better" - AIUI they operate on somewhat different levels of abstraction, wxHaskell's based on a more complete widget set though
05:34:34 <glimming> Oh, I am in this channel because I like to quiz
05:34:42 <samc__> and fewer platforms
05:34:56 <Philippa_> google first, then ask questions. People will rapidly lose patience otherwise
05:35:08 <glimming> thanks for the advise.
05:35:09 <Philippa_> if it helps, pretend that you're quizzing google
05:35:13 <Darius> glimming: Quiz with questions Google can't answer better and more quickly.
05:35:17 <jlouis> glimming: ah, so it builds on denotational semantics then?
05:35:21 <shapr> Right, I get tired of spoonfeeding.
05:35:23 <glimming> That one is probably a good one actually.
05:36:07 <samc__> shapr, yet you are compelled somehow to do it?
05:36:16 <shapr> what, spoonfeed?
05:36:22 <glimming> There is no spoon, shapr.
05:36:37 <shapr> Sometimes I do it, in the hopes that the student will quickly grow past it.
05:37:11 <shapr> I know I got spoonfed in my early time on #haskell, it's only fair that I teach others :-)
05:37:26 * rjbs certainly appreciaties spoonfuls of wisdom.
05:37:43 <shapr> But there's a difference between helping someone gain a foothold and someone who isn't willing to try to find answers themselves.
05:38:15 * Darius spent a decent chunk googling, reading, and hacking before opening his yap on #haskell.
05:38:16 <rjbs> indeed. life in #vim is teaching people how to utfm
05:38:38 <samc__> I wasn't disagreeing
05:38:47 <shapr> samc__: yeah, I know, just explaining :-)
05:39:13 <Darius> An old place I used to hang out got pretty bad about good questions that I eventually left it in frustration (though that was also near the beginning of me moving to Haskell)
05:39:17 <autrijus> I hope 5-line paste is okay here.
05:39:30 <Darius> (But I was leaving it anyways, Haskell just gave me a nice place to go)
05:39:36 <autrijus> rjbs: here is what I'd do:
05:39:40 <autrijus> {-# OPTIONS -fglasgow-exts #-}
05:39:40 <autrijus> class Tup a x | x -> a where tup1 :: x -> a
05:39:40 <autrijus> instance Tup a (a, b) where tup1 (x, _) = x
05:39:40 <autrijus> instance Tup a (a, b, c) where tup1 (x, _, _) = x
05:39:40 <autrijus> instance Tup a (a, b, c, d) where tup1 (x, _, _, _) = x
05:39:48 <Darius> autrijus: There is the HaskellIrcPastePage on the wiki.
05:39:58 <Forest> many channels have a topic like rtfm, look into the api at... or http://www.bugtraq.ru/forum/faq/general/smart-questions.html
05:40:04 <autrijus> Darius: ah. danke
05:40:06 <rjbs> @wiki HaskellIrcPastePage
05:40:07 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
05:40:38 <autrijus> rjbs: so that lets you directly use "tup1 (1,2,3)"
05:40:40 <autrijus> to get 1.
05:40:42 <shapr> Forest: Yeah, true. Maybe we need that sort of link here too.
05:41:01 <Darius> Forest: The problem is the people who'd actually look at the obvious are the people who'd look at the obvious anyways.
05:41:08 * shapr grins
05:41:14 <rjbs> autrijus: absorbing...
05:41:17 <Philippa_> yes, but you can at least just say "read the topic, act"
05:41:37 <autrijus> rjbs: the "| x -> a" means "You can always infer a from x"
05:41:44 <Darius> Philippa_: STFW is shorter and a tautology.
05:41:54 <autrijus> rjbs: I think you can figure the rest out:)
05:42:20 * Darius likes the reading of "| x -> a" as "x decides a"
05:42:26 <autrijus> yup.
05:42:26 <Philippa_> yeah. Then again, you may've noticed our dear friend takes offence to acronyms with F in them
05:42:31 <Itkovian> rjbs: that should become Just x iirc
05:42:35 <Philippa_> he actually left chan because I told him to RTFM
05:42:44 <Forest> the other hand is that haskell is not so popular and there is not a plenty of resources and manuals on it
05:43:04 <Forest> compared to java c++ and so on
05:43:05 <autrijus> Forest: oh? I've found the online resource is abundant :)
05:43:12 <Philippa_> true, but when somebody eg asks for a full description of type classes without having RTFMed...
05:43:15 <Darius> Forest: Yes, but that just means Google focuses on the ones that are their and they are typically better
05:43:19 <shapr> Well, many geeks lack social skills. I think it's ok to show up somewhere, act as you think is correct, and then be willing to take cultural suggestions.
05:43:41 <Darius> As opposed to a large pile you have to dig through for decent C++ etc. tutorials and references.
05:43:55 * Itkovian likes the 'cultural suggestions' phrasing
05:44:14 <shapr> Itkovian: do I sound enough like the Punisher when I say that? =)
05:44:22 <Darius> Invert it.  Show up somewhere, get a feel for the culture, then try to act appropriately.
05:44:24 <rjbs> autrijus: Thanks, I *think* I understand.  I've filed that paste for future looking-at.
05:44:37 <Forest> Darius: MSDN for cpp, javadoc for java are pretty enough
05:44:54 <autrijus> rjbs: cool. for further reading, read GHC user guide
05:44:58 <autrijus> on "functional dependencies"
05:45:21 <rjbs> will do. /me wonders if ghc.pkg installed that
05:45:59 <autrijus> prolly does. under docs/
05:46:00 <Darius> Forest: And searching for Haskell will certainly point you at haskell.org
05:46:15 <Forest> it is the first link in google )
05:47:47 <Forest> other reason for 'obvious' questions i guess that most programmers are  used t0 imperative languages (everyone i know and myself as well)
05:48:07 <samc__> is "CosmicNeal" some joke I don't get?
05:48:17 <autrijus> samc__: CowboyNeal.
05:48:27 <shapr> samc__: CosmicRay started the site, and CowboyNeal is the oft-used alternative on slashdot.org
05:49:40 <shapr> samc__: Seemed funny at the time. Not so funny after looking at it for a few days.
05:50:08 <samc__> I see :)
05:50:16 <shapr> Some people say humor grows on you. My jokes tend to die and fall off.
05:50:30 <Itkovian> shapr: as long as other thing don't do that, eh.
05:50:41 * shapr laughs
05:50:43 <Itkovian> hi boegel
05:50:47 <Itkovian> gotta talk to u
05:50:51 <shapr> hoi boegel, feeling better?
05:51:01 <boegel> shapr: yes, I am, thanks
05:51:13 <boegel> I hope I can finally finish my TMR article now :s
05:51:16 <shapr> yay!
05:53:42 <autrijus> I'm working on it as well :)
05:53:56 <shapr> I'm working on mine too
05:55:24 <Darius> Forest: I'm defining "obvious" as can easily be answered by Google.  The subject matter is irrelevant.
05:57:29 <Philippa_> "All this stuff about monads is confusing, can somebody explain?" is different
05:58:37 <alexj> yes, i was going through the nomaware tutorial last night.  it is fantastic but I still don't feel like I am solid.
05:59:00 <alexj> shapr said that having read it I could cut my code in half.  still haven't figured out how to reduce a line...
05:59:00 <Darius> I wouldn't say it is.  One should be able to come up with more specific "ways" it's confusing.  Otherwise Google can explain.
05:59:44 <Philippa_> Darius: most people who ask that can come up with the ways when asked though
06:00:01 <Darius> Then they should start with them.
06:00:02 <samc__> monads are hard, let's go shopping
06:00:04 <Philippa_> alexj: it depends a lot on what you're doing
06:00:12 * shapr quotes samc__
06:00:38 <Darius> Philippa_: And unfortunately many cannot or at least not in ways that -aren't- covered by the usual tutorials.
06:00:58 <Philippa_> that's because they're getting the question forms from the usual tutorials
06:01:25 <Darius> I'm irritated when I see questions like "How do I get a String from a IO String?"  where there almost the exact examples in "The Gentle Introduction"
06:01:37 <Philippa_> yeah, I'll give you that one
06:01:50 <Philippa_> though the Gentle Introduction is... not gentle - many folks will avoid it
06:02:36 <Philippa_> and the IO monad does seem weird when almost every other monad has a runFoo func and the rest already have plain interpretations as Haskell values
06:02:38 <Darius> It was the first thing I read, but I will admit it's pretty quick and more aimed at the somewhat familiar with functional programming crowd.
06:02:50 <Darius> I did find it very helpful for me though.
06:02:59 <alexj> me too.
06:03:00 <Philippa_> yeah. I learnt from it, an FP newbie wouldn't be able to (my dad got nowhere with it, for example)
06:03:12 <shapr> Yeah, I bounced like hitting a brick wall.
06:03:12 <alexj> I actually started with the "why fp matters" article.
06:03:19 <alexj> and it got me motivated.
06:03:29 * jadrian began with Richard Birds book
06:03:29 <shapr> Then I whined on the mailing list and Hal started YAHT.
06:03:31 <alexj> (I was an FP newbie)
06:03:35 * Philippa_ had a module on FP using Haskell in her first year at uni
06:03:41 <alexj> (still am)
06:03:43 <jadrian> and even though I liked the book I thought the monads chapter was confusing
06:03:49 <Philippa_> and both HOFs and algebraic datatypes grabbed me as really damn useful
06:04:02 <Darius> I was specifically looking for a pure functional language which led to Haskell and the Gentle Introduction was the most noticable tutorial on the haskell.org site at the time.
06:04:35 <Darius> My only previous experience with FP was a reasonable grasp of Scheme and some Prolog.
06:04:37 <jadrian> I think one of the problems is that many people start looking at monads when they want state or IO
06:04:51 <jadrian> if you begin witha simple Monad like Maybe it's really easy
06:05:03 <Philippa_> Darius: a reasonable grasp of scheme is a hell of a lot more than some folks start with
06:05:50 <Darius> Philippa_: I agree.
06:06:12 <alexj> Si\ if you are around, you might enjoy "SOAP is Comatose, But Not Officially Dead!" http://www.manageability.org/blog/stuff/soap-is-dead/view
06:07:23 <Itkovian> hmm ... I use Maybe, but I've no idea if I use it the right way, if there is such a thing
06:07:53 <Darius> Itkovian: It's pretty hard to use Maybe in the wrong way.
06:07:58 <shapr> I wish I had a chance to play with all of the languages on Wouter Van Oortmerssen's site.
06:08:11 <Itkovian> is that the 99 bottles thingie?
06:08:12 <shapr> Not just the ones available for download.
06:08:23 <samc__> yes, me too
06:08:32 <samc__> maybe he made them up :p
06:08:38 <shapr> These are Wouter's lanugages - http://wouter.fov120.com/proglang/index.html
06:09:03 <shapr> Some, like this - http://wouter.fov120.com/proglang/pix/sauer.gif I *really* want to try.
06:10:28 <samc__> probably aardwhatever is better anyway and sound similar
06:11:05 <samc__> (which you can try)
06:11:17 <shapr> On the other hand, I swapped some emails with him about spoken programming languages, and he thinks it won't fly. I'm almost positive it will. (and would fly a lot faster if I got off of IRC)
06:12:05 <Philippa_> the poor sod worked for CryTek? I heard some less than pleasant things about the place from folks who used to work there
06:12:25 <shapr> Darius: speaking of which, my friend told me he doesn't think Series 60 JVM has access to the mic.
06:12:47 <Philippa_> CryScript looks suspiciously like the kind of thing I keep wanting to advocate, mind
06:14:05 <Darius> Well, I'm dealing more with a Series 40, but...
06:16:46 <Darius> Also there may be Nokia specific libraries.  I'd need to look at it more.
06:27:37 <shapr> hej ulph, talar du Haskell?
06:27:55 <ulph> shapr: ja fast jag har ju glömt hälften
06:28:05 <shapr> tyvärr
06:28:19 * Itkovian is going to bind his neat nomaware tutorial
06:28:33 <shapr> Itkovian: you really got it in color?
06:28:34 <Itkovian> thx ozone
06:28:39 <Itkovian> oh yes!
06:28:46 <shapr> nifty!
06:29:01 <Lemmih> pthreads and GHCi is a big nono, right?
06:29:08 <Itkovian> damn right it is!
06:29:24 <Itkovian> erm, Lemmih, that wasn't to you
06:30:41 <Darius> Lemmih: You could try it and see what happens.
06:31:20 <Lemmih> Darius: I did and it went bad.
06:32:51 <Lemmih> But most bad things are my own doing.
06:33:17 <shapr> Temptation is like that.
06:35:17 <ulph> shapr: documentation of Control.Monad.Reader is kind of sparse in GHC
06:35:30 <Darius> Lemmih: Well, as you probably know, there are remarks on the mailinglists and such about GHC's interaction with various threads so searching there is probably the best bet.
06:35:42 <Darius> @wiki MonadReader
06:35:43 <lambdabot> http://www.haskell.org/hawiki/MonadReader
06:35:54 <Darius> or maybe ReaderMonad
06:36:16 <shapr> Silly question, how do I update yum once I've installed a new source? (specifically haskell-fedora)
06:37:11 <juhp> shapr: when you run yum it should see it
06:37:35 <shapr> strange, it only sees darcs 1.0.1
06:38:14 <juhp> shapr: are you running fc2?
06:38:22 <shapr> er, yes. I'm pretty sure.
06:38:28 <CosmicRay> shapr: you may find this amusing: http://changelog.complete.org/node/242
06:38:37 <shapr> at least /etc/issue says fedora core 2
06:38:38 <xerox> 'lo
06:39:33 <juhp> shapr: hang on, and I'll add it for fc2 :)
06:40:09 <shapr> spiffy :-)
06:40:44 <shapr> CosmicRay: truly, much of that is familiar.
06:41:18 <u1sf> shapr: How's TMR coming on?
06:42:13 <CosmicRay> shapr: <grin>
06:42:34 <shapr> u1sf: I have a decent chunk of content, now I just need to proof everything again, stuff everything into a somewhat regular format, and be ready to do the same for the last few submissions. It might even go out on the 1st.
06:42:57 <shapr> Next month, new feature, wiki-based editing and publishing.
06:43:58 <shapr> CosmicRay: my graduating class had 41, but two people dropped out and one person got pregnant, just two months before the end.
06:44:04 <CosmicRay> heh
06:44:09 <CosmicRay> shapr: mine had 19
06:44:25 <CosmicRay> that was considered small, since usually classes had about 25.
06:45:14 <SamB> Anyone else looked at the Haskell XML Toolbox?
06:45:20 <shapr> me me!
06:45:30 <SamB> What do you think about it?
06:45:37 <shapr> juhp: should yum search ghc give results?
06:46:22 <shapr> SamB: HaXml is cool and error-checky, it gives ADT types for each tag. HXT is easy, it just has a generic tree type and does validation separately. Depends on what you're doing.
06:46:43 <juhp> shapr: yes
06:47:00 <u1sf> plus HXT has XPath, a big plus
06:47:03 <SamB> How are you supposed to prune trees in HXT?
06:47:09 <juhp> % yum search ghc|wc -l
06:47:09 <juhp> 423
06:47:18 <shapr> huh, I get nothing.
06:47:40 <juhp> hmm, admittedly I'm using the fc3 repo
06:47:40 <SamB> what is yum, anyway?
06:47:41 <shapr> Just no packages found.
06:48:05 <shapr> It's the redhat package manager (one of them)
06:48:05 <juhp> oh
06:48:31 <juhp> yeah, something a bit like apt
06:49:09 <juhp> actually it originates from the yellow dog linux distro iirc, but anyway
06:49:31 <shapr> I have the feeling that I should do something like apt-get update, but maybe that's the header fetching thing that happens with each yum execution?
06:49:35 <SamB> what does it stand for? Yellow Update Manager?
06:50:23 <juhp> SamB: the manpage says Yellowdog Updater Modified, but basically yes
06:50:40 <SamB> I see.
06:51:22 <shapr> juhp: So, do I need to do something to get ghc in fc2?
06:52:23 <juhp> shapr: taking a look now - perhaps yum doesn't like symlinks to packages...
06:53:25 <juhp> shapr: "yum install ghc" should do the right thing
06:53:49 <juhp> shapr: darcs-1.0.2 should be there now
06:54:21 <juhp> shapr: originally I just had the one repo, common to both fc2 and fc3 (well and fc1 if you like)
06:54:29 <shapr> yes, darcs-1.0.2 now, but not ghc
06:54:34 <juhp> but darcs libcurl dep broke that...
06:55:00 <juhp> must be the symlink then...
06:55:14 <juhp> darcs is not a symlink ;)
06:55:37 <juhp> (different versions of libcurl in fc2 and fc3)
06:55:43 <juhp> hmmm
06:57:36 <tromp> @index odd
06:57:36 <lambdabot> GHC.Real,Prelude
07:01:35 <shapr> juhp: still no ghc
07:02:22 <juhp> hmm, think I need to use hardlinks
07:03:27 <juhp> I realise I only tested the fc2 repo with up2date
07:05:51 <shapr> should I have a ghc now?
07:06:15 <juhp> shapr: give me some mins please :)
07:06:17 <shapr> right, sorry
07:06:34 <shapr> I'll take this opportunity to unicycle!
07:06:49 <juhp> shapr: if you're desperate - a workaround for now is to use the fc3 repo instead
07:07:07 <juhp> it will break of course why a newer darcs comes out
07:07:07 <shapr> I'd rather have something that the everyday redhat admin can understand.
07:07:15 <juhp> ok :)
07:07:24 <shapr> thanks for the suggestion though :-)
07:07:36 <juhp> s/why/when/
07:08:47 <b0gg1e> hi.
07:22:17 <juhp> shapr: should be better now :)
07:22:41 <juhp> shapr: thanks a lot for letting me know about the problem
07:26:02 <alexj> shapr, at your prompting I re-reviewed HaskellDB yesterday
07:26:22 <alexj> as far as I can tell, he is solving a very different problem.
07:26:41 <xerox> What's the best way to get ghc-6.4 on debian?
07:26:54 <TheHunter> xerox, linux-i386?
07:27:05 <xerox> TheHunter, yes.
07:27:21 <alexj> haskelldb seems to be about a nice haskell interface to an external RDBMS
07:27:28 <alexj> stings are used in various places
07:27:31 <TheHunter> http://www.haskell.org/ghc/dist/stable/dist/
07:27:46 <xerox> Thank you.
07:28:14 <alexj> HAppS.DBMS gives you a Table instance parametrized over your type.
07:28:14 <TheHunter> and then ./configure; make in-place
07:28:25 <alexj> all the indices are also haskell types.
07:28:41 <alexj> does tha make sense?
07:28:46 <alexj> does that make sense
07:28:47 <alexj> ?
07:35:52 <musasabi> evening.
07:36:22 <musasabi> alexj: Does HAppS support transactions?
07:39:23 <alexj> transactions are orthogonal and handled in the ACID module
07:40:03 <alexj> I am using HAppS.ACID and HAppS.DBMS together so in that sense yest it supports transactions
07:41:13 <musasabi> alexj: so e.g. updating multiple tables is an atomic operation?
07:41:58 <alexj> all operations are outside the IO-monad
07:42:16 <alexj> so it is a question of whether you take the resulting set of tables and use them for something else.
07:42:38 <alexj> (what is the word for not needing IO?)
07:43:04 <alexj> more simply: yes, you can update multiple tables atomically.
07:43:14 <musasabi> non-monadic / pure ?
07:43:14 <Philippa_> alexj: just not needing IO, or not needing side-effects?
07:43:18 <alexj> pure.
07:43:20 <bringert> alexj: in what sens does haskelldb use strings?
07:44:00 <alexj> that was my impression from the tutorial, hold on and I'll find an example (perhaps I was not interpreting it correctly)
07:44:09 <alexj> yes HAppS is pure.
07:44:10 <musasabi> alexj: seems nice, I have to compare that to my own code doing similar things. How is rollback done?
07:44:19 <bringert> you are absolutely right that singleton types are used for field labels, so creating and using tables without recompilation (or dynamic loading) doesn't work
07:44:57 <alexj> since the updates are pure, you simply don't use the new state...
07:45:16 <alexj> the assumption is that there is a total order on all transactions.  they are NOT interleaved.
07:45:25 <musasabi> alexj: ok.
07:45:47 <alexj> bringert, I'm didn't understand your last point.  could you clarify?
07:47:00 <PerlJam> How does one get the integer portion of a floating point number in haskell?
07:48:14 <alexj> bringert, as for strings, in tutorial you have stuff like tRow1 = makeCInfo "tRow1" (StringT,False)
07:48:38 <Lemmih> PerlJam: That depends on how you want to truncate it.
07:49:14 <PerlJam> "how I want to truncate it"?  How many ways are there to chop off the non-integer portion of a floating point number?
07:49:32 <alexj> and I assume you can't enforce type correctness with an external database and having its datatypes differ from haskell types.
07:49:39 <Lemmih> Sorry. I misread your question.
07:50:15 <Lemmih> PerlJam: 'truncate' is what you want.
07:50:29 <PerlJam> silly me, I was looking for "int" and "trunc"
07:51:21 <PerlJam> thanks Lemmih
07:51:40 <Lemmih> alexj: HaskellDB uses that information to generate new datatypes.
07:55:39 <alexj> so basically what happens is that with HaskellDB you have some (manual?) process to generate a representation of the DBMS schema in Haskell and then you can enforce type correctness?
07:55:51 <alexj> but all operations are in the IO monad.
07:58:07 <Lemmih> HaskellDB creates SQL queries. Nothing more, nothing less.
08:01:19 <alexj> so the brief summary is that HaskellDB creates SQL queries to operate on SQL DBs.  HAppS.DBMS just operates directly on Haskell Sets.  If there were a pure SQL DBMS then HaskellDB could also operate pure.
08:01:36 <alexj> would that be a good summary?
08:04:09 <Lemmih> I believe so. But I'm way too tired to be reliable (:
08:04:17 * Lemmih heads to bed.
08:04:51 <alexj> gnight.  (lemmih where are you located?)
08:07:42 <Lemmih> Denmark (GMT+1). It's only 5pm here but I woke up _really_ early.
08:08:58 <alexj> ah, so when its not sweden its still scandinavia.  I see!  :- )
08:09:27 <alexj> sleep well.
08:18:45 <shapr> juhp: yay!
08:19:06 <juhp> better now?
08:20:08 <shapr> yes, thanks!
08:21:22 <bringert> alexj: HaskellDB can create the schema description by asking the RDBMS
08:21:30 <bringert> but you can also create the description by hand
08:22:01 <bringert> HaskellDb can also create tables from schema descriptions
08:22:37 <jlouis> Lemmih is apparently very close to me
08:22:41 <bringert> but yeah, HaskellDB querie are run in the IO monad, but a new backend could be pure
08:23:14 <bringert> and doesn't have to use SQL, just something which the haskell query combinations can be converted to
08:23:54 <bringert> well, not the combinators, rather the internal query language, which is kind of relational algebra
08:25:32 <basti__> hi
08:25:34 <shapr> That's the part I get excited about. It's sort of the opposite of putting objects in an RDBMS.
08:25:44 <shapr> grußgott basti__
08:25:54 <basti__> ü!
08:25:57 <basti__> ;)
08:25:58 <shapr> whoops
08:26:47 <shapr> Man I love unicycling, it's so much fun.
08:27:13 <xerox> I like skateing :D
08:27:18 <alexj> shapr: me too. its been years, however.
08:27:39 * Oeje1 is very close to Lemmih.
08:28:15 <shapr> I just returned from unicycling in the snow. I've discovered that my legs are strong enough to do a forward flip onto a pile of snow, and I'm trying to figure out if I can forward flip off a unicycle into snow.
08:28:16 <tromp> hi folks
08:28:24 <shapr> hoi tromp
08:28:37 <alexj> sharp: wow
08:28:53 <shapr> For some reason me practicing that worries nearby pedestrians.
08:30:21 <shapr> Of course the ultimate goal would be a forward off of a unicycle onto my feet.
08:30:38 <Maddas> Hm. Who was that guy who wrote a fast block input/output thingy in Haskell?
08:30:42 <Maddas> I seem to have bad luck googling
08:30:49 <shapr> Peter Simons, article in TMR1 if all goes well.
08:30:50 <Maddas> Aha, got it :-)
08:30:59 <Maddas> Thanks
08:31:08 <alexj> bringert: since there is no current pure haskell backend, it currently only functions in IO w/r/t an external system (with all the config challenges that entails) and if there were a backend, the question is whether the interface is optimal for using it.
08:31:56 <alexj> to me the two jobs feel very very different.
08:32:26 <alexj> haskell has Data.Set.  it would be nice if it had Data.Table
08:32:56 <alexj> where Table is just an indexed set (that is what HAppS implements)
08:34:05 <alexj> to be inserted into a table the types have to be instances of class Record item indexVal | item ->indexVal  where	index::[item -> indexVal item ]
08:34:37 * Lemmih desperately tries to use GHCi with some compiled C++ code before the last parts of his brain goes to sleep mode.
08:38:22 <jlouis> Lemmih: Seng! nu! ;)
08:47:12 <Oeje1> lisppaste2: url?
08:47:13 <lisppaste2> To use the lisppaste bot, visit http://paste.lisp.org/new/haskell and enter your paste.
08:49:46 <musasabi> when cleaning up my hd I spotted some old code for doing address family independent network operations (ipv6) (and performance hacks) - is there any interest for that to be published as a library?
08:49:54 <shapr> yes!
08:50:38 <musasabi> Have to document and cabalize that then.
08:52:41 <lisppaste2> Oejet pasted "Wrestling the FFI" at http://paste.lisp.org/display/6065
08:54:34 <Oeje1> I'm completely FFI nooby and quite lost. So I thought, I might as well jump in.  Anyone care to comment?
08:54:44 <musasabi> Oeje1: no trying to pass complicated data structures.
08:55:07 <Oeje1> musasabi: I need some marshalling, right?
08:55:13 <musasabi> Oeje1: right.
08:55:30 <musasabi> Oeje1: you can either use automated tools for that or do it by hand.
08:56:01 <CosmicRay> @seen SyntaxNinja
08:56:02 <lambdabot> I saw SyntaxNinja leaving #haskell 14 hours 55 minutes 43 seconds ago.
08:56:25 <Oeje1> musasabi: I've read that H/Direct and GreenCard can do such.
08:56:32 <alexj> @help
08:56:34 <lambdabot> Sorry, I don't know the command "help", try "lambdabot: @listcommands"
08:56:48 <alexj> lambdabot: @listcommands
08:56:48 <lambdabot> I react to the following commands: ["all-dicts","arr","cmafihe","define
08:56:48 <lambdabot> ,"definitions","del-definition","devils","dict","dict-help","dummy","dump
08:56:48 <lambdabot> ,"dynamic-load","dynamic-reload","dynamic-unload","easton","echo","elements
08:56:48 <lambdabot> ,"eurohaskell","eval","foldoc","fortune","gazetteer","get-definition","goodbye
08:56:48 <lambdabot> ,"hello","hitchcock","index","info","jargon","join","karma","karma+","karma
08:56:49 <lambdabot> ","learn","leave","listchans","listcommands","listmodules","lojban","moo
08:56:51 <lambdabot> ,"msg","part","prelude","quit","reconnect","resume","seen","set-fuel","state
08:56:53 <lambdabot> ,"topic-cons","topic-init","topic-snoc","topic-tail","topic-tell","type
08:56:55 <lambdabot> ,"vera","web1913","wiki","wn","world02","yow"]
08:57:25 <CosmicRay> autrijus: what's the url for your perl6 compiler again?
08:57:43 <autrijus> CosmicRay: pugscode.org
08:57:48 <musasabi> Oeje1: http://www.reid-consulting-uk.ltd.uk/docs/ffi.html contains a comparison of them.
08:58:06 <CosmicRay> autrijus: thanks.  I'm writing something up about it for Sequence
08:58:27 <CosmicRay> autrijus: what do you compile it to, btw?  parrot?
08:58:39 <autrijus> currently, to haskell AST.
08:58:41 <autrijus> and evaluate it.
08:58:45 <CosmicRay> oh sweet
08:58:51 <autrijus> err
08:58:56 <autrijus> to a AST structure in haskell.
08:58:57 <autrijus> not Core.
08:59:06 <autrijus> http://wagner.elixus.org/~autrijus/pa1draft1.html explains some of it.
08:59:11 <autrijus> (my upcoming MonadReader article)
08:59:21 <shapr> yay!
08:59:26 <autrijus> that's the poltical part.
08:59:30 <autrijus> the technical part is a mess.
08:59:37 <autrijus> I'm merging them now.
09:00:09 <autrijus> bbiab.
09:00:12 <musasabi> autrijus: have you corrupted the perl people to make perl6 a superset of haskell ;)
09:05:31 <CosmicRay> autrijus: quite the impressive import list at http://search.cpan.org/src/AUTRIJUS/Perl6-Pugs-6.0.8/src/Internals.hs :-)
09:06:33 <CosmicRay> hmm, I wonder if TH would make an easy way to do perl-to-haskell...
09:10:13 <jlouis> More qualified imports!
09:18:39 <autrijus> musasabi: I have :)
09:20:12 <autrijus> qualified import hurts rapid prototyping :)
09:20:15 <autrijus> at least for me.
09:25:58 <jlouis> repeat "More qualified imports!"
09:26:42 * autrijus decides to invoke the "patches welcome" line :)
09:27:16 <Oeje1> It seems that H/Direct is more general than GreenCard.  What would be the easiest one to learn, you think?
09:28:30 <shapr> GreenCard seems more used
09:28:44 <shapr> but maybe that's just that I've seen more use of GreenCard.
09:29:27 <Oeje1> H/Direct is a stand alone utility it seems, while GreenCard is included in GHC 6.4.
09:35:32 <metaperl_> my datatype definition is failing:
09:35:33 <metaperl_> data Quad a a b b = Quad a a b b
09:35:33 <metaperl_>  
09:35:33 <metaperl_> first_two (Quad m n o p) = [m,n]
09:35:33 <metaperl_> last_two  (Quad m n o p) = [o,p]
09:35:38 <metaperl_> please help me
09:36:02 <metaperl_> this is an exercise from p.59 of yaht
09:36:20 <Oeje1> metaperl_: Try data Quad a b = Quad a a b b
09:37:54 <xerox> Can you suggest me a nice way to get [2,3,4,5,6] from [2,2,3,3,3,4,4,4,5,6] ? I mean, which different elements contains.
09:38:13 <TheHunter> @type Data.List.nub
09:38:19 <lambdabot> Data.List.nub :: forall a. (Eq a) => [a] -> [a]
09:38:30 <metaperl_> Oeje1, thanks
09:38:45 <Oeje1> metaperl_: Do you understand why?
09:38:52 <xerox> TheHunter, thanks! What does `nub' means by the way?
09:38:53 <metaperl_> Oeje1 sort of
09:39:10 <metaperl_> I know the RHS is a constructor for things of type Quad
09:39:17 <metaperl_> where Quad is a user-constructed type
09:39:21 <TheHunter> @type Data.Set.setToList . Data.Set.mkSet
09:39:23 <lambdabot> Data.Set.setToList . Data.Set.mkSet :: forall a.
09:39:23 <lambdabot> 				       (Ord a) =>
09:39:23 <lambdabot> 				       [a] -> [a]
09:39:53 <metaperl_> but I dont know why the RHS has only a b
09:39:56 <TheHunter> xerox, no idea what `nub' means.
09:40:36 <Oeje1> Perhaps "No dUBlicates".
09:40:55 <xerox> :)
09:46:31 <tromp> http://www.answers.com/topic/nub
09:46:36 <tromp> it means "essence"
09:52:19 <xerox> Right! Now I remember someone said it in the channel while ago..
09:53:53 <shapr> CosmicRay: you've got spam.
09:54:31 <jlouis> nub is a nice little thing
09:56:15 <xerox> jlouis, definitely.
10:01:15 <jlouis> Actually, you could write a masters thesis on specialized cases of groupBy ;)
10:01:29 <jlouis> I read one such yesterday. Was mighty interesting actually
10:02:55 <xerox> Any url?
10:03:25 <xerox> And yes, groupBy fascinates me, but I can't manage to use it for my purpose, as now :\
10:03:32 <xerox> *purposes
10:06:47 <TheHunter> @type map head . Data.List.group . Data.List.sort
10:06:49 <lambdabot> map head . Data.List.group . Data.List.sort :: forall a.
10:06:49 <lambdabot> 					       (Ord a) =>
10:06:49 <lambdabot> 					       [a] -> [a]
10:10:03 <jlouis> xerox: it is known as Multiset Discrimination. http://www.thomas.ambus.dk/plan-x/msd/
10:10:27 <xerox> jlouis, thanks.
10:11:28 <Cale> shapr: vx.hn.org
10:12:03 <Cale> (I run my web stuff off my own machine)
10:13:44 <shapr> aha
10:20:09 <tromp> @indec listArray
10:20:09 <lambdabot> Sorry, I don't know the command "indec", try "lambdabot: @listcommands"
10:20:12 <metaperl_> would someone explain why there is only a b on the LHS of this data type construction
10:20:13 <metaperl_> data Quad a b = Quad a a b b deriving Show
10:20:15 <tromp> @index listArray
10:20:15 <lambdabot> Data.Array.Base,Data.Array.Diff,Data.Array.IArray,Data.Array.Unboxed,Data
10:20:15 <lambdabot> Array,GHC.Arr,Array
10:25:47 <funkmando> how do you access an individual char of a string?
10:25:56 <shapr> just ask for it.
10:26:13 <funkmando> ?
10:26:15 <shapr> I usually use "123" !! 3
10:26:25 <funkmando> and that is 3?
10:26:35 <funkmando> so they start indexing at 1
10:26:46 <shapr> uh, I dunno
10:26:46 <tromp> no, at 0
10:26:46 <kosmikus> no
10:27:05 <shapr> funkmando: that's what you get for trusting my advice ;-)
10:27:09 <tromp> "123"!!2 == '3'
10:27:17 <tromp> that's a Char
10:27:29 <Igloo> Don't forget that (!!) is O(n), not O(1), though
10:27:46 <shapr> is drop O(n) ?
10:27:50 <Igloo> Yes
10:27:57 <tromp> drop n is O(n)
10:28:08 <tromp> irrespective of list length:)
10:28:08 <shapr> What's the advantage of !! then?
10:28:25 <Igloo> You don't have to use both head and drop
10:29:19 <funkmando> what can i use that is O(1) ?
10:30:06 <kosmikus> nothing, not with normal Haskell strings
10:30:15 <CosmicRay> you could with arrays, right?
10:30:20 <Igloo> Right
10:30:29 <CosmicRay> since a haskell list is internally a linked list, or something resembling it, I'm assuming?
10:30:34 <Igloo> Right
10:30:39 <shapr> CosmicRay: sequence has comment spam
10:30:42 <tromp> (!!) = flip $ (head.).drop
10:30:58 <CosmicRay> dammit
10:30:59 <xerox> yay.
10:31:11 <shapr> At least it means sequence hit google.
10:31:12 <funkmando> can you convert haskell strings into char arrays?
10:31:19 * CosmicRay marks things as spam
10:31:25 <tromp> @type listArray
10:31:26 <lambdabot> bzzt
10:31:29 <CosmicRay> I do have drupal's spam module installed
10:31:39 <CosmicRay> but it's bayesian and really needs some training before it works
10:31:54 <Igloo> funkmando: You might want one of the PackedString libraries instead. What are you actually trying to do?
10:31:55 <metaperl_> I think you guys missed my question (at least I hope so)
10:32:00 <metaperl_> would someone explain why there is only a b on the LHS of this data type construction
10:32:01 <metaperl_> data Quad a b = Quad a a b b deriving Show
10:32:06 <funkmando> Igloo this was just out of curiousity
10:32:20 <funkmando> i need to compare strings and increment to variables according to some tests
10:32:24 <funkmando> to = two
10:32:28 <tromp> cause Quad is a function on types
10:32:35 <Igloo> metaperl_: What else do you think should be there?
10:32:49 <tromp> a type constructor
10:32:50 <metaperl_> a a b b
10:33:01 <Igloo> Quad is the type constructor
10:33:11 <Igloo> Oh, sorry, I'm reading the wrong lines
10:33:18 <metaperl_> data Quad a b = Quad a a b b deriving Show
10:33:24 <metaperl_> that's the issue - the RHS
10:33:32 <metaperl_> why is there only a b there and not a a b b
10:33:34 <Igloo> metaperl_: But what wouldbe the point of repeating the types used?
10:33:43 <shapr> CosmicRay: can you give me shotgun privs?
10:33:47 <metaperl_> is the RHS only saying which types are used
10:33:50 <jlouis> it takes type parameters a and b and produces something with the a and b substituted
10:33:56 <CosmicRay> shapr: yes.  I just got rid of 'em, but hang on
10:33:58 <tromp> the LHS only needs to specify the free type variables of the RHS
10:34:08 <Igloo> Thr RHS says Quad is a data constructor which contains 2 as and 2 bs
10:34:16 <jlouis> Quad Double Int = Quad Double Double Int Int deriving Show would be one way to monomorphise it
10:34:21 <metaperl_> ok, so the LHS just gives an inventory of which types are gong to be used.
10:34:23 <Igloo> The LHS says Quad a b is the type of such an expression
10:34:30 <jlouis> metaperl_: you could say that, yes
10:34:31 <basti__> metaperl_: the whole thing is a bit like a function
10:34:47 <basti__> metaperl_: you would not give a function one parameter twice would you?
10:35:04 <tromp> data QuadType a b = Quad a a b b deriving Show
10:35:04 <kosmikus> maybe the confusion arises only from the type name being reused as constructor name in this case
10:35:15 <basti__> maybe kosmikus
10:35:18 <metaperl_> the LHS is saying "Quad uses thing(s) of types a b". the RHS is specifying the order in which those thing(s) must be supplied to the constructor... it seems the RHS could be rmeoved
10:35:21 <tromp> QuadType is not a function of 4 types, but of only 2
10:35:32 <kosmikus> Quad a b = Quad a a b b  looks a bit strange indeed
10:35:45 <metaperl_> yaht used that technique
10:36:05 <tromp> it's just like for plain functions
10:36:10 <tromp> double x = x+x
10:36:15 <tromp> you dont say double x x = x+x
10:36:15 <CosmicRay> shapr: done
10:36:29 <CosmicRay> shapr: you should see "mark as spam" / "mark as not spam" links around stories and comments now
10:36:33 <metaperl_> oh good point
10:36:33 <jlouis> metaperl_: you should be aware that the space of type constructors (QuadType) is distinct from the space of data constructors (Quad). So you could have Quad in both spaces, like yaht does
10:36:34 <shapr> thanks
10:36:46 <metaperl_> it seems the RHS could be inferred from the args to the constructor on the LHS
10:37:01 <basti__> metaperl_: its type, yes.
10:37:09 <basti__> metaperl_: but not an instance.
10:37:29 <metaperl_> TypeConc a a b b c c  -- implies data TypeConcType a b c
10:37:50 <tromp> or  TypeConcType b c a
10:37:57 <tromp> still 6 possible permutations
10:38:12 <basti__> if we take tromps notation we would know: a "QuadType Int Double" is some "Quad (Int) (Int) (Double) (Double)", but we would not know what the Int's and Double's are.
10:38:22 <tromp> which matters since you can partially apply a type function
10:38:22 <metaperl_> but does the order on the LHS affect anything? I think I'm going to forget about this until I have a difficulty
10:39:04 <CosmicRay> shapr: heh, your LicensedPreludeExts submission was caught by the spam filter :-)
10:39:11 <shapr> doh
10:39:16 * CosmicRay marks as not spam
10:39:31 <metaperl_> ok, I was just wondering. it might be better to go right to the report or Gentle and get a rigid statement about what is happening. yaht is not being so clear ot me on this
10:39:45 <xerox> metaperl_, that was the same for me.
10:40:02 <CosmicRay> shapr: btw, are you insterting <!--break--> manually or is drupal doing that for you?
10:40:40 <jlouis> metaperl_: yaht probably tries to hide some of the ``harder stuff''
10:41:12 <metaperl_> I see.. ok, well everything is passing the interpreter I am writing so I will learn more when the need arises. Thanks for your input guys
10:41:14 <metaperl_> and girls
10:42:32 <CosmicRay> where? :-)
10:42:58 <basti__> uhm
10:43:32 <metaperl_> I dont know the gender of my IRC-mates
10:43:38 <CosmicRay> shapr: the <!--break--> indicates if there's a part that shouldn't show in a summary
10:43:48 <CosmicRay> metaperl: me neither, with a few exceptions
10:43:49 <funkmando> so whats the easiest way of having some kind of increment function?
10:44:00 <CosmicRay> you mean succ?
10:44:02 <CosmicRay> @type  succ
10:44:10 <CosmicRay> @type succ
10:44:21 <CosmicRay> bah
10:44:23 <funkmando> lol
10:44:23 <metaperl_> an infinite lazy list works too
10:44:50 <CosmicRay> succ :: Enum a => a -> a
10:44:51 <CosmicRay> there.
10:45:04 <basti__> funkmando: you could say (1+)
10:45:25 <basti__> funkmando: that would (through parser magic) curry the +
10:45:50 <metaperl_> I think he wants a counter... something that gives a higher number on each call
10:46:04 <basti__> oh.
10:46:05 <CosmicRay> funkmando: we don't do saved state :-)
10:46:10 <basti__> yes thats pervert.
10:46:12 <metaperl_> a monad does...
10:46:15 <CosmicRay> funkmando: but if you really need it, look at IORef
10:46:20 <shapr> CosmicRay: right, I like really short summaries.
10:46:24 <basti__> one could also recurse.
10:46:27 <funkmando> i need to increment on occurence of some chars being the same in a string
10:46:34 <funkmando> so say how many chars are in the same place etc
10:46:37 <metaperl_> IORef? what does that have to do with a counter
10:46:40 <CosmicRay> shapr: ah, ok
10:46:43 <metaperl_> length filter predicate list
10:46:47 <funkmando> in 2 strings sorry
10:46:52 <metaperl_> length $ filter predicate list
10:47:00 <CosmicRay> metaperl: it's essentially a mutable variable, if he really needs one
10:47:04 <int80_h> lambdabot, my hero!
10:47:09 <CosmicRay> ah ha.
10:47:17 <funkmando> so i know how to do it by writing gazliions of if and else cases
10:47:23 <CosmicRay> anyway now I see what the problem really is
10:48:02 <CosmicRay> funkmando: you may be interested in Data.List.group
10:48:27 <funkmando> ok
10:48:37 <CosmicRay> funkmando: but I'm assuming that recursion could work for you, or a foldl/foldr thing, to do the counting bit
10:48:40 <CosmicRay> that's the haskell way
10:48:57 <funkmando> yeah i know you dont have variables the same as java and c
10:49:22 <funkmando> is it true that no value varies?
10:49:24 <metaperl_> main []     []     count     = count
10:49:24 <metaperl_> main (x:xs) (y:ys) count
10:49:24 <metaperl_>      | x == y = main xs ys (count+1)
10:49:24 <metaperl_>      | True   = main xs ys (count)
10:49:32 <CosmicRay> funkmando: yes
10:49:40 <CosmicRay> funkmando: you could implement Data.List.length like this:
10:49:44 <CosmicRay> lengh [] = 0
10:49:57 <CosmicRay> length (_:xs) = 1 + length xs
10:50:12 <CosmicRay> does that make sense (typo aside)?
10:50:17 <Cale> funkmando: you really have to learn to look at problems a little differently in order to program in Haskell, but it's worth it
10:50:22 <funkmando> finds the size of the list
10:50:42 <CosmicRay> exactly
10:50:50 <CosmicRay> it does that by counting how many elements are in it
10:50:56 <CosmicRay> but there is no explicit counter variable anywhere
10:51:12 <CosmicRay> it simply removes the first element and adds one to the length of the remainder
10:51:17 <funkmando> yeah
10:51:28 <metaperl_> I wrote that program to help funkmando, but it is having a type error... my code is the next step in the process
10:51:56 <funkmando> im not sure i understand the program metaperl
10:52:09 <metaperl_> oh
10:52:22 <metaperl_> let's take it line by line
10:52:25 <funkmando> ok
10:52:33 <metaperl_> main []     []     count     = count
10:52:40 <metaperl_> main is the name of our function
10:52:45 <metaperl_> it could be anything
10:52:47 <funkmando> right
10:53:00 <metaperl_> [] [] count
10:53:07 <metaperl_> is pattern matching
10:53:16 <jlouis> The mongers.org sysadmin just asked: ``what is ghc?'' Answer: A really big ``gcc'' frontend...
10:53:20 <funkmando> so take the third element.. ?
10:53:25 <CosmicRay> jlouis: haha
10:53:36 <metaperl_> we are saying if a call to main calls main with two empty lists and a count then return count
10:53:50 <funkmando> right got it
10:53:59 <metaperl_> therefore this call main [] [] 12
10:54:01 <metaperl_> will return 12
10:54:05 <metaperl_> let me check that out
10:54:18 <funkmando> so we would need to start it at 0... ?
10:54:19 <int80_h> so ghc takes haskell and makes it into C? which gcc compiles? is that how it works?
10:54:39 <int80_h> or does it let gcc go right to the assembler stage?
10:54:42 <jlouis> int80_h: if setting the correct options yes
10:54:58 <CosmicRay> int80_h: ghc can go either way on some archs
10:55:03 <jlouis> ghc has a C backend which outputs C which is then fed into gcc
10:55:04 <int80_h> sweet :)
10:55:06 <CosmicRay> int80_h: on other archs, it only goes via C
10:55:07 <metaperl_> no funkmando
10:55:08 <CosmicRay> I think.
10:55:15 <metaperl_> what I just gave is the base case
10:55:17 <CosmicRay> there's got to be a reason for -fvia-C
10:55:25 <metaperl_> let's say you have a list
10:55:25 <int80_h> ah I will look at the docs to see which platforms
10:55:36 <metaperl_> let's say the list is [1,2,3]
10:55:38 <int80_h> I imagine they have x86 assembler covered
10:55:42 <CosmicRay> yes
10:55:52 <jlouis> there is also the question of how much control over the registers you have
10:55:55 <metaperl_> as we move through the list, it becomes [2,3] then [3] then []
10:56:18 <metaperl_> _only_ when it becomes [] does that part of the function execution because [] will match with []
10:56:26 <metaperl_> does that make sense?
10:56:37 <int80_h> wow
10:57:38 <metaperl_> ok funkmando, my working funciton is this. for somereason it was wrong to name it main
10:57:38 <metaperl_> mycount []     []     count     = count
10:57:39 <metaperl_> mycount (x:xs) (y:ys) count
10:57:39 <metaperl_>      | x == y = mycount xs ys (count+1)
10:57:39 <metaperl_>      | True   = mycount xs ys  count
10:57:44 <funkmando> just reading
10:57:53 <jlouis> int80_h: you should be aware, though, that laziness costs in performance. Big time.
10:57:54 <metaperl_> that wokrs if you load it into ghci or hugs
10:57:58 <CosmicRay> metaperl: ah, that makes sense.  main is the entry point to the program and always has type IO ()
10:58:13 <metaperl_> so htat's what Peter Gabriel was singing about: "Big-time"
10:58:36 <metaperl_> "so much larger than life"
10:58:37 <nnunley> shapr: Hey... did you get a chance to look for coverage tools in Haskell?
10:58:39 <CosmicRay> jlouis: well, it *can*.  I don't think that it's an axiom that haskell is slow though.
10:58:57 <CosmicRay> jlouis: I find it to be roughly on par with python or perl usually
10:59:00 <funkmando> so metaperl what does line 3 dp
10:59:01 <funkmando> do*
10:59:03 <CosmicRay> jlouis: and still quite a bit getter than java
10:59:10 <metaperl_> oh that is a guard
10:59:28 <metaperl_> it's an easy way to do if-then-else
10:59:43 <jlouis> CosmicRay: Indeed. But compared to call-by-value language there's still a gap
11:00:08 <jlouis> Not that it matters so much. You can always add strictness to inner loops
11:00:09 <metaperl_> funkmando: check this out: http://www.cs.uu.nl/~afie/haskell/tourofsyntax.html#Guards
11:00:22 <jlouis> profiling is the way to fix problems
11:00:54 <jlouis> (and development time in haskell is awfully good. I do not even know the language well and I am already on par with SML)
11:00:57 <metaperl_> they show a simple example of a guard in their description
11:01:07 <jlouis> which I know quite much
11:01:20 <metaperl_> I can believe it jlouis
11:01:41 <CosmicRay> jlouis: I can identify with that
11:01:49 <jadrian> CosmicRay: on par on python when using ghci/hugs as an interpreter or compiled with ghc?
11:02:05 <CosmicRay> jlouis: I've been using haskell for, hmm, 2 or 3 months now, and I feel faster at developing than with python, which I've used for 5 years
11:02:09 <CosmicRay> jadrian: with ghc
11:02:18 <CosmicRay> jadrian: sometimes faster than python
11:02:27 <jadrian> CosmicRay: isn't that quite bad as you're comparing an interpreted laguage witha compiled one
11:02:40 <jadrian> CosmicRay: that is, if it is on par with ghc then it is much worst with ghci
11:02:48 <CosmicRay> jadrian: ghci doesn't seem to make much difference to me, though hugs is noticably slower
11:02:53 <jlouis> CosmicRay: aint it funny that python is dynamically type and so ``better for rapid prototyping''?
11:03:11 <CosmicRay> jlouis: I used to believe that
11:03:17 <CosmicRay> jlouis: then I learned of type inference.
11:03:24 <jadrian> CosmicRay: ghci is only has fast as ghc if you compiled the whole thing first, in that case it takes advantage of it. Otherwise it can be much slower
11:03:24 <jlouis> CosmicRay: hehe
11:03:25 <CosmicRay> damn cool concept, that.
11:03:30 <jadrian> CosmicRay: and I mean a lot!
11:03:36 <jlouis> CosmicRay: Hindley-Milner inference is good yes ;)
11:03:59 <CosmicRay> right, the inference that sounds almost like a beer :-)
11:04:08 <jlouis> hoho
11:04:09 <CosmicRay> (does Caml Lite use Milner Lite?)
11:04:18 * CosmicRay backs off now.
11:04:27 <funkmando> ah i see
11:04:35 <funkmando> like case in C
11:04:46 <funkmando> shit, forget C!! lol
11:04:57 <jadrian> dynamic typing is one of the things that keeps me away from python :-/
11:05:37 <CosmicRay> jadrian: it's one of the things that made me switch from perl to python 5 years ago :-)
11:05:47 <CosmicRay> oops, I guess I shouldn't say that anymore :-)
11:05:52 <jadrian> :)
11:06:26 <CosmicRay> I might get beaten up by an angry implicit variable with all the perl folks here these days :-)
11:06:34 <funkmando> i still dont get the last line
11:06:40 <funkmando> what does True = mean?
11:06:44 * int80_h prepares for the coming religious war on the side of the Righteous.
11:06:47 <funkmando> or what is it supposed to do
11:07:04 <jadrian> are you talking about guards funkmando ?
11:07:06 <int80_h> which would be python of course ;)
11:07:19 <funkmando> metaperl's function
11:07:21 <CosmicRay> int80_h: well I can safely say that being named after a multi-purpose interupt in DOS is probably not the side of the Righteous :-)
11:07:22 <funkmando> to compare the chars in a string
11:07:29 <CosmicRay> funkmando: the bit to the left of the = is the guard
11:07:37 <funkmando> yeah
11:07:37 <CosmicRay> funkmando: the first expression was a comparison using ==
11:07:42 <int80_h> I was a heathen barabarian when I picked this name
11:07:43 <funkmando> and True is the condition
11:07:43 <CosmicRay> funkmando: the type of that expression is Bool
11:07:48 <int80_h> maybe I should change it :)
11:07:58 <CosmicRay> int80_h: don't worry, few people know what it means anymore :-)
11:08:02 <funkmando> but how can a string be true or false??
11:08:09 <funkmando> or a char or whatever
11:08:11 <CosmicRay> funkmando: it's not, but the result of the comparison is
11:08:17 <CosmicRay> @type ==
11:08:18 <lambdabot> bzzt
11:08:22 <CosmicRay> @type (==)
11:08:24 <lambdabot> (==) :: forall a. (Eq a) => a -> a -> Bool
11:08:30 <CosmicRay> does that make sense?
11:08:35 <CosmicRay> @type "foo" == "bar"
11:08:37 <lambdabot> "foo" == "bar" :: Bool
11:08:44 <funkmando> ah
11:08:52 <funkmando> so "foo" = "bar" is false
11:08:53 <funkmando> ==
11:08:54 <funkmando> i mean
11:08:57 <CosmicRay> correct
11:09:15 <CosmicRay> so, the patterns are evaluated in order starting from the top
11:09:21 <CosmicRay> the first one that matches is used
11:09:41 <CosmicRay> so in this case, if the first one doesn't match, we go to the second.  Its value is True, so it will always match
11:09:42 <metaperl6> funkmando, evaluation of the expression 'foo' == 'bar' yields False
11:09:46 <CosmicRay> effectively it's a default
11:09:52 <metaperl6> funkmando, evaluation of the expression 'bar' == 'bar' yields True
11:10:05 <CosmicRay> and the type of both is Bool
11:10:10 <jadrian> you mean "bar"=="bar"
11:10:21 <jadrian> and "foo" == "bar"
11:10:29 <metaperl6> the guard to fire is dependant on which expression returns True
11:10:30 <CosmicRay> jadrian: haven't you heard?  he's just using the new UTF-24 encoding :-)
11:10:36 <metaperl6> starting from the first one
11:10:38 <jadrian> right :)
11:10:58 <metaperl6> so, if the two characters are equal, then the first guard fires
11:11:03 <funkmando> yes
11:11:07 <int80_h> I got in a nice plug for functional programming to my project manager yesterday
11:11:09 <metaperl6> otherwise the second guard is guranteed to fire
11:11:18 <metaperl6> when the first guard fires, the counter increases
11:11:18 <funkmando> until we have an empty list
11:11:26 <metaperl6> the second keeps the guard the same...
11:11:28 <metaperl6> exactly
11:11:46 <metaperl6> save the funciton in a file named mycount.hs and then do :l mycount
11:11:55 <funkmando> ok
11:12:00 <metaperl6> then type mycount "abcabcabc aiiaiiaii" 0
11:12:07 <metaperl6> oops
11:12:14 <metaperl6> then type mycount "abcabcabc" "aiiaiiaii" 0
11:12:28 <metaperl6> and you will get back 3 as your answer
11:12:59 <funkmando> so i need to define the function
11:13:02 <funkmando> ie what its taking in
11:13:08 <funkmando> it takes two strings and returns an int?
11:13:38 <metaperl6> well, the API for my function could be better
11:14:07 <metaperl6> gocount stra strb     = mycount stra strb 0
11:14:07 <metaperl6> mycount []     []     count     = count
11:14:07 <metaperl6> mycount (x:xs) (y:ys) count
11:14:07 <metaperl6>      | x == y = mycount xs ys (count+1)
11:14:07 <metaperl6>      | True   = mycount xs ys  count
11:14:22 <metaperl6> then call gocount "abcab" "aiiaii"
11:14:33 <metaperl6> instead of mycount "abcabc" "aiiaii" 0
11:14:48 <funkmando> yeah
11:17:08 <funkmando> excellent
11:17:09 <funkmando> it works
11:17:37 <metaperl6> any stats on ocaml compiled vs haskell compiled?
11:18:19 <jlouis> metaperl6: in what respect?
11:18:22 <musasabi> metaperl6: ocaml is usually slightly faster except for complex problems, while haskell code is shorter.
11:18:29 <CosmicRay> metaperl: ocaml is usually faster
11:18:32 <metaperl6> just execution speed
11:18:38 <metaperl6> yes, I wanted some objective data
11:18:39 <CosmicRay> metaperl6: ocaml can sometimes outperform g++
11:18:45 <metaperl6> yes I have heard
11:18:46 <CosmicRay> metaperl6: and on rare occasions, even gcc
11:18:46 <jlouis> execution speed is irrelavant to development time
11:18:57 <CosmicRay> metaperl6: shootout.alioth.debian.org is the closest we have
11:18:57 <jlouis> most of the time
11:19:33 <CosmicRay> metaperl6: however, it's hard to do an honest comparison like that, because some of the algorithms presented would normally finish instantly in haskell due to lazy execution :-)
11:19:44 <jlouis> MLton fares really well. But MLton is a whole-program compiler with polyvariance, defunctionalisation, monomorphisation, early closure conversion and a really powerful SSA backend
11:20:30 <CosmicRay> metaperl6: also, the programs in many languages (including Haskell) on the shootout have been so heavily optimized that they don't really reflect code that the average person would want to write
11:20:36 <musasabi> yes, when submitting code to the shootout the most difficult part in haskell solutions is making them slow enough.
11:20:43 <CosmicRay> heh
11:21:10 <CosmicRay> that quote belongs on a wiki somewhere.
11:21:15 <PerlJam> How do you make if/then/else with no else in haskell?
11:21:27 <musasabi> PerlJam: if foo then bar else baz ?
11:21:37 <PerlJam> without the else part.
11:21:57 <CosmicRay> PerlJam: it does not exist
11:22:06 <PerlJam> that's what I thought.
11:22:07 <metaperl6> PerlJam,I think guards do what you need: http://www.cs.uu.nl/~afie/haskell/tourofsyntax.html#Guards
11:22:09 <CosmicRay> PerlJam: if/then/else is an expression in haskell
11:22:26 <metaperl6> what do you want to do PerlJam
11:22:26 <CosmicRay> PerlJam: if you had no else and the condition was false, you would have an undefined result
11:22:53 <bourbaki> moin
11:23:00 <CosmicRay> hmm, glancing at the fib test, ocaml beat even intel's C compiler
11:23:10 <CosmicRay> though it claims it took only 0 lines of code
11:23:12 <musasabi> PerlJam: myIf True ifTrue _ = ifTrue \n myIf False _ ifFalse = ifFalse
11:23:14 <CosmicRay> something is ifshy :-)
11:23:52 * autrijus reconsiders the qualified imports in pugs.
11:24:13 <autrijus> jlouis: thank you. it makes sense. I'll do so soon.
11:24:41 <PerlJam> metaperl6: I'm trying to figure out how to add while loops to pugs.  I've modified Parser.hs but I'm having trouble with Eval.hs
11:25:19 <metaperl6> oh, sounds complicated :)
11:25:19 <TheHunter> what's the benefit of qualified imports (except the obvious insertFM vs. FM.insert issue)?
11:25:32 <autrijus> TheHunter: it's easier to trace origins.
11:25:36 <autrijus> visually, I mean.
11:25:37 <CosmicRay> PerlJam: the canonical way to do a while look in haskell would look like:
11:25:45 <Cale> PerlJam: If you want a thenless if for use in, say IO actions, then you can use "when", defined in the Monad library.  when p s = if p then s else return ()
11:25:50 <jlouis> autrijus: it depends a bit. I like qualified imports because they keep your namespace thin and when reading code, you do not have to hunt deeply for where it was defined
11:25:58 <autrijus> exactly.
11:26:08 <CosmicRay> PerlJam: just using recursion..  and you stop recursing when the condition becomes false
11:26:12 <jlouis> ``ah, it was defined in System.Posix.Types'' or whatever
11:26:19 <autrijus> my perl code usually starts using qualified namespaces when it grows larger than a few modules
11:26:23 <musasabi> TheHunter: multiple modules with the same function.
11:26:28 <autrijus> I didn't have this pressure in haskell because it was too concise :)
11:26:38 <CosmicRay> heh
11:26:56 * PerlJam is still struggling with the FP mindset.
11:27:15 <PerlJam> I can do simple things but slightly more complicated things are next to impossible it seems.
11:27:20 <CosmicRay> PerlJam: ok...  to start with, we don't loop, we recurse
11:27:29 <monochrom> heh it takes time
11:27:31 <CosmicRay> PerlJam: so, for example, you might say this
11:27:32 <PerlJam> CosmicRay: I've got that. :)
11:27:53 <CosmicRay> whilefunc x = if x then whilefunc y else z
11:28:02 <jlouis> the next thing is: functions are first class, so do not be afraid to pass them around like mad
11:28:03 <autrijus> ...and if you want to recurse without remembering your name, use a Y combinator...
11:28:09 <CosmicRay> so your loop is a function that just keeps calling itself until the condition turns false
11:28:13 <autrijus> (but ignore me)
11:28:18 <jlouis> autrijus: haha
11:28:31 <CosmicRay> PerlJam: you could implement while in terms of recursion in haskell
11:28:32 <funkmando> @type show
11:28:34 <lambdabot> show :: forall a. (Show a) => a -> String
11:28:41 <autrijus> anyone versed in mfix?
11:28:47 <monochrom> perl supports first class functions too, so that part is more familiar
11:29:36 <autrijus> but in perl5 you need to do tail optimization by hand using goto&
11:29:42 <autrijus> so that style is less favoured
11:29:53 <musasabi> autrijus: I have used it.
11:30:22 <autrijus> musasabi: what does it may to mfix inside a []?
11:30:24 <autrijus> s/may/mean/
11:30:37 <autrijus> I think I grok MonadFix Maybe
11:31:25 <CosmicRay> PerlJam: see if this makes any sense.
11:31:32 <CosmicRay> while :: Maybe a -> a -> a
11:31:33 <CosmicRay> while func initialvalue =
11:31:33 <CosmicRay>     case func initialvalue of
11:31:33 <CosmicRay>         Just result -> while func result
11:31:33 <CosmicRay>         Nothing -> initialvalue
11:31:36 <CosmicRay> err
11:31:47 <CosmicRay> make that
11:31:53 <CosmicRay> while :: (a -> Maybe a) -> a -> a
11:32:15 * autrijus notes a "until" in Prelude.
11:32:22 <autrijus> which may also help.
11:32:23 <musasabi> autrijus: what do you want to do with it?
11:32:33 <musasabi> autrijus: most of the time using mdo is the simplest way.
11:32:43 <autrijus> oh. mdo.
11:32:44 <Igloo> Does the shootout allow us to find out what the error on http://shootout.alioth.debian.org/benchmark.php?test=harmonic&lang=ghc&id=0&sort=cpu was?
11:33:34 <jlouis> where is MonadFix defined?
11:33:43 <autrijus> mdo is ghc only?
11:33:51 <autrijus> jlouis: C.Monad.Fix
11:33:52 <jlouis> somewhere in the MT libraray?
11:33:53 <musasabi> jlouis: Control.Monad.Fix
11:33:55 <jlouis> ah, yes
11:34:12 <musasabi> autrijus: I don't think C.M.Fix is more portable (but would have to check)
11:34:12 <autrijus> musasabi++ # thanks, totally forgot about that
11:34:55 <autrijus> I thought the whole C.M. thing need only fundep
11:35:13 <autrijus> yay. mdo is da bomb.
11:35:15 <autrijus> musasabi++
11:35:15 <autrijus> musasabi++
11:35:47 <funkmando> in the return of my function i need to return a string, but print values in it, like the value you entered is x
11:35:59 <funkmando> how do i do that?
11:36:12 <monochrom> how do you mean?
11:36:12 <musasabi> np
11:36:19 <autrijus> return $ "The value you entered is: " ++ (show x)
11:36:33 <funkmando> ah ofc thanks
11:36:37 <autrijus> :)
11:36:47 <monochrom> yuck you say "print" when you don't mean "print"
11:37:01 <autrijus> not sure saying sprint helps :)
11:37:32 <monochrom> I can't understand people who speak unclearly.
11:37:52 <jhunZoa> anyone know a tutorial explaining how to generate a table from a list?
11:38:05 <monochrom> But somehow those people can understand each other.  It is beyond my comprehension.
11:38:12 <funkmando> hah
11:38:21 <funkmando> yeah scuse the syntax there
11:38:22 <jlouis> MonadFix seems very interesting
11:38:23 <lisppaste2> metaperl pasted "help needed writing accessor functions for TupleType (exercise 4.7 in YAHT)" at http://paste.lisp.org/display/6069
11:38:24 <jlouis> bleh
11:38:44 <autrijus> and mdo makes it very accessible.
11:38:50 <autrijus> (proper abstraction)++
11:39:25 <CosmicRay> metaperl: do you want me to type the answer here or paste it?
11:39:35 <metaperl6> paste!
11:39:38 <metaperl6> please
11:40:17 <int80_h> bah I noticed there is no caml or ml channel
11:40:24 <jlouis> metaperl6: case on the tuple constructor is the solution
11:40:28 <int80_h> might it go by another name?
11:40:39 <jlouis> int80_h: #sml, here on freenode, #ocaml here on freenode
11:40:44 <metaperl6> hmm, never done that
11:40:46 <jlouis> I am sitting on #sml ;)
11:40:52 <int80_h> sweet
11:41:45 <metaperl6> jlouis, I think I made a mistake tuple1, tuple2, tuple3 are supposed to be accessor functions not type constructors
11:41:55 <metaperl6> I might rename the type constructors
11:41:56 <jhunZoa> no one got such tutorial?
11:42:12 <metaperl6> and I dont know how to create the accessors
11:42:24 <metaperl6> zhunZoa what sort of tutorial?
11:42:32 <jhunZoa> to generate tables from lists ~
11:43:14 <lisppaste2> CosmicRay annotated #6069 with "one answer" at http://paste.lisp.org/display/6069#1
11:43:26 <autrijus> jhunZoa: what sort of table? <table>?
11:43:37 <jhunZoa> yup
11:43:43 <CosmicRay> metaperl: you're OK
11:43:47 <jhunZoa> completely done with strings
11:43:48 <autrijus> oh. see Text.Html.
11:43:50 <CosmicRay> metaperl: case sensitivty to the rescue.
11:43:54 <jhunZoa> like old school sql
11:44:04 <jhunZoa> +--------------+---------+
11:44:09 <jhunZoa> that style borders etc
11:44:54 <autrijus> oh. ascii tables.
11:44:57 <CosmicRay> metaperl6: my apologies for continuing to get the wrong nick.  xchat is tab-expanding met incorrectly
11:45:02 <autrijus> first generate html with Text.Html http://search.cpan.org/src/AUTRIJUS/Language-Haskell-0.01/hugs98-Nov2003/fptools/hslibs/text/html/doc/Html.htm
11:45:07 <CosmicRay> autrijus: hah
11:45:08 <autrijus> then dump to w3m or links ;)
11:45:10 <jhunZoa> no not html
11:45:19 <jhunZoa> ascii
11:45:28 <autrijus> jhunZoa: w3m -dump -T text/html
11:45:32 <autrijus> can convert html into ascii :)
11:45:40 <jhunZoa> its for school..
11:45:42 <jhunZoa> :|
11:45:43 <CosmicRay> jhunZoa: sounds to me like you need a header and a footer line, then a function to use with map over every item in the list
11:45:45 * CosmicRay suspected
11:45:51 <autrijus> oh. school.
11:45:55 <jhunZoa> ye
11:46:01 * autrijus loses interest rapidly :)
11:46:06 <CosmicRay> nobody ever asks questions like that unless it's a homework assignment :-)
11:46:12 <jhunZoa> ye ;p
11:46:20 <jhunZoa> i just blowed a exam today on this
11:46:33 <jhunZoa> but the teacher is mean
11:46:42 <funkmando> is there a quick way to check if a number say x is a member of a list of integers?
11:46:44 <jhunZoa> for each wrong answer u get negative scores..
11:46:46 <jlouis> obligatory school remark: Contact Galois connections! http://www.haskell.org/humor/homework.html
11:46:47 <int80_h> why do you think he is mean?
11:46:48 <funkmando> or a list of anything really
11:47:01 <CosmicRay> so anyway, in this function you would pass to map, your problem is one of converting an answer to a string and then properly adding extra spaces
11:47:01 <TheHunter> @type elem
11:47:03 <lambdabot> elem :: forall a. (Eq a) => a -> [a] -> Bool
11:47:06 <CosmicRay> the former can be done with show
11:47:12 <funkmando> thanks TheHunter
11:47:15 <TheHunter> 3 `elem` [1..4] ==> True
11:47:17 <jhunZoa> its like correct answer = 1 point no answer = 0 points and wrong = -1 point
11:47:19 <CosmicRay> the latter by comparing the length of the result to the width of your column
11:49:49 <glimming> I promise to not ask so many questions in the future. Sorry if I have asked too many questions. It is easy to think that this is just a computer program when there are human beings (mostly) on the other end.
11:50:21 <glimming> Apology accepted?
11:51:07 <autrijus> well, I don't know... this is actually just a computer simulation and reality is just another window.
11:51:16 <autrijus> so no need to apologize, I think ;)
11:51:20 <basti_> glimming: uhm although i didnt read everything in this chan i would say there is no point in apologizing for questions
11:51:27 <glimming> I am rather distressed because I will give a senior level course at Stockholm University next period. I am merely a PhD student and this is a huge responsibility. In the meantime I have to write up a thesis (in April) so I have very limited time to prepare. I thought this could be a great way of interactively learning...
11:52:05 <CosmicRay> glimming: no need to apologize as long as you don't get offended when nobody answers :-)
11:52:13 <basti_> :P
11:52:17 <glimming> In addition, I am new to IRC and the sort of (sometimes ___very____ harsh) jargon that goes on here.
11:52:24 <basti_> ah
11:52:31 <autrijus> that explains.
11:52:31 <basti_> you didnt witness any harshness.
11:52:32 <basti_> ;)
11:52:37 <CosmicRay> #haskell is really incredibly tame as far as irc channels go
11:52:40 <glimming> is new to me really.
11:52:40 <int80_h> I have found that freenode is not like other irc networks
11:52:47 <autrijus> glimming: it helps to say you're new to irc upfront :)
11:53:21 <CosmicRay> int80_h: that's right.  others don't make you violate your monthly bandwidth cap by reading the rundraiser graph every time you log in :-)
11:53:26 <glimming> Yeah, too much real life I guess.
11:53:55 <glimming> ;-)
11:54:15 <CosmicRay> int80_h: personally I find OFTC to be even better than freenode, actually it's approximately what freenode was about 5 name changes ago
11:54:18 <basti_> glimming: no but really, on other nets, kickban is considered a form of communication, and injuries are normal.
11:54:33 <int80_h> oftc? never heard of it
11:54:36 <int80_h> but now I have
11:54:36 <basti_> insults
11:54:39 <basti_> grx
11:54:45 <CosmicRay> int80_h: irc.oftc.net
11:54:57 * int80_h is glad this channel logs
11:55:03 <int80_h> I will ook it up in logs later
11:55:34 <musasabi> CosmicRay: but if oftc would grow the same size of freenode it would probably be ridden with the same problems.
11:55:39 <int80_h> I personally could not have completed a recent project without freenode
11:55:50 <int80_h> what problems?
11:56:05 <CosmicRay> musasabi: some of the same.
11:56:05 <CosmicRay> musasabi: I believe some of freenode's problems are leadership-induced though
11:56:12 <basti_> problems? IRCNet has problems. freenode does not have problems.
11:56:16 <CosmicRay> heh
11:56:21 <int80_h> yeah efnet has problems
11:56:26 <basti_> efnet has problems too
11:56:29 <basti_> and dalnet has problems
11:56:32 <CosmicRay> yes, freenode is remarkably tame compared to most others
11:56:35 <musasabi> int80_h: mostly politics, not very much in practise and none when compared to many other ircnets.
11:56:38 <int80_h> I thought dalnet died from those problems
11:56:47 <basti_> dalnet is still kinda alive
11:56:50 <CosmicRay> int80_h: didn't efnet split in at least two parts about 3 years after i stopped paying attention to it? :-)
11:57:00 <gzl> freenode had a lot of problems a few years ago
11:57:01 <basti_> but dead from the normal people viewpoint
11:57:06 <gzl> sort of
11:57:27 <funkmando> i have this condition in a guard : (x elem y) && (x /= (y !! lol)), y is defined as a string, x is the head of a string and lol is supposed to represent the yth position of the string, so it says if the char we're looking at is not a member of y AND it's not equal to it's corresponding element of y, then do some stuff
11:57:37 <CosmicRay> there have been issues where servers are banned from the network or similar things due to the political views of the operators
11:57:38 <int80_h> I just vaguely heard about efnet problems. I stopped using it when I found it to be infested with kiddiots like other networks.
11:57:42 <CosmicRay> here
11:57:49 <funkmando> right?
11:57:52 <funkmando> but it won't work
11:58:06 <funkmando> its saying it expected a char, but got t -> t1
11:58:10 <int80_h> oh wow
11:58:16 <CosmicRay> x `elem` y
11:58:22 <CosmicRay> or elem x y
11:58:26 <funkmando> ohh
11:58:30 <basti_> CosmicRay: good eyes
11:58:55 <CosmicRay> thanks
11:59:16 <CosmicRay> int80_h: I try not to get involved because I have friends on both sides of those disputes.
11:59:43 <CosmicRay> int80_h: however, my point is that oftc does not have those disputes because its management structure is different
11:59:52 <basti_> politics is something for bizarre people,
12:00:17 <CosmicRay> basti_: crap.  I knew I should never have gotten involved with Free Software :-)
12:00:37 <basti_> not everything needs politics.
12:00:41 <int80_h> um
12:00:47 <basti_> things that need politics are not worth mentioning.
12:00:50 * basti_ is overstating
12:00:52 <int80_h> as long as people are involved, politics will be involved
12:01:00 <basti_> hm
12:01:03 <basti_> sad thing
12:01:05 <basti_> =)
12:01:07 <CosmicRay> basti_: I take an expansive view of "politics"
12:01:12 <int80_h> which is why you need certain kinds of structures to minimize those problems you mentioned
12:01:21 <basti_> i can say it better in german -g-
12:01:21 <CosmicRay> basti_: for instance, one could say forking code is a political thing
12:01:30 <basti_> one might yes
12:01:43 <int80_h> my guess is, this other network is more decentralized?
12:01:48 <int80_h> am I right?
12:01:51 <basti_> but then one might say, some people might not care if some other people fork some code or dont.
12:01:55 <CosmicRay> int80_h: it's more democratic in management structure
12:02:13 <CosmicRay> basti_: true, but eventually, every developer has to choose which fork to follow
12:02:15 <basti_> and, being an ircop unrules.
12:02:16 <int80_h> yeah where you say democratic I say decentralized. It arrives at the same place I think.
12:02:26 <CosmicRay> int80_h: yes, probably right.
12:02:32 <basti_> CosmicRay: i can only hope that software will go beyond this once.
12:02:48 <ibid> basti_: everything is politics :)
12:02:49 <basti_> as in "universally modular"
12:02:50 <CosmicRay> basti_: maybe humanity can overall.
12:03:09 <CosmicRay> basti_: but say you're building a free operating system, the scale of, oh, say debian
12:03:20 <basti_> ibid: then the word does not tell any difference?
12:03:22 <int80_h> lets not say debian
12:03:28 <int80_h> I just ate lunch
12:03:29 <CosmicRay> basti_: you've got so many people involved, doing so many things, there has to be some sort of coordination to achieve any sort of efficiency
12:03:36 <ibid> basti_: it's a state of mind
12:03:49 <basti_> i know what you mean ibid
12:04:02 <CosmicRay> basti_: given inevitable disagreements about approaches, I don't think politics can be completely avoided in a project like that
12:04:07 <ibid> basti_: to use a technical term, it's different intensionally even if not extensionally
12:04:19 * CosmicRay flings his debian developer badge at int80_h
12:04:45 <basti_> I do not think things need to be organized in "projects" necissairly.
12:04:46 <int80_h> hey I have no truck with debian, but I think your brilliant team is hamstrung by a crippled kernel.
12:04:48 * CosmicRay hopes int80_h doesn't smash it up :-)
12:04:49 <basti_> I know this is radical.
12:05:03 <CosmicRay> int80_h: bsd lover?
12:05:18 <CosmicRay> int80_h: uh, just who on our team is brilliant? :-)
12:05:19 <int80_h> someone mentioned years back that there was a debian project to make it kernel agnostic
12:05:27 <CosmicRay> oh
12:05:33 <CosmicRay> well we already are, more or less.
12:05:46 <int80_h> well I think debian is probably the best distro going, but you have to work with the material that you didn't develop.
12:05:47 <CosmicRay> unofficial, but active, ports exist to hurd, netbsd, and freebsd
12:06:08 <int80_h> yeah netbsd for me :)
12:06:10 <CosmicRay> int80_h: that is not necessarily a handicap
12:06:14 <CosmicRay> int80_h: plus we have source :-)
12:06:26 <CosmicRay> int80_h: I was the guy that bootstrapped debian gnu/netbsd, fwiw
12:06:38 * int80_h bows down
12:06:42 <int80_h> cool :)
12:06:52 <CosmicRay> oh it wasn't that hard :-)
12:07:01 <int80_h> hey do you know a guy named nathaniel?
12:07:11 <int80_h> I worked with him at zembu, he was on that project
12:07:12 <CosmicRay> soneone else had already ported dpkg and apt
12:07:12 <shapr> nnunley: You can get crude code coverage with -prof and unit tests. Lemme see if I can find something better...
12:07:22 <CosmicRay> all I had to do was bootstrap our version of make world
12:07:29 <int80_h> he was the one who told me all about it
12:07:31 <CosmicRay> int80_h: hmm, nathaniel nerode?
12:07:45 * CosmicRay struggles to remember those names
12:07:49 <int80_h> that could be right, I am hoping there is only one nathaniel on that project
12:07:54 <CosmicRay> I only worked on that project a couple of weeks
12:08:03 <int80_h> if there are more, I'll never know who I am talking about :)
12:08:18 <CosmicRay> bootstrapped it, then decided that my filesystem choices on netbsd sucked, so others took over when I went back to linux ;-)
12:08:20 <int80_h> I lost his email address after zembu died
12:09:05 <CosmicRay> I'm prone to periods of feverish hacking followed by long lulls
12:09:46 <CosmicRay> int80_h: but really, the idea of debian netbsd really appeals to me
12:09:52 <int80_h> hey if I suggested to you that an OS could be written in an FP language would you say I was making crazy talk?
12:09:52 * shapr is prone to long lulls with periods of sleep.
12:09:59 <CosmicRay> int80_h: because I admire the development process the netbsd folks use for their kernel
12:10:03 <CosmicRay> int80_h: oh, that's been done
12:10:05 <shapr> int80_h: http://www.cse.ogi.edu/~hallgren/House/
12:10:10 <CosmicRay> int80_h: many times over, in fact.
12:10:16 * basti_ tried freebsd once, but the package management sucked far too bad
12:10:25 <int80_h> I admire the debian folks for doing so much with a piece of crap kernel. the same way I admire google for doing the same
12:10:28 <ibid> not to mention various lisp os's, which are very old news :)
12:10:28 <CosmicRay> int80_h: a company named symbolics sold hardware with an os and userland written completely in lisp
12:10:32 <funkmando> (x `elem` y) && (x /= (y !! lol)) = silver (xs y (lol + 1) (count + 1)) // this says silver is applied to too few arguments in the call
12:10:37 <CosmicRay> basti_: that's my complaint with netbsd
12:10:42 <funkmando> but silver takes 2 strings 2 integers and produces an integer
12:10:48 <int80_h> I realized that brilliance is not stopped by goofy design choices
12:10:54 <basti_> I think every single package management in the *nix world SUCKS.
12:10:57 <CosmicRay> funkmando: but you gave silver only one arg
12:11:31 <CosmicRay> funkmando: check your paren balances
12:11:31 <basti_> i cant count the times when some supposedly wellmeaning packet manager broke something.
12:11:39 <int80_h> pkgsrc breaks nothing
12:11:47 <CosmicRay> oh yes it does
12:11:52 * basti_ ducks
12:11:55 <int80_h> if a package is broken, it nevers goes into pkgsrc period.
12:12:03 <int80_h> really what?
12:12:04 <funkmando> ah it runs now
12:12:05 <CosmicRay> try upgrading something like libpng and watch as your php site is down for two hours while it rebuilds half of world
12:12:20 <int80_h> are we talking netbsd pkgsrc?
12:12:33 <CosmicRay> yes
12:12:57 <CosmicRay> though that flaw also persists on freebsd and, if memory serves, gentoo
12:12:59 <int80_h> hmm okay :)
12:13:09 <int80_h> I conceed based on the fact I don't know what I'm talking about.
12:13:13 <CosmicRay> heh
12:13:35 <CosmicRay> I keep hearing from people how freebsd is such a great server os
12:13:37 * basti_ is talking missing override features, too many automatic things, bad search functions...
12:13:41 <CosmicRay> I say, it's a great server kernel
12:13:45 <int80_h> I keep hearing about how freebsd is broken
12:13:53 <int80_h> but we use their ports freely
12:14:01 <CosmicRay> int80_h: what, you don't hear about how openbsd is broken? :-)
12:14:11 * CosmicRay refuses to run openbsd
12:14:21 <int80_h> oh I don't even pay attention to what is going on with openbsd . if that tells you anything ;)
12:14:25 <CosmicRay> heh
12:14:39 <CosmicRay> int80_h: that tells me that the netbsd community has changed in the past few years.
12:14:43 <CosmicRay> int80_h: or that you're an outsider :-)
12:14:54 <int80_h> I'm just a user
12:14:59 <int80_h> I don't develop for it
12:15:07 <int80_h> I'd like to but have no idea where to begin
12:15:20 <int80_h> I have no idea how to go about debugging kernel code
12:15:24 <CosmicRay> make sure that ghc and hugs are in pkgsrc?
12:15:25 <CosmicRay> :-)
12:15:32 <int80_h> all I know about it, is that it is diffent from application debugging
12:15:47 <int80_h> ahh yes I could do that..a worthy project
12:15:54 <CosmicRay> also, debugging kernel code is damn annoying.
12:15:58 <rtega> does anybody in here know about some method to examine floating point exceptions in haskell?
12:16:11 * basti_ would love to tell his package manager: "I installed this goddamn package myself, DO NOT EVER TOUCH IT."
12:16:29 <CosmicRay> basti_: you can mark it "hold" in debian if you wish.
12:16:34 <CosmicRay> this will do that.
12:16:41 <CosmicRay> or that will do this.
12:16:43 <CosmicRay> either way. :-)
12:16:54 <basti_> with uninstalled packages too?
12:17:02 * CosmicRay blinks
12:17:13 <basti_> i admit i never tried it
12:17:23 <basti_> "hold" sounds like "keep" to me somewhat.
12:17:23 <CosmicRay> basti_: oh, are you saying something like "I compiled this locally, outside of dpkg, and I never want the .deb to be installed?"
12:17:28 <basti_> yes.
12:17:33 <CosmicRay> ah, I misunderstood.
12:17:40 <Igloo> Install it in /usr/local or /opt
12:17:46 <CosmicRay> there are some ways to do that, but none of them as nice.
12:17:52 <CosmicRay> the canonical answer is the one igloo gave you.
12:17:58 <Igloo> (personally I like giving each such program its own subdirectory)
12:18:25 <basti_> and also maybe "install this package's dependencies, but do not install this package itself, because i FRIGGIN DID IT MYSELF BECAUSE YOU STUPID PACKET MANAGER WERE TOO STUPID" or something like that
12:18:31 <Igloo> (well, personally I try not to do it in the first place  :-)  )
12:18:42 <basti_> (capitalisation indicates emotionality there)
12:18:51 * int80_h feels the love.
12:19:04 <CosmicRay> hehe
12:19:05 <basti_> yea positive vibes huh
12:19:19 <Igloo> And what does the bad grammar indicate?  :-)
12:19:31 <int80_h> that he is incoherent with rage?
12:19:36 <basti_> that i get incoherent when i have to talk to my packet manager
12:20:00 <CosmicRay> int80_h: anyway, do you know anything of the history between netbsd and openbsd?
12:20:05 <int80_h> you know I think hugs is in pkgsrc
12:20:23 <CosmicRay> int80_h: sweet.  missingh and missingpy, then. :-)
12:20:25 <int80_h> yeah, there was a big split when theo whatzhisname took his marbles and went home.
12:20:30 <CosmicRay> right
12:20:37 <CosmicRay> so anyway, here's a true story.
12:20:50 <CosmicRay> back in about 1994 or so I was just starting out in the *nix world.
12:21:01 <CosmicRay> this was before netbsd or openbsd really had any sort of a useful website.
12:21:11 * basti_ .o° ( ! )
12:21:23 <CosmicRay> so I post a question to the netbsd users list, essentially asking what the tradeoffs were between netbsd and openbsd, diferences in features, etc.
12:21:24 <basti_> and i thought i was old.
12:21:32 <CosmicRay> I was 14 at the time. :-)
12:21:37 <int80_h> uh oh..I see the flame a'comin'
12:21:41 <basti_> oh.
12:21:47 <CosmicRay> right, so anyway, massive flamewar develops
12:21:58 <CosmicRay> theo de raadt starts flaming all the netbsd people, and they reciprocate
12:22:02 <CosmicRay> and every last one of them CC's me
12:22:07 <int80_h> yeah anytime you ask to compare foo with bar, the holy wars begin.
12:22:20 <CosmicRay> nobody was ticked at me, mind you, but just CC'd me out of habit
12:22:29 <CosmicRay> so I get like 100 flames in my inbox the next day
12:22:32 <CosmicRay> but here's the funny part.
12:22:34 * int80_h laughs
12:22:50 <CosmicRay> about a month later, I get an automated message from Theo informing me that I'm in his killfile
12:22:56 <int80_h> hah!
12:22:56 <CosmicRay> and that he will never even see any mail from me.
12:22:58 <CosmicRay> fine, I think.
12:23:05 <int80_h> what a gomer.
12:23:14 <CosmicRay> but every 6 months for the next 3 years he sends an automated reminder that I'm still in his killfile.
12:23:20 <basti_> lol
12:23:20 <int80_h> heh
12:23:24 * shapr laughs
12:23:34 <basti_> bizarre
12:23:34 <Heffalump> :-)
12:23:48 <basti_> Heffalump: btw. do you have any relation to this cartoon elephant?
12:23:50 <int80_h> so he wants to keep reminding you that he took his marbles to play somewhere else.
12:24:12 <CosmicRay> and the thing is, if I mention this to anybody that's been on the core team of netbsd for ages, their response is usually "yeah, sounds like theo."
12:24:35 <int80_h> I read the file they have on the email history of the falling out
12:24:39 <Heffalump> absolutely. I came right out of the cartoon and started coding haskell.
12:24:48 <int80_h> I think the size of his ego ate up my bandwidth
12:24:48 <CosmicRay> hah
12:25:09 <PerlJam> Heffalump: When I first saw your nick I thought perhaps you were Larry Wall in disguise.
12:25:20 <int80_h> larry wall in the haskell channel
12:25:26 <int80_h> wow, that's juicy news.
12:25:28 <basti_> Heffalump: i just recently read the name on a cinema poster
12:25:33 <Igloo> Does "locally universally quantified" make sense? (meaning as in: Int -> (forall a . a))
12:25:34 * int80_h starts an unfounded rumor
12:25:36 <basti_> and went like -blink- -blink- is this REAL?
12:25:38 <Heffalump> basti_: I'm looking forward to that film :-)
12:25:41 * Igloo goes to find out what ghc calls them
12:25:57 <SamB> Doesn't Larry Wall still think Perl is a good thing?
12:26:06 <int80_h> isn't he obligated to?
12:26:14 * Heffalump was quite interested to see the response the TPF call for money got
12:26:22 <SamB> int80_h: people are aloud to realize their mistakes!
12:26:23 <PerlJam> Remember ... Larry Wall steals good ideas from other languages to incorporate into perl.
12:26:37 <int80_h> and totally munge them up
12:26:43 <CosmicRay> heh
12:26:45 <TheHunter> Igloo, doesn't ghc translate that into forall a. Int -> a before doing anything else?
12:27:00 <int80_h> the answer to "There's more than one way to do it" is "Just because you can, doesn't mean you should."
12:27:00 <Igloo> Oh, I mean the other way round
12:27:10 <Igloo> (forall a . a) -> Int
12:27:14 * CosmicRay suspects that int80_h is really guido
12:27:17 <SamB> PerlJam: its kind of hard to steal functional purity or a hindly milner type system and integrate them into an existing language!
12:27:20 <int80_h> heh
12:27:26 <int80_h> no I think guido rocks though
12:27:43 <PerlJam> SamB: and that's why it's taken us so long to implement perl6!  ;)
12:27:49 <CosmicRay> hah
12:28:03 <CosmicRay> these perl hackers sure are witty, at least :-)
12:28:08 <SamB> PerlJam: I thought it was the fact that Parrot has about a trillion opcodes?
12:28:20 <CosmicRay> SamB: what, like x86? :-)
12:28:34 <int80_h> oh it me where it hurts
12:28:35 <PerlJam> no, parrot development has in no way stalled perl6 development.
12:28:39 <SamB> CosmicRay: I think x86 is in the millions
12:28:50 <PerlJam> Parrot is a viable (if slightly unstable) platform right now.
12:28:53 <int80_h> yeah that's nothing like trillion
12:28:57 <int80_h> far more reasonable
12:29:00 <CosmicRay> heh
12:29:02 <PerlJam> you could compile haskell to it if you wanted.
12:29:04 <PerlJam> ;-)
12:29:05 <SamB> PerlJam: there are way too many opcodes.
12:29:31 <SamB> it looks like someone went and generated their names with a program!
12:29:36 <CosmicRay> actually, though, I think that these glib one-sentence reasons to use/not use a language usually reflect a prejudice
12:29:51 <PerlJam> SamB: RISC in hardware, CISC in asm.  This is the way of wisdom  ;)
12:30:17 <wli> Not really.
12:30:19 <SamB> PerlJam: there are better ways to do this than having a bajillion opcodes.
12:30:19 <CosmicRay> I didn't change languages because of a one-sentence summary, and I could even find good things in Perl :-)
12:30:22 <wli> wait a few years
12:30:25 <SamB> say, addressing mode fields?
12:30:37 <basti_> hash tables are nice in perl
12:30:47 <autrijus> woot, 1500 words for TMR.
12:30:56 <autrijus> 2x that and I'd be done.
12:31:38 <PerlJam> SamB: how many other architectures are successful and modal?
12:32:56 <PerlJam> Anyway ... parrot does have way too many opcodes but you don't have to use the ones you don't need (i.e. portions of them (or heck, all of them) may be swapped out at will.
12:32:57 <Heffalump> autrijus: what are you writing about?
12:33:14 <SamB> PerlJam: That doesn't help implementation!
12:33:20 <PerlJam> But the bajillion opcodes aren't even parrot's biggest problem.
12:33:43 <SamB> I wouldn't know of any others, since the bajillion opcodes put me off.
12:34:14 <PerlJam> SamB: unicode is a bit of a pain.  the parrot binary is about 5 times the size of my perl binary (and that ain't small I can tell you)
12:34:32 <int80_h> hmm what's parrot
12:34:41 <int80_h> yes I *could* google
12:34:44 <autrijus> Heffalump: http://pugscode.org/pa1draft3.html (early draft)
12:34:53 <PerlJam> int80_h: http://www.parrotcode.org/
12:34:57 <int80_h> thanks :)
12:35:05 <CosmicRay> @google parrot
12:35:06 <lambdabot> Sorry, I don't know the command "google", try "lambdabot: @listcommands
12:35:07 <SamB> PerlJam: hmm, so about 5 MB?
12:35:08 <CosmicRay> rats.
12:35:10 <int80_h> is anyone here an sdf user?
12:35:19 <CosmicRay> the free shell place?
12:35:21 <int80_h> yeah
12:35:25 <int80_h> it seems to be down
12:35:30 <CosmicRay> no, but they support gopher, so I like them :-)
12:35:34 <int80_h> I wanted outside confirmation
12:35:40 <int80_h> yes, yes they do
12:35:49 <CosmicRay> yeah looks unreachable frmo here too
12:35:59 <int80_h> I am going to use gopherspace from sdf to chronicle my haskell and lisp exercises.
12:35:59 <autrijus> Heffalump: it will get more haskell specific as I merge more technical questions in :)
12:36:11 <CosmicRay> int80_h: nice nice nice!
12:36:20 <Heffalump> autrijus: right :-)
12:36:21 <int80_h> yeah I wish I had done the same with C
12:36:32 <CosmicRay> int80_h: while you're at it, tell them to switch to pygopherd because gopherd has some security holes
12:36:40 <int80_h> I didn't think about it until I was halfway done with my MIX/MIXAL project
12:36:52 <basti_> mix in haskell?
12:36:53 * PerlJam boggles
12:37:00 <PerlJam> It's like I've stepped into a timewarp
12:37:12 <int80_h> no no, I did a MIX machine/assembler in C
12:37:18 <int80_h> for fun
12:37:21 <CosmicRay> PerlJam: oh, you didn't know?  porting pygopherd to haskell is next on my todo list :-)
12:37:29 <SamB> int80_h: writing an assembler in C is fun, huh?
12:37:36 * CosmicRay also maintains UMN gopher these days
12:37:37 <basti_> ah oh
12:37:43 <PerlJam> CosmicRay: next thing you know, you'll start running an archie server again.
12:37:44 <int80_h> it's a mythical assembler. not real world
12:37:57 <CosmicRay> PerlJam: working veronica server on gopher.floodgap.com though :-)
12:38:02 <int80_h> I mean mythical machine...that's why I picked it
12:38:21 <SamB> does MIXAL have fixed-width fields or something?
12:38:21 <int80_h> people still use veronica *tears of joy*
12:38:22 <PerlJam> int80_h: I think everyone who has run into the Knuth books has implemented that at some point :-)
12:38:25 <funkmando> i have 2 strings, and i want the program to tell the user how many characters are correct but in the wrong place, 1 string is the string the user types (to guess) and the other is one hidden in the program, how would i do this? i tried saying (let x denote an element of string X, and y denote an element of string Y) if x is in Y and x /= y but that doesn't work for say comparing [1,1,1,1] to [0,1,1,3] because that would say there are 2 
12:38:30 <CosmicRay> PerlJam: ahh, the good ole' days, when spam came in the form of porn when searching for a graphic file :-)
12:38:57 <int80_h> yeah I wanted to do it, as a rite of passage
12:38:59 <CosmicRay> int80_h: oh yes, Cameron Kaiser has even re-implemented it from scratch :-)
12:39:02 <SamB> What doesn't look like much fun is implementing MMIX
12:39:11 <CosmicRay> int80_h: he also wrote the bucktooth gopher server in Perl
12:39:21 <SamB> and unfortunately Knuth's implentation does userspace only
12:39:49 <CosmicRay> int80_h: also, pygopherd can automatically serve up gopherspace to WAP-enabled cellphones
12:39:56 <int80_h> woooah
12:40:02 <int80_h> gopher rules
12:40:20 <CosmicRay> int80_h: so then on the backend, I wrote interfaces from pygopherd to dict and nntp
12:40:32 <int80_h> schweet
12:40:35 <SamB> and Knuth's software doesn't support 64-bit relocations/references, either
12:40:38 <CosmicRay> int80_h: so I could use my cellphone to look up words in a dictionary or read usenet
12:40:47 <int80_h> ahhhhh
12:41:25 <int80_h> kkdkd
12:41:25 <int80_h> e
12:41:25 <int80_h> e
12:41:25 <int80_h> e
12:41:37 <CosmicRay> int80_h: if you want a blast from the past, check out some of the mirrors on my gopher site, quux.org
12:42:00 <CosmicRay> do you remember wiretap?
12:42:06 <SamB> CosmicRay: quux.org is yours?
12:42:10 <CosmicRay> yup
12:42:24 <PerlJam> okay, #haskell has gotten too bizarre for me today  ;)
12:42:29 <CosmicRay> hehe
12:42:32 <SamB> It never occurred to me that anyone real actually owned quux.org
12:42:47 <PerlJam> heh
12:42:50 <CosmicRay> I was shocked that it wasn't taken.
12:43:00 <SamB> PerlJam: how is it different from usual?
12:43:03 <CosmicRay> but I figured it was the perfect name for a project that started out trying to mirror gopherspace.
12:43:17 <CosmicRay> PerlJam: #haskell.  best.  channel.  ever.
12:43:22 <PerlJam> SamB: I don't know, I haven't been around long enough to establish a good baseline
12:43:40 <CosmicRay> I need to fire megamonad back up right about now.
12:43:48 <CosmicRay> @wiki megamonad
12:43:49 <lambdabot> http://www.haskell.org/hawiki/megamonad
12:43:51 <int80_h> I remember wiretap :)
12:44:01 <CosmicRay> perljam: did you know that we passed the turing test last month here? :-)
12:44:10 <SamB> @dict quux
12:44:11 <lambdabot> Supported dictionary-lookup commands:
12:44:11 <lambdabot>   @all-dicts @devils @easton @elements @foldoc @gazetteer @hitchcock @jargon
12:44:11 <lambdabot> @lojban @prelude @vera @web1913 @wn @world02
12:44:11 <lambdabot> Use "@dict-help [cmd...]" for more.
12:44:14 <CosmicRay> int80_h: gopher://quux.org/1/Archives/mirrors/wiretap.area.com
12:44:23 <int80_h> ahhhh
12:44:25 <SamB> @all-dicts quux
12:44:30 <int80_h> so gopher is actually still used
12:44:32 <lambdabot> *** "quux" jargon "Jargon File (4.3.0, 30 APR 2001)"
12:44:32 <lambdabot> quux /kwuhks/ n. [Mythically, from the Latin semi-deponent verb quuxo,
12:44:32 <lambdabot>    quuxare, quuxandum iri; noun form variously `quux' (plural `quuces',
12:44:32 <lambdabot>    anglicized to `quuxes') and `quuxu' (genitive plural is `quuxuum', for
12:44:33 <lambdabot>    four u-letters out of seven in all, using up all the `u' letters in
12:44:35 <lambdabot>    Scrabble).] 1. Originally, a {metasyntactic variable} like {foo} and
12:44:37 <lambdabot>    {foobar}. Invented by Guy Steele for precisely this purpose when he was
12:44:39 <lambdabot>    young and naive and not yet interacting with the real computing
12:44:42 <lambdabot> [46 @more lines]
12:44:47 <CosmicRay> 3. Guy Steele in
12:44:47 <CosmicRay>      his persona as `The Great Quux', which is somewhat infamous for light
12:44:47 <CosmicRay>      verse and for the `Crunchly' cartoons.
12:44:53 <CosmicRay> int80_h: sure
12:45:09 <CosmicRay> int80_h: proper support for the info itemtype has been integrated into firefox cvs recently, also
12:45:14 <PerlJam> CosmicRay: so ... you're Guy Steele? ;-)
12:45:17 <CosmicRay> no :-)
12:45:33 <int80_h> can I have your autograph :)
12:45:39 <int80_h> oh ..no..(*&(&* lag
12:45:42 <CosmicRay> heh
12:45:53 <jlouis> ok, Guy Steele would probably not write Haskell code
12:45:54 <jlouis> ;)
12:45:58 <SamB> how do you do autographs over IRC, anyway?
12:45:59 <int80_h> why not?
12:46:09 <int80_h> he can dcc it to me
12:46:12 <CosmicRay> int80_h: he works for sun
12:46:14 <CosmicRay> oh :-)
12:46:14 <CosmicRay> heh
12:46:20 <SamB> int80_h: in what form?
12:46:27 <int80_h> uh png
12:46:35 <SamB> uh huh.
12:46:42 <CosmicRay> guy steele was the original guy behind the hacker's dictionary
12:46:54 <CosmicRay> also he was big in the lisp community
12:46:58 <Heffalump> and he was involved in the monad transformers stuff, wasn't he?
12:47:01 <int80_h> so what did the infamous eric raymond change that everyone hates him for?
12:47:28 <CosmicRay> int80_h: he turned it into a tool to stroke his own ego
12:47:28 <int80_h> in the hackers dictionary
12:47:30 <SamB> so everyone hates esr now?
12:47:34 <SamB> news to me
12:47:35 <CosmicRay> @jargon halloween documents
12:47:37 <lambdabot> No match for "halloween".
12:47:37 <lambdabot> No match for "documents".
12:47:57 <int80_h> except for the fanboys
12:48:02 <PerlJam> ESR is just too arrogant (even for us geeks)
12:48:35 <SamB> thats saying something
12:48:44 <gzl> he does have interesting things to say sometimes
12:49:15 <int80_h> yeah but when people think you are an asshole, it's hard to filter out those interesting things.
12:49:23 <CosmicRay> yes, plus us debian folk have the sort of loathing for him that we usually reserve for former DPLs :-)
12:49:24 <Itkovian> shapr: how do I insert a link in a comment on sequence.complete ?
12:49:33 <PerlJam> gzl: I think he ran out of interesting things to say years ago.  Now he just says the same things over and over again.
12:49:37 <CosmicRay> Itkovian: just use html
12:49:47 <CosmicRay> Itkovian: <a href="http://www.blah.com">link text</a>
12:49:48 <gzl> yes, he does repeat himself, that's true
12:49:53 <Itkovian> ah ic.
12:49:54 <Itkovian> ok.
12:50:06 <PerlJam> gzl: and his gun-nut-nature doesn't exactly help things
12:50:07 <Itkovian> I didn;t see the <a> in the docs
12:50:10 * Itkovian slaps himself
12:51:29 <PerlJam> After 9/11 ESR release some statement to the effect that "if everyone on the planes had a gun, those hijackers wouldn't have succeeded" or something and the hacker community quickly piped up to tell the world that "ESR does not speak for us"
12:52:16 <int80_h> oh wow
12:52:20 <Itkovian> hmmm ... is one not allowed to post comments? or are they moderated?
12:52:33 <CosmicRay> they should go right in unless it thinks it's a spam
12:52:36 <CosmicRay> did you just post one?
12:52:39 <Itkovian> yeah.
12:52:42 <Itkovian> afaik :-)
12:52:42 <CosmicRay> let me check.
12:52:54 <Itkovian> on the http://sequence.complete.org/node/19 topic
12:53:42 <CosmicRay> huh
12:53:45 <CosmicRay> I fixed it
12:53:47 <int80_h> back to what I was talking about earlier...I got on the lisp OS kick because sbcl doesn't let me run executable binaries form the command line. And I was thinking, this has to be possible I've seen a lisp OS somewhere...
12:53:50 <CosmicRay> I don't know why that happened
12:53:51 * CosmicRay checks
12:54:13 <int80_h> I shouldn't need to have a runtime to run this compiled code
12:54:27 <Itkovian> now it's there all right. thx.
12:54:53 <int80_h> so now I am thinking that sbcl is not the implementation I want for executable code
12:55:08 <int80_h> I may just have to buy a commercial product when the day comes
12:56:06 <CosmicRay> Itkovian: yeah I bumped it to published status manually.  it should have done that automatically
12:56:09 <CosmicRay> thanks for pointing that out
12:56:12 <Itkovian> np.
12:56:54 <Itkovian> I'll kick Dries' arse next week ... meybe there's YAB in Drupal :-)
12:57:16 <CosmicRay> ah, please :-)
12:58:20 <CosmicRay> Itkovian: you could also gripe at him about http://drupal.org/node/17680 :-)
12:58:52 <alexj> Si\: FYI http://www.manageability.org/blog/stuff/soap-is-dead/view
12:58:55 <CosmicRay> Itkovian: oh, uhm, you did hit submit and not preview, right? :-)
12:59:10 <alexj> @seen si\
12:59:10 <lambdabot> I haven't seen si\
12:59:14 <Si\> alexj: I don't need convincing ;)
12:59:26 <alexj> ok : -)
12:59:32 <alexj> I don't know if you have to sell to others.
12:59:46 <Si\> oh, I've found plenty of papers
12:59:55 <alexj> ok cool.
13:00:06 <Itkovian> nope, I did preview
13:00:07 <Si\> many Academics are moving toward the REST archictecture
13:00:16 <alexj> you Academic?
13:02:21 <Itkovian> CosmicRay, are u coming to FOSDEM?
13:02:23 <Si\> not yet
13:02:33 <Si\> still but a humble undergraduate
13:02:38 <CosmicRay> Itkovian: nope
13:02:58 <CosmicRay> Itkovian: hmm, when is it?
13:03:07 <Itkovian> CosmicRay, this weekend :-)
13:03:09 <CosmicRay> oh, this week, heh
13:03:20 <CosmicRay> nah, it's a little difficult to fly across the ocean on short notice :-)
13:03:22 <Itkovian> I planned on going Saturday, but I've to attend a funeral.
13:04:28 <Itkovian> CosmicRay, where are you from then?
13:04:42 <CosmicRay> Itkovian: kansas, usa
13:05:19 <CosmicRay> Itkovian: well, I think I may have found out what caused your comment problem
13:05:25 <CosmicRay> Itkovian: please let me know if you have trouble again
13:06:45 <CosmicRay> oh woot, the haskell-cafe feed is finally working
13:07:00 <CosmicRay> http://sequence.complete.org/aggregator <-- gotta love xml
13:07:04 <Itkovian> CosmicRay, ok, will do.
13:08:37 <CosmicRay> Itkovian: I think I had set "max urls per post" in the spam filter to 1, thinking it would start thinking things were spam if they have 2 urls...
13:08:44 <CosmicRay> but it starts thinking they have spam if they have 1 url
13:08:50 <CosmicRay> I bumped it up to 4 :-)
13:10:35 <Itkovian> heh
13:10:37 <Itkovian> nice
13:12:19 <CosmicRay> Itkovian: did it suck to be in .be when bush was there thsi week?
13:13:32 <alexj> FYI, si\ there are some subtle gotchas in REST involving content types that I am not sure are discussed in the published literature.
13:14:13 <Si\> well I haven't read the stuff fully yet (I didn't know about it 24 hours ago), but anything is better than SOAP
13:14:31 <int80_h> test
13:14:41 <int80_h> hdhdhd
13:14:53 <CosmicRay> int80_h: we hear you
13:15:09 <CosmicRay> Si\: I agree.
13:15:16 <CosmicRay> Si\: I have to talk to a soap server from my haskell program.
13:15:18 <CosmicRay> it sucsk.
13:15:46 <int80_h> had bad lag sorry
13:16:50 <alexj> all I am saying is that when you switch to rest you should be mindful of content-type issues.  ContentType is everything!
13:20:37 <alexj> See these threads http://groups.yahoo.com/group/rest-discuss/message/3803 and http://groups.yahoo.com/group/rest-discuss/message/3887
13:22:40 <monochrom> Yes of course, we like static strong types.
13:25:29 <Itkovian> CosmicRay, I didn't notice anything :-) I work in Ghent, he never left Brussels ... besides, I really didn't give a damn
13:28:06 <CosmicRay> yeah
13:28:15 <CosmicRay> i grok that
13:29:54 <Itkovian> he told out reporter she had great eyes.
13:30:18 <CosmicRay> argh.
13:30:18 <Itkovian> and then she heard that he told the frech reporter who came before her that he told him he had great shoes ;-)
13:30:28 <Itkovian> lol
13:30:46 <Itkovian> I'm told it was broadcast in the US :-)
13:30:57 <CosmicRay> oh I'm sure
13:31:12 <CosmicRay> we all love knowing what am embarassment we are
13:31:21 <CosmicRay> except 51% of us don't know it
13:31:25 <CosmicRay> which is all he more embarassing
13:31:26 <Itkovian> haha
13:31:29 <Itkovian> lol
13:31:51 <Itkovian> ah well ... life goes on, eh.
13:34:07 <CosmicRay> depends on how many countries we bring freedom to
13:34:36 <CosmicRay> with "bring freedom" being in quotes, of course
13:37:09 <int80_h> when I play freeciv and wipe out my enemies, I always tell them I have brought their people freedom and they shuold stop crying.
13:37:17 <CosmicRay> haha
13:37:32 <CosmicRay> int80_h: wow, you like gopher and freeciv
13:37:40 <int80_h> guilty as charged
13:37:51 <int80_h> don't play freeciv much these days..but now that you bring it up
13:37:54 <CosmicRay> int80_h: http://arch.freeciv.org/
13:38:03 <int80_h> arch?
13:38:05 <Itkovian> lol
13:38:13 <CosmicRay> list archives
13:38:17 <int80_h> I may just install it here at work to play on weekends
13:38:28 <Itkovian> I suck at it ...
13:38:36 <CosmicRay> int80_h: I happen to host e-mail for freeciv.org :-)
13:38:38 <Itkovian> especially when playing a computer opponent
13:38:43 <int80_h> wow
13:38:50 <int80_h> the key to freeciv is smallpox
13:39:03 <int80_h> many small cities , as opposed to a few large cities
13:39:05 <Igloo> Ooo, does that mean we can whinge at you about v2 not being released?  :-)
13:39:17 <monochrom> No wonder I never succeeded in freeciv.
13:39:18 <CosmicRay> my strategy is to start far away from people, dump a lot into science, and hope nobody attacks me in the meantime
13:39:30 <CosmicRay> so i either win spectacularly or lose spectacularly.
13:39:32 <int80_h> you can't choose how far away you are can you?
13:39:35 <CosmicRay> lately mostle lose spectacularly
13:39:37 <CosmicRay> Igloo: haha
13:39:43 <CosmicRay> int80_h: no
13:39:49 <CosmicRay> int80_h: and you might not even know for awhile
13:40:02 <int80_h> I like to send in the diplomats, they help me to export democracy
13:40:03 <CosmicRay> though the setting of generator can tell you what the possibilities are
13:40:08 <Itkovian> I usually lose spectacularly
13:40:13 <CosmicRay> int80_h: by inciting sabotage? :-)
13:40:18 <int80_h> yes heh
13:40:21 <int80_h> and stealing tech
13:40:29 <Itkovian> int80_h, some worlds leaders seem to have followed yr example.
13:40:33 <monochrom> "I like to send in the diplomats, they help me to export democracy"  hahahahaha story of life of US of A.
13:40:37 <int80_h> no no I am following their example
13:40:37 <CosmicRay> haha
13:40:44 <Itkovian> well, does it work?
13:40:51 <int80_h> it works beautifully
13:40:55 <Itkovian> hmm.
13:40:59 <monochrom> I should try that.
13:41:05 <CosmicRay> monochrom: I thought we usually start with the stealth bombers.
13:41:06 <Itkovian> maybe bush & co played too much freeciv, eh.
13:41:10 <int80_h> well, I am an American. I play freeciv the American way.
13:41:14 <CosmicRay> heh
13:41:17 <int80_h> heh
13:41:31 <CosmicRay> int80_h: blindly? :-)
13:41:31 <int80_h> oops no I used to be an American. I am now a naturalized Californian.
13:41:36 <CosmicRay> heh
13:41:42 <monochrom> ha
13:41:58 <Itkovian> CosmicRay, come on, surely you cannot send in stealth bombers when you have not yet developped gunpowder.
13:42:22 <Oeje1> Itkovian: :-D
13:42:29 <monochrom> yeah you use diplomats until you have the technology
13:42:38 <CosmicRay> Itkovian: well, it just seems like a problem with game consistency if an american civ is able to try the diplomatic route first, is all :-)
13:42:48 <monochrom> by the time you have the technology, you will need it only against space aliens
13:42:52 <Oeje1> Stop it I can't take it. lol. :-P
13:42:58 <CosmicRay> heh
13:42:59 <int80_h> diplomacy is just a phase in warcraft
13:43:50 <CosmicRay> I mean, look at us.  "No major combat since 2004"
13:44:11 <int80_h> cosmic, too much the american, I try to export freedom and justice to all. I end up over-extended and everyone hating me.
13:44:17 <CosmicRay> hahaha
13:44:35 <Itkovian> hahaha
13:44:50 <CosmicRay> that's because "freedom" means "oil" and "justice" means "revenge" :-)
13:45:02 <Itkovian> bush: "the idea that the us is planning to attack Iran is RIDICULOUS. ... that said, we leave all options open."
13:45:12 <CosmicRay> heh
13:45:13 <Itkovian> he also said something like this:
13:45:27 <int80_h> ugh I want to go to a universe where I can't hear what bush says. Otherwise I will go insane
13:45:30 <boegel> Itkovian: I laughed my ass of when he said that
13:45:34 <Itkovian> "We used to let tiranny exist, cause it yields cheap oil. But that changes on september 11"
13:45:40 <CosmicRay> heh
13:45:46 <CosmicRay> see, the guy is a damn liar
13:45:50 <Itkovian> I add: yeah, now they're actively getting cheap oil.
13:45:51 <int80_h> well, duh
13:45:58 <CosmicRay> since sept. 11, we start propping up pakistan and saudi arabia more
13:46:03 <boegel> Itkovian: he's right, now they don't need tiranny to get cheap oil
13:46:07 <CosmicRay> and we all know how free they are
13:46:22 <Itkovian> freedom at gunpoint.
13:46:23 <int80_h> you just wait until California leaves the union
13:46:39 <int80_h> what a grand day, we're asking Canada for military support.
13:46:50 <Itkovian> weh mir of weh ...
13:46:57 <Itkovian> unde die vogel singen nicht meht
13:47:17 <int80_h> thanks for reminding me of my poor German skills ;)
13:47:19 <Itkovian> yeah well,
13:47:21 <CosmicRay> int80_h: like that'll work.  Their 2 F-16s were "escorting santa" last Dec 24.
13:47:21 <CosmicRay> really.
13:47:26 <CosmicRay> lots of newspaper articles about that.
13:47:26 <Itkovian> my german is even worse.
13:47:38 <Itkovian> as in this:
13:47:59 <int80_h> okay maybe we have to turn to our brothers in mexico
13:48:01 <Itkovian>  Wir bilden einen lieben Reigen
13:48:01 <Itkovian> Die Freiheit spielt auf allen Geigen
13:48:01 <Itkovian> Musik kommt aus dem Wei?en Haus
13:48:01 <Itkovian> und vor Paris steht Micky Maus
13:48:05 <Itkovian> (Rammstein)
13:48:58 <CosmicRay> int80_h: I was especially ticked at bush's state of the union, where he said something like "all Americans have been free since the day our country was founded."
13:49:08 <CosmicRay> has he forgotten about this little thing called THE CIVIL WAR?!
13:49:20 <Itkovian> We're all living in Amerika ...  Amerika ist wunderbar ...  We're all living in Amerika ...  Amerika, Amerika
13:49:26 <int80_h> his ignorance is only surpassed by the ignorance of the people that voted for him.
13:49:29 <CosmicRay> or is it that only white male property owners are Americans to him?
13:49:33 <boegel> Itkovian: ok already :p
13:50:00 <CosmicRay> Itkovian: and to that, I can but respond with the famous blinkenlights note:
13:50:02 <CosmicRay>                    ACHTUNG!  ALLES LOOKENSPEEPERS!
13:50:02 <CosmicRay>     Das computermachine ist nicht fuer gefingerpoken und mittengrabben.
13:50:02 <CosmicRay>     Ist easy schnappen der springenwerk, blowenfusen und poppencorken
13:50:02 <CosmicRay>     mit spitzensparken.  Ist nicht fuer gewerken bei das dumpkopfen.
13:50:02 <CosmicRay>     Das rubbernecken sichtseeren keepen das cotten-pickenen hans in das
13:50:05 <CosmicRay>     pockets muss; relaxen und watchen das blinkenlichten.
13:50:19 * int80_h giggles and sputters
13:50:25 <Itkovian> ok, I kinda understand it a bit
13:50:26 <zamez> hehe
13:50:43 <alexj> ah folks, FWIW this is the haskell IRC....
13:50:49 <Itkovian> yes.
13:50:50 <int80_h> cotenpicken
13:51:00 <Itkovian> we're devising new Monads
13:51:05 <Itkovian> the Bush Monad
13:51:09 <CosmicRay> heh
13:51:21 <SamB> how does it work?
13:51:25 <CosmicRay> the transformation from literate thought to jumbled mess?
13:51:25 <Itkovian> erm.
13:51:26 <int80_h> I'm suprised at what gets discussed here...like OOP the other day
13:51:32 <Itkovian> it exports freedom and sucks in oil?
13:51:37 <SamB> does it have interesting combinators?
13:51:43 <Itkovian> int80_h, well CosmicRay started it ...
13:51:46 <int80_h> and democracy,
13:51:49 <CosmicRay> Itkovian: ahh, there you go.  an oil to freedom transformer.
13:51:49 <Itkovian> SamB, no.
13:52:00 <basti_> did i hear rammstein?
13:52:01 <CosmicRay> Itkovian: int80_h is the one that mentioned freeciv :-)
13:52:01 <Itkovian> nono! it's the other way around!
13:52:04 * basti_ wiggles his ears
13:52:12 <int80_h> wait no, erase the logs
13:52:22 * int80_h gets rid of the evidence
13:52:24 <Itkovian> Rammstein is currenlty invading the airspace in my office.
13:52:47 <basti_> do they at least put on the decent albums?
13:52:50 <basti_> like herzeleid?
13:53:08 <Itkovian> well, I'm putting it on, and I haven;t got Herzeleid.
13:53:14 <Itkovian> so shoot me
13:53:20 * basti_ shoots Itkovian 
13:53:43 * Itkovian is gong to change diapers on his kid. brb
13:53:43 <basti_> always a pleasure
13:53:53 * boegel strangles basti_ 
13:53:55 <int80_h> crass r00lz
13:54:13 <basti_> I'm listening to Swandive right now.
13:54:21 <basti_> thats diametral to rammstein i think
13:54:25 <boegel> basti_: as in (hed)p.e. ?
13:54:44 <basti_> sorry boegel i couldn't parse this
13:55:00 <boegel> basti_: (hed)p.e. is a band, Swandive is one of their songs
13:55:04 <basti_> oh.
13:55:08 <basti_> no swandive is a band.
13:55:12 <boegel> oh, ok
13:55:15 <basti_> ;)
13:55:19 <int80_h> I was thinking swandive was a crass song I never heard of.
13:55:54 <boegel> they sing about taking a swandive into the asfalt, but I guess that's not diametral to rammstein :)
13:56:13 <int80_h> basti wants me to recieve a dcc..I have no idea how
13:56:15 <basti_> oh
13:56:37 <basti_> i dont know your client
13:56:43 <int80_h> okay did it
13:56:50 <int80_h> ircii
13:56:54 <int80_h> I think I did it
13:57:03 <int80_h> sweet
13:57:08 <basti_> yes i read that you have ircii but i dont know how to use it
13:57:10 <int80_h> who likes hunter s thompson here?
13:57:19 <basti_> i know, he's dead
13:57:22 <int80_h> I got it thanks basti
13:57:27 <int80_h> what did I get?
13:57:30 <int80_h> rammstein?
13:57:33 <basti_> left.ogg
13:57:38 <int80_h> ah :)
13:57:42 <basti_> [naming was stupid i know]
13:57:54 <boegel> int80_h: swandive, song is called left :)
13:58:08 <basti_> the id3 should be ok
13:58:11 <boegel> basti_: it sounds like massive attack
13:58:15 <basti_> yes kinda.
13:58:25 <basti_> theyre from switzerland though.
13:59:17 <boegel> we'll, nice music to fall asleep wit
13:59:19 <boegel> +h
13:59:23 <basti_> yup.
13:59:26 <boegel> I'm off to bed, bye !
13:59:28 <basti_> or, to do things.
13:59:31 <basti_> :)
13:59:37 <boegel> basti_: like sleeping ? :)
13:59:42 <basti_> uhm no like, with your gf.
13:59:48 <basti_> or with a bong.
13:59:57 <basti_> :P
14:00:37 <basti_> haven't done both of these for some time now. something's wrong here.
14:00:40 <boegel> basti_: I don't like music when I'm discussing where we should go tomorrow :p
14:00:56 * boegel wonders what a bong is
14:01:06 <basti_> if you dont know then it doesnt matter.
14:01:18 <basti_> http://www.drbongs.com/acatalog/glass_bong_bong-42.jpg
14:01:20 <boegel> I think it does :)
14:01:36 <boegel> ieeeeeeeeeeuw
14:01:57 <basti_> I'm in germany.
14:02:02 <boegel> that's just nasty :)
14:02:09 <basti_> maybe this explains some things -g-
14:02:30 <boegel> anyway, now I'm off to bed with some very disturbing images in my mind
14:02:33 <basti_> ok.
14:02:41 <boegel> thanks basti_ :|
14:02:42 <boegel> :P
14:02:43 * basti_ .o° ( disturbing? )
14:02:56 <basti_> goodnight anyway.
14:03:04 <boegel> bye
14:04:44 <basti_> int80_h: so what do you say? did you fall asleep too?
14:05:02 <int80_h> was in pragma, missed what you said
14:05:13 <basti_> ah no prob
14:05:15 <int80_h> pph and you scrolled away
14:05:18 <basti_> i mean about that song
14:05:24 <int80_h> thats what I get for being in 10 channels
14:05:29 <basti_> -g-
14:05:32 <int80_h> oh I can't listen to it yet
14:05:32 <basti_> whats pragma about?
14:05:35 <basti_> oic
14:05:42 <int80_h> oh pragma is a social room for techie people
14:05:49 <basti_> i see
14:05:51 <int80_h> like haskell but not haskell oriented
14:06:03 <basti_> i doubt that #haskell is haskell oriented, sometimes.
14:06:03 <int80_h> but no one will bag you for being off topic because there is no topic
14:06:08 <basti_> i see.
14:06:23 <int80_h> everyone here is invited
14:06:33 <int80_h> it's been dead lately but maybe if we get new people
14:06:41 <basti_> well i think I'll invite myself to bed first
14:07:07 <basti_> first, though, "oblivion" by swandive =)
14:08:08 <int80_h> we decided that freenode was the place to be, because we knew it was pretty free of the goober set.
14:08:15 <basti_> goober set?
14:08:20 <int80_h> the kiddiots
14:08:26 <int80_h> the people you find on aol chat
14:08:32 <basti_> i see.
14:08:34 <int80_h> or *gasp* dalnet
14:08:47 <basti_> just didnt know the term
14:08:52 <int80_h> eye r 1337
14:08:52 <jlouis> asl, plzktx
14:08:57 <int80_h> yeah them
14:08:59 <basti_> i mean, dalnet is a cybersex network now isnt it?
14:09:05 <int80_h> who knows
14:09:23 <basti_> i think i saw not a single channel with a decent name when i was there the last time
14:09:33 <basti_> and they had plenty of channels.
14:09:35 <int80_h> #hottub
14:09:44 <basti_> oh if it would be only that.
14:09:47 <int80_h> heh
14:09:51 <gzl> how does one change the default directory for C-x f in emacs?
14:10:22 <int80_h> well my beloved #pragma is devoid of activity these days
14:10:28 <gzl> it always starts in ~/.elisp/, which i -never- want to open stuff in. :)
14:10:33 <int80_h> I would be very happy if all of you decided to go there and be social
14:10:56 <basti_> int80_h: i think i could have a look or two to save this chan from my incoherent stuff :P
14:11:06 <int80_h> heh :)
14:11:10 <basti_> #lad is pretty incoherent anyways.
14:11:22 <basti_> or lets say, more tolerant
14:11:28 <basti_> different kind of people there
14:11:43 <int80_h> well different rooms have a different domain
14:12:05 <int80_h> we figured that techie types would start interesting conversations that other techies would find interesting
14:12:15 <basti_> yup... #lad is linux audio development... the people there are more the artsy guys than the intellectual type here
14:12:20 <int80_h> people doing projects...dreaming...
14:12:53 <basti_> aw i'm dreaming all the time :P
14:13:03 <int80_h> and if it gets too specific a group of us would head over to #c or #lisp or whereever appropriate for the problem at hand.
14:13:10 <Cale> gzl: hmm
14:13:11 * basti_ nods
14:13:41 <int80_h> there have only been a few kick/bans
14:13:59 <int80_h> obnoxious weenies from sdf trying to ruin our fun
14:14:00 <Cale> gzl: I think it chooses the pwd as the default path for C-x f
14:14:27 <Cale> gzl: perhaps you're running it using a script that changes the working directory to ~/.elisp/ ?
14:14:41 <basti_> well i think the only grounds for kick/ban is of technical nature anyway... as in "he/she/it renders the channel unusuable"
14:15:08 <gzl> not sure
14:15:15 <gzl> anyway, i set insert-default-directory to nil
14:15:38 <gzl> but that's not quite right either. hm
14:15:56 <int80_h> one thing
14:16:03 <int80_h> people are protective of the channel
14:16:11 <int80_h> so mention I sent you and they should calm down.
14:16:14 <gzl> I'll ask in #eamcs
14:16:16 <gzl> * emacs
14:16:39 * basti_ shrugs
14:16:45 <basti_> i get kicked rarely
14:17:04 <basti_> i'm not afraid of kicks too.
14:17:08 <int80_h> some like to play "20 questions" because of past experiences
14:17:16 <int80_h> yeah but I don't want you to be kicked :)
14:17:26 <basti_> "20 questions"? like 20 technical questions?
14:17:37 <int80_h> no like "who are you, who sent you, why are you here?
14:17:39 <basti_> oh
14:17:53 <basti_> well i will see.
14:17:54 <int80_h> because some people from sdf used to come in and try to make things unpleasant
14:18:06 <basti_> whats sdf?
14:18:12 <int80_h> it's a free shell
14:18:17 <basti_> ah
14:18:22 <int80_h> sdf.lonestar.org
14:18:24 <basti_> script kiddies.
14:18:27 <int80_h> they have hugs :)
14:18:34 <int80_h> yeah script kiddies indeed
14:18:43 <basti_> we shall see.
14:18:46 <int80_h> sdf gets it's share of script kiddies
14:18:51 <basti_> I'll have to sleep now though.
14:19:00 <int80_h> which is why a group of us retreated to freenode
14:19:03 <basti_> tomorrow will be a hard day. not to mention the day after tomorrow.
14:19:07 <basti_> and the day after that.
14:19:11 * basti_ cringes
14:19:31 <basti_> and then I'll be de facto offline for 2 weeks or something.
14:20:11 <basti_> so see ya. tomorrow probably.
14:20:58 <Itkovian> bach
14:21:14 <basti_> yes, bach. bach is great.
14:21:22 <jlouis> bach is very great
14:22:38 <gzl> Cale: yeah, I can just put (cd "dir") at the end of my ~/.emacs. :)
14:37:36 * tmoertel thinks there is a space leak in WASH/CGI's file-upload handling code
14:39:35 <stepcut> sweet!
14:40:11 <tmoertel> yeah, quadratic space consumption w.r.t. the size of the input file
14:40:18 <stepcut> heh
14:40:53 <Cale> ouch
14:41:29 <tmoertel> example: 4 MB in -> 237 MB run-time memory footprint
14:43:50 <tmoertel> SyntaxNinja: howdy!  have you ever used WASH for file uploads ?
14:44:05 <SyntaxNinja> hm. I thought there was a way for ghc to magically handle cyclic imports. --make doesnt' seem to do it, though.
14:44:10 <SyntaxNinja> tmoertel: nope. sorry.
14:44:28 <musasabi> SyntaxNinja: no, you have to use hs-boot files.
14:44:43 <musasabi> This changed from 6.2, where one used hi-boot.
14:44:51 <SyntaxNinja> OK. it must have been hmake that handled this
14:55:44 <SyntaxNinja> eww. recursive modules is ugly
15:07:28 <jhunZoa> how does trace work exactly?
15:12:34 <xerox> 'night
15:13:39 <jhunZoa> wow im becomming god in this helium crap
15:15:49 <monochrom> yeah you get that feeling when you inhale helium.
15:16:19 <Pseudonym> If you're the god of helium, could you kindly explain how to get practical fusion power, please?
15:17:57 <jhunZoa> fusion power
15:18:02 <jhunZoa> well
15:18:19 <jhunZoa> thats just a matter of getting the right atoms together in the right circumstances~
15:44:33 <Excedrin> anyone bored enough to help me with some math?
15:46:05 <jlouis> what kinda math?
15:55:11 <Excedrin> jlouis: I have a few simple questions about http://www.glicko.com/glicko.doc/glicko.html
15:55:31 <Excedrin> since it's not really related to haskell, mind if I message you?
15:56:12 <jlouis> Excedrin: my brain is not optimally working right now. I can probably take a look in 12 hours or something (after sleep)
15:56:59 <Excedrin> ok, thanks
16:04:25 <monochrom> Too much glicko makes you sicko
16:04:29 <jhunZoa> ehm how can i replace every element in a list with the char - ?
16:05:00 <monochrom> f s = replicate (length s) '-'
16:05:20 <monochrom> don't replace. just create.
16:05:51 <jhunZoa> mmm u have some brains ye~
16:06:42 <jlouis> jhunZoa: huh?
16:06:51 <monochrom> If you want to work over infinite lists, g s = map (const '-') s
16:06:53 <jlouis> replace is a nono in Haskell
16:07:03 <jhunZoa> oh ok
16:07:43 <monochrom> You see you can free up your mind so much (and even reach my level of enlightenment) by freeing yourself from the slavery of replacement.
16:07:52 <jlouis> it is called persistence. You can always refer to an ``older'' version of a string and get it. When you become accumstomed to it, it is a nice thing
16:08:02 <monochrom> Say after me.  Don't replace; just create.
16:08:24 <jlouis> now in unison: Don't replace; just create.
16:08:36 <jhunZoa> ok
16:08:44 <jhunZoa> i will create it~
16:34:40 <gzl> so what are the differences between hxml and haxml?
16:37:40 <lisppaste2> metaperl pasted "how can Either, which only returns a or b be used to return a 1,2,3 or 4 tuple?" at http://paste.lisp.org/display/6080
16:38:09 <funkmando> ello
16:38:16 <gzl> I think you can write functions that work on arbitrary tuples using Generic Haskell
16:38:19 <funkmando> is there a way to delete elements of a list?
16:38:21 <gzl> I've actually wanted to play with that a little
16:38:22 <metaperl6> hi funkmando
16:38:24 <Itkovian> anybody any idea why I haven't got Graphics.UI.Gtk.Glade? Isn't that supposed to be in gtk2hs-0.9.7? I'm on a gentoo box, and I've set -gnome in my use flags ...
16:38:28 <metaperl6> gzl I'm supposed to use Either
16:38:35 <gzl> funkmando: you can create a new list that contains a subset of elements of the original one
16:38:47 <funkmando> that'd do
16:38:55 <gzl> e.g. filter (>0) [-3,1,-2,0,-8,14]
16:39:26 <metaperl6> actually this is a bad time for me to task this question. I am leaving for home now. If you have an answer to my post, please email bauhaus@metaperl.com (how demanding of me)... otherwise I will ask again in about 30-45 mins when I get home
16:39:37 <funkmando> the problem is to remove all elements of two lists whose corresponding entries are equal
16:40:01 <funkmando> so [x,y,p,q] and [x,y,d,g] would collapse to [p,q] and [d,g]
16:40:21 <Itkovian> funkmando, sounds like a tetris-wise problem to me
16:40:35 <funkmando> tetris-wise?
16:41:10 <Itkovian> yeah, you 'drop' the elements to the bottom, and drop them if they're equal, otherwise you put them in a set of new lists
16:41:12 <gzl> funkmando: maybe look at modifying something like zipWith
16:41:20 <gzl> it does something similar
16:41:42 <Itkovian> take a look at http://www.elis.ugent.be/~ageorges/align.hs ... I think you might reuse some of the ideas used there
16:42:12 * Itkovian thinks shapr may have had a point about that TMR contrib thingie :-)
16:42:52 <funkmando> what function does what may interest me?
16:43:07 <gzl> zipWith
16:43:09 <Itkovian> funkmando, what you want is taking heads of all the lists and if they're equal drop them, otherwise push them on anew set of lists
16:43:16 <gzl> yeah.
16:43:19 <Itkovian> funkmando, the align function
16:43:34 <Spark> mm talking heads
16:43:49 <Itkovian> you zipWith (:) the set of heads with the accumulated lists
16:44:34 <Itkovian> it shouldn't be too hard.
16:44:51 * Itkovian sees a solution coming together.
16:45:14 * funkmando doesn't.
16:45:15 <funkmando> lol
16:45:20 <Itkovian> let me try something
16:49:49 <Itkovian> is there something in the Prelude or Data.List that yields (head cs, tail cs) ?
16:50:16 <gzl> you mean a function [a] -> (a, [a]) ? dunno, but it would be easy to define one.
16:52:36 <Itkovian> yeah yeah, sure it would
16:52:46 <Itkovian> funkmando, I think I may have a solution
16:52:53 <funkmando> kewl
16:53:00 <funkmando> i mean it shouldn't be so hard
16:53:06 <Itkovian> *Main> dropWise [[1,2,3,4,3,6], [1,2,5,6,3,7]]
16:53:06 <Itkovian> [[3,4,6],[5,6,7]]
16:53:12 <Itkovian> is that correct?
16:53:24 <Heffalump> Itkovian: splitAt 1
16:53:29 <Itkovian> now ... is this a homework assigment?
16:53:29 <funkmando> yes
16:53:34 <funkmando> yes it is
16:53:37 <Itkovian> ok.
16:53:39 <funkmando> im sad to say
16:53:39 <funkmando> lol
16:53:42 <Itkovian> when is it due?
16:53:44 <funkmando> but this is only a small part of it
16:53:52 <funkmando> sunday night
16:54:18 <Itkovian> ok. I'm on IRC all day tomorrow ... if you haven't found it by then give me a sign
16:54:27 <funkmando> ok
16:54:30 <Itkovian> with the link I gave you, you should be able to do it.
16:54:31 <funkmando> i'll have a think
16:54:32 <funkmando> lol
16:54:58 <Itkovian> I'll get u started:
16:54:59 <Itkovian> dropWise :: Eq a => [[a]] -> [[a]]
16:54:59 <Itkovian> dropWise ls = dropWise' ls (replicate (length ls) [])
16:55:08 <Itkovian> dropWise' :: Eq a => [[a]] -> [[a]] -> [[a]]
16:55:27 <Itkovian> the link, and what I said above should get you there.
16:55:35 <funkmando> hmm i need to be able to plug those lists into another function aswell
16:55:42 <Itkovian> sure.
16:56:00 <funkmando> and why do we need a list of lists?
16:56:05 <Itkovian> they're general types, so you shouldn't have any problem
16:56:20 <Itkovian> funkmando, in your example, you gave two lists, but what if you have three, four, ...
16:56:32 <Itkovian> this is usable for any number of lists
16:56:37 <funkmando> hmm
16:56:38 <funkmando> ok
16:56:51 <funkmando> kiss
16:56:59 <Itkovian> eek!
16:57:02 <funkmando> lol
16:57:10 <Itkovian> unless yr female
16:57:16 <funkmando> kiss = keep it simple stupid!
16:57:18 <funkmando> haha
16:57:22 <Itkovian> ic.
16:57:28 <funkmando> but, well, if you're offering ;)
16:57:30 <Itkovian> you got me on the wrong track there
16:57:59 <Itkovian> funkmando, if you can make yr stuff more general, it's often more reusable ...
16:58:02 <funkmando> yeah
16:58:13 * Itkovian should get to bed.
16:58:19 * funkmando should too.
16:58:26 <funkmando> it's 1 am
16:58:31 <funkmando> and i have a 9 am lecture
16:58:32 <Itkovian> no it's 2 am
16:58:35 <Itkovian> :-)
16:58:37 <funkmando> :P
16:58:42 <Itkovian> and I have to get up at 6.30
16:58:46 <funkmando> ooo
16:58:47 <Itkovian> hmm ...
16:58:48 <funkmando> nice
16:59:54 <Itkovian> funkmando, your problem seems like a nice exam question though.
17:00:00 <Itkovian> I'll keep it in mind.
17:00:15 <funkmando> haha
17:00:33 <funkmando> it's definitely something worth knowing how to do i'd imagine
17:00:35 <Itkovian> some poor sucker is gonna sweat over it
17:00:43 <Itkovian> lol
17:00:44 <metaperl> I just got home - does anyone have the URL to my  paste in the log for this channel
17:01:05 * metaperl heads to paste.lisp.org
17:01:12 <Itkovian> this? http://paste.lisp.org/display/6080
17:01:17 <metaperl> bingO: http://paste.lisp.org/display/6080
17:01:22 <metaperl> Itkovian, yes
17:01:32 <metaperl> now , does anyone have a solution?
17:01:42 <Itkovian> hah
17:02:04 <funkmando> @type zipWith
17:02:07 <Itkovian> the question being the returning of (1,2,3)?
17:02:09 <lambdabot> zipWith :: forall c b a. (a -> b -> c) -> [a] -> [b] -> [c]
17:02:22 <metaperl> I dont see how Either can do the job...
17:02:29 <metaperl> Either only returns Left a or Right b
17:02:36 <metaperl> and we must return a 1,2,3 or 4 tuple
17:02:39 <metaperl> how is that possible?
17:02:57 <Itkovian> hmmm
17:03:07 <Itkovian> use the stuff somebody pasted this meuning
17:03:14 <Itkovian> erm
17:03:36 <metaperl> CosmisRay posted some stuff but I dont think that is relevant... is it? It is part of my new post
17:03:41 * Itkovian skims through the logs
17:04:02 <metaperl> the code he posted is part of the source I just posted
17:04:15 <Itkovian> dang I fubared my topic
17:04:23 <funkmando> what is foo?
17:04:25 <funkmando> out of curiousity
17:04:28 <funkmando> lol
17:04:54 <funkmando> people always use it in examples
17:05:06 <Itkovian> foo comes from fubar
17:05:08 <Itkovian> foo bar
17:05:24 <Itkovian> fubar = fucked up beyond all/any recognition
17:05:37 <Itkovian> iirc it's a military term originally
17:05:45 <funkmando> i have foobar 2000 mp3 player
17:07:50 <Itkovian> <autrijus>	instance Tup a (a, b) where tup1 (x, _) = x	13:40:41
17:07:50 <Itkovian> <autrijus>	instance Tup a (a, b, c) where tup1 (x, _, _) = x	13:40:41
17:07:50 <Itkovian> <autrijus>	instance Tup a (a, b, c, d) where tup1 (x, _, _, _) = x
17:07:53 <Itkovian> dang
17:08:07 * Itkovian screwed up again
17:08:10 <Pseudonym> @foldoc foo
17:08:17 <lambdabot> *** "foo" foldoc "The Free On-line Dictionary of Computing (27 SEP 03)"
17:08:17 <lambdabot> foo
17:08:17 <lambdabot>      
17:08:17 <lambdabot>         <jargon> /foo/ A sample name for absolutely anything,
17:08:18 <lambdabot>         especially programs and files (especially {scratch files}).
17:08:20 <lambdabot>         First on the standard list of {metasyntactic variables} used
17:08:22 <lambdabot>         in {syntax} examples.  See also {bar}, {baz}, {qux}, {quux},
17:08:24 <lambdabot>         {corge}, {grault}, {garply}, {waldo}, {fred}, {plugh},
17:08:26 <lambdabot> [69 @more lines]
17:08:32 <Pseudonym> 69 more lines?!
17:08:36 <Pseudonym> A lot to say about foo, clearly.
17:09:43 <Itkovian> omg
17:10:12 <funkmando> haha
17:10:52 <metaperl> oh, we havent even got to instances of types yet
17:11:00 <funkmando> how do i ask for more lines?
17:11:02 <funkmando> im pm'ing him
17:11:50 <Igloo> With @more
17:12:17 <funkmando> said he didn't understand, lol
17:20:16 <Igloo> Does anyone know where Marvin's latest gtk2hs debs are?
17:21:11 * metaperl is afk
17:31:34 <duncan_> Igloo: no idea
17:32:20 <duncan_> Igloo: if you find out please tell me, I'll add a note to the upcomming 0.9.7.1 windows release that there are debs for 0.9.7
18:00:07 * metaperl is back and badder than ever
18:00:15 <metaperl> :)
18:25:02 <araujo> mm
18:25:04 <araujo> the link:
18:25:07 <araujo> What the hell are Monads? by Noel Winstanley
18:25:19 <araujo> in http://www.haskell.org/bookshelf/ is broke
18:25:30 <araujo> broken*
18:29:48 <Darius> There shoud be a webmaster email address on the page that you can email.
18:40:41 <gzl> heh good title
18:59:11 <Lemmih> Good morning, #Haskell.
19:02:53 <dons> moin
19:06:06 <Igloo> Does anyone know if hunit comes with ghc 6.4 prereleases?
19:06:40 <Lemmih> It does.
19:07:23 <Igloo> Ta
19:22:37 <aFlag> what editor do you use on windows?
19:24:22 <Lemmih> aFlag: emacs.
19:34:12 <shapr> good morning #haskell
19:34:21 <dons> heya shapr
19:37:43 <Spark> i love the smell of haskell in the morning
19:38:59 <shapr> it smell like...
19:39:11 <shapr> victory!
19:39:33 <Pseudonym> It's the smell of burning imperative languages.
19:40:46 <Pseudonym> shapr: Just doing a last proofread of my article.
19:41:18 <Pseudonym> I need to know when you want next month's, so I can put a cutoff date for responses in this one.
19:42:55 <shapr> um
19:43:15 <Pseudonym> :-)
19:43:15 <shapr> not sure yet
19:43:23 <Pseudonym> I'll put the 22nd as the cutoff for responses in here.
19:43:30 <shapr> ok
19:43:35 <Pseudonym> I'm thinking TMR will be released around the 1st.
19:43:41 <Pseudonym> That's the general idea, right?
19:46:45 <shapr> that's the plan
19:48:19 <shapr> things seems to be going well, but there may be unexpected delays
19:48:34 <Pseudonym> Which, naturally, you're not expecting.
19:48:52 <Pseudonym> Are you waiting on anything specific?
19:49:25 <Pseudonym> If it's "anyone" rather than "anything", you don't need to name names. :-)
19:49:46 <shapr> mostly me
19:50:32 <shapr> Most of the articles are ready to generate pdf format and make them available for download.
19:54:12 <Darius> but?
19:59:41 <jadrian> how do you call the mutually recursive structure that is just like  Red Black trees in the sense that you've got two colors
19:59:51 <jadrian> but doesn't satisfy the other properties?
20:00:09 <aj> an annotated tree?
20:00:26 <jadrian> maybe, never heard of it, let me google that
20:00:54 <aj> you've just got a tree where each node has a colour, no other properties?
20:01:10 <jadrian> it's not just having a color
20:01:17 <jadrian> the data definition would be
20:01:58 <jadrian> data AB a = AB a [BA a]
20:02:07 <jadrian> data BA a = BA a [AB a]
20:02:31 <aj> i wouldn't've thought that had a name?
20:02:41 <jadrian> in fact it can be more general
20:02:50 <jadrian> data AB a b = AB a [BA b]
20:03:05 <jadrian> opss
20:03:10 <jadrian> data AB a b = AB a [BA b a]
20:03:23 <jadrian> data BA a b = BA a [AB b a]
20:03:42 <jadrian> this is the structure of a Red Black tree
20:03:56 <jadrian> but I don't need it to satisfy the Red Black tree properties
20:04:31 <aj> a pink-grey tree? :)
20:04:38 <jadrian> eh :)
20:04:50 <gzl> so you just need that every node is either red or black but nothing else? no self-balancing, etc?
20:05:14 <aj> the types alternate somewhat too though
20:05:19 <jadrian> it not just that every node is red or black
20:05:23 <jadrian> exactly
20:05:34 <jadrian> but I think that is the case with red black trees too, no?
20:05:40 <aj> yeah
20:05:43 <gzl> yes
20:05:48 <aj> although your definition still confuses me
20:05:48 <jadrian> so, that's just it
20:05:53 <gzl> the leaves are black, the root is black, and then there's other stuff
20:05:53 <jadrian> why?
20:06:03 <jadrian> exactly, I don't need that
20:06:28 <gzl> i don't know of any name
20:06:39 <jadrian> aj: it's pretty simple, you can have something like a tree with chars and ints in alternate levels
20:07:01 <jadrian> it's just a simple non-linear mutually recursive structure
20:07:10 <gzl> just make up a nam
20:07:11 <gzl> e
20:07:15 <gzl> jadrian tree
20:07:23 <Pseudonym> Red-black trees don't have the constraint that all children of a red tree are black and vice versa, do they?
20:07:30 <Pseudonym> I don't _think_ they do.
20:07:33 <jadrian> Pseudonym: I'm not sure...
20:07:33 <gzl> children of red nodes are black, yes
20:07:43 <Pseudonym> Otherwise there would be no point annotating each node.
20:07:44 <gzl> children of black nodes need not be red
20:07:50 <Pseudonym> Just annotating the root would be sufficient.
20:07:59 <jadrian> yes you're right...
20:08:00 <sh10151> okasaki has a purely functional red black tree in his book
20:08:02 <jadrian> it was a bad example
20:08:07 <gzl> I need to get that okasaki book
20:08:11 <Pseudonym> What's the purpose of the tree?
20:08:18 <Pseudonym> A minimax tree has a similar structure, for example.
20:08:29 <jadrian> I'm not interested in red black trees thought, just that structure I defined
20:08:53 <jadrian> Pseudonym: no purpose at all, just using it to show how some functions I defined work
20:09:31 <Pseudonym> Ah.
20:09:31 <jadrian> I needed a simple  mutually recursive data structure
20:09:34 <Pseudonym> I see.
20:10:29 <jadrian> I actually use the functions on multiterms latter, to implement Martelli unification algorithm
20:10:39 <jadrian> but I wanted to describe them in something simple first
20:10:59 <Pseudonym> Pick a different two colours.
20:11:04 <Pseudonym> Not red and black.
20:11:06 <Pseudonym> :-)
20:11:12 <jadrian> yeap :)
20:11:17 <jadrian> I was going for AB and BA
20:11:32 <Pseudonym> So it's an ABBA tree.
20:11:32 <jadrian> not even going to use colors...
20:11:53 <jadrian> but I thought I'd check if there was a name
20:12:09 <jadrian> if there isn't one, then it's ok for me to use whatever I want
20:12:43 <Pseudonym> I'm certain there's a joke in there somewhere, but I don't know enough ABBA songs to come up with one.
20:12:51 <jadrian> Ah
20:13:17 <jadrian> I just noticed that :)
20:16:00 <Pseudonym> shapr: OK, I think I'm done.  I incorporated your patch, so go ahead and pull.
20:17:42 <Pseudonym> shapr: Oh, while I think of it... Have you heard that there's a serious proposal to name the San Francisco Bay Bridge after Emperor Norton?
20:29:43 * Lemmih is greatly annoyed by the differnces between GHC and GHCi.
20:32:21 <dons> Lemmih: ?
20:32:33 <dons> just the ffi not being 100% there, or .. ?
20:34:13 <Lemmih> dons: Linking to compiled C++ code seems impossible.
20:34:21 <desrt> with ghci?
20:34:42 <Lemmih> Yes. If there's a way to do it, please tell me! (:
20:34:45 <dons> yeah, the ffi in ghci has limitations. but you should be able to do it statically, and run other stuff in ghci
20:34:53 <desrt> inject a slick little layer of C between them
20:35:06 <dons> possibly you can add any C++ libs on the command line to link?
20:35:15 <dons> desrt: yeah, sounds good.
20:35:18 <desrt> heh.  ya.  or a slick little layer of haskell :)
20:35:25 <dons> slick is good.
20:35:28 <Lemmih> Programs compiled with GHC gets linked to crt*.o files which contains a __dso_handle.
20:36:33 <Lemmih> GHCi doesn't. So when I load the file in GHCi it complains about a undefined __dso_handle thingy.
20:36:34 <desrt> ooh.
20:36:47 <desrt> c++ evilness
20:37:03 <Lemmih> Putting 'void * __dso_handle = 0' in a source file makes it work in GHCi but fails with GHC (:
20:37:03 <desrt> i bet your static constructors don't get properly called either
20:37:47 <desrt> i think you could probably fix it by adding __dso_handle to the list of symbols that the RTS exports
20:38:06 <desrt> then they could be dlsym()'d properly which would let the linker see them
20:38:38 <Lemmih> And how do I do that?
20:38:43 <desrt> (since, obviously ghci is a program that was compiled with ghc and therefore contains the symbol itself)
20:38:58 <desrt> there's two things that might work (you may have to do both).  just guessing
20:39:06 <desrt> in Linker.c there is a list of exported symbols
20:39:11 <desrt> and in package.conf.in there's another list
20:39:28 <Lemmih> "i bet your static constructors don't get properly called either" huh?
20:39:48 <desrt> Lemmih; in C++ if you have a data structure that is statically initialised, the constructor code needs to run when the program starts executing
20:39:55 <desrt> this is taken care of by the crt*.o files
20:40:11 <desrt> although, the act of dlopen()ing it call the constructors too
20:40:17 <desrt> *might
20:42:06 <Lemmih> desrt: I need to fix this in a cabal file.
20:42:18 <desrt> Lemmih; that's package.conf.in
20:42:21 <desrt> it has a bunch of -u lines
20:45:27 <Lemmih> Are they affecting GHCi?
20:45:47 <desrt> they affect anything that links against the rts
20:46:38 <dons> yeah. if ghci says it's undefined, but it's part of the rts, just stick it in Linker.c
20:46:45 <Lemmih> Adding "-u __dso_handle" in my own .cabal file didn't help.
20:47:03 <Lemmih> And editing the RTS package is not an option.
20:47:18 <dons> we should export a whole lot more of the rts to ghci than we currently do
20:47:28 <Lemmih> dons: But it's not part of the RTS.
20:47:42 * Lemmih is getting really confused.
20:48:06 <dons> but desrt says that the rts links against something with this sym?
20:48:46 <desrt> Lemmih; the RTS is the part that contains the C world
20:48:52 <dons> other syms, e.g. malloc, are in this list.
20:48:53 <desrt> including the crt files
20:48:59 <desrt> and including malloc
20:49:05 <ozone> oh, you need to compile it with g++ i'm pretty sure
20:49:13 <dons> ah!
20:49:14 <ozone> even if you link against libstdc++ with gcc, i don't think that'll work
20:49:19 <ozone> due to what desrt said
20:49:27 <dons> -optcg++ ?
20:49:30 <Lemmih> I need to compile the RTS with g++?
20:49:38 <ozone> no, you need to link your program with g++
20:49:43 <desrt> ..
20:49:46 <desrt> ghci, dude
20:49:47 <dons> -optlg++ then?
20:49:51 <ozone> oh
20:49:55 <Lemmih> ozone: That's what I'm doing already!
20:50:02 * ozone boggles
20:50:05 <ozone> sorry then
20:50:12 <dons> Lemmih, but you have it working when compiled to native code with ghc?
20:50:24 <desrt> it's actually pretty evil
20:50:26 <Lemmih> dons: Yes.
20:50:36 <desrt> because if you export those symbols from the RTS then they end up being exported even in compiled code
20:50:42 <desrt> (which has its own copy)
20:50:49 <dons> hmm. evil, yes.
20:51:25 <dons> yeah, so on working platforms we just export rts syms. but on some we have to populate ghci's sym tab with a bunch of C syms too.
20:51:53 <dons> still, i'm a bit scared.
20:51:59 <desrt> arf.  i'm supposed to be trying to maintain the pretense that i have no idea what's going on :)
20:52:35 <dons> I think this is actually a good question for glasgow-haskell-users@
20:52:45 <dons> "Using C++ libs from GHCi"
20:52:48 <desrt> uhh.. <desrt> karma is punishing you for your heathenous use of c++
20:55:09 * Lemmih feels lost.
20:55:28 <Lemmih> I still haven't understood the role of the RTS in all of this.
20:56:02 <Pseudonym> @karma- desrt
20:56:03 <lambdabot> desrt's karma has been decremented.
20:56:15 <desrt> ?!
20:56:18 <Pseudonym> Oh, I meant dons.
20:56:21 <Pseudonym> @karma+ desrt
20:56:21 <lambdabot> desrt's karma has been incremented.
20:56:26 <Pseudonym> Apologies.
20:56:31 <desrt> np :)
20:56:35 <Pseudonym> Uhm...
20:56:41 <Pseudonym> Who was using C++ again?
20:56:41 <dons> GHCi uses a bytecode interpreter, that is, it is a completely different backend to ghc.
20:56:47 <dons> and it doesn't implement the full FFI spec
20:56:49 <desrt> Lemmih
20:56:55 <Pseudonym> @karma- Lemmih
20:56:56 <lambdabot> Lemmih's karma has been decremented.
20:56:58 <Pseudonym> Cool.
20:57:00 <desrt> excellent
20:57:10 <dons> now, why is Pseudonym de-karma-ising me??
20:57:27 <Pseudonym> Though if GHC did support C++ code, then you could import Boost, which would give Oleg a whole new typesystem to play in.
20:57:36 <Pseudonym> dons: My mistake.  Here, have a point on me.
20:57:40 <Pseudonym> @karma+ dons
20:57:41 <lambdabot> dons's karma has been incremented.
20:57:46 <dons> thank you.
20:57:51 <Pseudonym> @karma dons
20:57:51 <lambdabot> dons has a karma of 1
20:57:57 <Lemmih> dons: Does that matter when GHCi isn't compiling anything?
20:58:06 <dons> ?
20:58:22 <dons> you mean, not to bytecode?
20:58:29 <Lemmih> Yes.
20:58:32 <dons> just loading static .o objs?
20:58:52 <Lemmih> I'm using cabal which creates a .a package.
20:59:04 <dons> and you just dyn link it in ghci.
20:59:12 <ozone> @karma+ Pseudonym
20:59:13 <lambdabot> Pseudonym's karma has been incremented.
20:59:16 <ozone> woot
20:59:57 <Lemmih> @karma Pseudonym
20:59:58 <lambdabot> Pseudonym has a karma of 1
21:00:01 <Lemmih> @karma lambdabot
21:00:02 <lambdabot> lambdabot has a karma of 0
21:00:06 <Lemmih> @karma Lemmih
21:00:06 <lambdabot> You have a karma of -1
21:00:20 <ozone> is karma an Int or Integer?
21:00:21 <dons> Lemmih: I'm not sure how ghci deals with this, but I still think you should either add the symbol to Linker.c explicitly, or ask SimonM and WolfgangT, the overlords of undefined symbols
21:00:26 <ozone> that's the real question
21:00:42 <dons> ozone: so it goes negative eventually on overflow..
21:01:36 <heatsink_> @karma heatsink
21:01:37 <lambdabot> heatsink has a karma of 0
21:01:37 <desrt> :)
21:01:41 <heatsink_> @karma+ heatsink
21:01:41 <lambdabot> heatsink's karma has been incremented.
21:01:47 <heatsink_> @karma- heatsink
21:01:48 <lambdabot> heatsink's karma has been decremented.
21:01:48 <desrt> only losers self-karma
21:01:50 <desrt> :P
21:02:01 <Gahhh> @karma+ desrt
21:02:01 <heatsink_> Just testing
21:02:01 <lambdabot> desrt's karma has been incremented.
21:02:33 <ozone> only losers misspell 'desert' :}
21:02:43 <desrt> heh.
21:03:23 <Gahhh> it's dessert, not desert ;)
21:03:38 <ozone> mmmmmm, cupcakes
21:03:48 <Pseudonym> It's short for desRTS.
21:03:59 <ozone> @karma- Pseudonym
21:04:00 <lambdabot> Pseudonym's karma has been decremented.
21:04:16 <desrt> Pseudonym; hey.  i like that :)
21:04:18 <ozone> that, sir, was horrible :)
21:04:19 <Pseudonym> Hey!
21:04:37 <ozone> you can increment your own karma if you disagree!
21:04:38 <Gahhh> question: how would I benefit from knowing denotational semantics ? I am not a PL designer or anything.
21:04:49 <desrt> @karma+ Pseudonym
21:04:49 <lambdabot> Pseudonym's karma has been incremented.
21:04:54 <Pseudonym> Woohoo.
21:04:57 <desrt> hah.
21:05:02 <Pseudonym> This is like a Wikipedia revert war.
21:05:07 <desrt> hahah
21:05:12 <heatsink> :)
21:05:23 <dons> Gahhh: you'd be able to read more PL papers :}
21:05:29 <Darius> Gahhh: Well what are you?
21:06:03 <Gahhh> Darius, I'm a regular software engineer. serving my masters in C++.
21:06:41 * Lemmih gets a smirnoff, starts ut2003 and forgets all of his GHCi problems.
21:06:49 <Darius> Okay, so another question: How does knowing Haskell (or at least hanging around in #haskell) benefit you?
21:07:23 <dons> you get a better understanding of PL fundamentals
21:07:33 <heatsink> What is PL?
21:07:38 <heatsink> proglang?
21:07:41 <dons> and see all the nasty hacks floating around..
21:08:10 <Gahhh> Knowing Haskell has not helped me greatly while using imperative languages yet.
21:08:27 <dons> I think I write C in a cleaner way these days.
21:08:33 <dons> more like monadic haskell..
21:08:46 <heatsink> Knowing how Parsec worked helped me write an imperative parser in python.
21:09:24 <Gahhh> Yeah those are good points.
21:09:50 <Gahhh> but I'm not sure if denotational semantics is as useful for day to day stuff.
21:09:58 <wagle> is there a way to automatically uninstall (old version of) ghc? :: Boolean
21:10:08 <dons> rm -rf *
21:10:50 <Cale> apt-get remove ghc5
21:10:53 <wagle> you first
21:11:15 <desrt> emerge unmerge ghc
21:11:18 <Darius> Anyways, there's not really much to denotational semantics.  It's basically the simply typed lambda calculus and some math junk to make sure this stuff actually means something.  Denotational semantics are typically pretty much the same as writing an interpreter in a mildly applied lambda calculus.
21:11:20 <dons> it only installs in bin/ and lib/ghc-X-Y/ , which should be pretty easy to kill by hand.
21:11:23 <Gahhh> some makefiles include the uninstall target. I dont know about ghc.
21:11:32 <dons> nah. not ghc.
21:11:58 <wagle> i finally got fink to work, and now what to remove the hand installed ghc from /usr/local
21:12:11 <Darius> In some cases, e.g. semantics for concurrent languages being formal can be fairly useful but in most cases you get pretty much the same thing as writing an interpreter in Haskell.
21:12:31 <dons> wagle: /usr/local/lib/ghc* /usr/bin/ghc* ..
21:13:08 <dons> + bin/hasktags,hp2ps,hsc2hs,stat2resid
21:13:32 <wagle> dons not that easy, actually, but thats a ghood last ditch approximation
21:13:45 <Gahhh> Darius, thanks
21:13:45 <wagle> ok, thats getting a lot more of it
21:14:14 <dons> oh, the above should be /usr/local/bin/ghc* of course.
21:14:20 <Pseudonym> Denotational semantics isn't _quite_ that simple.
21:14:23 <wagle> could get reverse the arrows on the install procedure..  8)
21:14:54 <wagle> could _just_ reverse the arrows on the install procedure..  8)
21:15:07 <Pseudonym> But I reckon if you, say, read "The Implementation of Functional Programming Languages", you'd get all of denotational semantics that you'd find interesting.
21:15:14 <Pseudonym> And you'd be reading an interesting book, too.
21:15:39 <wagle> obselete?
21:16:06 <wagle> odonnell claimed that book was obselete way back in 1988 or so
21:16:33 <Pseudonym> That's true if your purpose is to implement a FPL.
21:16:33 <dons> hmm. I don't reckon so. there's plenty of useful stuff there.
21:16:46 <Gahhh> Pseudonym, is DS not useful for imperative languages ?
21:16:48 <Pseudonym> It'd be like reading the Dragon Book if you wanted to write a compiler.
21:17:01 <dons> yep. ghc is a long way ahead of IFPL, for example
21:17:01 <wagle> stgm was the hot new rage at that point
21:17:04 <Pseudonym> Gahhh: Yes, it is, but unfortunately, the "big" imperative languages don't use it.
21:17:06 <Darius> Gahhh: DS applies to any type of language (or rather can be applied)
21:17:17 <Pseudonym> The Dragon Book is 20 years old.
21:17:24 <dons> stgm is still the rage, isn't it?
21:17:28 <Pseudonym> The state of the art has moved WAY on.
21:17:34 <Pseudonym> But it's still a good book.
21:17:38 <gzl> i've only really read stuff with operational semantics
21:17:46 <gzl> don't you need a lot of domain theory to read the denotational stuff?
21:17:49 * Gahhh has the dragon book on his dinner table atm
21:17:58 <gzl> dragon book?
21:17:59 <Pseudonym> It's been argued that denotational semantics is obsolete, too.
21:18:01 <Darius> gzl: Have you read stuff with big-step op semantics?
21:18:04 <Pseudonym> Replaced by categorical semantics.
21:18:06 <gzl> Darius: some
21:18:11 <gzl> Pseudonym: yeah
21:18:19 <wagle> where do you go for categorical semantics?
21:18:27 <Darius> gzl: Big-step operational semantics are equivalent to denotational semantics.
21:18:33 <gzl> huh
21:18:33 <gzl> ok
21:19:00 <wagle> ooo.. moggi hisself: http://www.disi.unige.it/research/Categorical_semantics/
21:19:08 <Darius> wagle: You stick "categorical semantics of foobar" into Google.
21:19:14 <Pseudonym> Moggi's stuff is mostly impenetrable, though.
21:19:19 <wagle> hahah
21:19:24 <gzl> actually, I sort of see how big step is equivalent to denotational
21:19:34 <Darius> Though I've become partial to the fibrational approach.
21:19:34 <dons> Pseudonym: this is very true
21:19:51 <wagle> Darius: google obeys sturgeons law
21:20:11 <Darius> gzl: You can read it almost as pattern matching definitions.
21:20:18 <Pseudonym> Moggi takes leaps and bounds, and leaves you thinking that you're very dumb.
21:20:21 <wagle> (i was more asking for recommendations)
21:20:46 <Gahhh> I have a coworker that does that
21:20:47 <Pseudonym> Which _could_ mean one of three things.
21:20:49 <Darius> wagle: But Google put's most of that 90% after a good chunk of the 10%
21:20:54 <Pseudonym> 1. You really are dumb.
21:20:57 <Pseudonym> 2. He's a bad writer.
21:21:03 <Pseudonym> 3. He's a con artist.
21:21:05 <gzl> uh...2!
21:21:09 <Pseudonym> Yeah, I think 2.
21:21:18 <gzl> :)
21:21:23 <Gahhh> 4. You don't meet the prerequisites and he doesn't know/care.
21:21:36 <Pseudonym> Which has 2 as a necessary precondition.
21:21:37 <gzl> I know people who know the prerequisites and still find his stuff annoying to read.
21:22:02 <Gahhh> heh, *that* takes talent.
21:22:08 <gzl> they -can- read it
21:22:13 <gzl> it's just not the easiest thing
21:22:33 <Pseudonym> For more on this topic, read my TMR article!
21:22:46 <Gahhh> is TMR out ?
21:22:47 <gzl> TMR?
21:22:52 <Pseudonym> Nope, not yet.
21:22:58 <wagle> the medieval review?
21:23:03 <gzl> I have some articles by Wadler I've been wanting to read
21:23:10 <Gahhh> The Monad Reader
21:23:10 <Pseudonym> Wadler's papers are great
21:23:11 <monochrom> The Moggi Rivals
21:23:37 <gzl> yeah I have "Monads for FP" and "Imperative FP"
21:23:54 * Darius heartily agrees with Pseudonym.
21:25:07 <Darius> gzl: Simply read everything by Wadler.
21:25:14 <Gahhh> heh
21:25:23 <wagle> who's pseudonym the psuedonym for?
21:25:25 <gzl> the issue is time not interest :)
21:25:41 <gzl> I've also been meaning to read the stuff on polymorphism in TAPL and haven't had time for that either
21:25:43 <Pseudonym> wagle: I didn't understand that.
21:26:25 <wagle> mmm..  ajb..  must be...  andrew bromage?
21:26:35 <Pseudonym> Oooh, damn, I've been found out.
21:26:37 <Pseudonym> @karma+ wagle
21:26:37 <wagle> yesss
21:26:38 <lambdabot> wagle's karma has been incremented.
21:26:39 <Darius> wagle: /whois Pseudonym
21:27:07 * Gahhh sells your info to ChoicePoint, who in turn sells it to criminals.
21:28:31 <KrispyKringle> not sells. lets go for free due to incompetence.
21:28:46 <gzl> Darius: i've already had to read some papers on stuff like haxml and now WASH, so not too much time for extra stuff right now. but i'll get to it eventually
21:29:33 <wagle> (was trying to find article on http://www.haskell.org/hawiki/TheMonadReader)
21:30:15 <Pseudonym> Well, I'm glad someone is making some money out of me.  Deity knows I'm not.
21:31:38 <gzl> is it literally supposed to focus on monads, or is that just the name?
21:31:49 <Darius> That's just the name.
21:32:00 <Darius> A pun on Control.Monad.Reader presumably.
21:32:18 <gzl> ok. good.
21:35:12 <wagle> i need a good monad remover to apply to whoever invented pop-under ads
21:35:45 <gzl> i think you mean "gonad"
21:35:54 <desrt> he he he
21:36:12 <wilx`> :))
21:42:53 * Darius thinks he'll go push carbon around.
21:47:44 <Pseudonym> Carbon?
21:52:11 <wagle> hd bon
21:52:30 <Pseudonym> Carbon is like silicon, only lighter, right?
21:52:49 <wagle> head bone?  (which is connected to the ... neck bone)
21:53:22 <wagle> yeah, i think silicon is directly under in the periodic table..
21:53:44 <wagle> hence all the science finction about silicon life
21:54:33 <wagle> (hmm..  interesting slip?  finction == fiction + function?)
21:55:17 <wagle> (must be late)
21:55:21 <shapr> does being under it in the periodic table lead to catenation?
21:57:12 * desrt gets shapr a drink
21:57:23 <shapr> sake please, at least a liter...
21:57:29 <Pseudonym> Nothing with carbon.
21:57:34 <desrt> a litre of saké?  ow.
21:58:43 <heatsink> Magnesium hydroxide contains no carbon and is non-toxic.
21:59:14 <Pseudonym> So is DHMO.
22:00:22 <heatsink> There is no such thing as dihydrogen monoxide.  It's hydrogen oxide.
22:00:54 <desrt> there's no such thing as water.  only sake.
22:00:59 <shapr> mmm
22:06:26 <Gahhh> do { d<-getContents; putStr d } does a unix to dos conversion (in windows). How can I prevent that ?
22:08:59 <Lemmih> Unix to dos conversion?
22:09:14 <Gahhh> lf's become crlf's
22:10:43 <Lemmih> Wouldn't it be more correct to say that it doesn't do a dos to unix conversion?
22:11:01 <monochrom> http://www.haskell.org/ghc/docs/latest/html/libraries/base/System.IO.html#21
22:11:32 <Gahhh> ah, that looks useful
22:24:06 <Gahhh> ok, that works. but when I try to do "hSetBinaryMode hdl True", where hdl is a handle from a socket, it fails with "bad file descriptor".
22:30:16 <heatsink> i don't think you can set sockets binary or text.
22:30:43 <heatsink> You can catch the exception if you want to.
22:33:48 <Gahhh> oh, apparently I didn't need to. I forgot setting stdout to binary on the other end. works now. thx.
22:35:34 <Pseudonym> Time for me to go home.
22:35:35 <Pseudonym> Nytol!
23:26:55 * boegel yawns
23:27:18 <Lemmih> Morning, boegel.
23:27:33 <boegel> hey Lemmih
23:30:34 <luqui> how can I split a string on whitespace?
23:30:41 <luqui> is there a library routine to do this?
23:30:43 <Lemmih> luqui: words
23:30:59 <luqui> beautiful
23:31:02 <luqui> thanks
23:34:50 * heatsink wants a "characters" library routine.
23:35:44 <luqui> hey, I can write that!
23:35:53 <luqui> :-)
23:36:00 <heatsink> :)
23:38:27 <luqui> okay, here's another question
23:38:51 <luqui> I have a list, say, [1,2,3].  I want [Val (VStr 1), Val (VStr 2), Val (VStr 3)]
23:39:02 <luqui> I can map twice, but can I do this in one map?
23:39:33 <heatsink> You need to make a function that does (Val (Vstr it))
23:39:43 <heatsink> Do you know how to do that?
23:39:46 <luqui> yeah
23:39:51 <luqui> i'll just map twice
23:40:10 <luqui> I was wondering whether you could "nested curry" if that makes sense
23:40:12 <heatsink> You can map once if you make the function I am describing.
23:40:15 <luqui> yep
23:40:22 <luqui> oh... I could use where!
23:40:29 <luqui> there we go, now I don't mind so much
23:40:51 <heatsink> 'where' would work; I would use the composition operator.
23:40:56 <luqui> hmm?
23:40:57 <heatsink> or a lambda.
23:41:03 <heatsink> The . operator.
23:41:08 <luqui> ahh, the lambda syntax.  Forgot about that too.
23:41:16 <luqui> How would you do it with composition?
23:41:27 <heatsink> Val . VStr
23:41:40 <heatsink> that makes the function (\x -> Val (Vstr x))
23:41:58 <luqui> of course
23:42:06 <luqui> still getting used to functional style
23:42:07 <luqui> thanks
23:49:39 <musasabi> morning
