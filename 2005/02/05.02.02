00:03:35 <pesco> autrijus: No problem! I'd say you're perfectly supposed to use the wiki in that way.
00:04:45 <autrijus> thank you.
00:09:14 <musasabi> Heffalump: timeouts?
00:12:05 <Heffalump> I want some way of executing some Haskell code within the same process, but timing it out if it doesn't terminate after a certain amount of time
00:12:32 <Heffalump> forkIO/forkOS + threadDelay + killThread doesn't work cos let loop 0 = loop 0 in loop 0 doesn't allocate any memory so can't be pre-empted.
00:12:57 <Heffalump> And I can't figure out how to get a signal handler to cause pre-emption either, otherwise I'd use SIGALRM
00:13:17 <dons> Heffalump: this would be cool. Can you ask simonm?
00:13:35 <dons> lots of hs-plugin-ish apps if we could do this
00:14:08 <dons> hmm. maybe we can ask the rts about blackholes
00:14:32 <dons> hmm. maybe we need to hack the rts. :/
00:18:09 <dons> hmm. when did the .bz2 version of the alex src disappear of haskell.org?
00:18:21 <dons> haskell.org/alex/dist/ I mean
00:19:04 <Heffalump> let loop 0 = loop 0 in loop 0 isn't a blackhole
00:19:31 <dons> sorry, yep. loop 0.
00:19:39 <Heffalump> that's why that's my example, not let loop = loop in loop :-)
00:20:24 <dons> nonetheless, being able to terminate things like this properly would be cool
00:20:42 <Heffalump> indeed.
00:21:17 <dons> I will investigate
00:21:49 <Heffalump> play with SIGALRM some more, you might be able to get it to behave reliably
00:22:21 <Heffalump> I was catching the signal, and throwing an exception to the thread the computation was running in (either the main thread or a forked one), and I had smoe success but it wasn't reliable
00:22:25 <Heffalump> s/smoe/some/
00:22:49 <Heffalump> it worked reliably for a given source file, but broke randomly for seemingly unrelated changes (and I don't think I can easily make a source file for which it does work, now)
00:22:57 <dons> hmm. ok. maybe there is some shennigans
00:23:16 <dons> 6.2.2?
00:23:31 <Heffalump> yes
00:26:47 <musasabi> Heffalump: I have been using two things for this.
00:27:11 <musasabi> Heffalump: 1) fork + setrusage, 2) forkIO+threadDelay
00:30:25 <Heffalump> musasabi: does (2) work with let loop 0 = loop 0 = in loop 0 ?
00:30:31 <Heffalump> sorry, without the second '='
00:30:52 <Heffalump> and with (1), how do you fork from Haskell?
00:31:32 <autrijus> System.Posix.Process.forkProcess ?
00:31:37 <Heffalump> (1) also has the problem that you have to serialize any data you want to return.
00:31:40 <Heffalump> oh, ta :-)
00:31:54 <dons> forkProcess is 6.3 isn't it?
00:31:59 <autrijus> my 6.2 has it.
00:32:28 <Lemmih> @index forkProcess
00:32:29 <lambdabot> System.Posix,System.Posix.Process
00:32:43 <dons> oh, of course. _Posix.Process_. 6.3 has System.Process
00:32:59 <dons> which works on win32 -- which makes those people happy :)
00:33:24 <musasabi> Heffalump: yes it seems.
00:33:26 <Heffalump> ok, so apart from the serialization problem, that'd be a decent solution
00:33:40 <Heffalump> musasabi: you can interrupt let loop 0 = loop 0 in loop 0? Can I see your code?
00:34:22 <dons> so to serialise functions... hmm. could you returnn them as loaded .o files?
00:34:23 <musasabi> youzen.b2.fi/~musasabi/a.hs
00:34:30 <dons> kind of how Clean works
00:35:07 <Heffalump> foo = foo isn't let loop 0 = loop 0 in loop 0 :-)
00:35:14 <dons> machine code is great for representing functions :)
00:35:47 <Heffalump> dons: not sure how you'd expect running code to suddenly generate a .o file for itself
00:36:15 <dons> for itself. hmm.
00:36:30 <musasabi> Heffalump: changing foo to "let loop 0 = loop 0 in loop 0" does not change it - it still works.
00:36:32 <Heffalump> in principle I suppose it'd be possible, but
00:36:37 <Heffalump> musasabi: ok, just trying it now
00:36:38 <Heffalump> thanks
00:37:09 <dons> it bugs me that to dump Core you use -ddump-simpll
00:37:15 <dons> drop that last 'l'
00:37:37 <dons> maybe I should petition for -dddump-core
00:37:42 <Heffalump> musasabi: that code doesn't even forkIO
00:37:42 <musasabi> I used the getrusage for getting a hard memory bound.
00:38:42 <musasabi> Heffalump: sorry, typo. but it works with forkIO :-)
00:39:15 <Heffalump> hangon, bar doesn't even run in that code.
00:39:18 <musasabi> reload.
00:40:10 <Heffalump> ah, so your forked thread is the one that does the killing
00:40:23 <Heffalump> how quickly should it terminate?
00:40:29 <musasabi> a few seconds.
00:40:33 <Heffalump> well, it's not :-)
00:40:47 <Heffalump> ghc -o a a.hs
00:40:57 <Heffalump> and then ./a just doesn't terminate at all
00:41:06 <Heffalump> what version of GHC do you have?
00:41:07 <musasabi> ghc-6.3.20050117 a.hs -O2 -o aaa
00:41:43 <musasabi> it seems to work with 6.2.2 too.
00:41:44 <Heffalump> bah. I'd better try a snapshot myself, then.
00:41:45 * boegel cheers: "Gooooooooooodmorning"
00:41:48 <Heffalump> with -O2?
00:41:59 <pesco> Hello boegel.
00:42:11 <Heffalump> ooh
00:42:15 <Heffalump> works with -O2 for me too
00:42:23 * Heffalump wonders why
00:42:25 <musasabi> hmm 6.2.2 works with -O2, not without it.
00:42:27 <Heffalump> and if that's reliable.
00:42:53 <musasabi> sane with cvs.
00:42:55 <musasabi> *same
00:43:05 <Heffalump> as in -O2 works but without doesn't?
00:43:23 <musasabi> yes.
00:43:30 <Heffalump> glu
00:43:32 <Heffalump> g
00:43:46 <musasabi> I think you should report this to the lists - seems very weird.
00:43:49 <Heffalump> will do
00:44:02 <Heffalump> thanks :-)
00:45:51 <boegel> do you guys ever sleep ?
00:46:09 <pesco> Of course not!
00:46:18 <dons> do you get it with -O, or only -O2 ?
00:46:48 <musasabi> -O gets the correct terminating behaviour.
00:46:55 <dons> and -O2 is wrong?
00:47:14 <dons> or -O2 is right, but -Onot is wrong
00:47:39 <dons> hmm. wonder is what is optimised away between -Onot and -O
00:47:53 * dons consults -ddump-simpl
00:48:11 <musasabi> This seems not related to ncg vs via-C.
00:48:40 <dons> but to optimisations, yes?
00:48:48 <musasabi> yes.
00:49:07 <dons> that's the difference between -O and no -O flag, or -Onot
00:49:21 <dons> -O2 doesn't do much these days
00:49:35 <dons> you could try -O -fasm to check too
00:50:19 <musasabi> That works. (I tested it before saying things about the ncg)
00:51:21 <musasabi> no -O does not work (with both -fasm and -fvia-C), -O and -O2 work with both -fasm and -fvia-C
00:51:43 <musasabi> this seems to be consistent for 6.2.2 and 6.3.20050117
00:55:19 <dons> ok. lets look at the Core output and see if something is up
00:56:14 <dons> hmm. am I supposed to see:
00:56:35 <dons> kill\ Fail: thread killed
00:57:26 <dons> I seem to get the same resuls with -O and -Onot on openbsd. hmm.
00:59:00 <musasabi> -Onot does not seem to work on linux.
01:00:18 <dons> does it not terminate?
01:01:07 <musasabi> The process continues to get lots of SIGVTALRM - with the succesfull version it does gettimeofday+select.
01:01:36 <dons> yep. got it to not terminate on linux
01:01:46 <dons> with -Onot only, -O seems fine
01:02:16 <musasabi> -Onot = -O0 = no -O option => does not terminate, -O1 = -O2 => terminates correctly
01:02:39 <musasabi> and -O = -O1 = -O2.
01:03:00 <dons> yep. and I get that behaviour on openbsd too now (had the wrong version)
01:03:37 * dons studies the core
01:03:56 <musasabi> I can upload straces if that helps..
01:04:44 <dons> oh, in the -O version, foo = let loop 0 = loop 0 in loop 0
01:04:58 <dons> is optimised to: Main.foo = Main.foo
01:05:06 <dons> hmm. does that make sense?
01:06:24 <dons> even lower down, in the stg code:
01:06:31 <dons> -Onot: Main.foo = \u srt:(0,*bitmap*) [] loop lit;
01:06:40 <dons> -O: Main.foo = \u srt:(0,*bitmap*) [] Main.foo;
01:08:40 <dons> anyway, still don't know why we can't properly interrupt loop n, and -O is just optimising it away
01:09:35 <dons> why we can't interrupt loop n is a question simon the m.
01:12:40 <musasabi> well when ghc gets SIGVTALARM it executes handle_tick which just sets the flag for "I would like to do a context switch"
01:14:53 <musasabi> and there is nothing in the loop that would enter the rts...
01:15:47 <dons> yep. got it. looking at install_vtalrm_handler()
01:15:48 <Heffalump> cos it doesn't allocate memory
01:16:07 <Heffalump> could one of you two email the list once you've worked through this, since you're looking into it in more detail than me now?
01:18:08 <musasabi> http://www.dcs.gla.ac.uk/mail-www/glasgow-haskell-users/msg00790.html discusses this.
01:20:58 <Heffalump> no, I think that's different
01:21:14 <Heffalump> that's to do with the problem they solved with bound threads
01:21:18 <Heffalump> and the threaded RTS
01:25:25 <kosmikus> shapr: HC&AR is using LaTeX as a source, and a heavily hacked and customized tool to produce HTML from the LaTeX.
01:26:41 <kosmikus> shapr: this tool has apparently been used for all editions, and been modified every time; it's a mess, and it doesn't produce valid HTML; but I do not know if I have time to improve this situation until next edition; at least, it works reasonably well 
01:27:00 <musasabi> Traditionally you would insert a hook into the rts into each potentially infinite loop, ghc does not do this giving much improved performance for inner loops.
01:27:24 <Heffalump> does it have an option to do so?
01:27:41 <musasabi> This causes the same problems for pure haskell loops than for doing ffi calls - they might block.
01:28:15 <musasabi> Heffalump: I don't think so - you can do that by hand if you want to.
01:28:25 <Heffalump> not if I don't control the source :-)
01:29:07 <Heffalump> and how would I actually do it, anyway?
01:30:49 <musasabi> Heffalump: e.g. insert a call to a safe C function.
01:31:04 <Heffalump> ouch :-)
01:31:07 <musasabi> (at least on a threaded rts)
01:32:18 <musasabi> or just a simple (newMVar () >>= takeMVar) should do it also (of course if you are not in IO...)
01:32:37 <Heffalump> I'm not. This untrusted code isn't going anywhere near IO..
01:33:00 <musasabi> I don't think you can evaluate untrusted code in GHC at all.
01:33:14 <Heffalump> it's untrusted source code that's banned from doing any imports
01:33:29 <Heffalump> so I've compiled it myself
01:35:00 <musasabi> Heffalump: what about it allocating all the memory you have?
01:35:02 <Heffalump> if there was a way to kill a thread abruptly, rather than throwing it an exception and waiting for it to die of its own accord, that'd solve the problem too
01:35:09 <Heffalump> it won't be allowed to run for long enough
01:35:23 <Heffalump> (and as a backup plan I'll put a resource limit on the entire application)
01:35:52 <musasabi> I would just fork+setrlimit
01:36:06 <Heffalump> yeah, that's what everyone says ;-)
01:36:08 <musasabi> I do so for my own code which works on untrusted inputs.
01:36:36 <Heffalump> but then I can't do stuff like use concurrency primitives (in the wrapper that I put around the untrusted code)
01:36:58 <Heffalump> and I have to communicate back via serialization
01:37:17 <musasabi> well you can have a thread which just performs the computation in a subprocess and then control that.
01:37:24 <musasabi> true.
01:37:59 <musasabi> but if it has only prelude and no IO, serializing things should be easy.
01:38:22 <Heffalump> true
01:38:29 <Heffalump> right, work time
01:38:31 <Heffalump> thanks! :-)
01:38:42 <musasabi> I have code to do the setrlimit if you want.
01:38:53 <Heffalump> isn't it in System.Posix somewhere?
01:39:03 <dons> oooohh. what is Heffalump up to... when will we know?
01:39:26 <musasabi> I just used C+ffi - seemed the easiest way.
01:39:32 <dons> System.Posix.Resource. setResourceLimit ResourceCPUTime (ResourceLimits rlimit rlimit)
01:39:33 <Heffalump> dons: it's not that interesting :-) I just want to make a scoring system for games, and let people enter their own scoring functions.
01:40:14 <dons> oh. that's still pretty interesting.
01:40:26 <Heffalump> I'll let you know when it's done.
01:40:43 <Heffalump> I think it's a nice application of hs-plugins, anyway.
01:41:09 <dons> yep, it is. hope you can get some use out of it
01:41:43 <Heffalump> once I sort out this issue one way or another it's looking good, I think
01:41:47 <Heffalump> right, I'm really off
03:47:09 <shapr> good morning #haskell!
03:47:19 <sh10151> good morning
03:47:28 <Lemmih> Hey shapr.
03:47:33 <shapr> wazzzup?
03:47:55 <Lemmih> Hacking transparent callback support in Hacanon.
03:48:04 <shapr> cool
03:48:35 <Lemmih> 0.1 will be out when I get it to generate Haddock documentation.
03:48:46 <shapr> excellent!
03:49:21 <Lemmih> What about you? Hacking something spiffy?
03:49:50 <shapr> Not at this moment, no... but I worked on Yi Keymaps last night. I'm making progress on the KeyMap tutorial.
03:50:49 <shapr> And of course, trying to figure out how to publish TMR
03:53:03 * Lemmih takes a shower.
03:53:27 * shapr goes unicycling
04:09:33 <Itkovian> shapr: so how are things with yr MR?
04:36:53 <zippy> man i am so bored
04:37:24 <zippy> how hard is it to set up a haskell development environment on windows including haskell opengl bindings, HGL and emacs?
04:38:35 <Itkovian> zippy: emacs is the hardest part?
04:38:37 <Itkovian> ;-)
04:38:40 <zippy> really?
04:38:43 <Itkovian> no
04:38:56 <Itkovian> well, maybe, considering the fact that it an OS
04:38:57 <zippy> i think i read on HGL website that it doesn't really work on windows anymore
04:39:04 <Itkovian> I have no idea
04:39:13 <Itkovian> I'm about as bored as you are I guess
04:39:13 <zippy> oh, i also need yampa and the yampa arcade space invaders game
04:39:38 <Itkovian> if yr bored: http://www.etienne.nu/imagepuz/
04:42:19 <zippy> btw, is university of washington a good school?
04:47:12 <Itkovian> I have no idea
04:57:04 * boegel tends to get bored a lot too
04:59:14 <zippy> i wanna do some haskell programming but i'm too lazy to reboot
04:59:43 <boegel> Itkovian: should one use gimp orso to 'correct' the images ? or should it be clear...
05:00:41 * boegel is stuck at stage 3 :|
05:00:51 <Itkovian> one can use whatever one want ... i'm at pic 5
05:01:04 <Itkovian> and I'm clueless and u should be studying, no?
05:01:32 <boegel> err, nah :p
05:01:38 * boegel starts the gimp !
05:04:03 * boegel hates this game already
05:04:29 <Itkovian> lol
05:08:43 <TheHunter> hmm, what's that supposed to mean? "Please use Internet Explorer when viewing the puzzle!"
05:09:15 <boegel> maybe that's my problem...
05:12:01 <boegel> anyone who solved stage 3 ? :s
05:17:59 <Igloo> The source doesn't look like IE specific in any way
05:18:41 <boegel> maybe it has something to do with colors or so... (I mean being IE specific)
05:18:58 <Itkovian> stage 3 is 3D
05:19:04 <Itkovian> just stare at it
05:20:15 * boegel starts thinking he's colour blind :'(
05:22:04 * Igloo could never do those 3D things so has no hope  :-)
05:26:01 <autrijus> hmm
05:26:07 <autrijus> this is a rather nice perl6 declaration:
05:26:10 <autrijus> @fib ::= [ 1, 1, do { for zip(@fib;@fib[1...]) -> { $^a + $^b } } ]
05:26:10 <lambdabot> Sorry, I don't know the command "fib", try "lambdabot: @listcommands"
05:26:31 <autrijus> it resembles a certain language :)
05:27:53 <musasabi> yes, except being much uglier ;)
05:27:59 <autrijus> true.
05:28:04 <autrijus> there's no comprehension, sadly.
05:29:14 <Itkovian> my golly, that's ugly :-)
05:29:30 <autrijus> see http://autrijus.org/FP6.txt
05:29:32 <musasabi> fib = 1 : 1 : zipWith (+) fib (tail fib)
05:29:42 * Itkovian thinks that after staring a bit at it it becomes readable
05:30:07 <autrijus> FP6.txt is, as you may have noticed, transliterated from a certain gentle introduction.
05:32:50 <autrijus> it looks like haskell with many funny characters :)
05:33:25 <autrijus> although I hope does not look totally insane.
05:35:06 <Igloo> What is it that makes that lazy, autrijus?
05:36:22 <autrijus> evaluation in list context are lazy.
05:36:32 * pesco_ shakes his head.
05:36:40 <autrijus> "all lists are lazy; all scalars are strict" is the motto.
05:39:15 <pesco_> So Perl 6 is going to be "Fucking Ugly Haskell that Never Works the First Time"?
05:39:41 <pesco_> Did I just say that out loud? 8-|
05:40:04 <autrijus> rofl.
05:40:13 <autrijus> very few perl6 user will write perl6 that way.
05:40:23 <autrijus> because there is, you know, side effects, that makes things much simpler.
05:40:35 <autrijus> or you can program with constraints instead.
05:40:59 <autrijus> but hey, I gotta start somewhere, and a pure functional sublanguage is easier to implement :)
05:41:13 <pesco> Constraints?
05:41:28 <autrijus> as in prolog... transaction, rollback, rules, stuff like that.
05:41:41 <Itkovian> omg
05:42:08 <Itkovian> perl is then going to become the bloated 'I do everything' PL?
05:42:21 <autrijus> I don't know, you consider Curry and Oz bloated?
05:42:22 <pesco> Isn't that right on track for Perl?
05:42:45 <autrijus> I mean, this kind of "I do everything" mentality was perl's characteristics every since perl1
05:42:56 <autrijus> s/every/ever/
05:44:20 <autrijus> I imagine you can write fscking ugly $any_language in perl6. :)
05:46:14 <musasabi> Is there anything that perl6 couldn't do?
05:46:43 <autrijus> I'm trying to find out :)
06:05:32 * CosmicRay appears
06:05:38 <autrijus> hey CosmicRay.
06:05:43 <CosmicRay> morning autrijus
06:06:20 <pesco> Hi CosmicRay.
06:06:28 <CosmicRay> hey pesco
06:06:42 <CosmicRay> pesco: I have a question about your regex module, actually.
06:06:56 <pesco> I was just going to ask how you got along. Go ahead.
06:07:05 <CosmicRay> currently, you have a class of which string and a compiled Text.Regex are a member.
06:07:12 <pesco> Right.
06:07:15 <CosmicRay> if you get a string, you compile it with Text.Regex and use that.
06:07:29 <CosmicRay> what if I want to compile it with PCRE or HsRegex or something else?
06:07:38 <CosmicRay> could that be integrated into your framework without too much hassle?
06:08:34 <CosmicRay> oh btw, you will be amused by this.  I e-mailed debian-legal about your license.  The consensus was that this is an instance of the apparently imfamous "do whatever the fuck you want" license, and is grudgingly accepted :-)
06:08:35 <pesco> Probably by simply adding an instance, right?
06:08:44 <CosmicRay> well, String is already an instance
06:08:49 <pesco> CosmicRay: Wonderful!
06:09:34 <CosmicRay> pesco: basically, your module solves half the problem with Text.Regex: its interface stinks.
06:09:40 <CosmicRay> the other problem is that the regexes it supports also stink.
06:10:13 <pesco> CosmicRay: Could you relay debian-legal's reply to me? For reference... ;-)
06:10:25 <CosmicRay> I can get you a url
06:10:25 <CosmicRay> hang on
06:11:00 <CosmicRay> the thread begins here:
06:11:03 <CosmicRay> http://lists.debian.org/debian-legal/2005/01/msg00973.html
06:11:12 <CosmicRay> just hit Thread Next a few times to read it
06:12:27 <CosmicRay> I guess the "do whatever the fuck you want" conversation occured on irc
06:12:31 <CosmicRay> I don't have logs of that
06:13:25 <MegaMonad> Howdy all, im having some library code for doing guarded actions and have a sudden cleaning stuff up on objectio in favor of indentation?
06:13:34 <CosmicRay> heh
06:19:31 <pesco> CosmicRay: How would you imagine the interface for selecting an alternate regex implementation?
06:20:03 <CosmicRay> I don't know.
06:20:08 <CosmicRay> I was hoping you might have a brilliant idea :-)
06:20:58 <Igloo> Just have a class with compile and execute methods, no?
06:21:10 <zippy> MegaMonad: hello
06:21:10 <MegaMonad> zippy: @Eval "\crprivmsg #haskell :hello world.
06:21:29 <CosmicRay> Igloo: String is a member of the class in question and is the one that's concerning
06:21:29 <Igloo> Although it would be a pity to have ot give an explicit type
06:21:29 <pesco> Igloo: Actually, only "match" is a method.
06:22:26 <Igloo> Oh, you don't actually have a value of the right type to use a class, do you
06:22:49 <pesco> Right.
06:23:07 <pesco> I think this is an instance of the "parameterized modules" problem.
06:24:17 <pesco> What we want is the compilation function to be a parameter of the module, so the module can define instance for String accordingly.
06:24:37 <pesco> "the instance for"
06:25:05 <CosmicRay> ah, yes.
06:25:14 <CosmicRay> do we have a solution for that?
06:25:31 <pesco> Not that I know of, sadly.
06:25:53 <CosmicRay> btw you may be interested in this subRe function: http://www.complete.org/~jgoerzen/shapr/MissingH/MissingH.Str.html#v%3AsubRe
06:27:14 <CosmicRay> it is basically like yours but uses \1, \2 embedded in the replacement pattern instead of outside it
06:27:23 <boegel> @seen shapr
06:27:24 <lambdabot> I saw shapr leaving #haskell 58 minutes 5 seconds ago.
06:27:43 <CosmicRay> I think that's the first time anyone said "I saw shapr leaving #haskell"
06:27:44 <pesco> CosmicRay: Yes. I find the embedding outside the string much cleaner.
06:28:09 <Itkovian> maybe sleep's catching up with him, eh :-)
06:28:13 <boegel> CosmicRay: nah, I've seem him leave :p
06:28:18 <CosmicRay> heh
06:28:23 <boegel> Itkovian: I think he's working quite hard
06:28:40 <zippy> Itkovian
06:29:46 <CosmicRay> pesco: do you hack on that code much?
06:30:06 <CosmicRay> pesco: I might just hack it to use HsRegex myself, and while I'm at it, convert your lhs comments to Haddock comments :-)
06:30:57 <zippy> Itkovian: how do i beat stage 4 of the image puzzle?
06:31:26 <pesco> CosmicRay: I've not touched the code recently.
06:31:28 <Itkovian> use the gimp i think
06:31:37 <zippy> Itkovian: huh?
06:31:38 <Itkovian> or play with yr contrast settings
06:31:43 <zippy> it's a pure white image!
06:31:49 <Itkovian> no its not
06:31:55 <boegel> zippy: linux or windows ?
06:32:08 <pesco> CosmicRay: I should note that I purposely did not use Haddock.
06:32:11 <Itkovian> zippy: i stopped after 4
06:32:30 <CosmicRay> pesco: yes, I find that annoying :-)
06:32:47 <CosmicRay> I find it easier to read haddock docs than lhs ones
06:33:03 <CosmicRay> though I certainly agree that haddock has plenty of faults
06:33:13 <CosmicRay> including an annoying incompatibility with hsc2hs
06:33:25 <pesco> CosmicRay: :) The thing is, of course the literate doc is not meant as a reference documentation.
06:33:28 <CosmicRay> (well, it's easy to work around, but annoying)
06:33:31 <CosmicRay> yeah
06:33:34 <pesco> CosmicRay: Pesco.Regex is unfinished in that respect.
06:34:07 <CosmicRay> I understand.  you've written far more docs than many people do :-)
06:34:18 <pesco> CosmicRay: I'd write manpages once it's done, like I've done for Pesco.Cmdline.
06:34:36 <CosmicRay> I noticed that.  interesting idea
06:34:46 <CosmicRay> I used to do that when I coded perl
06:34:47 <CosmicRay> pod2man and all that
06:34:49 <CosmicRay> haven't since
06:35:00 <pesco> I was surprised how easy it was.
06:35:03 <CosmicRay> it's interesting how certain languages lead people to certain documentation behaviors
06:35:23 <CosmicRay> pesco: I use docbook for my manpages.  I tend to embed them as apendices in larger documents also, that way.
06:36:03 <Igloo> I'd like haddock to be able to produce manpages
06:36:18 <CosmicRay> Igloo: yes, it is rather deficient in its output
06:36:20 <pesco> CosmicRay: Interesting. I was planning to do that at first but got majorly annoyed at the whole DocBook/XML/... tool gang.
06:36:27 <CosmicRay> it supposedly can generate sgml, but I've never made it actually work
06:36:36 <CosmicRay> pesco: I have some scripts to make that much nicer.
06:36:40 <CosmicRay> pesco: do you use debian?
06:37:01 <pesco> CosmicRay: Gentoo. But thanks, I'm fine with LaTeX + roff now. :)
06:37:12 <CosmicRay> pesco: luddite :-)
06:37:34 <Igloo> Oh, I don't suppose there is a tex guru in our midst is there?
06:37:49 <rtega> no tex guru
06:37:54 <pesco> no tex guru
06:37:57 <rtega> used latex for quite some time
06:38:07 <rtega> depends on what you want to know
06:38:21 <CosmicRay> Igloo: rtega is apparently not only a tex guru, but a tex pedant :-)
06:38:46 <Igloo> I'm hoping for someone interested in fixing http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=181444
06:38:54 <rtega> CosmicRay: naaaah
06:38:57 <Igloo> (affects building happy docs)
06:39:34 <Igloo> Sebastian Rahtz said "this could be hard" which I suspect means isn't worth me looking at  :-)
06:39:37 <rtega> this looks like xml
06:39:42 * rtega doesn't use xml
06:39:50 <rtega> i don't know shit about it
06:40:02 <rtega> s/shit/s#!t
06:41:02 <rtega> why would you want to use xml anyway?
06:41:07 <CosmicRay> pesco: anyway, thanks for your code.
06:41:20 <pesco> My pleasure.
06:41:21 <CosmicRay> pesco: I pulled it in to MissingH last week
06:41:37 <CosmicRay> so it'll probably hit Debian in a week's time when I release the next MissingH
06:41:45 <pesco> Wooh! :)
06:41:48 <CosmicRay> :-)
06:42:43 <Igloo> rtega: the happy docs are trying to do docbook xml | xsltproc | xmltex | dvips
06:43:21 <rtega> mkay
06:43:29 <rtega> but i'm afraid i'm not your man Igloo 
06:43:40 <rtega> i'm just wondering, why would you want to use xml?
06:43:59 <Igloo> Well, in this case it wasn't my choice
06:44:03 <rtega> for processing webpages?
06:44:16 <rtega> i mean, into webpages
06:44:26 <CosmicRay> Igloo: isn't there an xml2ps in debian somewhere?
06:44:30 <CosmicRay> maybe the sgml2x package?
06:44:38 <Igloo> This goes to ps and HTML
06:44:44 <rtega> mkay
06:44:59 <Igloo> It's not a bad choice for an upper bound of the two IMO
06:45:09 <rtega> probably
06:45:14 <CosmicRay> Igloo:  try docbook-2-ps and/or docbook2ps on it
06:45:23 <CosmicRay> instead of that command you were using
06:45:53 <Igloo> Thanks; I'll give it a go later
06:45:55 <CosmicRay> or maybe xmlto
06:46:10 <Igloo> xmlto calls the above pipeline
06:46:59 <CosmicRay> hm
06:59:27 <autrijus> my yapc::taiwan talk title has been decided as "Perl6 the Ultimate". ;)
06:59:58 <xerox> Wrong channel ^___^
07:00:24 <autrijus> well, yeah, except my talk is about the haskell code which implemented it :)
07:00:33 <xerox> yay! :)
07:06:11 <jlouis> autrijus: hehe
07:30:06 <musasabi> evening
07:30:57 <Itkovian> hi
07:36:35 <tintin> io musasabi 
07:38:41 <CosmicRay> autrijus: you have a perl interpreter in haskell?
07:46:10 <autrijus> CosmicRay: currently only a simple parser and an even simpler evaluator that handles expression and prim ops only.
07:46:17 <autrijus> CosmicRay: but it's only 2 days old, so hey.
07:46:21 <CosmicRay> autrijus: cool!
07:46:23 <autrijus> @Perl6UsersGolfingSystem
07:46:23 <lambdabot> Sorry, I don't know the command "Perl6UsersGolfingSystem", try "lambdabot
07:46:23 <lambdabot>  @listcommands"
07:46:26 <autrijus> @wiki Perl6UsersGolfingSystem
07:46:26 <lambdabot> http://www.haskell.org/hawiki/Perl6UsersGolfingSystem
07:46:29 <CosmicRay> autrijus: are you parsing code directly or working with parrot?
07:46:39 <autrijus> this has nothing to do with parrot for now.
07:49:20 <jlouis> autrijus: is there any reason you are playing with it?
07:49:25 * boegel leaves to play around with gtk2hs
07:49:48 <autrijus> jlouis: I'm reading TaPL and ATTaPL; this is my exercise
07:50:32 <jlouis> TaPL and ATTaPL?
07:50:42 <jlouis> is there and expand function for that in haskell?
07:50:47 <jlouis> or should i try with
07:50:50 <jlouis> :type taPL
07:50:51 <autrijus> (Advanced Topics on)? Types and Programming Languages
07:50:56 <autrijus> two books.
07:51:05 <jlouis> oh
07:56:11 <kosmikus> my copy of ATTaPL was sent by Amazon today, but will arrive in the wrong country :(
07:57:00 <autrijus> !
07:57:44 <jlouis> who wrote that book?
07:58:06 <autrijus> both are written by Benjamin Pierce.
07:58:14 <autrijus> his style of writing is excellent.
07:58:29 <jlouis> ah, cool
07:59:00 <autrijus> it's almost like "Designing and implementing languages for dummies".
07:59:20 <autrijus> i.e. assume little prior knowledge and explains very concisely
08:00:48 <TheHunter> how much math is in the book?
08:01:08 <Itkovian> gotta go
08:01:28 <autrijus> TheHunter: only basic set theory stuff.
08:01:31 <autrijus> not much.
08:02:14 <TheHunter> hmm, no category theory?
08:02:27 <autrijus> nope.
08:02:34 <autrijus> and only a few lines on c-h correspondence.
08:02:39 <autrijus> so all in all, very down to earth.
08:03:04 <jlouis> no lifting? no domains?
08:04:04 <autrijus> no lifting. no domains.
08:04:35 <autrijus> all semantics are operation based.
08:04:42 <TheHunter> i wonder if I should buy it, then.
08:05:52 <TheHunter> I was pretty annoyed buy Reynold's book because everytime it came to the interesing math, he wrote something about "being out of the scope" of the book.
08:09:21 <jlouis> TheHunter: hehe
08:11:06 <kosmikus> well, actually, the second book is only edited by Benjamin Pierce, and each chapter is written by someone different
08:11:14 <autrijus> yes.
08:11:24 <kosmikus> having not seen the book yet, I can only trust that he's done a good job as an editor
08:11:31 <autrijus> but the editorship is very visible.
08:11:45 <autrijus> otherwise I can't fathom how various different authors speaks with the same voice.
08:12:21 <kosmikus> good
08:12:26 <kosmikus> this is how it should be
08:12:49 <musasabi> What would be the best book to teach System F?
08:13:55 <autrijus> TaPL? :)
08:14:24 <kosmikus> TheHunter: have you read Mitchell?
08:15:51 <musasabi> Does it talk about System F specifically?
08:16:19 <autrijus> yes. an entire part is devoted to it.
08:16:24 <autrijus> complete with an implementation.
08:16:37 <autrijus> after that it's F<:, again with an implementation.
08:16:39 <autrijus> after that, Fw.
08:17:11 <musasabi> nice :-)
08:17:18 <TheHunter> kosmikus, no, but sounds interesting
08:17:39 <kosmikus> TheHunter: I mean the "Foundations for Programming Languages" book
08:18:37 <kosmikus> more maths, but also a bit boring in writing style, imho
08:19:38 <autrijus> my math training stopped when I'm 12 yrs old
08:19:48 <autrijus> so I very much appreciate books that does not require high math.
08:26:53 <TheHunter> ok, thanks, i'm gonna go home now.
08:28:48 <waltz> Does Haskell use the currency symbol ("$") much?
08:29:03 <zippy> yes
08:29:11 <autrijus> a lot.
08:29:23 <waltz> i c
08:29:24 <autrijus> although tends to be only once or twice each line.
08:29:48 <waltz> heh, "only"
08:30:43 <autrijus> as compared to eg. perl
08:31:05 <musasabi> $ is a question of style in haskell.
08:31:29 <waltz> Is Haskell as supported on Win32 as it is on UNIX-based platforms?
08:31:48 <autrijus> depends on how you use it for, but roughly equivalent.
08:31:54 <autrijus> for some purposes it is more supported. ;)
08:32:00 <autrijus> (eg. GUI)
08:32:05 <waltz> But for most I guess its not :)
08:32:13 <autrijus> (eg. Posix)
08:32:36 <autrijus> but unless you explicitly try, the code you write will be seamlessly cross platform without any effort.
08:33:24 <musasabi> waltz: if you don't use specifically unix specific things it will work fine.
08:33:39 <waltz> yep
08:42:32 <fraxtal> Ahh this is such a nice feature of hugs.
08:43:16 <fraxtal> Automatically loads the file back up that I've just edited.
08:43:31 <autrijus> how?
08:43:58 <fraxtal> hm?
08:44:13 <fraxtal> just type :edit
08:44:39 <autrijus> oh. duh. I'm using ghci
08:44:55 <autrijus> is there a equiv command in ghci?
08:45:02 <fraxtal> It runs vim for me, I make some changes, quit vim, and its ready to go.
08:45:15 <fraxtal> I dunno I've never used ghci.
08:45:16 <musasabi> autrijus: :r
08:45:31 <musasabi> (:r = :reload)
08:45:38 <autrijus> sure
08:45:41 <autrijus> but it's not automagic
08:46:11 <fraxtal> I take it that ghci stands for Glasglow Haskell Compiler Interactive?
08:46:16 <xerox> fraxtal, yep
08:46:37 <fraxtal> Isn't that the hardcore/fast implementation of Haskell?
08:47:24 <autrijus> yes.
08:47:31 <musasabi> autrijus: just use it with emacs and you get things working automatically.
08:47:43 <musasabi> that is run ghci inside emacs etc.
08:47:50 <xerox> With haskell-mode 2.0! :D
08:47:56 <autrijus> oh. hmm.
08:48:01 * autrijus actually don't know any emacs.
08:48:12 <xerox> autrijus, you should, it's *really* productive.
08:48:30 <autrijus> I keep meaning to.
08:48:35 <autrijus> maybe I should learn eclipse instead.
08:48:42 <autrijus> I also hear that it's really productive.
08:48:52 <xerox> From Java people? hmpf :P
08:49:01 <autrijus> no, from real people :)
08:49:03 <autrijus> oops.
08:49:32 <musasabi> Does this imply that java people are not real people? ;)
08:49:59 <autrijus> they are imaginary people.
08:50:13 <autrijus> or quaternion people, I lost count
08:51:58 <Philippa_> waltz: the big deal with Haskell on win32 is that you still need a unix-like tool chain for building a lot of the projects out there
08:52:12 <Philippa_> MSYS is very much your friend
08:52:16 <autrijus> MSYS++
08:52:25 <autrijus> truly nice. now if it has a pkg mgmt system...
08:53:01 <Philippa_> personally I'd prefer it if I didn't have to go through hell working out how to build new libs, but hey
08:53:09 <Philippa_> (Multimedia.Core.SDL was a fun example)
08:54:17 <musasabi> Does haskell work under win95 or does it need a newer windows?
08:54:51 <autrijus> I don't see any problems with win9x listed.
08:56:11 <musasabi> I would like to create a test environment - just have to decide whether to try qemu->win95->cygwin or wine->cygwin (to get a toolchain)
09:15:23 <Philippa_> I was running GHCi under win98 at some point
09:15:30 <Philippa_> I dunno how well MSYS etc works
09:15:37 <Philippa_> nor anything cygwin
09:19:46 <musasabi> hmm. Maybe I'll try wine first - if it works.
09:28:15 <Lemmih> Greetings, boegel.
09:28:50 <xerox> hi!
09:29:12 <boegel> hi Lemmih , xerox
09:29:18 <boegel> @seen duncan
09:29:18 <lambdabot> I saw duncan leaving #haskell 15 hours 10 minutes 59 seconds ago.
09:29:35 <boegel> hmm, I hope he'll be back within a few hours
09:32:04 <boegel> *off
09:51:41 * Lemmih is trapped in the classical dilemma of whether to work or play.
09:57:31 <boegel> Lemmih: always choose play, there's time enough to work :p
10:03:19 <Philippa_> has anybody played with an extension to haskell's type system that'd allow (lacks Foo a) => a and so forth?
10:03:38 <Philippa_> or to put it another way, is there a known reason that it'd be impractical?
10:03:56 <musasabi> Philippa_: what could you do with such a type?
10:04:15 <zippy> not call certain functions with it :P
10:04:58 <tromp> dancy a game of go, lemmih:-?
10:05:03 <tromp> fancy i mean...
10:05:31 <zippy> tromp: i'll play irc-go with you...
10:05:36 <zippy> | | | | | | |
10:05:39 <zippy> you're move
10:05:44 <tromp> what's irc-go?
10:06:08 <tromp> and what are those 7 bars?
10:06:10 <psi> upper right, 4-4, hoshi!
10:06:27 * psi sai
10:09:22 <kosmikus> Philippa_: you mean records with "lacks" constraints?
10:15:29 <musasabi> Are there any binary builds of cvs ghc for windows?
10:17:01 <CosmicRay> GO TO HELL, WINMAIL.DAT AND OUTLOOK!
10:17:07 <CosmicRay> err, sorry, wrong window... 
10:17:46 <zippy> out of curiosiy, what window was that supposed to go to? :)
10:18:20 <CosmicRay> #debian-devel :-)
10:19:15 <CosmicRay> but that's ok, I suppose I've trained MegaMonad that outlook is evil now.... :-)
10:19:23 <CosmicRay> err
10:19:24 <CosmicRay> crap.
10:19:38 <CosmicRay> I wonder if megamonad's brain has exceeded some size limit.
10:19:40 <CosmicRay> it keeps crashing
10:19:56 <Philippa_> kosmikus: I don't, I mean extending lacks to typeclass instances rather than just label existance
10:20:37 <Philippa_> musasabi: aside from the obvious record extension thing, it could be useful for avoiding overlapping instances for typeclasses - "if it's not an instance of this other typeclass, we can do it this way"
10:22:08 <CosmicRay> zippy: people keep sending me screenshots by pasting a graphic into outmail.  it attaches it in some crappy winmail.dat file that is no known earthly graphic format
10:22:24 <CosmicRay> zippy: my theory is that it is a Goa'uld graphic format.
10:22:30 * CosmicRay casts about for stargate fans...
10:22:31 <CosmicRay> :-)
10:22:46 <zippy> CosmicRay: i think that it's regular jpg
10:22:53 <CosmicRay> nope
10:23:09 <CosmicRay> is x-ms-tnef or something crappy like that
10:23:28 <zippy> it may be jpg with a few bytes shoved in the header
10:23:46 <zippy> try removing 1,2,3,4,5 or 6 bytes from the beginning of the file until it's recognized as jpg
10:24:28 <CosmicRay> see this is why I rant on #debian-devel.  If I say that there, everyone agrees that outlook sucks and we vow to destroy it :-)
10:24:33 <CosmicRay> I don't think it's that simple
10:24:56 <CosmicRay> there are some extraction tools out there, I guess
10:25:03 <CosmicRay> the extracted content is half the size of the attachment
10:25:13 <CosmicRay> yet the attachment is binary.
10:25:14 <CosmicRay> go figure
10:25:55 <zippy> try running strings on the file :P
10:26:17 <CosmicRay> so anyway, even this attachment is something gimp can't import
10:26:18 <CosmicRay> from strings:
10:26:24 <CosmicRay> Picture (Device Independent Bitmap)
10:26:25 <CosmicRay> StaticDib
10:26:30 <CosmicRay> yet file doesn't recognize it
10:26:35 <CosmicRay> and it damn sure isn't a pbm or something
10:26:51 <zippy> hm... maybe it has a .bmp file embedded inside it
10:26:58 <zippy> try opening it with microsoft visual studio
10:27:17 <CosmicRay> zippy: if I worked on Windows, I wouldn't be having this whole discussion
10:27:42 <zippy> good point
10:28:14 <zippy> but even debian developers are allowed to use microsoft windows from time to time :P
10:28:33 <CosmicRay> but a) I hate to, and b) I have no copy of visual studio
10:28:53 <CosmicRay> and c) if I have to use one particular operating system to open a freaking screenshot, my original point that outlook should go to hell remains :-)
10:29:55 <zippy> i think everyone agrees that outlook should indeed go to hell
10:31:32 <CosmicRay> thank you.
10:31:44 <CosmicRay> I think MissingH 0.9.0 should be the "Outlook Should Go To Hell" release :-)
10:32:11 <zippy> CosmicRay: you are interested in AI right?
10:32:26 <jlouis> does GHC still use the STG-machine internally?
10:32:38 <CosmicRay> zippy: I'm interested in it to the extent that I enjoy working with AI code that others have written.  I don't enjoy coding AI myself
10:33:01 <CosmicRay> jlouis: I've seen bunches of references to STG in the 6.2.2 tree.  No idea what it is though
10:33:40 <CosmicRay> it's "that thing which annoys CosmicRay on AIX", actually.
10:33:43 <zippy> CosmicRay: that's cool. are you familiar with the technique where you have a physics simulator and you evolve virtual creatures so that they learn how to walk/crawl/swim?
10:33:58 <CosmicRay> zippy: you speaking of genetic algorithms?
10:34:33 <zippy> yes, genetic algorithms are used to evolve a neural net that controls the motors of a virtual creature
10:34:46 <CosmicRay> I am familiar with the concept of it only
10:35:11 <Lemmih> boegel: Will do!
10:35:23 <zippy> ok, but it's cool right? i was on this mailing list a while ago for this physics library and there were a lot of people who posted videos of virtual creatures that they evolved. really cool stuff
10:35:31 <CosmicRay> zippy: also, every ga researcher I ever knew lived and died in emacs, but that's another story
10:35:42 <CosmicRay> yes, I think it is indeed really neat
10:36:04 <zippy> well, i had this totally sweet idea
10:36:07 <CosmicRay> I wish someone would write an ai chatterbot using genetic principles :-)
10:36:30 <zippy> the other day i had this awesome idea for a real time strategy(rts) game based on this concept of evolving virtual creatures
10:36:47 <CosmicRay> interesting
10:36:49 <zippy> basicly, each player creates his own army of creatures by evolving them, then he sends them to fight against the enemy
10:36:59 <zippy> i think it would be totally sweet
10:37:01 <CosmicRay> is that similar to www.ant-wars.com?
10:37:08 <zippy> i'm not familiar with that
10:37:10 * zippy looks
10:37:26 <CosmicRay> where the competition is to see how good you are at writing a genetic algorithm?
10:37:38 <zippy> CosmicRay: btw, i am the individual who is responsible for megamonad passing the turing test :P but please don't mention my other nick here
10:38:44 <CosmicRay> zippy: I noticed, and OK
10:39:33 <zippy> you noticed? anyway, i have been thinking how the game would work. basicly the gameplay would have 2 modes, one mode where you are in the "lab" and you evolve new creatures. the other mode is the battlefield where you command your army
10:39:46 <zippy> the battlefield mode would be very similar to something like starcraft
10:39:59 <zippy> but instead of deploying hardcoded troops, you would deploy the creatures that you evolve in the lab
10:40:12 <CosmicRay> interesting
10:40:28 <CosmicRay> we expect a prototype by the weekend :-)
10:40:53 <zippy> you think it's a good idea?
10:41:15 <CosmicRay> yes
10:42:36 <zippy> basicly, the lab would work as follows: first you build the "geometry" of your creature by putting together various motors and sensors. then you specify the structure of the neural net you want. then you build a "training area" that has obstacles or whatever you need in order for your creatures to evolve. then you give the fitness function. then you evolve :)
10:42:56 <zippy> the neural net of the creature also gets as input various commands that you can give the troops, like "move to location (x,y)"
10:42:58 <CosmicRay> ahh, so you write the genetic algorithm, and the players devise the parameters.
10:42:59 <CosmicRay> nice.
10:43:18 <CosmicRay> hopefully it evolves a sense of obediance and loyalty :-)
10:43:23 <zippy> hehe
10:44:25 <zippy> an interesting question is if the player should be allowed to extract the genomes from enemy creatures. this way he could simulate in the lab battles against the enemy in order to evolve troops that could defeat the enemy
10:44:47 <zippy> but if he is not allowed access to the enemy genomes then he must think of creative ways to train his creatures to defeat the enemy
10:45:38 <zippy> i think this could be a totally awesome game. a rts that requires real imagination and thinking
10:45:39 <CosmicRay> yo heffalump
10:45:43 <Heffalump> yo.
10:45:45 <CosmicRay> heh
10:47:40 <zippy> brb
11:00:27 <zippy> back
11:02:22 <zippy> so what do you guys think about this idea?
11:03:17 <Heffalump> what idea?
11:03:43 <zippy> you missed out on my whole explanation :) you can read it in the logs i think just before you arrived
11:03:59 <zippy> you should read it, it's really cool =]
11:13:04 <CosmicRay> hmm.  only 370 unit tests for missingh so far. :-)
11:16:26 <Excedrin> zippy: I think that actual GA training would take far to long to use in a RTS, typical RTS games don't last days
11:17:00 <zippy> Excedrin: actually the plan is for it to be a consistent world
11:17:22 <zippy> and server farms could be used to train the ga
11:17:28 <zippy> or at least something like seti@home
11:18:11 <zippy> but you are right that a really powerful server will be needed
11:18:41 <zippy> it must do lots of GA training in parallel and also evaluate the neural net of hundreds of creatures on the battlefield
11:18:49 <Igloo> CosmicRay: Hmm, the docbook2ps manpage says it doesn't support xml, but it does roughly seem to work (the only obvious thing broken is the index, but I haven't looked carefully)
11:19:02 <Heffalump> is there a better portable alternative for serialising stuff than using Show/Read?
11:19:11 <Heffalump> (portability isn't that essential, actually)
11:19:33 <Igloo> I think there are binary ways, but I don't know anything about them
11:20:21 <duncan> Heffalump: in c2hs we use the binary serialisation framework from ghc. we can derive isntances using drift.
11:20:52 <Heffalump> hmm, that sounds like too much hassle
11:21:17 <Excedrin> zippy: that part should happen on the client, but it'll still take forever, it might be fun for a research project, but I doubt if it would have wide appeal
11:21:19 <duncan> as for portability, its portable except between platforms whith different endianness and between 32/64 bit platforms
11:21:41 <Heffalump> and between haskell implementations?
11:22:03 <duncan> Heffalump: ah, that's probably harder
11:22:33 <Excedrin> zippy: I think there's definitely lots of room for a RTS with real imagination and thinking, maybe check out ORTS
11:23:24 <duncan> Heffalump: the implementation of the Binary module would probably need some modifications for different compilers
11:23:24 <zippy> Excedrin: what's that?
11:23:52 <Excedrin> it's a free RTS engine with lots of room for experimentation
11:24:54 <zippy> my plan isn't for something fast pace. it needs to be realtime and not turn based so that people can log in to the game and play anytime they want. but the idea is that most of the gameplay involves high level strategy and planning
11:25:09 <zippy> basicly most of the time you work on creating your army and collecting resources
11:25:25 <zippy> only problem i still have is if someone attacks you when you are not onlinje
11:26:46 <zippy> but even this might not be a huge problem since you could set up very sophisticated automatic defense systems, with patrol guards and alarm systems that automatically deploy troops to the invaded regions, etc...
11:27:48 <zippy> wouldn't this be totally sweet?
11:30:12 <Excedrin> it sounds like empire
11:30:59 <zippy> isn't that text based?
11:31:28 <Excedrin> yes, but it's similar otherwise
11:31:57 <zippy> hm... some how i doubt that. but i don't know much about empire
11:46:31 <zippy> i think this game could work... only problem might be the massive cpu requirements :/
11:53:01 <jlouis> zippy: a grid network is going to take care of that easily ;)
11:53:18 <zippy> problem is who will supply the grid?
11:54:04 <liquidengineer> hello
11:54:49 <liquidengineer> any Macheads around?
11:56:20 <liquidengineer> I'm looking for a good haskell code editor for OS X
11:56:38 <liquidengineer> I've been using TextEdit for my lhs files, but the lack of line numbering is a pain
11:56:39 <jlouis> emacs ;)
11:56:50 <humasect> emacs or eclipse ~_~
11:57:04 <liquidengineer> emacs is the devil
11:57:07 <jlouis> or vi/vim. You can just do :set nu to get linenumbers
11:57:12 <humasect> the devil tastes like happy
11:57:27 <liquidengineer> I feel 50 percent dumber just typing emacs in the command line
11:57:48 <liquidengineer> I tried jEdit, as it's supposed to have python support
11:57:52 <jlouis> the devil takes your mind. But he turns it into beautiful things over time
11:57:53 <humasect> that's the strain of the Light
11:58:05 <liquidengineer> tried to use it for about five minutes
11:58:08 <liquidengineer> decided it blew
11:58:11 <jlouis> emacs?
11:58:16 <liquidengineer> jEdit
11:58:21 <liquidengineer> I can't even figure out HOW to try to use emas
11:58:23 <liquidengineer> emacs
11:58:32 <humasect> so write your own? you seem unhappy seemingly unrelated to the actual software
11:58:33 <liquidengineer> I can open it and stare at it and get scared
11:58:37 <jlouis> Oh, I thought your'e afraid to be tainted by the devil
11:58:53 <humasect> 50% is not relative then
11:58:55 <zippy> but which editor will he use to write his editor? :)
11:59:00 <humasect> heh
11:59:11 <ikegami--> also, Xcode may supports Haskell for MacOSX
11:59:13 <liquidengineer> recursive joking
11:59:21 <liquidengineer> Ooh.
11:59:24 <liquidengineer> I like Xcode
11:59:25 <jlouis> I am thinking it falls for the occurs check
11:59:28 <humasect> unroll that loop, soldier
11:59:38 <xerox> liquidengineer, www.emacswiki.org
11:59:45 <xerox> liquidengineer, it's full of useful resources.
11:59:49 <ikegami--> but, i dont know how difficult to support Haskell for Xcode
11:59:55 <humasect> basically for emacs, just get the save and open file shortcuts and you're set
12:00:10 <humasect> installing haskell-mode is on the .org, it has even numbered steps
12:00:29 <humasect> ...text editor
12:03:31 <liquidengineer> I'm using subEthaEdit right now
12:03:39 <liquidengineer> it's got line numbers and a nice GUI, so I'm happy
12:03:48 <liquidengineer> syntax highlighting would still be cool, though
12:03:51 <jlouis> who needs line numbers?
12:06:49 <liquidengineer> when the haskell interpreter tells you some vague thing about an error at line 120 in a 300 line file, they're kind of nice
12:06:53 <liquidengineer> ;)
12:07:47 <Excedrin> zippy: offload that stuff to the clients, they're like a huge free distributed cluster, and they scale based on demand
12:08:29 <zippy> yeah, but what if no clients are connected?
12:09:03 <zippy> i guess i could restrict the game so that you are only allowed to train the GA when you are connected
12:09:48 <zippy> but then there's the whole issue of fairness, those with lots of fast computers will have a big advantage over those with only one slow pc
12:10:31 <Excedrin> why do they have to be connected to train?
12:10:40 <musasabi> zippy: not to mention the problem with cheats.
12:11:06 <zippy> Excedrin: if clients are allowed to train on there own, then they don't have to be connected
12:11:28 <zippy> musasabi: right, also people could swap creature genomes with each other
12:11:36 <Excedrin> I don't think cheating enters into it, assuming that someone could hand code their AI if they didn't want to use the GA, then there's no problem
12:11:39 <zippy> if everything is done on the server then there are no possible cheats
12:13:26 <zippy> the thing is, it might make interesting gameplay if it costs resources in order to train a new species
12:13:26 <humasect> "yay SVG with haskell (Haven)... oh, needs Java.."
12:14:01 <musasabi> humasect: there is the cairo-svg thing iirc
12:14:07 <zippy> otherwise people could have training farms and make really good species and it would be cheating
12:14:12 <musasabi> http://www.ofb.net/~abe/svg-cairo.shtml
12:14:40 <humasect> Haven should be advertised as "SVG for java. optional bindings for whatever else you may want"
12:14:46 <humasect> (just a little backward)
12:14:48 <humasect> thanks musasabi.
12:15:16 <humasect> ohh very nice :D..
12:15:33 <xerox> 'night folks
12:18:56 <humasect> adherance to portability can be limiting, both creatively and opportunistically
12:20:04 <_Codex> You get portability if you just limit dependencies. And as little deps as possible is always a good thing.
12:20:30 <humasect> yeah..
12:20:53 <humasect> ghc is a satisfyingly robust package.. Object I/O , OpenGL, etc..
12:21:06 <humasect> but the mixing of them i have not found out about yet.
12:34:46 <boegel> hey duncan 
12:36:49 <CosmicRay> argh
12:36:52 <CosmicRay> internal error: stg_ap_p_ret
12:36:52 <CosmicRay>     Please report this as a bug to glasgow-haskell-bugs@haskell.org,
12:37:00 <CosmicRay> is this trule a bug in ghc?
12:37:20 <musasabi> CosmicRay: is that an old ghc cvs?
12:37:38 <CosmicRay> no, ghc 6.2.2
12:38:34 <musasabi> then it probably is something fishy.
12:39:03 <CosmicRay> do you know anything about the general part of code where this is, or anything like that?
12:41:48 <musasabi> well it is something that is generated into code.
12:44:06 <musasabi> that seems to be reported already.
12:44:19 <CosmicRay> oh?  do you have a url?
12:45:03 <musasabi> http://www.haskell.org/pipermail/glasgow-haskell-bugs/2004-December/004493.html, but I don't know whether that progressed.
12:45:16 <CosmicRay> ah, I was just looking at that too.
12:45:21 <CosmicRay> it appears not
12:49:39 <Heffalump> what the hell kind of error is "Parse error in pattern"?
12:50:14 <basti_> hi all
12:51:59 <CosmicRay> uhm, a parse error in your pattern, perhaps? :-)
12:52:02 <CosmicRay> show us, Heffalump 
12:52:09 <CosmicRay> show us your pattern.
12:52:15 <Heffalump> I'm searching by binary chop
12:52:23 <Heffalump> it's not a pattern, that's the point..
12:57:12 <Heffalump> it was a sodding bracket matching error
12:59:00 <xti> Hello
12:59:06 <boegel> hey
13:03:46 <CosmicRay> heh'
13:11:11 <Heffalump> gah, quickCheck shits its results over standard out
13:11:23 <Heffalump> with no option to make it do otherwise
13:21:15 * Heffalump fumes at it
13:22:27 <Heffalump> oh, Debug.QuickCheck.Batch
13:22:28 * Heffalump unfumes
13:29:29 <CosmicRay> heh
13:33:43 * Heffalump refumes due to lack of Read and Show instances for the output
13:33:51 <Heffalump> oh, but I can process it in the forked side
13:36:07 <boegel> how can I 'export' a variable in a do clause ?
13:36:14 <Heffalump> export it to where?
13:36:17 <boegel> do ... x <- something
13:36:37 <boegel> func = do $ x<- bleh
13:36:45 <boegel> the func is _in_ the do clause
13:36:47 <Heffalump> that $ looks wrong
13:37:01 <boegel> yeah forget that, typing error :)
13:37:02 <Heffalump> huh?
13:37:11 <Heffalump> oh, I see
13:37:16 <Heffalump> are you trying to use where to define the func?
13:37:22 <Heffalump> if so, use an inline let instead
13:37:26 <Heffalump> do ...
13:37:30 <Heffalump>    x <- something
13:37:35 <Heffalump>    let func = ... x ...
13:37:37 <Heffalump>    ...
13:37:49 <boegel> Heffalump: I think I can't do that
13:37:55 <Heffalump> why not?
13:38:35 <boegel> one moment, I'll paste it on the wiki
13:38:45 <boegel> @wiki HaskellIrcPastePage
13:38:46 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
13:40:01 <boegel> Heffalump: pasted
13:40:35 <boegel> is the 'onClicked' a definition of a function ?
13:40:38 <Heffalump> ah, that's a scope violation
13:40:45 <Heffalump> so you just can't do it
13:40:53 <Heffalump> you'll need to store it in an IORef
13:40:59 <boegel> I can't adjust the scene variable ?
13:41:08 <CosmicRay> ARGH.
13:41:11 <CosmicRay> I hate heisenbugs
13:41:15 * boegel ducks
13:41:24 <Heffalump> you can't just export it to the other place you want it
13:41:37 <boegel> so, how can I solve this then 
13:41:38 <Heffalump> conceptually, what woul dhappen if renderButton was pushed before loadButton?
13:41:43 <Heffalump> use an IORef, I told you
13:41:55 <boegel> renderButton checks the scene variable
13:42:03 <boegel> scene is of type (Maybe Scene)
13:42:17 <boegel> when it equals to Nothing, nothing is rendered
13:42:29 <boegel> if it equals (Just scene), 'scene' is rendered
13:42:43 <Heffalump> well, then store it in an IORef.
13:42:55 <boegel> so that's why I initialize 'scene' with Nothing
13:43:04 <Heffalump> USE AN IOREF!
13:43:20 <boegel> Heffalump: I'm looking up how that works, yeez
13:43:52 <boegel> you asked me what would happen when loadButton is pressed before renderButton, and I just answered
13:44:15 <Heffalump> ok, sorry :-)
13:44:23 * Heffalump has edited the page with roughly how it should work
13:45:19 <boegel> Heffalump: you edited ? :|
13:45:37 <Heffalump> err, my browser seems to be sitting there trying to POST
13:45:54 * Heffalump pokes it
13:46:07 <Heffalump> >   sceneRef <- newIORef initScene
13:46:12 <Heffalump> >      scene <- loadScene fileStr messageLabel
13:46:12 <Heffalump> >      writeIORef sceneRef scene
13:46:19 <Heffalump> >      scene <- readIORef sceneRef
13:46:25 <Heffalump> is the appropriate code (in different places)
13:46:49 <boegel> i think I get it... thanks
13:48:11 <boegel> Heffalump: should I import anything ?
13:48:37 <Heffalump> errm, not sure what
13:48:39 * boegel found it: Data.IORef
13:48:41 <Heffalump> System.IO or Data.IORef or something
13:48:57 * CosmicRay points out:
13:49:01 <CosmicRay> @index newIORef
13:49:01 <lambdabot> Data.IORef,GHC.IOBase
13:49:21 <CosmicRay> @yow
13:49:23 <lambdabot> I know th'MAMBO!!  I have a TWO-TONE CHEMISTRY SET!!
13:49:39 <boegel> oh, damn :) stupid me
13:54:47 <boegel> works like a charm.. thanks Heffalump (and CosmicRay)
13:55:13 <boegel> no I should just find out how to work witk the PixBuf stuff...
13:55:23 * boegel yells: "Duncaaaaaan !"
13:59:14 <boegel> duncan: are you active ?
14:26:19 <CosmicRay> @yow
14:26:20 <lambdabot> ..Are we having FUN yet...?
14:26:21 <CosmicRay> @yow
14:26:22 <lambdabot> The Osmonds!  You are all Osmonds!!  Throwing up on a freeway at dawn!!
14:28:49 <boegel> CosmicRay: bored ? :)
14:31:41 <boegel> I'm off to bed... g'night everyone
14:43:52 <esap> what's this links thing? Another programming language for building applications?
14:48:55 <Lor> Apparently.
14:49:15 <Lor> Scala comes to mind.
14:49:34 <jlouis> links by phil wadler?
14:49:44 <Lor> But the list of names in the links invitation was pretty impressive, mind you. :)
14:50:08 <jlouis> He has a very good idea
14:51:45 <Lor> Wadler has had quite a number of good ideas over the years. Which one are you referring to? :)
14:54:22 <esap> They're apparently aiming for something practical...
14:55:18 <esap> and combining OO and FP :-)
15:02:28 <Lor> Huh? Where do you see OO?
15:04:41 <esap> "Types; ... ; how do we integrate OO and FP types"
15:04:59 <esap> in the links invitation.
15:05:19 <esap> maybe it refers to some XML stuff I'm not aware though :-)
15:05:38 <Lor> No, interoperability.
15:06:34 <esap> Right. But that's the best you can do. You don't *want* to integrate OO and FP types.
15:07:05 <Lor> Well, subtyping is nice.
15:07:18 <Lor> And that's what OO is all about.
15:08:04 <Lor> Hm, the point is not in subtyping as such, but in suitably constrained _implicit_ (easy to use) polymorphism.
15:08:29 <esap> Well OO is about platforms.
15:08:41 <esap> and reuse.
15:08:50 <Lor> Everything is about reuse. :)
15:08:58 <esap> no, applications are not about reuse.
15:09:17 <esap> FP is not about reuse.
15:09:55 <esap> reuse is what distinguishes OO and FP.
15:10:51 <Lor> Uh, what exactly do you mean with "reuse" here?
15:11:23 <Lor> Just about all "paradigms" support in some fashion the creation of code that can be used in multiple contexts.
15:12:50 <esap> Ok, I mean code that is designed from beginning to be reused in particular way, maybe there are other ways as well, but I'm only talking about the way OO does reuse. compile-time dependencies.
15:14:11 <esap> It's really dependencies that provide the mechanisms for reuse.
15:15:20 <Lor> Why don't ML-style functors count as reuse, then?
15:15:27 <esap> They do.
15:15:57 <esap> But there is a difference as well
15:18:17 <esap> I think the difference is whether you are writing platform or application software. It's all about phase difference.
15:18:31 <esap> s/difference/distinction/
15:20:19 <esap> FP normally reuses whole applications. In contrast, OO tries to reuse small pieces of code.
15:27:18 <esap> But OO doesn't really work if there is no requirement for reuse for the code. FP does work even without such requirement.
15:30:36 * esap should sleep a bit before the morning :-)
15:43:09 <Heffalump> w00t!
15:43:28 <Heffalump> ...I bet someone's now going to tell me this has been done before...
15:43:31 <waltz> w00t?
15:44:06 * Heffalump has stuck a layer on top of QuickCheck so that you can provide explanatory text when a test fails
15:44:18 <Pseudonym> Ooh, that's good.
15:44:22 <Pseudonym> Submit it.
15:45:06 <Heffalump> actually, I play some games so that you can do it using the QuickCheck in the standard libs
15:45:22 <Heffalump> if it was integrated, it'd be fairly trivial
15:45:46 <Heffalump> although I use MPTCs/fundeps to make the type of the explanatory text polymorphic
15:47:48 <Pseudonym> http://www.theage.com.au/news/National/Storms-create-commuter-havoc/2005/02/03/1107228804423.html <- This was my morning.
15:47:51 * Pseudonym sighs
15:53:04 <dons> much nicer in sydney. just some rain and golf ball hail :}
15:53:37 <Pseudonym> I found a 6" thick tree branch on our deck this morning.
15:53:42 <Pseudonym> Standing upright.
15:53:47 <dons> !!
15:53:49 <Pseudonym> No idea how it got there.
15:53:53 <Pseudonym> No damage to the house, thankfully.
15:54:04 <dons> lucky, yes.
15:54:29 <Pseudonym> And we had power this morning.
15:54:46 * dons says something about melbourne weather
15:55:00 <Pseudonym> Well this is worse than it usually is.
15:55:06 <Pseudonym> The thing is, Melbourne weather is very mild.
15:55:18 <Pseudonym> It never gets above 40C for more than a day or two, and when it does it's NEVER humid.
15:55:23 <Pseudonym> (Can't say that for Sydney.)
15:55:24 <dons> yep :} there's some weather anomaly happening
15:55:27 <Pseudonym> And it's never cold enough to snow.
15:55:51 <Pseudonym> The problem is that it was cold, windy and bucketing down last night, and it's sunny now.
15:56:09 <Pseudonym> Melbourne weather is mild, but very volatile.
15:56:28 <Pseudonym> Three seasons in the course of an afternoon.
15:56:37 <Pseudonym> Anyway.
15:56:53 <Pseudonym> It's good for the reservoirs.
15:57:03 <Pseudonym> And I won't have to water the garden for a couple fo days.
15:57:09 <dons> that's true. same here.
15:57:17 <dons> most of the rain fell on the catchment for once
15:57:27 * Pseudonym nods
15:57:39 <Pseudonym> Our local catchment is now 92% full or so.
15:57:59 <dons> should be right then :)
15:58:21 <Pseudonym> Can't say that for all of the other reservoirs.  Melbourne as a whole is around 58%.
19:00:45 <CosmicRay> hi fraxtal
19:00:59 <fraxtal> hey CosmicRay, how are you?
19:02:30 <CosmicRay> pretty good
19:02:33 <CosmicRay> how about you?
19:03:43 <fraxtal> I'm doing alright.  Wondering how hard it would be to put a haskell interpreter in my calculator :)
19:13:10 <CosmicRay> heh
19:13:13 <CosmicRay> what kind of calculator?
19:15:24 <fraxtal> Its a TI-86
19:18:58 <CosmicRay> hmm
19:19:01 <CosmicRay> probably unlikely.
19:19:13 <CosmicRay> I don't think those have enough power to run anything but what they come with
19:19:28 <CosmicRay> an HP, *maybe*, but you would have to definately write it yourself
19:19:45 <CosmicRay> however I do have hugs working on my zaurus pda
19:19:50 <CosmicRay> a fairly easy port even
19:20:34 <fraxtal> really
19:20:44 <fraxtal> That sounds like something I would want to have
19:20:51 <CosmicRay> have you heard of the zaurus?
19:22:53 <Pseudonym> Personally, I use Haskell as my calculator.
19:24:31 <CosmicRay> heh
19:24:38 <CosmicRay> fraxtal: the Zaurus is a line of PDAs made by Sharp
19:24:47 <CosmicRay> fraxtal: it comes with a Linux-based environment from the factory
19:24:50 <CosmicRay> a derivative of Qt
19:25:00 <CosmicRay> there are several alternative environments
19:25:08 <CosmicRay> the most popular is openzaurus (openzaurus.org)
19:25:16 <CosmicRay> I posted a hugs port for it recently.
19:25:25 <CosmicRay> one can also run debian on the higher-end zaurii
19:25:29 <CosmicRay> hugs is already available there.
19:25:44 <CosmicRay> there is also pdaxrom.org, an xfree86-based environment, that also runs on higher-end zaurii
19:28:59 <fraxtal> excellent
19:30:06 <CosmicRay> fraxtal: you  might start with zaurususergroup.com
19:30:34 <CosmicRay> if you want the higher-end ones, with the ultra-high-res 640x480 screen
19:30:42 <CosmicRay> dynamism.com, conics.net.
19:30:52 <CosmicRay> the nicest ones are sold in the japense markets only
19:30:55 <autrijus> hi.
19:30:58 <CosmicRay> the cx60 line
19:31:01 <CosmicRay> I have one of them :-)
19:31:12 <CosmicRay> you can find them on ebay sometimes, or through importers like dynamism
19:31:21 <CosmicRay> (dynamism has fairly high prices though)
19:31:44 <fraxtal> What kind of price?
19:32:16 <CosmicRay> i think they charge around $800 for a new c860
19:32:25 <CosmicRay> their surcharge comes mainly in that they will have converted it to english
19:32:40 <CosmicRay> they sell to the non-do-it-yourselfer crowd :-)
19:33:25 <CosmicRay> I think I got my c760 for around $500
19:33:28 <CosmicRay> on ebay
19:33:31 <CosmicRay> but I don't really remember.
19:33:56 <CosmicRay> the 640x480 screen is the same physical size as the 320x240 screens that are popular on microsoft pdas
19:34:04 <CosmicRay> but brighter and sharper.
19:34:17 <CosmicRay> there is also an openzaurus-affiliated distribution for certain ipaqs
19:34:31 <CosmicRay> though hardware support is not as easy there since they were not designed to run linux at the factory
19:35:17 <CosmicRay> and the lack of keyboard makes it much less useful for programming :-)
19:40:40 <autrijus> zaurus is wonderful for war walking.
19:40:59 <autrijus> and you can script it with whatever language you prefer.
19:41:13 <autrijus> I love my C860 :-)
19:41:46 <CosmicRay> oh, you have a c860 eh?
19:41:48 <autrijus> yes.
19:41:53 <CosmicRay> what firmware rae you running?
19:42:08 <autrijus> Cacko.
19:42:22 <CosmicRay> i recently switch to openzaurus on my c760
19:42:34 <CosmicRay> the annoying bugs in cacko became more annoying than the annoying bugs in oz 
19:42:37 <autrijus> switched around lots of firmwares but currently has other projects, so I stuck with the one that Works.
19:42:50 <autrijus> mm? I stopped upgrading after Elena
19:42:54 <autrijus> Elena is just fine for me.
19:43:09 <CosmicRay> autrijus: I recently wrote a haskell app that converts the address book and todo list from the sharp dtm to oz xml
19:43:11 <CosmicRay> what's elena
19:43:24 <autrijus> Cacko Rom 1.21x
19:43:30 <autrijus> codename elena
19:43:31 <CosmicRay> oh, that's what I had
19:44:45 <CosmicRay> periodic lockups
19:45:04 <CosmicRay> qpe crashing whenever it went from low-res compat mode back to high-res mode, or at least half the time
19:45:08 <autrijus> never seen one here. hrmph.
19:45:13 <autrijus> I don't use lowres at all.
19:45:21 <CosmicRay> I have a number of lowres games
19:45:27 <autrijus> ah.
19:45:28 <CosmicRay> also not being able to sync it with anything sucked
19:45:36 <autrijus> I use scp for all my syncing.
19:45:40 <CosmicRay> heh
19:46:04 <CosmicRay> autrijus: I use rsync
19:46:10 <shapr> good morning #haskell !
19:46:15 <CosmicRay> shapr!
19:46:21 <shapr> John!
19:46:41 <autrijus> oh, btw. I just learned yesterday's @fib example is bad. it should be written thus:
19:46:45 <autrijus> @fib ::= (1, 1, zip(@fib; @fib[1...]).map({ $^a + $^b }))
19:46:45 <lambdabot> Sorry, I don't know the command "fib", try "lambdabot: @listcommands"
19:46:50 <CosmicRay> I was mentioning about 12 hours ago, after someone typed @seen shapr, that I don't think I'd heard anyone say "I saw shapr leaving #haskell" before :-)
19:46:50 <autrijus> which is (almost) elegant. :)
19:47:24 <shapr> CosmicRay: well, I do have an existence outside of #haskell....
19:47:41 <CosmicRay> shapr: yeah, but you rarely close your irc client
19:48:00 <shapr> emacs is being pissy lately.
19:48:03 <CosmicRay> ah.
19:48:17 <shapr> and I gotta get off irc to really focus on my work
19:48:24 <CosmicRay> yeah I understand that
19:48:29 <CosmicRay> I have been ircing too much lately
19:48:35 <CosmicRay> this channel is just too fun and interesting
19:48:44 <shapr> yeah, I totally understand.
19:49:14 <CosmicRay> I had some totally weird errors from the ghc rts earlier today
19:49:19 <CosmicRay> stg_prim_op_p or something
19:49:28 <CosmicRay> one of those that says "if you see this, send a bug report"
19:49:33 <shapr> Nifty!
19:49:52 <CosmicRay> so I started compiling debug versions of everything, so I could get a proper backtrace in gdb.
19:49:53 <shapr> I've gotten those once or twice, but it's not that common.
19:50:01 <CosmicRay> but the bug wouldn't reproduce then!
19:50:12 <CosmicRay> so I went back to the original version, and then I couldn't repdocue it there either.
19:50:13 <shapr> cool!
19:50:17 <CosmicRay> it was happening 100% of the time before.
19:50:39 <CosmicRay> so I have no idea what happened or why it's not happening any more
19:50:42 <shapr> Did you save the .hi files from before?
19:50:45 <CosmicRay> no
19:50:51 <CosmicRay> I cleaned out my tree between compiles
19:50:55 <shapr> oops
19:51:14 <CosmicRay> how would the .hi files have benefited me?
19:51:51 <shapr> Um, might have had some useful info. More likely the .o files though.
19:52:13 <CosmicRay> see, theoretically after I put back the original versions of ghc and python, it should have compiled identical binaries as what I had before
19:52:23 <CosmicRay> and theoretically it hsould have behaved the same
19:52:26 <CosmicRay> yet it did not
19:52:50 <CosmicRay> I hate heisenbugs
19:52:56 <shapr> yeah, they suck.
19:53:19 <CosmicRay> and I'm not really sure that the bug is in ghc anyway
19:53:30 <CosmicRay> I've had plenty of legit segfaults as I debug my python interface
19:53:39 <CosmicRay> but it would be helpful to just crash reliably, dammit :-)
19:53:58 <araujo> Hello friends.
19:54:05 <araujo> Hw your life goes?
19:54:06 <CosmicRay> hi araujo
19:54:10 <araujo> Greetings CosmicRay 
19:54:33 <CosmicRay> araujo: good here.  how about you?
19:54:55 <araujo> probably very very off-topic, but, anyone knows by any chance a good converter from ram to vcd?
19:55:06 <araujo> CosmicRay, Pretty well, thanks, drinking apple juice :-)
19:55:13 <CosmicRay> ram?  realaudio format?
19:55:17 <araujo> yes
19:55:28 <CosmicRay> I don't know of any
19:55:47 <CosmicRay> maybe media converter pro for mac
19:55:48 <araujo> ive thought that probably i will have to convert from ram to mpeg 
19:55:54 <CosmicRay> I'm not 100% I have the name correct
19:55:55 <araujo> and then for vcd
19:56:06 <CosmicRay> but I think it only works with certain older real files
19:56:08 <araujo> Thanks CosmicRay , i'll hunt it down
19:57:13 <shapr> Is there an existing apache plugin that tempbans IPs that try to use exploits on the server?
19:58:07 <CosmicRay> shapr: I think I have heard of such a thing
19:58:41 <CosmicRay> araujo: http://www4.discreet.com/cleanermac/
19:59:02 <CosmicRay> supports 60 video formats so if anything will do it, it probably will
19:59:45 <araujo> hah, sounds big
19:59:55 <CosmicRay> this is a commercial product
20:00:02 <CosmicRay> I've used it a couple of times, a few year sago.
20:00:03 <araujo> though i was looking for something free software.
20:00:07 <CosmicRay> it works as advertised.
20:00:15 <araujo> yeah, i see.
20:00:17 <CosmicRay> araujo: you're out of luck there, i'm pretty certain
20:00:21 <shapr> I'd like to switch to HWS with hs-plugins instead of Apache.
20:00:23 <araujo> yeah :-(
20:00:52 <shapr> CosmicRay: have you tried postmaster?
20:01:02 <CosmicRay> nope, haven't had time
20:02:21 <shapr> aha, http://modules.apache.org/
20:06:49 <shapr> CosmicRay: what kind of article are you writing for FSM?
20:07:05 <shapr> I wonder if those initials are a purposeful joke.
20:07:10 <CosmicRay> heh
20:07:16 <araujo> CosmicRay, check, someone handled me this link, might be useful for you some day http://www.designersoft.co.uk/vcd.html
20:07:25 <araujo> Though it isn't ram, but mpeg
20:07:39 <CosmicRay> shapr: an intro to haskell thing.  Why it's interesting, how to get the ocmpilers, and basics of coding in haskell
20:07:46 <shapr> w00!
20:07:49 <CosmicRay> thanks araujo
20:08:12 <araujo> welcome
20:08:22 <shapr> I'm thrilled more people are getting exposure to Haskell.
20:09:10 <shapr> At the very least it provides perspective that can improve existing procedural approaches.
20:09:12 <CosmicRay> shapr: I think I will start it something like...  "Haskell is a programming language that doesn't have loops or variables.  But it's not a limitation.  Haskell simply doesn't need those features." :-)
20:09:18 <CosmicRay> shapr: exactly
20:09:20 * shapr grins
20:09:36 <CosmicRay> shapr: in fact, I mentioned that angle in my proposal
20:09:45 <shapr> excellent!
20:10:18 <autrijus> hmm. anyone used the CTK?
20:10:21 <autrijus> compiler toolkit that is
20:10:35 <shapr> Yi is using the lazy lexers from CTK
20:10:50 <autrijus> syntax/?
20:10:57 <autrijus> ah, yes.
20:11:07 <autrijus> Self-optimizing lexer combinator. very exciting.
20:11:31 <CosmicRay> I think we should invent the self-optimizing haskell coder.
20:11:47 <autrijus> CosmicRay: I think it's called #haskell.
20:11:52 <CosmicRay> haha
20:11:54 <autrijus> it's optimized lazily.
20:12:01 <CosmicRay> lol
20:12:39 <autrijus> CTK looks very cool. maybe I should just import it.
20:12:59 <autrijus> that way I only has to do the evaluator part.
20:12:59 <CosmicRay> shapr: are you aware of any code that can parse english text into sentences?
20:13:39 <dons> autrijus: yep, I've used ctk for a number of things, including yi
20:13:56 <autrijus> dons: is it pleasant to use?
20:13:56 <dons> mostly just for writing combinator lexers though
20:14:02 * autrijus has only started reading the report
20:14:20 <dons> yes, I think so, for the usual kind of lexer you'd write in a compiler
20:14:30 <autrijus> also, does it only work with happy?
20:14:36 <autrijus> the syntax/ part that is.
20:14:44 <autrijus> my code is currently implemented in parsec
20:15:03 <dons> you should be able to plug the stream of tokens into any parser, I think
20:15:12 <autrijus> okay. woot
20:15:23 <shapr> CosmicRay: LPS maybe/
20:15:40 <autrijus> ok. in that case I'll swallow the GPL drug.
20:15:52 <shapr> mmm, kool-aid
20:16:20 <dons> autrijus: toks <- myCtkLexer src (file,1,1)
20:16:35 <dons> and then just throw the toks around to anything that will eat them
20:16:41 <autrijus> gotcha.
20:17:03 <shapr> CosmicRay: http://lsi.uniovi.es/~labra/LPS/LPS.html 
20:17:16 <CosmicRay> thanks.  I *just* found that url with google :-)
20:17:24 <shapr> CosmicRay: oh hey, Grammatical Framework too
20:17:38 <autrijus> so, for the task of writing an interpreter, I should just use CTK as usual and just hook an evaluator at the end of the pipe
20:17:47 <shapr> CosmicRay: http://www.cs.chalmers.se/~aarne/GF/
20:17:50 <shapr> GF is *fun*
20:18:01 <dons> ctk | parser | eval, surely?
20:18:09 <dons> or is there no parser stage?
20:18:21 <autrijus> there is syntax/Parsers/
20:18:34 <autrijus> trying to see if it can be used
20:18:42 <shapr> I wrote a tiny WASH wrapper for GF that teaches swedish to english speakers. (ie. me)
20:18:52 <dons> autrijus: oh, yes of course.
20:18:58 <CosmicRay> shapr: interesting
20:19:06 <dons> you might be able to use just ctklight
20:19:49 <shapr> The goal was to write some useful software to donate to the local "swedish for immigrants" classes. But I never finished the project.
20:20:02 <autrijus> hmm, but I need symbols&attrs
20:20:04 <autrijus> # Datatypes and routines for handling identifiers, attribute tables, and hierarchical name spaces.
20:20:26 <dons> oh, ok. you're using it for everything! good good. definitely useful.
20:20:45 <autrijus> my target language is huge. I need all the help I can get :)
20:21:09 <dons> is this the perlish thing...?/
20:21:14 <autrijus> this is perl6.
20:21:45 <shapr> CosmicRay: Functional Morphology is interesting too, if you want Haskell code that operates on spoken languages.
20:21:52 <autrijus> or rather, FP6 at the moment.
20:21:53 <autrijus> @wiki FeatherweightPerl6
20:21:54 <lambdabot> http://www.haskell.org/hawiki/FeatherweightPerl6
20:22:12 <dons> you can let me know if there are problems, as Manuel is my supervisor
20:22:19 <autrijus> wonderful. thanks!
20:23:18 <shapr> The type system behind GF is quite nifty, I think it's similar to (or the same as?) Epigram's dependent types. It's easy to use and nicely handles crazy stuff like the 'quantity three' case of some Indian subcontinent language.
20:23:58 <CosmicRay> interesting
20:24:05 <shapr> I'm used to singular and plural in English, and I vaguely recall that something common, maybe German, has a two item case as well. But a three item case was surprising.
20:24:24 <CosmicRay> not german, afaik
20:24:45 <shapr> There's a lot of really cool Haskell code out there.
20:24:57 <CosmicRay> german things just are inexplicably male or female :-)
20:25:30 <shapr> One of the languages I've learned has three cases, male, female, and neuter. Maybe French?
20:25:44 <shapr> Finnish is great, it has only one gender. "han"
20:26:11 <shapr> That causes weird conversation bumps in less than perfect english speakers... "her wife" or "his husband"
20:26:12 <CosmicRay> shapr: english has male, female, and neuter :-)
20:26:20 <shapr> oops
20:26:56 <shapr> Well, not really.. you don't say "la bras" or "le kafe" in English.
20:27:16 <shapr> I've always wondered why 'army' is a feminine noun in French. Doesn't make much sense.
20:27:24 <shapr> hiya heatsink, how's Peltier?
20:27:35 <CosmicRay> shapr: we just use neuter a lot.
20:27:58 <shapr> We don't have gender articles, do we?
20:27:59 <CosmicRay> shapr: however, some inanimate objects do have genders.  especially transportation devices, like ships.  usually female.
20:28:10 <CosmicRay> no.
20:28:25 <shapr> Beers must be male ;-)
20:28:34 <CosmicRay> heh
20:29:15 <shapr> I have a full Budweiser beer can that I keep in my room. I purchased it because I thought the idea of Budweiser as import beer was just too funny to miss out on.
20:29:43 <CosmicRay> hah
20:30:08 <CosmicRay> yeah there are plenty of jokes about americans excited about going to a London pub, asking for their best import, and getting a budweiser
20:30:30 <shapr> Anyway, I should contact TMR authors and setup darcs repos. I still don't know the best way to publish TMR. LaTeX? DocBook? I don't know.
20:30:43 <CosmicRay> what's tmr?
20:30:50 <shapr> The Monad.Reader
20:30:58 <CosmicRay> the wiki page?
20:31:19 <shapr> TMR will hopefully be a monthly Haskell eZine.
20:31:27 <CosmicRay> sounds cool
20:31:35 <heatsink> shapr: Peltier's dead.
20:32:14 <shapr> Well... what do you think of heat charge carriers?
20:32:39 <shapr> autrijus: is FP6 a pun on functional perl?
20:33:10 <heatsink> Not much of an opinion on it...
20:33:42 <heatsink> It's diffusion-based so it can't amplify. 
20:34:45 * shapr thinks about that
20:37:47 <heatsink> actually, I guess it can.  You would need more than one kind of conduction particle to achieve amplification.
20:41:51 <shapr> How so?
20:43:03 <shapr> autrijus: Pugs the dog is way cute :-)
20:43:21 <heatsink> You need a barrier that blocks particle A, but not particle B
20:43:57 <shapr> How does that do amplification?
20:44:23 <heatsink> If particle A blocks particle B, then you can inject some amount of A to modulate a current.
20:45:23 <heatsink> it's like the grid in a vacuum tube.
20:45:51 <heatsink> particle A = cold electrons, particle B = hot electrons
20:52:44 <autrijus> ok. looks like dropping parsec in favor of happy+ctk would be the Right Thing.
20:52:52 <autrijus> shawn_: thanks :)
20:52:54 <autrijus> err
20:52:57 <autrijus> shapr: thanks :)
20:53:51 <dons> why isn't alex+happy suitable for the frontend?
20:56:15 <autrijus> mostly because I had not evaluated alex.
20:56:50 <autrijus> you have good experience with it?
20:57:26 <dons> yep. I almost always use alex and happy. ctk was used in yi primarily as it is dynamically-modifiable
20:57:51 <dons> ghc uses alex and happy, as well.
20:58:32 <dons> I would expect alex+parsec to be common as well.
20:59:09 <dons> but you'll end up writing about the same amount of code for all these, roughly
20:59:28 <dons> ctk =~ alex, and parsec =~ happy.
20:59:39 <dons> in terms of lines of code
20:59:44 <autrijus> hrm.
21:00:25 <autrijus> mostly I've found the mini lexer came with parsec is insufficient.
21:00:36 <dons> the main difference being that alex and happy look like lex and yacc, whereas ctk and parsec are combinator based, and may be simpler for beginners (?)
21:00:38 <autrijus> Text.ParserCombinators.Parsec.Language that is.
21:00:48 <jadrian> autrijus: why are you droping parsec for happy?
21:01:08 <autrijus> jadrian: because I already has yacc-like grammar on hand
21:01:08 * jadrian has only worked with parsec
21:01:16 <jadrian> ah ok
21:01:20 <autrijus> jadrian: I'm suspecting happy will be happier with it
21:01:24 <jadrian> right :)
21:01:49 <jadrian> I looked at happy before but parsec seemed much more simple, I didn't know about ctk, googling for it now
21:02:23 <autrijus> dons: so what does ctk's _support for happy_ do?
21:02:55 <dons> I found that difficult to use (it was a while ago), but seem to recall it let you hook it into old happy easily.
21:02:57 <autrijus> dons: is it a wrapper for happy that adds Pos and State during the parse?
21:03:15 <autrijus> as in, it does not work well with newer happy?
21:03:42 <dons> no no. it should work well. happy makes the special support unnec. now.
21:03:51 <autrijus> oh! how?
21:03:59 <dons> i think that stuff is for old happy from maybe 5 years ago
21:04:02 <autrijus> (sorry, complete newbie here)
21:04:17 <dons> when it lacked lots of wrappers and support for monads
21:04:31 <autrijus> 'kay
21:04:54 <autrijus> happy looks very happy indeed.
21:05:10 <autrijus> thanks to the monad support
21:06:29 <shapr> I occasionally wish for an arrow-style Parsec. But not hard enough to write it :-)
21:10:48 <shapr> Is that the right adjective? wish hard? wish strong?
21:10:48 * shapr gives up and continues reading swedish
21:10:48 <shapr> autrijus: do you ever get that sort of stuff confused among the languages you speak daily?
21:11:03 <shapr> I wonder why laptops aren't self-winding. I wonder what's the max energy output of self-winding hardware.
21:11:31 <dons> I'd really like a dynamo-winder-thingy for my laptop. that'd be cool
21:11:48 <autrijus> shapr: frequently. which is why you see me using broken engrish all the time.
21:12:39 <shapr> Er, I don't think I've seen you usin broken engrish. I think your written english is better than mine.
21:14:06 <shapr> dons: maybe a laptop case that has a layer of the watch self-winding thingies. That might put out enough to really charge a laptop slowly.
21:14:46 <dons> have you seen the windup radios, and windup mobile phone chargers?
21:14:59 <dons> they require a bit of output from the user though. they're not automatic
21:15:05 <shapr> I've seen windup radios, but not windup mobile phone chargers.
21:16:18 <shapr> I took apart a self-winding watch once, it was just a disc on a ratcheted post with half of the disc missing. So moving your arm wound the watch.
21:18:27 <shapr> I've wondered whether a spherical version of such a critter might be useful in a laptop. A sphere would probably generate more current, and be useful a laptop orientation sensor.
21:19:26 <dons> there are also windup torches, and torches powered by shaking magnets around. what's that effect called?
21:19:40 <shapr> induction charging, pretty much
21:20:36 <shapr> In essence, a coil of wire and a magnet is all it takes to make a solenoid, an electrical motor, or a generator.
21:20:42 <dons> oh, Faraday's something.
21:21:10 <dons> but maybe the magnet would be a bit of a problem next to the hd.
21:21:40 <dons> what about something powered by radioactive decay.. hmm
21:21:53 <dons> works for space probes, right?
21:21:57 <shapr> That would be perfect actually, those guys make enough heat to power a small car.
21:22:14 <shapr> On the downside, most of the good ones aren't really safe for humans.
21:22:23 <dons> there's that atomic keyring on theregister.co.uk
21:23:03 * shapr googles
21:23:32 <shapr> Is it real tritium?
21:23:32 <dons> http://www.theregister.co.uk/2004/12/07/glowring_returns/
21:23:50 <dons> can't ship it internationally...
21:24:00 <shapr> Wow, ten years... must be tritium.
21:24:12 * shapr tries to remember how tritium decays.
21:24:24 <shapr> beta radiation? alpha radiation?
21:25:50 <dons> beta?
21:25:54 <shapr> In any case, that sort of critter should be perfectly safe if you don't open it up. But as ionizing radiation goes, alpha is the most damaging, but the easiest to protect against, beta is in the middle on damage and ease of protection, and gamma is not very damaging but very difficult to protect against.
21:27:05 <shapr> Alpha radiation is a helium nucleus, Beta is a 'fast electron', gamma is a photon pretty much. Fast neutrons aren't ionizing.
21:27:25 <dons> yep.
21:28:07 <shapr> http://en.wikipedia.org/wiki/Radioactivity
21:28:08 <ralf> @type length
21:28:11 <lambdabot> length :: forall a. [a] -> Int
21:28:33 <dons> what about solar panels on the lid of the laptop
21:29:05 <shapr> That's really the best solution. If you use the most recent quantum pit solar cells you can get a decent amount of power.
21:30:09 <shapr> I wonder if the new solar cells are flexible. I'd like to have a jacket made out of that to charge a bunch of gear... mp3 player, cellphone, laptop, etc...
21:30:19 <dons> shiny pants!
21:30:27 <shapr> haha!
21:30:52 <shapr> Have you seen the Scott eVest? - http://www.scottevest.com/v3_product_info/features.shtml
21:31:35 <shapr> It's designed to let you run power/communication wires among the hardware in your varous pockets.
21:31:54 <ralf> Shapr, they're all photons.  Whenever an electron slows down, a photon is emitted.  The frequency of the photon is related to the change in energy by a factor of plank's constant.   If I have a function foo :: a -> b, I  know how to ask the interpreter what the type of foo is (:type foo), but how can I write a program that will print the type of foo?  Can it be done? 
21:32:24 <shapr> ralf: An alpha isn't a photon.
21:32:44 <ralf> shapr: Yeah. You got me. 
21:32:56 <ralf> shapr:  what about the types though? 
21:33:05 <dons> two ways I can think of: 
21:33:16 <dons> 1, use Data.Dynamic.typeOf for monomorphic values
21:33:26 <shapr> alpha :: Radiation (Neutron,Neutron) (Proton,Proton)
21:33:28 * shapr snickers
21:33:29 <dons> 2, if it is exported from the module, you can read the .hi file for the full type.
21:33:40 <dons> depends on how bad you need the type
21:33:49 <dons> most people are happy with 1.
21:34:00 <shapr> g'mornin monochrom 
21:34:03 <dons> maybe not happy, resigned perhaps.
21:34:18 <shapr> Ah, that's a good name for an arrow-style parser.
21:34:49 <dons> 3, show the value and spit it into ghci at runtime (essentially do the type inference at runtime)
21:34:53 <dons> 4, maybe via TH?
21:34:57 <ralf> shapr: And how can I start reading the ghc compiler code?  I wanna read the haskell compiler because I think it will help me understand what the hell functional programming is all about.  And I want to be able to refer to it with questions. 
21:35:14 <monochrom> morning shapr
21:35:30 <shapr> I think you're more likely to understand FP by writing a bunch of small Haskell programs.
21:35:44 <dons> ralf: hmm. ghc isn't the best example of functional programming, but the libraries are very instructive, once you've got the main stuff understood
21:36:03 <shapr> The Prelude is good reading code. GHC isn't.
21:36:26 <dons> agreed. you'd start reading ghc code if you wanted to hack ghc
21:36:30 <dons> or write a compiler
21:38:08 <dons> got confirmation on point (4) above.
21:38:11 <shapr> It's funny that language implementations aren't often instructive examples of the language.
21:38:32 <dons> any other ways to recreate the lost types at runtime (or via compile time tricks)?
21:39:03 <shapr> type-carrying code?
21:39:12 <shapr> I wonder if Goffin does that.
21:39:19 <dons> yeah... but that's sort of typeOf/Dynamic right?
21:39:27 <jadrian> I've learned a couple of things by looking at GHC sourece code
21:39:35 <shapr> right, good point.
21:40:00 <dons> toDyn is how we unlift types into values in Haskell
21:40:22 <dons> but maybe there is some other way, considering the number of ways to lift values to types...
21:40:28 <jadrian> I like looking at the differneces between the standard H98 definitions and the GHC implementations
21:40:31 <dons> something with dictionaries?
21:41:16 <dons> oleg could probably encode the type as an error message
21:41:37 * shapr snickers
21:41:51 <shapr> Oleg needs a superhero outfit.
21:42:07 <dons> no, I'm serious. he has a whole system for getting good error messages out of hlist-style tricks
21:42:33 <shapr> I know you're serious, but it's still like the HM-men (as opposed to the X-men)
21:42:47 <dons> yep.
21:43:41 <shapr> I love being in a community where there are people who say stuff that I have absolutely no clue about. It means I still haven't found my way into the top end of the language/community.
21:43:41 <shapr>  say
21:44:15 <dons> so, do we only have 4 obvious ways to get a type from a value, and three are equivalent (TH == ghci == type in .hi file), and Data.Dynamic
21:44:44 <shapr> Man, ERC is really whacked. I didn't type " say<enter>"
21:44:44 <autrijus> Data.Dynamic == Data.Typeable.typeOf ?
21:44:56 <dons> yeah.
21:45:55 <dons> oh, you could call ghci at compile time via TH with the value, and then (statically) generate code encoding the type.
21:46:16 <dons> like (3) except statically
21:46:33 <dons> if only ghc's type inference was available as a library
21:46:47 <shapr> Could I use one of these approaches to implement RTS-mobile types?
21:47:12 <dons> define a type on one rts, and send a value of that type to another? (you'll have to remind me)
21:47:29 <shapr> Right, exactly that. I'd like to have Erlang's mnesia in Haskell.
21:48:34 <shapr> I remember trying to turn type table entries into something I could send across the wire to another RTS, but I was unable to get anything useful out of the type table.
21:49:35 <dons> hmm. you might be able to wrap up the new type with its accessor functions, and send those too
21:50:01 <shapr> Sounds like magic, how?
21:50:09 <Lemmih> Good morning, #haskell.
21:50:18 <dons> I just don't know how to have (previously compiled code) understand the new type.
21:50:27 * Lemmih yarns.
21:50:32 <shapr> g'mornin Lemmih!
21:50:34 <dons> so if we hide the new type, and only access it via functions that produce old types..
21:51:01 <shapr> dons: huh, neat idea. Even so, I'm perfectly fine with sending across something that requires hs-plugins on the other end.
21:51:24 <shapr> That's starting to sound like SPJ's supercombinator approach though :-)
21:52:14 <dons> it's just that you can't, say, compile a value of (x :: MyType) and send it to a program/rts that doesn't know about this type, unless we really can register it with the rts somehow, or poly/generalise it so that it's safe
21:52:57 <shapr> You effectively do that with hs-plugins, don't you?
21:53:32 <shapr> Or you could run the whole program in ghc --make and throw in new types via TH, like I suggested before.
21:53:44 <dons> if you ever need to actually touch the type, the application must already know about it (it has to know the shape, essentially)
21:53:52 <shapr> That's the easy cheesy way to carry the typechecker around with you.
21:53:56 <dons> hmm. running in TH -- so ghci becomes the rts, sort of
21:55:01 <shapr> Problem is that I can't figure out how to turn a chunk of source into TH-lifted types.
21:55:47 <shapr> I swapped some emails with seafood about how to do that, but I forget the conclusion.
21:56:00 <ralf> what's ERC?
21:56:09 <tintin> erc is emacs irc client
21:56:13 <shapr> I'm using ERC Version 4.0 $Revision: 1.693 $ with GNU Emacs 21.3.1 (i386-pc-linux-gnu, X toolkit, Xaw3d scroll bars, built 2004-10-16)!
21:56:22 <tintin> I'm using ERC Version 5.0 $Revision: 1.735 $ with GNU Emacs 21.3.50.1 (i686-pc-linux-gnu, X toolkit, Xaw3d scroll bars, multi-tty, built 2004-12-28)!
21:56:31 <shapr> 5.0 ?? when did that happen?
21:56:32 <ralf> and :: [Bool] -> Bool.  Is there any binary and? 
21:56:41 <dons> here's some seafood answer for TH/(4): runQ (typeOf [| add3 |])
21:56:43 <shapr> @type (&&)
21:56:45 <lambdabot> (&&) :: Bool -> Bool -> Bool
21:56:52 <dons> where typeOf is something like typeOf :: Q Exp -> Q String
21:56:58 <tintin> shapr: you should stick around more often in #emacs :) not too long ago a month maybe 
21:57:13 <shapr> tintin: problem is, emacs has terminally pissed me off.
21:57:27 <tintin> lol your are still using it :)
21:57:28 <shapr> I don't want to learn anything new about it, I'd rather put any leftover energy into Yi.
21:58:16 <ralf> shapr: what's yi? 
21:58:17 <dons> wow, TH lets you really get at bits of the typing environment
21:58:34 <ralf> what's TH?  Am I asking too many questions? 
21:58:44 <dons> http://www.cse.unsw.edu.au/~dons/yi.html
21:59:02 <shapr> th - http://www.haskell.org/th/
21:59:32 <dons> ralf, why did you want to write a program that could print a type?
21:59:54 <shapr> ralf: questions of any flavor are acceptable as long as you've already used google, locate, or whatever to try to find the answer yourself.
22:00:01 <dons> (since all types are discarded at compile time in Haskell)
22:01:04 <dons> as you can see, the problem of reconstituting types at runtime is fairly interesting
22:01:49 <shapr> Though I prefer Lor's approach of proof-carrying code. Seems easier to deal with.
22:02:21 <shapr> Where proof means anything from the full source on down to a rough sketch of the types of the code.
22:02:31 <dons> yeah, if we keep the types for longer, then it is much simpler. rather than trying to re-infer the types, or carry fragments of them with us.
22:03:22 <dons> TH/ghci/etc. are all reinferring the types. Data.Dynamic keeps them as values, as do .hi files.
22:03:31 <ralf> dons: shapr, thanks for the good answers.  Both of those ideas (th, yi) sound very interesting.  
22:03:59 <dons> maybe a special flag could dump the binary representation of certain types into a segment in the object
22:04:05 <ralf> dons: I was writing some code to play around with function composition and partial application so that I could understand these ideas better.
22:04:28 <dons> ghci is probably good for experimenting like that.
22:04:30 <ralf> I made functions like foo :: A->B  foo _ = B
22:04:38 <shapr> ralf: "Types and Programming Languages" by Benjamin C. Pierce is a thorough introduction to stuff like that.
22:04:41 <ralf> where data A = A deriving Show. 
22:04:48 <shapr> aka "The Brick" or "The Brick Book"
22:05:28 <autrijus> highly recommended.
22:05:58 <autrijus> it can teach a CS dummie like me start implementing languages in no time.
22:06:19 <shapr> oh, I'm a cs dummie too!
22:06:32 <dons> another is Bob Harper's "Programming Languages: Theory and Practice"
22:06:44 <dons> available online as a draft: http://www-2.cs.cmu.edu/~rwh/plbook/
22:07:15 <dons> the prog.lang. course at unsw uses both these texts.
22:07:38 <dons> and spj's now-ocr'd book
22:07:45 <autrijus> how is online.pdf and offline.pdf different?
22:07:50 <autrijus> the now-ocr'ed book is heavy.
22:07:52 <dons> pagination, I think
22:08:10 <dons> autrijus: it's really good if you're trying to implement a Haskell-ish language.
22:08:11 <shapr> I want to learn more about region-allocation as in Moscow ML. I think that will be applicable to NDP.
22:08:24 <autrijus> dons: I guess I should buy it then. 
22:08:26 <dons> for example, the chapter on how to do dependency analysis for letrecs
22:08:33 <autrijus> dons: is there a more recent treatment for the same topic?
22:08:51 <shapr> Is the text for SPJ's OCRed book available? I'm sure I could help with proofreading.
22:09:00 <dons> there's also Appel's book.
22:10:02 <dons> "odern Compiler Implementation in ML"
22:10:30 <dons> In fact, there's a list: http://www.cs.uu.nl/people/franka/ref
22:11:03 <shapr> The famous Goth, Frank Atannasow!
22:11:55 <shapr> I still want to get frank and conor in the same room and hear them argue about dependent types.
22:12:17 <shapr> Maybe I can get them to do it on IRC and reformat the discussion for publication in TMR.
22:13:24 <shapr> Speaking of TMR, I still don't know the best way to publish it...
22:13:33 <autrijus> TMR?
22:13:52 <shapr> The Monad.Reader.
22:13:55 <autrijus> oh oh
22:14:01 <autrijus> Monad.Reader.The
22:14:05 * shapr grins
22:14:10 <ralf> dons: anyway, I made up a bunch of trivial functions with complicated types and was seeing how I could compose them.  I loaded the functions into the interpreter and played with them there, but I thought it would be neat if I could code up a bunch of examples and print out the types directly from the program itself. 
22:14:23 <ralf> shapr: did you ever study number theory? 
22:14:30 <autrijus> shapr: TPJ and TPR are both quite successful with minimal staff
22:14:36 <autrijus> shapr: look at esp. TPR's model?
22:14:49 <shapr> What's TPR? And what's its model?
22:14:49 <autrijus> www.theperlreview.com/ , www.tpj.com/
22:15:19 <dons> ralf: but Haskell discards all types at compile time (barring the tricks I describe above) - so printing types at runtime is not trivial
22:15:40 <shapr> ralf: I only studied humanities and radiation safety at school. But I've read a bit about number theory for fun.
22:15:44 <autrijus> shapr: subscription-based, but optionally open up old issues online
22:15:44 <dons> the benefit is that, once it all compiles, you know it works.
22:15:56 <autrijus> shapr: when the subscriber reached a certain amount, start printing in paper
22:16:07 <dons> s/works/won't crash/
22:16:28 <ralf> dons: good to know.  
22:16:47 <ralf> shapr: I'm translating the number theory that I'm reading into haskell.  It's really fun. 
22:17:19 <shapr> Hm, I'm most interested in a web/wiki version, and a PDF/PS version that looks decent when printed. And I'm positive I'll need category theory stuff like LaTeX's xypic.
22:17:30 <shapr> ralf: have you seen the Haskell Road to Math and Logic?
22:18:58 <shapr> So, LaTeX would work, but I've never used LaTeX before. Some people recommend DocBook, which I have used before, but I don't think it has any support for category theory notation. I'm open for any advice!
22:21:57 <musasabi> morning
22:22:12 <ralf> shapr: No I haven't, but I'm very interested.  I'll google about it and then ask you what you mean. 
22:22:37 <shapr> hyvää paiva musasabi 
22:22:55 <shapr> oops, that was latin-1
22:23:12 <musasabi> god morgon, Shae
22:23:26 * shapr grins
22:24:15 <ralf> shapr: So someone's already thought of it.  Good.  Sometimes it's good to re-invent the wheel until you actually have someone else's solution in your hands. 
22:24:24 <shapr> Ohayou gozaimasu Einar-san
22:25:21 <shapr> I don't know if -san matches formal situations.
22:26:30 <musasabi> -san is quite good for normal formal sotiations - I think in the same group as Mr. in english (except gender neutral)
22:27:02 <shapr> That's good to know.
22:27:02 <ralf> shapr: I lived in Japan for a year. 
22:27:10 <shapr> ralf: neat
22:27:16 <ralf> shapr: thanks. 
22:27:26 <musasabi> although I think it is used with last names most of the time.
22:27:46 <ralf> shapr: I want to buy all these books, but I don't have any money. 
22:27:57 * shapr adds that to his microscopic database of japanese social behaviour.
22:28:16 <shapr> ralf: I know the feeling. I read the free books and save up for those that are dead-tree only.
22:28:38 <ralf> shapr: You read the free books online?  Isn't that difficult? 
22:28:41 <shapr> I'm also saving up for expensive unicycle bitz too.
22:28:53 <Gahhh> My laptop has about 10-12 free books
22:29:13 <ralf> Gahhh: Isn't it annoying to read pdf and postscript online though? 
22:29:29 <shapr> No, I don't think so. In many wasy it is easier for me to read on a computer than on paper. I do wish I could scribble with a stylus on the screen though.
22:29:35 <musasabi> Bonjour, monsieur Erisson ;)
22:29:45 <musasabi> (but I don't really know french)
22:29:46 <Gahhh> ralf, it is somewhat. I rotate the pdf's so that it even looks like a real book heh
22:29:57 <shapr> Bonjour Monsieur Karttunen! J'aime les française!
22:30:41 <Gahhh> shapr, it is beyond me why anybody hasn't implemented your pdf/ps annotation stuff yet.
22:31:03 <ralf> shapr: well, do you have a touch sensitive screen? 
22:31:12 <Gahhh> because we produce and review electronic documents at work, and you'd think there's a business opportunity.
22:31:36 <shapr> Gahhh: I guess because no one thought of it before? I have a lot of ideas that sound obvious once I've thought of them. Or maybe Terry Pratchett is right, ideas happen to a lot of people at the same time.
22:31:41 <ralf> Gahhh: Definately. 
22:32:06 <Gahhh> Terry Pratchett is God, or close at least
22:32:06 <shapr> I think that the scaffolding model of learning is societal as well.
22:32:17 <ralf> Reading online just is not as good as it could be. 
22:32:57 <Gahhh> ralf, *they* don't want it to be. It's a conspiracy to hold back the third world countries !
22:33:18 <ralf> Gahhh: I think that's not far from the truth. 
22:33:55 <shapr> Gahhh: so you want to be one of my alpha testers for FLM?
22:34:20 <Gahhh> shapr, do you have something to test ? I'll break it.
22:34:53 <shapr> Heh, I'm sure. I don't yet have something to test, but it's the social aspect of FLM that really needs feedback.
22:35:13 * Gahhh is running Litestep on WinXP and VNC'ing into a linux box for irc. Wonders if a desktop can look more bastardized.
22:35:43 <shapr> My goal is to share community knowledge of research papers, effectively "turn on comments on research papers".
22:35:59 <shapr> musasabi and Darius Bacon have both said that the annotation idea could be much more general.
22:36:21 <Gahhh> shapr, so is it going to be like a webforum around a document ?
22:36:52 <shapr> I don't know. I'd like to start with the distributed server-less read-only darcs-wiki approach, but that might totally suck.
22:38:15 <Gahhh> how big is a png file of a page from a PDF ?
22:38:29 <shapr> I also realize that there's a very specific relationship between object and annotations that is most likely the domain of this application. I can see that an app that specifically followed that would be best. But I don't yet know how to do that.
22:38:48 <shapr> Gahhh: whatever you want, the user can choose the size of the generated images.
22:39:27 <musasabi> My idea is that file-level comments are usefull as is searching the comments.
22:40:14 <Gahhh> I'm not familiar with any of them, but are there anyy groupware apps that have this as a goal ?
22:40:20 <shapr> I don't know of any.
22:40:23 <musasabi> shapr: So you would store comments with a page+coordinate and create the pngs on demand for people (as different people will want different resolutions etc)
22:40:48 <Gahhh> It may be a good idea to sell this idea to an open-source bigger scale groupware app people.
22:40:49 <shapr> Right, pngs will already be on-demand with FLM, because I can't redistributed research papers.
22:41:50 <shapr> musasabi: You suggested image annotation as well. Darius mentioned that someone is looking for a way to annotate everything in the Gutenberg project.
22:42:14 <ralf> Someone broke into my house last night and replaced my stereo and all
22:42:14 <ralf> of the furniture with exact replicas.
22:42:59 <Gahhh> Impossible. Furniture are universally unique.
22:43:51 <shapr> There must be a simple general approach to annotating any software object.
22:44:38 <Gahhh> XML !!!
22:44:40 * Gahhh grins
22:45:00 * Gahhh throws acronyms at you relentlessly
22:45:02 <shapr> musasabi: You suggested annotation of items in a collection, large items such that you'd only want a few items on your PC at a time. That leads me to believe that each item should have its own 'darcs repo' or whatever collects annotations. But I don't know the next step after that.
22:45:18 <shapr> Gahhh: wtf utsl ianal ikwym
22:46:17 <shapr> Showers are good for inspirations.
22:46:22 * shapr goes to have a shower.
22:46:52 <musasabi> shapr: well I think adding signing comments would be usefull - and it is certainly easier to sign bundles of comments than each invidual comment. But this is more of an implementation detail.
22:47:25 <musasabi> when darcs starts supporting signed patches this should just work.
