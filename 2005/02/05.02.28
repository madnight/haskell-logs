00:00:05 <Itkovian> eh?
00:05:10 <ycheng> I try to setFileMode "file" 1, it works.
00:06:01 <Lemmih> @info System.Posix.Types.FileMode
00:06:03 <lambdabot> -- System.Posix.Types.FileMode is a type constructor
00:06:03 <lambdabot> type System.Posix.Types.FileMode = System.Posix.Types.CMode
00:06:13 <Lemmih> @info System.Posix.Types.CMode
00:06:15 <lambdabot> -- System.Posix.Types.CMode is a type constructor
00:06:15 <lambdabot> newtype System.Posix.Types.CMode
00:06:15 <lambdabot>     = System.Posix.Types.CMode GHC.Word.Word32
00:06:38 <Lemmih> ycheng: setFileMode "file" (CMode 1)
00:15:32 <shapr> Yow, Surly Bikes is making 3.7" tires for their 65mm Large Marge rim. I'm in love!
00:15:51 * desrt scratches his head
00:16:05 * shapr scratches desrt's head.
00:16:13 * xerox joins the scratching party
00:16:36 <desrt> thanks guys :D
00:16:54 <desrt> i cannot sleep :(
00:17:00 <shapr> I could do a lot more riding with a 3.7" tire on a 65mm rim.
00:21:56 <ycheng> Lemmih: Data constructor not in scope: `CMode' !! I have import System.Posix.Types !
00:29:37 <Lemmih> ycheng: Ah yes.
00:30:14 <Lemmih> ycheng: Use the predefined modes.
00:32:20 <Lemmih> @type 10 :: System.Posix.Types.CMode
00:32:22 <lambdabot> 10 :: System.Posix.Types.CMode :: System.Posix.Types.CMode
00:34:15 <ycheng> Lemmih: I still didn't get it. in such case, Coundn't match 'System.Posix.Types.FileMode' against 'Integer' shouldn't come out ?
00:34:32 <ycheng> to Integer is come from toInteger...
00:35:12 <Lemmih> @type System.Posix.setFileMode "" 10
00:35:14 <lambdabot> System.Posix.setFileMode "" 10 :: IO ()
00:36:10 <ycheng> @type System.Posix.setFileMode "" (toInteger "10")
00:36:12 <lambdabot> bzzt
00:36:19 <Cale> fromIntegral
00:36:28 <Lemmih> ycheng: Why are you using toInteger?
00:36:37 <Cale> or read is probably what you want there
00:36:52 <Oejet> Good morning Lemmih.
00:36:58 <Cale> @type read
00:37:00 <lambdabot> read :: forall a. (Read a) => String -> a
00:37:07 <ycheng> oops, I still don't know "read". let me study read @_@
00:37:55 <Oejet> Greetings ycheng from Taiwan.
00:37:56 <Lemmih> Oejet: Hey. I've been thinking a little about a danish ICFP team...
00:38:05 <desrt> On April 20, 2004 Bill Tozier (http://williamtozier.com/slurry), a researcher with Erd?s number 4, offered the chance for collaboration to attain an Erd?s number 5 in an auction on eBay[1] (http://cgi.ebay.com/ws/eBayISAPI.dll?ViewItem&item=3189039958). The final bid was $1,031.
00:38:34 <desrt> Erd≈ës, rather
00:39:05 <desrt> eep.  my term is borked :(
00:39:17 <desrt> Erd≈ës <- think this is right :)
00:40:11 <shapr> You know we have at least one person with an Erd√∂s number of three on this channel?
00:40:17 <Oejet> Lemmih: That would be nice.  Although, I have bugged my fellow students so unless they're too busy or something, I think, I have a team.  Were're not going to use Haskell though. :-(
00:40:23 <desrt> who are they?  i want to write a paper with them :)
00:40:30 <shapr> desrt: I'm not going to tell you :-P
00:40:40 <ycheng> Oejet: Hi
00:40:45 <shapr> desrt: mostly because I'm in line in front of you!
00:40:48 * shapr cackles evilly
00:40:51 <desrt> ok
00:41:02 <desrt> the obvious solution is for us to write a paper together
00:41:06 <Gahhh> What is an Erdos number ?
00:41:14 <desrt> then if either of us writes a paper with this person in the future, the other will benifit
00:41:28 <desrt> http://en.wikipedia.org/wiki/Erd%F6s_number
00:41:31 * Oejet tackles shapr and gets to him first.
00:42:34 <Oejet> My teacher has an Erdˆs number of one.
00:42:44 <desrt> fear.
00:43:01 <shapr> scary.
00:43:10 <Cale> Oejet: you should write a paper together :)
00:43:15 <Oejet> desrt: My teacher has a better Erdˆs number that your teacher. :-P
00:43:49 <Oejet> Whoa, what do you think a number of two would go for on eBay?
00:43:56 <shapr> Oh, according to that article we have one person on #haskell with an Erd√∂s number of 2.
00:43:59 <desrt> $127
00:44:26 <desrt> shapr; who?
00:44:40 <shapr> desrt: I'm just going to torture you :-P
00:44:44 * shapr is evil
00:44:56 <desrt> you're a real jerk sometimes, you know :P
00:45:21 * shapr cackles evilly
00:45:36 <Oejet> ycheng: New to Haskell?
00:45:39 <shapr> desrt: C'mon, it's not hard to find out.
00:45:45 <desrt> http://www.oakland.edu/enp/ErdosA
00:45:59 <desrt> very time consuming
00:46:05 * desrt takes some guesses and uses /whois
00:46:18 <ycheng> Oejet: yes
00:46:40 <ycheng> Oejet: I am trying to write chmod for pugs.
00:46:41 <shapr> Man if I'd known about the Erd√∂s number of 2 going for $127, I'd have put in some cash.
00:46:49 <shapr> Talk about geek points.
00:47:33 <Oejet> ycheng: A lot of Perl people has joined lately thanks to Autrijus. :-)
00:48:06 <ycheng> Oejet: I am not perl people or person, just feel interesting about funcional language.
00:48:42 <ycheng> Oejet: I read scheme long ago, for personal interest. but didn't have chance to write program.
00:49:05 <desrt> omg.  it's cale
00:49:07 <desrt> i had no  idea
00:49:11 <Oejet> ycheng: Ah, so I guess Pugs is nice exercise platform.
00:49:27 <ycheng> Oejet: as learning haskell, learn more about functional language !
00:49:37 <Oejet> ycheng: I see.
00:50:27 <desrt> the funny thing is that almost anyone who has published a paper probably has an erdos number
00:50:48 <desrt> except for maybe some very small local groups that are otherwise disconnected
00:53:54 <Itkovian> @wikie TheMonadReader
00:53:54 <lambdabot> Sorry, I don't know the command "wikie", try "lambdabot: @listcommands"
00:53:58 <Itkovian> @wiki TheMonadReader
00:53:58 <lambdabot> http://www.haskell.org/hawiki/TheMonadReader
00:57:55 <desrt> interesting
00:58:14 <desrt> according to some interpretation, on HaskellIrcChannel i'm a black belt, 6th dan
00:58:41 <desrt> but really, i'm more like brown
00:59:01 <dons> yeah desrt. porting ghc, and hacking on the Linker is rated highly on that scale.
00:59:10 <musasabi> How long should GHC6.4 compile on a Pentium/MMX @ 266 with 128mb memory?
00:59:23 <dons> hmm. 8 hours?
00:59:26 <desrt> dons; it shouldn't be as high as it is.
00:59:56 <musasabi> ok, have to hope it doesn't die and just leave it there.
01:00:30 <danb_> "rest of akward squad"?
01:00:38 <dons> desrt: yeah, but haskell hackers are divided into rts and type system hackers.
01:00:56 <shapr> danb_: are you the Daniel Brown I've seen on the darcs mailing list?
01:01:04 <Oejet> musasabi: I think it's more like 20 hours.
01:01:07 * desrt gives up on erdos
01:01:19 <musasabi> argh.
01:01:19 <danb_> shapr: i'm the Daniel Brown that recently had an email discussion with you about DSLs for audio players
01:01:26 <shapr> oh hii!
01:01:33 <shapr> nice to meet you realtime!
01:01:34 <danb_> shapr: but i don't think i've interacted with the darcs list
01:01:37 <danb_> hi :)
01:01:39 <danb_> likewise
01:01:44 <musasabi> maybe it would be faster to find a better machine, install the OS and then compile ghc...
01:02:07 <danb_> shapr: a friend an i took on that project for a DSL class. i'll try to remember to tell you how it ends up
01:02:33 <shapr> cool!
01:02:55 <danb_> shapr: it turned into 3-4 separate languages: playlist, pipeline (playback), events, and possible something non-trivial to put them all together
01:03:30 <shapr> What about Haskell to put them all together?
01:03:36 <shapr> embedded DSL ?
01:03:44 <danb_> yeah, they are all EDSLs
01:03:47 <danb_> in haskell
01:03:58 <shapr> Sounds like a fun class.
01:04:11 <shapr> btw, I like the format of your blog, it's way nifty.
01:04:18 <danb_> so that 4th thing might just be a bunch of side-effecting monad glue
01:04:26 <danb_> mine?
01:04:29 <shapr> yes
01:04:30 <danb_> it's way old too :P
01:04:41 <shapr> still very stylish
01:04:48 <danb_> thanks. i hacked it together 1-2 years ago
01:05:09 <shapr> dons: what about software engineering hackers?
01:05:16 <shapr> danb_: so, have you had the short tour of #haskell?
01:05:19 <danb_> if you use too-large fonts, the line wrapping looks really bad
01:05:30 <danb_> shapr: not that i know of
01:05:43 <shapr> You want it? It's short :-)
01:05:46 <danb_> sure
01:06:05 <dons> shapr: those guys just messs with arrows and monads ;)hmm. so that's another community of libraries people.
01:06:19 <shapr> ok! First stop on our tour is lambdabot, an IRC bot written in Haskell, several useful tools there.
01:06:21 <shapr> @index anyChar
01:06:23 <lambdabot> Text.ParserCombinators.Parsec,Text.ParserCombinators.Parsec.Char
01:06:31 <danb> @index >>>
01:06:32 <lambdabot> Control.Arrow
01:06:34 <danb> neat
01:06:35 <shapr> @type Text.ParserCombinators.Parsec.Char.anyChar
01:06:37 <lambdabot> Text.ParserCombinators.Parsec.Char.anyChar :: forall st.
01:06:37 <lambdabot> 					      Text.ParserCombinators.Parsec.Char.CharParser st Char
01:06:40 <desrt> http://www.scannedinavian.org/~shae/harddrivesharpener.jpg
01:06:42 <desrt> this is funny.
01:06:54 <danb> @type undefined
01:06:56 <lambdabot> undefined :: forall a. a
01:07:07 <shapr> Next stop we have the channel topic, which has useful info like channel logs url, etc
01:07:22 <shapr> Last but not least we have the haskell wiki with many useful bits of code and info.
01:07:25 <shapr> @wiki RecentChanges
01:07:26 <lambdabot> http://www.haskell.org/hawiki/RecentChanges
01:07:31 <danb> yeah, i've come across the wiki a time or two
01:07:33 <danb> very useful
01:07:42 <shapr> Usually I would include the learning page on haskell.org, but obviously you don't need it.
01:07:45 <danb> @wiki PreludeLicensedExts
01:07:46 <lambdabot> http://www.haskell.org/hawiki/PreludeLicensedExts
01:07:51 <danb> that one's neat
01:08:00 <shapr> I started it =)
01:08:03 <danb> cool
01:08:14 <shapr> oh, nowadays you might want to check out sequence.complete.org
01:08:50 <danb> yeah, i have a live bookmark firefox thing for it (go rss!)
01:08:55 <musasabi> ghc needs gmake too...
01:09:04 <shapr> I'm the maintainer of the #haskell channel, the Haskell Wiki, and official disorganizer of The Monad.Reader and the IOHCC, and part disorganizer of EuroHaskell.
01:09:14 <Itkovian> as darcs seems to be a bit quiet ... how can one easily find conflicts? You can't redo something alike to cvs update, can you?
01:09:36 <danb> shapr: is The Monad.Reader live yet?
01:09:40 <shapr> It's entirely possible that I have other responsibilities in the Haskell community that I've forgotten for the moment.
01:09:44 <danb> hehe
01:09:54 <shapr> danb: er, not really.
01:10:04 <shapr> The plan is to have it be online tomorrow.
01:10:08 <shapr> March 1st
01:10:26 <danb> woah! this month is short... i forget about that sometimes
01:10:45 <danb> @wiki TheMonadReader
01:10:46 <lambdabot> http://www.haskell.org/hawiki/TheMonadReader
01:10:54 <shapr> It's likely that most, and possibly all of the in-progress articles will be online tomorrow.
01:10:55 <danb> @wiki HowAboutSomethingThatDoesntExist
01:10:56 <lambdabot> http://www.haskell.org/hawiki/HowAboutSomethingThatDoesntExist
01:10:59 <danb> hm...
01:11:05 <danb> cool
01:11:13 <shapr> But I am disorganized at best.
01:11:42 <danb> what are IOHCC and EuroHaskell?
01:11:48 <shapr> Just sending out some emails to people who didn't send me an email, and probably also told me why not, but I don't remember.
01:11:51 <shapr> @wiki EuroHaskell
01:11:52 <lambdabot> http://www.haskell.org/hawiki/EuroHaskell
01:12:00 <shapr> http://www.scannedinavian.org/iohcc/
01:13:10 <musasabi> Has anyone gotten ghc build process to die with "/tmp/ghc26013.s:51: Error: symbol `__stg_split_marker' is already defined" ?
01:13:49 <shapr> I have to nail down a date for the next EuroHaskell soon, I need to buy plane tickets.
01:14:16 <shapr> danb: want to write an article for tmr issue 2? :-)
01:15:15 <danb> shapr: if this project turns out well, i'd be glad to contribute something
01:15:21 <Oejet> musasabi: Not me.
01:15:21 <danb> shapr: but i don't know if i have much to say at the moment ;)
01:15:23 <shapr> spiffy!
01:15:50 <shapr> You could always pick something that interests you and write about it. Or learn it first and then write about it.
01:15:51 <danb> and i think that "Summary of what's been discussed on Haskell/Haskell-Cafe" is a good idea
01:16:09 <shapr> I'd really like a column like that.
01:16:13 <danb> it's hard to keep up with communities, sometimes
01:16:23 <musasabi> SplitObjs = No helps.
01:17:15 <danb> i'll bug you if i think of something good. i've been reading a bunch for this project and other research, so i might think of a good summary of one thing or another relating to haskell or fp in general
01:17:44 <shapr> cool!
01:18:39 <musasabi> project install a faster machine to build ghc failed.. (all hard disks I could find lying around were SCSI and the machine doesn't like that)
01:18:57 <danb> shapr: btw, lists of type-limited length are doable with HList (which i just finished reading about)
01:19:25 <danb> shapr: http://homepages.cwi.nl/~ralf/HList/
01:19:43 <shapr> Yeah, you can do it with typeclasses too.
01:19:52 <shapr> I've wanted to write up a bunch of typetricks like that.
01:19:53 <danb> yeah, that's how it does it
01:19:54 <shapr> value type, etc
01:20:02 <danb> what do you mean by value type?
01:20:13 <shapr> How to encode the number 3 into a type?
01:20:31 <danb> ah. HList uses the type class HNat for a few things ;)
01:20:53 <shapr> Epigram has a lot of interesting answers to type trix.
01:21:51 <danb> HList presents things like: HZero, HSucc n; HTrue, HFalse; HNil, HCons e l
01:22:23 <musasabi> shapr: data Zero = Zero; data Succ a = Succ a
01:22:38 <musasabi> shapr: type Three = Succ (Succ (Succ Zero))
01:23:21 <musasabi> shapr: but when you start counting with type level numbers that naive representation is not enough (because there is a stack depth limit)
01:24:18 <danb> musasabi: it's also useful to class them: class Nat n; instance Nat Zero; instance Nat n => Nat (Succ n)
01:24:48 <Oejet> Does any OS kernel use STM?
01:24:56 <shapr> Like I said, I want an article that discusses the good and bad points of this sort of thing.
01:25:09 <danb> ;)
01:25:26 <shapr> I've been meaning to write a chapter for CosmicRay's haskell-v8 tutorial about type trix, but just haven't gotten to it yet.
01:25:45 <musasabi> Oejet: no.
01:25:59 <Oejet> musasabi: Why not?
01:26:32 <musasabi> Oejet: it is new and most of folks like raw C optimize this line without regard for the whole system approach.
01:27:05 <musasabi> Oejet: most OSs use mutexes (dragonfly has a different model)
01:27:37 <musasabi> Oejet: mutexes beat STM in any localized microbenchmark.
01:27:57 <musasabi> of course they result in buggy hard to maintain complex code..
01:27:58 <Oejet> musasabi: Mutexes are a kind of semaphores?
01:28:13 <musasabi> which may actually be slower than using a stronger abstraction.
01:28:42 <musasabi> Oejet: yes, binary semaphores.
01:29:08 <Oejet> musasabi: Ah, now I remember.  ;-)
01:29:29 <Oejet> Bowls with one coconut.
01:31:09 <jlouis> Oejet: haha
01:31:48 <danb> re: EuroHaskell as an "academic lan party" :)
01:31:51 <Oejet> jlouis: The intuition is perfect.
01:31:57 <musasabi> Oejet: you can see the results e.g. with linux *still* crashing when running on SMP machines.
01:34:51 <danb> shapr: on TheMonadReader wiki page, i think the first paragraph from the Advert section should be reproduced near the top somewhere
01:35:20 <danb> shapr: it's a nice vision statement, but the reader has to read too much to see it
01:35:52 <danb> shapr: maybe at the beginning of the The Monad.Reader section
01:36:16 <danb> shapr: vision -> "i want a wikizine..." -> column ideas
01:42:03 <shapr> danb: fix it, it's a wiki :-)
01:42:32 <shapr> Oejet: hOp + STM = ?
01:43:20 <shapr> danb: feel free to move the whole advert to the top if you want.
01:43:33 <shapr> ls
01:43:36 <shapr> doh
01:43:40 <Matt-W> heh
01:43:50 <shapr> I am obviously doing too many things at the same time.
01:43:55 <Oejet> The Haskell Operation System with Software Transactional Memory.  Sounds nice.
01:44:05 <shapr> Oejet: would allow SMP?
01:44:42 <Oejet> shapr: Good question.
01:47:16 <shapr> SPJ seems to think so. I'd like to try an SMP hOp.
01:47:56 <xerox> re.
01:48:03 <shapr> y0
01:54:07 <shapr> hey pesco!
01:54:07 <Lunar^> shapr: Once GHC 6.4 is out, I'll start hacking again on hOp
01:54:23 <shapr> Lunar^: yay! What do you think about STM for multi-hOp?
01:54:39 * shapr tries to think of a cute cheesy name for SMP hOp
01:54:41 <Lunar^> shapr: I want to rebuild a whole new patch on top of it
01:54:58 <shapr> I want a DFSG GUI for hOp
01:55:20 <Lunar^> shapr: Yes, STM really is important with current driver design
01:55:21 <shapr> I also want to implement my declarative protocol language for tcp/ip for hOp.
01:55:36 <shapr> I wonder if I'll actually have time to do any of that :-)
01:55:37 <Lunar^> shapr: Take a look at COMPOSE group work
01:55:50 <Lunar^> shapr: They've worked on a DSL for network programming
01:56:04 <shapr> these guys? - http://compose.labri.fr/
01:56:30 <Lunar^> shapr: About the drivers, at some point, we'll need to have an equivalent for select(2) that STM's MChan provides
01:56:34 <Lunar^> shapr: yes
01:56:51 <Lunar^> shapr: I met Gilles Muller in Nantes a few weeks ago to speak about integrating Bossa to GHC RTS
01:58:07 <shapr> Neat ideas. Would duncan_'s partial evaluator code allow the same thing for hOp?
01:58:42 <Lunar^> shapr: It could
01:58:54 <Lunar^> I need to work now, but I'll be glad to discuss this later :)
01:59:16 <shapr> ok
01:59:19 <danb> shapr: done (wiki, TheMonadReader)
01:59:23 <shapr> cool!
01:59:49 <danb> shapr: just copied the first paragraph. i don't know whether the whole advert belongs at the very beginning
02:00:51 <shapr> I agree that some sort of summary should be at the beginning, but I hadn't thought of that till you mentioned it, so I figure, whatever looks good to you is cool.
02:01:25 <danb> i think it's better, but i don't claim it's the best ;)
02:01:41 <danb> perhaps others will come along and improve it more
02:01:46 <shapr> I hope so.
02:01:59 <shapr> That's my favorite part of wikis.
02:02:59 <danb> yeah; did you see Jon Udell's screencast on the Heavy Metal Umlaut Wikipedia page?
02:03:14 <shapr> Not yet...
02:03:37 <shapr> I've heard of it, but that's all.
02:03:41 <danb> link: http://weblog.infoworld.com/udell/2005/01/22.html#a1156
02:04:07 <danb> it's a handful of minutes long
02:04:28 <ibid> back
02:04:39 <shapr> gah, it wants flash
02:04:50 <danb> note it for later, if you are busy. it's a neat illustration of the evolution of a wiki page
02:05:21 <shapr> I think tracing the evolution of source code is more powerful than anyone has realized yet.
02:05:48 <shapr> Specifically, I had the idea to turn the undo buffer in emacs into a javascript movie.
02:06:19 <shapr> I would like to record 'source movies' of the best programmers writing code.
02:06:41 <shapr> read-only pair programming =)
02:06:54 <Oejet> shapr: Cool idea.
02:06:59 <danb> yeah, that kind of thing would be neat
02:07:10 <danb> it's a lot of information to deal with, though
02:07:15 <danb> plenty of challenges
02:07:46 <shapr> saving changes in emacs' undo buffer wouldn't be hard.
02:07:59 <shapr> turning it into a movie that conveys useful information might be.
02:09:01 <xerox> What a point of view! The coder's eyes.. great idea.
02:10:17 <danb> maybe pieces of code could be weighted by their "survivability"
02:11:42 <danb> a longer lifetime signifies a better piece of code. it would also be useful to allow small changes to preserve some of a piece-of-code's "identity"
02:12:25 <xerox> ...or a so-horrible piece of code that noone aim to rewrite :)
02:12:34 <danb> hehe
02:12:52 <danb> survival by intimidation
02:13:05 <xerox> Talking of evolution..
02:21:22 <shapr> xerox: that's how Pair Programming works for me, you learn new tricks fast.
02:22:50 <danb> shapr: cross-breed different styles/tricks/idioms/techniquies?
02:23:25 <shapr> Nah, more like using the master/apprentice pattern from the middle ages. Or two masters, or whatever.
02:23:30 <xerox> shapr, what do you mean with `Pair Programming', collaborative programming?
02:23:43 <Philippa_> two people, one keyboard is the usual idea
02:23:56 <xerox> Never done before.
02:23:58 <Philippa_> at any one time, one types and one watches and suggests stuff
02:24:11 <shapr> and you switch drivers
02:24:12 <mflux> version control by key press could be cool ;)
02:24:12 <Philippa_> but you swap roles reasonably often
02:24:13 <Philippa_> yeah
02:24:15 <xerox> It could be irritating :)
02:24:23 <shapr> http://www.pairprogramming.com/
02:24:26 <shapr> it's euphoric
02:24:38 <shapr> If you have a good partner.
02:24:48 <samc_> and it inevitably develops into an all-out brawl
02:25:13 <samc_> or is that only when I'm involved?
02:25:18 <xerox> I need kind of silence to actually code something useful..
02:25:25 <shrimpx> pair programming with your advisor is good stuff =)
02:25:32 <danb> both times i've used it, we used a multi-user screen session (only one keyboard is useful at a time)
02:25:40 <shapr> xerox: group flow is a different flow, but it can be more powerful than single flow.
02:25:51 <xerox> It can be, right.
02:25:53 <shapr> samc_: hah
02:26:21 <shapr> For example, I'm very creative, able to leap tall conclusions with a single bound, but I get stuck on the small boring details.
02:26:37 <shapr> When I pair with someone who can remember all the picky stuff, we can get stuff done really fast.
02:27:26 <xerox> I first need to meet another programmer in the neighborhood.. yay.
02:34:26 <xerox> Someone having GHC 6.4 can tell me what he says about which Type Classes is (+) instance of?
02:35:29 <shapr> @info (+)
02:35:31 <lambdabot> -- + is a method in class Num
02:35:31 <lambdabot> infixl 6 +
02:35:31 <lambdabot> (+) :: forall a. (Num a) => a -> a -> a
02:35:49 <shapr> ?
02:36:06 <xerox> Uhm.
02:36:11 <danb> @eval 1 + 1
02:36:12 <lambdabot> 2
02:36:32 <danb> @eval print "foo"
02:36:33 <lambdabot> unbound variable: print
02:36:49 <danb> @info print
02:36:51 <lambdabot> -- print is a variable
02:36:51 <lambdabot> print :: forall a. (Show a) => a -> IO ()
02:36:59 <shapr> EvalModule is just a lambda calculus interpreter, not real Haskell.
02:37:05 <danb> gotcha
02:37:09 <xerox> shapr, if I'm not wrong, Lemmih told me that the feature to see of which classes something is instance of, was a 6.4 new feature..
02:37:20 <shapr> oh
02:38:15 <Cale> which classes a type is an instance of?
02:38:29 <xerox> Yes!
02:38:34 <Cale> (+) is not a type :)
02:38:35 <xerox> No.. mmh.
02:38:59 <xerox> A function!
02:39:33 <xerox> Oh, no, it was which instances a class has .. maybe.
02:39:55 <Cale> that would make sense
02:40:29 <danb> @eval (\x. x x) (\x. x x)
02:40:36 <danb> this is a useful feature:
02:40:43 <lambdabot> out of fuel - use @resume to continue
02:40:55 <danb> ;)
02:43:19 <tromp> morning
02:43:22 <shapr> hoi tromp
02:43:26 <xerox> hiya
02:43:40 <shapr> Hey, did you hear that Surly Bikes is making a 3.7 inch tire for their 65mm rim?
02:45:18 <shapr> That may not be quite so interesting to fans of recumbent bikes.
02:48:52 <polli> any wxhaskell guru here?
03:00:03 <danb> is MegaHAL dead? (ref: http://www.haskell.org/hawiki/MegaMonad)
03:12:18 <danb> it's very late here. g'nite #haskell
03:13:08 <xerox> goodnight.
03:23:27 <Itkovian> night
03:24:24 <musasabi> How bad is it to get "Bad eta expand" warnings while compiling ghc?
03:25:10 <shapr> I think those are known if you're compiling the 6.4 rc
03:25:27 <xerox> Are there public logs of #haskell ?
03:25:36 <musasabi> xerox: yes.
03:25:56 <musasabi> xerox: http://meme.b9.com/cdates.html?channel=haskell
03:26:19 <musasabi> stage1 is till not ready ;_;
03:28:12 <xerox> Thanks.
03:44:07 <Lemmih> polli: Pose your question and we'll do our best to answer it.
03:44:38 <polli> Lemmih: first has anyone got wxhaskell running against wx 2.5.3?
03:45:22 <polli> s/Lemmih://
03:46:07 <Lemmih> Not to my knowledge. I'm using 2.4.2
03:49:10 <polli> I'll try that then :)
04:13:14 <jlouis> ok, the STM idea of SPJ et al is cool
04:15:14 <sorje> @info intersperse
04:15:40 <sorje> doesn't seem to like me
04:16:20 * xerox cloacks as lambdabot
04:16:22 <xerox> -- intersperse is a variable
04:16:22 <xerox> intersperse :: forall a. a -> [a] -> [a]
04:16:56 <polli> doh, can't make wxhaskell :/
04:19:52 <shapr> what do you call those canaries in the mines that detect poisnous gases?
04:20:07 <shapr> lambdabot: y0
04:20:08 <lambdabot> Sorry, I'm not a very smart bot yet, try "lambdabot: @listcommands"
04:20:56 <shapr> Isn't there a name for them? A something canary...
04:21:10 <Philippa> miner's
04:21:21 <Philippa> to point out the obvious ;-)
04:21:32 <shapr> miner's canary, doh
04:22:25 <shapr> This book has a lot of potential but so far my review looks like something Naggum would write.
04:26:01 * musasabi waits for stage1...
04:26:59 <xerox> shapr, time for my extra credit.
04:27:04 <shapr> oh?
04:27:07 <xerox> *Shapr> fmap nextSeason myTree
04:27:08 <xerox> Node Nil Spring (Node Nil Fall Nil)
04:27:14 <shapr> oooh aaah =)
04:27:29 <xerox> <shapr> ok, extra credit question....					  22:22
04:27:29 <xerox> <xerox> Sure!
04:27:29 <xerox> <shapr> How can you use the Functor typeclass to get the same nextSeason
04:27:30 <xerox> 	function to work on [Season], myTree, and other collections?	  22:23
04:27:31 <xerox> :DD
04:27:35 <shapr> yes, I haven't forgotten.
04:27:42 <xerox> Yay, it's okay ;)
04:28:03 <xerox> It took time :P
04:28:22 <shapr> It's okay. The next step after extra credit is for you to tell me what's interesting to investigate now.
04:29:57 <xerox> Monads, maybe.  I'm reading nomaware.
04:31:20 * shapr tries to think of a good zen master question for monads.
04:31:52 <xerox> Now! I need that GHC 6.4 feature of this morning, which are the defined instances of Functor?
04:32:09 <shapr> So, build the 6.4 rc?
04:32:18 <xerox> No *nix available :(
04:32:24 <shapr> oh :-(
04:32:29 <shapr> install linux?
04:33:18 <xerox> It takes a while.  I miss it sometimes (like now).. but no time, more or less.
04:33:38 <shapr> oh, I know a possibly nice question for monads. Why is it important to be able to reorder operations? Specifically, what's important about (a >>= b) >>= c being the same as a >>= (b >>= c) ?
04:34:09 <Itkovian> this is deep.
04:34:11 <shapr> You could burn a knoppix CD, which would be able to mount your win32 drive and build a GHC 6.4 there.
04:34:49 <xerox> shapr, right, I have a knoppix live cd in fact.. I just god some problems with 16:9 monitor and X, I couldn't find the way to display properly.
04:34:56 <xerox> *got, whoops.
04:35:21 <shapr> Well, I can't think of any other great advice then.
04:35:43 <xerox> But, are you meaning that is possible to cross-build a win32 version from linux livecd?
04:35:57 <shapr> I hadn't thought of that.
04:36:03 <xerox> Hm.
04:36:12 <shapr> It's possibly that 6.4 builds on mingw.
04:36:16 <shapr> er "possible"
04:36:19 <shapr> hoi xkb
04:36:42 <xkb> hoi shapr :D
04:36:43 <xerox> How much effort, I'll ask some friend to give me an account somewhere, perhaps.
04:39:01 <xerox> @type (>>)
04:39:02 <lambdabot> (>>) :: forall m b a. (Monad m) => m a -> m b -> m b
04:44:15 <xerox> A Monad should have kind * -> *, like a Functor, is it right?
04:45:35 <tromp> yep
04:45:55 <xerox> Good.
04:45:58 <shapr> In fact, TheHunter and many others say that Functor => should be part of the Monad typeclass.
04:49:21 <norpan> well, you can implement the Functor functions by using the Monad functions
04:50:57 <xerox> Isn't fmap the only functor function?
04:51:34 * boegel boings
04:51:43 <xerox> hiya boegel
04:53:59 <norpan> xerox: so much the easier then :)
04:54:05 <boegel> hye xerox
04:57:29 <norpan> fmap f m = m >>= \a -> return (f a)
04:57:33 <norpan> or something like that
04:59:41 <boegel> hey TheHunter
05:00:05 <TheHunter> hey boegel
05:05:57 <Itkovian> boegel.
05:06:58 <tromp> @type fmap
05:06:59 <lambdabot> fmap :: forall f b a. (Functor f) => (a -> b) -> f a -> f b
05:07:35 <xerox> norpan, yay, it works, now I have to figure out how.
05:10:05 <tromp> instance (Monad m) => Functor m where fmap f x = x >>= f
05:10:25 <tromp> oops not quite
05:10:55 <tromp> fmap f x = x >>= return (f x)
05:11:27 <tromp> fmap f x = x >>= (\a -> return (f a))
05:11:33 <tromp> hard to get right:(
05:11:57 <xerox>     Illegal instance declaration for `Functor m'
05:11:57 <xerox> 	(There must be at least one non-type-variable in the instance head
05:11:57 <xerox> 	 Use -fallow-undecidable-instances to permit this)
05:11:57 <xerox>     In the instance declaration for `Functor m'
05:12:39 <tromp> yeah, that's a nasty restriction
05:13:05 <xerox> Btw, how can a single bind works as fmap?
05:13:10 <xerox> *work, even
05:13:16 <TheHunter> the issue here is, that it really should be "class Functor f => Monad f"
05:13:45 <tromp> yes, that'd be nice
05:14:43 <tromp> for Monads, fmap is called liftM
05:30:28 <nlv11757_> extremely offtopic, but would anyone know of an app to transform SID music to mp3?
05:30:39 <tromp> lazily:-?
05:33:28 <bourbaki> moin
05:35:46 <nlv11757_> tromp...lazily transformation from SIF to mp3?
05:35:48 <nlv11757_> :)
05:35:49 <nlv11757_> i dont follow
05:37:52 <pesco> kzm: Greetings, Ketil Z. Malde?
05:37:55 <basti_> hi all
05:38:04 <pesco> Hello, basti.
05:38:20 * basti_ is offline. except for at the institute
05:38:37 <pesco> Ew.
05:38:51 <basti_> yucky huh
05:38:54 <kzm> hi
05:39:18 <pesco> kzm: I've never seen you on #haskell, have you been here?
05:39:29 <pesco> I remember your name from the mailing list, I think.
05:39:31 <kzm> Not until now -- you keep track?
05:39:37 <pesco> We try. ;)
05:39:45 <pesco> Welcome then.
05:39:54 <kzm> Yes, I pester those a bit occasionally.
05:40:05 <kzm> Used to use IRC back when it was new...
05:40:23 <pesco> I think shapr knows exactly who's been here.
05:42:16 <pesco> Do you have a specific reason for your return to IRC, or are just peeking in?
05:42:25 <pesco> s/are/are you/
05:42:44 <kzm> I was actually looking for some help on The Gimp :-)
05:42:53 <pesco> Heh.
05:42:56 * pesco scratches his head.
05:42:57 <kzm> (but not a lot of activity in that forum)
05:43:41 <kzm> I just read the paper on STM (Tim Harris, Simon M and P J, Maurice Herlihy).  Fascinating stuff.
05:43:51 <basti_> so you tried the channel of your favourite language?
05:44:15 <tromp> what's STM?
05:44:18 <kzm> basti_: yes, of course.  Checking out the 'hood.
05:44:40 <kzm> Something Transactional Memory.
05:44:45 <kzm> Software.  Right.
05:45:29 <kzm> The point is to have computations that perform actions (i.e. IO) that may fail, and have them rollback (or rather, never commit) their actions on failure.
05:45:37 <bourbaki> whats the basic idea of that stm stuff?
05:45:58 <kzm> It lets you implement a few things like MVars very nicely.
05:46:02 <bourbaki> hm so like backtrackinb?
05:46:03 <pesco> Good.
05:46:06 <bourbaki> tracking
05:46:20 <kzm> And is (hopefully) a foundation for real parallel Haskell programs.
05:46:25 <pesco> kzm: How is it implemented?
05:47:13 <kzm> I'm not familiar with backtracking other than in Prolog-style, i.e. returning from a search.  I don't think that can undo IO.
05:47:37 <kzm> It's in GHC 6.4, but maybe that's not what you mean?
05:47:50 <bourbaki> i do
05:48:06 <xerox> tromp, I still not get completely how fmap f x = x >>= return (f x) works, how does f get applied to all the "x" ?
05:48:10 <bourbaki> i mean you branch from somehwere and keep in mind from where you branched to go anotherway on an error
05:48:39 <kzm> pesco, the paper discusses the implementation, but I think you better read it yourself rather than rely on my weak attempts at explaining it.  The paper is very clear and succint, fun to read.
05:49:10 <pesco> kzm: Alright, I'll do that. It sounds very interesting. Thanks' for the pointer.
05:49:29 <xerox> whoops, fmap f x = x >>= \a -> return (f a)
05:49:35 <pesco> (Mhmmm, real parallel Haskell.)
05:50:41 <kzm> bourbaki, well, I think the point here is to be able to do (and undo) e.g. persistent writes to memory locations.
05:50:59 <kzm> so it's more like a transactional database than a search.
05:51:16 <bourbaki> sounds like a touring machine to me
05:51:20 <tromp> xerox: you can imagine the >>= iterating over all the "x"
05:51:32 <basti_> turing, not touring btw :P
05:51:43 <bourbaki> :)
05:51:45 <xerox> tromp, where exactly is the definition of >>= that applies in that context?
05:51:47 * kzm is confused.
05:52:11 <tromp> def of >>= depends entirely on the monad
05:52:31 <xerox> Maybe that's what I'm missing, and >>= for lists does iterate?
05:52:52 <tromp> for instance in case of a list, it is concatMap
05:53:15 <xerox> Now it's clear.
05:53:23 <lightstep> this is where "monads as containers" clarifies things
05:53:47 <kzm> A Turing machine is a conceptual machine to perform computations.  I don't see any connection.
05:53:53 <shapr> I always run my traveling salesman programs on a touring machine.
05:54:13 <shapr> Ok, bad joke, never mind :-)
05:54:25 <shapr> hiya ketil!
05:54:36 <samc_> wasn't Dijkstra's van called the touring machine?
05:54:50 <pesco> Cool, he had a van?
05:54:53 <shapr> Was it? That's a spiffy joke.
05:55:13 <samc_> and some say he didn't have a sense of humour
05:55:24 <shapr> kzm: if you mix STM and region allocation, GHC would run nicely on the Cell cpu.
05:55:47 <tromp> hmm, GHC... Cell... don't make me drool!
05:56:08 * basti_ reads said paper
05:56:10 <pesco> Programmers need vans. Can't go on vacation without the equipment.
05:56:31 <bourbaki> programmers dont need vacation :)
05:56:51 <pesco> Of course they do! From real-life.
05:56:54 <samc_> just to confirm "Dijkstra and his wife explored national and regional parks in their Volkswagen bus
05:56:57 <samc_> that they had named the Touring Machine"
05:57:36 <shapr> nifty!
06:00:18 <nlv11757_> Dijkstra was a genius AND dutch :D
06:00:47 <kzm> well, you win some, you lose some :-)
06:00:48 <shapr> I'm just not Dutch.
06:00:50 <shapr> (or modest ;-)
06:00:58 * shapr is just joking
06:01:13 <shapr> hej kzm, talar du svenska ocks√•?
06:01:33 <kzm> Nei, men jeg klarer norsk sÂnn nogenlunde.
06:01:43 <shapr> Unsurprising :-)
06:01:59 <shapr> It's amazing how well Norwegians speak Norsk.
06:02:26 * shapr ignores the fact that Americans don't speak English
06:02:40 <shapr> kzm: written any cool code lately?
06:02:43 <kzm> "separated by a common language"
06:02:58 <kzm> Hmm...define cool?
06:03:10 <shapr> Pleasing? Fun? Interesting?
06:03:19 <kzm> Actually, I haven't written any code at all for ages, I'm busy finishing my thesis.
06:03:47 <kzm> When that is done, I have a six-month engagement to rewrite all the code I've done as part of that.  Which I hope will be cool.
06:04:05 <kzm> And probably Haskell - although I guess it's time for me to learn something new.
06:04:51 * xerox 's teatime
06:04:57 <shapr> What's your thesis about?
06:08:09 <vincenz> hi shapr
06:09:32 <kzm> shapr, oh, bioinformatics.  I wrote some programs to analyze sequences (ESTs) in Haskell.
06:10:00 <kzm> (so Haskell is just a convenience, I'm as confused as anybody else about the brainy stuff)
06:10:11 <kzm> (i.e. discussions on the haskell lists)
06:11:02 <shapr> hoi vincenz
06:17:34 <shapr> Whew, done with my review. Now it's TMR time!
06:19:14 <lightstep> will it really be out tomorrow?
06:19:28 <tromp> what's TMR?
06:19:37 <tromp> weekly report?
06:19:47 <autrijus> monthly report
06:19:49 <autrijus> sort of
06:19:50 <TheHunter> @wiki TheMonadReader
06:19:51 <lambdabot> http://www.haskell.org/hawiki/TheMonadReader
06:21:11 <musasabi> ghc compile died finally after 8 hours...
06:24:07 <Itkovian> poor thing ...
06:27:02 <tromp> when-ever i see a web form box: retype name/password/email, i wonder why they make you cut&paste stuff:(
06:28:09 <tromp> too bad topcoder doesn't allow haskell...
06:28:59 <Philippa> yeah, several of us'd be making a killing
06:29:08 <vincenz> you get monet from topcoer?
06:29:11 <vincenz> topcoder
06:29:47 <nlv11757_> 8 hours of torment :P
06:29:59 <autrijus> probably not monet, but van gogh maybe
06:30:39 <earthy> First issue out by March 1st
06:30:41 <earthy> hm.
06:30:48 * earthy grins
06:32:26 <tromp> a ex-colleague of mine won 10k from there
06:32:44 <vincenz> do you get money from topcoder?
06:35:01 <vincenz> how?
06:35:20 * Heffalump wonders if people could try:
06:35:21 <Heffalump> Prelude> :m +Data.Bits
06:35:22 <Heffalump> Prelude Data.Bits> 18446658724119492593 `shiftL` (-3586885994363551744) :: Integer
06:35:34 <Heffalump> and tell me what happens (you might want a resource limit)
06:35:39 <tromp> oh, actually he's current #2
06:35:39 <Heffalump> (in ghci)
06:35:48 <shapr> Logan got quite a bit of cash in college with topcoder.com and a few others.
06:36:17 <Heffalump> (and tell me your ghc and libgmp versions)
06:36:33 <vincenz> odd
06:36:39 <vincenz> but it's only for college people?
06:36:47 <vincenz> and only java/c++?
06:37:14 <shapr> I don't think it's only for college students, I think they just happen to be the ones with enough time to do all the contests to get a high score.
06:37:35 <vincenz> ah
06:38:22 <shapr> Heffalump: with 6.2.2 in ghci, that eats just ate ram until I killed it.
06:38:40 <Heffalump> what gmp?
06:39:32 <shapr> whatever is in the debian/unstable , seems to be libgmp3 4.1.4-5
06:39:47 <Heffalump> ta.
06:39:54 * shapr tries with 6.4
06:40:00 <Heffalump> ah, I was just about to ask for that :-)
06:40:46 <lightstep> oom killed it here (6.2.2 on debian/unstable too)
06:41:19 <shapr> with version 6.4.20050212, the only difference is that it eats memory much faster.
06:41:24 <lightstep> but only after it killed gaim :(
06:41:32 <samc_> what's libgmp?
06:41:39 <Heffalump> infinite precision integer library
06:41:40 <shapr> gnu multiprecision
06:41:51 <TheHunter> Heffalump, i get a segfault with 6.4.
06:42:15 <tromp> does anyone here have experience finding space leaks?
06:42:26 <basti_> tromp: i usually use valgrind
06:42:35 <shapr> I shouldn't say anything about space stations?
06:42:38 <tromp> in haskell programs:)
06:42:43 <basti_> tromp :)
06:42:45 <Heffalump> TheHunter: what gmp?
06:42:46 <shapr> Have you done profiling?
06:43:06 <basti_> i have never had a space leak in a haskell program.
06:43:07 <kosmikus> Heffalump: eats memory until killed for me, too (ghc-6.22, gmp-4.1)
06:43:09 <shapr> Or is it one of those where the program just doesn't finish because of the leak?
06:43:11 <tromp> yes, but i see no clues in there
06:43:20 <tromp> just show memory usage rising linearly in time
06:43:37 <shapr> What kind of process, and how did you structure it?
06:44:07 <TheHunter> Heffalump, 4.1.4-5 (eats a little bit of ram before crash)
06:44:14 <shapr> One shotgun approach is to throw $! and DeepSeq calls around until it behaves better, then back 'em out till it behaves badly again.
06:44:15 * Heffalump fails to kind any explanation for why some people segfault and some people just eat memory
06:44:18 <tromp> it's my connect4 solver,
06:44:26 <Heffalump> 6.2.2, gmp 3.3.2 segfaults for me
06:44:32 <Heffalump> (on an RH machine)
06:44:40 <Heffalump> oh well. It's probably just randomish.
06:44:41 <tromp> alpha beta search with 5Mbyte transposition table in IO monad
06:44:45 <lightstep> maybe some gmps segfault when memory is full?
06:45:09 <Heffalump> could be a compilation option for it or something
06:45:11 * Philippa managed to trace a space leak back to a bug in the win32 RTS
06:45:31 <Philippa> not to /where/ in the RTS, admittedly
06:46:04 <tromp> i'll see if just traversing the gametree also leaks
06:46:14 <shapr> tromp: holding onto too much ability to backtrack? can you discard the backtrack path after a certain depth (even that gives incorrect results) to see if that changes the behaviour?
06:47:10 <tromp> backtrack path? that wld be just the recursive negamax calls. how cld u discard that?
06:48:26 <Heffalump> shapr: what 6.4 was that?
06:52:11 <musasabi> heap profiling is not too hard.
06:52:58 <lightstep> 16:42 < shapr> with version 6.4.20050212, the only difference is that it eats
06:53:48 <Heffalump> oh, missed that. ta.
06:53:48 * samc_ has no libgmp
06:54:04 <Heffalump> samc_: how do you use ghc at all?
06:54:10 <Heffalump> (or don't you?)
06:54:16 <samc_> yes I do
06:54:44 <xerox> ldd $(which ghc) ?
06:55:37 * basti_ hops to the bus
06:55:41 <basti_> cu
06:57:09 <jhunZoa> anyone knows some advanced list article?
06:57:10 <lightstep> xerox, this approach doesn't always help. sometimes the file in the path is a symlink
06:57:23 <Igloo> Odd: shifting is defined with division, but surely libgmp has shifting operators?
07:02:10 <samc_> the only files I have with names containing 'gmp' are .h files under ghc's directory
07:11:05 <Heffalump> I think it might also happen if you try to shiftL something huge by something reasonably sized, btw.
07:11:28 <Heffalump> (huge in the sense of being generated by calculating 2^(random 64 bit number)
07:11:38 <Heffalump> and then adding another random 64 bit number
07:11:53 <jhunZoa> anyone has a tutorial about selecting a specific item from a list?
07:13:10 <boegel> @type (!!)
07:13:11 <lambdabot> (!!) :: forall a. [a] -> Int -> a
07:13:19 <boegel> like this jhunZoa ?
07:13:34 <jhunZoa> (!!) hmm
07:13:57 <boegel> [4,5,6] !! 2 = 5
07:14:02 <jhunZoa> well what i need to do is select all elements from a list of list of strings
07:14:10 <vincenz> hehe, the funny thing is that the type info does not actually give you the information to know if that is what you want
07:14:12 <jhunZoa> i give a string
07:14:29 <jhunZoa> and the function gives me all n elements from the 2nd list
07:14:48 <boegel> what second list ?
07:14:49 <jhunZoa> where the string matches a first element of the first list in the list
07:14:57 <jhunZoa> [[string]]
07:15:03 <vincenz> you're not being clear
07:15:05 <boegel> maybe an example could help here :)
07:15:18 <boegel> vincenz: that's the least you can say ;)
07:15:38 <jhunZoa> so i got [[columname1,columname2,columnname3],[element1,element2,element3]]
07:15:43 <jhunZoa> i say
07:15:48 <jhunZoa> gimme all columnname 2
07:15:54 <jhunZoa> and it returns me all element 2s
07:16:14 <jhunZoa> or i say gimme [columnname2,columnname3]
07:16:14 <boegel> all element2's in what ?
07:16:26 <jhunZoa> the 2nd list inside it can be unlimited
07:16:33 <jhunZoa> all containing a element
07:16:59 <boegel> this sounds like homework...
07:16:59 <jhunZoa> u need to see it as a table
07:17:03 <jhunZoa> yes it is
07:17:19 <jhunZoa> but my teacher has so sucky resources and information
07:17:25 <jhunZoa> he stinks
07:17:33 <boegel> then he should wash himself
07:17:56 <nlv11757_> so for what university or school is that homework hunzoa?
07:18:07 <jhunZoa> university of utrecht
07:18:34 <nlv11757_> hahah i knew it, i reckognized the lab exercise :D i gave it myself lol
07:18:44 <jhunZoa> u did?
07:18:51 <nlv11757_> and you wouldnt be talking about doaitse swierstra would you?
07:18:52 <nlv11757_> as a teacher?
07:18:56 <jhunZoa> yes
07:18:58 <nlv11757_> hahaha
07:19:09 <jhunZoa> he has so high expecations of us
07:19:19 <jhunZoa> i just know how to use foldr
07:19:29 <nlv11757_> of course, he is the professor of the institute and an important Haskell person
07:19:30 <jhunZoa> and then i have to make a sql engine in haskell
07:19:51 <nlv11757_> hahaha really, that exercise has been around for years, it's do-able
07:19:57 <samc_> I wish I had such a good teacher
07:20:08 <jhunZoa> well i have no clue
07:20:09 <nlv11757_> see hunzoa, you are privileged
07:20:15 <nlv11757_> and dont even know it
07:20:17 <jhunZoa> i managed to generate the table
07:20:41 <jhunZoa> but the 2nd thingy i have no clue
07:20:50 <jhunZoa> so a little hint is appriciated :)
07:21:25 <nlv11757_> haha i'd be violating university law by doing that because i have that complete exercise worked-out since I assisted the FP course a couple of times
07:21:38 <nlv11757_> just read the Haskell dictaat
07:21:43 <jhunZoa> it sux
07:21:47 <nlv11757_> what literature are you using?
07:21:52 <nlv11757_> jeroen fokker's dictaat?
07:21:55 <jhunZoa> ye
07:22:01 <nlv11757_> dude, that is such a good book
07:22:02 <jhunZoa> i already hated his java dictaat
07:22:08 <nlv11757_> :O
07:22:08 <jhunZoa> man its crap!
07:22:13 <nlv11757_> that was also a masterpiece
07:22:17 <jhunZoa> lol
07:22:29 <nlv11757_> that is probably the most friendly introductory stuff you are going to find dude
07:22:36 <nlv11757_> so good luck with the ghc manual etc
07:22:40 <jhunZoa> thats the problem
07:22:44 * boegel would like to point out that swierstra passes by here sometimes
07:22:49 <boegel> I hope he doesn't read the logs :p
07:22:50 <jhunZoa> for my assignments its to user friendly
07:23:08 <nlv11757_> haha boegel, if I reckognized this description, he surely will :D
07:23:32 <nlv11757_> too user friendly? hunzoa it gives you the tools you need, the rest is creativity and abstraction
07:23:47 <jhunZoa> well ye but its hard
07:23:50 <jhunZoa> i need a hint
07:23:58 <nlv11757_> then ask the lab assistants
07:24:03 <nlv11757_> that's what they are there for
07:24:07 <nlv11757_> :)
07:24:09 <jhunZoa> well
07:24:17 <jhunZoa> we dont got that much time to ask them
07:24:22 <samc_> fokker, swierstra, lucky bastard
07:24:29 <jhunZoa> lol
07:24:32 <shapr> truly
07:24:33 <boegel> jhunZoa: there's always mail
07:24:36 <nlv11757_> hahah im trying to tell him that also samc
07:24:48 <jhunZoa> well i just ask here for faster response
07:24:54 <nlv11757_> i'm glad i have had courses by fokker and doaitse and daan
07:24:57 <boegel> don't think you'll get your answers in here when you're not eager to learn
07:25:03 <jhunZoa> who is daan?
07:25:08 <jhunZoa> i dont want answers
07:25:08 <shapr> Daan Leijen
07:25:16 <jhunZoa> i want a hint
07:25:22 <jhunZoa> a kick in the right direction
07:25:25 <shapr> Author of Parsec, the Hugs + Trex version of HaskellDB, etc
07:25:33 <jhunZoa> never heard of
07:25:35 <nlv11757_> precisely THAT daan ;)
07:25:44 <shapr> jhunZoa: my kick would be "cheer up, this can really be fun stuff if you look for the niftynes available"
07:25:48 <Philippa_> jhunZoa: read through docs on the Prelude and the List module
07:25:52 <Philippa_> look for useful functions
07:26:00 <nlv11757_> what is your main problem specifically hunzoa?
07:26:20 <nlv11757_> do you know what to do but not how to put it down in haskell? or what?
07:26:24 <jhunZoa> well if the project thing (if u know what im talking about) is not in the right order
07:26:40 <shapr> jhunZoa: problem is, motivation is the deciding factor in learning, if you find a way to enjoy what you're doing, you'll learn quickly and thoroughly, if you resent learning something, you'll never be good at it.
07:26:42 <jhunZoa> so if they want column2,column1,column3
07:26:51 <jhunZoa> i wanna learn
07:26:54 <jhunZoa> thats why im here
07:26:59 <jhunZoa> but i cant find good resources
07:27:14 <Philippa_> jhunZoa: "so if they want column2,column1,column3" what?
07:27:20 <jhunZoa> ye
07:27:33 <jhunZoa> but the order is column1,c2,c3
07:27:38 <nlv11757_> you won't find resources on your specific problem hunzoa....fokker's dictaat tells you the ingredients...not solutions to existing problems"
07:27:50 <jhunZoa> i know
07:27:50 <Philippa_> get the columns in the order the user specifies?
07:27:52 <nlv11757_> you want to change the order in a list? am i understanding that correct?
07:27:56 <jhunZoa> ye
07:28:00 <jhunZoa> i know reverse
07:28:06 <jhunZoa> but thats about it
07:28:12 <Philippa_> is the list of known size?
07:28:24 <Philippa_> failing that, do you have a mapping from old positions to new ones?
07:28:26 <jhunZoa> well its [[string]]
07:28:32 <Philippa_> (or better yet, new ones to old ones)
07:28:39 <jhunZoa> [string] is the same for all [string]
07:28:44 <nlv11757_> how is the information available in what order you want the columns?
07:28:54 <nlv11757_> list of integers?
07:29:01 <jhunZoa> i give a list of strings
07:29:18 <nlv11757_> ow you give a list of strings corresponding to columnnames
07:29:20 <jhunZoa> it needs to be compared to the head of [[string]]
07:29:25 <nlv11757_> and the columns have to be in that order?
07:29:25 <jhunZoa> ye
07:29:31 <jhunZoa> yup
07:30:02 <nlv11757_> how is the arrangement in the table? is one column a list? or are every row in a list?
07:30:12 <nlv11757_> so a list of rows or a list of cols
07:30:13 <nlv11757_> ?
07:30:17 <jhunZoa> every row is a list
07:30:31 <jhunZoa> if u do transpose u get a complete column
07:30:37 <nlv11757_> exactly
07:30:52 <jhunZoa> but i have to reverse transpose it
07:31:02 <jhunZoa> and thats the problem
07:31:15 <nlv11757_> ok hunzoa, imagine you had a function that; given a headername, retrieves the column
07:31:41 <jhunZoa> ye that wouldnt be to hard
07:31:55 <jhunZoa> but merging them back into the defined structure
07:32:02 <nlv11757_> ok, so whats hard about doing that for more than 1 header?
07:32:13 <jhunZoa> well reverse transposing them
07:32:25 <nlv11757_> transposing again maybe?
07:32:31 <jhunZoa> does that work?
07:32:32 <nlv11757_> ....
07:32:38 <nlv11757_> what does transpose do?
07:32:55 <jhunZoa> it makes columns of records in this example
07:33:04 <jhunZoa> well lemme test
07:33:28 <nlv11757_> if you look at the definition of transpose...you truly see what it does in general
07:33:32 <jhunZoa> oh hehe that does work
07:33:47 <jhunZoa> well i think i know how to make this function now
07:33:53 <jhunZoa> thx for the help and stuff
07:33:53 <nlv11757_> i think so too
07:34:15 <nlv11757_> no prob, but you should really delve more into it because as you saw...it's not that hard
07:34:30 <jhunZoa> well for me it is
07:34:36 <jhunZoa> it goes fast
07:34:43 <jhunZoa> our learning curve
07:34:49 <jhunZoa> he has no mercy
07:35:16 <nlv11757_> what is that saying in english? zachte heelmeesters maken stinkende wonden?
07:35:19 <nlv11757_> :)
07:35:29 <jhunZoa> eh?
07:35:36 <jhunZoa> heelmeesters?
07:35:47 <shapr> ik begrijp het niet
07:35:51 <nlv11757_> :P
07:35:52 * earthy grins
07:35:54 <jhunZoa> me neither ;p
07:36:04 <shapr> ich habe keine ahnung!
07:36:08 <shapr> vafan?
07:36:16 <earthy> `soft doctors leave stinky wounds' but that's a very bad translation
07:36:20 <jhunZoa> vad i helvete ar det du sager?~
07:36:29 <shapr> talar du svenska?
07:36:33 <jhunZoa> nej
07:36:38 <jhunZoa> only that sentence and
07:36:40 <shapr> tyv√§rr...
07:36:43 <jhunZoa> du suger sma pojkar
07:36:49 <shapr> jag var mycket forv√•nad :-)
07:36:52 <shapr> um, no.
07:36:55 <jhunZoa> and yes i cant type special chars~
07:37:01 <jhunZoa> only ~
07:37:06 <jhunZoa> and the rest gets blocked or so
07:37:19 <earthy> of `gentle doctors couse smelly wounds'
07:37:40 <shapr> Yeah, I understand it now.
07:37:54 <nlv11757_> hunzoa, you had lineair algebra right? because you could have known that the transpose of the transpose is just the original element again
07:38:05 <jhunZoa> i didnt have lineair algebra
07:38:19 <nlv11757_> in what year do they teach that nowadays?
07:38:20 <shapr> I had a math class once.
07:38:30 <kosmikus> you don't need linear algebra for that; it's trivial
07:38:33 <jhunZoa> i dont gonna learn it
07:38:42 <shapr> I had business calculus in 1992 or so.
07:38:44 <jhunZoa> i had some basic math though
07:38:51 <jhunZoa> but thats really nothing
07:38:57 <jhunZoa> even i did pass with 8/10
07:39:10 <nlv11757_> you dont? it's a course in utrecht hunzoa
07:39:13 <samc_> it's: I aint never have been done going to none linear algebra course
07:39:16 <jhunZoa> ye it is
07:39:19 <jhunZoa> if u study math
07:39:26 <shapr> samc_: haha
07:39:27 <nlv11757_> not in my time
07:39:34 <nlv11757_> i had to do lineair algebra
07:39:44 <earthy> linear
07:39:54 <jhunZoa> they prolly re-arranged that course
07:39:58 <nlv11757_> sry, mixing dutch and english :P
07:40:12 <jhunZoa> so u came to utrecht specially for haskell?
07:40:58 <nlv11757_> haha hunzoa, im still a software technology student at Utrecht. Im doing my thesis.
07:41:04 <boegel> when I compile with ghc, it wants my main function to be of type IO
07:41:20 <boegel> how can I make it of type IO(), and still use arguments with my compiled program ?
07:41:21 <jhunZoa> ah k
07:41:30 <jhunZoa> master?
07:42:02 <TheHunter> @type System.getArgs
07:42:04 <lambdabot> System.getArgs :: IO [String]
07:42:11 <boegel> thanks TheHunter
07:42:20 <nlv11757_> im in between; officially drs but forced into the master program
07:42:44 <shapr> I've never had a computer science course.
07:43:06 <shapr> Maybe I should take some at the nearby university. They have intro to programming with Haskell.
07:43:10 <jhunZoa> drs?
07:43:14 <jhunZoa> not PhD?
07:43:32 <nlv11757_> i meant i was doing my Msc thesis :) not phd ;)
07:43:39 <jhunZoa> ah k
07:43:40 <shapr> It would be fun to torture my teacher by making him grade arrow-style code.
07:44:14 <nlv11757_> depending on your teacher, that could turn on you :)
07:44:25 <shapr> You think so?
07:44:28 <jhunZoa> if u have doaitse
07:44:34 <jhunZoa> he would give u negative results
07:44:48 <shapr> Right, I'd have to use an Attribute Grammare instead, if I were at UU :-)
07:45:00 <nlv11757_> hahaha hunzoa, you are a bit prejudged
07:45:04 <jhunZoa> with my last exam
07:45:14 <jhunZoa> he takes off points for each mistake at the end result
07:45:18 <shapr> But I'm in Sweden, where they use Arrows, because those were discovered at a Swedish university.
07:45:33 <shapr> So I might survive.
07:45:40 <jhunZoa> so lets say i have 6/10
07:45:43 <jhunZoa> 4 mistakes
07:45:46 <jhunZoa> 6-4 = 2
07:45:48 <jhunZoa> ;
07:45:56 <jhunZoa> he is evil
07:46:12 <shapr> I met Doaitse at ICFP03, he seemed perfectly nice.
07:46:14 <nlv11757_> i dont see how this is helping you getting better grades though?
07:46:29 <jhunZoa> me neither
07:46:38 <jhunZoa> so i have to get 10/10 for the assigment
07:46:45 <shapr> ok! go for it!
07:46:46 <boegel> what's the equivalent of =! again in Haskell ? I _always_ forget that
07:46:49 <shapr> /=
07:46:59 <boegel> that was it ! damn !
07:47:03 <jhunZoa> ye
07:47:12 <jhunZoa> that language doesnt make sense at all -.-
07:47:17 <shapr> What, dutch?
07:47:23 <shapr> Don't talk bad about dutch, we like dutch here.
07:47:25 * shapr grins
07:47:42 <nlv11757_> :)
07:47:49 <jhunZoa> i meant
07:47:51 <jhunZoa> haskell ofcourse
07:47:59 <jhunZoa> and ye dutch doesnt make sense either
07:48:18 <nlv11757_> arent you supposed to finish that exercise :P
07:48:19 <shapr> What programming languages do you like?
07:48:28 <jhunZoa> ye im coding now
07:48:38 <jhunZoa> i like php/javascript
07:48:43 <jhunZoa> im webdeveloper
07:48:53 <shapr> I'm a webdeveloper too. I use Haskell.
07:49:04 <jhunZoa> i feel sorry for you :P
07:49:06 <shapr> I like javascript, it's a prototype-oriented language.
07:49:16 <jhunZoa> ye
07:49:18 <boegel> jhunZoa: watch out with shitting on people who speak dutch... I'm warning you ;)
07:49:19 <shapr> Haskell is *far* more powerful than PHP.
07:49:20 <nlv11757_> webdeveloper? not much of those courses at UU i must warn you
07:49:28 <jhunZoa> i speak dutch myself ~
07:49:34 <jhunZoa> i know
07:49:36 <edwinb> They wouldn't teach you anything you don't already know...
07:49:44 <jhunZoa> 1 course about it
07:49:48 <jhunZoa> and some stuff about xml too
07:49:54 <nlv11757_> yeah, internet programming lol
07:49:59 <jhunZoa> ye
07:50:03 <nlv11757_> you had it last period?
07:50:06 <jhunZoa> i take that as a 3rd course next year
07:50:08 <jhunZoa> no
07:50:16 <nlv11757_> ow ok, otherwise i might have graded you :P
07:50:17 <jhunZoa> i think internet programming is really easy
07:50:34 <nlv11757_> a lot of people thought that too and failed
07:50:35 <shapr> I've been paid to do XML processing with Haskell. I did in three days what took someone else a month to unsuccessfully attempt with java and javascript.
07:50:41 <jhunZoa> whats hard about it?
07:50:49 <shapr> jhunZoa: what about object migration?
07:50:57 <nlv11757_> XML processing...did you use generic haskell for it shapr?
07:51:03 <shapr> Or capability security?
07:51:05 <jhunZoa> object migration?
07:51:10 <shapr> nlv11757_: nah, I used HXT.
07:51:16 <nlv11757_> ahhh missed chance :P
07:51:24 <boegel> hey swiert ! :D
07:51:35 * boegel gniffles
07:51:44 <jhunZoa> swierstra?
07:51:49 <jhunZoa> oh oh
07:52:02 <shapr> I might end up using Data.Generics, but I'm constrained by what GHC packages are available in the various Linux distros.
07:52:09 <shapr> hoi swiert
07:52:15 <nlv11757_> is that so shapr? too bad
07:52:28 <jhunZoa> swiert you are family of doaitse swierstra ?
07:52:29 <shapr> Yeah, clients are so limiting :-)
07:53:01 <nlv11757_> i did a generic xml parser once in generic haskell and was able to do it very elegantly
07:53:32 <shapr> I do wish GH were in base GHC.
07:53:33 * samc_ is procrastinating by doodling an angel with a lambda harp and a devil with a >> tipped spear (it's not too bad either) now I just need to do the head and shoulders between them
07:53:43 <shapr> samc_: oh nifty!
07:53:45 <jhunZoa> nlv what stuff i need to know for internet programming?
07:53:58 <swiert> hi shapr and boegel
07:54:33 <swiert> jhunzoa: yes, doaitse's my uncle
07:54:53 <jhunZoa> ah ok
07:54:57 <nlv11757_> let me see, it might change, but this year it was; PHP, perl, xslt, postgresql and more
07:55:09 <jhunZoa> postgresql :S
07:55:32 <jhunZoa> i know php/xslt
07:55:46 <jhunZoa> perl cant be to hard i have done some stuff with it
07:55:53 <jhunZoa> and i know mysql
07:55:58 <nlv11757_> yeah a lot of people...but a lot of people didnt know how to do it properly and still failed
07:56:13 <jhunZoa> what u mean properly?
07:56:19 <jhunZoa> i usually do it OO style
07:56:30 <nlv11757_> that is NOT my definition of properly :D
07:56:31 <nlv11757_> lol
07:56:37 <jhunZoa> well what then
07:56:40 <shapr> heya funkmando, wazzup?
07:57:11 <Philippa_> properly = your code is maintainable and doesn't ever screw up
07:57:27 <funkmando> if i have this function removeCorrect x y = [y | (x,y) <- zip x y, x /= y] where x and y are strings, and i want to add a condition that the elements of x are in the string y
07:57:35 <jhunZoa> well in our univeristy properly can mean totally something else
07:57:36 <funkmando> but im not sure how to actually get at the string y from this function
07:57:40 <funkmando> hey shapr
07:57:48 <nlv11757_> hunzoa....it kind of means the same
07:58:01 <nlv11757_> elegance is very important too
07:58:04 <jhunZoa> well ok then i know php prolly well enough
07:58:16 <jhunZoa> what about html/css ?
07:58:41 <jhunZoa> i guess the teacher doesnt know that too well
07:58:45 <nlv11757_> im not saying the course is really difficult...im just warning you, because i've seen too many people underestimating it and getting dissappointing grades
07:59:01 <nlv11757_> haha hunzoa, you should stop underestimating our teachers too
07:59:10 <jhunZoa> have u looked at the source?
07:59:12 <earthy> the course actually consists of work
07:59:20 <jhunZoa> all table crap
07:59:20 <nlv11757_> most of them now well more than you
07:59:21 <jhunZoa> frames
07:59:26 <earthy> which is a first in the courses for most people
07:59:28 <jhunZoa> not even proper html/css
07:59:35 <jhunZoa> acording to the w3c standards
07:59:53 <nlv11757_> you are referring to the coursepages?
07:59:55 <boegel> @index readFile
07:59:55 <shapr> jhunZoa: what's the difference between xml and html?
07:59:56 <lambdabot> Prelude,System.IO,IO
08:00:01 <jhunZoa> yes that course page
08:00:25 <nlv11757_> they are generated dude, no teacher is writing that source itself
08:00:28 * earthy thinks
08:00:30 <jhunZoa> huh?
08:00:35 * shapr stops thinking, too much work
08:00:36 <earthy> which pages does jhunzoa mean?
08:00:42 <jhunZoa> moment
08:00:55 <earthy> (www.cs.uu.nl/docs/vakken/inp/ or the /education/... page?
08:00:56 <earthy> )
08:00:59 <jhunZoa> http://www.cs.uu.nl/docs/vakken/inp/
08:01:13 <jhunZoa> i thought all course sites are made by the teachers
08:01:28 <nlv11757_> you didnt notice the correspondence of the pages :P
08:01:31 <earthy> ah, yes. that is legacy code not altered because it works well enough and there is more than enough time needed to do the teaching and assignment-devising :)
08:01:43 <jhunZoa> hehe
08:01:59 <jhunZoa> well the teacher is my tutor he is a nice guy :)
08:02:10 <earthy> (and you'll see that the html in each frame actually is w3c compliant)
08:02:44 <jhunZoa> ye
08:02:53 <jhunZoa> thats nice
08:03:18 <jhunZoa> so these people are smarter then i thought :)
08:03:29 <vincenz> so what'd I miss?
08:03:53 <funkmando> haskell is for smart people
08:03:55 <earthy> (and yes, it needs to be changed into divs and stuff)
08:03:57 <funkmando> that's why i struggle, lol
08:04:03 <jhunZoa> divs is not necessary
08:04:11 <earthy> jhunzoa: if you want fun with haskell and internet, try WASH
08:04:11 <jhunZoa> but at least those frames need to be cut out
08:04:25 <jhunZoa> i prefer php :)
08:04:38 <earthy> I don't. but I've seen too much of it :)
08:04:50 <jhunZoa> but im going more in the direction of js and user interface design
08:05:07 <nlv11757_> in the direction of js.....
08:05:21 <jhunZoa> not kiddy js
08:05:27 <jhunZoa> but like gmail and maps.google.com
08:05:28 <kosmikus> if php would be strongly typed ... ;)
08:05:29 <nlv11757_> is that that stuff im blocking with firefox?
08:05:30 <shapr> jhunZoa: do you know the difference between object oriented like java and prototype oriented like javascript?
08:05:31 <nlv11757_> lol
08:05:42 <earthy> well, js at least has a functional subset. :P
08:05:59 <nlv11757_> hahaa
08:06:02 <jhunZoa> shapr i dont know what u mean
08:06:18 <kosmikus> yeah, but js isn't server side, and badly implemented by many browsers
08:06:23 <jhunZoa> but nlv u dont like applications like gmail?
08:06:24 <vincenz> man this is slow
08:06:24 * earthy points jhunzoa to the little javascripter
08:06:28 <shapr> If you're going in the direction of web design, that sort of information might be important to you.
08:06:29 <Philippa_> shapr: in fairness, I didn't at the end of my second year at UoN
08:06:33 <vincenz> anyone use firefox?
08:06:37 <Philippa_> yeah
08:06:39 <boegel> vincenz: yep
08:06:41 <desrt> firefox sucks!
08:06:44 <desrt> (but i use it)
08:06:45 <jhunZoa> shapr i dont know much theory
08:06:47 <vincenz> boegel: well the new version has a nissue
08:06:57 <jhunZoa> but i can code in it
08:07:02 <Philippa_> the IDN thing, or something else?
08:07:02 <boegel> I've read about it
08:07:03 <nlv11757_> hunzoa, i hate js and am glad about the fact that im blocking it :D
08:07:08 <vincenz> boegel: an issue... basically when I click on links in a terminal...it opens them in an existing window and doesn't make a new widow
08:07:10 <boegel> the URI thing ?
08:07:13 <jhunZoa> hehe
08:07:20 <nlv11757_> i dont want to bother myself with webdesign anyway
08:07:23 <desrt> vincenz; that's in the preferences
08:07:28 <boegel> oh, like that
08:07:29 <jhunZoa> well its my job :)
08:07:30 <nlv11757_> it doesnt have my interest at ALL
08:07:34 <boegel> that's probably a setting of some sort
08:07:34 <jhunZoa> i got a good job in utrecht
08:07:41 <Philippa_> nlv11757_: I'd do it for sufficiently high pay and sufficiently low hours
08:07:41 <jhunZoa> starting tommorrow :P
08:07:43 <desrt> under advanced: "Open links from other applications in:"
08:07:47 <vincenz> desrt: ah thank you
08:07:47 <jhunZoa> but i gotta eat bbl
08:07:48 <desrt> (*) a new window
08:08:03 <Philippa_> but I'd lean towards infrastructure stuff if I did
08:08:03 <vincenz> cause I -do use   firefox "openurl(xxx,new-window)"
08:08:04 <nlv11757_> haha philippa_ that is exactly what i can't...i simply refuse doing that work for money
08:08:09 <vincenz> desrt: thanx!
08:08:13 <desrt> vincenz; np :)
08:08:16 <earthy> anyway, time to go home and then to Nijmegen
08:08:21 <earthy> avast!
08:08:28 <nlv11757_> bye bye
08:08:28 <Philippa_> nlv11757_: the low hours part is important :-)
08:08:38 <nlv11757_> haha ow having spare time for haskell :P
08:08:40 <Philippa_> I'll do it if it affords me enough spare time to mess around in
08:08:42 <nlv11757_> i get it
08:08:43 <kosmikus> earthy: bye
08:08:44 <vincenz> also I had upgraded...and my settings where all wrong (I got xml-parsing errors in the preferences window)...so I deleted my .mozilla...BYEBYE bookmarks :(
08:08:50 <Philippa_> oh, I'd do the infrastructure stuff /in/ Haskell
08:09:01 <desrt> kosmikus; yo.  sup?
08:09:06 <nlv11757_> infrastructure being what exactly?
08:09:10 <tromp> anyone want to look at some 133 lines of source for possible space leaks?
08:09:17 <vincenz> is freenode really slow?
08:09:25 <nlv11757_> hehe you make it sound so tempting tromp
08:09:32 <vincenz> I join a window...I don't get synched channels
08:10:02 <Philippa_> nlv11757_: to give an example, the wiki clone I wrote is mainly an 'infrastructure' kinda project - you set it up so it's easy to just fill in the blanks
08:10:02 <funkmando> say i have (x:xs) in my function definition. is there anyway to access the whole string?
08:10:18 <Philippa_> x:xs? :-)
08:10:19 <vincenz> say a@(x:xs)
08:10:21 <Philippa_> foo@(x:xs)
08:10:21 <tromp> str@(x:xs)
08:10:25 <vincenz> woo
08:10:28 <boegel> funkmando: use s@(x:xs)
08:10:30 <vincenz> and I don't know one iota of haskell
08:10:31 <boegel> damn :D
08:10:32 <Philippa_> foo@Foo{} is a useful pattern
08:10:48 <kosmikus> hi desrt
08:10:52 <funkmando> hmm? so this foo bit can be anything?
08:11:08 <boegel> funkmando: the left part, yes, it's just a name
08:11:16 <nlv11757_> philippa_, you mean like all the computation stuff, inner workings, are in haskell?
08:11:27 <Muad_Dibber> lol @ one iota vincenz :)
08:11:28 <desrt> kosmikus; how are packages these days?
08:11:46 <Philippa_> nlv11757_: yep
08:12:12 <funkmando> and then foo becomes the string x+xs ?
08:12:19 <vincenz> yes
08:12:21 <nlv11757_> ah, smart ;)
08:12:22 <vincenz> automagically
08:12:30 <Philippa_> the entire thing's just a plain CGI - atm, configuration's by altering a module full of simple bindings
08:12:43 <vincenz> eugh
08:12:43 <kosmikus> desrt: could be better; not much time, but araujo is helping now, and duncan might join, too
08:12:48 <vincenz> I want typeclasses for ml
08:12:52 <Philippa_> (on the basis you can runhugs it or somebody can hack up a mod_haskell using hs-plugins)
08:12:55 <kosmikus> desrt: haven't heard from you in a while; still hacking ghc?
08:12:59 <desrt> kosmikus; that's good news.
08:13:11 <desrt> kosmikus; ya.  slightly.  gentoo packaging for haskell wasn't exactly what i thought it would be.
08:13:13 <nlv11757_> you generate cgi out of HS modules?
08:13:26 <kosmikus> desrt: how so?
08:13:29 <Philippa_> nlv11757_: The haskell program is a CGI app
08:13:38 <vincenz> is it possible to define infix dataconstructors and be able to matche these infix constructors?
08:13:47 <nlv11757_> owww right, sorry i read the part about mod_haskell too late
08:14:01 <nlv11757_> didnt know if you were using that
08:14:02 <desrt> kosmikus; it ended up being more about the eclass system and rebuilding dependancies and so on than it was about getting ghc to work on lots of exotic platforms (which is what i thought it would be like)
08:14:12 <Philippa_> I'm not specifically ('sup to the end-user)
08:14:28 <kosmikus> desrt: ah, well, that's still required
08:14:40 <desrt> i think chris white's giganto-bug is still open :)
08:14:56 <nlv11757_> but since you have a haskell binding of cgi, he has to have something like that to use your haskell bindings right?
08:15:04 <nlv11757_> otherwise im lost :)
08:15:05 <kosmikus> desrt: yeah, chris did too many things at once, and stopped working on haskell for now
08:15:16 <desrt> kosmikus; i'm sort of the same way
08:15:21 <funkmando> Str@(x:xs) is giving me a parse error
08:15:27 <nlv11757_> drop the capital
08:15:29 <Philippa_> no, CGIs're ordinary apps that expect a certain set of environment variables and possibly some data on stdin and dump on stdout
08:15:32 <kosmikus> desrt: :)
08:15:48 <desrt> kosmikus; i sort of like gnome.  i'm doing some stuff there
08:15:49 <Philippa_> so you can write a Haskell module to implement that on top of existing functionality (it's included with GHC these days)
08:15:54 <desrt> plus work, plus school, plus the odd ghc hack
08:16:08 <kosmikus> desrt: anyway, if you're still interested in providing patches to make ghc work on more platforms, that's definitely welcome
08:16:13 <desrt> open source is so much fun.  but it's pretty easy to spread yourself too thin and piss people off :)
08:16:23 <kosmikus> desrt: it's just not what I want to be doing myself ;)
08:16:27 <nlv11757_> but the server has to call your haskell module to generate the output right?
08:16:31 <jhunZoa> back
08:16:39 <desrt> kosmikus; awesome. i'll keep that in mind
08:16:50 <desrt> how's the darwin project doing these days?
08:17:06 <Philippa_> nlv11757_: mod_haskell is just something you can use to make the process go faster
08:17:17 <jhunZoa> hey nlv is that software master nice?
08:17:23 <kosmikus> desrt: gentoo-darwin? not following that, sorry
08:17:36 <jhunZoa> darwin is from macosx if im right
08:18:13 <nlv11757_> hunzoa, if you are not liking haskell and want to be a webdeveloper....im not sure if it suits you
08:18:17 <Philippa_> Flippi itself is just a plain CGI, much as can be written in any half-decent language. It just happens to have the configuration compiled in (a mod_haskell makes this easier to change because you can effectively run an interpreted environment)
08:18:30 <desrt> kosmikus; i packaged a ghc for it (the normal darwin packages from wolfgang thaller used a macos .dmg type installer so they weren't really useable for us) but there was a lot of stuff missing that was required to make it work (like working libgmp in the tree, etc)
08:18:38 <jhunZoa> well i dunno what i want
08:18:42 <nlv11757_> i personally think the master at UU is awesome. There is not one course i didnt like
08:18:44 <jhunZoa> but i surely do not like haskell
08:18:49 <Philippa_> you /can/ just shove a runhugs #! at the top of each source file, 'sjust it'll be slow
08:18:49 <nlv11757_> well maybe programming and correctness
08:19:03 <Philippa_> much tedious maths in that one?
08:19:06 <kosmikus> nlv11757_: who's giving that?
08:19:06 <jhunZoa> and i hated java aswell because of the stupid assignments
08:19:13 <nlv11757_> yeah, hoare tripples and stuff
08:19:19 <Philippa_> oh, those things
08:19:20 <jhunZoa> but i think making usefull applications is quite cool
08:19:22 <vincenz> nlv11757_: hehe
08:19:23 <nlv11757_> in my time it was Frank de boer kosmikus
08:19:27 <nlv11757_> im sure it isnt anymore
08:19:27 * Philippa_ nods
08:19:35 <kosmikus> nlv11757_: ah, I see ;)
08:19:40 <samc_> so what does os x use for mp arithmetic?
08:19:42 <Philippa_> I had maths courses with Roland Backhouse. Well, that's a lie, I missed all the lectures with real content in them
08:19:43 <Muad_Dibber> programming and correctness at utrecht?
08:19:48 <desrt> kosmikus; quick one.  i'm in the middle of a GTK build and i don't want the tree blown away when it finishes.  what do i do? :)
08:19:59 <jhunZoa> i had math from yuri kouznakov or so
08:20:03 <jhunZoa> anyone else too?
08:20:06 <nlv11757_> i dont want to badmouth anyone :) but his teachings werent very compatible with me :)
08:20:12 <nlv11757_> and im very adaptable
08:20:13 <nlv11757_> :P
08:20:20 <Philippa_> I got through the one that had Hoare triples by reading up on the notation fast and hoping like hell I didn't need to learn any/many new techniques (I didn't, it was a first year course)
08:20:23 <kosmikus> desrt: you're already in the middle of it?
08:20:30 <kosmikus> desrt: then I don't know ...
08:20:35 <desrt> ya.  it's doing 'make install' right now :)
08:20:42 <Muad_Dibber> jhunZoa: the russian guy? :)
08:20:43 * desrt uses ^z and cp -R :)
08:20:44 <jhunZoa> ye
08:20:47 <jhunZoa> terrible
08:20:47 <nlv11757_> haha i promised myself *never* to do anything in that direction indeed philippa
08:20:51 <kosmikus> desrt: good idea
08:20:54 <jhunZoa> he is a nice guy
08:21:06 <jhunZoa> but his stuff
08:21:09 <jhunZoa> didnt make sense at all
08:21:09 <samc_> Backhouse, formal methods courses, all of you are bastards, lucky bastards
08:21:10 <kosmikus> desrt: I don't think you can change it at that point
08:21:44 <Philippa_> samc_: I've never really got on with his courses. One way or another, IANAMathematician
08:21:59 <Muad_Dibber> jhunZoa: he knows a lot, just not very good at teaching nor writing very clearly :)
08:21:59 <nlv11757_> instead, i went into the direction of courses that doaitse gave; type systems, efficient implementation of functional programming languages, etc.
08:21:59 <nlv11757_> i dig those courses :D
08:22:04 <desrt> eh
08:22:08 <jhunZoa> muad ye exactly
08:22:16 <jhunZoa> but i did pass :)
08:22:37 <jhunZoa> any of u had logics?
08:22:38 <Philippa_> actually that's not quite true. I just didn't take away what the course was meant to teach me - instead I took a lot of the same ideas and use them informally
08:22:46 <Muad_Dibber> jhunZoa: yeah it isnt to difficult either
08:22:48 <jhunZoa> by prof john jules
08:22:53 <Muad_Dibber> nlv11757_: where are you now then?
08:22:54 <samc_> I prefer imperative derivation to functional programming theory
08:23:09 <Philippa_> ultimately, I stopped doing proofs properly when I finished my A levels and those weren't proper proofs by any means
08:23:10 <kosmikus> Philippa_: I'm not sure if I'd classify Backhouse as a mathematician
08:23:33 <Philippa_> kosmikus: how would you classify him, JOOI?
08:24:33 <kosmikus> well, he's still a computer scientist, I'd say; he doesn't think like any mathematician (I mean one also working in that field) I know
08:24:35 <Muad_Dibber> Philippa_: how would you classify kosmikus?
08:24:47 <kosmikus> heh :)
08:24:52 <nlv11757_> im now doing msc thesis
08:24:56 <nlv11757_> and where are you now?
08:24:57 <nlv11757_> :)
08:25:15 <Muad_Dibber> 4th year following the ST master
08:25:25 <Philippa_> kosmikus: fair enough I guess. He certainly strikes me as the most mathematically-oriented of the FoP folks here that I've talked to though
08:25:40 <samc_> Philippa, I can't say that I routinely do total correctness proofs but having done them has greatly helped my thinking about programmig problems
08:25:43 <nlv11757_> ah i see, good chance i know who you are if i new your real name :D
08:25:50 <jhunZoa> im 1st year -.-
08:25:52 <Muad_Dibber> Philippa_: you forgot one thing though
08:26:01 <Philippa_> samc_: like I said, I took away some of the ideas for other purposes
08:26:22 <Muad_Dibber> nlv11757_: if i told you my name is raymon it probably doesnt ring a bell :P
08:26:46 <Philippa_> Muad_Dibber: ?
08:26:52 <nlv11757_> i mean your inlogname :)
08:27:08 <nlv11757_> the eight letters
08:27:18 <Muad_Dibber> Philippa_: he's also a generic haskell guru :)
08:27:38 <Philippa_> Muad_Dibber: I hadn't forgotten that, as it happens
08:27:50 <nlv11757_> hmmm im sure i can look the pic up at home i *then* reckognize you :)
08:28:11 <Philippa_> OTOH, nobody else I've had a course with has openly tried to push their pet non-computational calculus on me
08:28:30 <Muad_Dibber> Philippa_: should mention it in your classification :P
08:28:38 <samc_> what calc is that?
08:28:43 <lightstep> is there a specification of when lex returns [("","")] that applies to both the standard and the implementations?
08:28:46 <Philippa_> samc_: his quantifier calculus
08:29:02 <samc_> predicate calculus?
08:29:04 <kosmikus> I'm confused whether you are talking about me or Backhouse now ...
08:29:19 <Philippa_> Muad_Dibber: I never classified him - I just stated I'm not a mathematician
08:29:22 <Philippa_> samc_: no
08:29:52 <Muad_Dibber> kosmikus: i'm not sure either
08:29:59 <Philippa_> IIRC it tends to look like <quantifier>:<bound variables>:<expression>
08:30:05 <Muad_Dibber> but at least I said generic haskell once more :P
08:30:08 <kosmikus> I think Philippa was talking about Backhouse all the time ...
08:30:12 <Philippa_> right
08:30:17 <kosmikus> yeah, but GH is cool :) use it!
08:30:56 <Muad_Dibber> if only i had time :P
08:31:04 <Philippa_> when I have a good excuse to, I will
08:31:06 <samc_> so what then?
08:31:29 <Philippa_> samc_: when I say it's his pet, I mean as in he discovered it
08:31:30 <kosmikus> kolmodin: I saw the submission, thanks; I'll try to process it this week, okay?
08:31:57 <samc_> Phillipa I think he is pretty much following dijkstra, van gasteren etc
08:32:08 <Philippa_> IIRC his book on program construction uses it (certainly the course at UoN based around it does)
08:33:05 <swiert> so when is someone a computing/computer scientist and when is someone a mathematician?
08:33:16 <swiert> (this is something I've been wondering about lately)
08:33:27 <tromp> the latter if they prove theorems
08:34:06 <samc_> universal representations for quantifiers are normal in axiomatic semantics circles
08:34:12 <Muad_Dibber> the former if they implement a language or program for it instead of proving it
08:35:24 <funkmando> hmm this foo@(a:as)  isn't working as i'd hoped, because im using recursion foo just becomes as
08:35:27 <funkmando> instead of the whole string
08:36:02 <Lemmih> funkmando: eh?
08:36:23 <swiert> tromp: what about proving a theorem about programming languages? I'm not convinced that all computing scientists refuse to prove theorems.
08:36:55 <Muad_Dibber> swiert: why is it important anyway?
08:36:57 <nlv11757_> you are recursing on foo funkmando?
08:37:03 <nlv11757_> is that what you are saying?
08:37:16 <Philippa_> swiert: nobody said they're mutually exclusive
08:37:18 <kosmikus> swiert: no, definitely not; otherwise, I would almost exclusively know mathematicians ;)
08:37:26 <swiert> Muad_Dibber: it isn't really. What's in a name after all.
08:37:38 <nlv11757_> i do think theory is important, but im not mathmatician enough for it i guess
08:37:41 <funkmando> Lemmih can i private message you?
08:37:55 <funkmando> the function is 5 lines
08:37:58 <Muad_Dibber> nlv11757_: theory is important to do practical stuff
08:37:59 <samc_> funkmando, pass the whole string as an additional argument
08:38:16 <nlv11757_> exactly, but i think im not the mathmatician enough to develop theory
08:38:22 <samc_> a good theory...
08:38:30 <funkmando> samc_ thanks i'll try it
08:38:36 <nlv11757_> im still missing that magic mathmatician touch
08:38:37 <swiert> so I've been looking at some of Thorsten's papers recently - there's a lot of category theory, type theory, etc. in them.  Somehow, they aren't mathematics.
08:38:39 <tromp> i don't know of such things being phrased as theorems, swiert
08:39:28 <swiert> tromp: think of proving that a type system is sound and complete - this isn't very interesting for most mathematicians.
08:39:32 <samc_> I like any proofs in the Feijen foramt :)
08:39:43 <swiert> but really important for computing scientists.
08:39:45 <tromp> in practice the boundary is hard to define, but my rule is a reasonable if crude approximation
08:39:51 <nlv11757_> swiert, im just saying im not creative enough to come up with theorems and the sorts to form some theory
08:40:02 <nlv11757_> type systems i can grasp
08:40:22 <tromp> i'd be happy to call proofs of soundness and completeness mathematics
08:41:11 <Philippa_> swiert: Yeah, I suspected somebody'd name Thorsten as the other likely guy - I've never heard him dismiss the act of coding though
08:41:17 <swiert> somehow a lot of the mathematicians I know are interested in theory, just for the sake of doing mathematics - it's very l'art pour l'art.
08:42:36 <swiert> computing scientists have real world problems (ok - not all computing scientists will agree that proving a type system is sound and complete is a real world problems) and "borrow" from mathematical theory.
08:42:49 <samc_> a mathematician does maths for maths sake
08:42:55 <swiert> exactly.
08:43:07 <Philippa_> swiert: I think most would agree it's a real world problem if it's a system for a real world language that's supposed to have those properties
08:43:43 <swiert> Philippa_: I'm not sure if your average web developer would agree with that.  Most people on this channel on the other hand...
08:43:49 <Philippa_> and yeah, I'm very much in the compsci camp. Actually, more realistically I'm not even there, I'm more an engineer
08:44:00 <Philippa_> your average web developer isn't a computer scientist, whether they're studying a compsci course or not
08:44:11 <swiert> Philippa_: too true.
08:44:29 <Philippa_> also, they'd agree once you pointed out that this language was being used to eg design the chips their code runs on
08:44:47 <nlv11757_> im not sure yet what i am :) not a webdeveloper in any case
08:45:04 <Philippa_> most people seem to forget safety critical apps when they think about real world for some reason
08:45:16 <PerlJam> Philippa_: your average person with a degree in computer science isn't a computer scientist ;)
08:45:28 <Philippa_> PerlJam: bingo :-)
08:46:26 <Philippa_> I'm not sure I count, much as I've been playing with a few fun pseudo-research projects (I'm rapidly discovering folks got to a lot of the meat of what I'm doing proof-wise before me, I guess "development" in the R&D sense is more appropriate)
08:46:34 <swiert> I think engineering might be the key.  Computing science is always about engineering and design - even if it does a lot of wierd theory, there's always a purpose or a problem.
08:46:42 <PerlJam> I've known many people with MS in computer science (and a few PhDs) who come to me with help and I end up having to explain things like big-O notation and even recursion.  It's just bizarre.
08:46:57 <PerlJam> s/with/for/
08:47:06 <PerlJam> er, s/with help/for help/ :)
08:47:51 <Philippa_> swiert: yeah. I'd call myself a software engineer, only on one level it doesn't seem fair to all the other engineering categories and on another I'm not quite what's usually /meant/ by that
08:48:16 <Philippa_> I do those sorts of things too admittedly, but not with half the process that's typically involved
08:48:39 <swiert> Philippa_: software engineer has become somewhat polluted. I usually associate it with large Java projects.
08:48:52 <Philippa_> theoretically-inclined hacker's probably about right, so long as I'm not talking to somebody who thinks hacker = no concept of correctness
08:49:09 <Philippa_> swiert: right
08:49:18 <Philippa_> so yeah. You?
08:49:53 <swiert> I'm still trying to figure things out.  I've spent plenty of time studying both mathematics and computing science.
08:50:16 <Philippa_> yeah. I'd like to know more maths, but it's always intended for practical purposes sooner or later
08:50:43 <swiert> I really appreciate mathematics for the formalism, and a lot of the theory, but don't like developing more theory for the heck of it.
08:51:58 <Muad_Dibber> swiert: wondering wheter you are the one trying to incorporate attribute grammar into EHC?
08:52:06 <swiert> enter computing science - at some point, there are fundamental questions, and a lot of theory - keeping in mind there is always a reason, however abstract it may be, to develop new theory.
08:52:23 <swiert> Muad_Dibber: yes I am.
08:52:50 <swiert> I hope to graduate within a week though.  I'm defending my thesis on Thursday.
08:54:25 <Muad_Dibber> it's on the colloquiem right?
08:54:31 <swiert> yep.
08:55:09 <Muad_Dibber> i'm interested to hear what you have to say :)
08:55:59 <swiert> If you have access to the secure intrawiki, you can get a sneak preview of my thesis.
08:56:12 <araujo> swiert, what is your thesis about?
08:56:17 <shapr> jiihaa
08:56:35 <swiert> araujo: do you know anything about attribute grammars?
08:56:52 <araujo> not really
08:57:18 <Muad_Dibber> hehe
08:57:43 <swiert> ok - the bottom line is: attribute grammars are a declarative formalism for describing syntax directed computation (think of computing something from an abstract syntax tree).
08:57:49 * araujo is just a freshman 
08:58:20 <araujo> nice
08:58:24 <swiert> attribute grammars describe calculations over trees in a declarative fashion.
08:58:47 <swiert> functional programs describe any computations in a declarative fashion.
08:58:53 <swiert> now how do the two relate?
08:59:06 <nlv11757_> ag's rule :P
08:59:11 * Muad_Dibber raises finger
08:59:22 <Muad_Dibber> they describe something in a declarative fashion
08:59:38 <Muad_Dibber> that the correct answer?
08:59:41 <araujo> 8)
08:59:56 <nlv11757_> ag + haskell relieves the user from the tedious task of scheduling the evalution of attributes
08:59:57 <jhunZoa> im close to the correct function ~
09:00:06 <swiert> yes - but can you "unite the two under the same flag"?
09:00:30 <nlv11757_> swiert, is first classness in there yet?
09:00:32 <Philippa_> will you hit me if I say "implement AGs as a DSL in an FPL"?
09:00:37 <araujo> swiert, functional programms would be more general i suppose
09:00:52 <swiert> the UUAG is neat, but doesn't do any type checking, and is not particularly flexible.
09:01:30 <swiert> Philippa_: exactly - Kevin Backhouse wrote some stuff on that.
09:01:46 <shapr> Sounds powerful for refactoring.
09:02:15 <Muad_Dibber> what you mean shapr?
09:02:29 <Philippa_> so yeah, what would I get beyond the usual facilities?
09:02:30 <shapr> computing something from an AST
09:02:41 <swiert> I've been working on a fairly conservative "extension" of Haskell (that is, add a few built-in functions and some syntactic sugar) that allow you to write ags in Haskell
09:02:45 <Philippa_> (bear in mind I've not really read anything about AGs, but I play around with ASTs all the time)
09:02:57 <shapr> A refactoring browser is essentially a regex-replace engine on ASTs
09:03:43 <Muad_Dibber> shapr: i'm at the moment following another course
09:03:44 <Muad_Dibber> program transformation
09:03:49 <swiert> nlv11757_: yes. I have first class attribute grammars.  Unfortunately no first class attributes (i.e. parameterise attribute grammars fragments by attributes) but I have some ideas about how to do that.
09:03:53 <nlv11757_> ah PT; still doing partial evaluation in tiger muad?
09:03:55 <Muad_Dibber> which is about a system completly about refactoring the AST
09:04:07 <nlv11757_> ah, cool swiert
09:04:16 <Muad_Dibber> nlv11757_: not really i think
09:04:19 <shapr> Muad_Dibber: stratego?
09:04:35 <Muad_Dibber> we should get a different lab assignment
09:04:36 <swiert> Philippa_: one of the real advantages of using ags is that they scale well - better than monads + monad transformers imho
09:04:37 <nlv11757_> no? the big practicum with use was a partial evaluator for Tiger
09:04:41 <Muad_Dibber> shapr: yeah
09:04:47 <shapr> stratego is nifty.
09:05:05 <nlv11757_> ah better for you i think, it was soooo much work when i had to do it.
09:05:24 <boegel> nlv11757_: I'm getting classes on Tiger too
09:05:30 <swiert> anyway, I'm off to fix dinner. bbl.
09:05:52 <shapr> seems to me that AGs and monad transformers have a whole different shape.
09:06:22 <nlv11757_> ah yeah, it seems a nice toy language for these kind of application boegel
09:08:14 <Muad_Dibber> nlv11757_: anything eelco visser makes you do cost a lot of work
09:08:57 <tromp> shapr: want to look at my source code?
09:09:00 <shapr> yes
09:09:13 <shapr> but I can't do DCC with this client
09:09:25 <tromp> see www.cwi.nl/~tromp/c4/fhour.html
09:10:30 <shapr> Main.hs ?
09:10:32 <tromp> specifically, the links to Connect4.hs Main.hs
09:10:39 <nlv11757_> true muad, i totally agree. all courses by eelco cost tons of work
09:11:04 <nlv11757_> PT was insane though, every week a lab exercise with only one or two assistance hours
09:11:18 <shapr> sounds like fun
09:11:20 <nlv11757_> im glad he changed it a bit
09:11:29 <jhunZoa> haskell also has only 2 assistent hours
09:11:36 <shapr> I started writing a Python refactoring browser once, but I didn't have powerful enough tree rewriting tools.
09:11:38 <nlv11757_> shapr, it is fun, but you have to take into account that i also had another course
09:11:46 <nlv11757_> hunzoa, dont even compare FP with PT
09:11:47 <nlv11757_> lol
09:11:52 <jhunZoa> whats pt?
09:11:53 <shapr> With stratego and an SDF2 Python Parser, I could kick some serious butt.
09:11:59 <nlv11757_> program transformation
09:12:14 <Muad_Dibber> hehe
09:12:14 <jhunZoa> ok
09:12:39 <vincenz> shapr: getting into stratego
09:12:41 <Muad_Dibber> shapr: well, the parser you can generate from the SDF :P
09:12:42 <vincenz> ? :)
09:12:48 <vincenz> stratego rox
09:13:03 <shapr> Muad_Dibber: yeah, I know, but haven't written an SDF for Python yet.
09:13:19 <shapr> vincenz: been into stratego
09:13:23 <vincenz> cool
09:13:26 <shapr> were you asking me if I was getting into it?
09:13:34 <vincenz> getting into...been into
09:13:37 <nlv11757_> stratego isnt typed :(
09:13:46 <nlv11757_> it cant be
09:13:49 <shapr> MetaEnviroment hooked me for a few months, but it seems impossible to get it working from the debs.
09:13:49 <nlv11757_> but it isnt
09:13:53 <vincenz> it could be
09:14:00 <vincenz> with one big disjoint union
09:14:01 <shapr> Solution is Yi
09:14:04 <vincenz> but what would be the point?
09:14:06 <Muad_Dibber> shapr: i was looking into it whether i could fine one just before you mentioned it :P
09:14:10 <nlv11757_> hehe indeed
09:14:11 <vincenz> shapr: yuef
09:14:14 <shapr> fine one what?
09:14:38 <shapr> Muad_Dibber: oh, SDF for Python? Is there one?
09:17:08 <Muad_Dibber> shapr: havent found it
09:18:36 <shapr> tromp: can't you dump parent parts of the tree by peeling out a subtree and shadowing the name to the parent with that subtree?
09:19:25 <tromp> i don't follow:(
09:19:46 <tromp> did you reproduce the space leaking behaviour?
09:20:05 <tromp> for instance, with Enter moves: 1 1 1 1 1 1 2 2 2 2 2 2 3 3 3 3 3 4 4 4 4 4 4 5 5 5
09:20:13 <tromp> it steadily grows from 5m to 307m
09:21:15 <tromp> shld i maybe post it to the newsgroup?
09:22:19 <jhunZoa> damn this compiler is bugged
09:23:34 <boegel> jhunZoa: which one ?
09:24:22 <jhunZoa> helium
09:24:53 <jhunZoa> transpose [[string]] works
09:24:57 <jhunZoa> but if i make a function
09:25:03 <jhunZoa> f s = transpose s
09:25:06 <jhunZoa> its bugged
09:25:34 <shapr> tromp: went up to 100m or so and finished on ghc version 6.4.20050212
09:27:15 <tromp> i compiled mine with ghc-6.2.2 -fglasgow-exts -prof -auto-all -O2 --make Main
09:27:32 * shapr tries that
09:27:34 <tromp> but it shld use only a few mb
09:28:30 <jhunZoa> if i do transpose [[1,2,3,4],[a,b,c,d]] it should be [1,a],[2,b],[3,c],[4,d] right?
09:28:40 <jhunZoa> in a list
09:29:23 <nlv11757_> you tried actually evaluating it?
09:29:58 <wilx> -O2? I thought GHC has only one level of optimization.
09:30:28 <nlv11757_> http://www.haskell.org/ghc/docs/latest/html/users_guide/options-optimise.html
09:30:31 <jhunZoa> well its really weird
09:30:44 <jhunZoa> if i use transpose in helium it works
09:30:45 <nlv11757_> what is weird?
09:30:52 <jhunZoa> but if i write it in the code it doesnt work
09:31:10 <tromp> Prelude Data.List> transpose [[1,2,3,4],[4,5,6,7]]
09:31:10 <tromp> [[1,4],[2,5],[3,6],[4,7]]
09:31:17 <jhunZoa> exactly
09:31:25 <jhunZoa> but my helium doesnt do that
09:31:39 <nlv11757_> what does it say hunzoa
09:32:12 <jhunZoa> it creates one long list and then several one element lists
09:32:35 <jhunZoa> so it only applies transpose to the 2nd list
09:32:55 <jhunZoa> ([a,b,c,d]
09:32:57 <jhunZoa> )
09:34:11 <nlv11757_> do a :t transpose and tell me what it looks like
09:35:35 <jhunZoa> :t ?
09:35:49 <nlv11757_> ok retrieve the type for transpose for me
09:36:06 <TheHunter> tromp, how long should that take?
09:36:10 <nlv11757_> so im sure its the same in helium as in ghci
09:36:32 <TheHunter> 953410?
09:36:43 <TheHunter> tromp, foldM is your problem.
09:37:01 <jhunZoa> [[a]] -> [[a]]
09:37:20 <TheHunter> try
09:37:22 <TheHunter> foldM' :: Monad m => (a -> b -> m a) -> a -> [b] -> m a
09:37:22 <TheHunter> foldM' f z [] = return z
09:37:22 <TheHunter> foldM' f z (x:xs) = do
09:37:22 <TheHunter>   fzx <- f z x
09:37:22 <TheHunter>   fzx `seq` foldM f fzx xs
09:37:27 <jhunZoa> if i do in helium: transpose(function) it works
09:37:39 <jhunZoa> but if i do function = (transpose(answer))
09:37:42 <jhunZoa> its bugged
09:38:19 <nlv11757_> pm me the code, you are doing something wrong
09:38:32 <tromp> hi TheHunter
09:38:54 <tromp> yes, 953410 is right
09:39:24 <jhunZoa> all the code or just the part?
09:39:28 <jhunZoa> which doesnt work
09:39:50 <tromp> i'll try that foldM'
09:39:51 <nlv11757_> only the part thats relevant :D
09:40:38 <jhunZoa> ok
09:44:33 <vincenz> TheHunter: why do you need the fzq `seq`  bitM
09:44:35 <vincenz> bit?
09:45:22 <tromp> that seems to work fine
09:45:23 <TheHunter> vincenz, that is the usual foldl being to lazy issue. Let's say we compute foldl (+) 0 [1,2,3].
09:45:29 <tromp> 3 cheers for TheHunter!
09:45:29 <vincenz> yip
09:45:44 <samc_> yip
09:45:45 <vincenz> but what does it mean?
09:45:51 <vincenz> I don't know hashelll
09:45:55 <vincenz> you just want the result don't you?
09:46:03 <vincenz> so  just ... foldM f fzx xs
09:46:36 <TheHunter> vincenz, a `seq` b first evaluates a (to whnf) and then returns b.
09:47:09 <vincenz> so it forces computation
09:47:15 <TheHunter> yep.
09:47:16 <vincenz> ah
09:47:19 <vincenz> heh.
09:47:30 <vincenz> and here you're all talking about how clean haskell is as it's purely function
09:47:38 <vincenz> yet you gotta force computations to stop memory bloat
09:47:39 <vincenz> :P
09:48:02 <vincenz> seems you moved so far away from the machine you need functions to push you back
09:48:08 <autrijus> hey. can someone do me a favor?
09:48:10 <tromp> well, if it's only one `seq` per 100 lines of code... i can live with that:)
09:48:13 <vincenz> autrijus: sure
09:48:21 <autrijus> darcs get http://www.syntaxpolice.org/tmp/pugs
09:48:26 <autrijus> tar cjf pugs.tbz pugs
09:48:30 <autrijus> and make that .tbz available somewhere.
09:48:35 <vincenz> I don't have darcs
09:48:41 <autrijus> I'm without any computer that can run darcs at a reasonable speed.
09:49:06 <autrijus> someone else? :)
09:49:21 <vincenz> what is darcs?
09:49:33 <vincenz> and why does it require computer speed?  Isn't it just cvs or something like that?
09:49:33 <autrijus> vincenz: it's a version control system written in haskell.
09:49:44 <autrijus> it is horribly slow when doing complex operations.
09:50:03 <vincenz> ah
09:50:08 <ibid> autrijus: it works well enough for small repos
09:50:13 <vincenz> that's what I like about haskell
09:50:22 <vincenz> such a community of people that do everything with haskell tools
09:50:23 <Igloo> Have you tried getting it yourself? How long did you give it?
09:50:29 <vincenz> the ml community is a lot more split
09:50:37 <autrijus> Igloo: oh and I'm on a 9600bps dialup :-/
09:51:10 <Igloo> It took me 46s of real time and 3s of CPU time
09:51:29 <autrijus> ok. I should explain more.
09:51:30 <tromp> TheHunter: why does the recursive call go to foldM rather than foldM' ?
09:51:34 <autrijus> syntaxninja sent me some pugs patches in darcs.
09:51:39 <autrijus> his context and mine was not identical.
09:51:45 <autrijus> the common repo upstream is down.
09:51:53 <Igloo> So you'll probably get a slight speedup by not having to establish ~200 connections, but other than that should be fine
09:51:58 <jhunZoa> can the haskell lazy evaluation create bugs?
09:52:21 <ibid> jhunZoa: if you misuse it, sure
09:52:22 <tromp> no, but it can slow them down:)
09:52:29 <autrijus> Igloo: each connection here takes ~30sec to handshake.
09:52:32 <jhunZoa> damn
09:52:34 <ibid> jhunZoa: like any programming language feature
09:52:39 <autrijus> Igloo: so, 30*200 is... large.
09:52:39 <jhunZoa> ye
09:52:40 <nnunley> jhunZoa: All a question of if you assume execution order.
09:52:42 <Igloo> musketeer.comlab.ox.ac.uk/~igloo/pugs.tbz anyway
09:52:49 <autrijus> Igloo++ # thank you.
09:52:56 <jhunZoa> it has to do with execution order i think
09:53:02 <Igloo> ~30s sounds like either an overexaggeration or something being broken
09:53:03 <ibid> real    1m33.971s
09:53:04 <ibid> user    0m5.505s
09:53:04 <ibid> sys     0m0.791s
09:53:09 <autrijus> Igloo: I am in China.
09:53:14 <ibid> (that darcs get)
09:53:21 <jhunZoa> cause transpose  [ [1,2,3,4],[a,b,c,d]] returns [1,a,b,c,d],[2],[3],[4]
09:53:30 <jhunZoa> and those lists are results of functions
09:53:32 <Igloo> Latency to China isn't /that/ bad, surely?
09:53:37 <autrijus> with a very noisy phone line dialup.
09:54:00 <autrijus> my commits typically takes anywhere from 10sec to 1min to get thru; and ssh handshake takes up to 2min.
09:54:06 <Igloo> Noise could well count as something being broken  :-)
09:54:11 <autrijus> so, not an usual situation.
09:54:32 <autrijus> but, the comment about darcs being slow is actually when applying ninja's patches.
09:54:32 <ibid> HTTP/1.1 allows multiple requests per connection
09:54:49 <autrijus> the first one applies just fine; the one after that took ~half an hour
09:54:50 <autrijus> and had no signs of stopping.
09:55:09 <Igloo> I'm not sure under what circumstances darcs will take advantage of that though, ibid
09:55:20 <ibid> Igloo: it should :)
09:55:21 <autrijus> I think libcurl opens one new connection each time.
09:55:32 <autrijus> at least that is what looks like to me.
09:55:32 <ibid> then libcurl is broken
09:55:38 <ibid> or its use
09:55:40 <autrijus> or the way darcs uses libcurl.
09:55:43 <autrijus> exactly.
09:55:52 <ibid> hmm, let's see how it's used...
09:56:33 <TheHunter> tromp, that should've been foldM', of course, i'm surprised that it works in spite of this bug...
09:56:34 <autrijus> the platform is win32 (xp), darcs 1.0.2 (binary build), if that helps.
09:56:54 <tromp> maybe cause the branching factor was limited in my example
09:57:17 <autrijus> still downloading that .tbz :-/
09:57:29 <autrijus> stalled. now needs one more minute...
09:57:48 <tromp> actually, the real code doesn't use this foldM or this counting, but an alpha beta search
09:58:00 <tromp> but now I should have an idea of how to fix that...
09:58:34 <autrijus> mm, 1546ms pings with two dropped packets out of five.
09:59:02 <TheHunter> wow, space behaviour is much better with my "wrong" foldM'.
10:00:54 <tromp> what? it gets worse with your recursive call corrected?
10:01:32 <TheHunter> yes, that's a very strange behaviour, indeed.
10:01:54 <tromp> seems the same over here
10:02:00 <tromp> 14491 tromp     25   0  7656 3148 4216 R 95.5  0.3   0:24.96 a.out
10:02:12 <tromp> stays at 3Mb resident
10:02:38 <ibid> libcurl apparently supports persistent connections
10:02:42 <tromp> this is with ghc-6.2.2 -fglasgow-exts -prof -auto-all -O2 --make Main
10:03:51 <tromp> off to diner...
10:05:33 <ibid> still slurping darcs patches...
10:10:25 <autrijus> hey shapr. how's TMR doing?
10:10:34 <shapr> tromp: sadly, the problem with this code did not yield to a shallow analysis, and I gotta work on TMR.
10:10:40 <shapr> autrijus: in progress :-)
10:10:52 <autrijus> go shapr!
10:11:27 <pesco> Damnit, how does this TeX thing work!?
10:11:34 <ibid> pesco: well :)
10:11:36 <shapr> Should have at least six articles.
10:11:50 <shapr> pesco: Do you have the latex stylesheet?
10:12:11 <shapr> pesco: note that next issue will be using wikipublishing, allowing optional inline LaTeX, but not requiring authors to know TeX.
10:12:13 <pesco> shapr: Yes, the problem is, I'd like to add subtitle support to tmr.cls.
10:12:17 <shapr> ah
10:12:54 <glimming> I want to implement a toy programming langauge in haskell.
10:13:08 <glimming> I have a lot of datatypes etc, but it is cumbersome to give the
10:13:08 <glimming> values in ghci.
10:13:18 <glimming> Instead it would be nice to parse some syntax and create values.
10:13:21 <pesco> I've fiddled around in the code by somehow it's not recognizing \@subtitle in the definition of \maketitle, even though I put \global\let\@subtitle\@empty where all the other \global\lets are.
10:13:27 <glimming> What route would you suggest?
10:13:54 <edwinb> happy is nice and easy to use
10:13:57 <autrijus> uhm, write a module?
10:14:12 <autrijus> instead of giving values in ghci, that is.
10:14:32 <glimming> autrijus, no that's not what I am asking.
10:14:38 <glimming> I have modules.
10:14:48 <samc_> wasn't there something on this topic on LtU recently?
10:15:00 <edwinb> Do you mean you want to write a simple parser?
10:15:04 <autrijus> ah. you want a way to parse programs in your toy language?
10:15:07 <glimming> Indeed, yes.
10:15:08 <autrijus> Parsec should be more than enough.
10:15:14 <chucky> yes Parsec is nice
10:15:19 <glimming> And I am not sure if I want to use haskell or an algebraic
10:15:19 <glimming> specification language.
10:15:24 <glimming> Parsec or happy?
10:15:28 <edwinb> I prefer happy to parsec ;). But I'd used yacc a lot before.
10:15:42 <autrijus> and having no experience with yacc, I'd say Parsec is much easier to learn.
10:15:48 <autrijus> so it depends on your background :)
10:15:53 <chucky> bnfc might be nice as well. But both happy and bnfc seem to be overkill. :)
10:15:55 <glimming> I have no experiencce with yacc.
10:16:12 <glimming> I like parser monads, but I know little about them ;-)
10:16:21 <autrijus> oh. then I'd recommend parsec. just read the tutorial and you should be fine.
10:16:28 <autrijus> there's some good examples that comes with parsec distribution.
10:16:36 <autrijus> and it's builtin in ghc as well.
10:16:45 <shapr> One benefit of Parsec is that you can also execute your language in your parser.
10:16:49 <autrijus> and there is a perl6 parser in http://svn.perl.org/perl6/pugs/trunk/src/Parser.hs by yours truly, if you want examples :)
10:16:50 <edwinb> And even though I like happy, I really ought to give parsec a go for my next toy language.
10:18:18 <ibid> looks like darcs does call libcurl correctly wrt persistent connections
10:18:49 <glimming> autrijus, that's a hard-coded parser?
10:18:55 <glimming> or using parsec?
10:19:49 <autrijus> ibid: okay. I'd love to know why, then, that each patch seems to take an equally (very) long time to fetch, regardless of its size.
10:20:01 * autrijus ponders content-based firewalls.
10:20:29 <autrijus> but it's nice to know that darcs is using http 1.1 correctly.
10:20:33 <autrijus> glimming: it is using parsec.
10:20:51 <autrijus> just replace all "Rule" with "Text.ParserCombinator.Parsec".
10:21:06 <autrijus> glimming: the helper stuff are in Lexer.hs
10:21:15 <autrijus> for example, that's where "rule" is defined.
10:21:17 <glimming> Ok. Is there a good tutorial on parsing?
10:21:40 <autrijus> glimming: also for trivial languages parsec has builtin Language module
10:21:43 <edwinb> Maybe I'm just not used to parsec, but I think I prefer being able to hack the BNF (more or less) directly.
10:21:51 <autrijus> that can handle all operators for you
10:21:57 <glimming> but ghc uses happy
10:22:00 <ibid> autrijus: well, i haven't actually observed it do it correctly, it just seems to call libcurl correctly
10:22:01 <autrijus> the precedence and assoc of which may be generated by your program.
10:22:05 <glimming> is happy odler?
10:22:09 <autrijus> glimming: http://www.cs.uu.nl/~daan/download/parsec/parsec.html
10:22:21 <ibid> autrijus: is it possible that you have a HTTP/1.0 proxy between you and the site?
10:22:43 <autrijus> ibid: it is conceivable. let me do some checks
10:23:27 <glimming> over and out, many thanks
10:24:16 <autrijus> it announces that it's using http 1.1.
10:24:20 <autrijus> "GET /testtest/_darcs/inventory HTTP/1.1" 404 337 "-" "darcs/1.0.2 (libcurl/7.12.2)"
10:24:42 <autrijus> how do I check for keep alivedness from the apache side?
10:25:51 <ibid> what do you mean?
10:26:07 <ibid> keep-alive is btw deprecated
10:26:12 <autrijus> the incoming ip is not my dialup ip, so clearly there's a transparent proxy.
10:26:19 <pesco> Yes!
10:26:25 <autrijus> and the latency is long.
10:26:42 <autrijus> so I'd like to trace whether during two fetches, there's been a reconnect
10:26:46 <autrijus> or if it's using the same socket.
10:27:07 <ibid> HTTP/1.1 is by default persistent, there's the Connection: close header when it's not
10:27:14 <autrijus> ah. right.
10:27:30 <autrijus> anyway. I learn here that if you google for some sensitive keywords
10:27:36 <autrijus> then your network will suddenly break down.
10:27:39 <autrijus> for a few mins.
10:27:44 <ibid> heh
10:27:44 <autrijus> also, all the google caches are broken.
10:27:49 <ibid> or not heh
10:28:03 <autrijus> so I think it's fair to assume that there's a content-level filter somewhere that needs to do calculations ;)
10:28:12 <ibid> yeah
10:28:36 <glimming> why do we sometimes need fixedpoints of *=>* constructors instead
10:28:36 <glimming> of just types. Is there an example of this?
10:38:01 <CosmicRay> good afternoon #haskell
10:38:23 <metaperl6> his CosmicRay, I am starting to dig into the Perl6 implementation in haskell
10:38:30 <Oeje1> God eftermiddag, CosmicRay.
10:38:36 <metaperl6> if you want to help me understand Junc.hs I would appreciate it
10:38:52 <CosmicRay> metaperl: I can take a look.  give me a minute to pull it up.
10:39:22 <CosmicRay> oeje1: Hmm, is that danish?
10:39:34 <CosmicRay> it looks very similar to German
10:39:47 <pesco> shapr: I've added subtitle support, should I send the patch to you?
10:39:55 <ibid> CosmicRay: hyv√§√§ iltaa :)
10:39:57 <chucky> it looks exactly the same as in Swedish. :)
10:40:05 <CosmicRay> ibid: that doesn't :-)
10:41:10 <ibid> it's finnish :)
10:41:18 <ibid> (good evening)
10:42:34 <CosmicRay> metaperl: ok, I've got Junc.hs pulled up.  We'll see if I can help.  what's your question?
10:42:58 <Oeje1> CosmicRay: Yes, but according to chucky it's also Swedish.  Take a pick. :-)
10:43:40 <metaperl6> CosmicRay, none yet. I just setup a file in svn that I am going to document Junc.hs in. When I hit a snag, I will ping you again
10:44:16 <CosmicRay> ok.
10:44:46 <CosmicRay> Oeje1: I think I'll stick to learning German for the moment, thanks :-)
10:45:04 <Oeje1> CosmicRay: Aber doch.
10:45:55 <CosmicRay> emphasis on *learning*.  That would seem to me to mean "but yes", but that doesn't make any sense :-)
10:46:07 <CosmicRay> hello ninjajones
10:47:26 <shapr> y0 pesco, send the patch to the darcs repo.
10:47:29 <Oeje1> CosmicRay: I was just agreeing.  More than one language at a time, and your brain will boil over.
10:47:35 <CosmicRay> heh
10:47:37 <shapr> Clueless is my middle name.
10:47:58 <CosmicRay> Oeje1: I seem to have a terribly difficult time learning human languages, for whatever reason.
10:48:19 <CosmicRay> Oeje1: computer languages, I can pick up fairly easily.  (Though there are a number of concepts in Haskell that frankly I haven't even touched yet)
10:49:30 <_JusSx__> i wonna learn haskell
10:49:36 <CosmicRay> _JusSx__: super
10:49:37 <_JusSx__> a tutorial?
10:49:47 <CosmicRay> _JusSx__: have you worked with any other languages before?
10:49:56 <_JusSx__> yeah
10:49:59 <CosmicRay> _JusSx__: I recommend this tutorial: http://www.isi.edu/%7Ehdaume/htut/
10:50:00 <_JusSx__> C
10:50:05 <_JusSx__> C++, java,
10:50:07 <_JusSx__> pascal
10:50:08 <_JusSx__> cobol
10:50:17 <SyntaxNinja> hey CosmicRay
10:50:23 <_JusSx__> Basic of my commodore 64
10:50:25 <CosmicRay> _JusSx__: you are going to love haskell :-)
10:50:29 <_JusSx__> OCaml
10:50:33 <CosmicRay> ocaml even.
10:50:37 <_JusSx__> i love OCaml
10:50:42 <CosmicRay> well you will find the typing system very familiar
10:50:47 <Oeje1> CosmicRay: You just have to play a lot and give yourself some interesting sentences to translate.
10:50:48 <_JusSx__> i wonna learn haskell
10:50:59 <CosmicRay> _JusSx__: well start at that url I sent you
10:51:10 <CosmicRay> SyntaxNinja: any news on the community.haskell.org stuff/
10:51:18 <_JusSx__> and installing the compiler?
10:51:19 <CosmicRay> _JusSx__: ask questions here when you get stuck
10:51:28 <CosmicRay> _JusSx__: there are two popular options
10:51:30 <CosmicRay> _JusSx__: ghc and hugs
10:51:34 <CosmicRay> _JusSx__: www.haskell.org/ghc
10:51:40 <CosmicRay> _JusSx__: www.haskell.org/hugs
10:51:50 <pesco> shapr: Sent to shae@scannedinavian.org.
10:51:57 <Oeje1> _JusSx__: You seem to have a strong urge to learn Haskell.  Any particular reason?
10:52:09 <CosmicRay> _JusSx__: ghc comes with a compiler and an interpreter.  hugs an interpreter only.
10:52:12 * shapr thinks power!
10:52:24 <_JusSx__> i love functional programming
10:52:29 <CosmicRay> Oeje1: for me, it was curiosity and interest.  and that.
10:52:29 <_JusSx__> this is the main reason
10:52:34 <_JusSx__> i wonna know
10:52:48 <ibid> hmm, should i write a web browser in haskell
10:52:49 <shapr> They call me Lambda Richilieu
10:53:08 <CosmicRay> they call me "the guy that doesn't get most of the math jokes in #haskell"
10:53:23 <shapr> Sometimes they call you CosmicNeal
10:53:57 <shapr> greetz cptchaos
10:53:59 <CosmicRay> heh
10:54:15 <shapr> oh my poll is up to score 1 on sequence.complete.org
10:54:36 <SyntaxNinja> CosmicRay: don't worry, I don't either.
10:58:10 <shapr> I can't think of any interesting Template Haskell demo ideas that I can finish by tomorrow morning.
10:58:16 <shapr> Any suggestions?
11:00:24 <CosmicRay> shapr: I think that I am the only one that votes on stuff, alas
11:01:11 <CosmicRay> <-- `4s has quit (Quit: Given that sooner or later we're all just going to die, what's the point of learning about integers?)
11:01:35 <_JusSx__> Glasgow Haskell Compiler?
11:02:20 <CosmicRay> yes
11:03:13 <_JusSx__> i will emerge it
11:12:45 <thebug> "I swindle homework answers out of people on the #haskell channel, I don't need a Haskell implementation." <- HA :)
11:14:02 * shapr grins
11:15:10 <shapr> thebug: How do you like the articles on sequence.complete.org? Any particular feedback?
11:16:43 * araujo checks
11:17:11 <bourbaki> can someone help me to dump my data to a file? a texture
11:17:26 <shapr> Oh, the Haskell implementation poll has expired! Only six votes for homework swindlers.
11:17:42 <pesco> Wow, since when does that site exist?!
11:17:42 <lisppaste2> metaperl pasted "understanding an enumerated set datatype" at http://paste.lisp.org/display/6181
11:18:02 <shapr> pesco: It's at least two weeks old.
11:18:16 <bourbaki> is there a lib with which i can write pictures?
11:18:25 <pesco> Hm. I've been off #haskell for at least a week.
11:18:40 <CosmicRay> pesco: it was also announced on -cafe :-)
11:18:56 <pesco> Ah. I'm not on -cafe.
11:18:59 <Cale> metaperl: there's some name punnery going on there -- VBool is a data constructor which takes a value of type VBool as a parameter
11:19:26 <Cale> metaperl: Look at VError, as it deviates from that
11:19:30 <metaperl6> Cale, I see. Thanks
11:19:37 <shapr> CosmicRay: maybe announce it on haskell@h.o?
11:19:48 <shapr> or maybe wait to see if c.h.o happens first?
11:19:56 <chucky> philosophical question: Do I prefer foldr over foldl because I find it easier to pronounce?
11:19:57 <metaperl6> ok, and now for a pattern matchign question:
11:20:05 <CosmicRay> shapr: syntaxninja is talking about hosting it at c.h.o, and thinks that site will be ready RSN
11:20:14 <shapr> yeah, good point
11:20:19 <CosmicRay> shapr: so I've been holding off making a more general announcement until its url is at its permanent home
11:20:41 <metaperl6> sameType (VJunc (Junc t' _ _))  = t == t'
11:21:07 <thebug> shapr: haven't checked it out much, just peeked at the poll :)
11:21:20 <metaperl6> VJunc takes a value of type VJunc, yet it's matching on Junct t' _ _
11:21:26 <thebug> definitely something to read later
11:22:15 <metaperl6> I found it: never mind
11:22:15 <metaperl6> data VJunc = Junc { juncType :: JuncType
11:22:15 <metaperl6>                   , juncDup  :: Set Val
11:22:15 <metaperl6>                   , juncSet  :: Set Val
11:22:15 <metaperl6>                   } deriving (Show, Eq, Ord)
11:25:09 <Heffalump> c.h.o?
11:25:29 <shapr> community.haskell.org
11:25:33 <Heffalump> oh, cool
11:25:36 <Heffalump> where's that going to be hosted?
11:26:12 <shapr> Of course, the name won't be community.haskell.org because that clashes with haskell.org/communities which is the HC&AR.
11:26:22 <Heffalump> what's the idea?
11:27:06 <shapr> Since I'm not hosting it, or donating bandwidth or hardware, you should ask the person who is making it happen, SyntaxNinja. Then he can tell you what's official.
11:27:22 <Heffalump> has it been discussed on the haskell lists?
11:27:25 * Heffalump is rather behind on them
11:27:30 <shapr> I don't think so.
11:27:48 <shapr> Deus Ex Machiavella
11:27:59 * shapr still likes that nasty pun
11:28:20 <rjbs> somehow I read that as "haskell.org/communities which is ths NASCAR"
11:28:47 <shapr> rjbs: Too racey for a bunch of academics.
11:28:55 <rjbs> booooo :)
11:28:59 <shapr> What are you part of the wheel world?
11:29:34 <shapr> I think the steering committee would disapprove of that.
11:30:31 * shapr gives up on car puns, noting that shift/reset had a few good potential puns...
11:30:44 <rjbs> Thank goodness. I thought you we'd just keep going round and round.
11:30:48 * shapr snickers
11:31:03 <Muad_Dibber> shapr?
11:31:08 <shapr> you screamt?
11:31:17 <Muad_Dibber> http://docs.python.org/ref/grammar.txt
11:31:38 <shapr> Nice, does SDF2 eat that?
11:32:19 <Muad_Dibber> I have no clue
11:32:21 <Muad_Dibber> and cannot try it
11:32:28 <Muad_Dibber> since i happen not to be at home
11:32:39 <Muad_Dibber> and my gf doesnt like me to install linux :P
11:32:43 <shapr> haha
11:34:15 <Oeje1> Muad_Dibber: Is that all of the Python grammar?
11:34:30 <shapr> There must be another simple Template Haskell demo past recreating const.
11:34:46 * shapr is all out of creativity for this particular task.
11:35:45 <Oeje1> shapr: Manipulating a big AST?
11:36:26 <shapr> um, like what?
11:37:18 <wagle> recreate the C++ template that enumerates the primes as error messages
11:37:40 <shapr> I think that may not fit into my deadline.
11:38:09 <wagle> whats your deadline?
11:39:09 <Oeje1> shapr: Template Haskell == Generic Haskell?
11:39:24 <shapr> wagle: Something I can do in the next hour. TMR should be online tomorrow morning =)
11:39:29 <Muad_Dibber> Oeje1: at least thats what the people in #python-cleese tell me :P
11:39:44 <CosmicRay> pesco: you typod your e-mail address at the sequence and your registration e-mail bounced to me :-)
11:39:59 <CosmicRay> an extra dot in it
11:40:16 <CosmicRay> hjave forwarded it on to you
11:40:31 <pesco> CosmicRay: I know, It's unfortunate, for some reason I keep typing that dot lately.
11:40:34 <pesco> CosmicRay: Thanks.
11:40:39 <CosmicRay> heh
11:41:03 <shapr> Is it the top-level root dot? like www.scannedinavian.org. ?
11:41:04 <pesco> CosmicRay: BTW, the Sequence is just the website I've been missing for years!
11:41:10 <CosmicRay> cool !
11:41:14 <CosmicRay> glad you like it
11:41:24 <pesco> shapr: Yes. I noticed that it _should_ work, too. ;-P
11:41:31 <CosmicRay> I hope that enough peolpe get involved that voting for articles in the submission queue and stuff takes off
11:41:38 * pesco is picky.
11:41:44 <CosmicRay> I like "the people are the admin" approach
11:41:53 <pesco> CosmicRay: Yes, that's good.
11:42:14 <Muad_Dibber> and also Oeje1, i dont think template haskell == generic haskell
11:42:36 <pesco> Anyway, you know those times you're bored and just type your regular website into your browser, like slashdot or something.
11:42:57 <pesco> I've found myself typing http://www.haskell.org/ many times, realising that it's not the site I want...
11:43:15 <pesco> I'll retrain to http://sequence... ;)
11:44:37 <shapr> rjbs: dr. davis dr. davis, telephone please...
11:45:30 <rjbs> shapr: I remember now.  I can't remember how it started...
11:45:39 * shapr cackles happily
11:45:55 * rjbs just remembers doing what they told him... told him... told him...
11:45:59 <rjbs> That was awesome, live.
11:46:19 <shapr> Yeah, I saw them in Birmingham during the Empire tour.
11:46:32 <shapr> They only did part of Mindcrime, I was miffed :-(
11:46:39 <Cale> pesco: Hawiki RecentChanges is good for that too.
11:46:49 <pesco> Cale: Ah, right. Good point.
11:46:54 <CosmicRay> pesco: wow, that means I should really add some useful haskell links or something ;-)
11:47:24 <pesco> CosmicRay: Just keep the news feed up.
11:47:47 <CosmicRay> pesco: most of that is thanks to gmane.  It provides rss feeds for mailing lists.  very, very slick.
11:48:01 <pesco> Mmm.
11:48:30 <CosmicRay> Besides that, lambda tha ultimate is the only other thing feeding into Offsite Discussion right now
11:48:40 <CosmicRay> I've got several people blogs feeding into Offsite Blogs
11:49:10 <shapr> though mine doesn't seem to get parsed...
11:49:23 <shapr> Should I fix PLog, or should I update BLob?
11:49:32 * CosmicRay investigates
11:49:54 <CosmicRay> ah yes.
11:50:06 <CosmicRay> I don't know, something is screwy with your xml is all I know
11:50:12 <CosmicRay> I know very little about the internals of rdf/rss
11:51:11 <shapr> I'm not very surprised. The RSS feed was an idle hack. I should really get in there and do bug fixes but I'm lazy.
11:51:21 <CosmicRay> heh
11:51:49 * shapr bugs the author of PLog
11:52:26 <shapr> rjbs: how do I see earlier months of your blog?
11:53:04 <rjbs> shapr: I need to fix the software, but..
11:53:28 <rjbs> http://rjbs.manxome.org/bryar/bryar.cgi/2005/Jan
11:53:31 <rjbs> for example
11:53:38 <shapr> aha
11:53:58 <rjbs> Bryar has issues with its calendar generation, and I'm too lazy to fix it.  I should see if its maintainer is working on that yet.
11:54:04 <rjbs> also, ~rjbs at use.perl.org
11:54:08 <rjbs> syndicated there
11:55:58 <shapr> Oh, I'm writing something much like wikalong, but doesn't need a server.
11:57:24 <metaperl6> hi rjbs
11:57:49 <rjbs> shapr: So it's personal only?
11:58:01 <rjbs> metaperl6: good morning!
11:58:19 <shapr> rjbs: no, it's distributed
11:58:40 <metaperl6> good morning!
11:59:05 <rjbs> shapr: and mirrored, or your comments are only available when you're online?
11:59:32 <shapr> and mirrored. darcs is the back-end, which allows for pull-only annotations.
12:00:17 <shapr> Originally I just wanted it for research papers, but a few people said it could annotate pretty much anything.
12:00:29 <rjbs> cool
12:00:44 <shapr> salut jean-philippe
12:00:55 <jyp> hoy
12:01:00 <shapr> hoe gaat het met jou?
12:01:12 <jyp> ca va ;)
12:01:17 <rjbs> Writing a FF plugin to handle user interface for browsing annotations?
12:01:56 <shapr> I was thinking local wiki server with page images originally - http://www.scannedinavian.org/RandomWiki/AnnotationMockup
12:02:21 <shapr> one advantage there is that I don't have to worry about legal problems of redistributing papers.
12:02:44 <shapr> The primary problem I see is that research papers don't have comments enabled. I'd like to fix that.
12:03:28 <shapr> Someone else said that they would like to allow doctors at their college to do share annotation of medical images, and that this software would work for that too.
12:03:37 <shapr> The name I chose is "Fermat's Last Margin"
12:03:50 <rjbs> :)
12:04:15 <shapr> jyp: C'est bien, ecrivez vous chouette logiciel?
12:06:10 <shapr> It's so much fun to pretend to have a clue about French =)
12:06:44 <jyp> I'm working on this:
12:06:49 <jyp> http://www.rockbox.org/twiki/bin/view/Main/GminiPort
12:06:59 <jyp> Very haskell-unrelated though
12:07:31 <jyp> I decided to work with "the metal", for a change
12:07:52 <shapr> quite nifty
12:08:06 <jyp> How's Yi going btw? still no emacs bindings? :P
12:08:51 <shapr> No emacs bindings, but The Monad.Reader will likely be out on time.
12:09:03 <shapr> TMR has been distracting me from emacs bindings.
12:09:05 <jyp> Congrats ;)
12:09:15 <shapr> Want to write an article for issue 2?
12:09:16 <jyp> Can't wait to read it
12:09:43 <jyp> I sure would like to; but I gotta have an idea first ;)
12:10:06 <shapr> Pick something for which you have either much knowledge or much interest?
12:10:30 <shapr> boegel did gtk2hs for issue1, he learned how to use it and wrote a simple and easy to explain demo app.
12:11:25 <shapr> The goal of TMR in my opinion in to take information from research papers and make it palatable to people used to reading standard linux documentation.
12:12:07 <jyp> Be sure I support you fully on doing this.
12:12:25 <shapr> Yeh, I'm just always trying to find more authors :-)
12:12:30 <Oeje1> jyp: Lot's of nice subjects; parallel arrays, foreign function interface, software transaction memory,...
12:12:43 <jyp> Honestly I'll do my best to write up something as things settle down in the other project
12:12:50 <shapr> cool :-)
12:13:03 <jyp> (un)fortunately it's quite the reverse
12:13:19 <shapr> Sadly, I have left *my* article till the last minute, so I'm trying to think up some sensible Template Haskell demo the night before publication.
12:13:20 <jyp> People only start to contact me about it
12:13:23 <shapr> My mind is blank.
12:14:18 <shapr> I'm a great fan of open firmware. I have a Palm that I don't want to pay money to upgrade to PalmOS 4 or 5
12:14:39 <musasabi> shapr: what about marshalling?
12:14:58 <shapr> Hm, like what?
12:15:29 <shapr> Tomasz' nifty packet opener?
12:15:45 <shapr> Hacanon's marshalling code maybe?
12:15:50 <shapr> That's an excellent idea.
12:15:52 <musasabi> shapr: creating a binary encoder+decoder for "all" types (and identifying those which cannot be encoded)
12:16:35 <shapr> Sounds interesting, how would you approach that?
12:16:40 <musasabi> I haven't have time to look at hacanon... Still have to learn the new TH before that.
12:17:13 * shapr has the sudden urge to collaborate with musasabi
12:17:43 <musasabi> the only problem is that I don't really know TH.
12:17:52 <shapr> Not that many differences from what I've seen so far, qRunIO, different import names.
12:18:35 <musasabi> maybe use a T-L-V encoding for top level objects. (Type, Length, Value)
12:18:47 <shapr> Well, I sort of know TH, but my brain is tired. Maybe I should try to work on this tomorrow.
12:18:55 <shapr> Sounds interesting, like what?
12:19:10 <shapr> Sort of like ASN.1?
12:19:18 <musasabi> inside the encoding can be optimized as we know the structure from types.
12:19:54 <shapr> Oh, we use TH to get the structure of a type?
12:19:59 <musasabi> yes.
12:20:05 <shapr> ah, that is nifty!
12:21:37 <musasabi> and then we can communicate 1) the type with complete structure to the peer 2) we can stuff the objects prefixed with a reference to the type in an efficient representation - which the remote end knows how to read from the descriptions sent.
12:21:48 <shapr> You've gotta love a paper which includes the quote "Naturally, this power is open to abuse. Ha ha ha."
12:22:15 <shapr> musasabi: This is the type migrator we've discussed before, yes?
12:22:37 <musasabi> shapr: yes, but with a different twist - TH instead of Typeable/Data.
12:22:41 * shapr boings cheerfully
12:25:19 <musasabi> of course some types of values are not possible to transmit (e.g. functions - but couldn't the TH code just compile about that at compilation time?)
12:25:41 <shapr> yeah, I agree.
12:27:29 <musasabi> existentials won't be solved by that approach - but I don't think they can be solved by the Typeable approach either.
12:28:00 <shapr> But serializing 'basic' values would be straightforward.
12:28:38 <jyp> 8th thing to do at a time... Overflow
12:29:20 <shapr> Igloo's Show instance deriver in "Report from the Field" page 5 is probably a good place to start with structure aware code.
12:30:30 <musasabi> yes, it would be nice.
12:30:42 <Itkovian> @wiki TheMonadReader
12:30:42 <lambdabot> http://www.haskell.org/hawiki/TheMonadReader
12:31:14 <musasabi> and even a basic implementation would be very nice for real code as currently there is no nice way of doing that.
12:31:19 <shapr> right
12:31:26 <Itkovian> not to put any pressure on anyone ...
12:31:28 <shapr> ?
12:31:31 <Itkovian> :-)
12:31:52 <shapr> Zalasta: greetings, are you one of the coconuts?
12:32:08 <shapr> Itkovian: it'll be online when it's ready :-)
12:32:19 <Itkovian> that's what I meant ;-)
12:32:27 <Itkovian> Just curious tho'
12:33:01 <musasabi> btw reading libraries@h.o - haskelldb + monad comprehensions could be spiffy.
12:33:09 <shapr> I think I'm just going to throw all the PDFs into a dir and link to them from a HaWiki page. Cheesy as that is, it lets people get hold of the content.
12:33:27 <shapr> Unless someone has a better suggestion.
12:34:28 <Igloo> I think it would also be nice to have them available as a single PDF
12:34:38 <musasabi> shapr: that sounds nice.
12:34:45 <Zalasta> coconuts? hm... I am insane I suppose..
12:34:46 <Igloo> And some people will prefer PS, too
12:34:47 <xerox> PDF only?
12:35:31 <shapr> Zalasta: just wondering if you work with kahl et al on COCONUT.
12:35:56 <Zalasta> nope.
12:36:11 <pesco> shapr: I vote for single pdf, too.
12:36:16 <shapr> Igloo: I think that's a possibility for later, but not tommorow.
12:36:19 <Itkovian> shapr: do you have the text source (i.e. latex), or simply the pdf's?
12:36:43 <shapr> I have tex for most of the articles, all except one I think.
12:36:49 <Itkovian> dang.
12:37:01 <shapr> Does someone want to volunteer to make a single pdf and ps versions out of the .tex files?
12:37:03 <xerox> I think an html version would be apreciated.
12:37:06 * shapr looks around hopefully
12:37:09 <Itkovian> I am willing to ...
12:37:11 <shapr> xerox: want to make the html versions?
12:37:17 <shapr> Itkovian: awesome!
12:37:20 <xerox> shapr, okay.
12:37:39 <Itkovian> The only thing that bugs me is how I'll get that single pdf into the rest.
12:37:45 <Itkovian> Anybody have a title page?
12:37:48 <shapr> recursive pdfs?
12:37:51 <xerox> brb
12:37:58 <Itkovian> recursive what? ;-)
12:38:08 <shapr> getting that pdf into the other pdfs? :-)
12:38:17 <Itkovian> maybe I could print them into  a single pdf?
12:38:19 <Itkovian> hmm
12:38:22 <musasabi> no they have to do be done with a little bit different tex, nothing serious though.
12:38:39 <Itkovian> musasabi, how?
12:39:36 <Itkovian> I think someone in our lab has some stuff to merge pdf's, which he used for proceedings, but I'm not sure how it works.
12:39:36 <musasabi> Itkovian: a top level tex including *.tex (with headers from articles commented out + mess with overlapping definitions)
12:39:57 <Itkovian> musasabi, yeah, but what with the single pdf (I know about the tex stuff ;-))
12:41:08 * shapr has negative clue about TeX
12:41:10 <shapr> hiya Darius
12:41:12 <musasabi> Itkovian: just one fancy titlepage + toc and it is all ready probably.
12:41:29 <Itkovian> hmm ... any graphic people here?
12:42:06 <Itkovian> I am envisioning a lambda stamped with a red "The Monad Reader"
12:42:20 <Darius> heya shapr
12:42:27 <musasabi> shapr: the only thing is getting fonts in pdf right.
12:43:25 <musasabi> Itkovian: I could ask the graphic person beside me if you want to, but then again somekind of spec would be nice then.
12:43:46 <musasabi> what is the timetable?
12:44:48 <shapr> tomorrow?
12:45:46 <Itkovian> I can start as soon as a) I get the files and b) my kid's asleep
12:46:29 <Itkovian> musasabi, well, do you know those red stamps they use to say 'proofed' or something alike?
12:46:38 <Itkovian> on a lambda background
12:47:16 <Itkovian> or alike to the SpreadFirefox ad, a program text in very small print with highlighted letter forming some symbol
12:47:49 * boegel bounces
12:49:16 <Itkovian> gonna wash Elias ... brb
12:50:38 <shapr> Well, I can send off all the stuff once I've eaten, brb :-)
12:51:08 <musasabi> Itkovian: hmm, lets see whats forms from that..
12:54:06 <boegel> shapr: how many finished articles do you have now ?
12:56:38 <Darius> better: how many unfinished ones do you have?
12:58:23 <yggdrasil> hello
12:59:36 <Oeje1> Hello, yggdrasil.
13:02:56 <yggdrasil> how easy do you think it would be to translate such a function ( http://www.pastebin.com/247515 ) into haskell?
13:05:19 <wagle> shapr: you might be interested in this (i'm thinking about firm-typing) http://www.cs.chalmers.se/~ahrendt/cade20-ws-disproving/
13:09:28 <PerlJam> yggdrasil: easy!  But other opinions may vary  :-)
13:09:38 <Oeje1> yggdrasil: I'm not shure what it does.
13:11:21 <yggdrasil> just takes too strings, does comparisons and returns an integer
13:11:53 * shapr is fed!
13:12:10 <Oeje1> shapr: Er du fed?
13:12:23 <shapr> jo, jag √§r det.
13:12:38 <boegel> shapr: once more, how many articles do you have already ?
13:12:42 <shapr> umm
13:14:53 <Oeje1> yggdrasil: Silver("abekat", "hundevalp") ==> 2  ?
13:15:21 <yggdrasil> btw it only takes numbers
13:15:29 <yggdrasil> and 4 digit ones at that
13:15:50 <Oeje1> He, he.
13:16:58 <Oeje1> yggdrasil: Silver("2001", "1984") ==> 1  ?
13:17:16 <yggdrasil> yes
13:17:17 * boegel goes to bed early
13:17:20 <boegel> g'night everyone
13:17:29 <yggdrasil> basically it's about position
13:17:36 <Oeje1> Good night, boegel.
13:17:44 <shapr> boegel: I have five right now in front of me.
13:17:46 <yggdrasil> think of it in terms of target and match
13:17:47 <shapr> whoops
13:18:15 <yggdrasil> correct number but wrong position
13:18:19 <yggdrasil> then it pluses 1
13:18:56 <Oeje1> Silver("0110", "2001") ==> 3  ?
13:19:35 <Oeje1> Of course it depends also on Gold.
13:19:42 <yggdrasil> yeah
13:19:53 <yggdrasil> thats correct
13:23:02 <pesco> Itkovian: You're bundling up the TMR pdf I read?
13:23:20 <shapr> Seems he's washing his child.
13:23:26 <shapr> wagle: that is nifty, thanks.
13:23:33 <pesco> Ah, right.
13:27:11 <Oeje1> silver :: String -> String -> Int
13:27:11 <Oeje1> silver [] target = 4 - length target
13:27:11 <Oeje1> silver (x:xs) target = silver xs (delete x target)
13:27:36 <shapr> I'm falling over asleep, if the last minute disorganization is such that there's not single-file pdf, or no ps versions, I think it's no big deal. I always prefer Content over Style.
13:30:28 <lightstep> silver xs target = 4 - length filtered where filtered = foldl (flip filter) target xs
13:30:55 <lightstep> travel essences rock
13:31:36 <Cale> gold guess target = length [(x,y) | (x,y) <- zip guess target, x == y]
13:31:36 <Cale> silver guess target = length target - length (target \\ guess) - gold guess target
13:32:33 <Cale> or even: gold guess target = sum [1 | (x,y) <- zip guess target, x == y]
13:33:10 <lightstep> gold guess target = length $ filter (uncurry (==)) (zip guess target)
13:33:36 * pesco shouts "Avoid list comprehensions at all costs!"
13:33:43 <Cale> pesco: why?
13:33:48 <lightstep> though List.map2 (as in caml) would be better here
13:33:51 <pesco> Cale: Just joking!
13:34:38 <lightstep> i dislike list comprehensions. when the "simple expression" gets too complicated, i prefer monad syntax
13:34:43 <Darius> pesco: In practice between using list comprehensions or standard combinators (or functions built from them) should make little difference.  GHC deforests both.
13:35:05 <pesco> At some point I stopped using list comprehensions, just as a kind of exercise. I got so much into the habit that I almost completely forgot about them! It was only recently that I rediscovered their usefulness for making code readable.
13:35:20 <Darius> lightstep: Except for a change of generality there's little difference between them.
13:35:42 <Cale> gold guess target = sum $ do {(x,y) <- zip guess target; if x == y then return 1 else return 0}
13:35:46 * Darius never really got into list comprehensions.
13:36:31 <lightstep> Darius, i know. i just think it looks better.
13:37:07 <Darius> Cale: You can use ;'s without {}'s.
13:37:40 <lightstep> Cale, this way you see that using sum&0&1 is really stupid
13:38:11 <Cale> well, you could also do...
13:38:22 <Darius> lightstep: I probably lean towards using monad v. list comprehensions as well, though for an incoherent variety of reasons.
13:38:24 <Cale> gold guess target = sum $ do {(x,y) <- zip guess target; if x == y then return 1 else []}
13:39:13 <Cale> I suppose you could leave the braces out :)
13:39:17 <bourbaki> can someone help me to write that stuff into a texture?
13:39:37 <Darius> gold guess target = sum $ do (x,y) <- zip guess target; guard (x == y); return 1 would be the translation.
13:40:00 <Cale> ah, right, guard
13:40:10 <lightstep> now the filter call seems really clear
13:40:21 <lightstep> since sum = length in this context
13:40:22 <Cale> and you want to change that sum to length
13:40:55 <Cale> oh
13:41:02 <Cale> missed the last bit
13:42:29 <lightstep> maybe this should be edited into some wiki page
13:42:55 <Darius> lightstep: Why?
13:44:13 <lightstep> i've seen a code-refinement session copied from #haskell to the wiki a few days ago, and it seemed really nice
13:46:27 <Oeje1> Is there an operator `op` so that "f g t = silver g t - gold g t" can be written as "f = silver `op` gold"  ?
13:47:26 <Darius> (uncurry silver &&& uncurry gold)
13:47:57 <Heffalump> you can't put that infix
13:48:07 <Heffalump> and you seem to have missed out the -, somewhere
13:48:31 <Darius> ... >>> (uncurry (-))
13:49:09 <Darius> There is no standard operator that does the above.
13:49:48 <Darius> Well, with a modified Num class or some non-sense instances you may be able to lift (-) to functions.
13:50:05 <bourbaki> can anyone give a comment on my code stylewise?
13:50:07 <bourbaki> http://rafb.net/paste/results/7Z60Gw91.html
13:50:28 * Oeje1 turned a 20 line Java program into 2 lines of Haskell, and got that fuzzy feeling.
13:50:56 <SyntaxNinja> heh
13:51:15 <Oeje1> Ok more like 10 lines, but same order.
13:52:24 <Darius> Bleh! cross product
13:53:45 <lightstep> i just found out that instantiating Read is actually useful
13:53:46 <sh10151> sounds like me fixing a complex sql query
13:59:11 <xerox> Back!
13:59:38 <xerox> shapr, sorry, had to go previously, what about those html versions?
14:00:13 <int80_h> yo
14:08:35 <lightstep> ho
14:21:00 <Darius> Hey bourbaki, ever look at Geometric Algebra?
14:21:21 <Philippa_> I did ages ago, I've forgotten all I knew though
14:22:46 <bourbaki> Darius: yes i had a look at it for a while but i didnt get into it really
14:23:02 <bourbaki> i like topology a lot and try to get from there to geo alg
14:23:39 <metaperl6> @paste
14:23:40 <lambdabot> Sorry, I don't know the command "paste", try "lambdabot: @listcommands"
14:23:42 <bourbaki> i think that topology is the best thing you can learn to get from there to all other fields cause topology deals with a lot of mapping within algebraical structures and surfaces and the like
14:23:47 <metaperl6> @url paste
14:23:48 <lambdabot> Sorry, I don't know the command "url", try "lambdabot: @listcommands"
14:24:14 <Darius> metaperl6: Just edit the HaskellIrcPastePage
14:24:25 <Darius> @wiki HaskellIrcPastePage
14:24:26 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
14:24:40 <bourbaki> Darius: have you had a look at my code?
14:24:54 <Darius> bourbaki: Very passingly
14:25:13 <bourbaki> Darius: any comments on the general style?
14:26:15 <metaperl6> Um, for convenience I have written up my question here: http://hcoop.net/~terry/haskell/hs/pugs/qs.txt
14:26:20 <metaperl6> I really would appreciate an answer
14:27:54 <Darius> bourbaki: You  have some unnecessary parens in some places and I'd probably use camelCase a bit more.
14:28:21 <bourbaki> i used lisp before ;)
14:28:21 <Igloo> metaperl6: joined /= js
14:28:36 <desrt_gabriel> camel_case_sucks
14:29:05 <metaperl6> joined == vals
14:29:14 <metaperl6> oh wait
14:29:19 <bourbaki> whats camel case?
14:29:30 <lightstep> varNamesLikeThis
14:29:39 <xerox> bourbaki, ThisKindOfTyping
14:29:56 <xerox> Also known as WikiWords, more or less.
14:30:18 <xerox> Btw, goodnight.
14:30:20 <Darius> xerox: With a leading capital it's known as StudlyCaps on HaWiki.
14:30:39 <bourbaki> ah ok
14:30:56 <bourbaki> its just that i think you can understand the math stuff better if the functions have sufficient nameing
14:31:06 <metaperl6> Igloo, thanks. I will study it a bit more. But you made a useful point
14:31:19 <bourbaki> so that the lines you write show something you can read locally
14:32:05 <Darius> bourbaki: I'd also probably use pattern matching (and perhaps records) for places where you multiple (all) elements of a row etc.
14:32:26 <bourbaki> records?
14:32:46 <Darius> bourbaki: I'm not saying change the word just how it's presented, e.g. deriveX.
14:32:51 <bourbaki> i also need to build some algebraic structures like fields and such
14:33:21 <Darius> data Vector3D a = Vector3D { c1, c2, c3 :: a }
14:33:30 <bourbaki> i also would like to have derivable polynomials is there a lib for that?
14:33:42 <Darius> @wiki UsingRecords for more information
14:33:42 <lambdabot> http://www.haskell.org/hawiki/UsingRecords for more information
14:34:05 <bourbaki> i think i understand it from the example thanks
14:34:45 <Darius> bourbaki: You may want to look at DoCon, but I'm not sure what you're looking for particularly nor do I think I'd know of a library even then.
14:35:01 <bourbaki> i just often fear to do such things cause then happens something i dont understand and need to think about that problem instead of the code itself :)
14:35:31 <bourbaki> well i have these 2 d  parameterised surfaces
14:36:00 <bourbaki> i could use polynomals for them so i can get a function as derivation instead of doing that x + e , x - e thingy
14:36:10 <bourbaki> to get the derivation
14:36:36 <bourbaki> and also i could use these for the displacement maps and animations and all
14:37:05 <bourbaki> my idea is to model all objects from primitives that way and encode them into a vector
14:37:43 <bourbaki> that is the displacements form a linear independant space so its a bit like wavelet transformation
14:38:33 <bourbaki> Darius: do you know something for haskell like mathematica? so i can render these surfaces?
14:41:44 <Darius> bourbaki: There are probably some bindings to libraries that can do that somewhere.
14:42:14 <bourbaki> hm i have been looking for something like that a long time didnt come up with anything yet though
14:42:49 <bourbaki> i even started out my own thingy with ogl but the interface is a bit tricky to use with all these version changes
14:43:51 <jlouis> That STM paper is interesting
14:48:34 <wilx> Hmm, question. I want to use some of the mutable arrays from Data.Array.
14:49:17 <wilx> Data.Array.ST in fact.
14:49:29 <wilx> Does that mean that any of the functions that use tham have to be in the ST monad?
14:49:57 <Heffalump> yes
14:53:57 <Darius> wilx: Up until tho point that you runST.
14:54:35 <musasabi> wilx: but you can freeze them to get pure variants.
14:54:52 <wilx> Hm.
15:04:33 <gzl> in WASH, what's the difference between stuff like p, p_T, and p_S?
15:07:52 <raboof> just starting out with Haskell, i guess i should upgrade from ghc 5.02.2 to something more recent?
15:08:20 <gzl> yes (!)
15:08:26 <gzl> get 6.2.2
15:08:38 <gzl> that's the latest release version
15:09:44 <raboof> strange, i see references to ghc6 for woody being available on backports.org, but it doesn't seem to be there anymore
15:10:16 <raboof> `deb http://www.syntaxpolice.org/haskell-experimental/ stable' should be ok?
15:11:02 <gzl> i don't know.
15:11:08 <raboof> nevermind, i'll figure it out  ;)
15:11:11 <gzl> not familiar with how debian handles its branches.
15:13:37 <gzl> yeah, so I see in the source that WASH labels normal tags dynamic, _S tags static, and _T tags toplevel, but I'm not entirely sure what that's supposed to mean to me.
15:24:09 <raboof> is there a `first steps in ghc'-manual? like, is it mandatory to have your module called `Main'?
15:25:36 <Darius> raboof: Yes (for the module containing main), but that is part of the language standard.  There are plenty of introductions to Haskell on www.haskell.org.
15:25:57 <Darius> raboof: The GHC User Guide at www.haskell.org/ghc covers things specific to GHC.
15:26:20 <raboof> yeah, i looked at that one, quite thorough :)
15:36:14 <wilx> Geeez.
15:36:20 <wilx> Some stuff is hard in Haskell :/
15:37:36 <wilx> I wanted to make a dictionary of phrases for LZW compression as a tree with its root node as array and inner nodes as FiniteMaps because they are sparse.
15:37:53 <wilx> But the thing with monads complicates everything :/
15:39:18 <bourbaki> cant i import libs in modules?
15:39:54 <Cale> wilx: why not use a simpler structure?
15:40:10 <wilx> Like what?
15:40:27 <Cale> well, what was the Array for? Could it just be a FiniteMap too?
15:40:54 <wilx> The array is there for O(1) lookup from the root node.
15:41:13 <Cale> Or you could use an ordinary array.
15:41:24 <Cale> or a function
15:42:32 <wilx> What is "ordinary array"?
15:43:34 <Cale> You said you were using STArrays?
15:43:40 <wilx> Yup.
15:44:06 <Cale> Why not just Array?
15:44:11 <raboof> I can do `print "hein"', but how can I `map print ["hein","frits"]'?
15:44:24 <Cale> raboof: mapM_
15:44:56 <Cale> (the underscore because you don't care about the return value of print, and the M to sequence the commands)
15:45:02 <Cale> (monadically)
15:45:05 <Darius> @type mapM_
15:45:07 <lambdabot> mapM_ :: forall m a b. (Monad m) => (a -> m b) -> [a] -> m ()
15:45:51 <raboof> aah. ok i think i got that. thanks.
15:46:28 <wilx> Hmm, ordinary array is not mutable, is it?
15:47:53 <dons> argh. my swap is about to fill up...
15:48:02 <dons> what's going to happen..
15:48:07 <dons> 10M to go..
15:48:11 <dons> 5
15:48:15 <Darius> dons: What are you doing?
15:48:16 <wilx> Random processes will get killed :)
15:48:26 <Cale> wilx: right, but there's garbage collection, and your array elements are only references anyway
15:48:34 <dons> 600k left in ram.
15:48:45 <dons> looks like the vm is holding up
15:49:35 <dons> I'm just running heffalump's impossible shiftL code he posted last night.
15:50:35 * Darius didn't see that.
15:50:43 <Igloo> The solution won't fit in the memory you have available will it?
15:50:50 <Heffalump> actually, I was wrong about that
15:50:56 <Heffalump> it's an intermediate result that won't fit
15:50:58 <Heffalump> the answer is 0
15:51:01 <dons> yeah.
15:51:21 <Igloo> Oh, OK, I'm misremembering it then
15:51:33 <Heffalump> well, to be precise I'd worked that out to begin with, I then got confused when someone replied noting that an intermediate result was huge
15:51:37 <dons> anyway, it's been running for 2 mins now, about 1G used up. but no segfaults yet.
15:51:50 <Heffalump> and I think someone on here tried gmp-4
15:52:03 <Heffalump> I _think_ the only machines I got segfaults on were some badly run RHx boxes.
15:52:05 <dons> gmp4 seems to be the way to go.
15:52:30 <dons> I gave up on gmp3 ages ago (it is really bad on 64 bit boxes: ia64, mips64)
15:52:32 <Heffalump> anyway, I think the Data.Bits instance should be fixed.
15:52:39 <Igloo> Eek, that exists?
15:52:56 <dons> Igloo: what? gmp3?
15:53:11 <Igloo> gmp4
15:53:16 <dons> ah ha! we get a segfault.
15:53:51 <dons> yeah. for ages..
15:54:13 <Igloo> Oh, fair enough
15:54:23 <dons> I posted a "please use gmp4 on 64 bits" a year ago or more :)
15:54:24 * Heffalump thinks and realises there's no easy way to fix the Data.Bits instance.
15:54:31 <dons> #0  0x0ada9647 in __gmpn_mul () from /usr/local/lib/libgmp.so.6.3
15:54:39 <Heffalump> yeah, that's what I got.
15:54:47 <Heffalump> not much of a backtrace, though
15:55:05 <dons> could run it with debug. let's see..
15:55:28 <dons> oh, I don't have a debug gmp though.
15:55:59 <Heffalump> anyway, it's fairly obvious what it's doing
15:56:03 <dons> anyway, I couldn't get it to segfault unless I set ulimit -d unlimited, which gave it enough room to be nasty.
15:56:23 <dons> yep. gmp. 'nuf said.
15:56:26 <Igloo> Ah, but the SO version is still 3, right?
15:56:57 <dons> this is gmp-4.1.3
15:57:31 <Igloo> What's /usr/lib/libgmp.so (or equivalent) a link to?
15:58:15 <dons> there's just libgmp.so.6.3, which is actually gmp-4.1.3
15:58:29 <dons> not sure about the naming convention.
15:59:56 <dons> ah, i see on debian you have libgmp.so.3.3.3, for example.
16:00:30 <dons> and we have 3.1.1 in-tree
16:02:37 <stepcut`> hey dons!
16:02:40 <stepcut`> how is yi going ?
16:02:53 <dons> slowly getting back up to speed.
16:03:17 <stepcut`> cool, linspire 5.0 should ship soon, which means I might actually have time to work on the emacs mode again
16:03:26 <dons> cool!
16:03:54 <dons> so many people's first question is "does it have an emacs mode" or "is it just vi??"
16:03:54 <stepcut`> what is the next milestone ?
16:04:21 <dons> ok - i have to get syn hl in. then, with a sketched out emacs we might be able to tag it 0.1
16:04:49 <stepcut`> do you have any solid ideas for the syn hl stuff ? Or just lofty dreams ?
16:04:52 <dons> after that, there's WolfgangT's wxGUI he designed. and I'm working on ghci-ish eval for faster scripting.
16:05:10 <dons> nah. I've got a parser, lexer and class for a toy language
16:05:23 <dons> just have to adapt a haskell parser to the same interface.
16:05:55 <stepcut`> dons: have you used eclipse at all ?
16:06:00 <dons> it's more that syn hl doesn't count towards my phd, so I can't work on it full time.
16:06:04 <dons> no, no eclipse.
16:06:19 <stepcut`> are you familiar with any of its 'features' ?
16:06:46 <dons> some of the UI ones, I think I read a design sketch somewhere along the line.
16:07:28 <stepcut`> I have not used it either, but from what I hear, it is does stuff like syntax highlighting, but too any extreme
16:07:53 <dons> ok.  I should check that. thanks for the pointer.
16:08:20 <stepcut`> like, when you type a function name, it automatically brings up a tooltip with the function prototype so you know what arguments it takes
16:08:45 <stepcut`> or if you are doing something like, Module.blah.blah it does smart tab completion
16:09:17 <dons> yeah, we definitely want smart completion. yi can do unsmart completion atm.
16:09:18 <bourbaki> does anyone know if the lisp ppl adapt something like monads and arrows?
16:09:42 <dons> rather like Yi. but with a parser we can separate namespaces and be a bit cleverer.
16:09:46 <Heffalump> dons: is there any sane way for a hs-plugins client to tell hs-plugins where to store .o files?
16:10:16 <dons> you can pass an -odir flag to make.
16:11:02 <dons> I think that would work.
16:11:27 <stepcut`> dons: it would be interesting to see some sort of parser engine that makes it easy to write those types of extensions -- with syntax highlighting being the first such extension -- but I have not thought about how that would actually work at all
16:11:41 <stepcut`> dons: though, maybe it could be someone elses PhD to solve that part ;)
16:11:53 <dons> yeah. it's really an EDSL problem, right?
16:12:12 <stepcut`> could be..
16:13:09 <dons> Heffalump: though I have a note from Niklas Broberg requesting a varient of make that lets you specify and output dir... hmm.
16:13:46 <dons> no, I have code there to check the args for -odir. so I _think_ it should work.
16:13:50 * dons writes a testcase
16:14:21 <Heffalump> trouble is I then have to manage names and stuff manually
16:14:32 <Heffalump> (this is where hs-plugins is doing a merge for me)
16:14:58 <stepcut`> dons: Another neat feature would be to have a type-checker built into the editor, so you could highlight any expression and find out the infered type...
16:15:03 <Heffalump> what I really want is just to tune the directory mkTemp uses
16:15:19 <dons> you can set the TMPDIR env var, I'm pretty sure.
16:15:43 <dons> tmpd  <- catch (getEnv "TMPDIR") (\_ -> return tmpDir)
16:16:03 <dons> stepcut: yes, we'd want that too.
16:16:35 <stepcut`> dons: it seems like maybe the pieces like, syntax highlighting, tab completion, function definition look-up, type-checking, etc, could possibly benefit from a framework that allows information sharing -- so that you don't have three independant modules that have lots of duplicated code (such as parsers)
16:17:11 <dons> certainly -- I want them to all use the same parse tree, but to traverse it in different ways.
16:17:18 <stepcut`> neat
16:17:49 <dons> I wouldn't dream of writing three versions of the Haskell parser.
16:18:32 <stepcut`> heh
16:18:49 <stepcut`> Just wanted to make sure you didn't forget anything :)
16:19:21 <dons> :) of course.
16:19:51 <dons> Heffalump: if you need something like mergeToDir, let me know.
16:20:25 <dons> re. this H98 crusade stuff -- why aren't unboxed values in the list? anyone know?
16:20:53 <dons> or is the list being monopolised by type hackers..
16:23:01 * Lemmih wonders when Yi would be usable as a structural editor.
16:23:36 <dons> it's hard doing it as a part-time one-person project :}
16:23:37 <Huschi> i've got a strange problem. ghc says: "F_General.hs:5: Could not find interface file for `SDL_Types'" but in line 5 is written: import Types and this the only import.
16:23:45 <Huschi> what's wrong?
16:24:08 <dons> your .hi files appear to have gone astray, I think.
16:24:44 <dons> Lemmih: but once the parse trees are available, and a few functions over them are implemented, then it would be fairly useable.
16:24:54 <dons> it's already a useable vi.
16:31:04 <MachinShin> hey +
16:31:34 <Lemmih> Yo -
16:32:55 <bourbaki> is ghc optimized on the mac?
16:33:18 <dons> yeah.
16:33:29 <bourbaki> cool :)
16:33:43 <bourbaki> just bought myself a mini mac
16:34:04 <Lemmih> I almost can't wait to have Yi pretty print my code.
16:34:05 <Darius> bourbaki: Most of GHC's optimizations are core-to-core
16:34:30 <dons> I presume he means is the rts registerised, does it have a native codegen etc.
16:34:37 <Darius> Lemmih: I'm sure dons almost can't wait either.
16:34:48 <Darius> dons: GHC doesn't use native codegen when optimizing.
16:35:02 <Darius> Unless that's changed recently.
16:35:37 <dons> I presumed bourbaki meant 'optimized' in the sense of 'adapted to be used on that platform'
16:35:59 <bourbaki> i mean if it uses special features of the mac and such
16:36:08 <bourbaki> what ever that is to make it faster
16:36:38 <dons> you do get the native  codegen with -O now, btw. with 6.4
16:37:19 <bourbaki> Cale: do you know something like mathematica in haskell?
16:38:37 <dons> hmm. seems that -O == -fasm didn't actually make it into 6.4 :/
16:38:42 <dons> I'm sure I saw that commit.
16:41:49 <glimming> how do I compile in emacs haskell-mode?
16:41:55 <glimming> C-c C-c does not work.
16:42:01 <glimming> I have setup haskell-ghci
16:42:41 <jlouis> M-x compile ?
16:42:51 <jlouis> (bind it to something. I like binding it to F12)
16:44:16 <glimming> like (add-hook 'haskell-mode-hook
16:44:16 <glimming>            (lambda () (local-set-key (kbd "C-c C-c") 'compile)))
16:44:42 <glimming> anyone got jdee to work? I have problem with it.
16:53:21 <heatsink> ... I can't make a data object that contains a class?
16:53:46 <heatsink> oh now i remember
16:53:58 <heatsink> data Classname a =>
16:54:50 <heatsink> hmm, my mistake means that means that much of my file is badly typed.
16:55:14 <dons> that has a class constraint..
16:55:38 <heatsink> what?
16:56:30 <dons> the data type has a class constraint, restricting it to Classname members.
16:57:02 <dons> ohh, so I guess that does mean it contains Classname members only :)
16:57:22 <Pseudonym> Actually, it only restricts the constructors.
16:57:27 <heatsink> The error was because I said data Foo b = [(Classname, b)]
16:57:55 <dons> heatsink: yeah. you can't do that.
16:58:49 <dons> P: do you have an opinion on why unboxed values haven't turned up in the H98-crusade list yet?
16:59:41 <Pseudonym> dons: Probably because it's a GHC-onlyism.
16:59:51 <Pseudonym> I don't think Hugs supports them.
17:00:04 <dons> no. I don't believe so. neither nhc.
17:00:10 <bourbaki> hehe :) http://www.neystadt.org/john/humor/Girls-Guide-To-Geek-Guys.htm
17:00:24 <Pseudonym> In particular, it's a GHC-internalism.
17:00:45 <Pseudonym> Which is worse than an -onlyism.
17:00:49 <dons> ah. good point. yes, they rely on the set of primops.
17:01:02 <dons> you'd want a standardised primop list.
17:01:15 <Pseudonym> Related note: http://bears.ece.ucsb.edu/personnel/astornet/humor/humor1.html
17:01:25 <Pseudonym> (Yes, it's the same Scott Adams.)
17:01:43 <dons> though the early unboxed papers where ~15 years ago.
17:02:29 <dons> I can't imagine they're not understood well. (hm.. too many negatives in that sentence)
17:03:52 <Pseudonym> Well, it requires a more expressive kind system.
17:04:11 <Pseudonym> And if you're going to do that, you might as well take an even harder look at kinds.
17:04:25 <dons> yeah, agreed. that part isn't quite polished.
17:04:39 <Pseudonym> I can imagine, for example, a kind system which supports not only * and #, but also Integer.
17:04:42 <dons> there are plenty of restrictions on where unboxed values can be used.
17:04:54 <Pseudonym> Which would remove the need for building Peano numbers in the type system.
17:05:15 <Igloo> Are you suggesting eliminating unboxing or standardising it?
17:05:15 <dons> hmm.. highly-efficient type-level arithmetic.
17:05:21 <dons> standardising
17:05:42 <Igloo> I can't imagine that working well in the case of Integer, say, where you want to allow impls to change their implementation and differ
17:06:26 <Igloo> You could usefully standardise particular cases like IOUArray/STUArray, though
17:06:35 <Pseudonym> I'm talking about Integer _kinds_.
17:06:41 <vincenz> Test
17:06:41 <vincenz> Test
17:06:41 <vincenz> Anyone getting this?
17:06:42 <vincenz> Anyone see this test?
17:06:50 <Pseudonym> vincenz: Look like you're unlagged now.
17:06:54 <Igloo> I know, but I was making a different point
17:06:54 <vincenz> hmm
17:07:00 <vincenz> seems that my connection to us is fucked up
17:07:03 <vincenz> but not irc.freenode.net
17:07:17 <Pseudonym> Oh, I see.
17:07:22 <Pseudonym> Crossed wires, sorry.
17:07:35 <vincenz> nope
17:07:37 <vincenz> spain is out too
17:07:42 <vincenz> fuck
17:07:55 <vincenz> an internal hop of my provider
17:07:57 * vincenz mutters
17:08:05 <heatsink> Can type synonyms be parametrized the way data and newtype declarations can?
17:08:05 <vincenz> I wish I could redirect
17:08:18 <dons> # does complicate ghc a bit, it has subkinding and the ? kind as well now.
17:08:36 <dons> which I don't remember from the unboxed-vals paper.
17:08:37 <vincenz> ARGH
17:08:42 <vincenz> I pay for this, fuck
17:09:20 <dons> the unboxed-values paper was '91. hmm.
17:10:09 <Pseudonym> Oh, didn't know that.
17:12:17 <raboof> heh
17:13:04 <dons> "it is far from obvious whether unboxed values should be exposed to the programmer".
17:13:43 <dons> though there's a strong case to expose them -- we use them all the time these days.
17:13:46 <bourbaki> Pseudonym: do you know something in haskell with which i can render surfaces and such?
17:14:08 <Pseudonym> Any particular kind of surfaces?
17:14:25 <heatsink> Apparently not.  But why not?
17:14:39 <heatsink> I'd like to do type Num a => NumberList a = [a]
17:14:46 <heatsink> but the language doesn't allow it.
17:15:08 <Pseudonym> No, because the constraint doesn't do anything.
17:15:23 <Pseudonym> If it was data or newtype, there would be something obvious to put the constraint on: the constructor.
17:15:35 <bourbaki> Pseudonym: nurbs surfaces implicit maybe
17:15:39 <Pseudonym> Only objects have constraints, not types.
17:15:45 <Pseudonym> bourbaki: Nope.
17:16:03 <Pseudonym> bourbaki: Ray tracers which handle spheres is about the best you're going to get in Haskell.
17:16:07 <bourbaki> thats so strange
17:16:14 <Pseudonym> Not really.
17:16:20 <Pseudonym> Writing a decent renderer is hard work.
17:16:25 <heatsink> ok
17:16:27 <Pseudonym> As opposed to writing a simple raytracer.
17:16:29 <bourbaki> why i mean haskell is so suited for these things
17:16:43 <heatsink> Wasn't there someone here a while ago who did raytracers?
17:16:45 <bourbaki> i know since i am a former engine programmer :)
17:16:50 <bourbaki> boegel
17:16:52 <heatsink> Though I did see a lot of sphere pictures :)
17:17:00 <Pseudonym> I did some sphere pictures, too.
17:17:07 <bourbaki> Pseudonym: sec
17:17:27 <Pseudonym> http://andrew.bromage.org/haskrt.png
17:17:31 <Pseudonym> That sort of thing.
17:17:34 <bourbaki> Pseudonym: http://rafb.net/paste/results/1zgOay60.html
17:17:56 <bourbaki> i want to render objects as 2 Manifolds
17:18:23 <bourbaki> nice
17:18:23 <heatsink> ooh, motion blur
17:18:31 <Pseudonym> Of course, motion blur.
17:18:35 <bourbaki> :)
17:18:40 <Pseudonym> If you look carefully, the reflections are also motion blurred.
17:18:45 <bourbaki> Pseudonym: that way i can displace my objects
17:18:51 <heatsink> oh yea
17:18:52 <Pseudonym> Right.
17:19:00 <bourbaki> get the normal maps and all nifty things
17:19:18 <Pseudonym> What you'd like is a simple REYES-like renderer.
17:19:22 <bourbaki> and i can do animation within the same framework
17:19:30 <heatsink> by 2-manifold, you mean a mapping from a 2d coordinate space to 3d?
17:19:37 <bourbaki> but there is nothing like that on haskell?
17:19:43 <bourbaki> heatsink: yes
17:19:44 * heatsink reads the link
17:19:53 <Pseudonym> A REYES-like renderer would be interesting in Haskell because of lazy evaluation.
17:20:03 <bourbaki> the idea is that you build all objects from glueing together patches
17:20:23 <bourbaki> Pseudonym: would you ever start to do something like that?
17:20:39 <bourbaki> and i explain you my idea for the lightning stuff
17:20:45 <bourbaki> lighting
17:20:53 <Pseudonym> http://www.aqsis.com/ <- I'm one of the developers on this project.
17:20:56 <Pseudonym> It's in C++, though.
17:20:57 <heatsink> Pseudonym: how do you do multiple reflections? iteratively?
17:21:08 <Pseudonym> heatsink: The naive way, using recursion.
17:21:27 <thebug> that raytracing stuff would be from debug
17:21:45 <heatsink> hmm... that would give trouble with specular surfaces I'd think
17:22:02 <bourbaki> Pseudonym: do you know volker blanz?
17:22:09 <Pseudonym> bourbaki: Not by that name.
17:22:23 <bourbaki> http://www.mpi-sb.mpg.de/~blanz/
17:22:28 <bourbaki> i want to do something like that
17:22:35 <bourbaki> just not with prescanned faces
17:22:47 <bourbaki> but with a linear space with displacement maps
17:23:07 <Pseudonym> Ah, yeah, I think I've read some of this guy's papers.
17:23:22 <bourbaki> the prof of that guy held a lecture at my uni :)
17:23:41 <bourbaki> i so would love to render my stuff with haskell
17:23:56 <bourbaki> since it allows me to just write down the math stuff
17:25:12 <bourbaki> Pseudonym: do you know about that technique that they used in doom3 and farcry with the normal maps?
17:25:36 <raboof> ok. let's see if i've understood the basic idea of haskell i/o.
17:26:21 <Pseudonym> bourbaki: Nope.  I'm not so much into games-type stuff.
17:26:26 <raboof> the idea is that, suppose my program processes a list of strings read from a file, i read them as a `[IO String]' rather than as an `IO [String]' in order to do the actual reading when i need the content, not sooner?
17:26:29 <Pseudonym> I used to work in visual effects, which is mostly offline.
17:26:51 <bourbaki> Pseudonym: i want to combine something from both worlds
17:27:07 <bourbaki> ie i use a texture with normals on it so i can render it quicker with a raytracer
17:27:28 <bourbaki> microstructure through the texture
17:27:44 <heatsink> raboof: You can have [IO String], but you can't read the strings that way.
17:29:03 <raboof> no, when i actually need the content i must `do' the `IO String', right?
17:29:08 <heatsink> raboof: To perform the IO, you have to have type IO <something>
17:29:12 <heatsink> that's right
17:29:13 <Darius> raboof: With an IO String each element would be (presumably) a computation that reads a line from the file, but that doesn't make much sense.
17:29:57 <Darius> raboof: Because say 'sequence theList' would be the same as 'sequence (reverse theList)
17:29:58 <Darius> '
17:30:00 <raboof> well, in practice it'd be a `IO Graph' or something, reading a Graph from my file of graph representations
17:30:27 <Pseudonym> Sounds interesting.
17:30:32 <raboof> Darius: hm, indeed that's an interesting property.
17:30:35 <Darius> raboof: There are functions that will lazily read a whole file which may be more what you're looking for.
17:30:38 <Pseudonym> I read a paper some time ago about some kind of visualisation thing in Haskell.
17:30:45 <Pseudonym> Can't recall the details.
17:31:09 <raboof> Darius: probably true, yes
17:31:32 <dons> Darius: [IO a] can make sense -- in Yi keymaps are [Char] -> [IO ()], which when sequence_'d produce state changes in the editor buffer.
17:31:50 <Darius> raboof: If your IO computations are random access, from a database, from different files or something like that then it may make sense.
17:32:36 <raboof> otherwise reading the file in non-lazily might be more efficient in practice?
17:32:36 <Darius> dons: I agree, but not if the list of IO actions is something like (replicate 10 (hGetLine someHandle))
17:33:44 <dons> well, this is why we have sequence :: Monad m => [m a] -> m [a]
17:33:51 <heatsink> raboof: If you can guarantee that the work won't be wasted, eager computation is more efficient.
17:34:09 <Darius> Mainly what I was getting at is that, [getLine,getLine,getLine] won't be a list of actions that get the first, second, and third line respectively.
17:34:37 <dons> it's rare to see such code, too, I agree.
17:34:44 <Darius> heatsink: Not in general.
17:35:29 <Darius> (at least not counting constant factors, but in that case eager could only be equivalent in efficiency without side-effects)
17:35:31 <raboof> (just exploring the field here, i'm new to most of this) hmm-hmm. suppose i'm reading from a high-latency network. then lazily doing that would make sense, since calculations could start before the entire dataset is received, right?
17:37:13 <Darius> raboof: Well there's a difference between lazily and incrementally.
17:38:05 <heatsink> Darius: true, the same algorithm done eagerly is at best equivalent to a constant factor.
17:39:21 <raboof> well, yeah, but i guessed one of the nice things about lazy evaluation would be that i can write a program like: `read the data, process the data, write the result', and have these actions automagically interleaved where useful
17:39:48 <Darius> heatsink: Actually I misstated my second remark.  More clearly I meant that even counting constant factors a lazy solution can still be faster than an eager one even if all input will be used (and then the rest of the remark is theory mumbo-jumbo)
17:39:58 <heatsink> The compiled program is still deterministic.  It doesn't change the order of operations dynamically based on when external events happen unless you explicitly program it that way.
17:40:24 <raboof> heatsink: oh, that's too bad. i kinda supposed that :)
17:40:31 <Darius> raboof: Yes. Lazy IO is more useful when the boundaries between "packets" are less clear, e.g. parsing a fairly complex syntax.
17:40:53 <ows> Hi, what do you think is the most "typed language" (and with powerful abstraction capabilities)?
17:41:27 <heatsink> Darius: is there some cause other than the tendency to do useless/redundant computation when working eagerly?
17:41:35 <Darius> ows: Give two (statically type safe) languages with an ordering on which is "more typed".
17:42:00 <Darius> heatsink: Cache issues.
17:42:30 <heatsink> interesting.
17:42:37 <Darius> heatsink: E.g. an eager solution may result in a massive resident set and thrashing that a lazy one would handle incrementally.
17:43:00 <Darius> heatsink: e.g. sum (map square [1..100000000])
17:43:40 <heatsink> okay, good example.
17:43:58 <Pseudonym> Lunch.
17:44:11 <raboof> lunch? lol. bedtime here! :)
17:44:12 <ows> Darius: how do you compare c++, java, lisp, python and haskell (in data abstraction and typed issues)
17:45:06 <dons> you look at the haskell types, and then rank each language on whether it provides that type ;)
17:45:16 <Darius> heatsink: Another is backtracking algorithms.  But most of the easy ones are in the category of stream algorithms.
17:46:38 <Darius> ows: That was the question I was asking you (removing C++, Lisp, and Python).
17:49:48 <raboof> so the reduction of a functional program doesn't make discisions like: `hm, reading this network socket still blocks, i'll just go on reducing other terms then'?
17:50:32 <Darius> raboof: No.
17:50:40 <raboof> that's too bad :)
17:50:50 <Darius> raboof: You may want to look at Oz, Alice, and perhaps even Curry.
17:51:15 <raboof> excuse my ignorance, but what are those? :)
17:51:57 <Darius> raboof: Other programming languages with concurrency along those lines built in (except for Curry, it could do it but I'm not sure if it does do it).
17:52:13 <raboof> aah ok
17:52:39 <raboof> so this isn't in haskell because it just didn't happen yet, or because it turned out to be a bad idea?
17:53:22 <Darius> raboof: It doesn't make much sense to add it to Haskell semantics.  Certainly there are concurrency libraries for Haskell but they are libraries.
17:54:50 <Darius> raboof: JoCaml and other languages based on the join calculus should also have such built in support.
17:58:46 <raboof> Darius: thanks for the references :)
17:59:36 <raboof> interesting stuff
18:00:18 <raboof> still a lot of room for improvement in how people currently often write programs (classical imperative-style) :)
18:09:21 <heatsink> I posted a question on http://haskell.org/hawiki/HaskellIrcPastePage
18:09:37 <heatsink> I am getting a kind error in an instance declaration, I do not understand why.
18:10:22 <raboof> JoCaml seems interesting, but a bit more ambitious than what i was thinking of :)
18:10:46 <heatsink> heh, fractal tobacco :)
18:25:26 <heatsink> Darius: I'd appreciate if you could examine the code I pasted.
18:43:50 <elux> hey
18:44:15 <elux> i am trying to use hugs and when i type in something like: fact :: Integer -> Integer
18:44:21 <elux> i get the error ERROR - Undefined variable "fact"
18:44:28 <elux> what am i doing wrong here?
18:45:07 <heatsink> the hugs interpreter is for evaluating things, not defining things
18:45:25 <heatsink> you can put that in a file and load it
18:45:42 <heatsink> (if you also define fact)
18:45:50 <elux> how do i define fact
18:46:04 <elux> im new to haskell .. i have background in imperative languages .. but never functional
18:46:18 <elux> nothing besides spreadsheets ..hehe (since the tutorial makes that comparison)
18:46:24 <heatsink> :)
18:46:30 <Darius> heatsink: Where is it?
18:46:39 <gzl> you could do:
18:46:46 <gzl> fact 0 = 1
18:46:56 <heatsink> Darius: http://www.haskell.org/hawiki/HaskellIrcPastePage
18:46:56 <Darius> elux: fact is defined much the same as it is in an imperative language (if we ignore the stack)
18:46:57 <gzl> fact n = n * fact (n-1)
18:47:09 <elux> gotcha
18:47:25 <gzl> there are lots of ways of writing it
18:47:31 <elux> [ n | n <- [1 .. 400] , 11111 'mod' n == 0 ]
18:47:35 <elux> what about something like that
18:47:57 <elux> n 0 = 1    then that statement?
18:48:25 <gzl> i'm not really sure what you're doing there, can you give more context
18:48:28 <heatsink> what are you trying to do with the [ list comprehension ]?
18:48:31 <gzl> yeah
18:48:38 <gzl> i don't see what you're using the list comprehension for
18:48:42 <Darius> heatsink: Eq is a type class (i.e. it works with things of kind * such as Int, Bool, etc.), Monad is a constructor class (i.e. it works with things of kind (k -> k') (* -> *) in this case such as Maybe, (Either Int), [] etc.
18:48:59 <elux> it should return the result where n divides 11111
18:49:14 <elux> im taking it from an example .. im just trying to get the thing to run
18:49:29 <heatsink> but none of the numbers in 1...400 divide 1111
18:49:51 <elux> 1, 41, 271
18:50:17 <heatsink> ok
18:50:41 <heatsink> isn't that n `mod` 11111?
18:50:42 <elux> can someone recommend a good introduction to haskell?
18:50:51 <elux> hrmm .. yes `mod`
18:50:52 <elux> sorry
18:50:53 <Darius> www.haskell.org has a section for that.
18:51:03 <elux> yes i know .. a gentle introduction to haskell .. its not very gentle :)
18:51:29 <heatsink> Darius: still tryung to understand type class and constructor class.
18:51:32 <araujo> elux, Introduction to Functional Programming Using Haskell is nice
18:51:35 <gzl> Prelude> [ n | n <- [1 .. 400] , 11111 `mod` n == 0 ]
18:51:35 <gzl> [1,41,271]
18:51:36 * heatsink reads the prelude
18:51:46 <elux> thats a good?
18:51:49 <elux> good = book
18:51:51 <gzl> elux: you can just paste that list comprehension directly into the toplevel to evaluate it.
18:51:53 <araujo> elux, yes
18:52:05 <gzl> The Haskell School of Expression is good too
18:52:51 <gzl> man, WASH is really kind of confusing
18:53:00 <elux> has anyone seen a compiler built with haskell?
18:53:12 <heatsink> yeah, ghc :)
18:53:14 <gzl> isn't ghc written in haskell?
18:53:14 <gzl> yeah.
18:53:20 <elux> can i do network i/o with haskell?
18:53:25 <heatsink> yea
18:53:35 <gzl> http://www.haskell.org/ghc/docs/latest/html/libraries/network/Network.html
18:53:51 <Darius> heatsink: The difference is a constructor class is a "type class" that takes type constructors.  Usually they are both called type classes.
18:53:55 <gzl> er, better, browse through this
18:53:56 <gzl> http://www.haskell.org/ghc/docs/latest/html/libraries/index.html
18:53:56 <elux> is code cross-platform compatible? ie. windows/linux?
18:53:57 <araujo> visit thaqt site, it got *bunch* of stuff
18:54:37 <Darius> elux: There's a learning section of haskell.org that lists several tutorials/introductions/books.
18:54:42 <elux> i can see haskell being really nice for cryptographic algorithms
18:54:51 <gzl> it's nice for several things
18:55:18 <Darius> elux: www.galoisconnections.com
18:55:44 <elux> hehe i have to say you haskell guys are more friendly then most programming channels
18:56:17 <elux> darius: is that company that offers cryptographic software built with haskell?
18:56:19 <mauke> huhu, haskell programmers are too lazy to insult you
18:56:30 <Darius> elux: Yes.
18:56:31 <gzl> i hope that wasn't a pun
18:56:46 <elux> cool
18:56:46 <mauke> sorry
18:57:46 <gzl> heatsink: you familiar with WASH?
18:57:57 <elux> can you write gui applications with haskell?  i think ive seen gtk bindings
18:58:09 <elux> but i guess it would be better to write that in like c++ and then just use haskell to do all the hard work
18:58:33 <heatsink> gzl: no.
18:58:36 <gzl> ok.
18:59:29 <gzl> elux: http://www.haskell.org/libraries/#guigs
18:59:33 <gzl> dude, browse haskell.org for a while
18:59:41 <gzl> all your questions are clearly answered on the site
18:59:44 <elux> sry
18:59:55 <elux> just getting excited
19:01:13 <gzl> heatsink: it's kind of crazy. :)
19:01:44 <elux> ok
19:02:29 <heatsink> Darius: So kinds are just like 'second-order' function types, in that their domains and ranges are types rather than values?
19:02:44 <heatsink> Maybe is * -> * because it takes one type, and produces a new type
19:03:02 <heatsink> Maybe () is * becaus it's just one type
19:05:52 <Darius> heatsink: Yes.  Kinds are "types" for type level "functions".
19:06:04 <heatsink> Okay.
19:07:30 <heatsink> Now, what tells the compiler what kind a class is?
19:08:12 <heatsink> What says that an instance of Monad is * -> * while an instance of Eq is *?
19:10:01 <Darius> heatsink: The way the bound type variable is used.  E.g. return :: a -> -m- a
19:10:28 <heatsink> Ah!
19:10:43 <gzl> actually, you can go up past kinds. you get this infinite hierarchy
19:11:00 <heatsink> What?
19:11:04 <Darius> heatsink: Basically, if you substitute the thing you are making an instance of into the types of the method, it should make sense.
19:11:15 <Darius> gzl: Not in Haskell.
19:11:18 <gzl> i know, not in haskell
19:11:25 <gzl> i mean in general :)
19:11:37 <heatsink> Oh, you mean kinds of kinds, etc.
19:11:56 <gzl> yes
19:12:00 <heatsink> kinds (of kinds)*
19:12:12 <gzl> yep
19:12:49 <gzl> System F is the usual typed lambda calculus that captures parametric polymorphism with kinds and such; System F_omega does the crazy thing
19:13:18 <heatsink> iterate (`of` kinds) kinds
19:13:39 <heatsink> okay you lost me again.
19:16:10 <gzl> in simply typed lambda calculus
19:16:32 <gzl> you have lambda abstraction (which abstracts terms from terms) and application (which instantiates abstractions with values)
19:17:07 <gzl> in System F you have analogous mechanisms for type abstractions and type applications
19:17:24 <gzl> so you can "instantiate" a type abstraction with some value
19:17:33 <heatsink> okay
19:17:36 <gzl> a value would be a usual type like Nat or Bool or something
19:17:49 <gzl> or Int or something in Haskell
19:18:05 <heatsink> but not 1 or 'a'
19:18:10 <gzl> right
19:18:14 <gzl> those are one notch lower
19:19:33 <Darius> System Fomega allows higher kinds but not (non-trivial) categories of kinds.
19:19:40 <gzl> so then you get kinds from assigning types to these higher-order values
19:20:33 <gzl> i haven't studied F_omega yet. i've been meaning to read some stuff on it
19:21:44 <heatsink> Have you ever wanted to write something that needed F_omega?
19:23:14 <gzl> no
19:23:40 <gzl> but I haven't really written anything very fancy either
19:23:51 <gzl> I have wanted to write some things that you can't really do in Haskell
19:24:28 <gzl> but I don't think they have anything to do with F_omega
19:53:43 <heatsink> no matter how familiar I get with haskell, I do not fail to run into type errors I don't understand.
19:55:33 <Cale> heatsink, paste?
19:56:42 <heatsink> okay, just a sec
19:57:41 <heatsink> Three lines.
19:57:45 <heatsink> newtype Predicate a => PQL a b = PQL [(a, b)]
19:57:55 <heatsink> instance Predicate a => Monad (PQL a) where
19:58:04 <heatsink>     PQL ((p, v):xs) >>= f = f v ++ (PQL xs >>= f)
19:59:18 <heatsink> If you want to compile that, add the line: class Predicate a
19:59:45 <heatsink> I've gone through that function; everything types correctly as far as I can tell.
20:00:06 <Darius> heatsink: What's the type error?
20:01:07 <Darius> It looks like you want PQL (unPQL (f v) ++ (PQL xs >>= f)) where unPQL unwraps PQL.
20:01:31 <Darius> f v will be PQL which isn't a list so (++) isn't type correct.
20:01:36 <heatsink> d'oh, this isn't the type error I'm looking for.  I made a new error when simplifying the problem.
20:02:09 <Darius> heatsink: As a general thing, there's usually little to no reason to put class constraints on data types.
20:03:16 <heatsink> I have a reason for that.
20:04:53 <heatsink> aha, I think I see what I did.
20:05:28 <heatsink> Darius: you're right.
20:05:48 <heatsink> This is the reason I wanted to declare PQL as a type synonym rather than a newtype, so I wouldn't have to use deconstructors.
20:07:22 <Darius> heatsink: You can't use partially applied type synonyms for good reasons.
20:08:47 <heatsink> ...ok.
20:11:53 <heatsink> cool, my monadic type seems to work.
20:12:23 <heatsink> It's the first not-sequential monad I've made.
20:17:52 <Pseudonym> What is it?
20:18:52 <heatsink> It is a set of values, where each value in the set has a predicate indicating when the value is valid.
20:19:26 <heatsink> It's represented as a list [(predicate, value)]
20:20:54 <heatsink> The monad infrastructure keeps track of when the predicates are true when you do operations that combine different lists.
20:23:24 <heatsink> It's for logical manipulation of programs.
20:38:11 <metaperl_> I have a question on import posted here: http://www.hcoop.net/~terry/haskell/hs/pugs/pugs/src/t/Junc/Test.hs
20:38:28 <metaperl_> Any feedback is appreciated
20:38:29 <Pseudonym> Ah, interesting.
20:39:13 <desrt> i'm guessing because you have to import Data.Set directly
20:39:27 <metaperl_> me too
20:39:40 <desrt> think about when you do like import AST ( func1 ... )
20:39:42 <metaperl_> it seems like there should be some way to avoid having to do that
20:39:53 <heatsink> did you write AST?
20:40:02 <metaperl_> no,... probably autrijus did
20:40:10 <metaperl_> i have written nothing so far
20:40:29 <heatsink> if you have editorial control over that file, you can add Data.Set to its exported symbols
20:40:47 <metaperl_> oh, otherwise import it
20:40:49 <heatsink> probably simpler to just export the module
20:40:50 <metaperl_> directly
20:41:00 <heatsink> s/export/import/
20:41:07 <metaperl_> actually Internals is what loads Data.Set
20:45:13 <elux> does anyone know of a java based haskell compiler? to compile haskell code and run it on the jvm?
20:45:25 <elux> i have seen thesis' written about it theorically .. but couldnt find a working implementation
20:48:29 <Gahhh> elux, I believe it's not posible
20:48:48 <Gahhh> iirc, it had something to do with jvm not supporting tail call kind of stuff
20:48:52 <Gahhh> but I am not sure
20:48:58 <elux> right .. i have read a few problems
20:49:03 <elux> also with lazy evaluation
20:49:14 <Gahhh> I believe there are scheme compilers targeting java, so it may actually be possible.
20:49:39 <heatsink> The scheme compilers that target java maintain their own continuation stack
20:49:46 <heatsink> A haskell java implementation would do the same.
20:49:59 <heatsink> *either that or they disallow call/cc
20:50:48 <Gahhh> Does anyone have a link to a tarball of the SICP book ?
21:15:24 <dons> elux: there's no workign implementation, but there's been 5-10 papers, and a few honours theses.
21:16:16 <dons> there's no conceptual barrier though -- you can certainly compile haskell to bytecode + an rts written in java.
21:16:40 <dons> the bonus is that you get to strip down your rts by reusing features of the jvm -- e.g. garbage collector
21:58:20 * shapr yawns
21:58:36 <Gahhh> yo shapr
21:58:42 <shapr> y0 Gahhh, wassup?
21:58:48 <Gahhh> not much mah man
21:59:09 <shapr> I wonder if I'm up...
21:59:18 <Gahhh> run self-dignostics
21:59:28 <Pseudonym> G'day.
22:00:00 <shapr> Today's POST (Power On Self Test) says it's minus 29 outside, get back in bed and sleep till it warms up.
22:00:16 <Gahhh> knowing where you live, you may just as well hibernate.
22:00:23 <shapr> truly.
22:00:29 <shapr> How's code?
22:00:41 <Gahhh> code's at work. writing c++. no haskell.
22:00:54 <Gahhh> trying to read on database theory tho. cannot find any free text online.
22:01:56 <Gahhh> how is the pdf annotation thing going ?
22:01:59 <vdrab> shapr : I've missed the recent developments : what 's the word on the Reader?
22:02:12 <shapr> vdrab: What I have I shall put up this morning.
22:02:18 <vdrab> yay !
22:02:22 <vdrab> good one.
22:03:07 <shapr> Gahhh: Fermat's Last Margin just needs to have the darcs integration finished to release the first alpha
22:03:30 <shapr> As for database theory, I've seen some neat stuff mentioned on the HaskellDB mailing list, set theory and something else I can't think of at the moment.
22:04:10 <Gahhh> fwiw, issue 2 is out at www.freesoftwaremagazine.com
22:04:16 <Gahhh> hmm haskelldb list
22:05:23 <shapr> g'day Pseudonym
22:05:48 <metaperl> cute: a free software magazine that costs money
22:06:26 <dons> really? that's not very PC.
22:06:39 <metaperl> I think subscription is still optional though
22:19:29 <gzl> mmph, anybody up for a quick question on WASH?
22:23:53 <gzl> oh well, maybe later.
22:26:57 <shapr> Ask your question, it's possible you'll get an answer.
22:27:35 <gzl> ok.
22:27:49 <gzl> well, i know how to make a static HTML page.
22:28:12 <gzl> hold on. let me think for a second to make sure I don't ask something really stupid.
22:30:30 <tuomov> -18.8
22:30:46 <tuomov> the cold is late this year
22:34:08 <gzl> shapr: ok, good, i think i figured it out. avoided stupid question :)
22:35:53 <gzl> shapr: should I format something like the following in some special fashion? emacs haskell mode's auto-indent stuff breaks down
22:36:17 <gzl> do foo (do blah <- do ...
22:36:21 <gzl> there's got to be a better way of writing it.
22:36:58 <musasabi> morning
22:37:47 <heatsink> maybe use >>=?
22:38:07 <gzl> hmm
22:40:16 <gzl> so which do blocks here would you switch to >>?
22:40:17 <gzl> http://www.nparikh.org/misc/test.hs
22:42:13 <heatsink> are these all the same monadic type?
22:43:00 <gzl> i *think* so.
22:43:19 <Lemmih> Good morning, #haskell.
22:44:30 <heatsink> in that case, you can use only one do block
22:44:34 <heatsink> Good morning.
22:44:54 <gzl> hmm, really? I thought I had to do it like this to get the tags grouped properly
22:45:07 <bourbaki> moin
22:45:23 <gzl> if there's a way to do it with one block it would be great
22:48:15 <heatsink> you can move the cmd <- into the inner do block
22:49:46 <gzl> oh, of course
22:49:46 <gzl> yeah
22:49:55 <gzl> that helps
22:50:25 <gzl> two blocks isn't that bad, actually. this is fairly readable
22:52:49 <gzl> heatsink: thanks
22:53:01 <heatsink> np
23:01:12 * shapr hops cheerfully.
23:05:30 * heatsink chops earfully
23:06:26 <shapr> that's gotta hurt!
23:06:43 <heatsink> oh believe me, it does.
23:06:47 <shapr> How's quals prep?
23:07:08 <shapr> I am AmbiSinistrous today!
23:08:06 <heatsink> slow.  I did MOS capacitance for a while and then got tired.  I also spent too much time programming.
23:10:26 <shapr> Maybe wading through the code of some of the hardware simulators would be a nice way to combine those? Lava, Hawk, SPICE, what's the gnome app, Origami?
23:11:06 <heatsink> heh.  Yea, but that won't help nothin'.
23:11:37 <Lemmih> shapr: Yo. How's TMR? Is it out yet?
23:12:50 <shapr> It's close...
23:13:06 <shapr> musasabi just organized up a front page / logo image. Looks nice.
23:20:45 <shapr> Is BSD 2-clause sufficient license for TMR content?
23:29:19 <musasabi> isn't bsd2 ~ bsd4, or is bsd 2-clause not bsd2 ?
23:36:27 <shapr> I don't know.
23:57:34 * musasabi gets sad over the EU software patent turn..
23:58:08 <araujo> mmm...
23:58:15 <araujo> musasabi, how it goes?
23:58:22 <Itkovian> meuning
23:58:47 <musasabi> http://wiki.ffii.org/Com050228En
