00:45:12 <boegel> hey #haskell
00:46:09 <araujo> Greeting boegel
00:47:17 <boegel> @seen shapr
00:47:18 <lambdabot> I saw shapr leaving #webwitches 6 hours 7 minutes 58 seconds ago.
00:56:33 <Svrog> hi everyone
00:57:15 <boegel> hi Svrog
00:57:33 <Svrog> hows it going?
01:03:44 <boegel> Svrog: okay,but I should study and I don't feel much like it
01:05:19 <Svrog> i hear ya
01:06:02 <boegel> hi Philippa, TheHunter
01:39:22 <boegel> hey Itkovian
01:44:21 <TheHunter> hey boegel
01:45:00 <TheHunter> is Henning Thielemann here?
01:47:10 <wnoise> Is there a standard function of type [Either a b] -> ([a], [b])?
01:48:04 <vincenz> Hi
01:48:11 <vincenz> This might be a better place to ask than #math
01:48:17 <vincenz> I have some questions about notations used ...
01:48:29 <vincenz> specifically something that looks like  |-
01:48:42 <vincenz> L, a |- b
01:51:20 <wnoise> Is it then followed by what looks like a fraction, but has logical formulas above and below?
01:51:36 <vincenz> yes
01:51:38 <vincenz> I know what that means
01:51:39 <musasabi> \vdash you mean?
01:51:46 <vincenz> from the part above results the part below
01:51:55 <vincenz> just not sure on the EXACT meaning of the |-
01:52:09 <vincenz> For insntance.... contraction
01:52:16 <vincenz> F, a, a|- b
01:52:17 <vincenz> --------------
01:52:21 <vincenz> F, a |- b
01:52:51 <vincenz> How should I read this...
01:53:34 <vincenz> Is the comma an and?
01:53:47 <dons> usually.
01:53:49 <vincenz> If... in an environment F and a and a holds b
01:53:51 <vincenz> Then
01:53:58 <vincenz> in an environment F and a holds b?
01:54:41 <vincenz> See it's confusing in a logic where contraction does not hold
01:54:51 <vincenz> cause then I'm not sure how to read the , and |-
01:55:00 <Itkovian> meuning
01:55:55 <vincenz> It'd be nice if a book existed on this... logic/linear logic and the notation used in CS
01:56:02 <musasabi> F: a |- b, means that a can be syntactically derived from b in F.
01:56:14 <dons> I'd probably say: If in context F, a, and a, b holds then in context F and a, b holds.
01:56:31 <vincenz> musasabi: well it's odd
01:56:35 <vincenz> cause you use the word "and"
01:56:40 <vincenz> but it can't be &
01:56:55 <vincenz> cause that is defined with such a notation
01:57:36 <vincenz> And it's not F: a   (where F is a capital lambda), but F, a
01:57:55 <vincenz> Ugh... I need a book on this so I can read these papers
01:58:00 <vincenz> Any suggestions?
01:58:24 <musasabi> s/a/b/
01:58:24 <musasabi> vincenz: sorry wrong order.
01:58:24 <musasabi> b can be derived from a.
01:58:24 * musasabi was thinking in finnish and writing in english
01:58:41 <dons> vincenz: at the start of this book is a introduction to this kind of judgement (not sure if the level is right for you though): http://www-2.cs.cmu.edu/~rwh/plbook/offline.pdf
01:58:53 <dons> "Programming Languages: Theory and Practice", Robert Harper
01:59:03 <vincenz> Thank you
01:59:36 <vincenz> I'm reading the paper "The logic of bunched implications"   Peter W. O'hearn and David J. Pym
01:59:45 <musasabi> vincenz: From F U {a} you can form a series of axioms / deduction rules as defined in the logic in question that results in b.
01:59:46 <dons> there's a foundational paper, "On the meaning of the logical constants ...", Per Martin-Löf
01:59:52 <dons> let me find a link
02:00:02 <dons> ah. here: http://www.hf.uio.no/filosofi/njpl/vol1no1/meaning/meaning.html
02:00:34 <dons> yeah, if the kind of stuff musasabi is saying is the right level for you, then the Harper's intro chapter is probably enough
02:00:38 <musasabi> one good thing to understand is that logic notation is a metalanguage and that there are multiple different logics.
02:00:39 <vincenz> Thank you :)
02:01:28 <dons> yep. remembering that  you're using a metalanguage to describe languages is an important step
02:02:00 <dons> beginners get confused about what level the various symbols live at
02:02:23 <vincenz> I know
02:02:28 * vincenz is not a student anymore
02:02:41 <vincenz> but my background is EE and lately my research is pushing me heavily into the CS
02:02:41 <dons> yeah, I suspected as much ;)
02:03:15 <dons> hmm. trying to think of other good background material..
02:03:19 <shapr> hey dons, any idea if the sort of info Simon wants about partial downloads is in apache logs?
02:03:55 <shapr> maybe I shouldn't interrupt the teaching process :-)
02:04:03 <shapr> hoi vincenz
02:05:23 <dons> vincenz: well, can't really think of anything obvious. harper's book is what I actually use to teach a course on this stuff stuff, so it is probably most appropriate
02:06:03 <dons> shapr: what info does simon want? I must have missed that.
02:06:23 <shapr> ghc downloads
02:06:40 <dons> was there an email?
02:07:00 <shapr> yeah, on ghc-users
02:07:06 <dons> checking....
02:07:20 <shapr> or maybe it came directly to me and my folder sorting code is _|_
02:07:36 <vincenz> hi shapr
02:07:40 * musasabi saw it 
02:07:57 <shapr> I just realized that _|_ is a very funny colloquialism for ass/butt/etc on #haskell
02:08:04 * shapr bangs his head
02:08:17 <shapr> that's a really bad joke
02:08:33 <vincenz> dons: Well thank you for the reference
02:08:46 <vincenz> I have winskels book
02:08:50 <vincenz> haven't started on it yet
02:08:56 <vincenz> And I got TAPL waiting at home
02:09:07 <shapr> tapl is great!
02:09:14 <vincenz> You know.... my pile always goes up and up
02:09:16 <vincenz> never down
02:09:28 <earthy> stop buying books for a while
02:09:28 <vincenz> :P
02:09:29 <shapr> vincenz: get poor, you end up with more books than money
02:09:32 <earthy> it helps. :P
02:09:38 <vincenz> earthy: not just books
02:09:40 <vincenz> papers
02:09:44 <vincenz> mostly papers
02:09:49 <vincenz> anyways
02:09:53 <vincenz> back to linear logic
02:09:57 <earthy> yeah? stop searching for/printing papers
02:10:02 <vincenz> I need to
02:10:03 <earthy> but do stuff yourself for a while
02:10:05 <vincenz> for my research
02:10:22 <earthy> ah, you're in the `gather more knowledge' phase
02:10:23 <vincenz> You need a background before you can start doing your own stuff
02:10:27 <vincenz> yes
02:10:34 <vincenz> I did 6 months of something completely different
02:10:37 <vincenz> so now.............
02:10:39 <earthy> point taken
02:10:39 <vincenz> I gotta read
02:10:50 <vincenz> basically anything related to separation logic
02:11:32 <shapr> Anyway, I was looking at the haskell.org apache logs, I don't think there's any info other than just downloads and page views.
02:11:46 <shapr> Unless someone has a weblog analyzer written in Haskell?
02:12:06 <vincenz> harper doesn't look too complicated
02:12:11 <vincenz> I think I can read it tonight after work
02:12:38 <vincenz> heh...after trying to read up a bit on category theory...everything looks simple
02:13:05 <shapr> vincenz: so your experiment with FP languages has gone well so far?
02:13:24 <vincenz> hmm?
02:13:31 <vincenz> I haven't coded much of anything lately
02:13:41 <vincenz> my template library for fp in c++ still needs a template or two
02:13:49 <vincenz> but my professor told me I should concentrate on something else
02:13:53 <vincenz> so I'm gonna do model first
02:13:55 <vincenz> apply later
02:13:56 <shapr> Just that I remember trying very hard to persuade you to try Haskell on WardsWiki.
02:13:59 <vincenz> and if c++ bogs me down...
02:14:04 <vincenz> shapr: don't have the time
02:14:17 <shapr> At the time you weren't sure you wanted to try FP at all :-)
02:14:21 <vincenz> I looked at it... but until I got something to code
02:14:23 <vincenz> yip
02:14:26 <vincenz> Now I know ocaml ;)
02:14:33 <shapr> so, successful experiment?
02:14:39 <vincenz> but haskell is a nice channel to chat about CS
02:15:39 <vincenz> anyways... model first... pracitce later... if c++ bogs me down I might decide to use ocaml or haskell
02:15:50 <vincenz> tho it might ruin some of my credibility in my world :/
02:16:01 * shapr blinks
02:16:10 <shapr> Have you read the Alan Kay interview on ACM Queue?
02:16:18 <vincenz> no
02:16:25 <vincenz> and sadly  we don't have acm accounts
02:16:27 <vincenz> only IEEE
02:16:29 <shapr> it's free
02:16:34 <vincenz> not for papers
02:16:48 <shapr> http://lambda-the-ultimate.org/node/view/531
02:17:01 <shapr> you can just click on the link there.
02:17:25 <vincenz> why should I read it?
02:17:46 <shapr> I think it might relate to losing credibility.
02:18:06 <shapr> But maybe not terribly important if you don't like the sort of stuff Alan Kay does.
02:18:25 <vincenz> in MY world
02:18:26 <vincenz> anyways
02:18:38 <vincenz> don't have time to read it now
02:18:41 <shapr> ok
02:18:41 <vincenz> too much to read already
02:19:09 * vincenz is not doing his PhD at a university but an institute, a micro-electronical institute, not CS...
02:19:12 <Lemmih> Good morning, #haskell.
02:19:18 <glimming> anyone have a little script, sed or haskell, that inserts > in front of all lines?
02:19:31 <vincenz> glimming: vim
02:19:32 <shapr> y0 Lemmih
02:19:39 <Lemmih> shapr: How's code?
02:19:41 <glimming> vincenz:: how?
02:20:04 <shapr> Lemmih: not too bad, my Python is shaping up nicely. Not much Haskell written lately, but lots read as TMR editor.
02:20:16 <shapr> How's code for you?
02:20:39 <earthy> glimming: sed -e 's/^/>/'
02:21:25 <glimming> earthy: what does ^ mean?
02:21:37 <earthy> start-of-line
02:22:47 <Lemmih> shapr: Bad /-: I've halted my Hacanon development because of a missing feature in gccxml (which I use to parse C++).
02:23:06 <shapr> that sucks
02:23:07 <Lemmih> But on the other hand, now I got time to do some paying work for a change (:
02:23:14 <shapr> that's good
02:23:29 <glimming> earthy: thought so, thanks.
02:25:32 <kyemane> hey Glimming
02:25:35 <glimming> anybody written a double linked list in Haskell?
02:25:37 <kyemane> or is it glimmer
02:25:39 <glimming> Hi Kidane!!!
02:25:42 <glimming> glimming...
02:26:16 <det> glimming: Why do you need that?
02:26:26 <glimming> more effective to do bidrectional traversal
02:26:35 <glimming> (anyone have an example of that?)
02:26:53 <glimming> (think of zipper, but concrete examples where it makes an algorithm more effectent?)
02:26:56 <earthy> umm... why do you need that?
02:27:22 <earthy> you can always just construct the list in reverse as a side effect of traversing...
02:27:37 <vincenz> anyone good on linear logic?
02:27:40 <glimming> well...
02:27:51 <glimming> I am asking if it is useful I guess
02:27:57 <glimming> what is the motivation for zipper?
02:28:04 <earthy> vincenz: that's the stuff where you only use a bound identifier once, right?
02:28:10 <vincenz> no
02:28:24 <earthy> then what again? :)
02:28:25 <vincenz> where you remove the rules of contraction and weakening
02:28:38 <vincenz> you get multiplicative and and additive and
02:28:38 <det> earthy: no K or W :)
02:28:40 <earthy> `ah'
02:28:47 <earthy> ;)
02:28:47 <vincenz> just curious about it
02:28:53 <earthy> well, I heard about it
02:29:00 <vincenz> specifically
02:29:13 <vincenz> I'd assume that for the additive one... the multiplicative stuff holds too
02:29:15 <vincenz> but not viceversa
02:29:19 <det> glimming: I thought you had a specifc problem in mind
02:29:21 <earthy> hm.
02:29:23 <earthy> dunno
02:29:28 <vincenz> (i have a good example why not viceversa.... separation logic)
02:29:30 <glimming> det: no
02:29:34 <earthy> logic is not really my cup of tea
02:29:40 <vincenz> :/
02:29:42 <glimming> det: I only have a solution...
02:29:49 <vincenz> and yet another book to buy
02:29:51 <det> earthy: Irish Breakfast is?
02:30:07 <glimming> det: + intuitition
02:30:21 <det> glimming: ahh, trying to figure ou the usefulness of a technique?
02:30:32 <glimming> yes
02:31:20 <det> I suppose there are instances where it is useful for a tree to know about its parent
02:31:42 <glimming> Exactly.
02:31:45 <glimming> Or for graph algorithms.
02:31:52 <glimming> Where you need global access.
02:32:04 <glimming> In general problems that do not have a clear hierarchical structure.
02:32:18 <glimming> I am not sure which though
02:32:23 <glimming> Since I am not the best on algorithms.
02:32:58 <glimming> m aybe
02:33:00 <wli> Fortran pointers can help a little
02:33:07 <glimming> huh??
02:33:15 <glimming> wli: Fortran?
02:33:17 <wli> Fortrain pointers == array indices used as pointers
02:33:28 <glimming> wli: how help?
02:33:50 <wli> if you have to have a doubly-linked list you can use the mutable array stuff to do Fortran pointers
02:34:19 <glimming> neat
02:34:51 <wli> I've never had a reason to do it. I generally fall back to another language when faced with such a problem.
02:35:37 <wnoise> That's silly.  Haskell is the best imperative language.
02:36:53 <wli> Could be. I'd rather just go to where it's the native idiom than tackle the awkward squad.
02:39:45 <wli> "I speak Spanish to God, French to women, Italian to men, and German to my horse."
02:40:07 * vincenz grins at wli
02:40:11 <wli> Choose the mode of expression most convenient for the problem at hand. =)
02:40:20 <vincenz> I like the expression "Dont use a hammer to screw a nail"
02:40:29 <vincenz> or just
02:40:33 <vincenz> "Dont use a hammer to screw"
02:40:58 <vincenz> One nice thing of knowing many languages is that at times you can bring the different approach into a language
02:41:01 <wli> I like Charles V's quote or whoever's it was (network suckage).
02:41:09 <vincenz> by learning FP I think much more in terms of subproblems and recursion
02:41:20 <vincenz> that's how in C I made a xml-validator using recursion
02:41:47 <wli> I'll put it this way. When it comes time to bit twiddle and modify memory, I speak German to my horse.
02:42:23 <det> wnoise: A comedian
02:43:47 <wli> heh
02:43:54 <wli> It's French to men and Italian to women
02:44:03 <wli> and it is indeed Charles V
02:45:13 <wli> and Italian comes first
02:45:23 <vincenz> italian to men as well
02:45:26 <vincenz> no language like italian to curse in
02:45:28 <vincenz> ;)
02:45:44 <wli> I thought Arabic had the best curses.
02:46:46 <mflux> and I thought it was tough to top Finland's PERKELE said with proper tone :-(
02:47:41 <vincenz> right
02:47:42 <vincenz> so
02:47:45 <vincenz> F |- x
02:47:51 <vincenz> x holds when F holds
02:47:52 <vincenz> now
02:47:54 <vincenz> |=
02:47:55 <vincenz> ??
02:48:48 <shapr> environment?
02:49:09 <shapr> these symbols you describe sound a lot like the ones introduced in TaPL (The Brick Book)
02:49:14 <vincenz> nope
02:49:24 <vincenz> well yes
02:49:27 <vincenz> but this is logic
02:50:22 <dons> sorry shapr. disappeared for dinner. is simon just looking for suggestions on how to best gather download stats?
02:50:49 <wli> Perhaps a modern update would be "I speak Hindi to my bosses, Greek to my students, Arabic to my government, and Japanese on the phone."
02:53:08 * vincenz afks to lunch
02:53:19 <jlouis> vincenz: the distinction is very subtle. F |- x normally means that under the assumptions of F, x holds. |= means the same, but the system is different.
02:53:43 <jlouis> So in fact you need to show that |- ==> |= and |= ==> |-
02:53:54 <jlouis> then you can exchange one for the other
02:54:40 <dons> jlouis: sent out a ghc -6.2.2 port update a few hours ago to some other @openbsd.org guys. so you should have ghci soon (and darcs)
02:54:50 <jlouis> dons: cool!
02:55:06 <jlouis> I am holding back on my noweb, mlton and moscowml port until sometime after release
02:55:30 <wli> ghci on what platform(s)?
02:55:37 <dons> oh, huh. i've got a half-done noweb port, and an mlton port. I needed this for c--
02:55:55 <dons> openbsd/i386 for now. sparc soon.
02:56:15 <dons> can't do amd64 without a lot of work.
02:56:25 <jlouis> dons: how would you let noweb texhash(1) after installation?
02:56:35 <jlouis> that is the only thing I miss on it
02:57:11 <dons> don't think I got that far.. and it wasn't mlton, it was polyml, for some reason.
02:57:39 <dons> oh, polyml was for isabelle
02:57:42 <jlouis> dons: I can send what I have, if you need it
02:58:17 <dons> I won't get a chance to work on it for a while, I think. but I'll let you know if I clear the backlog of haskell ports I need to do.
02:58:30 <jlouis> ok
02:59:10 <dons> regarding texhash, can't you just put an @exec line in the PLIST?
02:59:38 <jlouis> dons: A good idea
02:59:49 <dons> for example, to call ghc-pkg after installing a haskell lib: @exec /bin/cat %D/lib/hs-crypto/package.conf.in | /usr/bin/env PREFIX=%D %D/bin/ghc-pkg -u
03:00:17 <dons> there's a few pre-defined vars you get, like %D for /usr/local
03:00:37 <jlouis> mmm
03:02:52 <wnoise> det: not original to me.  Came from one of the Simons, IIRC.
03:07:17 <Lemmih> lambdabot: @index mplus
03:07:17 <lambdabot> Control.Monad,Control.Monad.Cont,Control.Monad.Error,Control.Monad.Identity
03:07:17 <lambdabot> Control.Monad.List,Control.Monad.RWS,Control.Monad.Reader,Control.Monad
03:07:17 <lambdabot> State,Control.Monad.Writer,Monad
03:12:25 <dons> scroogle.org is great
03:13:42 <dons> ah ha! got darcs-1.0.2 to pass all the regress tests on openbsd. damn overly versbose output
03:17:48 <tuomov> there aren't too many ads on google if you browser from .fi and such
03:17:54 <tuomov> -r
03:18:18 <dons> tuomov: ah. good idea
03:18:39 <dons> so what will you do now, post-ion?
03:20:58 <tuomov> I don't know.. it isn't post-ion yet
03:21:08 <tuomov> riot needs some improvements
03:22:32 <tuomov> at the speed things are progressing atm, it will take until the autumn for ion3 to be released
03:24:13 <dons> autumn in the northern hemisphere, I guess :}
03:24:32 <tuomov> yes :)
03:28:54 <dons> btw, Stefan Heimann who I think did some riot hacking is coming down to .au to do his thesis with my supervisor. so maybe we can get some more riot hacking done.
03:29:18 <dons> some of the dynamic stuff in yi could be ported across
03:30:23 <tuomov> or maybe riot should just be mode in yi :)
03:30:35 <dons> or that. hehe
03:30:55 <dons> he ripped out the curses lib quite nicely, and made it into a standalone package
03:31:04 <tuomov> nice
03:45:38 <musasabi> Should free generally be imported as safe or unsafe?
03:46:07 <Lemmih> unsafe is just fine.
03:46:14 <dons> hmm. free(3)?
03:46:25 <musasabi> yes.
03:46:32 <dons> it's in imported in the Foreign.* libs, so I'll check there
03:46:36 <Lemmih> You don't need the rts in a usable state.
03:46:51 <musasabi> Lemmih: I am more conserned with blocking.
03:47:03 <dons> foreign import ccall unsafe "stdlib.h free"    _free    :: Ptr a -> IO ()
03:47:55 <dons> interesting discussions in Foreign.Marshal, maybe useful
03:48:09 <dons> Foreign.Marshal.Alloc.hs I mean
03:48:43 * musasabi goes to read that
03:49:28 <dons> though nothing about concurrency
03:50:00 <dons> night.
04:06:01 <glimming> What happens to | (bar) in lhs2TeX ??
04:06:14 <glimming> I got errors when using guards and coproducts in data
04:08:51 <kyemane> glim: what does your error looks like?
04:10:01 <glimming> *** Error in file ./test.lhs line 1:
04:10:01 <glimming> included from file ./book.tex line 11
04:10:02 <glimming> matching `|' not found
04:10:02 <glimming> | Place (Direc Object f)
04:11:21 <kyemane> Do you have any way to determine the kind of function you can define in  Object?
04:11:50 <glimming> Kidane, what are you talking about? ;-)
04:12:42 <kyemane> I'm functions that preserve certain equivalence
04:12:52 <kyemane> I'm = I mean
04:14:39 <glimming> later
04:26:38 <jadrian> are there some standard methods for dealing with equivalence classes in haskell?
04:29:49 <jadrian> that is, I need some way to store sets of elemens that define an equivalence relation
04:31:16 <jadrian> and when adding a new set [x1,..xn], I'll be merging it the eq class of x1 ... xn, if they already exist
04:31:32 <glimming> a biI am off to Stockholm in a bit, but ytoou ned a quotient construction in haskell, i know
04:31:39 <glimming> So you want to represent a relation on types?
04:31:46 <jadrian> nope
04:31:49 <glimming> I think you are better of in Generic Haskell.
04:31:51 <jadrian> nothing to do with types...
04:32:00 <jadrian> it's a simple container
04:32:04 <glimming> aha
04:32:04 <jadrian> an example would be
04:32:06 <glimming> I am off.
04:32:06 <glimming> sorry
04:32:22 <glimming> Soon
04:32:24 <glimming> But I bet Kidane's goal is quotients.
04:32:28 <glimming> kyemane: true?
04:32:38 <jadrian> [[1,5], [4,7,9], [2,3]]  <- eq relation
04:32:41 <kyemane> doesn't matter
04:32:42 <glimming> You probably need some sort of representation type.
04:32:46 <glimming> for types.
04:32:48 <glimming> a type of types.
04:32:56 <glimming> What are you doing then?
04:32:57 <glimming> A relation?
04:32:58 <jadrian> if I add  [5,4,8] I should get
04:33:07 <glimming> ok. gotta go
04:33:10 <glimming> bye
04:33:11 <jadrian> [[1,4,5,4,7,8,9], [2,3]]  <- eq relation
04:33:42 * Lemmih is oh so very tempted to use Haskell in a C project.
04:34:52 <jadrian> Lemmih: you can do it, just compile it with -C afterwards...
04:35:09 <jadrian> Lemmih: you won't get bonus points for clear code though :)
04:36:17 <dons> you can use hsinc for this very purpose ... hehe
04:36:45 <dons> though i haven't tested it recently
04:36:49 <Lemmih> jadrian: I know how to call Haskell code from C (: But I'm not interested in adding another dependency to the project since I'm not its leader.
04:37:27 <dons> but dependencies on ghc are fun and easy :}
04:37:31 <dons> :P
04:37:55 <Lemmih> This guy is generating xml with lots of fprintf's /-:
04:38:06 <dons> argh!
04:38:39 <Lemmih> Yes, it's horrible (:
04:38:59 <dons> oh well, at least with strings you don't get type errors. unlike those pesky data types you'd use in a haskell project
04:40:29 <dons> imagine haskell with just a scalar and list type.. like perl. hmm...
04:40:35 <dons> what a strange world that would be
04:42:34 <Lemmih> Calling Haskell from C is actually very clean and neat.
04:42:47 <Lemmih> Maybe I should fork the project.
04:43:17 <dons> he. yeah, we do have the greatest ffi in the world, I think
04:44:44 <Lemmih> How's Yi, btw?
04:45:48 * jadrian wonders if this is not a common data structure... :-/
04:45:58 <jadrian> not even edison seems to include anything like it...
04:46:19 <dons> Lemmih: i've got a syntax hl model ready to push in to it, but i'm side tracked on uni work atm
04:46:31 * samc_ doesn't imagine it would be
04:46:46 <jadrian> nor Lapalm algorithms book...
04:47:36 <jadrian> right now my best shot seems to associate each eq class with an Int and store it in a finite map
04:48:23 <jadrian> and store each of the elements of those sets in another finite map, with the number of their eq class associated...
04:50:10 <jadrian> so for adding say [1,5,7] I'd look up the eq class numbers for 1,5,7,  merge them in the finite map, and change the eq class numbers for the elem of the merged eq classes...
04:50:21 <jadrian> not great :-/
04:51:41 * jadrian keeps missing pointers!!
04:52:09 <Lemmih> Pointers is all you got in Haskell (:
04:52:19 <jadrian> eh
04:53:31 <jadrian> I still feel lost whenever I have to deal with algorithms that would data structures with shared data :-/
04:54:02 <jadrian> brb
04:54:43 <Lemmih> I think you miss the ability to mutate data.
04:59:30 <marcot> I'm trying to compile green-card generated code with ghc, but I always have the same error message:
05:00:12 <marcot> teste.hs: 5: parse error on input ``'
05:00:25 <marcot> where teste.hs is:
05:01:06 <marcot> printBang :: IO ()
05:01:12 <marcot> printBrang =
05:01:54 <marcot>   _casm_ = ``do { ...
05:02:14 <marcot> What parameters should I pass to ghc so that it can compile this file?
05:02:24 <jadrian> Lemmih: yeap
05:02:30 <jadrian> Lemmih: kind of
05:02:59 <jadrian> Lemmih: that is, yes that is the problem, but I don't want to be able to mutate data.
05:03:11 <jadrian> Lemmih: I just want to find nice ways around it
05:03:20 <jadrian> Lemmih: nice purely functional algorithms
05:04:00 <jadrian> and I still have trouble doing it for many algorithms...
05:04:11 <jadrian> this is one of them
05:04:41 <jadrian> most of the time I just end up using finite maps for indexing stuff...
05:04:53 <jadrian> wihch is not a great solution
05:07:13 <samc_> jadrian, I hope your not disobeying the cardinal rule: make it work then make it fast :)
05:51:07 * shapr hops cheerfully
05:52:11 <Lemmih> Greetings, shapr.
05:52:16 <shapr> hiya Lemmih
05:53:06 <shapr> I'm enjoying the ThingToAvoid discussion.
05:55:28 <shapr> I saw an efficient implementation of atLeast somewhere, does anyone remember where?
05:55:30 <Lemmih> I'm hacking other peoples C code );
05:55:40 <shapr> better than no hacking at all.
05:56:25 <samc_> what discussion is that?
05:56:45 <shapr> it's half on the wiki, half on haskell-cafe
05:57:38 <shapr> on haskell-cafe its the thread "Things to avoid (Was: Top 20 ``things'' to know in Haskell)"
05:58:11 <shapr> it's*
05:58:11 <TheHunter> hehe, shapr what do you think?
05:58:24 <TheHunter> arrrgggh! s/postfix/prefix/
05:58:33 <shapr> hm?
05:59:05 <shapr> You mean, what do I think about the discussion?
05:59:06 <TheHunter> that happened somewhere in my cafe post
05:59:16 <TheHunter> shapr, yep.
05:59:50 <shapr> Well, I think that reinventing the wheel is great the first time around.
05:59:56 <shapr> same for recursion
06:00:15 <marcot> Can anyonem please help me with green-card, or any other C - Haskell interface?
06:00:22 <shapr> I can't stand n+k patterns.
06:00:24 <TheHunter> good point, i haven't thought about it that way.
06:00:36 <Lemmih> marcot: Are you using the stable distribution of GC?
06:00:53 <marcot> Lemmih: yes.
06:01:01 <marcot> 2.05
06:01:26 <Lemmih> Try 3.01
06:01:26 <marcot> it's stable, isn't it?
06:01:36 <shapr> TheHunter: For me, I wrote all the code myself at first, and then I realized that the Prelude functions are distillations of the essence of traversals. Or something like that.
06:01:37 <TheHunter> i can't say i use n+k patterns frequently, they're really a minor issue, but they're useful anyway.
06:01:39 <marcot> Lemmih: I can't compile both.
06:01:53 <Lemmih> marcot: GHC version?
06:02:09 <Lemmih> marcot: It's from June 2003 so it's kinda old.
06:02:28 <marcot> 6.2.2
06:02:48 <marcot> In both versions I have the same error message:
06:02:58 <araujo> Good morning.
06:03:17 <shapr> Once you understand recursion and you've invented a bunch of wheels, it's best to notice that higher order functions are way better.
06:03:29 <marcot> unrecognized flag: -fnoprune-tydecls
06:03:44 <marcot> -fno-prune-tydcls
06:03:44 <Lemmih> marcot: Oh yeah. Throw that flag away (:
06:04:11 <shapr> Anyway, there really are better wheels to be found.
06:04:51 <shapr> Look at Cale's swing function for example, that's a very general purpose combinator that I haven't seen before.
06:05:19 <TheHunter> that thing is kinda scary.
06:05:37 <shapr> Past that, the page is a good collection of high quality advice on writing Haskell.
06:06:34 <shapr> I added a line to the "don't use length unless you really mean it" section
06:06:49 <shapr> I have some code around here somewhere that implements a nice atLeast function, but I can't seem to find it.
06:06:49 <TheHunter> it's obviously aimed at newbies.
06:07:14 <shapr> Maybe the best thing for newbies is a copy of lapalme and rabhi's FP Algorithms book.
06:08:52 <shapr> Maybe I should email Henning Thielemann and ask him for a TMR issue 2 article on things to avoid and why.
06:09:26 <shapr> TheHunter: would you be interested in  writing something for TMR?
06:09:45 <samc_> what's wrong with n+k patterns?
06:09:53 <TheHunter> shapr, sure if i find something interesting.
06:10:16 <shapr> Do you have any possible interesting somethings in mind?
06:10:28 <TheHunter> i played around with split implicit parameters yesterday, but they didn't do what i wanted them to do.
06:10:42 <shapr> samc_: personally, I think (n+k) patterns are difficult to read. But that could be just me.
06:11:03 <Lemmih> marcot: How's it going?
06:11:23 <TheHunter> samc_, the classical argumentation against them involves some obscure ambiguties.
06:11:36 <samc_> I see
06:11:37 <TheHunter> for example (n + 1) = 2
06:11:48 <TheHunter> and n + 1 = 2 have different meanings
06:12:54 <araujo> anyone working with 6.4_20050208 ?
06:13:07 <TheHunter> but if you write n + 1 = 2 ghc fires enough warnings at you that you know there's something wrong.
06:13:26 <Lemmih> I'm compiling 20050209 right now.
06:13:56 <araujo> Lemmih, for some reason i don't get it to work
06:14:03 <shapr> I wish Haskell had postfix ops as well.
06:14:06 <araujo> c2hs problems also
06:14:30 <TheHunter> shapr, i thought maybe something about "monadic algebraic data types", but then again, i'm kinda scared by the high standard of the haskell community.
06:15:26 <shapr> You have to start somewhere. TMR is a good place to do that. Also, the TMR editor tries to be helpful.
06:15:52 <shapr> oh, dons is asleep
06:15:54 <Lemmih> araujo: You couldn't compile it?
06:16:14 <samc_> I recall Dijkstra warning against mixing pre and postfix operators (in mathematics), I can't recall why
06:17:00 <araujo> Lemmih, yes, i could, with a sed hack by the way for make html
06:17:28 <araujo> Lemmih, it compiles smoothly, but now im chacking the mailing list, i see someone else is having the same problem i am, http://www.haskell.org/pipermail/glasgow-haskell-users/2005-February/007798.html
06:17:41 <araujo> s/chacking/checking
06:18:35 <shapr> kyemane: what writing is that on your homepage?
06:20:25 <araujo> Lemmih, See also http://www.haskell.org/pipermail/glasgow-haskell-users/2005-February/007799.html
06:22:10 <shapr> Aha, gucharmap turns up Ethiopic. Nifty!
06:25:43 <musasabi> How would I wrap a C function which returns a linked list of results?
06:25:52 <shapr> yay, 6.4 release candidates! w00!
06:27:46 <samc_> does this function (\(a:b:c) -> b:a:c) have a name?
06:28:22 <shapr> swap?
06:28:54 <samc_> that's what I'm currently calling it
06:29:01 <shapr> At least, the concatenative languages use that to swap the top two items on the stack.
06:29:20 <samc_> yes, I have used forth/ps
06:30:04 <samc_> so I am happy with swap, but I didn't know about others
06:30:44 * shapr stabs emacs with a rusty spoon
06:31:16 <shapr> Gnu emacs has been terribly unstable, I should have stuck with xemacs.
06:31:52 * shapr looks forward to syntax highlighting in Yi
06:31:59 <samc_> although in ps it's exch (yuck)
06:32:06 <samc_> ooh, ooh, me too
06:35:14 <araujo> Lemmih, around?
06:35:19 <araujo> It is apparently fixed now.
06:37:45 <Lemmih> Great.
06:38:42 <Igloo> swap is normally \(x, y) -> (y, x) isn't it?
06:43:26 <samc_> I was wondering that
06:46:39 * tmoertel needs tea
06:46:56 * shapr needs ess
06:47:27 <tmoertel> shapr: get it here: http://community.moertel.com/ss/space/RPMs  ;-)
06:47:49 <shapr> wow, cool
06:48:01 <tmoertel> ESS = Emacs Speaks Statistics
06:48:04 <shapr> Hey, you have any thoughts on spoken programming?
06:48:24 <tmoertel> it's not *that* kind of speaking  :)
06:48:38 <tmoertel> in this case speaks = groks
06:48:53 <shapr> oh, I see
06:49:35 <tmoertel> shapr: what are you working on these days?
06:50:46 <shapr> EU Project websites, The Monad.Reader, Yi, curryspondence, and trying to hammer out my ideas on spoken programming.
06:51:17 <shapr> What about you?
06:51:41 <tmoertel> mostly work for my clients keeps me busy
06:52:02 <tmoertel> in my (scant) free time, I have been hacking on things like http://community.moertel.com/ss/space/LectroTest
06:52:17 <shapr> ah cool!
06:52:39 <shapr> You know there are Python, CLisp, and Erlang versions too?
06:52:54 <tmoertel> Yep. And at least two Scheme versions.
06:53:19 <shapr> I keep trying to hammer this sort of testing into the Python community, but no luck so far.
06:53:20 <tmoertel> If I start doing Ruby work, I'll port over LectroTest.
06:53:32 <shapr> lovely logo
06:53:54 <shapr> oh hey, any thoughts on zero-button unit testing?
06:53:59 <tmoertel> Yeah, getting Perl folk to try spec-based testing is hard, but I have been having some modest luck at it on PerlMonks.
06:54:06 <shapr> Also, did you see my test-driven-dev code for QuickCheck?
06:54:09 * tmoertel laughs about the logo
06:54:27 <tmoertel> shapr: no, I didn't see you TDD code. where be it?
06:54:36 * tmoertel guesses scannedinavian?
06:54:44 <shapr> I finally got a response from Koen about QuickCheck2, he said it's going to be delayed quite a bit longer :-(
06:54:59 * tmoertel is saddened
06:54:59 <xerox> 'noon
06:55:12 <shapr> So I guess I'm going to give up on QC2 and distribute my TDD additions myself once they're a bit cleaner.
06:55:26 <tmoertel> shapr: do you know what is planned for QC2?
06:55:32 <shapr> Only vaguely
06:55:46 <shapr> I wish Koen would just throw out a release candidate
06:56:02 <tmoertel> QC2 now with randomized refactoring theorem proving!
06:56:18 <shapr> Actually, have you seen Debug.QuickCheck.Utils?
06:56:19 <samc_> I saw an interesting concept a few days ago, a search engine for algorithms, queried by io examples
06:56:27 <shapr> samc_: oh that's neat
06:57:21 <samc_> here it is http://cgi.cs.arizona.edu:8080/algovista/servlet/algovista
06:57:33 <shapr> My TDD code just hangs onto the seed/size pair and if a generated value fails the test, it's first in line in the next test run.
06:58:02 <shapr> Sounds simple, but the hard part is associating a seed/size pair with the right .hs file, and the right function.
06:58:44 <tmoertel> so it builds up your set of segression tests automagically?
06:58:54 <tmoertel> s/segression/set of regression/
06:58:59 <shapr> right
06:59:12 <Itkovian> I'm off ttyl
07:00:40 <shapr> I cheated by depending on the quickcheck script, it looks for prop_* in the sources. Since it knows the names of function and file, a failing pair is dumped into a standard name (fail.qc, I think) and the qc script renames it to $file.qc
07:00:59 <shapr> Can you think of a better or easier way to associate failed values with file and function?
07:02:04 <tmoertel> i think that your approach is pretty good
07:02:28 <shapr> lemme put the darcs repo online
07:02:32 <tmoertel> if you are not already doing it, you might want to run some preflight checks to make sure that you do not accidentally clobber an existing user-created file
07:03:07 <shapr> preflight checks import an existing file, that's how you get failed tests to run ahead of time.
07:04:11 <shapr> One flaw is that only seeds are saved, so if you change generators, you lose the data.
07:04:43 <tmoertel> that is a reasonable limitation, imho
07:05:07 <shapr> There's no good fix for that. QC can generate functions from seeds, but I don't think you can save those generated functions as values.
07:05:26 <shapr> On the other hand, it would be really nice to see the failing value so you have some idea of what broke.
07:07:31 <shapr> http://www.scannedinavian.org/~shae/tdd-qc.tar.gz
07:07:52 <shapr> If you come up with any improvements, I'm very interested.
07:08:07 <shapr> I'll put up a real darcs repo for that soon.
07:08:37 * tmoertel looks at README
07:10:25 <jadrian> samc_: nah, I'm not disobeying that rule, making it work is easy...
07:10:29 <shapr> That ghci file should familiar :-)
07:12:59 <shapr> tmoertel: any ideas for improvement?
07:15:09 <tmoertel> shapr: not that I can see right now
07:15:14 <shapr> Oh, I got an update FpVsOo article from Alistair Bayley, this'll be great.
07:15:21 <shapr> ok, if you think of something...
07:21:26 <shapr> I've been thinking of using spare bits of cpu power for 'trickle improvements', like using spare cycles to do gzip -9 on all .gz files. Are there other obvious candidates for trickle improvements?
07:21:40 <vincenz> ?
07:22:41 <shapr> I'm trying to think of useful tasks your computer could do in its spare time.
07:23:51 <shapr> Some obvious things would be running some maintenance cron jobs early, like doing updatedb every twelve hours if your computer has the spare cycles.
07:24:31 <mflux> you could run a document indexer
07:24:49 <mflux> and bz2 -9 could be slightly more useful than gzip -9
07:24:53 <mflux> and consumes more cpu ;)
07:25:03 <mflux> (much more, if you don't have plenty of cache)
07:25:39 <shapr> yeah, good point
07:26:07 <tuomov> but you want .gz to remain .gz
07:27:17 <det> shapr: You're too good to help find ET?
07:27:39 <shapr> No, ET is good enough to find me.
07:27:57 <vincenz> wtf do you care about sparecycles?
07:27:57 <tuomov> my computer makes too much noises if it tries to find ETs
07:28:23 <shapr> I'd like to find ways of feeding spare cycles back into making my own setup better.
07:28:37 <det> shapr: defrag? :)
07:28:43 <tuomov> turbocharger...
07:30:01 <shapr> vincenz: for the same reason you use OCaml? ;-)
07:30:24 <det> shapr: That is different :)
07:30:45 <Lemmih> marcot: Did you get GC working?
07:31:05 <shapr> det: actually, defrag is a good point.
07:31:58 <shapr> I could calculate whether less space would be used on my partitions if the cluster size were different.
07:32:02 <marcot> Lemmih: no...
07:32:08 <marcot> Same error message on hugs.
07:32:44 <marcot> sorry..
07:32:58 <marcot> parse error on input: ``'
07:33:28 <marcot> Isn't ghc suposed to deal with this `` thing?
07:34:01 <Igloo> That's old FFI syntax isn't it?
07:34:16 <Igloo> Are you using the latest GC?
07:34:18 <det> shapr: Add Genetic algorithms to GHC and let it evolve your program while idle!
07:34:19 <marcot> I think it is.
07:34:28 <marcot> But that's what GC is generating for me.
07:34:33 <marcot> 3.00
07:34:43 <marcot> I'll try it with c2hs
07:34:50 <marcot> It seems to be newer.
07:34:55 <shapr> det: hm, cool idea.
07:35:05 <Lemmih> marcot: So you _did_ install it?
07:35:14 <marcot> Lemmih: now I did.
07:35:48 <shapr> Igloo: if I ran my program in ghc --make, is there some way I could get TH to try various optimization settings when building?
07:36:10 <shapr> Could that give a hackish HotSpot RTS?
07:36:37 <Igloo> Not short of forking off child GHC processes yourself
07:36:39 <shapr> Hm, I guess it'd have to be able to do profiling at runtime too.
07:36:55 <shapr> Can I inject pragmas with TH?
07:37:10 <Igloo> Don't think so
07:37:36 <shapr> too bad, that would make a fun TMR article.
07:38:11 <marcot> And I'm having a problem compiling c2hs
07:39:07 <marcot> It's saying:
07:39:28 <marcot> Unsupported Haskell Compiler `ghc6' specified!
07:39:43 <marcot> ???
07:39:56 <marcot> Which one is supported then?
07:40:27 <Igloo> I'd guess it doesn't know ghc6 == ghc
07:41:58 <marcot> in debian, c2hs deppends ghc5!
07:42:56 <Lemmih> marcot: What are you trying to write?
07:44:26 <marcot> Lemmih: I'm trying to write a haskell port for gpc.
07:44:35 <shapr> gpc?
07:44:46 <marcot> http://www.cs.man.ac.uk/aig/staff/alan/software//index.html
07:45:03 <shapr> oh, interesting.
07:45:45 <marcot> but the problem is getting gc to work... I'll try with c2hs now.
07:48:21 * shapr laughs at the web statistics for haskell.org
07:48:37 <Lemmih> shapr: url?
07:48:48 <shapr> er, they're in my /tmp dir at the moment.
07:49:16 <Lemmih> paste?
07:49:33 <shapr> 65 google searches for 'deforestration' that got to haskell.org. 93 for 'ice cream cake'
07:49:42 <shapr> 161 for 'c enum'
07:50:05 <marcot> it seems to be compiling good now, the problem was only trying to compile in cygwin.
07:53:23 <Lemmih> hah http://haskell.cs.yale.edu/jcp/jay/IceCreamCake.html
07:54:40 <desrt> mmm.
07:54:51 <shapr> isn't it deforestation with only one r?
08:00:08 * shapr yawns
08:00:21 <shapr> Greetings Agent John.
08:00:41 <CosmicRay> morning shapr
08:00:44 <CosmicRay> thanks for your comments
08:01:24 <shapr> Wasn't much to say, that's a very solid article.
08:01:53 <CosmicRay> I think I get to return the favor.  SyntaxNinja asked me to look over his cabal doc. :-)
08:02:09 <shapr> cool :-)
08:02:31 <CosmicRay> that's the true free software way.  you return a favor by helping out someone else :-)
08:02:39 <shapr> truly
08:02:57 <shapr> Hey did you get a rough website structure?
08:03:14 <CosmicRay> not yet, I haven't had chance to look at the tools yet
08:03:20 <shapr> ok
08:03:30 <CosmicRay> but if wash does indeed support session tracking, I may just wind up using it, despite my concerns
08:03:38 <CosmicRay> I will have to have something better than cgi though.
08:03:46 <CosmicRay> I can't afford to re-conect to the database on each hit
08:06:29 <Lemmih> CosmicRay: I hacked up a Haskell module for Apache some time ago.
08:06:42 <CosmicRay> sweet
08:06:44 <CosmicRay> does it still work?
08:07:15 <Lemmih> Yes it works (using hs-plugins to load haskell module at runtime) but it has some problems.
08:10:03 <Lemmih> http://www.scannedinavian.org/repos/modhaskell/
08:10:11 <shapr> What're some of the best apache log analyzers/reporters?
08:12:28 <Igloo> analog is the canonical one I think
08:18:56 <marcot> Ok, now c2hs is woking fine for me.
08:19:21 <marcot> The only problem is something like, how can I convert a haskell list to a C vector?
08:21:23 <marcot> In gpc I have the structure: typedef struct { int                 num_vertices; gpc_vertex         *vertex; } gpc_vertex_list;
08:21:53 <marcot> How can I make a function that make a haskell list of gpc_vertex be a gpc_vertex_list?
08:23:49 <Lemmih> marcot: http://haskell.org/ghc/docs/latest/html/libraries/base/Foreign.Marshal.Array.html
08:24:48 <marcot> Lemmih: cool.
08:25:08 <araujo> mm...
08:25:51 <xerox> Is there ``xor'' in Haskell?
08:26:49 <jadrian> xerox: yes
08:26:54 <jadrian> xerox: /=
08:27:51 <marcot> Lemmih: )= these are all IO.
08:28:27 <xerox> jadrian, thanks.
08:36:18 <Lemmih> marcot: Yes of course.
08:37:09 <xerox> Is it possible to use pattern matching in anonymous functions?
08:37:44 <Lemmih> xerox: To a limited degree, yes.
08:41:22 <WilX> Hmmm.
08:41:36 <WilX> OT question: Is there any Forth language interpreter?
08:42:58 <xerox> WilX, I think so, a friend of mine did one in Haskell too. (It probably was a compiler..)
08:43:51 <WilX> Ah, I mistyped the name when I searched for it on google. That is why I got no sane results :)
08:43:57 <WilX> I typed "Fort" only.
08:50:20 <Cale> xerox: If you need full pattern matching in an anonymous function, you can use a case expression.
08:50:48 <xerox> Cale, I only needed [x,y], fine ;)
09:17:19 <kosmikus> araujo: I still got the same problem with "make html" on the ghc release candidate
09:17:43 <kosmikus> can anyone build ghc-6.4 html documentation with haddock?
09:19:00 <araujo> kosmikus, yeah, fixed with a sed hack
09:19:14 <araujo> kosmikus, morning
09:19:40 <kosmikus> what's the sed hack you do?
09:21:08 <araujo> kosmikus, sed -i "s:I/O:I\\\\/O:" ${S}/libraries/template-haskell/Language/Haskell/TH/Syntax.hs
09:21:31 <araujo> kosmikus, it worked fine with 20050208
09:21:38 <araujo> now im testing with 20050209
09:22:18 <WilX> lol, wtf?
09:22:40 <kosmikus> I find it surprising that no one else has complained about this yet
09:24:40 <araujo> kosmikus, yes.. well, there were some problems with 'make html' reported in the mailing list
09:24:48 <araujo> but i think it was a different issue
09:25:07 <kosmikus> yes
09:26:16 <araujo> kosmikus, 20050208 gives this problem http://www.haskell.org/pipermail/glasgow-haskell-users/2005-February/007798.html
09:26:33 <araujo> Apparently fixed now.
09:26:39 <kosmikus> yes, I've seen it
09:50:57 <ibid> #debian-devel
09:51:26 <xerox> Is there any :command to list instances of some class?
09:51:37 <ibid> oho, sorry :)
09:51:56 <Lemmih> xerox: Yes, :i or :info.
09:52:34 <xerox> Lemmih, I can't see how to use info for that purpose
09:53:07 <xerox> @info Bounded
09:53:09 <lambdabot> -- Bounded is a class
09:53:09 <lambdabot> class Bounded a where { maxBound :: a; minBound :: a; }
09:53:37 <Lemmih> xerox: Update your GHC version (: It's a new feature in GHC 6.4
09:53:55 <xerox> Uh uh!! I hope there is 6.4 for win32.
09:54:11 <tumm_> sweet
09:54:35 <xerox> Argh, no.
09:55:09 <Lemmih> xerox: GHC 6.4 isn't released yet /-:
09:55:11 <xerox> Lemmih, can you give me a sample output?
09:55:51 <Lemmih> instance Bounded CWchar         -- Imported from `Foreign.C.Types'
09:55:52 <Lemmih> instance Bounded CUShort        -- Imported from `Foreign.C.Types'
09:56:02 <Lemmih> [...]
09:57:54 <xerox> What does it mean: Prelude> maxBound :: Char  ==>  '\1114111'
09:58:17 <Binkley> \1114111 is the maximum value that something of type Char can have
09:58:35 <xerox> Okay, what is \1114111 ?
09:58:49 <Binkley> it doesn't mean anything in any character set AFAIK
09:58:55 <Binkley> but they're planning for the future, I guess :-D
09:58:59 <Lemmih> xerox: It's a character.
09:59:06 <xerox> Prelude> '\1114112'
09:59:06 <xerox> <interactive>:1: lexical error in string/character literal
09:59:42 <Lemmih> xerox: chr 1114111
10:00:04 <Lemmih> xerox: chr 1114112 => *** Exception: Prelude.chr: bad argument
10:00:16 <xerox> no ``chr'' here
10:00:23 <Binkley> you have to do :module +Char
10:00:50 <xerox> Rigt
10:00:58 <xerox> Right, even
10:26:55 <zipper> hello
10:27:53 <syntax_syntax> 'ello
10:28:09 <Lemmih> Greetings.
10:29:27 <zipper> having troubles doing simple haskell coding :(
10:29:34 <zipper> it's gonna take me a while to get used to haskell syntax
10:29:56 <zipper> i know what i want to write but i can't get it down :/
10:30:35 <Lemmih> Keyboard problems? (:
10:30:43 <zipper> :\
10:31:00 <zipper> is it ok to ask really newbie rtfm type questions here?
10:31:02 <Lemmih> Feel free to ask for out help.
10:31:09 <Lemmih> Sure.
10:31:29 <Lemmih> s/out/our/
10:31:54 <zipper> this is my second haskell program. my first one i wrote a few weeks ago and i've forgot most of the syntax since then
10:34:25 <zipper> No instance for (Floating Integer)
10:34:28 <zipper> what's that error mean?
10:35:09 <Lemmih> It means that you're trying to use an integer as a floating point.
10:35:32 <zipper> that makes sense, i'm using sqrt
10:36:02 <zipper> how do i convert to floating point?
10:36:07 <Lemmih> zipper: fromIntegral
10:36:19 <zipper> thanks
10:36:39 <Lemmih> No problem.
10:37:02 <xerox> I can't understand a thing in this Fibonacci definition: fib = 1 : 1 : [ a+b | (a,b) <- zip fib (tail fib) ]  What would return the first call to (tail fib)?
10:38:09 <mflux> I understand the definition, but not the question ;)
10:38:14 <zipper> hm... now another error:
10:38:15 <zipper> No instance for (Floating Integer)
10:38:36 <mflux> xerox, so I take it you understand what zip, the brackers and tail do?
10:39:19 <Lemmih> zipper: Sounds just like the first error.
10:39:20 <mflux> brackets even
10:39:29 <xerox> mflux, I understand what zip and the list comprehension do, I also understand how tail generally works, I think, but in this case it doesn't fit what I know
10:39:51 <zipper> Lemmih: hm... you are right! i guess i need to convert back the result from floating to integer. how do i do that?
10:39:55 <Oejet> @eval zip [1,2,3,4] [2,3,4,5]
10:39:57 <lambdabot> [<<EM Dynamic -> EM Dynamic>>, <<EM Dynamic -> EM Dynamic>>, <<EM Dynamic
10:39:57 <lambdabot> -> EM Dynamic>>, <<EM Dynamic -> EM Dynamic>>]
10:40:05 <Oejet> Doh.
10:40:05 <mflux> xerox, so the problem in your opinion is that 'tail' can't return anything because it's an infinitely recursive function?
10:40:14 <Lemmih> zipper: That depends on what you wanna do.
10:40:34 <zipper> Lemmih: i want to convert the result of sqrt function to Integer type
10:40:53 <zipper> hm... i think i want floor
10:41:12 <mflux> xerox, zip list (tail list) basically converts list [1, 2, 3, 4] into [(1, 2), (2, 3), (3, 4)]
10:41:15 <Lemmih> zipper: Checkout truncate, round, ceiling and floor.
10:41:28 <xerox> mflux, the problem is that I think tail doesn't return the first 1, so.. how is 2 calculated? (the third Fibonacci number)
10:41:37 <zipper> thanks man
10:41:40 <zipper> or woman :)
10:42:01 <mflux> so the fib is a list for which the first two elements is defined
10:42:03 <xerox> mflux, oh! I think I got it.. let me see
10:42:10 <mflux> so the first element zip returns is [1, 1]
10:42:21 <jlouis> (1, 1)
10:42:26 <Lemmih> zipper: I think I'll always consider myself a boy (:
10:44:07 <zipper> so it turns out that this school teacher had sex with 3 16 year old boys... and from the looks of it this might have been one of my teachers
10:44:45 <xerox> http://patricklogan.blogspot.com/2005/02/language-evolution.html
10:47:08 <zipper> how can i get the minimum value in a list?
10:47:47 <Lemmih> @type minimum
10:47:49 <lambdabot> minimum :: forall a. (Ord a) => [a] -> a
10:47:58 <zipper> thanks! man you know everything boy
10:53:41 <zipper> what's that way to do "branching" without if? guards or something?
10:56:18 <Lemmih> Yes, pattern guards or case expressions.
10:56:56 <zipper> i don't think i can do pattern matching, i want to check if a number is > 5
10:57:37 <xerox> zipper x | x > 5 = "it is!" | otherwise = "it isnt :-("
11:24:13 <musasabi> gcc stack protection kills ghc :-(
11:24:43 <musasabi> "final link ... ghc-6.5.20050207: Sock_hsc.o: unhandled ELF relocation(Rel) type 10"
11:24:50 <syntax_syntax> damn, I wish the owners of ikipedia.org did the decent thing and redirected to wikipedia.
11:25:11 <Binkley> well, if they were decent, they wouldn't have bought that domain
11:26:20 <syntax_syntax> heh.
11:29:03 <musasabi> Is there any other solution than to install yet-an-another copy of gcc and pray it works?
11:29:11 <Binkley> sacrifice a goat
11:29:42 <CosmicRay> crap, I shoved the last one into /dev/null tuesday.
11:30:23 <zipper> does the panel in wxhaskell support 24 bit color?
11:31:06 <CosmicRay> it probably supports whatever wxwidgets does
11:31:18 <zipper> does wxwidgets support it? :)
11:31:30 <CosmicRay> I don't know, but now you know where to go to find the answer :-)
11:34:47 <CosmicRay> I would be very surprised if anything in wxwidgets didn't support 24-bit color
11:39:05 <zipper> ok now i'm really in trouble, i have to use IO monad stuff :'(
11:39:11 <zipper> where can i read about varCreate?
11:39:23 <Binkley> you're probably not going to get very far using wxHaskell without using the IO monad
11:39:36 <zipper> yeah :(
11:44:54 <zipper> wait a minute... is varCreate part of wxHaskell or part of haskell core language?
11:49:28 <CosmicRay> I've never heard of varCreate
11:49:30 <CosmicRay> @index varCerate
11:49:30 <lambdabot> bzzt
11:49:35 <CosmicRay> so wxhaskell :-)
11:49:46 <zipper> thanks!
11:49:54 <zipper> btw where is mega?
11:50:04 <CosmicRay> mega's brain grew too large
11:50:18 <CosmicRay> it would crash after 5 minutes of being online when it would try to save it
11:50:18 * Heffalump fails to work out how the defaulting rules work
11:50:25 <Heffalump> yay, no mega :-)
11:50:30 <Binkley> @index varCreate
11:50:30 <lambdabot> bzzt
11:50:37 <CosmicRay> I am thinking of either retraining with a smaller set, or training based on haskell-cafe archives instead :-)
11:50:50 * CosmicRay thwacks heffalump
11:51:24 <Heffalump>     Ambiguous type variable `b' in these top-level constraints:
11:51:24 <Heffalump>       `Scalar b' arising from use of `.<<.' at ./Neon.hs:75
11:51:24 <Heffalump>       `Num b' arising from use of `fromIntegral' at ./Neon.hs:75
11:51:30 <Heffalump> why didn#t it default b to Integer?
11:51:58 <Heffalump> (there's an instance Scalar Integer)
12:03:20 <zipper> what's the difference between Int and Integer?
12:03:30 <Heffalump> Integer is unbounded
12:03:38 <Heffalump> Int is not guaranteed to be any more than 29 bits
12:03:56 <zipper> why is length Int?
12:04:02 <zipper> @type length
12:04:04 <lambdabot> length :: forall a. [a] -> Int
12:04:33 <roconnor> @type genericLength
12:04:34 <lambdabot> bzzt
12:04:39 <roconnor> @type List.genericLength
12:04:41 <lambdabot> List.genericLength :: forall i b. (Num i) => [b] -> i
12:04:48 <Heffalump> cos you're unlikely to be able to fit a list in memory whose length doesn't fit in Int :-)
12:04:58 <Heffalump> s/memory/addressable memory/
12:08:47 <zipper> ok thanks. what's the best way to get random numbers?
12:13:16 <Oejet> Read a Geiger-counter?
12:13:27 <zipper> hm....
12:13:35 <Oejet> :-P  Sorry.
12:15:48 <Oejet> zipper, you should first look at http://haskell.org/ghc/docs/latest/html/libraries/index.html
12:16:10 <zipper> thanks
12:38:36 <duncan> boegel: how are the exams going?
13:05:29 <boegel> duncan: last one tomorrow
13:05:48 <musasabi> How costly are C->Haskell calls as compared to safe Haskell->C calls in GHC?
13:05:51 <boegel> I haven't had time to install gtk2hs on windows, I'm sorry
13:05:57 <boegel> but I will, sunday probably
13:14:21 <duncan> boegel: good luck with the last one, don't worry about the gtk2hs testing
13:18:52 <beschmi> hi
13:22:39 <Lemmih> HEy
13:30:18 <boegel> duncan: the last one should be no problem, it's quite easy really... but I think I made it too easy for myself :)
13:32:41 <zipper> i have no idea how to structure the IO stuff of my program :'(
13:34:42 <kosmikus> duncan: seems like I can file "your bug" as well :)
13:35:13 <Lemmih> zipper: We're here to guide you.
13:35:53 <zipper> ok, i'm trying to do a simple genetic algorithm. on the bottom of this page you can see the problem:
13:35:54 <zipper> http://www.ai-junkie.com/ga/intro/gat3.html
13:36:11 <zipper> under the title "Stuff to try"
13:36:19 <zipper> please read it it's only a few sentances and nice pictures :)
13:38:36 <Lemmih> Sounds fun.
13:39:26 <zipper> i think i can handle it, this will be my second haskell program. my first was a raytracer http://benny.kramekweb.com/hrayt
13:40:39 * boegel wakes up on the word raytracer
13:40:43 <boegel> Where?!1!?
13:40:49 <zipper> boegel: dude it's me :)
13:41:09 <boegel> oh, wolfgang8k :)
13:41:19 <boegel> why did you change nick, it's quite confusing :)
13:41:19 <zipper> boegel: btw how did you do random numbers?
13:41:37 <boegel> zipper: I don't :)
13:41:49 <boegel> I use fixed permutated lists, same effect
13:41:50 <zipper> i remember you were talking about random numbers a few months ago
13:41:53 <boegel> no need for random numbers
13:42:09 <boegel> zipper: I had problems with them again last week, and I took 'em out
13:43:10 <humasect> two haskell tracers? =)
13:43:18 <humasect> (that last pic is very cool, on hrayt)
13:43:26 <boegel> humasect: yeah, we're starting a community
13:43:29 <humasect> hehe
13:43:43 * humasect had thought about a modeler/animator with haskell
13:43:51 <zipper> humasect: that last pic's seen was set up by the mathematician Ca1e
13:43:53 <humasect> gui is sort of an issue, though
13:44:01 <boegel> zipper: seen my website lately ?
13:44:09 <boegel> humasect: gtk2hs :)
13:44:10 <zipper> humasect: i also want to make a modeller/animator with haskell :) and i want to build my own functional haskell gui for that :)
13:44:13 <zipper> boegel: no
13:44:18 <humasect> zipper: it is very interesting..
13:44:36 <humasect> hmm interesting. you were also interested with opengl/soft real time engine too..
13:44:42 <boegel> zipper: why build your own gui lib ? there are some great gui libs around
13:45:03 <zipper> boegel: fruit seems to be interesting
13:45:22 <zipper> humasect: software engine long time ago but that's not on my website :O
13:45:46 <humasect> zipper: yeap. but we sort of discussed it just the other day
13:46:03 <humasect> if blender is an inspiration, then a custem gui lib is not a bad idea
13:46:04 <duncan> zipper: you can build fruit on top of an existing lib, like hs-fltk, gtk2hs, wxHaskell etc
13:46:20 <zipper> duncan: yeah there is wxFruit which seems interesting
13:46:29 <humasect> no one speaks about Object I/O? ;)
13:47:03 <zipper> anyway, i got to get back to this GA problem! =)
13:47:07 <boegel> humasect: my version of zipper's last pic: http://studwww.ugent.be/~kehoste/thesisPublic/psychedelic.png
13:47:26 * boegel is also interesting in coding a modeller/animator
13:47:34 <humasect> hrayt is a good example for haskell
13:47:35 <boegel> s/interesting/interested
13:47:41 <humasect> zipper: ohh, neat
13:47:48 <humasect> okay, three people in the team  hBlender =)
13:47:56 <boegel> *yaay*
13:48:16 <boegel> humasect: it won't be an easy task, I can asure you
13:48:22 <humasect> i've been there
13:49:03 <humasect> i wrote csg modelers and portal compiler (app, c++)
13:49:17 <humasect> and a partial renderman implementation in smalltalk ;)
13:49:30 <zipper> i've done loads of realtime graphics programming and opengl and also game physics
13:49:47 * humasect nods -- small world =o
13:49:59 * boegel is totally unexperienced, but eager to learn
13:50:05 <zipper> i'm starting to get interested in AI now
13:50:12 <humasect> the "difficult factor" of modeler/animator is probably one of the reasons we want to.
13:50:51 <zipper> closest thing i've done to a modeller/animator is this game engine editor in c# you can see a screenshot http://benny.kramekweb.com
13:51:02 <humasect> what side of AI? i am probably on the side of events and triggers (level design)
13:51:19 <zipper> humasect: i'm interested in genetic algorithms and neural networks
13:51:25 <humasect> hm cool
13:51:29 <humasect> i have plenty of screens, but only on my HD
13:51:48 <boegel> any chance we can start up a h3d project ? or don't we have time enough for that ? :)
13:52:00 <zipper> problem is the code for that editor started getting really messy. i think that using haskell with proper design would make for some really slick code
13:52:06 <humasect> boegel: sure why not =)
13:52:18 * zipper unfortunately does not have much time :(
13:52:37 <humasect> hmm
13:53:02 <zipper> boegel: awesome progress on hray!
13:53:18 <boegel> zipper: thanks :)
13:53:24 * humasect has time, and also wants to make more time
13:53:28 <boegel> I didn't get the reflection working though...
13:53:39 <boegel> zipper: have you seen my 'scene language' ?
13:54:04 <zipper> boegel: no
13:54:52 <boegel> zipper: click on the link on the top of the page, under the image on the right
13:55:21 <boegel> zipper: do you have a 'scene description' for your second image on your website ?
13:56:12 <zipper> boegel: no, but it's basicly a tunnel of reflective spheres... how do you parse the scene description file?
13:56:29 <boegel> zipper: using a parser generated with Happy
13:57:08 <humasect> will i write this myself? zipper, what is your decision/reason for another gui lib? "pure"?
13:57:25 <boegel> humasect: write what yourself ?
13:58:21 <humasect> well, i have already some plans to write this diverse game/media application for haskell
13:58:36 <humasect> basically the "modeler/animator" but integrating 2 and 3 dimensional works
13:58:53 <humasect> and super thin overhead for output.. (ie soft realtime)
13:59:16 <zipper> humasect: yep, purity. but also because i have some ideas for gui concepts
14:00:12 <humasect> to me i think i will have it integrated with output, so the workflow cycle is as short as possible
14:01:03 <boegel> zipper: if you're planning to start a gui lib, I'm also interested too help (as good as I can)
14:01:45 <zipper> i want to first learn about yampa though since it seems to currently be the best way to deal with timeflow/animation/changing-state
14:01:53 <glimming> sapr: can you give me a lesson on exact reals?
14:01:57 <zipper> fruit gui is built on yampa
14:02:23 <glimming> is Henrik here?
14:02:34 <humasect> erm
14:03:02 <Heffalump> who?
14:03:11 <glimming> nottingham-henrik
14:03:14 <Heffalump> nafaik
14:03:51 <glimming> author of yampa
14:03:54 <glimming> I think
14:03:55 <Philippa_> I've never seen him in chan
14:04:09 <glimming> aha
14:04:12 <Philippa_> you could, of course, mail him and ask him if he does IRC, IM or similar?
14:05:03 <glimming> Ok, done.
14:06:09 <SyntaxNinja> no, he doesn' thang out here; he's not the only author fwiw, and his last name is Nelson or Nilson or something
14:06:24 <glimming> yes Nilsson
14:06:24 <SyntaxNinja> Antony Courtney also hacked on that, but he doesn' thang out here either
14:06:38 <glimming> space invaders
14:06:56 <SyntaxNinja> I hacked a little on Space invaders if you have some specific questions
14:07:30 <glimming> sorry, no questions right now
14:07:52 <sh10151> space invaders?
14:07:54 <sh10151> that sounds fun
14:08:03 <sh10151> i remember playing that in the arcade
14:08:24 <glimming> However, I am interested in exact real computations and on systolic algorithms if anyone knows anything about this.
14:08:41 <zipper> they have a space invaders arcade machine in a museum here... it's pretty sweet
14:08:52 <glimming> zipper: Huet?
14:08:59 <zipper> hm?
14:09:12 <glimming> That's a joke I guess. Not a good one I admit.
14:09:27 <glimming> Do you know zipper, zipper?
14:09:32 <zipper> i am zipper
14:09:41 <glimming> Huet's zipper
14:10:17 <zipper> negative
14:10:32 <glimming> Aaaah, then your name is very appropriate by accident for this forum.
14:10:59 <goron> Is there some way to restore all bootscripts of Debian to it's original form?
14:11:29 <goron> it's->its
14:12:45 <KrispyKringle> you could probably restore those for a given package by using apt to get the original config file, butim not so familiar with apt.
14:13:00 <KrispyKringle> but if you want to just restore a system to a vanilla install, you may as well just reinstall...
14:14:50 <goron> KrispyKringle: Do you know how the package with bootscripts is called?
14:15:09 <KrispyKringle> what i meant was, each package comes with it's own scripts (if it so needs them).
14:15:20 <KrispyKringle> i don't know if there is some base package with all the boot scripts in it.
14:15:50 <KrispyKringle> In Gentoo, the entire system is built from portage, so you can emerge baselayout (or whatever it is you want). I don't know where the bootscripts originate on Debian. You may have more luck with #debian than here.
14:16:02 * humasect ponders
14:17:04 <Heffalump> goron: many of them will be in the initscripts package
14:17:11 <KrispyKringle> ah. there ya go. :P
14:17:14 <Heffalump> but individual daemons etc will have their own scripts
14:28:16 <CosmicRay> goron: sysvinit
14:28:26 <CosmicRay> goron: you can use dpkg -S to find what package a particular script is in
14:28:33 <CosmicRay> goron: packages provide their own init scripts
14:28:38 <CosmicRay> goron: there are some base scripts in other files
14:28:42 <CosmicRay> goron: dpkg -S will tell you
14:31:09 <goron> CosmicRay: Thanks! This will probably prove useful.
14:48:18 <jadrian> if I want to import some module qualified, except for a few types, what should I do? define type synonyms form them?
14:48:39 <jadrian> type A = Module.A
14:48:59 <jadrian> or is there some other maybe more elegant solution?
14:49:44 <SyntaxNinja> I think MAYBE you can say "import Module (B) qualified M\n import Module (A)"
14:50:29 <Heffalump> import qualified B as Foo
14:50:35 <Heffalump> import B (foo,bar)
14:50:56 <SyntaxNinja> yeah, what Heffalump said
14:51:23 <jadrian> Heffalump: ah nice
14:51:31 <Heffalump> Heffalumps are of course the fount of all knowledge.
14:51:41 <WilX> What kind of lump is that that is heffa?
14:51:46 <Heffalump> And if Igloo is watching, I would note that displaying numbers in hex is not knowledge.
14:52:01 <Heffalump> A bony lump.
14:52:44 <WilX> Hmm...
14:53:40 <Pseudonym> Heffalumps steal hunny.
14:59:24 <Igloo> :-)
15:08:23 <tmoertel> hmm... anyone know if there is a changelog for WASH/CGI somewhere? (doesn't seem to be one in the WashNGo tarball)
15:09:28 <tmoertel> and the on-site version history is rather large-grained
16:03:30 <SyntaxNinja> is there a binary IO interface in ghc 6.2? I remember some discussion...
16:03:46 <Lunar^> SyntaxNinja: there is
16:04:03 <Lunar^> SyntaxNinja: it's with IOUArray IIRC
16:04:44 <Lunar^> http://haskell.org/ghc/docs/latest/html/libraries/base/Data.Array.IO.html#v%3AhGetArray
16:05:37 <dons> you could also adapt the Binary class used inside ghc (which comes from nhc's Binary)
16:05:58 <dons> you usually need DrIFT to derive Binary however
16:06:21 <SyntaxNinja> OK cool
16:11:24 <syntax_syntax> drag-und-drop file management has to die.
16:11:25 <syntax_syntax> TO DIE.
16:11:26 <syntax_syntax> DIE
16:11:28 <syntax_syntax> DIE DIE DIE
16:11:42 <Heffalump> why?
16:11:53 <dons> hehehe.
16:11:59 <jlouis> syntax_syntax: try RISCos
16:12:08 <syntax_syntax> now I have to find where the heck I dragged my texmf directory.
16:12:13 <jlouis> .... where you have save-dragging
16:12:33 <jlouis> syntax_syntax: $HOME/texmf?
16:12:47 <syntax_syntax> this is not a sane machine :-(
16:12:50 <syntax_syntax> no $HOME goodness.
16:13:13 <syntax_syntax> this is the real world where I have to do real work on this computer.
16:13:14 <jlouis> then why are you allowed to drag it in the first place?
16:13:22 <dons> syntax_syntax is in an evil world of pain
16:13:31 <jlouis> argh
16:13:33 <syntax_syntax> So no organized filesystem goodness,.
16:13:39 <jlouis> argh
16:13:49 <syntax_syntax> lotsa "Program files" and "Documents and settings" things happening.
16:13:55 <jlouis> You need to do real work... Therefore texmf can be dragged around
16:14:22 <jlouis> Move to "Program files", move back... Move to Program Files, move back
16:16:59 <syntax_syntax> bad liver, broken heart, thesis with deadline running and windows computer.
16:17:07 * syntax_syntax whines
16:23:35 <Lunar^> syntax_syntax: on OS X, you have Command+Z
16:23:35 <syntax_syntax> I'm consider the Mac Cheapo thing.
16:23:35 <syntax_syntax> to make the world worse, this is a K6 computer.
16:23:38 * syntax_syntax bursts out in tears.
16:29:04 <Lunar^> syntax_syntax: sorry
16:29:35 <syntax_syntax> I'm waiting for the dust to settle on the mac cheapo thingie.
16:29:47 <syntax_syntax> I'll also need to save a couple of months to cough up the greenbacks.
16:36:37 <SyntaxNinja> so... can anyone tell me a simple example of writing an integer binarily to a file?
16:37:04 <SyntaxNinja> do I convert the integer into an IOUArray and convert that to a handle somehow?
16:37:48 <dons> you need  to open a handle
16:38:03 <dons> let's see...
16:38:18 <Lemmih> SyntaxNinja: I'll do some serious Hackage hacking soon.
16:40:14 <dons> where did this IOUArray idea come from? has someone done it this way before?
16:40:40 <dons> I can see how it would work, but it seems a bit tricky
16:41:58 <SyntaxNinja> Lemmih: sweeeeet
16:42:28 <SyntaxNinja> dons: er Lunar said something a bit ago, that's all I know :)
16:42:35 <dons> ah. the Binary class used by ghc to read .hi files uses things like (MBA arr) <- newByteArray sz
16:42:47 <dons> instance Binary Bool where
16:42:48 <dons>     get  bh   = do x <- getWord8 bh; return $! (toEnum (fromIntegral x))
16:43:00 <dons> instance Binary a => Binary (Maybe a) where
16:43:00 <dons>     get bh           = do h <- getWord8 bh
16:43:00 <dons>                           case h of
16:43:00 <dons>                             0 -> return Nothing
16:43:00 <dons>                             _ -> do x <- get bh; return (Just x)
16:43:02 <SyntaxNinja> where do I find info on the Binary class?
16:43:12 <SyntaxNinja> ...
16:43:32 <dons> ok. it is an nhc class. so at haskell.org/nhc98. It is used internall by ghc too
16:43:43 <dons> I forked a copy which is available as a package in hs-plugins
16:43:57 <dons> but it is only a few files, so you could easily grab them yourself
16:44:19 <dons> DrIFT also discusses it, as deriving Binary is one of its best features
16:44:51 <SyntaxNinja> can I grab a stand-alone few modules from hs-pluggins? where should I get it from?
16:45:11 <dons> you can grab hs-plugins, and just install the 'hi' package
16:45:23 <dons> it contains the Binary library + a .hi file parser
16:46:07 <SyntaxNinja> mmkey :)
16:46:19 <dons> here's the cvs snapshot: ftp://ftp.cse.unsw.edu.au/pub/users/dons/hs-plugins/snapshots/
16:46:32 <jadrian>  f a = isSomething a  && isSomethingElse a
16:46:42 <jadrian> is there some elegant way of writing that in a point free style?
16:46:53 <jadrian> I know about  &&&
16:47:25 <jadrian> and I could use an uncurry (&&), but that's ugly....
16:47:26 <SyntaxNinja> got it... why did you grab it? is it not exposed by GHC at all/
16:48:03 <dons> no. it is in ghc/compiler/utils just for reading .hi files
16:48:25 <Pseudonym> There is rarely any way of writing anything nontrivial in a point-free style.
16:48:48 <jadrian> yes
16:49:09 <Pseudonym> elegantly
16:49:21 <jadrian> I was just wondering if this one was one of them...
16:49:25 <dons> another way to do the binary IO would be via hPutBuf, and using the ffi to marshal your values to the buffer first
16:49:32 <Pseudonym> IMO, point-free style is by nature inelegant, except for some trivial cases, like currying and operator sections.
16:49:46 <Pseudonym> And pipelining functions.
16:50:13 <SyntaxNinja> OK
16:51:16 <jadrian> Pseudonym: the "currying" case many times just depends on the functions you have available
16:51:25 <jlouis> point free style removes the data values from the function and pushes them to the end. It might be hard to guess what data it manipulates then
16:51:29 <Pseudonym> Tht's true.
16:51:50 <jlouis> in the ml world, we seldomly use pfs.
16:52:02 <jadrian> Pseudonym: I think I've read on the mailing list something about "boolean operations" on functions
16:52:28 <jadrian> Pseudonym: to be able to write: property1 and property2
16:52:58 <jadrian> Pseudonym: but I don't remember if it was just someone using some class he made or if it is something that's in the standard libs in some form...
16:53:16 <Pseudonym> Hmmm.
16:53:22 <Pseudonym> I don't recall reading that.
16:53:34 * jadrian is going to search
16:56:51 <SyntaxNinja> Compiling Hi.PrimPacked    ( ./Hi/PrimPacked.hs, interpreted )
16:56:51 <SyntaxNinja> During interactive linking, GHCi couldn't find the following symbol:
16:56:51 <SyntaxNinja>   plugin_memcmp_off
17:00:28 <dons> huh. what ghc?
17:01:04 <SyntaxNinja> 6.2.2
17:01:11 <dons> I don't think I've tried to run the lib under ghci for a while
17:01:41 <SyntaxNinja> OK, just ghc --make seems to work.
17:01:56 <dons> you could just use the 'make' target in the makefile ;)
17:02:17 <dons> that symbol is in hschooks.c btw
17:02:55 <dons> so ghci would need that hschooks.o on the command line, probably
17:03:10 <SyntaxNinja> ok
17:03:31 <dons> oh. hang on. I just realise. There is no 'put' method in the hi Binary lib!
17:03:53 <dons> only the 'get' method. But you want to right values out, too?
17:04:01 <dons> write.
17:04:50 <dons> the Binary class defines put and get, but a .hi file parser only needs get
17:05:30 <dons> if you need both put and get, you may have to steal the ghc Binary class from $fptools/ghc/compiler/utils
17:07:25 <SyntaxNinja> h0hum
17:12:16 <dons> it shouldn't be too hard to add the put() code back in to the hi lib, or to just extract what you need from ghc. possibly doing ffi marshalling would get the job done sooner, not sure.
17:16:16 <SyntaxNinja> dons: thanks for your help; I'll check it out tomorrow.
17:20:43 <liquidengineer> any BBEdit/TextWrangler fans?
17:20:49 <liquidengineer> any BBEdit/TextWrangler fans?
17:21:14 <liquidengineer> hi
17:21:24 <liquidengineer> any BBEdit/TextWrangler fans?
17:21:42 <dons> yeah. BBEdit rocks. but I haven't used it in 7 years.
17:21:58 <dons> :}
17:22:46 <Philippa> argh, I really should set up an auto-CTCP ping script so I stop getting silent disconnects
17:24:21 <liquidengineer> Found a module for BBEdit/TextWrangler (the reincarnation of BBEdit light, and free) that supports Haskell color syntax
17:24:38 <liquidengineer> except it annoys me, cause it only handles non-literate haskell
17:28:41 <liquidengineer> my professor has us doing everything in literate script, so having one's comments littered with colored keywords is kind of annoying
17:28:59 <liquidengineer> and maybe it's just me, but I like operators to be a different color than identifiers
17:32:08 <dons> hmm. I actually know a guy who's written a bbedit haskell .lhs syntax hl module. I'll see if I can get a link for you
17:35:49 <liquidengineer> dons: Dave Menendez?
17:35:56 <liquidengineer> I found his today
17:36:01 <liquidengineer> very nice, actuaally
17:36:14 <liquidengineer> except it was geared more toward .hs than .lhs
17:38:08 <desrt> liquidengineer; microserfs?
17:39:07 <liquidengineer> desrt: indeed.
17:39:22 <liquidengineer> it's always pleasant to meet a Microserfs fan. :D
17:39:22 <dons> nope, Patryk Zadarnowski. the guy who write lambdaTeX, the haskell .tex type setter
17:39:30 <desrt> my favourites are "unhappy meals, and that's ok" and "pull the wires from the wall"
17:39:50 <desrt> but yours is definitely on my top-5 list :)
17:39:56 <liquidengineer> desrt: I actually have only read Microserfs.  I haven't managed to pick anything else up
17:39:58 <Heffalump> one of the haskell .text type setters :-)
17:40:02 <Heffalump> s/text/tex/
17:40:06 <Heffalump> I know of at least 3
17:40:16 <desrt> liquidengineer; they are all from microserfs
17:40:35 <desrt> and i lied.  my real favourite is "mom... dad.... i'm okay.  i am not being starved, or beaten, or unnecessarily frightened."
17:40:36 <liquidengineer> those are lines in the book?
17:40:38 <desrt> yes
17:40:47 <liquidengineer> crap.  I need to read it again
17:40:48 <liquidengineer> and yeah
17:40:52 <liquidengineer> that one is great
17:40:53 <Heffalump> Microserfs is scarily accurate in some ways :-)
17:41:15 <liquidengineer> I also like anything that comes out of Karla's, Bug's, or Michael's mouth as a rule
17:41:22 <desrt> :)
17:41:33 <desrt> if you're looking for a next book to read, i recommend generation X
17:41:37 <liquidengineer> and of course, Daniel's dad, after he's been Michael'd
17:41:49 <liquidengineer> what's a tex type setter?
17:42:34 <liquidengineer> dons: cool.  Do you have a link?
17:43:24 <dons> for the bbedit thingy? i'm trying to get one from him. for lambdaTex, one of the many .tex setters: that's on haskel.org
17:43:57 <dons> haskell.org. don't type and eat rice
17:45:08 <liquidengineer> desrt: I actually got pissed at a friend of mind for suggesting Karla/Dan was just a mutual phase they were going through, and they'd eventually not need each other anymore and break up
17:45:13 <liquidengineer> I AM a nerd
17:50:04 <desrt> liquidengineer; i don't care very much for your friend
17:50:40 <liquidengineer> I like him
17:51:01 <liquidengineer> as long as he doesn't say stuff likethat
17:51:04 <liquidengineer> then I hurt him
17:51:43 <liquidengineer> I think he's at a point in his life where he's not sure he'll ever be in a meaningful relationship, thus he projects these doubts on to fictional characters
17:53:00 <desrt> those are harsh words
17:54:34 <liquidengineer> perhaps
17:54:43 <liquidengineer> but I can't say this to his face
17:54:52 <liquidengineer> and i'm just tired enough to say it in an IRC channel
17:55:03 <liquidengineer> I don't mean it as an insult
17:55:10 <liquidengineer> I just think that's what's going on in his head
17:55:19 <liquidengineer> he has similar views about romance in Harry Potter
17:55:38 <liquidengineer> anyhow...that's neither here nor there
17:55:50 <desrt> right.  i'm gonna go home now.  see you later.
17:55:50 <liquidengineer> you seem to have good book taste
17:55:57 <desrt> thanks/bye :)
17:56:03 <liquidengineer> later :)
17:56:12 <liquidengineer> thanks for the advice re: BBEdit modules
18:12:02 <liquidengineer> it's very quiet here tonight
18:27:07 <liquidengineer> anybody know how to handle polynomial division in haskell, assuming the polynomial is a list of coefficients in ascending power order
18:27:09 <liquidengineer> ?
18:28:03 <heatsink> use the long division method
18:28:15 <liquidengineer> ?
18:28:26 <heatsink> same way you would divide polynomials by hand.
18:28:27 <liquidengineer> there's a method in the prelude for this?
18:28:30 <liquidengineer> well, yeah
18:28:37 <liquidengineer> I'm just not sure how to represent that
18:28:47 <liquidengineer> It's second nature to do it on paper
18:28:58 <liquidengineer> but defining what I just did is a bit harder
18:29:10 <heatsink> I don't know of an existing function to do it, but you can write the function
18:29:53 <liquidengineer> I certainly hope I can.
18:29:54 <liquidengineer> :)
18:29:59 <heatsink> It's a good skill to be able to convert what you do into an algorithm, I'd suggest working it out.
18:30:01 <liquidengineer> It's part of the spec requirements
18:30:05 <heatsink> spec?
18:30:32 <liquidengineer> err...saying it's part of the homework requirements didn't sound quite so impressive.  :P
18:30:38 <heatsink> heh
18:30:52 <liquidengineer> I'm implementing polynomial arithmetic with rational coefficients
18:30:57 <liquidengineer> just division to go
18:31:45 <heatsink> As a hint, the first step I would do is to normalize the polynomials (make them the same length).
18:33:36 <liquidengineer> they're stored in c*x^0 + c*x^1 + ... form
18:33:46 <liquidengineer> so I realize I'm going to need to reverse them
18:33:53 <heatsink> yea
18:34:10 <liquidengineer> ascending power form is far more convenient for the other three major arithmetic functions, tho
18:34:39 <heatsink> reversing is fast.
18:34:48 <liquidengineer> yeah
18:34:56 <liquidengineer> no problem: the reverse function in the prelude
18:35:09 <liquidengineer> it's the rest I haven't figured out yet
18:35:11 <liquidengineer> ;)
18:36:02 <liquidengineer> our instructor gave the hint that the function that raises a polynomial to a power would come in handy
18:36:06 <liquidengineer> I'm not sure I see how
18:59:47 <Gahhh> what the monad is a pragmatic programmer ?
19:03:59 <liquidengineer> it's a company, I believe
19:04:01 <liquidengineer> or some group
19:04:06 <liquidengineer> known for making nice stuff
19:04:32 <liquidengineer> apparently good enough to warrant a book deal
19:05:47 <Gahhh> They seem to have named a programmer that follows certain methodologies (agile, etc.?) A Pragmatic Programmer in their book.
19:06:02 <Gahhh> yay, new buzzword for HR resume filters
19:07:56 <liquidengineer> ah
19:08:04 <liquidengineer> see also, Extreme Programming
19:08:20 <liquidengineer> to be pronounced with Monster Truck Announcer voice
19:08:25 <Gahhh> haha
19:08:35 <Gahhh> or Las Vegas boxing announcers
19:09:11 <fraxtal> liquidengineer: I thought you were going to sleep?
19:10:40 <liquidengineer> I am
19:10:53 <liquidengineer> I've ceased working
19:10:58 <liquidengineer> I'm watching er now
19:10:59 <liquidengineer> ER
19:11:35 <liquidengineer> I need time to unwind before I'll actually be able to fall asleep
20:14:23 <doc_modulo> what's andres' current email address?
20:16:32 <doc_modulo> ah: andres@cs.uu.nl
20:16:39 <doc_modulo> what I'm going to mail to him:
20:18:37 <araujo> Hello.
20:18:42 <doc_modulo> I recently discovered that functional programming is superiour to other ways of programming. Even though Haskell is the best language in my opinion, I'm going to learn and use Erlang.
20:18:46 <doc_modulo> araujo: hi
20:18:52 <araujo> Anyone has compiled 6.4 stable latest release?
20:19:06 <doc_modulo> I think that, at least the Dutch guys, are asleep
20:19:27 <doc_modulo> and I'm not able to help
20:19:34 <araujo> Ok, no problem.
20:19:57 <araujo> I will ask again in..mm 5 or 7 hours 8)
20:19:57 <Pseudonym> IMO it's definitely not a waste of time to learn Erlang.
20:20:04 <dons> araujo: yep. last night. only 2 failures on the testsuite too.
20:20:17 <araujo> dons, didn't you get error with make html?
20:20:30 <dons> oh, we've had this conversation :}
20:20:34 <doc_modulo> Everyone: the reason I'm switching to Erlang is that I needed concurrency in the stuff that I'm going to make with my programming.
20:20:37 <araujo> Yeah, indeed.
20:20:58 <dons> haven't checked make html. didn't the \/ fix haddock up?
20:21:08 <araujo> dons, of course it worked.
20:21:13 <araujo> that is the problem.
20:21:17 <doc_modulo> Everyone: The most important reason I need concurrency is that I need a cheap way to make a reliable server, I'm going to do that with a clustered server.
20:21:26 <araujo> But im not sure why nobody has reported that problem yet.
20:21:41 <doc_modulo> the second reason is that you can increase your server's speed by just adding PCs to your cluster
20:22:42 <dons> araujo: probably noone is making the docs. just send a diff -u old new to glasgow-haskell-bugs@haskell.org
20:23:22 <doc_modulo> Everyone: I think, that if you want to grow the Haskell community, you have to focus the attention of all the research on distributed/parallel/concurrent/you know what I mean computing in Haskell
20:23:52 <Pseudonym> doc_modulo: While I don't disagree, I think that's a more niche market than you think.
20:24:41 <doc_modulo> Pseudonym: check this out: http://www.gotw.ca/publications/concurrency-ddj.htm
20:24:48 <Pseudonym> Read it.
20:25:03 <doc_modulo> There's no way it's not going to grow more important in the future
20:25:14 <Pseudonym> Like I said, I don't disagree.
20:25:27 <Pseudonym> But I _still_ think it's a more niche market than you think.
20:25:33 <doc_modulo> well, maybe you're right in that it's not BIG now
20:25:47 <Pseudonym> That GotW essay didn't acknowledge, for example, that people want to run more than one task on a typical machine.
20:25:51 <dons> araujo: btw, just looked at my nightly builds. i'm not building the html docs so it isn't being tested
20:26:09 <Pseudonym> Indeed, every server out there runs at least two tasks, one of which is the operating system.
20:26:09 <doc_modulo> Pseudonym: but it's just a very good way to build servers
20:26:28 <Pseudonym> I agree.
20:26:46 <Pseudonym> I'm not saying it's not an important market.
20:26:53 <Pseudonym> I am saying it's a niche market.
20:27:07 <doc_modulo> I think you're right
20:27:08 <araujo> dons, could you test that?
20:27:17 <doc_modulo> how do you think it's going to be in the future?
20:27:41 <doc_modulo> Psuedonym: short-term and long-term
20:27:44 <Pseudonym> I think that concurrency on desktop machines, for example, will mean that your machine won't be as bogged down by your virus and spyware scanners.
20:27:52 <doc_modulo> :)
20:28:20 <Pseudonym> Many programs still won't need to scale to multiple CPUs.
20:28:24 <doc_modulo> Pseudonym: you mean distribution not inside 1 program, but 2 programs on 1 CPU and 2 progs on 2nd CPU?
20:28:30 <Pseudonym> Right.
20:28:36 <doc_modulo> I think you're right
20:29:06 <doc_modulo> I agree with you that concurrency will be most important in the reliability department
20:29:20 <Pseudonym> Yes.
20:29:34 <Pseudonym> It'll also mean that a program might get a whole CPU to itself.
20:29:37 <doc_modulo> for clustered computers, with an added benefit of extra speed for a single program that needs superspeed
20:29:41 <Pseudonym> If it's an important program.
20:29:50 * Pseudonym nods
20:30:04 <doc_modulo> ok, good points
20:31:24 <doc_modulo> but if you look at the ways you can make Haskell more appealing, grow your community and prevent Haskell from slipping into obscurity (which I hope won't happen) What are the ways that you think are best? What do you focus on in Haskell to achieve popularity, which is still very important
20:32:03 <doc_modulo> I think 1 thing is: polishing the initial installation/documentation/flow of learning for starting Haskellers
20:32:15 <doc_modulo> at the moment it's all spread out and academic
20:32:31 <dons> araujo: trying it now
20:32:52 <doc_modulo> Pseudonym: the installing and learning could be more centralized and polished
20:33:03 <dons> Language/Haskell/TH/Syntax.raw-hs:156:1: parse error in doc string: [TokIdent [Q,Q],TokString " monad.\n",TokString " Take care: you are guaranteed the ordering of calls to "]
20:33:06 <dons> gmake[1]: *** [html/haddock.css] Error 1
20:33:09 <dons> gmake: *** [html] Error 1
20:33:37 <doc_modulo> Pseudonym: for example, it's GREAT that there is an official, centralized, Haskell98 version of Haskell. A starting Haskeller will know: Ah, that's the one I need
20:33:55 <Pseudonym> Right.
20:34:10 <Pseudonym> Oh, there are people working on packaging and libraries and stuff.
20:34:12 <Pseudonym> Some of them are here.
20:34:13 <doc_modulo> Pseudonym: but, there isn't an official haskell compiler: should a beginner use Hugs or something else?
20:34:51 <dons> they don't use a beginner C interpreter. so why not use ghc?
20:35:24 <doc_modulo> that's what I bumped into @ the start of my Haskell research: 1 version of language -> Good,  3-8 compilers/VM -> bad
20:35:41 <dons> araujo: could you send that bug report it, along with a diff if possible?
20:35:43 <doc_modulo> at least from a "user's" point of view, I can understand that researchers want to branch and Darwinize
20:35:56 <dons> araujo: we don't want that to make it in to 6.4
20:36:16 <Pseudonym> All Haskell implementations that anyone still uses have a "standard Haskell 98" mode.
20:37:04 <Pseudonym> But if history is any indication, what will happen is Haskell 98 + Glasgow extensions will get consolidated and cut down to form the next standard.
20:38:35 <doc_modulo> Pseudonym: So what I wanted to convey to the Haskell crew before I focus on Erlang and it's community: If you want to grow the Haskell comunity (every 1 out of 100 persons is a keeper) then you should look at these points in my opinion: 1.Polish Haskell for beginners (1 official userversion (15 research versions are OK) 2.Focus on Distributed features
20:38:54 * Pseudonym nods
20:39:44 <doc_modulo> Pseudonym: should I copy/paste this for Andres into a mail or could you point him to this discussion?
20:40:04 <Pseudonym> Who's Andres?
20:40:17 <doc_modulo> the guy who I first talked to in here
20:40:37 <Pseudonym> Ah.
20:40:39 <doc_modulo> he admins the site and is from Utrecht uni
20:40:47 <doc_modulo> http://www.cs.uu.nl/staff/andres.html
20:40:49 * Pseudonym nods
20:40:52 <Pseudonym> Might as well email him.
20:59:04 <doc_modulo> Pseudonym, thank you and have a good day. See you in 2 years :)
20:59:37 <Pseudonym> Ah, you'll be back. :-)
21:01:20 <doc_modulo> yeah, in my opinion, Haskell is the best language, just misses 1 feature I need
21:01:40 <doc_modulo> guys, have fun, goodbye
21:04:07 <shapr> Actually, it was me he talked to when he was first here.
21:04:40 <Gahhh> what are the chances
21:04:55 * shapr rolls the dice
21:05:07 <tintin> hell shapr
21:05:13 <tintin>  /s/hell/hello
21:05:16 <Gahhh> lol
21:05:24 <shapr> I'm not that bad!
21:05:35 * shapr grins
21:05:36 <shapr> hiya tintin
21:05:47 <Gahhh> the dice's outcome is a side effect
21:08:25 <Gahhh> heh. crucial is going the way of the iMac: black PCB and heat spreaders, blue ground effects !
21:11:35 * shapr hops cheerfully
21:12:34 <shapr> I think I'm now recruiting for TMR issue 3, the second one is either full or close to it.
21:13:43 * shapr does the happy dance
21:15:29 <Gahhh> tmr = ?
21:15:35 <shapr> The Monad.Reader
21:15:38 <shapr> want to write an article?
21:16:10 <Gahhh> The public is not ready for me yet. Can I read issues 1 & 2 ?
21:16:43 <shapr> Those issues are not out yet. Issue 1 will be out on the 1st of next month, issue 2 will be out on the 1st of the month after that.
21:16:48 <tintin> Gahhh: Please pay $99 as a yearly fee and you can read it for free
21:17:31 <shapr> tintin: That reminds me of the Journal of Functional Programming, they cost several hundred pounds sterling a year.
21:17:51 <shapr> But The Monad.Reader will be free! And it will be published in both html and pdf/ps.
21:18:09 <Pseudonym> Thankfully, most of the decent JFP articles are available on authors' websites.
21:19:00 <shapr> Pseudonym: have you had a chance to check out the TMR stylesheet and author guidelines doc?
21:19:17 <shapr> Gahhh: more info on http://haskell.org/hawiki/TheMonadReader
21:20:16 <Pseudonym> Nope, not yet.
21:20:17 <shapr> Gahhh: if you have any suggestions for article ideas or general suggestions for the eZine, I'd like to hear 'em.
21:20:52 <shapr> det: what about you? brilliant ideas?
21:23:13 <shapr> g'mornin Philippa
21:23:32 <Pseudonym> shapr: Where was that again?
21:24:17 <shapr> um.. darcs get http://www.cs.uu.nl/~andres/TMR
21:24:28 <Pseudonym> Roght, thanks.
21:25:02 <Pseudonym> Cool, got it.
21:25:34 <shapr> tromp: wow, I didn't know you have an ErdÃ¶s number of 2!
21:28:31 <Pseudonym> My number is 5.
21:28:40 <Pseudonym> My lifelong ambition is therefore to appear in a movie with Kevin Bacon.
21:28:49 <shapr> My number is much like an 8 that has fallen over.
21:29:08 <shapr> Pseudonym: heh, cute
21:29:49 <Pseudonym> Do TMR articles count?
21:29:51 <shapr> So then your ErdÃ¶s-Bacon number would be (5,1b) ?
21:29:59 <shapr> hiya alex-i
21:30:09 <Pseudonym> And more to the point, Bacon would be six degrees separated from Erdos.
21:30:23 <shapr> alex-i: looking for some lambdas to lift?
21:30:37 <alex-i> hello
21:31:14 <shapr> Pseudonym: Why, what's the average ErdÃ¶s number of TMR?
21:31:25 <Pseudonym> Dunno.
21:31:32 <shapr> I hadn't thought of that.
21:31:43 <Pseudonym> You might get your own number, then.
21:31:48 <shapr> !
21:32:14 <shapr> Right, time to bribe tromp into letting me write an article with him.
21:32:16 * shapr snickers
21:33:07 <shapr> alex-i: Learning Haskell?
21:35:56 <shapr> tromp: But seriously, would you be interested in writing an article for TMR?
21:36:30 <shapr> Oh, I need to collect a three sentence author blurb from the writers.
21:37:52 <shapr> So what's going on in the world of Haskell today? Anything cool and new?
21:38:44 <alex-i> shapr: yes
21:39:01 <shapr> alex-i: Do you have any questions?
21:40:37 <alex-i> shapr: not at this moment.  I'm just learning about this channel.
21:40:42 <alex-i> shapr: Thank you.
21:41:21 <shapr> If you want the five minute tour of the #haskell irc channel, I can do that. I can also give you the ten minute introduction to the Haskell language.
21:42:01 <alex-i> shapr: What about pointing me to an appropriate reading?
21:42:18 <shapr> Sure, http://www.haskell.org/learning.html
21:42:47 <alex-i> Are the channel rules written somewhere?
21:43:10 <shapr> The rules are "be nice"
21:43:21 <alex-i> ;-)
21:43:27 * shapr grins
21:43:33 <tintin> alex-i: the rules are no rules as long as you are don't hurt anyone :)
21:43:45 <alex-i> Ok.  That's nice.
21:44:05 * tmoertel watches his computer grind while compiling WASH/CGI
21:44:45 <Pseudonym> shapr: The discussion of Haskell "don'ts" is interesting.
21:45:37 <shapr> Yeah it is.
21:46:04 <shapr> I slipped in the idea of an atLeast function to be used in place of length when possible.
21:48:53 <dons> huh. Erdos numbers, eh.
21:48:59 <shapr> g'day dons
21:49:19 <dons> heya shapr.
21:49:20 <shapr> Do you have that Yi synhl code available somewhere?
21:49:43 <dons> not atm.
21:49:52 <shapr> I got very close to build a pyre of elisp yesterday when emacs crashed four times while I was working.
21:50:09 <dons> hmm. looks like I have a 7
21:50:26 <dons> hmm. but it will be 4 soon :) that sounds good.
21:50:35 <shapr> neat!
21:51:18 <dons> computer scientists need to publish more papers with logicians
21:51:39 <Pseudonym> Unfortunately, logicians aren't interested in the semantics of the Prolog cut.
21:52:23 <dons> well, there is the cross over between, say, haskell->theorem provers->logic->maths.
21:52:54 <dons> haskell->types->maths would be faster
21:53:29 <shapr> poo. "WARNING: You may now have a corrupt (but fixable) repository. \n If you aren't a darcs guru, ask about this on darcs-users@abridgegame.org."
21:53:39 <dons> whoa
21:53:50 <tmoertel> that sounds un-good
21:55:40 <shapr> I'll just check out the repo again, it's easier.
21:56:13 <shapr> Mmm, Postmaster has a spooler now. I can dump Postfix for a pure Haskell solution!
21:58:10 <tmoertel> From MAILER-DAEMON: "Your email could not be delivered because it was not in WHNF"
21:58:15 * shapr laughs
21:59:22 * tmoertel watches top output to see that ghc-6.2.2 is apporaching 11 mins of cpu time compiling HTMLMonad98.hs
22:00:18 <shapr> Part of why I switched to Halipeto is that the WASH generated HTML typechecking has gotten pretty flaky. It ends up generating illegal HTML for me sometimes, with no type errors.
22:01:02 <tmoertel> i thought that was a design decision; perfection being expensive, and all
22:01:31 <shapr> Hm, maybe so. I thought it did a better job in the past.
22:01:45 <shapr> How would you describe the strengths of WASH?
22:02:01 <tmoertel> the interaction model is sublime
22:02:15 <tmoertel> (but the implementation is not quite ready for enterprise use)
22:03:09 <tmoertel> the emerging cps-based systems offer a similar model
22:03:50 <shapr> I'll read up on the interaction model again when I get a chance. Maybe I just missed it so far.
22:04:44 <tmoertel> The top paper on http://people.cs.uchicago.edu/~jacobm/pubs/ is a good summary of what's out there.
22:04:58 <shapr> I understand the benefits of CPS web design, but I never really was that thrilled with WASH.
22:05:38 <tmoertel> WASH's journaling has two potential advantages
22:06:24 <tmoertel> first, the journals can be replayed on different hosts, which means you can distribute load over large server farms more easily
22:06:39 <shapr> hm, interesting point
22:06:44 <shapr> I hadn't thought of that.
22:06:55 <shapr> Maybe I should ask doc_modulo to come back =)
22:07:11 <tmoertel> second, sometimes the journal is smaller than the state that results from playing it
22:07:43 <tmoertel> unfortunately, shuttling the journal back and forth between client and server can be expensive, bandwith wise, for long, data-intensive interactions
22:07:57 <shapr> or you could use GFS
22:08:28 <musasabi> morning
22:08:36 <shapr> hyvÃ¤Ã¤ huomenta musasabi
22:08:44 <tmoertel> for a production system, i would have to use a cps-based or traditional push-all-state-back-to-a-central-db model
22:08:48 <shapr> whoops, was that latin-1?
22:08:49 <musasabi> god morgen
22:09:07 <musasabi> no, seemed like utf-8.
22:09:36 <shapr> Google/Redhat GFS is a distributed filesystem using a block server model, so you could get the benefits of both.
22:09:40 <Pseudonym> Surely thanks to the Curry-Howard correspondence, everything that a logician finds out is relevant to computer science and vice versa?
22:10:05 <shapr> At least, I think that's correct without having tried that myself.
22:10:25 <tmoertel> shapr: that's why for a large production system the cps model (or server-side journals) seems better
22:10:38 <shapr> Interesting point, I'd like to try setting up that sort of system.
22:11:01 <tmoertel> you can push state around pretty quickly between servers in a farm over fast local nets
22:11:58 <tmoertel> round tripping the state to the client, otoh, is slow when the state is non-trivial
22:12:18 <tmoertel> nevertheless, wash rules for little intranet apps
22:12:22 <shapr> Does WASH send state to the browser?
22:12:36 <tmoertel> yes, it encodes in into hidden fields
22:12:38 <shapr> I thought it kept the continuation in /tmp ?
22:12:52 <tmoertel> i think that's the session stuff
22:12:54 <shapr> oh
22:13:07 <tmoertel> (but then again, I haven't looked at the source in ~ 12 months)
22:13:19 <tmoertel> server-side journals would certainly make sense
22:19:23 <shapr> Yay, I get to review the next book in the The Pragmatic Bookshelf series.
22:19:41 <tmoertel> is it ruby related?
22:19:56 <shapr> Nope, this is the one formerly called "Pragmatic Projects"
22:20:34 <shapr> But then, I told them I wasn't so interested in Ruby books, more general development stuff.
22:21:09 <shapr> And if I don't suck, I get to review more books when they get them.
22:22:02 <shapr> Hey Tom, what do you think about zero-button testing?
22:23:03 <tmoertel> I am unfamiliar w/ the term.
22:23:13 <shapr> well, you know one-button testing?
22:23:15 <tmoertel> does that mean "always running automatically"
22:23:51 <shapr> Yeah, I guess so. I was thinking about using inotify on linux, and running the test command whenever the file is changed.
22:24:02 <shapr> basically "test on save"
22:24:19 <tmoertel> ah, a la eclipse
22:24:26 <shapr> I wish there were a more OS portable solution.
22:29:30 * tmoertel notes that GHC has now burned thru 35 mins of cpu time on HTMLMonad98
22:34:44 <dons> tmoertel: ! are they happy generated files? lots of static data?
22:34:57 <dons> slow cpu?
22:35:03 * tmoertel takes a look
22:35:09 <tmoertel> 850 MHz
22:35:15 <dons> not slow then
22:35:28 <dons> 35 mins must be a record
22:35:51 <tmoertel> it's a 192 KB file
22:35:59 <dons> of .hs?
22:36:54 <tmoertel> Yes. It has 334 class definitions and 4571 instances.
22:37:20 <dons> that'd do it, I'd say. you might want to try -H100M or other space-tuning devices
22:37:38 <dons> 4571 instances :}
22:37:42 <tmoertel> well, ghc is already up to 295 MB
22:38:01 <dons> hehe. ghc-6.2.2?
22:38:07 <tmoertel> yep
22:38:35 <dons> I've seen some space leaks in 6.2.2 (leading to, say, 400M heap) that have disappeared in 6.4
22:38:52 <dons> though 6.4 isn't yet an option, probably
22:39:32 <tmoertel> second line of the file: "this file is generated -- do not edit"
22:40:00 <tmoertel> whoops! now ghc is up to 377 MB... disk is starting to light up now and again
22:40:32 <tmoertel> now 432 MB
22:40:42 <tmoertel> 45 mins of cpu time
22:42:01 <dons> it might be of general interesting to try the file with a 6.4 snapshot, and then report it if it is still that bad.
22:42:46 <tmoertel> the disk light is really hammering now, must be close to the end of the compilation
22:42:59 <dons> ... you hope.
22:43:13 <tmoertel> she's not thrashing yet  :)
22:43:57 <tmoertel> now cc1 has started -- 200 MB for itself
22:44:12 <tmoertel> now I have about 650 MB of ram tied up on this one l.hs file
22:46:39 <tmoertel> cc1 just finished, and ghc-asm kicks in
22:48:41 <tmoertel> and it's done !!!
22:49:14 <tmoertel> 21 MB .o file; 3.8 MB .hi file
22:49:26 <dons> hehe!
22:49:50 <tmoertel> *now* I'm glad that they switched to binary .hi files  :)
22:49:59 <dons> oh yeah.
22:50:22 <dons> what does this app do, again?
22:50:32 <tmoertel> the scary thing is, i'm running this compilation under rpmbuild because I'm packaging it
22:50:35 <dons> besides grind your hardware
22:50:47 <tmoertel> if I screwed up the packaging, I'll need to recompile from scratch (it's the rpm way)
22:50:50 <tmoertel> it's WASH/CGI
22:51:18 <dons> ok. so every WASH user has to overcome this, I guess.
22:51:33 <tmoertel> that's kind of why i'm packaging it as an RPM
22:51:52 <dons> yeah. 21 M is scary for a single .o
22:52:08 <dons> that's bigger than ghc
22:52:47 <tmoertel> it's a real porker, indeed
22:54:36 <Pseudonym> Gotta go.
22:54:37 <Pseudonym> Nytol!
22:54:59 <dons> time for me to go too.
22:55:04 <dons> .au is now closed
22:55:04 <tmoertel> 'night
22:55:27 <shapr> hah
22:55:44 <shapr> .au opening hours are ...
22:58:59 <tmoertel> *gack!* now a cron job to compress video kicked in during the compile!
22:59:14 <shapr> whoops
22:59:55 <tmoertel> thank goodness for kill -STOP
23:00:46 <tmoertel> i don't really need ghc and a video compressor fighting over who will get to thrash my workstation into the ground
23:01:40 <shapr> hiya vikasgp
23:02:12 * shapr drinks Red Bull from Thailand
23:02:20 <shapr> Hm, tastes about the same.
23:06:50 <Itkovian> Can I compile ghc 6.2 using ghc 5.04? (I'm on powerpc atm)
23:07:12 <shapr> It says on the ghc webpage somewhere.
23:07:19 <shapr> I think that'll work, but I'm not quite sure.
23:08:04 <Itkovian> all rightie, I'll have a swing at it then
23:17:51 <shapr> Wow, Tomasz Zielonka changed his signature!
23:18:19 <shapr> In other news, GHC 6.4 is likely being held until Cabal is cleaned up a bit. Contribute today if you want 6.4 tomorrow!
23:20:02 <vikasgp> hey shapr
23:20:59 <shapr> haha, someone's trying to crack flippi /cgi-bin/flippi/flippi?view=ffff... (very many fs)
23:23:46 <shapr> Wow, someone is also trying to spend spam to lambdabot
23:25:03 * tintin hides 
23:36:43 <autrijus_> greetings lambdafolks.
23:37:01 <earthy> good morning
23:38:12 <kosmikus> morning earthy, how's uu?
23:41:05 <tintin> hello autrijus_
23:44:42 <kosmikus> shapr: I got this strange mail from doc_modulo, and I he claims I've talked to him, but I can't remember I ever have ... you know him?
23:53:13 <earthy> quiet
23:53:30 <earthy> other than that just fine
23:53:52 <earthy> people were asking how you are doing. enjoying estonia?
23:57:08 <musasabi> Are numeric port or strings (service names or numbers) more intuitive for tcp?
23:57:14 <musasabi> *ports
23:57:23 <earthy> um?
23:57:37 <earthy> you want to support both, using /etc/services to do your lookups
23:57:47 <earthy> but, what is the real question?
23:58:00 <musasabi> e.g. 'connect "www.google.com" 80' vs 'connect "www.google.com" "80"' (could be "http" also)
23:58:10 <araujo> Hell all.
23:58:20 <araujo> kosmikus, Good morning dude
23:58:43 <earthy> musasabi: so, you're asking if you want   connect :: String -> Int -> IO Connection    or connect :: String -> String -> IO Connection ?
23:58:51 <musasabi> yes.
23:59:13 <earthy> well... honestly... make it String -> Int -> IO Connection
23:59:16 <earthy> or, even better
