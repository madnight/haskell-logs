00:21:14 <Itkovian> meuning
00:23:59 <kzm> huh?
00:24:40 <kzm> ah - a greeting.
00:24:58 <kzm> sorry for being dense.  I'm well into my second cup of coffee this morning, so I have really no excuse.
00:52:19 <Itkovian> :-)
01:04:49 <Lunar^> another FP OS http://dst.purevoid.org/archives/2005/05/29/official-may-release
01:05:00 <kzm> Executive summary?
01:05:53 <kzm> Anyway, on my way through the second cup of coffe and the Monad.Reader, I really liked Graham Klyne's piece.  Good to know that there are others who use Haskell but do not have a PhD in category theory.
01:06:25 <kzm> I'm a but curious about what people think about item 14.  ISTR recent mail on one of the lists saying the exact opposite.
01:07:31 <kzm> (The point reads: "Use standard types as far as possible" and recommends using e.g. Maybe String instead of a special-purpose data declaration (e.g. data Language = Lang String | NoLang)
01:07:40 <kzm> Thoughts?
01:07:50 <Lor> There are two schools about this. :)
01:08:15 <Lor> The "use standard types" approach, when taken to an extreme, leads to old-school lisp, where _everything_ is a list.
01:08:23 <Lunar^> busted http://glek.net/subversion/os/kernel/support/c/ !
01:08:59 <Lunar^> They've used hOp support librairies
01:09:03 <Lunar^> -i
01:10:03 <kzm> Lor, I guess a good strategy is a middle ground.
01:10:16 <Lor> Probably.
01:10:44 <Lor> Because all ADTs _could_ be constructed from (), (,), Void and Either.
01:10:51 <Lor> ... and Mu.
01:11:08 <Lor> Yet no one really advocates that.
01:12:09 <Lunar^> kzm: It depends on where the type is used
01:12:29 <Lunar^> kzm: as an API builder, I want code using my library to be readable without lookuing up the doc
01:13:15 <Lunar^> kzm: and I prefer to read "wrapText NoLang input" than "wrapText Nothing input"
01:26:53 <Lor> But then you can't use any general utilities for Maybe.
01:39:09 <nlv11757_> is bigset `difference` smallset also more efficient?
01:39:18 <nlv11757_> the doc doesn't state it clearly
01:39:29 <nlv11757_> talking about Data.Set btw
01:50:35 * Itkovian needs to freshen up his Haskell skillz
01:56:06 <musasabi> nlv11757_: I think Data.Map docs talk about that. (and they were the same algorithm in 6.4...)
01:56:41 <nlv11757_> well it says it uses the same algorithm as the union, but i dont know if that also implies that "bigset `difference` smallset" is more efficient
01:56:44 <nlv11757_> for the union it is
01:57:10 <nlv11757_> maybe it's worth wrapping it and checking the lengths to flip the arguments if needed.
02:01:19 <musasabi> Is size O(1) ?
02:05:51 <Lor> size is trivially O(1) for any data structure, as it is straightforward to keep track of the size during all operations.
02:08:16 <musasabi> Lor: but not all implementations keep track of it meaning that size may be O(n) for some implementations.
02:08:56 <musasabi> The same thing as head being O(1) for all queues ;)
02:09:43 <Lor> Granted, it wouldn't be sensible if ordinary lists recorded their sizes.
02:16:07 <nlv11757_> sieze is O(1)
02:16:16 <nlv11757_> so it maybe a very lucrative idea
02:39:36 <Itkovian> where is the initial value defined in http://www.haskell.org/hawiki/MonadState - the Tree transformation example?
02:43:43 <boegel> @y0w
02:43:44 <lambdabot> These PRESERVES should be FORCE-FED to PENTAGON OFFICIALS!!
02:47:34 <boegel> @tmr IssueFour
02:47:35 <lambdabot> Eat maggoty hardtack, ye unkempt, jenny frequentin', son of a gun.
02:47:43 <boegel> lol
02:47:46 <boegel> @tmr
02:47:46 <lambdabot> Yeh scurvy dog...
02:47:52 <boegel> wtf ?
02:48:56 <jlouis> hehe
02:54:45 <boegel> hey uppo, new here ?
02:55:32 <uppo> boegel, yes, new to haskell too
02:55:54 <boegel> if you have any questions, this is _the_ place to ask them
02:58:52 <uppo> Yes, thank you.  I'm enjoying the new issue of MonadReader today.
03:00:10 <boegel> uppo: that's the idea :) glad to see people actually read it :)
03:34:37 <boegel> hi iblechbot
03:37:13 <boegel> or is iblechbot really a bot ... ?
03:38:07 <dons> "I'm a *private* logbot. http://xrl.us/cst7"
03:38:16 <dons>  (from /whois)
03:40:53 <boegel> oh, okay :)
03:50:26 <boegel> hey Itkovian
03:50:33 <boegel> seen my brand new HRay website ?
03:53:17 <musasabi> boegel: want to link? I think I have time to read something :-)
03:55:13 <boegel> http://studwww.ugent.be/~kehoste/thesisPublic/website
03:56:10 <Itkovian> not bad ...
03:56:15 <Itkovian> :-)
03:56:28 <Itkovian> make sure you move that before september 1st ...
03:56:48 <boegel> Itkovian: I will, I'm looking for some decent hosting
03:56:51 <boegel> and cheap :)
03:57:07 <Itkovian> ah ...
03:57:22 <Itkovian> www.bryght.com :-)
03:57:30 <Itkovian> but that may be a tad overkill
03:58:06 <boegel> 40$ a month isn't cheap :s
03:58:25 <boegel> Complete control - maintain your website in-house, with no techie between you and your content -> I _want_ techie :)
03:59:04 <boegel> I also created a wiki page for people to comment on it
03:59:06 <boegel> @wiki HRay
03:59:07 <lambdabot> http://www.haskell.org/hawiki/HRay
04:02:59 <Itkovian> well, they're friends, so I _had_ to try :-)
04:04:59 <boegel> Itkovian: if they're friends, can't you get a discount ? :D
04:05:26 <Itkovian> hmm ... :-D
04:06:11 <boegel> I don't want to pay more than 100€ a year, if that possible
04:07:09 <tuomov> sf/berlios/gna/savannah/...?
04:07:59 <Itkovian> They're are quite a lot of possibilities, it all depends on what support you want and what technologies you wish to use on the server ...
04:08:05 <Itkovian> s/are//
04:09:11 <nlv11757_> i dont trust Itkovian, he probably gets some of the money if he lures in people :)
04:10:08 <boegel> :)
04:10:31 <boegel> we'll, I don't need a lot of technology, I guess php and mysql would be more than enough
04:10:49 <Itkovian> well, then telenet won't do afaik
04:11:21 <boegel> I don't have teleslet
04:11:25 <boegel> err, telenet :)
04:11:49 <boegel> i have ADSL, but I'll be moving by the end of the year, so I want something not linked to my isp
04:12:19 <tuomov> you don't have a redirection service like iki.fi?
04:12:26 <tuomov> (that one is only for finns)
04:13:27 <boegel> tuomov: probably, but I'd like to keep it simple :)
04:21:09 <Muad_Dib> what you looking for boegel?
04:21:43 <Muad_Dib> something like www.freerider.nl? :P
04:22:20 * boegel checks it out
04:23:15 <boegel> Muad_Dib: that's _reammy_ cheap
04:23:41 <boegel> s/reammy/really
04:23:49 <boegel> 2€ a month, damn :)
04:23:58 <boegel> Muad_Dib: do you have experience with them ?
04:24:03 <Muad_Dib> yup
04:24:28 <Muad_Dib> (including domain name its actually a bit more than 2 a month)
04:25:07 <boegel> Muad_Dib: yeah, but it's still quite cheap
04:25:07 <Muad_Dib> right now i host 3 websites with them
04:25:40 <boegel> and it's excluding vat
04:25:54 <boegel> Muad_Dib: which packet did you pick ? freerider or basicrider ?
04:27:01 <Muad_Dib> freerider
04:27:06 <Muad_Dib> anyway, am out for a bit
04:27:28 <boegel> bye
04:27:38 <boegel> really interesting those prices, unbelievable :)
04:48:21 <Itkovian> :-)
04:50:03 <Itkovian> 50MB disk space is a bit small, imo
04:50:33 <boegel> Itkovian: it's enough for me
04:50:46 <boegel> i only have 20mb at eduserv, and that fine for me
04:50:57 <boegel> it's cheap, so I'll manage :)
04:55:07 * boegel leaves to read his RTS book
05:25:17 <megaman> ello
05:25:53 <megaman> we're just starting to use haskell at uni and im wondering, are there ways to integrate haskell into other languages like c?
05:26:49 <Lunar^> megaman: Foreign Function Interface
05:26:56 <Lunar^> integrating with C is really easy
05:27:49 <megaman> *googles*
05:28:13 <shelarcy> http://www.reid-consulting-uk.ltd.uk/docs/ffi.html
05:28:17 <Lunar^> http://www.reid-consulting-uk.ltd.uk/docs/ffi.html
05:28:30 <Lunar^> I remember a tutorial on the Haskell Wiki
05:28:41 <musasabi> Is a nice tutorial http://www.haskell.org/tmrwiki/Bzlib2Binding
05:28:51 <Lunar^> http://www.haskell.org/hawiki/FfiTutorial
05:29:05 <Lunar^> http://www.haskell.org/hawiki/FfiCookbook
05:29:30 <megaman> thanks a lot :]
05:33:36 <megaman> hm, i have ghc 6.4 do i already have ffi ?
05:33:46 <nlv11757_> what is the access time of Data.Array?
05:33:56 <musasabi> megaman: yes.
05:34:00 <dons> 3
05:34:19 <nlv11757_> dons?
05:34:21 <megaman> hhe k
05:34:30 <dons> joke ;)
05:35:01 <dons> 'fast', perhaps?
05:35:26 <yain> i think it's 42, not 3
05:36:52 <boegel> yain: no, it's 14
05:36:59 <nlv11757_> i think the original joke was bad enough
05:39:38 <Itkovian> boegel, no it's 42. definitely.
05:41:12 <TheHunter> ime, it's pretty slow.
05:41:21 <nlv11757_> log n?
05:41:29 <TheHunter> no, it's O(1).
05:41:35 <thomasjo> how do I match the following:  *a;  **b;  &c;   -- I've got the first and last working, but having trouble with the "optional" pointer to pointer asterix
05:41:57 <nlv11757_> if i have to choose between a map or this array to hold an association between an integer and a Set
05:42:16 <TheHunter> is it one fixed array?
05:42:57 <Itkovian> grrr ...
05:43:15 <boegel> Itkovian: ?
05:43:38 <Itkovian> I am trying to wrap my brain around a problem ...
05:44:35 <boegel> a hard one as it seems
05:44:58 <Itkovian> well, no, but I want it done in a shiny way
05:45:20 <thomasjo> nevermind, I solved it :)
05:46:30 <boegel> Itkovian: that's always way cooler:)
05:49:48 <boegel> dcoutts: maybe you should mention that my code has been released, then you could add it to the gtk2hs website too
05:50:33 <nlv11757_> the array is being preprocessed and filled once
05:50:37 <nlv11757_> then it will only be accessed
05:50:41 <boegel> Lemmih: y0
05:50:52 <Lemmih> Greetings, boegel.
05:58:48 <TheHunter> nlv11757_, this sounds like you should use an array.
06:01:04 <nlv11757_> TheHunter, and for another purpose i need to iteratively update....would the array then still be what i need?
06:04:01 <TheHunter> no, definitely not. You can either use a purely functional map with O(log n) operations or use STArrays (within the ST monad).
06:04:09 <Itkovian> hmm, if I want to open multiple files, I can map openFile, but how do I map hGetContents to each handle?
06:05:50 <TheHunter> any reason you don't use readFile?
06:06:18 <Itkovian> well ...
06:06:21 <Itkovian> good point ;-)
06:06:30 <Itkovian> @type System.IO.readFile
06:06:33 <lambdabot> System.IO.readFile :: FilePath -> IO String
06:06:33 <Itkovian> ?
06:06:55 <TheHunter> you probably want mapM_.
06:06:59 <tuomov> zipM?
06:07:11 <TheHunter> @type mapM_ readFile
06:07:13 <lambdabot> mapM_ readFile :: [FilePath] -> IO ()
06:07:19 <TheHunter> @type mapM readFile
06:07:21 <Itkovian> right, that what's I was looking for
06:07:22 <lambdabot> mapM readFile :: [FilePath] -> IO [String]
06:07:43 <Itkovian> my brain told me that lift -> liftM, but it didn't quite make the connection to adding M after map :-)
06:07:49 <Itkovian> grr ...
06:08:21 <TheHunter> liftM is a misnomer.
06:08:33 <Itkovian> is there any difference in lazyness between hGetContents and readFile?
06:08:52 <TheHunter> they behave the same way.
06:09:03 <TheHunter> both unsafeInterleaveIOish.
06:09:07 <Lor> Huh?
06:09:13 <Lor> readFile is strict.
06:09:20 <Itkovian> ok.
06:09:28 <Lemmih> No it's not.
06:09:29 <TheHunter> no, it isn't.
06:09:43 <reffie> no, it ain't.
06:09:46 <Itkovian> hey guys, don't argue over this :-)
06:10:32 <Itkovian> je moet wel even stevig in je schoenen staan ... we bedoelen het niet slecht, maar afgaan zul je :-)
06:10:35 <Itkovian> lol
06:10:47 <Itkovian> niet waar hoor ... maar er wordt soms wel behoorlijk doorgevraagd
06:11:00 <Itkovian> ouch wrong bloody screen
06:11:04 <Itkovian> sorry
06:11:24 <Lor> Ah, right. Sorry.
06:11:40 <Itkovian> a Good Thing (tm) I wasn't talking on a pron channel, eh ;-)
06:15:21 <nlv11757_> uhm....switching to dutch suddenly
06:15:22 <nlv11757_> lol
06:15:27 <boegel> that was meant for me :) I'm glad we weren't talking about bribing you :)
06:15:42 <boegel> s/about/about me/
06:15:59 <nlv11757_> afgaan zul je boegel haha :S
06:16:07 <boegel> nlv11757_: hehe
06:18:26 <nlv11757_> doorgevraagd....bij een phd?
06:18:27 <nlv11757_> :)
06:19:23 <boegel> nlv11757_: I have to go in front of a jury to get money in able to do a Phd :) and Itkovian and his colleagues will prepare me for that
06:20:55 <nlv11757_> you have to go in front of a jury :O
06:21:14 <nlv11757_> i thought your professor or whatever just offered this place or not
06:21:34 <boegel> yeah, but that doesn't mean they have money
06:22:13 <Itkovian> most of our students have to try and get funded, so we have more money left for other stuff :-0
06:22:32 <boegel> like party's :p
06:27:11 <Itkovian> exactly
06:27:45 * boegel cheers
06:28:06 * boegel gets ready for some serious squash-activity with his gf
06:28:09 <nlv11757_> i thought they only offered it if there actually is money
06:28:20 <Itkovian> let's not follow that train of though boegel.
06:28:22 <nlv11757_> serious squash activity lmao
06:28:24 <Itkovian> +t
06:28:25 <nlv11757_> im to tainted
06:28:27 <nlv11757_> too
06:28:40 <Itkovian> nlv11757_: well, we like to give all good students an opportunity
06:29:02 <nlv11757_> TheHunter, you mentioned yesterday you often use groupBy in combination with const...can you explain to what end?
06:29:09 <boegel> Itkovian: what's wrong with it ? it's great fun
06:29:19 <nlv11757_> it underpaid fun
06:29:22 <nlv11757_> +s
06:29:42 <tuomov> is there some other kind?
06:29:51 <Itkovian> well ... let's just say my perverted mind doesn't cope too well with actual sports descriptions ...
06:30:02 <nlv11757_> yeah...well paid fun
06:30:17 <boegel> Itkovian: all students :) the fact that I had to ask myself, makes me just a student, not a good student :p
06:30:27 <nlv11757_> if im going to live on my own...this phd thing isnt going to cut it
06:30:42 <nlv11757_> moneywise
06:31:08 <Itkovian> boegel: you didn't do yr thesis at our dept, did you?
06:31:10 <boegel> nlv11757_: so am I, but I think I'll be able to manage
06:31:24 <boegel> Itkovian: err, no, does that matter ?
06:31:38 <TheHunter> @type \f -> groupBy (const $ not . f)
06:31:39 <Itkovian> nlv11757_: how much does it pay? we get about 1500 euro's a month iirc
06:31:41 <lambdabot> bzzt
06:31:49 <TheHunter> @type \f -> List.groupBy (const $ not . f)
06:31:51 <lambdabot> \f -> List.groupBy (const $ not . f) :: forall a.
06:31:51 <lambdabot>               (a -> Bool) -> [a] -> [[a]]
06:31:55 <Itkovian> boegel: otherwise kdb might have asked if he wanted to
06:31:58 <nlv11757_> 1500 euros clean?
06:32:21 <boegel> Itkovian: _might_
06:32:21 <TheHunter> nlv11757_, it splits the list before everything for which the condition holds.
06:32:22 <Itkovian> depends
06:32:45 <Itkovian> if you have a scholarship, you do not pay taxes, other side of the coin is that you can't deduct yr mortgage etc.
06:32:58 <boegel> I was quite pleased when I heared what it pays too... that was quite a plus for me
06:33:09 <Itkovian> otherwise, you cost much more, say twice the amount at least ...
06:33:23 * boegel leaves for squash
06:33:26 <nlv11757_> Itkovian, so basically im 28 still *just* managed. What if im going to live together with my gf etc
06:33:29 <boegel> see you guys in one hour or so
06:33:34 <nlv11757_> bye
06:33:35 <Itkovian> but then you pay taxes, and can bring in the full shitload (mortgage, life-ensurance, new windows, ,...)
06:34:05 <Itkovian> nlv11757_: I think you could live off the income, I know I did with my wife, though she worked too ...
06:34:07 <tuomov> umm.. living with someone is cheaper than alone
06:34:13 <Itkovian> yeah
06:34:16 <tuomov> small flats cost relative lot
06:34:17 <musasabi> 1500 euros is much.
06:34:24 <Itkovian> shared rent, shared eclectricity, shared water, ...
06:34:45 <Itkovian> 1500 is just enough if you want to live on yr own here ...
06:34:51 <nlv11757_> tuomov, gfs cost money, holidays etc.
06:35:05 <Itkovian> 500 for a flat, 100 for gas, elec, water, 250 for food, ...
06:35:08 <Itkovian> it adds up
06:35:10 <musasabi> Students here get 400e which is taxed, each month.
06:35:12 <nlv11757_> im not settling for *just* enough after all this study etc...so that's whats holding me back
06:35:30 <Itkovian> nlv11757_: yeah, but you get to do stuff you actually enjoy :-)
06:35:39 <tuomov> umm.. no. students get 259e plus at most 80% or ~180e for rent
06:35:51 <Itkovian> eh?
06:35:53 <Itkovian> crap
06:35:57 <nlv11757_> so i'll do stuff that is a bit simpler and less chalanging and suddenly im getting cars, laptops, etc
06:36:01 <musasabi> tuomov: which results in ~400e in total.
06:36:02 <nlv11757_> easy choice
06:36:13 <Itkovian> ah well ...
06:36:17 <tuomov> depends on your housing situation
06:36:18 <Itkovian> each hos own I guess
06:36:23 <nlv11757_> ow ofcourse
06:36:30 <Itkovian> we rented for two years, now we pay off a loan on a house
06:36:44 <Itkovian> if one of us would lose the job, we'd be in trouble I think
06:36:53 <nlv11757_> im just not a purist enough to give up on relax living
06:37:25 <Itkovian> hehe
06:37:41 <tuomov> umm.. studying was much more relaxed than working in a shitty it company...
06:38:23 <nlv11757_> TheHunter, i see know. it's just grouping without relating the separate elements in your boolean condition...you just want to judge each individual elemtn
06:39:03 <nlv11757_> tuomov, maybe, but studying also meant not having to pay for anything in my case....so then 1500 would be fine
06:39:22 <nlv11757_> know=now
06:40:32 <nlv11757_> @type Control.Arrow.***
06:40:34 <lambdabot> bzzt
06:40:37 <nlv11757_> @type (Control.Arrow.***)
06:40:39 <lambdabot> (Control.Arrow.***) :: forall (a :: * -> * -> *) c' c b' b.
06:40:39 <lambdabot>         (Control.Arrow.Arrow a) =>
06:40:39 <lambdabot>         a b c -> a b' c' -> a (b, b') (c, c')
06:45:02 * Itkovian tries to make sense out of the type def ...
06:45:50 <nlv11757_> *** is so perfect for handling tuples
06:51:42 <Itkovian> erm ...
06:51:50 <Itkovian> elaborate please
06:52:34 <TheHunter> @pl \(x, y) -> (f x, g y)
06:52:35 <lambdabot> f *** g
06:54:34 <nlv11757_> @plugs head *** sum . zip . groupBy ((flip (.) fst) . (==) . fst) . sort $ [(1,2), (2,3), (1,1), (2,4)]
06:54:35 <lambdabot> Couldn't match `[a]' against `[b] -> [([(a1, b1)], b)]'
06:55:27 <nlv11757_> @plugs head *** sum . map zip . groupBy ((flip (.) fst) . (==) . fst) . sort $ [(1,2), (2,3), (1,1), (2,4)]
06:55:28 <lambdabot> Couldn't match `([a], [(a1, b)])' against `[t]'
06:55:50 <sylvan> is *** in the standard libs?
06:56:08 <nlv11757_> @plugs head *** sum . map unzip . groupBy ((flip (.) fst) . (==) . fst) . sort $ [(1,2), (2,3), (1,1), (2,4)]
06:56:09 <lambdabot> Couldn't match `([a], [(a1, b)])' against `[t]'
06:56:37 <nlv11757_> @plugs map (head *** sum . unzip) . groupBy ((flip (.) fst) . (==) . fst) . sort $ [(1,2), (2,3), (1,1), (2,4)]
06:56:38 <lambdabot> Couldn't match `[a]' against `([a1], [b])'
06:56:42 <nlv11757_> almost there
06:58:44 <nlv11757_> @plugs groupBy ((flip (.) fst) . (==) . fst) . sort $ [(1,2), (2,3), (1,1), (2,4)]
06:58:45 <lambdabot> [[(1,1),(1,2)],[(2,3),(2,4)]]
06:59:16 <nlv11757_> @plugs map ((head *** sum) . unzip) . groupBy ((flip (.) fst) . (==) . fst) . sort $ [(1,2), (2,3), (1,1), (2,4)]
06:59:17 <lambdabot> [(1,3),(2,7)]
06:59:22 <nlv11757_> arghhhh parenthesis
06:59:44 <nlv11757_> *** binds weaker then .
06:59:53 <nlv11757_> sylvan, no its in Control.Arrow
07:01:30 <Itkovian> gotta go, ttyl
07:01:50 <nlv11757_> later
07:01:57 <Itkovian> thx for the explanation
07:02:05 <nlv11757_> no prob, i hope it was clear
07:02:14 <Itkovian> I'll read it on the train :-)
07:02:14 <nlv11757_> im kinda chaotic at times
07:02:39 <nlv11757_> @plugs fst &&& id $ (1,2)
07:02:40 <lambdabot> (1,(1,2))
07:02:43 <nlv11757_> awesome
07:09:10 <nlv11757_> i find arrows more and more usefull to capture common patterns in my functions
07:09:17 <basti_> hiya
07:10:04 <TheHunter> off-topic question: does anyone know a quick way to get the space a directory on an ftp server consumes?
07:10:27 <TheHunter> hiya basti_
07:15:24 <nlv11757_> holy **& im not surprised this bread tastes ...odd...its a week over date
07:16:06 <nlv11757_> ow well....i just ate 6 sandwiches of it :S
07:18:47 <basti_> if you grow green pimples, call the doctor
07:19:10 <nlv11757_> i pasted enough peanut butter on it for me to detect it on the ninth sandwich lol
07:21:46 <nlv11757_> first eight were clouded by the taste of peanutbutter i guess
07:33:31 <nlv11757_> @plugs fst . head &&& id $ [1..10]
07:33:32 <lambdabot> <Plugins.Eval>:1:
07:33:32 <lambdabot>   No instances for (Num (a, b), Enum (a, b))
07:33:32 <lambdabot>   arising from the literal `10'
07:34:01 <nlv11757_> @plugs fst . head &&& id $ [(i,j) | i<- [1..10], j <- [1..10]]
07:34:02 <lambdabot> (1,[(1,1),(1,2),(1,3),(1,4),(1,5),(1,6),(1,7),(1,8),(1,9),(1,10),(2,
07:34:02 <lambdabot> 1),(2,2),(2,3),(2,4),(2,5),(2,6),(2,7),(2,8),(2,9),(2,10),(3,1),(3,2)
07:34:02 <lambdabot> ,(3,3),(3,4),(3,5),(3,6),(3,7),(3,8),(3,9),(3,10),(4,1),(4,2),(4,3),(
07:34:02 <lambdabot> 4,4),(4,5),(4,6),(4,7),(4,8),(4,9),(4,10),(5,1),(5,2),(5,3),(5,4),(5,
07:34:02 <lambdabot> 5),(5,6),(5,7),(5,8),(5,9),(5,10),(6,1),(6,2),(6,3),(6,4),(6,5),(6,6)
07:34:03 <lambdabot> ,(6,7),(6,8),(6,9),(6,10),(7,1),(7,2),(7,3),(7,4),(7,5),(7,6),(7,7),(
07:34:05 <lambdabot> 7,8),(7,9),(7,10),(8,1),(8,2),(8,3),(8,4),(8,5),(8,6),(8,7),(8,8),(8,
07:34:07 <nlv11757_> ow oops
07:34:07 <lambdabot> [3 @more lines]
07:34:14 <nlv11757_> @plugs fst . head &&& id $ [(i,j) | i<- [1..2], j <- [1..2]]
07:34:16 <lambdabot> (1,[(1,1),(1,2),(2,1),(2,2)])
07:41:14 <basti_> is there a haskell webbrowser?
07:42:12 <basti_> i'm fed up with these 5 mb OO zealot s--t things
07:42:12 <TheHunter> written in haskell or haskell-scriptable?
07:42:16 <basti_> written in haskell
07:42:39 <TheHunter> i'm not aware of any.
07:42:49 <TheHunter> @google haskell browser
07:42:51 <lambdabot> http://www.haskell.org/pipermail/haskell/2002-March/009186.html
07:43:53 <basti_> say, concerning arrows... what advantages could someone have writing some computation as an arrow?
07:44:02 <basti_> besides making the code look like noise
07:45:00 * mwc wonders how long the ghc bootstrap will take this time
07:45:59 <musasabi> basti_: it is very cool unless you try to use it for something.
07:46:11 <basti_> musasabi: ;)
07:46:27 <basti_> i mean there should be some use, no?
07:46:34 <TheHunter> if the arrow is an instance of ArrowApply - none, otherwise, it restricts what kind of stuff the user can write, so you can access thing you couldn't in a monadic framework.
07:46:42 <basti_> btw, theres a "wwwbrowser" rumored to be existant
07:47:01 <TheHunter> this is due to the fact that arrows only give you a "first-order" DSL.
07:47:08 <basti_> DSL?
07:47:16 <musasabi> it is kind of monads without do-notation.
07:47:19 <TheHunter> domain-specific language
07:47:22 <basti_> ah
07:47:41 <musasabi> the arrow syntax seems to need more work to make it usable.
07:47:46 <basti_> hmmm
07:48:12 <basti_> im not concerned about the notation, rather about what use an arrow framework would be.
07:48:43 <basti_> in Yampa, there's memory leaks mentioned
07:48:47 <basti_> i didn't understand the why
07:49:21 <basti_> oh wwwbrowser uses fudgets -.-
07:49:35 <TheHunter> basti_, did you read hughes' paper?
07:49:49 <basti_> arrows monads and something?
07:50:07 <TheHunter> @google hughes haskell arrows
07:50:08 <lambdabot> http://www.haskell.org/arrows/
07:50:16 <TheHunter> grr
07:50:41 <basti_> ah got it
07:50:43 <TheHunter> well [Hug00], "Generalising Monads to Arrows"
07:50:44 <basti_> generalizing
07:50:57 <basti_> I'll have a look then
07:51:09 <basti_> AFTER I RESTARTED FIREFOX
08:40:03 * basti_ tries to summon Philippa_
08:40:18 * boegel kicks Philippa_ in the butt
08:40:26 <boegel> tha will summon her :)
08:40:38 <basti_> dont chase the few girls away
08:41:09 <boegel> basti_: I don't have a problem with chasing away girls, I have a gf :p
08:41:19 <boegel> btw, chasing away Philippa_ won't be that easy :)
08:41:53 * basti_ has too but you never know
08:42:04 <boegel> lol :)
08:42:21 <boegel> the only reason you want Philippa_ to stay is for backup ? :D
08:42:38 <basti_> j/k!
08:42:55 <basti_> i wanted to ask her something about something we were talking about
08:44:37 <boegel> wow, boegel is paying people to contribute to open source projects
08:44:51 <boegel> s/boegel/google
08:44:53 <boegel> heh :)
08:44:55 <basti_> lol
08:45:12 <boegel> that was a funny one :)
08:45:24 <boegel> for the record: I'm _not_ paying people, okay ? :)
08:45:27 <basti_> ok
08:46:38 * boegel helps Lemmih finding his terminal
08:54:36 <arjanoosting> @seen Igloo
08:54:37 <lambdabot> Igloo is in #haskell. Last spoke 18 hours, 20 minutes and 51 seconds
08:54:37 <lambdabot> ago.
08:56:59 <Igloo> Hello
08:58:19 <arjanoosting> Hi Igloo
08:58:27 <Igloo> Hi arjanoosting
08:59:02 <arjanoosting> I just tried to compile DrIFT with nhc, but the resulting binary dies with a OS allocated a heap in high memory
08:59:34 <arjanoosting> This even happens for a simple "Hello world style" Haskell program
09:00:11 <Igloo> What arch?
09:00:17 <Igloo> And what gcc?
09:00:29 <arjanoosting> Am I doing something wrong? i386
09:00:52 <arjanoosting> gcc (GCC) 3.3.5 (Debian 1:3.3.5-13)
09:01:53 <Igloo> Hmm
09:02:26 * arjanoosting is very confused :)
09:02:46 <Igloo> It's a known problem, but those versions should be fine
09:03:29 <arjanoosting> yeah I thought so
09:03:50 <arjanoosting> Maybe some problem with my kernel version????
09:03:57 <Igloo> What kernel do you have?
09:04:05 <Igloo> Oh, and what version of libc?
09:05:04 <arjanoosting> kernel version: 2.6.11-2-stardust, self compiled from kernel-source-2.6.11
09:06:19 <arjanoosting> libc version: 2.3.2.ds1-22
09:06:25 <Igloo> I think malcolm has a student working on fixing it anyway, so I'm not going to spend time on it myself
09:06:54 * Igloo has no idea why it works for me and not you
09:07:10 * arjanoosting neither
09:08:18 <arjanoosting> And I just wanted to replace ghc6 with ghc6 | nhc98 in the build dependencies of drift so it will build on more architectures
09:09:06 <arjanoosting> well i will do that anyway and hope the build daemons will produce good binaries :)
09:09:34 <arjanoosting> got to go
10:30:23 <goron> Can anyone point me to a paper on JIT compilation? I "know" normal code generation, but it seems rather hard to do JIT inplace while the program is running.
10:34:33 <TFK> Can't say I know any papers, but there are open source JIT compilers to learn from - Psyco for Python, for example.
10:36:40 <goron> TFK: I will check it out, but "the code is clear enough"-documentation generally does *not* make me happy (which is common for open-source software).
10:37:09 <TFK> Heh. Well, I didn't read the code, so can't say anything about it.
10:41:16 <lispy> goron: when you're a developer it's hard to know what should become documentation.  Writing good documentation is hard even for technical writers that have interaction with devs.  And finally, if you don't like the documentation for open source software, contribute.
10:43:07 <lispy> i can't think of any software project that would turn down real documentation over using the code as the documentation
10:43:43 <goron> lispy: I know writing documentation is hard. You can stripe the open-source part. Only very professional companies have good documentation (that's my experience). GNU manpages are most of the time bad. BSD pages are a lot better.
10:44:31 <lispy> GNU man pages are effectively just references, which is too bad
10:44:44 * CosmicRay discovers that Network.CGI is crap
10:44:49 <lispy> i haven't seen the BSD pages
10:46:13 <goron> CosmicRay: You can use it to output HTML. (at least two years ago) (but I guess you expected more) ;)
10:49:32 <goron> TFK: The technical paper of Psyco starts nice. I hope it stays that way :D
10:49:56 <TFK> goron, ;-)
10:50:08 <TFK> CosmicRay, how come?
10:55:08 <CosmicRay> TFK: see my post to cafe, but in general: it doesn't support output other than text/html, provides no control over the HTTP headers sent (meaning things like cookies are impossible), provides no provision for output generation other than via Text.Html
10:56:39 <TFK> Heh. Will do.
10:57:12 <CosmicRay> these all combine to make it pretty much useless for anything interesting :-)
10:58:14 <TFK> Sounds like it.
11:17:23 <analpear> hey could anyone explain to me the idea of recursive data types
11:17:27 <analpear> im really not understanding it, lol
11:18:43 <Lemmih> Is there something in particular you don't understand?
11:19:43 <analpear> im looking at this data type
11:19:44 <analpear> data StackInt = EmptyStack|StackC Int StackInt
11:20:01 <analpear> so it's either an EmptyStack
11:20:18 <analpear> or an integer and another StackInt .. ?
11:20:27 <Lemmih> Exactly.
11:20:52 <analpear> so then you have integer and integer and integer ... until you hit empty stack?
11:20:55 <Igloo> integer is a confusing way to talk about Ints as Integer is a different type
11:21:10 <Lemmih> Yes.
11:21:29 <analpear> so what is Int Int Int Int ...
11:21:34 <analpear> just a list?
11:22:00 <analpear> like [1,2,3,4] is a StackInt ?
11:22:05 <mauke> Int Int Int Int is an error
11:22:13 <mauke> [1,2,3,4] is a list of Ints
11:22:48 <analpear> so StackInt is what?
11:23:11 <mauke> a type
11:23:32 <analpear> can you give an example which fulfills its properties
11:23:54 <mauke> you mean a value of type StackInt?
11:24:00 <analpear> yeah
11:24:05 <Lemmih> StackC 10 (StackC 20 EmptyStack)
11:24:10 <mauke> EmptyStack  -- there
11:24:49 <bourbaki> moin
11:30:35 <basti_> hi all
11:32:11 <Itkovian> evening
11:32:28 * basti_ now understands which kind of mem leaks don't happen in arrows now
11:33:53 <Lemmih> Now that's a good thing to know now (:
11:35:17 * basti_ just doesn't think this sort of mem leaks happens in sound processing, which seemed to be what Philippa implied.
11:50:23 <xkb> hi
11:50:43 <xkb> is it possible to change the position of elements created by latex's /maketitle?
11:50:59 <xkb> I need to fit the title within a specified box
11:52:00 <basti_> as a general (ugly) hack, try \vspace{3mm} or hspace or something along that line
11:52:13 <basti_> probably there's a better solution, but you'd need a haskell wizard for that
11:55:04 <basti_> uhm latex
11:55:31 <basti_> then it's possible sometimes to create a \parbox around things, position this and latex might (hopefully) adjust everything the usual way inside that parbox
11:55:44 <basti_> xkb...
12:00:09 <xkb> hmm
12:00:16 <xkb> Ill check that \parbox out
12:00:28 <xkb> or create a frontpage in word (yuck)
12:01:09 <basti_> ugh
12:01:10 <basti_> dont
12:01:11 <basti_> ;)
12:02:43 <xkb> hehe
12:03:13 <basti_> it IS possible to adapt things from .sty and .cls files, but it's generally not worth the effort
12:03:21 <basti_> (copy & modify)
12:03:37 <basti_> if its one instance that you will use many times it might
12:03:47 <xkb> hmm.. who invented that story about a cat in a box, where the observer determines the state of the cat by looking in the box.
12:03:57 <xkb> It has to do with Quantum mechanics
12:04:24 <xkb> I tought it was Scheidegger
12:04:58 <basti_> schrödinger
12:05:02 <xkb> ah
12:05:06 <xkb> that was the one indeed
12:05:08 <basti_> there's a heidegger which is a philosopher
12:05:12 <basti_> (was)
12:05:21 <basti_> if you can't type ö, use oe
12:40:07 <boegel> hey bourbaki
12:40:37 <boegel> bourbaki: seen my brand new HRay website ? with Haskell source code !
12:42:13 <xkb> boegel: did you finish your thesis allready?
12:43:33 <boegel> xkb: yes
12:43:52 <boegel> xkb: check out the result @ http://studwww.ugent.be/~kehoste/thesisPublic/website
12:45:54 <bourbaki> boegel: no :)
12:45:54 <Lemmih> Using Haskell as the scene description language would have been neat.
12:46:44 <boegel> Lemmih: yeah, but I didn't have time for it
12:46:51 <boegel> idea's are welcome to improve it :)
12:46:54 <boegel> @wiki HRay
12:46:55 <lambdabot> http://www.haskell.org/hawiki/HRay
12:47:57 * Lemmih is toying with a typed DSL for generating povray scenes.
12:48:10 * boegel reboots his computer
12:49:27 <sylvan> boegel: If you already have plane-intersection down, why not implement a BSP-tree? Then polygons! Then millions of polygons inserted in the BSP-tree!
12:50:43 <wagle> sylvan: boegel is rebooting
12:50:57 <sylvan> ah... didn't see that =)
12:51:04 <sylvan> I'll ask him again when he returns then...
13:13:33 <goron> Is there some introduction to JIT compilation? I would like to know how the run-time generated code is called instead of the slow interpretive code.
13:13:55 * boegel is listening to "Metallica - St. Anger" -> what a song ! :) gotta love those drums
13:16:52 <sylvan> boegel: If you already have plane-intersection down, why not implement a BSP-tree? Then polygons! Then millions of polygons inserted in the BSP-tree!
13:17:39 <boegel> sylvan: seems like a cool idea :)
13:18:22 <boegel> only, then I would need a way to 'load in' a BSP tree containing polygons... can't imagine to do that with a description file :)
13:18:23 <yain> don't settle for millions.
13:18:37 * boegel warns HRay is quite slow
13:25:14 <bourbaki> :)
13:25:34 <boegel> sylvan: feel free to implement it yourself ;)
13:26:49 <sylvan> maybe I will if I don't find a job this summer :-)
13:27:20 <sylvan> You could, from the description file, reference a model in some standard format...
13:28:54 <boegel> sylvan: elaborate (I'm not sure what you mean)
13:29:07 <boegel> you mean like 3DS or something ?
13:31:01 <sylvan> yes... or VRML or OBJ
13:31:12 <boegel> sounds cool
13:31:19 <sylvan> VRML is prettys simple...
13:31:36 <sylvan> VRML-ish data could probably be put inside the description file
13:31:43 <boegel> hmm, cool
13:31:54 <sylvan> (basically it's a list of vertices, and then a list of indices to those vertices which builds the actual model)
13:32:35 <Itkovian> grr
13:32:41 <Itkovian> the bloody disk is junk
13:32:54 <Itkovian> and my other machine has a borked power supply
13:33:26 <boegel> Itkovian: meeting mr. Murphy today, or just bad luck ?
13:34:38 <Itkovian> we're acquianted, let's say
13:34:44 <boegel> :)
13:34:54 <Itkovian> btw, koen replyed yet?
13:35:11 <boegel> sylvan: http://studwww.ugent.be/~kehoste/square.wrl
13:35:26 <boegel> sylvan: vrml 1.0 file for a box in blender
13:35:38 <boegel> Itkovian: yes he has, he just said I can choose when I'd like to come over
13:35:51 <boegel> reallt friendly, as usual :) nice man
13:36:12 <Itkovian> he is very persuasive, I warn you...
13:36:23 <Itkovian> anybody have a left over disk?
13:36:28 <boegel> how do you mean ? why should I be afraid ?
13:36:28 <Itkovian> 2 gig will suffice
13:36:45 <boegel> Itkovian: I might have, but I don't know if they still work :)
13:36:47 <Itkovian> I didn't say u should be afraid. I said he is very persuasive
13:36:53 <Itkovian> pfft
13:37:05 <Itkovian> let's open this can o' worms
13:37:06 <boegel> I have 2 or 3 30gb disks, but haven't had a chance to test 'em
13:37:31 <boegel> Itkovian: in what way would he persuade me into something ?
13:39:01 <Itkovian> ok, I just saw ligthning come out of the PS
13:39:05 <Itkovian> damn
13:39:18 <Itkovian> anyway, he'd persaude you to do a PhD :-)
13:39:27 <Itkovian> which is, after all, the point
13:40:03 <boegel> Itkovian: no need for that, I'm planning on doing one already :)
13:40:04 <Itkovian> smells burned
13:40:13 <sylvan> boegel: Yeah, you ahve the coordinates and then the indices in there.. And then some other info about the scene...
13:40:17 <boegel> Itkovian: PS? Playstation ? :)
13:40:50 <boegel> sylvan: I guess I don't need that information, I can just specify that stuff with my scene description stuff
13:41:15 <boegel> sylvan: this is a really good suggestion, I've added it to the HRay wiki (if that's ok) :)
13:41:20 <sylvan> yeah.. you need the 8 vertices and the indices for the six quads...
13:41:26 <sylvan> sure
13:41:57 <sylvan> (you should probably stick with triangles though)
13:42:00 <Itkovian> poer supply
13:42:03 <Itkovian> power
13:42:50 <boegel> what kind of thing are you frying ? :)
13:43:14 <boegel> sylvan: why triangles ? quads are more used in 3d modelling
13:43:40 <boegel> and actually, I shouldn't make assumptions about the number of vertices in a polygon
13:45:04 <boegel> any suggestions on how I should construct a datatype to represent polygons in Haskell ?
13:45:11 <boegel> I've been thinking about that for a while
13:45:41 <boegel> I've read about this format, but can't remember it's name... something with "wing" in it ? can't remember
13:45:44 <sylvan> boegels: nah, triangles are definatly more widely used. The biggest reason is that a quad can get corrupted since the four points may not lie in the same plane. Triangles are more general and versatile
13:46:11 <sylvan> Also, 3D hardware only renders triangles
13:46:35 <sylvan> so if you want, some time in the future, to support a preview mode or something, triangles are sweet
13:46:55 <sylvan> also, make triangels work and you can tesselate any n-vertex polygon to triangles
13:47:23 <boegel> sylvan: true, I made a little project on that for uni
13:49:25 <boegel> yo FPBiker
13:51:53 <nmoore> hi, i want a type synomym representing a matrix as an array of Ints, is this OK: type Matrix = Array Int Int, I'm a bit concerned that haskell will view Array as a brand new constructor
13:52:54 <boegel> nmoore: no, that will only happen with 'datatype'
13:53:24 <boegel> type is used for giving names to existing types (as in your example)
13:53:58 <nmoore> boegel: OK, thanks, i think i understand, so data Matrix = Array .. is wrong
13:54:20 <boegel> yeah
13:54:36 <boegel> nmoore: data Matrix = Matrix (Array Int Int) would do it too though
13:54:58 <boegel> that creates a type constructor 'Matrix' too, next to the Matrix type
13:55:07 <nmoore> right
13:55:57 <nmoore> i've been using lists of lists, but this gets slow very quickly, especially as the application needs to scan these repeatedly
13:57:01 <boegel> Array is crazy fast :) I should use it in my ray tracer too actually :)
13:57:41 <nmoore> i've noticed that, in common with lists, a larger index takes (slightly) longer
13:57:55 <nmoore> but it's nowhere near as bad
14:01:20 <boegel> sylvan: you got me interested in implementing all this :)
14:02:51 <FPBiker> boegel: Just got back from a meeting... checked out your website yesterday - you're ahead of schedule :-) Haven't had time to look at your code/approach closely
14:03:09 <FPBiker> boegel: Will get around to that soon.
14:03:55 <boegel> FPBiker: ahead of schedule ? what do you mean ?
14:04:17 <FPBiker> you were planning to have it up today but then you had it up yesterday..
14:06:22 <boegel> FPBiker: I had it up at 00:30 today (my time) :)
14:06:46 <boegel> being ahead of schedule is a good thing, right ?
14:06:47 <FPBiker> boegel: ahh... of course... You're in Europe :-)
14:07:01 <FPBiker> it is a very good thing... wish I could say the same about me.
14:07:16 <tuomov> It's only 00:07 today!
14:08:17 <FPBiker> You a student, tuomov?
14:08:25 <wagle> tuomov: thats tomorrow.  its still today here
14:08:39 <Itkovian> lol
14:08:50 <FPBiker> in that case, I might still be on "yesterday" :-)
14:09:23 <tuomov> FPBiker: well, ummm, officially not..
14:10:43 <FPBiker> tuomov: What does that mean? You do courses on the sly? :-) Anyways, I just asked since you're up past midnight...
14:11:34 <tuomov> I should eventually be grad. student, but for the moment unemployment benefits get me better pay...
14:11:55 <FPBiker> nice :)
14:12:56 <tuomov> not that that has anything to do with when I'm up
14:13:09 <tuomov> I used to go to sleep around 3:00 when I still had that shitty job..
14:14:31 * boegel has built up a problem of going to bed early
14:14:36 <FPBiker> going to sleep at 3 is fine as long as you're doing something fun...
14:14:45 <boegel> I hope my gf will be able to cope with that when we go to live together
14:16:56 <FPBiker> boegel: she probably won't have any issues unless she's more of a party person...
14:17:34 <FPBiker> boegel: the gallery is very cool... makes me want to try out the stuff
14:18:01 <boegel> FPBiker: no, she's a early-to-bed person :)
14:18:34 <boegel> FPBiker: that's the whole idea ! try it ! have fun with it ! curse on it ! :)
14:19:02 <FPBiker> boegel: As soon as I finish up my course stuff... you'll hear from me :-)
14:20:06 <MachinShin> hey +
14:20:34 <FPBiker> off to get some food... take care all.
14:21:01 <boegel> bye
14:21:03 <boegel> hey MachinShin
14:31:50 <wagle> whats best for processing XML?
14:32:06 <boegel> HaXML probably
14:32:24 <boegel> atleast, that's what I've heard :D
14:32:42 <wagle> what about Haskell XML Toolbox?
14:37:40 <wagle> hmm.. cduce looks interesting
14:37:58 <cpjvelde> it is, functional isnt it?
14:38:21 <cpjvelde> when i had to use HaXML, cduce was not usable yet
14:38:28 <cpjvelde> but it did look promising
14:38:46 <reffie> http://www.freebsd.org/projects/summerofcode.html
14:38:51 <wagle> "Although CDuce is a general programming language, it features several characteristics that make it adapted to XML type-safe documents manipulation. The notion of XML types (usually expression in a DTD or an XML Schema) plays a central role in CDuce."
14:39:08 <boegel> anybody in here familiar with Scheme ?
14:39:19 <wagle> boegel: yes
14:39:52 <boegel> wagle: I've found a VRML 1.0 parser in Scheme, maybe that might help me with creating a parser for it in Haskell
14:39:56 <Itkovian> reffie: that looks neat
14:40:07 <boegel> wagle: any tools to port Scheme to Haskell by any chance ? :)
14:40:43 <arjanoosting> the Summor Of Code initiative from google is very interresting
14:40:56 <boegel> Itkovian: if you join a project like that, google pays you like 4500$ if you finish it
14:41:06 <Itkovian> yeah
14:41:09 <arjanoosting> s/Summor/Summer/
14:41:13 <Itkovian> _if_ you finish it :-)
14:41:15 <boegel> that's a lot of money
14:41:24 <boegel> Itkovian: yeah, that's the idea :)
14:41:27 <Itkovian> it's about e4000
14:41:32 <boegel> but I guess it's like a summer job at home
14:41:42 <Itkovian> could buy my new windows ...
14:41:55 <boegel> Itkovian: :)
14:41:59 <arjanoosting> now if there were any haskell "Summer of Code" projects....
14:42:09 <Itkovian> hehe
14:42:16 <reffie> hehe
14:42:30 <boegel> @google Haskell "Summer of code"
14:42:31 <lambdabot> No result found.
14:42:34 <boegel> :(
14:42:35 <boegel> :)
14:42:59 <wagle> boegel: only tool i know of is my brain.  i'm not up to date at all on the current tools for that
14:44:13 <wagle> if you just mimic the s-expressions, it should be easy, but then you have all the dynamic "type checks"
14:45:26 <Itkovian> night
14:45:32 <boegel> wagle: I don't know shit about Scheme, and I'm not planning to learn it
14:45:45 <boegel> g'night Itkovian, sleep tight and say hi to your wife from me :)
14:45:45 <wagle> unlike in haskell, the scheme programmer doesnt necessarily explicitly tell the compiuler what the data structures are
14:46:25 <boegel> wagle: it has like 1400 lines of Scheme, a bit much to just translate, right ? :)
14:46:58 <wagle> i'm fighting the urge to translate acl2 from common lisp to haskell..
14:47:13 <wagle> 1400 lines is small.. 8)
14:47:25 <boegel> wagle: well, then can you help me with it ? :D
14:48:13 <wagle> why does it need to be in haskell?
14:49:48 * boegel thinks
14:50:04 <boegel> because I would like to combine it with my current parser (I guess)
14:50:36 <boegel> and also, I don't need all of the VRML stuff, just parts of it (probably :))
14:51:46 <boegel> I guess creating a parser of my own, using Happy, shouldn't be too hard really
14:52:00 <boegel> but then I'd need a BNF syntax or so for VRML 1.0
14:52:59 <wagle> (1) write a haskell interpreter in haskell (2) write a scheme interpreter in haskell (3) partially evaluate the scheme interpreter with the haskell inverpreter as host and the vrml program as static input to produce a vrml program written in haskell
14:53:42 <wagle> i probably didnt say that right, but the basic idea should be there
14:54:55 <boegel> vrml isn't a programming language :) it's a description language
14:55:57 <chucky> boegel: I'm pretty sure there are people who would argue you're wrong.
14:56:25 <chucky> boegel
14:56:29 <boegel> chucky: oh ?
14:56:29 <chucky> sorry messed up. :)
14:56:36 <chucky> thought you were talking about VHDL
14:56:46 <boegel> hehe :)
14:56:58 <wagle> http://flint.cs.yale.edu/spam/abstract/hudak2.html
14:57:17 <chucky> memo for myself: Think before you speak
14:57:49 <boegel> wagle: cool
14:58:11 <boegel> Paul Hudak rules !
14:59:10 <boegel> wagle: is this paper to be written ? or is it available somewhere ?
14:59:31 <wagle> i dunno..  i just googled for vrml haskell
15:00:22 <yain> paper is referring to mysterious friday.
15:00:28 <yain> must be friday 13th
15:00:56 <wagle> i'm finding 1995-1996 time stamps
15:02:34 <wagle> and that activevrml might be a microsoft product (conal elliot paper, for example)
15:02:43 <wagle> s/be/have been/
15:03:42 * boegel tries to find a VRML 1.0 standard specification
15:04:47 <wagle> what about v2?
15:05:11 <wagle> oh well, back to my regularly scheduled job queue
15:06:04 <boegel> wagle: blender spits out VRML 1.0, so that will do
15:06:18 <boegel> I only need it to describe polygons
15:11:18 <boegel> I'm out, off to bed
15:11:24 <boegel> g'night everyone
15:11:49 <Lemmih> night there
15:20:29 <analpear> what does Ord mean?
15:20:37 <analpear> class of ordered types
15:20:42 <analpear> but what is this?
15:22:15 <wagle> @info Ord
15:22:17 <lambdabot> Unknown command, try @listcommands.
15:22:27 <Lemmih> What is what?
15:23:46 <FPBiker> if your datatype is an instance of the Ord class, you can define custom behavior for comparison and then compare the values of the type using operators like <, <=, > etc
15:24:51 <analpear> @info take
15:24:52 <lambdabot> Unknown command, try @listcommands.
15:25:04 <analpear> @info drop
15:25:04 <lambdabot> Unknown command, try @listcommands.
15:25:56 <mauke> @type take
15:25:59 <wagle> look in the prelude for the definition of "class Ord"
15:26:02 <lambdabot> take :: forall a. Int -> [a] -> [a]
15:27:06 <wagle> or do :i Ord in your haskell interpreter
16:37:28 <dcoutts_> this must be a ghc bug...
16:38:05 <dcoutts_> on windows when using a ghc compiled program and passing +RTS {rts options} -RTS
16:38:36 <dcoutts_> the prog runs fine if I say +RTS -M100m -RTS to give it a maximum 100Mb heap, but...
16:39:09 <dcoutts_> if I say +RTS -H720m -M750m -RTS then the prog runs out of heap space !!!
16:39:30 <dcoutts_> that must be wrong since -H is the initial size of the heap and -M the maximum size
16:39:50 <dcoutts_> the ghc rts doesn't behave like that on linux.
16:46:07 <resiak> dcoutts_: I have heard talk of you cutting the memory consumption of the parser used in compiling gtk2hs by a factor of ten. *applauds*
16:47:52 <_metaperl> Hello, i'm getting an error from GHC: http://www.nomorepasting.com/paste.php?pasteID=41041
16:48:14 <_metaperl> my defiend function is not being found
16:48:32 <_metaperl> defined
16:48:58 <mauke> huhu
16:49:02 <mauke> OverLap?
16:49:08 <mauke> don't you mean Overlap?
16:50:17 <wagle> case must match
16:50:25 <wagle> _metaperl: ^^
16:51:51 <_metaperl> hmm
16:52:03 <_metaperl> mauke: i'll look into it . thanks
16:52:30 <_metaperl> yes that was it... I'm not used to StudlyCaps
16:52:45 <resiak> then_use_underscores ?
16:52:48 <_metaperl> that's the one b0rked thing about Haskell programming.. the only thing
16:52:51 <wagle> StudLyCaps
16:52:58 <_metaperl> but most people using studly_caps
16:53:18 <_metaperl> in haskell
16:53:34 <wagle> need case consistancy
16:53:42 <Pseudonym> StudlyCaps for type names and camelCase for symbol names usually.
16:54:00 <arjanb> i think caps should be irrevalent except for the first character
16:54:28 <wagle> no WAY should thisVar and thisvar be allowed
16:54:34 <wagle> in the same program
16:54:39 <Pseudonym> I disagree.
16:54:51 <Pseudonym> How would you distinguish between penIsland and penisLand?
16:54:51 <wagle> and be the SAME var?
16:55:46 <reffie> haha
16:56:49 <Pseudonym> That's an artificial example, but I've seen similar when you use Hungarian notation.
16:56:55 <Pseudonym> WHich admittedly is dumb.
16:56:59 <yain> thank god, it's not using hungarian notaion
16:57:01 <yain> oh.
16:57:06 <arjanb> well inconsistent naming isn't good but a warning would be less annoying than a compile error
16:57:08 <reffie> i prefer using "_"
16:57:22 <reffie> pen_island penis_land
16:57:25 <mauke> haskell should allow -
16:57:28 <_metaperl> Pseudonym: that book by Alexandrescu was blistering
16:57:35 <Pseudonym> Oh, you read it?
16:57:42 <_metaperl> "Modern C++ Design" --- no I browsed it at a bookstore
16:57:43 <Pseudonym> Has your brain recovered yet?
16:57:48 <_metaperl> but it really changed my opinion about C++
16:57:51 <Pseudonym> Right.
16:57:56 <_metaperl> Perl6 is basically a wanna-be C++
16:57:57 <mauke> pen-island penis-land
16:58:02 <mauke> much more readable
16:58:03 <Pseudonym> Perl6 is a wanna-be everything.
16:58:09 <_metaperl> with a half-hearted attempting at fp
16:58:10 <wagle> pen+island?
16:58:31 <wagle> changed your opinion about C++ in which direction?
16:58:41 <_metaperl> I'm planning my escape from the Perl community now, but I really think Haskell is a stronger metalanguage than C++
16:59:04 <_metaperl> 6000 C++ jobs on dice, 12000 java jobs on dice, 3000 perl jobs on dice and ZERO haskell jobs on dice ... what the heck am I thinking?
16:59:27 <_metaperl> and so many apps (like this IRC client of mine) are written in C++
16:59:39 <_metaperl> openoffice: C++
16:59:58 <reffie> freebsd: C
17:00:16 <_metaperl> reffie: C is just old-style C++
17:00:23 <Pseudonym> reffie: I think he's talking about non-trivial applications in user-space.
17:00:35 <Pseudonym> Firefox: C++
17:00:37 <reffie> freebsd is nontrivial :)
17:00:45 <mauke> gcc: C
17:00:47 <Pseudonym> The user-space parts are.
17:00:57 <liyang> Would I be snobbish in saying that any decent programmer should be able to deal with any language (that's right for the job) which implies that these jobs looking for <language X> programmers are stupid and not worth replying to?
17:00:57 <reffie> Pseudonym are nontrivial?
17:00:58 <Pseudonym> mauke: Have you ever tried maintaining gcc?
17:01:07 <mauke> no, and I'm not going to
17:01:15 <Pseudonym> reffie: No, most of the user-space parts of BSD are trivial.
17:01:20 <_metaperl> liyang: I am looking at it from the perspective of earninga living!
17:01:21 <reffie> oh
17:01:26 <reffie> Pseudonym right
17:01:34 <Pseudonym> The exceptions being GCC (previously mentioned) and some stuff written in other languages.
17:01:46 <Pseudonym> CVSup is written in Modula-3.
17:01:53 <_metaperl> lispy: and Haskell simply lacks functionality that Perl and C++ have... quality CGI libraries, etc
17:01:58 <Pseudonym> Which is what Java should have been.
17:02:06 <reffie> Pseudonym cvsup is being rewritten in c :P
17:02:13 <Pseudonym> Bloody hell.
17:02:23 <_metaperl> Pseudonym: is Java as good a language as C++ ?
17:02:25 <liyang> _metaperl: that's one aspect; the other is job satisfaction. And I find that unlikely if employees are sought on the bases of their proficiency in a single language.
17:02:29 <Pseudonym> I really had a lot of respect for whoever decided to write it in Modula-3.
17:02:37 <reffie> Pseudonym heh
17:02:41 <Pseudonym> Modula-3 is a very nice language, as imperative languages go.
17:02:51 <Pseudonym> metaperl: No.
17:03:04 <wagle> on which machine does modula-3 compile?  >)
17:03:11 <Pseudonym> wagle: FreeBSD, for one!
17:03:31 <_metaperl> you have to be willing to deal with some ugliness in a language. corporate america isabout getting things to work. Haskell is about the epitome of elegance
17:03:46 <wagle> i stopped heaaring abnout modula3 in the early to mid 90's
17:03:54 <Pseudonym> Personally, metaperl, what I'd do is learn C++, and also learn Haskell, if only to make your C++ coding better.
17:04:15 <Pseudonym> Haskell is great of getting you to think multi-paradigmatically.
17:04:31 <Pseudonym> In C++ alone there's always the temptation to write C.
17:04:40 <Pseudonym> In Haskell you don't have that "freedom".
17:04:49 <liyang> (Yeah, then pick up Boost just to fuck with the other people heads on your team. >=])
17:04:52 <Pseudonym> And so it forces you to think better.
17:04:55 <wagle> bondage and discipline
17:04:58 <Pseudonym> Yeah, that's the other thing.
17:05:01 <_metaperl> what's the best product for getting C++ to run on the JVM?
17:05:09 <Spark> haskell programmers are just lazy
17:05:11 <Pseudonym> If you're programming in C++ without Boost, you're wasting your time.
17:05:19 * _metaperl looks up Boost
17:05:22 <Pseudonym> Spark: Yeah, but we're FULLY lazy.
17:05:22 <lispy> _metaperl: C/C++ don't run on the jvm
17:05:35 <wagle> use jit
17:05:37 <lispy> _metaperl: only subsets of those languages can be used
17:05:46 <liyang> And we're transparent too. (Referentially of course.)
17:05:50 <Pseudonym> Of course.
17:05:53 * liyang groans.
17:05:59 <_metaperl> the best free resource for C++ is BruceEckel.com I think
17:06:07 <Pseudonym> boost.org is Boost
17:06:11 <_metaperl> lispy: there are products to compile to the JVM
17:06:17 <Pseudonym> Boost is a library of all the stuff you wish came standard with C++.
17:06:25 <lispy> _metaperl: interesting
17:06:35 <mauke> like lambda!
17:06:42 <Pseudonym> Like lambda, precisely.
17:06:46 <_metaperl> are you ready for ICFP2005 in C++ Pseudonym?
17:06:52 <Pseudonym> Nope.
17:07:01 <Pseudonym> Sadly I never have time around contest time.
17:07:05 <lispy> _metaperl: i was reading someone's thesis and it claimed certain constructs in C are not possible on the JVM.  Maybe those compilers just disallow them
17:07:18 <_metaperl> Pseudonym: are you doing C++ for a living?
17:07:26 <Pseudonym> Yup.
17:07:31 <liyang> http://boost.org/libs/libraries.htm#Function-objects and the following couple of sections
17:07:57 <Pseudonym> I'm not quite One with the Language(tm).
17:08:17 <Pseudonym> I think you are never truly One with C++ until you've written a book on it.
17:10:11 <lispy> any darcs hackers hanging around?
17:21:18 <dcoutts_> resiak, not quite a factor of 10 overall (just the parser itself) but the overall gtk2hs build memory requirements are down from 380Mb to 80Mb
17:21:56 <resiak> dcoutts_: That still means that you rock, despite the fact that I have it working courtesy of the overlays.
17:22:09 <dcoutts_> :-)
17:22:51 <dcoutts_> we should have a 0.9.8 release candidate out in a day or two if you feel like doing some testing
17:25:16 <dcoutts_> Something that cheered me up today was seing that the SourceForge stats system is back online and Gtk2Hs and wxHaskell are both in the top 2% of most active projects!
17:26:37 <dcoutts_> On the other hand the stats thingy claims that Gtk2Hs got 12,000 downloads back in February so I'm not quite sure I believe any of it.
17:31:43 <resiak> dcoutts_: I'd be glad to help out testing, but I won't even pretend to be doing anything more than vaguely poking Gtk2Hs in occasional spare moments.
17:32:17 <dcoutts_> reffie, occasional vauge poking is always helpful :-)
17:32:27 <reffie> dcoutts_ ?
17:32:51 <dcoutts_> reffie, err sorry I meant to direct that to resiak
17:32:56 <reffie> :)
17:34:02 <resiak> dcoutts_: I wonder if I can pretend it's revision for mods ;-)
17:34:09 <dcoutts_> ha!
17:34:57 <dcoutts_> mods? that probably makes you .ox.ac or .cam.ac
17:36:28 <resiak> dcoutts_: I've met you.
17:36:46 * resiak does maths and comp, and also knows djm.
17:37:02 <resiak> At least, I've met you if you are who I think you are.
17:37:05 <dcoutts_> resiak, it always worries me when I bump into my students :-)
17:37:30 <resiak> Heh.
17:37:47 <liyang> <_<
17:37:49 <liyang> >_>
17:38:29 <resiak> |_|
17:40:11 <dcoutts_> resiak, i've got such a terrible memory for names that I usually end up embarassing myself, anyway, best of luck with mods, I'll not ask you to test Gtk2Hs since you've obviously got more important things to do! :-)
17:41:15 <lispy> @type (<_<)
17:41:17 <lambdabot> bzzt
17:41:26 <lispy> @type (|_|)
17:41:28 <lambdabot> bzzt
17:42:06 <resiak> dcoutts_: No worries. If I get bored when I have spare time I'll take a peek.
17:54:03 <Spark> @type love
17:54:04 <lambdabot> bzzt
17:54:22 <kaol> @vizen go go go
17:54:27 <lambdabot> I'm stroking my hard cock as we speak...
17:54:43 <dons> that's worrying.
17:54:45 <int80_h> lamdabot I'm shocked, shocked!
17:55:13 <kaol> umm. who wrote that @vizen thing?
17:55:30 <kaol> @vixen you are so much nicer
17:55:32 <lambdabot> you're nice too
17:55:50 <dcoutts_> and what does it do? (apart from tell us things we don't want to know!)
17:56:12 <kaol> looks like vixen's deranged half brother
17:56:21 <mauke> @ghc
17:56:22 <lambdabot>  Illegal deriving item
17:56:33 <dcoutts_> @vizen you are a sick puppy!
17:56:35 <lambdabot> how's the weather over there?
17:56:51 <dcoutts_> @vizen oh it's not to bad actually
17:56:53 <lambdabot> yeah, it's a shame
17:57:21 <dcoutts_> @vizen no it's not! we don't like bad weather.
17:57:23 <lambdabot> i didn't think so
17:57:51 <mauke> @viaen does this work?
17:57:58 <dcoutts_> @vizen hmm whatever. I'm not going to talk to you anymore. You're just odd.
17:57:59 <dons> vixen was written by blackdog
17:58:09 <lambdabot> Prolly
17:58:10 <lambdabot> why are you going to do that?
17:59:04 <dcoutts_> dons, who wrote vizen?
17:59:06 <mauke> @vaxen still ok?
17:59:07 <lambdabot> what do you want to know about me?
17:59:19 <mauke> huhu, autocorrecting spelling errors
17:59:37 <dcoutts_> @vizen I want to know who wrote you. :-)
17:59:38 <lambdabot> i know you know
18:04:17 <dons> duncan?
18:04:28 <dons> vizen == vixen == vaxen == spelling correctoin
18:05:31 <dcoutts_> dons, so they're all the same, oh ok.
18:05:36 <dons> lambdabot calculates the levenshtein distance to the known commands, as described in V. I. Levenshtein. Binary codes capable of correcting deletions, insertions and reversals.
18:05:55 <kaol> @woof like this.
18:05:56 <dons> @g000gle haskell
18:05:56 <lambdabot>  (__)      (__)
18:05:56 <lambdabot>  (oo)      (oo)
18:05:56 <lambdabot>   \/--------\/
18:05:56 <lambdabot>    |        |
18:05:56 <lambdabot>    ||------||
18:05:57 <lambdabot>    ^^      ^^
18:05:59 <lambdabot> This cow lived with
18:06:01 <lambdabot>    Dr. Doolittle
18:06:03 <lambdabot> Unknown command, try @listcommands.
18:06:10 <dcoutts_> nice
18:06:12 <dons> @gOOgle haskell
18:06:14 <lambdabot> http://www.haskell.org/
18:06:15 <int80_h> @listcommands
18:06:16 <lambdabot> all-dicts arr babel define definitions devils dice dict dict-help
18:06:16 <lambdabot> docs dummy easton echo elements eurohaskell eval fact fact-cons fact-
18:06:16 <lambdabot> delete fact-set fact-snoc fact-update foldoc fortune gazetteer get-
18:06:16 <lambdabot> definition ghc google help hitchcock index jargon karma karma+ karma-
18:06:16 <lambdabot> kind learn libsrc listchans listcommands listmodules lojban moo more
18:06:17 <lambdabot> paste pl pl-resume plugs pointless prelude quote remember resume
18:06:19 <lambdabot> seen source spell state timein todo todo-add topic-cons topic-init
18:06:21 <lambdabot> topic-snoc topic-tail topic-tell type uptime vera version vixen
18:06:23 <lambdabot> web1913 wiki wikipedia wn world02 yow
18:06:31 <int80_h> @wiki
18:06:32 <lambdabot> http://www.haskell.org/hawiki/
18:06:33 <dons> if it's more than three edits we assume that's too many mistakes
18:06:43 <int80_h> @kind
18:06:44 <lambdabot> bzzt
18:06:53 <int80_h> @learn
18:06:54 <lambdabot> http://www.haskell.org/learning.html
18:07:02 <int80_h> @fact
18:07:03 <lambdabot> I can not handle empty facts.
18:07:10 <int80_h> @fact monad
18:07:11 <lambdabot> I know nothing about monad.
18:07:14 <int80_h> bah
18:07:19 <int80_h> @fact monads
18:07:19 <lambdabot> I know nothing about monads.
18:07:25 <int80_h> boooo
18:07:35 <dcoutts_> @fact darcs
18:07:36 <lambdabot> I know nothing about darcs.
18:07:39 <int80_h> @todo
18:07:40 <lambdabot> 0. SamB: A way to get multiple results from a google search
18:07:40 <lambdabot> 1. SamB: @get-shapr summons shapr instantly
18:07:40 <lambdabot> 2. SamB: bare @part either gives error message or parts the channel
18:07:40 <lambdabot> the command was given on
18:07:40 <lambdabot> 3. SamB: stop mangling long urls
18:07:40 <lambdabot> 4. dons: improve formatting of @dict
18:07:42 <lambdabot> 5. SamB: @karma+ should report total karma
18:07:44 <lambdabot> 6. x3n0n: @pl: don't use liftM2 for S'
18:07:48 <dons> @todo-add fact should randomly list facts if provided with an empty argument
18:07:50 <lambdabot> Entry added to the todo list
18:09:03 <wagle> @pl \s -> [c | c <-s , c `elem` "abc"]
18:09:04 <lambdabot> (: [c `elem` "abc"]) . ((c | c) <-)
18:09:33 <wagle> @todo-add add list comprehensions to @pl
18:09:34 <lambdabot> Entry added to the todo list
18:09:40 <wagle> >)
18:10:25 <mauke> @pl do { x <- []; return x }
18:10:26 <lambdabot> (line 1, column 4):
18:10:26 <lambdabot> unexpected "{"
18:10:26 <lambdabot> expecting variable, "(", operator or end of input
18:10:49 <mauke> and "do" and "case" syntax while you're at it
18:11:27 <dons> ppepole should probably submit their own pointless transformations to TheHunter
18:11:47 <dons> he's the @pl maintainer/author
18:11:54 <wagle> you calling my transformations pointless?!?
18:12:53 <kaol> point-free then
18:13:07 * liyang likes pointless definitions
18:13:22 <liyang> Or point-free. Whichever you prefer. :)
18:13:44 <kaol> what's the point? (It's too tempting to not make jokes about that.)
18:13:45 <dcoutts_> I like the pointless papers! "A pointless derivation of radix sort"
18:14:08 <dons> sorry, pointfree, sometimes I get confused.
18:14:27 <liyang> I wonder how people write those papers without littering the whole thing with bad puns. <_<
18:14:37 * kaol waits the paper on pointless academic research
18:14:58 <dcoutts_> liyang, they don't, they do fill them with pointless puns
18:15:10 <kaol> @type pun
18:15:11 <lambdabot> bzzt
18:16:39 <liyang> mmkay. Been a while since I looked at that paper...
18:20:21 <liyang> (At least you're not a quantum physicist writing about topless models...)
18:20:43 <dcoutts_> :-)
18:20:50 <gzl> leave them be, it's all they have :)
18:21:40 <dcoutts_> then of course we have our bottoms...
18:24:50 <wagle> but we cant observe them
18:25:39 <mwc> wagle: you can, but you'd need a synchrotron the diameter of the galaxy
18:26:04 <chucky> hmm, I need a project. I've had half a week of summer vacation and insomnia is already setting in. :-/
18:26:12 <mwc> well, that's for directly probing strings, but you'd get quarks in the bargain of course
18:26:48 <wagle> chucky: http://www.freebsd.org/projects/summerofcode.html
18:27:23 <chucky> wagle: I'm already planning to submit a summer of code-project. Don't know what yet though. :)
18:27:28 <dons> chuucky, you could write an OpenGL gui for Yi .... ;)
18:27:54 <int80_h> You could write a perl interpreter in Haskell, oh wait...
18:27:54 <mwc> hahahahh
18:27:54 <dcoutts_> chucky, or a gtk2hs gui for Yi :-)
18:28:12 <dons> I'm planning on doing that anyway  :)
18:28:17 <mwc> editing code in vertical streams like the matrixcode, dons ?
18:28:22 <chucky> A Haskell interpreter in Perl 6 maybe?
18:28:24 <Igloo> Why OpenGL?
18:28:30 <chucky> then we could use Pugs to run Haskell!
18:28:33 * dons has switched to gvim, discovered that gtk2 is a good gui for an editor, and now wants it for Yi.
18:28:51 <dons> OpenGL just as a crazy idea
18:28:57 <chucky> it could be nice
18:28:59 <Igloo> Oh, you were replying to dcoutts, not yourself
18:29:10 <mwc> dons: indeed, the aqua gui with antialiasing is even better :P
18:29:11 <dcoutts_> dons, well if you have any questions about gtk2hs you know who to ask :-)
18:29:18 <chucky> I have to try Yi sometime
18:29:21 <dons> I do!
18:29:23 <chucky> maybe now is a good time. :)
18:29:54 <int80_h> I have a brilliant scheme to implement "hello world" in a novel,killer-app way.
18:30:06 <reffie> do tell us
18:30:13 <int80_h> rats, called me on my bluff
18:30:20 <int80_h> shame on you!
18:30:33 <mwc> int80_h: does it involve sharks with lasers on their heads burning hello world into somebody's chest?
18:30:51 <int80_h> mwc: well it did, until you gave it away. Ranks a rot.
18:31:07 <chucky> int80_h: You're going to implement Hello World in Haskell?
18:31:14 <int80_h> heh no I was goofing
18:31:17 <chucky> I:)
18:31:19 <chucky> I know
18:31:31 <dcoutts_> @plugs "hello world!"
18:31:36 <lambdabot> "hello world!"
18:31:43 <chucky> noone would be stupid enough to try and implement hello world in haskell, it just wouldn't work. Too slow. :P
18:31:46 <mwc> I'm working on quantum computers this summer. I'll print Hello World in 2^20 different languages and then randomly measure one
18:33:07 <dcoutts_> I wonder how much work lambdabot was actually doing to print hello world, what with all the network sutff, forking, dynamic code checking and loading I guess it's quite a bit!
18:33:08 <dons> or invent a new model for undo/redo in editors based on a theory of patches. or prove some things about the theory of patches using Isabelle or Twelf
18:33:37 <dons> dcoutts_, yeah. there's a few things going on
18:33:44 <mwc> chucky: it's lazy, so it would come out as "umm? Oh. Hello world. get out and leave me alone."
18:33:46 <wagle> Benjamin Pierce has some theory of patches
18:33:52 <dons> oh!
18:34:01 * dons googles furiously
18:34:11 <chucky> mwc: :)
18:35:46 <mwc> I was just taking a leak and drinking a coke, and I had a profound thought.
18:35:50 <mwc> Is there any use to putting the quantum computer itself in a state of superposition?
18:36:00 <dons> "Combinators for bi-directional tree transformations"
18:36:01 <mwc> I have to talk to my supervisor tomorrow
18:36:47 <wagle> mwc: i had a simailar thought a while back, i think
18:38:10 <mwc> I wonder if you could use it to tackle NP-complete problems... take a superposition of algorithms and apply it, and then figure out some black magic to extract the answer from the algo that solved the problem
18:38:11 <wagle> mwc..  no.. its was "is quantum measurement relativistic?
18:38:55 <mwc> wagle: good question, quantum mech and relativity have been at eachother's throats since about 1915 or so
18:39:02 <wagle> i dont know enough to answer
18:39:07 <mwc> Neither is a complete description of reality.
18:39:17 <chucky> dons: I think I have found an error in your configure scripts for yi and hs-plugins
18:39:28 <mwc> wagle: we don't have a theory of reality that could answer it
18:39:34 <dons> oh, good. what is it?/
18:39:43 <wagle> i see relativity as "the rules of what happens when you measure things"
18:39:49 <chucky> dons: ghc --interactive fails on amd64 (expected), but the configure script continues along merrily
18:40:39 <wagle> hmm..  i guess that doesn't explain much
18:40:50 <dons> oh, we should use ghc, not ghc --interactive.  but note that hs-plugins isn't going to fly on amd64 unless you've got a working ghci
18:40:51 <mwc> wagle: well, GR describes the mutual effect of matter and spacetime on eachother
18:40:59 <mwc> wagle: special relativy, or general relativity
18:41:00 <dons> ghci implies that the dyn linker works
18:41:18 <dons> I should certainly print a warning, at the very least
18:41:20 <chucky> dons: No I know, but yi should work if I compile it statically right?
18:41:24 <dons> yep.
18:41:29 <dons> then you don't need hs-plugins at all
18:41:40 <chucky> yeah, I realised that. :)
18:41:47 <dons> :D
18:41:55 <wagle> can you collapse a quantum field in one reference frame, but not in another?
18:42:03 <mwc> does the dynamic linker work on any 64 bit platforms? ppc64, power?
18:42:23 <wagle> or in a different way?
18:42:25 <dons> chucky, you have the darcs version of yi, btw?
18:42:28 <mwc> wagle: no, the universe is non-local
18:42:35 <mwc> wagle: do you know about quantum entanglement?
18:42:45 <wagle> yeah, vaguely
18:42:51 <chucky> dons: no, I was going to try the release, but it doesn't seem to compile
18:43:01 <dons> because we don't use  --interactive anymore.
18:43:21 <mwc> wagle: well, the basic implication is that the universe allows things to interact at a distance.
18:43:22 <wagle> the above was a blurb i wrote to myself a couple months ago
18:43:29 <dons> since the release a few more portability issues have been squished. but more may luurk
18:43:53 <chucky> dons: I guess I'll discover that in a moment. :)
18:44:22 <wagle> instantaneously interact
18:44:47 <wagle> whatever "instantanously
18:44:53 <wagle>  means
18:44:57 <mwc> wagle: if you annilhilate a positron-electron pair, you release two photons. They have to conserve spin, so they'll have opposite spins around each measurement axis. It turns out that if you measure the photon that went left 3 light years from the one in that went left, then you determine the state of B instantly.
18:46:05 <Pseudonym> Which has interesting implications.
18:46:06 <mwc> It means taht if I'm 3 light-years away from my partner, as soon as I measure my photon I know instantly what he measured in his. That's relativistically impossible, but it still doesn't violate causality because no information can be transmitted without an associated classical information channel. Does that answer your relativistic collapse question?
18:46:14 <Pseudonym> They also have to conserve momentum.
18:46:25 <Pseudonym> If you measure the momentum of one and the position of the other...
18:46:27 <Pseudonym> But that's another story.
18:47:10 <Pseudonym> http://members.cruzio.com/~quanta/bell2.html
18:47:18 <wagle> cant collapse both ways, but one could collapse, but not the other
18:47:22 <mwc> Pseudonym: indeed. It's best not to think too deeply about it. You'll either reach enlightenment or have your mind crash.
18:47:58 <mwc> wagle: well, it depends what you mean by collapsing. if you mean that it's in a superposition of states and that when it collapses you determine which one would be observed, than they collapse simultaneously
18:48:16 <wagle> whats "simultaneously"?
18:48:24 <mwc> here's another way to look at it. If I'm 1 lightyear from the production event, and my partner is 2 light years
18:48:41 <mwc> and we're at rest relative to eachother ;) I've been assuming that all along
18:49:04 <mwc> then when I measure at 1 light year, I know what he'll get even before he can measure it in an additional year
18:49:06 <Pseudonym> I think the problem here is that you have to understand what a "quantum observation" is.
18:49:13 <mwc> so in that sense they've both collapsed together
18:49:16 <Pseudonym> Which is something that nobody _really_ understands.
18:49:26 <Pseudonym> I think the idea of "collapse" is a bad picture.
18:49:42 <lispy> @get-definiton (\\)
18:49:44 <lambdabot> (\\) not defined
18:49:51 <lispy> @type List.(\\)
18:49:52 <lambdabot> bzzt
18:49:55 <lispy> hmm...
18:50:27 <Pseudonym> You can only really "observe" eigenvalues of observation operators.
18:50:50 <Pseudonym> And when you observe an eigenvalue, then the thing you're observing must be in the corresponding eigenstate.
18:50:53 <mwc> yeah, but that's a little too mathematical for a lay person
18:51:00 <Pseudonym> Yeah, but this is #haskell.
18:51:19 <mwc> wagle: essentially, the photons have basically equal possibilities of being in one of two states |up> or |down>, okay?
18:51:24 <mwc> Pseudonym: but not #physics :P
18:51:24 <Pseudonym> If I talk about eigenthingies, then most people here have at least a vague idea what I mean.
18:51:34 <Pseudonym> This is all maths.
18:51:40 <wagle> Pseudonym is correct
18:51:41 <Pseudonym> Well, the eigenthingies are.
18:52:11 <mwc> wagle: we'd write the wave function as |psi> = 1/sqrt(2)(|up> + |down>) you can look at that as the particle having a foot in each of the two states
18:52:25 <lispy> @type (List.\\)
18:52:26 <lambdabot> (List.\\) :: forall a. (Eq a) => [a] -> [a] -> [a]
18:52:34 <lispy> @get-definition (List.\\)
18:52:35 <lambdabot> (List.\\) not defined
18:52:47 <mwc> when you try to see what it's living in, the photon has to pick one, |up> or |down>, and the sister photon automatically has to be in the second state.
18:52:53 <lispy> does (\\) remove an element?
18:53:05 <wagle> first you complain about Pseudonym's eigenthingies, then you start throwing bra's and ket's around..  8)
18:53:06 <Pseudonym> No, it removes multiple elements.
18:53:19 <Pseudonym> :-)
18:53:23 <wagle> hmm..  no bra's  8(
18:53:26 <lispy> oh, [a] -> [a]
18:53:31 <mwc> wagle: let you in on a little secret... a ket is just a fancy way to write a vector
18:53:36 <lispy> so it's set difference for lists?
18:53:50 <Pseudonym> ket == vector, bra == one-form
18:53:58 <wagle> yeah, i know..  how else would i know the name?
18:53:58 <Pseudonym> (Or is it two-form?)
18:54:19 <Pseudonym> Anyway, you can think of it as ket == column vector, bra == row vector.
18:54:30 <Pseudonym> That's how it works in matrix mechanics, anyway.
18:55:08 <Pseudonym> So bra * ket == 1 by 1 matrix (i.e. scalar)
18:55:18 <wagle> penrose explained thart for the nth time before ditching me..  now i'm trying to find time to work through needham
18:56:00 <liyang> Well, you use them to denote basis elements.
18:56:20 <Pseudonym> I always found the introductory QM descriptions sorely lacking.  I never truly understood this stuff until I read Dirac's PQM.
18:56:28 <mwc> indeed, Pseudonym hmm, I wonder if you could call a 1x1 matrix a scalar. What if it's a vector in R1, then you could pick a new coordinate system (move zero)
18:56:34 <mwc> and then of course you change its value
18:56:49 <mwc> So I'd say that a 1-vector isn't a scalar
18:56:54 <Pseudonym> If a nx1 matrix is a vector, then a 1x1 matrix is a scalar.
18:56:56 <wagle> penrose at least convinced me that my vague intuitions that complex analysis was important were correct
18:57:13 <mwc> Pseudonym: no it isn't, a scalar is a quantity that's invariant under a change of basis
18:57:21 <Pseudonym> wagle: Ah, then you haven't achieved true enlightenment.
18:57:36 <wagle> Pseudonym: sure..  but how so?
18:57:39 <Pseudonym> Geometric algebra shows that complex analysis ain't so important.
18:57:54 <Pseudonym> :-)
18:58:04 <liyang> I can't think of how a 1-vector could be anything other than a scalar.
18:58:31 <mwc> liyang: R1 is a vector space, right?
18:58:32 <wagle> haha..  thought i'd get needham under my belt before tackleing the geometric algebra
18:59:12 <liyang> A scalar by your definition is still invariant under a change of basis, as long as you don't mix your scalars and 1-vectors.
18:59:24 <mwc> liyang: so that means that [3] is a vector. if you change the basis by moving the origin to 1, then [3] becomes [2] in the new basis. So the quantity isn't invariant under a change of basis
18:59:32 <liyang> (which you assert to be different.)
18:59:54 <mwc> liyang: indeed, the mass of the particle doesn't change under that transformation, but the position does
18:59:55 <liyang> mwc: moving the origin to 1 isn't a change of basis...
19:00:14 <Pseudonym> liyang: Exactly.
19:00:20 <mwc> well, no, it's an abuse of terminology, but you see what I mean
19:00:26 <liyang> mwc: nope. :)
19:00:30 <Pseudonym> Actually, it's vecy important.
19:00:51 <Pseudonym> You're confusing a space of vectors with its principal homogeneous space.
19:01:00 <liyang> A change of basis for a 1-vector is a scalar multiplication. And it always has an inverse as long as it's not the projection to zero. :)
19:01:01 <Pseudonym> It's the same as confusing times with durations.
19:01:11 <Pseudonym> BRB.  Meeting.
19:01:33 <mwc> liyang: right, and the quantity isn't invariant
19:02:12 <mwc> but moving the origin also qualifies. Damn, I just read this book yesterday, got all the anal definitions from classical dynamics
19:02:24 <mwc> a scalar should be the same in all reference frames (non-relativistically)
19:03:33 <liyang> mwc: I suggest you ponder about it a little more. :)
19:04:41 <mwc> liyang: nah, I skimmed this just yesterday, a vector is fundamentally different than a scalar, even if there's an isomorphy
19:05:43 <liyang> (um, consider the meaning of an isomorphism...)
19:06:13 <wagle> int8 and char
19:06:20 <wagle> ?
19:06:23 <wagle> (maybe)
19:06:27 <liyang> anyway, it's 3AM. I'll let the others on the channel convince you. I'm off to bed. :)
19:06:34 <mwc> liyang: I admit I always thought it meant a map between two sets, I'm a physicist
19:06:48 <wagle> i've seen people say they were different, but never say why
19:06:52 <mwc> liyang: http://mathworld.wolfram.com/Scalar.html
19:07:05 <mwc> let's say that multiplication by -1 is a rotation in 1-space
19:07:24 <liyang> Sure...
19:07:27 <mwc> so then that means that your position vector isn't invariant under rotations
19:07:32 <liyang> (more precisely, a reflection)
19:07:40 <mwc> 1-vector is not a scalar
19:08:11 * dons gets another cup of coffee and cranks up sleater-kinney
19:08:20 <wagle> vector space of 1-vectors?
19:08:24 <liyang> Applying the [-1] change-of-basis to a [b] gives you a [-b] where a is your scalar.
19:08:33 <mwc> yeah
19:08:48 <mwc> but mutliplication by a scalar gives a vector
19:09:38 <liyang> You'd have thought more attention would be given to 1-vectors in the literature if they were truely different from scalars...
19:09:56 <wagle> a [b] != [a] [b]
19:09:58 <wagle> ?
19:10:25 <liyang> Something like that.
19:10:35 <mwc> liyang: I think the problem is that 1-vectors have very little practical application :P
19:10:47 <wagle> i think that 1-vectors dont naturally occur much
19:10:53 <liyang> But they are. Since a[b] == [ab] and [a][b] == [ab].
19:11:19 <wagle> depends on the defn of vector multiply
19:11:20 <liyang> Sure. Let's vectorise everything!
19:11:41 <liyang> wagle: pick one, any one.
19:12:12 <liyang> We don't need no stinkin' scalars here! >_>
19:12:17 <mwc> well, true, but I don't see that necessarily means a = [a], given that scalar multiplication is a different operation than matrix multiplicatoin
19:12:21 <wagle> i hate texts that just say "we tried this.  it was stupid.  dont do it>" without explaining why..  thats what they did for scalar vs 1-vector
19:13:11 <wagle> at least the text i saw
19:13:24 <liyang> You could make an artificial distinction, but it's all rather pointless... (to return to an earlier discussion.)
19:15:07 <liyang> (Show me a 1x1 matrix multiplication that gives different answers than the corresponding scalar muln... -_-;;)
19:16:06 <wagle> in general vector spaces, if "a" is a scalar, that doesnt mean [a] is a vector
19:18:12 <wagle> actually, i'm thinkin that the meaning of [] is unclear heere
19:20:12 <liyang> A friend of mine made the comment that Cambridge people tend to stubbornly argue their point regardless of whether they're right or wrong. :)
19:20:20 <wagle> http://mathworld.wolfram.com/VectorSpace.html
19:20:23 <liyang> mwc: might you be the Matthew I think you are?
19:20:41 <liyang> (Anyway, just to prove her wrong, I'm going to bed. Really this time.)
19:20:46 <wagle> A vector space V is a set that is closed under finite vector addition and scalar multiplication.
19:21:23 <wagle> there is no vector multiply necessarily
19:25:32 <wagle> distributivity might be the place to look for complications
19:41:02 <dons> here's a summer project to work on the darcs theory of patches, does anyone have any comments? http://www.cse.unsw.edu.au/~pls/thesis-topics/theoryofpatches.html
19:48:27 <mwc> liyang: yeah, liyang I am matthew, actually
19:48:40 <mwc> I wonder what matthew he thought I was?
19:50:15 <yain> hmhm.
19:51:36 <gzl> dons: what is interesting about that project?
19:52:19 <dons> we don't have a formal model?
19:52:55 <gzl> oh, I thought darcs had that already
19:53:04 <dons> no, it has a sketch.
19:53:06 <gzl> ok
19:53:17 <dons> no proofs for example.
19:54:10 <dons> I should say this on the page. good point.
19:55:42 <gzl> yeah, maybe a more detailed description of what darcs has already done and what is missing would be interesting/useful for the uninitiated
19:56:18 <gzl> this sounds like darcs has already done the work, and the task is to extend it a little and prove a few things using Isabelle
19:57:14 <yain> @type :
19:57:16 <lambdabot> bzzt
19:57:17 <dons> how's that?
19:57:31 <dons> i've updated the page (note that  the descriptions must be brief)
20:01:18 <Igloo> dons: Did you see the mail from the people wanting to do something similar? Or was that from someone over there?
20:01:57 <dons> I saw that, a guy in Brazil?
20:01:59 <gzl> dons: much better. small typo, "has not be formalized"
20:02:25 <dons> gzl, got it. thanks.
20:02:58 * Igloo can't remember
20:03:01 * Igloo vanishes
20:03:32 <lispy> how would i build a version of darcs with "profiling" enabled
20:03:57 <lispy> i'm looking for some way to figure out why certain operations are slow, where they are spending their time and so on
20:04:12 <lispy> does ghc have some --profile-dwim
20:04:42 <dons> lispy, check out the profiling section of the  ghc users guide
20:04:50 <lispy> dons: thanks
20:05:56 <lispy> dons: is this the section you were thinking of? http://www.haskell.org/ghc/docs/latest/html/users_guide/runtime-control.html#id3123104
20:06:46 <dons> I was thinking of profiling.html
20:07:00 <lispy> ah
20:07:02 <lispy> cool
20:08:55 <dons> you'll probably want to run the unstable darcs -- Igloo has done a huge amount of profiling
20:08:57 <lispy> oh, and they have a ./configure option for compiling with profiling
20:09:05 <lispy> yeah, i am
20:09:16 <lispy> just grabed an update this afternoon
20:39:05 <go_epsilon_go> hi, does haskell have oop capabilities? (pardon my ignorance)
20:39:52 <lispy> it has parametric polymorphism
20:39:52 <mauke> define "oop capabilities"
20:40:43 <lispy> and ad-hoc polymorphism
20:40:57 <lispy> but i don't think those are what you are looking for
20:41:17 <go_epsilon_go> by oop capabilites i mean intrinsec oop support (classes, inheritance, etc.)
20:41:48 <lispy> it does have something similar to classes and interfaces
20:42:18 <lispy> i'm thinking of things like "instance Num Int where ..."
20:42:26 <lispy> if you're familiar with taht
20:42:39 <go_epsilon_go> ok, thanks
20:42:54 <go_epsilon_go> it seems to be a very interesting language
20:43:12 <lispy> i think some people have experimented with adding OO features
20:43:21 <lispy> i think there is an OHaskell
20:43:44 <go_epsilon_go> yeah, I just saw a site on that
20:43:52 <dons> a good comparison of languages on this level is http://scholar.google.com/scholar?hl=en&lr=&ie=UTF-8&cluster=4630847261795249217
20:44:00 <dons> "A comparative study of language support for generic programming
20:44:16 <go_epsilon_go> cool, I'll go and check it out
20:44:26 <go_epsilon_go> thank you
20:46:18 <lispy> i don't have ghcprof, disappointing
20:46:31 <lispy> and stewing over this output is not fun :)
20:48:02 <lispy> i should compile with anti-memomization and see what i get
20:52:33 <lispy> not even sure if it's still a compiler option
21:07:07 <dcoutts_> does anyone around here know anything about make / Makefiles ? I've got this problem doing parallel builds. It runs ghc from it's multiple jobs to build the exact same file!
21:07:29 <dcoutts_> it's as if it doesn't know that it's already building that target.
21:07:43 <dons> using make -j ?
21:07:52 <dcoutts_> right, I'm using make -j2
21:08:07 <dcoutts_> but it invokes ghc twice to build the same .o file
21:08:12 <dons> how do you specify the .hs dependencies? with ghc -M ?
21:08:16 <dcoutts_> yes
21:08:47 <dons> does ghc break when it's invoked twice -- is it a race?
21:08:52 <wagle> if you figure out how to stop it from doing that, let me know
21:08:58 <dons> or does the second ghc say "Compilation not required"?
21:09:53 <dcoutts_> rules of the form: "$(TOOL) < thing.in > thing,out" work fine since the output file exists as soon as the first job starts but most tools don't produce any output 'til they finnish, eg ghc, gcc etc
21:10:05 <wagle> apparently there is a right way to do it that stops that, but I never found any sort of explanation how or even what was going on
21:10:33 <dcoutts_> dons, no, it doesn't break, just both of them run and which ever finnishes last writes the .o file
21:11:03 <dcoutts_> but it's obviously wrong and it wasting time (and will probably break eventually if things get interleaved)
21:11:49 <dcoutts_> there's no point doing make -j10 and having the same work pointlessly repeated 10 times in parallel! :-)
21:12:08 <dons> hmm. I *think* this is caused by implicit dependencies in hand written rules, where the dependency only works because: target: dep1 dep2, where dep2 depends on dep1. So normally the deps are executed in order and dep1 is done before dep2. when you -j-ify the build, these deps are executed concurrently
21:12:15 <dcoutts_> wagle, I've not been able to find anything so far from googling
21:12:35 <wagle> i googled for it 2 years ago or so, and got nowhere
21:12:35 <dons> so check your hand written rules if you have them
21:12:57 <dons> the ghc -M rules should always works right, or so I've found in darcs and yi
21:13:16 <dcoutts_> dons, so I'm using pattern rules like %.o: %.hs:
21:13:49 <dons> and you have %.$(way_)hi : %.$(way_)o
21:13:50 <dons> 	@:
21:14:04 <dons> (ignore $(way_) variables)
21:14:09 <dcoutts_> there may be some duplication of the deps produced by ghc -M but duplicated deps should be ok
21:14:23 <dons> yep. dups are ok I think.
21:14:25 <dcoutts_> yes I have the "cheesy" .hi rule
21:14:45 <dons> and you have no hand written rules?
21:15:26 <dcoutts_> what do you mean by hand written rules exactly? what rules are not hand written? ghc -M ones you mean?
21:15:39 <dons> yep.
21:15:55 <dons> so yourite some magic rule: Foo.o : Foo.hs Bar.hsc maybe
21:16:49 <dcoutts_> we don't have any special extra deps, only pattern rules and deps generated with ghc -M (and something similar for .chs files)
21:17:09 <dons> hmm, perhaps ask on haskell-cafe, maybe we have a real make hacker lurking.
21:17:16 <dcoutts_> :-)
21:17:19 <dcoutts_> ok
21:17:42 <dcoutts_> perhaps I'll ask JaffaCake. He recently got ghc to build using parallel make.
21:17:53 <dons> yep.
21:18:14 <dons> and, hmm, wasn't there a bug in -M generation when 6.4 was released??
21:18:27 * dons recalls seeing something lke that
21:18:34 <dcoutts_> I'm still using 6.2.2 in this example
21:19:14 <dons> what about recursive modules -- are they handled (or absent)?
21:19:43 <dcoutts_> We have no recursive modules. No .hi-boot files.
21:20:19 <dcoutts_> I wasn't trying it particularly because I want a parallel build. I just wanted to stress the makefile to try and uncover missing deps and suchlike that might bite someone using a slightly different version of make that may choose to run things in a different order.
21:21:06 <dons> it's a good idea
21:21:21 <dons> -j is really good at finding bad deps
21:21:37 <dons> and then breaking the build process :)
21:21:49 <dcoutts_> indeed and good at messing up wadges of stuff :-)
21:22:22 <dcoutts_> I don't think I've ever sucessfully got a parallel build working for any non trivial build system
21:23:20 <dons> I've got it going in Yi and Lambdabot, but only by using ghc -M and a bit of work making things really simple
21:23:36 <dcoutts_> come to think of it, I get this same problem quite often, of the same targets being rebuilt when they are still in the process of being built in the first place
21:23:52 <dons> sounds like something's not quite right.
21:23:59 <dcoutts_> yeah
21:26:06 <dcoutts_> anyway, thanks for the consolation. I'd better go...
21:26:18 <dons> no problem
22:33:00 <SyntaxNinja> does anyone know of tools to statically check for deadlocks? that is, one way to prevent deadlocks is to make sure that you grab resources in a particular order, but how is that usually enforced?
22:33:27 <mugwump> such as ... sorting by memory address
22:33:41 <SyntaxNinja> mugwump: how does that work?
22:33:59 <mugwump> and you usually ramp right back when you have a problem, in case you're contending for different locks
22:35:05 <mugwump> well, usually you can ask the system for some unique-ish number that won't change at least in the timescale over which you're acquiring locks (eg, the pointer location, but it can just be a serial number)
22:41:08 <SyntaxNinja> mugwump: I don't understand, I'm afraid.  how can you check that statically.
22:41:38 <mugwump> Missed the operative part in your statement, didn't I :)
22:42:22 <mugwump> you only need to ramp back if the threads can't be known to always acquire the same set of locks in the same order I expect
22:46:34 <mugwump> I'm probably not telling you anything you don't know.  I know a DMS-II (Unisys A-Series/Clearpath) hacker who gets down and dirty with this sort of thing..
22:46:43 <mugwump> but I'm just a rookie
22:48:26 <mugwump> (ie, <20years experience, no masters/Ph.D ;))
22:49:28 <SyntaxNinja> what do you mean 'ramp back'? you mean, release the locks on resources in the case where you've acquired one and you need to go get a different one?
22:51:36 <mugwump> sure.  I'm trying to construct a little timeline that demonstrates the issue
22:52:02 <mugwump> actually, maybe you don't need to ramp back if you can enforce the order
22:52:08 * mugwump hmms
22:52:59 <SyntaxNinja> well, IF you can enforce the order, but there surely might be cases where you have lock number 2 and you want lock number 1, so you have to release 2 first. so maybe this kind of programming would be impossible if you could statically enforce the order
22:53:03 <SyntaxNinja> which might be a bad thing
22:56:07 <mugwump> s/impossible/unnecessary/ ?
23:01:35 <mugwump> ok, playing around with it a little, I've come to the impression that all you need is the ordering to avoid deadlocks (strictly speaking), but you could still potentially end up with a lot of threads waiting for one to release a lock
23:02:10 <mugwump> whereas ramping back will reduce this at the expense of more lock acquisitions/releases
23:02:28 <mugwump> but I think I've exhausted my usefulness in discussing this topic :)
23:02:31 * mugwump &
