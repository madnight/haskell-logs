00:15:10 <wilx> Huh.
00:15:37 <wilx> That ICFPC contest sounds very difficult.
00:43:10 <lispy> yeah
00:43:12 <lispy> it does
00:48:06 <shrimpx> so yea i think this year's icfpc is pretty crappy
00:48:16 <shrimpx> no offense to the plt people
02:24:44 <Lunar^> wilx: yep
02:26:32 <shapr> salut!
02:26:51 <xerox> mooornin.
02:27:48 <Lunar^> shapr: Holidays, finally!
02:30:02 <shapr> yay!
02:31:10 <Lunar^> shapr: I'm leaving for Dijon to prepare LSM today
02:33:43 <Lunar^> shapr: Here's the OS track program: http://www.rencontresmondiales.org/sections/conference/noyau_et_systeme
02:38:43 <jlouis> the contest is, as usual, hard.
02:42:07 <shrimpx> last year's was a lot of fun and pretty manageable
02:49:41 <jlouis> last year was a really good idea
02:54:42 <shapr> Lunar^: Nice program, good people, good subjects.
02:55:22 <Lunar^> shapr: definitely
02:56:54 <shapr> Have you seen Adam Langley's final report -> http://imperialviolet.org/
02:56:58 <shapr> Interesting reading about capabilities.
02:57:17 <shapr> Amusingly, he gives credit to Zooko for introducing him to capabilities in the first place.
02:57:54 * Lunar^ looks
02:58:38 <shapr> He goes over EROS, Coyotos, and other capability related stuff in his final project report.
03:00:55 <jlouis> ah, Julia Lawall is a speaker
03:01:05 <jlouis> she does quite cool stuff all the time
03:01:22 <jlouis> one of the cool people at DIKU
03:02:36 <shapr> Hm, links demo is online
03:03:38 <shapr> I have to get moving on my ArrowsIntroduction
03:05:19 <Lunar^> :)
03:05:37 <shapr> I like this LtU thread - http://lambda-the-ultimate.org/node/view/794
03:06:11 <shapr> It has some good quotes like "Insatiable curiosity is what fuels the intellectual leaps that a good paper calls upon you to make, and if you don't have it, why bother?"
03:07:52 <shapr> jlouis: url?
03:08:24 <shapr> Aha - http://www.diku.dk/users/julia/
03:08:50 <shapr> Oh I've seen her before in optimal lambda cal reduction papers.
03:10:40 <Lunar^> shapr: She invited me to do my second year at DIKU's
03:10:48 <Lunar^> -s
03:10:52 <shapr> Wow, cool!
03:11:10 <Lunar^> shapr: I declined, too difficult to get right in terms of money et al.
03:11:11 <shapr> I've also seen her in connection with Bossa, of course.
03:11:17 <shapr> That's too bad.
03:11:28 <shapr> If you were in .dk I could drop by and teach you to unicycle!
03:11:38 <Lunar^> hehe :)
03:13:46 <shapr> Do you know Koxx in .fr? France has a great bicycle and unicycle culture.
03:13:58 <shapr> hiya womfoo, is your nickname from Samurai Shodown?
03:16:37 <womfoo> shapr, nah... wom is my real nickname :)
03:16:45 <shapr> Ah, cool.
03:16:57 <shapr> How'd you get that nickname? (If it's not too personal)
03:18:06 <womfoo> hehe. i honestly dont know.. my mom told me that i kept saying it when i was a kid. :)
03:18:14 <womfoo> dunno if its true.
03:18:14 <womfoo> haha
03:18:52 <shapr> That's a neat reason.
03:19:08 <shapr> Are you learning Haskell?
03:19:34 <womfoo> yep.. still a noob though :)
03:19:59 <shapr> Cool, have any questions?
03:20:26 <womfoo> hmm.. not yet.. :)
03:22:39 <womfoo> so whats new?
03:23:14 <shapr> The ICFP contest is happening this weekend, so most people are off coding furiously.
03:23:23 <Lemmih> Why aren't you, shapr?
03:24:05 <jlouis> is there a lightning div. this year?
03:24:55 <SM_ax> jlouis, you need one? :)
03:25:06 <shapr> Lemmih: I chose this week and the next week as chill out time, so I don't feel like doing anything except relaxing fun stuff. I wish I'd planned ahead and chosed different weeks, but I didn't
03:27:54 * SM_ax having problems building ghc-6.4 from sources
03:28:20 <SM_ax> when linking hp2ps: in function Deviation undefined reference to 'sqrt'
03:28:30 <SM_ax> what did i miss?
03:32:38 * shapr doesn't know
03:33:15 <Lemmih> -lm?
03:34:41 <SM_ax> this is even more odd because i did build it from this exact sources on the other machine...
03:35:07 <SM_ax> Lemmih, -lm what?
03:35:27 <Lemmih> sqrt is defined in the math library
03:36:55 <SM_ax> export LDFLAGS=-lm did not help though..
03:51:09 <SM_ax> Lemmih is right as usual :) This helps, thanks
03:51:57 <shapr> hiya Bluelive, nice nick
03:52:15 <Bluelive> thinks, been using it 10 years
03:52:35 <shapr> Learning Haskell?
03:52:59 <Bluelive> been meaning to
03:53:04 <shapr> It's fun
03:53:05 <Bluelive> but don have the time
03:53:18 <shapr> Aw, too bad.
03:54:56 <shapr> Well, if you have any questions about Haskell, feel free to ask.
03:55:02 <shapr> Maybe you can sneak in a few minutes here and there.
04:19:04 * TFK is lost with all these attributes and properties and their update functions...
04:24:46 <xs> hmm, if ghc profiling tells me total alloc = 7,948,843,936 bytes, but the process never uses more than 5mb at any one times.. does that mean the gc is, well, working quite hard? :)
04:26:52 <TFK> Can I print a type signature of something at runtime?
04:27:09 <dons> types are thrown away at compile time
04:28:02 <TFK> Well, I think I found a bug in Gtk2Hs.
04:28:19 <TFK> Or rather, a name collision that shouldn't be there.
04:29:30 <mflux_> dons, but something like 'string_of_type' should be implementable compile time?
04:29:59 <mflux_> hmm, can template haskell do that sort of stuff?
04:30:21 <dons> you can mess with types at compile time with TH, yeah :)
04:31:31 <dons> TH> show $ unsafePerformIO $ runQ [t| Int |]
04:31:33 <dons> "ConT GHC.Base.Int"
04:31:40 <dons> > ''Int
04:31:40 <dons> GHC.Base.Int
04:32:01 <dons> however, splicing types back in is difficult or not possible
04:32:16 <dons> you'd have to do it in a new declaration
04:32:29 <mflux_> ghci converts types into strings ;)
04:39:43 <TFK> Strange. GHC apparently doesn't detect any overshadowing.
04:43:04 <dons> -Wall ?
04:46:56 <TFK> dons, doesn't help.
04:47:08 <TFK> Either that or there is a real bug in Gtk2Hs.
04:47:55 <TFK> I have no idea how exactly it does its imports. But I'm guessing that it imports everything into Graphics.UI.Gtk
04:48:18 <TFK> GHC doesn't warn on overshadowing that occurs inside imports modules, does it?
05:00:28 * TFK refactors his importing strategy
05:24:09 <TFK> 12 lines of importing stuff from Gtk. Yay.
05:24:35 <xs> wxHaskell seems quite nice.
05:25:39 <TFK> Really? How do you connect events to their handlers?
05:26:10 <TFK> Anyway, wxWidgets itself has shortcomings.
05:26:30 <xs> f <- frame [on click := ....]
05:27:32 <TFK> on click?
05:27:41 <TFK> Is that valid Haskell syntax?
05:27:52 <Lemmih> Yep.
05:28:14 <TFK> How?
05:28:24 <Lemmih> @plugs let click = True; on = not in [on click]
05:28:30 <lambdabot> [False]
05:28:57 * TFK doesn't get it
05:29:29 <TFK> What is "in" anyway?
05:29:36 <xerox> TFK, it's part of the let.
05:29:44 <TFK> Oh, right >_<
05:29:44 <dons> 'in' is a keyword. let ... in ...
05:29:47 <Lemmih> 'on' and 'click' are just variables. And ':=' is a data constructor.
05:29:55 <xerox> let {click = True; on = not} in [on click]
05:31:05 <TFK> That looks interesting.
05:32:30 <shapr> hej CosmicRay!
05:32:35 <shapr> Your crazy idea seems popular.
05:32:45 <CosmicRay> morning shapr
05:32:47 <CosmicRay> heh :-)
05:32:52 <xerox> Which idea? :)
05:33:03 * Lemmih was about to say the same.
05:33:04 <CosmicRay> xerox: the one you've been darcs pulling :-)
05:33:46 <CosmicRay> after looking at NumericPrelude for awhile, though, I don't think it's really what I want.  I prefer something that works with the standard prelude
05:33:56 <CosmicRay> and I think it's doable
05:34:15 <shapr> Did you see my very old thread about multiple show instances?
05:34:19 <xerox> I think too.
05:34:55 <shapr> TFK: Is that your new irc client?
05:35:04 <TFK_sIRC> I suppose you can call it that :-)
05:35:08 <shapr> cool!
05:35:14 <CosmicRay> shapr: hmm, no, url?
05:35:14 <shapr> Is it less than a page of source code?
05:35:18 <shapr> Oh right, url..
05:35:23 <TFK_sIRC> Not really - 12 lines of imports, just from GTK. :-/
05:35:35 <TFK_sIRC> 116 lines right now.
05:35:47 <TFK_sIRC> Will be more once I add auto-scrolling, and then the challenge is complete.
05:35:54 <CosmicRay> you do know that there's another irc client named sIRC, right? :-)
05:36:01 <TFK_sIRC> Well, after I refactor the code to something nicer.
05:36:27 <TFK_sIRC> I'm sure that most names that have "IRC" in them have already been taken :-/ but anyway, this thing isn't meant for release.
05:37:07 <CosmicRay> TFK: as long as you don't name it BitchH or something, I'll be happy :-)
05:37:11 <xerox> TFK_sIRC, a graphical IRC client in two days?  Nice :-)
05:37:16 <TFK_sIRC> hehe
05:38:02 <TFK_sIRC> xerox: thanks, but it ain't over until the fat lady compiles. Or something. err...
05:38:10 <shapr> http://www.haskell.org/pipermail/haskell/2004-August/014427.html and http://www.haskell.org/pipermail/haskell/2004-November/014816.html
05:38:15 <TFK_sIRC> Well, more hacking is in order. *goes*
05:38:24 <CosmicRay> TFK: it ain't over until the oom killer kills ghc? :-)
05:38:27 * shapr grins
05:38:33 <TFK> oom? o_O
05:38:39 <CosmicRay> out of memory
05:38:40 <shapr> out of memory
05:38:47 <TFK> hehe
05:39:00 <CosmicRay> the thingy on linux that kills a process when all ram and swap is consumed and something requests more ram
05:39:07 <TFK> That is actually a possibility - at once point "LD.exe" (the linker?) eats 50 MBs, and GHC eats 25 MBs.
05:39:25 <TFK> (on a 116 line script, yes?)
05:39:31 <CosmicRay> TFK: small potatoes.  I've seen ghc approach 1gb ram usage
05:39:42 <CosmicRay> ok, not on a 116-line script :-)
05:39:44 <TFK> I'd like to point out that that is horrible.
05:40:48 <shapr> I once ate 1.5GB of ram in about thirty seconds with GHC.
05:41:04 <TFK> Bone apetite!
05:41:12 <TFK> :-(
05:41:17 <shapr> Happily, the addition of one $! in the right place cut it down to max usage of 30mb
05:41:29 <CosmicRay> heh
05:42:07 <CosmicRay> shapr: bummer that noboddy ran with the parameterized show concept
05:43:38 <shapr> As I said in the second post, it fits with Python's repr and str
05:44:21 <shapr> At least it spawned a huge fun thread.
05:44:36 <shapr> CosmicRay: You could run with it :-)
05:45:09 <CosmicRay> shapr: unfortunately, it doesn't directly address my immediate need -- making my summer physics class go by faster :-)
05:45:14 <shapr> Are you going to start publishing an accessory pack named FoundH?
05:45:37 <CosmicRay> but yes, the str/repr situation from python would be good to emulate in haskell
05:45:37 <CosmicRay> heh
05:46:11 <CosmicRay> brb
05:46:24 <Cale> TFK: that's "Bon Appétit" by the way :)
05:46:41 * shapr gnaws on a bone
05:46:58 <TFK> Thanks. Foreign words, never remember their spelling :-/
05:52:42 <TFK> onDestroy suddenly stopped working...
05:52:46 <TFK> hmph.
05:52:59 <TFK> Or rather, it does, but the application isn't destroyed.
05:53:27 * TFK kills threads
05:54:08 <tuomov> somebody, please think of the threads!
05:55:04 <wilx> Threads killer!!
05:55:18 <wilx> Greenpeace on you!
05:55:55 * TFK sprinkles some radioactive dust on his app, to get a super-strong mutatnt
05:55:58 <TFK> *mutant
05:56:40 <TFK> oh, I know! bah. mainQuit.
06:00:13 <CosmicRay> back
06:01:25 <shapr> forward
06:01:30 <shapr> left right!
06:01:33 * shapr dances hoppily
06:03:55 <astrolabe> Morning all
06:04:11 <xerox> ttyl
06:04:14 * xerox &
06:04:35 <astrolabe> (well a weekend type morning anyway: starts at 2)
06:06:13 <astrolabe> If I wanted an array of 100 ints in haskell, how would I do it?  I don't think I want a list, because random access would be slow.
06:06:15 <TFK> dons, is the trailing '\r' in IRC.decodeMesssage there by design?
06:06:28 <TFK> Erm, in the final param of the resulting Message
06:06:48 <shapr> astrolabe: You could use the Array type.
06:06:58 <Cale> astrolabe: does it need to be mutable?
06:07:14 <TFK> astrolabe, there is the array data type, which is introduced in the 13-th chapter of Gentle Introduction to Haskell.
06:07:16 <astrolabe> Ooh that sounds right shapr.  Where can I read about that.
06:07:19 <TFK> But it is immutabe.
06:07:27 <astrolabe> Oh great thanks
06:07:50 <Cale> http://www.haskell.org/onlinereport/array.html http://www.haskell.org/ghc/docs/latest/html/libraries/base/Data.Array.html
06:07:59 <astrolabe> I haven't got my head round haskell style enough to know whether it has to be mutable
06:08:17 <TFK> astrolabe, join the club :-/
06:08:58 <astrolabe> thanks all of you
06:09:18 <Cale> http://www.haskell.org/ghc/docs/latest/html/libraries/base/Data.Array.MArray.html -- this will give you an interface to mutable arrays, but you will need to be in IO or ST.
06:12:01 <CosmicRay> hehe
06:12:07 <CosmicRay> <-- pissed at albatron
06:12:18 <Cale> huh?
06:12:23 <CosmicRay> er, sorry, ww
06:12:30 <shapr> CosmicRay: You should have said they have the spirit of the albatross, like in the Old Man and the Sea
06:12:37 <CosmicRay> the motherboard on my mythtv box somehow droped its ethernet port
06:12:51 <CosmicRay> shapr: yes, someone pointed that out to me in a comment.  I had never read that :-)
06:13:02 <shapr> It's pretty funny that anyone would put that on their website.
06:13:11 <TFK> Any Gtk2Hs-proeficient people here? I can't make sense of the attribute mechanism :-/
06:13:56 <shapr> The Old Man and the Sea is where a sailer killed an albatross, and that unlucky act meant that he spent months going around on the sea with the albatross hanging around his neck, while his ship was wrecked, his fellow sailors killed, and life just got worse and worse.
06:14:19 <CosmicRay> yeah, I found it with google :-)
06:14:27 <shapr> Though I admit, spirit of the weasel was pretty good too.
06:14:31 <CosmicRay> hehe
06:14:32 <TFK> shapr, spoilers? :-/
06:14:51 <shapr> I dunno, read the book and see for yourself.
06:15:03 <CosmicRay> shapr: the bit that is new since that post is that they replied late yesterday evening claiming they didn't have my proof of purchase on file
06:15:11 <shapr> oy
06:15:13 <shapr> numbskulls
06:15:16 <CosmicRay> I dug out my mail logs that showed their mail server accepted it on the 20th
06:15:39 <shapr> Aha, it's called "Rime of the Ancient Mariner"
06:15:46 <CosmicRay> right
06:15:47 <shapr> Not "Old Man and the Sea"
06:15:55 <astrolabe> LOL thought it sounded familiar
06:16:02 <CosmicRay> I thought maybe you had a different name for it, since the plot sounded the same :-)
06:16:19 <shapr> Nah, I'm good at remembering what happened, but bad at remember the title or author.
06:17:12 * astrolabe would like to know more poetry by heart
06:19:39 <shapr> Man, I wish sleepingsquirrel would come back and talk!
06:19:41 <shapr> hiya dwalter
06:19:47 <shapr> How's code?
06:19:56 * shapr throws alpha particles
06:20:06 <CosmicRay> tipe!
06:20:13 <CosmicRay> err
06:20:14 <CosmicRay> yipe!
06:20:18 * maihem gets a malignant melanoma
06:20:27 * shapr throws beta particles
06:20:44 * TFK obliterates the earth with a gama burst
06:20:54 <astrolabe> Wow, he must be a fast thrower
06:20:59 * maihem turns big and green
06:21:03 <shapr> It's easy to shield against alphas and betas. It's not extremely difficult to shield against gammas. Fast neutrons are a real pain in the butt though.
06:21:41 <maihem> who cares about betas? My dead surface skin will stop them.
06:21:52 <wli> depleted uranium here we go
06:21:57 * astrolabe fires neutrenos through the lot of you
06:22:14 <shapr> It's too bad too, I think there's a neat way to make a subcritical fission reaction that just might be car-portable. Sadly, fast neutrons are the ultimate in pollution.
06:22:18 * TFK laments Attributes
06:22:33 * maihem shits on everybody and wonders if they would have prefered ionising radiation
06:22:47 <shapr> maihem: The problem is with airborne alpha radiation, that mucks up your lungs.
06:22:49 <astrolabe> shapr do I gather they pass through stuff?
06:23:21 <astrolabe> How about the graphite rods in reactors?
06:23:36 <TFK> scrolledWindowVAdjustment :: ScrolledWindowClass self => Attr self Adjustment -- can you make sense of this type signature? How do I retrive it from a ScrolledWindow?
06:24:37 <shapr> About the only way to effectively shield against fast neutrons is several feet of water.
06:25:40 <astrolabe> Hmmm.  Use it for a boat engine?
06:26:04 <shapr> Gammas are somewhat easier to deal with. If they hit a low Z (atomic mass) material you usually get something easy to deal with like beta radiation. If they hit high Z material you can get nastier stuff. So gammas are usually shielded by several feet of lucite and then a thin layer of lead.
06:26:24 <shapr> Yeah, like submarines.
06:27:09 <shapr> ooh aah - http://www.newscientistspace.com/article/dn7564--hubble-spies-lord-of-the-stellar-rings.html
06:27:49 <astrolabe> OMG it's looking at me!
06:28:27 <shapr> On the other hand, it's likely that subcritical fission reactions are used in 'backpack nukes' so my brain could be classified if I even think about this sort of thing.
06:30:19 <astrolabe> Well if #haskellers start vanishing, we'll know we were overheard
06:31:02 <shapr> Of course, purely functional programming is probably considered crackpot by mainstream programmers, so we're safely sequestered from the public. The hidden international gov't can ignore us.
06:31:17 <astrolabe> Thanks for recommending the Hudak book by the way, I'm about half way through, and it's good.
06:31:28 <shapr> Yay!
06:31:36 <TFK> Well if it isn't, how can I scroll a window downwards? :-/
06:31:47 <astrolabe> The illuminate are bound to have ears here though.
06:32:08 * TFK wishes that dcoutts would be here :-(
06:32:09 <shapr> Especially since our irc logs are indexed by google.
06:32:47 <Philippa_> who're the illuminati? fnord
06:33:05 <astrolabe> :)
06:34:15 <shapr> Hail Eris!
06:34:15 <wilx> You have never played Deus Ex, did you?
06:34:26 <astrolabe> All hail discordia
06:34:37 <shapr> My last name is Erisson, but so few people get the joke...
06:35:02 <shapr> f
06:35:03 <shapr> oops
06:35:25 <Philippa_> wilx: if there's a       in my writing, odds are I do know really :-)
06:35:50 <astrolabe> Anyone here played the illuminati game?
06:35:55 <Philippa_> yeah, 'sfun
06:36:13 <Philippa_> though it seems to end with two players seeing who runs out of whichever resource is keeping them in play first
06:36:54 <shapr> I have a whole box of illuminati cards.
06:37:00 <shapr> I can't seem to get anyone to play with me though.
06:37:02 <astrolabe> I thought it was excellent.  Hmm my games used to end with the other players getting loads of money and ignoring me.
06:37:03 <Philippa_> (my cash/ability to call priviledge each turn vs another guy's cards to break my priviledge last time I played - the other guy was rolling in cash, so I couldn't win a direct fight)
06:37:10 <Philippa_> whoops
06:37:23 <Philippa_> shapr: shame. You do need the right kind of folks though
06:37:31 * Philippa_ will play the cheat variant someday
06:37:49 <wilx> If there are 5 spaces in your writing? I guess my mIRC doesn't show what you type...or I am not getting it...
06:37:52 <wilx> Never mind.
06:39:02 <astrolabe> It's an in joke wilx.  You would have to read Robert Anton Wilson.
06:39:24 <wilx> Ah, I see.
06:39:30 <astrolabe> who is very interesting I find.
06:40:15 <CosmicRay> haha
06:40:15 * Philippa_ needs a t-shirt - "I have seen the s!"
06:40:17 <shapr> Yes, do you know about E-Prime?
06:40:21 <Philippa_> er, WTF?
06:40:23 <CosmicRay> http://www.slate.com/id/2121527/
06:40:29 <Philippa_> my client cut out the extra spaces...
06:40:29 <CosmicRay> shapr: wow, that really does remind me of lotr
06:40:38 <shapr> CosmicRay: what does?
06:40:43 <shapr> Oh that
06:40:49 <CosmicRay> shapr: anyway, it is still really exciting to me that Haskell is so flexible that I can define a number type that outputs a formatted LaTeX equation, without having to modify the expressions at all.
06:40:50 * xerox met R.U. Sirius.
06:40:52 <CosmicRay> shapr: I have never used another language with that capability.
06:40:54 <CosmicRay> Philippa_: psst.  echelon
06:40:55 <astrolabe> Wow.  Your client isn't illuminated?
06:41:00 <shapr> I really do have the attention span of a gerbil.
06:41:16 <shapr> CosmicRay: With E-Prime capability?
06:41:38 <shapr> Oh that capability. Yes, I agree. Haskell kicks the shit out of all other languages I've seen. Except Epigram, probably.
06:41:47 <shapr> And I'm not sure about Tim Sheard's Omega either.
06:41:55 <shapr> And there's the mythical FlippaCat as well
06:42:04 <shapr> But I can't say anything about it ;-)
06:42:21 <Philippa_> CosmicRay: what about nuke president it?
06:42:51 <Philippa_> shapr: sure you can, just don't use that goddamn name and talk about the concepts instead (because it's a fair way from being a well-defined language)
06:43:21 <shapr> Actually, I suspect that programming languages of the future will be based on raw categories with included operations, along with some categorically pure way of plugging categories together.
06:43:48 <Spark> nonsense, people will still be using c
06:43:59 <shapr> C is manager-oriented programming.
06:44:19 <shapr> Actually, that's Java.
06:44:25 <Spark> yeah i was just thinking that
06:44:33 <shapr> That's my new invented term of the week, manager-oriented programming.
06:44:36 <Spark> for every class C, theres another class CManager that does something unintuitive
06:44:37 <wilx> C should be banned in favour of C++.
06:45:00 <astrolabe> Nooooo
06:45:10 <wilx> Yes!
06:45:13 <Spark> theres not much you gain from c++ though
06:45:30 <wilx> I strongly disagree :)
06:45:33 <Philippa_> you can only ban C in favour of C++ if you retain the ability to turn off various features
06:45:36 <Spark> unless you need multiple virtual inheritance :)
06:45:58 * astrolabe likes small languages
06:46:08 <Philippa_> C just about has a purpose in life in a way C++ often doesn't, though C should probably be slightly lower-level than it actually is
06:47:02 * shapr agrees
06:47:10 <shapr> Portable assembly is a good role.
06:47:51 <shapr> So, who's up for a TMR article this month?
06:48:08 <shapr> I see four possible articles so far...
06:48:25 <wilx> In fact, unless one is writing OS kernel or something like that I don't see a reason to use C instead of C++.
06:48:33 <Philippa_> I can't guarantee finishing by the first at the rate I'm going, though Oleg's helped out massively so it's entirely possible
06:48:39 <shapr> Gee, I think an OS kernel is a good reason to use Haskell!
06:48:39 <wilx> C++ is better C in any way I can think of.
06:48:42 <tuomov> C would just need subtyping of structs to make it a lot safer
06:48:54 <Philippa_> yeah, but unless writing something like that why bother using C++ either?
06:49:05 <wilx> ...
06:49:05 <Philippa_> tuomov: that and a tagged-union structure with pattern-matching
06:49:18 <wilx> I don't understand you?
06:49:28 <tuomov> tagged unions would be cool too, but that would be a far bigger extension
06:49:42 <tuomov> subtyping is quite simple
06:49:56 <tuomov> and removes a _lot_ of explicit casts
06:49:58 <Philippa_> tagged unions are too, though I agree there're more syntactic constructs to add
06:50:01 <_JusSx_> hey for coding kernal is better C
06:50:57 <Philippa_> wilx: I really don't like C++ these days, and in fairness I've a habit of thinking too much about the languages we nearly have, but for most other purposes C++ gets used for you can use something else that's far more pleasant to work with
06:52:04 <wilx> I am not arguing thare are not nicer languages than C++. I just say that C++ is (almost) always better than C.
06:52:12 <astrolabe> I think there is room for C and C++ in the world.  I've recently realised that C++ has some ugly corners though.
06:52:38 <tuomov> I don't like 99% of the stuff in C++ over C, so I don't even bother with the 1%
06:52:41 <Spark> c and c++ have more ugly corners than a decaying whore
06:52:56 <wilx> Heh.
06:53:06 <Philippa_> Spark: that's a bit unfair on C. No argument for C++ though
06:53:19 <wilx> Like what?
06:53:27 <Spark> lots of things are undefined in C
06:53:40 <Spark> like free(ptr) ; printf("%p",ptr);
06:53:43 <Spark> whats that all about
06:54:12 <tuomov> it prints the memory address ptr points to
06:54:26 <Spark> its undefined operation
06:54:34 <Philippa_> that's about allowing debugging implementations of a runtime system to alter the pointer
06:54:59 <tuomov> how is it undefined?
06:55:15 <tuomov> printf("%x", (long)ptr);
06:55:17 <Spark> according to the standard, i dont know where
06:55:22 <tuomov> is the cast undefined when ptr doesn't point to valid memory?
06:55:30 <Spark> casting pointers to int is undefined too i think
06:55:35 <Spark> maybe just undefined value
06:55:48 <tuomov> but C the language doesn't know about free/malloc etc.
06:56:05 <Spark> i think it does
06:56:33 <ski> it doesn't
06:56:35 <tuomov> hey, it's a sturctural assembler!
06:56:37 <Spark> the standard has info on both the library and the runtime
06:57:09 <ski> C language proper /= C standard libraries
06:57:36 <Spark> but things are not allowed in C, based on what library calls you have previously made in the execution trace
06:58:03 <tuomov> in the language itself, or other library routines?
06:58:08 <Spark> its not like the type system tells you that ptr has been deallocated :)
06:58:18 <Spark> in the language itself
06:58:30 <Philippa_> Spark: funny you should mention that, Oleg's got code that lets you do that
06:58:36 <tuomov> "allowed" or allowed?
06:58:36 <Philippa_> (not in C, obviously)
06:58:43 <Spark> what do you mean by the language
06:58:44 <tuomov> it's not like the compiler knows that free has been called and ptr shouldn't be used
06:58:50 <tuomov> and what about mmapped data?
06:59:01 <Spark> indeed, the compiler doesnt understand C :)
06:59:02 <tuomov> that's not libc stuff..
06:59:09 <Spark> hence it not being safe
07:00:18 <tuomov> but as far as the language is concerned, pointers are just numbers, right?
07:00:23 <tuomov> (or pairs of them, actually)
07:00:28 <Spark> nah theyre different to numbers
07:00:41 <Spark> you can only add and subtract pointers to the same vector
07:00:45 <Spark> and you can obviously dereference them
07:00:57 <Spark> and cast them to (void*) and back again
07:01:06 <tuomov> deref is undefined after free, but is arithmetic or casts?
07:01:17 <tuomov> I don't think so, but I've never read any standards
07:01:21 <tuomov> such things are too long to be read
07:01:31 <Spark> i think the makeshift inheritance you do in C with struct { blah parent ; ... } isnt actually allowed in c89 although it is in c99
07:01:37 <Spark> because of the rules for casting pointers
07:01:48 <Spark> its all a load of bollocks of course since 99% of c programs are noncompliant :)
07:02:11 <tuomov> at least gcc doesn't complain that I know of
07:02:18 <tuomov> even with -pedantic-errors -ansi etc.
07:02:28 <Spark> yeah and when you're doing os stuff its actually useful
07:03:09 <tuomov> gcc does these days complain of void* and void (*fn)(), though, as those can be different
07:03:19 <tuomov> on some ancient 8086 systems
07:03:23 <Spark> yeah thats true
07:03:33 <tuomov> dlsym is non-compliant!
07:04:37 <Spark> yeah i think so, not sure
07:04:40 <Spark> windows has something different
07:04:46 <Spark> because GModule wraps around them both
07:04:51 <Spark> is it posix?
07:05:39 <tuomov> ELF I think
07:05:50 <mflux_> so, is the effects of haskell code 100% specified when you deal with foreign pointers?-)
07:05:54 <tuomov> actually, posix
07:06:23 <tuomov> some 2003 extension probably, POSIX 1003.1-2003
07:06:43 <tuomov> but I think it used to be standard on ELF systems before that
07:12:40 <xerox> AHA!
07:13:03 <reffie> congrats :)
07:13:12 <xerox> I was accepted for the Google's SoC for an Haskell project!
07:13:26 <xerox> Not the Yi one, tough :(
07:14:54 <Philippa_> SoC?
07:15:04 <Philippa_> I know someone who's just landed herself a job with Google...
07:15:04 <xerox> Summer Of Code
07:15:05 <Spark> i just wrote a c program that loops forever using the equivelent of "let SA = \x.xx in SA SA" :>
07:15:19 <adept> shapr: what's ProtoQuickCheckM.hs in the qc-ttd ?
07:15:37 <Philippa_> Spark: does it though? Or does it blow the stack sooner or later?
07:16:07 <xerox> dcoutts_, ping
07:16:53 <wilx> What project then?
07:17:15 <xerox> GtkHs + Cairo bindings
07:22:39 <Spark> Philippa_: it'll blow the stack :)
07:24:17 <jlouis> !Boom!
07:25:08 <jlouis> xerox: oh, cool!
07:25:25 <Philippa_> Spark: ah well. Happy stack.
07:25:27 <xerox> I'm _so_ happy :-)
07:25:50 <astrolabe> I does sound cool xerox
07:25:54 <astrolabe> *it
07:25:56 <jlouis> Philippa_: happy stack? that gave me a wierd view on parsers ;)
07:26:02 * xerox dances
07:26:29 * jlouis has fun with the homomorphism theorem
07:26:58 <Spark> spark@meep:~$ ./selfapp
07:26:58 <Spark> Killed
07:27:33 <astrolabe> Is that G / ker f    \simeq  Im f?
07:31:21 <jlouis> astrolabe: yup
08:23:34 <xerox> dcoutts_, piiinggg ;)
08:37:47 <TFK> dcoutts, #haskell needs you!
08:44:15 <shapr> adept: I was trying to convert QuickCheckM.hs to tdd.
08:50:17 <adept> shapr: but without much luck, as I see, right?
08:51:29 * metaperl looks around for Pseudonym, then jets
09:55:43 * TFK doesn't get it
09:56:33 <TFK> Oh, it's curried.
10:10:08 <TFK> Ooopsie. Crash.
10:18:39 <TFK> Now I really need dcoutts...
10:21:04 <jyp> what's the question?
10:24:07 <TFK> I think that there is a bug.
10:24:37 <jyp> oh
10:24:41 <TFK> I get the vertical adjustment of a scrolled window, and then try getting its lower value - and get a bunch of assert errors.
10:24:56 <TFK> And after a while it crashes, although this last time it hanged.
10:25:21 <jyp> I'm afraid I'm helpless then
10:25:26 <TFK> :-(
10:25:33 <jyp> sry :/
10:25:47 <TFK> But! Maybe I'm taking the wrong path altogether. Do you know how to scroll a window?
10:26:10 <TFK> A scrolled window, that is. I need to scroll it to the bottom programmatically.
10:26:15 <jyp> not yet :)
10:27:56 <TFK> Hmmm.
10:28:17 <TFK> Do you know about attributes and how to modify them?
10:28:20 <jyp> ouch, the Adjusment class is rather extensive :/
10:28:52 <jyp> I'm afraid not
10:29:12 <TFK> Meh, still getting the assertion errors. I used get instead of scrolledWindowGetVAdjustment (this is more verbose than Java), still no go.
10:29:16 <ibid> oih
10:29:38 * ibid is trying to add scrollability support to a custom widget :)
10:29:48 <TFK> Does it work?
10:29:55 <TFK> Another possibility is some threading conflict.
10:29:59 <ibid> not yet :)
10:31:33 <TFK> I have a thread which writes to a TextBuffer, and I'm using the "afterTextInsert" signal handler to scroll the window.
10:36:20 <lispy> TFK: how is your client going?
10:36:29 <lispy> TFK: using it yet? ;)
10:37:29 <TFK> lispy, you can see the pains of its birth right above :-(
10:38:23 <TFK> On a general note, though, Gtk2Hs appears somewhat cumbersome.
10:38:58 <xerox> "cumbersome" ?
10:40:23 <TFK> Verbose, cryptic.
10:41:33 <xerox> Ah, thanks.
10:41:36 <lispy> TFK: if we ignore the autoscroll, what features do you have implemented?
10:41:58 <TFK> It connects! :-D
10:42:02 <lispy> you can connect to a server and chat?
10:42:06 <lispy> yay~
10:42:10 <TFK> Yup.
10:42:16 <lispy> join channels?
10:42:34 <TFK> Only one.
10:42:45 <TFK> (Hard-coded.)
10:42:59 <lispy> that's something
10:43:11 <Lemmih> Did you use Glade?
10:43:13 <TFK> Indeed. It also satisfies the challenge requirements.
10:43:14 <lispy> #python?
10:43:18 <TFK> Yup.
10:43:23 <TFK> Whatever I choose :-)
10:43:23 <lispy> in there now?
10:43:39 <lispy> what is your nick?
10:43:51 <TFK> Hmmm.
10:43:54 <TFK> It's not online now.
10:43:57 <lispy> ah
10:44:02 <TFK> Incidentally, something went wrong elsewhere.
10:44:20 <lispy> well i hope you're having fun, you've made a lot of progress
10:44:32 <lispy> autoscrolling is a pain tho...weird
10:44:33 <TFK> It's a love-hate relationship :-/
10:44:53 <lispy> do you have events or something that pile up and you can respond to them?
10:44:56 <TFK> It still may be my fault - I removed that code but it still crashes. Hmmm.
10:45:01 <lispy> that's how it works usually in GUI programming
10:45:18 <TFK> I have a few very simple events, and a thread that writes to the screen.
10:45:47 <lispy> how do you do the ping/pong?
10:45:54 <lispy> is that in a thread or event based?
10:46:16 * lispy has lots of questions
10:46:25 <TFK> hehe
10:46:41 <lispy> dons: will YI even provide a GUI lib for it's plugins to use?
10:47:06 <TFK> The thread listens to input from the socket, every 0.01 of a second it grabs a line and processes it.
10:47:23 <TFK> (sirc.exe:5376): GLib-WARNING **: g_main_context_prepare(): main loop already active in another thread <--- :-/
10:47:49 <TFK> I implemented the ping/pong, but I wasn't pinged yet.
10:48:08 <lispy> i see
10:48:30 <TFK> Lemmih, CTCP doesn't count.
10:48:38 <Lemmih> (:
10:49:06 <lispy> why do you listen to the socket every 0.01 seconds?  can't you just issue a read from socket?  Usually when a thread is blocked on i/o the OS just puts it to sleep until there is I/O
10:49:28 <lispy> or is this the same thread that draws on the screen and does other stuff?
10:50:25 <TFK> I don't really know threading or sockets. But it used to work :-/
10:50:59 <TFK> It is, but I suppose that you're right, I don't have to wait on it.
10:51:12 <lispy> no worries, i was just trying to suggest something that _may_ be simpler to work with, YMMV
10:51:45 <TFK> YMMV?
10:51:54 <lispy> your milage may vary
10:52:01 <TFK> hehe
10:52:19 <TFK> Well, I'll take anything that comes my way.
10:52:28 <TFK> Meanwhile it has spontaneous crashes.
10:52:46 * lispy nods
10:52:53 <TFK> (sirc.exe:1952): GLib-WARNING **: gmain.c:1416: ref_count == 0, but source is still attached to a context!
10:53:11 <lispy> so it's probably something related to threading?
10:53:19 <TFK> I bet it is.
10:54:03 <lispy> hmmm...
10:54:13 <lispy> i've never used threads in haskell or gtk
10:54:28 <TFK> I've never used threads, at all :-)
10:54:32 <lispy> ah
10:54:39 <lispy> do you know the rules?
10:54:49 <TFK> The rules? o.o
10:55:00 <TFK_sIRC> OKie...
10:55:10 <lispy> all state that is available to more than one thread must have a lock around acessing or writing to the state
10:55:21 <lispy> otherwise you get funny stuff...
10:55:27 <lispy> TFK_sIRC: hi!
10:55:41 <goron> lispy: that are only conventional threads.
10:55:43 <TFK_sIRC> Hi hi. The problem is my signal handler, "afterInsertText"
10:56:00 <lispy> goron: are they different in haskell?
10:56:23 <TFK_sIRC> I have no idea why it would cause a problem, it only prints to stdout.
10:56:33 <goron> lispy: no, you can get atomic operations without locks.
10:56:56 <goron> lispy: Advantage: no deadlocks possible.
10:56:58 <TFK_sIRC> At any case, I don't have any locking in my app. As it stands, both the listener thread and the main GUI thread can write to the text buffer.
10:57:09 <lispy> goron: ah, i'd not heard of that
10:57:23 <goron> lispy: You should get a better university then ;)
10:58:09 <TFK_sIRC> I'll still have to ask dcoutts as to why it fails.
10:58:11 <lispy> TFK_sIRC: that could be bad if the writing is not atomic
10:58:27 <TFK> What is "atomic"?
10:58:35 <lispy> undivisible
10:58:39 <lispy> (sp?)
10:58:54 <TFK> (Spelling is OK :-)
10:58:56 <lispy> once it starts it must complete before any other thread can do the same
10:59:16 <lispy> usually other threads that are trying to compete end up just waiting
10:59:31 <TFK> Well, I hope that GTK would take care of that.
10:59:45 <lispy> yeah, i've not used GTK so I dont' know
10:59:53 <lispy> it would be worth finding out
10:59:57 <TFK_sIRC> After all, I'm writing to its own text buffer. It should be smart ;-)
11:01:56 <TFK> Hmph. It should send out a proper quit message.
11:02:31 <TheHunter> goron, what are you refering to?
11:02:43 <lispy> the classic example of what happens without proper mutual exclusion is incrementing a variable in C.  One thread reads the value, then a context switch happens another thread reads the value increments it and writes in back to memory, then the first thread wakes up and takes the old value increments it and writes it to memory.  It should have increased by two, but it has only increased by one
11:03:49 * TFK swears to use Twisted in his Python networking code (if such code will ever get written)
11:03:54 <goron> TheHunter: To a lecture I followed as part of a course on Distributed Programming. We got all the standard stuff, but also got a "more theoretical" part on another approach.
11:04:04 <lispy> so the classical strategy is to use a semaphore or lock around the read/increment/store sequence so that it is atomic.
11:05:31 <TheHunter> goron, i meant the "atomic operations without locks" stuff. Is there a paper/language/library that describes/implements it?
11:05:40 <goron> TheHunter: The reference is in my native language.
11:06:31 <lispy> TFK: what is Twisted for?
11:07:07 <TFK> Network programming.
11:07:14 <lispy> ah
11:07:51 <goron> TheHunter: Wait-free synchronization on Google should give you want you need.
11:07:52 <lispy> irc clients are pretty simple as far as network programming goes, right?
11:08:10 <TFK> Full-featured ones? I don't think so.
11:08:23 <lispy> yeah, i guess there are file transfer protocols
11:08:30 <lispy> those may be a pain
11:08:34 <TFK> There are many, many protocols.
11:09:15 <TFK> Twisted was designed to handle them all, and those that it doesn't handle, provide tools for the programmer to implement them within the framework.
11:09:27 <lispy> i see
11:09:48 <TFK> And afaik, it was designed to provide maximum safety. So I never get to deal with threads. I think that it uses an event framework.
11:09:59 <lispy> are you implementing your client in python next?
11:10:08 <TFK> Not really.
11:10:37 <TFK> Well, it's final - handling signals on text changes crashes the program.
11:10:42 * TFK stalks dcoutts 
11:12:03 <goron> TFK: What protocol documentation are you using?
11:12:38 <TFK> The RFC. Kinda. Doesn't matter anyway.
11:12:42 <TheHunter> goron, ok, thanks.
11:13:09 <TFK> I will try to scroll from within the watcher thread.
11:15:47 <lispy> is the gtk lib you're using cross platform with mac and windows?
11:16:31 <TFK> It works on macs with an X server.
11:19:33 <TFK_sIRC> Hmph.
11:20:07 <TFK_sIRC> (1) the signal handler crashed my app, not the adjastment code.
11:20:18 <TFK_sIRC> (2) it throws tons of errors, and still doesn't scroll.
11:20:24 <TFK_sIRC> I say, booya!
11:21:03 <lispy> hmm...
11:21:16 <lispy> not sure what you mean
11:21:24 <lispy> so it's working better or worse this time?
11:21:51 <TFK> (What I'm trying to do is set the value of the vertical adjastment to its "lower" value.)
11:22:14 <TFK> It works the same, but doesn't do what I want.
11:24:28 <TFK> And the quit message stopped working...
11:33:34 <TFK> At least, I think that the adjustment problems are not due to threading.
11:55:52 <MachinShin> hey all
11:56:05 <Lemmih> Hey +
12:08:47 <lispy> i downloaded something that has package.conf.in, hsemail.cabal and Makefile.  But make gives errors.  Am I expected to run something else first?
12:08:56 <lispy> http://cryp.to/hsemail/
12:09:06 <lispy> that's the thingy i downloaded
12:26:58 <lispy> grrr
12:27:07 <lispy> this is much harder than it should be
12:52:39 <lispy> dons: are emacs style keymaps more general than what Yi uses?
13:26:06 <lispy> dons: i read one of your papers about Yi and i think i understand it better now
13:48:02 <lispy> make[2]: Entering directory `/home/dagit/local-data/hs-plugins/src/hi'
13:48:02 <lispy> Reading package info from stdin... parse error in package info
13:48:02 <lispy> make[2]: *** [/home/dagit/local-data/hs-plugins/plugins.conf.inplace] Error 1
13:48:15 <lispy> any idea why hs-plugins would give this error during make?
13:49:12 <Lemmih> You're using GHC <6.4, perhaps?
13:50:56 <lispy> 6.5 actually
13:51:24 <lispy> checking for ghc version... 6.5
13:51:24 <lispy> checking for value of __GLASGOW_HASKELL__... 605
13:58:51 <FrederikEaton> this place is dead what happened. icfpc?
13:59:20 <jyp> Ain't it next week ?
13:59:25 <wilx> Weekend happened.
13:59:44 <wilx> First part is due 27th.
14:00:21 <jyp> ok, that might explain some quiteness :)
14:01:03 <jyp> lispy, are you familiar with Yi?
14:01:39 <jyp> I wanted to ask if it has a GUI
14:02:35 <jyp> I'm still dreaming of a version of emacs with antialiased fonts
14:02:51 <jyp> so that might be a reason for me to switch to Yi
14:03:06 <jyp> (lamely pragmatic, I know :)
14:05:17 <FrederikEaton> yeah that doesn't even make sense. antialiased fonts are so much harder for me to read
14:05:46 <jyp> I think I didn't make my self clear then :-)
14:05:57 <jyp> I _want_ antialiased fonts :)
14:06:25 <FrederikEaton> no you don't that's stupid :)
14:06:31 <jyp> Nah
14:06:32 <jyp> :)
14:06:43 <jyp> Actrually, only on LCD mind you
14:07:09 <jyp> using the subpixel stuff
14:07:28 <jyp> not really antialiasing per se
14:07:33 <FrederikEaton> i see
14:07:51 <FrederikEaton> you could buy mac os X and run it in a shell
14:08:21 <jyp> Actually I could stick with linux and run it in a shell :)
14:09:33 <FrederikEaton> oh i never got that working
14:09:57 <FrederikEaton> but you know why
14:10:01 <lispy> jyp: check out climacs
14:10:16 <lispy> jyp: it should have anti-aliased fonts since it uses mcclim
14:10:37 <lispy> jyp: but i have yet to get Yi tocompile...
14:10:39 <jyp> lispy, thanks alot :)
14:10:57 <jyp> FrederikEaton, I just checked it out, it works great :))
14:11:20 <jyp> I think last time I tried that, I still used XEmacs, which sucked in a terminal
14:11:29 <FrederikEaton> what anti-aliasing in xterm?
14:11:42 <lispy> doesn't gnome have anti-aliasing?
14:11:44 <jyp> It's gnome-terminal actually
14:11:48 <lispy> er gnome-term
14:11:48 <jyp> yup
14:12:12 <FrederikEaton> man there's this one module in WASH, HTMLMonad98 - it just takes forever to compile
14:12:18 <lispy> recent version of emacs are nice on a terminal as long as you don't need anything beyond ASCII locale stuff
14:12:55 <lispy> they'd had color on terminals for a few years now
14:13:08 <lispy> in fact, i mostly use emacs from a terminal
14:13:34 <jyp> well I've just discovered that :)
14:13:53 <jyp> font colors need a bit of tweaking but it looks great
14:14:02 <jyp> thanks alot guys :)
14:14:04 <lispy> np
14:14:15 <lispy> but emacs is starting to show it's age
14:14:29 <jyp> sure...
14:14:43 <lispy> but there doesn't seem to be anything > emacs...
14:14:52 <lispy> Yi has promise, but it's not mature
14:15:00 <lispy> same with climacs
14:15:20 <jyp> the best point of emacs imho is that it's available on all architectures I work on
14:15:35 <jyp> and have ever worked on
14:15:37 <lispy> one thing i practically need is the ability to run it on either a terminal or graphically, so eclispe won't do either
14:15:55 <lispy> yeah
14:16:05 <lispy> that's the reason to know a smidge of vi
14:16:22 <jyp> :q! :))
14:16:25 <lispy> hehe
14:17:05 <jyp> I'll try to switch to Yi for haskell edition as soon as it gets basic emacs "emulation"
14:17:20 <lispy> it has some emacs keybindings
14:17:26 <jyp> ah cool
14:17:29 <lispy> that's why i wanted to look at it
14:17:36 <jyp> hadn't last time I checked :))
14:18:01 <jyp> I'll try it soon then
14:18:11 <lispy> well, i should say, they exist somewhere, i don't know if they are in the mainstream from dons site
14:18:23 <lispy> if you get it to compile then let me know
14:18:37 <lispy> i'm stuck at trying to get hs-plugins installed
14:18:49 <jyp> I got it to compile some months ago
14:19:13 <lispy> i get an error that doesn't mean anything to me
14:19:18 <jyp> I had no problems with hs-plugins at the time ...
14:19:23 <jyp> what's it saying ?
14:19:56 <lispy> complains about reading a package
14:20:07 <lispy> i pasteded the error a bit earlier
14:20:15 <lispy> just scroll back for lispy and make
14:20:33 <lispy> i've since rebooted into a different OS
14:20:39 <jyp> ah
14:20:41 <lispy> so i can't reproduce it at the moment
14:22:38 <jyp> which version of hs-plugins are you trying to compile ?
14:23:42 <lispy> the one in darcs
14:23:56 <lispy> maybe i should get an older version?
14:24:03 <xerox> No!
14:24:08 <xerox> I just darcs pulled, lets see.
14:24:20 <pipe> looks like yoda you are?
14:24:43 <xerox> It compiles.
14:24:50 <lispy> i see
14:24:57 <lispy> what version of ghc?
14:25:05 <xerox> 6.4
14:25:14 <lispy> maybe it has problems with 6.5?
14:25:20 <xerox> It could be possible.
14:27:56 <jyp> ... compiling
14:28:30 <lispy> you do a pull/get then configure && make ?
14:29:08 <jyp> right, plus autoconf right before configure
14:29:32 <lispy> i did that but i wasn't sure if it did anything
14:30:08 <jyp> here's what I got :
14:30:10 <jyp> make[2]: Entering directory `/home/jp/haskell/hs-plugins/src/plugins'
14:30:10 <jyp> Rebuilding dependencies ... Could not find module `Language.Haskell.Hsx':
14:30:38 <jyp>   (imported from System/Plugins/Parser.hs)
14:31:03 <xerox> jyp, you do need haskell-extensions
14:31:11 <jyp> gah
14:31:23 <xerox> Google for haskell-src-exts
14:31:34 <jyp> aye
14:36:03 <jyp> well, it further needs a bunch of things I don't have installed :/
14:36:14 <xerox> What exactly?
14:36:51 <jyp> It fails with "error reading ./.setup-config; run "setup configure" command?"
14:37:06 <xerox> Which compilation?
14:37:33 <jyp> but configure checks for alex, haddock, happy, cpphs
14:37:48 <jyp> "make" inside haskell-src-exts
14:37:55 <xerox> haskell-src-exts should be compiled this way: runghc Setup.hs configure, runghc Setup.hs build, runghc Setup.hs install
14:37:58 <xerox> More or less.
14:38:35 <xerox> cd src/haskell-src-exts
14:38:39 <FrederikEaton> $ ghc-pkg describe WASHHTML
14:38:39 <FrederikEaton> ghc-pkg: package WASHHTML matches multiple packages: WASHHTML, WASHHTML-0.14.8
14:38:51 <FrederikEaton> ... but it matches one of them exactly. how do i get around this?
14:39:38 <jyp> well iiuc that's what the makefile tries to do
14:39:57 <xerox> FrederikEaton, do you want to remove one?
14:40:23 <xerox> jyp, darcs get ...; cd haskell-src-exts/src/haskell-src-exts; runghc ...
14:40:46 <xerox> runghc Setup.hs --help
14:41:30 <jyp> got it
14:41:43 <jyp> i'm installing happy atm
14:43:01 <FrederikEaton> xerox: well i guess, if that's the only option
14:43:31 <FrederikEaton> xerox: so the ones that are substrings of the others are now inaccessible? that seems like a design flaw
14:44:38 <xerox> FrederikEaton, did you install it multiple times or what else?
14:45:20 <FrederikEaton> i installed a new version
14:45:31 <xerox> ghc-pkg remove THEOLDONE
14:46:46 <FrederikEaton> you mean unregister?
14:46:51 <xerox> prolly :-)
14:47:03 <FrederikEaton> $ ghc-pkg unregister WASHHTML
14:47:04 <FrederikEaton> ghc-pkg: package WASHHTML matches multiple packages: WASHHTML, WASHHTML-0.14.8
14:47:22 <xerox> Unregister both, then re-register the correct one?
14:47:51 <jyp> ghc-pkg unregister WASHHTML$ ?
14:48:08 <jyp> (wild guess)
14:48:35 <xerox> It could be :-)
14:50:37 <FrederikEaton> nah doesn't work. you guys aren't helping :)
14:50:43 <FrederikEaton> i just edited the package.conf
14:50:55 <xerox> I'm sorry :(
14:51:07 <FrederikEaton> don't be sorry
14:51:11 <xerox> Good for you that you've fixed, anyway.
14:51:48 <dbremner> TheHunter - Andrei Alexandrescu gave this presentation on lockfree programming at my local user group. http://www.nwcpp.org/Downloads/2005/Lock-Free.pdf
14:52:56 <dbremner> TheHunter - Scott Meyers gave this presentation. http://www.nwcpp.org/Downloads/2004/DCLP_notes.pdf You might find both helpful.
14:53:29 <jyp> lispy, hs-plugins compiled ok here
14:53:46 <jyp> ghc --version
14:53:46 <jyp> The Glorious Glasgow Haskell Compilation System, version 6.4
14:54:40 <TFK> Hurry guys, quantities are limited! http://cgi.ebay.com/ws/eBayISAPI.dll?ViewItem&item=7163650842
14:54:58 <jyp> I gotta get some sleep soon, so bye folks
14:55:02 <xerox> Bye jyp!
16:20:16 <FrederikEaton> easy way to compute md5sum in haskell? or must i use external command?
16:20:35 <wli> Try the MD5 module.
17:11:09 <erg> can someone point me to some haskell code that makes good use of arrows?
17:21:07 <dbremner> erg - shapr has said good things about PArrows. http://www.cs.helsinki.fi/u/ekarttun/PArrows/
17:33:01 <erg> thanks dbremner
17:33:54 <dbremner> erg - np
17:51:42 <Rearden> Functional programming contest http://icfpc.plt-scheme.org/prizes.html
17:52:05 <Rearden> (not just scheme as the url suggests, btw)
18:12:17 <thebug> Rearden: we had a nice conversation about that yesterday, when it was announced
18:17:18 <Rearden> Cool, I guess I was idle.  I just learned of it a few minutes ago.  Too bad I just discovered FP like 2 weeks ago :)
18:18:57 <thebug> :)
18:20:28 <FrederikEaton> when people write web applications do they wrap everything in an exception handler which sends an error page showing the exception or what?
18:22:59 <yain> i think they accept aplication in not-so-functional languages too.
18:33:25 <dbremner> yain - they do, a couple years ago someone won with C++.
18:34:33 <yain> last year topcoder people won in "lighting"(?) division
18:35:07 <yain> i.e. the came up first amoung submissions made in first 24 hours
18:38:25 <yain> topcoder == c++ and java
18:41:44 <yain> but they have a really good team
19:10:23 <dcoutts> TFK, xerox, pong! sorry guys, I've been busy with the ICFP contest. If you've got Gtk2Hs bugs, please send them to the users or devel mailing lists. I'll be back on #haskell on Monday after the contest ends.
19:12:11 <dcoutts> xerox, how'd the application go?
19:12:39 <dcoutts> actually I must sleep now, much coding to do tomorrow...
19:51:02 <thebug> dons: pingggg
20:02:12 <dons> hey. bit busy in the middle of icfp05 right now...
