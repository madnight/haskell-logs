00:00:33 <Wed18783> hi
00:06:27 <Itkovian> meuning
00:16:22 <Wed18783> is there a kind of 'min_int' and 'max_int' function?
00:18:22 <Heffalump> is ffihugs missing on Debian sparc?
00:20:08 <wilx> @index Bounded
00:20:09 <lambdabot> Prelude
00:20:29 <wilx> Err...how do I get a link to docs from lambdabot?
00:20:43 <wilx> Wed18783, look at Bounded class.
00:21:15 <lightstep> @info Bounded
00:21:16 <lambdabot> Unknown command, try @listcommands.
00:21:24 <wilx> http://www.haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t%3ABounded
00:21:35 <lightstep> @docs Prelude
00:21:36 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html
00:21:45 <wilx> Ah.
00:21:46 <wilx> Thanks.
00:22:09 <Wed18783> ah i see, thanks wilx
00:27:28 <Wed18783> hmm, can i import a qualified operator and still use it as an operator?
00:27:29 <Wed18783> `(QName.>#<)` is not working
00:27:47 <Lemmih> QName.>#< will.
00:27:52 <Wed18783> ow
00:31:53 <Wed18783> indeed :D
00:32:13 <Wed18783> i should try the most obvious things first next time :D
00:55:36 <Wed18783> @plugs maybeToList (Just 2)
00:55:41 <lambdabot> [2]
00:55:45 <Wed18783> @plugs maybeToList (Nothing)
00:55:46 <lambdabot> Ambiguous type variable `a' in the top-level constraint
00:55:50 <Wed18783> hmm
00:56:06 <Wed18783> @plugs maybeToList (Nothing) :: [Int]
00:56:07 <lambdabot> []
00:56:31 <musasabi> Is using types like "data Foo a = Foo Int (a (Foo a))" a good idea in indirect composites?
00:59:57 <kzm> Is there a limit to what plugs will allow?  (How about let x = 1:x in x, for instance)
01:00:09 <kzm> (I know I could just try it, but....)
01:01:09 <lightstep> @plugs let x = 1:x in x
01:01:11 <lambdabot> [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
01:01:11 <lambdabot> 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
01:01:11 <lambdabot> 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
01:01:11 <lambdabot> 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
01:01:11 <lambdabot> 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
01:01:13 <lambdabot> 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
01:01:15 <lambdabot> 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
01:01:17 <lambdabot> [24 @more lines]
01:01:21 <lightstep> i don't think it allows IO
01:01:29 <kzm> right.  I found this:
01:01:34 <kzm> @help plugs
01:01:35 <lambdabot>  @plugs <expr>
01:01:35 <lambdabot> You have Haskell, 3 seconds and no IO. Go nuts!
01:01:48 <kzm> Sensible :-)
01:02:03 <lightstep> @code
01:02:04 <lambdabot> Unique.hs: newtype Unique = Unique Integer deriving (Eq,Ord)
01:02:20 <kzm> @help code
01:02:21 <lambdabot>  @code, print random line of code from $fptools
01:05:42 <Wed18783> musasabi, what is your use for that type?
01:07:18 <musasabi> Wed18783: representing both a pure and a mutable representation of types.
01:08:17 <musasabi> data TV w = Prim String | TCons (w (TV w)) (w (TV w)) | TRef (w (w (TV w))) | ...
01:08:57 <musasabi> and e.g. type MutType = IORef (TV IORef)
01:14:11 <shapr> musasabi: PArrows seems popular!
01:16:32 <musasabi> scary :-)
01:17:07 <musasabi> mm.. I seem to have found an infinite loop in the GHC typechecker.
01:17:50 <musasabi> Has anyone got a working cvs head and a minute of time (to check whether it exists there) ?
01:18:27 <musasabi> http://youzen.b2.fi/~musasabi/bug.hs (4 lines)
01:27:31 <Wed18783> still dont get the types :D but nm
01:28:00 <shapr> Have you read the ArrowsIntroduction I haven't finished?
01:28:11 <Wed18783> me?
01:28:14 <Wed18783> or musasabi ?
01:28:24 <Wed18783> or ...
01:28:30 <Wed18783> @type Control.Arrow.second Set.isSubsetOf
01:28:35 <lambdabot> bzzt
01:28:41 <Wed18783> @type Control.Arrow.second Data.Set.isSubsetOf
01:28:42 <lambdabot> Control.Arrow.second Data.Set.isSubsetOf :: forall a d.
01:28:42 <lambdabot>                (Ord a) =>
01:28:42 <lambdabot>                (d, Data.Set.Set a) -> (d, Data.Set.Set a -> Bool)
01:30:21 <Itkovian> wow! http://www.amazon.co.uk/exec/obidos/ISBN%3D0740748475/026-4729589-8858826
01:30:46 <musasabi> Reported it to the bugtracker, now lunch.
01:31:50 <Wed18783> calvin and hobes....who are they
01:32:00 <shapr> Two famous philosophers.
01:32:47 * earthy sniggers
01:32:51 <earthy> um, yeah. :P
01:33:13 <earthy> in Dutch known as Casper and Hobbes, by the way
01:34:00 <Wed18783> hmm i'd rather order wildboys season 1&2
01:36:25 <shapr> hoi swiert
01:36:36 <swiert> hi shapr
01:39:48 * Itkovian bounces
01:40:22 <Itkovian> Wed18783: if you don't know them , it is high time to expand your cultural horizon
01:41:28 <Itkovian> http://en.wikipedia.org/wiki/Calvin_and_Hobbes
01:46:15 <Wed18783> Itkovian, i immediately admit that im slacking in the cultural department....a "cultuurbarbaar"
01:47:30 <Wed18783> @pl \(_,b) (_,d) -> b `subsetOf` d
01:47:31 <lambdabot> flip (ap . (. fst) . const . subsetOf) snd . snd
01:47:36 <Wed18783> hmmm
01:47:53 <Wed18783> @pl \(_,b) (_,d) -> b==d
01:47:54 <lambdabot> flip (ap . (. fst) . const . (==)) snd . snd
01:48:02 <Wed18783> yuk
01:50:00 <Wed18783> @type ***
01:50:01 <lambdabot> bzzt
01:50:21 <Wed18783> @type id Control.Arrow.*** Data.Set.union
01:50:22 <lambdabot> id Control.Arrow.*** Data.Set.union :: forall b a.
01:50:22 <lambdabot>              (Ord a) =>
01:50:22 <lambdabot>              (b, Data.Set.Set a) -> (b, Data.Set.Set a -> Data.Set.
01:50:22 <lambdabot> Set a)
01:50:41 <Wed18783> hmm
01:53:28 <Wed18783> isnt there some kind of arrow thing for operators ?
01:55:39 <Wed18783> a b b b -> a c c c -> a (b, c) (b, c) (b,c)
01:55:42 <Wed18783> that kind of thing
02:49:10 * shapr throws lambdas
02:49:35 <xerox> Hiya people!
02:49:55 <Wed18783> oi
02:50:02 * Lemmih retaliates with sigPIPEs.
02:54:05 <kzm> Hmm...can the bot find a function of a specific type in the std libs?
02:54:18 <shapr> @hoogle (a -> [a])
02:54:19 <lambdabot> Prelude.repeat :: (a -> [a])
02:54:55 <shapr> space leak! over use of thunks!
02:55:03 * shapr has the functional equivalent of Tourette's
02:55:10 <shapr> side effects!
02:55:51 <shapr> mutable variables!
02:56:00 <lightstep> gtk2hs is really really cool. much more than gtk2
02:56:11 * shapr wonders if mutable variables is a oxymoron
02:59:05 <Lemmih> @index memset
02:59:06 <lambdabot> bzzt
02:59:15 <Spark> mutable constants
02:59:17 <tromp> pointer aliasing!
02:59:20 <shapr> yow!
02:59:28 <shapr> hoi tromp
02:59:35 <tromp> hi, shae!
03:00:00 <shapr> How's code?
03:00:03 <tromp> please forgive me
03:00:10 <shapr> For what?
03:00:15 <tromp> i had to resort to C :(
03:00:38 <shapr> I'd say that definitely fits into the purely functional equivalent of Tourette's
03:00:42 <tromp> to be able to finish my computation in 12Gb and 8 hours
03:00:51 <shapr> oh
03:01:02 <shapr> Well, if it works, it's good.
03:01:04 <dons> what part of C did you need to use?
03:01:13 <tromp> rather than the 90Gb and 5 weeks that haskell might take:(
03:02:02 <tromp> i needed total absence of space leaks, super efficient treemaps, and fast bit twiddling
03:02:38 <tromp> i actually used gmp first, but then found it was still using too much space
03:02:44 <dons> well, space leaks you squish with profiling, and we have ops for fast bit twiddling that compile to identical C ops
03:02:52 <tromp> and rewrote the gmp functions myself:(
03:02:57 <dons> huh
03:03:04 <Wed18783> buzzzzzz
03:03:04 <Wed18783> that's not the attitude
03:03:13 <shapr> You want to write a TMR article about it? Sounds like a fun app.
03:03:18 <dons> even all the hand-optimised assembly in gmp. that's pretty amazing.
03:03:28 <shapr> "When to resort to C by John Tromp"
03:03:31 <tromp> not for speed, but to save space
03:03:37 <Heffalump> is it possible to persuade monadic code that just calls C and has a type involve C types (CInt -> CInt say) to compile to code that just does what the equivalent C would?
03:03:39 <dons> yeah, I'd be quite interested in how to deal with such huge space issues
03:03:57 <tromp> even the ghc authors admit that bit twiddling is horribly slow
03:04:06 <Itkovian> shapr: I was actually waiting for that question :-)
03:04:20 <dons> sure, .&. might be on boxed types,,, but we have unboxed twiddling that compiles *exactly* to the C ops
03:04:30 <shapr> Or you could write "How to get GHC to be closer to C in both speed and space"
03:04:42 <tromp> not on 64 bit ints, dons
03:05:00 <dons> hmm... I'll have to check that
03:05:08 <dons> I'm surprised if we don't have 64 bit primops
03:05:11 <shapr> Itkovian: It's my reflex these days. You want to write an article? :-)
03:05:32 <shapr> Actually, I hope to finish my ArrowsIntroduction today.
03:05:52 <Itkovian> heh, if a suitable subject arises, and I find time then yes. otherwise, no.
03:06:03 <shapr> I can think of lots of subjects.
03:06:12 <shapr> What sort of stuff do you do on a daily basis?
03:06:27 <Wed18783> eating, workout, gaming
03:06:29 <Wed18783> :P
03:06:41 <Itkovian> statistics mostly these days ... and then hacking up the JikesRVM
03:06:49 <dons> tromp -- oh, on a 32 bit machine. then you'd need gmp
03:07:04 <tromp> anyway, i can now happily report that the number of 13x13 go positions is
03:07:08 <tromp> 37249792307686396442294904767024517674249157948208717533254799550970595875237705
03:07:10 <tromp> :-P
03:07:14 <dons> hehe
03:07:18 <Itkovian> heh
03:07:21 <lightstep> @plugs 2^(13^2)
03:07:23 <Spark> its an odd number
03:07:24 <Spark> :(
03:07:28 <lambdabot> 748288838313422294120286634350736906063837462003712
03:07:32 <lightstep> @plugs 3^(13^2)
03:07:33 * Itkovian adds that fact to his useful stuff to know database
03:07:34 <lambdabot> 4300233593900342220827320119483567983111472472149976952700388137815324
03:07:34 <lambdabot> 97547421283
03:07:39 <tromp> it should be compared to 3^169
03:07:45 <Philippa> lightstep: they're not all legal
03:07:49 <dons> you should write up your experiences tromp. 
03:07:49 <tromp> each point is black, white, or empty
03:07:51 <lightstep> of course
03:08:09 <tromp> i didn't write one line of haskell for this...
03:08:19 <Itkovian> tromp, yes, but sometimes a field cannot be occupied anymore
03:08:31 <dons> tromp, oh bad bad :P
03:08:53 <tromp> that's why the number i coimputed is only 8% of 3^169, itkovian
03:09:04 <Itkovian> ok ... sorry, I misread
03:09:13 <Spark> what about reflections and rotations
03:09:26 <tromp> ignored
03:09:47 <tromp> a position is different from its rotations
03:09:55 <Spark> okey dokey
03:10:05 <Spark> so did you do it like the 8 queens algorithm
03:10:15 <Spark> can i place a stone here? if yes then recurse otherwise try somewhere else
03:10:44 <tromp> obviously i cant count that high by brute force:(
03:11:04 <Itkovian> tromp: can you describe the search algorithm, or is it standard depth-first?
03:11:10 <lightstep> @remember trompthe number of 13x13 go positions is 37249792307686396442294904767024517674249157948208717533254799550970595875237705
03:11:25 <shapr> Didn't you miss a space?
03:11:32 <Itkovian> yeah ...
03:11:37 <lightstep> yes, i did. how do i tell it to forget?
03:11:38 <tromp> i used dynamic programming
03:12:06 <Itkovian> all that remains is finding a useful application for it :-)
03:12:13 <Itkovian> anyway, i'm off to lunch
03:12:13 <tromp> there are about a 100 million possible border configurations
03:12:13 <dons> lightstep, you have to ask me to make it forget.
03:12:21 <lightstep> please do
03:12:25 <Spark> why cant you count that high? surely the incrementing of the counter is dwarved by the finding places to put the next stone
03:12:46 <dons> but easier is to just remember the correct name and don't care about "trompthe" taking up all the good quotes ;)
03:12:51 <Spark> so just use a bigint library
03:12:54 <tromp> you can count that high only by dynamic programming
03:13:13 <Spark> you could even just use a tuple of ints and code it yourself
03:13:19 <lightstep> @quote tromp
03:13:20 <lambdabot>  the number of 13x13 go positions is 372497923076863964422949047670245
03:13:20 <lambdabot> 17674249157948208717533254799550970595875237705
03:13:37 <Spark> since theres an upper bound
03:13:41 <tromp> i used arrays of 5 64-bit ulongs
03:13:54 <tromp> since gmp had 16byte overhead per counter
03:14:33 <Spark> oh i see woudid
03:14:36 <Spark> oh i see hat you did
03:14:38 <Spark> what you did
03:14:48 <Spark> (i think this keyboard is on the way out)
03:14:59 <shapr> buy a kinesis! w00!
03:15:09 <tromp> unfortunately this approach doesnt extend to 19x19
03:15:28 <Spark> you cache the results for a specific border, then you can refer to that next time you get the same border (although with a different set of un-interfering stones)
03:17:08 <tromp> at some points you have the counts for all borders with the board fixed up to say E3
03:17:37 <tromp> then you go over each border state and generate 3 new borders corresponding to what's at E4
03:17:55 <shapr> swiert: mm, pictures?
03:18:20 <Spark> ah right
03:18:36 <tromp> then the new border must accumulate these counts
03:18:41 <swiert> shapr: yep, they liven things up a little
03:21:34 <shapr> hei Squider_
03:22:14 <tromp> i considered using ocaml for this job, since it has no space leak or speed issues:(
03:22:24 <shapr> Did you try it?
03:22:35 <shapr> On the downside, ocaml isn't very safe (from my viewpoint)
03:23:01 <tromp> nope, i decided i cld bear with C
03:23:53 <tromp> i wished someone made an implementation of haskell that performs like ocaml...
03:24:02 <shapr> There was something vaguely like that.
03:24:11 <shapr> spec_eval was a fork of ghc 5.04
03:24:30 <tromp> that would mean having to explicitly point out what part you need to be lazy
03:24:39 <tromp> everything else being strict...
03:25:07 <shapr> spec_eval was aka 'Optimistic Haskell' because it optimistically evaluated up to a configurable depth.
03:25:40 <shapr> It never eval'd past IO or other dangerous calls (unsafe*), but it was more efficient for many things. It also allowed a 'normal' debugger.
03:26:21 <bourbaki> moin
03:26:22 <shapr> hej bourbaki
03:57:12 <Itkovian> bach
03:57:23 <shapr> but you'll need more piano lessons first
03:58:12 <bourbaki> heh
04:17:11 <musasabi> my type system starts looking like prolog ._.
04:17:22 <Wed18783> does it use red cuts?
04:17:24 <Wed18783> :P
04:18:02 <shapr> Don't all type systems look like Prolog to some degree?
04:18:28 <xs> they need cuts? eww.
04:19:21 <musasabi> Wed18783: currently it uses lots of red pen on paper ;)
04:19:26 * michaelw looks at xs
04:19:42 <xs> :p
04:24:57 <Wed18783> musasabi, equally dangereous ;)
04:31:37 <shapr> hiya wli, how's code?
04:34:23 <swiert> hmm, does the hawiki do autosaves?
04:34:29 <shapr> Sort of, yeah
04:34:40 <shapr> You can revert to older copies
04:34:58 <shapr> It doesn't save form contents that were lost by "cancel" (not that I know of , at least)
04:35:22 <swiert> I didn't save my edit, but closed my browser
04:35:39 <shapr> Nah, it can't save that, you didn't send it to the server.
04:35:49 <shapr> If you hit preview, it might have autosaved that, I'm not sure.
04:36:00 <swiert> too bad...
04:36:25 <swiert> oh well, serves me right
04:37:01 <shapr> I edit in emacs and then paste into the form field.
04:37:20 <shapr> There are several better ways though, including xmlrpc
04:38:53 <Wed18783> @type Control.Arrow.second
04:39:06 <lambdabot> Control.Arrow.second :: forall (a :: * -> * -> *) c d b.
04:39:06 <lambdabot>         (Control.Arrow.Arrow a) =>
04:39:06 <lambdabot>         a b c -> a (d, b) (d, c)
04:39:29 <swiert> I've recently switched to dvorak and mixed up the C-w and C-v
04:39:35 <shapr> oh dear
04:39:40 <shapr> I like dvorak, what do you think?
04:39:49 <shapr> I had that same problem when I started using dvorak.
04:40:38 <swiert> I quite like it, but it takes some getting used to
04:40:52 <Wed18783> yet another layout?
04:41:19 <shapr> It seems more efficient to me. I like the way the consonants are mostly on the right, and the vowels mostly on the left. That means that I can mostly interleave the hand effort of typing.
04:41:25 <swiert> It was a lot easier to learn than I anticipated
04:41:38 <swiert> exactly
04:42:21 <shapr> I learned the home row immediately, and the top row quickly, but the bottom row took more than a week. That makes sense since that's the letter frequency in English.
04:43:38 <swiert> How long did it take you to get back to you're original qwerty speed?
04:43:40 <xerox> It seems hard to me to learn :-\
04:45:22 <Wed18783> i like qwerty because i can type qwerty so easily
04:45:47 <shapr> I like my modified customized dvorak because I can type it so easily.
04:45:50 <shapr> hiya JaffaCake
04:45:57 * JaffaCake waves
04:46:30 <shapr> I was never very fast at qwerty, I learned hunt'n'peck qwerty at the ripe old age of 11. So touchtyping dvorak quickly exceeded my qwerty speed.
04:46:36 * shapr throws lambdas
04:47:01 <xerox> I find it very very frustrating.  I'm very fast on qwerty, I type in from the age of 6 :-\
04:47:03 * Itkovian can't type as it should
04:47:44 <xerox> Touch-type it.  It's difficult for me to forget the mental image of qwerty to do dvorak :-\
04:47:59 <JaffaCake> GHC survey results!  http://www.haskell.org/~simonmar/survey/
04:48:02 <shapr> w00!
04:48:17 <JaffaCake> just the raw data, I'm reading through it to put together a summary
04:48:24 <shapr> Wow, 11% self-employed!
04:48:49 <xerox> Graphics!  Graphics!
04:49:16 * JaffaCake can't be bothered
04:49:36 <shapr> xerox: You could use gnuplot to publish your own graphics.
04:49:44 <shapr> FFI got the highest score, neat.
04:49:52 <JaffaCake> I'm impressed by the number of people who use GHC "for fun"
04:50:05 <JaffaCake> I want to lobby for removing a few features based on the results :)
04:50:21 <shapr> GHC really is an extraspiffy toy for a variety of scientific disciplines.
04:50:55 <JaffaCake> somebody say that?
04:51:16 <shapr> Just me :-)
04:51:26 <JaffaCake> ah, thanks )
04:51:28 <shapr> You can see it from the logs though.
04:51:40 <xerox> Overall comments:  "dsadsa".
04:51:51 <JaffaCake> yeah I saw that one
04:52:07 <JaffaCake> must check to see whether the rest of that response is junk
04:52:38 <shapr> #haskell gets truly interesting questions about math, type theory, AI, heavy duty 3D graphics, physics, game programming, programming language design, etc
04:52:39 <xerox> It's a great compiler, but some flags are just too obscure and produce strange errors.
04:52:42 <xerox> haha!
04:52:42 <xerox> @ghc
04:52:43 <lambdabot>  invalid character
04:53:00 <xerox> @ghc
04:53:00 <lambdabot>  Use -fcontext-stack20 to increase stack size to (e.g.) 20
04:53:10 <xerox> Those aren't really obscure :-\
04:53:32 <shapr> Well, there's my quote "GHC has more flags than the UN"
04:53:47 <xerox> @ghc
04:53:47 <lambdabot>  Command stack underflow at command
04:53:55 <xerox> Ouch.
04:55:10 <xerox> "Not really sure. I'm using it for Perl."  O_o ?
04:55:26 <shapr> JaffaCake: btw, I'd use more features if there were a coherent list of features (like on the survey) and simple intros for each of them.
04:55:57 <shapr> Maybe I should start a 'Nifty Feature of the Month' column and get xerox to write the first article.
04:56:03 <JaffaCake> thanks... perhaps the docs could be rearranged a bit
04:56:06 * shapr quickly volunteers someone else
04:56:19 * xerox stabs shapr
04:56:22 * shapr snickers
04:56:27 <wilx> Huh.
04:56:53 <shapr> xerox: It'd be easy to pick a little-known feature and give a short intro, want to try it?
04:57:00 <wilx> Huh again.
04:57:14 * wilx is reading the surver and answers to "Are new versions released often enough?"
04:57:32 <xerox> shapr, what do you have in mind?
04:57:41 <xerox> I mean, which feature, for example?
04:57:47 <shapr> What about rebindable syntax?
04:57:49 <goron> shapr: How is the hopengl package called when listed in "ghc-pkg list"?
04:57:53 <wilx> I don't understand why some people think that GHC's releases are too frequent...
04:57:54 <JaffaCake> we don't want people to start using the little-known features, because we (perhaps mainly I) want to remove some :)
04:57:58 <shapr> That's just the first thing that I see on the list.
04:58:14 <shapr> Which features do you want to remove?
04:58:23 <xerox> That's an interesting question.
04:58:25 <JaffaCake> linear implicit parameters for a start
04:58:36 * xerox pets TheHunter
04:58:46 <xerox> *a
04:58:48 <JaffaCake> in fact, implicit parameters (but I doubt I'd get away with that)
04:59:05 <shapr> I'm in favor of removing implicit params, but there are some in favor here on #haskell
04:59:20 <autrijus> greetings JaffaCake.
04:59:21 <shapr> er, "some in favor of keeping them"
04:59:34 <JaffaCake> autrijus: hi :)
05:00:03 <autrijus> JaffaCake: how's 6.4.1? :)
05:00:19 * JaffaCake mutters something
05:00:44 <JaffaCake> I need to merge a bunch of stuff in, and the bug list is getting larger :(
05:01:04 <JaffaCake> wanted to get GHCi on amd64 before 6.4.1 too
05:01:20 <autrijus> mm, so instead of documenting the bugs for release you'd like to actually fix them :)
05:01:40 <JaffaCake> that's the general idea, but we usually end up reclassifying a few as features
05:01:50 <TheHunter> i'm fine with linear implicit parameters being removed, but implicit parameters are really nice.
05:01:55 <kzm> And *I* want an AMD64 before 6.4.1 :-)
05:02:06 <autrijus> ahh. that's the secret of how GHC makes the impossible happen
05:02:19 * JaffaCake laughs
05:03:26 <JaffaCake> I want to merge in the changes we made to the package system, that should be a big improvement for some people
05:05:07 <JaffaCake> GHC is less tetchy about having overlapping modules now - you can have a module in your program with the same name as a package module, as long as you don't use the package
05:05:55 <JaffaCake> thanks to dcoutts for banging on about how important it was to fix
05:13:08 <yain> heh, 75% is using ghc for fun
05:13:22 <yain> i wonder if this applies to using haskell in general
05:13:28 <yain> not just ghc
05:13:36 <Wed18783> wow, the movement reduction of a dvorak keyboard is impressive
05:13:40 <shapr> Haskell is the polar ideological opposite of PHP.
05:14:15 <aheller> :)
05:14:33 <aheller> and that just might be my new justification for explaining it to my friends.
05:14:41 <yain> what does it have to do with PHP?
05:14:51 <shapr> Absolutely Nothing, that's the great benefit.
05:15:01 <shapr> But seriously...
05:15:29 <shapr> PHP is about having a few really large chunks sort of randomly chosen. You use those to do stuff in a semi-safe sandbox.
05:15:52 <shapr> To get new chunks, you write them in C.
05:16:07 <yain> php is c.
05:16:10 <yain> with glibc
05:16:20 <shapr> This is good for the 'million monkeys management method.' Because learning those few large chunks is pretty easy.
05:16:56 <shapr> On the downside, once you get something that doesn't fit into those chunks, it's really hard to color outside the lines.
05:18:05 <shapr> PHP is an example of a domain specific language. Personally, I think it could been better designed.
05:18:11 <xerox> What are the chunks you're talking about?
05:18:28 <shapr> The separate calls, they feel high level to me.
05:18:55 <yain> it's not domain specific anymore
05:19:07 <yain> people are writing application servers in php.
05:19:14 <shapr> Yeah, I know, I think that's a bad idea.
05:19:17 <yain> shell scripts etc
05:19:23 <autrijus> it's as specific as the .org and .net and .com domains ;)
05:19:30 <shapr> I've seen gtk apps written in PHP.
05:19:34 <yain> yep.
05:20:05 <shapr> I think domain specific languages is a good approach. But I think it's important to know where the domain ends.
05:20:43 <yain> actually i think it's much better to make general purpose language more suited to certain domain
05:21:06 <yain> than to construct something as horrible as php is.
05:21:08 <shapr> I disagre, but I would like to hear what you have to say about it, I'm willing to change my mind :-)
05:21:12 <shapr> Oh, well.
05:22:26 <shapr> I read on Ward's Wiki that a well-factored Smalltalk application has several thousand three line methods. Then the secret to writing code is to know which methods are out there. PHP and DSLs are on the other end of complexity, very few large chunks that have specific functionality.
05:22:30 <yain> there are probably some domains that require some exotic languages. not that i know of any, but it doesn't mean that such domains do not exist.
05:22:34 <yain> e.g. erlang
05:22:48 <yain> but php domain is basically "text processing"
05:23:33 <shapr> Though you could consider 'sgml processing' and 'db wrapping' as PHP-related domains also.
05:24:06 <shapr> I like how HaXml has ADTs that represent how xml tags plug together.
05:24:09 <yain> php doesn't have sgml processing facilities apart from libxml/expat bindings :P
05:24:16 <xerox> What shapr said seems to me resembling the Haskell strength (at least in my experience) - the little abstractions one compose to express an idea (algorithm).
05:24:18 <shapr> I like how HaskellDB does similar stuff with databases.
05:24:52 <shapr> hej bringert
05:24:55 <shapr> hiya CosmicRay
05:25:03 <bringert> hej shapr
05:25:20 <bringert> anyone know where Dominic Steinitz' Codec library went?
05:25:22 <shapr> xerox: I think the difference with Haskell is that the Prelude includes many basic patterns.
05:25:33 <shapr> It's part of cryptolib, if you mean the ASN.1 codec.
05:25:52 <CosmicRay> hey shapr!
05:25:59 <xerox> shapr, I was comparing those with the little ST methods you were talking about.  Does it apply?
05:26:05 <shapr> Yes, I think it does.
05:26:06 <sh10151> obviously there need to be GoF books about the Prelude :-P
05:26:22 <shapr> Not sure how it compares exactly, but I think you're right that there is a relationship.
05:26:29 <shapr> Hm, that's a good idea.
05:26:32 <andersca> hej shae
05:26:32 <CosmicRay> huh, www.haskell.org/Codec is broken
05:26:36 * shapr grabs his GoF book
05:26:50 <CosmicRay> try http://www.haskell.org/crypto/
05:26:50 <bringert> so, is Codec now part of crypto (at http://haskell.org/crypto/)?
05:26:57 <xerox> @google GoF book
05:26:59 <lambdabot> http://www.amazon.com/exec/obidos/tg/detail/-/0201633612?v=glance
05:27:04 <bringert> I would like it to go the other way :-)
05:30:49 <bringert> I'd like things like MD5 and Base64 to be in a small library without dependencies (crypto depends on NewBinary)
05:31:15 <shapr> If it's a darcs repo, file a patch!
05:31:17 <Heffalump> anyone know if stepcut ever fixed the NewBinary licence?
05:31:26 <xerox> It is!
05:31:34 <Heffalump> darcs repos don't easily support splitting/merging, though.
05:31:35 <shapr> No clue, but the original work is by Hal Daume, from nhc98
05:31:51 <Heffalump> (and David has been somewhat hostile to ideas that would make darcs support that really well, IMO)
05:32:02 <shapr> Hal grabbed Binary from nhc98, made it work with ghc5 or so,then stepcut updated it for ghc6
05:32:03 <autrijus> splitting?
05:32:29 <xerox> Branching?
05:32:53 <bringert> I don't want to fork it just for that
05:32:54 <Heffalump> for a small repo splitting is no problem, because the size of the patches doesn't matter
05:34:01 <Heffalump> hmm, I think the licence is fixed.
05:34:36 <shapr> Let's, the Visitor pattern is handled by pattern matching on ADTs. Template Method is simply higher order parameter functions like 'sortBy'. Strategy is just map/fold/etc. State is obvious, Observer doesn't really apply. Memento is obvious, Iterator is fmap. Interpreter is obvious. Command is just like Strategy. Chain of Responsibility is function composition.
05:34:42 <shapr> That was the Behaviour patterns.
05:36:34 <aheller> I seem to recall someone once saying that Design Patterns was how you make c++ look like smalltalk.
05:36:38 <autrijus> wait, if it's ADT, how do you pattern match it?
05:37:06 <shapr> As for Structural Patterns, Adapter is worker wrapper, Bridge is typeclasses, Composite I don't know, List monad? Decorator could be function composition or higher order functions, Facade is worker wrapper and accumulators. Flyweight is obvious, Proxy is also worker wrapper.
05:37:39 <shapr> foo (Node x) = ...
05:37:43 <shapr> foo (Nil) = ...
05:38:05 <aheller> worker wrapper?
05:38:11 <autrijus> isn't that implementation specific?
05:38:26 <shapr> Yes, but so is Visitor.
05:38:29 <autrijus> (I thought the A in ADT means you don't get to access the Node and Nil)
05:38:46 <autrijus> Visitor in my mind is more like gmap
05:38:49 <shapr> Visitor is even more implementation specific, you have to write two methods, one on the Visitor and one on the object.
05:39:09 <autrijus> sure.
05:39:15 <CosmicRay> hmm, looks like dominic cleaned up the licensing.
05:39:20 <shapr> aheller: http://www.haskell.org/hawiki/WorkerWrapper
05:39:21 <autrijus> but the implementation matters less
05:39:24 <CosmicRay> time for me to import crypto into missingh, methinks
05:39:27 <autrijus> since the object is still opaque
05:39:32 <shapr> That's a good point.
05:39:49 <autrijus> Node and Nil are atoms -- you can't fake them or proxy them
05:40:12 <shapr> Visitor 'proxies' by forcing the object to call a specific method on the visitor object itself.
05:40:23 <shapr> Then it can pass itself or something else to the visitor.
05:40:31 <autrijus> yes, but the thing is you can't have two set of Node/Nil
05:40:41 <shapr> hm?
05:41:04 <autrijus> the visitor pattern is polymorphic over things that implemments the ListVisitor interface
05:41:33 <shapr> Oh I see. You're right, Visitor is more like the various Generics implementations.
05:41:35 <autrijus> whilst your 'foo' works only on a single non-abstract concrete data type
05:41:37 <autrijus> yup.
05:41:51 <shapr> This might be a fun wikipage to write.
05:42:04 <autrijus> so it's more like the "boil your scratchpads"
05:42:06 <shapr> haha!
05:42:41 <shapr> That'll be your second academic paper? :-)
05:42:45 <autrijus> lol.
05:42:47 <aheller> shapr: so, not unlike accumulators?
05:43:17 <autrijus> "Boil your scratchpads - Genetic frogging in Haskell"
05:43:20 <autrijus> or something like that
05:43:36 <shapr> That sounds like a fun paper.
05:43:46 <autrijus> if only I know how to write that
05:44:08 <shapr> aheller: Well, yeah, sort of. I view worker wrappers as a way to snip off one or two 'irregular' steps before a 'regular' pattern of computation is visible.
05:45:20 * autrijus mumbles something incoherent, overlapping and undecidable about origami programming
05:45:30 <aheller> Ah.  The examples on the page just seem to be APS helpers.
05:45:58 <shapr> Hey, have you read about origami math?
05:46:02 <autrijus> yup
05:46:09 <shapr> That's cool stuff.
05:46:14 <autrijus> not saying I grok it, but yeah
05:46:24 <shapr> Neither do I
05:46:42 <shapr> I like reading about paper folding, knot tying, etc
05:47:17 <shapr> I'd like to have a knot theory toolset in Haskell, I think it would do nicely.
05:47:21 <CosmicRay> shapr: many, many moons ago, I had an old DOS BASIC program that used Hercules monochrome graphics to illustrate how to do origami
05:47:29 <shapr> Wow, cool
05:47:34 <CosmicRay> shapr: the only thing I remember from it is how to build a box out of a sheet of paper :-)
05:47:34 <autrijus> Ken Shan worked on knot theory when I first met him
05:47:44 <autrijus> not sure if he still keeps that interest though
05:47:51 <shapr> aka ccshan here, right?
05:47:59 <autrijus> right. hi ccshan :)
05:48:07 <autrijus> hadn't noticed his presence
05:48:13 <CosmicRay> autrijus: btw, you are an AIX user too?
05:48:22 <autrijus> CosmicRay: that's (part of) my job, yes
05:48:28 <CosmicRay> autrijus: I feel your pain
05:48:38 <CosmicRay> autrijus: I get to apply patchset 8 to 5.1L this weekend.
05:48:40 <shapr> You guys should start a revolution.
05:48:43 <CosmicRay> autrijus: anyway, thanks for the ghc 6.3 build
05:48:46 <shapr> AIX users against AIX.
05:48:47 <autrijus> that's okay, I'm well protected by the ghost shell
05:48:50 <CosmicRay> autrijus: was it a fairly easy port?
05:48:58 <autrijus> that is perl, pugs, ghc and gnu toolchain
05:49:09 <shapr> Does AIX have some really marvelous saving graces?
05:49:11 <autrijus> CosmicRay: it was. also it's 6.4
05:49:15 <autrijus> shapr: not at all.
05:49:22 <autrijus> I have this hate-hate relationship with AIX.
05:49:27 <autrijus> I hate it, it hates back.
05:49:36 <CosmicRay> shapr: and *EVERY* AIX admin I've ever met or heard of hates it as well
05:49:36 <shapr> haha
05:49:45 <CosmicRay> I have NEVER met an AIX admin that likes that OS
05:49:46 <shapr> So why does anyone use it?
05:49:56 <autrijus> because it comes with the system?
05:49:57 <CosmicRay> shapr: nice hardware, and suits
05:50:09 <shapr> Ah, manager oriented programming.
05:50:17 <CosmicRay> shapr: there is a reason we pronounce AIX as "aches" and tend to refer to "smitty" with an "h" instead of an "m"
05:50:29 <shapr> haha
05:51:15 <CosmicRay> autrijus: err, right, I meant to say 6.4 :-)
05:51:15 * autrijus notes ccshan's very cute /away message
05:51:47 <CosmicRay> autrijus: tell me more about this ghost shell
05:52:04 <CosmicRay> autrijus: I had one heck of a nasty time building ghc 6.2 on aix, but then there was no ghc6 on 5.1l to begin with
05:52:14 * autrijus is having one of those "this is interesting. tell me more about your family" flashback
05:52:19 <CosmicRay> hehe
05:52:33 <autrijus> CosmicRay: right. with a working ghc 6.2, the 6.4 port is much easier
05:52:50 <autrijus> well, the ghost shell is simply a /usr/local that contains preinstalled gnu toolchains and perl and ghc and pugs
05:52:57 <CosmicRay> I still had a lot of trouble with 64-bit vs. 32-bit code
05:52:59 <CosmicRay> ah, nice
05:53:03 <autrijus> and I tarbz2 it and deploy it to all AIX I land on
05:53:13 <autrijus> and pretend I'm working on freebsd ;)
05:53:17 <CosmicRay> heh
05:53:26 <autrijus> (which, if you ignore the fact that the filesystem speaks EBCDIC, actually works quite well)
05:53:46 <CosmicRay> what, JFS2 still uses ebcdic?
05:53:59 <CosmicRay> here I was excited because we were finally moving to a system based on ASCII
05:54:01 <autrijus> underneath, yeah. found it the hard way when I tried to use chinese filenames in svn
05:54:04 <CosmicRay> heh
05:54:12 <autrijus> but it maintains a pretty good ascii facade
05:54:51 <dcoutts> JaffaCake, glad to hear that my going on and on was in any way useful. :-)
05:55:27 <JaffaCake> well, it worked :)
05:55:57 <JaffaCake> turned out a little tricky though, especially with GHCi, I suspect it's still not quite right
05:56:10 <CosmicRay> your freebsd illusion will be promptly shattered when you get a message liks "[0134123-141231] The named entity did not exist on this logical instance" instead of "File not found" :-)
05:56:42 <dcoutts> JaffaCake, well if you tell us when it's merged, we can give it a go and see if we can still break it :-)
05:56:53 * JaffaCake gulps
05:56:58 <autrijus> CosmicRay: I kindly plead you to stop invoking my recurring painful memories :)
05:57:08 <CosmicRay> hehe
05:57:19 <dcoutts> I still need to test 6.4.1_pre on amd64 again and see if Gtk2Hs is working yet
05:57:28 <JaffaCake> yes, please do
05:57:34 <CosmicRay> JaffaCake: btw, what are your current thoughts about darcs for fptools?
05:57:49 <JaffaCake> pretty much the empty set, right now :)
05:58:08 <CosmicRay> anything I can do to expand that set a bit? :-)
05:58:16 <JaffaCake> (still think it's a good idea, but too busy with other stuff to give it any real thought)
05:58:21 <CosmicRay> ok.
05:58:45 <dcoutts> JaffaCake, I think I've asked before, but the " foreign import "&foo" " bug is fixed in the 6.4 branch now?
05:58:50 <JaffaCake> I still like the idea of separating out the repos somehow
05:59:03 <CosmicRay> btw, after thinking about it for awhile, I think it could work reasonably well to split the fptools repo into individual darcs repos
05:59:03 <JaffaCake> dcoutts: yes
05:59:09 <dcoutts> cool, I'll give it a go
06:00:47 <CosmicRay> JaffaCake: if you happen to have a preferred CVS -> darcs split, let me know... or would it just be by top-level directory?  (happy, haddock, libraries, hslibs, etc. all to their own repo)?
06:01:11 <Wed18783> kosmikus, how can i prevent lhs2tex from indenting my code blocks? i need the space :P
06:01:59 <JaffaCake> CosmicRay: yes, but I'd like each repo to have its own copy of the shared fptools stuff
06:02:19 <JaffaCake> and somehow pull patches to the shared stuff between the repos
06:02:30 <CosmicRay> the shared stuff being which bits, exactly?
06:02:30 <CosmicRay> that is not hard to do
06:02:38 <CosmicRay> if it's set up right to start with
06:02:40 <CosmicRay> which is also not hard to do
06:02:56 <JaffaCake> fptools, fptools/mk fptools/glafp-utils fptools/distrib fptools/docs
06:03:59 <CosmicRay> by jsut "fptools", you meanthe Makefile and autoconf stuff in the top-level?
06:04:02 <Lemmih> bringert: Have you fixed the sigPIPE bug in your fast-cgi binding?
06:04:26 <JaffaCake> CosmicRay: yep
06:05:25 <CosmicRay> JaffaCake: that should be no problem.  Would you like me to post somewhere (cafe?) and ask you for a few more particulars about how you'd like this to all look?
06:06:35 <JaffaCake> I think we're still at the experimental stage... I wouldn't want to commit to a particular design right now without more experience with it
06:07:09 <JaffaCake> but I'm sure others will be able to give some useful feedback too
06:07:27 <CosmicRay> JaffaCake: I'm volunteering to set up something for you to experiment with :-)
06:07:27 <brianm> any os x denizens around who have managed to get ghc 6.4 to build on 10.4?
06:08:08 <goron> JaffaCake: I am building GHC(I want HOpenGL) again. HOpenGL is configured now, but no Graphics.UI.GLUT is build somehow.
06:08:39 <JaffaCake> CosmicRay: great, just wanted to be sure that this isn't the final word in what we're going to do
06:09:26 <JaffaCake> goron: I guess configure didn't detect your GLUT library somehow.. I don't know much about that, you could try asking on the HOpenGL list (or did you already?)
06:12:42 <goron> JaffaCake: You are right. It looks for GL/glut.h . In what directory does it look for that header file? If I would know, I could place a symlink, and I would be done.
06:13:05 <JaffaCake> probably in the standard places (/usr/include)
06:13:23 <Lemmih> goron: Check out --includedir
06:13:24 <JaffaCake> maybe you have to tell it to look in /usr/local/include?
06:14:16 <goron> Lemmih: That's an argument to top-level configure?
06:14:53 <goron> JaffaCake: Yes, mine is in /usr/local/include
06:14:59 <Lemmih> Yes, not sure if it only applies to 'make install', though.
06:26:52 <goron> It seems it just ignores the includedir in  CONFIGURE_ARGS=--with-ghc=${BOOT_GHC}  --with-gcc=${CC} --includedir=/usr/local/include
06:27:29 <goron> I added that last argument after Lemmih's hint.
06:31:06 <brianm> hmm, okay -- how do you bootstrap ghc up from nothing on a system (no installed or viable install available)?
06:31:48 <Igloo> What sort of system?
06:32:03 <brianm> Igloo: OS X 10.4
06:32:07 <goron> brianm: Doesn't MacOS X have Darwin Ports?
06:32:36 <brianm> goron: yes, but it barfs on readline and I haven't managed to get it past that, so am trying to build it directly instead of darwinports
06:33:06 <Igloo> It will be easier/quicker to sort readline out than port ghc
06:33:06 <brianm> goron: the fink one dies in the same place, and the maintainer has never replied to emails sent
06:33:40 <brianm> Igloo: I tend to agree, but I have thus far been unable to =/ My best guess is a level 2 namespace issue where the boostrapper was built against a non-standard config which I cannot replicate
06:34:02 <goron> brianm: Atleast the FreeBSD maintainer responds, but there's no solution yet :(
06:34:24 <goron> Lemmih: I added a symlink in /usr/include to /usr/local/include/GL named GL.
06:34:24 <brianm> goron: =(
06:34:51 <goron> Lemmih: But still configure script doesn't see the file somehow.
06:35:47 <goron> er the configure script
06:37:15 <goron> I guess building from raw-source is easier then building from Ports...
06:37:29 <goron> Ow, I guess I know what's wrong.
06:38:19 <goron> The place where the configure script get it's information is that the file system? Or some cache? Maybe the cache is out of date.
06:39:03 <brianm> goron: I don't know the darwin linker very well, but I am told there is no equivalent of ld.so.cache -- so nothing should be left in there
06:39:51 <bringert> Lemmih: no, unfortunately
06:42:21 <Wed18783> what is esthetically the best; making a class Foo that contains a new <= definition and make people import it qualified........OR.....make a class Foo with a method <=.....OR...something else
06:46:45 <Lemmih> bringert: I've hacked efficient implementations of sStrictRead, sGetContents and sPutStr. Will mail you patches once I figure out how to fix the sigPIPE problem.
06:47:41 <bringert> Lemmih: ok, cool
06:48:07 <bringert> I'll be gone for a few weeks starting tomorrow night, so it might take a while for me to respond
06:55:04 <Itkovian> brianm: I've got ghc-6.4, but I'm still on Panther :-(
06:56:39 <brianm> Itkovian: yeah, I had it on Panther as well, but Tiger is this far resisting me. Bloody readline crap (is barfing on undefined symbols for readline -- apple uses NetBSD's libedit instead of readline, and I have a local install of readline to make up for it, and it is getting wholly borked somewhere between em -- even though darwinports should be attempting to likn against IT'S own readline install) all a big mess
06:59:24 <Itkovian> thank god I haven't upgraded then ... yet
06:59:43 <brianm> Itkovian: parts are nice, but overall I'd probably un-upgrade if I had time to rebuild the whole system
06:59:57 <Itkovian> brianm: fink isn't the same as darwinports is it? doesn't it work there?
07:00:12 <brianm> Itkovian: fink breaks in the same way, unfortunately
07:00:17 <Itkovian> You can always d/l readline yourself and compile it and drop it into /usr/local, no?
07:00:26 <Itkovian> then at least you can fix it ...
07:00:33 <brianm> Itkovian: I did =)
07:00:57 <Itkovian> well, then ... and ghc still isn't ok, perhaps darwinports and fink are fubar atm?
07:01:04 <brianm> Itkovian: which lets me build other things in a reasonable manner, but bootstrapping ghc is a whole other world
07:01:42 <shapr> w00, I got the last piece of my unicycle!
07:01:52 <brianm> Itkovian: it has been strongly suggested that it is probably easier to fix the readline issue than bootstrap ghc from nada, but I haven't figured out the readline issue yet =/
07:01:58 <shapr> Except for two pieces I forgot to order :-(
07:02:20 * xerox is still waiting for his skate, hmpf
07:02:35 <goron> brianm: Well, it was a wild guess.
07:02:52 <brianm> goron: ?
07:02:52 * goron is sick of it and will just get the raw source. 
07:03:10 <goron> brianm: see 23 min ago
07:03:20 <Itkovian> hmm, isn't it possible to bootstrap ghc using gcc?
07:04:43 <bringert> Lemmih: I have a temporary fix for the SIGPIPE bug in FastCGI
07:04:44 <bringert> it boils down to not using the MT-safe API
07:04:44 <brianm> goron: ah -- as far as I have been able to determine it looks at the filesystem -- I say that, though having had an issue earlier where it was looking for non-existant (fink-style locations) libraries though from the binary dist on haskell.org for 10.3 (which I attempted to use for a bootstrap)
07:04:44 <bringert> dunno what the problem really is
07:04:44 <dcoutts> Itkovian, not really. It used to be possible and that's how you do a port to a new arch, but it's not a nice way of bootstrapping
07:05:04 <Lemmih> bringert: Do tell more.
07:05:07 <Itkovian> nice ways are irrelevant, if it works you can reinstall using the bootstrapped ghc
07:05:18 <Itkovian> hmm
07:05:36 <goron> Another brain-damaged thing is that the FreeBSD binary also has no HOpenGL support compiled in :(
07:05:47 <dcoutts> well it makes the people who have tried it pull their hair out and scream. It's really really not a nice way to bootstrap.
07:05:59 <Itkovian> I seem to have lost my account on my buddy's machine since he upgraded to Tiger, so I can't really help from hee.
07:06:02 <Itkovian> *here
07:06:19 <brianm> Itkovian: =)
07:06:22 <Itkovian> dcoutts: ok
07:06:23 <goron> Of the 7 percent using FreeBSD of ghc users, it seems nobody uses HOpenGL.
07:06:56 <brianm> goron: I suspect that few people using FreeBSD use X with their FreeBSD install -- is pretty server focused in most cases
07:07:04 <brianm> er, DON'T use X
07:07:20 <brianm> er, you know what I mean =)
07:07:35 <goron> brianm: There are quite some people using it also as workstation.
07:07:39 <shapr> coi djul .i ma nuzba
07:08:05 <goron> brianm: Doom3 and UT2004 run on it.
07:08:33 <brianm> goron: no kidding? linux-compat mode, or natively?
07:09:48 <goron> brianm: linux-compat
07:10:08 <goron> brianm: No kidding.
07:10:09 <goron> brianm: Doom 3 demo only thing I tried.
07:10:16 <goron> brianm: ut2004demo is in ports.
07:10:25 <goron> brianm: UT2004 complete also runs
07:10:25 <brianm> goron: hah!
07:10:53 <goron> brianm: A little secret: It runs faster then on Debian/Gentoo Linux :)
07:11:01 <bringert> Lemmih: I've pushed a patch which comments out the current use of the MT safe stuff, using the non MT safe API. that seems to fix the problem.
07:11:17 <bringert> and mod_fastcgi doesn
07:11:20 <brianm> goron: woot! need more fuel to smack linux weenies with =)
07:11:40 <bringert> 't support concurreny requests to the same fastcgi process anyway
07:11:40 <goron> brianm: In glxgears I get 1000 fps more then on Linux.
07:12:14 <brianm> goron: uh, 1000fps more is a little worrisome -- that is an absurd (and impossible) number
07:12:36 <goron> brianm: glxgears is a test program.
07:13:28 <brianm> goron: I only see utserver in my ports tree =/
07:14:10 <brianm> goron: doing a fresh cvsup =)
07:15:39 * Itkovian used to have FreeBSD but work requirements brought on a switch to Gentoo
07:16:24 <goron> brianm: linux-ut2004-demo-3334 Unreal Tournament 2004 demo
07:17:10 <goron> Itkovian: Gentoo for work? Do you get any work done :)
07:17:22 <Itkovian> goron: sure!
07:17:40 <Itkovian> better than when I'd use bloated Fedora or some such
07:17:48 <Itkovian> I'm in control ... or I think I am
07:19:10 <goron> Itkovian: I have enough space for a bloated distro, so I don't care about that. But from my experience, Gentoo forces you to compile almost everything.
07:19:55 <goron> The great thing about fbsd is that you don't have that problem.
07:19:58 <Itkovian> goron: well, it depends ... there are binary packages as well, but the main principle is that you compile
07:20:12 <Itkovian> it gets done in the bg, or when I'm otherwise not torturing the CPU
07:20:31 <Itkovian> keeps my machine nicely up to date and allows me to cut the bloat
07:20:53 <goron> Itkovian: also checking whether things build corretly took a lot of time.
07:21:02 <Itkovian> anyway, I'm addicted to my powerbook, so ...
07:21:05 <goron> Itkovian: QA was virtually zero.
07:21:42 <Itkovian> Well, imo Gentoo is about as nice as FreeBSD as far as ports are concerned.
07:21:49 <Itkovian> which is why I chose it :-)
07:21:52 <Itkovian> mainly
07:22:40 <brianm> Itkovian: you are running gentoo on powerbook?
07:22:45 <Itkovian> No way!!!!!!!!!!!!!
07:22:46 <shapr> I run CPM on my laptop!
07:22:53 <shapr> CP/M, that is
07:22:56 <Itkovian> Gentoo on my desktops
07:23:01 <brianm> Itkovian: phew
07:23:03 <goron> shapr: what's that?
07:23:04 <Itkovian> MacOSX on my mac
07:23:07 <shapr> oy
07:23:18 <shapr> goron: It was the OS before DOS.
07:23:32 <brianm> Itkovian: i know a couple people who switched to ubuntu on their powerbooks, blows my mind when they could be on one of the nice ibm lappies if they want linux. Oh well.
07:23:34 <Lemmih> bringert: I'm still getting sigPIPE errors when I compile with -threaded.
07:23:35 <Itkovian> DOS hardly qualifies as an OS imo
07:23:36 <shapr> And I write my shell scripts in JCL!
07:23:42 <goron> shapr: And why again do you run it?
07:23:46 <shapr> Itkovian: you should have seen CP/M.
07:23:53 <brianm> shapr: you need to be slapped with a wet carp for saying that
07:24:02 <shapr> goron: Sorry, I was just joining into the very small OS war on the channel.
07:24:24 <shapr> I love CP/M, it stays out of my way!
07:24:24 <Itkovian> why would I want to run Linux on my mac? Well, we've got a Mac powermac running linux, but that;'s mainly for porting purposes of our techniques
07:24:36 <shapr> I run House/hOp on my laptop!
07:24:49 <shapr> That's right, dual 33MHz SPARC laptop running GHC!
07:25:01 <Itkovian> shapr: there is no OS war, we're telling each other how great our OSses are ;-)
07:25:06 * shapr continues to spiral out of control!
07:25:15 <shapr> I'm just teasing :-)
07:25:34 <brianm> Itkovian: or in my case how totally sucky OS X 10.4 is compared to 10.3 =)
07:25:34 <Itkovian> hehe
07:26:00 <Itkovian> I've heard otherwise, guess ghc is a bit troublesome but Tiger seems to be very good
07:26:05 <goron> shapr: http://www.seasip.demon.co.uk/Cpm/whycpm.html
07:26:08 <Itkovian> dashboard is l33t
07:26:11 <Enveigler1> hip hip for pip!
07:26:54 <Itkovian> hmm ... Ich hab keine Lust
07:26:54 * Itkovian bounces
07:26:55 <bringert> Lemmih: weird, I don't get any SIGPIPEs, with or without -threaded
07:26:55 <brianm> oo, there is a binary bootstrap build for 10.4 on haskell.org now, time to go try again
07:27:05 <Itkovian> woot!
07:27:56 <bringert> Lemmih: I removed the -threaded options from the cabal file
07:27:57 <Itkovian> so much for nothingmuch
07:28:02 <bringert> does it work without it?
07:28:09 <bringert> i.e.e not get SIGPIPE?
07:28:32 <Itkovian> @seen boegel
07:28:35 <lambdabot> I saw boegel leaving #haskell 16 hours, 9 minutes and 46 seconds ago.
07:28:40 <Lemmih> Yeah, it works without -threaded.
07:29:30 <bringert> this looks like a bug somewhere, dunno where though
07:30:11 <goron> I think the "pure" in pure functional programming is completely arbitrarily, since now only the stack is modelled to be pure, but there's no reason why other hardware couldn't be integrated. The idea of "side-effect" is that it's not modeled within the system.
07:31:20 <shapr> Really?
07:33:06 <goron> shapr: Well, why not?
07:33:06 <shapr> I think pure and side-effects aren't necessarily mutually exclusive.
07:33:06 <shapr> Pure just means "described entirely by its inputs"
07:33:22 <shapr> Actually, 'purely functional' means that, but you get the idea.
07:33:37 <goron> shapr: afaik only physics is not "pure".
07:33:42 <shapr> What stack are you talking about anyway?
07:34:00 <goron> shapr: Stack structure in memory.
07:34:24 <shapr> I wrote a bit about 'purely functional' hardware and how it could improve fix the cc part of ccNUMA so that NUMA would be more efficient.
07:34:28 <goron> shapr: Or register architecture (it doesn't really matter).
07:34:47 <shapr> Henry Baker has already been there and done that though.
07:35:12 <shapr> @seen peti
07:35:13 <lambdabot> I haven't seen peti.
07:35:27 <shapr> @seen alexj
07:35:27 <lambdabot> I saw alexj leaving #haskell 27 days, 14 hours, 36 minutes and 43
07:35:27 <lambdabot> seconds ago, and I have missed 11 days, 22 hours, 29 minutes and 34
07:35:27 <lambdabot> seconds since then.
07:35:29 <goron> shapr: Well, then we agree pretty much :)
07:35:40 <shapr> goron: Have you read Henry Baker's GC papers?
07:35:46 <goron> shapr: no
07:35:56 <goron> Never heard of him
07:36:19 <shapr> http://home.pipeline.com/~hbaker1/
07:36:35 <shapr> He's a really cool guy. He was the head guru of linear everything for awhile.
07:36:54 <shapr> For whatever reason he decided to get out of programming research and become an investment banker.
07:36:56 <tuomov> Everything is "pure" in the sense "described entirely by its inputs" if you take the set of inputs large enough
07:37:56 <goron> shapr: You seem to know something of a lot of things(I said this before to you).
07:37:57 <shapr> He shares some unusual interests with me - http://home.pipeline.com/~hbaker1/gratuitous.html
07:37:58 <tuomov> "Described entirely by explicit parameters" might be a better definition
07:38:15 <xerox> http://www.cs.nott.ac.uk/~pni/Papers/Tutorials/Gist-Effects/gist-effects.pdf
07:38:18 <shapr> goron: I think I just get bored easily, read random stuff and get sparky connections to stuff I already know.
07:38:45 <shapr> For example, I've recently been thinking about ecologically sustainable graffiti.
07:39:40 <shapr> http://www.storiesfromspace.co.uk/data/html/mossgraffiti.html
07:39:42 <goron> tuomov: "Described entirely by explicit parameters which were arbitrarily chosen."
07:39:47 <xerox> I think they're possible and actual - some people are not using O_3-damaging sprays.
07:40:08 <goron> shapr: Same hobby: http://home.pipeline.com/~hbaker1/gratuitous.html
07:40:13 <shapr> goron: Right, exactly.
07:40:28 <shapr> http://www.scannedinavian.org/AvianWiki/UnicyclingProgrammers
07:41:51 <shapr> goron: Anyway, if you want extreme entertainment, we can get some people together to play conversational ping-pong.
07:45:59 <xerox> Great: http://www.storiesfromspace.co.uk/data/html/weed.html
07:46:06 <shapr> Igloo: thanks very much for your tuning work in darcs 1.0.3. It's SO MUCH FASTER!
07:46:17 <goron> shapr: ping
07:47:25 <shapr> pong!
07:47:29 <shapr> goron: you screamt?
07:47:48 <shapr> oh that's not how conversational ping-pong works.
07:48:05 <shapr> Nah, conversational ping-pong is the perfect game for any party, or for any collection of people who don't know each other.
07:48:14 <shapr> Let me quickly describe this wonderful game.
07:49:27 <shapr> Each person comes up with a concept that they associate with the previous concept and they say it. Something like "<goron> Lamb" "<shapr> Chop" "<tuomov> Stick"
07:50:04 <shapr> There are two rules, you have to explain your association if someone asks, and a player cannot reuse the same concept in the same game.
07:50:24 <shapr> Other people can say chop in the same game where I said it, but I can't use it twice in the same game.
07:51:00 <shapr> This game rarely lasts more than ten minutes, because everyone discovers they have some interest in common and they all start talking about that. This is good, since that's the purpose of the game.
07:51:33 <shapr> Like I said, it's the perfect game for introducing people.
07:51:57 <goron> I see.
07:52:03 <jlouis> cool idea
07:52:46 <goron> Does --includedir=DIR also include --includedir=somedir1:somedir2 of some kind?
07:52:55 <shapr> I've been playing and refining that game for the last ten years at least. I came up with the idea myself, but I'm not the first. I think Monty Python had something similar, conversational football.
07:53:53 <dcoutts> shapr, I've added myself to your list of UnicyclingProgrammers
07:54:03 <shapr> w00
07:54:11 <jlouis> any JugglingProgrammers?
07:54:31 <shapr> Yeah, many of the above. I'm a minimal jongleur myself.
07:54:55 <xerox> <- SkaterProgrammer
07:55:28 <shapr> I do wish microcomputers and actuators would reach the point where I can do useful stuff with them on a unicycle.
07:55:33 <xerox> Non simultaneously.
07:55:42 <xerox> ah-ha.
07:56:17 <shapr> goron: Anyway, the lateral connection there is that conversational ping-pong is a good way to find new areas of knowledge to explore. That's how I learned of the existence of many things that I have since read about.
07:56:43 <shapr> Another easy route is to hang out with heavily AD(h)D people and listen to them talk.
07:56:52 <shapr> Like Jon Singer for instance.
08:00:29 <brianm> AH HAH!
08:00:58 <brianm> the bootstrap ghc darwinports is using has some bad links presumed
08:05:47 <olliej> anyone know whether it's possible to define [] as something other than the default List?
08:07:43 <Lemmih> That's not possible.
08:07:57 <olliej> gah
08:08:00 <dcoutts> even with the ghc rebindable syntax?
08:08:19 <goron> olliej: It's possible, but then it wouldn't be Haskell98.
08:08:49 <olliej> nuts... So I have some quality Core hacking to go...
08:09:05 <olliej> :(
08:09:11 <goron> olliej: But why would you do that?
08:09:14 <CosmicRay> olliej: if it were me, I would write a pre-processor to transform [] in the input stream to appropriate haskell output
08:09:33 <olliej> Core output for GHC produce references to GHC.Prim.[]
08:09:40 <olliej> which isn't user defineable
08:10:09 <CosmicRay> but goron's question is a good one
08:10:23 <dcoutts> http://haskell.org/ghc/docs/latest/html/users_guide/syntax-extns.html#rebindable-syntax
08:10:40 <olliej> CosmicRay: not working with haskell- -- im working with Core which is GHC intermediate language
08:11:09 <CosmicRay> ah.
08:11:12 <olliej> goron: so i can define [] to be a list :)
08:11:17 <shapr> Are you at chalmers?
08:11:28 <shapr> If not, the chalmers guys are supporting External Core these days.
08:11:28 <Lemmih> goron: How is it possible?
08:11:31 <olliej> me? no :)
08:11:43 <olliej> chalmers?
08:13:04 <shapr> Ya know, the Mecca for Haskellers round the world.
08:13:04 <goron> Lemmih: Well, I don't know how *exactly*. But it seems trivial that it's *possible*.
08:13:33 <olliej> shapr: nope :) my supervisor will probably hurt me for not knowing though
08:13:36 <goron> olliej: I meant why would you change the semantics for []?
08:14:35 <olliej> goron: i wouldn't even change them :) i need the core output from defining them, and i'd rather not write core manually :) because i'm slack :)
08:14:56 <olliej> hmmm... is it possible to define a module over multiple files?
08:15:05 <olliej> no wait, i can deal with that..
08:15:05 <shapr> Are you a member of the church of the sub-genius?
08:15:08 <olliej> ignore question :)
08:15:30 <olliej> me? no -- i'm just a run of the mill idiot :)
08:15:55 <shapr> And yet, you already know about slack.
08:15:59 <olliej> i primarily live in the world of imperative languages, so it's fitting for my masters to be compiling haskell :)
08:16:12 <shapr> Do you have a page online about your research?
08:16:19 <olliej> nope :)
08:16:24 <olliej> ...
08:16:27 <shapr> aw, why not?
08:16:33 <olliej> nigel probably will (supervisor)
08:16:35 <olliej> just a mo...
08:16:51 <shapr> Nigel Perry?
08:17:06 <olliej> yup
08:17:09 <olliej> :)
08:17:38 <shapr> cool
08:18:32 <olliej> I do have to put up with "almost-rants" on everything from the brokenness of .nets type system, to bicycle helmets (don't ask)
08:18:56 <shapr> Hm, what about bicycle helmets?
08:19:01 <CosmicRay> heh
08:19:01 <shapr> Suddenly I'm interested.
08:19:08 <CosmicRay> olliej: shapr is an avid unicycler
08:19:13 <olliej> ahhh
08:19:19 <goron> olliej: I don't get what you want to do. I know what Core is, but I don't see the problem. First you say that you want to redefine []. Then you say that in the Core output [] is a primitive.
08:19:21 <shapr> In fact, my next unicycle will be ready to ride on Monday.
08:20:16 <shapr> Is this a sweet unicycle or what? --> http://www.scannedinavian.com/2005-05-16.html
08:20:31 <olliej> goron: i can define most types (Bool, etc) in haskell normally, to get a nice big file containing the Core description for them
08:20:51 <olliej> goron: but for types like [] and tuple i can't
08:21:11 <olliej> goron: i could write them (and other's like them) in core directly but i was wonderin gif there was a nice way to avoid that :)
08:21:49 <shapr> You could use lambda-sed
08:22:17 <olliej> shapr: i'd swear it has brakes on it
08:22:24 <olliej> shapr: lambda-sed?
08:22:39 <shapr> Isn't it normal for municycles to have brakes?
08:22:57 <goron> olliej: Could you post an example of such a desciption?
08:23:11 <shapr> Actually, you could just sed the output to replace GHC.Prim.[]
08:23:26 <olliej> i live in studentville (i'm a student :) ) i've never really looked but people just seem to hop of unicycle or balance on the pedals -- rather than use brakes...
08:23:29 <shapr> It's an ugly hack, but it'd work for the moment.
08:24:10 <olliej> shapr: hehe... or i could use z coded core *shudder*
08:24:17 <shapr> I think you have large mountains nearby, riding a unicycle down those is much easier with brakes.
08:24:30 <olliej> shapr: alternatively i just programmatcally generated them straight into the symbol table...
08:24:40 <olliej> shapr: true...
08:25:06 <shapr> Your best bet it to ask on ghc-users, or poke nibro or other chalmerite who might know the person directly responsible for External Core at chalmers.
08:25:33 <shapr> bringert might know also.
08:25:41 <olliej> cool
08:25:41 <olliej> in the mean while i'll avoid lists
08:25:41 <CosmicRay> shapr: hmm, your fiancee names your unicycles?  my wife names my computers :-)
08:25:43 <olliej> and just get function calls working properly
08:25:47 <shapr> Yeah, so far named Haskell, Python, and Secret Joy
08:25:48 <dcoutts> shapr, pa! brakes on unicycles are for wusses!
08:26:09 <CosmicRay> shapr: let me guess, when you ride Python, does it accelerate quickly, but then when you make an unexpected turn, crash spectacularly?
08:26:59 <olliej> hehe
08:26:59 <shapr> dcoutts: I went down a ski slope two days ago without brakes, I have now realized how useful they can be.
08:26:59 <CosmicRay> shapr: and before you even set out on Haskell, do you get a premonition of danger instead of getting hit by a bus?
08:27:01 <dcoutts> fair enough, I don't go down things steeper than bridges :-)
08:27:06 <shapr> Actually, my 20" trainer is named Haskell, my 24" muni is named Python, and my 26" monster muni will be named Secret Joy
08:27:10 <CosmicRay> heh
08:27:14 <dcoutts> :-)
08:27:41 <brianm> bizarre question, can you bootstrap ghc from hugs?
08:27:51 * olliej is amazed that references to his rotor work still exist on the mondrian site
08:28:11 <shapr> My fiancee purchased Haskell and half of Python. She named them for her perception of their equally general purpose programming language.
08:28:21 <dcoutts> brianm, no not possible
08:28:29 * shapr wonders if those sentences were overly convoluted
08:28:33 <CosmicRay> brianm: no
08:28:53 <brianm> dcoutts, CosmicRay
08:28:53 <kolmodin> thank God no :)
08:29:00 <bringert> shapr: I believe that might be ralejs
08:29:09 <brianm> er, ah well, was worth a thought =)
08:29:09 <bringert> aka Josef S
08:29:12 <shapr> Cool, thanks.
08:29:15 * bringert is going on vacation
08:29:24 <shapr> olliej: There's your answer, Josef Sveningsson.
08:29:27 <shapr> g'bye bringert!
08:29:29 <dcoutts> brianm, ghc uses various ghc extensions
08:29:57 <brianm> dcoutts: okay, will eventually get a usable ghc on 10.4 =) may need to read up on the gcc bootstrap process =/
08:30:31 <olliej> shapr: cheers
08:30:32 <dcoutts> brianm, the binary build for 10.3 doesn't work on 10.4?
08:30:50 <brianm> dcoutts: it "works" as long as you don't try to do certain things like compile darcs
08:30:54 <CosmicRay> heh
08:31:07 <dcoutts> well how about using that to bootstrap ghc on 10.4?
08:31:11 <brianm> dcoutts: then it exposes some bad links to shared libraries
08:31:25 <brianm> dcoutts: that was my thought, but it is exploding on readline
08:31:59 <dcoutts> I think you'll find it much easier to work up from a previous binary build than doing another bootstrap
08:32:14 <brianm> dcoutts: the bootstrap one on haskell.org (the 6.4 tiger bootstrap) presumes darwinports is installed and it is installed in darwinports style locations, the pkg file presumes fink
08:33:32 <brianm> dcoutts: my current technique amounts to messing with libraries the bootstrap ghc expects to find and trying to run the darwinports build (which takes a few hours) so slow going
08:33:44 <goron> Are OpenGL/gl.h and GL/gl.h the same files?
08:35:17 <Igloo> CosmicRay: Does dh_haskell do something sensible with cabal packages depending on each other?
08:35:34 <dcoutts> brianm, it may be slow going but I'm sure it's a better approach than trying a .hc build
08:35:39 <dcoutts> good luck!
08:35:55 <olliej> shapr: nope, nigel has no references to my work either -- maybe one day i'll put something up :)
08:36:24 <CosmicRay> Igloo: not automatically
08:36:33 <CosmicRay> Igloo: you have to add stuff to debian/control like usual
08:36:38 <Igloo> Bah
08:36:56 <Heffalump> did you two coordinate on update-haskell-control and dh_haskell not duplicating stuff?
08:36:59 <CosmicRay> Igloo: patches accepted should you dare touch perl :-)
08:37:16 <CosmicRay> no, what's update-haskell-control?
08:37:23 <Igloo> update-haskell-control can't be much more minimal
08:37:33 <Igloo> dh_haskell can't do its job as it runs as part of the build process
08:37:46 <CosmicRay> dh_haskell doesn't touch control, but rather generates macros that can be used in control
08:37:52 <Igloo> CosmicRay: Generates debian/control from debian/control.in. See hat for an example
08:37:54 <Heffalump> my guess would be that dh_haskell should stop having ${haskell:Depends}
08:38:04 <Heffalump> unless it can find more stuff than update-haskell-control can
08:38:20 <CosmicRay> Heffalump: why?  that way, it doesn't have to modify control
08:38:39 <Igloo> ${haskell:Depends} will be useful when it does cabal package deps properly
08:38:54 <Heffalump> Because it can't handle build deps
08:39:00 <Heffalump> And having two different variables to worry about is really confusing.
08:39:10 <Heffalump> At least please agree on the format of variable names :-)
08:39:40 <Igloo> For the ghc6 and nhc98 deps it should either be doing nothing and letting update-haskelll-control handle them, or it should get the info from /usr/lib/haskell-utils/* (which I don't think it does at present)
08:39:40 <CosmicRay> Heffalump: this is true.  I'm not so sure it's wise to autogenerate build deps though
08:39:44 <Heffalump> or maybe have update-haskell-control insert ${haskell:Depends}
08:39:45 <CosmicRay> I've never done that with anything else
08:40:00 <Heffalump> it's pretty useful for the "libraries depend on exact GHC version" problem
08:40:42 <Heffalump> especially if we want Igloo to rebuild and upload library packages at the same time as updating ghc
08:41:11 <Igloo> CosmicRay: The build-deps aren't auto-updated. You run update-haskell-control before building to get the right build-deps based on the compilers you have installed
08:41:34 <shapr> olliej: too bad, I like reading about Haskell compiler optimizations. What are you doing?
08:42:55 <Heffalump> and the build process checks it's up to date when running, which is a useful sanity check
08:42:57 <Igloo> Shouldn't the gtk2hs cabal packages be depending on base?
08:43:18 <Heffalump> is base not an implied dep?
08:43:18 <olliej> shapr: at the moment no optimisations, and quite probably very few
08:43:26 <olliej> shapr: target is .NET :)
08:43:42 <Igloo> I thought missing the base dep was a common problem. Maybe that's haskell98 I'm thinking of
08:44:37 <Igloo> Oh bother, the tool has to cope with both installed packages and packages being built
08:44:54 <olliej> shapr: so once i produces working code need to actually get it producing marginally better code -- the current C# compilers for instance don't generate tail calls
08:45:08 <dcoutts> Igloo, the gtk cabal package in gtk2hs deps on the glib package which deps on haskell98
08:45:21 <dcoutts> which in turn deps on base
08:45:32 <olliej> shapr: but then they may not have much effect even when they exist (the CLR itself supports tail calls)
08:46:11 <Igloo> Ah, OK, so it probably ought to depend on base too, but works anyway
08:47:43 <dcoutts> Igloo, ? if it depends on something that depeonds on base then it's fine. I don't think it needs axtra "depends:" entries
08:48:18 <dcoutts> does it cause problems?
08:49:47 <Igloo> If you directly use things from foo and bar then you should depend on both of them, even if one depends on the other
08:49:57 <Igloo> It won't cause a problem, though
08:57:27 <shapr> olliej: Sounds interesting.
08:57:45 <olliej> shapr: function calls are one of the biggest difficulties
08:58:25 <shapr> Why's that?
09:00:49 <shapr> Hm, people really can get .aq web addresses.
09:02:12 <Igloo> If resident in .aq, AIUI
09:03:42 <shapr> For other purposes as well.
09:03:54 <shapr> http://www.cep.aq/
09:05:47 <Heffalump> well, that purpose makes sense..
09:09:00 <shapr> John Cowan roxx
09:10:52 <shapr> John Cowan's blog is much fun to read - http://recycledknowledge.blogspot.com/
09:17:31 <goron> I have no idea of how to tell ghc that it should look in /usr/local/include/GL for glut.h. I hope someone hear does. I checked the configure options, but there's no thing as "glut dir".
09:18:07 <Igloo> -I/usr/local/include/GL
09:18:43 <Igloo> Or do you mean when compiling GHC? If so, you can probably put that somewhere, but no idea where OTTOMH
09:18:44 <shapr> hoi goron, if you want to read about people who are far more varied than I, check out John Cowan http://recycledknowledge.blogspot.com/ and Jon Singer http://www.livejournal.com/users/jonsinger/ .
09:19:07 <goron> Igloo: Don't you mean -L?
09:19:23 <Igloo> I don't think so
09:19:53 <goron> Igloo: Uhm, I am compiling ghc. It should be an configure option.
09:20:02 <dcoutts> goron, -I for include search path -L for linker search path, so -I/usr/local/include/GL would make sense
09:20:20 <goron> dcoutts: Ok, will try that again.
09:20:23 <Igloo> Just because it should be doesn't necessarily mean it is  :-)
09:20:30 * Igloo doesn't know whehter it is or not
09:21:09 <goron> Well configure doesn't recognize it.
09:21:23 <goron> There should be some GHC_ARG like variable.
09:22:26 <shapr> hi stef
09:22:36 <shapr> stepcut: Hey, any word on RSS.hs?
09:23:19 <stef> hi, rebooted due to some reiserfs problem...
09:23:31 <stef> don't know about RSS.hs
09:23:49 * Igloo reads http://www.haskell.org/ghc/docs/latest/html/Cabal/index.html#packages - can package names really contain anything except a space?
09:25:12 <shapr> ¬
09:25:31 * shapr puts on the cool shades OO¬
09:27:54 <Lemmih> goron: Figure out where AC_CHECK_HEADER looks.
09:29:10 <goron> Lemmih: Autoconf macro's are still a mystery to me. I have no idea where I can find the definition for any autoconf maco.
09:29:33 <goron> Lemmih: But although I am getting sick of putting my time in this. I am willing to learn.
09:30:21 <shapr> There's infodocs for autoconf.
09:30:50 <shapr> C-h i C-s autoconf <enter>
09:31:14 <shapr> Ok, two enters
09:32:23 <goron> shapr: That only works in emacs?
09:33:35 <Lemmih> Try 'CPPFLAGS="-I/usr/local/include" ./configure'
09:34:13 <shapr> Yes, that's emacs, but you should be able to run "info Autoconf2.13" and see the docs.
09:34:24 <shapr> or info auto<tab> if you're using zsh
09:34:49 <Igloo> dcoutts: Any idea hwat's going on here?
09:34:49 <Igloo> $ runghc6 debian/get_deps.hs debian/libghc6-gtk2hs-dev/usr/lib/gtk2hs/gconf.cabal
09:34:52 <Igloo> *** Exception: Line 8: Unknown field 'exposed'
09:35:44 <tuomov> pinfo is a lot better than the normal info program (or emacs..)
09:35:53 <tuomov> not that info docs wouldn't still suck
09:36:55 <Igloo> (or anyone else...)
09:38:31 <Igloo> @seen SyntaxNinja
09:38:31 <shapr> hoi amiddelk
09:38:31 <lambdabot> I saw SyntaxNinja leaving #haskell 4 days, 16 hours, 34 minutes and
09:38:31 <lambdabot> 56 seconds ago.
09:38:41 <shapr> SyntaxNinja is on vacation in a land comparatively nearby.
09:38:48 <Igloo> Ah. Slacker  :-)
10:10:10 <shapr> jiihaa
10:10:15 <tic> was?
10:10:36 <shapr> I'm just being bouncy...
10:25:55 <goron> Lemmih: Same result: configure: WARNING: no GLUT header found, so this package will not be built
10:26:24 <Lemmih> Are you sure GL/gl.h is in /usr/local/include?
10:27:15 <goron> Lemmih: yes
10:28:19 <goron> Lemmih: make that a no...
10:28:56 <Lemmih> That could be a problem (:
10:29:17 <goron> Lemmih: If I give multiple -I to CPPFLAGS, will that work? Just like in ghc for the searchpath.
10:30:12 <Lemmih> AC_CHECK_HEADERS should scan CPPFLAGS for -I paths just like gcc.
10:30:51 <goron> Lemmih: I checked the info page, but it seems I don't have AC_CHECK_HEADERS.
10:31:03 <goron> Lemmih: I do have AC_CHECK_LIB
10:31:28 <Lemmih> @google AC_CHECK_HEADERS path
10:31:31 <lambdabot> http://lists.gnu.org/archive/html/autoconf/2002-05/msg00047.html
10:33:59 <goron> Lemmih: In what language are macro's written?
10:34:05 <goron> Lemmih: Ok, GLUT works now.
10:34:17 <goron> Lemmih: Now doing the same thing for OpenAl
10:34:22 <Lemmih> I have no idea.
10:35:22 <goron> Thanks for your help.
10:35:48 <Lemmih> No problem.
10:44:17 <goron> Lemmih: Interesting project is ADHD.
10:44:34 <shapr> Everyone keeps getting distracted from it though.
10:48:05 <Lemmih> shapr: haha (:
10:48:21 * shapr grins evilly
10:49:29 <Lemmih> I just I could finish half the projects I start...
10:49:31 <shapr> Yeah, me too
10:49:31 <Lemmih> *If just
10:50:08 <Lemmih> I bought two math books today, btw.
10:50:15 <shapr> Cool, which books?
10:50:30 <shapr> I got "Dead Reckoning : Calculating Without Instruments" by Ronald W. Doerfler
10:50:37 <shapr> It's great!
10:51:10 <Lemmih> "Introduction to Matrices and Vectors" and "Matrices and Linear Algebra".
10:56:10 <goron> Lemmih: I do CPPFLAGS="-I/usr/X11R6/include/  -I/usr/local/include/AL/" ./configure , (and I know openal is in that directory), but it doesn't find it.
10:57:59 <Lemmih> Include /usr/local/include. It checks for AL/*.h
11:00:03 <goron> Lemmih: So it checks recursive? So when I would include /    , it would work always :)
11:00:17 <goron> er recursively
11:03:53 <goron> Lemmih: same result.
11:04:20 <Lemmih> I think it just checks if there's a directory called AL/ in the search paths which contains some specific header files.
11:05:06 <Lemmih> You got /usr/local/include/AL/alc.h?
11:07:34 <goron> yes
11:07:41 <goron> al.h            alc.h           alctypes.h      alext.h         alexttypes.h    altypes.h       alut.h          aluttypes.h
11:08:18 <xerox> Math books, nice.  I'm reading "Interactive Real Analysis".
11:13:54 <goron> Lemmih: Doesn't work either.
11:14:54 <Lemmih> goron: Is it complaining about missing headers or missing libs?
11:15:33 <goron> Lemmih: I didn't see a line saying: checking for OpenAL: foo/bar.h
11:15:43 <goron> Lemmih: But maybe I didn't look good enough.
11:16:00 <goron> Ofcourse it says: configure: WARNING: no OpenAL library found, so this package will not be built
11:16:14 <goron> Otherwise I wouldn't know anything would be wrong.
11:16:41 <goron> checking for library containing alGenSources... no
11:16:53 <goron> Maybe this one?
11:16:58 <Lemmih> And the openal lib is in /usr/local/lib?
11:17:54 <goron> ls libo*
11:17:54 <goron> libogg.a                libogg.so               libopenal.a             libopenal.so.0          liborbit-c-backend.a
11:18:10 <goron> libogg.la               libogg.so.5             libopenal.so            libopenal.so.0.0.8
11:18:10 <goron> yep
11:18:28 <Lemmih> Then add -L/usr/local/lib to CPPFLAGS.
11:19:01 <goron> What's the equivalent of the SOMEVAR="something" somecommand in sh?
11:19:25 <goron> ok
11:19:34 <Lemmih> export SOMEVAR="something", i think.
11:20:14 <goron> Lemmih: no export is bash
11:20:44 <goron> Lemmih: or not.
11:22:03 <goron> Lemmih: It's the same.
11:22:03 <goron> a="d" top (this works in sh)
11:22:26 <goron> But I don't know whether it registers the variable, but I think it will.
11:23:11 <Lemmih> Try: A="B" env
11:23:54 <goron> works
11:24:02 <goron> But OpenAl issue still isn't solved.
11:25:20 <goron> Someone should write a partial evaluator for configure
11:26:52 <brianm> YEA! Tweaked readline enough to get GHC installed from darwinports. I need a beer.
11:29:25 <goron> brianm: Congratulations
11:29:39 <Lemmih> goron: You can ask the mailing list.
11:30:23 <goron> Lemmih: Which one? libraries?
11:32:02 * mwc pokes through http://haskell.org/libraries/ looking for a good matrix/vector library
11:34:28 <shapr> heya mwc
11:34:35 <mwc> shapr, long time, no C :P
11:34:36 <shapr> aiee
11:36:38 <mwc> shapr, Sigh, this n-dimenisonal tensor lib looks good, but it doesn't do complex numbers :(
11:37:04 * mwc ponders learning template haskell to implement a library just to do a couple of bonus assignments.
12:18:23 <xerox> Do you know how to find a paper/document by its "XXX##" representation?  Searching for it on citeseer finds the documents where it's cited, not the document itself.
12:19:31 <CosmicRay> mwc: hmm, it would be interesting to have a haskell library that can track uncertainty in numbers through calculations
12:20:09 <mwc> CosmicRay, heh, I don't really care about that, but it's fairly easy to do actually
12:20:53 <CosmicRay> mwc: right, some data type with a numeric part and an uncertainty part should be easily enough implementable
12:21:17 <CosmicRay> my hp48 calculator has a nice vector library, does that do? :-)
12:21:17 <mwc> The cannonical form for x = f(u,v...) is sigma_x&2 = df/du^2 sigma_u^2 + df/dv^2 sigma_v^2 + ...
12:22:10 <mwc> CosmicRay, sure, so error analysis isn't that hard, you just carry define a pair of a numerical type for mean and standard deviatino
12:22:47 <CosmicRay> hmm I notice you are in #physics.  what got me onto this idea was the undergrad physics class I'm presently taking, to finish out my CS degree :-)
12:23:08 <CosmicRay> actually I am talking about calculations based on figures whose uncertainty is already known
12:23:12 <mwc> Ah, is that first year physics?
12:23:15 <CosmicRay> yeah
12:23:50 <mwc> CosmicRay, yeah, the system where you do (x + dx)(y + dy) and add percent-uncertainties is actually a filthy lie :P It overestimates the actual error
12:23:51 <CosmicRay> it's been sorta fun.  I wrote a couple of functions in hugs to anaylze data sets that most people worked with in Excel (heh)
12:24:20 <mwc> Hah, did they pass? Excel was absolutely brutal for lab analysis
12:24:35 <CosmicRay> mwc: yes, we have seen so far its limitations already, but haven't gotten far enough to see why anybody uses it :-)
12:24:46 <CosmicRay> mwc: that's what the lab instructor suggested using
12:24:56 <mwc> CosmicRay, sigh, poor bastards
12:24:59 <CosmicRay> yeah
12:25:03 <goron> Is there anybody else that knows how I can convince ghc to find the OpenAL library?
12:25:04 <mwc> But Excel did get me a girlfriend :P
12:25:06 <CosmicRay> hugs is great for this stuff :-)
12:25:11 <CosmicRay> mwc: heh, how did that happen? :-)
12:25:35 <mwc> CosmicRay, I spent a lot of time with my lab partner trying to fix her analysis after excel screwed the pooch
12:25:44 <goron> CPPFLAGS="-I/usr/X11R6/include/  -I/usr/local/include/ -L/usr/local/lib/       " ./configure
12:25:49 <mwc> Excel doesn't do a proper least-squares fit apparently
12:25:52 <goron> Currently this is the ocmmand I am using.
12:25:54 <CosmicRay> mwc: I found one problem where we calculated g to be 7.5 m/s^2 or something and the rules for uncertainty said that we had onle +- 1% uncertainty :-)
12:26:13 <CosmicRay> s/onle/only/
12:26:33 <mwc> CosmicRay, yeah, but you just write that off to it being freshmen doing the experiments :P
12:26:37 <CosmicRay> hehe
12:26:53 <CosmicRay> mwc: lab instructor said something about "systemic error".  probably means the same thing :-)
12:27:19 <mwc> CosmicRay, that's the eupahism we use here too :P
12:27:22 <CosmicRay> mwc: hehe
12:27:26 <mwc> *euphamism
12:27:52 <CosmicRay> mwc: oh, and get this, in the lab syllabus it says part of the goal is to learn how to use both "modern and older physics lab equipment" :-)
12:28:51 <CosmicRay> mwc: I am also probably the only person that typeset my lab calculations with LaTeX :-)
12:28:54 <mwc> yeah, old equipment is important
12:28:57 <mwc> CosmicRay, yeah, did that too
12:29:09 <mwc> only way to go
12:29:22 <CosmicRay> mwc: I am quite fond of LyX
12:29:25 <mwc> Word makes me nauseous... you might actually have a future in science ;P
12:29:32 <CosmicRay> mwc: it has a very nice pseudo-wysiwyg math mode
12:29:36 <mwc> CosmicRay, ah, see, there's where we differ... I just use good old vim
12:29:47 <mwc> I'll look into it
12:29:52 <CosmicRay> mwc: hmm, emacs here.  I can see we are more different than we thought :-)
12:29:59 <mwc> Oh, hell, HERETIC!
12:30:03 <CosmicRay> heh
12:30:17 <CosmicRay> yeah, blame it on the lisp class I had 7 years ago
12:30:37 <mwc> Anyways, I see what you mean. You could probably create a Numeric type that tracks error pretty easily
12:30:43 <CosmicRay> exactly
12:30:54 <mwc> you'd just have to define the error caculuations for the primitive operations and it will cascade from there
12:31:05 <mwc> What I want is a tensor library, with the tensors being a HOT
12:31:10 <CosmicRay> that's exactly what I'm thinking of
12:31:17 <mwc> Tensor Complex
12:31:25 <mwc> But of course I'm too lazy to do it
12:31:35 <CosmicRay> I wonder if I can use the output of a Haskell debugger as a way to show my work? :-)
12:31:50 <mwc> just hand in your source
12:31:54 <CosmicRay> heh
12:32:06 <CosmicRay> poor gta
12:32:15 <mwc> gta?
12:32:21 <CosmicRay> graduate teaching assistant
12:32:24 <mwc> ah
12:32:29 <CosmicRay> (the person that has to grade our assignments, in this case)
12:32:32 <mwc> We just call them TAs here
12:34:07 <CosmicRay> It's funny, this university has about 40% non-traditional students.  in my class there is everyone from advanced high school students to people in their thirties
12:34:19 <CosmicRay> upper-division classes are even more diverse
12:34:42 <mwc> Oh? Do you take night classes? I had a night time calculus class first year, there were a lot of old folks in it
12:34:47 <CosmicRay> yeah
12:35:07 <CosmicRay> in fact most of the CS classes here are night classes
12:35:14 <mwc> CosmicRay, oh? Where are you?
12:35:21 <CosmicRay> it seems that there is a higher than usual concentration of non-traditional students in CS
12:35:26 <CosmicRay> mwc: Wichita State Univ. (Kansas)
12:35:38 <mwc> That's kind of weird to hear. Unfortuneatly for me, applied math courses are all mornings
12:35:46 <CosmicRay> that sucks
12:35:57 <mwc> I was joking around with some of the profs that I'd picked the wrong major
12:36:13 <mwc> Should have gone into astronomy, where they stey up late and sleep all day
12:36:17 <CosmicRay> heh
12:36:32 <CosmicRay> maybe that's the real reason CS classes are in the evenings :-)
12:36:50 <CosmicRay> one of the most popular things the student ACM organization ever did was get a larger amount of mt. dew stocked in the CS dept. vending machines
12:37:00 <mwc> they just want you to get used to working on Calcutta time :P
12:37:04 <CosmicRay> hehe
12:37:34 <mwc> I kicked caffiene and couldn't be happier
12:37:46 <mwc> I was self medicating to an insane degree, my blood pressure was 160/100
12:37:51 <CosmicRay> I'm down to about one can of diet pepsi a day
12:37:54 * esap also doesn't nowadays much drink caffeine.
12:38:12 <CosmicRay> I never went insane with it like some did though
12:38:48 <mwc> It's an ADHD thing; Caffiene calms you down and improves your convergent thinking
12:39:02 <mwc> but also turns me into a zombie. Hell, a can of coke helps me fall asleep at night :P
12:39:07 <CosmicRay> heh
12:39:34 <mwc> so now I sleep at odd hours, but I'm at least 4 times more productive; and 5 times more hyperactive
12:39:43 <CosmicRay> I wish this: http://www.cs.queensu.ca/drl/ffes/ had a latex output mode
12:40:04 <mwc> The new Maple has something like that
12:40:09 <mwc> it does latex output too
12:40:20 <mwc> but the latex math syntax is pretty easy to learn
12:40:32 <CosmicRay> yeah I have no problem with the syntax, it's the entry speed
12:40:48 <mwc> This might be fast if you had a graphics tablet
12:40:57 <mwc> but I just don't see drawing with your mouse being any help
12:41:06 <CosmicRay> I just got my hands on a tablet pc and have linux on the hting
12:41:12 <CosmicRay> makes a great note-taking device
12:41:34 <mwc> Ah, I find it easier just not to take notes :P
12:41:43 <esap> yea, trying to look up what was the cmd for some rarely-used math symbol can be frustrating
12:41:59 <mwc> esap, print out one of the many reference cards
12:42:05 <CosmicRay> also it is possible to play mahjongg during those times when the instructor is explaining something that is intuitively obvious to me :-)
12:42:26 <CosmicRay> esap: lyx has a nice pop-up panel.  hover for the command, or click to insert.
12:42:35 <mwc> CosmicRay, I have morning classes, so I drift in half asleep, pay attention for about 3 seconds, check out the girls, and then fall asleep :P:
12:42:40 <CosmicRay> heh
12:43:10 <CosmicRay> <-- married :-)
12:43:21 <mwc> I used to put a pillow in my back pack for easier sleeping
12:43:25 <CosmicRay> heh
12:43:45 <mwc> I broke my leg and missed a bunch of stuff that I'm making up in the summer
12:43:48 <CosmicRay> morning class was a major reason I only got a B when I took calc I, and have pretty much forgotten the entire content of the class by now
12:44:01 <mwc> It's amazing how simple this is compared to doing it then
12:44:23 <mwc> I blazed through an entire chapter in 30 minutes that I didn't understand the entire week of lectures for
12:44:28 <CosmicRay> I have to take calc II at some point, so I'm thinking I'll audit calc I first
12:44:31 <CosmicRay> heh
12:44:38 <mwc> CosmicRay, sunglasses are your friends, btw
12:44:42 <CosmicRay> heh
12:45:03 <mwc> CosmicRay, Ah, yes, thank god Calc IV was taught in the afternoon by a guy who went to MIT at 16
12:45:03 <CosmicRay> homer simpson had some nice glasses with open eyes painted on them :-)
12:45:07 <CosmicRay> heh
12:45:17 <mwc> what an awesome prof, he just blazed trhough the material and didn't waste time
12:45:41 <shapr> I wish I could find teachers like that.
12:45:44 <mwc> he had some great questions. Somebody asked him to go over and explain a proof again
12:46:01 <mwc> so he did it again, then said "It's not rocket science. Rocket science isn't rocket science. Particle physics is rocket science."
12:46:05 <CosmicRay> The very best prof I had was the 60+-year-old retired former head of the CS dept.
12:46:10 <CosmicRay> heh
12:46:14 <shapr> My saxophone teacher is like that, but she's fifteen.
12:46:41 <mwc> shapr, oh damn, I can't think of any end to that situation for me that wouldn't end with her father chasing me down with a shotgun
12:46:46 <shapr> yow
12:46:59 <shapr> Anyway, back to functional programming...
12:47:11 <CosmicRay> I've also had some not-so-good ones.  Such as the the guy from some french-speaking african country who hadn't quite gotten the hang of english yet
12:47:42 <mwc> CosmicRay, my first year linear algebra prof was like that, She spoke english very well, better grammer than most natives
12:47:43 <CosmicRay> he also hadn't caught on to the fact that people were asking lots of questions in class to get out of doing work
12:47:48 <mwc> but she had the thickest accent ever
12:47:59 <CosmicRay> mwc: this guy had accent+bad grammar
12:48:07 <shapr> One of my best teachers had a thick India accent, but was studying parallel processing.
12:48:11 <mwc> "Yu weel fin zanzer een yur tek-buk
12:48:14 <shapr> He taught CS101.
12:48:16 <CosmicRay> heh
12:48:37 <mwc> Took me about a week to get the hang of her speech
12:48:48 <CosmicRay> I can usually make out India accents, and most European accents without too much diffulty.
12:48:59 <mwc> I've had a lot of complaints that I speak too fast
12:49:06 <CosmicRay> I have a lot of trouble with Chinese accents, as well as people from certain regions of Britain :-)
12:49:23 <shapr> Most people tell me I speak too fast also.
12:49:36 <mwc> shapr, yeah, apparently it's an ADD thing
12:49:45 <shapr> You do both of those?
12:49:49 <CosmicRay> shapr speaks way faster than I do, but I have no problem understanding him
12:49:50 <mwc> when I really get going I stutter too because my mouth can't keep up
12:49:56 <mwc> Oh, you two know eachother?
12:49:57 <mwc> Wow
12:50:05 <mwc> Unicycling conference? ;P
12:50:05 <shapr> My mouth usually keeps up, but none of my listeners do.
12:50:06 <CosmicRay> shapr left me a voice mail once :-)
12:50:24 <mwc> shapr, yeah, I make a lot of crazy hand gestures
12:50:29 <shapr> My new unicycle, 'Secret Joy' will be ready on Monday!
12:50:31 <shapr> Oh me too
12:50:46 <shapr> I animate the objects I describe with my hand motions.
12:50:59 <mwc> Yeah, I do that, but I also spin them and move them around :P
12:51:03 <CosmicRay> mwc: oh, and my current physics instructor is american but has the (funny) habbit of saying "tada!" at inappropriate times
12:51:25 <CosmicRay> "So, now x -- TADA! -- is unknown."
12:51:31 <mwc> Heh, my first year physics prof was lecturing on torque, and somebody asked him why he knew an example was clockwise
12:51:46 <mwc> so he says "Well... that's a clock." and points to the wall clock
12:51:57 <shapr> I don't get it.
12:52:14 <CosmicRay> shapr: were you saying that to me or mwc?
12:52:17 <shapr> mwc
12:52:27 <mwc> shapr, counterclockwise rotation is positive by convention
12:52:36 <shapr> postive?
12:52:42 <mwc> and it was one of those things where it was just clockwise because the problem was defined as being positive
12:52:47 <shapr> Rotating what?
12:52:58 <shapr> Oh, torque, finally I get it.
12:52:58 <shapr> doh
12:52:59 <mwc> shapr, yeah, like an angular velocity of 20 radians/sec vs - 20 radians/sec
12:53:04 <xerox> In fact thinking in goniometric terms, clockwise is negative.
12:53:13 <shapr> That's what you get for trying to write about arrows while discussing physics.
12:53:16 <mwc> xerox, depends on the coordinate system
12:53:16 <xerox> As they taught us.
12:53:26 <CosmicRay> shapr: mmmm.  arrow physics.
12:53:37 <shapr> Don't get me started, I have to finish this article first!
12:53:41 <CosmicRay> hehe
12:53:44 <mwc> left handed systems have a positive clockwise rotation, right handed systems are positive CCW
12:53:47 <shapr> Plus some of my feedback may change the article dramatically.
12:53:55 <mwc> shapr, good article so far?
12:54:04 <shapr> You tell me - http://www.haskell.org/tmrwiki/ArrowsIntroduction
12:54:25 <mwc> Oh goody, I'm finally gonna get arrows beaten into my head with the cluestick!
12:54:25 <shapr> musasabi: ping?
12:54:36 <CosmicRay> shapr: incidentally, did I ever post the link to my FSM haskell article?
12:54:53 <shapr> Yeah, it's cool. Would you be interested in republishing for TMR?
12:55:03 <CosmicRay> shapr: in approximately august, it falls under a creative commons...
12:55:07 <shapr> Fair enough.
12:55:09 <CosmicRay> yes, I was just going to suggest that :-)
12:56:05 <shapr> Man, I got a lot of good feedback for this article, so much that I'm not sure how to continue.
12:56:12 <CosmicRay> mwc: I have found photogates to be very cool all-purpose cheap lab equipment for physics :-)
12:56:17 * shapr goes unicycling to think about it.
12:56:28 <CosmicRay> shapr: uh-oh
12:56:34 <shapr> what?
12:56:36 <CosmicRay> shapr: last time you said that, you weren't seen back here for 2 weeks :-)
12:56:53 <shapr> Well, I was hoping that time away from #haskell would mean I'd spend less time chatting and more time coding.
12:56:55 <shapr> Actually, it works.
12:57:03 <CosmicRay> yeah, I know, sadly
12:57:14 <shapr> But after two weeks, I need feedback from the community.
12:57:14 <mwc> I find weight lifting to be a good thinking exercise
12:57:18 <CosmicRay> I don't have any exciting haskell project to work on right now
12:57:24 <mwc> I used to like running but haven't been able to do that for a while
12:57:25 <shapr> Work on Fermat's Last Margin with me!
12:57:25 <CosmicRay> I need something cool and useful
12:57:31 <CosmicRay> heh
12:57:36 <CosmicRay> something I would use every day :-)
12:57:36 <shapr> But first, I must finish this article.
12:57:41 <shapr> Actually, you might
12:57:51 <shapr> musasabi pointed out that it's not limited to research papers.
12:58:00 <shapr> Any browser-displayable media could annotated.
12:58:03 <CosmicRay> actually I have very little spare time until the end of summer semester
12:58:14 <CosmicRay> 5-hr class + lab in summer, while working full time, not a good idea.
12:58:22 <shapr> musasabi had a very cool medical user story.
12:58:29 <CosmicRay> two days a week I work 7-4, have class 5-6:30, then lab 7P-9P.
12:58:33 * esap suggests that anybody that has extra free time work on the P=NP problem :-)
12:58:44 <shapr> esap: hei! Any progress on a TMR article?
12:58:51 <shapr> I still don't have five for the next issue.
12:58:52 <esap> shapr: No, sorry.
12:58:57 <shapr> aw, too bad
12:59:37 <CosmicRay> ahh now that I've used google, I see what you mean by Fermat's Last MArgin
12:59:45 <esap> shapr: I should try to write something next weekend, if I get any time from all the grilling.
12:59:49 <CosmicRay> shapr: have you seen Jarnal?
12:59:51 <shapr> yes please!
12:59:53 <shapr> Nah, what's that?
13:00:04 <CosmicRay> shapr: can annotate PDF files, as well as being a general pen-based work pad
13:00:10 <shapr> Oh, I see
13:00:12 <CosmicRay> shapr: text or pen input
13:00:17 <CosmicRay> shapr: very slick, but it's in java
13:00:22 <shapr> I don't like Java.
13:00:25 <lightstep> i wonder when tmr would be debianized (like the linux gazette)
13:00:27 <shapr> I try not to use it.
13:00:33 <CosmicRay> shapr: ditto, but jarnal kicks ass
13:00:38 <CosmicRay> shapr: draw right on the pdf
13:00:45 <CosmicRay> and it saves your work as SVG files
13:00:47 <shapr> That is cool.
13:00:56 <shapr> I'd like to expand in that direction.
13:01:17 <shapr> But my goal is more about timely sharing of feedback for research papers, at least in the beginning.
13:01:24 <CosmicRay> hmm
13:01:26 <shapr> lightstep: never if I don't get off my but and write it.
13:01:37 <CosmicRay> something seems broken on your wiki page about it
13:01:41 <CosmicRay> I see a rendering of a PDF but nothing else
13:01:46 <shapr> Yeah, because that's a mockup
13:02:02 <shapr> I made that first so I knew what I wanted to do.
13:02:09 <CosmicRay> oh.  what are you planning to do?
13:02:23 <shapr> What is it? A distributed decentralized wiki-based darcs-backed research paper annotation tool called Fermat's Last Margin.
13:02:30 <shapr> How does it work? In short, wget the pdf/ps, throw it into imagemagick, create wiki pages for the resulting page images, and save text annotations into the darcs repo. If your repo is http accessible, anyone can grab your per-page annotations, and you can grab theirs.
13:02:39 <CosmicRay> slick
13:02:44 <shapr> You know ./syncall you wrote for haskell-v8?
13:02:47 <shapr> That's what I want to do.
13:02:50 <CosmicRay> right
13:03:01 <CosmicRay> shapr: you have a gift for explaining things to hackers :-)
13:03:09 <shapr> heh, thanks :-)
13:03:24 <shapr> Which part was a good explanation?
13:03:31 <CosmicRay> the whole bit really
13:03:44 <shapr> ok
13:04:00 <CosmicRay> I read brochures for servers and stuff, and I'm thinking "wtf do I care about 'middleware'?" until I get to the back page with the specs
13:04:02 <esap> shapr: hmm.. the article about arrows intro, I think the problem with "ArrPipe" stuff can be solved with GADTs.
13:04:12 <lightstep> yes, me too
13:04:18 <shapr> esap: stepcut tried that, and said it doesn't work.
13:04:33 * lightstep was just about to say it (with qualification instead of GADTs)
13:04:40 <shapr> Reason is that you can't add typeclass constraints to a typeclass from an ADT instance.
13:05:08 <lightstep> data (Read i, Show o) => Process i o = Process ((TypedFd i) -> (TypedFd o) -> IO ())
13:05:12 <shapr> You need to add new constraint of "class (Read a, Show a) => Arrow a where"
13:05:15 <lightstep> or whatever the syntax is
13:05:27 <esap> shapr: why wouldn't it work? data Process i o where Process :: (Read i, Show o) => (TypedFd i -> TypedFd o -> IO ())
13:05:50 <shapr> Because that constraint is on the datatype, not the typeclass.
13:05:54 <esap> shapr: no actually data Process i o where Process :: (Read i, Show o) => (TypedFd i -> TypedFd o -> IO ()) -> Process i o
13:06:03 <shapr> Hey, maybe you're right, if so, I want to see it.
13:06:09 <shapr> Quick, try it!
13:06:55 <shapr> Thing is, if you are right, then we don't need NewBinary, because we can add Binary typeclass constraints to ADTs, right?
13:07:01 <shapr> Er, maybe not..
13:07:09 <shapr> I think I'm conflating two different issues.
13:07:19 <shapr> Anyway, I'm off to unicycle, I'll be back in an hour, tell me what you find out :-)
13:07:40 <xerox> ...like constraining something like the m of Monad m.
13:09:19 <lightstep> i have a problem with monad transformers. if you use (StateT S1 (StateT S2 Identity) x), the S1 state hides the S2 state. also, monad transformers are almost commutative. isn't there a more general framework, "transformer sets" or the like?
13:11:16 <lightstep> then you'd say "i want (in addition to Identity) to use also Unique, Writer [Int], and IO"
13:16:03 <Heffalump> monad transformers aren't commutative in general
13:16:10 <Heffalump> e.g. StateT and ListT don't commute
13:16:30 <lightstep> oh, ok
13:16:43 <lightstep> i have to leave now, to go fix my brother's windows box
13:51:48 <lightstep> Heffalump, the page at http://haskell.org/hawiki/ListTDoneRight claims that ListT isn't a monad transformer. the type they offer is too complex for me to understand. anyway, i can see exactly one intuitive way to combine state with nondeterminism
13:52:11 <Heffalump> well, there are two intuitive ways :-)
13:52:17 <Heffalump> One way, you fork the state when you fork the results
13:52:23 <Heffalump> The other way, you thread the state through all the results
13:53:42 <lightstep> ContT chose the second way, so it's presumably the correct one?
13:54:02 <Heffalump> ContT?
13:54:07 <Heffalump> I don't think there is one correct way.
13:54:29 <Heffalump> I don't know why that page claims that ListT from the Prelude isn't a monad transformer, so I can't evaluate the claim.
13:54:44 <Heffalump> intuitively, I think it should be.
13:54:53 <Heffalump> But I've never actually tried to prove that a monad transformer is valid.
13:59:21 <lightstep> i came up with this since i only get to use state, reader, writer and cont. these transformers combine well, so the order-dependence seems like a hack. but probably monad transformers have a deeper categorical meaning, so all it well
13:59:29 <lightstep> s/ it / is /
14:00:54 <hyperion> @hi
14:08:37 <jlouis> are there any online category theory books?
14:08:48 <jlouis> I guess I need to learn about that bastard for real soon
14:17:54 <jlouis> nevermind, found 2 books just by looking around
14:19:31 <Heffalump> lightstep: it's nothing to do with deeper categorical meaning
14:19:49 <Heffalump> They just have different effects in different orders. As I described or state+list, for example.
14:20:12 <Heffalump> state, reader and writer will clearly compose, because they are all essentially equivalent and don't do anything particularly complicated
14:20:26 <Heffalump> I'd have to think about cont carefully to convince myself that it did
14:20:28 <Heffalump> s/compose/commute/
14:20:53 <stef> I am trying to compile hs-plugins
14:21:00 <stef> I get an error
14:21:08 <stef> make[2]: *** [inplace-pkg-conf] Error 1
14:21:09 <stef> make[2]: Leaving directory `/mnt/hdb7/home/stef/hs-plugins-0.9.8/src/altdata'
14:21:09 <stef> make[1]: *** [altdata] Error 2
14:21:09 <stef> make[1]: Leaving directory `/mnt/hdb7/home/stef/hs-plugins-0.9.8/src'
14:21:09 <stef> make: *** [build] Error 2
14:21:23 <stef> oops bad past
14:21:36 <stef> (cd /home/stef/hs-plugins-0.9.8 ;\
14:21:36 <stef>  if [ ! -f plugins.conf.inplace ]; then echo [] > plugins.conf.inplace; fi;\
14:21:36 <stef>  env PREFIX=`pwd` ghc-pkg -g -f plugins.conf.inplace -u < \
14:21:36 <stef> 	src/altdata/altdata.conf.inplace.in)
14:21:36 <stef> Reading package info from stdin... ghc-pkg: Line 1: Invalid syntax (no colon after field name)
14:22:51 <stef> note that the content of plugins.conf.inplace is generated to be "[]\n" but that ghc-pgk complains of that very input
15:15:15 <shapr> stef: Are you using ghc6.4?
15:15:31 <dbremner> shapr - hello
15:15:39 <shapr> hiya dbremner, what's up?
15:16:37 <dbremner> shapr - not much, I've been looking for work and writing a spec for a safe subset of C.
15:16:49 <shapr> What about C-- ?
15:17:59 <dbremner> shapr - I've skimmed the spec and like what I see, but I want something smaller. Ideally, the spec should be <30 pages.
15:19:26 <stef> shapr: yes
15:20:03 <shapr> In that case, you should get the latest hs-plugins from the darcs repo and use Cabal to install it.
15:20:22 <stef> Cabal?
15:20:30 <shapr> http://www.haskell.org/cabal/
15:20:38 <shapr> It's like distutils for Python, but for Haskell.
15:21:05 <stef> thx
15:25:15 <dbremner> shapr - I'd also like to be able to use existing compilers.
15:25:22 <blackdog> dbremner: what features do you need?
15:25:32 <shapr> dbremner: Ah, I see.
15:25:48 <blackdog> oh, so you need backward compat..
15:26:36 <dbremner> blackdog - the question is more about how many features I can remove and still have a reasonable language.
15:28:43 <dbremner> shapr - I've been going through the C99 standard and making a list of features I think are unnecessary.
15:31:10 <Philippa> did you start with "the entire language"?
15:31:42 * Heffalump thinks the promotion rules would be a good start
15:31:56 <Heffalump> what do you want this reduced language for?
15:32:04 <dbremner> Heffalump - one of my ideas is, no implicit conversions.
15:32:35 <Heffalump> however, getting rid of the promotion rules stops you using existing compilers.
15:33:06 <Philippa> not entirely - just forces you to typecheck first, unless I've misunderstood?
15:33:16 <Philippa> (but you'll need to spend a lot of time telling it no, you don't want the promotion)
15:33:49 <jlouis> Enough Category theory for today...
15:33:55 <jlouis> It seems like fun
15:34:08 <Heffalump> Philippa: how do you add a short and a short and get another short?
15:34:18 <jlouis> I sadly know nothing about Cat theory
15:34:45 <Philippa> Heffalump: modulo the appropriate amount
15:35:58 <Heffalump> so you'll be relying on the final compiler to get good code?
15:37:46 <dbremner> Heffalump - to some extent I'll have to trust it.
15:38:11 <dbremner> Heffalump - if life is on the line, I can inspect the compiler output.
15:39:09 <jlouis> the worst part of C is the lack of ability to express simple things. If one for instance had a ``lift'' for returning values teh world had been much better with respect to the standard library
15:39:28 <jlouis> Return of multiple values is another irritating problem
15:39:29 <Heffalump> lift?
15:40:02 <jlouis> Lift in a bottom value, eg: Lift Integer to Maybe Integer
15:40:28 <dbremner> Heffalump - I want a smaller, simpler language. I could certainly design my own, but it makes sense to use existing C compilers if possible.
15:40:30 <Heffalump> why not just have exceptions?
15:40:39 <Heffalump> dbremner: but what for?
15:40:54 <Heffalump> if you want to write programs directly, why not just use C but restrict yourself to features you really need
15:40:58 <jlouis> Heffalump: that is another possibility
15:44:23 <dbremner> Heffalump - I want to determine how many features I can remove and still have a reasonable language.
15:44:50 <Philippa> variables, application, abstraction. HTH HAND
15:44:54 <Heffalump> yes, but reasonable for *WHAT*?
15:45:06 <Heffalump> as Philippa says, the lambda calculus is reasonable for some people.
15:45:11 <yain> think brainfuck.
15:45:21 <Philippa> yain: brainfuck isn't reasonable for anything :-)
15:45:37 <Philippa> it's more complicated than \calc, has less capacity for abstraction, etc etc etc
15:45:46 <yain> it is reasonable for some things whose nature is implied by language name
15:46:05 <Philippa> nah. Type classes as a programming language're far better at that
15:46:28 <dbremner> Heffalump - writing system software.
15:48:38 <Philippa> explicitly-regioned-ML-on-crack might be a good approach
15:48:48 <Philippa> (or it might not)
15:49:33 <Heffalump> has anyone got any experience of how ML and C compare performance-wise?
15:49:54 <Philippa> for what value of ML?
15:49:58 <Heffalump> (yes, I know comparing languages for performance is a horribly open-ended question)
15:50:01 <Heffalump> any
15:50:15 <Philippa> ocaml's often within a factor of 2 and occasionally outperforms
15:50:40 <Philippa> there're SML implementations getting on for that ballpark, though they tend not to have as impressive a codegen - ocaml's x86 codegen's been tweaked to hell
15:50:53 <Heffalump> are you thinking of MLton?
15:51:05 <Philippa> yeah
15:51:18 <Philippa> and beware that I've not done anything too hefty
15:51:38 <Heffalump> MLton has the disadvantage of taking ages to actually compile stuff
15:51:43 <Philippa> a lot of the smartarse stuff with ocaml's been in avoiding overhead from the GC
15:52:15 <Heffalump> I'm convinced that an ML is a better language for writing a commercial compiler than C, but one major issue with commercial compilers is the time they take to run.
15:59:54 <jlouis> Philippa: MLton is awesome. But I have a feel it is more the optimization passes than the codegen
16:00:02 <Heffalump> <aol>
16:00:04 <Philippa> jlouis: very much so
16:00:08 <Philippa> whereas ocaml's exactly the other way round
16:00:38 <jlouis> The big difference between MLton and most others is the _early_ closure conversion
16:00:55 <Heffalump> to what, C?
16:01:02 <jlouis> To other FP compilers
16:01:11 <jlouis> most keep a CPS and optimize on that
16:01:17 <Heffalump> no, I mean conversion to what
16:01:23 <jlouis> SSA
16:01:43 <Philippa> the slow bits in an ML-without-continuations are GC, HOFs and boxing for polymorphic functions. An explicitly-regioned ML with effective optimisation passes would be pretty fast unless I'm much mistaken
16:01:45 <jlouis> (in fact an SSA-form based on GOTO+arguments rather than phi)
16:02:24 <jlouis> Philippa: strike out boxing for polymorphism in MLton ;). Also strike out HOFs
16:02:32 <Philippa> jlouis: exactly :-)
16:02:43 <Heffalump> does MLton inline all polymorphism and HOFs, then?
16:02:55 <jlouis> yes, more or less
16:03:12 <jlouis> it type expands on poly. and rewrite HOFs, yes
16:04:08 <jlouis> It still lacks partial redundancy elimination though
16:05:45 <jlouis> also, since all types are known at compile-time, one can instruct the GC directly about the whereabouts of pointers --> no tagging
16:15:24 <Heffalump> doesn't it just use a Boehm collector?
17:57:47 <dons> @yow
17:57:49 <lambdabot> Content:  80% POLYESTER, 20% DACRON ... The waitress's UNIFORM
17:57:49 <lambdabot> sheds
17:57:49 <lambdabot> TARTAR SAUCE like an 8" by 10" GLOSSY ...
17:59:04 <foxy_> @index &
17:59:06 <lambdabot> Data.Graph.Inductive.Graph, Data.Graph.Inductive
18:17:36 <hyperion> @kill sh10151
18:17:42 <lambdabot> bzzt
18:20:16 <dons> sh101551, you're bouncing
18:21:21 <dcoutts> dons, so do you have an unofficial gtk2hs-0.9.8 OpenBSD package/port than I can add to the release announcement? :-)
18:22:54 <dons> oh.. too busy! let me whip one up ...
18:23:34 <dcoutts> I'll probably send the release announcement out on Friday so you've got a bit of time :-)
18:23:55 <dons> wow, dcoutts, you should manage ghc! you're porter-taming skills are good ;)
18:24:09 <dcoutts> I want to give you packaging folk a chance
18:24:18 <dcoutts> porter?
18:25:21 <dons> maybe that's bsd-speak. porter=package creator
18:25:33 <dcoutts> oh, right
18:25:43 <dons> "one who ports"
18:26:20 <dcoutts> we ruminate over ebuilds instead
18:26:28 <dons> hehe
18:27:02 <dcoutts> I've never quite understod the gentoo obsession with cows or the letter 'e'
18:27:51 <dons> back in the 90s 'e' was the 'it' vowel. then apple made it 'i'
18:28:18 <dons> I'm hoping 'y' will be fashionable one day..
18:28:28 <dcoutts> yi!
18:28:30 <Igloo> There was m briefly
18:30:26 <dons> dcoutts, do you have a url for the src I should be packaging? /me keeps losing it..
18:30:42 <dcoutts> it's on the SourceForge mirrors
18:30:56 <dcoutts> I'm not sure how you deal with those
18:31:28 <dons> there's a special variable to use, I think.
18:31:54 <dons> MASTER_SITES=   ${MASTER_SITE_SOURCEFORGE}
18:31:56 <dcoutts> we've got something similar in gentoo, a magic uri scheme for SF mirrors
18:32:46 <dcoutts> anyway the ordinary link is: http://prdownloads.sourceforge.net/gtk2hs/gtk2hs-0.9.8.tar.gz?download
18:33:02 <dons> cheers
18:33:29 <dcoutts> So in gentoo ebuild we say:
18:33:30 <dcoutts> SRC_URI="mirror://sourceforge/gtk2hs/${P}.tar.gz"
18:34:17 <dcoutts> and portage knows about a few such systems, like the kernel mirrors and gentoo's own mirrors etc
18:34:56 <dons> yeah. same on openbsd.
19:20:01 <MachinShin> hey all
19:28:52 <drbean> How do I get sqrt as an Integer?
19:29:49 <dons> @index sqrt
19:29:51 <lambdabot> Prelude
19:29:58 <dons> @type sqrt
19:30:00 <lambdabot> sqrt :: forall a. (Floating a) => a -> a
19:32:56 <drbean> I'm looking for divisors of n and I can stop after the square root, but n is an Integer
19:34:44 <dons> @type realToFrac
19:34:46 <lambdabot> realToFrac :: forall b a. (Fractional b, Real a) => a -> b
19:35:27 <dons> @plugs sqrt (realToFrac 10)
19:35:29 <lambdabot> 3.1622776601683795
19:45:15 <Igloo> You probably want floor too
19:47:55 <drbean> findiv n starter | starter > (floor (sqrt (realToFrac n))) = n
19:48:10 <drbean> It does the trick.
19:59:29 <drbean> @index random
19:59:31 <lambdabot> System.Random
20:00:09 <drbean> @type random
20:00:11 <lambdabot> bzzt
20:02:12 <drbean> @type Random.randomRIO
20:02:13 <lambdabot> Random.randomRIO :: forall a.
20:02:13 <lambdabot>        (System.Random.Random a) =>
20:02:13 <lambdabot>        (a, a) -> IO a
20:14:56 <lispy> ski: i finally looked at the log, but i don't think i "get it"
20:15:46 <lispy> i want a way to detect when a string is a substring of another string (or more generally lists) is there a standard function for that?
20:15:58 <lispy> i could write one, but it seemed like a common enough problem
20:16:24 <lispy> @hoogle [a]->[a]->Bool
20:16:26 <lambdabot> List.isPrefixOf :: Eq a => ([a] -> [a] -> Bool)
20:17:38 <lispy> hmm...
20:17:47 <lispy> @hoogle [a] -> [[a]]
20:17:48 <lambdabot> List.tails :: ([a] -> [[a]])
20:18:04 <lispy> @plugs tails [1,2,3]
20:18:06 <lambdabot> [[1,2,3],[2,3],[3],[]]
20:18:34 <lispy> @type any
20:18:35 <lambdabot> any :: forall a. (a -> Bool) -> [a] -> Bool
20:19:53 <lispy> any (== True) (map (isPrefixOf [3,4]) (tails [1,2,3,4,5,6]))
20:19:58 <lispy> @plugs any (== True) (map (isPrefixOf [3,4]) (tails [1,2,3,4,5,6]))
20:20:00 <lambdabot> True
20:20:07 <lispy> @plugs any (== True) (map (isPrefixOf [3,5]) (tails [1,2,3,4,5,6]))
20:20:09 <lambdabot> False
20:20:10 <dons> that ==True is redundant, surely?
20:20:23 <lispy> hmm...
20:20:26 <lispy> it does look that way
20:20:33 <lispy> but any takes (a -> Bool)
20:20:34 <dons> @plugs any id (map (isPrefixOf [3,5]) (tails [1,2,3,4,5,6]))
20:20:35 <lambdabot> False
20:20:39 <lispy> ah
20:20:43 <lispy> cool
20:22:30 <lispy> @pl (\x y -> any id (map (isPrefixOf x) (tails y))
20:22:31 <lambdabot> (line 1, column 47):
20:22:31 <lambdabot> unexpected end of input
20:22:31 <lambdabot> expecting variable, "(", operator or ")"
20:22:35 <lispy> @pl (\x y -> any id (map (isPrefixOf x) (tails y)))
20:22:36 <lambdabot> (any id .) . (. tails) . map . isPrefixOf
20:22:59 <lispy> @pl (\y -> any id (map (isPrefixOf x) (tails y)))
20:23:01 <lambdabot> any id . map (isPrefixOf x) . tails
21:29:09 <Pseudonym> G'day.
21:29:17 <Pseudonym> You really don't sleep much, do you? :-)
21:35:04 <Pseudonym> drbean: You still there?
21:35:23 <Pseudonym> I have an integer sqrt function which is pretty quick even on very large integers.
21:35:32 <Pseudonym> (Say, on the order of 10^300 or so.)
21:35:56 * juhp tries building gtk2hs with a ghc 6.4.1 snapshot on x86-64
21:39:51 <palomer> does anyone here know how to tell yacc or bison how to deal with function application?
21:40:15 <palomer> haskell style function application
21:41:30 <Pseudonym> Err... the normal way?
21:42:18 <palomer> which is?
21:42:35 <palomer> exp = exp exp is ambiguous
21:43:50 <Pseudonym> This is from the hugs source:
21:44:00 <Pseudonym> appExp    : appExp aexp                 {$$ = gc2(ap($1,$2));}
21:44:01 <Pseudonym>           | aexp                        {$$ = $1;}
21:44:04 <Pseudonym>           ;
21:45:01 <Pseudonym> That is the normal way.
21:53:32 <palomer> Pseudonym: and then have aexp = ... | appExp | .. ?
21:54:19 <palomer> that's ambiguous
21:54:42 <Pseudonym> No, of course not.
21:55:07 <Pseudonym> Then you have:
21:55:25 <Pseudonym> aexp      : qvar                        {$$ = $1;}
21:55:26 <Pseudonym>           | qvar '@' aexp               {$$ = gc3(ap(ASPAT,pair($1,$3)));}
21:55:26 <Pseudonym>           | '~' aexp                    {$$ = gc2(ap(LAZYPAT,$2));}
21:55:26 <Pseudonym>           | IPVARID                     {$$ = $1;}
21:55:26 <Pseudonym>           | '_'                         {$$ = gc1(WILDCARD);}
21:55:27 <Pseudonym> And so on.
21:56:22 <palomer> oh, so you seperate your productions in order of precedence
21:56:25 <Pseudonym> aexp is explicitly mentioned in the report.
21:56:41 <Pseudonym> Yes, that's what the report does.
21:57:06 <Pseudonym> Gofer, the predecessor of hugs, used to collect expressions and reparse them using an operator precedence parser.
21:57:19 <Pseudonym> But that was before Haskell limited itself to ten levels of operator precedence.
21:57:30 <Pseudonym> At which point it's feasable to just list them all in yacc.
22:00:54 <Pseudonym> Personally, and I say this as someone who has written multiple dozens of yacc grammars over the years, I would avoid using yacc's conflict resolution unless it's unavoidable.
22:01:32 <Pseudonym> Or if it would TRULY mess up your gramma.
22:15:50 <juhp> granma? :P
22:20:34 <juhp> yow!!
22:21:02 <juhp> gtk2hs works on x86-64 with the ghc-6.4.1 snapshot!!  wheee!
22:23:31 <vegai> I wonder if it's possible to find and install lambdabot and all its dependancies from stable sources
22:24:50 <dons> @version
22:24:51 <lambdabot> lambdabot 3p36, GHC 6.4 (OpenBSD i386)
22:24:51 <lambdabot> darcs get http://www.cse.unsw.edu.au/~dons/lambdabot
22:25:01 <dons> you also need hs-plugins and hsx
22:25:11 <dons> @google hs-plugins haskell
22:25:13 <lambdabot> http://www.cse.unsw.edu.au/~dons/hs-plugins/
22:25:20 <dons> @google hsx haskell
22:25:21 <vegai> yes, but...
22:25:22 <lambdabot> http://www.cs.chalmers.se/~d00nibro/haskell-src-exts/
22:25:34 <dons> "stable sources" means darcs these days
22:25:49 <dons> or you can get the lambdabot 3.0 release. that's stable. as is the hsx relesae
22:25:54 <vegai> perhaps I meant stable releases?
22:26:24 <dons> lambdabot and hsx have recent stable releases you can use. hs-plugins is between releases, so you need to use the darcs version
22:26:30 <vegai> I'd like to build packages for lambdabot's deps and it'd be somewhat simpler if there were just tarball releases for each
22:26:51 <dons> nonetheless, you should use darcs to get the stable releases too :)
22:27:42 <vegai> can one see all the tags that are in a darcs repository?
22:28:24 <dons> tags are just patches, so one way would be to use grep:
22:28:25 <dons> paprika$ darcs changes | grep -i TAG
22:28:26 <dons>   tagged 3
22:28:36 <dons> paprika$ cd yi
22:28:36 <dons> paprika$ darcs changes | grep -i TAG
22:28:36 <dons>   tagged yi-0.1.0
22:28:38 <dons> for example
22:28:42 <vegai> right, thanks
22:32:01 <dons> vegai, let me know if you have trouble building or working out what you're supposed to do to get lambdabot going.
22:32:06 <dons> the docs need work in this regard
22:32:22 <vegai> I actually did get it running once, by installing lots of packages by hand
22:32:48 <vegai> but yeah, I'll get back to you
22:32:52 <vegai> gotta go now
23:33:36 <Lemmih> Morning, #haskell.
23:34:10 <shapr> y0
23:34:19 <ski> moin
23:36:26 <olliej> evening
23:36:27 <olliej> :)
23:36:35 <shapr> shazam!
23:37:03 <olliej> hehe
23:37:37 * shapr turns from a normal guy into a normal guy with lambdas stuck into his socks!
23:37:48 <olliej> *groan*
23:38:11 * olliej turns into a guy in blue tights who can't put his clothes on in the right order...
23:38:19 * olliej is lambda man!
23:38:19 <shapr> Oops!
23:38:26 <shapr> Wow!
23:38:26 <olliej> need theme music though :)
23:38:53 <Pseudonym> G'day shapr.
23:38:57 <shapr> g'day Pseudonym
23:39:06 <shapr> Howza?
23:39:13 * ski looks for food. can't find it ..
23:39:24 <Lemmih> What's up in Haskell land?
23:39:40 * shapr eats food, has nothing left to eat except five cats.
23:40:30 <olliej> shapr: was talking to nigel re: research info and he says there should be something on modrian-script.org but i can't find anything :(
23:40:41 <shapr> aw, too bad
23:40:44 <olliej> mondrian-cript.org rather
23:40:56 <olliej> there's reference to mondrian (duh! :) )
23:40:59 <olliej> gah
23:41:03 <olliej> cript=script
23:41:11 <olliej> i have completely lost the ability to type
23:41:19 * shapr gives olliej chalk and an eraser.
23:41:23 <olliej> :p
23:41:37 <shapr> Chalk is fun to use on sidewalks.
23:42:24 <Heffalump> ugh, 5 hours sleep.
23:42:30 <olliej> hehe
23:42:36 <olliej> Heffalump: that would suck :(
23:42:36 * shapr couldn't sleep much either.
23:42:38 <Heffalump> this is not doing my campaign to catch up on sleep before the ICFP contest any good.
23:42:50 <Heffalump> I had 4 hours sleep on Sunday and Monday nights too.
23:42:56 <olliej> eep
23:43:18 <shapr> That sounds familiar, have you tried extreme exercise to encourage sleep?
23:43:36 <shapr> If I do about two hours of unicycling a day, I can sleep just fine.
23:44:33 <Pseudonym> Melatonin.
23:44:39 <shapr> I've heard of that.
23:44:45 <Pseudonym> Great stuff if you need it.
23:45:00 <Heffalump> the lack of sleep wasn't caused by insomnia, it was caused by staying up too late
23:45:01 <Pseudonym> It actually improves the quality of your sleep.
23:45:15 * olliej goes off to write typing for expressions...
23:45:37 * shapr gets ready to go shopping!
23:46:21 <Pseudonym> Whatcha buying?
23:46:32 <shapr> Shoes it seems.
23:46:59 <shapr> My saxophone teacher and I are going to the next big city over and shopping for neat stuff.
23:47:08 <shapr> She told me I'm buying shoes.
23:47:56 <shapr> blackdog: yow!
23:49:11 <shapr> Bet you didn't know I play saxophone.
23:49:24 <shapr> (Because, I don't, I just make neat noises)
23:49:52 <shapr> Anyway, one week until the next TMR!
23:50:12 <shapr> I'm almost positive I'll have my ArrowsIntroduction finished for the next TMR.
23:50:13 <Pseudonym> Do you need special shoes to play saxophone?
23:50:21 <Pseudonym> I'm pretty sure I should have an article.
23:50:30 <Pseudonym> I think it's going to be on breaking classical ciphers.
23:50:30 <shapr> It that should, or will?
23:50:31 <dbremner> shapr - alto?
23:50:36 <shapr> dbremner: yup
23:50:41 <Pseudonym> Simply because I've been doing a lot of that lately.
23:50:45 <shapr> Oh, neat.
23:51:01 <yain> tmr is what?
23:51:08 <shapr> The Monad.Reader
23:51:14 <shapr> What's yain?
23:51:24 <shapr> You Are In Nowhere?
23:51:32 <yain> uh?
23:51:40 <shapr> I was just wondering what yain means.
23:51:44 <yain> wine.
23:51:50 <shapr> Oh, neat.
23:51:55 <yain> so what is The Monad.Reader?
23:52:16 <shapr> It's a high quality informative wikizine with a truly wonderful editor person.
23:52:21 <shapr> That is, me!
23:52:33 <shapr> http://www.haskell.org/tmrwiki/FrontPage
23:52:37 <yain> okay
23:52:41 * shapr is so modest
23:52:53 * xerox yawny points at shapr
23:53:08 <shapr> Pseudonym: No special shoes needed for saxophone playing, but my sax teacher is also a shoe addict.
23:53:34 <shapr> Her mother owned a shoe store for some time, and would travel to other countries to find good deals on shoes.
23:54:00 <shapr> yain: Are you a Haskell user? Would you like to write for The Monad.Reader?
23:54:07 <shapr> hi xerox!
23:54:21 <yain> yes. no.
23:54:26 <shapr> awww
23:54:33 <yain> i'm like at the very beginning.
23:54:42 <yain> so there is no way i can write anything useful.
23:54:54 <shapr> Actually, you can accumulate useful writings.
23:55:06 <shapr> Have you seen Graham Klyne's Learning Haskell Notes?
23:55:21 <yain> maybe. they are called exactly that?
23:55:35 <shapr> He kept a record of things he found difficult, non-intuitive, and that sort of stuff. Then he updated that record later when he had more info.
23:55:42 <yain> http://www.ninebynine.org/Software/Learning-Haskell-Notes.html
23:55:43 <yain> ?
23:55:50 <shapr> That's it.
23:56:05 <shapr> He's expanded the article in the most recent TMR.
23:56:07 <shapr> http://www.haskell.org/tmrwiki/IssueThree
23:57:17 <xerox> I dreamt an idea for tmr!
23:57:23 <shapr> Oh tell me about it!
23:57:34 <Pseudonym> Oh?
23:57:37 <xerox> It's an article about composing abstraction.
23:57:46 <Pseudonym> Was it the one about being at work but forgetting your pants?
23:57:50 <Pseudonym> I could write an article on that!
23:58:02 <shapr> I wear shorts to work, so that's really happened to me!
23:58:02 <xerox> I mean things like patterns in composing.
23:58:12 <shapr> Oh, sounds cool.
23:58:18 <Pseudonym> Interesting.
23:58:32 <xerox> (.), (.) . (.), (f .) . (. g), etc..
23:59:03 <astrolabe> Wierd to have such a lucid dream (morning guys)
23:59:21 <shapr> Yeah, that would be a useful article. There's not single page or article that collects how to compose functions with different numbers of arguments with each other.
23:59:24 <shapr> hiya astrolabe
23:59:49 <Pseudonym> That sounds like the output of @pl.
23:59:51 <xerox> It happens frequently on vacation to me, I sleep 'till late and I usually dream in the morning, when I'm a bit woken up.
