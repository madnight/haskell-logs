00:03:13 <Itkovian> meunink
00:39:08 <boegel> yo everyone
00:39:17 <boegel> what's up with the RecentChanges on hawiki ?
00:39:27 <boegel> it's empty ? :s
00:40:21 <Itkovian> eh?
00:40:31 <Itkovian> guess there have been no recent changes then ...
00:40:57 <boegel> strange that the stuff of the last few days is gone...
00:41:17 <Itkovian> hmm ... perhaps shapr needed some space :-)
00:41:27 <boegel> apparently :)
00:41:34 <boegel> @seen shapr
00:41:35 <lambdabot> I saw shapr leaving #haskell 4 days, 7 hours, 30 minutes and 12
00:41:35 <lambdabot> seconds ago.
00:44:01 <Itkovian> man, that seems like one hell of a unicycle trip ...
00:45:01 <boegel> Itkovian: he has been working on his TMR article on Arrows
00:45:04 <boegel> quite a lot I've seen
00:45:06 <Itkovian> ic
00:48:35 * xerox runs to see
00:59:09 <nothingmuch> how do I make a function that takes a cont
00:59:21 <nothingmuch> and the cont can be a function with one of two types, it doesn't matter which?
00:59:38 <Itkovian> err
00:59:39 <nothingmuch> i.e., the function is just a shim between the cont and the caller
01:00:15 <autrijus> cont being continuation?
01:00:20 <nothingmuch> yes
01:00:24 <nothingmuch> takeWord fun = do
01:00:32 <nothingmuch> all reductions of takeWord end up using `fun`
01:00:51 <nothingmuch> so in a sense takeWord's type is:
01:01:08 <nothingmuch> takeWord :: (Word -> whatever) -> whatever
01:01:38 <xerox> s/whatewer/a/
01:01:42 <xerox> ?
01:01:51 <Lemmih> xerox: Same thing.
01:02:17 <nothingmuch> xerox: then you get "src/Harrorth/Eval.hs:139:14:
01:02:18 <nothingmuch>     Couldn't match the rigid variable `a' against `m a1'"
01:02:20 <nothingmuch> etc etc
01:02:53 <xerox> Use the needed constraints.
01:03:05 <nothingmuch> ?
01:03:09 <Lemmih> nothingmuch: Try :: (Word -> IO a) -> IO a
01:03:49 <boegel> @seen jyx
01:03:51 <lambdabot> I haven't seen jyx.
01:03:53 <nothingmuch> oh right, got the type of the lambda wrong
01:04:48 <xerox> takeWord :: (Monad m) => (Word -> m a) -> m a ?
01:05:07 <nothingmuch> the monad is always Eval
01:05:17 <nothingmuch> it's sometimes 'Eval Interp', and sometimes 'Eval (Interp -> Interp'
01:05:58 <boegel> Lemmih: check out the HRay website, metaball support ! *yaay
01:06:44 <xerox> Lemmih, how did you guessed the IO specifically?
01:06:48 <michaelw> nothingmuch: Either Interp (Interp -> Interp)
01:06:52 <Lemmih> boegel: Neat.
01:06:59 <xerox> s/ed//
01:07:11 <nothingmuch> michaelw: i'd like takeWord to be oblivious to the type it's passing around
01:07:23 <nothingmuch> the complications of a data type are pretty big
01:07:30 <Lemmih> xerox: More newbies don't use do-notation for other monads.
01:07:45 <Lemmih> nothingmuch: What about :: (Word -> Eval a) -> Eval a
01:07:55 <Lemmih> xerox: s/More/Most/
01:08:09 <nothingmuch> I tried that
01:08:35 <nothingmuch> it causes about 10 errors
01:08:38 <nothingmuch> all page long
01:08:40 <michaelw> nothingmuch: reduce the example, paste the code. it seems your design is flawed
01:08:52 <Lemmih> If it didn't work then you haven't given us all the information or you made a typo.
01:09:00 <nothingmuch> okay
01:11:06 <ski> boegel : try RecentChanges now ..
01:14:45 <ski> (some 'passaconaway' apparently zapped its contents. i restored it)
01:18:05 <boegel> ski: okay, thanks :)
01:21:27 <nothingmuch> okay, i realized why
01:22:14 <boegel> ski: that guy deleted the contents of the FrontPage too ? what a fucker !
01:24:22 <ski> mm, saw that
01:27:43 <ski> nothingmuch : how about using "Control.Monad.Cont.ContT a Eval Word" ?
01:28:10 <nothingmuch> ski: maybe in the next stage
01:28:17 <nothingmuch> it's a bit much for me to take all that in at once
01:28:28 <ski> k
01:28:50 <nothingmuch> since the interpretation really is a huge CPS thing
01:28:59 <nothingmuch> except when it's just simple tail recusrion
01:29:09 <nothingmuch> then it might help to make it a ContT Eval
01:29:22 <nothingmuch> but chapter 8 is pretty bloated as it is
01:29:33 <nothingmuch> and I really ought to finish it sometime soon, even if it's not perfect
02:02:19 <TFK|Uni> Bah, we don't have a Haskell compiler here :-/
02:02:40 <boegel> TFK|Uni: RUN !
02:03:38 <boegel> TFK|Uni: come on man, javac is right behind you ! run !!1!
02:05:01 <xerox> @google Glasgow Haskell Compiler
02:05:03 <lambdabot> http://www.haskell.org/ghc/
02:05:16 <xerox> ;)
02:05:57 <TFK|Uni> boegel, actually, it *is* right behind me, or rather, in the shell
02:06:16 <boegel> hehe :)
02:13:56 <nothingmuch> how do i enumerate instances of a type class?
02:14:12 <nothingmuch> oh, :i
02:16:31 <TFK|Uni> CAn someone send me haskell-mode 2.0? It seems that I can't connect to http://www.iro.umontreal.ca/~monnier/elisp/
02:18:30 <kzm> Is it possible to define a "type" synonym for a polymorphic funciton?  (I want to say something like "type KF = (Ord k) => Int -> k)")  Perhaps I am just confused...
02:19:24 <nnunley> erl6
02:19:29 <nnunley> Arrgh.
02:19:29 <kzm> (no, that was just stupid, I guess)
02:19:29 <TFK|Uni> It should be possible, but why the extra parentheses?
02:19:49 <TFK|Uni> *parenthesis
02:20:09 <kzm> Hmm?  Around Ord?  Just habit, you need them sometimes with multiple constraints, I think.
02:20:23 <TFK|Uni> No, after k
02:20:42 <TFK|Uni> (Or was that a typo?)
02:20:45 <xerox> kzm, type KF k = (Ord k) => Int -> k ?
02:20:56 <kzm> typo.
02:21:08 * TFK|Uni substracts from his karma
02:21:42 <kzm>     Illegal polymorphic or qualified type: (Ord k) => Position -> Maybe k
02:22:45 <kzm> HOWEVER: I can drop the Ord constraint, and insert it in the functions using the type.
02:22:49 <kzm> ...or so it seems.
02:23:11 <xerox> kzm, you dont want tho constraint there I think.
02:23:21 <kzm> I think you're right.
02:23:21 <xerox> *e
02:23:34 <kzm> My mind has not been working too good lately.
02:23:47 <kzm> I should get a different job.
02:26:22 <xerox> My fingers aren't either, I'm trying to learn dvorak and I'm typing sooo slowly...
02:28:25 <TheHunter> type KF = forall k. Ord k => Int -> k will work with extensions.
02:31:12 <kzm> It typechecks, at any rate.  Thanks!
02:31:40 <kzm> TheHunter, all right -- in my case, it's better to put the constraints elsewhere.  I found that they will vary a bit.
02:31:46 <TheHunter> @google "liberalised type synonyms"
02:31:49 <lambdabot> http://www.reed.edu/~carlislp/ghc6-doc/users_guide/type-extensions.
02:31:49 <lambdabot> html
02:32:42 <TheHunter> @google "liberalized type synonyms" site:haskell.org
02:32:44 <lambdabot> http://www.haskell.org/pipermail/haskell/2005-April/015712.html
02:32:51 <TheHunter> @google "liberalised type synonyms" site:haskell.org
02:32:53 <lambdabot> http://www.haskell.org/ghc/docs/latest/html/users_guide/type-
02:32:53 <lambdabot> extensions.html
02:33:35 <kzm> I guess I must learn to exploit \bot more.
02:33:53 * kzm smiles at lambdabot.
02:34:12 <xerox> @botsnack
02:34:13 <TheHunter> i guess i should fix the url thingy.
02:34:13 <lambdabot> :)
02:36:38 <boegel> \bot
02:36:43 <boegel> eh ? :)
02:37:25 <xerox> \ as in \x -> ...  I suspect :)
02:54:07 * Itkovian eats
02:59:03 <Lemmih> boegel: Can HRay perform intersection and difference on objects?
02:59:12 <boegel> Lemmih: not yet
02:59:36 <boegel> Lemmih: that's called csg, I've had that in mind, but I didn't have time (and don't have now too)
02:59:39 <boegel> Lemmih: why?
02:59:55 * boegel eats too (hmmm, lasagna)
03:01:14 <Lemmih> That would make HRay useful to me.
03:01:31 <boegel> Lemmih: for what ? :) planning an making a Pixar-like movie ? :p
03:03:46 <Lemmih> Nah, hacking on a DSL for generating povray SDL files and using a ray-tracer written in Haskell would make it much easier.
03:05:14 <boegel> I see
03:05:24 <boegel> well, feel free to add CSG support to HRay ;)
03:06:00 <boegel> shouldn't be too hard probably
03:06:55 <Lemmih> I'm not good at math nor geometry.
03:07:15 <boegel> Lemmih: neither am I :)
03:09:03 <boegel> union is very simple, just check for intersection in both objects
03:09:55 <boegel> I might take a look at it sometime, but it won't be in the next few weeks, probably not until Aug
03:10:56 <Lemmih> There's no hurry.
03:19:33 <olliej> anyone know the ghc syntax to get a parametrically typed constructor?
03:22:01 <Lemmih> As in GADTs?
03:24:10 <olliej> um, GADTs?
03:24:37 <olliej> Generic Abstrat\ct data type? yes
03:24:45 <olliej> anytthing else? not sure :)
03:24:53 <Lemmih> @google ghc GADTs
03:24:56 <lambdabot> http://www.haskell.org/ghc/docs/latest/html/users_guide/gadt.
03:24:56 <lambdabot> html
03:25:10 <olliej> cheers
03:50:39 <TheHunter> @listmodules
03:50:40 <lambdabot> babel base code dice dict dummy dynamic fact haddock help hoogle
03:50:40 <lambdabot> karma lambda more pl plugs quote search seen spell state system todo
03:50:40 <lambdabot> topic type version vixen
03:51:36 <boegel> @yow
03:51:38 <lambdabot> Hand me a pair of leather pants and a CASIO keyboard -- I'm living
03:51:38 <lambdabot> for
03:51:38 <lambdabot> today!
03:57:30 * Itkovian is trying to grok monads
03:57:41 <Itkovian> well, a bit better in any case
03:58:06 <TFK|Uni> "Hope dies last", as they say.
03:59:15 * boegel is sick and tired of Appel's compilers book
03:59:16 <boegel> argh
04:01:17 <Itkovian> tomorrow will be the last day boegel
04:01:47 * Itkovian questions boegel
04:02:09 <Itkovian> give the peephole optimisations
04:02:14 <Itkovian> and explain how they work
04:02:16 <Itkovian> :-)
04:02:22 <boegel> peephole ?
04:02:27 * boegel checks to index :p
04:02:46 <boegel> no 'peephole' entry in the index
04:02:56 <Itkovian> hmm , how do they call it then?
04:02:58 <Itkovian> 'local' ?
04:03:51 <boegel> Itkovian: well, there are several
04:04:05 <Itkovian> hey, don't bother :-)
04:04:09 <boegel> avoiding recalculation of stuff, avoiding memory access, ... :)
04:04:38 <Itkovian> did they say anything about code placement?
04:05:20 <boegel> you mean the order of execution and stuff ?
04:09:59 <Itkovian> no, the placement of code in the "text segment" of the executable, to e.g. optimise for I-cache accesses etc.
04:11:05 <boegel> no, no cache related stuff, just register vs memory
04:14:12 <boegel> pff, man, no way I'll be able to concentrate all afternoon on this
04:15:02 <dcoutts> @seen ndm
04:15:04 <lambdabot> I saw ndm leaving #haskell 18 hours, 39 minutes and 48 seconds ago.
04:15:15 <dcoutts> @seen jyp
04:15:16 <lambdabot> I saw jyp leaving #haskell 12 hours, 37 minutes and 28 seconds ago.
04:15:58 <boegel> dcoutts: jyp contributed some stuff to HRay, have you seen it ?
04:16:51 <dcoutts> boegel, I saw the screenshot of the blobby thing!
04:19:00 <dcoutts> boegel, if you're subscribed to the gtk2hs-users list you can see his other screenshot of his app using Gtk2Hs. (Sadly the archive strips the attachment)
04:19:05 <xerox> dcoutts, can you give me some url about the gtk thingie you were talking about yesterday?
04:19:31 <dcoutts> xerox, ah, there is no url, but I can make one or just email it to you.
04:19:36 <boegel> dcoutts: the unicode stuff ?
04:19:42 <dcoutts> boegel, yes
04:19:48 <boegel> neat
04:20:25 <dcoutts> xerox, it was the ants visualiser I was talking about which shows off an effecient repaint handler
04:20:31 <xerox> dcoutts, I'd really appreciate if you could email it :)
04:23:02 * boegel goes outside for a while with his Hitch Hikers book
04:44:10 <boegel> whahahaha: "Put this little fish in your ear"
04:44:11 <boegel> I love it
04:46:49 <Itkovian> heh, you're only that far?
04:47:05 <Itkovian> 'and God vanished in a puff of logic'
04:47:19 <Itkovian> or something along those lines
04:47:24 <boegel> Itkovian: hey, don't spoil the ending :p
04:47:34 <Itkovian> nah, that will come pretty soon :-)
04:47:43 <Itkovian> just when they introduce the babelfish
04:48:21 <boegel> oh, is that where the term 'babelfish' comes from ? :)
04:49:10 <Itkovian> yes.
04:49:41 <boegel> oh nice
04:53:13 * boegel dances on a great Basement Jaxx song
05:00:05 <bourbaki> moin
05:00:37 <boegel> yo bourbaki
05:04:21 * Itkovian tries to rock in his chair
05:04:36 * boegel rocks on his sitting ball
05:06:45 <bourbaki> . . .
05:07:01 * bourbaki wishes he had a chair like dr. evil
05:07:15 <Itkovian> *pinky finger to mouth
05:09:12 * tic puts together the fingers of his hands
05:09:15 <tic> eeehxcellent
05:14:46 <autrijus> compError :: forall x y. Compile x y => x -> Comp (PAST y)
05:14:46 <autrijus> compError = die ("Compile error -- invalid " ++ show (typeOf (undefined :: y)))
05:15:10 * autrijus praises declaration type signatures
05:15:46 <Rearden> hallelujah!
05:16:14 * Itkovian agrees
05:16:45 <autrijus> without that I'd need to show the PAST y
05:16:51 <autrijus> and manually dropWhile the PAST part
05:16:52 <autrijus> that'd be ugly
05:31:16 <bringert> nibron: you there?
05:32:49 <bringert> nibro: I mean
05:37:48 * boegel wheeps 'cause the sun is gone after a pack of clouds
05:38:37 <bourbaki> boegel: youre lucky
05:38:54 <bourbaki> i wish i had one of these sunpannels that mr burns has
05:39:27 <boegel> bourbaki: I'm lucky ? how's that :)
05:39:43 <bourbaki> because the sun is gone
05:40:09 <Heffalump> does anyone have any examples of cabalized stuff that uses hsc2hs?
05:40:11 <bourbaki> i just had to walk to the course today and got a nice sunburn on my forehead
05:42:13 <boegel> bourbaki: heh, you should rub yourself with anti-sunburn dude :)
05:42:23 <boegel> or how's that stuff called
05:43:25 <bourbaki> sunblocker
05:43:37 <bourbaki> i need to get a good hat thats all
05:43:55 <bourbaki> but usually i just dont leave the house until sunset :)
05:44:09 <bourbaki> or at least after something like 17-18h
05:44:14 <boegel> bourbaki: damn, why ? :) sun is nice
05:44:28 <boegel> where are you from actually ?
05:44:32 <bourbaki> germany :)
05:44:58 <bourbaki> but the few sunny days here are enough for me :)
05:45:05 <bourbaki> too much actually
05:45:51 <bourbaki> i look like hanibal lector again
05:47:04 <boegel> hehe
05:47:09 * boegel likes the sun quite al ot
05:47:15 <boegel> s/al ot/a lot
05:47:35 <bourbaki> i get sun tan from the radiation of my monitor thats enough
05:47:43 <boegel> mwoeha :)
05:48:23 <bourbaki> the romanitc shine of my catoden strahler ;)
05:48:25 * ski is not so fond of the sun, either ..
05:48:39 <bourbaki> ski: hence the name ;)
05:48:42 * boegel doesn't get people who don't like the sun
05:48:48 * Itkovian likes the sun, but it must not become too warm, say a nice 22 degrees celcius is ok
05:48:50 <ski> evil bright shiny .. thing !
05:48:54 <nothingmuch> darcs pull harrorth
05:49:08 <boegel> I do have a mild version of sun allergy, but when I use enough sunblock, it's fine
05:49:15 <ski> (bourbaki : actually, no, it has nothing to do with snow)
05:49:25 <bourbaki> its cool to sit in the shades and have a look outside
05:49:38 <bourbaki> but staying in the sun is just not debatable
05:49:55 <bourbaki> ski: so what does it abrev?
05:50:09 <ski> SKI-calculus
05:50:31 <bourbaki> boegel: you know that sunblockers dont block the sun really just prevent you from getting a sunburn
05:50:34 <bourbaki> ski: whats that?
05:50:59 <boegel> bourbaki: I know, but it seems to help against the mild rash I get when I don't use it
05:51:46 <bourbaki> its just that it doesnt prevent what it really says to you skin will still age faster and all
05:51:59 <ski> bourbaki : http://en.wikipedia.org/wiki/SKI_combinator_calculus
05:52:02 <bourbaki> plus i get a lot of freckles in the sun and i dont like these either :)
05:53:24 <ski> (bourbaki : btw, traveling over snow, when sunny, gets you more UV radiation)
05:53:30 <boegel> bourbaki: the effect only becomes visible when you're 50 orso, and actually I don't give a shit how I look :)
05:53:44 <bourbaki> ski: i know :) i wanted to state the later if you say yes ;)
05:54:19 <ski> ;)
06:01:20 <boegel> yo rene, bye rene y0w rene :)
06:02:10 <bourbaki> :)
06:02:32 <nothingmuch> unlambda uses SKI, right?
06:03:59 <ski> yes
06:04:15 <Itkovian> http://en.wikipedia.org/wiki/Lazy_K
06:05:06 <boegel> oh, that's the stuff Itkovian tried to teach us last year
06:05:22 <Itkovian> heh
06:05:26 <boegel> ;)
06:05:28 <autrijus> hm. I wonder if you can compile Lazy K to UTM.
06:05:33 <bourbaki> you both are in the same place?
06:05:35 <autrijus> and them from UTM to GOL
06:05:45 <boegel> bourbaki: no, like 50km away from each other
06:05:48 <autrijus> and from GOL to r110
06:05:51 <autrijus> that would be fun
06:05:57 <bourbaki> but at the same uni?
06:05:59 <boegel> bourbaki: but we will be in the same place soon
06:06:10 <nothingmuch> UTM?
06:06:15 <boegel> bourbaki: yeah (me as a student, Itkovian as a Phd'er)
06:06:16 <autrijus> universal turing machine
06:06:23 <bourbaki> oho
06:06:25 <nothingmuch> ah
06:06:35 <autrijus> GOL is game of life, r110 is rule 110 of the onedimensional cellular automaton
06:06:47 * nothingmuch is tempted to have Harrorth use Lazy K as a compilation backend
06:06:57 <autrijus> (they are all church^Wturing complete)
06:07:32 <nothingmuch> that will make awaiid happy
06:07:43 <nothingmuch> he commented that my remark on what's a primitive, in chapter 7, is actually not 100% correct
06:07:43 <boegel> bourbaki: if I graduate this year (hopefully :) ), I'll start a Phd at the same research group as Itkovian
06:07:48 <nothingmuch> and introduced me to church integers
06:08:06 <bourbaki> boegel: so you did you master right now?
06:08:42 <boegel> bourbaki: yeah, although it's not called master yet
06:08:55 <boegel> Itkovian: how do you translate 'licentiaat' ? :)
06:09:06 <Itkovian> you don't
06:09:12 <bourbaki> dang if i wasnt such a lazy bugger i would have a degree now also
06:09:39 <boegel> bourbaki: it's not too late yet
06:09:49 <Itkovian> right now we don't have a master (yet), so it's four years to become a 'licentiaat', but over the next few years the bachelor/masyter system will be adopted, which sucks imo
06:09:50 <boegel> you'll learn _a lot_ at uni if you're willing to
06:09:58 <bourbaki> heh :) well im not interested in cogsci anymor
06:09:59 <bourbaki> e
06:10:10 <boegel> Itkovian: sucks ? why ??
06:10:12 <bourbaki> any study i cant finish in 1 semester is useless to me i think
06:10:44 <Itkovian> boegel: I fear they will screw up the level of Belgian education and bring it down to US standards ...
06:10:48 <bourbaki> Itkovian: boegel: its like here they are switching to bachelor and master over here as well
06:11:01 <bourbaki> Itkovian: a lot of ppl say that here as well
06:11:21 <bourbaki> but i think its quite the reverse the us ppl will see that they cant compete with the europeans ;)
06:11:39 <Itkovian> I hope so, but I think the US focus is somewhat different ...
06:11:48 <Itkovian> we deliver theoretical well-versed people
06:11:52 <bourbaki> a lot of the studies you can do here have its peculiar way for exams and such
06:11:56 <Itkovian> they try to get them into practice asap afaik
06:11:57 <bourbaki> not the same as in the us
06:12:07 <bourbaki> yes
06:12:19 <bourbaki> us is engineers
06:12:25 <bourbaki> and europe is thinkers
06:12:31 <Itkovian> well yeah
06:12:40 <Itkovian> mostly
06:12:46 <bourbaki> especially here cause we lack of money for computers and other lab stuff
06:12:52 <Itkovian> yeah
06:13:26 <bourbaki> i once heared that they tried to develop a self driveing car
06:13:57 <bourbaki> and a german engineer did that with less costs and just applying simple stuff
06:14:09 <Itkovian> heh
06:14:24 <bourbaki> anyway i think that its also an opportunity for the europeans to get easier on the us market
06:14:25 <Itkovian> deutsche grundlichkeid or some such
06:14:32 <bourbaki> yep :)
06:14:46 <bourbaki> though its gruendlichkeit ;)
06:14:59 <boegel> almost Itkovian, almost ;)
06:15:06 <bourbaki> heh
06:15:33 <bourbaki> though i think that its a legend these german virtues
06:15:43 <Itkovian> heh
06:15:44 <bourbaki> i know a lot of lasy ppl
06:15:49 <bourbaki> er lazy
06:15:50 <Itkovian> lazy that is
06:15:52 <Itkovian> ;-)
06:16:03 <bourbaki> though i dont know how lazy others are
06:16:13 <sbeyer> it's a legend, indeed ;)
06:16:26 <bourbaki> yet i am always too early :)
06:16:36 * sbeyer always too late
06:17:04 <bourbaki> heh
06:17:14 <bourbaki> i have like 10 clocks ehre
06:17:27 <bourbaki> and they are all ticking differently
06:17:38 <bourbaki> and im not sure if there is a single one that shows the right time
06:18:40 <mflux_> I attempt to minimize the number of non-ntp-synchronized clocks
06:18:52 <bourbaki> heh
06:19:03 <mflux_> I even disalbed (didn't set) the microwave oven's clock for that reason.. and my kitchen clock is a computer.
06:19:07 <bourbaki> usually i dont need a clock anyway
06:19:28 <bourbaki> clocks are for wage slaves ;)
06:19:48 <Itkovian> "these are the cries of the carrots"
06:20:09 <bourbaki> cries of the carrot?
06:20:11 <autrijus>  0   
06:20:42 <Itkovian> damn right bourbaki ... tomorrow it's harvest day and to them ... it's the holocaust
06:20:46 * Itkovian is bored
06:20:52 <bourbaki> HAHAHAHA!
06:21:06 <Itkovian> erm, no offense intended there ...
06:21:12 <bourbaki> Itkovian: what are you researching in?
06:21:19 <bourbaki> non taken :)
06:21:22 <bourbaki> none
06:21:32 <Itkovian> performance of (java) apps
06:21:37 <Itkovian> and how to predict it
06:21:39 <bourbaki> is there any?
06:21:45 <Itkovian> no.
06:21:47 <Itkovian> ;-)
06:21:51 <bourbaki> thought so :)
06:21:53 <Itkovian> yes.
06:21:58 <Itkovian> just kidding.
06:22:07 <Itkovian> performance being on the u-arch level
06:22:18 <Itkovian> cache branch prediction, ipc, ...
06:22:25 <bourbaki> personally i dislike jave cause it just went into a totally crappy direction
06:22:43 <autrijus> it has a direction?
06:22:46 <Itkovian> i really don't give a shit, the jvm is stuffed with good ideas imo. and some bad ones.
06:23:14 <bourbaki> well i mean that since you use a vm you could also write dynamic code
06:23:22 <Itkovian> the ideas should be portable to any managed runtime environment, e.g. haskell :-)
06:23:34 <bourbaki> and i really dont understand why they threw out good things like operator overloading
06:24:34 <bourbaki> but dynamic code isnt anything that is mutually exclusive with portability
06:24:53 <bourbaki> yet i also have to admit that i didnt have had a look into the jvm really
06:31:10 <Itkovian> I do not concern myself with the source language, mostly with the JVM
06:31:40 <bourbaki> and what are examples for the good ideas there?
06:43:08 <boegel> Itkovian is looking them up... :p
06:43:20 <bourbaki> or adding them ;)
06:43:55 <Itkovian> well, mainly we are focusing on trying to predict performance, in terms of both complete apps and phases of it. The ultimate goal
06:44:07 <Itkovian>  is to get an estimate of BPC (bytecodes per cycle)
06:44:32 <bourbaki> but isnt that totally utopic?
06:44:56 <boegel> bourbaki: hey calm down, keep it interesting for me too, okay :p
06:45:20 <bourbaki> :)
06:45:56 <Itkovian> http://escher.elis.rug.ac.be/p/publ.php?auteur=*Georges,+A.*&t[0]=%60J-PAPER-SCI%60,%60J-PAPER-INTREF%60&s[0]=Journal+papers&t[1]=%60C-PROC-INT%60&s[1]=Conference+papers&ss=blue.css
06:46:02 <Itkovian> no, why?
06:46:19 <Itkovian> we're working towrds it
06:46:35 <bourbaki> because that depends on the code?
06:46:48 <bourbaki> i mean there are infinitely many implementations for a problem
06:46:54 <bourbaki> solutions that is
06:47:18 <bourbaki> do you make use of variations calculus?
06:47:28 <Itkovian> bourbaki: sure, but we'd like an estimate for a given piece of code ...
06:47:38 <Itkovian> what the heck is variations calculus?
06:47:55 <bourbaki> im not sure if thats the right english term
06:48:01 <bourbaki> varianz rechnung
06:48:26 <bourbaki> sec let me google a bi
06:48:27 <bourbaki> t
06:48:29 <Itkovian> I guess so ... the wikipedia page says its functionals stuff
06:49:05 <bourbaki> i think thats the next think im gonna have a look at after my excursion into the beauty of meteorology :)
06:54:47 <boegel> bourbaki: you're working on lot's of stuff, aren't you :)
06:55:00 <bourbaki> yes just interested in a lot of things
06:55:38 <boegel> I mostly interested in 3D related stuff :) and sex, off course ;)
06:55:53 <bourbaki> heh
06:56:02 <bourbaki> well 3d is just so limited
06:56:28 <bourbaki> once you have seen the beauty of non linear non finite spaces you are quite bored with these things :)
06:56:31 <boegel> bourbaki: no way dude :)
06:56:36 <bourbaki> of course
06:56:49 <boegel> calling 3d limited is swearing
06:57:13 <bourbaki> well there are so much more dimensions
06:57:33 <boegel> yeah, true
06:57:58 <boegel> but I think the things you can achieve with 3D (not in a math-way, but in a physical kinda way)
06:58:06 <boegel> are a lot cooler
06:58:20 <boegel> like this for example: http://www.cgnetworks.com/gallerycrits/22416/22416_1116921460_medium.jpg
06:58:29 <bourbaki> physics is like an impure projection of math :)
06:58:30 <boegel> "Master & Servant" topic in CGtalk
06:59:19 <bourbaki> heh
07:01:01 * boegel takes another big break
07:01:14 <bourbaki> break of what?:)
07:02:05 <boegel> studying
07:02:08 <dcoutts> boegel, your HRay is not longer alone on our screenshots page:
07:02:08 <dcoutts> http://haskell.org/gtk2hs/archives/category/screenshots/
07:02:22 <boegel> dcoutts: nice
07:02:31 <ndm> dcoutts, you were asking about my hi2hoo convertor?
07:02:43 <dcoutts> ndm, yes
07:02:55 <boegel> wtf is Hanzi ? :)
07:03:06 <dcoutts> I'd like to extract the names of exported functions and their types from .hi files
07:03:06 <ndm> i can upload what i've got so far if you give me a second
07:03:06 <bourbaki> oh cool
07:03:44 <bourbaki> dcoutts: can you use that to actually learn the signs?
07:03:51 <dcoutts> boegel, I thought people might not know, that's why I linked to the wikipedia article on Hanzi!
07:04:05 <boegel> oh, okay :)
07:04:10 <dcoutts> bourbaki, when it's released, I guess so. Ask jyp.
07:04:31 <dcoutts> ndm, cool, thanks. I'm in no rush.
07:04:35 <bourbaki> dcoutts: when will it be released?
07:04:47 <boegel> bourbaki: ask jyp :)
07:04:59 <boegel> bourbaki: you want him email ?
07:05:00 <dcoutts> bourbaki, I'm afraid I don't know, yes, you'll have to ask jyp.
07:05:04 <boegel> s/him/his
07:05:08 <bourbaki> ah ok
07:05:17 <bourbaki> and no i dont like emailing ppl i dont know :)
07:05:25 <boegel> okay then
07:06:36 <dcoutts> @seen jyp
07:06:37 <lambdabot> I saw jyp leaving #haskell 15 hours, 28 minutes and 49 seconds ago.
07:07:45 <boegel> he'll probably be back tonight (as in the next 6 hours orso)
07:08:42 <ndm> darcsc get http://www-users.cs.york.ac.uk/darcs/hoogle
07:08:49 <ndm> darcsc get http://www-users.cs.york.ac.uk/~ndm/darcs/hoogle
07:09:01 <ndm> (and you also needto spell darcs correctly :) )
07:09:04 <dcoutts> ndm, ok...
07:09:21 <dcoutts> :-)
07:09:56 <ndm> its all very hard coded, and it doesn't handle class declarations yet
07:10:01 <ndm> but its got most of teh stuff required
07:10:12 <ndm> you need to do ghc --show-iface on the files first, then hi2hoo them
07:10:39 <dcoutts> ndm, ok, I only need the functions & their types, so that's ok.
07:10:44 <ndm> API compatability is then probably a case of are the two files equivalent, regardless of order
07:10:55 <Thu17732> how is the memory usage of a map compared to an association list?
07:11:34 <mflux_> I'd imagine atleast times 3?
07:11:35 <ndm> it also drops forall stuff, and module qualification
07:14:35 <ndm> dcoutts, off now, back in 15/20 mins - just leave any questions and i'll see them
07:14:43 <Thu17732> but for an environment its probably more efficient to choose a map, because typically, a lot of lookups will be performed (so you'd want to take the more memory consumption as a tradeoff)
07:47:36 <boegel> yo shelarcy
07:47:56 <shelarcy> hi
07:53:56 <marcot> Hello, how do I document an instance of a class with haddock?
07:54:08 <marcot> I can't find anything about it in the user guide.
07:57:19 <Itkovian> I'm off ... ttyl
07:57:39 <Itkovian> marcot: check the ghc docs for an example?
08:02:02 <marcot> Itkovian: ok..
08:04:11 <marcot> Itkovian: but to see the source code will I have to download the whole .tar.gz from ghc?
08:07:16 <foxy> marcot: http://www.haskell.org/haddock/
08:13:29 <foxy> marcot: didn't read your question thoroughly at first, what is the point of documenting an instance declaration? shouldn't the class cover the documentation? It seems like instance declarations aren't recognised by haddock
08:15:48 <marcot> foxy: not always. I have declared a datatype and I want to document the show function for it, because it follows a format that I would like to explicit.
08:22:59 <shapr> I can't believe it's not butter!
08:24:00 <boegel> yo shapr
08:24:01 <shapr> JaffaCake: any major changes to running SMP programs with GHC-cvs?
08:24:17 <JaffaCake> hi shapr
08:24:25 <shapr> hiya JaffaCake, how's code?
08:24:44 <shapr> bringert: y0 y0, I love the Network.CGI replacement!
08:24:46 <JaffaCake> no - it kind of works, but we have some performance issues to investgate
08:25:10 <JaffaCake> that is, it doesn't always make programs go faster
08:25:16 <shapr> Any ideas why?
08:25:48 <JaffaCake> various theories, and some evidence - my guess is the main problem is lack of processor affinity right now
08:25:57 <shapr> Oh, I have a vaguely related question, do you know if anyone has profiled arrow support in GHC?
08:26:09 <JaffaCake> no, I don't know
08:26:55 <shapr> I'm writing an arrows introduction for the next issue of The Monad.Reader, and one of the drawbacks is that arrow-style code can be slower than equivalent monadic code.
08:27:14 <shapr> I'm not sure that I'll be able to cover that particular issue usefully in the first article though.
08:27:50 <JaffaCake> I bet with enough inlining and specialising you can make the performance the same
08:27:57 <boegel> shapr: I've read parts of your article, it's looking good
08:28:06 <shapr> Arrow-style code should be faster.
08:28:09 <boegel> I don't understand most of it, but hey, that's just me talking :p
08:28:36 <JaffaCake> sure, well I bet you can make it faster then :)
08:28:38 <shapr> Arrow code doesn't need as many actual ops to do the same stuff, that's why I wonder.
08:28:43 <shapr> heh, probably so :-)
08:29:10 <JaffaCake> performance is usually about making the layers of abstraction go away
08:29:49 <shapr> Yeah, good point. In the case of arrows it's about a higher level abstraction that allows further optimizations. Of course, if you're not taking advantage of those optimizations...
08:30:12 <shapr> Obviously I should examine GHC's arrow support next...
08:30:40 <JaffaCake> we're planning to have a GHC performance-fest soon, it's long overdue
08:30:45 <shapr> Oh, I want to be part of that.
08:31:13 <JaffaCake> look into performance of various things, catch any bugs that have crept in, see what we can improve, that sort of thing
08:31:15 <shapr> I've been trying to find a good motivation to write a bunch of QuickCheck tests for GHC.
08:31:49 <JaffaCake> tests for GHC itself?
08:31:52 <shapr> Yup
08:32:12 <shapr> I think QC can be used for performance testing as well, I have a bunch of ideas for neat ways to use QC.
08:32:12 <JaffaCake> sounds like a great idea
08:33:05 <shapr> I do wish QuickCheckM had real IO support, that would let me use it for my paying work.
08:33:35 * JaffaCake hasn't done much quickcheck stuff
08:34:02 <shapr> Oh, I'd like to say that the continual addition of new features to GHC is something I really enjoy. I haven't had this particular thrill since I gave up on Magic The Gathering.
08:34:21 * xerox knows what shapr is talking about.
08:34:24 <JaffaCake> heh, that's great
08:34:50 <JaffaCake> mind if I pinch that comment for my file of favourite GHC feedback?
08:34:54 <shapr> In my opinion, QuickCheck is the master of testing tools. I suspect it can be adapted to do unit testing, design by contract, and other stuff too.
08:34:59 <shapr> Go for it!
08:35:22 <shapr> I've started writing a blog entry about that particular thrill.
08:35:34 <xerox> Do you people use QWERTY or DVORAK or whateverelse layout?
08:35:37 <shapr> aoeu
08:35:53 * xerox strangely looks at shapr
08:36:04 <JaffaCake> qwert here
08:36:20 <shapr> I use a heavily modified dvorak layout on a kinesis contoured keyboard.
08:36:36 <JaffaCake> I touch-type 60wpm, but I think slowly :)
08:36:39 <shapr> I also use a right-hand-only dvorak layout on my IBM clicky keyboard when my left wrist bothers me.
08:36:40 <xerox> I'm trying to slowly learning it.
08:37:04 <xerox> ..I'm typing QWERTY since the age of 6, tough :)
08:37:40 <shapr> One example of the surprise effects of new features is that GADTs give type signatures to constructors, and that makes learning Haskell easier for newbies.
08:38:06 <JaffaCake> shapr: those keyboards look nice, must try one out
08:38:34 <shapr> If you ever have wrist pain, kinesis is worth purchasing.
08:39:02 <shapr> My layout is "I'm not a koala" where I've moved all the modifier keys under my thumbs.
08:39:22 <shapr> That prevents the famous emacs pinky problem.
08:39:39 <JaffaCake> shapr: I've heard people say that about GADTs, but I don't fully understand why: the new syntax means that you see the signature of the constructor, but it takes the syntax further away from pattern matching
08:40:16 * JaffaCake suffers from the emacs squashed pinky 
08:40:32 <shapr> Also, I want to purchase a TC1100 tablet PC so I can affix it to my spare Kinesis keyboard and get a laptop with actual usability.
08:40:40 <xerox> I find it comfortable O_o
08:41:09 <xerox> (Using the modifier keys with the pinky)
08:41:14 <JaffaCake> I like my MS natural KB
08:41:43 <xerox> I hate my laptop's one :(
08:42:00 <xerox> But the kinesis ergo is way much expensive :\
08:42:00 <autrijus> hm, so ($) is church numeral one?
08:42:15 <shapr> um, yeah
08:42:38 <shapr> s z
08:42:40 <shapr> Succ Zero
08:43:21 <shapr> xerox: It's worth it, I had to stop typing with my left hand for six months, how worktime do you think I lost?
08:43:59 <shapr> xerox: This Tablet PC has the 'computer' behind the 'screen' http://h18004.www1.hp.com/products/tabletpc/tc1100/
08:44:06 <xerox> shapr, I do agree, but it will probably still sit in the wishlist for a little while :\
08:44:49 <xerox> That's a nifty goodie.
08:45:22 <shapr> So if I can find some way to stick it to my keyboard comfortably, I'll be close to a real keylap. http://www.scannedinavian.com/2004-05-24.html
08:46:12 <shapr> autrijus: Pierce does Church numerals in the beginning of TaPL
08:47:54 <shapr> I wish HaRe would be updated to handle the most popular extensions. I think refactorings browsers approach HLLs for process-changing advancements.
08:48:19 <JaffaCake> that could happen.. they're starting to use the GHC API
08:48:39 <shapr> Oh that would be great.
08:49:02 <shapr> Does GHC-SMP require an OS thread for each CPU?
08:49:13 <JaffaCake> yup
08:49:32 <shapr> Do you think it will handle several hundred cpus?
08:49:40 <jlouis> several hundred?
08:49:57 <jlouis> If the implementation is naive, which I think it is: no.
08:50:11 <jlouis> oy JaffaCake, shapr by the way
08:50:16 <JaffaCake> several hundred CPUs + shared memory isn't a great idea, I think
08:50:19 <dcoutts> so is it a comfigurable RTS option? how many cpus to use (with default = # of cpus in the machine)
08:50:32 <shapr> I'm wondering if GHC on Cell would be a good direction to go.
08:50:42 <JaffaCake> yes, +RTS -N2 for 2 cpus, for example
08:50:49 <dcoutts> JaffaCake, right
08:50:51 <jlouis> shapr: the cell is not that suited for this
08:51:06 <jlouis> they assume uniform CPUs at the time being
08:51:12 <JaffaCake> shapr: cell is difficult, you'd need a code generator for cell, and those things only have very small memories too
08:51:30 <shapr> Right, 256k local cache&ram.
08:51:32 <dcoutts> shapr, I've wondered that before, they've got this idea of local memory, basically explicit cache operations
08:51:32 <JaffaCake> you need an RTS on each cell, and currently the RTS doesn't fit in 256k
08:51:46 <JaffaCake> even if we could compile it for cell, which we can't
08:52:06 <jlouis> on the other hand, building a little FPU-language and scheduling this on each CPU is a viable option in Haskell
08:52:08 <shapr> Oh, I was thinking this would be perfect for Chak's Parallel Arrays code.
08:52:23 <jlouis> on each FPU even
08:52:30 <shapr> Oh, that's a good idea.
08:52:36 <JaffaCake> jlouis: sure, that's more like it
08:52:45 <shapr> Run the RTS on the strawboss cpu, and schedule the sidekick CPUs.
08:52:52 <jlouis> exactly
08:52:56 <JaffaCake> yes
08:53:11 <JaffaCake> GHC will run nice on the Xbox 360, though :)
08:53:13 <jlouis> but it is not fun because the programmer ends up doing work
08:53:25 <jlouis> which we ultimately try to prevent
08:53:27 <bringert> shapr: cool. any suggestions for changes?
08:53:37 <shapr> Not so much work, you can fold the details into something like data parallelism.
08:53:49 <jlouis> on the other hand. If we leverage the programmer of work we succed. DO NOT SUCCEED at all costs!
08:53:50 <bringert> shapr: I'm working on a concurrent FastCGI module now
08:53:52 <shapr> bringert: add zope support? ;-)
08:54:12 <bringert> heh
08:54:14 <andersca> hey bringert
08:54:30 <jlouis> shapr: you experienced in zope?
08:54:30 <bringert> hej andersca
08:54:37 <shapr> jlouis: yes, why?
08:54:39 <andersca> bringert: öl nån dag!
08:54:47 <bringert> andersca: jajamen
08:55:07 <shapr> As I put it recently, "Cthulhu is living in my Zope instance and ate my sanity."
08:55:12 <JaffaCake> random thought: anyone considered modifying WASH to do ajax-type stuff?
08:55:25 <shapr> WASH is hard to modify, it's very form-centric.
08:55:47 <jlouis> shapr: I am having a hard time finding good documentation on how to hack products on top of zope/plone. As it stands now, I have to read 3-4 documents, one for each layer to figure it out. Is this the only way?
08:55:54 <JaffaCake> right, well designing something new then
08:56:19 <jlouis> I am basically searching for ``the one'' document
08:56:44 <shapr> There's isn't just one document. Zope is huge.
08:56:55 <jlouis> that much I figured out ;)
08:57:18 <shapr> JaffaCake: I've had a bunch of thoughts on how to do really good web design with Haskell, but it just hasn't gelled yet.
08:57:38 <jlouis> step one is continuations ;)
08:57:41 <JaffaCake> ok, just wondering
08:57:43 <jlouis> for haskell+web
08:57:48 <bringert> JaffaCake: if you have any ideas, I'd love to hear them. nibro and I will supervise 8 students doing a project about infrastructure for web apps in haskell during next year
08:57:49 <shapr> Part of the problem is that my brain is infected with the humongous stateful view of Zope and J2EE, and Dominic Fox pointed out that there is likely a more 'pure' approach.
08:58:21 <shapr> The massive statfulness of Zope and J2EE is their greatest drawback, they're nearly impossible to combine with software testing.
08:58:22 <JaffaCake> I think we ought to be able to do better than these Ruby guys
08:58:25 <jlouis> shapr: exactly, continuations can hide most of the state
08:58:46 <jlouis> there are some scheme papers on it
08:58:51 <shapr> Personally, I think Oleg's Zipper as Tree of SubContinuations is the most profitable approach.
08:59:17 <JaffaCake> I gotta go, thanks guys... later
08:59:30 <shapr> That gives you a bunch of feature isomorphisms like transactions, shared state, all sorts of weird stuff.
08:59:32 <shapr> cya JaffaCake
08:59:52 <dcoutts> JaffaCake, btw, thank's for looking at the module/package problem again.
09:00:00 <jlouis> JaffaCake is Simon Marlow?
09:00:09 <shapr> yup
09:00:20 <xerox> JaffaCake, better than ruby on rails? It would be astonishing :-)
09:00:21 <shapr> and I'm the infamous Shae Erisson!
09:00:22 <xerox> Oh, gone.
09:00:30 * shapr throws lambdas
09:01:03 * jlouis watches the world gets pure around the infamous Shae Erisson
09:01:14 <dcoutts> shapr, I think it'd be more impressive if "shapr conjures lambdas from the very air"
09:01:16 <jlouis> I am the puny Jesper Louis Andersen
09:01:29 <jlouis> I code too little Haskell
09:01:36 <shapr> jlouis: Yeah, but you're part of the organizing committee for that dansk conference... um, about types?
09:01:42 <jlouis> nope
09:01:43 * shapr asks google for details
09:01:52 <jlouis> we have 2 Jesper Andersen at DIKU
09:02:04 <jlouis> I am not the one organizing that conference
09:02:05 <shapr> Oh, are you the organizer one?
09:02:08 <shapr> I see
09:02:17 <shapr> That must be confusing.
09:02:20 <jlouis> indeed
09:02:33 * shapr conjures a lambda from his very pocket!
09:02:42 <jlouis> And we are both interested in the same stuff, namely programming languages
09:02:56 <shapr> Well, you could author papers together.
09:03:07 <shapr> And then you'd never have to argue about whose name goes first.
09:03:14 <jlouis> hahah!
09:03:32 <Speck> I've finally decided to break the bank and buy a book on haskell. From what I've seen online "Introduction to Functional Programming" (2nd Ed.) is a good choice, but it's so expensive. Does anyone have a less expensive alternative?
09:04:10 <shapr> You could read Hal Daume's Yet Another Haskell Tutorial
09:04:21 <shapr> And then ask questions here on #haskell until you are a functional powerhouse.
09:04:28 <xerox> I'm suggesting "The Haskell Road to Logic, Math, and Programming".
09:04:30 <shapr> We can show you all the good tricks for lifting lambdas.
09:04:32 <Speck> I've read it. I need a good reference I think.
09:04:36 <shapr> Ah, I see
09:04:56 <xerox> OK, the book I was suggesting isn't usable as a reference, I think.
09:05:14 <Speck> well I need a good tutorial oriented book too
09:05:25 <jlouis> Haskell is such a dangerous language. You can almost always squash code and generalize it further. Until it cannot be read anymore
09:05:27 <Speck> price isn't that big an issue as long as it's complete
09:05:42 <Speck> I'm normally good with readability in other languages
09:06:03 <jlouis> Speck: I would go with Hal Daume's book which is online
09:06:08 <xerox> I think you could work it out with YAHT && the so-called ``Gentle Introduction''.
09:06:22 <jlouis> xerox: it _is_ a gentle introduction
09:06:27 <jlouis> I learned haskell from that alno
09:06:27 <Speck> I've read both those, and gentle introduction twice ;-)
09:06:33 <jlouis> alone
09:06:44 <xerox> Sub-genious!
09:06:44 <Speck> I've read SICP too
09:06:53 <xerox> Speck, _great_ book.
09:06:58 <Speck> yeah, really great
09:07:13 <jlouis> SICP doesn't impress me that much. I guess I knew too much when I was reading it
09:07:25 <Speck> I think my math isn't strong enough for haskell.
09:07:29 <xerox> Sub-geniousness.
09:07:29 <Speck> Or for FP.
09:07:37 <jlouis> ML for the working programmer is, however, a very good SML book
09:07:49 <xerox> Speck, nah.  I don't think it's crucial.
09:07:51 <jlouis> Speck: you just have to practice a lot
09:07:53 <Speck> I can't use ML, I end up writing imperative code.
09:08:05 <Speck> I need something that won't let me write imperatively.
09:08:16 <xerox> Think :-P
09:08:17 <jlouis> Speck: then don't read about monads ;)
09:08:20 <jlouis> or arrows ;)
09:08:59 <xerox> ...or wait for your program to do whan you want.. when _he_ wants :-P
09:10:09 <xerox> afk, bbl &
09:13:56 <shapr> Speck: I have zero math.
09:14:05 <shapr> I'm sure you can do better than that.
09:14:11 <shapr> But I can do lots of Haskell.
09:14:19 <Speck> I think I took the wrong calc class, because it was for engineers.
09:14:35 <Speck> Up until that class I loved math and was generally quite good at it.
09:14:41 <shapr> I took business calc once in 1992, that's the extent of my math education.
09:14:46 <Speck> Thanks for the vote of confidence :-)
09:15:09 <shapr> The challenging part of Haskell is about the mental patterns.
09:15:50 <shapr> Most of the combinators in the prelude are what I call 'traversal essences.' They encapsulate a basic pattern of programming, and you can apply them to your problem.
09:16:22 <shapr> Technically speaking, those combinators are particular flavors of catamorphisms, anamorphisms, hylomorphisms, etc
09:16:43 <Speck> Where can I find a good (read: complete) reference of prelude and the std libs?
09:16:57 <Speck> because I'd like to learn those combinators
09:17:08 <shapr> But realistically speaking, if you have a function that does something to one element, map is the combinator that does that thing to a list.
09:17:19 <shapr> I'd read the Prelude if I were you.
09:17:26 <Speck> The source?
09:17:26 <shapr> There is a Tour of the Prelude webpage.
09:17:32 <shapr> Yeah, the Prelude is actually quite small.
09:17:43 <Speck> Hm.. interesting
09:17:48 <shapr> std libs are larger, but still pretty small. Haskell packs a lot of usefulness into a very small space.
09:18:02 <Speck> okay I'll continue to poke around
09:18:06 <Speck> maybe not so much at work though ;-)
09:18:21 <shapr> My first month or so on #haskell I asked an experienced Haskeller to read ten pages of Haskell source code.
09:18:38 <shapr> I was still thinking that Haskell had the 'code density' of Python.
09:18:54 <jlouis> http://www.haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html -- is also good to remember ;)
09:19:22 <xerox> @docs Prelude
09:19:23 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html
09:19:26 <xerox> @libsrc Prelude
09:19:26 <lambdabot> http://darcs.complete.org/fptools/libraries/base/Prelude.hs
09:19:34 <Speck> that does look good
09:19:40 <shapr> I can read ten pages of Python in fifteen munites, the experienced Haskeller said ten pages of Haskell would take hours. :-)
09:19:42 <xerox> When you do want to know about something you could do:
09:19:49 <xerox> @index mapAccumR
09:19:50 <lambdabot> Data.List
09:20:07 <xerox> And then @docs Data.List (and @libsrc Data.List, if needed).
09:20:10 <shapr> @google tour of prelude
09:20:12 <lambdabot> http://www.cs.uu.nl/~afie/haskell/tourofprelude.html
09:20:15 <jlouis> lambdabot is written in Haskell by the way ;)
09:20:26 <xerox> @botsnack!
09:20:26 <Speck> yeah I read about lambdabot somewhere
09:20:27 <lambdabot> :)
09:20:31 <shapr> Oh, where?
09:21:07 <Speck> I forget by now. I've been all over haskell.org and anywhere it points to
09:21:25 <shapr> Oh cool, any suggestions for improvement for the website, the wiki, or etc?
09:21:44 <Speck> not at the moment, but if I think of any I'll get back to you
09:22:01 <shapr> Thanks, I'd appreciate it. I'm always want to know ways to improve.
09:22:20 <shapr> I'm responsible for the HaWiki, and The Monad.Reader. Probably some other stuff too.
09:22:56 <reffie> so my mom had her palm pilot run over by a car.
09:23:07 <shapr> Did the car survive?
09:23:51 <reffie> hehe
09:24:13 <Speck> perhaps a search function for the web site
09:24:32 <shapr> If anyone here is even slightly clueful about arrows, I'd like to hear comments on my ArrowsIntroduction - http://www.haskell.org/tmrwiki/ArrowsIntroduction
09:24:37 <shapr> Speck: oh, good idea.
09:24:55 <Speck> I read the Monad.Readers! They can be quite fun, but often too difficult for me.
09:25:02 <shapr> I'm glad you enjoy them!
09:25:17 <jlouis> shapr: on teh TODO for reading ;)
09:25:29 <shapr> The authors have done a lot of work and turned out great stuff.
09:25:48 <shapr> Many of the authors are here on #haskell.
09:26:00 <jlouis> when exams are over I must finish that article to TMR
09:26:00 <jlouis> grrr
09:26:06 <jlouis> I never have time
09:26:10 <shapr> TheHunter: Hey, did I send you an email about a continuations article?
09:26:30 <Speck> Yeah, the only thing that was a little rough around the edges was grammar, but it seems that most people writing about and developing in haskell aren't native english speakers, so considering that it's fantastic
09:26:36 * boegel will try and finish his article too when he's finished with exams
09:27:48 <shapr> Yeah, the written language may not always be up to the quality of for-pay academic journals, but the programming language information always is up there.
09:28:23 <shapr> That's the goal, to make the information available to people who can't afford to subscribe to a bunch of expensive journals.
09:29:35 <shapr> Since I'm self-employed, I'm also part of the target audience.
09:29:47 <Speck> it would be neat if someone took a dependency graph of the prelude functions and started a tutorial with the functions that most other functions depend on (foldr seeming to be one)
09:30:09 <shapr> Hm, good idea. Want to write that up for the next issue of The Monad.Reader? ;-)
09:30:19 <shapr> You've still got fifteen days.
09:30:21 <Speck> yeah, there is a haskell parser in haskell :-)
09:30:39 <xerox> EDSL :-)
09:31:04 <Speck> I'll see if I can write something after I get off work
09:31:11 <shapr> Spiffy!
09:31:13 <ski_> (shapr : one could perhaps say that one thing Swierstra's & Duponcheel's parsers do is to make some breadth-first-search, and not just depth-first-search ..)
09:31:37 <shapr> ski_: Oh good point! That's an elegant description of the pattern.
09:32:30 <ski_> instead of searching down one path/branch fully, we try to look a little at the other branches/paths, to see if they would fail immediately or not ..
09:32:43 <shapr> Right, mind if I steal that directly?
09:32:59 <ski_> np
09:33:22 <shapr> cool, thanks
09:35:33 <ski_> shapr : "Monads are (a -> m b)" this sounds a little weird. hmm. maybe "Monadic actions are built predominately with (>>=) :: m a -> (a -> m b) -> m b. and the second argument of this is a functions, so the only thing we can do with that is apply it and see what we get ..." maybe something similar to this .. ?
09:35:42 <Speck> What does it mean in the tour of prelude when something is "defined internally"? Does that mean it's defined within the compiler? It should still be in haskell, though, since ghc is written in haskell...
09:37:29 <xerox> I think you should keep concentrating on "a -> m b" vs "b ~> c", tough, it is illuminating.
09:37:59 <shapr> hiya conal, have you left Russia? ;-)
09:38:12 <ski_> Speck : it means the def is not given in the source code in the prelude, but buildt into the compiler. that could possibly mean that it's written in haskell in the compiler, but it more probably the case that it is defined externally, e.g. by calling a corresponding C function ..
09:38:29 <shapr> ski_: Yes, definitely, that's an excellent.
09:38:45 <Speck> oh, you can call C from haskell?
09:39:02 <conal> shapr, :)  i think i've found my way  home.
09:39:08 <Speck> couldn't that break referential transparency?
09:39:38 <xerox> Speck, yep, the FFI gives you ... -> IO ... functions in most of the cases.
09:39:42 <shapr> Speck: Yes, it can, but you can declare the (un)safety of wrapped functions.
09:39:45 <ski_> shapr : i don't know about others, but i read generic arrow types easier if written like "ar a b" rather than "a b c" ("a ~> b" would also be good, i guess)
09:39:54 <Speck> ah, so it's wrapped in a monad?
09:40:21 <shapr> ski_: yeah, that's another good point.
09:40:25 <conal> ski_, i'm with you.  i really like the infix best.
09:40:37 <conal> in 6.4.1 i think
09:40:39 <xerox> We worship GHC for giving it to us :)
09:41:34 <conal> what have you folks been doing with arrows?
09:41:39 <conal> (i've been playing with them)
09:41:47 <ski_> Speck : for compiler-built-in functions, the compiler could just guarantee (read 'promise') that the C function it implements some standard function with is referentially transparent. if you call C yourself, you'll mostly get "... -> .. -> IO .." types, though
09:42:15 <ski_> shapr : sure, if the infix works now, then use that :)
09:45:27 <xerox> You need GHC 6.5 to actually use it, tough
09:46:12 <conal> oh yes.  was supposed to be in 6.4.1, but didn't seem to make it.  it works for me in 6.5 (HEAD).
09:52:32 <Speck> foldr seems to be a lot like ruby's Ennumerable::inject
09:57:14 <shapr> conal: check out my intro: http://www.haskell.org/tmrwiki/ArrowsIntroduction I'd appreciate any comments.
10:10:59 <shapr> conal: Any suggestions for improving the arrows intro?
10:11:18 <shapr> I haven't found many people who understand arrows enough to comment.
10:11:22 <TFK> howdy shapr
10:11:54 <shapr> hiya TFK
10:11:59 <Speck> more parser examples!
10:12:29 <TFK> I see you've been doing some self-promotion there, eh?
10:12:31 <TFK> ;-)
10:13:14 <shapr> Well, it used to say "shapr is okay" because I was gone and lots of people got worried. But I'm far better than just 'okay' so I changed it to "Shapr is awesome"  :-)
10:14:28 <TFK> You should get one of those red phones with only one button, for emergencies ;-)
10:14:44 <shapr> Would it dial the Ghostbusters?
10:15:10 <TFK> Do the Ghostbusters know Haskell?
10:15:21 <shapr> Probably not.
10:15:28 <Speck> Egon might.
10:15:33 <shapr> He was the smart guy.
10:17:49 <shapr> Speck: more parser examples? really?
10:18:05 <Speck> using parrow!
10:18:19 <shapr> Oh, I'll do that.
10:18:54 <Speck> question: I see that max and maximum are different functions, but if they were both named max, couldn't the compiler figure out which one to use?
10:22:25 <TheHunter> shapr, (re continations) nope.
10:22:57 <TheHunter> i don't think i have the time to write anything up right now.
10:23:37 <shapr> ok, no worries.
10:23:44 <TheHunter> re ArrowIntroduction: "They are roughly comparable to monads with a static component." Static arrows seem more like a special case to me.
10:24:08 <TheHunter> and I don't buy the blockio thing.
10:24:38 <ski_> Speck : that would be "ad-hoc overloading". haskell has "type-class overloading", sometimes called (i think) "parametric overloading"
10:25:15 <ski_> Speck : there are problems mixing ad-hoc overloading with type-inference (especially if curried functions is used much)
10:25:25 <Speck> hmm
10:26:25 <Speck> because if you curry, the intermediate function's type signature could be the same as another functions?
10:26:29 <ski_> Speck : with parametric/typeclass overloading, the types of the different overloaded functions (or other values) must share a common "form"
10:26:32 <TheHunter> max [1,2] [3,4] would already ambiguous
10:27:10 <xerox> @type max
10:27:11 <lambdabot> max :: forall a. (Ord a) => a -> a -> a
10:27:13 <TheHunter> *be
10:27:31 <ski_> @type maximum
10:27:33 <lambdabot> maximum :: forall a. (Ord a) => [a] -> a
10:28:23 <Speck> lists have ord?
10:28:36 <TheHunter> @plugs [1,3] < [0,4]
10:28:42 <lambdabot> False
10:28:51 <ski_> Speck : yes, if the element type of the list has Ord
10:29:03 <ski_> Speck : instance Ord a => Ord [a] where ...
10:29:17 <xerox> @index (<)
10:29:18 <lambdabot> bzzt
10:29:55 <TheHunter> @index <
10:29:57 <lambdabot> Prelude
10:31:31 <xerox> mmh there's not the place to find that instance
10:31:59 <TheHunter> @libsrc GHC.Ord
10:32:01 <lambdabot> GHC.Ord not available
10:32:09 <ski_> Speck : with ad-hoc overloading, one often overloads completely different things over the same name. with parametric/typeclass it is intended that the different things "behave the same" at some level. like (+) :: Int -> Int -> Int, (+) :: Complex Int -> Complex Int -> Complex Int are both e.g. intended to be commutative
10:32:39 <TheHunter> @libsrc GHC.Base
10:32:40 <lambdabot> GHC.Base not available
10:32:46 <TheHunter> oh, come on.
10:32:57 <TheHunter> @libsrc Prelude
10:32:58 <lambdabot> http://darcs.complete.org/fptools/libraries/base/Prelude.hs
10:33:37 <TheHunter> http://darcs.complete.org/fptools/libraries/base/GHC/Base.lhs
10:34:46 <xerox> ah-ha!  Thanks
10:38:22 * Speck gets back to doing real work (read: visual basic scripting)
10:38:44 <Speck> please, do feel free to internet-shoot me
10:39:11 * shapr shoots Speck 
10:40:21 <TFK> Iron balls that bring hate and misery :-/
10:44:21 <shapr> Oh hey, the new rim for my unicycle arrived today!
10:45:59 <shapr> dcoutts_: Hey, I got my Large Marge 26" by 65mm rim! I already have the frame, now I only need the hub and I can start building Secret Joy.
10:47:29 <shapr> hej andersca
10:47:41 <andersca> hej
10:47:57 <shapr> wazzup?
10:48:03 <shapr> Written any Haskell code lately?
10:51:07 <andersca> no
10:51:10 <andersca> I'm writing C++ right now
10:51:25 <andersca> shapr: are you coming to europython?
10:51:34 <shapr> No, I'm staying home.
10:51:48 <shapr> I'm going to ride my unicycle and be antisocial.
10:51:58 <shapr> I think it'll be fun.
10:55:20 <SyntaxNinja> yay unicycle
10:55:51 <shapr> w00
10:56:38 <_JusSx__> who is using FreeBSD?
10:56:43 * TFK is yet to master a bicycle :-/
11:00:49 <jlouis> try juggling ;)
11:01:05 <jlouis> _JusSx_: NetBSD here, OpenBSD at dons
11:01:47 <michaelw> TFK: wrong climate for (serious) bicycling :)
11:01:53 <_JusSx_> and FreeBSD?
11:02:15 <jlouis> _JusSx_: I dunno. FreeBSD should be well supported. Why?
11:02:23 <TFK> If my cat with his coat of fur can handle it, so can I!
11:02:28 <_JusSx_> thanx
11:04:48 <michaelw> TFK: well, i was melting in TA even while walking, YMMV
11:04:59 <TFK> YMMV?
11:05:11 <michaelw> you mileage may vary
11:05:16 <shapr> @wtf ymmv
11:05:18 <lambdabot> No match for "ymmv".
11:05:34 <TFK> Good thing I live in Jerusalem then, eh?
11:05:55 <TFK> No flat surfaces - good for your health.
11:05:59 <jlouis> looks like a wtf bug
11:06:08 <jlouis> NetbSDs acronym db has it
11:06:13 <jlouis> will hunt
11:13:20 <shapr> @wtf wtf
11:13:22 <lambdabot> No match for "wtf".
11:15:42 <jlouis> maybe it cannot find the acronyms
11:15:47 <jlouis> looks like it
11:16:20 <jlouis> ; /usr/games/wtf wtf ymmv
11:16:20 <jlouis> WTF: {what,where,who,why} the fuck
11:16:20 <jlouis> YMMV: your mileage may vary
11:16:28 <jlouis> on a NetBSD though
11:33:49 <xerox> Debian (Ubuntu) has it
11:38:26 <Itkovian> evening
11:38:35 <shapr> hoi
11:38:46 <TFK> aloha
11:39:07 <xerox> tek ma'tek
11:39:16 <shapr> coi rodo
11:39:51 <xerox> ciao
11:39:57 <TFK> zdorovo
11:40:33 <TFK> @seen Oejet
11:40:34 <lambdabot> I saw Oejet leaving #haskell 21 hours, 45 minutes and 36 seconds ago.
11:40:38 <Itkovian> wow, hi shapr!
11:40:47 <shapr> hoi Itkovian!
11:40:50 <Itkovian> I've skimmed your tmr article. looking good so far
11:40:54 <shapr> Ah, thanks
11:55:57 * Itkovian caught up with the logs
11:57:38 * Itkovian is wondering how to describe a lexer for a floating ppoint number
11:58:22 <Itkovian> hmm, scrap that
11:58:32 * Itkovian wonders why he is talking rubbish
11:59:57 <nothingmuch> perhaps you have a moose yp your nose, and it's horns are interfering with the neurons?
12:00:44 <nothingmuch> they're called antlers, the horns, right?
12:04:43 * ski_ quarrels with Agda typesystem
12:22:22 <ndm> xerox, you had questions for me?
12:33:38 <thebug> @moo
12:33:39 <lambdabot>                 /\
12:33:39 <lambdabot>                /  \
12:33:39 <lambdabot>          (__)  \  /
12:33:39 <lambdabot>          (oo)   \/
12:33:39 <lambdabot>   /-------\/    /S
12:33:40 <lambdabot>  / |     ||    /  S
12:33:42 <lambdabot> *  ||----||___/    S
12:33:44 <lambdabot>    ^^    ^^
12:33:46 <lambdabot>  Ben Franklin owned
12:33:48 <lambdabot>     this cow
12:37:36 <shapr> yow!
12:37:44 <pipe> hey what's up shapr?
12:37:48 <kaol> @seen shapr
12:37:49 <lambdabot> shapr is in #haskell. Last spoke 12 seconds ago.
12:37:53 <shapr> scary
12:37:57 <shapr> y0 pipe
12:38:39 <shapr> Not so much, writing a nifty TMR article about arrows, getting ready for vacation.
12:40:36 <musasabi> @arr
12:40:37 <lambdabot> Drink up, me hearties
12:40:40 <shapr> @arr
12:40:41 <lambdabot> Eat maggoty hardtack, ye unkempt, jenny frequentin', son of a gun.
12:40:46 <shapr> @fortune
12:40:57 <shapr> @quote
12:41:01 <lambdabot> Everybody wants to go to heaven, but nobody wants to die.
12:41:01 <lambdabot> autrijus says: Mechanical and super-natty! Inspect the result and *
12:41:01 <lambdabot> if* happy; freeze, sell and get some sleep!
12:41:11 <shapr> @quote
12:41:11 <lambdabot> Alanna says: Saying that Java is nice because it works on all OS's
12:41:11 <lambdabot> is like saying that anal sex is nice because it works on all genders.
12:41:16 * musasabi got hardware working for a change at home now free and tired.
12:41:21 <shapr> yay!
12:41:30 <shapr> time for a sauna!
12:43:01 <musasabi> that would be nice :-)
12:51:15 <conal> shapr, still there? i read your arrow intro.
13:05:24 <pipe> man mosquitos sucks ass :|
13:06:44 <TFK> Oh, they suck much more than that :-/
13:07:14 <pipe> i hate them :(
13:07:26 <pipe> they are everywhere... i hate fucking desert :'(
13:08:05 <TFK> Well, you need some "standing" water to get them.
13:08:27 <TFK> Not sure if they dwell in the desert just becaues of the sand.
13:08:30 <TFK> *because
13:09:57 <pipe> well, i got this book finally by pierce
13:10:11 <SyntaxNinja> pipe: the brick book?
13:10:30 <pipe> yeah
13:10:51 <pipe> it's supposed to be good, right?
13:11:01 <pipe> i have only 2 days to read it though
13:13:29 <SyntaxNinja> let me jknow
13:14:46 <pipe> ok
13:19:17 * Lemmih yawns.
13:21:24 * shapr gawps
13:21:34 <shapr> conal: cool, what do you think?
13:22:03 <Lemmih> Hrm, yes. GHC-Prof-Options would probably be better.
13:22:04 <shapr> pipe: Only two days to read The Brick Book? Man, you better move fast.
13:23:33 <pipe> ok
13:24:05 <shapr> TaPL is packed full of goodies.
13:24:16 <pipe> cool
13:24:24 <shapr> You might want to grab the very first version of Pugs as well once you get to the good parts.
13:24:36 <pipe> ok
13:24:51 <pipe> pugs...
13:24:56 <pipe> isn't that the weird thing?
13:25:01 <shapr> The perl6 implementation?
13:25:05 <pipe> yeah
13:25:21 <shapr> Yeah, Pugs started out as an experiment to try doing the stuff in The Brick Book
13:25:38 <pipe> hm... interesting, not sure i understand but interesting
13:26:15 <shapr> Well, grab the book and go for it :-)
13:26:28 <pipe> alrighty then
13:28:20 <Speck> hate... visual basic
13:28:38 <shapr> Speck: Hey, that's where I started too, at least it pays money, and is more fun than digging ditches.
13:28:40 <Itkovian> we all do
13:28:50 <Speck> my work has about 10+15 non-programmers actively writing code, and they give it to me to test
13:29:05 * boegel is back
13:29:40 <Speck> every day I see little gems like this: if (sourceFile = "") error "File name is empty: " + sourceFile
13:29:51 <SyntaxNinja> what does split-objs do? what's it good for?
13:30:06 <Lemmih> Speck: Heh (:
13:30:17 <Speck> that one was from today
13:30:31 <boegel> Speck: it works doesn't it :p
13:30:40 <SyntaxNinja> Lemmih: you agree w/ ross about the option? I'm not sure... I don't see anyr eason why other compilers couldn't support it
13:30:45 <SyntaxNinja> I mean, maybe some day they will.
13:30:52 <SyntaxNinja> but I guess for now, it's OK to have it as a ghc option
13:30:54 <shapr> SyntaxNinja: I think it can cut a function out to be linked separately, rather than the entire module.
13:30:57 <Lemmih> SyntaxNinja: It allows you to only link with the parts you're actually using instead of the entire library.
13:31:04 <boegel> argh, people are mentioning compilers in here too *arg !*
13:31:35 <SyntaxNinja> it still produces a .a?
13:31:48 <SyntaxNinja> so when you link with a .a it usually includes all the code?
13:32:03 <SyntaxNinja> when you split objs, are you getting only the functions you need, or only the modules you need?
13:32:38 <Speck> I need a often-updated haskell blog to read during the day. any good ones?
13:32:53 <boegel> Speck: shapr's :)
13:32:54 <Speck> atm I'm grabbing anything I can of technorati
13:33:03 <Speck> link?
13:33:06 <SyntaxNinja> Speck: CosmicRay's blog
13:33:07 <Lemmih> SyntaxNinja: Having the same options as GHC is not an option for some compilers.
13:33:14 <boegel> *err, dunno actually :)
13:33:15 <Speck> links?
13:33:17 <SyntaxNinja> Lemmih: huh?
13:33:22 <boegel> scannedinavian.org/~shapr ?
13:33:26 <SyntaxNinja> @google shapr's blog
13:33:28 <lambdabot> http://www.scannedinavian.com/2004Dec.html
13:33:34 <boegel> almost :)
13:33:41 <SyntaxNinja> @google isaac's blog
13:33:42 <lambdabot> http://home.wangjianshuo.com/archives/20021210_isaacs_blog_speech.
13:33:42 <lambdabot> htm
13:33:44 <SyntaxNinja> darn
13:34:26 <Speck> hah scannedinavian is funny
13:34:32 <Lemmih> SyntaxNinja: In (say) JHC, -auto means -a -u -t -o.
13:35:09 <SyntaxNinja> Lemmih: well, the flag to the compliler isn't the same, but the flag to cabal should be the same.
13:35:12 <Speck> ooh.. and he blogs about parrow!
13:35:30 <Lemmih> SyntaxNinja: Oh, something like the extensions?
13:35:35 <SyntaxNinja> Lemmih: yeah
13:37:06 <SyntaxNinja> Lemmih: oh, I get it
13:37:10 <SyntaxNinja> nm
13:37:32 <Itkovian> shapr: can you make your rss feed a tad more elaborate
13:37:37 <shapr> Yeah, soon
13:37:41 <SyntaxNinja> yeah, it should be ghc-prof-options, I think, or become more like the extensions field, but that's probably overkill, unless the options are pretty generic.
13:37:53 <SyntaxNinja> Itkovian: I've been harassing him abut that for ages
13:37:53 <boegel> Itkovian: how's the parser going ?
13:37:54 <Speck> The Haskell Sequence looks good, but it isn't updated enough :-(
13:38:07 <SyntaxNinja> yeah, people should be posting there
13:38:10 <Itkovian> boegel: pretty good, I think
13:38:45 <Speck> I can start my own blog on sequence, right? it's like a /. or a k5?
13:39:11 <shapr> yup
13:39:44 <Speck> I wanted to start documenting my education in haskell... that looks like a good enough place
13:40:32 <boegel> Itkovian: found the bug ? and removed the shift/reduce conflicts ?
13:45:24 <basti_> hi all
13:45:28 <shapr> 0y
13:45:38 <basti_> y0w!
13:45:40 <basti_> back from flm larval stage?
13:45:55 <boegel> hehe
13:47:18 <Speck> shapr, what kind of audience do you invision for haskell.org? do you want it to appeal to programmers or managers?
13:47:33 <boegel> Speck: everyone who's willing to learn :)
13:47:50 <basti_> knowledge is uncommercial
13:47:51 <shapr> Speck: Yeah, learning people, but primarily programmers.
13:48:05 <basti_> one could say, knowledge and commerce are mutually exclusive in a way
13:49:53 <Speck> what do you think about making it kind of portal-oriented, e.g., aggregating blogs relating to haskell
13:52:00 <Speck> I do a lot of web stuff, and I'm very handy (X)HTML, JS, CSS and such. I'd like to help out however I can.
13:52:56 <Itkovian> boegel: nah, the conflicts remain, and are due to the rules being a set of characters and the parser not knowing wether to shift or reduce, as chars are everywhere :-)
13:53:10 <basti_> i'd be very interested in getting a grip in the haskell@web ( :P ) world
13:53:21 <boegel> Itkovian: is it working already ? :)
13:53:47 <basti_> hey shapr did you get the latest patch for yi-emacs?
13:54:22 <Itkovian> well, working is a big word, I was about to test when Elias woke up and needed to be washed, fed, and put to bed.
13:55:09 <boegel> heh, nice timing :)
13:56:53 * boegel thinks he's ready for his exam tomorrow
13:57:17 <Itkovian> i hope you are
13:57:25 <Itkovian> i want to see you sitting on that ball :-)
13:57:32 <boegel> Itkovian: heh :)
13:58:22 <boegel> Itkovian: I don't think getting there will be a problem, if I don't pass for this exam very weird questions would have to be asked
13:58:31 <boegel> I've been studying on it all damn week
13:58:33 <basti_> life writes the stranges stories: romanian priest & 4 nuns bind another nun to a cross to do exercise her, who later dies
13:58:44 <basti_> exorcise
13:58:44 <Itkovian> this _is_ d'Hollander we're talking about, eh.
13:58:45 <basti_> lol
13:58:55 <Itkovian> Have you ever heard him ask questions at a phd defense?
13:59:00 <boegel> Itkovian: yeah, make me scared :p
13:59:03 <Itkovian> don't doil yr pants
13:59:08 <boegel> Itkovian: no, is he that bad ? :)
13:59:17 <Itkovian> well, mostly off-topic ;-)
13:59:28 <Itkovian> which is amusing for the audience, but annoying for the candidate
13:59:37 <boegel> hehe
13:59:49 <boegel> as in "where were you last night at 2am ?" :)
13:59:51 <SyntaxNinja> bearing ones cross is great exercise
14:00:32 * boegel formats his memory stick for taking loads of pictures tomorrow
14:01:15 <boegel> Itkovian: you should listen to Stubru right now: "Whiplash" is on
14:01:37 <Itkovian> hmm, no can do
14:01:48 <boegel> not even with headphones ?
14:01:51 <boegel> it rules
14:01:56 <boegel> headbanging ! yeah :p
14:02:34 <Itkovian> I am still recalling Admiral Freebee and Alain and Sammy :-)
14:02:47 <boegel> hehe
14:05:35 <boegel> hmm, what should I to do to relax a bit
14:06:43 <basti_> arrgghh that auslautverhärtung bug in my typing brain is getting worse and wors
14:07:35 * boegel decides to read a bit more in The Hitch Hikers Guide to the Galaxy
14:07:42 <basti_> do that, thats a wise idea.
14:07:47 <basti_> don't forget your towel-
14:08:08 <Itkovian> yeah
14:08:29 <boegel> yeah, what's up with that :) I know the guy took a towel with him, but they haven't explained why
14:08:46 <boegel> the poetry stuff is pretty neat though :) and off course the Babel Fish
14:08:49 <boegel> great book
14:08:56 <basti_> extremely great book
14:08:58 <TFK> Howdy Hikaru79
14:09:03 <Hikaru79> Heya, TFK :)
14:09:42 <basti_> well for example if you encounter the big babbling beetle of traal (is that its english name?) you can put the towel over your head. it's so stupid it won't notice you, then.
14:09:58 <TFK> http://haskell.org/hawiki/HaskellGoPeople <--- speaking of Go...
14:10:04 <Itkovian> grr ... I have an Int, but it needs to become a Float, so I thought of using fromInteger ... but that expects an Int ...
14:10:07 <Itkovian> erm Integer
14:10:15 <Itkovian> @type fromInteger
14:10:21 <lambdabot> fromInteger :: forall a. (Num a) => Integer -> a
14:10:25 <integral> basti_: "bug blatter beast of traal"?
14:10:41 <Itkovian> shut yr eyes
14:10:46 <basti_> integral: probably
14:10:59 <Itkovian> the beast reckons that if you can't see it, it can't see you
14:11:12 <Itkovian> you might also wear your erm - glasses, I forget the name
14:11:20 <Itkovian> ok
14:11:26 <Itkovian> @type fromIntegral
14:11:27 <lambdabot> fromIntegral :: forall b a. (Num b, Integral a) => a -> b
14:11:30 <Itkovian> thx
14:15:53 <Speck> Leaving work. Later all.
14:15:55 <basti_> @type arr
14:15:57 <lambdabot> bzzt
14:16:04 <basti_> @type Control.Arrow.arr
14:16:05 <lambdabot> Control.Arrow.arr :: forall (a :: * -> * -> *) c b.
14:16:05 <lambdabot>        (Control.Arrow.Arrow a) =>
14:16:05 <lambdabot>        (b -> c) -> a b c
14:17:53 <basti_> @type Control.Arrow.first
14:17:55 <lambdabot> Control.Arrow.first :: forall (a :: * -> * -> *) d c b.
14:17:55 <lambdabot>         (Control.Arrow.Arrow a) =>
14:17:55 <lambdabot>         a b c -> a (b, d) (c, d)
14:27:02 <boegel> "Ford, you're changing into a pinguin. Stop it."
14:27:11 <boegel> whahahahaha ! genious !
14:27:24 <basti_> -g-
14:27:41 * boegel thinks he'll read all the books by D. Adams, he's great !
14:27:56 <boegel> but I suspect he was high on something when he wrote this :D
14:31:59 <Itkovian> boegel: did you read the foreword?
14:32:03 <Itkovian> that says enough
14:32:20 <basti_> btw, I need to trip.
14:33:02 <boegel> Itkovian: I did
14:33:14 <Itkovian> :-)
14:33:16 <boegel> I just saw the movie trailer, that's a must see :)
14:33:27 <Itkovian> yes, the trailer is quite impressive
14:33:33 <Itkovian>  'that does absolutely nothing for me'
14:33:35 <boegel> Itkovian: have you seen the movie ?
14:33:47 <boegel> "lot's of physical voilence"
14:33:48 <boegel> hehe
14:33:49 <Itkovian> 'so that the audience might plan the next few months of their lives accordingly' ;-)
14:33:53 <Itkovian> nope, not yet
14:33:56 <boegel> yeah :)
14:33:59 <Itkovian> plan on renting it one day
14:34:10 <boegel> is it showing in theatres ?
14:34:12 <Itkovian> I heard it waas very disney... :-(
14:34:19 <Itkovian> brb
14:34:21 <boegel> it is ? :s
14:34:23 <basti_> it is in germany, but i haven't seen it yet
14:34:26 <basti_> my gf wants too
14:34:34 <basti_> haven't heard much good about it though
14:34:39 <boegel> I'll show my gf the trailer, I hope she'll want to see it too
14:35:03 <pipe> which movie?
14:35:07 <boegel> oh, we'll, it's quite impossible to put the book on screen
14:35:08 <basti_> pipe!
14:35:10 <boegel> pipe: y0w !
14:35:15 <pipe> indeed
14:35:16 <basti_> pipe: hitchhikers guide to the galaxy
14:35:23 <pipe> ah, it was a good movie
14:35:26 <boegel> pipe: check the HRay website
14:35:30 <basti_> it's always, but sometimes people fuck it up
14:35:43 <pipe> boegel: ok...
14:36:31 <boegel> heh, it's released 17 Aug in Belgium
14:36:34 <boegel> loads of time :)
14:36:42 <boegel> I'll read the book first :)
14:36:43 <pipe> boegel: what's the link again?
14:36:56 <boegel> pipe: http://scannedinavian.org/~boegel -> clickety click
14:36:56 <pipe> that's strange, i thought it was released worldwide
14:37:29 <boegel> pipe: jyp helped me with providing metaball support, and also added quadric support, but I haven't been able to test that yet
14:37:39 <basti_> does anyone know where i can download the sourcecode of "the yampa arcade"?
14:38:48 <pipe> whoah, metaballs cool
14:39:05 <Itkovian> bach
14:39:16 <basti_> "blobs"?
14:39:25 <Itkovian> heh
14:39:26 <basti_> Itkovian: gödel escher
14:39:41 <Itkovian> erm, no schwrzenegger
14:39:51 <boegel> basti_: no, ball which merge if you put them close enough together
14:39:59 <boegel> s/ball/balls
14:40:12 <basti_> "blobs"
14:40:21 <basti_> ive just googled for pictures
14:40:26 <basti_> other people call that blobs, afaik
14:40:37 <basti_> http://www.geisswerks.com/ryan/BLOBS/blobs.html
14:41:23 <Itkovian> heh, so I was right after all ;-)
14:41:34 <boegel> oh, okay then :)
14:44:22 <boegel> basti_: thanks for that links
14:44:32 <boegel> there are some pretty neat images on there
14:44:44 <Itkovian> a.out: Parse error ! ! !
14:44:45 <Itkovian> grr
14:44:50 <boegel> Itkovian: heh
14:44:56 <boegel> that's the problem with Happy
14:45:06 <Itkovian> Maybe I should use Parsec no?
14:45:10 <boegel> it's hard to produce nice error output
14:45:17 <boegel> Itkovian: it should work fine with Happy
14:45:42 <boegel> but sometimes you have to check if you need spaces or so
14:45:49 <boegel> yo jyp !!1!1!!!
14:45:52 <boegel> me hero :)
14:45:57 <jyp> hey boegel
14:46:03 * jyp blushes
14:46:11 <basti_> boegel:  :)
14:46:16 <jyp> ... and hey folks
14:46:29 <boegel> jyp: have you seen this link -> http://www.geisswerks.com/ryan/BLOBS/blobs.html
14:46:41 <jyp> checking
14:47:21 <jyp> no, never seen it before
14:47:44 <boegel> jyp: where did you get the necessary info to implement metaball support ?
14:48:11 <jyp> i figured it out in my wormy little brain
14:48:13 <jyp> :)
14:48:29 <boegel> jyp: you figured it out yourself ? neat
14:48:31 <basti_> better wormy than emtpy
14:49:13 <jyp> back when I was at the uni it was _the_ effect to implement
14:49:53 <jyp> and since I had some free time...
14:50:04 <boegel> jyp: well, the results are cool
14:50:23 <boegel> I'm sure I can produce some nifty images when using transparency and Perlin noise textures
14:51:00 <jyp> yah... well for transparency it needs some hacking to return the other intersections
14:51:21 <jyp> Also, I'm not using the "optimisation" suggested
14:51:30 <jyp> ... We replace the equation 1/r^2 with the equation [g(r) = r^4 - r^2 + 0.25].
14:52:13 <jyp> I tried polynomial approximations but it was sort of ugly when doing animations with it
14:52:47 <jyp> ... when two balls split, you didn't get the proper watery shape
14:52:47 <boegel> jyp: oh, I see
14:52:56 <boegel> but that shouldn't be too hard, right ?
14:53:27 * boegel hasn't tried animations, but thinks it would be cool to do so
14:53:37 <boegel> rendering would take quite a while though
14:53:50 <wagle> @yow
14:53:51 <jyp> indeed
14:53:52 <lambdabot> Barbie says, Take quaaludes in gin and go to a disco right away!
14:53:52 <lambdabot> But Ken says, WOO-WOO!!  No credit at "Mr. Liquor"!!
14:54:49 <jyp> besides, the bounding sphere thing can be done just as fine with my approach...
14:56:08 <jyp> as a matter of fact, it's done in the code I submitted to you
14:57:25 * boegel should read up the whole doc to understand the difference between metaballs and bounding spheres, but doesn't have the tim
14:57:27 <boegel> +e
14:57:43 <basti_> a bounding sphere is something completely different afiak
14:58:04 <basti_> a bounding sphere is not visible, but tells the tracer where to look for the objects that are bounded by it
14:58:16 <boegel> oh yeah right
14:58:24 <basti_> instead of checking 20000 surfaces, it checks the sphere first and then 20k objects only when the sphere was a hit
14:58:25 <boegel> bounding objects, I forgot about them
14:58:41 <jyp> btw, if you want a long term goal, have a look here ...
14:58:45 <jyp> http://graphics.ucsd.edu/~henrik/images/
14:59:00 <basti_> -g-
14:59:03 <boegel> heh
14:59:26 <jyp> the "participating media" stuff blows my head off :)
15:00:18 <boegel> the smoke effect is great !
15:00:29 <jyp> and the other stuff is also incredibly neat
15:00:43 <jyp> yup
15:01:05 <boegel> damn, I'm jealous :)
15:01:58 <jyp> Henrik Wann Jensen... sure knows his stuff
15:02:25 <boegel> yeah,he does
15:02:28 <jyp> he just doesn't do rendering effect, he makes it look _real_
15:02:49 <boegel> it mindblowing real
15:03:15 * boegel thinks he had done a great job with his perlin noise textures, but that's nothing compared to this stuff
15:04:37 <jyp> he's been working on it for quite some time, so don't give up :)
15:05:01 <boegel> I'll try :p
15:05:49 <autrijus> aix
15:05:55 <jyp> btw, ain't your exam starting soon ?
15:06:06 <autrijus> ww. sorry
15:06:43 <boegel> jyp: it's midnight here now, my exam is at 14h
15:07:03 <jyp> plenty of time then :p
15:07:33 <boegel> the animation stuff is fantastic :) that smoke, omg :)
15:08:43 <jyp> heh ...
15:09:10 <jyp> And people wonder why I say pixar movies are shit ... ;)
15:11:31 <boegel> man, I'd _love_ to work with those guys :)
15:12:56 <jyp> heh :)
15:13:20 <jyp> well, I'm afraid sleep time is due here ...
15:13:34 <boegel> hmm, here too
15:13:39 <jyp> good night folks, and keep up the good work =)
15:13:44 <wagle> 3pm!
15:13:47 <boegel> jyp: thanks for that link
15:14:03 <boegel> wagle: no it's not, you're clock is all wrong
15:14:11 <jyp> you're welcome :p
15:14:13 <wagle> lol
15:14:14 <jyp> bye
15:14:41 * boegel leaves too
15:14:44 <wagle> where's the great smoke effect?  i'm not finding the ref in the scroll back
15:14:52 <boegel> a good nights rest before an exam is important
15:14:54 <Itkovian> good luck tomorrow boegel
15:15:26 <boegel> wagle: http://graphics.ucsd.edu/~henrik/animations/ -> visual simulation of smoke
15:15:30 <boegel> Itkovian: thanks :)
15:15:39 <wagle> thanks..  g'night
15:15:53 <boegel> you guys won't see me again until Saturday, 'cause tomorrow night it's big party :)
15:16:15 <boegel> I'm running 100km
15:16:33 <boegel> well no, actually other people are and I'm just looking :)
15:16:41 <boegel> g'night ! ;)
16:24:00 * shapr conjures lambdas from the very air!
16:24:39 <Heffalump> don't suppose you know anything about using cabal on hsc2hs stuff?
16:24:41 <shapr> So these three strings went out to a bar to buy drinks...
16:24:50 <shapr> not me
16:24:59 <shapr> y0 Speck, home from work?
16:25:07 <Speck> Yup :-)
16:25:23 <shapr> Another day, another chunk of visual basic.
16:25:28 <Speck> Blugh.
16:25:47 <shapr> I do whine about doing Python for a living, but I don't whine loud enough to switch back to doing Java, VB, or those other things I've done before.
16:26:04 <Speck> at least you have list comprehensions
16:26:10 <shapr> Yeah, true.
16:26:20 <Speck> python is actually pretty nice
16:26:26 <shapr> Though writing nested list comprehensions tends to explode the brains of the unprepared.
16:26:38 <Speck> heh
16:27:33 <shapr> How far have you gotten into Haskell?
16:27:39 <Speck> I'm reading through the parrow sources at the moment
16:27:51 <shapr> Ah, speaking of exploding brains...
16:27:53 <Speck> the stuff in prelude.hs is making sense
16:28:18 <shapr> Yeah, the Prelude is straightforward.
16:28:38 <Speck> I can read haskell, but I can't write.
16:28:38 <shapr> Monads are a small speedbump, but only require a minor readjustment of your brain in its socket.
16:29:22 <shapr> Best way to get better at writing Haskell is to try it, and ask questions here when you run into problems.
16:29:46 <shapr> I had some major transmission grinding when trying to switch mental gears from procedural to functional the first time, but it was worth it.
16:30:33 <shapr> batdog: Are you related to Derek Elkins?
16:31:08 <shapr> Speck: I'd suggest starting with something simple that you understand well. I started with a Mandelbrot text grapher.
16:32:09 <Speck> I'm primarily interested in parsers
16:32:15 <Speck> at least at the moment
16:32:30 <Speck> and I think that parsec and parrow are neat
16:32:41 <shapr> Good choice, that's the most accessible seriously sexy part of Haskell.
16:32:44 <Speck> csetValue CS_Whitespace = " \t"    <-- should this include some others?
16:33:13 <shapr> Seems like it should, but I can't think of any other chars...
16:33:19 <Speck> \n \r
16:34:00 <shapr> Ah, that might be useful.
16:34:05 <shapr> Quick, file a patch!
16:34:33 <shapr> Have you used darcs before?
16:34:36 <Speck> nope
16:34:54 <shapr> It's way easy, I wrote the first version of the darcs tutorial in a single line.
16:35:12 <shapr> That is, the GettingStarted page on DarcsWiki
16:35:15 * shapr digs for an url
16:35:28 <shapr> http://darcs.net/DarcsWiki/GettingStarted
16:35:41 <shapr> But basically, you start out grabbing a repo (you've already done that?)
16:36:05 <Speck> I just checked the regexp behavior for [:space:] (whitespace) and it includes \r \n as well
16:36:08 <shapr> Lemme backup some, you have GHC 6.4 installed, and darcs?
16:36:17 <Speck> I'm browsing online, but I'll grab it in a bit
16:36:20 <shapr> awright
16:36:23 <Speck> I don't have darcs
16:36:30 <shapr> It's worth trying at least.
16:36:35 <Speck> yeah I should get it
16:36:38 <shapr> I like it because I can file a patch so very easily.
16:37:51 <Speck> anyone know how to paste into a cygwin window without a middle button?
16:37:54 <shapr> Anyway, once you've installed darcs, grab the repo, add those chars, and then use darcs send to either send the patch directly to the author, or save the patch as a file so you can email it separately.
16:38:08 <shapr> Maybe C-v ?
16:38:16 <Speck> nah
16:38:19 <shapr> too easy
16:38:23 <Speck> yup
16:39:26 <shapr> Anyway, once you've added those chars, assuming the author accepts your patch, you will have made your first contribution to a Haskell project!
16:39:38 <Speck> oh boy
16:39:44 <Speck> I want to use parrow
16:39:52 <Speck> so I might be submitting a few patches :-)
16:39:56 <shapr> Yeah, good idea.
16:40:43 <shapr> Anyway, once you've written a few programs, I can explain monads to you, if you want.
16:40:47 <shapr> And then arrows!
16:40:54 <shapr> And then the meaning of life!
16:40:59 <shapr> Ok maybe not that last one..
16:41:00 <kaol> @yow
16:41:02 <lambdabot> I want the presidency so bad I can already taste the hors d'oeuvres.
16:41:15 <Speck> I think I kind of understand monads
16:41:24 <shapr> Can you explain 'em?
16:41:27 <yosemite> I'm almost to that point to
16:41:28 <Speck> oh god no
16:41:28 <yosemite> o
16:41:42 <shapr> That's my test for myself at least, if I can't explain it to my grandmother, I don't really understand it.
16:41:43 <yosemite> Monads == Mathemagic
16:41:46 <yosemite> :)
16:42:01 <shapr> I can give you my explanation if you want.
16:42:20 <Speck> yeah please do
16:43:18 <shapr> Monads are an interface, a convention. Their ingredients are two functions and a partially filled in type, and a few constraints to keep sanity.
16:43:43 <Speck> monads are just a type class, right?
16:43:56 <Speck> with some laws governing their behavior?
16:43:56 <shapr> One of the functions throws values into the partially filled-in type, the other function sticks together two matching values of a filled-in type in a useful manner.
16:44:00 <shapr> Yup
16:44:23 <shapr> The laws are useful stuff like (a >>= b) >>= c must be the same as a >>= (b >>= c)
16:44:43 <shapr> and left and right unit, which I sadly can't remember off the top of my head.
16:44:58 <shapr> but they just say how >>= should be 'empty' on the left and right side.
16:45:11 <shapr> Anyway, that was it.
16:45:27 * shapr looks up the unit laws
16:45:32 <Speck> what do you mean "partially filled in type"
16:46:11 <yosemite> The monadic parsing paper helped me a bit with figuring some of it out
16:46:26 <shapr> like this --> "data Tree a = Nil | Node (Tree a) a (Tree a) deriving Show"
16:46:44 <shapr> That's a Tree of something, you can put Int, Float, Char, String, or whatever into the a
16:47:17 <shapr> Node (Nil) "yow" (Nil)  has a type of  Tree String
16:47:35 <shapr> Node (Nil) (1 :: Int) (Nil)  has a type of  Tree Int
16:47:40 <shapr> Clear?
16:47:47 <Speck> a polymorphic type?
16:47:52 <shapr> yeah, that
16:48:31 <shapr> The way I look at it, the monadic interface can turn a 'significant value' into a 'significant pipeline'
16:48:42 <shapr> Maybe is the easiest type to start with.
16:48:50 <shapr> data Maybe a = Nothing | Just a
16:49:04 <Speck> that's a monad?
16:49:14 <shapr> You can use that type to represent failure with a Nothing result, or success with Just "foo"
16:49:22 <shapr> Nah, that's just a polymorphic type so far.
16:49:33 <Speck> yeah, I have defined a few polymorphic types
16:49:42 <shapr> But rememeber, that's one ingredient of a monad, a partially filled-in type.
16:50:15 <shapr> Then you have the two functions, one to stash stuff in the type, to statch together two filled in types.
16:50:45 <shapr> In the case of the Maybe monad, you can stick together a bunch of possibly failing functions just like using a big stack of nested if-then-else
16:51:49 <shapr> The name of the two functions are 'return' to put stuff into a type, in this case "return 1 :: Maybe Int" throws stuff into the type
16:51:57 <shapr> @plugs return 1 :: Maybe Int
16:51:59 <lambdabot> Just 1
16:52:15 <Pseudonym> G'day shapr.
16:52:18 <shapr> The other function is called bind, usually writted >>=
16:52:26 <shapr> G'day Pseudonym, how's winter?
16:53:07 <Pseudonym> Not as wintery as expected.
16:53:07 <shapr> Speck: Anyway, I'm just parroting a better tutorial - http://www.nomaware.com/monads/html/maybemonad.html
16:53:33 <Speck> I'll check it out
16:53:33 <shapr> But the basic idea of turning a type with a certain significance into a pipeline with the same significance works.
16:54:12 <shapr> The way I see it, OOP is about concatenating code with a given semantics, but monads are about letting you define (and stack!) semantics with which to combine code.
16:54:14 <Pseudonym> Finally got around to reading TaPL.
16:54:20 <shapr> Oh, you like it?
16:54:28 <shapr> Ready for ATTaPL?
16:54:44 <Pseudonym> Oh, I'm only up to chapter 20 at the moment.
16:54:52 <Pseudonym> So almost ready. :-)
16:54:52 <shapr> I have scribbled numerous kangaroo rats in my copy of TaPL for whatever reason.
16:55:07 <Pseudonym> Very handy book.
16:55:24 <Pseudonym> Probably going to get a copy.  It's worth it for the reference material.
16:55:24 <shapr> Jacko the Weakly Typed Kangaroo Rat of Doom appears to be the mascot for my particular copy of TaPL.
16:56:00 <shapr> Hey, have you seen my ArrowsIntroduction?
16:56:22 <Pseudonym> No.
16:56:25 <shapr> Oh, think you'll have time for a column this month?
16:56:26 <Pseudonym> Sounds interesting.
16:56:30 <Pseudonym> Oh, I hope so.
16:56:36 <Pseudonym> I've been flat out for the last couple of months.
16:56:37 <shapr> http://www.haskell.org/tmrwiki/ArrowsIntroduction
16:56:48 <shapr> Yeah, me too.
16:57:01 <shapr> But I knew if I skipped out on TMR, no one else would do it.
16:57:21 <Pseudonym> Well, you're on the critical path, so yeah.
16:57:26 <shapr> Speck: Any questions?
16:57:39 <shapr> Right, if I don't wave my pom-poms, no one works.
16:57:41 <Speck> not at the moment
16:57:51 * shapr does the lambda cheer
16:58:17 <Pseudonym> Cool.
16:58:21 <shapr> Speck: I have a PArrows example in my blog, if you want to see one.
16:58:36 <shapr> Or maybe you've already seen it?
16:58:40 <Speck> yeah I was looking :-)
16:58:43 <shapr> ah cool
17:00:16 <shapr> So, you like the unicycle pix? ;-)
17:00:26 <shapr> I got my rim today! w00!
17:01:21 <shapr> Pseudonym: Hey, did you hear Oleg is joining the TMR authors?
17:02:35 <shapr> hiya hyrax42
17:02:41 <Pseudonym> Oooh, cool!
17:03:10 <shapr> He says it's likely he'll publish Part 3 of the Zipper as tree of subcontinuations as a TMR article.
17:03:52 <hyrax42> hiya
17:03:56 <shapr> Anyway, any useful comments on my ArrowsIntroduction
17:04:02 <shapr> hyrax42: Greetings, learning Haskell?
17:04:07 <hyrax42> not sure
17:04:14 <hyrax42> not yet, but soon, I hope
17:04:16 <hyrax42> :)
17:04:17 <shapr> mm, quantum flux
17:04:23 <shapr> He's in a state of entanglement!
17:04:31 <Pseudonym> I've thought for a while that a lot of Oleg's posts are really articles.
17:04:35 <shapr> hyrax42: In that case, do you have any questions?
17:04:35 <hyrax42> heh
17:04:37 <Pseudonym> TMR is exactly the sort of place where they could go.
17:04:50 <hyrax42> well I only hopped on freenode yesterday
17:04:56 <shapr> Yeah, I agree. That'll give Oleg more space, and the ability to connect and format stuff better.
17:04:59 <hyrax42> so I thought I'd do a tour of all the channels I read about
17:05:09 <shapr> hyrax42: Did it break? How heavy are you? ;-)
17:05:20 <hyrax42> I think it survived
17:05:32 <shapr> Oh you read about #haskell? Wait, is that a reference to chatting as reading? If so, I read about #haskell too!
17:05:34 <hyrax42> bit too heavy.. but aren't we all?
17:05:41 <shapr> Actually, I am.
17:05:50 <shapr> I need to lose about twelve kilos in fact.
17:06:08 <fraxtal> I need to lose about 15 pounds myself
17:06:21 <Pseudonym> I need to lose some, but I refuse to be so precise.
17:06:22 <shapr> @plugs 2.2 * 12
17:06:23 <lambdabot> 26.400000000000002
17:06:30 <shapr> I need to lose 26.4 pounds.
17:06:48 <fraxtal> @plugs 15/2.2
17:06:50 <lambdabot> 6.8181818181818175
17:06:57 <fraxtal> I need to lose about 7 kilod
17:07:09 <shapr> Happily, I have unicycles.
17:07:16 <Pseudonym> Besides, I'm so valuable, I'm measured in Troy measure, not avoirdupois.
17:07:23 <fraxtal> I rode a unicycle once and loved it
17:07:25 <Pseudonym> So my pounds are different than yours.
17:07:38 <Pseudonym> Oh!
17:07:41 <Pseudonym> That reminds me.
17:07:48 <Pseudonym> Cool trick question to play on someone:
17:07:51 <shapr> uh oh
17:08:03 <Pseudonym> Q: Which weighs more: A pound of gold or a pound of feathers?
17:08:22 <shapr> They weigh the same?
17:08:26 <Pseudonym> Nope.
17:08:28 <Pseudonym> Try again.
17:08:28 <shapr> oh
17:08:33 <shapr> Gold?
17:08:36 <fraxtal> teh feathers
17:08:36 <Pseudonym> Wrong.
17:08:40 <shapr> Wow
17:08:41 <Pseudonym> Right, it's the feathers.
17:08:53 <Pseudonym> Because gold, being a valuable, is not measured using avoirdupois pounds.
17:09:05 <Pseudonym> It's measured using Troy pounds, which are lighter.
17:09:21 <shapr> Neato
17:09:54 <fraxtal> Now, will a pound of gold float on top of a liquid?
17:10:03 <Pseudonym> Told you it was a trick question.
17:10:11 <shapr> If it's mercury.
17:10:30 * Pseudonym gets out his Lad's Own Amateur Alchemy Kit
17:10:44 <shapr> fraxtal: Am I right?
17:10:46 <Pseudonym> If you turn it into Mercury first.
17:11:24 <wli> mmc -c gold.m
17:11:27 <fraxtal> shapr: I don't even know , but if mercury is more dense than gold then it will work
17:11:41 <Pseudonym> Which it isn't.
17:11:51 <fraxtal> I was kind of hoping that Pseudonym would give us the answers
17:11:55 <Pseudonym> What you probably need is some heavy metal with a lower melting point than gold.
17:12:51 <Pseudonym> Gold's melting point is 1063C and its specific gravity is 19.32.
17:13:01 <Pseudonym> Hmmm.
17:13:23 <wli> Neptunium?
17:13:40 <Pseudonym> What's its melting point?
17:14:34 <Pseudonym> You might need an alloy.
17:15:07 <wli> Gold's melting point is 1337K, Neptunium's is 910K
17:15:21 <wli> Plutonium's is 912K
17:15:43 <Pseudonym> That'd probably do it.
17:16:15 <Pseudonym> If you want something cheaper, you might have luck with Wood's metal.
17:16:24 <Pseudonym> An alloy of tin, lead, bismuth and cadmium.
17:17:06 <Pseudonym> Actually, lead would most likely do the trick.
17:17:28 <Pseudonym> http://www.webelements.com/webelements/elements/media/nearingzero/Pb.gif
17:17:57 <wli> Unubnium is supposed to be much like Mercury.
17:19:03 <fraxtal> it would be cool to see gold floating on top of a stream of molten lead
17:19:07 <wli> Lead isn't dense enough.
17:19:26 <Pseudonym> Hmmm.
17:19:36 <wli> Au is 19300 kg/m^3, Pb is 11340 kg/m^3
17:19:39 <Pseudonym> I reckon Wood's metal would do it.
17:20:33 <wli> Wood's metal?
17:20:46 <Pseudonym> Actually, no.  It's 9700 kg/m^3
17:20:50 <Pseudonym> Damn.
17:23:59 <Pseudonym> Oooh, hang on.
17:24:08 <Pseudonym> The question never stated that the gold had to be solid.
17:26:00 <Pseudonym> You could also use a heavy isotope of Mercury.
17:26:03 <Pseudonym> Say, 204Hg.
17:28:15 <wli> What's 204Hg's density, though?
17:28:47 <Pseudonym> Not sure.
17:29:18 <wli> 204 vs. 197
17:29:23 <wli> 204Hg is stable
17:33:55 <wli> still not quite enough to go on
17:35:16 <wli> molten plutonium or neptunium sounds more promising
17:35:23 * Pseudonym nods
17:35:33 <Pseudonym> The tricky bit is keeping the gold solid.
17:35:41 <Pseudonym> If you don't have to do that, I think the problem is readily solvable.
17:35:53 <wli> How's that?
17:36:23 <Pseudonym> By finding something heavier than gold which doesn't readily mix.
17:38:38 <wli> The heavy metals do all kinds of odd things. e.g. uranium is self-sharpening, catches on fire at 170F, the burning dust explodes on contact with water, etc.
17:40:42 <fraxtal> Is the melting point of a solid proportional to its density?
17:40:58 <wli> So to me this sounded like a question about tohse.
17:42:56 <Pseudonym> Melting point is related to its solid structure.
17:43:14 <Pseudonym> If it has a very solid crystal (e.g. diamond), the melting point is high.
17:44:37 <Pseudonym> Made a small change.
17:45:34 <Pseudonym> Errr... never mind.
17:46:13 <wli> Plutonium catches on fire with exposure to air and water at room temperature.
17:46:54 <wli> It doesn't explode when you try to extinguish it with water like uranium, though.
17:52:08 <shapr> I'd like to have a pocket full of osmium.
17:52:31 <Pseudonym> Why?
17:52:57 <shapr> I like to do contact juggling, and I've discovered that the larger the inertia of the balls, the better the tricks look.
17:53:22 <shapr> Right now I use tool-steel ball bearings from some massive machine in a junkyard, but I want something better.
17:53:35 <shapr> The bearings I have now are only 0.75 pound each.
17:54:02 <Pseudonym> Isn't osmium really toxic?
17:54:02 <shapr> Any idea where I can buy some osmium ball bearings?
17:54:05 <shapr> Oh, I dunno.
17:54:06 <Pseudonym> Not in its metallic form.
17:54:13 <Pseudonym> But when it's exposed to air.
17:54:32 <ozone> Pseudonym: you're such a killjoy :)
17:54:53 <Pseudonym> Oh, I see.  You put it in an alloy.
17:54:56 <Pseudonym> And then it's not toxic.
17:55:00 <Pseudonym> Makes sense.
17:55:07 <shapr> I do know that osmium is considered the heaviest element.
17:55:21 <Pseudonym> Actuually, that's disputed.
17:55:38 <shapr> "Because of the extreme toxicity of its oxide, osmium is rarely used in its pure state," poo
17:55:41 <shapr> http://en.wikipedia.org/wiki/Osmium
17:56:04 <Pseudonym> But you don't want to juggle iridium.
17:56:07 <astrolabe> Platinum is pretty much the same density I think
17:56:38 <kaol> DU juggling balls... Insane.
17:56:53 <Pseudonym> Ah, here we are.  90% platinum, 10% osmium.
17:56:55 <Pseudonym> Sounds perfect.
17:57:21 <shapr> kaol: DU?
17:57:46 <kaol> depleted uranium.
17:57:51 <shapr> Oh, scary.
17:58:14 <kaol> but you couldn't get much denser than that.
17:58:14 <shapr> Well, I'd rather go for something non-toxic.
17:58:31 <shapr> Since I play with my juggling balls quite a bit.
17:58:40 <Pseudonym> According to that Wikipedia page, 90/10 Platinum/Osmium is used in pacemakers.
17:58:43 <Pseudonym> So that sounds pretty non-toxic.
17:59:46 <shapr> Hm, platinum is only twice the price of Gold.
17:59:57 <astrolabe> What is contact juggling?  I guess platinum is too expensive to be sensible.
18:00:09 <shapr> Have you seen the movie Labyrinth?
18:00:20 <astrolabe> Nope :)
18:00:31 <ozone> yay david bowie!
18:00:45 <Pseudonym> Yay Jennifer Connelly!
18:00:46 <shapr> Yeah, the tricks david bowie was doing in Labyrinth are called "contact juggling"
18:01:03 <ozone> Pseudonym: oh wow, i completely forgot she was in that
18:01:11 <shapr> Anyway, I only do the hand pass thing, what's it called, the butterfly?
18:01:13 <ozone> Jennifer Connelly++
18:01:22 <astrolabe> Ah it's ok I'm getting a wikipedia link
18:01:22 <Pseudonym> She was 16 at the time, but so was I.
18:01:32 <Pseudonym> So I don't feel bad about it.
18:02:19 <astrolabe> Even gold has the same ball park density.  Much more dense than lead.
18:02:39 <shapr> I suspect gold juggling balls would be stolen.
18:02:40 <astrolabe> and famed for its cheapness
18:02:55 <Pseudonym> Actually, more to the point: Yay, huge improvement over Dark Crystal!
18:02:58 <shapr> Anything heavy but not toxic or overly valuable?
18:03:49 <astrolabe> Maybe lead inside a steel shell?
18:03:56 <shapr> Hm, good idea
18:05:12 <wli> Pt/Os alloys? hmm
18:05:31 <shapr> Yeah, but expensive to replace and likely to be stolen.
18:05:43 <Pseudonym> I think you should use a riddle wrapped in an enigma.
18:05:49 <astrolabe> http://www.science.co.il/PTelements.asp?s=Density
18:05:56 * shapr throws lambdas at Pseudonym 
18:06:31 * Pseudonym types them so they're safe
18:06:43 <shapr> Oh tungsten is both affordable and non-toxic, I think.
18:06:58 <wli> But does the alloy melt at a low enough temperature?
18:07:17 <Pseudonym> I don't think shapr is planning molten juggling.
18:07:37 <wli> um
18:07:54 <ozone> it'd be a fun new sport
18:07:56 <wli> Where did the juggling come in? I thought we were trying to get solid gold to float.
18:08:03 <shapr> Tungsten melts at 6192°
18:08:13 <ozone> wli: yes, and then shapr entered the conversation
18:08:15 <Pseudonym> The Pt/Os alloy thing was my suggestion for shapr's juggling balls.
18:08:29 <ozone> naturally juggling or unicycling would then become involved
18:08:36 <shapr> Someone once called my distracted and distracting.
18:08:40 <shapr> er "called me"
18:08:49 <shapr> ozone: oh c'mon, it could have been saxophones too.
18:08:52 <wli> Did we ever improve on Plutonium?
18:08:54 <Pseudonym> I'm not dis... oooh, look!  Something shiny!
18:09:01 <kaol> @seen lambdabot
18:09:07 <shapr> I'm learning to play the saxophone these days.
18:09:26 <Pseudonym> Which size?
18:09:37 <shapr> ozone: Speaking of on-topic, you gonna write for TMR this month?
18:09:39 <Pseudonym> Actually, how dense is brass?
18:09:40 <shapr> Alto Sax
18:09:42 <wli> It sounded like people were loooking for an alloy.
18:09:47 <lambdabot> Yes, I'm here.
18:09:49 <Pseudonym> You could melt down your sax for juggling balls.
18:10:21 <shapr> Saxophones are expensive, about a thousand bucks for a usable used sax, up to two thousand for a spiffy new sax.
18:10:39 <shapr> I could probably get Platinum for less than that.
18:10:40 <ozone> shapr: i have a paper due on the 8th, so ... err, no? :)
18:10:50 <ozone> and good to see you picking up sax
18:10:54 <shapr> ozone: You always have a good excuse!
18:10:58 <ozone> there's not enough brass players in the world
18:10:59 <Pseudonym> ozone: Is your paper relevant to TMR?
18:11:03 <shapr> Oh right
18:11:08 <shapr> He could prepublish in TMR!
18:11:10 <Pseudonym> Right!
18:11:23 <ozone> Pseudonym: damn you!
18:11:27 * shapr laughs
18:11:35 <shapr> C'mon, what's the paper about?
18:11:54 <ozone> good question, ask again in a few days after i've started writing it ;)
18:12:07 <Pseudonym> Even better, you could put a draft in TMR, get feedback, and THEN hand in the corrected version.
18:12:14 <ozone> err, more seriously, multimedia in haskell
18:12:20 <ozone> and how my un-progress in it is going
18:12:21 <Pseudonym> Sounds perfect!
18:12:39 <ozone> and how doing anything with binary data in haskell needs a makeover
18:13:03 <shapr> Yeah, I agree with that.
18:13:06 <ozone> that might not be a bad idea, actually
18:13:22 <ozone> though i dunno if i can do that article in conjunction with the other things i have due.  when's the TMR deadloine?
18:13:27 <shapr> You're covering NewBinary, I take it?
18:13:33 <shapr> 1st of the month, as always.
18:14:05 <shapr> The Monad.Reader has a very simple publishing schedule. You create an account, I give you author privs, you throw down a wikipage.
18:14:05 <ozone> hmm.  i'll say no for the moment.  but i can try, and i if don't make it, it can be for the month after :)
18:14:31 <ozone> anyway, gotta go.  back later!
18:14:35 <shapr> cya
18:14:58 <shapr> I kinda wish I could get all the former authors to show up and critique the current articles.
18:15:35 <Pseudonym> I'm still trying to work out what I should write.
18:15:46 <Pseudonym> I'm not happy with UserFriendlyAxioms yet.
18:15:48 <shapr> This month is probably about control flow
18:15:53 <Pseudonym> Hmmm.
18:15:53 <Pseudonym> OK.
18:15:55 <Pseudonym> That's an idea.
18:16:02 <astrolabe> You could appeal for more critiques in your editorial
18:16:06 <shapr> I'm writing about arrows, Oleg may put in his Zipper SubCont article.
18:16:36 <shapr> It's sort of a weird idea to get feedback on the interim versions of an article.
18:16:58 <shapr> Seems to work though, I've gotten lots of valuable article-shaping feedback from several readers.
18:17:36 <shapr> I'm working on a sci-fi story, maybe I should do it the same way.
18:17:42 <astrolabe> Tungstun does look like a RELATIVELY sane choice.  10x the price of steel.
18:17:56 <shapr> Well, that's relatively cheap.
18:18:09 <shapr> Now I just have to find some place to order tungsten spheres.
18:18:23 <Pseudonym> You can't really do open source fiction, IMO.
18:18:25 <astrolabe> http://tungstenco.com/whytungsten.htm
18:18:31 <Pseudonym> It only really works for non-fiction.
18:19:03 <Igloo> Why do you say that?
18:19:14 <Pseudonym> Because of the way fiction works.
18:19:24 <Pseudonym> Fiction relies on the narrative flow.
18:19:33 <Pseudonym> Whereas, for example, a reference work doesn't.
18:19:48 <Pseudonym> You can swap out an encyclopaedia article and swap in another one and it doesn't break everything else.
18:19:53 <Igloo> Do you think a team could write a work of fiction?
18:20:03 <Pseudonym> Yes, of course.
18:20:16 <shapr> astrolabe: Oh excellent url, thanks!
18:20:29 <Pseudonym> There are at least two ways they could do it.
18:20:48 <Pseudonym> 1. Plan it out together beforehand, then go away and write individual chapters/scenes, then come back together and redraft.
18:21:00 <Pseudonym> 2. One person writes it, then gives it to the other.  Back and forth until fixpoint.
18:21:21 <Igloo> I don't really see the difference between 1 and an OS fiction
18:21:24 <shapr> I like option 3
18:21:53 <shapr> I do more of a 'turing machine' approach where I randomly walk the content and fix it up.
18:21:54 <Pseudonym> The difference is that 1 is a cathedral development model.
18:22:06 <Pseudonym> Which you can do in open souce.
18:22:12 <Pseudonym> But it's not the way most OSS developers want to work.
18:22:45 <Pseudonym> shapr: Yes, but you're one person.
18:22:46 <Pseudonym> Not a team.
18:23:30 <shapr> That approach works in team games like StarCraft
18:23:39 <shapr> Multiple people doing 'maintenance'
18:24:03 <shapr> It's very efficient in my experienc.
18:24:30 <Pseudonym> That's different, though.
18:24:31 <astrolabe> I've read the author Samuel R Delaney describe how he writes, and it is very like programming, with complicated links between different bits of a story, so changes in one place must be propagated.
18:24:36 <Pseudonym> That's one author, many editors.
18:24:50 <shapr> Hm, could be
18:26:02 <Pseudonym> Mind you, a lot of OSS projects effectively work that way.
18:26:12 <shapr> I hadn't thought of it that way.
18:26:31 <shapr> On the other hand... Alistair Cockburn compares programming to collaborative group poetry writing.
18:27:13 <astrolabe> But it would much harder to do well than team coding I think, because for coding you can formalise requirements and linkages.
18:27:38 <shapr> But those change too
18:28:10 <astrolabe> Yeah, but it is harder to work at cross purposes.
18:28:22 <Pseudonym> That's true, but programming (if done properly) has a certain insulation that fiction doesn't.
18:28:24 <shapr> Not in my experience =)
18:28:38 <shapr> Communication is rarely a given in my experience.
18:28:46 <Pseudonym> If you formalise the interface, you can do anything you want underneath so long as the interface doesn't change.
18:28:47 <shapr> Take yesterday as a good example...
18:29:03 <Pseudonym> That's not true in fiction unless you're Victor Hugo.
18:29:04 <astrolabe> Right Pseudonym
18:29:36 <Pseudonym> Victor Hugo can go several chapters into someone's backstory only to have them die in the next scene and no more is said.
18:29:41 <shapr> We're subcontracting for a German university, they're one partner in an EU project. The French partner is setting the goals. We get specs that have been translated from French, into English, into German, and back into English.
18:29:49 <astrolabe> Maybe you need a metalanguage for writing.
18:30:04 <shapr> There's a project audit coming up next week, and we're on vacation the next two weeks.
18:30:25 <shapr> So yesterday we find out that our heavily filtered specs were in fact, totally wrong.
18:30:44 <astrolabe> That does have a horrible ring of familiarity about it.
18:30:48 <Pseudonym> That reminds me of the stupid Babelfish tricks.
18:31:08 <Pseudonym> Like taking a statement, translating it from English to German and back again until you hit a fixpoint.
18:31:19 <shapr> So yesterday and today I burned out a whole bunch of braincells redoing bunches of stuff in a very small amount of time.
18:32:02 <astrolabe> Hmmm maybe you could get babelfish strange attractors
18:33:03 <shapr> Anyway, the solution we found was that the other half of the company, my fiancee, called up the French partner and spoke to him. She's a native speaker of both French and German, so she got it straightened out in about half an hour.
18:33:24 <astrolabe> Apart from being a pain in arse, expecting changing project specs might be good for code style.
18:33:37 <shapr> She did succeed in pissing off some people in the German partner by going over their heads (we're by no means a partner, just working for a partner)
18:33:47 <astrolabe> Very far sighted of you to  set up a multilingual company.
18:33:58 <shapr> Complete accident actually.
18:34:10 <shapr> Bea just happens to do six languages.
18:34:29 <astrolabe> God.  A polymath?
18:35:00 <shapr> She was doing very manual webdev when I met her, so I wrote some Python code to help her out. Then her employer wanted me to work for them too.
18:35:12 <shapr> Five years later, I'm still doing it.
18:35:47 <shapr> Yeah, Bea is pretty good at tech stuff though not so interested.
18:35:53 <shapr> She likes languages.
18:36:58 <Pseudonym> Programming languages?
18:37:02 <shapr> Nah
18:37:05 <Pseudonym> Damn.
18:37:06 <shapr> Spoken/written
18:37:22 <shapr> I'm the one who likes learning new programming languages.
18:37:34 <shapr> Speaking of which, have I told you about Secret Joy?
18:37:42 <Pseudonym> No...
18:37:49 <shapr> Greg Bucholz and I came up with this crazy idea...
18:37:54 <shapr> You know Joy?
18:38:28 <astrolabe> I don't
18:38:54 <shapr> Anyway, non-strict call-by-need metaprogramming in a concatenative language like Joy would give you metaprogramming on a token-by-token level.
18:39:05 <Pseudonym> I know Joy, yes.
18:39:10 <Pseudonym> Can't program in it.
18:39:19 <Pseudonym> But it's kind of a mix between Lisp and PostScript.
18:39:31 <shapr> I was thinking about how the syntax of Scheme and Lisp lends itself to metaprogramming, but I realized that Joy does that even more so.
18:39:59 <shapr> Cutting a Joy program at any lexical boundary produces two legal Joy programs.
18:40:18 <Pseudonym> Cool, so it'd be easy to binary search.
18:40:39 <shapr> So now I want to investigate non-strict c-b-n metaprogramming with a token-sized granularity.
18:41:09 <shapr> musasabi came up with a bunch of nifty ideas about that too.
18:41:30 * hyrax42 gets a headache
18:41:34 <hyrax42> that sounds complicated
18:41:46 <shapr> It's pretty simple actually, check out Joy to see what I mean.
18:41:59 <shapr> DEFINE approxEqual == 100.0 / rotate [0 =] [pop] [dup rolldown - swap /] ifte > .
18:42:04 <shapr> That's a simple Joy def
18:42:12 <hyrax42> well metaprogramming sounds complicated
18:42:23 <shapr> Joy is a postfix concatenative stack based purely functional programming language.
18:42:33 <shapr> Nah, metaprogramming is easy, you write code that writes code.
18:42:46 <hyrax42> lisp macros and the like?
18:42:48 <shapr> Yes
18:42:51 <Pseudonym> That's one example.
18:42:56 <Pseudonym> C++ templates are another.
18:43:04 <shapr> But I think non-strict Joy macros would have advantages over Lisp macros.
18:43:07 <Pseudonym> Program generators, like yacc...
18:43:23 <hyrax42> mmm
18:43:42 <Pseudonym> They wouldn't have performance advantages, surely?
18:43:48 <shapr> I think they would.
18:44:41 <shapr> Look at it from the monads vs arrows perspective. Metaprogramming with Lisp requires eating at least one whole sexp, right?
18:45:15 <shapr> Metaprogramming with Joy would require only the next lexical token.
18:45:39 <hyrax42> where should one start with all this pl theory stuff?
18:45:54 <shapr> I dunno, what have you got so far?
18:46:00 <hyrax42> seems haskell people are way more into it than most
18:46:01 <shapr> I'd recommend reading SICP and tPP
18:46:09 <hyrax42> I've got SICP... working slowly
18:46:23 <hyrax42> also have EPL
18:46:31 <shapr> I'm actually a self-employed web developer, but I do this stuff for fun.
18:46:46 <hyrax42> doing a programming languages course at uni now (summer term)
18:46:47 <hyrax42> but it sucks
18:46:49 <Pseudonym> And TaPL.
18:46:51 <shapr> I also had all of one computer class in 1991 or 1992
18:46:53 <Pseudonym> That's a damn good book.
18:46:57 <hyrax42> the guy isn't a prof
18:47:04 <hyrax42> and doesn't seem to really know the stuff
18:47:17 <Pseudonym> But probably you want to start with Appel's "Compiler Design in ML".
18:47:24 <Pseudonym> That's a pretty good overview, I think.
18:47:27 <shapr> I had CS101, we did ROM BASIC on original hardware IBM XT machines with 5.25" floppies.
18:47:37 <hyrax42> Pseudonym, before SICP etc.?
18:47:46 <hyrax42> or once I'm done with that
18:47:51 <shapr> I'd recommend doing SICP first. It's an excellent grounding.
18:48:05 <Pseudonym> Hard to say.  SICP is somewhat orthogonal.
18:48:05 <hyrax42> and how necessary is good programming ability before hand
18:48:11 <shapr> I'd also recommend reading "The Pragmatic Programmer"
18:48:16 * hyrax42 makes a list
18:48:17 <Pseudonym> If you know NOTHING about the innards of compilers, read Appel.
18:48:26 <shapr> SICP is about programming.
18:48:28 <Pseudonym> If you want to get into the theory first, read SICP.
18:48:36 <shapr> SICP is theory?
18:48:40 <Pseudonym> SICP is applied theory.
18:48:44 <shapr> Hm, ok
18:48:47 <Pseudonym> Personal opinion.
18:48:50 <Pseudonym> Others may disagree.
18:48:55 <shapr> What's arrows then? applied nonsense? ;-)
18:49:14 <shapr> Oh crap, I have to finish my book review ...
18:49:44 <shapr> I can do it tomorrow, that's the due date.
18:50:04 <shapr> hyrax42: http://lambda-the-ultimate.org/
18:50:08 <shapr> That's a fun place, imho
18:50:23 <shapr> Personally, my favorite place is right here on #haskell.
18:50:41 <shapr> #haskell has lots of smart, helpful, knowledgeable people.
18:50:48 <hyrax42> cool
18:51:09 <shapr> And the flamefests are rare here too.
18:51:30 <kaol> @moo ing can be heard often (sorry)
18:51:31 <lambdabot>                (____)
18:51:31 <lambdabot>                (oo  )
18:51:31 <lambdabot>     /-----------\  /
18:51:31 <lambdabot>    / ||       |  \/
18:51:31 <lambdabot>   /  ||       ||||
18:51:32 <lambdabot>  *   ||||-----||||
18:51:34 <lambdabot>      /\/\     /\/\
18:51:36 <lambdabot> This cow belonged
18:51:38 <lambdabot>  to Pablo Picasso
18:51:40 <shapr> The cows are not rare though.
18:51:57 <shapr> I'll take mine medium-well.
18:51:57 <Pseudonym> We have a lot of silly, distracting people, too.
18:52:08 * kaol apologises
18:52:11 * Pseudonym does too
18:52:14 <hyrax42> haha
18:52:18 * shapr blames lambdabot 
18:53:07 <shapr> hyrax42: so, where ya from?
18:53:24 <shapr> I'm from Alabama, but I live about a thousand km north of Stockholm,Sweden.
18:54:10 <astrolabe> Wow shapr. Is it even dark yet?
18:54:37 <hyrax42> shapr, from or at?
18:54:42 <shapr> hyrax42: Oh, another advantage of #haskell imho, is that people here aren't religious fanatics about Haskell.
18:54:59 <shapr> astrolabe: Not till September
18:55:44 <shapr> Or maybe August, I forget when it starts to get dark again.
18:56:10 <shapr> Here's a better view - http://www.haskell.org/hawiki/HaskellUserLocations
18:56:44 <hyrax42> what is tPP
18:56:50 <shapr> The Pragmatic Programmer
18:57:19 <shapr> astrolabe: several months of sunlight is really nifty until you want to sleep.
18:57:24 <hyrax42> ah
18:57:25 <hyrax42> ok
18:57:33 <shapr> Several months of darkness is not nifty.
18:57:57 <hyrax42> wow
18:58:02 <hyrax42> is it really like that?
18:58:17 <hyrax42> and what gets you there from alabama?
18:58:27 <shapr> Yup, it really is. I'm 40 miles south of the Arctic Circle.
18:58:38 <hyrax42> do you get any normal days at all
18:58:38 <hyrax42> ?
18:58:39 <shapr> I met this woman on ICQ... and now I live in Sweden.
18:58:45 <hyrax42> around the equinoxes?
18:58:49 <shapr> exactly
18:58:53 <hyrax42> just a few?
18:58:58 <shapr> yup
18:58:58 <hyrax42> nifty
18:59:08 <hyrax42> well I'm in Montreal
18:59:16 <hyrax42> but from the middle east
18:59:25 <hyrax42> here for studies
18:59:26 <shapr> The sunclock debian package shows you what it's like.
18:59:28 <shapr> Oh cool
18:59:44 <shapr> So you've dramatically changed climate as well.
18:59:48 <hyrax42> aye
18:59:54 <hyrax42> quite
19:00:08 <hyrax42> although summer here kidan sucks
19:00:13 <hyrax42> since back home we have AC everywhere
19:00:20 <hyrax42> here if a heatwave hits, you're screwed
19:00:24 <astrolabe> I guess even at the equinoxes, it isn't really normal.  The sun would never get high, and you'd never get through twilight into night.
19:00:24 <hyrax42> (e.g. last week)
19:00:37 <hyrax42> ah, true
19:01:07 <shapr> In Alabama summers, the streets get soft and start to flow like molasses. In Swedish summers this far north, you stop wearing your jacket for a few months.
19:01:22 <astrolabe> Most astrolabes don't even have a plate for that latitude.
19:01:24 <hyrax42> is there an irc commadn to get the topic of a channel without joining it?
19:01:45 <Heffalump> /topic #foo
19:01:52 <hyrax42> ah, how cryptic
19:01:56 <hyrax42> no wonder I didn't know
19:02:21 <shapr> astrolabe: Surprisingly, astrolabes are a fad here recently.
19:02:32 <shapr> I've just noticed that everyone has purchased one to put into their yard.
19:02:42 <astrolabe> Cool shapr tell me more!
19:02:43 <hyrax42> what're those
19:03:14 <shapr> Well, these are really just highly complicated sundials.
19:03:26 <shapr> I wonder how adjustable they have to be to be called real astrolabes.
19:03:44 <shapr> hyrax42: http://en.wikipedia.org/wiki/Astrolabe
19:04:31 <shapr> Anyway, I was highly impressed with the erudite Swedes until I noticed that they were all pointing in different directions.
19:04:58 <astrolabe> LOL!  Were they armillory spheres?
19:05:05 <shapr> What's that?
19:05:25 * shapr asks google
19:05:52 <shapr> They are spheres, and they appear adjustable.
19:06:33 <astrolabe> hyrax: http://www.mhs.ox.ac.uk/epact/catalogue.asp?enumber=60286
19:07:27 <astrolabe> Sounds like it then, but once they are in place, they shouldn't need adjusting.
19:07:45 <hyrax42> nifty
19:08:06 <shapr> Yeah, but if these are all pointing in different directions, it's like someone buying a slide rule just to show off, and not using it.
19:08:14 <hyrax42> I've got a slide rule
19:08:19 <hyrax42> which I use on occasion
19:08:23 <shapr> I can use my slide rules.
19:08:23 <hyrax42> didn't buy it though
19:08:27 <hyrax42> my dad gave it me
19:08:37 <hyrax42> only 15cm
19:08:38 <shapr> I got mine from my high school, they were throwing them out.
19:08:49 <shapr> This likely means I'm older than you :-)
19:09:02 <astrolabe> I've got one too (two counting my watch)
19:09:02 <hyrax42> quite
19:09:11 <hyrax42> your watch is a slide rule?
19:09:18 <shapr> Yeah, a diving bezel?
19:09:37 <astrolabe> Yeah, that's right.  Pilot's watches tend to be, so I got one that was.
19:09:43 <hyrax42> woah
19:09:44 <hyrax42> that's
19:09:45 * astrolabe is not a pilot!
19:09:45 <hyrax42> so
19:09:54 <shapr> That's way nifty.
19:09:54 <hyrax42> something
19:10:00 <hyrax42> geeky and nifty
19:10:06 <hyrax42> I might need one of those
19:10:07 <shapr> Yeah, totally. Now I want one.
19:10:16 <shapr> am02: dude, you're bouncing.
19:10:58 <hyrax42> http://www.marvgolden.com/watches/pu3183.htm
19:10:59 <hyrax42> cool
19:11:01 <shapr> Whoa it's 4am, I should go sleep
19:11:13 <hyrax42> but it's still light outside
19:11:17 <hyrax42> you dont' sleep when it's light, do you?
19:11:18 <shapr> Wow, that's a nice watch.
19:11:33 <shapr> It's light for several months. How long can you stay awake?
19:11:39 <hyrax42> http://www.marvgolden.com/watches/pulsar.htm for the collection
19:11:57 <astrolabe> me too.  I couldn't, so I came on here and now I'm not even sleepy. I'll still have to get up at 7 though :(
19:12:18 <astrolabe> I think he was pulling your leg :)
19:12:46 <shapr> Hm, should I ban am02 temporarily?
19:13:15 <shapr> I need a new watch, any suggestions?
19:13:23 <hyrax42> get one with a slide rule bezel
19:13:26 <hyrax42> that is all
19:13:44 <shapr> My watche needs to survive unicycling, swimming, wrestling, juggling with steel ball bearings, etc
19:13:50 <astrolabe> LOL :)  I got a good dealer from jeweler dumping stock on ebay.
19:14:15 <shapr> Hm, I could try that.
19:14:28 <hyrax42> astrolabe, a link to your watch?
19:14:57 <astrolabe> Maybe a wrist sundial would be most robust.  I've got a little ring dial which is quite nice.  Will only work till september for you though :)
19:15:26 <hyrax42> hahah
19:15:41 <shapr> haha
19:15:53 <hyrax42> shapr, maybe...
19:16:29 --- mode: ChanServ set +o shapr
19:16:42 <astrolabe> http://www.watchzworld.com/citizen_skyhawk_jr3060_59f.html
19:17:35 <astrolabe> Yeah, maybe you should block him.  He doesn't seem to be saying anything.
19:17:36 --- mode: shapr set +b am02!*@*
19:17:52 <shapr> Weird, the client quit at the same time.
19:18:05 <hyrax42> astrolabe, nice
19:18:16 <shapr> aanyway, his nick isn't registered and he can come back by changing nicks.
19:18:19 --- mode: shapr set -o shapr
19:18:25 <hyrax42> I'd probably go all analogue though, but that's me :-)
19:18:36 <astrolabe> Thanks.  I like it, it could be described as a bit over the top perhaps.
19:18:42 <hyrax42> woah
19:18:45 <hyrax42> but...
19:18:52 <hyrax42> it's automatics power?
19:18:55 <hyrax42> or?
19:19:02 <astrolabe> Solar powered
19:19:05 <hyrax42> wow that's such brilliant overkill
19:19:09 <hyrax42> titanium as well
19:19:21 <hyrax42> I've got a titanium watch... just chronograph though
19:19:47 <astrolabe> Once charged it will go for four years in the dark apparently.  What do you mean overkill? ;)
19:20:00 * shapr snickers
19:20:07 <hyrax42> oh I mean the whole watch
19:20:14 <hyrax42> everything about it
19:20:16 <hyrax42> :D
19:20:41 <hyrax42> where's the panel?
19:20:55 <astrolabe> My favorite thing is that in the dark the second hand stops moving, then when it gets light, it sweeps round to the right place.  A source of never ending amusment.
19:21:08 <astrolabe> the panel?
19:21:12 <hyrax42> solar
19:21:31 <hyrax42> argh... I didn't think I'd need a enw watch
19:21:42 <hyrax42> thanks astrolabe
19:21:46 * hyrax42 sighs
19:22:06 <astrolabe> I can only really recommend it if the money is burning a hole in your pocket.
19:22:13 <astrolabe> It seems to work well though.
19:22:27 <hyrax42> no money burning in my pocket
19:22:38 <hyrax42> but in the future
19:22:44 <hyrax42> not as if I don't have enough watches already
19:22:53 <hyrax42> I got what... 3 when I graduated high school
19:23:06 <astrolabe> The panel is behind a large area of the front face.  It is disguised and hard to spot.
19:23:13 <hyrax42> cool
19:23:22 <hyrax42> well I have a couple years to investigate pilot's watches
19:23:27 <hyrax42> now I know what I want at least
19:23:30 <hyrax42> :-)
19:24:20 <astrolabe> Yeah, money seems to get more plentiful as you get older too.
19:24:48 <astrolabe> The really posh ones are Brietlings, but they really ARE out of my bracket.
19:25:03 * hyrax42 takes note
19:25:06 <hyrax42> when I'm rich
19:25:09 <hyrax42> :p
19:25:35 <shapr> I just want an indestructible watch, I've killed *everything*
19:25:49 <shapr> My nice titanium diver's watch was squashed.
19:25:54 <astrolabe> Well, when you are, don't forget your chronagraph consultant :)
19:26:02 <astrolabe> squashed?
19:26:12 <hyrax42> oh don't worry astrolabe
19:26:13 <Pseudonym> You haven't killed me yet.
19:26:21 <shapr> Yeah, it was even before I started unicycling.
19:26:22 <hyrax42> the little note I made included your nick :p
19:26:32 <Pseudonym> What you COULD do is buy a succession of cheap watches.
19:26:48 <hyrax42> (mostly because I just copied the line out of the window, but...)
19:26:49 <hyrax42> ;)
19:26:54 <shapr> But part of my priority is a watch I can put on my arm and then not have to think abot it.
19:27:06 <Pseudonym> I don't carry a watch.  I just use my phone.
19:27:12 <Pseudonym> It's less likely to get lost or damaged.
19:27:12 <hyrax42> expensive watches don't work for that
19:27:14 <shapr> Phones don't survive unicycling.
19:27:27 <astrolabe> How do you trash the watches shapr?
19:27:27 <hyrax42> I wore my Tag for a semester
19:27:30 <Pseudonym> I can imagine taking a call while unicycling would be hard, too.
19:27:31 <hyrax42> I was insanely paranoid
19:27:35 <hyrax42> took it back home and left it there
19:27:47 <shapr> Actually, talking on my Nokia while unicycling is quite easy.
19:28:17 <shapr> But I don't like sticking to the roads, that's boring.
19:28:39 <shapr> Mud, rocks, hills, gravel, logs, trees... those are more fun.
19:29:19 <hyrax42> unicycling offroad?
19:29:28 <shapr> I wish my iRiver music player had open firmware
19:29:42 <shapr> I'd hack it to voice synth the time every twenty songs or so
19:30:20 <shapr> Yeah, offroad unicycle images - http://www.scannedinavian.com/images/goiter.jpg http://www.scannedinavian.com/images/gb4arctic1.jpg http://www.scannedinavian.com/images/gb4arctic2.jpg
19:30:55 <shapr> That's the unicycle I'm building right now. The hub hasn't shipped from the USA yet since I need custom bearings for that frame. I want it now!
19:31:00 <hyrax42> you learn something new everyday
19:31:43 <shapr> 3.7 inch wide on a 26 inch by 65mm wide rim, designed to float my rather large self over snow.
19:31:53 <hyrax42> built yourself?
19:32:06 <shapr> Not really, I just bought the parts and assembled them.
19:32:21 <hyrax42> is it a common activity?
19:32:25 <shapr> The frame is custom made ovalized aluminum from an engineer in Iowa.
19:32:28 <astrolabe> snow?!? I can't see how you can unicycle without perfect traction.
19:33:00 <shapr> Most people buy unicycles prebuilt. My current uni is a 2004 mountain unicycle from krisholm.com
19:33:19 <shapr> I can unicycle on ice just fine, just don't make sudden turns and it works.
19:33:43 <shapr> It's much easier than walking on ice too.
19:34:38 <astrolabe> Your brain must be solving such a high order ODE when you unicycle.
19:35:10 <shapr> The uni I'm building is probably the third of its configuration, it's using the widest rim and tire, only recently available from SurlyBikes.com
19:35:24 <shapr> Surly has one, the engineer in Iowa has a second, and I have the third.
19:36:20 <shapr> Anyway, unicycling is tremendous fun, great exercise, and elegant in the same way Haskell is elegant.
19:37:12 <astrolabe> Do you think a motorised unicycle would be possible?
19:37:14 <shapr> This is me on my current uni - http://www.scannedinavian.com/images/uni-hop.jpg
19:37:24 <shapr> Sure, Trevor Blackwell built one and called it the Eunicycle.
19:38:02 <shapr> The Michael Jackson pose is necessary, I'm actually holding onto the seat so the uni comes up off the ground with me.
19:38:29 <astrolabe> LOL.  I guessed that.
19:39:12 <shapr> http://tlb.org/eunicycle.html
19:39:35 <hyrax42> woah
19:39:36 <hyrax42> nifty
19:40:09 * hyrax42 thinks he will like #haskell
19:40:20 <shapr> Yeah, this place is great.
19:40:35 <Pseudonym> Hmmm.
19:40:51 <Pseudonym> Just wrote a longish mailing list post on the finer points of classical code breaking.
19:41:00 <Pseudonym> I wonder if you could make a TMR article out of that.
19:41:07 <shapr> Go for it.
19:41:31 <hyrax42> TMR?
19:41:33 <hyrax42> oh
19:41:36 <hyrax42> Monad Review
19:41:42 <hyrax42> ?
19:42:08 <shapr> The Monad.Reader
19:42:17 <hyrax42> well I knew it was called something monad something
19:42:22 <shapr> http://www.haskell.org/tmrwiki/FrontPage
19:42:35 <hyrax42> I've seen it
19:42:45 <hyrax42> but it's gobledegook till I learn some Haskell
19:43:44 <shapr> Yeh, I guess we don't have so much introductory stuff.
19:43:57 <shapr> Issue three does though - http://www.haskell.org/tmrwiki/IssueThree
19:44:08 <shapr> Pseudonym: hey, did you see the recent FpVsOo article?
19:44:14 <Pseudonym> Yes.
19:44:16 <astrolabe> I thought about trying to make a plank of wood balance on it's end recently, using penulums to sense tilt and correct it.  The stability problem seems quite complicated.  You have to shift poles about in laplace space.  I'm suprised he can get his unicycle balanced so easily.
19:44:18 <hyrax42> yay flme wars
19:45:08 <Pseudonym> It was interesting.
19:45:34 <shapr> I think it could go a lot further, but I dunno how or where.
19:45:40 <Pseudonym> Right, I agree.
19:45:49 <shapr> Philippa had more insights
19:46:19 <shapr> hyrax42: In this case, FpVsOo is more about "how are they different? how are they the same?"
19:46:35 <hyrax42> ah... not a flame war
19:46:41 <hyrax42> Xbox360vsPS3
19:46:47 <hyrax42> :p
19:46:50 <shapr> It's really interesting to me. I guess that's not surprising since I chased down Alistair and asked him to clean up his article from Ward's Wiki to make a TMR article.
19:47:14 <shapr> For example, Haskell has no notion of identity/equality other than value equality.
19:47:18 <Pseudonym> As an example, I disagree in part with this statement from the article:
19:47:28 <Pseudonym> "I think that higher-order functions are the defining characteristic of FP."
19:47:36 <shapr> Well, put in some comments!
19:47:38 <Pseudonym> :-)
19:47:45 <shapr> I wish people would put in more comments.
19:47:59 <shapr> Sometimes I wonder how many people are actually reading TMR.
19:48:05 <hyrax42> ohhh didn't realise it was an article article
19:48:17 <hyrax42> I thought maybe somehting on l-t-u that had a charming discussin following
19:48:32 <shapr> I get a bunch of emails about "I want PDF/PS" but that's about it.
19:48:42 <hyrax42> hmmm that shouldn't be too hard
19:48:49 * Heffalump went to a talk by SPJ about STM today and now thinks it's cool
19:49:05 <astrolabe> I've read quite a few of the articles.  I guess lots of people do.
19:49:06 <shapr> Heffalump: bout time :-P
19:49:15 <SamB> I looked at some of the articles in some of the issues
19:49:53 <Heffalump> well, it didn't make much sense to me before.
19:50:01 <Pseudonym> I tend to skip over the book reviews.
19:50:10 <shapr> hyrax42: Truly, PDF/PS output wouldn't be too hard, but it's very low on my priority list.
19:50:24 <SamB> I don't quite get STM yet, but it DOES sound cool...
19:50:28 <Pseudonym> As I understand it, there's a serious chance of livelock with STM.
19:50:38 <Heffalump> livelock = no progress made by any thread?
19:50:41 <hyrax42> shapr, well I've been meaning to start messing with tex/context/latex/whichever again
19:50:43 <shapr> I want to get the information accessible to people who can't afford academic journals.
19:50:43 <Pseudonym> Right.
19:50:48 <SamB> you get livelock anyways, don't you?
19:50:59 <Heffalump> there isn't, because nothing gets woken up until something makes progress.
19:51:04 <Pseudonym> Livelock is caused by two or more threads rolling back and restarting.
19:51:08 <Pseudonym> Ah, I see.
19:51:11 <hyrax42> maybe I'll try my hand at it in this context
19:51:15 <Pseudonym> So STM isn't lock-free.
19:51:17 <Heffalump> where makes progress = commits
19:51:21 <SamB> speaking of academic journals, I really ought to subscribe to the Journal of Functional Programming...
19:51:24 <shapr> It's just optimistically locked.
19:51:32 <fraxtal> Did you guys ever figure out if gold can float on top of a liquid?
19:51:41 <Heffalump> it's lock-free in the sense of people not writing locks
19:51:45 * shapr throws lambdas at fraxtal 
19:51:55 <Heffalump> and waiting to retry isn't really locking.
19:51:55 <Pseudonym> Well I can hide locks too.
19:52:00 <Pseudonym> But that doesn't make it lock-free.
19:52:01 <SamB> Heffalump: its lock free in the sense that nothing is kept out of anything
19:52:14 <Heffalump> in fact, I don't think it does use locks.
19:52:32 <Heffalump> (except around commits, which are deep inside the library and presumably quick)
19:52:39 <shapr> hyrax42: I do wish someone would fix that.
19:52:45 <SamB> what do you call those things?
19:52:50 <SamB> condition variables?
19:52:50 <Pseudonym> Lock-freeness is the property that if you need to stop a thread and run something higher-priority on the same CPU, the higher-priority thread won't block.
19:53:05 <Pseudonym> More or less.
19:53:09 <Pseudonym> That's what it means in practice.
19:53:19 <Heffalump> if the higher-priority thing commits before anything else, then that's true.
19:53:29 <hyrax42> shapr, fix what
19:53:36 <shapr> PS/PDF output for TMR
19:53:44 <Heffalump> and if it's higher-priority, and nothing else gets to run while it's running, then this will be true
19:53:45 <hyrax42> what're you guys talking about now
19:53:49 <hyrax42> I'm lost
19:53:53 <hyrax42> sounds like an scm tool?
19:53:55 <SamB> hyrax42: STM
19:53:58 <shapr> They're talking about software transactional memory, another nifty tool.
19:54:11 <Heffalump> we dived into the middle of a discussion about the new way of handling concurrency in GHC
19:54:13 <shapr> Sort of like a journaled filesystem for your program's memory.
19:54:15 <SamB> you should read the cool paper by simonpj
19:54:43 <hyrax42> ah... dived is right
19:54:51 <shapr> It is?
19:54:55 <Heffalump> I wish ICFP would open registration.
19:54:58 <Pseudonym> So the higher priority thread would block if the low priority thread is actually committing at that moment?
19:55:01 <shapr> I'm from Alabama, we swum ;-)
19:55:04 * hyrax42 goes to read Notes on Learning Haskell
19:55:07 <hyrax42> :p
19:55:21 <shapr> Anyway, I'm off to sleep.
19:55:23 <shapr> hyrax42: nice meeting you.
19:55:28 <hyrax42> you too
19:55:33 * shapr &
19:55:34 <Pseudonym> I've just spent several weeks reading papers on cache-friendly locks, CAS, STM, RCU and a lot of related stuff.
19:55:36 <SamB> presumably, committing doesn't need much lock..
19:55:42 <astrolabe> night shapr I'm off too.
19:55:47 <hyrax42> night
19:55:47 <astrolabe> Night all.
19:55:52 <Pseudonym> Night shapr.
19:56:39 <Heffalump> Pseudonym: I don't know. My guess is that it would only block once it got to the point of committing.
19:56:48 * Pseudonym nods
19:56:49 <SamB> yes, exactly...
19:56:51 <Pseudonym> So it's not lock-free.
19:56:55 <Pseudonym> Which isn't necessarily a problem.
19:57:06 <Pseudonym> For some applications it is, but for most, probably not.
19:57:10 <Heffalump> you certainly don't get the usual problems with locking.
19:57:12 <SamB> well, seeing as committing requires finite time and ONE lock...
19:57:18 <Heffalump> right.
19:57:24 <Pseudonym> Sure.
19:57:34 <Heffalump> and the lock is inside a library that only needs to be implemented once to support everything
19:57:42 <Pseudonym> But suppose you were programming in C, for example, and the OS wanted to deliver an asynchronous signal.
19:57:54 <Pseudonym> If you were comitting at THAT point, then the signal handler can't use the STM.
19:58:09 <SamB> Pseudonym: true...
19:58:17 <Pseudonym> This isn't a problem in GHC, of course.
19:58:34 <Heffalump> I don't think STM is touted as something that's good for systems level programming
19:58:37 <Pseudonym> Right.
19:58:40 <Pseudonym> Or hard real-time.
19:58:40 <SamB> but STM isn't really going to work well in C for all kinds of reasons...
19:59:13 <SamB> the main feature of STM is being composable, as I understand it...
20:00:27 <Pseudonym> Lunch time, I think.
20:00:29 <Pseudonym> BBS
20:00:48 <Heffalump> part of the composition is just nesting (by function call)
20:00:51 <Heffalump> which C handles fine
20:00:57 <Heffalump> not sure how you'd do orElse
20:01:03 <Heffalump> (apart from with function pointers)
20:01:45 <SamB> ah, the composition, as I understand it, has to do with thread-safety and deadlock, too...
20:01:59 <Heffalump> err, not really
20:02:13 <Heffalump> two transactions in sequence is just another transaction
20:02:17 <Heffalump> the point is that you keep atomicity
21:23:11 <machack666> is there a module to return a permutation of a list for a given seed value?
21:59:18 --- topic: set to '["logs: http://meme.b9.com/cview.html?channel=haskell&date=today","http://www.haskell.org/learning.html","http://www.haskell.org/ghc/survey/start.cgi","http://www.haskell.org/tmrwiki/IssueThree","Shapr rules","ICFP Contest! http://icfpc.plt-scheme.org/","ghc added to Fedora Extras"]' by juhp
21:59:39 <juhp> forgive me -  couldn't resist :)
22:00:41 <Lemmih> machack666: I got a function which shuffles a mutable array.
22:05:07 <machack666> Lemmih: that sounds useful.  I'm trying to simulate a deck of cards, so any "random" order is good by me
22:06:11 <machack666> there is a function online which claims to be a "perfect shuffle", but ends up causing non-exhaustive pattern exceptions when run from ghci
22:06:18 <machack666> not so perfect after all.  :)
22:06:46 <dons> hehe
22:11:17 <seidan> hmm.. 52! ~= 8e67 ~= 2e70, so a seed (or index) needs 70+ bits to even specify a perfect shuffle. hadn't thought of that before...
22:13:23 <machack666> I took the liberty of limiting the datatype to an Int as opposed to an Integer, as I was having problems getting mkStdGen to play nicely with Integer.
22:13:34 <seidan> s/2e70/2^70/
22:13:36 <machack666> (pointers welcome)
22:14:08 <machack666> (besides *(0x0))
22:16:50 <foxy> @pl (\s -> return (s,s))
22:16:52 <lambdabot> return . join (,)
22:17:06 <seidan> Well, I wsa thinking, "use a mutable array (ST would fit here) like lemmih suggests and pass an int to be a seed for mkStdGen", but then you only have 2^32/2^70 = 1/(2^38) "shuffles", and not necessarily distinct, i believe
22:17:13 <foxy> @index join
22:17:14 <lambdabot> Control.Monad, Control.Monad.Reader, Control.Monad.Writer, Control.
22:17:14 <lambdabot> Monad.State, Control.Monad.RWS, Control.Monad.Identity, Control.
22:17:14 <lambdabot> Monad.Cont, Control.Monad.Error, Control.Monad.List
22:18:19 <seidan> well, I didn't write that correctly, but you know what I mean... I think.
22:18:57 <machack666> Truthfully, I'm not terribly concerned about rigor here... 2^32 should be enough games for anyone, assuming that the shuffles are relatively distributed, and that the same sequence is not clumped at the end for consecutive seeds.
22:19:49 <foxy> @pl (\_ -> return ((),s))
22:19:50 <lambdabot> const (return ((,) s))
22:20:33 <foxy> @index const
22:20:34 <lambdabot> Prelude
22:20:43 <foxy> @type const
22:20:48 <lambdabot> const :: forall a b. a -> b -> a
22:22:25 <Pseudonym> @pl \p1 p2 j n -> p1 (\x -> p2 (\y -> j (f x y)) (j x)) (p2 j n)
22:22:27 <lambdabot> flip (ap . ((ap . ((.) .)) .) . (. flip (ap . (ap .) . (. ((. f) . (.
22:22:27 <lambdabot> ))) . (.)) id) . (.)) id
22:22:48 <Pseudonym> Eek.
22:23:24 <Pseudonym> (That particular lambda abstraction is from a serious piece of code, BTW.)
22:24:01 <dons> poor lambdabot
22:51:36 <musasabi> What is the status of DFSG and the Haskell98 report? It seems to be packaged for Debian, but the license seems incompatible. (I just am wondering because I have programs that include small parts of it). http://packages.debian.org/changelogs/pool/main/h/haskell98-report/haskell98-report_20030706-2/haskell98-report.copyright
23:55:43 <Itkovian> meuning
23:56:54 <xerox> morning
