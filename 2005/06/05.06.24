00:00:38 <shapr> I haven't even thought about it so far.
00:00:51 <shapr> But I could see who's available.
00:00:53 <adept> shapr: code could surely be better if I had a nice example of using QuickCheck with complex data structures ;)
00:01:19 <adept> shapr: but contest is starting this evening (our local time, i mean)
00:01:53 <shapr> In that case, it's unlikely I'll seriously compete. I may hack on it for my own entertainment though.
00:02:08 <shapr> Do you have an example data structure?
00:02:33 <shapr> I happen to have some experience with QuickCheck, I'd be happy to write up an example for you.
00:04:01 * earthy will not compete in icfp (grm, again)
00:04:10 <shapr> Have you tried my prototype test-driven-development version of QuickCheck?
00:04:23 <adept> well, something like typical parser-related stuff like:
00:04:23 <adept> data Smthng = Simple | MoreComplex Int | EvenMoreComples Int Int String
00:04:33 <adept> shapr: no, where can I take a look?
00:04:58 <shapr> http://www.scannedinavian.org/~shae/qc-tdd.tgz
00:06:07 <shapr> The idea is simple, when a generated test case fails, save the (seed,size) pair into a fail file.
00:08:02 <shapr> Because QuickCheck doesn't know the name of properties that fail, I've hacked the batch execution script to save the name of the Haskell source file and the property, and then move the 'fail file' to Haskellfilename.hs.qc The batch execution script also deals with the name of the property.
00:08:25 <shapr> Though I forget whether I explicitly pass the name of the property or include it afterwards into the renamed file.
00:08:43 <shapr> In any case, the next time you run the batch script, it re-runs the failing cases.
00:09:29 <shapr> On the downside, it doesn't preserve failing cases for later re-test, which it should do. That wouldn't be hard to add though.
00:10:18 <shapr> I'd like to add the ability to test values directly in a Property, then QuickCheck would do unit testing also.
00:10:28 <shapr> Once again, probably simple, but I just haven't done it.
00:10:31 <adept> you mean, it retests once, and forgets about previously-failing cases, even if they fail again?
00:10:49 <shapr> If they fail again, they'll go back into the fail file.
00:11:24 <adept> shapr: then i dont understand "On the downside, it doesn't preserve failing cases for later re-test, which it should do" part :(
00:11:58 <shapr> In commercial development, previously failing code often sneaks back into the application.
00:12:12 <shapr> So in reality, all failing cases should be saved for future test runs.
00:13:25 <shapr> If any inputs failed, they should be preserved. They should only be removed if you have a bunch of inputs that are from the same bug, because you'll only need one to check for that bug in the future.
00:13:34 <adept> ah, even if something was fixed and test data no longer cause code to fail, we should save them for future regressions, right?
00:13:41 <shapr> Yes, exactly.
00:14:47 <shapr> But you also want your unit tests to run in less than five seconds, otherwise your developers won't run the tests.
00:15:40 <adept> shapr: or you have to have something like CruiseControl for haskell :)
00:15:47 <shapr> So you want about one saved test for each bug that has been fixed.
00:15:59 <shapr> I've heard about CruiseControl, but I don't know what it does.
00:16:02 * shapr asks Google
00:17:52 <shapr> Aha
00:18:05 <shapr> I have something vaguely related to that for my own use.
00:18:17 <shapr> http://www.haskell.org/hawiki/HaskellMode
00:18:56 <shapr> I wrote one-button unit-testing for haskell-mode in emacs. It hooks into the compile-command.
00:19:41 <shapr> A friend of mine suggested zero-button testing, I've been thinking about how to do that. I think that's what CruiseControl does.
00:20:39 <shapr> darcs has some neat features that are good for software testing, you can hook the record command to run all the tests and only save the changes if the tests pass. You can also use the 'trackdown' command to find out when a bug got into the darcs repository.
00:20:41 <michaelw> shapr: you're abusing local variables there :)  won't run on anybody else's computer...
00:21:17 <shapr> True, but they can either change the value of the Local Variable or send me an email describing a better way.
00:21:30 <Pseudonym> Night everyone.
00:21:32 <Pseudonym> Gotta go.
00:21:40 <michaelw> erm, whatever
00:21:41 <shapr> I use that Local Var trick for one button testing in a bunch of languages, works fine.
00:21:45 <shapr> Do you know a better way?
00:23:05 <michaelw> shapr: also Aegis is worth a look, it's quite strict: if you fix a problem, you need to check in a test which fails with the old version and succeeds with the new one, otherwise the commit is rejected :)
00:23:07 <shapr> hi Trevion, how's code?
00:23:15 <Trevion> hey shapr
00:23:17 <shapr> Yeah, but Aegis is too much for me.
00:23:29 <Trevion> It was enough to get me a diploma..
00:23:31 <shapr> I prefer darcs rather anarchic style.
00:23:35 <adept> shapr: yep, CruiseCntrol is basically run-test-on-commit, only it does it server-side and after commit, not before. If something breaks, it 'blames" relevent developer over email. Plus, it saves history of builds/testruns
00:23:46 <michaelw> shapr: make it configurable (defcustom *run-unit-test* ...)
00:24:12 <xerox> 'morning!
00:24:15 <shapr> hiya xerox
00:24:43 <shapr> Or maybe I could switch to darcs integration and run the darcs unit test script?
00:25:13 <shapr> That would be easy enough to figure out with elisp, 1. is this buffer in a darcs repo 2. if so, run the test script
00:25:27 <shapr> Trevion: Have you tried darcs?
00:27:04 <Trevion> The only multi-person projects I've been involved in were tied to CVS.
00:27:25 <Trevion> So, I've grown a hatred for CVS, but no love for anything else yet.  ;-)
00:28:27 <shapr> The only multi-person projects I've been involved in required months of persuasion on my part to start using CVS.
00:28:29 <dcoutts_> dons, ping
00:28:37 <shapr> That is, commercia projects.
00:29:26 * Trevion laughs
00:29:57 <Trevion> I guess that's the advantage to school projects: the profs kept us from making most of the really stupid mistakes around.
00:30:06 <shapr> Only reason they started using CVS was that one of the developers lost six weeks of work by deleting the wrong backup folder.
00:31:35 <Trevion> Well, I did rm -f * when I meant to rm -f *~ once...
00:31:41 <shapr> yikes
00:31:52 <Trevion> Yeah, my partner almost murdered me on the spot...
00:31:58 * ski managed to 'nickserv ghost' himself ..
00:32:39 <shapr> I had a co-sysadmin who did rm -rf /lib on a SunOS box once, and my boss had sold the media and serial number to make a quick buck.
00:33:46 <shapr> We had agreed to have Netscape server installed by that afternoon. Didn't happen, of course.
00:34:36 * Trevion laughs
00:45:51 <tuomov> I just heard a few days ago of people in some commercial projects using cvs... from a shared working directory
00:46:11 <shapr> !
00:46:16 <yain> cool.
00:46:47 <shapr> saasta!
00:47:27 * shapr tries be creative
00:47:35 <shapr> pirupaskaa!
00:48:08 <shapr> hei tuomov, opitko Haskellia?
00:48:12 * shapr grins evilly
00:48:42 <tuomov> opin joskus... viime aikoina on ollut vähän hiljaisempaa koodauksen kanssa
00:49:12 <tuomov> bought a flat, switching towns, etc.
00:49:30 <shapr> Minä ymmärrän.
00:49:36 <shapr> I dig it
00:49:39 <tuomov> should be moving seen to a summer cottage for the next month, until I can move to the flat in august
00:49:50 <tuomov> s/seen/soon/
00:50:08 <shapr> btw, is pirupaskaa completely wrong?
00:50:30 <shapr> I hope it's actually humorous.
00:50:49 <tuomov> I guess it should be "pirunpaskaa", but although google finds a few pages with such a word, I don't think I've ever heard anyone really use it
00:51:04 <shapr> Ah, I was somewhat creative then. Spiffy.
00:52:34 <tuomov> actually... now that I think of it... some foul-smelling tree resin might be called "pirunpaska"
00:53:12 <shapr> That's a very descriptive name for tree sap.
00:53:23 <tuomov> asafoetida
00:54:17 <shapr> Foetid is the Latin root for several stench words.
00:55:03 <tuomov> It should be dyvelsträck in swedish
00:55:08 <reffie> does rebellion ever make a difference?
00:55:31 <shapr> I think it's the root for fetid, effluvium, and some others. Oh, dictionary.com says effluvium has a different root.
00:55:41 <shapr> reffie: Yes, respectful rebellion works nicely.
00:55:55 <shapr> That's the Gandhi strategy.
00:56:43 <shapr> tuomov: That's a nifty bit of vocabulary, thanks!
00:56:47 * shapr boings happily
00:57:08 <tuomov> According to wikipedia "Devil's Dung" should also mean the same thing in some dialects of english
00:57:10 <wli> shapr: .us politics etc.?
00:57:12 <tuomov> http://en.wikipedia.org/wiki/Asafoetida
00:57:31 <adept> shapr: while trying you QuickCheck, I stumbled upon this:
00:57:31 <adept> Top level:
00:57:31 <adept>     No instance for (Show (IO ()))
00:57:31 <adept>       arising from use of `print' at Top level
00:57:31 <adept>     Probable fix: add an instance declaration for (Show (IO ()))
00:57:32 <adept>     In a 'do' expression: print it
00:57:49 <shapr> wli: Public use of P2P would be a nice show of the Gandhi approach.
00:57:53 <adept> shapr: frankly, I have no idea where this comes from. You? :)
00:58:20 <shapr> Oh speaking of which, I thought of a nice simple trick, if all digital music players could send and receive music directly via wifi or irda, the MPAA would be SOL.
00:59:07 <shapr> In fact, make every music player a read-only wifi server, and make it easy to script your player to copy over tracks with certain keywords.
00:59:30 <shapr> adept: QuickCheck doesn't handle IO at all. QuickCheckM sort of handles monadic code, but still not IO.
00:59:57 <shapr> Though that sounds like a bug in my code, actually.
01:00:55 <dons> dcoutts, if you're asking about OpenBSD.. ports almost done. but icfp is going to get in the way. i'll  post you an url to the binary after the weekend's over.
01:13:25 <seidan> doh! all-dicts killed lambdabot :(
01:14:24 <adept> shapr: seems like it;s a bug in my generator/properties, though :)
01:20:34 <shapr> g'mornin JaffaCake
01:20:45 <JaffaCake> mornin'
01:25:15 <Lemmih> Hacking something cool, JaffaCake?
01:25:21 * xerox is becoming a child again, he's playing with *coloured paper* !
01:25:33 <shapr> Oh, that's fun.
01:29:23 <JaffaCake> Lemmih: not hacking right now, reading all the GHC surveys...
01:33:50 <drbean> @index prime
01:33:51 <lambdabot> Data.HashTable
01:35:12 <michaelw> JaffaCake: what was the absolute number of participants, btw?
01:35:38 <JaffaCake> we got 609 responses, as of a week or so ago
01:35:45 <shapr> cool!
01:35:49 <JaffaCake> that reminds me, I better take the link down now
01:36:20 <JaffaCake> yeah, 609 is great, but some poor bugger has to read all those comments :(
01:36:34 <shapr> Heh
01:36:40 <shapr> I've read much of them already.
01:37:11 <JaffaCake> a few surprises in there for me... I didn't think so many people thought that the error messages could be better, for example
01:37:21 <shapr> Have you considered a simple sort by most common word for each category to start out?
01:37:26 <Lemmih> @ghc
01:37:35 <dons> seidan, your @all-dicts command seems to work now. not sure why it died before.
01:37:48 <shapr> That would be easy enough to do with a short shellscript
01:37:48 <dons> hmm...
01:38:04 <JaffaCake> shapr: that's a good idea, but i've done it now anyway
01:38:31 <JaffaCake> most common word is probably "slow" :)
01:38:34 <shapr> haha
01:38:39 <JaffaCake> followed by "big"
01:38:43 * shapr laughs more
01:38:52 <shapr> and then 'better error messages' ?
01:39:08 <dons> there was a reason for the dinosaur logo, right Jaffacake?
01:39:17 <shapr> Can -fPIC and -split-objs work together?
01:39:30 <lambdabot>  All of the type variables in the constraint are already in scope (
01:39:30 <lambdabot> at least one must be universally quantified here)
01:39:34 <shapr> Wouldn't that decrease executable size dramatically?
01:39:39 <JaffaCake> dons: it was from a poster that Sigbjorn made ages ago.. "GHC: building a better dinosaur"
01:39:51 <dons> hehe
01:39:57 <JaffaCake> shapr: why d'you want -split-objs and -fPIC?
01:40:16 <JaffaCake> you normally use -fPIC if you're going to build a shared library
01:40:29 <shapr> As I understand it, -split-objs cuts libs into smaller pieces, and -fPIC links to shared libs...
01:40:35 <shapr> Oh, right.
01:40:57 <dcoutts_> dons, re: OpenBSD ok, thanks. Good luck on icfp!
01:40:58 <shapr> I guess the overhead of having each top level lib chunk in its own lib would be prohibitive.
01:41:04 <JaffaCake> with shared libs, we don't really need -split-objs, which is nice
01:41:12 <JaffaCake> yes
01:41:30 <dons> dcoutts_, you in this year?
01:41:34 <shapr> It would decrease memory use somewhat, wouldn't it?
01:41:37 <dcoutts_> dons, yes
01:41:46 <dons> good luck yourself, then!
01:41:51 <dcoutts_> :-)
01:42:10 <JaffaCake> shapr: what would decrease memory usage? shared libs?
01:42:16 * xerox is mostly glued with his paperwork
01:42:24 <dons> oh, one question about gtk2hs -- can I do an install without registering the libs with ghc?
01:42:25 <dcoutts_> dons, I wonder how many Haskell teams we'll have enter this year
01:42:42 <dcoutts_> dons, yes, ./configure --enable-packager-mode
01:42:47 <dons> OpenBSD uses a `fake' install framework to build packages.
01:42:52 <dons> ah, that's what I want :)
01:43:11 <dons> that's the only issue I've had with the package
01:43:12 <dcoutts_> Gentoo does too, you can check out my gtk2hs-0.9.8.ebuild
01:43:22 <shapr> JaffaCake: Oh hey, you mentioned a possible bug day / performance day (week?) for GHC soon. I'd like to participate, and some other people I spoke to were also interested. What do you think about doing it 'the open source way' and co-ordinating a distributed bug squashing party via email and/or irc?
01:43:27 <dons> dcoutts_: ok. great!
01:43:52 <dons> yeah. re icfp, you guys inspired us in .au (or me at least) to have a go!
01:43:59 <dcoutts_> cool!
01:45:08 <JaffaCake> shapr: sure - it's more likely to be a performance week (or two), and co-ordinating by email would probably be best.  Investigating each issue tends to take at least a day, and larger fixes can take several.
01:45:14 <shapr> The number of GHC-clueful developers has increased, so you'd have some immediately qualified people. A bug squashing party could have the benefit of introducing more people to GHC internals. You might end up with a lot more bugs found and fixed as well.
01:45:43 <dcoutts_> I'd like to take part in a GHC perf bug day/week
01:45:49 <JaffaCake> that's a good point
01:46:10 <JaffaCake> right, we'll announce something soon, then
01:46:13 <shapr> spiffy :-)
01:46:41 <JaffaCake> in the meantime, might be a good idea to collect things that you think are too slow
01:46:45 <shapr> If you know more info before the end of the month, I'd like to put it into my next TMR editorial.,
01:47:08 <dons> I've been meaning to chase up some of the newer nightly build failures on OpenBSD too.would  be good to do that soon
01:47:10 <shapr> Fixing the re-link that --make always forces would save me a lot of time.
01:47:35 <shapr> But I think you've already done that for the dev version, yes?
01:47:36 <dcoutts_> JaffaCake, shapr, start a wiki page on GHC perf issues so people can contribute their test cases / perf bugs
01:47:40 <JaffaCake> ah yes... I looked into that, not difficult, but not a one-liner
01:47:45 <dons> shapr, didn't that get doen?
01:47:54 <dons> oh. maybe not done then.
01:49:54 <shapr> dcoutts_: Yeah, good idea. I'll do that after shopping.
01:50:16 * shapr runs off to improve local cat litter-acy.
01:55:19 <adept> shapr: you said that you can show how generators for QuickCheck have to be defined. Ready for a couple of questions?
02:10:47 <dcoutts_> JaffaCake, here's an idea for haddock, make the binary format independant of the sizeOf Int, so the .haddock files produced on x86 & amd64 can be compatible,
02:11:25 <JaffaCake> I *think* the interfaces don't contain any Ints, so it's ok (might be wrong, though)
02:11:34 * Itkovian is steaming in his own sweat.
02:11:51 <JaffaCake> ah - the list representation contains an Int for the length
02:11:55 <dcoutts_> well on my amd64 haddock doesn't like the .haddock files produced by x86
02:12:07 <JaffaCake> should really make that an Int32
02:12:25 <dcoutts_> all it needs is to change haddock's Binary module to only have the 32bit case for Int, and make serialising an Int > 2^32 on 64bit machines a runtime error
02:12:39 <JaffaCake> yep
02:13:14 <dcoutts_> the Binary module is endian independant (I think) so then it'd be compatible across all platforms
02:13:31 <JaffaCake> yes, that's right
02:13:44 <shapr> adept: sure
02:13:46 <dcoutts_> at least for the specific use of haddock - or in general if one uses Int32 / Int64 rather than Int
02:14:16 <shapr> Itkovian: You're wearing too many clothes! On the other hand - http://www.scannedinavian.org/~shae/SkinHack.GIF
02:14:43 <shapr> salut Skal
02:14:50 <Itkovian> do I really want our sysadmin to see that url?
02:15:05 <shapr> It's just humorous :-)
02:15:15 <Itkovian> ok, it's not you ;-)
02:15:20 <shapr> Um, no.
02:15:24 <Itkovian> heh
02:15:57 <shapr> All of my skinnyhacking is done away from cameras. I am far too shy for such exhibitionism.
02:16:03 <Itkovian> OTOH it will immediately be clear when they are not working ...
02:16:14 <Itkovian> but surfing around ...
02:16:19 <shapr> heh
02:17:24 <shapr> JaffaCake: Vague idea of when the BugSquashingParty will happen?
02:18:17 <JaffaCake> maybe in a couple of weeks?  don't know, I've got lots of multi-processor stuff to do
02:18:35 <shapr> I can help there too :-)
02:19:19 <shapr> At least, with bug finding.
02:19:35 <JaffaCake> you're welcome - I have some performance results to investigate, and more research/hacking to do
02:19:54 <JaffaCake> seen the paper BTW?
02:19:55 <shapr> Can I file patches against the fptools darcs repo?
02:19:57 <shapr> no?
02:20:10 <shapr> I've been completely out of touch the last few weeks.
02:20:15 <JaffaCake> http://www.haskell.org/~simonmar/bib/bib.html
02:20:21 <JaffaCake> 2nd from the top
02:20:33 <shapr> I've spent most of my time walking around in the sunlight, playing saxophone, investigating number theory, that sort of stuff.
02:20:45 <JaffaCake> heh, nice
02:21:07 * JaffaCake hasn't seen the sunlight for several years
02:21:37 <dons> :}
02:22:09 <shapr> If I haven't already advertised this nifty book, check out "Dead Reckoning : Calculating Without Instruments" by Ronald W. Doerfler - http://www.amazon.co.uk/exec/obidos/ASIN/0884150879
02:22:34 <shapr> Oooh, cool paper. I shall immediately post this on LtU.
02:23:45 <shapr> LtU hasn't been very interesting recently. Maybe I've been exposed to too much sunlight, and too many unicycles.
02:24:52 * shapr sends an email to JaffaCake with an elemental-photonic/x-sunlight attachment
02:25:14 <Itkovian> ok shapr I have added it to my wish-list
02:25:23 * JaffaCake unfurls his solar sail
02:25:25 <shapr> haha!
02:25:56 <shapr> Oh, and my fiancee got me "Imagining Numbers (particularly the square root of minus fifteen)" yesterday.
02:27:39 <adept> shapr: i tried to "darcs setpref test "./quickcheck source.hs", but got "execvp: ./quickcheck: Permission denied" :(
02:27:39 <adept> then i tried to invoke quickcheck from the makefile, but got the same error. Have you had similar experience and means for circumventing it?
02:27:40 <Itkovian> fiancee, eh ... so when is the wedding planned?
02:27:42 <shapr> I haven't started it yet, I don't know if it's any good.
02:27:52 <Itkovian> the wedding or the book?
02:27:55 <Itkovian> ;-)
02:27:58 <shapr> both actually.
02:28:05 <dons> adept, lookkkks like a chmod issue
02:28:10 <shapr> adept: is quickcheck +x ?
02:29:19 <adept> shapr: it is in the working directory/repository. But seems like darcs checks it out to /tmp/testing like 0644 :(
02:29:47 <adept> i circumvented it by "chmod 0755 quickcheck" in the makefile taget test, but it seems to me so hackish ...
02:31:10 <dons> adept, darcs doesn't mess with permissions. known issue. usually you use the --set-script-executable flag, or add a hook to fixup permissions on systems that support that.
02:34:52 <adept> dons: -set-script-executable is a flag for which command exactly?
02:36:26 <svens> hi
02:37:35 <dons> darcs pull
02:37:36 <dons>              --set-scripts-executable       make scripts executable
02:37:41 <Lemmih> Hello svens.
02:37:55 <dcoutts_> TFK, ping
02:39:06 <adept> dons: thanks
02:42:24 <shapr> How does it know what files are scripts?
02:42:57 <dons> I think it checks if the first few  bytes are #! -- but maybe I'm wrong on that.
02:43:16 <dons> you can also set scripts to be run to do the chmods for you
02:43:21 <shapr> Wouldn't that be true of any executable?
02:43:46 <shapr> I always thought #! was the first two bytes of any executable, and that's how the OS knows it's an executable.
02:44:44 <dons> paprika$ od -c /bin/ls  | head
02:44:45 <dons> 0000000  177   E   L   F
02:44:58 <yain> that could be false for any "executable"
02:45:09 <shapr> oh
02:45:23 <shapr> So what's the story behind the shebang hack then?
02:45:33 <shapr> @foldoc shebang
02:45:35 <lambdabot> *** "shebang" foldoc "The Free On-line Dictionary of Computing (27
02:45:35 <lambdabot> SEP 03)"
02:45:35 <lambdabot> shebang
02:45:35 <lambdabot>  
02:45:35 <lambdabot>    <operating system> (Or "shebang line", "{bang path}")
02:45:36 <lambdabot>    /sh*-bang'/ (From "{sharp}" and "{bang}") The {magic cookie}
02:45:38 <lambdabot>    "#!" used in {Unix} to mark the start of a {script}, e.g.
02:45:40 <lambdabot> [37 @more lines]
02:45:58 <dcoutts_> Any windows users around that want to try out the gtk2hs-0.9.8.exe windows installer?
02:46:24 <shapr> @more
02:46:25 <lambdabot> a
02:46:25 <lambdabot>    {shell script} or {Perl script}.
02:46:25 <lambdabot>  
02:46:25 <lambdabot>    Under {Unix}, if the first two bytes of an {executable} file
02:46:25 <lambdabot>    are "#!", the {kernel} treats the file as a script rather
02:46:26 <lambdabot> than
02:46:28 <lambdabot>    a {machine code} program.  The word following the "!" (i.e.,
02:46:30 <lambdabot> [30 @more lines]
02:46:36 <shapr> Hm
02:46:56 <shapr> That's interesting. Nice to fix holes in my knowledge.
02:47:26 <Itkovian> what knowledge?
02:48:00 <shapr> Like, I thought the #! start of a script was a hack much like the original traceroute, I thought it was not part of the original design, just happened to be extremely useful.
02:48:18 <Itkovian> hmm
02:48:47 <shapr> afaik, the traceroute tool was an aftermarket add-on because some bright person realized that sending packets with incrementing TTLs could show the route.
02:48:52 <Itkovian> I just thought it made clear to the executing thingie that it needed to load the executable after the #! to execute the rest
02:49:14 <Itkovian> shapr: hmm, I wonder if they all take the same route ...
02:49:26 <shapr> They often don't
02:49:34 <Itkovian> I thought so
02:49:35 <shapr> traceroute marks that also.
02:49:55 <shapr> My ISP is even worse, their routing table is screwed so the route is asymmetric.
02:50:10 <Itkovian> how can it know that the packet with TTL 5 went through the four same routers as the previous poacket with TTL 4 ?
02:50:27 <shapr> It doesn't, it sends three packets with TTL 4
02:50:33 <shapr> Then it compares routes.
02:50:39 <Itkovian> ic.
02:50:58 <Itkovian> but the first packet with TTL 5 may be sent along a different route entirely, no?
02:51:12 <shapr> There are a bunch of nifty interactive packet building tools around, but I'd like to write my own that sits on top of the House TCP/IP stack.
02:51:15 <Itkovian> say A B C D, A B C D, A B C E, A F G H I
02:51:44 <shapr> Sure, it's possible, but routes usually differ because of congestion, so the packets are sent with a small delay.
02:52:23 <shapr> I can point you to a bunch of powerful tools if you wish.
02:52:55 <shapr> I've recently discovered that mac address flooding is strongly discouraged by my ISP.
02:53:03 <shapr> hoi ghQst
02:53:29 <ghQst> hey, does anyone know why winhugs doesnt print the result and hugs (dos version) does
02:53:31 <ghQst> ?
02:53:58 <Lemmih> The result of what?
02:54:07 <shapr> Yeah, I think that's insufficient detail.
02:54:15 <ghQst> if i type 1+2 it should print 3
02:54:24 <ghQst> it works in hugs, but not in winhugs
02:54:31 <ghQst> i just get an empty line
02:54:53 <shapr> Itkovian: If you like investigating networks and coming up with lateral approaches that get around safeguards, I can point you to much in the way of useful information.
02:55:22 <ghQst> any idea why ?
02:55:40 <shapr> Sometimes I think I have enough lateral thinking for an army of crabs, but so little direct thinking I couldn't finish a game of hopscotch.
02:55:43 <Itkovian> nah, I was just curious
02:55:52 <Lemmih> ghQst: Sorry, haven't got a Windows box.
02:56:16 <shapr> I'd guess that winhugs doesn't direct stdout/stderr, it's probably there to run graphical programs.
02:56:24 <shapr> That's true of python.exe and pythonw.exe at least.
02:56:52 <ghQst> hmm, i dont recall ever having this problem :(
02:57:03 * shapr barely recalls having windows
02:57:09 <ghQst> i had installed it on another box
02:57:18 <shapr> I actually used windows a coupla days ago, it felt so weird.
02:57:26 <Lemmih> You could reinstall and/or reboot.
02:57:27 <shapr> I had forgotten how ponderous it is.
02:57:38 * earthy has windows... chicago. on 16 3.5" disks. somewhere.
02:57:55 <shapr> I have Win 3.11
02:57:56 <ghQst> on my laptop it works :/
02:58:07 <shapr> Why can't you use hugs?
02:58:15 <shapr> Or, why would you rather use winhugs?
02:58:42 <earthy> anyway, I'm glad to have been free of Microsoft OS'es for the past 10 years already
02:59:20 <ghQst> it opens up automaticly when i double click on a .hs file
02:59:34 <Itkovian> Freedom!
03:00:17 <shapr> ghQst: You could change the association.
03:00:32 <shapr> salut cognominal
03:00:35 <ghQst> ill try reinstalling it first
03:00:44 <ghQst> looks like the latest version is bugged
03:00:55 <shapr> ik begrijp het niet!
03:02:36 <cognominal> hi shapr
03:02:39 <shapr> How's code?
03:03:50 * shapr reads "Haskel on a Shared Memory Multiprocessor"
03:05:15 <ghQst> ok, the other version seems to work :)
03:06:08 <shapr> So, you think someone is willing to hire me to port GHC to the Cell and add some region allocation so that declarative parallelism will become a commercial reality?
03:06:39 <shapr> Why do I doubt that?
03:06:49 <Lemmih> Phew.
03:06:57 * Lemmih finally got around to update his website.
03:07:05 <JaffaCake> try IBM
03:07:28 <shapr> Or maybe one of the PS3 dev companies. I *know* they need easy access to parallelism.
03:07:47 <JaffaCake> heh, and IBM isn't giving to them
03:08:07 <JaffaCake> symmetric parallelism is the way to go
03:08:36 <shapr> I liked Duncan's suggestion about putting the RTS on the boss chip, and slaving tasks to all the sidekicks.
03:09:08 <shapr> Especially for Chak's Parallel array code. That's a nice dream :-)
03:09:19 <JaffaCake> if the cells are going to run Haskell code, they still need bits of the RTS
03:10:06 <shapr> Or you could take the Oleg approach, runtime generated code for the sidekicks.
03:10:16 <JaffaCake> yes, I think the cells are really for running specific carefully-code algorithms
03:10:36 <shapr> That's why I'd like to take Chak's approach.
03:11:32 <shapr> I think that's the most natural way to handle it, but I'd like to hear any other ideas.
03:11:44 <kzm> JaffaCake, is it a known problem that executables built with profiling segv's when run with -xc?
03:12:12 <JaffaCake> kzm: hmm, that does sound familiar
03:12:18 * JaffaCake pulls out google desktop search
03:12:43 <kzm> I couldn't find anything on the net.  A few segv reports, but nothing that specific.
03:12:52 <kzm> (Did I report it already?)
03:13:04 * kzm scratches his head.
03:13:05 <JaffaCake> is this windows?
03:13:25 <kzm> No, Ubuntu 5.04, GHC 6.4 -- compiled from sources,  I think.
03:14:35 <Lemmih> That happens for me too on Debian with GHC 6.4
03:14:53 <kzm> Lemmih, great!  Uh, I mean...well, you know what I mean. :-)
03:15:04 <Lemmih> heh (:
03:15:57 <JaffaCake> kzm: can you report it?  I can't dig up anything right now, but there are a couple of reports of profiling crashes in the bug database IIRC
03:16:22 <kzm> JaffaCake, uh, I just did.
03:16:31 <JaffaCake> oh :)
03:16:40 <kzm> Seriously, where to?  g-h-users -bugs SourceForge?
03:16:49 <JaffaCake> bugs or sourceforge
03:17:06 <kzm> Sure thing.
03:17:28 <kzm> I do wish GHC would include file and line numbers for run-time errors.
03:17:56 * Lemmih wonders why there's no HSrts_debug_p (:
03:18:17 <kzm> (sorry phone call)
03:18:51 <kzm> I do a bit of it with CPP, but some things get tricky -- e.g. (!) for array indexes.
03:20:08 <kzm> I have a funny out-of-bounds error, and I have just no clue where it comes from.  I struggled with Hat yesterday, but it doesn't accept UArrays, then Words, and finally, it doesn't do STArrays.  At which point I gave up rewriting my code to accomodate it.
03:21:05 <tromp> you cant figure it out with some putStr debugging?
03:21:35 <TFK> dcoutts_, pong
03:22:30 <kzm> Yep - or Debug.Trace.trace
03:22:46 <kzm> But it is a bit cumbersome.
03:23:10 <kzm> Perhaps if I do the trace inserts as separate lines, I can have a separate darcs patch that I can pivot in when I need it? :-)
03:24:01 <shapr> Is there something like Python's __debug__ that automatically gets removed when -O is on?
03:24:36 <xerox> Oh, it would be really nice.
03:25:01 <JaffaCake> what does __debug__ do?
03:28:55 <kzm> Actually, maybe ! isn't so hard to replace with a __LINE__ and __FILE__ macro, after all.
03:32:53 <kzm> HAH!  I found it.  The good old "staring contest" debugging method prevailed yet again!  (Who needs wimpy debuggers or error messages anyway)
03:33:44 * kzm listens to the sound of a bug going >squish<.
03:41:22 <bourbaki> moin
03:45:29 <shapr> Wow, this paper kicks butt. This will really help my quest for more commercial Haskell use.
03:45:50 <shapr> JaffaCake: Shared-Memory GHC, w00!
03:46:10 <JaffaCake> shapr: glad you like it :)
03:46:28 <JaffaCake> there's still a lot to do, though
03:47:50 <shapr> __debug__ vaguely related to Debug.Trace.trace and friends, it's for code that's only used when there's a problem. I think it makes __debug__ True when -debug is on when building. When -O is on, __debug__ guarded code and assertions are completely removed.
03:47:55 <shapr> Like what?
03:49:00 <JaffaCake> i see, thanks
03:49:02 <shapr> I've suggested a multiprocessor benchmark on the Great Computer Language Shootout. That suggestion met with grumbles from some of the proselytizers for other languages.
03:49:19 <JaffaCake> heh
03:49:40 <JaffaCake> what's still to do... well, performance isn't all that great so far
03:49:43 <shapr> It seems that OCaml won't be able to use SMP soon.
03:49:56 <JaffaCake> we have some examples that go slower... a *lot* slower
03:50:02 <shapr> Which ones?
03:50:12 <shapr> Do you have some sort of SMP profiling?
03:50:13 <JaffaCake> just simple STM and MVar stuff
03:50:23 <JaffaCake> not really
03:51:00 <JaffaCake> we need to distribute some data structures across threads to reduce locking, and implement some kind of CPU affinity to avoid threads bouncing between CPUs
03:51:05 <shapr> It would be nice to have a separate, or at least more detailed profile for STM and MVar, since they're the limiting factor. (I think?)
03:51:51 <JaffaCake> sure.  We know where some of the big problems are right now, so I think we'll attack those first.
03:51:52 <shapr> CPU affinity is easily done with bound threads, but that kills the GHC advantage of the coroutines plus OS thread pool.
03:52:05 <JaffaCake> yes
03:52:27 <shapr> That advantage caused more grumbles at a different time on the shootout mailing list.
03:52:40 <JaffaCake> but that's a good point, I hadn't thought of experimenting with forkOS to see if that helps
03:53:06 <shapr> At least on Linux, CPU affinity is TLS, right?
03:53:08 <JaffaCake> how's GHC doing in the shootout these days?  I haven't checked
03:53:14 <JaffaCake> TLS?
03:53:20 <shapr> Thread Local State
03:53:36 <shapr> I think you can also inherit cpu affinity...
03:53:39 <shapr> but I'd have to reread the docs.
03:54:01 <JaffaCake> I think it's done purely in the OS
03:54:23 <adept> JaffaCake: last time i took a lot a lot of tests where in *error* state ...
03:54:31 <JaffaCake> oh dear
03:55:39 <shapr> GHC is number one for lines of code, that's my priority anyway.
03:56:02 <jlouis>  Time to problem announcement:  0d 03:03:11 ... I still have to read it, heh
03:56:48 <JaffaCake> that's nice
03:57:16 <shapr> Speaking of grumbles, an Eiffel advocate loudly proclaimed that incremental algorithms were by far most elegantly done in Eiffel, and that sparked off a discussion that was thoroughly flatted by Jeremy Gibbons' pi spigot code.
03:57:49 <shapr> The Shootout mailing list has been many hours of entertainment and social instruction for me.
03:59:13 <Spark> heh
03:59:38 <zugzwang> is plargleflarp/buddha known not to work with ghc6.4? Or am I doing something wrong? It is looking for non-existent files corresponding to hierarchical libs e.g. /usr/lib/ghc-6.4/buddha/ifaces/System.IO.i
03:59:40 <shapr> The Eiffel guy said that longer and more explicit code was always more easily read, and more easily understood. The Pi Spigot was held up as an example in the other direction, that very short code can be even more easily read and understood, and still have the same result.
04:00:49 <shapr> I'm often tempted to document the most entertaining shootout discussions in my blog, but sometimes they're very embarassing for the forcefully enlightened.
04:00:50 <Spark> i think hes getting confused with "its smaller" and "its just been compressed to save screen space"
04:01:36 <shapr> Yeah, I agree. He has encountered the principle that made me choose Haskell as "best language so far."
04:01:56 <xerox> "pi spigot" ?
04:02:10 <Spark> if you expanded out perl programs to a sensible syntax, i wonder what they'd look like :)
04:02:14 <shapr> zugzwang: Doesn't buddha make the .i files itself? Or am I confused?
04:03:01 <shapr> zugzwang: Yeah, look at the path. I think buddha requires the interface info for the libs, and I hope can generate them itself.
04:03:03 <xerox> Spark, perl6?
04:03:12 <Spark> dont know anything about perl6
04:03:29 <shapr> Perl6 is pretty cool, it has a lot of powerful stuff that you see in Haskell.
04:04:22 <jlouis> shapr: is XEmacs generally more powerful than emacs?
04:04:34 <jlouis> ie, preview-latex seems rather nice
04:05:27 <shapr> Anyway, I used to think that power and succintness were tradeoffs, I thought higher level languages would always be more wasteful of cycles, etc.
04:06:05 <Spark> i think it all depends on how good the compiler is at understanding what you have described
04:06:10 <shapr> When I switched from Java to Python I realized it's not a linear tradeoff at all. Python has a greater total power/expressiveness than Java. When I tried Haskell, I realized Haskell has far more than Python.
04:06:18 <Spark> semantic modelling and stuff
04:06:30 <TFK> shapr, hold that thought.
04:06:31 <shapr> I discovered that simpler systems can be more efficient and more powerful.
04:07:06 <zugzwang> shapr: hmm... it has some .i files, just not all the ones I use... could be a problem with the installation (gentoo ebuild)... I'll look into it, thanks
04:07:50 <shapr> I think I see another simpler and more powerful system just a short way down the road too. I think categorically-based arrows without function lifting will be the basis of that.
04:08:09 <shapr> Of course, Philippa_ and a few other people have already seen that.
04:08:20 <shapr> And explained some of it to me, thankfully :-)
04:08:53 <zugzwang> jlouis: you can get preview-latex for gnu emacs too
04:09:07 <jlouis> zugzwang: ok, cool
04:09:15 <shapr> zugzwang: Yeah, preview-latex is more solid and has fewer bugs on gnumacs.
04:09:17 <shapr> er jlouis
04:09:18 <shapr> doh
04:09:27 <jlouis> haha
04:10:14 <shapr> xemacs does have benefits in overall usability, imho
04:10:29 <shapr> But gnumacs has more code available, and a more active coding community.
04:10:44 <jlouis> languages which expresses more per line were slower at the time when no optimizations were there at all
04:11:04 <TFK> I wonder how much slower was Icon at the time of its conception.
04:11:31 <shapr> Gnumacs has the downside of having RMS at its helm though.
04:11:36 <TFK> (Than other languages.)
04:12:45 * ski wishes there was a CT wizard around he could ask ..
04:13:54 <ski> hm
04:14:26 <earthy> he's a CT wizard, there's got to be a twist, a CT wizard, 's got such a supple wrist...
04:14:33 <adept> CT?
04:14:55 <earthy> how do you think he does it? I don't know... what makes him so good?
04:14:56 <ski> earthy : ?  who ?
04:15:14 <earthy> the CT wizard. :)
04:15:15 <shapr> ski: Probably I should organize an arrows mailing list and get a few people subscribed to discuss that next step.
04:16:19 <ski> (shapr : i wondered this morning if first,second,(***) maybe (should) make up a premonoidal functor ..)
04:16:22 <shapr> TFK: http://www.scannedinavian.com/2004-11-05.html
04:18:24 <TFK> What's "FCVO"?
04:18:42 <ski> for certain values of
04:19:09 <TFK> So... can you write a simple IRC client in one page of code? ;-)
04:19:32 <shapr> Hm, probably.
04:19:55 <TFK> Good, I'll come to you for pointers ;-)
04:20:34 <ski> shapr : heh, ok
04:21:02 <shapr> TFK: import Lambdabot
04:21:04 * shapr grins
04:21:20 <TFK> Does lambdabot have a generic IRC library?
04:21:33 * TFK decided on reading the RFC :-/
04:22:15 <ski> adept : Category Theory
04:23:23 <integral> @type mapM
04:23:30 <lambdabot> mapM :: forall b (m :: * -> *) a.
04:23:30 <lambdabot>    (Monad m) =>
04:23:30 <lambdabot>    (a -> m b) -> [a] -> m [b]
04:24:32 <adept> ppl, how can I record only part of the changes to the file using xemacs/darcsum? it always record all changes in the file :(
04:26:41 <dons> go to the shell, and type 'darcs record file'
04:26:52 <dons> then you'll get asked patch by patch
04:27:02 <shapr> Oh YEAH? Well go to shell!
04:27:02 <dons> TFK, yeah, it sort of does have a generic IRC lib
04:27:10 <dons> hehe
04:27:12 <adept> dons: heh :) this kind of undermine whole purpose of having darcs integration :)
04:27:13 * shapr grins
04:27:29 * JaffaCake just implemented nseive_bits for the shootout
04:27:34 <Spark> heh
04:27:34 <shapr> w00
04:27:39 <Spark> is it worth looking at category theory
04:27:42 <shapr> yes!
04:27:53 <Spark> is it more worth looking at category theory than something else
04:27:56 <TFK> dons, oh, IRC.hs?
04:28:10 <Philippa_> if you find value in theory for its own sake definitely - if not it depends on exactly what you're doing but it's pretty likely
04:28:12 <JaffaCake> anyone know what kind of machine the shootout numbers are measured on?
04:28:13 <Philippa_> CT's a good tool
04:28:19 <ski> Spark : please define 'something else'
04:28:50 <Spark> ski: take the average of all possible other things i guess :)
04:29:01 <ski> hehe
04:29:07 <Spark> the terminology keeps coming up i think
04:29:12 <Spark> in semantics related stuff
04:29:13 <Philippa> Spark: do you have an application in mind?
04:29:18 <Spark> homomorphisms
04:29:20 <Spark> nope
04:29:25 <dons> TFK, yeah. that'd do it
04:29:29 <ski> Philippa_ : you wouldn't happen to be a secret master of premonoidal functors ?
04:29:37 <TFK> D'uh :-/
04:29:45 <Philippa> not as such, my actual CT knowledge is pretty bare
04:29:47 <earthy> category theory is a very good tool
04:29:51 <ski> dang
04:29:52 <TFK> Any other modules that may  be of help?
04:30:00 <Philippa> on a good day I can remember more than just the laws that define functors :-)
04:30:09 <earthy> functors are simple
04:30:10 <dons> TFK, there's still some stuff in Lambdabot.hs you might need.
04:30:13 <earthy> monads, slightly harder
04:30:19 <earthy> natural transformations... harder still
04:30:22 <TFK> aye, thanks!
04:30:24 <ski> eh
04:30:26 <dons> Lambdabot.hs is probably all
04:30:27 <Philippa> yeah, I mostly grok monads from a haskell/coding POV
04:30:28 <earthy> ;)
04:30:42 <Philippa> 'raw' CT is something I've not really done, and I've not applied it outside a computing context
04:30:43 <ski> monads are made up from functor and 2 natural transf.
04:30:52 <earthy> I won't open my Barr & Wells
04:30:59 <earthy> ski: um?
04:31:18 <ski> eta : I -> M   mu :: M . M -> M
04:31:29 <ski> also called, return and join
04:31:30 <Philippa> ski: that definition certainly helped me confirm my intuitions about monads
04:32:15 <earthy> hm.
04:32:23 <Philippa> join tells you that monads give you models of computation that have something like HOFs, which may or may not be a useful insight
04:32:27 <earthy> right. :) I meant 'harder to remember'
04:32:42 <ski> hah
04:33:12 <ski> (Philippa : i don't understand what you mean)
04:33:44 <Philippa> ski: join takes a computation yielding a computation, and gives you a computation. So it gives you the ability to return-and-run a computation
04:34:16 <xerox> structure-preserving transformation between structure-preserving transformation!
04:34:19 <ski> oh,hm
04:34:40 <ski> xerox : that'd be 2-morphisms, yes
04:34:47 <Spark> has anyone read that paper by matthias felleisen about the expressive power of programming languages
04:34:54 <Philippa> equivalently, it's the bit that makes the arrow representation of a monad an instance of ArrowApply
04:35:24 <ski> hm, you may be right that it contributes ..
04:36:58 <ski> (***) :: Arrow (~>) => (a0 ~> b0) -> (a1 ~> b1) -> ((a0,a1) ~> (b0,b1))
04:37:22 <ski> that is not a (bi)functor, in the general case (state) :(
04:38:37 <ski> because state is sequential, so you can't flip the parts back and forth
04:39:10 <ski> (think hughes remarked sometimes about that in some arrow paper)
04:39:23 <ski> s/times/thing/
04:39:47 <Philippa> yeah, that's kinda the point about *** - if you imagine that all arrows are infact ArrowProduct by analogy to ArrowSum, it's not a true product
04:40:01 <Philippa> it's a loosened pseudo-product which closer resembles the things people get up to in code
04:40:39 <ski> hm, why would imagining that make it not a true product ?
04:41:17 <ski> one could just state that it should be a true product (which will of course make the state instance invalid)
04:41:31 <Philippa> and require a tightening up of the laws
04:41:42 <ski> yep
04:41:58 <ski> that's what i meant by 'make it a true product'
04:41:59 <Philippa> which is kinda the point, them's not (just) arrows any more :-)
04:42:08 <ski> well
04:42:29 <ski> imo, they aren't 'just arrows' rn, either :/
04:42:29 <Philippa> as a strict tightening, everything that's a tightened-arrow is also an arrow, sure
04:42:58 <ski> (depends of course on what is actual definition of 'arrow' :)
04:43:18 <Philippa> has anybody suggested one other than Hughes' original?
04:43:24 <xerox> Are Haskell Arrows supposed to resemble CT arrows?
04:43:32 <ski> anyway, i'm wondering if (***) still would make a premonoidal functor, even in the state case ..
04:43:40 <ski> xerox : yes, at least partly
04:43:53 <Philippa> xerox: not exactly
04:44:08 <ski> :)
04:44:24 <bourbaki> is anyone in here familiar with the covariance matrix?
04:44:25 <Philippa> depends which exact category you think it's an arrow in
04:44:30 <ski> yes
04:44:43 <bourbaki> ski: was that yes ment for my question?
04:44:52 <ski> bourbaki : sorry, no
04:45:07 <ski> bourbaki : have no idea what that might be ..
04:45:11 <Philippa> bourbaki: not me, sorry
04:46:03 <ski> anyway, it seems to me that a premonoidal functor is not necessarily symmetric/commutative
04:46:20 <ski> it's sorta like two 'half' bifunctors
04:46:53 <ski> for every object A, you have a functor (A *), and a functor (* A)
04:47:01 <ski> (with some extra laws)
04:47:29 <ski> that gives you
04:47:39 <ski> @type Control.Arrow.first
04:47:46 <lambdabot> Control.Arrow.first :: forall (a :: * -> * -> *) d c b.
04:47:46 <lambdabot>         (Control.Arrow.Arrow a) =>
04:47:46 <lambdabot>         a b c -> a (b, d) (c, d)
04:47:47 <ski> @type Control.Arrow.second
04:47:49 <lambdabot> Control.Arrow.second :: forall (a :: * -> * -> *) c d b.
04:47:49 <lambdabot>         (Control.Arrow.Arrow a) =>
04:47:49 <lambdabot>         a b c -> a (d, b) (d, c)
04:47:52 <ski> i think
04:48:19 <ski> Philippa : following at all .. ?
04:52:36 <Philippa> ski: somewhat, but don't expect me to know if you're getting it right or not :-)
04:52:57 <ski> heh
04:53:08 <TFK> Hmph, too many dependencies.
04:53:42 <ski> the 'first' would be the functor map of the functor (, d), to speak haskell
04:54:03 <ski> while the 'second' would be the functor map of the functor (d ,)
04:55:27 <ski> (think i read about premonoidal functors in 'categories, types, structures' (iirc), Andrea Asperti, Giuseppe Longo (book online free))
04:56:24 <ski> i'm trying to figure out if (***) in e.g.  the state arrow instance actually satisfy making a premonoidal functor
04:56:57 <TFK> Erm, how can I make ghc eat C macros?
04:57:13 <ski> hm, --cpp, iirc ..
04:58:28 <TFK> It is so, thanks :-)
05:01:13 <ski> hm, back to the dirt^H^H^H^Hhard work of trying to understand the theory, i guess ..
05:01:17 <TFK> w00t! IRC.hs compiles.
05:01:43 <shapr> yay!
05:01:48 <Lemmih> hurrah!
05:01:59 <TFK> Indeed.
05:02:16 * TFK now tries to understand Lambdabot.hs
05:03:37 <TFK> liftIO... monads... o_O
05:03:43 <shapr> It's pretty easy.
05:03:52 <shapr> @index liftIO
05:03:53 <lambdabot> Control.Monad.Trans, Control.Monad.Reader, Control.Monad.Writer,
05:03:53 <lambdabot> Control.Monad.State, Control.Monad.RWS, Control.Monad.Cont, Control.
05:03:53 <lambdabot> Monad.Error, Control.Monad.List
05:04:08 <Philippa> TFK: liftIO just turns an IO action into an action in another monad
05:05:50 <TFK> This is a bit too complex for me. I think I'll just borrow IRC.hs for now ;-)
05:05:56 <ski> @type Control.Monad.Trans.liftIO
05:05:58 <lambdabot> Control.Monad.Trans.liftIO :: forall (m :: * -> *) a.
05:05:58 <lambdabot>           (Control.Monad.Trans.MonadIO m) =>
05:05:58 <lambdabot>           IO a -> m a
05:06:02 <shapr> TFK: There's an easier way...
05:06:07 <shapr> Look at BaseModule.hs
05:06:15 <TFK> Ah, yes, not doing anything!
05:06:30 <TFK> Ah, that kind of easier way.
05:06:52 <shapr> er, Base.hs
05:06:55 <TFK> Where does it live?
05:07:07 <TFK> ah, plugins
05:08:12 <TFK> Hmm, signals. I'll need those.
05:08:52 <TFK> Besides, I'm not sure that I'll be able to import Lambdabot, I don't think that I have hs-plugins installed on this box.
05:09:23 <shapr> lambdabot is roughly a typeclass with a method for each IRC signal.
05:09:57 <shapr> TBH, that's probably worth generalizing and automating.
05:10:04 <TFK> My needs are much more primitive.
05:11:50 <shapr> Actually, a protocol handler generators is a neat idea.
05:17:40 <michaelw> shapr: start here http://etiquette.sourceforge.net/
05:18:51 <xerox> shapr, Twisted Matrix?
05:19:03 <shapr> What about it?
05:19:22 <xerox> As "Protocol handler generator"
05:19:28 <shapr> Ah, good point.
05:19:33 <TFK> It's good for the kidneys.
05:24:17 <ski> hm, shapr, you said something the other day, i think about making words up, and googling for them mostly finds yourself ..
05:24:37 <shapr> Yes, you've done that?
05:24:41 <ski> well
05:24:43 <ski> almost
05:25:07 <ski> not made up, but seems almost noone else have used it on web
05:26:20 <ski> (words used as alternative meta-syntactic variables, etc ..)
05:26:27 <shapr> What words?
05:27:09 <ski> Zugol+BR, Z-Bul
05:27:47 <ski> Zugol stärker tandköttet !
05:27:47 * xerox eats some Zugol+BR, drinking his Z-Bul.
05:28:02 <ski> Z-Bul för det doftande löddret
05:28:39 <ski> xerox : well, you don't know how close you are :)
05:28:59 <ski> xerox : though, you'd eat Z-Bul, and drink or eat Zugol+BR
05:29:34 <ski> (xerox : Z-Bul was a kind of soap, and Zugol+BR a toothpaste ;)
05:29:45 <ski> (xerox : or maybe you did know ..)
05:29:45 * xerox blargs
05:30:00 <ski> :)
05:30:18 <xerox> I didn't :)
05:33:28 <TFK> hmmm. Do I need an identd server to connect to freenode?
05:33:51 <integral> nope, but dropping ident packets (rather than rejecting) slows down your connect
05:35:06 <TFK> NOTICE AUTH :*** No identd (auth) response <--- this is considered dropping, yes?
05:36:51 <ski> (shapr,xerox : words from the Spirou comics, if you've heard about them)
05:37:48 <xerox> Nope, what is it?
05:38:32 <ski> xerox : http://geocities.yahoo.com.br/partilha/spirou-livros.htm shows some little info
05:40:04 <shapr> hiya UlsterScot
05:41:43 <autrijus> shapr: getting ready for the contest? :)
05:42:02 <shapr> Er, no?
05:42:29 <CosmicRay> morning shapr
05:42:32 <shapr> g'mornin CosmicRay
05:42:37 <autrijus> oh. I thought you talked about monad transforming your way to victory :)
05:42:39 <shapr> Oh hey, want to talk about arrows?
05:42:41 <shapr> Did I?
05:43:33 <autrijus> I think you did... you even argued for quite a while on this channel with sb. else about the merit of choosing the strategy before knowning the problem statement
05:43:48 <CosmicRay> shapr: hmm, yes in fact, I do want to talk about arrows :-)
05:43:53 <CosmicRay> let me poll up your article again...
05:44:30 <Philippa> autrijus: if I felt up to it I'd go for the contest - would be happy to be a "just-talking" member of a team though
05:45:02 <shapr> autrijus: Monad transformers would be an excellent strategy.
05:45:05 <CosmicRay> shapr: ah, right.  In your example, do arrows *automatically* derive that, for instance, a string starting with "t" must match the two or three parsers?
05:45:55 <shapr> Well, yeah... kind of
05:46:13 <TFK> Hmph.
05:46:55 <shapr> Arrow-style parsers can export what strings they parse.
05:47:13 <TFK> Which part of lambdabot is responsible for making the connection to the serveR?
05:47:25 <shapr> sticking together two arrows creates another arrow with the properties of both.
05:47:37 <ski> or at least they can export some aspects of what kind of strings they can parse
05:47:43 <CosmicRay> hmm.
05:47:52 <CosmicRay> but is it left to the coder to do something with these exports?
05:48:00 <shapr> Nah, the arrow instance does it.
05:48:07 <ski> when defining the arrow, yes
05:48:16 <ski> not when using it
05:48:21 <shapr> That's why I found arrow code so hard to read at first, it seems that's there's not really any code at all anywhere.
05:48:26 <CosmicRay> shapr: I think it would be great to see a little simple arrow examples in your article
05:48:33 <shapr> Yes, there will be :-)
05:48:37 <CosmicRay> ok :-)
05:48:42 <shapr> One that exactly matches the monadic parser in fact.
05:48:43 <CosmicRay> you have definately piqued my interest
05:48:51 <shapr> yay!
05:48:53 <shapr> That's the goal
05:49:23 <CosmicRay> :-)
05:49:23 <TFK> Where is the main function in lambdabot anyway?...
05:49:36 <shapr> Isn't there a Main.hs ?
05:49:39 <CosmicRay> just when I think parsec is the niftiest parser ever...
05:49:46 <CosmicRay> you go and talk about something better :-)
05:49:51 <TFK> d'oh, there is :-/
05:50:39 <shapr> arrow-style parsers are in fact niftier.
05:50:52 <shapr> Though Peter Gammie brought up the point that they may be able to only handle LL(1) grammars.
05:50:55 <CosmicRay> sounds like it
05:50:58 <CosmicRay> hm.
05:51:00 <shapr> I'm not sure if that's true though.
05:51:15 <shapr> I have a bunch of thunks I need to eval before I finish the article.
05:51:19 * CosmicRay digs out his bison manual because he forgets what LL(1) means
05:53:08 <earthy> bison does not do LL(1)
05:53:18 <earthy> but if you see LL(1) think 'recursive descent'
05:54:09 * earthy seems to recall the first L is for left-to-right scanning, the second L is for left-to-right parsing, and the (1) is number of tokens lookahead
05:54:42 <ndm> earthy, yep, thats right
05:55:01 <TFK> Meh, can't seem to connect to the server.
05:55:06 <shapr> Of course this has now distracted me into thinking about arrow-style PackRat parsing...
05:55:10 <ndm> i think bison is based on LALR(1), with a few extra tweaks
05:55:40 <michaelw> yes
05:55:41 <ndm> LALR (left associative, left to right, lookahead 1)
05:55:56 <earthy> ndm: yups
05:56:11 * earthy prefers leftcorner parsing
05:56:27 <earthy> especially generalized leftcorner
05:57:25 * ndm is writing his own parser system
05:57:40 <shapr> What do you guys think about Packrat parsing?
05:58:20 <Philippa> I didn't read the bit about the parsing algo in that paper. The grammar metalanguage looked a lot like first-order parsec though, so it might be worth comparing it and parsec's implementation?
05:58:59 <earthy> packrat looked nice
05:59:27 <dcoutts_> TFK, I was going to ask if the new gtk2hs-0.9.8.exe windows installer worked for you with your odd registery settings?
05:59:28 <earthy> but I'm looking into accepting full 2-level van wijngaarden grammars
05:59:45 * shapr has no clue what that means.
05:59:59 <dcoutts_> TFK, though to test properly it you'd have to put back the odd registry entry
06:00:16 <TFK> dcoutts_, oh, I don't have the new gtk2hs installer. Besides, I've already removed the offending registry settings, so the experiment may not mean much.
06:00:22 <TFK> Yup.
06:00:29 <dcoutts_> TFK, I think you had HKCU/Software/GTK/2.0/language
06:00:45 <TFK> Installer Language to 1033, iirc.
06:00:48 <dcoutts_> ie the HKCU/Software/GTK/2.0/ key existed but contained some random value
06:00:52 <TFK> Where's the new installer again?
06:00:58 <dcoutts_> specifically, not the path value
06:01:13 <dcoutts_> you can get it from http://haskell.org/gtk2hs/download/
06:01:24 <dcoutts_> It's been properly released now! :-)
06:01:41 <TFK> :-D
06:01:46 * TFK roots for gtk2hs
06:01:53 <dcoutts_> :-)
06:03:24 <TFK> Specifically, do you know if GTK plays nice with Haskell threads? Do I need any special interaction code?
06:03:39 <dcoutts_> at the moment, yes unfortunately you do
06:03:52 <dcoutts_> threading support it not very good. Yet...
06:04:01 <TFK> Are there any docs on the issue?
06:04:08 <dcoutts_> there is one demo that shows how it can be done
06:04:19 <TFK> Progress?
06:04:22 <dcoutts_> yep
06:04:35 <xerox> http://fun.drno.de/pics/english/9people.jpg -- I can only find 7, heh.
06:04:35 <TFK> thanks, will look into it
06:04:51 <dcoutts_> we want something better however, but it probably requires GHC RTS hacking
06:05:19 <xerox> Maybe 8.
06:05:28 <dcoutts_> I ought to go, the ICFP competition starts in an hour!
06:05:42 <xerox> dcoutts_, any url?
06:06:08 <TFK> Ah, good luck with that!
06:06:09 <dcoutts_> http://icfpc.plt-scheme.org/
06:06:40 <dcoutts_> TFK, if you still find any problems with the installer, please report bugs to the gtk2hs-users mailing list
06:06:51 <dcoutts_> gotta go..
06:07:34 <TFK> aye aye
06:09:06 <TFK> I can barely make out 7 people.
06:09:16 <TFK> mm, 8 now.
06:09:50 <xerox> Yeah, I think I found the 9th too.
06:10:08 * TFK tries harder
06:13:28 <TFK> Hmm, threads which are dependant on idle time is indeed a suboptimal solution.
06:13:43 <TFK> Although I think that it will do in my case.
06:13:46 <ski> xerox : more distraction http://www.palmyra.demon.co.uk/illusion/ambiguous/ambiguous.htm#ho :)
06:14:07 <Philippa> TFK: I kinda got stuck with that as a temporary solution when I was looking at writing something multithreaded using wxHaskell...
06:14:16 <xerox> Great, thanks much ski!
06:14:44 <TFK> So the GHC devs need more prodding ;-)
06:15:13 * TFK recalls his pitchfork in the attic
06:15:22 * JaffaCake wakes up.  whaa?
06:16:33 <TFK> http://rafb.net/paste/results/65s83B65.html
06:16:59 <TFK> Erm, I chose "Python" on a reflex >_<
06:20:39 * TFK applies threading to sirc
06:21:00 <TFK> (my simple irc client)
06:22:00 <CosmicRay> ahh.
06:22:05 <CosmicRay> Parsec would be LL(1) then, right?
06:22:06 <JaffaCake> doing something better with threading in Gtk is a hard problem, IIRC
06:22:17 <CosmicRay> or at least when used in conjunction with try?
06:22:38 <JaffaCake> LL(k), really
06:22:55 <JaffaCake> because it has backtracking
06:23:04 <CosmicRay> ah, I see.
06:23:13 <CosmicRay> wikipedia has nice articles on parsers
06:23:14 <CosmicRay> :-)
06:23:48 <CosmicRay> shapr: so you are saying arrows are not supporting backtracking?
06:24:52 <CosmicRay> incidentally, in a very sleepy moment last night, I was pondering a haskell Num type that would yield LaTeX equation strings as a result of computations...
06:25:18 <CosmicRay> sounded cool at the time but I'm not so sure now :-)
06:28:12 <TFK> JaffaCake, well, apparently the same problem exists with any other GUI toolkit, no?
06:28:53 <TFK> At any case, it's one worth tackling, I think.
06:29:16 <JaffaCake> it's not Haskell-specific
06:29:41 <JaffaCake> the GUI itself is single-threaded, so you can only access it from a single OS thread
06:30:23 <JaffaCake> so, to run concurrent threads that access the GUI, you need to have one GUI thread which which everyone else communicates
06:30:42 <michaelw> well, one can always open more X connections
06:30:59 <TFK> ...if you have an X server.
06:31:04 <michaelw> true
06:31:23 <JaffaCake> as long as the GUI library doesn't have any global state
06:31:24 <shapr> CosmicRay: could be done with arrows.
06:31:36 <JaffaCake> or thread-local state, and many of them do
06:32:17 * JaffaCake waits for dcoutts to jump in and tell me I'm all wrong
06:34:03 <shapr> Too bad ICFP is on the solstice, this is a total party weekend around here.
06:34:55 <df_> jaffacake :: you're right as far as x11 is concerned
06:35:06 <ski> solstice was a few days ago
06:35:33 <shapr> CosmicRay: Arrows do support backtracking, more efficiently than monads.
06:35:34 <shapr> Oh, it was?
06:35:38 <SM_ax> shapr, and where is "here"?
06:35:51 <ski> sweden, 'of course' :)
06:35:58 <shapr> SM_ax: http://www.haskell.org/hawiki/HaskellUserLocations
06:36:25 <shapr> That's a hint for everyone to add themselves there :-)
06:36:43 <shapr> Oh, I need to regen the images, Conal Elliot still appears in Russia.
06:38:00 <shapr> CosmicRay: That makes me wonder why Pete said Arrows are only LL(1)
06:38:10 <SM_ax> shapr, so are you participating or are you partying? :)
06:38:18 <shapr> Neither actually.
06:38:43 <shapr> I am going to be social, but no alcohol for me. The few minutes of fun giddyness aren't worth feeling grotty the next day.
06:38:57 <SM_ax> I thougt "both", why?
06:39:05 <SM_ax> I mean why no icfpc?
06:39:34 <shapr> I designated this week and the next week as off time for me, I'm just trying to chill out and do fun stuff.
06:39:48 <shapr> ICFP probably does qualify as fun stuff, but I didn't think about it in time to organize a team.
06:39:50 <ski> shapr : sommarsolstånd/solstice /= midsommar-fest/midsummer-party  http://susning.nu/Sommarsolst%E5nd
06:40:13 <shapr> aha
06:40:28 <shapr> autrijus: Do you have a perl6 team organized?
06:40:58 <SM_ax> shapr, there is no parrot on LiveCD afaik
06:41:01 <shapr> hi erg
06:41:06 <SM_ax> or pugs
06:41:50 * CosmicRay should really set aside time for this next year
06:41:57 <CosmicRay> sounds like a whole lot of fun
06:42:11 <autrijus> SM_ax: that's fine, pugs/parrot can make native executables
06:42:33 <erg> hey
06:42:34 <autrijus> shapr: well let's see... we have larry wall here... :)
06:42:45 <shapr> Oh that would be cool :-)
06:42:46 <SM_ax> autrijus, cool, didn't know that!
06:42:54 <CosmicRay> autrijus: and you expect him to do well with solving a very specific task? :-)
06:43:14 <autrijus> CosmicRay: right, namely fixing the language when we find perl6 isn't up to the task :)
06:43:19 <CosmicRay> haha
06:43:41 <TFK> Wow. GHC linking operation just took ~50 MBs.
06:43:54 <autrijus> anyway. we have ~a dozen lambdacamels here
06:44:30 <autrijus> in a cottage middle of nowhere
06:45:02 <autrijus> but we're supposed to make perl6 happen instead of solving icfp problems ;) so maybe we'll punt. at any rate need to wait other people to wake up
06:46:01 <shapr> Hiya Speck
06:47:13 <TFK> Why does it take so much memory? GHC itself takes ~25 MBs.
06:47:54 <CosmicRay>  oo, the problem is going to be announced in a few minutes eh?
06:49:38 * shapr decides to go unicycling anyway
06:49:54 <CosmicRay> shapr: are you participating in icfp?
06:49:58 <shapr> Nah
06:50:10 <CosmicRay> shapr: next year, you're on my team :-)
06:50:11 <Itkovian> CosmicRay: 9 minutes
06:50:20 <shapr> CosmicRay: awright!
06:50:21 <CosmicRay> shapr: between the two of us, maybe we can strongarm jaffacake to join :-)
06:50:31 <shapr> It's possible.
06:50:37 <Speck> hi shapr
06:50:42 <JaffaCake> next year, maybe
06:50:47 <CosmicRay> especially if I get jaffapoints by setting up fptools in darcs :-)
06:50:52 <shapr> As long as we have some sort of voice chat on the same team.
06:51:18 <CosmicRay> shapr: ah ha, you have finally come up with the intersection of asterisk and haskell
06:51:23 <JaffaCake> I vote for  xbox live
06:51:24 <shapr> :-)
06:51:28 <shapr> xbox live?
06:51:33 <JaffaCake> for voice chat :)
06:51:37 <shapr> Does that run Haskell?
06:51:42 <JaffaCake> er... not yet
06:51:44 <CosmicRay> shapr: psst, he's a microsoft guy....
06:51:51 <shapr> Aw c'mon, you gotta port GHC to the Xbox.
06:51:59 <CosmicRay> shapr: actually, I suspect it would
06:52:00 <JaffaCake> xbox 360, definitely
06:52:04 <CosmicRay> linux is ported to the xbox
06:52:04 <shapr> seriously??
06:52:19 <CosmicRay> so I wouldn't see why ghc wouldn't work, given enough ram and/or swap space :-)
06:52:39 <JaffaCake> xbox 360 has a 3-core PPC in it, should run GHC nicely
06:52:48 <CosmicRay> I got hugs running on my zaurus
06:52:50 <shapr> I really do think some game company should hire a few of us to get GHC running on the PlayStation 3 so we can hook them up with heavy duty declarative parallelism. I doubt it will happen though.
06:53:01 <CosmicRay> ocamlc too, but it didn't have enough ram for ghc
06:53:11 <shapr> Anyway, unicycling, bbl.
06:53:16 <Philippa> shapr: I think they'd be better getting us to do strict-regioned-haskell
06:54:44 <TFK> Well, the threading doesn't seem to work.
06:55:00 <CosmicRay> l8r shapr
06:55:23 <TFK> The thread doesn't seem to be called at all.
06:56:04 <Itkovian> 3 minutes
06:57:03 <TFK> You guys will flood the channel regarding that problem, right?
06:59:33 <Itkovian> damn right
06:59:57 <TFK> OK, now the thread gets called, prints something, but doesn't call itself, and neither does it print stuff to the TextBuffer.
07:00:14 <Itkovian> holy shit
07:00:53 <juhp> 6.4 pkg conf files and cabal files are different?
07:01:47 <CosmicRay> hmmph.  does ICFP ever have a problem not related to a bot simulation?
07:02:21 <michaelw> CosmicRay: long time ago, yes
07:02:27 <TFK> Ah, the I/O is blocking, apparently.
07:02:59 <TFK> Right, why the heck did I use hGetContents?! O_o
07:03:02 <reffie> ICFP started?
07:03:11 <earthy> yups!
07:03:15 <CosmicRay> reffie: minutes ago
07:03:22 <CosmicRay> TFK: hGetContents shouldn't be
07:03:36 <CosmicRay> TFK: well, it will block waiting for input to be available
07:03:42 <CosmicRay> TFK: but not waiting for *all possible* input to be available
07:03:56 <CosmicRay> well actually hGetContents itself doesn't block, your consumer does
07:04:05 <TFK> "consumer"?
07:04:14 <CosmicRay> wherever you use the string that hGetContents returns
07:05:01 <TFK> WOO! It works!
07:05:14 <TFK> The thread prints to the text buffer, all is good.
07:05:21 <CosmicRay> :-)
07:05:42 <TFK> I used hGetLine this time. CosmicRay, apparently it indeed tried to get the whole contents. Which, with a socket, is a bit problematic :-/
07:06:04 <TFK> OK, now I need to actually log on to the server :-/
07:07:05 <TFK> http://rafb.net/paste/results/2juJmQ95.html <--- is all I get so far.
07:08:14 <CosmicRay> TFK: you would need to set the buffering on that handle appropriately
07:08:18 <CosmicRay> TFK: see hSetBuffering
07:08:30 <CosmicRay> TFK: yes, handles and sockets can play together, with a bit of work
07:08:42 <CosmicRay> TFK: there are some examples in the FTP code in MissingH
07:09:34 <TFK> Well, I'm setting it to NoBuffering atm
07:09:48 <CosmicRay> that's good then
07:09:54 <CosmicRay> hGetLine *should* be working in that situation, I think
07:09:59 <CosmicRay> strace would be instructive
07:10:03 <TFK> It is, but hGetContents isn't.
07:10:11 <TFK> Which makes sense, I suppose.
07:10:22 <CosmicRay> ah.  well I have made hGetContents work in that situation.
07:10:34 <CosmicRay> but you must be very careful with how you work with the string it returns
07:10:52 <CosmicRay> also it can be tricky to achieve proper synchronization with stuff you send in the other direction
07:10:57 <TFK> Well, it's not a big deal, really. Until I properly connect to the server, I don't have any real input to process.
07:11:06 <CosmicRay> since data isn't actually read from the network until that string is evaluated
07:11:06 <CosmicRay> heh
07:11:22 <CosmicRay> I use hGetContents on a socket with a parsec parser in my FTP library
07:13:49 * TFK tries to understand the connection code of lambdabot
07:17:59 <TFK> Last time I couldn't connect to freenode with lambdabot as well. Hmph.
07:18:05 <TFK> Let's try a different server, then1
07:21:40 <TFK> Can't connect to other networks as well.
07:21:43 * TFK looks for the trick
07:27:59 <TFK> does hGetLine keep the [carriage return+] newline?
07:28:45 <xerox> @index hGetLine
07:28:46 <TFK> meh, where does asks come from o_O
07:28:47 <lambdabot> System.IO
07:28:51 <xerox> @doc System.IO
07:28:52 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/base/System.IO.html
07:29:11 <TFK> Yes, and it doesn't specify that.
07:29:29 <xerox> @libsrc System.IO
07:29:30 <lambdabot> http://darcs.complete.org/fptools/libraries/base/System/IO.hs
07:29:48 <CosmicRay> heh
07:30:00 <CosmicRay> I guess I should be keeping that thing up to date, eh?
07:30:03 <ski> copy&paste error "2.3.2  Cop turns :  The Cop-Bot's turn happens between an odd numbered world and an even numbered world. That means that a Cop-Bot is always given an even numbered world to view ..." s/given an even/given an odd/
07:30:34 <TFK> I don't see where hGetLine is defined there.
07:31:51 <TFK> @index asks
07:31:52 <lambdabot> Control.Monad.Reader, Control.Monad.RWS
07:31:54 <xerox> TFK, play with it.
07:32:18 <TFK> Heh.
07:33:55 <TFK> Did anyone succeed in making lambdabot work from Windows?
07:35:10 <thebug> where is lambdabot source these days anyway?
07:35:14 <xerox> @version
07:35:15 <lambdabot> lambdabot 3p36, GHC 6.4 (OpenBSD i386)
07:35:15 <lambdabot> darcs get http://www.cse.unsw.edu.au/~dons/lambdabot
07:35:23 <thebug> ah, dons' stash
07:35:32 <thebug> thanks :)
07:35:36 <TFK> I'm reading the lambdabot source.
07:35:46 <TFK> Or trying to :-/
07:35:59 <TFK> It doesn't seem to do anything special besides ircSignOn
07:36:11 <TFK> Although I am sending PASS first. The RFC says that I should.
07:37:28 <TFK> But the connection just times out.
07:38:57 <TFK> Let's see if the X-Chat raw log will  divulge any interesting information.
07:41:35 <TFK> It only sends out PASS and NICK :-/
07:44:58 <TFK> It only sends NICK on freenode :-/
07:45:54 <Philippa> you should only send PASS if you have a password AIUI
07:47:20 <TFK> X-Chat gives it an ident response, somehow.
07:47:47 <Speck> I don't think ident === authentication
07:48:22 <TFK> I don't know anything besides the fact that in the raw logs, X-Chat indicates that only NICK is sent.
07:48:39 <TFK> Which is exactly what my client is doing, only my client times out
07:48:59 <TFK> Can't connect to other networks, too, which makes me wonder.
07:51:32 <Speck> the irc specs are complicated
07:53:01 <TFK> :-(
07:54:39 <Philippa> ident's something else
07:54:43 <Philippa> a separate protocol
07:56:16 <shapr> So is the contest online?
07:56:35 <xerox> Yup!
07:56:46 <shapr> Where is it?
07:56:59 <ski> http://icfpc.plt-scheme.org/
07:57:04 <adept> http://icfpc.plt-scheme.org/index.html
07:57:08 <TFK> Yes, I know.
07:57:36 <shapr> Wow, that's pretty cool.
07:57:51 <TFK> But it can't connect to Esper either, although it seems to not require an indent.
07:58:27 <earthy> and it is a pretty cool game
07:58:36 <shapr> hi zyff
07:58:37 <earthy> and there are some nice obvious spots for change
07:58:56 <earthy> anyway, I'm going to call it a day
07:59:10 * shapr calls it a year takes vacation.
07:59:15 <TFK> It would be extremely ironic if Pascal would be the winner language.
07:59:21 <earthy> why?
07:59:23 <TFK> Or Java, or C# :-D
07:59:34 <earthy> once again, why?
07:59:37 <TFK> " In the far-flung future of the year 2000, functional programming has taken over the world and so humans live in an almost unimaginable luxury. Since it's so easy, ..."
08:00:15 <earthy> nah, Cobol or Fortran, that would be ironic
08:00:21 <Philippa> TFK: Pascal would be considerably more ironic - as originally specced, it was highly questionable whether it /could/ write its own compiler
08:00:28 <earthy> not that newfangled Pascal stuff. ;)
08:00:33 <thebug> earthy: what about BLISS or RPG ? ;)
08:00:42 <Philippa> TECO!
08:00:45 <earthy> APL. :P
08:00:48 <TFK> Forth?
08:00:56 <TFK> Actually, in one ICFP, J was praised.
08:01:07 <shapr> J is pretty cool.
08:01:16 <shapr> I like concatenative langs.
08:01:21 <TFK> I don't remember if they won, but the judges certainly drooled over it (as they made clear in that ICFP's website).
08:01:54 <earthy> anyway, I think I'm not going to even try participating this year
08:02:16 <earthy> given that I just *know* my girlfriend'd be pissed if I did. :|
08:02:46 <shapr> You could plan it ahead of time for next year.
08:02:57 <shapr> I've discovered that girlfriends are usually just fine with planned chaos.
08:03:06 <shapr> As long as you tell them about it ahead of time, and clean up afterwards.
08:05:29 <autrijus> mmm sweeping generalisations
08:06:10 <shapr> Sweeping generalisations are almost always wrong.
08:06:12 <earthy> I discovered that mine doesn't take kindly to stuff like this
08:06:13 * shapr sniggers
08:06:13 <ndm> just tell your g/f you are ill, and go home and "lie in bed" for a weekend
08:06:21 <ndm> its easier if you don't tell them anything
08:06:26 <earthy> ndm: tough one, as we live together. :)
08:07:14 <earthy> but the main issue is 'me time', which she finds I can't take a full weekend of until we have the entire house (which we moved into last january) in order
08:07:31 <earthy> and she's a perfectionist, so 'in order' is to high standards...
08:07:38 <earthy> anyway, I might indeed join in next year ;)
08:07:53 <ndm> me too - unfortunately this year i'm away all weekend
08:11:20 <ski> ("In the event that the contestants cannot be grouped into groups of six evenly, an unspecified process takes place to form groups of six." ..)
08:13:08 <thebug> dons: you around?
08:13:51 <CosmicRay> heh
08:14:17 <Speck> icfp looks fun
08:14:38 <CosmicRay> yes it does
08:14:43 <CosmicRay> but way too time-consuming :-)
08:15:09 <Speck> it would be cool to allow for customization of the robber-bots, so they can act like famous bank robbers in history
08:15:53 <thebug> bonnie and clyde-bots?
08:16:03 <CosmicRay> shapr: ping
08:16:07 <shapr> pong
08:16:17 <CosmicRay> mind if I run some potentially nutty ideas by you?
08:16:29 <shapr> I have to go have a shower and disappear, but you can email them to me.
08:16:33 <shapr> I'm always interested in nutty ideas.
08:16:57 <CosmicRay> heh, ok, well maybe grab me on irc when you're back, I think it would be easier to discuss in irc
08:17:15 <vincenz> hey shapr
08:17:15 <shapr> ok, ttly
08:17:18 * shapr &
08:17:31 <vincenz> killall shapr && shapr
08:17:53 <CosmicRay> haha, he's blocking sigkill.
08:17:57 <thebug> better not run that on solaris ;)
08:18:02 <CosmicRay> heh
08:18:10 <thebug> *boom*
08:46:22 <CosmicRay> stupid question: what does exp do?
08:51:29 <ski> exp = (e **)  -- e being base of natural logarithm
08:51:49 <CosmicRay> ah
08:52:06 <CosmicRay> so it's just a convenience function then
09:01:32 <TheHunter> so, who's taking part in the icfp contest?
09:02:37 <astrolabe> Have they released the problem yet?
09:02:44 <CosmicRay> yes
09:03:14 <astrolabe> I am the slowest coder in the world, so not me :)
09:04:32 <adept> TheHunter: me
09:05:28 <TheHunter> yay! in haskell?
09:17:03 <lispy> icfp looks hard this year
09:17:52 <lispy> i like that it's 2005 and they are referring to the year 2000 like it's the distant future, that's clever
09:18:02 <lispy> or should i say cute
09:24:42 <lispy> i take it there is no "lightning" round this year?
09:27:31 <genneth> dear god i can't even begin to see how to solve the icfpc
09:28:45 <TFK> Ya know, just reading the entire description will take half a day.
09:31:37 <astrolabe> I bet it is fun coming up with the problems for these tournaments.
09:33:02 <CosmicRay> haskell. rocks.
09:33:10 <CosmicRay> NumTest> prettyShow $ (2 * 5 ** 4 + 3)
09:33:10 <CosmicRay> "(2.0*(5.0**4.0))+3.0"
09:33:21 <xerox> Nifty!
09:33:26 <CosmicRay> NumTest> (2 * 5 ** 4 + 3)::SymbolicManip
09:33:26 <CosmicRay> BinaryArith Plus (BinaryArith Mul (Number 2.0) (BinaryArith Pow (Number 5.0) (Number 4.0))) (Number 3.0)
09:34:32 <TFK> I'll believe it when I'll connect to freenode.
09:34:57 <CosmicRay> NumTest> (units 5 "m") / (units 2 "s")
09:34:58 <CosmicRay> 2.5_m/s
09:35:40 <ski> nice
09:35:44 <genneth> very nice
09:35:58 <genneth> i'm about to try implementing a geometric algebra class in c++
09:36:04 <CosmicRay> it doesn't auto-simplify (yet), or attach any meaning to the units
09:36:09 <CosmicRay> but those things could happen
09:36:12 <genneth> there's a hefty template part, which i'm going to prototype first in haskell
09:36:24 <ski> CosmicRay : magnitudes in the types ?
09:36:30 <CosmicRay> also:
09:36:31 <astrolabe> geometric algebra?
09:36:32 <CosmicRay> NumTest> (units 5 "m") + (units 5 "m")
09:36:32 <CosmicRay> 10.0_m
09:36:32 <CosmicRay> NumTest> (units 5 "m") + (units 5 "in")
09:36:32 <CosmicRay> Program error: Mis-matched units in add
09:36:43 <CosmicRay> ski: right
09:36:55 <ski> hm
09:37:09 <CosmicRay> ski: aka Units-of-Measure or UOM
09:37:20 <ski> CosmicRay : so type of units 5 "m" knows it's a length ?
09:37:33 <CosmicRay> ski: not yet, it just knows that "m" /= "in"
09:37:40 <ski> at run-time
09:37:44 <ski> it seemed
09:37:45 <CosmicRay> I would like to get it to the point where it can autoconvert
09:37:48 <CosmicRay> ski: correct
09:38:41 <CosmicRay> oh, also:
09:38:42 <CosmicRay> NumTest> sin (units 90 "deg")
09:38:43 <CosmicRay> 1.0_1.0
09:38:43 <CosmicRay> NumTest> sin (units (pi/2) "rad")
09:38:43 <CosmicRay> 1.0_1.0
09:38:47 <CosmicRay> the "1.0" means "no units"
09:38:49 <ski> CosmicRay : would be nice to have unit-transformer, aka prefixes (like micro,tera, etc..)
09:38:55 <CosmicRay> ski: indeed
09:39:29 <CosmicRay> NumTest> (asin 1.0) :: Units
09:39:29 <CosmicRay> 90.0_deg
09:39:52 <ski> i guess, to get typed units, you need to go away for (explicitely, at least) typing units in strings
09:40:16 <ski> s/for/from/
09:40:28 <astrolabe> There is something a bit similar in the template metaprogramming section of the boost c++ library I believe.
09:40:29 <CosmicRay> it wouldn't be that hard to define some standard data type units
09:40:39 <ski> no
09:40:59 <ski> iirc VHDL has some built-in support for units ..
09:41:06 <CosmicRay> what I need now is some sort of auto-simplifier
09:41:33 <ski> (i.e. support for defining units ..)
09:42:17 <genneth> astrolabe: yep; i can almost transliterate from haskell (suitably dumbed down) to MPL
09:42:31 <lispy> CosmicRay: one of Norvig's books gives code for writing a symbolic simplifier
09:43:09 <lispy> i forget the name, but the abbreviation is aiap or somesuch
09:44:03 <lispy> the book is probably more useful than the code unless you can read lisp, on the other hand, the code is available on the net
09:44:15 <CosmicRay> NumTest> 2 * (asin 1.0) :: Units
09:44:15 <CosmicRay> 180.0_1.0*deg
09:44:32 <CosmicRay> perhaps just simplifying multiplication by 1 and addition of 0 would help
09:44:41 <CosmicRay> I grok lisp
09:45:03 <wagle> in fullness?
09:45:05 <CosmicRay> no
09:45:11 <lispy> wow, excel doesn't work correctly with multiple desktops in windows
09:45:20 <wagle> 8)
09:45:28 <CosmicRay> I grokked common lisp for a semester class in 1998 :-)
09:45:33 <lispy> my menu bars keep vanishing...
09:45:42 <CosmicRay> funky.
09:45:48 <CosmicRay> openoffice works fine with multiple desktops in kde :-)
09:45:53 <lispy> yeah, the only fix i know is to restart excel
09:46:10 <lispy> i guess i could stop using multiple desktops...
09:46:59 <CosmicRay> heh, this norvig book looks interesting
09:47:03 <CosmicRay> "14 versionf of Length"
09:47:11 <CosmicRay> prolog interpreter, prolog compiler, all in lisp
09:47:23 <CosmicRay> comprehensive grammar of english
09:47:26 <lispy> norvig is a good author
09:47:33 * ski goes back to watching gospel ..
09:48:00 <ski> .. abelson and sussman, i.e.
09:48:05 <lispy> CosmicRay: for fun i would recommend his version of the getty's berg address, you can find it an norvig.com
09:48:08 <astrolabe> wow, I'd be interested to see the grammar of english
09:48:10 <CosmicRay> though I'm not finding a simplifier in the list of examples
09:48:17 <lispy> or his essay on how long it takes to learn to program
09:48:25 <CosmicRay> lispy: heh
09:48:37 <lispy> i think it's called cmacsyma
09:49:22 <CosmicRay> "teach yourself programming in 10 years"?
09:49:28 <lispy> yeah
09:54:27 <CosmicRay> nice essay.
10:10:01 <lispy> it's hard to use a spreadsheet after thinking in type
10:10:03 <lispy> s
10:10:15 <lispy> I want to put constraints on the cells
10:10:24 <lispy> stupid excel
10:10:30 <lispy> ;)
10:11:13 <jlouis> heh, that ICFP spec seems big
10:12:46 <TFK> GAH! I cannot connect to freenode! THE PAIN!
10:14:42 <TFK> hPutStr isn't lazy or anything, right?
10:14:58 <Lunar^> TFK: it needs to compute what to print
10:15:12 <TFK> That's OK.
10:15:32 <Lunar^> jlouis: I really would like to go... *sigh*
10:16:24 <lispy> TFK: how far in to the connection process do you make it?
10:16:48 <TFK> I open the socket, send NICK then USER.
10:17:24 <TFK> It still times out on me. Although it does recieve some PRIVMSGs I send. (It later tells me that I can't send a privmsg, this is how I know that it at least got the command.)
10:17:44 <lispy> TFK: hm....
10:18:02 <lispy> TFK: do you receive all the freenode boilerplate?
10:18:11 <lispy> 14:05 -irc.freenode.net- *** Looking up your hostname...
10:18:11 <lispy> 14:05 -irc.freenode.net- *** Checking ident
10:18:11 <lispy> 14:05 -irc.freenode.net- *** No identd (auth) response
10:18:11 <lispy> 14:05 -irc.freenode.net- *** Found your hostname
10:18:14 <lispy> that sort of stuff?
10:18:17 <TFK> No, that's the point.
10:18:27 <TFK> http://rafb.net/paste/results/D0PCWG76.html <--- this is similar to what I do recieve.
10:19:33 <jlouis> Lunar^: I was actually thinking about the contest, heh
10:19:41 <Lunar^> jlouis: uh...
10:20:59 <lispy> TFK: in that example, the error about the privmsg is not because you're sending a privmsg to send the nick/user is it?
10:21:16 <lispy> that was you trying to chat?
10:21:24 <TFK> That was me trying to  chat.
10:21:35 <TFK> Doesn't matter, I was just trying to see if it responds to *some* commands.
10:21:50 <lispy> right
10:22:12 <lispy> i'm not up on the irc spec
10:22:17 <lispy> i cheated ;)
10:22:27 <lispy> but maybe there is a hand shake and you're only doing part?
10:23:05 <TFK> There is no handshake. I send a NICK command, then a USER command, then wait.
10:23:09 <TFK> And wait.
10:23:11 <TFK> And wait...
10:23:14 <TFK> And then  it times out.
10:29:51 <lispy> hmm..
10:31:53 <lispy> TFK: do you need to send PASS ?
10:32:03 <TFK> I don't think so.
10:32:14 <TFK> X-Chat doesn't, and I asked a person who wrote his own client, and he doesn't either.
10:32:38 <lispy> hmm...the spec i'm looking at says it's not always used....
10:32:51 <lispy> i'd give you the url but i'm having cut 'n paste issues
10:33:03 <TFK> What is not always used?
10:33:23 <lispy> http://www.irchelp.org/irchelp/rfc/chapter4.html
10:33:58 <TFK> I read that.
10:34:29 <TFK> http://hbin.dyndns.org/pastebin/52.html <-- my poor code.
10:34:51 <lispy> yeah, it should not be required
10:35:01 <lispy> i was getting caught up on the part about it must come before
10:35:56 <TFK> It's written somewhat ambiguously.
10:39:47 <basti_> heya
10:41:00 <TFK> This brings me much pain.
10:50:50 <smott> i get "ERROR "weight.hs" - Unknown entity "fromInt" imported from module "Numeric"" with hugs, but if i :also Numeric i can use fromInt just fine, any ideas?
10:52:35 <TheHunter> "fromInt" is a proprietary hugs thing and should not be used. Use fromIntegral instead.
10:52:57 <TheHunter> @type fromIntegral
10:53:02 <lambdabot> fromIntegral :: forall b a. (Num b, Integral a) => a -> b
10:53:55 <smott> ah ok, thanks
10:55:13 <lispy> TFK: i'd use ethereal to watch the socket traffic, it may help you debug this
10:55:55 <TFK> This seems quite a simple task.
10:56:13 <lispy> it never hurts
10:56:50 <TFK> It does when you don't have ethereal and don't know how to use it.
10:57:02 <lispy> i'm giving up multiple desktops in windows, i was having problems with copy/paste and excel
10:57:07 <lispy> ah
10:57:18 * TFK implements PING/PONG
10:57:35 <lispy> well, it's very easy to use, and if you have debian it's just 'apt-get install ethereal'
10:58:05 <Philippa> TFK: that has to be /the/ single most important thing (beyond the basic TCP connection and user input) for an IRC client to handle :-)
10:58:46 <lispy> TFK: getting used to a packet sniffer now may be useful later on for debugging your irc client
10:58:52 <Philippa> I'll grudgingly cope with speaking raw IRC so long as it handles the pongs for me - gimme a query/non-commands-are-privmsg-to-$QUERY setup on top of that and it's pretty much usable
10:59:09 <TFK> The client is a toy, an excersize.
10:59:36 <TFK> Anyway, let's see what it does when I pong it.
10:59:36 <Philippa> lispy: as it's all TCP he can do a raw man-in-the-middle attack with netcat or something...
11:01:44 * TFK points out that only a fractional part of his code is not boxed in IO
11:01:51 <Philippa> don't worry about it
11:02:01 <Philippa> right now that's pretty much to be expected
11:02:47 <Philippa> most of the purists work on stuff with a high algorithmic complexity:IO complexity ratio
11:03:37 <lispy> and most of the indurstry works with a low ratio ;)
11:04:16 <dbremner> lispy - my guess is 90% of applications are just simple wrappers around relational databases.
11:04:42 <basti_> had anyone ever running fudgets after 2000? ;)
11:05:58 * TFK is certainly not a purist
11:06:08 * TFK roots for Useful Code (TM)
11:06:24 <Philippa> dbremner: probably. The 'real' advantage to haskell there is realising the DB bits can have appropriate safety rules and be well-separated from their UI triggers
11:07:47 <TFK> IRC allows for whitespace before \r\n, right?
11:08:08 <basti_> yes it does
11:08:12 <basti_> many clients dont though
11:08:42 <basti_> (try marking the "yes it does" line with the mouse, i put a few spaces there)
11:08:42 <dbremner> Philippa - have you read the paper titled "Functional Programming Languages for Verification Tools"? Lambda linked to it recently.
11:09:04 <Philippa> I haven't. Anything interesting in it?
11:09:16 <TFK> Hmm.
11:09:19 <Philippa> I'm mostly a "doing neat things with the type system" person - one of the reasons I've taken to monads
11:09:20 <smott> avg xs = (sum xs) `div` (length xs) <- why can't I force this to be of type Num a => [a] -> Int (it's trying to convince me it's actually [Int] -> Int) ?
11:10:09 <basti_> hmm div needs Integral
11:10:16 <dbremner> Philippa - I thought it was interesting reading. The conclusion was that they wouldn't use functional languages to develop their next verifier.
11:10:25 <ski> @type length
11:10:27 <lambdabot> length :: forall a. [a] -> Int
11:10:35 <basti_> ah.
11:10:36 <ski> length returns an Int
11:10:42 <dbremner> Philippa - http://lambda-the-ultimate.org/node/view/745 the quote is here, don't want to paste anything.
11:10:42 <basti_> ski: 1 point for you.
11:11:15 <ski> smott : are you sure you don't want Num a => [a] -> a  ?
11:12:32 <smott> actually what i want is avg :: [Double] -> Double, but i've given up hope on that so [Double] -> Int was the next idea
11:13:02 <ski> to wrapping the length call in fromIntegral
11:13:12 <Philippa> dbremner: AFAICT the reason appears to be lack of sufficient development (in the "product development" sense) of functional programming systems?
11:13:33 <ski> [Double] -> Int  would prolly round fractions to integers, which would not be nice, in general
11:14:15 <ski> smott : how does it work ?
11:14:29 <ski> hm
11:14:36 <dbremner> Philippa - yes. A powerful language is nice, but it may make more sense to use a language w/better tool support.
11:14:40 <ski> well, basti_ prolly is right, too
11:14:55 <ski> smott : replace `div` by /, too
11:15:25 <basti_> its a draw game then :P
11:15:46 <Philippa> dbremner: there're projects where I'd definitely agree. I'm not sure a verifier is one of them, subject to being willing to write a lot of stuff from the ground up if needed
11:15:46 <basti_> using / might evoke fromIntegral
11:15:52 <smott> ski: what i have is "avg' xs = (fromIntegral (sum xs)) / (fromIntegral (length xs))", but even with a type dec of [Double] -> Double it keeps saying "Instance of Integral Double required for definition of avg'"
11:15:53 <ski> smott : `div` does integer division, rounding down, while / will give you fractional/decimal results
11:16:17 <Philippa> for a verifier, the #1 thing I want is to be confident in the correctness of the compiler, what supplied libraries there are and my own code
11:16:22 <dbremner> Philippa - I first became interested in Haskell after reading about Parsec.
11:16:23 <ski> smott : no. sorry, don't wrap the call to sum in fromIntegral, just the length call
11:16:43 <ski> basti_ : it wont
11:16:46 <Philippa> dbremner: Parsec sold me on using haskell for my projects pretty fast, though I'd 'learnt' it on a uni course previously
11:16:55 <Philippa> (as in, not been taught enough to write anything near real code with)
11:17:13 <basti_> humm
11:17:21 <smott> ski: oh. yeah, that works. thanks
11:17:54 <Philippa> it's certainly an impressive demonstration of the power Haskell offers though
11:18:14 <ski> smott : you want xs to be a list of doubles (say), so sum xs will then be a double, and / will take that double and the length of xs, which is an Int, but when converted by fromIntegral will yield the "appropriate" number type, which here is Double
11:18:31 <ski> smott : do you understand what i just said ?
11:18:33 <dbremner> Philippa - most of the courses I've taken used C or C++.
11:18:50 <ski> @type sum
11:18:53 <lambdabot> sum :: forall a. (Num a) => [a] -> a
11:18:53 <smott> ski: yeah i thought fromIntegral would just be 'id' if the type is already correct
11:18:54 <ski> @type (/)
11:18:56 <lambdabot> (/) :: forall a. (Fractional a) => a -> a -> a
11:19:07 <ski> @type sum :: [Double] -> Double
11:19:09 <lambdabot> sum :: [Double] -> Double :: [Double] -> Double
11:19:15 <ski> @type (/) :: Double -> Double ->Double
11:19:16 <lambdabot> (/) :: Double -> Double ->Double :: Double -> Double -> Double
11:19:27 <basti_> smott: no fromIntegral is obviously (Integral a,Num b) => a->b
11:19:36 <basti_> it won't work with a non-integral argument
11:19:54 <TFK> Meh. This code doesn't print out even though I flush stdout :-/
11:20:01 <ski> smott : well, it is, *for values of types it can at all be applied to*. fromIntegral can't be applied to decimal numbers, just things like Int, and Integer ..
11:20:29 <ski> smott : it's named "fromIntegral" for a reason :)
11:21:42 <basti_> dons (or anyone with Yi experience): ping?
11:22:10 <dbremner> Philippa - it looks like their Haskell verifier predates Haskell 98.
11:22:48 <xerox> basti_, what do you need?
11:22:57 <basti_> xerox: still the thing about msgE
11:23:06 <xerox> :|
11:23:08 <Philippa> dbremner: ow
11:23:08 <TFK> dons, is IRC.decodeMessage leaving in the '\r' at the end by design?
11:23:16 <basti_> if msgE and focus/unfocus are the only way to the bottom line
11:23:23 <Philippa> yeah, not wanting to use that environment is plenty understandable
11:25:00 <dbremner> Philippa - the upper left paragraph on page 4 is interesting.
11:25:33 <dbremner> Philippa - I may have been wrong about that, it does say they started in 1997, though.
11:25:46 <lispy> dbremner: when you say most applications, does that include office programs like, Word and Excel?
11:26:15 <lispy> ie, what are examples of most applications...
11:26:27 <tuomov> most applications few people ever see
11:26:51 <Philippa> lispy: most applications are company-specific and pretty much amount to database interfaces for various people dotted around
11:27:08 <dbremner> lispy - it was a fairly vague statement. My understanding is that a lot of software is specific to a given market, not commercial shrinkwrap.
11:27:21 <Philippa> likewise
11:27:44 <lispy> dbremner: okay
11:27:44 <tuomov> although, there's a lot of embedded software too
11:28:09 <lispy> dbremner: things like timesheet software
11:28:14 <lispy> dbremner: would be an example
11:28:56 <dbremner> lispy - timesheets, scheduling, payroll, etc. Every company I've worked for has had things like that.
11:30:59 <dbremner> tuomov - true enough. There are certainly a lot of microcontrollers out there.
11:32:18 <TFK> It doesn't work, ugh.
11:32:44 <TFK> shapr, so, you said that you can write an IRC client in one page of code? ;-)
11:37:17 <Philippa> TFK: FCVO 'page' and not necessarily a particularly pleasant one I could
11:37:59 <TFK> Mind writing one right now? ;-)
11:39:32 <Philippa> yep, sorry :-)
11:39:42 <Philippa> grab Network and go from there
11:41:30 <Philippa> you probably want to go multithreaded too, with UI, network and controller threads. UI and Network both pipe data to controller down one Chan, controller sends request messages back. You might need two threads for each of network and UI as a result
11:42:39 <Philippa> you'd be surprised how little code that lot fits into
11:43:16 <Philippa> most of the threads look like "do in <- getNextInput; actOn in; tailCallSelf;"
11:44:41 <TFK> Philippa, http://hbin.dyndns.org/pastebin/53.html
11:45:04 <TFK> I've been working on it all day.
11:45:27 <TFK> If you think there's anything wrong with that, please let me know, because it doesn't work.
11:45:35 <Philippa> I don't know how the UI lib works well enough to comment on the potential problems
11:45:54 <Philippa> I know I had some issues with wxHaskell trying to write a client - the one-pagers Shae and I're talking about are text-mode
11:46:25 <TFK> http://rafb.net/paste/results/YqOnS222.html <--- this is sample output. I doubt it has anything to do with the GUI, at all.
11:47:11 <Philippa> that looks somewhat like it not getting the PONG fast enough
11:47:21 <Philippa> can you get a network transcript?
11:47:31 <TFK> What do you mean?
11:47:35 <Philippa> preferably with timestamps on the IRC messages?
11:47:45 <Philippa> "what was sent in which direction when"
11:48:20 <TFK> What was sent is clearly seen from the code. Those responses are timestamped, that's the raw output (I added the timestamps, though).
11:48:50 <TFK> Checking out raw X-Chat logs suggests that it doesn't send a PING for a while, not to mention that it should give me much more output anyway.
11:48:56 <TFK> It doesn't give me a chance to do anything.
11:50:07 <Philippa> TFK: A network transcript. Not what the program thinks it's seen and sent, what actually went out on the wire
11:50:31 <dbremner> TFK - if tcpdump is available, you could try that.
11:50:53 <Philippa> oh, and if you're putting the wrong hostname in the PONG (it has to be the one in the PING) it won't help
11:52:21 <TFK> I don't think it is avaliable.
11:52:41 <TFK> Well, the hostname in the ping has a : in front of it, for some reason.
11:52:42 <Philippa> connecting via a proxy of some sort'll work. You can construct one with netcat in the worst case
11:52:44 <TFK> Is that normal?
11:52:47 <Philippa> yes
11:53:06 <Philippa> you'll often catch one on the last parameter of an IRC message
11:53:23 <Philippa> it's not an error if there happens to not be a space in it
11:53:24 <TFK> Why?
11:53:38 <Philippa> er, you didn't read the RFC sufficiently, did you?
11:53:44 <TFK> It's huge.
11:53:50 <Philippa> PRIVMSG #haskell foo bar bar <- the chan'll see "foo"
11:53:55 <TFK> Colons go before the prefix, 'tis what I know.
11:54:03 <Philippa> PRIVMSG #haskell :foo bar baz <- the chan'll see "foo bar baz"
11:54:04 <TFK> That too.
11:54:17 <TFK> But the specs for PING say nothing about colons.
11:54:37 <TFK> The servers are to be delimited by spaces in PING's case.
11:54:41 <Philippa> unless I'm much mistaken, colons on the last parm are always acceptable
11:55:09 <TFK> Who designed that horrible thing :-/
11:55:39 <Philippa> it makes perfect sense, and allows you to parse the message into a type + parms list without having that part be message type-aware
11:55:44 <dbremner> TFK - a Finn, IIRC.
11:57:15 <TFK> It needn't be type-aware, I think. You always have a command; you may or may not have a prefix. Everything else is params.
11:57:29 <Philippa> and : denotes the last parm
11:57:36 <Philippa> (thus allowing it to contain spaces)
11:58:11 <Philippa> you're complaining that PING appears to allow a last parm with a : preceding it...
11:58:24 <TFK> I'm not complaining, I just find it weird that it did.
11:58:36 <Philippa> and this is why
11:58:44 <TFK> And I was wondering if I need to said the colon back.
11:58:47 <Philippa> if different messages did or didn't allow it, the parser'd have to be aware
11:58:49 <TFK> Apparently not, so my PONG is OK.
11:58:56 <Philippa> strictly speaking no, but it's easier to quote verbatim
12:04:16 <TFK> Sucks. I guess I'll wait for shapr.
12:04:23 <Philippa> TFK: it's more reliable to use the :, especially if your parser just gives you the parm
12:04:35 <Philippa> have you tried doing everything by hand with telnet?
12:04:54 <TFK> Meh. I'll try now.
12:05:24 <CosmicRay> ghci question:
12:05:30 <CosmicRay> *NumTest> let x = 2 * 5 + 3
12:05:30 <CosmicRay> *NumTest> :t (2 * 5 + 3)
12:05:30 <CosmicRay> (2 * 5 + 3) :: forall a. (Num a) => a
12:05:30 <CosmicRay> *NumTest> :t x
12:05:30 <CosmicRay> x :: Integer
12:05:38 <CosmicRay> how could I make x have the same type as (2 * 5 + 3)?
12:05:47 <CosmicRay> ie, prevent ghci from making it specific too early?
12:05:58 <TFK> How do I make a \r character in telnet, anyway?
12:06:49 <Philippa> set it to the right mode and hit enter
12:07:19 <Philippa> (if you're lucky that's even the default)
12:07:31 <TFK> It appears to be the default.
12:07:50 <Philippa> I'll see your clone in a mo then, shall I?
12:08:03 <Philippa> (PONGing by hand gets tedious fast, mind)
12:08:05 <TFK> Beats me
12:08:24 <Philippa> start by telnetting to a freenode server on 6667...
12:08:32 <Philippa> boo
12:08:57 <Philippa> now, I could really annoy you by sending CTCP crap to you... :-)
12:09:52 <TFK> PRIVMSG doesn't seem to work.
12:10:27 <Philippa> PRIVMSG #haskell :whatever you want to say
12:10:38 <TFK> yes, and it doesn't work.
12:10:42 <Philippa> interesting
12:10:49 <TFK> But that doesn't matter, it connected, and that's what's important.
12:10:50 <CosmicRay> I love this language.
12:10:56 <TFK> Step by step, as they say.
12:10:59 <Philippa> CosmicRay: hungarian?
12:11:04 <CosmicRay> Philippa: heh, Haskell :-)
12:11:21 <CosmicRay> \r is C-j iirc
12:11:26 <CosmicRay> \n is C-m iirc
12:11:27 <CosmicRay> man 7 ascii
12:11:40 <tfk_telnet> testing
12:11:47 <TFK> Ah, finally
12:12:09 <TFK> Which brings us back to the simple Haskell IRC client.
12:12:45 <thebug> are there haskell -> ncurses bindings?
12:12:53 <Philippa> TFK: works. What'd you do differently?
12:12:53 <TheHunter> CosmicRay, just invoke ghci with -fno-monomorphism-restriction.
12:13:06 <Philippa> CosmicRay: so, 'sup?
12:13:06 <TFK> The code says it all. I.e., nothing.
12:13:12 <TFK> I mean, I changed nothing.
12:13:13 <CosmicRay> TheHunter: thanks
12:13:23 <CosmicRay> Philippa: I'll show you
12:13:38 <TFK> hmmm.
12:14:04 <CosmicRay> NumTest> 3 + 5 / 2
12:14:04 <CosmicRay> 5.5
12:14:04 <CosmicRay> NumTest> prettyShow $ 3 + 5 / 2
12:14:04 <CosmicRay> "3.0+(5.0/2.0)"
12:14:04 <CosmicRay> NumTest> rpnShow $ 3 + 5 / 2
12:14:05 <CosmicRay> "3.0 5.0 2.0 / +"
12:14:07 <CosmicRay> NumTest> (units 3 "m") / (units 2 "s")
12:14:09 <Philippa> CosmicRay: er, no pics thanks? :-)
12:14:09 <CosmicRay> 1.5_m/s
12:14:14 <CosmicRay> hehe
12:14:29 <Philippa> cool
12:14:34 <Philippa> I assume you rewrote the prelude for that?
12:14:39 <CosmicRay> no
12:14:41 <TFK> hPutStr puts the entire string at once, right?
12:14:44 <CosmicRay> I just added a few new types
12:14:46 <Philippa> cool
12:14:54 <Philippa> TFK: yup
12:14:55 <CosmicRay> made them instances of Num, Fractional, and Floating
12:15:03 <TFK> So no, it's identical.
12:15:07 <Philippa> TFK: for IRC, line buffering is appropriate
12:15:20 <CosmicRay> some of the types build up data structures instead of performing computations
12:15:20 <TFK> Why does it matter at all?
12:15:39 <thebug> do you know how telnet works?
12:15:55 <thebug> it makes more sense to send a whole line at once
12:16:12 <xerox> CosmicRay, nifty thing!  Are you going to put it online somewhere?
12:16:12 <TFK> Doesn't the buffering concern what comes *out*?
12:16:24 <CosmicRay> xerox: yeah, I'll add it to MissingH I think
12:16:27 <Philippa> sure. But you may as well chuck out the entire message in one go
12:16:37 <CosmicRay> xerox: I'm also setting up a LaTeX output mode.
12:16:45 <CosmicRay> so that equations can be typeset
12:16:54 <CosmicRay> also, it supports variables
12:17:10 <CosmicRay> NumTest> prettyShow $ 5 * 3 / (Symbol "x")
12:17:10 <CosmicRay> "(5.0*3.0)/x"
12:17:11 * xerox falls from the chair
12:17:34 <CosmicRay> want me to e-mail you a copy right now?
12:17:35 <CosmicRay> :-)
12:17:45 * xerox nods vigorously
12:17:48 <CosmicRay> better yet, I'll post it with darcs
12:17:50 <TFK> Bah.
12:18:20 <astrolabe> Foo
12:18:27 <CosmicRay> xerox: darcs get http://darcs.complete.org/num
12:18:39 <CosmicRay> all the stuff is in Num/test.hs
12:18:49 <xerox> Thanks much!
12:18:51 <CosmicRay> xerox: patches welcome :-)
12:18:56 <TFK> hPutStr doesn't do any monkey business with said string, correct?
12:19:00 <CosmicRay> darcs send will do the right thing
12:19:24 <TFK> Also, it doesn't matter when I send my commands after opening the connection, right?
12:19:27 <dbremner> CosmicRay - you might find some of Andrew Kennedy's work interesting. http://research.microsoft.com/~akenn/units/
12:19:48 <CosmicRay> dbremner: thanks much
12:20:01 <CosmicRay> xerox: if you've already gotten, do a pull, I had a slight syntax error
12:20:17 <xerox> OK.
12:22:22 <CosmicRay> xerox: you may also appreciate:
12:22:26 <CosmicRay> NumTest> sin (units 90 "deg")
12:22:26 <CosmicRay> 1.0_1.0
12:22:30 <CosmicRay> NumTest> sin (units (pi/2) "rad")
12:22:30 <CosmicRay> 1.0_1.0
12:22:43 <CosmicRay> NumTest> (asin 1.0) :: Units
12:22:43 <CosmicRay> 90.0_deg
12:24:34 <TFK> A different approach. Maybe someone can compile that code and see if it works? It needs some lambdabot source files, though.
12:24:47 <dbremner> CosmicRay - you might find Kennedy's thesis interesting.
12:24:53 <goron> Is there some official language definition of TeX?
12:25:18 <CosmicRay> goron: I believe so
12:25:38 <CosmicRay> dbremner: yes, I probably well, but I don't have time to read a thesis at this precise instant :-)
12:25:42 <goron> CosmicRay: I believe so to. The intended questions was: where can I find it?
12:25:50 <goron> er too
12:25:51 <CosmicRay> ah.
12:26:02 <goron> er question
12:26:17 <CosmicRay> plain tex or latex?
12:26:26 <goron> plain tex
12:26:38 <goron> I understand latex is just tex with macro's.
12:27:05 <xerox> "just"
12:27:12 <goron> I often get error messages which don't understand. The main reason being my ignorance with TeX.
12:27:18 <CosmicRay> goron: perhaps one of knuth's books
12:27:49 <xerox> miktex under linux usually installs a nice reference under /usr/share/docs/miktex, but it's LaTeX.
12:28:37 <Muad_Dibber> bleh
12:28:40 <goron> xerox: There are just a lot of macro's. I am not sure what you mean by "just". Adding macro's to some existing language can't be that hard. (or am I wrong?)
12:29:50 <xerox> It depends.  I was quoting just because I think LaTeX is a valuable work upon TeX.
12:29:53 <dbremner> CosmicRay - http://research.microsoft.com/~akenn/units/RelationalParametricityAndUnitsOfMeasure.pdf this about 15 pages.
12:30:43 <CosmicRay> I was just checking out the ppt now...  very interesting stuff
12:30:49 <astrolabe> goron: there is   The Tex Book
12:32:06 * Muad_Dibber struggling with Template Haskell
12:32:29 <dbremner> CosmicRay - from what I've read of his work, it's just begging for Haskell.
12:32:55 <CosmicRay> I concur
12:34:55 <Philippa> goron: suppose one defines Haskell on top of the lambda calculus by a pile of macros, is that a significant work?
12:35:36 <TFK> An IRC client is significant work.
12:36:24 <goron> Philippa: Your analogy is flawed. But sure it will take time.
12:36:38 <Philippa> goron: it's not /that/ flawed
12:36:52 <Philippa> Haskell-on-top-of-minimal-lisp, if you prefer
12:37:19 <dbremner> goron - it's possible to define a lot of things through translation, that doesn't make them less useful.
12:37:46 <Philippa> LaTeX is an at least somewhat involved system with a significant design effort behind it
12:38:26 <Philippa> usability matters. Otherwise, what's the deal with Parsec? Surely everybody can write their own parsers instead of using someone else's framework?
12:39:20 <astrolabe> I'd say TeX was a programming Language, and LaTex was like a library in the language
12:39:20 <goron> I have the sources of the TeXBook, but when I do tex thefile.tex, I just see the interpreter. Is there something I should do?
12:39:48 <goron> er I do tex thefile
12:39:48 <astrolabe> \end
12:40:14 <astrolabe> I mean type \end at the prompt maybe?
12:41:06 <goron> astrolabe: I guess it just contains a lot of errors.
12:41:19 <astrolabe> Is it giving error messages?
12:41:25 <goron> astrolabe: yes
12:41:36 <astrolabe> Ah :)
12:41:45 <goron> \iterate ->\body
12:41:45 <goron>                  \let \next \iterate \else \let \next \relax \fi \next
12:41:46 <goron> l.8 ...copyrighted and should not be TeXed}\repeat
12:41:54 <goron> At least, I guess that's an error message.
12:42:15 <astrolabe> Hmmm Is that the whole message?
12:42:29 <goron> This is TeX, Version 3.141592 (Web2C 7.5.4)
12:42:29 <goron> (./texbook.tex
12:42:29 <goron> ! This manual is copyrighted and should not be TeXed.
12:42:29 <goron> \body ...l is copyrighted and should not be TeXed}
12:42:29 <goron> \iterate ->\body
12:42:32 <goron>                  \let \next \iterate \else \let \next \relax \fi \next
12:42:34 <goron> l.8 ...copyrighted and should not be TeXed}\repeat
12:42:44 <goron> astrolabe: that's all.
12:43:39 <astrolabe> LOL!  Well, maybe you shouldn't TeX it.
12:45:00 <goron> http://www.interhack.net/pubs/tex-user-hierarchy.html
12:45:16 <goron> astrolabe: Yeah, I already supposed it was illegal.
12:45:54 <goron> astrolabe: Well, actually I do not.
12:45:58 <goron> astrolabe: www.ctan.org/tex-archive/systems/knuth/tex/texbook.tex
12:46:25 <goron> astrolabe: This certainly doesn't look like the biggest warez server on the web.
12:49:10 <xerox> TeXpert: Installs TeX on a Hypercube serving 256 printers simultaneously.  YOW!
12:49:14 <goron> astrolabe: Or just that I shouldn't use Tex for it, but some other tool .
12:49:15 <astrolabe> Hmm strange that they would have it if you aren't sposed to TeX it.
12:49:28 <thebug> @yow
12:49:32 <lambdabot> Is it NOUVELLE CUISINE when 3 olives are struggling with a scallop
12:49:32 <lambdabot> in a
12:49:32 <lambdabot> plate of SAUCE MORNAY?
12:49:33 <goron> astrolabe: I tried Latex, and pdflatex.
12:50:21 <xerox> astrolabe, it's an example of TeX "coding", but they don't want you to print it by yourself?
12:50:33 <Muad_Dibber> is there anyone here who has worked with TH in ghc 6.2.2?
12:51:23 <astrolabe> xerox: well the whole book would be a very big example, and if you can't tex it...
12:51:51 <Philippa> Muad_Dibber: I did a little, nothing complicated though
12:51:53 <astrolabe> goron I get the same error as you.
12:52:16 <Muad_Dibber> Philippa : have you tried to generate declarations?
12:52:19 <astrolabe> I recommend getting the real book.
12:53:41 <Philippa> Muad_Dibber: only the one at once, but yes
12:54:00 <Philippa> in the end I got bored and used a quasi-quote with splices inside it though
12:54:26 * Muad_Dibber getting really confused though :P
12:55:18 <Philippa> Muad_Dibber: look at my TMR article from issue 2?
12:55:56 <goron> After three weeks, I can finally run the HOpenGL demo on this obscure platform :)
12:56:30 <CosmicRay> bwahaha
12:56:39 <Muad_Dibber> for now i was just trying to do something like f0 = $( genF 0 )
12:56:41 <CosmicRay> NumTest> (units 5 "m") * sin (units 90 "deg")
12:56:41 <CosmicRay> 5.0_m
12:56:41 <CosmicRay> NumTest> (units (Symbol "x") "m") * sin (units 90 "deg")
12:56:41 <CosmicRay> x*sin(((2.0*pi)*90.0)/360.0)_m
12:56:59 <TFK> Well then, I got etheral.
12:57:02 <TFK> *ethereal
12:57:02 <Muad_Dibber> but its complainging about expecting ExpQ
12:57:08 <Muad_Dibber> ah Philippa, will have a look then
12:57:11 <genneth> @index show
12:57:13 <lambdabot> Text.Show, Prelude
12:59:39 <goron> I found a gentle introduction to TeX. It seems promising :)
13:00:39 <astrolabe> goron:  Good
13:02:16 <Muad_Dibber> right Philippa , reading your article, i should say it should be possible to do something like $( foo ) where foo :: Q [Dec] , right?
13:04:13 <Philippa> yeah
13:06:30 <Muad_Dibber> http://rafb.net/paste/results/kL89A478.html <- then why do i get this? :S
13:07:25 <Philippa> a dec is the entire "foo = bar" bit, not the RHS of the =
13:07:58 <Muad_Dibber> well, foo :: Q [Dec]
13:10:00 <Philippa> right. That doesn't match
13:10:18 <Philippa> [d|foo = bar|] <- that's a dec
13:10:34 <Philippa> [nonexistant| foo|] = bar <- the bit in quotes isn't a dec
13:11:40 <Muad_Dibber> well, i dont see how to use it
13:12:39 <Muad_Dibber> i mean, this foo function can generate some decls for me
13:13:04 <Muad_Dibber> but i'm missing how to bring them  to top level
13:13:28 <Philippa> module Foo where
13:13:29 <Philippa> import ModuleContainingFoo
13:13:32 <Philippa> $(foo)
13:14:18 <Muad_Dibber> aah
13:14:26 <Muad_Dibber> so it cannot be in a function that i do that
13:17:30 <goron> Philippa: What's the intended audience of that article? People who know TH already?
13:22:46 <Philippa> goron: people who either know TH or will look up the syntax enough to follow
13:23:01 <Philippa> though I'd been expecting Shae's planned intro to TH article to be in that issue too
13:23:45 <Philippa> my dad managed to semi-follow the article (and know what to read up on) despite having barely started learning Haskell more generally, which seems a good start
13:24:29 <Philippa> I guess strictly speaking it's "people who know the gist of TH and will look up the syntax where needed", IYSWIM. Know what it does, don't necessarily know specifics
13:24:59 <lispy> ISWUM
13:25:10 <lispy> IYSWIM? ISWUM...
13:26:00 <Philippa> normally Y rather than U when I see people write that, but hey
13:26:19 <lispy> oh right
13:26:25 <lispy> brain fart
13:26:36 <dbremner> Philippa - there's a novel idea, implement ISWIM in TH.
13:27:00 <Philippa> heh
13:44:07 <TFK> Well, the client thing worked.
13:44:37 <TFK> I put the NICK/USER commands after it sent me some output, and it magically worked.
13:44:52 <TFK> Suggesting that you can't send commands immediatelly after you open the socket.
13:45:55 <TFK> Can anyone confirm?
13:46:35 <Muad_Dibber> in IRC?
13:46:40 <TFK> Yes.
13:47:08 <Muad_Dibber> what i remember first the server tells you some kind of hello, and then you are supposed to reply with Nick/user commands
13:47:36 <TFK> Apparently.
13:55:42 <CosmicRay> time for me to afk, cyall later
13:57:51 <lispy> TFK: ah, so you connect now?
13:58:00 <TFK> Indeed.
13:58:31 <lispy> TFK: are you using your client now?
13:58:44 <lispy> i mean, are you logged in
13:58:48 <lispy> is it possible to send you messages
13:58:51 <TFK> Now I need to add a tiny bit of functionality, and I'll start mucking about with the style of the code.
13:59:10 <TFK> Well, I just did a pilot run in #python
13:59:26 <TFK> I'll drop into here next time ;-)
13:59:39 <lispy> is your program in haskell?
13:59:47 <lispy> why test run in #python?
14:01:27 <TFK> The challenge was issued by a Python programmer. Who happens to hate Python. It's complicated.
14:12:58 <lispy> yea
14:13:01 <lispy> that is compilicated
14:19:00 <xerox> shapr, we did the "I-dont-remember-how-you-called-it"-game about concepts and words you described yesterday on #scheme eheh.
14:22:49 <goron> xerox: ping pong
14:23:35 <goron> Philippa: Yes, I thought so. I understand the idea of TH, but not how you used it, but if I would look up the syntax it will sure all be clear.
14:26:36 <Philippa> I mentioned having done IO from the quotation monad because that bit's important, the rest's not too hard to follow (I like the way the function that handles expressions works out)
14:26:56 <xerox> goron, did you scream?
14:27:37 <goron> xerox: "I-dont-remember-how-you-called-it"-game
14:28:07 <goron> Is there a module GL in ghc6.4?
14:28:29 <xerox> Ah!  There was some adjective too, I think.
14:28:33 <goron> In Planet.hs on the HOpenGL website it's used, but it's not documented.
14:29:07 <Philippa> xerox: what's the game?
14:29:54 <goron> @GL
14:29:55 <lambdabot> Maybe you meant: pl wn
14:30:06 <goron> @LIST
14:30:07 <lambdabot> Unknown command, try @listcommands.
14:30:13 <goron> @listcommands
14:30:14 <lambdabot> all-dicts arr babel botsnack code define definitions devils dice
14:30:14 <lambdabot> dict dict-help docs dummy easton echo elements eurohaskell eval fact
14:30:14 <lambdabot> fact-cons fact-delete fact-set fact-snoc fact-update foldoc fortune
14:30:14 <lambdabot> gazetteer get-definition ghc google help hitchcock hoogle index
14:30:14 <lambdabot> jargon karma karma+ karma- kind learn libsrc listchans listcommands
14:30:15 <lambdabot> listmodules lojban moo more paste pl pl-resume plugs pointless
14:30:17 <lambdabot> prelude quote remember resume seen source spell state timein todo
14:30:19 <lambdabot> [3 @more lines]
14:30:22 <xerox> Philippa, conversational ping-pong, let me find how shapr described it.
14:30:38 <Philippa> a variant on word association?
14:30:54 <xerox> Philippa, yep, the word are associated with concepts.
14:31:07 <goron> Ontology exchange ;)
14:31:07 <xerox> There are two rules, you have to explain your association if someone asks, and a player cannot reuse the same concept in the same game.
14:31:21 * goron hates the word ontology :)
14:31:43 * goron also hates the word Semantic Web :)
14:32:13 * Philippa finds the word "bollocks" highly useful, however
14:32:22 <Philippa> (hopefully I don't need to explain that association? ;-)
14:32:38 <xerox> Explain!
14:32:42 * xerox grins
14:33:43 <Philippa> The Semantic Web is a load of bollocks :-)
14:34:19 <xerox> undefined
14:34:28 <dbremner> Philippa - Shirky wrote a good article about its failings. http://www.shirky.com/writings/semantic_syllogism.html
14:35:05 <Philippa> bottom
14:37:11 <xerox> type
14:43:16 <Lemmih> Hey boegel.
14:44:09 <goron> dbremner: I totally agree with the article.
14:44:51 <Philippa> spelling
14:45:23 <boegel> yo Lemmih
14:45:27 * boegel is frustrated
14:45:35 <Lemmih> How come?
14:45:40 <xerox> dictionary
14:45:48 <boegel> I should be out celebrating, exams are over
14:46:02 <Lemmih> Why aren't you?
14:46:32 <boegel> 'cause my gf is too tired, and most people have other stuff to do
14:47:50 <dbremner> goron - approaches that require thousands of people to share a world view aren't likely to succeed.
14:48:04 <Muad_Dibber> boegel : could've called me :P
14:48:14 <Lemmih> boegel: How about using the next 2 day, 16 hours and 11 minuts on an international programming contest? (:
14:48:16 <boegel> Muad_Dibber: but you're in holland :)
14:48:25 <TFK> Say, did anyone mention a blogging site driven by a Haskell backend?
14:48:32 <TFK> Or am I just confused?
14:48:40 <boegel> Lemmih: oh, it's online now ?
14:48:51 <Muad_Dibber> boegel : there are roads from .be to .nl :P
14:49:13 <boegel> Lemmih: well, I have other stuff to do tomorrow and we're going to the zoo on sunday
14:49:17 <boegel> so I won't have time
14:49:24 <boegel> i just don't feel like sitting here now
14:49:58 <Philippa> TFK: I might've mentioned the possibility of converting flippi into a blogging tool a while back
14:50:06 <Philippa> I think Shae's blog's haskell-powered
14:50:14 <Philippa> but I could be wrong there
14:50:15 <Lemmih> Tsk. Real-life is not nearly as important as capturing criminal bots.
14:50:17 <dbremner> goron - this is also good. http://www.well.com/~doctorow/metacrap.htm
14:50:36 <TFK> Well, I recall him mentioning something  about an entire community site. Hmmm...
14:50:53 <Muad_Dibber> oh, i might've asked before, but is there a nice wxHaskell XML editor already?
14:51:03 <boegel> Lemmih: the task seems quite hard
14:51:07 <boegel> any people working on it in here ?
14:51:21 <Lemmih> I am.
14:52:01 <boegel> I think ADA would be a great language to do this task in...
14:52:10 <boegel> on a first glance that is
14:55:12 <boegel> Lemmih: seems quite a lot of work to get it going, right ?
14:55:28 <dbremner> interesting contest. It would seem like you can enter several times and have your entries cooperate to help one win.
14:56:20 <boegel> dbremner: true...but I'm not sure if they'll try every combination of entry's, that would be murder
14:57:00 <TFK> Hmm, how can I scroll ScrolledWindow to its lowest point in Gtk2Hs?
14:59:03 <Lemmih> boegel: You just need to parse a world-skeleton and a world. Straight forward with parsec.
14:59:25 <goron> dbremner: Thx (you sure must be hating the Semantic Web)
14:59:55 <dbremner> goron - I've got nothing against it, except that I think the approach is flawed.
15:00:26 <dbremner> goron - everyone wants an UNCOL.
15:00:48 <goron> dbremner: If I look at human race scale I am against it. If I look at myself: I will try to avoid it in my life.
15:02:22 <dbremner> goron - I'm interested in approaches that embrace humanity, not put it through a reeducation camp.
15:02:39 * boegel is still quite bored
15:06:32 <Philippa> dbremner: I have an UNCOL. It's just sucky to work with and has universally bad performance :-)
15:07:04 <dbremner> Philippa - there was a Swedish? UNCOL that sort of worked, and there was the Tendra project.
15:08:21 <TFK> Can I use some monadic function in a let-in?
15:09:09 <TFK> It keeps complainig about me using a "do" function in a let-in :-/
15:09:25 <TFK> "The last statement in a 'do' construct must be an expression"
15:09:37 <Lunar^> TFK: you could you paste it somewhere ?
15:09:43 <TFK> aye aye
15:10:08 * boegel leaves
15:11:32 <TFK> http://hbin.dyndns.org/pastebin/54.html
15:12:09 <TFK> I wonder how can it be done better in general
15:12:10 <Lunar^> TFK: remove "in "
15:12:35 <Lunar^> TFK: You only need "let" inside a do construct
15:12:52 <TFK> Oh, I see, I see.
15:12:58 <TFK> Not in scope: `to_print'
15:13:23 <TFK> Well, I guess that I can get rid of the let altogether.
15:15:06 <TFK> http://hbin.dyndns.org/pastebin/55.html <--- Not in scope: `to_print' <--- huh?!
15:15:41 <Lunar^> let me check
15:16:58 <Lunar^> There's no reason to remove the let
15:17:24 <TFK> well, it was out of scope before, and it is still out of scope now.
15:17:38 <TFK> At any case, the let didn't change much, although I can get rid of those returns.
15:17:43 <Lunar^> TFK : do foo\n   let bar = ...\n   bar
15:18:03 <Lunar^> I found nicer to see what is pure and what is not
15:18:21 <TFK> "pure" is marked by return :-/
15:18:35 <Lunar^> less obvious than a let, IMHO
15:19:09 <TFK> Also uglier.
15:19:14 * TFK refactors to a let
15:20:05 <TFK> to_print is still out of scope. How can this be?
15:20:18 <TFK> oh
15:20:21 <TFK> wrong line.
15:20:29 * TFK hides under a rock
15:37:35 <xerox> 'night
15:40:17 <Philippa> oh dear. I'm explaining haskell to someone over OKCupid's IM system.
15:40:28 <Philippa> (It's a guy, I'm not looking for guys on there and my profile says as much)
15:40:41 <TFK> Sweet denial...
15:40:57 <TFK> Do monads turn you on? ;-)
15:41:19 <TFK> I'm still wondering how to scroll a window in gtk2hs. This stuff looks complicated :-/
15:42:02 * Philippa grabs a string and ties a bow around TFK's monads
15:42:27 <TFK> Kinky.
15:47:11 <dbremner> Philippa - a search for Haskell shows 6 guys.
15:47:32 <Philippa> dbremner: it's not on my interest list
15:47:42 <Philippa> actually my profile's pretty tiny atm, but hey
15:48:27 <Philippa> I figure anybody who's going to want to shag me just because I code in haskell probably isn't someone I want shagging me
15:48:49 <TFK> Logical.
15:53:57 <dbremner> Philippa - that's a pretty safe heuristic.
16:00:06 <lament> I joined #haskell!
16:00:12 <lament> therefore I am.
16:01:04 <TFK> Ah, another mindless drone in the schemes to take over the world!
16:01:13 <lament> hey TFK
16:01:20 <TFK> howdy lambdabot
16:01:21 <TFK> err
16:01:22 <TFK> lament,
16:01:24 <thebug> @moo
16:01:25 <lambdabot>          (__)
16:01:25 <lambdabot>          (oo)
16:01:25 <lambdabot>   /-------\/
16:01:25 <lambdabot>  / |     ||
16:01:25 <lambdabot> *  ||----||
16:01:26 <lambdabot>    ~~    ~~
16:01:28 <lambdabot>      Cow
16:01:34 <TFK> Bah. Say, what's your rating on KGS?
16:01:44 <lament> TFK: i thought the schemes to take over the world were all in #scheme
16:01:50 <TFK> I have wondorously dropped to 28k? . I hate that question mark.
16:01:56 <TFK> Their schemes are inferior.
16:01:58 <lament> TFK: 15k? at the moment. It's somewhere in the 17-15k range I believe
16:02:13 <TFK> So that means that you haven't won more than two games, eh?
16:02:26 * TFK is such a nub
16:02:55 <lament> no
16:03:11 <lament> it means the computer is not sure about my rank... that's all it means :)
16:03:46 <TFK> So how many ranked games have you won against ranked players? And were their ranks higher or lower than the estimate?
16:04:05 <lament> Just one :)
16:04:07 <TFK> The question is, why is the computer uncertain :-/ I lost about 10 ranked games now >_<
16:04:11 <TFK> hehe
16:04:14 <lament> Have you won any?
16:04:33 <lament> I have only played one game on KGS in the past six months. Hence the question mark :)
16:04:34 <TFK> The CGoban help says that you need 2 wins and 2 losses, I think, against ranked players.
16:04:41 <lament> CGOban help is obsolete
16:04:55 <TFK> I won one - it was a blitz game, and my opponent resigned for reasons beyond me. (I don't think I was winning, anyway.)
16:05:11 <lament> well, not really obsolete, but it doesn't actually say that, either
16:05:13 <TFK> And I think that there was another game where I had chances, but the guy left. Power outage, apparently.
16:05:20 <lament> it says "about" 2 wins and 2 losses
16:05:23 <TFK> It kinda implies it...
16:05:28 <lament> for example, your 2 wins could be against 30k
16:05:33 <lament> and your 2 losses against 1d
16:05:39 <lament> obviously not enough to give you a rank
16:05:43 <TFK> Yeah. In other words, you need two wins again 1d+ players, or it won't recognize you ;-)
16:06:00 <TFK> Well, I've lost so many games that it might as well put me on 30k, as long as it takes away the question mark.
16:06:06 <lament> You just need to play more and don't care about it until you lose the question mark.
16:06:19 <lament> And ideally, not care even after you lose it.
16:06:22 <lament> :)
16:07:28 <TFK> That's exactly what I'm trying to do. But I think that it's pointless to play 19x19 games while being ignorant of the basic techniques. So I'm reading up on material from Sensei's library and playing lots of 9x9 matches as well. (I even win some!)
16:07:35 <lament> Get igowin
16:07:38 <lament> it's good
16:08:07 <lament> play igowin until you can beat it.
16:08:13 <TFK> I was playing against that. I reached 12k, but I dislike playing against computers. I'm always much more reckless than against a human, for some reason.
16:08:30 <TFK> It says that it's a challenge even for a 3 dan :-/
16:08:30 <lament> 12k is when you take white?
16:08:41 <TFK> No, it's when you don't get a handicap.
16:08:45 <lament> oh
16:08:54 <lament> then you're certainly not 30k
16:08:56 <lament> hehe
16:09:43 <TFK> They were more winds by coincidence than anything else. My technical play sucks. Your nick on KGS is also lament, right?
16:09:52 <lament> right
16:10:15 <lament> what's yours?
16:10:40 <TFK> TFK (original, isn't it?)
16:12:06 <lament> indeed
16:13:10 <lament> aww, no picture
16:13:41 <TFK> :-/
16:13:56 <TFK> I'm shy like that.
16:14:26 <TFK> Heh, the little prince.
16:15:03 <lament> let's play!
16:15:15 <TFK> You could upload the boa constrictor that swallowed the elephant, to express your deep love for Python :-P
16:15:24 <TFK> You're giving me a five stone handicap, then.
16:15:31 <TFK> Or maybe we could play a 9x9 board first.
16:15:39 <lament> you pick
16:15:46 <TFK> English game room?
16:15:56 <lament> sure
16:16:06 <TFK> OKie, I'm waiting
16:16:09 <TFK> muhaha!
16:38:03 <lament> SamB: are you really 5k?
16:53:05 <TFK> lament, say, how good were you when you just started out?
16:53:55 <Cale> people are playing go?
16:55:28 <heatsink> Must be.
16:57:57 <TFK> For some definition of playing :-/
17:08:56 <lament> TFK: 30k, by definition :)
17:09:25 <TFK> you know what I mean :-/
17:09:33 <TFK> And it's too late to explain even if you don't :-\
17:09:39 <lament> no, i don't :(
17:09:50 <lament> everybody is about equally bad when they start
17:10:15 <lament> it's like learning a new language: how good are you when you just start out?
17:13:12 <TFK> How fast did you progress, then?
17:13:18 <lightstep> are the copbots winning yet?
17:15:21 <lament> TFK: quickly at first, then slowly :)
17:15:33 <TFK> How quickly? And how slowly?
17:15:42 <lament> very quickly, and very slowly :)
17:15:53 <lament> you can look at my graph or sometihng
17:21:37 <TFK> IS it indicative?
17:22:30 <lament> until january, yes
17:49:07 <TFK> I LOST THE QUESTION MARK!
17:49:15 <TFK> 27k !
17:49:37 <TFK> Although I won due to a mistake by my oponent :-(
17:53:46 <lament> TFK: All games are won due to mistakes.
17:53:53 <lament> All games between amateurs, at least.
17:54:24 <TFK> :-/
18:56:22 <FrederikEaton> do people use HUnit?
18:57:19 <FrederikEaton> and did anyone read my message to libraries@haskell.org? or was it too long?
19:06:02 <FrederikEaton> plink
19:24:59 <MachinShin> hey +
19:50:04 <wagle> hahah..  i have to run xp to test my icfp entry?
19:50:35 <wagle> oh..  nm
19:52:55 <lispy> oh, that would suck
19:53:06 <lispy> i dont' think i'm going to do icfp...
19:53:16 <wagle> i was wrong
21:58:59 <Lemmih> Morning.
22:00:06 <hyrax42> dunno what planet you're on man
22:00:11 <hyrax42> it's night here
22:00:15 <hyrax42> :p
22:00:26 <Lemmih> 7am in Denmark.
22:01:59 * Lemmih is slightly annoyed by the brain-farts in the icfpc problem spec.
22:08:24 <lispy> Lemmih: such as?
22:10:45 <lispy> has it been corrected?
22:10:45 <Lemmih> "The Cop-Bot's turn happens between an odd numbered world and an even numbered world. That means that a Cop-Bot is always given an even numbered world to view [..]"
22:59:02 <FrederikEaton> when is ICFP due?
23:04:53 <FrederikEaton> oops i mean icfpc heh
23:05:17 <Lemmih> 2d 07:53:40
