00:48:28 <gour> dcoutts: ping
00:55:03 <gour> @seen dcoutts
00:55:04 <lambdabot> dcoutts is in #haskell-blah and #haskell. Last spoke 1 day, 14 hours,
00:55:04 <lambdabot> 16 minutes and 31 seconds ago.
00:55:43 * gour wonders how dcoutts can be silent so long
00:59:46 <andersca> hello
01:01:35 <gour> hi, andersca
01:11:28 <basti_> hi
01:13:24 <andersca> hey ski
01:14:08 <ski> hiya
01:38:15 <humasect> also, ocaml doesn't have one line comments. =)
01:48:13 <humasect> Yi is looking good guys =)
01:49:20 <basti_> hey humasect
01:49:27 <basti_> im awake again
01:49:36 <humasect> good morning
01:49:57 <basti_> doing monads already?
01:50:24 <humasect> hmm?
01:50:32 <basti_> i take that as "no".
01:50:34 <basti_> ;)
01:50:46 <basti_> you said you like to start out with the hardest stuff first?
01:50:54 <humasect> yeah
01:50:58 <humasect> done monads ;)
01:51:49 <basti_> @eval do {x<-[10,20,30];y<-[1,2,3];return (x+y)}
01:51:52 <lambdabot> [11,12,13,21,22,23,31,32,33]
01:51:56 <basti_> this one too?
01:52:43 <humasect> ? yes
01:53:02 <humasect> kindof
01:53:28 <humasect> you just learnt it at me now, thought. =)
01:53:35 <basti_> :P
01:54:50 <humasect> doing some FFI and enums right now.
01:55:01 <humasect> then back to events and state.
01:55:08 <humasect> (more state.)
01:55:23 <basti_> there's a state monad
01:55:33 <basti_> it keeps a state for you
01:55:37 <humasect> that's what i used for my last game/experiment that is on pause
01:55:41 <humasect> i love StateT very much
01:56:07 <humasect> now i am using MVar to hold state using ghci
01:56:20 <humasect> (using ghci as a shell for this one)
01:56:25 <basti_> you know that some people might think this is evil? ;)
01:56:42 <humasect> i haven't caught any objections yet. =)
01:57:01 <basti_> it really depends on the HOW though
01:57:12 <humasect> skellers are a bit more on the 'make sure you learn it right first' kind of attitude, sometimes.
01:57:28 <basti_> ;)
01:57:49 <humasect> i would rather use hs-plugins for the REPL, but have some difficulties with readline on the w32 6.4 install
01:58:33 <humasect> Num is not a derivable class... why you little.. i want this Enum to be iso with Num ~_~
01:58:41 <humasect> as it is from FFI
01:58:47 <basti_> you can multiply enums?
01:58:57 <humasect> i mean Ord. oops?
01:59:16 <basti_> Ord could be yes.
01:59:21 <humasect> yes thanks
01:59:23 <basti_> instancing that would be trivial
01:59:42 <basti_> comare a b = compare (fromEnum.a) (fromEnum.b) or something
02:00:33 <humasect> hmm can't mix CInt with Int, i forgot how i did that last time.
02:00:45 <humasect> likely fromIntegral
02:00:50 <basti_> hmm i'm not that much of an FFI guy
02:01:27 <humasect> woo, got it
02:02:09 <humasect> i've got this thread and window managed from ghci. good stuff that concurrency
02:02:36 <basti_> did you try stm already?
02:02:40 <humasect> nope
02:02:44 <humasect> only glanced
02:02:52 <basti_> appears very useful
02:03:08 * humasect looks again
02:03:53 <humasect> k don't need that
02:04:30 <humasect> docs aren't very consise on it though, i would have to mcgoogle strm
02:04:31 <humasect> stm
02:04:40 * basti_ nods
02:04:46 <basti_> spj wrote a good paper about it
02:05:20 <basti_> (simon peyton jones)
02:06:15 <xerox> humasect: import CForeign; and use fromIntegral :: CInt -> Int; I think
02:06:32 <humasect> xerox: thanks, i think that is what happened
02:07:01 <humasect> i would really like readline to link though. something about libHSreadline being linked before i could hack around and add -lreadline manually
02:07:26 <humasect> (besides it not actually having being liked to libreadline in the first place it seems, since it is static)
02:08:04 <basti_> hmm
02:12:51 <humasect> a way to display a type tree of a composed action would be nice, i think
02:13:31 <xerox> action, as in, monadic action?
02:14:02 <humasect> yeah.
02:14:04 <xerox> Monads do not have introspection, someone (sorry I don't recall his name) did it with Arrows, though.
02:14:19 <ski> musasabi ?
02:14:20 <humasect> well like a compiler flag or ghci mode or similar
02:14:28 <xerox> ski: possibly.
02:14:41 <humasect> he was looking for ghc to print types of compilations yesterday
02:15:06 <xerox> Doesn't the .hi file bring types ?
02:15:12 <ski> humasect : do you mean .. printing actions ? or printing types of actions ?
02:15:33 <humasect> types of
02:15:41 <humasect> even when it doesn't compile
02:16:21 <xerox> You get expected type/inferred type errors on compilation, if the error is about that :D
02:16:22 <ski> a partial load of a module, with type-correct things in scope would be nice
02:16:35 <humasect> yeap :P
02:17:15 <ski> (also, being able to browse local expressions (with free vars !) and see their inferred types would be nice)
02:17:26 <humasect> mmm hIDE....
02:18:48 <ski> hm .. imagine selecting a subexpression .. giving some values to it's free vars, and then evaluating the subexpr wrt those vars
02:18:58 <ski> s/'//
02:19:17 <humasect> not very difficult to implement provided the environment..
02:19:29 <humasect> has anyone checked out .. that document/mathematica thing?
02:19:33 <ski> m, should prolly not be ..
02:19:36 <ski> ?
02:20:27 <xerox> What 'thing' humasect?
02:21:10 * ski likes that one can in hugs can access nonexported stuff in the current module .. good for debugging/checking
02:25:40 <humasect> found it:  http://www.cs.kent.ac.uk/projects/pivotal/
02:31:58 <humasect> now i will see how to make+use classes, not just instances of them
02:33:20 <xerox> What do you mean?
02:36:58 <xerox> @wiki TypeClass
02:36:58 <xerox> @arr
02:36:58 <xerox> :(
02:36:58 <lambdabot> http://www.haskell.org/hawiki/TypeClass
02:36:59 <lambdabot> Ahoy mateys
02:39:36 <xerox> Good morning lambdabot.
02:52:58 <humasect> like 'class ... ='
02:53:09 <ski> s/=/where/
02:53:17 <humasect> ^_^
03:32:38 <xerox> Oh, it's snowing.
03:32:44 <xerox> http://haskell.galois.com/~paolo/snowflake-180905-1204.png
03:34:50 <gour> almost, 10C here
03:34:57 <gour> :-)
03:35:54 <xerox> :-D
03:43:09 <shapr> whee
03:46:07 <xerox> Howdy shapr
03:46:28 <xerox> http://haskell.galois.com/~paolo/t/
03:46:46 <basti_> hey shapr... do you know about hsp's cgi interface?
03:47:21 <basti_> or alternatively, the server?
03:49:41 <Lemmih> basti_: Got problems with it?
03:50:07 <basti_> Lemmih: hmm I don't know how to approach it, i did not find any valuable documentation
03:53:40 <basti_> i skimmed nibr00's thesis, but i don't know if i should dive into the server framework thing
03:54:03 <Lemmih> Have you tried starting the web server?
03:54:35 <basti_> not yet. is the work/reward ratio good with it?
03:55:30 <Lemmih> No, that's one of the major reasons I rewrote HSP.
03:56:30 <basti_> so what should i do? I thought about using the cgi interface for now.
03:58:41 <Lemmih> Good luck. Don't expect it to be fast (:
03:59:09 <basti_> not at all. what did you rewrite, btw? (because, i compiled your package)
04:05:15 <Lemmih> I removed the CGI and HTTP code, the HaskellDB dependency and the concept of application state. Then I added FastCGI support, a better parser (ghc-src) and did lots of bug fixes + performance tuning.
04:06:25 * basti_ nods
04:06:52 <xerox> Lemmih should get an award
04:07:13 <basti_> so how would be the way to get CGI stuff into my script? there was some getCGIVars call, is that your solution?
04:59:54 <esap> Are there some reasonable categories where fibers of a set need not be disjoint?
05:02:07 <ski> hi esap
05:02:13 <esap> Hi
05:02:21 * ski hasn't grokked fibers ..
05:02:27 <ski> you feeling better ?
05:02:38 * basti_ had fibers in his breakfast
05:02:42 <esap> Somewhat yes.
05:04:18 * ski ponders comonads (again)
05:05:23 <ski> esap : do you remember some comonadic fold ?
05:05:35 <esap> ski: no :-)
05:05:42 <ski> ok
05:06:20 <ski> i think i saw (skimmed) some paper about something like that .. and i'm trying to reconstruct as far as i can, from dim memory ..
05:07:50 <xerox> comonad?
05:07:56 <ski> yes
05:07:58 <esap> ski: From google search I see there are some papers that refer to both fold and comonad :-)
05:08:37 <ski> esap : possible .. i'm trying to reconstruct on my own ;)
05:12:57 <ndm> I'm trying to do Read/Show for saving data
05:13:09 <ndm> but Data.Map doesn't have a Read instance
05:13:26 <ndm> which means my data can't automatically just use Read/Show
05:13:31 <ndm> how do i get round this?
05:14:58 <xerox> toList fromList
05:15:08 <xerox> Maybe?
05:15:33 <xerox> ...but toList does nub the list...
05:16:55 <ndm> nub'ing the list is no problem
05:17:04 <xerox> So there you to :D
05:17:21 <ndm> yeah, but it means manually plumbing up some Read machinery
05:17:23 <ndm> which sucks
05:17:42 <xerox> Write an instance of {Show,Read} Map which does it.
05:17:42 <ndm> maybe someone should write a Read class for Data.Map
05:17:55 <xerox> You? ;D
05:18:35 <xerox> 'Nubbing' is ok for you but it could be not the right behavior in general, so it's up to the user.  IIUC.
05:18:48 <ndm> doesn't having a Data.Map automatically nub on the way in?
05:19:00 <xerox> hmm.
05:19:05 <xerox> @docs Data.Map
05:19:06 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/base/Data.Map.html
05:20:07 <ndm> it doesn't really say
05:20:16 <ndm> but since its a dictionary, i guessed that would be the behaviour
05:20:20 <xerox> No I think it does not.
05:20:54 <ndm> oh, fair enough
05:21:17 <ndm> it seems weird that it doesn't nub inside, but it does on toList?
05:21:25 <ndm> i would have expected one or the other, not both
05:21:27 <xerox> There is assocs
05:21:43 <xerox> @type Data.Map.toList
05:21:46 <xerox> @type Data.Map.assocs
05:21:48 <lambdabot> forall a k. Data.Map.Map k a -> [(k, a)]
05:21:49 <lambdabot> forall a k. Data.Map.Map k a -> [(k, a)]
05:22:04 <xerox> Which wouldn't make sense if it nubs.
05:22:23 <ndm> so assocs is with nub, toList is without, i guess?
05:22:33 <xerox> The other way around
05:22:50 <Igloo> I'm pretty sure you can only have each key once in a Map
05:23:06 <xerox> Igloo: what is assocs for?
05:23:44 <Igloo> assocs :: Map k a -> [(k,a)]
05:23:44 <Igloo> assocs m
05:23:44 <Igloo>   = toList m
05:23:53 <xerox> Aww.
05:24:08 <xerox> It fooled me!
05:24:58 <ndm> hehe
05:25:07 <ndm> anyway, it doesn't have a Read, someone should write one :)
05:25:32 <Heffalump> what does the Show do?
05:26:10 <xerox> Sets do contain only unique elements?
05:26:29 <ndm> no idea, haven't prodded it
05:28:44 <xerox> Stack space overflow: current size 8388608 bytes.
05:28:45 <xerox> yay
05:36:56 <ndm> well it seems Read is horribly slow...
05:37:19 <ndm> i am using it to Cache the hoogle data, and its actually going far slower than just recomputing and reparsing the entire data again
05:37:41 <xerox> Maybe you need some binary read/show
05:38:01 <ndm> xerox, quite possibly
05:38:10 <Igloo> What are you caching?
05:38:13 <ndm> but i'll try writing a Serialise class first
05:38:27 <ndm> Igloo, the precomputed information
05:38:31 <ndm> such as names and symbols
05:38:33 <ndm> identifiers
05:38:54 <ndm> but split up, properly parsed, appropriate bits stripped out, and a byte code for unification
05:39:04 <Igloo> Hmm. Either xpdf is confused or the metapost manual has been generated backwards
05:39:17 <xerox> What is metapost?
05:39:35 <Igloo> And acroread thinks so too
05:39:54 <Igloo> metafont enhanced for more general drawing
05:52:21 <Oejet> ...and Postscript output.
06:29:08 <schyffe> I'm looking for two functions.. one that makes [[1,2],[3,4]] -> [1,2,3,4] and one that makes [1,2,3,4] -> [[1,2],[3,4]  (by specifying size 2).. are there any standard functions for this?
06:29:28 <Heffalump> concat
06:29:31 <Heffalump> for the first
06:29:36 <Philippa> and take'll help for the second
06:29:38 <Heffalump> I don't think there is a standard one for the second.
06:29:47 <schyffe> allright
06:29:51 <int-e> @eval takeWhile ([]/=) $ iterate (take 2) [1,2,3,4]
06:29:57 <lambdabot> [[1,2,3,4],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,
06:29:57 <lambdabot> 2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],
06:29:57 <lambdabot> [1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,
06:29:57 <lambdabot> 2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],
06:29:57 <lambdabot> [1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,
06:29:59 <lambdabot> 2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],
06:30:00 <Heffalump> lol
06:30:01 <lambdabot> [1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,
06:30:03 <lambdabot> [23 @more lines]
06:30:05 <int-e> akh
06:30:09 <int-e> not quite :)
06:30:12 <schyffe> hehe
06:30:29 <int-e> @eval takeWhile ([]/=) $ map (take 2) $ iterate (drop 2) [1,2,3,4]
06:30:31 <lambdabot> [[1,2],[3,4]]
06:30:54 <schyffe> cool
06:30:58 <schyffe> thanks
06:31:06 <Igloo> unfoldr (\xs -> if null xs then Nothing else Just (splitAt 2 xs)) -- unfoldr strikes again!
06:31:23 <int-e> neat. thanks Igloo
06:31:41 * Heffalump thinks int-e's is clearer
06:31:49 <Igloo> Yes, but mine uses unfoldr
06:31:56 <int-e> so null == ([]/=)
06:31:59 <Heffalump> precisely :-)
06:32:07 <Igloo> I think you're missing the point here  :-)
06:32:09 <Heffalump> no, null == not.([]/=)
06:32:17 <basti_> lol
06:32:30 <Philippa> or ([]==), even
06:32:42 <schyffe> what if I have a string "abcdefghijkl" and want to insert a '\n' after each 3rd character?
06:32:44 <Heffalump> Philippa: bah :-)
06:32:58 * Heffalump wonders what schyffe wants this for
06:33:10 <Heffalump> igloo: it's not even as if your code lacks a point.
06:33:12 <schyffe> heh
06:33:27 <schyffe> I think I need it somehow
06:34:58 <Igloo> That would be better, yes
06:35:00 <schyffe> so can you split a string into lines?
06:35:04 <Heffalump> I suggest you investigate the use of map with the functions already given
06:35:06 <schyffe> given a length?
06:35:19 <Heffalump> and (++)
06:35:22 <humasect> take D:
06:37:07 <Philippa> there's a variant of take that returns both the taken items and the rest of the list
06:37:29 <Heffalump> splitAt
06:37:35 <int-e> Philippa: see Igloo's example ;)
06:37:50 <Philippa> and yeah, it's useful generally
06:38:25 * int-e wanted an easy way though, not an efficient one.
06:38:30 <int-e> ;)
06:38:58 <Philippa> IMO let (line, rest) = splitAt 78 foo in ... is much clearer than using take and drop separately
06:39:15 <Philippa> it conveys more of the intent
06:39:24 <Heffalump> unfoldr is hard to understand, though
06:40:24 <Philippa> yeah. unfolds always seem to be harder to unwind than folds - I suspect it's the termination condition stuff that does it
06:41:00 <Philippa> it might help to have stop = Nothing and continue = Just or something like that
06:41:08 <int-e> it's just a spiffed up iterate.
06:41:16 <gour> dcoutts: ping
06:41:17 <int-e> hehe
06:42:13 <Philippa> I'd say iterate's a degenerate unfold, personally :-)
06:47:30 <Heffalump> unfoldr f e = map fromJust . takeWhile isJust . iterate f e
06:47:43 <Heffalump> (isn't it?)
06:47:54 <Heffalump> oh, no.
06:48:00 <Heffalump> something like that, anyway :-)
06:48:33 <Heffalump> unfoldr f e = map fromJust . takeWhile isJust . iterate (fmap f) (Just e)
06:48:53 <Heffalump> well, nearly. Stick a join in there too.
06:50:23 <humasect> how can one do something like this: et' <- pollEvent >> (toEnum $ fromIntegral)
06:51:01 <Heffalump> et <- pollEvent
06:51:11 <Heffalump> let et' = toEnum $ fromIntegral et
06:51:12 <humasect> that's where it's coming from
06:51:25 <humasect> going for more compact.
06:51:44 <humasect> *>>=
06:52:26 <Heffalump> et' < pollEvent >>= liftM (toEnum . fromIntegral)
06:52:34 <humasect> i am confident there is a way to compact out most all 1-time use aliases/binds in haskell.
06:52:35 <Heffalump> sorry, <-
06:52:41 <humasect> ok i see
06:52:48 <Heffalump> there is, at the cost of making your code unreadable
06:53:04 <humasect> is that a hefty cost, really?
06:53:12 <Heffalump> depends on your point of view :-)
06:53:32 <humasect> the coder's ;)
06:53:47 <humasect> i'm curious why you .'d rather than $'d
06:53:56 <Heffalump> because $ is type incorrect in that context
06:54:07 <Heffalump> toEnum $ fromIntegral et = (toEnum . fromIntegral) et
06:54:35 <humasect> aha
06:54:37 <Heffalump> toEnum $ fromIntegral et brackets as toEnum $ (fromIntegral et)
06:55:08 <ski> @type \(m,f) -> m >>= Control.Monad.liftM f
06:55:10 <Igloo> iterate f = unfoldr (\x -> Just (x, f x))   which seems a much simpler definition to me
06:55:12 <lambdabot> forall (m :: * -> *) a1 r. (Monad m) => (m (m a1), a1 -> r) -> m
06:55:12 <lambdabot> r
06:55:22 <humasect> dying
06:55:40 <ski> i think humasect doesn't want the "m (m ..."
06:55:41 <humasect> yeah : Couldn't match `m a1' against `CInt'
06:55:48 * humasect nods
06:55:48 <ski> indeed :)
06:56:05 <Igloo> Bah, latex is giving me width warnings when there's clearly nothing too wide
06:56:07 <ski> et' <- liftM (toEnum . fromIntegral) pollEvent   --mayhaps
06:56:25 <humasect> not just lift?
06:56:31 <ski> no
06:56:50 <humasect> huh that worked.
06:56:56 <ski> yah
06:56:56 <humasect> also i like it tons
06:57:12 <ski> if you want, you can s/liftM/fmap/
06:57:12 <humasect> thanks guys.
06:57:17 <ski> should work same
06:57:20 <humasect> :o
06:58:36 <humasect> oh ghc you naughty little result cacher you.
06:59:16 <humasect> i realized an unmentioned rule with unsafe io
06:59:42 * ski wonders what an unmentioned rule is
07:00:10 <humasect> a rule that wasn't mentioned in the FFI section of the ghc docs, i /think/
07:01:06 <int-e> humasect: that it's unsafe? that you can't rely on how often the side effect will happen?
07:01:34 <humasect> the latter
07:01:40 <humasect> but a bit more direct
07:02:32 <humasect> anyway i realised it because it is obvious enough ^_^
08:31:29 <schyffe> I have a case expression, and for two values I want the same thing? Is there any better way than 1 -> 'a'; 2 -> 'a'; 3 -> 'b'  ...etc?
08:37:50 <xerox> schyffe: n | n == 1 || n == 2 -> ... ?
08:38:16 <xerox> 1 -> foo; 2 -> foo; ..; where foo = blah blah blah
08:38:24 <xerox> It depends.
08:40:59 <schyffe> allright, that works
08:42:05 <syntaxfree> hello, everyone.
08:44:33 <syntaxfree> I'm looking at F#.
08:45:06 <ndm> take a look at C# 3
08:45:15 <ndm> its got a load of haskell features in it!
08:45:28 <ndm> tuples, lambda expressions, generics, type inference
08:46:43 <syntaxfree> I find it fascinating, in an industry-watching sense, to see Microsoft developing a functional language as an integral part of its dotnet strategy.
08:48:53 <ptolomy> integral?
08:49:08 <ptolomy> I'd always interpreted F# as a nifty side project.
08:49:59 <ndm> i think its just one guy doing it
08:50:15 <ndm> its certainly not distributed or sold or supported in any way
08:50:54 <Heffalump> yeah
08:56:12 <syntaxfree> sheesh. There goes my uptime.
08:56:31 <syntaxfree> a PowerPoint presentation crashed OS X.
08:56:45 <xerox> PP presentation are teh worst
08:57:07 <syntaxfree> It's a PP presentation from Microsoft Research on F#.
08:57:19 <syntaxfree> I was saying I find it fascinating that they  are investing in functional programming.
08:57:36 <greenrd> Hmm, I thought modern operating systems kernels were not supposed to be vulnerable to being crashed by applications.
08:57:41 <xerox> ...and strong typing.
08:59:10 <syntaxfree> their presentation says "ML is the best language in the world"  :-O
08:59:56 <greenrd> heh
09:00:52 <syntaxfree> isn't interesting that Microsoft is back to the languages business, where it began?
09:01:13 <syntaxfree> for a long while, they had VB and ASP, basically.
09:01:42 <syntaxfree> now there's C#, J#, A#, F#, new version of VB, new version of ASP.
09:02:25 <pejo> syntaxfree, Office is still one of their biggest cash cows afaik. As people pointed out before you got no route to host - it's just a few people doing language stuff.
09:03:20 <xerox> In Channel9 video about Linq the ms guy has a poster with: "C# F# ..# Stay#"
09:05:19 <Heffalump> who is the MS guy?
09:06:19 <syntaxfree> pejo: well, the whole dot NET thing is about having a myriad programming languages, no?
09:06:20 <ndm> its the delphi guy, i think
09:06:24 <Heffalump> ah, Hejlsberg?
09:06:30 <ndm> yep
09:06:39 <ndm> but the new .NET languages, a lot of them are clones
09:06:41 <syntaxfree> the other day I saw something called "Haskell dot net". from the Mondrian people I think.
09:06:46 <Heffalump> I dunno if he did Delphi before, but he's mainly known as the C# guy now.
09:06:59 <ndm> i.e. VB.NET vs C# is more a syntax question, rather than a fundamental approach thing
09:07:03 <Heffalump> syntaxfree: they started on that ages ago, but I didn't know they were still doing stuff for it
09:07:16 <xerox> Heffalump: hmm..
09:07:23 <syntaxfree> I don't know anything about C#. How related to C/C++ is it?
09:07:29 <ndm> syntaxfree, think java
09:07:32 <xerox> http://channel9.msdn.com/Showpost.aspx?postid=114680
09:07:38 <syntaxfree> Java is boring.
09:07:40 <ndm> its basically a java clone, or 1.0 was
09:07:58 <ndm> 2.0 has generics, 3.0 has various functional programming things
09:08:13 <syntaxfree> if I was to learn an actual professional programming language, I'd pick C once and for all. For now, I'm just in this stuff for fun.
09:08:19 * syntaxfree is an economist.
09:08:34 <ndm> never C, ouch
09:08:43 <ndm> C should be taken out and shot, put out of its misery
09:08:52 * Heffalump writes a C compiler for a living :-)
09:09:05 * ndm has been coding C for the last 4 months at least
09:09:26 <ndm> i'm not saying its not used, i'm just saying it shouldn't be
09:09:47 <ndm> apart from a very few special cases, runtime interpretters, low level code etc.
09:09:51 <musasabi> ski: if you were looking for arrow parser combinators - http://www.cs.helsinki.fi/u/ekarttun/PArrows/
09:09:53 <ndm> but not for applications
09:12:01 <syntaxfree> should I try and pick up OCaml?
09:12:22 <ndm> i guess you already know haskell?
09:13:52 * shapr cackles happily
09:14:09 <syntaxfree> haha. depends on what you mean by "know".
09:14:17 * shapr has heard of haskell also
09:14:34 <syntaxfree> I did pick up the syntax. I used to Scheme statistical routines for personal use.
09:14:40 <syntaxfree> I'm constantly hitting type problems with Haskell.
09:14:41 <ndm> learn haskell first!
09:14:51 <ndm> then something like C# or Java, to get a bit of variety
09:16:29 <musasabi> syntaxfree: type problems will not go away if you switch to ocaml.
09:16:52 <musasabi> personally I like haskell better, but ocaml is not a bad language.
09:16:57 <syntaxfree> I know.
09:17:08 <syntaxfree> Scheme got me type-spoiled.
09:17:16 <xerox> Scheme is nice :D
09:17:37 <ndm> haskell is so much nicer, i hated schemes lack of types
09:17:39 <xerox> I didn't mind type errors in the first Haskell period, though.
09:17:48 <musasabi> It takes a while to learn the right mindset for haskell - after that things become easy.
09:18:10 <syntaxfree> Scheme is very nice, indeed. Nice enough that I thought moving over to Common Lisp or Lush.
09:18:11 <xerox> Agreed.
09:18:20 <shapr> But procedural languages get hard then...
09:18:24 <syntaxfree> Lush is FAST for numerical work -- faster than Matlab/Octave.
09:18:34 <xerox> Faster than Matlab ?!
09:18:51 <syntaxfree> at least with the backprop stuff I tried.
09:18:57 <xerox> :D
09:19:14 <syntaxfree> Lush also has graphical libraries a-plenty.
09:19:21 <xerox> shapr: that is the problem, yep.  I find the same with python.
09:19:22 <musasabi> For me it was understanding monads and starting to think about programs as small pieces of code and different rich ways of combining them.
09:19:36 <xerox> syntaxfree: Haskell has Gtk! And Cairo! And maybe more?
09:19:37 <syntaxfree> but somehow, the programming language hobby-ist in me had been wanting to do Haskell since the two-line quicksort.
09:20:03 <musasabi> but -> sauna
09:20:03 <syntaxfree> I don't  mean for GUI work, but for graphics.
09:20:29 <xerox> Like?
09:20:37 <xerox> Cairo is not a GUI toolkit.
09:20:45 <xerox> It's a 2d vector graphics engine!
09:20:48 <syntaxfree> I don't know what Cairo is, except that Mono has it :-P
09:21:08 <xerox> http://www.cairographics.org/
09:21:25 <syntaxfree> I got my first taste of functional-style programming with Python.
09:21:34 <syntaxfree> The whole filter/map thing. Wonderful stuff.
09:21:55 <xerox> Which they want to suppress :D
09:25:17 <syntaxfree> what? why?
09:27:11 <ndm> @google python 3000
09:27:13 <lambdabot> http://www.python.org/peps/pep-3000.html
09:29:19 <poetix> http://codepoetics.com/poetix/index.php?p=107
09:46:17 <ptolomy> Has anyone seen an obfuscated haskell competition? I'd like to see that.
09:46:32 <ibid> yes
09:46:52 <ibid> members of this channel have organized at least one such event in the past
09:47:03 <ptolomy> awesome. results?
09:47:42 <sethk> probably when obfusticated it turns into a mix of ocaml and lisp
09:48:34 <ibid> ptolomy: yes.  i suppose googling will find them
09:49:32 <ptolomy> So it does.
09:49:41 * ptolomy always forgets about these 'seach engine' things.
09:50:18 <ibid> do tell us if you find them :)
09:51:05 <ptolomy> original site is gone..
09:53:58 <ptolomy> http://iohcc.mgoetze.net/winners.html
09:54:22 <orbitz> hrm, I hope you don't mind me asking here, but has anyone seen a languag eliek ZPL but more mature (a language designed specifically for math computations parallelized)
10:11:21 <syntaxfree> hey. Python 2.4 has some support for lazy evaluation.
10:11:32 <syntaxfree> man, I haven't looked at python for a loong while.
10:13:25 <orbitz> syntaxfree: what support does it have?
10:13:56 <syntaxfree> wait, I'll make a lisppaste.
10:14:36 <poetix> Generator comprehensions give you some behaviour a bit like lazy lists...
10:15:15 <orbitz> are python closures still broken?
10:15:18 <xerox> Supporting is different from having a nice syntax for it, heh.
10:15:25 <orbitz> hehe
10:16:04 <orbitz> i think i begin to dislike python the more I use it
10:16:47 <orbitz> i first learned abotu pattenr amtchign with Erlang
10:16:52 <orbitz> and now i hav ea hard time beign without it
10:30:47 <Philippa> xerox: support is more than 'can do'
10:31:05 <xerox> Philippa: turing completeness?
10:32:02 <musasabi> One can implement a haskell interpreter in e.g. visual basic, but that does not mean that visual basic supports monads.
10:33:49 <lament> orbitz: you dislike python :(
10:33:52 <lament> awww :(
10:34:15 <lament> orbitz: python has pattern matching! sorta
10:34:52 <lament> def foo((a,b)): return a
10:35:08 <musasabi> Having a mcase in Haskell would be nice.
10:35:30 <musasabi> Currently one has to write do x <- someExpression; case x of ...; all too often.
10:36:06 <syntaxfree> Python has a huge set of libraries by default, and a large community.
10:36:14 <Igloo> mif without parens would be nice too
10:36:21 <musasabi> true - that is one large advantage.
10:36:33 <xerox> Haskell has a good set of libraries by default, and a {great,cool} community.
10:36:36 <lament> i'm not sure how a language can have "some" lazy evaluation
10:36:42 <lament> in any nice way
10:36:51 <lament> (non-nice ways are many)
10:36:57 <xerox> Do you know how python has it?
10:37:04 <lament> no
10:37:10 <lament> i know python has generators
10:37:18 <syntaxfree> I like parens.
10:37:18 <syntaxfree> I end up writing functions as mock s-expressions.
10:37:18 <syntaxfree> add1 = ((+) a b)
10:37:18 <syntaxfree> er, add1 a = ((+) a 1)
10:37:36 <xerox> add1 = (+1)
10:37:38 <syntaxfree> I like the Haskell community. they're very nice to beginners.
10:38:09 <ibid> "they"?
10:38:28 <basti_> the illuminati.
10:38:29 <xerox> You, ibid! :D
10:38:36 <xerox> basti_: yay :)
10:39:02 <ibid> xerox: me?!
10:39:37 <xerox> Someone should be guilty
10:40:07 * ibid is a judge, not a guilty
10:40:07 <ibid> :)
10:40:25 <xerox> Objection! Liar.
10:40:26 * syntaxfree is an intp dettached observer
10:40:51 <ibid> overruled, and we are not in an american court anyway :)
10:41:23 <xerox> Let the jury in...
10:41:47 <ibid> bzzt, there's no jury :)
10:41:53 <int-e> . o O ( @karma xerox- guilty )
10:41:59 <syntaxfree> now sing that to the tune of "Let the sunshine in"
10:42:13 * int-e moves a minus sign a few characters to the left.
10:42:14 <ibid> that?
10:42:25 <int-e> @karma xerox
10:42:25 <lambdabot> xerox has a karma of 7
10:42:27 * xerox cries -- I'm nooot! buaaah!
10:43:10 <marcot> Are .hi files architeture-indep?
10:43:32 <xerox> @karma int-e
10:43:34 <lambdabot> int-e has a karma of 0
10:43:45 <int-e> *sniff*
10:43:51 <ndm> marcot, i don't think so
10:44:02 <ndm> i mean i think they are
10:44:08 <marcot> ndm: hum... is there a way of checking?
10:44:09 <musasabi> marcot: I think they have at least endianess issues.
10:44:10 <ndm> (read your question as are they dependant)
10:44:15 <foobar> @karma- int-e (cheater)
10:44:16 <lambdabot> int-e's karma lowered to -1.
10:44:26 <ndm> there is the show interface command line
10:44:38 <ndm> take an .hi from one platform, and run it on another
10:44:43 <marcot> musasabi: so they're dependents.
10:44:47 <ibid> hm, i wonder if i still have negative karma
10:44:51 <marcot> ndm: this is not a 100% sure test.
10:45:04 <ndm> marcot, no - not really
10:45:06 <xerox> @karma+ int-e -- admission is a step in the way of positive karma
10:45:07 <lambdabot> int-e's karma raised to 0.
10:45:09 <syntaxfree> @karma syntaxfree
10:45:10 <lambdabot> You have a karma of 0
10:45:15 <ibid> @karma ibid
10:45:16 <lambdabot> You have a karma of 0
10:45:19 <ibid> oy
10:45:22 <musasabi> marcot: What do you need it for?
10:45:26 <ndm> but i don't think they have architecture code in them, i.e. assembly
10:45:35 <musasabi> if you want to be portable using the source is the best way.
10:45:37 <syntaxfree> can I exchage some Slashdot karma for #haskell karma?
10:45:43 <marcot> musasabi: debian packaging... one compilation for all archs or one for each.
10:45:45 <marcot> c2hs package.
10:45:45 <xerox> syntaxfree: no way.
10:46:05 <syntaxfree> boo hoo.
10:46:09 <xerox> syntaxfree: maybe yes, if you change the sign.
10:46:31 <musasabi> marcot: with c2hs you want to have 1) the binary, 2) C2HS.hs (which it can copy over). But this is for 0.14.X
10:46:44 <xerox> C2HS isn't really needed in the end
10:46:56 <marcot> xerox: why not?
10:46:57 <syntaxfree> c'mon. Slashdot is cool, they even mention O'Caml once in a while.
10:47:06 * syntaxfree wants karma boo hoo
10:47:07 <marcot> musasabi: just remembered of the binary... it's machine dependent.
10:47:14 <xerox> marcot: what for?
10:47:36 <marcot> xerox: for making it easier to write haskell apps that call C functions.
10:47:59 <musasabi> marcot: true. So just have the package platform dependent and all is fine.
10:48:25 <musasabi> c2hs is very nice.
10:48:50 <xerox> marcot: how exactly? You can use fromIntegral instead of cIntConv for example.
10:49:14 <xerox> ...or even define the cTypeConv functions in your module instead of bringing it in, or something.
10:49:35 <marcot> xerox: it's not just cIntConv.. all the {##} things.
10:49:42 <xerox> What exactly?
10:49:59 <xerox> You do not need C2HS.hs to use hooks
10:51:10 <marcot> No, but I need the c2hs program.
10:51:47 <xerox> Hmm, maybe you misunderstood me - I do think c2hs is great, I think one could avoid C2HS.hs completely.
10:52:19 <marcot> xerox: ok, I really had misundertood you.
10:52:20 <poetix> c2hs was annoying me the last time I was working on (h)obby, and will probably annoy me again the next time I work on it
10:52:30 <poetix> But that's almost certainly my fault for not understanding it properly
10:52:37 <marcot> poetix: do you have a better alternative?
10:52:44 <poetix> None whatsoever.
10:52:48 <syntaxfree> why would someone want to call c functions from Haskell?
10:52:48 <syntaxfree> I can see the need to call Haskell functions from C.
10:53:00 <poetix> Apart from me figuring out how to use c2hs properly
10:53:08 <xerox> syntaxfree: you can do both.
10:53:33 <Igloo> syntaxfree: How would you, for example, convert data between 2 charsets?
10:53:35 <lispy`> oh, i thought syntaxfree was going to be an alias for syntaxninja
10:53:48 <xerox> syntaxfree: imagine for example write a binding for a neat C library.
10:53:50 <poetix> For example: I want to make the libobby shared buffer library available in Haskell
10:54:08 <poetix> (which is a C++ library, but never mind about that for the mo')
10:54:09 <astrolabe> syntaxfree: Maybe for speed?
10:54:26 <marcot> syntaxfree: Using C libs, like gpc for an example.
10:54:30 <marcot> That's my case.
10:54:31 <poetix> Maybe to save re-implementing something someone's already implemented perfectly well, but in another language?
10:54:31 <marcot> Or gtk.
10:54:35 <marcot> gtk2hs uses c2hs.
10:54:42 <syntaxfree> I see.
10:54:47 <poetix> Or *cough* Cairo...
10:54:48 <xerox> poetix: what was the goal you accomplished the other time?
10:54:52 * xerox boings happily
10:55:03 <poetix> I instantiated a C++ object and called a method on it
10:55:30 <xerox> ForeignPtr + finalizer, or block-scoped resource?
10:55:39 <poetix> block-scoped resource
10:55:44 <xerox> Good enough :D
10:55:50 <poetix> Although I think it should be a finalizer
10:56:42 <poetix> I was on the verge of pushing the changes back into the repo, when I ran into some stupid problem converting signed ints to CInts
10:56:59 <poetix> and had to go to bed. If I get the chance this evening I'll try and finish what I started back then
10:57:00 <xerox> !
10:57:14 <poetix> Well, exactly, you'd expect that to just work
10:57:18 * xerox shakes poetix
10:57:51 <poetix> xerox works how many hours a week in his day job?
10:58:32 <xerox> Not enough?
10:58:33 <lispy`> day what?
10:58:47 <poetix> OK, OK, I am *also* extremely undisciplined and unfocused and should stop making excuses
10:59:12 <poetix> Now if only my wife, children, job etc would stop making me have to make excuses... ;)
10:59:26 <xerox> What did you mean exactly about me?  <boing-boing>
10:59:30 * syntaxfree wants to be married
10:59:57 * sieni giggles
11:00:05 <poetix> Well, I guess you're frustrated 'cos I don't spend as much time as I might on this
11:00:37 * lispy` wants a real job instead of being a student
11:00:46 <poetix> But I remember being a student, and even a busy student has way more time to do his own stuff than I'm likely to have again for many years...
11:01:15 <xerox> I love your project, I'd like to see it come real!  I should do more to this goal.
11:01:32 <poetix> Now make me feel bad by pointing out how completely unfair all my assumptions are... ;)
11:02:04 * xerox hugs poetix
11:02:22 <poetix> Well, that's better than all the pokes and slaps I normally get off you...
11:02:24 <lispy`> poetix: i have more time when i have a job
11:02:53 <lispy`> poetix: just this summer for intance.  But when i'm a student i work all day, almost all of my evening and my weekend too
11:02:59 <poetix> To be honest, the main thing I miss is just being able to stay up late hacking.
11:03:36 <xerox> I'm trying to convert late night hacking in sleep, and early morning sleep in hacking.  But the result aren't that good as now.
11:03:50 <poetix> I can't do that now and still get up in the morning - or I can, but a) my wife hates me if I do, and b) after about three days, I get really ill
11:03:51 <palomer> are there any free darcs repositories I could use?
11:03:59 <lispy`> xerox: getting the right amount of sleep is very important
11:04:07 <lispy`> palomer: what do you mean?
11:04:19 <lispy`> palomer: are there any non-free darcs repos?
11:04:19 <xerox> palomer: any code hierarchy is a full working darcs repository.
11:04:26 <palomer> err
11:04:28 <xerox> palomer: i.e. it is not centered.
11:04:30 <palomer> I'd like to use darcs
11:04:35 <palomer> but I don't want to install it on my computer
11:04:50 <poetix> palomer: You know the darcs client *is* darcs?
11:05:06 <palomer> I don't have to connect to a server?
11:05:11 <lispy`> no
11:05:11 <xerox> It is not centered :)
11:05:14 <lispy`> there is no darcs server
11:05:27 <poetix> You can push patches to a darcs repo on another machine over ssh
11:05:29 <palomer> so, erm, how do I get code from another server?
11:05:30 <xerox> Every copy of the directories hierarchy is a complete repository.
11:05:52 <KrispyKringle> palomer: darcs get :)
11:05:52 <lispy`> palomer: by giving access to the repo directory
11:05:58 <xerox> @version
11:05:59 <lambdabot> lambdabot 3p97, GHC 6.5 (OpenBSD i386)
11:05:59 <lambdabot> darcs get http://www.cse.unsw.edu.au/~dons/lambdabot
11:06:02 <xerox> Like that.
11:06:13 <KrispyKringle> or darcs get scp://foo@bar:whatever/
11:06:18 <KrispyKringle> I think that's right.
11:06:18 <lispy`> palomer: for example, put the repo in ~/public_html and set the permissions
11:06:26 <xerox> KrispyKringle: yep, even without scp
11:06:34 <poetix> In the first case, the code is hosted on a web server, e.g. Apache
11:06:35 <KrispyKringle> xerox: Couldn't remember if you needed that protocol string.
11:06:37 <palomer> so I don't need to be a super user to install darcs? all I need is an ssh account?
11:06:43 <KrispyKringle> Or just on the FS, as in darcs get /foo/bar/glorp
11:06:46 <poetix> palomer: bingo
11:06:47 <xerox> palomer: exactly.
11:06:54 <poetix> I use darcs on my dreamhost web account
11:06:57 <palomer> that's awesome
11:07:02 <xerox> It is!
11:07:07 <palomer> but I still need to install darcs as a user, right?
11:07:12 <lispy`> yeah
11:07:15 <KrispyKringle> Yeah, because you can put repos places where darcs doesn't run, just by SCP'ing them.
11:07:17 <xerox> You could focus yourself and ...
11:07:18 <KrispyKringle> It's inefficient, but it works.
11:07:28 <lispy`> configure --prefix=$HOME ; make ; make install
11:07:30 <xerox> No wait, it needs too much time :)
11:07:48 <KrispyKringle> Anyway, I came in here to ask you smart folks, in parsing lingo, is a preterminal synonymous with a nonterminal?
11:07:55 <KrispyKringle> I've never seen the terminology "preterminal" before this book.
11:08:06 <xerox> KrispyKringle: which book?
11:08:07 <lispy`> KrispyKringle: me either, so hopefully they define it
11:08:08 <arekm> hi, does ghc specific irc channel exists? I have question about ,,Bad eta expand'' problem while building ghc
11:08:08 <Igloo> Can anyone else not get to www.haskell.org?
11:08:12 <palomer> KrispyKringle: an inefficiency is the only disadvantage?
11:08:17 <poetix> Maybe it's a nonterminal that's just one step away from a terminal?
11:08:27 <lispy`> arekm: this is as close as you'll get
11:08:33 <KrispyKringle> xerox: _Efficient Parsing for Natural Language_
11:08:37 <KrispyKringle> lispy`: Not anywhere I see. :-/
11:08:39 <lispy`> arekm: bad eta expand?  that sounds bad
11:08:52 <KrispyKringle> palomer: If it's a read-only repo--i.e., just for distributing code--then yes.
11:08:53 <Lemmih> arekm: It's only a warning, right?
11:08:58 <arekm> lipsy': yeah, bad - see http://buildlogs.pld-linux.org/index.php?dist=ac&arch=ppc&ok=0&id=70486481655f7d095a95de480d17b822
11:09:14 <palomer> KrispyKringle: nonono, it's a read/write repo
11:09:16 <KrispyKringle> palomer: By which I mean, I put scp my darcs repos to my cheap-ass web hosting just so I can reliably share the repo rather than just the dist tarball.
11:09:24 <KrispyKringle> palomer: Ah, then you want to have darcs installed on the server.
11:09:33 <KrispyKringle> What I meant was if you're just sharing code, you don't even need to have darcs installed on the server.
11:09:36 <KrispyKringle> That's all.
11:09:45 <KrispyKringle> Since the whole versioning is just contained in the FS.
11:09:47 <palomer> ok, you wouldn't know how to install darcs on a fbsd machine as a user, would you?
11:09:55 <lispy`> only darcs knows how to write to the repo, and specifically, only a locally installed darcs can do it
11:09:59 <xerox> palomer: what lispy said before.
11:10:04 <KrispyKringle> Well, if you have ghc, you can just install it in your home dir.
11:10:08 <KrispyKringle> but if you have root, you can probably get it from ports.
11:10:16 <arekm> lemmih: hm, build fails but now looking into log it's hard to say if bad eta expand is a reason for that
11:10:40 <KrispyKringle> OK, lispy`. I guess Imma shoot myself.
11:10:42 <Lemmih> arekm: They aren't related to the build failure.
11:10:43 <lispy`> palomer: darcs is a single binary, so just place a prebuilt binary in ~/bin or build it yourself
11:10:46 <palomer> I don't have ghc:(
11:10:54 <palomer> (on the machine)
11:11:00 <lispy`> KrispyKringle: uh...over a definition?
11:11:09 <lispy`> KrispyKringle: did you check wikipedia?
11:11:17 <poetix> palomer: Often not a problem. I built darcs on my machine, then scp-ed the binary over to the server
11:11:29 <Lemmih> arekm: You could install a binary version of GHC or try GHC 6.4.1rc.
11:11:38 <KrispyKringle> lispy`: No. I checked google and answers.com :P
11:11:58 <KrispyKringle> no wikipedia.
11:12:00 <KrispyKringle> c'est la vie.
11:12:04 <KrispyKringle> i can guess from context
11:12:06 <xerox> Shower time.  Later.
11:12:10 <palomer> hrm, have to run, I remember there would be a way to install stuff as a user in fbsd
11:12:19 <palomer> thx!
11:12:21 <arekm> Lemmih: don't want a binary wersion. I'll try 6.4.1rc.
11:13:00 <lispy`> KrispyKringle: by the name i would assume it's a production which will eventually terminate, but is not itself terminal
11:13:06 <arekm> if I find it
11:13:13 <KrispyKringle> lispy`: Yeah.
11:13:21 <KrispyKringle> So semantically slightly different from a non-terminal, I guess.
11:13:27 * lispy` nods
11:13:30 <KrispyKringle> If the implication is termination.
11:13:34 <KrispyKringle> makes sense.
11:13:51 <arekm> oh, http://haskell.org/ghc/dist/6.4/ghc-6.4-powerpc.patch
11:21:11 <poetix> OK, what *am* I doing wrong here...?
11:21:18 <poetix> c2hs complains the following complaint:
11:21:40 <poetix> "There is no default marshaller for this combination of Haskell and C type"
11:21:44 <poetix> Haskell: CInt
11:21:53 <poetix> C type: CInt
11:21:59 <poetix> I mean, wtf?
11:23:44 <sethk> poetix, pretty obscure type, you have to admit
11:26:59 <int-e> poetix: shouldn't the c type be int?
11:27:53 <int-e> poetix: iow, what is CInt on the C side?! (cf. http://www.cse.unsw.edu.au/~chak/haskell/ffi/ffi/ffise6.html)
11:29:12 <syntaxfree> hey, sugar, take a walk on the c side.
11:32:12 <poetix> OK, I have signed ints on the C side
11:32:29 <poetix> It doesn't complain if I change them to unsigned ints, incidentally
11:32:38 <Lemmih> @seen dcoutts
11:32:39 <lambdabot> dcoutts is in #haskell-blah and #haskell. Last spoke 2 days, 54
11:32:39 <lambdabot> minutes and 6 seconds ago.
11:32:44 <Lemmih> @seen dons
11:32:45 <lambdabot> dons is in #haskell-blah and #haskell. Last spoke 12 hours, 29
11:32:45 <lambdabot> minutes and 37 seconds ago.
11:33:32 <poetix> The c2hs signature originally had 'Int' -> 'Int', but it complained about a mismatch between CInts and CUInts
11:33:43 <poetix> So I changed it to 'CInt' -> 'CInt'
11:33:58 <poetix> Is there some other Haskell type that corresponds to a signed C int?
11:34:16 <int-e> poetix: it's CInt but you said the C side also calls it CInt?!
11:34:20 <int-e> should be int.
11:34:34 <poetix> On the C side it's a plain old int
11:34:42 <int-e> or rather, c2hs says it's CInt hmm.
11:35:15 <poetix> If I change that to unsigned int, and keep the c2hs type as 'Int', it's happy
11:35:34 <poetix> You would think this would all be rather obvious
11:35:40 <int-e> no clue. I've only skimmed the FFI spec once.
11:36:08 <poetix> I mean, God knows how I'll survive when I have to marshall a struct full of pointers-to-structs...
11:37:12 <poetix> @hoogle FFI
11:37:13 <lambdabot> List.isSuffixOf :: Eq a => [a] -> [a] -> Bool
11:37:21 <poetix> @wiki FFI
11:37:22 <lambdabot> http://www.haskell.org/hawiki/FFI
11:37:23 <int-e> haha
11:37:26 <int-e> @where FFI
11:37:27 <lambdabot> http://www.cse.unsw.edu.au/~chak/haskell/ffi/
11:37:40 <sethk> poetix, oh, that's easy.  It's those int things that'll get you
11:37:41 <poetix> Time to RTFM, I think
12:09:05 <poetix> @type -1
12:09:10 <lambdabot> forall a. (Num a) => a
12:09:20 <poetix> Oh, thanks a bunch
12:10:32 <Lor> The minus operator is a horrible hack both in haskell and in ocaml.
12:10:53 <Lor> @type (+ 1)
12:10:54 <lambdabot> forall a. (Num a) => a -> a
12:10:55 <int-e> @type -1::Int
12:10:56 <lambdabot> Int
12:10:57 <Lor> @type (- 1)
12:10:58 <int-e> ;)
12:10:59 <lambdabot> forall a. (Num a) => a
12:13:09 <ski> musasabi: : i was looking for arrow parser combinators ?
12:31:53 <dcoutts> dons, Lemmih: how's yi+gtk going? Do you want me to help with anything?
12:34:55 <xerox> Hiya dcoutts!
12:35:03 <dcoutts> hia xerox
12:35:03 <Lemmih> dcoutts: It's great, actually.
12:35:20 <dcoutts> Lemmih, oh cool, I should go try and build it then
12:36:01 <Lemmih> Yeah, there's working yi/hide code in the repo.
12:36:08 <dcoutts> cool
12:36:13 * dcoutts darcs pulls
12:37:35 <Lemmih> I'll make another patch once I get killing and yanking working.
12:37:37 <shapr> whee!
12:38:11 <dcoutts> shapr, oh so are we getting a darcs repo for hIDE with ssh access?
12:38:24 <shapr> um... send me a public ssh key!
12:39:41 <dcoutts> shapr, ok
12:40:17 <dcoutts> shapr, /privmsg me your email addr
12:41:51 <shapr> shae@scannedinavian.com
12:42:05 <shapr> I have tmda evil spam bounce software, so I don't care if  it's logged.
12:44:32 <Lemmih> dcoutts: Yi requires a massive refactoring if we want to share code base.
12:46:21 <alar> can someone help me with syntax?
12:46:33 <shapr> Yes!
12:46:57 <alar> is it valid to write
12:46:57 <alar> let x= y z
12:46:57 <alar>       t = u v
12:46:57 <alar>        in x t
12:47:20 <alar> Hugs keeps on complaining on the second line
12:47:46 <alar> it sees "definition" or "unexpected =" there
12:48:06 <Cale> maybe try less spaces on the second line
12:48:14 <Lemmih> Align 't' with 'x' and 'in' with 'let'.
12:48:17 <sethk> fewer spaces
12:48:26 <sethk> less whitespace, or fewer spaces
12:48:35 <Cale> you should try to make things at the same level line up
12:49:00 <Cale> yeah, sorry, fewer :)
12:49:11 <alar> thanks! it worked
12:49:46 <Cale> I just woke up, and I'm not completely grammatical yet. :)
12:49:53 <shapr> goood morning Cale!
12:49:58 <Cale> morning :)
12:50:05 * xerox waves to Cale
12:50:22 <Cale> hi xerox, how is Nymphaea doing?
12:50:23 <alar> nevermind, I'm not good enough in English
12:50:36 <xerox> Cale: working on it right now
12:51:11 <Cale> Figure out how to make menus respond?
12:51:47 <xerox> Nope :-\
12:51:59 <Cale> Perhaps Duncan would know
12:52:30 * alar is rather puzzled with how Hugs handles tabs
12:52:41 <shapr> alar: You could use the semicolon form.
12:53:00 <Cale> alar: you should probably configure your editor not to generate tabs
12:53:15 <Cale> (i.e. replace tabs with spaces)
12:53:27 <alar> I prefer tabs to spaces and Hugs hadles them quite right
12:53:54 <alar> i.e. tab width in hugs and in editor do match
12:53:58 <alar> that's strange
12:53:59 <sethk> tabs are fine, as long as there isn't any automatic indentation going on that mixes in spaces to find a position between two tabs
12:54:09 <xerox> Tabs are evil.
12:54:17 <dcoutts> Cale, what's that?
12:54:35 <Cale> dcoutts: we can't figure out how to attach actions to menu items
12:55:04 <Cale> I tried some obvious things, and nothing happened.
12:55:21 <sethk> xerox, I also prefer tabs.  As long as indentation is done only with tabs, there is absolutely no problem.
12:55:41 <Cale> sethk: why?
12:56:04 <poetix> Ah, a fellow tabs heretic
12:56:32 <Cale> You know, you can set up your editor to only save spaces, but treat multiple spaces as tabs, and never write tabs to a file.
12:56:40 <sethk> Cale, I don't like to move my cursor through multiple spaces instead of a single tab.  Plus you can expand or contract easily.
12:56:52 <alar> sethk, Hugs doesn't generate problem with tab&space mix here
12:57:18 <Cale> dcoutts: menuHelpAbout `onActivateLeaf` putStrLn "Hello!" -- this doesn't seem to work
12:57:24 <alar> I'm puzzled
12:57:25 <sethk> alar, that's true for me also.   But if you change your indentation distances, you can have problems.
12:57:29 <poetix> I find spaces for indentation hard to accept. I have one meaning I want to express - indent by one level here - and I have to make three or four keystrokes to express it? And three keystrokes is different from four?
12:57:38 <dcoutts> Cale,  really? that's just what I was about to suggest
12:57:56 <dcoutts> Cale, you can see the profileviewer demo, it uses menus
12:58:04 <dcoutts> it uses onActivateLeaf
12:58:18 <sethk> poetix, I agree in general.  However, using a good editor you just type tab in either case.
12:58:46 <poetix> Yeah, I don't care what gets written to file, I just care about what I have to type
12:59:16 <dcoutts> Cale, is it a whole menu or an item in a menu?
12:59:37 <Cale> an item
13:00:07 <Cale> in fact, my code looks basically the same as the profileviewer
13:00:15 <Cale> maybe there's something with the glade settings
13:01:28 <Cale> hmm, everything looks the same...
13:03:08 <xerox> Cale, it works here O_o
13:03:20 <xerox> Didn't notice before.
13:03:26 <Cale> ah, hey, this does work now
13:03:34 <xerox> :-D
13:03:48 <xerox> @where+ nymphaea http://haskell.galois.com/~paolo/darcs/nymphaea
13:03:49 <lambdabot> nymphaea ~> http://haskell.galois.com/~paolo/darcs/nymphaea
13:03:56 <Cale> heh, for some reason I didn't get any output last night :)
13:03:59 <dcoutts> hi gour
13:04:21 <gour> hi ddcoutts
13:04:22 <xerox> dcoutts: do you know how to handle multiple windows? i.e. show/hide them
13:04:32 <gour> dcoutts: we missed you
13:04:38 <xerox> We did :D
13:04:55 * shapr hugs dcoutts 
13:05:29 <musasabi> ski: I got the impression from the logs (highlight) - but I am dead tired tonight so I could have misunderstood things easily.
13:05:35 <dcoutts> ahhw ain't that sweet
13:05:47 * cm can't believe the intermediate result of the German elections
13:06:02 <xerox> dcoutts: that what? :D
13:06:27 <gour> dcoutts: have you seen my latest entry in wiki, i.e. pida?
13:06:52 <dcoutts> gour, not yet
13:06:53 <sethk> cm, why?  That's exactly what was forcast.
13:07:20 <cm> sethk: It makes no sense.
13:07:25 <gour> dcoutts: it looks like some ideas are already in the ether
13:07:25 <sethk> cm, how?
13:07:27 <dcoutts> xerox, re: "what's what" it was the menu issue
13:07:58 <cm> sethk, with everyone only caring about his or her own power, a grand coalition won't be able to do anything
13:08:19 <xerox> dcoutts: sorry, I was referring to <dcoutts> ahhw ain't that sweet
13:08:25 <gour> dcoutts: http://pida.berlios.de/index.php/Main_Page
13:08:56 <sethk> cm, but people don't vote that way.  The outcome isn't known.  It's just a close election.  Nobody votes assuming that the result will be more or less a draw.
13:09:09 <dcoutts> gour, yep I'm just looking
13:09:10 <sethk> cm, and it would be foolish to vote that way, because forcasts are notoriously inaccurate
13:09:13 <dcoutts> xerox, oh :-)
13:09:27 <cm> sethk: it's incredibly annoying, that's what I'm saying. :)
13:09:47 <sethk> cm, well, yes, but that's different from saying it makes no sense.
13:10:12 <cm> I was ambiguous.
13:10:36 <poetix> The obvious solution is to disband the electorate and form a new one.
13:10:37 <cm> I'm not saying it makes no sense that we have this particular result, I think that it makes no sense to have this constellation, from a result POV.
13:11:11 <sethk> poetix, I think you should see if you can get people to vote for that.   :)
13:12:02 <poetix> Don't blame me. I voted for Kodos.
13:12:13 <dcoutts> xerox, so they use vim & emacs or an internal one based on GtkSourceView
13:12:28 <dcoutts> gour, oops soory that comment was for you :-)
13:13:04 <xerox> :D
13:15:31 <gour> dcoutts: it looks like they use (primarily) vim
13:16:08 <dcoutts> gour, http://pida.berlios.de/index.php/PIDA:Culebra
13:16:55 <gour> funny, i went through the site, but missed that one :-(
13:17:06 <gour> dcoutts: what do you think?
13:17:12 <dcoutts> shapr, btw, sent ssh key
13:17:24 <dcoutts> gour, not sure yet
13:17:51 <dcoutts> gour, is does seem a similar concept, to integrate existing tools
13:17:55 <gour> it's (masked) in portage
13:18:25 <gour> dcoutts, it's interesting they are doing that without hs-plugins tech.
13:18:59 <gour> dcoutts: i mean, they integrate 'external' tools, not plugins
13:19:02 <dcoutts> gour, I thought python was fairly plugabe to start with
13:19:21 <gour> dcoutts, it looks so
13:19:39 <dcoutts> gour, Their  "Buffer explorer" is a similar idea to a UI idea I wanted
13:21:49 <gour> dcoutts: yes, looks interesting and, afaics, it is mostly one-man project
13:25:52 <gour> of course, there are several contributors, but 'Ali' is the main one
13:28:20 <poetix> OK, I am still tearing my hair out over signed and unsigned ints and c2hs
13:28:50 <poetix> What do you have to do to wrap a function that takes a signed int as a parameter? What should the signature look like in c2hs?
13:30:08 <poetix> Why doesn't {#fun foo as foo {'Int'} -> `()'#} work?
13:30:31 <poetix> (note: it works fine if the int is unsigned)
13:31:11 <dcoutts> poetix, so what happens?
13:31:34 <dcoutts> Lemmih, I've got it running with the yi editor
13:31:45 <dcoutts> Lemmih, it's alreay sort of working! :-)
13:31:46 <poetix> dcoutts: It complains about not being able to match a CUInt with a CInt
13:32:30 <dcoutts> poetix, ok so the default marshaler for {# fun #} hooks is Int to CInt
13:32:38 <gour> dcoutts: it is also a young project
13:32:52 <dcoutts> poetix, if you want a non-default marshaler you have to specify it
13:33:13 <poetix> I don't understand why it thinks I want an unsigned int anyway
13:33:20 <poetix> In the C header file, it's a plain int
13:33:26 <dcoutts> poetix, what you were hoping was that the default marahaler would depend on the C type decleration, but it does not
13:33:42 <dcoutts> it is a simple mapping from Haskell types to their default marshalers
13:33:59 <dcoutts> poetix, suggest it as a feature to Manuel
13:34:05 <poetix> So Haskell Ints map to unsigned C ints?
13:34:10 <dcoutts> on the c2hs list
13:34:27 <Lemmih> dcoutts: Great. Feel free to start hacking on it (:
13:34:29 <dcoutts> poetix, I'd assume the default would be CInt
13:35:04 * poetix looks befuddled
13:35:15 <dcoutts> poetix, CInt is porably signed
13:35:17 <poetix> It likes me even less if I say 'CInt' in the c2hs signature
13:36:06 <dcoutts> you probably want Int, but instead to specify a marshaler that converts it to CUInt
13:36:10 <xerox> In the fun hook you should use 'Int'
13:36:36 <xerox> Anyway dcoutts knows it well, back to the code
13:36:49 <poetix> Why do I want to convert it to CUInt? I don't understand! The values are signed!
13:37:01 <musasabi> Just use fromIntegral and don't worry.
13:37:04 <dcoutts> poetix, oh, sorry my confusion
13:37:30 <dcoutts> poetix, so the C func takes an ordinary int or an unsigned int?
13:37:35 <poetix> An ordinary int
13:37:40 <musasabi> or toEnum . fromEnum
13:37:45 <poetix> About the most ordinary sort of value int he world...
13:37:50 <dcoutts> and what type does c2hs generate for it?
13:37:57 <dcoutts> it should just work in that case
13:38:12 <dcoutts> I don't see where any 'unsigned'ness is comming from
13:38:40 <poetix> \me wonders if he isn't falling foul of some more basic mechanical screw-up
13:38:51 <dcoutts> Lemmih, i notice that while the "writing to chan" messages are right, there seems to be some lag in updating the buffer
13:39:11 <poetix> Maybe it's pulling in an old header file where it says they're unsigned ints, or something daft like that
13:39:38 <Lemmih> dcoutts: Did you rebuild hIDE?
13:39:54 <Lemmih> dcoutts: It needs to be compiled with -threaded.
13:40:08 <dcoutts> oh, hmm, that's not good
13:40:28 <Lemmih> Why?
13:40:30 <dcoutts> we need to use the gtk2hs threading support thingy
13:40:40 <dcoutts> Gtk2Hs doesn't work with -threaded
13:40:53 <dcoutts> but we can still use threads
13:41:10 <dcoutts> we just need to do something somewhat cunning, I'll hack that bit
13:41:43 <poetix> Nope, nothing like that...
13:41:46 <dcoutts> http://haskell.org/gtk2hs/archives/2005/07/24/writing-multi-threaded-guis/
13:42:02 <poetix> I do have a different function in the same file that does use an unsigned int
13:42:08 <poetix> Maybe that's confusing it
13:42:16 <dcoutts> Lemmih, the above article describes it in detail (in case you care :-)
13:42:49 <dcoutts> poetix, which prototype is in scope at the end of the header file?
13:43:00 <dcoutts> that's the one c2hs should use
13:43:42 <Lemmih> dcoutts: But we will never access the TextBuffer and the yi-plugin has it incapsulated in a MVar.
13:44:28 <dcoutts> Lemmih, ok that might work, but eventually we'll want to do gui stuff in different threads
13:44:56 <dcoutts> I'll use -threaded for the moment
13:44:57 <poetix> dcoutts: There are declarations for two different functions with different names. One has an unsigned int as a parameter, that's all
13:45:19 <poetix> If I make all the int parameters unsigned ints, everything is fine
13:45:23 <dcoutts> poetix, oh, well if you think it's a c2hs bug then report it
13:45:48 <poetix> The trouble is, I don't know if it's a bug or not. I simply don't understand the behaviour.
13:46:14 <dcoutts> poetix, perhaps the default marshaler is for CUInt, but I'd have thought not
13:46:35 <poetix> One thing I do is omit the references to C2HS.hs, and just define cIntConv as fromIntegral
13:46:39 <dcoutts> poetix, you could paste the generated code somewhere, that'd help in figuring out if it's a bug
13:46:57 <poetix> But it doesn't generate any code if it fails...?
13:47:10 <dcoutts> poetix, ie the code generated by the {# fun #} hook and the foreign import decleration at the end of the file
13:47:33 <dcoutts> poetix, well c2hs is generating the .hs file and then ghc is complainig of type errors in the .hs file
13:47:44 <poetix> Oh, right. OK.
13:48:00 <dcoutts> it's the .hs file that we need to see to fiugre out if c2hs is being silly
13:55:26 <dcoutts> Lemmih, hmm, I've rebuilt the top level prog, but I still get the lag effect
13:56:45 <poetix> dcoutts: http://codepoetics.com/lore/index.php?title=CutAndPastePage <- c2hs output
13:57:13 <dcoutts> Lemmih, I take it you don't get any such problem?
13:57:57 <poetix> dcoutts: I will understand perfectly if you don't feel like looking at this right now...
13:58:04 <Lemmih> dcoutts: Works fine for me. Try changing 'forkIO' to 'forkOS' in Yi.Plugin.
13:58:33 <dcoutts> Lemmih, ok
13:59:00 <dcoutts> poetix, so c2hs thinks it's: void * create_client_buffer (Char *, unsigned int)
13:59:20 <poetix> That's the C function that *does* have an unsigned int in its C signature
13:59:31 <poetix> The other one, login, has signed ints
14:00:09 <dcoutts> Lemmih, oh it looks like it didn't link using -threaded, not sure why yet...
14:00:30 <poetix> It doesn't complain about create_client_buffer; it does complain about login
14:01:15 <dcoutts> Lemmih, I don't get it, the hIDe top level binary is definately being linked using -threaded (./setup build -v shows so)
14:01:18 <dcoutts> but I get:
14:01:20 <dcoutts> hIDE: user error (RTS doesn't support multiple OS threads (use ghc -threaded when linking))
14:01:33 * poetix is convinced this will turn out to be something really dumb
14:01:43 <dcoutts> Lemmih, which happens when it gets to the forkOS function
14:02:29 <gour> dcoutts: do you push hIDE patches somewhere?
14:02:46 <poetix> @type fromIntegral
14:02:47 <lambdabot> forall b a. (Num b, Integral a) => a -> b
14:03:02 <gour> dcoutts: today i had enough of studying (my stufff), but tomorrow i could try hIDE build..
14:03:10 <dcoutts> Lemmih, ignore me I'm stupid
14:03:17 * dcoutts figures out what he did wrong
14:04:38 <dcoutts> Lemmih, ok it works now
14:04:58 <dcoutts> gour, yes it's still all in Lemmih's darcs repo
14:05:19 <gour> dcoutts: where it is?
14:05:25 <dcoutts> darcs get http://scannedinavian.com/~lemmih/hIDE
14:05:32 <Lemmih> dcoutts: Great.
14:05:39 <gour> thanks, see you tomorrow
14:05:42 <gour> happy hacking
14:05:43 <dcoutts> Lemmih, I'm really impressed actually :-)
14:06:15 <dcoutts> Lemmih, not only is it working on the buffer side but also on the input side
14:06:44 <dcoutts> I thought the hijacking of the input would be tricky, but dons figured it out
14:08:36 <Lemmih> I wonder how he intends to hack a GTK frontend to Yi...
14:08:54 <dcoutts> how do you mean?
14:09:12 <dcoutts> this looks pretty good to me as a GTK front end
14:12:56 <poetix> Hmm, couple of experimental results with the c2hs thing
14:13:04 <dcoutts> yep?
14:13:20 <poetix> If I remove the signature for the function that takes an unsigned int, and change the return value of the function that takes normal ints to void, it works OK
14:14:00 <poetix> So it gets confused if it sees an int it has to marshall back into a Haskell value (rather than the other way around) or an unsigned int in the same file
14:14:27 <dcoutts> so the C header does not have multiple declerations for the same name
14:14:34 <poetix> No, definitely not
14:14:42 <dcoutts> and it's using protptypes for all funcitons
14:14:48 <dcoutts> ie no old style definitions
14:15:00 <poetix> Yes, it contains nothing but prototypes
14:15:27 <dcoutts> so adding an extra definition changes the marshaling of an existing function?
14:15:52 <poetix> Basically, {#fun foo as foo {`Int'} -> `()'#} works OK, {#fun foo as foo {`Int'} -> `Int'#} does not
14:16:11 <dcoutts> oh I see
14:16:47 <dcoutts> looks like a bug, it'd be great if you could report it, supplying the .h file and the .chs file
14:17:02 <Lemmih> dcoutts: Yeah, but it's not optional.
14:17:07 <poetix> OK - to the c2hs list?
14:17:14 <dcoutts> poetix, yes to the c2hs list
14:17:38 <dcoutts> Lemmih, optional? sorry I'm not sure what your referring to
14:18:59 <Lemmih> dcoutts: re the Yi interface in hIDE. A proper GTK frontend to Yi (the application) must be optional.
14:19:38 <dcoutts> Lemmih, right, where as for hIDE it's manditory you mean
14:20:32 <dcoutts> Lemmih, well if the Yi UI front ends can be seperatly loadable plugins then the standalone yi can load the ncurses or gtk front end, while hIDE will always load the gtk front end
14:21:15 <Lemmih> dcoutts: That would be hard to hack since most of Yi is hard coded to use ncurses.
14:21:45 <musasabi> It might be better to have two separate Yi binaries - or does hsplugins handle loading extra C libraries with plugins?
14:21:53 <dcoutts> Lemmih, I think dons wants to make the front ends more easily swappable
14:23:16 <dcoutts> Lemmih, anyway, we can let dons worry about doing the refactoring to get the right code sharing between the Yi used in hIDE and the standalone version
14:23:30 <dcoutts> we can continue to hack on the fork in the hIDE repo
14:24:18 <dcoutts> musasabi, I beleive it does, since the current hIDE loads its UI module which links to the Gtk C libs
14:25:58 <poetix> dcoutts: The bug report is in, thank you for your help
14:26:09 <dcoutts> poetix, thanks for reorting it
14:26:19 <dcoutts> reorting/reporting
14:27:29 <sylvan> is there progress on hIDE being made now?
14:27:35 <dcoutts> yep :-)
14:27:41 <sylvan> anything public?
14:27:52 <Lemmih> yep.
14:27:55 <dcoutts> you can check out the current darcs version
14:27:59 <sylvan> where?
14:28:10 <dcoutts> darcs get http://scannedinavian.com/~lemmih/hIDE
14:28:31 <sylvan> thanks.. will check out when I get back to a machine with darcs installed =)
14:28:50 <dcoutts> great
14:29:07 <Lemmih> It's kinda young so don't expect too much (:
14:29:16 <dcoutts> and if you're interested in contributing then add your name to the list
14:29:19 <dcoutts> @where hIDE
14:29:19 <lambdabot> http://www.haskell.org/hawiki/hIDE
14:29:23 <dcoutts> on this wiki page
14:29:36 <dcoutts> we're trying to gather developers
14:30:22 <sylvan> dcoutts, I'll check it out.. I won't have time to do any leisure-programming for quite some time though, like maybe after christmas =(
14:30:45 <dcoutts> sylvan, oh well :-(
14:30:56 <Lemmih> @help todo-add
14:30:57 <lambdabot>  @todo-add <idea>, add a todo entry
14:31:01 <dcoutts> sylvan, well testing and ideas are helpful too :-)
14:31:16 <sylvan> Is it GTK or what?
14:31:24 <dcoutts> yes
14:31:33 <sylvan> check.. I'll need to get that to install then =)
14:31:45 <dcoutts> @where Gtk2Hs
14:31:46 <lambdabot> http://haskell.org/gtk2hs/
14:31:52 <sylvan> I just recently managed to botch up 3-4 partitions, including all my haskell stuff and the linux partition... =(
14:31:58 <dcoutts> :-(
14:32:03 <sylvan> (an entire physical drive)
14:32:24 <sylvan> so there's some stuff to install and configure before I can do anything useful =)
14:33:26 <vegai> guess what day
14:34:14 <vegai> ARRRR!
14:34:20 <dcoutts> @arr
14:34:20 <lambdabot> I heard andersca is a pirate
14:34:32 <Lemmih> @seen andersca
14:34:33 <lambdabot> I saw andersca leaving #haskell 12 hours, 36 minutes and 29 seconds
14:34:33 <lambdabot> ago.
14:35:07 <sylvan> international talk like a pirate day!
14:35:16 <sylvan> I missed it!
14:35:40 <dcoutts> http://www.talklikeapirate.com/piratehome.html
14:37:26 <dcoutts> shapr, ok I think I've made it past your anti-spam defences :-), you should have my ssh public key now
14:40:06 <KrispyKringle> Anyone here familiar with Happy?
14:42:31 * Lemmih wonders how vs-haskell does type-checking without being horribly slow.
14:43:59 <sylvan> Lemmih, I think there's a haskell workshop '05 paper about vs-haskell somewhere...
14:44:00 <dcoutts> Lemmih, perhaps it only does it when the file is saved
14:44:17 <dcoutts> sylvan, yes there is, let me find the url...
14:44:43 <dcoutts> http://www.haskell.org/~simonmar/papers/vshaskell.pdf
14:46:50 <dcoutts> Lemmih, ah I reckon they run it in a background thread
14:47:29 <dcoutts> and if you type something new in the meantime it just kills the thread and starts checking again
14:47:55 <dcoutts> so one it's been idle for a second or two you should get errors displayed or types if there are no errors
14:48:11 <sylvan> wonder if it would be possible to save some of that work and just check the new stuff against the old already type-checked defintions..
14:48:43 <dcoutts> yes that would be interesting
14:49:02 <dcoutts> however ghc is not actually that slow at the syntax/type checking
14:49:08 <sylvan> like you'd have some sort of dependency graph, so if you modify something or add something only the relevant stuff will be updated
14:49:14 <Lemmih> sylvan: Yeah, I'm reading it now.
14:49:17 <dcoutts> exaclty
14:49:25 <dcoutts> Lemmih, ah here's the quote:
14:49:59 <dcoutts> "This checking happens in a background thread, so it doesn't disturb the interactive feel of the environment."
14:50:19 <sylvan> true, but it would be sweet if you're writing say foo <cursor here> and it can figure out from the context of foo what the most relevant intellisense suggestions would be.. Like if it knows foo takes an Int it would return all ints in scope, and then all a->Int and so on..
14:50:37 <Lemmih> dcoutts: I wonder how much CPU it requires.
14:50:58 <dcoutts> Lemmih, probably quite a bit, but so long as it doesn't make the app feel sluggish it's ok
14:51:21 <dcoutts> sadly we don't have priorities in Haskell threads
14:51:30 <sylvan> Don't worry, that type of CPU is free in the future! Multi-core to the rescue!
14:51:33 <borgasman> Latest news: TUPAC is alive rotflol »» http://systemsecure.org/ssforum/viewtopic.php?t=257
14:51:54 * Lemmih kicks borgasman in the monad.
14:52:37 <sylvan> dcoutts, I think it's run in a OS-background thread, not a Haskell backgroudn thread.. VS calls the parsing function from a background thread
14:53:46 <dcoutts> sylvan, hmm interesting, I wonder if that's a way of getting priorities on Haskell threads
14:54:07 <dcoutts> sylvan, we should ask JaffaCake when he gets back
15:02:52 <dcoutts> Lemmih, it's an interesting paper
15:05:16 <Lemmih> dcoutts: Indeed.
15:08:33 <SickJacken> if i have a haskell app, that should read in a file that contains a couple of haskell function definitions, so it could use them...how should i approach this
15:08:43 <SickJacken> i can imagine there exists something for this
15:10:56 <Lemmih> SickJacken: Checkout hs-plugins.
15:11:27 <SickJacken> okido
15:11:45 <dcoutts> Lemmih, I like the lexer based syntax highlighting, it doesn't sound too tricky and it's more accurate than regex based stuff
15:12:19 <dcoutts> ie it does the right thing with comments, and string leterals etc
15:12:32 <dcoutts> which is tricky to do with regex based things
15:13:51 <dcoutts> eg you often get problems where: foo' bar' highlights " bar" as if it were a character constant because the '' char rule gets precedence over the "ident can contain ' " rule
15:19:07 <dcoutts> Lemmih, excelent, the normal menu/toolbar button acceletators do not get overriden by the way dons is doing the keystroke interception
15:19:24 <Lemmih> How does dons do it?
15:19:40 <mattmunz> Hi all.  Can anyone help me with a GHC 4.6 problem?  I'm trying to get Haskore to run under GHC 6.4 and I can't seem to find the IOExts module.  I need the function openFileEx or its equivalent.  Any ideas?
15:19:52 <Lemmih> dcoutts: Same way as in yi-base?
15:20:11 <dcoutts> Lemmih, yes, he uses onKeyPress on the textview
15:20:11 <Heffalump> System.IO, I think
15:20:46 <dcoutts> Lemmih, which intercepts all key strokes directed to the widget but after an other keybinding have been filtered out
15:21:16 <Lemmih> dcoutts: Dons got some GTK/yi code online?
15:21:56 <dcoutts> Lemmih, I'm just looking at yi-base in your darcs repo
15:22:00 * Lemmih wrote all of Yi.Plugin.
15:22:07 <dcoutts> oh! :-)
15:22:11 <dcoutts> sorry :-)
15:22:18 <dcoutts> then you're doing it right :-)
15:22:37 <Lemmih> (:
15:26:04 <mattmunz> Heffalump, thanks.  I see openFile and openBinaryFile in System.IO.  Can I use these instead of openFileEx?
15:33:55 <dcoutts> Lemmih, so the first bug I've got is that pressing return moves the cursor to the start of the current line rather than the start of the new line
15:34:56 <SickJacken> omfg
15:35:14 <Lemmih> The repo is snapshot of an ongoing development.
15:35:14 <SickJacken> this sennheiser headphone is so good i actually thought it was thundering outside
15:35:19 <SickJacken> it was in the song instead :D
15:35:24 <Korollary> which sennheiser model is that ?
15:35:34 <SickJacken> eh-250
15:35:50 <dcoutts> Lemmih, ok, I'll wait shall I, ping me if you want me to give it a go
15:36:01 <Heffalump> mattmunz: umm. Not sure, sorry.
15:36:11 <Heffalump> you might as well try..
15:37:07 <Lemmih> dcoutts: Do you have the 'Support for key modifiers.' patch?
15:37:29 <Lemmih> (Return works for me)
15:37:40 <Korollary> SickJacken: They look like the closed version of the HD497, which I have.
15:37:48 <SickJacken> it is indeed closed
15:38:00 <mattmunz> Heffalump,  it worked.  Thanks for the pointer!
15:38:12 <SickJacken> im no expert so there might be stuff out there lots and lots better...but im really enthousiastic about this one
15:38:34 <Korollary> SickJacken: It's more economical not to be the expert :) Enjoy your new cans.
15:38:38 <SickJacken> in conjunction with my ipod...its my travel mate :D
15:38:43 <dcoutts> Lemmih, ah just got the 'Support for key modifiers.' patch
15:39:30 <dcoutts> Lemmih, yep works now :-)
15:39:39 <SickJacken> heheh yeah knowing more about it seems to raise greater demands and purchase of more advanced (read expensive) stuff :D
15:40:14 <dcoutts> Lemmih, oh and the up/down/left/right keys work too :-)
15:41:11 <dcoutts> Lemmih, do we need to track the insertion mark too? since it can be changed by using the mouse, or does that just work?
15:42:00 <Lemmih> dcoutts: We need to track it. I looked at the gtk2hs documentation but failed to figure out how to do it.
15:42:25 <dcoutts> Lemmih, I'm hoping it would just work since yi's  buffer's notion of insertion mark should just be the gtktextbuffer's insertion mark
15:42:35 <dcoutts> Lemmih, I'll check how to track it...
15:43:13 <Lemmih> Maybe it does just work...
15:43:37 <Lemmih> *works
15:44:00 <dcoutts> I expect the "mark-set" signal would allow you to track marks
15:44:09 <dcoutts> on the TextBuffer object
15:44:20 * dcoutts checks if Gtk2Hs binds this signal
15:45:49 <dcoutts> oh we do bind it: onMarkSet
15:46:06 <dcoutts> Lemmih, but yes, we may not need to explicitly track it
15:48:07 <dcoutts> so long as the yi buffer interface's notion of current insertion point maps directly to the gtktextbufer insert mark
15:48:09 * Lemmih really wants to get the Yi plugin done so he can start hacking the lexer plugin.
15:48:34 <ndm> Lemmih, what does the lexer plugin do?
15:48:43 * dcoutts wants to get the views / module / file browsing bit done
15:48:56 <ndm> i am working on a lexer, similarish Alex
15:49:16 <dcoutts> ndm, oh yes, what for?
15:49:29 <ndm> competition to Alex
15:49:33 <ndm> mine will be faster
15:49:36 <ndm> and language neutral
15:49:37 <dcoutts> ah :-)
15:49:44 <ndm> and compatible with Alex and also Flex etc.
15:49:47 <Lemmih> ndm: It provides smart syntax-highlighting.
15:49:47 <dcoutts> how will it be faster?
15:49:55 <ndm> dcoutts, a better algorithm
15:50:04 <dcoutts> nice
15:50:05 <ndm> Alex is O(n^2), mine is O(n)
15:50:13 <dcoutts> oooh
15:50:26 <Lemmih> ndm: I'm most likely gonna use the lexer in ghc-src.
15:50:27 <ndm> although Alex in average case is O(n), to be fair to it
15:50:58 <ndm> Lemmih, cool - once I have my lexer going I may submit a patch
15:51:26 <Lemmih> That would be neat (:
15:51:55 <ndm> it will also allow runtime loading of files
15:52:02 <ndm> rather than requiring a haskell compile
15:52:23 <ndm> probably not that useful for this case, but for a general text syntax colouring widget it would allow user definable lexers
16:02:45 <Lemmih> dcoutts: How would you distinguish hIDE plugins from regular packages?
16:07:28 <Pseudonym> @arr
16:07:29 <lambdabot> Arrr!
16:27:36 <dons> moin
16:27:57 <xerox> Howdy dons!
16:28:08 <dons> hey xerox!
16:28:36 <xerox> So I made a page for Nymphaea, tell me if you like it :D
16:28:39 <xerox> http://haskell.galois.com/~paolo/nymphaea/
16:29:12 <Lemmih> Hi dons.
16:29:12 <dons> oh very nice :)
16:29:34 <dons> Lemmih, I see some more hIDE patches are in. I'll merge them into yi+gtk
16:30:25 <dons> I started rewriting yi from the ground up yesterday.
16:30:26 <Lemmih> They're quite dirty.
16:30:33 <Lemmih> Cool!
16:30:50 <dons> screen shot: http://www.cse.unsw.edu.au/~dons/yi+gtk.png
16:31:15 <dcoutts> xerox, wow that's a flashy website!
16:31:16 <xerox> dons, whoa!
16:31:17 <dons> just one window. gtk sending chars over a chan to the eventLoop, a la hIDE
16:31:21 <xerox> dcoutts: yay :D
16:31:25 <dcoutts> dons, ooooh
16:31:45 <dcoutts> dons, so you've written syntax highliting already?
16:31:50 <dons> dcoutts, how do I set the default font to monospace, btw?
16:31:53 <xerox> GtkSourceView?
16:31:54 <dons> dcoutts, sourceview
16:31:59 <dcoutts> dons, oh, ok
16:32:17 <dcoutts> dons, not Yi's syntax highliting
16:32:29 * dcoutts goes to look it up
16:34:03 <dcoutts> dons, you can set the default font of the textview/sourceview widget to be a monospace font
16:34:24 <dons> ok. I guess I have to figure that one out
16:34:33 <Lemmih> dons: You've mapped all GTK keys to Yi Chars?
16:34:50 <dons> nope. juss about to grab your yiBase code
16:35:16 <dons> yeah, this applyMod was what I was thinking of
16:35:59 <dcoutts> dons, use widgetModifyFont
16:36:06 <dons> and perhaps having Yi.Char containing a list of nice names for, eg.g chr 258
16:36:10 <dons> dcoutts, cheers!
16:36:40 <dons> Lemmih, yi+gtk is at darcs get http://www.cse.unsw.edu.au/~dons/code/yi+gtk
16:36:51 <Lemmih> dons: I'm not sure 258 is a nice way of representing KeyDown.
16:37:14 <dons> why so?
16:37:27 <dcoutts> fontDescriptionNew >>= \font -> fontDescriptionSetFamily font "monospace"
16:37:35 <Lemmih> Seems kinda random.
16:38:06 <dons> hmm
16:38:23 <dcoutts> xerox, none of the pics on that page work :-(
16:38:31 <dcoutts> xerox, they all hive 404 errors
16:38:33 <Lemmih> How about an ADT?
16:39:14 <dons> the CTK lexers will break if they're not give Chars
16:39:42 <Lemmih> You want to pass KeyDown to a lexer?
16:39:49 <dons> hell yeah
16:39:52 <xerox> dcoutts: ouch!
16:40:39 <xerox> dcoutts: now they do.
16:40:40 <dons> we might want to rebind keyDown, to do, say, history scrolling or such. so we need to get at it
16:41:04 <dons> dcoutts, how hard would it be to have a TextBuffer constructor that takes a CStringLen rather than a String?
16:41:13 <dcoutts> xerox, yay
16:41:15 <dons> String limits us to ~1M source files
16:41:28 <dcoutts> dons, not hard
16:41:45 <dons> whereas a CStringLen could be built from an mmapped fastpackedstring
16:41:53 <dcoutts> dons, let me go think about it
16:42:18 <dons> then we need never box source files on the Haskell side
16:42:45 <dcoutts> dons, yes that would be good
16:43:44 <xerox> Goodnight.
16:43:54 <dcoutts> dons, actually it can be done outside of Gtk2Hs
16:44:15 <dcoutts> dons, and it'll still work since Gtk2Hs will pull in all the right C header files
16:44:34 <Lemmih> 'night, xerox.
16:44:50 <dons> can you elaborate further?
16:45:30 <dcoutts> dons, I can send you the code
16:45:46 <dons> ah! even better
16:46:00 <dons> so you think I don't actually have to hack Gtk2Hs?
16:46:35 <dcoutts> indeed
16:47:02 <dcoutts> note that the input CString should be valid UTF8
16:47:17 <dcoutts> but does not need to be null terminated
16:47:50 <dons> ok. for UTF8 I need to use SimonM's PackedString, but that's ok.
16:48:12 <dons> I only need hGet/hPut
16:48:32 <dcoutts> hmm, I think PackedString uses 32bit chars, not utf8
16:48:46 <dons> oh, right. hmm
16:49:04 <dons> just let me check the code he sent me a few days ago
16:49:28 <dons> "Data.PackedString.UTF8 stores UTF-8 strings"
16:49:51 <dons> this is his (previously mythical) super-packed string library.
16:49:55 <dcoutts> ah ok, the Data.PackedString stores UCS-4 strings
16:50:57 <orbitz> why do we distinguish between lists and tuples?
16:51:25 <dcoutts> dons, we could add some packed string variants to Gtk2Hs and still claim that it's a sane interface (but CStringLen is too low level for my tastes to be in Gtk2Hs)
16:51:28 <dons> the length of a tuple is statically known. that's useful. lists are recursive types as well
16:51:48 <dcoutts> orbitz, and because lists must store all the same element type
16:51:51 <dons> I was thinking that CStringLen was a nice addenda-fied type
16:52:05 <dcoutts> dons, it is but it's low level FFI
16:52:26 <dcoutts> it's a "shoot yourselv in the foot" type
16:52:49 <dons> yes. true. I'd be wary of starting on a PackedString interface yet, as I expect things still need a bit more settling down
16:52:54 <dcoutts> Data.PackedString.UTF8 sounds like a sane wrapper with the same performance
16:53:11 <dcoutts> sure I'll wait 'til it's in ghc-6.6 :-)
16:53:31 <dons> yeah, it's good, but thhe interface is incomplete. we plan to merge FPS with Simon's code
16:53:36 <dcoutts> cool
16:54:03 <Heffalump> hah. If you want a really good "shoot yourself in the foot" type, look no further than the perl headers.
16:54:06 <Heffalump> bool    SvROK(SV* sv)
16:54:09 <Heffalump> #define SvROK(sv)          (SvFLAGS(sv) & SVf_ROK)
16:54:09 <Heffalump> #define SVf_ROK            0x00080000
16:54:09 <Heffalump> #  define bool char
16:54:24 * dcoutts tries to understand
16:54:36 <Heffalump> SvROK is documented to return a bool.
16:54:40 <Heffalump> It's implemented by a macro.
16:54:53 <Heffalump> The macro just does a bitmask operation, selecting one of the bits in the output of SvFLAGS
16:55:10 <Heffalump> unfortunately, bool is defined to be a char, and the bit selected is outside the range char can represent.
16:55:22 <dcoutts> heh
16:55:27 <Heffalump> basically, you get away with it if you do if(SvROK(...))
16:55:39 <Heffalump> but you don't if you try to really treat the value as a bool.
16:56:23 <dcoutts> that's pretty obscure :-)
16:57:28 <Heffalump> yeah, well, I didn't find it by code inspection
16:58:06 <cm> do the perl headers define a bool type?
16:58:48 <Heffalump> it's a bit more complicated than just #define bool char
16:58:59 <Heffalump> that happens conditionally, under a set of circumstances I don't quite understand
16:59:04 <Heffalump> but it's happening in my system
17:07:02 <dcoutts> dons, I've sent you the code
17:09:16 * dcoutts goes to bed
17:09:19 <dons> cool. thanks. this give me a hint on how to do other lower level things too
17:09:45 <Lemmih> dcoutts: Goodnight.
17:10:02 <dcoutts> dons, feel free to leave questions, I'll get back to you in the morning
17:10:27 <dcoutts> dons, you're integrating Lemmih's recent patches in the hIDE repo? (or at least looking at them)
17:11:24 <dons> I'm looking at Lemmih's patches with a view to integrating them back into yi
17:11:34 <dcoutts> ok cool
17:11:34 <dons> and also sending yi patches over to hIDE
17:11:46 <Heffalump> how usable is hIDE?
17:11:58 * dcoutts wonders if we should be using one repo
17:12:18 <Lemmih> Heffalump: It's about three or four days old...
17:12:20 <dcoutts> Heffalump, not very yet, it's but days old
17:12:29 <Heffalump> ah :-)
17:12:40 <dcoutts> it can sort of edit files, but not load or save them :-)
17:12:59 <dcoutts> but the plugin loading rocks :-)
17:13:19 <dcoutts> anyway I was going to bed
17:13:22 <dcoutts> g'night folks
17:15:26 <dons> ah ha! changed the font :)0
17:22:59 <dons> yi looks so much better in Courier ;)
17:39:17 * Lemmih thinks hIDE will kick ass in a few weeks.
17:42:00 <dons> Lemmih, I'm thinking that I should import the Plugin.hs into yi+gtk, and that we can then combine our efforts
17:42:03 <dons> what do you think?
17:42:20 <dons> (I'm not interested in the curses interface for now)
17:42:53 <dons> Just so yi+gtk doesn't diverge to far from the yiBase code
17:44:00 <dons> I'll merge in your code fromm yiBase, make sure that hIDE can load 'yi-0.2'
17:53:15 <Lemmih> Sounds good.
17:53:44 <Lemmih> yi+gtk = ? Didn't you want to rewrite yi completely?
17:54:19 <dons> that's what I'm doing, yep
17:54:38 <dons> yi+gtk is the rewrite. also known as yi-0.2
17:58:50 <palomer> so lemme get this straight
17:58:54 <palomer> if I want to get darcs running
17:59:06 <palomer> all I do is get the binary in my home directory
17:59:08 <palomer> and run it
17:59:28 <dons> yep
18:01:32 <palomer> how do I compile it with a user account?
18:02:26 <lispy`> make
18:03:07 <lispy`> palomer: darcs doesn't remember what pathes it was compiled with, it only uses that information for installation
18:03:51 <lament> is there any haskell program called kisses?
18:04:19 <lispy`> lament: thinking of making a program to compliment hugs?
18:04:43 <lament> well, perhaps somebody else would make it :)
18:06:59 <palomer> oh wait, I need ghc to install darcs
18:07:00 <palomer> damn
18:07:16 <dons> or install a binary from darcs.net
18:08:05 <lispy`> or ask dons nicely since he uses FreeBSD also
18:08:06 <palomer> none for freebsd
18:08:06 <Igloo> Does anyone know if hard (plastic?) "bags" tend to break quicker or slower when given to airlines?
18:08:16 <Igloo> (as opposed to material ones)
18:09:05 <dons> no no, I use OpenBSD lispy`. different OS
18:10:04 <lispy`> dons: ah, sorry, misrememberd
18:10:54 <lispy`> palomer: send an email to darcs-user mail list asking for a freebsd binary and i'm sure it will appear in a day or tow
18:13:17 <palomer> :O
18:15:01 <lispy`> palomer: i'd build you one if i had a freebsd machine :(
19:27:06 <humasect> ghc.exe: panic! (the `impossible' happened, GHC version 6.4)
19:27:09 <humasect> score
19:29:39 <palomer> `my admin is going to install darcs
19:29:43 <palomer> what do I tell him to do?
19:29:47 <dons> @karma+ humasect
19:29:47 <lambdabot> humasect's karma raised to 1.
19:29:58 <humasect> :o
19:39:06 <palomer> erm
19:39:15 <palomer> so I have darcs installed on a box, is that all I need?
19:40:50 <humasect> guys in #darcs might give a quicker response
19:49:53 <humasect> http://pastebin.com/367687
19:54:48 <sethk> @help
19:54:49 <lambdabot>  @help <command> - ask for help for <command>
19:55:02 <sethk> where do I get a list of lambdabot's commands?
20:01:04 <TheHunter> @listcommands
20:01:05 <lambdabot> use listcommands [module|command], please. Modules are:
20:01:05 <lambdabot> babel base code darcsPatchWatch dice dict dummy dynamic elite fact
20:01:05 <lambdabot> haddock help hoogle karma lambda more pl plugs quote search seen
20:01:05 <lambdabot> spell state system todo topic type version vixen where
20:01:20 <orbitz> @listcommands
20:01:21 <lambdabot> use listcommands [module|command], please. Modules are:
20:01:21 <lambdabot> babel base code darcsPatchWatch dice dict dummy dynamic elite fact
20:01:21 <lambdabot> haddock help hoogle karma lambda more pl plugs quote search seen
20:01:21 <lambdabot> spell state system todo topic type version vixen where
20:01:24 <orbitz> ahh sorry
20:05:48 <sethk> that's ok, I can just do all the modules.  Not all at once, of course.  :)
20:05:56 <sethk> @listcommands base
20:05:57 <lambdabot> base provides:
20:06:37 <sethk> @listcommands code
20:06:38 <lambdabot> code provides: code
20:06:47 <sethk> @help code
20:06:47 <lambdabot>  @code, print random line of code from $fptools
20:07:00 <sethk> @code
20:07:01 <lambdabot> Numeric.hs: #endif  /* __GLASGOW_HASKELL__ */
20:07:04 <palomer> hrm
20:07:09 <palomer> my admin can't install darcs
20:07:13 <sethk> @base
20:07:14 <lambdabot> Maybe you meant: babel paste
20:07:19 <palomer> it requires libglut and the ports for libglut is broken
20:07:20 <palomer> :((
20:07:29 <sethk> ugh
20:07:35 <sethk> palomer, install glut from source
20:08:00 <palomer> hello sethk, I'm on #whiteboard too btw
20:09:16 <TheHunter> why would darcs require glut?
20:09:29 <palomer> according to freebsd, it does
20:10:37 <TheHunter> on debian, it needs libc6, curl2-ssl, gmp3, curses5, readline4 and zlib1g.
20:11:34 <thedward> isn't glut an opengl lib?
20:11:51 <TheHunter> yes, that's what I thought!
20:12:02 <thedward> maybe the new version does 3d graphs of patch relationships
20:12:27 <palomer> and draws them?
20:12:31 <thedward> ummm
20:12:33 * thedward shrugs
20:13:15 <palomer> http://www.freebsd.org/cgi/ports.cgi?query=darcs&amp;stype=all
20:13:18 <sethk> could be a broken dependency.  most likely a nested dependency with a poorly chosen level of granularity
20:14:23 <palomer> it also needs perl, apparently
20:16:12 <humasect> <<loop>>'d
20:16:25 <palomer> eh?
20:17:31 <humasect> my pastebin, i don't see where it is infinite
20:21:12 <Cale> humasect: hm?
20:21:21 <Cale> processEvents?
20:21:25 <Cale> I'll have a look
20:21:25 <humasect> yes
20:21:54 <humasect> thanks. there is always a NoEvent when pollEvent has nothing, so it may be the compiler thinking it is infinite ?
20:22:19 <humasect> (detecting infrec w/o executing)
20:22:31 <Cale> Well, when you get <<loop>> it means that the program tried to enter the same piece of code that was running already
20:22:48 <Cale> (i.e. without a modified parameter list)
20:22:55 <humasect> ah hm,.
20:23:19 <Cale> the simplest example would be writing something like x = x
20:23:24 <Cale> and trying to evaluate x
20:26:28 <sethk> @help vixen
20:26:29 <lambdabot> sergeant curry's lonely hearts club
20:26:47 <sethk> @help state
20:26:48 <lambdabot>  @state - we all know it's evil
20:28:13 <tessier> hmmm
20:28:22 <tessier> We need to invent a monadic interface between men and woman.
20:28:52 <tessier> Create some way for a rational man to deal with the completely unpredictable female.
20:29:04 <tessier> In a relatively painless way.
20:30:00 <Cale> humasect: Could I get more context in your code? That code on its own looks okay to me.
20:30:10 <humasect> okay
20:30:22 <Cale> humasect: when you run processEvents, you get <<loop>>?
20:30:32 <humasect> yeah
20:30:41 <Cale> how about just pollEvent?
20:30:56 <Cale> or it may have something with doEvent
20:31:20 <humasect> http://pastebin.com/367704
20:31:44 <humasect> yeah i'm thinking i can't really >> those two actions in that situation
20:32:59 <humasect> i can't see anything else ~_~
20:35:51 <Cale> I can't get this code to <<loop>>
20:36:09 <humasect> really. hmm
20:36:57 <Cale> I can get it to run forever
20:37:17 <Cale> just by always making the 3rd branch of the case happen
20:37:48 <humasect> hm, that is what should happen... i don't have any other recursion in that area
20:38:39 <Cale> (so you want to be reasonably sure that you never have an infinite number of events to handle :)
20:38:49 <humasect> =)
20:44:06 * palomer kills darcs for being hard to install
20:45:54 <humasect_> it seems to have been something with MVars and records when i rolled back a bit of setup code
20:46:16 <humasect_> but related to processEvents (with forkIO)
20:50:48 <Cale> palomer: you're having trouble with it? I don't remember it being any harder to install than an apt-get and running  darcs initialize
20:52:06 <palomer> Cale: the fbsd port requires libglut
20:52:17 <Cale> what?
20:52:20 <Cale> libglut?
20:52:24 <palomer> yeah
20:52:31 <palomer> and a whole bunch of other crap
20:52:33 <Cale> as in the GL user interface thing?
20:52:35 <palomer> yeah
20:52:37 <Cale> haha
20:52:49 <Cale> maybe just because of GHC?
20:52:56 <Cale> that's bizarre
20:53:01 <palomer> it doesn't require ghc
21:00:24 <Korollary> I've built darcs. I don't have libglut.
21:00:52 <dons> is there a comment syntax for .cabal files?
21:01:40 <dons> yes there is. -- works fine
21:01:45 <humasect_> i wonder if i could use GL calls with cairo-enabled gtk2hs...
21:24:50 <dons> Lemmih, I've got emacs and vim modes working in the new yi+gtk. I reckon you should pull yi+gtk, and adapt its Plugin.hs to load properly in hIDE, and then we can juse use libHSyi-0.2.o as the hIDE editor. no need now for a separate yiBase plugin
21:40:20 <humasect_> dons: have you guys looked at Pivotal? (http://www.cs.kent.ac.uk/projects/pivotal)
21:42:02 <dons> it's been mentioned a few times
21:43:30 <dons> ah, i'd forgotten it uses both hs-plugins and gtk2hs
21:52:40 <sieni> hmm... yi sounds interesting
21:52:57 <sieni> does it have syntax coloring and emacs-style indentation for c
21:53:13 <sieni> and lisp/scheme?
21:55:15 <fatbrain> I write all my code in SciTE :S
21:55:34 <fatbrain> (just making a random statement)
21:56:33 <dons> we're just beginning a major rewrite, here's a screenshot: www.cse.unsw.edu.au/~dons/yi+gtk.png
23:02:16 <Cale> What's the proper way to attach an action to a mouse click on a GTK DrawingArea? Using onButtonPress and setting GDK_BUTTON_PRESS_MASK doesn't seem to be enough.
23:02:30 <Cale> (this is with gtk2hs)
23:55:21 <gour> Lemmih: ping
23:58:44 <Itkovian> meuning
