00:03:18 <musasabi> juhp: You need an updated version of Cabal.
00:03:27 <juhp> musasabi: ok thanks
00:12:46 <vegai> should ghc stop carrying Cabal, if it always lags behind?
00:13:28 <humasect> hs-source-dirs works in the cabal in 6.4
00:16:27 <boegel> gour: added you to the SP char list
00:17:23 <gour> boegel: hi, just wanted to ask :-)
00:20:00 <musasabi> Is there a more elegant way of saying newtype K w = K [w (K w)] ?
00:26:30 <juhp> let there be gtk2hs packages :)
00:33:50 <juhp> humasect: but not in 6.4.1?
00:34:16 <humasect> oh, most likely it is there too. =)
00:34:47 <humasect> i'm going to try something out in wxhaskell with 6.4.1 - that release was advertised as binary compatible, though.
00:35:24 <humasect> juhp: have you tried any 6.4 binaries with 6.4.1 with any trouble?
00:35:35 <dons> juhp, you getting yi from scannedinavian?
00:38:23 <juhp> dons: yeah just spotted it :)
00:38:54 <juhp> humasect: they work for you?
00:39:54 <juhp> humasect: api compatible surely?
00:40:03 <juhp> not abi
00:40:07 <humasect> the api is compatible, yes
00:40:37 <juhp> humasect: so you need to recompile :)
00:41:01 <humasect> no.
00:42:18 <musasabi> Is there a way to make ghci print kind information?
00:47:29 <juhp> humasect: what os are you using?
00:47:35 <humasect> windos.
00:47:54 <juhp> humasect: ah maybe ghc is more windows friendly?
00:48:08 <juhp> you certainly need to recompile on Linux/unix
00:48:09 <humasect> have you /had/ any troubles with 6.4.1?
00:48:49 <juhp> humasect: .hi files have a different version for 6.4.1 than 6.4 - there is no way it will work...
00:49:54 <juhp> ghc has been like that for as long as I can remember...
00:51:53 <humasect> hm, works fine.
00:52:23 <juhp> but I don't use windows :)
00:52:39 <humasect> doesn't matter
00:52:43 <humasect> it actually doesn't work
00:53:02 <juhp> oh?
00:53:12 <humasect> mismatched interface file versions: expected 6041, found 6040
00:53:26 <juhp> there you go then
00:53:38 <humasect> so, the API must have changed at least. or API changed should not be minor version numbers
00:54:18 <juhp> humasect: those numbers reflect ABI version not API :)
00:55:01 <juhp> so ghc releases break ABI every release, but they do their best to keep API for minor releases
00:55:52 <humasect> well there you go too, then
00:56:27 <juhp> and so one needs to rebuild libraries for every minor release :)
00:57:51 <humasect> hallelujia
00:58:10 <musasabi> Why are partially applied type synonyms not allowed?
01:06:49 <rubenz> For anyone who has built the recently released GHC 6.4.1 from source... Could you give me an idea how long it took? It seems to be taking ages for me. Not sure if it's hung or not..
01:07:34 <dons> between 20 minutes and 30 hours, depending on cpu speed
01:07:39 <dons> and memory
01:07:49 <dons> and disk speed
01:07:54 <stefanw> musabi: that would make type inference undecidable (you then would need higher-order unification)
01:07:59 <rubenz> ok... well I guess that doesn't help a great deal
01:08:33 <dons> rubenz, how fast is your machine?
01:08:41 * dons does ghc build time estimates for free!
01:09:18 <rubenz> I'm using a 500Mhz iBook. 640Mb RAM. Disk speed unknown.
01:10:11 <dons> some data points, 2.4ghz p4 = ~1hour, 800Mhz p3 = 3 hours, 150Mhz p2 = 8 hours, 33Mhz 68040 = >30hrs
01:10:58 <dons> rubenz, i think probably, hmm, 3 hours?
01:11:37 <rubenz> ok, thanks. yep i guess that would seem about right..
01:12:04 <dons> I can more accurately estimate if you tell me what file is being compiled at the moment..
01:12:52 <rubenz> ah, ok.. it is stuck on this. Has been there for a really long time... "==fptools== make all -r;
01:12:52 <rubenz>  in /Users/ruben/Documents/developer/ghc-6.4.1/ghc/compiler
01:12:52 <rubenz> ------------------------------------------------------------------------
01:12:52 <rubenz> "
01:13:15 <rubenz> sorry if that came out badly formatted
01:13:27 <dons> hmm.. you should be seeing more output, unless this is some kind of ebuild or packaged build
01:13:57 <dons> anyway, probably more than half way there now
01:14:02 <rubenz> yeah, that's partly what bothered me.
01:14:18 <dons> what does top say?
01:14:23 <rubenz> but, it's using up cpu cycles so it's doing something
01:14:48 <rubenz> yeah, thats what my top says..
01:16:05 <rubenz> 26904 gnumake     64.6%  3:39:54   1    11    23   632K   496K  1008K  34.9M
01:39:53 * Lemmih is overwhelmed with joy.
01:40:08 <Lemmih> I don't have to do civil service!
01:42:04 <tessier> Civil service?
01:42:05 * gour is happy too
01:42:08 <tessier> Is that like jury duty?
01:42:16 * Wilmer is still glad they kind of abandoned that law in .nl
01:42:23 <gour> more time for hIDE :-))
01:44:32 <Lemmih> tessier: It's when you refuse serving in the military. I think you can do your civil service almost anywhere. My cousin served his time in a kindergarten.
01:44:57 <Wilmer> and how did you escape from that too?
01:46:03 <tessier> Lemmih: Wow. Lucky he survived that one.
01:46:12 <tessier> er...he did survive, didn't he?
01:46:17 <tessier> Sorry if I just put my foot in it.
01:46:48 <tessier> Really, I'm not sure that law is such a bad thing.
01:47:20 <Wilmer> i don't know, they abandoned it here because the people in military service all turned out to be doing pretty much nothing
01:47:27 <Wilmer> because there was nothing to do in the first place
01:48:22 <tessier> Your president/king/prime minister/grand poobah needs to learn how to accuse other countries of having things they don't have so you can go in there and pretend to take those things away.
01:48:28 <tessier> Makes for great military exercise.
01:48:47 <sieni> http://images.ucomics.com/comics/ft/2005/ft050921.gif
01:49:41 <Lemmih> Wilmer: I picked a high number. You select a ticket and if it's 1-6000 then you must serve your country, if it's 6000-12000 then the military can call you in under emergencies and if it's 12000-36000 then you can go free.
01:49:54 <Heffalump> what'd you get?
01:50:00 <Lemmih> 27000
01:50:03 <Wilmer> Lemmih: ahh, that's a very niec system :-)
01:50:22 <gour> pretty smart
01:50:29 * gour grins
01:50:49 <tessier> Similar to our draft system in the US back in the day...
01:51:39 <tessier> Pick the right number, go home and live a nice life. Pick the wrong number, go get your liver sliced in half and die a slow death courtesy of the viet cong.
01:52:38 <dcoutts> Lemmih, congrats!
01:53:22 <gour> dcoutts: i have few more pkgs on the list which builds on amd64 with 6.4.1
01:54:44 <juhp> I built hs-plugins and gtk2hs :) - no surprises though
01:54:44 <gour> dcoutts: if it helps with gentoo-testing..
01:56:02 <gour> buddha-1.2, happy-1.15, alex-2.0.1-r1, c2hs-0.14.3,harp-0.2,  haskell-src-exts-0.2
01:56:20 <gour> and, of course, hs-plugins, yi, hIDE
01:56:42 <juhp> gour: you've been busy :)
01:56:55 <dcoutts> good going gour
01:56:55 <gour> ..cpphs-0.2, ghc-api
01:57:07 <gour> juhp: not me, but computer :-)
01:57:59 <dcoutts> emerge dev-haskell/*
01:58:04 <gour> juhp: that's what he is meant for ;)
01:58:15 <juhp> gour: oh nice
01:58:30 <gour> me?
01:59:08 <juhp> :)
01:59:40 <juhp> it is cool that you have so much haskell stuff in gentoo now
02:00:24 <dcoutts> I count about 30 packages in our dev repo
02:00:47 <dcoutts> and about 20 actually in portage
02:01:06 <gour> dcoutts: you want me to build all the dev-haskell ?
02:01:09 <dcoutts> quite a few new cabalised libs that need to go in
02:01:28 <juhp> I finally really submitted haddock to fedora extras yesterday - thought I already had...
02:01:45 <dcoutts> gour, if you do, you could report your success to #gentoo-haskell and makesure all the packages get marked ~amd64
02:02:26 <dcoutts> juhp, you need a hackage->rpm-spec-file program :-)
02:02:48 <dcoutts> juhp, we're developing a hackage->portage program
02:02:57 <dcoutts> hi der_eq!
02:04:16 <Heffalump> why hackage rather than cabal?
02:04:29 <dcoutts> because it works by querying the hackage server
02:04:36 <Heffalump> ah
02:04:53 <gour> dcoutts: ok, i'll try to do build some more dev-haskell pkgs during the day
02:05:10 <dcoutts> gour, ok, report success/failure to #gentoo-haskell
02:06:36 <gour> dcoutts: yes, sir :-)
02:07:06 <dcoutts> :-) ta gour
02:08:03 <gour> dcoutts: congrats for you contest-winner
02:08:19 <dcoutts> gour, oh the lambdabot competition?
02:08:22 <gour> dcoutts: btw, i'm also now in the hall of fame :-)
02:08:28 <dcoutts> oh?
02:08:36 * dcoutts goes to look
02:08:39 <gour> dcoutts: yes
02:08:52 <gour> dcoutts: done by my wife ;)
02:14:31 <dcoutts> heh heh
02:14:50 <dcoutts> hence you being angelic :-)
02:16:48 <gour> am i not?
02:17:07 <gour> :-}
02:19:33 <dcoutts> :-)
02:19:48 <boegel> dcoutts: have you received your prize yet ?
02:20:02 <dcoutts> boegel, huh?
02:22:48 <boegel> well yeah, have you spoken to dons on how your logo will look like?
02:36:22 <shapr> good morning!
02:38:28 <Lemmih> Hi shapr.
02:54:04 <Lemmih> dons: How are we gonna load the GHC api in hIDE?
02:55:20 <dcoutts> well loading it is easy, no? using it is probably harder
02:55:40 <Lemmih> dcoutts: It uses parts of the RTS which aren't exported.
02:56:50 <dcoutts> Lemmih, ah, I see
02:57:34 <dcoutts> are they exported in ghc 6.5 ?
02:57:39 <dcoutts> or is it a plugins thing?
02:58:17 <Lemmih> It's a dynamic loading thing.
02:58:30 <dcoutts> oh, that's probably better
02:58:50 <dcoutts> ie we might be able to fix it without waiting for the next ghc version
02:59:01 <Lemmih> How?
02:59:55 <Lemmih> It's the same problems as with loading code compiled with profiling enabled.
03:00:09 <dcoutts> how are rts things exported to plugins?
03:01:48 <Lemmih> They are listed in $fptools/ghc/rts/Linker.c
03:02:05 <dcoutts> oh, so we might have to wait for a later ghc version?
03:03:04 <Lemmih> I'm not sure later versions of GHC want to export those symbols.
03:03:14 <dons> hmm :/
03:05:03 <Lemmih> Maybe we can add symbols to the symbol list at runtime.
03:05:18 <dcoutts> what rts stuff is needed?
03:05:43 <dcoutts> presumably it's to do with ghci's dynamic code generation stuff
03:07:03 <Lemmih> ghciInsertStrHashTable looks right.
03:10:04 <dons> hmm, we could probably add them, yes. great idea!
03:10:22 <dons> that's what happens when stuff gets loaded anyway, so hack away :)
03:10:55 <dcoutts> great :-)
03:12:42 <dons> Lemmii, btw, feel free to usee or refactor stuff in UI.hs to work with yiBase - so things like the courier font code work
03:13:38 <dons> i'll do the same, but won't have much time till icfp is over :/
03:15:41 <dcoutts> yay, my file browser is (mostly) working!
03:15:54 <shapr> w00
03:26:35 <JaffaCake> Lemmih: did you really port the GHC API to GHC 6.4?  or did I misunderstand your announcement?
03:27:19 <Lemmih> Yeah, I did.
03:27:37 <JaffaCake> that's pretty impressive
03:28:08 <dcoutts> Lemmih rocks :-)
03:28:40 <dcoutts> JaffaCake, now there are some problems loading it as a plugin
03:28:44 <JaffaCake> I wonder if we should pull it in, and have it for 6.4.2
03:29:05 <dcoutts> because it needs some more exported linker symbols
03:29:20 <JaffaCake> I'm having trouble accessing http://scannedinavian.org/~lemmih/ghc-api, is it up?
03:29:35 <JaffaCake> dcoutts: right, I can imagine that
03:29:47 <Lemmih> It might be badly broken. I've only tested the lexer.
03:29:50 <dcoutts> but dons & Lemmih reckon that can be fixed by using ghciInsertStrHashTable at runtime to insert more
03:31:08 <Lemmih> JaffaCake: The URL works for me.
03:31:20 <JaffaCake> there are some fundamental problems with dynamically loading the GHC package
03:31:58 <dcoutts> yes?
03:32:10 <JaffaCake> they share the dynamic linker, for one - so probably better not use dynamic linking via the GHC API
03:32:43 <dcoutts> use the 'host' for dynamic linking perhaps
03:33:10 <dcoutts> and not the loaded GHC API
03:33:22 <JaffaCake> maybe - GHC keeps some state internally about what it has linked
03:34:11 <JaffaCake> what linker symbols were missing when you tried it?
03:35:06 <dcoutts> JaffaCake, would some of these problems of multiple stuff being loaded without sharing be solved when we use shared libs for ghc pacakges?
03:35:18 <Lemmih> stg_interp_constr[1-8]_entry
03:35:25 <dcoutts> eg allow just a single base pacakge to be loaded?
03:35:39 <JaffaCake> dcoutts: probably
03:36:35 <JaffaCake> that fixes the problem of loading packages multiple times, but you still have to worry about loading .o files that conflict
03:36:57 <JaffaCake> eg. trying to compile some template haskell using your dynamically loaded GHC API should be interesting! :)
03:37:28 <dcoutts> JaffaCake, it might be useful in future for hs-plugins & the GHC api to share the same underlying module loader?
03:37:41 <JaffaCake> yes
03:37:45 <dcoutts> so the state about what is loaded can be kept consistent
03:37:57 <JaffaCake> right, I think that would be a good solution
03:38:14 <dcoutts> dons, you're listening?
03:38:45 <JaffaCake> actually I think hs-plugins should use the GHC API, but perhaps that's overkill
03:39:35 <dcoutts> it doesn't obviously seem overkil to me
03:40:08 <JaffaCake> well, in a sense it's the right thing to do
03:40:28 <dcoutts> so what might we expect to go wrong if we ever tried compiling/interpreting some TH code? :-)
03:41:42 <JaffaCake> hmm, well GHC would load up a bunch of .o files from the module being compiled (ignore interpreting for now), and these share the same symbol namespace as the modules you've loaded with hs-plugins
03:43:27 <JaffaCake> if all your code is interpreted, then you're ok (then GHC won't load .o files using the RTS linker)
03:43:57 <dcoutts> it's not obvious to me why we would get symbol name clashes
03:44:36 <JaffaCake> imagine this scenario: hIDE is mostly dynamically linked using hs-plugins, and you're using it to develop hIDE itself
03:44:48 <dcoutts> hmm
03:44:48 <JaffaCake> furthermore, you used some TH code
03:45:13 <JaffaCake> GHC will try to dyn link the modules of hIDE, perhaps different versions of them
03:46:05 <JaffaCake> I haven't tried doing any TH in visual haskell, I bet it doesn't work for us either (for different reasons, though)
03:46:22 <dcoutts> yes I see
03:47:13 <JaffaCake> what you need is separate symbol namespaces, really
03:47:18 <dcoutts> yes
03:47:41 <JaffaCake> we'll need to have a "linker session"
03:47:45 <dcoutts> so this would be a problem if we add an ghci-like evaluation feature to the IDE
03:47:59 <JaffaCake> yup
03:48:10 <dcoutts> we can use the GHC api fine for lexing, parsing, type checking, name searching etc with no problem
03:48:21 <dcoutts> even for developing hIDE with hIDE
03:48:32 <JaffaCake> yes - though without TH
03:48:35 <dcoutts> yes
03:48:42 <dcoutts> no types of TH stuff
03:49:04 <JaffaCake> you might get away with it if everything is interpreted
03:49:13 <dcoutts> right
03:49:46 <dcoutts> or we could do the evaluation in a seperate process
03:50:03 <dcoutts> but that doesn't help with types and TH things
03:50:12 <JaffaCake> yes you could - kind of defeats the purpose of having a GHC API tho
03:50:47 <dcoutts> yeah
03:51:01 <JaffaCake> I think extracting the linker state into a session is the right way to go
03:51:05 <dcoutts> hmm linker sessions? eek
03:51:17 <dcoutts> I wonder how that interacts with shared libs :-)
03:52:20 <JaffaCake> hmm, well we can't change the system's linker, but I think you can use it in a mode where it doesn't have a single global namespace
03:52:39 <JaffaCake> i.e. you look up symbols in a specified shared object
03:52:43 <dcoutts> oh really, it's more sophisticated than I thought
03:52:51 <dcoutts> though having some sharing between linker sessions would be convenient, eg you could always share the base package
03:53:18 <JaffaCake> right, you might want to do that
03:53:30 <dcoutts> and share external C libs
03:53:46 <JaffaCake> dlsym() takes an object handle - and I think we often know which package we expect a symbol to come from
03:53:57 <dcoutts> right
03:54:29 <dcoutts> but if we load HSfoo.so and HSfoo.so will it not complain?
03:55:09 <dcoutts> or is it ok if they're loaded from different physical files
03:55:24 <JaffaCake> that I don't know
03:55:53 <dcoutts> how do you ask (or prevent?) libs from being linked against each other when you dlopen them
03:56:00 * dcoutts consults glibc man pages
03:56:38 <JaffaCake> each lib has a dependency list built in
03:56:53 <dcoutts> yes
03:58:39 <dcoutts> hmm RTLD_GLOBAL/RTLD_LOCAL
03:58:50 <JaffaCake> it's not entirely satisfactory - we'd have to load libs with RTLD_LOCAL
03:59:06 <dcoutts> I'm not quite clear what that does yet
03:59:15 <JaffaCake> which means that other libs wouldn't be able to link against them
03:59:31 <JaffaCake> I think it means "don't populate the global symbol table"
03:59:39 <dcoutts> right
04:00:51 <juhp> oh cute - someone wrote a ruby interpreter in haskell:
04:00:53 <juhp> http://mono.kmc.gr.jp/~oxy/hiki.cgi?rtype_en
04:00:54 <dcoutts> so if I load A & B using RTLD_LOCAL and they both depend on C, do I get two copies of C loaded?
04:02:39 <dcoutts> interesting, dlsym() says that it can return multiple occurences of the same symbol in multiple libs
04:03:26 <shapr> juhp: nifty!
04:03:44 <juhp> yeah - someone just told me about it
04:04:15 <dcoutts> JaffaCake, and there's this gnu extension for loading symbols with a version string dlvsym()
04:04:44 <juhp> shapr: he wrote on the japanese page it is mostly for fun, but something a bit like pugs
04:06:49 <boegel> hey gour , Oejet
04:07:05 <gour> boegel: ?
04:07:56 <boegel> gour: what ?
04:08:25 <gour> boegel: a new one?
04:08:40 <boegel> gour: a new what ?
04:08:46 * boegel has no clue what's happening
04:09:32 * gour has no clue too
04:09:57 <shapr> juhp: Hopefully it'll turn out as well as pugs has.
04:10:48 <juhp> yeah
04:16:29 <Oejet> boegel: Hello. :-)
04:20:16 <ProfTeggy> G'day all
04:20:33 <shapr> Hiya!
04:21:31 <boegel> hey ProfTeggy
04:21:44 <boegel> glad to see you've become addicted afterall
04:21:46 <ProfTeggy> Hi boegel, shapr.
04:22:15 <davve> speaking of ruby interpreters, some guys are writing a ruby compiler here at chalmers
04:22:37 <davve> which compiles to c--
04:22:48 <boegel> c-- of all choices
04:23:05 <dcoutts> boegel, what's wrong with c-- ?
04:23:50 <boegel> dcoutts: it's not common ? I've barely heard of it, but maybe that's just my fault ;)
04:24:25 <dcoutts> boegel, ghc uses c-- as a backend :-)
04:24:58 <boegel> dcoutts: oh :s
04:25:01 <dcoutts> boegel, well at least as an intermediate repereentation, it still goes from c-- to c or to asm
04:25:07 <boegel> I had no idea
04:25:25 <boegel> what's the difference between c-- and c++ ?
04:25:29 <dcoutts> a lot
04:25:37 <dcoutts> @google c--
04:25:37 <boegel> probably :)
04:25:39 <lambdabot> http://www.c-span.org/
04:25:41 <dcoutts> hmm
04:25:48 <dcoutts> let me find it...
04:25:55 <boegel> @google "c--"
04:25:57 <lambdabot> http://www.c-span.org/
04:26:00 <boegel> pfft
04:26:00 <shapr> cminusminus.org
04:26:00 <dcoutts> http://www.cminusminus.org/
04:26:01 <sieni> for example c-- has (or is supposed to have) decent support for tail calls and continuations
04:26:20 <JaffaCake> dcoutts: hi, sorry had to pop out for a bit
04:26:21 <musasabi> How would I incrementally add edges into an acyclic directed graph in an efficient manner while checking for cycles?
04:26:36 <boegel> nice
04:26:37 <dcoutts> boegel, c-- is a high level assembly language, designed as a compiler output target
04:26:50 <dcoutts> JaffaCake, np, I was mostly just musing
04:26:58 <boegel> dcoutts: hmm, I see.. no wonder I never heard of it before ;)
04:27:11 <JaffaCake> dcoutts: I think what you said about RTLD_LOCAL is probably right, I don't know about dlvsym()
04:27:15 * boegel continues reading articles
04:27:28 <dcoutts> JaffaCake, though even if it'll work for ELF, .dlls will be a pain
04:28:05 <sieni> c is a pita as a target language e.g. for scheme compilers
04:28:05 <JaffaCake> I believe the linker on windows treats each DLL as a separate namespace
04:28:28 <JaffaCake> life might even be easier on Windows
04:28:34 <dcoutts> fair enough
04:33:04 <rubenz> hmf, ghc build still chugging away on ghc-6.4.1/ghc/compiler. Now in 6th hr.
04:33:32 <dcoutts> I love having a fast machine :-)
04:34:07 <dcoutts> my amd64 takes only an hour or so, my old 500MHz sparc takes reader 12 hours :-)
04:34:08 <rubenz> hmm. My only quam with this install is that it isn't telling me anything... no messages.
04:34:19 <JaffaCake> rubenz: that's a long time for a build - you on an old machine?
04:34:48 <rubenz> i'm using an iBook 500Mhz G3 chip.
04:35:13 <rubenz> it's a bit old i suppose
04:36:50 <psi> i left ghc building when I went to sleep. it was still going on when I woke up.
04:36:58 <psi> that was on an ibook 1.2 GHz
04:37:38 <rubenz> really.. well I think I'm going to be doing the same. Oh, and that was on an iBook 1.2Ghz... sheez
04:38:02 <dcoutts> time to pull out some of those bundeled libs and make them cabalised ones instead
04:38:31 <dcoutts> JaffaCake, one intermediate solution would be to have a ghc-extra-libs collection that is distributed in another tarball to ghc
04:38:41 <musasabi> Is the Eq on IORefs defined to be pointer equality?
04:39:17 <JaffaCake> dcoutts: yes, maybe
04:39:22 <dcoutts> JaffaCake, ie still "oficially blessed" but allow it to be built seperately, so distributors would still be highly encouraged to include the extra libs so people could count on them being there
04:39:59 <dcoutts> JaffaCake, it's only an intermediate thing if cabal/hackage automatin stuff doesn't move quick enough
04:40:03 <JaffaCake> hslibs is about to disappear, which will help the build times
04:40:09 <dcoutts> true
04:40:34 * dcoutts votes for OpenGL & FGL to be seperate
04:40:44 <JaffaCake> shared libs will help too, because we won't have to use -split-objs
04:40:51 <musasabi> Also just having a variable in build.mk like LIBRARY_PACKAGES=base haskell98 ... could solve some things.
04:40:56 <JaffaCake> dcoutts: you tell Sven ;)
04:41:07 <dcoutts> heh :-)
04:41:31 <ProfTeggy> dcoutts, FGL as in the Functional Graph Library?
04:41:36 <dcoutts> yes
04:41:46 <ProfTeggy> They are merging w/ OpenGL?
04:42:08 <dcoutts> the FGL is great but it'd be fine as a seperate cabalised lib
04:42:20 <ProfTeggy> Well, I'd say "of course"
04:42:35 <ProfTeggy> These two aim at completely distinct subjects after all
04:43:03 <dcoutts> same for haskell-src, parsec, QuickCheck, HUnit, X11, HGL, OpenGL, GLUT
04:43:14 <dcoutts> but maybe that's a bit radical :-)
04:43:54 <dcoutts> leaving onle rts, base, haskell98, template-haskell, unix, network, (mtl?), stm, readline
04:44:31 <JaffaCake> I think network can go too
04:44:51 <dcoutts> and readline is only there because ghci uses it
04:44:52 <JaffaCake> as long as we have enough libs to bootstrap GHC
04:45:07 <rubenz> well, goodnight all. I'm gonna have to leave this running all night i think.
04:45:10 <shapr> Does GHC require template-haskell?
04:45:17 <JaffaCake> yes
04:45:28 <shapr> and STM?
04:45:37 <JaffaCake> (it doesn't use any TH, but it needs access to the datatypes)
04:45:47 <JaffaCake> stm... hmm, not sure
04:45:53 <dcoutts> STM is pretty tied to the rts no?
04:46:00 <shapr> Would internal use of TH and STM clean up the code or design?
04:46:14 <JaffaCake> there isn't much in stm, most of the important bits are really in base
04:46:34 <dcoutts> shapr, ghc still builds with version 4.08.3 or something
04:46:36 <JaffaCake> shapr: TH: maybe, STM: probably not, right now
04:47:04 <shapr> I thought it require 5.04 or so?
04:47:06 <JaffaCake> dcoutts: I think it's more like 5.00, or maybe later now
04:47:27 <JaffaCake> we test with 5.04.3
04:47:31 <dcoutts> ok, but anyway the point is that ghc can't use anything too new
04:47:41 <JaffaCake> that's true
04:48:06 <dcoutts> (gtk2hs still builds with 5.04.3 & Gtk+ 2.0)
04:49:42 <shapr> I like the idea of cutting GHC down to bootstrap size.
04:50:07 <dcoutts> but it does depend on the cabal/hackage infrastructure being easy to use
04:50:40 <dcoutts> because without it, there is certainly an ease of use benefit of tieing everything together
04:50:54 <shapr> Yeah, I agree.
04:51:28 * dcoutts woders why the base package is version 1.0 and not 6.4.1
04:52:22 <Igloo> It's shared by all the impls. You could equally well ask why it isn't version 20050308
04:52:35 <dcoutts> if those other packages were unbundeled, they'd need version numbers
04:52:50 <dcoutts> eg parsec, network, mtl etc
04:54:25 <dcoutts> Igloo, ok perhaps not versioned with ghc, but versioned independently, otherwise it means you have to specify hugs >= xxx || ghc >= yyy rather than base >= 1.2.1
04:54:57 <JaffaCake> it *is* versioned independently
04:55:03 <dcoutts> if it's a library addition that you depend upon (rather than a compiler feature)
04:55:17 <dcoutts> JaffaCake, yes independent and always at 1.0 :-)
04:55:44 <JaffaCake> well no, 6.4 was the first release with versioned packages, and we haven't released any new compilers with a different base package yet
04:55:55 <dcoutts> ok, fair enough
04:56:55 <dcoutts> so if stuff gets added in ghc 6.6 then cabal packages can specify base >= 1.1
04:57:07 <JaffaCake> yup
04:57:15 <dcoutts> ok, great
04:57:46 <dcoutts> I withdraw my whining ;-)
05:02:58 <musasabi> Is there a reason STUArrays don't support copying array slices to eachother?
05:03:57 <musasabi> Having "aCopy :: STUArray s i e -> i -> i -> STUArray s i e -> i" would be nice.
05:13:24 <mcnster> hello
05:14:47 <shapr> hiya
05:15:50 <shapr> How's code?
05:16:02 <mcnster> gm shapr.  hows ur graph theory this fine morning? ;)
05:16:24 * gour rofl
05:16:49 <shapr> Graph theory is something I wish I'd node before.
05:17:01 <mcnster> heh
05:17:06 <mcnster> :)
05:17:15 <shapr> Do you have a graph theory question?
05:17:43 <dons> oh shapr, that's nice :)
05:18:36 <mcnster> i'm trying to use Data.Graph.Inductive... to find the immediate dominator of any node in a digraph
05:18:45 <shapr> Graph theory is over the edge...
05:18:54 * shapr gives up on the bad puns
05:19:59 <dons> fgl is quite good, but needs haddockizing
05:20:38 <mcnster> ahso.  hadn't noticed fgl...
05:20:47 <shapr> Yeah, I dunno anything about using FGL. I'd like to though, someone recently asked me about writing a cellular molecular biology tool. I think FGL would be perfect.
05:21:23 <dons> fgl == Data.Graph.Inductive
05:21:36 <mcnster> oh poop
05:22:01 <dons> i found it useful to actualy look at the source to find out what's what
05:22:42 <mcnster> <-- learned his graph theory from graffiti in the coffee shop bathroom, so is wondering if there's an easy way to glue together the stock fn's to provide an immediate dominator
05:23:08 <humasect> dons, that reminds me of hs-plugins
05:23:26 <dons> :p but at least we have some haddocks now
05:24:08 <dons> and extensive online docs, and a paper...
05:24:36 <humasect> yeah =) tex just stands out in configure when haddock..found displays
05:24:52 <humasect> that's really the only thing, heh
05:25:02 <dons> http://www.cse.unsw.edu.au/~dons/hs-plugins/html/
05:25:07 <dons> that got put up recently
05:26:28 <humasect> that's what i've been using so far
05:28:09 <Lemmih> dons: I can't figure out how to edit the symbol table /-:
05:28:10 <dons> I just updated the docs for System.Plugins.Load aa minutee ago, btw
05:28:37 <humasect> pdynload? o_o
05:30:28 <dons> Lemmih, but you can insert symbols, can't you?
05:31:04 <dons>     for (sym = rtsSyms; sym->lbl != NULL; sym++) {
05:31:05 <dons>     ghciInsertStrHashTable("(GHCi built-in symbols)",
05:31:05 <dons>                                symhash, sym->lbl, sym->addr);
05:31:05 <dons>     }
05:32:36 <Lemmih> I can't access ghciInsertStrHashTable nor symhash.
05:35:03 <dons> yeah, symhash looked tricky. hmm
05:48:33 * boegel_ just lost 22 days of uptime :(
05:55:16 <dblhelix> :) and there it goes:
05:55:20 <dblhelix> @seen boegel
05:55:21 <lambdabot> boegel is in #haskell-blah and #haskell. Last spoke 4 minutes and 56
05:55:21 <lambdabot> seconds ago.
05:55:54 <dblhelix> ah, she doesn't tell how long you're in here
05:56:33 <JaffaCake> Lemmih: ah, now I understand what you did with ghc-api :)
05:57:05 <boegel> i had an uptime of > 22 days
05:57:13 <JaffaCake> you took the 6.5 sources and put a Cabal wrapper around - I thought you'd ported the GHC API code to the 6.4 codebase
05:57:34 <boegel> dblhelix: no, I spoke too early probably
05:58:10 <JaffaCake> Lemmih: one problem with that approach is that you'll need the libraries in order to actually load any code
05:58:35 <dcoutts> JaffaCake, but we could use if for parsing and all that stuff
05:58:43 <JaffaCake> sure
05:58:54 <dcoutts> JaffaCake, that's probably ok for the moment
05:58:55 <orbitz> good morning
05:58:55 <JaffaCake> in VH we don't use GHC's lexer for coloring, BTW
05:59:19 <dcoutts> JaffaCake, I thought you used a slightly modifed version of ghc lexer?
05:59:30 <xerox> JaffaCake: What is VH?  (p.s. howdy people!)
05:59:38 <JaffaCake> fairly heavily modified
05:59:40 <JaffaCake> Visual Haskell
05:59:48 <dcoutts> xerox, Visual Studio plugin for Haskell
05:59:56 <xerox> Oh there is one?  Cool.
06:00:08 <xerox> I'm forced to use VS at school, very good to know.
06:00:19 <dcoutts> xerox, which is why we need hIDE, so Free software does not get left behind :-)
06:00:27 <JaffaCake> dcoutts: I can give you the lexer we do use (it's not encumbered by the VS stuff)
06:00:56 <dcoutts> JaffaCake, that'd be great, send it to Lemmih, he's working on that stuff
06:01:09 * dcoutts is working on GUI bits
06:01:27 <kolmodin> xerox: http://www.haskell.org/visualhaskell/
06:01:39 <JaffaCake> our coloring lexer handles literate stuff directly
06:02:04 <dcoutts> so why does the lexer not need to handle layout?
06:02:14 <dcoutts> because it's just not needed for highliting?
06:03:18 <JaffaCake> right
06:03:22 <dcoutts> JaffaCake, I read the license, it's pretty demanding :-) you need to keep up with VS releases and stick to interface guidelines and all sorts of stuff
06:03:37 <JaffaCake> yep, it's scary
06:03:51 <JaffaCake> it is my hope that one day they'll get rid of that crap
06:04:01 <dcoutts> so then when you parse, you re-lex with the full lexer (the normal ghc one that handels layout)
06:04:13 <JaffaCake> that's right
06:04:33 <dcoutts> JaffaCake, well I guess you can see why they do it, they don't want the VS brand being tarnished
06:04:39 <JaffaCake> GHC's lexer doesn't handle stopping at the end of the line, which is what you need for colouring
06:04:51 <dcoutts> ah, I see
06:04:58 <musasabi> How does one wrap ST inside an another monad? For example with a reader like monad I would like to define newtype Foo s a = Foo (Bar -> ST s a) and runFoo (Foo c) = runST (c someValue), but that compains "Inferred type is less polymorphic than expected". What is the correct way to define this?
06:06:46 <dcoutts> Lemmih, you listening? want the modified ghc lexer for syntax hl?
06:06:49 <JaffaCake> dcoutts: oh, and GHC's lexer doesn't return tokens for comments and whitespace
06:07:07 <dcoutts> yes
06:07:21 <JaffaCake> I've sent it to lemmih
06:07:28 <dcoutts> great thanks
06:07:49 <dcoutts> JaffaCake, so how cpu intensive is it then running ghc's front end in the background in an idle thread?
06:08:05 * Lemmih returns from a game of bzflag.
06:08:17 <JaffaCake> VH is pretty responsive, as long as the module isn't too big
06:08:48 <dcoutts> JaffaCake, VS runs the thread with a lower priority right? how does that work with ghc rts threads which don't have priorities?
06:09:07 <JaffaCake> each call into the plugin has a fair bit of overhead though, because it's a foreign language call, that involves creating a new Haskell thread each time
06:09:20 <dcoutts> right
06:09:51 <JaffaCake> not sure what you mean about lower priorities?
06:10:16 <dcoutts> oh, I though VS used like an idle priority OS thread to do the background parsing etc
06:10:36 <JaffaCake> I don't know if it has a lower prio, maybe it does
06:10:44 <dcoutts> I guess it waits a sec or two before running the background parsing type checking thread so it doesn't keep having to start and then kill the thread while you type
06:11:27 <JaffaCake> actually I think it does start the thread immediately every time the buffer changes
06:11:38 <JaffaCake> but only reports errors if you stop typing for a second or so
06:11:48 <dcoutts> oh, ok
06:12:11 <JaffaCake> that bit of logic is in Babel, we can change it if it turns out not to work too well
06:12:24 <dcoutts> Babel being a VS component?
06:12:40 <JaffaCake> it's a kind of layer on top of VS, written by Daan Leijen
06:12:46 <dcoutts> ah
06:13:03 <dcoutts> I wonder if the IDE might want the parser to be slighly less strict so it can report more errors, eg trailing ','s in records etc
06:13:13 <JaffaCake> it provides a nicer interface to extend VS - but not all of VS, and we had to extend Babel in various ways too
06:13:50 <JaffaCake> you might want error recovery in the parser, yes
06:13:58 <JaffaCake> I've been thinking about how to do that
06:14:07 <dcoutts> well that example is just making the grammer more lax
06:14:18 <JaffaCake> also, it would be nice to do partial renaming/type checking even in the presence of a parse error
06:14:42 <dcoutts> yes, and ideal IDE would allow the module to be partially compiled
06:14:51 <dcoutts> so you can keep editing and extending stuff
06:14:56 <JaffaCake> yes
06:15:09 <dcoutts> eliminate the edit/save/reload cycle
06:16:02 <dcoutts> just complain when someone tries to use a function in the ghci window that has a syntax/type error or depends on another value which can't yet be compiled
06:16:44 <JaffaCake> yes, that's kind of what I had in mind
06:16:56 <dcoutts> at the momen you have to comment out the bits that will not compile yet, and do so transitively for all things that depend on the commented out values
06:17:10 <JaffaCake> right
06:17:26 <JaffaCake> the basic thing we need is error recovery in the parser
06:17:31 <dcoutts> right
06:17:58 <JaffaCake> and the renamer needs to replace erroneous definitions with 'f = undefined' or something
06:18:07 <dcoutts> yes
06:18:27 <JaffaCake> the typechecker already does a kind of error recovery, but I don't think it generarates a program if there were errors
06:18:52 <JaffaCake> eh? generarates?
06:19:41 <dcoutts> you could make use of heuristics to find the begining of new functions when parsinge having been confused by a half formed function, eg functions are usually seperated by blank lines and comments etc
06:19:54 <JaffaCake> for the parser, I had in mind just skipping the input until the next top-level definition
06:20:05 <JaffaCake> yes, that's right
06:20:33 <JaffaCake> layout helps a lot - if you're not using layout at the top-level, then recovery becomes harder
06:20:41 <dcoutts> I bet
06:20:51 <dcoutts> but that's ok because everyone does :-)
06:23:00 <JaffaCake> I'm procrastinating - got a talk to write for next week's Haskell workshop :)
06:23:17 <dcoutts> :-) see you later then
06:23:27 <dcoutts> and thanks for the code and ideas
06:23:29 <JaffaCake> yeah, better go and do it I suppose
06:23:38 <JaffaCake> np, see you later
06:23:44 <xerox> Bye!
06:26:22 <boegel> xerox: anything exciting about your Cairo project lately ?
06:26:35 <xerox> Yes, school, homeworks, school ..
06:27:44 <boegel> any news from Google yet ?
06:28:32 <xerox> Err, I ought to check the mailbox, thanks for reminding me :)
06:28:54 <boegel> xerox: heh
06:29:27 <boegel> "Please pick up your cash _before_ Sept 20th. Thanks you for joing our SoC project. Google."
06:30:08 <vegai> cash?
06:30:31 <xerox> I'm the one who will have to bring news to Google, though.  I mean, I should get a code from some US office (which takes 1-2 months) and send it to Google.
06:30:41 <vegai> in a black suitcase down the alley near the garbage bins? :P
06:30:44 <xerox> ..so they will not keep a 30% in taxes.
06:31:29 <boegel> xerox: strange
06:31:35 <boegel> I hope you'll get your money
06:33:49 <xerox> Bah, bureaucracy.
06:53:23 <boegel> shapr: ping
06:53:48 <boegel> are people still having trouble with reacing scannedinavian ?
06:54:13 <dcoutts> nope
06:54:47 <boegel> people are telling me they can't reach http://scannedinavian.org/~boegel/HRay
06:55:02 <dblhelix> shapr: nope, works fine
06:55:04 <dcoutts> well I can
06:55:10 <dblhelix> boegel: I can
06:55:33 <boegel> so can I, but ahter people can't
06:55:42 <boegel> *other
06:55:54 <shapr> boegel: pong
06:56:02 <shapr> Who can't reach the site?
06:56:24 <ProfTeggy>  I can't reach it
06:56:32 <ProfTeggy> "Destination Host Unreachable"
06:56:54 <ProfTeggy> 36 bytes from 213-242-137-166.interact.se (213.242.137.166): Destination Host Unreachable
06:56:54 <ProfTeggy> Vr HL TOS  Len   ID Flg  off TTL Pro  cks      Src      Dst
06:56:54 <ProfTeggy>  4  5  00 0054 624b   0 0000  2c  01 ddd9 139.174.100.20  213.242.136.207
06:56:55 <boegel> shapr: join #raytracing
06:57:17 <dblhelix> well, at least it isn't blocked by xxx filters... no nasty stuff on scannedinavian (that people know of)
06:57:19 <shapr> ProfTeggy: Your dns is way old
06:57:31 <ProfTeggy> shapr, it's not _my_ DNS ;-)
06:57:52 <shapr> ProfTeggy: I moved the server from interact.se to another colo ISP ... a week or two ago.
06:58:00 <ProfTeggy> woopi
06:58:18 <shapr> I can change the DNS serial and reload the server.
06:58:36 <xerox> http://www.artlebedev.com/portfolio/optimus/
06:58:37 <xerox> wow.
07:01:44 <boegel> xerox: cool eh :)
07:01:56 <dblhelix> yeah... nice xmas present
07:02:21 * boegel thinks the buttons will fail rapidly though
07:03:45 <dblhelix> if you let the keyboard undergo the same tests as the ipod nano had to suffer for the ars technica review, yeah, surely they will then
07:03:52 <int-e> . o O ( scannedinavian.org.     259200  IN      NS      localhost. ... that can't be a good idea. )
07:09:11 <boegel> yo cognominal
07:09:17 <boegel> yo CosmicRay I mean
07:09:28 <CosmicRay> hi polyboegel
07:09:48 <CosmicRay> oh, there really is a cognominal here, heh
07:09:54 <CosmicRay> nick completion got ya, eh? ;-)
07:10:17 * Igloo reminds CosmicRay of the recent ignas double incident...  ;-)
07:11:05 <CosmicRay> Igloo: oh sure, just when I was about over the horror of it all!
07:11:33 <Igloo> CosmicRay: Do you know hunit is one of the things holding up ghc6 from testing, BTW?
07:12:34 <CosmicRay> no, didn't know that.
07:12:36 <CosmicRay> hmm.
07:12:41 <CosmicRay> that can be removed now, right?
07:12:45 <CosmicRay> (isn't hunit part of ghc6?)
07:12:49 <dblhelix> what's the ignas double incident??
07:13:20 <CosmicRay> dblhelix: my tab completion just said "Igloo" instead of "ignas" a couple of times.
07:13:30 <CosmicRay> maybe more than that. ;-)
07:13:56 <Igloo> It looks like it's in all 3 impls now
07:14:02 <CosmicRay> igloo wasn't quite sure why I was telling him some very, very basic things about Haskell.
07:14:05 <shapr> int-e: what the heck is that?
07:14:19 <CosmicRay> Igloo: sweet.  well then I'll just file a removal bug on ftp.debian.org then.
07:14:30 <Igloo> The worst was when he started pointing me at emacs resources! Oh the horror!
07:14:31 <dblhelix> Igloo: did you learned from it? :)
07:14:32 <dblhelix> lol
07:14:36 * shapr attacks his BIND config with a lint brush.
07:14:59 <CosmicRay> I did get a few bug reports from kurt yesterday on some bins I need to rebuild with the new ghc6, which I'm about to do.
07:15:01 <dblhelix> shapr: right behind you ... not really lending a hand though
07:15:04 <CosmicRay> shapr: ooo, punny.
07:15:11 <shapr> ?
07:15:14 <Igloo> Which ones?
07:15:31 <CosmicRay> shapr: "lint" is a tool that finds potential mistakes in files
07:15:45 <shapr> Right, but I always assumed it was short for 'lint brush'.
07:15:54 <int-e> shapr: that's what scannedinavian.com and ns6.gandi.net think the nameserver for scannedinavian.org is (one is localhost and one is scannedinavian.org; neither helps if you're looking for the domain)
07:16:09 <shapr> weirdness
07:16:15 <CosmicRay> Igloo: uhm, from memory, lhs2tex, and, I forgot the otherones.
07:16:17 <shapr> int-e: thanks for finding that
07:16:28 <Igloo> Ah, OK
07:16:30 * CosmicRay spots another gandi user. woohoo.
07:16:46 <CosmicRay> Igloo: I thought there were more but the bts is only showing lhs2tex at the moment.
07:17:14 <int-e> shapr: and the .org nameservers currently return 213.242.136.207 as the ip, and  scannedinavian.com / ns6.gandi.net as nameservers.
07:17:37 <shapr> That's whacked.
07:17:53 <CosmicRay> shapr: issues with your hosting?
07:18:00 <shapr> Nah, issues with my clue.
07:18:07 <CosmicRay> heh
07:18:17 <dblhelix> :)
07:21:30 <CosmicRay> shapr: let me know if I can help.  I've got about two dozen domains I manage through gandi
07:22:56 <CosmicRay> shapr: so is Boden in Finland or Sweden?
07:23:20 <shapr> It's in Sweden.
07:24:51 <dcoutts> latest hIDE screenshot: http://haskell.org/~duncan/hIDE/hIDE.png
07:25:03 <dcoutts> now with primitive file browsing!
07:25:15 <dcoutts> dons, Lemmih take a peek
07:26:17 <dcoutts> I've still not seen that monospace/courrier patch, is it in Yi already?
07:50:16 <xerox> '.new' whoa, it fooled me for a second :)
07:54:22 <musasabi> How does one do efficient matrix multiplication in Haskell? (I am trying to compute L = L + AB, where L is a square matrix and all matrixes are represented as STUArray s Int Int. Both L and A are in column-row representation (flat array) and B is in row-column representation.
07:59:07 <tromp> whatever is most efficient in C will be most efficient in haskell too
08:00:35 <shapr> tromp: What about amortized computations? ;-)
08:01:56 <tromp> obviously you can save time if not all entries of the new L are needed
08:02:27 <andrei> Are the hIDE sources up anywhere?
08:02:32 <xerox> @where hIDE
08:02:34 <lambdabot> http://www.haskell.org/hawiki/hIDE
08:02:36 <Philippa_> musasabi: what flavour of matrix?
08:02:38 <xerox> @where hide
08:02:39 <tromp> and you change from STUArray to STArray
08:02:39 <lambdabot> http://www.haskell.org/hawiki/hIDE
08:02:42 <Philippa_> big? Small? Sparse?
08:02:43 <xerox> :)
08:03:11 <andrei> Ah, thank you
08:05:58 <musasabi> Philippa_: matrix representing the edges of a graph.
08:06:30 <musasabi> 50x50 or so most of the time.
08:31:50 <CosmicRay> Igloo: oh, haskelldb-bin is the other broken one.
08:32:01 <CosmicRay> I orphaned that one but I can still NMU it.
08:32:15 <CosmicRay> that would explain why I got the email but it didn't show up on my bts page.
08:57:12 <CosmicRay> Igloo: I've uploaded lhs2tex and haskelldb and filed a removal bug about haskell-hunit.
08:57:19 <Igloo> Cool
08:58:32 <CosmicRay> Igloo: btw, I think that it would be fine to upload ghc 6.4.1.  From the looks of it, it will be awhile until gmp manages to hit testing anyway.
08:59:32 <shapr> Igloo: Is there a summary/description/legend for http://urchin.earth.li/~ian/bench/all.html ?
09:00:18 <shapr> I'll just look at the source.
09:00:39 <Igloo> shapr: I'll be making an improved version, possibly later today, which is clearer
09:00:44 <shapr> ok
09:01:17 <Igloo> CosmicRay: If you can convince vorlon to tell me that I'll do so  :-)
09:01:40 * CosmicRay proceeds to attempt that right now ;-)
09:13:29 <z0d> what is the definition of "algorithmic language"? "A programming language in which an algorithmic procedure can be expressed accurately." is a bit unspecific. in a book I've read that functional languages aren't algorithmic. I found that statement strange
09:14:05 <Philippa_> it's a redundant term from when algol was a big deal
09:14:34 <Philippa_> and when not everybody knew about things like using tail recursion to encode iteration
09:14:41 <shapr> Igloo: The numbers for x -> y  mean x is $NUMBER times faster than y, yes?
09:14:58 <Philippa_> they /mean/ "reasonably high-level imperative language"
09:15:03 <Igloo> Yes
09:15:07 <z0d> Philippa_: thanks
09:15:17 <Igloo> Although I think of them as "y is $NUMBER times slower"
09:17:22 <z0d> btw, the exact quote is "imperative languages are algorithmic languages: the programmer writes the code, he codes an algorithm and this algorithm operates the CPU. Declarative languages are not algorithmic languages"
09:18:01 <int-e> *sigh* that's a quite restrictive definition of 'algorithm' :(
09:18:06 <z0d> yup
09:18:51 <z0d> it looks like as if the author inteded to say: only low-level languages are algorithmic ones, because they sort of 1:1 operate the CPU
09:19:23 <Philippa_> no
09:19:35 <Philippa_> declarative languages cover a larger class than just functional languages
09:20:00 <z0d> I know that
09:20:05 <Philippa_> the functional languages /are/ algorithmic languages, but other declarative languages aren't (SQL, say)
09:20:11 <ProfTeggy> Usually, 'algorithm' refers to a finite and explicit description of a (computational) task
09:20:14 <z0d> ah, I see
09:20:37 <Philippa_> the thing is, those who aren't familiar with functional programming don't see how it's any different
09:20:52 <ProfTeggy> In this sense, FPLs are of course algorithmic
09:21:27 <ProfTeggy> Philippa, I don't see in which sense SQL differs from FPLs here.
09:22:23 <Philippa_> it's not turing complete and there are a lot of details about how you want something done it can't really specify
09:22:57 <Philippa_> in an FPL you can express "quicksort" rather than just "sort". Never seen that done in SQL
09:23:15 <ProfTeggy> Oh, I don't think that an algorithmic language needs to be Turing complete
09:24:42 <Philippa_> no, I'd count Epigram for example. SQL's significantly less expressive than that though
09:25:01 <xerox> Epigram is not t-complete?
09:25:07 <Philippa_> nope
09:25:11 <Philippa_> termination guaranteed
09:25:14 <ProfTeggy> I've seen cool things done in SQL, Philippa
09:25:23 <Philippa_> sure
09:25:27 <ProfTeggy> Don't underestimate 'da power' :-)
09:25:30 <Philippa_> hell, I've done one or two things myself
09:25:38 <Philippa_> but: show me a quicksort?
09:25:56 <ProfTeggy> Well, I can express variable bindings, control structures, conditionals etc. in SQL
09:26:25 <basti_> it's possible, but it really is abusing the script languages np-completeness to give it to SQL
09:26:32 <ProfTeggy> With an appropriate relational encoding of sequences, I do think that SQL can do QS
09:26:50 <Philippa_> which version of SQL, for that matter?
09:26:52 <ProfTeggy> I can even recurse in SQL
09:26:55 <ProfTeggy> SQL 92
09:27:30 <ProfTeggy> (If I only had the time now...)
09:29:31 <Philippa_> I do think it's reasonable to say you'd have to be lacking in sanity to choose to use SQL as an algorithmic language though
09:30:09 <ProfTeggy> :-)
09:30:11 <ProfTeggy> I buy that
09:30:29 <Philippa_> personally I'm inclined to put Prolog in that class too
09:30:48 <ProfTeggy> But it is amazing in what you can turn relaitional DBMSs if only you encode the data and queries in a creative manner
09:31:03 <Philippa_> sure
09:31:26 <Philippa_> you can say the same for the lambda calculus, and any other insufficiently expressive-to-humans language
09:31:30 <shapr> I mean, if you care about optimizations, then why don't you get the source to your favorite FP compiler and do something about it? If you put half the effort into improving something as you do into being pessimistic and cynical, you should have a pretty fast compiler in no time. ;) -- David B. Held responding to Brandon J. van Every
09:31:34 <ProfTeggy> We've built one of the most scalable and effcient XPath and XQuery processors this way -- internally, they are purely relational.
09:31:59 <Philippa_> cool, I can believe that
09:32:36 <ProfTeggy> And XQuery tastes significantly different than SQL
09:32:42 <ProfTeggy> It's a matter of encoding
09:32:45 <bojohan> shapr: lol
09:32:56 <Philippa_> yeah. Much of the XML stuff does rather irritate me, but hey
09:34:06 <bojohan> shapr: "brandon van everywhere"
09:34:18 <Philippa_> you think you've got problems
09:34:26 <Philippa_> I still hang out on a usenet hierarchy he brought about
09:34:38 <Philippa_> and I run a mailing list with the guy
09:34:45 <bojohan> :|
09:34:57 <Philippa_> he's actually OK to deal with over things like that
09:35:02 <shapr> bojohan: Yeah, everyone just loves Brandon.
09:35:06 <Philippa_> I get to moderate his posts and he's the list owner...
09:36:25 <z0d> it's not polite to make fun of someone's name
09:37:27 <z0d> Philippa_: so that quote was true for some of the declarative languages, right?
09:37:53 <shapr> I find it difficult to read Brandon's posts without becoming angry and wishing to beat some sense into the guy. Not that I actually do it of course, others far more persuasive than me have already tried.
09:38:01 <Philippa_> z0d: right
09:38:06 <z0d> ok, thanks
09:38:10 <Philippa_> you're not the only one
09:38:14 <Philippa_> and I actually count him as a friend
09:38:32 <CosmicRay> oh man, has brandon appeared on the haskel lists now?
09:38:37 <Philippa_> no, LtU
09:38:42 <CosmicRay> oh geez.
09:38:52 <Philippa_> he's unlikely to show up on the haskell lists, he's already decided he's not interested in the language
09:38:55 <CosmicRay> he is a first-rate idiot with a giant ego.
09:39:04 <CosmicRay> that didn't stop him from showing up on the ocaml lists.
09:39:08 <CosmicRay> and the freeciv lists before that.
09:39:19 <CosmicRay> both mainly to say that he could do much better, and by the way would start his own project next week.
09:40:12 <CosmicRay> I almost had to ban him from the freeciv lists.
09:41:15 <Heffalump> Brandon who?
09:41:27 <CosmicRay> van every
09:41:31 <shapr> Guido ended up asking him to leave the Python community, so switched to Ruby... guess what happened there...
09:41:37 <CosmicRay> haha
09:41:47 <CosmicRay> wow, that guy gets around.
09:41:54 <CosmicRay> sounds like he's more hated than theo de raadt.
09:41:55 <pejo> Haha. From this I take it that facts are sort of irrelevant for this guy? :-)
09:41:58 <Heffalump> "van every" is a real name?
09:42:04 <CosmicRay> Heffalump: seems to be.
09:42:09 <CosmicRay> http://lists.complete.org/freeciv-dev@freeciv.org/2003/12/msg00610.html.gz
09:42:14 <shapr> http://lambda-the-ultimate.org/user/view/2284
09:42:20 <CosmicRay> there's a post to the freeciv list back in 2003, where he was going to write a new game.
09:42:21 <z0d> Heffalump: it sounds dutch
09:42:24 <CosmicRay> and have it done RSN.
09:42:27 <CosmicRay> never happened, of course.
09:43:06 <CosmicRay> oh, ironically enough, he thought people should reimplement freeciv in python.
09:43:06 <CosmicRay> heh.
09:43:33 <CosmicRay> if he did show up on a haskell list, it would make my job as HWN editor easier.
09:43:41 <shapr> oh really?
09:43:52 <CosmicRay> "200 Ph. D.'s mocked Brandon van Every this week.  See you next week."
09:43:55 * shapr laughs
09:44:27 <CosmicRay> oh, he apparently also wanted to re-implement ocaml in python.
09:44:53 <Akshaal> lol
09:45:02 <int-e> I hope you wished him good luck with that.
09:45:08 * int-e wants to see it *g*
09:45:19 <CosmicRay> int-e: http://caml.inria.fr/pub/ml-archives/caml-list/2004/09/7943cbeb3c9a14c88eb9fb1aa41ce85b.en.html
09:45:27 <pejo> Philippa, thanks, you saved me having to type that stuff.
09:45:29 <Philippa_> CosmicRay: he's been talking about Ocean Mars a lot longer than that on gamedesign-l
09:45:30 <shapr> Anyway, he's on LtU making strongly opinionated posts.
09:45:37 <CosmicRay> Philippa_: haha
09:45:41 <CosmicRay> this is funny.
09:45:52 <pejo> shapr, how is the saying.. Opinions are like an ass, everybody has one? ;-)
09:46:09 <CosmicRay> I thought it ironic that I saw him in 2 or 3 places I hung out.  now I hear that he's pissed off a dozen other groups too ;-)
09:46:34 <CosmicRay> int-e: I told him that "the set of your projects is pretty much the same as /dev/null" ;-)
09:46:42 <shapr> Yeah, but for some people, their opinions are far more ugly than their anatomy.
09:46:47 <pejo> CosmicRay, endless?
09:46:56 <CosmicRay> pejo: empty ;-)
09:48:18 <CosmicRay> int-e: the other funny thing about that post is that he names, by himself, some of the groups that have asked him to leave ;-)
09:48:54 <xerox> It's a good metaphor, you can stick everything inside /dev/null :)
09:48:57 <int-e> CosmicRay: yes, but he left those groups because those projects were not accepting his guidance and were not going anywhere without it.
09:49:05 <int-e> CosmicRay: I almost feel pity ;)
09:49:21 <CosmicRay> hehe
09:50:10 <CosmicRay> it's a bad sign when your .sig mocks the usage of the word "troll".
09:50:16 <shapr> It's a sad sign.
09:50:45 <CosmicRay> I dunno, I somehow get the felling that he's a 11-year-old kid with a pirated copy of visual studio.
09:51:23 <shapr> I think he has 'poor impulse control', is easily frustrated, and cannot empathize with others.
09:51:52 <CosmicRay> yes, there's that.
09:52:07 <CosmicRay> then there's that he has a huge ego.
09:53:13 <pejo> Huge egos aren't that uncommon online for some reason. But some of those egos are productive.
09:53:22 <shapr> He seems to have a lot of drive and initiative, but he can't seem to integrate himself into a community. It's like he's wearing a cayenne pepper suit and trying to hug everyone.
09:53:24 <CosmicRay> right
09:53:46 <CosmicRay> pejo: most are, even.  eg, linus, rms.
09:54:10 <pejo> CosmicRay, hm. I woulnd't have put Linus in that category. I was more thinking along Theo de Raadt, djb, etc.
09:54:14 <CosmicRay> I mean, if JaffaCake came in here saying he was a haskell whiz and that we ought to do x, I'd believe him, because, well, he *is* a haskell whiz.
09:54:22 <shapr> yeah!
09:54:27 <Philippa_> shapr: he has insufficient drive for things that matter
09:54:37 <Philippa_> he's possibly even worse than me at actually getting code things done
09:54:39 <CosmicRay> pejo: oh.  I don't think they have had a net positive impact on the community ;-)
09:54:53 <shapr> Or worse than me even!
09:54:53 <bojohan> esr...
09:54:55 <CosmicRay> Philippa_: afaik, nobody has ever seen a single line of code from him.
09:55:10 <Philippa_> CosmicRay: I'm pretty sure he's written code for pay at some point
09:55:19 <pejo> Cosmic, shrug. OpenBSD has done some things, and Theo did lots of stuff for NetBSD before he got thrown out.
09:55:26 <Philippa_> but he's not done a hell of a lot since he stopped hacking on OGL drivers for the Alpha
09:55:29 <pejo> I have to run though, as entertaining as this disucssion was. *wave*
09:55:33 <CosmicRay> yeah openbsd has done good stuff, openssh etc.
09:55:43 <CosmicRay> Philippa_: haha
09:55:51 <shapr> As much as I enjoy the social side of OSS, this community centers around producing code.
09:55:58 <Philippa_> he's a bithead, he doesn't /get/ half of what FP's about until he's beaten over the head with it repeatedly
09:55:59 <CosmicRay> Philippa_: ironically, I own an alpha
09:56:05 <Philippa_> heh
09:56:14 <Philippa_> he clearly knew his stuff about that, at least
09:56:20 <CosmicRay> Philippa_: he doesn't get half of what anything is about.
09:56:38 <shapr> I think that's because he lacks empathy, he can't see others' viewpoints.
09:57:19 <shapr> The more you can put yourself in someone else's shoes, the more you can understand why they see value in things.
09:57:38 <shapr> This is the Blub Paradox, pretty much.
10:00:55 <dcoutts> dons, Lemmih, you around?
10:02:11 <CosmicRay> shapr: wikipedia doesn't know about the blub paradox!
10:02:15 <shapr> shocking!
10:02:18 <Lemmih> dcoutts: I'm around.
10:02:24 <dcoutts> Lemmih, seen my pic?
10:02:53 <Lemmih> dcoutts: Nope.
10:03:01 <dcoutts> Lemmih, I'm wondering about what interface we want between the file browser / editor
10:03:05 <shapr> CosmicRay: http://c2.com/cgi/wiki?BlubParadox in case you don't either :-)
10:03:25 <dcoutts> Lemmih, here it is: http://haskell.org/~duncan/hIDE/hIDE.png
10:03:42 <boegel|home> dcoutts: looking good
10:03:52 <dcoutts> Lemmih, we can get events when a file is selected in the tree
10:03:59 <dcoutts> boegel|home, :-)
10:04:04 <boegel|home> really
10:04:04 <Lemmih> dcoutts: Neat!
10:04:49 <CosmicRay> shapr: thanks, that was going to be the next question ;-)
10:04:50 <Lemmih> @seen davve
10:04:51 <lambdabot> I saw davve leaving #haskell.se and #haskell 1 hour, 57 minutes and
10:04:51 <lambdabot> 32 seconds ago.
10:05:28 <dcoutts> Lemmih, maybe I'll do a trivial editor and see what kind of interface seems convenient, it has to support the model/view pattern
10:06:33 <boegel|home> patterns ? in Haskell ? oh no...
10:06:38 <araujo> Hello here.
10:07:05 <dcoutts> boegel|home, well not a pattern in the technical sense, perhaps I just mean "idea" :-)
10:07:08 <araujo> Anyone knows a function to splitup a String using a pattern?
10:07:41 <int-e> behavioral patterns should work nicely in Haskell, don't they?
10:08:06 <Lemmih> dcoutts: You'll do a trivial editor? I don't follow.
10:08:19 * int-e has a deja vu reading araujos question.
10:08:28 <araujo> @hoogle words
10:08:32 <lambdabot> Prelude.words :: String -> [String]
10:08:32 <lambdabot> Prelude.unwords :: [String] -> String
10:08:52 <CosmicRay> shapr: that was a nice read.  thanks.
10:09:09 <CosmicRay> araujo: there are functions to split it using a regex.
10:09:55 <shapr> #haskell is too interesting, I can't focus!
10:10:02 <CosmicRay> heh
10:10:21 <dcoutts> Lemmih, well one that is just a GtkTextBuffer with one or more GtkTextViews, and no file save capability, it shouldn't be more than 10 lines of code one the appropriate infrastructure is in place
10:10:33 <araujo> CosmicRay, know the name?
10:10:44 <int-e> @type (Text.Regex.mkRegex, Text.Regex.splitRegex)
10:10:50 <lambdabot> (String -> Text.Regex.Posix.Regex,
10:10:50 <lambdabot> Text.Regex.Posix.Regex -> String -> [String])
10:10:58 <araujo> Thanks int-e
10:11:08 <CosmicRay> that'll be it.
10:11:33 <CosmicRay> funny I forgot it.
10:11:49 <CosmicRay> sigh.
10:12:07 <xerox> @hoohle Regex -> String -> [String]
10:12:10 <lambdabot> List.genericReplicate :: Integral a => a -> b -> [b]
10:12:13 <xerox> heh.
10:12:30 <CosmicRay> what's hoohle?
10:12:52 <boegel|home> @hoogle a -> b -> a
10:12:53 <lambdabot> Prelude.(^) :: (Num a, Integral b) => a -> b -> a
10:12:53 <lambdabot> Prelude.const :: a -> b -> a
10:12:53 <lambdabot> Prelude.(^^) :: (Fractional a, Integral b) => a -> b -> a
10:12:57 <boegel|home> CosmicRay: this?
10:12:57 <xerox> Hoogle with nitty-gritty lambdabot spell-correcting capabilities.
10:13:03 <CosmicRay> heh
10:14:22 <ndm> @hoogol a -> b -> a
10:14:23 <lambdabot> Prelude.(^) :: (Num a, Integral b) => a -> b -> a
10:14:23 <lambdabot> Prelude.const :: a -> b -> a
10:14:23 <lambdabot> Prelude.(^^) :: (Fractional a, Integral b) => a -> b -> a
10:14:39 <boegel|home> ndm: what's the difference ?
10:14:41 <ndm> oh, cool - thats the backup name for hoogle in case google come knocking
10:14:54 <boegel|home> ndm: hehe
10:15:28 <xerox> @goohle a -> b
10:15:30 <lambdabot> http://www.btselem.org/
10:15:36 <xerox> heh.
10:16:31 <int-e> @vixen do you think unlambda programmers are hot?
10:16:34 <lambdabot> a program? what do you mean a program??
10:16:41 <int-e> aww :(
10:17:23 * araujo trying to figure out how to use splitRegex
10:18:58 <araujo> Text.Regex.Posix.Regex -> String -> [String] , what is the second String in that function?
10:19:17 <Philippa_> dammit, I'm getting that monadified-to-hell-and-back capable-of-low-level-programming urge again
10:19:27 <araujo> i don't find a good description in the library
10:19:58 <CosmicRay> Philippa_: I'm about to the point where I'm ticked enough with python to write an imap parser and port offlineimap to haskell myself.
10:20:03 <boegel|home> araujo: first is the reg, second is the string you want to split ? :s
10:20:28 <CosmicRay> {- | Splits a string based on a regular expression.  The regular expression
10:20:29 <CosmicRay> should identify one delimiter.
10:20:29 <CosmicRay> -}
10:20:33 <Philippa_> for example, I just decided that if you stratify the IO monad then by and large you /don't want/ individual monad types, you just want to do the lot with type classes and let the compiler realise "hey, it's all IO but /I've still got extra optimisation info/"
10:20:34 <CosmicRay> the [String] is the return value.
10:20:35 <int-e> @eval Text.Regex.splitRegex (Text.Regex.mkRegex "al[ph]*a") "gamma alpha beta"
10:20:37 <lambdabot> 18: Not in scope: `Text.Regex.splitRegex'41: Not in scope: `Text.
10:20:37 <lambdabot> Regex.mkRegex'
10:21:20 <CosmicRay> oh, heh, that comment is the same one that's in the ghc haddock docs.
10:21:31 <CosmicRay> so I *did* write that function. ;-)
10:21:53 <int-e> lambdabot: why? :/ [does it not like the dependency on a module with Posix in its name?]
10:22:04 <Philippa_> (it's both "(Monad m, UsesIORefs m) => m Foo" and "IO" at once, and you want to keep both bits of information - which you will do because you only know it's IO from the call site)
10:22:06 <CosmicRay> int-e: Text.Regex.Posix maybe
10:22:11 <Philippa_> (yay specialisation!)
10:23:28 <CosmicRay> int-e: oh, I misread your question.  I don't know if it blocks Posix or not.
10:25:45 <int-e> CosmicRay: ah, lambdabot has a whitelist, so to say - see http://www.cse.unsw.edu.au/~dons/lambdabot/scripts/RunPlugs.hs - and Text.Regex is not on it.
10:26:27 <int-e> @eval Data.Set.fromList [1,2,3]
10:26:29 <lambdabot> 18: Not in scope: `Data.Set.fromList'
10:26:34 <int-e> same here.
10:26:40 <MarcWeber> How can I tell ghc where to find Graphics.UI.Gtk?
10:26:57 <musasabi> MarcWeber: by installing gtk2hs.
10:27:15 <boegel|home> MarcWeber: haskell.org/gtk2hs
10:27:35 <ski> "18: " ?
10:28:16 <int-e> ski: presumably that's the character position
10:29:33 <int-e> ski: (including the small wrapper code that RunHugs puts around the code provided by us)
10:31:31 <int-e> @eval S.fromList [1,2,3]
10:31:33 <lambdabot> {1,2,3}
10:37:12 <ski> S ?
10:38:12 <int-e> ski: qualifieds = ["qualified Data.Map as M", "qualified Data.Set as S"] (from RunHugs.hs)
10:44:28 <ski> aha, najs
11:03:26 * araujo back
11:03:30 <araujo> Sorry, was away
11:03:33 <araujo> mmm...
11:04:56 <araujo> Thanks for the example int-e
11:05:12 <gour> dcoutts: ping
11:06:23 <dcoutts> gour, pong
11:06:42 <gour> dcoutts: hi, do you have two minutes for a short Q?
11:06:56 <dcoutts> yay, I can now open multiple top level hIDE windows and they all share the same file browser views
11:07:01 <dcoutts> gour, sure
11:07:09 <gour> congrats
11:07:23 <gour> dcoutts: it's 14.7 exercise
11:07:41 <dcoutts> and what's the Q then?
11:08:35 <gour> dcoutts: investigate the derived definitions for Temp & Shape..what form do orderings and show func. take?
11:09:03 <gour> dcoutts: i.e. user-defined data uses 'deriving (Eq,Ord,Show,Read)
11:09:14 <dcoutts> right
11:09:31 <dcoutts> so what is it asking exaclty?
11:09:32 <gour> dcoutts: is it possible with ghci/hugs discern how do those derived instances look like?
11:09:40 <dcoutts> ah, no
11:09:47 <dcoutts> they will not show you
11:09:56 <gour> ok, shapr told me similar thing
11:10:09 <dcoutts> you can use DrIFT to derive them
11:10:17 <dcoutts> that gives you actual code you can look at
11:10:17 <gour> how?
11:10:37 <dcoutts> however there's no guarantee that it's the same as its implemented internally in ghc/hugs
11:10:44 <gour> but probably Simon didn't think about it?
11:10:51 <dcoutts> take a look at the DrIFT manual
11:10:53 <dcoutts> huh?
11:11:05 <gour> ok (later)
11:11:22 <gour> DrIFT is not the topic :-)
11:11:34 <dcoutts> sure
11:11:46 <gour> maybe, i jsut have to figure them out...
11:11:51 <dcoutts> so you're baing asked to write the Show Eq, etc instances manually?
11:11:56 <dcoutts> that's not too hard
11:12:27 <gour> no, the question was: investigate the derived definitions for ...
11:12:47 <dcoutts> it's not clear to me what it means by investigate
11:12:56 <gour> neither to me..
11:13:25 <gour> usuallly it does not mean to create, but to take a look at something which is already created..
11:13:33 <dcoutts> indeed
11:13:35 <gour> it does not matter
11:13:46 <gour> go back to your work - it's more precious :-)
11:13:52 <dcoutts> heh
11:14:27 <gour> interesting, the next exercise says:
11:14:50 <gour> define == over shape to take care of negative radius..
11:15:15 * gour is puzzled a bit with 14.6 & 14.7 exercises
11:15:49 <dcoutts> oh that ones makes sense
11:16:08 <dcoutts> a circle of radius 5 is equal to a circle of radius -5
11:17:13 <Akshaal> length can't be negative
11:17:24 <gour> that's ok
11:17:37 <gour> i wonder regarding the word 'define'
11:18:15 <dcoutts> well you can define (==) for your type by giving an instance for Eq
11:18:17 <gour> the exercise says: define == over Shape so all circles of negative radius are equated
11:18:30 <gour> the same for Rectangles
11:18:34 <dcoutts> oh ok
11:18:58 <gour> so, it looks like i have to redefine derived instances, but how to investigate them at the 1st place?
11:19:07 <gour> this is the question now :-)
11:19:12 <dcoutts> well the point is still the same, you need to give an Eq instance rather than using the default one you get when you use "derive"
11:20:00 <gour> ok, i can do that, i.e. re-define default defs..
11:20:08 <dcoutts> so instead of using "deriving Eq" you do: instance Eq Shape where
11:20:09 <dcoutts>   ...
11:20:26 <gour> yes, i'll do that
11:20:36 <gour> go back to hIDE :-)
11:26:55 <gour> dcoutts:hah, i got a clue - i can investigate by evaluating expressions and how the defs are behaving..
11:27:08 <gour> dcoutts: now let's go to take a dinner :-)
11:27:08 <dcoutts> ok :-)
11:27:17 <dcoutts> very wise
11:45:47 <musasabi> Why does deriving not work for e.g. data K a = K (a (K a)) deriving(Show) ?
11:47:26 <sethk> musasabi, as I understand it, deriving isn't really a general capability.
11:47:28 <heatsink> because a has to be showable
11:47:42 <sethk> musasabi, the thing you derive has to have predefined functions available
11:47:44 <heatsink> and that can't be inferred from the data declaration
11:48:04 <sethk> heatsink, showable means that one or more functions exist?  Is that correct?
11:48:20 <heatsink> it means that the type is an instance of class "Show"
11:48:34 <Philippa_> which in turn does mean that certain functions will exist, yes
11:48:51 <heatsink> you can't show `K a' if you can't show `a'
11:49:01 <heatsink> (unless you define your own show function)
11:49:21 <musasabi> heatsink: but data K a = K a deriving (Show) is valid.
11:49:41 <heatsink> hmm
11:49:56 <heatsink> hey, what kind is a?
11:50:08 <musasabi> * -> *
11:50:52 <ski> instance (forall a. Show a => Show (f a)) => Show (K f)
11:51:02 <ski> would be needed,. yes ?
11:51:15 <musasabi> Something like that.
11:51:27 <ski> i think i saw something like that in a paper
11:51:52 <heatsink> hmm, that makes sense I think.
11:52:19 * heatsink isn't used to higher-order recursive types
11:52:42 <musasabi> They are quite convenient.
11:52:43 <ski> a workaround is to make a  class ShowF f where showF :: Show a => f a -> String   i think
11:53:41 <araujo> @hoogle Uppercase
11:53:54 <ski> instance ShowF f => Show (K f)
11:55:16 <musasabi> hmm that works. Not as nice as getting automatic derivation but will do.
11:55:27 <ski> m
11:57:42 <heatsink> Can anyone suggest a workaround for ghc compiler panic on recursive module imports?  Apparently this is a known bug.
11:58:02 <heatsink> I wrote a hi-boot file to break the cyclic dependence and now the compiler panics.
12:00:11 <musasabi> With 6.4 you should use .hs-boot.
12:00:36 <heatsink> I wrote a hs-boot file.  That was just a typo.
12:02:49 <ndm> araujo, map toUpper
12:18:52 <MarcWeber> f
12:25:15 <Lemmih> dcoutts: Gonna push some patches soon?
12:28:28 <musasabi> What is the correct way to define Ord by hand for a datatype with many constructors?
12:31:18 <heatsink> Do you need a specific ordering, or is any total ordering acceptable?
12:36:10 <musasabi> Any ordering is good.
12:36:26 <Heffalump> why can't you derive it, then?
12:36:53 <Heffalump> I would suggest
12:36:58 <musasabi> Heffalump: because it is of using higher order type parameters (see previous discussion).
12:37:17 <Heffalump> actually, scrub that, my idea doesn't work.
12:37:30 <musasabi> I just want to use it in a Map and don't care what the Ord instance is as long as things work.
12:37:32 <Heffalump> oh, yes it does
12:37:38 <heatsink> I think you can do it fairly straightforward...
12:37:42 <Heffalump> no, it doesn't.
12:37:45 * Heffalump gives up :-)
12:37:54 <Heffalump> heatsink: without quadratic blowup?
12:38:09 <musasabi> and it is enough to define it for a single parameter. e.g. instance Ord (K Wrap) where ...
12:38:09 <heatsink> right
12:38:18 <heatsink> Choose a total ordering among the constructors
12:38:56 <musasabi> Currently 4 constructors 2 of which recurse so going quadratic would not be very nice (and there will be more constructors in the future)
12:39:22 <musasabi> hmm a constructor -> Int and then better ordering for the constructors are the same case?
12:39:27 <heatsink> right
12:40:53 * Heffalump remembers how his idea should work
12:40:59 <Heffalump> you can define Ord with compare, right?
12:41:44 <heatsink> @type compare
12:41:52 <lambdabot> forall a. (Ord a) => a -> a -> Ordering
12:42:04 <Heffalump> IM it's enough just to define that to get a complete definition
12:42:19 <Heffalump> if it is, then
12:42:32 <Heffalump> ConstructorA `compare` ConstructorA = Equals
12:42:38 <Heffalump> ConstructorA `compare` _ = Less
12:42:47 <Heffalump> _ `compare` ConstructorA = Greater
12:42:53 <Heffalump> repeat for each constructor, in sequence
12:43:03 <int-e> @eval (LT, EQ, GT)
12:43:07 <lambdabot> (LT,EQ,GT)
12:43:08 <Heffalump> if your constructors have arguments, then the Equals cases become a sub-comparison on them.
12:43:18 <Heffalump> ok, use the correct names ;-)
12:43:21 <dcoutts> Lemmih, yeah, soonish
12:45:58 <musasabi> hmm that helped.
12:54:23 <trez> how to check if all elements in a list are the same?
12:56:08 <Lemmih> @eval let f (x:xs) = all (==x) xs in (f [1,2,3], f [1,1,1])
12:56:10 <lambdabot> (False,True)
12:58:33 <xerox> @eval let f (x:xs) = all (==x) xs in (f [1,2,3], f [])
12:58:35 <lambdabot> <Plugins.Eval>:1:61:
12:58:35 <lambdabot>   Ambiguous type variable `a' in the constraint:
12:58:35 <lambdabot>   `Eq a' arising from use of `f'
12:59:19 <int-e> @eval let f (x:xs) = all (==x) xs in (f [1,2,3], f ([]::[Int]))
12:59:21 <lambdabot> 22-44: Non-exhaustive patterns in function f
12:59:21 <lambdabot>  
13:26:49 <heatsink> wow, I'm good at finding compiler bugs
13:28:44 <heatsink> oh, it's in template haskell.  Well, that's allowed to cause compiler panic, I guess.
13:28:50 <Heffalump> it is?
13:29:01 <Heffalump> It shouldn't. Though it is relatively immature, of course.
13:29:01 * heatsink shrugs
13:43:18 <Igloo> TH failures are reported as panics, even though they aren't really
13:46:25 <Heffalump> failure as in user error, or internal error?
13:46:32 <heatsink> user error
14:17:54 <musasabi> Is this expected: *Type> :r
14:17:54 <musasabi> *** Exception: expectJust upsweep_mod:old_linkable
14:18:26 <musasabi> in ghci.
14:18:49 <heatsink> that's the error I was getting a few minutes ago
14:19:04 <heatsink> in ghc.  I dind't try ghci.
14:19:40 <musasabi> Are you using -pgmF (that seems to be the only special thing I am using) ?
14:19:53 <heatsink> no
14:20:25 <xerox> Howdy poetix.
14:20:31 <poetix> Howdy
14:21:05 <poetix> Did you happen to see the bug report I submitted to the c2hs list?
14:21:09 <xerox> Yup.
14:21:36 <poetix> Am I doing something stupid, or is it really a bug do you think?
14:22:26 <xerox> I do not know :-|
14:22:37 <wagle> whats the url of the bug report?
14:23:04 * poetix looks
14:23:19 <wagle> http://www.haskell.org//pipermail/c2hs/2005-September/000513.html
14:23:19 <wagle> ?
14:23:29 <poetix> That's the one
14:25:14 <poetix> The first thing I'd like to know is if anyone can replicate it, as I find it hard to believe that nobody else would have a similar problem if it really was a c2hs bug
14:25:38 <poetix> Maybe it's some weirdness of my build environment...
14:25:45 <wagle> what is the type of cIntConv?
14:26:02 <xerox> cIntConv = fromIntegral
14:26:13 <poetix> @type fromIntegral
14:26:21 <lambdabot> forall b a. (Num b, Integral a) => a -> b
14:26:42 <xerox> poetix: I'll be fair.  I do not know because I didn't pass much time at the pc lately, damn school!
14:28:36 <poetix> Well, at least it doesn't appear to be something obvious, or someone would've pointed it out by now
14:32:58 <wagle> nah, i'm just tracing it around..  never seen whatever c2hs is before
14:34:37 <wagle> looks to me that you declared:
14:34:39 <wagle> login'_ :: (Ptr ()) -> (Ptr CChar) -> CInt -> CInt -> CInt -> (Ptr CChar) -> (Ptr CChar) -> (IO CInt)
14:34:57 <wagle> (you really should get used to not fully parenthesizing)
14:35:43 <wagle> and that the other end of that foreign call has the third arg typed as CUInt
14:36:54 <wagle> but i'm still thinking about it
14:39:34 <int-e> wagle: that part is automatically generated
14:40:35 <wagle> oic
14:43:18 <wagle> yarghhh..  i never did get ghc to compile
14:44:23 <wagle> my only suggestion is to try changing the Int type arg in the third position to UInt, and see what happens:
14:44:27 <wagle> {#fun client_buffer_login as login {clientBuffer `ClientBuffer', `String',
14:44:28 <wagle> `Int', `Int', `Int', `String', `String'} -> `Int' #}
14:44:34 <wagle> to
14:44:54 <wagle> ...
14:45:26 <wagle> it would take me several hours to install ghc to then install c2hs
14:45:51 <wagle> so.. my answer is "i dunno"..  good luck
14:46:11 <wagle> poetix: ^^^
14:47:12 <int-e> ah but his problem is that the cIntConv isn't polymorphic - he should provide a type signature (cIntConv :: (Num b, Integral a) => a -> b) for it.
14:48:14 <int-e> it's deriving CUInt as the return type from the use in createBuffer ...
14:48:50 <wagle> ah.. i saw that, but didn't see how it'd cause trouble
14:48:54 <int-e> (tried it, works)
14:49:02 <int-e> (or at least, compiles)
14:49:06 <wagle> type xxx = yyy makes xxx monomorphic?
14:50:21 <int-e> wagle: I think you can't define polymorphic type abbreviations (hmm, in Haskell98, in ghc you can? I forgot.)
14:51:01 <poetix> int-e: Ah
14:51:07 <wagle> i appear not to be awake..
14:51:14 <wagle> its cIntConv = fromIntegral
14:51:29 <int-e> yep, it's a function.
14:51:49 <poetix> Doesn't cIntConv just assume the type of fromIntegral, then?
14:52:14 <wagle> if you just replace all the occurances of cIntConv with fromIntegral, does that work>?
14:52:25 <int-e> poetix: no, it assumes an instance of that polymorphic type - which is derived, apparently, from its first use
14:52:50 <wagle> yeah, thats it..  the classes
14:52:57 <poetix> I see. It's a type-system gotcha
14:53:32 <int-e> wagle: well, the cIntConv calls are automatically generated. as I said, providing an explicit type signature (in fact, that of fromIntegral works nicely) helps
14:53:36 <wagle> fromIntegral is a instance of many classes, but cIntConv has to choose which one, and stick with it
14:53:37 <int-e> @type fromIntegral
14:53:42 <lambdabot> forall b a. (Num b, Integral a) => a -> b
14:54:09 <Cale> int-e: you can sort of, but everywhere you use them they must have all of their parameters plugged in. (They're strictly syntax sugar)
14:54:09 <wagle> instance foo where fromIntegral = ...
14:54:16 <wagle> instance baz where fromIntegral = ...
14:54:18 <wagle> etc
14:54:28 <poetix> Right, well that gives me a line of attack. It'll have to wait now, as I'm off to bed, but sounds promising
14:54:32 <int-e> Cale: was that for type abbreviations?
14:54:42 <wagle> Cale, its a function, not a type
14:54:55 <wagle> no type abbreviations, i was confused
14:55:01 <Cale> If by type abbreviations you mean "type" declarations.
14:55:03 <poetix> Thanks guys
14:55:10 <int-e> Cale: uhm. yes, I do.
14:55:22 <Cale> type T u1 ... uk = t
14:55:29 <int-e> Cale: it fits the 'just syntactic sugar' implementation of the ghc better ;)
14:55:42 <Cale> then (T t1 ... tk) is equivalent to t[t1/u1, ..., tk/uk]
14:56:01 <int-e> I see.
14:58:12 <heatsink> There's no general way to write a monad-interchange function, is there? (Monad m, Monad n) => m n a -> n m a
14:58:46 <Cale> heatsink: no, and in general, I don't think they're unique
14:59:01 <int-e> do they even exist, in general?
14:59:11 <Cale> probably not
14:59:17 <int-e> (if yes I'd be interested in a reference :)
14:59:17 <heatsink> I end up wanting that kind of behavior often though
14:59:40 <heatsink> something like (n a -> m n a)
15:00:17 <heatsink> *something like (n a -> n m a)
15:00:18 <Cale> Make a typeclass for them :)
15:00:39 <heatsink> there's an idea
15:01:08 <Cale> I think there should be a class for commuting monads in the Monad library, so that sequence is just a special case of that, but there isn't currently.
15:01:40 <heatsink> commuting?  I thought commuting meant that (f >>= g) === (g >>= f)
15:02:24 <Heffalump> that's not type correct
15:02:54 <heatsink> (\x -> f x >>= g) === (\x -> g x >>= f)
15:03:01 <integral> commuting monad transformers or monads?
15:03:08 <int-e> hmm. with ghc and enabled glasgow extensions the following class definition is possible:   class (Monad m, Monad n) => MSwap m n where mswap :: m (n a) -> n (m a) ... you still need instances for that, of course.
15:03:59 * int-e thinks
15:06:27 <wagle> List (Maybe a) -> Maybe (List a)
15:06:36 <wagle> nope
15:06:47 <int-e> wagle: funny, I was thinking about pretty much the same example
15:08:22 <wagle> Maybe (Maybe a) or (List (List a)) seems mildly interesting
15:10:07 <wagle> theres some categorical composition property not being preserved
15:14:25 <Igloo> @seen shapr
15:14:26 <lambdabot> I saw shapr leaving #haskell-blah, #haskell and #webwitches 5 hours,
15:14:26 <lambdabot> 4 minutes and 26 seconds ago.
15:14:37 <heatsink> what's haskell-blah?
15:14:57 <basti_> the everything-not-haskell channel
15:15:12 <Igloo> Does the text of http://urchin.earth.li/~ian/bench/bench-0.2/ghc-6.4.1.html make sense to anyone?
15:15:45 <Heffalump> what are you actually testing, btw?
15:15:45 <heatsink> basti_: okay, that's an interesting way of categorizing things. ;)
15:16:02 <basti_> heatsink: for the people of #haskell though
15:16:14 <wagle> Igloo: no, but i achieved zen mind
15:16:18 <Heffalump> "all the inputs are currently the input size"? WTF?
15:17:20 <Igloo> Err, hmm
15:17:43 <int-e> Igloo: ah, the table headings point to the corresponding tests ... hmm.
15:17:57 <Igloo> Things like    for (p = start, end = start + len; p < end && *p != ' '; p++);    in C vs Haskell
15:18:21 <Heffalump> right.
15:18:42 <Heffalump> I don't understand the NicerHaskell version of FindWhite, but never mind :-)
15:19:04 <wagle> Igloo: though this makes it a bit more comprehensible:
15:19:05 <wagle> http://urchin.earth.li/~ian/bench/
15:19:07 <Heffalump> (let alone any of the others)
15:19:26 <Heffalump> I'd figured out what it did without reading that page, but it was nice to find that to confirm my belief.
15:20:14 <Igloo> Heff: which bit's hard to understand OOI?
15:20:30 <Igloo> first_white itself or the bit above?
15:21:35 <int-e> so ... c `elem` [32, 9, 13, 10] is not optimized to c == 32 || c == 9 || c == 13 || c == 10 ... hmm.
15:22:22 <Igloo> wagle: Does anything in that other than the first line help?
15:22:38 <Heffalump> first_white
15:23:28 <Heffalump> oh, white == white space
15:23:31 <Heffalump> now I understand it :-)
15:28:59 <wagle> i dunno..  i've been distracted
15:29:29 <wagle> but at least he gives you the source to look at and run yourself
15:29:43 <Igloo> ("he" is me, BTW)
15:29:53 <wagle> "Use the Source, Luke!"  (UtSL)
15:29:56 <Igloo> I'm just trying to make the results understandable on their own
15:30:51 <wagle> oh ok, i understand it now
15:32:13 <wagle> Igloo: what dont you understand?
15:33:49 <wagle> he has three versions of the Tests/Ptr/FindSpace algorithm: Base, BarelyHaskell, and Haskell..  if you click on the name of the implementation, it shows you the source..
15:33:56 <Igloo> wagle: I understand it; I wrote it. I was trying to find out if it is understandable to anyone else  :-)
15:34:02 <wagle> ahh
15:35:23 <wagle> ok, i was goofing around and exagerating with my initial claim abouty zen mind
15:36:48 <wagle> Suppose that, with input 100, A takes 10s, and B takes 12s, then B takes 1.2 times longer, which is displayed as:
15:37:12 <wagle> (my wording needs maybe a little more polishing)
15:37:26 <Igloo> Thanks
15:37:46 <heatsink> Igloo: filling in the entries with "1 -> ratio" would be clearer, to me at least
15:37:49 <wagle> putting the "with input 100" is confusing
15:37:59 <wagle> putting the "with input 100" _in the middle_is confusing
15:38:09 <int-e> size :)
15:38:40 <wagle> of course, i'm left wondering what Base -> Haskell was..  8)
15:39:04 <heatsink> :)
15:40:09 * wagle pulls out his logy graph paper
15:40:14 <Igloo> You normally shouldn't care, though, as the idea is to highlight problems in "neighbouring" points in the niceness/performance tradeoff
15:40:28 <Igloo> FindSpace seems to have gone odd in that respect, though
15:40:40 <syntaxfree> I have questions.
15:40:53 <int-e> yes, if each test could came with a short description of the participating implementations that would really help I think.
15:41:08 <int-e> syntaxfree: great, are you going to keep them to yourself or ask them?
15:41:30 <wagle> Igloo: yes, but the performance curves are not monotonic
15:42:24 <syntaxfree> I am afraid most of my questions are of the existential/philosophical kind.
15:42:35 <Igloo> wagle: Yes, but I don't understand why not  :-)
15:42:39 <syntaxfree> Why are we here? Where do we go from here? Why does a good God produce evil?
15:42:50 <wagle> what is evil?
15:42:50 <sylvan> I'm trying to install hIDE but I get "*** Exception: Line 11: Unknown field 'hs-source-dirs'"
15:43:01 <sylvan> when I run runhaskell Setup.lhs configure
15:43:41 <lisppaste2> syntaxfree pasted "compiles, but fails when running secantroot" at http://paste.lisp.org/display/11870
15:43:53 <syntaxfree> I also don't know why that code snippet won't work.
15:44:05 <Lemmih> sylvan: Upgrade your Cabal.
15:44:11 <wagle> (compare a b) < 1, (compare b c) > 1, (compare a c) ??? 1
15:44:13 <araujo> There exist a map function to return monadic values?
15:44:17 <sylvan> where can I find the latest cabal?
15:44:34 <sylvan> @where cabal
15:44:35 <lambdabot> http://www.haskell.org/cabal
15:44:48 <Lemmih> sylvan: http://cvs.haskell.org/darcs/cabal
15:45:12 <int-e> syntaxfree: how does it fail, and how are you calling it?
15:46:31 <araujo> I mean, i wanna do something like map (\x -> putStrLn x) [....]
15:46:46 <wagle> syntaxfree: what is the type of secantroot?
15:46:47 <dcoutts> mapM (\x -> putStrLn x) [....]
15:46:47 <int-e> syntaxfree: your pasted version was missing a = btw
15:47:01 <araujo> Thanks dcoutts
15:47:27 <dcoutts> araujo, or: sequence_ [ putStrLn x | x <- ... ]
15:48:14 <int-e> *Main> secantroot (\x->x*x+2*x-3) 0 0.00001 0.001
15:48:14 <int-e> 1.0000000929223072
15:48:35 <araujo> dcoutts, mapM also collects values into a list?
15:48:35 <wagle> secantroot f x0 h t | abs (f x0) <= t = x0
15:48:36 <wagle> 		    | otherwise  = secantroot f (x0 - (f x0)/(derivative f x0 h)) h t
15:48:44 <wagle> secantroot f x0 h t | abs (f x0) <= t = x0
15:48:44 <wagle> 		    | otherwise  = secantroot f (x0 - (f x0)/(derivative f x0 h)) h t
15:48:57 <wagle> oops
15:48:58 <syntaxfree> hmm. lisppaste won't notify the channel of annotations.
15:49:02 <dcoutts> araujo, yes, or mapM_ discards them
15:49:06 <syntaxfree> I had annotated with the error message.
15:49:25 <wagle> i saw no error message until i ran it myself
15:49:35 <araujo> dcoutts, ok, that's what i want then
15:49:36 <int-e> syntaxfree: huh? it did last time I tried it
15:49:46 <dcoutts> @type mapM
15:49:51 <xerox> Is there a c2.com wikipage about whishful thinking?
15:49:51 <lambdabot> forall b (m :: * -> *) a. (Monad m) => (a -> m b) -> [a] -> m [b]
15:49:54 <dcoutts> @type mapM_
15:49:55 <lambdabot> forall (m :: * -> *) a b. (Monad m) => (a -> m b) -> [a] -> m ()
15:49:59 <dcoutts> @type sequence
15:50:01 <lambdabot> forall a (m :: * -> *). (Monad m) => [m a] -> m [a]
15:50:01 <xerox> I'm trying to explain it to a person.
15:50:02 <int-e> syntaxfree: and there's no annotation for your last paste
15:50:02 <dcoutts> @type sequence_
15:50:04 <lambdabot> forall (m :: * -> *) a. (Monad m) => [m a] -> m ()
15:50:11 <Cale> hi xerox
15:50:13 <wagle> This paste has no annotations.
15:50:19 <Cale> I have yet more patches :)
15:50:24 <xerox> Cale wow
15:50:25 <dcoutts> hi xerox, Cale.
15:50:30 <syntaxfree> grr.
15:50:43 <xerox> Do you know of anything explaining whishful thinking, apart from SICP?
15:51:02 <lisppaste2> syntaxfree pasted "that's the error I get." at http://paste.lisp.org/display/11872
15:51:07 <wagle> "whishful thinking"?
15:51:36 <int-e> syntaxfree: you're missing an argument
15:51:41 <xerox> wagle: like
15:51:43 <xerox> map f [] = []
15:51:49 <xerox> map f [] = f x : foo
15:51:53 <xerox> oops
15:51:57 <xerox> map f (x:xs) = f x : foo
15:52:06 <int-e> syntaxfree: (there should be three numbers, not two)
15:52:19 <xerox> "think you have foo which is f mapped onto the rest of the list)"
15:52:37 <syntaxfree> am I?
15:52:39 <xerox> "what do you just have to do?"
15:52:42 <xerox> "apply f to x"
15:52:53 <int-e> syntaxfree: can you count to three? *fg*
15:53:03 <int-e> err *fg* -> *eg*
15:53:26 <Cale> darcs failed:  Failed to download URL http://haskell.galois.com/~paolo/darcs/nymphaea/_darcs/inventory
15:53:33 <xerox> Oh?!
15:53:47 <Cale> oh, nm, it worked the second time I tried it
15:53:54 <xerox> Works here yeah
15:54:09 <int-e> syntaxfree: so ghci tells you that the term is actually a function (of type t->t for some t) which it can not display, because there is no Show instance for it.
15:54:24 <wagle> xerox: i'm missing the context, i think
15:54:37 <Cale> http://vx.hn.org/autoshare/nymphaea-patches
15:54:49 <xerox> wagle: like what sussman teaches in some SICP video lecture :D
15:56:04 <syntaxfree> thanks :)
15:56:21 <wagle> xerox: i read the book, but that was yeeeers ago
15:56:32 <xerox> You probably metabolized the idea ;)
15:58:11 <Heffalump> so who is going to ICFP etc?
15:58:16 <xerox> Cale: how does one select the start point?
15:58:20 <wagle> ah..  this gets hits:
15:58:21 <xerox> BTW it's _great_
15:58:34 <wagle> @google "wishful thinking" sussman
15:58:35 <lambdabot> http://www.cc.gatech.edu/computing/classes/AY2004/cs1321x_fall/hw/asgn3.html
15:58:40 <Cale> xerox: click, and optionally drag :)
15:58:57 <xerox> Cale: doesn't do nothing here :(
15:58:59 <Igloo> Me, you, dons, SyntaxNinja, Jaffa were the people from here we came up with yesterday
15:59:02 <Cale> xerox: really?
15:59:07 <xerox> Really :(
15:59:13 <Cale> hmmm
15:59:15 <wagle> ahh..  induction!
15:59:57 <Cale> xerox: could you tell me what onExpose looks like in the code that you have?
16:00:39 <xerox> @paste
16:00:40 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
16:01:03 <lisppaste2> xerox pasted "onExpose" at http://paste.lisp.org/display/11873
16:01:11 <syntaxfree> so let's say I have a list of numbers.
16:01:16 <syntaxfree> [1, 7, 9, 12 21]
16:01:47 <syntaxfree> I want to turn that list into [1*f(1), 7*f(2), 9*f(3)..].
16:01:48 <xerox> http://haskell.galois.com/~paolo/wow-220905-0048.png
16:01:49 <Cale> xerox: yeah, that's definitely my latest code...
16:01:53 <xerox> It looks pretty.
16:02:08 <syntaxfree> ah, forget it. I think I know what to do.
16:02:10 <int-e> syntaxfree: have a look at zipWith
16:02:14 <syntaxfree> yes, yes.
16:02:18 <syntaxfree> zipWith and map.
16:02:47 <syntaxfree> can I say something like [1..lenght l]?
16:03:31 <sylvan> I'm trying to install yi, everything seems to work until "sudo ./Setup.lhs install" where I get: Setup.lhs: Error: Could not find module: Yi with any suffix: ["hi"]
16:03:51 <wagle> @eval [1..length [1..3]]
16:03:54 <Cale> vx.hn.org/autoshare/nymphaea.tar.bz2 -- well, I suppose try this copy, just to make absolutely sure we have the same thing :)
16:03:55 <lambdabot> [1,2,3]
16:04:20 <xerox> OK :)
16:04:34 <Cale> oh!
16:04:42 <Cale> which gtk2hs are you using?
16:04:47 <xerox> The tech preview
16:04:48 <Cale> update to the latest CVS
16:04:54 <xerox> Ah!
16:04:55 <Cale> there's a critical bug fix :)
16:05:08 <Cale> really, it's a bug in GTK
16:05:11 <dcoutts> xerox, you can get gtk2hs with darcs these days :-)
16:05:15 <Cale> but there's a workaround
16:05:18 <int-e> syntaxfree: you can but there's no need to
16:05:32 <xerox> dcoutts: ooooh!!!!!
16:05:33 <xerox> Where where where
16:05:36 <xerox> It will take a while to compile, though
16:05:46 <xerox> and the external hard drive is way too noisy to compile nighttime :-(
16:05:48 <syntaxfree> wah, prelude chokes with negative exponents.
16:05:50 <int-e> syntaxfree: zipWith will stop once one of the lists is exhausted. (remember Haskell does lazy evaluation)
16:05:52 <xerox> I'll try tomorrow morning :D
16:05:59 <xerox> Cale: btw, you rock.
16:06:00 <Cale> syntaxfree: try using **
16:06:02 <dcoutts> darcs get http://haskell.org/gtk2hs/darcs/gtk2hs/
16:06:09 <xerox> dcoutts: so noted. Thanks.
16:06:41 <xerox> Cale: I should mention you in the nymphea page, if you can do some modification and give me an index.html I'll put it there
16:06:54 <wagle> syntaxfree: 		    costD = if (s == 0) then 0 else (s1 * s ** s2)
16:07:34 <kosmikus> good night, see some of you in .ee ...
16:07:44 <wagle> .ee?
16:08:05 <dcoutts> kosmikus, have fun!
16:08:11 <dcoutts> wagle, Estonia
16:10:14 <syntaxfree> ** yields an error.
16:10:42 <wagle> dcoutts: ah..  i was thinking estonia was .es
16:10:43 <Cale> syntaxfree: really? Like  2 ** (-1)?
16:10:49 <Heffalump> EEEEEEEEEEEEEEEEE!
16:11:11 <Heffalump> .es is Spain
16:11:16 <Igloo> Oh, err, and kosmikus  :-)
16:11:30 <dcoutts> but not me :-(
16:11:31 <wagle> Heffalump: yeah, i realized that when i typed it
16:11:46 <Igloo> Pah, you had your go last year  :-)
16:11:50 * Heffalump thinks dcoutts should have taken steps to gain admission the same way as last year.
16:11:52 <dcoutts> yeah :-)
16:11:59 <wagle> which is why .es seemed more familier than .ee..  8/
16:12:02 <sylvan> ok, so hIDE is installed, how do I run it?
16:12:12 <dcoutts> Heffalump, well we tried!
16:12:38 <dcoutts> sylvan, the build.sh script tells you when it finnishes
16:12:39 * Heffalump wonders if our bragging rights expire
16:12:42 <Heffalump> and if so precisely when
16:12:58 <sylvan> did it?
16:13:19 <dcoutts> sylvan, run it again then
16:13:41 <wagle> Heffalump: your bragging right expire in 5 minutes, start talkin'
16:13:44 <sylvan> well that doesn't work
16:13:49 <sylvan> "./bin/hIDE hide-base-0.1.0 hide-shell-0.1.0 hide-yi-0.1.0" I mean
16:13:52 <sylvan> no bin dir here
16:13:54 <wagle> (like what are you talking about?)
16:14:34 <dcoutts> sylvan, oh, hmm I wonder where it got installed, check the log above
16:14:48 <Cale> sylvan: there are three exponentiation operators in the Prelude: (^), which works only with positive integral exponents and any kind of number as the base. (^^) works for Fractional bases and integral exponents (including negative exponents). (**) works for Floating bases and exponents, and a ** b is equivalent to exp (b * log a)
16:14:50 <dcoutts> sylvan, which directory did you run the build.sh script from?
16:15:00 <Cale> er not sylvan, syntaxfree
16:15:04 <Cale> :)
16:15:09 <sylvan> the ~/hIDE
16:15:25 <sylvan> and I never ran the build.sh script, just ./Setup.lhs build
16:15:42 <dcoutts> sylvan, oh well then that'd explaing it :-)
16:15:54 <sylvan> I can't install yi though.. something's wrong with yi =)
16:15:56 <dcoutts> sylvan, hIDE consists of several packages
16:16:01 <Heffalump> wagle: the ICFP contest ones
16:16:18 <dcoutts> sylvan, well you need yi for the hIDE's yi plugin
16:16:30 <dcoutts> sylvan, you're using the latest darcs version of yi?
16:16:33 * wagle now sees how to connect the dots
16:16:39 <sylvan> well the ./Setup.lhs for yi just silently quits after compiling Yi.UI
16:16:45 <sylvan> yes, just downloaded it
16:16:56 <dcoutts> sylvan, and you've got gtk2hs installed
16:17:05 <sylvan> or, not silently, just after reporting a warning about "Map" being imported more than once
16:17:10 <sylvan> yep, gtk2hs is installed
16:17:24 <dcoutts> sylvan, you can use ./setup build -v to get more output
16:17:26 <sylvan> configure works, build just stops after compiling six modules
16:17:34 <dcoutts> to see why yi isn't building
16:17:41 <sylvan> doesn't say anything more =(
16:18:16 <dcoutts> where's dons when we need him?
16:18:25 <xerox> Goodnight.
16:18:27 <dcoutts> probably on his way to Estonia :-)
16:18:28 <xerox> Thanks much Cale.
16:18:31 <sylvan> it compiles a bunch of modules, then just kicks me back to the prompt
16:18:32 <dcoutts> g'night xerox
16:18:42 <dcoutts> sylvan, which ghc version ?
16:18:42 <Cale> xerox: try it with the new gtk2hs and let me know what you think :)
16:18:48 <sylvan> 6.4
16:18:48 <Cale> xerox: goodnight
16:19:04 <dcoutts> sylvan, dunno what's going on there
16:19:10 <sylvan> crap
16:19:17 <dcoutts> sylvan, you can build hIDE without the yi plugin
16:19:26 <dcoutts> but it'll be a little boring :-)
16:19:30 <sylvan> =)
16:19:57 <sylvan> this is all that happens: Building yi-0.2...
16:19:57 <sylvan> Chasing modules from: Yi,Yi.Buffer,Yi.Core,Yi.Char,Yi.Editor,Yi.GtkBuffer,Yi.MkTemp,Yi.UI,Yi.UTF8,Yi.Lexers,Yi.DLists,Yi.Keymap.Ee,Yi.Keymap.Mg,Yi.Keymap.Emacs,Yi.Keymap.Emacs.UnivArgument,Yi.Keymap.Emacs.KillRing,Yi.Keymap.Emacs.Keys,Yi.Keymap.Vim,Yi.Window
16:19:57 <sylvan> Skipping  Yi.DLists        ( src/Yi/DLists.hs, dist/build/Yi/DLists.o )
16:19:57 <sylvan> Skipping  Yi.Lexers        ( src/Yi/Lexers.hs, dist/build/Yi/Lexers.o )
16:19:58 <sylvan> Skipping  Yi.UTF8          ( src/Yi/UTF8.hs, dist/build/Yi/UTF8.o )
16:20:00 <sylvan> Skipping  Yi.MkTemp        ( src/Yi/MkTemp.hs, dist/build/Yi/MkTemp.o )
16:20:02 <sylvan> Skipping  Yi.Char          ( src/Yi/Char.hs, dist/build/Yi/Char.o )
16:20:06 <sylvan> Compiling Yi.UI            ( src/Yi/UI.hs, dist/build/Yi/UI.o )
16:20:08 <sylvan> src/Yi/UI.hs:1:0:
16:20:10 <sylvan>     Warning: `Map' is imported more than once:
16:20:12 <sylvan>                imported from Data.Map at src/Yi/UI.hs:29:0-29
16:20:16 <sylvan>                imported from Data.Map at src/Yi/UI.hs:28:18-20
16:20:16 <int80_h> ouch ouch ouch
16:20:18 <sylvan> sylvan@c83-248-109-69:~/yi$ g
16:21:35 <sylvan> sorry about that, I figured there wasn't much traffic here anyway so not a lot of people to be bothered by a long build-log =)
16:23:07 * int80_h dies
16:23:11 * int80_h faints
16:23:18 * int80_h genuflects
16:24:56 <sylvan> hmm... when I install from the 0.1.0 tarball on his website I get "Failed to load interface for `Plugins':
16:24:56 <sylvan> "
16:25:02 <sylvan> which is weird...
16:25:44 <dcoutts> sylvan, you've got hs-plugins installed?
16:26:06 <dcoutts> and indeed the latest darcs version of that too
16:26:07 <sylvan> yep. the very latest as of ten minutes ago =)
16:26:11 <dcoutts> ok
16:27:10 <sylvan> I forgot to do "--set-scripts-executable" before, so I'm gonna retry and do that to see if something got messed up due to that
16:27:19 <dcoutts> otherwise ask dons when he gets back
16:27:54 <sylvan> hmm.. any difference between the yi repo at cse.unsw.edu.au and scannedinavian?
16:28:12 <dcoutts> sylvan, yes you want the one at scannedinavian
16:28:16 <sylvan> okay
16:28:17 <dcoutts> I'm going to be adding some new gui stuff soon which might even make it interesting without the yi plugin
16:30:10 <cm_> "Notice that 'Fix' in 'MonadFix' refers as much to fixing an unpleasant issue as it refers to a fixpoint combinator."
16:31:20 <sylvan> dcoutts, cool...
16:31:25 <sylvan> dammit this is frustrating =(
16:32:59 <dcoutts> sylvan, if you do the build with -v you should get more output
16:33:39 <dcoutts> cabal should at least show you the commands it's running, ie the ghc command line
16:34:08 <dcoutts> if you then run that manually and add -v to the ghc command line then you should get much more output
16:46:51 <ricebowl> quick question -- how can I take the integer square root of a number? I tried (floor (sqrt x)), but it seems to not do what I was expecting
16:47:14 <Pseudonym> ricebowl: http://andrew.bromage.org/darcs/
16:47:18 <Igloo> floor $ sqrt $ fromIntegral x   might be what you want
16:47:41 <Pseudonym> Igloo: That still rounds badly on large integers.
16:47:51 <Pseudonym> And doesn't work if the integer won't fit in a Double.
16:47:59 <ricebowl> I'm not really dealing with large integers, this is just for a class assignment
16:48:03 <wagle> ricebowl: what is it that yhou want?
16:48:04 <Pseudonym> Ah.
16:48:09 <ricebowl> have to determine whether a number is prime or not
16:49:31 <ricebowl> oh, I guess I should have specified; it's somehow getting that the type is Double
16:49:33 <int80_h> oh, look up what donald knuth suggests for doing that
16:49:44 <ricebowl> *** Expected type : Integral a => a -> Bool
16:49:44 <ricebowl> *** Inferred type : Integral Double => Double -> Bool
16:50:00 <Pseudonym> OK, do what Igloo suggested.
16:50:05 <Pseudonym> Put the fromIntegral in there.
16:50:13 <Pseudonym> Basically, you've discovered Haskell's defaulting rules.
16:50:13 <wagle> floor $ sqrt $ fromIntegral x will be what you want..  can you see why ceiling $ sqrt $ fromIntegral x would be too large?
16:50:40 <ricebowl> no
16:50:47 <ricebowl> I'm not even sure what that does, to be honest :|
16:50:50 <ricebowl> what is $?
16:51:31 <wagle> yeah, i thought the $ might be confusing, but decided tobe consistant
16:51:47 <Pseudonym> florr (sqrt (fromIntegral x))
16:51:49 <wagle> f (g (h x)) == f $ g $ h x
16:51:50 <int-e> ricebowl: a $ b = a b; but $ has a very low priority
16:51:51 <Pseudonym> Does that look better?
16:51:54 <ricebowl> hmm... integer -> float conversions are not automagic?
16:52:02 <Pseudonym> No, they're not.
16:52:06 <ricebowl> Pseudonym - yes, I have that
16:52:12 <ricebowl> ahh, ok, I had assumed they were
16:52:16 <orbitz> int-e, hello! cale figure dout wha ti was doing wrong for me. thanks again for last night
16:52:18 <Pseudonym> Conversions are not automagic, but defaulting is.
16:52:20 <ricebowl> that explains quite a bit
16:52:32 <ricebowl> defaulting referring to the interpretation of numeric literals?
16:52:38 <Pseudonym> Kind of.
16:52:39 <wagle> yes
16:52:41 <ricebowl> ok
16:53:03 <Pseudonym> Close enough.
16:57:07 <ricebowl> thanks, that's quite useful to know :p
16:57:07 <int-e> orbitz: heh, I've forgotten what the problem was already; you're welcome though :)
16:57:07 <orbitz> int-e: just simple integration
16:57:07 <wagle> ricebowl: i said yes since it was close enough for your purposes, but keep Pseudonym's response in mind
16:57:07 <Pseudonym> Defaulting is a little more esoteric than just how you interpret numeric literals.
16:57:07 <int-e> orbitz: wrong channel I think ;)
16:57:07 <Pseudonym> But you can think of it that way.
16:57:07 <Pseudonym> A construct like show (sqrt (read s)) also uses defaulting, even though there are no numeric literals there.
16:57:07 <Pseudonym> @eval show (sqrt (read "2.0"))
16:57:07 <lambdabot> "1.4142135623730951"
16:57:07 <Igloo> shapr: http://urchin.earth.li/~ian/bench/bench-0.2/ghc-6.4.1.html is hopefully more understandable
16:58:33 <ricebowl> ok
16:58:36 <ricebowl> thanks
16:59:32 <wagle> @eval show (sqrt (read "2.0")::Double)
16:59:33 <lambdabot> "1.4142135623730951"
16:59:40 <wagle> @eval show (sqrt (read "2.0")::Float)
16:59:41 <lambdabot> "1.4142135"
16:59:47 <wagle> neato
17:00:31 <shapr> Igloo: BarelyHaskell comes out ahead, except for one surprise. Neat.
17:00:42 <Pseudonym> @eval show (1 + read "2")
17:00:43 <Igloo> No, Base comes out ahead
17:00:43 <lambdabot> "3"
17:00:47 <Pseudonym> @eval show (1 + read "20")
17:00:48 <lambdabot> "21"
17:00:49 <Pseudonym> @eval show (1 + read "2.0")
17:00:50 <lambdabot> Prelude.read: no parse
17:00:58 <Pseudonym> Yay defaulting.
17:01:06 <wagle> haha
17:01:33 <shapr> Hey Pseudonym, did you see the dataflow via comonads paper by Uustalu & Vene?
17:01:57 <Pseudonym> I haven't read it yet if that's what you mean.
17:02:02 <maayhme> shapr, where is it ?
17:02:06 <Pseudonym> But I have printed it out.
17:02:08 <maayhme> and whats a co(monad ? ;)
17:02:11 <Pseudonym> maayjme: LtU
17:02:21 <Pseudonym> Errr... maayhme
17:02:29 <maayhme> co-monad is an inverse monad ?
17:02:38 <maayhme> difference with an arrow ?
17:02:38 <wagle> dual
17:03:11 <maayhme> is it true to say that an arrow includes a monad and its comonad ?
17:03:34 <shapr> It's quite similar to an arrow when you limit yourself to compare functional reactive arrow-based programming to dataflow comonads.
17:04:05 <maayhme> but ... ?
17:04:15 <shapr> I dunno about including a comonad, but arrows are a superset of monads.
17:04:29 <maayhme> i love this channel
17:04:42 <shapr> Arrows do lots more than monads or comonads. On the downside, arrows can be a pain in the butt to deal with.
17:04:50 <shapr> Monads are simpler and easier in several ways.
17:04:52 <maayhme> here and #ocaml are the only place I manage to get some interresting information on the topic
17:04:56 <Heffalump> a monad and *its* comonad?
17:05:02 <Heffalump> does ever monad have a comonad?
17:05:18 <Pseudonym> Every monad has a dual.
17:05:20 <Pseudonym> AFAIK
17:05:31 <shapr> maayhme: On which topic?
17:05:54 <maayhme> shapr, advanced functional programming
17:06:07 <Cale> I'm not so sure that's the case in general...
17:06:12 <wagle> you just reverse the categorical arrows on the monad to get its comonad?
17:06:15 <shapr> Anyway, I hope that Uustalu's comonadic dataflow interpreter will make it easier to write simulations in Haskell.
17:06:35 <maayhme> is it a recent paper ?
17:06:38 <Cale> Comonads are the categorical dual to monads in that the definition has all the arrows swapped
17:06:41 <dons> moinmoin
17:06:45 <shapr> g'day dons!
17:06:55 <Cale> but I don't think that each monad has a natural comonad associated to it
17:06:56 <shapr> dons: When's your plane?
17:07:02 <wagle> you just reverse the categorical arrows on the monad to get its _dual_, which is a comonad?
17:07:16 <dons> about 24 hrs from now
17:07:19 <shapr> Cool!
17:07:19 <Cale> Well, I suppose in the opposite category, sure
17:07:21 <maayhme> can a monad have multiple comonads ?
17:07:24 <wagle> Cale: ah..  you have an example handy?>
17:07:32 <Heffalump> oh, I was going to work out when I need to leave for mine.
17:07:56 <Cale> wagle: of what?
17:08:00 <shapr> hi alec
17:08:15 <wagle> 16:55 < Cale> but I don't think that each monad has a natural comonad
17:08:15 <wagle>               associated to it
17:08:28 <Pseudonym> The tricky part is that you also need to dualise the types of the monad operations.
17:08:37 <Pseudonym> e.g. for a State comonad, you need to dualise get and put.
17:08:57 <wagle> unget and unput?  8)
17:09:11 * Igloo should find out how early I should be at the airport
17:09:27 <Igloo> oh, and pick a book or two
17:09:31 <Heffalump> I think it says 90 mins before the flight.
17:09:37 <int-e> wagle: teg and tup?
17:09:57 * wagle searches for an upside down font
17:10:04 <int-e> heh
17:10:45 * Heffalump goes to bed
17:11:35 <dons> i think I need about 5 books :}
17:11:52 <Igloo> What's the flight time?
17:11:54 <maayhme> shapr, any chance you can provide me the paper you talked about ? cant find it on scholar
17:11:56 <Igloo> Is it direct?
17:12:12 <dons> two stops, bangkok and helsinki
17:12:18 <Igloo> Ouch
17:12:21 <int80_h> slashdot has a headline "learning to code with a boardgame". I'm thinking, why not learn to code by coding? Then I was striken by a flash of the obvious.
17:12:30 <wagle> i find that i only actually want to read books if i dont take any with me
17:12:32 <shapr> maayhme: http://lambda-the-ultimate.org/node/view/988
17:12:32 <dons> about 19hrs in the air, plus a fw more in airports
17:13:20 <dons> at least the jet lag mign't be so bad, as it's mostly a flight south to north, not so much east to west
17:13:21 <shapr> Do they make bigger laptop batteries just for flying to and from .au ?
17:13:27 <dons> hehehe
17:13:30 <Pseudonym> :-)
17:13:32 <dons> oh, they should
17:13:51 <Pseudonym> Actually, they should make laptops that don't waste so much damn power.
17:14:00 <dons> and haskell compilers!
17:14:02 <Pseudonym> My XT laptop lasted for 8 hours.
17:14:18 <dons> oh boy, i wish ghc had --fsave-battery
17:14:22 <Pseudonym> My palm pilot lasts almost that long.
17:14:31 <Pseudonym> Mind you, I don't stress the CPU of my palm./
17:14:45 <wagle> hmm..  my currrent battery lasts about 20 minutes, so for a 19 hr flight, i should take, ahh, 57 batteries..  right?
17:15:21 <Igloo> Isn't that -O0?
17:15:43 <dons> :)
17:16:31 <dons> @seen dcoutts
17:16:32 <lambdabot> dcoutts is in #haskell-blah and #haskell. Last spoke 42 minutes and
17:16:32 <lambdabot> 23 seconds ago.
17:16:53 <wagle> whaz haskell-blah?
17:17:19 * shapr yaws
17:17:21 <shapr> yawns
17:17:24 <CosmicRay> --- Topic for #haskell-blah is #haskell-blah: Everything but #haskell, and lots of sex - add yourself to the collection -> http://elis.ugent.be/~kehoste/haskell-blahSouthPark.html - lambdabot's first words: "Ooh, functional programmers are so hot!" -  current: new topic wanted
17:17:29 <wagle> shapr: up late, eh?
17:17:42 <dons> dcoutts, the monospace patch is in Yi.UI, and has been for a few days, however, hIDE is loading Yi in a rather low-level way, and so doesn't get to use the patch. we should either refactor, or otherwise hack
17:17:45 <wagle> CosmicRay: hahaha  thanks
17:18:04 <shapr> wagle: Yeah, but not for much longer
17:18:20 <dcoutts> dons, ok what do we need to do?
17:18:33 * wagle hey, you have any opinion about bupropion?
17:18:38 <wagle> jhsdjhsd
17:18:40 <wagle> fuck
17:18:55 <shapr> Never met the guy myself.
17:19:28 <dons> well, I think currently Yi.hs in yiBase does too much itself, but I'll just copy across the monospace code for now
17:19:35 <dcoutts> dons, btw sylvan has been having trouble compiling Yi-0.2, we couldn't figure it out. Apparently the build just stopped after compiling 6 modules or so
17:19:46 <dcoutts> dons, well I'm happy for yiBase to do less
17:19:50 <dons> I'd like to have a common initialisation for yi that both the standalone and plugin can use
17:19:59 <int80_h> does haskell.org have docs on how to use haskell in group projects?
17:20:09 <dcoutts> dons, I'm not hapy with the way it connects to the ide shell either
17:20:11 <dons> currenly though, yi assumes it needs to init the gui and such like. shouldn't be too hard to tweak though
17:20:18 <int80_h> or is it so obvious you don't need such docs? I'm very newbie, as you can tell.
17:20:33 <dons> hmm. yi builds ok for me here
17:20:58 <dons> int80_h, in group projects?
17:21:00 <dcoutts> dons, right, well the right interface should become more apparent once I've got some of these ide shell bits in place
17:21:12 <dons> int80_h, grab darcs, and get hacking!
17:21:19 <dons> yep. true.
17:21:31 <dcoutts> dons, I've now got it doing multiple top-level windows and all sharing the same file browser data store
17:21:44 <dons> cool!
17:22:02 <dcoutts> dons, next up is getting the editor to show the slected file and have multiple views of the same underlying buffer
17:22:35 <dons> yep, well most of the code is there, and the rest is in old yi. just needs to be hacked together
17:22:41 <dcoutts> dons, I'll do that at first with a trivial GtkTextBuffer/GtkTextView editor, and then we can see how to do it for the Yi editor
17:22:47 <dcoutts> dons, ok
17:22:49 <dons> yep. good idea
17:23:20 <dons> are patches getting pushed back onto scannedinavian?
17:23:30 <dcoutts> dons, not my gui stuff yet
17:23:38 <dons> ok, no worries
17:23:39 <dcoutts> it's still to volatile
17:23:48 <dcoutts> I'll push soonish though
17:24:04 <CosmicRay> int80_h: really, haskell is well-suited to that.
17:24:05 <dcoutts> http://haskell.org/~duncan/hIDE/hIDE.png
17:24:09 <int80_h> dons yes sir!
17:24:22 <CosmicRay> int80_h: I'd say it is better at it than most languages, in fact.
17:24:42 <int80_h> I wasn't sure if articulated methods have been created around haskell though
17:25:14 * int80_h gets darcs
17:25:28 <dons> mostly you just get a darcs repo set up, and then let the type system keep everyone in sync :)
17:25:29 <sethk> dcoutts, when I built gtk2hs today I had several seg faults and had to restart.  Looks like what I've seen before from gcc.  Have you seen this?
17:25:42 <dcoutts> sethk, no I've not
17:25:54 <dons> it's a bit like the 'best practice' stuff we talked about yesterday -- no need for explicit rules on this, since the language *just works*
17:26:20 <dcoutts> sethk, sounds like a dodgy gcc to me
17:26:24 <int80_h> ah I will look up yesterday's conversation
17:26:36 <dons> sethk, you on a funny arch?
17:27:27 <sethk> dons, only if you don't like intel.  :)
17:27:32 <int80_h> I have an evil scheme to introduce haskell to my community college
17:27:42 <sethk> dcoutts, dons, I'll try a gcc upgrade
17:27:47 <int80_h> an innoncently named "function programming users group"
17:27:54 <int80_h> er, functional.
17:28:06 <dons> sethk, what gcc do you have?
17:28:08 <sethk> dcoutts, I had been seeing this frequently with early gcc v3 but I hadn't seen it for some months
17:28:16 <sethk> dons, let me get the exact version
17:28:17 <dons> hmm. ghc version?
17:28:25 <maayhme> woa, only 89 papers on scholar matching monad + comonad + arrow
17:28:27 <maayhme> thats not a lot .
17:28:33 <int-e> hmm, is there a way to tell ghc not to erase its temporary files?
17:28:36 <sethk> dons, 3.4.2
17:28:38 <Pseudonym> A lot of them will be dupes.
17:28:39 <dons> gcc 2.95.x is a bit flakey with ghc 6.4
17:28:45 <int80_h> but I'll need to write up an faq that answers some questions I think I might get from potential members
17:28:46 <Pseudonym> You might do better with "freyd category".
17:28:47 <dons> int-e: --keep-tmp-files
17:29:15 <int80_h> one of them being the whole "group project" thing. But darcs looks just fine
17:29:22 <dons> sorry, -keep-tmp-files, int-e
17:29:27 <sethk> dons, yes, I know about some of the gcc versions.  I'll do a download and rebuild of gcc, then I'll do ghc 6.4.1, then I'll rebuild gtk2hs
17:29:35 <sethk> gtk2hs is working very nicely once built
17:29:45 <int-e> dons: thank you.
17:29:50 <maayhme> Pseudonym, only 19 papers now
17:30:10 <maayhme> the most revelant you think ?
17:30:31 <dcoutts> sethk, I'm using gcc 3.4.3 if it helps
17:30:38 <sethk> dcoutts, thanks
17:30:47 <dcoutts> sethk, and I never had problems with 3.3.4 either
17:30:55 * int-e is stupid - trying to build gtk2hs with an old gtk+ version.
17:31:00 <sethk> dcoutts, maybe a bad build here
17:31:10 <dcoutts> int-e, it should build with Gtk+ 2.0 and above
17:31:20 <Igloo> Could be a hardware problem
17:31:23 <sethk> int-e, I did that for about five minutes.  :)
17:31:37 <rubenz> ------------------------------------------------------------------------
17:31:37 <rubenz> ==fptools== make all -r;
17:31:37 <rubenz>  in <ghc_source_path>/ghc-6.4.1/ghc/compiler
17:31:37 <rubenz> ------------------------------------------------------------------------
17:31:37 <rubenz> is it normal for the ghc 6.4.1 install to stay on
17:31:37 <rubenz> ------------------------------------------------------------------------
17:31:39 <rubenz> ==fptools== make all -r;
17:31:41 <maayhme> Im taking "abelian categories" by Freyd in 1964
17:31:41 <rubenz>  in <ghc_source_path>/ghc-6.4.1/ghc/compiler
17:31:43 <rubenz> ------------------------------------------------------------------------
17:31:44 <sethk> Igloo, well, then I would expect to see problems building other things, or running programs that use a lot of memory, or something
17:31:45 <rubenz> for around 18 hours? No progress messages are being displayed at all. But top says that gnumake is using about %70 of the cpu cycles.
17:31:49 <int-e> the error message I got wasn't very helpful though: "/tmp/ghc25663.hc:2212: error: void value not ignored as it ought to be"; dcoutts: I had it configured against the new version though.
17:31:52 <rubenz> oops sorry that came out funny
17:32:02 <Igloo> True
17:32:21 <Pseudonym> maayhme: The John Hughes one.
17:32:21 <sethk> I take it gcc 4.0.1 is not recommended?
17:32:30 <dons> dcoutts, what's pushd?
17:32:31 <Igloo> rubenz: That looks broken
17:32:37 <dcoutts> int-e, I'm not quite sure what you mean
17:32:40 <Pseudonym> http://haskell.org/arrows/
17:32:48 <dcoutts> dons, not much of my gui stuff yet
17:32:53 <Pseudonym> See the bibliography in particular.
17:32:53 <rubenz> oh damn. :(
17:33:00 <dons> ah, my fault.
17:33:04 <dcoutts> dons, I guess I could push now and do the other stuff later
17:33:06 <Pseudonym> Ross Paterson, "Arrows and Computation" is also good.
17:33:25 <dons> nope, dcoutts, popd and pushd are non-portable bashisms
17:33:29 <dons> for shame!
17:33:30 <int-e> dcoutts: I have old gtk versions (installed by gentoo) and new ones in /opt/gtk+-dev/ (that are actually cvs versions) and I need to invoke a command to get the path settings correct for the latter - I forgot to do that.
17:33:32 <maayhme> Pseudonym, Ive read it already
17:33:44 <Pseudonym> Ah, OK.
17:33:46 <maayhme> not entirely tho, I plan to finish it some day :P
17:33:52 <dcoutts> dons, oh, ok, feel free to fix it to something portable
17:34:05 <dons> dcoutts, I was ambiguous, I was literally asking what the "pushd" call in build.sh was
17:34:16 <Pseudonym> "Codata and Comonads in Haskell" is good.
17:34:26 <Pseudonym> @wiki CoMonad
17:34:27 <dons> not "what's pushd [to the repo]" :}
17:34:27 <lambdabot> http://www.haskell.org/hawiki/CoMonad
17:34:32 <int-e> dcoutts: I had compiled gtk2hs earlier though, so it knew it was compiling against a current version (or that's my guess.)
17:34:35 <dcoutts> dons, oh ;-)
17:35:02 <dcoutts> int-e, oh ok, you know you could have just emerged gtk2hs :-) it is in gentoo
17:35:46 <int-e> dcoutts: it wouldn't use the gtk+ version that I want to use with it.
17:36:09 <dcoutts> int-e, you're using the very latest gtk version or something?
17:36:39 <int-e> dcoutts: for development, I am. for normal applications I don't which is why I have that path hackery command
17:36:45 * dcoutts just emerged gtk+-2.8.3 gtk2hs-0.9.9
17:37:22 <int-e> dcoutts: It's ok, I'm just making my own life complicated. Don't worry about it :)
17:37:51 <dcoutts> int-e, well I'm impressed you managed to make it work, I've never tested building it against a gtk in a non-standard location :-)
17:38:27 <sethk> dcoutts, actually, I did that, and didn't run into any problems at all.  Just used the flag saying where to look.
17:38:32 <sethk> dcoutts, I was impressed
17:38:39 <dcoutts> oh good :-)
17:38:42 <int-e> dcoutts: hmm. maybe I should try building a program with it. it could have some problems indeed.
17:38:55 <dcoutts> int-e, well there are a few demos
17:39:13 <sethk> dcoutts, and the file chooser demo (remember I was complaining about the old gtk file chooser) is very impressive
17:39:26 <dons> hIDE doesn't look in the global package.conf anymore?
17:39:36 <sethk> dcoutts, I've been busily removing the do contructs from the demo programs so I can maybe understand what they are doing
17:40:01 <dcoutts> sethk, you don't like 'do' notation
17:40:13 <dcoutts> dons, it should look in both now, Lemmih did that bit
17:40:34 <dcoutts> dons, btw it'd be nice if hs-plugins could tell us the path to the users local package db
17:40:37 <sethk> dcoutts, not so much that I don't like it.  I have a lot of trouble following it.  I find it much easier to follow when I take the do out and use >>= (or >>) and lambdas
17:41:04 <sethk> dcoutts, plus the error messages also make sense to me when I do it that way.
17:41:09 <int80_h> I need an ftp site with ghc binaries. any suggestions?
17:41:15 <sethk> dcoutts, but I know I'm the only person in the universe who does it.
17:41:43 <dcoutts> sethk, fair enough.
17:42:18 <dcoutts> int-e, but you may need to set some kind of LD_THINGY_PATH to get the programs to link to the right gtk instalation
17:42:28 <sethk> Igloo, I'm not getting any seg faults building gcc, which is hard to interpret (not a hardware problem, on the one hand, but why was I getting seg faults in the first place, since I'm using the old gcc to build the new gcc)
17:42:43 <sethk> Igloo, weird.
17:43:55 <dcoutts> dons, you can see the hack we've got to find the user's package file, you could do it much more cleanly in hs-plugins
17:44:12 <dons> yep, I agree
17:44:17 <int-e> dcoutts: I know. LD_LIBRARY_PATH it is. There's a bunch of other paths that are useful to be set, too.
17:44:48 <dcoutts> int-e, yeah, I'm sure you know much more than me about that :-)
17:46:31 <wagle> is there more than PATH, LD_LIBRARY_PATH, INFOPATH, and MANPATH?
17:47:09 <dcoutts> PKG_CONFIG_PATH for building things which use pkg-config
17:47:41 <int80_h> well I did it the round about way, but knowing an ftp server would be handy
17:47:46 <rubenz> Igloo: you sure it is broken and not just taking a long time to build this component...? I mean, how could it get stuck in some kind of infinite loop?
17:47:49 * int80_h laments the loss of archie
17:48:13 <wagle> augh!
17:48:13 <Igloo> rubenz: What are you trying to do, and on what machine?
17:48:15 <CosmicRay> int80_h: veronica is still around though
17:48:25 <int80_h> woo veronica. thanks
17:48:43 <wagle> after years of blissful forgetfulness, /me resumes lamenting the loss of archie
17:48:44 <CosmicRay> int80_h: gopher.floodgap.com
17:49:07 * int80_h blames bill gates
17:49:13 <int-e> I have some ACLOCAL stuff and some languages specific stuff in there, too.
17:49:17 * int80_h takes the cheap shot
17:50:33 <rubenz> Igloo: build ghc 6.4.1 using:
17:50:34 <rubenz> ./configure
17:50:34 <rubenz> make
17:50:34 <rubenz> the machine is an iBook 500Mhz G3 with 640Mb RAM, running OS X (10.3.9). I'm using the distribution available at: http://www.haskell.org/ghc/download_ghc_641.html
17:50:53 <CosmicRay> int80_h: you may not know that I maintain the UMN gopher tree ;-)
17:51:13 <Igloo> I'd expect it to finish within around 10 hours, and not spend anywhere near an hour not printing anything
17:51:18 <wagle> CosmicRay: univ of minnesota?
17:51:27 <Igloo> Also, make itself shouldn't use significant amounts of CPU time
17:51:29 <CosmicRay> wagle: that one, though I have no affiliation with umn
17:51:37 <wagle> ah..
17:51:40 <dons> rubenz, you still stuck at the point we talked about 12 hrs ago?
17:51:52 <dons> kill it. something funny is up
17:52:04 <CosmicRay> wagle: I asked them to GPL it a few years back.  they did.
17:52:10 * int-e is confused. /usr/include/pango/pango-layout.h: void     pango_layout_line_ref          (PangoLayoutLine  *line);    /opt/gtk+-dev/include/pango-1.0/pango/pango-layout.h:PangoLayoutLine *pango_layout_line_ref   (PangoLayoutLine *line);  --  strange API change (ok, it is downward compatible on the C level)
17:52:27 <rubenz> dons: yes
17:53:22 <int80_h> this is the last thing I see after unpacking ghc, is this cause for alarm?
17:53:23 <int80_h> x ghc-6.4.1/lib/sparc-sun-solaris2/imports/Graphics/Rendering/OpenGL/GL/PixelRectangles/PixelMap.hi, 33616 bytes, 66 tape blocks
17:53:24 <int80_h> tar: directory checksum error
17:53:29 <int-e> dcoutts: this void return type caused the compile error I got above - in pango 1.8.1, pango_layout_line_ref returned void, not a pointer. :/
17:53:44 <int80_h> checksum error? I got this tarball from the ghc page
17:53:58 <dcoutts> int-e, you're building gtk2hs against gtk-2.8?
17:54:04 <int-e> dcoutts: (and there are probably a few other functions with the same problem - I got more than one error.)
17:54:32 <int-e> dcoutts: I am now. I was building it against 2.6.something earlier when I had the problems. (compile finished with 2.8 now)
17:54:50 <rubenz> dons: alright, I'll control-C the thing... what a let down :(
17:55:10 <dcoutts> int-e, oh because if you're using 2.8 then that depends on pango 1.10, you seemed to be using 1.8.1
17:55:13 <rubenz> I wonder what the problem was
17:55:41 <dcoutts> int-e, it looks like you're not building against a consistent set of C libs + headers
17:56:30 <dcoutts> int-e, you could just build against the system version of gtk you know :-) you need the latest features for something? experimenting with cairo?
17:57:03 <int-e> dcoutts: demos work now, too.
17:57:10 <int-e> dcoutts: I want cairo support.
17:57:13 <dcoutts> int-e, ok
17:57:21 <dcoutts> indeed you should want it :-)
17:57:33 <dcoutts> it's very nice
17:58:25 <dcoutts> int-e, are you planning on using gtk2hs for something in particular?
17:58:33 <int-e> dcoutts: anyway, if done right building against a gtk+ installed in a non standard location works nicely. :)
17:58:46 <dcoutts> int-e, well good to know that
17:58:51 <dcoutts> thanks
18:00:54 <int-e> dcoutts: I'm not planning to use it for anything specific right now. I just want to play around with it a bit.
18:01:20 <dcoutts> try Cale & xerox's prog, it's rather pretty
18:01:50 <dcoutts> @where nymphaea
18:01:51 <lambdabot> http://haskell.galois.com/~paolo/darcs/nymphaea
18:02:02 <dcoutts> oh
18:02:16 <dcoutts> well the website (rather than the darcs repo) is at:
18:02:17 <dcoutts> http://haskell.galois.com/~paolo/nymphaea/
18:03:22 <dcoutts> I particularly like: http://haskell.galois.com/~paolo/nymphaea/porn/musk.png
18:04:32 <int-e> dcoutts: thanks. I've seen screenshots of that before :)
18:04:44 * int80_h curses safari for not supporting gopher
18:10:55 <int80_h> I was not able to find ghc via veronica, odd
18:13:33 <wagle> i found a veronica faq: Last-modified: 1995/01/13.
18:13:58 <int80_h> hmm I used both ghc and the full zipped tar ball filename for the solaris 2.8 binary
18:15:33 <wagle> oh yeah, you know about http://freshmeat.net/ dont you?
18:15:55 <int80_h> will that get me to an ftp server that has ghc binaries on it?
18:16:08 <int80_h> I didn't think offhand that freshmeat would
18:16:32 <wagle> ftp?  thats so last millenium!
18:16:43 <wagle> why does it need to be ftp?
18:16:44 <int80_h> that's the whole point of this exercise
18:16:52 <Spark> retro
18:17:03 <int80_h> because the solaris box that I have an ccount on doesn't have a test based web browser
18:17:14 <int80_h> s/test/text
18:17:45 <wagle> lynx
18:18:10 <int80_h> because the solaris box *does not have* a text based web browser
18:18:35 <int80_h> not "I don't know any text based web browser"
18:18:37 <wagle> i heard you the first time
18:18:52 <int80_h> you did? in that case your response makes no sense ;)
18:19:08 <wagle> think "bootstrap"
18:19:16 <int80_h> I know what the best answer is, but that is out of my hands...arg
18:19:50 <int80_h> there is something funny with this server
18:20:10 <int80_h> and I don't know solaris well enough to know what
18:20:27 <int80_h> but I got a checksum error when trying to untar the solaries binaries
18:20:50 <wagle> use gnu tar, not solaris tar
18:20:59 <int80_h> ah hah!
18:21:05 <int80_h> thanks I'll bet that is it
18:21:10 <int-e> dcoutts: building against the system version failed; it seems it tries to create a binding for cairo even if gdk_cairo_create & co. don't exist.
18:21:43 <int-e> dcoutts: (it did find the installed cairo)
18:21:56 <wagle> sorry, i'm not paying complete attention to this channel
18:22:05 <int80_h> uh oh, if they don'
18:22:13 <int80_h> t have gnu tar here, that's yet another trouble
18:22:57 <int80_h> how can I find version info for tar?
18:23:12 <int-e> int80_h: man tar?
18:23:14 <araujo> asking for a piece of advice, what is the safer/best way to run an external command in haskell?
18:23:20 <int80_h> I see one in /usr/bin and /usr sbin
18:23:38 <wagle> ftp ftp.gnu.org
18:23:41 <int-e> int80_h: on solaris you might have luck in /opt/sfw/bin
18:23:41 <int80_h> I want tar -v but of course that won't work
18:24:03 <wagle> strings /usr/bin/tar
18:24:19 <dcoutts> araujo, it depens on wether you want to communicate with the command, or just run it
18:24:37 <araujo> dcoutts, i just want to run it really.
18:24:47 <dcoutts> araujo, if you just want to run a command and wait for it to sinnish then use system or rawSystem
18:25:05 <dcoutts> oh sorry, wronf name
18:25:08 <araujo> mm.. Ok, i was thinking about runCommand
18:25:16 <int-e> int80_h: oh, or /usr/sfw/bin/gtar :)
18:25:32 <int80_h> hah gtar
18:25:45 <int80_h> waaah
18:25:50 <dcoutts> oh, not the wrong command
18:25:53 <dcoutts> araujo, System.Cmd
18:26:04 <int80_h> woo hoo it's there
18:26:12 <dcoutts> @inded system
18:26:13 <lambdabot> System.Cmd
18:26:17 <dons> Lemmih, your umask on scannedinavian is wrong, I think.
18:26:17 <araujo> Ok, let's see
18:26:23 <dcoutts> @index rawSystem
18:26:24 <lambdabot> System.Cmd, Distribution.Compat.RawSystem
18:26:41 <dons> Lemmih, we lost group write perms on some files in yiBase
18:27:01 <dons> shapr, ping
18:27:01 <int80_h> This just in :int-e roolz
18:27:15 <wagle> dons: he went to bed
18:27:21 <dons> doh
18:27:28 <dcoutts> dons, yes I see:
18:27:29 <dcoutts> -rw-r--r--  1 lemmih hide  293 Sep 20 05:06 hide-yi.cabal
18:27:59 <int-e> int80_h: Solaris seems to be an excercise in hiding useful software at obscure places :/
18:28:11 <dons> 4 -rw-r--r--  1 lemmih hide 2626 Sep 20 05:25 Yi.hs
18:28:32 <araujo> Ok, thanks dcoutts ,
18:28:35 <sylvan> dons, there you are! I can't get yi to build.
18:28:37 <araujo> i think that'll make it
18:28:53 <dons> sylvan, pull the latest yi from scannedinavian and try again, please.
18:29:09 <dons> i think i fixed your problem
18:29:31 <sylvan> seems to work!
18:29:36 <dcoutts> yay!
18:29:42 <dcoutts> nice work dons
18:29:46 <dons> it was just a ghc issue
18:30:00 <dons> it didn't understand: import Map (Map) ; import qualified Map as M, with -Werror
18:30:08 <araujo> dcoutts, now you mention it, which functions would allow me to interact with the command? , something like popen()
18:30:15 <dons> i.e. bogus (fatal) warning
18:30:26 <dcoutts> araujo, check out System.Process
18:30:46 <araujo> Ok, i will
18:30:55 <dcoutts> dons, so what is the model/view split in Yi, what's the api to make a new buffer and new views for that buffer?
18:30:59 <dons> ok, I have a nice patch for courier fonts in hIDE, but it will have to wait till I can commit into yiBase
18:31:06 <dcoutts> dons, right
18:31:15 <dons> a view is called a 'window' in yi, following vi
18:31:20 <dcoutts> ok
18:31:23 <int80_h> having trouble installing ghc binaries on solaris 2.8...I  have config.log. Will someone help me out?
18:31:26 <dons> you create a new window, and associate it with a buffer
18:31:35 <dons> the editor keeps track of the visible windows
18:31:47 <dons> it's up to the ui to render them however it wants
18:31:55 <dons> in our case, this should be easy
18:32:01 <Lemmih> dons: How do I fix it?
18:32:07 <dcoutts> Lemmih, ah there you are
18:32:11 <int80_h> um, I mean 2.9
18:32:14 <sylvan> dons, it doesn't seem like it's installing itself properly, though.. or maybe you're not supposed to be able to run it by simply typing "yi"?
18:32:16 <dons> chmod -R g+rw yiBase ?
18:32:17 <dcoutts> Lemmih, for starters chmod g+w -R
18:32:24 <sylvan> the package gets installed though
18:32:31 <dcoutts> Lemmih, and then fix your umask
18:32:43 <dcoutts> Lemmih, it's in your ~/.bash_profile
18:32:44 <dons> sylvan, you should be able to just type 'yi'. perhaps rehash your shell?
18:33:06 <dcoutts> Lemmih,  (asuming you use bash as your shell)
18:33:23 <sylvan> hmm... bash, yes... rehash no =)
18:33:26 <sylvan> command not found
18:33:37 <dcoutts> Lemmih, you want it to be: umask 002
18:33:39 <sylvan> which is strange, I've used it before...
18:33:43 <sylvan> at least I think I have =)
18:33:51 <dons> $HOME/bin/yi ?
18:33:53 <int80_h> checking for C compiler default output file name... configure: error: C compiler cannot create executables
18:34:40 <int-e> dcoutts: nymphea works :) (took a while because I had to install libglade first)
18:35:03 <dcoutts> int-e, right
18:35:17 <sylvan> dons, it just doesn't set execute permissions on /usr/local/bin/yi
18:35:34 <dons> maybe you have an old cabal
18:35:37 <dcoutts> sylvan, that might be a Cabal bug
18:35:49 <sylvan> I got the latest cabal just a while ago
18:36:04 <wagle> int80_h: you know about wget?
18:36:18 <Lemmih> dcoutts: And then what?
18:36:25 <dcoutts> int-e, hmm perhaps I should make it warn you after configure if it's not going to build libglade, since it's used by so many progs these days
18:36:27 <wagle> it might be a useful bootstrapping tool
18:36:52 <dcoutts> Lemmih, you need to chmod g+w -R yiBase
18:37:00 <int80_h> wagle, how would I install wget, does it have an ftp site?
18:37:21 <int80_h> besides, I've got haskell binaries on the sewrver, I now need to get it to install now
18:37:29 <int-e> dcoutts: it builds, just without glade support
18:37:44 <int-e> dcoutts: and nymphea requires glade.
18:37:47 <dcoutts> Lemmih, so ssh into the server, go to the darcs repo and: chmod g+w -R hIDE/plugins/yiBase
18:38:10 <sylvan> yay, now hIDE works too! (except for not getting execute permissions initially)
18:38:40 <dcoutts> int-e, yes it builds without libglade fine, my point is that this is normally a mistake on the part of the user, they almost crtainly want libglade but are just missing the libglade-dev package or something
18:38:52 <wagle> int80_h: wget renders urls to files, lynx to text/curses, ...
18:39:11 <sylvan> but it sure does crash a lot =(
18:39:13 <dcoutts> int-e, so I might add a friendly warning that they probably want libglade
18:39:25 <int-e> dcoutts: right. (I easily forget about people who have to install dev packages)
18:39:26 <int80_h> wagle, I know what it does
18:39:29 <dcoutts> sylvan, hIDE crashes a lot?
18:39:35 <int80_h> getting it with limited tools is the issue
18:39:40 <sethk> dcoutts, pango, glib, atk, glade I think for gtk2hs.  sound correct?
18:39:42 <sylvan> yeah.. I pressed "End" in the editor and it said "aborted" and crashed
18:39:55 <int80_h> but I've moved on to a more exasperating problem
18:39:56 <wagle> int80_h: you check out ftp'ing from ftp.gnu.org?
18:40:01 <sylvan> but seemingly at random, because it's not reproducible =/
18:40:09 <int80_h> bless you, wget is surely there
18:40:17 <sylvan> there it goes again...
18:40:24 <sylvan> hIDE: cairo-ft-font.c:561: _cairo_ft_unscaled_font_unlock_face: Assertion `unscaled->lock > 0' failed.
18:40:24 <sylvan> hIDE: cairo-ft-font.c:561: _cairo_ft_unscaled_font_unlock_face: Assertion `unscaled->lock > 0' failed.
18:40:24 <sylvan> Aborted
18:40:31 <dcoutts> sethk, yes, gtk+ (and it's deps) and glade is a reasonable minimum
18:40:35 <dons> hIDEe uses cairo?
18:40:42 <dcoutts> nope
18:41:05 <sylvan> Doesn't Gnome use it now for all sorts of widget rendering?
18:41:12 <dcoutts> sylvan, hmm I think your gtk is messed up
18:41:14 <int80_h> where can I paste my error log for analysis?
18:41:23 <sylvan> gtk or gtk2hs?
18:41:24 <int80_h> maybe then someone might look at it
18:41:40 <dcoutts> sylvan, yes gtk+-2.8 uses cairo, gtk2hs does not use it itself
18:41:48 * int80_h peeks in #lisp for paste site
18:41:53 <Lemmih> dcoutts: "chmod: changing permissions of `plugins/yiBase': Operation not permitted"
18:42:10 <sylvan> but if I draw a button with gtk2hs will it use cairo? (I have no idea what I'm talking about =))
18:42:18 <dons> Lemmih, perms look good now
18:42:26 <dcoutts> Lemmih, ok, well do everything inside plugins/yiBase
18:42:47 <dons> almost, /home/hide/public_html/hIDE/_darcs/current/plugins/yiBase/src/Hide: permission denied (Permission denied)
18:43:13 <sylvan> "error: upScreenE"
18:43:13 <sylvan> Gtk-ERROR **: file gtktextlayout.c: line 1117 (get_style): assertion failed: (layout->one_style_cache == NULL)
18:43:17 <dcoutts> Lemmih, the dirs are still owned my by but many of the files are now owned by you and are not group writable
18:43:18 <Lemmih> dons: Better now?
18:43:19 <sylvan> strange
18:43:29 <dons> sylvan, chill out, much of the code is unimplemented :)
18:43:40 <dons> e.g. upScreenE
18:43:55 <sylvan> okay, it shouldn't hang because of it?
18:43:55 <dcoutts> Lemmih, yep looks ok now
18:43:59 <dons> also, 4 -rw-r--r--  1 duncan hide  884 Sep 20 18:36 build.sh
18:44:06 <dcoutts> dons, oh ok
18:44:17 <lisppaste2> int80_h pasted "ghc binaries configure log" at http://paste.lisp.org/display/11876
18:44:20 <dcoutts> hmm maybe that means my umask is messed up
18:44:54 <dons> hmm. I think we should all do a chmod g+w -R in hIDE/
18:45:01 <dons> so it also gets the perms set in the _darcs/* stuff
18:45:41 <dcoutts> but I created the build.sh recently, via a darcs push, *after* I'd set my umask
18:45:45 <dons> hmm
18:46:01 <dons> maybe darcs isn't using .bash_profile
18:46:06 <dcoutts> which bash thingy is read for non login shells?
18:46:10 <sethk> .bashrc
18:46:11 <dons> I know with zsh it has to be in .zshenv
18:46:35 <sylvan> if I run hIDE without yi it doesn't crash..
18:46:41 <sethk> .bashrc is the non-login init file for bash (.zshrc for zsh).  I usually call .bash_profile from .bashrc (or v.v. if I'm in the mood)
18:46:49 <dcoutts> # ~/.bash_profile: executed by bash(1) for login shells.
18:46:53 <dcoutts> ah hah
18:47:08 <dcoutts> so we need to set our umask in ~/.bashrc
18:47:42 <sethk> dcoutts, or call .bash_profile from .bashrc, so the next time this doesn't bite you.  :)
18:47:49 <dcoutts> yep, ta
18:48:16 <dons> rather than the other way around, which is the default
18:48:41 <dcoutts> yes I just noticed that, I'l just stick umask 002 in my ~/.bashrc
18:50:16 <dons> ok, and can you chmod the repo dcoutts?
18:50:25 <dcoutts> yep, just doing that
18:50:34 <sethk> dcoutts, on the subject of do, I have a question.  within a do, once I create a variable (such as where you did window <- windowNew), then the variable is in scope forever?  Well, for the rest of the function, in this case main?
18:51:05 <dcoutts> sethk, yes, for the rest of the 'do'
18:51:41 <sethk> dcoutts, is the "do" delimited by indentation like any other delimited construct?
18:51:50 <dcoutts> yes
18:51:58 <dons> ok, good. courier font patch finally pushed :)
18:52:05 <dcoutts> dons, yay
18:52:23 <sethk> dcoutts, now, when I say:     windowNew >>= \window ->     I also have the name "window" visible until the end of whatever scope I'm in?
18:52:31 <dcoutts> yep
18:53:06 <sethk> dcoutts, thanks.
18:53:44 <dcoutts> sethk, you can read about the simple syntactic transformation between 'do' code and ">>=" code in the Haskell report (and elsewhere)
18:54:18 <sethk> dcoutts, thanks, I'll check that out.  Will it tell me also about nesting?
18:54:27 <dcoutts> not sure
18:54:51 <sethk> dcoutts, ok, I'll look
18:55:20 <sethk> dcoutts, the haskell report is not really written for people learning the language.  I'm sure it is a good reference but it is hard to deal with when you don't understand all the constructs yet
18:56:10 <sethk> dcoutts, so it isn't just laziness if new people don't read the haskell report end to end.  :)
18:56:20 <dcoutts> sethk, yes, there's proably an explanation elsewhere
18:56:40 <dcoutts> dons, you need to chmod g+w some files in _darcs/current
18:57:57 <dons> doh. ok
18:59:40 <sethk> dcoutts, I know, I was just saying why I may be asking questions about things that are covered in the report
19:00:02 <dcoutts> sethk, sure, I've never read the report through either
19:00:09 <dons> Lemmih, also chmod -R g+rw in public_html/yi
19:02:40 <Lemmih> dons: Done.
19:03:43 <dons> ok, I think both repos are now clean
19:03:53 <dons> find . -user foo is useful :)0
19:04:09 <int-e> dcoutts: my own nymphea screenshot: http://www.inf.tu-dresden.de/~bf3/nymph.png ;)
19:04:25 <dcoutts> int-e, nice!
19:11:51 <sethk> int-e, very slick
19:11:54 <Lemmih> dons: Do you think it's possible to add symbols to 'symhash'?
19:25:01 * int-e is impressed at how so little code can do so much.
19:25:22 <dcoutts> that's a really nice thing about L-Systems
19:25:44 <dcoutts> and the cairo api being quite concise
19:26:18 <int-e> dcoutts: I mean the Haskell code. I should know, but it's still impressive to see :) (ok, having nice libraries helps a lot, too)
19:37:28 <Cale> int-e: nice :)
19:38:30 <Cale> It's almost like cairo was designed for drawing turtle graphics, it even has a stack :)
19:40:00 <int-e> Cale: Well, hierarchical image structures come in many shapes.
19:40:33 <Cale> yeah, it's true
19:41:21 <Cale> hmm... my latest patches aren't in the darcs repo yet
19:41:39 <dons> Lemmih, if we add something to Linker.c, then yes
19:41:49 <dons> but not with the interface as it is.
19:42:02 <dons> which means we may as well just add the symbols to the normal list of syms
19:42:03 <Cale> If you have the latest darcs version of gtk2hs, you can try http://vx.hn.org/autoshare/nymphaea.tar.bz2
19:46:35 <int-e> Cale: nice, you implemented a backbuffer. (there's one drawback - one can't watch the image being drawn anymore. but fast redraws when there are no changes are essential.
19:47:04 <Cale> yeah - it's also necessary to do the animation :)
19:47:12 <Cale> (of the pin widget)
19:47:19 <Cale> click and drag on the image
19:47:49 <magnus--> can one pattern match out the numerator and denominator of a ratio?
19:48:06 <magnus--> pattern matching on (n % d) doesn't seem to work
19:48:20 <magnus--> s/on/using
19:48:24 <dons> good question
19:48:40 <Cale> I think that % is a smart constructor
19:48:53 <Cale> (so no)
19:48:54 <dons> :% ?
19:49:20 <dons> @type numerator
19:49:20 <magnus--> :% Data constructor not in scope
19:49:21 <lambdabot> bzzt
19:49:27 <dons> numerator:: (Integral a) => Ratio a -> a
19:49:29 <int-e> it's not exported :/
19:49:33 <dons> denominator :: (Integral a) => Ratio a -> a
19:49:34 <Cale> yeah :% isn't exported
19:49:35 <int-e> at least as far as I know
19:49:53 <magnus--> oh well, I'll just use a let or while
19:50:07 <dons> @type (GHC.Real.:%)
19:50:08 <Cale> use the numerator and denominator functions to extract those
19:50:08 <lambdabot> forall a. (Integral a) => a -> a -> GHC.Real.Ratio a
19:50:13 <dons> :p
19:50:17 <Cale> and % to put them back
19:50:27 * int-e discovers the 'pin'.
19:50:40 <magnus--> Cale: yup, i will do that.. that's what I did before but I thought pattern matching would make it a lot more concise
19:51:05 <Cale> magnus--: the issue is things like 2 :% 4
19:51:47 <magnus--> Ahhh
19:51:52 <magnus--> that makes sense
19:52:01 <dons> GHC.Real> case 42 % 7 of x :% _ -> x
19:52:01 <dons> 6
19:52:14 <dons> oh, kinda weird. oh well
19:52:27 <dons> GHC.Real> case 7 % 3 of x :% _ -> x
19:52:27 <dons> 7
19:52:43 <dons> but this is  *not the recommended way*
19:52:58 <dcoutts> it's not wierd, it always divides by the gcd
19:53:05 <dons> ah, ok.
19:53:14 <dons> hence we have a gcd primop..
19:53:26 <Cale> x % y = reduce (x * signum y) (abs y)
19:53:28 <dcoutts> oh is it? heh
19:53:50 <Cale> reduce x y = (x `quot` d) :% (y `quot` d)
19:53:50 <Cale>  where d = gcd x y
19:55:18 <Cale> The Ratio library is actually a pretty good example of how to do that sort of thing :)
19:57:51 <int-e> @type quot
19:57:53 <lambdabot> forall a. (Integral a) => a -> a -> a
19:58:08 <int-e> @type div
19:58:09 <lambdabot> forall a. (Integral a) => a -> a -> a
20:01:10 <int-e> ah! div truncates towards negative infinity, quot might not.
20:20:16 <int-e> Cale how do you like this one: http://www.inf.tu-dresden.de/~bf3/nymph2.png ?
20:20:35 <dcoutts> nice
20:20:39 <Cale> Nice :)
20:21:01 <Cale> http://vx.hn.org/autoshare/Screenshot-Snowflake-Random.png
20:21:33 <Cale> (that was on a slightly older version)
20:21:48 <int-e> heh I need more precision for the angle :)
20:22:11 <Cale> :)
20:22:30 <Cale> Perhaps we should use rational angles.
20:22:35 <dcoutts> int-e, just edit the glade file to allow more decimal points
20:23:07 <dcoutts> "glade-2" is what the program is usually called
20:24:08 <Cale> http://vx.hn.org/autoshare/lace.png and http://vx.hn.org/autoshare/lace-small.png :)
20:25:58 <int-e> dcoutts: that works.
20:31:04 <int-e> http://www.inf.tu-dresden.de/~bf3/nymph3.png <-- pretty much the same but with an angle of 71.998 instead of 72
20:31:32 <dcoutts> interestig
20:31:49 <neadjneki> is there a win32 version of this nymphaea? i'd try it out.. :)
20:32:40 <dcoutts> neadjneki, I don't think the Gtk-2.8 installer is available yet
20:33:15 <int-e> Cale: neat
20:33:41 <dcoutts> neadjneki, we'll announce on the gtk2hs web page when you can expect to use this new gtk+2.8/cairo stuff on windows
20:34:50 <neadjneki> cool
21:37:09 <sethk> man 6.4.1 takes a looooong time to build
21:37:19 * ptolomy really wishes the Language Shootout thing had remained just a repository of idiomatic implementations of simple similar example programs in different languages instead of being turned into micro-benchmark/LOC language-war by the mouth-breathing masses.
21:38:33 <sethk> ptolomy, you can still treat it that way, no?
21:39:11 <sethk> what does LOC mean, by the way?
21:39:59 <Pseudonym> Lines of code.
21:40:10 <sethk> ah, ok
21:40:16 <sethk> not terribly meaningful
21:40:27 <sethk> the least LOC is rarely the best code
21:40:46 <sethk> at least from the readability perspective which I think is important
21:41:56 <Pseudonym> As my supervisor used to say, if you get paid by lines of code, think about how you'd initialise a 10,000 element array.
21:43:06 <dons> hehe
21:51:29 <lament> int
21:51:31 <lament> x
21:51:33 <lament> =
21:51:33 <ibid> lines of code has some uses, but it's misused too often
21:51:33 <lament> 1
21:51:34 <lament> ;
21:51:41 <lament> no need for 10,000 elements :)
21:51:48 <ibid> lament: what if it's logical lines of code?
21:52:01 <ptolomy> Function points is another measure.
21:52:06 <ptolomy> but god knows how you arrive at that..
21:52:07 <lament> ibid: isn't telling those apart pretty non-trivial?
21:52:25 <ibid> lament: ?
21:52:35 <lament> depending on the language, i guess
21:52:46 <lament> in C you can count the braces and the semicolons
21:52:51 <ibid> ah, sorry, misread
21:52:54 <lament> what do you do in lisp?
21:52:58 <ibid> of course it's language-dependent
21:54:00 <ibid> i'd define "logical source lines of code" as "the number of physical lines of code after all comments have been removed and the code has been reformatted to conform to some standard format" (i myself pipe C code through indent before counting lines)
21:54:40 <ptolomy> Just because an IFPUG Certified Function Point Specialist. Then, you can charge to count lines of code.
21:55:02 <ibid> ptolomy: EPARSE? (on the first sentence)
21:55:34 <lament> become?
21:55:40 <ptolomy> become.
21:55:41 <ptolomy> right.
21:56:24 <ibid> ah
21:56:54 <ibid> function point specialists count function points, not lines of code ;)
22:23:02 <adept> morning
22:32:19 <JohnMeacham> howdy
23:07:52 <musasabi> morning
23:10:37 <gour> morning all
23:27:48 <ski> morning #haskell
23:28:20 * ski reads logs on comonads ... :D
23:29:26 <ibid> that reminds me of the legendary discussion on this channel that mentions conothing
23:38:10 <ski> ibid, when ?
23:38:22 <ibid> long time ago
23:38:33 <ski> not 2005.03.21 anyway
23:39:04 <ski> (only direct hit on the clog)
23:39:52 <ibid> url?
23:40:15 * gour is away: short travel
23:41:37 <ski> http://tunes.org/~nef/logs/haskell/05.03.21
23:41:53 <ski> 05:07:02 * ibid still laughs about the old discussion on this channel that ended  with 'what's a conothing?'
23:41:58 <ski> :)
23:42:13 <ibid> heh
23:42:49 <JohnMeacham> anyone know when 6.4.1 rpms are going to hit haskell/fedora?
23:51:37 <ibid> found it
23:51:40 <ibid> it's in the 2003 logs
23:52:29 <ibid> 09:38:27 * Riastradh whacks hdaume with a large monad.
23:52:29 <ibid> 09:38:59 * Cale fires an arrow at hdaume. :)
23:52:29 <ibid> 09:39:15 * Riastradh stabs hdaume unsafely with a small comonad.
23:52:29 <ibid> 09:39:51 * hdaume executes s/arrow|monad/nothing/g
23:52:29 <ibid> 09:40:08 <hdaume> hrm...what is a conothing?
23:52:31 <ibid> 09:40:16 <Riastradh> Everything.
23:52:34 <ibid> 09:40:33 <hdaume> that's somewhat ill defined :)
23:52:36 <ibid> 09:40:43 <Cale> * Riastradh stabs hdaume unsafely with a small everything.
23:52:39 <ibid> etc
23:53:02 <Cale> heh
23:53:59 <Cale> a nothing is probably an initial object which would make a conothing a terminal object.
23:55:22 <ibid> 2003-08-27, precisely
23:55:31 <ibid> no idea what timezone those times are in
23:56:13 <Pseudonym> I would have thought that a nothing is what you have _before_ an initial object.
23:56:26 <Cale> hehe
23:57:10 <Pseudonym> And, dually, after a terminal object.
23:57:22 <dons> anyone know how to change the cursor style in a TextView?
23:57:22 <ibid> i think a conothing is actually a universe, not "everything"
23:57:25 <dons> a GTK.*
23:57:26 <Pseudonym> Unless you believe in life-after-terminal-object.
23:57:31 <ibid> so it's a small universe, but we already knew that
23:58:42 <Pseudonym> Or at least a locally small universe.
23:58:51 <Cale> Well, in the category of sets, if you interpret "nothing" as "the empty set", then that's the unique initial object there. The terminal objects in the category of sets are the singleton sets.
23:58:55 <ski> ibid : danke
23:59:09 <ski> small everythings
23:59:30 <Cale> so I suppose that the dual to "nothing" is "any one thing"
23:59:44 <ski> every one thing ?
23:59:52 <Cale> not all at the same time
