01:47:58 <shapr> jiihaa
01:48:10 <shapr> goood morniiing #haskell!
01:48:42 <shapr> g'day blackdog
01:49:21 <SickJacken> "..
01:49:21 <SickJacken> You are not allowed to post to this mailing list, and your message has
01:49:21 <SickJacken> been automatically rejected..."
01:49:26 <SickJacken> what can i doo about this?
01:49:32 <shapr> Which mailing list?
01:49:39 <SickJacken> i cant post to the ghc-users mailinglist
01:49:58 <shapr> Are you subscribed to the list via the email address you're using to post?
01:50:20 <SickJacken> i first used gmane...and my msg never showed up...never got a mail...so i thought, then i'll just won use anything fancy and mail...and i get this mail back
01:50:30 <SickJacken> i used gmane before....
01:50:38 <SickJacken> but it doesnt work for me anymore
01:51:05 <shapr> For gmane, subscribe to the mailing list under the address you'll use, suspend email delivery via mailman, and then answer the tmda email from gmane for that group, and it should all work.
01:51:46 <shapr> Was that understandable?
01:51:57 <SickJacken> you mean i have to verify my mail etc
01:52:16 <shapr> Yeah, gmane wants a tmda verification for each 'newsgroup'.
01:52:18 <SickJacken> but why does gmane say "You've now posted to gmane.comp.lang.haskell.glasgow.user" then
01:52:33 <SickJacken> cause ive been through that verification stuff already a while ago
01:53:04 <shapr> Sounds like you've verified yourself for gmane.comp.lang.haskell, but the mailing lists used to be "non-subscribers CAN post" and they've been slowly changing as the spam increases.
01:55:03 <SickJacken> when i try to subscribe i get "You are already subscribed."
01:56:46 <SickJacken> shapr, so using the mailman i found out that im already subscribed to ghc-users.....
01:56:54 <SickJacken> so why am my posts being bounced
01:56:59 <shapr> are*
01:57:06 <shapr> Check the bounce address.
01:57:23 * gour is away: shopping
01:57:30 <shapr> Either the address you're using to subscribe and the address bounced are different, or some part or all of your address has been banned.
01:57:41 <shapr> In that case, you should ask JaffaCake, he runs the mailing list stuff.
01:58:18 <shapr> As in, send email to Simon Marlow.
01:58:35 * shapr remembers that not everyone has a detailed mental map from irc nick to real name
02:00:48 <SickJacken> i knew who jaffacake was
02:00:49 <SickJacken> :)
02:00:56 <SickJacken> one of the simons
02:02:00 <shapr> hej ski
02:02:16 <ski> god morgon, shapr
02:02:21 <shapr> hur mÃ¥r du?
02:03:03 <ski> jag mår rätt så bra ..
02:04:12 <shapr> Whoa, japanese
02:04:32 <shapr> emacs does creative listening when it tries to read latin-1 as utf-8.
02:04:33 * ski funderar bla på några logik-programmerings ideer
02:04:42 <ski> ojdå :)
02:05:24 <SickJacken> crap
02:05:26 <SickJacken> rejected again
02:05:29 <SickJacken> screw this
02:05:53 <ski> ?
02:06:03 <shapr> SickJacken: Email simon marlow, it's the way to go. The Haskell community really does want people, I promise you :-)
02:06:30 <ski> @arr
02:06:31 <lambdabot> Drink up, me hearties
02:06:54 * ski wonders why lambdabot doesn't want to talk with him in private
02:06:56 <shapr> @quote
02:06:56 <lambdabot> blackdog says: my variables aren't varying.
02:06:57 <SickJacken> ski, you occasionally visit slayradio too right?
02:07:10 <shapr> ski: topic says
02:07:20 <shapr> try '/msg nickserv set unfiltered on' if lamdabot doesn't respond to you
02:07:21 <ski> SickJacken : i quite often listen to SLAYRadio, yes
02:07:39 * ski <- stupid
02:07:40 <SickJacken> i mailed the owner of rko, and now i have the complete rko mirrored :D
02:07:47 <ski> shapr : vielen dank
02:08:08 <ski> SickJacken : nice
02:08:37 <SickJacken> something like 6.4 gigs :D
02:08:37 <ski> SickJacken : just for local use, or public ?
02:09:34 <shapr> g'day blackdog_
02:10:06 <SickJacken> ski, i really wanted the whole thing so to say.
02:10:16 <SickJacken> im not really doing anything else with it than listen :)
02:10:17 <ski> hehe :)
02:11:07 <z0d> rko?
02:11:09 * ski assumes SickJacken has whole HVSC, too
02:11:22 <ski> z0d : http://remix.kwed.org
02:11:31 <SickJacken> yeah, but sids are less nice. because i have to use this winamp plugin etc
02:11:37 <z0d> ski: thanks
02:11:40 <SickJacken> the remixes are mp3, good quality and kick ass
02:11:50 <ski> z0d : archive of c64 music remixes
02:12:37 <ski> (SickJacken : i hope you know about sidplay)
02:13:10 <SickJacken> sidplay only works if you have a piece of hardware no?
02:13:20 <ski> it emulates
02:13:42 <SickJacken> ow
02:13:47 <earthy> and fairly well
02:13:50 <SickJacken> and does it loop the songs?
02:13:59 <ski> yes
02:14:02 <SickJacken> haha now earthy is a C64 music/remix fan too?
02:14:21 * earthy grew up with Apple II and C64
02:14:33 <SickJacken> :D
02:14:37 <earthy> that's my youth man! :)
02:14:42 <z0d> too bad mplayer cannot linked against libmikmod libsid
02:14:45 <SickJacken> yeah you're actually a fair amount older then me :D
02:15:01 <z0d> *and libsid
02:15:21 <SickJacken> but earthy, do you also know rko then?
02:15:40 <ski> SickJacken : may i inquire of your age ?
02:15:54 <SickJacken> 23
02:16:02 <ski> ok
02:16:13 * ski thinks he's 24
02:16:16 <earthy> rko?
02:16:28 <ski> <ski> z0d : http://remix.kwed.org
02:16:39 <earthy> yeah, hadn't expanded it yet
02:16:42 <earthy> yeah, I'd seen it
02:17:12 <earthy> it's reminiscing time, that stuff
02:17:18 <earthy> so I don't listen to it often
02:17:35 <SickJacken> you dont like to reminisce (or however you write it) ?
02:19:29 <earthy> yeas, but it's distracting :)
02:21:11 <SickJacken> ow from work you mean
02:21:17 <SickJacken> true, i should get back to it as well
02:22:04 <SickJacken> hey earthy, to distract you some more....do you have a spare moment for a question?
02:24:01 <earthy> um, yeah.
02:24:48 <SickJacken> i have a huge space leak (profiling not showing it), and i think it this datatype of mine...."Map String (Map Int (Set String))"
02:24:56 <SickJacken> this datatype stores the analysis for each step
02:25:05 <SickJacken> so in each iteration, this structure is changed a bit
02:25:09 <SickJacken> until analysis is finished
02:25:13 <earthy> whoa. yeah, that sounds like an expensive structure
02:25:44 <SickJacken> the inner map associates a program point with the real analysis value (i.e. a set of variables)
02:26:12 * ski wonders if Map (String,Int) (Set String) would be better
02:26:16 <SickJacken> the outer map, stores this map per context, which is necessary to prevent crossovers
02:27:49 <vegai> SickJacken: you've visited http://remix.kwed.org, I hope?
02:27:59 <SickJacken> yeah vegai
02:28:08 <vegai> oy, they have new layout
02:28:10 <SickJacken> i do have to say...that each inner map is a modification of another
02:29:01 <earthy> sickjacken: you want to look into a datastructure that updates in place
02:29:14 <earthy> methinks you have a *very* high garbage collection workload
02:29:20 <SickJacken> yeah i think so too
02:29:31 <SickJacken> there should be a lot of string sharing going on...but im not sure if it happens
02:29:36 <SickJacken> cause earthy
02:29:54 <SickJacken> the profiling only shows for example 85mb....but in 'top' i see mem usage over 300mb
02:29:56 <earthy> nope, there won't be much string sharing, from what I can see
02:30:08 <earthy> yeah, I read your mail on the mailing list
02:30:15 <SickJacken> ow it came through
02:30:16 <SickJacken> finally
02:30:26 <earthy> there are answers even
02:30:29 <SickJacken> :O
02:30:31 <SickJacken> me looks
02:30:31 <earthy> how big is your binary?
02:30:41 <SickJacken> the profiling version is 6mb
02:30:42 <shapr> My binary is bigger than your binary!
02:30:56 <earthy> and is that top for the profiling or the non-profiling version? :)
02:31:14 <SickJacken> profiling version
02:32:10 <SickJacken> ah a bs reply from robert as always
02:33:17 <SickJacken> how often is gmane updated...because im not seeing my msg....while earthy is telling me there are replies
02:33:29 * boegel w00's
02:35:59 <earthy> http://www.haskell.org//pipermail/glasgow-haskell-users/2005-September/008971.html
02:35:59 <shapr> gmane is update as often as new messages are received, up to a minimum of about five minutes (in my experience).
02:37:52 <SickJacken> the newest msg at gmane is from 6 sep.
02:37:58 <SickJacken> ah thanks for the link earthy
02:41:57 <boegel> yo Itkovian
02:42:24 <Itkovian> lol
02:42:44 <SickJacken> earthy, but coming back to what you said....mutable arrays are a better suggestion then?
02:43:42 <earthy> yeah, I think that'll be a lot easier on memory
02:44:03 <earthy> and there was a thread on their usage recently
02:44:27 <SickJacken> i think the significant amount of memory difference between the profile and what i am seeing in top....means a lot of dead data is out there
02:44:37 <SickJacken> which isnt garbage collected
02:45:53 <earthy> dead *allocation*
02:46:06 <SickJacken> yeah dead allocation
02:46:09 <earthy> remember, the profiling code needs to do  memory allocation as well
02:46:30 <SickJacken> the unprofiled code takes up roughly the same amount earthy
02:46:32 <earthy> and it may well be that you're seeing an exponential allocation strategy at work
02:46:43 <earthy> roughly the same amount?
02:46:54 <earthy> hm, that sounds like a problem in the profiler
02:46:59 <SickJacken> when the outer map gets more elements....my application gets shot down by linux for using ALL memory
02:47:12 <SickJacken> hehe
02:47:18 <boegel> Itkovian: -> pm
02:53:36 <SickJacken> ouch....a LOT of memory is drag
03:01:12 * gour is back.
03:01:33 <dcoutts> hi gour
03:01:38 <gour> hi, duncan
03:01:48 <gour> i'm glad you were not eaten up :-)
03:02:05 <dcoutts> oh, by the sharks :-)
03:02:10 <gour> yes
03:02:18 <dcoutts> no, I say lots of interesting fish though
03:02:22 <dcoutts> say/saw
03:02:24 <gour> did you do some diving
03:02:44 <dcoutts> snorkeling, but deep diving
03:02:48 <ulfdoz> re
03:02:58 <dcoutts> not deep diving I mean
03:03:07 <gour> so, you are fit
03:03:25 <gour> i hope you catched a goot weather
03:03:38 <dcoutts> yeah, the weather was excelent
03:03:51 <dcoutts> nice and warm, and the sea was very warm and clear
03:04:27 <gour> glad to hear it, jul & aug were not the best
03:04:54 <gour> last sunday i jumped shortly to rijeka to take a bath
03:06:03 <Heffalump> where'd you go?
03:06:41 <dcoutts> Cres, an islad off Croatia
03:06:49 <Heffalump> cool
03:07:21 <dcoutts> http://maps.google.co.uk/maps?ll=44.957510,14.405823&spn=0.096358,0.214448&t=k&hl=en
03:07:55 <dcoutts> it quite a nice satelite picture, you can even see the marina with all the boats
03:08:55 <gour> in live it's better ;)
03:09:08 <dcoutts> yeah :-)
03:09:26 <gour> how did you travel from uk?
03:10:08 <dcoutts> flew to Trieste (sp?) then travelled to Rijeka then boat to Cres
03:10:22 <gour> ah, that's fine
03:11:27 <gour> are u 1st time in cro?
03:11:44 <dcoutts> yes
03:14:03 <gour> what about next year?
03:14:18 <dcoutts> India :-)
03:14:36 <gour> during the summer time, err. rainy season?
03:15:03 <dcoutts> late september/october when it's stopped raining and isn't quite so hot
03:15:37 <gour> october/november is the most auspicious time
03:15:54 <gour> i went twice to india to a pilgrimage
03:16:43 <gour> however, last time i went there was '94 :-(
03:19:50 <dcoutts> gour, so doe Tailor preserve change history in the darcs repo?
03:20:18 <dcoutts> ie if I make a cvs commit now, will that get translated into a darcs patch in the darcs repo?
03:20:53 <gour> i hope so
03:20:59 <dcoutts> cool
03:21:12 <gour> you can check mirror repo
03:21:33 <gour> although there was no updates, but i have a daily cron installed
03:21:49 <dcoutts> yes, currently it has one patch, I'll see what happens next time I commit a change in cvs
03:22:09 <gour> gtk2hs is the only project which is tailorized here
03:22:27 <gour> do u have some new code to commit?
03:23:04 <dcoutts> not immediately, but I'm sure I can find some trivial improvement to test with
03:23:24 <gour> fine
03:23:36 <gour> otherwise i'm at the end of 13th chapter
03:23:58 <dcoutts> cool
03:24:06 <dcoutts> how many chapters total?
03:24:28 <gour> 19, 20th is conclusion
03:24:53 <gour> i already read 14th about ADT but want to solve some puzzles from 13th
03:24:59 <dcoutts> right
03:25:09 <gour> 15th is case study
03:25:28 <gour> 16th abstract data types (15th algebraic dt)
03:25:37 <gour> 17th laziness
03:25:48 <gour> 18th i/o
03:26:03 <gour> and 19th time/space behaviour
03:26:31 <dcoutts> sounds like you'll be an expert in no time :-)
03:26:34 <gour> where could i find something more about unification of type expressions?
03:27:02 <dcoutts> you mean about the type inference algorithm itself?
03:27:05 <gour> i.e. is unified e.g. curry (curry id)
03:27:27 <dcoutts> I'm not quite sure what you mean
03:27:34 <gour> but in exercise is e.g. uncurry (uncurry id)
03:27:51 <gaal> hi, i'm getting a "strange object? 35590" error with ghc-6.4 on windows, x86 32 bit.
03:27:58 <gour> i can check in haskell system, but there is also question about the algorithm
03:28:25 <gaal> this is compiling pugs, but it *probably* not a heap size problem because i have -M450m - that oughta be ebough even for pugs :-)
03:29:01 <gaal> any ideas?
03:29:06 <dcoutts> gaal, try one of the 6.4.1 pre-releases see if that helps
03:29:40 <gaal> fwiw an old 6.5 snapshot had a similar error, but hmm, it was an *old* snapshot.
03:29:58 <gaal> dcoutts, thanks, i'll try that.
03:30:12 <dcoutts> gour, you mean how do you get an intuition for how toy work out the type of something like "curry (curry id)"
03:30:33 <gour> yes
03:30:52 <gour> i am doing some paper & pencil work
03:30:56 <dcoutts> ok
03:31:00 <dcoutts> @type curry
03:31:13 <gour> for curry (curry id) i did the following:
03:31:15 <dcoutts> oh, no lambdabot
03:31:28 <gour> it's (curry . curry) id
03:31:43 <gour> and then i unified composition 1st and then unified with id
03:31:52 <ski> curry :: forall a b c. ((a,b) -> c) -> (a -> (b -> c))
03:31:56 <gour> btwm i cannot build lambdabot on amd64
03:32:18 <dcoutts> oh, I'd approach it the other way, finding the type for (curry id), but going the other way will work too
03:32:50 <gour> i found it simpler to find composition 1st
03:32:55 <dcoutts> ok
03:33:03 <ski> id :: forall a. a -> a
03:33:07 <dcoutts> curry id :: a -> b -> (a,b)
03:33:10 <gour> and by induction it's easy to find e.g. curry . curry . curry
03:33:22 <dcoutts> ok fair enough
03:33:36 <gour> that's fine, i am using :t in interpreter
03:33:47 <ski> we first make a specialzation of curry, i.e. curry :: ((a0,b0) -> c0) -> (a0 -> (b0 -> c0))
03:33:59 <ski> and one of id, id :: a1 -> a1
03:34:06 <gour> ok
03:34:20 <shapr> ScannedInAvian.{com,org,net} is offline until I get the server to the new ISP. (hopefully that'll be today, in the afternoon)
03:34:41 <ski> then we have  curry id .. so say curry :: t0 -> t1  and id :: t0   then  curry id :: t1
03:34:44 <shapr> Since most of the users are here on #haskell, just thought you'd like to know.
03:34:54 <ski> now we unify the types
03:34:56 <dcoutts> shapr, ok, ta muchly
03:34:59 <gour> ski: that i tried too, using assoc. rule
03:35:29 <ski> type of curry is  ((a0,b0) -> c0) -> (a0 -> (b0 -> c0))  but also  t0 -> t1  so  t0 -> t1 = ((a0,b0) -> c0) -> (a0 -> (b0 -> c0))
03:35:55 <ski> so  t0 = (a0,b0) -> c0)  and t1 = a0 -> (b0 -> c0)
03:36:19 <ski> also, unification for types of id gives  t0 = a1 -> a1
03:36:41 <ski> this gives (a0,b0) -> c0 = a1 -> a1
03:36:51 <ski> so  a1 = (a0,b0) = c0
03:37:01 <blackdog_> oh, hi shapr. (... hours later)
03:37:39 <blackdog> just ordered a headset, so we can pairhack skype-stylee...
03:37:45 <gour> ski: thank' a lot, i'll put it on the real paper :-)
03:38:08 <ski> so type of curry id  is t1 = a0 -> (b0 -> c0) = a0 -> (b0 -> (a0,b0))
03:38:54 <ski> gour : then you continue in same way with the application of curry to curry id  (new specialzation for curry, solve constraints)
03:39:49 <gour> ski: thanks
03:40:03 <gour> ski: will try and see if i catched all
03:40:50 <ski> (gour : and lastly, if curry (curry id) is bound to a variable, we can generalize it's type over the free typevariables in it (that has no constraints with other typevariables), binding them with forall)
03:41:47 <ski> (gour : e.g if we just had  foo = curry id,  then we can generalize the type of foo from a0 -> (b0 -> (a0,b0)) to forall a b. a -> (b -> (a,b)) )
03:42:18 <ski> (gour : btw, s/catched/caught/)
03:43:47 <dcoutts> gour, and if you're interested in the actual HM type inference algorithm a nice paper is: archive.cs.uu.nl/pub/RUU/CS/techreps/CS-2002/2002-031.pdf
03:44:31 <dcoutts> gour, at least the first 15 pages or so, which describe the traditional HM inference algorithm and a simpler algorithm that uses constraint solving
03:45:00 <gour> ski: what does it mean to generalize from a0 -> ... to forall a b. ... ?
03:45:44 <gour> dcoutts: thanks for the paper, it's on the desktop
03:46:37 <gour> ski: iow, what's the difference between a0 & a in your example?
03:47:31 <gour> ski: or what means "..we first make a specialzation.."
03:47:33 <dcoutts> gour, although that paper does describe how unification actually works, you can google for the "Typing Haskell in Haskell" paper which describes that a bit and has some code for doing unification.
03:47:51 <dcoutts> does describe/does *not* decribe
03:47:55 <dcoutts> oops :-)
03:48:37 <kosmikus> in related news: Bastiaan's thesis is out now ...
03:48:37 <dcoutts> gour, however understading the actual algorithm is not at all necesary for having an intuitve understanding of the type system
03:49:25 <gour> dcoutts: thanks, the paper & code are on the desktop too
03:49:25 <dcoutts> gour, I've been coding in Haskell for years and only just found out how the inference algorithm(s) actually works in detail
03:50:00 <gour> dcoutts: well, i'm not interested in the details, but at least to have some understanding
03:50:26 <gour> dcoutts: i am aware that for certain things, the only cure is time ;)
03:50:34 <ski> gour : "forall a. a -> a" is not the same as "a -> a"
03:50:41 <dcoutts> gour, yeah :-)
03:51:20 <gour> ski: i did not encounter "forall a. a ->" yet in the book
03:51:29 <ski> gour : "forall a. a -> a" is a type that can potentially be instantiated to many specialized types .. Int -> Int, Bool -> Bool, etc
03:51:56 <gour> ski: that's clear
03:52:12 <ski> but, "a -> a" here just means a function type from *some type a that we just don't know yet what it is*
03:53:00 <gour> ski: but what are the constraints for "forall a.a"
03:53:05 <ski> you can't unify "a -> a" with "Int -> Int" simultaneously as you unify e.g. "(a,Bool)" with "(Char,b)"
03:53:22 <ski> (that would result in a = Int = Char  which is false)
03:53:40 <gour> that's ok
03:54:22 <ndm> hmmph, the haskell wiki is giving me 500 Internal Server Errors
03:54:26 <ndm> when i try and update a page
03:54:28 <ski> gour : to actually use a "forall a. ...a..." type, you first invent a new fresh (unused) variable, e.g. a0, and substitute that for 'a' in "...a..." so you get "...a0..."
03:54:32 <shapr> ndm: I'll fix it.
03:54:42 <ndm> shapr, cheers
03:54:50 <gour> ski: i follow..
03:55:02 <ski> gour : this is what enables stuff like   (id 'a',id False)
03:55:08 <shapr> ndm: Should be fixed now.
03:55:19 <ski> if we just had id :: a -> a, then that would be illtyped
03:55:24 <shapr> blackdog: awesome!
03:56:00 <gour> ski: but if i try in e.g. hugs, :t id, i get id :: a -> a
03:56:05 <ski> gour : we make a difference between bound type variables like 'a' in "forall a. a -> a" and free type variables like 'a' in "a -> a"
03:56:43 <ski> gour :: sure, that's a nice shorthand for displaying the type .. but internally, there's an outer 'forall' outside that, binding 'a'
03:57:17 <gour> ski: so, it means that it's not real type for id, but id has forall type
03:57:25 <ski> yes
03:57:32 <ndm> shapr, thanks very much, am impressed at the speed
03:57:40 <gour> ski: acha, now it is more clear..
03:58:04 <shapr> ndm: Well, I broke it yesterday =)
03:58:37 <boegel> shapr: any news on FLM ?
03:59:19 <shapr> I'm starting to send in Flippi patches, so the momentum is getting there.
03:59:20 <gour> ski: is there some docs about 'forall'?
03:59:41 <ski> gour : another example .. "foo :: a -> a;  foo x = bar 'x' where {bar :: b -> a; bar _ = x}"  this is illtyped, why ?   (at least in earlier versions .. possibly a recent ghc extension actually makes this welltyped)
04:01:11 <ski> gour : i remember finding this interesting .. Polymorphic Type Inference, Michael I. Schwartzbach, http://citeseer.ist.psu.edu/14244.html
04:01:14 <gour> ski: well, x cannot be bound to x & 'x' at the same time
04:01:31 <ski> gour : or did you mean more specific docs, for haskell ?
04:01:42 <ski> gour : nope
04:01:49 <ski> 'x' is just a character literal
04:01:55 <gour> ski: for haskell, yes
04:02:47 <ski> the problem is that .. haskell thinks (modulo reservation above) that bar :: forall b a. b -> a  but this is not true !
04:02:58 <gour> ski: well, bar must give different type
04:03:08 <shapr> Hiya ProfTeggy
04:03:10 <ProfTeggy> G'day all.
04:03:12 <ski> bar must always return something of same type as for takes as argument and returns
04:03:24 <ski> so, it's not "forall a"
04:03:24 <shapr> Did you see that one of your papers was referenced on lambda-the-ultimate?
04:03:44 <ProfTeggy> shapr, talking to me?
04:04:00 <ski> gour : proper type of bar is  forall b. b -> a   note, no binding of tyvar 'a' here
04:04:20 <shapr> ProfTeggy: yup
04:04:21 <ski> gour, but if 'a' is free in this type, then it must be bound somewhere
04:04:41 * ProfTeggy goes to have a look.  Thanks for the hint.
04:05:14 <ski> gour : so, we should have "foo (x :: a) = bar 'x' where {bar :: forall b. b -> a; bar _ = x}"
04:05:39 <ski> gour : "foo x :: a = bar 'x' where {...}" would also work
04:05:48 <ski> gour : ok ?
04:06:01 <ProfTeggy> aha
04:06:12 <shapr> ProfTeggy: http://lambda-the-ultimate.org/node/view/953
04:06:17 * boegel is now convinced ProfTeggy is a regular
04:06:21 <gour> ski: why if 'a' is free in the def of b, it must be bound somewhere'
04:06:40 <ProfTeggy> shapr, yes, thanks
04:07:00 <ProfTeggy> boegel, too much honour, really
04:07:25 <boegel> honour ? no, you're getting addictied to this channel, that's all :)
04:07:46 <shapr> The first lambda comes free.
04:07:49 <ProfTeggy> I can control IRC addiction since 1991 :-)
04:07:51 * shapr tokes on a lambda.
04:07:55 <shapr> ProfTeggy: impressive!
04:07:57 <ski> gour : all typevariables must be bound somewhere (either that, or instantiated to other types)
04:08:12 <shapr> I got addicted in 1989 or so, haven't given it up since.
04:08:20 * ProfTeggy bows to shapr
04:08:24 <boegel> ProfTeggy: we'll, you're losing your control then ;)
04:08:38 <ProfTeggy> :-}
04:08:52 <gour> ski: so def of foo constrains type 'a' in bar?
04:09:06 * shapr bows to ProfTeggy 
04:09:10 <ski> gour : in my exampe with giving a type signature for 'bar', 'a' was bound in the pattern in 'foo'
04:09:20 <shapr> Long time addicts, erm, users unite!
04:09:35 <ski> gour : def of 'foo' binds 'a', so 'bar's type signature can use it
04:09:44 <ProfTeggy> oh, yes, Shahbaz Chaudhary, the guy who sent me e-mail a wek ago
04:09:56 <ProfTeggy> (the guy on ltu mentioning the paper)
04:10:11 <ProfTeggy> time to respond, maybe
04:10:15 <gour> ski: now it is clear
04:10:24 <ski> gour : i.e. "foo (x :: a) = ..." or "foo x :: a = ..." or "foo (x :: a) :: a = ..." or "(foo :: a -> a) x = ..." binds 'a'
04:10:49 <gour> ski: the whole expression binds all the type variables...
04:12:01 <ski> gour : but note, there's some new extension in ghc that actually allows the type signature of 'foo' to *sometimes* bring in scope (i.e. bind) type variables not just over the type of 'foo' but also over 'foo's definition (and therefore over 'bar's type signature, in this case)
04:12:26 <gour> ski: oh no..
04:12:46 <ski> gour : with that extension "foo :: forall a. a -> a; foo x = bar 'x' where {bar :: b -> a; bar = x}" would work
04:12:57 <ski> gour : but "foo :: forall a. a -> a; foo x = bar 'x' where {bar :: a -> b; bar = x}" wouldn't
04:13:19 <ski> gour : iirc "foo :: (forall a. a -> a); foo x = bar 'x' where {bar :: b -> a; bar = x}" wouldn't either
04:13:23 <gour> ski: what it is useful for?
04:13:52 <ski> to avoid writing "foo (x :: a)" or friends
04:14:15 <gour> ski: i must admit that you have given me some food for thought :-)
04:14:31 <gour> ski: now i have to go for a launch..
04:14:45 <gour> and later to digest your stuff too
04:14:52 <gour> thanks a lot
04:15:08 <gour> i have a log, so can come back to the whole discussion
04:15:41 <gour> 1st i'll try to solve those type unifying exercises following your path
04:15:42 <ski> gour : see http://www.haskell.org/ghc/docs/latest/html/users_guide/type-extensions.html#scoped-type-variables
04:16:11 <gour> and then let me digest the rest with this 'forall' stuff and finally ghc-exts
04:16:37 <ski> (gour : that paper i linked to could be good to look at, even if it isn't specifically for haskell, also)
04:16:58 <gour> thanks, what do you think, maybe i can save that ghc-exts stuff for later?
04:17:05 <ski> yeah
04:17:27 <ski> simple HM-polymorphism would be easiest, first
04:18:07 <ski> (which that paper talks about)
04:20:15 <gour> what paper you mentioned?
04:20:55 <shapr> It's funny, most channels like to keep an external record of urls pasted, we need an external record of research papers referenced :-)
04:21:32 <gour> ok, i got it
04:22:11 * ski smiles
04:22:26 * gour happily goes to lunch
04:22:36 * gour is away: taking lunch
04:22:59 * ski considers biking to buy breakfast
04:26:36 <xerox> Nomads ?!  :-)
04:26:57 <pejo> shapr, @cite Name:2003:Perfect, now we just need someone to maintain the .bib. :-)
04:27:10 <shapr> heh, yeah!
04:27:13 <dcoutts> xerox, hia, nice screenshots btw
04:27:20 <shapr> xerox: migratory abstractions?
04:27:41 <dcoutts> xerox, I added one to the Gtk2Hs web site front page
04:28:13 <dcoutts> xerox, oh and I resized the screenshots so that they are at their original size rather than slightly shrunk
04:30:09 <boegel> xerox: screenshots ? where!  show me !
04:30:35 <dcoutts> boegel, you've seen them, it's just that I've been on holiday :-)
04:30:59 * boegel feels his excitement fade away
04:35:05 <dcoutts> sorry boegel
04:35:43 <dcoutts> if it make you feel any better, I was quite excited to see all the pretty screenshots when I got back from holiday yesterday :-)
04:36:08 <boegel> dcoutts: np :)
04:36:16 <boegel> dcoutts: I can imagine :)
04:45:29 <tuomov> shit. euro-dmca just passed first vote in .fi (4 years late..)
04:45:44 <cjb> :(
04:46:00 <tuomov> it can still be rejected in a second vote on tuesday, but that seems very unlikely
04:46:55 <tuomov> some older version of it had special provisions for linux dvd players, but now those are gone too
04:47:02 <tuomov> so they become illegal
04:49:32 <Hatchetman> that gmane thing is weird
04:49:41 <Hatchetman> the rss feeds do have the newest messages
04:49:51 <Hatchetman> if i choose the blog view...i dont see them
04:50:09 <Hatchetman> the nntp interface is also weird...because the newest msgs in ghc-users are from 2003
04:50:10 <Hatchetman> :S
05:19:09 <SickJacken> does anyone else use the nntp interface to gmane and can confirm that the newest msg in the ghc-users list is from 2003
05:19:16 <SickJacken> so i know im not doing something wrong here
05:20:41 <shapr> SickJacken: Newsgroups: gmane.comp.lang.haskell.glasgow.user \n Date: Thu, 8 Sep 2005 21:47:05 +0000 (UTC)
05:21:00 <SickJacken> through the nntp interface?
05:21:13 <shapr> yup
05:21:56 <SickJacken> impossible.....i tell thunderbird to get all the msgs....and it only gets them upto and including 2003
05:22:09 * shapr shrugs
05:22:18 <shapr> Tried with a different client?
05:22:57 <SickJacken> and what is your newest msg when using the blog interface?
05:23:02 <SickJacken> mine is 6 sept
05:25:08 <shapr> hej ulfdoz
05:25:12 <shapr> ahem, ulph
05:25:18 * shapr yowdels
05:25:21 <ulfdoz> hi shapr :)
05:25:59 <shapr> greetings ulfdoz, how's code?
05:26:10 <ulph> hey!
05:27:11 <ulfdoz> shapr: currently it rests in peace, and wait's until compiler is ready to accept it. :)
05:27:28 <shapr> Ah, I know that feeling.
05:28:35 <shapr> heya CosmicRay
05:29:01 <CosmicRay> Igloo: could I have your permission to NMU haddock so that it: 1) works with the libgmp in sid, and 2) applies the patch in #316657?
05:29:14 <CosmicRay> currently the haddock issue means that I cannot rebuild my binary packages to work with the libgmp in sid.
05:29:16 * shapr votes yes!
05:29:17 <CosmicRay> shapr: morning
05:29:36 <shapr> I just ripped out a bunch of Haskell stuff that doesn't work with the libgmp in sid.
05:30:13 <CosmicRay> I'm aware of three packages that I maintain that are so affected.
05:30:21 <CosmicRay> there is also alex and haddock.
05:30:42 <SickJacken> shapr, with other client...i get the same
05:31:22 * xerox hugs dcoutts
05:31:22 <shapr> SickJacken: That's whacked.
05:31:26 <xerox> Hey!
05:31:28 * shapr hugs CosmicRay 
05:31:48 <CosmicRay> shapr: do you know of anything else besides alex, haddock, darcs-buildpackage, srcinst, and arch2dargs
05:31:50 * CosmicRay hugs shapr
05:32:09 * CosmicRay hurls lambdas at the python folks as well.
05:32:22 <CosmicRay> "Our lambda is better than yours!"
05:35:12 <boegel> they have lambdas too ?
05:35:32 <CosmicRay> yes
05:35:33 <CosmicRay> but they suck
05:35:37 <boegel> heh :)
05:35:43 <boegel> if you say so :p
05:35:48 <CosmicRay> because not all python calls are expressions, and python lambdas only work on expressions.
05:35:58 <CosmicRay> so you can say lambda x: x + 5
05:36:06 <CosmicRay> which is the python way of xaying (\x -> x + 5)
05:36:11 <CosmicRay> but you can't say lambda x: print x
05:36:28 <shapr> Yeah, python lambdas suck.
05:37:03 <shapr> In a variety of ways.
05:37:48 <CosmicRay> also it is difficult to use them for something that needs more than one line
05:39:00 <dcoutts> xerox, how's stuff?
05:39:16 <SickJacken> for some reason...it refuses to download all the headers even though i tell him too
05:39:18 <SickJacken> -o
05:39:37 <xerox> dcoutts: school started! aww.  :-)  How did it went the vacations?
05:39:56 <dcoutts> xerox, great thanks.
05:40:09 <dcoutts> xerox, so any word from Google?
05:40:35 <dcoutts> xerox, I sent out the release announcement to various mailing lists and to your mentor at google
05:40:36 <xerox> dcoutts: I was talking with evan about the DDJ article, I think it went well.
05:40:52 <xerox> dcoutts: ah there was a spelling error IIRC
05:40:59 <SickJacken> aaaaaaaaaaaaaaah
05:41:03 <dcoutts> xerox, cool.
05:41:12 <dcoutts> xerox, spelling? oh well it's sent now :-)
05:41:14 <xerox> itâs drawing
05:41:22 <dcoutts> oh right, oops
05:41:26 <xerox> ;)
05:42:13 <boegel> xerox: school ? what kind off school ? uni ?
05:42:20 <xerox> boegel: last year before uni
05:42:56 <xerox> Then... it's foggy :-D
05:43:18 <xerox> Though I'd like to go somewhere when they do Haskell! :-D
05:43:22 <xerox> *where
05:44:06 <shapr> me too!
05:44:26 <basti_> yes me too.
05:44:29 <boegel> xerox: oh, I thought you were older :) you're like 17 then ?
05:46:16 <xerox> I'm 20 from a month, I had some troubles in the past :\
05:48:39 <boegel> xerox: family problems or was it your own fault
05:49:01 <boegel> like, being an active member of a gang or something ? :p
05:49:21 <xerox> haha, nothing like that.
05:49:35 <basti_> gangs are called "mafia" in italy.
05:49:40 <xerox> Less lating, much computer.
05:49:50 <xerox> Less latin, more computer.
05:49:52 <boegel> lating ? don't know that word
05:49:56 <boegel> oh, I see :)
05:50:10 <boegel> basti_: I know, I didn't know xerox was in Italy :)
05:51:18 <xerox> Then I repeated and a professor stopped me (drawing..!).
05:51:36 <basti_> .)
05:51:41 <xerox> Changed school, tried 2 years in 1, and they didn't let me have the exam for bureaucracy problems...
05:52:03 <CosmicRay> damn those bureaucracy problems!
05:52:11 <basti_> they just try to make you waste your time
05:52:13 <CosmicRay> universities are good with those.
05:52:27 <basti_> the longer you take, the less time you actually have to work, the more work is left for everyone else
05:52:32 <xerox> The next year I did it again (like britney), and I wanted to change school
05:52:49 <basti_> that make sense when you're a politican
05:52:57 <xerox> ..which hasn't had a 3Â° class, so I would be alone.  And I didn't had the exam again.
05:53:32 <xerox> I'm a bit tired of this school :-)
05:53:51 <boegel> xerox: you should make sure you finish this year, so you can learn real stuff at uni :)
05:54:19 <xerox> It's going pretty well in this school, though, as I said, I'm a bit tired :)
05:58:28 <xerox> So unis that do Haskell are... dcoutts' one, dons' one, earthy's one ?
05:58:58 <basti_> at mine, haskell is used as a teaching tool and some research is going on
05:59:04 <boegel> Itkovian: we have Haskell in our uni, all be it 1 course only
05:59:16 <boegel> Itkovian: heh, just leaving her to be with your wife, right :)
06:00:07 <Itkovian> 'her'? 'here' you mean!!!
06:00:22 <Itkovian> soit, I'm going to clean carrots
06:00:39 * SamB notices that haskell-mode highlights () within strings
06:00:53 <CosmicRay> haskell-mode has lots of bugs.
06:01:22 <CosmicRay> it also has the annoying habit of putting the cursor one place, then when I start to type, the cursor magically jumps elsewhere before text starts being inserted.
06:01:39 <CosmicRay> I should check out the vim support again.
06:01:50 * SamB realizes that he had pasted a double-quote in, and it does not in fact highlight () in strings
06:03:14 <boegel> Itkovian: yeah, here :) sorry
06:03:30 <boegel> funny typo though :P
06:03:43 <SickJacken> shapr, i figured it out...if i ask for ALL the headers....it stops after about 4700 headers (dont know the exist amount)...however, if i ask for the most recent 1000....i DO get the new ones
06:03:48 <SickJacken> weird stuff
06:03:59 <Itkovian> boegel: she may read the logs, eh ;-)
06:04:23 <boegel> Itkovian: omg, does she trust you _that_ much ? ;)
06:04:48 <shapr> SickJacken: yay!
06:05:09 <SickJacken> only bad thing is...in thunderbird i can only choose to retrieve all i think
06:05:25 <shapr> Get a better nntp client :-P
06:06:40 <SickJacken> all three clients i tested had this shortcoming
06:06:53 <SickJacken> only 'agent' offered me the option
06:07:05 <SickJacken> but then again....its obviously a problem with the nntp server
06:07:06 <SickJacken> not the client
06:07:07 <shapr> I use gnus. It does everything.
06:07:23 <SickJacken> im under windows now
06:07:29 <shapr> Your clients could also retrieve the headers in batches.
06:08:35 <boegel> eek, windows
06:08:44 <boegel> you're scaring my mouse
06:08:54 <shapr> Friends don't let friends use Windows.
06:08:58 <shapr> @quote shapr
06:09:13 <shapr> Foo, no lambdabot.
06:09:23 <shapr> <shapr> I encourage my competitors to use Windows.
06:09:25 * boegel summons dons
06:09:42 <SickJacken> if i just retrieve less then the magic nr then its ok :D
06:09:57 <SickJacken> windows is fine for games and such
06:10:00 <SickJacken> excellent even
06:13:12 <boegel> that's just because developers want to earn lots of money, and there not much money in the linux-world game-wise
06:13:27 <shapr> And that's changing too.
06:13:35 <shapr> I've just been playing riotball, it's pretty neat.
06:16:23 <SickJacken> sure you have more stuff coming on linux
06:16:40 <SickJacken> but if you're a realist...linux is far from becoming a gaming platform
06:18:38 <shapr> My first priority is business use. I reboot my computer about once a month, and that's only because I enjoy playing with the latest kernel features. It's a lot harder to use windows for business in my opinion. Maybe that's just because I'm in the programming business.
06:18:53 <shapr> Anyway, we all use what we like.
06:20:24 <shapr> It would be nice if Linux became a game platform, but I'm just fine with the way it works now.
06:21:56 <Lemmih> What's the definition of a gaming platform?
06:23:58 <shapr> I think it means "a whole bunch of developers use it to write games."
06:24:28 <Lemmih> What's the definition of "a whole bunch"?
06:24:41 <poetix> Two half bunches
06:25:00 <boegel> shapr: I've noticed that writing my thesis on linux was a lot easier and more fluent than it was on Windows
06:25:18 * shapr throws a limerick at poetix 
06:25:26 <boegel> I hated the fact that I needed to work on Windows on my desktop, because I didn't have the HD space to install linux
06:25:49 <poetix> There once was a Bishop of Birmingham...
06:26:08 * poetix remembers partitioning his HD and installing linux for the first time
06:26:10 * Lemmih current got 44 games installed and has browsed through more than a hundred.
06:26:23 <Lemmih> *currectly
06:27:04 <poetix> boegel: What Linux tools are you using? LaTex / BibTex etc?
06:27:07 <z0d> boegel: windows takes less space than linux?
06:27:35 <shapr> There was a girl from Nantucket,
06:28:03 <poetix> There once was a Vicar of Trings
06:28:05 <dcoutts> z0d, it takes much less space since it doesn't come with any programs
06:28:12 <poetix> Who talked about God and such things
06:28:16 <poetix> But his real desire
06:28:19 <poetix> Was a boy in the choir
06:28:23 <poetix> With an ass like jelly on springs
06:28:43 <poetix> Would you believe it was a Church of England priest-in-training who told me that one?
06:28:46 <boegel> poetix: yeah, but I'll need to run simulations and such in the near future, so Windows isn't really ideal for that purpose
06:29:02 <boegel> I'm also using quite a lot of The Gimp lately, it rules :)
06:29:11 <z0d> dcoutts: so you still need space if you want to install applications. but that's the same on linux too. at least a bare debian is not too big
06:29:24 <boegel> z0d: I could remove it completly because other people were also using that computer
06:29:35 <dcoutts> z0d, indeed, a bare install is quite small
06:30:04 <boegel> I heard you can make linux fit an a 1.44 floppy ? is that true ?
06:30:10 <poetix> boegel: I found running BlackBox on Linux a real breath of fresh air: small, light and fast - just amazingly responsive
06:30:11 <boegel> without X and the lot off course
06:30:39 <integral> tomsrtbt!
06:30:42 <boegel> poetix: I'm using Gnome, but I might change in the future
06:30:50 <poetix> It makes you realise how clunky Windows really is as a GUI.
06:30:57 <boegel> heh :)
06:31:08 * vegai throws ion3 on top of the stack of Better Desktops
06:31:14 <z0d> boegel: yup, there are those "pocketlinux" stuffs
06:31:42 <poetix> Gnome is pretty sweet now, and has a sweet future ahead - I'm waiting for the Cairo/OpenGL candy to really start happening
06:32:17 <z0d> boegel: aha. so you wanted to have windows and linux at the same time
06:32:20 <dcoutts> poetix, you've seen you can now use cairo/Gtk with Haskell :-)
06:32:21 <shapr> Better Home Directories and Desktops. Sounds like Better Homes and Gardens.
06:32:33 <boegel> z0d: yeah, I already had fedora on my laptop
06:32:35 <poetix> dcoutts: Indeed, I'm one of your early adopters...
06:32:52 <dcoutts> poetix, oh you've tried the new cairo bindings already?
06:32:57 <poetix> Yup.
06:33:00 <dcoutts> cool
06:33:16 <dcoutts> poetix, what for? can we see?
06:33:21 <poetix> Mostly just building the examples, and tweaking them here and there.
06:33:31 <dcoutts> ok :-)
06:33:51 <poetix> *If* I get anywhere with my Haskell wrapper for libobby, I might attempt a GTK client
06:34:09 <poetix> (for gobby, that is)
06:34:13 <dcoutts> that'd be cool, I've tried gobby
06:34:22 <poetix> But that probably won't use the Cairo bindings much
06:34:35 <dcoutts> libobby features in a Haskell IDE would be cool
06:34:55 <poetix> Yes, that's why I'm starting with the libobby code
06:35:01 <dcoutts> right
06:35:03 <poetix> Maybe it could be used in yi
06:35:19 * boegel is in doubt about if he should stay or leave for home
06:35:25 <poetix> The annoying thing is, it's a C++ library, so I have to write a C API for it
06:35:35 * gour is back.
06:35:40 <vivek> yi is a waste of time .....
06:35:43 <dcoutts> poetix, ah yes, hmm
06:35:45 <boegel> someone is offering cake at 16pm, but I don't feel like staying anymore
06:35:46 * vivek goes back into idle mode 
06:36:22 <gour> something happening with Haskell IDE?
06:36:40 <poetix> But I'm making progress - I can create a libobby client buffer, try to log into it, and get an error message from the library in return
06:36:48 * shapr cheers
06:38:33 <poetix> I want to get a running instance of gobby to acknowledge the existence of a Haskell client
06:38:47 <dcoutts> gour, not just yet but we have a vauge plan. Just no developers comitted to it yet.
06:39:25 <dcoutts> gour, see http://haskell.org/hawiki/HaskellIde
06:39:32 <gour> dcoutts, with yi, hs-plugins..
06:39:51 <dcoutts> gour, exactly
06:40:04 <z0d> why is the type of \x y z -> (x,y:z:[]) forall a a1. a -> a1 -> a1 -> (a, [a1]) and not (a, [b]) ?
06:40:18 <dcoutts> gour, you see everyone knows what it should be like, just no-one has started it yet
06:40:24 <gour> dcoutts, is it yi really required?
06:40:30 * shapr agrees with dcoutts 
06:40:46 <gour> dcoutts, or development can be focused on other parts?
06:41:02 <dcoutts> gour, yi will allow editor plugins
06:41:03 <gour> i mean, what's wrong with vim & emacs?
06:41:10 <pejo> dcoutts, you said exactly what I was thinking on ghc-users.
06:41:32 <dcoutts> gour, it would be fine to start with something like GtkSourceView if Yi is not ready yet
06:41:50 <shapr> gour: I could write a book about what's wrong with vim & emacs.
06:41:56 <vivek> yi started out as a replacement emacs ;) not its a replacement vi plus plans to make it do what emacs does ... ;)
06:42:02 <dcoutts> the problem with external editors is that you can't integrate them and extend them easily with an IDE
06:42:29 <gour> have you seen e.g. yzis?
06:42:36 <poetix> GtkSourceView has the advantage of being a widget.
06:42:47 <vivek> emacs lacks threading support ;) but if you ask me i don't miss it anymore... leafnode and fetchmail make it painless ;)
06:42:47 <poetix> Could yi be widgetified?
06:42:49 <dcoutts> eg we want features to allow autocompletion, jump to definition, jump to documentation. These things would have to be done for each external editor
06:43:21 <dcoutts> poetix, you mean a GUI for Yi?
06:43:42 <gour> shapr: what to do instead of them?
06:43:45 <poetix> Yes, I mean a GUI that could be used as a GTK component
06:43:56 <vivek> wxhaskell ?
06:44:14 <dcoutts> My suggestion is that a Haskell IDE based on Gtk would use Yi with it's Gtk GUI frontend
06:44:29 <shapr> gour: Write an editor based on a parser.
06:44:49 <shapr> gour: That would allow many useful features that only exist in expensive commercial editors, and some features that don't exist yet.
06:44:59 <gour> shaper: e.g. ?
06:45:05 <shapr> For example, parse tree macros would be far more useful than text macros.
06:45:16 * poetix nods vigorously
06:45:21 <gour> is it really necessary?
06:45:24 <shapr> Yes it is.
06:45:25 <dcoutts> poetix, it's not necessary to make it a Gtk component as such, so long as we can get a handle on it's window/widget
06:46:03 <shapr> gour: Try using a refactoring browser for a week, then go without :-)
06:46:17 <dcoutts> shapr, I'm not so sure, I think that experimental editor coolness could be developed in parallel with a straightforward traditional style editor
06:46:19 <gour> so we want something like VS Haskell-plugin ?
06:46:27 * poetix hisses
06:46:35 <dcoutts> gour, there is already one of those
06:46:38 <gour> shapr: in which language you code most?
06:46:47 <shapr> dcoutts: The problem I see is that semantic bovinator has been available for emacs, and still isn't used much.
06:46:48 <poetix> Actually, I use VS all the time at work, and like it...
06:46:49 <dcoutts> gour, we want a Free Software IDE
06:46:52 <SickJacken> hey question, when looking at space consumption with 'top' do i need to look at SIZE or RSS or add both?
06:46:53 <gour> dcoutts: which one?
06:47:02 <shapr> gour: Haskell, Python, others in that order.
06:47:38 <shapr> dcoutts: I think that regex-based syntax highlighting is a hack, and should never have survived this long.
06:47:47 <gour> shapr: do you use hare?
06:47:52 * boegel is having trouble to concentrate
06:48:00 <shapr> I've tried it, but I haven't used it much.
06:48:01 <dcoutts> shapr, its advantade is that it's simple and fast
06:48:14 <shapr> Yeah, but sometimes painfully wrong :-/
06:48:19 <gour> shapr: which ref. browser then?
06:48:19 <dcoutts> shapr, but yes, there is certainly room for more sophisitcated stuff
06:48:30 <shapr> gour: The original, the Smalltalk refactoring browser.
06:48:47 <vegai> have you editor-coders checked acme, by the way?
06:48:52 <gour> shapr: ahh, that's it :-)
06:49:01 <dcoutts> shapr, my only concern in developing an IDE is that it not be held up by experimenting with too much cool stuff that it doesn't become usefull quickly
06:49:09 <gour> shapr: once upon a time i had a digitalk's smalltalk :-)
06:49:10 <shapr> In my dream editor, there's something like re-builder in emacs, where you can interactively build a parser in SDF2 format or so, and see how it parses the accompying test buffer.
06:49:23 <shapr> dcoutts: Yeah, you're right about that.
06:49:51 <dcoutts> shapr, if it's developed in a modular manner (with plugins etc) it should be possible to experiment with cool stuff in parallel with basic implementations of various IDE components
06:49:52 <vegai> apparently not. Editor-coders: check acme :-)
06:50:21 <poetix> dcoutts: Like Eclipse, say.
06:50:32 <dcoutts> poetix, right, or like lambdabot
06:50:44 <shapr> dcoutts: Yeah, true. I think we just need to get moving on it. We need a plan!
06:51:12 <dcoutts> poetix, you can develop new plugins and when they're generally agreed to be better than the existing implementation they can be made the default
06:51:24 <poetix> What would be the simplest working example you could hack together quickly?
06:51:35 <shapr> Syntax highlighting is the one thing keeping me from moving into Yi.
06:51:49 <dcoutts> 1. we need a basic shell with the plugin core done
06:51:53 <poetix> Given that the GtkSourceView widget already supports Haskell, it would at least do as a placeholder for the editor
06:52:15 * dcoutts is pleased that he added Haskell support to GtkSourceView
06:52:32 <shapr> So, how to integrate Yi and GtkSourceView?
06:52:32 * poetix is pleased the dcoutts added Haskell support to GtkSourceView
06:52:43 * shapr wants to delete emacs.
06:52:48 <dcoutts> 2. a basic file/module browser
06:53:05 <dcoutts> 3. a basic editor, probably intially based on GtkSourceView
06:53:31 <dcoutts> shapr, you don't, you use GtkTextView directly as a front end for Yi
06:53:54 <dcoutts> GtkSourceView is just a subclass of GtkTextView that uses regexp based highliting
06:54:05 * gour wants to keep using vi-comp. keystrokes
06:54:43 <dcoutts> gour, yeah, Yi does that, and a Gtk front end would want to keep the ability to have configurable sets of keystrokes
06:56:03 <dcoutts> so anyway, something like I outlined above would be useful at a basic level and woul provide a platform for further plugin development in a distributed manner
06:56:40 <poetix> It would be good to be able to hack in libobby support later, through a plugin
06:57:04 <dcoutts> then there are generic services that can be provided to plugins (and implemented as plugins) such as configuration management
06:57:26 <poetix> ...like Eclipse's
06:57:32 <gour> we want darcssupport too?
06:57:39 <dcoutts> gour, of course
06:57:58 <dcoutts> and for building using cabal probably
06:58:11 <poetix> Pluggable source control, like SCC in VS. Use darcs, CVS, Subversion, Perforce, whatever
06:58:36 <gour> HaskellIde wiki stuff sounds good
06:59:13 <gour> anyone build lambdabot/hs-plugins on amd64?
06:59:30 <interferon> why does this code (copied right from school of expression) yield an error?  the code and error are at http://rafb.net/paste/results/ZfsJKt80.html
06:59:32 <gour> s /build/built
06:59:57 <dcoutts> right, so for things where there can sensibly be multiple implementations of a service (eg SCC) then you want a manager component to provide an interface and to mediate between implementations, eg that stops users of an SCC interface from having to link directly to a darcs plugin or a cvs plugin for example
07:00:34 <Lemmih> interferon: SOEGraphics is not Graphics.SOE
07:00:39 <Lemmih> s/not/now/
07:02:12 <interferon> Lemmih: import Graphics.SOE doesn't work
07:02:53 <Lemmih> interferon: Do you have HGL installed?
07:03:41 <interferon> i have hugs and then i just used the -P: option to point to the libraries i extracted from the SOE tarball
07:04:10 <poetix> dcoutts: That means a certain amount of up-front design - specification of interfaces and protocols - all for stuff that won't be there until later, which slows down initial development
07:04:25 <poetix> Plus, the interfaces are almost certain to change later anyway
07:05:31 <poetix> So maybe it's better to start by hard-coding for a particular library, reap the benefits of experience, and then make it pluggable after the fact
07:05:48 <dcoutts> poetix, yeah, that'd be a reasonable approach
07:06:22 <poetix> It's the argument I keep having with myself about YAGNI: what if I *know* I'm gonna need it?
07:06:25 <dcoutts> poetix, just build the mediating interfaces once there are multiple implementation, once you've got someexperience with what the interfaces should be
07:07:07 <poetix> The modified version is: when you need it, it ain't gonna be what you thought you needed
07:07:21 <boegel> integral: your indentation is wrong
07:07:26 <dcoutts> but it means you need to bear in mind that it'll be pluggable later, so the argument the other way is that it's better to make it an interface from the beginning, even it means that the interface chages often initially
07:07:51 <boegel> the three lines under 'do ...' must be aligned with 'w <- openWindow...'
07:08:37 <dcoutts> poetix, if the whole thing is developed in one repo then interface changes can be made fairly easily
07:08:47 <poetix> You could make a darcs plug-in just for a darcs module, and let the interface of that plugin be the interface for the time being, so you dynamically load it even though it's the only module that actually exists so far
07:09:02 <interferon> boegel: thanks, that did the trick.  is there a reason haskell-mode wouldn't let me cycle through any indentations with TAB?  did i indent something else wincorrectly?
07:09:05 <dcoutts> poetix, yep that'd do
07:09:16 <poetix> Then you at least have the idea that it's pluggable built into the system, but you can be pragmatic about interface design
07:09:28 <dcoutts> poetix, right
07:10:12 <boegel> interferon: no idea, sorry :)
07:10:23 <boegel> interferon: is this your first experience with Haskell ?
07:10:25 <interferon> boegel: np, thanks for the tip. :)
07:10:35 <interferon> boegel: first nontrivial experience :)
07:11:40 <boegel> interferon: well, if you have any questions, feel fre to ask them here, there are a lot of experienced people active here (me not one of them)
07:13:14 <boegel> interferon: to see some of the potential of Haskell: http://haskell.org/gtk2hs/gallery/Cairo-demo/Cairo_demo_13
07:13:48 <boegel> that was made using a recent vector library binding, and using L-systems in the code (which was very short, I believe something like 150-200 lines of code)
07:14:39 <interferon> boegel: nice
07:15:06 <boegel> there's lot of other cool stuff on the web too
07:15:17 <boegel> you might want to read some stuff in TMR:
07:15:36 <boegel> interferon: http://haskell.org/tmrwiki
07:15:55 * shapr hugs TMR
07:16:14 <shapr> I'll kick another TMR issue out the door as soon as I get internet at home.
07:16:29 <CosmicRay> woohoo
07:18:31 <poetix> shapr: What have you got for issue 5 articles?
07:18:52 <shapr> Hm, two or three article I think.
07:18:54 <shapr> I could really use more.
07:19:15 <shapr> I'm going to write an introduction to unit testing with HUnit and QuickCheck.
07:19:23 <shapr> Oleg wrote his nifty article.
07:19:30 <shapr> Philippa and Pseudonym might have articles ready by then.
07:19:32 <poetix> yay Oleg. What about?
07:19:46 <shapr> Number parameterized types, I think.
07:19:53 <poetix> I knew it was going to be type hackery
07:19:57 <shapr> Of course.
07:20:20 <boegel> shapr: in the second half of next week, I'll probably be able to finish mine
07:21:01 <boegel> my proposal is due Sept. 15th, and after that I'll a have a little more time probably
07:21:20 <poetix> I'm still feeling my way around FFI and C++ -> C -> Haskell API design, but I would like to write something when I've tackled a few more of the tricky problems
07:22:17 <dcoutts> poetix, do you use any automation for that?
07:22:22 <poetix> C2HS
07:22:36 <CosmicRay> shapr: when are you publishing?
07:22:44 <CosmicRay> shapr: I could get my FSM article to you next week.
07:22:48 <dcoutts> poetix, cool, anything else? like for producing the C API and Haskell binding?
07:23:18 <poetix> Nothing besides a quick sed script to strip out the extern "C" declarations from the C++ header file
07:23:22 <dcoutts> poetix, eg we (partially) generate most of the Gtk2Hs binding modules from a spec of the Gtk+ C API
07:23:28 <dcoutts> poetix, right
07:24:35 <poetix> dcoutts: So you don't write c2hs .chs files manually?
07:25:36 <shapr> CosmicRay: next week sounds good.
07:25:40 <CosmicRay> shapr: super.
07:26:07 <shapr> boegel: Yes, next week is good!
07:26:22 <shapr> poetix: next week? ;-)
07:26:36 <poetix> shapr: Not for this. Maybe some other topic?
07:26:42 <shapr> Sure, if you have time.
07:27:10 <shapr> dcoutts: Hey, want to write a non-research article about a HaskellIDE?
07:27:11 <dcoutts> poetix, we generate the .chs files and then make some manual changes since our code generator isn't perfect and has to work with incomplete information
07:27:25 <dcoutts> shapr, I'd love to but have no time. :-(
07:27:30 <shapr> ah, too bad.
07:27:41 <dcoutts> shapr, besides I've not got anything more than a bunch of untested ideas
07:27:50 <shapr> Best way to test them is...
07:27:56 <dcoutts> I know! :-)
07:28:09 <xerox> I missed many interesting discussion! Too bad :-)
07:28:21 <shapr> I'll write about the HaskellIDE for my IssueFive editorial.
07:28:32 <dcoutts> shapr, I think it just needs that initial spark & vision and it could take off
07:28:41 <gour> what to do to start rolling the ball?
07:28:59 <dcoutts> gour, lear to build Gtk+ GUIs in Haskell :-)
07:29:14 <dcoutts> and learn about the Yi/lambadbot plugable app style
07:29:15 <shapr> Is there a suggested gtk2hs tutorial?
07:29:33 <dcoutts> shapr, that's another thing we're trying to write
07:29:34 <xerox> Fire up glade, check demo/glade/*.hs
07:29:36 <gour> dcoutts, yi/lambadbot is not buildable on amd64
07:29:43 <xerox> :-D
07:29:47 <poetix> shapr: I might write up the polyomino generator code I did a while back. Same recipe as the sudoku solver article: discuss an algorithm and its implementation, with code
07:29:56 <dcoutts> gour, that's a shame, you've bugged dons about it?
07:30:15 <gour> dcoutts: sure, but no news
07:30:32 <dcoutts> gour, ask him here when he wakes up
07:30:46 <shapr> poetix: That would be very nice, I already point people to your conversion to monad from pure code with the Sudoku solver.
07:31:00 <gour> dcoutts: it was some day ago..
07:31:12 <gour> dcoutts: i get: lambdabot: magic number mismatch: old/corrupt interface file?
07:31:22 <gour> dcoutts: upon launching
07:31:50 <dcoutts> shapr, yeah, the best way to learn at the moment is to look at the Gtk2Hs demos, there is at least quite good reference docs.
07:31:56 <gour> dcoutts: he promised to come back
07:32:01 <dcoutts> gour, ok
07:32:46 <mcnster> hello
07:32:55 <shapr> dcoutts: Think you'll have time to write a gtk2hs intro for TMR soon?
07:33:00 <shapr> Greetings mcnster, learning Haskell?
07:33:16 <mcnster> shapr, yup
07:33:18 <dcoutts> shapr, not for at least a month or two sadly
07:33:29 <shapr> dcoutts: Ah too bad.
07:33:54 <dcoutts> shapr, but hopefully in time for Gtk2Hs 1.0 since we really need some introductory docs
07:33:58 <shapr> mcnster: I can give you the #haskell tour later today, sadly I'm busy right now. But do you have any questions? Do you need pointers to introductory documentation?
07:34:19 <shapr> @learn Has a good collection of links.
07:34:27 * shapr wishes for lambdabot to appear.
07:34:29 <sylvan> shapr, The what-now-tour?
07:34:39 <gour> dcoutts: what needs to be done for 1.0?
07:34:39 <shapr> http://www.haskell.org/learning.html
07:34:49 <shapr> sylvan: Yeah, I'm the tour guide for #haskell.
07:34:52 <dcoutts> gour, an introductory tutorial! :-)
07:35:02 <gour> dcoutts: axel says the next is 0.9.10 :-)
07:35:05 <sylvan> shapr, I never got a tour =/
07:35:12 <sylvan> But what's there to see?
07:35:12 <dcoutts> gour, yes that's right
07:35:14 <shapr> sylvan: You already knew Haskell when you arrived.
07:35:20 <sylvan> ah, you have a point
07:35:30 <gour> dcoutts, then better to go back to my 'homework' (13th ch.)
07:35:32 <mcnster> shapr, thanks.  i've read h98 and grok most of the obvious stuff... i was hopeing to find a torrent or ptr to one of the published books on haskell
07:35:35 <shapr> sylvan: Tour sites are lambdabot, Haskell Wiki, learning page, channel logs, and related irc channels.
07:35:49 <dcoutts> gour, I'd like to add OpenGL, but there's also some tree/list view improvements we'd like to make
07:35:51 <sylvan> check
07:36:02 <shapr> mcnster: Hal Daume's "Yet Another Haskell Tutorial" is worth reading.
07:36:13 <dcoutts> gour, and some darker corners of the Gtk+ API that we could do with binding
07:36:23 <sylvan> mcnster, I like Haskell School of Expression and The Craft of Functional Programming
07:36:26 <shapr> mcnster: If you have subject specific questions, ask here. Some subjects will result in a bunch of research paper titles.
07:36:29 <mcnster> shapr, i remember that one
07:36:30 <gour> dcoutts, so nothing big (besides doc) ?
07:36:39 <xerox> @wiki HaskellDemo
07:36:42 <xerox> Is also a nice reading!
07:36:57 <dcoutts> gour, 0.9.10 will contain cairo and Gtk+ 2.8, which is quite big :-)
07:37:33 <gour> dcoutts, but that's already done
07:37:33 <dcoutts> gour, no I guess nothing really big left, there's plenty to do post-1.0 however
07:37:37 <mcnster> for the first week i only read research papers and when i sat back in my chair the ceiling fan turned into the front of a DC-3
07:37:46 <mcnster> chop chop chop
07:37:58 <gour> dcoutts, and it would be great to have hIDE...
07:38:12 <dcoutts> gour, indeed it'd be a great test bed and a good advert
07:38:47 <gour> dcoutts, true...let's hope haskell community get get together for that one
07:38:48 <shapr> mcnster: It's standard practice here to add CPU coolers or at least thermocouples to your beanie.
07:39:09 <gour> dcoutts, otherwise i'll stay with vim, do not like eclipse
07:39:19 <mcnster> shapr, i've never encountered a language as... intricate
07:39:22 * shapr looks for Pugs' "Powered by PhD" logo.
07:39:26 <gour> dcoutts, i.e. java stuff
07:39:27 <dcoutts> gour, yeah, it just needs starting I think, unfortunatly I am pretty short of time
07:39:44 <shapr> mcnster: Oh the language is really simple, it's just a thin layer on top of the lambda calculus, but the ideas are amazing!
07:39:48 <sylvan> mcnster, and by intricate you mean "good"? =)
07:39:58 <gour> dcoutts: i'm short of skills (too)
07:40:30 <shapr> gour: Best way to get skills is by trying to have them :-)
07:40:51 <mcnster> sylvan, oh definitely good.  my gf glanced at some syntax-highlighted haskell code and said "pretty".  so true
07:41:00 <gour> shapr: that's what i (try to) do
07:41:18 <dcoutts> gour, I bet you could get stuck into some project since your quite far through your Haskell tutorial book
07:41:20 * boegel leaves for home
07:41:58 <gour> dcoutts, i have a gui project on my mind - full gui apps
07:42:10 <dcoutts> gour, cool
07:42:14 <poetix> gour: Have you build gtk2hs yet?
07:42:24 <poetix> s/build/built/
07:42:38 <gour> dcoutts, or you think about some other project
07:42:47 <dcoutts> poetix, gour builds gtk2hs all the time and tells me when I've broken it on amd64 :-)
07:42:55 <gour> :-)
07:43:12 <dcoutts> gour, you could might be able to help with the gtk2hs code generator, it needs some work
07:43:21 <poetix> Cool. Um, what sort of thing breaks on amd64?
07:43:30 <gour> i fell guilty by only pushing dcoutts
07:43:33 <CosmicRay> @seen igloo
07:43:42 <CosmicRay> !seen igloo
07:43:45 <shapr> @seen lambdabot
07:43:46 <dcoutts> poetix, it's much better than it used to be, mostly ghc bugs
07:43:48 * shapr sniffles
07:43:48 <gour> dcoutts: you mean i know enough?
07:43:52 <CosmicRay> crap, lambdabot is gone!
07:43:57 <dcoutts> gour, probably
07:44:15 <CosmicRay> shapr: happy and haddock both build-depend on "ghc6 | ghc5" ;-)
07:44:21 <gour> dcoutts, who will clean the mess after me?
07:44:31 <poetix> Chacun a sa merde
07:44:39 <poetix> (everyone has to look after their own mess)
07:45:03 <dcoutts> gour, I'm not saying you will necessarily understand the current state of the code generator (I'm currently struggling!) but I'm sure you could understand enough for a re-write of some bits of it
07:45:12 <gour> dcoutts: i'd like to finish some more chapters 1st, but you can try to explain what'd be needed for generator
07:45:26 <dcoutts> gour, sure, perhaps off-channel
07:45:34 <gour> ok
07:45:35 <mcnster> shapr, i've been wondering if there's any semantic difference between a "let e in ..." and a whereclause...?
07:47:32 <xerox> mcnster: nope
07:48:06 <mcnster> so is the choice is really just a question of presentation?
07:48:14 <xerox> You could say that
07:49:08 <mcnster> xerox, are there guidelines for using "let ..." and "where ..." in a formal proof?
07:49:41 <xerox> mcnster: I don't know.  I find myself using where more frequently than lets (I think I don't use lets at all)
07:51:36 <mcnster> xerox, yes, using where seems to give focus to the expression above, being the most important
07:51:59 <xerox> mcnster: I think so too.
07:53:43 <mcnster> i'm looking forward to the day when the mysteries of the monad become more clear...
08:00:59 <poetix> "Mysteries of the monad" - makes us sound like the Knights Templar or something ;)
08:01:12 <basti_> knights of the lambda calculus
08:02:08 <mcnster> yeay verily yeay ;-)
08:03:17 <poetix> "And now, young novice, it is time for you to be shown something very few have ever seen..."
08:03:31 <poetix> Actually, we keep the monads in a display case in the lobby
08:03:45 <poetix> It's the comonads that are chained in iron cages down in a hidden room in the basement...
08:04:55 * mcnster toasts the comonads
08:05:22 <poetix> Funnily enough, Arrows don't sound nearly as scary.
08:06:05 <poetix> If Haskell had started out with arrows, and just used "Kleisli arrows" as its name for monads, maybe there would be less confusing
08:06:18 <basti_> probably, yes
08:06:19 <poetix> "Oh, a monad...that's just a funny name for a particular sort of arrow"
08:06:22 <mcnster> you wouldn't want to have a monad-through-the-head hat, after all...
08:06:24 <basti_> ;)
08:08:53 <mcnster> Chocolate Frosted Monads, new from Cadbury
08:09:08 <CosmicRay> heh
08:09:24 <poetix> Lost a testicle? Grow it back with Mo' Nads (TM)
08:09:37 <mcnster> ... "All the sugar, twice the arrows"
08:09:38 <basti_> and then there's #touch-my-monads
08:10:08 <mcnster> hehe
08:12:56 <mcnster> Mr. Tweedsmuir, we're going to have to bypass your left ventrical monad.  You'll probably never play Chopin again
08:13:11 <poetix> Readers of the ABC Warriors strip in 2000AD may remember The Monad as the concentrated essence of human evil
08:16:17 <mcnster> Monadocet.  Because category theory should be understood by everyone.
08:22:46 <ProfTeggy> Let us write a plea to bring monad comprehension back into Haskell
08:23:52 <basti_> monad comprehension?
08:24:12 <basti_> like list comprehension, just with >>= instead of concatMap?
08:24:18 <ProfTeggy> It's a device to help you comprehend monads....
08:24:31 <ProfTeggy> basti, yes
08:24:45 <basti_> do you think that would help?
08:25:02 <ProfTeggy> There have been comprehensions for any Monad (with zero) in Haskell, not just the list monad
08:25:13 <ProfTeggy> basti, I think so, yes
08:26:03 <arjanb> i would like it to have a different syntax than list comprehensions
08:28:29 <earthy> um, do notation really is monad comprehension, more or less, no?
08:28:47 <ProfTeggy> eartyh, it's all different tastes of syntactic sugar
08:28:52 <earthy> exactly
08:28:57 * earthy likes do notation
08:29:01 <ProfTeggy> but people are _familiar_ with list comprehensions
08:29:06 <earthy> 'ah'
08:29:31 <earthy> then maybe someone should write a monad introduction that takes readers from list comprehensions to do notation
08:29:57 <arjanb> the do notation doesn't make effective use of screen space
08:30:14 <ProfTeggy> that sounds reasonable, earthy.  Can you do this by Friday next week?
08:30:39 <earthy> probably not
08:30:42 <earthy> :)
08:30:47 <earthy> why?
08:30:48 <ProfTeggy> Hmm :-)
08:32:28 <SickJacken> dont worry, there's no sugar
08:35:04 <SickJacken> offtopic>> http://filserver3.hamsterpaj.net/images/foton/full/48.jpg
08:35:25 <earthy> sickjacken: that's a bad ref
08:35:33 <earthy> and probably not well understood beyond .nl
08:36:16 <basti_> it is, why?
08:36:47 <SickJacken> why wouldnt that be understood beyond .nl
08:36:57 <SickJacken> and why is that a bad ref
08:38:15 <earthy> because it brings together too many cliche's
08:38:33 <earthy> and I don't think the marketing slogan is used worldwide, but it may well be
08:41:22 <SickJacken> ...
08:42:04 <SickJacken> im not gay
08:42:07 <SickJacken> is a market slogan?
08:42:19 <SickJacken> i thought that was 'dont be gay' haha
08:46:20 <Akshaal> hi, all
08:48:09 <shapr> gwahr
08:48:51 <shapr> Have domain registrars suddenly changed their process to require the DNS name of a new DNS server? I want to point ScannedInAvian.com to my new ip address directly, not via my ISP's colo DNS.
09:19:03 <ProfTeggy> Nice weekend all.
09:19:25 <ProfTeggy> And I wish you the occasional side effect.
09:21:50 <SickJacken> omg, the minimize-to-tray extension works for firefox, thunderbird, mozilla etc.
09:21:53 <SickJacken> its awesome
10:11:17 <SyntaxNinja> w00t
10:14:45 <lispy> 5ynt4xN1nj4 in the #h45|<311
10:15:18 <SyntaxNinja> w0rd
10:15:31 <SyntaxNinja> did you guys see my slashdot article yesterday/
10:15:37 <lispy> no
10:15:41 * lispy checks now
10:15:44 <Heffalump> on the main page?
10:15:53 <Akshaal> SyntaxNinja: url
10:16:03 <SyntaxNinja> http://books.slashdot.org/article.pl?sid=05/09/08/1653245&tid=93&tid=172&tid=231&tid=95&tid=6
10:16:33 <araujo> Haskell stuff?
10:16:33 <Akshaal> No instance for (Test.QuickCheck.Arbitrary Char)
10:16:37 * Akshaal sighs
10:16:51 <musasabi> Akshaal: you need to define an instance
10:17:00 <Akshaal> musasabi: I know
10:17:04 <SyntaxNinja> no, not haskell stuff, this time.
10:17:11 <araujo> Btw, what module isAscii is?
10:17:24 <Akshaal> just wondered why it is not in quickcheck yet
10:17:48 <Akshaal> araujo: Data.Char?
10:18:04 <araujo> Let's see
10:18:07 <musasabi> Akshaal: because different people want different kinds of chars.
10:18:56 <musasabi> e.g. do you want {0,1}-{127,255,65526,somelarge_number} depending on the person
10:19:24 * musasabi looks at his english and decides it is time to sleep
10:19:49 <Akshaal> char should be unicode valid character prolly
10:21:37 <dcoutts> Akshaal, except that some progs mean ASCII by Char
10:21:56 <dcoutts> we don't distinguish encoding by the type
10:22:17 <dcoutts> in practice most chars are ascii since the current IO system assumes that
10:24:27 <Akshaal> dcoutts: programs should not means ASCII by Char, becouse due to doc: The character type Char is an enumeration whose values represent Unicode characters.
10:24:32 <Akshaal> such programs are invalid
10:24:43 <dcoutts> sure it's wrong but it's the current situation
10:25:09 <dcoutts> because all the implementations effectively mean char=ascii
10:26:02 <dcoutts> it's widly agreed that the current char/string/io situation is not good
10:26:36 <dcoutts> however there's no concensus on the fix, especially given the amount of legacy code
10:26:54 <Akshaal> it drives to spreading this uglyness more and more
10:28:27 <dcoutts> yeah, it's not good
10:28:53 <shapr> Some programs will want to work with latin-1 or other definitions of Char, so it's nice that Char isn't defined in QuickCheck itself.
10:29:04 <shapr> Maybe you could submit several defintions for Char?
10:29:24 <araujo> Akshaal, that worked, thanks
10:32:05 <SickJacken> @seen earthy
10:36:04 <SamB> why, oh why does Data.Array.IO.hGetArray have to take a buffer...
10:38:47 <olliej> muwhahaha!! My compiler managed to compiled GHC.Real :)
10:39:15 <SamB> heh
10:39:16 <dcoutts> SamB, a buffer? it takes an array and a handle. Are they not both essential?
10:39:19 <olliej> nope.. damn C# compiler breaks on it... :(
10:39:38 <SamB> dcoutts: well, I'd like one that took a handle and gave ME an array...
10:39:48 <dcoutts> ah I see
10:40:02 * olliej hates whoever decided Core should support Int -> (forall a b . a->b)
10:40:24 <dcoutts> SamB, however you don't know how many bytes you'll end up reading
10:40:25 <SamB> olliej: whats that for?
10:40:53 <olliej> SamB: writing Haskell.NET
10:40:54 <SamB> dcoutts: well, I suppose I can just use hFileSize first...
10:41:12 <olliej> SamB: haskell -> CodeDOM -> C# -> .NET
10:41:41 <SamB> olliej: I mean, what is Int -> (forall a b . a -> b)?
10:42:07 <SamB> or rather, what is it for?
10:42:18 <olliej> I don't know ... i cannot conceive of a reason
10:42:21 <SamB> numbered error functions?
10:42:25 <olliej> but nonetheless it exists
10:42:36 * lispy saw mention of #C and remember #F
10:42:36 <olliej> and thus i must support the damn thing :(
10:42:42 <lispy> or is it C#
10:42:45 <lispy> and F#
10:42:48 <olliej> hehe
10:43:09 <olliej> F# applied .NETs object model to  afunctional language
10:43:18 <olliej> neatly avoiding most of the problems
10:43:40 <olliej> non-strict evaluation of disjoint unions for instance
10:44:03 <olliej> mine is pure haskell, no restrictions over what you can shove into ghc
10:44:10 <olliej> or it would be
10:44:15 <olliej> if it could work consistently
10:44:16 <olliej> gah!
10:44:59 <Akshaal> olliej: what is a current status of your work?
10:45:28 <olliej> it can compile type classes, functions, disjoint unions, type aliases
10:45:41 <SamB> so you are trying to compile Core to C#?
10:45:46 <olliej> but certain constructs causes it to hemorrhage
10:45:50 <olliej> more or less
10:46:03 <SamB> what is CodeDOM?
10:46:24 <olliej> SamB: will eventually target IL directly, as the C# compiler refuses to generate tailcalls
10:46:35 <olliej> efffectively a generic code model
10:46:47 <SamB> that sounds... rather insane.
10:47:12 <olliej> can arbitrarily pass CodeDom to a code generator (like a c# producer) and it produces C3
10:47:12 <SamB> though probably less so for compilation than the reverse...
10:47:15 <olliej> c# rather
10:47:32 <olliej> it's fairly simple
10:47:55 <olliej> technically i could output a COBOL version of a haskell program
10:47:56 <olliej> shudder
10:48:55 <olliej> have all the non strict evaluation, currying, etc going though
10:58:36 <Akshaal> what does it mean?
10:58:37 <Akshaal> Warning: orphan instances:
10:58:37 <Akshaal>   instance Test.QuickCheck.Arbitrary GHC.Base.Char = $fArbitraryChar
11:01:37 <SamB> @index unsafeCoerce
11:03:31 <SamB> @hoogle a -> b
11:03:58 <arjanb> lambdabot isn't here
11:04:14 <SamB> yes, I was just noticing that
11:04:44 <SamB> @index unsafeCoerce
11:04:44 <_samb_lambdabot> bzzt
11:05:09 * SamB wishes it wouldn't do that
11:05:46 <SamB> @hoogle a -> b
11:05:48 <_samb_lambdabot> http://www.btselem.org/
11:06:01 <SamB> @quit
11:06:30 * SamB pulls newer code
11:08:50 * SamB finds 95 new patches in his "base" dir for lambdabot relative to his "work" dir
11:10:11 * SamB runs make
11:10:20 * CosmicRay runs rm
11:12:42 <SamB> surprisingly, so far 3 files have avoided recompilation, at least one of which is actually part of lambdabot...
11:13:24 <dcoutts> does anyone know if the Haskell workshop papers are available anywhere?
11:13:40 <dcoutts> several of them look really interesting
11:13:57 <Igloo> The upcoming ones aren't
11:14:05 <dcoutts> or rather will they be available after they have been presented?
11:14:13 <Igloo> Although you might find them lurking on the web
11:14:27 <Igloo> They'll probably be in the ACM digital library
11:14:48 <Igloo> Unless someone else publishes them, in which case they'll probably be on their equivalent  :-)
11:15:09 <SamB> uck!
11:15:15 <SamB> ACM digital library, noo!
11:15:25 <Igloo> Because it's not free, you mean?
11:15:32 <dcoutts> Igloo, does the comlab give us access to the ACM library?
11:15:36 <Igloo> Yes
11:15:37 * SamB doesn't have nightmares about the ACM digital library... yet
11:15:48 <Igloo> Well, the uni does
11:15:52 <CosmicRay> Igloo: is it OK if I NMU happy and haddock so that they both build and install in sid?
11:15:55 <dcoutts> Igloo, how do we access it?
11:16:13 <Igloo> By going to acm.org and clicking on "digital library"
11:16:20 <SamB> dcoutts: first, you could try the simplest thing that could possibly work...
11:16:42 <SamB> which is, pretend that the ACM digital library is free
11:17:00 <Igloo> CosmicRay: I'll probably look at them soon, but I can't stop you if you want to  :-)
11:17:31 <CosmicRay> it's just a slight tweak to build-deps for both.  plus one of the patches in the bts for haddock (the one that adjusts the -package flag)
11:17:45 <CosmicRay> I have them ready to upload right now if that's OK with you
11:17:55 <dcoutts> Igloo, ok I thought they were restricted
11:18:43 <Igloo> Adjusts it how?
11:19:00 <Igloo> They are, but you are coming from a uni IP
11:19:01 <CosmicRay> Igloo: s/ghc6 | ghc5/ghc6 (>= 6.4-4.1)/
11:19:16 <CosmicRay> otherwise it could still grab the old ghc on any laggy buildds.
11:19:19 <CosmicRay> or ghc5 on i386.
11:19:25 <Igloo> Does it not build with ghc5 any more?
11:19:49 <CosmicRay> haven't tried, but I'd suspect ghc5 would have library issues as well, or does it not use gmp?
11:20:06 * Igloo has a new ghc5 ready to upload
11:20:18 <CosmicRay> I could leave ghc5 in there if you want, I'm building this on i386 anyway so it won't hurt sid.
11:20:22 <CosmicRay> would you prefer that?
11:21:12 <Igloo> There surely can't be any buildds with ghc6 installed, so I'd rather the strict build-dep wasn't there at all so backporting is possible
11:21:39 <CosmicRay> Igloo: m68k does not yet have 6.4-4.1
11:22:05 <Igloo> It built earlier today apparently. But that's irrelevant, because <6.4-4.1 won't install
11:22:17 <CosmicRay> oh, good.
11:22:22 <CosmicRay> ok then I'll just back out that change.
11:22:45 <SamB> @index unsafeCoerce
11:22:46 <_samb_lambdabot> bzzt
11:22:48 <CosmicRay> Igloo: yes, but then happy goes into build-failed instead of depwait, requiring manual intervention or a new upload before it rebuilds.
11:22:53 <SamB> @hoogle a -> b
11:22:54 <_samb_lambdabot> http://www.btselem.org/
11:22:55 <Igloo> Hmm, I'm sure debdiff ought to recurse sensible when given .changes files
11:23:22 <Igloo> m68k is easy to get rebuilds scheduled anyway
11:23:25 <CosmicRay> ok, so then we are left with no changes to happy and only the patch to haddock.
11:23:32 <Igloo> Which patch is it?
11:23:49 <ndm> SamB, http://www.cs.york.ac.uk/~ndm/hoogle
11:23:53 <CosmicRay> Igloo: the one in #316657
11:23:59 <CosmicRay> it's necessary to build on i386.
11:24:00 <ndm> and why do you want to be evil to hoogle anyway...
11:24:07 <CosmicRay> and I suspect everywhere else
11:24:17 <CosmicRay> it was missing -package mtl
11:24:18 <Igloo> Is it fixed by a new upstream version?
11:24:37 <CosmicRay> dunno, it's a one-line thing
11:24:37 * SamB tries running ./config.status --recheck; ./config.status; make
11:24:51 <CosmicRay> http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=316657
11:25:06 <CosmicRay> I wouldn't be comfortable updating haddock to a new upstream version
11:25:15 <SamB> @list
11:25:16 <_samb_lambdabot> Maybe you meant: listchans listcommands listmodules dict
11:25:19 <SamB> @listmodules
11:25:20 <_samb_lambdabot> babel base code darcsPatchWatch dice dict dummy dynamic elite fact
11:25:20 <_samb_lambdabot> haddock help hoogle karma lambda more pl plugs quote search seen
11:25:20 <_samb_lambdabot> spell state system todo topic type version vixen where
11:25:27 <SamB> @hoogle a -> b
11:25:28 <_samb_lambdabot> Terminated
11:25:28 <_samb_lambdabot>  
11:26:03 <SamB> hmm, thats kind of encouraging...
11:26:46 <CosmicRay> Igloo: oh, also I added SHELL := /bin/bash to debian/rules.  your rules uses {} which are bash-specific and broke on my system, where /bin/sh is a posix shell.
11:26:50 <CosmicRay> that is for haddock only.
11:27:01 * Igloo is fixing them properly as I find them
11:28:33 <CosmicRay> I'm just trying to keep the diff as small as possible, seeing as this would be an nmu
11:28:54 <SamB> @index unsafeCoerce
11:28:55 <_samb_lambdabot> bzzt
11:29:00 <SamB> @google unsafeCoerce
11:29:02 <_samb_lambdabot> http://www.mail-archive.com/hugs-bugs@haskell.org/msg01033.html
11:35:24 * SamB wonders if it is safe to use unsafeCoerce :: UArray Int Word8 -> UArray Word Word8
11:35:42 <CosmicRay> Igloo: so is it OK if I upload these then?
11:35:55 <CosmicRay> the only changes would be the 1-line patch and the SHELL := /bin/bash in haddock.
11:35:58 <CosmicRay> happy is untouched.
11:39:27 <TheHunter> that should actually be safe...
11:39:37 * SyntaxNinja hopes Igloo thinks its OK :)
11:39:44 <TheHunter> (but i didn't test it)
11:39:45 * SyntaxNinja built his own versinos of haddock & happy
11:41:47 <SyntaxNinja> @seen shapr
11:41:54 <_samb_lambdabot> shapr is in #haskell. I don't know when shapr last spoke.
11:43:01 <TheHunter> the only reason for the first type argument of Arrays is rejecting more programs that are probably wrong, afaics.
11:43:15 <TheHunter> but dropping it wouldn't subvert type-safty.
11:43:37 <Igloo> Ah, I'm going to have to update haddock+happy to test ghc5 building itself in pure sid anyway
11:44:39 <CosmicRay> heh
11:44:44 <CosmicRay> shall I just upload? ;-)
11:45:09 <Igloo> [19:05] < Igloo> CosmicRay: I'll probably look at them soon, but I can't stop
11:45:09 <Igloo>                  you if you want to  :-)
11:45:20 <CosmicRay> ok, I guess that's a yes then.
11:45:21 <Igloo> Except soon just became much sooner
11:45:27 <CosmicRay> heh
11:45:45 * CosmicRay is not sure he has received a definitive "go ahead" or "please don't" yet
11:46:23 <SyntaxNinja> Igloo: I think you can stop CosmicRay, but he might put up a fight.
11:46:26 <Igloo> How frustrating, ghc using gcc 3.3 is going to mean I can't confidently close all the haddock bugs
11:46:33 <Igloo> Syn: Oh?
11:46:52 <CosmicRay> SyntaxNinja: heh
11:46:53 <SyntaxNinja> well, I don't think he's trying to force you
11:46:56 <SamB> TheHunter: I don't suppose you know which module thats in?
11:47:23 <CosmicRay> no, I'm just trying to be friendly here.
11:47:28 <Igloo> CosmicRay: The best you're going to get out of me is "I have no right to stop you, but I think it's a silly thing to do right now"
11:47:57 <SyntaxNinja> hm. in Text.Html, is there any "empty html" thing? like for folds?
11:48:13 <CosmicRay> ok.  in that case, I'll go ahead and upload, and please feel free to completely ignore these packages in every possible way if you like.
11:48:40 <TheHunter> SamB, what's that?
11:48:48 <CosmicRay> would you like me to still send my diffs to the bts as per usual?
11:48:51 <TheHunter> *'that'
11:48:57 <SamB> TheHunter: unsafeCoerce
11:49:07 <TheHunter> @type GHC.Exts.unsafeCoerce#
11:49:11 <_samb_lambdabot> forall b a. a -> b
11:49:39 <TheHunter>  @index doesn't find it because it's not part of the hierarchical libraries.
11:50:02 <Igloo> I don't think there's any point, except you'll need to send the changelog entry if you want it in the package
11:50:02 <SamB> @index unsafeCoerce#
11:50:03 <_samb_lambdabot> bzzt
11:50:05 <ndm> the new version of @hoogle will
11:50:42 <SamB> wasn't there a non-primitive version?
11:50:59 <TheHunter> ndm, how do you extract the info?
11:51:10 <ndm> haddock html parsing
11:51:21 <ndm> the tool is now in the CVS for hoogle
11:51:24 <ndm> added yesterday
11:51:33 <TheHunter> ah, ok, that's what lambdabot does, too.
11:52:09 <TheHunter> is there a haddock document of ghc's view of things somewhere?
11:52:28 <ndm> isn't the GHC libaries that?
11:52:44 <ndm> http://haskell.org/ghc/docs/latest/html/libraries/index.html
11:53:06 <TheHunter> there's no unsafeCoerce# in there.
11:53:40 <ndm> why not?
11:54:19 <TheHunter> @type GHC.Prim.unsafeCoerce#
11:54:23 <_samb_lambdabot> forall b a. a -> b
11:54:41 <SamB> you could... look in /usr/share/doc/ghc6-libsrc/base/GHC
11:54:57 <SamB> if you have the package installed, that is
11:55:19 <TheHunter> there's no GHC.Prim there either...
11:57:00 <TheHunter> http://www.mail-archive.com/glasgow-haskell-users@haskell.org/msg08269.html
11:57:48 <TheHunter> apparently, nobody has done that yet.
11:58:14 <TheHunter> anyway, 'apparently' is probably the most difficult word to spell in the english language.
12:01:38 <TheHunter> maybe I should remember that it contains 'parent'.
12:01:48 <TheHunter> *try to remember
12:05:01 <SamB> oh, there is no source for GHC.Prim, duh...
12:05:24 * SamB slaps self on head
12:06:40 <TheHunter> it shouldn't be too hard a task to generate GHC/Prim.hs from primops.txt.pp.
12:07:04 <TheHunter> http://cvs.haskell.org/cgi-bin/cvsweb.cgi/fptools/ghc/compiler/prelude/primops.txt.pp?rev=1.36;content-type=text%2Fplain
12:07:11 <Igloo> CosmicRay: Did you upload yet?
12:07:38 <CosmicRay> Igloo: yes
12:07:44 <CosmicRay> Igloo: do you want me to send you the diffs?
12:08:25 <Igloo> Oh well. They ought to be staggered.
12:08:36 <CosmicRay> eh?
12:09:06 <Igloo> All teh haddock builds will probably fail because happy is uninstallable
12:10:01 <CosmicRay> urgh.
12:10:08 <CosmicRay> yes, that may happen.
12:10:32 <CosmicRay> if it does, I'll upload haddock again if you haven't uploaded your version yet
12:23:06 <SyntaxNinja> CosmicRay: while you're at it, interested in uploading alex? Igloo any problems w/ that?
12:23:15 <SyntaxNinja> if happy is being uploaded, actually alex should be too.
12:24:10 <SyntaxNinja> z0d: darcs should be updated on most mirrors now
12:24:22 <SyntaxNinja> for these arches:  alpha i386 ia64 powerpc sparc
12:24:45 <CosmicRay> SyntaxNinja: I suppose I could build it.  I haven't run into any problems with it yet, but I did notice it needs building.  have you built it already?
12:25:13 <SyntaxNinja> no, haven't built it, but its not installable
12:25:28 <z0d> SyntaxNinja: yes, it's already working for me. thank you
12:25:31 <SyntaxNinja> z0d: sweet
12:28:34 <CosmicRay> Igloo: don't you think it's about time to remove ghc5 frmo the archive?
12:34:47 <CosmicRay> SyntaxNinja: ok, It's not convenient for me to built immediately, but let's just have whoever gets to it first upload it, perhaps?
12:35:18 <SyntaxNinja> CosmicRay: ok
12:35:29 <SyntaxNinja> if it's OK w/ igloo
12:35:35 <CosmicRay> right
12:35:40 * SyntaxNinja has never done an NMU will have to look up proper procedure.
12:35:57 <CosmicRay> SyntaxNinja: basically, add a .1 after the debian version number instead of incrementing it
12:36:03 <CosmicRay> build with -eyouremail@foo.com
12:36:07 * SyntaxNinja nods
12:36:21 <CosmicRay> and the formal thing to do is to file a bug that includes the diff frmo the last maintainer upload
12:36:26 <CosmicRay> though ni this case that seems overkill
12:36:41 <CosmicRay> because you would be sending a diff consisting of... debian/changelog.
12:36:51 <CosmicRay> but anyway, probably good to review the developer's reference on the topic anyway
12:37:36 <SyntaxNinja> OK
12:38:08 <CosmicRay> SyntaxNinja: speaking of removing packages, libghc6-cabal-dev? ;-)
12:49:51 <Igloo> CosmicRay: I like ghc5 as an easy first non-ghc6 compiler to get things working for. That might change when cabal takes off, though
12:50:44 <Oejet> boegel: Hello.  :-)
13:30:33 <xerox> http://photos1.blogger.com/blogger/4053/1310/320/bush%20disaster3.jpg
13:30:54 <z0d> haskellstats would be a cool project to write
13:32:51 <vegai> xerox: I'm missing something
13:33:58 <Cale> xerox: hahaha
13:34:07 <xerox> haha :-)
13:34:11 <vegai> Oh, now I get it
13:34:20 * vegai slaps his forehead
13:46:19 <CosmicRay> Igloo: but nobody uses ghc5 anymore and its fptools is so old...
13:46:24 <CosmicRay> I use hugs for that purpose ;-)
13:47:03 <Igloo> CosmicRay: If it becomes a pain to maintain I'll drop it
13:48:21 <lispy> z0d: what would haskellstats do?
13:50:58 <SyntaxNinja> CosmicRay:  hm. I keep forgetting what is the plan, if any, for updating packaegs which also come w/ compilers
13:51:02 <z0d> lispy: http://statcvs.sourceforge.net/statcvs-stats/
13:51:15 <SyntaxNinja> (re: removing cabal standalone package)
13:51:26 <Igloo> IMO it shouldn't be done
13:54:39 <z0d> lispy: I would write it if I were good enough in Haskell
13:56:19 <lispy> z0d: it's a cvs history visualizer?
13:56:36 <z0d> lispy: sort of, yes
13:57:12 <lispy> z0d: i'm wondering if you reall need to write haskellstats or just modify cvsstats
13:57:19 <SyntaxNinja> Igloo: what exactly?
13:57:50 <Igloo> What what?
13:57:57 <SyntaxNinja> (13:39:56) Igloo: IMO it shouldn't be done
13:58:02 <SyntaxNinja> what shouldn't be done
13:58:10 <Igloo> updating packaegs which also come w/ compilers
13:58:36 <SyntaxNinja> so you think that stuff like cabal-get that depends on newer cabal should build against a cabal-new package or something?
13:58:44 <Igloo> Yes
14:00:37 <SyntaxNinja> hm. well, with 6.4.1, we should be able to have both of them installed side-by-side
14:00:43 <z0d> lispy: I'd write it in Haskell. also, CVS and darcs are different. not to mention the graphics libraries
14:02:58 <vegai> are functions related to typeclasses called "methods" in Haskell?
14:08:45 <Heffalump> ometimes
14:08:53 <Heffalump> sometimes, even.
14:09:01 <Heffalump> I think members may be more common. I forget what the report says.
14:12:34 <SamB> okay, is there an infinite loop function in the library or do I need to supply my own?
14:17:20 <Igloo> CosmicRay: Did you do a pbuilder build of the packages?
14:19:22 <z0d> is it required that the filename of a module be the same that the name of the module ++ ".hs" ?
14:20:19 <Igloo> z0d: You'll make life a lot harder for yourself if you don't do that
14:20:36 <z0d> Igloo: I'm just curious.
14:20:40 <z0d> so it's not required
14:20:41 <SyntaxNinja> z0d: roughly, or .lhs, or Foo/Bar/Bang.hs is module Foo.Bar.Bang.hs
14:20:44 <SamB> no, it isn't
14:20:59 <SyntaxNinja> z0d: also "Main" modules are often not called Main.hs
14:21:03 <SamB> I'm not sure there is even any requirement that you keep source in files ;-)
14:21:17 <SyntaxNinja> it's not specifically part of the standard.
14:21:18 <SamB> in fact, I doubt there is
14:21:19 <z0d> can I store more modules in a file?
14:21:24 <SamB> however, it makes the compilers happy when you do
14:22:11 <SamB> the standard does not allow concatenation of modules, no
14:22:39 <astrolabe> samB: there are iterate and repeat, or did you mean for monads?
14:22:50 <SamB> astrolabe: for monads, of course
14:23:04 <SamB> I got tired of waiting, and wrote:
14:23:11 <SamB> forever x = loop where loop = x >> loop
14:24:16 <davve> i've written that one too :P
14:24:28 <davve> should be in the standard libs imho
14:24:29 <SamB> complete with the "loop"?
14:24:44 <davve> well.. something that did the same thing at least
14:24:56 <SamB> ah, yes, I'm sure many have written it
14:25:05 <SamB> probably many times each, for many of them
14:28:48 <Drakioned> Hello?
14:29:20 <SamB> hmm, I wonder how I would be able to shutdown curses whenever a certain bit of monad is exited...
14:29:50 <SamB> er, s/bit of monad/subcomputation/
14:30:03 <SamB> (in the IO monad)
14:30:29 <SamB> ah well, I'll figure that out when I do the real IO implementation...
14:31:00 <Drakioned> methinks I dropped in the middle of something
14:32:20 <TheHunter> Drakioned, you got a question?
14:32:38 <Drakioned> er.. not really
14:33:00 <SamB> Drakioned: well go forth and code. works every time!
14:33:19 <Drakioned> well, just the one, is a simple and sensible way of stopping input buffering?
14:33:54 * SamB notes that most people only have one question at a time
14:34:10 <Drakioned> i.e. so that if I press 3 it does something rather than having to do 3 <enter> before it does anything
14:34:20 <TheHunter> @index hSetBuffering
14:34:21 <_samb_lambdabot> System.IO
14:34:26 <TheHunter> @index noBuffering
14:34:27 <_samb_lambdabot> bzzt
14:34:32 <TheHunter> @index NoBuffering
14:34:33 <_samb_lambdabot> System.IO
14:34:43 <TheHunter> ok, it's hSetBuffering NoBuffering.
14:34:45 <Drakioned> I know there's hSetBuffering NoBuffering stdin, but that doesn't seem to do it
14:35:02 <SamB> Drakioned: are you on windows
14:35:05 <SamB> ?
14:35:09 <Drakioned> er. yeah
14:35:20 <SamB> I heard msvcrt.dll had bugs WRT buffering
14:36:02 <TheHunter> you're talking about (h)getContents, right?
14:36:21 <Drakioned> well, if I do something like x <- getChar
14:36:55 <Drakioned> then in the console program, if I type in a character, I need to press enter before it goes to the next line
14:37:08 <TheHunter> ouch!
14:37:32 <TheHunter> does that happen in ghci, too?
14:37:41 <Drakioned> think so, yeah
14:38:13 <TheHunter> then it's definitely a windows thing.
14:38:44 <SamB> probably an MSVCRT bug
14:39:11 <SamB> are they going to do a cygwin port of GHC sometime?
14:39:41 <Drakioned> well, is there anyway to work around it?
14:40:36 <SamB> you could look into getting a fixed MSVCRT.dll, but I doubt you'll find one...
14:40:41 <ndm> Drakioned, use the new version of WinHugs, it doesn't have that behaviour
14:40:59 <ndm> its only an interpretter though
14:41:28 <Drakioned> can ghc not do it?
14:41:36 <Drakioned> at all?
14:41:42 <TheHunter> (and doesn't support nearly as many extensions)
14:41:55 * TheHunter doesn't have the slightest idea.
14:42:18 <ndm> TheHunter, Hugs has plenty of extensions - almost all the GHC ones
14:42:23 <ndm> its not GHC, its WIndows more
14:42:48 <TheHunter> not true. Or have they recently added newtype deriving?
14:42:48 <ndm> WinHugs is special because it doesn't use the console
14:43:06 <SamB> @index liftIO
14:43:11 <_samb_lambdabot> Control.Monad.Trans, Control.Monad.Reader, Control.Monad.Writer,
14:43:11 <_samb_lambdabot> Control.Monad.State, Control.Monad.RWS, Control.Monad.Cont, Control.
14:43:11 <_samb_lambdabot> Monad.Error, Control.Monad.List
14:43:20 <ndm> unsure, but they certainly have quite a few of them - more than haskell 98, less than ghc
14:43:20 <TheHunter> implicit parameters, forall-scoped type variables, higher-rank support?
14:43:28 <ndm> forall, definately
14:43:43 <ndm> the others i wouldn't know, but i don't know what they are in ghc either
14:43:57 <TheHunter> that was a rhetorical question, i'm pretty sure it has none of them.
14:43:58 * Drakioned watches as all of this goes way over his head.
14:44:00 <SamB> Hmm, something is deeply wrong here!
14:44:00 <ndm> i tend to stick to haskell98
14:44:03 <TheHunter> maybe implicit parameters.
14:44:24 <SamB> I ran my Z-Machine interpreter on a program that is supposed to print:
14:44:28 <ndm> http://cvs.haskell.org/Hugs/pages/hugsman/exts.html
14:44:33 <ndm> that's forall
14:44:54 <ndm> 7.4  Implicit parameters
14:45:00 <SamB> Hello, World!okay, so I actually forgot the world part, but hey!
14:45:09 <TheHunter> but that doesn't scope the type variable.
14:45:12 <SamB> and it actually prints:
14:45:14 <ndm> 7.3.2  Rank 2 polymorphism
14:45:20 <SamB> Nkrru" *** Exception: Prelude.(!!): index too large
14:45:32 <Drakioned> er.. can I ask another question?
14:45:45 <TheHunter> ghc can do more than rank 2, check for example the quickcheckM paper.
14:45:48 <Drakioned> before you all get too immersed in ghc vs whatever else
14:45:52 <ndm> Drakioned, yes - go ahead
14:45:55 <SamB> though I think I'm just missing a subtraction, actually...
14:46:20 <ndm> Drakioned, if you want to do getChar on Windows, WinHugs would be the best way
14:46:36 <SamB> okay, now it gets as far as:
14:46:38 <TheHunter> i'm not even talking about more recent stuff such as gadts or stm.
14:46:43 <SamB> Hello, World!*** Exception: ./ZMachine/Ops.hs:(14,10)-(17,45): Non-exhaustive patterns in case
14:46:46 <SamB> which is what I expected...
14:47:00 <ndm> and not just any build of winhugs either, only the pre-release ones - ask if you want to use them, i'll give a url
14:47:25 <Drakioned> I'm mapping a function to a large list of integers, is there any way to make this process parallel easily?
14:49:41 <ndm> TheHunter, certainly ghc has more features. But I don't use any of the hugs ones, haskell 98 all the way
14:49:56 <TheHunter> chances are it is already parallel due to laziness.
14:50:15 <ndm> does any haskell interpretter automatically insert parallelness?
14:50:24 <ndm> i mean the standard ones
14:50:42 <Drakioned> TheHunter, really? I was just wondering because of the multi-cored processors that are about these days
14:50:54 <TheHunter> haskell 98 is far too restrictive for me.
14:51:13 <TheHunter> Drakioned, sorry, i didn't mean that kind of parallelity.
14:51:35 <TheHunter> recent cvs ghcs have some smp support, but you'll explicitely have to use forkIO.
14:52:03 <Drakioned> I know, that was what I was afraid of.
14:52:41 <ndm> Drakioned, i'm sure eventually someone will write a haskell paralelliser that catches on
14:52:43 <Drakioned> okay, guess it means MVars for me then.
14:53:43 <Drakioned> I should probably learn how to use arrays at some point as well, I suspect that'll make the process faster than trying to make it parallel.
14:55:28 <TheHunter> probably. That smp support is still very experimental; and I don't know how much speedup you can expectË
14:56:30 <Drakioned> ah, I'm trying to code a very basic rsa implementation.
14:57:23 <ndm> http://www.electronconsulting.com/rsa-haskell/
14:57:55 <Drakioned> yeah, I've seen that, but this is for practice and that's far too complicated.
15:22:22 <ape> hello
15:22:41 <musasabi> hello
15:23:12 <ape> anyone know who jewel is?
15:59:53 <Igloo> Hmm, having just noticed messages I sent to 2 people were blocked because netsplits deregistered me I'm tempted to bring up an OFTC move again
16:00:32 <Muad_Dibber> a what?
16:00:48 <Igloo> Moving the channel to another IRC network
16:01:06 <integral> "moving"
16:01:50 <musasabi> Is the grass really greener on OFTC?
16:02:25 <Muad_Dibber> well infact i totally agree with the new things they are trying to do
16:02:31 * Igloo isn't aware of any problems on OFTC, and I have the feeling it splits less etc
16:02:47 * SyntaxNinja would rather move to a different service altogether, like jabber :)
16:03:01 <Muad_Dibber> google talk phone conversations! :P
16:03:34 <Igloo> Why is jabber better?
16:03:52 <musasabi> freenode is a place where many people will look in the first place, although other places might be technically somewhat better.
16:04:04 <Igloo> Muad_Dibber: I like it in theory, but in practice it will probably confuse people new to IRC
16:04:25 <Muad_Dibber> Igloo : true at that
16:04:47 <Muad_Dibber> but then again i dislike stupid spam messages that much that i feel only little bit sorry for the new people :P
16:05:23 <Drakioned> I'd have thought most Haskell programmers aren't total novices at using a PC...
16:05:55 <Drakioned> so would be able to connect whatever service, whether it'd be Jabber, IRC, or whatever else
16:06:37 <Igloo> Drakioned: They are largely new to IRC (and I suspect jabber too), though
16:07:17 <Muad_Dibber> oh
16:07:21 * Muad_Dibber faints
16:07:23 <Muad_Dibber> freenode is so cool :P
16:07:25 <Igloo> Muad_Dibber: Having people here redirecting people for as long as we can get away with it as well as making an irc.haskell.org alias might help that
16:07:44 * Muad_Dibber just now noticed the server is on (herbert.freenode.net)
16:07:51 <Drakioned> yes, but they're programmers, just give them a set of instructions on how to connect on various popular platforms and that ought to do
16:08:40 <Muad_Dibber> actually it wouldnt be harder to connect to freenode than to connect to oftc
16:08:41 <Muad_Dibber> :P
16:09:02 <Muad_Dibber> only after that the point of messaging to (un)registered nicks start :P
16:10:16 <Heffalump> hangon, we can't msg people without registering?
16:10:26 <Igloo> No
16:10:28 <Muad_Dibber> no
16:10:29 <Heffalump> hmm.
16:10:34 <Igloo> [22:34] [OPN] -!- Private messages from unregistered users are currently
16:10:34 <Igloo>           blocked due to spam problems, but you can always message a staffer.
16:10:34 <Igloo>           Please register! ( http://freenode.net/faq.shtml#privmsg )
16:10:34 <Heffalump> but you can still spam a channel?
16:10:38 <Muad_Dibber> there is this new system preventing unwanted spamming and flooders
16:10:40 <Heffalump> yeah, just got it.
16:10:53 <Muad_Dibber> depending on the channel Heffalump
16:11:06 <Muad_Dibber> if the channel sets +N or whatever the correct mode is, unregistered users can't join, and thus can't spam.
16:11:24 <Heffalump> hmm.
16:11:27 <Heffalump> I can see the point.
16:12:20 <Muad_Dibber> well, its not up to me, but i wouldn't move :)
16:12:35 <Igloo> Most IRC clients won't make it particularly easy to notice the message was rejected either, I don't think
16:12:55 <Igloo> They'll hide it in a status window as there's nothing to link it to any other window
16:13:58 <Muad_Dibber> what is weird though is that you are unregistered due to a netsplit
16:15:17 <Igloo> If I split from the services then they forget who I am. Then when they unsplit I don't know to reregister
16:17:05 <SyntaxNinja> jabber has a better way of doing decentralization, better messaging and authentication built-in (not these bizzare scripts like nickserv), encryption
16:17:08 <SyntaxNinja> I can send you a message while you're offline, and you'll get it when you come back
16:17:12 <SyntaxNinja> otoh, I think you have to let someone be your buddy before they can msg you
16:17:24 <SyntaxNinja> @wiki
16:17:24 <_samb_lambdabot> http://www.haskell.org/hawiki/
16:17:41 <Muad_Dibber> i'm not sure Igloo
16:17:47 <Muad_Dibber> depends on the ircd maybe
16:17:57 <Muad_Dibber> but i recall that +o is a servermode
16:17:59 <SyntaxNinja> hm. I got disconnected while saying how great jabber is. did that come through or not?
16:18:02 <Muad_Dibber> err
16:18:07 <Muad_Dibber> some mode for being registered anyway
16:18:12 <Heffalump> yes
16:18:20 <Muad_Dibber> so, when services split
16:18:23 <Muad_Dibber> and they come back
16:18:34 <Muad_Dibber> they will notice you have the +registered mode, and recognize that you were registered before
16:18:41 <Igloo> SyntaxNinja: Does it do channels as well as IRC? How open is the protocol?
16:19:03 <SyntaxNinja> jabber does group chat and IM, I believe the protocol is totally open.
16:19:04 <Muad_Dibber> this is a sound solution, since only servers are allowed to set the +registered mode, and you can assume that the server-server security works okay
16:19:19 <Igloo> Muad_Dibber: Hmm, I was guessing, but irssi should auto register on connect so I can't think what else it could be
16:19:47 <Muad_Dibber> somebody asked my question on #freenode or shall i go do it myself? :P)
16:20:56 <Muad_Dibber> anyway
16:20:59 <Muad_Dibber> its bedtime for me
16:21:02 <Muad_Dibber> tomorrow will be another day :)
16:23:28 <SyntaxNinja> l8r Muad_Dibber
16:30:05 <machack666> If you read the datatype IO String as an IO action which produces a String upon binding, how do you read "GenParser tok st a"?
16:30:57 <machack666> a GenParser, which upon binding gives you the type "tok st a" for abstract types tok, st, a?
16:32:19 <machack666> in the which case, would binding further give you a "tok" and "st a"?
17:03:04 <Igloo> Control/Monad/Fix.raw-hs:22:1: parse error in doc string: [TokPara,TokString "Th
17:03:09 <Igloo> e Fix monad.\n",TokPara]
17:04:03 <Igloo> Anyone got any idea what that means? File is at http://musketeer.comlab.ox.ac.uk/~igloo/Fix.raw-hs
17:04:27 <Igloo> (it's haddock giving the error)
17:19:03 <dcoutts> Igloo, check your escapin of things like '/'
17:19:46 <dave_m> has anyone tried accessing <http://haskell.org/> recently? I'm getting a redirect to 0.0.0.0
17:19:50 <Igloo> Ah, would this break it then?
17:19:52 <Igloo> --    /Functional Programming with Overloading and
17:19:52 <Igloo> --        Higher-Order Polymorphism/,
17:21:08 * Igloo notices it's tiny and fiddles with it
17:21:29 <arjanb> dave_m: haskell.org works here
17:22:08 <dave_m> arjanb: Strange. It works for me if I do www.haskell.org, but it fails if I just do haskell.org
17:22:41 <Igloo> Ah, it seems it doesn't like the copyright being split across 2 lines
17:23:02 <Igloo> Hmm, but 6.4.1 also has that
17:41:58 <dons> hmm. more targetted spam, this time referring to posts to darcs-devel instead of haskell@
17:45:22 <Igloo> mail spam?
17:46:16 <dons> yep. I was reading your posts on the darcs-devel mailing group yesterday, and
17:46:17 <dons> think our site may be of interest to you. ...
17:46:45 <Igloo> Ah, right
17:47:02 <dons> I got a similar one after posting to haskell@ a couple of weeks ago. "You posted some messages to haskell@ and we think our site may be ..."
17:47:44 <Igloo> Hunt 'em down with pitchforks, that's what I say
17:48:12 <dons> hehe
17:48:26 <dons> gour! oh, you didn't say you were on an amd64!
17:48:45 <dons> @bot
17:48:46 <_samb_lambdabot> :)
17:48:53 <dons> oh, no lambdabot either. hmm
17:53:05 <dons> gour, anyway, I'm quite sick this weekend, flu I think, so it may be a few days till I can get my head together enough to chase your hs-plugins bug
18:04:55 <Torrente> Hi
18:04:59 <Torrente> a question........
18:05:51 <Torrente> Haskell type system is based on Hindley/Milner algorithm....
18:06:36 <Torrente> Hindley/Milnet satisfy the strong normalization....
18:07:07 <Torrente> someone here????
18:07:28 <dave_m> what's your question?
18:07:41 <Torrente> my question is...
18:08:17 <Torrente> if Haskell type system sastify the strong normalization
18:08:34 <Torrente> what happend with something linke this:
18:08:48 <Torrente> algo: List a
18:08:58 <Torrente> sorry
18:09:08 <Torrente> myfunt: List Int.
18:09:16 <Torrente> myfunt = 1:myfunt
18:09:27 <Torrente> this not have normal form
18:09:33 <Torrente> but is typable
18:10:24 <dave_m> Assuming I understand you correctly, "myfunt" doesn't have a normal form, but its type does.
18:10:51 <Torrente> mmm
18:11:10 <Torrente> what is: "its type does" ?
18:11:22 <Torrente> sorry my bad englush
18:11:25 <Torrente> english
18:12:00 <dave_m> are you talking about normalization of terms or normalization of types?
18:12:12 <Torrente> ok
18:12:14 <Torrente> right
18:12:20 <Torrente> normalization of terms
18:12:32 <Torrente> now i understand
18:12:59 <Torrente> the Hindley-Milner satisfy strong normalization for types, not for term????
18:14:17 <Torrente> Simple typed lambda calculus satisfy strong for terms
18:15:03 <dave_m> right, because it doesn't allow recursive definitions
18:15:09 <Drakioned> I'm confused.
18:15:19 <Drakioned> carry on.
18:15:24 <Torrente> ~y    s 
18:15:25 <Torrente>                                                prGyU  6e UAUwQ
18:15:25 <Torrente>    q g   ~ y  y   q Rt y  ye    qk
18:15:25 <Torrente>  p23{Cv$3CAfC f G¦dxf $pCf XvqQwfQCj
18:15:25 <Torrente>  GXDeX6ts DXXGkfGyGn¤XCX$UC¤ Q|p2Dy
18:15:25 <Torrente>      d q e d y   ke~ y  ye  q
18:15:27 <Torrente>   fGy Gn"©fGy2X}DBDG¬h8 qSt¡¥0 P£4B$ Q 8 XfS%qpr0Gf6q
18:15:29 <Torrente>           y 0 Q ¬ B v0    q q
18:15:31 <Torrente> q e  c y g   ke   Qc k  £   
18:15:33 <Torrente>  Xk QAD{ ikCm y  uQªXp`GyXe¤P GXQvexQªf  
18:15:37 <Cale> um
18:15:48 <Torrente> dave_m: ok
18:15:52 <Torrente> dave_m: thx!
18:16:00 <Drakioned> yes, that made perfect sense..
18:16:14 <Torrente> sorry
18:16:24 <Torrente> se me chispoteo'
18:16:26 <Cale> what encoding was that in?
18:16:38 <Torrente> Cale: sorry
18:16:45 <Cale> no problem
18:16:51 <Torrente> Cale: i dont want do this
18:17:05 <Torrente> dave_m: then.....
18:17:30 <Torrente> dave_m: strong normalization in Hindley-Milner, talk about what?
18:18:41 <dave_m> I'm not sure what you mean. I haven't studied Hindley-Milner for some time now.
18:18:59 <Torrente> dave_m: ok
18:19:58 <Torrente> lisen...
18:20:03 <Torrente> Wadler dixit.
18:20:19 <dave_m> ?
18:20:45 <Torrente> Hindley-Milner system, satisfy the strong normalization: every term has a normal form.....
18:21:20 <Torrente> and every reduction sequence leads to this normal form.
18:21:57 <Torrente> this confused me
18:24:32 <dave_m> It does sound confusing. My understanding is that types in the H-M system have normal forms, but this doesn't imply that the terms in the language being typed have normal forms.
18:25:30 <Torrente> this make sense, yes
18:25:58 <Torrente> http://research.microsoft.com/Users/luca/Papers/BasicTypechecking.pdf
18:29:48 <Torrente> my function myfun:List Int have type
18:29:59 <Torrente> but not normal form
18:30:09 <Torrente> myfun = 1:myfun
18:34:44 <Torrente> all this people, never said nothing????
18:34:51 <Torrente> say
18:35:39 <dave_m> huh?
18:37:40 <Torrente> nothing
19:23:51 <newsham> hi
19:27:53 <CosmicRay> hello newsham
19:29:07 <araujo> Hello here.
19:29:34 <araujo> Is the <- notation a syntactic sugar for >>= ?
19:29:39 <CosmicRay> yes
19:29:49 <araujo> I see...
19:29:53 <araujo> Thanks CosmicRay
19:29:59 <CosmicRay> more precisely, x <- action; foo x is syntactic sugar for action >>= (
19:30:04 <CosmicRay> \x -> foo x)
19:32:04 <araujo> yeah
19:33:34 <newsham> http://lava.net/~newsham/x/poker.pdf <- my haskell experiment continues, this time with latex.
19:36:52 <CosmicRay> were you discussing this on cafe?
19:37:08 <newsham> if you're talkking to me, no.  I dont know cafe.
19:37:17 <CosmicRay> oh, haskell-cafe. it's a mailing list.
19:37:24 <CosmicRay> I thought I read about poker on there last week.
19:37:43 <newsham> i was on irc last week asking for help and comments
19:37:47 <newsham> but i'm not on the list
19:37:50 <CosmicRay> ah, maybe that was it.
20:10:50 <Torrente> Hi!
20:50:40 <Torrente> someone know one introductional paper on Hindley-Milner algorithm???
21:05:59 <metaperl> Torrente: maybe ask in #sml also
21:06:48 <Torrente> thx
21:12:39 <Torrente> and a channel about formal methods????
21:16:28 <metaperl> Torrente: is #math close enough? if not either Cale here or someone in #math might know
21:17:43 <Torrente> ok
21:17:44 <Torrente> thx
21:27:36 <Torrente> I am writing a type system for lambda calculus
21:27:50 <Torrente> type checker, off course
21:27:58 <Torrente> a la curry
21:28:32 <Torrente> someone intereste
21:28:37 <Torrente> d
22:06:36 <Torrente> i have a problem
22:06:51 <Torrente> RROR - Ambiguous variable occurrence "filter"
22:06:52 <Torrente> *** Could refer to: Hugs.Prelude.filter Data.Set.filter
22:06:59 <Torrente> how fix it?
22:07:31 <int-e> refer to it as Hugs.Prelud.filter [or Data.Set.filter]
22:07:38 <int-e> instead of just filter.
22:08:33 <Torrente> thx
22:09:05 <Torrente> I refer to it as Prelud.filtrt
22:09:11 <Torrente> this is my error
22:33:28 <newsham> hmm.. DFS is hard to do in functional languages?
22:38:10 <Lunar^> might help to write it in a monadic style
22:38:25 <newsham> http://www.cse.ogi.edu/~jl/Papers/dfs.ps
22:38:51 <newsham> seems like a fairly major weakness that I dont hear people talking about much
22:39:03 <Lunar^> which one?
22:39:15 <newsham> difficulty doing graph algorithms in functional languages
22:39:38 <Lunar^> see the FGL
22:39:38 <Cale> DFS is relatively easy
22:42:02 <newsham> i will check out the fgl paper after i'm done this one
22:42:23 <Cale> I remember implementing it in a couple of lines with my own graph class.
22:42:38 <Cale> (and a concrete instance of that class using arrays)
22:42:46 <newsham> cale: was it O(V+E) ?
22:42:58 <Cale> yeah
22:43:05 <newsham> was it monadic?
22:43:07 <Cale> no
22:43:47 <Cale> I'm fairly sure it was O(V+E) anyway
22:44:16 <Cale> at worst, O(V log(V) + E)
22:44:21 <newsham> "It has not been at all clear how to express such algorithms without using side effects to achieve efficiency..."  "so, for example, many texts provide implementations of search algorithms which are quadratic in the size of the graph.... compared with
22:44:29 <newsham> standard lienar implementations give for imperative languages"
22:44:44 <newsham> (quote from .ps url above)
22:45:17 <Cale> well, what's so hard about doing DFS?
22:45:43 <newsham> *shrug*  I've seen dfs in imperative languages..  i'm still reading how they did it in this paper :)
22:45:52 <newsham> I havent see how people do it in functional languages
22:46:03 <newsham> (imperative language you usually mark where you been as you traverse)
22:47:47 <Cale> The obvious thing to do is just to keep track of where you've been, say using a set, and recurse
22:48:09 <newsham> right, then you have set lookups.
22:48:44 <Cale> I suppose those aren't constant time, but they're O(log(n)) which is generally fairly acceptable
22:49:15 <newsham> O(N) is much better :)
22:49:47 <Cale> much better than O(n log n)?
22:49:48 <newsham> hmm.. given that you know all of the vertices ahead of time, I dont see why you cant do an O(1) lookup
22:49:51 <newsham> now that I think of it
22:50:02 <newsham> cale: yes.. definitely.. much much better.
22:50:21 <Cale> Well, unless n is very large, log(n) is negligible.
22:50:43 <newsham> you fit well into the mold of the saying I've always heard
22:51:00 <int-e> they're cheating ;) (they use a mutable array in their set implementation which is not purely functional)
22:51:11 <newsham> "assembly programmers know the cost of everything and the value of nothing;  lisp programmers know the value of everything and the cost of nothing"
22:51:13 <Cale> do they?
22:51:24 <Cale> Sets are implemented with balanced trees.
22:52:27 <newsham> if you know the possible members of a set ahead of time you can use an array to get O(1) access
22:52:39 <newsham> I am guessing thats what inte is saying they do
22:52:47 <Cale> newsham: Well, if it works in a reasonable time frame for practical inputs, and isn't grossly inefficient, I don't tend to care too much.
22:53:22 <Cale> I don't mind using a multiply exponential algorithm, if for the only inputs I'll ever give it, it runs in half a second :)
22:53:31 <newsham> cale: I agree..  but you dont have to get very big to have nlogn >> n
22:53:32 <int-e> newsham, I've looked at the paper you quoted above - section 5.2, pruning, defines a Set type with MutArr. It could be implemented with balanced trees but they don't.
22:54:09 <newsham> i'm not near sec5 yet.  i should get back to reading :)
22:54:19 <Cale> newsham: bigger, but likely it will only ever be a few times larger.
22:54:23 <int-e> (besides they could just reuse Data.Set[s?] which does use balanced trees)
22:54:40 <int-e> (which is probably what Cale meant)
22:54:45 <Cale> Oh, int-e was referring to the paper :)
22:55:00 <Cale> I was referring to my obvious implementation
22:55:04 <int-e> Cale: yes, I could've made that more clear.
22:55:29 <Cale> You could also perhaps use Diff arrays, though I'm not sure what the cost analysis would look like on that.
22:55:42 <Cale> hmm...
22:55:46 <int-e> newsham: I've skipped a few sections - I was interested in the actual depth first search, which is the generation of a forest from a graph.
22:55:48 <Cale> actually, that should give O(n)
22:56:14 <Cale> since you never look at old copies of the visited set
22:56:38 <Cale> so just use a Diff array from vertices to Bool.
22:57:12 <Cale> sure, it's cheating underneath, but it presents a nice pure immutable array interface, so who can really complain :)
22:57:16 <newsham> whats a diff array?
22:57:34 <Cale> http://www.haskell.org/ghc/docs/latest/html/libraries/base/Data.Array.Diff.html
22:57:46 <newsham> "cheating underneat"?  Isnt that what the whole point of compiling a functional language is? :)
22:58:51 <int-e> They aren't cheating in that sense - but diff arrays should soon become very expensive if you keep creating and holding slightly modified copies of them.
22:59:13 <Cale> int-e: yeah, in this case you don't
22:59:15 <newsham> a'!'i takes O(1) time and a // d takes O(length d).
22:59:21 <int-e> Cale, I know :)
22:59:33 <Cale> newsham: right
22:59:41 <Cale> where d is a list of updates
22:59:46 <newsham> wouldnt that make it N^2?
22:59:50 <newsham> since you would have N updates
22:59:54 <Cale> no
23:00:12 <Cale> if you do N updates all at once, it takes O(N) time
23:00:18 <Cale> that's what it's saying
23:00:28 <newsham> i'm betting this algorithm does 1 update at a time
23:00:32 <Cale> yeah
23:00:33 <int-e> newsham: no, your updates are small and their total length is bounded by the number of nodes.
23:01:01 <int-e> (once a node is marked as visited, it will never be marked again)
23:01:07 <Cale> in fact, your updates are always one node
23:01:32 <newsham> oh, d is the update.
23:01:36 <Cale> yes
23:01:37 <newsham> i see.  blah.. nevermind :)
23:01:49 <Cale> and you never look at previous versions of the array, so there's no need to worry about that
23:03:07 <Cale> (and don't worry about the low level IO interface you see there, that's only ever needed to make further IArray instances)
23:04:52 <Cale> Diff arrays probably solve half the algorithmic efficiency problems of pure functional languages :)
23:05:24 <Cale> the cool thing is that you still can get at the old copies of the array -- you just pay a little extra as you go back in time
23:05:24 <int-e> yeah, I can see them become one of my favourite data types now that I know about them.
23:45:32 <Akshaal> re
23:51:45 <Torrente> Hi
23:52:03 <Torrente> I'm writing a typechecker for lambda calculus
23:52:17 <Torrente> someone know how to the unification of terms
23:52:47 <Torrente> in the app rule
23:57:31 <Cale> well, isn't it just that if the type of the function is a -> b, and the type of the parameter is c, and the type of the result is d, then a = c and b = d?
