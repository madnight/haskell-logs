00:05:05 <boegel> can anyone here point me to good information/articles on the basics of machine learning ?
00:05:11 <boegel> (and data mining)
00:05:51 * Muad_Dibber hides
00:08:13 * boegel finds Muad_Dibber hidden in a corner of #haskell
00:09:00 <Muad_Dibber> bah
00:09:08 * Muad_Dibber never hides behind a monad anymore
00:09:11 <Muad_Dibber> you always find me there
00:22:41 <xerox> Cale: whoa!
00:23:07 <xerox> > length $ runWL $ result 3 ("F+-", return "F", fromList [('F', WL $ WriterT [("",1/5), ("F+F",2/5), ("F-F",2/5)])])
00:23:08 <xerox> 723
00:24:58 <Cale> yeah, and each is tagged with its probability of occurring, given that there is a 1/5 probability of F becoming "", 2/5 "F+F" and 2/5 "F-F"
00:25:57 <xerox> ("",1%5)
00:25:57 <xerox> ("+",2%125)
00:25:57 <xerox> ("++",4%3125)
00:25:57 <xerox> ..
00:27:47 <xerox> This is really nice.
00:28:34 <xerox> TheHunter suggested yesterday that for having a proper MonadPlus we do need an invariant like sum (map snd xs) == 1
00:28:50 <Cale> yeah
00:29:09 <Cale> There's no simple way to enforce that via the type system though
00:29:34 <xerox> I dreamt this morning something like adding "error"s to fmapWL joinWL.
00:29:55 <Cale> but you could probably write functions which would check it and not allow bad values to occur
00:30:02 <xerox> Or recalculations.. but mmh.
00:30:20 <xerox> Yeah, it's rather simple to do from the parser/GUI side
00:30:30 <Cale> You probably want to check it when initially getting the values into the monad.
00:30:37 <xerox> Yep.
00:31:03 <Cale> So, a checking version of (WL . WriterT)
00:31:07 <xerox> Just a thought, now that I have probabilities attached at the _results_ I need to traverse it completely to pick a choice, don't I?
00:32:09 <Cale> Well, you can pick a value between 0 and 1, and traverse through the list until the sum gets above that
00:32:30 <xerox> Gee.
00:32:44 <xerox> Then pick one randomly of the collected list?
00:32:59 <Cale> no, the last one before the sum went over
00:34:04 <xerox> Yay, I can't really understand why so :-)
00:34:21 <Cale> say you have something like [1/6, 1/3, 1/2]
00:34:36 <Cale> then you pick a random value between 0 and 1
00:34:45 <Cale> (uniformly)
00:35:14 <Cale> then the probability that it lands in the interval [0,1/6) is 1/6
00:35:54 <Cale> the probability that it lands in the interval [1/6, 1/6 + 1/3) is 1/3
00:36:27 <Cale> and the probability that it lands in the interval [1/6 + 1/3, 1/6 + 1/3 + 1/2) is 1/2.
00:36:50 <xerox> So I first need to sort it
00:36:56 <Cale> nope
00:37:15 <Cale> this works regardless of whether the list is sorted
00:37:59 <xerox> Oh-uhm.. it could be right (I believe you but I don't completely see it)
00:39:37 <Cale> If you have a list of probabilities ps such that sum ps == 1, and you pick a uniform random value in the interval [0,1), then the probability that the value lies in the interval [sum $ take n ps, sum $ take (n+1) ps) for some n < length ps, is ps !! (n+1), the length of that interval.
00:40:26 <Cale> heh, I'm sort of mixing mathematical and Haskell notation here, hope it's not too confusing
00:41:30 <Cale> Basically, the idea of a uniform distribution on [0,1) is that the probability of the chosen value landing in any given subinterval of [0,1) is the length of that interval.
00:43:33 <xerox> What does uniform exactly mean?
00:44:26 <Cale> well, in the case of a finite number of possibilities (which is what will actually happen in the program), it means that the same probability is assigned to each possible outcome
00:44:45 <Cale> so if there are n outcomes, each has probability 1/n
00:45:14 <xerox> So I have to pick numbers with the right precision?
00:45:31 <xerox> Or maybe just "enough precision"
00:45:51 <Cale> enough precision should be okay, for all practical purposes
00:46:48 <Cale> you can just pick a random integer (uniformly distributed as the default random number generator will give you) in a large interval [0,n] and divide it by n to get a rational number.
00:47:13 <xerox> In my first non-monadic attempt of nondeterminism I was generating a random number for each substitution, hehe.
00:47:42 <xerox> unsafePerformIO-ing out the result ;-)
00:47:48 <Cale> eek :)
00:47:56 <Cale> but that approach can work too
00:47:56 <xerox> But it was safe :-P
00:49:01 <Cale> you know, you can pass a pure random number generator into a function as a parameter
00:49:22 <xerox> Yes
00:49:57 <Cale> it may still be inconvenient to do so, of course :)
00:50:15 <xerox> You got the point :-)
00:50:44 <xerox> Also the LSystem I hacked nondeterminism into was boegel's one, not this code I showed you, and which you generalized this far :)
00:51:02 <Cale> It may be nice to have a monad/monad transformer with a primitive for getting random numbers, and which produced a pure result but requires a RandomGen for execution
00:51:11 <Cale> produces*
00:51:43 <Cale> RandomT
00:51:52 <xerox> Stack again!
00:51:57 <Cale> hehe :)
00:52:04 <xerox> Is it a wonder of it does exist?
00:54:01 <Cale> I wonder if it's just an appropriate Reader monad.
00:54:52 <Cale> oh, but you do want to update the state of the random generator
00:55:15 <xerox> Right
00:55:54 <Cale> random :: (Random a, RandomGen g) => g -> (a, g)
00:56:07 <Cale> that looks like a State g a to me :)
00:56:27 <Cale> So I suppose you can basically do it by wrapping up a state monad
00:57:31 <Cale> You just want to hide the actual state monad interface and only have the primitive for getting random values.
01:01:14 * boegel yaays as his HaskLS implementation is proving usefull for people :)
01:02:26 <Muad_Dibber> is it? ::)
01:02:37 <xerox> I got pick working, good.
01:03:09 <xerox> Cale: thanks very much, this is the most complex Haskell code I ever written :)
01:03:19 <Cale> :)
01:04:13 <xerox> A cup of tea, and then I'll try putting all together with the GUI, and make a darcs repo.
01:06:07 <Cale> xerox: It would be really neat (and graphics intensive in some cases) to see the L-systems get drawn with brightness determined by their probability, rather than choosing a particular random one :)
01:06:51 <Cale> hehe, now that we have these numbers floating around, let's reinterpret them :)
01:09:09 <Cale> as if the exponential growth in string length wasn't enough, eh? :)
01:14:02 * boegel kicks Muad_Dibber "Sure it it !"
01:19:15 <Cale> hmm... implementing this as a StateT has some small issues.
01:24:17 <Cale> oh, I suppose this is fine
01:26:36 <Itkovian> OT: any idea how to fix something like this: printf("haha %s %s\n", a##b, c);  \
01:26:52 <Itkovian> when used as in printf("haha %s %s\n", a##b, c);  \
01:27:01 <Itkovian> it yields : cpp.c:8:24: pasting ""jjj"" and ""kkk"" does not give a valid preprocessing token
01:27:18 <Itkovian> this is not actual used code, but the actual code I cannot paste here ...
01:27:53 <Itkovian> suppose a is a method name and b a method sig, so they should be pasted together in the preprocessor
01:28:55 <Cale> @hoogle (s -> (a,s)) -> StateT s m a
01:28:57 <lambdabot> No matches, try a more general search
01:33:03 <Cale> @hoogle (MonadState s m) => (s -> (a,s)) -> m a
01:33:04 <lambdabot> Random.getStdRandom :: (StdGen -> (a, StdGen)) -> IO a
01:33:17 <Cale> okay then
01:40:57 <xerox> Cale: mumble... we do not have probabilities attache at single lines
01:41:09 <xerox> boegel: hehe, in fact this is a complete rewrite, you'll see ;)
01:42:28 <Cale> xerox: ah, good point there :) I suppose you could use an alpha channel as an approximation
01:44:15 <xerox> Yes, it is indeed a good idea to give alpha a meaningful value.
01:45:21 <xerox> But where would I get the values from?
01:46:31 <Cale> from the probabilities :)
01:46:54 <Cale> my suggestion was basically to use the probabilities as alpha values
01:47:04 <Cale> it's a little crazy :)
01:47:08 <xerox> heh
01:47:14 <boegel> xerox: no problem, I'll put our version on the HaskLS website then, since it's 1.000 cooler than mine :)
01:48:17 <xerox> Cale: using single 'F's probabilities as alpha values would have been really tasty :-D
01:49:21 <xerox> I imagine we can change result :: .. -> String in something like WL [String :-)
01:49:36 <Cale> xerox: yeah, possibly :)
01:49:41 <xerox> hihi
01:49:49 <Cale> xerox: actually, that is maybe not so hard
01:49:59 <xerox> Ahah, I knew!
01:51:11 <Cale> er, hmm...
01:51:51 <Cale> It's just swapping some monads:  m String = m [Char]  becomes [m Char]
01:52:43 <Cale> (but do we really want to do that? :)
01:53:23 <Cale> hmm... can we just use sequence on the result?
01:54:13 <xerox> Oh!
01:55:37 <xerox> You're talking about the the codomain of the Productions' Map, right?
01:56:43 <xerox> @type sequence
01:56:45 <lambdabot> forall a (m :: * -> *). (Monad m) => [m a] -> m [a]
01:56:50 <Cale> ah, we'd change result so that it returns an [m a]
01:56:50 <boegel> xerox: do you have any new cool screenshots ?
01:57:12 <xerox> boegel: I'm designing a new GUI atm
01:57:13 <Cale> such that sequence . newResult = oldResult :)
01:57:42 <xerox> Ah! cool.
01:58:06 <Cale> hmm...
01:58:13 <xerox> boegel: if it goes like I think it goes I'll show you the koch's snowflake in some time.
01:58:15 <Cale> is this doable... :)
01:58:47 <Cale> hehe, I'm getting tired, it's 4:47am
01:58:53 <xerox> yay :-D
01:59:18 <xerox> I'll stick with this and just wonder for the moment :-)
01:59:25 <Cale> :)
01:59:34 <Cale> my RandomT works nicely btw
01:59:35 <xerox> Though it would be fun :-P
01:59:43 <xerox> Ah, cool, could I see?
02:01:12 <Cale> http://www.haskell.org/hawiki/HaskellIrcPastePage
02:03:25 <xerox> @karma+ Cale  --  you deserve it ;)
02:03:26 <lambdabot> Cale's karma raised to 1.
02:04:36 <Cale> thanks :)
02:06:05 <xerox> I think the checking version of (WL . WriterT) could stay inside WeightedList.hs, but how could I call it?
02:07:01 <Cale> fromProbabilityList ? That might be a bit long.
02:07:24 <xerox> fromWList?
02:07:48 <xerox> ..and define WList as [(a,Rational)]
02:08:18 <xerox> It wouldn't make much sense, maybe..
02:08:25 <Cale> or even just fromList, à la Data.Map
02:09:36 <Cale> runWL could as well be named toList
02:09:48 <xerox> Right.
02:09:51 <xerox> How nice.
02:10:17 <Cale> anyway, goodnight :)
02:10:27 <xerox> Goodnight Cale, sleep well! :-)
02:10:32 <Cale> :)
02:11:09 <boegel> g'night Cale !
02:12:11 <_gour> hi guys
02:12:26 <xerox> Hello _gour.
02:12:38 <_gour> xerox: do u have access to haskell.org?
02:13:19 <xerox> _gour: nope!
02:13:26 <xerox> Why?
02:13:53 <_gour> xerox:ssh login is broken as of today
02:17:24 <xerox> :-|
02:23:14 <xerox> boegel: what's your opinion in having multiple axioms?
02:25:17 <boegel> xerox: waddaya mean ? using several rules for 1 variable ?
02:25:38 <xerox> boegel: kind like the other way around :-)
02:25:44 <xerox> kinda, even
02:27:13 * boegel doesn't understand it
02:27:16 <boegel> example ?
02:28:28 <xerox> (n,["F","F+F+F+F"],...)
02:28:38 <xerox> afk bbiab
02:29:57 <boegel> with what purpose ?
02:30:28 * boegel still doesn't get it
02:30:33 <boegel> sorry man, it's Monday :)
02:32:13 <xerox> ABOP's definition talks about just one axiom, which surely makes sense.  I was trying to figure out if we could do good use of the possibility of having multiple axioms.
02:33:12 <boegel> hmm
02:33:25 <boegel> I don't see how that could be usefull
02:34:28 <xerox> We got this opportunity thanks to generalization, don't mind too much :-)
02:34:41 <boegel> :)
02:35:39 <xerox> NDOLSystem.hs is 23 lines long, with comments and whitelines :-)
02:37:21 <boegel> w00 ! :)
02:37:33 <beelsebob_> yay!
02:48:13 <svens> morning
02:50:37 <shapr> @yow ! excitement!
02:50:38 <lambdabot> Did YOU find a DIGITAL WATCH in YOUR box of VELVEETA?
02:51:17 <boegel> yo shapr
02:51:21 <boegel> excitement ? why ?
02:51:35 * xerox throws a lambda-frisbee to shapr
02:52:19 <shapr> boegel: I have a new apartment and I've been setting up.
02:52:31 * shapr catches and throws a lambda boomerang back at xerox 
02:52:47 * beelsebob_ prods shapr
02:52:52 * xerox tries to catch it but it boomerangs back to shapr !
02:52:59 * shapr ducks furiously
02:53:10 * shapr pokes beelsebob_ 
02:53:17 * beelsebob_ gets hit on the head with a lambda boomerang
02:53:26 <beelsebob_> OKAY! WHO THREW THAT????
02:53:35 * xerox hides
02:53:46 <shapr> lambdabot?
02:54:03 <xerox> Yes I saw she was playing with it!
02:54:06 <Itkovian> omg
02:54:10 <Itkovian> have fun are ya?
02:54:17 * shapr is definitely having fun.
02:54:26 * Itkovian skakes his head ... kids.
02:54:30 <Itkovian> ;-)
02:54:32 * xerox was before losing the boomerang <whistles>
02:54:37 <shapr> boegel: I don't have internet at my new apartment yet, but once I do, I'll be good to go!
02:54:50 <Itkovian> shapr: got pics?
02:55:02 <shapr> Nah, not yet. Maybe next weekend.
02:55:17 <shapr> I have three jars of peanut butter in my fridge.
02:55:20 <shapr> I need to buy food.
02:56:47 <shapr> Did I miss anything exciting over the weekend? New code or research?
02:57:19 <xerox> Oh, me, Cale, and TheHunter wrote a neat implementation of nondeterministic context-free LSystems!
02:57:21 * Itkovian was ill
02:57:23 <shapr> cool!
02:57:39 <xerox> Very very cool, do you believe it's 23 lines long?  All monadic-generalized!
02:57:40 * boegel had fun with his gf
02:57:54 <boegel> xerox: i feel a TMR article coming up :p
02:58:16 <shapr> Yes! Write a TMR article!
02:58:45 <xerox> uhuh, I think Cale was going to write one using this code as an example of how lazyness improves coposability
02:58:49 <xerox> And it _is_indeed_right_
02:58:50 * boegel wonders when a new issue is coming out
02:58:56 <shapr> boegel: Any year now...
02:59:01 <boegel> the last one was in July, so I guess it's time...
02:59:06 <beelsebob_> not fair! https://www.cs.tcd.ie/ifl05/programme.php
02:59:23 <boegel> beelsebob_: what isn't ?
02:59:25 <shapr> Seriously though, once I get 'net at home I'll put out another issue, with whatever articles are present.
02:59:38 <boegel> shapr: cool
02:59:39 <beelsebob_> boegel: 9am the day after the `excursion'
03:00:01 <boegel> that's you ?
03:00:05 <beelsebob_> yeh
03:00:12 <boegel> hhe, bad luck :)
03:00:17 <beelsebob_> indeed :(
03:00:47 <shapr> beelsebob_: Otoh, having Olaf as a coauthor is very nice :-)
03:01:07 <beelsebob_> shapr: having Olaf as a supervisor is very nice :)
03:01:45 <xerox> If one does traverse a list of [(Foo,Int)] summing Ints, the Foos will be evaluated during map (snd) ?
03:01:50 <xerox> (I really hope/think not)
03:02:04 <beelsebob_> xerox: no
03:02:07 <dons> @eval snd   (undefined, 1)
03:02:10 <beelsebob_> they're never devanded
03:02:13 <lambdabot> 1
03:02:13 <xerox> GREAT.
03:02:22 <shapr> Devanded? That's a neat word.
03:02:22 <beelsebob_> demanded*
03:02:23 <xerox> So it uses very little space.
03:02:31 <beelsebob_> but yeh, that's a cool word
03:02:40 <beelsebob_> xerox: gotta love lazy evaluation
03:04:59 <dons> it's more a love/hate relationship
03:05:43 <dons> for example, ndm's temp file code a couple of days ago. and the timeout/watchdog code posted to the list last night
03:06:01 <shapr> g'day dons
03:06:37 <beelsebob_> what was up with them?
03:06:40 <dons> and then the conflictions between [Char] and *PackedString, we love our laziness, yet we fear it too
03:07:01 <beelsebob_> heh, lazyness is good, as long as you have a healthy respect for it
03:07:09 <shapr> I think it'll get better once there's a larger FP programmer culture.
03:07:10 <dons> oh, we could only get ndm's code to work by using a `seq`. the timeout code posted to thhe list was also failing due to laziness
03:07:26 <beelsebob_> :(
03:07:51 <beelsebob_> only time I ever use seq is to drop in a debug statement
03:07:54 <dons> the difference between the broken watchdog code, and the working version, was again, a `seq`
03:08:07 <shapr> I always figure if I need seq I don't understand my code well enough.
03:08:14 <beelsebob_> yeh, ditto
03:08:44 <dons> ah, but we do love [ f x | x <- zip xs [1..] ]
03:08:51 <beelsebob_> seq (unsafePerformIO $ putStrLn "JAM!") (do normal stuff) is the only time I use it
03:10:15 <beelsebob_> mornin neil
03:12:32 <ndm> mornin bob
03:12:50 <ndm> had my winhugs patches committed, the winhugs cvs is close to being done :)
03:13:14 <dons> this code only works if there's a seq, much like ndm's code:
03:13:33 <dons> watchdogIO millis expensive cheap =
03:13:33 <dons>     do mvar <- newEmptyMVar
03:13:33 <dons>        tid1 <- forkIO $ do x <- expensive
03:13:33 <dons>                            x `seq` putMVar mvar (Just x)
03:13:33 <dons>        tid2 <- forkIO $ do threadDelay (millis * 1000)
03:13:35 <dons>                            putMVar mvar Nothing
03:13:38 <dons>        res <- takeMVar mvar
03:13:41 <dons>        case res of
03:13:43 <dons>          Just x -> killThread tid2 `catch` (\e -> warn (show e)) >> return x
03:13:46 <dons>          Nothing -> killThread tid1 `catch` (\e -> warn (show e)) >> cheap
03:13:54 <ndm> much like ndm's code?
03:13:54 * boegel decides to kick dons for pasting more than 3 lines of code
03:14:09 * boegel fails
03:14:36 <dons> I think it is a nice bit of code  :)
03:14:42 <dons> like ndm's temp file stuff from last week
03:15:35 <ndm> ah, i remember - last week is so long ago...
03:16:10 <beelsebob_> strangely... about a week ago
03:18:39 <dons> ndm, before you joined us we were talking about the discipline and bondage of laziness
03:24:45 <ndm> dons, nice
03:24:51 <ndm> i'm all for being lazy
03:25:11 <shapr> bok gour
03:25:23 <gour> shapr: bok
03:25:53 <shapr> I only know a few more words of croation so I'll stop there :-)
03:26:16 <gour> :-)
03:26:31 <shapr> gour: How's code?
03:26:33 <gour> zdravo means hello
03:26:51 <shapr> zdravo!
03:26:59 <gour> shapr: :-)
03:27:24 <gour> shapr: i have to solve some 13th chapter exer. and then 14th ch.
03:27:32 <gour> shapr: it could be better
03:27:32 <shapr> Thompson's book?
03:27:36 <gour> yes
03:27:57 <beelsebob_> interesting... close to strasveetye
03:28:36 <shapr> If your code could bebetter, do you have some questions?
03:29:33 <gour> shapr: well i'mo sure i've picked type-checking expr. properly
03:29:45 <beelsebob_> christ... another 737's fallen appart in the sky
03:30:03 * shapr blames the wright brothers.
03:30:04 <gour> shapr: i meant: i'm not sure...
03:30:22 <gour> shapr: why?
03:30:31 <shapr> Is there any particular part of type checking that you have questions about?
03:31:25 <gour> shapr: well, exerc. 13.7 & 13.8
03:31:57 <gour> shapr: i understand (regards 13.7) that I can check type with dummy definitions
03:32:07 <shapr> I don't have my Thompson book next to me, sadly.
03:32:21 <shapr> It's at my new apartment that doesn't have internet yet.
03:33:27 <gour> shapr: Qs is how to use Haskell's type system to check whether two type expr are unifiable and if so what is their unification
03:33:53 <gour> hint: use dummy defs, e.g. zircon = zircon
03:34:37 * shapr thinks
03:35:01 * gour waits
03:35:10 <shapr> I don't know, make an Eq instance?
03:35:16 <shapr> I'll have to look at that when I get home.
03:35:22 <gour> shapr: ok
03:35:25 * shapr writes down the exercise number.
03:35:44 <gour> shapr: you can write 13.8 & 13.9 - all connected
03:36:08 <gour> shapr: soon i'll be back, i have to go to the shop
03:36:19 <shapr> ok
03:36:29 <shapr> I have to work for a few hours before I go home.
03:36:48 <joao> which book are you talking about?
03:37:34 <shapr> Thompson
03:39:58 <shapr> "Haskell: The Craft Of Functional Programming" by Simon Thompson
03:42:59 <joao> oh. thanks
03:43:01 <joao> :)
03:43:09 * Itkovian eats
03:43:53 <beelsebob_> @where hsplugins
03:43:55 <lambdabot> I know nothing about hsplugins.
03:44:01 <beelsebob_> @where hs-plugins
03:44:02 <lambdabot> http://www.cse.unsw.edu.au/~dons/hs-plugins/
03:45:08 <beelsebob_> :o
03:45:12 <beelsebob_> 404 on the download
03:45:21 <shapr> Tried the darcs repo?
03:45:24 * gour returned from the shop
03:45:28 <beelsebob_> am doing
03:45:36 <Lucinda> if a function is closed, does it mean that it doesnt contain any recursion?
03:45:47 <beelsebob_> eh... works on my mac
03:45:53 <beelsebob_> not on the linux box
03:46:16 <xerox> Howdy poetix
03:46:25 <poetix> Howdy
03:46:28 <shapr> bonjour poetix
03:46:41 * shapr throws a sestina at poetix 
03:47:03 <poetix> zdravo shapr
03:47:16 * poetix gets hopelessly tangled up in the sestina
03:47:17 * shapr grins
03:47:18 <xerox> On, a packet from .hk just arrived.
03:48:09 <xerox> It's the GBA I bought to my bro, hehe.  I wonder were I could find an adapter for the alim (.hk -> .it)
03:48:37 <poetix> Assuming I actually manage to get this wrapper for libobby working, I am thinking of writing up my experiences for TMR
03:48:44 <shapr> yay!
03:48:45 * shapr cheers
03:48:53 <beelsebob_> does hs-plugins need c2hs and greencard?
03:49:17 <shapr> I don't think it needs greencard.
03:49:41 <poetix> Last night I had GHC actually compile some code output by c2hs, based on a .h file generated by stripping the "extern C"s from a .hpp file, that was the header file for a .cpp file containing only global functions that did the actual work of creating and interacting with libobby objects
03:49:52 <xerox> Build-Depends:  base,haskell98
03:50:00 <beelsebob_> at the moment I'm getting "src/Language/Hi/Parser.hs:51: ../../../config.h: No such file or directory"
03:50:09 <beelsebob_> which makes me assume configure failed
03:50:25 <beelsebob_> and the only bad messages are about c2hs and greencard... but it doesn't say they caused it to fail
03:51:14 <poetix> C++ is a pain for integrators.
03:51:22 <poetix> As well as being a pain generally.
03:51:38 <xerox> poetix: I unsuccessfully tried understanding libobby.
03:52:01 <beelsebob_> dons: ping
03:52:05 <poetix> xerox: It's all build on net6 and sigc++.
03:52:11 <sieni> C++ is a pain. Hence, it is also a pain for integrators.
03:52:31 <poetix> Net6 sends "packets" of values back and forth between the server and various clients, sigc++ is used for the clients to fire events when packets arrive
03:52:34 <xerox> poetix: I think I have big problems with understanding C++ itself.
03:53:13 <poetix> xerox: Do you know Java?
03:53:24 <xerox> Not exaclty.
03:53:45 <beelsebob_> @paste ... anyone know what's up with that?
03:53:46 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
03:53:49 <xerox> C-e <- <- <- C-t
03:53:57 <poetix> Libobby goes for a fairly java-ish style of C++, with a sprinkling of STL for its collections.
03:54:29 <xerox> I did lost the path try to understand std::pair <Key, Key>
03:54:55 <poetix> Most of the gnarly stuff is hidden away in the libraries it uses - net6 uses operator overloading, for instance, to marshall values into "packets", eg pack << value1 << value2 << value3;
03:55:17 <poetix> Looks like a pair of keys to me...;)
03:55:28 <xerox> I got ti, but.. :-)
03:55:33 <xerox> *it
03:55:48 <poetix> Is the template syntax unfamiliar to you?
03:55:55 <xerox> Yep.
03:56:11 <poetix> Think of it as a broken version of type polymorphism...
03:56:34 <poetix> data Pair a b = Pair a b
03:57:31 <poetix> type KeyPair = Pair Key Key
03:58:13 <poetix> Anyway, maybe we can look it at together in gobby later
03:58:44 <xerox> Great, thanks.
03:59:38 <poetix> This is probably naive bravado, but I don't see huge difficulties in actually making the C API.
03:59:53 <poetix> Although the fact that I don't see them yet, doesn't mean they're not there...
04:03:26 <poetix> My starting point is to try to wrap the client_buffer type, since once I can create one of those and call methods on it, I can test it with a gobby session to see how it behaves.
04:13:14 <poetix> boegel: ping
04:13:38 <poetix> @seen boegel
04:13:39 <lambdabot> boegel is in #haskell. Last spoke 59 minutes and 30 seconds ago.
04:14:17 <boegel> poetix: pong
04:14:31 <poetix> boegel: Any luck with the sudoku?
04:15:01 <boegel> no, there were 2929 possible solutions, which generates 449 possible codes which could form the answer to the prize question
04:15:04 * poetix reads yesterday's Haskell logs
04:15:17 <boegel> so impossible to try them all in the 5m I had left :)
04:15:21 <boegel> great coding though ;)
04:15:43 <poetix> There are smarter ways of solving Sudoku
04:15:57 <poetix> One of these days I'll have a stab at doing it the way Knuth suggests...
04:16:19 <boegel> cool
04:28:04 <greenrd> @pl \t -> (f t) . g
04:28:05 <lambdabot> (. g) . f
04:32:22 <dons> beelsebob_, pong
04:32:34 <beelsebob_> @paste dons
04:32:35 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
04:32:45 <beelsebob_> any idea what's up with that?
04:33:31 <dons> weird
04:33:36 <dons> today's hs-plugins?
04:33:44 <beelsebob_> yeh, darcs version
04:33:58 <beelsebob_> c2hs gives an error about not finding config files too
04:34:05 <dons> doesn't use c2hs
04:34:18 <dons> let me see, maybe I forgot to update a file
04:35:37 <dons> hmm. can't reproduce it here. what ghc do you have?
04:35:41 <beelsebob_> 6.5
04:36:08 <dons> maybe an older 6.5? I'm using Sep 5.
04:36:40 <Lucinda> does hsplugins work with 6.5?
04:36:46 <beelsebob_> hmm yes it is older... I can't compile it at the mo though... someone's using the box with 6.4 working
04:36:55 <beelsebob_> lucinda: dons writes hs-plugins
04:37:29 <dons> Lucinda, yep, it works fine with 6.5
04:37:50 <beelsebob_> I'll re-build 6.5, but it'll be a bit before I can test it
04:38:00 <dons> does config.h exist?
04:38:21 <beelsebob_> nope
04:38:29 <beelsebob_> I assumed that configure would create it
04:38:35 <beelsebob_> config.h.in does
04:38:41 <dons> yes it should. something went wrong. hmm
04:39:02 <beelsebob_> ugh... what's happened to the haskell cvs
04:39:23 <dons> oh, the configure script didn't get run!
04:39:34 <dons> only Setup.hs configure -- which should then invoke ./configure
04:39:35 <dons> hmm
04:40:20 <greenrd> @pl \f -> g (f x)
04:40:22 <lambdabot> g . ($ x)
04:40:33 <beelsebob_> tis most odd
04:41:07 <dons> well, run ./configure by hand with the --prefix flag set, and you should be on your way.
04:41:34 <beelsebob_> ahhhhhhhh!
04:41:44 <beelsebob_> configure doesn't have x set
04:41:56 <dons> ah ha!
04:42:16 * dons adds --set-scripts-executable to the webpage
04:42:38 <beelsebob_> :)
04:43:14 <dons> weird, did that really fix it for you?
04:43:18 <beelsebob_> yep
04:43:35 <beelsebob_> needs to have a permission denied error
04:46:10 <dons> pulling a fresh tree, and configure gets run for me even when not +x
04:46:25 <dons> what OS are you using?
04:46:41 <beelsebob_> gentoo
04:47:01 <dons> ok, i'll check on linux
04:47:22 <beelsebob_> hmm, that should be a bug report to apple if it does
04:47:30 <dons> hmm. configuure gets run anyway
04:47:42 <dons> no, I was using OpenBSD. but on linux it works too
04:47:59 <beelsebob_> odd
04:48:08 <dons> maybe the Cabal code to handle non-exec configures is new to 6.5
04:48:38 <dons> anyway, all working for you now?
04:48:46 <beelsebob_> I think so...
04:48:52 <beelsebob_> I'll ping you later if it isn't
04:49:12 <dons> you can install, then run the test suite to get an idea of what's working.
04:49:33 <beelsebob_> yeh... but I can't use ghc-6.5 until 1am or so
04:49:42 <dons> hehe. ok
04:50:17 <dons> 6.4 is ok, isn't it?
04:50:27 <beelsebob_> yep
04:52:51 <dons> what are you using hs-plugins for?
04:52:58 <beelsebob_> gtk2hs
04:53:01 * shapr uses it to power his laptop.
04:53:23 <beelsebob_> mine is powered by love
04:53:32 <dons> gtk2hs??
04:53:42 <beelsebob_> buh... sorry, being stupid
04:53:44 <shapr> I tried that, but my laptop kept running out of juice. I must live in a bad neighborhood.
04:53:45 <beelsebob_> and misreading you
04:54:10 <beelsebob_> keith hanna is doing a version of vital that uses true haskell
04:54:10 <dons> shapr, hs-plugins tends to drain the power from my laptop..
04:54:34 <beelsebob_> hs-plugins > love
04:54:52 <shapr> obviously.
04:55:11 <beelsebob_> unicycles > hs-plugins
04:55:19 <dons> got a link, beelsebob_?
04:57:01 <beelsebob_> dons: I think he's in the early stages of making it work
04:57:12 <beelsebob_> so I don't think it's meant to be public in any way
04:57:39 <shapr> Oh hey, I had a flat on the way home on Saturday. My 26" Gazz blew out while I was zipping along.
04:57:49 <beelsebob_> :(
04:58:02 <shapr> Yeah, I was unhappy. All the neighborhood kids were amazed though.
04:58:10 <beelsebob_> to be fair... not as bad as Raikonenn's flat yesterday
04:58:15 <shapr> ?
04:58:27 <beelsebob_> you're not an F1 fan then
04:58:43 <shapr> Nope, but I guess he's a finnish racecar driver?
04:58:49 <beelsebob_> he is
04:58:53 <dons> ok, I think I remember getting some mail from keith about it.
04:59:05 * boegel doesn't understand what's so great about F1
04:59:25 <beelsebob_> boegel: you have to get into it and support someone for it to be fun
04:59:30 <beelsebob_> ... and the crashes
04:59:38 <shapr> boegel: I got my first flicker of interest in F1 after trying the F1 car in TORCS.
04:59:56 <beelsebob_> in TORCS?
05:00:09 <shapr> http://torcs.sourceforge.net/
05:00:28 <shapr> I wish TORCS had network play, that would rock.
05:00:56 <beelsebob_> that would
05:01:58 <beelsebob_> ... and the fact that it's an amazing feat of engineering
05:13:01 <cbus> hey
05:13:21 <shapr> y0
05:13:22 <cbus> haskell+opengl...
05:13:27 <cbus> hard to start coding? ;)
05:13:57 <cbus> and how limited is it?
05:14:01 <cbus> are extensions available?
05:14:26 <shapr> Check the archives of the HOpenGL mailing list, and look at the demo programs.
05:14:38 <cbus> just got this stupid idea on the bus to try it out :)
05:14:52 <shapr> I'd like to try it also.
05:14:58 <cbus> my haskell knowledge isnt that great and neither is my opengl (anymore)
05:15:06 <cbus> coded ogl for some year but that was 3 years ago ;)
05:15:11 <shapr> Oh hey, lispy ported some of the NeHe lessons to HOpenGL, and Lemmih did some too.
05:15:14 <cbus> any dx bindings available? ;)
05:15:18 <shapr> @where lispy-nehe
05:15:19 <lambdabot> I know nothing about lispy-nehe.
05:15:25 <shapr> @where lispy
05:15:26 <lambdabot> I know nothing about lispy.
05:15:31 <shapr> Man, I want a wildcard search.
05:15:33 <shapr> @where lispy*
05:15:34 <lambdabot> I know nothing about lispy*.
05:16:33 <cbus> gonna check it out i think
05:16:38 <shapr> cbus: http://www.codersbase.com/Nehe-tuts
05:17:31 <cbus> hmm brb
05:18:37 <greenrd> There is no special name for (\a b -> a && (not b)) is there?
05:19:56 <Lemmih> @pl \a b -> a && not b
05:19:58 <lambdabot> (. not) . (&&)
05:25:41 <Itkovian> seems like that TORCS stuff has problem with the DB
05:28:09 <boegel> cbus: you could check out HaskLS, that uses HOpenGL
05:28:45 <ulfdoz> re
05:30:27 <Itkovian> btw, who mentioned the q3 repos here?
05:32:16 <shapr> lispy did.
05:34:41 <Itkovian> hmm, ok
05:34:46 <Itkovian> lispy: got you.
05:34:58 <Itkovian> lispy: have you tried that code on macosx?
05:36:05 * gour is away: busy
05:39:10 <greenrd> @hoogle (a -> b) -> [m a] -> [m b]
05:39:11 <lambdabot> List.genericTake :: Integral a => a -> [b] -> [b]
05:39:11 <lambdabot> List.genericDrop :: Integral a => a -> [b] -> [b]
05:58:36 <shapr> I am amazed at the incompetence of phone companies, especially Telia.
05:59:46 <shapr> But I have a plan to kill off all the big phone companies.
06:00:05 <resiak> Does it involve lasers ?
06:01:10 <boegel> yo Oejet
06:01:21 <shapr> resiak: No, it involves WiMAX actually.
06:01:36 <Oejet> Hej, boegel.
06:01:46 <resiak> I seeeee
06:07:23 <Hatchetma> anyone know a thing or two about memory brands?
06:07:55 <shapr> Get Kingston
06:08:13 <shapr> Corsair is more expensive, but not really worth it imho.
06:08:34 <shapr> Past that, caveat emptor
06:08:50 <Hatchetma> yeah, the thing is...i'd like kingston...but this shop in the street here only has Adata
06:08:58 <Hatchetma> that brand doesnt really say anything to me
06:09:01 <shapr> So, don't get it. Order online.
06:09:10 <shapr> I've never had problems with Kingston memory.
06:09:21 <boegel> _and_ it has lifelong guarantee
06:09:34 <Hatchetma> any recommendations on online shops?
06:10:10 <Hatchetma> i know its horribly off topic....
06:10:44 <shapr> I can suggest some in Sweden...
06:10:48 * gour is back.
06:10:59 <Hatchetma> hehe im in the netherlands :D
06:11:06 <Hatchetma> my bad for asking it here....
06:11:10 <gour> adata is also ok
06:11:13 <Hatchetma> i forgot not everyone lives in holland
06:11:17 <Hatchetma> gour knows adata?
06:11:52 <gour> yes, many are buying it in croatia
06:12:06 <gour> and saw few reviews in the past...
06:12:10 <Itkovian> Hatchetma: try www.mpl.be, I think they deliver in Holland too ... worth to check anyway
06:12:15 <gour> ..maybe anandtech or some otehr forums
06:12:34 <Hatchetma> what about twinmos....
06:12:48 <Hatchetma> Itkovian, thanks for the link. i will have a look
06:12:52 <gour> don't know
06:12:55 <Itkovian> yw
06:12:56 <Hatchetma> k
06:13:16 <Hatchetma> im in doubt because im building this superpc and dont want some dodgy mem screwing things up
06:13:26 <gour> take oz :-)
06:13:39 <Hatchetma> what does oz stand for?
06:14:16 <gour> err: ocz
06:14:52 <boegel> Hatchetma: if you're building a superpc, Kingston is the way to go
06:14:54 <Itkovian> if it's a pc it won't be super, by any standard
06:14:59 <Itkovian> so don't worry.
06:15:09 <boegel> Itkovian: f*ck off will you :)
06:16:02 <Itkovian> no, really. And I don't mean that a mac is better, I'm talking about real workstations
06:16:33 <Hatchetma> my selected mb is also known to work very well with kingston i read....
06:16:44 <gour> which one
06:17:15 <Hatchetma> asus a8n sli deluxe
06:17:28 <boegel> Itkovian: my workstation here works perfect for me now
06:17:35 <Itkovian> it's a bloody pc.
06:17:37 <gour> ok, i'm with old dfi lp3 ;)
06:17:59 <Itkovian> ah .. asus .. quite good gear
06:18:04 <boegel> Itkovian: so, atleast I'm not crippling my back with an iBook that is way too small :)
06:18:20 <Itkovian> not my fault they make them desks so low
06:18:30 <boegel> your desk is fine :)
06:18:37 <greenrd> @pl (flip f) . (return .)
06:18:38 <lambdabot> flip f . (return .)
06:18:48 <boegel> btw, you can raise your desk if you want to
06:18:55 <Itkovian> and I don't have an iBook
06:19:04 <Itkovian> man, how could I miss that
06:19:08 <boegel> Itkovian: whatver, the little white thing
06:19:09 <Itkovian> it's a POWERBOOK!
06:19:17 <Itkovian> and it's aluminium!
06:19:25 <greenrd> @pl flip ((flip f) . (return .))
06:19:26 <lambdabot> (. (return .)) . f
06:19:33 <Itkovian> yr just jealous, eh ;-)
06:19:38 <boegel> well, the little aluminium thing that cripples your back then
06:19:52 <boegel> no, I'm not :) my laptop is doing fine for the stuff I need to do
06:20:12 <boegel> no way in hell I'm spending €1500 on something that will cripple my back (even more than it is now)
06:20:55 * boegel sees how Itkovian is boiling up
06:23:34 <Itkovian> pompom
06:23:43 <Itkovian> I'll kick you tomorrow when I see you
06:23:50 <boegel> no you won't :)
06:23:54 <boegel> I'll kick back
06:23:55 <boegel> harder
06:24:02 <Itkovian> hmm, I'll hide behind Jan
06:24:05 <Itkovian> lol
06:24:10 <boegel> and then pretend you broke my ass and sue you :)
06:32:34 <poetix> Oh, get a room, you two... ;)
06:33:39 <boegel> poetix: we are in a room, wtf are _you_ doing in here ! you dirty old man
06:34:10 <shapr> yow!
06:34:17 <boegel> y0
06:35:00 <shapr> Anyway, isn't poetix younger than me?
06:35:12 * shapr has a birthday in two weeks.
06:36:53 * poetix has a birthday in about 7 and a half weeks
06:37:20 <shapr> How old will you be?
06:37:26 <poetix> 31
06:37:51 * boegel has a birthday in a month and a day
06:37:54 <shapr> Yes, I'm older than you.
06:38:01 <shapr> I'll be 34.
06:39:36 * boegel sings: "Dirty old maaa-aaann"
06:39:38 <boegel> :p
06:40:41 <poetix> You young whippersnappers...!
06:40:50 <shapr> I'm a clean old man.
06:40:51 <poetix> Stop snapping those whippers at once!
06:40:59 * shapr takes a shower every day.
06:42:11 * poetix fears he is slowly turning into Wilfred Bramble
06:42:46 <poetix> http://www.mgnet.karoo.net/steptoeandson.htm <- Classic Steptoe and Son image
06:44:42 <poetix> My son started proper school today
06:45:00 <poetix> (he's already had a year in the reception class)
06:45:35 <poetix> Oh, hey - that reminds me - why do anarchists drink herbal tea?
06:45:40 <xerox> Somebody could suggest a good name for the LSystems renderer?  (and if his creative vein is on fire, maybe a logo too? :-D)
06:46:24 * poetix waits for someone to say, "I don't know, why *do* anarchists drink herbal tea?"
06:46:48 <xerox> "I don't know, why *do* anarchists drink herbal tea?"
06:46:54 <poetix> Because proper tea is theft!
06:47:08 * xerox checks the script
06:47:12 <xerox> "ooooh"
06:47:12 <Muad_Dibber> I don't knokw, why *do* junks drink drugs?"
06:48:24 <poetix> D'y'geddit? D'y'geddit? Proper tea == property! ROFLMAO, guffaw, titter etc.
06:48:59 * poetix dies on his arse
06:49:46 * xerox hehs
06:52:58 <greenrd> @pl (flip f) . g . h
06:52:58 <lambdabot> flip f . g . h
06:53:14 <greenrd> @pl flip ((flip f) . g . h)
06:53:15 <lambdabot> (. (g . h)) . f
06:54:12 <boegel> xerox: well, your using Cairo and L-systems, right ? anything else?
06:54:22 * gour is away: short nap :-)
06:55:17 <shapr> So, I can't get DSL without a phone number, and a new phone subscription costs about a hundred euro. DSL costs forty euro per month, has a one hundred euro startup fee, and it takes them ten days to turn it on, after which it will take them a week to send me the login and password. Is it any better in other countries?
06:55:29 <xerox> boegel: exactly
06:56:04 <earthy> shapr: yes, it is.
06:56:07 <boegel> xerox: what about 'Osiris', since that's the Egyptian god of fauna and flora (link with L-systems), and Caïro is the Egyptian capital...
06:56:21 <xerox> boegel: Nice one.
06:56:33 <boegel> xerox: but maybe that's too common ?
06:56:42 <xerox> Sounds good, but I don't know.
06:57:00 <boegel> hosiris ?
06:57:09 <xerox> Urgh.
06:57:11 <boegel> :)
06:57:16 <boegel> thought so
06:57:17 <poetix> Osiris was also one of the pseudonyoms of ODB, god rest him.
06:57:29 <boegel> ODB ? Old Dirty Bastard ? :)
06:57:33 <poetix> That's right.
06:57:34 <xerox> poetix: what do you think?
06:57:49 <poetix> I like Osiris.
06:58:00 <shapr> I think I should be able to put in my credit card number, my address, and have DSL immediately.
06:58:07 <greenrd> Is there a more efficient way of doing (zipWith f x [1..(length x)]) ?
06:58:12 <earthy> you can get DSL+VoIP for EUR 35/month, but only in specific areas
06:58:31 <boegel> xerox: papyrus, a Haskell L-system renderer built upon Caïro
06:58:44 <xerox> osiris was better, IMO.
06:58:50 <earthy> but getting just DSL costs from EUR 20/month up, and can be setup within two weeks
06:58:53 <poetix> shapr: Send me your credit card number, your address, your date of birth, your mother's maiden name and a .png of your signature, and I promise you you'll have DSL immediately
06:58:56 <boegel> I think papyrus sounds better :)
06:59:06 <poetix> Papyrus ought to be a rendering canvas
06:59:30 <boegel> poetix: yeah, Osiris sounds cool, but it's used for so many things...
06:59:45 <poetix> greenrd: (zipWith f x [1..])
06:59:56 <boegel> http://www.inthelight.co.nz/spirit/egyptiangods/images/osiris.gif -> basis for Osiris logo :)
07:00:08 <greenrd> poetix: Aha! Of course!
07:00:14 <xerox> Cool!
07:00:29 <boegel> xerox: want me to try a logo ?
07:00:36 <xerox> boegel: it would be nice :-)
07:01:01 <boegel> kay, lemme see :)
07:01:57 * shapr has a conniption
07:04:52 <shapr> Right, so here's the plan... WiMAX devices have 30km line of sight range, 72Mpbs bandwidth, and can be both client and access point. If mobile phones use this technology, operators will only make money off the long-haul cables, and consumers will save lots of money.
07:07:33 * shapr gives up on work for today.
07:08:07 <Muad_Dibber> go shapr, go shapr :P
07:08:54 <Muad_Dibber> anybody know if the benq dw 1640 is a decent dvd burner or knows a better place to ask? :P
07:10:23 <Hatchetma> most burners are fine arent they?
07:11:01 <Muad_Dibber> well
07:11:08 <Hatchetma> http://www.extrememhz.com/dw1640-p1.shtml
07:11:12 <Muad_Dibber> i just noticed them for sale at a price of 50 euros
07:11:29 <Muad_Dibber> so i wonder why they are cheaper than the others and whether to buy one or not :P
07:15:01 <Hatchetma> i wonder if there will be games in the coming 4 years that will require more then 2 gb memory
07:16:01 <Muad_Dibber> doubtfull
07:16:59 <Muad_Dibber> games that are created which prohibits more than 80% of the market to play them are not going to be very succesfull i think
07:17:19 <Hatchetma> im in doubt to either do 4x512mb or 2x1gb memory
07:17:21 <greenrd> @pl flip (\p -> (flip z) f)
07:17:22 <lambdabot> flip (const (flip z f))
07:17:50 <greenrd> @pl flip (\p -> (flip z) (f p))
07:17:51 <lambdabot> (. f) . z
07:19:39 <boegel> xerox: I have something, but something is missing, any idea's ?
07:19:50 <boegel> http://elis.ugent.be/~kehoste/osiris_logo.png
07:21:12 <Muad_Dibber> why are so many things called osiris?
07:21:29 <boegel> voila ! :) that was my first idea, but it sounded too common :)
07:21:43 <boegel> Muad_Dibber: because Osiris is the best known Egyptian God probably
07:22:03 <Muad_Dibber> so, thats a good reason not to call something osiris :P
07:22:31 <Muad_Dibber> get a suitable name
07:22:35 <Hatchetma> im with muad on this one lol, osiris sounds gay
07:22:43 <Hatchetma> with all due respect to gays
07:23:03 <boegel> ok then, so new new
07:23:25 <boegel> related to: Haskell, gtk2hs, L-systems (generate trees and nice images) and cairo
07:23:33 <boegel> I think the last too should be in ...
07:23:58 <poetix> xerox: Aristid Development
07:24:53 * boegel brainstorms
07:25:06 <poetix> (after Aristid Lindenmeyer, natch)
07:25:19 <Muad_Dibber> damn you boegel
07:25:35 <Muad_Dibber> at home i have a book of world mythology so i could easily look into egypt mythology
07:25:38 <Muad_Dibber> but i aint at home
07:26:30 <boegel> "and the symbol of the god Heh was a palm branch" -> ...HeHa....
07:28:00 <poetix> Hactint
07:28:15 <Muad_Dibber> QETESH is the nature goddess, meaning she'll grow the trees :P
07:28:15 <xerox> Hmm
07:28:24 <poetix> Oh, I like QETESH
07:28:34 <xerox> boegel: I think the logo should fit some dimensions, and a icon-dimensioned image could be nice too :-D
07:28:38 <Muad_Dibber> you dnot need capslock on poetix :P
07:28:44 <xerox> Osiris is nice, isn't it? :)
07:29:06 <xerox> Qetesh is nice too!
07:29:11 <xerox> It's same-lenght too
07:29:11 <boegel> yeah, it is
07:29:25 <boegel> and it has a 'H' in it, for Haskell :)
07:29:31 <poetix> "Qetesh!" - "bless you!"
07:29:32 <boegel> QetesH
07:29:35 <xerox> Now you have to go to Egyptian-mythology-place and take a pic oc qetesh
07:29:36 <xerox> *of
07:29:45 <Hatchetma> i'd call it...abomination
07:29:48 <xerox> I'll not write it with H. :-)
07:30:27 <Muad_Dibber> hmm
07:30:40 <Muad_Dibber> not all sites list Qetesh as goddes of nature actually
07:30:54 <Muad_Dibber> but at least she was goddes of Goddess of love and beauty
07:30:56 <boegel> "Goddess of love and beauty, often associated with or compared to
07:30:56 <boegel> Hathor." ???
07:31:04 <Muad_Dibber> yup, thats what i meant
07:31:27 <poetix> Just beware of ancient curses, the wrath of the mummy, thunderous death metal, falling pyramids and other scary Egyptian things
07:31:32 * boegel doesn't like qetesh
07:31:42 <xerox> Ok..
07:31:49 <poetix> Qetesh doesn't like boegel.
07:31:55 <xerox> Ooh.
07:31:58 <poetix> She's the goddess of love and beauty!
07:32:10 <poetix> You want that dung-beetle god. I bet he'd be your friend.
07:32:17 <poetix> </flamage>
07:32:22 <boegel> what about Hathor ?
07:32:27 <Hatchetma> haha
07:32:28 <xerox> ...
07:32:28 <Muad_Dibber> the same boegel
07:32:36 <Hatchetma> i dig the dung-beetle proposal
07:32:38 <boegel> Muad_Dibber: same what ?
07:32:42 <Muad_Dibber> The cow goddess Hathor (Athyr in Greek) was an old protector of music, dancing and love.
07:32:42 <xerox> lsystemsrenderer
07:32:50 <poetix> I'm feeling the capital H.
07:32:53 * xerox too.
07:32:55 <Muad_Dibber> qetesh was an imported god
07:33:05 <Hatchetma> tssss
07:33:09 <xerox> import qualified Qetesh
07:33:14 <poetix> Send 'em back! They come over here, stealing our ambrosia...
07:33:16 <Muad_Dibber> imported as in probably the egyptians conquered some place where they honored Qetesh
07:33:27 <xerox> Any other choices?
07:33:31 <Muad_Dibber> Hathor is the egyptian own god for the same branch
07:33:45 <boegel> http://members.aol.com/egyptart/khepri.html -> that's just nasty !
07:33:59 <Muad_Dibber> playing ancient god is just like running a modern multinational :P
07:34:43 * boegel gives up
07:34:46 <xerox> Noo :(
07:34:52 <xerox> We keep Osiris?
07:35:05 <boegel> I think Hathor is quite good actually
07:35:26 <boegel> although there's no real relation with L-systems
07:35:34 <xerox> Apart from the H, what's its meaning?
07:36:39 <boegel> cow goddess :|
07:36:43 <Hatchetma> i still think TripleH is the way to go
07:36:50 <xerox> HHHator?
07:37:42 <boegel> maybe you just need the Egyptian symbol for plants/trees...
07:38:39 <boegel> http://www.egyptianmyths.net/tree.htm
07:38:55 <boegel> nehet ?
07:39:02 <boegel> hanehet ?
07:39:14 <xerox> hane is a Go move, heh
07:39:26 <boegel> coincidence :p
07:39:35 <boegel> no good ?
07:39:37 <Hatchetma> no tripleH is an awesome wrestler...and it contains an H...which haskell also does....perfect match :P
07:39:51 <xerox> Why `TripleH ' ?
07:40:05 <xerox> Nymphea ?
07:40:14 <Hatchetma> TripleH is the best wrestler (after Batista)....
07:40:17 <xerox> (Nymphea caerulea is blue lotus)
07:40:23 <Hatchetma> reason enough :D
07:40:27 <xerox> ...
07:40:45 <boegel> Nymphea sounds nice
07:40:47 <xerox> http://www.aboutgardenplants.com/plantlist.shtml
07:40:50 <xerox> Or one of these
07:41:12 <xerox> Psychotria in nice ;)
07:41:17 <Hatchetma> does anyone happen to know a good crowded channel to discuss hardware stuff like memory, mobo's, psu's....basically for anyone interested in building his own pc
07:41:21 <xerox> It's a genus, as much as Nymphaea
07:41:31 <Muad_Dibber> well, we also have Ptah
07:42:19 <boegel> ZAHUR: Male Egyptian and African Swahili name meaning "flower."
07:42:24 <xerox> poetix: do you like psychotria?
07:43:00 <boegel> http://www.kingtutshop.com/Egyptian-Herb/Egyptian-Lily.htm -> xerox Nymhaea has Egyptian connection too
07:43:07 <xerox> Oh cool.
07:43:12 <Muad_Dibber> since Ptah is the name of the egyptian Creator god
07:43:16 <boegel> but I think when people will search for it, they'll search for Nymphea
07:43:25 <Muad_Dibber> nymhaea is nice yeah
07:43:32 <boegel> +p
07:43:46 <xerox> Very cool
07:43:52 <xerox> Decided!  Nymphaea.
07:43:54 * Muad_Dibber isnt from the spelling division :P
07:44:02 <boegel> now we just need a nice Lily pic
07:44:39 <boegel> http://www.joysikorski.com/0409lily.GIF -> nr. 6 ?
07:45:12 <xerox> I'll go back to code for a little while
07:45:42 <boegel> well, it's decided now, I'll look into a nice logo later on, I should get some work done
07:46:14 <boegel> acke- acke- tuut tuut ?
08:08:19 * boegel leaves for home
08:13:12 <Muad_Dibber> tata
08:47:11 <kosmikus> exit
08:47:14 <kosmikus> sorry
08:47:49 <Muad_Dibber> yeah, just leave us. :)
08:48:46 <kosmikus> my computer was just too slow :)
09:24:40 <xerox> @hoogle Word16 -> Int
09:24:42 <lambdabot> Prelude.floatDigits :: RealFloat a => a -> Int
09:24:42 <lambdabot> Prelude.exponent :: RealFloat a => a -> Int
09:24:42 <lambdabot> Prelude.fromEnum :: Enum a => a -> Int
09:24:45 <xerox> @hoogle Word16 -> Double
09:24:46 <lambdabot> Prelude.realToFrac :: (Real a, Fractional b) => a -> b
09:24:46 <lambdabot> Prelude.round :: (RealFrac a, Integral b) => a -> b
09:24:46 <lambdabot> Prelude.floor :: (RealFrac a, Integral b) => a -> b
10:27:22 <z0d> shapr: about 1.5 year ago there was a discussion about a Haskell NNTP library. have you finished it?
12:23:09 <basvandijk> Is there a standard function that converts a String into an Integer. For example:
12:23:09 <basvandijk> toInteger "301" => 301
12:24:12 <jyp> read
12:24:20 <arjanb> read x :: Integer
12:26:09 <goron> @seen Lemmih
12:26:10 <lambdabot> Lemmih is in #haskell. Last spoke 7 hours, 6 minutes and 13 seconds
12:26:10 <lambdabot> ago.
12:26:28 <goron> Lemmih: ping
12:26:38 <basvandijk> arjanb: thx
12:26:54 <goron> @seen SyntaxNinja
12:26:55 <lambdabot> I saw SyntaxNinja leaving #haskell 14 hours, 56 minutes and 29
12:26:55 <lambdabot> seconds ago.
12:27:43 <xerox> psst.
12:28:37 <goron> "The MSN servers are not available at this time".... why doesn't everyone have Jabber?
12:41:44 <Muad_Dibber> goron: or Google talk
13:17:26 <Itkovian> night all.
13:19:29 <goron> evening
13:47:33 <humasect> what became of the Assoc type?
13:47:56 <xerox> Do you mean [(a,b)]?
13:48:01 <goron> It was abducted by aliens.
14:04:23 * boegel|home greets everyone
14:06:40 <xerox> Hey hey hey
14:07:22 <boegel|home> xerox: any new screens ?
14:15:32 <xerox> Nope, I got bored writing the GUI.
14:16:15 <xerox> I want to refactor the GUI interaction code, but I *yawn* :-)
14:16:44 <boegel|home> heh
14:16:52 <boegel|home> I'm kinda tired too
14:18:51 <xerox> Just talking with you renews the excitement about the thing, though :-)
14:24:57 <xerox> @wiki HaskellIrcPastePage
14:24:58 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
15:05:03 <humasect> *Main> main
15:05:03 <humasect> Fatal signal: Segmentation Fault (SDL Parachute Deployed)
15:05:03 <humasect> ghci would be great to use, i wonder what it wrong. =(
15:16:39 <poetix> xerox: ping
15:18:21 <xerox> Pong!
15:19:02 <poetix> xerox: darcs get http://www.codepoetics.com/repos/code
15:20:21 <xerox> Cool, let me see.
15:20:38 <ulfdoz> bye
15:20:48 <xerox> Bye ulfdoz
15:22:13 <xerox> poetix: the two bound functions, along with the commented functions are _all_ the defined functions?
15:22:21 <poetix> So far
15:22:39 <poetix> I just wanted to get it working end-to-end with the most minimal set of actual functions...
15:23:06 <poetix> Then when I had a working build environment, to start implementing the rest
15:25:33 <xerox> I'm reading
15:25:55 <xerox> newtype ClientBuffer = ClientBuffer (Ptr ())
15:25:56 <xerox> deRef (ClientBuffer a) = a
15:26:07 <xerox> Do you really need something like this?
15:26:34 <poetix> It's the only thing I've tried so far that c2hs didn't bitch about
15:26:43 <xerox> heh.
15:26:46 <poetix> Which isn't to say that it's necessary, or right
15:27:00 <poetix> Just a quick hack to get something working
15:27:21 <xerox> In fact I think you don't have to dereference it, thanks to Haskell's FFI
15:27:46 <xerox> Also the .hs file produced by c2hs is in the repo, it isn't needed right?
15:27:57 <poetix> No, I should remove it
15:29:05 <poetix> It's gone
15:29:18 <poetix> darcs + ssh = sweetness
15:29:30 <xerox> Indeed.
15:30:15 <poetix> There isn't much to read - what's most important about that handful of files is what's missing, namely all the things I got wrong while I was trying to get the build to work end-to-end
15:30:35 <poetix> I still don't know if I can compile a real working Haskell program that uses the resulting .hs file
15:30:54 <poetix> But I don't have time to find out this evening! I have to go to bed...
15:31:20 <xerox> Oh, I was trying to figure out how to use c2hs for clientBufferPtr
15:31:38 <poetix> Let me know if you have any luck...
15:31:49 <xerox> Sure
15:31:54 <poetix> I'll be back here tomorrow
15:32:01 <xerox> Goodnight, see you tomorrow.
16:11:03 <tennin> hello
18:32:31 <SyntaxNinja> w00t
18:34:04 <Igloo> ?
18:34:08 <SyntaxNinja> hi Igloo
18:34:11 <Igloo> Yo
18:35:26 <SyntaxNinja> I seem to be not very good at remembering my nickserv password
18:36:10 <Igloo> Are the new FN policies causing you grief?
18:36:32 <SyntaxNinja> a little bit, not too bad.
18:36:54 <SyntaxNinja> although it was annoying yesterday when nickserv wasn't responding, so I cuoldn't identify and therefore couldn't msg ppl
18:47:12 * Igloo hasn't decided on whether or not it's a good thing, assuming it has the desired effect
18:51:55 <SyntaxNinja> so there was a spam epidemic? I didn't get any
18:52:46 * Igloo neither, but I'm not on any mainstream channels
18:53:30 <SyntaxNinja> this isn't mainstream?
18:53:44 <dons> we're not the mainstream?! *gasp*
18:55:42 <SyntaxNinja> heh. when motorcycles drive by outside and rev their engines, my cat gives them this look like, "god, what an idiot"
18:59:42 <SyntaxNinja> dons: any luck w/ hackage?
19:00:41 <dons> haven't had time yet. paper reviews and a talk to give. should have some time after today.
19:01:14 <Lemmih> 'morning guys.
19:01:18 <dons> hmm. cabalAndLoad would be nice for my yi demo..
19:01:38 <dons> then I don't have to type 'make' in the shell. just have to port yi to cabal..
19:02:17 <SyntaxNinja> :)
19:02:20 <SyntaxNinja> hi Lemmih
19:02:24 <SyntaxNinja> cabalAndLoad will rule
19:02:56 <dons> I think I actually need it to make this yi demo flow nicely, or at least have a `wow' factor
19:03:54 <dons> morning Lemmih
19:04:38 <SyntaxNinja> I'll cheer
19:04:44 <SyntaxNinja> what day is your demo?
19:05:51 <Igloo> cabalAndLoad?
19:05:54 <dons> oh, I'm giving a practice talk today, and thinking about a quick demo during my HW talk
19:07:02 <dons> cabalAndLoad is like hs-plugins make() and load(), except it uses cabal to rebuild everything properly, not just a single .o file
19:07:14 <dons> it only exists as an idea though
19:08:04 <SyntaxNinja> feel free to prioritize implementing cabalAndLoad over testing cabal-get ;)
19:08:28 <dons> oh, ok!
19:08:44 <dons> good thing appending to my todo list is O(1)
19:08:58 <SyntaxNinja> did you put it at the beginning, or end?
19:09:10 <SyntaxNinja> I'm wondering if I'll get to see your HW talk
19:09:24 <dons> well, i guess it is a todo queue, so it'll find its own location
19:10:07 <dons> you won't be at the haskell workshop?
19:11:24 <SyntaxNinja> oh good, we're on the same day
19:11:55 <Igloo> It's fairly hard not to be, given it's a 1 day workshop
19:12:04 <SyntaxNinja> oh hm yeah
19:12:09 <SyntaxNinja> I guess I was thinking of CUFP
19:12:09 <dons> hehe
19:13:42 <Igloo> The CUFP line-up looks good, but I couldn't afford to go to it as well, unfortunately
19:18:11 <SyntaxNinja> oh, yeah, I'm giving a talk at TFP on the day of CUFP
19:21:14 <SyntaxNinja> we should probably have a #haskell party at some point
19:21:38 <SyntaxNinja> maybe we could plan something for the 29th; between ICFP and HW
19:21:59 <dons> sounds good to me.
19:22:09 <SyntaxNinja> think you'll be done w/ your talk? ;)
19:22:40 <SyntaxNinja> feel free to prioritize implementing cabalAndLoad over partying on the 29th ;)
19:22:48 <dons> :p
19:23:07 <SyntaxNinja> we need shapr to come so we have a social director
19:23:15 <SyntaxNinja> @seen shapr
19:23:16 <lambdabot> shapr is in #haskell. Last spoke 12 hours, 15 minutes and 43 seconds
19:23:16 <lambdabot> ago.
22:10:21 <olliej> dammit, why does compiling with dotnet require the ms c++ compiler??
22:51:52 <araujo> Hello hello
22:52:06 <araujo> Where can i get the result of the ICFP of this year?
22:52:06 <ulfdoz> re
22:53:42 <TheHunter> http://icfpc.plt-scheme.org/
22:54:06 <araujo> Thanks TheHunter
23:14:36 <TheHunter> rory
23:14:43 <TheHunter> oops, sorry.
